1
00:00:21,439 --> 00:00:23,600
hello everyone um i guess

2
00:00:23,600 --> 00:00:26,160
congratulations on making it uh to the

3
00:00:26,160 --> 00:00:28,800
uh the closing of the hackathon

4
00:00:28,800 --> 00:00:31,199
hopefully it's been a productive you

5
00:00:31,199 --> 00:00:33,440
know week for you um probably a bit of a

6
00:00:33,440 --> 00:00:35,200
tiring week as well

7
00:00:35,200 --> 00:00:37,200
but uh but if you accomplish some some

8
00:00:37,200 --> 00:00:38,879
good things then that that makes it all

9
00:00:38,879 --> 00:00:41,040
worthwhile and uh

10
00:00:41,040 --> 00:00:42,320
i know this is

11
00:00:42,320 --> 00:00:44,239
this is my favorite part especially when

12
00:00:44,239 --> 00:00:46,320
we're in the um

13
00:00:46,320 --> 00:00:48,320
online and in this virtual format

14
00:00:48,320 --> 00:00:49,280
because

15
00:00:49,280 --> 00:00:51,360
uh you know usually i like to go around

16
00:00:51,360 --> 00:00:52,960
at a different table see what people are

17
00:00:52,960 --> 00:00:54,800
working on kind of learn that as the

18
00:00:54,800 --> 00:00:56,320
hackathon's going on that's a little

19
00:00:56,320 --> 00:00:58,960
more challenging to do in this format

20
00:00:58,960 --> 00:01:00,160
but when we come together for the

21
00:01:00,160 --> 00:01:01,600
closing it's really

22
00:01:01,600 --> 00:01:03,680
really great to see what everyone was

23
00:01:03,680 --> 00:01:06,080
able to do during the course of the week

24
00:01:06,080 --> 00:01:09,280
and some of you i touched face with

25
00:01:09,280 --> 00:01:11,360
in gather and elsewhere but some of you

26
00:01:11,360 --> 00:01:12,880
i haven't really even had a chance to do

27
00:01:12,880 --> 00:01:14,400
that so

28
00:01:14,400 --> 00:01:16,080
really looking forward to to all the

29
00:01:16,080 --> 00:01:18,479
presentations

30
00:01:18,479 --> 00:01:20,720
and let's see we are just about the top

31
00:01:20,720 --> 00:01:23,360
of the hour um

32
00:01:23,360 --> 00:01:25,600
first of all is my audio coming through

33
00:01:25,600 --> 00:01:28,159
okay this is a different computer for me

34
00:01:28,159 --> 00:01:31,360
on a hotel network or on a hotel network

35
00:01:31,360 --> 00:01:32,720
works great

36
00:01:32,720 --> 00:01:36,000
okay great thanks

37
00:01:36,159 --> 00:01:37,280
um

38
00:01:37,280 --> 00:01:38,640
and actually i'm traveling for a

39
00:01:38,640 --> 00:01:40,400
conference and

40
00:01:40,400 --> 00:01:42,079
things are starting to

41
00:01:42,079 --> 00:01:43,600
pick up a little bit looks like there's

42
00:01:43,600 --> 00:01:46,240
a chance our next hackathon will be

43
00:01:46,240 --> 00:01:48,079
in person kind of fingers crossed that

44
00:01:48,079 --> 00:01:51,200
we get good news on that

45
00:01:51,200 --> 00:01:53,360
we'll see how things go

46
00:01:53,360 --> 00:01:54,479
so um

47
00:01:54,479 --> 00:01:56,079
yeah i'm going to go ahead and get

48
00:01:56,079 --> 00:01:59,200
started this is uh being recorded

49
00:01:59,200 --> 00:02:00,719
so um

50
00:02:00,719 --> 00:02:02,719
in case you miss any parts of it but i

51
00:02:02,719 --> 00:02:04,880
figure yeah best to jump in i know it's

52
00:02:04,880 --> 00:02:06,640
it could be a very inconvenient time for

53
00:02:06,640 --> 00:02:07,840
some of you

54
00:02:07,840 --> 00:02:12,080
so we'll uh we'll get going on that

55
00:02:13,360 --> 00:02:14,480
okay

56
00:02:14,480 --> 00:02:16,800
uh just a quick reminder you probably

57
00:02:16,800 --> 00:02:18,319
all know this but this is more for

58
00:02:18,319 --> 00:02:20,879
people who are tuning in perhaps just to

59
00:02:20,879 --> 00:02:23,200
hear these results that a lot of you

60
00:02:23,200 --> 00:02:26,160
accomplished the the whole goal with the

61
00:02:26,160 --> 00:02:28,000
hackathon is really to speed up and

62
00:02:28,000 --> 00:02:29,760
improve the work that we're doing in the

63
00:02:29,760 --> 00:02:30,959
ietf

64
00:02:30,959 --> 00:02:32,560
to to work on

65
00:02:32,560 --> 00:02:34,720
um implementing standards as we're

66
00:02:34,720 --> 00:02:37,040
defining them to get more running code

67
00:02:37,040 --> 00:02:38,879
related to those standards that not only

68
00:02:38,879 --> 00:02:42,080
helps make the standard better but makes

69
00:02:42,080 --> 00:02:44,640
it a lot easier for developers to go and

70
00:02:44,640 --> 00:02:46,560
adopt the standard and implement and add

71
00:02:46,560 --> 00:02:49,040
it add support for it into

72
00:02:49,040 --> 00:02:51,440
whatever it is they're working on

73
00:02:51,440 --> 00:02:53,360
and it's also just a great networking

74
00:02:53,360 --> 00:02:56,080
opportunity too to come together to have

75
00:02:56,080 --> 00:02:57,599
people from from different backgrounds

76
00:02:57,599 --> 00:03:00,319
with different skill sets who all have a

77
00:03:00,319 --> 00:03:02,560
shared um

78
00:03:02,560 --> 00:03:04,560
interest in these standards and but

79
00:03:04,560 --> 00:03:06,560
maybe working on different aspects of it

80
00:03:06,560 --> 00:03:08,319
the implementation of it as opposed to

81
00:03:08,319 --> 00:03:10,560
the definition of it or perhaps a bit of

82
00:03:10,560 --> 00:03:11,680
both

83
00:03:11,680 --> 00:03:13,599
and uh and it's really a great time to

84
00:03:13,599 --> 00:03:17,120
also engage with um what i would say are

85
00:03:17,120 --> 00:03:19,440
often not your are typical

86
00:03:19,440 --> 00:03:22,400
ietf community members people who who

87
00:03:22,400 --> 00:03:24,560
come from maybe from universities from

88
00:03:24,560 --> 00:03:26,480
other sdos from open source

89
00:03:26,480 --> 00:03:28,400
organizations who are aware of and

90
00:03:28,400 --> 00:03:30,159
interested in the ietf but maybe it's

91
00:03:30,159 --> 00:03:31,680
not something they follow on a

92
00:03:31,680 --> 00:03:33,360
day-to-day basis but this is a great

93
00:03:33,360 --> 00:03:35,519
time for them to come in and work really

94
00:03:35,519 --> 00:03:39,519
closely with with people from the ietf

95
00:03:40,000 --> 00:03:42,319
uh we operate under the note well

96
00:03:42,319 --> 00:03:44,480
hopefully you're all familiar with this

97
00:03:44,480 --> 00:03:45,280
but

98
00:03:45,280 --> 00:03:47,280
uh if not you know it's it's really good

99
00:03:47,280 --> 00:03:50,799
to take a a look at this it covers our

100
00:03:50,799 --> 00:03:53,120
processes and and how we work you can

101
00:03:53,120 --> 00:03:56,159
see the uh bcps there at the bottom

102
00:03:56,159 --> 00:03:57,120
uh

103
00:03:57,120 --> 00:03:59,439
you know i think code of contact is we

104
00:03:59,439 --> 00:04:00,879
see a lot of emphasis on this it's

105
00:04:00,879 --> 00:04:02,560
important to look at that

106
00:04:02,560 --> 00:04:05,280
the copyright ip you know disclosures

107
00:04:05,280 --> 00:04:07,120
all that type of thing

108
00:04:07,120 --> 00:04:09,280
good to be aware of what

109
00:04:09,280 --> 00:04:11,040
the rules and what it means to be

110
00:04:11,040 --> 00:04:13,599
participating in the itf so so good to

111
00:04:13,599 --> 00:04:15,519
take a look at that if you haven't

112
00:04:15,519 --> 00:04:17,839
already suggest you do it

113
00:04:17,839 --> 00:04:20,160
asap

114
00:04:20,160 --> 00:04:20,959
um

115
00:04:20,959 --> 00:04:22,639
the agenda as i said we've made it to

116
00:04:22,639 --> 00:04:24,400
the closing um

117
00:04:24,400 --> 00:04:27,360
and after just i'm not gonna spend too

118
00:04:27,360 --> 00:04:28,880
much time going through slides we're

119
00:04:28,880 --> 00:04:30,479
going to spend the bulk of the time

120
00:04:30,479 --> 00:04:32,080
hearing what all of you have

121
00:04:32,080 --> 00:04:34,160
accomplished i have a screenshot there

122
00:04:34,160 --> 00:04:36,320
on the right uh that i took

123
00:04:36,320 --> 00:04:38,720
maybe about an hour ago

124
00:04:38,720 --> 00:04:42,479
and uh don't panic if you've updated it

125
00:04:42,479 --> 00:04:44,240
like if you've added yourself to that

126
00:04:44,240 --> 00:04:46,320
list more recently and you're not in

127
00:04:46,320 --> 00:04:48,800
that slide we're not going to go based

128
00:04:48,800 --> 00:04:50,639
off the slide we're going to go based

129
00:04:50,639 --> 00:04:52,720
off

130
00:04:52,720 --> 00:04:54,400
what's actually currently on that wiki

131
00:04:54,400 --> 00:04:55,759
page or

132
00:04:55,759 --> 00:04:58,160
i was just

133
00:04:58,800 --> 00:05:01,039
messaging with alex in the background he

134
00:05:01,039 --> 00:05:03,199
uploaded all the slides um all the

135
00:05:03,199 --> 00:05:06,400
presentations that have been put in the

136
00:05:06,400 --> 00:05:09,759
um our project repository let me go

137
00:05:09,759 --> 00:05:11,440
forward a bit

138
00:05:11,440 --> 00:05:13,039
uh if you uploaded your your

139
00:05:13,039 --> 00:05:15,280
presentation to this repository those

140
00:05:15,280 --> 00:05:17,360
have been imported into

141
00:05:17,360 --> 00:05:19,840
me techo so we can actually run through

142
00:05:19,840 --> 00:05:22,560
them um from me teca as opposed to you

143
00:05:22,560 --> 00:05:24,400
having to share your screen you can

144
00:05:24,400 --> 00:05:26,080
drive it from me techo

145
00:05:26,080 --> 00:05:27,600
so um

146
00:05:27,600 --> 00:05:29,600
uh barry if you're up for giving that a

147
00:05:29,600 --> 00:05:31,600
try when we get to that point we can try

148
00:05:31,600 --> 00:05:33,680
going through and doing it that way

149
00:05:33,680 --> 00:05:35,520
uh so far it's been working great for me

150
00:05:35,520 --> 00:05:37,360
so i think you may find that an easier

151
00:05:37,360 --> 00:05:39,120
way to go through the presentations as

152
00:05:39,120 --> 00:05:41,360
well

153
00:05:44,080 --> 00:05:45,919
uh but i'm getting ahead of myself a

154
00:05:45,919 --> 00:05:48,080
little bit i also wanted to

155
00:05:48,080 --> 00:05:50,720
share a reminder about the presentations

156
00:05:50,720 --> 00:05:52,800
and hopefully you were all here for the

157
00:05:52,800 --> 00:05:54,880
um the kickoff

158
00:05:54,880 --> 00:05:57,039
and uh these presentations are meant to

159
00:05:57,039 --> 00:05:58,560
be just you know very brief

160
00:05:58,560 --> 00:06:01,199
presentations really uh just covering

161
00:06:01,199 --> 00:06:02,800
what the problem was you were trying to

162
00:06:02,800 --> 00:06:04,880
solve what it was you accomplished and

163
00:06:04,880 --> 00:06:06,319
then just some interesting highlights

164
00:06:06,319 --> 00:06:08,080
about what you learned

165
00:06:08,080 --> 00:06:09,440
things you're going to take back into

166
00:06:09,440 --> 00:06:11,120
your working group and perhaps some

167
00:06:11,120 --> 00:06:13,680
interesting collaboration with

168
00:06:13,680 --> 00:06:14,720
other

169
00:06:14,720 --> 00:06:17,600
sdos or open source organizations or

170
00:06:17,600 --> 00:06:20,160
kind of you know other people outside of

171
00:06:20,160 --> 00:06:22,080
the ietf working group or even if you

172
00:06:22,080 --> 00:06:24,639
collaborated with another ietf working

173
00:06:24,639 --> 00:06:26,639
group that maybe isn't as deeply

174
00:06:26,639 --> 00:06:28,479
involved with um

175
00:06:28,479 --> 00:06:30,000
the standards that you're working on all

176
00:06:30,000 --> 00:06:31,759
that stuff's just uh you know i think

177
00:06:31,759 --> 00:06:34,880
it's very interesting to hear

178
00:06:34,880 --> 00:06:37,120
so now if you can do all that in five

179
00:06:37,120 --> 00:06:39,360
minutes uh that's fantastic and just

180
00:06:39,360 --> 00:06:40,880
this is meant to be a conversation

181
00:06:40,880 --> 00:06:42,319
starter so don't feel like you need to

182
00:06:42,319 --> 00:06:45,360
cover all the nitty-gritty details

183
00:06:45,360 --> 00:06:47,039
really just give us that the high level

184
00:06:47,039 --> 00:06:49,840
that would be fantastic

185
00:06:50,639 --> 00:06:53,520
and we already covered that

186
00:06:53,520 --> 00:06:56,160
and so with that we're going to switch

187
00:06:56,160 --> 00:06:57,280
to

188
00:06:57,280 --> 00:06:59,840
just walking through the presentations

189
00:06:59,840 --> 00:07:00,650
and

190
00:07:00,650 --> 00:07:01,840
[Music]

191
00:07:01,840 --> 00:07:04,319
barry i'm happy to uh

192
00:07:04,319 --> 00:07:06,560
turn it over to you

193
00:07:06,560 --> 00:07:08,319
and uh

194
00:07:08,319 --> 00:07:09,840
we didn't get a chance to discuss this

195
00:07:09,840 --> 00:07:12,000
before barry but uh do you want to just

196
00:07:12,000 --> 00:07:13,919
try driving it from the uploaded

197
00:07:13,919 --> 00:07:17,599
presentations into me techo

198
00:07:17,599 --> 00:07:18,639
yeah

199
00:07:18,639 --> 00:07:21,280
i can i can do that or each person can

200
00:07:21,280 --> 00:07:23,919
write their own using the uh yeah

201
00:07:23,919 --> 00:07:27,759
the slides let's let's try that so um

202
00:07:27,759 --> 00:07:30,479
i'll call you out and

203
00:07:30,479 --> 00:07:31,919
use the

204
00:07:31,919 --> 00:07:34,639
um the share preloaded slides

205
00:07:34,639 --> 00:07:36,400
uh option which is the little piece of

206
00:07:36,400 --> 00:07:38,080
paper with the corner

207
00:07:38,080 --> 00:07:40,240
uh dog ear

208
00:07:40,240 --> 00:07:42,960
click that and we'll allow you to share

209
00:07:42,960 --> 00:07:45,680
the presentation and it will

210
00:07:45,680 --> 00:07:47,280
you know pick your own presentation and

211
00:07:47,280 --> 00:07:48,800
run your own slides if you have trouble

212
00:07:48,800 --> 00:07:50,319
with that let me know and i will run

213
00:07:50,319 --> 00:07:51,840
your slides for you

214
00:07:51,840 --> 00:07:54,240
so why don't we go down in what appears

215
00:07:54,240 --> 00:07:56,840
to be alphabetical order in the wiki

216
00:07:56,840 --> 00:08:01,199
um so and rather in the in the github uh

217
00:08:01,199 --> 00:08:03,520
so we'll start with bmwg

218
00:08:03,520 --> 00:08:06,800
and the next one will be the dns header

219
00:08:06,800 --> 00:08:09,520
people so bmwg

220
00:08:09,520 --> 00:08:11,680
whoever is doing that

221
00:08:11,680 --> 00:08:12,800
requests

222
00:08:12,800 --> 00:08:16,720
requests sharing pre-loaded slides

223
00:08:21,440 --> 00:08:24,400
is there somebody from the bmw group who

224
00:08:24,400 --> 00:08:27,520
wants to talk

225
00:08:27,520 --> 00:08:31,120
you can just unmute yourself and

226
00:08:38,719 --> 00:08:41,839
there we go uh

227
00:08:42,159 --> 00:08:45,479
there you go

228
00:09:04,880 --> 00:09:05,839
okay

229
00:09:05,839 --> 00:09:09,720
can everyone see my screen

230
00:09:13,200 --> 00:09:15,760
your screen go ahead

231
00:09:15,760 --> 00:09:16,880
okay so

232
00:09:16,880 --> 00:09:19,600
i will be doing our projects in his

233
00:09:19,600 --> 00:09:21,600
hackathon 112

234
00:09:21,600 --> 00:09:23,440
is a containerized infrastructure very

235
00:09:23,440 --> 00:09:25,760
much green

236
00:09:25,760 --> 00:09:27,360
so the

237
00:09:27,360 --> 00:09:30,000
main goal of our project is in

238
00:09:30,000 --> 00:09:32,320
continuously hard carton theory is to

239
00:09:32,320 --> 00:09:33,600
figure out control networking

240
00:09:33,600 --> 00:09:35,360
performance in

241
00:09:35,360 --> 00:09:37,519
various crystal oxygen and the result

242
00:09:37,519 --> 00:09:39,519
will be contribute to our draft

243
00:09:39,519 --> 00:09:41,600
consideration for by measuring network

244
00:09:41,600 --> 00:09:43,040
performance in container right

245
00:09:43,040 --> 00:09:45,600
infrastructures the two main features in

246
00:09:45,600 --> 00:09:46,880
this

247
00:09:46,880 --> 00:09:49,040
graph implement in container right

248
00:09:49,040 --> 00:09:51,279
culture with various network models and

249
00:09:51,279 --> 00:09:53,519
verifying performance impacts depending

250
00:09:53,519 --> 00:09:56,160
on configurations testing

251
00:09:56,160 --> 00:09:59,680
now in the hackathon 112 our main

252
00:09:59,680 --> 00:10:02,720
i mean a project is to do the very much

253
00:10:02,720 --> 00:10:04,880
parking lot rate in multiple scenario

254
00:10:04,880 --> 00:10:06,959
with different acceleration technologies

255
00:10:06,959 --> 00:10:11,040
for 2v3 exactly bvp and obs dbdk

256
00:10:11,040 --> 00:10:14,000
and we consider the luma proceduration

257
00:10:14,000 --> 00:10:15,600
for

258
00:10:15,600 --> 00:10:17,200
so to see how it will impact the

259
00:10:17,200 --> 00:10:20,640
performance of cp switch

260
00:10:20,880 --> 00:10:23,120
so inside the head curtain we

261
00:10:23,120 --> 00:10:25,279
the scenario we consider is a multiple

262
00:10:25,279 --> 00:10:28,480
scenario so in our one one one ietr

263
00:10:28,480 --> 00:10:31,200
package so we consider the single signal

264
00:10:31,200 --> 00:10:33,279
boss scenario three only consider the

265
00:10:33,279 --> 00:10:35,519
multiples so basically the traffic

266
00:10:35,519 --> 00:10:38,160
between chinese from the generator to

267
00:10:38,160 --> 00:10:40,959
the toolbox and v-switch and it's about

268
00:10:40,959 --> 00:10:43,200
case mantas cni and use the spacing

269
00:10:43,200 --> 00:10:45,279
hybrid used to create multiple interface

270
00:10:45,279 --> 00:10:48,640
of vnf and we use a layer 2 folding

271
00:10:48,640 --> 00:10:51,120
application at the plugin inside the

272
00:10:51,120 --> 00:10:53,279
port

273
00:10:53,279 --> 00:10:55,360
for the luma alignment we consider

274
00:10:55,360 --> 00:10:56,320
inside

275
00:10:56,320 --> 00:11:00,560
the multiple scenario we have 6 scenario

276
00:11:00,560 --> 00:11:02,959
it can be split into two parts the first

277
00:11:02,959 --> 00:11:04,560
part will be the physique same with the

278
00:11:04,560 --> 00:11:07,600
luma node and the net nfc and the second

279
00:11:07,600 --> 00:11:09,920
be the v6 different window rotate the

280
00:11:09,920 --> 00:11:11,120
nsa

281
00:11:11,120 --> 00:11:15,360
and we denote the cl cf1 in the

282
00:11:15,360 --> 00:11:16,959
port that received the copying package

283
00:11:16,959 --> 00:11:18,160
from t zn

284
00:11:18,160 --> 00:11:20,480
and then change it to the cl2 cl2 will

285
00:11:20,480 --> 00:11:22,640
be the poster chain with the packet back

286
00:11:22,640 --> 00:11:24,720
into the traffic generator

287
00:11:24,720 --> 00:11:26,959
and it's a similar way both to cnf

288
00:11:26,959 --> 00:11:28,640
upgrade in different loop placement

289
00:11:28,640 --> 00:11:31,279
operating shipping incoming packet cnf

290
00:11:31,279 --> 00:11:33,519
and visibly considered

291
00:11:33,519 --> 00:11:35,279
so and we don't consider both choosing

292
00:11:35,279 --> 00:11:37,760
that in different node with 6k but it

293
00:11:37,760 --> 00:11:39,839
will degrade performance but we have

294
00:11:39,839 --> 00:11:43,839
observed in signal plus scenario

295
00:11:44,480 --> 00:11:47,440
this is our configuration for our

296
00:11:47,440 --> 00:11:49,839
testbed and this is a design

297
00:11:49,839 --> 00:11:51,600
basically we have our master node in the

298
00:11:51,600 --> 00:11:53,279
worker node to deploy the port and we

299
00:11:53,279 --> 00:11:55,600
have the traffic signature to

300
00:11:55,600 --> 00:11:59,279
transmit the packet to them

301
00:11:59,279 --> 00:12:02,480
so this is a result that we have

302
00:12:02,480 --> 00:12:05,839
achieved throughout our ideal hackathon

303
00:12:05,839 --> 00:12:07,920
the thing that we learn from this result

304
00:12:07,920 --> 00:12:09,920
is the first thing that in multiple

305
00:12:09,920 --> 00:12:12,880
scenario bpp are performed obs and the

306
00:12:12,880 --> 00:12:15,600
second is the result that we observed

307
00:12:15,600 --> 00:12:17,680
from the luma alignment the first thing

308
00:12:17,680 --> 00:12:18,959
is the

309
00:12:18,959 --> 00:12:20,959
alignment of district and x

310
00:12:20,959 --> 00:12:22,320
and

311
00:12:22,320 --> 00:12:23,839
the element of visual and snake is

312
00:12:23,839 --> 00:12:25,760
almost the same it plays on different

313
00:12:25,760 --> 00:12:28,240
notes when we slightly dig the

314
00:12:28,240 --> 00:12:30,000
performance in a

315
00:12:30,000 --> 00:12:31,839
higher packet size

316
00:12:31,839 --> 00:12:33,360
and the second

317
00:12:33,360 --> 00:12:36,560
observation is cnf and d switch

318
00:12:36,560 --> 00:12:38,880
we also set a separate inplacement of

319
00:12:38,880 --> 00:12:41,519
cnf in significantly degree performance

320
00:12:41,519 --> 00:12:44,880
by 10 to 50 percent and

321
00:12:44,880 --> 00:12:48,000
finally we is a receiving bracket cf1

322
00:12:48,000 --> 00:12:51,120
this week we uh observe

323
00:12:51,120 --> 00:12:54,560
the reverse the reverse result for

324
00:12:54,560 --> 00:12:58,399
obvious dpdk and vpp with oft bdk cmd

325
00:12:58,399 --> 00:12:59,200
and

326
00:12:59,200 --> 00:13:00,480
this week in the same note we have

327
00:13:00,480 --> 00:13:03,200
higher performance meanwhile in vip

328
00:13:03,200 --> 00:13:05,040
cnf and district in different node it

329
00:13:05,040 --> 00:13:08,079
has higher performance

330
00:13:08,079 --> 00:13:11,440
so for the future we

331
00:13:11,440 --> 00:13:13,519
plan to travel through the

332
00:13:13,519 --> 00:13:15,200
cf on basic and numeral alignment

333
00:13:15,200 --> 00:13:18,480
results and we consider multiple vc case

334
00:13:18,480 --> 00:13:20,800
where we will deploy one vision in each

335
00:13:20,800 --> 00:13:22,800
one node and we will plan

336
00:13:22,800 --> 00:13:24,880
to discuss our utility interesting

337
00:13:24,880 --> 00:13:28,639
result with other creative community

338
00:13:29,600 --> 00:13:32,000
so to wrap up our presentation so this

339
00:13:32,000 --> 00:13:36,079
is our team member and we

340
00:13:36,079 --> 00:13:40,240
cooperate with the i2 nsf and fpua team

341
00:13:40,240 --> 00:13:42,560
from the sktu team thank you for

342
00:13:42,560 --> 00:13:45,040
listening

343
00:13:45,839 --> 00:13:47,120
thank you tran

344
00:13:47,120 --> 00:13:50,880
are there any questions for tran

345
00:13:56,560 --> 00:13:59,120
okay hearing none uh thanks again tran

346
00:13:59,120 --> 00:14:01,279
uh good good job um

347
00:14:01,279 --> 00:14:03,920
next one up is the dns editor uh

348
00:14:03,920 --> 00:14:06,399
willamah

349
00:14:06,399 --> 00:14:08,160
yes

350
00:14:08,160 --> 00:14:11,760
uh so i'm i'm going to try this slide

351
00:14:11,760 --> 00:14:13,199
sharing thing

352
00:14:13,199 --> 00:14:14,160
yep

353
00:14:14,160 --> 00:14:17,399
let's see

354
00:14:17,920 --> 00:14:20,079
uh

355
00:14:22,399 --> 00:14:25,360
and the next uh next step will be i2nsf

356
00:14:25,360 --> 00:14:28,800
so get on get ready

357
00:14:29,519 --> 00:14:32,880
yep your slides are up go for it okay

358
00:14:32,880 --> 00:14:35,920
yes so um

359
00:14:35,920 --> 00:14:38,959
yeah so the the dns hackathon was

360
00:14:38,959 --> 00:14:42,720
actually just a single project

361
00:14:42,720 --> 00:14:45,120
which i did with uh

362
00:14:45,120 --> 00:14:48,639
someone else uh tonka park my colleague

363
00:14:48,639 --> 00:14:51,839
and uh so it's not not really denas but

364
00:14:51,839 --> 00:14:53,120
either

365
00:14:53,120 --> 00:14:54,560
and uh

366
00:14:54,560 --> 00:14:56,839
so what's this about

367
00:14:56,839 --> 00:14:59,120
so um

368
00:14:59,120 --> 00:15:02,000
roy irons has a draft which has been

369
00:15:02,000 --> 00:15:03,279
adopted

370
00:15:03,279 --> 00:15:05,760
not so long ago at a

371
00:15:05,760 --> 00:15:07,920
dns working group

372
00:15:07,920 --> 00:15:10,000
which builds upon

373
00:15:10,000 --> 00:15:13,519
extended dns errors extended dns errors

374
00:15:13,519 --> 00:15:16,079
is a mechanism in which

375
00:15:16,079 --> 00:15:19,120
a resolver or authoritative nameserver

376
00:15:19,120 --> 00:15:20,160
can

377
00:15:20,160 --> 00:15:23,839
send back a detailed information about

378
00:15:23,839 --> 00:15:26,959
error that occurs to the

379
00:15:26,959 --> 00:15:28,079
carrier

380
00:15:28,079 --> 00:15:30,959
for example a resolver can send back to

381
00:15:30,959 --> 00:15:34,480
the step resolver or a normal user

382
00:15:34,480 --> 00:15:38,079
that denysec didn't validate because

383
00:15:38,079 --> 00:15:41,279
the signatures expired or

384
00:15:41,279 --> 00:15:44,079
there was a ds record with no signatures

385
00:15:44,079 --> 00:15:47,600
in in the zone or that kind of things

386
00:15:47,600 --> 00:15:48,800
so

387
00:15:48,800 --> 00:15:51,600
the dns air reporting draft builds upon

388
00:15:51,600 --> 00:15:52,800
that

389
00:15:52,800 --> 00:15:55,040
but instead of

390
00:15:55,040 --> 00:15:57,759
informing the clients what went wrong

391
00:15:57,759 --> 00:16:01,440
it informs the authoritative servers

392
00:16:01,440 --> 00:16:04,000
that we're serving the broken songs

393
00:16:04,000 --> 00:16:05,040
about

394
00:16:05,040 --> 00:16:06,720
the error

395
00:16:06,720 --> 00:16:10,160
and uh so it's actually

396
00:16:10,160 --> 00:16:13,920
extended dns error reporting

397
00:16:13,920 --> 00:16:17,120
and therefore i uh so i i know that roy

398
00:16:17,120 --> 00:16:19,680
argens who's on this draft and also met

399
00:16:19,680 --> 00:16:22,320
larson they don't like the funny acronym

400
00:16:22,320 --> 00:16:25,120
either but i i do like it but and

401
00:16:25,120 --> 00:16:26,480
therefore

402
00:16:26,480 --> 00:16:29,120
i called it either

403
00:16:29,120 --> 00:16:31,199
so this was discussed one and a half

404
00:16:31,199 --> 00:16:32,480
week ago

405
00:16:32,480 --> 00:16:36,160
during a dinosaur interview meeting

406
00:16:36,160 --> 00:16:38,800
and there

407
00:16:38,800 --> 00:16:41,680
was what was discussed there the the

408
00:16:41,680 --> 00:16:44,480
mechanism consisted that

409
00:16:44,480 --> 00:16:47,279
or meant that resolver would

410
00:16:47,279 --> 00:16:50,959
send a edns option to the authoritative

411
00:16:50,959 --> 00:16:53,920
saying hey do you have a reporting agent

412
00:16:53,920 --> 00:16:56,800
for me where i can send my errors

413
00:16:56,800 --> 00:16:57,839
and

414
00:16:57,839 --> 00:16:59,040
it was

415
00:16:59,040 --> 00:17:01,279
noted during the interview

416
00:17:01,279 --> 00:17:04,400
the interim meeting that this breaks

417
00:17:04,400 --> 00:17:07,119
some authoritative resolvers

418
00:17:07,119 --> 00:17:11,039
so as a alternative it was suggested

419
00:17:11,039 --> 00:17:14,079
that instead of the resolver requesting

420
00:17:14,079 --> 00:17:16,959
the edns option the authoritative could

421
00:17:16,959 --> 00:17:19,520
also just send the eds option and

422
00:17:19,520 --> 00:17:20,959
solicit it

423
00:17:20,959 --> 00:17:23,199
and it was suggested that resolvers

424
00:17:23,199 --> 00:17:25,839
would be much more resilient to that

425
00:17:25,839 --> 00:17:28,079
than authoritative

426
00:17:28,079 --> 00:17:31,280
towards unknown options

427
00:17:31,280 --> 00:17:34,799
so i proposed that it would be a nice

428
00:17:34,799 --> 00:17:37,120
thing to measure at the upcoming

429
00:17:37,120 --> 00:17:38,240
hackathon

430
00:17:38,240 --> 00:17:41,360
and some people agreed as you can see in

431
00:17:41,360 --> 00:17:45,799
these meeting notes minutes

432
00:17:46,480 --> 00:17:50,880
now two hackathons ago we also

433
00:17:50,880 --> 00:17:53,039
implemented the

434
00:17:53,039 --> 00:17:55,760
reporting agent reporting

435
00:17:55,760 --> 00:17:56,480
in

436
00:17:56,480 --> 00:17:59,360
nsd our authoritative name server but

437
00:17:59,360 --> 00:18:01,280
this time we went a different way

438
00:18:01,280 --> 00:18:03,200
especially because

439
00:18:03,200 --> 00:18:06,400
the authoritative would

440
00:18:06,400 --> 00:18:08,240
send it insulated

441
00:18:08,240 --> 00:18:10,320
unsolicited anyway

442
00:18:10,320 --> 00:18:12,080
we

443
00:18:12,080 --> 00:18:16,480
made a program to do this in a beefy bpf

444
00:18:16,480 --> 00:18:18,880
and if you haven't heard about this yet

445
00:18:18,880 --> 00:18:19,840
it's not

446
00:18:19,840 --> 00:18:22,000
the old berkeley packet filter from

447
00:18:22,000 --> 00:18:24,640
tcpdump but it's you know it's very

448
00:18:24,640 --> 00:18:26,880
exciting and happening

449
00:18:26,880 --> 00:18:29,840
you can run programs in the linux kernel

450
00:18:29,840 --> 00:18:31,760
or very close to the

451
00:18:31,760 --> 00:18:35,200
network card or even on the network card

452
00:18:35,200 --> 00:18:36,720
hardware

453
00:18:36,720 --> 00:18:38,080
and

454
00:18:38,080 --> 00:18:40,320
what i like about it too

455
00:18:40,320 --> 00:18:43,200
we have been playing it with with bpf

456
00:18:43,200 --> 00:18:44,000
and

457
00:18:44,000 --> 00:18:45,600
at in our matlabs

458
00:18:45,600 --> 00:18:46,960
is that you can

459
00:18:46,960 --> 00:18:50,240
augment existing uh name server

460
00:18:50,240 --> 00:18:51,679
installations

461
00:18:51,679 --> 00:18:52,480
so

462
00:18:52,480 --> 00:18:54,400
we made something which is named server

463
00:18:54,400 --> 00:18:56,840
agnostic but you don't have to

464
00:18:56,840 --> 00:18:59,760
anticipate it beforehand if you have

465
00:18:59,760 --> 00:19:02,080
this name server and you want to have

466
00:19:02,080 --> 00:19:04,400
this feature added that it can report

467
00:19:04,400 --> 00:19:07,600
its reporting agents then you just load

468
00:19:07,600 --> 00:19:10,480
this bpf program and it will work but if

469
00:19:10,480 --> 00:19:12,640
i work with bind with not with nsd

470
00:19:12,640 --> 00:19:13,919
doesn't matter

471
00:19:13,919 --> 00:19:16,400
so that's it's pretty cool

472
00:19:16,400 --> 00:19:18,080
here's the

473
00:19:18,080 --> 00:19:20,080
git repository

474
00:19:20,080 --> 00:19:23,360
there's all all sorts of dns experiments

475
00:19:23,360 --> 00:19:25,070
in there

476
00:19:25,070 --> 00:19:26,720
[Music]

477
00:19:26,720 --> 00:19:30,000
and here you see example uh so i i have

478
00:19:30,000 --> 00:19:31,919
this server either dot

479
00:19:31,919 --> 00:19:34,720
lobs dot nl and it's running the either

480
00:19:34,720 --> 00:19:35,919
domain

481
00:19:35,919 --> 00:19:36,960
and

482
00:19:36,960 --> 00:19:40,960
i have not anticipated the dness

483
00:19:40,960 --> 00:19:42,880
error reporting yet

484
00:19:42,880 --> 00:19:46,000
but to do to enable it i just have to do

485
00:19:46,000 --> 00:19:48,799
this clone the repository

486
00:19:48,799 --> 00:19:51,760
initialize the submodule go to the

487
00:19:51,760 --> 00:19:54,000
directory with the option

488
00:19:54,000 --> 00:19:56,880
make load and i'm done

489
00:19:56,880 --> 00:19:59,039
and you can see here

490
00:19:59,039 --> 00:20:00,799
the result

491
00:20:00,799 --> 00:20:03,280
from a dick query that it is indeed

492
00:20:03,280 --> 00:20:06,720
reporting the reported agent in an edns

493
00:20:06,720 --> 00:20:09,039
option

494
00:20:09,240 --> 00:20:11,120
report.netnetlabs.now

495
00:20:11,120 --> 00:20:14,000
and here is a little piece of the

496
00:20:14,000 --> 00:20:16,640
c code of the bpf program

497
00:20:16,640 --> 00:20:19,039
you can see how to configure it with the

498
00:20:19,039 --> 00:20:22,240
reporting agent and what option code to

499
00:20:22,240 --> 00:20:24,559
use

500
00:20:27,039 --> 00:20:30,720
so i think that's really cool and

501
00:20:30,720 --> 00:20:33,039
we also did ripe atlas measurements to

502
00:20:33,039 --> 00:20:35,919
see if

503
00:20:35,919 --> 00:20:38,080
resources would break if they get this

504
00:20:38,080 --> 00:20:40,080
option unsolicited

505
00:20:40,080 --> 00:20:41,039
so

506
00:20:41,039 --> 00:20:44,720
i also created a server with the domain

507
00:20:44,720 --> 00:20:46,799
that does not send this option which is

508
00:20:46,799 --> 00:20:49,520
called meter dot internet labs orton l

509
00:20:49,520 --> 00:20:51,360
and here's the vipe outlast measurement

510
00:20:51,360 --> 00:20:52,640
that

511
00:20:52,640 --> 00:20:55,679
targets this server and then also the

512
00:20:55,679 --> 00:20:57,120
the server rich

513
00:20:57,120 --> 00:20:59,520
doesn't option

514
00:20:59,520 --> 00:21:02,000
i did a very simple measurement so ripe

515
00:21:02,000 --> 00:21:05,760
atlas has 11 000 props currently i think

516
00:21:05,760 --> 00:21:07,679
but

517
00:21:07,679 --> 00:21:10,000
for the hackathon now i did it with just

518
00:21:10,000 --> 00:21:13,200
a thousand uh doing it with all of our

519
00:21:13,200 --> 00:21:14,960
losses a little bit

520
00:21:14,960 --> 00:21:16,880
more work

521
00:21:16,880 --> 00:21:19,120
but it was good to have this experiment

522
00:21:19,120 --> 00:21:21,280
anyway i think so

523
00:21:21,280 --> 00:21:23,200
962

524
00:21:23,200 --> 00:21:25,200
probes anticipated

525
00:21:25,200 --> 00:21:27,679
the program that processes the results

526
00:21:27,679 --> 00:21:31,039
is there in a link to and what we

527
00:21:31,039 --> 00:21:32,400
learned

528
00:21:32,400 --> 00:21:33,600
was

529
00:21:33,600 --> 00:21:37,280
that 99 of the resolvers don't have an

530
00:21:37,280 --> 00:21:38,880
issue with this

531
00:21:38,880 --> 00:21:40,000
option

532
00:21:40,000 --> 00:21:41,200
and

533
00:21:41,200 --> 00:21:42,080
that

534
00:21:42,080 --> 00:21:45,039
the remaining 1 is also

535
00:21:45,039 --> 00:21:47,120
a little bit unclear

536
00:21:47,120 --> 00:21:49,039
because actually

537
00:21:49,039 --> 00:21:51,039
we had more

538
00:21:51,039 --> 00:21:53,440
answers on

539
00:21:53,440 --> 00:21:56,080
the domain that did send option than on

540
00:21:56,080 --> 00:21:58,880
the domain which did not send option

541
00:21:58,880 --> 00:22:01,840
which was the baseline measurement so

542
00:22:01,840 --> 00:22:05,280
but i think so from initial guess that

543
00:22:05,280 --> 00:22:08,000
support is okay

544
00:22:08,000 --> 00:22:11,360
but of course you know there needs to be

545
00:22:11,360 --> 00:22:13,360
we need to be

546
00:22:13,360 --> 00:22:14,159
do

547
00:22:14,159 --> 00:22:15,120
like

548
00:22:15,120 --> 00:22:17,520
large-scale measurements to to be sure

549
00:22:17,520 --> 00:22:18,240
and

550
00:22:18,240 --> 00:22:20,799
be certain that this can be done

551
00:22:20,799 --> 00:22:23,679
for dns or reporting without causing

552
00:22:23,679 --> 00:22:25,039
problems

553
00:22:25,039 --> 00:22:27,679
another thing uh what we

554
00:22:27,679 --> 00:22:31,039
learned and more that's more discussed

555
00:22:31,039 --> 00:22:33,280
is that this is like dmarc right it

556
00:22:33,280 --> 00:22:35,600
gives operators of

557
00:22:35,600 --> 00:22:38,480
authority of domains dns operators

558
00:22:38,480 --> 00:22:40,400
serving authority domains

559
00:22:40,400 --> 00:22:41,840
authoritatively

560
00:22:41,840 --> 00:22:45,919
confidence to deploy dnsec because they

561
00:22:45,919 --> 00:22:48,159
get feedback from what is happening on

562
00:22:48,159 --> 00:22:52,080
the internet if something breaks etc

563
00:22:52,080 --> 00:22:54,960
so it might be interesting to develop a

564
00:22:54,960 --> 00:22:55,840
new

565
00:22:55,840 --> 00:22:58,000
draft at the rtf

566
00:22:58,000 --> 00:23:00,159
and

567
00:23:00,159 --> 00:23:01,600
which would do

568
00:23:01,600 --> 00:23:04,720
driver and dns right that you can try

569
00:23:04,720 --> 00:23:06,799
the nsx but

570
00:23:06,799 --> 00:23:09,039
if validation breaks the answer will go

571
00:23:09,039 --> 00:23:11,919
to the clients anyway but our error will

572
00:23:11,919 --> 00:23:15,600
be reported to a error reporting agent

573
00:23:15,600 --> 00:23:17,679
so that might be some interesting future

574
00:23:17,679 --> 00:23:19,120
work

575
00:23:19,120 --> 00:23:20,000
and

576
00:23:20,000 --> 00:23:22,480
that's it we just worked with the two of

577
00:23:22,480 --> 00:23:24,080
us on this

578
00:23:24,080 --> 00:23:26,400
because you know everybody is busy and

579
00:23:26,400 --> 00:23:28,400
it's it works better on in a live

580
00:23:28,400 --> 00:23:31,760
meeting but that was nice to do anyway

581
00:23:31,760 --> 00:23:34,559
and i think that maybe we present this a

582
00:23:34,559 --> 00:23:37,760
bit more elaborately at dinosaur next

583
00:23:37,760 --> 00:23:40,000
week

584
00:23:40,720 --> 00:23:43,760
so that's it if anyone has any questions

585
00:23:43,760 --> 00:23:47,919
then i'd be happy to answer them

586
00:23:48,559 --> 00:23:49,440
thanks

587
00:23:49,440 --> 00:23:50,960
welcome

588
00:23:50,960 --> 00:23:52,640
welcome

589
00:23:52,640 --> 00:23:54,159
yeah i mean um yeah thanks for the

590
00:23:54,159 --> 00:23:56,400
presentation i found uh

591
00:23:56,400 --> 00:23:58,799
i mean the the potential of helping with

592
00:23:58,799 --> 00:24:01,679
the kind of dns sac deployment problem

593
00:24:01,679 --> 00:24:03,760
is as i understand it is i mean it

594
00:24:03,760 --> 00:24:04,880
sounds really

595
00:24:04,880 --> 00:24:07,120
uh interesting and an encouraging thing

596
00:24:07,120 --> 00:24:09,039
to to try out um

597
00:24:09,039 --> 00:24:11,279
also i was uh

598
00:24:11,279 --> 00:24:12,799
it was interesting to hear you bring up

599
00:24:12,799 --> 00:24:13,760
uh

600
00:24:13,760 --> 00:24:15,679
you were talking about ebpf too right at

601
00:24:15,679 --> 00:24:19,320
the beginning yeah

602
00:24:20,000 --> 00:24:22,080
that's prevalent i think in the

603
00:24:22,080 --> 00:24:25,120
networking space edpf gets uh used a bit

604
00:24:25,120 --> 00:24:27,039
and now i'm hearing it used a lot for

605
00:24:27,039 --> 00:24:28,799
dealing with security

606
00:24:28,799 --> 00:24:31,200
um things that just i don't know it's it

607
00:24:31,200 --> 00:24:33,679
seems like a really neat uh kind of

608
00:24:33,679 --> 00:24:36,559
toolkit no way to to be able to use so

609
00:24:36,559 --> 00:24:38,240
uh interesting to see you using it the

610
00:24:38,240 --> 00:24:39,840
way you did um

611
00:24:39,840 --> 00:24:41,360
it makes me think i need to look into

612
00:24:41,360 --> 00:24:43,440
ebpf a bit more because it seems pretty

613
00:24:43,440 --> 00:24:45,520
pretty powerful pretty flexible

614
00:24:45,520 --> 00:24:48,080
yeah absolutely yeah

615
00:24:48,080 --> 00:24:51,120
yeah we sort of made a toolkit so

616
00:24:51,120 --> 00:24:54,240
this this uses parts of that toolkit to

617
00:24:54,240 --> 00:24:56,159
to implement this

618
00:24:56,159 --> 00:24:57,520
this option

619
00:24:57,520 --> 00:24:59,520
and it's cool yeah

620
00:24:59,520 --> 00:25:02,000
because you know it's also a feat a

621
00:25:02,000 --> 00:25:04,320
feature can be implemented independent

622
00:25:04,320 --> 00:25:06,480
of what you're winning

623
00:25:06,480 --> 00:25:09,200
and it's very fast very suitable for

624
00:25:09,200 --> 00:25:11,520
dealing with uh you know of service

625
00:25:11,520 --> 00:25:15,200
attacks and those kind of things

626
00:25:15,200 --> 00:25:17,760
cool thanks thanks for sharing

627
00:25:17,760 --> 00:25:20,000
thank you

628
00:25:20,000 --> 00:25:23,440
other questions or comments

629
00:25:26,080 --> 00:25:28,799
okay okay thanks again willem and next

630
00:25:28,799 --> 00:25:32,799
up is uh i2nsf followed by ipwave both

631
00:25:32,799 --> 00:25:35,760
of them are paul and your screen request

632
00:25:35,760 --> 00:25:39,360
is approved go for it

633
00:25:39,840 --> 00:25:41,679
hello uh

634
00:25:41,679 --> 00:25:43,200
can you hear me

635
00:25:43,200 --> 00:25:44,240
yes

636
00:25:44,240 --> 00:25:45,440
okay

637
00:25:45,440 --> 00:25:48,080
so hello uh this is uh

638
00:25:48,080 --> 00:25:49,919
john

639
00:25:49,919 --> 00:25:52,640
this is i2 nsf

640
00:25:52,640 --> 00:25:55,200
hackathon project report

641
00:25:55,200 --> 00:25:59,440
so this is a poster for this project

642
00:25:59,440 --> 00:26:02,400
basically uh this hackathon project case

643
00:26:02,400 --> 00:26:04,559
we we don't have your

644
00:26:04,559 --> 00:26:08,360
hunger slides up yet

645
00:26:10,640 --> 00:26:13,039
okay can you see my slide

646
00:26:13,039 --> 00:26:14,240
no

647
00:26:14,240 --> 00:26:16,240
oh no it says my screenshot has been

648
00:26:16,240 --> 00:26:19,360
started but uh oh okay okay okay

649
00:26:19,360 --> 00:26:21,678
okay

650
00:26:21,919 --> 00:26:24,919
okay

651
00:26:25,600 --> 00:26:26,880
there you go

652
00:26:26,880 --> 00:26:29,840
okay good

653
00:26:32,640 --> 00:26:34,880
okay

654
00:26:36,480 --> 00:26:37,360
okay

655
00:26:37,360 --> 00:26:41,360
uh my name is tim perjung this is i2 nsf

656
00:26:41,360 --> 00:26:44,799
hackathon project report

657
00:26:44,799 --> 00:26:46,799
but this is a poster

658
00:26:46,799 --> 00:26:48,559
for itunes f

659
00:26:48,559 --> 00:26:49,919
project

660
00:26:49,919 --> 00:26:52,720
basically this hackathon we want to

661
00:26:52,720 --> 00:26:54,159
implement

662
00:26:54,159 --> 00:26:57,360
distributed network auditing system for

663
00:26:57,360 --> 00:27:01,360
itunes f framework using hyperledger

664
00:27:01,360 --> 00:27:04,159
fabric as a distributed

665
00:27:04,159 --> 00:27:06,480
network auditing system

666
00:27:06,480 --> 00:27:07,360
so

667
00:27:07,360 --> 00:27:10,400
um as you can see this is i2 nsf

668
00:27:10,400 --> 00:27:13,760
framework so i turn as a user giving the

669
00:27:13,760 --> 00:27:16,159
fallacy and then secure controller

670
00:27:16,159 --> 00:27:19,520
translate into level policy

671
00:27:19,520 --> 00:27:20,399
for

672
00:27:20,399 --> 00:27:23,520
the nsf security enforcement

673
00:27:23,520 --> 00:27:25,600
this hackathon project case

674
00:27:25,600 --> 00:27:29,120
item accept the analyzer collects

675
00:27:29,120 --> 00:27:31,200
the monitoring data from

676
00:27:31,200 --> 00:27:34,480
nsf using a monitoring interface

677
00:27:34,480 --> 00:27:36,720
and then that monitoring data

678
00:27:36,720 --> 00:27:38,799
are stored into

679
00:27:38,799 --> 00:27:41,600
hyperledger fabric as a distributed

680
00:27:41,600 --> 00:27:42,880
database

681
00:27:42,880 --> 00:27:46,320
after that secure controller has a

682
00:27:46,320 --> 00:27:50,320
web server and it display the monitoring

683
00:27:50,320 --> 00:27:52,720
data into web

684
00:27:52,720 --> 00:27:54,320
so

685
00:27:54,320 --> 00:27:56,240
this hackathon project we use the

686
00:27:56,240 --> 00:27:58,559
distributed database

687
00:27:58,559 --> 00:28:00,720
based on

688
00:28:00,720 --> 00:28:04,799
the hyperlaser uh fabric so you can see

689
00:28:04,799 --> 00:28:07,600
itunes of analyzer collect mounting data

690
00:28:07,600 --> 00:28:12,080
from nsf amb and then using nested a5

691
00:28:12,080 --> 00:28:14,960
that information will be delivered to

692
00:28:14,960 --> 00:28:16,399
hyperledger

693
00:28:16,399 --> 00:28:19,120
the organization node this is

694
00:28:19,120 --> 00:28:21,600
this should distribute to the database

695
00:28:21,600 --> 00:28:24,880
node and and then

696
00:28:24,880 --> 00:28:28,799
using order and confirm that um

697
00:28:28,799 --> 00:28:30,640
stories and then

698
00:28:30,640 --> 00:28:33,039
the data information delivered to

699
00:28:33,039 --> 00:28:37,679
control law okay and then it can display

700
00:28:37,679 --> 00:28:40,960
that motion data into web

701
00:28:40,960 --> 00:28:43,919
so this is at the push of nsf modding

702
00:28:43,919 --> 00:28:45,120
data

703
00:28:45,120 --> 00:28:47,760
to distribute the data

704
00:28:47,760 --> 00:28:51,520
based using rest api basically i2 nsf

705
00:28:51,520 --> 00:28:53,840
delivered this data

706
00:28:53,840 --> 00:28:56,000
into hyperledger

707
00:28:56,000 --> 00:28:57,760
after that

708
00:28:57,760 --> 00:28:58,559
this

709
00:28:58,559 --> 00:29:01,360
distributed database receives that nsf

710
00:29:01,360 --> 00:29:03,120
modding data

711
00:29:03,120 --> 00:29:03,919
from

712
00:29:03,919 --> 00:29:06,559
i2 and sf analyzer so you can see this

713
00:29:06,559 --> 00:29:10,000
is a json format

714
00:29:10,000 --> 00:29:10,840
so

715
00:29:10,840 --> 00:29:12,559
um

716
00:29:12,559 --> 00:29:14,240
right hand side

717
00:29:14,240 --> 00:29:16,000
so we display

718
00:29:16,000 --> 00:29:18,720
the monitoring data okay so

719
00:29:18,720 --> 00:29:20,159
this is

720
00:29:20,159 --> 00:29:24,840
the system resources such as memory disk

721
00:29:24,840 --> 00:29:27,440
okay something like that and then right

722
00:29:27,440 --> 00:29:31,679
hand side is the network uh traffic so

723
00:29:31,679 --> 00:29:32,480
this

724
00:29:32,480 --> 00:29:35,679
incoming traffic is over that

725
00:29:35,679 --> 00:29:39,440
some threshold means ddos attack okay so

726
00:29:39,440 --> 00:29:41,760
let's take time we use the centralized

727
00:29:41,760 --> 00:29:43,919
database

728
00:29:43,919 --> 00:29:47,440
with the mysql this time we replaced

729
00:29:47,440 --> 00:29:50,720
mysql with the hyperledger as the

730
00:29:50,720 --> 00:29:53,120
distributed database

731
00:29:53,120 --> 00:29:54,720
so what we learn

732
00:29:54,720 --> 00:29:55,600
the

733
00:29:55,600 --> 00:29:58,960
usage of distributed database can tackle

734
00:29:58,960 --> 00:30:02,799
the possibility of data templing

735
00:30:02,799 --> 00:30:04,720
such as a

736
00:30:04,720 --> 00:30:07,760
sprite supply chain attack

737
00:30:07,760 --> 00:30:09,360
and also

738
00:30:09,360 --> 00:30:11,370
the distributed database system

739
00:30:11,370 --> 00:30:12,640
[Music]

740
00:30:12,640 --> 00:30:15,919
also denies the failure of single point

741
00:30:15,919 --> 00:30:17,600
because we are using

742
00:30:17,600 --> 00:30:19,520
distributed

743
00:30:19,520 --> 00:30:23,120
databases like the blockchain overall

744
00:30:23,120 --> 00:30:26,080
the distributed database system can

745
00:30:26,080 --> 00:30:29,200
improve the security and reliability of

746
00:30:29,200 --> 00:30:32,000
our itunes framework

747
00:30:32,000 --> 00:30:33,600
so next step

748
00:30:33,600 --> 00:30:37,279
this time we just stored the i2 nsf nsf

749
00:30:37,279 --> 00:30:39,039
multi-data

750
00:30:39,039 --> 00:30:39,919
but

751
00:30:39,919 --> 00:30:42,399
next time we try to

752
00:30:42,399 --> 00:30:44,799
store more data and

753
00:30:44,799 --> 00:30:46,480
information such as

754
00:30:46,480 --> 00:30:51,360
security policy and nsf capabilities

755
00:30:51,360 --> 00:30:53,279
this is open

756
00:30:53,279 --> 00:30:56,640
source project at github you can get the

757
00:30:56,640 --> 00:30:59,039
source code from this link

758
00:30:59,039 --> 00:31:01,919
so this is one on two source code and

759
00:31:01,919 --> 00:31:03,679
also we

760
00:31:03,679 --> 00:31:05,279
have the demonstration video clip you

761
00:31:05,279 --> 00:31:07,120
can click and you can see our

762
00:31:07,120 --> 00:31:08,399
demonstration

763
00:31:08,399 --> 00:31:10,080
so

764
00:31:10,080 --> 00:31:12,880
this is the member information

765
00:31:12,880 --> 00:31:14,720
we work

766
00:31:14,720 --> 00:31:16,880
for hackathon with the

767
00:31:16,880 --> 00:31:20,159
sunshield university bmwg working group

768
00:31:20,159 --> 00:31:24,320
and ipo web team this is my team members

769
00:31:24,320 --> 00:31:25,600
so also

770
00:31:25,600 --> 00:31:28,480
this time you also work for a hackathon

771
00:31:28,480 --> 00:31:30,080
project so

772
00:31:30,080 --> 00:31:31,279
korean

773
00:31:31,279 --> 00:31:32,159
uh

774
00:31:32,159 --> 00:31:35,120
gathered in the busan

775
00:31:35,120 --> 00:31:38,159
west in joseon hotel in busan we work

776
00:31:38,159 --> 00:31:38,880
for

777
00:31:38,880 --> 00:31:41,440
hakkason bmwg

778
00:31:41,440 --> 00:31:45,679
um i2rsf and ipwave team so this is the

779
00:31:45,679 --> 00:31:47,279
sponsor information

780
00:31:47,279 --> 00:31:48,960
so appendix

781
00:31:48,960 --> 00:31:51,440
explains how to install

782
00:31:51,440 --> 00:31:54,399
opelate our distributed database system

783
00:31:54,399 --> 00:31:56,000
for itunes app

784
00:31:56,000 --> 00:31:58,840
thank you for your

785
00:31:58,840 --> 00:32:03,439
listening questions or comments

786
00:32:04,559 --> 00:32:06,240
thank you paul

787
00:32:06,240 --> 00:32:08,799
questions for paul on i2nsf before he

788
00:32:08,799 --> 00:32:12,120
starts ipwave

789
00:32:16,799 --> 00:32:18,000
okay

790
00:32:18,000 --> 00:32:21,440
okay let's start if you wave

791
00:32:24,000 --> 00:32:26,240
okay

792
00:32:26,480 --> 00:32:30,960
so can i start if your wave report

793
00:32:35,919 --> 00:32:39,039
a very can okay please do it okay

794
00:32:39,039 --> 00:32:41,600
yes but it takes a minute to unmute so

795
00:32:41,600 --> 00:32:43,679
it got cut off okay sorry

796
00:32:43,679 --> 00:32:44,640
okay

797
00:32:44,640 --> 00:32:47,360
may i start ip wave

798
00:32:47,360 --> 00:32:49,279
report

799
00:32:49,279 --> 00:32:51,360
you can see my slides right

800
00:32:51,360 --> 00:32:52,480
okay

801
00:32:52,480 --> 00:32:56,240
okay uh this is the ipo wave hackathon

802
00:32:56,240 --> 00:32:58,399
project report

803
00:32:58,399 --> 00:33:01,439
so this is the

804
00:33:02,240 --> 00:33:04,799
hackathon project poster basically this

805
00:33:04,799 --> 00:33:07,840
time we implemented the

806
00:33:07,840 --> 00:33:11,519
ip wave context over navigation protocol

807
00:33:11,519 --> 00:33:14,559
is called the cmp so robot car

808
00:33:14,559 --> 00:33:17,519
and the web server can communicate with

809
00:33:17,519 --> 00:33:19,279
each other so

810
00:33:19,279 --> 00:33:22,840
we using ipweb cmp

811
00:33:22,840 --> 00:33:24,720
beaker

812
00:33:24,720 --> 00:33:26,320
information

813
00:33:26,320 --> 00:33:28,480
option type

814
00:33:28,480 --> 00:33:29,919
is delivered

815
00:33:29,919 --> 00:33:31,039
over

816
00:33:31,039 --> 00:33:34,080
a world wide web double 3c

817
00:33:34,080 --> 00:33:35,919
pi ss

818
00:33:35,919 --> 00:33:38,240
feeker information

819
00:33:38,240 --> 00:33:40,720
service specification we used

820
00:33:40,720 --> 00:33:42,320
we deliver

821
00:33:42,320 --> 00:33:45,360
information using that

822
00:33:45,360 --> 00:33:47,600
standardization format

823
00:33:47,600 --> 00:33:51,200
also we demonstrated the

824
00:33:51,200 --> 00:33:53,519
text last time we used

825
00:33:53,519 --> 00:33:55,200
a wave

826
00:33:55,200 --> 00:33:57,279
such as a tsrc

827
00:33:57,279 --> 00:34:00,240
so european folks they are

828
00:34:00,240 --> 00:34:02,960
popularly using um

829
00:34:02,960 --> 00:34:05,440
simply takes a cellular feature to

830
00:34:05,440 --> 00:34:06,799
everything so

831
00:34:06,799 --> 00:34:09,918
so in this case we use the simulation

832
00:34:09,918 --> 00:34:11,119
based

833
00:34:11,119 --> 00:34:14,000
information was done

834
00:34:14,000 --> 00:34:15,119
so

835
00:34:15,119 --> 00:34:20,480
i said this ipwave hackathon case we

836
00:34:20,480 --> 00:34:22,560
had two parts first one is the

837
00:34:22,560 --> 00:34:25,199
simulation second one is

838
00:34:25,199 --> 00:34:28,480
robot car based implementation

839
00:34:28,480 --> 00:34:29,199
so

840
00:34:29,199 --> 00:34:30,639
what got done

841
00:34:30,639 --> 00:34:33,199
so we demonstrated

842
00:34:33,199 --> 00:34:36,159
our ip wave context of a navigation

843
00:34:36,159 --> 00:34:39,839
protocol message can be delivered

844
00:34:39,839 --> 00:34:43,599
over cb2x using simulation

845
00:34:43,599 --> 00:34:46,960
also we implemented the ip wave draft

846
00:34:46,960 --> 00:34:47,760
and

847
00:34:47,760 --> 00:34:50,159
w3c standard

848
00:34:50,159 --> 00:34:53,679
it is called the pis s vehicle

849
00:34:53,679 --> 00:34:56,000
information service specification

850
00:34:56,000 --> 00:34:58,079
deliver figure

851
00:34:58,079 --> 00:35:01,280
signal or sensing information to

852
00:35:01,280 --> 00:35:03,280
web server

853
00:35:03,280 --> 00:35:05,119
so the first part

854
00:35:05,119 --> 00:35:08,800
simulation case we use the sumo for

855
00:35:08,800 --> 00:35:11,680
vehicle mobility simulation

856
00:35:11,680 --> 00:35:14,400
and the lower part is

857
00:35:14,400 --> 00:35:19,200
the omf plus with the cv2x module

858
00:35:19,200 --> 00:35:20,800
to simulate

859
00:35:20,800 --> 00:35:22,240
the

860
00:35:22,240 --> 00:35:23,359
car

861
00:35:23,359 --> 00:35:27,200
uh communication based on uh

862
00:35:27,200 --> 00:35:29,280
cbtx okay

863
00:35:29,280 --> 00:35:32,400
so this figure shows our information

864
00:35:32,400 --> 00:35:35,839
implementation of omni plus plus so we

865
00:35:35,839 --> 00:35:38,640
implement the peaker structure

866
00:35:38,640 --> 00:35:41,040
to support the cv2x

867
00:35:41,040 --> 00:35:45,359
also on this is ipv6 stack especially um

868
00:35:45,359 --> 00:35:47,599
the icm 5006

869
00:35:47,599 --> 00:35:49,599
is for context

870
00:35:49,599 --> 00:35:52,720
over navigation protocol okay so we used

871
00:35:52,720 --> 00:35:54,800
this stack

872
00:35:54,800 --> 00:35:57,440
so last time uh we used

873
00:35:57,440 --> 00:35:58,960
elto.11

874
00:35:58,960 --> 00:36:02,880
waiver okay so at the eleven ocb

875
00:36:02,880 --> 00:36:06,160
uh stack so we used on this kind of

876
00:36:06,160 --> 00:36:07,359
mustache

877
00:36:07,359 --> 00:36:10,000
this time uh we demonstrated the the

878
00:36:10,000 --> 00:36:13,200
feasibility of cb tracks

879
00:36:13,200 --> 00:36:16,000
the cbu text is a standard

880
00:36:16,000 --> 00:36:18,800
for cpp so

881
00:36:18,800 --> 00:36:21,440
in future i believe

882
00:36:21,440 --> 00:36:24,640
ipwave can take advantage of

883
00:36:24,640 --> 00:36:26,480
wave stack and

884
00:36:26,480 --> 00:36:28,880
see if we to access stack for vehicular

885
00:36:28,880 --> 00:36:30,640
communication

886
00:36:30,640 --> 00:36:33,119
so this is a remote server and the

887
00:36:33,119 --> 00:36:34,400
vehicle so

888
00:36:34,400 --> 00:36:35,520
using

889
00:36:35,520 --> 00:36:36,720
ip wave

890
00:36:36,720 --> 00:36:39,599
vehicle mobility information message can

891
00:36:39,599 --> 00:36:42,240
be delivered over

892
00:36:42,240 --> 00:36:44,480
w3c standard

893
00:36:44,480 --> 00:36:47,599
such as a free iss figure information

894
00:36:47,599 --> 00:36:51,400
service specification also a general

895
00:36:51,400 --> 00:36:55,280
pre-access figure signal

896
00:36:55,280 --> 00:36:56,880
specification

897
00:36:56,880 --> 00:37:00,320
deliver vehicle sensor or other

898
00:37:00,320 --> 00:37:04,200
signal information can be delivered over

899
00:37:04,200 --> 00:37:06,480
viss format

900
00:37:06,480 --> 00:37:08,640
so this is also

901
00:37:08,640 --> 00:37:12,160
open source project so you can uh get

902
00:37:12,160 --> 00:37:14,880
the first link is

903
00:37:14,880 --> 00:37:16,800
our simulation

904
00:37:16,800 --> 00:37:17,920
for

905
00:37:17,920 --> 00:37:20,320
sibu text the second one is

906
00:37:20,320 --> 00:37:22,480
a local car based

907
00:37:22,480 --> 00:37:24,960
implementation card

908
00:37:24,960 --> 00:37:28,560
so um you can click and then uh this

909
00:37:28,560 --> 00:37:29,599
a

910
00:37:29,599 --> 00:37:31,839
ai on r1

911
00:37:31,839 --> 00:37:36,640
robotics load car can deliver its

912
00:37:36,640 --> 00:37:38,800
sensing information or figure speed

913
00:37:38,800 --> 00:37:40,480
information

914
00:37:40,480 --> 00:37:42,160
using wi-fi

915
00:37:42,160 --> 00:37:44,960
to a web server

916
00:37:44,960 --> 00:37:46,480
a second part

917
00:37:46,480 --> 00:37:48,560
demonstration

918
00:37:48,560 --> 00:37:51,680
this link uh demonstrate the civil text

919
00:37:51,680 --> 00:37:55,200
based context aware navigation protocol

920
00:37:55,200 --> 00:37:56,480
okay

921
00:37:56,480 --> 00:37:58,320
exchange

922
00:37:58,320 --> 00:38:00,079
so we work for

923
00:38:00,079 --> 00:38:03,040
a whole week uh with the sunshine

924
00:38:03,040 --> 00:38:08,079
university vm wg and i2 nsf team

925
00:38:08,079 --> 00:38:09,599
work together

926
00:38:09,599 --> 00:38:12,560
so this is a team member information

927
00:38:12,560 --> 00:38:17,440
so my ph student the pnma and my

928
00:38:17,520 --> 00:38:20,480
the master student chun hee

929
00:38:20,480 --> 00:38:21,599
maekwon

930
00:38:21,599 --> 00:38:25,040
so this is our um korean

931
00:38:25,040 --> 00:38:27,359
um hackathon teams members

932
00:38:27,359 --> 00:38:29,680
so this is a sponsor also we have

933
00:38:29,680 --> 00:38:32,560
appendix for cbu access examination and

934
00:38:32,560 --> 00:38:35,520
also we have

935
00:38:35,599 --> 00:38:38,320
index for our local car implementation

936
00:38:38,320 --> 00:38:41,200
and manipulation for

937
00:38:41,200 --> 00:38:42,240
people

938
00:38:42,240 --> 00:38:43,359
having uh

939
00:38:43,359 --> 00:38:46,079
interesting for our ip wave project

940
00:38:46,079 --> 00:38:48,000
thank you for your attention and

941
00:38:48,000 --> 00:38:49,680
interest

942
00:38:49,680 --> 00:38:53,040
any questions or comments

943
00:38:55,760 --> 00:38:59,599
thank you paul um anybody thank you

944
00:38:59,599 --> 00:39:02,720
yeah um hi paul hey yeah thanks for uh

945
00:39:02,720 --> 00:39:04,400
great presentations uh you always bring

946
00:39:04,400 --> 00:39:06,000
great projects to the hackathon so

947
00:39:06,000 --> 00:39:07,280
appreciate that

948
00:39:07,280 --> 00:39:08,079
um

949
00:39:08,079 --> 00:39:12,480
the cd cd2x um that was a new one to me

950
00:39:12,480 --> 00:39:13,599
which uh

951
00:39:13,599 --> 00:39:16,400
which standards organization uh defines

952
00:39:16,400 --> 00:39:17,680
that

953
00:39:17,680 --> 00:39:20,880
cebu text is 30 cpp

954
00:39:20,880 --> 00:39:25,200
the third party yeah partners right for

955
00:39:25,200 --> 00:39:26,240
5g

956
00:39:26,240 --> 00:39:30,640
you know lt right so recently the 3gpp

957
00:39:30,640 --> 00:39:32,160
uh

958
00:39:32,160 --> 00:39:35,520
also working for 6g but basically

959
00:39:35,520 --> 00:39:38,880
uh korea case we deployed 5g i believe

960
00:39:38,880 --> 00:39:42,079
the united states also solving the 5g

961
00:39:42,079 --> 00:39:44,640
service right for a cell phone right

962
00:39:44,640 --> 00:39:46,560
mobile smartphone

963
00:39:46,560 --> 00:39:49,839
so the vehicle case also the vehicle to

964
00:39:49,839 --> 00:39:51,040
everything

965
00:39:51,040 --> 00:39:54,480
case cputex model 4

966
00:39:54,480 --> 00:39:55,760
case

967
00:39:55,760 --> 00:39:58,160
provide the uh adult fashion

968
00:39:58,160 --> 00:40:00,480
communication which means the vehicle

969
00:40:00,480 --> 00:40:03,119
can communicate with without

970
00:40:03,119 --> 00:40:05,359
the base station okay

971
00:40:05,359 --> 00:40:06,240
so

972
00:40:06,240 --> 00:40:08,640
in that case uh we can

973
00:40:08,640 --> 00:40:10,960
provide the communication

974
00:40:10,960 --> 00:40:13,920
among beakers to avoid the accident also

975
00:40:13,920 --> 00:40:16,560
some detect some obstacles or headers

976
00:40:16,560 --> 00:40:18,160
you can notify

977
00:40:18,160 --> 00:40:21,359
every vehicles of that hazard so civil

978
00:40:21,359 --> 00:40:22,800
text will be

979
00:40:22,800 --> 00:40:26,240
the use per so european country case

980
00:40:26,240 --> 00:40:27,839
carbenders

981
00:40:27,839 --> 00:40:29,440
the

982
00:40:29,440 --> 00:40:30,160
the

983
00:40:30,160 --> 00:40:32,079
adopted

984
00:40:32,079 --> 00:40:34,079
civil tracks for um vehicular

985
00:40:34,079 --> 00:40:35,680
communication

986
00:40:35,680 --> 00:40:38,480
still the united states case the dsrc

987
00:40:38,480 --> 00:40:40,079
wave case

988
00:40:40,079 --> 00:40:42,640
they consider but i think uh two

989
00:40:42,640 --> 00:40:46,560
technology will be uh co-exist in future

990
00:40:46,560 --> 00:40:48,000
so that's why

991
00:40:48,000 --> 00:40:50,000
if you wave working group

992
00:40:50,000 --> 00:40:53,440
needed to consider cv text for mac and

993
00:40:53,440 --> 00:40:56,960
the file yeah protocol for hyperwave

994
00:40:56,960 --> 00:40:59,920
navigation or other yeah application

995
00:40:59,920 --> 00:41:00,720
yeah

996
00:41:00,720 --> 00:41:03,440
communication technologies okay

997
00:41:03,440 --> 00:41:05,520
okay yeah well thanks

998
00:41:05,520 --> 00:41:08,720
okay thank you charles

999
00:41:11,359 --> 00:41:14,480
what else questions

1000
00:41:15,599 --> 00:41:17,839
if not uh thanks again paul and yes

1001
00:41:17,839 --> 00:41:21,078
thank you

1002
00:41:21,200 --> 00:41:23,040
being a regular hackathon participant

1003
00:41:23,040 --> 00:41:24,560
and always bringing your students with

1004
00:41:24,560 --> 00:41:26,319
you that's great thank you okay thank

1005
00:41:26,319 --> 00:41:27,839
you

1006
00:41:27,839 --> 00:41:31,520
and oliver you're next with uh

1007
00:41:31,520 --> 00:41:35,800
the aspa um

1008
00:41:47,760 --> 00:41:49,680
okay can you hear me

1009
00:41:49,680 --> 00:41:50,960
we can

1010
00:41:50,960 --> 00:41:53,440
wonderful okay so

1011
00:41:53,440 --> 00:41:55,440
uh that was our first

1012
00:41:55,440 --> 00:41:57,599
active hackathon what we did i

1013
00:41:57,599 --> 00:42:01,119
participated some before as

1014
00:42:01,119 --> 00:42:03,119
listening in but

1015
00:42:03,119 --> 00:42:04,880
this time we said

1016
00:42:04,880 --> 00:42:08,000
uh that we wanted to make one on our own

1017
00:42:08,000 --> 00:42:09,280
um

1018
00:42:09,280 --> 00:42:12,160
so the the work what we what we did is

1019
00:42:12,160 --> 00:42:13,920
um

1020
00:42:13,920 --> 00:42:16,880
and i just go right away in here so the

1021
00:42:16,880 --> 00:42:19,040
the

1022
00:42:19,280 --> 00:42:22,560
we've worked since a long time in bgp

1023
00:42:22,560 --> 00:42:24,800
uh security and

1024
00:42:24,800 --> 00:42:26,560
uh we've worked on bgp seg path

1025
00:42:26,560 --> 00:42:27,839
validation

1026
00:42:27,839 --> 00:42:30,560
uh the bgb orange validation

1027
00:42:30,560 --> 00:42:33,920
and for that we created um reference

1028
00:42:33,920 --> 00:42:35,680
implementation

1029
00:42:35,680 --> 00:42:38,079
reference implementations and

1030
00:42:38,079 --> 00:42:40,400
a large software suite what

1031
00:42:40,400 --> 00:42:44,960
we know employ also for another uh work

1032
00:42:44,960 --> 00:42:47,839
at the sider ops working group uh the

1033
00:42:47,839 --> 00:42:51,280
aspa autonomous system provider uh

1034
00:42:51,280 --> 00:42:54,800
authorization and the goal of that is

1035
00:42:54,800 --> 00:42:56,640
of this hackathon what we started this

1036
00:42:56,640 --> 00:42:58,720
time is

1037
00:42:58,720 --> 00:43:01,680
to lay the groundworks for future

1038
00:43:01,680 --> 00:43:04,160
interoperability tests between different

1039
00:43:04,160 --> 00:43:05,839
implementations

1040
00:43:05,839 --> 00:43:09,119
and to create

1041
00:43:09,119 --> 00:43:10,800
large-scale

1042
00:43:10,800 --> 00:43:13,440
um

1043
00:43:13,440 --> 00:43:17,040
tests that then can be used to verify

1044
00:43:17,040 --> 00:43:18,640
the different

1045
00:43:18,640 --> 00:43:22,880
validations performance etc etc etc

1046
00:43:22,880 --> 00:43:25,520
um a very quick

1047
00:43:25,520 --> 00:43:28,319
explanation how the system in general

1048
00:43:28,319 --> 00:43:30,079
works

1049
00:43:30,079 --> 00:43:31,119
so

1050
00:43:31,119 --> 00:43:33,119
isps or

1051
00:43:33,119 --> 00:43:36,160
operators of autonomous system routers

1052
00:43:36,160 --> 00:43:39,760
basically register their data in the

1053
00:43:39,760 --> 00:43:41,920
rpki database

1054
00:43:41,920 --> 00:43:43,680
and

1055
00:43:43,680 --> 00:43:46,800
that then will be queried

1056
00:43:46,800 --> 00:43:48,960
relatively often by validation caches

1057
00:43:48,960 --> 00:43:50,319
that go out

1058
00:43:50,319 --> 00:43:55,280
download the x519 certificates etc and

1059
00:43:55,280 --> 00:43:57,920
then create something

1060
00:43:57,920 --> 00:44:01,200
we can call it maybe a white list

1061
00:44:01,200 --> 00:44:03,520
it's

1062
00:44:05,200 --> 00:44:10,880
the aspa information that describes the

1063
00:44:10,880 --> 00:44:13,359
customer provider relationships and

1064
00:44:13,359 --> 00:44:16,640
sends these ones then to the router or a

1065
00:44:16,640 --> 00:44:18,560
validation engine

1066
00:44:18,560 --> 00:44:20,480
that the router employs

1067
00:44:20,480 --> 00:44:24,000
and our interest for this iatf for this

1068
00:44:24,000 --> 00:44:25,680
hackathon was

1069
00:44:25,680 --> 00:44:27,680
the communication between the validation

1070
00:44:27,680 --> 00:44:29,359
cache and the router

1071
00:44:29,359 --> 00:44:30,560
so

1072
00:44:30,560 --> 00:44:32,880
um

1073
00:44:33,119 --> 00:44:35,760
the tools what we used was basically our

1074
00:44:35,760 --> 00:44:39,200
list bgp srx software suite

1075
00:44:39,200 --> 00:44:41,920
um where we have the aspa verification

1076
00:44:41,920 --> 00:44:43,839
implemented actually we

1077
00:44:43,839 --> 00:44:46,160
have and

1078
00:44:46,160 --> 00:44:48,960
currently the draft is version 8 but

1079
00:44:48,960 --> 00:44:52,160
there is an algorithm correction already

1080
00:44:52,160 --> 00:44:55,680
that was introduced some iatfs back

1081
00:44:55,680 --> 00:44:59,359
that will soon be added to this uh

1082
00:44:59,359 --> 00:45:01,119
standards draft and we have the

1083
00:45:01,119 --> 00:45:03,200
implementation for that

1084
00:45:03,200 --> 00:45:05,030
the other thing is the

1085
00:45:05,030 --> 00:45:06,960
[Music]

1086
00:45:06,960 --> 00:45:10,000
rfc 8210 is extended

1087
00:45:10,000 --> 00:45:14,079
uh to now also carry aspa objects and we

1088
00:45:14,079 --> 00:45:15,760
made the reference implementation for

1089
00:45:15,760 --> 00:45:17,760
this

1090
00:45:17,760 --> 00:45:18,560
um

1091
00:45:18,560 --> 00:45:20,880
so we wanted to use our test harness to

1092
00:45:20,880 --> 00:45:22,400
basically

1093
00:45:22,400 --> 00:45:23,359
um

1094
00:45:23,359 --> 00:45:24,480
yeah

1095
00:45:24,480 --> 00:45:27,280
run larger scale tests

1096
00:45:27,280 --> 00:45:29,599
um so what what was our task for this

1097
00:45:29,599 --> 00:45:32,640
hackathon we said okay we want to go out

1098
00:45:32,640 --> 00:45:33,760
we

1099
00:45:33,760 --> 00:45:36,000
take

1100
00:45:36,240 --> 00:45:38,880
sample internet scale asp data and we

1101
00:45:38,880 --> 00:45:41,359
use the kata reference data

1102
00:45:41,359 --> 00:45:43,359
to specify

1103
00:45:43,359 --> 00:45:45,359
they have very good algorithms to

1104
00:45:45,359 --> 00:45:48,560
specify the link relations between two

1105
00:45:48,560 --> 00:45:50,000
asses

1106
00:45:50,000 --> 00:45:52,960
and then we take that and we create the

1107
00:45:52,960 --> 00:45:55,119
input file format

1108
00:45:55,119 --> 00:45:58,839
for our software what basically

1109
00:45:58,839 --> 00:46:01,920
looks the following way you say you have

1110
00:46:01,920 --> 00:46:04,000
the aspa you give the f

1111
00:46:04,000 --> 00:46:05,599
e that could be uh

1112
00:46:05,599 --> 00:46:07,119
b4 b6

1113
00:46:07,119 --> 00:46:09,680
then the custom is and a list of

1114
00:46:09,680 --> 00:46:12,079
providers for these iss

1115
00:46:12,079 --> 00:46:15,760
and um what we then also did we went out

1116
00:46:15,760 --> 00:46:18,720
to route views and got some

1117
00:46:18,720 --> 00:46:20,640
um

1118
00:46:20,640 --> 00:46:23,440
egp updates

1119
00:46:23,440 --> 00:46:25,760
um

1120
00:46:26,560 --> 00:46:28,480
maybe follow another goal like so what

1121
00:46:28,480 --> 00:46:30,720
what did we do so we went out to the

1122
00:46:30,720 --> 00:46:34,079
cater and uh we got data actually i

1123
00:46:34,079 --> 00:46:36,319
think it's the data from october

1124
00:46:36,319 --> 00:46:39,839
1st 2020 because currently cada

1125
00:46:39,839 --> 00:46:43,040
is re revamping their algorithms and do

1126
00:46:43,040 --> 00:46:46,400
not provide the latest uh internet data

1127
00:46:46,400 --> 00:46:48,319
but for us it was perfectly fine because

1128
00:46:48,319 --> 00:46:50,800
we just said we wanted to have something

1129
00:46:50,800 --> 00:46:51,839
that

1130
00:46:51,839 --> 00:46:54,960
if we use already the internet traffic

1131
00:46:54,960 --> 00:46:57,150
we wanted to have data that is

1132
00:46:57,150 --> 00:46:59,359
[Music]

1133
00:46:59,359 --> 00:47:01,440
compiled out of the

1134
00:47:01,440 --> 00:47:03,520
internet topology

1135
00:47:03,520 --> 00:47:07,040
we this data produced around 70 000

1136
00:47:07,040 --> 00:47:08,839
customer

1137
00:47:08,839 --> 00:47:12,560
registration for us and that has over

1138
00:47:12,560 --> 00:47:16,640
180 000 link relationships

1139
00:47:16,640 --> 00:47:18,480
um

1140
00:47:18,480 --> 00:47:19,440
then

1141
00:47:19,440 --> 00:47:22,000
we what we did was we wanted to down

1142
00:47:22,000 --> 00:47:23,280
select that

1143
00:47:23,280 --> 00:47:25,520
and we did that where we said okay if i

1144
00:47:25,520 --> 00:47:29,359
don't for example i take a 100

1145
00:47:29,359 --> 00:47:32,319
routes a thousand routes 10 000 routes

1146
00:47:32,319 --> 00:47:35,040
so what we did we created we created

1147
00:47:35,040 --> 00:47:38,800
tools that go out and

1148
00:47:39,040 --> 00:47:40,720
create

1149
00:47:40,720 --> 00:47:43,440
a unique as path we were not interested

1150
00:47:43,440 --> 00:47:45,839
in the prefix because aspa does not look

1151
00:47:45,839 --> 00:47:47,280
into the prefix

1152
00:47:47,280 --> 00:47:49,760
it tries to identify

1153
00:47:49,760 --> 00:47:52,640
route leak space basically so if there's

1154
00:47:52,640 --> 00:47:55,359
a route leak um

1155
00:47:55,359 --> 00:47:57,359
for one prefix and most likely it's also

1156
00:47:57,359 --> 00:47:59,839
for other ones

1157
00:47:59,839 --> 00:48:04,319
the the validation here

1158
00:48:04,319 --> 00:48:07,760
is basically on on the path itself

1159
00:48:07,760 --> 00:48:10,800
um so what we did was we

1160
00:48:10,800 --> 00:48:13,200
down selected out of around i think it's

1161
00:48:13,200 --> 00:48:17,520
currently around 800 000 prefixes um

1162
00:48:17,520 --> 00:48:20,880
uh if depending how you how you run the

1163
00:48:20,880 --> 00:48:23,440
b2b dump on the mrt files you get up to

1164
00:48:23,440 --> 00:48:25,760
also 800 000 updates

1165
00:48:25,760 --> 00:48:26,720
we

1166
00:48:26,720 --> 00:48:29,119
down selected that to around 100 000

1167
00:48:29,119 --> 00:48:31,599
unique ones and then from there we we

1168
00:48:31,599 --> 00:48:33,599
said okay if you if you create a

1169
00:48:33,599 --> 00:48:35,440
thousand we only want to have the cata

1170
00:48:35,440 --> 00:48:36,400
data

1171
00:48:36,400 --> 00:48:40,640
that contains all asses within these uh

1172
00:48:40,640 --> 00:48:44,240
this is within the update data stream so

1173
00:48:44,240 --> 00:48:45,760
um

1174
00:48:45,760 --> 00:48:47,119
because the other ones they just would

1175
00:48:47,119 --> 00:48:48,480
lie in the system

1176
00:48:48,480 --> 00:48:49,920
dormant

1177
00:48:49,920 --> 00:48:52,800
so we created data sets for 100 500 800

1178
00:48:52,800 --> 00:48:55,119
1 000 10 020 000

1179
00:48:55,119 --> 00:48:57,040
unique as path

1180
00:48:57,040 --> 00:48:58,960
and

1181
00:48:58,960 --> 00:49:01,960
um

1182
00:49:02,480 --> 00:49:06,079
then we performed the aspa validation

1183
00:49:06,079 --> 00:49:08,400
very quick explanation on the validation

1184
00:49:08,400 --> 00:49:10,559
what it is so if i have a valid then i

1185
00:49:10,559 --> 00:49:13,200
didn't um identify your outlet if i have

1186
00:49:13,200 --> 00:49:16,559
an invalid then i detected a route leak

1187
00:49:16,559 --> 00:49:18,800
if the uh outcome is unknown then i

1188
00:49:18,800 --> 00:49:20,640
don't have enough asba information to

1189
00:49:20,640 --> 00:49:23,200
make any determination either way

1190
00:49:23,200 --> 00:49:26,240
and if an ai set is in the bgp path then

1191
00:49:26,240 --> 00:49:28,839
it's unverifiable

1192
00:49:28,839 --> 00:49:32,240
um that is one of the results what i

1193
00:49:32,240 --> 00:49:34,319
just compiled yesterday night where we

1194
00:49:34,319 --> 00:49:35,760
got everything up and running with all

1195
00:49:35,760 --> 00:49:37,040
the scripts

1196
00:49:37,040 --> 00:49:38,880
and it's to be taken with a little bit

1197
00:49:38,880 --> 00:49:42,000
of grain of salt because um

1198
00:49:42,000 --> 00:49:44,240
it's a relatively small data set i think

1199
00:49:44,240 --> 00:49:46,240
it was around 500 routes

1200
00:49:46,240 --> 00:49:49,119
and depending uh it becomes much more

1201
00:49:49,119 --> 00:49:50,880
interesting i guess if we go on a higher

1202
00:49:50,880 --> 00:49:53,200
one but one interesting thing to see for

1203
00:49:53,200 --> 00:49:55,440
example is already that

1204
00:49:55,440 --> 00:49:57,119
we

1205
00:49:57,119 --> 00:49:59,920
selected a large scale isp and we just

1206
00:49:59,920 --> 00:50:02,960
said okay if this isp is my provider

1207
00:50:02,960 --> 00:50:05,760
uh how many how many uh prefixes or how

1208
00:50:05,760 --> 00:50:07,520
many updates i received from them how

1209
00:50:07,520 --> 00:50:10,960
many paths are valid and that is 94 and

1210
00:50:10,960 --> 00:50:13,280
how many are invalid that basically

1211
00:50:13,280 --> 00:50:16,240
means result into route leaks

1212
00:50:16,240 --> 00:50:18,480
three percent and uh another three

1213
00:50:18,480 --> 00:50:20,800
percent i could not make a determination

1214
00:50:20,800 --> 00:50:22,720
now if i turn that around and say that

1215
00:50:22,720 --> 00:50:25,599
now my isp is my customer then of course

1216
00:50:25,599 --> 00:50:26,640
i

1217
00:50:26,640 --> 00:50:30,400
uh i don't expect 94 percent of valets

1218
00:50:30,400 --> 00:50:32,800
and that's what we definitely can verify

1219
00:50:32,800 --> 00:50:35,520
here so we have 14 of wallets

1220
00:50:35,520 --> 00:50:38,800
we have uh we identify 18 of route leaks

1221
00:50:38,800 --> 00:50:40,160
and 68

1222
00:50:40,160 --> 00:50:43,200
the data is not there to to make any

1223
00:50:43,200 --> 00:50:45,040
distinction in either way

1224
00:50:45,040 --> 00:50:48,000
um we didn't had time yet to really dig

1225
00:50:48,000 --> 00:50:50,000
deep into the analysis of that whole

1226
00:50:50,000 --> 00:50:50,960
thing

1227
00:50:50,960 --> 00:50:53,599
um that is something that has to be done

1228
00:50:53,599 --> 00:50:55,440
now going forward but

1229
00:50:55,440 --> 00:50:57,520
uh for this week we basically wanted to

1230
00:50:57,520 --> 00:50:58,960
create the

1231
00:50:58,960 --> 00:51:01,680
the infrastructure that one can start

1232
00:51:01,680 --> 00:51:03,440
working on that

1233
00:51:03,440 --> 00:51:05,680
and so what is the

1234
00:51:05,680 --> 00:51:09,520
to be what needs to be done um

1235
00:51:09,520 --> 00:51:11,680
currently our experimentation runs with

1236
00:51:11,680 --> 00:51:13,839
one implementation on the test with

1237
00:51:13,839 --> 00:51:15,760
against one pier it starts becoming

1238
00:51:15,760 --> 00:51:17,119
interesting running this against

1239
00:51:17,119 --> 00:51:18,800
multiple peers especially when we go

1240
00:51:18,800 --> 00:51:20,839
into the performance

1241
00:51:20,839 --> 00:51:23,520
testing and

1242
00:51:23,520 --> 00:51:25,200
hopefully we will see other

1243
00:51:25,200 --> 00:51:27,760
implementations coming

1244
00:51:27,760 --> 00:51:29,839
between today and the next hackathon so

1245
00:51:29,839 --> 00:51:31,839
then it might be interesting to compare

1246
00:51:31,839 --> 00:51:33,680
validations with other implementations

1247
00:51:33,680 --> 00:51:35,200
other than ours

1248
00:51:35,200 --> 00:51:37,359
to make sure that the validation results

1249
00:51:37,359 --> 00:51:38,480
are all

1250
00:51:38,480 --> 00:51:39,920
all the same

1251
00:51:39,920 --> 00:51:41,440
etc

1252
00:51:41,440 --> 00:51:44,000
further further

1253
00:51:44,000 --> 00:51:46,640
analysis will be of interest is gradual

1254
00:51:46,640 --> 00:51:48,880
deployment because what we did here

1255
00:51:48,880 --> 00:51:50,559
right now we had an almost hundred

1256
00:51:50,559 --> 00:51:52,640
percent deployment of aspa and if you

1257
00:51:52,640 --> 00:51:54,720
roll out a new technology that is not

1258
00:51:54,720 --> 00:51:56,000
what happens

1259
00:51:56,000 --> 00:51:58,480
um so the interest uh

1260
00:51:58,480 --> 00:52:00,400
there is to see

1261
00:52:00,400 --> 00:52:03,520
at one at what deployment rate start

1262
00:52:03,520 --> 00:52:05,839
aspa becoming really

1263
00:52:05,839 --> 00:52:06,960
um

1264
00:52:06,960 --> 00:52:08,319
making a

1265
00:52:08,319 --> 00:52:12,400
positive impact on detecting route leaks

1266
00:52:12,720 --> 00:52:13,520
the

1267
00:52:13,520 --> 00:52:16,559
software code of the bgp srx suite is on

1268
00:52:16,559 --> 00:52:18,640
github

1269
00:52:18,640 --> 00:52:20,800
if you go on github and you just search

1270
00:52:20,800 --> 00:52:22,720
for bgp srx

1271
00:52:22,720 --> 00:52:25,200
then you will find right away the

1272
00:52:25,200 --> 00:52:27,599
uh the software suite the code what we

1273
00:52:27,599 --> 00:52:30,160
developed for this hackathon i still

1274
00:52:30,160 --> 00:52:31,680
want to clean it up a little bit before

1275
00:52:31,680 --> 00:52:33,440
we put it up on github

1276
00:52:33,440 --> 00:52:36,160
um but it will be made available as well

1277
00:52:36,160 --> 00:52:37,440
and

1278
00:52:37,440 --> 00:52:39,440
i didn't make a final decision yet if

1279
00:52:39,440 --> 00:52:42,480
you put it on the on the ietf

1280
00:52:42,480 --> 00:52:45,280
hackathon github part or if we also run

1281
00:52:45,280 --> 00:52:47,599
it in the examples of ours

1282
00:52:47,599 --> 00:52:50,800
uh but depending what we will do uh we

1283
00:52:50,800 --> 00:52:52,720
will have it at least linked from uh

1284
00:52:52,720 --> 00:52:55,680
from the nist github uh part so that you

1285
00:52:55,680 --> 00:52:57,760
can find the code the

1286
00:52:57,760 --> 00:53:01,119
the scripts and and and so forth

1287
00:53:01,119 --> 00:53:01,920
um

1288
00:53:01,920 --> 00:53:03,839
yeah that's all what i have for today if

1289
00:53:03,839 --> 00:53:06,079
there are any questions

1290
00:53:06,079 --> 00:53:09,119
please feel free

1291
00:53:09,280 --> 00:53:11,440
to ask

1292
00:53:11,440 --> 00:53:13,359
and thanks oliver

1293
00:53:13,359 --> 00:53:16,400
questions for oliver

1294
00:53:20,720 --> 00:53:22,720
okay hearing nothing thanks again oliver

1295
00:53:22,720 --> 00:53:24,640
appreciate the presentation

1296
00:53:24,640 --> 00:53:27,440
and the next one up is the ansible api

1297
00:53:27,440 --> 00:53:29,839
generator

1298
00:53:29,920 --> 00:53:33,040
and the one after that will be whip so

1299
00:53:33,040 --> 00:53:34,319
get ready

1300
00:53:34,319 --> 00:53:36,240
yeah can you hear me

1301
00:53:36,240 --> 00:53:38,240
i can

1302
00:53:38,240 --> 00:53:39,200
okay

1303
00:53:39,200 --> 00:53:41,040
just waiting for your screen

1304
00:53:41,040 --> 00:53:42,640
and we see your screen

1305
00:53:42,640 --> 00:53:43,920
got it okay

1306
00:53:43,920 --> 00:53:45,520
okay okay thanks

1307
00:53:45,520 --> 00:53:48,160
so hello everyone this is tufang from

1308
00:53:48,160 --> 00:53:49,119
huawei

1309
00:53:49,119 --> 00:53:51,599
and i'm here to give a very brief

1310
00:53:51,599 --> 00:53:54,160
introduction of our project

1311
00:53:54,160 --> 00:53:57,440
the customized enable api generator

1312
00:53:57,440 --> 00:53:58,240
so

1313
00:53:58,240 --> 00:54:01,520
the motivation of this work is that we

1314
00:54:01,520 --> 00:54:03,520
really appreciate the

1315
00:54:03,520 --> 00:54:06,079
simple and efficient network automation

1316
00:54:06,079 --> 00:54:09,280
solution provided by ansible to manage

1317
00:54:09,280 --> 00:54:11,040
network devices

1318
00:54:11,040 --> 00:54:13,920
and we also know that the netcaf young

1319
00:54:13,920 --> 00:54:16,640
provides a standardized programming

1320
00:54:16,640 --> 00:54:17,839
interface

1321
00:54:17,839 --> 00:54:20,160
although the young schema is indeed a

1322
00:54:20,160 --> 00:54:21,520
standard

1323
00:54:21,520 --> 00:54:24,559
how the data itself is represented may

1324
00:54:24,559 --> 00:54:27,280
vary depending on the vendors

1325
00:54:27,280 --> 00:54:30,000
however not all vendors provide enviable

1326
00:54:30,000 --> 00:54:32,480
api to manage your device through

1327
00:54:32,480 --> 00:54:35,920
netconf and when the native vr modules

1328
00:54:35,920 --> 00:54:38,640
even though there are some integrated

1329
00:54:38,640 --> 00:54:41,200
solutions between edible and different

1330
00:54:41,200 --> 00:54:44,240
vendors the generalized enable apis

1331
00:54:44,240 --> 00:54:47,359
cannot meet customized requirements

1332
00:54:47,359 --> 00:54:49,839
so we really hope that there exists a

1333
00:54:49,839 --> 00:54:52,880
tool to generate any desired anabolic

1334
00:54:52,880 --> 00:54:57,440
apis so that they can be used directly

1335
00:54:57,440 --> 00:54:59,760
to communicate with network devices

1336
00:54:59,760 --> 00:55:02,960
through netconfion and these apis can be

1337
00:55:02,960 --> 00:55:06,240
used to greatly reduce the workload of

1338
00:55:06,240 --> 00:55:08,799
developers and allow them to focus on

1339
00:55:08,799 --> 00:55:10,480
their own business

1340
00:55:10,480 --> 00:55:12,799
the following gives some of our

1341
00:55:12,799 --> 00:55:16,400
specifications the related drafts which

1342
00:55:16,400 --> 00:55:18,839
which may be used in this

1343
00:55:18,839 --> 00:55:21,280
project so

1344
00:55:21,280 --> 00:55:24,319
what got done the our achievement is the

1345
00:55:24,319 --> 00:55:27,119
antibody and automatic and the api

1346
00:55:27,119 --> 00:55:28,720
generation tool

1347
00:55:28,720 --> 00:55:31,839
the generated enable apis could be

1348
00:55:31,839 --> 00:55:34,480
integrated into enable framework

1349
00:55:34,480 --> 00:55:37,040
automatically and also supports

1350
00:55:37,040 --> 00:55:39,599
customized input parameter check or

1351
00:55:39,599 --> 00:55:41,119
functionality

1352
00:55:41,119 --> 00:55:43,839
and by making use of enable gene we have

1353
00:55:43,839 --> 00:55:44,880
already

1354
00:55:44,880 --> 00:55:47,920
successfully delivered l3 with vpn

1355
00:55:47,920 --> 00:55:50,400
service to have a device through enable

1356
00:55:50,400 --> 00:55:51,839
plan book

1357
00:55:51,839 --> 00:55:54,079
so the following diagram gives an

1358
00:55:54,079 --> 00:55:56,720
architecture of animal gene and the

1359
00:55:56,720 --> 00:55:59,920
entire processing flow the user inputs

1360
00:55:59,920 --> 00:56:02,160
are related young modules and their

1361
00:56:02,160 --> 00:56:06,240
customized api description xml files

1362
00:56:06,240 --> 00:56:09,680
these customized api profiles are used

1363
00:56:09,680 --> 00:56:13,040
to describe your desired ansible apis

1364
00:56:13,040 --> 00:56:15,119
which will be called when delivering

1365
00:56:15,119 --> 00:56:16,559
netcup message

1366
00:56:16,559 --> 00:56:19,119
to the targeted nodes it's very similar

1367
00:56:19,119 --> 00:56:21,920
to netcover message but without values

1368
00:56:21,920 --> 00:56:22,960
carried

1369
00:56:22,960 --> 00:56:26,160
it could be an edit config get or get

1370
00:56:26,160 --> 00:56:29,280
config or rpc operation defined in your

1371
00:56:29,280 --> 00:56:31,119
modules

1372
00:56:31,119 --> 00:56:33,680
the young passer and xml passer will

1373
00:56:33,680 --> 00:56:37,040
check and pass the young modules and xml

1374
00:56:37,040 --> 00:56:39,839
description files respectively the

1375
00:56:39,839 --> 00:56:43,280
results as the input of adapter which is

1376
00:56:43,280 --> 00:56:45,839
responsible for generating the internal

1377
00:56:45,839 --> 00:56:48,240
object of animal gene and then

1378
00:56:48,240 --> 00:56:51,599
identified by the antibond module great

1379
00:56:51,599 --> 00:56:54,559
generator which will generate the angle

1380
00:56:54,559 --> 00:56:56,319
apis finally

1381
00:56:56,319 --> 00:56:59,680
the generated apis will be deployed in

1382
00:56:59,680 --> 00:57:02,559
anger environment automatically which

1383
00:57:02,559 --> 00:57:04,880
works as an edible module

1384
00:57:04,880 --> 00:57:07,119
when we issue a net conf

1385
00:57:07,119 --> 00:57:09,920
request through plan book the related

1386
00:57:09,920 --> 00:57:12,960
apis will be called and complete the

1387
00:57:12,960 --> 00:57:17,119
configuration management task

1388
00:57:17,119 --> 00:57:18,160
so

1389
00:57:18,160 --> 00:57:21,520
during this hacksaw week we learned that

1390
00:57:21,520 --> 00:57:24,000
the documentation is important for

1391
00:57:24,000 --> 00:57:27,119
involving others is even as important as

1392
00:57:27,119 --> 00:57:30,000
code we can't expect everyone to know

1393
00:57:30,000 --> 00:57:32,960
how to use it just by reading the code

1394
00:57:32,960 --> 00:57:35,440
and the second lesson the second lesson

1395
00:57:35,440 --> 00:57:38,880
we learned is to test early and often so

1396
00:57:38,880 --> 00:57:41,119
we can have more opportunities to catch

1397
00:57:41,119 --> 00:57:43,920
backs and more time to fix them

1398
00:57:43,920 --> 00:57:45,920
and also i would like to

1399
00:57:45,920 --> 00:57:48,640
thanks to panglio tanglio

1400
00:57:48,640 --> 00:57:51,440
viva and benson for visiting our project

1401
00:57:51,440 --> 00:57:53,680
and providing a very valuable

1402
00:57:53,680 --> 00:57:56,640
suggestions and great input

1403
00:57:56,640 --> 00:57:59,839
regarding the next step we would like to

1404
00:57:59,839 --> 00:58:01,920
support the latest version of and the

1405
00:58:01,920 --> 00:58:04,880
ball and we would also want to explore

1406
00:58:04,880 --> 00:58:07,359
this to define our enterprise profiles

1407
00:58:07,359 --> 00:58:10,480
more efficiently

1408
00:58:11,520 --> 00:58:13,440
and besides me

1409
00:58:13,440 --> 00:58:17,200
there are frank ching bin wai and xiang

1410
00:58:17,200 --> 00:58:19,920
thank you guys for your efforts and the

1411
00:58:19,920 --> 00:58:22,880
related outcomes of this project are

1412
00:58:22,880 --> 00:58:26,240
giving here the open source code and

1413
00:58:26,240 --> 00:58:28,000
a video demo

1414
00:58:28,000 --> 00:58:30,000
please feel free to read the video to

1415
00:58:30,000 --> 00:58:32,000
them so that you can get more detailed

1416
00:58:32,000 --> 00:58:34,480
information about this project

1417
00:58:34,480 --> 00:58:35,520
and

1418
00:58:35,520 --> 00:58:38,240
uh further contributions are welcome

1419
00:58:38,240 --> 00:58:40,400
yeah so this is the end of my

1420
00:58:40,400 --> 00:58:43,760
presentation thank you very much

1421
00:58:43,760 --> 00:58:46,160
thank you

1422
00:58:46,799 --> 00:58:48,799
and are there are there any questions or

1423
00:58:48,799 --> 00:58:52,000
comments for chuffon

1424
00:58:55,839 --> 00:58:57,359
okay hearing none

1425
00:58:57,359 --> 00:58:59,599
thanks again thanks for the presentation

1426
00:58:59,599 --> 00:59:02,240
and for the work of that

1427
00:59:02,240 --> 00:59:07,200
lorenzo you are up with uh whip

1428
00:59:08,410 --> 00:59:11,509
[Applause]

1429
00:59:13,760 --> 00:59:16,079
and lorenzo has the magic so i don't

1430
00:59:16,079 --> 00:59:19,359
approve his uh sharing

1431
00:59:19,359 --> 00:59:21,119
oh yeah sorry i didn't i didn't realize

1432
00:59:21,119 --> 00:59:22,880
that apologies

1433
00:59:22,880 --> 00:59:26,160
i don't care go for it

1434
00:59:26,319 --> 00:59:28,559
okay so this will be a brief report on

1435
00:59:28,559 --> 00:59:31,440
the interoperability tests on on weep

1436
00:59:31,440 --> 00:59:33,200
and just to

1437
00:59:33,200 --> 00:59:34,799
just to summarize producers that are

1438
00:59:34,799 --> 00:59:36,319
unfamiliar with it we

1439
00:59:36,319 --> 00:59:38,880
comes from a a recently formed working

1440
00:59:38,880 --> 00:59:40,480
group called wish which stands for

1441
00:59:40,480 --> 00:59:43,280
webrtc ingest signaling over https and

1442
00:59:43,280 --> 00:59:45,200
whip is the name of the protocol that is

1443
00:59:45,200 --> 00:59:47,440
being standardized there and it recently

1444
00:59:47,440 --> 00:59:49,599
went to version zero one which was

1445
00:59:49,599 --> 00:59:50,720
actually the

1446
00:59:50,720 --> 00:59:52,240
uh the

1447
00:59:52,240 --> 00:59:54,160
the main uh the main version that we

1448
00:59:54,160 --> 00:59:55,280
tried to

1449
00:59:55,280 --> 00:59:57,200
to test in these

1450
00:59:57,200 --> 00:59:59,359
in this interoperability test and we

1451
00:59:59,359 --> 01:00:01,440
basically wanted to cover two specific

1452
01:00:01,440 --> 01:00:02,960
aspects so first of all we wanted to

1453
01:00:02,960 --> 01:00:04,400
make sure that

1454
01:00:04,400 --> 01:00:06,240
we client and servers could actually

1455
01:00:06,240 --> 01:00:08,079
talk to each other using the web

1456
01:00:08,079 --> 01:00:10,000
signaling protocol itself but we also

1457
01:00:10,000 --> 01:00:12,079
wanted to take advantage of this chance

1458
01:00:12,079 --> 01:00:13,520
to also test

1459
01:00:13,520 --> 01:00:16,559
the webrtc exchanges beneath mostly

1460
01:00:16,559 --> 01:00:18,079
because most of the endpoints that i'll

1461
01:00:18,079 --> 01:00:20,480
talk about are not based on libor rtc

1462
01:00:20,480 --> 01:00:22,240
which means that they do not share the

1463
01:00:22,240 --> 01:00:23,119
same

1464
01:00:23,119 --> 01:00:25,760
library that browsers use and so it was

1465
01:00:25,760 --> 01:00:26,880
a

1466
01:00:26,880 --> 01:00:29,680
very unique chance to test heterogeneous

1467
01:00:29,680 --> 01:00:31,760
webrtc stacks instead which can be a bit

1468
01:00:31,760 --> 01:00:34,240
more problematic at times

1469
01:00:34,240 --> 01:00:36,400
and we actually did a few uh first

1470
01:00:36,400 --> 01:00:38,799
interrupt rounds among a limited set of

1471
01:00:38,799 --> 01:00:40,559
implementations a few weeks ago that i

1472
01:00:40,559 --> 01:00:42,400
documented in a blog post that you can

1473
01:00:42,400 --> 01:00:44,079
read there if you want and at the time

1474
01:00:44,079 --> 01:00:46,240
we had three clients and three servers

1475
01:00:46,240 --> 01:00:47,760
interacting with each other and

1476
01:00:47,760 --> 01:00:49,359
basically the results that we got from

1477
01:00:49,359 --> 01:00:50,880
that test that eventually were

1478
01:00:50,880 --> 01:00:53,680
successful basically helped us identify

1479
01:00:53,680 --> 01:00:56,079
a full set of key issues in the zero

1480
01:00:56,079 --> 01:00:58,880
zero the version of the of the documents

1481
01:00:58,880 --> 01:01:01,040
and basically zero one uh

1482
01:01:01,040 --> 01:01:02,480
most of the issues that were addressed

1483
01:01:02,480 --> 01:01:04,240
in zero one actually came out of that

1484
01:01:04,240 --> 01:01:06,960
interrupt round which was quite helpful

1485
01:01:06,960 --> 01:01:08,799
and this time around we wanted to test

1486
01:01:08,799 --> 01:01:11,200
more implementations instead and so we

1487
01:01:11,200 --> 01:01:13,599
ended up testing four different service

1488
01:01:13,599 --> 01:01:15,280
implementations including one that i

1489
01:01:15,280 --> 01:01:18,400
wrote myself one that julius wrote galen

1490
01:01:18,400 --> 01:01:20,079
sergio wrote

1491
01:01:20,079 --> 01:01:21,680
the integration in the medical

1492
01:01:21,680 --> 01:01:23,839
standpoint and cameron integrated this

1493
01:01:23,839 --> 01:01:26,880
into his own sfu called the cfu and for

1494
01:01:26,880 --> 01:01:28,720
clients we had six different clients

1495
01:01:28,720 --> 01:01:30,480
instead that we could test and both

1496
01:01:30,480 --> 01:01:32,480
servers and clients basically almost all

1497
01:01:32,480 --> 01:01:34,960
of them used different webrtc stacks

1498
01:01:34,960 --> 01:01:37,200
which is why it was quite interesting to

1499
01:01:37,200 --> 01:01:39,440
see how they fared with each other

1500
01:01:39,440 --> 01:01:41,839
and the end result was in a nutshell

1501
01:01:41,839 --> 01:01:43,200
these so

1502
01:01:43,200 --> 01:01:45,280
it was mostly successful and actually

1503
01:01:45,280 --> 01:01:47,520
more successful than the picture there

1504
01:01:47,520 --> 01:01:48,960
suggests

1505
01:01:48,960 --> 01:01:50,319
basically just to give you a quick

1506
01:01:50,319 --> 01:01:52,559
understanding a green smiley means that

1507
01:01:52,559 --> 01:01:54,880
everything worked fine out of the box a

1508
01:01:54,880 --> 01:01:57,280
yellow yellow smiley means that we had

1509
01:01:57,280 --> 01:01:58,960
to tweak something in other client of

1510
01:01:58,960 --> 01:02:01,119
server to get something working

1511
01:02:01,119 --> 01:02:03,599
red meant that nothing worked and so

1512
01:02:03,599 --> 01:02:05,359
further investigation is needed and no

1513
01:02:05,359 --> 01:02:07,440
arrangements that we couldn't test due

1514
01:02:07,440 --> 01:02:09,359
to something that was actually unrelated

1515
01:02:09,359 --> 01:02:12,079
to whip itself so like course issues or

1516
01:02:12,079 --> 01:02:13,280
stuff like this

1517
01:02:13,280 --> 01:02:15,119
and i try to summarize most of these

1518
01:02:15,119 --> 01:02:16,799
reports uh

1519
01:02:16,799 --> 01:02:19,440
the different results in these slides i

1520
01:02:19,440 --> 01:02:21,359
will i will not go very much in detail

1521
01:02:21,359 --> 01:02:23,359
in all of these uh

1522
01:02:23,359 --> 01:02:24,960
wrappers because they might take more

1523
01:02:24,960 --> 01:02:26,400
than the five minutes that i have but

1524
01:02:26,400 --> 01:02:28,880
just to give you an idea for instance uh

1525
01:02:28,880 --> 01:02:31,520
my client died when you try to talk to

1526
01:02:31,520 --> 01:02:33,680
this to the deadliest a few web server

1527
01:02:33,680 --> 01:02:36,079
because it made some assumptions and so

1528
01:02:36,079 --> 01:02:38,400
actually some assumptions that were made

1529
01:02:38,400 --> 01:02:40,240
out of the documents were because of

1530
01:02:40,240 --> 01:02:41,920
some of the problems that we experienced

1531
01:02:41,920 --> 01:02:44,240
in this case my client assumed that the

1532
01:02:44,240 --> 01:02:46,240
location header was always available and

1533
01:02:46,240 --> 01:02:48,799
detect field didn't provide it and so

1534
01:02:48,799 --> 01:02:50,480
basically that ended up in the crash

1535
01:02:50,480 --> 01:02:53,119
that i eventually fixed and so and and

1536
01:02:53,119 --> 01:02:55,039
there were a few similar issues as well

1537
01:02:55,039 --> 01:02:57,200
i should clarify that in this slide i

1538
01:02:57,200 --> 01:02:58,319
meant

1539
01:02:58,319 --> 01:03:01,440
i i put weepy which is the uh

1540
01:03:01,440 --> 01:03:03,520
the raspberry pi based client that team

1541
01:03:03,520 --> 01:03:05,680
wrote uh that basically didn't succeed

1542
01:03:05,680 --> 01:03:08,000
with neither galen and the decipher and

1543
01:03:08,000 --> 01:03:10,799
this was true up until a few hours ago

1544
01:03:10,799 --> 01:03:12,640
and the cause was basically

1545
01:03:12,640 --> 01:03:15,039
a nice interrupt issue between

1546
01:03:15,039 --> 01:03:17,760
the team's stack and the pi on stack

1547
01:03:17,760 --> 01:03:20,000
which is go based and eventually team

1548
01:03:20,000 --> 01:03:21,839
managed to find out what the issue was

1549
01:03:21,839 --> 01:03:24,400
which was actually more related to the

1550
01:03:24,400 --> 01:03:26,559
fire to fire release rather than ice

1551
01:03:26,559 --> 01:03:29,200
itself and he also had to address

1552
01:03:29,200 --> 01:03:31,760
again an assumption that the pion stack

1553
01:03:31,760 --> 01:03:34,160
made with respect to the usage of mid in

1554
01:03:34,160 --> 01:03:37,440
webrtc which again was uh an interesting

1555
01:03:37,440 --> 01:03:40,000
uh side effect of this test that's uh

1556
01:03:40,000 --> 01:03:42,240
that helped helped us identify a webrtc

1557
01:03:42,240 --> 01:03:44,480
related issues rather than a weak issue

1558
01:03:44,480 --> 01:03:46,079
and then there were some other issues

1559
01:03:46,079 --> 01:03:48,000
related again

1560
01:03:48,000 --> 01:03:49,839
to

1561
01:03:49,839 --> 01:03:52,160
either to assumptions or hard-coded

1562
01:03:52,160 --> 01:03:53,839
assumptions because for instance some

1563
01:03:53,839 --> 01:03:55,680
clients couldn't talk to some service

1564
01:03:55,680 --> 01:03:57,599
just because each of them were

1565
01:03:57,599 --> 01:03:59,680
hard-coded to use one codec rather than

1566
01:03:59,680 --> 01:04:01,440
another and so in this case this isn't

1567
01:04:01,440 --> 01:04:03,599
really a failure in how to how they use

1568
01:04:03,599 --> 01:04:06,079
whip but mostly a failure in actually

1569
01:04:06,079 --> 01:04:08,160
ended up into a successful negotiation

1570
01:04:08,160 --> 01:04:10,240
between the two maybe because the client

1571
01:04:10,240 --> 01:04:12,640
only offers bpa decline the server only

1572
01:04:12,640 --> 01:04:14,720
accepts h264 and so you end up with a

1573
01:04:14,720 --> 01:04:16,960
session that will not work basically

1574
01:04:16,960 --> 01:04:17,760
and

1575
01:04:17,760 --> 01:04:20,000
apart from this it was mostly issues for

1576
01:04:20,000 --> 01:04:21,440
instance related to self-signed

1577
01:04:21,440 --> 01:04:23,200
certificates not being accepted which

1578
01:04:23,200 --> 01:04:25,440
made it a bit harder to do tests locally

1579
01:04:25,440 --> 01:04:27,440
these sort of things

1580
01:04:27,440 --> 01:04:29,760
and a few other assumptions like course

1581
01:04:29,760 --> 01:04:31,680
issues or missing support for better

1582
01:04:31,680 --> 01:04:32,880
tokens which is something that we

1583
01:04:32,880 --> 01:04:34,960
actually want to look into sooner or

1584
01:04:34,960 --> 01:04:37,440
later and really to summarize what we

1585
01:04:37,440 --> 01:04:39,760
wanted to really focus on in this first

1586
01:04:39,760 --> 01:04:40,640
uh

1587
01:04:40,640 --> 01:04:42,799
first this first round was basically

1588
01:04:42,799 --> 01:04:45,200
really focusing on the basics so trying

1589
01:04:45,200 --> 01:04:47,280
to get the webrtc stream to be published

1590
01:04:47,280 --> 01:04:49,599
using with possibly tweaking trickling

1591
01:04:49,599 --> 01:04:51,520
candidates and checking whether or not i

1592
01:04:51,520 --> 01:04:53,039
know your video stream is actually

1593
01:04:53,039 --> 01:04:55,520
consumable on the other end so we didn't

1594
01:04:55,520 --> 01:04:57,039
want to really push it beyond that

1595
01:04:57,039 --> 01:04:58,720
mostly because this was the first time

1596
01:04:58,720 --> 01:05:00,960
we all met together in order to to try

1597
01:05:00,960 --> 01:05:03,760
and do a larger test among among each

1598
01:05:03,760 --> 01:05:05,680
other and what we really want to test

1599
01:05:05,680 --> 01:05:07,359
next is actually going a bit further

1600
01:05:07,359 --> 01:05:08,960
than that so for instance making sure

1601
01:05:08,960 --> 01:05:11,440
that the authentication using tokens

1602
01:05:11,440 --> 01:05:13,039
actually works as specified in the

1603
01:05:13,039 --> 01:05:15,520
documentation how to properly use the

1604
01:05:15,520 --> 01:05:17,680
location and link headers to uh to

1605
01:05:17,680 --> 01:05:19,680
address whip resources and automatically

1606
01:05:19,680 --> 01:05:21,599
configure stun and turn and this would

1607
01:05:21,599 --> 01:05:24,079
actually be useful to do in environments

1608
01:05:24,079 --> 01:05:26,160
that are actually more limited in terms

1609
01:05:26,160 --> 01:05:28,640
of actually setting up a peer connection

1610
01:05:28,640 --> 01:05:30,880
than the more open setups that we had

1611
01:05:30,880 --> 01:05:33,280
right now addressing also ice restarts

1612
01:05:33,280 --> 01:05:35,119
and related risk conditions which is

1613
01:05:35,119 --> 01:05:36,079
something that we are actually

1614
01:05:36,079 --> 01:05:37,760
discussing right now in the working

1615
01:05:37,760 --> 01:05:39,440
group and it's something that we haven't

1616
01:05:39,440 --> 01:05:41,839
had the time to actually look into

1617
01:05:41,839 --> 01:05:44,000
as as far as the different

1618
01:05:44,000 --> 01:05:46,480
implementations are concerned plus some

1619
01:05:46,480 --> 01:05:48,400
issues related to sessions cleanup which

1620
01:05:48,400 --> 01:05:50,720
is which isn't always done properly by

1621
01:05:50,720 --> 01:05:52,319
your clients and service which means

1622
01:05:52,319 --> 01:05:54,079
that you can end up sometimes with door

1623
01:05:54,079 --> 01:05:56,319
front sessions and things like this so

1624
01:05:56,319 --> 01:05:58,000
it's definitely something else that we

1625
01:05:58,000 --> 01:06:00,079
need to to address in in future

1626
01:06:00,079 --> 01:06:01,760
interrupt tests

1627
01:06:01,760 --> 01:06:04,079
and to conclude this is the uh the

1628
01:06:04,079 --> 01:06:05,760
interrupt testing team that worked uh

1629
01:06:05,760 --> 01:06:07,520
that was together in these past few days

1630
01:06:07,520 --> 01:06:10,000
so sergio is actually the whip champion

1631
01:06:10,000 --> 01:06:12,720
uh for this for this hackathon uh then

1632
01:06:12,720 --> 01:06:14,559
there was me there was tim panton then

1633
01:06:14,559 --> 01:06:16,640
jenkins cameron elliott and alberto

1634
01:06:16,640 --> 01:06:18,720
gonzalez stoic as well

1635
01:06:18,720 --> 01:06:19,920
i don't know if

1636
01:06:19,920 --> 01:06:22,559
there is any question for me

1637
01:06:22,559 --> 01:06:24,480
thank you

1638
01:06:24,480 --> 01:06:27,119
thanks lorenzo questions or comments for

1639
01:06:27,119 --> 01:06:30,119
lorenzo

1640
01:06:33,599 --> 01:06:35,440
so yeah thanks for the presentation i

1641
01:06:35,440 --> 01:06:37,520
have a question for you which uh which

1642
01:06:37,520 --> 01:06:39,920
video conferencing tool did you use for

1643
01:06:39,920 --> 01:06:42,720
your team to uh collaborate

1644
01:06:42,720 --> 01:06:44,640
well actually yeah that's uh the funny

1645
01:06:44,640 --> 01:06:47,760
thing is that um webrtc developers tend

1646
01:06:47,760 --> 01:06:50,880
to tend to communicate in real time as

1647
01:06:50,880 --> 01:06:53,039
as as as low as the community the

1648
01:06:53,039 --> 01:06:54,400
real-time communications tend to be as

1649
01:06:54,400 --> 01:06:57,039
low as possible so we try to use mostly

1650
01:06:57,039 --> 01:06:59,599
synchronous communications like

1651
01:06:59,599 --> 01:07:02,240
we we might engage on matrix or twitter

1652
01:07:02,240 --> 01:07:04,559
or any kind of messaging platform so it

1653
01:07:04,559 --> 01:07:06,799
was mostly this kind of interactions

1654
01:07:06,799 --> 01:07:08,319
rather than having a conversation like

1655
01:07:08,319 --> 01:07:10,160
we're having right now we tend to be

1656
01:07:10,160 --> 01:07:11,920
quite lazy and just

1657
01:07:11,920 --> 01:07:13,520
just chat instead of talking to each

1658
01:07:13,520 --> 01:07:15,200
other

1659
01:07:15,200 --> 01:07:17,039
okay and just one other thought it'd be

1660
01:07:17,039 --> 01:07:18,799
interesting on your your slide some of

1661
01:07:18,799 --> 01:07:21,680
the problems you identified you uh

1662
01:07:21,680 --> 01:07:24,400
you've already fixed so to have a i mean

1663
01:07:24,400 --> 01:07:27,039
i'd put like an extra big smiley face on

1664
01:07:27,039 --> 01:07:28,880
those the ones that uh

1665
01:07:28,880 --> 01:07:30,880
yeah that's true yeah yeah

1666
01:07:30,880 --> 01:07:32,799
i had some problems trying to actually

1667
01:07:32,799 --> 01:07:34,480
frame this one because the yellow ones

1668
01:07:34,480 --> 01:07:35,920
should actually be

1669
01:07:35,920 --> 01:07:37,599
a bigger smile because it's an issue we

1670
01:07:37,599 --> 01:07:39,440
fixed rather than something that we had

1671
01:07:39,440 --> 01:07:41,039
to fix and so it was a bit more of a

1672
01:07:41,039 --> 01:07:43,359
frowny face so it may be more of a

1673
01:07:43,359 --> 01:07:44,480
messaging

1674
01:07:44,480 --> 01:07:45,760
uh

1675
01:07:45,760 --> 01:07:47,839
a pure communication on my side so i'll

1676
01:07:47,839 --> 01:07:49,599
definitely fix this next time thanks for

1677
01:07:49,599 --> 01:07:51,599
the feedback

1678
01:07:51,599 --> 01:07:53,280
thanks a good great project and and

1679
01:07:53,280 --> 01:07:55,119
thanks for sharing

1680
01:07:55,119 --> 01:07:57,760
thank you

1681
01:07:57,760 --> 01:08:01,760
other comments for lorenzo

1682
01:08:03,359 --> 01:08:05,359
okay thanks again lorenzo and steven

1683
01:08:05,359 --> 01:08:08,480
you're up next with uh augmented packet

1684
01:08:08,480 --> 01:08:10,640
header

1685
01:08:10,640 --> 01:08:13,359
diagrams

1686
01:08:20,640 --> 01:08:22,479
it can use

1687
01:08:22,479 --> 01:08:23,839
you know

1688
01:08:23,839 --> 01:08:24,799
yes

1689
01:08:24,799 --> 01:08:28,000
we can see the slides we can hear you

1690
01:08:28,000 --> 01:08:30,000
excellent so hi everyone i'm stephen

1691
01:08:30,000 --> 01:08:31,600
mccusin from the university of glasgow

1692
01:08:31,600 --> 01:08:33,040
and i just want to

1693
01:08:33,040 --> 01:08:35,279
briefly talk about the work that we did

1694
01:08:35,279 --> 01:08:36,880
this week on the machine readable

1695
01:08:36,880 --> 01:08:38,960
documents and their tools project that

1696
01:08:38,960 --> 01:08:43,600
we proposed alongside mark petty hugging

1697
01:08:44,719 --> 01:08:46,799
so this is a fairly broad project and

1698
01:08:46,799 --> 01:08:48,399
it's it's really an umbrella for a

1699
01:08:48,399 --> 01:08:50,479
variety of projects that are trying to

1700
01:08:50,479 --> 01:08:52,719
use tooling to automate different

1701
01:08:52,719 --> 01:08:55,040
aspects of the draft authorship and

1702
01:08:55,040 --> 01:08:58,000
standards publication processes

1703
01:08:58,000 --> 01:09:00,319
and of the sort of subsequent processing

1704
01:09:00,319 --> 01:09:02,479
of these documents

1705
01:09:02,479 --> 01:09:04,000
so just give an idea of what we're

1706
01:09:04,000 --> 01:09:05,759
talking about this includes tools that

1707
01:09:05,759 --> 01:09:06,880
are used to

1708
01:09:06,880 --> 01:09:09,040
generate standards documents or drafts

1709
01:09:09,040 --> 01:09:11,600
in rfcs so that's things like computer

1710
01:09:11,600 --> 01:09:13,679
specifying that mark will talk about

1711
01:09:13,679 --> 01:09:15,359
next

1712
01:09:15,359 --> 01:09:17,439
it also includes formal and sort of

1713
01:09:17,439 --> 01:09:20,319
semi-structured languages like abnf and

1714
01:09:20,319 --> 01:09:22,640
yang the augmented packet header

1715
01:09:22,640 --> 01:09:24,719
diagrams work that i'll talk about

1716
01:09:24,719 --> 01:09:26,719
and the the quick packet notation that

1717
01:09:26,719 --> 01:09:30,000
some of you might be familiar with

1718
01:09:30,399 --> 01:09:31,759
on the other side we are also

1719
01:09:31,759 --> 01:09:34,319
considering tooling that derives meaning

1720
01:09:34,319 --> 01:09:36,399
from draft so that might be using

1721
01:09:36,399 --> 01:09:38,640
natural language processing run over

1722
01:09:38,640 --> 01:09:40,799
drafts and documents or it might be

1723
01:09:40,799 --> 01:09:42,880
parsers for these structured languages

1724
01:09:42,880 --> 01:09:45,120
here

1725
01:09:45,839 --> 01:09:47,439
and in terms of what we want to do with

1726
01:09:47,439 --> 01:09:49,198
the documents we're thinking about

1727
01:09:49,198 --> 01:09:51,120
things like automatic parser code

1728
01:09:51,120 --> 01:09:53,679
generation so generating parser code for

1729
01:09:53,679 --> 01:09:55,520
the protocols that the documents

1730
01:09:55,520 --> 01:09:57,360
describe automatically from the

1731
01:09:57,360 --> 01:09:59,520
documents themselves or producing

1732
01:09:59,520 --> 01:10:01,520
mathematical proofs that demonstrate

1733
01:10:01,520 --> 01:10:04,080
that the document describes a protocol

1734
01:10:04,080 --> 01:10:05,520
or something that is

1735
01:10:05,520 --> 01:10:08,480
provably correct

1736
01:10:09,199 --> 01:10:11,199
as i say this is quite broad and we're

1737
01:10:11,199 --> 01:10:12,000
really

1738
01:10:12,000 --> 01:10:13,440
trying to be as inclusive as possible

1739
01:10:13,440 --> 01:10:15,199
for all of these techniques and tools

1740
01:10:15,199 --> 01:10:16,640
and languages

1741
01:10:16,640 --> 01:10:18,320
but this week we worked on two main

1742
01:10:18,320 --> 01:10:20,560
projects as i say mark's going to

1743
01:10:20,560 --> 01:10:23,600
discuss his work on computer specifying

1744
01:10:23,600 --> 01:10:25,760
but i'll just briefly update you on our

1745
01:10:25,760 --> 01:10:27,440
work with augmented packet header

1746
01:10:27,440 --> 01:10:31,000
diagrams format

1747
01:10:31,040 --> 01:10:33,600
so just to briefly introduce this format

1748
01:10:33,600 --> 01:10:35,920
we found that most documents that are

1749
01:10:35,920 --> 01:10:38,719
specifying protocols do so with a sort

1750
01:10:38,719 --> 01:10:41,120
of broadly similar format so you can see

1751
01:10:41,120 --> 01:10:42,880
in the right hand side here you know we

1752
01:10:42,880 --> 01:10:45,280
have this ascii packet header diagram

1753
01:10:45,280 --> 01:10:46,960
and then below that we've got this

1754
01:10:46,960 --> 01:10:48,880
description list of each field

1755
01:10:48,880 --> 01:10:50,640
describing the length of the field and

1756
01:10:50,640 --> 01:10:52,560
its contents

1757
01:10:52,560 --> 01:10:53,760
so what we've done with our work is

1758
01:10:53,760 --> 01:10:56,960
we've sort of regularized this format so

1759
01:10:56,960 --> 01:10:58,080
that we can parse it out of the

1760
01:10:58,080 --> 01:11:00,480
documents that use it and then generate

1761
01:11:00,480 --> 01:11:02,800
parser code for the protocol that that

1762
01:11:02,800 --> 01:11:06,000
document is specifying

1763
01:11:06,000 --> 01:11:07,520
and what we've done is we've done this

1764
01:11:07,520 --> 01:11:09,920
with really minimal change to the format

1765
01:11:09,920 --> 01:11:12,320
as it's typically used today and the

1766
01:11:12,320 --> 01:11:14,080
idea here is that we want to limit how

1767
01:11:14,080 --> 01:11:16,480
much effort document authors have to put

1768
01:11:16,480 --> 01:11:19,280
in to changing their documents and the

1769
01:11:19,280 --> 01:11:21,120
way they write their documents to be

1770
01:11:21,120 --> 01:11:23,520
able to support our format

1771
01:11:23,520 --> 01:11:25,199
and this really balances the sort of

1772
01:11:25,199 --> 01:11:27,520
structure and uniformity that we need to

1773
01:11:27,520 --> 01:11:29,360
be able to pass these descriptions out

1774
01:11:29,360 --> 01:11:31,600
of the documents with the flexibility

1775
01:11:31,600 --> 01:11:33,679
that you actually need in the real world

1776
01:11:33,679 --> 01:11:37,360
practical use of these documents

1777
01:11:37,360 --> 01:11:38,719
and we've got prototype tooling that

1778
01:11:38,719 --> 01:11:41,600
supports this input format so you run

1779
01:11:41,600 --> 01:11:43,280
our tooling over

1780
01:11:43,280 --> 01:11:45,840
a draft and it will produce a parser

1781
01:11:45,840 --> 01:11:47,920
code for any protocols that are being

1782
01:11:47,920 --> 01:11:50,080
specified using our format and it

1783
01:11:50,080 --> 01:11:52,239
produces code in rust that will then let

1784
01:11:52,239 --> 01:11:56,400
you parse out packets in that protocol

1785
01:11:56,400 --> 01:11:58,400
we're seeing some adoption of the format

1786
01:11:58,400 --> 01:12:00,719
so the tcp bis draft that's going

1787
01:12:00,719 --> 01:12:02,880
through tcpm uses it

1788
01:12:02,880 --> 01:12:04,640
and so in essence you can take that

1789
01:12:04,640 --> 01:12:06,960
draft run our tooling over it and

1790
01:12:06,960 --> 01:12:11,199
automatically generate a tcp parser

1791
01:12:11,679 --> 01:12:13,120
of course there's a lot more information

1792
01:12:13,120 --> 01:12:15,199
about all of this we've got a draft that

1793
01:12:15,199 --> 01:12:17,840
specifies the sort of rationale behind

1794
01:12:17,840 --> 01:12:20,000
what we're trying to do with the format

1795
01:12:20,000 --> 01:12:22,400
and that describes the format itself the

1796
01:12:22,400 --> 01:12:24,560
draft also has pointers to the github

1797
01:12:24,560 --> 01:12:26,400
repositories with uh all of our

1798
01:12:26,400 --> 01:12:28,000
prototype tooling in it

1799
01:12:28,000 --> 01:12:30,320
and any contributions and any comments

1800
01:12:30,320 --> 01:12:33,920
on it is are more than welcome

1801
01:12:34,719 --> 01:12:36,719
so in terms of what we did this week we

1802
01:12:36,719 --> 01:12:38,960
had lots of very good very useful

1803
01:12:38,960 --> 01:12:40,640
discussions about the particular

1804
01:12:40,640 --> 01:12:43,679
language that we use in our format so

1805
01:12:43,679 --> 01:12:46,159
our format uses sort of structured

1806
01:12:46,159 --> 01:12:48,960
english phrases um to indicate where we

1807
01:12:48,960 --> 01:12:50,480
start a definition

1808
01:12:50,480 --> 01:12:52,239
we had lots of discussions about how

1809
01:12:52,239 --> 01:12:54,080
these phrases could be improved so that

1810
01:12:54,080 --> 01:12:55,520
they're actually better for you know

1811
01:12:55,520 --> 01:12:57,440
humans to read rather than thinking too

1812
01:12:57,440 --> 01:13:00,239
much about machine readability

1813
01:13:00,239 --> 01:13:02,000
beyond that we also considered what we

1814
01:13:02,000 --> 01:13:04,400
might be able to do to mark out the

1815
01:13:04,400 --> 01:13:07,440
structured text components of our format

1816
01:13:07,440 --> 01:13:09,679
so that you know when we pass drafts to

1817
01:13:09,679 --> 01:13:11,840
the rc editor for publication that

1818
01:13:11,840 --> 01:13:13,920
they're not actually edited out and no

1819
01:13:13,920 --> 01:13:17,199
longer become parsable by our tool

1820
01:13:17,199 --> 01:13:18,800
and finally in terms of our prototype

1821
01:13:18,800 --> 01:13:21,920
code we started working upon

1822
01:13:21,920 --> 01:13:24,000
adding flexibility so adding more

1823
01:13:24,000 --> 01:13:26,719
languages that we can produce um parsers

1824
01:13:26,719 --> 01:13:29,600
in and adding robustness so we want our

1825
01:13:29,600 --> 01:13:31,600
tooling to be able to to run over every

1826
01:13:31,600 --> 01:13:34,000
draft even if it doesn't include our

1827
01:13:34,000 --> 01:13:36,480
format um and we've really started

1828
01:13:36,480 --> 01:13:39,440
working on adding that robustness and uh

1829
01:13:39,440 --> 01:13:41,520
in terms of what we do next that's

1830
01:13:41,520 --> 01:13:42,960
that's the sort of two strands that

1831
01:13:42,960 --> 01:13:44,960
we're going to pick up on as we move

1832
01:13:44,960 --> 01:13:47,120
forward with it

1833
01:13:47,120 --> 01:13:48,560
um so

1834
01:13:48,560 --> 01:13:50,000
all in all it was quite a productive

1835
01:13:50,000 --> 01:13:51,760
week a lot of good discussions with

1836
01:13:51,760 --> 01:13:54,000
people that that haven't been uh engaged

1837
01:13:54,000 --> 01:13:56,320
with the work previously um so it's been

1838
01:13:56,320 --> 01:13:58,080
really good to see some new people and

1839
01:13:58,080 --> 01:13:59,760
thank you to everyone that came along to

1840
01:13:59,760 --> 01:14:01,679
the project table and discussed their

1841
01:14:01,679 --> 01:14:03,199
work with us

1842
01:14:03,199 --> 01:14:04,800
really appreciate it

1843
01:14:04,800 --> 01:14:09,320
and i'll take any questions anyone has

1844
01:14:14,640 --> 01:14:17,360
yeah um uh great presentation one

1845
01:14:17,360 --> 01:14:20,480
question uh if i wanted to try this out

1846
01:14:20,480 --> 01:14:23,040
on a draft that i have or

1847
01:14:23,040 --> 01:14:25,040
even an rfc or

1848
01:14:25,040 --> 01:14:26,800
um i guess probably on a draft right

1849
01:14:26,800 --> 01:14:27,920
because i'll probably have to change

1850
01:14:27,920 --> 01:14:31,440
some things or yeah but uh anyways where

1851
01:14:31,440 --> 01:14:33,600
where can i go to get uh kind of a

1852
01:14:33,600 --> 01:14:35,760
prototype version of this the the best

1853
01:14:35,760 --> 01:14:38,320
bet is to uh to find this draft um on

1854
01:14:38,320 --> 01:14:39,920
the data tracker and we've got links to

1855
01:14:39,920 --> 01:14:42,480
the the github repository at the bottom

1856
01:14:42,480 --> 01:14:44,560
of the draft and so all the tooling is

1857
01:14:44,560 --> 01:14:46,719
available it's the tooling itself is

1858
01:14:46,719 --> 01:14:48,080
written in python

1859
01:14:48,080 --> 01:14:50,719
um the instructions should be hopefully

1860
01:14:50,719 --> 01:14:52,800
reasonably clear but if there's anything

1861
01:14:52,800 --> 01:14:54,800
at all that comes up as you try to use

1862
01:14:54,800 --> 01:14:57,120
it then happy to take any any feedback

1863
01:14:57,120 --> 01:14:58,719
or any comments

1864
01:14:58,719 --> 01:15:00,800
great thanks steve

1865
01:15:00,800 --> 01:15:03,040
cheers

1866
01:15:04,480 --> 01:15:08,239
else any questions comments

1867
01:15:08,640 --> 01:15:13,400
okay thanks steven and mark europe

1868
01:15:25,360 --> 01:15:27,840
can we see the slides

1869
01:15:27,840 --> 01:15:29,199
hello

1870
01:15:29,199 --> 01:15:30,159
yep

1871
01:15:30,159 --> 01:15:32,159
we can hear you okay

1872
01:15:32,159 --> 01:15:34,000
go for it okay

1873
01:15:34,000 --> 01:15:37,040
why are my slide

1874
01:15:37,040 --> 01:15:38,960
truncated on the left

1875
01:15:38,960 --> 01:15:41,280
right

1876
01:15:44,480 --> 01:15:46,239
okay all right

1877
01:15:46,239 --> 01:15:47,360
okay

1878
01:15:47,360 --> 01:15:48,719
uh hi so

1879
01:15:48,719 --> 01:15:51,520
my name is mark pettigoner

1880
01:15:51,520 --> 01:15:54,719
as stephen said uh participated in the

1881
01:15:54,719 --> 01:15:58,880
project on umbrella which is about uh

1882
01:15:59,040 --> 01:16:02,400
machine readable uh specifications

1883
01:16:02,400 --> 01:16:04,719
so this will be i will start with a

1884
01:16:04,719 --> 01:16:06,640
quick introduction of what computer

1885
01:16:06,640 --> 01:16:08,719
specifying is because i think that there

1886
01:16:08,719 --> 01:16:10,880
is less than five people on the planet

1887
01:16:10,880 --> 01:16:13,199
who knows what i'm talking about

1888
01:16:13,199 --> 01:16:14,159
so

1889
01:16:14,159 --> 01:16:17,360
uh he started a long time ago and the

1890
01:16:17,360 --> 01:16:19,679
goal of this project is to ensure that

1891
01:16:19,679 --> 01:16:21,679
example in rfc are correct because

1892
01:16:21,679 --> 01:16:23,760
sometimes they are not and because

1893
01:16:23,760 --> 01:16:25,840
programmers generally look at example

1894
01:16:25,840 --> 01:16:28,000
when they write their code and not add

1895
01:16:28,000 --> 01:16:30,880
normative text then we get

1896
01:16:30,880 --> 01:16:32,400
implementations that are not

1897
01:16:32,400 --> 01:16:34,000
interpretable

1898
01:16:34,000 --> 01:16:35,520
so

1899
01:16:35,520 --> 01:16:38,239
basically a computer specification is a

1900
01:16:38,239 --> 01:16:40,159
document which is written in the format

1901
01:16:40,159 --> 01:16:41,920
which is called ascii doc

1902
01:16:41,920 --> 01:16:44,159
which is a which is

1903
01:16:44,159 --> 01:16:47,920
not a markdown but looks like one and

1904
01:16:47,920 --> 01:16:49,760
the big advantage of this format is that

1905
01:16:49,760 --> 01:16:52,880
it's extensible without having to modify

1906
01:16:52,880 --> 01:16:54,320
the code

1907
01:16:54,320 --> 01:16:56,800
as a xml2fc

1908
01:16:56,800 --> 01:16:59,600
hondura is in fact provided by the

1909
01:16:59,600 --> 01:17:02,239
metanormal project that some of you may

1910
01:17:02,239 --> 01:17:05,440
may know so i wrote an extension well

1911
01:17:05,440 --> 01:17:06,880
extensions

1912
01:17:06,880 --> 01:17:07,760
to

1913
01:17:07,760 --> 01:17:10,800
ask askidok that permits to add code

1914
01:17:10,800 --> 01:17:13,520
inside a document in the same document

1915
01:17:13,520 --> 01:17:16,080
that will be your internet draft or your

1916
01:17:16,080 --> 01:17:18,000
lfc you can add code

1917
01:17:18,000 --> 01:17:20,400
and the most important thing is that you

1918
01:17:20,400 --> 01:17:22,960
can evaluate some of this code

1919
01:17:22,960 --> 01:17:25,199
and put the result of this evaluation in

1920
01:17:25,199 --> 01:17:28,159
the document itself at the same time

1921
01:17:28,159 --> 01:17:31,040
it's generated so

1922
01:17:31,040 --> 01:17:33,520
here an example of that which is taken

1923
01:17:33,520 --> 01:17:34,880
for uh

1924
01:17:34,880 --> 01:17:36,080
88

1925
01:17:36,080 --> 01:17:36,800
like

1926
01:17:36,800 --> 01:17:38,080
something

1927
01:17:38,080 --> 01:17:40,640
so the idea is that on top the block on

1928
01:17:40,640 --> 01:17:43,040
top is a computer right specification

1929
01:17:43,040 --> 01:17:44,960
right you have code which you can

1930
01:17:44,960 --> 01:17:48,080
recognize because there is a

1931
01:17:48,080 --> 01:17:50,239
greater than which is called a bird mark

1932
01:17:50,239 --> 01:17:54,239
on the left so this is code and then

1933
01:17:54,239 --> 01:17:56,880
underneath this you have text

1934
01:17:56,880 --> 01:18:00,719
where you have this um code macro code

1935
01:18:00,719 --> 01:18:02,480
column and uh

1936
01:18:02,480 --> 01:18:04,159
and the code in

1937
01:18:04,159 --> 01:18:06,640
between bracket which will be

1938
01:18:06,640 --> 01:18:08,640
evaluated and the result

1939
01:18:08,640 --> 01:18:11,280
the result inserted into the generator

1940
01:18:11,280 --> 01:18:14,400
text so in the middle you have the

1941
01:18:14,400 --> 01:18:17,440
command which is used to to do that and

1942
01:18:17,440 --> 01:18:19,360
there is one command that does

1943
01:18:19,360 --> 01:18:21,280
everything and it generates

1944
01:18:21,280 --> 01:18:25,760
xml to lfc text html and pdf format for

1945
01:18:25,760 --> 01:18:28,640
this document and on the bottom you have

1946
01:18:28,640 --> 01:18:31,520
the result what will appear in in the

1947
01:18:31,520 --> 01:18:34,880
actual document and you can see that the

1948
01:18:34,880 --> 01:18:37,679
macro is replaced by the values that are

1949
01:18:37,679 --> 01:18:41,760
in fact calculated instead of being

1950
01:18:41,760 --> 01:18:42,880
filled

1951
01:18:42,880 --> 01:18:47,199
manually by the author of the hrc

1952
01:18:47,199 --> 01:18:48,960
the problem of that is that in my

1953
01:18:48,960 --> 01:18:50,880
opinion this is not enough right

1954
01:18:50,880 --> 01:18:53,679
programmers are still programmer and

1955
01:18:53,679 --> 01:18:56,640
some their main output is are still it

1956
01:18:56,640 --> 01:18:58,000
still bugs

1957
01:18:58,000 --> 01:19:00,960
so i i needed something better than this

1958
01:19:00,960 --> 01:19:03,600
i can guarantee that the example are

1959
01:19:03,600 --> 01:19:06,000
correct right so there is two way of

1960
01:19:06,000 --> 01:19:08,000
doing that you can have verification

1961
01:19:08,000 --> 01:19:10,239
tools that verify that the example are

1962
01:19:10,239 --> 01:19:11,280
correct

1963
01:19:11,280 --> 01:19:15,120
or you can go the less easy way which is

1964
01:19:15,120 --> 01:19:17,280
to generate examples that are already

1965
01:19:17,280 --> 01:19:19,520
correct by construction right so you

1966
01:19:19,520 --> 01:19:22,560
still can verify them but if you forget

1967
01:19:22,560 --> 01:19:25,679
to verify them they are still going

1968
01:19:25,679 --> 01:19:27,760
the problem is to do that is that you

1969
01:19:27,760 --> 01:19:30,080
cannot use any programming language

1970
01:19:30,080 --> 01:19:32,080
right all programming language are

1971
01:19:32,080 --> 01:19:35,120
equivalent to each other except for

1972
01:19:35,120 --> 01:19:37,280
their type system and in this case we

1973
01:19:37,280 --> 01:19:39,440
need a type system that can encode

1974
01:19:39,440 --> 01:19:41,120
higher order

1975
01:19:41,120 --> 01:19:44,080
logic right which there is probably free

1976
01:19:44,080 --> 01:19:47,280
programming language that can do this

1977
01:19:47,280 --> 01:19:49,920
and the one that shows this it

1978
01:19:49,920 --> 01:19:51,280
too

1979
01:19:51,280 --> 01:19:54,239
which was designed at the university of

1980
01:19:54,239 --> 01:19:58,000
saint andrews in scotland

1981
01:19:58,000 --> 01:19:59,520
so

1982
01:19:59,520 --> 01:20:01,199
i am done with the computer

1983
01:20:01,199 --> 01:20:03,520
specification now what i am working on

1984
01:20:03,520 --> 01:20:06,560
is to provide some library in idris

1985
01:20:06,560 --> 01:20:09,840
to provide to solve common problems that

1986
01:20:09,840 --> 01:20:12,159
internet drafts also

1987
01:20:12,159 --> 01:20:15,280
would have why and i'm working on a lot

1988
01:20:15,280 --> 01:20:17,760
of this stuff with one of the simpler

1989
01:20:17,760 --> 01:20:21,520
and most accessible to everyone is a b

1990
01:20:21,520 --> 01:20:23,920
and f right a lot of

1991
01:20:23,920 --> 01:20:25,120
internet

1992
01:20:25,120 --> 01:20:25,920
of

1993
01:20:25,920 --> 01:20:28,480
rfcs contain

1994
01:20:28,480 --> 01:20:31,760
abnf so you can see on the bottom an

1995
01:20:31,760 --> 01:20:35,360
example of in this case how this library

1996
01:20:35,360 --> 01:20:38,480
module works right so i design uh the

1997
01:20:38,480 --> 01:20:41,920
domain specific language a dsl that can

1998
01:20:41,920 --> 01:20:44,080
be used to define a b and f grammar

1999
01:20:44,080 --> 01:20:47,360
right so here i defined alpha

2000
01:20:47,360 --> 01:20:50,639
which is probably the most well-known

2001
01:20:50,639 --> 01:20:54,320
rule for abnf and then

2002
01:20:54,320 --> 01:20:55,440
here

2003
01:20:55,440 --> 01:20:57,760
on the top i insert

2004
01:20:57,760 --> 01:21:00,239
the the serialization if you want of

2005
01:21:00,239 --> 01:21:03,120
this and the result of the serialization

2006
01:21:03,120 --> 01:21:05,840
is what you have underneath so

2007
01:21:05,840 --> 01:21:08,719
not only it print

2008
01:21:08,719 --> 01:21:10,080
a correct

2009
01:21:10,080 --> 01:21:12,800
syntactically correct

2010
01:21:12,800 --> 01:21:15,760
string but it also format it right it it

2011
01:21:15,760 --> 01:21:18,239
does pretty print printing so if there

2012
01:21:18,239 --> 01:21:20,800
is not enough size in the line it it

2013
01:21:20,800 --> 01:21:23,600
will wrap up the line and and do the

2014
01:21:23,600 --> 01:21:26,400
white thing according to analysis

2015
01:21:26,400 --> 01:21:28,400
52 34

2016
01:21:28,400 --> 01:21:29,120
but

2017
01:21:29,120 --> 01:21:31,679
this is not enough to generate an

2018
01:21:31,679 --> 01:21:33,840
example remember my goal is still to

2019
01:21:33,840 --> 01:21:35,440
generate an example

2020
01:21:35,440 --> 01:21:37,440
which is correct so

2021
01:21:37,440 --> 01:21:39,600
my first idea was to generate example

2022
01:21:39,600 --> 01:21:42,800
from an ibnf but this is a terrible idea

2023
01:21:42,800 --> 01:21:44,880
and the reason for that is that an abnf

2024
01:21:44,880 --> 01:21:47,440
cannot describe all the constraints that

2025
01:21:47,440 --> 01:21:50,639
you have in the pdu it is supposed to

2026
01:21:50,639 --> 01:21:53,280
describe right and i found a really nice

2027
01:21:53,280 --> 01:21:56,239
example nice because it's shorter it's

2028
01:21:56,239 --> 01:21:59,280
uh some symbolic expression that

2029
01:21:59,280 --> 01:22:01,120
everyone who wrote

2030
01:22:01,120 --> 01:22:04,239
lisp code uh should uh have seen right

2031
01:22:04,239 --> 01:22:06,880
and this is a very simply of a version

2032
01:22:06,880 --> 01:22:08,960
of

2033
01:22:08,960 --> 01:22:09,360
which sx

2034
01:22:09,360 --> 01:22:11,360
used by basically from machine to

2035
01:22:11,360 --> 01:22:12,480
machine

2036
01:22:12,480 --> 01:22:14,880
transfer right here if you look at the

2037
01:22:14,880 --> 01:22:16,239
second

2038
01:22:16,239 --> 01:22:19,280
rule token you can see that there is a

2039
01:22:19,280 --> 01:22:21,600
number a column and then a number of

2040
01:22:21,600 --> 01:22:22,480
octa

2041
01:22:22,480 --> 01:22:24,560
octet the problem is that the number of

2042
01:22:24,560 --> 01:22:27,520
octet is it should be in fact the value

2043
01:22:27,520 --> 01:22:30,480
of the number before right so there is

2044
01:22:30,480 --> 01:22:33,360
five column you should have five update

2045
01:22:33,360 --> 01:22:35,920
after this you cannot encode that that

2046
01:22:35,920 --> 01:22:36,719
in

2047
01:22:36,719 --> 01:22:39,600
a b and f at all right so this is why

2048
01:22:39,600 --> 01:22:42,000
this is a bad idea to

2049
01:22:42,000 --> 01:22:46,560
to to base an example on its a b and f

2050
01:22:46,560 --> 01:22:49,440
now what we want is to be sure that an

2051
01:22:49,440 --> 01:22:51,679
example with generate is also correct

2052
01:22:51,679 --> 01:22:53,000
according to the

2053
01:22:53,000 --> 01:22:56,239
ibbnf so the right way to do that

2054
01:22:56,239 --> 01:22:59,679
is to generate a type for a

2055
01:22:59,679 --> 01:23:01,040
symbolic

2056
01:23:01,040 --> 01:23:03,760
expression and eventually a dsl that

2057
01:23:03,760 --> 01:23:07,840
make it easier to do so sx are easy are

2058
01:23:07,840 --> 01:23:11,280
simple so the the code fits inside the

2059
01:23:11,280 --> 01:23:13,600
the slides the slide right

2060
01:23:13,600 --> 01:23:15,920
but how to be sure that the printable

2061
01:23:15,920 --> 01:23:17,679
value of that type

2062
01:23:17,679 --> 01:23:19,520
which is an example is correct according

2063
01:23:19,520 --> 01:23:21,920
to the ib that's that that was what i

2064
01:23:21,920 --> 01:23:24,480
worked during this this week at the

2065
01:23:24,480 --> 01:23:25,679
academy

2066
01:23:25,679 --> 01:23:29,360
so the solution was was quite simple uh

2067
01:23:29,360 --> 01:23:32,080
now that i know what it is one so the

2068
01:23:32,080 --> 01:23:33,280
idea

2069
01:23:33,280 --> 01:23:34,560
is to

2070
01:23:34,560 --> 01:23:37,760
to to build a proof that this string is

2071
01:23:37,760 --> 01:23:39,840
correct right and this is why we need

2072
01:23:39,840 --> 01:23:42,880
things like idris and that are not we

2073
01:23:42,880 --> 01:23:44,880
need to add to use a programming

2074
01:23:44,880 --> 01:23:47,040
language like idris because this is the

2075
01:23:47,040 --> 01:23:48,639
only one that can

2076
01:23:48,639 --> 01:23:51,840
build a chip a type which is actually a

2077
01:23:51,840 --> 01:23:55,520
proof right so here we are saying that

2078
01:23:55,520 --> 01:23:58,000
we can build an instance of valid of the

2079
01:23:58,000 --> 01:24:01,120
type valid only is the string that we

2080
01:24:01,120 --> 01:24:04,080
pass and the grammar that we pass are

2081
01:24:04,080 --> 01:24:05,920
correct once if the string is correct

2082
01:24:05,920 --> 01:24:08,080
according to the

2083
01:24:08,080 --> 01:24:09,120
grammar

2084
01:24:09,120 --> 01:24:11,520
and so i designed it in a way that you

2085
01:24:11,520 --> 01:24:12,960
can directly

2086
01:24:12,960 --> 01:24:16,080
insert a value of this type and it will

2087
01:24:16,080 --> 01:24:18,480
display the validated string

2088
01:24:18,480 --> 01:24:20,159
so the last thing

2089
01:24:20,159 --> 01:24:22,560
that one need to do is to write a

2090
01:24:22,560 --> 01:24:25,760
conversion between the type which is a

2091
01:24:25,760 --> 01:24:27,280
perfect thing

2092
01:24:27,280 --> 01:24:30,960
and this right and this is the the the

2093
01:24:30,960 --> 01:24:32,480
the thing that you see

2094
01:24:32,480 --> 01:24:34,560
uh at the bottom it shows the type of

2095
01:24:34,560 --> 01:24:36,560
usually the implementation is missing

2096
01:24:36,560 --> 01:24:38,239
and will not fit

2097
01:24:38,239 --> 01:24:40,880
but the idea is that we transform an

2098
01:24:40,880 --> 01:24:44,239
instance of something of type a

2099
01:24:44,239 --> 01:24:47,679
symbolic expression into a list and into

2100
01:24:47,679 --> 01:24:50,639
a proof that this list is valid for the

2101
01:24:50,639 --> 01:24:52,159
grammar

2102
01:24:52,159 --> 01:24:54,960
sx which is on the on the right with a

2103
01:24:54,960 --> 01:24:58,480
small s right and then it's simple you

2104
01:24:58,480 --> 01:25:00,800
just have to insert the result of all of

2105
01:25:00,800 --> 01:25:03,280
that in your text right so

2106
01:25:03,280 --> 01:25:06,639
this is how it's done uh you have of our

2107
01:25:06,639 --> 01:25:09,920
function example we use a dsl to to to

2108
01:25:09,920 --> 01:25:11,040
define

2109
01:25:11,040 --> 01:25:12,560
our

2110
01:25:12,560 --> 01:25:14,480
symbolic expression and it's

2111
01:25:14,480 --> 01:25:17,199
automatically verified

2112
01:25:17,199 --> 01:25:19,280
and it generates the text that you see

2113
01:25:19,280 --> 01:25:23,520
on the bottom which cannot be an invalid

2114
01:25:23,520 --> 01:25:28,000
symbolic expression this is impossible

2115
01:25:28,000 --> 01:25:31,120
unless you tweak your compiler

2116
01:25:31,120 --> 01:25:33,199
so

2117
01:25:33,199 --> 01:25:36,719
this is all i have this is uh thanks to

2118
01:25:36,719 --> 01:25:39,440
a a lot of this discussion this week

2119
01:25:39,440 --> 01:25:42,800
with stephen colleen and robert and gene

2120
01:25:42,800 --> 01:25:44,880
and luke lucas

2121
01:25:44,880 --> 01:25:47,440
you can find the all the documentation

2122
01:25:47,440 --> 01:25:49,840
and all the links are in the

2123
01:25:49,840 --> 01:25:52,560
spec which is an internet draft

2124
01:25:52,560 --> 01:25:55,520
even access to the tooling um

2125
01:25:55,520 --> 01:25:57,840
there is a link inside to find it which

2126
01:25:57,840 --> 01:25:59,840
can be retrieved by with

2127
01:25:59,840 --> 01:26:02,080
toronto uh i am

2128
01:26:02,080 --> 01:26:04,880
we will be releasing the version 15 this

2129
01:26:04,880 --> 01:26:07,280
weekend that will contain these new

2130
01:26:07,280 --> 01:26:11,120
things and that's all i have

2131
01:26:12,320 --> 01:26:14,400
thanks mark uh yeah i'm really excited

2132
01:26:14,400 --> 01:26:16,320
about both the stuff that steven was

2133
01:26:16,320 --> 01:26:19,120
talking about and and this stuff

2134
01:26:19,120 --> 01:26:20,639
automating

2135
01:26:20,639 --> 01:26:23,120
automating this stuff will help us a lot

2136
01:26:23,120 --> 01:26:25,440
any anybody have questions or comments

2137
01:26:25,440 --> 01:26:27,919
for mark

2138
01:26:32,719 --> 01:26:35,120
okay hearing nothing thanks again mark

2139
01:26:35,120 --> 01:26:37,600
appreciate the presentation

2140
01:26:37,600 --> 01:26:39,120
and with that

2141
01:26:39,120 --> 01:26:41,840
we've gone through all the presentations

2142
01:26:41,840 --> 01:26:45,120
that i think are uploaded does anybody

2143
01:26:45,120 --> 01:26:47,360
have a presentation that they think i

2144
01:26:47,360 --> 01:26:48,840
missed

2145
01:26:48,840 --> 01:26:52,320
um hey robert uh this is honest um

2146
01:26:52,320 --> 01:26:54,639
i thought that i uploaded mine but i i

2147
01:26:54,639 --> 01:26:56,159
may be just wrong

2148
01:26:56,159 --> 01:26:59,199
and and i failed to upload

2149
01:26:59,199 --> 01:27:01,040
well if you want to just present it from

2150
01:27:01,040 --> 01:27:03,040
your screen go ahead and request screen

2151
01:27:03,040 --> 01:27:05,199
sharing and and yeah

2152
01:27:05,199 --> 01:27:08,480
perfect i will do that

2153
01:27:11,920 --> 01:27:14,920
okay

2154
01:27:19,120 --> 01:27:23,120
give me a second i'm trying to find

2155
01:27:30,320 --> 01:27:33,600
can you guys see my screen doesn't work

2156
01:27:33,600 --> 01:27:35,199
yes

2157
01:27:35,199 --> 01:27:37,519
okay

2158
01:27:43,840 --> 01:27:44,840
perfect

2159
01:27:44,840 --> 01:27:48,320
okay so um

2160
01:27:48,320 --> 01:27:50,880
we worked on on a a little bit broad

2161
01:27:50,880 --> 01:27:54,080
topic in some sense on iod security

2162
01:27:54,080 --> 01:27:56,960
and um what that meant for us was we

2163
01:27:56,960 --> 01:27:59,679
wanted to implement specifications uh

2164
01:27:59,679 --> 01:28:01,360
developed in

2165
01:28:01,360 --> 01:28:03,360
these different iot security working

2166
01:28:03,360 --> 01:28:05,440
groups and we had

2167
01:28:05,440 --> 01:28:08,480
been doing hackathons on those topics um

2168
01:28:08,480 --> 01:28:11,440
already for a while so we have a

2169
01:28:11,440 --> 01:28:14,480
pretty good code base i would say uh but

2170
01:28:14,480 --> 01:28:16,639
needless um

2171
01:28:16,639 --> 01:28:18,480
to mention that there's obviously a lot

2172
01:28:18,480 --> 01:28:20,639
of continuous development in those

2173
01:28:20,639 --> 01:28:23,360
groups and on some of the specifications

2174
01:28:23,360 --> 01:28:25,120
are not finalized and we try to

2175
01:28:25,120 --> 01:28:27,280
integrate integrate them to each other

2176
01:28:27,280 --> 01:28:30,159
like the core groups the core group

2177
01:28:30,159 --> 01:28:31,679
develops co-op

2178
01:28:31,679 --> 01:28:32,560
um

2179
01:28:32,560 --> 01:28:35,520
and it's protected using ddls and then

2180
01:28:35,520 --> 01:28:38,719
there's uh firmware updates um using

2181
01:28:38,719 --> 01:28:41,280
suit and so on and so on many other

2182
01:28:41,280 --> 01:28:44,000
groups sort of fall into that bucket

2183
01:28:44,000 --> 01:28:46,880
and what we also wanted to do like we

2184
01:28:46,880 --> 01:28:49,840
did in previous hackathons was to offer

2185
01:28:49,840 --> 01:28:52,320
tutorials um to

2186
01:28:52,320 --> 01:28:54,400
help new participants get up to speed a

2187
01:28:54,400 --> 01:28:56,560
little bit faster because some of the

2188
01:28:56,560 --> 01:28:58,000
development

2189
01:28:58,000 --> 01:29:00,480
is embedded development is

2190
01:29:00,480 --> 01:29:01,760
complicated

2191
01:29:01,760 --> 01:29:03,520
and there's

2192
01:29:03,520 --> 01:29:07,120
focus on low level uh programming so

2193
01:29:07,120 --> 01:29:09,600
we thought that that would be useful

2194
01:29:09,600 --> 01:29:10,800
again

2195
01:29:10,800 --> 01:29:12,400
um of course we

2196
01:29:12,400 --> 01:29:14,639
to make it uh more exciting we

2197
01:29:14,639 --> 01:29:17,520
prepared new presentations new topics um

2198
01:29:17,520 --> 01:29:19,280
and

2199
01:29:19,280 --> 01:29:22,000
and as i mentioned on this slide um

2200
01:29:22,000 --> 01:29:23,840
we managed to hold all the tutorials the

2201
01:29:23,840 --> 01:29:25,600
slides and the recordings are available

2202
01:29:25,600 --> 01:29:28,080
some people asks for it because they

2203
01:29:28,080 --> 01:29:30,320
like time zone differences and other

2204
01:29:30,320 --> 01:29:32,320
commitments made it difficult

2205
01:29:32,320 --> 01:29:33,840
for everyone who was interested to

2206
01:29:33,840 --> 01:29:35,760
participate

2207
01:29:35,760 --> 01:29:39,199
we also managed to write some code

2208
01:29:39,199 --> 01:29:40,719
of course

2209
01:29:40,719 --> 01:29:42,159
such as

2210
01:29:42,159 --> 01:29:44,239
sort of extensions

2211
01:29:44,239 --> 01:29:47,360
iot specific security extensions to tls

2212
01:29:47,360 --> 01:29:48,400
and

2213
01:29:48,400 --> 01:29:51,600
worked on empty dls code

2214
01:29:51,600 --> 01:29:54,560
also uh code for wireshark was uh

2215
01:29:54,560 --> 01:29:56,639
developed and and released and i think

2216
01:29:56,639 --> 01:29:59,840
it's already merged into wireshark so uh

2217
01:29:59,840 --> 01:30:02,400
you may be able to benefit from this uh

2218
01:30:02,400 --> 01:30:06,400
when if you uh use wireshark

2219
01:30:06,560 --> 01:30:07,360
we

2220
01:30:07,360 --> 01:30:09,360
also enhanced the an open source

2221
01:30:09,360 --> 01:30:12,400
implementation called backhammer

2222
01:30:12,400 --> 01:30:14,960
that is used for as a lightweight m2m

2223
01:30:14,960 --> 01:30:17,040
client lightweight m2m is a device

2224
01:30:17,040 --> 01:30:18,639
management solution

2225
01:30:18,639 --> 01:30:21,440
that uses co-op and a variety of

2226
01:30:21,440 --> 01:30:23,840
extensions uh so that was extended with

2227
01:30:23,840 --> 01:30:24,800
uh

2228
01:30:24,800 --> 01:30:27,920
security support uh bsa crypto

2229
01:30:27,920 --> 01:30:30,159
and uh the connection ids that i

2230
01:30:30,159 --> 01:30:31,679
mentioned previously

2231
01:30:31,679 --> 01:30:33,040
and so on

2232
01:30:33,040 --> 01:30:35,040
um some other folks

2233
01:30:35,040 --> 01:30:35,840
uh

2234
01:30:35,840 --> 01:30:38,000
didn't manage to get that far

2235
01:30:38,000 --> 01:30:40,159
to really sort of release the code

2236
01:30:40,159 --> 01:30:41,600
because um

2237
01:30:41,600 --> 01:30:43,199
obviously first you have to understand

2238
01:30:43,199 --> 01:30:45,280
the real-time operating systems and the

2239
01:30:45,280 --> 01:30:47,920
details of it before you can extend them

2240
01:30:47,920 --> 01:30:49,199
so they

2241
01:30:49,199 --> 01:30:52,560
did the deep dive on on those and how to

2242
01:30:52,560 --> 01:30:54,960
and figure out on how to integrate

2243
01:30:54,960 --> 01:30:57,760
uh their favorite uh projects

2244
01:30:57,760 --> 01:31:00,400
and i expect this to continue this work

2245
01:31:00,400 --> 01:31:02,800
to continue um

2246
01:31:02,800 --> 01:31:04,560
of course after this week

2247
01:31:04,560 --> 01:31:08,080
so we may have some results also in the

2248
01:31:08,080 --> 01:31:10,880
next couple of weeks or months

2249
01:31:10,880 --> 01:31:12,400
before we meet again at the next

2250
01:31:12,400 --> 01:31:13,520
hackathon

2251
01:31:13,520 --> 01:31:15,040
um

2252
01:31:15,040 --> 01:31:17,280
while doing these uh implementation

2253
01:31:17,280 --> 01:31:20,320
activities uh various issues uh were

2254
01:31:20,320 --> 01:31:22,320
identified with specifications

2255
01:31:22,320 --> 01:31:24,320
specifically in the suit and the deep

2256
01:31:24,320 --> 01:31:27,280
working groups and here uh some of them

2257
01:31:27,280 --> 01:31:29,440
that i have collected

2258
01:31:29,440 --> 01:31:31,520
i won't go into the details

2259
01:31:31,520 --> 01:31:32,480
you can

2260
01:31:32,480 --> 01:31:34,400
probably going to be discussed at the

2261
01:31:34,400 --> 01:31:36,719
meetings next week

2262
01:31:36,719 --> 01:31:39,120
so i skipped that um

2263
01:31:39,120 --> 01:31:40,159
and

2264
01:31:40,159 --> 01:31:42,480
what did we learn um we made some

2265
01:31:42,480 --> 01:31:45,600
progress uh on the hacking site again

2266
01:31:45,600 --> 01:31:48,400
uh most of us have been at numerous

2267
01:31:48,400 --> 01:31:50,000
events already

2268
01:31:50,000 --> 01:31:52,480
and uh so there's obviously a lot of

2269
01:31:52,480 --> 01:31:54,480
experience and quite fluent already with

2270
01:31:54,480 --> 01:31:55,280
uh

2271
01:31:55,280 --> 01:31:57,760
with uh various different projects and

2272
01:31:57,760 --> 01:32:00,880
uh embedded artists etc

2273
01:32:00,880 --> 01:32:01,840
um

2274
01:32:01,840 --> 01:32:04,239
we've again managed to identify some

2275
01:32:04,239 --> 01:32:06,639
open issues with the specs and i believe

2276
01:32:06,639 --> 01:32:08,960
the tutorials based on the participants

2277
01:32:08,960 --> 01:32:11,440
uh were useful again uh

2278
01:32:11,440 --> 01:32:13,679
i i enjoyed it um

2279
01:32:13,679 --> 01:32:15,679
listening to what the other people are

2280
01:32:15,679 --> 01:32:16,639
up to

2281
01:32:16,639 --> 01:32:19,040
and uh we also had good discussions not

2282
01:32:19,040 --> 01:32:21,760
only during the tutorials but also uh

2283
01:32:21,760 --> 01:32:22,560
um

2284
01:32:22,560 --> 01:32:24,719
during the week in in general which i

2285
01:32:24,719 --> 01:32:26,800
think is a big plus

2286
01:32:26,800 --> 01:32:29,199
now that we are all traveling less and

2287
01:32:29,199 --> 01:32:31,840
have fewer contacts um

2288
01:32:31,840 --> 01:32:33,679
these type of events are

2289
01:32:33,679 --> 01:32:34,800
really

2290
01:32:34,800 --> 01:32:36,480
uh enjoyful

2291
01:32:36,480 --> 01:32:39,679
um we did however notice that the online

2292
01:32:39,679 --> 01:32:40,960
fatigue

2293
01:32:40,960 --> 01:32:42,800
or hackathon fatigue settles in a little

2294
01:32:42,800 --> 01:32:45,120
bit uh

2295
01:32:45,120 --> 01:32:46,719
sort of this

2296
01:32:46,719 --> 01:32:48,880
um what we were used to like sitting

2297
01:32:48,880 --> 01:32:50,960
together in a room and having

2298
01:32:50,960 --> 01:32:53,199
full attention to the programming

2299
01:32:53,199 --> 01:32:56,800
uh isn't quite there when you have all

2300
01:32:56,800 --> 01:32:58,800
sorts of other activities going on and

2301
01:32:58,800 --> 01:33:01,199
so that makes it makes it really

2302
01:33:01,199 --> 01:33:02,800
challenging to make

2303
01:33:02,800 --> 01:33:05,199
good progress um

2304
01:33:05,199 --> 01:33:07,360
i don't know if other teams had similar

2305
01:33:07,360 --> 01:33:08,480
challenges

2306
01:33:08,480 --> 01:33:11,440
but but we definitely had um

2307
01:33:11,440 --> 01:33:13,120
and so

2308
01:33:13,120 --> 01:33:14,800
i i think we tried to make the best out

2309
01:33:14,800 --> 01:33:16,960
of it and and i'm happy that we

2310
01:33:16,960 --> 01:33:20,320
organized this i also promised um

2311
01:33:20,320 --> 01:33:23,199
all the uh participants of our hackathon

2312
01:33:23,199 --> 01:33:25,040
to send them hardware

2313
01:33:25,040 --> 01:33:27,520
thanks to our bureaucracy uh that's

2314
01:33:27,520 --> 01:33:30,320
going to be delayed and i will only send

2315
01:33:30,320 --> 01:33:32,639
them the hardware um

2316
01:33:32,639 --> 01:33:34,880
in the next few weeks

2317
01:33:34,880 --> 01:33:36,400
uh but

2318
01:33:36,400 --> 01:33:39,120
it's still uh maybe a takeaway that is

2319
01:33:39,120 --> 01:33:42,960
um besides the experience uh and and

2320
01:33:42,960 --> 01:33:45,040
the code progress uh there's something

2321
01:33:45,040 --> 01:33:48,000
to hold in your hands this one um we had

2322
01:33:48,000 --> 01:33:50,800
a bunch of different folks participating

2323
01:33:50,800 --> 01:33:51,679
um

2324
01:33:51,679 --> 01:33:53,199
two newcomers

2325
01:33:53,199 --> 01:33:56,159
who joined uh a number of people who we

2326
01:33:56,159 --> 01:33:58,239
had already worked with so there was a

2327
01:33:58,239 --> 01:34:01,120
lot of familiar faces in our

2328
01:34:01,120 --> 01:34:03,280
in our club so to speak

2329
01:34:03,280 --> 01:34:06,080
um so i'm happy that they

2330
01:34:06,080 --> 01:34:08,159
keep coming again and again uh from

2331
01:34:08,159 --> 01:34:10,239
hackathon to hackathon so

2332
01:34:10,239 --> 01:34:11,280
um

2333
01:34:11,280 --> 01:34:13,440
if there's one takeaway uh for you if

2334
01:34:13,440 --> 01:34:17,360
you care about iod security uh you might

2335
01:34:17,360 --> 01:34:19,120
want to have a look at the tutorials and

2336
01:34:19,120 --> 01:34:21,040
and the link is uh

2337
01:34:21,040 --> 01:34:23,120
on the right hand side so

2338
01:34:23,120 --> 01:34:24,239
yeah that's all

2339
01:34:24,239 --> 01:34:27,199
all from my side

2340
01:34:28,560 --> 01:34:30,000
thomas

2341
01:34:30,000 --> 01:34:31,760
yep please

2342
01:34:31,760 --> 01:34:33,760
do upload your slides to the

2343
01:34:33,760 --> 01:34:36,080
repositories so we have them there

2344
01:34:36,080 --> 01:34:39,199
okay i thought i did um sorry if i

2345
01:34:39,199 --> 01:34:41,920
who knows where i uploaded them to

2346
01:34:41,920 --> 01:34:44,880
yeah it said yeah

2347
01:34:44,880 --> 01:34:46,960
on

2348
01:34:52,719 --> 01:34:54,320
does anyone have questions or comments

2349
01:34:54,320 --> 01:34:57,480
for hummus

2350
01:35:01,440 --> 01:35:04,560
okay hearing none thanks again hannes

2351
01:35:04,560 --> 01:35:06,719
no problem

2352
01:35:06,719 --> 01:35:09,600
and so that ends the presentations are

2353
01:35:09,600 --> 01:35:11,840
there any others that we miss ben benson

2354
01:35:11,840 --> 01:35:16,960
has one he uh he uploaded and uh

2355
01:35:16,960 --> 01:35:19,760
benson i can share your slides if you uh

2356
01:35:19,760 --> 01:35:21,199
want

2357
01:35:21,199 --> 01:35:23,840
are you able to uh join us through audio

2358
01:35:23,840 --> 01:35:27,880
and speak to him

2359
01:35:38,960 --> 01:35:42,480
yeah i don't hear you yet benson

2360
01:35:53,360 --> 01:35:57,760
okay we're just gonna try this

2361
01:35:57,760 --> 01:36:00,719
oh no that didn't work okay let me try

2362
01:36:00,719 --> 01:36:04,040
something else

2363
01:36:14,639 --> 01:36:18,960
okay i'm having a hard time sharing your

2364
01:36:18,960 --> 01:36:21,119
slides here let me let me download them

2365
01:36:21,119 --> 01:36:24,480
and share them outside of

2366
01:36:24,480 --> 01:36:26,880
let's see if that works better

2367
01:36:26,880 --> 01:36:30,280
just a sec

2368
01:37:03,119 --> 01:37:06,080
okay i'll try sharing again one more

2369
01:37:06,080 --> 01:37:08,400
time

2370
01:37:17,679 --> 01:37:18,800
huh

2371
01:37:18,800 --> 01:37:21,520
i yeah it won't i get an error each time

2372
01:37:21,520 --> 01:37:24,320
i try to share

2373
01:37:24,320 --> 01:37:25,760
okay um

2374
01:37:25,760 --> 01:37:26,719
i

2375
01:37:26,719 --> 01:37:28,639
can most people see the link i guess the

2376
01:37:28,639 --> 01:37:30,480
slides online so you can advance them

2377
01:37:30,480 --> 01:37:32,400
yourselves

2378
01:37:32,400 --> 01:37:33,600
um

2379
01:37:33,600 --> 01:37:35,600
i'll paste it in the chat again and then

2380
01:37:35,600 --> 01:37:36,719
i'll

2381
01:37:36,719 --> 01:37:38,960
uh

2382
01:37:39,920 --> 01:37:42,920
start

2383
01:37:52,159 --> 01:37:54,639
you see if i can share them

2384
01:37:54,639 --> 01:37:57,360
you never know

2385
01:37:58,400 --> 01:38:01,400
so

2386
01:38:05,760 --> 01:38:08,159
ah yes

2387
01:38:08,159 --> 01:38:09,920
all right so just uh say next when

2388
01:38:09,920 --> 01:38:11,520
you're ready to go to the next one

2389
01:38:11,520 --> 01:38:13,920
dancing

2390
01:38:14,560 --> 01:38:17,360
okay thank you very much so uh this is

2391
01:38:17,360 --> 01:38:19,840
kind of the usual topic maybe one text

2392
01:38:19,840 --> 01:38:21,199
api

2393
01:38:21,199 --> 01:38:23,119
um

2394
01:38:23,119 --> 01:38:25,199
but a lot of the

2395
01:38:25,199 --> 01:38:27,600
uh communication security

2396
01:38:27,600 --> 01:38:28,840
have relies

2397
01:38:28,840 --> 01:38:32,960
on its standards

2398
01:38:32,960 --> 01:38:33,920
um

2399
01:38:33,920 --> 01:38:37,280
so move to the client

2400
01:38:41,679 --> 01:38:45,639
next slide please

2401
01:38:51,280 --> 01:38:52,480
and

2402
01:38:52,480 --> 01:38:55,760
motivation is at least in kenya

2403
01:38:55,760 --> 01:38:57,199
people want to

2404
01:38:57,199 --> 01:39:00,799
introduce taxes on digital payments

2405
01:39:01,040 --> 01:39:04,159
in particular for international payments

2406
01:39:04,159 --> 01:39:05,600
but this can be

2407
01:39:05,600 --> 01:39:07,280
time consuming

2408
01:39:07,280 --> 01:39:08,800
because it means you need to register

2409
01:39:08,800 --> 01:39:10,400
both where you're operating and

2410
01:39:10,400 --> 01:39:12,560
everywhere you want to sell so if

2411
01:39:12,560 --> 01:39:15,040
there's some kind of standard tax api um

2412
01:39:15,040 --> 01:39:16,880
this might help people

2413
01:39:16,880 --> 01:39:18,560
uh particularly if they can register in

2414
01:39:18,560 --> 01:39:20,000
one place and be able to sell in many

2415
01:39:20,000 --> 01:39:21,840
others

2416
01:39:21,840 --> 01:39:25,639
so next slide

2417
01:39:26,800 --> 01:39:28,800
uh

2418
01:39:28,800 --> 01:39:31,119
so

2419
01:39:31,199 --> 01:39:32,159
uh

2420
01:39:32,159 --> 01:39:34,480
basically looked at literature uh

2421
01:39:34,480 --> 01:39:36,639
initial design specification

2422
01:39:36,639 --> 01:39:39,360
learned a little bit about go

2423
01:39:39,360 --> 01:39:41,040
try to make a prototype just to look up

2424
01:39:41,040 --> 01:39:44,639
tax rates uh using iso codes so these

2425
01:39:44,639 --> 01:39:48,159
will allow you to determine locations

2426
01:39:49,119 --> 01:39:50,400
they don't all quite respond test

2427
01:39:50,400 --> 01:39:51,840
transition so maybe some extension of

2428
01:39:51,840 --> 01:39:55,320
that might be lit

2429
01:39:55,440 --> 01:39:58,159
next

2430
01:40:05,119 --> 01:40:08,480
and um

2431
01:40:08,480 --> 01:40:11,520
the north america and europe so not so

2432
01:40:11,520 --> 01:40:12,800
much for

2433
01:40:12,800 --> 01:40:14,960
african and asian countries

2434
01:40:14,960 --> 01:40:16,560
and so we kind of

2435
01:40:16,560 --> 01:40:17,840
want to see if we can get something that

2436
01:40:17,840 --> 01:40:19,679
will provide a similar solution most

2437
01:40:19,679 --> 01:40:21,040
other countries

2438
01:40:21,040 --> 01:40:25,119
so this uh next next slide

2439
01:40:28,880 --> 01:40:30,400
it provides you

2440
01:40:30,400 --> 01:40:32,719
an easy way to find this competition of

2441
01:40:32,719 --> 01:40:34,800
the restoration problem

2442
01:40:34,800 --> 01:40:36,960
um but it still gives you a way to get

2443
01:40:36,960 --> 01:40:38,560
localization

2444
01:40:38,560 --> 01:40:39,440
uh

2445
01:40:39,440 --> 01:40:41,600
get the tax id right registered so if

2446
01:40:41,600 --> 01:40:42,800
you're a business you can actually

2447
01:40:42,800 --> 01:40:44,080
reclaim

2448
01:40:44,080 --> 01:40:46,960
uh tax on purchases and as you say it

2449
01:40:46,960 --> 01:40:50,400
covers mostly the us and europe and

2450
01:40:50,400 --> 01:40:51,600
canada

2451
01:40:51,600 --> 01:40:54,719
okay next slide please

2452
01:40:55,840 --> 01:40:57,199
um

2453
01:40:57,199 --> 01:40:59,199
so we want to be able to get the tax

2454
01:40:59,199 --> 01:41:00,880
rates and typical things that you might

2455
01:41:00,880 --> 01:41:04,639
want it to give you is an identifier

2456
01:41:04,639 --> 01:41:07,199
a text type

2457
01:41:07,199 --> 01:41:09,040
whether it's active inactive

2458
01:41:09,040 --> 01:41:12,000
a region code

2459
01:41:12,000 --> 01:41:13,520
a percentage

2460
01:41:13,520 --> 01:41:15,119
and

2461
01:41:15,119 --> 01:41:16,880
if there's a state

2462
01:41:16,880 --> 01:41:19,920
or region uh in addition to the country

2463
01:41:19,920 --> 01:41:22,239
and uh some information about last

2464
01:41:22,239 --> 01:41:23,679
updates

2465
01:41:23,679 --> 01:41:25,199
um just so that you know what you're

2466
01:41:25,199 --> 01:41:26,639
using is current

2467
01:41:26,639 --> 01:41:29,760
so that's what's in this stripe api um

2468
01:41:29,760 --> 01:41:31,119
one could use this as a basis for

2469
01:41:31,119 --> 01:41:35,040
extension so next slide

2470
01:41:37,440 --> 01:41:38,960
so the number of other bodies that do

2471
01:41:38,960 --> 01:41:40,639
standardization

2472
01:41:40,639 --> 01:41:42,639
em vco is

2473
01:41:42,639 --> 01:41:45,440
probably the most common one

2474
01:41:45,440 --> 01:41:48,800
so they do the 3d secure thing

2475
01:41:48,800 --> 01:41:51,440
pci

2476
01:41:51,600 --> 01:41:54,159
is also commonly used

2477
01:41:54,159 --> 01:41:55,840
for verifying how data centers should

2478
01:41:55,840 --> 01:41:57,360
run

2479
01:41:57,360 --> 01:42:00,239
oecd has taxation guidelines which are

2480
01:42:00,239 --> 01:42:01,790
helpful for understanding the area

2481
01:42:01,790 --> 01:42:03,440
[Music]

2482
01:42:03,440 --> 01:42:04,639
and

2483
01:42:04,639 --> 01:42:06,400
kind of business to consumer taxes or

2484
01:42:06,400 --> 01:42:07,600
priority for

2485
01:42:07,600 --> 01:42:08,960
oecd

2486
01:42:08,960 --> 01:42:10,239
that they

2487
01:42:10,239 --> 01:42:12,080
suggested an in-person meeting five

2488
01:42:12,080 --> 01:42:13,920
years ago but not much has happened

2489
01:42:13,920 --> 01:42:15,360
since then

2490
01:42:15,360 --> 01:42:16,480
um

2491
01:42:16,480 --> 01:42:18,480
relevant rfcs

2492
01:42:18,480 --> 01:42:21,520
in particular is 5280

2493
01:42:21,520 --> 01:42:23,520
so that's used in both 3d secure which

2494
01:42:23,520 --> 01:42:25,679
is kind of commonly used

2495
01:42:25,679 --> 01:42:27,679
and also secure electronic transaction

2496
01:42:27,679 --> 01:42:29,920
which was proposed but hasn't seen much

2497
01:42:29,920 --> 01:42:31,360
adoption

2498
01:42:31,360 --> 01:42:33,199
um though it looks like it would be

2499
01:42:33,199 --> 01:42:35,760
easier to modify to include taxes in in

2500
01:42:35,760 --> 01:42:37,280
the workflow that they have for secure

2501
01:42:37,280 --> 01:42:39,119
electronic transaction

2502
01:42:39,119 --> 01:42:42,599
next slide please

2503
01:42:43,199 --> 01:42:45,360
so what next we want to try and do more

2504
01:42:45,360 --> 01:42:48,480
complete api specification um at

2505
01:42:48,480 --> 01:42:50,880
examples where we have

2506
01:42:50,880 --> 01:42:53,280
direct links to tax authority for

2507
01:42:53,280 --> 01:42:54,320
payments

2508
01:42:54,320 --> 01:42:57,679
um so that this is can be automated

2509
01:42:57,679 --> 01:42:58,960
um

2510
01:42:58,960 --> 01:43:00,400
and need to consider security and

2511
01:43:00,400 --> 01:43:02,800
privacy aspects in more detail so

2512
01:43:02,800 --> 01:43:03,920
some of the rfcs that are being

2513
01:43:03,920 --> 01:43:06,159
considered could possibly be implemented

2514
01:43:06,159 --> 01:43:07,760
in the standard

2515
01:43:07,760 --> 01:43:09,280
um

2516
01:43:09,280 --> 01:43:10,480
that would allow this to operate

2517
01:43:10,480 --> 01:43:12,800
efficiently and then try implementations

2518
01:43:12,800 --> 01:43:15,119
in other languages just to see that it's

2519
01:43:15,119 --> 01:43:17,199
easy to generate this

2520
01:43:17,199 --> 01:43:18,239
um

2521
01:43:18,239 --> 01:43:20,799
next slide

2522
01:43:21,679 --> 01:43:22,840
so

2523
01:43:22,840 --> 01:43:24,560
thanks

2524
01:43:24,560 --> 01:43:26,159
team was composed of

2525
01:43:26,159 --> 01:43:28,960
myself and moses leduco and got a lot of

2526
01:43:28,960 --> 01:43:31,280
feedback from ali hussein

2527
01:43:31,280 --> 01:43:35,239
and thank you for your attention

2528
01:43:38,080 --> 01:43:40,560
thanks jensen anybody you have questions

2529
01:43:40,560 --> 01:43:43,520
or comments for benson

2530
01:43:49,440 --> 01:43:50,400
okay

2531
01:43:50,400 --> 01:43:52,560
um thanks again

2532
01:43:52,560 --> 01:43:54,159
i'm glad we were able to get your slides

2533
01:43:54,159 --> 01:43:55,840
up

2534
01:43:55,840 --> 01:43:58,320
thank you

2535
01:43:58,400 --> 01:44:00,880
uh anybody else is there any other

2536
01:44:00,880 --> 01:44:03,199
slides that uh any other presentations

2537
01:44:03,199 --> 01:44:04,480
that someone would like to make that we

2538
01:44:04,480 --> 01:44:07,839
haven't done yet

2539
01:44:08,800 --> 01:44:09,840
okay

2540
01:44:09,840 --> 01:44:12,560
back to charles

2541
01:44:18,159 --> 01:44:19,199
well

2542
01:44:19,199 --> 01:44:20,960
thanks everyone for all of those great

2543
01:44:20,960 --> 01:44:24,480
presentations and uh

2544
01:44:24,480 --> 01:44:27,040
we will just go ahead and uh briefly

2545
01:44:27,040 --> 01:44:29,679
wrap up then uh in addition to

2546
01:44:29,679 --> 01:44:31,280
all the great work that all of you did

2547
01:44:31,280 --> 01:44:34,159
it's uh i want to give a big thanks to

2548
01:44:34,159 --> 01:44:37,600
cnnec for sponsoring this hackathon

2549
01:44:37,600 --> 01:44:40,239
um really appreciate the running code

2550
01:44:40,239 --> 01:44:42,320
sponsors that we've had especially

2551
01:44:42,320 --> 01:44:43,920
through these

2552
01:44:43,920 --> 01:44:45,520
um

2553
01:44:45,520 --> 01:44:47,280
you know when we've had to do it online

2554
01:44:47,280 --> 01:44:48,480
i think

2555
01:44:48,480 --> 01:44:49,840
it's a

2556
01:44:49,840 --> 01:44:51,920
it's it's great that we have the

2557
01:44:51,920 --> 01:44:54,880
sponsors there and uh and i hope that we

2558
01:44:54,880 --> 01:44:57,280
continue to have a good flow of sponsor

2559
01:44:57,280 --> 01:44:58,960
so if this is something that interests

2560
01:44:58,960 --> 01:45:00,159
you it's called the running code

2561
01:45:00,159 --> 01:45:01,360
sponsorship

2562
01:45:01,360 --> 01:45:03,600
there's information about it

2563
01:45:03,600 --> 01:45:06,159
on the wiki uh sorry not on the wiki but

2564
01:45:06,159 --> 01:45:08,000
on the ietf

2565
01:45:08,000 --> 01:45:09,840
uh web pages if you have a hard time

2566
01:45:09,840 --> 01:45:11,520
finding it i should have included a link

2567
01:45:11,520 --> 01:45:12,639
here

2568
01:45:12,639 --> 01:45:14,320
but i didn't but i you know i can get

2569
01:45:14,320 --> 01:45:16,480
that information to you but but

2570
01:45:16,480 --> 01:45:19,040
definitely big thanks to c and nick

2571
01:45:19,040 --> 01:45:20,960
and uh

2572
01:45:20,960 --> 01:45:25,119
so the next uh ietf meeting is uh the

2573
01:45:25,119 --> 01:45:26,400
dates are set

2574
01:45:26,400 --> 01:45:28,239
uh we don't know yet whether it's going

2575
01:45:28,239 --> 01:45:30,560
to be in person or virtual

2576
01:45:30,560 --> 01:45:32,000
if it is

2577
01:45:32,000 --> 01:45:33,440
virtual we'll

2578
01:45:33,440 --> 01:45:35,199
run it the same format as we did this

2579
01:45:35,199 --> 01:45:36,239
one

2580
01:45:36,239 --> 01:45:38,480
for the full week before the before

2581
01:45:38,480 --> 01:45:40,400
ietf113

2582
01:45:40,400 --> 01:45:42,719
if we do manage to meet in person we

2583
01:45:42,719 --> 01:45:44,800
will go back to our

2584
01:45:44,800 --> 01:45:46,320
format of having it on the weekend

2585
01:45:46,320 --> 01:45:47,280
before

2586
01:45:47,280 --> 01:45:49,360
so stay tuned for more information about

2587
01:45:49,360 --> 01:45:52,080
that we'll see what ends up happening

2588
01:45:52,080 --> 01:45:53,199
and uh

2589
01:45:53,199 --> 01:45:54,880
one way or another we will have another

2590
01:45:54,880 --> 01:45:58,000
hack thumb

2591
01:45:58,000 --> 01:46:00,880
and uh you have had the face-to-face

2592
01:46:00,880 --> 01:46:03,280
hackathons we've had plenty of remote

2593
01:46:03,280 --> 01:46:04,960
participation in them so that will

2594
01:46:04,960 --> 01:46:07,280
continue

2595
01:46:08,560 --> 01:46:10,800
yeah definitely and when you know some

2596
01:46:10,800 --> 01:46:12,639
of these uh great uh you know

2597
01:46:12,639 --> 01:46:15,040
improvements in me techo and some of the

2598
01:46:15,040 --> 01:46:16,800
other tooling um are just going to help

2599
01:46:16,800 --> 01:46:18,719
us out with have even better remote

2600
01:46:18,719 --> 01:46:20,239
participation

2601
01:46:20,239 --> 01:46:21,280
um

2602
01:46:21,280 --> 01:46:22,639
you know better mechanisms for remote

2603
01:46:22,639 --> 01:46:25,360
participation

2604
01:46:25,440 --> 01:46:26,480
so

2605
01:46:26,480 --> 01:46:28,400
uh yeah uh

2606
01:46:28,400 --> 01:46:30,719
oliver

2607
01:46:30,800 --> 01:46:33,679
yeah hi i have a question so

2608
01:46:33,679 --> 01:46:37,040
in case next the next hackathon is on

2609
01:46:37,040 --> 01:46:38,400
site

2610
01:46:38,400 --> 01:46:40,560
do you also plan to have

2611
01:46:40,560 --> 01:46:43,280
a parallel virtual one

2612
01:46:43,280 --> 01:46:45,360
another

2613
01:46:45,360 --> 01:46:48,719
uh but you can join we uh as barry was

2614
01:46:48,719 --> 01:46:51,119
mentioning we typically do have a number

2615
01:46:51,119 --> 01:46:52,400
of people who

2616
01:46:52,400 --> 01:46:54,400
participate remotely

2617
01:46:54,400 --> 01:46:56,639
and uh just by

2618
01:46:56,639 --> 01:46:58,639
either and sometimes bringing their own

2619
01:46:58,639 --> 01:47:00,320
projects as as you did for this

2620
01:47:00,320 --> 01:47:01,440
hackathon

2621
01:47:01,440 --> 01:47:03,119
so sometimes the champions and the

2622
01:47:03,119 --> 01:47:05,440
project teams actually remote

2623
01:47:05,440 --> 01:47:06,719
um

2624
01:47:06,719 --> 01:47:08,480
sometimes it's a mix of people who are

2625
01:47:08,480 --> 01:47:11,199
in the room and some are remote

2626
01:47:11,199 --> 01:47:12,639
so um

2627
01:47:12,639 --> 01:47:14,719
yeah we uh you know

2628
01:47:14,719 --> 01:47:17,840
yeah we run it as a hybrid one i guess

2629
01:47:17,840 --> 01:47:19,199
yeah because

2630
01:47:19,199 --> 01:47:22,400
one thing for example we used very much

2631
01:47:22,400 --> 01:47:26,320
the gather tool to have our meetings

2632
01:47:26,320 --> 01:47:28,719
uh within gather even though we could

2633
01:47:28,719 --> 01:47:30,159
have used something else but we thought

2634
01:47:30,159 --> 01:47:31,760
okay in case other people might be

2635
01:47:31,760 --> 01:47:33,840
interested in joining in

2636
01:47:33,840 --> 01:47:36,080
uh that would give them the opportunity

2637
01:47:36,080 --> 01:47:39,199
to just pass by so that was my

2638
01:47:39,199 --> 01:47:41,360
uh maybe the background for my question

2639
01:47:41,360 --> 01:47:43,760
if um

2640
01:47:43,760 --> 01:47:46,719
if a hybrid hackathon is

2641
01:47:46,719 --> 01:47:47,920
planned

2642
01:47:47,920 --> 01:47:50,480
would then the tools would gather still

2643
01:47:50,480 --> 01:47:53,040
be available or

2644
01:47:53,040 --> 01:47:55,040
uh would it not

2645
01:47:55,040 --> 01:47:57,360
yeah i think we're going to be using

2646
01:47:57,360 --> 01:47:58,400
gather

2647
01:47:58,400 --> 01:48:00,719
for uh hybrid meetings for the

2648
01:48:00,719 --> 01:48:03,360
foreseeable future so i i would expect

2649
01:48:03,360 --> 01:48:05,839
that

2650
01:48:06,480 --> 01:48:08,239
that that you'll that gather will be

2651
01:48:08,239 --> 01:48:11,040
available for 113 whether whether we're

2652
01:48:11,040 --> 01:48:13,600
in person or not

2653
01:48:13,600 --> 01:48:15,840
thank

2654
01:48:16,840 --> 01:48:20,000
you yeah great great question though

2655
01:48:20,000 --> 01:48:22,639
and uh

2656
01:48:24,159 --> 01:48:25,360
let's see

2657
01:48:25,360 --> 01:48:27,679
and i think that is

2658
01:48:27,679 --> 01:48:30,239
is it in terms of the slides uh that's

2659
01:48:30,239 --> 01:48:32,800
it in terms of the hackathon uh huge

2660
01:48:32,800 --> 01:48:35,600
thanks to to barry thanks for running us

2661
01:48:35,600 --> 01:48:38,320
through the presentations um for me i'm

2662
01:48:38,320 --> 01:48:40,080
not on my usual computer so i think

2663
01:48:40,080 --> 01:48:42,159
that's why i ran into problems when i

2664
01:48:42,159 --> 01:48:43,280
tried to

2665
01:48:43,280 --> 01:48:46,239
share those slides i had restart firefox

2666
01:48:46,239 --> 01:48:48,159
with the right permission so

2667
01:48:48,159 --> 01:48:50,159
but you know i appreciate all your help

2668
01:48:50,159 --> 01:48:51,920
and you know huge thanks to the

2669
01:48:51,920 --> 01:48:53,760
champions for leading your projects and

2670
01:48:53,760 --> 01:48:55,600
really to all of you for for

2671
01:48:55,600 --> 01:48:57,360
participating and for putting together

2672
01:48:57,360 --> 01:49:00,159
your presentations and sharing them um

2673
01:49:00,159 --> 01:49:04,080
really uh great work to everyone

2674
01:49:05,199 --> 01:49:07,560
and with that i think people wrap you up

2675
01:49:07,560 --> 01:49:09,199
[Music]

2676
01:49:09,199 --> 01:49:10,639
thanks to charles for doing a huge

2677
01:49:10,639 --> 01:49:13,440
amount of work in setting this up

2678
01:49:13,440 --> 01:49:14,960
charles spends a lot of time getting the

2679
01:49:14,960 --> 01:49:16,239
hackathon

2680
01:49:16,239 --> 01:49:18,559
running

2681
01:49:19,280 --> 01:49:21,199
well it's uh it's

2682
01:49:21,199 --> 01:49:23,840
thanks for that it's great uh

2683
01:49:23,840 --> 01:49:25,679
uh incentive though when i see all the

2684
01:49:25,679 --> 01:49:28,159
the wonderful work that gets done so uh

2685
01:49:28,159 --> 01:49:30,000
it's easy to motivate myself to put

2686
01:49:30,000 --> 01:49:32,000
these things together and yeah the the

2687
01:49:32,000 --> 01:49:33,760
secretary and a lot of other people do a

2688
01:49:33,760 --> 01:49:35,599
lot of hard work to make this happen too

2689
01:49:35,599 --> 01:49:36,320
and

2690
01:49:36,320 --> 01:49:37,360
and uh

2691
01:49:37,360 --> 01:49:40,159
and focus on me techo and everything so

2692
01:49:40,159 --> 01:49:42,159
i'm glad it worked out as well as it did

2693
01:49:42,159 --> 01:49:44,480
and uh we'll have a successful hackathon

2694
01:49:44,480 --> 01:49:47,360
next time too either in person or uh or

2695
01:49:47,360 --> 01:49:48,800
online so

2696
01:49:48,800 --> 01:49:50,800
uh thanks to everyone i'll let you go

2697
01:49:50,800 --> 01:49:52,880
and uh have a great weekend and great

2698
01:49:52,880 --> 01:49:57,480
week of ietf meetings next week

2699
01:49:57,760 --> 01:50:00,760
bye

