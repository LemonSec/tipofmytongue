1
00:00:06,319 --> 00:00:07,839
hello everyone

2
00:00:07,839 --> 00:00:10,400
good morning

3
00:00:12,240 --> 00:00:15,480
good evening

4
00:00:21,680 --> 00:00:25,000
hello everyone

5
00:00:33,410 --> 00:00:36,500
[Music]

6
00:00:38,719 --> 00:00:42,160
so welcome everyone to the interior

7
00:00:42,160 --> 00:00:45,800
working group at ietf112

8
00:00:50,320 --> 00:00:52,160
so let's start with

9
00:00:52,160 --> 00:00:54,719
the virtual etiquette and

10
00:00:54,719 --> 00:00:56,719
knitting tips so

11
00:00:56,719 --> 00:00:58,399
as a reminder please join the queue

12
00:00:58,399 --> 00:01:01,840
before participating

13
00:01:02,800 --> 00:01:04,400
need your microphone unless you are

14
00:01:04,400 --> 00:01:07,119
speaking and preferably turn off your

15
00:01:07,119 --> 00:01:09,520
video

16
00:01:10,840 --> 00:01:15,600
so we are sharing here wasim and myself

17
00:01:15,600 --> 00:01:18,240
hi everyone

18
00:01:18,479 --> 00:01:21,040
uh let's start with the note well uh

19
00:01:21,040 --> 00:01:23,600
so please remember that by participating

20
00:01:23,600 --> 00:01:25,200
to the ietf meeting you agree to follow

21
00:01:25,200 --> 00:01:27,920
the ietf process and policies

22
00:01:27,920 --> 00:01:29,600
that your contribution is covered by

23
00:01:29,600 --> 00:01:32,079
patent applications then you have to

24
00:01:32,079 --> 00:01:32,960
please

25
00:01:32,960 --> 00:01:36,400
disclose or notify the chairs about it

26
00:01:36,400 --> 00:01:38,799
your participation

27
00:01:38,799 --> 00:01:39,680
it's

28
00:01:39,680 --> 00:01:41,520
written audio and video photographic

29
00:01:41,520 --> 00:01:44,240
records will be recorded

30
00:01:44,240 --> 00:01:47,360
and you agree to respectfully uh

31
00:01:47,360 --> 00:01:50,000
treat other participants

32
00:01:50,000 --> 00:01:52,159
so uh note on that

33
00:01:52,159 --> 00:01:55,280
a brief reminder of key points from

34
00:01:55,280 --> 00:01:57,200
rfc 71

35
00:01:57,200 --> 00:02:00,640
54 from guidelines of conduct

36
00:02:00,640 --> 00:02:02,159
please uh

37
00:02:02,159 --> 00:02:03,840
extend respect and courtesy to

38
00:02:03,840 --> 00:02:05,710
colleagues at all times

39
00:02:05,710 --> 00:02:07,040
[Music]

40
00:02:07,040 --> 00:02:09,520
you'll remember that the discussions are

41
00:02:09,520 --> 00:02:12,800
impersonal and for technical reasons

42
00:02:12,800 --> 00:02:15,280
our goal here is to devise solutions for

43
00:02:15,280 --> 00:02:17,120
the global internet

44
00:02:17,120 --> 00:02:18,480
and that's the main goal of the

45
00:02:18,480 --> 00:02:20,319
discussion uh

46
00:02:20,319 --> 00:02:21,360
not to

47
00:02:21,360 --> 00:02:24,720
attack or criticize personal

48
00:02:24,720 --> 00:02:27,360
uh contributions but to advance the the

49
00:02:27,360 --> 00:02:30,720
technology together

50
00:02:30,720 --> 00:02:32,400
and please make sure that you are

51
00:02:32,400 --> 00:02:33,680
prepared to the

52
00:02:33,680 --> 00:02:36,800
to the discussion by by reading the

53
00:02:36,800 --> 00:02:38,640
the mailing list and the slides

54
00:02:38,640 --> 00:02:40,080
beforehand

55
00:02:40,080 --> 00:02:42,640
we are short usually in time so we try

56
00:02:42,640 --> 00:02:44,400
to be brief with the discussions and to

57
00:02:44,400 --> 00:02:44,840
the point

58
00:02:44,840 --> 00:02:46,560
[Music]

59
00:02:46,560 --> 00:02:47,840
um

60
00:02:47,840 --> 00:02:50,239
again uh remember that minutes are taken

61
00:02:50,239 --> 00:02:52,319
the meeting is being recorded

62
00:02:52,319 --> 00:02:54,319
the person says locked

63
00:02:54,319 --> 00:02:55,280
when you

64
00:02:55,280 --> 00:02:57,920
log into the data sheet and

65
00:02:57,920 --> 00:02:59,599
for this price please contribute online

66
00:02:59,599 --> 00:03:02,879
minutes to the kodi md

67
00:03:02,879 --> 00:03:04,879
link

68
00:03:04,879 --> 00:03:06,319
for that

69
00:03:06,319 --> 00:03:08,000
do we have a

70
00:03:08,000 --> 00:03:10,000
note taker that can help us

71
00:03:10,000 --> 00:03:13,400
advance the meeting

72
00:03:20,560 --> 00:03:22,959
uh i can offer the same service

73
00:03:22,959 --> 00:03:25,599
like last time so i don't type

74
00:03:25,599 --> 00:03:29,519
quick so i will not take notes

75
00:03:29,519 --> 00:03:32,640
live right now but i can prepare minutes

76
00:03:32,640 --> 00:03:34,959
afterwards with the recordings if for

77
00:03:34,959 --> 00:03:37,840
you guys it's okay

78
00:03:37,840 --> 00:03:39,440
lovely thank you very much

79
00:03:39,440 --> 00:03:41,280
thanks for that uh luigi

80
00:03:41,280 --> 00:03:43,599
and everyone else uh please feel free to

81
00:03:43,599 --> 00:03:46,560
contribute also to to the notes and if

82
00:03:46,560 --> 00:03:50,080
you can help luigi with that

83
00:03:52,080 --> 00:03:53,280
all right

84
00:03:53,280 --> 00:03:54,720
so we have a

85
00:03:54,720 --> 00:03:56,400
quite packed agenda

86
00:03:56,400 --> 00:03:58,560
uh we're going to start with a quick

87
00:03:58,560 --> 00:04:02,239
update on the working group items

88
00:04:02,239 --> 00:04:03,920
moving to set

89
00:04:03,920 --> 00:04:06,159
to presentations on the

90
00:04:06,159 --> 00:04:08,959
lowest address and formal reserved

91
00:04:08,959 --> 00:04:11,200
address space

92
00:04:11,200 --> 00:04:13,840
then the challenging

93
00:04:13,840 --> 00:04:16,800
in gap analysis from gia

94
00:04:16,800 --> 00:04:19,040
[Music]

95
00:04:19,040 --> 00:04:20,798
we have then the

96
00:04:20,798 --> 00:04:22,560
how you song

97
00:04:22,560 --> 00:04:24,080
with the short hierarchical ip

98
00:04:24,080 --> 00:04:25,840
addressing

99
00:04:25,840 --> 00:04:30,320
the source address validation by dan lee

100
00:04:30,320 --> 00:04:33,360
then the cardigan minimalist multicast

101
00:04:33,360 --> 00:04:34,960
with beer

102
00:04:34,960 --> 00:04:36,960
from turles

103
00:04:36,960 --> 00:04:40,000
native minimal protocols

104
00:04:40,000 --> 00:04:43,040
from shenyang and an update about thai

105
00:04:43,040 --> 00:04:44,639
tripoli 802

106
00:04:44,639 --> 00:04:49,440
1 cq from roger marks

107
00:04:49,440 --> 00:04:51,680
are there any

108
00:04:51,680 --> 00:04:55,880
comments or changes to the agenda

109
00:05:00,240 --> 00:05:02,639
all right

110
00:05:03,199 --> 00:05:05,680
so just a quick update uh

111
00:05:05,680 --> 00:05:08,160
for the working group status

112
00:05:08,160 --> 00:05:11,199
as you probably saw on the mailing list

113
00:05:11,199 --> 00:05:14,639
the gui generic udp encapsulation draft

114
00:05:14,639 --> 00:05:17,840
was declared dead in october

115
00:05:17,840 --> 00:05:19,280
if you have any

116
00:05:19,280 --> 00:05:21,440
any questions about the process you can

117
00:05:21,440 --> 00:05:26,759
see section 426 of rc 6174

118
00:05:28,560 --> 00:05:30,880
okay

119
00:05:31,120 --> 00:05:34,400
so that's uh pretty much it

120
00:05:34,400 --> 00:05:37,199
so maybe we can move to the to the next

121
00:05:37,199 --> 00:05:39,840
presenter

122
00:05:41,680 --> 00:05:42,560
set

123
00:05:42,560 --> 00:05:45,520
are you online

124
00:05:46,240 --> 00:05:48,479
i'm here good morning

125
00:05:48,479 --> 00:05:50,320
good morning so

126
00:05:50,320 --> 00:05:51,440
nice to meet

127
00:05:51,440 --> 00:05:52,560
we meet you

128
00:05:52,560 --> 00:05:54,160
and

129
00:05:54,160 --> 00:05:56,080
please feel free to share your

130
00:05:56,080 --> 00:05:58,639
your screen your slide

131
00:05:58,639 --> 00:06:01,680
um i sent the slides by email

132
00:06:01,680 --> 00:06:06,400
so if i click ask to share slides

133
00:06:06,400 --> 00:06:07,520
um

134
00:06:07,520 --> 00:06:10,639
is it available in the

135
00:06:11,840 --> 00:06:14,160
um it says no slides available should i

136
00:06:14,160 --> 00:06:17,759
perhaps do the screen share instead

137
00:06:19,360 --> 00:06:22,479
you can you can request again

138
00:06:22,479 --> 00:06:22,930
and then

139
00:06:22,930 --> 00:06:24,080
[Music]

140
00:06:24,080 --> 00:06:25,199
yes

141
00:06:25,199 --> 00:06:26,560
give us a second

142
00:06:26,560 --> 00:06:28,160
we will be there

143
00:06:28,160 --> 00:06:29,600
i see

144
00:06:29,600 --> 00:06:32,759
thank you

145
00:06:47,940 --> 00:06:50,720
[Music]

146
00:06:50,720 --> 00:06:52,560
i will say i was looking forward very

147
00:06:52,560 --> 00:06:54,479
much to meeting everyone in person in

148
00:06:54,479 --> 00:06:55,520
madrid

149
00:06:55,520 --> 00:06:57,039
and i'm sorry that that wasn't able to

150
00:06:57,039 --> 00:06:58,080
happen

151
00:06:58,080 --> 00:07:00,960
but i see that itf has become

152
00:07:00,960 --> 00:07:03,120
extraordinarily experienced with virtual

153
00:07:03,120 --> 00:07:05,440
mutex

154
00:07:06,000 --> 00:07:07,520
yes

155
00:07:07,520 --> 00:07:09,360
we're having an issue with the

156
00:07:09,360 --> 00:07:11,520
with the screen uh is it possible to you

157
00:07:11,520 --> 00:07:12,960
to share

158
00:07:12,960 --> 00:07:16,758
your your own screen

159
00:07:17,120 --> 00:07:19,360
yes

160
00:07:20,639 --> 00:07:23,520
and i will

161
00:07:25,280 --> 00:07:26,880
can you see this

162
00:07:26,880 --> 00:07:28,720
yes no we can

163
00:07:28,720 --> 00:07:29,520
okay

164
00:07:29,520 --> 00:07:32,319
well i'll present from here

165
00:07:32,319 --> 00:07:33,759
okay thank you

166
00:07:33,759 --> 00:07:35,680
thank you very much and good morning to

167
00:07:35,680 --> 00:07:37,680
everyone and uh good other times of the

168
00:07:37,680 --> 00:07:39,120
day to everyone

169
00:07:39,120 --> 00:07:40,560
depending on time zone and part of the

170
00:07:40,560 --> 00:07:41,599
world

171
00:07:41,599 --> 00:07:44,000
i'm seth schoen i'm here presenting on

172
00:07:44,000 --> 00:07:47,039
the ipv4 unicast extensions project

173
00:07:47,039 --> 00:07:49,120
and we have submitted two drafts which

174
00:07:49,120 --> 00:07:51,120
are up for discussion today

175
00:07:51,120 --> 00:07:53,759
as well we've uploaded two drafts in the

176
00:07:53,759 --> 00:07:56,080
same series

177
00:07:56,080 --> 00:07:58,479
after the deadline for this

178
00:07:58,479 --> 00:08:00,639
interior meeting and so i'll just

179
00:08:00,639 --> 00:08:02,720
preview the other two very quickly but

180
00:08:02,720 --> 00:08:03,759
the

181
00:08:03,759 --> 00:08:08,080
um first two on lowest address and 240

182
00:08:08,080 --> 00:08:12,319
are up for discussion in this meeting

183
00:08:12,319 --> 00:08:15,520
so our project is interested in

184
00:08:15,520 --> 00:08:18,960
making available large amounts of ipv4

185
00:08:18,960 --> 00:08:20,240
address space

186
00:08:20,240 --> 00:08:22,080
that no one is using

187
00:08:22,080 --> 00:08:23,599
that has been

188
00:08:23,599 --> 00:08:25,520
historically reserved

189
00:08:25,520 --> 00:08:28,160
or dedicated to special uses and has

190
00:08:28,160 --> 00:08:30,160
never been allocated

191
00:08:30,160 --> 00:08:32,000
we believe that this can be accomplished

192
00:08:32,000 --> 00:08:35,760
with very small very gradual changes

193
00:08:35,760 --> 00:08:38,719
in many cases just one line or so of

194
00:08:38,719 --> 00:08:41,279
code per

195
00:08:41,279 --> 00:08:43,760
address category per operating system

196
00:08:43,760 --> 00:08:45,680
providing hundreds of millions of new

197
00:08:45,680 --> 00:08:47,680
unicast addresses

198
00:08:47,680 --> 00:08:49,519
with billions of dollars of economic

199
00:08:49,519 --> 00:08:53,800
value to internet users

200
00:08:54,720 --> 00:08:57,120
and i'd like to note that the largest

201
00:08:57,120 --> 00:08:58,720
change that we're going to talk about

202
00:08:58,720 --> 00:08:59,600
here

203
00:08:59,600 --> 00:09:01,360
240

204
00:09:01,360 --> 00:09:03,600
has been default behavior that is the

205
00:09:03,600 --> 00:09:05,680
behavior that we specify has been the

206
00:09:05,680 --> 00:09:06,839
default

207
00:09:06,839 --> 00:09:10,160
in many widely used operating systems

208
00:09:10,160 --> 00:09:11,040
since

209
00:09:11,040 --> 00:09:13,600
a similar change was proposed at ietf in

210
00:09:13,600 --> 00:09:15,360
2008

211
00:09:15,360 --> 00:09:18,000
it's actually quite possible

212
00:09:18,000 --> 00:09:19,839
that many or most of you are using

213
00:09:19,839 --> 00:09:22,320
devices to view this presentation and to

214
00:09:22,320 --> 00:09:23,839
interact with this

215
00:09:23,839 --> 00:09:24,959
meeting

216
00:09:24,959 --> 00:09:26,720
that already implement the behavior that

217
00:09:26,720 --> 00:09:28,880
we specify

218
00:09:28,880 --> 00:09:30,800
in addition the other changes that we'll

219
00:09:30,800 --> 00:09:31,839
talk about

220
00:09:31,839 --> 00:09:34,160
are currently default behavior in linux

221
00:09:34,160 --> 00:09:37,920
and freebsd systems so we have

222
00:09:37,920 --> 00:09:40,000
fairly widespread implementation of the

223
00:09:40,000 --> 00:09:43,360
things that we're specifying here

224
00:09:44,399 --> 00:09:47,200
so as many of you will know

225
00:09:47,200 --> 00:09:49,200
when the internet was first devised when

226
00:09:49,200 --> 00:09:51,519
ipv4 was first specified

227
00:09:51,519 --> 00:09:54,160
it was impossible for people to foresee

228
00:09:54,160 --> 00:09:56,560
what a success the internet would become

229
00:09:56,560 --> 00:09:58,560
and how it would grow

230
00:09:58,560 --> 00:10:00,720
and for various reasons

231
00:10:00,720 --> 00:10:04,560
large numbers of addresses in fact

232
00:10:04,560 --> 00:10:05,839
more than

233
00:10:05,839 --> 00:10:09,600
eight percent of the ipv4 address space

234
00:10:09,600 --> 00:10:11,440
was reserved

235
00:10:11,440 --> 00:10:14,000
for various purposes and uses between

236
00:10:14,000 --> 00:10:17,720
1981 and 1986.

237
00:10:18,160 --> 00:10:20,720
subsequent experience has shown

238
00:10:20,720 --> 00:10:25,440
that many of these address reservations

239
00:10:25,440 --> 00:10:26,240
are

240
00:10:26,240 --> 00:10:28,720
not being used for anything

241
00:10:28,720 --> 00:10:30,959
and are no longer necessary

242
00:10:30,959 --> 00:10:34,079
operationally or technically

243
00:10:34,079 --> 00:10:36,480
and the associated addresses

244
00:10:36,480 --> 00:10:38,800
are still unused despite the enormous

245
00:10:38,800 --> 00:10:39,600
and

246
00:10:39,600 --> 00:10:41,440
widely discussed

247
00:10:41,440 --> 00:10:43,839
shortage of unicast addresses

248
00:10:43,839 --> 00:10:45,920
so these addresses have tremendous value

249
00:10:45,920 --> 00:10:47,519
and there has been discussion for many

250
00:10:47,519 --> 00:10:49,440
years and people may recall

251
00:10:49,440 --> 00:10:51,839
prior discussions at ietf

252
00:10:51,839 --> 00:10:54,000
about the prospect of opening up these

253
00:10:54,000 --> 00:10:56,079
addresses and we've been looking at that

254
00:10:56,079 --> 00:10:57,440
researching that

255
00:10:57,440 --> 00:10:58,959
doing tests writing code writing

256
00:10:58,959 --> 00:11:01,839
specifications

257
00:11:01,920 --> 00:11:02,800
and

258
00:11:02,800 --> 00:11:05,040
we've found that it appears quite

259
00:11:05,040 --> 00:11:07,519
plausible and quite practical

260
00:11:07,519 --> 00:11:10,880
to bring addresses into use

261
00:11:10,880 --> 00:11:12,560
so the first draft that i want to talk

262
00:11:12,560 --> 00:11:15,279
about is our unicast lowest address

263
00:11:15,279 --> 00:11:16,959
draft

264
00:11:16,959 --> 00:11:18,800
and so

265
00:11:18,800 --> 00:11:20,959
in 1983

266
00:11:20,959 --> 00:11:24,000
a famous and important historical tcpip

267
00:11:24,000 --> 00:11:28,160
implementation 4.2 bsd at berkeley

268
00:11:28,160 --> 00:11:29,600
implemented

269
00:11:29,600 --> 00:11:32,160
subnet broadcasting at the lowest

270
00:11:32,160 --> 00:11:33,920
address of each subnet

271
00:11:33,920 --> 00:11:35,360
before there was

272
00:11:35,360 --> 00:11:37,440
an internet standard

273
00:11:37,440 --> 00:11:40,640
as to which address should be the the

274
00:11:40,640 --> 00:11:43,200
segment broadcast address

275
00:11:43,200 --> 00:11:44,480
now

276
00:11:44,480 --> 00:11:46,320
subsequently

277
00:11:46,320 --> 00:11:49,120
the ietf community created a standard

278
00:11:49,120 --> 00:11:50,880
specifying broadcast at the highest

279
00:11:50,880 --> 00:11:53,040
address of each subnet

280
00:11:53,040 --> 00:11:55,279
and everyone has agreed in all

281
00:11:55,279 --> 00:11:56,720
documentation

282
00:11:56,720 --> 00:11:58,480
for a long time

283
00:11:58,480 --> 00:12:00,000
that the highest address is the

284
00:12:00,000 --> 00:12:01,440
consensus broadcast address and the

285
00:12:01,440 --> 00:12:03,279
lowest address

286
00:12:03,279 --> 00:12:05,360
is only meant for backwards

287
00:12:05,360 --> 00:12:06,959
compatibility

288
00:12:06,959 --> 00:12:08,839
with the 4.2 bsd

289
00:12:08,839 --> 00:12:11,279
behavior bsd itself

290
00:12:11,279 --> 00:12:12,800
changed over to using the highest

291
00:12:12,800 --> 00:12:15,680
address for broadcast in 4.3 bsd just

292
00:12:15,680 --> 00:12:18,720
three years later in 1986

293
00:12:18,720 --> 00:12:20,560
and so

294
00:12:20,560 --> 00:12:22,720
various rfcs say we want to maintain

295
00:12:22,720 --> 00:12:24,639
backwards compatibility with the

296
00:12:24,639 --> 00:12:26,880
historic behavior

297
00:12:26,880 --> 00:12:28,000
this is maintaining backwards

298
00:12:28,000 --> 00:12:30,320
compatibility with a particular system

299
00:12:30,320 --> 00:12:32,720
which has not been used for decades

300
00:12:32,720 --> 00:12:34,959
therefore our draft reclassifies this

301
00:12:34,959 --> 00:12:36,720
address for ordinary unicast use so that

302
00:12:36,720 --> 00:12:39,760
it can be used to number hosts

303
00:12:39,760 --> 00:12:43,120
now this is default behavior as of the

304
00:12:43,120 --> 00:12:46,560
present date in linux and freebsd

305
00:12:46,560 --> 00:12:48,399
and this change

306
00:12:48,399 --> 00:12:49,519
has

307
00:12:49,519 --> 00:12:51,680
large benefits in terms of assignable

308
00:12:51,680 --> 00:12:52,720
addressing

309
00:12:52,720 --> 00:12:54,399
they're very widely distributed because

310
00:12:54,399 --> 00:12:57,360
they're precisely one assignable address

311
00:12:57,360 --> 00:13:01,279
per subnet across the entire internet

312
00:13:01,279 --> 00:13:03,760
and under long-standing

313
00:13:03,760 --> 00:13:05,519
internet standards

314
00:13:05,519 --> 00:13:07,440
distant hosts by which i mean hosts that

315
00:13:07,440 --> 00:13:09,200
are not on the same

316
00:13:09,200 --> 00:13:10,639
subnet

317
00:13:10,639 --> 00:13:11,440
with

318
00:13:11,440 --> 00:13:14,079
the newly available

319
00:13:14,079 --> 00:13:17,279
address or with a host numbered with it

320
00:13:17,279 --> 00:13:19,440
require no software changes because

321
00:13:19,440 --> 00:13:21,120
distant hosts are not permitted to

322
00:13:21,120 --> 00:13:24,160
assume where the subnet boundary occurs

323
00:13:24,160 --> 00:13:26,160
therefore the distant hosts are already

324
00:13:26,160 --> 00:13:28,560
expected to interoperate with this

325
00:13:28,560 --> 00:13:31,279
and indeed they generally do

326
00:13:31,279 --> 00:13:33,279
all of this is to say that you get the

327
00:13:33,279 --> 00:13:35,279
benefit of the one extra address for

328
00:13:35,279 --> 00:13:37,920
subnet just by making changes on your

329
00:13:37,920 --> 00:13:40,479
own network

330
00:13:42,800 --> 00:13:45,519
our second draft for discussion today is

331
00:13:45,519 --> 00:13:47,760
our unicast 240 draft

332
00:13:47,760 --> 00:13:50,880
this refers to the former class e back

333
00:13:50,880 --> 00:13:53,920
when we spoke of classful addressing or

334
00:13:53,920 --> 00:13:56,639
experimental range 240 slash 4

335
00:13:56,639 --> 00:14:00,800
from 240 up to 255 as the first octet

336
00:14:00,800 --> 00:14:04,079
this is over 268 million addresses more

337
00:14:04,079 --> 00:14:05,839
than six percent of all of the ipv4

338
00:14:05,839 --> 00:14:07,519
address space

339
00:14:07,519 --> 00:14:09,360
now these addresses were reserved for

340
00:14:09,360 --> 00:14:12,160
future use in the 1980s

341
00:14:12,160 --> 00:14:14,959
there were many reasons to think that

342
00:14:14,959 --> 00:14:16,720
this would be useful

343
00:14:16,720 --> 00:14:18,160
that there would be

344
00:14:18,160 --> 00:14:20,240
additional addressing modes other than

345
00:14:20,240 --> 00:14:21,519
unicast

346
00:14:21,519 --> 00:14:24,320
for example anycast was proposed

347
00:14:24,320 --> 00:14:27,360
to use a dedicated address space

348
00:14:27,360 --> 00:14:29,120
there have been ipv6 transition

349
00:14:29,120 --> 00:14:31,519
mechanisms that have been proposed to

350
00:14:31,519 --> 00:14:34,240
use different address space and so on

351
00:14:34,240 --> 00:14:35,760
none of the addressing modes that have

352
00:14:35,760 --> 00:14:37,120
been proposed have ended up being

353
00:14:37,120 --> 00:14:38,240
deployed

354
00:14:38,240 --> 00:14:39,920
and none of them have been able to make

355
00:14:39,920 --> 00:14:43,399
use of this space

356
00:14:44,560 --> 00:14:45,440
so

357
00:14:45,440 --> 00:14:47,279
there were two proposals presented in

358
00:14:47,279 --> 00:14:50,480
2008 at itf which did not advance as

359
00:14:50,480 --> 00:14:52,800
drafts in the ietf process

360
00:14:52,800 --> 00:14:53,600
but

361
00:14:53,600 --> 00:14:55,360
were favored

362
00:14:55,360 --> 00:14:57,440
by implementers at the time and have

363
00:14:57,440 --> 00:14:58,880
been widely supported in operating

364
00:14:58,880 --> 00:15:01,920
systems since that time

365
00:15:02,800 --> 00:15:06,079
so our draft designates this range as

366
00:15:06,079 --> 00:15:08,560
ordinary unicast addresses and that

367
00:15:08,560 --> 00:15:09,600
means

368
00:15:09,600 --> 00:15:12,160
a request to implementers

369
00:15:12,160 --> 00:15:13,040
to

370
00:15:13,040 --> 00:15:15,440
implement the behavior that these are

371
00:15:15,440 --> 00:15:17,040
ordinary addresses which can be used to

372
00:15:17,040 --> 00:15:19,120
number hosts

373
00:15:19,120 --> 00:15:21,440
our draft does not say

374
00:15:21,440 --> 00:15:23,600
what shall be done with this address

375
00:15:23,600 --> 00:15:24,800
space

376
00:15:24,800 --> 00:15:26,160
according to our draft it remains

377
00:15:26,160 --> 00:15:27,440
unallocated

378
00:15:27,440 --> 00:15:29,199
and we save that question for a future

379
00:15:29,199 --> 00:15:30,959
day

380
00:15:30,959 --> 00:15:32,639
and i'll discuss

381
00:15:32,639 --> 00:15:34,160
in just a minute

382
00:15:34,160 --> 00:15:36,079
that we envision this being a gradual

383
00:15:36,079 --> 00:15:38,079
process which involves

384
00:15:38,079 --> 00:15:39,440
more involvement from the internet

385
00:15:39,440 --> 00:15:41,759
community in testing and assessing the

386
00:15:41,759 --> 00:15:45,360
deployment and compatibility questions

387
00:15:46,480 --> 00:15:48,800
now as i mentioned since 2008 most

388
00:15:48,800 --> 00:15:50,639
operating systems have supported this

389
00:15:50,639 --> 00:15:53,199
addressing range as ordinary unicast

390
00:15:53,199 --> 00:15:55,519
or can easily be configured to do so

391
00:15:55,519 --> 00:15:57,759
and again many of you are probably

392
00:15:57,759 --> 00:16:00,079
watching this very presentation on an

393
00:16:00,079 --> 00:16:01,519
operating system that supports this

394
00:16:01,519 --> 00:16:03,680
behavior out of the box

395
00:16:03,680 --> 00:16:06,000
this includes popular operating systems

396
00:16:06,000 --> 00:16:08,560
like linux android and apple's desktop

397
00:16:08,560 --> 00:16:10,720
and mobile operating systems

398
00:16:10,720 --> 00:16:12,480
this also works so well

399
00:16:12,480 --> 00:16:14,160
that we've seen documentation showing

400
00:16:14,160 --> 00:16:15,839
that some cloud vendors

401
00:16:15,839 --> 00:16:17,519
are unofficially using this address

402
00:16:17,519 --> 00:16:19,519
space as private address space

403
00:16:19,519 --> 00:16:21,120
because they know that the particular

404
00:16:21,120 --> 00:16:23,120
systems that are going to

405
00:16:23,120 --> 00:16:25,360
interact with each other

406
00:16:25,360 --> 00:16:27,120
are your running operating systems that

407
00:16:27,120 --> 00:16:29,600
support it

408
00:16:29,600 --> 00:16:31,600
just to preview drafts that we uploaded

409
00:16:31,600 --> 00:16:33,360
after the deadline we have a draft on

410
00:16:33,360 --> 00:16:35,600
the 0 8 network

411
00:16:35,600 --> 00:16:37,839
which was reserved for an icmp based

412
00:16:37,839 --> 00:16:40,399
auto configuration protocol for hosts

413
00:16:40,399 --> 00:16:42,800
back in 1981

414
00:16:42,800 --> 00:16:44,160
that protocol

415
00:16:44,160 --> 00:16:46,560
was not compatible with ethernet and was

416
00:16:46,560 --> 00:16:48,560
supplanted by auto configuration

417
00:16:48,560 --> 00:16:51,360
protocols like boot p and dhcp

418
00:16:51,360 --> 00:16:53,199
and in 1989

419
00:16:53,199 --> 00:16:55,120
the mechanism for which 0 8 was

420
00:16:55,120 --> 00:16:56,720
originally reserved was noted to be

421
00:16:56,720 --> 00:16:58,399
obsolete

422
00:16:58,399 --> 00:17:00,000
nonetheless the space has remained

423
00:17:00,000 --> 00:17:01,920
reserved even though it's not being used

424
00:17:01,920 --> 00:17:05,439
for anything and modern ic um modern

425
00:17:05,439 --> 00:17:08,319
non-icmp ipv4 auto configuration using

426
00:17:08,319 --> 00:17:11,039
dhcp uses only one address rather than

427
00:17:11,039 --> 00:17:13,119
16 million addresses

428
00:17:13,119 --> 00:17:14,799
uh this behavior that we document in

429
00:17:14,799 --> 00:17:16,799
that draft is also current default

430
00:17:16,799 --> 00:17:19,119
behavior in linux

431
00:17:19,119 --> 00:17:20,640
and we've uploaded the draft on

432
00:17:20,640 --> 00:17:22,079
unreserving

433
00:17:22,079 --> 00:17:27,520
most of the 127 ipv4 loopback network

434
00:17:27,520 --> 00:17:30,960
we note that ipv6 has only one loopback

435
00:17:30,960 --> 00:17:33,120
address whereas ipv4

436
00:17:33,120 --> 00:17:35,120
for historical reasons

437
00:17:35,120 --> 00:17:38,000
has over 16 million of them

438
00:17:38,000 --> 00:17:39,840
and we've seen that very little software

439
00:17:39,840 --> 00:17:41,440
ever uses or refers to the great

440
00:17:41,440 --> 00:17:43,600
majority of these back addresses

441
00:17:43,600 --> 00:17:44,400
and

442
00:17:44,400 --> 00:17:46,320
does not typically in fact use them for

443
00:17:46,320 --> 00:17:47,520
the back

444
00:17:47,520 --> 00:17:50,480
for this behavior we're not aware of any

445
00:17:50,480 --> 00:17:53,039
deployed implementations

446
00:17:53,039 --> 00:17:55,120
and we look forward to discussing both

447
00:17:55,120 --> 00:17:57,280
of those drafts in the future

448
00:17:57,280 --> 00:17:58,960
so i want to emphasize that for all of

449
00:17:58,960 --> 00:18:00,720
these changes

450
00:18:00,720 --> 00:18:02,240
the

451
00:18:02,240 --> 00:18:04,960
behavior changes for implementers are

452
00:18:04,960 --> 00:18:06,400
very small

453
00:18:06,400 --> 00:18:08,320
and we know this because we've prepared

454
00:18:08,320 --> 00:18:10,880
and tested changes ourselves for various

455
00:18:10,880 --> 00:18:12,320
operating systems that implement these

456
00:18:12,320 --> 00:18:14,000
behaviors as i said some of those are

457
00:18:14,000 --> 00:18:16,559
already deployed as default behavior

458
00:18:16,559 --> 00:18:18,880
typically for each

459
00:18:18,880 --> 00:18:20,720
category of addresses

460
00:18:20,720 --> 00:18:22,720
in an operating system

461
00:18:22,720 --> 00:18:24,880
you have to change about one line of

462
00:18:24,880 --> 00:18:26,480
code in the operating system kernel

463
00:18:26,480 --> 00:18:28,240
which is typically removing a special

464
00:18:28,240 --> 00:18:29,440
case

465
00:18:29,440 --> 00:18:31,360
that creates a special case behavior for

466
00:18:31,360 --> 00:18:33,520
a particular kind of addresses

467
00:18:33,520 --> 00:18:35,200
and we've noted that for all of these

468
00:18:35,200 --> 00:18:36,400
changes

469
00:18:36,400 --> 00:18:38,480
systems whose software has been updated

470
00:18:38,480 --> 00:18:39,679
interoperate

471
00:18:39,679 --> 00:18:42,000
with one another when numbered with the

472
00:18:42,000 --> 00:18:45,280
historically reserved addresses

473
00:18:46,080 --> 00:18:48,080
now the process that we propose and the

474
00:18:48,080 --> 00:18:50,320
process that we envision is a gradual

475
00:18:50,320 --> 00:18:52,080
one

476
00:18:52,080 --> 00:18:54,880
in particular we propose that

477
00:18:54,880 --> 00:18:57,280
these behaviors be recognized as

478
00:18:57,280 --> 00:18:59,360
standard and that implementers be asked

479
00:18:59,360 --> 00:19:00,720
to implement them

480
00:19:00,720 --> 00:19:01,760
in

481
00:19:01,760 --> 00:19:04,000
their operating systems

482
00:19:04,000 --> 00:19:05,520
these changes would then roll out

483
00:19:05,520 --> 00:19:08,320
gradually in ordinary software updates

484
00:19:08,320 --> 00:19:10,880
and i keep coming back to the proverb

485
00:19:10,880 --> 00:19:12,559
that says that the best time to plant a

486
00:19:12,559 --> 00:19:13,440
tree

487
00:19:13,440 --> 00:19:15,520
is 30 years ago and the second best time

488
00:19:15,520 --> 00:19:17,918
is now

489
00:19:18,000 --> 00:19:19,600
by which i mean

490
00:19:19,600 --> 00:19:21,520
that

491
00:19:21,520 --> 00:19:24,559
we will appreciate in the future

492
00:19:24,559 --> 00:19:26,720
having the opportunities

493
00:19:26,720 --> 00:19:28,480
to assess the compatibility and the

494
00:19:28,480 --> 00:19:30,000
usability of the large number of

495
00:19:30,000 --> 00:19:32,240
addresses freed up by these changes

496
00:19:32,240 --> 00:19:34,080
but if we don't begin the process of

497
00:19:34,080 --> 00:19:36,400
making these changes we won't have that

498
00:19:36,400 --> 00:19:39,919
choice in the future so we would like to

499
00:19:39,919 --> 00:19:42,400
give the internet community that option

500
00:19:42,400 --> 00:19:44,160
in the future

501
00:19:44,160 --> 00:19:46,240
making these addresses usable and then

502
00:19:46,240 --> 00:19:47,440
assessing

503
00:19:47,440 --> 00:19:49,840
how and when they can be used so again

504
00:19:49,840 --> 00:19:52,080
our drafts don't allocate these ranges

505
00:19:52,080 --> 00:19:55,360
and that would require future action

506
00:19:55,360 --> 00:19:58,080
and we also note that there have been

507
00:19:58,080 --> 00:19:59,520
various cases that the internet

508
00:19:59,520 --> 00:20:02,240
community has had experience with

509
00:20:02,240 --> 00:20:04,240
where addresses that were historically

510
00:20:04,240 --> 00:20:06,000
unallocated

511
00:20:06,000 --> 00:20:09,600
that were widely unreachable

512
00:20:09,600 --> 00:20:10,799
have been made reachable through

513
00:20:10,799 --> 00:20:12,320
community efforts

514
00:20:12,320 --> 00:20:13,360
and

515
00:20:13,360 --> 00:20:15,039
the internet community has successful

516
00:20:15,039 --> 00:20:16,799
experience with this

517
00:20:16,799 --> 00:20:18,320
and so

518
00:20:18,320 --> 00:20:20,400
a similar process at some point may be

519
00:20:20,400 --> 00:20:21,679
undertaken

520
00:20:21,679 --> 00:20:22,480
for

521
00:20:22,480 --> 00:20:24,159
categories of historically reserved

522
00:20:24,159 --> 00:20:26,640
addresses

523
00:20:27,520 --> 00:20:30,400
so to conclude

524
00:20:31,039 --> 00:20:34,159
if we standardize and get implementers

525
00:20:34,159 --> 00:20:38,159
to adopt a small number of small patches

526
00:20:38,159 --> 00:20:39,200
we can

527
00:20:39,200 --> 00:20:42,000
with a delay in the future

528
00:20:42,000 --> 00:20:43,840
create billions of dollars of value in

529
00:20:43,840 --> 00:20:46,320
making ipv4 addresses available and

530
00:20:46,320 --> 00:20:48,960
alleviating ipv4 address scarcity

531
00:20:48,960 --> 00:20:50,400
we've also seen

532
00:20:50,400 --> 00:20:52,400
that as many of these behaviors are

533
00:20:52,400 --> 00:20:54,080
actually widely deployed around the

534
00:20:54,080 --> 00:20:55,280
world

535
00:20:55,280 --> 00:20:57,919
and have been for many years

536
00:20:57,919 --> 00:20:59,840
there's incredibly low risk to making

537
00:20:59,840 --> 00:21:02,080
most of these changes

538
00:21:02,080 --> 00:21:04,559
indeed many of you may be running

539
00:21:04,559 --> 00:21:06,080
systems with these changes right now and

540
00:21:06,080 --> 00:21:08,879
not even notice

541
00:21:08,960 --> 00:21:11,120
obviously the achieving interoperability

542
00:21:11,120 --> 00:21:12,559
may be

543
00:21:12,559 --> 00:21:14,320
an interesting discussion and an

544
00:21:14,320 --> 00:21:15,520
interesting thing

545
00:21:15,520 --> 00:21:17,760
for the community to study but merely

546
00:21:17,760 --> 00:21:20,720
having the addresses enabled as unicast

547
00:21:20,720 --> 00:21:23,600
is really very very low risk

548
00:21:23,600 --> 00:21:25,520
so we would appreciate your help in

549
00:21:25,520 --> 00:21:27,120
discussing these drafts and helping them

550
00:21:27,120 --> 00:21:29,520
to progress

551
00:21:29,520 --> 00:21:30,640
and

552
00:21:30,640 --> 00:21:32,960
we appreciate your time very much these

553
00:21:32,960 --> 00:21:35,120
are our email addresses

554
00:21:35,120 --> 00:21:37,120
we look forward to discussion

555
00:21:37,120 --> 00:21:39,440
here in the meeting or on the interior

556
00:21:39,440 --> 00:21:41,600
working group mailing list

557
00:21:41,600 --> 00:21:44,400
and i'll just leave up

558
00:21:44,400 --> 00:21:47,679
a chart that just shows bit masks for

559
00:21:47,679 --> 00:21:49,280
the categories of addresses that we're

560
00:21:49,280 --> 00:21:51,280
proposing to unreserve

561
00:21:51,280 --> 00:21:53,120
which many of you can certainly envision

562
00:21:53,120 --> 00:21:55,679
but we've just highlighted

563
00:21:55,679 --> 00:21:56,559
the

564
00:21:56,559 --> 00:21:58,159
number of addresses in each category and

565
00:21:58,159 --> 00:21:59,840
the bits that are affected and so on in

566
00:21:59,840 --> 00:22:01,840
the ipv4 address structure

567
00:22:01,840 --> 00:22:04,480
thank you very much

568
00:22:04,960 --> 00:22:06,770
thank you very much

569
00:22:06,770 --> 00:22:08,400
[Music]

570
00:22:08,400 --> 00:22:10,400
are there any questions for said we can

571
00:22:10,400 --> 00:22:12,080
take a couple

572
00:22:12,080 --> 00:22:14,559
right now

573
00:22:17,360 --> 00:22:19,520
the presentation um

574
00:22:19,520 --> 00:22:21,760
i think it would be very helpful to you

575
00:22:21,760 --> 00:22:22,559
know

576
00:22:22,559 --> 00:22:25,280
add information about use cases where

577
00:22:25,280 --> 00:22:26,480
you know the

578
00:22:26,480 --> 00:22:28,799
the current non-endorsed

579
00:22:28,799 --> 00:22:32,000
uh mechanism um of you know people

580
00:22:32,000 --> 00:22:34,480
privately using these addresses

581
00:22:34,480 --> 00:22:37,760
aren't good enough um and that would be

582
00:22:37,760 --> 00:22:40,640
enabled by uh by doing this endorsement

583
00:22:40,640 --> 00:22:42,159
because you know

584
00:22:42,159 --> 00:22:44,400
um

585
00:22:45,520 --> 00:22:47,360
it it feels a little bit like fracking

586
00:22:47,360 --> 00:22:49,120
right so i mean we've

587
00:22:49,120 --> 00:22:51,120
we've been doing that ipv6 for for a

588
00:22:51,120 --> 00:22:53,360
very very long time and would be really

589
00:22:53,360 --> 00:22:55,919
good to see why that this investment

590
00:22:55,919 --> 00:22:57,520
here um

591
00:22:57,520 --> 00:22:59,840
from the ietf side to to to actually

592
00:22:59,840 --> 00:23:02,240
adore support that and get involved in

593
00:23:02,240 --> 00:23:04,960
and all these you know counteractive

594
00:23:04,960 --> 00:23:06,320
changes

595
00:23:06,320 --> 00:23:08,000
would be highly beneficial i'm not

596
00:23:08,000 --> 00:23:10,400
saying that i'm completely opposed to it

597
00:23:10,400 --> 00:23:13,360
i think this discussion had been had

598
00:23:13,360 --> 00:23:16,880
several times over the past 10 years um

599
00:23:16,880 --> 00:23:19,200
but i'd certainly love to see

600
00:23:19,200 --> 00:23:20,720
you know some some really more

601
00:23:20,720 --> 00:23:22,720
persuasive evidence of

602
00:23:22,720 --> 00:23:25,200
of use cases where you know simply you

603
00:23:25,200 --> 00:23:29,200
know going for ipv6 addresses

604
00:23:29,520 --> 00:23:32,400
wouldn't be an um equivalently good

605
00:23:32,400 --> 00:23:35,400
solution

606
00:23:39,919 --> 00:23:40,960
um

607
00:23:40,960 --> 00:23:42,159
so i think

608
00:23:42,159 --> 00:23:43,120
the

609
00:23:43,120 --> 00:23:45,039
fact that there is private use of some

610
00:23:45,039 --> 00:23:47,039
of these addresses

611
00:23:47,039 --> 00:23:49,039
we've seen as a good indication

612
00:23:49,039 --> 00:23:51,760
as i mentioned that the

613
00:23:51,760 --> 00:23:53,919
uh addresses can

614
00:23:53,919 --> 00:23:55,679
be unreserved and

615
00:23:55,679 --> 00:23:57,440
are in fact

616
00:23:57,440 --> 00:23:59,360
usable that it's a

617
00:23:59,360 --> 00:24:01,840
reality that's achievable

618
00:24:01,840 --> 00:24:03,520
no i understand

619
00:24:03,520 --> 00:24:06,000
but why would we need to endorse it if

620
00:24:06,000 --> 00:24:08,880
it already works

621
00:24:08,880 --> 00:24:11,600
um so i think the

622
00:24:11,600 --> 00:24:12,880
challenge which has certainly been

623
00:24:12,880 --> 00:24:16,080
discussed in the past

624
00:24:16,080 --> 00:24:18,000
is that there are different behaviors of

625
00:24:18,000 --> 00:24:19,279
different systems

626
00:24:19,279 --> 00:24:23,919
and while many operating systems do

627
00:24:24,880 --> 00:24:26,960
many operating systems do adopt the

628
00:24:26,960 --> 00:24:29,760
behaviors that we propose others don't

629
00:24:29,760 --> 00:24:32,320
and in many cases the developers of

630
00:24:32,320 --> 00:24:34,000
those operating systems have stated when

631
00:24:34,000 --> 00:24:35,279
we've talked to them

632
00:24:35,279 --> 00:24:37,200
well we would prefer to make this change

633
00:24:37,200 --> 00:24:39,440
if it were recommended as an official

634
00:24:39,440 --> 00:24:41,679
internet standard

635
00:24:41,679 --> 00:24:43,600
in other words the attitude of

636
00:24:43,600 --> 00:24:45,039
implementers

637
00:24:45,039 --> 00:24:47,679
to making the changes

638
00:24:47,679 --> 00:24:49,520
in advance of the official internet

639
00:24:49,520 --> 00:24:51,919
standard varies a lot

640
00:24:51,919 --> 00:24:54,159
some are quite happy too and some are

641
00:24:54,159 --> 00:24:56,480
quite reluctant to

642
00:24:56,480 --> 00:25:00,080
um i think the

643
00:25:00,080 --> 00:25:01,840
you know the main use case is numbering

644
00:25:01,840 --> 00:25:03,840
hosts in unicast

645
00:25:03,840 --> 00:25:05,840
and we continue to see

646
00:25:05,840 --> 00:25:08,000
enormous demand for ipv4 addresses for

647
00:25:08,000 --> 00:25:10,080
numbering hosts in unicast

648
00:25:10,080 --> 00:25:11,679
and i see a lot of people in the chat

649
00:25:11,679 --> 00:25:14,000
mentioning ipv6

650
00:25:14,000 --> 00:25:16,799
which is certainly

651
00:25:16,799 --> 00:25:18,960
a

652
00:25:19,279 --> 00:25:21,360
very fundamental thing

653
00:25:21,360 --> 00:25:22,159
right

654
00:25:22,159 --> 00:25:24,720
so i think i've seen about seven people

655
00:25:24,720 --> 00:25:25,840
in the chat

656
00:25:25,840 --> 00:25:27,919
mention the question of why people can't

657
00:25:27,919 --> 00:25:30,480
use ipv6

658
00:25:30,480 --> 00:25:31,520
and

659
00:25:31,520 --> 00:25:32,799
i think

660
00:25:32,799 --> 00:25:35,279
this is

661
00:25:35,600 --> 00:25:37,039
this is in a way an empirical

662
00:25:37,039 --> 00:25:39,760
observational question right that

663
00:25:39,760 --> 00:25:41,919
there are lots and lots of networks that

664
00:25:41,919 --> 00:25:45,120
continue to want v4 addresses

665
00:25:45,120 --> 00:25:46,960
and one could say

666
00:25:46,960 --> 00:25:50,559
those networks are doing the wrong thing

667
00:25:51,360 --> 00:25:54,320
you know those networks are

668
00:25:54,320 --> 00:25:56,960
improper in some way because

669
00:25:56,960 --> 00:26:01,120
they ought to only be using v6

670
00:26:01,200 --> 00:26:03,279
from what we've seen from

671
00:26:03,279 --> 00:26:06,159
a lot of people's use cases they say

672
00:26:06,159 --> 00:26:07,679
we want

673
00:26:07,679 --> 00:26:10,720
v4 addresses because if we say

674
00:26:10,720 --> 00:26:13,919
our public service is v6 only

675
00:26:13,919 --> 00:26:15,760
an enormous portion of the internet

676
00:26:15,760 --> 00:26:18,240
can't reach us

677
00:26:18,240 --> 00:26:22,120
and we've seen in

678
00:26:24,799 --> 00:26:27,039
we've seen in research on ipv6

679
00:26:27,039 --> 00:26:28,559
deployment

680
00:26:28,559 --> 00:26:31,760
that many people don't foresee

681
00:26:31,760 --> 00:26:33,279
getting rid of dual stack and getting

682
00:26:33,279 --> 00:26:34,880
rid of coexistence as something that

683
00:26:34,880 --> 00:26:38,080
will happen in the foreseeable future

684
00:26:38,080 --> 00:26:40,480
and i say that

685
00:26:40,480 --> 00:26:41,520
not to

686
00:26:41,520 --> 00:26:43,919
discourage or criticize ipv6 adoption

687
00:26:43,919 --> 00:26:45,279
but to say

688
00:26:45,279 --> 00:26:46,880
ipv4

689
00:26:46,880 --> 00:26:47,840
is

690
00:26:47,840 --> 00:26:49,440
still the majority of the internet and

691
00:26:49,440 --> 00:26:51,039
it's still something that enormous

692
00:26:51,039 --> 00:26:52,880
numbers of end users

693
00:26:52,880 --> 00:26:54,880
continue to use and continue to view as

694
00:26:54,880 --> 00:26:57,679
a requirement to use

695
00:27:00,960 --> 00:27:02,960
okay so we have three more people on the

696
00:27:02,960 --> 00:27:05,440
queue if you can be brief with your

697
00:27:05,440 --> 00:27:06,400
questions

698
00:27:06,400 --> 00:27:08,720
because we're running out of time

699
00:27:08,720 --> 00:27:11,039
please

700
00:27:11,120 --> 00:27:13,360
jim

701
00:27:19,679 --> 00:27:22,799
right you have a question

702
00:27:28,080 --> 00:27:30,000
um jim is probably having issues with

703
00:27:30,000 --> 00:27:31,200
his mic

704
00:27:31,200 --> 00:27:35,120
maybe we can move to ted for now

705
00:27:35,120 --> 00:27:38,159
yeah so let's see if this works um

706
00:27:38,159 --> 00:27:39,760
so uh

707
00:27:39,760 --> 00:27:43,360
the issue here i think is that um you've

708
00:27:43,360 --> 00:27:45,279
you've pretty clearly explained how to

709
00:27:45,279 --> 00:27:48,320
do how to solve this problem right and

710
00:27:48,320 --> 00:27:50,080
that's great and i think your

711
00:27:50,080 --> 00:27:51,760
explanation is fine

712
00:27:51,760 --> 00:27:54,480
um but what you haven't explained is why

713
00:27:54,480 --> 00:27:56,080
to solve this problem

714
00:27:56,080 --> 00:27:57,520
um and

715
00:27:57,520 --> 00:27:59,919
what i mean by that is two things one

716
00:27:59,919 --> 00:28:02,159
um this is an example uh you've

717
00:28:02,159 --> 00:28:04,799
mentioned that the 240 slash

718
00:28:04,799 --> 00:28:07,600
whatever it is um is being used in

719
00:28:07,600 --> 00:28:11,600
private addressing and so um

720
00:28:11,600 --> 00:28:13,679
you know there's a policy question there

721
00:28:13,679 --> 00:28:16,000
if we were to make it easy to use the

722
00:28:16,000 --> 00:28:18,399
240 plus address space

723
00:28:18,399 --> 00:28:19,360
um

724
00:28:19,360 --> 00:28:20,960
what would the allocation strategy be

725
00:28:20,960 --> 00:28:22,399
for that would it remain private use

726
00:28:22,399 --> 00:28:24,399
would it be public use we don't we don't

727
00:28:24,399 --> 00:28:25,840
have an answer to that

728
00:28:25,840 --> 00:28:29,279
um secondly uh there's the question of

729
00:28:29,279 --> 00:28:31,840
you know

730
00:28:32,000 --> 00:28:34,320
whether this is a good idea

731
00:28:34,320 --> 00:28:35,760
is actually independent of whether the

732
00:28:35,760 --> 00:28:39,039
ietf should be promoting it

733
00:28:39,039 --> 00:28:42,480
so so essentially you're asking

734
00:28:42,480 --> 00:28:45,760
the ietf to to uh kind of rubber stamp

735
00:28:45,760 --> 00:28:47,360
this idea of

736
00:28:47,360 --> 00:28:50,399
uh you know prolonging the life of ipv4

737
00:28:50,399 --> 00:28:52,159
through these mechanisms and prolonging

738
00:28:52,159 --> 00:28:53,760
the life of ipv4 through these

739
00:28:53,760 --> 00:28:55,520
mechanisms might well be a good thing to

740
00:28:55,520 --> 00:28:56,399
do

741
00:28:56,399 --> 00:28:57,520
but that doesn't mean that it's

742
00:28:57,520 --> 00:28:59,200
consistent with the ip with with the

743
00:28:59,200 --> 00:29:01,679
ietf's mission so the question is

744
00:29:01,679 --> 00:29:02,480
uh

745
00:29:02,480 --> 00:29:03,520
not

746
00:29:03,520 --> 00:29:05,440
should you do it because clearly as you

747
00:29:05,440 --> 00:29:07,919
said people are doing it the question is

748
00:29:07,919 --> 00:29:09,760
should the itf do it

749
00:29:09,760 --> 00:29:11,679
and um that's what i don't think you've

750
00:29:11,679 --> 00:29:13,520
answered here uh you you haven't really

751
00:29:13,520 --> 00:29:14,720
made a case

752
00:29:14,720 --> 00:29:16,720
for why the ietf should do this what

753
00:29:16,720 --> 00:29:18,640
you've made a case for is why

754
00:29:18,640 --> 00:29:20,880
uh users of ipv4 in certain

755
00:29:20,880 --> 00:29:22,880
circumstances should do this

756
00:29:22,880 --> 00:29:24,399
that's not to say that you're wrong i'm

757
00:29:24,399 --> 00:29:27,120
just saying that if you wanted to

758
00:29:27,120 --> 00:29:28,720
to proceed with this you would really

759
00:29:28,720 --> 00:29:30,480
need to make that case i don't think

760
00:29:30,480 --> 00:29:32,399
that this stands alone without you

761
00:29:32,399 --> 00:29:35,879
making that case

762
00:29:40,640 --> 00:29:43,600
um thank you ted

763
00:29:44,399 --> 00:29:45,520
so

764
00:29:45,520 --> 00:29:47,440
in terms of the private versus public

765
00:29:47,440 --> 00:29:49,520
use and so on

766
00:29:49,520 --> 00:29:50,399
the

767
00:29:50,399 --> 00:29:54,000
2008 proposals had one proposing public

768
00:29:54,000 --> 00:29:56,159
use of 240 and one proposing private use

769
00:29:56,159 --> 00:29:58,960
of 240. and each of those was very

770
00:29:58,960 --> 00:30:02,480
specific about how this should be used

771
00:30:02,480 --> 00:30:03,200
and

772
00:30:03,200 --> 00:30:07,440
our position is that this is indeed a

773
00:30:07,440 --> 00:30:09,760
complex policy question

774
00:30:09,760 --> 00:30:11,840
and that since

775
00:30:11,840 --> 00:30:13,760
implementations

776
00:30:13,760 --> 00:30:16,159
don't need a different behavior

777
00:30:16,159 --> 00:30:17,679
depending on whether the address range

778
00:30:17,679 --> 00:30:20,159
is public or private

779
00:30:20,159 --> 00:30:22,080
we want to get started with asking the

780
00:30:22,080 --> 00:30:24,080
implementations to go ahead

781
00:30:24,080 --> 00:30:26,000
without having to resolve that policy

782
00:30:26,000 --> 00:30:27,200
question

783
00:30:27,200 --> 00:30:29,360
and we would agree that people who are

784
00:30:29,360 --> 00:30:31,919
using it for private address space

785
00:30:31,919 --> 00:30:34,080
might have an opinion about how it

786
00:30:34,080 --> 00:30:35,679
should be used or allocated at some

787
00:30:35,679 --> 00:30:38,399
point in the future

788
00:30:38,399 --> 00:30:40,159
and i'm certainly seeing an interesting

789
00:30:40,159 --> 00:30:41,919
discussion in the comments and i hope

790
00:30:41,919 --> 00:30:45,440
that will continue on the list but

791
00:30:45,600 --> 00:30:48,480
i see a lot of people engaging with the

792
00:30:48,480 --> 00:30:52,399
question of what is ietf's relationship

793
00:30:52,399 --> 00:30:53,600
toward

794
00:30:53,600 --> 00:30:56,799
we would say fixing and maintaining

795
00:30:56,799 --> 00:30:58,399
ipv4

796
00:30:58,399 --> 00:31:02,320
given that ietf does have a consensus

797
00:31:02,320 --> 00:31:03,760
which we support

798
00:31:03,760 --> 00:31:07,120
that ipv6 ought to be adopted

799
00:31:07,120 --> 00:31:10,080
what does that mean for ietf's work on

800
00:31:10,080 --> 00:31:12,000
maintaining ipv4

801
00:31:12,000 --> 00:31:14,799
given that there are also

802
00:31:14,799 --> 00:31:16,720
enormous numbers of ipv4 users who are

803
00:31:16,720 --> 00:31:19,200
getting enormous value from ipv4

804
00:31:19,200 --> 00:31:20,000
and

805
00:31:20,000 --> 00:31:20,960
all

806
00:31:20,960 --> 00:31:22,640
analysts believe that that will be the

807
00:31:22,640 --> 00:31:25,279
case for a long time to come

808
00:31:25,279 --> 00:31:26,080
and

809
00:31:26,080 --> 00:31:28,240
many implementers continue to look to

810
00:31:28,240 --> 00:31:29,360
ietf

811
00:31:29,360 --> 00:31:32,880
for advice on what to do with ipv4

812
00:31:32,880 --> 00:31:35,840
so i um to your observation about this

813
00:31:35,840 --> 00:31:37,120
might be a good thing and it might not

814
00:31:37,120 --> 00:31:39,600
be a good thing for iedf

815
00:31:39,600 --> 00:31:42,320
that may be so but if so there's no

816
00:31:42,320 --> 00:31:43,279
other

817
00:31:43,279 --> 00:31:44,320
entity

818
00:31:44,320 --> 00:31:46,640
that has its role

819
00:31:46,640 --> 00:31:48,880
an ietf stature

820
00:31:48,880 --> 00:31:51,440
to make recommendations that would be

821
00:31:51,440 --> 00:31:54,480
widely or nearly universally followed

822
00:31:54,480 --> 00:31:56,000
with regard to the maintenance of

823
00:31:56,000 --> 00:31:58,080
protocols like ipv4

824
00:31:58,080 --> 00:31:59,519
and that is

825
00:31:59,519 --> 00:32:02,000
a reason that we think that ipv that

826
00:32:02,000 --> 00:32:04,559
excuse me that itf's statement on this

827
00:32:04,559 --> 00:32:05,919
is important right we've talked to

828
00:32:05,919 --> 00:32:08,159
implementers we've said to implementers

829
00:32:08,159 --> 00:32:10,399
this is a good idea some implementers

830
00:32:10,399 --> 00:32:13,519
have said oh it looks neat it looks cool

831
00:32:13,519 --> 00:32:15,519
it looks like some people would like it

832
00:32:15,519 --> 00:32:17,760
but can we get an ietf standard that

833
00:32:17,760 --> 00:32:21,440
says that this is the right behavior so

834
00:32:21,440 --> 00:32:24,559
whether or not ietf yeah and this is an

835
00:32:24,559 --> 00:32:26,080
interesting question

836
00:32:26,080 --> 00:32:29,200
i see that sorry juan carlos you were

837
00:32:29,200 --> 00:32:30,799
perhaps saying that we're running low on

838
00:32:30,799 --> 00:32:31,760
time

839
00:32:31,760 --> 00:32:34,480
yeah very very low so so uh

840
00:32:34,480 --> 00:32:36,480
i think uh we get the

841
00:32:36,480 --> 00:32:37,840
discussion and definitely this is

842
00:32:37,840 --> 00:32:40,399
something that we will need to be uh

843
00:32:40,399 --> 00:32:42,640
we'll need to take to the list

844
00:32:42,640 --> 00:32:45,120
so um i would just uh if you don't mind

845
00:32:45,120 --> 00:32:47,679
set uh let's just uh hear uh

846
00:32:47,679 --> 00:32:50,720
buffs uh point and maybe one quick uh

847
00:32:50,720 --> 00:32:52,720
reply on ted but uh please take this

848
00:32:52,720 --> 00:32:54,559
discussion to the list

849
00:32:54,559 --> 00:32:57,919
okay thank you thank you

850
00:32:57,919 --> 00:32:59,600
hi should i go ahead

851
00:32:59,600 --> 00:33:02,240
yes go ahead well sorry yeah uh just a

852
00:33:02,240 --> 00:33:04,720
couple quick things i manage a couple

853
00:33:04,720 --> 00:33:07,440
ipv4 networks and

854
00:33:07,440 --> 00:33:08,480
i

855
00:33:08,480 --> 00:33:11,360
operationally for me it would be

856
00:33:11,360 --> 00:33:13,360
um

857
00:33:13,360 --> 00:33:15,600
very it just created a mess if i tried

858
00:33:15,600 --> 00:33:18,159
to do any of this because

859
00:33:18,159 --> 00:33:20,880
it's a mixed it's a mixture of

860
00:33:20,880 --> 00:33:23,120
hosts and routers from all different

861
00:33:23,120 --> 00:33:25,679
vendors some of which are well known

862
00:33:25,679 --> 00:33:27,679
some of which aren't and

863
00:33:27,679 --> 00:33:30,000
if i start using these addresses and

864
00:33:30,000 --> 00:33:31,919
anything stops working

865
00:33:31,919 --> 00:33:34,000
i have sort of an operational support

866
00:33:34,000 --> 00:33:36,559
nightmare i just don't see

867
00:33:36,559 --> 00:33:39,039
this would only be cost for me and i

868
00:33:39,039 --> 00:33:40,240
have no

869
00:33:40,240 --> 00:33:42,080
shortage of addresses on any of these

870
00:33:42,080 --> 00:33:45,039
networks because i use private v4

871
00:33:45,039 --> 00:33:46,240
addresses

872
00:33:46,240 --> 00:33:48,720
and i you know there's no address

873
00:33:48,720 --> 00:33:50,480
shortage so i don't really understand

874
00:33:50,480 --> 00:33:53,279
who this benefits there there clearly

875
00:33:53,279 --> 00:33:54,799
isn't you make a claim that this

876
00:33:54,799 --> 00:33:57,200
generates a lot of money well i don't

877
00:33:57,200 --> 00:33:59,760
see there's any money here

878
00:33:59,760 --> 00:34:02,799
i think many of your claims are

879
00:34:02,799 --> 00:34:04,480
using the slide

880
00:34:04,480 --> 00:34:06,080
using the words on the slide on the

881
00:34:06,080 --> 00:34:09,520
screen is is greatly exaggerated so

882
00:34:09,520 --> 00:34:11,839
there may be some

883
00:34:11,839 --> 00:34:14,800
value in looking at that class e space

884
00:34:14,800 --> 00:34:16,800
but in some

885
00:34:16,800 --> 00:34:19,440
specific environments for general use i

886
00:34:19,440 --> 00:34:21,440
think this has very little benefit to

887
00:34:21,440 --> 00:34:22,639
anyone

888
00:34:22,639 --> 00:34:25,040
thank you

889
00:34:27,119 --> 00:34:29,199
final remark that or can you take it to

890
00:34:29,199 --> 00:34:31,839
the list yeah just very quickly um i

891
00:34:31,839 --> 00:34:33,520
just wanted to reiterate that the the

892
00:34:33,520 --> 00:34:36,079
ietf essentially what what seth is

893
00:34:36,079 --> 00:34:39,040
asking for is for the ietf to uh express

894
00:34:39,040 --> 00:34:40,560
a policy and the reason he's asking the

895
00:34:40,560 --> 00:34:42,560
itdf to do this is because as he said

896
00:34:42,560 --> 00:34:45,040
the ietf is a very influential body in

897
00:34:45,040 --> 00:34:48,079
expressing policies of this type and um

898
00:34:48,079 --> 00:34:50,320
that's exactly why the ietf needs to

899
00:34:50,320 --> 00:34:52,399
decide whether the ietf wants to promote

900
00:34:52,399 --> 00:34:53,760
this policy

901
00:34:53,760 --> 00:34:55,359
it's not just simply assumed that

902
00:34:55,359 --> 00:34:57,359
because the itf is the place that has

903
00:34:57,359 --> 00:34:59,599
the most power to affect this change

904
00:34:59,599 --> 00:35:01,359
that the itf must therefore affect the

905
00:35:01,359 --> 00:35:03,520
change so that's the that's the argument

906
00:35:03,520 --> 00:35:05,440
that you need to make seth and i i don't

907
00:35:05,440 --> 00:35:08,720
hear you making that argument

908
00:35:12,079 --> 00:35:13,040
very much

909
00:35:13,040 --> 00:35:16,079
for that presentation set so we need to

910
00:35:16,079 --> 00:35:17,440
move on so

911
00:35:17,440 --> 00:35:20,480
i think it's dirk

912
00:35:22,560 --> 00:35:24,320
yes thanks

913
00:35:24,320 --> 00:35:25,359
um

914
00:35:25,359 --> 00:35:28,480
send requests to spare the

915
00:35:28,480 --> 00:35:32,079
screen if you could okay

916
00:35:36,240 --> 00:35:38,800
good slides are up you can see thanks an

917
00:35:38,800 --> 00:35:40,720
update on the internet addressing proper

918
00:35:40,720 --> 00:35:44,079
statement and gap analysis drafts um

919
00:35:44,079 --> 00:35:45,440
two slots i'm

920
00:35:45,440 --> 00:35:47,599
combining them into a single

921
00:35:47,599 --> 00:35:50,000
presentation

922
00:35:50,000 --> 00:35:52,160
and

923
00:35:52,160 --> 00:35:53,599
splitting the presentation into two

924
00:35:53,599 --> 00:35:55,839
parts first i give a recap and updates

925
00:35:55,839 --> 00:35:58,640
on the drafts itself and then

926
00:35:58,640 --> 00:36:00,640
feedback from the related site meeting

927
00:36:00,640 --> 00:36:02,800
which took place yesterday

928
00:36:02,800 --> 00:36:04,960
after the itf sessions

929
00:36:04,960 --> 00:36:07,119
and i know that um quite a number of you

930
00:36:07,119 --> 00:36:10,160
guys attended the side meeting so on the

931
00:36:10,160 --> 00:36:12,560
on the problem statement just to recap

932
00:36:12,560 --> 00:36:15,440
we have a number of example scenarios um

933
00:36:15,440 --> 00:36:16,240
where

934
00:36:16,240 --> 00:36:18,079
the internet addressing uh you know

935
00:36:18,079 --> 00:36:20,560
place a potential issue a hindrance for

936
00:36:20,560 --> 00:36:22,079
internet service provisioning we have a

937
00:36:22,079 --> 00:36:24,079
number of those

938
00:36:24,079 --> 00:36:26,000
example categories constraint devices

939
00:36:26,000 --> 00:36:27,760
dynamically changing topologies traffic

940
00:36:27,760 --> 00:36:29,200
steering and others

941
00:36:29,200 --> 00:36:30,400
that you can find in the problem

942
00:36:30,400 --> 00:36:32,640
statement draft we then also identify

943
00:36:32,640 --> 00:36:34,400
the issues

944
00:36:34,400 --> 00:36:35,599
that that

945
00:36:35,599 --> 00:36:37,920
you know internet addressing may exhibit

946
00:36:37,920 --> 00:36:39,520
in those scenarios with respect to

947
00:36:39,520 --> 00:36:40,640
efficiency

948
00:36:40,640 --> 00:36:43,359
effectiveness the complexity

949
00:36:43,359 --> 00:36:46,400
and and others so i i urge people to

950
00:36:46,400 --> 00:36:48,320
have a look through the draft

951
00:36:48,320 --> 00:36:49,839
we presented this also at the at the

952
00:36:49,839 --> 00:36:52,079
last in the area meeting

953
00:36:52,079 --> 00:36:53,920
the gap analysis drafts and takes this

954
00:36:53,920 --> 00:36:56,240
the problem statement further and then

955
00:36:56,240 --> 00:36:58,480
and and tries to provide the first round

956
00:36:58,480 --> 00:37:01,440
of of us as a gap analysis

957
00:37:01,440 --> 00:37:03,760
uh it first uh investigates the

958
00:37:03,760 --> 00:37:05,280
properties of internet addressing the

959
00:37:05,280 --> 00:37:06,720
fixed address length the ambiguous

960
00:37:06,720 --> 00:37:08,079
address semantic and the limited

961
00:37:08,079 --> 00:37:11,040
ultra-semantic support as and describes

962
00:37:11,040 --> 00:37:14,560
those uh investigates the extensions

963
00:37:14,560 --> 00:37:16,480
or number of extensions that patch the

964
00:37:16,480 --> 00:37:19,520
addressing properties

965
00:37:19,839 --> 00:37:21,440
and addresses therefore the challenges

966
00:37:21,440 --> 00:37:23,440
we out or some of the challenges that we

967
00:37:23,440 --> 00:37:25,680
outlined in the problem draft the

968
00:37:25,680 --> 00:37:28,880
extensions themselves we position

969
00:37:28,880 --> 00:37:31,520
in our draft as an explicit proof for

970
00:37:31,520 --> 00:37:33,440
potential gaps that have been identified

971
00:37:33,440 --> 00:37:35,119
by the community

972
00:37:35,119 --> 00:37:37,680
with respect to the uh

973
00:37:37,680 --> 00:37:39,520
to the identified properties of internet

974
00:37:39,520 --> 00:37:40,560
addressing

975
00:37:40,560 --> 00:37:43,200
we also identified that the gaps uh uh

976
00:37:43,200 --> 00:37:45,760
uh that were filled by the extensions

977
00:37:45,760 --> 00:37:47,520
are done according to the various

978
00:37:47,520 --> 00:37:49,920
methodologies that we that we are uh

979
00:37:49,920 --> 00:37:51,280
that we are describing in the gap

980
00:37:51,280 --> 00:37:53,599
analysis draft

981
00:37:53,599 --> 00:37:55,680
we then investigate um the gaps that are

982
00:37:55,680 --> 00:37:57,359
left by the extensions and some of the

983
00:37:57,359 --> 00:37:58,880
issues that are introduced by the

984
00:37:58,880 --> 00:38:00,720
extension themselves again with respect

985
00:38:00,720 --> 00:38:02,240
to complexity

986
00:38:02,240 --> 00:38:03,760
the efficiency

987
00:38:03,760 --> 00:38:05,280
extensibility

988
00:38:05,280 --> 00:38:06,800
but increases complexity and the

989
00:38:06,800 --> 00:38:09,359
fragility for scenarios where

990
00:38:09,359 --> 00:38:12,480
multiple extensions may coexist that's

991
00:38:12,480 --> 00:38:14,640
that's presented in

992
00:38:14,640 --> 00:38:16,640
the last section of the gap analysis

993
00:38:16,640 --> 00:38:18,240
draft

994
00:38:18,240 --> 00:38:20,240
so what are the updates we made to those

995
00:38:20,240 --> 00:38:22,480
two drafts there's no problem statements

996
00:38:22,480 --> 00:38:26,160
on version zero two um we changed the

997
00:38:26,160 --> 00:38:28,320
the scenario descriptions so that it

998
00:38:28,320 --> 00:38:30,480
focused more on the problem of internet

999
00:38:30,480 --> 00:38:31,839
addressing

1000
00:38:31,839 --> 00:38:32,640
some

1001
00:38:32,640 --> 00:38:34,320
wording changes we were introduced we

1002
00:38:34,320 --> 00:38:36,079
also simplified the problem statement

1003
00:38:36,079 --> 00:38:37,040
section

1004
00:38:37,040 --> 00:38:39,839
uh to be more explicit and more clearly

1005
00:38:39,839 --> 00:38:41,839
conclude towards the gap analysis that

1006
00:38:41,839 --> 00:38:42,720
is done

1007
00:38:42,720 --> 00:38:44,800
uh in the second document so they are

1008
00:38:44,800 --> 00:38:47,839
they're they're the mainly editorial uh

1009
00:38:47,839 --> 00:38:49,760
changes that we introduced in in in that

1010
00:38:49,760 --> 00:38:52,240
draft in the gap analysis itself

1011
00:38:52,240 --> 00:38:54,160
uh we updated the extensions to

1012
00:38:54,160 --> 00:38:56,320
properties as we also mentioned in the

1013
00:38:56,320 --> 00:38:58,960
last ietf meeting and also simplified

1014
00:38:58,960 --> 00:39:00,400
the conclusion section to make it more

1015
00:39:00,400 --> 00:39:02,960
straightforward and clear so again um

1016
00:39:02,960 --> 00:39:05,599
hopefully including increasing the

1017
00:39:05,599 --> 00:39:08,240
the understandability of the draft

1018
00:39:08,240 --> 00:39:10,720
mainly and this is the version zero one

1019
00:39:10,720 --> 00:39:13,359
that we uploaded

1020
00:39:13,359 --> 00:39:15,520
the key part however that we that we

1021
00:39:15,520 --> 00:39:16,800
worked was

1022
00:39:16,800 --> 00:39:20,240
um to get feedback um from the community

1023
00:39:20,240 --> 00:39:22,480
and and and uh we organized the site

1024
00:39:22,480 --> 00:39:24,160
reading yesterday evening

1025
00:39:24,160 --> 00:39:26,240
um yes evening our time

1026
00:39:26,240 --> 00:39:30,079
uh but the purpose to jumpstart a

1027
00:39:30,079 --> 00:39:32,480
wider discussion um that can be carried

1028
00:39:32,480 --> 00:39:34,079
over to the mailing list we've seen and

1029
00:39:34,079 --> 00:39:35,680
there was an explanation yesterday that

1030
00:39:35,680 --> 00:39:37,760
luigi gave in the introduction

1031
00:39:37,760 --> 00:39:40,720
but the problem of running um the ietf

1032
00:39:40,720 --> 00:39:42,960
online that we see

1033
00:39:42,960 --> 00:39:46,079
in in some of the discussions i a

1034
00:39:46,079 --> 00:39:48,000
decrease in the actual engagement and

1035
00:39:48,000 --> 00:39:49,599
the discussion that happened purely over

1036
00:39:49,599 --> 00:39:52,160
the mailing list given that the direct

1037
00:39:52,160 --> 00:39:53,920
social contact during the itf meetings

1038
00:39:53,920 --> 00:39:56,240
is missing so we try to really run this

1039
00:39:56,240 --> 00:39:58,240
almost like an as an experiment if you

1040
00:39:58,240 --> 00:40:00,800
will to describe drafts beyond the

1041
00:40:00,800 --> 00:40:02,400
actual list to try to jumpstart the

1042
00:40:02,400 --> 00:40:03,520
discussion

1043
00:40:03,520 --> 00:40:06,400
um with insights from from panelists and

1044
00:40:06,400 --> 00:40:08,160
the community at large

1045
00:40:08,160 --> 00:40:10,400
that we invited uh

1046
00:40:10,400 --> 00:40:12,560
to join the site meeting

1047
00:40:12,560 --> 00:40:15,200
um so that's the the the purpose we had

1048
00:40:15,200 --> 00:40:17,119
um the focus obviously on the drafts on

1049
00:40:17,119 --> 00:40:19,839
the problem and the gaps and whether an

1050
00:40:19,839 --> 00:40:21,599
architectural approach may may help

1051
00:40:21,599 --> 00:40:23,040
which is according to the question that

1052
00:40:23,040 --> 00:40:25,040
we asked both in the problem statement

1053
00:40:25,040 --> 00:40:27,440
rather than the gab analysis draft

1054
00:40:27,440 --> 00:40:29,599
we think that the the the experiment was

1055
00:40:29,599 --> 00:40:31,599
to an ex to quite an extent um

1056
00:40:31,599 --> 00:40:33,200
successful we had a huge amount of

1057
00:40:33,200 --> 00:40:35,440
exchanges we had 142 messages in the

1058
00:40:35,440 --> 00:40:37,119
chat that were counted

1059
00:40:37,119 --> 00:40:39,200
which probably can give us you know

1060
00:40:39,200 --> 00:40:40,160
weeks

1061
00:40:40,160 --> 00:40:42,000
or even months of email exchange that we

1062
00:40:42,000 --> 00:40:43,599
can generate out of this which is our

1063
00:40:43,599 --> 00:40:45,680
intention we're still going through the

1064
00:40:45,680 --> 00:40:47,359
messages so that we can deflect the

1065
00:40:47,359 --> 00:40:49,280
discussion back onto the list the site

1066
00:40:49,280 --> 00:40:51,520
meetings is not meant to be a

1067
00:40:51,520 --> 00:40:53,359
permanent institution if you will but

1068
00:40:53,359 --> 00:40:55,200
helps us to generate those discussions

1069
00:40:55,200 --> 00:40:57,599
and it was a very very rich exchange

1070
00:40:57,599 --> 00:40:59,839
but we believe can really serve the

1071
00:40:59,839 --> 00:41:01,680
purpose here so we believe that is

1072
00:41:01,680 --> 00:41:03,839
successful it may not scale for every

1073
00:41:03,839 --> 00:41:05,520
zero zero draft so i'm not entirely sure

1074
00:41:05,520 --> 00:41:08,640
that's a model you can copy for every

1075
00:41:08,640 --> 00:41:10,960
new work you want to propose but we try

1076
00:41:10,960 --> 00:41:13,200
to at least you know for hours

1077
00:41:13,200 --> 00:41:14,800
and kind of

1078
00:41:14,800 --> 00:41:16,960
we we believe it was a a you know a very

1079
00:41:16,960 --> 00:41:18,079
good attempt

1080
00:41:18,079 --> 00:41:20,319
a bit on the on the data um as i said it

1081
00:41:20,319 --> 00:41:23,839
happened yesterday um at 1800 utc

1082
00:41:23,839 --> 00:41:27,040
uh we had 64 uh maximum attendance over

1083
00:41:27,040 --> 00:41:30,079
61 on webex we also have a we also had a

1084
00:41:30,079 --> 00:41:31,680
youtube live stream you can also watch

1085
00:41:31,680 --> 00:41:33,440
the recording now we have three live

1086
00:41:33,440 --> 00:41:37,359
stream um viewers as well so 64 in total

1087
00:41:37,359 --> 00:41:39,680
we invited a number of panelists so we

1088
00:41:39,680 --> 00:41:42,400
we we contacted uh dino robert michael

1089
00:41:42,400 --> 00:41:44,880
dirk and neymar lauren um basilius

1090
00:41:44,880 --> 00:41:46,480
unfortunately couldn't make it i removed

1091
00:41:46,480 --> 00:41:47,839
them from the list but we had exchanges

1092
00:41:47,839 --> 00:41:49,359
with him as well

1093
00:41:49,359 --> 00:41:52,079
on the various aspects to bring from

1094
00:41:52,079 --> 00:41:54,480
their perspective into the discussion um

1095
00:41:54,480 --> 00:41:56,240
and uh after in 50 minutes in

1096
00:41:56,240 --> 00:41:57,920
introduction we had an open discussion

1097
00:41:57,920 --> 00:42:00,480
planned for 45 minutes we ran over 20

1098
00:42:00,480 --> 00:42:02,800
minutes we kept the discussion going

1099
00:42:02,800 --> 00:42:03,839
because we

1100
00:42:03,839 --> 00:42:05,440
felt it was a very good discussion and

1101
00:42:05,440 --> 00:42:06,960
you know

1102
00:42:06,960 --> 00:42:08,480
we didn't want to take the steam out of

1103
00:42:08,480 --> 00:42:10,400
this discussion very early so we had

1104
00:42:10,400 --> 00:42:12,480
more than an hour in total open

1105
00:42:12,480 --> 00:42:13,520
discussion

1106
00:42:13,520 --> 00:42:16,240
the material is uploaded at github we

1107
00:42:16,240 --> 00:42:18,160
had from some of the panelists we had

1108
00:42:18,160 --> 00:42:20,319
material that we were showing

1109
00:42:20,319 --> 00:42:22,000
which is available

1110
00:42:22,000 --> 00:42:23,839
but then also in our chat participant

1111
00:42:23,839 --> 00:42:26,400
list and all of that you can get at the

1112
00:42:26,400 --> 00:42:28,880
at the github under that link and the

1113
00:42:28,880 --> 00:42:31,599
actual video uh as shown here on youtube

1114
00:42:31,599 --> 00:42:35,119
if you want to watch the site meeting

1115
00:42:35,200 --> 00:42:37,760
so what were the the the key insights

1116
00:42:37,760 --> 00:42:40,160
that we that we found from this

1117
00:42:40,160 --> 00:42:41,920
side meeting but we had lots of

1118
00:42:41,920 --> 00:42:44,160
discussion and viewpoints so the topic

1119
00:42:44,160 --> 00:42:46,560
seems to be of interest um the number

1120
00:42:46,560 --> 00:42:48,079
you know is you know it's not bad

1121
00:42:48,079 --> 00:42:50,079
there's about slightly more than half of

1122
00:42:50,079 --> 00:42:51,520
the people currently

1123
00:42:51,520 --> 00:42:53,440
in this working group meeting so that's

1124
00:42:53,440 --> 00:42:54,800
that's a good number

1125
00:42:54,800 --> 00:42:56,640
um and our intention there is the

1126
00:42:56,640 --> 00:42:58,560
takeaway is to funnel that discussion in

1127
00:42:58,560 --> 00:43:00,960
the way forward so utilize the material

1128
00:43:00,960 --> 00:43:02,400
the discussions behind the discussion

1129
00:43:02,400 --> 00:43:05,119
points the chat evidences the statements

1130
00:43:05,119 --> 00:43:06,800
that we took as notes

1131
00:43:06,800 --> 00:43:09,280
and create discussion from this or

1132
00:43:09,280 --> 00:43:10,880
discussion threads from this on the

1133
00:43:10,880 --> 00:43:12,400
actual mailing list that is good so it

1134
00:43:12,400 --> 00:43:14,960
served that purpose of behalf but i said

1135
00:43:14,960 --> 00:43:17,040
it also showed that the topic itself

1136
00:43:17,040 --> 00:43:18,720
seems to be of interest given the rather

1137
00:43:18,720 --> 00:43:21,040
lively discussion we had

1138
00:43:21,040 --> 00:43:22,640
the very key point that was made very

1139
00:43:22,640 --> 00:43:23,839
early on there was a lot of discussion

1140
00:43:23,839 --> 00:43:25,280
around this key point that there seems

1141
00:43:25,280 --> 00:43:27,359
to be a larger architectural discussion

1142
00:43:27,359 --> 00:43:29,119
learning this is not maybe just about

1143
00:43:29,119 --> 00:43:32,400
addressing so revisiting or addressing

1144
00:43:32,400 --> 00:43:34,480
may just be the outcome of that and we

1145
00:43:34,480 --> 00:43:36,400
will continue to drive the address in

1146
00:43:36,400 --> 00:43:38,160
discussions with the current drafts but

1147
00:43:38,160 --> 00:43:40,640
we will also attempt to capture these

1148
00:43:40,640 --> 00:43:42,560
large architectural points

1149
00:43:42,560 --> 00:43:44,319
in possible future material that was a

1150
00:43:44,319 --> 00:43:46,880
very key observation we we made from the

1151
00:43:46,880 --> 00:43:48,400
discussions and from the point that

1152
00:43:48,400 --> 00:43:49,839
initially it was made by der kutcher and

1153
00:43:49,839 --> 00:43:51,760
his material

1154
00:43:51,760 --> 00:43:54,560
what we are looking into is

1155
00:43:54,560 --> 00:43:56,560
where to have the discussion what other

1156
00:43:56,560 --> 00:43:58,400
outcomes there could be

1157
00:43:58,400 --> 00:44:00,319
so stay tuned on that we're trying to

1158
00:44:00,319 --> 00:44:01,760
make suggestions on that if you have

1159
00:44:01,760 --> 00:44:03,760
suggestions obviously we're very

1160
00:44:03,760 --> 00:44:06,480
happy to hear those

1161
00:44:06,480 --> 00:44:08,480
it was also very good discussion around

1162
00:44:08,480 --> 00:44:10,800
past concepts and in particular i found

1163
00:44:10,800 --> 00:44:12,560
it you know um

1164
00:44:12,560 --> 00:44:14,000
to an extent quite daring but quite

1165
00:44:14,000 --> 00:44:15,599
interesting that even the ose model was

1166
00:44:15,599 --> 00:44:18,000
being brought up uh as well as variable

1167
00:44:18,000 --> 00:44:19,280
length addressing that seemed to have

1168
00:44:19,280 --> 00:44:21,119
had concepts that made a lot of sense in

1169
00:44:21,119 --> 00:44:22,480
preventing some of the issues that we

1170
00:44:22,480 --> 00:44:24,640
have observed also in our drafts and

1171
00:44:24,640 --> 00:44:26,160
that people also know generally that we

1172
00:44:26,160 --> 00:44:28,079
see today in internet addressing

1173
00:44:28,079 --> 00:44:30,240
and i think for us the questions really

1174
00:44:30,240 --> 00:44:32,079
you know can be

1175
00:44:32,079 --> 00:44:34,160
which could feed very well into the gap

1176
00:44:34,160 --> 00:44:35,440
analysis

1177
00:44:35,440 --> 00:44:37,119
what are these past counts that we may

1178
00:44:37,119 --> 00:44:39,839
want to look again at can we tease them

1179
00:44:39,839 --> 00:44:41,680
out what are their impacts what could be

1180
00:44:41,680 --> 00:44:43,760
their impacts if we would

1181
00:44:43,760 --> 00:44:44,560
maybe

1182
00:44:44,560 --> 00:44:46,160
think about some of these past concepts

1183
00:44:46,160 --> 00:44:48,400
in a in in this new context of

1184
00:44:48,400 --> 00:44:50,480
revisiting internet addressing

1185
00:44:50,480 --> 00:44:52,160
ultimately we believe it can enrich the

1186
00:44:52,160 --> 00:44:54,560
gap analysis draft beyond the currently

1187
00:44:54,560 --> 00:44:56,480
listed extensions to ip that we

1188
00:44:56,480 --> 00:44:58,480
currently have so that's something that

1189
00:44:58,480 --> 00:45:02,240
we took away as a key insight as well

1190
00:45:02,319 --> 00:45:04,480
another threat quite clearly this

1191
00:45:04,480 --> 00:45:07,760
is to not aim at the replacement of iap

1192
00:45:07,760 --> 00:45:10,240
that's not the aim we've also

1193
00:45:10,240 --> 00:45:11,680
believe we state that in the proper

1194
00:45:11,680 --> 00:45:14,240
statement draft already but evolve ip in

1195
00:45:14,240 --> 00:45:16,160
the light of existing deployment so this

1196
00:45:16,160 --> 00:45:17,680
is not about ripping gear out throwing

1197
00:45:17,680 --> 00:45:19,599
it away and putting new gear in

1198
00:45:19,599 --> 00:45:21,599
um there was a quite clear sort of

1199
00:45:21,599 --> 00:45:23,760
discussion around this uh particular in

1200
00:45:23,760 --> 00:45:26,160
the chat as well that's uh the fourth

1201
00:45:26,160 --> 00:45:29,759
key inside that we took away from this

1202
00:45:30,000 --> 00:45:32,079
as i mentioned the the the chat exchange

1203
00:45:32,079 --> 00:45:33,440
was quite um

1204
00:45:33,440 --> 00:45:35,440
intensive um which which was good and

1205
00:45:35,440 --> 00:45:37,119
that but that was part of the community

1206
00:45:37,119 --> 00:45:38,480
engagement the

1207
00:45:38,480 --> 00:45:40,240
exchanges we saw they were trying to

1208
00:45:40,240 --> 00:45:42,319
group them a little bit and uh this

1209
00:45:42,319 --> 00:45:44,000
morning when going through in

1210
00:45:44,000 --> 00:45:45,440
preparation for these talks these are

1211
00:45:45,440 --> 00:45:46,560
the slides as you can imagine they

1212
00:45:46,560 --> 00:45:47,680
really happened

1213
00:45:47,680 --> 00:45:50,319
after uh based on the meeting material

1214
00:45:50,319 --> 00:45:52,160
on addresses and identifiers just

1215
00:45:52,160 --> 00:45:54,000
putting you know two steps on here

1216
00:45:54,000 --> 00:45:56,000
around apps having less to do with the

1217
00:45:56,000 --> 00:45:57,440
network and having less knowledge about

1218
00:45:57,440 --> 00:45:59,520
addresses from dino's

1219
00:45:59,520 --> 00:46:03,440
um and and and and the idea that urls

1220
00:46:03,440 --> 00:46:06,160
help you to find services um you know

1221
00:46:06,160 --> 00:46:07,839
and what you want is not wait where to

1222
00:46:07,839 --> 00:46:09,760
get it so you have to redefine what

1223
00:46:09,760 --> 00:46:11,200
where really means there was a common

1224
00:46:11,200 --> 00:46:13,680
denominate and it was quite a number of

1225
00:46:13,680 --> 00:46:15,280
other statements around address that

1226
00:46:15,280 --> 00:46:17,359
identifies which was very rich

1227
00:46:17,359 --> 00:46:19,200
on there was quite a bit of discussion

1228
00:46:19,200 --> 00:46:21,520
on privacy we put these two against each

1229
00:46:21,520 --> 00:46:24,480
other they were literally in the chat um

1230
00:46:24,480 --> 00:46:27,280
connected uh about the ephemeral nature

1231
00:46:27,280 --> 00:46:29,920
of eid's website culture's response um

1232
00:46:29,920 --> 00:46:31,440
to to the extent that you may not

1233
00:46:31,440 --> 00:46:34,000
actually require them um as well as

1234
00:46:34,000 --> 00:46:36,240
robert's uh um

1235
00:46:36,240 --> 00:46:38,640
point that while security may be

1236
00:46:38,640 --> 00:46:40,560
concerned with not taking control of a

1237
00:46:40,560 --> 00:46:41,599
ui ua

1238
00:46:41,599 --> 00:46:43,119
you can't actually really hide that the

1239
00:46:43,119 --> 00:46:44,160
u.s

1240
00:46:44,160 --> 00:46:46,079
you know is in the sky over you so these

1241
00:46:46,079 --> 00:46:48,480
kind of privacy aspects were

1242
00:46:48,480 --> 00:46:50,960
discussed in the mail exchanges well um

1243
00:46:50,960 --> 00:46:54,000
these only as two examples each

1244
00:46:54,000 --> 00:46:56,960
security was another one um about uh the

1245
00:46:56,960 --> 00:46:58,640
the uh

1246
00:46:58,640 --> 00:47:00,640
you know

1247
00:47:00,640 --> 00:47:03,680
alicia making the um

1248
00:47:03,680 --> 00:47:06,160
the point quite clearly that one of the

1249
00:47:06,160 --> 00:47:08,240
uh number one challenges in the internet

1250
00:47:08,240 --> 00:47:10,800
today is is probably security rather

1251
00:47:10,800 --> 00:47:13,200
than speed right and apart from the fact

1252
00:47:13,200 --> 00:47:15,440
that unfortunately um packets flow to

1253
00:47:15,440 --> 00:47:17,920
the six big boys as dino

1254
00:47:17,920 --> 00:47:19,760
pointed out so we are connecting from

1255
00:47:19,760 --> 00:47:21,760
the security aspect back to an extent to

1256
00:47:21,760 --> 00:47:23,839
the privacy aspect

1257
00:47:23,839 --> 00:47:25,200
there again

1258
00:47:25,200 --> 00:47:28,800
more material can be found in the

1259
00:47:28,800 --> 00:47:31,440
in the message log on the security

1260
00:47:31,440 --> 00:47:33,520
aspect but also another thread of

1261
00:47:33,520 --> 00:47:36,640
discussion around future use cases um

1262
00:47:36,640 --> 00:47:38,960
particularly you know um what are the

1263
00:47:38,960 --> 00:47:40,559
features we really would want from from

1264
00:47:40,559 --> 00:47:43,520
the network as as dino pointed out um

1265
00:47:43,520 --> 00:47:45,040
and the

1266
00:47:45,040 --> 00:47:46,800
crutches um

1267
00:47:46,800 --> 00:47:49,359
uh point on cdn's and and hyper scale is

1268
00:47:49,359 --> 00:47:52,400
as relevant use cases but we maybe could

1269
00:47:52,400 --> 00:47:55,520
serve better than we currently do

1270
00:47:55,520 --> 00:47:57,920
overall um i said the chat messages are

1271
00:47:57,920 --> 00:47:59,440
available these are just pieces we

1272
00:47:59,440 --> 00:48:02,400
pulled out this morning after a first

1273
00:48:02,400 --> 00:48:04,000
skim

1274
00:48:04,000 --> 00:48:06,880
from our side um it's for all to view in

1275
00:48:06,880 --> 00:48:09,359
the github uh in in all the detail that

1276
00:48:09,359 --> 00:48:10,880
you can have from the chat messages we

1277
00:48:10,880 --> 00:48:12,720
will go through them more thoroughly

1278
00:48:12,720 --> 00:48:13,680
after

1279
00:48:13,680 --> 00:48:15,280
uh also this working group meeting to

1280
00:48:15,280 --> 00:48:17,520
deflect more discussion not necessarily

1281
00:48:17,520 --> 00:48:19,200
even on those

1282
00:48:19,200 --> 00:48:21,839
fourth uh threads i i already mentioned

1283
00:48:21,839 --> 00:48:23,760
but maybe also on others we identify

1284
00:48:23,760 --> 00:48:25,680
onto the in the area list in relation to

1285
00:48:25,680 --> 00:48:28,799
the addressing discussion

1286
00:48:29,040 --> 00:48:31,040
so what's the takeaway we got from all

1287
00:48:31,040 --> 00:48:33,200
of this well the volume was discussion

1288
00:48:33,200 --> 00:48:35,599
was very positive um lots of chat

1289
00:48:35,599 --> 00:48:37,440
messages very lively discussion but when

1290
00:48:37,440 --> 00:48:40,240
happily over people didn't drop off i

1291
00:48:40,240 --> 00:48:43,200
think um took the overrunning uh in the

1292
00:48:43,200 --> 00:48:45,920
stride of the discussion um and and we

1293
00:48:45,920 --> 00:48:49,040
continue to set it for about 20 minutes

1294
00:48:49,040 --> 00:48:50,960
we found there's enough content of

1295
00:48:50,960 --> 00:48:53,520
discussion to create follow-on threads

1296
00:48:53,520 --> 00:48:55,520
on lists so that was one

1297
00:48:55,520 --> 00:48:57,119
the purpose of the meeting we had we

1298
00:48:57,119 --> 00:48:58,720
will go through the midi material to

1299
00:48:58,720 --> 00:49:00,160
create those threads

1300
00:49:00,160 --> 00:49:02,240
and and get them on to the list in order

1301
00:49:02,240 --> 00:49:04,400
to continue the discussion

1302
00:49:04,400 --> 00:49:06,480
we also identified a rich set of

1303
00:49:06,480 --> 00:49:08,400
contributors having views on addressing

1304
00:49:08,400 --> 00:49:10,480
and the larger issues particularly the

1305
00:49:10,480 --> 00:49:12,079
potential architectural issues we're

1306
00:49:12,079 --> 00:49:14,160
looking into adding contributors

1307
00:49:14,160 --> 00:49:16,800
as co-authors so

1308
00:49:16,800 --> 00:49:18,720
i think there are a number of people

1309
00:49:18,720 --> 00:49:20,000
should expect

1310
00:49:20,000 --> 00:49:22,720
emails and outreach to them to to

1311
00:49:22,720 --> 00:49:25,119
hopefully help us with the discussion as

1312
00:49:25,119 --> 00:49:27,760
we go forward

1313
00:49:27,760 --> 00:49:29,440
and then reflect the community and put

1314
00:49:29,440 --> 00:49:32,559
at large into the revised drafts

1315
00:49:32,559 --> 00:49:35,280
after this itf so we

1316
00:49:35,280 --> 00:49:37,359
may also look into adding statements

1317
00:49:37,359 --> 00:49:38,800
similar to the ones i mentioned before

1318
00:49:38,800 --> 00:49:42,160
as contribution into the vice draft

1319
00:49:42,160 --> 00:49:44,559
in order to seed material into the

1320
00:49:44,559 --> 00:49:46,880
actual drafts

1321
00:49:46,880 --> 00:49:49,040
most importantly contributors are very

1322
00:49:49,040 --> 00:49:51,040
welcome to join in this effort so please

1323
00:49:51,040 --> 00:49:53,440
if you if if you

1324
00:49:53,440 --> 00:49:55,760
found the discussion interesting if you

1325
00:49:55,760 --> 00:49:57,119
look through the recording because you

1326
00:49:57,119 --> 00:49:58,720
couldn't make it and you feel that you

1327
00:49:58,720 --> 00:50:00,640
have something contribute please reach

1328
00:50:00,640 --> 00:50:02,000
out to us

1329
00:50:02,000 --> 00:50:03,839
we're very happy

1330
00:50:03,839 --> 00:50:07,280
to increase the set of contributors to

1331
00:50:07,280 --> 00:50:08,720
this discussion in order to push this

1332
00:50:08,720 --> 00:50:11,720
forward

1333
00:50:12,000 --> 00:50:14,960
just to reflect on the hot rfc you may

1334
00:50:14,960 --> 00:50:17,200
have seen the video that my colleague eo

1335
00:50:17,200 --> 00:50:19,599
uh made on internet addressing worth

1336
00:50:19,599 --> 00:50:21,359
thinking our

1337
00:50:21,359 --> 00:50:22,960
takeaway from

1338
00:50:22,960 --> 00:50:24,000
the

1339
00:50:24,000 --> 00:50:26,319
from the side meetings yes absolutely it

1340
00:50:26,319 --> 00:50:27,839
seems to be interested in doing that so

1341
00:50:27,839 --> 00:50:30,720
so we we take that as a positive to move

1342
00:50:30,720 --> 00:50:32,319
forward and if you have any questions

1343
00:50:32,319 --> 00:50:33,520
and comments

1344
00:50:33,520 --> 00:50:38,200
happy to do them there thank you

1345
00:50:40,000 --> 00:50:42,079
right uh do we have any questions

1346
00:50:42,079 --> 00:50:44,880
especially on the on the drafts or any

1347
00:50:44,880 --> 00:50:47,359
discussion

1348
00:50:47,359 --> 00:50:50,720
otherwise uh maybe we can

1349
00:50:50,720 --> 00:50:52,400
take the feedback to the to the mailing

1350
00:50:52,400 --> 00:50:54,240
list to to make it part of the interior

1351
00:50:54,240 --> 00:50:58,479
and then move to the next presentation

1352
00:51:07,040 --> 00:51:08,400
okay so

1353
00:51:08,400 --> 00:51:09,440
uh

1354
00:51:09,440 --> 00:51:13,119
next in line is how you

1355
00:51:18,160 --> 00:51:21,200
you want to share your screen

1356
00:51:21,200 --> 00:51:22,960
so

1357
00:51:22,960 --> 00:51:26,720
do you have my slice i upload it

1358
00:51:26,720 --> 00:51:29,440
um yeah you can you can present

1359
00:51:29,440 --> 00:51:34,280
okay i can i try to share my screen

1360
00:52:06,820 --> 00:52:09,869
[Music]

1361
00:52:10,960 --> 00:52:14,800
can you see it can you see it yes

1362
00:52:16,240 --> 00:52:17,680
okay

1363
00:52:17,680 --> 00:52:19,200
so uh

1364
00:52:19,200 --> 00:52:22,000
hi i i thank you uh for

1365
00:52:22,000 --> 00:52:23,839
uh joining this session uh i'm going to

1366
00:52:23,839 --> 00:52:26,319
talk about the short hierarchical ip

1367
00:52:26,319 --> 00:52:28,400
address at edge networks

1368
00:52:28,400 --> 00:52:31,200
this work is based on a

1369
00:52:31,200 --> 00:52:33,520
paper we published last year

1370
00:52:33,520 --> 00:52:36,400
but we tailored this for uh the edge

1371
00:52:36,400 --> 00:52:39,760
network and also uh interoperation uh

1372
00:52:39,760 --> 00:52:42,960
with ipv6

1373
00:52:43,280 --> 00:52:45,520
so here's a key of

1374
00:52:45,520 --> 00:52:47,520
motivation for this work

1375
00:52:47,520 --> 00:52:48,640
um

1376
00:52:48,640 --> 00:52:51,040
well for most of the edge networks we're

1377
00:52:51,040 --> 00:52:52,880
talking about

1378
00:52:52,880 --> 00:52:54,559
iot networks

1379
00:52:54,559 --> 00:52:57,599
and we find the iot entities when they

1380
00:52:57,599 --> 00:53:00,079
communicate they are very sensitive to

1381
00:53:00,079 --> 00:53:02,720
overhead and energy

1382
00:53:02,720 --> 00:53:05,040
this is because uh uh

1383
00:53:05,040 --> 00:53:07,119
mainly they involve the short message

1384
00:53:07,119 --> 00:53:08,240
exchange

1385
00:53:08,240 --> 00:53:09,040
and

1386
00:53:09,040 --> 00:53:11,680
many devices are battery powered

1387
00:53:11,680 --> 00:53:14,160
they use wireless channel and have a

1388
00:53:14,160 --> 00:53:17,280
very low storage and the computing power

1389
00:53:17,280 --> 00:53:19,280
but on the other hand

1390
00:53:19,280 --> 00:53:22,480
the ipv6 overhead is very large majorly

1391
00:53:22,480 --> 00:53:25,359
due to the address part

1392
00:53:25,359 --> 00:53:26,839
and

1393
00:53:26,839 --> 00:53:31,599
uh since all all these uh iot devices uh

1394
00:53:31,599 --> 00:53:33,920
in the in the same edge networks they

1395
00:53:33,920 --> 00:53:36,800
pretty much share the same ipv6

1396
00:53:36,800 --> 00:53:38,160
prefix

1397
00:53:38,160 --> 00:53:40,800
and also most communications uh could

1398
00:53:40,800 --> 00:53:42,960
happen just between the adjacent and the

1399
00:53:42,960 --> 00:53:44,800
related entities

1400
00:53:44,800 --> 00:53:48,319
so the question we will ask is that why

1401
00:53:48,319 --> 00:53:50,400
does this entity

1402
00:53:50,400 --> 00:53:53,839
need to know its prefix at all

1403
00:53:53,839 --> 00:53:56,839
so

1404
00:53:56,880 --> 00:54:00,720
it puts the presenter mode

1405
00:54:01,599 --> 00:54:02,480
and

1406
00:54:02,480 --> 00:54:06,000
so that's why if we observe the address

1407
00:54:06,000 --> 00:54:08,880
they are using actually

1408
00:54:08,880 --> 00:54:12,240
for the complete entity uh ipvc address

1409
00:54:12,240 --> 00:54:15,280
they actually contain uh several parts

1410
00:54:15,280 --> 00:54:18,160
the first part is a common ipv6 sub

1411
00:54:18,160 --> 00:54:20,400
subnet prefix is shared

1412
00:54:20,400 --> 00:54:23,200
and then below it is a we consider

1413
00:54:23,200 --> 00:54:25,359
that's the ending id but if we can

1414
00:54:25,359 --> 00:54:27,520
further partition the network into

1415
00:54:27,520 --> 00:54:30,720
multiple hierarchical levels then we can

1416
00:54:30,720 --> 00:54:33,920
see the edge network actually contain

1417
00:54:33,920 --> 00:54:36,400
multiple sections of the address only

1418
00:54:36,400 --> 00:54:39,440
the last part is actually uh can be

1419
00:54:39,440 --> 00:54:42,480
considered the entity id

1420
00:54:42,480 --> 00:54:45,680
um so this gave me the um

1421
00:54:45,680 --> 00:54:48,559
my idea to improve the

1422
00:54:48,559 --> 00:54:50,839
header overhead

1423
00:54:50,839 --> 00:54:54,720
um by uh delegates the network id and

1424
00:54:54,720 --> 00:54:56,000
the prefix

1425
00:54:56,000 --> 00:54:59,119
management maintenance and operation to

1426
00:54:59,119 --> 00:55:01,359
the network gateway routers

1427
00:55:01,359 --> 00:55:04,480
uh by doing so we allow the entity and a

1428
00:55:04,480 --> 00:55:07,680
node to only know and use its own entity

1429
00:55:07,680 --> 00:55:09,040
id

1430
00:55:09,040 --> 00:55:09,760
so

1431
00:55:09,760 --> 00:55:12,000
this way we can save a lot of

1432
00:55:12,000 --> 00:55:14,160
communication overhead

1433
00:55:14,160 --> 00:55:16,880
um the left side shows a proposal only

1434
00:55:16,880 --> 00:55:19,200
concerning the addressing part of the

1435
00:55:19,200 --> 00:55:20,559
package

1436
00:55:20,559 --> 00:55:23,280
by eliminating using the four complete

1437
00:55:23,280 --> 00:55:26,640
ipv6 address we just use a variable lens

1438
00:55:26,640 --> 00:55:30,160
source address and destination address

1439
00:55:30,160 --> 00:55:32,480
to supporting that we added two actual

1440
00:55:32,480 --> 00:55:35,440
fields the south address lens and the

1441
00:55:35,440 --> 00:55:37,760
destination address lens to

1442
00:55:37,760 --> 00:55:39,119
indicate

1443
00:55:39,119 --> 00:55:41,200
the length of the address

1444
00:55:41,200 --> 00:55:44,559
and as for the network we can see um we

1445
00:55:44,559 --> 00:55:48,799
we have a multiple level of the network

1446
00:55:48,799 --> 00:55:52,000
within the subnet setup network

1447
00:55:52,000 --> 00:55:55,280
and there are several uh some special

1448
00:55:55,280 --> 00:55:57,839
routers we call them uh level gateway

1449
00:55:57,839 --> 00:55:59,920
routers actually um

1450
00:55:59,920 --> 00:56:01,920
work hands uh

1451
00:56:01,920 --> 00:56:03,760
each each level

1452
00:56:03,760 --> 00:56:04,960
boundary

1453
00:56:04,960 --> 00:56:08,079
for the ingress and egress communication

1454
00:56:08,079 --> 00:56:10,319
and in each level network we also have

1455
00:56:10,319 --> 00:56:13,200
some other normal intra-level router

1456
00:56:13,200 --> 00:56:14,880
called ilr

1457
00:56:14,880 --> 00:56:17,680
so they do further for all the routings

1458
00:56:17,680 --> 00:56:18,799
in the

1459
00:56:18,799 --> 00:56:22,319
within this uh level network

1460
00:56:22,319 --> 00:56:25,440
so here is a more tangible uh

1461
00:56:25,440 --> 00:56:26,799
example

1462
00:56:26,799 --> 00:56:28,799
uh in this

1463
00:56:28,799 --> 00:56:32,000
sub network actually uh uh is a just

1464
00:56:32,000 --> 00:56:34,400
ipv6 subnet uh

1465
00:56:34,400 --> 00:56:35,440
uh

1466
00:56:35,440 --> 00:56:38,880
the it which is given a a 16

1467
00:56:38,880 --> 00:56:42,640
19 bit uh prefix which means this some

1468
00:56:42,640 --> 00:56:47,040
network on a 32-bit address space

1469
00:56:47,040 --> 00:56:50,880
so within it we can directly uh allocate

1470
00:56:50,880 --> 00:56:52,720
endnote entities

1471
00:56:52,720 --> 00:56:56,079
so which will use a 32-bit

1472
00:56:56,079 --> 00:56:56,960
uh

1473
00:56:56,960 --> 00:56:59,440
network id uh the node id

1474
00:56:59,440 --> 00:57:02,319
but we can also uh further partition

1475
00:57:02,319 --> 00:57:05,920
this space into uh some other uh further

1476
00:57:05,920 --> 00:57:08,319
sub networks with a

1477
00:57:08,319 --> 00:57:10,640
shorter network id

1478
00:57:10,640 --> 00:57:13,040
for example on the left side you can see

1479
00:57:13,040 --> 00:57:16,480
uh we partition this network to uh into

1480
00:57:16,480 --> 00:57:17,599
two more

1481
00:57:17,599 --> 00:57:18,880
levels

1482
00:57:18,880 --> 00:57:21,920
and the first level has a 16-bit uh

1483
00:57:21,920 --> 00:57:23,280
prefix

1484
00:57:23,280 --> 00:57:26,160
and the third level have we have further

1485
00:57:26,160 --> 00:57:28,960
a eight bit prefix

1486
00:57:28,960 --> 00:57:31,520
and on the right side we

1487
00:57:31,520 --> 00:57:34,160
partition we have another uh sub level

1488
00:57:34,160 --> 00:57:38,000
network which uses 24 bits

1489
00:57:38,000 --> 00:57:40,400
prefix

1490
00:57:40,400 --> 00:57:43,200
so within this network you can see uh

1491
00:57:43,200 --> 00:57:47,040
for example uh node x and the y are both

1492
00:57:47,040 --> 00:57:50,240
uh located in the uh by the same level

1493
00:57:50,240 --> 00:57:51,599
two network

1494
00:57:51,599 --> 00:57:54,400
if they want to talk to each other they

1495
00:57:54,400 --> 00:57:57,760
can directly to use their short

1496
00:57:57,760 --> 00:58:01,680
address which is only two bytes long

1497
00:58:01,680 --> 00:58:04,400
and maybe they only involve the

1498
00:58:04,400 --> 00:58:06,559
inter-level routers

1499
00:58:06,559 --> 00:58:08,799
for communication

1500
00:58:08,799 --> 00:58:11,760
uh if uh two notes from different

1501
00:58:11,760 --> 00:58:14,480
subnets uh want to communicate there are

1502
00:58:14,480 --> 00:58:17,440
involved some uh address operation as a

1503
00:58:17,440 --> 00:58:20,319
gateway router for example

1504
00:58:20,319 --> 00:58:22,720
you can see the bottom right side

1505
00:58:22,720 --> 00:58:27,040
as example if the node x want to uh talk

1506
00:58:27,040 --> 00:58:28,720
to node in

1507
00:58:28,720 --> 00:58:30,960
in another network

1508
00:58:30,960 --> 00:58:32,960
uh since the they first compare their

1509
00:58:32,960 --> 00:58:35,599
source and destination address with a

1510
00:58:35,599 --> 00:58:37,520
different lens

1511
00:58:37,520 --> 00:58:38,240
so

1512
00:58:38,240 --> 00:58:41,040
it means they need to

1513
00:58:41,040 --> 00:58:43,040
go actually the destination address is

1514
00:58:43,040 --> 00:58:45,680
longer it means that the

1515
00:58:45,680 --> 00:58:48,000
package should go up to the

1516
00:58:48,000 --> 00:58:50,960
upper level network so it will be

1517
00:58:50,960 --> 00:58:52,880
forward to the um

1518
00:58:52,880 --> 00:58:55,200
gateway router b first

1519
00:58:55,200 --> 00:58:58,400
so at this gateway router um the router

1520
00:58:58,400 --> 00:59:01,280
will augment the source address which is

1521
00:59:01,280 --> 00:59:04,880
the prefix stored in it which is aaa in

1522
00:59:04,880 --> 00:59:06,799
this case

1523
00:59:06,799 --> 00:59:10,000
and now the thousand destination address

1524
00:59:10,000 --> 00:59:12,160
of the steam lens

1525
00:59:12,160 --> 00:59:14,400
which means that they are in the same

1526
00:59:14,400 --> 00:59:16,880
level of network that they will forward

1527
00:59:16,880 --> 00:59:19,280
in this level and eventually it will

1528
00:59:19,280 --> 00:59:22,000
reach the uh the gateway router and of

1529
00:59:22,000 --> 00:59:24,559
another network lgre

1530
00:59:24,559 --> 00:59:26,319
so and this uh

1531
00:59:26,319 --> 00:59:27,760
this point

1532
00:59:27,760 --> 00:59:29,920
the another thing will be done by the

1533
00:59:29,920 --> 00:59:32,720
router gateway router is to prove the

1534
00:59:32,720 --> 00:59:36,000
prefix off from the

1535
00:59:36,000 --> 00:59:38,400
destination address because it's no

1536
00:59:38,400 --> 00:59:40,000
longer needed

1537
00:59:40,000 --> 00:59:42,240
so now

1538
00:59:42,240 --> 00:59:44,240
after the address destination address

1539
00:59:44,240 --> 00:59:46,880
pruning the packet will be will enter

1540
00:59:46,880 --> 00:59:48,640
this network

1541
00:59:48,640 --> 00:59:50,559
and eventually forward to its

1542
00:59:50,559 --> 00:59:52,400
destination

1543
00:59:52,400 --> 00:59:55,119
so you can see and any page in the

1544
00:59:55,119 --> 00:59:56,160
network

1545
00:59:56,160 --> 00:59:58,720
the address will be just kept as as

1546
00:59:58,720 --> 01:00:01,839
shortage as possible

1547
01:00:02,319 --> 01:00:07,359
and for interfacing with a ipv6 internet

1548
01:00:07,359 --> 01:00:09,520
we have basically have two modes to

1549
01:00:09,520 --> 01:00:12,240
support that the first we maintain a

1550
01:00:12,240 --> 01:00:15,359
special router it's just a

1551
01:00:15,359 --> 01:00:18,480
gateway router we call it ip protocol

1552
01:00:18,480 --> 01:00:20,960
translator because they need to

1553
01:00:20,960 --> 01:00:22,640
translate the header between the

1554
01:00:22,640 --> 01:00:23,760
internal

1555
01:00:23,760 --> 01:00:26,960
format and the ipv6 format

1556
01:00:26,960 --> 01:00:29,119
the the operation is also very similar

1557
01:00:29,119 --> 01:00:33,040
uh to the um uh gateway router system

1558
01:00:33,040 --> 01:00:35,119
if the packet need to enter the internet

1559
01:00:35,119 --> 01:00:37,440
we will attach the source prefix

1560
01:00:37,440 --> 01:00:41,359
if the um package enter in uh

1561
01:00:41,359 --> 01:00:44,400
will go into the azure natural network

1562
01:00:44,400 --> 01:00:47,920
will prune the destination prefix

1563
01:00:47,920 --> 01:00:50,720
and another mode is that we support uh

1564
01:00:50,720 --> 01:00:54,240
uh we can support a net gateway

1565
01:00:54,240 --> 01:00:56,960
at this point um

1566
01:00:56,960 --> 01:01:00,720
so uh we can allocate one or more public

1567
01:01:00,720 --> 01:01:04,000
ip addresses to each edge network

1568
01:01:04,000 --> 01:01:06,160
uh by doing this advantage is that the

1569
01:01:06,160 --> 01:01:08,400
internal address could have arbitrary

1570
01:01:08,400 --> 01:01:10,480
less is a doesn't necessarily

1571
01:01:10,480 --> 01:01:14,160
to be limited to by the um

1572
01:01:14,160 --> 01:01:17,359
allocated address space

1573
01:01:18,160 --> 01:01:20,960
so the benefit of scheme that is first

1574
01:01:20,960 --> 01:01:23,520
is a totally interoperable with a

1575
01:01:23,520 --> 01:01:25,200
current internet

1576
01:01:25,200 --> 01:01:27,359
and it have a significant header

1577
01:01:27,359 --> 01:01:31,520
overhead saving uh from 60 to up to 70

1578
01:01:31,520 --> 01:01:32,640
percent

1579
01:01:32,640 --> 01:01:35,920
we can further uh based on this we can

1580
01:01:35,920 --> 01:01:37,760
have some further competition

1581
01:01:37,760 --> 01:01:41,680
compression on other ipv6 header fields

1582
01:01:41,680 --> 01:01:43,440
by doing that we can

1583
01:01:43,440 --> 01:01:45,760
save even even more

1584
01:01:45,760 --> 01:01:47,119
and

1585
01:01:47,119 --> 01:01:49,920
this uh actually uh simplified both

1586
01:01:49,920 --> 01:01:52,400
control plane and the data plane because

1587
01:01:52,400 --> 01:01:56,160
we enforce a strict hierarchical network

1588
01:01:56,160 --> 01:01:58,480
architecture at the edge

1589
01:01:58,480 --> 01:02:00,480
so we can have a better address

1590
01:02:00,480 --> 01:02:02,559
aggregation and a simpler

1591
01:02:02,559 --> 01:02:05,520
router design house smaller folding

1592
01:02:05,520 --> 01:02:06,799
table

1593
01:02:06,799 --> 01:02:09,920
so we have down the p4 based prototype

1594
01:02:09,920 --> 01:02:14,079
and evaluate and it show the it's a

1595
01:02:14,079 --> 01:02:15,599
it's a very

1596
01:02:15,599 --> 01:02:16,960
promising

1597
01:02:16,960 --> 01:02:17,920
and

1598
01:02:17,920 --> 01:02:20,319
another key benefit is incrementally

1599
01:02:20,319 --> 01:02:22,480
deployable because it's a totally uh

1600
01:02:22,480 --> 01:02:25,680
transparent to the external internet and

1601
01:02:25,680 --> 01:02:28,240
they uh you can basically

1602
01:02:28,240 --> 01:02:31,039
implement this in each uh edge network

1603
01:02:31,039 --> 01:02:33,039
individually it can still

1604
01:02:33,039 --> 01:02:36,480
work within to communicate with any

1605
01:02:36,480 --> 01:02:39,680
entities in the internet

1606
01:02:39,680 --> 01:02:41,839
another key issues we want to compare

1607
01:02:41,839 --> 01:02:44,319
this with some other header compression

1608
01:02:44,319 --> 01:02:48,799
schemes um proposed by six pen and lp1

1609
01:02:48,799 --> 01:02:50,319
working groups

1610
01:02:50,319 --> 01:02:52,720
the first is ship ship we call this our

1611
01:02:52,720 --> 01:02:55,760
scheme ship is a hierarchical and

1612
01:02:55,760 --> 01:02:59,440
extending from edge to core

1613
01:02:59,440 --> 01:03:01,039
also we

1614
01:03:01,039 --> 01:03:03,680
the scheme is applicable to all kinds of

1615
01:03:03,680 --> 01:03:06,799
networks but the other proposals may be

1616
01:03:06,799 --> 01:03:09,200
limited to some specific uh network

1617
01:03:09,200 --> 01:03:10,640
environment

1618
01:03:10,640 --> 01:03:12,720
and also shape is applicable to

1619
01:03:12,720 --> 01:03:15,280
arbitrary network topology

1620
01:03:15,280 --> 01:03:17,440
unlike the other header compression

1621
01:03:17,440 --> 01:03:19,920
schemes may only applicable on the

1622
01:03:19,920 --> 01:03:22,240
point-to-point channel only

1623
01:03:22,240 --> 01:03:24,240
and also um

1624
01:03:24,240 --> 01:03:26,640
they need um

1625
01:03:26,640 --> 01:03:29,200
they need to compress the package

1626
01:03:29,200 --> 01:03:31,200
decompress package before routing the

1627
01:03:31,200 --> 01:03:33,520
package because otherwise they won't

1628
01:03:33,520 --> 01:03:35,920
recognize what it is

1629
01:03:35,920 --> 01:03:38,400
and also

1630
01:03:38,400 --> 01:03:41,760
our scheme only considers ip addresses

1631
01:03:41,760 --> 01:03:44,160
so therefore it's orthogonal to the

1632
01:03:44,160 --> 01:03:46,559
other compression scheme if you only

1633
01:03:46,559 --> 01:03:48,480
really want to use those schemes you can

1634
01:03:48,480 --> 01:03:50,400
still apply them

1635
01:03:50,400 --> 01:03:53,280
but it's just with

1636
01:03:53,280 --> 01:03:55,359
some new benefits introduced by the

1637
01:03:55,359 --> 01:03:57,680
shorter addresses

1638
01:03:57,680 --> 01:04:02,319
and also uh ship is um

1639
01:04:02,480 --> 01:04:04,799
that is a you know stateless uh in a

1640
01:04:04,799 --> 01:04:06,880
sense it doesn't need to maintain any

1641
01:04:06,880 --> 01:04:09,359
dynamic or static context

1642
01:04:09,359 --> 01:04:10,240
uh

1643
01:04:10,240 --> 01:04:12,799
between between the uh

1644
01:04:12,799 --> 01:04:15,200
the pair uh the peers uh for

1645
01:04:15,200 --> 01:04:16,640
communication

1646
01:04:16,640 --> 01:04:19,839
um therefore uh we don't need to do the

1647
01:04:19,839 --> 01:04:21,680
also don't need to do the compression

1648
01:04:21,680 --> 01:04:24,400
decreasing and don't need to store the

1649
01:04:24,400 --> 01:04:27,839
context so which save actually saves the

1650
01:04:27,839 --> 01:04:30,559
storage and the computing

1651
01:04:30,559 --> 01:04:33,440
capability of the system

1652
01:04:33,440 --> 01:04:34,960
um also

1653
01:04:34,960 --> 01:04:37,680
we allow the communication between

1654
01:04:37,680 --> 01:04:39,760
any internet addressable nodes which

1655
01:04:39,760 --> 01:04:42,640
means within networks those can directly

1656
01:04:42,640 --> 01:04:45,039
contact to talk to each other it's not

1657
01:04:45,039 --> 01:04:48,480
need to that doesn't need to go to some

1658
01:04:48,480 --> 01:04:50,079
central point

1659
01:04:50,079 --> 01:04:52,880
as a proxy

1660
01:04:52,880 --> 01:04:55,920
so this pretty much is what i have today

1661
01:04:55,920 --> 01:04:59,359
and uh we uh uh welcome collaboration

1662
01:04:59,359 --> 01:05:02,880
the any uh future work suggestions also

1663
01:05:02,880 --> 01:05:05,520
we want to get suggestions uh to find

1664
01:05:05,520 --> 01:05:08,559
the best working group to adopt this

1665
01:05:08,559 --> 01:05:09,839
work

1666
01:05:09,839 --> 01:05:13,839
thank you very much any questions

1667
01:05:20,960 --> 01:05:24,880
thank you very much uh stuart

1668
01:05:25,440 --> 01:05:27,599
uh yes

1669
01:05:27,599 --> 01:05:30,400
uh what you described sounds an awful

1670
01:05:30,400 --> 01:05:32,160
lot like

1671
01:05:32,160 --> 01:05:34,640
six slope and header compression

1672
01:05:34,640 --> 01:05:37,280
or other forms of powder compression

1673
01:05:37,280 --> 01:05:38,720
which are

1674
01:05:38,720 --> 01:05:40,160
already

1675
01:05:40,160 --> 01:05:43,359
in use in millions of products

1676
01:05:43,359 --> 01:05:44,720
worldwide

1677
01:05:44,720 --> 01:05:45,920
um

1678
01:05:45,920 --> 01:05:48,319
you had a slide i don't know what number

1679
01:05:48,319 --> 01:05:49,599
because you didn't have numbers on the

1680
01:05:49,599 --> 01:05:51,599
slides but one of the unnumbered slides

1681
01:05:51,599 --> 01:05:53,680
talked about comparisons between ship

1682
01:05:53,680 --> 01:05:55,680
and six lopan

1683
01:05:55,680 --> 01:05:57,440
that was what the title said

1684
01:05:57,440 --> 01:05:58,640
but it didn't actually have the

1685
01:05:58,640 --> 01:06:00,720
comparisons it was just a list of claims

1686
01:06:00,720 --> 01:06:02,000
about ship

1687
01:06:02,000 --> 01:06:03,359
so i think if you want to make a

1688
01:06:03,359 --> 01:06:06,000
compelling case for this

1689
01:06:06,000 --> 01:06:08,400
you need to make that comparison chart

1690
01:06:08,400 --> 01:06:11,839
that show how this new idea compares

1691
01:06:11,839 --> 01:06:13,680
with the thing that is already widely

1692
01:06:13,680 --> 01:06:16,879
deployed and successful

1693
01:06:17,039 --> 01:06:19,359
yes thank you for the suggestion uh yeah

1694
01:06:19,359 --> 01:06:22,480
in the next revision i plan to add this

1695
01:06:22,480 --> 01:06:26,160
comparation yeah thank you

1696
01:06:26,350 --> 01:06:28,240
[Music]

1697
01:06:28,240 --> 01:06:32,439
okay thanks uh dave

1698
01:06:34,000 --> 01:06:36,079
put this into the chat but in terms of

1699
01:06:36,079 --> 01:06:38,000
uh your last bullet i think was

1700
01:06:38,000 --> 01:06:40,480
something like find the best place to

1701
01:06:40,480 --> 01:06:42,240
adopt the work or some phrasing like

1702
01:06:42,240 --> 01:06:44,480
that and i just wanted to say that i

1703
01:06:44,480 --> 01:06:46,799
think the best place for this discussion

1704
01:06:46,799 --> 01:06:49,359
is in the six slow working group right

1705
01:06:49,359 --> 01:06:50,880
which does more than just the header

1706
01:06:50,880 --> 01:06:52,319
compression scheme that you're talking

1707
01:06:52,319 --> 01:06:54,160
about right they do over any particular

1708
01:06:54,160 --> 01:06:55,920
link type and so there's

1709
01:06:55,920 --> 01:06:57,680
multiple different link types there not

1710
01:06:57,680 --> 01:07:00,160
just 802.15 that was on your slide and

1711
01:07:00,160 --> 01:07:01,599
so i think that's probably where it's

1712
01:07:01,599 --> 01:07:03,359
their right expertise is because that's

1713
01:07:03,359 --> 01:07:05,200
the group that reviews you know

1714
01:07:05,200 --> 01:07:08,000
compression e-lighting fears fields and

1715
01:07:08,000 --> 01:07:10,240
various formats and short addresses and

1716
01:07:10,240 --> 01:07:11,520
all that kind of stuff is in scope for

1717
01:07:11,520 --> 01:07:13,920
that so my recommendation is that

1718
01:07:13,920 --> 01:07:16,319
this proposal just gets dispatched over

1719
01:07:16,319 --> 01:07:20,520
the six slow working group to evaluate

1720
01:07:29,440 --> 01:07:31,200
all right okay

1721
01:07:31,200 --> 01:07:33,520
okay

1722
01:07:36,079 --> 01:07:39,119
this is um i was the author looked at

1723
01:07:39,119 --> 01:07:41,119
uh thread because i think they do

1724
01:07:41,119 --> 01:07:42,799
something fairly similar in terms of the

1725
01:07:42,799 --> 01:07:44,240
way they do routing

1726
01:07:44,240 --> 01:07:46,240
um and it would be worthwhile to make

1727
01:07:46,240 --> 01:07:48,160
sure that there isn't some

1728
01:07:48,160 --> 01:07:49,760
you know reinvention of the wheel going

1729
01:07:49,760 --> 01:07:51,760
on here of course threat is not an itf

1730
01:07:51,760 --> 01:07:53,119
protocol so

1731
01:07:53,119 --> 01:07:55,200
there's that whole issue but um

1732
01:07:55,200 --> 01:07:56,960
but at the very least i think it'd be

1733
01:07:56,960 --> 01:07:58,799
worth investigating

1734
01:07:58,799 --> 01:08:02,920
whether there is overlap there

1735
01:08:05,230 --> 01:08:09,960
[Music]

1736
01:08:10,240 --> 01:08:12,960
all right uh

1737
01:08:12,960 --> 01:08:15,200
stuart do you have a question or was

1738
01:08:15,200 --> 01:08:18,080
that from the previous

1739
01:08:22,719 --> 01:08:25,719
okay

1740
01:08:33,279 --> 01:08:34,880
all right thank you very much everyone

1741
01:08:34,880 --> 01:08:35,759
so

1742
01:08:35,759 --> 01:08:39,839
we can move to delhi

1743
01:08:55,040 --> 01:08:58,238
hello can you hear me

1744
01:08:58,479 --> 01:09:00,479
we can hear you

1745
01:09:00,479 --> 01:09:02,399
you can try again to share your thing

1746
01:09:02,399 --> 01:09:06,399
i'm trying to ask you to share slides

1747
01:09:06,399 --> 01:09:07,759
okay

1748
01:09:07,759 --> 01:09:09,520
we're approving you just give it a

1749
01:09:09,520 --> 01:09:12,399
couple of seconds

1750
01:09:12,399 --> 01:09:16,399
oh i cannot choose to see here

1751
01:09:16,399 --> 01:09:21,000
just wait wait a second see

1752
01:09:29,198 --> 01:09:30,799
you can request to share your screen and

1753
01:09:30,799 --> 01:09:32,640
then just give it a couple of seconds

1754
01:09:32,640 --> 01:09:35,359
okay i can share my screen

1755
01:09:35,359 --> 01:09:37,520
yes

1756
01:09:40,799 --> 01:09:43,600
just wait a second

1757
01:09:46,238 --> 01:09:49,238
yep

1758
01:09:50,880 --> 01:09:53,920
can you see my screen

1759
01:09:58,320 --> 01:10:00,560
okay

1760
01:10:00,560 --> 01:10:03,199
hello everyone i'm lanchantin from

1761
01:10:03,199 --> 01:10:06,239
qinghua university i'm going to present

1762
01:10:06,239 --> 01:10:09,679
our draft source address validation

1763
01:10:09,679 --> 01:10:13,760
use cases and gap analysis

1764
01:10:14,719 --> 01:10:17,280
the traditional internet architecture

1765
01:10:17,280 --> 01:10:20,159
lacks the validation of a package source

1766
01:10:20,159 --> 01:10:21,199
address

1767
01:10:21,199 --> 01:10:24,400
a sender can search the source address

1768
01:10:24,400 --> 01:10:26,159
when sending packets

1769
01:10:26,159 --> 01:10:28,960
which is also known as source address

1770
01:10:28,960 --> 01:10:30,480
spoofing

1771
01:10:30,480 --> 01:10:33,280
with source address spoofing attackers

1772
01:10:33,280 --> 01:10:36,800
can carry various attacks such as

1773
01:10:36,800 --> 01:10:39,120
reflective details

1774
01:10:39,120 --> 01:10:39,920
so

1775
01:10:39,920 --> 01:10:42,840
source address validation save is

1776
01:10:42,840 --> 01:10:46,800
necessary mutually agreed not for

1777
01:10:46,800 --> 01:10:49,120
rotting security manners

1778
01:10:49,120 --> 01:10:51,840
is calling a network operators to

1779
01:10:51,840 --> 01:10:54,080
implement save

1780
01:10:54,080 --> 01:10:55,199
however

1781
01:10:55,199 --> 01:10:57,120
it's difficult to solve

1782
01:10:57,120 --> 01:11:00,000
the source address spoofing problem at a

1783
01:11:00,000 --> 01:11:02,719
single level or through a single save

1784
01:11:02,719 --> 01:11:04,080
mechanism

1785
01:11:04,080 --> 01:11:04,960
first

1786
01:11:04,960 --> 01:11:08,000
it's unrealistic to require a sim c to

1787
01:11:08,000 --> 01:11:10,880
be accepted by all networks

1788
01:11:10,880 --> 01:11:13,920
second the feeling of a single save

1789
01:11:13,920 --> 01:11:18,719
mechanism will completely disable save

1790
01:11:18,719 --> 01:11:20,159
therefore

1791
01:11:20,159 --> 01:11:22,880
source address validation architecture

1792
01:11:22,880 --> 01:11:24,000
server

1793
01:11:24,000 --> 01:11:27,360
divides save into three checking levels

1794
01:11:27,360 --> 01:11:29,360
and miners also follows this

1795
01:11:29,360 --> 01:11:30,800
architecture

1796
01:11:30,800 --> 01:11:31,840
they are

1797
01:11:31,840 --> 01:11:35,760
access network save intro asc and intel

1798
01:11:35,760 --> 01:11:37,280
asc

1799
01:11:37,280 --> 01:11:39,520
there are many saving mechanisms for

1800
01:11:39,520 --> 01:11:41,840
different checking levels

1801
01:11:41,840 --> 01:11:44,480
for the access network sieve

1802
01:11:44,480 --> 01:11:48,800
savvy was proposed to force each host to

1803
01:11:48,800 --> 01:11:51,679
use legitimate source address

1804
01:11:51,679 --> 01:11:54,080
although it provides a host level

1805
01:11:54,080 --> 01:11:55,280
variation

1806
01:11:55,280 --> 01:11:58,960
is fully effective only when deployed by

1807
01:11:58,960 --> 01:12:01,679
all access networks

1808
01:12:01,679 --> 01:12:04,560
it's difficult to require all net access

1809
01:12:04,560 --> 01:12:06,840
networks to deploy sally

1810
01:12:06,840 --> 01:12:08,480
simultaneously

1811
01:12:08,480 --> 01:12:12,400
so intro asc and inter esc

1812
01:12:12,400 --> 01:12:16,719
are more encouraged by manners

1813
01:12:17,520 --> 01:12:20,960
the left figure shows the use cases of

1814
01:12:20,960 --> 01:12:24,400
intro es and into esc

1815
01:12:24,400 --> 01:12:25,679
the four

1816
01:12:25,679 --> 01:12:29,280
aces belong to the same customer code

1817
01:12:29,280 --> 01:12:30,800
and as1

1818
01:12:30,800 --> 01:12:33,120
is the stack es

1819
01:12:33,120 --> 01:12:36,880
the topology of s2 is presented while

1820
01:12:36,880 --> 01:12:39,760
other it says inner structures hidden

1821
01:12:39,760 --> 01:12:42,080
from priority

1822
01:12:42,080 --> 01:12:45,440
p1 is the source address prefix of

1823
01:12:45,440 --> 01:12:47,120
router 3.

1824
01:12:47,120 --> 01:12:51,360
p1 apostrophe is the spoofed p1 by

1825
01:12:51,360 --> 01:12:54,880
router 2 p1 double apostrophe is the

1826
01:12:54,880 --> 01:12:59,920
spoofed p1 by routers in af3

1827
01:12:59,920 --> 01:13:01,520
intro asc

1828
01:13:01,520 --> 01:13:02,560
was

1829
01:13:02,560 --> 01:13:04,080
source address

1830
01:13:04,080 --> 01:13:07,760
source address spoofing from inneres

1831
01:13:07,760 --> 01:13:11,280
router 1 and router 4 should drop the

1832
01:13:11,280 --> 01:13:14,719
package with p1 apostrophe

1833
01:13:14,719 --> 01:13:18,400
from router 2 while except the packet is

1834
01:13:18,400 --> 01:13:21,920
p1 from router 3.

1835
01:13:21,920 --> 01:13:25,520
for inter escape it aims to avoid

1836
01:13:25,520 --> 01:13:28,960
spoofing from external aces

1837
01:13:28,960 --> 01:13:33,360
as1 and as4 should drop the package with

1838
01:13:33,360 --> 01:13:37,199
p1 double apostrophe from es3

1839
01:13:37,199 --> 01:13:40,960
while accept the package with p1 from

1840
01:13:40,960 --> 01:13:43,679
es2

1841
01:13:44,719 --> 01:13:47,840
as iso8704

1842
01:13:47,840 --> 01:13:49,920
summarizes the recommendations

1843
01:13:49,920 --> 01:13:52,640
concerning save mechanisms

1844
01:13:52,640 --> 01:13:56,880
for intra-essay ac air based receive and

1845
01:13:56,880 --> 01:13:58,960
strict urpf

1846
01:13:58,960 --> 01:14:00,880
are recommended

1847
01:14:00,880 --> 01:14:03,600
acr based receive configures matching

1848
01:14:03,600 --> 01:14:07,199
rules to specify which source prefixes

1849
01:14:07,199 --> 01:14:10,159
are acceptable but it requires manual

1850
01:14:10,159 --> 01:14:13,040
configurations to update

1851
01:14:13,040 --> 01:14:17,040
strict uipf takes the source address as

1852
01:14:17,040 --> 01:14:19,840
a destination address to look up the

1853
01:14:19,840 --> 01:14:20,800
field

1854
01:14:20,800 --> 01:14:23,840
and requires the forwarding interface of

1855
01:14:23,840 --> 01:14:27,440
the fib matches the incoming interface

1856
01:14:27,440 --> 01:14:29,600
of the packet

1857
01:14:29,600 --> 01:14:32,000
for intel es sale

1858
01:14:32,000 --> 01:14:34,080
efp urps

1859
01:14:34,080 --> 01:14:36,640
is recommended to be deployed at

1860
01:14:36,640 --> 01:14:38,880
customer interfaces

1861
01:14:38,880 --> 01:14:42,880
it maintains a rpf list at each customer

1862
01:14:42,880 --> 01:14:44,159
interface

1863
01:14:44,159 --> 01:14:48,000
while loose urpf is recommended to be

1864
01:14:48,000 --> 01:14:51,920
deployed at provider and peer interfaces

1865
01:14:51,920 --> 01:14:54,800
it only requires the source address

1866
01:14:54,800 --> 01:14:56,800
appears in the field

1867
01:14:56,800 --> 01:14:58,000
however

1868
01:14:58,000 --> 01:15:01,199
existing intro and inter es

1869
01:15:01,199 --> 01:15:03,840
save mechanisms have inherent false

1870
01:15:03,840 --> 01:15:09,320
positive or false negative problems

1871
01:15:10,960 --> 01:15:15,120
strict urpf xcbs force positive in the

1872
01:15:15,120 --> 01:15:17,120
case of router

1873
01:15:17,120 --> 01:15:18,719
asymmetry

1874
01:15:18,719 --> 01:15:22,159
the left figure shows an example

1875
01:15:22,159 --> 01:15:25,760
the access network owns a prefix

1876
01:15:25,760 --> 01:15:29,199
due to traffic policy it splits the

1877
01:15:29,199 --> 01:15:32,400
prefix into two sub prefixes

1878
01:15:32,400 --> 01:15:35,760
it advertises one sub prefix to router

1879
01:15:35,760 --> 01:15:39,280
one and the answer to router 2

1880
01:15:39,280 --> 01:15:41,920
when router 3 forwards package to

1881
01:15:41,920 --> 01:15:44,780
10.1.0.0.16

1882
01:15:44,780 --> 01:15:47,760
[Music]

1883
01:15:47,760 --> 01:15:50,080
the forwarding path is

1884
01:15:50,080 --> 01:15:51,600
router 3

1885
01:15:51,600 --> 01:15:53,120
router 4

1886
01:15:53,120 --> 01:15:57,120
router 2 and access network

1887
01:15:57,120 --> 01:16:01,040
the reverse path is access network

1888
01:16:01,040 --> 01:16:04,480
router 1 and router 3.

1889
01:16:04,480 --> 01:16:05,760
in this case

1890
01:16:05,760 --> 01:16:09,440
when router 3 runs straight to uipf

1891
01:16:09,440 --> 01:16:11,600
the same rule is

1892
01:16:11,600 --> 01:16:12,719
packaged

1893
01:16:12,719 --> 01:16:17,800
with source addresses of 10.1.0.0.16

1894
01:16:18,960 --> 01:16:21,600
must arrive from router 4

1895
01:16:21,600 --> 01:16:24,320
therefore the reverse data flow will be

1896
01:16:24,320 --> 01:16:25,520
dropped

1897
01:16:25,520 --> 01:16:29,440
in general existing intra-esc mechanism

1898
01:16:29,440 --> 01:16:33,879
has false positive problems

1899
01:16:34,400 --> 01:16:37,120
for intel asc mechanisms

1900
01:16:37,120 --> 01:16:41,040
esp urpf and loose uips have inherent

1901
01:16:41,040 --> 01:16:43,520
force negative problems

1902
01:16:43,520 --> 01:16:47,760
we take es4 as an example

1903
01:16:47,760 --> 01:16:53,120
is is provider and as3 is is peer as1

1904
01:16:53,120 --> 01:16:56,880
and s2 are its customers

1905
01:16:56,880 --> 01:16:58,960
when as4 runs

1906
01:16:58,960 --> 01:17:02,880
efp uips at customer interfaces

1907
01:17:02,880 --> 01:17:05,199
the sale rule is

1908
01:17:05,199 --> 01:17:08,400
packaged with source addresses belonging

1909
01:17:08,400 --> 01:17:11,679
to as4's customer coin can arrive from

1910
01:17:11,679 --> 01:17:13,280
every customer

1911
01:17:13,280 --> 01:17:16,960
so it says in as4 customer coin convert

1912
01:17:16,960 --> 01:17:18,880
each other

1913
01:17:18,880 --> 01:17:20,480
when as4

1914
01:17:20,480 --> 01:17:22,800
runs moves uips

1915
01:17:22,800 --> 01:17:26,080
at provider and peer interfaces

1916
01:17:26,080 --> 01:17:28,239
the received rule is

1917
01:17:28,239 --> 01:17:31,120
packaged with any source addresses

1918
01:17:31,120 --> 01:17:34,560
existing in fib can arrive from every

1919
01:17:34,560 --> 01:17:37,280
provider or peer

1920
01:17:37,280 --> 01:17:40,719
so it says outside es4's customer coin

1921
01:17:40,719 --> 01:17:44,320
can force any source address in save in

1922
01:17:44,320 --> 01:17:45,760
general

1923
01:17:45,760 --> 01:17:49,199
existing intel es sale mechanisms have

1924
01:17:49,199 --> 01:17:52,719
forced negative problems

1925
01:17:56,159 --> 01:17:59,199
an ideal save mechanism should guarantee

1926
01:17:59,199 --> 01:18:00,480
accuracy

1927
01:18:00,480 --> 01:18:03,440
because false positives cause traffic

1928
01:18:03,440 --> 01:18:04,960
disruption

1929
01:18:04,960 --> 01:18:08,000
while false negatives give attackers the

1930
01:18:08,000 --> 01:18:11,600
freedom to force source addresses

1931
01:18:11,600 --> 01:18:13,120
however

1932
01:18:13,120 --> 01:18:14,800
as a function

1933
01:18:14,800 --> 01:18:17,360
existing save mechanisms cannot

1934
01:18:17,360 --> 01:18:19,360
guarantee accuracy

1935
01:18:19,360 --> 01:18:21,120
intra-assay

1936
01:18:21,120 --> 01:18:24,480
mechanisms have false positive problems

1937
01:18:24,480 --> 01:18:27,520
and interact mechanisms have forced

1938
01:18:27,520 --> 01:18:30,159
negative problems

1939
01:18:30,159 --> 01:18:33,520
the root cause of their inaccuracy is

1940
01:18:33,520 --> 01:18:35,920
that they are achieve c

1941
01:18:35,920 --> 01:18:39,280
based on local fib or rib information

1942
01:18:39,280 --> 01:18:41,679
which may not match the real data

1943
01:18:41,679 --> 01:18:46,080
forwarding path from other sources

1944
01:18:46,400 --> 01:18:49,840
in order to avoid false positives and

1945
01:18:49,840 --> 01:18:50,880
reduce

1946
01:18:50,880 --> 01:18:54,400
false negatives as much as possible save

1947
01:18:54,400 --> 01:18:56,960
should follow the real data forwarding

1948
01:18:56,960 --> 01:18:57,840
path

1949
01:18:57,840 --> 01:19:01,040
to this end a path probably method can

1950
01:19:01,040 --> 01:19:02,640
be taken

1951
01:19:02,640 --> 01:19:03,760
that is

1952
01:19:03,760 --> 01:19:07,040
the source router since probing packets

1953
01:19:07,040 --> 01:19:09,600
carrying source information

1954
01:19:09,600 --> 01:19:11,520
then each each

1955
01:19:11,520 --> 01:19:14,239
intermediate router can generate saved

1956
01:19:14,239 --> 01:19:17,120
rules based on source information and

1957
01:19:17,120 --> 01:19:19,040
incoming interface

1958
01:19:19,040 --> 01:19:22,400
more specifically when interfaces cannot

1959
01:19:22,400 --> 01:19:25,440
learn complete forwarding information

1960
01:19:25,440 --> 01:19:28,960
a combination of a log list and block

1961
01:19:28,960 --> 01:19:32,159
list can improve the accuracy

1962
01:19:32,159 --> 01:19:33,840
besides

1963
01:19:33,840 --> 01:19:36,800
designing a practical probing method

1964
01:19:36,800 --> 01:19:40,480
needs to consider many practical issues

1965
01:19:40,480 --> 01:19:43,199
such as high scalability

1966
01:19:43,199 --> 01:19:46,800
the design should not induce much much

1967
01:19:46,800 --> 01:19:48,400
overhead

1968
01:19:48,400 --> 01:19:50,800
and high deplorability

1969
01:19:50,800 --> 01:19:53,440
the design should generate save table

1970
01:19:53,440 --> 01:19:56,080
automatically and support incremental

1971
01:19:56,080 --> 01:19:57,920
deployment

1972
01:19:57,920 --> 01:20:00,080
and higher security

1973
01:20:00,080 --> 01:20:02,400
the design should guarantee

1974
01:20:02,400 --> 01:20:07,120
the integrity of each problem package

1975
01:20:08,239 --> 01:20:09,120
so

1976
01:20:09,120 --> 01:20:12,320
we have to promote our work

1977
01:20:12,320 --> 01:20:13,920
we have three

1978
01:20:13,920 --> 01:20:15,920
candle desks

1979
01:20:15,920 --> 01:20:18,480
one is in the area

1980
01:20:18,480 --> 01:20:21,760
since sarwa and savvy are adopted by

1981
01:20:21,760 --> 01:20:23,440
inter area

1982
01:20:23,440 --> 01:20:25,760
or rtg

1983
01:20:25,760 --> 01:20:30,000
because intro esp and the intel esl are

1984
01:20:30,000 --> 01:20:32,639
related to routine

1985
01:20:32,639 --> 01:20:34,800
or opseg

1986
01:20:34,800 --> 01:20:40,159
since efp urps is adopted by opseg

1987
01:20:40,159 --> 01:20:42,560
or others

1988
01:20:42,560 --> 01:20:44,880
we sincerely solicit

1989
01:20:44,880 --> 01:20:48,880
comments to refine the draft and seek

1990
01:20:48,880 --> 01:20:51,760
collaborators

1991
01:20:52,400 --> 01:20:53,280
thanks

1992
01:20:53,280 --> 01:20:57,239
any questions or comments

1993
01:21:02,800 --> 01:21:03,520
uh

1994
01:21:03,520 --> 01:21:05,920
eric

1995
01:21:12,159 --> 01:21:15,120
working group uh is the best one

1996
01:21:15,120 --> 01:21:17,679
i think for this opsec

1997
01:21:17,679 --> 01:21:20,800
personal security is mostly the best one

1998
01:21:20,800 --> 01:21:23,679
um i know that jen is in the the

1999
01:21:23,679 --> 01:21:25,760
participants of this meeting so jen as

2000
01:21:25,760 --> 01:21:27,199
you are the co-chair of opsec is not

2001
01:21:27,199 --> 01:21:28,960
mistaken you may want to say a few words

2002
01:21:28,960 --> 01:21:32,040
on this

2003
01:21:46,800 --> 01:21:47,679
now

2004
01:21:47,679 --> 01:21:50,800
jen we cannot hear you

2005
01:21:52,800 --> 01:21:57,000
upset is not meeting this

2006
01:21:57,280 --> 01:21:58,639
but yeah

2007
01:21:58,639 --> 01:22:00,880
please drop the chair said email yeah

2008
01:22:00,880 --> 01:22:02,880
and we can put you on agenda for the

2009
01:22:02,880 --> 01:22:03,840
next

2010
01:22:03,840 --> 01:22:06,840
meeting

2011
01:22:19,600 --> 01:22:20,719
great

2012
01:22:20,719 --> 01:22:22,239
thank you very much

2013
01:22:22,239 --> 01:22:23,520
so if there are no more questions then

2014
01:22:23,520 --> 01:22:26,719
we can move to 30s

2015
01:22:30,639 --> 01:22:32,639
you can either share your screen or use

2016
01:22:32,639 --> 01:22:36,440
the slides okay

2017
01:22:48,080 --> 01:22:49,600
hi

2018
01:22:49,600 --> 01:22:51,199
yeah um

2019
01:22:51,199 --> 01:22:52,719
oh no wait a second that's the wrong

2020
01:22:52,719 --> 01:22:54,000
slides

2021
01:22:54,000 --> 01:22:56,400
oops

2022
01:23:03,440 --> 01:23:06,440
um

2023
01:23:06,719 --> 01:23:10,400
i don't see my slides uploaded

2024
01:23:18,400 --> 01:23:19,280
okay

2025
01:23:19,280 --> 01:23:21,199
do you want to

2026
01:23:21,199 --> 01:23:25,280
share your screen i think we uploaded it

2027
01:23:25,440 --> 01:23:26,960
you sent us

2028
01:23:26,960 --> 01:23:30,520
just before the meeting

2029
01:23:40,560 --> 01:23:42,320
all right i hope the slides are showing

2030
01:23:42,320 --> 01:23:44,480
up

2031
01:23:45,120 --> 01:23:48,320
we can see

2032
01:23:48,320 --> 01:23:50,080
all right so um

2033
01:23:50,080 --> 01:23:53,199
a mouthful of a title um so i wanted to

2034
01:23:53,199 --> 01:23:54,960
present this um

2035
01:23:54,960 --> 01:23:57,679
i wrote this draft on behalf of a design

2036
01:23:57,679 --> 01:23:58,880
from

2037
01:23:58,880 --> 01:24:00,960
a team of colleagues

2038
01:24:00,960 --> 01:24:03,600
because it is um you know a really great

2039
01:24:03,600 --> 01:24:07,520
um evolution of um brte in my opinion um

2040
01:24:07,520 --> 01:24:10,880
why going to end area well so i think um

2041
01:24:10,880 --> 01:24:13,760
what i wanted like to explain here is is

2042
01:24:13,760 --> 01:24:15,440
what i think is a great example of a

2043
01:24:15,440 --> 01:24:16,400
story on

2044
01:24:16,400 --> 01:24:18,639
um more intelligent variable length

2045
01:24:18,639 --> 01:24:20,800
addressing helps to solve you know

2046
01:24:20,800 --> 01:24:22,639
problems that we're currently working on

2047
01:24:22,639 --> 01:24:24,080
in a better fashion

2048
01:24:24,080 --> 01:24:25,360
um

2049
01:24:25,360 --> 01:24:28,880
and uh yeah so i i i hope it area is not

2050
01:24:28,880 --> 01:24:31,360
for unicast only obviously

2051
01:24:31,360 --> 01:24:33,520
the target group for this would be beer

2052
01:24:33,520 --> 01:24:34,239
but

2053
01:24:34,239 --> 01:24:36,080
i wanted to you know show it from the

2054
01:24:36,080 --> 01:24:37,840
addressing perspective

2055
01:24:37,840 --> 01:24:40,320
so um what's wrong with brte that's a

2056
01:24:40,320 --> 01:24:41,840
great question to ask when you have a

2057
01:24:41,840 --> 01:24:44,639
draft in isg review but it is you know

2058
01:24:44,639 --> 01:24:46,159
in my opinion the best multicast

2059
01:24:46,159 --> 01:24:48,320
forwarding solution for the constraints

2060
01:24:48,320 --> 01:24:51,040
it was defined against and that is um

2061
01:24:51,040 --> 01:24:53,199
that we wanted to add

2062
01:24:53,199 --> 01:24:56,000
path steering to the beer multicast

2063
01:24:56,000 --> 01:24:59,040
solution which is stateless

2064
01:24:59,040 --> 01:25:00,239
and we

2065
01:25:00,239 --> 01:25:02,239
wanted to keep

2066
01:25:02,239 --> 01:25:04,000
pretty much everything in the forwarding

2067
01:25:04,000 --> 01:25:06,480
plane that we defined with beer with

2068
01:25:06,480 --> 01:25:08,560
brte and so

2069
01:25:08,560 --> 01:25:10,960
try to make only the minimum

2070
01:25:10,960 --> 01:25:13,280
necessary changes in the forwarding

2071
01:25:13,280 --> 01:25:15,440
plane to enable the uh the traffic

2072
01:25:15,440 --> 01:25:17,920
steering um and so in that respect it's

2073
01:25:17,920 --> 01:25:20,320
a little bit similar from um how you

2074
01:25:20,320 --> 01:25:23,600
know we did uh traffic engineering um

2075
01:25:23,600 --> 01:25:24,840
in

2076
01:25:24,840 --> 01:25:26,400
mpls

2077
01:25:26,400 --> 01:25:28,560
after we had the non

2078
01:25:28,560 --> 01:25:30,960
traffic engineering forwarding solution

2079
01:25:30,960 --> 01:25:31,840
but

2080
01:25:31,840 --> 01:25:34,320
this comes at you know quite a good

2081
01:25:34,320 --> 01:25:36,239
amount of undesirable limitation

2082
01:25:36,239 --> 01:25:39,040
complexities which you know i saw

2083
01:25:39,040 --> 01:25:41,280
especially working through

2084
01:25:41,280 --> 01:25:42,560
the brte

2085
01:25:42,560 --> 01:25:43,520
draft

2086
01:25:43,520 --> 01:25:47,120
and that is that by representing um the

2087
01:25:47,120 --> 01:25:50,239
forwarding through a flat fixed size bit

2088
01:25:50,239 --> 01:25:52,800
string of you know pre-configurable

2089
01:25:52,800 --> 01:25:54,880
length you're getting yourself into a

2090
01:25:54,880 --> 01:25:56,960
lot of limitations

2091
01:25:56,960 --> 01:25:59,040
and

2092
01:25:59,040 --> 01:26:01,840
the the number of bits is is also split

2093
01:26:01,840 --> 01:26:03,760
between the receiver notes and the

2094
01:26:03,760 --> 01:26:06,159
topology notes so to speak

2095
01:26:06,159 --> 01:26:07,920
so without going into a lot of details

2096
01:26:07,920 --> 01:26:10,400
of something um about brt that many

2097
01:26:10,400 --> 01:26:12,320
people here may not know because they

2098
01:26:12,320 --> 01:26:15,280
haven't looked at it um what what we've

2099
01:26:15,280 --> 01:26:17,760
pretty much done is we have you know

2100
01:26:17,760 --> 01:26:19,760
started with you know a fixed forwarding

2101
01:26:19,760 --> 01:26:22,560
plane design and ended up with a lot of

2102
01:26:22,560 --> 01:26:25,520
additional controller operational um

2103
01:26:25,520 --> 01:26:28,639
complexity less traffic efficiency

2104
01:26:28,639 --> 01:26:31,280
but yeah we we got the forwarding plane

2105
01:26:31,280 --> 01:26:33,600
simplicity of what we've started uh with

2106
01:26:33,600 --> 01:26:36,719
beer so now let's see what we can

2107
01:26:36,719 --> 01:26:39,120
do better if we you know think that we

2108
01:26:39,120 --> 01:26:41,600
can build a more flexible um forwarding

2109
01:26:41,600 --> 01:26:43,840
plane functionality the

2110
01:26:43,840 --> 01:26:45,600
and and the and the goal and that's kind

2111
01:26:45,600 --> 01:26:47,760
of the the first part of the name is to

2112
01:26:47,760 --> 01:26:49,679
really come up ultimately with a

2113
01:26:49,679 --> 01:26:52,880
solution that supports multicast in for

2114
01:26:52,880 --> 01:26:55,600
example service provider or industrial

2115
01:26:55,600 --> 01:26:58,000
large-scale networks

2116
01:26:58,000 --> 01:27:00,480
in a more simple fashion than current ip

2117
01:27:00,480 --> 01:27:02,719
multicast

2118
01:27:02,719 --> 01:27:04,880
with all the good traffic engineering

2119
01:27:04,880 --> 01:27:07,280
what we want um the traffic steering and

2120
01:27:07,280 --> 01:27:09,760
then of course there is correlated um

2121
01:27:09,760 --> 01:27:11,920
you know qs and other things so it's a

2122
01:27:11,920 --> 01:27:14,560
controller-based design um and uh this

2123
01:27:14,560 --> 01:27:16,560
is just you know i'm going to skip for

2124
01:27:16,560 --> 01:27:18,800
the details so here is basically the

2125
01:27:18,800 --> 01:27:20,960
addressing structure

2126
01:27:20,960 --> 01:27:23,199
that we're calling recursive bit string

2127
01:27:23,199 --> 01:27:24,480
structure

2128
01:27:24,480 --> 01:27:26,719
and what it really is is

2129
01:27:26,719 --> 01:27:29,520
a representation of the desired delivery

2130
01:27:29,520 --> 01:27:32,639
tree where for every node you have a bit

2131
01:27:32,639 --> 01:27:36,320
string of pretty much um the the bit

2132
01:27:36,320 --> 01:27:40,239
string itself is just the sequence of

2133
01:27:40,239 --> 01:27:43,280
adjacencies meaning neighbors that that

2134
01:27:43,280 --> 01:27:45,679
particular router has one bit for each

2135
01:27:45,679 --> 01:27:48,000
and the bit string in the packet

2136
01:27:48,000 --> 01:27:51,040
has the bits set to the neighbors where

2137
01:27:51,040 --> 01:27:54,080
packets need to be sent to and then

2138
01:27:54,080 --> 01:27:54,960
for

2139
01:27:54,960 --> 01:27:57,120
each of the bits that are going to an

2140
01:27:57,120 --> 01:27:59,600
adjacent router there is another

2141
01:27:59,600 --> 01:28:02,320
recursive unit that is

2142
01:28:02,320 --> 01:28:04,080
starting with a bit string and then

2143
01:28:04,080 --> 01:28:06,159
again of course with the recursive units

2144
01:28:06,159 --> 01:28:08,320
to that you know neighbors neighbors

2145
01:28:08,320 --> 01:28:09,520
again

2146
01:28:09,520 --> 01:28:12,159
and so the fields that we need for that

2147
01:28:12,159 --> 01:28:14,480
obviously some starting fields that tell

2148
01:28:14,480 --> 01:28:16,239
the total length

2149
01:28:16,239 --> 01:28:16,960
of

2150
01:28:16,960 --> 01:28:19,760
the address structure and then the

2151
01:28:19,760 --> 01:28:22,480
length of all the recursive units after

2152
01:28:22,480 --> 01:28:24,320
the bit string and of course each

2153
01:28:24,320 --> 01:28:27,120
recursive unit itself has again the same

2154
01:28:27,120 --> 01:28:29,199
structural elements

2155
01:28:29,199 --> 01:28:30,960
so here is without trying to walk

2156
01:28:30,960 --> 01:28:33,440
through it in full and glory detail

2157
01:28:33,440 --> 01:28:36,639
the uh example that is also in the draft

2158
01:28:36,639 --> 01:28:39,679
um and that shows how you're starting

2159
01:28:39,679 --> 01:28:42,560
out with a packet originated by client

2160
01:28:42,560 --> 01:28:45,360
one which has such a recursive bit

2161
01:28:45,360 --> 01:28:46,639
string

2162
01:28:46,639 --> 01:28:48,639
address and when you then see what

2163
01:28:48,639 --> 01:28:51,840
happens on router r um then you'll see

2164
01:28:51,840 --> 01:28:54,639
that uh when it's uh being uh

2165
01:28:54,639 --> 01:28:56,960
sorry on on router b when it's forwarded

2166
01:28:56,960 --> 01:28:59,679
to router r you already see that uh

2167
01:28:59,679 --> 01:29:02,239
you're forwarding only the extracted

2168
01:29:02,239 --> 01:29:05,360
part of the recursive bit string address

2169
01:29:05,360 --> 01:29:07,280
which is the recursive bit string

2170
01:29:07,280 --> 01:29:09,600
address for b and b of course does the

2171
01:29:09,600 --> 01:29:12,480
same thing sorry to r and r does the

2172
01:29:12,480 --> 01:29:13,440
same thing

2173
01:29:13,440 --> 01:29:16,480
forwarding to s and e so the further

2174
01:29:16,480 --> 01:29:18,480
the packet progresses through the

2175
01:29:18,480 --> 01:29:20,719
delivery tree the smaller the address

2176
01:29:20,719 --> 01:29:23,120
becomes

2177
01:29:23,199 --> 01:29:25,360
so what what type of simplification

2178
01:29:25,360 --> 01:29:27,040
performance enhancement do we get

2179
01:29:27,040 --> 01:29:28,719
through all of this right so first of

2180
01:29:28,719 --> 01:29:31,840
all we forego the uh whole forwarding

2181
01:29:31,840 --> 01:29:33,760
aspect that we needed to do loop

2182
01:29:33,760 --> 01:29:35,520
prevention because by you know the

2183
01:29:35,520 --> 01:29:37,840
address becoming shorter and shorter um

2184
01:29:37,840 --> 01:29:40,159
we're having an equivalent of clearing

2185
01:29:40,159 --> 01:29:43,760
bits to avoid those loops um

2186
01:29:43,760 --> 01:29:44,800
there is

2187
01:29:44,800 --> 01:29:47,120
and that's i think one of the biggest uh

2188
01:29:47,120 --> 01:29:49,920
problems uh that we have in bte but also

2189
01:29:49,920 --> 01:29:52,560
in in to a lesser extent in beer there

2190
01:29:52,560 --> 01:29:54,239
is no need to split up the whole

2191
01:29:54,239 --> 01:29:57,520
topology into uh subsets of the topology

2192
01:29:57,520 --> 01:30:00,719
to um fit all the adjacencies and end

2193
01:30:00,719 --> 01:30:04,080
nodes into a fixed size a bit string of

2194
01:30:04,080 --> 01:30:05,760
of n bits where you know the whole

2195
01:30:05,760 --> 01:30:09,280
topology would maybe need uh 20 times

2196
01:30:09,280 --> 01:30:10,159
n

2197
01:30:10,159 --> 01:30:11,360
right um

2198
01:30:11,360 --> 01:30:13,280
and

2199
01:30:13,280 --> 01:30:16,320
that also means for brte then that the

2200
01:30:16,320 --> 01:30:19,199
need to optimize minimize the number of

2201
01:30:19,199 --> 01:30:21,199
bits for the topology

2202
01:30:21,199 --> 01:30:23,520
to represent it goes away so there are a

2203
01:30:23,520 --> 01:30:26,080
lot of things like you know

2204
01:30:26,080 --> 01:30:28,800
lan bits and point to point bits so

2205
01:30:28,800 --> 01:30:31,360
those are all operational semantics

2206
01:30:31,360 --> 01:30:34,480
that an operator or a

2207
01:30:34,480 --> 01:30:37,120
controller could invent to uh to

2208
01:30:37,120 --> 01:30:39,199
optimize this and this all has to be

2209
01:30:39,199 --> 01:30:42,320
documented it is documented in brt and

2210
01:30:42,320 --> 01:30:44,639
so especially for sparse distribution

2211
01:30:44,639 --> 01:30:48,639
right for trees with a limited number of

2212
01:30:48,639 --> 01:30:51,199
receivers this is very easy you can

2213
01:30:51,199 --> 01:30:53,920
always create just a single packet to

2214
01:30:53,920 --> 01:30:56,239
deliver to any you know subset of

2215
01:30:56,239 --> 01:30:58,000
receivers

2216
01:30:58,000 --> 01:31:00,960
which is never possible in you know a

2217
01:31:00,960 --> 01:31:04,880
large-scale bureau brte network

2218
01:31:05,440 --> 01:31:06,880
and

2219
01:31:06,880 --> 01:31:08,480
yeah so even

2220
01:31:08,480 --> 01:31:09,440
when

2221
01:31:09,440 --> 01:31:11,840
you do need to send multiple packets

2222
01:31:11,840 --> 01:31:13,840
because the total size of the address

2223
01:31:13,840 --> 01:31:15,520
would become too large it's very easy

2224
01:31:15,520 --> 01:31:18,080
for a controller to do that with a very

2225
01:31:18,080 --> 01:31:20,000
simple algorithm whereas

2226
01:31:20,000 --> 01:31:23,120
optimizing upfront for these cases um in

2227
01:31:23,120 --> 01:31:26,080
beer and brte is much more difficult

2228
01:31:26,080 --> 01:31:27,920
so obviously i'm not going to walk

2229
01:31:27,920 --> 01:31:30,480
through the pseudocode

2230
01:31:30,480 --> 01:31:32,800
maybe i have more time in in the beer

2231
01:31:32,800 --> 01:31:35,040
working group but uh same type of

2232
01:31:35,040 --> 01:31:37,520
representation that we have done as a

2233
01:31:37,520 --> 01:31:40,159
type of you know informal you know

2234
01:31:40,159 --> 01:31:42,159
normative description of how the

2235
01:31:42,159 --> 01:31:44,239
forwarding would work

2236
01:31:44,239 --> 01:31:46,560
but

2237
01:31:46,560 --> 01:31:48,719
the the forwarding playing complexity

2238
01:31:48,719 --> 01:31:50,000
here and that's obviously now the

2239
01:31:50,000 --> 01:31:52,000
interesting part to compare for all the

2240
01:31:52,000 --> 01:31:54,080
benefits that we get

2241
01:31:54,080 --> 01:31:56,239
the basic bit string replication is

2242
01:31:56,239 --> 01:31:58,560
exactly the same as brte with just you

2243
01:31:58,560 --> 01:32:00,960
know a much simpler subset of different

2244
01:32:00,960 --> 01:32:03,600
type of adjacency required so the main

2245
01:32:03,600 --> 01:32:06,080
edit work is really that for each of the

2246
01:32:06,080 --> 01:32:08,960
replicating adjacencies uh you know you

2247
01:32:08,960 --> 01:32:12,639
need to have the calculations to

2248
01:32:12,639 --> 01:32:14,400
find the offset and the length of the

2249
01:32:14,400 --> 01:32:16,880
recursive unit in the address extract

2250
01:32:16,880 --> 01:32:18,400
that and make that become the new

2251
01:32:18,400 --> 01:32:19,920
address

2252
01:32:19,920 --> 01:32:22,080
so

2253
01:32:23,199 --> 01:32:25,440
this is also a naturally variable length

2254
01:32:25,440 --> 01:32:26,880
address right so

2255
01:32:26,880 --> 01:32:28,000
beer

2256
01:32:28,000 --> 01:32:30,320
packet format does support

2257
01:32:30,320 --> 01:32:31,840
you know different lengths but they all

2258
01:32:31,840 --> 01:32:34,400
have to be pre-configured and operator

2259
01:32:34,400 --> 01:32:36,560
wise decided upon whereas here in this

2260
01:32:36,560 --> 01:32:37,440
case

2261
01:32:37,440 --> 01:32:39,600
you would naturally use just as many

2262
01:32:39,600 --> 01:32:42,000
bits as you need for a distribution tree

2263
01:32:42,000 --> 01:32:44,480
and would only need to configure maybe a

2264
01:32:44,480 --> 01:32:46,480
network-wide maximum that you want to be

2265
01:32:46,480 --> 01:32:48,800
able to support

2266
01:32:48,800 --> 01:32:50,800
so of course what needs to be done more

2267
01:32:50,800 --> 01:32:52,320
is a stochastical analysis and

2268
01:32:52,320 --> 01:32:54,239
comparison of the efficiencies the

2269
01:32:54,239 --> 01:32:56,880
number of copies header size and so uh

2270
01:32:56,880 --> 01:32:58,880
with this solution compared to beer and

2271
01:32:58,880 --> 01:33:01,120
brte there's obviously wide space to

2272
01:33:01,120 --> 01:33:03,199
explore based on the interesting use

2273
01:33:03,199 --> 01:33:06,080
cases the draft like the original beer

2274
01:33:06,080 --> 01:33:08,719
and bt architecture doesn't

2275
01:33:08,719 --> 01:33:11,280
discuss packet encoding could equally

2276
01:33:11,280 --> 01:33:14,159
use the existing packet encoding which

2277
01:33:14,159 --> 01:33:16,239
obviously would be a waste because it's

2278
01:33:16,239 --> 01:33:18,560
a fixed length then that needs to be

2279
01:33:18,560 --> 01:33:20,080
indicated

2280
01:33:20,080 --> 01:33:22,320
but otherwise it would be perfectly fine

2281
01:33:22,320 --> 01:33:24,719
it would just be another forwarding mode

2282
01:33:24,719 --> 01:33:26,960
for of which we would today already have

2283
01:33:26,960 --> 01:33:29,679
two namely beer and beer tea

2284
01:33:29,679 --> 01:33:33,400
right and that's it

2285
01:33:39,120 --> 01:33:40,159
thank you

2286
01:33:40,159 --> 01:33:43,879
do we have any questions

2287
01:33:56,159 --> 01:33:59,360
dave you have a question

2288
01:33:59,840 --> 01:34:01,760
understanding i think i followed your

2289
01:34:01,760 --> 01:34:02,560
present

2290
01:34:02,560 --> 01:34:05,600
just to check uh please confirm um that

2291
01:34:05,600 --> 01:34:09,040
your primary use case is where uh the

2292
01:34:09,040 --> 01:34:10,400
addresses that you're talking about

2293
01:34:10,400 --> 01:34:12,560
would be constructed by a router and

2294
01:34:12,560 --> 01:34:14,800
used to encapsulate multicast addresses

2295
01:34:14,800 --> 01:34:16,159
over the top because the question i was

2296
01:34:16,159 --> 01:34:17,920
gonna ask is how do you learn what

2297
01:34:17,920 --> 01:34:20,000
address you should send to and i'm

2298
01:34:20,000 --> 01:34:21,600
guessing that's because you're using

2299
01:34:21,600 --> 01:34:23,040
routing protocols to have all the

2300
01:34:23,040 --> 01:34:24,880
knowledge necessary to construct that

2301
01:34:24,880 --> 01:34:27,120
did i follow it right or am i out yeah

2302
01:34:27,120 --> 01:34:29,520
so the current initial use case of beer

2303
01:34:29,520 --> 01:34:32,080
is that you put it on the pe routers as

2304
01:34:32,080 --> 01:34:34,560
a start ingress and egress pe and you do

2305
01:34:34,560 --> 01:34:37,040
a mapping between the ip multicast

2306
01:34:37,040 --> 01:34:38,639
overlay and beer

2307
01:34:38,639 --> 01:34:40,480
and that obviously is

2308
01:34:40,480 --> 01:34:42,159
a great way for service providers to

2309
01:34:42,159 --> 01:34:44,159
optimize their network but it

2310
01:34:44,159 --> 01:34:46,159
eliminates for the application one of

2311
01:34:46,159 --> 01:34:48,719
the cool core benefits of all the beer

2312
01:34:48,719 --> 01:34:51,520
solutions which is that an application

2313
01:34:51,520 --> 01:34:53,600
center can

2314
01:34:53,600 --> 01:34:56,560
by itself determine which receivers each

2315
01:34:56,560 --> 01:34:58,880
individual packet goes to as opposed to

2316
01:34:58,880 --> 01:35:00,719
having to deal with the bloody multicast

2317
01:35:00,719 --> 01:35:03,440
groups and setting them up

2318
01:35:03,440 --> 01:35:05,440
so that's why it's simplification would

2319
01:35:05,440 --> 01:35:07,679
be to extend beer

2320
01:35:07,679 --> 01:35:10,639
all the way to uh the hosts which isn't

2321
01:35:10,639 --> 01:35:12,400
architecturally problem but which is a

2322
01:35:12,400 --> 01:35:13,600
problem of

2323
01:35:13,600 --> 01:35:16,400
is that something you today can scale

2324
01:35:16,400 --> 01:35:18,719
and with this solution i think it's it's

2325
01:35:18,719 --> 01:35:20,320
a lot easier to scale this for

2326
01:35:20,320 --> 01:35:22,320
applications than it is with the

2327
01:35:22,320 --> 01:35:25,799
existing vrt

2328
01:35:29,520 --> 01:35:31,040
thanks uh

2329
01:35:31,040 --> 01:35:34,400
are there any other questions

2330
01:35:39,679 --> 01:35:42,080
okay thank you so then we moved to

2331
01:35:42,080 --> 01:35:44,719
xinjiang

2332
01:35:50,800 --> 01:35:52,000
can hear me

2333
01:35:52,000 --> 01:35:56,600
and this can see my screen

2334
01:35:57,520 --> 01:35:58,850
we can hear you

2335
01:35:58,850 --> 01:35:59,920
[Music]

2336
01:35:59,920 --> 01:36:03,360
we can still not see yours

2337
01:36:06,080 --> 01:36:08,480
did my screen start

2338
01:36:08,480 --> 01:36:11,718
not yet

2339
01:36:26,180 --> 01:36:29,310
[Music]

2340
01:36:34,480 --> 01:36:36,159
sorry my fault

2341
01:36:36,159 --> 01:36:39,360
here we are i believe

2342
01:36:39,360 --> 01:36:42,320
can you say it no

2343
01:36:44,719 --> 01:36:46,080
we can see them

2344
01:36:46,080 --> 01:36:47,679
can you see

2345
01:36:47,679 --> 01:36:48,480
okay

2346
01:36:48,480 --> 01:36:50,320
so here we are

2347
01:36:50,320 --> 01:36:51,119
this

2348
01:36:51,119 --> 01:36:53,040
what we call the native

2349
01:36:53,040 --> 01:36:55,280
minimal protocol

2350
01:36:55,280 --> 01:36:58,639
is a new proposal for the flag

2351
01:36:58,639 --> 01:37:01,440
edge network

2352
01:37:03,040 --> 01:37:06,560
the purpose is to extend the ip wider

2353
01:37:06,560 --> 01:37:08,080
into many

2354
01:37:08,080 --> 01:37:09,360
non-ip

2355
01:37:09,360 --> 01:37:10,800
networks which

2356
01:37:10,800 --> 01:37:13,679
is widely deployed at this moment

2357
01:37:13,679 --> 01:37:15,360
such as zigbee

2358
01:37:15,360 --> 01:37:19,440
bluetooth campus modbus and etc

2359
01:37:19,440 --> 01:37:23,600
uh there are many networks for nowadays

2360
01:37:23,600 --> 01:37:26,880
because ip is heavy for

2361
01:37:26,880 --> 01:37:29,199
energy sensitive devices

2362
01:37:29,199 --> 01:37:30,960
in this network

2363
01:37:30,960 --> 01:37:32,239
for

2364
01:37:32,239 --> 01:37:34,480
they actually need the application

2365
01:37:34,480 --> 01:37:38,320
layer gateways uh to transfer

2366
01:37:38,320 --> 01:37:42,239
their connectivity into the

2367
01:37:42,239 --> 01:37:43,440
ip

2368
01:37:43,440 --> 01:37:46,639
then connect to the other servers in the

2369
01:37:46,639 --> 01:37:49,040
ip

2370
01:37:49,040 --> 01:37:50,800
networks

2371
01:37:50,800 --> 01:37:53,760
and also they cannot

2372
01:37:53,760 --> 01:37:56,080
communication between the different

2373
01:37:56,080 --> 01:37:58,080
non-ip technologies

2374
01:37:58,080 --> 01:37:59,920
even they

2375
01:37:59,920 --> 01:38:03,199
are in the same 80 network

2376
01:38:03,199 --> 01:38:05,920
and there are three main issues for this

2377
01:38:05,920 --> 01:38:06,880
um

2378
01:38:06,880 --> 01:38:09,760
it's not supports the end-to-end

2379
01:38:09,760 --> 01:38:11,920
security

2380
01:38:11,920 --> 01:38:14,080
ip layer security

2381
01:38:14,080 --> 01:38:16,480
also the tos

2382
01:38:16,480 --> 01:38:19,920
and those non-ip terminals are invisible

2383
01:38:19,920 --> 01:38:23,280
to the to the pip networks and the

2384
01:38:23,280 --> 01:38:26,239
servers cannot see them either the

2385
01:38:26,239 --> 01:38:28,719
servers only see the

2386
01:38:28,719 --> 01:38:31,199
delegate from the gateway

2387
01:38:31,199 --> 01:38:33,760
and the dynamic drawing and leaving

2388
01:38:33,760 --> 01:38:36,480
for those devices to net ip network is

2389
01:38:36,480 --> 01:38:38,960
complicated

2390
01:38:38,960 --> 01:38:40,000
of course

2391
01:38:40,000 --> 01:38:41,040
people

2392
01:38:41,040 --> 01:38:43,199
we would like to burn this sensors

2393
01:38:43,199 --> 01:38:45,760
devices into ip

2394
01:38:45,760 --> 01:38:47,040
the

2395
01:38:47,040 --> 01:38:50,320
answer would obviously be ipv6

2396
01:38:50,320 --> 01:38:52,000
consideration first

2397
01:38:52,000 --> 01:38:53,040
but

2398
01:38:53,040 --> 01:38:55,360
actually it's not suitable

2399
01:38:55,360 --> 01:38:57,040
it's cased by the

2400
01:38:57,040 --> 01:39:00,159
address and header

2401
01:39:00,159 --> 01:39:02,000
um sorry

2402
01:39:02,000 --> 01:39:04,080
we are sticking your slide number one i

2403
01:39:04,080 --> 01:39:06,960
don't know if you are moving

2404
01:39:07,119 --> 01:39:10,639
i i'm moving to the number two

2405
01:39:10,639 --> 01:39:13,639
uh

2406
01:39:18,239 --> 01:39:20,400
so now you'll see the

2407
01:39:20,400 --> 01:39:22,960
second slice

2408
01:39:22,960 --> 01:39:25,960
correction

2409
01:39:26,080 --> 01:39:27,119
okay

2410
01:39:27,119 --> 01:39:28,000
so

2411
01:39:28,000 --> 01:39:31,679
uh let me continue i'm

2412
01:39:31,679 --> 01:39:34,880
at the bottom of this page um

2413
01:39:34,880 --> 01:39:37,600
the ipv6 is not suitable

2414
01:39:37,600 --> 01:39:40,000
because the

2415
01:39:40,000 --> 01:39:43,199
actually this non-addresses and the

2416
01:39:43,199 --> 01:39:44,320
header

2417
01:39:44,320 --> 01:39:46,719
for the bytes in total

2418
01:39:46,719 --> 01:39:49,679
not including the options exchanging

2419
01:39:49,679 --> 01:39:50,880
headers

2420
01:39:50,880 --> 01:39:53,840
that consume more energies and times

2421
01:39:53,840 --> 01:39:55,760
both on terminals and network

2422
01:39:55,760 --> 01:39:57,520
transmission

2423
01:39:57,520 --> 01:40:00,080
six nodes and six notepad actually has

2424
01:40:00,080 --> 01:40:03,119
done great job to compress the header

2425
01:40:03,119 --> 01:40:05,679
including the address to save the energy

2426
01:40:05,679 --> 01:40:07,520
for the network transmission

2427
01:40:07,520 --> 01:40:10,480
but actually it puts the

2428
01:40:10,480 --> 01:40:12,000
terminals

2429
01:40:12,000 --> 01:40:14,159
burden even heavier

2430
01:40:14,159 --> 01:40:17,679
so now we actually

2431
01:40:17,679 --> 01:40:20,719
has more problem for the

2432
01:40:20,719 --> 01:40:23,520
resource constraints and devices

2433
01:40:23,520 --> 01:40:26,320
they are short of both energy and memory

2434
01:40:26,320 --> 01:40:29,840
so this proposal is for them

2435
01:40:29,840 --> 01:40:32,239
i move to the third slide

2436
01:40:32,239 --> 01:40:35,638
can say that

2437
01:40:38,960 --> 01:40:41,760
okay i continue

2438
01:40:41,760 --> 01:40:43,199
so um

2439
01:40:43,199 --> 01:40:44,400
what's the

2440
01:40:44,400 --> 01:40:45,199
this

2441
01:40:45,199 --> 01:40:47,840
new proposal native minimum protocol

2442
01:40:47,840 --> 01:40:50,480
it's a simplest protocol with relatively

2443
01:40:50,480 --> 01:40:51,280
short

2444
01:40:51,280 --> 01:40:53,199
short addresses

2445
01:40:53,199 --> 01:40:55,520
that we particularly designed for the

2446
01:40:55,520 --> 01:40:58,000
edge network with those resource

2447
01:40:58,000 --> 01:41:00,000
constrained devices

2448
01:41:00,000 --> 01:41:01,840
the address lines

2449
01:41:01,840 --> 01:41:04,400
are many six bits or

2450
01:41:04,400 --> 01:41:05,679
8 bits

2451
01:41:05,679 --> 01:41:06,480
or

2452
01:41:06,480 --> 01:41:08,639
6 bits

2453
01:41:08,639 --> 01:41:10,400
it's extensible

2454
01:41:10,400 --> 01:41:11,280
but

2455
01:41:11,280 --> 01:41:13,360
for most of works

2456
01:41:13,360 --> 01:41:15,199
1 bytes or 2 bytes

2457
01:41:15,199 --> 01:41:17,360
that's enough

2458
01:41:17,360 --> 01:41:19,840
and we have the minimize header with

2459
01:41:19,840 --> 01:41:22,080
those short addresses

2460
01:41:22,080 --> 01:41:25,679
and we design very simple second similar

2461
01:41:25,679 --> 01:41:27,040
messages

2462
01:41:27,040 --> 01:41:29,040
this pro and protocol supports

2463
01:41:29,040 --> 01:41:31,119
communication between terminal and

2464
01:41:31,119 --> 01:41:34,320
gateway also between terminals

2465
01:41:34,320 --> 01:41:36,960
with the same 80 networks through the

2466
01:41:36,960 --> 01:41:39,600
gateway transfer

2467
01:41:39,600 --> 01:41:41,840
the functionalities we have including

2468
01:41:41,840 --> 01:41:44,719
the header design for both packed

2469
01:41:44,719 --> 01:41:47,280
data packet as the control message

2470
01:41:47,280 --> 01:41:49,520
and we also have very simple address

2471
01:41:49,520 --> 01:41:52,560
allocation and management mechanisms

2472
01:41:52,560 --> 01:41:55,679
we also provide the dns dedication

2473
01:41:55,679 --> 01:41:57,679
services

2474
01:41:57,679 --> 01:42:00,480
once these terminals need to

2475
01:42:00,480 --> 01:42:02,159
communicate with the

2476
01:42:02,159 --> 01:42:04,000
ip network

2477
01:42:04,000 --> 01:42:06,000
it's transferred

2478
01:42:06,000 --> 01:42:08,320
is fascinated by the network

2479
01:42:08,320 --> 01:42:11,119
by the gateway gateways actually

2480
01:42:11,119 --> 01:42:13,520
translates the package into the native

2481
01:42:13,520 --> 01:42:17,280
ipv4 and ipv6 packet but that's purely

2482
01:42:17,280 --> 01:42:20,400
layer 3 translation and that's different

2483
01:42:20,400 --> 01:42:23,119
from the non-ip2 ip

2484
01:42:23,119 --> 01:42:25,119
the information

2485
01:42:25,119 --> 01:42:29,719
within the package can be matched

2486
01:42:30,320 --> 01:42:33,040
this is the data packet header it is

2487
01:42:33,040 --> 01:42:36,880
designed with the bitmap mechanism

2488
01:42:36,880 --> 01:42:39,920
we for now we have the most frequently

2489
01:42:39,920 --> 01:42:42,560
used six fields include

2490
01:42:42,560 --> 01:42:45,119
encoded in one byte

2491
01:42:45,119 --> 01:42:47,280
bitmap

2492
01:42:47,280 --> 01:42:49,840
modules can be supported by extent in a

2493
01:42:49,840 --> 01:42:53,280
bitmap for now we have only destination

2494
01:42:53,280 --> 01:42:57,280
source next header payload lens checksum

2495
01:42:57,280 --> 01:42:59,440
dns indicator

2496
01:42:59,440 --> 01:43:03,040
um this is an example uh it's typically

2497
01:43:03,040 --> 01:43:05,760
the header has only five bytes

2498
01:43:05,760 --> 01:43:08,800
and it can be even shorter to four bytes

2499
01:43:08,800 --> 01:43:10,560
without the source address because the

2500
01:43:10,560 --> 01:43:14,080
gateway already know who sends this

2501
01:43:14,080 --> 01:43:15,199
um

2502
01:43:15,199 --> 01:43:18,000
this package to it

2503
01:43:18,000 --> 01:43:19,600
and this is the

2504
01:43:19,600 --> 01:43:20,719
um

2505
01:43:20,719 --> 01:43:22,320
address management

2506
01:43:22,320 --> 01:43:25,199
functions design all nodes in the same

2507
01:43:25,199 --> 01:43:28,800
network use the same addresses

2508
01:43:28,800 --> 01:43:33,119
8 bytes 18 16 bytes is configured on the

2509
01:43:33,119 --> 01:43:36,239
gateway and

2510
01:43:36,239 --> 01:43:38,639
and we have the uh

2511
01:43:38,639 --> 01:43:40,239
address um

2512
01:43:40,239 --> 01:43:43,040
allocation through the address request

2513
01:43:43,040 --> 01:43:46,480
and address assignment message

2514
01:43:46,480 --> 01:43:48,880
um we have the lease

2515
01:43:48,880 --> 01:43:51,600
reversal challenge at this

2516
01:43:51,600 --> 01:43:54,560
reversal response message to match the

2517
01:43:54,560 --> 01:43:57,280
address lifetime

2518
01:43:57,280 --> 01:43:58,800
this is a

2519
01:43:58,800 --> 01:44:00,639
design for the control message body

2520
01:44:00,639 --> 01:44:02,239
format

2521
01:44:02,239 --> 01:44:05,959
very simple straightforward

2522
01:44:07,360 --> 01:44:09,040
this is a

2523
01:44:09,040 --> 01:44:10,800
for now the

2524
01:44:10,800 --> 01:44:12,560
only service we

2525
01:44:12,560 --> 01:44:15,520
provide because the most of the staminas

2526
01:44:15,520 --> 01:44:17,840
may request the dns

2527
01:44:17,840 --> 01:44:22,320
uh how to do it in the minimal

2528
01:44:22,320 --> 01:44:23,600
protocol

2529
01:44:23,600 --> 01:44:25,040
the

2530
01:44:25,040 --> 01:44:28,159
amp terminals send a dns request package

2531
01:44:28,159 --> 01:44:29,600
to the gateway

2532
01:44:29,600 --> 01:44:31,920
when the gateway receives the packet

2533
01:44:31,920 --> 01:44:34,639
it directly translates the network may

2534
01:44:34,639 --> 01:44:38,400
your information the dns request

2535
01:44:38,400 --> 01:44:41,360
and send a regular dns package

2536
01:44:41,360 --> 01:44:45,199
request package to the dns saver

2537
01:44:45,199 --> 01:44:48,800
which configured earlier on the gateway

2538
01:44:48,800 --> 01:44:50,239
then gets the

2539
01:44:50,239 --> 01:44:51,360
dns

2540
01:44:51,360 --> 01:44:52,719
return

2541
01:44:52,719 --> 01:44:55,199
information bike the returned dns

2542
01:44:55,199 --> 01:44:57,760
message is encoded in the return data

2543
01:44:57,760 --> 01:45:00,480
package towards the source

2544
01:45:00,480 --> 01:45:01,520
terminal

2545
01:45:01,520 --> 01:45:02,960
so

2546
01:45:02,960 --> 01:45:04,960
dns

2547
01:45:04,960 --> 01:45:06,560
lookup can be

2548
01:45:06,560 --> 01:45:09,199
completed

2549
01:45:09,440 --> 01:45:12,400
um some consideration for security we

2550
01:45:12,400 --> 01:45:15,360
actually have shorter checksum

2551
01:45:15,360 --> 01:45:16,639
from

2552
01:45:16,639 --> 01:45:20,239
16 bits cut into 8 bits

2553
01:45:20,239 --> 01:45:24,159
it costs nest bits and computation

2554
01:45:24,159 --> 01:45:27,520
we do have a little bit loose here

2555
01:45:27,520 --> 01:45:29,760
it increase the possibility that this

2556
01:45:29,760 --> 01:45:31,360
hexamines

2557
01:45:31,360 --> 01:45:34,000
get error during the transmission

2558
01:45:34,000 --> 01:45:38,320
but nowadays the transmission is more

2559
01:45:38,320 --> 01:45:39,760
trustable

2560
01:45:39,760 --> 01:45:42,000
and this purposeful

2561
01:45:42,000 --> 01:45:45,000
lead

2562
01:45:45,600 --> 01:45:47,760
and

2563
01:45:47,760 --> 01:45:48,719
constru

2564
01:45:48,719 --> 01:45:51,840
consideration we need the user type new

2565
01:45:51,840 --> 01:45:54,880
user type and we need the registration

2566
01:45:54,880 --> 01:45:56,159
for the

2567
01:45:56,159 --> 01:45:59,040
mp control message type and the bitmap

2568
01:45:59,040 --> 01:46:00,560
table

2569
01:46:00,560 --> 01:46:03,280
okay that's it this is the first time we

2570
01:46:03,280 --> 01:46:04,400
uh

2571
01:46:04,400 --> 01:46:06,480
show this and we think that's very

2572
01:46:06,480 --> 01:46:09,119
useful so i would like to hear

2573
01:46:09,119 --> 01:46:12,960
uh response how to improve whether this

2574
01:46:12,960 --> 01:46:14,320
is useful

2575
01:46:14,320 --> 01:46:18,960
uh even way whether we need to make it

2576
01:46:18,960 --> 01:46:20,960
even simpler

2577
01:46:20,960 --> 01:46:23,920
which we think that's almost

2578
01:46:23,920 --> 01:46:25,280
impossible

2579
01:46:25,280 --> 01:46:28,480
this is the simplest one

2580
01:46:29,679 --> 01:46:32,719
we're out of time so so we will have one

2581
01:46:32,719 --> 01:46:34,159
question

2582
01:46:34,159 --> 01:46:38,320
dave do you want to make a comment quick

2583
01:46:38,320 --> 01:46:39,679
sure i'll just make the same comment

2584
01:46:39,679 --> 01:46:41,920
that i made on a previous presentation

2585
01:46:41,920 --> 01:46:43,280
in here which is i think this one is

2586
01:46:43,280 --> 01:46:44,719
best uh

2587
01:46:44,719 --> 01:46:46,960
reviewed in the sixth low working group

2588
01:46:46,960 --> 01:46:49,360
um for example i think the

2589
01:46:49,360 --> 01:46:50,320
claim

2590
01:46:50,320 --> 01:46:54,239
that um is on slide two or so that six

2591
01:46:54,239 --> 01:46:56,080
low requires terminals burdens to get

2592
01:46:56,080 --> 01:46:58,000
even heavier is something that i think

2593
01:46:58,000 --> 01:47:00,480
that they should uh address whether they

2594
01:47:00,480 --> 01:47:02,480
whether that's correct or not i i don't

2595
01:47:02,480 --> 01:47:04,239
know but if it is correct that something

2596
01:47:04,239 --> 01:47:05,600
the six little working group should take

2597
01:47:05,600 --> 01:47:07,360
his feedback but either way i think the

2598
01:47:07,360 --> 01:47:08,719
types of things that you're evaluating

2599
01:47:08,719 --> 01:47:10,080
here especially since there's a gateway

2600
01:47:10,080 --> 01:47:12,159
that does translations translate

2601
01:47:12,159 --> 01:47:13,679
build those look slow so that's where i

2602
01:47:13,679 --> 01:47:15,920
would uh review this work and encourage

2603
01:47:15,920 --> 01:47:17,840
you to go and present this there

2604
01:47:17,840 --> 01:47:19,119
and i think it'd be a great discussion

2605
01:47:19,119 --> 01:47:22,080
so thank you

2606
01:47:22,080 --> 01:47:23,119
all right

2607
01:47:23,119 --> 01:47:26,880
yes thank you very much yeah

2608
01:47:28,960 --> 01:47:32,000
great thank you shane um so we are going

2609
01:47:32,000 --> 01:47:35,880
to move to roger

2610
01:47:38,159 --> 01:47:41,520
okay let me share my screen

2611
01:47:41,520 --> 01:47:43,760
um

2612
01:47:43,920 --> 01:47:44,960
yes

2613
01:47:44,960 --> 01:47:48,920
let's grant it

2614
01:47:51,520 --> 01:47:53,199
and

2615
01:47:53,199 --> 01:47:55,280
we can see it though

2616
01:47:55,280 --> 01:47:57,599
okay

2617
01:48:00,320 --> 01:48:03,199
okay thanks uh juan carlos so my name is

2618
01:48:03,199 --> 01:48:04,480
roger marks

2619
01:48:04,480 --> 01:48:08,159
and i want to talk about an ieee 802

2620
01:48:08,159 --> 01:48:09,199
project

2621
01:48:09,199 --> 01:48:12,480
standardization project called 802.01cq

2622
01:48:12,480 --> 01:48:14,719
on address assignment this has been

2623
01:48:14,719 --> 01:48:17,280
discussed in the ietf 802 coordination

2624
01:48:17,280 --> 01:48:20,800
activity and recently i was asked to

2625
01:48:20,800 --> 01:48:22,480
bring this presentation to update

2626
01:48:22,480 --> 01:48:23,679
interior

2627
01:48:23,679 --> 01:48:26,159
so this is a project that's been around

2628
01:48:26,159 --> 01:48:28,560
for a few years but it's gotten a slow

2629
01:48:28,560 --> 01:48:30,639
start and now it's starting to move more

2630
01:48:30,639 --> 01:48:32,880
quickly with some drafts it's about

2631
01:48:32,880 --> 01:48:35,679
multicast and local address assignment

2632
01:48:35,679 --> 01:48:37,920
of ie802 addresses or what you might

2633
01:48:37,920 --> 01:48:40,000
call mac addresses it's done in the

2634
01:48:40,000 --> 01:48:42,639
802.1 working group in the tsn time

2635
01:48:42,639 --> 01:48:44,480
sensitive networking

2636
01:48:44,480 --> 01:48:46,800
task group

2637
01:48:46,800 --> 01:48:49,280
the project charter for this activity

2638
01:48:49,280 --> 01:48:50,960
specifies that it's

2639
01:48:50,960 --> 01:48:54,159
um on local addresses and it should

2640
01:48:54,159 --> 01:48:56,000
support both peer-to-peer address

2641
01:48:56,000 --> 01:48:59,360
claiming and address server capabilities

2642
01:48:59,360 --> 01:49:01,679
and the intention is to

2643
01:49:01,679 --> 01:49:04,239
consider the fact that global addresses

2644
01:49:04,239 --> 01:49:07,040
uh could eventually be exhausted in the

2645
01:49:07,040 --> 01:49:08,639
802 space

2646
01:49:08,639 --> 01:49:09,840
and

2647
01:49:09,840 --> 01:49:11,840
there should be a way to promote the use

2648
01:49:11,840 --> 01:49:15,040
of the local address space and provide

2649
01:49:15,040 --> 01:49:18,480
locally unique addresses

2650
01:49:20,400 --> 01:49:22,639
an additional burden that's placed on

2651
01:49:22,639 --> 01:49:24,000
this project is to deal with the

2652
01:49:24,000 --> 01:49:25,920
multicast addresses and

2653
01:49:25,920 --> 01:49:26,840
the

2654
01:49:26,840 --> 01:49:29,840
um uh there it's a little it's a little

2655
01:49:29,840 --> 01:49:31,520
different than what people always expect

2656
01:49:31,520 --> 01:49:33,599
because and many people are familiar

2657
01:49:33,599 --> 01:49:35,280
familiar with the idea that a multicast

2658
01:49:35,280 --> 01:49:38,159
address is assigned to a protocol but in

2659
01:49:38,159 --> 01:49:40,159
in this project the

2660
01:49:40,159 --> 01:49:42,080
multicast addresses need to be assigned

2661
01:49:42,080 --> 01:49:45,520
to end stations this is driven partly by

2662
01:49:45,520 --> 01:49:48,320
the idea that in some tsn networks

2663
01:49:48,320 --> 01:49:50,000
streams are addressed to multicast

2664
01:49:50,000 --> 01:49:51,840
addresses and those are assigned by the

2665
01:49:51,840 --> 01:49:53,280
sender or the

2666
01:49:53,280 --> 01:49:54,560
talker

2667
01:49:54,560 --> 01:49:56,800
and so each stream and its set of

2668
01:49:56,800 --> 01:50:00,159
addresses is uses a different uh and its

2669
01:50:00,159 --> 01:50:02,880
destinations is just decided by the

2670
01:50:02,880 --> 01:50:03,679
uh

2671
01:50:03,679 --> 01:50:06,239
the sender and it needs a pool of

2672
01:50:06,239 --> 01:50:08,080
multicast addresses that it can use for

2673
01:50:08,080 --> 01:50:09,280
that purpose

2674
01:50:09,280 --> 01:50:12,159
um currently there's an ieee standard a

2675
01:50:12,159 --> 01:50:14,560
to 1722

2676
01:50:14,560 --> 01:50:16,560
that provides a peer-to-peer way for

2677
01:50:16,560 --> 01:50:18,400
devices to get these multi-cast

2678
01:50:18,400 --> 01:50:20,960
addresses but this would provide new

2679
01:50:20,960 --> 01:50:23,360
capability 80201cq would give new

2680
01:50:23,360 --> 01:50:24,560
capability

2681
01:50:24,560 --> 01:50:26,480
in addition to providing the local

2682
01:50:26,480 --> 01:50:28,400
addresses

2683
01:50:28,400 --> 01:50:30,320
so it's important to understand that

2684
01:50:30,320 --> 01:50:33,840
half of the 802 addresses are global and

2685
01:50:33,840 --> 01:50:35,280
those are

2686
01:50:35,280 --> 01:50:38,639
by by a rule required to be unique among

2687
01:50:38,639 --> 01:50:41,599
all devices and the intention is to have

2688
01:50:41,599 --> 01:50:43,760
that uniqueness go over a period of 100

2689
01:50:43,760 --> 01:50:44,639
years

2690
01:50:44,639 --> 01:50:46,880
and um we're well into the hundred years

2691
01:50:46,880 --> 01:50:49,199
and there's still addresses left but

2692
01:50:49,199 --> 01:50:50,880
um

2693
01:50:50,880 --> 01:50:52,480
but we were worried about them being

2694
01:50:52,480 --> 01:50:54,800
exhausted and uh these are generally

2695
01:50:54,800 --> 01:50:56,560
burned in by the factory and so these

2696
01:50:56,560 --> 01:50:58,400
are flight addresses they they're only

2697
01:50:58,400 --> 01:51:01,040
real purposes and and and

2698
01:51:01,040 --> 01:51:02,480
uh

2699
01:51:02,480 --> 01:51:05,679
the only content in the address is

2700
01:51:05,679 --> 01:51:07,840
its uniqueness along with an indication

2701
01:51:07,840 --> 01:51:10,239
of whether it's global or local and

2702
01:51:10,239 --> 01:51:12,639
whether it's unicast or multicast but

2703
01:51:12,639 --> 01:51:15,119
half of the 802 addresses are local and

2704
01:51:15,119 --> 01:51:16,560
it's possible to assign those

2705
01:51:16,560 --> 01:51:19,040
dynamically and there are many many

2706
01:51:19,040 --> 01:51:21,440
addresses here because

2707
01:51:21,440 --> 01:51:22,320
the

2708
01:51:22,320 --> 01:51:24,960
size of the global space and local space

2709
01:51:24,960 --> 01:51:26,719
are equal so you can assign these

2710
01:51:26,719 --> 01:51:28,880
addresses very liberally but also

2711
01:51:28,880 --> 01:51:30,320
because you're doing them dynamically

2712
01:51:30,320 --> 01:51:32,880
you can assign them thoughtfully to have

2713
01:51:32,880 --> 01:51:35,040
addressing power where there's content

2714
01:51:35,040 --> 01:51:36,960
in the address rather than just

2715
01:51:36,960 --> 01:51:38,719
uniqueness in the address

2716
01:51:38,719 --> 01:51:41,199
so what happens in 80201c2 is called the

2717
01:51:41,199 --> 01:51:43,199
block address registration and claiming

2718
01:51:43,199 --> 01:51:44,639
protocol barc

2719
01:51:44,639 --> 01:51:46,639
and bark assigns mac addresses and

2720
01:51:46,639 --> 01:51:48,800
blocks where a block

2721
01:51:48,800 --> 01:51:51,599
an address block is a set of local

2722
01:51:51,599 --> 01:51:54,480
addresses that's equally unicast and

2723
01:51:54,480 --> 01:51:57,760
multicast each contiguous sub box

2724
01:51:57,760 --> 01:52:00,880
and these are all distinct disjoint

2725
01:52:00,880 --> 01:52:02,400
address blocks

2726
01:52:02,400 --> 01:52:05,040
and um there are two types there can be

2727
01:52:05,040 --> 01:52:06,639
registerable address blocks that are

2728
01:52:06,639 --> 01:52:08,400
handed out by a registrar which is a

2729
01:52:08,400 --> 01:52:09,760
kind of a server

2730
01:52:09,760 --> 01:52:11,199
uh that holds

2731
01:52:11,199 --> 01:52:12,800
blocks uh

2732
01:52:12,800 --> 01:52:14,960
inventories of address blocks and then

2733
01:52:14,960 --> 01:52:18,480
there's also claimable addresses or cas

2734
01:52:18,480 --> 01:52:19,760
that are in

2735
01:52:19,760 --> 01:52:22,239
claimable address blocks or cabs

2736
01:52:22,239 --> 01:52:24,320
that are

2737
01:52:24,320 --> 01:52:26,400
each identified by acaba which is a

2738
01:52:26,400 --> 01:52:28,719
claimable address

2739
01:52:28,719 --> 01:52:30,480
and the kaaba

2740
01:52:30,480 --> 01:52:32,960
is a mac address that's a multicast

2741
01:52:32,960 --> 01:52:36,239
address that's used as an identifier

2742
01:52:36,239 --> 01:52:37,920
and there's a number of temporary

2743
01:52:37,920 --> 01:52:39,920
unicast addresses that are used for

2744
01:52:39,920 --> 01:52:42,080
initial discovery by a claimant that

2745
01:52:42,080 --> 01:52:44,880
doesn't have a burned-in unicast address

2746
01:52:44,880 --> 01:52:46,639
say from the factory

2747
01:52:46,639 --> 01:52:47,440
so

2748
01:52:47,440 --> 01:52:49,599
uh this figure tries to show a little

2749
01:52:49,599 --> 01:52:51,199
sketch of these addresses so this is

2750
01:52:51,199 --> 01:52:52,239
showing

2751
01:52:52,239 --> 01:52:55,599
uh 12 nibbles that's part of an 802

2752
01:52:55,599 --> 01:52:58,080
48-bit mac address and up in the header

2753
01:52:58,080 --> 01:53:00,800
you can see there's this bit

2754
01:53:00,800 --> 01:53:03,280
m which is the

2755
01:53:03,280 --> 01:53:06,400
well-known multicast a bit uh one or

2756
01:53:06,400 --> 01:53:08,239
zero depend on whether it's unicast or

2757
01:53:08,239 --> 01:53:09,440
multicast

2758
01:53:09,440 --> 01:53:11,920
and then the the purple the second bit

2759
01:53:11,920 --> 01:53:14,880
here in n1 is the indicator of a local

2760
01:53:14,880 --> 01:53:18,239
address and so in barc you always have

2761
01:53:18,239 --> 01:53:20,320
uh you use a one one one for these three

2762
01:53:20,320 --> 01:53:23,119
bits and the m is unicast or multicast

2763
01:53:23,119 --> 01:53:25,920
but we also structure and bark that the

2764
01:53:25,920 --> 01:53:27,119
first part

2765
01:53:27,119 --> 01:53:31,440
of the first the first nibble and

2766
01:53:31,440 --> 01:53:32,960
i want to call your attention to these

2767
01:53:32,960 --> 01:53:35,440
two green bits j and k because those are

2768
01:53:35,440 --> 01:53:38,080
the ones that tell you the size of the

2769
01:53:38,080 --> 01:53:40,639
uh the address block and

2770
01:53:40,639 --> 01:53:42,800
so it tells you how many addresses

2771
01:53:42,800 --> 01:53:44,480
that you get in your address block so

2772
01:53:44,480 --> 01:53:46,080
you get 16

2773
01:53:46,080 --> 01:53:47,280
uh

2774
01:53:47,280 --> 01:53:50,560
the block has 16 to the jk claimable

2775
01:53:50,560 --> 01:53:53,679
addresses or 16 to the jk register roll

2776
01:53:53,679 --> 01:53:55,199
addresses

2777
01:53:55,199 --> 01:53:58,000
depending upon which one you use

2778
01:53:58,000 --> 01:53:59,679
so here's an example of what the

2779
01:53:59,679 --> 01:54:01,920
claimable address blocks look like and

2780
01:54:01,920 --> 01:54:04,400
it shows three sizes 0

2781
01:54:04,400 --> 01:54:06,000
1 2 and 3

2782
01:54:06,000 --> 01:54:06,800
and

2783
01:54:06,800 --> 01:54:08,639
the size zero block

2784
01:54:08,639 --> 01:54:11,119
is um it has this header at the top and

2785
01:54:11,119 --> 01:54:12,800
the first three nibbles and then it

2786
01:54:12,800 --> 01:54:14,960
leaves you nine more nibbles to assign

2787
01:54:14,960 --> 01:54:17,280
an address and because there's an

2788
01:54:17,280 --> 01:54:19,360
asterisk here that means that you can

2789
01:54:19,360 --> 01:54:21,599
have a local if you have a unicast

2790
01:54:21,599 --> 01:54:24,159
address and a multicast so your block is

2791
01:54:24,159 --> 01:54:26,639
one unit cast and one multicast address

2792
01:54:26,639 --> 01:54:28,320
but if you go to the larger sizes you

2793
01:54:28,320 --> 01:54:30,880
can have for example um

2794
01:54:30,880 --> 01:54:33,360
three three nibbles worth of address

2795
01:54:33,360 --> 01:54:35,360
space and so now you're giving an

2796
01:54:35,360 --> 01:54:36,719
address block

2797
01:54:36,719 --> 01:54:40,960
that has um 4096 unicast addresses equal

2798
01:54:40,960 --> 01:54:43,119
number of multicast addresses in this

2799
01:54:43,119 --> 01:54:44,960
cab that's the address block and then

2800
01:54:44,960 --> 01:54:47,760
this caba is the identifier of the

2801
01:54:47,760 --> 01:54:51,040
address block and its multicast address

2802
01:54:51,040 --> 01:54:52,080
itself

2803
01:54:52,080 --> 01:54:55,280
and so the way you do claiming is

2804
01:54:55,280 --> 01:54:58,400
here's an example where you have uh

2805
01:54:58,400 --> 01:55:01,440
five devices that each hold a caba

2806
01:55:01,440 --> 01:55:03,840
address block one two three four five

2807
01:55:03,840 --> 01:55:05,599
and here's a new one that wants to claim

2808
01:55:05,599 --> 01:55:08,880
an address so a block so it picks cabba

2809
01:55:08,880 --> 01:55:11,360
one and it sends a multicast message

2810
01:55:11,360 --> 01:55:13,520
addressed to the multitest address cable

2811
01:55:13,520 --> 01:55:14,320
one

2812
01:55:14,320 --> 01:55:15,199
well

2813
01:55:15,199 --> 01:55:18,400
it turns out that because um

2814
01:55:18,400 --> 01:55:20,560
it's a multicast address

2815
01:55:20,560 --> 01:55:22,320
the only device that's listening for

2816
01:55:22,320 --> 01:55:24,000
that address is the one that holds the

2817
01:55:24,000 --> 01:55:26,560
same claim and so these four of these

2818
01:55:26,560 --> 01:55:28,320
devices don't even listen to the message

2819
01:55:28,320 --> 01:55:30,719
but the one that holds exactly that same

2820
01:55:30,719 --> 01:55:32,639
block that's being claimed here's the

2821
01:55:32,639 --> 01:55:34,960
message and it responds with a unicast

2822
01:55:34,960 --> 01:55:37,520
message to the to the claimant saying no

2823
01:55:37,520 --> 01:55:39,119
you can't have that address i've already

2824
01:55:39,119 --> 01:55:40,239
got you can't have that block i've

2825
01:55:40,239 --> 01:55:42,239
already got it so it tries again with a

2826
01:55:42,239 --> 01:55:43,599
different address

2827
01:55:43,599 --> 01:55:45,599
six this time nobody responds because

2828
01:55:45,599 --> 01:55:47,760
nobody hears that message and then it

2829
01:55:47,760 --> 01:55:49,520
decides to claim

2830
01:55:49,520 --> 01:55:51,840
kaaba six

2831
01:55:51,840 --> 01:55:53,920
this can also uh

2832
01:55:53,920 --> 01:55:56,320
you know the the registration process is

2833
01:55:56,320 --> 01:55:57,840
such the claimant doesn't have to be

2834
01:55:57,840 --> 01:56:00,080
worthy aware that there's a registrar

2835
01:56:00,080 --> 01:56:02,159
available when it begins the claim it

2836
01:56:02,159 --> 01:56:04,159
sends this thing play a message but if

2837
01:56:04,159 --> 01:56:06,800
there's a registrar it can respond and

2838
01:56:06,800 --> 01:56:08,800
provide an address so

2839
01:56:08,800 --> 01:56:10,480
in this case the claimant sends a

2840
01:56:10,480 --> 01:56:11,920
discover message

2841
01:56:11,920 --> 01:56:12,719
and

2842
01:56:12,719 --> 01:56:14,320
let's say there are two registrars out

2843
01:56:14,320 --> 01:56:16,239
there that each

2844
01:56:16,239 --> 01:56:19,280
respond with an offer to the claimant by

2845
01:56:19,280 --> 01:56:20,480
unicast

2846
01:56:20,480 --> 01:56:22,639
and then the claimant picks the one that

2847
01:56:22,639 --> 01:56:24,719
it likes and sends a unicast message to

2848
01:56:24,719 --> 01:56:28,000
that registrar and it reserves that

2849
01:56:28,000 --> 01:56:29,920
address

2850
01:56:29,920 --> 01:56:31,679
one of the things that you can do with

2851
01:56:31,679 --> 01:56:33,520
this kind of structure it's because it's

2852
01:56:33,520 --> 01:56:35,040
it's in blocks

2853
01:56:35,040 --> 01:56:37,520
um you can do a kind of a hierarchical

2854
01:56:37,520 --> 01:56:39,920
structure and there's some techniques

2855
01:56:39,920 --> 01:56:42,239
that are that are available within the

2856
01:56:42,239 --> 01:56:45,199
standard this this structure is an is my

2857
01:56:45,199 --> 01:56:47,199
example it's not standardized but it's

2858
01:56:47,199 --> 01:56:49,760
to show that you can um you can have a

2859
01:56:49,760 --> 01:56:52,000
kind of a semantic structure so an

2860
01:56:52,000 --> 01:56:55,119
address can have a field that tells you

2861
01:56:55,119 --> 01:56:57,199
how the address is formatted and then

2862
01:56:57,199 --> 01:56:59,199
within it you can have a

2863
01:56:59,199 --> 01:57:01,040
code of the code the address to say okay

2864
01:57:01,040 --> 01:57:03,199
here's here's the access switch that

2865
01:57:03,199 --> 01:57:05,280
it's in and then maybe here's the server

2866
01:57:05,280 --> 01:57:07,440
that it's attached to and then here's a

2867
01:57:07,440 --> 01:57:09,920
virtual machine that's on the server and

2868
01:57:09,920 --> 01:57:11,199
the

2869
01:57:11,199 --> 01:57:12,880
you can have

2870
01:57:12,880 --> 01:57:14,639
routing methods that are

2871
01:57:14,639 --> 01:57:18,159
that take advantage of that hierarchy

2872
01:57:18,159 --> 01:57:20,000
so

2873
01:57:20,000 --> 01:57:21,599
um

2874
01:57:21,599 --> 01:57:23,119
what you end up with is a general

2875
01:57:23,119 --> 01:57:24,719
address assignment method that can

2876
01:57:24,719 --> 01:57:26,560
eliminate the need for global addresses

2877
01:57:26,560 --> 01:57:29,280
and reduce the consumption it still

2878
01:57:29,280 --> 01:57:31,280
maintains uniqueness within the land

2879
01:57:31,280 --> 01:57:33,040
it's completely backward compatible with

2880
01:57:33,040 --> 01:57:35,119
the existing 802 addressing and bridging

2881
01:57:35,119 --> 01:57:37,599
because it's just a for a device that

2882
01:57:37,599 --> 01:57:39,440
just sees it as a flat address it works

2883
01:57:39,440 --> 01:57:41,360
the same as a global address

2884
01:57:41,360 --> 01:57:42,960
it could be used to address privacy

2885
01:57:42,960 --> 01:57:44,480
concerns because the addresses are

2886
01:57:44,480 --> 01:57:46,800
dynamically assigned and they don't

2887
01:57:46,800 --> 01:57:49,599
they don't continue and

2888
01:57:49,599 --> 01:57:51,119
you can use some

2889
01:57:51,119 --> 01:57:54,480
semantic structuring including uh

2890
01:57:54,480 --> 01:57:56,320
you know because a device you can grant

2891
01:57:56,320 --> 01:57:58,880
a device a whole block of addresses it

2892
01:57:58,880 --> 01:57:59,840
can use

2893
01:57:59,840 --> 01:58:02,480
the the free fields to do things like

2894
01:58:02,480 --> 01:58:05,679
flow identification or identify streams

2895
01:58:05,679 --> 01:58:08,159
within the core address block that it's

2896
01:58:08,159 --> 01:58:10,638
been given

2897
01:58:10,880 --> 01:58:12,480
you could scale this up and you can use

2898
01:58:12,480 --> 01:58:15,040
it in hyperscale class networks

2899
01:58:15,040 --> 01:58:17,280
and

2900
01:58:17,679 --> 01:58:19,440
it's an alternative to completely random

2901
01:58:19,440 --> 01:58:20,960
assignment like for example in the

2902
01:58:20,960 --> 01:58:23,040
wireless case you have a dynamic

2903
01:58:23,040 --> 01:58:24,560
assignment possibility that can give you

2904
01:58:24,560 --> 01:58:26,159
address privacy

2905
01:58:26,159 --> 01:58:27,040
and

2906
01:58:27,040 --> 01:58:28,320
meanwhile we're protecting in the

2907
01:58:28,320 --> 01:58:31,199
protocol against address duplication

2908
01:58:31,199 --> 01:58:33,920
and you can code the address blocks

2909
01:58:33,920 --> 01:58:35,840
there's also it's also possible to use

2910
01:58:35,840 --> 01:58:36,800
this to

2911
01:58:36,800 --> 01:58:39,679
consider how you do 48-bit

2912
01:58:39,679 --> 01:58:43,280
bridge lands to carry 64-bit addresses

2913
01:58:43,280 --> 01:58:45,199
what needs to be explored is the

2914
01:58:45,199 --> 01:58:47,760
implications on ip and you could think

2915
01:58:47,760 --> 01:58:49,920
about arp and how arp applies

2916
01:58:49,920 --> 01:58:53,119
in this case and the intention

2917
01:58:53,119 --> 01:58:56,239
is for the next draft of this standard

2918
01:58:56,239 --> 01:58:59,199
to be circulated to the int area and

2919
01:58:59,199 --> 01:59:01,040
hopefully that will happen and

2920
01:59:01,040 --> 01:59:03,599
maybe within the next couple of months a

2921
01:59:03,599 --> 01:59:07,280
month or two there'll be a new directly

2922
01:59:09,520 --> 01:59:10,320
great

2923
01:59:10,320 --> 01:59:12,400
thank you very much roger so

2924
01:59:12,400 --> 01:59:14,639
we're very much at the end but we can

2925
01:59:14,639 --> 01:59:16,159
still take a couple of questions if you

2926
01:59:16,159 --> 01:59:18,560
have for for roger

2927
01:59:18,560 --> 01:59:20,880
eric

2928
01:59:26,400 --> 01:59:29,440
but more about uh thank you for coming

2929
01:59:29,440 --> 01:59:32,639
i'm quite happy to see that ieee uh

2930
01:59:32,639 --> 01:59:34,159
engineers are coming to present their

2931
01:59:34,159 --> 01:59:36,639
work and in terraria it's very useful to

2932
01:59:36,639 --> 01:59:39,119
get this collaboration between ietf and

2933
01:59:39,119 --> 01:59:43,159
ieee so thank you for coming

2934
01:59:45,760 --> 01:59:48,560
thanks eric uh tourist

2935
01:59:48,560 --> 01:59:50,800
yeah i mean uh this this is interesting

2936
01:59:50,800 --> 01:59:52,080
thank you um

2937
01:59:52,080 --> 01:59:53,199
um

2938
01:59:53,199 --> 01:59:55,360
we we obviously have a lot of experience

2939
01:59:55,360 --> 01:59:57,119
with things like that from multicast at

2940
01:59:57,119 --> 01:59:59,040
layer 3 as well so i think one of the

2941
01:59:59,040 --> 02:00:00,400
the big issues

2942
02:00:00,400 --> 02:00:02,960
of this is how you know you ensure that

2943
02:00:02,960 --> 02:00:04,800
the applications are going to deal with

2944
02:00:04,800 --> 02:00:07,679
the unexpected uh loss of an assigned

2945
02:00:07,679 --> 02:00:09,679
block if you had a network partitioning

2946
02:00:09,679 --> 02:00:12,159
and then you know partitions merge you

2947
02:00:12,159 --> 02:00:14,080
have duplicate allocation of the same

2948
02:00:14,080 --> 02:00:16,400
block which you would need to trigger up

2949
02:00:16,400 --> 02:00:19,040
to the applications so you know you need

2950
02:00:19,040 --> 02:00:21,040
a decision mechanism who of the two

2951
02:00:21,040 --> 02:00:23,840
allocators loses the block and so um

2952
02:00:23,840 --> 02:00:26,000
yeah i i very much appreciate these

2953
02:00:26,000 --> 02:00:28,719
fully distributed algorithms but uh be

2954
02:00:28,719 --> 02:00:30,080
sure that you really walk through all

2955
02:00:30,080 --> 02:00:32,080
the problems

2956
02:00:32,080 --> 02:00:33,599
well we do have a lot of that covered in

2957
02:00:33,599 --> 02:00:34,880
the draft and hopefully when we

2958
02:00:34,880 --> 02:00:36,320
circulate the draft you'll have a chance

2959
02:00:36,320 --> 02:00:38,400
to take a look at that

2960
02:00:38,400 --> 02:00:39,440
yeah but

2961
02:00:39,440 --> 02:00:41,440
again i think the problem is uh you know

2962
02:00:41,440 --> 02:00:43,599
the understanding

2963
02:00:43,599 --> 02:00:45,520
of the implications going up to the

2964
02:00:45,520 --> 02:00:47,119
application level

2965
02:00:47,119 --> 02:00:48,560
right so the

2966
02:00:48,560 --> 02:00:49,920
i think that's that's what you always

2967
02:00:49,920 --> 02:00:51,360
need to worry

2968
02:00:51,360 --> 02:00:53,360
will you will you be able to have the

2969
02:00:53,360 --> 02:00:55,440
enforcement the verification the

2970
02:00:55,440 --> 02:00:58,080
validation tools that applications

2971
02:00:58,080 --> 02:01:00,719
really behave benignly under under this

2972
02:01:00,719 --> 02:01:02,480
circumstance because something that is

2973
02:01:02,480 --> 02:01:03,520
rare

2974
02:01:03,520 --> 02:01:05,760
is is for especially if you go into

2975
02:01:05,760 --> 02:01:08,320
industrial or any other type of you know

2976
02:01:08,320 --> 02:01:09,920
highly resilient application

2977
02:01:09,920 --> 02:01:12,400
environments you need to think about you

2978
02:01:12,400 --> 02:01:16,679
know test suites or other mechanisms

2979
02:01:22,000 --> 02:01:23,679
all right

2980
02:01:23,679 --> 02:01:25,760
so thank you very much

2981
02:01:25,760 --> 02:01:27,280
uh

2982
02:01:27,280 --> 02:01:30,080
roger so then uh i guess we expect to to

2983
02:01:30,080 --> 02:01:32,239
see some some feedback from from the

2984
02:01:32,239 --> 02:01:35,760
ieee and and get the draft circulated in

2985
02:01:35,760 --> 02:01:38,320
the interior

2986
02:01:42,639 --> 02:01:44,639
roger

2987
02:01:44,639 --> 02:01:46,320
sorry what's the question

2988
02:01:46,320 --> 02:01:48,639
no i'm just saying that then then we

2989
02:01:48,639 --> 02:01:50,800
will see that the draft been circulated

2990
02:01:50,800 --> 02:01:51,520
and

2991
02:01:51,520 --> 02:01:53,280
yeah hopefully

2992
02:01:53,280 --> 02:01:54,960
within a month or two we'll have it and

2993
02:01:54,960 --> 02:01:57,440
we're already preparing a draft uh

2994
02:01:57,440 --> 02:02:00,639
statement to provide to pass it over

2995
02:02:00,639 --> 02:02:02,400
perfect thank you very much

2996
02:02:02,400 --> 02:02:03,920
so for those interested i guess we will

2997
02:02:03,920 --> 02:02:05,440
see a

2998
02:02:05,440 --> 02:02:07,760
a link on the on the mailing list

2999
02:02:07,760 --> 02:02:09,360
about this

3000
02:02:09,360 --> 02:02:11,679
so we're at the end and thanks everyone

3001
02:02:11,679 --> 02:02:13,840
for attending linkedin

3002
02:02:13,840 --> 02:02:16,080
uh i hope you have a good uh

3003
02:02:16,080 --> 02:02:19,199
end of day and follow-up uh meeting so

3004
02:02:19,199 --> 02:02:21,839
good flight uh

3005
02:02:23,679 --> 02:02:27,960
take care bye-bye everyone

3006
02:03:08,159 --> 02:03:10,239
you

