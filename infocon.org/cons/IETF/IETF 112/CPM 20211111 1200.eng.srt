1
00:00:24,400 --> 00:00:26,320
so we start us we

2
00:00:26,320 --> 00:00:27,439
wait

3
00:00:27,439 --> 00:00:31,000
a minute or so

4
00:00:41,680 --> 00:00:45,120
i guess you can start

5
00:00:45,120 --> 00:00:48,320
okay then let's start um this is tcpm

6
00:00:48,320 --> 00:00:49,920
tcp maintenance

7
00:00:49,920 --> 00:00:51,039
um

8
00:00:51,039 --> 00:00:52,559
my name is michael dixon i'm one of

9
00:00:52,559 --> 00:00:55,280
three coaches the other ones are yoshi

10
00:00:55,280 --> 00:00:57,199
and michael

11
00:00:57,199 --> 00:00:58,480
um

12
00:00:58,480 --> 00:01:00,480
and

13
00:01:00,480 --> 00:01:03,120
this is the note well

14
00:01:03,120 --> 00:01:04,879
you should have seen it if you attended

15
00:01:04,879 --> 00:01:06,799
another meeting so

16
00:01:06,799 --> 00:01:09,920
please read it and

17
00:01:10,880 --> 00:01:12,640
do what it says

18
00:01:12,640 --> 00:01:14,960
um we already have a note taker thanks

19
00:01:14,960 --> 00:01:17,200
to gary who

20
00:01:17,200 --> 00:01:19,280
um volunteered again

21
00:01:19,280 --> 00:01:24,000
um and michael is a java scribe so um if

22
00:01:24,000 --> 00:01:25,200
you

23
00:01:25,200 --> 00:01:28,880
want anything reflected at the mic i'll

24
00:01:28,880 --> 00:01:33,119
put in a prefix mic and i think yoshi

25
00:01:33,119 --> 00:01:34,079
will

26
00:01:34,079 --> 00:01:35,920
do the job in case

27
00:01:35,920 --> 00:01:38,720
michael is presenting

28
00:01:38,720 --> 00:01:40,320
if you are submitting a draft to the

29
00:01:40,320 --> 00:01:42,560
ietf and

30
00:01:42,560 --> 00:01:46,159
you want that the tcpm working group

31
00:01:46,159 --> 00:01:50,159
is aware of it um put tcpm in the name

32
00:01:50,159 --> 00:01:52,320
of the id that makes it much easier for

33
00:01:52,320 --> 00:01:54,560
us to find it and

34
00:01:54,560 --> 00:01:57,520
to be aware of it

35
00:01:59,119 --> 00:02:02,079
this is the agenda

36
00:02:02,159 --> 00:02:04,159
a working up status

37
00:02:04,159 --> 00:02:07,280
then we have a couple of presentations

38
00:02:07,280 --> 00:02:08,399
for

39
00:02:08,399 --> 00:02:11,440
working good documents

40
00:02:11,840 --> 00:02:13,680
one is on proportional rate reduction

41
00:02:13,680 --> 00:02:17,920
which is uh from yuchang which is proxy

42
00:02:17,920 --> 00:02:21,920
or who's proxy by me today um cubic an

43
00:02:21,920 --> 00:02:23,840
update an update on yang two

44
00:02:23,840 --> 00:02:26,480
presentations on tcp

45
00:02:26,480 --> 00:02:29,120
ao um one about the

46
00:02:29,120 --> 00:02:32,959
draft and one about an interrupt test

47
00:02:32,959 --> 00:02:35,440
and uh finally on the working group

48
00:02:35,440 --> 00:02:39,519
documents on tcp edo and eos um

49
00:02:39,519 --> 00:02:42,160
where we have a slide from joe and um we

50
00:02:42,160 --> 00:02:43,920
are also proxying it

51
00:02:43,920 --> 00:02:46,239
after that we have um

52
00:02:46,239 --> 00:02:50,000
two three more presentations um two

53
00:02:50,000 --> 00:02:50,959
about

54
00:02:50,959 --> 00:02:53,760
upcoming biz documents

55
00:02:53,760 --> 00:02:56,800
and one about

56
00:02:56,800 --> 00:02:58,400
an

57
00:02:58,400 --> 00:02:59,330
implementation

58
00:02:59,330 --> 00:03:02,429
[Music]

59
00:03:02,840 --> 00:03:05,760
um feature

60
00:03:05,760 --> 00:03:09,680
provided the talk is provided by neil

61
00:03:09,680 --> 00:03:13,720
anyone wants to bash the agenda

62
00:03:20,800 --> 00:03:24,720
if that's not the case then um

63
00:03:24,720 --> 00:03:25,760
this is

64
00:03:25,760 --> 00:03:26,480
the

65
00:03:26,480 --> 00:03:29,040
are the status of the documents we have

66
00:03:29,040 --> 00:03:30,720
um

67
00:03:30,720 --> 00:03:34,959
rfc is 793 bis and um

68
00:03:34,959 --> 00:03:39,680
that is uh after isj last call um

69
00:03:39,680 --> 00:03:43,519
a revised id is needed and wes is

70
00:03:43,519 --> 00:03:46,480
i think there and

71
00:03:46,879 --> 00:03:48,720
can give us an update

72
00:03:48,720 --> 00:03:51,920
yes uh the isg did a really good job

73
00:03:51,920 --> 00:03:54,000
reviewing it and there are a lot of

74
00:03:54,000 --> 00:03:55,360
comments

75
00:03:55,360 --> 00:03:58,319
i've worked through some of them but

76
00:03:58,319 --> 00:04:00,720
i've looked at all of them i've actually

77
00:04:00,720 --> 00:04:03,680
made edits for a good number of them

78
00:04:03,680 --> 00:04:06,400
but there are a few that i had put off

79
00:04:06,400 --> 00:04:08,640
because they involved more

80
00:04:08,640 --> 00:04:10,239
research or homework

81
00:04:10,239 --> 00:04:12,000
a good example is

82
00:04:12,000 --> 00:04:14,640
there was a question about how we treat

83
00:04:14,640 --> 00:04:15,680
uh

84
00:04:15,680 --> 00:04:17,759
source route options

85
00:04:17,759 --> 00:04:19,918
and uh whether

86
00:04:19,918 --> 00:04:23,440
what this document says is is uh totally

87
00:04:23,440 --> 00:04:25,600
consistent with what other rfc is not

88
00:04:25,600 --> 00:04:29,600
about tcp but about ip options say

89
00:04:29,600 --> 00:04:32,000
and so uh i wanted to make sure that we

90
00:04:32,000 --> 00:04:34,000
did the right thing there and also do

91
00:04:34,000 --> 00:04:35,919
something consistent with what

92
00:04:35,919 --> 00:04:38,000
uh real stacks do

93
00:04:38,000 --> 00:04:38,800
so

94
00:04:38,800 --> 00:04:40,639
i've been sort of dragging my feet and

95
00:04:40,639 --> 00:04:42,880
taking more time

96
00:04:42,880 --> 00:04:44,960
to get around to doing the right thing

97
00:04:44,960 --> 00:04:47,120
and looking up a lot more information on

98
00:04:47,120 --> 00:04:48,960
that one and there are a couple of other

99
00:04:48,960 --> 00:04:51,919
issues like that but for the most part

100
00:04:51,919 --> 00:04:55,440
uh the isg comments are pretty clear and

101
00:04:55,440 --> 00:04:56,800
uh

102
00:04:56,800 --> 00:04:58,560
i think it just

103
00:04:58,560 --> 00:05:02,479
needs my attention to get through them

104
00:05:04,800 --> 00:05:08,560
okay do you have a rough timeline

105
00:05:08,560 --> 00:05:09,520
uh

106
00:05:09,520 --> 00:05:11,120
no so

107
00:05:11,120 --> 00:05:13,280
uh i would i would uh

108
00:05:13,280 --> 00:05:16,000
hope to get around to it uh really soon

109
00:05:16,000 --> 00:05:18,800
like within the next week or two but uh

110
00:05:18,800 --> 00:05:22,720
i've hoped that for a few weeks already

111
00:05:22,720 --> 00:05:26,800
okay so uh but in case you need help um

112
00:05:26,800 --> 00:05:28,800
from others um

113
00:05:28,800 --> 00:05:31,360
reach out to the mailing list

114
00:05:31,360 --> 00:05:33,360
i was going to do that on some of these

115
00:05:33,360 --> 00:05:35,680
questions uh i think that will be much

116
00:05:35,680 --> 00:05:38,479
quicker and lead to better results so

117
00:05:38,479 --> 00:05:41,359
i will do that

118
00:05:42,080 --> 00:05:43,680
okay

119
00:05:43,680 --> 00:05:49,160
any questions regarding 793 abyss

120
00:05:56,720 --> 00:05:59,120
if that's not the case we can go through

121
00:05:59,120 --> 00:06:00,800
the list of documents

122
00:06:00,800 --> 00:06:02,160
um

123
00:06:02,160 --> 00:06:04,960
they are in the order of the milestones

124
00:06:04,960 --> 00:06:07,600
which are

125
00:06:07,600 --> 00:06:09,840
um

126
00:06:09,919 --> 00:06:12,720
often in tcpm not taken

127
00:06:12,720 --> 00:06:15,039
that precisely

128
00:06:15,039 --> 00:06:18,479
so we have prr um i have a status update

129
00:06:18,479 --> 00:06:20,240
on that

130
00:06:20,240 --> 00:06:22,000
in the first presentation

131
00:06:22,000 --> 00:06:22,960
um

132
00:06:22,960 --> 00:06:24,560
we have

133
00:06:24,560 --> 00:06:27,039
eight three

134
00:06:27,039 --> 00:06:28,639
twelve bis

135
00:06:28,639 --> 00:06:30,319
um

136
00:06:30,319 --> 00:06:31,680
uh where we where we have also a

137
00:06:31,680 --> 00:06:32,880
presentation

138
00:06:32,880 --> 00:06:35,199
um

139
00:06:39,440 --> 00:06:41,680
said that he wants to do so he has

140
00:06:41,680 --> 00:06:43,840
implemented what is in the current

141
00:06:43,840 --> 00:06:45,360
document

142
00:06:45,360 --> 00:06:46,160
and

143
00:06:46,160 --> 00:06:47,280
um

144
00:06:47,280 --> 00:06:48,800
microsoft is

145
00:06:48,800 --> 00:06:51,520
wants to do some more measurements and

146
00:06:51,520 --> 00:06:52,639
um

147
00:06:52,639 --> 00:06:55,199
present that the next ietf and

148
00:06:55,199 --> 00:06:56,960
based on the outcome of the measurements

149
00:06:56,960 --> 00:06:59,280
the document should be in a

150
00:06:59,280 --> 00:07:01,199
in a pretty good shape

151
00:07:01,199 --> 00:07:04,160
or not but that depends on the um

152
00:07:04,160 --> 00:07:05,680
on the outcome of the measurements so

153
00:07:05,680 --> 00:07:06,960
that's why we

154
00:07:06,960 --> 00:07:08,800
um

155
00:07:08,800 --> 00:07:10,240
don't see any

156
00:07:10,240 --> 00:07:12,319
new information or and

157
00:07:12,319 --> 00:07:14,240
we don't see a presentation here

158
00:07:14,240 --> 00:07:18,880
accurate ecn and generalized ecm um

159
00:07:18,880 --> 00:07:21,360
are both

160
00:07:21,520 --> 00:07:25,359
in the same state as last time because

161
00:07:26,400 --> 00:07:29,360
the frs work going on in tsv

162
00:07:29,360 --> 00:07:31,120
is

163
00:07:31,120 --> 00:07:34,479
not finished yet

164
00:07:34,639 --> 00:07:37,680
we have a presentation on the tcp

165
00:07:37,680 --> 00:07:40,319
yang document

166
00:07:40,319 --> 00:07:43,039
in this meeting we have actually two

167
00:07:43,039 --> 00:07:45,120
presentations regarding

168
00:07:45,120 --> 00:07:48,479
the tcpao

169
00:07:48,479 --> 00:07:51,759
regarding tcpao one is about

170
00:07:51,759 --> 00:07:54,639
the document describing tests and one is

171
00:07:54,639 --> 00:07:55,759
about

172
00:07:55,759 --> 00:07:57,599
an interrupt test

173
00:07:57,599 --> 00:07:59,680
and finally we have

174
00:07:59,680 --> 00:08:04,160
a slide from joe regarding tcp edo

175
00:08:04,160 --> 00:08:06,879
any questions regarding

176
00:08:06,879 --> 00:08:10,039
the documents

177
00:08:18,160 --> 00:08:21,840
if that's not the case um

178
00:08:22,879 --> 00:08:25,039
any additional statement from any of the

179
00:08:25,039 --> 00:08:27,840
coaches

180
00:08:29,599 --> 00:08:31,919
here this is michael speaking can you

181
00:08:31,919 --> 00:08:34,240
hear me

182
00:08:36,880 --> 00:08:39,679
this may be a good opportunity for a

183
00:08:39,679 --> 00:08:40,958
personal

184
00:08:40,958 --> 00:08:43,440
announcement that this meeting is most

185
00:08:43,440 --> 00:08:44,560
likely

186
00:08:44,560 --> 00:08:47,839
my last meeting at the chair desk

187
00:08:47,839 --> 00:08:51,279
so i've decided to offer to step down

188
00:08:51,279 --> 00:08:54,560
to open room for um the next generation

189
00:08:54,560 --> 00:08:56,880
of tcp researchers so that they can get

190
00:08:56,880 --> 00:08:58,560
management experience

191
00:08:58,560 --> 00:09:00,959
the transit that transition will not

192
00:09:00,959 --> 00:09:03,680
immediately take place because uh

193
00:09:03,680 --> 00:09:05,760
since i still want to wrap up some work

194
00:09:05,760 --> 00:09:08,399
uh the most important one is the top one

195
00:09:08,399 --> 00:09:10,080
on this list here

196
00:09:10,080 --> 00:09:12,640
but once 793 bis

197
00:09:12,640 --> 00:09:15,519
has passed isg evaluation um and maybe

198
00:09:15,519 --> 00:09:17,440
some other things are done then

199
00:09:17,440 --> 00:09:19,279
i'll step down

200
00:09:19,279 --> 00:09:21,680
and as i said i'll open room

201
00:09:21,680 --> 00:09:22,480
for

202
00:09:22,480 --> 00:09:24,399
somebody else to gain management

203
00:09:24,399 --> 00:09:26,959
experience i will stay still stay around

204
00:09:26,959 --> 00:09:27,839
so

205
00:09:27,839 --> 00:09:30,080
i will just go to quinoa to work in tcpm

206
00:09:30,080 --> 00:09:32,320
but not on the chair desk

207
00:09:32,320 --> 00:09:34,880
so this might also be an opportunity for

208
00:09:34,880 --> 00:09:37,040
best to speed up to work on seven i3

209
00:09:37,040 --> 00:09:38,959
this because this is actually a

210
00:09:38,959 --> 00:09:42,719
showstopper so thanks

211
00:09:44,640 --> 00:09:46,000
yeah thank you

212
00:09:46,000 --> 00:09:48,240
and thank you for all the work you did

213
00:09:48,240 --> 00:09:51,200
for tcpm and um

214
00:09:51,200 --> 00:09:52,800
i hope we

215
00:09:52,800 --> 00:09:54,560
um will still

216
00:09:54,560 --> 00:09:56,720
um have you in the working group as a

217
00:09:56,720 --> 00:10:00,320
contributor and reviewer and

218
00:10:00,320 --> 00:10:01,760
a person that can

219
00:10:01,760 --> 00:10:03,680
share his

220
00:10:03,680 --> 00:10:06,399
knowledgeable tcp

221
00:10:06,399 --> 00:10:08,800
thank you

222
00:10:09,760 --> 00:10:11,030
okay um

223
00:10:11,030 --> 00:10:14,110
[Music]

224
00:10:15,120 --> 00:10:18,399
the first

225
00:10:18,399 --> 00:10:22,000
presentation should be

226
00:10:22,000 --> 00:10:24,240
um

227
00:10:26,880 --> 00:10:30,360
let me see

228
00:10:32,560 --> 00:10:34,079
so this is uh

229
00:10:34,079 --> 00:10:35,360
um

230
00:10:35,360 --> 00:10:38,240
regarding um propulsion rate reduction

231
00:10:38,240 --> 00:10:39,279
um

232
00:10:39,279 --> 00:10:41,440
the draft is

233
00:10:41,440 --> 00:10:44,800
i think um not active anymore

234
00:10:44,800 --> 00:10:47,680
we contacted the

235
00:10:47,680 --> 00:10:50,000
the authors and

236
00:10:50,000 --> 00:10:51,440
basically they are

237
00:10:51,440 --> 00:10:52,560
um

238
00:10:52,560 --> 00:10:53,920
pretty busy with

239
00:10:53,920 --> 00:10:56,240
other things but

240
00:10:56,240 --> 00:10:58,399
they um

241
00:10:58,399 --> 00:11:00,959
they stated that they will

242
00:11:00,959 --> 00:11:02,640
um

243
00:11:02,640 --> 00:11:04,480
provide a new version

244
00:11:04,480 --> 00:11:05,760
on

245
00:11:05,760 --> 00:11:09,040
in the time scale of the next ietf

246
00:11:09,040 --> 00:11:10,800
and

247
00:11:10,800 --> 00:11:14,720
this is the list of

248
00:11:14,720 --> 00:11:16,000
changes

249
00:11:16,000 --> 00:11:17,040
they

250
00:11:17,040 --> 00:11:18,959
currently have in mind which need to be

251
00:11:18,959 --> 00:11:20,720
addressed before

252
00:11:20,720 --> 00:11:24,800
the next version which is two bug fixes

253
00:11:24,800 --> 00:11:25,160
and

254
00:11:25,160 --> 00:11:26,880
[Music]

255
00:11:26,880 --> 00:11:30,560
some clarifications

256
00:11:30,560 --> 00:11:34,079
especially on

257
00:11:35,120 --> 00:11:36,720
interactions between

258
00:11:36,720 --> 00:11:38,560
prr and reg

259
00:11:38,560 --> 00:11:41,440
because at the point of time where

260
00:11:41,440 --> 00:11:45,279
prr was written rec didn't exist so

261
00:11:45,279 --> 00:11:48,000
there are some

262
00:11:48,000 --> 00:11:50,639
some adoptions also

263
00:11:50,639 --> 00:11:52,880
based on newer developments on the

264
00:11:52,880 --> 00:11:54,839
documents

265
00:11:54,839 --> 00:11:56,560
um uh

266
00:11:56,560 --> 00:11:59,040
are there any comments are there any

267
00:11:59,040 --> 00:12:00,639
additional things the author should

268
00:12:00,639 --> 00:12:02,959
address so um

269
00:12:02,959 --> 00:12:04,240
they

270
00:12:04,240 --> 00:12:06,959
said they will read the notes

271
00:12:06,959 --> 00:12:08,079
and

272
00:12:08,079 --> 00:12:11,839
any feedback will be addressed

273
00:12:16,720 --> 00:12:19,279
yoshi

274
00:12:21,200 --> 00:12:23,600
ah hello i just curious about

275
00:12:23,600 --> 00:12:26,079
implementation status of this one it is

276
00:12:26,079 --> 00:12:28,399
already main running in the corner why

277
00:12:28,399 --> 00:12:30,720
not

278
00:12:30,959 --> 00:12:33,279
because now i see you know the beast

279
00:12:33,279 --> 00:12:36,079
version is slightly different from

280
00:12:36,079 --> 00:12:38,480
original version so there are some

281
00:12:38,480 --> 00:12:40,959
logic updates so i just would like to

282
00:12:40,959 --> 00:12:45,399
know the status of this implementation

283
00:12:52,240 --> 00:12:54,639
i'm not sure if any of the um

284
00:12:54,639 --> 00:12:58,000
draft authors are on the uh call but

285
00:12:58,000 --> 00:13:00,079
um i'm in close communication with them

286
00:13:00,079 --> 00:13:02,720
and the um i believe the

287
00:13:02,720 --> 00:13:05,200
this is going to basically

288
00:13:05,200 --> 00:13:09,519
um reflect the latest linux tcp uh prr

289
00:13:09,519 --> 00:13:12,000
there have been a number of um

290
00:13:12,000 --> 00:13:15,360
minor changes and fixes uh i guess

291
00:13:15,360 --> 00:13:18,160
changes really not fixes over the years

292
00:13:18,160 --> 00:13:21,839
and we wanted to update the

293
00:13:21,839 --> 00:13:23,839
documents or reflect the experience in

294
00:13:23,839 --> 00:13:27,279
the linux tcp stack so it will cover

295
00:13:27,279 --> 00:13:31,920
logic that's implemented in linux tcp

296
00:13:33,519 --> 00:13:34,560
richard

297
00:13:34,560 --> 00:13:36,720
so i just wanted to add on this that

298
00:13:36,720 --> 00:13:38,639
i've provided some of the feedback based

299
00:13:38,639 --> 00:13:40,240
on my

300
00:13:40,240 --> 00:13:43,360
experience of prr in the freebsd stack

301
00:13:43,360 --> 00:13:45,760
so this has not yet been fully committed

302
00:13:45,760 --> 00:13:47,519
especially the one that is running

303
00:13:47,519 --> 00:13:50,079
without a selective acknowledgement

304
00:13:50,079 --> 00:13:51,040
but

305
00:13:51,040 --> 00:13:52,560
it

306
00:13:52,560 --> 00:13:54,560
happens where

307
00:13:54,560 --> 00:13:56,959
or will be addressed in an upcoming

308
00:13:56,959 --> 00:14:00,439
revision hopefully

309
00:14:06,880 --> 00:14:10,160
but uh you provided the comments to the

310
00:14:10,160 --> 00:14:12,320
authors already

311
00:14:12,320 --> 00:14:13,920
that is correct yes

312
00:14:13,920 --> 00:14:17,439
okay so the authors are aware of it

313
00:14:20,079 --> 00:14:23,560
any other comments

314
00:14:30,160 --> 00:14:32,240
okay if that's not the case then i would

315
00:14:32,240 --> 00:14:36,639
say um the next focus is cubic and um

316
00:14:36,639 --> 00:14:40,399
videos up um you can run the slides on

317
00:14:40,399 --> 00:14:42,000
your own

318
00:14:42,000 --> 00:14:45,199
they have been uploaded

319
00:14:45,199 --> 00:14:48,639
yeah am i am i audible

320
00:14:48,800 --> 00:14:51,199
yes you are audible

321
00:14:51,199 --> 00:14:53,040
thank you um

322
00:14:53,040 --> 00:14:56,160
so i actually forgot how to do the slice

323
00:14:56,160 --> 00:14:57,040
thing

324
00:14:57,040 --> 00:14:58,800
on the on the

325
00:14:58,800 --> 00:15:02,560
below your name you have uh

326
00:15:02,560 --> 00:15:05,760
to to next to your next to the hand icon

327
00:15:05,760 --> 00:15:07,600
there is a document icon and if you

328
00:15:07,600 --> 00:15:08,959
click on that

329
00:15:08,959 --> 00:15:11,120
yep

330
00:15:11,120 --> 00:15:13,120
you should see a list of documents and

331
00:15:13,120 --> 00:15:15,760
you can select your

332
00:15:15,760 --> 00:15:18,240
so do you see the slides or

333
00:15:18,240 --> 00:15:20,320
not yet i think you have to select it

334
00:15:20,320 --> 00:15:21,760
and then

335
00:15:21,760 --> 00:15:24,839
i selected it but it just opens on

336
00:15:24,839 --> 00:15:28,160
another tab

337
00:15:30,720 --> 00:15:32,480
well done so

338
00:15:32,480 --> 00:15:35,120
yeah i just

339
00:15:36,480 --> 00:15:39,199
i am not sure how to share this with you

340
00:15:39,199 --> 00:15:41,839
guys

341
00:15:42,079 --> 00:15:45,120
okay and then i can do that it's okay if

342
00:15:45,120 --> 00:15:48,240
it's okay if you want to um

343
00:15:48,240 --> 00:15:51,519
take over i i will

344
00:15:51,519 --> 00:15:53,759
let you know yeah thank you very much

345
00:15:53,759 --> 00:15:55,680
i'm sorry i couldn't

346
00:15:55,680 --> 00:15:58,239
no problem

347
00:15:58,800 --> 00:16:02,959
okay uh thank you um hi everyone

348
00:16:02,959 --> 00:16:05,839
uh so you know in in the past year we

349
00:16:05,839 --> 00:16:08,240
have been making some updates to cubic

350
00:16:08,240 --> 00:16:11,040
and we are trying to adapt it to the

351
00:16:11,040 --> 00:16:12,240
recent

352
00:16:12,240 --> 00:16:14,480
based on the recent

353
00:16:14,480 --> 00:16:17,360
deployment experience in in tcp and

354
00:16:17,360 --> 00:16:19,120
quick stacks

355
00:16:19,120 --> 00:16:20,959
and a lot of folks have contributed to

356
00:16:20,959 --> 00:16:23,519
this effort and we're really grateful

357
00:16:23,519 --> 00:16:24,639
for that

358
00:16:24,639 --> 00:16:28,320
um next slide please

359
00:16:30,079 --> 00:16:31,839
so um

360
00:16:31,839 --> 00:16:33,759
i think around two months ago when you

361
00:16:33,759 --> 00:16:35,440
know the chairs were concluding the work

362
00:16:35,440 --> 00:16:37,199
group last call

363
00:16:37,199 --> 00:16:38,240
we

364
00:16:38,240 --> 00:16:40,880
received a final final

365
00:16:40,880 --> 00:16:43,279
review from marco and

366
00:16:43,279 --> 00:16:46,079
this was quite an extensive review and

367
00:16:46,079 --> 00:16:47,680
i'm really

368
00:16:47,680 --> 00:16:50,800
glad that it raised some profound issues

369
00:16:50,800 --> 00:16:53,199
that we probably missed

370
00:16:53,199 --> 00:16:55,600
so big thanks to marco and everyone who

371
00:16:55,600 --> 00:16:57,199
has helped with

372
00:16:57,199 --> 00:16:59,120
you know writing peers or providing

373
00:16:59,120 --> 00:17:00,959
solution solutions

374
00:17:00,959 --> 00:17:02,720
and all the discussion that is happening

375
00:17:02,720 --> 00:17:06,079
on github so i can cover these issues

376
00:17:06,079 --> 00:17:08,959
briefly just that everyone's aware was

377
00:17:08,959 --> 00:17:12,400
changing in cubic base

378
00:17:12,480 --> 00:17:14,880
the first one is because cubic is more

379
00:17:14,880 --> 00:17:16,079
aggressive

380
00:17:16,079 --> 00:17:21,039
than reno so we have um mentioned that

381
00:17:21,039 --> 00:17:23,919
in the changes we have added

382
00:17:23,919 --> 00:17:26,160
that cubic

383
00:17:26,160 --> 00:17:30,480
uh basically updates rfc 5681 and this

384
00:17:30,480 --> 00:17:32,480
is because of this

385
00:17:32,480 --> 00:17:36,160
the the beta factor which is 0.7 instead

386
00:17:36,160 --> 00:17:38,720
of 0.5

387
00:17:38,720 --> 00:17:42,880
uh next point is about um when we have a

388
00:17:42,880 --> 00:17:45,280
slow start overshoot

389
00:17:45,280 --> 00:17:47,600
cubic only reduces condition window to

390
00:17:47,600 --> 00:17:50,400
70 percent instead of 50

391
00:17:50,400 --> 00:17:53,120
in case of reno and this

392
00:17:53,120 --> 00:17:57,120
means that cubic's window is 40 higher

393
00:17:57,120 --> 00:17:59,760
than reno so this could cause high

394
00:17:59,760 --> 00:18:02,000
packet loss during recovery but could

395
00:18:02,000 --> 00:18:04,160
take multiple rounds

396
00:18:04,160 --> 00:18:06,640
and so we have recommended

397
00:18:06,640 --> 00:18:09,440
uh the implementations or implementers

398
00:18:09,440 --> 00:18:10,240
to

399
00:18:10,240 --> 00:18:11,919
implement high start plus plus with

400
00:18:11,919 --> 00:18:13,520
their cubic

401
00:18:13,520 --> 00:18:15,200
implementations and and that's the

402
00:18:15,200 --> 00:18:16,720
experience that we have from the

403
00:18:16,720 --> 00:18:19,120
deployment as most of the

404
00:18:19,120 --> 00:18:22,559
implementations are ready to that

405
00:18:22,559 --> 00:18:24,640
and um

406
00:18:24,640 --> 00:18:26,400
as i was saying it could take a bit more

407
00:18:26,400 --> 00:18:30,400
than one you know recovery cycle to

408
00:18:30,400 --> 00:18:32,720
compensate for the two times overshoot

409
00:18:32,720 --> 00:18:35,200
in the slow start we are advising the

410
00:18:35,200 --> 00:18:37,520
implementers to you know evaluate their

411
00:18:37,520 --> 00:18:40,240
choice of the first multiplicative

412
00:18:40,240 --> 00:18:41,520
decrease

413
00:18:41,520 --> 00:18:43,600
after you know whether

414
00:18:43,600 --> 00:18:45,360
they receive a packet loss or they

415
00:18:45,360 --> 00:18:48,160
receive an ec yak so

416
00:18:48,160 --> 00:18:49,520
this is something

417
00:18:49,520 --> 00:18:51,440
they should be evaluating and we have

418
00:18:51,440 --> 00:18:55,360
mentioned that specifically in the draft

419
00:18:55,360 --> 00:18:57,760
um the next bullet is about

420
00:18:57,760 --> 00:19:00,960
using prr to reduce the sending rate

421
00:19:00,960 --> 00:19:05,039
slowly um you know during loss recovery

422
00:19:05,039 --> 00:19:08,240
and uh as marco pointed out the the

423
00:19:08,240 --> 00:19:11,520
draft uh you know when he reviewed it it

424
00:19:11,520 --> 00:19:13,600
incorrectly mentioned

425
00:19:13,600 --> 00:19:14,480
um

426
00:19:14,480 --> 00:19:16,559
employing a fast recovery for all

427
00:19:16,559 --> 00:19:18,960
congestion events so this should only be

428
00:19:18,960 --> 00:19:21,120
done for packet loss and not for easy

429
00:19:21,120 --> 00:19:23,200
and related condition events and now we

430
00:19:23,200 --> 00:19:25,360
have updated that

431
00:19:25,360 --> 00:19:28,480
um last point on the slide

432
00:19:28,480 --> 00:19:30,880
similar to reno the performance of cubic

433
00:19:30,880 --> 00:19:32,240
you know as a loss-based congestion

434
00:19:32,240 --> 00:19:34,799
control it does suffer in wireless

435
00:19:34,799 --> 00:19:36,160
networks

436
00:19:36,160 --> 00:19:37,600
because the packet loss is not

437
00:19:37,600 --> 00:19:40,559
necessarily you know giving us a good

438
00:19:40,559 --> 00:19:42,559
signaling of the bottleneck capacity so

439
00:19:42,559 --> 00:19:45,600
we have added some text around that

440
00:19:45,600 --> 00:19:49,639
um next slide please

441
00:19:52,000 --> 00:19:52,799
um

442
00:19:52,799 --> 00:19:54,160
so

443
00:19:54,160 --> 00:19:55,919
these are also some

444
00:19:55,919 --> 00:19:59,350
important design changes so cubic has um

445
00:19:59,350 --> 00:20:00,640
[Music]

446
00:20:00,640 --> 00:20:03,520
you know lower window reduction and it

447
00:20:03,520 --> 00:20:06,880
also reaches w max faster than reno so

448
00:20:06,880 --> 00:20:08,159
it really

449
00:20:08,159 --> 00:20:11,200
it effectively means that it has

450
00:20:11,200 --> 00:20:14,720
a shallower salty than reno

451
00:20:14,720 --> 00:20:18,000
and uh we have added some guidance

452
00:20:18,000 --> 00:20:20,000
regarding you know buffer bloat and

453
00:20:20,000 --> 00:20:21,760
queue management

454
00:20:21,760 --> 00:20:23,679
where the new aqms the new

455
00:20:23,679 --> 00:20:26,799
implementations of eqm's probably could

456
00:20:26,799 --> 00:20:29,520
mitigate some buffer blood by for

457
00:20:29,520 --> 00:20:31,200
example setting

458
00:20:31,200 --> 00:20:34,880
lower thresholds for the queue size

459
00:20:34,880 --> 00:20:35,840
um

460
00:20:35,840 --> 00:20:38,000
next point is uh

461
00:20:38,000 --> 00:20:41,039
very important and it is about

462
00:20:41,039 --> 00:20:42,880
how the draft uh

463
00:20:42,880 --> 00:20:45,360
the sorry how the base strap

464
00:20:45,360 --> 00:20:47,679
originally had a lower limit of 2 for

465
00:20:47,679 --> 00:20:49,840
congestion window

466
00:20:49,840 --> 00:20:51,440
and

467
00:20:51,440 --> 00:20:53,520
there is a crucial distinction between a

468
00:20:53,520 --> 00:20:55,679
congestion event due to a packet loss

469
00:20:55,679 --> 00:20:59,039
versus due to ec ack

470
00:20:59,039 --> 00:21:01,360
i mean we do need a window of two

471
00:21:01,360 --> 00:21:03,360
packets in case of packet loss to

472
00:21:03,360 --> 00:21:06,400
perform loss recovery but for

473
00:21:06,400 --> 00:21:09,200
ece markings we need to keep reducing

474
00:21:09,200 --> 00:21:13,120
even beyond a congestion window of one

475
00:21:13,120 --> 00:21:15,360
by using a retransmit timer type backs

476
00:21:15,360 --> 00:21:17,600
off exponentially so i think this is

477
00:21:17,600 --> 00:21:18,480
some

478
00:21:18,480 --> 00:21:20,159
something that implementations need to

479
00:21:20,159 --> 00:21:21,360
be

480
00:21:21,360 --> 00:21:25,120
doing i don't think linux does this or

481
00:21:25,120 --> 00:21:27,440
um other implementations take care of

482
00:21:27,440 --> 00:21:28,400
this

483
00:21:28,400 --> 00:21:30,320
behavior this is clearly mentioned in

484
00:21:30,320 --> 00:21:33,600
the roc 3168 and i think

485
00:21:33,600 --> 00:21:36,080
we should implement this

486
00:21:36,080 --> 00:21:37,440
um

487
00:21:37,440 --> 00:21:39,840
so another important point that has been

488
00:21:39,840 --> 00:21:41,280
discussed in

489
00:21:41,280 --> 00:21:44,320
in detail on github is better to use

490
00:21:44,320 --> 00:21:45,840
flight size

491
00:21:45,840 --> 00:21:47,760
or congestion window in the reduction

492
00:21:47,760 --> 00:21:50,080
equation

493
00:21:50,080 --> 00:21:51,679
um

494
00:21:51,679 --> 00:21:54,320
the rfc series

495
00:21:54,320 --> 00:21:56,720
you know the standards rfcs they

496
00:21:56,720 --> 00:21:58,960
all have

497
00:21:58,960 --> 00:22:01,600
they all use flight size and not save

498
00:22:01,600 --> 00:22:03,600
wind

499
00:22:03,600 --> 00:22:06,880
but there could be an issue of

500
00:22:06,880 --> 00:22:08,640
there could be an issue that the flight

501
00:22:08,640 --> 00:22:11,120
size sometimes is very low especially

502
00:22:11,120 --> 00:22:13,840
for the rate limited apps when the loss

503
00:22:13,840 --> 00:22:15,919
occurs so

504
00:22:15,919 --> 00:22:18,159
uh the best way to mitigate this issue

505
00:22:18,159 --> 00:22:22,640
uh is to implement rxc7661

506
00:22:22,640 --> 00:22:25,360
so we have recommended that and

507
00:22:25,360 --> 00:22:27,840
and some implementations you know for

508
00:22:27,840 --> 00:22:31,120
example the next currently used event

509
00:22:31,120 --> 00:22:34,720
we have left that as an option as well

510
00:22:34,720 --> 00:22:38,360
next slide please

511
00:22:43,120 --> 00:22:44,960
these are some of the editorial changes

512
00:22:44,960 --> 00:22:48,080
um there was a bug in the average cubic

513
00:22:48,080 --> 00:22:50,559
window equation that neil had found uh

514
00:22:50,559 --> 00:22:53,679
thanks neil so we have fixed that

515
00:22:53,679 --> 00:22:55,840
the next point is about

516
00:22:55,840 --> 00:22:58,640
rearranging the algorithms for spurious

517
00:22:58,640 --> 00:23:01,440
events detection um we now recommend the

518
00:23:01,440 --> 00:23:03,919
standard star track

519
00:23:03,919 --> 00:23:06,720
forward rto recovery rfc first and then

520
00:23:06,720 --> 00:23:09,280
we provide some examples or references

521
00:23:09,280 --> 00:23:12,480
for experimental rfcs

522
00:23:12,480 --> 00:23:13,280
um

523
00:23:13,280 --> 00:23:15,360
then we have added cubic's response to

524
00:23:15,360 --> 00:23:17,760
certain events like sudden increase or

525
00:23:17,760 --> 00:23:20,400
decrease in capacity and cubic is more

526
00:23:20,400 --> 00:23:24,880
aggressive than reno in both the cases

527
00:23:24,880 --> 00:23:27,440
last three are some simple editorial

528
00:23:27,440 --> 00:23:28,570
changes

529
00:23:28,570 --> 00:23:30,159
[Music]

530
00:23:30,159 --> 00:23:33,039
next slide please

531
00:23:34,960 --> 00:23:35,679
uh

532
00:23:35,679 --> 00:23:37,520
this one is kind of a duplicate of the

533
00:23:37,520 --> 00:23:41,840
next one so we can skip to the next one

534
00:23:42,480 --> 00:23:44,080
thank you

535
00:23:44,080 --> 00:23:46,960
so this is an open issue that um

536
00:23:46,960 --> 00:23:49,200
i would and we would like some feedback

537
00:23:49,200 --> 00:23:50,880
from the working group we have some

538
00:23:50,880 --> 00:23:52,960
feedback already on the github issue but

539
00:23:52,960 --> 00:23:55,919
if you have not had a chance to look

540
00:23:55,919 --> 00:23:59,120
um i can describe this issue so marco

541
00:23:59,120 --> 00:24:01,440
has raised

542
00:24:01,440 --> 00:24:03,279
some objections about the spurious

543
00:24:03,279 --> 00:24:05,919
detection and the conditions response to

544
00:24:05,919 --> 00:24:07,679
those events

545
00:24:07,679 --> 00:24:09,440
and to provide some context so there are

546
00:24:09,440 --> 00:24:11,760
two types of spurious events um

547
00:24:11,760 --> 00:24:14,240
at least for tcp uh there's

548
00:24:14,240 --> 00:24:15,760
rtos

549
00:24:15,760 --> 00:24:16,880
which is for

550
00:24:16,880 --> 00:24:18,640
applicable for tcp and there are

551
00:24:18,640 --> 00:24:20,559
spurious retransmits detected by

552
00:24:20,559 --> 00:24:22,799
acknowledgments and that's applicable

553
00:24:22,799 --> 00:24:25,200
for both tcp and quick

554
00:24:25,200 --> 00:24:28,960
so the first issue is

555
00:24:29,120 --> 00:24:31,520
that cubic is modifying a standards

556
00:24:31,520 --> 00:24:33,440
track rfc

557
00:24:33,440 --> 00:24:35,440
4015

558
00:24:35,440 --> 00:24:37,520
which um you know defines our response

559
00:24:37,520 --> 00:24:39,919
to spurious rtos

560
00:24:39,919 --> 00:24:40,799
um

561
00:24:40,799 --> 00:24:43,679
the rfc port event 4015 it sets the

562
00:24:43,679 --> 00:24:45,840
condition window to you know flight size

563
00:24:45,840 --> 00:24:48,559
plus minimum of bisect plus initial

564
00:24:48,559 --> 00:24:50,720
window

565
00:24:50,720 --> 00:24:52,159
and this

566
00:24:52,159 --> 00:24:53,919
but in cubic we are recommending to

567
00:24:53,919 --> 00:24:55,520
restore the condition window to its

568
00:24:55,520 --> 00:24:57,760
previous state before the reduction was

569
00:24:57,760 --> 00:24:58,799
applied

570
00:24:58,799 --> 00:25:01,360
so this is the issue um i will come back

571
00:25:01,360 --> 00:25:03,919
to the solution in the next slide

572
00:25:03,919 --> 00:25:05,840
second uh issue is

573
00:25:05,840 --> 00:25:08,000
cubic is currently specifying a response

574
00:25:08,000 --> 00:25:11,200
to both types of spurious events

575
00:25:11,200 --> 00:25:14,320
and uh marco said in smoke in certain

576
00:25:14,320 --> 00:25:16,960
networks for example in mobile networks

577
00:25:16,960 --> 00:25:19,039
a path change could

578
00:25:19,039 --> 00:25:21,200
increase reordering and thus it can

579
00:25:21,200 --> 00:25:24,000
result in spurious fast retransmit

580
00:25:24,000 --> 00:25:25,919
and at the same time

581
00:25:25,919 --> 00:25:27,760
the bottleneck capacity might get

582
00:25:27,760 --> 00:25:28,799
reduced

583
00:25:28,799 --> 00:25:31,200
so if that happens then

584
00:25:31,200 --> 00:25:33,520
um you know restoring to the previous

585
00:25:33,520 --> 00:25:35,360
condition window might not be such a

586
00:25:35,360 --> 00:25:37,279
good idea

587
00:25:37,279 --> 00:25:39,600
and

588
00:25:39,679 --> 00:25:42,320
that's why he said

589
00:25:42,320 --> 00:25:44,159
there is no previous

590
00:25:44,159 --> 00:25:49,039
rfc that talks about restoring state

591
00:25:49,039 --> 00:25:50,080
due to

592
00:25:50,080 --> 00:25:53,440
spurious fast retransmit events

593
00:25:53,440 --> 00:25:55,520
the third one is currently we don't

594
00:25:55,520 --> 00:25:58,320
exclude the cases when the ack detecting

595
00:25:58,320 --> 00:26:01,600
spurs event has ece set on it so this is

596
00:26:01,600 --> 00:26:04,159
a simple one i think we can fix this one

597
00:26:04,159 --> 00:26:05,200
and

598
00:26:05,200 --> 00:26:07,679
the last one is we don't specify or

599
00:26:07,679 --> 00:26:10,000
cubic doesn't specify any mechanism to

600
00:26:10,000 --> 00:26:12,000
adjust rtos

601
00:26:12,000 --> 00:26:14,080
acknowledgement thresholds you know time

602
00:26:14,080 --> 00:26:17,360
thresholds etc to avoid any future

603
00:26:17,360 --> 00:26:19,679
spurious events

604
00:26:19,679 --> 00:26:23,240
next slide please

605
00:26:24,640 --> 00:26:27,200
so um as i was saying the first point

606
00:26:27,200 --> 00:26:30,159
about violating the standards track rc

607
00:26:30,159 --> 00:26:32,159
is a bit tricky

608
00:26:32,159 --> 00:26:36,240
as um the response defined in rfc 4015

609
00:26:36,240 --> 00:26:37,200
is

610
00:26:37,200 --> 00:26:39,919
uh is a bit conservative

611
00:26:39,919 --> 00:26:42,159
uh because the condition window is set

612
00:26:42,159 --> 00:26:43,840
to uh

613
00:26:43,840 --> 00:26:46,320
not to the previous value but to flight

614
00:26:46,320 --> 00:26:48,720
size plus a minimum of bite sac plus

615
00:26:48,720 --> 00:26:51,039
initial window most likely

616
00:26:51,039 --> 00:26:53,039
it will end up to be flight size plus

617
00:26:53,039 --> 00:26:55,919
initial window um in my opinion so this

618
00:26:55,919 --> 00:26:57,120
is too low

619
00:26:57,120 --> 00:26:59,520
um and i think some pro folks

620
00:26:59,520 --> 00:27:01,760
won't be happy with it so if you have an

621
00:27:01,760 --> 00:27:04,240
opinion about this and how do we proceed

622
00:27:04,240 --> 00:27:07,360
or deal with this problem um we really

623
00:27:07,360 --> 00:27:10,640
like to hear back from you

624
00:27:10,640 --> 00:27:13,279
second one uh spurious factory transmits

625
00:27:13,279 --> 00:27:15,919
so these are much more common

626
00:27:15,919 --> 00:27:18,240
for tcp and these are the only events

627
00:27:18,240 --> 00:27:19,760
more quick so

628
00:27:19,760 --> 00:27:22,720
i think um if there is no previous rfc

629
00:27:22,720 --> 00:27:25,840
that provides any guidance

630
00:27:25,840 --> 00:27:26,960
um

631
00:27:26,960 --> 00:27:29,840
perhaps we can record cubic's response

632
00:27:29,840 --> 00:27:32,799
to these events um

633
00:27:32,799 --> 00:27:35,679
and again this is the another topic that

634
00:27:35,679 --> 00:27:36,559
um

635
00:27:36,559 --> 00:27:37,679
you know

636
00:27:37,679 --> 00:27:39,840
any input would be very

637
00:27:39,840 --> 00:27:41,279
any any input on this would be

638
00:27:41,279 --> 00:27:43,679
appreciated um the third one we can fix

639
00:27:43,679 --> 00:27:46,000
uh in the draft that's not that's an

640
00:27:46,000 --> 00:27:47,520
easy fix

641
00:27:47,520 --> 00:27:50,399
and for the last point um i think

642
00:27:50,399 --> 00:27:52,559
a lot of us agreed that

643
00:27:52,559 --> 00:27:54,159
we would need a separate draft to cover

644
00:27:54,159 --> 00:27:55,919
this as we want to keep the loss

645
00:27:55,919 --> 00:27:57,760
recovery changes separate from the

646
00:27:57,760 --> 00:27:59,919
congestion control

647
00:27:59,919 --> 00:28:00,799
um

648
00:28:00,799 --> 00:28:03,840
next slide please

649
00:28:04,960 --> 00:28:07,279
so we will continue to fix any open

650
00:28:07,279 --> 00:28:09,919
issues these are um you know as next

651
00:28:09,919 --> 00:28:10,880
steps

652
00:28:10,880 --> 00:28:12,640
and once uh

653
00:28:12,640 --> 00:28:14,720
whatever issues are open right now are

654
00:28:14,720 --> 00:28:16,559
resolved we will again

655
00:28:16,559 --> 00:28:18,559
request the chairs to conclude the work

656
00:28:18,559 --> 00:28:19,919
group last call

657
00:28:19,919 --> 00:28:21,679
so if you haven't read the draft please

658
00:28:21,679 --> 00:28:24,799
read it if you plan to read it

659
00:28:24,799 --> 00:28:26,480
um

660
00:28:26,480 --> 00:28:28,399
we would like to take care of the issues

661
00:28:28,399 --> 00:28:31,840
as soon as possible thank you

662
00:28:33,520 --> 00:28:35,360
thank you for the presentation and

663
00:28:35,360 --> 00:28:36,399
update

664
00:28:36,399 --> 00:28:37,520
comments

665
00:28:37,520 --> 00:28:40,520
questions

666
00:28:51,279 --> 00:28:52,399
hi vinnie

667
00:28:52,399 --> 00:28:54,240
good job presenting

668
00:28:54,240 --> 00:28:56,559
i just had a very quick comment

669
00:28:56,559 --> 00:28:58,720
about something you said verbally i

670
00:28:58,720 --> 00:28:59,840
don't think it was actually on the

671
00:28:59,840 --> 00:29:00,880
slides

672
00:29:00,880 --> 00:29:01,919
um

673
00:29:01,919 --> 00:29:03,760
you talked about the problems with

674
00:29:03,760 --> 00:29:05,840
wireless networks

675
00:29:05,840 --> 00:29:07,840
losing packets

676
00:29:07,840 --> 00:29:10,799
i think actually the big problem

677
00:29:10,799 --> 00:29:13,360
is not packet loss because wi-fi link

678
00:29:13,360 --> 00:29:14,320
player acknowledgement and

679
00:29:14,320 --> 00:29:17,600
retransmission is pretty good

680
00:29:17,600 --> 00:29:18,960
the bigger problem is the huge

681
00:29:18,960 --> 00:29:22,720
variability because wi-fi can vary from

682
00:29:22,720 --> 00:29:24,640
a gigabit or more

683
00:29:24,640 --> 00:29:27,039
to a megabit per second

684
00:29:27,039 --> 00:29:29,039
and

685
00:29:29,039 --> 00:29:30,559
that happens if you just walk around the

686
00:29:30,559 --> 00:29:32,640
house with your phone or if someone else

687
00:29:32,640 --> 00:29:34,640
walks around and gets between your

688
00:29:34,640 --> 00:29:36,880
computer and the access point so i think

689
00:29:36,880 --> 00:29:38,880
the bigger problem

690
00:29:38,880 --> 00:29:40,080
uh and i don't know whether the draft

691
00:29:40,080 --> 00:29:42,159
talks about this uh but since you

692
00:29:42,159 --> 00:29:44,000
mentioned it i just wanted to bring it

693
00:29:44,000 --> 00:29:45,039
up

694
00:29:45,039 --> 00:29:47,440
the bigger problem is that if your wi-fi

695
00:29:47,440 --> 00:29:49,840
rate instantly drops from 500 megabits

696
00:29:49,840 --> 00:29:51,760
to 50 megabits

697
00:29:51,760 --> 00:29:53,919
when cubic is only reducing 30 percent

698
00:29:53,919 --> 00:29:55,120
each time

699
00:29:55,120 --> 00:29:57,440
it takes multiple round trips

700
00:29:57,440 --> 00:30:00,799
to bring c winds down by a factor of 10

701
00:30:00,799 --> 00:30:02,640
and of course during that time it's

702
00:30:02,640 --> 00:30:04,880
sending too fast the queue is building

703
00:30:04,880 --> 00:30:07,440
up so the round trip time is going up

704
00:30:07,440 --> 00:30:08,880
so the time

705
00:30:08,880 --> 00:30:11,520
for the round trip time is going up

706
00:30:11,520 --> 00:30:13,840
so it is true you see lots of loss on

707
00:30:13,840 --> 00:30:14,880
wireless

708
00:30:14,880 --> 00:30:16,240
but it's not

709
00:30:16,240 --> 00:30:19,200
random packet loss it is q overflow

710
00:30:19,200 --> 00:30:21,120
because the center is sending 10 times

711
00:30:21,120 --> 00:30:22,559
faster than the link

712
00:30:22,559 --> 00:30:25,440
can now carry

713
00:30:25,440 --> 00:30:27,919
right so it's more like a transient

714
00:30:27,919 --> 00:30:29,919
congestion loss

715
00:30:29,919 --> 00:30:31,520
yep

716
00:30:31,520 --> 00:30:33,279
thank you yeah

717
00:30:33,279 --> 00:30:34,840
thank

718
00:30:34,840 --> 00:30:38,480
you praveen

719
00:30:39,840 --> 00:30:42,240
so i have a question um

720
00:30:42,240 --> 00:30:44,720
so as we make these changes right

721
00:30:44,720 --> 00:30:46,640
some of these changes are coming in from

722
00:30:46,640 --> 00:30:48,159
review feedback

723
00:30:48,159 --> 00:30:50,880
i'm wondering if the some combination of

724
00:30:50,880 --> 00:30:54,399
all the uh diffs from the previous rfc

725
00:30:54,399 --> 00:30:57,039
would be representative of a

726
00:30:57,039 --> 00:30:58,960
implementation that has implemented all

727
00:30:58,960 --> 00:31:01,200
of these changes or would it be

728
00:31:01,200 --> 00:31:03,279
sort of a mix and match so my worry is

729
00:31:03,279 --> 00:31:06,000
that as we make these changes we might

730
00:31:06,000 --> 00:31:07,919
not have had implementation experience

731
00:31:07,919 --> 00:31:10,080
of the entire

732
00:31:10,080 --> 00:31:12,399
uh new rfc so that that's just one

733
00:31:12,399 --> 00:31:14,960
concern i had so any comments on that

734
00:31:14,960 --> 00:31:17,760
it's a great point and um

735
00:31:17,760 --> 00:31:20,480
the changes that have been made

736
00:31:20,480 --> 00:31:23,279
you know before this review were mainly

737
00:31:23,279 --> 00:31:25,440
to reflect what the implementations are

738
00:31:25,440 --> 00:31:27,200
doing today

739
00:31:27,200 --> 00:31:29,120
with this new review

740
00:31:29,120 --> 00:31:32,240
um it it's it's a it's being a little

741
00:31:32,240 --> 00:31:33,679
more careful

742
00:31:33,679 --> 00:31:35,840
i would say a little bit conservative in

743
00:31:35,840 --> 00:31:37,200
the sense

744
00:31:37,200 --> 00:31:38,720
um and

745
00:31:38,720 --> 00:31:42,159
we but we have left the options open uh

746
00:31:42,159 --> 00:31:44,000
with respect to the

747
00:31:44,000 --> 00:31:46,320
um things that implementations are doing

748
00:31:46,320 --> 00:31:48,799
today so it's not like we are completely

749
00:31:48,799 --> 00:31:51,279
closed those gates for example you know

750
00:31:51,279 --> 00:31:52,960
using sieven instead of light size

751
00:31:52,960 --> 00:31:54,480
that's one of sorry using flight size

752
00:31:54,480 --> 00:31:55,840
instead of seaweed that's one of the

753
00:31:55,840 --> 00:31:59,120
things but we have still um left

754
00:31:59,120 --> 00:32:00,799
options for implementations which is

755
00:32:00,799 --> 00:32:03,519
like using rfc 7661 and if you're not

756
00:32:03,519 --> 00:32:04,880
using that

757
00:32:04,880 --> 00:32:06,640
some implementations are still using

758
00:32:06,640 --> 00:32:09,519
cvent and not flight size so it's not

759
00:32:09,519 --> 00:32:11,519
like we have completely changed what

760
00:32:11,519 --> 00:32:13,600
implementations are doing the only

761
00:32:13,600 --> 00:32:15,200
change that i can remember which

762
00:32:15,200 --> 00:32:17,679
implementations are not doing is the ecn

763
00:32:17,679 --> 00:32:18,640
change

764
00:32:18,640 --> 00:32:20,960
and i think that's a good change because

765
00:32:20,960 --> 00:32:23,360
ecnc markings are representative of

766
00:32:23,360 --> 00:32:26,000
congestion directly and we should keep

767
00:32:26,000 --> 00:32:28,880
backing off so

768
00:32:28,880 --> 00:32:32,640
so yeah so i would say um we're not too

769
00:32:32,640 --> 00:32:35,679
going too far away or too too way off

770
00:32:35,679 --> 00:32:38,080
from what implementations are doing

771
00:32:38,080 --> 00:32:41,360
so it should be okay

772
00:32:41,360 --> 00:32:43,679
a quick follow-up so so this is no

773
00:32:43,679 --> 00:32:46,240
longer representative of the say the

774
00:32:46,240 --> 00:32:48,399
linux pcp implementation as such right

775
00:32:48,399 --> 00:32:50,159
it's more of a

776
00:32:50,159 --> 00:32:51,840
representation of all the different

777
00:32:51,840 --> 00:32:53,440
implementations is that is that the

778
00:32:53,440 --> 00:32:56,799
current stance

779
00:32:56,799 --> 00:33:00,080
sure yeah we can say that

780
00:33:00,080 --> 00:33:02,639
okay thank you

781
00:33:05,840 --> 00:33:06,960
i just had a

782
00:33:06,960 --> 00:33:07,760
couple

783
00:33:07,760 --> 00:33:10,480
quick comments oh one um

784
00:33:10,480 --> 00:33:12,960
i wanted to encourage uh the draft

785
00:33:12,960 --> 00:33:14,799
authors to

786
00:33:14,799 --> 00:33:17,440
to keep the discussion of the undo logic

787
00:33:17,440 --> 00:33:18,799
in the draft i know there was some

788
00:33:18,799 --> 00:33:20,240
discussion about whether to keep it or

789
00:33:20,240 --> 00:33:23,120
not but i wanted to emphasize that

790
00:33:23,120 --> 00:33:25,039
undoing loss recovery events is really

791
00:33:25,039 --> 00:33:27,760
important for performance in practice

792
00:33:27,760 --> 00:33:29,039
in the real world

793
00:33:29,039 --> 00:33:31,440
and the cubic algorithm has enough state

794
00:33:31,440 --> 00:33:34,080
variables that it's non-trivial to know

795
00:33:34,080 --> 00:33:37,039
exactly what variables are

796
00:33:37,039 --> 00:33:38,799
need to be reverted or to be at least

797
00:33:38,799 --> 00:33:40,480
reminded that there are many different

798
00:33:40,480 --> 00:33:42,159
state variables and not just see when

799
00:33:42,159 --> 00:33:44,720
then access thresh uh to undo so i think

800
00:33:44,720 --> 00:33:47,039
that's important to keep in um

801
00:33:47,039 --> 00:33:49,039
there was also in some of the

802
00:33:49,039 --> 00:33:51,519
github threads some question of whether

803
00:33:51,519 --> 00:33:52,880
it's okay to

804
00:33:52,880 --> 00:33:55,600
to undo lost recovery if there's been

805
00:33:55,600 --> 00:33:58,640
reordering due to a path change

806
00:33:58,640 --> 00:34:00,799
and um i tried to

807
00:34:00,799 --> 00:34:02,640
respond in the thread but wanted to

808
00:34:02,640 --> 00:34:04,240
emphasize again that

809
00:34:04,240 --> 00:34:05,120
um

810
00:34:05,120 --> 00:34:08,239
i i would argue strongly that it's okay

811
00:34:08,239 --> 00:34:10,639
to go ahead and undo um if you detect

812
00:34:10,639 --> 00:34:13,119
that there was reordering um and this

813
00:34:13,119 --> 00:34:15,440
various retransmit because if there was

814
00:34:15,440 --> 00:34:17,839
actual packet loss in that round

815
00:34:17,839 --> 00:34:19,918
then the loss detection machinery will

816
00:34:19,918 --> 00:34:22,239
detect that there was also loss

817
00:34:22,239 --> 00:34:23,679
and will then

818
00:34:23,679 --> 00:34:25,040
um

819
00:34:25,040 --> 00:34:26,000
you know

820
00:34:26,000 --> 00:34:27,760
invoke the congestion control response

821
00:34:27,760 --> 00:34:29,760
and slow down appropriately

822
00:34:29,760 --> 00:34:32,320
so i think that's fine to undo

823
00:34:32,320 --> 00:34:34,639
in that kind of scenario that was raised

824
00:34:34,639 --> 00:34:36,320
um

825
00:34:36,320 --> 00:34:39,359
and uh yeah and then also just to echo

826
00:34:39,359 --> 00:34:41,679
stewart on the question of loss in

827
00:34:41,679 --> 00:34:43,440
wireless networks i definitely agree

828
00:34:43,440 --> 00:34:45,199
from all the packet traces i've seen

829
00:34:45,199 --> 00:34:48,000
from from youtube and google.com that

830
00:34:48,000 --> 00:34:50,480
cellular and wi-fi links these days do a

831
00:34:50,480 --> 00:34:52,000
really great job of link layer

832
00:34:52,000 --> 00:34:53,440
re-transmissions

833
00:34:53,440 --> 00:34:56,239
um and so any losses that are are there

834
00:34:56,239 --> 00:34:57,920
are usually because of the kind of

835
00:34:57,920 --> 00:34:59,440
scenario that's

836
00:34:59,440 --> 00:35:02,000
stuart mentioned or there's a rate

837
00:35:02,000 --> 00:35:05,119
reduction and it takes a couple of uh

838
00:35:05,119 --> 00:35:07,280
rounds for for cubic or whatever to slow

839
00:35:07,280 --> 00:35:09,760
down to match the new delivery rate uh

840
00:35:09,760 --> 00:35:11,440
so thank you for all your nice work on

841
00:35:11,440 --> 00:35:14,079
this this draft

842
00:35:14,079 --> 00:35:14,839
thank

843
00:35:14,839 --> 00:35:16,800
you

844
00:35:16,800 --> 00:35:19,200
virus

845
00:35:19,680 --> 00:35:21,760
yeah some of the things that really

846
00:35:21,760 --> 00:35:22,960
talked about

847
00:35:22,960 --> 00:35:24,720
um especially towards the end right sort

848
00:35:24,720 --> 00:35:26,240
of and then

849
00:35:26,240 --> 00:35:28,880
also the ravine mentioned so if there's

850
00:35:28,880 --> 00:35:31,680
this document started out i mean the the

851
00:35:31,680 --> 00:35:33,359
pre-biz version started out with willing

852
00:35:33,359 --> 00:35:35,599
to document what linux is doing

853
00:35:35,599 --> 00:35:37,680
specifically because that was the you

854
00:35:37,680 --> 00:35:39,760
know canonical implementation

855
00:35:39,760 --> 00:35:40,640
and

856
00:35:40,640 --> 00:35:42,320
the best version started out by wanting

857
00:35:42,320 --> 00:35:44,720
to you know update that because the

858
00:35:44,720 --> 00:35:46,320
links have changed

859
00:35:46,320 --> 00:35:48,720
and also to roll in some of the things

860
00:35:48,720 --> 00:35:50,560
that other implementations of cubic had

861
00:35:50,560 --> 00:35:52,320
in the meantime done

862
00:35:52,320 --> 00:35:54,079
so that is where we started out all the

863
00:35:54,079 --> 00:35:56,320
way pretty much until we got marco's

864
00:35:56,320 --> 00:35:57,359
review

865
00:35:57,359 --> 00:36:00,640
um which uh as we said right raised some

866
00:36:00,640 --> 00:36:02,400
very conservative points that basically

867
00:36:02,400 --> 00:36:04,160
said you know you can't

868
00:36:04,160 --> 00:36:05,920
move this to the standard strike saying

869
00:36:05,920 --> 00:36:06,720
this

870
00:36:06,720 --> 00:36:08,560
um because it's in conflict with for

871
00:36:08,560 --> 00:36:11,680
example five six eighteen or um or sk1

872
00:36:11,680 --> 00:36:12,720
or

873
00:36:12,720 --> 00:36:14,079
4015

874
00:36:14,079 --> 00:36:14,960
and

875
00:36:14,960 --> 00:36:17,200
while that's you know technically

876
00:36:17,200 --> 00:36:19,040
true right we shouldn't publish your

877
00:36:19,040 --> 00:36:20,800
proposed standard that's goes against

878
00:36:20,800 --> 00:36:22,000
the must

879
00:36:22,000 --> 00:36:23,839
in the draft standard

880
00:36:23,839 --> 00:36:25,920
in reality right all the stacks have

881
00:36:25,920 --> 00:36:28,000
been doing it for over a decade and the

882
00:36:28,000 --> 00:36:30,400
internet is fine and so at some point i

883
00:36:30,400 --> 00:36:32,880
think we should sort of give up this um

884
00:36:32,880 --> 00:36:34,800
you know very dogmatic view on on

885
00:36:34,800 --> 00:36:36,560
congestion control and try to accept

886
00:36:36,560 --> 00:36:38,320
that things have moved on since we

887
00:36:38,320 --> 00:36:40,480
published some of those rfcs

888
00:36:40,480 --> 00:36:42,800
um so so some of those changes we made

889
00:36:42,800 --> 00:36:45,200
was because we you know couldn't come to

890
00:36:45,200 --> 00:36:46,640
consensus on the issues on it but i

891
00:36:46,640 --> 00:36:48,480
would sort of really hope that we could

892
00:36:48,480 --> 00:36:50,720
be pragmatic and actually

893
00:36:50,720 --> 00:36:52,400
you know

894
00:36:52,400 --> 00:36:54,320
document what is working in practice

895
00:36:54,320 --> 00:36:55,440
rather than

896
00:36:55,440 --> 00:36:58,240
uh you know

897
00:36:58,240 --> 00:36:59,440
find ourselves in a situation where

898
00:36:59,440 --> 00:37:01,119
unable to move forward because of a must

899
00:37:01,119 --> 00:37:03,440
that was written 15 years ago

900
00:37:03,440 --> 00:37:05,760
thank you

901
00:37:08,880 --> 00:37:10,800
yeah i think i want to echo

902
00:37:10,800 --> 00:37:12,079
kind of wireless point but like kind of

903
00:37:12,079 --> 00:37:13,599
go in a slightly different direction

904
00:37:13,599 --> 00:37:14,800
with it which is

905
00:37:14,800 --> 00:37:16,560
um i i think we should really be

906
00:37:16,560 --> 00:37:18,000
conscientious i mean i think all the

907
00:37:18,000 --> 00:37:19,920
changes like have been discussed sound

908
00:37:19,920 --> 00:37:22,079
like mostly sensible um although the

909
00:37:22,079 --> 00:37:24,240
flight side of steven change is a little

910
00:37:24,240 --> 00:37:25,760
concerning to me because in practice i

911
00:37:25,760 --> 00:37:27,280
think

912
00:37:27,280 --> 00:37:28,640
yeah i don't know i think that's hard to

913
00:37:28,640 --> 00:37:32,079
make right um but but maybe it is okay

914
00:37:32,079 --> 00:37:34,320
with enough caveats um

915
00:37:34,320 --> 00:37:35,520
but but i think we should be really

916
00:37:35,520 --> 00:37:37,520
conscientious of not trying to put

917
00:37:37,520 --> 00:37:39,760
things in a document that no one has

918
00:37:39,760 --> 00:37:41,200
implemented

919
00:37:41,200 --> 00:37:44,240
um and so if we're in a position where

920
00:37:44,240 --> 00:37:46,000
you know we get to work in group last

921
00:37:46,000 --> 00:37:47,280
call and like

922
00:37:47,280 --> 00:37:49,359
there's some recommendations or even

923
00:37:49,359 --> 00:37:51,040
must particularly but even some

924
00:37:51,040 --> 00:37:52,640
recommendations

925
00:37:52,640 --> 00:37:54,560
uh in there that like zero cubic

926
00:37:54,560 --> 00:37:56,640
implementations actually do like i think

927
00:37:56,640 --> 00:37:58,640
we need to like remove them like i think

928
00:37:58,640 --> 00:38:00,480
we need to be like really

929
00:38:00,480 --> 00:38:02,160
conscious of like

930
00:38:02,160 --> 00:38:04,160
not putting things in the document that

931
00:38:04,160 --> 00:38:06,640
no one implements like in production

932
00:38:06,640 --> 00:38:07,680
like i don't mean like a toy

933
00:38:07,680 --> 00:38:09,680
implementation but i mean like a major

934
00:38:09,680 --> 00:38:11,040
deployed operating system or other

935
00:38:11,040 --> 00:38:12,960
environment um

936
00:38:12,960 --> 00:38:14,800
i don't know i mean maybe i'm too like

937
00:38:14,800 --> 00:38:16,880
harsh on this but like

938
00:38:16,880 --> 00:38:18,560
if no one implements it there's probably

939
00:38:18,560 --> 00:38:20,800
a reason and like putting this back is

940
00:38:20,800 --> 00:38:22,560
very silly in my opinion

941
00:38:22,560 --> 00:38:25,440
but that's it

942
00:38:27,119 --> 00:38:28,720
um

943
00:38:28,720 --> 00:38:31,040
yeah one point regarding that so

944
00:38:31,040 --> 00:38:32,480
um

945
00:38:32,480 --> 00:38:34,880
regarding the implementation point so if

946
00:38:34,880 --> 00:38:37,520
i would make a difference but

947
00:38:37,520 --> 00:38:39,520
i would make a difference between

948
00:38:39,520 --> 00:38:40,480
um

949
00:38:40,480 --> 00:38:43,520
what major implementations explicitly

950
00:38:43,520 --> 00:38:46,880
say that they don't want to do compared

951
00:38:46,880 --> 00:38:48,079
to

952
00:38:48,079 --> 00:38:49,920
they might want to do it or they will do

953
00:38:49,920 --> 00:38:51,920
it but just haven't done it because it

954
00:38:51,920 --> 00:38:54,480
now comes up and it might make sense and

955
00:38:54,480 --> 00:38:56,720
they just haven't implemented it yet

956
00:38:56,720 --> 00:38:59,280
so that might be a difference

957
00:38:59,280 --> 00:39:02,960
um well that that point i'll take it but

958
00:39:02,960 --> 00:39:05,440
you know the flight side and c went

959
00:39:05,440 --> 00:39:08,720
uh issue it really boiled down to

960
00:39:08,720 --> 00:39:12,079
oh there's no roc that uses that and we

961
00:39:12,079 --> 00:39:14,320
are moving to standard tracks so we have

962
00:39:14,320 --> 00:39:15,200
to

963
00:39:15,200 --> 00:39:17,359
i don't know follow the trend and i was

964
00:39:17,359 --> 00:39:19,520
a bit disappointed with that

965
00:39:19,520 --> 00:39:20,720
um

966
00:39:20,720 --> 00:39:22,560
and and uh

967
00:39:22,560 --> 00:39:24,480
like really there is no point of using

968
00:39:24,480 --> 00:39:26,079
flight size

969
00:39:26,079 --> 00:39:29,760
if at all rfc 7661 is probably the way

970
00:39:29,760 --> 00:39:32,560
to go and with that could be a must

971
00:39:32,560 --> 00:39:36,480
um so um i am not very familiar with all

972
00:39:36,480 --> 00:39:39,040
the rfc procedures but that point was

973
00:39:39,040 --> 00:39:39,920
really

974
00:39:39,920 --> 00:39:41,520
like no standard strike rfc has

975
00:39:41,520 --> 00:39:43,680
recommended it by our advice cubic doing

976
00:39:43,680 --> 00:39:45,520
it um so

977
00:39:45,520 --> 00:39:47,280
yeah yeah sorry i didn't mean to latch

978
00:39:47,280 --> 00:39:49,119
onto that one in particular just i only

979
00:39:49,119 --> 00:39:50,720
said it because i'm most familiar with

980
00:39:50,720 --> 00:39:52,640
kind of the ways that i can not work but

981
00:39:52,640 --> 00:39:53,839
um

982
00:39:53,839 --> 00:39:55,680
i think i'm receptive to the idea that

983
00:39:55,680 --> 00:39:58,240
like if they intend to implement it that

984
00:39:58,240 --> 00:39:59,760
might be okay

985
00:39:59,760 --> 00:40:02,400
um but i'm also apprehensive because

986
00:40:02,400 --> 00:40:04,400
like the ietf has standardized a bunch

987
00:40:04,400 --> 00:40:06,000
of stuff that like no one implements and

988
00:40:06,000 --> 00:40:06,960
like

989
00:40:06,960 --> 00:40:08,960
it my experience is it usually works out

990
00:40:08,960 --> 00:40:10,400
pretty poorly if you have no

991
00:40:10,400 --> 00:40:11,839
experimental data because it sometimes

992
00:40:11,839 --> 00:40:14,000
it turns out like these mechanisms have

993
00:40:14,000 --> 00:40:16,160
like gotchas that just don't

994
00:40:16,160 --> 00:40:18,079
like cause them not to work for like

995
00:40:18,079 --> 00:40:19,680
detail oriented reasons that like we

996
00:40:19,680 --> 00:40:22,319
just don't anticipate um

997
00:40:22,319 --> 00:40:24,400
you know and this is just the nature of

998
00:40:24,400 --> 00:40:25,920
the beast like if you've never written

999
00:40:25,920 --> 00:40:27,280
code for it no one's ever deployed it in

1000
00:40:27,280 --> 00:40:28,400
production

1001
00:40:28,400 --> 00:40:29,680
i mean it probably works but like you

1002
00:40:29,680 --> 00:40:31,280
just don't know and simulations don't

1003
00:40:31,280 --> 00:40:32,640
really cut it so

1004
00:40:32,640 --> 00:40:35,599
um i don't i mean maybe

1005
00:40:35,599 --> 00:40:37,839
i'm fine to drop this issue but i just

1006
00:40:37,839 --> 00:40:39,359
kind of want to put my two cents in on

1007
00:40:39,359 --> 00:40:42,078
that at that point

1008
00:40:42,319 --> 00:40:44,720
lars

1009
00:40:44,880 --> 00:40:47,040
yeah so as a little preview to the talk

1010
00:40:47,040 --> 00:40:49,839
later on updating uh 5681 so one of the

1011
00:40:49,839 --> 00:40:51,440
questions i'm actually raising is we if

1012
00:40:51,440 --> 00:40:54,079
we should try and roll in some of those

1013
00:40:54,079 --> 00:40:55,920
changes specifically the

1014
00:40:55,920 --> 00:40:58,640
flight size versus sealant uh discussion

1015
00:40:58,640 --> 00:41:00,400
we've had because of cubic at the moment

1016
00:41:00,400 --> 00:41:04,240
the cubic draft updates 5681

1017
00:41:04,240 --> 00:41:06,960
because it it wants to make it okay for

1018
00:41:06,960 --> 00:41:08,319
cubic to do this

1019
00:41:08,319 --> 00:41:10,319
which raises the slightly sort of uh

1020
00:41:10,319 --> 00:41:11,760
interesting question whether a proposed

1021
00:41:11,760 --> 00:41:14,240
standard can update a draft standard um

1022
00:41:14,240 --> 00:41:15,920
but we might be able to sidestep that

1023
00:41:15,920 --> 00:41:21,480
issue um if we decide to update 5681

1024
00:41:26,160 --> 00:41:28,960
any other comments

1025
00:41:30,640 --> 00:41:34,640
i have a final question um

1026
00:41:34,640 --> 00:41:35,599
to

1027
00:41:35,599 --> 00:41:38,240
for the author so you are using uh

1028
00:41:38,240 --> 00:41:39,760
hearthstone plus plus as a normative

1029
00:41:39,760 --> 00:41:42,240
reference

1030
00:41:43,200 --> 00:41:46,640
um i i think it's uh lars could you

1031
00:41:46,640 --> 00:41:48,640
answer that bro yeah it is a normative

1032
00:41:48,640 --> 00:41:52,480
reference because we wanted to use um

1033
00:41:52,480 --> 00:41:55,520
2119 language to say should

1034
00:41:55,520 --> 00:41:57,440
so we are basically we're basically

1035
00:41:57,440 --> 00:42:00,480
tying ourselves to high style plus

1036
00:42:00,480 --> 00:42:03,599
so this means as a message to praveen

1037
00:42:03,599 --> 00:42:05,680
the document

1038
00:42:05,680 --> 00:42:06,400
uh

1039
00:42:06,400 --> 00:42:08,880
needs to progress

1040
00:42:08,880 --> 00:42:11,280
uh yes well

1041
00:42:11,280 --> 00:42:11,920
it

1042
00:42:11,920 --> 00:42:13,680
doesn't need a problem milestone the

1043
00:42:13,680 --> 00:42:17,040
milestones are okay but uh and i'm fine

1044
00:42:17,040 --> 00:42:18,800
with him saying they want to do

1045
00:42:18,800 --> 00:42:21,119
measurements um but

1046
00:42:21,119 --> 00:42:22,560
so

1047
00:42:22,560 --> 00:42:23,599
he should be aware that there are

1048
00:42:23,599 --> 00:42:25,359
dependencies yeah i mean this is yet

1049
00:42:25,359 --> 00:42:27,119
another one of those things right where

1050
00:42:27,119 --> 00:42:28,560
so high start plus plus is the only

1051
00:42:28,560 --> 00:42:30,400
standard strike document we have in this

1052
00:42:30,400 --> 00:42:31,760
space

1053
00:42:31,760 --> 00:42:33,599
and since we can't

1054
00:42:33,599 --> 00:42:36,240
or or the the there's also one of the

1055
00:42:36,240 --> 00:42:39,520
points that marco raised right um we

1056
00:42:39,520 --> 00:42:41,200
here is that we shouldn't recommend

1057
00:42:41,200 --> 00:42:43,040
something that isn't standard strike in

1058
00:42:43,040 --> 00:42:44,960
a standard strike document

1059
00:42:44,960 --> 00:42:46,480
um and high strike plus it's the only

1060
00:42:46,480 --> 00:42:47,760
thing that we intend to publish on

1061
00:42:47,760 --> 00:42:48,960
standard strike

1062
00:42:48,960 --> 00:42:51,520
right so so either we say you know

1063
00:42:51,520 --> 00:42:53,200
you know do whatever or do something

1064
00:42:53,200 --> 00:42:55,359
very conservative um

1065
00:42:55,359 --> 00:42:58,640
we might wanna uh you know

1066
00:42:58,640 --> 00:43:00,319
do that but it's again one of these

1067
00:43:00,319 --> 00:43:03,280
things where in in reality people do do

1068
00:43:03,280 --> 00:43:04,079
things

1069
00:43:04,079 --> 00:43:05,760
but we can't say that in the document

1070
00:43:05,760 --> 00:43:08,720
because of stupid silence reasons

1071
00:43:08,720 --> 00:43:11,280
i just wanted i mean i just wanted to

1072
00:43:11,280 --> 00:43:13,040
so i'm happy if

1073
00:43:13,040 --> 00:43:14,000
uh

1074
00:43:14,000 --> 00:43:15,839
high start plus plus

1075
00:43:15,839 --> 00:43:18,800
matches around the next ietf and

1076
00:43:18,800 --> 00:43:22,000
i don't think it's a problem but

1077
00:43:22,000 --> 00:43:23,520
it shouldn't move

1078
00:43:23,520 --> 00:43:25,599
over and over again

1079
00:43:25,599 --> 00:43:28,720
yeah if it does

1080
00:43:28,720 --> 00:43:32,000
we have to deal with it in cubic

1081
00:43:34,079 --> 00:43:36,480
gary

1082
00:43:37,119 --> 00:43:39,119
michael can we just be clear for the

1083
00:43:39,119 --> 00:43:40,880
notes whether the reference to high

1084
00:43:40,880 --> 00:43:44,560
start is a should or a must

1085
00:43:46,079 --> 00:43:47,920
do the authors just want to say so we

1086
00:43:47,920 --> 00:43:50,160
can put it in the notes

1087
00:43:50,160 --> 00:43:53,640
it's a should

1088
00:44:07,599 --> 00:44:09,119
praveen do you want to say something you

1089
00:44:09,119 --> 00:44:11,520
just you wearing the queue and just left

1090
00:44:11,520 --> 00:44:13,839
the queue

1091
00:44:14,160 --> 00:44:15,520
can you hear me

1092
00:44:15,520 --> 00:44:17,119
yes we can

1093
00:44:17,119 --> 00:44:19,119
hi i was just responding to a question

1094
00:44:19,119 --> 00:44:21,359
so i did mention in the chat as well so

1095
00:44:21,359 --> 00:44:23,599
we were just waiting for uh other

1096
00:44:23,599 --> 00:44:25,680
implementers to also implement the

1097
00:44:25,680 --> 00:44:27,920
changes in the latest draft because the

1098
00:44:27,920 --> 00:44:29,599
latest rap did have a significant change

1099
00:44:29,599 --> 00:44:31,599
right so that's the only reason that's

1100
00:44:31,599 --> 00:44:33,040
one of the main reasons we wanted to

1101
00:44:33,040 --> 00:44:35,040
wait a bit before we go into working

1102
00:44:35,040 --> 00:44:38,560
group last fall um but uh yeah i think

1103
00:44:38,560 --> 00:44:40,400
like uh pretty soon we should be able to

1104
00:44:40,400 --> 00:44:41,760
get there and then

1105
00:44:41,760 --> 00:44:43,760
aim to have uh publish this sometime

1106
00:44:43,760 --> 00:44:46,160
around next eight years

1107
00:44:46,160 --> 00:44:49,040
perfect thank you

1108
00:44:49,359 --> 00:44:51,920
uh neil and i'm closing the queue after

1109
00:44:51,920 --> 00:44:53,040
neil

1110
00:44:53,040 --> 00:44:54,640
it sounds good uh praveen could you

1111
00:44:54,640 --> 00:44:57,119
clarify which other uh stacks are are

1112
00:44:57,119 --> 00:44:59,119
implementing i start plus plus and and

1113
00:44:59,119 --> 00:45:02,720
you're waiting for feedback on

1114
00:45:03,280 --> 00:45:06,160
uh yeah so uh the cloudflare quickstack

1115
00:45:06,160 --> 00:45:09,520
uh implements it uh i think uh apple was

1116
00:45:09,520 --> 00:45:12,400
experimenting with it and uh freebsd as

1117
00:45:12,400 --> 00:45:14,160
well i think netflix was experimenting

1118
00:45:14,160 --> 00:45:15,440
with it so there's multiple

1119
00:45:15,440 --> 00:45:16,880
implementations out there i'm just

1120
00:45:16,880 --> 00:45:18,720
waiting for more feedback to move

1121
00:45:18,720 --> 00:45:21,040
forward

1122
00:45:26,160 --> 00:45:29,160
okay

1123
00:45:34,400 --> 00:45:37,359
so martin uh

1124
00:45:37,359 --> 00:45:39,359
states that

1125
00:45:39,359 --> 00:45:42,079
he's a bit concerned about the

1126
00:45:42,079 --> 00:45:44,960
post-working group last call changes

1127
00:45:44,960 --> 00:45:47,040
uh don't actually have consensus so we

1128
00:45:47,040 --> 00:45:48,000
will

1129
00:45:48,000 --> 00:45:50,400
once once we see the final document i

1130
00:45:50,400 --> 00:45:52,319
think we will

1131
00:45:52,319 --> 00:45:54,400
we will ask the working group if it's if

1132
00:45:54,400 --> 00:45:55,920
the working group is fine with these

1133
00:45:55,920 --> 00:45:58,319
changes

1134
00:45:59,520 --> 00:46:02,079
anything else

1135
00:46:07,200 --> 00:46:09,440
then i think we move on to

1136
00:46:09,440 --> 00:46:12,720
uh the next presentation

1137
00:46:12,839 --> 00:46:19,319
um tcp yang model i think it's michael

1138
00:46:28,640 --> 00:46:31,040
yeah this is michael speaking from the

1139
00:46:31,040 --> 00:46:34,560
floor uh i guess you can hear me right

1140
00:46:34,560 --> 00:46:35,680
okay

1141
00:46:35,680 --> 00:46:39,040
so this is a short update uh um on the

1142
00:46:39,040 --> 00:46:41,440
tcpa module other that is trying to work

1143
00:46:41,440 --> 00:46:44,160
with mahesh and michelle

1144
00:46:44,160 --> 00:46:46,319
um and there have been some recent

1145
00:46:46,319 --> 00:46:50,160
updates to this document uh mostly to

1146
00:46:50,160 --> 00:46:52,720
ensure that we get closer to a working

1147
00:46:52,720 --> 00:46:54,800
group last call to finish

1148
00:46:54,800 --> 00:46:56,880
the small piece of work

1149
00:46:56,880 --> 00:46:57,599
so

1150
00:46:57,599 --> 00:47:01,119
there have been two updates recently

1151
00:47:01,119 --> 00:47:03,200
the first one

1152
00:47:03,200 --> 00:47:05,359
was basically

1153
00:47:05,359 --> 00:47:07,920
some open issues that were left in there

1154
00:47:07,920 --> 00:47:09,599
so we

1155
00:47:09,599 --> 00:47:12,960
have emphasized now in a much better way

1156
00:47:12,960 --> 00:47:14,640
and more prominently that the document

1157
00:47:14,640 --> 00:47:17,119
explicitly has a very narrow scope so

1158
00:47:17,119 --> 00:47:20,400
this is the consensus in tcpm the

1159
00:47:20,400 --> 00:47:23,520
document has a very narrow scope

1160
00:47:23,520 --> 00:47:25,400
we have also

1161
00:47:25,400 --> 00:47:27,599
[Music]

1162
00:47:27,599 --> 00:47:30,640
expanded on the specific game semantics

1163
00:47:30,640 --> 00:47:32,720
on the tcp connection table which is

1164
00:47:32,720 --> 00:47:34,559
writable so this has caused some

1165
00:47:34,559 --> 00:47:36,480
discussions in the past so we added text

1166
00:47:36,480 --> 00:47:37,520
on that

1167
00:47:37,520 --> 00:47:39,040
and there were some open issues in the

1168
00:47:39,040 --> 00:47:42,720
security considerations which got fixed

1169
00:47:42,720 --> 00:47:44,000
so

1170
00:47:44,000 --> 00:47:46,559
the o3 document was probably first

1171
00:47:46,559 --> 00:47:50,079
complete version of the document

1172
00:47:50,079 --> 00:47:51,119
and

1173
00:47:51,119 --> 00:47:55,520
on that version we then got uh two um

1174
00:47:55,520 --> 00:47:58,160
extensive uh sets of video comments both

1175
00:47:58,160 --> 00:47:59,200
from tom

1176
00:47:59,200 --> 00:48:00,400
catch

1177
00:48:00,400 --> 00:48:03,040
um the first email uh the relatively

1178
00:48:03,040 --> 00:48:06,000
small minor um edits

1179
00:48:06,000 --> 00:48:09,280
which have been fixed in o4 um

1180
00:48:09,280 --> 00:48:12,000
so we've changed the reference for tcp

1181
00:48:12,000 --> 00:48:14,240
to 793 bis under the assumption that

1182
00:48:14,240 --> 00:48:17,359
this document moves forward soonish

1183
00:48:17,359 --> 00:48:20,319
and then the result actually bugs in the

1184
00:48:20,319 --> 00:48:23,359
yang module which we have fixed

1185
00:48:23,359 --> 00:48:25,680
um so this is basically the current

1186
00:48:25,680 --> 00:48:27,359
version of

1187
00:48:27,359 --> 00:48:30,079
four and then we basically received the

1188
00:48:30,079 --> 00:48:32,480
second set of

1189
00:48:32,480 --> 00:48:34,880
extensive review comments actually

1190
00:48:34,880 --> 00:48:36,000
which are

1191
00:48:36,000 --> 00:48:39,280
summarized on slide number four

1192
00:48:39,280 --> 00:48:42,800
so these are a lot of good and valid

1193
00:48:42,800 --> 00:48:44,800
comments um

1194
00:48:44,800 --> 00:48:46,640
most of them are relatively

1195
00:48:46,640 --> 00:48:48,720
straightforward so i don't think there's

1196
00:48:48,720 --> 00:48:50,559
much discussion needed on it we just

1197
00:48:50,559 --> 00:48:52,480
have to implement

1198
00:48:52,480 --> 00:48:55,680
the changes so i've listed here that

1199
00:48:55,680 --> 00:48:57,520
there are probably missing references

1200
00:48:57,520 --> 00:48:59,359
and some of the references need to be

1201
00:48:59,359 --> 00:49:01,359
more prominently referenced in the yang

1202
00:49:01,359 --> 00:49:03,200
module and a couple of other things so

1203
00:49:03,200 --> 00:49:05,119
as i said the references

1204
00:49:05,119 --> 00:49:07,040
need to improve um

1205
00:49:07,040 --> 00:49:08,400
there are also some

1206
00:49:08,400 --> 00:49:09,520
small

1207
00:49:09,520 --> 00:49:12,640
changes in the in the yang module that

1208
00:49:12,640 --> 00:49:14,640
need to improve some is just yang

1209
00:49:14,640 --> 00:49:16,559
semantics

1210
00:49:16,559 --> 00:49:18,640
a more

1211
00:49:18,640 --> 00:49:21,200
editorial aspect is that the suggestion

1212
00:49:21,200 --> 00:49:23,680
is to add more warning signs regarding

1213
00:49:23,680 --> 00:49:26,800
md5 so so that is this is a legacy

1214
00:49:26,800 --> 00:49:29,839
technology and tcpo is much better than

1215
00:49:29,839 --> 00:49:31,520
that so we have such warning signs

1216
00:49:31,520 --> 00:49:33,440
already in the document but we could do

1217
00:49:33,440 --> 00:49:35,359
so more prominently and that's something

1218
00:49:35,359 --> 00:49:37,200
that's easy to change

1219
00:49:37,200 --> 00:49:39,680
and uh the examples are also not perfect

1220
00:49:39,680 --> 00:49:41,839
so these are all relatively minor things

1221
00:49:41,839 --> 00:49:44,079
that will be fixed in the next version

1222
00:49:44,079 --> 00:49:46,480
of five hopefully within the next few

1223
00:49:46,480 --> 00:49:47,599
weeks

1224
00:49:47,599 --> 00:49:49,599
there are only two um

1225
00:49:49,599 --> 00:49:52,160
the things that are uh are the bigger

1226
00:49:52,160 --> 00:49:54,000
questions actually

1227
00:49:54,000 --> 00:49:55,599
and the first

1228
00:49:55,599 --> 00:49:58,800
issue is that there is an ongoing

1229
00:49:58,800 --> 00:50:00,000
evaluation

1230
00:50:00,000 --> 00:50:02,800
in the ops area working group on a

1231
00:50:02,800 --> 00:50:05,920
couple of documents actually that work

1232
00:50:05,920 --> 00:50:06,880
on

1233
00:50:06,880 --> 00:50:08,480
service models

1234
00:50:08,480 --> 00:50:11,520
and one of these models specifically the

1235
00:50:11,520 --> 00:50:13,359
three network model

1236
00:50:13,359 --> 00:50:16,640
also includes yank statements on tcp ao

1237
00:50:16,640 --> 00:50:19,040
parameters simply because the layers vpn

1238
00:50:19,040 --> 00:50:20,000
site

1239
00:50:20,000 --> 00:50:21,119
may need

1240
00:50:21,119 --> 00:50:23,680
to implement tcpo to protect the control

1241
00:50:23,680 --> 00:50:26,480
plane signaling of the pgp specifically

1242
00:50:26,480 --> 00:50:28,480
and that creates

1243
00:50:28,480 --> 00:50:31,200
an overlap between these two young

1244
00:50:31,200 --> 00:50:32,640
modules

1245
00:50:32,640 --> 00:50:34,640
that is nothing specific to this yang

1246
00:50:34,640 --> 00:50:36,000
module

1247
00:50:36,000 --> 00:50:38,640
the same overlap happens between the l3

1248
00:50:38,640 --> 00:50:41,359
and model and a lot of other itf models

1249
00:50:41,359 --> 00:50:44,000
simply because it uses

1250
00:50:44,000 --> 00:50:46,319
other a lot of other technologies

1251
00:50:46,319 --> 00:50:47,280
but

1252
00:50:47,280 --> 00:50:49,119
the overlap with

1253
00:50:49,119 --> 00:50:52,480
the tcp mdn module was not well

1254
00:50:52,480 --> 00:50:55,200
mentioned in the in our draft so far

1255
00:50:55,200 --> 00:50:57,280
and this is why we have to do something

1256
00:50:57,280 --> 00:50:59,520
about that there is also a technical

1257
00:50:59,520 --> 00:51:02,400
difference in the modeling assumption

1258
00:51:02,400 --> 00:51:03,520
the

1259
00:51:03,520 --> 00:51:06,000
l3 and m model assumes that some of the

1260
00:51:06,000 --> 00:51:08,640
tcpao parameters are

1261
00:51:08,640 --> 00:51:11,760
modeled in the kitchen k gene

1262
00:51:11,760 --> 00:51:13,760
key chain sorry

1263
00:51:13,760 --> 00:51:15,040
um

1264
00:51:15,040 --> 00:51:17,520
the only issue is that the corresponding

1265
00:51:17,520 --> 00:51:21,599
rc which is 8177 doesn't foresee that as

1266
00:51:21,599 --> 00:51:22,960
of today

1267
00:51:22,960 --> 00:51:24,720
so that is why we actually don't have

1268
00:51:24,720 --> 00:51:27,280
that solution as of today and in

1269
00:51:27,280 --> 00:51:28,960
the tcpm yang what will be there

1270
00:51:28,960 --> 00:51:30,960
therefore i have explicitly added

1271
00:51:30,960 --> 00:51:33,280
configuration parameters for the send id

1272
00:51:33,280 --> 00:51:35,280
and the receive id we will see later why

1273
00:51:35,280 --> 00:51:37,200
these parameters are so relevant for

1274
00:51:37,200 --> 00:51:38,880
tcpo

1275
00:51:38,880 --> 00:51:41,520
so this is a difference at the moment my

1276
00:51:41,520 --> 00:51:44,800
suggestion is to clearly explain

1277
00:51:44,800 --> 00:51:46,880
that a difference

1278
00:51:46,880 --> 00:51:48,960
and of the reason why the

1279
00:51:48,960 --> 00:51:50,720
this model

1280
00:51:50,720 --> 00:51:53,200
models those two parameters explicitly

1281
00:51:53,200 --> 00:51:55,119
and of course this also implies that we

1282
00:51:55,119 --> 00:51:57,839
have to add a reference to the 3m

1283
00:51:57,839 --> 00:51:59,119
document

1284
00:51:59,119 --> 00:52:00,960
which is still missing

1285
00:52:00,960 --> 00:52:04,480
in o4 so this is the first uh

1286
00:52:04,480 --> 00:52:06,960
possibly a little bit bigger change and

1287
00:52:06,960 --> 00:52:10,640
that requires additional text at least

1288
00:52:10,640 --> 00:52:13,839
the last uh bigger request for change

1289
00:52:13,839 --> 00:52:15,839
was uh

1290
00:52:15,839 --> 00:52:17,839
comprehensive comparison with the tcp

1291
00:52:17,839 --> 00:52:18,640
mip

1292
00:52:18,640 --> 00:52:21,200
so we got past feedback in tcpm that the

1293
00:52:21,200 --> 00:52:23,680
tcp emip is not so interesting for this

1294
00:52:23,680 --> 00:52:25,599
young module but now we have a request

1295
00:52:25,599 --> 00:52:27,200
to make a comparison

1296
00:52:27,200 --> 00:52:28,800
so this is something that's not super

1297
00:52:28,800 --> 00:52:32,240
hard because we still model a lot what

1298
00:52:32,240 --> 00:52:34,640
is in the tcp mip already with some

1299
00:52:34,640 --> 00:52:37,280
slight differences to be future proof

1300
00:52:37,280 --> 00:52:40,079
so we could add such a comparison of for

1301
00:52:40,079 --> 00:52:42,319
example in a new appendix

1302
00:52:42,319 --> 00:52:44,559
so it's something that's doable um but

1303
00:52:44,559 --> 00:52:46,559
we haven't done so in the past so and

1304
00:52:46,559 --> 00:52:48,240
this is something where

1305
00:52:48,240 --> 00:52:50,480
uh i would also look for feedback from

1306
00:52:50,480 --> 00:52:53,119
the community um if this is something

1307
00:52:53,119 --> 00:52:55,040
considered useful as i said there have

1308
00:52:55,040 --> 00:52:56,640
been past statements on the mic on the

1309
00:52:56,640 --> 00:52:58,880
tcp map

1310
00:52:58,880 --> 00:53:00,880
so as i said as a most of these things

1311
00:53:00,880 --> 00:53:03,440
are straightforward we will

1312
00:53:03,440 --> 00:53:06,319
come up with a new version of soonish

1313
00:53:06,319 --> 00:53:08,400
for the last two ones

1314
00:53:08,400 --> 00:53:10,480
any comments from the group would be

1315
00:53:10,480 --> 00:53:13,680
particularly appreciated

1316
00:53:13,680 --> 00:53:15,440
and um

1317
00:53:15,440 --> 00:53:17,359
that's the current status so as i said

1318
00:53:17,359 --> 00:53:20,000
there's a new version uh a new version

1319
00:53:20,000 --> 00:53:21,040
coming up

1320
00:53:21,040 --> 00:53:23,680
that should address or hopefully all

1321
00:53:23,680 --> 00:53:25,119
known issues

1322
00:53:25,119 --> 00:53:27,680
and we would really look for further

1323
00:53:27,680 --> 00:53:30,400
comments from the group

1324
00:53:30,400 --> 00:53:33,839
as we have addressed all known issues

1325
00:53:33,839 --> 00:53:35,760
the authors believe that the document

1326
00:53:35,760 --> 00:53:37,280
would be ready for working group last

1327
00:53:37,280 --> 00:53:39,440
call but of course that requires

1328
00:53:39,440 --> 00:53:42,079
feedback from the community and that's

1329
00:53:42,079 --> 00:53:45,680
my summary for today

1330
00:53:46,880 --> 00:53:50,520
comments questions

1331
00:54:07,599 --> 00:54:11,280
michael um so what is the what is the um

1332
00:54:11,280 --> 00:54:12,880
reasoning behind

1333
00:54:12,880 --> 00:54:14,960
wanting to like why did the commenter

1334
00:54:14,960 --> 00:54:18,480
want to do the bib comparison

1335
00:54:19,119 --> 00:54:22,000
i mean it was just i mean the

1336
00:54:22,000 --> 00:54:25,359
i guess the underlying

1337
00:54:25,359 --> 00:54:27,760
assumption is that there are

1338
00:54:27,760 --> 00:54:29,599
quite a bit of implementations out there

1339
00:54:29,599 --> 00:54:31,200
of the t3 mip

1340
00:54:31,200 --> 00:54:32,319
so we know that there are

1341
00:54:32,319 --> 00:54:34,000
implementations of the mip and if

1342
00:54:34,000 --> 00:54:36,319
somebody who implements the mip

1343
00:54:36,319 --> 00:54:39,599
wants to transition to this yang module

1344
00:54:39,599 --> 00:54:41,920
of course maybe a translation table

1345
00:54:41,920 --> 00:54:43,760
could help

1346
00:54:43,760 --> 00:54:47,040
in most cases to be honest

1347
00:54:47,040 --> 00:54:48,880
it's relatively easy

1348
00:54:48,880 --> 00:54:50,240
to see

1349
00:54:50,240 --> 00:54:52,960
the mapping the statistics are

1350
00:54:52,960 --> 00:54:56,079
very similar we have removed uh i think

1351
00:54:56,079 --> 00:54:59,680
one or two aspects from the mip um um

1352
00:54:59,680 --> 00:55:01,440
we could reason why we've removed that

1353
00:55:01,440 --> 00:55:02,960
although there was a in the middle there

1354
00:55:02,960 --> 00:55:05,599
is a setting for the tcp retransmission

1355
00:55:05,599 --> 00:55:08,079
calculation timeout so we've removed

1356
00:55:08,079 --> 00:55:09,520
that one

1357
00:55:09,520 --> 00:55:10,880
i thought that this one is widely

1358
00:55:10,880 --> 00:55:13,520
implemented actually

1359
00:55:13,520 --> 00:55:15,520
so as i said it would maybe help

1360
00:55:15,520 --> 00:55:17,920
implementers but the big question is if

1361
00:55:17,920 --> 00:55:21,359
somebody who works on young in a state

1362
00:55:21,359 --> 00:55:24,000
shop is really needs a summary in the in

1363
00:55:24,000 --> 00:55:26,160
the document

1364
00:55:26,160 --> 00:55:27,920
okay well i mean i if you think it's not

1365
00:55:27,920 --> 00:55:29,599
a lot of work i i certainly wouldn't

1366
00:55:29,599 --> 00:55:32,640
object to like an appendix but um i just

1367
00:55:32,640 --> 00:55:34,400
i'm a little skeptical that yang's gonna

1368
00:55:34,400 --> 00:55:36,720
become a dominant configuration mode for

1369
00:55:36,720 --> 00:55:39,520
like tcpn points uh barring

1370
00:55:39,520 --> 00:55:41,040
the special case which you correctly

1371
00:55:41,040 --> 00:55:44,400
targeted which is like these bgp um

1372
00:55:44,400 --> 00:55:46,640
hosts uh

1373
00:55:46,640 --> 00:55:48,000
so i i don't think it's him i don't

1374
00:55:48,000 --> 00:55:49,920
think it's important but if if you don't

1375
00:55:49,920 --> 00:55:51,040
think it's a lot of effort i think

1376
00:55:51,040 --> 00:55:52,160
that's fine

1377
00:55:52,160 --> 00:55:53,599
thanks

1378
00:55:53,599 --> 00:55:55,200
yeah i mean maybe

1379
00:55:55,200 --> 00:55:56,799
i mean that that comment is not the

1380
00:55:56,799 --> 00:55:58,480
first time so we all know that the angle

1381
00:55:58,480 --> 00:56:00,559
not the um the most important

1382
00:56:00,559 --> 00:56:02,240
configuration method for a lot of tcp

1383
00:56:02,240 --> 00:56:04,640
stacks but it matters on vouchers

1384
00:56:04,640 --> 00:56:07,359
you also see that in the 3nm model which

1385
00:56:07,359 --> 00:56:09,760
also targets routers so in that specific

1386
00:56:09,760 --> 00:56:12,640
target area the model mattress and

1387
00:56:12,640 --> 00:56:14,000
that's also

1388
00:56:14,000 --> 00:56:15,839
probably one of the key areas where the

1389
00:56:15,839 --> 00:56:19,040
tcp map actually is implemented so at

1390
00:56:19,040 --> 00:56:21,680
the end of the day we all know that

1391
00:56:21,680 --> 00:56:24,240
on host operating systems this model

1392
00:56:24,240 --> 00:56:28,919
will most likely not be widely used

1393
00:56:30,559 --> 00:56:33,760
thank you any more comments

1394
00:56:39,599 --> 00:56:41,839
so guys we are looking forward to to see

1395
00:56:41,839 --> 00:56:43,200
the updated

1396
00:56:43,200 --> 00:56:45,839
document

1397
00:56:47,040 --> 00:56:50,558
will progress then from there

1398
00:56:50,799 --> 00:56:52,000
okay thank you

1399
00:56:52,000 --> 00:56:53,760
um

1400
00:56:53,760 --> 00:56:55,520
the next is

1401
00:56:55,520 --> 00:56:58,400
a presentation on

1402
00:56:58,400 --> 00:56:59,359
about

1403
00:56:59,359 --> 00:57:00,799
test vector

1404
00:57:00,799 --> 00:57:03,680
um the status of the draft

1405
00:57:03,680 --> 00:57:05,040
um

1406
00:57:05,040 --> 00:57:06,160
so

1407
00:57:06,160 --> 00:57:07,920
um

1408
00:57:07,920 --> 00:57:09,599
from my hattie or

1409
00:57:09,599 --> 00:57:11,920
i don't know how that thing plants this

1410
00:57:11,920 --> 00:57:14,920
up

1411
00:57:26,240 --> 00:57:28,720
see there

1412
00:57:30,000 --> 00:57:31,119
yeah

1413
00:57:31,119 --> 00:57:33,280
hello can you hear hello

1414
00:57:33,280 --> 00:57:34,880
yep

1415
00:57:34,880 --> 00:57:37,440
you can run your slides by your own

1416
00:57:37,440 --> 00:57:40,680
yeah sure

1417
00:58:00,319 --> 00:58:04,440
okay can you see the slides

1418
00:58:13,280 --> 00:58:16,079
i guess you can see the slice right

1419
00:58:16,079 --> 00:58:18,000
okay great excellent

1420
00:58:18,000 --> 00:58:20,640
sorry uh i had some technical

1421
00:58:20,640 --> 00:58:22,880
difficulties my

1422
00:58:22,880 --> 00:58:25,359
laptop just crashed so i had to change

1423
00:58:25,359 --> 00:58:26,480
to the

1424
00:58:26,480 --> 00:58:28,079
spare one but

1425
00:58:28,079 --> 00:58:29,839
there we go

1426
00:58:29,839 --> 00:58:32,640
uh my name is johan kulsari so i'm

1427
00:58:32,640 --> 00:58:36,640
presenting the tcpa test vectors

1428
00:58:36,640 --> 00:58:37,920
draft

1429
00:58:37,920 --> 00:58:40,000
and the updates to it

1430
00:58:40,000 --> 00:58:41,920
we have been doing that with

1431
00:58:41,920 --> 00:58:44,559
show touch

1432
00:58:44,880 --> 00:58:47,880
so

1433
00:58:50,400 --> 00:58:52,480
let's see the next slide so the

1434
00:58:52,480 --> 00:58:55,280
reasoning here is that uh

1435
00:58:55,280 --> 00:58:58,240
implementing tcpa is is

1436
00:58:58,240 --> 00:59:00,400
quite complex so the test vector should

1437
00:59:00,400 --> 00:59:02,960
help to implement it correctly and of

1438
00:59:02,960 --> 00:59:05,359
course for interoperability

1439
00:59:05,359 --> 00:59:07,119
it needs to be correct otherwise it

1440
00:59:07,119 --> 00:59:09,200
won't work at all

1441
00:59:09,200 --> 00:59:12,319
so here we have provided test vectors

1442
00:59:12,319 --> 00:59:13,200
for the

1443
00:59:13,200 --> 00:59:15,280
mandatory options

1444
00:59:15,280 --> 00:59:18,520
for ipv4

1445
00:59:19,040 --> 00:59:21,599
6 for the mandatory algorithms and for

1446
00:59:21,599 --> 00:59:22,400
both

1447
00:59:22,400 --> 00:59:26,559
ignoring and including tcp options

1448
00:59:26,559 --> 00:59:28,480
and it also discusses some of the

1449
00:59:28,480 --> 00:59:30,960
implementation issues that may be tricky

1450
00:59:30,960 --> 00:59:33,839
or the implementer

1451
00:59:38,480 --> 00:59:39,599
uh

1452
00:59:39,599 --> 00:59:44,799
this was presented last time iitf 110

1453
00:59:44,799 --> 00:59:47,200
uh

1454
00:59:47,200 --> 00:59:49,440
not many changes

1455
00:59:49,440 --> 00:59:53,520
uh shortly after itf 110 we were able to

1456
00:59:53,520 --> 00:59:56,319
test it in our lab with ipv6 so no

1457
00:59:56,319 --> 00:59:57,680
changes there

1458
00:59:57,680 --> 01:00:01,440
everything was working fine

1459
01:00:01,440 --> 01:00:03,760
then we got good comments from michael

1460
01:00:03,760 --> 01:00:06,319
scharf thanks thanks for those

1461
01:00:06,319 --> 01:00:10,000
and the version o2 draft was updated

1462
01:00:10,000 --> 01:00:12,079
based on them

1463
01:00:12,079 --> 01:00:16,880
so there's some clarifications uh

1464
01:00:16,880 --> 01:00:18,000
uh

1465
01:00:18,000 --> 01:00:20,160
the nut travels or was changed middle

1466
01:00:20,160 --> 01:00:21,119
pro

1467
01:00:21,119 --> 01:00:23,440
middle box traversal

1468
01:00:23,440 --> 01:00:24,559
and

1469
01:00:24,559 --> 01:00:27,200
also clarified some parameters that

1470
01:00:27,200 --> 01:00:30,480
which one where decimal or hexadecimal

1471
01:00:30,480 --> 01:00:33,760
or even binary for the dcs

1472
01:00:33,760 --> 01:00:36,640
fields so

1473
01:00:37,200 --> 01:00:40,759
these are the changes

1474
01:00:42,799 --> 01:00:46,240
so thanks for the feedback uh

1475
01:00:46,240 --> 01:00:48,559
so far of course the feedback is always

1476
01:00:48,559 --> 01:00:50,960
welcome

1477
01:00:52,240 --> 01:00:55,119
we as authors think that i it's ready

1478
01:00:55,119 --> 01:00:57,359
for the working group class call

1479
01:00:57,359 --> 01:00:59,280
we have been waiting for week feedback

1480
01:00:59,280 --> 01:01:01,200
sometime

1481
01:01:01,200 --> 01:01:02,480
uh

1482
01:01:02,480 --> 01:01:04,480
i guess

1483
01:01:04,480 --> 01:01:08,160
i hope it it is looking good so

1484
01:01:08,160 --> 01:01:10,880
not more feedback but of course if if

1485
01:01:10,880 --> 01:01:14,000
something is noticed

1486
01:01:15,280 --> 01:01:17,680
thank you

1487
01:01:18,960 --> 01:01:21,040
thank you for the presentation

1488
01:01:21,040 --> 01:01:24,599
are there any comments

1489
01:01:36,960 --> 01:01:40,160
she has thinking that this is in good

1490
01:01:40,160 --> 01:01:42,400
shape and it's getting close

1491
01:01:42,400 --> 01:01:43,359
so

1492
01:01:43,359 --> 01:01:45,359
if you have any concern or want to

1493
01:01:45,359 --> 01:01:48,799
comment no just speak up here or

1494
01:01:48,799 --> 01:01:50,720
send a message to on the mailing list

1495
01:01:50,720 --> 01:01:52,880
very soon otherwise we are thinking

1496
01:01:52,880 --> 01:01:56,160
about proceeding the draft

1497
01:01:59,680 --> 01:02:02,000
yeah this is michael speaking also just

1498
01:02:02,000 --> 01:02:03,839
as a heads-up this is an informational

1499
01:02:03,839 --> 01:02:05,440
document

1500
01:02:05,440 --> 01:02:07,280
so um

1501
01:02:07,280 --> 01:02:09,280
of the powerful information documents is

1502
01:02:09,280 --> 01:02:11,359
maybe a little bit lower than standard

1503
01:02:11,359 --> 01:02:13,920
strap so for an informational document i

1504
01:02:13,920 --> 01:02:16,400
think that the working group last call

1505
01:02:16,400 --> 01:02:18,559
is easier to achieve and we might not be

1506
01:02:18,559 --> 01:02:21,839
far away from that

1507
01:02:30,400 --> 01:02:33,720
any comments

1508
01:02:34,480 --> 01:02:36,000
if that's not the case then we move on

1509
01:02:36,000 --> 01:02:36,799
to

1510
01:02:36,799 --> 01:02:37,839
um

1511
01:02:37,839 --> 01:02:40,640
greg who is presenting on a tcpao

1512
01:02:40,640 --> 01:02:43,038
interrupt

1513
01:02:44,000 --> 01:02:46,559
greg you can run your slides

1514
01:02:46,559 --> 01:02:49,559
herself

1515
01:02:50,640 --> 01:02:52,559
oh um

1516
01:02:52,559 --> 01:02:55,200
wait a minute

1517
01:03:00,640 --> 01:03:03,359
yep now it should be possible

1518
01:03:03,359 --> 01:03:06,720
okay hey how's the audio

1519
01:03:06,720 --> 01:03:09,680
yeah pretty good

1520
01:03:15,760 --> 01:03:17,920
okay hi my name is greg hankins i'm

1521
01:03:17,920 --> 01:03:20,160
presenting on behalf of me and also

1522
01:03:20,160 --> 01:03:21,920
melchior ailments

1523
01:03:21,920 --> 01:03:24,240
who participated and helped facilitate

1524
01:03:24,240 --> 01:03:26,720
this interrupt test

1525
01:03:26,720 --> 01:03:28,799
i should mention it's not

1526
01:03:28,799 --> 01:03:31,760
clear from these slides uh the main use

1527
01:03:31,760 --> 01:03:33,039
case that we're looking at in the

1528
01:03:33,039 --> 01:03:36,000
operator community is for bgp so

1529
01:03:36,000 --> 01:03:38,319
uh this tests focus around pcpao with

1530
01:03:38,319 --> 01:03:40,000
bgp and

1531
01:03:40,000 --> 01:03:41,599
all the work that we're doing to

1532
01:03:41,599 --> 01:03:43,440
evangelize the technology and promote it

1533
01:03:43,440 --> 01:03:46,160
in the operator community is around use

1534
01:03:46,160 --> 01:03:48,880
for bgp as a replacement for

1535
01:03:48,880 --> 01:03:51,520
md5

1536
01:03:51,599 --> 01:03:54,240
we conducted an interop test last summer

1537
01:03:54,240 --> 01:03:56,079
it was in the middle of the covid

1538
01:03:56,079 --> 01:03:58,799
pandemic and the shutdowns so we figured

1539
01:03:58,799 --> 01:04:00,319
let's use the time

1540
01:04:00,319 --> 01:04:02,079
to do some interrupt testing over the

1541
01:04:02,079 --> 01:04:05,839
internet it was uh done remotely using

1542
01:04:05,839 --> 01:04:07,599
virtual machines

1543
01:04:07,599 --> 01:04:09,119
and it turns out it doesn't really

1544
01:04:09,119 --> 01:04:10,720
matter where they're located as long as

1545
01:04:10,720 --> 01:04:13,119
there's a tcp connection so we used

1546
01:04:13,119 --> 01:04:16,240
multi-hop bgp and established v4 and v6

1547
01:04:16,240 --> 01:04:18,240
sessions over the internet

1548
01:04:18,240 --> 01:04:20,880
this saved us some time in getting

1549
01:04:20,880 --> 01:04:23,200
together in person and lugging routers

1550
01:04:23,200 --> 01:04:24,640
around and things like that so it's

1551
01:04:24,640 --> 01:04:27,200
really easy just to spin up a vm

1552
01:04:27,200 --> 01:04:29,680
and do testing over the internet

1553
01:04:29,680 --> 01:04:33,039
we tested with two algorithms there sha

1554
01:04:33,039 --> 01:04:35,200
96 and

1555
01:04:35,200 --> 01:04:38,480
asc mac 96

1556
01:04:38,480 --> 01:04:41,039
the interrupt was pretty easy but we did

1557
01:04:41,039 --> 01:04:43,520
learn a couple significant lessons that

1558
01:04:43,520 --> 01:04:45,920
um are here in the slides uh lesson

1559
01:04:45,920 --> 01:04:47,119
number one

1560
01:04:47,119 --> 01:04:49,680
and this is maybe was not obvious to me

1561
01:04:49,680 --> 01:04:53,359
as a newcomer to tcp ao i think

1562
01:04:53,359 --> 01:04:54,960
for someone that's configuring it for

1563
01:04:54,960 --> 01:04:56,960
the first time it could be a little bit

1564
01:04:56,960 --> 01:04:58,559
of a learning curve so

1565
01:04:58,559 --> 01:05:00,559
the first lesson that we learned is that

1566
01:05:00,559 --> 01:05:02,400
send and receive are configured from the

1567
01:05:02,400 --> 01:05:04,640
router's perspective so

1568
01:05:04,640 --> 01:05:07,359
my initial configuration was to

1569
01:05:07,359 --> 01:05:10,079
match the send and receive ids it turns

1570
01:05:10,079 --> 01:05:12,000
out you actually have to have them so

1571
01:05:12,000 --> 01:05:14,640
that they're opposite so that the send

1572
01:05:14,640 --> 01:05:16,880
is configured to the receive and the

1573
01:05:16,880 --> 01:05:18,480
corresponding receive is configured to

1574
01:05:18,480 --> 01:05:20,000
descend

1575
01:05:20,000 --> 01:05:21,440
that was one important thing that we've

1576
01:05:21,440 --> 01:05:24,000
learned we provided this feedback to the

1577
01:05:24,000 --> 01:05:25,520
yang model to

1578
01:05:25,520 --> 01:05:27,760
hopefully clarify that in the

1579
01:05:27,760 --> 01:05:28,880
yang model

1580
01:05:28,880 --> 01:05:30,720
and we also

1581
01:05:30,720 --> 01:05:32,799
updated our respective documentation to

1582
01:05:32,799 --> 01:05:34,240
make sure that people understand that's

1583
01:05:34,240 --> 01:05:35,680
how you configure it

1584
01:05:35,680 --> 01:05:38,640
and the other thing is that since tcpao

1585
01:05:38,640 --> 01:05:40,640
supports multiple authentication

1586
01:05:40,640 --> 01:05:42,240
algorithms

1587
01:05:42,240 --> 01:05:44,640
then or cryptographic algorithms i mean

1588
01:05:44,640 --> 01:05:46,400
then you have to make sure that you also

1589
01:05:46,400 --> 01:05:48,160
configure the same algorithm or else

1590
01:05:48,160 --> 01:05:50,960
that's not going to work

1591
01:05:50,960 --> 01:05:53,359
the other lesson that we learned

1592
01:05:53,359 --> 01:05:57,359
is that we had a firewall in the path

1593
01:05:57,359 --> 01:05:59,920
which we initially did not know about so

1594
01:05:59,920 --> 01:06:01,680
the nokia router was connected to the

1595
01:06:01,680 --> 01:06:04,480
internet and was was open the juniper

1596
01:06:04,480 --> 01:06:06,960
router was behind a firewall

1597
01:06:06,960 --> 01:06:09,520
and it turns out that the firewall was

1598
01:06:09,520 --> 01:06:12,559
actually modifying the mss option for

1599
01:06:12,559 --> 01:06:14,079
some reason

1600
01:06:14,079 --> 01:06:17,119
so this caused the calculation to fail

1601
01:06:17,119 --> 01:06:19,280
on the receiver and the bgp session did

1602
01:06:19,280 --> 01:06:21,119
not come up so this is actually great

1603
01:06:21,119 --> 01:06:23,920
because this actually means that tcpa

1604
01:06:23,920 --> 01:06:25,359
was working

1605
01:06:25,359 --> 01:06:27,760
since the packet was modified

1606
01:06:27,760 --> 01:06:29,920
the session did not come up

1607
01:06:29,920 --> 01:06:31,920
so once we figured out that there was

1608
01:06:31,920 --> 01:06:33,440
indeed a firewall we had to do some

1609
01:06:33,440 --> 01:06:35,760
package races on each end and then

1610
01:06:35,760 --> 01:06:37,440
we figured out what was going on

1611
01:06:37,440 --> 01:06:39,039
relatively quickly

1612
01:06:39,039 --> 01:06:41,680
the firewall issue was resolved

1613
01:06:41,680 --> 01:06:47,000
and um interop test was successful

1614
01:06:47,200 --> 01:06:49,280
there wasn't really much else to say

1615
01:06:49,280 --> 01:06:51,839
really once the the tcp sessions came up

1616
01:06:51,839 --> 01:06:54,240
we exchanged routes and just as an

1617
01:06:54,240 --> 01:06:56,240
extended test and everything worked

1618
01:06:56,240 --> 01:06:58,880
great so in terms of implementations

1619
01:06:58,880 --> 01:07:00,400
there are currently several commercial

1620
01:07:00,400 --> 01:07:02,240
implementations that we're aware of if

1621
01:07:02,240 --> 01:07:04,799
anyone knows of other implementations

1622
01:07:04,799 --> 01:07:06,960
please let us know and we'll

1623
01:07:06,960 --> 01:07:08,960
add them to the list

1624
01:07:08,960 --> 01:07:11,200
there are no open source implementations

1625
01:07:11,200 --> 01:07:13,200
this is a problem because the community

1626
01:07:13,200 --> 01:07:15,680
can't really adopt the technology until

1627
01:07:15,680 --> 01:07:17,520
there's a number one open source

1628
01:07:17,520 --> 01:07:20,480
implementations and then number two a

1629
01:07:20,480 --> 01:07:22,799
tool ecosystem to support the

1630
01:07:22,799 --> 01:07:24,480
implementation so

1631
01:07:24,480 --> 01:07:25,920
currently there's no open source

1632
01:07:25,920 --> 01:07:28,559
implementations and as far as we know

1633
01:07:28,559 --> 01:07:32,079
only wireshark supports tcpao

1634
01:07:32,079 --> 01:07:34,720
other tools like tcp dump

1635
01:07:34,720 --> 01:07:37,839
don't have support for ao yet

1636
01:07:37,839 --> 01:07:41,599
so here's uh the exciting news is that

1637
01:07:41,599 --> 01:07:43,119
just last week

1638
01:07:43,119 --> 01:07:44,000
several

1639
01:07:44,000 --> 01:07:46,240
members of the community finalized

1640
01:07:46,240 --> 01:07:48,079
a development project that's funded by

1641
01:07:48,079 --> 01:07:49,760
the ripe ncc

1642
01:07:49,760 --> 01:07:52,720
we have funding to develop a reference

1643
01:07:52,720 --> 01:07:55,039
implementation it's done by philip peps

1644
01:07:55,039 --> 01:07:55,920
who's

1645
01:07:55,920 --> 01:07:58,240
been a longtime freebsd committer

1646
01:07:58,240 --> 01:08:00,640
we're going to provide

1647
01:08:00,640 --> 01:08:01,680
support

1648
01:08:01,680 --> 01:08:03,599
by offering router vm's for interrupt

1649
01:08:03,599 --> 01:08:05,920
testing juniper and nokia will support

1650
01:08:05,920 --> 01:08:08,480
the testing with vms and the set of

1651
01:08:08,480 --> 01:08:10,720
deliverables is first of all a reference

1652
01:08:10,720 --> 01:08:13,200
implementation of tcpao for the bsd

1653
01:08:13,200 --> 01:08:17,359
kernel and also nc netcat utility

1654
01:08:17,359 --> 01:08:18,640
and then a port of that reference

1655
01:08:18,640 --> 01:08:20,880
implementation to the linux kernel

1656
01:08:20,880 --> 01:08:23,600
we're currently working on more sponsors

1657
01:08:23,600 --> 01:08:26,319
to also add extensions to

1658
01:08:26,319 --> 01:08:28,319
some popular routing implementations

1659
01:08:28,319 --> 01:08:30,479
like open bgp bird

1660
01:08:30,479 --> 01:08:32,238
possibly fr

1661
01:08:32,238 --> 01:08:34,719
and this work is targeted it's going to

1662
01:08:34,719 --> 01:08:36,560
like i said we just finalized this last

1663
01:08:36,560 --> 01:08:38,319
week so the work should be starting

1664
01:08:38,319 --> 01:08:41,600
relatively soon and release targeted for

1665
01:08:41,600 --> 01:08:45,520
early next year hopefully january 21

1666
01:08:45,520 --> 01:08:47,520
at 22 though that should be january 22

1667
01:08:47,520 --> 01:08:50,159
sorry about that

1668
01:08:50,960 --> 01:08:53,600
in terms of resources we have a github

1669
01:08:53,600 --> 01:08:56,000
page that has the configuration examples

1670
01:08:56,000 --> 01:08:57,600
that were used for the juniper nokia

1671
01:08:57,600 --> 01:08:59,839
test we added some cisco examples as

1672
01:08:59,839 --> 01:09:00,880
well

1673
01:09:00,880 --> 01:09:02,960
we're also developing a much more

1674
01:09:02,960 --> 01:09:06,319
comprehensive website tcpao.net

1675
01:09:06,319 --> 01:09:08,640
that is intended to be a one-stop

1676
01:09:08,640 --> 01:09:11,279
resource for evangelism

1677
01:09:11,279 --> 01:09:12,799
resources

1678
01:09:12,799 --> 01:09:14,799
why you should use this technology

1679
01:09:14,799 --> 01:09:16,880
central location for links to

1680
01:09:16,880 --> 01:09:18,880
implementations configuration all that

1681
01:09:18,880 --> 01:09:20,799
kind of thing everyone everything that

1682
01:09:20,799 --> 01:09:22,479
an operator would need

1683
01:09:22,479 --> 01:09:25,040
in order to figure out if their routing

1684
01:09:25,040 --> 01:09:27,279
implementation support tcpao how to

1685
01:09:27,279 --> 01:09:28,479
configure it

1686
01:09:28,479 --> 01:09:30,719
and as well as some of the benefits as i

1687
01:09:30,719 --> 01:09:32,960
mentioned

1688
01:09:32,960 --> 01:09:35,279
and that's about it

1689
01:09:35,279 --> 01:09:36,799
any questions or if you have any

1690
01:09:36,799 --> 01:09:39,198
comments or any other tools and

1691
01:09:39,198 --> 01:09:40,799
resources or if you'd like to be

1692
01:09:40,799 --> 01:09:41,759
involved

1693
01:09:41,759 --> 01:09:43,920
in some of the ongoing projects then get

1694
01:09:43,920 --> 01:09:46,640
in touch with us

1695
01:09:47,520 --> 01:09:50,159
any questions

1696
01:09:55,040 --> 01:09:56,960
you mentioned are the um

1697
01:09:56,960 --> 01:09:59,520
is the is your team aware of the the

1698
01:09:59,520 --> 01:10:01,520
well it looks like a tcp ao

1699
01:10:01,520 --> 01:10:03,440
implementation underway by leonard

1700
01:10:03,440 --> 01:10:06,799
crestaz for linux

1701
01:10:07,199 --> 01:10:09,520
no we did not know about that

1702
01:10:09,520 --> 01:10:12,000
yeah it does seem like over the past

1703
01:10:12,000 --> 01:10:13,920
uh i guess over the past couple months i

1704
01:10:13,920 --> 01:10:16,960
do see patches from leonard prestas

1705
01:10:16,960 --> 01:10:20,800
for what looks like tcpao

1706
01:10:20,800 --> 01:10:23,040
i think it's underway it looks like he's

1707
01:10:23,040 --> 01:10:25,199
revised it a couple times but i just

1708
01:10:25,199 --> 01:10:27,440
wanted to mention that

1709
01:10:27,440 --> 01:10:30,400
okay i did not know about that um

1710
01:10:30,400 --> 01:10:32,080
could you would you mind sending us a

1711
01:10:32,080 --> 01:10:34,080
note with uh the name i don't recognize

1712
01:10:34,080 --> 01:10:36,480
the name i'm not i'm not a linux

1713
01:10:36,480 --> 01:10:38,480
developer familiar with all of them

1714
01:10:38,480 --> 01:10:40,400
yeah i'll send you the email

1715
01:10:40,400 --> 01:10:43,120
and then pointers to the patches yeah

1716
01:10:43,120 --> 01:10:45,840
great thanks a lot

1717
01:10:46,560 --> 01:10:48,960
micah

1718
01:10:49,600 --> 01:10:52,640
yeah i have one question regarding

1719
01:10:52,640 --> 01:10:55,360
actually the previous um configure the

1720
01:10:55,360 --> 01:10:56,880
previous talk

1721
01:10:56,880 --> 01:10:58,480
have you looked at the test vector

1722
01:10:58,480 --> 01:11:01,679
document during that interrupt

1723
01:11:01,679 --> 01:11:03,520
no we didn't um

1724
01:11:03,520 --> 01:11:06,480
primarily just because we we each had

1725
01:11:06,480 --> 01:11:08,880
implementations and we didn't feel like

1726
01:11:08,880 --> 01:11:10,239
we needed to

1727
01:11:10,239 --> 01:11:12,960
and uh our actually

1728
01:11:12,960 --> 01:11:15,120
the nokia implementation was released

1729
01:11:15,120 --> 01:11:17,360
many years ago even in the cisco as well

1730
01:11:17,360 --> 01:11:19,520
even before the test vector's draft was

1731
01:11:19,520 --> 01:11:21,040
even written

1732
01:11:21,040 --> 01:11:23,120
so that wasn't useful for us at the time

1733
01:11:23,120 --> 01:11:25,600
but i expect it will be useful for the

1734
01:11:25,600 --> 01:11:27,760
ongoing work in the freebsd reference

1735
01:11:27,760 --> 01:11:29,520
implementation

1736
01:11:29,520 --> 01:11:33,120
yeah if as if there's any um if such as

1737
01:11:33,120 --> 01:11:33,840
uh

1738
01:11:33,840 --> 01:11:34,719
an

1739
01:11:34,719 --> 01:11:36,560
observation already

1740
01:11:36,560 --> 01:11:38,560
can be posted somewhere for example a

1741
01:11:38,560 --> 01:11:40,960
list that this would be excellent so if

1742
01:11:40,960 --> 01:11:41,760
yeah

1743
01:11:41,760 --> 01:11:44,080
somebody confirms that the test vector

1744
01:11:44,080 --> 01:11:46,239
document uh first this correct and

1745
01:11:46,239 --> 01:11:47,920
segment has been useful

1746
01:11:47,920 --> 01:11:51,120
so this would be a very um strong um

1747
01:11:51,120 --> 01:11:53,520
help for tcpm to finish the document

1748
01:11:53,520 --> 01:11:54,640
actually

1749
01:11:54,640 --> 01:11:56,880
yep

1750
01:12:03,840 --> 01:12:08,920
was there someone in the queue before me

1751
01:12:10,560 --> 01:12:11,520
um

1752
01:12:11,520 --> 01:12:14,080
i just wanted to i mean i

1753
01:12:14,080 --> 01:12:16,719
pretty much like the idea of supporting

1754
01:12:16,719 --> 01:12:18,560
open source implementations

1755
01:12:18,560 --> 01:12:20,960
um regarding the previous d1 do you know

1756
01:12:20,960 --> 01:12:23,120
if philip is going to implement this for

1757
01:12:23,120 --> 01:12:27,440
the base tcp stack or also for

1758
01:12:27,440 --> 01:12:29,679
alternative tcp stacks like for rec or

1759
01:12:29,679 --> 01:12:31,199
so

1760
01:12:31,199 --> 01:12:33,280
i'm not sure that's a good question i

1761
01:12:33,280 --> 01:12:34,880
can

1762
01:12:34,880 --> 01:12:36,400
i can ask

1763
01:12:36,400 --> 01:12:39,280
ask philip and we can note that in the

1764
01:12:39,280 --> 01:12:41,360
project proposal

1765
01:12:41,360 --> 01:12:43,599
okay

1766
01:12:45,760 --> 01:12:48,000
because i think the base deck supports

1767
01:12:48,000 --> 01:12:51,000
uh

1768
01:12:52,080 --> 01:12:52,960
the

1769
01:12:52,960 --> 01:12:56,719
md5 stuff and the extensions don't right

1770
01:12:56,719 --> 01:12:58,960
now

1771
01:12:59,760 --> 01:13:00,719
okay

1772
01:13:00,719 --> 01:13:04,120
any other comments

1773
01:13:06,800 --> 01:13:09,040
if that's not the case then thank you

1774
01:13:09,040 --> 01:13:11,600
very much for the thank you

1775
01:13:11,600 --> 01:13:13,920
for the interesting information

1776
01:13:13,920 --> 01:13:16,920
um

1777
01:13:18,080 --> 01:13:18,400
and

1778
01:13:18,400 --> 01:13:20,960
[Music]

1779
01:13:20,960 --> 01:13:22,560
the next

1780
01:13:22,560 --> 01:13:24,880
is

1781
01:13:28,400 --> 01:13:30,840
neither wes nor

1782
01:13:30,840 --> 01:13:32,560
joe um

1783
01:13:32,560 --> 01:13:34,400
but wes is in

1784
01:13:34,400 --> 01:13:37,440
his west still there

1785
01:13:39,280 --> 01:13:42,320
no idea what's in these charts

1786
01:13:42,320 --> 01:13:46,000
yeah so um

1787
01:13:46,000 --> 01:13:49,280
my point is um there are two documents

1788
01:13:49,280 --> 01:13:51,840
uh so so maybe you can jump in uh there

1789
01:13:51,840 --> 01:13:54,320
are two documents one is describing how

1790
01:13:54,320 --> 01:13:55,280
to

1791
01:13:55,280 --> 01:13:56,960
extend the

1792
01:13:56,960 --> 01:13:58,840
option space

1793
01:13:58,840 --> 01:14:01,840
for packets

1794
01:14:01,840 --> 01:14:04,159
after the initial exchange with soon

1795
01:14:04,159 --> 01:14:06,960
segments and another one

1796
01:14:06,960 --> 01:14:08,159
which is

1797
01:14:08,159 --> 01:14:11,120
an individual submission

1798
01:14:11,120 --> 01:14:13,440
about exchange extending the option

1799
01:14:13,440 --> 01:14:14,880
space

1800
01:14:14,880 --> 01:14:18,960
for packets with this option set

1801
01:14:18,960 --> 01:14:19,400
and

1802
01:14:19,400 --> 01:14:21,280
[Music]

1803
01:14:21,280 --> 01:14:23,920
so he has made

1804
01:14:23,920 --> 01:14:28,880
no progress on the implementation

1805
01:14:28,880 --> 01:14:30,960
and

1806
01:14:30,960 --> 01:14:32,400
things

1807
01:14:32,400 --> 01:14:35,760
so things that the document

1808
01:14:35,760 --> 01:14:37,760
is

1809
01:14:37,760 --> 01:14:40,159
becoming more stable so the tcp edo

1810
01:14:40,159 --> 01:14:42,640
document he thinks is ready for working

1811
01:14:42,640 --> 01:14:44,239
group last call

1812
01:14:44,239 --> 01:14:45,679
and

1813
01:14:45,679 --> 01:14:48,080
the the other one which is an individual

1814
01:14:48,080 --> 01:14:50,159
document

1815
01:14:50,159 --> 01:14:54,480
there are some dvds but he thinks it's

1816
01:14:54,960 --> 01:14:58,719
near ready for working with glass call

1817
01:14:58,719 --> 01:15:00,719
so that's the status update

1818
01:15:00,719 --> 01:15:01,920
um

1819
01:15:01,920 --> 01:15:05,840
are there any comments any messages for

1820
01:15:05,840 --> 01:15:08,640
wes or joe

1821
01:15:08,960 --> 01:15:11,040
a little bit i that is indeed quite

1822
01:15:11,040 --> 01:15:13,199
stable and has been for

1823
01:15:13,199 --> 01:15:14,000
uh

1824
01:15:14,000 --> 01:15:15,199
a while

1825
01:15:15,199 --> 01:15:19,199
uh it's just been uh a case of uh

1826
01:15:19,199 --> 01:15:20,800
there's a lack of

1827
01:15:20,800 --> 01:15:23,360
uh eagerness or urgency in implementing

1828
01:15:23,360 --> 01:15:24,880
it anywhere

1829
01:15:24,880 --> 01:15:26,080
and so

1830
01:15:26,080 --> 01:15:27,199
that's

1831
01:15:27,199 --> 01:15:29,920
what has been paused on

1832
01:15:29,920 --> 01:15:32,560
however it's not really been changing

1833
01:15:32,560 --> 01:15:33,600
at all

1834
01:15:33,600 --> 01:15:34,400
and

1835
01:15:34,400 --> 01:15:36,400
there are no known issues that i'm aware

1836
01:15:36,400 --> 01:15:39,120
of either other than not really being

1837
01:15:39,120 --> 01:15:41,599
implemented

1838
01:15:43,760 --> 01:15:46,239
yoshi

1839
01:15:48,560 --> 01:15:52,719
okay so yeah i think i have a couple of

1840
01:15:52,719 --> 01:15:55,120
comment video but i will send a you know

1841
01:15:55,120 --> 01:15:57,280
on the list later because i need to

1842
01:15:57,280 --> 01:15:59,520
think about a little bit more but other

1843
01:15:59,520 --> 01:16:02,800
than that i think i'm really curious

1844
01:16:02,800 --> 01:16:03,920
about

1845
01:16:03,920 --> 01:16:06,920
uh

1846
01:16:07,120 --> 01:16:09,840
some uh middle box interaction or a

1847
01:16:09,840 --> 01:16:11,840
hardware optimization interaction of the

1848
01:16:11,840 --> 01:16:15,840
edo and then especially if it's in

1849
01:16:15,840 --> 01:16:17,360
if someone

1850
01:16:17,360 --> 01:16:19,520
you know implementing you know

1851
01:16:19,520 --> 01:16:22,159
renaissance others you know always stuck

1852
01:16:22,159 --> 01:16:23,520
you know

1853
01:16:23,520 --> 01:16:25,920
then i've tried to get some feedback if

1854
01:16:25,920 --> 01:16:28,320
this is feasible like this there is no

1855
01:16:28,320 --> 01:16:30,960
concerns about it so

1856
01:16:30,960 --> 01:16:32,640
i just know

1857
01:16:32,640 --> 01:16:35,199
my concise now this is

1858
01:16:35,199 --> 01:16:38,159
very best feedback on this document so

1859
01:16:38,159 --> 01:16:40,400
but uh this is kind of important

1860
01:16:40,400 --> 01:16:42,640
document because you know option space

1861
01:16:42,640 --> 01:16:45,520
extension is very important so i just

1862
01:16:45,520 --> 01:16:48,159
would like to see more feedback

1863
01:16:48,159 --> 01:16:49,679
and then

1864
01:16:49,679 --> 01:16:51,840
and also scene extension

1865
01:16:51,840 --> 01:16:54,320
i i have some you know one collection

1866
01:16:54,320 --> 01:16:56,640
this this is not uh indeed is this is

1867
01:16:56,640 --> 01:16:59,040
not adapted working group item so there

1868
01:16:59,040 --> 01:17:01,199
is no working with brasco and so it's

1869
01:17:01,199 --> 01:17:03,040
not ready for working with rascal i

1870
01:17:03,040 --> 01:17:03,920
think

1871
01:17:03,920 --> 01:17:04,960
and then

1872
01:17:04,960 --> 01:17:06,159
um

1873
01:17:06,159 --> 01:17:09,120
and then i basically opposed the idea

1874
01:17:09,120 --> 01:17:10,400
that's

1875
01:17:10,400 --> 01:17:13,199
submitting this draft as an individual

1876
01:17:13,199 --> 01:17:14,840
submission

1877
01:17:14,840 --> 01:17:16,400
um

1878
01:17:16,400 --> 01:17:19,360
individual streams so if these documents

1879
01:17:19,360 --> 01:17:21,520
you know going to publish it should be

1880
01:17:21,520 --> 01:17:23,600
adapted back in group item and then star

1881
01:17:23,600 --> 01:17:25,520
directly

1882
01:17:25,520 --> 01:17:26,560
that's

1883
01:17:26,560 --> 01:17:29,440
one thing i want to mention that

1884
01:17:29,440 --> 01:17:33,280
but this is as my individual comment

1885
01:17:33,280 --> 01:17:35,760
again i also have a want to see a more

1886
01:17:35,760 --> 01:17:39,280
feedback on this one as well

1887
01:17:39,760 --> 01:17:42,840
yeah the milestones are

1888
01:17:42,840 --> 01:17:44,960
um a bit

1889
01:17:44,960 --> 01:17:46,400
in the future

1890
01:17:46,400 --> 01:17:49,040
martin as an individual or as an id i

1891
01:17:49,040 --> 01:17:50,640
don't know

1892
01:17:50,640 --> 01:17:52,560
oh as an individual um thanks for the

1893
01:17:52,560 --> 01:17:54,480
presentation wes uh can you talk a

1894
01:17:54,480 --> 01:17:56,239
little more about implementation so are

1895
01:17:56,239 --> 01:17:58,000
there literally no implementations or

1896
01:17:58,000 --> 01:17:59,679
just a matter that hasn't been deployed

1897
01:17:59,679 --> 01:18:02,080
anymore

1898
01:18:03,600 --> 01:18:06,960
actually i believe there was some work

1899
01:18:06,960 --> 01:18:08,719
but it was uh

1900
01:18:08,719 --> 01:18:10,560
several years ago

1901
01:18:10,560 --> 01:18:12,880
i think joe was working with a grad

1902
01:18:12,880 --> 01:18:15,199
student who did some

1903
01:18:15,199 --> 01:18:18,159
implementation work on edo i don't

1904
01:18:18,159 --> 01:18:21,360
think the other one uh

1905
01:18:21,360 --> 01:18:23,040
was implemented yet

1906
01:18:23,040 --> 01:18:24,320
but um

1907
01:18:24,320 --> 01:18:26,400
yeah i think there was some work and

1908
01:18:26,400 --> 01:18:28,640
that experience was plowed back into the

1909
01:18:28,640 --> 01:18:32,080
draft however it's not uh the case that

1910
01:18:32,080 --> 01:18:33,120
that work

1911
01:18:33,120 --> 01:18:35,760
resulted in like patches to the linux

1912
01:18:35,760 --> 01:18:37,360
kernel that uh

1913
01:18:37,360 --> 01:18:38,239
are

1914
01:18:38,239 --> 01:18:41,040
deployed or anything like that so

1915
01:18:41,040 --> 01:18:42,480
um

1916
01:18:42,480 --> 01:18:45,280
i think uh

1917
01:18:45,280 --> 01:18:47,760
an interesting way to deal with this

1918
01:18:47,760 --> 01:18:49,520
might be to

1919
01:18:49,520 --> 01:18:52,480
attempt to last call and see

1920
01:18:52,480 --> 01:18:55,040
who responds uh

1921
01:18:55,040 --> 01:18:56,560
i i think

1922
01:18:56,560 --> 01:18:58,640
i think that might

1923
01:18:58,640 --> 01:19:00,480
force people to look at it

1924
01:19:00,480 --> 01:19:04,000
because there's really no driving uh

1925
01:19:04,000 --> 01:19:06,000
need for this at the moment although

1926
01:19:06,000 --> 01:19:09,840
there had been many times in the past

1927
01:19:09,840 --> 01:19:10,800
when

1928
01:19:10,800 --> 01:19:13,360
people wanted more options space and

1929
01:19:13,360 --> 01:19:14,480
didn't have it

1930
01:19:14,480 --> 01:19:15,600
and

1931
01:19:15,600 --> 01:19:17,360
because of that that's why these drafts

1932
01:19:17,360 --> 01:19:19,040
exist

1933
01:19:19,040 --> 01:19:20,239
it's only a matter of time before

1934
01:19:20,239 --> 01:19:22,239
someone comes up again and wants more

1935
01:19:22,239 --> 01:19:24,080
option space

1936
01:19:24,080 --> 01:19:26,480
yeah i mean i think i think last call as

1937
01:19:26,480 --> 01:19:28,719
a technique to like shake out stuff is

1938
01:19:28,719 --> 01:19:30,640
good as long as you only accept knows an

1939
01:19:30,640 --> 01:19:32,320
answer um

1940
01:19:32,320 --> 01:19:34,159
i i guess my other my other thing would

1941
01:19:34,159 --> 01:19:35,679
be uh

1942
01:19:35,679 --> 01:19:37,280
i'm a little uncomfortable the idea of

1943
01:19:37,280 --> 01:19:41,120
edo being standards track um

1944
01:19:41,120 --> 01:19:43,360
it seems to me like

1945
01:19:43,360 --> 01:19:45,520
the whole game here is

1946
01:19:45,520 --> 01:19:48,320
is deployment experience with the the

1947
01:19:48,320 --> 01:19:49,760
whole question here is the middle box

1948
01:19:49,760 --> 01:19:51,920
reactions and without any deployment

1949
01:19:51,920 --> 01:19:53,440
experience i don't know how we could

1950
01:19:53,440 --> 01:19:55,520
possibly recommend this

1951
01:19:55,520 --> 01:19:58,000
to people um

1952
01:19:58,000 --> 01:19:59,679
experimental would be fine but standards

1953
01:19:59,679 --> 01:20:01,120
track seemed really

1954
01:20:01,120 --> 01:20:02,719
aggressive to me personally as an

1955
01:20:02,719 --> 01:20:03,760
individual

1956
01:20:03,760 --> 01:20:06,000
thanks

1957
01:20:07,040 --> 01:20:08,159
michael

1958
01:20:08,159 --> 01:20:10,800
and i closed the queue after my

1959
01:20:10,800 --> 01:20:14,560
yeah just like to echo what wes said um

1960
01:20:14,560 --> 01:20:17,440
10 years ago this was really an urgent

1961
01:20:17,440 --> 01:20:19,760
problem that showed up every once per

1962
01:20:19,760 --> 01:20:20,800
year

1963
01:20:20,800 --> 01:20:22,960
and this was the basically when we

1964
01:20:22,960 --> 01:20:24,800
started that work um

1965
01:20:24,800 --> 01:20:27,280
of course things got more silent on

1966
01:20:27,280 --> 01:20:30,000
options recently but as i said there was

1967
01:20:30,000 --> 01:20:32,800
a strong need for that document

1968
01:20:32,800 --> 01:20:35,199
a couple of years ago

1969
01:20:35,199 --> 01:20:36,880
of course situation has changed a bit

1970
01:20:36,880 --> 01:20:37,760
but

1971
01:20:37,760 --> 01:20:39,440
we don't know the future so i think

1972
01:20:39,440 --> 01:20:40,719
there

1973
01:20:40,719 --> 01:20:42,960
is it is valid to document some of these

1974
01:20:42,960 --> 01:20:46,840
things in one way or another

1975
01:20:48,639 --> 01:20:52,080
that's an individual country

1976
01:20:53,199 --> 01:20:55,519
okay

1977
01:20:56,320 --> 01:20:59,120
but uh yoshi said he had comments so i

1978
01:20:59,120 --> 01:21:02,400
suggest that he sends the comments

1979
01:21:02,400 --> 01:21:04,559
and

1980
01:21:04,960 --> 01:21:06,320
that can get

1981
01:21:06,320 --> 01:21:09,759
incorporated in the document

1982
01:21:09,840 --> 01:21:13,120
okay so we have uh 40 minutes left and

1983
01:21:13,120 --> 01:21:15,040
we have we need 40 minutes for the for

1984
01:21:15,040 --> 01:21:17,440
the next three presentations so i'm

1985
01:21:17,440 --> 01:21:18,639
i'm running

1986
01:21:18,639 --> 01:21:20,480
the timer to

1987
01:21:20,480 --> 01:21:21,440
keep

1988
01:21:21,440 --> 01:21:23,280
um

1989
01:21:23,280 --> 01:21:25,040
the time budgets

1990
01:21:25,040 --> 01:21:29,840
reflected so lars you're up next

1991
01:21:30,960 --> 01:21:32,560
yeah thanks

1992
01:21:32,560 --> 01:21:35,120
uh can you share should i share

1993
01:21:35,120 --> 01:21:36,400
uh

1994
01:21:36,400 --> 01:21:39,679
i would say you share

1995
01:21:39,679 --> 01:21:43,719
you should be able to do that

1996
01:21:44,960 --> 01:21:46,560
okay

1997
01:21:46,560 --> 01:21:47,920
are you

1998
01:21:47,920 --> 01:21:49,780
requested to share

1999
01:21:49,780 --> 01:21:50,960
[Music]

2000
01:21:50,960 --> 01:21:52,480
i

2001
01:21:52,480 --> 01:21:54,159
just

2002
01:21:54,159 --> 01:21:58,879
yep now you should be able to do that

2003
01:22:04,080 --> 01:22:05,840
i think it's these ones

2004
01:22:05,840 --> 01:22:07,840
can you see

2005
01:22:07,840 --> 01:22:10,080
yes and sorry for being so super late

2006
01:22:10,080 --> 01:22:11,280
with them i actually didn't have them

2007
01:22:11,280 --> 01:22:12,719
until earlier today because i thought i

2008
01:22:12,719 --> 01:22:14,719
would speak without slides and then i

2009
01:22:14,719 --> 01:22:16,320
decided maybe

2010
01:22:16,320 --> 01:22:18,000
uh giving people something to look at

2011
01:22:18,000 --> 01:22:20,719
other than myself is a nice thing to do

2012
01:22:20,719 --> 01:22:21,679
right so

2013
01:22:21,679 --> 01:22:23,600
you used a way to submit them which i

2014
01:22:23,600 --> 01:22:25,600
don't know how to do that maybe it's

2015
01:22:25,600 --> 01:22:26,800
just

2016
01:22:26,800 --> 01:22:30,159
so you can you can now upload slides

2017
01:22:30,159 --> 01:22:31,600
directly to the data tracker as a

2018
01:22:31,600 --> 01:22:32,960
participant

2019
01:22:32,960 --> 01:22:34,159
ah okay

2020
01:22:34,159 --> 01:22:36,000
which is what i did because i wanted to

2021
01:22:36,000 --> 01:22:37,920
try it out but it's a new functionality

2022
01:22:37,920 --> 01:22:40,800
that can be advertised a bit more but um

2023
01:22:40,800 --> 01:22:42,320
it means that your shares don't have to

2024
01:22:42,320 --> 01:22:44,159
like do all the slight handling

2025
01:22:44,159 --> 01:22:46,719
uh yourself anymore which is nice

2026
01:22:46,719 --> 01:22:47,600
um

2027
01:22:47,600 --> 01:22:49,040
anyway so it was

2028
01:22:49,040 --> 01:22:50,560
i guess it's good i made slides just

2029
01:22:50,560 --> 01:22:54,239
just for that reason um right so so um

2030
01:22:54,239 --> 01:22:56,400
this is a sort of initial presentation

2031
01:22:56,400 --> 01:22:57,440
on

2032
01:22:57,440 --> 01:22:58,880
wanting to raise the question whether we

2033
01:22:58,880 --> 01:23:02,800
should revise rfc 5681 which is tcp

2034
01:23:02,800 --> 01:23:04,480
congestion control

2035
01:23:04,480 --> 01:23:07,280
which is a pretty core um rfc and i

2036
01:23:07,280 --> 01:23:08,719
already talked earlier when we had the

2037
01:23:08,719 --> 01:23:10,400
cubic presentation on some of the

2038
01:23:10,400 --> 01:23:12,239
reasons why i think wouldn't mean we

2039
01:23:12,239 --> 01:23:13,760
might want to do that but

2040
01:23:13,760 --> 01:23:15,120
let's go ahead

2041
01:23:15,120 --> 01:23:18,400
um as a brief history right so 5681 is

2042
01:23:18,400 --> 01:23:20,320
the current draft standard um it

2043
01:23:20,320 --> 01:23:22,800
obsoleted 2581 which was a proposed

2044
01:23:22,800 --> 01:23:25,520
standard which in turn obsoleted 2001

2045
01:23:25,520 --> 01:23:27,760
which was also proposed standard and

2046
01:23:27,760 --> 01:23:29,440
just based on the rfc number alone you

2047
01:23:29,440 --> 01:23:31,120
can see it's been a while since this was

2048
01:23:31,120 --> 01:23:32,960
last touched

2049
01:23:32,960 --> 01:23:35,920
um so the the main goal here would be to

2050
01:23:35,920 --> 01:23:38,239
move this to an internet standard uh

2051
01:23:38,239 --> 01:23:39,840
since it isn't already and it kind of

2052
01:23:39,840 --> 01:23:41,679
feels like tcp congestion control is

2053
01:23:41,679 --> 01:23:43,280
sort of ready for that

2054
01:23:43,280 --> 01:23:46,400
um there's one existing errata which has

2055
01:23:46,400 --> 01:23:48,480
also been verified um

2056
01:23:48,480 --> 01:23:51,840
on 5681 so the minimum goal would be to

2057
01:23:51,840 --> 01:23:54,560
roll that into the revision um which is

2058
01:23:54,560 --> 01:23:56,239
i think pretty uncontroversial given

2059
01:23:56,239 --> 01:23:58,719
that it's already verified

2060
01:23:58,719 --> 01:24:00,960
um i reached out to the original authors

2061
01:24:00,960 --> 01:24:02,880
and uh ron paxton has said that he has

2062
01:24:02,880 --> 01:24:04,560
moved on and has no time to spend on

2063
01:24:04,560 --> 01:24:07,199
this but wishes of luck uh mike allman

2064
01:24:07,199 --> 01:24:08,560
and ethan blanton said they would

2065
01:24:08,560 --> 01:24:10,239
contribute and i've also sort of reached

2066
01:24:10,239 --> 01:24:11,280
out to

2067
01:24:11,280 --> 01:24:13,760
ridicule neil cargill and jana yengar

2068
01:24:13,760 --> 01:24:15,600
for help and

2069
01:24:15,600 --> 01:24:18,320
um that is already five so if if those

2070
01:24:18,320 --> 01:24:20,800
five want to do it uh you know

2071
01:24:20,800 --> 01:24:22,960
full speed ahead to them otherwise i can

2072
01:24:22,960 --> 01:24:24,719
sort of volunteer to act as editor but i

2073
01:24:24,719 --> 01:24:26,400
felt like i wanted to have some people

2074
01:24:26,400 --> 01:24:28,840
on board that know this stuff uh better

2075
01:24:28,840 --> 01:24:30,400
than me

2076
01:24:30,400 --> 01:24:32,800
um there's a repository um on github

2077
01:24:32,800 --> 01:24:35,040
which basically has a markdown version

2078
01:24:35,040 --> 01:24:37,760
of the text that was 5681

2079
01:24:37,760 --> 01:24:39,520
um and there's sort of just formatting

2080
01:24:39,520 --> 01:24:43,040
changes and and some very minor things

2081
01:24:43,040 --> 01:24:45,120
are related to that like updating to

2082
01:24:45,120 --> 01:24:46,719
reference and so on

2083
01:24:46,719 --> 01:24:48,639
um so the the one question i want to

2084
01:24:48,639 --> 01:24:51,040
raise is should tcpm even do this right

2085
01:24:51,040 --> 01:24:54,080
uh basically open 5681

2086
01:24:54,080 --> 01:24:57,199
uh with those goals on the slide and and

2087
01:24:57,199 --> 01:24:59,040
there's a another goal on the next slide

2088
01:24:59,040 --> 01:25:00,800
that might make that discussion a little

2089
01:25:00,800 --> 01:25:02,960
bit more interesting right and that is

2090
01:25:02,960 --> 01:25:03,920
um

2091
01:25:03,920 --> 01:25:06,320
there's things that have accumulated um

2092
01:25:06,320 --> 01:25:09,600
since we uh published 5681 specifically

2093
01:25:09,600 --> 01:25:12,000
they're widely deployed for for a decade

2094
01:25:12,000 --> 01:25:13,280
or longer

2095
01:25:13,280 --> 01:25:15,760
that are in conflict with what 5681 says

2096
01:25:15,760 --> 01:25:18,480
and one specific example came up

2097
01:25:18,480 --> 01:25:20,400
when we did cubic

2098
01:25:20,400 --> 01:25:23,360
uh the quickbiz right 5681 says you set

2099
01:25:23,360 --> 01:25:26,719
ss thresh based on flight size

2100
01:25:26,719 --> 01:25:28,239
and

2101
01:25:28,239 --> 01:25:30,320
cubic as far as i know cubic basically

2102
01:25:30,320 --> 01:25:32,560
since its inception and also all major

2103
01:25:32,560 --> 01:25:35,360
cubic implementations don't do that and

2104
01:25:35,360 --> 01:25:36,719
they update

2105
01:25:36,719 --> 01:25:39,280
ss3 based on seawind and not flight test

2106
01:25:39,280 --> 01:25:41,600
because it has benefits in app limited

2107
01:25:41,600 --> 01:25:43,120
scenarios

2108
01:25:43,120 --> 01:25:44,000
um

2109
01:25:44,000 --> 01:25:47,040
which is technically not allowed by 5681

2110
01:25:47,040 --> 01:25:48,800
right which is why it was raised for

2111
01:25:48,800 --> 01:25:50,320
cubic when we wanted to move it to the

2112
01:25:50,320 --> 01:25:51,600
standard stack

2113
01:25:51,600 --> 01:25:56,239
um gory pointed out there's rfc 7661

2114
01:25:56,239 --> 01:25:58,960
which is experimental that already sort

2115
01:25:58,960 --> 01:26:00,639
of allows um

2116
01:26:00,639 --> 01:26:02,719
ss thresh to be set to something between

2117
01:26:02,719 --> 01:26:04,880
flight size and c wind so so cubic would

2118
01:26:04,880 --> 01:26:06,400
be sort of

2119
01:26:06,400 --> 01:26:10,360
in line with 7661 but 7661 didn't update

2120
01:26:10,360 --> 01:26:12,719
5681 and it couldn't because it's

2121
01:26:12,719 --> 01:26:14,159
experimental

2122
01:26:14,159 --> 01:26:17,679
right um also a quick uh i think this

2123
01:26:17,679 --> 01:26:19,600
was uh brought by yusun uh the quick

2124
01:26:19,600 --> 01:26:22,080
congestion control document actually

2125
01:26:22,080 --> 01:26:24,400
defines updating as a thresh based on

2126
01:26:24,400 --> 01:26:26,480
seaweed and so is also not in line with

2127
01:26:26,480 --> 01:26:28,320
5681

2128
01:26:28,320 --> 01:26:30,400
um and we have sort of this is one

2129
01:26:30,400 --> 01:26:32,400
example of something where you know we

2130
01:26:32,400 --> 01:26:34,400
are sort of diverging from

2131
01:26:34,400 --> 01:26:36,639
the uh the the original

2132
01:26:36,639 --> 01:26:37,360
uh

2133
01:26:37,360 --> 01:26:39,520
specification in 5681 but there's

2134
01:26:39,520 --> 01:26:41,600
probably others like that

2135
01:26:41,600 --> 01:26:43,920
um and others might have other examples

2136
01:26:43,920 --> 01:26:45,920
so the question is

2137
01:26:45,920 --> 01:26:48,960
if we did update 5681 did we want to

2138
01:26:48,960 --> 01:26:50,639
move some of these things in

2139
01:26:50,639 --> 01:26:52,880
specifically um

2140
01:26:52,880 --> 01:26:55,199
for this one the cubic uh bis document

2141
01:26:55,199 --> 01:26:57,679
that we're doing is already updating or

2142
01:26:57,679 --> 01:27:00,880
proposing to update 5681 specifically to

2143
01:27:00,880 --> 01:27:03,520
make cubic's behavior okay

2144
01:27:03,520 --> 01:27:05,520
basically saying you know whatever cubic

2145
01:27:05,520 --> 01:27:06,960
does is fine too

2146
01:27:06,960 --> 01:27:08,719
um and and there might be other things

2147
01:27:08,719 --> 01:27:10,880
here that we might want to sort of make

2148
01:27:10,880 --> 01:27:14,560
okay based on 5681 um

2149
01:27:14,560 --> 01:27:16,159
this does raise the question sort of in

2150
01:27:16,159 --> 01:27:18,639
terms of um sort of the the standards

2151
01:27:18,639 --> 01:27:20,800
process you know if we move things into

2152
01:27:20,800 --> 01:27:23,120
5681 that aren't

2153
01:27:23,120 --> 01:27:24,080
uh

2154
01:27:24,080 --> 01:27:25,679
baked enough

2155
01:27:25,679 --> 01:27:27,520
um you know would that mean we need to

2156
01:27:27,520 --> 01:27:30,239
go back to propose standard with it or

2157
01:27:30,239 --> 01:27:32,000
or stay at draft center and not go to

2158
01:27:32,000 --> 01:27:33,920
full internet center but i think

2159
01:27:33,920 --> 01:27:35,840
uh that question of how we're going to

2160
01:27:35,840 --> 01:27:37,760
do this we can answer once we know what

2161
01:27:37,760 --> 01:27:39,920
we want to do uh to the to the

2162
01:27:39,920 --> 01:27:41,360
specification

2163
01:27:41,360 --> 01:27:43,040
um and i see i have people in the queue

2164
01:27:43,040 --> 01:27:45,360
which is good because that's all i had

2165
01:27:45,360 --> 01:27:47,839
thank you

2166
01:27:55,120 --> 01:27:56,639
yeah hello everybody um thanks for

2167
01:27:56,639 --> 01:27:58,159
bringing this up so i think actually

2168
01:27:58,159 --> 01:27:59,840
these changes on this slide are more

2169
01:27:59,840 --> 01:28:01,440
important than moving to internet

2170
01:28:01,440 --> 01:28:03,280
standards so i think we should do this

2171
01:28:03,280 --> 01:28:05,120
for having these changes if we go for

2172
01:28:05,120 --> 01:28:06,639
internet standard afterwards or not it's

2173
01:28:06,639 --> 01:28:08,400
a different question for me we might

2174
01:28:08,400 --> 01:28:09,760
still be able to do it because it's

2175
01:28:09,760 --> 01:28:11,920
based on what's actually implemented out

2176
01:28:11,920 --> 01:28:13,120
there um

2177
01:28:13,120 --> 01:28:15,120
but that's the last important point for

2178
01:28:15,120 --> 01:28:17,760
me and i also want to mention another

2179
01:28:17,760 --> 01:28:19,360
thing i think gauri started some

2180
01:28:19,360 --> 01:28:21,600
document to try to define

2181
01:28:21,600 --> 01:28:23,440
something like tcp fairness or whatever

2182
01:28:23,440 --> 01:28:25,600
maybe that belongs into the same bucket

2183
01:28:25,600 --> 01:28:28,760
not sure

2184
01:28:29,440 --> 01:28:31,839
watching

2185
01:28:34,320 --> 01:28:36,239
so as an individual i i support this

2186
01:28:36,239 --> 01:28:38,560
work um

2187
01:28:38,560 --> 01:28:41,440
i i am someone inclined to just roll in

2188
01:28:41,440 --> 01:28:45,440
the abc abyss into 3465 as well but i

2189
01:28:45,440 --> 01:28:46,800
know that's the next talk so i'll just

2190
01:28:46,800 --> 01:28:48,800
leave it at that um

2191
01:28:48,800 --> 01:28:51,040
but the um

2192
01:28:51,040 --> 01:28:52,480
regarding like the standards level i

2193
01:28:52,480 --> 01:28:54,560
don't have a really strong opinion about

2194
01:28:54,560 --> 01:28:57,120
it but i i do think

2195
01:28:57,120 --> 01:28:58,880
we need to think hard about like maybe

2196
01:28:58,880 --> 01:29:00,239
reframing

2197
01:29:00,239 --> 01:29:01,520
the language to be a little more

2198
01:29:01,520 --> 01:29:03,199
permissive in terms of experiments and

2199
01:29:03,199 --> 01:29:04,639
so on um

2200
01:29:04,639 --> 01:29:06,400
if the internet standard like it's gonna

2201
01:29:06,400 --> 01:29:07,920
be very very hard

2202
01:29:07,920 --> 01:29:11,679
for documents to modify it and so um

2203
01:29:11,679 --> 01:29:13,600
like i would love to reposition it to

2204
01:29:13,600 --> 01:29:15,679
say you know to talk about congestion

2205
01:29:15,679 --> 01:29:17,120
control experiments

2206
01:29:17,120 --> 01:29:19,600
to explicitly acknowledge the existence

2207
01:29:19,600 --> 01:29:21,280
of of things that we know about like

2208
01:29:21,280 --> 01:29:24,400
cubic um which i think you're doing here

2209
01:29:24,400 --> 01:29:25,520
um

2210
01:29:25,520 --> 01:29:27,679
and and you know just

2211
01:29:27,679 --> 01:29:29,280
i i just i just don't want to have like

2212
01:29:29,280 --> 01:29:30,880
further tinkering

2213
01:29:30,880 --> 01:29:32,719
blocked by you can't modify you have a

2214
01:29:32,719 --> 01:29:34,480
proposed standard and you can't modify

2215
01:29:34,480 --> 01:29:36,840
this internet standard

2216
01:29:36,840 --> 01:29:39,120
um and just have that be a line of

2217
01:29:39,120 --> 01:29:42,159
objection to further experimentation

2218
01:29:42,159 --> 01:29:44,400
thanks

2219
01:29:46,639 --> 01:29:48,560
mia

2220
01:29:48,560 --> 01:29:49,679
please

2221
01:29:49,679 --> 01:29:50,560
be

2222
01:29:50,560 --> 01:29:53,560
brief

2223
01:29:59,600 --> 01:30:02,880
uh largely support this work i think

2224
01:30:02,880 --> 01:30:05,280
this makes sense to me

2225
01:30:05,280 --> 01:30:07,760
same sentiment as others are not yet

2226
01:30:07,760 --> 01:30:09,600
sure whether we internet standard

2227
01:30:09,600 --> 01:30:11,679
congestion control is still evolving uh

2228
01:30:11,679 --> 01:30:14,000
we're still finding uh

2229
01:30:14,000 --> 01:30:16,159
new ways of doing things so you know

2230
01:30:16,159 --> 01:30:17,840
not baking in

2231
01:30:17,840 --> 01:30:21,280
would be a better thing to do but this

2232
01:30:21,280 --> 01:30:23,040
makes sense to me i had one question so

2233
01:30:23,040 --> 01:30:24,960
apart from this particular ss thresh

2234
01:30:24,960 --> 01:30:25,920
issue

2235
01:30:25,920 --> 01:30:27,840
what are the other changes that we're

2236
01:30:27,840 --> 01:30:29,920
thinking about are there like other

2237
01:30:29,920 --> 01:30:30,719
uh

2238
01:30:30,719 --> 01:30:33,600
issues or updates that we want to do

2239
01:30:33,600 --> 01:30:35,520
here

2240
01:30:35,520 --> 01:30:37,600
i i don't know frankly so i haven't had

2241
01:30:37,600 --> 01:30:39,280
a chance to sort of get together with

2242
01:30:39,280 --> 01:30:41,600
the the people i i sort of i got to the

2243
01:30:41,600 --> 01:30:42,880
point where i asked them whether they're

2244
01:30:42,880 --> 01:30:44,159
interested but i haven't actually sent

2245
01:30:44,159 --> 01:30:46,320
an email so what do we want to do um i

2246
01:30:46,320 --> 01:30:48,639
think i i basically um

2247
01:30:48,639 --> 01:30:50,960
when i contacted them the the goal i

2248
01:30:50,960 --> 01:30:52,239
pitched was to move this to another

2249
01:30:52,239 --> 01:30:53,840
standard and so by definition we thought

2250
01:30:53,840 --> 01:30:55,120
this was going to be a pretty minor

2251
01:30:55,120 --> 01:30:57,840
update if um we think we want to make

2252
01:30:57,840 --> 01:31:00,560
more changes then um you know we sort of

2253
01:31:00,560 --> 01:31:01,760
need to

2254
01:31:01,760 --> 01:31:03,679
reconfirm and restate this but i don't

2255
01:31:03,679 --> 01:31:05,040
know so i'm

2256
01:31:05,040 --> 01:31:06,639
i'm guessing we want to sort of maybe

2257
01:31:06,639 --> 01:31:08,800
start a list of some sort i'm hoping it

2258
01:31:08,800 --> 01:31:10,960
will be still a short list but this is

2259
01:31:10,960 --> 01:31:12,320
the one thing that i have fresh in my

2260
01:31:12,320 --> 01:31:15,880
mind because of cubic

2261
01:31:18,880 --> 01:31:21,880
gary

2262
01:31:36,880 --> 01:31:40,159
you are still muted

2263
01:31:41,840 --> 01:31:44,480
can't hear you boy

2264
01:31:44,480 --> 01:31:46,080
can you hear me now

2265
01:31:46,080 --> 01:31:47,120
yes

2266
01:31:47,120 --> 01:31:48,480
excellent

2267
01:31:48,480 --> 01:31:52,159
so it's true i started something in

2268
01:31:52,159 --> 01:31:56,880
tsvwg to try and catalog all the things

2269
01:31:56,880 --> 01:31:59,920
said in rfcs about what was thought good

2270
01:31:59,920 --> 01:32:03,280
practice for congestion control

2271
01:32:03,280 --> 01:32:06,560
it's a long list and not all of them we

2272
01:32:06,560 --> 01:32:09,120
probably now believe in

2273
01:32:09,120 --> 01:32:13,920
so where does this really lead us to

2274
01:32:13,920 --> 01:32:17,600
i think we can document what new reno is

2275
01:32:17,600 --> 01:32:20,480
i'm a bit frightened that we don't

2276
01:32:20,480 --> 01:32:22,719
really know the answers to changing it

2277
01:32:22,719 --> 01:32:24,880
significantly in other words rewriting

2278
01:32:24,880 --> 01:32:26,960
the spec

2279
01:32:26,960 --> 01:32:29,120
and i particularly wonder about what

2280
01:32:29,120 --> 01:32:30,880
happened in quick because i thought

2281
01:32:30,880 --> 01:32:33,040
quick was reno based

2282
01:32:33,040 --> 01:32:34,960
and that was what the charter said no

2283
01:32:34,960 --> 01:32:37,840
congestion control work and yet we put

2284
01:32:37,840 --> 01:32:41,280
cubic's reaction into 9002 which clearly

2285
01:32:41,280 --> 01:32:44,800
isn't what the rfc series said

2286
01:32:44,800 --> 01:32:46,719
if we make things like this happen how

2287
01:32:46,719 --> 01:32:49,520
are we going to write a new 5681 that

2288
01:32:49,520 --> 01:32:51,440
covers everything i think this is hard

2289
01:32:51,440 --> 01:32:53,440
and we should think carefully about what

2290
01:32:53,440 --> 01:32:56,239
we want to achieve

2291
01:32:59,040 --> 01:33:02,040
bob

2292
01:33:21,360 --> 01:33:23,199
you're very okay

2293
01:33:23,199 --> 01:33:24,480
um

2294
01:33:24,480 --> 01:33:25,280
the

2295
01:33:25,280 --> 01:33:26,080
the

2296
01:33:26,080 --> 01:33:28,239
the changes on this slide is fine moving

2297
01:33:28,239 --> 01:33:30,000
to internet standard i think would be

2298
01:33:30,000 --> 01:33:32,639
wrong you know

2299
01:33:32,639 --> 01:33:34,159
yep

2300
01:33:34,159 --> 01:33:36,960
and then um and the the reason

2301
01:33:36,960 --> 01:33:39,520
is that i think there's reducing use of

2302
01:33:39,520 --> 01:33:42,520
reality

2303
01:33:56,400 --> 01:34:01,080
sorry but that wasn't really cool

2304
01:34:03,910 --> 01:34:06,949
[Applause]

2305
01:34:08,080 --> 01:34:09,840
since we are running out of time i would

2306
01:34:09,840 --> 01:34:10,800
say

2307
01:34:10,800 --> 01:34:14,159
michael what do you want to say

2308
01:34:14,159 --> 01:34:15,760
yeah just have a quick comment from the

2309
01:34:15,760 --> 01:34:17,679
chair that's there's also

2310
01:34:17,679 --> 01:34:19,840
something that might have editorial

2311
01:34:19,840 --> 01:34:23,360
changes um 793 bliss has a congestion

2312
01:34:23,360 --> 01:34:26,480
con control consideration section and

2313
01:34:26,480 --> 01:34:30,320
that changes the framing for

2314
01:34:31,040 --> 01:34:31,760
this 5681

2315
01:34:31,760 --> 01:34:33,520
a bit

2316
01:34:33,520 --> 01:34:35,520
so because the basic construction

2317
01:34:35,520 --> 01:34:38,560
control requirements in 793 bis

2318
01:34:38,560 --> 01:34:40,719
and as of today this

2319
01:34:40,719 --> 01:34:44,960
was basically 56.81 so um as i said they

2320
01:34:44,960 --> 01:34:47,600
changes in 793 bits actually

2321
01:34:47,600 --> 01:34:49,440
could result in editorial changes in

2322
01:34:49,440 --> 01:34:52,159
this one as well

2323
01:34:56,159 --> 01:34:58,800
okay so i would say

2324
01:34:58,800 --> 01:35:01,360
we get this um

2325
01:35:01,360 --> 01:35:04,719
discussion to the list

2326
01:35:05,280 --> 01:35:07,199
since we have to move on

2327
01:35:07,199 --> 01:35:08,000
um

2328
01:35:08,000 --> 01:35:11,600
so the next one is about abc

2329
01:35:11,600 --> 01:35:12,800
um

2330
01:35:12,800 --> 01:35:16,159
vidi should i run the slides again

2331
01:35:16,159 --> 01:35:19,679
i can try uh oh you can try okay

2332
01:35:19,679 --> 01:35:22,159
ask to share slides or

2333
01:35:22,159 --> 01:35:25,199
well you can do it if you want okay

2334
01:35:25,199 --> 01:35:28,560
here we go okay and um

2335
01:35:28,560 --> 01:35:30,960
you have 15 minutes but if you can do it

2336
01:35:30,960 --> 01:35:35,679
in less time i can i'll do this better

2337
01:35:35,760 --> 01:35:37,360
can you see this one

2338
01:35:37,360 --> 01:35:39,360
yes

2339
01:35:39,360 --> 01:35:40,840
oh nice

2340
01:35:40,840 --> 01:35:44,480
um so this uh

2341
01:35:44,480 --> 01:35:45,679
this is a

2342
01:35:45,679 --> 01:35:48,080
discussion on the mailing list about

2343
01:35:48,080 --> 01:35:49,920
you know how abc

2344
01:35:49,920 --> 01:35:52,480
is currently right now and

2345
01:35:52,480 --> 01:35:55,119
youtube neil and i you know we talked

2346
01:35:55,119 --> 01:35:58,639
about it and probably we want to

2347
01:35:58,639 --> 01:36:01,600
um bring our proposal to the to this

2348
01:36:01,600 --> 01:36:04,880
meeting and to the mailing list um so

2349
01:36:04,880 --> 01:36:06,719
let's see so

2350
01:36:06,719 --> 01:36:10,159
the recap of rc 3465

2351
01:36:10,159 --> 01:36:12,560
appropriate by counting

2352
01:36:12,560 --> 01:36:13,760
there is a

2353
01:36:13,760 --> 01:36:15,920
you know in

2354
01:36:15,920 --> 01:36:18,400
earlier in i don't know i wasn't really

2355
01:36:18,400 --> 01:36:20,639
working on congestion control in 1999

2356
01:36:20,639 --> 01:36:22,639
but there was a paper

2357
01:36:22,639 --> 01:36:26,000
um in 1999 and it was about how you know

2358
01:36:26,000 --> 01:36:28,639
the receivers could manipulate senders

2359
01:36:28,639 --> 01:36:29,600
and

2360
01:36:29,600 --> 01:36:31,280
can manipulate the senders to increase

2361
01:36:31,280 --> 01:36:32,880
the condition window

2362
01:36:32,880 --> 01:36:34,320
uh

2363
01:36:34,320 --> 01:36:36,960
by sending acknowledgements for

2364
01:36:36,960 --> 01:36:38,239
one bite

2365
01:36:38,239 --> 01:36:40,560
instead of for the whole packet and this

2366
01:36:40,560 --> 01:36:41,679
means that you would increase the

2367
01:36:41,679 --> 01:36:43,600
condition window by a thousand packets

2368
01:36:43,600 --> 01:36:44,480
but

2369
01:36:44,480 --> 01:36:46,639
the receiver could basically is it could

2370
01:36:46,639 --> 01:36:49,679
basically be just acting thousand bytes

2371
01:36:49,679 --> 01:36:54,560
and so the rfc 3465 fixes this by

2372
01:36:54,560 --> 01:36:56,880
making the increase based on the bytes

2373
01:36:56,880 --> 01:37:00,480
acknowledged not per ack

2374
01:37:00,480 --> 01:37:02,080
and

2375
01:37:02,080 --> 01:37:02,800
the

2376
01:37:02,800 --> 01:37:05,920
issue that is discussed in rc 3465 is

2377
01:37:05,920 --> 01:37:08,400
about a stretch stack which could

2378
01:37:08,400 --> 01:37:10,480
uh sharply increase congestion window

2379
01:37:10,480 --> 01:37:12,960
and cause very bursty behavior and for

2380
01:37:12,960 --> 01:37:14,239
that it

2381
01:37:14,239 --> 01:37:15,520
has a

2382
01:37:15,520 --> 01:37:18,320
limit a cap called l to limit the

2383
01:37:18,320 --> 01:37:20,480
bursting behavior so this is the recap

2384
01:37:20,480 --> 01:37:23,360
of 34.65

2385
01:37:23,360 --> 01:37:25,920
uh on the next uh slide we are talking

2386
01:37:25,920 --> 01:37:29,280
about the problem statement so the

2387
01:37:29,280 --> 01:37:30,080
the

2388
01:37:30,080 --> 01:37:32,159
with with you know um so much

2389
01:37:32,159 --> 01:37:35,040
involvement and advancements uh the cap

2390
01:37:35,040 --> 01:37:36,480
of two

2391
01:37:36,480 --> 01:37:39,600
uh packets is not cutting it so we

2392
01:37:39,600 --> 01:37:41,360
think that

2393
01:37:41,360 --> 01:37:42,800
um

2394
01:37:42,800 --> 01:37:44,800
the these days the stretch acts

2395
01:37:44,800 --> 01:37:47,360
acknowledge a lot more

2396
01:37:47,360 --> 01:37:49,760
significantly more packets than two

2397
01:37:49,760 --> 01:37:51,280
packets

2398
01:37:51,280 --> 01:37:53,600
and this means that the condition window

2399
01:37:53,600 --> 01:37:55,679
increase is going to be limited by two

2400
01:37:55,679 --> 01:37:58,320
packets and it's going to be very slow

2401
01:37:58,320 --> 01:38:01,280
the increase is going to be very small

2402
01:38:01,280 --> 01:38:04,560
uh and other stacks don't implement this

2403
01:38:04,560 --> 01:38:08,480
limit um because of you know the

2404
01:38:08,480 --> 01:38:11,040
uh low throughput and the low receiving

2405
01:38:11,040 --> 01:38:13,040
increase issue

2406
01:38:13,040 --> 01:38:15,600
and uh linux has been implementing abc

2407
01:38:15,600 --> 01:38:18,239
without l since 2013

2408
01:38:18,239 --> 01:38:21,920
and it it basically the the

2409
01:38:21,920 --> 01:38:23,679
the way to control bursting it

2410
01:38:23,679 --> 01:38:27,040
encourages to use spacing uh to reduce

2411
01:38:27,040 --> 01:38:30,159
the bursts

2412
01:38:30,159 --> 01:38:32,480
um

2413
01:38:33,199 --> 01:38:35,679
the solution uh we're tr we're trying to

2414
01:38:35,679 --> 01:38:39,600
propose a solution where you know

2415
01:38:39,600 --> 01:38:43,520
we remove this limit l and we say that

2416
01:38:43,520 --> 01:38:45,280
the increase in the conduction window is

2417
01:38:45,280 --> 01:38:47,679
a separate problem from from bursting so

2418
01:38:47,679 --> 01:38:50,159
we use the ack information the total

2419
01:38:50,159 --> 01:38:52,320
amount of bytes acknowledged to increase

2420
01:38:52,320 --> 01:38:54,320
the condition window and basically

2421
01:38:54,320 --> 01:38:56,000
that's based on what we are learning

2422
01:38:56,000 --> 01:38:57,360
about the network and what we are

2423
01:38:57,360 --> 01:38:58,800
probing

2424
01:38:58,800 --> 01:39:01,600
and we will separate out the bursting

2425
01:39:01,600 --> 01:39:05,760
issue by using some sort of pacing

2426
01:39:05,760 --> 01:39:07,920
um

2427
01:39:07,920 --> 01:39:13,679
the rc the pr rfc 6937 um it defines a

2428
01:39:13,679 --> 01:39:16,320
new state called delivered data

2429
01:39:16,320 --> 01:39:18,000
which is basically you know the amount

2430
01:39:18,000 --> 01:39:20,880
of data that has left the network so

2431
01:39:20,880 --> 01:39:24,000
we're proposing to use that uh to

2432
01:39:24,000 --> 01:39:26,719
increase the condition window and

2433
01:39:26,719 --> 01:39:30,000
in the next slide i can describe what

2434
01:39:30,000 --> 01:39:32,239
delivered data uh what's the definition

2435
01:39:32,239 --> 01:39:34,080
of delivered data

2436
01:39:34,080 --> 01:39:37,600
so it's it's it's um in

2437
01:39:37,600 --> 01:39:40,400
uh you know in in in just plain english

2438
01:39:40,400 --> 01:39:42,480
it is the amount of data that has left

2439
01:39:42,480 --> 01:39:44,239
the network

2440
01:39:44,239 --> 01:39:47,199
and uh let's say if zach is supported in

2441
01:39:47,199 --> 01:39:50,000
in that case um

2442
01:39:50,000 --> 01:39:53,600
when we don't have any sac uh blocks

2443
01:39:53,600 --> 01:39:55,840
then delver data is basically changing

2444
01:39:55,840 --> 01:40:00,880
the uh the old una and the new una

2445
01:40:00,880 --> 01:40:02,880
and when sac is supported i'm sorry when

2446
01:40:02,880 --> 01:40:06,239
the sorry when when there are sac ranges

2447
01:40:06,239 --> 01:40:08,080
which means there are some reordering or

2448
01:40:08,080 --> 01:40:09,760
there's some packets are getting

2449
01:40:09,760 --> 01:40:12,080
acknowledged before the send una is

2450
01:40:12,080 --> 01:40:13,280
increasing

2451
01:40:13,280 --> 01:40:14,400
then

2452
01:40:14,400 --> 01:40:16,400
the delivered data is changing at the

2453
01:40:16,400 --> 01:40:19,600
una and whatever is the delta in the sac

2454
01:40:19,600 --> 01:40:22,600
blocks

2455
01:40:22,880 --> 01:40:25,600
um when sac is not supported

2456
01:40:25,600 --> 01:40:28,719
um then um first case is when there are

2457
01:40:28,719 --> 01:40:31,600
no duplicate x it's just same as the

2458
01:40:31,600 --> 01:40:33,920
previous case where it will be change in

2459
01:40:33,920 --> 01:40:37,760
the same q a and uh when there is some

2460
01:40:37,760 --> 01:40:39,840
recovery going on and we have duplicate

2461
01:40:39,840 --> 01:40:43,600
acts um then delivered data will be

2462
01:40:43,600 --> 01:40:47,520
uh equal to one packet on every single

2463
01:40:47,520 --> 01:40:49,360
dupac because one packet is leaving the

2464
01:40:49,360 --> 01:40:52,880
network and on subsequent partial or

2465
01:40:52,880 --> 01:40:54,320
full ack

2466
01:40:54,320 --> 01:40:56,400
it will be updated to whatever is the

2467
01:40:56,400 --> 01:40:58,480
change in the send una and we will

2468
01:40:58,480 --> 01:40:59,679
subtract

2469
01:40:59,679 --> 01:41:01,760
uh one sms

2470
01:41:01,760 --> 01:41:02,560
for

2471
01:41:02,560 --> 01:41:05,199
one uh packet for each preceding dupac

2472
01:41:05,199 --> 01:41:06,880
so you know so that we don't double

2473
01:41:06,880 --> 01:41:09,920
count the packets that are cumulatively

2474
01:41:09,920 --> 01:41:12,719
acknowledged in the full act

2475
01:41:12,719 --> 01:41:14,480
so this this is a simple definition of

2476
01:41:14,480 --> 01:41:17,280
delivered data and it reflects exactly

2477
01:41:17,280 --> 01:41:20,320
what is leaving the network um at any

2478
01:41:20,320 --> 01:41:22,639
with with any act we know how much data

2479
01:41:22,639 --> 01:41:25,679
has left on our work

2480
01:41:26,320 --> 01:41:29,440
and this is the last slide

2481
01:41:29,440 --> 01:41:32,800
this is about this is a simple change um

2482
01:41:32,800 --> 01:41:33,920
probably

2483
01:41:33,920 --> 01:41:37,520
and can we fold these changes into 56 81

2484
01:41:37,520 --> 01:41:41,360
bits instead of doing a 3465 base and

2485
01:41:41,360 --> 01:41:44,080
that way we can obsolete probably the

2486
01:41:44,080 --> 01:41:47,199
3465 roc

2487
01:41:47,199 --> 01:41:48,080
um

2488
01:41:48,080 --> 01:41:52,800
that's all i have um open four questions

2489
01:41:57,360 --> 01:41:59,840
uh so as i said a minute ago yeah i

2490
01:41:59,840 --> 01:42:00,960
think the answer to the last question is

2491
01:42:00,960 --> 01:42:05,119
yes um 5681 already has abc but with l

2492
01:42:05,119 --> 01:42:07,280
equals one uh if i

2493
01:42:07,280 --> 01:42:08,880
characterize it that way

2494
01:42:08,880 --> 01:42:09,760
um

2495
01:42:09,760 --> 01:42:11,280
so i think just like having fewer

2496
01:42:11,280 --> 01:42:13,440
documents would be good uh the other the

2497
01:42:13,440 --> 01:42:15,520
other caution i would have is to email

2498
01:42:15,520 --> 01:42:17,280
mark allman um

2499
01:42:17,280 --> 01:42:19,600
as many of you know i've had like an

2500
01:42:19,600 --> 01:42:21,040
extended discussion with him about this

2501
01:42:21,040 --> 01:42:22,320
and he is

2502
01:42:22,320 --> 01:42:25,040
um some real concerns about

2503
01:42:25,040 --> 01:42:27,440
just ramping up l

2504
01:42:27,440 --> 01:42:28,400
in the way that you're talking about

2505
01:42:28,400 --> 01:42:29,920
here granted it is happening in the

2506
01:42:29,920 --> 01:42:32,639
internet and this is but this is

2507
01:42:32,639 --> 01:42:34,000
this is an argument we should probably

2508
01:42:34,000 --> 01:42:35,520
actually have rather than just kind of

2509
01:42:35,520 --> 01:42:37,040
rubber stamp

2510
01:42:37,040 --> 01:42:40,040
thanks

2511
01:42:42,239 --> 01:42:44,638
ready

2512
01:42:45,440 --> 01:42:48,000
uh i just wanted to point it out that um

2513
01:42:48,000 --> 01:42:49,840
the windows tcp stack

2514
01:42:49,840 --> 01:42:53,280
does use l and it caps it to eight

2515
01:42:53,280 --> 01:42:56,080
right now um so that change was done

2516
01:42:56,080 --> 01:42:58,000
particularly as stretch checking became

2517
01:42:58,000 --> 01:42:59,280
more common

2518
01:42:59,280 --> 01:43:01,840
uh and windows tcp stack doesn't do uh

2519
01:43:01,840 --> 01:43:04,239
facing either right now by default and i

2520
01:43:04,239 --> 01:43:05,840
believe linux doesn't do pacing either

2521
01:43:05,840 --> 01:43:07,679
by default so my concern with just

2522
01:43:07,679 --> 01:43:10,800
removing the l limit is that then we

2523
01:43:10,800 --> 01:43:12,639
should say that facing is mandatory

2524
01:43:12,639 --> 01:43:14,320
right so that's what the quick rfc ended

2525
01:43:14,320 --> 01:43:15,840
up doing right so quick connection

2526
01:43:15,840 --> 01:43:17,760
control rc says

2527
01:43:17,760 --> 01:43:20,320
i think pacing is a must if i recall

2528
01:43:20,320 --> 01:43:22,880
correctly and then uh it

2529
01:43:22,880 --> 01:43:25,280
doesn't have the l limit in the

2530
01:43:25,280 --> 01:43:27,280
specification right so yeah if you want

2531
01:43:27,280 --> 01:43:29,119
to remove l then you have to make facing

2532
01:43:29,119 --> 01:43:31,199
mandatory that may not work for all

2533
01:43:31,199 --> 01:43:34,400
implementations on iot devices etc where

2534
01:43:34,400 --> 01:43:36,239
you know facing might have overhead so i

2535
01:43:36,239 --> 01:43:37,040
think

2536
01:43:37,040 --> 01:43:39,040
this is a far more nuanced discussion

2537
01:43:39,040 --> 01:43:41,199
than just saying let's remove l in my

2538
01:43:41,199 --> 01:43:43,119
opinion

2539
01:43:43,119 --> 01:43:44,960
right you're absolutely right without

2540
01:43:44,960 --> 01:43:47,360
facing uh there needs to

2541
01:43:47,360 --> 01:43:50,000
i mean i'm not in a favor of l but i

2542
01:43:50,000 --> 01:43:52,400
think the quick draft um does uh

2543
01:43:52,400 --> 01:43:54,400
recommend i don't think it says must my

2544
01:43:54,400 --> 01:43:56,239
memory is probably

2545
01:43:56,239 --> 01:43:59,199
uh not accurate but uh it does uh

2546
01:43:59,199 --> 01:44:01,760
provide an alternative which is kind of

2547
01:44:01,760 --> 01:44:03,840
pacing in the transport stack by

2548
01:44:03,840 --> 01:44:06,560
distributing how much you're sending uh

2549
01:44:06,560 --> 01:44:10,080
in one send during the whole rtt uh

2550
01:44:10,080 --> 01:44:12,080
maybe someone can correct me

2551
01:44:12,080 --> 01:44:15,520
but you're right um without pacing um

2552
01:44:15,520 --> 01:44:17,440
there can be a l but we couldn't reach a

2553
01:44:17,440 --> 01:44:20,080
consensus on what this l would be like

2554
01:44:20,080 --> 01:44:22,320
you said windows is using eight

2555
01:44:22,320 --> 01:44:25,360
um i think we are using ten and uh the

2556
01:44:25,360 --> 01:44:27,119
draft says two

2557
01:44:27,119 --> 01:44:29,920
uh and mark is going to

2558
01:44:29,920 --> 01:44:32,159
based on my uh you know whatever he has

2559
01:44:32,159 --> 01:44:33,600
replied on the mailing list he's not

2560
01:44:33,600 --> 01:44:36,159
gonna like because then that's just you

2561
01:44:36,159 --> 01:44:39,040
know we're just guessing numbers

2562
01:44:39,040 --> 01:44:40,400
so

2563
01:44:40,400 --> 01:44:42,719
perhaps we can also take this to the

2564
01:44:42,719 --> 01:44:45,440
mailing list

2565
01:44:47,280 --> 01:44:49,840
yoshi

2566
01:44:50,719 --> 01:44:51,600
um

2567
01:44:51,600 --> 01:44:54,239
i have one clarification question

2568
01:44:54,239 --> 01:44:57,520
so in my understanding abc is used for

2569
01:44:57,520 --> 01:44:59,679
slow start phase and then congestion

2570
01:44:59,679 --> 01:45:02,719
avoidance space but abc is now used

2571
01:45:02,719 --> 01:45:05,440
recovery phase my understanding

2572
01:45:05,440 --> 01:45:06,560
so

2573
01:45:06,560 --> 01:45:11,760
in the slide you mentioned about deepak

2574
01:45:11,760 --> 01:45:13,119
i

2575
01:45:13,119 --> 01:45:15,600
it is for the other case not a recovery

2576
01:45:15,600 --> 01:45:17,360
case you know the same package does

2577
01:45:17,360 --> 01:45:18,239
happen

2578
01:45:18,239 --> 01:45:19,679
i just like

2579
01:45:19,679 --> 01:45:21,440
no

2580
01:45:21,440 --> 01:45:23,040
no you know

2581
01:45:23,040 --> 01:45:25,440
if you want to apply this during

2582
01:45:25,440 --> 01:45:28,239
recovery phase

2583
01:45:28,280 --> 01:45:29,679
[Music]

2584
01:45:29,679 --> 01:45:33,840
i think if you read the abc draft um

2585
01:45:33,840 --> 01:45:36,000
you know for example if there's a rto

2586
01:45:36,000 --> 01:45:38,320
then there's a slow start recovery

2587
01:45:38,320 --> 01:45:39,199
and

2588
01:45:39,199 --> 01:45:42,080
and in that case it says it recommends l

2589
01:45:42,080 --> 01:45:45,520
equals to two in certain scenarios and

2590
01:45:45,520 --> 01:45:47,600
other scenarios it recommends l equals

2591
01:45:47,600 --> 01:45:48,880
two one

2592
01:45:48,880 --> 01:45:52,080
but uh for the fast re-transmit scenario

2593
01:45:52,080 --> 01:45:55,199
you're right um because that would be

2594
01:45:55,199 --> 01:45:56,639
incongestion

2595
01:45:56,639 --> 01:45:58,320
i don't think we use abc in conjunction

2596
01:45:58,320 --> 01:45:59,679
avoidance at all because that's

2597
01:45:59,679 --> 01:46:02,560
straightforward increased by one mss

2598
01:46:02,560 --> 01:46:03,440
um

2599
01:46:03,440 --> 01:46:05,040
and and that would apply to the loss

2600
01:46:05,040 --> 01:46:06,960
recovery as well during the fast

2601
01:46:06,960 --> 01:46:09,600
retransmit but not during the rto

2602
01:46:09,600 --> 01:46:12,600
recovery

2603
01:46:17,840 --> 01:46:19,520
yeah i just wanted to confirm that uh

2604
01:46:19,520 --> 01:46:22,960
the quick rfc 9002 um says either you

2605
01:46:22,960 --> 01:46:24,239
must piece

2606
01:46:24,239 --> 01:46:27,040
or uh you must limit l to with n

2607
01:46:27,040 --> 01:46:28,159
basically

2608
01:46:28,159 --> 01:46:30,480
um and the choice of 10 to go back to

2609
01:46:30,480 --> 01:46:31,520
the question of whether it's a magic

2610
01:46:31,520 --> 01:46:33,199
number or not is it's not i mean it is

2611
01:46:33,199 --> 01:46:35,040
short of a magic number um but that

2612
01:46:35,040 --> 01:46:37,520
magic number comes from the iw10 draft

2613
01:46:37,520 --> 01:46:39,280
which kind of implicitly allows you to

2614
01:46:39,280 --> 01:46:41,920
burst 10 packets into the network uh at

2615
01:46:41,920 --> 01:46:42,719
once

2616
01:46:42,719 --> 01:46:45,760
uh as a direct result of that draft um

2617
01:46:45,760 --> 01:46:46,719
and so

2618
01:46:46,719 --> 01:46:47,920
you know if you're going to pick a magic

2619
01:46:47,920 --> 01:46:48,960
number

2620
01:46:48,960 --> 01:46:50,239
you might as well pick one based on an

2621
01:46:50,239 --> 01:46:53,360
existing rfc um it also matches and it

2622
01:46:53,360 --> 01:46:55,119
coincidentally the initial painting the

2623
01:46:55,119 --> 01:46:56,719
fq basin quantum

2624
01:46:56,719 --> 01:46:59,360
the initial fq base and quantum of linux

2625
01:46:59,360 --> 01:47:00,800
and so there's also experimental

2626
01:47:00,800 --> 01:47:02,639
evidence for it um that's not to say i

2627
01:47:02,639 --> 01:47:04,480
actually think 10 is the right number

2628
01:47:04,480 --> 01:47:08,159
um but it's it's it's something we have

2629
01:47:08,159 --> 01:47:09,679
so um

2630
01:47:09,679 --> 01:47:11,760
yeah just because thank you for

2631
01:47:11,760 --> 01:47:16,000
clarifying yeah i wasn't sure about it

2632
01:47:16,000 --> 01:47:18,480
praveen

2633
01:47:18,960 --> 01:47:21,920
um i think like uh in uh so we should

2634
01:47:21,920 --> 01:47:23,840
recommend pacing i guess and then uh

2635
01:47:23,840 --> 01:47:25,679
fallback should be an l value and i'm

2636
01:47:25,679 --> 01:47:27,199
perfectly fine with 10 although you're

2637
01:47:27,199 --> 01:47:28,719
using eight uh

2638
01:47:28,719 --> 01:47:30,960
and seems reasonable to me based on the

2639
01:47:30,960 --> 01:47:33,520
initial window

2640
01:47:33,520 --> 01:47:36,080
but all the stacks are using

2641
01:47:36,080 --> 01:47:38,400
right the issue raised by mark was it's

2642
01:47:38,400 --> 01:47:40,480
not really that you're bursting 10

2643
01:47:40,480 --> 01:47:43,840
packets you're reversing x plus 10 right

2644
01:47:43,840 --> 01:47:44,639
and

2645
01:47:44,639 --> 01:47:48,480
x is whatever window you have right now

2646
01:47:48,480 --> 01:47:49,600
um

2647
01:47:49,600 --> 01:47:51,840
so the point is really not

2648
01:47:51,840 --> 01:47:54,960
there is 10 or 2 or whatever it's

2649
01:47:54,960 --> 01:47:57,520
it's uh i think the point is

2650
01:47:57,520 --> 01:48:00,639
it goes beyond what abc recommends is um

2651
01:48:00,639 --> 01:48:02,239
can you burst the whole congestion

2652
01:48:02,239 --> 01:48:05,119
window in one cent

2653
01:48:05,119 --> 01:48:06,239
um

2654
01:48:06,239 --> 01:48:07,360
and

2655
01:48:07,360 --> 01:48:09,440
i think the pacing is answered the

2656
01:48:09,440 --> 01:48:12,320
answer to that is pacing

2657
01:48:12,320 --> 01:48:13,840
we cannot i think we shouldn't be

2658
01:48:13,840 --> 01:48:16,000
bursting a whole congestion window uh

2659
01:48:16,000 --> 01:48:19,600
wherever we are in the slow start phase

2660
01:48:19,600 --> 01:48:21,840
so

2661
01:48:25,600 --> 01:48:26,719
okay so i

2662
01:48:26,719 --> 01:48:29,280
closed the line

2663
01:48:29,280 --> 01:48:31,360
and let's say we

2664
01:48:31,360 --> 01:48:33,119
continue the discussion on the mating

2665
01:48:33,119 --> 01:48:35,679
list um

2666
01:48:35,679 --> 01:48:38,960
in principle i think less documents are

2667
01:48:38,960 --> 01:48:42,400
better than more so the rest of the time

2668
01:48:42,400 --> 01:48:45,199
uh is neil

2669
01:48:45,600 --> 01:48:49,360
can be spent by neil on um

2670
01:48:49,360 --> 01:48:52,239
silent clothes

2671
01:48:53,280 --> 01:48:56,960
all right so i'm gonna try to uh share

2672
01:48:56,960 --> 01:48:57,760
my

2673
01:48:57,760 --> 01:48:59,119
share

2674
01:48:59,119 --> 01:49:00,400
well you can you can share your

2675
01:49:00,400 --> 01:49:02,159
presentation the the sites have been

2676
01:49:02,159 --> 01:49:05,040
uploaded so if you click on

2677
01:49:05,040 --> 01:49:06,880
the upper left

2678
01:49:06,880 --> 01:49:09,040
document i clicked on it

2679
01:49:09,040 --> 01:49:10,400
and it

2680
01:49:10,400 --> 01:49:14,400
thinks i've got it there it goes

2681
01:49:14,400 --> 01:49:15,920
yeah we have to approve it

2682
01:49:15,920 --> 01:49:18,480
you can request be approved you do

2683
01:49:18,480 --> 01:49:20,960
uh here we go

2684
01:49:20,960 --> 01:49:24,159
all right can everybody see that

2685
01:49:24,159 --> 01:49:25,199
yep

2686
01:49:25,199 --> 01:49:26,480
okay great

2687
01:49:26,480 --> 01:49:31,599
so um we wanted to talk today about a um

2688
01:49:31,599 --> 01:49:34,080
a an issue that we have seen in

2689
01:49:34,080 --> 01:49:36,159
production and a particular solution

2690
01:49:36,159 --> 01:49:37,760
that we've been using and wanted to

2691
01:49:37,760 --> 01:49:39,840
discuss it with the community

2692
01:49:39,840 --> 01:49:40,800
um

2693
01:49:40,800 --> 01:49:44,080
and this is about an uh

2694
01:49:44,080 --> 01:49:46,400
this feature is called or we call it tcp

2695
01:49:46,400 --> 01:49:48,080
silent close

2696
01:49:48,080 --> 01:49:49,520
um

2697
01:49:49,520 --> 01:49:52,080
so the motivating scenario here is uh if

2698
01:49:52,080 --> 01:49:54,000
you imagine a large-scale internet

2699
01:49:54,000 --> 01:49:55,040
service

2700
01:49:55,040 --> 01:49:58,000
where it has tcp connections to millions

2701
01:49:58,000 --> 01:50:00,080
perhaps hundreds of millions of cell

2702
01:50:00,080 --> 01:50:01,280
phones

2703
01:50:01,280 --> 01:50:04,960
and then um the server machines kernel

2704
01:50:04,960 --> 01:50:06,320
pcp stack

2705
01:50:06,320 --> 01:50:08,320
closes all of those

2706
01:50:08,320 --> 01:50:11,599
tcp connections quickly due to

2707
01:50:11,599 --> 01:50:14,320
one of two kinds of situations either

2708
01:50:14,320 --> 01:50:16,639
one the server application

2709
01:50:16,639 --> 01:50:19,599
exits or restarts cleanly for

2710
01:50:19,599 --> 01:50:21,840
updating the executable or updating the

2711
01:50:21,840 --> 01:50:23,199
configuration

2712
01:50:23,199 --> 01:50:26,400
or there is a server application crash

2713
01:50:26,400 --> 01:50:27,760
so the process

2714
01:50:27,760 --> 01:50:31,280
uh set faults and dies and the kernel

2715
01:50:31,280 --> 01:50:33,360
closes all of those millions of tcp

2716
01:50:33,360 --> 01:50:34,639
connections

2717
01:50:34,639 --> 01:50:37,280
so in either of these cases the clean

2718
01:50:37,280 --> 01:50:39,760
exit or a crash what you have here is

2719
01:50:39,760 --> 01:50:41,280
you have tcp

2720
01:50:41,280 --> 01:50:43,840
in the kernel bursting millions of fins

2721
01:50:43,840 --> 01:50:46,800
to millions of cell phones uh often in

2722
01:50:46,800 --> 01:50:50,320
the local region or country

2723
01:50:50,320 --> 01:50:51,280
so

2724
01:50:51,280 --> 01:50:54,320
obviously that has a problematic impact

2725
01:50:54,320 --> 01:50:56,000
um

2726
01:50:56,000 --> 01:50:57,840
in particular there's heavy network and

2727
01:50:57,840 --> 01:51:00,639
energy resource usage basically to find

2728
01:51:00,639 --> 01:51:02,880
in contact and wake up those millions of

2729
01:51:02,880 --> 01:51:05,280
dormant cell phone radios

2730
01:51:05,280 --> 01:51:07,360
and then there's also a significant

2731
01:51:07,360 --> 01:51:09,360
impact because the cell phone network

2732
01:51:09,360 --> 01:51:11,520
then has to cue those fins and

2733
01:51:11,520 --> 01:51:14,080
repeatedly retry them for the phones

2734
01:51:14,080 --> 01:51:16,239
where the radio is powered off or the

2735
01:51:16,239 --> 01:51:18,639
phone itself is powered off so it might

2736
01:51:18,639 --> 01:51:20,800
be retrying those fins all night in some

2737
01:51:20,800 --> 01:51:22,639
cases depending on the

2738
01:51:22,639 --> 01:51:23,840
the cell phone

2739
01:51:23,840 --> 01:51:25,760
system implementation

2740
01:51:25,760 --> 01:51:29,199
and uh that has the potential to cause

2741
01:51:29,199 --> 01:51:31,040
um cellular networks to become

2742
01:51:31,040 --> 01:51:34,320
overloaded um and in some cases fail uh

2743
01:51:34,320 --> 01:51:35,920
and so the concern here is that this

2744
01:51:35,920 --> 01:51:38,320
kind of scenario is a potential

2745
01:51:38,320 --> 01:51:40,960
scalability or reliability vulnerability

2746
01:51:40,960 --> 01:51:43,520
for some cell phone uh networks out

2747
01:51:43,520 --> 01:51:45,599
there

2748
01:51:45,599 --> 01:51:49,679
so um is this specific to tcp well

2749
01:51:49,679 --> 01:51:51,920
in tcp this problem

2750
01:51:51,920 --> 01:51:52,880
happens

2751
01:51:52,880 --> 01:51:54,560
in particular because the

2752
01:51:54,560 --> 01:51:56,560
responsibilities are typically split

2753
01:51:56,560 --> 01:51:58,639
between the application and the kernel

2754
01:51:58,639 --> 01:51:59,760
and here we have a case where the

2755
01:51:59,760 --> 01:52:02,000
application crashes or exits and then

2756
01:52:02,000 --> 01:52:04,320
the kernel still has the state for that

2757
01:52:04,320 --> 01:52:06,880
socket and it tries to finish the finac

2758
01:52:06,880 --> 01:52:09,440
finac handshake at the end

2759
01:52:09,440 --> 01:52:11,440
but can do this in a very bursty manner

2760
01:52:11,440 --> 01:52:13,199
for millions of connections uh

2761
01:52:13,199 --> 01:52:15,599
interestingly you know in in a protocol

2762
01:52:15,599 --> 01:52:18,000
like quick that's typically implemented

2763
01:52:18,000 --> 01:52:19,920
in user space you probably don't have

2764
01:52:19,920 --> 01:52:22,000
this problem uh because the kernel has

2765
01:52:22,000 --> 01:52:24,400
no transport state so if the application

2766
01:52:24,400 --> 01:52:26,880
exits cleanly or crashes the kernel has

2767
01:52:26,880 --> 01:52:29,360
no state so we can't actually

2768
01:52:29,360 --> 01:52:31,920
do this you know burst of a million fins

2769
01:52:31,920 --> 01:52:33,760
or the equivalent and so there's no

2770
01:52:33,760 --> 01:52:35,360
extra network load and so you don't run

2771
01:52:35,360 --> 01:52:36,880
into this problem

2772
01:52:36,880 --> 01:52:38,880
but in general presumably this problem

2773
01:52:38,880 --> 01:52:40,960
could happen for any kernel

2774
01:52:40,960 --> 01:52:42,880
transport

2775
01:52:42,880 --> 01:52:46,159
so the goal of the tcp silent close

2776
01:52:46,159 --> 01:52:48,960
effort uh was to say that upon

2777
01:52:48,960 --> 01:52:51,199
application exit or crash instead of

2778
01:52:51,199 --> 01:52:52,719
sending those big bursts of millions of

2779
01:52:52,719 --> 01:52:55,119
fins we want to basically manifest the

2780
01:52:55,119 --> 01:52:57,119
traditional behavior that the internet

2781
01:52:57,119 --> 01:53:00,239
has seen for either a kernel crash or a

2782
01:53:00,239 --> 01:53:02,880
machine crashing or powering off so

2783
01:53:02,880 --> 01:53:05,920
basically in that situation we have uh

2784
01:53:05,920 --> 01:53:08,159
all of the connections from the server

2785
01:53:08,159 --> 01:53:09,119
that just

2786
01:53:09,119 --> 01:53:11,599
crashed or died they go silent

2787
01:53:11,599 --> 01:53:14,000
and then any later incoming traffic for

2788
01:53:14,000 --> 01:53:16,400
those connections uh that's sent by the

2789
01:53:16,400 --> 01:53:18,880
client and then arrives at the

2790
01:53:18,880 --> 01:53:21,199
restored or rebooted or powered online

2791
01:53:21,199 --> 01:53:23,760
server then triggers a reset because

2792
01:53:23,760 --> 01:53:25,440
obviously that server's kernel has no

2793
01:53:25,440 --> 01:53:27,599
state for that connection

2794
01:53:27,599 --> 01:53:28,639
so

2795
01:53:28,639 --> 01:53:30,000
we still want it to be the case though

2796
01:53:30,000 --> 01:53:31,440
that upon

2797
01:53:31,440 --> 01:53:34,239
the normal or healthy close of a tcp of

2798
01:53:34,239 --> 01:53:37,599
an individual server tcp connection

2799
01:53:37,599 --> 01:53:39,840
we want to go ahead and use the

2800
01:53:39,840 --> 01:53:41,040
traditional

2801
01:53:41,040 --> 01:53:44,320
fin act fanatic handshake at the end

2802
01:53:44,320 --> 01:53:46,480
and one key design feature of this

2803
01:53:46,480 --> 01:53:48,639
approach is that

2804
01:53:48,639 --> 01:53:50,639
there's no new network behaviors

2805
01:53:50,639 --> 01:53:52,880
introduced in this kind of

2806
01:53:52,880 --> 01:53:54,400
silent close approach

2807
01:53:54,400 --> 01:53:56,800
because basically applications and tcp

2808
01:53:56,800 --> 01:53:59,199
stacks already have to be prepared for

2809
01:53:59,199 --> 01:54:01,840
this kind of silence and then a reset if

2810
01:54:01,840 --> 01:54:04,080
they try to later contact a remote

2811
01:54:04,080 --> 01:54:06,639
endpoint you know obviously before

2812
01:54:06,639 --> 01:54:08,800
this could happen with a kernel crash a

2813
01:54:08,800 --> 01:54:10,560
machine that's powered off

2814
01:54:10,560 --> 01:54:13,360
a cellular or wi-fi link that is no

2815
01:54:13,360 --> 01:54:15,280
longer usable because the user is too

2816
01:54:15,280 --> 01:54:16,560
far away from

2817
01:54:16,560 --> 01:54:18,000
an access point

2818
01:54:18,000 --> 01:54:20,560
um but after if we have a silent close

2819
01:54:20,560 --> 01:54:22,960
feature in place then obviously the same

2820
01:54:22,960 --> 01:54:25,280
symptoms can be manifested with an

2821
01:54:25,280 --> 01:54:28,800
application crash or an application exit

2822
01:54:28,800 --> 01:54:31,040
so just to clarify what we're talking

2823
01:54:31,040 --> 01:54:33,360
about here um if we compare a sort of

2824
01:54:33,360 --> 01:54:35,840
server process exit or crash you know

2825
01:54:35,840 --> 01:54:38,159
before with the traditional tcp

2826
01:54:38,159 --> 01:54:40,400
implementation you know the behavior you

2827
01:54:40,400 --> 01:54:42,960
get would be millions of fans going out

2828
01:54:42,960 --> 01:54:45,199
to the network uh in a burst to all

2829
01:54:45,199 --> 01:54:47,119
these handsets

2830
01:54:47,119 --> 01:54:49,840
being retransmitted many times or

2831
01:54:49,840 --> 01:54:51,599
retried many times

2832
01:54:51,599 --> 01:54:53,119
um and

2833
01:54:53,119 --> 01:54:55,440
after if you have a sort of silent close

2834
01:54:55,440 --> 01:54:58,239
feature um and there's a server process

2835
01:54:58,239 --> 01:55:00,639
extra crash you don't get that storm of

2836
01:55:00,639 --> 01:55:02,960
fins

2837
01:55:03,040 --> 01:55:05,119
and so what is the precise mechanism

2838
01:55:05,119 --> 01:55:07,920
that we're proposing here so the idea is

2839
01:55:07,920 --> 01:55:11,520
a boolean uh tcp silent close per socket

2840
01:55:11,520 --> 01:55:15,119
option set via set suck ups get via get

2841
01:55:15,119 --> 01:55:16,880
succot

2842
01:55:16,880 --> 01:55:19,440
and when this feature is enabled and a

2843
01:55:19,440 --> 01:55:23,040
tcp connection is closed or shut down

2844
01:55:23,040 --> 01:55:24,400
for any reason

2845
01:55:24,400 --> 01:55:26,800
then the kernel sends no fan since no

2846
01:55:26,800 --> 01:55:29,040
reset and the kernel frees the socket

2847
01:55:29,040 --> 01:55:30,560
state immediately

2848
01:55:30,560 --> 01:55:32,639
and effectively as said before the goal

2849
01:55:32,639 --> 01:55:35,199
is that upon application extra crash the

2850
01:55:35,199 --> 01:55:36,960
connection manifests the traditional

2851
01:55:36,960 --> 01:55:38,719
behavior for

2852
01:55:38,719 --> 01:55:41,119
a kernel crash or machine power off the

2853
01:55:41,119 --> 01:55:42,880
connection goes silent any later

2854
01:55:42,880 --> 01:55:45,679
incoming traffic just gets a reset

2855
01:55:45,679 --> 01:55:47,520
and in particular we've used this option

2856
01:55:47,520 --> 01:55:49,280
for years

2857
01:55:49,280 --> 01:55:51,040
at our team

2858
01:55:51,040 --> 01:55:53,040
for a limited set of very large scale

2859
01:55:53,040 --> 01:55:54,480
services

2860
01:55:54,480 --> 01:55:56,320
and we plan to send this code upstream

2861
01:55:56,320 --> 01:55:57,760
to linux

2862
01:55:57,760 --> 01:56:00,400
when netx opens i believe next week

2863
01:56:00,400 --> 01:56:02,719
uh and so we wanted to discuss this in

2864
01:56:02,719 --> 01:56:06,159
this community um since we wanted to to

2865
01:56:06,159 --> 01:56:08,000
start getting this in the open source

2866
01:56:08,000 --> 01:56:08,960
world

2867
01:56:08,960 --> 01:56:10,080
um

2868
01:56:10,080 --> 01:56:12,639
so the usage model is pretty simple uh

2869
01:56:12,639 --> 01:56:14,880
you the idea is you enable silent close

2870
01:56:14,880 --> 01:56:17,199
on a on a listener or immediately after

2871
01:56:17,199 --> 01:56:20,880
a connection is established after except

2872
01:56:20,880 --> 01:56:21,920
and thus

2873
01:56:21,920 --> 01:56:24,320
if the process crashes or exits at any

2874
01:56:24,320 --> 01:56:26,000
time during the normal operation of that

2875
01:56:26,000 --> 01:56:27,920
connection you don't get this large

2876
01:56:27,920 --> 01:56:30,159
scale burst of fins

2877
01:56:30,159 --> 01:56:31,920
however when the process wants to go

2878
01:56:31,920 --> 01:56:34,719
ahead and close a single tcp connection

2879
01:56:34,719 --> 01:56:36,320
because the work is done or the client

2880
01:56:36,320 --> 01:56:38,159
went away the idea is you sort of

2881
01:56:38,159 --> 01:56:40,480
disable this silent close feature and

2882
01:56:40,480 --> 01:56:41,920
then you do your clothes or your shut

2883
01:56:41,920 --> 01:56:44,560
down so that you get a normal fin act

2884
01:56:44,560 --> 01:56:46,560
handshake uh when everything is going

2885
01:56:46,560 --> 01:56:49,760
that smoothly and cleanly

2886
01:56:49,760 --> 01:56:52,000
uh you know the api is very simple set

2887
01:56:52,000 --> 01:56:54,719
sock opt pcb sign on close to value one

2888
01:56:54,719 --> 01:56:59,040
to enable you know zero to disable etc

2889
01:56:59,040 --> 01:57:02,320
uh you know the api details um

2890
01:57:02,320 --> 01:57:04,159
we would suggest that this is at least

2891
01:57:04,159 --> 01:57:07,360
for now guarded by a system so that the

2892
01:57:07,360 --> 01:57:09,280
system administrator has to explicitly

2893
01:57:09,280 --> 01:57:12,239
enable this since it's a new feature

2894
01:57:12,239 --> 01:57:14,000
we propose that the

2895
01:57:14,000 --> 01:57:16,400
child server sockets inherit from the

2896
01:57:16,400 --> 01:57:18,239
parent so that you don't need a new

2897
01:57:18,239 --> 01:57:20,560
system call to enable this on every new

2898
01:57:20,560 --> 01:57:22,159
connection

2899
01:57:22,159 --> 01:57:24,719
to reduce overhead uh we would propose

2900
01:57:24,719 --> 01:57:27,199
that that it overrides the eso linger

2901
01:57:27,199 --> 01:57:28,320
setting

2902
01:57:28,320 --> 01:57:30,159
and returns immediately

2903
01:57:30,159 --> 01:57:32,480
we looked at some other alternative

2904
01:57:32,480 --> 01:57:35,599
semantics um or considered those so for

2905
01:57:35,599 --> 01:57:36,560
example

2906
01:57:36,560 --> 01:57:38,159
we could say that perhaps if the

2907
01:57:38,159 --> 01:57:39,280
application

2908
01:57:39,280 --> 01:57:41,280
does a close or shutdown system call

2909
01:57:41,280 --> 01:57:43,280
perhaps that always attempts the finac

2910
01:57:43,280 --> 01:57:45,599
finic handshake and perhaps you only

2911
01:57:45,599 --> 01:57:46,639
would

2912
01:57:46,639 --> 01:57:49,280
have a silent close feature upon process

2913
01:57:49,280 --> 01:57:50,239
exit

2914
01:57:50,239 --> 01:57:52,880
either cleanly or due to crash um but we

2915
01:57:52,880 --> 01:57:54,960
decided that that would might prevent

2916
01:57:54,960 --> 01:57:57,440
applications from programmatically

2917
01:57:57,440 --> 01:57:59,760
deciding to silent close millions of

2918
01:57:59,760 --> 01:58:02,320
connections if they realize they need to

2919
01:58:02,320 --> 01:58:04,080
to manage memory or handle denial of

2920
01:58:04,080 --> 01:58:07,280
service attacks etc

2921
01:58:07,280 --> 01:58:08,159
um

2922
01:58:08,159 --> 01:58:10,400
usage considerations we do encourage

2923
01:58:10,400 --> 01:58:12,639
people before deploying this to really

2924
01:58:12,639 --> 01:58:14,639
consider the negative possible negative

2925
01:58:14,639 --> 01:58:17,040
impacts obviously if

2926
01:58:17,040 --> 01:58:18,400
the server is closing the connection

2927
01:58:18,400 --> 01:58:20,480
without the fins that could leave extra

2928
01:58:20,480 --> 01:58:22,560
memory usage either in the client side

2929
01:58:22,560 --> 01:58:24,480
or in the middle box so we do want

2930
01:58:24,480 --> 01:58:26,480
people to consider that so we do want

2931
01:58:26,480 --> 01:58:28,000
this to be a feature that's used

2932
01:58:28,000 --> 01:58:31,119
carefully and only to prevent outage

2933
01:58:31,119 --> 01:58:32,159
prevention

2934
01:58:32,159 --> 01:58:34,719
only to prevent outages not just to save

2935
01:58:34,719 --> 01:58:37,840
a few packets uh here and there

2936
01:58:37,840 --> 01:58:39,040
um

2937
01:58:39,040 --> 01:58:40,480
and there has been some related work in

2938
01:58:40,480 --> 01:58:41,920
this area that i think helps motivate

2939
01:58:41,920 --> 01:58:44,719
this and show that the community does

2940
01:58:44,719 --> 01:58:46,719
feel like there has been a long-standing

2941
01:58:46,719 --> 01:58:48,400
need for this kind of thing

2942
01:58:48,400 --> 01:58:50,239
so there was a paper from connex a

2943
01:58:50,239 --> 01:58:51,440
couple years ago

2944
01:58:51,440 --> 01:58:54,400
called asylum tcp connection closure and

2945
01:58:54,400 --> 01:58:56,560
their their motivating use case was

2946
01:58:56,560 --> 01:58:58,639
cellular networks as well although their

2947
01:58:58,639 --> 01:59:00,639
angle was reducing energy consumption

2948
01:59:00,639 --> 01:59:02,480
and signal load

2949
01:59:02,480 --> 01:59:03,360
um

2950
01:59:03,360 --> 01:59:04,800
that we thought was kind of a

2951
01:59:04,800 --> 01:59:06,239
heavyweight implementation because it

2952
01:59:06,239 --> 01:59:09,040
required a new option on the wire it

2953
01:59:09,040 --> 01:59:11,199
required you so you have to upgrade

2954
01:59:11,199 --> 01:59:13,119
client in the server os and then you

2955
01:59:13,119 --> 01:59:14,560
have to upgrade the client in the server

2956
01:59:14,560 --> 01:59:18,000
application to agree on this

2957
01:59:18,000 --> 01:59:19,840
enabling this so we didn't think that

2958
01:59:19,840 --> 01:59:21,119
was a good model

2959
01:59:21,119 --> 01:59:22,880
there's also so linger which has been

2960
01:59:22,880 --> 01:59:24,880
around for a long time with a similar

2961
01:59:24,880 --> 01:59:27,040
motivation like practical motivation of

2962
01:59:27,040 --> 01:59:29,679
scalability avoiding time weight state

2963
01:59:29,679 --> 01:59:32,400
on servers for millions of connections

2964
01:59:32,400 --> 01:59:34,960
um we thought this was similar in spirit

2965
01:59:34,960 --> 01:59:36,639
but we didn't want to change this sort

2966
01:59:36,639 --> 01:59:39,280
of long-standing api or add a new magic

2967
01:59:39,280 --> 01:59:41,679
number to that existing api and risk

2968
01:59:41,679 --> 01:59:44,400
compatibility issues

2969
01:59:44,400 --> 01:59:47,440
there's also an interesting silent close

2970
01:59:47,440 --> 01:59:49,520
implication of the linux tcp repair mode

2971
01:59:49,520 --> 01:59:51,679
which is for connection migration

2972
01:59:51,679 --> 01:59:53,599
but the semantics don't really

2973
01:59:53,599 --> 01:59:55,360
line up with what you want because if

2974
01:59:55,360 --> 01:59:59,839
you use tcp repair mode you basically

2975
02:00:00,080 --> 02:00:02,719
are serializing your connection state

2976
02:00:02,719 --> 02:00:05,040
and

2977
02:00:05,040 --> 02:00:06,560
disabling the operation of that

2978
02:00:06,560 --> 02:00:08,639
connection in the kernel which is not

2979
02:00:08,639 --> 02:00:10,560
exactly what we want to do here

2980
02:00:10,560 --> 02:00:11,920
here we want to basically be able to

2981
02:00:11,920 --> 02:00:14,320
continue to use this connection and just

2982
02:00:14,320 --> 02:00:15,599
say if that

2983
02:00:15,599 --> 02:00:18,400
application exits later on then we want

2984
02:00:18,400 --> 02:00:20,639
to have that asylum close for that

2985
02:00:20,639 --> 02:00:22,000
connection

2986
02:00:22,000 --> 02:00:24,400
um so yeah so the effort status we've

2987
02:00:24,400 --> 02:00:26,480
used it in years for years and we wanted

2988
02:00:26,480 --> 02:00:28,239
to open source this so we wanted to come

2989
02:00:28,239 --> 02:00:29,920
discuss with the community

2990
02:00:29,920 --> 02:00:32,880
um and uh yeah we wanted to invite a

2991
02:00:32,880 --> 02:00:34,639
discussion although i see we're probably

2992
02:00:34,639 --> 02:00:36,719
out of time but maybe on the list uh

2993
02:00:36,719 --> 02:00:39,760
people can connect with us or now as

2994
02:00:39,760 --> 02:00:40,639
well

2995
02:00:40,639 --> 02:00:42,960
thank you

2996
02:00:43,520 --> 02:00:46,080
thank you for the presentation um

2997
02:00:46,080 --> 02:00:48,159
we are basically out of time but maybe

2998
02:00:48,159 --> 02:00:52,199
three quick questions maya

2999
02:00:54,320 --> 02:00:56,080
and then a question i will be brief so

3000
02:00:56,080 --> 02:00:58,239
as you said on this where you talk about

3001
02:00:58,239 --> 02:01:01,040
user usage considerations you basically

3002
02:01:01,040 --> 02:01:02,719
have a trade-off here right you try to

3003
02:01:02,719 --> 02:01:04,480
reduce network load but you increase

3004
02:01:04,480 --> 02:01:06,560
load um at the other side and maybe

3005
02:01:06,560 --> 02:01:08,400
middle boxes by not sending something so

3006
02:01:08,400 --> 02:01:09,440
i'm i'm

3007
02:01:09,440 --> 02:01:11,360
not sure what i think about this idea

3008
02:01:11,360 --> 02:01:12,639
because i don't know how to rate the

3009
02:01:12,639 --> 02:01:14,560
straight up right i don't understand

3010
02:01:14,560 --> 02:01:16,400
what the implications are for for all

3011
02:01:16,400 --> 02:01:19,759
the involved parties

3012
02:01:21,520 --> 02:01:23,760
okay thank you yeah so it's our

3013
02:01:23,760 --> 02:01:26,639
estimation and experience that the

3014
02:01:26,639 --> 02:01:28,960
the extra amount the extra load that

3015
02:01:28,960 --> 02:01:31,199
it's imposing keep in mind is just

3016
02:01:31,199 --> 02:01:33,760
memory in the middle box and then the

3017
02:01:33,760 --> 02:01:35,920
client and those

3018
02:01:35,920 --> 02:01:38,159
pieces of the system already have to

3019
02:01:38,159 --> 02:01:39,280
have

3020
02:01:39,280 --> 02:01:41,199
logic in place to do garbage collection

3021
02:01:41,199 --> 02:01:44,080
and bound that state um so it's our

3022
02:01:44,080 --> 02:01:46,800
sense that it's a net safety improvement

3023
02:01:46,800 --> 02:01:49,040
to deploy something like this to avoid

3024
02:01:49,040 --> 02:01:51,760
accidental you know massively excessive

3025
02:01:51,760 --> 02:01:54,400
load on the cell phone network um

3026
02:01:54,400 --> 02:01:55,599
since the other

3027
02:01:55,599 --> 02:01:57,679
since the players that have to do with

3028
02:01:57,679 --> 02:01:59,360
the extra state already have to deal

3029
02:01:59,360 --> 02:02:00,880
with this

3030
02:02:00,880 --> 02:02:04,719
issue of value in that state

3031
02:02:04,719 --> 02:02:07,440
okay so the question i had was i

3032
02:02:07,440 --> 02:02:09,199
understand that you do this if you close

3033
02:02:09,199 --> 02:02:11,520
the socket or the close of the socket

3034
02:02:11,520 --> 02:02:13,840
because the process died but if you shut

3035
02:02:13,840 --> 02:02:15,760
down the reader right side i'm not sure

3036
02:02:15,760 --> 02:02:18,639
if uh if you do

3037
02:02:18,639 --> 02:02:20,560
if when you do that

3038
02:02:20,560 --> 02:02:24,080
the tcp connection should go away

3039
02:02:25,280 --> 02:02:26,400
um

3040
02:02:26,400 --> 02:02:28,400
so i don't think this

3041
02:02:28,400 --> 02:02:32,480
changes the shutdown of the read side um

3042
02:02:32,480 --> 02:02:34,320
on the right side

3043
02:02:34,320 --> 02:02:35,760
i believe

3044
02:02:35,760 --> 02:02:37,599
my recollection of how we've implemented

3045
02:02:37,599 --> 02:02:39,520
it is that if you enable silent close

3046
02:02:39,520 --> 02:02:41,119
and then you do a shutdown of the right

3047
02:02:41,119 --> 02:02:46,639
side i believe it omits the fin and

3048
02:02:46,639 --> 02:02:48,480
um

3049
02:02:48,480 --> 02:02:51,440
i think that's a

3050
02:02:52,000 --> 02:02:54,000
detail we could if people think if

3051
02:02:54,000 --> 02:02:55,760
people see problems with that we could

3052
02:02:55,760 --> 02:02:57,599
obviously discuss that we can discuss

3053
02:02:57,599 --> 02:02:58,400
this

3054
02:02:58,400 --> 02:03:02,239
yeah stuart last comment

3055
02:03:02,800 --> 02:03:04,719
thank you i'll try to make this quick

3056
02:03:04,719 --> 02:03:06,800
because we're over time

3057
02:03:06,800 --> 02:03:09,119
uh i see the arguments for this and i'm

3058
02:03:09,119 --> 02:03:11,199
not saying it's a bad idea

3059
02:03:11,199 --> 02:03:13,360
i am saying it needs to be done very

3060
02:03:13,360 --> 02:03:14,560
carefully

3061
02:03:14,560 --> 02:03:16,080
i think there's a real risk of

3062
02:03:16,080 --> 02:03:18,400
unintended consequences here

3063
02:03:18,400 --> 02:03:20,800
uh it's very easy like in the research

3064
02:03:20,800 --> 02:03:22,480
paper you cited

3065
02:03:22,480 --> 02:03:25,119
they don't send the finn to save packets

3066
02:03:25,119 --> 02:03:28,159
and as you say this puts a bigger memory

3067
02:03:28,159 --> 02:03:30,560
burden on nats and firewalls for that

3068
02:03:30,560 --> 02:03:31,920
state

3069
02:03:31,920 --> 02:03:34,080
and that also has a consequence

3070
02:03:34,080 --> 02:03:35,199
because

3071
02:03:35,199 --> 02:03:37,920
uh i'm sure you're aware right now

3072
02:03:37,920 --> 02:03:40,400
tcp net mappings tend to have a much

3073
02:03:40,400 --> 02:03:43,520
longer lifetime than udp mappings and

3074
02:03:43,520 --> 02:03:45,440
the reason that gateways could do that

3075
02:03:45,440 --> 02:03:48,159
and firewalls and other metal boxes

3076
02:03:48,159 --> 02:03:50,239
is because they can assume they'll see a

3077
02:03:50,239 --> 02:03:52,480
tcp pin or recess

3078
02:03:52,480 --> 02:03:54,400
that tells them when a tcp connection is

3079
02:03:54,400 --> 02:03:57,440
done so merely the lack of traffic does

3080
02:03:57,440 --> 02:03:59,040
not mean a connection

3081
02:03:59,040 --> 02:04:02,320
uh as has been abandoned

3082
02:04:02,320 --> 02:04:04,239
if this socket option is widely

3083
02:04:04,239 --> 02:04:06,079
available on linux that makes it very

3084
02:04:06,079 --> 02:04:08,560
easy to just abandon connections then

3085
02:04:08,560 --> 02:04:11,040
that will force gnats to be much more

3086
02:04:11,040 --> 02:04:13,920
aggressive without scavenging apparently

3087
02:04:13,920 --> 02:04:16,320
idle tcp mappings just like they do for

3088
02:04:16,320 --> 02:04:17,840
udp today

3089
02:04:17,840 --> 02:04:19,360
and then you might end up having to send

3090
02:04:19,360 --> 02:04:21,679
10 times as much keep live traffic in

3091
02:04:21,679 --> 02:04:23,840
this future world so

3092
02:04:23,840 --> 02:04:26,880
this apparently well motivated move to

3093
02:04:26,880 --> 02:04:28,719
save one fin packet

3094
02:04:28,719 --> 02:04:30,480
has the consequence

3095
02:04:30,480 --> 02:04:32,079
that we're now sending 10 times as much

3096
02:04:32,079 --> 02:04:34,239
keeper live traffic 24 hours a day to

3097
02:04:34,239 --> 02:04:37,718
stop these connections

3098
02:04:39,679 --> 02:04:41,520
yeah i agree it's something we have to

3099
02:04:41,520 --> 02:04:44,719
carefully consider it's i guess my sense

3100
02:04:44,719 --> 02:04:45,840
is that

3101
02:04:45,840 --> 02:04:46,960
hopefully

3102
02:04:46,960 --> 02:04:49,679
these um these not boxes

3103
02:04:49,679 --> 02:04:51,679
are using some sort of

3104
02:04:51,679 --> 02:04:52,390
lru

3105
02:04:52,390 --> 02:04:54,560
[Music]

3106
02:04:54,560 --> 02:04:57,119
map you know lre policy for eviction

3107
02:04:57,119 --> 02:04:59,440
anyway so hopefully it would work out in

3108
02:04:59,440 --> 02:05:00,880
practice

3109
02:05:00,880 --> 02:05:03,760
given that the

3110
02:05:03,760 --> 02:05:05,679
given the intended usage model but yeah

3111
02:05:05,679 --> 02:05:07,920
there's at this point

3112
02:05:07,920 --> 02:05:10,000
we have the reality today

3113
02:05:10,000 --> 02:05:10,800
that

3114
02:05:10,800 --> 02:05:13,280
one of the reasons quick is not suitable

3115
02:05:13,280 --> 02:05:15,760
for long-lived mostly idle connections

3116
02:05:15,760 --> 02:05:18,079
like push notification connections

3117
02:05:18,079 --> 02:05:19,360
is because

3118
02:05:19,360 --> 02:05:21,679
udp mappings have to be aggressively

3119
02:05:21,679 --> 02:05:24,079
recycled because there's no explicit fin

3120
02:05:24,079 --> 02:05:25,280
or reset

3121
02:05:25,280 --> 02:05:26,560
and

3122
02:05:26,560 --> 02:05:28,719
and if we effectively move tcp in the

3123
02:05:28,719 --> 02:05:30,719
direction that it also has no explicit

3124
02:05:30,719 --> 02:05:32,320
connection termination

3125
02:05:32,320 --> 02:05:34,320
we should expect to see the same

3126
02:05:34,320 --> 02:05:36,320
lifetime for tcp mappings as we

3127
02:05:36,320 --> 02:05:39,840
currently have the udp mappings

3128
02:05:43,679 --> 02:05:45,840
okay

3129
02:05:46,079 --> 02:05:47,920
thank you for for the discussion thank

3130
02:05:47,920 --> 02:05:49,840
you for attending um

3131
02:05:49,840 --> 02:05:51,679
i suggest to move the discussion on the

3132
02:05:51,679 --> 02:05:54,400
mailing list um i would say thank you

3133
02:05:54,400 --> 02:05:56,880
for attending the meeting and

3134
02:05:56,880 --> 02:05:57,760
um

3135
02:05:57,760 --> 02:06:00,159
michael yoshi you want to say

3136
02:06:00,159 --> 02:06:03,839
a final word or

3137
02:06:05,360 --> 02:06:07,199
if that's not the case

3138
02:06:07,199 --> 02:06:09,280
then i would say goodbye and see you

3139
02:06:09,280 --> 02:06:10,960
next time

3140
02:06:10,960 --> 02:06:11,920
and

3141
02:06:11,920 --> 02:06:13,679
wherever it is

3142
02:06:13,679 --> 02:06:14,719
bye

3143
02:06:14,719 --> 02:06:19,000
yeah thanks a lot for learning tcpm5

3144
02:07:07,679 --> 02:07:09,760
you

