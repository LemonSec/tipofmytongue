1
00:00:05,120 --> 00:00:07,839
it wasn't disable your sound if it

2
00:00:07,839 --> 00:00:09,599
wasn't like your sound was disabled it

3
00:00:09,599 --> 00:00:12,240
was the button for i can silence you

4
00:00:12,240 --> 00:00:13,679
so i'm still getting used to all these

5
00:00:13,679 --> 00:00:15,679
like slightly different

6
00:00:15,679 --> 00:00:17,920
user interface when you're a chair yeah

7
00:00:17,920 --> 00:00:19,359
yeah if you haven't carried anything in

8
00:00:19,359 --> 00:00:21,439
a while it's a little bit different

9
00:00:21,439 --> 00:00:23,119
the locking queue is new and it's really

10
00:00:23,119 --> 00:00:24,240
nice

11
00:00:24,240 --> 00:00:26,000
yeah

12
00:00:26,000 --> 00:00:27,439
we'll give it another minute or so since

13
00:00:27,439 --> 00:00:28,640
i still see the numbers slightly

14
00:00:28,640 --> 00:00:31,640
climbing

15
00:00:34,399 --> 00:00:39,000
i don't think our agenda is that tight

16
00:00:54,399 --> 00:00:55,680
all right now i no longer see it

17
00:00:55,680 --> 00:00:56,879
climbing so let's go ahead and get

18
00:00:56,879 --> 00:00:59,280
started this is the dane authentication

19
00:00:59,280 --> 00:01:02,480
for iot service hardening and or dance

20
00:01:02,480 --> 00:01:04,559
uh actually that title is the old title

21
00:01:04,559 --> 00:01:06,400
isn't it

22
00:01:06,400 --> 00:01:07,439
um

23
00:01:07,439 --> 00:01:09,680
anyway i am west hartaker i'm here with

24
00:01:09,680 --> 00:01:11,840
my co-chair paul wooters

25
00:01:11,840 --> 00:01:14,000
that is the mailing list and

26
00:01:14,000 --> 00:01:17,280
that is our official icon for ietf112

27
00:01:17,280 --> 00:01:19,040
hopefully i'll find other official icons

28
00:01:19,040 --> 00:01:21,520
for the future

29
00:01:21,520 --> 00:01:23,840
as a reminder i'm sure you've all seen a

30
00:01:23,840 --> 00:01:26,560
slide like this for many times during

31
00:01:26,560 --> 00:01:28,400
the course of the week

32
00:01:28,400 --> 00:01:30,159
by participating in the atf you're going

33
00:01:30,159 --> 00:01:32,479
to agree to follow etf processes and

34
00:01:32,479 --> 00:01:33,600
policies

35
00:01:33,600 --> 00:01:35,119
and you should be aware about

36
00:01:35,119 --> 00:01:37,600
contributions that you give to the etf

37
00:01:37,600 --> 00:01:41,680
and the related patent related uh

38
00:01:41,680 --> 00:01:43,280
decisions and things that go along with

39
00:01:43,280 --> 00:01:46,320
that i'm not a lawyer so i won't try and

40
00:01:46,320 --> 00:01:48,799
summarize that more there's a bunch of

41
00:01:48,799 --> 00:01:52,079
bcps or best current practices that are

42
00:01:52,079 --> 00:01:53,200
about

43
00:01:53,200 --> 00:01:54,960
that in particular including anything

44
00:01:54,960 --> 00:01:56,240
from internet standards process to

45
00:01:56,240 --> 00:01:57,759
working group processes to

46
00:01:57,759 --> 00:01:59,920
anti-harassment to the code of conduct

47
00:01:59,920 --> 00:02:02,079
copyright and patents

48
00:02:02,079 --> 00:02:05,280
specifically on the code of conduct

49
00:02:05,280 --> 00:02:06,719
one of the things that we are trying to

50
00:02:06,719 --> 00:02:08,878
do is make sure that all

51
00:02:08,878 --> 00:02:10,878
members of the atf are welcome to

52
00:02:10,878 --> 00:02:13,680
participate and are treated with respect

53
00:02:13,680 --> 00:02:16,160
please do sleep speak slowly we english

54
00:02:16,160 --> 00:02:18,800
is not the native language of everybody

55
00:02:18,800 --> 00:02:20,959
dispute your ideas by reasoned argument

56
00:02:20,959 --> 00:02:23,120
not by emotional statements i think

57
00:02:23,120 --> 00:02:24,400
that's something that i was just talking

58
00:02:24,400 --> 00:02:26,560
to high school students about this week

59
00:02:26,560 --> 00:02:28,560
it's a good rule of thumb

60
00:02:28,560 --> 00:02:30,480
um and use engineering judgment find the

61
00:02:30,480 --> 00:02:32,000
best solution for the whole internet

62
00:02:32,000 --> 00:02:33,519
we're not here to design just corner

63
00:02:33,519 --> 00:02:35,519
cases and then contribute to the ongoing

64
00:02:35,519 --> 00:02:37,280
work of the ietf by participating in the

65
00:02:37,280 --> 00:02:38,560
mailing lists

66
00:02:38,560 --> 00:02:39,440
and

67
00:02:39,440 --> 00:02:41,360
the general discussion of pushing the

68
00:02:41,360 --> 00:02:43,920
all of the work ietf forward over time

69
00:02:43,920 --> 00:02:46,160
it's not a single meeting

70
00:02:46,160 --> 00:02:48,959
do be aware that all of these rules do

71
00:02:48,959 --> 00:02:51,440
apply to the jabber meet echo

72
00:02:51,440 --> 00:02:53,760
im system 2 not just the microphone

73
00:02:53,760 --> 00:02:56,239
because everything is logged

74
00:02:56,239 --> 00:02:57,920
permanently

75
00:02:57,920 --> 00:03:02,080
on web archives and also in youtube

76
00:03:02,080 --> 00:03:04,080
for working group information we have a

77
00:03:04,080 --> 00:03:06,879
data tracker you've probably seen it and

78
00:03:06,879 --> 00:03:08,800
the purpose of dane in particular is to

79
00:03:08,800 --> 00:03:11,360
extend dane to encompass tls client

80
00:03:11,360 --> 00:03:13,599
authentication which is what we talked

81
00:03:13,599 --> 00:03:16,720
about in the boss that we had about how

82
00:03:16,720 --> 00:03:18,400
to use certificates to

83
00:03:18,400 --> 00:03:21,120
do client authentication and not uh

84
00:03:21,120 --> 00:03:22,400
everything under the sun that's where

85
00:03:22,400 --> 00:03:23,920
we're starting

86
00:03:23,920 --> 00:03:25,840
the mailing list information is there

87
00:03:25,840 --> 00:03:27,920
hopefully you are all subscribed the

88
00:03:27,920 --> 00:03:30,319
mailing list has been kind of quiet it's

89
00:03:30,319 --> 00:03:32,400
time to stir up the pot a little bit and

90
00:03:32,400 --> 00:03:34,080
hopefully this meeting will be able to

91
00:03:34,080 --> 00:03:36,080
kick that off as well

92
00:03:36,080 --> 00:03:37,280
and then there are three drafts that

93
00:03:37,280 --> 00:03:39,840
we'll talk about today as well to

94
00:03:39,840 --> 00:03:41,760
bootstrap our working group

95
00:03:41,760 --> 00:03:44,239
so welcome to the inaugural meeting uh

96
00:03:44,239 --> 00:03:47,040
the chair introduction uh is being done

97
00:03:47,040 --> 00:03:50,159
uh tim has agreed to take notes and is

98
00:03:50,159 --> 00:03:53,319
hopefully in the medical or in the um

99
00:03:53,319 --> 00:03:56,720
notes.ietf room right now

100
00:03:56,720 --> 00:03:58,879
i see he has notes in there already so

101
00:03:58,879 --> 00:04:00,239
that is working is there anybody else

102
00:04:00,239 --> 00:04:02,480
willing to be a backup note taker that

103
00:04:02,480 --> 00:04:05,518
can help him out

104
00:04:07,040 --> 00:04:09,439
i would just say not even so much backup

105
00:04:09,439 --> 00:04:11,360
but just watch what i type about you

106
00:04:11,360 --> 00:04:13,280
because people type a little faster than

107
00:04:13,280 --> 00:04:16,160
i type so i sometimes you know miss

108
00:04:16,160 --> 00:04:18,478
stuff great is there anybody that can

109
00:04:18,478 --> 00:04:20,639
make sure tim doesn't get things wrong

110
00:04:20,639 --> 00:04:22,880
how's that so i figure the speakers can

111
00:04:22,880 --> 00:04:24,240
you know double check what i'm saying

112
00:04:24,240 --> 00:04:25,360
about that yeah

113
00:04:25,360 --> 00:04:27,600
so i will certainly try and

114
00:04:27,600 --> 00:04:30,639
follow some too but

115
00:04:33,120 --> 00:04:36,639
david lawrence can i call on you

116
00:04:38,400 --> 00:04:40,160
you calling on me

117
00:04:40,160 --> 00:04:41,040
yep

118
00:04:41,040 --> 00:04:43,600
can you back up tim on notes

119
00:04:43,600 --> 00:04:45,840
i suppose i could do that

120
00:04:45,840 --> 00:04:47,280
thank you

121
00:04:47,280 --> 00:04:48,800
it should be really just watching tomb

122
00:04:48,800 --> 00:04:50,639
type

123
00:04:50,639 --> 00:04:52,560
all right well thank you to both

124
00:04:52,560 --> 00:04:54,720
one of my favorite pastimes

125
00:04:54,720 --> 00:04:56,560
oh yeah it's not my it's not mine either

126
00:04:56,560 --> 00:04:58,400
so

127
00:04:58,400 --> 00:05:00,560
all right so our conversation this

128
00:05:00,560 --> 00:05:02,320
morning we'll talk uh the way we've

129
00:05:02,320 --> 00:05:04,000
structured it is we're gonna talk about

130
00:05:04,000 --> 00:05:05,759
use cases first i think one of the

131
00:05:05,759 --> 00:05:07,680
things that came out of the buff was

132
00:05:07,680 --> 00:05:10,400
uh people weren't sure exactly how it

133
00:05:10,400 --> 00:05:12,160
was going to be used or where it might

134
00:05:12,160 --> 00:05:14,400
be deployed so we've put together three

135
00:05:14,400 --> 00:05:16,080
use cases this morning

136
00:05:16,080 --> 00:05:17,120
for

137
00:05:17,120 --> 00:05:20,400
how we expect the dance outputs or the

138
00:05:20,400 --> 00:05:24,639
tls client usage to work in um in

139
00:05:24,639 --> 00:05:25,600
various

140
00:05:25,600 --> 00:05:27,680
mechanisms and then ash will talk about

141
00:05:27,680 --> 00:05:29,120
the architecture document that he

142
00:05:29,120 --> 00:05:30,400
started thank you so much for getting

143
00:05:30,400 --> 00:05:32,400
that started uh ash

144
00:05:32,400 --> 00:05:34,320
and then uh schumann will talk about

145
00:05:34,320 --> 00:05:36,240
some of the existing solution documents

146
00:05:36,240 --> 00:05:38,000
and we'll end with any remaining time

147
00:05:38,000 --> 00:05:39,520
for um

148
00:05:39,520 --> 00:05:41,360
for open mic if there's future follow-on

149
00:05:41,360 --> 00:05:42,960
stuff

150
00:05:42,960 --> 00:05:45,440
okay so with that i think we'll turn it

151
00:05:45,440 --> 00:05:48,560
over to bill

152
00:05:50,080 --> 00:05:52,560
so i'm going to hit the ask to share

153
00:05:52,560 --> 00:05:56,639
slides and see what that does

154
00:05:56,639 --> 00:05:58,240
one of you guys now need to hit some

155
00:05:58,240 --> 00:06:01,039
button or something

156
00:06:01,280 --> 00:06:04,760
uh did you ask

157
00:06:04,760 --> 00:06:06,080
[Music]

158
00:06:06,080 --> 00:06:08,560
oh yes here it goes

159
00:06:08,560 --> 00:06:09,840
okay

160
00:06:09,840 --> 00:06:11,520
oh great okay

161
00:06:11,520 --> 00:06:14,319
so that's the

162
00:06:14,319 --> 00:06:17,120
uh let's see

163
00:06:17,680 --> 00:06:18,639
that one

164
00:06:18,639 --> 00:06:22,560
i guess share

165
00:06:23,120 --> 00:06:24,080
no

166
00:06:24,080 --> 00:06:25,600
not that one

167
00:06:25,600 --> 00:06:27,600
sorry

168
00:06:27,600 --> 00:06:30,000
um

169
00:06:30,639 --> 00:06:32,960
actually here well let's see

170
00:06:32,960 --> 00:06:35,280
just ask to share screen

171
00:06:35,280 --> 00:06:38,638
and see if that was working

172
00:06:39,919 --> 00:06:42,560
no i didn't change my mind

173
00:06:42,560 --> 00:06:44,960
yes i want to allow

174
00:06:44,960 --> 00:06:47,960
oh

175
00:06:48,800 --> 00:06:50,880
where were we there we go

176
00:06:50,880 --> 00:06:53,120
okay

177
00:06:55,599 --> 00:06:57,039
sorry

178
00:06:57,039 --> 00:06:58,000
view

179
00:06:58,000 --> 00:07:00,880
slideshow there we go

180
00:07:00,880 --> 00:07:03,840
everybody sees that okay

181
00:07:05,039 --> 00:07:06,479
yes

182
00:07:06,479 --> 00:07:07,840
great all right

183
00:07:07,840 --> 00:07:09,680
whoa now it's uh

184
00:07:09,680 --> 00:07:12,880
advancing automatically all right so

185
00:07:12,880 --> 00:07:15,199
um basically

186
00:07:15,199 --> 00:07:17,840
i'm not gonna try and go into any great

187
00:07:17,840 --> 00:07:20,479
technical detail i'm happy to answer any

188
00:07:20,479 --> 00:07:22,400
questions um

189
00:07:22,400 --> 00:07:25,039
uh in q a so forth i'm just gonna try

190
00:07:25,039 --> 00:07:26,800
and give an overview

191
00:07:26,800 --> 00:07:27,680
of

192
00:07:27,680 --> 00:07:30,400
the use cases that i

193
00:07:30,400 --> 00:07:33,120
am aware of so

194
00:07:33,120 --> 00:07:33,919
one

195
00:07:33,919 --> 00:07:36,479
obvious thing is that

196
00:07:36,479 --> 00:07:39,599
using dane to secure the dns

197
00:07:39,599 --> 00:07:41,919
is a demonstration of good faith eating

198
00:07:41,919 --> 00:07:45,919
our own dog food etc and it's

199
00:07:45,919 --> 00:07:47,759
feels to me kind of ridiculous to do

200
00:07:47,759 --> 00:07:49,360
anything else

201
00:07:49,360 --> 00:07:51,759
so i think as a matter of principle we

202
00:07:51,759 --> 00:07:55,280
should be using dane to secure the dns

203
00:07:55,280 --> 00:07:57,120
in addition

204
00:07:57,120 --> 00:07:58,639
ca certs

205
00:07:58,639 --> 00:08:01,120
or one of our big known vulnerabilities

206
00:08:01,120 --> 00:08:04,560
at this point the ca cert system is

207
00:08:04,560 --> 00:08:06,240
trash and

208
00:08:06,240 --> 00:08:08,000
anybody who wants to see a cert saying

209
00:08:08,000 --> 00:08:09,759
that they're somebody else

210
00:08:09,759 --> 00:08:11,759
has no particular difficulty getting it

211
00:08:11,759 --> 00:08:13,840
at this point and so

212
00:08:13,840 --> 00:08:15,440
those little green lock icons don't

213
00:08:15,440 --> 00:08:17,039
actually mean anything

214
00:08:17,039 --> 00:08:18,960
and i sure as hell don't want to be

215
00:08:18,960 --> 00:08:21,840
depending on them for the dns as well

216
00:08:21,840 --> 00:08:23,120
although that's kind of where we are

217
00:08:23,120 --> 00:08:24,879
right now

218
00:08:24,879 --> 00:08:26,400
so

219
00:08:26,400 --> 00:08:28,638
uh

220
00:08:28,879 --> 00:08:31,599
there are obviously people who ask why

221
00:08:31,599 --> 00:08:34,240
worry about transport layer if we've got

222
00:08:34,240 --> 00:08:37,919
and then security in dns

223
00:08:37,919 --> 00:08:39,760
so dnsec is fine if you actually

224
00:08:39,760 --> 00:08:42,640
validate in the client but nobody does

225
00:08:42,640 --> 00:08:43,679
and

226
00:08:43,679 --> 00:08:45,920
when i say nobody i mean you know it's

227
00:08:45,920 --> 00:08:48,800
not built into the os in

228
00:08:48,800 --> 00:08:53,120
mac or windows or you know most unixes

229
00:08:53,120 --> 00:08:56,399
and uh the zone data was protected up

230
00:08:56,399 --> 00:08:58,800
until the point which it was signed

231
00:08:58,800 --> 00:09:00,399
and that's that's something i think a

232
00:09:00,399 --> 00:09:02,320
lot fewer people have visibility into

233
00:09:02,320 --> 00:09:03,279
but

234
00:09:03,279 --> 00:09:06,320
um you know we do

235
00:09:06,320 --> 00:09:07,600
and

236
00:09:07,600 --> 00:09:09,760
what we see is really scary

237
00:09:09,760 --> 00:09:11,040
um

238
00:09:11,040 --> 00:09:12,560
so

239
00:09:12,560 --> 00:09:14,240
i think uh

240
00:09:14,240 --> 00:09:16,959
we we really need

241
00:09:16,959 --> 00:09:20,640
automatic tools there um

242
00:09:20,640 --> 00:09:22,560
things that are applied by default

243
00:09:22,560 --> 00:09:23,920
rather than

244
00:09:23,920 --> 00:09:26,080
assuming that the people who have the

245
00:09:26,080 --> 00:09:28,080
unsigned zone data

246
00:09:28,080 --> 00:09:28,880
are

247
00:09:28,880 --> 00:09:31,279
fully capable of defending it against

248
00:09:31,279 --> 00:09:33,360
attack

249
00:09:33,360 --> 00:09:36,480
and dnsec is fine if everybody's going

250
00:09:36,480 --> 00:09:38,800
to see the same records right if if

251
00:09:38,800 --> 00:09:40,000
you're never going to distinguish

252
00:09:40,000 --> 00:09:41,120
between

253
00:09:41,120 --> 00:09:42,800
different people and hand different

254
00:09:42,800 --> 00:09:45,279
records to different people then no

255
00:09:45,279 --> 00:09:47,440
issue

256
00:09:47,440 --> 00:09:49,600
but that's also something that people

257
00:09:49,600 --> 00:09:51,040
want

258
00:09:51,040 --> 00:09:52,240
so

259
00:09:52,240 --> 00:09:53,279
uh

260
00:09:53,279 --> 00:09:55,680
dns great for authenticating the content

261
00:09:55,680 --> 00:09:56,880
but doesn't

262
00:09:56,880 --> 00:10:00,160
uh deal with authorization

263
00:10:00,160 --> 00:10:01,279
um

264
00:10:01,279 --> 00:10:03,360
and we already do authorization

265
00:10:03,360 --> 00:10:05,680
throughout the dns publishing chain we

266
00:10:05,680 --> 00:10:09,120
just do it in a variety of awful hacky

267
00:10:09,120 --> 00:10:11,920
ways and what i would like to see

268
00:10:11,920 --> 00:10:14,640
is one nice clean way that applies

269
00:10:14,640 --> 00:10:16,720
at every stage here like each of those

270
00:10:16,720 --> 00:10:18,800
little red arrows

271
00:10:18,800 --> 00:10:21,040
is done the same way not using a

272
00:10:21,040 --> 00:10:23,599
different hack

273
00:10:24,000 --> 00:10:25,839
so if we look at the beginning of the

274
00:10:25,839 --> 00:10:30,959
chain the stub and caching and recursive

275
00:10:31,360 --> 00:10:34,640
we've got this problem of split horizon

276
00:10:34,640 --> 00:10:37,200
where people in enterprise do a lot of

277
00:10:37,200 --> 00:10:39,440
split horizon they depend on a lot of

278
00:10:39,440 --> 00:10:40,800
split horizon

279
00:10:40,800 --> 00:10:42,320
everybody gets that's ugly and not a

280
00:10:42,320 --> 00:10:44,079
good idea but

281
00:10:44,079 --> 00:10:46,000
you know we also get that it's not going

282
00:10:46,000 --> 00:10:47,920
away anytime soon

283
00:10:47,920 --> 00:10:50,079
uh so

284
00:10:50,079 --> 00:10:52,160
what do we do with people working from

285
00:10:52,160 --> 00:10:55,519
home and you know kovid and

286
00:10:55,519 --> 00:10:58,000
zero trust security and so forth we need

287
00:10:58,000 --> 00:11:00,000
some way of supporting split horizon

288
00:11:00,000 --> 00:11:02,160
that does not depend upon an ass in a

289
00:11:02,160 --> 00:11:05,920
seat in an office in a specific location

290
00:11:05,920 --> 00:11:08,399
uh so

291
00:11:08,399 --> 00:11:10,800
tls client authentication solves that

292
00:11:10,800 --> 00:11:13,680
problem very neatly

293
00:11:13,680 --> 00:11:15,839
the

294
00:11:16,320 --> 00:11:18,800
hack that people are mostly using right

295
00:11:18,800 --> 00:11:20,399
now is

296
00:11:20,399 --> 00:11:23,040
using vpn authentication which is

297
00:11:23,040 --> 00:11:24,560
built into

298
00:11:24,560 --> 00:11:26,399
os's

299
00:11:26,399 --> 00:11:29,920
you hand somebody a unique ipv6 address

300
00:11:29,920 --> 00:11:30,880
and then

301
00:11:30,880 --> 00:11:32,640
in the name server in the recursive

302
00:11:32,640 --> 00:11:35,760
server or the caching forwarding server

303
00:11:35,760 --> 00:11:36,959
you give them different answers

304
00:11:36,959 --> 00:11:39,200
depending what ipv6 address the query is

305
00:11:39,200 --> 00:11:40,560
coming in from

306
00:11:40,560 --> 00:11:41,519
um

307
00:11:41,519 --> 00:11:43,839
that's

308
00:11:44,079 --> 00:11:46,880
it's a thing that you may already be

309
00:11:46,880 --> 00:11:50,320
having to do for some reason anyway

310
00:11:50,320 --> 00:11:52,000
but

311
00:11:52,000 --> 00:11:53,920
if all you want to do is give somebody a

312
00:11:53,920 --> 00:11:57,040
different dns answer it's a very heavy

313
00:11:57,040 --> 00:11:58,160
weight

314
00:11:58,160 --> 00:12:00,480
mechanism for doing it

315
00:12:00,480 --> 00:12:02,160
requires a lot of moving parts that are

316
00:12:02,160 --> 00:12:04,560
sort of outside the dns

317
00:12:04,560 --> 00:12:07,600
there's also a huge demand for closed

318
00:12:07,600 --> 00:12:09,680
community recursive resolvers recursive

319
00:12:09,680 --> 00:12:12,320
resolvers that are not public recursive

320
00:12:12,320 --> 00:12:14,639
resolvers in the sense of

321
00:12:14,639 --> 00:12:16,480
answering any query that comes to them

322
00:12:16,480 --> 00:12:18,720
from anybody on the internet

323
00:12:18,720 --> 00:12:19,600
but

324
00:12:19,600 --> 00:12:22,000
are recursive resolvers in the sense

325
00:12:22,000 --> 00:12:23,760
that an enterprise would have had them

326
00:12:23,760 --> 00:12:25,040
internally

327
00:12:25,040 --> 00:12:26,959
prior to zero trust work from home blah

328
00:12:26,959 --> 00:12:28,880
blah blah

329
00:12:28,880 --> 00:12:30,480
so

330
00:12:30,480 --> 00:12:32,560
we have people who want to run a

331
00:12:32,560 --> 00:12:34,560
recursive resolver that has a closed

332
00:12:34,560 --> 00:12:36,560
user community

333
00:12:36,560 --> 00:12:39,360
and is not answering for anybody in the

334
00:12:39,360 --> 00:12:40,720
whole world

335
00:12:40,720 --> 00:12:42,000
um

336
00:12:42,000 --> 00:12:43,680
so we need a way of authenticating a

337
00:12:43,680 --> 00:12:45,839
client for that

338
00:12:45,839 --> 00:12:48,560
uh and again that's you know people are

339
00:12:48,560 --> 00:12:50,839
trying to do vpn auth for that which

340
00:12:50,839 --> 00:12:53,920
is a hassle

341
00:12:53,920 --> 00:12:56,959
between recursive and authoritative um

342
00:12:56,959 --> 00:12:58,079
this

343
00:12:58,079 --> 00:13:00,000
again isn't probably visible to

344
00:13:00,000 --> 00:13:01,600
everybody but

345
00:13:01,600 --> 00:13:04,880
there is a huge amount of

346
00:13:04,880 --> 00:13:07,360
um

347
00:13:07,360 --> 00:13:09,560
iplayer

348
00:13:09,560 --> 00:13:12,480
prioritization that happens between

349
00:13:12,480 --> 00:13:14,720
authoritatives and recursives so

350
00:13:14,720 --> 00:13:17,440
if you're operating large authoritative

351
00:13:17,440 --> 00:13:20,079
you have a list of the ip addresses of

352
00:13:20,079 --> 00:13:23,440
all of the major recursive name servers

353
00:13:23,440 --> 00:13:27,040
all of their upstream transit interfaces

354
00:13:27,040 --> 00:13:28,880
and you try and keep that list up to

355
00:13:28,880 --> 00:13:31,360
date and when a ddos comes in those are

356
00:13:31,360 --> 00:13:33,600
the ip addresses that get the answers

357
00:13:33,600 --> 00:13:35,680
first

358
00:13:35,680 --> 00:13:36,880
uh

359
00:13:36,880 --> 00:13:40,720
that is an immense headache um

360
00:13:40,720 --> 00:13:43,440
you know we've got

361
00:13:43,440 --> 00:13:45,360
google quad 9

362
00:13:45,360 --> 00:13:46,560
cisco

363
00:13:46,560 --> 00:13:49,680
and uh cloudflare at this point

364
00:13:49,680 --> 00:13:51,120
and

365
00:13:51,120 --> 00:13:53,199
you know they've each got anywhere

366
00:13:53,199 --> 00:13:56,560
between 30 and say 500

367
00:13:56,560 --> 00:13:58,800
ip addresses

368
00:13:58,800 --> 00:14:02,800
in v4 and another 30 to 500 ipv

369
00:14:02,800 --> 00:14:04,639
v6 addresses

370
00:14:04,639 --> 00:14:05,600
and

371
00:14:05,600 --> 00:14:08,240
anytime they're changing

372
00:14:08,240 --> 00:14:10,160
we either have to sort of

373
00:14:10,160 --> 00:14:12,560
deduce that by where queries are coming

374
00:14:12,560 --> 00:14:14,000
from and

375
00:14:14,000 --> 00:14:15,839
you know patterns and so forth which is

376
00:14:15,839 --> 00:14:18,720
a mess or we have to communicate it and

377
00:14:18,720 --> 00:14:20,399
that's really just not anything we want

378
00:14:20,399 --> 00:14:22,639
to be having to communicate as a

379
00:14:22,639 --> 00:14:24,959
recursive operator

380
00:14:24,959 --> 00:14:27,440
i don't want to be having to tell every

381
00:14:27,440 --> 00:14:30,880
major authoritative operator what every

382
00:14:30,880 --> 00:14:34,720
ip address i'm using for transit is

383
00:14:34,720 --> 00:14:37,199
and as an authoritative operator i don't

384
00:14:37,199 --> 00:14:39,040
want to be having to track

385
00:14:39,040 --> 00:14:40,959
all the ip addresses of all the

386
00:14:40,959 --> 00:14:43,040
recursive operators

387
00:14:43,040 --> 00:14:44,639
if

388
00:14:44,639 --> 00:14:47,120
i could specify a recursive operator by

389
00:14:47,120 --> 00:14:48,320
domain name

390
00:14:48,320 --> 00:14:49,279
and

391
00:14:49,279 --> 00:14:52,560
see a client cert match that domain name

392
00:14:52,560 --> 00:14:53,360
and

393
00:14:53,360 --> 00:14:55,360
know that everything was good

394
00:14:55,360 --> 00:14:59,839
that would be much much cleaner

395
00:15:00,160 --> 00:15:03,519
then we've got the authoritative anycast

396
00:15:03,519 --> 00:15:05,920
to the hidden primary

397
00:15:05,920 --> 00:15:10,959
to the dnsx signer that section

398
00:15:11,360 --> 00:15:14,959
is all handled with xfr and

399
00:15:14,959 --> 00:15:16,959
tcig and so forth

400
00:15:16,959 --> 00:15:20,240
that all works but tcig is

401
00:15:20,240 --> 00:15:23,360
shared secret so it's super clunky and

402
00:15:23,360 --> 00:15:25,279
the net effect of this is that people

403
00:15:25,279 --> 00:15:28,000
wind up reusing dcig keys

404
00:15:28,000 --> 00:15:30,320
across multiple sessions multiple

405
00:15:30,320 --> 00:15:31,600
partners

406
00:15:31,600 --> 00:15:33,519
um

407
00:15:33,519 --> 00:15:34,639
you know

408
00:15:34,639 --> 00:15:36,480
organization to organization they may

409
00:15:36,480 --> 00:15:39,040
have a unique key but then they've got a

410
00:15:39,040 --> 00:15:41,839
whole bunch of servers on each side and

411
00:15:41,839 --> 00:15:43,120
they're reusing

412
00:15:43,120 --> 00:15:44,880
they're

413
00:15:44,880 --> 00:15:47,120
having

414
00:15:47,120 --> 00:15:49,120
t-sig keys

415
00:15:49,120 --> 00:15:51,040
floating around

416
00:15:51,040 --> 00:15:54,279
in configuration documents in

417
00:15:54,279 --> 00:15:56,639
documentation in

418
00:15:56,639 --> 00:16:00,560
email in chat you know

419
00:16:00,560 --> 00:16:01,279
it

420
00:16:01,279 --> 00:16:03,360
it is a

421
00:16:03,360 --> 00:16:05,519
a vulnerability

422
00:16:05,519 --> 00:16:06,959
again

423
00:16:06,959 --> 00:16:10,320
tls solves this problem

424
00:16:10,320 --> 00:16:12,480
and then lastly the the thing i

425
00:16:12,480 --> 00:16:16,160
mentioned up front uh

426
00:16:16,480 --> 00:16:19,600
zone data is typically authored

427
00:16:19,600 --> 00:16:23,120
on a machine and by parties who are not

428
00:16:23,120 --> 00:16:25,759
capable of doing dns for the vast

429
00:16:25,759 --> 00:16:28,240
majority of zone data that winds up

430
00:16:28,240 --> 00:16:29,120
signed

431
00:16:29,120 --> 00:16:31,040
the person who authored the zone data is

432
00:16:31,040 --> 00:16:32,880
not the one who's applying the

433
00:16:32,880 --> 00:16:35,120
zone signing keys to it

434
00:16:35,120 --> 00:16:37,120
and getting

435
00:16:37,120 --> 00:16:42,240
the zone data safely into the dns signer

436
00:16:42,240 --> 00:16:44,800
the person who operates the dns-expiner

437
00:16:44,800 --> 00:16:46,959
may be perfectly capable of securing

438
00:16:46,959 --> 00:16:48,959
everything downstream from that

439
00:16:48,959 --> 00:16:51,759
but the upstream side

440
00:16:51,759 --> 00:16:53,759
you know it's one of those situations

441
00:16:53,759 --> 00:16:56,160
that we hope nobody looks very closely

442
00:16:56,160 --> 00:16:58,160
because garbage in garbage out

443
00:16:58,160 --> 00:16:58,959
so

444
00:16:58,959 --> 00:17:00,720
having something

445
00:17:00,720 --> 00:17:03,279
that worked by default that gave

446
00:17:03,279 --> 00:17:05,679
transport layer security between the

447
00:17:05,679 --> 00:17:08,400
authorship of the unsigned data and the

448
00:17:08,400 --> 00:17:09,439
signer

449
00:17:09,439 --> 00:17:10,959
would

450
00:17:10,959 --> 00:17:13,119
make

451
00:17:13,119 --> 00:17:15,199
you know give me one fewer reason to

452
00:17:15,199 --> 00:17:16,839
chew my fingernails

453
00:17:16,839 --> 00:17:20,880
so um that's it for me um

454
00:17:20,880 --> 00:17:22,160
i think we need to be able to

455
00:17:22,160 --> 00:17:23,439
authenticate

456
00:17:23,439 --> 00:17:25,439
both parties of any dns transaction

457
00:17:25,439 --> 00:17:28,319
wherever it is in that chain i think tls

458
00:17:28,319 --> 00:17:30,080
bidirectional auth is the only

459
00:17:30,080 --> 00:17:32,880
reasonable way of doing that i think

460
00:17:32,880 --> 00:17:33,760
dane

461
00:17:33,760 --> 00:17:35,760
tlsa records are

462
00:17:35,760 --> 00:17:38,000
sort of the the reasonable way of

463
00:17:38,000 --> 00:17:40,720
getting tls keys distributed at scale

464
00:17:40,720 --> 00:17:42,720
but you know your mileage may vary and i

465
00:17:42,720 --> 00:17:44,720
don't really care how other people do it

466
00:17:44,720 --> 00:17:48,880
i just need you know the jane tlsa stuff

467
00:17:48,880 --> 00:17:51,120
to be supported in clients

468
00:17:51,120 --> 00:17:53,440
um

469
00:17:53,440 --> 00:17:55,280
that's basically it i just think we need

470
00:17:55,280 --> 00:17:59,760
one solution here not a whole bunch so

471
00:17:59,760 --> 00:18:00,640
that's

472
00:18:00,640 --> 00:18:02,160
it for

473
00:18:02,160 --> 00:18:04,480
me

474
00:18:06,559 --> 00:18:09,039
all right thank you for that bill um as

475
00:18:09,039 --> 00:18:11,039
a reminder you know not everybody has to

476
00:18:11,039 --> 00:18:12,640
agree that all of these use cases are

477
00:18:12,640 --> 00:18:14,240
for them but we're just trying to find

478
00:18:14,240 --> 00:18:15,679
some of where

479
00:18:15,679 --> 00:18:18,000
different people will

480
00:18:18,000 --> 00:18:20,720
apply this resulting technology

481
00:18:20,720 --> 00:18:23,760
um dkg do you have a clarifying question

482
00:18:23,760 --> 00:18:26,559
we're not going to do much discussion or

483
00:18:26,559 --> 00:18:30,160
bashing about things nope okay

484
00:18:30,160 --> 00:18:34,000
uh victor you have a clarifying question

485
00:18:34,000 --> 00:18:35,760
uh

486
00:18:35,760 --> 00:18:38,240
clarifying uh one of the things people

487
00:18:38,240 --> 00:18:40,480
didn't mention is

488
00:18:40,480 --> 00:18:44,080
using dainty lsa to authenticate ongoing

489
00:18:44,080 --> 00:18:45,679
maintenance of dainty let's say or

490
00:18:45,679 --> 00:18:47,360
decide may have missed it if you didn't

491
00:18:47,360 --> 00:18:48,400
say it

492
00:18:48,400 --> 00:18:49,600
uh

493
00:18:49,600 --> 00:18:52,000
so i'd like to see that

494
00:18:52,000 --> 00:18:54,640
uh discover discussed because if we're

495
00:18:54,640 --> 00:18:56,080
actually going to rely on it we also

496
00:18:56,080 --> 00:18:59,918
need to be able to keep it working

497
00:19:02,559 --> 00:19:05,559
bill

498
00:19:10,799 --> 00:19:13,840
we're there and then you left

499
00:19:19,679 --> 00:19:23,120
it is it is possible that uh

500
00:19:23,120 --> 00:19:25,840
uh dkg

501
00:19:26,320 --> 00:19:28,160
i just wanted to ask victor to say a

502
00:19:28,160 --> 00:19:29,520
little bit more about what he means by

503
00:19:29,520 --> 00:19:30,960
maintenance i didn't understand his

504
00:19:30,960 --> 00:19:33,039
question so i'm asking for clarification

505
00:19:33,039 --> 00:19:35,840
on the clarification

506
00:19:36,240 --> 00:19:39,280
okay uh what i mean by that is that some

507
00:19:39,280 --> 00:19:41,840
people are in the habit of uh

508
00:19:41,840 --> 00:19:44,320
uh publishing dainty lsa records

509
00:19:44,320 --> 00:19:46,559
and then not doing a good job of keeping

510
00:19:46,559 --> 00:19:49,120
them correct as they roll with

511
00:19:49,120 --> 00:19:50,480
ease

512
00:19:50,480 --> 00:19:53,120
in part for lack of

513
00:19:53,120 --> 00:19:55,520
sensible mechanisms to make changes to

514
00:19:55,520 --> 00:19:58,400
the dns in part other kinds of planning

515
00:19:58,400 --> 00:20:00,080
things that i may be able to help them

516
00:20:00,080 --> 00:20:02,080
with software for

517
00:20:02,080 --> 00:20:04,240
but i'd like to see

518
00:20:04,240 --> 00:20:06,960
name servers provide a dane-based

519
00:20:06,960 --> 00:20:11,120
mechanism to keep dan records updated

520
00:20:11,120 --> 00:20:14,559
not just initially published

521
00:20:15,120 --> 00:20:16,080
okay

522
00:20:16,080 --> 00:20:17,760
uh

523
00:20:17,760 --> 00:20:21,120
dkj do you have more is that an old hand

524
00:20:21,120 --> 00:20:23,440
yeah no this is this is me back again um

525
00:20:23,440 --> 00:20:25,440
thanks victor i understand that now i do

526
00:20:25,440 --> 00:20:27,520
have a clarifying question about the use

527
00:20:27,520 --> 00:20:28,720
cases here

528
00:20:28,720 --> 00:20:30,880
um the use cases that were presented i

529
00:20:30,880 --> 00:20:32,080
think are

530
00:20:32,080 --> 00:20:34,559
well motivated i see the need for

531
00:20:34,559 --> 00:20:36,320
something that solves those problems but

532
00:20:36,320 --> 00:20:38,000
i am not entirely convinced that client

533
00:20:38,000 --> 00:20:39,440
authentication is the thing that's

534
00:20:39,440 --> 00:20:41,280
needed to solve those problems

535
00:20:41,280 --> 00:20:43,120
so so

536
00:20:43,120 --> 00:20:44,880
right yeah

537
00:20:44,880 --> 00:20:45,840
right

538
00:20:45,840 --> 00:20:48,240
that that not all of these cases you

539
00:20:48,240 --> 00:20:50,240
know you may want to solve something

540
00:20:50,240 --> 00:20:52,159
differently but this is where people

541
00:20:52,159 --> 00:20:54,000
might want to deploy it this we're not

542
00:20:54,000 --> 00:20:55,360
actually arguing

543
00:20:55,360 --> 00:20:57,760
uh that that this is where we are

544
00:20:57,760 --> 00:20:59,919
targeting but it's at least a use case

545
00:20:59,919 --> 00:21:01,520
to consider when we're developing the

546
00:21:01,520 --> 00:21:03,440
protocol

547
00:21:03,440 --> 00:21:06,640
right so we're not actually typically

548
00:21:06,640 --> 00:21:07,919
because it's very good we typically do

549
00:21:07,919 --> 00:21:09,520
it the other way around right where we

550
00:21:09,520 --> 00:21:10,960
say okay what's the problem that we're

551
00:21:10,960 --> 00:21:12,320
trying to solve

552
00:21:12,320 --> 00:21:13,919
and then what are the possible protocols

553
00:21:13,919 --> 00:21:15,200
that we could use to solve it and let's

554
00:21:15,200 --> 00:21:17,120
figure out um

555
00:21:17,120 --> 00:21:20,000
you know what what those protocols are

556
00:21:20,000 --> 00:21:21,440
as someone who's seriously concerned

557
00:21:21,440 --> 00:21:24,000
about the

558
00:21:24,000 --> 00:21:26,000
tying dns queries to individual

559
00:21:26,000 --> 00:21:28,080
identities

560
00:21:28,080 --> 00:21:29,280
i would if we're going to be talking

561
00:21:29,280 --> 00:21:30,400
about how to solve some of these

562
00:21:30,400 --> 00:21:32,080
problems i mean i i think maybe this is

563
00:21:32,080 --> 00:21:32,880
a

564
00:21:32,880 --> 00:21:34,400
i'm i'm more comfortable with the

565
00:21:34,400 --> 00:21:37,039
recursive resolver to authoritative

566
00:21:37,039 --> 00:21:39,760
uh authentication side of things here

567
00:21:39,760 --> 00:21:41,120
um

568
00:21:41,120 --> 00:21:45,039
but the the client um like if we're

569
00:21:45,039 --> 00:21:47,039
trying to solve the problem of how do we

570
00:21:47,039 --> 00:21:49,440
work with a closed community resolver

571
00:21:49,440 --> 00:21:51,280
that has special rules

572
00:21:51,280 --> 00:21:53,520
uh i would much prefer to see a working

573
00:21:53,520 --> 00:21:54,720
group like this

574
00:21:54,720 --> 00:21:57,039
think about non-client authentication

575
00:21:57,039 --> 00:21:59,600
mechanisms that would solve that problem

576
00:21:59,600 --> 00:22:00,960
so if we're talking about that is the

577
00:22:00,960 --> 00:22:03,280
use case i think that it opens the door

578
00:22:03,280 --> 00:22:05,120
to a lot more work

579
00:22:05,120 --> 00:22:06,559
so that makes sense

580
00:22:06,559 --> 00:22:08,720
right this is not the use case or it's

581
00:22:08,720 --> 00:22:10,640
not even a guaranteed use case this is

582
00:22:10,640 --> 00:22:12,400
trying to get models around when we're

583
00:22:12,400 --> 00:22:14,159
talking about the architecture document

584
00:22:14,159 --> 00:22:15,679
and framework

585
00:22:15,679 --> 00:22:17,840
that uh

586
00:22:17,840 --> 00:22:19,520
that somebody has the opportunity when

587
00:22:19,520 --> 00:22:20,720
they start talking about it later that

588
00:22:20,720 --> 00:22:22,320
we've you know seen a presentation on

589
00:22:22,320 --> 00:22:24,320
what they're thinking ahead of it

590
00:22:24,320 --> 00:22:27,360
you are right absolutely that uh that we

591
00:22:27,360 --> 00:22:30,400
are not going to take this on as the use

592
00:22:30,400 --> 00:22:33,280
case it is more as we start working on

593
00:22:33,280 --> 00:22:35,840
the the solution framework

594
00:22:35,840 --> 00:22:37,919
um

595
00:22:37,919 --> 00:22:40,240
is is is this the one that we want to

596
00:22:40,240 --> 00:22:42,320
consider in the future so

597
00:22:42,320 --> 00:22:43,120
um

598
00:22:43,120 --> 00:22:44,559
bill do you have an answer and then we

599
00:22:44,559 --> 00:22:46,720
are going to go on just to get agenda on

600
00:22:46,720 --> 00:22:49,440
time yeah i mean on that specific thing

601
00:22:49,440 --> 00:22:52,159
um blind inserts and role authentication

602
00:22:52,159 --> 00:22:53,840
doesn't have to be individual

603
00:22:53,840 --> 00:22:55,840
authentication tied to a

604
00:22:55,840 --> 00:22:59,600
you know identity on a passport

605
00:23:02,240 --> 00:23:03,840
okay thank you

606
00:23:03,840 --> 00:23:05,679
um ash

607
00:23:05,679 --> 00:23:10,480
you have next up and

608
00:23:10,480 --> 00:23:13,840
uh on device to cloud and the eps case

609
00:23:13,840 --> 00:23:15,450
are sort of both yours

610
00:23:15,450 --> 00:23:17,280
[Music]

611
00:23:17,280 --> 00:23:19,039
i do i will say that i think the eps

612
00:23:19,039 --> 00:23:20,640
case we agreed would be

613
00:23:20,640 --> 00:23:22,159
out of scope for the initial work but

614
00:23:22,159 --> 00:23:23,360
it's still

615
00:23:23,360 --> 00:23:26,320
our initial architecture should enable

616
00:23:26,320 --> 00:23:28,480
that to happen at some point right

617
00:23:28,480 --> 00:23:30,720
yes yeah and so a lot of the stuff that

618
00:23:30,720 --> 00:23:31,919
i'm going to be

619
00:23:31,919 --> 00:23:33,840
uh

620
00:23:33,840 --> 00:23:35,120
some of the stuff i'm going to present

621
00:23:35,120 --> 00:23:37,760
as context but it's definitely

622
00:23:37,760 --> 00:23:38,799
you know how

623
00:23:38,799 --> 00:23:39,840
i would like to note that some of this

624
00:23:39,840 --> 00:23:41,279
stuff is outside the scope of the

625
00:23:41,279 --> 00:23:43,279
charter

626
00:23:43,279 --> 00:23:45,279
um

627
00:23:45,279 --> 00:23:49,320
let me get the presenter view going

628
00:24:08,080 --> 00:24:09,760
all right so first we're going to start

629
00:24:09,760 --> 00:24:10,480
with

630
00:24:10,480 --> 00:24:13,840
uh device to cloud right

631
00:24:15,360 --> 00:24:16,400
so the

632
00:24:16,400 --> 00:24:19,360
device to cloud use case is particular

633
00:24:19,360 --> 00:24:21,279
to iot

634
00:24:21,279 --> 00:24:23,039
but it's very close to

635
00:24:23,039 --> 00:24:25,440
a lot of other sort of

636
00:24:25,440 --> 00:24:27,039
patterns you see even with workstation

637
00:24:27,039 --> 00:24:28,400
access to

638
00:24:28,400 --> 00:24:30,799
cloud applications

639
00:24:30,799 --> 00:24:33,520
so let's let's jump in um this is going

640
00:24:33,520 --> 00:24:36,080
to be brief and it's not going to go

641
00:24:36,080 --> 00:24:40,000
um extremely deep into the the protocol

642
00:24:40,000 --> 00:24:42,320
but i do want to talk about um two

643
00:24:42,320 --> 00:24:45,039
different approaches we might consider

644
00:24:45,039 --> 00:24:45,760
for

645
00:24:45,760 --> 00:24:47,120
anti-abuse

646
00:24:47,120 --> 00:24:48,880
uh and so this is some stuff that kind

647
00:24:48,880 --> 00:24:50,960
of came up i was doing some uh playing

648
00:24:50,960 --> 00:24:52,080
around with some how this might be

649
00:24:52,080 --> 00:24:54,640
implemented and um

650
00:24:54,640 --> 00:24:56,640
and at least should be recorded and we

651
00:24:56,640 --> 00:24:58,480
should uh contextualize the way that we

652
00:24:58,480 --> 00:25:01,120
build the final

653
00:25:01,120 --> 00:25:02,559
standards with uh with this stuff in

654
00:25:02,559 --> 00:25:04,799
mind

655
00:25:05,760 --> 00:25:06,480
so

656
00:25:06,480 --> 00:25:08,559
the problems that we'd like to solve

657
00:25:08,559 --> 00:25:11,679
um you know in dealing with client uh

658
00:25:11,679 --> 00:25:12,720
passion

659
00:25:12,720 --> 00:25:16,000
it's not yet being fully shared

660
00:25:16,000 --> 00:25:18,240
oh

661
00:25:19,520 --> 00:25:21,360
oh my gosh okay

662
00:25:21,360 --> 00:25:24,720
did you click ok and select the screen

663
00:25:24,720 --> 00:25:26,320
i know what i did wrong

664
00:25:26,320 --> 00:25:30,840
i'm sorry okay

665
00:25:47,360 --> 00:25:49,520
okay there we go

666
00:25:49,520 --> 00:25:51,760
all right so um

667
00:25:51,760 --> 00:25:55,279
https device to cloud use case

668
00:25:55,279 --> 00:25:56,799
there are a variety of protocols that

669
00:25:56,799 --> 00:25:58,400
you can use for

670
00:25:58,400 --> 00:26:00,240
device to cloud

671
00:26:00,240 --> 00:26:02,720
sometimes that's mqtt

672
00:26:02,720 --> 00:26:05,600
sometimes that's https

673
00:26:05,600 --> 00:26:09,200
but i'm covering specifically https

674
00:26:09,200 --> 00:26:11,440
for this

675
00:26:11,440 --> 00:26:13,039
um we'll talk about some of the

676
00:26:13,039 --> 00:26:14,080
challenges

677
00:26:14,080 --> 00:26:15,440
with getting client authentication to

678
00:26:15,440 --> 00:26:18,159
work for https and tls

679
00:26:18,159 --> 00:26:20,799
at scale for a great number of devices

680
00:26:20,799 --> 00:26:23,360
and uh we'll discuss

681
00:26:23,360 --> 00:26:25,760
sort of two

682
00:26:25,760 --> 00:26:27,600
sort of ten thousand foot view two

683
00:26:27,600 --> 00:26:28,720
different approaches that we might

684
00:26:28,720 --> 00:26:29,919
consider

685
00:26:29,919 --> 00:26:33,600
for anti-abuse purposes for the protocol

686
00:26:33,600 --> 00:26:36,720
and then we can have a brief q a

687
00:26:36,720 --> 00:26:38,640
the problems specifically that we seek

688
00:26:38,640 --> 00:26:40,559
to solve have to do with

689
00:26:40,559 --> 00:26:43,440
using um public key based identity at

690
00:26:43,440 --> 00:26:46,559
scale uh web applications um and

691
00:26:46,559 --> 00:26:48,080
especially when you start looking at

692
00:26:48,080 --> 00:26:50,159
cloud applications the cloud side can

693
00:26:50,159 --> 00:26:52,080
get decoupled very easily because of

694
00:26:52,080 --> 00:26:54,000
orchestration tools make that

695
00:26:54,000 --> 00:26:56,159
easier to do so you'll have a

696
00:26:56,159 --> 00:26:57,919
you know your tls termination might be

697
00:26:57,919 --> 00:26:59,120
happening on the front of the

698
00:26:59,120 --> 00:27:01,919
application in a dedicated load balancer

699
00:27:01,919 --> 00:27:03,200
and then you'll have web applications

700
00:27:03,200 --> 00:27:06,080
behind that um

701
00:27:06,080 --> 00:27:08,000
you'll manage client configuration you

702
00:27:08,000 --> 00:27:11,279
know roles and and um and identify your

703
00:27:11,279 --> 00:27:14,640
association inside the application um

704
00:27:14,640 --> 00:27:17,039
but you know when you start it becomes

705
00:27:17,039 --> 00:27:19,120
very difficult to do that with uh with

706
00:27:19,120 --> 00:27:20,960
pki because you may have to synchronize

707
00:27:20,960 --> 00:27:23,279
settings between your application and

708
00:27:23,279 --> 00:27:26,000
your load balancer and um

709
00:27:26,000 --> 00:27:27,679
and that can become problematic also

710
00:27:27,679 --> 00:27:30,000
problems that um

711
00:27:30,000 --> 00:27:31,679
you know that we heard earlier with you

712
00:27:31,679 --> 00:27:33,520
know the problems of pki where you can

713
00:27:33,520 --> 00:27:35,279
have

714
00:27:35,279 --> 00:27:37,440
identifiers in one pki

715
00:27:37,440 --> 00:27:40,399
may also appear under another pki and so

716
00:27:40,399 --> 00:27:41,760
naming collisions impersonation

717
00:27:41,760 --> 00:27:44,399
happening that way

718
00:27:45,440 --> 00:27:46,640
and

719
00:27:46,640 --> 00:27:48,720
also when you start looking at

720
00:27:48,720 --> 00:27:51,279
smaller organizations that maybe can't

721
00:27:51,279 --> 00:27:53,360
um

722
00:27:53,360 --> 00:27:57,200
good identity strategies like using

723
00:27:57,200 --> 00:27:59,520
pki-based identities are not as

724
00:27:59,520 --> 00:28:00,720
approachable because of the

725
00:28:00,720 --> 00:28:03,600
infrastructure cost and having to um

726
00:28:03,600 --> 00:28:05,600
to operate your own ca

727
00:28:05,600 --> 00:28:07,679
traditionally or

728
00:28:07,679 --> 00:28:08,880
you know and everything that comes along

729
00:28:08,880 --> 00:28:10,159
with that

730
00:28:10,159 --> 00:28:11,760
so

731
00:28:11,760 --> 00:28:14,880
what we'd like to do is we like to make

732
00:28:14,880 --> 00:28:16,880
pki based identity more accessible we

733
00:28:16,880 --> 00:28:19,520
think that dane can do that

734
00:28:19,520 --> 00:28:21,200
and we go into more detail in the

735
00:28:21,200 --> 00:28:22,480
architecture document with how that

736
00:28:22,480 --> 00:28:26,799
works you know having identity suppliers

737
00:28:27,360 --> 00:28:30,640
but the problems particular to

738
00:28:30,640 --> 00:28:31,919
um

739
00:28:31,919 --> 00:28:35,640
doing this with https

740
00:28:35,760 --> 00:28:37,039
when

741
00:28:37,039 --> 00:28:39,279
if you have a bunch of devices

742
00:28:39,279 --> 00:28:41,760
you know consumed by an organization and

743
00:28:41,760 --> 00:28:43,760
they all need to onboard to a cloud

744
00:28:43,760 --> 00:28:46,080
application oftentimes

745
00:28:46,080 --> 00:28:48,480
you'll see an api to api integration and

746
00:28:48,480 --> 00:28:50,559
this is you know between something

747
00:28:50,559 --> 00:28:51,840
that's acting as a certification

748
00:28:51,840 --> 00:28:53,840
authority and a cloud platform and

749
00:28:53,840 --> 00:28:56,080
they're either moving the trust anchors

750
00:28:56,080 --> 00:29:00,080
over or you may just do a bulk move of

751
00:29:00,080 --> 00:29:01,279
you know device public keys or

752
00:29:01,279 --> 00:29:04,000
certificates and using

753
00:29:04,000 --> 00:29:06,640
dns just to discover entity certificates

754
00:29:06,640 --> 00:29:08,799
by name is a lot

755
00:29:08,799 --> 00:29:11,760
i think a lot cleaner way to do things

756
00:29:11,760 --> 00:29:13,919
but when you get into the implementation

757
00:29:13,919 --> 00:29:14,960
um

758
00:29:14,960 --> 00:29:16,720
you know the way that we've discussed

759
00:29:16,720 --> 00:29:18,159
this so far

760
00:29:18,159 --> 00:29:21,039
is in having the um during the tls

761
00:29:21,039 --> 00:29:22,399
handshake

762
00:29:22,399 --> 00:29:25,679
actually doing the uh the dns lookup and

763
00:29:25,679 --> 00:29:28,559
doing the dane comparison

764
00:29:28,559 --> 00:29:30,480
however

765
00:29:30,480 --> 00:29:31,919
a challenge that comes with that is that

766
00:29:31,919 --> 00:29:34,080
you really need to have an allow list if

767
00:29:34,080 --> 00:29:36,399
you don't have an allow list then

768
00:29:36,399 --> 00:29:38,960
anyone presenting a client certificate

769
00:29:38,960 --> 00:29:40,720
and supporting the dane client id

770
00:29:40,720 --> 00:29:43,840
protocol could possibly trigger a dns

771
00:29:43,840 --> 00:29:45,520
lookup against maybe a maliciously

772
00:29:45,520 --> 00:29:47,840
configured resolver that doesn't respond

773
00:29:47,840 --> 00:29:49,760
very quickly

774
00:29:49,760 --> 00:29:51,679
this is sort of a play on the slow loris

775
00:29:51,679 --> 00:29:52,720
attack

776
00:29:52,720 --> 00:29:54,799
and it presents an interesting

777
00:29:54,799 --> 00:29:57,760
engineering challenge

778
00:29:58,159 --> 00:30:00,000
in the implementation so this is

779
00:30:00,000 --> 00:30:02,480
something that's worth considering um

780
00:30:02,480 --> 00:30:05,039
you know do we do this part inside the

781
00:30:05,039 --> 00:30:06,720
tls handshake

782
00:30:06,720 --> 00:30:08,559
or is there a different way that we can

783
00:30:08,559 --> 00:30:10,559
do this

784
00:30:10,559 --> 00:30:12,080
you know that might make anti-abuse

785
00:30:12,080 --> 00:30:14,960
efforts a little easier to

786
00:30:14,960 --> 00:30:17,039
to manage

787
00:30:17,039 --> 00:30:19,440
and so

788
00:30:19,520 --> 00:30:23,679
we may consider a tls cooperative

789
00:30:23,679 --> 00:30:25,440
client authentication

790
00:30:25,440 --> 00:30:27,679
protocol where you have the tls

791
00:30:27,679 --> 00:30:29,200
terminating load balancer will

792
00:30:29,200 --> 00:30:31,440
authenticate a certificate

793
00:30:31,440 --> 00:30:33,840
and in the

794
00:30:33,840 --> 00:30:36,159
http headers or rather in the uh

795
00:30:36,159 --> 00:30:37,679
something like post data you might have

796
00:30:37,679 --> 00:30:40,640
the dane id indicated and so once that

797
00:30:40,640 --> 00:30:42,720
certificate's authenticated and you know

798
00:30:42,720 --> 00:30:44,720
that the possessor of the private key is

799
00:30:44,720 --> 00:30:46,320
on the other end of that connection the

800
00:30:46,320 --> 00:30:47,679
certificate gets passed through to the

801
00:30:47,679 --> 00:30:50,559
web application as well as the dane id

802
00:30:50,559 --> 00:30:52,399
and so the web application

803
00:30:52,399 --> 00:30:53,919
can then look at the id and make sure

804
00:30:53,919 --> 00:30:54,880
that the

805
00:30:54,880 --> 00:30:57,440
uh the identifier is actually a valid

806
00:30:57,440 --> 00:30:59,440
client for the application before going

807
00:30:59,440 --> 00:31:02,799
to do the dns lookup

808
00:31:02,799 --> 00:31:04,640
and so

809
00:31:04,640 --> 00:31:06,320
you know in this case you wouldn't fail

810
00:31:06,320 --> 00:31:07,919
the um

811
00:31:07,919 --> 00:31:09,360
you wouldn't have the tls connection

812
00:31:09,360 --> 00:31:11,440
fail it would be something signaled by

813
00:31:11,440 --> 00:31:13,360
an http error code

814
00:31:13,360 --> 00:31:14,559
um

815
00:31:14,559 --> 00:31:16,720
but this might add this might make for

816
00:31:16,720 --> 00:31:19,760
an easier implementation

817
00:31:19,760 --> 00:31:22,080
you know within

818
00:31:22,080 --> 00:31:23,840
some cloud applications

819
00:31:23,840 --> 00:31:25,039
anyway these are just some thoughts that

820
00:31:25,039 --> 00:31:26,240
come out of

821
00:31:26,240 --> 00:31:28,799
doing some test implementations

822
00:31:28,799 --> 00:31:30,880
and

823
00:31:30,880 --> 00:31:33,039
you know

824
00:31:33,039 --> 00:31:35,279
for uh by way of illustration

825
00:31:35,279 --> 00:31:37,039
this is what that might look like

826
00:31:37,039 --> 00:31:38,799
uh you have a

827
00:31:38,799 --> 00:31:41,570
uh the device uh abc.device.example

828
00:31:41,570 --> 00:31:42,799
[Music]

829
00:31:42,799 --> 00:31:44,799
on the left has a certificate presented

830
00:31:44,799 --> 00:31:48,799
in dane or using a tlsa record in dns

831
00:31:48,799 --> 00:31:50,320
as it attempts to

832
00:31:50,320 --> 00:31:51,840
authenticate to the load balancer load

833
00:31:51,840 --> 00:31:54,480
balancer is configured to authenticate

834
00:31:54,480 --> 00:31:55,919
any certificate to make sure that the

835
00:31:55,919 --> 00:31:58,640
private key is is held by the

836
00:31:58,640 --> 00:31:59,600
client

837
00:31:59,600 --> 00:32:02,559
and then it passes that through to

838
00:32:02,559 --> 00:32:04,799
the application behind it

839
00:32:04,799 --> 00:32:07,440
the uh the application behind it then

840
00:32:07,440 --> 00:32:09,760
make sure that the um

841
00:32:09,760 --> 00:32:11,760
the client name that's coming through in

842
00:32:11,760 --> 00:32:14,399
the post data is actually on the list of

843
00:32:14,399 --> 00:32:15,760
allowed clients

844
00:32:15,760 --> 00:32:17,919
and then it checks that against dns

845
00:32:17,919 --> 00:32:19,360
and then it can allow it into the

846
00:32:19,360 --> 00:32:20,799
application

847
00:32:20,799 --> 00:32:22,559
and so this makes it

848
00:32:22,559 --> 00:32:25,120
comparing this to a situation

849
00:32:25,120 --> 00:32:28,799
where one might have to to

850
00:32:28,799 --> 00:32:31,279
you know if

851
00:32:31,279 --> 00:32:33,919
if the tls

852
00:32:33,919 --> 00:32:36,399
handshake is held up to do a dns query

853
00:32:36,399 --> 00:32:39,279
and the client is able to sort of game

854
00:32:39,279 --> 00:32:41,679
that process to have a bunch of tls

855
00:32:41,679 --> 00:32:43,200
handshakes

856
00:32:43,200 --> 00:32:44,480
open at the same time that might be a

857
00:32:44,480 --> 00:32:46,320
dos opportunity

858
00:32:46,320 --> 00:32:47,360
so

859
00:32:47,360 --> 00:32:48,720
there's probably a really good way to

860
00:32:48,720 --> 00:32:49,760
solve this

861
00:32:49,760 --> 00:32:51,440
in the tls handshake you know with

862
00:32:51,440 --> 00:32:53,440
managing timeouts or making sure that

863
00:32:53,440 --> 00:32:54,720
there's an

864
00:32:54,720 --> 00:32:57,840
allowed clients list

865
00:32:58,000 --> 00:32:59,360
you know but this is

866
00:32:59,360 --> 00:33:00,960
anyway this just shows

867
00:33:00,960 --> 00:33:02,320
maybe two different approaches we might

868
00:33:02,320 --> 00:33:04,720
consider

869
00:33:04,960 --> 00:33:07,600
for uh for mitigating abuse

870
00:33:07,600 --> 00:33:11,799
on the on the application side

871
00:33:12,399 --> 00:33:16,320
and we can go to q a

872
00:33:16,720 --> 00:33:20,399
uh ben clarifying questions

873
00:33:22,840 --> 00:33:26,399
uh so are you okay i will phrase this as

874
00:33:26,399 --> 00:33:30,480
a clarifying question uh are you

875
00:33:30,480 --> 00:33:33,919
assuming that the client does not ship a

876
00:33:33,919 --> 00:33:38,159
a complete dane search chain

877
00:33:38,159 --> 00:33:40,799
or a signature chain

878
00:33:40,799 --> 00:33:42,960
um the expectation is that the client

879
00:33:42,960 --> 00:33:46,000
will present a certificate um

880
00:33:46,000 --> 00:33:47,200
and

881
00:33:47,200 --> 00:33:49,039
so are we are we talking about the sort

882
00:33:49,039 --> 00:33:51,279
of the tls native method or the uh the

883
00:33:51,279 --> 00:33:53,120
http method

884
00:33:53,120 --> 00:33:56,030
so i i'm neither um i am

885
00:33:56,030 --> 00:33:57,760
[Music]

886
00:33:57,760 --> 00:33:59,360
i i am

887
00:33:59,360 --> 00:34:02,000
uh attempting to to argue to you that

888
00:34:02,000 --> 00:34:04,159
that the right answer here is for us to

889
00:34:04,159 --> 00:34:06,080
say that the the client needs to ship a

890
00:34:06,080 --> 00:34:08,079
complete signature chain to the dns

891
00:34:08,079 --> 00:34:10,320
route

892
00:34:11,119 --> 00:34:13,679
so that the server has no work to do and

893
00:34:13,679 --> 00:34:15,359
they i so i agree that these are real

894
00:34:15,359 --> 00:34:16,719
problems i just think we should

895
00:34:16,719 --> 00:34:19,359
completely prevent them

896
00:34:19,359 --> 00:34:22,239
i think that's a great idea um are you

897
00:34:22,239 --> 00:34:24,320
suggesting ben that that you actually

898
00:34:24,320 --> 00:34:27,119
send the dns keys and the signatures all

899
00:34:27,119 --> 00:34:28,960
the way up to the root so that there's

900
00:34:28,960 --> 00:34:31,520
no dns queries that need to be made

901
00:34:31,520 --> 00:34:33,679
exactly the the server should should not

902
00:34:33,679 --> 00:34:35,599
have to perform any network operations

903
00:34:35,599 --> 00:34:38,079
or rely on any caching uh in order to

904
00:34:38,079 --> 00:34:41,760
validate the client identity

905
00:34:41,839 --> 00:34:42,879
i like it

906
00:34:42,879 --> 00:34:46,399
that sort of unwinds the whole problem

907
00:34:47,520 --> 00:34:49,599
there was sort of that discussed it in

908
00:34:49,599 --> 00:34:54,480
tls at one point um all right victor

909
00:34:55,199 --> 00:34:56,639
i uh

910
00:34:56,639 --> 00:34:58,960
agree in part with ben but i wonder

911
00:34:58,960 --> 00:35:01,119
whether that should be an optional

912
00:35:01,119 --> 00:35:03,920
feature if some server wants to ensure

913
00:35:03,920 --> 00:35:05,839
freshness of the data

914
00:35:05,839 --> 00:35:07,520
the client may be shipping slightly

915
00:35:07,520 --> 00:35:08,560
stale

916
00:35:08,560 --> 00:35:11,200
information right subject to rrsig and

917
00:35:11,200 --> 00:35:13,359
all that

918
00:35:13,359 --> 00:35:14,560
so

919
00:35:14,560 --> 00:35:16,079
it's a it

920
00:35:16,079 --> 00:35:17,599
should be possible to do that we may

921
00:35:17,599 --> 00:35:20,079
need tls extensions to negotiate which

922
00:35:20,079 --> 00:35:22,760
of those scenarios happens

923
00:35:22,760 --> 00:35:25,280
[Music]

924
00:35:25,280 --> 00:35:27,680
engineer that at the moment because

925
00:35:27,680 --> 00:35:29,200
the reason i'm doing clarified questions

926
00:35:29,200 --> 00:35:30,320
is that we can get to all of these when

927
00:35:30,320 --> 00:35:33,290
we get to the architecture discussion

928
00:35:33,290 --> 00:35:36,429
[Music]

929
00:35:39,440 --> 00:35:42,079
uh yeah so i think that's

930
00:35:42,079 --> 00:35:44,320
an option we've discussed in the past we

931
00:35:44,320 --> 00:35:45,760
haven't written it down anywhere but the

932
00:35:45,760 --> 00:35:48,079
possibility is we have a mechanism that

933
00:35:48,079 --> 00:35:49,839
can kind of do that right the tls chain

934
00:35:49,839 --> 00:35:51,599
extension which victor is very familiar

935
00:35:51,599 --> 00:35:52,720
with too

936
00:35:52,720 --> 00:35:55,599
uh only then we would have to

937
00:35:55,599 --> 00:35:57,440
kind of configure it to go the other way

938
00:35:57,440 --> 00:35:59,520
from the client to the server rather

939
00:35:59,520 --> 00:36:01,839
than the server to the client which is

940
00:36:01,839 --> 00:36:04,640
how it was originally envisioned to work

941
00:36:04,640 --> 00:36:06,400
but i think that's

942
00:36:06,400 --> 00:36:09,920
that's a possibility that could be

943
00:36:09,920 --> 00:36:11,680
implemented as part of the dance floor

944
00:36:11,680 --> 00:36:14,720
if there was interest

945
00:36:20,160 --> 00:36:21,270
okay thanks

946
00:36:21,270 --> 00:36:22,480
[Music]

947
00:36:22,480 --> 00:36:27,520
so ash we can go on to the eep case

948
00:36:27,520 --> 00:36:30,000
all right

949
00:36:31,200 --> 00:36:34,680
let me get this going

950
00:37:06,320 --> 00:37:08,240
been asked to use the uh

951
00:37:08,240 --> 00:37:11,040
the pdf sharing version of uh in meat

952
00:37:11,040 --> 00:37:12,880
echo because it takes less bandwidth but

953
00:37:12,880 --> 00:37:14,240
we'll work on that

954
00:37:14,240 --> 00:37:17,040
in a bit okay

955
00:37:17,839 --> 00:37:20,560
for now go ahead

956
00:37:21,119 --> 00:37:24,320
so the the tls use case is a network

957
00:37:24,320 --> 00:37:27,040
access use case and this this could work

958
00:37:27,040 --> 00:37:29,680
for wireless or wired access

959
00:37:29,680 --> 00:37:32,320
for devices um

960
00:37:32,320 --> 00:37:35,280
and so similar flow to the last one um

961
00:37:35,280 --> 00:37:37,359
except a little bit less into the uh

962
00:37:37,359 --> 00:37:38,960
into the protocol we'll talk about some

963
00:37:38,960 --> 00:37:41,119
of the challenges with uh

964
00:37:41,119 --> 00:37:42,880
client identity

965
00:37:42,880 --> 00:37:44,000
and um

966
00:37:44,000 --> 00:37:45,680
and then we'll look at how dane

967
00:37:45,680 --> 00:37:49,200
maps to the uh to the use case

968
00:37:49,200 --> 00:37:52,720
um the challenges with epls supplement

969
00:37:52,720 --> 00:37:55,359
authentication and supplicant is

970
00:37:55,359 --> 00:37:58,320
um is the tls client in the eep

971
00:37:58,320 --> 00:38:00,320
authentication process

972
00:38:00,320 --> 00:38:04,000
so your epls authentication process um

973
00:38:04,000 --> 00:38:05,520
it is

974
00:38:05,520 --> 00:38:07,200
prohibitively expensive for small

975
00:38:07,200 --> 00:38:09,280
organizations to adopt this

976
00:38:09,280 --> 00:38:10,960
authentication mechanism

977
00:38:10,960 --> 00:38:12,720
and that comes with the expense of

978
00:38:12,720 --> 00:38:14,320
operating a

979
00:38:14,320 --> 00:38:18,079
pki or certification authority um

980
00:38:18,079 --> 00:38:19,200
and so

981
00:38:19,200 --> 00:38:21,200
the it's also

982
00:38:21,200 --> 00:38:23,599
limiting when you implement a pki

983
00:38:23,599 --> 00:38:25,680
because you create your own namespace

984
00:38:25,680 --> 00:38:28,079
that is local to the organization or to

985
00:38:28,079 --> 00:38:29,599
the application

986
00:38:29,599 --> 00:38:32,000
and um

987
00:38:32,000 --> 00:38:33,920
and you know there's a there's a time

988
00:38:33,920 --> 00:38:36,240
factor in that as well and this is you

989
00:38:36,240 --> 00:38:38,400
know very often you see this in use in

990
00:38:38,400 --> 00:38:40,560
enterprises but small businesses and

991
00:38:40,560 --> 00:38:42,960
smaller organizations it's uh

992
00:38:42,960 --> 00:38:45,520
it's more difficult to adopt um

993
00:38:45,520 --> 00:38:47,520
and then that identity if you have an

994
00:38:47,520 --> 00:38:49,680
identity issued by your home

995
00:38:49,680 --> 00:38:51,359
organization and say you're a contractor

996
00:38:51,359 --> 00:38:53,200
and going to do work for someone else

997
00:38:53,200 --> 00:38:54,960
you can't use your

998
00:38:54,960 --> 00:38:57,839
your home organization identity at a

999
00:38:57,839 --> 00:39:00,320
client site to access

1000
00:39:00,320 --> 00:39:01,359
you know guest

1001
00:39:01,359 --> 00:39:03,280
guest wireless for instance and so if

1002
00:39:03,280 --> 00:39:06,320
you think about you know the the hoops

1003
00:39:06,320 --> 00:39:08,240
then we oftentimes see organizations

1004
00:39:08,240 --> 00:39:09,760
jumping through to implement something

1005
00:39:09,760 --> 00:39:11,520
that

1006
00:39:11,520 --> 00:39:12,960
you know that isn't too complicated for

1007
00:39:12,960 --> 00:39:14,800
guest wireless access having time down

1008
00:39:14,800 --> 00:39:16,000
tokens and everything like that for

1009
00:39:16,000 --> 00:39:18,960
accessing a very specific network it's

1010
00:39:18,960 --> 00:39:20,320
a lot of hoops and a lot of automation

1011
00:39:20,320 --> 00:39:22,160
that kind of comes into play and i think

1012
00:39:22,160 --> 00:39:25,680
that uh using dane for client identity

1013
00:39:25,680 --> 00:39:27,119
can cut through a lot of that

1014
00:39:27,119 --> 00:39:30,240
unnecessary complexity

1015
00:39:31,599 --> 00:39:34,240
so using

1016
00:39:34,720 --> 00:39:37,359
using dane for the supplicant

1017
00:39:37,359 --> 00:39:39,839
identity gives us one device identity

1018
00:39:39,839 --> 00:39:42,160
and because it's represented in dns you

1019
00:39:42,160 --> 00:39:44,240
can use it

1020
00:39:44,240 --> 00:39:45,440
you know potentially across different

1021
00:39:45,440 --> 00:39:47,920
networks different providers

1022
00:39:47,920 --> 00:39:49,520
and you can

1023
00:39:49,520 --> 00:39:51,359
then it becomes pretty easy to configure

1024
00:39:51,359 --> 00:39:54,720
an access list even across organizations

1025
00:39:54,720 --> 00:39:56,320
because you're just working with dns

1026
00:39:56,320 --> 00:39:57,680
names

1027
00:39:57,680 --> 00:40:00,240
you get revocation at the speed of

1028
00:40:00,240 --> 00:40:02,800
ttl so you pull the record from dns and

1029
00:40:02,800 --> 00:40:04,800
it can't be authenticated

1030
00:40:04,800 --> 00:40:06,480
and so that's a really good way of you

1031
00:40:06,480 --> 00:40:09,520
know disowning a device that might be

1032
00:40:09,520 --> 00:40:11,440
compromised

1033
00:40:11,440 --> 00:40:12,960
and

1034
00:40:12,960 --> 00:40:14,640
and then you also get the benefit you

1035
00:40:14,640 --> 00:40:17,040
know of having a third party you know

1036
00:40:17,040 --> 00:40:19,839
poor manufacturer providing an identity

1037
00:40:19,839 --> 00:40:21,599
that can then be consumed by an

1038
00:40:21,599 --> 00:40:23,280
organization and

1039
00:40:23,280 --> 00:40:25,359
and used without them having to operate

1040
00:40:25,359 --> 00:40:27,280
their own pki and so that's how you kind

1041
00:40:27,280 --> 00:40:28,800
of get to a

1042
00:40:28,800 --> 00:40:30,560
um

1043
00:40:30,560 --> 00:40:33,119
you know a very low friction uh pki

1044
00:40:33,119 --> 00:40:36,079
onboarding process for the network

1045
00:40:36,079 --> 00:40:37,200
um

1046
00:40:37,200 --> 00:40:39,200
and then you have the uk use case for uh

1047
00:40:39,200 --> 00:40:41,599
even leased devices and so if you have

1048
00:40:41,599 --> 00:40:43,599
one organization that provides devices

1049
00:40:43,599 --> 00:40:45,920
and uh to another organization

1050
00:40:45,920 --> 00:40:47,280
uh onboarding those to the network

1051
00:40:47,280 --> 00:40:49,200
becomes very easy you can say well i

1052
00:40:49,200 --> 00:40:50,800
allow you know

1053
00:40:50,800 --> 00:40:52,800
uh you could even do a wild card match

1054
00:40:52,800 --> 00:40:54,960
you know to say well i allow any camera

1055
00:40:54,960 --> 00:40:57,680
coming from this vendor to uh access

1056
00:40:57,680 --> 00:40:59,200
this portion of my network and things

1057
00:40:59,200 --> 00:41:00,560
like that so

1058
00:41:00,560 --> 00:41:03,119
um it gives a lot of flexibility and you

1059
00:41:03,119 --> 00:41:05,040
can be very you know you can use wild

1060
00:41:05,040 --> 00:41:07,040
cards you can be very specific

1061
00:41:07,040 --> 00:41:09,680
but it seems to be a really good

1062
00:41:09,680 --> 00:41:12,079
way and i keep coming back i guess in my

1063
00:41:12,079 --> 00:41:14,079
mind to the analogy of using

1064
00:41:14,079 --> 00:41:16,480
network access lists and how that you

1065
00:41:16,480 --> 00:41:17,839
know makes sense

1066
00:41:17,839 --> 00:41:20,000
you know for network flows higher up in

1067
00:41:20,000 --> 00:41:22,480
the stack using dane identities to

1068
00:41:22,480 --> 00:41:24,480
describe interactions between

1069
00:41:24,480 --> 00:41:25,839
clients and servers

1070
00:41:25,839 --> 00:41:28,480
seems like a uh a much easier way to do

1071
00:41:28,480 --> 00:41:29,920
things

1072
00:41:29,920 --> 00:41:30,960
and so

1073
00:41:30,960 --> 00:41:32,960
you know the way that you might the

1074
00:41:32,960 --> 00:41:34,720
specific on-boarding process for an

1075
00:41:34,720 --> 00:41:36,240
implementer is they might you know have

1076
00:41:36,240 --> 00:41:36,960
the

1077
00:41:36,960 --> 00:41:38,880
get the device in hand

1078
00:41:38,880 --> 00:41:41,440
you know and add that dns name to the

1079
00:41:41,440 --> 00:41:43,520
network access list

1080
00:41:43,520 --> 00:41:45,760
configure the device with the wi-fi ssid

1081
00:41:45,760 --> 00:41:47,760
that it needs to attach to and for

1082
00:41:47,760 --> 00:41:49,280
traditional

1083
00:41:49,280 --> 00:41:50,880
ca based authentication then you would

1084
00:41:50,880 --> 00:41:54,000
install the ca certificate for

1085
00:41:54,000 --> 00:41:56,560
maybe the radius server that's that's

1086
00:41:56,560 --> 00:41:58,800
performing the uh the other server side

1087
00:41:58,800 --> 00:42:01,359
of the tls

1088
00:42:01,520 --> 00:42:02,960
connection

1089
00:42:02,960 --> 00:42:04,319
um

1090
00:42:04,319 --> 00:42:08,000
we have discussed you know uh passing uh

1091
00:42:08,000 --> 00:42:10,400
you know like passing the dns chain in

1092
00:42:10,400 --> 00:42:12,400
the tls handshake that might be a way

1093
00:42:12,400 --> 00:42:14,880
around uh having to install a ca

1094
00:42:14,880 --> 00:42:16,640
certificate

1095
00:42:16,640 --> 00:42:18,240
but that's

1096
00:42:18,240 --> 00:42:19,440
that's something we've discussed it's

1097
00:42:19,440 --> 00:42:21,920
outside the scope of the charter but i

1098
00:42:21,920 --> 00:42:23,760
think it's definitely worth

1099
00:42:23,760 --> 00:42:25,119
consideration

1100
00:42:25,119 --> 00:42:26,240
because that would act that would make

1101
00:42:26,240 --> 00:42:27,280
it dane

1102
00:42:27,280 --> 00:42:29,359
end to end both ways

1103
00:42:29,359 --> 00:42:31,040
and then your network bootstrapping is

1104
00:42:31,040 --> 00:42:33,680
complete and this is without having to

1105
00:42:33,680 --> 00:42:35,040
uh

1106
00:42:35,040 --> 00:42:37,760
you know to deal with the process of

1107
00:42:37,760 --> 00:42:39,200
you know signing a certificate or

1108
00:42:39,200 --> 00:42:40,240
issuing

1109
00:42:40,240 --> 00:42:42,160
you know a device identity it arrives

1110
00:42:42,160 --> 00:42:44,000
with a usable identity and getting it

1111
00:42:44,000 --> 00:42:45,839
onto the network is just a matter of a

1112
00:42:45,839 --> 00:42:48,880
couple of configuration items

1113
00:42:48,880 --> 00:42:51,920
the way that this might look

1114
00:42:51,920 --> 00:42:54,319
is a vendor supplies the implementer

1115
00:42:54,319 --> 00:42:56,079
with devices

1116
00:42:56,079 --> 00:42:58,319
and the vendor places those device

1117
00:42:58,319 --> 00:43:01,520
certificates or public keys and dns

1118
00:43:01,520 --> 00:43:03,440
um the implementer configures network

1119
00:43:03,440 --> 00:43:06,000
access it just adds the um the names of

1120
00:43:06,000 --> 00:43:08,480
the devices into you know the radio

1121
00:43:08,480 --> 00:43:10,720
servers access list for instance

1122
00:43:10,720 --> 00:43:12,800
and then after configuring the devices

1123
00:43:12,800 --> 00:43:14,880
to point to that

1124
00:43:14,880 --> 00:43:15,839
um

1125
00:43:15,839 --> 00:43:17,359
access point or whatever then those

1126
00:43:17,359 --> 00:43:20,000
devices are able to authenticate and be

1127
00:43:20,000 --> 00:43:22,160
authenticated by um

1128
00:43:22,160 --> 00:43:24,160
by the radius server just using the uh

1129
00:43:24,160 --> 00:43:25,920
the dns name to do the certificate

1130
00:43:25,920 --> 00:43:28,960
comparison using dane

1131
00:43:32,000 --> 00:43:35,960
thoughts clarifying questions

1132
00:43:40,690 --> 00:43:43,909
[Music]

1133
00:43:43,920 --> 00:43:46,560
any questions

1134
00:43:50,240 --> 00:43:52,560
hi this is daniel again um

1135
00:43:52,560 --> 00:43:54,160
thanks for presenting this how are you

1136
00:43:54,160 --> 00:43:56,480
imagining a client selecting

1137
00:43:56,480 --> 00:43:58,400
which identity they want to present in

1138
00:43:58,400 --> 00:44:01,119
this eaton case

1139
00:44:01,839 --> 00:44:04,160
um the client deciding on which identity

1140
00:44:04,160 --> 00:44:07,440
to present to the network um

1141
00:44:13,359 --> 00:44:14,480
and could i get you to restate your

1142
00:44:14,480 --> 00:44:16,800
question

1143
00:44:16,880 --> 00:44:20,000
yeah um so i'm trying to understand

1144
00:44:20,000 --> 00:44:22,400
how a client would be expected to choose

1145
00:44:22,400 --> 00:44:25,520
an identity when when uh

1146
00:44:25,520 --> 00:44:26,800
doing

1147
00:44:26,800 --> 00:44:29,200
when when doing eep right uh

1148
00:44:29,200 --> 00:44:30,960
i think the the use case you described

1149
00:44:30,960 --> 00:44:32,240
is sort of a distributed one where the

1150
00:44:32,240 --> 00:44:34,160
client is using the same identity to

1151
00:44:34,160 --> 00:44:36,400
multiple providers

1152
00:44:36,400 --> 00:44:37,839
and i'm i'm just wondering if you have

1153
00:44:37,839 --> 00:44:40,560
any thoughts about how a client might

1154
00:44:40,560 --> 00:44:42,160
like is this going to encourage people

1155
00:44:42,160 --> 00:44:44,400
to always you know

1156
00:44:44,400 --> 00:44:46,400
publish their citizen id as they make a

1157
00:44:46,400 --> 00:44:49,440
connection or do we think that

1158
00:44:49,440 --> 00:44:51,200
people are going to be able to like do

1159
00:44:51,200 --> 00:44:52,240
you see this as something that would be

1160
00:44:52,240 --> 00:44:54,000
relatively easy for a client to select

1161
00:44:54,000 --> 00:44:55,920
which identity they use

1162
00:44:55,920 --> 00:44:56,720
um

1163
00:44:56,720 --> 00:44:58,480
for any given network like what what are

1164
00:44:58,480 --> 00:44:59,599
the sorts of

1165
00:44:59,599 --> 00:45:01,760
uh ui affordances that you would that

1166
00:45:01,760 --> 00:45:03,040
you would need

1167
00:45:03,040 --> 00:45:05,040
to avoid one person having to present

1168
00:45:05,040 --> 00:45:08,400
the same identity everywhere

1169
00:45:08,720 --> 00:45:10,560
that's a really good question and so i

1170
00:45:10,560 --> 00:45:12,319
think that protecting privacy is super

1171
00:45:12,319 --> 00:45:13,839
important

1172
00:45:13,839 --> 00:45:15,040
this might be a case where you have

1173
00:45:15,040 --> 00:45:18,000
multiple identities

1174
00:45:18,000 --> 00:45:21,040
having uh identities issued in this way

1175
00:45:21,040 --> 00:45:22,319
in a way that doesn't require the

1176
00:45:22,319 --> 00:45:24,240
implementer to

1177
00:45:24,240 --> 00:45:26,720
to operate the pki

1178
00:45:26,720 --> 00:45:29,359
you could purchase a number of

1179
00:45:29,359 --> 00:45:30,839
identities from

1180
00:45:30,839 --> 00:45:34,480
a from an identity vendor like this uh

1181
00:45:34,480 --> 00:45:36,240
so if i go to

1182
00:45:36,240 --> 00:45:37,160
you know

1183
00:45:37,160 --> 00:45:40,400
identity.example and i purchase you know

1184
00:45:40,400 --> 00:45:43,040
a number of pki identities to install

1185
00:45:43,040 --> 00:45:44,560
into my device then i might be able to

1186
00:45:44,560 --> 00:45:46,560
select one and depending on the network

1187
00:45:46,560 --> 00:45:48,400
i'm accessing um you know if it's a

1188
00:45:48,400 --> 00:45:49,520
public

1189
00:45:49,520 --> 00:45:51,280
public wi-fi network maybe i just

1190
00:45:51,280 --> 00:45:53,119
randomly pick from whichever one that i

1191
00:45:53,119 --> 00:45:53,920
want

1192
00:45:53,920 --> 00:45:56,480
the original

1193
00:45:56,480 --> 00:45:58,720
driving use case for this has a lot to

1194
00:45:58,720 --> 00:45:59,760
do with

1195
00:45:59,760 --> 00:46:02,240
iot and

1196
00:46:02,240 --> 00:46:04,240
in the iot use case where you have and

1197
00:46:04,240 --> 00:46:06,640
i'll use a specific example

1198
00:46:06,640 --> 00:46:10,200
the uh esp32

1199
00:46:10,400 --> 00:46:12,720
system on the chip has like four i think

1200
00:46:12,720 --> 00:46:15,760
four megs of uh flash storage

1201
00:46:15,760 --> 00:46:17,520
and so you're not going to squeeze a

1202
00:46:17,520 --> 00:46:20,240
whole bunch of certificates onto that

1203
00:46:20,240 --> 00:46:21,440
you know certificates and private keys

1204
00:46:21,440 --> 00:46:23,680
onto that device because it's really the

1205
00:46:23,680 --> 00:46:25,760
storage is really constrained and so i

1206
00:46:25,760 --> 00:46:27,839
think with a lot of iot use cases

1207
00:46:27,839 --> 00:46:29,200
especially when you start getting into

1208
00:46:29,200 --> 00:46:31,200
that that borderline close to the low

1209
00:46:31,200 --> 00:46:32,400
power stuff

1210
00:46:32,400 --> 00:46:34,880
um it'll just have one identity that

1211
00:46:34,880 --> 00:46:37,440
it'll use for a um

1212
00:46:37,440 --> 00:46:40,079
you know for a variety of networks and

1213
00:46:40,079 --> 00:46:42,079
with you know when you consider you know

1214
00:46:42,079 --> 00:46:44,880
if someone leases a bunch of device uh

1215
00:46:44,880 --> 00:46:46,800
you know smart light bulbs

1216
00:46:46,800 --> 00:46:48,960
and they want to use etls for them um

1217
00:46:48,960 --> 00:46:51,440
then the idea is that you would you know

1218
00:46:51,440 --> 00:46:52,960
onboard these devices but they would use

1219
00:46:52,960 --> 00:46:54,560
the manufacturer issue certificate to

1220
00:46:54,560 --> 00:46:57,359
access an enterprise network

1221
00:46:57,359 --> 00:46:59,040
it definitely bears some consideration

1222
00:46:59,040 --> 00:47:03,839
uh privacy wise for users and that's

1223
00:47:03,839 --> 00:47:05,040
we should make a note of that and make

1224
00:47:05,040 --> 00:47:05,920
sure that

1225
00:47:05,920 --> 00:47:07,920
if we start prescribing this for user

1226
00:47:07,920 --> 00:47:09,040
access

1227
00:47:09,040 --> 00:47:10,480
then we have some privacy protection in

1228
00:47:10,480 --> 00:47:11,599
place

1229
00:47:11,599 --> 00:47:13,280
okay thank you

1230
00:47:13,280 --> 00:47:15,440
um let's go on to victor and then we

1231
00:47:15,440 --> 00:47:16,560
really need to get moving we're a little

1232
00:47:16,560 --> 00:47:18,400
bit behind but we do have a buffer today

1233
00:47:18,400 --> 00:47:19,839
so victor

1234
00:47:19,839 --> 00:47:20,640
uh

1235
00:47:20,640 --> 00:47:22,800
yeah i'm just concerned as

1236
00:47:22,800 --> 00:47:26,000
always about this long-term stability of

1237
00:47:26,000 --> 00:47:27,200
uh

1238
00:47:27,200 --> 00:47:28,240
vendor

1239
00:47:28,240 --> 00:47:30,000
credentials right vendors also light

1240
00:47:30,000 --> 00:47:32,559
bulb and tomorrow they're gone

1241
00:47:32,559 --> 00:47:34,319
so i'm skeptical about this use case

1242
00:47:34,319 --> 00:47:36,160
sorry where is not a clarifying question

1243
00:47:36,160 --> 00:47:37,359
but i think it's an important

1244
00:47:37,359 --> 00:47:39,599
consideration to cover

1245
00:47:39,599 --> 00:47:41,119
right so we will

1246
00:47:41,119 --> 00:47:42,640
we will we will talk about that when we

1247
00:47:42,640 --> 00:47:44,319
get to actually solving that problem but

1248
00:47:44,319 --> 00:47:46,800
fair point right all right uh so ash

1249
00:47:46,800 --> 00:47:49,119
let's go on to your actually also for

1250
00:47:49,119 --> 00:47:51,200
the architecture presentation right

1251
00:47:51,200 --> 00:47:53,839
um so instead of if you could unscreen

1252
00:47:53,839 --> 00:47:55,760
share and then use the second button

1253
00:47:55,760 --> 00:47:58,240
from the left of which is in between the

1254
00:47:58,240 --> 00:48:00,800
screen share and the hand icon to share

1255
00:48:00,800 --> 00:48:03,440
using that slide deck instead assuming

1256
00:48:03,440 --> 00:48:04,839
your slide deck is up

1257
00:48:04,839 --> 00:48:07,599
to that should save bandwidth for some

1258
00:48:07,599 --> 00:48:09,359
of our downstream users thank you very

1259
00:48:09,359 --> 00:48:12,319
much perfect

1260
00:48:13,119 --> 00:48:16,240
dance dance architecture

1261
00:48:19,119 --> 00:48:22,640
all right and so um

1262
00:48:22,640 --> 00:48:24,400
sort of diving into the uh to the

1263
00:48:24,400 --> 00:48:26,720
architecture documents uh which was a

1264
00:48:26,720 --> 00:48:28,640
part of the original scope

1265
00:48:28,640 --> 00:48:30,400
of the working group is to produce this

1266
00:48:30,400 --> 00:48:32,240
architecture document together with

1267
00:48:32,240 --> 00:48:35,760
guidance for implementing uh dane plant

1268
00:48:35,760 --> 00:48:38,800
identity in the tls handshake

1269
00:48:38,800 --> 00:48:41,839
uh you're very happy for me

1270
00:48:41,839 --> 00:48:44,640
uh could somebody else enjoy say whether

1271
00:48:44,640 --> 00:48:48,520
whether it's just me or not

1272
00:48:50,960 --> 00:48:55,040
keep doing ash and then we'll um okay

1273
00:48:55,040 --> 00:48:58,720
oh it's just me never mind go ahead

1274
00:48:58,720 --> 00:49:01,599
so um similar float to the other

1275
00:49:01,599 --> 00:49:03,200
presentations we'll start with the

1276
00:49:03,200 --> 00:49:04,800
problems we'll look at how dane maps to

1277
00:49:04,800 --> 00:49:06,480
the problem space and then we'll go

1278
00:49:06,480 --> 00:49:08,400
through some of the

1279
00:49:08,400 --> 00:49:09,760
some of the use cases where we think it

1280
00:49:09,760 --> 00:49:10,960
might fit

1281
00:49:10,960 --> 00:49:12,400
and before we get

1282
00:49:12,400 --> 00:49:15,040
uh too far into this disclaimer this

1283
00:49:15,040 --> 00:49:16,880
does um

1284
00:49:16,880 --> 00:49:19,040
you know in the interest of painting a

1285
00:49:19,040 --> 00:49:21,359
larger picture

1286
00:49:21,359 --> 00:49:23,520
this does include some non-chartered

1287
00:49:23,520 --> 00:49:26,559
items so we talk you know later on about

1288
00:49:26,559 --> 00:49:28,480
what if object security were part of

1289
00:49:28,480 --> 00:49:29,440
this

1290
00:49:29,440 --> 00:49:31,359
this isn't intended

1291
00:49:31,359 --> 00:49:33,520
you know to require the

1292
00:49:33,520 --> 00:49:34,880
working group to go in that direction

1293
00:49:34,880 --> 00:49:36,480
this is to say in the fullness of time

1294
00:49:36,480 --> 00:49:38,240
and if there were interest you know

1295
00:49:38,240 --> 00:49:40,000
beyond a rechartering

1296
00:49:40,000 --> 00:49:41,680
this is what a more complete ecosystem

1297
00:49:41,680 --> 00:49:42,960
might look like

1298
00:49:42,960 --> 00:49:44,960
so i wanted to preface

1299
00:49:44,960 --> 00:49:48,160
this presentation with that

1300
00:49:49,760 --> 00:49:50,800
um

1301
00:49:50,800 --> 00:49:52,319
again the problems with pki based

1302
00:49:52,319 --> 00:49:54,240
identities it's too expensive smaller

1303
00:49:54,240 --> 00:49:56,400
organizations can't adopt it

1304
00:49:56,400 --> 00:49:57,520
easily

1305
00:49:57,520 --> 00:49:59,680
and um and it doesn't really work very

1306
00:49:59,680 --> 00:50:01,920
well across organizational boundaries

1307
00:50:01,920 --> 00:50:04,400
um it's operationally burdensome that

1308
00:50:04,400 --> 00:50:06,160
comes along with the expense you have to

1309
00:50:06,160 --> 00:50:08,240
have people to if you're doing it right

1310
00:50:08,240 --> 00:50:09,680
then it's not cheap you have to have

1311
00:50:09,680 --> 00:50:11,599
people maintaining it and

1312
00:50:11,599 --> 00:50:13,200
protecting it

1313
00:50:13,200 --> 00:50:16,319
and resource constrained organizations

1314
00:50:16,319 --> 00:50:18,319
are left vulnerable because it's hard

1315
00:50:18,319 --> 00:50:21,119
for them to adopt

1316
00:50:22,880 --> 00:50:25,040
and then the restrictive

1317
00:50:25,040 --> 00:50:26,480
you know i've already kind of spoken to

1318
00:50:26,480 --> 00:50:28,319
this uh before but you know getting

1319
00:50:28,319 --> 00:50:29,680
trust to work across organizational

1320
00:50:29,680 --> 00:50:32,960
boundaries and using policies within the

1321
00:50:32,960 --> 00:50:34,319
you know uh

1322
00:50:34,319 --> 00:50:36,800
within the context of peak kicks is sort

1323
00:50:36,800 --> 00:50:39,760
of a challenge and then you still

1324
00:50:39,760 --> 00:50:41,599
one pki does not have a way of

1325
00:50:41,599 --> 00:50:44,240
preventing other pki from signing

1326
00:50:44,240 --> 00:50:46,319
identities with the same

1327
00:50:46,319 --> 00:50:48,000
identifier

1328
00:50:48,000 --> 00:50:49,599
and so the challenges that come along

1329
00:50:49,599 --> 00:50:51,520
with that

1330
00:50:51,520 --> 00:50:53,040
it's it's really complicated it's

1331
00:50:53,040 --> 00:50:54,480
unnecessarily complicated and i think we

1332
00:50:54,480 --> 00:50:57,440
can solve this with dane

1333
00:51:01,520 --> 00:51:03,440
i've already talked about that so let's

1334
00:51:03,440 --> 00:51:05,040
talk about best practices for a second

1335
00:51:05,040 --> 00:51:08,079
um the cloud security alliance

1336
00:51:08,079 --> 00:51:10,319
recommends that in their summary

1337
00:51:10,319 --> 00:51:12,400
guidance document for identity and

1338
00:51:12,400 --> 00:51:13,760
access management for the internet of

1339
00:51:13,760 --> 00:51:16,400
things they say that step one a

1340
00:51:16,400 --> 00:51:17,760
you should define a common name space

1341
00:51:17,760 --> 00:51:20,400
for your iot devices and that makes a

1342
00:51:20,400 --> 00:51:22,480
lot of sense i think most people would

1343
00:51:22,480 --> 00:51:24,160
pretty much agree with that

1344
00:51:24,160 --> 00:51:25,119
um

1345
00:51:25,119 --> 00:51:27,680
and so from this decision point

1346
00:51:27,680 --> 00:51:30,240
um a lot of architects will say all

1347
00:51:30,240 --> 00:51:31,680
right well i want to use you know this

1348
00:51:31,680 --> 00:51:33,200
strategy or that strategy i want to you

1349
00:51:33,200 --> 00:51:35,200
know indicate the taxonomy of my device

1350
00:51:35,200 --> 00:51:37,200
it's from this vendor it does this thing

1351
00:51:37,200 --> 00:51:39,680
this is a serial number or maybe it's

1352
00:51:39,680 --> 00:51:42,880
just using the hash of the public key as

1353
00:51:42,880 --> 00:51:45,760
the identifier

1354
00:51:45,760 --> 00:51:47,599
but then you end up

1355
00:51:47,599 --> 00:51:49,119
when you're trying to troubleshoot an

1356
00:51:49,119 --> 00:51:52,160
audit you then are describing trust

1357
00:51:52,160 --> 00:51:54,640
you know trust relationships between

1358
00:51:54,640 --> 00:51:56,240
entities represented by two different

1359
00:51:56,240 --> 00:51:59,119
namespaces and you know what if instead

1360
00:51:59,119 --> 00:52:01,280
of creating a new namespace for clients

1361
00:52:01,280 --> 00:52:03,040
we just use the one

1362
00:52:03,040 --> 00:52:04,960
that we use for

1363
00:52:04,960 --> 00:52:09,839
server identity and that's dns

1364
00:52:11,040 --> 00:52:12,480
and so

1365
00:52:12,480 --> 00:52:14,800
using dain for client identity

1366
00:52:14,800 --> 00:52:18,480
pki namespace being bound to dns

1367
00:52:18,480 --> 00:52:20,079
you know it's recognized wherever dns is

1368
00:52:20,079 --> 00:52:22,720
used we all agree on the dns and it's

1369
00:52:22,720 --> 00:52:24,720
not like you know if you stick something

1370
00:52:24,720 --> 00:52:26,319
in blockchain then the next question is

1371
00:52:26,319 --> 00:52:28,319
well which blockchain is it in and what

1372
00:52:28,319 --> 00:52:30,960
does the api look like and it gets

1373
00:52:30,960 --> 00:52:32,480
sort of complicated

1374
00:52:32,480 --> 00:52:33,280
um

1375
00:52:33,280 --> 00:52:35,680
you know using the dns namespace it's

1376
00:52:35,680 --> 00:52:38,480
everywhere you get the ability to look

1377
00:52:38,480 --> 00:52:41,359
up public keys by name and a lot of the

1378
00:52:41,359 --> 00:52:43,119
uh the challenges

1379
00:52:43,119 --> 00:52:45,280
you know with using traditional pki

1380
00:52:45,280 --> 00:52:47,280
dealing with

1381
00:52:47,280 --> 00:52:49,839
restful apis on cas

1382
00:52:49,839 --> 00:52:51,920
just goes away

1383
00:52:51,920 --> 00:52:54,800
organizations are then able to purchase

1384
00:52:54,800 --> 00:52:57,040
devices or lease devices with

1385
00:52:57,040 --> 00:52:59,920
identities that are immediately useful

1386
00:52:59,920 --> 00:53:01,839
um and so

1387
00:53:01,839 --> 00:53:04,079
that takes the burden off of the

1388
00:53:04,079 --> 00:53:06,640
implementer you know or the consumer for

1389
00:53:06,640 --> 00:53:08,720
you know provisioning that pki identity

1390
00:53:08,720 --> 00:53:10,000
and the network onboarding process

1391
00:53:10,000 --> 00:53:12,800
becomes a lot easier

1392
00:53:12,800 --> 00:53:15,599
you know uh adding adding a device to a

1393
00:53:15,599 --> 00:53:18,400
network uh means adding the dns name of

1394
00:53:18,400 --> 00:53:21,200
the device to the access list

1395
00:53:21,200 --> 00:53:23,440
uh allowing application access means

1396
00:53:23,440 --> 00:53:26,160
that you add the client's dns name to

1397
00:53:26,160 --> 00:53:27,359
you know a

1398
00:53:27,359 --> 00:53:29,440
an access list or a role inside an

1399
00:53:29,440 --> 00:53:30,640
application

1400
00:53:30,640 --> 00:53:33,599
and for the object security use case um

1401
00:53:33,599 --> 00:53:36,240
using dns for public key lookup um for

1402
00:53:36,240 --> 00:53:39,040
signature verification or um object

1403
00:53:39,040 --> 00:53:40,079
encryption

1404
00:53:40,079 --> 00:53:42,000
it's uh it flows really well works

1405
00:53:42,000 --> 00:53:44,400
across organizations um

1406
00:53:44,400 --> 00:53:46,079
and the complexity you know that you

1407
00:53:46,079 --> 00:53:47,599
have of you know integrating different

1408
00:53:47,599 --> 00:53:49,839
apis just goes away if dns is the api

1409
00:53:49,839 --> 00:53:51,520
then the sdk's

1410
00:53:51,520 --> 00:53:54,880
already built into the operating system

1411
00:53:54,960 --> 00:53:57,440
um the example that i'll walk through is

1412
00:53:57,440 --> 00:54:00,480
one of uh let's say an autonomous car

1413
00:54:00,480 --> 00:54:01,760
use case

1414
00:54:01,760 --> 00:54:05,280
and the uh cars.example organization um

1415
00:54:05,280 --> 00:54:08,000
has autonomous cars that they allow to

1416
00:54:08,000 --> 00:54:09,920
drive around a uh

1417
00:54:09,920 --> 00:54:13,280
you know a city and the city is uh falls

1418
00:54:13,280 --> 00:54:15,520
within the jurisdiction of gov.example

1419
00:54:15,520 --> 00:54:17,359
gov.example says you're only able to

1420
00:54:17,359 --> 00:54:19,280
drive that on certain roads that we say

1421
00:54:19,280 --> 00:54:20,559
are okay

1422
00:54:20,559 --> 00:54:22,880
and you have to report

1423
00:54:22,880 --> 00:54:25,040
where your cars are driving

1424
00:54:25,040 --> 00:54:27,440
um regularly and so these autonomous

1425
00:54:27,440 --> 00:54:29,200
cars also generate a lot of data while

1426
00:54:29,200 --> 00:54:30,559
they're driving you know the sensor

1427
00:54:30,559 --> 00:54:31,920
readings things like that all kinds of

1428
00:54:31,920 --> 00:54:33,599
telemetry pictures

1429
00:54:33,599 --> 00:54:36,000
um and so they frequently need to upload

1430
00:54:36,000 --> 00:54:38,559
this stuff to a uh you know to a cloud

1431
00:54:38,559 --> 00:54:41,200
storage platform for parsing and for

1432
00:54:41,200 --> 00:54:42,319
training

1433
00:54:42,319 --> 00:54:44,400
machine learning models things like that

1434
00:54:44,400 --> 00:54:45,520
um

1435
00:54:45,520 --> 00:54:47,280
and so

1436
00:54:47,280 --> 00:54:48,240
the

1437
00:54:48,240 --> 00:54:50,559
uh cars.example organization has a

1438
00:54:50,559 --> 00:54:52,640
relationship with isp.example

1439
00:54:52,640 --> 00:54:55,760
isp.example runs a bunch of

1440
00:54:55,760 --> 00:54:57,520
consumer premise equipment

1441
00:54:57,520 --> 00:54:59,920
all over the uh the jurisdiction and so

1442
00:54:59,920 --> 00:55:01,920
they're able to stand up a you know a

1443
00:55:01,920 --> 00:55:03,599
wi-fi ssid

1444
00:55:03,599 --> 00:55:05,520
that's more or less pervasive everywhere

1445
00:55:05,520 --> 00:55:07,440
these cars are going to drive and so

1446
00:55:07,440 --> 00:55:10,400
this allows the car to

1447
00:55:10,400 --> 00:55:12,480
or any car in the fleet to

1448
00:55:12,480 --> 00:55:14,240
access these networks for periodically

1449
00:55:14,240 --> 00:55:16,400
uploading you know these massive amounts

1450
00:55:16,400 --> 00:55:19,799
of telemetry

1451
00:55:20,319 --> 00:55:21,359
um

1452
00:55:21,359 --> 00:55:23,680
and so looking at that universal client

1453
00:55:23,680 --> 00:55:26,480
credential let's just say that you use

1454
00:55:26,480 --> 00:55:27,680
um

1455
00:55:27,680 --> 00:55:29,599
use the same credential for network

1456
00:55:29,599 --> 00:55:32,079
access as well as everything else

1457
00:55:32,079 --> 00:55:34,480
in some cases that's not ideal but for

1458
00:55:34,480 --> 00:55:37,040
the purpose of simplicity that's how

1459
00:55:37,040 --> 00:55:40,480
i'm going to describe this use case

1460
00:55:40,799 --> 00:55:42,400
uh

1461
00:55:42,400 --> 00:55:45,119
so car's driving down the road

1462
00:55:45,119 --> 00:55:47,200
and it has

1463
00:55:47,200 --> 00:55:49,119
the cars configuration says that it

1464
00:55:49,119 --> 00:55:51,559
knows that it can authenticate to

1465
00:55:51,559 --> 00:55:53,680
public.isp.example ssid is named

1466
00:55:53,680 --> 00:55:56,160
public.isp.example

1467
00:55:56,160 --> 00:55:57,520
and

1468
00:55:57,520 --> 00:55:59,119
and so as it's driving along it detects

1469
00:55:59,119 --> 00:56:01,440
that ssid if it needs to upload

1470
00:56:01,440 --> 00:56:04,079
information then it's able to do eat tls

1471
00:56:04,079 --> 00:56:05,920
client authentication

1472
00:56:05,920 --> 00:56:08,480
to any of those access points as it's

1473
00:56:08,480 --> 00:56:10,160
driving around the city and it can use

1474
00:56:10,160 --> 00:56:11,440
that to

1475
00:56:11,440 --> 00:56:13,760
upload information

1476
00:56:13,760 --> 00:56:16,079
to the storage platform you know or for

1477
00:56:16,079 --> 00:56:18,799
internet access updating maps or machine

1478
00:56:18,799 --> 00:56:20,880
learning models whatever general network

1479
00:56:20,880 --> 00:56:22,640
access

1480
00:56:22,640 --> 00:56:25,359
um and so that same identity works when

1481
00:56:25,359 --> 00:56:27,200
it pulls into the parking lot at the

1482
00:56:27,200 --> 00:56:29,359
home office and so it can use the same

1483
00:56:29,359 --> 00:56:30,240
credential to access

1484
00:56:30,240 --> 00:56:32,480
wireless.car.example

1485
00:56:32,480 --> 00:56:34,240
and um

1486
00:56:34,240 --> 00:56:36,319
the you know uploading telemetry to

1487
00:56:36,319 --> 00:56:38,960
api.cars.example

1488
00:56:38,960 --> 00:56:40,960
might uh

1489
00:56:40,960 --> 00:56:42,480
you know it can use that same client

1490
00:56:42,480 --> 00:56:43,680
certificate

1491
00:56:43,680 --> 00:56:46,480
for mutual tls authentication with that

1492
00:56:46,480 --> 00:56:48,880
restful api and then it can use that to

1493
00:56:48,880 --> 00:56:50,000
upload

1494
00:56:50,000 --> 00:56:52,480
uh whatever information that it has

1495
00:56:52,480 --> 00:56:53,280
um

1496
00:56:53,280 --> 00:56:55,760
and for compliance purposes um

1497
00:56:55,760 --> 00:56:58,480
yes it submits a a

1498
00:56:58,480 --> 00:57:00,640
jws of

1499
00:57:00,640 --> 00:57:02,879
um

1500
00:57:03,119 --> 00:57:05,520
of different points of uh you know in

1501
00:57:05,520 --> 00:57:07,520
space and time where that car was so

1502
00:57:07,520 --> 00:57:10,000
that the government entity

1503
00:57:10,000 --> 00:57:10,880
can

1504
00:57:10,880 --> 00:57:12,640
can confirm that it didn't go outside of

1505
00:57:12,640 --> 00:57:15,920
its um of its allowed geofence and so

1506
00:57:15,920 --> 00:57:17,440
the way that that interaction happens is

1507
00:57:17,440 --> 00:57:19,200
the car uses

1508
00:57:19,200 --> 00:57:21,119
the um its certificate as a client

1509
00:57:21,119 --> 00:57:23,119
certificate to perform mutual tls

1510
00:57:23,119 --> 00:57:25,119
authentication with um

1511
00:57:25,119 --> 00:57:27,520
mqt mqtt server

1512
00:57:27,520 --> 00:57:30,079
and it put it places that signed jws

1513
00:57:30,079 --> 00:57:31,520
document

1514
00:57:31,520 --> 00:57:34,559
onto the message broker and so

1515
00:57:34,559 --> 00:57:36,640
you know the uh the document can then be

1516
00:57:36,640 --> 00:57:37,599
saved

1517
00:57:37,599 --> 00:57:40,240
and it can be verified later on when

1518
00:57:40,240 --> 00:57:42,480
it's parsed and compared against its

1519
00:57:42,480 --> 00:57:45,760
allowed geofence because the uh the jws

1520
00:57:45,760 --> 00:57:48,079
document contains you know in addition

1521
00:57:48,079 --> 00:57:49,920
to the payload it also contains the dns

1522
00:57:49,920 --> 00:57:52,000
name where that public key can be

1523
00:57:52,000 --> 00:57:54,559
retrieved for authenticating

1524
00:57:54,559 --> 00:57:57,200
the object

1525
00:57:58,640 --> 00:58:00,559
and so

1526
00:58:00,559 --> 00:58:02,160
what we have here is we have a card that

1527
00:58:02,160 --> 00:58:03,839
uses a single identity represented in

1528
00:58:03,839 --> 00:58:07,480
dns car54.underscoredevice.cors.example

1529
00:58:07,520 --> 00:58:09,920
and it uses that identity to

1530
00:58:09,920 --> 00:58:12,640
perform uh eptls client authentication

1531
00:58:12,640 --> 00:58:17,119
uh with uh multiple wireless networks um

1532
00:58:17,119 --> 00:58:18,000
also

1533
00:58:18,000 --> 00:58:19,520
sorry tls client authentication with

1534
00:58:19,520 --> 00:58:21,440
multiple wireless networks

1535
00:58:21,440 --> 00:58:24,960
uh tls client authentication with uh

1536
00:58:24,960 --> 00:58:28,000
with its home organizations api server

1537
00:58:28,000 --> 00:58:31,359
as well as the report.gov

1538
00:58:31,359 --> 00:58:32,720
that example

1539
00:58:32,720 --> 00:58:36,000
mqtt server for delivering that uh

1540
00:58:36,000 --> 00:58:39,359
sort of the geolocations and times

1541
00:58:39,359 --> 00:58:42,720
and then the um gov.example can then

1542
00:58:42,720 --> 00:58:45,040
reach out through dns to do a public key

1543
00:58:45,040 --> 00:58:47,839
lookup to verify the messages that are

1544
00:58:47,839 --> 00:58:49,200
placed in queue

1545
00:58:49,200 --> 00:58:54,078
by the um by the device or by the car

1546
00:58:55,119 --> 00:58:57,680
now what we see is as possible

1547
00:58:57,680 --> 00:59:00,400
protocol use cases and these are listed

1548
00:59:00,400 --> 00:59:02,400
in the in the architecture document

1549
00:59:02,400 --> 00:59:04,559
start tls for

1550
00:59:04,559 --> 00:59:05,760
um

1551
00:59:05,760 --> 00:59:08,720
for the email ecosystem uh eat tls for

1552
00:59:08,720 --> 00:59:10,799
network access

1553
00:59:10,799 --> 00:59:12,240
https

1554
00:59:12,240 --> 00:59:13,359
uh

1555
00:59:13,359 --> 00:59:16,000
and mqtts which are particularly useful

1556
00:59:16,000 --> 00:59:18,400
for iot

1557
00:59:18,400 --> 00:59:22,400
sip and webrtc as well as some

1558
00:59:22,400 --> 00:59:26,079
some use cases for lorawan

1559
00:59:26,079 --> 00:59:27,680
object security

1560
00:59:27,680 --> 00:59:29,280
should we decide to go that direction

1561
00:59:29,280 --> 00:59:31,200
after a recharter

1562
00:59:31,200 --> 00:59:32,799
jose and cozy

1563
00:59:32,799 --> 00:59:34,799
um make a lot of sense

1564
00:59:34,799 --> 00:59:37,040
there are some metadata fields already

1565
00:59:37,040 --> 00:59:39,680
defined where this fits really well and

1566
00:59:39,680 --> 00:59:42,640
xmpp end-to-end encryption

1567
00:59:42,640 --> 00:59:43,839
seems like it also might be a really

1568
00:59:43,839 --> 00:59:45,520
good fit

1569
00:59:45,520 --> 00:59:49,839
and client public key discovery for ssh

1570
00:59:49,839 --> 00:59:51,040
is something that might be worth

1571
00:59:51,040 --> 00:59:54,240
considering later on as well

1572
00:59:55,920 --> 00:59:58,240
and there's a we should also bear in

1573
00:59:58,240 --> 00:59:59,839
mind as we do this even though this is

1574
00:59:59,839 --> 01:00:01,599
not going to be defined you know

1575
01:00:01,599 --> 01:00:03,280
necessarily in

1576
01:00:03,280 --> 01:00:05,520
our uh you know within the scope of our

1577
01:00:05,520 --> 01:00:08,480
charter we should also keep in mind that

1578
01:00:08,480 --> 01:00:09,839
anti-abuse

1579
01:00:09,839 --> 01:00:12,960
efforts can really be aided by having a

1580
01:00:12,960 --> 01:00:16,000
good solid identity um

1581
01:00:16,000 --> 01:00:17,599
especially where the identifier

1582
01:00:17,599 --> 01:00:20,240
indicates the owning organization and so

1583
01:00:20,240 --> 01:00:22,000
um you know being able to report

1584
01:00:22,000 --> 01:00:23,680
misbehaving devices

1585
01:00:23,680 --> 01:00:26,799
using a dns names using a dns name you

1586
01:00:26,799 --> 01:00:29,040
know sort of takes out the um

1587
01:00:29,040 --> 01:00:30,559
you know so some of the what might be

1588
01:00:30,559 --> 01:00:33,119
subjectivity and processing a uh you

1589
01:00:33,119 --> 01:00:34,160
know a distinguished name from a

1590
01:00:34,160 --> 01:00:36,720
certificate or um you know client common

1591
01:00:36,720 --> 01:00:37,760
name

1592
01:00:37,760 --> 01:00:39,040
so these are things that we should keep

1593
01:00:39,040 --> 01:00:40,480
in mind uh

1594
01:00:40,480 --> 01:00:42,559
for security's sake i think it's

1595
01:00:42,559 --> 01:00:45,920
important to recommend dns over tls

1596
01:00:45,920 --> 01:00:48,559
for integrity's sake the stub resolver

1597
01:00:48,559 --> 01:00:50,960
should be doing dns validation

1598
01:00:50,960 --> 01:00:52,240
and

1599
01:00:52,240 --> 01:00:54,480
availability wise

1600
01:00:54,480 --> 01:00:56,000
you know we talked about mitigating this

1601
01:00:56,000 --> 01:00:57,599
with using the uh

1602
01:00:57,599 --> 01:01:00,880
tls chain or the um dns chain in the tls

1603
01:01:00,880 --> 01:01:02,160
handshake

1604
01:01:02,160 --> 01:01:04,559
but only performing a dns lookup for

1605
01:01:04,559 --> 01:01:05,760
allowed

1606
01:01:05,760 --> 01:01:09,520
client names is a pretty good way to

1607
01:01:09,599 --> 01:01:11,280
you know kind of

1608
01:01:11,280 --> 01:01:14,799
close the gap that could be exploited

1609
01:01:15,200 --> 01:01:18,000
and a few links to the the working group

1610
01:01:18,000 --> 01:01:20,319
the architecture document in data

1611
01:01:20,319 --> 01:01:23,200
tracker as well as github

1612
01:01:23,200 --> 01:01:26,799
and now we can jump into q a

1613
01:01:29,599 --> 01:01:32,400
so i accidentally killed your video ash

1614
01:01:32,400 --> 01:01:33,920
if you want to bring it back sorry about

1615
01:01:33,920 --> 01:01:34,960
that

1616
01:01:34,960 --> 01:01:37,960
um

1617
01:01:39,280 --> 01:01:43,119
uh anyway so uh q a so um

1618
01:01:43,119 --> 01:01:45,599
anybody have questions about ash's

1619
01:01:45,599 --> 01:01:47,280
presentation i will say some of those

1620
01:01:47,280 --> 01:01:49,520
items you know were

1621
01:01:49,520 --> 01:01:51,920
out of scope again the year for for the

1622
01:01:51,920 --> 01:01:54,079
working group at this point the goal is

1623
01:01:54,079 --> 01:01:55,680
to create an architecture that may be

1624
01:01:55,680 --> 01:01:58,720
usable for you know lots of cases

1625
01:01:58,720 --> 01:02:00,079
um

1626
01:02:00,079 --> 01:02:02,079
uh you know like epls for example is

1627
01:02:02,079 --> 01:02:03,599
even i think declared out of scope

1628
01:02:03,599 --> 01:02:05,280
initially and things like that but

1629
01:02:05,280 --> 01:02:07,200
enabling it if we want to if the itf

1630
01:02:07,200 --> 01:02:08,799
wants to take on that work in the future

1631
01:02:08,799 --> 01:02:10,559
is important

1632
01:02:10,559 --> 01:02:13,280
anybody have questions or comments uh

1633
01:02:13,280 --> 01:02:14,720
this is a time to talk about the

1634
01:02:14,720 --> 01:02:16,880
architecture regardless

1635
01:02:16,880 --> 01:02:18,960
of this this is not just clarifying

1636
01:02:18,960 --> 01:02:20,960
questions at this point we do have time

1637
01:02:20,960 --> 01:02:22,559
for discussion

1638
01:02:22,559 --> 01:02:24,480
um i think one of the outstanding

1639
01:02:24,480 --> 01:02:26,480
questions in my mind is in the

1640
01:02:26,480 --> 01:02:28,720
architecture document where you know i

1641
01:02:28,720 --> 01:02:31,440
believe that we need to talk about

1642
01:02:31,440 --> 01:02:33,680
naming of entities and and make sure

1643
01:02:33,680 --> 01:02:36,000
that that architecture framework you

1644
01:02:36,000 --> 01:02:38,640
know marries with the rest of the ietf

1645
01:02:38,640 --> 01:02:39,920
terminology

1646
01:02:39,920 --> 01:02:41,280
as well as

1647
01:02:41,280 --> 01:02:44,240
pick uh the best example you know use

1648
01:02:44,240 --> 01:02:46,000
case that we can state what it's going

1649
01:02:46,000 --> 01:02:47,280
to

1650
01:02:47,280 --> 01:02:49,200
look like architecture wise and explain

1651
01:02:49,200 --> 01:02:50,079
it so

1652
01:02:50,079 --> 01:02:51,840
schumann

1653
01:02:51,840 --> 01:02:54,899
[Music]

1654
01:02:56,000 --> 01:02:57,359
so um

1655
01:02:57,359 --> 01:02:58,079
this

1656
01:02:58,079 --> 01:03:00,480
since the architecture presentation that

1657
01:03:00,480 --> 01:03:03,039
ash did talked about some

1658
01:03:03,039 --> 01:03:05,200
for future looking use cases too i just

1659
01:03:05,200 --> 01:03:07,039
wanted to go back to

1660
01:03:07,039 --> 01:03:10,079
the suite of use cases that we

1661
01:03:10,079 --> 01:03:12,640
uh did discuss prior to that and the one

1662
01:03:12,640 --> 01:03:14,160
that i know i mentioned this on the chat

1663
01:03:14,160 --> 01:03:15,760
to the one that i noticed that was

1664
01:03:15,760 --> 01:03:17,920
conspicuously absent was the smtp

1665
01:03:17,920 --> 01:03:20,240
transport security use case and i was

1666
01:03:20,240 --> 01:03:21,760
wondering if i could if we could

1667
01:03:21,760 --> 01:03:24,000
volunteer victor to say just a few words

1668
01:03:24,000 --> 01:03:26,240
about that just to

1669
01:03:26,240 --> 01:03:28,640
you know make sure it's on people's mind

1670
01:03:28,640 --> 01:03:30,319
well victor does happen to be in the

1671
01:03:30,319 --> 01:03:31,920
queue so um

1672
01:03:31,920 --> 01:03:33,839
uh yeah uh

1673
01:03:33,839 --> 01:03:35,680
didn't have that in a slide deck but but

1674
01:03:35,680 --> 01:03:37,119
probably i should have probably poked

1675
01:03:37,119 --> 01:03:39,359
victor to make him present slides uh

1676
01:03:39,359 --> 01:03:40,520
victor do you want to talk about the

1677
01:03:40,520 --> 01:03:44,559
smtp client use case of this at all

1678
01:03:44,559 --> 01:03:47,119
uh sure i can briefly describe the uh

1679
01:03:47,119 --> 01:03:49,760
the issue so the smgp client that i was

1680
01:03:49,760 --> 01:03:53,280
interested in way back when schwein

1681
01:03:53,280 --> 01:03:54,400
draft

1682
01:03:54,400 --> 01:03:57,599
is is an mta not an end user

1683
01:03:57,599 --> 01:04:00,319
with a with a male client

1684
01:04:00,319 --> 01:04:02,960
and in the mta to mta

1685
01:04:02,960 --> 01:04:05,039
use case

1686
01:04:05,039 --> 01:04:06,880
the clients aren't trying to hide their

1687
01:04:06,880 --> 01:04:08,720
identity in fact they're trying their

1688
01:04:08,720 --> 01:04:10,160
hardest

1689
01:04:10,160 --> 01:04:12,799
to in most cases to convince the server

1690
01:04:12,799 --> 01:04:14,720
that they're legitimate and should not

1691
01:04:14,720 --> 01:04:16,400
be spam filtered

1692
01:04:16,400 --> 01:04:17,280
uh

1693
01:04:17,280 --> 01:04:20,400
and it would sure be nice to be able to

1694
01:04:20,400 --> 01:04:22,319
uh not only

1695
01:04:22,319 --> 01:04:23,599
uh

1696
01:04:23,599 --> 01:04:24,480
have

1697
01:04:24,480 --> 01:04:27,599
uh audit trails in smtp received headers

1698
01:04:27,599 --> 01:04:29,920
that uh show you that a message came

1699
01:04:29,920 --> 01:04:30,880
from

1700
01:04:30,880 --> 01:04:32,640
you know a

1701
01:04:32,640 --> 01:04:34,880
source that you can trust

1702
01:04:34,880 --> 01:04:36,480
but also to be able to apply a

1703
01:04:36,480 --> 01:04:37,920
reputation

1704
01:04:37,920 --> 01:04:39,280
uh to

1705
01:04:39,280 --> 01:04:41,760
uh instead of ip addresses

1706
01:04:41,760 --> 01:04:43,200
to uh

1707
01:04:43,200 --> 01:04:45,440
pre-trusted domains we do some of that

1708
01:04:45,440 --> 01:04:47,119
these days

1709
01:04:47,119 --> 01:04:50,640
uh with uh you know uh dkim and dmarc

1710
01:04:50,640 --> 01:04:54,000
and the like those are end-to-end

1711
01:04:54,000 --> 01:04:56,160
signals that tell you who wrote the

1712
01:04:56,160 --> 01:04:57,760
message

1713
01:04:57,760 --> 01:05:01,039
but it's also useful to have transport

1714
01:05:01,039 --> 01:05:03,119
security indication

1715
01:05:03,119 --> 01:05:06,400
in this case mta to mta

1716
01:05:06,400 --> 01:05:09,440
and with dane we could onboard that

1717
01:05:09,440 --> 01:05:12,319
incrementally negotiate its use

1718
01:05:12,319 --> 01:05:16,240
uh so the goal is to be able to

1719
01:05:16,240 --> 01:05:19,280
know who's talking to you as an mta smtp

1720
01:05:19,280 --> 01:05:21,680
client

1721
01:05:21,680 --> 01:05:22,559
now

1722
01:05:22,559 --> 01:05:23,760
uh

1723
01:05:23,760 --> 01:05:24,960
so that's all i wanted to say about it

1724
01:05:24,960 --> 01:05:26,640
unless people want me to say more i

1725
01:05:26,640 --> 01:05:28,480
don't know what else there is that

1726
01:05:28,480 --> 01:05:29,599
people want

1727
01:05:29,599 --> 01:05:30,799
that's probably good most people have

1728
01:05:30,799 --> 01:05:32,799
questions but you also stood up to get a

1729
01:05:32,799 --> 01:05:34,320
question probably too right

1730
01:05:34,320 --> 01:05:35,440
[Music]

1731
01:05:35,440 --> 01:05:38,640
yes which i will try and still uh

1732
01:05:38,640 --> 01:05:40,480
remember uh

1733
01:05:40,480 --> 01:05:42,640
in this case all right uh it's a

1734
01:05:42,640 --> 01:05:44,160
question and sort of a comment one of

1735
01:05:44,160 --> 01:05:46,319
the things we're not talking about in

1736
01:05:46,319 --> 01:05:47,920
this charter

1737
01:05:47,920 --> 01:05:49,680
is

1738
01:05:49,680 --> 01:05:53,200
any kind of

1739
01:05:53,200 --> 01:05:56,480
exchange of credentials you might start

1740
01:05:56,480 --> 01:05:58,079
with dns

1741
01:05:58,079 --> 01:05:58,880
to

1742
01:05:58,880 --> 01:06:00,559
you know authenticate yourself to some

1743
01:06:00,559 --> 01:06:03,280
point in the network

1744
01:06:03,280 --> 01:06:04,880
but having achieved that having

1745
01:06:04,880 --> 01:06:06,480
authenticated to some sort of

1746
01:06:06,480 --> 01:06:08,400
authentication provider

1747
01:06:08,400 --> 01:06:09,280
uh

1748
01:06:09,280 --> 01:06:12,559
we then i need to think about whether

1749
01:06:12,559 --> 01:06:14,400
that's the whole story

1750
01:06:14,400 --> 01:06:17,520
or whether we you know federate you know

1751
01:06:17,520 --> 01:06:18,640
sort of

1752
01:06:18,640 --> 01:06:20,559
in in some way

1753
01:06:20,559 --> 01:06:21,520
uh

1754
01:06:21,520 --> 01:06:23,839
trust brokers of various sorts that can

1755
01:06:23,839 --> 01:06:26,400
then authenticate you to other networks

1756
01:06:26,400 --> 01:06:28,319
uh by other means

1757
01:06:28,319 --> 01:06:30,480
than than this mechanism you know is is

1758
01:06:30,480 --> 01:06:32,640
there a more complete architecture here

1759
01:06:32,640 --> 01:06:33,920
one of the things that i had been

1760
01:06:33,920 --> 01:06:36,799
looking at but never had cycles to do

1761
01:06:36,799 --> 01:06:38,480
was in fact

1762
01:06:38,480 --> 01:06:40,799
bootstrapping cross-realm kerberos with

1763
01:06:40,799 --> 01:06:42,960
dane which would allow kdc's to

1764
01:06:42,960 --> 01:06:45,200
authenticate each other and then make it

1765
01:06:45,200 --> 01:06:47,920
possible to have a kerberos mesh that's

1766
01:06:47,920 --> 01:06:49,760
kind of internet scale

1767
01:06:49,760 --> 01:06:52,720
by using dane between the kdc's but then

1768
01:06:52,720 --> 01:06:55,200
user authenticates to local kdc not to

1769
01:06:55,200 --> 01:06:57,039
some remote entity

1770
01:06:57,039 --> 01:06:58,960
and kdc's have wonderful things in terms

1771
01:06:58,960 --> 01:07:00,799
of you know probably dan gilmore will be

1772
01:07:00,799 --> 01:07:02,319
happy to hear kdc's can support

1773
01:07:02,319 --> 01:07:04,079
anonymous credentials

1774
01:07:04,079 --> 01:07:06,880
uh kdc's can do all kinds of renaming

1775
01:07:06,880 --> 01:07:09,039
and masking and so on having

1776
01:07:09,039 --> 01:07:10,960
authenticated the user they might then

1777
01:07:10,960 --> 01:07:13,119
present them with a credential that

1778
01:07:13,119 --> 01:07:15,680
authenticates only the organization and

1779
01:07:15,680 --> 01:07:17,599
masks the user identity

1780
01:07:17,599 --> 01:07:21,039
um things that can't easily be done

1781
01:07:21,039 --> 01:07:21,839
uh

1782
01:07:21,839 --> 01:07:23,520
if the

1783
01:07:23,520 --> 01:07:26,160
architecture is you know single party

1784
01:07:26,160 --> 01:07:28,880
all the way to the end

1785
01:07:28,880 --> 01:07:31,359
and this is a much bigger problem of

1786
01:07:31,359 --> 01:07:32,720
course but i think it's the more

1787
01:07:32,720 --> 01:07:34,960
ambitious architecture has some merit we

1788
01:07:34,960 --> 01:07:36,720
ought to think about

1789
01:07:36,720 --> 01:07:38,880
what is the full life cycle is there a

1790
01:07:38,880 --> 01:07:41,200
federation story here

1791
01:07:41,200 --> 01:07:43,760
in addition to dns being federated

1792
01:07:43,760 --> 01:07:45,920
in terms of trust and so on being

1793
01:07:45,920 --> 01:07:48,799
federated as well

1794
01:07:48,799 --> 01:07:49,920
and

1795
01:07:49,920 --> 01:07:51,280
of course i don't think people have

1796
01:07:51,280 --> 01:07:53,440
appetite for these larger architectural

1797
01:07:53,440 --> 01:07:55,119
questions but they

1798
01:07:55,119 --> 01:07:57,839
they come up

1799
01:07:59,520 --> 01:08:00,510
victor um

1800
01:08:00,510 --> 01:08:01,920
[Music]

1801
01:08:01,920 --> 01:08:04,240
paul

1802
01:08:04,630 --> 01:08:07,809
[Music]

1803
01:08:08,799 --> 01:08:12,640
thank you so um this is uh related to

1804
01:08:12,640 --> 01:08:15,039
the architecture draft there's a

1805
01:08:15,039 --> 01:08:17,439
question about scalability you mentioned

1806
01:08:17,439 --> 01:08:18,319
that

1807
01:08:18,319 --> 01:08:21,120
a client identity zone is essential for

1808
01:08:21,120 --> 01:08:22,960
actually authenticating

1809
01:08:22,960 --> 01:08:25,040
but in the event let's say the client

1810
01:08:25,040 --> 01:08:27,198
identity zone goes offline or it's

1811
01:08:27,198 --> 01:08:28,640
unavailable and you're not able to

1812
01:08:28,640 --> 01:08:29,920
authenticate

1813
01:08:29,920 --> 01:08:32,560
i do you look at the possibility of a

1814
01:08:32,560 --> 01:08:34,880
fallback solution uh the intent to

1815
01:08:34,880 --> 01:08:36,640
actually discuss maybe a fallback

1816
01:08:36,640 --> 01:08:41,120
solution in case such events occur

1817
01:08:41,120 --> 01:08:42,319
uh i

1818
01:08:42,319 --> 01:08:44,000
that's that is certainly worthy of

1819
01:08:44,000 --> 01:08:45,920
discussion uh we didn't put that in the

1820
01:08:45,920 --> 01:08:47,439
architecture document for fear that it

1821
01:08:47,439 --> 01:08:49,120
would um

1822
01:08:49,120 --> 01:08:50,839
that could be a whole

1823
01:08:50,839 --> 01:08:53,759
other sort of area of

1824
01:08:53,759 --> 01:08:56,000
uh of study that could be addressed

1825
01:08:56,000 --> 01:08:58,399
maybe by a caching strategy on the

1826
01:08:58,399 --> 01:08:59,920
server side of the tls connection

1827
01:08:59,920 --> 01:09:02,080
whatever application that happens to be

1828
01:09:02,080 --> 01:09:04,319
um

1829
01:09:04,319 --> 01:09:07,040
but it's um you know is if that's worth

1830
01:09:07,040 --> 01:09:08,799
pulling in the architecture document i'm

1831
01:09:08,799 --> 01:09:09,759
happy to

1832
01:09:09,759 --> 01:09:11,040
and getting some discussion around it

1833
01:09:11,040 --> 01:09:11,759
because

1834
01:09:11,759 --> 01:09:14,000
having having a good fallback mode

1835
01:09:14,000 --> 01:09:16,960
uh could be useful

1836
01:09:18,080 --> 01:09:19,839
uh it's definitely an interesting use

1837
01:09:19,839 --> 01:09:20,800
case the um

1838
01:09:20,800 --> 01:09:21,920
[Music]

1839
01:09:21,920 --> 01:09:23,120
uh or

1840
01:09:23,120 --> 01:09:25,279
not use case uh side effect and actually

1841
01:09:25,279 --> 01:09:26,319
putting

1842
01:09:26,319 --> 01:09:29,040
records into the tls client certificate

1843
01:09:29,040 --> 01:09:31,120
actually that was discussed earlier you

1844
01:09:31,120 --> 01:09:32,799
know potentially one way around that

1845
01:09:32,799 --> 01:09:35,040
right if the dns key verification all

1846
01:09:35,040 --> 01:09:36,960
the way to the top for example

1847
01:09:36,960 --> 01:09:39,279
victor

1848
01:09:40,799 --> 01:09:43,920
in terms of scalability and fall back

1849
01:09:43,920 --> 01:09:46,719
it sounds a bit like using dane not for

1850
01:09:46,719 --> 01:09:49,520
every ongoing authentication but for

1851
01:09:49,520 --> 01:09:51,759
enrollment

1852
01:09:51,759 --> 01:09:53,839
so you present your gain credentials

1853
01:09:53,839 --> 01:09:56,800
initially when you first interact with

1854
01:09:56,800 --> 01:09:58,560
some party

1855
01:09:58,560 --> 01:10:01,120
and then in many cases you might obtain

1856
01:10:01,120 --> 01:10:02,560
a

1857
01:10:02,560 --> 01:10:04,480
bilateral credential

1858
01:10:04,480 --> 01:10:08,959
and future interactions don't require

1859
01:10:09,040 --> 01:10:10,719
good point

1860
01:10:10,719 --> 01:10:13,199
all right well i see the queue is empty

1861
01:10:13,199 --> 01:10:14,800
and that's probably good because we're

1862
01:10:14,800 --> 01:10:18,480
right on time to switch to schumann and

1863
01:10:18,480 --> 01:10:20,320
the two existing

1864
01:10:20,320 --> 01:10:23,440
solution documents

1865
01:10:25,040 --> 01:10:26,000
so

1866
01:10:26,000 --> 01:10:28,239
whenever you're ready to present your

1867
01:10:28,239 --> 01:10:30,400
slides ideally using the file sharing

1868
01:10:30,400 --> 01:10:32,239
mechanism over the screen sharing

1869
01:10:32,239 --> 01:10:34,239
mechanism that would be good

1870
01:10:34,239 --> 01:10:36,640
okay so how how do i do that i don't

1871
01:10:36,640 --> 01:10:38,080
think i've

1872
01:10:38,080 --> 01:10:39,920
it's the one to load

1873
01:10:39,920 --> 01:10:41,679
slides is it that one

1874
01:10:41,679 --> 01:10:43,760
it's the pre share

1875
01:10:43,760 --> 01:10:45,679
loaded slides it looks like a file icon

1876
01:10:45,679 --> 01:10:48,640
with a slash through

1877
01:10:48,640 --> 01:10:50,560
a file icon

1878
01:10:50,560 --> 01:10:52,880
oh there's a hand like on which you know

1879
01:10:52,880 --> 01:10:56,440
as yeah

1880
01:11:01,120 --> 01:11:04,320
and forgive me i'm trying to find it uh

1881
01:11:04,320 --> 01:11:06,480
i can share it if you'd rather

1882
01:11:06,480 --> 01:11:08,159
uh yeah actually if you don't mind could

1883
01:11:08,159 --> 01:11:10,559
you do it

1884
01:11:10,840 --> 01:11:14,719
um the name of your use case so let's

1885
01:11:14,719 --> 01:11:17,199
see chair

1886
01:11:18,000 --> 01:11:20,480
client authentication is that it tls

1887
01:11:20,480 --> 01:11:23,599
client authentication yeah

1888
01:11:25,040 --> 01:11:27,520
there you go

1889
01:11:27,520 --> 01:11:30,880
uh all right okay so uh i'm going to do

1890
01:11:30,880 --> 01:11:34,159
a quick overview of uh what we think are

1891
01:11:34,159 --> 01:11:36,239
some of the initial

1892
01:11:36,239 --> 01:11:37,920
uh protocol building blocks for

1893
01:11:37,920 --> 01:11:40,239
implementing the dance architecture and

1894
01:11:40,239 --> 01:11:42,320
the various use cases

1895
01:11:42,320 --> 01:11:44,800
uh that have been discussed now we've

1896
01:11:44,800 --> 01:11:46,000
gone through a little bit of this

1897
01:11:46,000 --> 01:11:48,960
already during the boss sessions

1898
01:11:48,960 --> 01:11:51,760
leading up to this point so some of you

1899
01:11:51,760 --> 01:11:54,159
may have seen bits and pieces of this

1900
01:11:54,159 --> 01:11:55,760
already but now that we finally have a

1901
01:11:55,760 --> 01:11:58,000
working group i think it's useful

1902
01:11:58,000 --> 01:12:00,159
to kind of rehash and refresh everyone

1903
01:12:00,159 --> 01:12:02,080
just to make sure we all have a common

1904
01:12:02,080 --> 01:12:04,560
understanding so

1905
01:12:04,560 --> 01:12:07,280
we have two drafts listed

1906
01:12:07,280 --> 01:12:09,840
the first is about dane

1907
01:12:09,840 --> 01:12:13,120
client authentication and the second

1908
01:12:13,120 --> 01:12:16,880
is about a tls extension to convey

1909
01:12:16,880 --> 01:12:19,199
a client's intent to be authenticated by

1910
01:12:19,199 --> 01:12:21,520
dane and optionally to actually convey

1911
01:12:21,520 --> 01:12:24,239
the full client identity as well

1912
01:12:24,239 --> 01:12:25,280
so

1913
01:12:25,280 --> 01:12:26,960
next slide please

1914
01:12:26,960 --> 01:12:29,199
yes

1915
01:12:31,280 --> 01:12:33,280
the goal is to be able to authenticate

1916
01:12:33,280 --> 01:12:35,920
the client side of a tls connection with

1917
01:12:35,920 --> 01:12:37,199
dane

1918
01:12:37,199 --> 01:12:38,560
today as many

1919
01:12:38,560 --> 01:12:40,480
uh of you may know dane is used

1920
01:12:40,480 --> 01:12:43,600
primarily to authenticate tls servers so

1921
01:12:43,600 --> 01:12:45,920
this mechanism is about extending it to

1922
01:12:45,920 --> 01:12:48,000
do client authentication too

1923
01:12:48,000 --> 01:12:50,239
a little bit about the history these

1924
01:12:50,239 --> 01:12:52,719
drafts were originally written

1925
01:12:52,719 --> 01:12:54,719
um quite a while back in fact we

1926
01:12:54,719 --> 01:12:56,480
presented this work

1927
01:12:56,480 --> 01:12:57,600
uh

1928
01:12:57,600 --> 01:12:59,840
back in ietf 93 that was the summer of

1929
01:12:59,840 --> 01:13:02,159
2015 believe it or not and the dane

1930
01:13:02,159 --> 01:13:04,719
working group which existed at that time

1931
01:13:04,719 --> 01:13:06,320
and there was quite a bit of

1932
01:13:06,320 --> 01:13:08,000
discussion and interest at the time but

1933
01:13:08,000 --> 01:13:10,000
then the dane working group

1934
01:13:10,000 --> 01:13:12,080
shut down because it had finished its

1935
01:13:12,080 --> 01:13:14,239
original charter of work and this item

1936
01:13:14,239 --> 01:13:16,000
wasn't on that charter

1937
01:13:16,000 --> 01:13:18,080
and kind of the authors didn't really

1938
01:13:18,080 --> 01:13:19,760
have the time or energy to continue

1939
01:13:19,760 --> 01:13:21,199
pursuing it but the

1940
01:13:21,199 --> 01:13:23,760
original target use cases at that time

1941
01:13:23,760 --> 01:13:24,719
were

1942
01:13:24,719 --> 01:13:27,520
uh iot device authentication

1943
01:13:27,520 --> 01:13:29,679
and uh and also authenticating clients

1944
01:13:29,679 --> 01:13:31,760
in smtp transport security i think those

1945
01:13:31,760 --> 01:13:33,440
use cases are still valid as you've

1946
01:13:33,440 --> 01:13:34,640
heard today

1947
01:13:34,640 --> 01:13:36,560
and it looks like there are several more

1948
01:13:36,560 --> 01:13:38,800
application areas that may benefit from

1949
01:13:38,800 --> 01:13:43,400
these protocols to the next slide

1950
01:13:46,000 --> 01:13:47,280
a quick

1951
01:13:47,280 --> 01:13:50,400
protocol sketch basically the tls client

1952
01:13:50,400 --> 01:13:52,159
is expected to have

1953
01:13:52,159 --> 01:13:54,800
an identity in the form of a dns domain

1954
01:13:54,800 --> 01:13:56,000
name

1955
01:13:56,000 --> 01:13:57,520
a public and private key pair and a

1956
01:13:57,520 --> 01:13:59,360
certificate binding the public key to

1957
01:13:59,360 --> 01:14:00,719
the domain name

1958
01:14:00,719 --> 01:14:01,600
and

1959
01:14:01,600 --> 01:14:04,159
there is a corresponding dame tlsa

1960
01:14:04,159 --> 01:14:05,840
record

1961
01:14:05,840 --> 01:14:08,640
signed and published in the dns

1962
01:14:08,640 --> 01:14:11,600
the tls server

1963
01:14:11,600 --> 01:14:14,239
sends a certificate request message in

1964
01:14:14,239 --> 01:14:15,600
the handshake

1965
01:14:15,600 --> 01:14:17,440
and the client in its certificate

1966
01:14:17,440 --> 01:14:18,640
message

1967
01:14:18,640 --> 01:14:20,480
uh

1968
01:14:20,480 --> 01:14:22,719
includes a dane client id extension i'll

1969
01:14:22,719 --> 01:14:24,159
describe that extension in the next

1970
01:14:24,159 --> 01:14:25,120
slide

1971
01:14:25,120 --> 01:14:28,080
the tls server then extracts the

1972
01:14:28,080 --> 01:14:30,480
client's identity from the presented

1973
01:14:30,480 --> 01:14:31,920
certificate

1974
01:14:31,920 --> 01:14:34,480
and then obtains the dns tlsa record

1975
01:14:34,480 --> 01:14:36,480
authenticates its signature and

1976
01:14:36,480 --> 01:14:38,159
validates uh

1977
01:14:38,159 --> 01:14:40,239
its sort of record data against the

1978
01:14:40,239 --> 01:14:41,920
certificate or public key in the

1979
01:14:41,920 --> 01:14:44,480
certificate

1980
01:14:44,719 --> 01:14:45,840
uh

1981
01:14:45,840 --> 01:14:48,640
next slide please

1982
01:14:50,080 --> 01:14:53,840
okay so there is also a proposed new tls

1983
01:14:53,840 --> 01:14:56,719
extension for conveying a client stain

1984
01:14:56,719 --> 01:14:58,640
identity so generally speaking the tls

1985
01:14:58,640 --> 01:15:00,159
server

1986
01:15:00,159 --> 01:15:02,480
can find the client name in the client

1987
01:15:02,480 --> 01:15:05,120
certificate itself so why would we need

1988
01:15:05,120 --> 01:15:08,560
this well it has a couple of purposes

1989
01:15:08,560 --> 01:15:11,440
first to signal support for this

1990
01:15:11,440 --> 01:15:13,600
protocol which can be done

1991
01:15:13,600 --> 01:15:16,320
by uh the client just sending an empty

1992
01:15:16,320 --> 01:15:18,159
extension

1993
01:15:18,159 --> 01:15:18,960
so

1994
01:15:18,960 --> 01:15:20,560
technically both the server and client

1995
01:15:20,560 --> 01:15:22,320
could signal this capability

1996
01:15:22,320 --> 01:15:24,560
advertisement it's particularly useful

1997
01:15:24,560 --> 01:15:26,960
though for the client to do this because

1998
01:15:26,960 --> 01:15:28,960
then it can communicate to the server

1999
01:15:28,960 --> 01:15:31,040
that it has a date record

2000
01:15:31,040 --> 01:15:33,840
that it wishes to be authenticated with

2001
01:15:33,840 --> 01:15:35,760
and in environments that may support a

2002
01:15:35,760 --> 01:15:37,360
mixture of clients we can ensure that

2003
01:15:37,360 --> 01:15:39,760
the tls server attempts to do data

2004
01:15:39,760 --> 01:15:41,840
authentication only for the clients that

2005
01:15:41,840 --> 01:15:44,000
are suitably configured to make that

2006
01:15:44,000 --> 01:15:45,840
possible right

2007
01:15:45,840 --> 01:15:47,199
and

2008
01:15:47,199 --> 01:15:48,560
secondly

2009
01:15:48,560 --> 01:15:50,880
this extension can be used to convey the

2010
01:15:50,880 --> 01:15:54,159
actual client's dns identity and maybe

2011
01:15:54,159 --> 01:15:56,480
their domain name in cases where it may

2012
01:15:56,480 --> 01:15:59,760
be required so there's two cases

2013
01:15:59,760 --> 01:16:00,640
where

2014
01:16:00,640 --> 01:16:03,360
it's probably required the first is

2015
01:16:03,360 --> 01:16:05,120
if

2016
01:16:05,120 --> 01:16:07,600
clients are using raw public key

2017
01:16:07,600 --> 01:16:08,960
authentication

2018
01:16:08,960 --> 01:16:11,600
that's rfc 7250 i think

2019
01:16:11,600 --> 01:16:13,679
uh i don't know of anyone that has

2020
01:16:13,679 --> 01:16:15,120
actually implemented that in the field

2021
01:16:15,120 --> 01:16:17,199
today but it's certainly a possibility

2022
01:16:17,199 --> 01:16:19,760
that can be uh supported by the dance

2023
01:16:19,760 --> 01:16:22,640
architecture so in that case there is no

2024
01:16:22,640 --> 01:16:24,239
certificate at all from which the

2025
01:16:24,239 --> 01:16:26,719
client's identity can be extracted so

2026
01:16:26,719 --> 01:16:29,280
the client has to communicate that in

2027
01:16:29,280 --> 01:16:31,199
some manner and this extension can be

2028
01:16:31,199 --> 01:16:34,560
used to do that another case is if the

2029
01:16:34,560 --> 01:16:36,640
client certificate has multiple

2030
01:16:36,640 --> 01:16:39,360
identities in it and we want to be able

2031
01:16:39,360 --> 01:16:41,840
to kind of surgically tell the server

2032
01:16:41,840 --> 01:16:45,520
which specific identity has a dane tlsa

2033
01:16:45,520 --> 01:16:47,280
record associated with it

2034
01:16:47,280 --> 01:16:48,880
to kind of minimize the amount of

2035
01:16:48,880 --> 01:16:50,239
unnecessary

2036
01:16:50,239 --> 01:16:52,640
work the server might otherwise

2037
01:16:52,640 --> 01:16:54,719
have to do to hunt down which of those

2038
01:16:54,719 --> 01:16:58,080
identities has a date record

2039
01:16:59,679 --> 01:17:01,920
so i also want to make a note about the

2040
01:17:01,920 --> 01:17:04,239
privacy implications of this this

2041
01:17:04,239 --> 01:17:05,920
extension which was

2042
01:17:05,920 --> 01:17:07,920
kind of brought up when we originally

2043
01:17:07,920 --> 01:17:10,640
talked about this drafts

2044
01:17:10,640 --> 01:17:12,640
because we are potentially sending the

2045
01:17:12,640 --> 01:17:15,040
client identity in the extension so when

2046
01:17:15,040 --> 01:17:17,040
we first started this work in 2015 we

2047
01:17:17,040 --> 01:17:18,960
didn't really have a good solution

2048
01:17:18,960 --> 01:17:21,120
to privacy protection

2049
01:17:21,120 --> 01:17:23,920
at the time but now we have tls 1.3

2050
01:17:23,920 --> 01:17:26,000
which does address this so in tier in

2051
01:17:26,000 --> 01:17:29,440
the tls 1.3 version of this protocol

2052
01:17:29,440 --> 01:17:32,320
the extension is intended to be carried

2053
01:17:32,320 --> 01:17:34,880
in the certificate request and the

2054
01:17:34,880 --> 01:17:37,520
certificate messages which are both

2055
01:17:37,520 --> 01:17:40,719
encrypted so there's no privacy leakage

2056
01:17:40,719 --> 01:17:42,640
in tls 1.2

2057
01:17:42,640 --> 01:17:45,120
the client has to send this extension in

2058
01:17:45,120 --> 01:17:48,080
the first flight client hello extension

2059
01:17:48,080 --> 01:17:50,640
so this can't be protected today without

2060
01:17:50,640 --> 01:17:52,800
further enhancements to that version of

2061
01:17:52,800 --> 01:17:54,159
the protocol which seems kind of

2062
01:17:54,159 --> 01:17:56,320
unlikely at this point so depending on

2063
01:17:56,320 --> 01:17:57,600
the application

2064
01:17:57,600 --> 01:17:59,600
this privacy leakage may or may not

2065
01:17:59,600 --> 01:18:01,840
matter to you but we advise using tls

2066
01:18:01,840 --> 01:18:06,080
1.3 if if possible

2067
01:18:07,280 --> 01:18:11,000
next slide please

2068
01:18:12,719 --> 01:18:14,719
uh the tls

2069
01:18:14,719 --> 01:18:18,640
say record format for uh client uh

2070
01:18:18,640 --> 01:18:21,199
client authentication

2071
01:18:21,199 --> 01:18:22,800
sort of the record data format is

2072
01:18:22,800 --> 01:18:26,320
exactly the same as defined in rfc 6698

2073
01:18:26,320 --> 01:18:27,679
detain spec

2074
01:18:27,679 --> 01:18:29,520
what's different is the

2075
01:18:29,520 --> 01:18:31,600
record owner name format

2076
01:18:31,600 --> 01:18:33,600
which has to be adapted to something

2077
01:18:33,600 --> 01:18:35,840
more suitable for client names so the

2078
01:18:35,840 --> 01:18:38,239
spec currently proposes

2079
01:18:38,239 --> 01:18:40,880
two formats that we think have wide

2080
01:18:40,880 --> 01:18:42,880
applicability but

2081
01:18:42,880 --> 01:18:45,679
i think we recognize that applications

2082
01:18:45,679 --> 01:18:47,440
could choose something else

2083
01:18:47,440 --> 01:18:49,920
uh if they needed to and the draft is

2084
01:18:49,920 --> 01:18:52,239
trying not to be prescriptive on this

2085
01:18:52,239 --> 01:18:53,440
point

2086
01:18:53,440 --> 01:18:55,199
so the first format is what we're

2087
01:18:55,199 --> 01:18:58,880
calling service specific client identity

2088
01:18:58,880 --> 01:19:00,719
and it allows for the same client to

2089
01:19:00,719 --> 01:19:03,040
have different credentials for different

2090
01:19:03,040 --> 01:19:06,320
services by encoding the service name

2091
01:19:06,320 --> 01:19:08,960
into the first label of the domain name

2092
01:19:08,960 --> 01:19:11,040
and it also accommodates wildcards if

2093
01:19:11,040 --> 01:19:12,719
the client uses a common credential

2094
01:19:12,719 --> 01:19:14,640
across many applications

2095
01:19:14,640 --> 01:19:16,960
so in the original version of the spec

2096
01:19:16,960 --> 01:19:17,679
in

2097
01:19:17,679 --> 01:19:18,640
uh

2098
01:19:18,640 --> 01:19:20,719
going back to 2015 we we had actually

2099
01:19:20,719 --> 01:19:23,040
proposed the use of

2100
01:19:23,040 --> 01:19:25,679
different subject alternative name types

2101
01:19:25,679 --> 01:19:28,239
so there's something called srv name

2102
01:19:28,239 --> 01:19:31,520
which is described in 49.95 which

2103
01:19:31,520 --> 01:19:33,920
supports kind of like a more flexible

2104
01:19:33,920 --> 01:19:34,960
way to

2105
01:19:34,960 --> 01:19:37,440
encode application specific identifiers

2106
01:19:37,440 --> 01:19:38,480
but

2107
01:19:38,480 --> 01:19:40,239
in the end we

2108
01:19:40,239 --> 01:19:42,080
you know kind of assess that nobody

2109
01:19:42,080 --> 01:19:44,080
really uses that in the ecosystem at all

2110
01:19:44,080 --> 01:19:46,560
and we kind of took it out and instead

2111
01:19:46,560 --> 01:19:48,480
now we have this format

2112
01:19:48,480 --> 01:19:51,839
uh next slide please

2113
01:19:53,679 --> 01:19:55,360
the second format is what we're calling

2114
01:19:55,360 --> 01:19:56,719
iot

2115
01:19:56,719 --> 01:20:00,000
device identity and proposes

2116
01:20:00,000 --> 01:20:02,239
organizing iod device names under a

2117
01:20:02,239 --> 01:20:04,880
common suffix using what we call

2118
01:20:04,880 --> 01:20:08,080
a an identity grouping label so that's

2119
01:20:08,080 --> 01:20:10,159
underscore device that you can see in

2120
01:20:10,159 --> 01:20:12,239
the second label in this example

2121
01:20:12,239 --> 01:20:14,400
and this scheme permits an organization

2122
01:20:14,400 --> 01:20:16,159
if they wanted to to delegate the

2123
01:20:16,159 --> 01:20:18,719
management of the client device stream

2124
01:20:18,719 --> 01:20:20,639
to a third party that could offer you

2125
01:20:20,639 --> 01:20:22,800
know dns signing services and

2126
01:20:22,800 --> 01:20:24,719
maintenance if they wanted to

2127
01:20:24,719 --> 01:20:27,280
so to the left of the underscore device

2128
01:20:27,280 --> 01:20:28,400
label

2129
01:20:28,400 --> 01:20:30,239
uh is the device name which could be

2130
01:20:30,239 --> 01:20:32,320
composed of a number of labels and to

2131
01:20:32,320 --> 01:20:34,639
the right is the organizational name

2132
01:20:34,639 --> 01:20:36,400
which may include other labels within

2133
01:20:36,400 --> 01:20:38,800
the organization not just the uh

2134
01:20:38,800 --> 01:20:40,480
kind of top-level zone of the

2135
01:20:40,480 --> 01:20:43,120
organization

2136
01:20:43,120 --> 01:20:44,639
and uh

2137
01:20:44,639 --> 01:20:46,060
next slide please

2138
01:20:46,060 --> 01:20:49,139
[Music]

2139
01:20:49,360 --> 01:20:51,600
and here's a kind of just a made up

2140
01:20:51,600 --> 01:20:53,840
example of what what an iot client date

2141
01:20:53,840 --> 01:20:54,719
record

2142
01:20:54,719 --> 01:20:56,159
might look like and this is straight

2143
01:20:56,159 --> 01:20:58,480
from the draft and let's just move on to

2144
01:20:58,480 --> 01:20:59,880
the next slide

2145
01:20:59,880 --> 01:21:02,000
[Music]

2146
01:21:02,000 --> 01:21:03,760
and here's a general diagram of the

2147
01:21:03,760 --> 01:21:06,080
protocol protocol flow it's just some

2148
01:21:06,080 --> 01:21:09,199
minor enhancements to the typical tls

2149
01:21:09,199 --> 01:21:10,080
client

2150
01:21:10,080 --> 01:21:12,080
certificate authentication flow so i've

2151
01:21:12,080 --> 01:21:14,960
just pointed out the main deltas in red

2152
01:21:14,960 --> 01:21:15,920
here

2153
01:21:15,920 --> 01:21:19,199
namely that the uh

2154
01:21:19,199 --> 01:21:21,840
dane client id extension is sent along

2155
01:21:21,840 --> 01:21:23,520
with the client certificate

2156
01:21:23,520 --> 01:21:25,440
from the client to the server and that

2157
01:21:25,440 --> 01:21:28,800
the tls server needs to perform a lookup

2158
01:21:28,800 --> 01:21:30,880
of the client state and tlsa record and

2159
01:21:30,880 --> 01:21:32,400
validate the client's certificate of

2160
01:21:32,400 --> 01:21:33,679
public key

2161
01:21:33,679 --> 01:21:35,520
against the contents of that

2162
01:21:35,520 --> 01:21:38,239
authenticated record

2163
01:21:38,239 --> 01:21:40,959
and next slide

2164
01:21:41,520 --> 01:21:45,040
uh i've also tried to annotate the tls

2165
01:21:45,040 --> 01:21:48,480
1.3 handshake message flow with the new

2166
01:21:48,480 --> 01:21:50,320
protocol elements

2167
01:21:50,320 --> 01:21:52,080
uh this should be fairly

2168
01:21:52,080 --> 01:21:54,159
self-explanatory to folks familiar with

2169
01:21:54,159 --> 01:21:56,400
the tls protocol

2170
01:21:56,400 --> 01:21:58,159
but uh

2171
01:21:58,159 --> 01:22:00,560
so this is this slide is the vanilla tls

2172
01:22:00,560 --> 01:22:02,719
1.3 handshake so let's move on to the

2173
01:22:02,719 --> 01:22:04,639
next slide

2174
01:22:04,639 --> 01:22:07,840
and uh in red so this part is optional

2175
01:22:07,840 --> 01:22:09,920
so originally this wasn't in the spec we

2176
01:22:09,920 --> 01:22:11,520
only had it was kind of a one-way

2177
01:22:11,520 --> 01:22:13,360
extension from the client but

2178
01:22:13,360 --> 01:22:15,840
some people argued to me that it may be

2179
01:22:15,840 --> 01:22:18,560
useful for the tls server to advertise

2180
01:22:18,560 --> 01:22:20,639
that they support this capability so

2181
01:22:20,639 --> 01:22:21,920
that can be done

2182
01:22:21,920 --> 01:22:24,800
by optionally sending the client an

2183
01:22:24,800 --> 01:22:27,280
empty client id extension

2184
01:22:27,280 --> 01:22:29,440
in the certificate request message from

2185
01:22:29,440 --> 01:22:31,120
the server

2186
01:22:31,120 --> 01:22:34,000
uh next slide

2187
01:22:34,480 --> 01:22:35,280
and

2188
01:22:35,280 --> 01:22:37,199
then the client

2189
01:22:37,199 --> 01:22:39,520
in its certificate message

2190
01:22:39,520 --> 01:22:42,560
includes the dane client id extension so

2191
01:22:42,560 --> 01:22:45,679
that can be an empty extension to convey

2192
01:22:45,679 --> 01:22:48,000
the client's intent to be authenticated

2193
01:22:48,000 --> 01:22:49,679
via dane

2194
01:22:49,679 --> 01:22:51,520
in that case the

2195
01:22:51,520 --> 01:22:53,520
server needs to extract the client

2196
01:22:53,520 --> 01:22:56,080
identity from the certificate

2197
01:22:56,080 --> 01:22:58,719
and also it could be used to convey the

2198
01:22:58,719 --> 01:23:00,159
client's name

2199
01:23:00,159 --> 01:23:02,719
as well which as i mentioned previously

2200
01:23:02,719 --> 01:23:04,960
is required in certain use cases for

2201
01:23:04,960 --> 01:23:07,280
example if you're using wall public key

2202
01:23:07,280 --> 01:23:08,719
authentication

2203
01:23:08,719 --> 01:23:11,440
and next slide

2204
01:23:12,320 --> 01:23:14,480
and lastly

2205
01:23:14,480 --> 01:23:17,600
what the tls server then has to do is

2206
01:23:17,600 --> 01:23:19,120
get the client's identity look up the

2207
01:23:19,120 --> 01:23:21,679
tlsa are set authenticated and match it

2208
01:23:21,679 --> 01:23:23,040
against the client certificate of public

2209
01:23:23,040 --> 01:23:23,920
key

2210
01:23:23,920 --> 01:23:25,679
so

2211
01:23:25,679 --> 01:23:28,400
in the draft is currently

2212
01:23:28,400 --> 01:23:30,960
written requires the tls server

2213
01:23:30,960 --> 01:23:33,679
to do this in band in in the tls

2214
01:23:33,679 --> 01:23:35,120
handshake but

2215
01:23:35,120 --> 01:23:37,840
as has already been mentioned

2216
01:23:37,840 --> 01:23:40,239
today in previous conversation

2217
01:23:40,239 --> 01:23:42,800
that's not the only possibility

2218
01:23:42,800 --> 01:23:45,040
we could envision

2219
01:23:45,040 --> 01:23:49,360
the client kind of uh conveying

2220
01:23:49,360 --> 01:23:50,880
building its full

2221
01:23:50,880 --> 01:23:53,120
day and authentication chain and sending

2222
01:23:53,120 --> 01:23:55,520
it along

2223
01:23:55,520 --> 01:23:59,120
in a tls extension to the server the

2224
01:23:59,120 --> 01:24:01,520
reason we hadn't originally put that in

2225
01:24:01,520 --> 01:24:04,480
the draft is we were

2226
01:24:04,480 --> 01:24:06,639
concerned that one of the

2227
01:24:06,639 --> 01:24:08,880
prominent use cases for this protocol

2228
01:24:08,880 --> 01:24:11,199
was iot devices

2229
01:24:11,199 --> 01:24:13,520
which could potentially be constrained

2230
01:24:13,520 --> 01:24:16,480
and that may be too high of complexity

2231
01:24:16,480 --> 01:24:18,639
and implementation bar for them

2232
01:24:18,639 --> 01:24:20,080
but you know since we're discussing it

2233
01:24:20,080 --> 01:24:21,520
we can certainly have a debate about

2234
01:24:21,520 --> 01:24:22,719
whether or not

2235
01:24:22,719 --> 01:24:24,480
uh that uh

2236
01:24:24,480 --> 01:24:26,719
enhancement uh whether it's optional or

2237
01:24:26,719 --> 01:24:28,719
not should go into

2238
01:24:28,719 --> 01:24:31,679
into this protocol

2239
01:24:31,679 --> 01:24:33,520
and uh next slide please

2240
01:24:33,520 --> 01:24:35,280
uh yeah okay so i'll stop here for a

2241
01:24:35,280 --> 01:24:37,120
discussion uh one parting question

2242
01:24:37,120 --> 01:24:38,400
before that to the chairs and the

2243
01:24:38,400 --> 01:24:40,639
working group generally though is

2244
01:24:40,639 --> 01:24:42,639
are these drafts suitable as protocol

2245
01:24:42,639 --> 01:24:46,159
building blocks for dance and if so uh

2246
01:24:46,159 --> 01:24:48,000
you know uh

2247
01:24:48,000 --> 01:24:49,600
when should we

2248
01:24:49,600 --> 01:24:52,560
you know talk about adopting

2249
01:24:52,560 --> 01:24:55,760
uh so i'll see the the question with one

2250
01:24:55,760 --> 01:24:56,960
question that kind of came up in the

2251
01:24:56,960 --> 01:24:58,400
chat which is

2252
01:24:58,400 --> 01:25:00,960
uh that device identities are

2253
01:25:00,960 --> 01:25:03,679
potentially privacy leaking and should

2254
01:25:03,679 --> 01:25:06,159
we consider doing this only for tls 1.3

2255
01:25:06,159 --> 01:25:08,080
and ignoring 1.2 do you have thoughts on

2256
01:25:08,080 --> 01:25:09,360
that

2257
01:25:09,360 --> 01:25:12,080
uh yeah so i mean i was when we were

2258
01:25:12,080 --> 01:25:15,760
originally uh doing this work tls 1.3

2259
01:25:15,760 --> 01:25:17,440
didn't exist right so we had to kind of

2260
01:25:17,440 --> 01:25:19,199
support it until s 1.2 and i had to

2261
01:25:19,199 --> 01:25:21,199
grapple with the with the uh with the

2262
01:25:21,199 --> 01:25:23,440
privacy question uh a little bit harder

2263
01:25:23,440 --> 01:25:25,600
now that we have tls 1.3

2264
01:25:25,600 --> 01:25:27,840
i guess it depends on

2265
01:25:27,840 --> 01:25:30,159
uh you know the use case and what kind

2266
01:25:30,159 --> 01:25:33,040
of uh deployed field of

2267
01:25:33,040 --> 01:25:35,199
of client devices we're dealing with

2268
01:25:35,199 --> 01:25:37,199
right so if it's the case

2269
01:25:37,199 --> 01:25:39,360
that it's like green field applications

2270
01:25:39,360 --> 01:25:42,880
where tls 1.3 is omnipresent then yeah i

2271
01:25:42,880 --> 01:25:45,199
think we could easily do that but

2272
01:25:45,199 --> 01:25:47,199
it may not be the case in certain

2273
01:25:47,199 --> 01:25:48,960
environments right so i think

2274
01:25:48,960 --> 01:25:50,560
that question i don't know the answer

2275
01:25:50,560 --> 01:25:51,920
that question i think you would need

2276
01:25:51,920 --> 01:25:52,880
some

2277
01:25:52,880 --> 01:25:56,000
uh some research to see you know

2278
01:25:56,000 --> 01:25:57,440
which sort of environments we're trying

2279
01:25:57,440 --> 01:25:59,600
to apply these solutions to

2280
01:25:59,600 --> 01:26:02,239
okay uh dkg i suspect you're in line

2281
01:26:02,239 --> 01:26:04,159
specifically because of that

2282
01:26:04,159 --> 01:26:05,760
uh no i actually had a question about

2283
01:26:05,760 --> 01:26:06,840
the

2284
01:26:06,840 --> 01:26:09,840
tls arrangement can you go back to the

2285
01:26:09,840 --> 01:26:12,000
slide that have the tls

2286
01:26:12,000 --> 01:26:14,400
diagram

2287
01:26:15,679 --> 01:26:17,520
yeah um

2288
01:26:17,520 --> 01:26:18,560
so

2289
01:26:18,560 --> 01:26:19,360
uh

2290
01:26:19,360 --> 01:26:21,120
i might be fuzzy it's early in the

2291
01:26:21,120 --> 01:26:24,159
morning than the times that i'm in um

2292
01:26:24,159 --> 01:26:25,360
but

2293
01:26:25,360 --> 01:26:27,360
i seem to recall that with tls the

2294
01:26:27,360 --> 01:26:29,040
client has to offer the extension before

2295
01:26:29,040 --> 01:26:31,040
the server responds with it so are we

2296
01:26:31,040 --> 01:26:32,320
saying that the client hello would be

2297
01:26:32,320 --> 01:26:34,639
marked with the client id the dane

2298
01:26:34,639 --> 01:26:37,199
client id as well

2299
01:26:37,199 --> 01:26:39,199
it's a request response

2300
01:26:39,199 --> 01:26:40,719
arrangement and i don't see it in the

2301
01:26:40,719 --> 01:26:42,880
first flight from the client

2302
01:26:42,880 --> 01:26:44,080
it's not in the first flight from the

2303
01:26:44,080 --> 01:26:45,679
client right so that wasn't the original

2304
01:26:45,679 --> 01:26:47,440
version of the spec

2305
01:26:47,440 --> 01:26:49,920
when tls 1.3

2306
01:26:49,920 --> 01:26:51,520
wasn't around

2307
01:26:51,520 --> 01:26:53,679
so uh the no i'm not remove the

2308
01:26:53,679 --> 01:26:56,639
certificate i'm saying the the extension

2309
01:26:56,639 --> 01:26:58,239
because i believe extensions are our

2310
01:26:58,239 --> 01:26:59,920
request response

2311
01:26:59,920 --> 01:27:01,760
so if the client doesn't offer the

2312
01:27:01,760 --> 01:27:02,960
client id

2313
01:27:02,960 --> 01:27:05,199
extension then the server can't respond

2314
01:27:05,199 --> 01:27:06,719
with it that that is

2315
01:27:06,719 --> 01:27:09,040
just the flag that says i do want to do

2316
01:27:09,040 --> 01:27:12,000
dane client id

2317
01:27:13,840 --> 01:27:15,520
yeah i'm a little fuzzy about that i

2318
01:27:15,520 --> 01:27:17,280
don't see why uh

2319
01:27:17,280 --> 01:27:18,800
i'm not aware of that requirement so

2320
01:27:18,800 --> 01:27:20,639
maybe someone can

2321
01:27:20,639 --> 01:27:23,280
uh can elaborate on that restriction a

2322
01:27:23,280 --> 01:27:24,480
little bit more

2323
01:27:24,480 --> 01:27:27,120
yeah so in this case i mean

2324
01:27:27,120 --> 01:27:29,040
so

2325
01:27:29,040 --> 01:27:30,560
so that's just just a wrinkle that's

2326
01:27:30,560 --> 01:27:31,840
worth thinking about the second thing

2327
01:27:31,840 --> 01:27:33,520
that when i'm looking at this

2328
01:27:33,520 --> 01:27:35,120
um

2329
01:27:35,120 --> 01:27:37,840
it occurs to me that uh

2330
01:27:37,840 --> 01:27:39,199
if this is being done in a situation

2331
01:27:39,199 --> 01:27:40,560
where you basically

2332
01:27:40,560 --> 01:27:42,880
already know your peer

2333
01:27:42,880 --> 01:27:44,239
then you have some out of like you have

2334
01:27:44,239 --> 01:27:46,080
no other way to authenticate yourself

2335
01:27:46,080 --> 01:27:48,719
besides this client search

2336
01:27:48,719 --> 01:27:50,960
you could there's no necessary reason

2337
01:27:50,960 --> 01:27:53,520
for an extension for this at all

2338
01:27:53,520 --> 01:27:55,840
um in fact you've already identified

2339
01:27:55,840 --> 01:27:58,560
that the server is who they say they are

2340
01:27:58,560 --> 01:28:00,239
and if you know that this client

2341
01:28:00,239 --> 01:28:02,800
identity is visible you can just

2342
01:28:02,800 --> 01:28:04,239
stuff the information into the

2343
01:28:04,239 --> 01:28:05,679
certificate

2344
01:28:05,679 --> 01:28:07,120
um

2345
01:28:07,120 --> 01:28:07,920
and

2346
01:28:07,920 --> 01:28:09,360
let the server figure it out i'm not

2347
01:28:09,360 --> 01:28:12,159
even sure that we need a tls extension

2348
01:28:12,159 --> 01:28:15,040
for that if

2349
01:28:16,960 --> 01:28:20,719
a phony x 509 certificate

2350
01:28:22,719 --> 01:28:24,880
uh you know with especially

2351
01:28:24,880 --> 01:28:26,960
you know market in some way then you can

2352
01:28:26,960 --> 01:28:28,719
let the server take it or not take it

2353
01:28:28,719 --> 01:28:30,719
and and that's how it is you might not

2354
01:28:30,719 --> 01:28:34,480
need the the tls extension at all yeah

2355
01:28:34,480 --> 01:28:37,360
so yeah so daniel i i agree there are so

2356
01:28:37,360 --> 01:28:38,719
there are many situations where you may

2357
01:28:38,719 --> 01:28:40,639
need not need this at all

2358
01:28:40,639 --> 01:28:44,159
so uh there are uh uh situations where

2359
01:28:44,159 --> 01:28:45,760
you might know right if you have a like

2360
01:28:45,760 --> 01:28:48,159
a kind of like a mixed mode

2361
01:28:48,159 --> 01:28:51,520
uh field of uh uh tls clients and some

2362
01:28:51,520 --> 01:28:52,560
of them

2363
01:28:52,560 --> 01:28:55,520
uh can do uh dane authentication some of

2364
01:28:55,520 --> 01:28:58,000
them can't you want a signal from the

2365
01:28:58,000 --> 01:29:01,199
tls client to the server that i have

2366
01:29:01,199 --> 01:29:02,960
you know please authenticate me be a

2367
01:29:02,960 --> 01:29:04,400
dane otherwise

2368
01:29:04,400 --> 01:29:05,840
the situation you're going to run into

2369
01:29:05,840 --> 01:29:08,880
the tls server may be needlessly trying

2370
01:29:08,880 --> 01:29:12,000
to do all these dane look ups in band

2371
01:29:12,000 --> 01:29:14,880
with the tls handshake for many clients

2372
01:29:14,880 --> 01:29:17,199
that have no dane record and it's doing

2373
01:29:17,199 --> 01:29:18,960
useless work right so this is cool right

2374
01:29:18,960 --> 01:29:19,760
so

2375
01:29:19,760 --> 01:29:21,760
optimization to make sure the client is

2376
01:29:21,760 --> 01:29:24,320
not server is not being compelled to do

2377
01:29:24,320 --> 01:29:25,840
unnecessary work

2378
01:29:25,840 --> 01:29:27,440
so i think you actually need the signal

2379
01:29:27,440 --> 01:29:29,360
in the opposite scenario

2380
01:29:29,360 --> 01:29:30,800
in the scenario that you're describing

2381
01:29:30,800 --> 01:29:33,040
we don't need a tls extension signal we

2382
01:29:33,040 --> 01:29:34,320
just need the certificate to be

2383
01:29:34,320 --> 01:29:36,400
identifiable as a day insert versus not

2384
01:29:36,400 --> 01:29:38,560
a danger fair enough yeah that's another

2385
01:29:38,560 --> 01:29:40,560
way to do it if if the certificate

2386
01:29:40,560 --> 01:29:43,280
contains some sort of attribute that

2387
01:29:43,280 --> 01:29:45,760
uh tells the server that it's uh it has

2388
01:29:45,760 --> 01:29:47,120
a dane record that would be another way

2389
01:29:47,120 --> 01:29:48,880
of doing it so i i think that's worthy

2390
01:29:48,880 --> 01:29:51,360
of discussion yeah yeah and

2391
01:29:51,360 --> 01:29:53,280
there is the opposite scenario where you

2392
01:29:53,280 --> 01:29:54,080
have

2393
01:29:54,080 --> 01:29:56,159
a client that is connecting to servers

2394
01:29:56,159 --> 01:29:57,679
and the client has multiple ways to

2395
01:29:57,679 --> 01:29:59,440
authenticate and needs to decide which

2396
01:29:59,440 --> 01:30:01,440
way to use that's where you would need

2397
01:30:01,440 --> 01:30:03,600
the tls extension so that the server can

2398
01:30:03,600 --> 01:30:05,520
signal which type of identity the client

2399
01:30:05,520 --> 01:30:07,920
should use if we're talking iot that

2400
01:30:07,920 --> 01:30:09,440
seems like pretty unlikely right these

2401
01:30:09,440 --> 01:30:10,960
devices are going to have one identity

2402
01:30:10,960 --> 01:30:13,440
to offer correct correct correct yeah so

2403
01:30:13,440 --> 01:30:15,280
i mean that so that second point is

2404
01:30:15,280 --> 01:30:17,440
already satisfied by the server

2405
01:30:17,440 --> 01:30:20,000
optionally providing that extension so

2406
01:30:20,000 --> 01:30:21,600
so maybe it should always provide that

2407
01:30:21,600 --> 01:30:24,639
extension if it knows it supports stain

2408
01:30:24,639 --> 01:30:27,600
client authentication

2409
01:30:45,840 --> 01:30:47,040
i'm hearing a little bit of an echo

2410
01:30:47,040 --> 01:30:48,800
should i view myself or it's not going

2411
01:30:48,800 --> 01:30:50,880
to reverb here yeah so we were just

2412
01:30:50,880 --> 01:30:53,040
talking about the you know

2413
01:30:53,040 --> 01:30:56,639
can we go to tls 1-3 only and your

2414
01:30:56,639 --> 01:30:58,880
observation was well we might be able to

2415
01:30:58,880 --> 01:31:01,040
but we need to check the kind of the use

2416
01:31:01,040 --> 01:31:02,639
cases and the user population of the

2417
01:31:02,639 --> 01:31:04,639
devices that confused me a little bit

2418
01:31:04,639 --> 01:31:06,480
because i thought we were talking about

2419
01:31:06,480 --> 01:31:08,800
a green field deployment so

2420
01:31:08,800 --> 01:31:10,920
you know regardless of whether i'm using

2421
01:31:10,920 --> 01:31:12,960
tls1213 i'm going to have to update my

2422
01:31:12,960 --> 01:31:15,600
stack here with this extra dane kind of

2423
01:31:15,600 --> 01:31:17,520
and logic and so

2424
01:31:17,520 --> 01:31:18,560
you know are we saying we have

2425
01:31:18,560 --> 01:31:21,040
circumstances where we can update the

2426
01:31:21,040 --> 01:31:23,840
code to do a slightly better or fancier

2427
01:31:23,840 --> 01:31:26,000
tls one two processing but there are

2428
01:31:26,000 --> 01:31:28,159
certain clients where you know while we

2429
01:31:28,159 --> 01:31:29,840
can make that change we can't make the

2430
01:31:29,840 --> 01:31:33,120
stack upgrade to 1.3

2431
01:31:33,120 --> 01:31:35,040
yeah so that i don't know you may very

2432
01:31:35,040 --> 01:31:37,280
well be right roman so i was envisioning

2433
01:31:37,280 --> 01:31:38,880
a situation where

2434
01:31:38,880 --> 01:31:40,880
you're right stats have to be upgraded

2435
01:31:40,880 --> 01:31:44,560
uh regardless to use this mechanism but

2436
01:31:44,560 --> 01:31:47,120
it may you know there may be situations

2437
01:31:47,120 --> 01:31:49,199
i was imagining i could be wrong where

2438
01:31:49,199 --> 01:31:50,960
it's easier to just

2439
01:31:50,960 --> 01:31:54,239
enhance the tls 1.2 stacks to do this

2440
01:31:54,239 --> 01:31:57,040
rather than upgrading whole hog

2441
01:31:57,040 --> 01:32:00,000
everyone to tls 1.3 first i could be

2442
01:32:00,000 --> 01:32:01,520
wrong about that maybe

2443
01:32:01,520 --> 01:32:03,360
maybe that's not a concern and we're

2444
01:32:03,360 --> 01:32:07,040
looking more at greenfield tls 1.3

2445
01:32:07,040 --> 01:32:09,679
deployments

2446
01:32:10,480 --> 01:32:13,480
ben

2447
01:32:14,480 --> 01:32:16,000
hi hi

2448
01:32:16,000 --> 01:32:17,679
i i

2449
01:32:17,679 --> 01:32:20,400
i'm getting echo too

2450
01:32:20,400 --> 01:32:22,719
um

2451
01:32:23,199 --> 01:32:24,000
so

2452
01:32:24,000 --> 01:32:27,520
you mentioned the question of whether

2453
01:32:27,520 --> 01:32:29,360
sending an entire chain would be a

2454
01:32:29,360 --> 01:32:32,080
significant burden on iot devices

2455
01:32:32,080 --> 01:32:34,000
i want to argue that it's not a

2456
01:32:34,000 --> 01:32:35,760
significant burden that from the

2457
01:32:35,760 --> 01:32:38,080
perspective of an iot device

2458
01:32:38,080 --> 01:32:42,000
it the entire chain is a static block of

2459
01:32:42,000 --> 01:32:43,520
opaque data

2460
01:32:43,520 --> 01:32:45,120
it doesn't need to know anything about

2461
01:32:45,120 --> 01:32:47,280
it it doesn't need to look at it uh it

2462
01:32:47,280 --> 01:32:49,840
just would need to ship it in the

2463
01:32:49,840 --> 01:32:52,719
in the handshake or in a lot alongside

2464
01:32:52,719 --> 01:32:55,840
the certificate message

2465
01:32:56,239 --> 01:32:57,360
because

2466
01:32:57,360 --> 01:33:00,800
this block of data only changes when uh

2467
01:33:00,800 --> 01:33:03,520
at most as frequently as

2468
01:33:03,520 --> 01:33:06,880
when the certificate itself

2469
01:33:06,880 --> 01:33:08,960
has to change

2470
01:33:08,960 --> 01:33:12,320
so ben i think uh there's a little bit

2471
01:33:12,320 --> 01:33:14,400
more subtlety here it has to change more

2472
01:33:14,400 --> 01:33:17,600
frequently than that it has to change

2473
01:33:17,600 --> 01:33:18,880
uh

2474
01:33:18,880 --> 01:33:20,960
as uh

2475
01:33:20,960 --> 01:33:24,800
ttls and rs things on the time scale of

2476
01:33:24,800 --> 01:33:26,880
of of those things in the chain right

2477
01:33:26,880 --> 01:33:28,639
it's a full chain

2478
01:33:28,639 --> 01:33:31,840
so it's not just the tlsa record

2479
01:33:31,840 --> 01:33:34,639
in the um in the leaf zone but it's all

2480
01:33:34,639 --> 01:33:37,360
the records above it too

2481
01:33:37,360 --> 01:33:39,599
uh

2482
01:33:40,480 --> 01:33:41,280
okay

2483
01:33:41,280 --> 01:33:42,880
that's um

2484
01:33:42,880 --> 01:33:44,639
so it has to be i mean not that it's not

2485
01:33:44,639 --> 01:33:46,880
doable but i mean something has to like

2486
01:33:46,880 --> 01:33:49,280
periodically regenerate the claim the

2487
01:33:49,280 --> 01:33:51,280
chain for the client right either the

2488
01:33:51,280 --> 01:33:53,280
client is doing it itself

2489
01:33:53,280 --> 01:33:55,760
which may or may not be a computational

2490
01:33:55,760 --> 01:33:58,480
burden for them or some out of band

2491
01:33:58,480 --> 01:34:01,360
thing is doing it for them

2492
01:34:01,360 --> 01:34:02,239
uh

2493
01:34:02,239 --> 01:34:04,639
yeah okay i see i see your point here

2494
01:34:04,639 --> 01:34:06,800
you can actually rotate the the in the

2495
01:34:06,800 --> 01:34:08,560
sense the intermediate

2496
01:34:08,560 --> 01:34:10,560
keys more frequently than you rotate the

2497
01:34:10,560 --> 01:34:12,320
leaf keys that seems a little weird but

2498
01:34:12,320 --> 01:34:14,080
but you can do that and then yeah i mean

2499
01:34:14,080 --> 01:34:15,760
in theory you have to be prepared for

2500
01:34:15,760 --> 01:34:17,360
the possibility that could it could

2501
01:34:17,360 --> 01:34:19,920
happen right which means you want to

2502
01:34:19,920 --> 01:34:23,199
be able to always ship a reasonably uh

2503
01:34:23,199 --> 01:34:24,719
fresh um

2504
01:34:24,719 --> 01:34:26,719
tls chain always right to prevent those

2505
01:34:26,719 --> 01:34:28,239
kind of problems

2506
01:34:28,239 --> 01:34:30,239
okay that's interesting

2507
01:34:30,239 --> 01:34:32,400
typically the upper tree is longer

2508
01:34:32,400 --> 01:34:34,320
longer signatures but yeah i agree

2509
01:34:34,320 --> 01:34:36,480
typically typically longer it may not be

2510
01:34:36,480 --> 01:34:38,639
an issue but uh it's like there's no

2511
01:34:38,639 --> 01:34:40,400
guarantee of that in the general things

2512
01:34:40,400 --> 01:34:42,080
i think

2513
01:34:42,080 --> 01:34:44,400
okay uh thanks for helping me understand

2514
01:34:44,400 --> 01:34:45,199
that

2515
01:34:45,199 --> 01:34:49,280
uh any my my view here is that um

2516
01:34:49,280 --> 01:34:50,480
is that

2517
01:34:50,480 --> 01:34:53,440
we want shipping a chain to be something

2518
01:34:53,440 --> 01:34:55,920
that servers can require

2519
01:34:55,920 --> 01:34:57,920
essentially a profile

2520
01:34:57,920 --> 01:34:59,199
of

2521
01:34:59,199 --> 01:35:01,600
of this whole system

2522
01:35:01,600 --> 01:35:02,960
um

2523
01:35:02,960 --> 01:35:04,239
so

2524
01:35:04,239 --> 01:35:06,000
that uh i don't think it has to be

2525
01:35:06,000 --> 01:35:08,880
mandatory uh but i think servers should

2526
01:35:08,880 --> 01:35:11,280
essentially be able to mandate it for

2527
01:35:11,280 --> 01:35:13,280
some population of clients that they

2528
01:35:13,280 --> 01:35:15,840
work with

2529
01:35:16,800 --> 01:35:19,040
okay yeah i think i think that's that's

2530
01:35:19,040 --> 01:35:23,040
a reasonable thing to suggest

2531
01:35:23,520 --> 01:35:27,040
uh victor and if i could um

2532
01:35:27,040 --> 01:35:28,560
beg you to give an explanation at the

2533
01:35:28,560 --> 01:35:31,760
same time of the difference between

2534
01:35:31,760 --> 01:35:33,119
tlsa

2535
01:35:33,119 --> 01:35:35,679
expiry versus signature versus expiry

2536
01:35:35,679 --> 01:35:36,960
because there's discussion in the chat

2537
01:35:36,960 --> 01:35:38,320
and so i think we might actually clear

2538
01:35:38,320 --> 01:35:39,760
up some of the chat discussion if you

2539
01:35:39,760 --> 01:35:42,400
want to go over that

2540
01:35:44,719 --> 01:35:47,440
uh so to uh clear that up

2541
01:35:47,440 --> 01:35:48,560
uh

2542
01:35:48,560 --> 01:35:51,040
yes the client needs to actually if it's

2543
01:35:51,040 --> 01:35:52,400
gonna send the change it would need to

2544
01:35:52,400 --> 01:35:53,600
regenerate

2545
01:35:53,600 --> 01:35:54,800
frequently

2546
01:35:54,800 --> 01:35:56,320
because one of the most essential

2547
01:35:56,320 --> 01:35:58,320
elements in that chain

2548
01:35:58,320 --> 01:36:01,600
is the rrsig over the client's tlsa

2549
01:36:01,600 --> 01:36:02,719
records

2550
01:36:02,719 --> 01:36:05,360
and while the client's public key may be

2551
01:36:05,360 --> 01:36:06,960
stable for

2552
01:36:06,960 --> 01:36:09,600
days weeks months years

2553
01:36:09,600 --> 01:36:13,040
the rsig over that key

2554
01:36:13,040 --> 01:36:15,119
from the signing zone

2555
01:36:15,119 --> 01:36:17,760
should really only have validity at most

2556
01:36:17,760 --> 01:36:20,960
a couple of weeks maybe a month

2557
01:36:20,960 --> 01:36:23,600
and so the client would need

2558
01:36:23,600 --> 01:36:26,880
to refresh that data from time to time

2559
01:36:26,880 --> 01:36:28,880
needed to be on every exchange but it

2560
01:36:28,880 --> 01:36:30,800
would need to do it

2561
01:36:30,800 --> 01:36:33,119
periodically and well in advance of the

2562
01:36:33,119 --> 01:36:34,639
expiration

2563
01:36:34,639 --> 01:36:36,960
of the resource record signatures on

2564
01:36:36,960 --> 01:36:39,280
this data that it obtains

2565
01:36:39,280 --> 01:36:41,679
at some point and needs to again

2566
01:36:41,679 --> 01:36:43,600
have a fresh copy of

2567
01:36:43,600 --> 01:36:46,880
uh every uh realistically every few

2568
01:36:46,880 --> 01:36:48,880
hours uh

2569
01:36:48,880 --> 01:36:49,920
i signed

2570
01:36:49,920 --> 01:36:53,840
records for one hour uh the um

2571
01:36:53,840 --> 01:36:56,719
i don't know if that's enough uh but uh

2572
01:36:56,719 --> 01:36:58,000
yeah just a

2573
01:36:58,000 --> 01:37:00,719
scholarship element of this of this data

2574
01:37:00,719 --> 01:37:02,800
the rest is fairly stable

2575
01:37:02,800 --> 01:37:05,119
yeah so just to elaborate on that point

2576
01:37:05,119 --> 01:37:07,760
uh victor it's if even if nothing else

2577
01:37:07,760 --> 01:37:08,800
changes

2578
01:37:08,800 --> 01:37:12,080
the rrsig's inception and expiration

2579
01:37:12,080 --> 01:37:14,080
parameters will change right those will

2580
01:37:14,080 --> 01:37:16,159
gradually change and those are part of

2581
01:37:16,159 --> 01:37:17,600
the

2582
01:37:17,600 --> 01:37:19,440
data over which the

2583
01:37:19,440 --> 01:37:21,760
is computed

2584
01:37:21,760 --> 01:37:23,199
right uh

2585
01:37:23,199 --> 01:37:24,800
well there are six are the signatures

2586
01:37:24,800 --> 01:37:26,000
then they're not

2587
01:37:26,000 --> 01:37:28,480
you you don't sign our rsigs but yes uh

2588
01:37:28,480 --> 01:37:31,119
but the dates yes uh yeah yeah i mean

2589
01:37:31,119 --> 01:37:34,000
the rsigma the metadata of the rrc is is

2590
01:37:34,000 --> 01:37:37,040
included as part of the signature right

2591
01:37:37,040 --> 01:37:39,360
and and those should not be you know

2592
01:37:39,360 --> 01:37:42,159
ietf.org aside which signs for one year

2593
01:37:42,159 --> 01:37:44,639
uh is a bad example the rest of the

2594
01:37:44,639 --> 01:37:48,080
world science signs for much less time

2595
01:37:48,080 --> 01:37:49,600
one thing i wanted to point out in terms

2596
01:37:49,600 --> 01:37:51,520
of this slide and the various extensions

2597
01:37:51,520 --> 01:37:53,520
going back and forth

2598
01:37:53,520 --> 01:37:56,080
is that in fact a lot of this signaling

2599
01:37:56,080 --> 01:37:58,239
could be embedded

2600
01:37:58,239 --> 01:38:00,960
in existing signaling in the sense that

2601
01:38:00,960 --> 01:38:03,600
if we wanted to go down that route

2602
01:38:03,600 --> 01:38:04,880
when the server lists a client

2603
01:38:04,880 --> 01:38:06,320
certificate it sends a list of

2604
01:38:06,320 --> 01:38:09,199
acceptable ca names

2605
01:38:09,199 --> 01:38:12,159
ca names are subject dms

2606
01:38:12,159 --> 01:38:15,119
and subject dns have components

2607
01:38:15,119 --> 01:38:17,760
you know ous and countries and all that

2608
01:38:17,760 --> 01:38:19,119
kind of stuff

2609
01:38:19,119 --> 01:38:21,600
uh and there could certainly be

2610
01:38:21,600 --> 01:38:25,040
a format for the subject the ends of the

2611
01:38:25,040 --> 01:38:27,440
case that the server requests that

2612
01:38:27,440 --> 01:38:31,440
essentially implies a dns namespace

2613
01:38:31,440 --> 01:38:33,679
and could even you know say you know i

2614
01:38:33,679 --> 01:38:35,119
want a client

2615
01:38:35,119 --> 01:38:36,400
credential

2616
01:38:36,400 --> 01:38:38,000
issued by

2617
01:38:38,000 --> 01:38:41,280
essentially gained from this domain and

2618
01:38:41,280 --> 01:38:43,679
that could be a form of you know x 509

2619
01:38:43,679 --> 01:38:46,639
name all we need to do is get an o it uh

2620
01:38:46,639 --> 01:38:48,880
uh you know it's a free we could you

2621
01:38:48,880 --> 01:38:51,360
know write one down on a napkin and you

2622
01:38:51,360 --> 01:38:53,760
know and then we have a way of signaling

2623
01:38:53,760 --> 01:38:56,239
uh that you want if that name component

2624
01:38:56,239 --> 01:38:58,560
appears in the certificate list from the

2625
01:38:58,560 --> 01:39:00,560
server that means that the server is

2626
01:39:00,560 --> 01:39:03,360
willing to accept dane identities

2627
01:39:03,360 --> 01:39:07,280
from this portion of the dns tree

2628
01:39:07,280 --> 01:39:10,000
and similarly

2629
01:39:10,000 --> 01:39:13,440
the client certificate uh could

2630
01:39:13,440 --> 01:39:16,320
in at least in the use cases where

2631
01:39:16,320 --> 01:39:19,199
uh the tlsa records are of the dane ee

2632
01:39:19,199 --> 01:39:21,280
variety right three

2633
01:39:21,280 --> 01:39:23,440
uh you know just just carry a public key

2634
01:39:23,440 --> 01:39:25,600
essentially the client can mint its own

2635
01:39:25,600 --> 01:39:27,360
certificate on the fly

2636
01:39:27,360 --> 01:39:28,639
right because all it's presenting is a

2637
01:39:28,639 --> 01:39:30,320
public key

2638
01:39:30,320 --> 01:39:31,679
and then it can embed in that

2639
01:39:31,679 --> 01:39:33,679
certificate any name it chooses at that

2640
01:39:33,679 --> 01:39:36,719
point in time or has chosen recently so

2641
01:39:36,719 --> 01:39:39,040
it can again signal its name in a

2642
01:39:39,040 --> 01:39:40,960
freshly baked cert

2643
01:39:40,960 --> 01:39:43,360
uh to indicate you know i am so and so

2644
01:39:43,360 --> 01:39:46,320
at such and such a domain

2645
01:39:46,320 --> 01:39:48,800
so there's lots of opportunities to move

2646
01:39:48,800 --> 01:39:51,679
the signaling from extensions

2647
01:39:51,679 --> 01:39:53,360
into bits of

2648
01:39:53,360 --> 01:39:56,000
you know certificate like metadata that

2649
01:39:56,000 --> 01:39:57,679
we could consider

2650
01:39:57,679 --> 01:39:59,600
uh if appropriate it would be

2651
01:39:59,600 --> 01:40:01,440
well worth writing up an example vector

2652
01:40:01,440 --> 01:40:02,880
and sending to the mailing list so that

2653
01:40:02,880 --> 01:40:04,639
people can read it over i think that's a

2654
01:40:04,639 --> 01:40:06,400
really good point

2655
01:40:06,400 --> 01:40:07,600
um

2656
01:40:07,600 --> 01:40:10,000
and at some point i may think harder and

2657
01:40:10,000 --> 01:40:13,280
deeper about the role of

2658
01:40:13,280 --> 01:40:15,040
an architecture in which we have things

2659
01:40:15,040 --> 01:40:16,960
like kdc's

2660
01:40:16,960 --> 01:40:20,159
uh mediating multi-hop

2661
01:40:20,159 --> 01:40:22,639
interactions here

2662
01:40:22,639 --> 01:40:25,040
uh and then we potentially take

2663
01:40:25,040 --> 01:40:27,920
advantage of existing uh

2664
01:40:27,920 --> 01:40:30,000
protocols there maybe even get

2665
01:40:30,000 --> 01:40:33,280
advantages in terms of uh post quantum

2666
01:40:33,280 --> 01:40:35,679
and so on if kdc's negotiate symmetric

2667
01:40:35,679 --> 01:40:37,840
keys with each other periodically then

2668
01:40:37,840 --> 01:40:40,000
we can use symmetric keying for bunches

2669
01:40:40,000 --> 01:40:41,760
of this anyway all kinds of interesting

2670
01:40:41,760 --> 01:40:43,600
stuff to research

2671
01:40:43,600 --> 01:40:45,760
but yep later

2672
01:40:45,760 --> 01:40:47,920
yeah sounds good so i think dkg brought

2673
01:40:47,920 --> 01:40:48,800
that up

2674
01:40:48,800 --> 01:40:50,000
well i think it's certainly worth

2675
01:40:50,000 --> 01:40:51,920
investigating whether we can

2676
01:40:51,920 --> 01:40:54,719
provide the dane uh signal inside the uh

2677
01:40:54,719 --> 01:40:56,719
certificate itself rather than in the

2678
01:40:56,719 --> 01:40:59,280
certificate extension

2679
01:40:59,280 --> 01:41:03,639
oh yeah so yeah

2680
01:41:05,040 --> 01:41:07,040
are there any other uh questions or

2681
01:41:07,040 --> 01:41:10,000
people that want to join the queue about

2682
01:41:10,000 --> 01:41:11,119
the

2683
01:41:11,119 --> 01:41:14,320
solution documents of these

2684
01:41:14,320 --> 01:41:15,840
we have plenty of time left we still

2685
01:41:15,840 --> 01:41:17,280
have 20 minutes left

2686
01:41:17,280 --> 01:41:19,599
only

2687
01:41:27,600 --> 01:41:31,480
no audio from you

2688
01:41:35,600 --> 01:41:38,080
i think i saw bars

2689
01:41:38,080 --> 01:41:40,320
nope

2690
01:41:42,159 --> 01:41:45,159
nope

2691
01:41:47,920 --> 01:41:50,560
maybe have ollie type type his question

2692
01:41:50,560 --> 01:41:51,920
into the chat

2693
01:41:51,920 --> 01:41:53,199
you could do that and we could relay it

2694
01:41:53,199 --> 01:41:55,599
certainly

2695
01:41:55,730 --> 01:41:58,080
[Music]

2696
01:41:58,080 --> 01:41:59,440
you know we have microphone problems in

2697
01:41:59,440 --> 01:42:02,638
physical rooms too right

2698
01:42:05,040 --> 01:42:09,760
all right anybody else uh have comments

2699
01:42:10,400 --> 01:42:11,520
so far

2700
01:42:11,520 --> 01:42:13,679
otherwise we'll probably dive into next

2701
01:42:13,679 --> 01:42:15,600
steps and

2702
01:42:15,600 --> 01:42:19,199
probably whenever you're ready

2703
01:42:20,400 --> 01:42:22,239
microphone's there

2704
01:42:22,239 --> 01:42:25,599
you don't need a request just talk

2705
01:42:27,119 --> 01:42:29,600
oh you are super quiet i actually hear

2706
01:42:29,600 --> 01:42:31,440
something now

2707
01:42:31,440 --> 01:42:34,000
yeah i can hear you extremely faintly

2708
01:42:34,000 --> 01:42:36,239
though

2709
01:42:36,719 --> 01:42:39,360
that is weird

2710
01:42:39,360 --> 01:42:41,199
i just wanted to point

2711
01:42:41,199 --> 01:42:42,560
the

2712
01:42:42,560 --> 01:42:45,119
name space needs to be discussed i have

2713
01:42:45,119 --> 01:42:48,159
a discussion with the nes folks

2714
01:42:48,159 --> 01:42:50,800
and uh they want us to look into the

2715
01:42:50,800 --> 01:42:54,159
name space so we'll build that in s3

2716
01:42:54,159 --> 01:42:56,480
if possible

2717
01:42:56,480 --> 01:42:58,320
but that's something we can discuss

2718
01:42:58,320 --> 01:43:00,639
later

2719
01:43:08,960 --> 01:43:11,920
okay so i i heard uh i think i heard

2720
01:43:11,920 --> 01:43:15,199
namespace uh needs to be discussed is

2721
01:43:15,199 --> 01:43:17,520
did i get that right i was having a lot

2722
01:43:17,520 --> 01:43:19,119
of difficulty

2723
01:43:19,119 --> 01:43:20,800
yeah i think that that was the brunt of

2724
01:43:20,800 --> 01:43:22,400
it ollie could you could you actually

2725
01:43:22,400 --> 01:43:24,800
just type your comment in jabber just so

2726
01:43:24,800 --> 01:43:26,560
we can record it in minutes if nothing

2727
01:43:26,560 --> 01:43:28,480
else but i think that's a valid point

2728
01:43:28,480 --> 01:43:30,159
and we sort of mentioned that earlier as

2729
01:43:30,159 --> 01:43:31,840
well

2730
01:43:31,840 --> 01:43:33,040
okay

2731
01:43:33,040 --> 01:43:34,960
all right if there is nobody else

2732
01:43:34,960 --> 01:43:37,119
joining the queue i will talk for a few

2733
01:43:37,119 --> 01:43:38,719
seconds to make sure that nobody else

2734
01:43:38,719 --> 01:43:40,560
joins the queue

2735
01:43:40,560 --> 01:43:42,320
um

2736
01:43:42,320 --> 01:43:43,600
yes and the name space needs to be

2737
01:43:43,600 --> 01:43:45,199
discussed so that we build a tree

2738
01:43:45,199 --> 01:43:47,760
instead of a flat namespace

2739
01:43:47,760 --> 01:43:49,360
okay dog point

2740
01:43:49,360 --> 01:43:50,239
uh

2741
01:43:50,239 --> 01:43:51,920
nope nobody's joining the queue so the

2742
01:43:51,920 --> 01:43:54,239
next question i think to

2743
01:43:54,239 --> 01:43:56,320
the participants in general

2744
01:43:56,320 --> 01:43:58,560
is at what point we want to consider

2745
01:43:58,560 --> 01:44:00,320
adopting these documents i believe

2746
01:44:00,320 --> 01:44:02,639
schumann that you have said you believe

2747
01:44:02,639 --> 01:44:04,480
that the two solution documents are

2748
01:44:04,480 --> 01:44:07,119
functionally ready if the working group

2749
01:44:07,119 --> 01:44:09,360
uh feels that that is the case is that

2750
01:44:09,360 --> 01:44:11,440
correct

2751
01:44:11,440 --> 01:44:13,440
uh yeah i think so i mean they may not

2752
01:44:13,440 --> 01:44:16,000
be complete but they uh

2753
01:44:16,000 --> 01:44:17,679
like appropriately address the

2754
01:44:17,679 --> 01:44:19,679
capabilities that we need for that right

2755
01:44:19,679 --> 01:44:21,040
if you're willing to turn them over and

2756
01:44:21,040 --> 01:44:22,239
have the working group rip them through

2757
01:44:22,239 --> 01:44:24,080
shreds and completely rewrite them

2758
01:44:24,080 --> 01:44:25,840
got it okay

2759
01:44:25,840 --> 01:44:26,639
yes

2760
01:44:26,639 --> 01:44:27,520
right

2761
01:44:27,520 --> 01:44:30,800
uh having said that does anybody have um

2762
01:44:30,800 --> 01:44:34,639
opinions uh pro or nay with respect to

2763
01:44:34,639 --> 01:44:38,159
adopting the two documents as is as a

2764
01:44:38,159 --> 01:44:40,719
starting point

2765
01:44:41,280 --> 01:44:43,920
paul's back

2766
01:44:45,440 --> 01:44:48,000
back but i've just been muted because i

2767
01:44:48,000 --> 01:44:51,679
don't think things will work out for me

2768
01:44:54,400 --> 01:44:57,199
uh so let me actually start a

2769
01:44:57,199 --> 01:44:59,119
poll then

2770
01:44:59,119 --> 01:45:00,480
um

2771
01:45:00,480 --> 01:45:03,480
do

2772
01:45:05,000 --> 01:45:15,199
[Music]

2773
01:45:15,199 --> 01:45:19,760
documents are ready for adoption

2774
01:45:19,760 --> 01:45:21,840
note that this is not the architecture

2775
01:45:21,840 --> 01:45:24,400
document

2776
01:45:25,440 --> 01:45:31,839
[Music]

2777
01:45:35,840 --> 01:45:38,719
uh it's a good point roman i'll get back

2778
01:45:38,719 --> 01:45:41,800
to that

2779
01:45:54,480 --> 01:45:55,920
so in

2780
01:45:55,920 --> 01:45:58,080
chat it would be helpful if people that

2781
01:45:58,080 --> 01:46:00,639
have read the documents uh would just

2782
01:46:00,639 --> 01:46:02,400
say red

2783
01:46:02,400 --> 01:46:04,320
so that we get a feel that um you know

2784
01:46:04,320 --> 01:46:05,760
the counts actually match people that

2785
01:46:05,760 --> 01:46:07,600
have actually done a

2786
01:46:07,600 --> 01:46:09,920
at least a brief summary and analysis of

2787
01:46:09,920 --> 01:46:10,560
it

2788
01:46:10,560 --> 01:46:11,679
thank you

2789
01:46:11,679 --> 01:46:14,239
keep those up

2790
01:46:22,159 --> 01:46:25,638
gotta love english

2791
01:46:34,639 --> 01:46:36,239
the fact that read and read are the same

2792
01:46:36,239 --> 01:46:38,320
spelling has always just

2793
01:46:38,320 --> 01:46:39,840
if there was one abomination of this

2794
01:46:39,840 --> 01:46:42,880
language it would be that

2795
01:46:49,679 --> 01:46:52,639
yeah that two-ish

2796
01:46:52,800 --> 01:46:54,480
all right i think

2797
01:46:54,480 --> 01:46:56,639
that is a

2798
01:46:56,639 --> 01:46:59,040
fairly clear consensus that we are

2799
01:46:59,040 --> 01:47:01,360
trending toward their ready

2800
01:47:01,360 --> 01:47:07,040
uh the numbers seem to be mostly stable

2801
01:47:07,440 --> 01:47:10,560
so we will end the session there with 22

2802
01:47:10,560 --> 01:47:13,360
for rey's hands one did not raise hand

2803
01:47:13,360 --> 01:47:15,840
out of 23 total participants

2804
01:47:15,840 --> 01:47:18,080
i didn't count the number of people that

2805
01:47:18,080 --> 01:47:20,960
have read things in this session but

2806
01:47:20,960 --> 01:47:23,920
in the jabra session but it seems to be

2807
01:47:23,920 --> 01:47:25,840
uh there's quite a bit of people that

2808
01:47:25,840 --> 01:47:28,560
have read it so that's a good sign

2809
01:47:28,560 --> 01:47:29,760
all right

2810
01:47:29,760 --> 01:47:32,000
having said that i think i'm out of

2811
01:47:32,000 --> 01:47:34,560
questions unless my illustrious co-chair

2812
01:47:34,560 --> 01:47:36,880
or ad has specific things they want to

2813
01:47:36,880 --> 01:47:39,199
bring up

2814
01:47:41,840 --> 01:47:43,760
and we can give you back 13 minutes of

2815
01:47:43,760 --> 01:47:44,880
your day

2816
01:47:44,880 --> 01:47:47,440
going once

2817
01:47:48,000 --> 01:47:48,840
in

2818
01:47:48,840 --> 01:47:51,600
dkg uh i just wondered i saw that one

2819
01:47:51,600 --> 01:47:52,880
person said this

2820
01:47:52,880 --> 01:47:55,199
document doesn't seem ready for adoption

2821
01:47:55,199 --> 01:47:57,520
i wonder if that person wants to say

2822
01:47:57,520 --> 01:47:59,040
anything it just might be worth hearing

2823
01:47:59,040 --> 01:48:00,800
what they think he's missing

2824
01:48:00,800 --> 01:48:02,480
yep that's a very good point thank you

2825
01:48:02,480 --> 01:48:05,040
for that uh if the one person that did

2826
01:48:05,040 --> 01:48:06,400
not raise their hand wants to

2827
01:48:06,400 --> 01:48:07,760
de-anonymize

2828
01:48:07,760 --> 01:48:10,239
um please uh feel free to come to the

2829
01:48:10,239 --> 01:48:12,000
mic and explain why you think it's not

2830
01:48:12,000 --> 01:48:15,000
ready

2831
01:48:18,080 --> 01:48:19,600
understanding that you may not want to

2832
01:48:19,600 --> 01:48:21,440
de-anonymize and that is the purpose of

2833
01:48:21,440 --> 01:48:22,080
a

2834
01:48:22,080 --> 01:48:24,719
anonymous poll

2835
01:48:24,719 --> 01:48:26,639
all right well uh hopefully discussion

2836
01:48:26,639 --> 01:48:29,199
will come up on the mailing list of of

2837
01:48:29,199 --> 01:48:30,960
what people find issues with the current

2838
01:48:30,960 --> 01:48:32,639
document because that's the purpose of

2839
01:48:32,639 --> 01:48:34,239
editing things as a working group in the

2840
01:48:34,239 --> 01:48:35,920
first place

2841
01:48:35,920 --> 01:48:37,679
so thank you dkg for making sure they

2842
01:48:37,679 --> 01:48:40,320
had a chance but otherwise i think we'll

2843
01:48:40,320 --> 01:48:42,800
close the inaugural session of

2844
01:48:42,800 --> 01:48:44,960
the dance working group and we can all

2845
01:48:44,960 --> 01:48:46,960
take an extra 10 minutes to get some

2846
01:48:46,960 --> 01:48:50,080
exercise and i suggest dancing it's a

2847
01:48:50,080 --> 01:48:52,239
great form of exercise

2848
01:48:52,239 --> 01:48:53,360
thanks all

2849
01:48:53,360 --> 01:48:57,199
see you in 113

2850
01:48:57,199 --> 01:49:00,440
thanks all

2851
01:49:07,600 --> 01:49:09,679
you

