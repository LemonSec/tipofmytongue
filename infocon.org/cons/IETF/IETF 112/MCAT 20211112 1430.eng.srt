1
00:00:04,960 --> 00:00:08,640
even if it's not virtual

2
00:00:10,719 --> 00:00:12,880
i i missed the big red button the chairs

3
00:00:12,880 --> 00:00:16,280
had in person

4
00:00:17,760 --> 00:00:18,560
and

5
00:00:18,560 --> 00:00:20,400
it is uh

6
00:00:20,400 --> 00:00:26,000
now 15 30 i see so i think we can start

7
00:00:26,000 --> 00:00:28,840
so this is the rmcat

8
00:00:28,840 --> 00:00:32,479
session and i'm anna bristow and i'm

9
00:00:32,479 --> 00:00:34,079
here with

10
00:00:34,079 --> 00:00:36,160
colin and we are perkins and we are the

11
00:00:36,160 --> 00:00:39,199
co-chairs and

12
00:00:40,000 --> 00:00:43,040
let's see if i managed um

13
00:00:43,040 --> 00:00:45,760
so this is the note well i think we are

14
00:00:45,760 --> 00:00:47,920
on friday so you're probably all

15
00:00:47,920 --> 00:00:51,280
familiar with it uh by now if not uh uh

16
00:00:51,280 --> 00:00:54,719
do read it of course because it

17
00:00:54,719 --> 00:00:59,000
does apply to the meeting

18
00:00:59,840 --> 00:01:02,000
and to start with

19
00:01:02,000 --> 00:01:04,479
some administrative so the meeting is

20
00:01:04,479 --> 00:01:06,720
being recorded i think you are aware of

21
00:01:06,720 --> 00:01:07,520
this

22
00:01:07,520 --> 00:01:09,119
by now as well

23
00:01:09,119 --> 00:01:14,320
we do need a note taker for the meeting

24
00:01:14,320 --> 00:01:16,479
do we have someone that can help out

25
00:01:16,479 --> 00:01:19,880
taking notes

26
00:01:32,479 --> 00:01:34,799
now i don't see you guys it's harder to

27
00:01:34,799 --> 00:01:38,600
look at someone suitable

28
00:01:44,720 --> 00:01:49,079
so gory you are in the queue

29
00:01:54,799 --> 00:01:56,719
gory was that you volunteering to take

30
00:01:56,719 --> 00:01:58,320
notes

31
00:01:58,320 --> 00:02:01,840
yeah okay i can't say i cannot do it so

32
00:02:01,840 --> 00:02:04,000
i will enjoy doing it

33
00:02:04,000 --> 00:02:05,680
i'll just bring that up and take notes

34
00:02:05,680 --> 00:02:09,360
um in the hedgehog thank you

35
00:02:09,360 --> 00:02:11,520
and did you want to add something else

36
00:02:11,520 --> 00:02:14,080
or no this was why you you left the

37
00:02:14,080 --> 00:02:15,599
queue now so

38
00:02:15,599 --> 00:02:16,800
um

39
00:02:16,800 --> 00:02:20,319
great so i think we don't need a

40
00:02:20,319 --> 00:02:22,080
separate jabber scribe because we have

41
00:02:22,080 --> 00:02:24,720
the jabber now integrated in mythical so

42
00:02:24,720 --> 00:02:25,760
we will

43
00:02:25,760 --> 00:02:27,120
uh keep an

44
00:02:27,120 --> 00:02:30,000
eye on that

45
00:02:31,200 --> 00:02:33,680
so let's see

46
00:02:33,680 --> 00:02:35,200
so uh

47
00:02:35,200 --> 00:02:37,839
as uh

48
00:02:37,920 --> 00:02:40,400
colleen hinted that we have not uh met

49
00:02:40,400 --> 00:02:42,160
in a while so

50
00:02:42,160 --> 00:02:44,480
this is the agenda we have for the day

51
00:02:44,480 --> 00:02:47,360
we're gonna have an update on

52
00:02:47,360 --> 00:02:50,879
our algorithm so we met last time

53
00:02:50,879 --> 00:02:54,239
for a meeting at itaf 106 and at this

54
00:02:54,239 --> 00:02:55,120
point

55
00:02:55,120 --> 00:02:59,440
we decided we had delivered our

56
00:02:59,440 --> 00:03:00,720
algorithms

57
00:03:00,720 --> 00:03:02,720
and most of our documents

58
00:03:02,720 --> 00:03:04,159
and

59
00:03:04,159 --> 00:03:07,440
we decided that we would go idle for a

60
00:03:07,440 --> 00:03:10,000
while to try and gain experiences with

61
00:03:10,000 --> 00:03:12,560
the algorithms to then come back and see

62
00:03:12,560 --> 00:03:16,319
how we would uh proceed after that and

63
00:03:16,319 --> 00:03:18,080
at that point we were thinking to go

64
00:03:18,080 --> 00:03:20,800
idle for about a year but then of course

65
00:03:20,800 --> 00:03:24,080
the pandemic arrived and

66
00:03:24,080 --> 00:03:25,920
we were hoping to also be able to meet

67
00:03:25,920 --> 00:03:28,400
in person but now of course it's high

68
00:03:28,400 --> 00:03:31,280
time to come back and see what has

69
00:03:31,280 --> 00:03:33,440
happened to the algorithms and what do

70
00:03:33,440 --> 00:03:34,879
we have

71
00:03:34,879 --> 00:03:37,760
left as work in the the working group so

72
00:03:37,760 --> 00:03:40,239
after we finish

73
00:03:40,239 --> 00:03:43,280
this introduction part we will move to

74
00:03:43,280 --> 00:03:45,519
looking at the update on the status of

75
00:03:45,519 --> 00:03:48,239
the rmcap algorithms so first an

76
00:03:48,239 --> 00:03:50,560
overview of it from the shares and then

77
00:03:50,560 --> 00:03:53,439
we will have ingmar presenting uh some

78
00:03:53,439 --> 00:03:55,519
updates with the scream algorithm from

79
00:03:55,519 --> 00:03:59,120
rfc 8298 and we have david

80
00:03:59,120 --> 00:04:01,439
presenting some updates on the shared

81
00:04:01,439 --> 00:04:06,400
bottleneck detection from rfc 8382

82
00:04:06,400 --> 00:04:07,680
and

83
00:04:07,680 --> 00:04:10,319
then we have one active working group

84
00:04:10,319 --> 00:04:12,720
document that has been

85
00:04:12,720 --> 00:04:15,040
left behind on rtcp feedback for

86
00:04:15,040 --> 00:04:17,120
congestion control and colin will give

87
00:04:17,120 --> 00:04:19,839
us the the update on that and then we

88
00:04:19,839 --> 00:04:20,959
will

89
00:04:20,959 --> 00:04:22,800
see where we are on the different

90
00:04:22,800 --> 00:04:25,759
activities uh how to wrap up or what we

91
00:04:25,759 --> 00:04:27,360
have left to

92
00:04:27,360 --> 00:04:30,080
to work on

93
00:04:31,840 --> 00:04:34,560
so to

94
00:04:35,280 --> 00:04:37,840
start with a recap of the working group

95
00:04:37,840 --> 00:04:40,960
activities we have had four algorithms

96
00:04:40,960 --> 00:04:43,280
that we have submitted

97
00:04:43,280 --> 00:04:48,240
as experimental rfcs and they have been

98
00:04:48,240 --> 00:04:50,240
now all published they have been in in

99
00:04:50,240 --> 00:04:52,639
various queues uh some of them waiting

100
00:04:52,639 --> 00:04:54,320
for each other but we have the the

101
00:04:54,320 --> 00:04:57,280
scream algorithm and the nada algorithms

102
00:04:57,280 --> 00:04:59,199
the two congestion controls and then we

103
00:04:59,199 --> 00:05:01,840
have the the coupled congestion control

104
00:05:01,840 --> 00:05:04,000
and the shared bottleneck

105
00:05:04,000 --> 00:05:06,560
detection

106
00:05:06,880 --> 00:05:09,680
and the last of those the nada algorithm

107
00:05:09,680 --> 00:05:12,240
was was published since we last

108
00:05:12,240 --> 00:05:15,199
after our last physical meeting and the

109
00:05:15,199 --> 00:05:17,360
couple congestion control

110
00:05:17,360 --> 00:05:19,680
had the dependency there so it was also

111
00:05:19,680 --> 00:05:22,320
published after we last met but they

112
00:05:22,320 --> 00:05:24,160
were all submitted at this point in time

113
00:05:24,160 --> 00:05:26,320
but now they're also all

114
00:05:26,320 --> 00:05:28,479
rfcs

115
00:05:28,479 --> 00:05:31,840
then we have had a set of requirements

116
00:05:31,840 --> 00:05:34,479
and evaluation documents

117
00:05:34,479 --> 00:05:36,400
and the requirements was actually the

118
00:05:36,400 --> 00:05:38,639
first document that was sent for

119
00:05:38,639 --> 00:05:41,199
publication from the group but that was

120
00:05:41,199 --> 00:05:42,720
in the

121
00:05:42,720 --> 00:05:44,800
in the queue for a long time

122
00:05:44,800 --> 00:05:47,039
because of the the webrtc

123
00:05:47,039 --> 00:05:50,560
bundle and then most of the

124
00:05:50,560 --> 00:05:52,880
evaluation documents had the dependence

125
00:05:52,880 --> 00:05:56,639
on the requirements so uh three of these

126
00:05:56,639 --> 00:05:58,560
four of these documents were

127
00:05:58,560 --> 00:06:01,039
all now published in january of this

128
00:06:01,039 --> 00:06:02,000
year

129
00:06:02,000 --> 00:06:04,400
uh when this whole

130
00:06:04,400 --> 00:06:07,360
sequence of documents were completed and

131
00:06:07,360 --> 00:06:09,680
all published and we already had the

132
00:06:09,680 --> 00:06:11,759
video traffic models

133
00:06:11,759 --> 00:06:15,600
uh published uh before

134
00:06:15,600 --> 00:06:18,080
and then we have one

135
00:06:18,080 --> 00:06:21,520
active working group document on the

136
00:06:21,520 --> 00:06:22,880
feedback side

137
00:06:22,880 --> 00:06:25,039
and this is the draft that colin will

138
00:06:25,039 --> 00:06:26,960
talk about and

139
00:06:26,960 --> 00:06:29,120
when we last met this was waiting for

140
00:06:29,120 --> 00:06:29,919
the

141
00:06:29,919 --> 00:06:31,199
uh

142
00:06:31,199 --> 00:06:33,440
rtp control protocol feedback for

143
00:06:33,440 --> 00:06:36,080
congestion control the feedback message

144
00:06:36,080 --> 00:06:37,680
that was

145
00:06:37,680 --> 00:06:40,880
handled at that time by the avt core

146
00:06:40,880 --> 00:06:43,400
so that is now published in rfc

147
00:06:43,400 --> 00:06:46,639
8888 and

148
00:06:46,639 --> 00:06:49,360
so we should now finish up this this uh

149
00:06:49,360 --> 00:06:51,440
document that was depending on it so we

150
00:06:51,440 --> 00:06:54,080
have that on the agenda

151
00:06:54,080 --> 00:06:56,800
so this was a was a recap of where we

152
00:06:56,800 --> 00:06:58,639
were with the working group we thought

153
00:06:58,639 --> 00:07:02,000
this would be good since we did not need

154
00:07:02,000 --> 00:07:04,319
in a while

155
00:07:04,319 --> 00:07:07,360
any questions or comments on the general

156
00:07:07,360 --> 00:07:09,919
update

157
00:07:14,560 --> 00:07:15,680
otherwise

158
00:07:15,680 --> 00:07:19,039
we will move on to the

159
00:07:19,039 --> 00:07:21,039
algorithms to

160
00:07:21,039 --> 00:07:22,000
have an

161
00:07:22,000 --> 00:07:24,560
update on those

162
00:07:24,560 --> 00:07:27,120
so we have four uh

163
00:07:27,120 --> 00:07:29,440
algorithms and

164
00:07:29,440 --> 00:07:31,120
igmar you're in the queue because you

165
00:07:31,120 --> 00:07:34,000
will be presenting soon i assume

166
00:07:34,000 --> 00:07:35,440
so

167
00:07:35,440 --> 00:07:36,960
is this why or you wanted to ask

168
00:07:36,960 --> 00:07:39,120
something

169
00:07:39,120 --> 00:07:41,440
i'm trying to figure out how to

170
00:07:41,440 --> 00:07:44,080
cancel slice request

171
00:07:44,080 --> 00:07:47,039
yes yes possible before it's impossible

172
00:07:47,039 --> 00:07:50,080
no no it's there i i see it i will just

173
00:07:50,080 --> 00:07:52,400
give the overview first and then i'll

174
00:07:52,400 --> 00:07:55,039
let you share oh

175
00:07:55,039 --> 00:07:57,360
so i i'm on the overview slide so no

176
00:07:57,360 --> 00:07:59,680
worries so we have the four

177
00:07:59,680 --> 00:08:02,160
algorithms so we have scream and ingmar

178
00:08:02,160 --> 00:08:05,039
will give us the the update on that then

179
00:08:05,039 --> 00:08:07,919
we have the the nada congestion control

180
00:08:07,919 --> 00:08:10,639
and uh xiaojing

181
00:08:10,639 --> 00:08:14,080
updated the status on that uh last year

182
00:08:14,080 --> 00:08:16,479
that they had the full implementation

183
00:08:16,479 --> 00:08:19,039
uh completed of nada in the

184
00:08:19,039 --> 00:08:21,199
mozilla browser

185
00:08:21,199 --> 00:08:23,520
and this was kind of the completion for

186
00:08:23,520 --> 00:08:26,560
them on the work so there has as far as

187
00:08:26,560 --> 00:08:29,280
the authors and shares no there has not

188
00:08:29,280 --> 00:08:30,319
been any

189
00:08:30,319 --> 00:08:33,519
ongoing activities after they completed

190
00:08:33,519 --> 00:08:34,719
this

191
00:08:34,719 --> 00:08:37,120
this implementation and

192
00:08:37,120 --> 00:08:39,599
xiaojing and her co-workers have moved

193
00:08:39,599 --> 00:08:42,320
on to other

194
00:08:42,399 --> 00:08:44,640
projects or other employees after that

195
00:08:44,640 --> 00:08:47,040
so i think there is no ongoing work or

196
00:08:47,040 --> 00:08:49,200
nada as far as we know but there is the

197
00:08:49,200 --> 00:08:50,480
open source

198
00:08:50,480 --> 00:08:52,560
implementation

199
00:08:52,560 --> 00:08:54,480
then there is the coupled congestion

200
00:08:54,480 --> 00:08:57,200
control and there there is some

201
00:08:57,200 --> 00:08:59,200
ongoing research

202
00:08:59,200 --> 00:09:01,600
on the topic by the waters so they have

203
00:09:01,600 --> 00:09:04,640
some students working on coupling the

204
00:09:04,640 --> 00:09:08,080
the video and data flows in chromium but

205
00:09:08,080 --> 00:09:09,279
there are no

206
00:09:09,279 --> 00:09:11,600
no results or or

207
00:09:11,600 --> 00:09:13,839
ready things to report but still some

208
00:09:13,839 --> 00:09:15,760
ongoing research

209
00:09:15,760 --> 00:09:17,839
and then we had the shared bottleneck

210
00:09:17,839 --> 00:09:20,640
detection and david will give us the

211
00:09:20,640 --> 00:09:23,760
update on that

212
00:09:23,760 --> 00:09:26,800
so with that i will now uh

213
00:09:26,800 --> 00:09:29,360
stop my sharing

214
00:09:29,360 --> 00:09:31,120
and i will

215
00:09:31,120 --> 00:09:33,200
now i think in my view should be able to

216
00:09:33,200 --> 00:09:36,000
share and i will give the word to you to

217
00:09:36,000 --> 00:09:38,480
give us an update on

218
00:09:38,480 --> 00:09:40,959
scream

219
00:09:44,080 --> 00:09:44,959
okay

220
00:09:44,959 --> 00:09:46,320
and uh

221
00:09:46,320 --> 00:09:47,440
little

222
00:09:47,440 --> 00:09:50,880
i hope you hear me him well

223
00:09:53,600 --> 00:09:56,160
and this is an update what has been done

224
00:09:56,160 --> 00:09:58,320
in terms of experiments the future and

225
00:09:58,320 --> 00:09:59,600
uh

226
00:09:59,600 --> 00:10:02,000
about around screen which was developed

227
00:10:02,000 --> 00:10:04,480
by me and so i had them published or was

228
00:10:04,480 --> 00:10:07,279
it the late 2017 it's been a qui a

229
00:10:07,279 --> 00:10:09,600
couple of years since on

230
00:10:09,600 --> 00:10:12,959
and uh you can skip to the next okay i

231
00:10:12,959 --> 00:10:16,000
need to click on number two here

232
00:10:16,000 --> 00:10:18,800
and there are some to start with where

233
00:10:18,800 --> 00:10:21,600
scream is or isn't used i know

234
00:10:21,600 --> 00:10:23,040
originally

235
00:10:23,040 --> 00:10:25,360
the screen was intended for webrtc and

236
00:10:25,360 --> 00:10:27,680
that was the whole intent to it back

237
00:10:27,680 --> 00:10:30,640
when it was uh the work started on

238
00:10:30,640 --> 00:10:34,079
it was implemented for open webrtc but

239
00:10:34,079 --> 00:10:36,000
it never got traction and it never

240
00:10:36,000 --> 00:10:37,120
really

241
00:10:37,120 --> 00:10:38,800
never really ever

242
00:10:38,800 --> 00:10:42,160
evolved into webrtc and so we don't want

243
00:10:42,160 --> 00:10:44,160
a natural financial reason we don't have

244
00:10:44,160 --> 00:10:47,920
any any much experimentation around that

245
00:10:47,920 --> 00:10:49,200
so uh

246
00:10:49,200 --> 00:10:50,640
but

247
00:10:50,640 --> 00:10:53,120
perhaps something that was a

248
00:10:53,120 --> 00:10:55,600
bit below my radar is that

249
00:10:55,600 --> 00:10:56,959
there was a

250
00:10:56,959 --> 00:10:59,120
can probably look at the avt core

251
00:10:59,120 --> 00:11:01,279
presentation where martin singelbert and

252
00:11:01,279 --> 00:11:03,600
yoriot presented will have integrated

253
00:11:03,600 --> 00:11:06,480
screen with a quick with our go quick

254
00:11:06,480 --> 00:11:08,079
implementation so

255
00:11:08,079 --> 00:11:10,720
they have some results there and

256
00:11:10,720 --> 00:11:12,959
and boundary issues when implementing a

257
00:11:12,959 --> 00:11:14,800
screen there

258
00:11:14,800 --> 00:11:16,240
what has

259
00:11:16,240 --> 00:11:19,120
been more tried more is a cloud rendered

260
00:11:19,120 --> 00:11:21,920
gaming and uh so now we're not talking

261
00:11:21,920 --> 00:11:24,000
about uh one two megabits per second

262
00:11:24,000 --> 00:11:26,480
it's more like uh 30 megabit per second

263
00:11:26,480 --> 00:11:28,560
video with high quality and

264
00:11:28,560 --> 00:11:29,920
then we have done quite a lot of

265
00:11:29,920 --> 00:11:32,160
experimentation and then we also have

266
00:11:32,160 --> 00:11:34,880
for remote driving uh where we have a

267
00:11:34,880 --> 00:11:37,920
hero head or a

268
00:11:37,920 --> 00:11:39,519
remote control call that we have been

269
00:11:39,519 --> 00:11:43,120
driving around in various projects and

270
00:11:43,120 --> 00:11:45,120
that also includes a

271
00:11:45,120 --> 00:11:48,399
high bitrate video with multiple cameras

272
00:11:48,399 --> 00:11:49,360
and

273
00:11:49,360 --> 00:11:52,639
and also a scream has some kind of uh

274
00:11:52,639 --> 00:11:54,560
it's a wrapper around the congestion

275
00:11:54,560 --> 00:11:56,800
control that makes it possible to do

276
00:11:56,800 --> 00:11:59,519
some benchmarking for instance over 5g

277
00:11:59,519 --> 00:12:03,839
networks that has been done quite a lot

278
00:12:06,399 --> 00:12:09,440
and about to clone rendering gaming and

279
00:12:09,440 --> 00:12:10,639
here we have

280
00:12:10,639 --> 00:12:13,360
been much focused around the development

281
00:12:13,360 --> 00:12:16,639
of l4s and the screen was picked

282
00:12:16,639 --> 00:12:18,880
because it's not the perfect algorithm

283
00:12:18,880 --> 00:12:21,200
don't claim that but it's a known

284
00:12:21,200 --> 00:12:24,800
algorithm and it was quite easy to uh

285
00:12:24,800 --> 00:12:27,360
dig up statistics around how it worked

286
00:12:27,360 --> 00:12:30,480
and what kind of latency got on

287
00:12:30,480 --> 00:12:31,600
and

288
00:12:31,600 --> 00:12:34,399
that later on evolved into using

289
00:12:34,399 --> 00:12:36,399
implementing a gear streamer plug-in to

290
00:12:36,399 --> 00:12:38,480
do as a real uh

291
00:12:38,480 --> 00:12:40,399
experiments with a cloud rendering

292
00:12:40,399 --> 00:12:42,079
gaming

293
00:12:42,079 --> 00:12:44,639
and uh where we there we were able to

294
00:12:44,639 --> 00:12:46,639
try out the experiment we'd done without

295
00:12:46,639 --> 00:12:49,279
l4s and uh it was a

296
00:12:49,279 --> 00:12:50,160
uh

297
00:12:50,160 --> 00:12:52,000
we found a couple of issues with the

298
00:12:52,000 --> 00:12:54,000
green algorithms in the process and

299
00:12:54,000 --> 00:12:57,279
mostly related to how video encoders

300
00:12:57,279 --> 00:12:58,639
behave

301
00:12:58,639 --> 00:13:01,040
especially when you frequently update

302
00:13:01,040 --> 00:13:04,160
your target bit rate

303
00:13:04,160 --> 00:13:07,839
and i will come back to that later

304
00:13:07,839 --> 00:13:10,240
and uh

305
00:13:10,639 --> 00:13:12,160
yeah and uh

306
00:13:12,160 --> 00:13:14,000
then we have remote driving where we

307
00:13:14,000 --> 00:13:16,160
have done quite a lot to experimentation

308
00:13:16,160 --> 00:13:17,760
and we have other students who have

309
00:13:17,760 --> 00:13:20,320
integrated uh the screen algorithm with

310
00:13:20,320 --> 00:13:22,560
the remote control core

311
00:13:22,560 --> 00:13:23,680
and uh

312
00:13:23,680 --> 00:13:25,680
we've tried out in various environments

313
00:13:25,680 --> 00:13:29,519
and uh over 4g and party networks

314
00:13:29,519 --> 00:13:31,680
and

315
00:13:31,680 --> 00:13:34,079
it has been a pretty good test platform

316
00:13:34,079 --> 00:13:37,200
to uh benchmark how it really behaves in

317
00:13:37,200 --> 00:13:40,079
pole coverage for instance and

318
00:13:40,079 --> 00:13:41,040
and uh

319
00:13:41,040 --> 00:13:43,440
unfortunately we don't have much data to

320
00:13:43,440 --> 00:13:45,760
show because uh it's a bit

321
00:13:45,760 --> 00:13:49,360
sloppy behavior we run the test and when

322
00:13:49,360 --> 00:13:50,639
then we

323
00:13:50,639 --> 00:13:52,880
drop all the data you know it's a bit

324
00:13:52,880 --> 00:13:55,920
has been a bit of a ad hoc testing

325
00:13:55,920 --> 00:13:58,720
pretty much and for demo purposes and

326
00:13:58,720 --> 00:14:01,360
i hope hopefully we do that better later

327
00:14:01,360 --> 00:14:03,839
on

328
00:14:06,399 --> 00:14:08,720
and then we have this benchmarking table

329
00:14:08,720 --> 00:14:12,240
that is available for for public use and

330
00:14:12,240 --> 00:14:13,279
and

331
00:14:13,279 --> 00:14:15,760
it what it does is that it

332
00:14:15,760 --> 00:14:18,000
it emulates a video encoder where you

333
00:14:18,000 --> 00:14:20,079
can have other you you can pick either a

334
00:14:20,079 --> 00:14:22,160
fixed bit rate or you make it rate

335
00:14:22,160 --> 00:14:24,000
adaptive and you can do the rate

336
00:14:24,000 --> 00:14:27,120
adaptation over quite a large uh

337
00:14:27,120 --> 00:14:28,480
bit rate range

338
00:14:28,480 --> 00:14:31,120
from a cup uh tens of kilobits per

339
00:14:31,120 --> 00:14:33,680
second up to uh more than 500 megabits

340
00:14:33,680 --> 00:14:35,040
per second

341
00:14:35,040 --> 00:14:37,360
the upper limit there is depending on

342
00:14:37,360 --> 00:14:39,600
what kind of laptop you are using or the

343
00:14:39,600 --> 00:14:41,120
virtual machine

344
00:14:41,120 --> 00:14:42,880
that you have in in the other end for

345
00:14:42,880 --> 00:14:46,000
instance however much of the because it

346
00:14:46,000 --> 00:14:48,880
becomes a bit cpu consuming especially

347
00:14:48,880 --> 00:14:51,760
given the packet pacing and that is uh

348
00:14:51,760 --> 00:14:53,120
involved

349
00:14:53,120 --> 00:14:55,680
so it's not ideal for really high

350
00:14:55,680 --> 00:14:58,880
bitrate applications but up to something

351
00:14:58,880 --> 00:15:00,959
like 500 megabit per second you can try

352
00:15:00,959 --> 00:15:01,920
out

353
00:15:01,920 --> 00:15:03,920
i believe though the highest i got was

354
00:15:03,920 --> 00:15:06,560
like almost 900 megabit per second over

355
00:15:06,560 --> 00:15:10,000
one gig gigabit line

356
00:15:10,000 --> 00:15:11,760
and you can also model iframes and

357
00:15:11,760 --> 00:15:14,399
variable frame sizes you get something

358
00:15:14,399 --> 00:15:17,600
that is similar to how a video

359
00:15:17,600 --> 00:15:19,760
encoder in a constant bitrate mode

360
00:15:19,760 --> 00:15:23,279
behaves but it's not i it's not

361
00:15:23,279 --> 00:15:25,600
it's not identical of course

362
00:15:25,600 --> 00:15:27,760
and you can measure rounded time with

363
00:15:27,760 --> 00:15:31,360
the estimated q delay which is a by uh

364
00:15:31,360 --> 00:15:33,040
output from the screen algorithm the

365
00:15:33,040 --> 00:15:34,800
throughput that you get

366
00:15:34,800 --> 00:15:37,040
both the transmitted bit rate and what

367
00:15:37,040 --> 00:15:39,360
is hacked in the other random packet

368
00:15:39,360 --> 00:15:41,199
loss and see marks

369
00:15:41,199 --> 00:15:42,480
and

370
00:15:42,480 --> 00:15:43,519
it's a

371
00:15:43,519 --> 00:15:44,959
it there is

372
00:15:44,959 --> 00:15:46,160
capable

373
00:15:46,160 --> 00:15:48,560
about trying classic easy and

374
00:15:48,560 --> 00:15:51,119
l4s

375
00:15:52,320 --> 00:15:55,320
um

376
00:15:55,680 --> 00:15:58,959
and the finding is uh so far is that

377
00:15:58,959 --> 00:16:00,560
what we'll find is that the window based

378
00:16:00,560 --> 00:16:03,120
congestion control is which is a

379
00:16:03,120 --> 00:16:06,240
scream it is more or less actually tcp

380
00:16:06,240 --> 00:16:08,639
land but but with a

381
00:16:08,639 --> 00:16:10,880
little more bells and whistles that is

382
00:16:10,880 --> 00:16:12,639
probably good at least for cellular

383
00:16:12,639 --> 00:16:13,600
access

384
00:16:13,600 --> 00:16:15,519
because you can have a radar equal

385
00:16:15,519 --> 00:16:17,839
resource configuration that happens and

386
00:16:17,839 --> 00:16:20,000
you can have andover that can pose

387
00:16:20,000 --> 00:16:22,720
transmissions pulses can cause causal

388
00:16:22,720 --> 00:16:24,880
transmission policies on

389
00:16:24,880 --> 00:16:28,079
that if that is not handled you end up

390
00:16:28,079 --> 00:16:30,000
quite easily with a

391
00:16:30,000 --> 00:16:32,160
lot of data in the transmit buffers in

392
00:16:32,160 --> 00:16:34,560
the in the network that is just there

393
00:16:34,560 --> 00:16:37,040
and it's a it's it's uh

394
00:16:37,040 --> 00:16:38,959
it's a causes head of line blocking for

395
00:16:38,959 --> 00:16:42,240
subsequent video for instance

396
00:16:42,240 --> 00:16:44,240
so it's a bet that you have it is a

397
00:16:44,240 --> 00:16:46,639
window-based congestion control and then

398
00:16:46,639 --> 00:16:49,759
you have a lots of zero in cases like

399
00:16:49,759 --> 00:16:52,000
this you have lots of a lot of packets

400
00:16:52,000 --> 00:16:53,759
in the center that you can discard if

401
00:16:53,759 --> 00:16:56,639
they're all deemed too old anyway so

402
00:16:56,639 --> 00:16:58,320
and then you can locally on the center

403
00:16:58,320 --> 00:17:01,680
side of forcing you idr

404
00:17:01,680 --> 00:17:03,199
so you're going to get quite the fast

405
00:17:03,199 --> 00:17:05,520
recovery because of that and that is uh

406
00:17:05,520 --> 00:17:07,439
has been shown in the experimentation

407
00:17:07,439 --> 00:17:10,160
the remote control call for instance

408
00:17:10,160 --> 00:17:11,760
where you can in

409
00:17:11,760 --> 00:17:14,079
a really bad coverage situations you can

410
00:17:14,079 --> 00:17:17,359
end up with a in those situations

411
00:17:17,359 --> 00:17:18,480
and

412
00:17:18,480 --> 00:17:20,400
the feedback rate we have had a lot of

413
00:17:20,400 --> 00:17:22,400
discussion on calling for instance i've

414
00:17:22,400 --> 00:17:24,720
done some uh work around the what is the

415
00:17:24,720 --> 00:17:26,160
applicable

416
00:17:26,160 --> 00:17:29,280
uh feedback rate that is needed

417
00:17:29,280 --> 00:17:31,600
as it is today so something like one

418
00:17:31,600 --> 00:17:35,120
feedback per 16 rtp packets and that is

419
00:17:35,120 --> 00:17:37,039
probably overkill and uh

420
00:17:37,039 --> 00:17:40,160
but uh to be honest i haven't

421
00:17:40,160 --> 00:17:42,000
done so much uh

422
00:17:42,000 --> 00:17:43,919
experimentation what is the pain point

423
00:17:43,919 --> 00:17:46,400
pain limit here it has been more focused

424
00:17:46,400 --> 00:17:48,480
on a stable streaming than optimizing

425
00:17:48,480 --> 00:17:50,799
that core head

426
00:17:50,799 --> 00:17:52,799
so you in

427
00:17:52,799 --> 00:17:54,480
as it is now you end up with something

428
00:17:54,480 --> 00:17:56,960
like the the feedback bit rate is

429
00:17:56,960 --> 00:17:59,760
something like the 150th of the media

430
00:17:59,760 --> 00:18:01,120
bit rate

431
00:18:01,120 --> 00:18:04,480
that's where we end up roughly

432
00:18:04,480 --> 00:18:05,200
and

433
00:18:05,200 --> 00:18:07,440
the video recorder

434
00:18:07,440 --> 00:18:09,520
that is something like 80 of the

435
00:18:09,520 --> 00:18:11,679
development work doing the network

436
00:18:11,679 --> 00:18:14,160
congestion control that has been quite

437
00:18:14,160 --> 00:18:15,120
easy

438
00:18:15,120 --> 00:18:17,520
but the video coders yeah

439
00:18:17,520 --> 00:18:18,799
sometimes they are really strange

440
00:18:18,799 --> 00:18:20,480
animals and

441
00:18:20,480 --> 00:18:24,400
you have a video coder that are sluggish

442
00:18:24,400 --> 00:18:26,880
when you sort of set the target bitrate

443
00:18:26,880 --> 00:18:28,720
it can take a while for it to adapt to

444
00:18:28,720 --> 00:18:29,440
the

445
00:18:29,440 --> 00:18:32,160
new target bitrate on

446
00:18:32,160 --> 00:18:34,160
and sometimes you have

447
00:18:34,160 --> 00:18:36,000
that the video encoders can become

448
00:18:36,000 --> 00:18:38,240
confused by frequent update

449
00:18:38,240 --> 00:18:39,120
dates

450
00:18:39,120 --> 00:18:42,240
and for instance the nvm encoder can be

451
00:18:42,240 --> 00:18:44,400
given

452
00:18:44,400 --> 00:18:46,640
what's called a systematic offset so if

453
00:18:46,640 --> 00:18:49,280
you set it to 20 megabits per second you

454
00:18:49,280 --> 00:18:52,400
will get like 22 megabits per second

455
00:18:52,400 --> 00:18:54,240
on the average

456
00:18:54,240 --> 00:18:57,520
and that has been uh can it's not

457
00:18:57,520 --> 00:18:59,679
it's not a disaster for screen but it's

458
00:18:59,679 --> 00:19:01,520
to give some kind of a

459
00:19:01,520 --> 00:19:03,760
sub-optimal behavior and

460
00:19:03,760 --> 00:19:05,840
that is not always visible if you don't

461
00:19:05,840 --> 00:19:08,160
uh if you use just endpoint based

462
00:19:08,160 --> 00:19:10,320
adaptation but it's more if you use head

463
00:19:10,320 --> 00:19:12,240
for rest and you can you start to see

464
00:19:12,240 --> 00:19:15,360
those anomalies

465
00:19:15,440 --> 00:19:17,440
and also that iframes they are really

466
00:19:17,440 --> 00:19:19,360
problematic in congestive situations

467
00:19:19,360 --> 00:19:22,320
because they can be really larger

468
00:19:22,320 --> 00:19:24,160
so there are companies that transmit

469
00:19:24,160 --> 00:19:26,480
iframes only when needed

470
00:19:26,480 --> 00:19:28,000
and also

471
00:19:28,000 --> 00:19:30,480
gradual decoder refresh

472
00:19:30,480 --> 00:19:31,840
also called

473
00:19:31,840 --> 00:19:33,679
periodic injury refresh

474
00:19:33,679 --> 00:19:35,280
can be useful

475
00:19:35,280 --> 00:19:37,679
uh if that is implemented in decoders

476
00:19:37,679 --> 00:19:39,600
and in the encoders

477
00:19:39,600 --> 00:19:42,240
and another way that is used in a roman

478
00:19:42,240 --> 00:19:44,320
caller remote control car at lower

479
00:19:44,320 --> 00:19:46,080
bitrates you to compress the iframes

480
00:19:46,080 --> 00:19:48,880
even even harder you set the qpmax and

481
00:19:48,880 --> 00:19:51,360
qpmain mean values

482
00:19:51,360 --> 00:19:54,080
to keep control of that

483
00:19:54,080 --> 00:19:55,919
so there are some uh

484
00:19:55,919 --> 00:19:59,120
issues with the video encoder that

485
00:19:59,120 --> 00:20:00,960
even though your congestion control

486
00:20:00,960 --> 00:20:02,720
algorithms works like the sean you have

487
00:20:02,720 --> 00:20:04,880
a video encoders it's a essentially a

488
00:20:04,880 --> 00:20:07,360
black box that can cause a lot of issues

489
00:20:07,360 --> 00:20:09,760
for you

490
00:20:11,200 --> 00:20:13,360
and then you have a what is to be done

491
00:20:13,360 --> 00:20:15,360
in the future and uh

492
00:20:15,360 --> 00:20:17,840
currently for some kind of an lfrs

493
00:20:17,840 --> 00:20:19,600
implementation is in running code that

494
00:20:19,600 --> 00:20:22,320
is not in the in the standard so i

495
00:20:22,320 --> 00:20:25,919
have some plans to do an update

496
00:20:25,919 --> 00:20:28,080
and possibly based on improved alphas

497
00:20:28,080 --> 00:20:30,080
implementation later on but they say

498
00:20:30,080 --> 00:20:31,280
that is not

499
00:20:31,280 --> 00:20:32,840
planned right now

500
00:20:32,840 --> 00:20:37,120
but hopefully later on

501
00:20:37,120 --> 00:20:39,280
i believe that was general presentation

502
00:20:39,280 --> 00:20:42,240
and four minutes left um

503
00:20:42,240 --> 00:20:45,200
do we have questions or

504
00:20:45,200 --> 00:20:47,280
thank you ingmar so let's

505
00:20:47,280 --> 00:20:49,039
open up the queue and see if we have

506
00:20:49,039 --> 00:20:52,280
some questions

507
00:21:02,640 --> 00:21:05,039
so let me ask one question on because

508
00:21:05,039 --> 00:21:06,480
you mentioned that

509
00:21:06,480 --> 00:21:08,880
the code has the easy and

510
00:21:08,880 --> 00:21:11,679
support so the the results that you

511
00:21:11,679 --> 00:21:14,640
showed they were using

512
00:21:14,640 --> 00:21:17,039
easy and feedback or

513
00:21:17,039 --> 00:21:18,559
they were based on

514
00:21:18,559 --> 00:21:19,760
law space

515
00:21:19,760 --> 00:21:22,320
what results we have is that uh so far

516
00:21:22,320 --> 00:21:25,280
they are in sort of in official

517
00:21:25,280 --> 00:21:28,480
or they also what the to the degree that

518
00:21:28,480 --> 00:21:32,240
they are officialized in this demo here

519
00:21:32,240 --> 00:21:35,039
and here is he again if you

520
00:21:35,039 --> 00:21:36,400
probably won't see you know but you can

521
00:21:36,400 --> 00:21:38,880
see that the amount of marked packets

522
00:21:38,880 --> 00:21:41,039
you see in the

523
00:21:41,039 --> 00:21:44,039
sorry

524
00:21:47,760 --> 00:21:49,440
yeah there you can see the amount of

525
00:21:49,440 --> 00:21:52,480
more packets and how it behave how it

526
00:21:52,480 --> 00:21:53,760
controlled the

527
00:21:53,760 --> 00:21:57,120
bitrate of the video

528
00:21:57,200 --> 00:21:59,039
yeah you know that's

529
00:21:59,039 --> 00:22:01,360
so far it's only in that that experiment

530
00:22:01,360 --> 00:22:02,640
that you're using

531
00:22:02,640 --> 00:22:04,960
in this case l4s

532
00:22:04,960 --> 00:22:06,480
we haven't done much experimentation

533
00:22:06,480 --> 00:22:09,200
with eastern

534
00:22:11,520 --> 00:22:13,520
thank you we have mo in the queue go

535
00:22:13,520 --> 00:22:15,918
ahead mo

536
00:22:17,200 --> 00:22:18,799
yes uh the

537
00:22:18,799 --> 00:22:21,200
from what i understand the original um

538
00:22:21,200 --> 00:22:24,240
design in in scream was motivated by

539
00:22:24,240 --> 00:22:26,400
uh wireless clients

540
00:22:26,400 --> 00:22:28,720
um do you think that that uh that

541
00:22:28,720 --> 00:22:30,799
original design is still

542
00:22:30,799 --> 00:22:33,280
uh uh part of the model or do you think

543
00:22:33,280 --> 00:22:34,400
it would be

544
00:22:34,400 --> 00:22:37,120
equally uh optimized for things like

545
00:22:37,120 --> 00:22:39,280
data center to data center traffic

546
00:22:39,280 --> 00:22:41,600
um so i'm really wondering whether or

547
00:22:41,600 --> 00:22:43,120
not it makes sense

548
00:22:43,120 --> 00:22:44,960
to start considering

549
00:22:44,960 --> 00:22:46,640
the full topology when we look at the

550
00:22:46,640 --> 00:22:48,240
congestion controls

551
00:22:48,240 --> 00:22:50,480
and wonder if a one-size-fits-all model

552
00:22:50,480 --> 00:22:53,039
is is maybe not appropriate and we need

553
00:22:53,039 --> 00:22:54,640
you know some tailored for specific

554
00:22:54,640 --> 00:22:57,120
environments

555
00:22:57,120 --> 00:22:59,440
i can tell i believe the most of the

556
00:22:59,440 --> 00:23:01,200
focus was on uh

557
00:23:01,200 --> 00:23:04,400
the last mile uh 4g and 5g access that

558
00:23:04,400 --> 00:23:06,480
was being was quoted driving but i

559
00:23:06,480 --> 00:23:08,320
haven't thought about the data center

560
00:23:08,320 --> 00:23:10,960
the data center for instance if that is

561
00:23:10,960 --> 00:23:13,760
applicable there and i somehow suspect

562
00:23:13,760 --> 00:23:14,640
that the

563
00:23:14,640 --> 00:23:19,039
other algorithms like if we look at the

564
00:23:19,039 --> 00:23:21,280
frog or bb or version 2 or something

565
00:23:21,280 --> 00:23:23,280
like that could be more applicable there

566
00:23:23,280 --> 00:23:25,440
i'm not sure but

567
00:23:25,440 --> 00:23:28,320
it's a pretty tailored to the streaming

568
00:23:28,320 --> 00:23:31,919
of the rtp media in this case and

569
00:23:31,919 --> 00:23:34,559
not sure how useful it is in a wider

570
00:23:34,559 --> 00:23:37,120
context

571
00:23:37,120 --> 00:23:39,360
follow-up do you think that the

572
00:23:39,360 --> 00:23:40,480
direction

573
00:23:40,480 --> 00:23:42,559
matters were you mostly optimizing for

574
00:23:42,559 --> 00:23:43,760
send from

575
00:23:43,760 --> 00:23:45,360
uh from a

576
00:23:45,360 --> 00:23:47,600
client or were you mostly optimizing for

577
00:23:47,600 --> 00:23:48,880
receive

578
00:23:48,880 --> 00:23:51,840
from the clients

579
00:23:51,840 --> 00:23:53,600
uh i'm not sure if honest to the

580
00:23:53,600 --> 00:23:54,960
question

581
00:23:54,960 --> 00:23:56,880
are you trying to optimize uh was screen

582
00:23:56,880 --> 00:23:58,880
mostly trying to optimize the transmit

583
00:23:58,880 --> 00:24:01,039
video of a mobile endpoint or the

584
00:24:01,039 --> 00:24:03,440
receive video of a mobile endpoint or do

585
00:24:03,440 --> 00:24:04,799
you think that you tried to actually

586
00:24:04,799 --> 00:24:08,080
optimize both directions equally

587
00:24:08,080 --> 00:24:09,520
yeah i believe the

588
00:24:09,520 --> 00:24:11,679
the actual scream algorithm

589
00:24:11,679 --> 00:24:12,799
that is

590
00:24:12,799 --> 00:24:15,840
it doesn't really optimize uh if you

591
00:24:15,840 --> 00:24:17,520
look at it and think about

592
00:24:17,520 --> 00:24:19,279
the heater buffers for instance that is

593
00:24:19,279 --> 00:24:21,360
up to the for instance the key streamer

594
00:24:21,360 --> 00:24:23,520
pipeline to handle

595
00:24:23,520 --> 00:24:25,520
and it doesn't do re-transmissions and

596
00:24:25,520 --> 00:24:27,120
that stuff and uh

597
00:24:27,120 --> 00:24:28,240
it just

598
00:24:28,240 --> 00:24:30,720
handles the congestion control without

599
00:24:30,720 --> 00:24:31,600
uh

600
00:24:31,600 --> 00:24:33,360
like it's like tcp without

601
00:24:33,360 --> 00:24:35,840
re-transmissions more or less

602
00:24:35,840 --> 00:24:38,159
but it's another retardation algorithm

603
00:24:38,159 --> 00:24:40,320
that is more sensitive to their delay

604
00:24:40,320 --> 00:24:43,320
increasing

605
00:24:52,640 --> 00:24:56,640
well moe left the queue at least so i

606
00:24:56,640 --> 00:24:58,559
i guess it did do we have any last

607
00:24:58,559 --> 00:25:00,960
questions

608
00:25:03,200 --> 00:25:05,200
no if not thank you very much ingmar for

609
00:25:05,200 --> 00:25:08,799
the update on screen scream and

610
00:25:08,799 --> 00:25:09,600
then

611
00:25:09,600 --> 00:25:13,639
david you're up next

612
00:25:21,600 --> 00:25:23,679
okay we see your slides

613
00:25:23,679 --> 00:25:26,480
okay thank you

614
00:25:26,480 --> 00:25:28,880
well this is an update on the

615
00:25:28,880 --> 00:25:30,960
shared bottleneck detection work and

616
00:25:30,960 --> 00:25:33,600
thanks to michael and simona for

617
00:25:33,600 --> 00:25:37,120
their help putting this together

618
00:25:40,840 --> 00:25:43,440
oops i have to make sure i'm on the

619
00:25:43,440 --> 00:25:45,679
right window i think before the slides

620
00:25:45,679 --> 00:25:47,919
move

621
00:25:51,679 --> 00:25:55,120
okay some work that's happened probably

622
00:25:55,120 --> 00:25:57,279
since the last time

623
00:25:57,279 --> 00:26:00,320
we were here which was quite a while ago

624
00:26:00,320 --> 00:26:03,679
there's been some work putting

625
00:26:03,679 --> 00:26:04,480
um

626
00:26:04,480 --> 00:26:07,039
basically the rsc version of sbd in

627
00:26:07,039 --> 00:26:10,640
multipath tcp and in multi-path quick

628
00:26:10,640 --> 00:26:12,159
and

629
00:26:12,159 --> 00:26:15,600
what we'll be talking about

630
00:26:15,600 --> 00:26:18,480
uh what i'll be talking about

631
00:26:18,480 --> 00:26:20,000
today is

632
00:26:20,000 --> 00:26:22,000
is a thorough comparative study that

633
00:26:22,000 --> 00:26:23,440
we've done

634
00:26:23,440 --> 00:26:27,039
of rfc 8382

635
00:26:27,039 --> 00:26:30,080
and we recently had it published in

636
00:26:30,080 --> 00:26:34,720
ieee acm transactions and networking

637
00:26:35,200 --> 00:26:38,400
now what we do is we compare the vanilla

638
00:26:38,400 --> 00:26:41,400
rfc8382

639
00:26:41,600 --> 00:26:43,120
with

640
00:26:43,120 --> 00:26:44,000
that

641
00:26:44,000 --> 00:26:47,200
with the stat statistics that we collect

642
00:26:47,200 --> 00:26:48,320
that

643
00:26:48,320 --> 00:26:51,520
but a different type of way of grouping

644
00:26:51,520 --> 00:26:54,080
a dynamic online clustering

645
00:26:54,080 --> 00:26:55,200
method

646
00:26:55,200 --> 00:26:57,600
and then we compare that with what was

647
00:26:57,600 --> 00:26:59,520
one of the most promising ones in the

648
00:26:59,520 --> 00:27:01,200
literature

649
00:27:01,200 --> 00:27:02,799
a different type of method a

650
00:27:02,799 --> 00:27:05,440
cross-correlation method that originally

651
00:27:05,440 --> 00:27:08,000
was an offline method

652
00:27:08,000 --> 00:27:12,240
and also our online adaption of that and

653
00:27:12,240 --> 00:27:13,039
we

654
00:27:13,039 --> 00:27:14,880
in the paper we look at

655
00:27:14,880 --> 00:27:16,559
teacup test bed

656
00:27:16,559 --> 00:27:17,919
experiments

657
00:27:17,919 --> 00:27:19,760
simulations

658
00:27:19,760 --> 00:27:21,679
some experiments over the internet as

659
00:27:21,679 --> 00:27:23,360
well and we can

660
00:27:23,360 --> 00:27:25,440
what we will look at today

661
00:27:25,440 --> 00:27:26,559
is

662
00:27:26,559 --> 00:27:30,159
the time it takes to detect a bottleneck

663
00:27:30,159 --> 00:27:33,600
and to detect the bottleneck's gone away

664
00:27:33,600 --> 00:27:37,120
um the effect of different path delays

665
00:27:37,120 --> 00:27:40,080
on how well you can detect bottlenecks

666
00:27:40,080 --> 00:27:40,799
and

667
00:27:40,799 --> 00:27:42,640
the effect of having lots and lots of

668
00:27:42,640 --> 00:27:44,480
parallel bottlenecks and of course

669
00:27:44,480 --> 00:27:46,159
there's more in the paper if you want to

670
00:27:46,159 --> 00:27:49,399
read it

671
00:27:50,320 --> 00:27:51,440
now the

672
00:27:51,440 --> 00:27:54,320
the rmcat

673
00:27:54,480 --> 00:27:56,480
version is

674
00:27:56,480 --> 00:27:58,720
is based on summary statistics it was

675
00:27:58,720 --> 00:28:01,200
based on summary statistics because

676
00:28:01,200 --> 00:28:02,480
originally

677
00:28:02,480 --> 00:28:04,799
one of the requirements was

678
00:28:04,799 --> 00:28:06,640
um

679
00:28:06,640 --> 00:28:07,679
very

680
00:28:07,679 --> 00:28:10,159
low feedback overhead so with this

681
00:28:10,159 --> 00:28:11,440
method

682
00:28:11,440 --> 00:28:12,799
we send

683
00:28:12,799 --> 00:28:16,559
the summary statistics not very often

684
00:28:16,559 --> 00:28:19,120
and it allows it also allows for us to

685
00:28:19,120 --> 00:28:20,799
detect bottlenecks

686
00:28:20,799 --> 00:28:23,120
on senders or receivers

687
00:28:23,120 --> 00:28:26,320
and work with both

688
00:28:26,320 --> 00:28:28,399
it's a divide and conquer method the one

689
00:28:28,399 --> 00:28:31,360
that's written up in the rfc

690
00:28:31,360 --> 00:28:32,480
where we

691
00:28:32,480 --> 00:28:35,120
and it's very simple very light

692
00:28:35,120 --> 00:28:36,799
where we take

693
00:28:36,799 --> 00:28:38,559
take our flows in our measurements and

694
00:28:38,559 --> 00:28:40,640
first divide them into what's

695
00:28:40,640 --> 00:28:41,919
what flows they're experiencing

696
00:28:41,919 --> 00:28:43,760
congestion and what not

697
00:28:43,760 --> 00:28:48,000
then we take that group and subdivide it

698
00:28:48,000 --> 00:28:50,080
according to an estimate of the

699
00:28:50,080 --> 00:28:51,600
oscillation

700
00:28:51,600 --> 00:28:55,600
then we'll look at the very

701
00:28:55,600 --> 00:28:58,240
sort of variance how they vary as a

702
00:28:58,240 --> 00:29:00,320
summary statistic and then

703
00:29:00,320 --> 00:29:03,039
an estimate of the skew and then

704
00:29:03,039 --> 00:29:04,480
if

705
00:29:04,480 --> 00:29:06,320
if the packet loss is high enough to be

706
00:29:06,320 --> 00:29:08,559
statistically relevant then look at

707
00:29:08,559 --> 00:29:10,640
packet loss as well dividing into

708
00:29:10,640 --> 00:29:13,200
smaller and smaller groups till we

709
00:29:13,200 --> 00:29:16,320
end up with the final

710
00:29:18,240 --> 00:29:20,399
the most common question we were asked

711
00:29:20,399 --> 00:29:21,919
is why don't we use a clustering

712
00:29:21,919 --> 00:29:25,039
algorithm and that tends to be difficult

713
00:29:25,039 --> 00:29:26,320
because we don't know the number of

714
00:29:26,320 --> 00:29:29,200
groups we the number of groups keeps

715
00:29:29,200 --> 00:29:30,960
changing and

716
00:29:30,960 --> 00:29:32,960
the flows in each group can keep

717
00:29:32,960 --> 00:29:34,240
changing

718
00:29:34,240 --> 00:29:35,919
but we

719
00:29:35,919 --> 00:29:39,520
have got a novel iterative one that we

720
00:29:39,520 --> 00:29:40,559
present

721
00:29:40,559 --> 00:29:42,320
and it

722
00:29:42,320 --> 00:29:44,399
it sort of does the closest neighbor by

723
00:29:44,399 --> 00:29:47,520
an inverse square law

724
00:29:49,360 --> 00:29:50,640
now the

725
00:29:50,640 --> 00:29:52,799
other main way of doing this sort of

726
00:29:52,799 --> 00:29:54,960
thing is to correlate the different

727
00:29:54,960 --> 00:29:57,520
flows but because one-way delay is so

728
00:29:57,520 --> 00:29:59,600
noisy if you don't use summary

729
00:29:59,600 --> 00:30:01,840
statistics to help with noise

730
00:30:01,840 --> 00:30:04,080
then you need to filter it some way and

731
00:30:04,080 --> 00:30:05,440
this uses

732
00:30:05,440 --> 00:30:08,159
wavelet filtering techniques which are

733
00:30:08,159 --> 00:30:11,039
easily implementable in an online way as

734
00:30:11,039 --> 00:30:11,760
well

735
00:30:11,760 --> 00:30:13,360
but the original one

736
00:30:13,360 --> 00:30:14,320
takes

737
00:30:14,320 --> 00:30:17,440
the whole delay trace of every flow

738
00:30:17,440 --> 00:30:19,440
puts it into matlab and gets matlab to

739
00:30:19,440 --> 00:30:21,279
work out what the optimal filter

740
00:30:21,279 --> 00:30:23,360
characteristics are for the whole

741
00:30:23,360 --> 00:30:25,360
of everything so you need a crystal ball

742
00:30:25,360 --> 00:30:26,559
for this one

743
00:30:26,559 --> 00:30:28,960
and then filters the trace and then does

744
00:30:28,960 --> 00:30:32,559
pairwise correlation coefficients

745
00:30:32,559 --> 00:30:34,640
okay our version

746
00:30:34,640 --> 00:30:37,440
a a slight modification of that works

747
00:30:37,440 --> 00:30:40,000
out when's a good time to estimate good

748
00:30:40,000 --> 00:30:42,480
filter coefficients and then estimates

749
00:30:42,480 --> 00:30:45,279
them on the fly

750
00:30:48,480 --> 00:30:52,080
okay firstly looking at detection delays

751
00:30:52,080 --> 00:30:54,240
so how long does it take after a

752
00:30:54,240 --> 00:30:56,240
bottleneck starts if we know ground

753
00:30:56,240 --> 00:30:58,880
truth than we did in this experiments

754
00:30:58,880 --> 00:30:59,760
um

755
00:30:59,760 --> 00:31:01,200
before we

756
00:31:01,200 --> 00:31:02,320
can say

757
00:31:02,320 --> 00:31:04,880
there's a shared bottleneck and then

758
00:31:04,880 --> 00:31:07,679
after it goes away how long before

759
00:31:07,679 --> 00:31:09,600
each of these algorithms can say it's

760
00:31:09,600 --> 00:31:10,880
stopped

761
00:31:10,880 --> 00:31:12,480
and

762
00:31:12,480 --> 00:31:15,120
it's not that surprising that the

763
00:31:15,120 --> 00:31:19,360
offline crystal ball method in green

764
00:31:19,360 --> 00:31:21,600
works out the start of bottleneck very

765
00:31:21,600 --> 00:31:22,960
very quickly

766
00:31:22,960 --> 00:31:24,799
it's not so good at detecting the end

767
00:31:24,799 --> 00:31:26,960
because it was never designed

768
00:31:26,960 --> 00:31:27,840
to do

769
00:31:27,840 --> 00:31:30,320
anything but detect bottlenecks not not

770
00:31:30,320 --> 00:31:32,880
stop them um

771
00:31:32,880 --> 00:31:36,880
our online version of that in yellow

772
00:31:36,880 --> 00:31:38,240
also

773
00:31:38,240 --> 00:31:40,480
is similar not quite as good because

774
00:31:40,480 --> 00:31:43,120
it's not optimal i suppose

775
00:31:43,120 --> 00:31:47,360
then we have the rfc based ones the dc

776
00:31:47,360 --> 00:31:50,000
sbd is the clustering dynamic clustering

777
00:31:50,000 --> 00:31:54,799
one and our mcat sbd is a straight rfc

778
00:31:54,799 --> 00:31:56,880
and you can see that

779
00:31:56,880 --> 00:31:59,279
the summary statistic ones introduce

780
00:31:59,279 --> 00:32:01,200
some lag and it takes

781
00:32:01,200 --> 00:32:03,279
you know up to about four seconds

782
00:32:03,279 --> 00:32:06,559
sometimes more to detect or the start or

783
00:32:06,559 --> 00:32:07,519
a stop

784
00:32:07,519 --> 00:32:10,399
of a bottleneck

785
00:32:12,399 --> 00:32:15,360
now what we did here is different paths

786
00:32:15,360 --> 00:32:17,120
have different delays

787
00:32:17,120 --> 00:32:19,440
so if all of the

788
00:32:19,440 --> 00:32:21,279
the paths that the flows are going on

789
00:32:21,279 --> 00:32:23,440
have exactly the same delay then the

790
00:32:23,440 --> 00:32:26,320
source lag difference we say is zero

791
00:32:26,320 --> 00:32:28,960
but if the difference between

792
00:32:28,960 --> 00:32:31,440
the flow with the shortest

793
00:32:31,440 --> 00:32:32,640
um

794
00:32:32,640 --> 00:32:34,720
shortest

795
00:32:34,720 --> 00:32:36,799
transit time propagation delay and the

796
00:32:36,799 --> 00:32:38,080
longest

797
00:32:38,080 --> 00:32:41,440
propagation delay is 1000 seconds then

798
00:32:41,440 --> 00:32:43,120
and here the source lag difference would

799
00:32:43,120 --> 00:32:45,039
be one thousand

800
00:32:45,039 --> 00:32:47,919
and what you see here is as

801
00:32:47,919 --> 00:32:49,679
the difference between

802
00:32:49,679 --> 00:32:51,679
the propagation delays of the different

803
00:32:51,679 --> 00:32:54,640
flows increase

804
00:32:54,840 --> 00:32:57,919
the the summary statistic methods handle

805
00:32:57,919 --> 00:33:00,000
that very well

806
00:33:00,000 --> 00:33:02,399
but the correlation ones

807
00:33:02,399 --> 00:33:03,600
the

808
00:33:03,600 --> 00:33:05,279
the more lag we get

809
00:33:05,279 --> 00:33:07,440
the less well they handle it

810
00:33:07,440 --> 00:33:10,240
and you can see that by them the

811
00:33:10,240 --> 00:33:12,559
efficiency we use the f1 score for

812
00:33:12,559 --> 00:33:15,200
accuracy in this case

813
00:33:15,200 --> 00:33:18,240
um which is sort of a harmonic is uh

814
00:33:18,240 --> 00:33:20,960
harmonic mean of precision and recall

815
00:33:20,960 --> 00:33:22,320
but

816
00:33:22,320 --> 00:33:24,720
they drop off quite sharply

817
00:33:24,720 --> 00:33:26,799
after you get above 100 milliseconds in

818
00:33:26,799 --> 00:33:29,360
this case

819
00:33:30,720 --> 00:33:32,480
now the other thing we looked at is what

820
00:33:32,480 --> 00:33:34,240
happens if we have lots and lots and

821
00:33:34,240 --> 00:33:37,120
lots of parallel bottlenecks at once

822
00:33:37,120 --> 00:33:39,200
how does that affect the efficiency and

823
00:33:39,200 --> 00:33:42,720
we find out that the rfc version

824
00:33:42,720 --> 00:33:44,480
after we get above

825
00:33:44,480 --> 00:33:46,880
four parallel bottom x

826
00:33:46,880 --> 00:33:49,679
um starts to sort of drop off

827
00:33:49,679 --> 00:33:52,960
in its accuracy the

828
00:33:52,960 --> 00:33:55,760
dynamic clustering method that we have

829
00:33:55,760 --> 00:33:58,080
um improves on that with the summary

830
00:33:58,080 --> 00:34:00,000
statistics and

831
00:34:00,000 --> 00:34:01,120
the

832
00:34:01,120 --> 00:34:03,360
cross correlation wavelet filtered

833
00:34:03,360 --> 00:34:04,880
methods

834
00:34:04,880 --> 00:34:07,360
are pretty pretty straight

835
00:34:07,360 --> 00:34:09,199
regardless of how many parallel bolt

836
00:34:09,199 --> 00:34:11,918
necks we have

837
00:34:13,839 --> 00:34:16,480
so in conclusion

838
00:34:16,480 --> 00:34:18,800
rfc8382

839
00:34:18,800 --> 00:34:21,440
performs pretty well as simple it's

840
00:34:21,440 --> 00:34:23,520
light it's really fast compared to all

841
00:34:23,520 --> 00:34:24,719
of the others

842
00:34:24,719 --> 00:34:27,599
it handles path delay as well

843
00:34:27,599 --> 00:34:29,760
summary statistics introduce a lag so

844
00:34:29,760 --> 00:34:32,839
that slows it down in detecting and

845
00:34:32,839 --> 00:34:36,000
undetecting and if you have high numbers

846
00:34:36,000 --> 00:34:38,079
of parallel bottles next then a

847
00:34:38,079 --> 00:34:40,719
different grouping mechanism such as

848
00:34:40,719 --> 00:34:44,079
the one that we proposed here

849
00:34:44,079 --> 00:34:44,960
um

850
00:34:44,960 --> 00:34:47,679
improves on that

851
00:34:47,679 --> 00:34:50,239
now a limitation of all

852
00:34:50,239 --> 00:34:52,320
of these methods

853
00:34:52,320 --> 00:34:55,199
and pretty all shared bottleneck

854
00:34:55,199 --> 00:34:57,119
detection methods is they assume that

855
00:34:57,119 --> 00:35:00,000
bottlenecks have measurable similarities

856
00:35:00,000 --> 00:35:01,520
and all flows

857
00:35:01,520 --> 00:35:03,440
for all flows sharing them a sort of a

858
00:35:03,440 --> 00:35:05,760
bottleneck signature

859
00:35:05,760 --> 00:35:07,760
and a counter example

860
00:35:07,760 --> 00:35:09,680
is that if one

861
00:35:09,680 --> 00:35:12,560
your sending pattern dominates

862
00:35:12,560 --> 00:35:14,800
a bottleneck then what you end up

863
00:35:14,800 --> 00:35:17,839
correlating is sending patterns

864
00:35:17,839 --> 00:35:20,480
rather than a bottleneck signature

865
00:35:20,480 --> 00:35:22,320
and that potentially in some

866
00:35:22,320 --> 00:35:25,280
circumstances can mean that you

867
00:35:25,280 --> 00:35:27,200
group flows together because their

868
00:35:27,200 --> 00:35:29,280
sending patterns matched not that they

869
00:35:29,280 --> 00:35:32,800
were sharing a common bottleneck

870
00:35:33,680 --> 00:35:35,760
so the path forward

871
00:35:35,760 --> 00:35:38,480
we think that

872
00:35:38,480 --> 00:35:41,440
for a proposed standard to be useful

873
00:35:41,440 --> 00:35:44,320
then that limitation should be addressed

874
00:35:44,320 --> 00:35:46,079
first

875
00:35:46,079 --> 00:35:48,000
and addressing it

876
00:35:48,000 --> 00:35:49,880
may be

877
00:35:49,880 --> 00:35:51,440
algorithm-dependent

878
00:35:51,440 --> 00:35:53,280
so it may depend on whether you're using

879
00:35:53,280 --> 00:35:55,920
scream or whatever and you may have to

880
00:35:55,920 --> 00:35:56,839
have that

881
00:35:56,839 --> 00:35:59,760
knowledge a generic algorithm may be

882
00:35:59,760 --> 00:36:02,000
possible using the ideas of sort of a

883
00:36:02,000 --> 00:36:04,880
speakerphone cancelling out

884
00:36:04,880 --> 00:36:06,640
feedback so you may be able to do it

885
00:36:06,640 --> 00:36:08,720
that way as well but that requires a bit

886
00:36:08,720 --> 00:36:10,720
more research

887
00:36:10,720 --> 00:36:12,640
or the other thing you could do is just

888
00:36:12,640 --> 00:36:14,880
note that it's happening and then when

889
00:36:14,880 --> 00:36:18,240
it's happening treat your sbd results

890
00:36:18,240 --> 00:36:20,320
accordingly

891
00:36:20,320 --> 00:36:21,359
and

892
00:36:21,359 --> 00:36:23,440
we're calling on any interested parties

893
00:36:23,440 --> 00:36:26,079
to continue this week

894
00:36:26,079 --> 00:36:28,560
thank you

895
00:36:28,800 --> 00:36:31,200
okay thank you david for the update on

896
00:36:31,200 --> 00:36:32,400
spd

897
00:36:32,400 --> 00:36:34,160
do we have any

898
00:36:34,160 --> 00:36:36,720
quick questions for for david

899
00:36:36,720 --> 00:36:38,720
otherwise it's nice to see that the

900
00:36:38,720 --> 00:36:40,960
standard version still looks to be

901
00:36:40,960 --> 00:36:42,400
performing quite well in your

902
00:36:42,400 --> 00:36:45,119
evaluations

903
00:36:46,000 --> 00:36:49,119
very simple and light comparatively the

904
00:36:49,119 --> 00:36:51,119
once you go to clustering it's a lot

905
00:36:51,119 --> 00:36:55,839
more cpu to do the work

906
00:36:56,240 --> 00:36:57,440
sorry

907
00:36:57,440 --> 00:37:01,599
so david did you look at

908
00:37:01,599 --> 00:37:04,960
um more complex layer 2 bottlenecks

909
00:37:04,960 --> 00:37:06,640
where you've got some sort of um

910
00:37:06,640 --> 00:37:08,960
algorithm going underneath to allocate

911
00:37:08,960 --> 00:37:10,560
bandwidth and

912
00:37:10,560 --> 00:37:12,560
the bottleneck kind of is changeable

913
00:37:12,560 --> 00:37:14,240
maybe not characterizable did you

914
00:37:14,240 --> 00:37:15,920
actually manage to touch any of that

915
00:37:15,920 --> 00:37:17,200
aspect when you were doing your

916
00:37:17,200 --> 00:37:20,319
exploration and thinking

917
00:37:21,680 --> 00:37:23,839
can you just explain a little more

918
00:37:23,839 --> 00:37:25,599
because i'm just trying to picture what

919
00:37:25,599 --> 00:37:26,720
you're sure

920
00:37:26,720 --> 00:37:28,640
so i'm thinking about a radial link

921
00:37:28,640 --> 00:37:30,640
that's actually doing some sort of um

922
00:37:30,640 --> 00:37:32,640
adaptive bottleneck

923
00:37:32,640 --> 00:37:35,599
adaptive bitrate method maybe to counter

924
00:37:35,599 --> 00:37:39,280
rain fade or um movement of the

925
00:37:39,280 --> 00:37:41,599
of the parties

926
00:37:41,599 --> 00:37:43,760
and then your bottleneck doesn't fit any

927
00:37:43,760 --> 00:37:45,440
mold and presumably you have to kind of

928
00:37:45,440 --> 00:37:46,960
reject this one as being difficult to

929
00:37:46,960 --> 00:37:48,160
characterize

930
00:37:48,160 --> 00:37:48,960
but

931
00:37:48,960 --> 00:37:50,800
did you think about these kind of really

932
00:37:50,800 --> 00:37:53,599
odd ones that also appear

933
00:37:53,599 --> 00:37:55,920
um

934
00:37:56,000 --> 00:37:58,720
i can't say that we've thought that much

935
00:37:58,720 --> 00:38:01,119
about that one and that

936
00:38:01,119 --> 00:38:03,599
has the same sort of limitation instead

937
00:38:03,599 --> 00:38:06,240
except in this time instead of the

938
00:38:06,240 --> 00:38:08,320
descending one you're

939
00:38:08,320 --> 00:38:10,160
you have this other pattern being

940
00:38:10,160 --> 00:38:11,920
introduced

941
00:38:11,920 --> 00:38:14,079
so

942
00:38:15,359 --> 00:38:17,040
you have to have some way of filtering

943
00:38:17,040 --> 00:38:19,599
that out so you see

944
00:38:19,599 --> 00:38:22,400
so you're able to compare it and

945
00:38:22,400 --> 00:38:23,760
at the moment

946
00:38:23,760 --> 00:38:24,720
all

947
00:38:24,720 --> 00:38:26,640
detection methods have this

948
00:38:26,640 --> 00:38:29,200
same problem

949
00:38:29,200 --> 00:38:31,440
yeah i i really enjoyed your your

950
00:38:31,440 --> 00:38:33,280
feedback so that was a super

951
00:38:33,280 --> 00:38:35,760
presentation and look forward to hearing

952
00:38:35,760 --> 00:38:37,440
more when other people advance this

953
00:38:37,440 --> 00:38:39,680
thing

954
00:38:40,720 --> 00:38:43,280
okay excellent so thank you very much

955
00:38:43,280 --> 00:38:44,839
david for that

956
00:38:44,839 --> 00:38:47,839
update i don't see anyone else in the

957
00:38:47,839 --> 00:38:49,920
queue and i think we also need to move

958
00:38:49,920 --> 00:38:53,280
on to the next presentation so colin you

959
00:38:53,280 --> 00:38:56,000
are up next

960
00:38:57,599 --> 00:38:59,119
all right

961
00:38:59,119 --> 00:39:03,440
i can make the shot slides

962
00:39:06,320 --> 00:39:09,280
okay is this working

963
00:39:09,920 --> 00:39:14,000
yes yes yes okay so hi i'm colin perkins

964
00:39:14,000 --> 00:39:15,920
i'm going to talk quickly uh about some

965
00:39:15,920 --> 00:39:17,760
of the uh overheads of congestion

966
00:39:17,760 --> 00:39:21,040
control feedback in rtp uh

967
00:39:21,040 --> 00:39:22,960
which is the the final working group

968
00:39:22,960 --> 00:39:26,560
draft we we have in this this group

969
00:39:26,560 --> 00:39:29,599
um so the uh goal of this draft is to

970
00:39:29,599 --> 00:39:31,839
outline some of the overheads of using

971
00:39:31,839 --> 00:39:33,520
the the various congestion control

972
00:39:33,520 --> 00:39:35,359
feedback packets that we we've defined

973
00:39:35,359 --> 00:39:38,000
in this group um so so it's looking at

974
00:39:38,000 --> 00:39:41,760
the rfc 888 method

975
00:39:41,760 --> 00:39:43,040
applying this

976
00:39:43,040 --> 00:39:45,119
along with the other types of feedback

977
00:39:45,119 --> 00:39:46,480
you get

978
00:39:46,480 --> 00:39:48,160
you know the the various compounded

979
00:39:48,160 --> 00:39:49,760
non-compound packets the different

980
00:39:49,760 --> 00:39:51,839
feedback profiles uh the different

981
00:39:51,839 --> 00:39:54,079
reporting extensions and so on

982
00:39:54,079 --> 00:39:56,800
um to try and sort of work through the

983
00:39:56,800 --> 00:39:59,280
calculations and show what sort of

984
00:39:59,280 --> 00:40:01,680
overhead you get from sending congestion

985
00:40:01,680 --> 00:40:04,000
control feedback in in some typical

986
00:40:04,000 --> 00:40:05,040
cases

987
00:40:05,040 --> 00:40:08,240
uh so people can so get get an idea of

988
00:40:08,240 --> 00:40:09,280
um

989
00:40:09,280 --> 00:40:10,960
what's the cost of doing congestion

990
00:40:10,960 --> 00:40:13,040
control and what are the factors that

991
00:40:13,040 --> 00:40:16,000
influence that cost

992
00:40:16,640 --> 00:40:20,079
so it uh looks at two uh relatively

993
00:40:20,079 --> 00:40:22,640
straightforward cases um the first being

994
00:40:22,640 --> 00:40:24,560
that the voice over ap case and the

995
00:40:24,560 --> 00:40:27,200
second one being a simple point-to-point

996
00:40:27,200 --> 00:40:29,760
video case

997
00:40:29,760 --> 00:40:31,599
so in in the voiceover ap case we're

998
00:40:31,599 --> 00:40:33,599
looking at two-part party voice call

999
00:40:33,599 --> 00:40:37,359
sending um frames um you know uh

1000
00:40:37,359 --> 00:40:40,400
so so so so many uh voice packets per

1001
00:40:40,400 --> 00:40:42,160
second i'm wanting to send congestion

1002
00:40:42,160 --> 00:40:44,560
feedback uh um either every frame every

1003
00:40:44,560 --> 00:40:46,880
second frame or so on

1004
00:40:46,880 --> 00:40:49,359
uh we're trying to set the rtcp

1005
00:40:49,359 --> 00:40:51,040
reporting interval so we're sending our

1006
00:40:51,040 --> 00:40:54,240
tcp reports every few audio frames maybe

1007
00:40:54,240 --> 00:40:56,079
every second frame every fourth every

1008
00:40:56,079 --> 00:40:59,359
sixteenth frame or or whatever

1009
00:40:59,359 --> 00:41:01,200
uh and obviously we there's different

1010
00:41:01,200 --> 00:41:04,640
ways of configuring rtp uh rtp and rtcp

1011
00:41:04,640 --> 00:41:06,480
and we we can send the

1012
00:41:06,480 --> 00:41:08,480
the reports that the feedback reports

1013
00:41:08,480 --> 00:41:11,200
either as um regular compound rtcp

1014
00:41:11,200 --> 00:41:14,640
packets or as non-compound packets

1015
00:41:14,640 --> 00:41:16,400
uh i mean we can mix and match between

1016
00:41:16,400 --> 00:41:18,079
these so so we can either send compound

1017
00:41:18,079 --> 00:41:19,839
packets every time or we can send

1018
00:41:19,839 --> 00:41:22,000
compound packets with uh non-compound

1019
00:41:22,000 --> 00:41:24,960
packets between them

1020
00:41:26,240 --> 00:41:28,079
uh so the draft works through uh the

1021
00:41:28,079 --> 00:41:30,720
format of a bunch of these packets so it

1022
00:41:30,720 --> 00:41:32,400
starts by looking at the format of a

1023
00:41:32,400 --> 00:41:35,200
compound rtcp feedback packet

1024
00:41:35,200 --> 00:41:37,520
and it sort of looks looks at the size

1025
00:41:37,520 --> 00:41:38,960
of the various headers so it says if

1026
00:41:38,960 --> 00:41:42,720
we're using udp uh an ipv ipv4 you've

1027
00:41:42,720 --> 00:41:45,119
got a certain size of header

1028
00:41:45,119 --> 00:41:47,920
you've got a certain size of

1029
00:41:47,920 --> 00:41:50,720
header and and overhead for the sender

1030
00:41:50,720 --> 00:41:52,560
reports

1031
00:41:52,560 --> 00:41:54,240
you know a certain size of source

1032
00:41:54,240 --> 00:41:56,640
description packet uh a certain amount

1033
00:41:56,640 --> 00:41:58,560
of congestion control feedback packets

1034
00:41:58,560 --> 00:42:00,079
so the srt

1035
00:42:00,079 --> 00:42:03,200
srtcp authentication tag and so on and

1036
00:42:03,200 --> 00:42:04,240
i'm not going to talk through all the

1037
00:42:04,240 --> 00:42:06,160
numbers here but the draft works through

1038
00:42:06,160 --> 00:42:08,000
sort of counting you know the number of

1039
00:42:08,000 --> 00:42:10,000
bytes in each of these to figure out the

1040
00:42:10,000 --> 00:42:12,960
the packet sizes

1041
00:42:13,680 --> 00:42:14,720
and it does the same for the

1042
00:42:14,720 --> 00:42:17,359
non-compound packets which just send the

1043
00:42:17,359 --> 00:42:19,040
congestion control feedback report and

1044
00:42:19,040 --> 00:42:21,599
don't have the the other uh

1045
00:42:21,599 --> 00:42:24,890
rtcp packets stacked in there

1046
00:42:24,890 --> 00:42:26,160
[Music]

1047
00:42:26,160 --> 00:42:27,760
obviously you get a much smaller packet

1048
00:42:27,760 --> 00:42:29,119
because you don't have the source

1049
00:42:29,119 --> 00:42:30,560
description packets and the sender

1050
00:42:30,560 --> 00:42:33,279
reports and so

1051
00:42:34,079 --> 00:42:36,960
um a real system would then send a mix

1052
00:42:36,960 --> 00:42:39,119
of these so it has to send occasional

1053
00:42:39,119 --> 00:42:42,079
non occasional compound packets in order

1054
00:42:42,079 --> 00:42:44,000
to keep rtp working because you need the

1055
00:42:44,000 --> 00:42:45,599
occasional sender reports and source

1056
00:42:45,599 --> 00:42:47,760
description packets and then in between

1057
00:42:47,760 --> 00:42:49,280
that it will send

1058
00:42:49,280 --> 00:42:51,040
non-compound packets

1059
00:42:51,040 --> 00:42:52,880
that are just sending congestion control

1060
00:42:52,880 --> 00:42:55,040
feedback to reduce the overhead

1061
00:42:55,040 --> 00:42:56,720
and obviously you can change the balance

1062
00:42:56,720 --> 00:42:58,560
between these and what we're seeing on

1063
00:42:58,560 --> 00:43:00,960
the slide is something that sends one uh

1064
00:43:00,960 --> 00:43:02,560
compound packet followed by a couple of

1065
00:43:02,560 --> 00:43:05,040
non-compound packets uh in a repeating

1066
00:43:05,040 --> 00:43:06,240
pattern

1067
00:43:06,240 --> 00:43:08,960
um and you know in some cases you could

1068
00:43:08,960 --> 00:43:10,960
just send the compound packets or you

1069
00:43:10,960 --> 00:43:14,000
could have you know one or two or three

1070
00:43:14,000 --> 00:43:16,000
or whatever non-compound packets in

1071
00:43:16,000 --> 00:43:18,400
between

1072
00:43:20,079 --> 00:43:22,160
the draft then sort of looks at how you

1073
00:43:22,160 --> 00:43:23,680
do the calculation to figure out the

1074
00:43:23,680 --> 00:43:26,160
overheads uh and it take it goes through

1075
00:43:26,160 --> 00:43:29,119
the rfc 3550 reporting interval

1076
00:43:29,119 --> 00:43:31,359
calculation uh and shows that the the

1077
00:43:31,359 --> 00:43:32,880
reporting interval depends on the number

1078
00:43:32,880 --> 00:43:34,640
of participants in the session the

1079
00:43:34,640 --> 00:43:37,359
average size of the packets uh the rtcp

1080
00:43:37,359 --> 00:43:40,800
bandwidth fraction has been allocated

1081
00:43:40,800 --> 00:43:42,880
um and that lets you you work out the

1082
00:43:42,880 --> 00:43:45,599
the rtcp reporting interval um if we

1083
00:43:45,599 --> 00:43:48,000
want to send a congestion control report

1084
00:43:48,000 --> 00:43:49,200
every um

1085
00:43:49,200 --> 00:43:50,880
a certain number of frames you set the

1086
00:43:50,880 --> 00:43:53,119
reporting interval to be you know that

1087
00:43:53,119 --> 00:43:55,920
that that number times the um the

1088
00:43:55,920 --> 00:43:58,079
framing interval and you you work

1089
00:43:58,079 --> 00:43:59,599
through the maths and that gives you a

1090
00:43:59,599 --> 00:44:01,760
fraction for the the bandwidth overhead

1091
00:44:01,760 --> 00:44:03,839
that you'll get if if you want to send

1092
00:44:03,839 --> 00:44:05,920
rtcp reports

1093
00:44:05,920 --> 00:44:08,720
at that particular rate in order to get

1094
00:44:08,720 --> 00:44:12,160
congestion control feedback

1095
00:44:13,359 --> 00:44:16,160
uh and the core of this draft is is a

1096
00:44:16,160 --> 00:44:18,000
bunch of charts showing the overhead in

1097
00:44:18,000 --> 00:44:20,880
various cases uh and so for for example

1098
00:44:20,880 --> 00:44:23,359
in in the case where you're sending um

1099
00:44:23,359 --> 00:44:25,359
only compound packets and you're not

1100
00:44:25,359 --> 00:44:27,359
using any of the non-compound packets to

1101
00:44:27,359 --> 00:44:28,880
reduce the overhead

1102
00:44:28,880 --> 00:44:29,920
um

1103
00:44:29,920 --> 00:44:31,680
you know that this table shows that if

1104
00:44:31,680 --> 00:44:33,920
you have your audio uh being framed into

1105
00:44:33,920 --> 00:44:35,760
20 millisecond packets and you're

1106
00:44:35,760 --> 00:44:39,119
sending rtcp feedback every second frame

1107
00:44:39,119 --> 00:44:42,000
of audio using only compound packets

1108
00:44:42,000 --> 00:44:44,960
your rtcp bandwidth is 57 kilobits for

1109
00:44:44,960 --> 00:44:47,680
the congestion control feedback

1110
00:44:47,680 --> 00:44:49,920
and as you um increase the number of

1111
00:44:49,920 --> 00:44:52,160
frames if you report every eighth frame

1112
00:44:52,160 --> 00:44:53,599
this drops down to

1113
00:44:53,599 --> 00:44:56,800
15 kilobits and if you reduce it if you

1114
00:44:56,800 --> 00:44:58,560
increase the audio framing interval then

1115
00:44:58,560 --> 00:45:01,200
the overhead drops down more

1116
00:45:01,200 --> 00:45:03,280
again this is only sending compound pack

1117
00:45:03,280 --> 00:45:04,880
compound packets but it's showing that

1118
00:45:04,880 --> 00:45:07,920
you can you can adapt the the overhead

1119
00:45:07,920 --> 00:45:10,640
of the rtcp congestion control feedback

1120
00:45:10,640 --> 00:45:11,680
by

1121
00:45:11,680 --> 00:45:13,040
changing the

1122
00:45:13,040 --> 00:45:14,720
how often you send feedback and the size

1123
00:45:14,720 --> 00:45:18,359
of the audio packets

1124
00:45:18,880 --> 00:45:20,400
if you do the same thing by sending

1125
00:45:20,400 --> 00:45:22,480
compound packets in between and this is

1126
00:45:22,480 --> 00:45:24,240
sent this is alternating compound and

1127
00:45:24,240 --> 00:45:26,079
non-compound packets you see the the

1128
00:45:26,079 --> 00:45:28,240
overheads reduce uh

1129
00:45:28,240 --> 00:45:30,319
somewhat and if you send more

1130
00:45:30,319 --> 00:45:32,480
non-compound packets in between you can

1131
00:45:32,480 --> 00:45:35,040
reduce the overheads further

1132
00:45:35,040 --> 00:45:37,119
and it's showing the sort of uh example

1133
00:45:37,119 --> 00:45:38,720
behavior you get as you play with the

1134
00:45:38,720 --> 00:45:40,880
different parameters to illustrate what

1135
00:45:40,880 --> 00:45:45,560
what the overhead of these mechanisms is

1136
00:45:46,079 --> 00:45:48,079
now it then does the the same sort of

1137
00:45:48,079 --> 00:45:49,920
calculation for a

1138
00:45:49,920 --> 00:45:51,920
point-to-point video conference uh

1139
00:45:51,920 --> 00:45:53,599
assuming we've got two people both

1140
00:45:53,599 --> 00:45:55,920
sending audio and video streams uh all

1141
00:45:55,920 --> 00:45:57,920
bundled onto a single five-two pulsar

1142
00:45:57,920 --> 00:46:00,560
you've got four active ssrc's uh one

1143
00:46:00,560 --> 00:46:02,160
audio one video

1144
00:46:02,160 --> 00:46:04,960
for each of the two participants

1145
00:46:04,960 --> 00:46:07,920
um and we're trying to send um

1146
00:46:07,920 --> 00:46:09,680
congestion control feedback every so

1147
00:46:09,680 --> 00:46:12,799
many video frames

1148
00:46:13,280 --> 00:46:14,480
um

1149
00:46:14,480 --> 00:46:17,440
and um the the sort of feedback you get

1150
00:46:17,440 --> 00:46:19,359
in this case you've got your

1151
00:46:19,359 --> 00:46:20,480
um

1152
00:46:20,480 --> 00:46:23,680
your your udpip headers uh and you've

1153
00:46:23,680 --> 00:46:26,079
got because there's two ssrcs you've got

1154
00:46:26,079 --> 00:46:27,680
the feedback being aggregated into the

1155
00:46:27,680 --> 00:46:30,480
packet and you've got one compound rtcp

1156
00:46:30,480 --> 00:46:32,720
packet from the reporting source one

1157
00:46:32,720 --> 00:46:35,119
from the non-reporting source assuming

1158
00:46:35,119 --> 00:46:37,680
you're using the um the reporting groups

1159
00:46:37,680 --> 00:46:40,000
and the aggregating feedback mechanisms

1160
00:46:40,000 --> 00:46:41,040
and then you've got the the

1161
00:46:41,040 --> 00:46:45,599
authentication tag for situ srtp

1162
00:46:46,800 --> 00:46:48,480
and again that i'm not going to talk

1163
00:46:48,480 --> 00:46:49,680
about it in

1164
00:46:49,680 --> 00:46:51,760
in much detail but the draft works

1165
00:46:51,760 --> 00:46:54,480
through this uh the non-reporting packet

1166
00:46:54,480 --> 00:46:55,920
uh has

1167
00:46:55,920 --> 00:46:57,520
assuming wearing extending compound

1168
00:46:57,520 --> 00:47:00,640
packets has an empty sender report a

1169
00:47:00,640 --> 00:47:02,720
source description c name and and the

1170
00:47:02,720 --> 00:47:04,480
reporting group

1171
00:47:04,480 --> 00:47:07,839
group source packets in it

1172
00:47:07,839 --> 00:47:10,480
the reporting source has a complete

1173
00:47:10,480 --> 00:47:13,839
sender report it has the the the sc name

1174
00:47:13,839 --> 00:47:15,760
and the reporting group packet and it's

1175
00:47:15,760 --> 00:47:18,000
got the congestion control feedback uh

1176
00:47:18,000 --> 00:47:19,440
because you're using reporting groups

1177
00:47:19,440 --> 00:47:21,040
this is the congestion control feedback

1178
00:47:21,040 --> 00:47:23,280
for both ssrcs

1179
00:47:23,280 --> 00:47:24,880
since that that they're co-located and

1180
00:47:24,880 --> 00:47:27,119
they're seeing the same thing

1181
00:47:27,119 --> 00:47:29,119
and the draft works through uh counting

1182
00:47:29,119 --> 00:47:31,440
up the size of these various packets and

1183
00:47:31,440 --> 00:47:34,960
figuring out what the overhead would be

1184
00:47:35,760 --> 00:47:36,640
and

1185
00:47:36,640 --> 00:47:38,640
that turns out to be uh quite large in

1186
00:47:38,640 --> 00:47:40,480
this case you've got a lot of uh

1187
00:47:40,480 --> 00:47:42,800
overheads because of the ssrcs and the

1188
00:47:42,800 --> 00:47:44,400
various reporting packets you've got a

1189
00:47:44,400 --> 00:47:46,160
couple of hundred bytes overhead plus

1190
00:47:46,160 --> 00:47:49,279
the the feedback

1191
00:47:50,559 --> 00:47:52,480
um and it works through and it does the

1192
00:47:52,480 --> 00:47:55,119
the same sort of calculation plugging in

1193
00:47:55,119 --> 00:47:57,680
the numbers into the the rtcp reporting

1194
00:47:57,680 --> 00:48:01,920
interval calculation uh from 3550 um and

1195
00:48:01,920 --> 00:48:04,319
from that it comes out with a table

1196
00:48:04,319 --> 00:48:07,200
showing the the bandwidth overheads

1197
00:48:07,200 --> 00:48:09,200
uh and and what we're showing here is if

1198
00:48:09,200 --> 00:48:11,119
you've picked a if you look on the left

1199
00:48:11,119 --> 00:48:13,440
here the media rate column it it's

1200
00:48:13,440 --> 00:48:15,200
making a bunch of assumptions about how

1201
00:48:15,200 --> 00:48:16,240
the

1202
00:48:16,240 --> 00:48:18,079
video is packetized which are not

1203
00:48:18,079 --> 00:48:20,240
entirely realistic but are probably

1204
00:48:20,240 --> 00:48:22,000
close enough to give a flavor of how

1205
00:48:22,000 --> 00:48:23,440
this would work and make them

1206
00:48:23,440 --> 00:48:25,680
abstractable you know if for example

1207
00:48:25,680 --> 00:48:28,160
you're picking you're sending media at

1208
00:48:28,160 --> 00:48:31,200
200 kilobits per second

1209
00:48:31,200 --> 00:48:32,079
um

1210
00:48:32,079 --> 00:48:33,280
your

1211
00:48:33,280 --> 00:48:35,760
and 16 frames per second video

1212
00:48:35,760 --> 00:48:38,960
uh then that gives you um

1213
00:48:38,960 --> 00:48:40,559
and you're trying to send a report for

1214
00:48:40,559 --> 00:48:42,480
every frame that gives you one on video

1215
00:48:42,480 --> 00:48:45,119
packet per reports uh probably free

1216
00:48:45,119 --> 00:48:47,520
audio packets per reports depending how

1217
00:48:47,520 --> 00:48:49,680
you do the audio packetization

1218
00:48:49,680 --> 00:48:52,400
uh leading to an rtcp bandwidth of sort

1219
00:48:52,400 --> 00:48:55,119
of 67 kilobits per second which is about

1220
00:48:55,119 --> 00:48:56,800
a third of the the

1221
00:48:56,800 --> 00:48:58,319
video rate

1222
00:48:58,319 --> 00:49:00,160
and as as you see as you go down the

1223
00:49:00,160 --> 00:49:02,800
table as the media rate increases uh the

1224
00:49:02,800 --> 00:49:05,040
the overheads of the reporting go down

1225
00:49:05,040 --> 00:49:07,440
uh and you the table shows how this

1226
00:49:07,440 --> 00:49:08,720
varies with the frame rate you're

1227
00:49:08,720 --> 00:49:11,759
choosing and so

1228
00:49:13,040 --> 00:49:15,599
uh similarly um you can use reduce size

1229
00:49:15,599 --> 00:49:18,240
packets uh by playing with the the way

1230
00:49:18,240 --> 00:49:21,760
you you can figure out tcp uh and uh i'm

1231
00:49:21,760 --> 00:49:23,280
not going to walk through the details

1232
00:49:23,280 --> 00:49:25,760
but the draft does that and uh it shows

1233
00:49:25,760 --> 00:49:28,480
that the um the the required bandwidth

1234
00:49:28,480 --> 00:49:32,000
drops down as you might expect

1235
00:49:32,000 --> 00:49:35,359
and reduces the overheads

1236
00:49:36,559 --> 00:49:38,800
so that's the this is a very quick

1237
00:49:38,800 --> 00:49:41,599
version of what's in this draft um

1238
00:49:41,599 --> 00:49:44,160
the the latest version of the draft uh

1239
00:49:44,160 --> 00:49:46,240
what what what i've done in this version

1240
00:49:46,240 --> 00:49:48,480
is brought the calculations up to date

1241
00:49:48,480 --> 00:49:52,640
with the published version of rfc 8888

1242
00:49:52,640 --> 00:49:54,960
corrected a couple of minor mistakes in

1243
00:49:54,960 --> 00:49:57,920
the way the calculations were being done

1244
00:49:57,920 --> 00:49:58,720
and

1245
00:49:58,720 --> 00:50:00,559
the previous versions had placeholders

1246
00:50:00,559 --> 00:50:03,200
for multi-party and screen sharing uh

1247
00:50:03,200 --> 00:50:05,200
scenarios um

1248
00:50:05,200 --> 00:50:07,520
i've taken those out because uh when i

1249
00:50:07,520 --> 00:50:08,640
tried to work through them i just

1250
00:50:08,640 --> 00:50:10,000
realized there were way too many

1251
00:50:10,000 --> 00:50:12,480
variables to to easily characterize it

1252
00:50:12,480 --> 00:50:14,319
uh and um

1253
00:50:14,319 --> 00:50:16,400
if i wanted it if we want something in

1254
00:50:16,400 --> 00:50:18,240
there which would uh actually be

1255
00:50:18,240 --> 00:50:19,920
representative of the different ways of

1256
00:50:19,920 --> 00:50:21,599
configuring it this draft is going to

1257
00:50:21,599 --> 00:50:24,480
balloon out to 50 pages long and it it

1258
00:50:24,480 --> 00:50:26,800
didn't seem worth the it didn't seem

1259
00:50:26,800 --> 00:50:28,480
worth the effort because the scenarios

1260
00:50:28,480 --> 00:50:30,880
in there i think illustrate the the

1261
00:50:30,880 --> 00:50:34,400
fundamentals of the behavior

1262
00:50:34,880 --> 00:50:36,240
now so that's where we're at in this

1263
00:50:36,240 --> 00:50:38,079
version um

1264
00:50:38,079 --> 00:50:40,400
as i say it illustrates the various

1265
00:50:40,400 --> 00:50:42,480
factors that that influence the the

1266
00:50:42,480 --> 00:50:44,079
overhead of using this congestion

1267
00:50:44,079 --> 00:50:47,680
control feedback uh and um i think

1268
00:50:47,680 --> 00:50:49,599
hopefully gives some useful hints to

1269
00:50:49,599 --> 00:50:51,280
implements as how you might configure

1270
00:50:51,280 --> 00:50:53,599
and use the format

1271
00:50:53,599 --> 00:50:54,559
um

1272
00:50:54,559 --> 00:50:56,720
from my point of view i i think this is

1273
00:50:56,720 --> 00:50:57,839
is done

1274
00:50:57,839 --> 00:50:59,839
uh it's got everything i i want to put

1275
00:50:59,839 --> 00:51:02,720
in it um i

1276
00:51:02,720 --> 00:51:03,839
you know

1277
00:51:03,839 --> 00:51:06,800
and i think it illustrates the point um

1278
00:51:06,800 --> 00:51:09,760
so my my recommendation would be that if

1279
00:51:09,760 --> 00:51:11,520
the group thinks this is useful enough

1280
00:51:11,520 --> 00:51:14,240
to publish we should uh take it to last

1281
00:51:14,240 --> 00:51:15,200
call

1282
00:51:15,200 --> 00:51:17,040
um if there are a few if there are nits

1283
00:51:17,040 --> 00:51:20,400
or details to sort out we can do that um

1284
00:51:20,400 --> 00:51:22,720
but if to me if the group thinks that

1285
00:51:22,720 --> 00:51:23,920
there is a

1286
00:51:23,920 --> 00:51:25,440
um

1287
00:51:25,440 --> 00:51:27,119
your significant

1288
00:51:27,119 --> 00:51:28,319
if the group thinks that it needs

1289
00:51:28,319 --> 00:51:30,480
significantly more work to to get this

1290
00:51:30,480 --> 00:51:32,640
into a useful state i'm not convinced

1291
00:51:32,640 --> 00:51:33,920
it's worth

1292
00:51:33,920 --> 00:51:37,440
to me the effort of doing that so

1293
00:51:37,440 --> 00:51:38,800
that that that's where i think this is

1294
00:51:38,800 --> 00:51:39,760
that

1295
00:51:39,760 --> 00:51:43,839
with that uh i think i'm done

1296
00:51:44,319 --> 00:51:46,480
okay thank you colin for the

1297
00:51:46,480 --> 00:51:48,720
update do we have any

1298
00:51:48,720 --> 00:51:52,879
uh questions for colin

1299
00:52:03,680 --> 00:52:06,558
yes jonathan

1300
00:52:07,920 --> 00:52:09,119
throw the question back at you do you

1301
00:52:09,119 --> 00:52:10,720
think it's useful in its current state

1302
00:52:10,720 --> 00:52:11,599
for

1303
00:52:11,599 --> 00:52:14,160
implementers

1304
00:52:15,920 --> 00:52:18,400
no this is something

1305
00:52:18,400 --> 00:52:20,000
so sorry you're breaking up and i didn't

1306
00:52:20,000 --> 00:52:21,280
hear that

1307
00:52:21,280 --> 00:52:22,960
do you think this is useful that's where

1308
00:52:22,960 --> 00:52:25,040
it purple matters

1309
00:52:25,040 --> 00:52:27,040
uh i i

1310
00:52:27,040 --> 00:52:30,240
i i i think it's useful yes i mean uh

1311
00:52:30,240 --> 00:52:32,400
yeah it's obviously only covering some

1312
00:52:32,400 --> 00:52:34,079
some of the basic cases but i think it

1313
00:52:34,079 --> 00:52:36,079
shows shows the point of how to

1314
00:52:36,079 --> 00:52:37,760
configure things

1315
00:52:37,760 --> 00:52:39,359
but does it and does it give enough

1316
00:52:39,359 --> 00:52:40,800
guidance that when you if you have a

1317
00:52:40,800 --> 00:52:42,079
specific

1318
00:52:42,079 --> 00:52:44,160
you know more complicated case but it

1319
00:52:44,160 --> 00:52:45,599
could follow the same

1320
00:52:45,599 --> 00:52:48,720
procedure as you did and get an answer

1321
00:52:48,720 --> 00:52:50,319
um

1322
00:52:50,319 --> 00:52:52,400
i i think it illustrates the general

1323
00:52:52,400 --> 00:52:55,359
principles uh and in the more complex

1324
00:52:55,359 --> 00:52:56,720
cases there are so many different

1325
00:52:56,720 --> 00:52:58,720
parameters to configure that that it's

1326
00:52:58,720 --> 00:53:01,200
hard to give specific guidance

1327
00:53:01,200 --> 00:53:02,400
yeah but i mean but somebody who knew

1328
00:53:02,400 --> 00:53:04,559
what their parameters were could

1329
00:53:04,559 --> 00:53:06,720
you know take your follow your procedure

1330
00:53:06,720 --> 00:53:08,160
and say okay for my case where it has

1331
00:53:08,160 --> 00:53:10,240
this this and this and this is what i

1332
00:53:10,240 --> 00:53:13,280
need to do probably

1333
00:53:13,280 --> 00:53:14,400
um i

1334
00:53:14,400 --> 00:53:17,359
i i think probably i mean obviously it

1335
00:53:17,359 --> 00:53:19,520
would depend on their experience with

1336
00:53:19,520 --> 00:53:22,640
rtp and congestion control

1337
00:53:22,640 --> 00:53:24,400
exactly how familiar they were with the

1338
00:53:24,400 --> 00:53:26,000
various things

1339
00:53:26,000 --> 00:53:29,000
okay

1340
00:53:31,440 --> 00:53:33,520
and this is of course a informational

1341
00:53:33,520 --> 00:53:36,079
document

1342
00:53:37,839 --> 00:53:42,040
right yeah it's targeting information

1343
00:53:42,559 --> 00:53:43,920
do we have any more comments or

1344
00:53:43,920 --> 00:53:46,400
questions

1345
00:53:52,880 --> 00:53:56,400
if not i think we are also in a sense

1346
00:53:56,400 --> 00:53:59,839
this is also moving us into our last

1347
00:53:59,839 --> 00:54:01,760
item on the agenda that we have a few

1348
00:54:01,760 --> 00:54:02,960
minutes to

1349
00:54:02,960 --> 00:54:06,640
to see how to wrap up and what our

1350
00:54:06,640 --> 00:54:09,440
outstanding work points are and of

1351
00:54:09,440 --> 00:54:11,280
course this

1352
00:54:11,280 --> 00:54:13,599
draft that colin just presented is our

1353
00:54:13,599 --> 00:54:16,000
last

1354
00:54:16,319 --> 00:54:17,440
open

1355
00:54:17,440 --> 00:54:19,839
working group document that we had not

1356
00:54:19,839 --> 00:54:22,480
concluded

1357
00:54:22,480 --> 00:54:25,119
and from from the author's perspective

1358
00:54:25,119 --> 00:54:27,760
this this strat is complete so the the

1359
00:54:27,760 --> 00:54:30,880
suggestion here i think is to send it

1360
00:54:30,880 --> 00:54:33,839
out for for uh

1361
00:54:33,839 --> 00:54:36,799
uh working group last call and feedback

1362
00:54:36,799 --> 00:54:40,160
from the from the working group

1363
00:54:40,160 --> 00:54:43,040
and there of course it's it's uh

1364
00:54:43,040 --> 00:54:45,359
very good to get feedback on the the

1365
00:54:45,359 --> 00:54:47,359
current status of the document and if

1366
00:54:47,359 --> 00:54:50,000
you see that

1367
00:54:50,559 --> 00:54:55,680
that this is uh a good good piece of

1368
00:54:55,680 --> 00:54:58,480
advice to publish from the working group

1369
00:54:58,480 --> 00:55:00,319
uh it now was a while since we talked

1370
00:55:00,319 --> 00:55:02,720
about this document and uh

1371
00:55:02,720 --> 00:55:05,280
i'm not sure if uh if the participants

1372
00:55:05,280 --> 00:55:08,160
have had time to to read it so i think

1373
00:55:08,160 --> 00:55:09,040
that

1374
00:55:09,040 --> 00:55:11,920
we have to take take it to the list to

1375
00:55:11,920 --> 00:55:15,920
to get more feedback on that point

1376
00:55:17,040 --> 00:55:19,920
and the other thing that we have done

1377
00:55:19,920 --> 00:55:22,559
today of course is to to try and have an

1378
00:55:22,559 --> 00:55:25,119
update and summarize the the status of

1379
00:55:25,119 --> 00:55:27,040
the different congestion control

1380
00:55:27,040 --> 00:55:30,960
algorithms because we had on our shorter

1381
00:55:30,960 --> 00:55:32,720
to

1382
00:55:32,720 --> 00:55:33,680
move

1383
00:55:33,680 --> 00:55:34,880
some of the

1384
00:55:34,880 --> 00:55:37,599
one or several of the algorithms

1385
00:55:37,599 --> 00:55:41,440
to propose standard after experiences um

1386
00:55:41,440 --> 00:55:42,559
but i think

1387
00:55:42,559 --> 00:55:44,640
we we have

1388
00:55:44,640 --> 00:55:46,319
it's nice to see that there is some work

1389
00:55:46,319 --> 00:55:48,559
on some of the algorithms but

1390
00:55:48,559 --> 00:55:50,400
i think from the shares perspective the

1391
00:55:50,400 --> 00:55:52,640
the conclusion is that we have not

1392
00:55:52,640 --> 00:55:55,280
had enough activity and work that it

1393
00:55:55,280 --> 00:55:56,880
makes sense to

1394
00:55:56,880 --> 00:55:58,160
to

1395
00:55:58,160 --> 00:56:00,799
bring any of the algorithms on that path

1396
00:56:00,799 --> 00:56:02,640
at the moment

1397
00:56:02,640 --> 00:56:05,520
i think what we maybe need to discuss is

1398
00:56:05,520 --> 00:56:07,920
is the scream side because i think this

1399
00:56:07,920 --> 00:56:10,400
is the algorithm that has seen most use

1400
00:56:10,400 --> 00:56:13,040
and as you had on your sliding mark to

1401
00:56:13,040 --> 00:56:16,079
to have an update that brings in the

1402
00:56:16,079 --> 00:56:18,480
handling of easy and maybe something

1403
00:56:18,480 --> 00:56:21,040
that that is useful still as an

1404
00:56:21,040 --> 00:56:22,960
experimental

1405
00:56:22,960 --> 00:56:25,359
algorithm i would would expect in that

1406
00:56:25,359 --> 00:56:26,319
sense

1407
00:56:26,319 --> 00:56:28,799
so we are now also open to have have

1408
00:56:28,799 --> 00:56:31,839
comments on any of the open points from

1409
00:56:31,839 --> 00:56:34,000
the the rest of the participants and and

1410
00:56:34,000 --> 00:56:37,880
what your view is

1411
00:56:52,400 --> 00:56:55,119
yes ahead

1412
00:56:56,880 --> 00:56:59,440
i was just going to repeat some of the

1413
00:56:59,440 --> 00:57:00,640
things i

1414
00:57:00,640 --> 00:57:01,760
said but

1415
00:57:01,760 --> 00:57:03,520
let's hear from you

1416
00:57:03,520 --> 00:57:06,520
but

1417
00:57:12,640 --> 00:57:14,640
hey sorry um

1418
00:57:14,640 --> 00:57:16,960
so i basically think that that um that

1419
00:57:16,960 --> 00:57:19,280
last remaining document should be 80

1420
00:57:19,280 --> 00:57:21,200
sponsored

1421
00:57:21,200 --> 00:57:25,118
and the group should probably close

1422
00:57:25,200 --> 00:57:26,960
um

1423
00:57:26,960 --> 00:57:28,880
last remaining one being

1424
00:57:28,880 --> 00:57:29,839
the

1425
00:57:29,839 --> 00:57:33,040
mine or being the screen

1426
00:57:33,040 --> 00:57:35,599
that the one that's adopted

1427
00:57:35,599 --> 00:57:36,400
okay

1428
00:57:36,400 --> 00:57:38,160
am i am i wrong that there's there's

1429
00:57:38,160 --> 00:57:40,640
only one adopted right

1430
00:57:40,640 --> 00:57:42,559
so so the one i presented which has been

1431
00:57:42,559 --> 00:57:45,200
adopted and then there was the potential

1432
00:57:45,200 --> 00:57:46,960
update to screen that and i was talking

1433
00:57:46,960 --> 00:57:48,079
about

1434
00:57:48,079 --> 00:57:51,200
oh yeah um

1435
00:57:52,079 --> 00:57:53,119
i would

1436
00:57:53,119 --> 00:57:56,319
i would just close the group

1437
00:57:56,319 --> 00:57:59,040
i mean i i

1438
00:57:59,200 --> 00:58:00,960
if people want to update screen that

1439
00:58:00,960 --> 00:58:03,200
that can also be ad sponsored

1440
00:58:03,200 --> 00:58:07,200
it can be in transport tswg right it's

1441
00:58:07,200 --> 00:58:08,720
i don't see a reason to keep the group

1442
00:58:08,720 --> 00:58:09,920
around

1443
00:58:09,920 --> 00:58:11,680
but that's me personally

1444
00:58:11,680 --> 00:58:15,759
with no dots or anything

1445
00:58:16,720 --> 00:58:20,720
so i think for the open document

1446
00:58:20,839 --> 00:58:24,480
um hope was that this was very close to

1447
00:58:24,480 --> 00:58:25,040
being done

1448
00:58:25,040 --> 00:58:27,680
[Music]

1449
00:58:27,680 --> 00:58:29,920
i i guess the document can can still

1450
00:58:29,920 --> 00:58:32,400
move but

1451
00:58:32,400 --> 00:58:35,400
uh

1452
00:58:40,600 --> 00:58:42,400
[Music]

1453
00:58:42,400 --> 00:58:44,400
i don't expect to do any more work other

1454
00:58:44,400 --> 00:58:47,280
than fix some typos people point out

1455
00:58:47,280 --> 00:58:49,200
if it's more than that i i'm going to

1456
00:58:49,200 --> 00:58:50,720
abandon it

1457
00:58:50,720 --> 00:58:52,799
i mean the documents basically been

1458
00:58:52,799 --> 00:58:54,079
around for like

1459
00:58:54,079 --> 00:58:56,079
eight years or so right and it's

1460
00:58:56,079 --> 00:58:57,440
occasionally getting updates which is

1461
00:58:57,440 --> 00:58:58,559
great but

1462
00:58:58,559 --> 00:58:59,839
um

1463
00:58:59,839 --> 00:59:02,160
you know

1464
00:59:02,240 --> 00:59:03,920
i would either sort of start working

1465
00:59:03,920 --> 00:59:06,880
group last call now or um

1466
00:59:06,880 --> 00:59:10,440
make it a sponsor

1467
00:59:19,280 --> 00:59:21,760
martin

1468
00:59:24,880 --> 00:59:27,920
okay just to add to what lars said um

1469
00:59:27,920 --> 00:59:31,680
for scream this uh 8382 bis uh it is

1470
00:59:31,680 --> 00:59:33,440
experimental document so we could

1471
00:59:33,440 --> 00:59:36,559
actually even do it in iccrg if that's

1472
00:59:36,559 --> 00:59:38,960
a um

1473
00:59:38,960 --> 00:59:41,920
a better venue for it

1474
00:59:44,799 --> 00:59:47,799
corey

1475
00:59:52,799 --> 00:59:55,520
i wondered if there were still enough

1476
00:59:55,520 --> 00:59:58,559
people around rncap to review colin's

1477
00:59:58,559 --> 01:00:01,040
document other people were

1478
01:00:01,040 --> 01:00:02,960
willing to give the final version a read

1479
01:00:02,960 --> 01:00:04,240
and therefore whether you could do a

1480
01:00:04,240 --> 01:00:06,160
working group last call

1481
01:00:06,160 --> 01:00:07,920
do you have any sense of how many people

1482
01:00:07,920 --> 01:00:11,880
are ready to read it

1483
01:00:22,079 --> 01:00:24,880
so that is a

1484
01:00:24,880 --> 01:00:27,440
a bit hard to judge but i see that jurg

1485
01:00:27,440 --> 01:00:29,839
at least is willing to read it in the

1486
01:00:29,839 --> 01:00:32,559
comments in the chat we have about 30

1487
01:00:32,559 --> 01:00:35,040
people attending this session

1488
01:00:35,040 --> 01:00:36,160
so

1489
01:00:36,160 --> 01:00:38,160
and i i think it would be very good also

1490
01:00:38,160 --> 01:00:40,558
of course

1491
01:00:41,119 --> 01:00:43,440
uh if some of the algorithm authors can

1492
01:00:43,440 --> 01:00:46,240
also read it

1493
01:00:46,799 --> 01:00:50,559
so that that would be my hope but

1494
01:00:51,920 --> 01:00:57,000
it's always hard to to assess of course

1495
01:00:57,040 --> 01:00:58,960
ingmar also says he's willing to read it

1496
01:00:58,960 --> 01:01:01,650
so i think that would be very good

1497
01:01:01,650 --> 01:01:03,359
[Music]

1498
01:01:03,359 --> 01:01:05,440
i think we could also check if

1499
01:01:05,440 --> 01:01:07,359
i'm not sure if charging is is in the

1500
01:01:07,359 --> 01:01:08,880
call i know she's still in the mailing

1501
01:01:08,880 --> 01:01:11,599
list even she she has moved from cisco

1502
01:01:11,599 --> 01:01:13,359
if she is also willing to read it from

1503
01:01:13,359 --> 01:01:14,720
the

1504
01:01:14,720 --> 01:01:16,799
from the the nada

1505
01:01:16,799 --> 01:01:19,119
side

1506
01:01:20,240 --> 01:01:21,520
so i think

1507
01:01:21,520 --> 01:01:23,440
if we keep it in the group the idea of

1508
01:01:23,440 --> 01:01:25,839
course is to to move it to to working

1509
01:01:25,839 --> 01:01:27,760
group last call

1510
01:01:27,760 --> 01:01:29,200
and to try to

1511
01:01:29,200 --> 01:01:32,799
to finish finish it up

1512
01:01:36,799 --> 01:01:39,440
yes sid

1513
01:01:43,280 --> 01:01:44,960
i hope you can hear me

1514
01:01:44,960 --> 01:01:46,640
yes we hear you

1515
01:01:46,640 --> 01:01:47,920
oh i mean

1516
01:01:47,920 --> 01:01:50,079
with my eddie hat on

1517
01:01:50,079 --> 01:01:51,599
i think

1518
01:01:51,599 --> 01:01:54,799
i have not seen any huge activities or

1519
01:01:54,799 --> 01:01:56,720
or any activities in the mailing list

1520
01:01:56,720 --> 01:02:00,160
and and i have not seen like i mean nada

1521
01:02:00,160 --> 01:02:03,200
uh as you reported 2020

1522
01:02:03,200 --> 01:02:05,839
uh it has implemented a firefox mozilla

1523
01:02:05,839 --> 01:02:07,440
i have no information on whether that is

1524
01:02:07,440 --> 01:02:08,400
in use

1525
01:02:08,400 --> 01:02:11,039
uh scream uh ingomar is doing

1526
01:02:11,039 --> 01:02:13,119
some trials and that's good to have and

1527
01:02:13,119 --> 01:02:15,680
we can actually fix uh some updates and

1528
01:02:15,680 --> 01:02:17,920
all these things so um that's that's

1529
01:02:17,920 --> 01:02:19,680
fine other than that i don't see like

1530
01:02:19,680 --> 01:02:22,799
anything happening on somebody i mean

1531
01:02:22,799 --> 01:02:25,039
previously in one of the item meeting

1532
01:02:25,039 --> 01:02:28,400
there was one proposal coming from um

1533
01:02:28,400 --> 01:02:29,920
like somebody asked like

1534
01:02:29,920 --> 01:02:31,680
can we can we

1535
01:02:31,680 --> 01:02:33,440
make another condition control algorithm

1536
01:02:33,440 --> 01:02:34,799
and all this thing i don't think like

1537
01:02:34,799 --> 01:02:36,079
they're coming back

1538
01:02:36,079 --> 01:02:38,319
so and today from this meeting i get the

1539
01:02:38,319 --> 01:02:40,880
view like well there might not be too

1540
01:02:40,880 --> 01:02:43,440
much energy to carry the

1541
01:02:43,440 --> 01:02:45,280
working group on

1542
01:02:45,280 --> 01:02:47,440
so i think uh

1543
01:02:47,440 --> 01:02:48,720
for the

1544
01:02:48,720 --> 01:02:50,799
this document the lab in that working

1545
01:02:50,799 --> 01:02:52,319
role that when we have we can go

1546
01:02:52,319 --> 01:02:54,720
directly to the working blast cop

1547
01:02:54,720 --> 01:02:56,559
and push it to

1548
01:02:56,559 --> 01:02:59,119
iit plastic call very soon

1549
01:02:59,119 --> 01:03:00,319
um

1550
01:03:00,319 --> 01:03:03,760
other than that i don't i i am

1551
01:03:03,760 --> 01:03:05,440
i cannot convince myself like why we

1552
01:03:05,440 --> 01:03:08,240
should have this working group and if we

1553
01:03:08,240 --> 01:03:10,160
need we can actually keep the mailing

1554
01:03:10,160 --> 01:03:11,680
list alive right

1555
01:03:11,680 --> 01:03:14,000
so if there is anything

1556
01:03:14,000 --> 01:03:15,440
some people want to

1557
01:03:15,440 --> 01:03:17,760
come in in future or some updates want

1558
01:03:17,760 --> 01:03:19,520
to be discussed this mail even could

1559
01:03:19,520 --> 01:03:21,440
still be there

1560
01:03:21,440 --> 01:03:24,400
so that's actually what i think

1561
01:03:24,400 --> 01:03:25,760
um

1562
01:03:25,760 --> 01:03:27,599
and yeah i think this has been working

1563
01:03:27,599 --> 01:03:30,640
with a really good document um i have

1564
01:03:30,640 --> 01:03:31,440
been

1565
01:03:31,440 --> 01:03:32,960
part of this working group from very

1566
01:03:32,960 --> 01:03:34,000
beginning

1567
01:03:34,000 --> 01:03:36,960
um it was a quite good journey but

1568
01:03:36,960 --> 01:03:39,200
i would love to see this work has been

1569
01:03:39,200 --> 01:03:41,920
deployed and adopted other than that

1570
01:03:41,920 --> 01:03:44,319
i don't see any output from this working

1571
01:03:44,319 --> 01:03:46,000
group

1572
01:03:46,000 --> 01:03:49,039
now so as i said i mean we had we had

1573
01:03:49,039 --> 01:03:51,039
decided to to

1574
01:03:51,039 --> 01:03:53,280
have some pause to see if there would be

1575
01:03:53,280 --> 01:03:55,839
more deployment and experience from the

1576
01:03:55,839 --> 01:03:58,400
from the algorithms but i i

1577
01:03:58,400 --> 01:04:00,640
as i said i don't see we don't as shares

1578
01:04:00,640 --> 01:04:01,920
also don't see that any of the

1579
01:04:01,920 --> 01:04:04,720
algorithms would be you know candidates

1580
01:04:04,720 --> 01:04:07,280
to be pushed forward at this point so

1581
01:04:07,280 --> 01:04:11,200
that that part of the shorter i think is

1582
01:04:11,520 --> 01:04:13,359
yeah it's not relevant at this point in

1583
01:04:13,359 --> 01:04:15,440
time so i i think we all

1584
01:04:15,440 --> 01:04:19,119
all have the same view on that

1585
01:04:19,119 --> 01:04:22,319
um yeah i see one more plus one for for

1586
01:04:22,319 --> 01:04:24,079
doing a working group called last call

1587
01:04:24,079 --> 01:04:25,119
on the

1588
01:04:25,119 --> 01:04:27,510
on the document

1589
01:04:27,510 --> 01:04:29,119
[Music]

1590
01:04:29,119 --> 01:04:31,680
so we can of course also so coordinate

1591
01:04:31,680 --> 01:04:32,640
on

1592
01:04:32,640 --> 01:04:33,920
how to

1593
01:04:33,920 --> 01:04:35,760
how to wrap up that

1594
01:04:35,760 --> 01:04:38,240
that last

1595
01:04:38,839 --> 01:04:42,480
document if you have other

1596
01:04:42,480 --> 01:04:45,119
uh comments on on that one

1597
01:04:45,119 --> 01:04:46,319
side but

1598
01:04:46,319 --> 01:04:47,920
otherwise i think the plan is we try to

1599
01:04:47,920 --> 01:04:49,839
finish off the the last document and

1600
01:04:49,839 --> 01:04:52,079
then we are ready to to close the group

1601
01:04:52,079 --> 01:04:53,359
this is my

1602
01:04:53,359 --> 01:04:55,920
my understanding of the this the

1603
01:04:55,920 --> 01:04:57,359
situation

1604
01:04:57,359 --> 01:05:00,400
and the sense of the group as well uh

1605
01:05:00,400 --> 01:05:02,079
and we are a little bit over time but

1606
01:05:02,079 --> 01:05:03,680
gauri you are in the queue you wanted to

1607
01:05:03,680 --> 01:05:04,799
add something

1608
01:05:04,799 --> 01:05:07,119
yeah i just wanted to say i put them i

1609
01:05:07,119 --> 01:05:08,559
have put the names of the people who

1610
01:05:08,559 --> 01:05:10,640
volunteered to contribute last call in

1611
01:05:10,640 --> 01:05:11,760
the notes

1612
01:05:11,760 --> 01:05:14,160
so that they're now in the notes

1613
01:05:14,160 --> 01:05:16,960
okay excellent

1614
01:05:17,920 --> 01:05:19,920
yeah then we have an agreement there and

1615
01:05:19,920 --> 01:05:23,359
way forward so let's do that

1616
01:05:23,359 --> 01:05:24,400
okay

1617
01:05:24,400 --> 01:05:26,640
great then thank you everyone

1618
01:05:26,640 --> 01:05:29,119
for today and it was still very nice to

1619
01:05:29,119 --> 01:05:30,960
see you all

1620
01:05:30,960 --> 01:05:33,599
and to also get an update on

1621
01:05:33,599 --> 01:05:35,839
what this was ongoing with at least some

1622
01:05:35,839 --> 01:05:38,079
of the algorithms

1623
01:05:38,079 --> 01:05:39,359
so uh

1624
01:05:39,359 --> 01:05:42,480
anything you want to add colleen

1625
01:05:47,920 --> 01:05:49,119
mostly i'm going to add that i still

1626
01:05:49,119 --> 01:05:50,960
can't work the mute button uh i was just

1627
01:05:50,960 --> 01:05:51,839
going to say

1628
01:05:51,839 --> 01:05:53,920
thanks everyone for for participating as

1629
01:05:53,920 --> 01:05:55,839
you say it was it was good to to get an

1630
01:05:55,839 --> 01:05:58,640
update and come to closure on the group

1631
01:05:58,640 --> 01:06:00,480
and yeah we we should try and get that

1632
01:06:00,480 --> 01:06:02,000
working group last call done very

1633
01:06:02,000 --> 01:06:05,480
quickly i think

1634
01:06:05,920 --> 01:06:11,240
okay okay thank you okay bye

