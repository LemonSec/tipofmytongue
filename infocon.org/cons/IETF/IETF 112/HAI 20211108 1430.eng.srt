1
00:00:13,360 --> 00:00:16,880
all right it is 6 30 a.m pacific so

2
00:00:16,880 --> 00:00:18,560
let's begin

3
00:00:18,560 --> 00:00:20,640
oh hi everyone welcome to the first

4
00:00:20,640 --> 00:00:22,400
official

5
00:00:22,400 --> 00:00:23,920
working group meeting of the newly

6
00:00:23,920 --> 00:00:26,480
formed oblivious http application

7
00:00:26,480 --> 00:00:28,720
intermediation working group we are your

8
00:00:28,720 --> 00:00:31,038
chairs

9
00:00:31,599 --> 00:00:32,558
welcome

10
00:00:32,558 --> 00:00:33,920
and

11
00:00:33,920 --> 00:00:35,360
we have

12
00:00:35,360 --> 00:00:37,600
multiple notetakers thank you all

13
00:00:37,600 --> 00:00:41,040
for uh for volunteering um and for job

14
00:00:41,040 --> 00:00:43,120
describing uh richard and i figured that

15
00:00:43,120 --> 00:00:44,719
we can we can just keep an eye on the

16
00:00:44,719 --> 00:00:45,920
chat and

17
00:00:45,920 --> 00:00:48,879
relay any questions

18
00:00:49,680 --> 00:00:51,520
this is the note well

19
00:00:51,520 --> 00:00:53,360
please read carefully especially if

20
00:00:53,360 --> 00:00:54,399
you're

21
00:00:54,399 --> 00:00:56,480
uh this is this is your first ietf

22
00:00:56,480 --> 00:00:58,960
meeting but even if not please always be

23
00:00:58,960 --> 00:00:59,920
sure

24
00:00:59,920 --> 00:01:03,199
to be mindful of the node well and also

25
00:01:03,199 --> 00:01:05,920
the ietf code of conduct as laid out in

26
00:01:05,920 --> 00:01:08,400
rfc 7154

27
00:01:08,400 --> 00:01:10,640
folks are expected to be courteous not

28
00:01:10,640 --> 00:01:13,280
engaged in personal remarks

29
00:01:13,280 --> 00:01:17,680
mindful of diversity and contributory

30
00:01:18,320 --> 00:01:20,720
and this is our agenda and we have a one

31
00:01:20,720 --> 00:01:23,360
hour slot uh reminder that the session

32
00:01:23,360 --> 00:01:25,920
is recorded and

33
00:01:25,920 --> 00:01:27,600
the blue sheet attendance is auto

34
00:01:27,600 --> 00:01:28,880
generated

35
00:01:28,880 --> 00:01:31,200
please keep video and audio off in case

36
00:01:31,200 --> 00:01:33,520
you are not if you are not presenting or

37
00:01:33,520 --> 00:01:35,759
not recognized in the queue and to enter

38
00:01:35,759 --> 00:01:37,439
the queue there should be a button over

39
00:01:37,439 --> 00:01:38,560
here

40
00:01:38,560 --> 00:01:39,280
which

41
00:01:39,280 --> 00:01:41,920
raised hand icon to join the queue

42
00:01:41,920 --> 00:01:43,520
so please press that in case you want to

43
00:01:43,520 --> 00:01:45,680
join the queue i'll

44
00:01:45,680 --> 00:01:47,680
pause here for a second to see if anyone

45
00:01:47,680 --> 00:01:49,680
has any comments on the agenda or wants

46
00:01:49,680 --> 00:01:52,240
to change it in any way

47
00:01:52,240 --> 00:01:54,560
please join the queue

48
00:01:54,560 --> 00:01:56,719
going once going

49
00:01:56,719 --> 00:02:00,320
all right so if not chris you're up

50
00:02:00,320 --> 00:02:04,360
you can stop my slideshare

51
00:02:10,160 --> 00:02:13,040
okay um

52
00:02:13,040 --> 00:02:14,720
uh just to confirm you can see the

53
00:02:14,720 --> 00:02:17,040
slides

54
00:02:17,599 --> 00:02:21,200
great okay all right so thank you on um

55
00:02:21,200 --> 00:02:23,280
this is uh just an overview of oblivious

56
00:02:23,280 --> 00:02:25,760
http um i'm still going to refer to the

57
00:02:25,760 --> 00:02:27,680
protocols of http even though the word

58
00:02:27,680 --> 00:02:29,520
group has probably one of the best names

59
00:02:29,520 --> 00:02:31,920
we've seen in the itf for some time now

60
00:02:31,920 --> 00:02:34,000
um

61
00:02:34,000 --> 00:02:36,879
this is uh primarily led by uh martin

62
00:02:36,879 --> 00:02:38,080
but i've helped him know a little bit

63
00:02:38,080 --> 00:02:39,360
along the way

64
00:02:39,360 --> 00:02:40,800
um

65
00:02:40,800 --> 00:02:42,560
okay so the the problem statement for

66
00:02:42,560 --> 00:02:45,200
oblivious hp is quite simple um there

67
00:02:45,200 --> 00:02:47,840
are many many cases where you have

68
00:02:47,840 --> 00:02:49,840
clients interacting with servers

69
00:02:49,840 --> 00:02:52,239
doing simple very simple tasks

70
00:02:52,239 --> 00:02:52,959
like

71
00:02:52,959 --> 00:02:55,440
performing you know a dns query

72
00:02:55,440 --> 00:02:56,480
or

73
00:02:56,480 --> 00:03:00,560
executing a safe a safe browsing query

74
00:03:00,560 --> 00:03:02,560
in which in interacting with the server

75
00:03:02,560 --> 00:03:03,920
they're revealing a bit of sensitive

76
00:03:03,920 --> 00:03:05,760
information the actual data itself is

77
00:03:05,760 --> 00:03:07,040
sensitive

78
00:03:07,040 --> 00:03:08,720
and by virtue of connecting directly to

79
00:03:08,720 --> 00:03:10,959
the server they're also reviewing their

80
00:03:10,959 --> 00:03:13,519
identity that is the ip address of the

81
00:03:13,519 --> 00:03:17,040
client directly to the server as well

82
00:03:17,040 --> 00:03:18,480
for reasons it should be obvious this

83
00:03:18,480 --> 00:03:20,640
sort of uh exposure is not great from a

84
00:03:20,640 --> 00:03:22,159
privacy perspective because it allows

85
00:03:22,159 --> 00:03:23,920
the server upon interacting with the

86
00:03:23,920 --> 00:03:26,000
client to link both data

87
00:03:26,000 --> 00:03:28,080
that the client sends and potentially

88
00:03:28,080 --> 00:03:30,640
also receives uh with the identity of

89
00:03:30,640 --> 00:03:31,920
the client

90
00:03:31,920 --> 00:03:33,760
so if you consider the case of the dns

91
00:03:33,760 --> 00:03:37,040
queries this allows uh say for example a

92
00:03:37,040 --> 00:03:40,319
dns recursive resolver to collect

93
00:03:40,319 --> 00:03:42,640
effectively the the browsing history of

94
00:03:42,640 --> 00:03:44,720
clients

95
00:03:44,720 --> 00:03:47,280
and they may have you know uh policies

96
00:03:47,280 --> 00:03:49,120
around how those uh

97
00:03:49,120 --> 00:03:51,200
how that data is managed but

98
00:03:51,200 --> 00:03:52,000
um

99
00:03:52,000 --> 00:03:54,239
essentially it's it's it

100
00:03:54,239 --> 00:03:56,720
it's not great for the data to be uh

101
00:03:56,720 --> 00:03:58,879
collected uh or available in the first

102
00:03:58,879 --> 00:04:00,879
place

103
00:04:00,879 --> 00:04:02,159
there are a number of other applications

104
00:04:02,159 --> 00:04:03,280
as well

105
00:04:03,280 --> 00:04:05,200
it's been discussed on the list for

106
00:04:05,200 --> 00:04:07,599
example uploading telemetry data from a

107
00:04:07,599 --> 00:04:09,599
browser or any other application to a

108
00:04:09,599 --> 00:04:11,439
server where the telemetry data might

109
00:04:11,439 --> 00:04:12,959
have sensitive information about that

110
00:04:12,959 --> 00:04:15,200
particular client's experience using the

111
00:04:15,200 --> 00:04:17,759
web page or doing some other activity

112
00:04:17,759 --> 00:04:19,839
where you don't want to link

113
00:04:19,839 --> 00:04:21,839
that particular data with a specific

114
00:04:21,839 --> 00:04:23,759
client

115
00:04:23,759 --> 00:04:26,160
and in general there's there's a lot

116
00:04:26,160 --> 00:04:28,160
there's plenty of applications um and

117
00:04:28,160 --> 00:04:30,320
scenarios where we have uh these sort of

118
00:04:30,320 --> 00:04:32,479
transactional you know single request

119
00:04:32,479 --> 00:04:36,400
response uh protocols um or exchanges

120
00:04:36,400 --> 00:04:37,600
taking place

121
00:04:37,600 --> 00:04:39,040
um

122
00:04:39,040 --> 00:04:40,960
in which the exchange itself does reveal

123
00:04:40,960 --> 00:04:42,479
sensitive information

124
00:04:42,479 --> 00:04:44,720
so bluey's http is all about trying to

125
00:04:44,720 --> 00:04:46,479
address this particular linkability

126
00:04:46,479 --> 00:04:48,880
problem

127
00:04:49,360 --> 00:04:51,280
of course there are a number of ways you

128
00:04:51,280 --> 00:04:52,960
could address this without any new

129
00:04:52,960 --> 00:04:54,880
protocol for example you could use a

130
00:04:54,880 --> 00:04:57,360
general connection oriented proxy like

131
00:04:57,360 --> 00:04:59,520
connect as it's already standardized or

132
00:04:59,520 --> 00:05:01,120
the hask or tor

133
00:05:01,120 --> 00:05:01,919
um

134
00:05:01,919 --> 00:05:03,919
but as of it's often the case that these

135
00:05:03,919 --> 00:05:06,080
uh these connection oriented proxies

136
00:05:06,080 --> 00:05:08,880
have much stronger requirements um

137
00:05:08,880 --> 00:05:11,440
uh extra privacy and on anonymity

138
00:05:11,440 --> 00:05:12,560
requirements

139
00:05:12,560 --> 00:05:14,560
uh in practice tor for example has

140
00:05:14,560 --> 00:05:16,160
multiple hops that clients go through in

141
00:05:16,160 --> 00:05:18,320
order to further off you skate and and

142
00:05:18,320 --> 00:05:20,880
make sure that um linking a specific

143
00:05:20,880 --> 00:05:22,960
client to a specific uh target

144
00:05:22,960 --> 00:05:25,120
eventually connecting to is is hard in

145
00:05:25,120 --> 00:05:26,639
the presence of some

146
00:05:26,639 --> 00:05:30,160
um some you know a very pervasive active

147
00:05:30,160 --> 00:05:31,280
attacker

148
00:05:31,280 --> 00:05:33,120
um and as a result of you know

149
00:05:33,120 --> 00:05:34,639
stretching things out or adding more

150
00:05:34,639 --> 00:05:36,960
layers or hops there's more overhead

151
00:05:36,960 --> 00:05:38,720
added to the protocol

152
00:05:38,720 --> 00:05:40,639
which is problematic because

153
00:05:40,639 --> 00:05:42,400
uh typically these transactional

154
00:05:42,400 --> 00:05:44,639
exchanges that take place for dns

155
00:05:44,639 --> 00:05:47,840
queries for you know telemetry uploads

156
00:05:47,840 --> 00:05:49,120
typically

157
00:05:49,120 --> 00:05:51,680
are just a single round trip

158
00:05:51,680 --> 00:05:53,280
and sometimes especially in the case of

159
00:05:53,280 --> 00:05:55,039
dns they're very performance sensitive

160
00:05:55,039 --> 00:05:56,160
especially if you're going to do a

161
00:05:56,160 --> 00:05:57,199
single

162
00:05:57,199 --> 00:05:58,560
request

163
00:05:58,560 --> 00:06:00,319
before you know trying to connect to a

164
00:06:00,319 --> 00:06:02,160
particular server

165
00:06:02,160 --> 00:06:03,440
so if you

166
00:06:03,440 --> 00:06:06,000
wanted privacy using these existing

167
00:06:06,000 --> 00:06:07,520
technologies

168
00:06:07,520 --> 00:06:10,400
like mask or connect what have you you'd

169
00:06:10,400 --> 00:06:12,800
have to trade off um

170
00:06:12,800 --> 00:06:15,199
you know effectively performance

171
00:06:15,199 --> 00:06:17,520
um

172
00:06:17,680 --> 00:06:18,880
or you'd have to make a trade-off

173
00:06:18,880 --> 00:06:20,639
between sort of performance of using

174
00:06:20,639 --> 00:06:23,120
this particular proxy protocol

175
00:06:23,120 --> 00:06:25,280
and privacy

176
00:06:25,280 --> 00:06:26,240
you could

177
00:06:26,240 --> 00:06:28,720
for example get great performance with

178
00:06:28,720 --> 00:06:30,240
connect or mask if you kept the

179
00:06:30,240 --> 00:06:31,919
connection open for a long amount of

180
00:06:31,919 --> 00:06:34,080
time and then just sent you know these

181
00:06:34,080 --> 00:06:35,840
these single request response queries

182
00:06:35,840 --> 00:06:37,280
over that over that long lived

183
00:06:37,280 --> 00:06:38,240
connection

184
00:06:38,240 --> 00:06:40,000
but then you'd be allowing the server to

185
00:06:40,000 --> 00:06:41,440
potentially link

186
00:06:41,440 --> 00:06:43,360
you know these multiple queries of these

187
00:06:43,360 --> 00:06:44,880
multiple requests over the single

188
00:06:44,880 --> 00:06:46,160
connection

189
00:06:46,160 --> 00:06:47,360
even though the server might not know

190
00:06:47,360 --> 00:06:48,479
who you are

191
00:06:48,479 --> 00:06:50,479
um which is less good from a privacy

192
00:06:50,479 --> 00:06:51,599
perspective

193
00:06:51,599 --> 00:06:53,280
um alternatively if you wanted to break

194
00:06:53,280 --> 00:06:55,039
that link ability you'd have to stand up

195
00:06:55,039 --> 00:06:56,639
a fresh connection a fresh tunnel every

196
00:06:56,639 --> 00:06:58,400
single time which does incur a

197
00:06:58,400 --> 00:07:00,639
performance penalty um

198
00:07:00,639 --> 00:07:03,039
so in general um you know this trade-off

199
00:07:03,039 --> 00:07:04,319
is not great especially for

200
00:07:04,319 --> 00:07:05,759
performance-sensitive applications like

201
00:07:05,759 --> 00:07:08,160
dns and other things um and it's

202
00:07:08,160 --> 00:07:10,479
unnecessary it turns out um as is

203
00:07:10,479 --> 00:07:13,199
exemplified by obvious http

204
00:07:13,199 --> 00:07:15,360
um you can also go down the route of

205
00:07:15,360 --> 00:07:17,520
using a specific application specific

206
00:07:17,520 --> 00:07:19,759
protocol for you know breaking this link

207
00:07:19,759 --> 00:07:22,479
ability so in the case of telemetry

208
00:07:22,479 --> 00:07:24,319
where you are you know trying to it

209
00:07:24,319 --> 00:07:25,919
collects some information about you know

210
00:07:25,919 --> 00:07:28,160
what the browser's user's experience is

211
00:07:28,160 --> 00:07:29,440
like

212
00:07:29,440 --> 00:07:31,599
you you could collect this data in a

213
00:07:31,599 --> 00:07:33,759
privacy preserving way using something

214
00:07:33,759 --> 00:07:35,599
like prio or privacy preserving

215
00:07:35,599 --> 00:07:37,120
measurement there's a bluff happening

216
00:07:37,120 --> 00:07:38,720
later this week i encourage folks to

217
00:07:38,720 --> 00:07:40,720
check out um

218
00:07:40,720 --> 00:07:43,039
but these inherently are more

219
00:07:43,039 --> 00:07:44,720
complicated protocols involving more

220
00:07:44,720 --> 00:07:46,400
parties um

221
00:07:46,400 --> 00:07:49,440
and it requires infrastructure

222
00:07:49,440 --> 00:07:50,960
non-trivial infrastructure that is not

223
00:07:50,960 --> 00:07:52,240
currently there

224
00:07:52,240 --> 00:07:53,680
it's also true that oblivious http

225
00:07:53,680 --> 00:07:55,440
requires new infrastructure as well it's

226
00:07:55,440 --> 00:07:56,319
it's

227
00:07:56,319 --> 00:07:59,599
significantly simpler um and retrospect

228
00:07:59,599 --> 00:07:59,920
um

229
00:07:59,920 --> 00:08:01,039
[Music]

230
00:08:01,039 --> 00:08:03,440
in the case of prio specifically as well

231
00:08:03,440 --> 00:08:05,680
um this these application specific

232
00:08:05,680 --> 00:08:08,479
verticals add delay um you can't just

233
00:08:08,479 --> 00:08:09,599
like

234
00:08:09,599 --> 00:08:12,000
collect the data instantaneously

235
00:08:12,000 --> 00:08:15,039
um and then look at it um

236
00:08:15,039 --> 00:08:17,840
whereas with uh you know

237
00:08:17,840 --> 00:08:18,879
the protocols that we're talking about

238
00:08:18,879 --> 00:08:21,120
here and oblivious http dns state

239
00:08:21,120 --> 00:08:22,560
browsing what have you

240
00:08:22,560 --> 00:08:26,000
um it's available immediately um

241
00:08:26,000 --> 00:08:27,840
necessarily must be especially for dns

242
00:08:27,840 --> 00:08:29,840
because again we want but that's a very

243
00:08:29,840 --> 00:08:31,919
performance sensitive protocol we need

244
00:08:31,919 --> 00:08:33,120
the response immediately in order to

245
00:08:33,120 --> 00:08:35,839
connect to a server

246
00:08:35,839 --> 00:08:37,519
so all that is to say

247
00:08:37,519 --> 00:08:39,440
there are existing techniques to address

248
00:08:39,440 --> 00:08:40,880
this particular problem but they don't

249
00:08:40,880 --> 00:08:43,039
seem particularly well suited to the

250
00:08:43,039 --> 00:08:44,880
applications that we have

251
00:08:44,880 --> 00:08:47,839
that we're considering here

252
00:08:47,839 --> 00:08:49,600
and this is where oblivious hdb comes

253
00:08:49,600 --> 00:08:51,440
into play

254
00:08:51,440 --> 00:08:53,839
it's a very very simple message-oriented

255
00:08:53,839 --> 00:08:56,160
proxy between client and server that

256
00:08:56,160 --> 00:08:58,240
combines two well-known things for

257
00:08:58,240 --> 00:09:00,560
achieving privacy uh and you know

258
00:09:00,560 --> 00:09:02,320
breaking this linkability between client

259
00:09:02,320 --> 00:09:04,480
and identity the first of which is a

260
00:09:04,480 --> 00:09:06,080
network proxy

261
00:09:06,080 --> 00:09:07,920
between the client and the target we'll

262
00:09:07,920 --> 00:09:08,800
call it

263
00:09:08,800 --> 00:09:11,680
um that exists to obfuscate or hide the

264
00:09:11,680 --> 00:09:13,760
client ip address or it's identity from

265
00:09:13,760 --> 00:09:15,120
the target server

266
00:09:15,120 --> 00:09:16,640
and the second of which is public key

267
00:09:16,640 --> 00:09:19,920
encryption um using hpke

268
00:09:19,920 --> 00:09:23,360
to hide data from the proxy itself

269
00:09:23,360 --> 00:09:25,120
so the proxy is effectively sending

270
00:09:25,120 --> 00:09:26,560
messages back and forth between the

271
00:09:26,560 --> 00:09:28,399
client and the target but it can't see

272
00:09:28,399 --> 00:09:29,760
the contents of any of these messages

273
00:09:29,760 --> 00:09:31,519
because they're encrypted that's the

274
00:09:31,519 --> 00:09:33,839
gist

275
00:09:35,760 --> 00:09:38,000
and here's uh just a sort of quick

276
00:09:38,000 --> 00:09:40,000
overview of how it works just to uh in

277
00:09:40,000 --> 00:09:41,920
case you're not familiar with it

278
00:09:41,920 --> 00:09:43,360
so the typical arrangement is you have

279
00:09:43,360 --> 00:09:45,680
this client proxy and a target

280
00:09:45,680 --> 00:09:47,200
and then typically you know resource for

281
00:09:47,200 --> 00:09:49,920
servers beyond a particular target i'm

282
00:09:49,920 --> 00:09:51,440
like sort of separating them here

283
00:09:51,440 --> 00:09:53,279
because the target has a particular role

284
00:09:53,279 --> 00:09:54,480
in terms of the

285
00:09:54,480 --> 00:09:55,760
actual encryption and decryption that

286
00:09:55,760 --> 00:09:57,440
takes place and the resource server is

287
00:09:57,440 --> 00:09:59,040
the one that actually has the content of

288
00:09:59,040 --> 00:10:02,640
the clients actually fundamentally after

289
00:10:02,640 --> 00:10:04,079
so before anything happens it's assumed

290
00:10:04,079 --> 00:10:05,920
that the client sort of discovers some

291
00:10:05,920 --> 00:10:06,800
way

292
00:10:06,800 --> 00:10:09,519
you know mechanism out of band uh or are

293
00:10:09,519 --> 00:10:11,279
not not specified in this particular

294
00:10:11,279 --> 00:10:14,320
document um the the target hpke

295
00:10:14,320 --> 00:10:16,399
configuration that is to say the public

296
00:10:16,399 --> 00:10:17,839
key that the client will use to encrypt

297
00:10:17,839 --> 00:10:20,959
information to the target server

298
00:10:20,959 --> 00:10:23,200
then opens up an https connection to the

299
00:10:23,200 --> 00:10:24,720
proxy

300
00:10:24,720 --> 00:10:26,880
fairly straightforward

301
00:10:26,880 --> 00:10:28,800
and then over that https connection

302
00:10:28,800 --> 00:10:31,279
sends a public key encrypted http

303
00:10:31,279 --> 00:10:32,560
request

304
00:10:32,560 --> 00:10:34,560
which is then forwarded along to the

305
00:10:34,560 --> 00:10:37,279
target server

306
00:10:37,360 --> 00:10:39,680
who decapsulates it because it has the

307
00:10:39,680 --> 00:10:41,600
corresponding private key

308
00:10:41,600 --> 00:10:44,000
revealing the http request

309
00:10:44,000 --> 00:10:45,680
and then it goes off and

310
00:10:45,680 --> 00:10:46,959
you know

311
00:10:46,959 --> 00:10:49,040
get gets the resource corresponding to

312
00:10:49,040 --> 00:10:50,640
that particular request

313
00:10:50,640 --> 00:10:53,040
um generates a response in return or

314
00:10:53,040 --> 00:10:56,240
gets a response in return

315
00:10:56,320 --> 00:10:58,160
and then simply encapsulates it and

316
00:10:58,160 --> 00:11:00,079
sends it back to the client through the

317
00:11:00,079 --> 00:11:01,760
proxy

318
00:11:01,760 --> 00:11:03,760
so fundamentally what we have here are

319
00:11:03,760 --> 00:11:05,680
um well fundamentally we have here is a

320
00:11:05,680 --> 00:11:08,000
simple request response encrypted in

321
00:11:08,000 --> 00:11:09,839
each way and if the client was to send

322
00:11:09,839 --> 00:11:12,079
multiple of these each of them would be

323
00:11:12,079 --> 00:11:14,160
sort of unlinkable from from each other

324
00:11:14,160 --> 00:11:16,640
from the perspective of the target

325
00:11:16,640 --> 00:11:18,560
because all the target sees is a single

326
00:11:18,560 --> 00:11:20,480
tls connection to the proxy and then

327
00:11:20,480 --> 00:11:22,560
multiple encrypted requests or queries

328
00:11:22,560 --> 00:11:23,920
coming over it it doesn't know whether

329
00:11:23,920 --> 00:11:24,880
or not they're coming from the same

330
00:11:24,880 --> 00:11:27,360
client or not

331
00:11:27,360 --> 00:11:30,240
hey chris uh quick clarifying question

332
00:11:30,240 --> 00:11:32,320
um i noticed you've drawn this dotted

333
00:11:32,320 --> 00:11:33,920
box on the target server and the

334
00:11:33,920 --> 00:11:37,360
resource server um it does that indicate

335
00:11:37,360 --> 00:11:39,200
that you know in principle those two

336
00:11:39,200 --> 00:11:41,440
could be uh operated by the same menstru

337
00:11:41,440 --> 00:11:43,279
or could be instantiated on the same

338
00:11:43,279 --> 00:11:45,120
device without um undermining the

339
00:11:45,120 --> 00:11:47,279
security guarantees we're after here

340
00:11:47,279 --> 00:11:49,519
that's correct um uh

341
00:11:49,519 --> 00:11:51,600
especially in the case of dns or

342
00:11:51,600 --> 00:11:53,120
oblivious doe which is like the

343
00:11:53,120 --> 00:11:54,800
predecessor to this work

344
00:11:54,800 --> 00:11:57,040
it's advantageous for the target server

345
00:11:57,040 --> 00:11:58,399
and the resource server which is the

346
00:11:58,399 --> 00:12:00,240
recursive resolver in this case to be

347
00:12:00,240 --> 00:12:02,320
operated by the same entity to minimize

348
00:12:02,320 --> 00:12:05,920
performance penalties involved um

349
00:12:05,920 --> 00:12:08,480
there's there's no i again as

350
00:12:08,480 --> 00:12:09,519
as i was saying earlier they've only

351
00:12:09,519 --> 00:12:11,279
separated them for the purposes of you

352
00:12:11,279 --> 00:12:13,279
know uh separating the roles that they

353
00:12:13,279 --> 00:12:14,959
play the target is responsible for the

354
00:12:14,959 --> 00:12:16,639
cryptography and the resources

355
00:12:16,639 --> 00:12:18,240
responsible for the application data

356
00:12:18,240 --> 00:12:21,519
bits um but they can totally be the same

357
00:12:21,519 --> 00:12:24,399
box the same logical entity

358
00:12:24,399 --> 00:12:25,600
thanks

359
00:12:25,600 --> 00:12:27,200
yep

360
00:12:27,200 --> 00:12:30,240
uh thank you for the question

361
00:12:30,320 --> 00:12:33,519
um so if we if we revisit the the if you

362
00:12:33,519 --> 00:12:35,680
think back to the the initial uh the

363
00:12:35,680 --> 00:12:37,920
initial slide wherein the server

364
00:12:37,920 --> 00:12:39,920
previously saw both the data and

365
00:12:39,920 --> 00:12:41,519
identity

366
00:12:41,519 --> 00:12:43,279
quickly convince you that that this is

367
00:12:43,279 --> 00:12:45,440
no longer the case in in this particular

368
00:12:45,440 --> 00:12:47,360
protocol assuming non-collusion

369
00:12:47,360 --> 00:12:48,480
requirements i'll get to in just a

370
00:12:48,480 --> 00:12:49,600
little bit

371
00:12:49,600 --> 00:12:51,120
so it should be obvious that the client

372
00:12:51,120 --> 00:12:52,959
knows both the data that wants to send

373
00:12:52,959 --> 00:12:54,639
and the data it receives

374
00:12:54,639 --> 00:12:57,600
as well as its own identity

375
00:12:57,600 --> 00:12:59,279
proxy however though because it's just

376
00:12:59,279 --> 00:13:01,440
sending encrypted requests and response

377
00:13:01,440 --> 00:13:03,519
between the client the target all it

378
00:13:03,519 --> 00:13:04,800
sees

379
00:13:04,800 --> 00:13:06,880
in clear text are the identities of

380
00:13:06,880 --> 00:13:08,639
either end so it knows the client that

381
00:13:08,639 --> 00:13:10,000
it's engaging with and it knows the

382
00:13:10,000 --> 00:13:12,399
target that's uh it's sending data to on

383
00:13:12,399 --> 00:13:14,320
behalf of the client but it doesn't know

384
00:13:14,320 --> 00:13:16,560
anything about the data beyond that um

385
00:13:16,560 --> 00:13:17,920
you know module like length of the

386
00:13:17,920 --> 00:13:19,839
encrypted data and whatnot but touch on

387
00:13:19,839 --> 00:13:22,639
that a little bit as well

388
00:13:22,639 --> 00:13:25,519
and then the target uh equally sees uh

389
00:13:25,519 --> 00:13:27,200
just the identity of the targets or the

390
00:13:27,200 --> 00:13:29,200
proxy server that's engaged with um as

391
00:13:29,200 --> 00:13:32,160
well as any of the client data um the

392
00:13:32,160 --> 00:13:34,000
that is the encrypted or rather the

393
00:13:34,000 --> 00:13:35,760
decrypted request and the response

394
00:13:35,760 --> 00:13:37,440
that's produced in result as a result

395
00:13:37,440 --> 00:13:39,760
and eventually sent back to the client

396
00:13:39,760 --> 00:13:40,959
um

397
00:13:40,959 --> 00:13:43,440
so importantly no single entity beyond

398
00:13:43,440 --> 00:13:46,320
the client has both the identity and the

399
00:13:46,320 --> 00:13:47,519
data

400
00:13:47,519 --> 00:13:50,880
um which is effectively what we're after

401
00:13:50,880 --> 00:13:52,880
here for the the various applications

402
00:13:52,880 --> 00:13:55,760
that we're considering

403
00:13:56,240 --> 00:13:58,240
um so the threat model is uh fairly

404
00:13:58,240 --> 00:14:00,560
simple um

405
00:14:00,560 --> 00:14:03,040
it assumes some trust uh between parties

406
00:14:03,040 --> 00:14:04,480
that are engaged in the protocol so for

407
00:14:04,480 --> 00:14:07,600
example the the client in uh in its

408
00:14:07,600 --> 00:14:08,959
configuration and selection of a

409
00:14:08,959 --> 00:14:10,959
particular proxy it trusts that the

410
00:14:10,959 --> 00:14:12,800
proxy's not obviously just revealing

411
00:14:12,800 --> 00:14:14,720
sensitive information to the target like

412
00:14:14,720 --> 00:14:16,320
not just sending along you know the

413
00:14:16,320 --> 00:14:18,639
client h ip address and an http header

414
00:14:18,639 --> 00:14:20,079
along the request

415
00:14:20,079 --> 00:14:21,440
um

416
00:14:21,440 --> 00:14:23,920
and the target uh also assumes that the

417
00:14:23,920 --> 00:14:25,760
proxy is you know taking measures to

418
00:14:25,760 --> 00:14:27,760
ensure that it's not overloading

419
00:14:27,760 --> 00:14:30,720
uh it's not overloading the target um

420
00:14:30,720 --> 00:14:33,120
the the proxy as a participant in this

421
00:14:33,120 --> 00:14:35,519
protocol um making sure that you know

422
00:14:35,519 --> 00:14:37,920
the that the ip address is hidden from

423
00:14:37,920 --> 00:14:41,199
the target has a role to play um in the

424
00:14:41,199 --> 00:14:43,199
exchange and completion of a single

425
00:14:43,199 --> 00:14:45,680
transaction and as a result also has a

426
00:14:45,680 --> 00:14:47,920
role to play in ensuring that the system

427
00:14:47,920 --> 00:14:51,519
is uh available and not abused

428
00:14:51,519 --> 00:14:52,880
um the

429
00:14:52,880 --> 00:14:55,279
from a i guess collusion perspective the

430
00:14:55,279 --> 00:14:58,160
the core requirement is that the uh

431
00:14:58,160 --> 00:15:00,800
target does not uh you know

432
00:15:00,800 --> 00:15:04,079
glue with the share data with whatever

433
00:15:04,079 --> 00:15:06,639
with the proxy itself um

434
00:15:06,639 --> 00:15:08,320
because if you did have you know both of

435
00:15:08,320 --> 00:15:11,199
these entities controlled by the same

436
00:15:11,199 --> 00:15:12,880
by the same actor they could just you

437
00:15:12,880 --> 00:15:14,560
know put the pieces together figure out

438
00:15:14,560 --> 00:15:16,079
who sent what

439
00:15:16,079 --> 00:15:17,600
um

440
00:15:17,600 --> 00:15:20,000
which is obviously not great

441
00:15:20,000 --> 00:15:21,760
but in the sort of

442
00:15:21,760 --> 00:15:23,360
the configuration deployment models that

443
00:15:23,360 --> 00:15:24,959
are under consideration

444
00:15:24,959 --> 00:15:28,399
um that this this property sort of falls

445
00:15:28,399 --> 00:15:30,639
out

446
00:15:30,639 --> 00:15:32,480
uh and i was mentioning earlier that the

447
00:15:32,480 --> 00:15:33,519
proxy

448
00:15:33,519 --> 00:15:35,279
uh does not see

449
00:15:35,279 --> 00:15:37,839
anything about the application data um

450
00:15:37,839 --> 00:15:41,440
with one caveat and that is you know

451
00:15:41,920 --> 00:15:43,600
i guess you know properties at the

452
00:15:43,600 --> 00:15:45,199
ciphertext including the size of the

453
00:15:45,199 --> 00:15:46,399
ciphertext

454
00:15:46,399 --> 00:15:49,199
when the ciphertext was sent in response

455
00:15:49,199 --> 00:15:50,480
which means that things like traffic

456
00:15:50,480 --> 00:15:53,920
analysis uh you know how how plaintext

457
00:15:53,920 --> 00:15:56,160
should be padded before and encrypted

458
00:15:56,160 --> 00:15:57,600
uh whether or not

459
00:15:57,600 --> 00:15:59,600
timing is of concern um in these

460
00:15:59,600 --> 00:16:00,720
exchanges

461
00:16:00,720 --> 00:16:03,839
um is not discussed in the draft and out

462
00:16:03,839 --> 00:16:06,320
of scope

463
00:16:06,480 --> 00:16:07,920
simply because i don't think we have a

464
00:16:07,920 --> 00:16:09,920
good answer uh for any of these things

465
00:16:09,920 --> 00:16:11,759
that is you know sufficiently generic

466
00:16:11,759 --> 00:16:14,880
and useful to all application protocols

467
00:16:14,880 --> 00:16:15,680
um

468
00:16:15,680 --> 00:16:17,920
there are some existing drafts uh and

469
00:16:17,920 --> 00:16:20,320
standards rather that that discuss how

470
00:16:20,320 --> 00:16:21,600
to use

471
00:16:21,600 --> 00:16:22,880
you know appropriate padding for the

472
00:16:22,880 --> 00:16:24,320
purposes of

473
00:16:24,320 --> 00:16:25,920
minimizing information leakage and

474
00:16:25,920 --> 00:16:27,759
encrypted dns

475
00:16:27,759 --> 00:16:29,839
i believe

476
00:16:29,839 --> 00:16:33,759
based on some work by dkg and others

477
00:16:33,920 --> 00:16:36,480
and so for specific application

478
00:16:36,480 --> 00:16:38,240
protocols that want to use oblivious

479
00:16:38,240 --> 00:16:40,639
http they can just follow that that

480
00:16:40,639 --> 00:16:44,160
specific application guidance

481
00:16:45,920 --> 00:16:48,399
as a a practical matter in you know

482
00:16:48,399 --> 00:16:50,399
using oblivious http there's a number of

483
00:16:50,399 --> 00:16:52,079
number of things to consider uh from an

484
00:16:52,079 --> 00:16:54,320
operational perspective i think the very

485
00:16:54,320 --> 00:16:56,560
first thing to to make abundantly clear

486
00:16:56,560 --> 00:16:58,959
um is that this is an application

487
00:16:58,959 --> 00:17:01,600
specific proxy protocol um so i

488
00:17:01,600 --> 00:17:03,839
mentioned dns i've mentioned telemetry

489
00:17:03,839 --> 00:17:06,079
data uploading i mentioned safe browsing

490
00:17:06,079 --> 00:17:07,280
queries as well

491
00:17:07,280 --> 00:17:09,359
it is not meant to be a general purpose

492
00:17:09,359 --> 00:17:11,760
proxy protocol for which we already have

493
00:17:11,760 --> 00:17:13,199
solutions if that was something you

494
00:17:13,199 --> 00:17:16,000
desired like connect like mask like tor

495
00:17:16,000 --> 00:17:18,720
and so on um

496
00:17:18,720 --> 00:17:20,799
importantly also that

497
00:17:20,799 --> 00:17:23,280
the discovery and configuration of you

498
00:17:23,280 --> 00:17:24,720
know what clients

499
00:17:24,720 --> 00:17:26,640
are sorry which proxies a client will

500
00:17:26,640 --> 00:17:29,600
use as well as which targets clients

501
00:17:29,600 --> 00:17:31,039
will engage with

502
00:17:31,039 --> 00:17:32,640
across these proxies

503
00:17:32,640 --> 00:17:34,320
um is out of scope of this particular

504
00:17:34,320 --> 00:17:35,360
document

505
00:17:35,360 --> 00:17:37,120
um the the

506
00:17:37,120 --> 00:17:39,360
the main idea is uh very similar to doe

507
00:17:39,360 --> 00:17:41,039
in that we're simply specifying the

508
00:17:41,039 --> 00:17:43,840
protocol mechanics and leaving the the

509
00:17:43,840 --> 00:17:45,919
deployment considerations to subsequent

510
00:17:45,919 --> 00:17:46,720
work

511
00:17:46,720 --> 00:17:47,760
um

512
00:17:47,760 --> 00:17:49,679
and subsequent uh

513
00:17:49,679 --> 00:17:51,120
i guess

514
00:17:51,120 --> 00:17:53,200
yeah effort either in this in this in

515
00:17:53,200 --> 00:17:54,799
this working group or elsewhere i forget

516
00:17:54,799 --> 00:17:56,400
exactly what the charter says about this

517
00:17:56,400 --> 00:17:57,600
um

518
00:17:57,600 --> 00:18:00,240
but anyways it's not in the stock

519
00:18:00,240 --> 00:18:01,919
as mentioned earlier

520
00:18:01,919 --> 00:18:03,760
because the uh there is some

521
00:18:03,760 --> 00:18:05,600
relationship between proxies and targets

522
00:18:05,600 --> 00:18:08,559
with respect to um

523
00:18:08,559 --> 00:18:10,640
keeping this sort of service available

524
00:18:10,640 --> 00:18:11,840
and running

525
00:18:11,840 --> 00:18:13,440
proxies do need to engage in some sort

526
00:18:13,440 --> 00:18:14,960
of load balance management to make sure

527
00:18:14,960 --> 00:18:16,400
that they're not just abusing and

528
00:18:16,400 --> 00:18:17,760
overloading the target and taking it

529
00:18:17,760 --> 00:18:18,880
offline

530
00:18:18,880 --> 00:18:20,160
um

531
00:18:20,160 --> 00:18:22,320
and i guess finally as a practical

532
00:18:22,320 --> 00:18:23,679
matter

533
00:18:23,679 --> 00:18:25,120
because

534
00:18:25,120 --> 00:18:28,160
all of the public key material is uh

535
00:18:28,160 --> 00:18:30,640
sort of static it's it's distributed out

536
00:18:30,640 --> 00:18:31,840
of band discovered out of band and

537
00:18:31,840 --> 00:18:33,360
configured clients

538
00:18:33,360 --> 00:18:36,160
um it's possible for um

539
00:18:36,160 --> 00:18:38,640
uh proxies to take encrypted messages

540
00:18:38,640 --> 00:18:41,760
under these these static keys and replay

541
00:18:41,760 --> 00:18:45,039
them um and so targets need to make care

542
00:18:45,039 --> 00:18:46,559
targets need to ensure

543
00:18:46,559 --> 00:18:48,559
um you know that they are injecting

544
00:18:48,559 --> 00:18:50,559
pressure randomness uh into every single

545
00:18:50,559 --> 00:18:52,080
response that's it that's produced in

546
00:18:52,080 --> 00:18:54,240
response to an encrypted request and the

547
00:18:54,240 --> 00:18:56,240
protocol does dictate that this happens

548
00:18:56,240 --> 00:18:58,559
um but you know care needs to be taken

549
00:18:58,559 --> 00:19:00,160
nevertheless um to ensure that

550
00:19:00,160 --> 00:19:02,960
randomness is fresh

551
00:19:04,320 --> 00:19:05,919
there are uh

552
00:19:05,919 --> 00:19:07,919
a number of remember there are at least

553
00:19:07,919 --> 00:19:09,760
two implementations that we're aware of

554
00:19:09,760 --> 00:19:11,600
uh that are interoperable uh one of

555
00:19:11,600 --> 00:19:13,200
which was written by martin another one

556
00:19:13,200 --> 00:19:14,559
was written by me

557
00:19:14,559 --> 00:19:17,520
um and there is a test server up um

558
00:19:17,520 --> 00:19:19,280
that you can interact with a test target

559
00:19:19,280 --> 00:19:20,960
server that you can interact with that

560
00:19:20,960 --> 00:19:23,280
will simply spit out

561
00:19:23,280 --> 00:19:24,799
whatever bytes you happen to send it and

562
00:19:24,799 --> 00:19:26,000
then in

563
00:19:26,000 --> 00:19:28,320
an encapsulated http request

564
00:19:28,320 --> 00:19:30,880
um so uh if you're interested in you

565
00:19:30,880 --> 00:19:32,000
know bringing standing up an

566
00:19:32,000 --> 00:19:34,799
implementation of a client uh or a proxy

567
00:19:34,799 --> 00:19:36,080
um you want to make sure that you're

568
00:19:36,080 --> 00:19:38,320
interoperable

569
00:19:38,320 --> 00:19:39,280
i guess

570
00:19:39,280 --> 00:19:40,880
let me know or send a message to the

571
00:19:40,880 --> 00:19:42,160
mailing list we can share details in

572
00:19:42,160 --> 00:19:44,400
terms of like what the how to use this

573
00:19:44,400 --> 00:19:47,039
thing um but it's there ready to ready

574
00:19:47,039 --> 00:19:49,200
to be hit

575
00:19:49,200 --> 00:19:52,559
um and with that i think i'll pause for

576
00:19:52,559 --> 00:19:54,880
any like technical clarifying questions

577
00:19:54,880 --> 00:19:56,720
um and uh

578
00:19:56,720 --> 00:19:58,400
assuming we get through all those i'll

579
00:19:58,400 --> 00:20:01,200
turn it over to the uh the chairs to

580
00:20:01,200 --> 00:20:03,200
to deal with this question

581
00:20:03,200 --> 00:20:06,679
tell me go ahead

582
00:20:10,080 --> 00:20:12,320
all right hello um thank you for the

583
00:20:12,320 --> 00:20:14,480
presentation um

584
00:20:14,480 --> 00:20:16,240
so one comment i just wanted to

585
00:20:16,240 --> 00:20:18,240
volunteer that um i did recently

586
00:20:18,240 --> 00:20:19,280
implement

587
00:20:19,280 --> 00:20:21,520
the protocol from the drafts both this

588
00:20:21,520 --> 00:20:24,400
and binary http messages

589
00:20:24,400 --> 00:20:27,280
and i think that the specs are good and

590
00:20:27,280 --> 00:20:28,960
definitely usable and ready for adoption

591
00:20:28,960 --> 00:20:33,120
based on that um i did have

592
00:20:33,440 --> 00:20:34,480
a

593
00:20:34,480 --> 00:20:36,640
couple clarifying questions

594
00:20:36,640 --> 00:20:38,559
based on that um that i'll just quickly

595
00:20:38,559 --> 00:20:41,120
ask um

596
00:20:41,440 --> 00:20:44,240
one of the things that wasn't obvious

597
00:20:44,240 --> 00:20:45,760
uh initially reading through the doc

598
00:20:45,760 --> 00:20:47,360
that became obvious implementation is

599
00:20:47,360 --> 00:20:49,600
the fact that

600
00:20:49,600 --> 00:20:52,559
the proxy has to have like

601
00:20:52,559 --> 00:20:55,840
uh a pretty static mapping to like

602
00:20:55,840 --> 00:20:57,280
when you give it a request where is it

603
00:20:57,280 --> 00:20:58,480
supposed to go on the back end and

604
00:20:58,480 --> 00:21:00,000
there's a fair amount of state that's

605
00:21:00,000 --> 00:21:02,000
not mentioned

606
00:21:02,000 --> 00:21:05,440
there so it'd be nice to see a bit more

607
00:21:05,440 --> 00:21:06,240
because that's a piece of the

608
00:21:06,240 --> 00:21:08,559
architecture that wasn't really clear

609
00:21:08,559 --> 00:21:10,400
but then the other question i haven't

610
00:21:10,400 --> 00:21:13,840
maybe this is the one we can address now

611
00:21:14,960 --> 00:21:17,440
the part about binary http being the

612
00:21:17,440 --> 00:21:19,520
body of this seems to be you know as

613
00:21:19,520 --> 00:21:20,720
there are different documents pretty

614
00:21:20,720 --> 00:21:22,799
disconnected um

615
00:21:22,799 --> 00:21:24,880
and like in

616
00:21:24,880 --> 00:21:27,520
odo you know we didn't actually have

617
00:21:27,520 --> 00:21:31,120
the interior of the oblivious message be

618
00:21:31,120 --> 00:21:34,640
http it's fine for it to be http but

619
00:21:34,640 --> 00:21:36,159
in this in the current document we are

620
00:21:36,159 --> 00:21:37,840
specifying

621
00:21:37,840 --> 00:21:40,240
like this payload always is a binary hp

622
00:21:40,240 --> 00:21:42,720
message um it seems that both the client

623
00:21:42,720 --> 00:21:44,080
and the target could decide to put

624
00:21:44,080 --> 00:21:46,000
something else in there

625
00:21:46,000 --> 00:21:47,679
is there any reason we need to restrict

626
00:21:47,679 --> 00:21:49,280
it to that

627
00:21:49,280 --> 00:21:50,480
um

628
00:21:50,480 --> 00:21:52,640
or can this really just be a mechanism

629
00:21:52,640 --> 00:21:54,559
where we have oblivious bodies that we

630
00:21:54,559 --> 00:21:57,440
send over http and we don't really care

631
00:21:57,440 --> 00:21:59,440
what's in them

632
00:21:59,440 --> 00:22:01,840
i i think the latter and the document is

633
00:22:01,840 --> 00:22:03,760
at least the oblivious hdb document is

634
00:22:03,760 --> 00:22:06,799
sort of written in that particular way

635
00:22:06,799 --> 00:22:08,400
and

636
00:22:08,400 --> 00:22:10,880
as you point out as you observe um

637
00:22:10,880 --> 00:22:13,200
that is uh it it deals strictly with the

638
00:22:13,200 --> 00:22:14,720
the encapsulation and decapsulation

639
00:22:14,720 --> 00:22:18,000
mechanism doesn't make any sort of uh

640
00:22:18,000 --> 00:22:19,760
that i'm that i can recall stronger

641
00:22:19,760 --> 00:22:22,320
requirements um in terms of what is

642
00:22:22,320 --> 00:22:23,200
actually

643
00:22:23,200 --> 00:22:26,400
in the the encrypted uh payload

644
00:22:26,400 --> 00:22:28,640
so yeah it seems perfectly reasonable to

645
00:22:28,640 --> 00:22:30,880
me from a technical perspective that

646
00:22:30,880 --> 00:22:32,320
you know this just be a generic

647
00:22:32,320 --> 00:22:34,320
encapsulation mechanism encapsulation

648
00:22:34,320 --> 00:22:35,520
layer for

649
00:22:35,520 --> 00:22:38,000
things that the client target agree upon

650
00:22:38,000 --> 00:22:40,640
um oblivious or a binary http being you

651
00:22:40,640 --> 00:22:41,600
know the

652
00:22:41,600 --> 00:22:42,320
the

653
00:22:42,320 --> 00:22:44,320
the one that you you would most likely

654
00:22:44,320 --> 00:22:46,559
use

655
00:22:48,320 --> 00:22:50,480
um and on your i guess your your first

656
00:22:50,480 --> 00:22:52,159
question uh regarding sort of proxy

657
00:22:52,159 --> 00:22:53,440
configuration

658
00:22:53,440 --> 00:22:54,640
um

659
00:22:54,640 --> 00:22:56,000
uh yeah i agree

660
00:22:56,000 --> 00:22:58,400
certainly more information could be uh

661
00:22:58,400 --> 00:23:00,559
i guess included with respect to what

662
00:23:00,559 --> 00:23:02,159
state proxies need to keep in order to

663
00:23:02,159 --> 00:23:04,320
keep in order to route requests from

664
00:23:04,320 --> 00:23:06,240
clients to particular targets

665
00:23:06,240 --> 00:23:08,320
as you know in obviously erin oblivious

666
00:23:08,320 --> 00:23:09,440
doe rather

667
00:23:09,440 --> 00:23:10,559
um

668
00:23:10,559 --> 00:23:12,880
we sort of put the state on the wire um

669
00:23:12,880 --> 00:23:15,520
so clients would specify effectively the

670
00:23:15,520 --> 00:23:17,919
route via the request that came into the

671
00:23:17,919 --> 00:23:18,960
proxy

672
00:23:18,960 --> 00:23:22,000
um but oblivious http um the the spec

673
00:23:22,000 --> 00:23:23,360
doesn't require that to be the case

674
00:23:23,360 --> 00:23:25,360
although the the two are somewhat

675
00:23:25,360 --> 00:23:27,919
functionally isomorphic um

676
00:23:27,919 --> 00:23:30,240
uh and we can we can just add some

677
00:23:30,240 --> 00:23:31,919
rationale uh to the current design of

678
00:23:31,919 --> 00:23:33,840
the draft um if i could ask that you

679
00:23:33,840 --> 00:23:36,480
file an issue to that effect against the

680
00:23:36,480 --> 00:23:39,120
trap that would be that would be great

681
00:23:39,120 --> 00:23:40,559
that's good

682
00:23:40,559 --> 00:23:41,600
thank you

683
00:23:41,600 --> 00:23:43,279
richard

684
00:23:43,279 --> 00:23:45,440
hi yeah i just wanted to thank you for a

685
00:23:45,440 --> 00:23:48,240
brief chair note from the chairs um that

686
00:23:48,240 --> 00:23:49,520
on on the scope of what we're talking

687
00:23:49,520 --> 00:23:50,559
about there's been a bunch of discussion

688
00:23:50,559 --> 00:23:52,960
about collusion and proxy selection

689
00:23:52,960 --> 00:23:54,720
in the chat and this is just a reminder

690
00:23:54,720 --> 00:23:57,039
from the buff and the charter that

691
00:23:57,039 --> 00:23:58,960
uh the initial protocol we are to

692
00:23:58,960 --> 00:24:00,640
develop does not have those things in

693
00:24:00,640 --> 00:24:02,559
scope so the protocol starts from an

694
00:24:02,559 --> 00:24:03,679
assumption

695
00:24:03,679 --> 00:24:05,520
that the client has selected a proxy

696
00:24:05,520 --> 00:24:08,080
server and a target server that it

697
00:24:08,080 --> 00:24:10,400
assumes are non-colluding how the client

698
00:24:10,400 --> 00:24:12,880
makes that choice is out of scope

699
00:24:12,880 --> 00:24:14,240
you can imagine a variety of ones

700
00:24:14,240 --> 00:24:15,840
ranging from fully automated discovery

701
00:24:15,840 --> 00:24:18,000
to highly manual configuration that is

702
00:24:18,000 --> 00:24:20,240
not the business of this working group

703
00:24:20,240 --> 00:24:22,960
um so um any discussion of you know how

704
00:24:22,960 --> 00:24:24,640
we um you know

705
00:24:24,640 --> 00:24:26,640
so it's up the protocol's job is to make

706
00:24:26,640 --> 00:24:28,480
sure those entities are identifiable to

707
00:24:28,480 --> 00:24:30,400
the client and um probably

708
00:24:30,400 --> 00:24:33,679
authenticatable by the client but not uh

709
00:24:33,679 --> 00:24:35,440
to talk about how they are chosen by the

710
00:24:35,440 --> 00:24:37,760
client

711
00:24:37,919 --> 00:24:40,559
thank you richard

712
00:24:42,720 --> 00:24:43,919
andrew

713
00:24:43,919 --> 00:24:45,840
so i was gonna exit the cube and i'll

714
00:24:45,840 --> 00:24:48,080
ask the question anyway which was what

715
00:24:48,080 --> 00:24:50,400
can we do to try and avoid the problem

716
00:24:50,400 --> 00:24:52,159
of colluding proxies

717
00:24:52,159 --> 00:24:54,640
um but uh noting richard's comment you

718
00:24:54,640 --> 00:24:55,919
might want to ignore that for now but i

719
00:24:55,919 --> 00:24:57,679
think it is a problem that at some point

720
00:24:57,679 --> 00:24:59,200
we have to address

721
00:24:59,200 --> 00:25:01,760
um otherwise we're giving the illusion

722
00:25:01,760 --> 00:25:03,279
of privacy

723
00:25:03,279 --> 00:25:05,279
but with absolutely no guarantees of

724
00:25:05,279 --> 00:25:06,960
anything whatsoever being provided to

725
00:25:06,960 --> 00:25:08,799
the end user so from an end user point

726
00:25:08,799 --> 00:25:10,400
of view i think that's hugely

727
00:25:10,400 --> 00:25:12,559
problematic

728
00:25:12,559 --> 00:25:14,799
um yeah i mean it's uh

729
00:25:14,799 --> 00:25:16,799
it's a good question um and i'm gonna

730
00:25:16,799 --> 00:25:18,640
punt uh because for now it's out of

731
00:25:18,640 --> 00:25:20,960
scope but um when we start talking about

732
00:25:20,960 --> 00:25:22,640
you know dynamic configuration of these

733
00:25:22,640 --> 00:25:23,679
things

734
00:25:23,679 --> 00:25:25,600
uh and actual discovery protocols i

735
00:25:25,600 --> 00:25:26,960
think we'll obviously need to address

736
00:25:26,960 --> 00:25:29,039
that but for the time being with the

737
00:25:29,039 --> 00:25:30,080
assumption that you know the

738
00:25:30,080 --> 00:25:32,000
configuration falls from the air

739
00:25:32,000 --> 00:25:34,559
and uh the the participants just run

740
00:25:34,559 --> 00:25:35,520
with it

741
00:25:35,520 --> 00:25:37,919
i think we can safely ignore it

742
00:25:37,919 --> 00:25:40,320
steven

743
00:25:40,400 --> 00:25:42,159
yeah so i don't know richard mike called

744
00:25:42,159 --> 00:25:43,600
this elesco but i don't actually believe

745
00:25:43,600 --> 00:25:44,960
it is i mean i'm not asking for

746
00:25:44,960 --> 00:25:46,720
discovery i'm asking for detection of

747
00:25:46,720 --> 00:25:49,120
collusion i i do think

748
00:25:49,120 --> 00:25:50,880
we ought to look at

749
00:25:50,880 --> 00:25:52,559
if is there any way that we could make

750
00:25:52,559 --> 00:25:54,480
it possible for some kind of

751
00:25:54,480 --> 00:25:56,240
transparency

752
00:25:56,240 --> 00:25:57,840
about collusion

753
00:25:57,840 --> 00:25:59,840
that might be post factor detected and

754
00:25:59,840 --> 00:26:02,000
only if you actively probe or something

755
00:26:02,000 --> 00:26:04,159
but i think if we

756
00:26:04,159 --> 00:26:06,080
if this protocol provides no mechanism

757
00:26:06,080 --> 00:26:08,320
at all where collusion could be

758
00:26:08,320 --> 00:26:10,000
at some level detected even if it's post

759
00:26:10,000 --> 00:26:12,080
facto even if it's statistical

760
00:26:12,080 --> 00:26:15,600
then i think uh again

761
00:26:15,600 --> 00:26:17,679
the overall benefit kind of is is going

762
00:26:17,679 --> 00:26:19,679
to be kind of hard to see

763
00:26:19,679 --> 00:26:21,200
given who's likely to put up these

764
00:26:21,200 --> 00:26:24,960
proxies so i i would it's not about the

765
00:26:24,960 --> 00:26:26,799
ready for adoption call but i think the

766
00:26:26,799 --> 00:26:28,799
given the discussion in the chat it's

767
00:26:28,799 --> 00:26:30,559
worth recording that

768
00:26:30,559 --> 00:26:31,600
if we could have some kind of

769
00:26:31,600 --> 00:26:34,000
transparency

770
00:26:34,000 --> 00:26:36,799
at some level that might help

771
00:26:36,799 --> 00:26:39,200
people understand whether collusion is

772
00:26:39,200 --> 00:26:42,320
happening in the real world or not

773
00:26:42,320 --> 00:26:44,480
um sorry i'm not closely following the

774
00:26:44,480 --> 00:26:47,120
chat uh but the situation to me seems

775
00:26:47,120 --> 00:26:49,760
very indistinguishable from or

776
00:26:49,760 --> 00:26:51,200
trying to detect whether or not you know

777
00:26:51,200 --> 00:26:52,799
parties are colluding seems very similar

778
00:26:52,799 --> 00:26:54,000
to trying to

779
00:26:54,000 --> 00:26:56,799
detect whether or not say a tls

780
00:26:56,799 --> 00:26:58,480
terminating server is just like posting

781
00:26:58,480 --> 00:27:01,039
its you know keys to twitter or or you

782
00:27:01,039 --> 00:27:03,200
know

783
00:27:03,760 --> 00:27:05,279
sure my counter argument would be that

784
00:27:05,279 --> 00:27:06,559
we would have said the same but the web

785
00:27:06,559 --> 00:27:08,480
pki before certificate transparency

786
00:27:08,480 --> 00:27:10,400
probably um

787
00:27:10,400 --> 00:27:12,159
but given certificate transparency

788
00:27:12,159 --> 00:27:14,159
that's no longer true and again but not

789
00:27:14,159 --> 00:27:16,080
in an individual transactional kind of

790
00:27:16,080 --> 00:27:18,240
level but at some kind of if somebody

791
00:27:18,240 --> 00:27:20,000
clever goes looking level it's some kind

792
00:27:20,000 --> 00:27:23,279
of technical auditor type thing

793
00:27:23,520 --> 00:27:24,640
um

794
00:27:24,640 --> 00:27:28,000
yeah i i i uh maybe sure

795
00:27:28,000 --> 00:27:29,039
something is chair here it's like

796
00:27:29,039 --> 00:27:31,120
stephen if you have concrete proposals

797
00:27:31,120 --> 00:27:32,880
here um by all means feel free to

798
00:27:32,880 --> 00:27:35,520
propose into the list but um yeah i

799
00:27:35,520 --> 00:27:37,440
don't think this is something

800
00:27:37,440 --> 00:27:39,360
that's clear in the charter as a

801
00:27:39,360 --> 00:27:41,120
requirement and needs to be blocked

802
00:27:41,120 --> 00:27:42,320
needs to block the main protocol

803
00:27:42,320 --> 00:27:45,320
document

804
00:27:49,279 --> 00:27:51,360
all right so i think we've we've

805
00:27:51,360 --> 00:27:53,200
i think we've drained the queue there we

806
00:27:53,200 --> 00:27:54,960
closed the queue to try and manage uh

807
00:27:54,960 --> 00:27:56,720
the scope managed time here um so i

808
00:27:56,720 --> 00:28:00,679
think martin it is

809
00:28:17,919 --> 00:28:20,480
this is the point that i wait

810
00:28:20,480 --> 00:28:21,520
and

811
00:28:21,520 --> 00:28:23,039
it's working okay

812
00:28:23,039 --> 00:28:24,799
so um

813
00:28:24,799 --> 00:28:26,159
tommy

814
00:28:26,159 --> 00:28:27,200
made

815
00:28:27,200 --> 00:28:28,720
made a point about

816
00:28:28,720 --> 00:28:30,480
the content of these encapsulated

817
00:28:30,480 --> 00:28:31,679
messages

818
00:28:31,679 --> 00:28:34,000
and i just wanted to go through

819
00:28:34,000 --> 00:28:36,159
some of the uh

820
00:28:36,159 --> 00:28:38,000
the stuff that we've

821
00:28:38,000 --> 00:28:40,720
done thus far um

822
00:28:40,720 --> 00:28:42,960
for carrying http messages so that

823
00:28:42,960 --> 00:28:45,440
you're able to use

824
00:28:45,440 --> 00:28:48,159
generic http in order to get the

825
00:28:48,159 --> 00:28:50,080
messages through

826
00:28:50,080 --> 00:28:52,159
we i've opened an issue in response to

827
00:28:52,159 --> 00:28:54,000
tommy's query

828
00:28:54,000 --> 00:28:55,919
and

829
00:28:55,919 --> 00:28:58,399
that is something that we can talk about

830
00:28:58,399 --> 00:28:59,279
later

831
00:28:59,279 --> 00:29:02,240
if we get past these things the initial

832
00:29:02,240 --> 00:29:04,640
more important issues but um for the

833
00:29:04,640 --> 00:29:08,000
moment the protocol is fixed to the use

834
00:29:08,000 --> 00:29:12,559
of this binary http messaging coding

835
00:29:12,559 --> 00:29:14,640
and how do i get to the next one all

836
00:29:14,640 --> 00:29:17,120
right there it is

837
00:29:17,120 --> 00:29:18,480
so um

838
00:29:18,480 --> 00:29:21,039
the idea is to cover entire http

839
00:29:21,039 --> 00:29:24,799
messages to the target resource

840
00:29:24,799 --> 00:29:25,760
everything

841
00:29:25,760 --> 00:29:28,159
is included including all of the the

842
00:29:28,159 --> 00:29:30,000
routing and encapsulation

843
00:29:30,000 --> 00:29:31,200
the method

844
00:29:31,200 --> 00:29:32,640
the uh

845
00:29:32,640 --> 00:29:34,240
url

846
00:29:34,240 --> 00:29:36,559
and

847
00:29:37,279 --> 00:29:38,799
it uses a binary encoding which is

848
00:29:38,799 --> 00:29:41,120
unambiguous and easy to process and

849
00:29:41,120 --> 00:29:42,480
uses a lot of the lessons that we've

850
00:29:42,480 --> 00:29:45,120
taken from http 2 and http 3 and in

851
00:29:45,120 --> 00:29:47,440
making http messages

852
00:29:47,440 --> 00:29:49,600
so

853
00:29:51,200 --> 00:29:52,480
it's not

854
00:29:52,480 --> 00:29:55,919
those protocol formats because well

855
00:29:55,919 --> 00:29:57,760
they're really complicated

856
00:29:57,760 --> 00:30:01,039
and things like hpac would rightly scare

857
00:30:01,039 --> 00:30:04,559
people away from implementing them

858
00:30:04,559 --> 00:30:06,080
also some uncertainty about whether the

859
00:30:06,080 --> 00:30:08,240
compression in something like hbac is

860
00:30:08,240 --> 00:30:10,799
safe to be using under under the sort of

861
00:30:10,799 --> 00:30:12,880
adversarial conditions that we're using

862
00:30:12,880 --> 00:30:13,760
so

863
00:30:13,760 --> 00:30:16,320
forget that just put the control data in

864
00:30:16,320 --> 00:30:17,919
the header field straight in the message

865
00:30:17,919 --> 00:30:20,480
uncompressed

866
00:30:20,799 --> 00:30:22,159
and then make a few allowances for

867
00:30:22,159 --> 00:30:23,919
things that we do know that we need

868
00:30:23,919 --> 00:30:25,679
which is things like padding and the

869
00:30:25,679 --> 00:30:29,919
ability to stream requests and responses

870
00:30:31,840 --> 00:30:33,360
there's two

871
00:30:33,360 --> 00:30:35,200
mechanisms in here there's a fixed

872
00:30:35,200 --> 00:30:37,440
length one for those people who know how

873
00:30:37,440 --> 00:30:38,399
long

874
00:30:38,399 --> 00:30:40,080
every piece of the message is going to

875
00:30:40,080 --> 00:30:41,919
be before they put it on the wire and

876
00:30:41,919 --> 00:30:43,440
for those who don't

877
00:30:43,440 --> 00:30:45,600
which allows for uh

878
00:30:45,600 --> 00:30:48,000
construction messages

879
00:30:48,000 --> 00:30:51,440
that come in off another medium

880
00:30:51,440 --> 00:30:52,960
and also sending them on to another

881
00:30:52,960 --> 00:30:55,279
medium

882
00:30:56,159 --> 00:30:57,600
that little bit of flexibility is of

883
00:30:57,600 --> 00:31:00,399
course negotiable

884
00:31:01,200 --> 00:31:03,519
i have an implementation of this i heard

885
00:31:03,519 --> 00:31:05,120
that tommy has implemented some of this

886
00:31:05,120 --> 00:31:06,000
as well

887
00:31:06,000 --> 00:31:08,000
it's relatively straightforward i think

888
00:31:08,000 --> 00:31:09,039
it was

889
00:31:09,039 --> 00:31:12,159
about 300 lines of code in rust

890
00:31:12,159 --> 00:31:14,080
not that difficult

891
00:31:14,080 --> 00:31:16,480
most of the hard part of writing this

892
00:31:16,480 --> 00:31:19,840
code was parsing http11 messages which

893
00:31:19,840 --> 00:31:21,200
is what you see at the top of the slide

894
00:31:21,200 --> 00:31:22,000
there

895
00:31:22,000 --> 00:31:24,559
or rather in the middle

896
00:31:24,559 --> 00:31:26,880
because those are terrible in various

897
00:31:26,880 --> 00:31:29,200
ways

898
00:31:29,919 --> 00:31:32,720
so i'm here to really just say this is

899
00:31:32,720 --> 00:31:34,640
probably not something that this working

900
00:31:34,640 --> 00:31:36,399
group wants to take on

901
00:31:36,399 --> 00:31:38,080
we should take on the encapsulation part

902
00:31:38,080 --> 00:31:39,840
and all of the difficult questions that

903
00:31:39,840 --> 00:31:42,480
people have raised about

904
00:31:42,480 --> 00:31:45,440
how this all fits together

905
00:31:45,440 --> 00:31:47,360
but instead we asked the http working

906
00:31:47,360 --> 00:31:49,200
group to take this sort of work on

907
00:31:49,200 --> 00:31:51,200
i've gotten some feedback there

908
00:31:51,200 --> 00:31:53,440
this is in the right direction but

909
00:31:53,440 --> 00:31:56,080
that's all i have

910
00:31:56,320 --> 00:31:59,360
so martin just to clarify um and i guess

911
00:31:59,360 --> 00:32:03,360
for chris as well um it seems like oh hi

912
00:32:03,360 --> 00:32:06,799
is not really useful if we don't have

913
00:32:06,799 --> 00:32:09,519
this format right

914
00:32:09,519 --> 00:32:10,960
because it needs something of this

915
00:32:10,960 --> 00:32:13,760
general character to get its job done

916
00:32:13,760 --> 00:32:15,679
yeah so it depends on the extent to

917
00:32:15,679 --> 00:32:17,279
which we

918
00:32:17,279 --> 00:32:19,039
allow for tommy's

919
00:32:19,039 --> 00:32:22,159
idea of generic uh things

920
00:32:22,159 --> 00:32:23,519
to

921
00:32:23,519 --> 00:32:25,840
to be facilitated in the framework so it

922
00:32:25,840 --> 00:32:28,159
doesn't it doesn't really carry http at

923
00:32:28,159 --> 00:32:29,440
that point but you can carry other

924
00:32:29,440 --> 00:32:32,000
things over http

925
00:32:32,000 --> 00:32:34,720
and so uh if we make allowances for that

926
00:32:34,720 --> 00:32:36,559
we could we could get this to work i

927
00:32:36,559 --> 00:32:38,240
think this is probably

928
00:32:38,240 --> 00:32:41,039
the right thing to do in terms of having

929
00:32:41,039 --> 00:32:44,240
carrying http and so i prefer that we

930
00:32:44,240 --> 00:32:46,240
we do this then you can make a generic

931
00:32:46,240 --> 00:32:48,720
http request more or less

932
00:32:48,720 --> 00:32:50,640
um

933
00:32:50,640 --> 00:32:53,440
and and then it works into it

934
00:32:53,440 --> 00:32:55,679
so then the for the work split would be

935
00:32:55,679 --> 00:32:57,279
that this working group would develop a

936
00:32:57,279 --> 00:32:59,840
general intermediation

937
00:32:59,840 --> 00:33:02,320
deliver this data through an extra hop

938
00:33:02,320 --> 00:33:04,559
protocol and then

939
00:33:04,559 --> 00:33:06,960
the http working group would make the

940
00:33:06,960 --> 00:33:08,559
here's how you generically encapsulate

941
00:33:08,559 --> 00:33:11,440
an http request and then if you put the

942
00:33:11,440 --> 00:33:12,960
two together you end up with oblivious

943
00:33:12,960 --> 00:33:15,039
https that sound about right

944
00:33:15,039 --> 00:33:17,279
yeah that's that's right and

945
00:33:17,279 --> 00:33:19,200
we can talk about what it takes to to do

946
00:33:19,200 --> 00:33:20,480
generic stuff

947
00:33:20,480 --> 00:33:23,039
for other protocols over the top of http

948
00:33:23,039 --> 00:33:25,760
but we will do the over http

949
00:33:25,760 --> 00:33:28,640
encapsulation ebits

950
00:33:28,640 --> 00:33:29,440
yeah

951
00:33:29,440 --> 00:33:30,799
it seems like we would at least need the

952
00:33:30,799 --> 00:33:33,760
semantic that um

953
00:33:33,760 --> 00:33:35,440
given the way the tunneling protocol

954
00:33:35,440 --> 00:33:37,200
looks you'd at least need a request

955
00:33:37,200 --> 00:33:39,120
response semantic for whatever you were

956
00:33:39,120 --> 00:33:40,559
telling

957
00:33:40,559 --> 00:33:41,840
right i mean that's a that's a

958
00:33:41,840 --> 00:33:43,919
limitation inherent in this and and to

959
00:33:43,919 --> 00:33:45,519
some extent that's

960
00:33:45,519 --> 00:33:47,679
a limitation that we need to discuss for

961
00:33:47,679 --> 00:33:50,399
http as well

962
00:33:50,399 --> 00:33:52,080
one of the the issues that i'd like to

963
00:33:52,080 --> 00:33:54,159
discuss later is whether we have some

964
00:33:54,159 --> 00:33:56,320
sort of streaming capability in here

965
00:33:56,320 --> 00:33:58,640
that would allow us to do more generic

966
00:33:58,640 --> 00:34:00,720
http messages than than what this

967
00:34:00,720 --> 00:34:03,519
currently allows

968
00:34:04,320 --> 00:34:06,080
all right sorry and since i've uh

969
00:34:06,080 --> 00:34:08,719
injected my own questions

970
00:34:08,719 --> 00:34:10,560
using my chair privilege bit uh we have

971
00:34:10,560 --> 00:34:14,159
a couple minutes i think uh before we

972
00:34:14,159 --> 00:34:16,480
uh hit our sl our

973
00:34:16,480 --> 00:34:19,760
time to make the adoption call in um on

974
00:34:19,760 --> 00:34:20,960
the agenda

975
00:34:20,960 --> 00:34:22,239
if folks have

976
00:34:22,239 --> 00:34:25,199
further thoughts to bring to the mic on

977
00:34:25,199 --> 00:34:26,079
on

978
00:34:26,079 --> 00:34:29,119
before we take an adoption call

979
00:34:29,119 --> 00:34:30,800
i believe we'll be taking adoption call

980
00:34:30,800 --> 00:34:35,480
on the draft that chris introduced

981
00:34:36,879 --> 00:34:38,480
any thoughts

982
00:34:38,480 --> 00:34:40,239
my client is open

983
00:34:40,239 --> 00:34:42,560
eric

984
00:34:46,719 --> 00:34:48,960
howdy yeah um

985
00:34:48,960 --> 00:34:50,399
uh

986
00:34:50,399 --> 00:34:52,079
these three drops seem like appropriate

987
00:34:52,079 --> 00:34:54,879
learning points for adoption um uh i

988
00:34:54,879 --> 00:34:57,119
have no i do do not care at all whether

989
00:34:57,119 --> 00:35:00,560
like the binary one goes here here and i

990
00:35:00,560 --> 00:35:02,000
trust that someone can work that out i

991
00:35:02,000 --> 00:35:03,599
mean they say it'd be exactly the same

992
00:35:03,599 --> 00:35:06,800
people in their location so um certainly

993
00:35:06,800 --> 00:35:08,480
it doesn't matter um

994
00:35:08,480 --> 00:35:10,000
uh um

995
00:35:10,000 --> 00:35:11,359
uh

996
00:35:11,359 --> 00:35:13,359
richard thank you for for for trying to

997
00:35:13,359 --> 00:35:16,400
scope this as narrowly as possible um

998
00:35:16,400 --> 00:35:18,400
you know

999
00:35:18,400 --> 00:35:19,760
the issues are being raised here frankly

1000
00:35:19,760 --> 00:35:21,280
are relevant adoption calls so i think

1001
00:35:21,280 --> 00:35:22,560
the adoption call answers them i think

1002
00:35:22,560 --> 00:35:25,520
we don't need to re-debate them

1003
00:35:29,680 --> 00:35:32,160
watson

1004
00:35:34,880 --> 00:35:37,440
i think adopt the first draft and punch

1005
00:35:37,440 --> 00:35:40,480
the binary message strap to hdp

1006
00:35:40,480 --> 00:35:42,640
more people who know about http are in

1007
00:35:42,640 --> 00:35:46,000
that group that this group

1008
00:35:49,040 --> 00:35:51,200
yeah that was that was the thought uh

1009
00:35:51,200 --> 00:35:53,359
there are some fiddly bits in here

1010
00:35:53,359 --> 00:35:55,599
it's not particularly complicated but uh

1011
00:35:55,599 --> 00:35:57,680
it's worth getting those people to

1012
00:35:57,680 --> 00:36:00,640
to do the work i think

1013
00:36:02,320 --> 00:36:04,800
yeah i'll want to check the charter to

1014
00:36:04,800 --> 00:36:06,960
see if you know we it makes sense to

1015
00:36:06,960 --> 00:36:08,800
extend this beyond http but i think even

1016
00:36:08,800 --> 00:36:10,960
if we keep this working group

1017
00:36:10,960 --> 00:36:13,920
http indirection specific um you know we

1018
00:36:13,920 --> 00:36:15,680
can still take the dependency on http

1019
00:36:15,680 --> 00:36:18,960
working group for the encapsulation

1020
00:36:21,040 --> 00:36:23,920
all right last call for further comments

1021
00:36:23,920 --> 00:36:27,720
on discussion here

1022
00:36:33,760 --> 00:36:35,359
okay i think we chairs are working on

1023
00:36:35,359 --> 00:36:36,640
getting this

1024
00:36:36,640 --> 00:36:38,880
call set up

1025
00:36:38,880 --> 00:36:42,400
siobhan do you have um

1026
00:36:42,960 --> 00:36:45,359
have you figured this out yet

1027
00:36:45,359 --> 00:36:47,440
um

1028
00:36:47,440 --> 00:36:48,960
the uh

1029
00:36:48,960 --> 00:36:51,040
the actual column

1030
00:36:51,040 --> 00:36:54,480
yeah so i'm gonna i'm gonna try and

1031
00:36:54,480 --> 00:36:58,320
do a show of hands here

1032
00:36:58,320 --> 00:37:00,480
for adopting

1033
00:37:00,480 --> 00:37:02,400
um

1034
00:37:02,400 --> 00:37:05,040
the draft name

1035
00:37:05,440 --> 00:37:07,839
do a show of hands on adopting

1036
00:37:07,839 --> 00:37:10,320
the oblivious http draft

1037
00:37:10,320 --> 00:37:14,520
as a working group item

1038
00:37:27,200 --> 00:37:28,720
okay i'm going to start the show of

1039
00:37:28,720 --> 00:37:31,119
hands now please raise your hand

1040
00:37:31,119 --> 00:37:33,040
if you think that the working group

1041
00:37:33,040 --> 00:37:35,119
should adopt the drafts that chris

1042
00:37:35,119 --> 00:37:36,720
presented um

1043
00:37:36,720 --> 00:37:39,599
as uh the starting point for fulfilling

1044
00:37:39,599 --> 00:37:40,800
uh our

1045
00:37:40,800 --> 00:37:42,400
charter milestones

1046
00:37:42,400 --> 00:37:44,000
um and

1047
00:37:44,000 --> 00:37:45,920
click the do not raise hand button if

1048
00:37:45,920 --> 00:37:48,480
you have concerns about uh adopting this

1049
00:37:48,480 --> 00:37:51,359
isn't working as a starting point for

1050
00:37:51,359 --> 00:37:53,520
our working your deliverables okay so

1051
00:37:53,520 --> 00:37:57,240
clicking the button now

1052
00:38:13,760 --> 00:38:15,280
all right

1053
00:38:15,280 --> 00:38:16,880
things seem to be

1054
00:38:16,880 --> 00:38:19,599
equilibrating

1055
00:38:19,599 --> 00:38:22,800
closing the session now

1056
00:38:22,800 --> 00:38:25,839
so that seems like pretty strong um

1057
00:38:25,839 --> 00:38:28,480
agreements that um we're going to go

1058
00:38:28,480 --> 00:38:30,560
forward with this does anyone from the

1059
00:38:30,560 --> 00:38:32,880
not raise hand camp

1060
00:38:32,880 --> 00:38:34,079
want to

1061
00:38:34,079 --> 00:38:35,760
come speak about what their

1062
00:38:35,760 --> 00:38:39,960
what your reservations are

1063
00:38:46,800 --> 00:38:49,200
okay um so we will take this out and

1064
00:38:49,200 --> 00:38:51,119
confirm it on the mailing list um feel

1065
00:38:51,119 --> 00:38:52,800
free to contribute to any discussion

1066
00:38:52,800 --> 00:38:55,040
there um if you've already raised your

1067
00:38:55,040 --> 00:38:56,720
hand here there's no need to reconfirm

1068
00:38:56,720 --> 00:38:58,480
it there we'll just cover any additional

1069
00:38:58,480 --> 00:39:01,599
issues there but it looks like uh we

1070
00:39:01,599 --> 00:39:04,640
have pretty good consensus to adopt this

1071
00:39:04,640 --> 00:39:07,200
oblivious http draft and get to work on

1072
00:39:07,200 --> 00:39:08,960
it as a working group item

1073
00:39:08,960 --> 00:39:10,720
thanks all

1074
00:39:10,720 --> 00:39:14,160
so with that our remainder of our agenda

1075
00:39:14,160 --> 00:39:15,200
is

1076
00:39:15,200 --> 00:39:17,280
set aside for

1077
00:39:17,280 --> 00:39:19,200
looking at issues related to that draft

1078
00:39:19,200 --> 00:39:21,040
i think martin you were going to share a

1079
00:39:21,040 --> 00:39:24,720
screen to walk through issues there

1080
00:39:27,520 --> 00:39:31,200
i have approved your screenshot

1081
00:39:32,480 --> 00:39:35,640
i think

1082
00:40:00,480 --> 00:40:02,480
well that that's working really well for

1083
00:40:02,480 --> 00:40:05,040
me i can't

1084
00:40:05,040 --> 00:40:08,319
see anything working right now

1085
00:40:08,319 --> 00:40:11,440
can you try again

1086
00:40:11,440 --> 00:40:14,800
i'll go try again

1087
00:40:22,319 --> 00:40:24,079
it's getting sort of a jasper john's

1088
00:40:24,079 --> 00:40:26,800
vibe from that

1089
00:40:29,599 --> 00:40:32,560
could be solo it

1090
00:40:32,960 --> 00:40:35,119
wow

1091
00:40:35,119 --> 00:40:36,480
there you go

1092
00:40:36,480 --> 00:40:38,480
all right

1093
00:40:38,480 --> 00:40:40,960
if at first you don't succeed

1094
00:40:40,960 --> 00:40:43,520
so i i sent an email to the mailing list

1095
00:40:43,520 --> 00:40:45,520
i didn't get any responses on this one

1096
00:40:45,520 --> 00:40:47,280
but i put five of the issues that i

1097
00:40:47,280 --> 00:40:49,440
thought we might discuss here briefly we

1098
00:40:49,440 --> 00:40:50,400
only have

1099
00:40:50,400 --> 00:40:53,920
20 minutes so um

1100
00:40:53,920 --> 00:40:57,040
feedback would be useful in any form

1101
00:40:57,040 --> 00:40:59,599
the first question is really

1102
00:40:59,599 --> 00:41:01,599
to what extent we're

1103
00:41:01,599 --> 00:41:03,520
able to make requests and responses more

1104
00:41:03,520 --> 00:41:04,960
generic

1105
00:41:04,960 --> 00:41:07,359
so um probably the most obvious thing we

1106
00:41:07,359 --> 00:41:09,119
could do to make request and response

1107
00:41:09,119 --> 00:41:12,560
more generic and be able to support

1108
00:41:12,560 --> 00:41:15,520
a larger subset of http capabilities is

1109
00:41:15,520 --> 00:41:16,319
to

1110
00:41:16,319 --> 00:41:18,880
make them streamable

1111
00:41:18,880 --> 00:41:20,480
one of the things that that would allow

1112
00:41:20,480 --> 00:41:21,920
is you could have

1113
00:41:21,920 --> 00:41:24,079
things go via the proxy

1114
00:41:24,079 --> 00:41:26,240
that include things like one xx status

1115
00:41:26,240 --> 00:41:28,240
codes or

1116
00:41:28,240 --> 00:41:29,520
long

1117
00:41:29,520 --> 00:41:31,599
message bodies that could be processed

1118
00:41:31,599 --> 00:41:32,880
incrementally

1119
00:41:32,880 --> 00:41:35,920
and those sorts of things

1120
00:41:35,920 --> 00:41:37,920
this comes with a cost

1121
00:41:37,920 --> 00:41:39,760
uh primarily

1122
00:41:39,760 --> 00:41:41,599
some sort of framing

1123
00:41:41,599 --> 00:41:43,760
and a little bit of complexity although

1124
00:41:43,760 --> 00:41:45,359
i think we can manage the complexity

1125
00:41:45,359 --> 00:41:46,800
reasonably well

1126
00:41:46,800 --> 00:41:49,680
by tweaking things like aads

1127
00:41:49,680 --> 00:41:52,079
in the um the

1128
00:41:52,079 --> 00:41:54,319
aead application

1129
00:41:54,319 --> 00:41:56,160
or hpke

1130
00:41:56,160 --> 00:41:58,079
so

1131
00:41:58,079 --> 00:41:59,680
i'd like people's

1132
00:41:59,680 --> 00:42:02,800
thoughts on this one and i'm apologizing

1133
00:42:02,800 --> 00:42:06,760
but i can't see the cue now

1134
00:42:17,200 --> 00:42:20,319
uh so i guess this is uh sort of a base

1135
00:42:20,319 --> 00:42:22,400
question in in how you're presuming this

1136
00:42:22,400 --> 00:42:24,720
if if i currently have a setup where i

1137
00:42:24,720 --> 00:42:25,760
have

1138
00:42:25,760 --> 00:42:28,240
three of these proxies configured one of

1139
00:42:28,240 --> 00:42:31,359
the things i can do is i can send

1140
00:42:31,359 --> 00:42:32,720
information

1141
00:42:32,720 --> 00:42:33,440
uh

1142
00:42:33,440 --> 00:42:36,079
to to one and my next query to two and

1143
00:42:36,079 --> 00:42:37,680
my next query to three essentially

1144
00:42:37,680 --> 00:42:39,599
round-robining the queries

1145
00:42:39,599 --> 00:42:41,359
uh even if they're to the same service

1146
00:42:41,359 --> 00:42:43,680
by a different um

1147
00:42:43,680 --> 00:42:45,839
proxies and that

1148
00:42:45,839 --> 00:42:48,160
would work fine with the current

1149
00:42:48,160 --> 00:42:50,079
set of mechanisms

1150
00:42:50,079 --> 00:42:52,240
because they're

1151
00:42:52,240 --> 00:42:54,400
four things like do was where the

1152
00:42:54,400 --> 00:42:57,040
responses coming back are not meant to

1153
00:42:57,040 --> 00:42:58,560
be uh

1154
00:42:58,560 --> 00:43:00,560
linked to any state on

1155
00:43:00,560 --> 00:43:02,319
on on the server

1156
00:43:02,319 --> 00:43:05,040
um i'm assuming that if you made these

1157
00:43:05,040 --> 00:43:08,480
requests and responses more generic

1158
00:43:08,480 --> 00:43:11,200
um then you would have to then

1159
00:43:11,200 --> 00:43:12,880
not use a single

1160
00:43:12,880 --> 00:43:16,000
you know get or post as as the

1161
00:43:16,000 --> 00:43:18,160
um as the unit here but you'd have to

1162
00:43:18,160 --> 00:43:20,560
have some more generic way of of

1163
00:43:20,560 --> 00:43:22,079
thinking about

1164
00:43:22,079 --> 00:43:23,359
what the

1165
00:43:23,359 --> 00:43:26,400
the the interaction set would be

1166
00:43:26,400 --> 00:43:28,079
and i don't think i know what that would

1167
00:43:28,079 --> 00:43:30,160
be and i wondered if you could describe

1168
00:43:30,160 --> 00:43:32,399
that

1169
00:43:32,880 --> 00:43:34,319
so i don't think we're looking to change

1170
00:43:34,319 --> 00:43:37,680
the basic interaction model here so you

1171
00:43:37,680 --> 00:43:39,520
would retain the same

1172
00:43:39,520 --> 00:43:42,160
capabilities as before

1173
00:43:42,160 --> 00:43:44,560
the only difference would be that

1174
00:43:44,560 --> 00:43:46,720
when you construct a request or a

1175
00:43:46,720 --> 00:43:48,160
response

1176
00:43:48,160 --> 00:43:50,000
you would be able to construct it in

1177
00:43:50,000 --> 00:43:52,880
such a way as that pieces of it would be

1178
00:43:52,880 --> 00:43:54,800
available for processing as opposed to

1179
00:43:54,800 --> 00:43:57,760
the entire thing i i don't know if

1180
00:43:57,760 --> 00:44:00,800
there's any desire to go for anything

1181
00:44:00,800 --> 00:44:02,880
far more generic than that along the

1182
00:44:02,880 --> 00:44:06,400
lines of what you described

1183
00:44:06,640 --> 00:44:10,079
does that help um

1184
00:44:10,079 --> 00:44:12,560
so it's gonna be a request response and

1185
00:44:12,560 --> 00:44:13,920
and all of that so you would get

1186
00:44:13,920 --> 00:44:17,040
correlation of request with response

1187
00:44:17,040 --> 00:44:19,760
okay but um you would still say that

1188
00:44:19,760 --> 00:44:23,920
if if i wanted to switch uh to the next

1189
00:44:23,920 --> 00:44:26,480
proxy in my list of three for the next

1190
00:44:26,480 --> 00:44:28,560
request in response i would be able to

1191
00:44:28,560 --> 00:44:30,319
do that it would just be that the first

1192
00:44:30,319 --> 00:44:33,280
response might have continuation in it

1193
00:44:33,280 --> 00:44:36,240
like with a 100 is that is that correct

1194
00:44:36,240 --> 00:44:38,079
that's right yeah that's right

1195
00:44:38,079 --> 00:44:41,599
uh thanks for the clarification

1196
00:44:43,839 --> 00:44:45,280
tommy

1197
00:44:45,280 --> 00:44:47,520
next

1198
00:44:48,800 --> 00:44:51,440
all right thank you um

1199
00:44:51,440 --> 00:44:53,280
yeah on this i guess i'd like to

1200
00:44:53,280 --> 00:44:54,560
understand

1201
00:44:54,560 --> 00:44:57,200
what specific applications would need to

1202
00:44:57,200 --> 00:44:59,359
have this more generic format um you

1203
00:44:59,359 --> 00:45:00,960
know a lot of

1204
00:45:00,960 --> 00:45:03,440
what i've been thinking about is

1205
00:45:03,440 --> 00:45:06,720
we have these oblivious requests for

1206
00:45:06,720 --> 00:45:08,319
pretty stateless simple request

1207
00:45:08,319 --> 00:45:10,640
responses for more complicated things we

1208
00:45:10,640 --> 00:45:12,079
can just do

1209
00:45:12,079 --> 00:45:15,119
you know multi-hop mask proxies because

1210
00:45:15,119 --> 00:45:17,280
we have to have stuff for that

1211
00:45:17,280 --> 00:45:20,000
anyway from being more stateful

1212
00:45:20,000 --> 00:45:21,599
can we get away without having this

1213
00:45:21,599 --> 00:45:23,280
complexity and just say yeah there's a

1214
00:45:23,280 --> 00:45:24,640
limited set of things and all the

1215
00:45:24,640 --> 00:45:27,040
applications we know of will need this

1216
00:45:27,040 --> 00:45:29,680
smaller set

1217
00:45:30,880 --> 00:45:32,800
i think this is a reasonable approach to

1218
00:45:32,800 --> 00:45:33,599
take

1219
00:45:33,599 --> 00:45:35,839
it's the one that i took originally

1220
00:45:35,839 --> 00:45:39,599
uh that that wasn't by accident but um

1221
00:45:39,599 --> 00:45:41,359
i i thought it was important to ask the

1222
00:45:41,359 --> 00:45:42,240
question

1223
00:45:42,240 --> 00:45:46,200
because others others have

1224
00:45:54,480 --> 00:45:57,480


1225
00:46:11,680 --> 00:46:13,280
we're not hearing you mark but i see

1226
00:46:13,280 --> 00:46:17,040
that you have the audio privilege

1227
00:46:26,720 --> 00:46:30,000
still not doing anything

1228
00:46:30,000 --> 00:46:32,480
and you're offline now

1229
00:46:32,480 --> 00:46:34,720
new online

1230
00:46:34,720 --> 00:46:37,760
modern technology

1231
00:46:37,760 --> 00:46:40,640
i think maybe we can move on and uh

1232
00:46:40,640 --> 00:46:42,960
we can

1233
00:46:46,480 --> 00:46:48,319
i see mark back in cuba maybe i'll uh

1234
00:46:48,319 --> 00:46:50,640
i'll vamp for a second while he uh

1235
00:46:50,640 --> 00:46:52,319
gets audio going

1236
00:46:52,319 --> 00:46:54,000
um

1237
00:46:54,000 --> 00:46:57,200
so just to try and throw the uh decision

1238
00:46:57,200 --> 00:47:00,240
into higher relief here um

1239
00:47:00,240 --> 00:47:03,359
martin is the choice here between having

1240
00:47:03,359 --> 00:47:06,880
more flexibility and

1241
00:47:06,880 --> 00:47:08,240
capturing the entire range of

1242
00:47:08,240 --> 00:47:10,240
interactions that http allows on the one

1243
00:47:10,240 --> 00:47:11,440
hand

1244
00:47:11,440 --> 00:47:13,440
and on the other hand having a simpler

1245
00:47:13,440 --> 00:47:15,839
interaction model say a simple a single

1246
00:47:15,839 --> 00:47:17,680
request single response

1247
00:47:17,680 --> 00:47:20,400
and declaring certain http patterns

1248
00:47:20,400 --> 00:47:22,880
cannot be done over this

1249
00:47:22,880 --> 00:47:24,960
channel

1250
00:47:24,960 --> 00:47:26,800
yeah i think that's right i i don't

1251
00:47:26,800 --> 00:47:28,240
think anything

1252
00:47:28,240 --> 00:47:30,720
here forecloses on the possibility of

1253
00:47:30,720 --> 00:47:32,640
defining a new format

1254
00:47:32,640 --> 00:47:34,800
to do more complicated things

1255
00:47:34,800 --> 00:47:35,920
so we could

1256
00:47:35,920 --> 00:47:39,040
even decide to do both but um it really

1257
00:47:39,040 --> 00:47:40,160
is

1258
00:47:40,160 --> 00:47:43,440
keep it simple keep the overhead low or

1259
00:47:43,440 --> 00:47:47,040
try to get more of the

1260
00:47:48,400 --> 00:47:51,760
streaming capabilities of http which are

1261
00:47:51,760 --> 00:47:53,520
used in some contexts

1262
00:47:53,520 --> 00:47:55,760
but as tommy says um

1263
00:47:55,760 --> 00:47:58,400
because of the narrow application domain

1264
00:47:58,400 --> 00:48:00,960
we could reasonably say that that those

1265
00:48:00,960 --> 00:48:03,200
are out of scope

1266
00:48:03,200 --> 00:48:05,200
yeah i think personally like speaking as

1267
00:48:05,200 --> 00:48:06,880
an individual contributor you're not a

1268
00:48:06,880 --> 00:48:09,760
chair i think my preference would be to

1269
00:48:09,760 --> 00:48:11,440
follow that ladder path and keep things

1270
00:48:11,440 --> 00:48:14,000
simple in this iteration um even if that

1271
00:48:14,000 --> 00:48:16,160
entails um

1272
00:48:16,160 --> 00:48:18,240
basically disabling or turning off some

1273
00:48:18,240 --> 00:48:21,839
some http features

1274
00:48:22,720 --> 00:48:24,720
and putting chair hat back on i'll pass

1275
00:48:24,720 --> 00:48:27,680
to jonathan

1276
00:48:28,640 --> 00:48:30,800
so maybe this is just uh

1277
00:48:30,800 --> 00:48:33,680
a stupid question but does this

1278
00:48:33,680 --> 00:48:36,319
create a vector whereby you can make a

1279
00:48:36,319 --> 00:48:38,240
you can more easily make a server store

1280
00:48:38,240 --> 00:48:41,040
a lot of state

1281
00:48:42,240 --> 00:48:46,399
like send lots of part one of six

1282
00:48:47,599 --> 00:48:49,440
i messages that was true already

1283
00:48:49,440 --> 00:48:51,680
although it shifts where you maintain

1284
00:48:51,680 --> 00:48:52,880
that state

1285
00:48:52,880 --> 00:48:53,920
so

1286
00:48:53,920 --> 00:48:55,920
in the current design

1287
00:48:55,920 --> 00:48:56,880
you can

1288
00:48:56,880 --> 00:48:59,440
send up one of six but the server would

1289
00:48:59,440 --> 00:49:01,200
would not be able to decrypt it so it

1290
00:49:01,200 --> 00:49:03,440
would be holding

1291
00:49:03,440 --> 00:49:06,160
the ciphertext

1292
00:49:06,160 --> 00:49:08,160
and

1293
00:49:08,160 --> 00:49:10,000
this one potentially changes that to

1294
00:49:10,000 --> 00:49:11,680
shift to the application

1295
00:49:11,680 --> 00:49:13,760
domain so

1296
00:49:13,760 --> 00:49:15,760
if that's important that's important i

1297
00:49:15,760 --> 00:49:18,079
don't know

1298
00:49:18,960 --> 00:49:21,040
thanks

1299
00:49:21,040 --> 00:49:24,079
mark you want to try again

1300
00:49:27,760 --> 00:49:29,520
can you hear me now

1301
00:49:29,520 --> 00:49:32,000
yes you can okay

1302
00:49:32,000 --> 00:49:33,680
all right it's like this webrtc thing

1303
00:49:33,680 --> 00:49:35,440
isn't done or anything

1304
00:49:35,440 --> 00:49:36,640
um

1305
00:49:36,640 --> 00:49:38,480
yeah i was one of the folks who was

1306
00:49:38,480 --> 00:49:41,599
asking these questions and i don't have

1307
00:49:41,599 --> 00:49:43,920
direct strong feelings about it or or

1308
00:49:43,920 --> 00:49:45,760
concrete use cases

1309
00:49:45,760 --> 00:49:48,559
this was just one of the things where

1310
00:49:48,559 --> 00:49:50,480
it felt like

1311
00:49:50,480 --> 00:49:51,520
we

1312
00:49:51,520 --> 00:49:52,480
often

1313
00:49:52,480 --> 00:49:54,240
put these artificial

1314
00:49:54,240 --> 00:49:56,559
barriers in place you know because of

1315
00:49:56,559 --> 00:49:58,720
design constraints and then applications

1316
00:49:58,720 --> 00:50:00,880
immediately trip across them so we

1317
00:50:00,880 --> 00:50:02,720
should do so really consciously if we're

1318
00:50:02,720 --> 00:50:03,920
going to do it

1319
00:50:03,920 --> 00:50:05,040
um

1320
00:50:05,040 --> 00:50:07,599
and and also to me it really spoke to

1321
00:50:07,599 --> 00:50:10,480
the naming issue if we're going to

1322
00:50:10,480 --> 00:50:13,359
you know not allow full hdp to come

1323
00:50:13,359 --> 00:50:14,880
through this protocol we probably

1324
00:50:14,880 --> 00:50:17,200
shouldn't call it oblivious or anything

1325
00:50:17,200 --> 00:50:18,880
dash http

1326
00:50:18,880 --> 00:50:20,240
uh which we'll

1327
00:50:20,240 --> 00:50:21,440
probably get to that later because

1328
00:50:21,440 --> 00:50:23,920
that's a big freaking bike shed

1329
00:50:23,920 --> 00:50:25,359
but um

1330
00:50:25,359 --> 00:50:27,119
that that's where i was thinking with

1331
00:50:27,119 --> 00:50:29,040
with these questions was if you know

1332
00:50:29,040 --> 00:50:30,480
somebody comes along and wants to do an

1333
00:50:30,480 --> 00:50:32,800
application that requires you know

1334
00:50:32,800 --> 00:50:34,000
larger

1335
00:50:34,000 --> 00:50:37,599
responses for example or one xx you know

1336
00:50:37,599 --> 00:50:41,520
uh uh you know non-non-final responses

1337
00:50:41,520 --> 00:50:43,839
um you're gonna want this pretty quickly

1338
00:50:43,839 --> 00:50:45,440
and it's gonna be pretty constraining

1339
00:50:45,440 --> 00:50:47,359
for them

1340
00:50:47,359 --> 00:50:49,119
yeah so i don't know if you missed this

1341
00:50:49,119 --> 00:50:51,680
while you were struggling but um

1342
00:50:51,680 --> 00:50:54,480
i made the observation that we can

1343
00:50:54,480 --> 00:50:56,400
add new new

1344
00:50:56,400 --> 00:50:59,119
i guess media types in order to support

1345
00:50:59,119 --> 00:51:02,960
different uh different use cases

1346
00:51:04,800 --> 00:51:06,480
so so i guess that's

1347
00:51:06,480 --> 00:51:10,000
the question as well um

1348
00:51:10,160 --> 00:51:11,680
as i understand it this is really a

1349
00:51:11,680 --> 00:51:14,559
question for the generic proxy layer or

1350
00:51:14,559 --> 00:51:16,000
or or how you

1351
00:51:16,000 --> 00:51:18,000
how you uh uh

1352
00:51:18,000 --> 00:51:19,839
bundle up the crypto i guess it's it's

1353
00:51:19,839 --> 00:51:21,920
and it's also a question for things like

1354
00:51:21,920 --> 00:51:25,040
one xx about the the http format so how

1355
00:51:25,040 --> 00:51:26,240
do you see this being reflected in the

1356
00:51:26,240 --> 00:51:29,040
two different drafts

1357
00:51:32,400 --> 00:51:35,440
that's a good question uh

1358
00:51:35,440 --> 00:51:37,839
i don't

1359
00:51:38,319 --> 00:51:41,040
i'd be looking for text on that um um

1360
00:51:41,040 --> 00:51:42,160
it's too

1361
00:51:42,160 --> 00:51:45,119
early late for me to be cogent i feel

1362
00:51:45,119 --> 00:51:47,200
that on the specifics there

1363
00:51:47,200 --> 00:51:49,040
yeah

1364
00:51:49,040 --> 00:51:52,079
uh yeah i i mean i i'm fine if we decide

1365
00:51:52,079 --> 00:51:52,960
that

1366
00:51:52,960 --> 00:51:55,440
you know no let's keep it really limited

1367
00:51:55,440 --> 00:51:56,960
um i just think that should be conscious

1368
00:51:56,960 --> 00:51:58,800
and then if we do we should probably

1369
00:51:58,800 --> 00:52:02,280
think about the naming

1370
00:52:06,079 --> 00:52:08,000
thanks mark mark we still have i think a

1371
00:52:08,000 --> 00:52:10,240
few minutes in case you want to

1372
00:52:10,240 --> 00:52:12,240
talk about any other issues

1373
00:52:12,240 --> 00:52:14,960
yeah i'm i'm going to just talk to these

1374
00:52:14,960 --> 00:52:16,880
ones i think rather than

1375
00:52:16,880 --> 00:52:19,359
subject everyone to

1376
00:52:19,359 --> 00:52:23,200
4k screen shares um

1377
00:52:24,640 --> 00:52:27,119
if it helps i have uh just a summary of

1378
00:52:27,119 --> 00:52:28,800
each issue at the end of my slides we

1379
00:52:28,800 --> 00:52:30,240
could just pull that up

1380
00:52:30,240 --> 00:52:31,119
um

1381
00:52:31,119 --> 00:52:34,480
oh yeah but why don't you ask to

1382
00:52:34,480 --> 00:52:36,880
i will do that maybe i can

1383
00:52:36,880 --> 00:52:39,359
i'll do it

1384
00:52:45,599 --> 00:52:47,280
okay

1385
00:52:47,280 --> 00:52:49,760
all right so um

1386
00:52:49,760 --> 00:52:52,319
the next one talks about um what

1387
00:52:52,319 --> 00:52:55,040
additional data we need

1388
00:52:55,040 --> 00:52:57,680
and this gets it into uh interesting

1389
00:52:57,680 --> 00:52:58,960
questions about

1390
00:52:58,960 --> 00:53:01,599
well two things really

1391
00:53:01,599 --> 00:53:03,200
so chris open the issue and i think i

1392
00:53:03,200 --> 00:53:05,200
split it two ways the first one

1393
00:53:05,200 --> 00:53:06,800
i i think we're going to want to talk

1394
00:53:06,800 --> 00:53:10,400
about the question of what information

1395
00:53:10,400 --> 00:53:12,559
does the client or the server need to

1396
00:53:12,559 --> 00:53:15,040
provide to the the intermediary in terms

1397
00:53:15,040 --> 00:53:15,920
of

1398
00:53:15,920 --> 00:53:17,839
what's going on under the

1399
00:53:17,839 --> 00:53:19,760
encapsulation

1400
00:53:19,760 --> 00:53:21,520
in order for it to more effectively do

1401
00:53:21,520 --> 00:53:22,720
its job

1402
00:53:22,720 --> 00:53:25,599
and my initial take on this and what's

1403
00:53:25,599 --> 00:53:29,359
in the drafts is absolutely nothing

1404
00:53:29,359 --> 00:53:30,319
but

1405
00:53:30,319 --> 00:53:32,640
chris wanted to ask the question

1406
00:53:32,640 --> 00:53:34,160
and i think it's a reasonable one to ask

1407
00:53:34,160 --> 00:53:35,680
is is there anything that we might

1408
00:53:35,680 --> 00:53:39,119
deliberately expose to an intermediary

1409
00:53:39,119 --> 00:53:40,720
in order for it to more effectively do

1410
00:53:40,720 --> 00:53:43,359
its job

1411
00:53:43,359 --> 00:53:45,599
and that's really not something that i

1412
00:53:45,599 --> 00:53:47,359
think we need to

1413
00:53:47,359 --> 00:53:49,680
discuss here unless someone has a

1414
00:53:49,680 --> 00:53:50,640
stunning

1415
00:53:50,640 --> 00:53:52,960
idea but um

1416
00:53:52,960 --> 00:53:54,480
if it's something that people might want

1417
00:53:54,480 --> 00:53:56,400
to think about

1418
00:53:56,400 --> 00:53:58,640
the other aspect of that that i think we

1419
00:53:58,640 --> 00:54:01,520
might want to discuss at some point is

1420
00:54:01,520 --> 00:54:04,960
anti-replay capabilities so one of the

1421
00:54:04,960 --> 00:54:07,040
more unfortunate properties of this is

1422
00:54:07,040 --> 00:54:09,200
that the proxy becomes

1423
00:54:09,200 --> 00:54:10,880
a potential source of replay attacks

1424
00:54:10,880 --> 00:54:12,559
against the server

1425
00:54:12,559 --> 00:54:14,079
and

1426
00:54:14,079 --> 00:54:16,800
providing some capabilities or some sort

1427
00:54:16,800 --> 00:54:18,480
of facilities

1428
00:54:18,480 --> 00:54:20,240
for doing that is not something that the

1429
00:54:20,240 --> 00:54:21,920
draft currently does

1430
00:54:21,920 --> 00:54:23,839
but we might want to do things like put

1431
00:54:23,839 --> 00:54:26,640
timestamps in messages in order to

1432
00:54:26,640 --> 00:54:28,640
provide the servers with some tools that

1433
00:54:28,640 --> 00:54:30,880
they can sort of hang

1434
00:54:30,880 --> 00:54:34,800
their anti-replay protections off

1435
00:54:35,440 --> 00:54:37,680
do people have opinions on

1436
00:54:37,680 --> 00:54:39,839
i just wanted to if i may add some uh

1437
00:54:39,839 --> 00:54:41,359
color to the the

1438
00:54:41,359 --> 00:54:43,920
origin of the issue um

1439
00:54:43,920 --> 00:54:45,520
just for people to have some additional

1440
00:54:45,520 --> 00:54:47,200
context uh

1441
00:54:47,200 --> 00:54:50,000
over in the uh ppm

1442
00:54:50,000 --> 00:54:51,119
priv

1443
00:54:51,119 --> 00:54:54,960
group or boss that that body of work um

1444
00:54:54,960 --> 00:54:57,599
we're effectively reusing hbp for public

1445
00:54:57,599 --> 00:55:00,240
key encrypting um data that could be

1446
00:55:00,240 --> 00:55:03,520
easily fit inside of an http request

1447
00:55:03,520 --> 00:55:06,799
from clients to these uh

1448
00:55:06,799 --> 00:55:09,280
servers

1449
00:55:09,440 --> 00:55:11,359
and it's been discussed a number of

1450
00:55:11,359 --> 00:55:12,880
times that you might also want to

1451
00:55:12,880 --> 00:55:17,520
compose uh or use ohio or ohttp for the

1452
00:55:17,520 --> 00:55:21,040
purposes of sending these messages

1453
00:55:21,040 --> 00:55:23,359
and in in that particular protocol right

1454
00:55:23,359 --> 00:55:25,200
now there are some additional

1455
00:55:25,200 --> 00:55:26,960
authenticated data that's exposed in the

1456
00:55:26,960 --> 00:55:28,799
clear

1457
00:55:28,799 --> 00:55:30,880
so the the idea was could you

1458
00:55:30,880 --> 00:55:32,799
potentially reuse ohtp for this

1459
00:55:32,799 --> 00:55:35,040
particular purpose

1460
00:55:35,040 --> 00:55:36,640
including some additional authenticated

1461
00:55:36,640 --> 00:55:39,200
data allowing one to deploy a proxy

1462
00:55:39,200 --> 00:55:41,119
between client and server if you wanted

1463
00:55:41,119 --> 00:55:42,319
one later on

1464
00:55:42,319 --> 00:55:45,040
without any other sort of

1465
00:55:45,040 --> 00:55:47,520
wire format change but

1466
00:55:47,520 --> 00:55:49,920
i agree with the the

1467
00:55:49,920 --> 00:55:51,839
pushback that has been discussed on the

1468
00:55:51,839 --> 00:55:52,960
on the issue

1469
00:55:52,960 --> 00:55:54,880
um that you don't necessarily want to be

1470
00:55:54,880 --> 00:55:56,400
adding or exposing more things to

1471
00:55:56,400 --> 00:56:00,240
proxies but that was the origin

1472
00:56:01,520 --> 00:56:04,559
thanks chris and sorry just jump in um

1473
00:56:04,559 --> 00:56:06,960
so we are at five minutes four minutes

1474
00:56:06,960 --> 00:56:09,119
now until the end of the session i just

1475
00:56:09,119 --> 00:56:10,640
wanted to take a couple seconds here at

1476
00:56:10,640 --> 00:56:13,599
the end uh by the way of wrap-up and

1477
00:56:13,599 --> 00:56:14,839
next steps

1478
00:56:14,839 --> 00:56:17,280
um you know we've had a good meeting

1479
00:56:17,280 --> 00:56:19,200
here i think getting people in sync

1480
00:56:19,200 --> 00:56:20,559
getting a good adoption call clear

1481
00:56:20,559 --> 00:56:22,319
adoption call which we'll confirm on the

1482
00:56:22,319 --> 00:56:23,520
list

1483
00:56:23,520 --> 00:56:25,760
now as we work on burning down these

1484
00:56:25,760 --> 00:56:27,680
issues and making progress on

1485
00:56:27,680 --> 00:56:30,640
our new working group document um just

1486
00:56:30,640 --> 00:56:33,200
wanted to see if folks would

1487
00:56:33,200 --> 00:56:35,200
think it useful to have some

1488
00:56:35,200 --> 00:56:37,839
virtual interims scheduled so we could

1489
00:56:37,839 --> 00:56:39,599
do something like have monthly or

1490
00:56:39,599 --> 00:56:41,359
bi-weekly calls

1491
00:56:41,359 --> 00:56:42,799
to go through some of these issues and

1492
00:56:42,799 --> 00:56:44,559
try and keep up the uh

1493
00:56:44,559 --> 00:56:46,160
keep up the pace here

1494
00:56:46,160 --> 00:56:48,160
um do folks have thoughts on whether

1495
00:56:48,160 --> 00:56:50,400
that would be a good kind of face or

1496
00:56:50,400 --> 00:56:52,640
what would be a good case here

1497
00:56:52,640 --> 00:56:54,160
or whether we should just keep things on

1498
00:56:54,160 --> 00:56:57,799
the mailing list for now

1499
00:56:58,400 --> 00:57:01,599
martin cress's editors

1500
00:57:05,520 --> 00:57:07,520
i have a preference for

1501
00:57:07,520 --> 00:57:10,720
doing things in github been there

1502
00:57:10,720 --> 00:57:12,079
enough times that i know that the

1503
00:57:12,079 --> 00:57:15,040
mailing list is fine

1504
00:57:20,799 --> 00:57:25,359
okay so we can focus on async for now um

1505
00:57:25,359 --> 00:57:28,400
should um should we should real-time uh

1506
00:57:28,400 --> 00:57:30,480
face-to-face be useful we are always two

1507
00:57:30,480 --> 00:57:32,559
weeks away we uh the itf requires two

1508
00:57:32,559 --> 00:57:33,920
weeks notice before we have a working

1509
00:57:33,920 --> 00:57:35,760
group uh virtual interim

1510
00:57:35,760 --> 00:57:38,000
so uh feel free to propose such and we

1511
00:57:38,000 --> 00:57:41,599
can get something scheduled

1512
00:57:41,599 --> 00:57:43,599
all right i think we are that is the

1513
00:57:43,599 --> 00:57:47,280
last uh i had on my agenda so i think we

1514
00:57:47,280 --> 00:57:49,280
are uh

1515
00:57:49,280 --> 00:57:52,079
we are done here three minutes early so

1516
00:57:52,079 --> 00:57:55,280
enjoy the rest of your ietf day

1517
00:57:55,280 --> 00:57:57,040
thanks all yeah

1518
00:57:57,040 --> 00:57:58,880
thanks all and thanks again to our

1519
00:57:58,880 --> 00:58:02,480
notetakers and presenters

1520
00:58:02,559 --> 00:58:06,599
have a good ietf week

1521
00:58:18,880 --> 00:58:20,960
you

