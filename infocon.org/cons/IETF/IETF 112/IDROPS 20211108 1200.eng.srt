1
00:00:04,960 --> 00:00:07,040
here

2
00:00:07,040 --> 00:00:08,000
and

3
00:00:08,000 --> 00:00:10,720
oliver good

4
00:00:12,639 --> 00:00:14,320
so we should be ready whenever

5
00:00:14,320 --> 00:00:17,559
time comes

6
00:01:00,399 --> 00:01:04,239
okay everybody it's

7
00:01:04,239 --> 00:01:06,000
7 a.m somewhere

8
00:01:06,000 --> 00:01:08,320
uh this is the cider ops meeting at ietf

9
00:01:08,320 --> 00:01:10,840
112. ideally you're here for the

10
00:01:10,840 --> 00:01:15,040
fun uh i'm chris there's cair and

11
00:01:15,040 --> 00:01:17,280
natalie as well

12
00:01:17,280 --> 00:01:19,439
um

13
00:01:19,439 --> 00:01:22,559
i think we have a

14
00:01:24,320 --> 00:01:25,920
note well everyone should be able to

15
00:01:25,920 --> 00:01:27,439
definitely read that eye chart all the

16
00:01:27,439 --> 00:01:28,960
slides should be downloadable in the

17
00:01:28,960 --> 00:01:30,640
meeting materials

18
00:01:30,640 --> 00:01:32,960
site

19
00:01:33,439 --> 00:01:34,880
if there need to be updates we can make

20
00:01:34,880 --> 00:01:37,280
those uh after the meeting's over i

21
00:01:37,280 --> 00:01:39,439
suppose to the at least to the

22
00:01:39,439 --> 00:01:41,839
archive

23
00:01:42,799 --> 00:01:43,920
uh

24
00:01:43,920 --> 00:01:45,439
we have two things on the agenda plus

25
00:01:45,439 --> 00:01:47,360
some updates about drafts

26
00:01:47,360 --> 00:01:50,720
i think we have the jabber and

27
00:01:50,720 --> 00:01:52,479
we have the jabra scribe covered with

28
00:01:52,479 --> 00:01:53,520
the

29
00:01:53,520 --> 00:01:55,600
chat thing i think we need somebody to

30
00:01:55,600 --> 00:01:59,839
take notes somebody to volunteer

31
00:02:07,520 --> 00:02:09,520
ideally the note taking is in the

32
00:02:09,520 --> 00:02:11,760
notating tool even

33
00:02:11,760 --> 00:02:14,959
yeah uh quick i can i can take notes but

34
00:02:14,959 --> 00:02:17,599
i would love if our favorite notetaker

35
00:02:17,599 --> 00:02:20,319
can keep an eye over my shoulder george

36
00:02:20,319 --> 00:02:23,560
would you

37
00:02:31,599 --> 00:02:32,879
george

38
00:02:32,879 --> 00:02:36,120
my browser

39
00:02:43,200 --> 00:02:44,480
okay

40
00:02:44,480 --> 00:02:47,599
if not i can just go ahead

41
00:02:47,599 --> 00:02:51,440
i'll keep an eye natalie this is caleb

42
00:02:51,440 --> 00:02:53,920
thanks q

43
00:02:54,879 --> 00:02:56,480
okay

44
00:02:56,480 --> 00:02:58,239
oops oh

45
00:02:58,239 --> 00:03:00,400
no speaker working for for george oh

46
00:03:00,400 --> 00:03:04,239
maybe we have to be able to

47
00:03:04,239 --> 00:03:06,080
him or something okay anyway

48
00:03:06,080 --> 00:03:08,800
this tool is very confusing

49
00:03:08,800 --> 00:03:09,760
so

50
00:03:09,760 --> 00:03:11,680
for all the drafts that are currently uh

51
00:03:11,680 --> 00:03:13,040
in flight or

52
00:03:13,040 --> 00:03:15,280
waiting for review

53
00:03:15,280 --> 00:03:16,400
i'm not gonna go through every single

54
00:03:16,400 --> 00:03:18,560
one a couple highlights

55
00:03:18,560 --> 00:03:21,360
there's a three pages of these

56
00:03:21,360 --> 00:03:23,519
so

57
00:03:23,760 --> 00:03:26,799
the 6486 biz is off to the iesg there's

58
00:03:26,799 --> 00:03:28,239
one other document i believe that was

59
00:03:28,239 --> 00:03:31,879
pushed forward to the iesgo

60
00:03:32,080 --> 00:03:33,680
just the lta use cases which i keep

61
00:03:33,680 --> 00:03:35,360
remembering is being briefly pushed

62
00:03:35,360 --> 00:03:36,159
anyway

63
00:03:36,159 --> 00:03:38,000
um

64
00:03:38,000 --> 00:03:39,280
the rest of these are kind of waiting

65
00:03:39,280 --> 00:03:41,200
there's a couple group last calls which

66
00:03:41,200 --> 00:03:43,360
either need to be issued the has no

67
00:03:43,360 --> 00:03:45,599
identity i think had an update since our

68
00:03:45,599 --> 00:03:49,040
last conversation so that needs to be

69
00:03:49,040 --> 00:03:50,319
make sure we're okay with it so that off

70
00:03:50,319 --> 00:03:53,280
the working review

71
00:03:53,280 --> 00:03:57,599
or sorry work group last call um

72
00:03:59,280 --> 00:04:01,760
there's a question about the 8210 biz i

73
00:04:01,760 --> 00:04:02,959
think we were talking about sending that

74
00:04:02,959 --> 00:04:05,840
to a group last call in the last meeting

75
00:04:05,840 --> 00:04:08,319
then there was an update since then

76
00:04:08,319 --> 00:04:10,400
i think if the authors can speak up on

77
00:04:10,400 --> 00:04:11,280
the

78
00:04:11,280 --> 00:04:12,799
list about it we can decide where to go

79
00:04:12,799 --> 00:04:15,840
from there

80
00:04:17,918 --> 00:04:20,478
sorry for jumping in but

81
00:04:20,478 --> 00:04:24,160
for asp documents there will be

82
00:04:24,160 --> 00:04:27,360
at least one set of updates

83
00:04:27,360 --> 00:04:30,240
for both a profile and

84
00:04:30,240 --> 00:04:32,960
a verification procedure

85
00:04:32,960 --> 00:04:35,120
before we can just start speaking about

86
00:04:35,120 --> 00:04:37,280
working group last call

87
00:04:37,280 --> 00:04:39,600
okay cool

88
00:04:39,600 --> 00:04:41,199
then uh

89
00:04:41,199 --> 00:04:43,680
some rov timing is is has a work group

90
00:04:43,680 --> 00:04:45,440
last call pending which i think will

91
00:04:45,440 --> 00:04:47,600
decide upon at the end of the meeting

92
00:04:47,600 --> 00:04:49,520
time

93
00:04:49,520 --> 00:04:53,600
and same for max length rpa max length

94
00:04:53,600 --> 00:04:56,160
i think unless anybody has any questions

95
00:04:56,160 --> 00:04:58,720
i think we're

96
00:04:59,440 --> 00:05:01,919
basically okay with these

97
00:05:01,919 --> 00:05:04,160
going once

98
00:05:04,160 --> 00:05:06,800
going twice

99
00:05:08,479 --> 00:05:10,960
is that a question

100
00:05:10,960 --> 00:05:11,840
ah

101
00:05:11,840 --> 00:05:13,280
okay

102
00:05:13,280 --> 00:05:14,639
all right

103
00:05:14,639 --> 00:05:16,000
so i think we're

104
00:05:16,000 --> 00:05:17,600
ready to do slides

105
00:05:17,600 --> 00:05:20,639
i think the slide makers can

106
00:05:20,639 --> 00:05:22,720
present their

107
00:05:22,720 --> 00:05:25,440
screen

108
00:05:25,440 --> 00:05:27,759
uh provoke video send video okay let me

109
00:05:27,759 --> 00:05:30,479
stop sending my video

110
00:05:30,479 --> 00:05:33,758
okay oh there's ben

111
00:05:35,440 --> 00:05:38,160
um i think you need to allow me to share

112
00:05:38,160 --> 00:05:39,280
my screen

113
00:05:39,280 --> 00:05:41,520
yeah let me see oh there we go

114
00:05:41,520 --> 00:05:43,759
all right

115
00:05:43,759 --> 00:05:45,360
again super confusing how to use the

116
00:05:45,360 --> 00:05:48,919
video thing here

117
00:06:00,479 --> 00:06:03,520
how's the font size

118
00:06:08,479 --> 00:06:10,400
small size

119
00:06:10,400 --> 00:06:13,520
other people find that

120
00:06:18,840 --> 00:06:22,479
unsatisfactory seems good

121
00:06:25,840 --> 00:06:27,919
okay um

122
00:06:27,919 --> 00:06:29,600
so during the last

123
00:06:29,600 --> 00:06:32,720
meeting um in a couple of

124
00:06:32,720 --> 00:06:35,600
on a couple of topics um

125
00:06:35,600 --> 00:06:37,199
the fact that i had this kind of

126
00:06:37,199 --> 00:06:38,560
implementation

127
00:06:38,560 --> 00:06:39,440
um

128
00:06:39,440 --> 00:06:42,400
for creating and signing and reading

129
00:06:42,400 --> 00:06:44,639
various rpg objects came up a couple of

130
00:06:44,639 --> 00:06:45,600
times so i thought it would be

131
00:06:45,600 --> 00:06:46,960
worthwhile

132
00:06:46,960 --> 00:06:49,599
talking a little bit seeing as this call

133
00:06:49,599 --> 00:06:51,520
pretty much has everyone in the universe

134
00:06:51,520 --> 00:06:53,919
that's likely to care about it on it

135
00:06:53,919 --> 00:06:56,160
um so this is really just an opportunity

136
00:06:56,160 --> 00:06:57,759
to you know tell everyone what it's

137
00:06:57,759 --> 00:06:59,759
about and if they're interested kind of

138
00:06:59,759 --> 00:07:00,960
you know what it does and how they can

139
00:07:00,960 --> 00:07:02,720
contribute

140
00:07:02,720 --> 00:07:04,080
um

141
00:07:04,080 --> 00:07:07,199
so a little bit of background

142
00:07:07,199 --> 00:07:09,280
it started out life

143
00:07:09,280 --> 00:07:11,440
really as uh as a

144
00:07:11,440 --> 00:07:14,160
personal itch that i had to scratch

145
00:07:14,160 --> 00:07:16,639
around two problems um

146
00:07:16,639 --> 00:07:18,639
the first one was that it's always kind

147
00:07:18,639 --> 00:07:19,919
of bothered me

148
00:07:19,919 --> 00:07:21,120
that

149
00:07:21,120 --> 00:07:23,039
in order to read

150
00:07:23,039 --> 00:07:25,360
the objects that make up

151
00:07:25,360 --> 00:07:27,280
the rpki

152
00:07:27,280 --> 00:07:29,120
we either need to kind of crack out of

153
00:07:29,120 --> 00:07:31,120
browser

154
00:07:31,120 --> 00:07:33,120
um and look at one of the various kind

155
00:07:33,120 --> 00:07:35,360
of tools that online tools that people

156
00:07:35,360 --> 00:07:37,120
have built over the years

157
00:07:37,120 --> 00:07:38,560
or you have to

158
00:07:38,560 --> 00:07:42,160
really be a master of the openssl cli

159
00:07:42,160 --> 00:07:43,120
tool

160
00:07:43,120 --> 00:07:45,680
and the name rpkin mansa

161
00:07:45,680 --> 00:07:47,520
came out the fact that i always felt

162
00:07:47,520 --> 00:07:49,120
like i was doing some sort of black

163
00:07:49,120 --> 00:07:51,759
magic um whenever i was actually trying

164
00:07:51,759 --> 00:07:53,759
to read one of these objects using kind

165
00:07:53,759 --> 00:07:57,520
of the open ssl cms and asn 1 command

166
00:07:57,520 --> 00:07:59,039
line options which i can never remember

167
00:07:59,039 --> 00:08:00,800
and i need to spend an hour refreshing

168
00:08:00,800 --> 00:08:04,080
my memory before i can read anything

169
00:08:04,080 --> 00:08:06,319
um but that's not what initiated

170
00:08:06,319 --> 00:08:08,160
actually writing the thing what actually

171
00:08:08,160 --> 00:08:11,039
initiated writing the thing is i was

172
00:08:11,039 --> 00:08:12,400
um

173
00:08:12,400 --> 00:08:15,440
part of the one of one of the authors on

174
00:08:15,440 --> 00:08:18,479
the sign checklist draft

175
00:08:18,479 --> 00:08:20,080
and we were going through

176
00:08:20,080 --> 00:08:23,039
a few iterations of the asm1 module

177
00:08:23,039 --> 00:08:25,840
and i wanted because i'd never really

178
00:08:25,840 --> 00:08:28,000
done anything hands-on with asm1 before

179
00:08:28,000 --> 00:08:29,840
i wanted some sort of tool to add to a

180
00:08:29,840 --> 00:08:32,240
kind of a ci pipeline that would allow

181
00:08:32,240 --> 00:08:35,599
me to you know and allow me to know

182
00:08:35,599 --> 00:08:37,839
at commit time whether i'd broken

183
00:08:37,839 --> 00:08:39,440
anything in the syntax and whether the

184
00:08:39,440 --> 00:08:40,958
syntax that i was

185
00:08:40,958 --> 00:08:42,880
i was writing was resulting in an object

186
00:08:42,880 --> 00:08:44,159
that could actually be written out to

187
00:08:44,159 --> 00:08:45,120
the disk

188
00:08:45,120 --> 00:08:47,279
and

189
00:08:47,279 --> 00:08:50,800
first of all so y'all had previously

190
00:08:50,800 --> 00:08:54,320
um created a demo object from the first

191
00:08:54,320 --> 00:08:56,160
version of the asm1 module that was

192
00:08:56,160 --> 00:08:58,560
written for the draft and

193
00:08:58,560 --> 00:09:00,240
my initial attempt was basically trying

194
00:09:00,240 --> 00:09:03,839
to script what he did

195
00:09:03,839 --> 00:09:05,040
and

196
00:09:05,040 --> 00:09:08,399
after a few minutes of him explaining

197
00:09:08,399 --> 00:09:10,560
what he did and how he did it to me i

198
00:09:10,560 --> 00:09:11,920
gave up

199
00:09:11,920 --> 00:09:13,920
because there was lots of manual

200
00:09:13,920 --> 00:09:16,560
twiddling of text files and lots and

201
00:09:16,560 --> 00:09:19,519
lots of different stages which failed in

202
00:09:19,519 --> 00:09:21,279
cryptic ways if you got it even slightly

203
00:09:21,279 --> 00:09:23,040
wrong and

204
00:09:23,040 --> 00:09:25,200
most importantly

205
00:09:25,200 --> 00:09:27,680
even with all of those steps couldn't

206
00:09:27,680 --> 00:09:28,800
deal

207
00:09:28,800 --> 00:09:30,399
with the

208
00:09:30,399 --> 00:09:31,760
untouched

209
00:09:31,760 --> 00:09:34,560
asm1 module with its imports and so

210
00:09:34,560 --> 00:09:37,040
forth um that was going to appear in the

211
00:09:37,040 --> 00:09:38,640
craft what i wanted to do is make sure

212
00:09:38,640 --> 00:09:39,920
that the one that was actually in the

213
00:09:39,920 --> 00:09:41,760
craft was valid

214
00:09:41,760 --> 00:09:42,800
um

215
00:09:42,800 --> 00:09:44,640
so the second thing i tried to do is i

216
00:09:44,640 --> 00:09:46,560
started trawling around some open source

217
00:09:46,560 --> 00:09:49,839
rp implementations

218
00:09:49,839 --> 00:09:52,480
discovered to my slight surprise that

219
00:09:52,480 --> 00:09:54,880
nobody actually uses the

220
00:09:54,880 --> 00:09:57,920
asn 1 modules that are published in

221
00:09:57,920 --> 00:10:01,440
the rfcs to generate any code um or at

222
00:10:01,440 --> 00:10:02,720
least

223
00:10:02,720 --> 00:10:05,279
most don't do it at all i believe that

224
00:10:05,279 --> 00:10:07,600
fort does do it a bit but with some

225
00:10:07,600 --> 00:10:10,160
fairly heavily patched um

226
00:10:10,160 --> 00:10:12,240
asm1 modules in order to get things to

227
00:10:12,240 --> 00:10:13,920
work

228
00:10:13,920 --> 00:10:17,200
and so then i tried to go out and find a

229
00:10:17,200 --> 00:10:20,079
you know relatively widely used asn 1 to

230
00:10:20,079 --> 00:10:22,800
c compiler called sm1c

231
00:10:22,800 --> 00:10:25,040
and it just couldn't cope with any of

232
00:10:25,040 --> 00:10:27,440
the dependencies it didn't like the

233
00:10:27,440 --> 00:10:29,839
x509 modules it didn't like the cms

234
00:10:29,839 --> 00:10:31,920
modules it didn't like really any of the

235
00:10:31,920 --> 00:10:33,360
modules that get

236
00:10:33,360 --> 00:10:35,279
used in the

237
00:10:35,279 --> 00:10:38,399
pyramid on top of which um

238
00:10:38,399 --> 00:10:41,440
some rpk is an object to build so that

239
00:10:41,440 --> 00:10:43,120
will rather came to nothing and so i

240
00:10:43,120 --> 00:10:45,440
decided that i either needed to not have

241
00:10:45,440 --> 00:10:46,959
such a tool or i needed to write it

242
00:10:46,959 --> 00:10:49,279
myself

243
00:10:49,600 --> 00:10:51,440
so the first thing that i needed to do

244
00:10:51,440 --> 00:10:53,120
um because i wasn't really in the market

245
00:10:53,120 --> 00:10:56,160
for writing an asmr compiler from from

246
00:10:56,160 --> 00:10:58,560
scratch because i didn't really need

247
00:10:58,560 --> 00:11:00,640
you know a

248
00:11:00,640 --> 00:11:02,480
particularly performant as one compiler

249
00:11:02,480 --> 00:11:04,480
what i needed was something

250
00:11:04,480 --> 00:11:06,880
fairly vanilla flavored but that which

251
00:11:06,880 --> 00:11:07,920
was

252
00:11:07,920 --> 00:11:08,880
um

253
00:11:08,880 --> 00:11:10,720
which was out of the box gonna work with

254
00:11:10,720 --> 00:11:13,920
some of the slightly more outlandish

255
00:11:13,920 --> 00:11:15,519
syntax

256
00:11:15,519 --> 00:11:17,920
constructions that you find in

257
00:11:17,920 --> 00:11:21,120
in modules such as uh 5912 and stuff

258
00:11:21,120 --> 00:11:22,720
like that

259
00:11:22,720 --> 00:11:24,640
um so i did a lot of searching um

260
00:11:24,640 --> 00:11:27,279
there's quite a lot of different

261
00:11:27,279 --> 00:11:30,800
asm1 implementations out out there most

262
00:11:30,800 --> 00:11:33,600
of them are not what i would call an

263
00:11:33,600 --> 00:11:36,560
asm1 compiler they don't generate code

264
00:11:36,560 --> 00:11:38,000
they expect

265
00:11:38,000 --> 00:11:39,519
you to

266
00:11:39,519 --> 00:11:42,240
hand write data structures and what

267
00:11:42,240 --> 00:11:43,839
they'll give you for free as things like

268
00:11:43,839 --> 00:11:45,200
a ddr

269
00:11:45,200 --> 00:11:47,600
encoder and decoder

270
00:11:47,600 --> 00:11:49,839
but finally i came across this library

271
00:11:49,839 --> 00:11:51,440
called pie crate which i'd never come

272
00:11:51,440 --> 00:11:53,760
across before and

273
00:11:53,760 --> 00:11:58,000
it has some fairly ugly warts um

274
00:11:58,000 --> 00:12:00,320
but it was very very feature complete

275
00:12:00,320 --> 00:12:02,320
and so i decided that although i'd

276
00:12:02,320 --> 00:12:03,839
started this off not really wanting to

277
00:12:03,839 --> 00:12:06,320
write this thing in python

278
00:12:06,320 --> 00:12:07,760
pycrate is a

279
00:12:07,760 --> 00:12:10,399
sn1 to python compiler and so

280
00:12:10,399 --> 00:12:13,120
it seemed to be the only way forward

281
00:12:13,120 --> 00:12:15,120
and that's what that's that's what gets

282
00:12:15,120 --> 00:12:17,440
used under the hood for the sn1

283
00:12:17,440 --> 00:12:20,160
compilation part of this

284
00:12:20,160 --> 00:12:23,680
and so with that in hand i began

285
00:12:23,680 --> 00:12:26,000
kind of scratching around

286
00:12:26,000 --> 00:12:29,279
and trying to build a library that would

287
00:12:29,279 --> 00:12:31,600
would meet kind of two objectives i

288
00:12:31,600 --> 00:12:34,000
wanted to be in a position where given

289
00:12:34,000 --> 00:12:35,120
only

290
00:12:35,120 --> 00:12:37,680
a asn 1 module

291
00:12:37,680 --> 00:12:41,120
with a content type instance definition

292
00:12:41,120 --> 00:12:44,639
and a very very simple

293
00:12:44,720 --> 00:12:47,600
class implementation corresponding to a

294
00:12:47,600 --> 00:12:49,360
to a particular object i wanted to be

295
00:12:49,360 --> 00:12:52,720
able to instantiate any arbitrary new

296
00:12:52,720 --> 00:12:54,079
rpki

297
00:12:54,079 --> 00:12:55,760
signed object

298
00:12:55,760 --> 00:12:57,920
with just those two things to and try

299
00:12:57,920 --> 00:12:59,839
and keep them the boilerplate to an

300
00:12:59,839 --> 00:13:01,920
absolute memory

301
00:13:01,920 --> 00:13:02,959
um

302
00:13:02,959 --> 00:13:05,600
and i think mostly i've succeeded in

303
00:13:05,600 --> 00:13:08,480
doing those um

304
00:13:08,800 --> 00:13:10,880
because python's an interpreted language

305
00:13:10,880 --> 00:13:13,440
it kind of works trying to do code

306
00:13:13,440 --> 00:13:16,240
generation and python is a bit weird

307
00:13:16,240 --> 00:13:19,200
you don't have a discrete compiled time

308
00:13:19,200 --> 00:13:22,000
step like you have in you know c or c

309
00:13:22,000 --> 00:13:24,560
plus plus or rust or go even where

310
00:13:24,560 --> 00:13:27,200
you've got an opportunity to take some

311
00:13:27,200 --> 00:13:30,000
sort of external data and generate code

312
00:13:30,000 --> 00:13:33,040
from it before a compile step

313
00:13:33,040 --> 00:13:35,600
and so a lot of the work that i did was

314
00:13:35,600 --> 00:13:36,720
getting

315
00:13:36,720 --> 00:13:38,079
um

316
00:13:38,079 --> 00:13:41,519
getting asm 1 modules to be discoverable

317
00:13:41,519 --> 00:13:43,920
and compilable at runtime which makes

318
00:13:43,920 --> 00:13:45,680
the whole thing much much easier to use

319
00:13:45,680 --> 00:13:49,760
as a library user as a cli user

320
00:13:49,760 --> 00:13:51,839
the downside is it makes the tool

321
00:13:51,839 --> 00:13:53,839
terrifically slow so this is not

322
00:13:53,839 --> 00:13:55,839
something that you should use

323
00:13:55,839 --> 00:13:58,240
should be used in performance sensitive

324
00:13:58,240 --> 00:14:00,959
situations

325
00:14:01,199 --> 00:14:03,519
the other thing that it does which i

326
00:14:03,519 --> 00:14:05,839
believe is unique as far as i've been

327
00:14:05,839 --> 00:14:07,440
able to find out there i'm sure someone

328
00:14:07,440 --> 00:14:10,320
will correct me um

329
00:14:10,320 --> 00:14:13,440
is i wanted to be able to

330
00:14:13,440 --> 00:14:16,000
um

331
00:14:16,000 --> 00:14:19,199
i wanted to be able to auto discover

332
00:14:19,199 --> 00:14:20,480
the different

333
00:14:20,480 --> 00:14:22,880
instance definitions that exist in any

334
00:14:22,880 --> 00:14:25,279
of the modules that i've compiled of

335
00:14:25,279 --> 00:14:28,000
content types so i know what can

336
00:14:28,000 --> 00:14:31,279
validly appear in a cms data structure

337
00:14:31,279 --> 00:14:34,000
at run time um and that also works which

338
00:14:34,000 --> 00:14:37,920
is it requires some fairly obscure and

339
00:14:37,920 --> 00:14:40,800
fairly recent python features and so

340
00:14:40,800 --> 00:14:43,040
unfortunately rpk answer only works on

341
00:14:43,040 --> 00:14:46,000
python 3.8 and above as a result of that

342
00:14:46,000 --> 00:14:47,440
but i think it's worth it because that

343
00:14:47,440 --> 00:14:48,720
allows us to keep

344
00:14:48,720 --> 00:14:51,040
boilerplate to an absolute minimum and

345
00:14:51,040 --> 00:14:54,000
it also places the

346
00:14:54,000 --> 00:14:55,120
um

347
00:14:55,120 --> 00:14:58,000
the onus of correctness

348
00:14:58,000 --> 00:15:00,079
much more strongly on the side of what's

349
00:15:00,079 --> 00:15:01,839
in the asm one module that you're

350
00:15:01,839 --> 00:15:03,040
looking at rather than what's in the

351
00:15:03,040 --> 00:15:04,480
python code that the implement is

352
00:15:04,480 --> 00:15:06,560
writing

353
00:15:06,560 --> 00:15:07,519
so

354
00:15:07,519 --> 00:15:12,320
it includes implementations of taca and

355
00:15:12,320 --> 00:15:15,600
entity resource certificates um it can

356
00:15:15,600 --> 00:15:17,600
also write tal files

357
00:15:17,600 --> 00:15:20,000
um it's in the base

358
00:15:20,000 --> 00:15:22,000
um package in the kind of the main

359
00:15:22,000 --> 00:15:23,440
archicad answer package there are

360
00:15:23,440 --> 00:15:25,519
implementations for manifests rowers and

361
00:15:25,519 --> 00:15:28,160
ghostbuster records

362
00:15:28,160 --> 00:15:29,199
um

363
00:15:29,199 --> 00:15:31,680
and it ships with a fairly simple but

364
00:15:31,680 --> 00:15:33,920
quite extensive cli tool

365
00:15:33,920 --> 00:15:37,360
which has two sub-commands rpkin cam

366
00:15:37,360 --> 00:15:39,360
conjure

367
00:15:39,360 --> 00:15:40,560
creates

368
00:15:40,560 --> 00:15:43,680
a kind of a local publication point on

369
00:15:43,680 --> 00:15:45,279
disk um

370
00:15:45,279 --> 00:15:46,240
and

371
00:15:46,240 --> 00:15:48,160
everything kind of ships with default so

372
00:15:48,160 --> 00:15:50,160
you can run literally just that command

373
00:15:50,160 --> 00:15:52,480
and get a whole you know get a ta with

374
00:15:52,480 --> 00:15:54,320
its publication point and manifest and

375
00:15:54,320 --> 00:15:55,440
crl

376
00:15:55,440 --> 00:15:58,320
um and then a subordinate ca and a bunch

377
00:15:58,320 --> 00:16:00,720
of stuff under that um

378
00:16:00,720 --> 00:16:02,720
and that makes for very kind of

379
00:16:02,720 --> 00:16:04,800
very quick and easy object generation if

380
00:16:04,800 --> 00:16:06,160
you're just trying to spin up a quick

381
00:16:06,160 --> 00:16:07,600
prototype to see if someone else can

382
00:16:07,600 --> 00:16:09,440
read it

383
00:16:09,440 --> 00:16:11,920
i'm sorry i've gone

384
00:16:11,920 --> 00:16:14,399
too far

385
00:16:18,560 --> 00:16:20,560
and then the second part of it is the

386
00:16:20,560 --> 00:16:23,040
perceived command which is

387
00:16:23,040 --> 00:16:25,600
um a decoder and

388
00:16:25,600 --> 00:16:28,079
data dumper which just dumps

389
00:16:28,079 --> 00:16:29,759
signed objects to standard out and it

390
00:16:29,759 --> 00:16:31,040
can it can

391
00:16:31,040 --> 00:16:33,040
dump it out in

392
00:16:33,040 --> 00:16:36,880
sn1 value syntax it can dump it in json

393
00:16:36,880 --> 00:16:40,800
it's possible to provide methods for

394
00:16:40,800 --> 00:16:43,920
custom formats um like there's one that

395
00:16:43,920 --> 00:16:46,880
i've written for the rower object

396
00:16:46,880 --> 00:16:48,880
to allow you to actually look at the ip

397
00:16:48,880 --> 00:16:51,360
addresses as ip addresses rather than

398
00:16:51,360 --> 00:16:52,480
the weird

399
00:16:52,480 --> 00:16:54,959
um kind of der bit strings that are used

400
00:16:54,959 --> 00:16:57,680
in the actual encoding

401
00:16:57,680 --> 00:16:59,920
um

402
00:17:00,079 --> 00:17:03,600
and it's got a plug-in architecture that

403
00:17:03,600 --> 00:17:05,760
borrows quite heavily from the python

404
00:17:05,760 --> 00:17:08,000
setup tools ways way of declaring

405
00:17:08,000 --> 00:17:09,439
plugins

406
00:17:09,439 --> 00:17:13,679
which allows plugins to declare

407
00:17:13,679 --> 00:17:15,280
to declare

408
00:17:15,280 --> 00:17:18,559
the the asm1 modules that they ship with

409
00:17:18,559 --> 00:17:21,760
the signed objects that they can create

410
00:17:21,760 --> 00:17:25,520
and also extensions to the rpko and

411
00:17:25,520 --> 00:17:27,280
conjure subcommand

412
00:17:27,280 --> 00:17:29,039
and there are existing plugins both of

413
00:17:29,039 --> 00:17:31,120
which i've written

414
00:17:31,120 --> 00:17:32,480
for the

415
00:17:32,480 --> 00:17:35,280
rsc object and from for the for the aspa

416
00:17:35,280 --> 00:17:37,440
object and there's but there's a working

417
00:17:37,440 --> 00:17:40,160
branch for the aspa object for the most

418
00:17:40,160 --> 00:17:41,200
recent

419
00:17:41,200 --> 00:17:44,080
um proposed change to the profile that's

420
00:17:44,080 --> 00:17:46,880
been discussed recently on the list

421
00:17:46,880 --> 00:17:48,000
and which

422
00:17:48,000 --> 00:17:49,120
um

423
00:17:49,120 --> 00:17:51,679
has i believe been implemented in the

424
00:17:51,679 --> 00:17:54,720
most recent uh version of krell

425
00:17:54,720 --> 00:17:57,200
so that should interrupt i'm barring a

426
00:17:57,200 --> 00:18:00,559
couple of oid changes

427
00:18:00,559 --> 00:18:02,000
um

428
00:18:02,000 --> 00:18:04,480
now the reason i the the the things that

429
00:18:04,480 --> 00:18:06,720
it i think it can be useful for at the

430
00:18:06,720 --> 00:18:08,559
moment um as i say the first thing that

431
00:18:08,559 --> 00:18:10,400
i wanted to do is while i was writing

432
00:18:10,400 --> 00:18:11,840
internet track i wanted to validate the

433
00:18:11,840 --> 00:18:14,240
module that leadership i didn't want to

434
00:18:14,240 --> 00:18:16,559
you know have someone

435
00:18:16,559 --> 00:18:18,960
come back to us after we've published a

436
00:18:18,960 --> 00:18:20,240
new version of the draft and say

437
00:18:20,240 --> 00:18:21,200
actually you know having a second

438
00:18:21,200 --> 00:18:22,880
there's some sort of fundamental

439
00:18:22,880 --> 00:18:26,080
invalidity in the sn1 syntax

440
00:18:26,080 --> 00:18:28,240
and it's used for that today and fairly

441
00:18:28,240 --> 00:18:30,640
successfully by the looks of it um so

442
00:18:30,640 --> 00:18:32,799
far russ hasn't come back to us and told

443
00:18:32,799 --> 00:18:34,480
us that one of our sn modules don't

444
00:18:34,480 --> 00:18:36,320
compile

445
00:18:36,320 --> 00:18:39,440
um and similarly it can be used for

446
00:18:39,440 --> 00:18:41,120
object prototyping so during the

447
00:18:41,120 --> 00:18:43,919
development of a new um of a new object

448
00:18:43,919 --> 00:18:46,160
type it's frequently useful to quickly

449
00:18:46,160 --> 00:18:47,520
be able to

450
00:18:47,520 --> 00:18:50,160
dump an example of that to

451
00:18:50,160 --> 00:18:52,160
send to someone to see if they can read

452
00:18:52,160 --> 00:18:54,480
it and that's been

453
00:18:54,480 --> 00:18:57,120
used successfully a couple of times for

454
00:18:57,120 --> 00:19:00,320
signed checklists we've um confirmed

455
00:19:00,320 --> 00:19:01,760
that the

456
00:19:01,760 --> 00:19:04,480
objects that get created by a rpk

457
00:19:04,480 --> 00:19:07,280
announcer can be read by both rpki

458
00:19:07,280 --> 00:19:08,799
client and

459
00:19:08,799 --> 00:19:11,440
another prototype implementation that

460
00:19:11,440 --> 00:19:13,679
tom harrison from ap nick built

461
00:19:13,679 --> 00:19:15,679
um and

462
00:19:15,679 --> 00:19:16,480
for

463
00:19:16,480 --> 00:19:18,240
the

464
00:19:18,240 --> 00:19:20,000
the the kind of the work in progress new

465
00:19:20,000 --> 00:19:22,640
version of the aspa

466
00:19:22,640 --> 00:19:25,919
profile i've confirmed that the objects

467
00:19:25,919 --> 00:19:27,120
that

468
00:19:27,120 --> 00:19:32,639
i create can be read by by uh micro

469
00:19:33,360 --> 00:19:35,200
the other thing that it's useful for is

470
00:19:35,200 --> 00:19:36,799
recreating and

471
00:19:36,799 --> 00:19:39,520
and finding bugs in rp's and ca

472
00:19:39,520 --> 00:19:41,360
implementations and it's actually used

473
00:19:41,360 --> 00:19:43,039
successfully for that a couple of times

474
00:19:43,039 --> 00:19:44,799
as well which i'll come to

475
00:19:44,799 --> 00:19:45,760
um

476
00:19:45,760 --> 00:19:49,200
and what i would like it to be

477
00:19:49,200 --> 00:19:51,440
a little bit more usable for but can

478
00:19:51,440 --> 00:19:53,760
still be used at the moment for this is

479
00:19:53,760 --> 00:19:56,000
to do integration testing and and kind

480
00:19:56,000 --> 00:19:58,720
of software acceptance testing for um

481
00:19:58,720 --> 00:20:01,600
rpm and ca

482
00:20:01,600 --> 00:20:04,480
implementations

483
00:20:04,880 --> 00:20:06,640
and of course you know the the original

484
00:20:06,640 --> 00:20:08,400
literally i had to scratch you know ad

485
00:20:08,400 --> 00:20:11,039
hoc debugging of of objects if i none of

486
00:20:11,039 --> 00:20:14,320
the because an rp is by necessity

487
00:20:14,320 --> 00:20:17,440
fairly strict on what it ingests

488
00:20:17,440 --> 00:20:20,400
um it's quite difficult to extract

489
00:20:20,400 --> 00:20:22,320
useful information about what is wrong

490
00:20:22,320 --> 00:20:23,840
with an object from an rp because it

491
00:20:23,840 --> 00:20:25,520
will kind of give up passing as early as

492
00:20:25,520 --> 00:20:26,559
possible

493
00:20:26,559 --> 00:20:30,159
um and so having a tool that doesn't do

494
00:20:30,159 --> 00:20:33,760
any validation beyond the asm 1 syntax

495
00:20:33,760 --> 00:20:35,200
validation

496
00:20:35,200 --> 00:20:38,159
um and just dumps the contents to your

497
00:20:38,159 --> 00:20:40,480
standard out is potentially quite

498
00:20:40,480 --> 00:20:41,760
valuable

499
00:20:41,760 --> 00:20:44,640
and so far we've found

500
00:20:44,640 --> 00:20:46,080
at least two

501
00:20:46,080 --> 00:20:47,760
you know actual bugs in the real world

502
00:20:47,760 --> 00:20:49,440
using this um

503
00:20:49,440 --> 00:20:52,720
the first was a issue that

504
00:20:52,720 --> 00:20:55,039
affected i think multiple rp's but i

505
00:20:55,039 --> 00:20:57,120
only know of the the actual issue number

506
00:20:57,120 --> 00:21:00,480
in fort um where it caused a crash

507
00:21:00,480 --> 00:21:02,880
and this was caused um

508
00:21:02,880 --> 00:21:03,840
by

509
00:21:03,840 --> 00:21:04,880
a

510
00:21:04,880 --> 00:21:08,400
um ca's manifest that lists itself on

511
00:21:08,400 --> 00:21:09,679
its manifest

512
00:21:09,679 --> 00:21:13,280
um which causes a loop and and and in

513
00:21:13,280 --> 00:21:14,960
this particular case it resulted in a

514
00:21:14,960 --> 00:21:16,480
double free

515
00:21:16,480 --> 00:21:18,720
um

516
00:21:18,880 --> 00:21:22,799
the second one that we found was

517
00:21:22,799 --> 00:21:25,200
during that

518
00:21:25,200 --> 00:21:26,320
interrupt

519
00:21:26,320 --> 00:21:29,440
attempt that i mentioned a second ago

520
00:21:29,440 --> 00:21:32,080
i was sent a

521
00:21:32,080 --> 00:21:33,600
demo object

522
00:21:33,600 --> 00:21:36,080
which had a common name with common name

523
00:21:36,080 --> 00:21:38,559
attributes in the subject name which was

524
00:21:38,559 --> 00:21:40,799
greater than the 64 characters that are

525
00:21:40,799 --> 00:21:42,559
actually allowed and

526
00:21:42,559 --> 00:21:43,919
um

527
00:21:43,919 --> 00:21:46,720
answer refused to eat it and that points

528
00:21:46,720 --> 00:21:49,039
out a pretty important

529
00:21:49,039 --> 00:21:50,320
um

530
00:21:50,320 --> 00:21:52,000
a pretty important aspect of the

531
00:21:52,000 --> 00:21:54,480
approach here which is that

532
00:21:54,480 --> 00:21:56,000
because

533
00:21:56,000 --> 00:21:58,400
the only validation that takes place

534
00:21:58,400 --> 00:21:59,679
is

535
00:21:59,679 --> 00:22:02,799
um is based on the asm1 modules

536
00:22:02,799 --> 00:22:04,720
none of the none of the crypto stuff is

537
00:22:04,720 --> 00:22:05,760
checked

538
00:22:05,760 --> 00:22:08,640
but what is checked quite exhaustively

539
00:22:08,640 --> 00:22:10,880
because of pi crate support for

540
00:22:10,880 --> 00:22:13,120
constraints is

541
00:22:13,120 --> 00:22:15,200
all of the obscure

542
00:22:15,200 --> 00:22:18,000
constraints way down the dependency

543
00:22:18,000 --> 00:22:19,760
stack that nobody kind of thinks to

544
00:22:19,760 --> 00:22:21,360
check when they're writing this stuff by

545
00:22:21,360 --> 00:22:23,280
hand

546
00:22:23,280 --> 00:22:24,400
and

547
00:22:24,400 --> 00:22:27,280
i didn't know before before i rp

548
00:22:27,280 --> 00:22:30,000
commander refused to eat that object i

549
00:22:30,000 --> 00:22:31,520
didn't know the common name had a

550
00:22:31,520 --> 00:22:33,360
maximum length of 64 characters but it

551
00:22:33,360 --> 00:22:34,720
turns out it does and that's been

552
00:22:34,720 --> 00:22:36,880
confirmed in a couple of places now um

553
00:22:36,880 --> 00:22:38,960
and there's a there's an issue open in

554
00:22:38,960 --> 00:22:41,200
rpk irs

555
00:22:41,200 --> 00:22:44,559
to address that as well

556
00:22:47,919 --> 00:22:52,000
i'd like to just quickly um

557
00:22:52,000 --> 00:22:52,880
do a

558
00:22:52,880 --> 00:22:55,280
walk through um for the benefit of

559
00:22:55,280 --> 00:22:58,080
anyone you know who might want to use

560
00:22:58,080 --> 00:22:59,600
this at some stage

561
00:22:59,600 --> 00:23:01,039
um

562
00:23:01,039 --> 00:23:03,280
of what

563
00:23:03,280 --> 00:23:06,320
a plug-in for rpkyomancer looks like to

564
00:23:06,320 --> 00:23:07,679
implement a new signed object in

565
00:23:07,679 --> 00:23:10,480
particular um

566
00:23:10,480 --> 00:23:11,760
in this

567
00:23:11,760 --> 00:23:14,720
so all of this um all of this repo i've

568
00:23:14,720 --> 00:23:17,200
got up on github and there'll be a

569
00:23:17,200 --> 00:23:19,120
link at the end of the presentation so

570
00:23:19,120 --> 00:23:20,640
that you can find it

571
00:23:20,640 --> 00:23:22,000
inside our

572
00:23:22,000 --> 00:23:24,480
mounts of poem i've implemented just

573
00:23:24,480 --> 00:23:28,080
today a very very simple rpi object

574
00:23:28,080 --> 00:23:30,320
which allows you to sign a poem with an

575
00:23:30,320 --> 00:23:32,240
as number

576
00:23:32,240 --> 00:23:33,440
and

577
00:23:33,440 --> 00:23:35,679
this is implemented in rpe commands with

578
00:23:35,679 --> 00:23:38,159
really just three files the first is the

579
00:23:38,159 --> 00:23:41,120
asm1 module itself which is

580
00:23:41,120 --> 00:23:44,390
in rpk immense power

581
00:23:44,390 --> 00:23:46,720
[Music]

582
00:23:46,720 --> 00:23:48,840
and looks like

583
00:23:48,840 --> 00:23:50,240
this um

584
00:23:50,240 --> 00:23:52,960
most of this is boilerplate

585
00:23:52,960 --> 00:23:55,200
the actual object itself

586
00:23:55,200 --> 00:23:57,600
follows that syntax

587
00:23:57,600 --> 00:23:58,640
a

588
00:23:58,640 --> 00:24:01,600
version that defaults to zero and as

589
00:24:01,600 --> 00:24:02,559
number

590
00:24:02,559 --> 00:24:04,720
and a poem which is

591
00:24:04,720 --> 00:24:08,080
a utf-8 string of a maximum 200

592
00:24:08,080 --> 00:24:10,960
characters in length

593
00:24:13,440 --> 00:24:16,080
and a very very small python module

594
00:24:16,080 --> 00:24:19,840
which actually implements the object

595
00:24:23,039 --> 00:24:25,760
we have to import a bunch of things

596
00:24:25,760 --> 00:24:28,080
but

597
00:24:28,480 --> 00:24:30,840
what is on screen there is the whole

598
00:24:30,840 --> 00:24:34,400
implementation um and all it's doing

599
00:24:34,400 --> 00:24:36,799
is

600
00:24:36,799 --> 00:24:38,240
telling it which

601
00:24:38,240 --> 00:24:39,600
um

602
00:24:39,600 --> 00:24:41,039
which uh

603
00:24:41,039 --> 00:24:43,440
oid to use for the

604
00:24:43,440 --> 00:24:45,039
e-content type

605
00:24:45,039 --> 00:24:47,360
what syntax

606
00:24:47,360 --> 00:24:49,840
to use for the content what the file

607
00:24:49,840 --> 00:24:51,919
extension of the resultant object should

608
00:24:51,919 --> 00:24:52,880
be

609
00:24:52,880 --> 00:24:54,320
and

610
00:24:54,320 --> 00:24:56,720
it needs properties for ip resources and

611
00:24:56,720 --> 00:24:58,880
is resources and the reason it needs

612
00:24:58,880 --> 00:25:01,919
that is because when you create

613
00:25:01,919 --> 00:25:05,679
um an instance of this poem class

614
00:25:05,679 --> 00:25:08,799
underneath here it will automatically

615
00:25:08,799 --> 00:25:10,080
um

616
00:25:10,080 --> 00:25:13,440
it will automatically generate and

617
00:25:13,440 --> 00:25:15,440
um generate an identity certificate with

618
00:25:15,440 --> 00:25:18,080
the necessary resources in it um and

619
00:25:18,080 --> 00:25:20,000
wrap the whole thing up in a

620
00:25:20,000 --> 00:25:23,120
um valid cms signed data structure

621
00:25:23,120 --> 00:25:26,000
and so really only all the the only kind

622
00:25:26,000 --> 00:25:29,039
of logic that you need to add is a

623
00:25:29,039 --> 00:25:30,400
mapping from

624
00:25:30,400 --> 00:25:32,640
a bunch of arguments which will vary

625
00:25:32,640 --> 00:25:34,720
depending on the intended use of the

626
00:25:34,720 --> 00:25:38,640
object to a simple python dictionary

627
00:25:38,640 --> 00:25:40,400
which

628
00:25:40,400 --> 00:25:43,360
kind of bears a direct resemblance to

629
00:25:43,360 --> 00:25:46,559
what's in the air someone

630
00:25:46,880 --> 00:25:49,120
and armed only with that you can

631
00:25:49,120 --> 00:25:51,600
immediately generate it because all of

632
00:25:51,600 --> 00:25:53,679
the heavy lifting is done

633
00:25:53,679 --> 00:25:55,520
in the

634
00:25:55,520 --> 00:25:58,000
um in the asm1 parser

635
00:25:58,000 --> 00:25:59,360
and

636
00:25:59,360 --> 00:26:02,399
an encoding logic

637
00:26:04,320 --> 00:26:07,360
there's then a

638
00:26:07,520 --> 00:26:09,919
plugin for the cli tool which is

639
00:26:09,919 --> 00:26:12,240
similarly simple um again there's a bit

640
00:26:12,240 --> 00:26:14,799
of boilerplate up to the top

641
00:26:14,799 --> 00:26:17,600
and a default value for the poem which i

642
00:26:17,600 --> 00:26:18,720
stole from

643
00:26:18,720 --> 00:26:22,679
the right who is

644
00:26:25,120 --> 00:26:26,080
and

645
00:26:26,080 --> 00:26:29,039
in order to implement a cli

646
00:26:29,039 --> 00:26:30,720
extension

647
00:26:30,720 --> 00:26:32,480
one just needs to

648
00:26:32,480 --> 00:26:34,799
subclass this conjugate plug-in

649
00:26:34,799 --> 00:26:36,080
class

650
00:26:36,080 --> 00:26:37,279
set up

651
00:26:37,279 --> 00:26:39,120
to find this inner paths for method

652
00:26:39,120 --> 00:26:41,200
which sets up whatever additional

653
00:26:41,200 --> 00:26:44,159
command line arguments this plugin wants

654
00:26:44,159 --> 00:26:46,559
to receive and then

655
00:26:46,559 --> 00:26:48,559
define this run method which actually

656
00:26:48,559 --> 00:26:51,279
holds the logic for interacting with the

657
00:26:51,279 --> 00:26:53,760
library to create an object

658
00:26:53,760 --> 00:26:56,640
and as you can see this really is just

659
00:26:56,640 --> 00:26:58,640
garbage in and garbage out two command

660
00:26:58,640 --> 00:27:01,279
line arguments one corresponding to the

661
00:27:01,279 --> 00:27:03,840
as number and the other to the poem and

662
00:27:03,840 --> 00:27:05,840
those get passed straight through to the

663
00:27:05,840 --> 00:27:09,279
poems object constructor

664
00:27:12,960 --> 00:27:15,919
in order to use it um first we need to

665
00:27:15,919 --> 00:27:19,120
set up a virtual environment so it's not

666
00:27:19,120 --> 00:27:20,480
you know start installing things

667
00:27:20,480 --> 00:27:21,760
globally

668
00:27:21,760 --> 00:27:24,000
so

669
00:27:25,200 --> 00:27:26,640
in fact we don't even need to do that

670
00:27:26,640 --> 00:27:30,760
because i have one ready to go

671
00:27:35,360 --> 00:27:37,918
so in

672
00:27:38,399 --> 00:27:40,799
in this virtual environment i've got a

673
00:27:40,799 --> 00:27:43,279
few things installed the only dependency

674
00:27:43,279 --> 00:27:45,440
that the plug-in

675
00:27:45,440 --> 00:27:46,880
has

676
00:27:46,880 --> 00:27:49,360
is rpk manager itself all of the rest of

677
00:27:49,360 --> 00:27:52,080
these are pulled in by rp firemancer

678
00:27:52,080 --> 00:27:53,520
and it's not a long list of of

679
00:27:53,520 --> 00:27:56,960
dependencies fortunately pi crate has no

680
00:27:56,960 --> 00:27:59,440
dependencies for the feature set that we

681
00:27:59,440 --> 00:28:01,760
that we need for this um it's all

682
00:28:01,760 --> 00:28:04,320
written in pure python which also makes

683
00:28:04,320 --> 00:28:06,000
it very slow

684
00:28:06,000 --> 00:28:08,559
and so once we're set up and ready to go

685
00:28:08,559 --> 00:28:12,320
we can issue rpg and can't

686
00:28:12,320 --> 00:28:13,440
conjure

687
00:28:13,440 --> 00:28:17,279
and you can use dash v to turn up the

688
00:28:17,279 --> 00:28:18,720
debugging

689
00:28:18,720 --> 00:28:20,559
um but we went for this because it's

690
00:28:20,559 --> 00:28:24,039
already a bit chatty

691
00:28:34,399 --> 00:28:36,320
and you'll see it prints it it will

692
00:28:36,320 --> 00:28:38,960
always print some warnings um that is

693
00:28:38,960 --> 00:28:41,200
partly because of some

694
00:28:41,200 --> 00:28:44,080
slightly weird constructs that are used

695
00:28:44,080 --> 00:28:48,000
um in the picoix sn1 modules that

696
00:28:48,000 --> 00:28:50,399
the pie crate struggles to deal with

697
00:28:50,399 --> 00:28:51,600
sanely

698
00:28:51,600 --> 00:28:53,600
and also because

699
00:28:53,600 --> 00:28:55,919
all of the it complains about having to

700
00:28:55,919 --> 00:28:57,679
remove all of the default version

701
00:28:57,679 --> 00:28:59,520
numbers that are set to zero so you'll

702
00:28:59,520 --> 00:29:01,679
see things like this repeated but those

703
00:29:01,679 --> 00:29:03,679
are all fine and that exited

704
00:29:03,679 --> 00:29:06,399
successfully and it's created

705
00:29:06,399 --> 00:29:07,760
a

706
00:29:07,760 --> 00:29:08,720
um

707
00:29:08,720 --> 00:29:11,679
a directory

708
00:29:11,760 --> 00:29:12,399
here

709
00:29:12,399 --> 00:29:13,679
which

710
00:29:13,679 --> 00:29:15,679
contains

711
00:29:15,679 --> 00:29:17,520
a very very simple

712
00:29:17,520 --> 00:29:19,279
um directory structure that you would

713
00:29:19,279 --> 00:29:21,840
expect to find on the publication point

714
00:29:21,840 --> 00:29:25,679
or in the cache of your favorite rp

715
00:29:25,679 --> 00:29:27,760
so it creates a towel

716
00:29:27,760 --> 00:29:30,640
for a trust anchor called ta.tau

717
00:29:30,640 --> 00:29:33,039
and it creates a repo for

718
00:29:33,039 --> 00:29:35,760
everything under that trust anchor

719
00:29:35,760 --> 00:29:38,559
the ta's root certificate

720
00:29:38,559 --> 00:29:40,640
its publication point which which

721
00:29:40,640 --> 00:29:44,559
contains its crl its manifest and a

722
00:29:44,559 --> 00:29:48,080
subordinate ca and then that ca is um

723
00:29:48,080 --> 00:29:50,799
publication point which contains its crl

724
00:29:50,799 --> 00:29:53,200
its manifest a rower

725
00:29:53,200 --> 00:29:56,799
a ghostbusters record and this funny rsp

726
00:29:56,799 --> 00:29:59,360
object that we just created

727
00:29:59,360 --> 00:30:02,559
so to look at for example a manifest

728
00:30:02,559 --> 00:30:05,919
you can do rpg and can't

729
00:30:05,919 --> 00:30:07,120
perceive

730
00:30:07,120 --> 00:30:09,840
targets

731
00:30:16,320 --> 00:30:18,960
manifest

732
00:30:20,320 --> 00:30:21,360
and that will

733
00:30:21,360 --> 00:30:25,279
dump the the ta's manifest this is in

734
00:30:25,279 --> 00:30:27,360
sn1

735
00:30:27,360 --> 00:30:28,240
um

736
00:30:28,240 --> 00:30:29,919
value syntax

737
00:30:29,919 --> 00:30:33,120
if we want it in json for example we can

738
00:30:33,120 --> 00:30:36,918
just do dash j

739
00:30:37,840 --> 00:30:39,440
and we'll get an equivalent thing back

740
00:30:39,440 --> 00:30:41,520
out um

741
00:30:41,520 --> 00:30:43,200
the json one doesn't

742
00:30:43,200 --> 00:30:46,640
um decode the the uh the oids and stuff

743
00:30:46,640 --> 00:30:48,080
like that for you which is inconvenient

744
00:30:48,080 --> 00:30:49,840
but it's otherwise quite useful if you

745
00:30:49,840 --> 00:30:52,080
just want to extract a particular value

746
00:30:52,080 --> 00:30:53,840
using a tool like jq or something like

747
00:30:53,840 --> 00:30:54,640
that

748
00:30:54,640 --> 00:30:57,519
um and then to have a look at our

749
00:30:57,519 --> 00:31:00,320
our new object we can just

750
00:31:00,320 --> 00:31:02,080
search for any

751
00:31:02,080 --> 00:31:03,760
rsp ones because we know there's only

752
00:31:03,760 --> 00:31:05,600
one of them and this time we can have a

753
00:31:05,600 --> 00:31:07,200
look at the whole

754
00:31:07,200 --> 00:31:08,640
um

755
00:31:08,640 --> 00:31:10,320
encapsulated

756
00:31:10,320 --> 00:31:13,279
um content structure the encapsulated

757
00:31:13,279 --> 00:31:15,200
content info

758
00:31:15,200 --> 00:31:18,200
value

759
00:31:20,559 --> 00:31:21,440
and

760
00:31:21,440 --> 00:31:23,840
you can see we've got our new content

761
00:31:23,840 --> 00:31:24,720
type

762
00:31:24,720 --> 00:31:27,519
our e-content type is a content type

763
00:31:27,519 --> 00:31:30,000
instance of type poem

764
00:31:30,000 --> 00:31:30,960
and

765
00:31:30,960 --> 00:31:33,519
um we've got our asid which just

766
00:31:33,519 --> 00:31:37,760
defaults to 65 000 and nigel's poem

767
00:31:37,760 --> 00:31:40,720
which is complaining about the uh

768
00:31:40,720 --> 00:31:44,240
the state of rpsl and right 181 which i

769
00:31:44,240 --> 00:31:47,840
thought was appropriate for this

770
00:31:48,240 --> 00:31:50,480
um

771
00:31:53,519 --> 00:31:56,320
one last thing to just point out the way

772
00:31:56,320 --> 00:31:58,840
that the plugins were

773
00:31:58,840 --> 00:32:01,279
implemented um

774
00:32:01,279 --> 00:32:04,240
as i mentioned it use uses um set up

775
00:32:04,240 --> 00:32:06,799
tools for what are called entry points

776
00:32:06,799 --> 00:32:09,360
which people if if anyone has written a

777
00:32:09,360 --> 00:32:12,159
console script in uh in python before

778
00:32:12,159 --> 00:32:14,240
they'll they'll be familiar with this um

779
00:32:14,240 --> 00:32:16,720
but essentially this this plugin simply

780
00:32:16,720 --> 00:32:19,240
declares it uses rpg

781
00:32:19,240 --> 00:32:21,440
manager.asm1.modules to declare where to

782
00:32:21,440 --> 00:32:23,760
find its asm1 module

783
00:32:23,760 --> 00:32:27,679
um it uses rpcoms dot sig object to say

784
00:32:27,679 --> 00:32:30,240
where to find any signed object types

785
00:32:30,240 --> 00:32:31,840
that it um

786
00:32:31,840 --> 00:32:35,519
implements and similarly cli.closure to

787
00:32:35,519 --> 00:32:37,919
declare any plugins that it supports

788
00:32:37,919 --> 00:32:39,760
and so it's all you know it's all run

789
00:32:39,760 --> 00:32:42,880
time discoverable and whatever you have

790
00:32:42,880 --> 00:32:44,320
installed in your environment is

791
00:32:44,320 --> 00:32:46,320
whatever the various tools will have

792
00:32:46,320 --> 00:32:49,960
available to them

793
00:33:03,039 --> 00:33:04,640
so there's a few things that i still

794
00:33:04,640 --> 00:33:06,640
have left on my list to do um and if

795
00:33:06,640 --> 00:33:08,159
anyone wants to contribute to they're

796
00:33:08,159 --> 00:33:10,640
very welcome um

797
00:33:10,640 --> 00:33:13,440
i'd like to implement bgp security

798
00:33:13,440 --> 00:33:15,600
certificates um i don't believe that

799
00:33:15,600 --> 00:33:17,120
it's going to be true i think it's going

800
00:33:17,120 --> 00:33:19,200
to be pretty trivial to do that um it's

801
00:33:19,200 --> 00:33:21,600
just a question of finding the time

802
00:33:21,600 --> 00:33:23,440
um

803
00:33:23,440 --> 00:33:24,640
at the moment

804
00:33:24,640 --> 00:33:27,120
the directory structure

805
00:33:27,120 --> 00:33:29,279
the directory structure that is

806
00:33:29,279 --> 00:33:32,640
um generated by the cli tool

807
00:33:32,640 --> 00:33:34,880
follows the

808
00:33:34,880 --> 00:33:36,720
directory structure that was used on

809
00:33:36,720 --> 00:33:39,519
disk by rpki client from a couple of

810
00:33:39,519 --> 00:33:41,600
versions back

811
00:33:41,600 --> 00:33:43,840
and what i would like to do is have a

812
00:33:43,840 --> 00:33:46,480
similar plugin architecture that allows

813
00:33:46,480 --> 00:33:48,799
you to output a directory structure

814
00:33:48,799 --> 00:33:51,760
according to what is expected by

815
00:33:51,760 --> 00:33:54,240
whatever rp you happen to be trying to

816
00:33:54,240 --> 00:33:55,679
read this stuff with

817
00:33:55,679 --> 00:33:57,200
um and that's in order to try and

818
00:33:57,200 --> 00:33:58,880
improve the the integration testing

819
00:33:58,880 --> 00:34:01,760
experience a little bit

820
00:34:02,799 --> 00:34:04,399
i'm in two minds whether this one's a

821
00:34:04,399 --> 00:34:06,799
good idea but it should be fairly easily

822
00:34:06,799 --> 00:34:08,879
possible to generate the necessary xml

823
00:34:08,879 --> 00:34:12,239
files to synthesize a rdp service

824
00:34:12,239 --> 00:34:14,239
locally

825
00:34:14,239 --> 00:34:15,918
and i'd also like to implement something

826
00:34:15,918 --> 00:34:18,639
like the diff tool for signed objects

827
00:34:18,639 --> 00:34:21,040
because you know looking at them in hex

828
00:34:21,040 --> 00:34:22,399
it's not particularly helpful on looking

829
00:34:22,399 --> 00:34:23,440
at them in text form it's not

830
00:34:23,440 --> 00:34:24,639
particularly helpful it would be quite

831
00:34:24,639 --> 00:34:26,560
nice to have a structure aware diff tool

832
00:34:26,560 --> 00:34:29,199
for these um so that you can see you

833
00:34:29,199 --> 00:34:31,440
know what changed between two instances

834
00:34:31,440 --> 00:34:35,119
of the same ca's manifest for example

835
00:34:35,119 --> 00:34:36,639
um

836
00:34:36,639 --> 00:34:38,159
and then the other thing that i'd like

837
00:34:38,159 --> 00:34:40,399
to do is is just make a template

838
00:34:40,399 --> 00:34:42,079
available to people who are implementing

839
00:34:42,079 --> 00:34:43,839
plugins so that it's easy to get up and

840
00:34:43,839 --> 00:34:46,000
running because as i say there's

841
00:34:46,000 --> 00:34:47,440
i've tried to minimize the amount of

842
00:34:47,440 --> 00:34:48,800
boilerplate but it's certainly not

843
00:34:48,800 --> 00:34:51,119
boilerplate free

844
00:34:51,119 --> 00:34:53,679
um and as i mentioned any help and

845
00:34:53,679 --> 00:34:56,639
suggestions and pr's and you know

846
00:34:56,639 --> 00:35:00,320
criticisms are welcome

847
00:35:00,720 --> 00:35:02,560
specifically i think the areas where

848
00:35:02,560 --> 00:35:05,119
people can help um that i'm not in a

849
00:35:05,119 --> 00:35:07,599
great position to to do

850
00:35:07,599 --> 00:35:09,440
um for anyone that's implementing a ca

851
00:35:09,440 --> 00:35:10,880
or an rp

852
00:35:10,880 --> 00:35:14,079
um i'd love to have some feedback about

853
00:35:14,079 --> 00:35:17,520
what a good what a convenient way of

854
00:35:17,520 --> 00:35:19,200
serving the data that this tool

855
00:35:19,200 --> 00:35:20,320
generates

856
00:35:20,320 --> 00:35:23,680
to a running a locally running rp

857
00:35:23,680 --> 00:35:27,520
um looks like is it to spin up a kind of

858
00:35:27,520 --> 00:35:31,040
a dummy rsync server or rrdp server on

859
00:35:31,040 --> 00:35:32,800
localhost

860
00:35:32,800 --> 00:35:35,680
is it to output files directly to some

861
00:35:35,680 --> 00:35:38,000
cache directory in a particular

862
00:35:38,000 --> 00:35:41,280
structure um is it all of them um you

863
00:35:41,280 --> 00:35:42,079
know

864
00:35:42,079 --> 00:35:44,240
do people want to do people have

865
00:35:44,240 --> 00:35:46,320
significantly different

866
00:35:46,320 --> 00:35:48,560
code paths that it matters whether

867
00:35:48,560 --> 00:35:50,160
something is retrieved from the network

868
00:35:50,160 --> 00:35:52,800
or just on disk when when startup

869
00:35:52,800 --> 00:35:54,480
happens um that's feedback that i'd

870
00:35:54,480 --> 00:35:56,160
really like to have

871
00:35:56,160 --> 00:35:57,680
and if the latter

872
00:35:57,680 --> 00:36:00,000
it would be great to have um

873
00:36:00,000 --> 00:36:02,560
have in particular rp implementations

874
00:36:02,560 --> 00:36:05,599
own the plugins for their own directory

875
00:36:05,599 --> 00:36:07,920
layout so that

876
00:36:07,920 --> 00:36:09,440
for two reasons firstly it's difficult

877
00:36:09,440 --> 00:36:12,800
to guess as a you know as a as a third

878
00:36:12,800 --> 00:36:14,000
party when

879
00:36:14,000 --> 00:36:16,400
or why something might change and also

880
00:36:16,400 --> 00:36:18,800
it prevents you know that having to

881
00:36:18,800 --> 00:36:21,119
become part of the public api and make

882
00:36:21,119 --> 00:36:24,160
stability get guaranteed you know if if

883
00:36:24,160 --> 00:36:26,000
rp implementers are simply shipping a

884
00:36:26,000 --> 00:36:28,000
new version of the plug-in for each new

885
00:36:28,000 --> 00:36:30,400
version of the rp then

886
00:36:30,400 --> 00:36:32,160
nobody cares about the stability of that

887
00:36:32,160 --> 00:36:33,920
layout

888
00:36:33,920 --> 00:36:35,520
and you know

889
00:36:35,520 --> 00:36:37,440
what what what does a good test harness

890
00:36:37,440 --> 00:36:41,359
for this look like more generally um

891
00:36:41,359 --> 00:36:44,079
whether on the rp side or the rpk

892
00:36:44,079 --> 00:36:46,800
manager side um what can be done to

893
00:36:46,800 --> 00:36:48,560
improve that integration testing

894
00:36:48,560 --> 00:36:50,480
experience and in particular one

895
00:36:50,480 --> 00:36:52,720
suggestion that i have is that

896
00:36:52,720 --> 00:36:54,960
none of the rpgs from what i've seen

897
00:36:54,960 --> 00:36:57,040
have particularly

898
00:36:57,040 --> 00:37:00,320
useful or machine readable logs to work

899
00:37:00,320 --> 00:37:02,640
out why something's gone wrong

900
00:37:02,640 --> 00:37:04,160
and i think that would be that would be

901
00:37:04,160 --> 00:37:07,680
a helpful area to do some work on

902
00:37:07,680 --> 00:37:09,839
for authors of internet drafts that

903
00:37:09,839 --> 00:37:11,760
define new signed objects

904
00:37:11,760 --> 00:37:15,040
write and plug it um

905
00:37:15,760 --> 00:37:17,839
i've just shown a very very simplified

906
00:37:17,839 --> 00:37:22,400
one but the checklists and aspa ones are

907
00:37:22,400 --> 00:37:23,359
maybe

908
00:37:23,359 --> 00:37:25,839
a dozen more lines of code than that

909
00:37:25,839 --> 00:37:28,640
that dummy poem one that i just i just

910
00:37:28,640 --> 00:37:29,680
showed

911
00:37:29,680 --> 00:37:30,960
um

912
00:37:30,960 --> 00:37:34,720
and in the case of checklists the

913
00:37:34,720 --> 00:37:35,680
um

914
00:37:35,680 --> 00:37:37,760
the the plugin that implements that

915
00:37:37,760 --> 00:37:40,400
signed object lives in the same

916
00:37:40,400 --> 00:37:43,520
git repo as the internet draft itself

917
00:37:43,520 --> 00:37:45,760
and that has the advantage of being able

918
00:37:45,760 --> 00:37:47,119
to keep the version of the plug-in and

919
00:37:47,119 --> 00:37:49,280
lockstep version of the draft

920
00:37:49,280 --> 00:37:51,520
and it also has the benefit of being

921
00:37:51,520 --> 00:37:54,160
able to unit test the module that gets

922
00:37:54,160 --> 00:37:57,359
shipped in the draft using the plugin um

923
00:37:57,359 --> 00:37:59,280
and so that that tight coupling works

924
00:37:59,280 --> 00:38:00,960
quite well and if you have a look at

925
00:38:00,960 --> 00:38:03,040
that git github repo you can you can

926
00:38:03,040 --> 00:38:05,440
find an example of how to set that kind

927
00:38:05,440 --> 00:38:08,320
of integration up

928
00:38:08,800 --> 00:38:10,000
that's all i've heard sorry i've been

929
00:38:10,000 --> 00:38:12,079
waffling on for so long um but if

930
00:38:12,079 --> 00:38:14,960
anybody has any questions then

931
00:38:14,960 --> 00:38:17,599
please ask either now or

932
00:38:17,599 --> 00:38:19,760
by the issues of the mailing list or

933
00:38:19,760 --> 00:38:21,839
wherever else you can find them

934
00:38:21,839 --> 00:38:24,160
thanks

935
00:38:24,160 --> 00:38:26,960
yep good

936
00:38:27,760 --> 00:38:29,920
hi

937
00:38:36,160 --> 00:38:38,079
i think this tool has been incredibly

938
00:38:38,079 --> 00:38:40,480
helpful uh and it has

939
00:38:40,480 --> 00:38:42,560
helped discover numerous bugs

940
00:38:42,560 --> 00:38:44,079
so thank you very much for putting in

941
00:38:44,079 --> 00:38:46,960
the time and effort to create this

942
00:38:46,960 --> 00:38:49,440
you're welcome

943
00:38:58,079 --> 00:39:00,400
as a separate comment i you know i think

944
00:39:00,400 --> 00:39:02,160
being able to look at the difference

945
00:39:02,160 --> 00:39:06,240
between manifests and rdp lists and or

946
00:39:06,240 --> 00:39:08,400
diff files and

947
00:39:08,400 --> 00:39:10,400
content for particular objects over time

948
00:39:10,400 --> 00:39:11,359
is

949
00:39:11,359 --> 00:39:13,440
certainly very useful so

950
00:39:13,440 --> 00:39:16,400
it will be nice to see that

951
00:39:17,599 --> 00:39:18,960
so the

952
00:39:18,960 --> 00:39:22,400
being able to do a diff between two

953
00:39:22,400 --> 00:39:26,560
um two kind of known versions of a given

954
00:39:26,560 --> 00:39:28,000
object should be fairly easy to

955
00:39:28,000 --> 00:39:30,079
implement i don't expect that to be hard

956
00:39:30,079 --> 00:39:31,680
um

957
00:39:31,680 --> 00:39:34,400
the difficulty with making that kind of

958
00:39:34,400 --> 00:39:36,400
a temporal view

959
00:39:36,400 --> 00:39:37,280
is

960
00:39:37,280 --> 00:39:40,160
how hard it is to store

961
00:39:40,160 --> 00:39:43,119
snapshots of what the rpkr looks like

962
00:39:43,119 --> 00:39:47,520
over time um for a while i had a github

963
00:39:47,520 --> 00:39:49,760
repo with a bunch of automation that

964
00:39:49,760 --> 00:39:52,640
would run an rp periodically and just

965
00:39:52,640 --> 00:39:54,000
store the cache

966
00:39:54,000 --> 00:39:54,800
um

967
00:39:54,800 --> 00:39:57,359
and kept that for for a while but that

968
00:39:57,359 --> 00:39:59,119
thing within a matter of a few months

969
00:39:59,119 --> 00:40:01,599
grew so so big that i started getting

970
00:40:01,599 --> 00:40:03,599
emails from github telling me to turn it

971
00:40:03,599 --> 00:40:05,200
off um

972
00:40:05,200 --> 00:40:08,079
so i don't think that there is

973
00:40:08,079 --> 00:40:09,839
that that's the missing piece of being

974
00:40:09,839 --> 00:40:11,520
able to do that easily and at the touch

975
00:40:11,520 --> 00:40:13,599
of a button um and i'm not sure that i

976
00:40:13,599 --> 00:40:15,200
have a good solution for that and it's

977
00:40:15,200 --> 00:40:18,078
certainly not this tool

978
00:40:21,520 --> 00:40:24,520
okay

979
00:40:26,960 --> 00:40:28,400
perhaps some thought process and uh

980
00:40:28,400 --> 00:40:30,319
meaningless conversation about how to

981
00:40:30,319 --> 00:40:32,960
keep historical track of the rpki like

982
00:40:32,960 --> 00:40:35,200
we do with bgp and a couple of different

983
00:40:35,200 --> 00:40:37,359
places would be useful

984
00:40:37,359 --> 00:40:40,079
so i i've got some ideas

985
00:40:40,079 --> 00:40:43,920
as to how one might achieve that um the

986
00:40:43,920 --> 00:40:45,040
the issue is you end up with a

987
00:40:45,040 --> 00:40:47,520
phenomenal amount of object duplication

988
00:40:47,520 --> 00:40:50,000
because of manifests and crls rolling

989
00:40:50,000 --> 00:40:53,359
over all the time um

990
00:40:53,359 --> 00:40:55,200
and

991
00:40:55,200 --> 00:40:58,400
i think that being able to track it on a

992
00:40:58,400 --> 00:41:01,599
more granular level than the file itself

993
00:41:01,599 --> 00:41:03,520
down to the entries in the data

994
00:41:03,520 --> 00:41:05,200
structure would eliminate that

995
00:41:05,200 --> 00:41:06,400
duplication

996
00:41:06,400 --> 00:41:08,000
um

997
00:41:08,000 --> 00:41:10,480
and probably give you a diff for free

998
00:41:10,480 --> 00:41:12,240
actually if you got that right but

999
00:41:12,240 --> 00:41:13,119
that's

1000
00:41:13,119 --> 00:41:15,040
that's a much that's a much bigger

1001
00:41:15,040 --> 00:41:17,599
that's a much bigger job than you know a

1002
00:41:17,599 --> 00:41:19,599
a small python library

1003
00:41:19,599 --> 00:41:21,520
like this is is going to

1004
00:41:21,520 --> 00:41:23,280
solve it so it's a bigger bigger

1005
00:41:23,280 --> 00:41:25,599
question

1006
00:41:26,960 --> 00:41:29,920
yeah sorry what i meant was um

1007
00:41:29,920 --> 00:41:32,240
oops

1008
00:41:33,599 --> 00:41:36,319
i guess job says rpgiviews.org but what

1009
00:41:36,319 --> 00:41:38,000
i was suggesting is something along the

1010
00:41:38,000 --> 00:41:39,680
lines of

1011
00:41:39,680 --> 00:41:42,000
like the route views and ris storage

1012
00:41:42,000 --> 00:41:44,880
mechanism for bgp data some

1013
00:41:44,880 --> 00:41:46,319
thing to hold

1014
00:41:46,319 --> 00:41:48,319
over time there are pki

1015
00:41:48,319 --> 00:41:51,359
system as well but

1016
00:41:53,839 --> 00:41:55,760
also yes

1017
00:41:55,760 --> 00:41:58,160
i think that's what job has built

1018
00:41:58,160 --> 00:42:01,119
basically with rpk views um

1019
00:42:01,119 --> 00:42:02,720
which is a kind of a series as i

1020
00:42:02,720 --> 00:42:05,280
understand it's a series of archives um

1021
00:42:05,280 --> 00:42:08,000
but what it doesn't tell you a lot about

1022
00:42:08,000 --> 00:42:10,960
is what the uh um

1023
00:42:10,960 --> 00:42:12,480
it tells you about the snapshots doesn't

1024
00:42:12,480 --> 00:42:14,319
tell you what happened in the middle um

1025
00:42:14,319 --> 00:42:16,319
which is unfortunate because usually

1026
00:42:16,319 --> 00:42:19,759
it's the middle where something broke

1027
00:42:21,920 --> 00:42:23,520
yep i think we

1028
00:42:23,520 --> 00:42:24,880
maybe one more question after this and

1029
00:42:24,880 --> 00:42:27,760
we could skip over to oliver

1030
00:42:27,760 --> 00:42:29,359
if we want to track what happens in the

1031
00:42:29,359 --> 00:42:31,359
middle i think we need certificate

1032
00:42:31,359 --> 00:42:33,599
transparency that's perhaps a topic for

1033
00:42:33,599 --> 00:42:37,400
the next ietf meeting

1034
00:42:44,160 --> 00:42:46,079
look forward to some slidewear

1035
00:42:46,079 --> 00:42:48,319
um

1036
00:42:48,480 --> 00:42:50,560
and discussion uh

1037
00:42:50,560 --> 00:42:52,000
i think

1038
00:42:52,000 --> 00:42:54,160
unless there's any other questions

1039
00:42:54,160 --> 00:42:56,480
uh

1040
00:42:56,560 --> 00:42:57,599
so if

1041
00:42:57,599 --> 00:42:59,760
maybe i could just respond to these

1042
00:42:59,760 --> 00:43:03,200
comments in the in the chat quickly um

1043
00:43:03,200 --> 00:43:07,280
i i i agree in general i think having

1044
00:43:07,280 --> 00:43:12,079
hooking a a test rp to this um this data

1045
00:43:12,079 --> 00:43:14,160
is probably easiest to implement if you

1046
00:43:14,160 --> 00:43:16,960
use one of the the retrieval mechanisms

1047
00:43:16,960 --> 00:43:19,040
like rrdp or rsec

1048
00:43:19,040 --> 00:43:20,400
running locally

1049
00:43:20,400 --> 00:43:21,440
the

1050
00:43:21,440 --> 00:43:23,520
problem is that because you need to

1051
00:43:23,520 --> 00:43:24,839
embed the

1052
00:43:24,839 --> 00:43:28,640
urls in the actual objects themselves

1053
00:43:28,640 --> 00:43:31,440
you end up needing to kind of spoof your

1054
00:43:31,440 --> 00:43:34,800
own machine's dns in order to do it

1055
00:43:34,800 --> 00:43:35,839
um

1056
00:43:35,839 --> 00:43:38,079
which can be done totally but it just

1057
00:43:38,079 --> 00:43:39,280
kind of feels like a little bit of an

1058
00:43:39,280 --> 00:43:40,880
overreach and it feels a bit clunky and

1059
00:43:40,880 --> 00:43:43,599
prone to breakage on you know cloud ci

1060
00:43:43,599 --> 00:43:45,680
systems which is but that's exactly the

1061
00:43:45,680 --> 00:43:49,680
feedback that i was wanting to get um

1062
00:43:49,680 --> 00:43:51,839
i suspect that being able to do both is

1063
00:43:51,839 --> 00:43:53,119
probably going to end up being the right

1064
00:43:53,119 --> 00:43:55,200
answer but the question is how and who

1065
00:43:55,200 --> 00:43:58,160
looks after that code

1066
00:44:03,599 --> 00:44:04,880
tees

1067
00:44:04,880 --> 00:44:07,280
yeah ben i agree there it's fiddly to

1068
00:44:07,280 --> 00:44:09,040
set up and it's kind of an investment

1069
00:44:09,040 --> 00:44:10,800
but once you get it going it's really

1070
00:44:10,800 --> 00:44:14,160
nice i agree that you probably need both

1071
00:44:14,160 --> 00:44:16,399
yep

1072
00:44:16,560 --> 00:44:18,880
okay thank you

1073
00:44:18,880 --> 00:44:21,680
thank you very much man that's cool

1074
00:44:21,680 --> 00:44:24,078
oliver

1075
00:44:25,839 --> 00:44:28,000
so

1076
00:44:28,400 --> 00:44:31,680
share my stream or

1077
00:44:32,319 --> 00:44:33,760
screen share starting so you should be

1078
00:44:33,760 --> 00:44:36,160
good to go

1079
00:44:36,160 --> 00:44:38,960
i rotate

1080
00:44:40,560 --> 00:44:43,119
the screen

1081
00:44:44,480 --> 00:44:46,720
now

1082
00:44:46,960 --> 00:44:51,240
i have to move this one over

1083
00:44:56,470 --> 00:44:59,500
[Music]

1084
00:45:00,960 --> 00:45:03,520
did the rabbit hole move here we go

1085
00:45:03,520 --> 00:45:06,400
okay so

1086
00:45:06,400 --> 00:45:08,079
you see the main screen or the slide

1087
00:45:08,079 --> 00:45:10,400
screen

1088
00:45:11,200 --> 00:45:13,119
the slides looks good

1089
00:45:13,119 --> 00:45:14,400
good okay

1090
00:45:14,400 --> 00:45:15,920
so

1091
00:45:15,920 --> 00:45:17,599
this year we

1092
00:45:17,599 --> 00:45:19,359
decided to

1093
00:45:19,359 --> 00:45:21,440
go a little different route than what we

1094
00:45:21,440 --> 00:45:22,960
do in the past

1095
00:45:22,960 --> 00:45:24,000
and

1096
00:45:24,000 --> 00:45:27,839
participate in the hackathon

1097
00:45:28,079 --> 00:45:30,160
and in particular what we were looking

1098
00:45:30,160 --> 00:45:32,960
into is

1099
00:45:32,960 --> 00:45:36,160
to develop tools and data sets for

1100
00:45:36,160 --> 00:45:38,400
testing the route leak mitigation

1101
00:45:38,400 --> 00:45:40,480
techniques

1102
00:45:40,480 --> 00:45:44,079
um so we the the project was relatively

1103
00:45:44,079 --> 00:45:46,240
small because we said okay let's we want

1104
00:45:46,240 --> 00:45:47,920
to have a project that you can start on

1105
00:45:47,920 --> 00:45:50,480
monday and finish on friday

1106
00:45:50,480 --> 00:45:52,560
uh in parallel to all the other work

1107
00:45:52,560 --> 00:45:54,160
what we had to do

1108
00:45:54,160 --> 00:45:55,599
and

1109
00:45:55,599 --> 00:45:56,560
so

1110
00:45:56,560 --> 00:45:58,079
what

1111
00:45:58,079 --> 00:46:02,000
what we what we what we did was or

1112
00:46:02,000 --> 00:46:04,000
so yeah

1113
00:46:04,000 --> 00:46:06,880
we as you know we have the nest bgp srx

1114
00:46:06,880 --> 00:46:08,960
software suite what we back then

1115
00:46:08,960 --> 00:46:10,480
developed for

1116
00:46:10,480 --> 00:46:14,160
first for the origin validation and then

1117
00:46:14,160 --> 00:46:15,920
later on also for the digital path

1118
00:46:15,920 --> 00:46:17,599
validation

1119
00:46:17,599 --> 00:46:19,760
and now where we are talking about the

1120
00:46:19,760 --> 00:46:22,480
asba verification we also added this

1121
00:46:22,480 --> 00:46:25,280
implementation to the software suite

1122
00:46:25,280 --> 00:46:29,040
we implemented the aspa verification 8

1123
00:46:29,040 --> 00:46:30,319
including

1124
00:46:30,319 --> 00:46:32,960
some algorithm corrections that sriram

1125
00:46:32,960 --> 00:46:36,400
presented in iit f110

1126
00:46:36,400 --> 00:46:37,520
um

1127
00:46:37,520 --> 00:46:39,860
we also implemented the

1128
00:46:39,860 --> 00:46:41,599
[Music]

1129
00:46:41,599 --> 00:46:45,200
is three very basically uh

1130
00:46:45,200 --> 00:46:46,640
yeah

1131
00:46:46,640 --> 00:46:49,119
bring all the aspf information down to

1132
00:46:49,119 --> 00:46:50,960
the router or in our case to our

1133
00:46:50,960 --> 00:46:53,200
validation enter

1134
00:46:53,200 --> 00:46:54,880
so what we wanted to do is we needed

1135
00:46:54,880 --> 00:46:56,800
some

1136
00:46:56,800 --> 00:46:59,520
scripts that allow us to generate simply

1137
00:46:59,520 --> 00:47:00,960
and easy

1138
00:47:00,960 --> 00:47:04,800
large-scale test data to

1139
00:47:05,280 --> 00:47:07,119
what can be used for interoperability

1140
00:47:07,119 --> 00:47:08,720
tests and

1141
00:47:08,720 --> 00:47:10,960
also later on maybe for some some

1142
00:47:10,960 --> 00:47:13,200
research kind of part

1143
00:47:13,200 --> 00:47:14,560
so

1144
00:47:14,560 --> 00:47:16,560
if you look at the data flow so

1145
00:47:16,560 --> 00:47:18,160
basically

1146
00:47:18,160 --> 00:47:19,599
that data flow

1147
00:47:19,599 --> 00:47:21,280
take it with a grain of salt

1148
00:47:21,280 --> 00:47:23,680
so you register your aspa object and

1149
00:47:23,680 --> 00:47:25,680
then the validation cache gets all this

1150
00:47:25,680 --> 00:47:28,240
stuff validates it and shoots it over to

1151
00:47:28,240 --> 00:47:29,760
the routers

1152
00:47:29,760 --> 00:47:32,160
and that is the area of our interest so

1153
00:47:32,160 --> 00:47:34,960
we we have the validation cache test

1154
00:47:34,960 --> 00:47:36,319
harness

1155
00:47:36,319 --> 00:47:41,280
that does not do um the 509 validation

1156
00:47:41,280 --> 00:47:44,559
and all this kind of stuff it basically

1157
00:47:44,559 --> 00:47:48,319
takes data what we

1158
00:47:48,319 --> 00:47:50,480
assume has already validated and sends

1159
00:47:50,480 --> 00:47:53,440
it over to the to the router because our

1160
00:47:53,440 --> 00:47:55,599
our part was more interesting always on

1161
00:47:55,599 --> 00:47:57,440
this side so that was like a test time

1162
00:47:57,440 --> 00:47:59,680
is what we use

1163
00:47:59,680 --> 00:48:00,640
the

1164
00:48:00,640 --> 00:48:04,640
validation cache has a fairly

1165
00:48:04,839 --> 00:48:08,160
nice plea where you can basically even

1166
00:48:08,160 --> 00:48:11,760
script experimentations with timing and

1167
00:48:11,760 --> 00:48:12,880
what have you

1168
00:48:12,880 --> 00:48:15,599
so we wanted to create input data for

1169
00:48:15,599 --> 00:48:17,200
this

1170
00:48:17,200 --> 00:48:19,040
cache test harness

1171
00:48:19,040 --> 00:48:22,559
and input data on on the right side of

1172
00:48:22,559 --> 00:48:24,640
here where we get route use update data

1173
00:48:24,640 --> 00:48:25,170
and

1174
00:48:25,170 --> 00:48:26,640
[Music]

1175
00:48:26,640 --> 00:48:30,240
then have all this stuff validated

1176
00:48:30,240 --> 00:48:33,280
um so our first task was basically to

1177
00:48:33,280 --> 00:48:36,480
create the aspa data set

1178
00:48:36,480 --> 00:48:37,680
and

1179
00:48:37,680 --> 00:48:40,559
the cache test harness take them

1180
00:48:40,559 --> 00:48:44,240
pretty much in an ascii version of the

1181
00:48:44,240 --> 00:48:47,280
8210 best three pdu

1182
00:48:47,280 --> 00:48:50,960
we used as um

1183
00:48:50,960 --> 00:48:52,880
as input data the

1184
00:48:52,880 --> 00:48:54,240
cada

1185
00:48:54,240 --> 00:48:56,480
cada data that's a very nice data set

1186
00:48:56,480 --> 00:48:58,319
where they go out and look into the

1187
00:48:58,319 --> 00:49:02,640
internet topologies and try to infer

1188
00:49:02,960 --> 00:49:04,960
peering relationships

1189
00:49:04,960 --> 00:49:05,920
and

1190
00:49:05,920 --> 00:49:09,200
then we create our test input

1191
00:49:09,200 --> 00:49:11,520
looks basically at an aspa with this

1192
00:49:11,520 --> 00:49:12,960
particular av

1193
00:49:12,960 --> 00:49:15,119
my customer is and then the whole bunch

1194
00:49:15,119 --> 00:49:17,839
of providers behind that

1195
00:49:17,839 --> 00:49:20,400
and then of course also create sample

1196
00:49:20,400 --> 00:49:25,200
bgp updates uh from router use three

1197
00:49:25,200 --> 00:49:27,599
that was the collector what we used

1198
00:49:27,599 --> 00:49:30,640
so what did we do we created

1199
00:49:30,640 --> 00:49:34,720
a script that takes the cata data and

1200
00:49:34,720 --> 00:49:36,400
formats a little bit in a different way

1201
00:49:36,400 --> 00:49:38,480
so that we can work with that

1202
00:49:38,480 --> 00:49:39,440
and

1203
00:49:39,440 --> 00:49:44,880
we created around 72 000 plus asp apdus

1204
00:49:44,880 --> 00:49:45,920
and

1205
00:49:45,920 --> 00:49:48,240
they contain around 100 a little less

1206
00:49:48,240 --> 00:49:50,319
than 150 000

1207
00:49:50,319 --> 00:49:52,559
customer provider relations

1208
00:49:52,559 --> 00:49:53,520
uh

1209
00:49:53,520 --> 00:49:55,359
last friday when we when we presented

1210
00:49:55,359 --> 00:49:56,880
that to the hackathon

1211
00:49:56,880 --> 00:49:58,800
i i had a little calculation error i

1212
00:49:58,800 --> 00:50:02,160
said we did around 180 000

1213
00:50:02,160 --> 00:50:05,200
i i over the weekend i went one more

1214
00:50:05,200 --> 00:50:06,880
time over the stuff and it's it's more

1215
00:50:06,880 --> 00:50:10,319
like 150 but you know

1216
00:50:11,520 --> 00:50:12,559
um

1217
00:50:12,559 --> 00:50:13,920
the

1218
00:50:13,920 --> 00:50:16,000
part is that you don't always want to

1219
00:50:16,000 --> 00:50:18,640
test this uh

1220
00:50:18,640 --> 00:50:20,880
this huge set of data you want to be

1221
00:50:20,880 --> 00:50:22,960
able to down select that

1222
00:50:22,960 --> 00:50:24,079
so

1223
00:50:24,079 --> 00:50:27,359
we created we created uh tools where we

1224
00:50:27,359 --> 00:50:29,280
can down select the

1225
00:50:29,280 --> 00:50:33,359
uh aspa data depending on the updates

1226
00:50:33,359 --> 00:50:35,839
uh what we what we found or what we will

1227
00:50:35,839 --> 00:50:38,559
play into the router

1228
00:50:38,559 --> 00:50:41,440
and then we created um

1229
00:50:41,440 --> 00:50:46,240
an output what we believe is um easy to

1230
00:50:46,240 --> 00:50:47,920
to be used

1231
00:50:47,920 --> 00:50:50,480
if you want to make

1232
00:50:50,480 --> 00:50:51,520
comparison between different

1233
00:50:51,520 --> 00:50:53,760
implementations they should basically

1234
00:50:53,760 --> 00:50:55,440
have the same outcome

1235
00:50:55,440 --> 00:50:56,960
um

1236
00:50:56,960 --> 00:50:59,839
so we and i showed that later so we

1237
00:50:59,839 --> 00:51:02,880
created a couple of data sets one was

1238
00:51:02,880 --> 00:51:06,640
100 updates 500 updates 800 1000 10 000

1239
00:51:06,640 --> 00:51:08,800
20 thousand you can create whatever you

1240
00:51:08,800 --> 00:51:11,440
want uh and and then the tools go out

1241
00:51:11,440 --> 00:51:13,280
through the raw data and

1242
00:51:13,280 --> 00:51:15,680
generate you a nice set of

1243
00:51:15,680 --> 00:51:17,359
um

1244
00:51:17,359 --> 00:51:20,720
the asba input and the bgp traffic that

1245
00:51:20,720 --> 00:51:23,359
that fits to that

1246
00:51:23,359 --> 00:51:25,760
so the first thing what we did was we

1247
00:51:25,760 --> 00:51:28,000
we looked at okay how do we do one do

1248
00:51:28,000 --> 00:51:30,319
the peering so we as i said before we

1249
00:51:30,319 --> 00:51:33,599
took the mrt data from route 23

1250
00:51:33,599 --> 00:51:34,800
and

1251
00:51:34,800 --> 00:51:37,839
we selected

1252
00:51:37,839 --> 00:51:39,839
the table data not the not the update

1253
00:51:39,839 --> 00:51:41,200
stream

1254
00:51:41,200 --> 00:51:44,559
um and then we said okay we

1255
00:51:44,559 --> 00:51:47,359
for our bgp secio traffic generator we

1256
00:51:47,359 --> 00:51:49,200
have a slight different format than the

1257
00:51:49,200 --> 00:51:50,800
data so what we

1258
00:51:50,800 --> 00:51:52,480
what we did is you see here on the right

1259
00:51:52,480 --> 00:51:55,520
is basically printout we have the prefix

1260
00:51:55,520 --> 00:51:57,520
then our our

1261
00:51:57,520 --> 00:51:59,599
b4 basically

1262
00:51:59,599 --> 00:52:03,040
means generate only bgp4 updates because

1263
00:52:03,040 --> 00:52:05,280
remember it was this traffic generator

1264
00:52:05,280 --> 00:52:07,280
originally was built to create bgb's

1265
00:52:07,280 --> 00:52:09,200
hack updates and we are not interested

1266
00:52:09,200 --> 00:52:11,680
in bg sec right now and

1267
00:52:11,680 --> 00:52:12,720
um

1268
00:52:12,720 --> 00:52:13,599
and

1269
00:52:13,599 --> 00:52:15,520
in the past to create bgb4 updates we

1270
00:52:15,520 --> 00:52:17,040
just didn't have any keys and had us

1271
00:52:17,040 --> 00:52:18,880
fall back bgb4

1272
00:52:18,880 --> 00:52:22,720
um but this is just resource waste so we

1273
00:52:22,720 --> 00:52:24,480
added these before that i can say okay

1274
00:52:24,480 --> 00:52:27,119
don't don't even deal with b2b sec so it

1275
00:52:27,119 --> 00:52:28,260
creates

1276
00:52:28,260 --> 00:52:29,760
[Music]

1277
00:52:29,760 --> 00:52:32,720
a bgb4 update with this route

1278
00:52:32,720 --> 00:52:35,839
we removed so and and what we did was we

1279
00:52:35,839 --> 00:52:38,880
basically created a file for each peer

1280
00:52:38,880 --> 00:52:40,400
that sent

1281
00:52:40,400 --> 00:52:43,520
their data to this particular collector

1282
00:52:43,520 --> 00:52:45,599
but then we also removed the peer out of

1283
00:52:45,599 --> 00:52:47,760
the data stream because

1284
00:52:47,760 --> 00:52:50,319
so this one here for example is a data

1285
00:52:50,319 --> 00:52:52,319
file of 701

1286
00:52:52,319 --> 00:52:54,720
so normally you saw 701 all the time in

1287
00:52:54,720 --> 00:52:56,599
front of it but we created the file

1288
00:52:56,599 --> 00:52:59,280
701.text and then these are the updates

1289
00:52:59,280 --> 00:53:01,359
and then bgp sec io

1290
00:53:01,359 --> 00:53:04,800
will take on the role of 701 and play

1291
00:53:04,800 --> 00:53:07,119
these updates and of course it puts its

1292
00:53:07,119 --> 00:53:08,640
own as in there

1293
00:53:08,640 --> 00:53:11,520
so so um

1294
00:53:11,520 --> 00:53:13,680
yeah so that's basically what we did on

1295
00:53:13,680 --> 00:53:15,040
this side

1296
00:53:15,040 --> 00:53:18,400
and uh then on the other side the cada

1297
00:53:18,400 --> 00:53:20,400
data so what we did we said okay let's

1298
00:53:20,400 --> 00:53:22,079
go through

1299
00:53:22,079 --> 00:53:23,440
um

1300
00:53:23,440 --> 00:53:25,119
through the uh

1301
00:53:25,119 --> 00:53:27,119
bgp update

1302
00:53:27,119 --> 00:53:30,559
um and

1303
00:53:30,640 --> 00:53:34,000
we we only generated aspa data kaida

1304
00:53:34,000 --> 00:53:36,559
data or no sorry we only generated the

1305
00:53:36,559 --> 00:53:38,720
aspa input data

1306
00:53:38,720 --> 00:53:42,880
for uh containing um

1307
00:53:42,880 --> 00:53:47,040
custom is what we saw in the bgp traffic

1308
00:53:47,040 --> 00:53:49,200
um of course you could say you know what

1309
00:53:49,200 --> 00:53:51,680
i don't care about this i shoot all 72

1310
00:53:51,680 --> 00:53:53,599
000 asp data to the router and

1311
00:53:53,599 --> 00:53:55,280
everything works fine that's perfectly

1312
00:53:55,280 --> 00:53:56,640
good in guessing

1313
00:53:56,640 --> 00:53:58,319
but sometimes you don't want to have

1314
00:53:58,319 --> 00:54:00,640
everything sent directly you wanna you

1315
00:54:00,640 --> 00:54:02,079
wanna you wanna

1316
00:54:02,079 --> 00:54:03,599
reduce a little bit

1317
00:54:03,599 --> 00:54:06,079
the data set what you work with

1318
00:54:06,079 --> 00:54:09,040
it might be for debugging purpose or

1319
00:54:09,040 --> 00:54:12,079
or other things

1320
00:54:12,079 --> 00:54:15,119
and then we created the

1321
00:54:15,119 --> 00:54:18,480
test traffic so as i said before

1322
00:54:18,480 --> 00:54:20,079
you you saw

1323
00:54:20,079 --> 00:54:22,400
pretty much this file but it had real

1324
00:54:22,400 --> 00:54:24,559
real prefixes and in acep we are not

1325
00:54:24,559 --> 00:54:26,400
really interested in the prefix we are

1326
00:54:26,400 --> 00:54:28,480
more interested in the past so what we

1327
00:54:28,480 --> 00:54:30,640
did was we went through the

1328
00:54:30,640 --> 00:54:33,040
if i want to say i want to have 100 000

1329
00:54:33,040 --> 00:54:34,880
or i want to have a thousand or ten

1330
00:54:34,880 --> 00:54:36,480
thousand rounds

1331
00:54:36,480 --> 00:54:38,720
uh we are interested in 10 000 unique

1332
00:54:38,720 --> 00:54:42,319
routes so we we prune the the

1333
00:54:42,319 --> 00:54:44,960
egp traffic data one more time we throw

1334
00:54:44,960 --> 00:54:47,680
away all the prefixes we

1335
00:54:47,680 --> 00:54:49,839
and then we said okay we only take the

1336
00:54:49,839 --> 00:54:51,520
unique as path

1337
00:54:51,520 --> 00:54:53,520
and then eventually because we need

1338
00:54:53,520 --> 00:54:57,119
prefixes we just um

1339
00:54:57,599 --> 00:55:01,920
we we generate some synthetic

1340
00:55:01,920 --> 00:55:05,200
prefixes they start by zero zero zero

1341
00:55:05,200 --> 00:55:10,319
0 0 1 0 24 and then just run down

1342
00:55:10,319 --> 00:55:12,799
with a counter and it could go up to 255

1343
00:55:12,799 --> 00:55:16,240
to 55 to 55

1344
00:55:17,280 --> 00:55:18,720
the

1345
00:55:18,720 --> 00:55:20,400
why are we doing that because we want to

1346
00:55:20,400 --> 00:55:22,000
make sure that

1347
00:55:22,000 --> 00:55:24,319
that we get every path in because even

1348
00:55:24,319 --> 00:55:26,400
if we don't do that we would for example

1349
00:55:26,400 --> 00:55:27,520
keep the

1350
00:55:27,520 --> 00:55:29,680
the original prefix is what we have in

1351
00:55:29,680 --> 00:55:33,200
there and we would say okay select uh

1352
00:55:33,200 --> 00:55:35,680
um

1353
00:55:35,680 --> 00:55:38,880
the first as path what you

1354
00:55:38,880 --> 00:55:43,040
of of of this lookalike

1355
00:55:43,040 --> 00:55:45,280
the chance could be that you have

1356
00:55:45,280 --> 00:55:47,599
duplicates if you don't take the table

1357
00:55:47,599 --> 00:55:49,119
dump but if you took

1358
00:55:49,119 --> 00:55:51,280
the bgp live stream

1359
00:55:51,280 --> 00:55:54,559
and because we don't want to rely on the

1360
00:55:54,559 --> 00:55:56,640
that you use the table down we said okay

1361
00:55:56,640 --> 00:55:58,640
let's let's deal with that that's easier

1362
00:55:58,640 --> 00:56:01,599
way it's it's true i know but it it does

1363
00:56:01,599 --> 00:56:03,760
the job

1364
00:56:03,760 --> 00:56:05,760
and then we uh

1365
00:56:05,760 --> 00:56:06,559
we

1366
00:56:06,559 --> 00:56:07,599
again

1367
00:56:07,599 --> 00:56:10,400
this whole thing is done automatic so

1368
00:56:10,400 --> 00:56:12,240
i always like plug and play i always

1369
00:56:12,240 --> 00:56:14,000
like you have one or two scripts and it

1370
00:56:14,000 --> 00:56:15,359
does everything in the background for

1371
00:56:15,359 --> 00:56:16,720
you because you don't want to waste your

1372
00:56:16,720 --> 00:56:19,280
time generating the data you want to

1373
00:56:19,280 --> 00:56:20,799
waste your time or you want to spend

1374
00:56:20,799 --> 00:56:21,839
your time in

1375
00:56:21,839 --> 00:56:24,640
and testing yours your software or

1376
00:56:24,640 --> 00:56:26,559
creating data for

1377
00:56:26,559 --> 00:56:27,760
analysis

1378
00:56:27,760 --> 00:56:29,280
so we have a tool that is called

1379
00:56:29,280 --> 00:56:32,240
generate data and then i give my prefix

1380
00:56:32,240 --> 00:56:34,720
in this case 701 and i say give me the

1381
00:56:34,720 --> 00:56:36,880
first 100 unique as path

1382
00:56:36,880 --> 00:56:38,559
and then it goes

1383
00:56:38,559 --> 00:56:40,720
in

1384
00:56:40,960 --> 00:56:44,400
its file based database thing or it's

1385
00:56:44,400 --> 00:56:47,040
not really database it's basically

1386
00:56:47,040 --> 00:56:48,960
a directory where you have a file that

1387
00:56:48,960 --> 00:56:51,359
calls 701.tx and then it generates out

1388
00:56:51,359 --> 00:56:52,880
of this all the things

1389
00:56:52,880 --> 00:56:56,839
and uh it creates the

1390
00:56:56,839 --> 00:56:58,400
the

1391
00:56:58,400 --> 00:57:00,720
the import file we call it dot uh the

1392
00:57:00,720 --> 00:57:04,319
extension bio that is for the bgb sec

1393
00:57:04,319 --> 00:57:07,440
io that contains the updates

1394
00:57:07,440 --> 00:57:09,920
we have one file that contains all the

1395
00:57:09,920 --> 00:57:12,400
unique asn's um

1396
00:57:12,400 --> 00:57:14,160
we could have deleted it again but we

1397
00:57:14,160 --> 00:57:16,079
kept it in there

1398
00:57:16,079 --> 00:57:18,400
just sometimes you want to know what are

1399
00:57:18,400 --> 00:57:20,960
the as is what you use you don't want to

1400
00:57:20,960 --> 00:57:23,280
have the unique number of that and then

1401
00:57:23,280 --> 00:57:25,599
we created out of the big

1402
00:57:25,599 --> 00:57:28,840
72 000 uh

1403
00:57:28,840 --> 00:57:30,559
[Music]

1404
00:57:30,559 --> 00:57:33,599
aspa data we created a

1405
00:57:33,599 --> 00:57:36,160
downsized cache file and the the files

1406
00:57:36,160 --> 00:57:38,079
are generated like the s number what i

1407
00:57:38,079 --> 00:57:40,319
use the number of updates and then it

1408
00:57:40,319 --> 00:57:42,000
tells me what it is so this is fairly

1409
00:57:42,000 --> 00:57:43,839
straightforward

1410
00:57:43,839 --> 00:57:44,799
um

1411
00:57:44,799 --> 00:57:47,520
then we started our oh yeah and then

1412
00:57:47,520 --> 00:57:49,119
from the scripts there are two ways how

1413
00:57:49,119 --> 00:57:50,720
you can start the experiment you can

1414
00:57:50,720 --> 00:57:52,960
start it from a from a console where you

1415
00:57:52,960 --> 00:57:55,680
just remote login or you can start it

1416
00:57:55,680 --> 00:57:59,040
preferably from from

1417
00:57:59,200 --> 00:58:00,799
all on linux

1418
00:58:00,799 --> 00:58:02,640
from a windows system

1419
00:58:02,640 --> 00:58:05,520
if you use the terminal only then uh

1420
00:58:05,520 --> 00:58:07,200
what it basically does it just starts

1421
00:58:07,200 --> 00:58:10,000
all the all the modules the

1422
00:58:10,000 --> 00:58:11,280
um

1423
00:58:11,280 --> 00:58:14,079
the cache test harness the srx server

1424
00:58:14,079 --> 00:58:16,559
for the validation the quagga router the

1425
00:58:16,559 --> 00:58:18,400
bgb sec io

1426
00:58:18,400 --> 00:58:20,160
and

1427
00:58:20,160 --> 00:58:21,760
runs everything in the background it

1428
00:58:21,760 --> 00:58:24,240
redirects all the output to standard io

1429
00:58:24,240 --> 00:58:27,040
and arrow into into log files

1430
00:58:27,040 --> 00:58:29,119
and um

1431
00:58:29,119 --> 00:58:30,880
and it works fine but the problem is

1432
00:58:30,880 --> 00:58:33,040
sometimes you run into issues and then

1433
00:58:33,040 --> 00:58:35,119
it's really a pain to

1434
00:58:35,119 --> 00:58:37,200
or you or you want to manipulate a

1435
00:58:37,200 --> 00:58:39,040
little bit our cash test harness has a

1436
00:58:39,040 --> 00:58:40,640
cleave where you can

1437
00:58:40,640 --> 00:58:42,400
uh add and remove

1438
00:58:42,400 --> 00:58:45,119
data on the fly and uh you cannot do

1439
00:58:45,119 --> 00:58:46,559
that when you run it there so therefore

1440
00:58:46,559 --> 00:58:48,559
we have the gnome terminal

1441
00:58:48,559 --> 00:58:50,480
that is a

1442
00:58:50,480 --> 00:58:53,359
preferred one so you start it it it

1443
00:58:53,359 --> 00:58:55,760
moves or it starts every module in its

1444
00:58:55,760 --> 00:58:56,559
own

1445
00:58:56,559 --> 00:58:57,599
tab

1446
00:58:57,599 --> 00:58:58,559
and

1447
00:58:58,559 --> 00:59:00,799
you can easily then switch between one

1448
00:59:00,799 --> 00:59:03,040
tool and the other one

1449
00:59:03,040 --> 00:59:05,040
so that looks pretty much like this so i

1450
00:59:05,040 --> 00:59:06,960
start the stuff and here i have my start

1451
00:59:06,960 --> 00:59:09,119
service i say use my

1452
00:59:09,119 --> 00:59:11,920
terminal the minus w basically means

1453
00:59:11,920 --> 00:59:14,400
uh in case one of these crashes normally

1454
00:59:14,400 --> 00:59:16,720
the the tab would immediately disappear

1455
00:59:16,720 --> 00:59:18,559
the minus w says

1456
00:59:18,559 --> 00:59:19,280
we

1457
00:59:19,280 --> 00:59:21,440
ask for a key input before the windows

1458
00:59:21,440 --> 00:59:23,680
closes so that you have a chance

1459
00:59:23,680 --> 00:59:26,400
uh to look into this window and see what

1460
00:59:26,400 --> 00:59:28,240
what happened that is especially

1461
00:59:28,240 --> 00:59:29,680
important when it comes to the traffic

1462
00:59:29,680 --> 00:59:32,240
generator because

1463
00:59:32,240 --> 00:59:36,240
sometimes uh when bg when quagga srx is

1464
00:59:36,240 --> 00:59:37,760
not uh

1465
00:59:37,760 --> 00:59:41,040
ready yet and we start this too early it

1466
00:59:41,040 --> 00:59:42,960
uh it tries a couple of times to connect

1467
00:59:42,960 --> 00:59:44,079
but if something goes wrong in the

1468
00:59:44,079 --> 00:59:45,920
connection this one just stops and then

1469
00:59:45,920 --> 00:59:47,599
you want to know what's going on and you

1470
00:59:47,599 --> 00:59:49,760
might have to do something in timing or

1471
00:59:49,760 --> 00:59:51,839
query for open ports or

1472
00:59:51,839 --> 00:59:54,400
what have you and there it's nice to see

1473
00:59:54,400 --> 00:59:56,799
okay did it actually run or did it crash

1474
00:59:56,799 --> 00:59:58,720
if something is not coming out the way

1475
00:59:58,720 --> 00:59:59,599
you want

1476
00:59:59,599 --> 01:00:00,559
um

1477
01:00:00,559 --> 01:00:04,400
again so you start that and then it

1478
01:00:04,400 --> 01:00:06,000
it automatically

1479
01:00:06,000 --> 01:00:08,000
uh configures the router so that's a

1480
01:00:08,000 --> 01:00:10,000
nice thing the uh we have we have

1481
01:00:10,000 --> 01:00:11,920
templates if i say i want to run it with

1482
01:00:11,920 --> 01:00:15,440
701 then it configures bgb secure

1483
01:00:15,440 --> 01:00:18,960
to conduct to to act a 701 it configures

1484
01:00:18,960 --> 01:00:22,079
quagga that 701 disappear and so forth

1485
01:00:22,079 --> 01:00:24,559
it starts everything we have some timing

1486
01:00:24,559 --> 01:00:26,640
in between and at the very end it asks

1487
01:00:26,640 --> 01:00:29,280
you if you if you you press r for the

1488
01:00:29,280 --> 01:00:30,480
resource

1489
01:00:30,480 --> 01:00:33,040
then what it does it it makes uh it's

1490
01:00:33,040 --> 01:00:35,359
like a 10 attack where we go into

1491
01:00:35,359 --> 01:00:36,799
quagga and

1492
01:00:36,799 --> 01:00:41,119
we make a show ipv gp and then with some

1493
01:00:41,119 --> 01:00:43,839
regex we

1494
01:00:44,000 --> 01:00:45,920
modify the output so that this one is

1495
01:00:45,920 --> 01:00:47,599
basically the output the result output

1496
01:00:47,599 --> 01:00:48,880
what you want to have the validation

1497
01:00:48,880 --> 01:00:51,440
state and the as path

1498
01:00:51,440 --> 01:00:53,839
and

1499
01:00:53,920 --> 01:00:56,079
you can also start the service pages

1500
01:00:56,079 --> 01:00:58,480
search service and then the parameter

1501
01:00:58,480 --> 01:01:00,319
i think it's called minus view table or

1502
01:01:00,319 --> 01:01:02,160
minus minus view table and then it does

1503
01:01:02,160 --> 01:01:04,400
this one for you as well you run a

1504
01:01:04,400 --> 01:01:06,319
little bit into problems there that when

1505
01:01:06,319 --> 01:01:08,880
the data set is too big that we lost the

1506
01:01:08,880 --> 01:01:10,720
connectivity between quagga and the

1507
01:01:10,720 --> 01:01:12,000
tennet session

1508
01:01:12,000 --> 01:01:13,680
uh we did some timing there but there's

1509
01:01:13,680 --> 01:01:15,119
something else going on so i don't know

1510
01:01:15,119 --> 01:01:16,640
if this one is the

1511
01:01:16,640 --> 01:01:18,720
the best way of doing it but for smaller

1512
01:01:18,720 --> 01:01:20,960
data sets it is very nice

1513
01:01:20,960 --> 01:01:22,160
uh

1514
01:01:22,160 --> 01:01:24,640
maybe it was also just my system that

1515
01:01:24,640 --> 01:01:26,240
cracked up there a little bit so we have

1516
01:01:26,240 --> 01:01:28,000
we have to look into this one going

1517
01:01:28,000 --> 01:01:30,000
forward but for the time being that's

1518
01:01:30,000 --> 01:01:32,400
that's a very good way of doing that

1519
01:01:32,400 --> 01:01:33,760
um

1520
01:01:33,760 --> 01:01:37,040
so what do you do we basically use the

1521
01:01:37,040 --> 01:01:39,839
large-scale isp in the data from cada

1522
01:01:39,839 --> 01:01:42,880
from october 1st 2020 we use the

1523
01:01:42,880 --> 01:01:45,200
october 1st 2020 data because scada

1524
01:01:45,200 --> 01:01:46,559
right now is rewriting all the

1525
01:01:46,559 --> 01:01:48,160
algorithms and that's the latest data

1526
01:01:48,160 --> 01:01:50,799
set they they provide

1527
01:01:50,799 --> 01:01:52,880
we created a subset of unique routes and

1528
01:01:52,880 --> 01:01:55,039
we take the cata data we performed the

1529
01:01:55,039 --> 01:01:57,039
asbi validation

1530
01:01:57,039 --> 01:01:58,000
and

1531
01:01:58,000 --> 01:01:59,280
um

1532
01:01:59,280 --> 01:02:02,559
we set the iot as a private is i think

1533
01:02:02,559 --> 01:02:04,880
the 65000 what we use and then we run it

1534
01:02:04,880 --> 01:02:06,799
against it

1535
01:02:06,799 --> 01:02:09,200
that versus the results but again you

1536
01:02:09,200 --> 01:02:10,720
have to take these results with a grain

1537
01:02:10,720 --> 01:02:12,319
of salt

1538
01:02:12,319 --> 01:02:13,680
because

1539
01:02:13,680 --> 01:02:16,000
one thing for example we we run it where

1540
01:02:16,000 --> 01:02:18,480
the isp is a provider that's fine then

1541
01:02:18,480 --> 01:02:20,319
the isp is a customer but i would would

1542
01:02:20,319 --> 01:02:22,720
assume that if the isp is a customer

1543
01:02:22,720 --> 01:02:24,960
it might would send me different data

1544
01:02:24,960 --> 01:02:27,359
than if it's a provider so again you

1545
01:02:27,359 --> 01:02:28,880
have to

1546
01:02:28,880 --> 01:02:31,359
you can choose other other isps but we

1547
01:02:31,359 --> 01:02:33,520
just want to show though so even even

1548
01:02:33,520 --> 01:02:36,000
though that is um

1549
01:02:36,000 --> 01:02:37,839
that i would be careful with analyzing

1550
01:02:37,839 --> 01:02:39,760
this really really

1551
01:02:39,760 --> 01:02:41,280
deep right now

1552
01:02:41,280 --> 01:02:42,960
um

1553
01:02:42,960 --> 01:02:44,799
you see if it's a provider you have most

1554
01:02:44,799 --> 01:02:47,200
of it is valid

1555
01:02:47,200 --> 01:02:47,680
uh and

1556
01:02:47,680 --> 01:02:49,440
just a small of embedded so it just

1557
01:02:49,440 --> 01:02:51,119
gives you already some some ideas and

1558
01:02:51,119 --> 01:02:52,880
then this was a relatively small data

1559
01:02:52,880 --> 01:02:53,680
set

1560
01:02:53,680 --> 01:02:55,680
uh depending what data you

1561
01:02:55,680 --> 01:02:58,559
it would be there nicer to have or or to

1562
01:02:58,559 --> 01:03:00,640
to play them the whole

1563
01:03:00,640 --> 01:03:03,760
i think the 8 000 prefixes ended up to

1564
01:03:03,760 --> 01:03:05,839
be a hundred thousand unique routes so

1565
01:03:05,839 --> 01:03:07,839
so but don't

1566
01:03:07,839 --> 01:03:09,920
don't take my word for that might be

1567
01:03:09,920 --> 01:03:11,760
that it's even a little bit more

1568
01:03:11,760 --> 01:03:13,119
um

1569
01:03:13,119 --> 01:03:16,319
so uh it makes more sense to to then

1570
01:03:16,319 --> 01:03:18,079
really um

1571
01:03:18,079 --> 01:03:19,599
look into what kind of data you want to

1572
01:03:19,599 --> 01:03:20,960
put if you want to if you want to make

1573
01:03:20,960 --> 01:03:22,559
serious uh

1574
01:03:22,559 --> 01:03:25,200
research on that and again it was this

1575
01:03:25,200 --> 01:03:26,880
data we generated in the middle of the

1576
01:03:26,880 --> 01:03:29,440
night before the hackathon presentation

1577
01:03:29,440 --> 01:03:31,839
so i was happy to have at least

1578
01:03:31,839 --> 01:03:33,599
something

1579
01:03:33,599 --> 01:03:38,079
so the code itself we will put on uh

1580
01:03:38,079 --> 01:03:41,760
on github we don't have it on right now

1581
01:03:41,760 --> 01:03:43,280
i don't know right now we will put it on

1582
01:03:43,280 --> 01:03:45,760
the hackathon github part or if we make

1583
01:03:45,760 --> 01:03:49,359
a part of the the egbsrx github

1584
01:03:49,359 --> 01:03:52,240
um once we but it doesn't matter at this

1585
01:03:52,240 --> 01:03:53,760
point because i still want to clean up a

1586
01:03:53,760 --> 01:03:55,200
little bit it's a little crude so i want

1587
01:03:55,200 --> 01:03:56,799
to have it in a way that

1588
01:03:56,799 --> 01:03:58,400
that if you're interested in looking

1589
01:03:58,400 --> 01:04:00,319
into that that you actually don't have

1590
01:04:00,319 --> 01:04:02,079
to fight for two three hours to figure

1591
01:04:02,079 --> 01:04:03,599
out how the stuff works but that you

1592
01:04:03,599 --> 01:04:05,359
have all the information needed that you

1593
01:04:05,359 --> 01:04:07,520
can do it relatively quickly

1594
01:04:07,520 --> 01:04:10,240
um and then we will send an email out to

1595
01:04:10,240 --> 01:04:12,400
the list or even have it on our

1596
01:04:12,400 --> 01:04:15,280
at least on this bgb srx

1597
01:04:15,280 --> 01:04:17,359
github page we will have a reference to

1598
01:04:17,359 --> 01:04:19,280
where the data can be found

1599
01:04:19,280 --> 01:04:20,960
or if you want to have it in the status

1600
01:04:20,960 --> 01:04:22,640
right now just drop me an email and i

1601
01:04:22,640 --> 01:04:25,599
just wrap it up and send it to

1602
01:04:25,599 --> 01:04:28,160
so there's this incentive

1603
01:04:28,160 --> 01:04:29,680
now

1604
01:04:29,680 --> 01:04:31,280
why did we do this we said it would be

1605
01:04:31,280 --> 01:04:34,799
nice again to to maybe start

1606
01:04:34,799 --> 01:04:37,599
using hackathon for these simple small

1607
01:04:37,599 --> 01:04:40,480
scale projects and maybe finding

1608
01:04:40,480 --> 01:04:43,039
others who are also interested in in

1609
01:04:43,039 --> 01:04:45,440
doing that and tackling just a simple

1610
01:04:45,440 --> 01:04:47,599
problem and trying to get the standards

1611
01:04:47,599 --> 01:04:49,520
in the seven days or the five days of

1612
01:04:49,520 --> 01:04:52,720
the of the hackathon and bring it out so

1613
01:04:52,720 --> 01:04:55,200
uh one thing is what what i'm personally

1614
01:04:55,200 --> 01:04:57,280
very interested in is taking really a

1615
01:04:57,280 --> 01:05:00,180
larger scale set and then um

1616
01:05:00,180 --> 01:05:03,039
[Music]

1617
01:05:03,039 --> 01:05:04,799
playing with gradual deployment so for

1618
01:05:04,799 --> 01:05:06,559
example our cache test times what we can

1619
01:05:06,559 --> 01:05:08,559
do we can say if i have let's say a

1620
01:05:08,559 --> 01:05:11,119
thousand aspa objects i can say play the

1621
01:05:11,119 --> 01:05:14,240
first 100 then wait five minutes play or

1622
01:05:14,240 --> 01:05:16,559
wait until i press a key and then press

1623
01:05:16,559 --> 01:05:18,720
the next 100 and so forth and with this

1624
01:05:18,720 --> 01:05:20,400
one then you could basically run and

1625
01:05:20,400 --> 01:05:22,240
always see what is the validation output

1626
01:05:22,240 --> 01:05:23,760
and see how would it look like if we

1627
01:05:23,760 --> 01:05:25,680
have gradual deployment that is one

1628
01:05:25,680 --> 01:05:27,920
thing and of course if this one is

1629
01:05:27,920 --> 01:05:30,559
automated even better because i always

1630
01:05:30,559 --> 01:05:33,760
prefer as little user input as possible

1631
01:05:33,760 --> 01:05:35,119
necessary

1632
01:05:35,119 --> 01:05:38,000
but i also want to be have the chance to

1633
01:05:38,000 --> 01:05:41,280
give my user input if i want to so um

1634
01:05:41,280 --> 01:05:44,960
then the other thing is um

1635
01:05:44,960 --> 01:05:46,400
currently we made it with one peering

1636
01:05:46,400 --> 01:05:47,599
session

1637
01:05:47,599 --> 01:05:50,559
um maybe extending the the

1638
01:05:50,559 --> 01:05:52,640
the scripts and this all shall all linux

1639
01:05:52,640 --> 01:05:55,280
telescopes extending them to allow

1640
01:05:55,280 --> 01:05:57,440
having multiple peering sessions if you

1641
01:05:57,440 --> 01:05:59,839
want to start looking into performance

1642
01:05:59,839 --> 01:06:00,880
uh

1643
01:06:00,880 --> 01:06:02,720
testing of the router then you have

1644
01:06:02,720 --> 01:06:04,640
multiple peers

1645
01:06:04,640 --> 01:06:05,599
and

1646
01:06:05,599 --> 01:06:07,839
testing scaling scaling scaling we run

1647
01:06:07,839 --> 01:06:09,520
in some issues in our implementation

1648
01:06:09,520 --> 01:06:11,440
with scaling that's why we

1649
01:06:11,440 --> 01:06:14,319
we couldn't run the full scale

1650
01:06:14,319 --> 01:06:17,280
we found one segmentation fault

1651
01:06:17,280 --> 01:06:19,359
unfortunately what we will now start

1652
01:06:19,359 --> 01:06:20,960
looking into and hopefully we have it

1653
01:06:20,960 --> 01:06:22,960
fixed within the next week or two

1654
01:06:22,960 --> 01:06:25,200
um and then we maybe can look into

1655
01:06:25,200 --> 01:06:26,720
really uh

1656
01:06:26,720 --> 01:06:27,680
uh

1657
01:06:27,680 --> 01:06:31,280
at the full table you know um we were

1658
01:06:31,280 --> 01:06:34,400
loading the 72 000 asp objects into our

1659
01:06:34,400 --> 01:06:37,280
cache test harness that worked uh was

1660
01:06:37,280 --> 01:06:39,920
very quick was very nice we fed them

1661
01:06:39,920 --> 01:06:42,559
into the srx server that went very nice

1662
01:06:42,559 --> 01:06:43,599
as well

1663
01:06:43,599 --> 01:06:45,920
um we just have to see that we manage

1664
01:06:45,920 --> 01:06:47,520
our memory correctly in every little

1665
01:06:47,520 --> 01:06:49,599
thing it might also be that my vms just

1666
01:06:49,599 --> 01:06:51,599
run out of memory i don't know i didn't

1667
01:06:51,599 --> 01:06:53,680
look into that yet i

1668
01:06:53,680 --> 01:06:55,920
at one point i said you know what

1669
01:06:55,920 --> 01:06:57,760
let's do this after idea where we have

1670
01:06:57,760 --> 01:07:00,079
more time and can really carefully look

1671
01:07:00,079 --> 01:07:02,240
into this stuff

1672
01:07:02,240 --> 01:07:04,720
um then maybe it would be really nice to

1673
01:07:04,720 --> 01:07:05,520
test this also with other

1674
01:07:05,520 --> 01:07:07,280
implementations so you can take our

1675
01:07:07,280 --> 01:07:09,760
shell scripts and instead of

1676
01:07:09,760 --> 01:07:12,160
starting the srx server and quarkxrx you

1677
01:07:12,160 --> 01:07:12,960
can

1678
01:07:12,960 --> 01:07:14,720
start your own implementation and run it

1679
01:07:14,720 --> 01:07:16,160
against that and it would be maybe nice

1680
01:07:16,160 --> 01:07:17,599
to have other

1681
01:07:17,599 --> 01:07:20,319
other reference implementation

1682
01:07:20,319 --> 01:07:23,119
implementers to partake maybe next

1683
01:07:23,119 --> 01:07:25,839
next hackathon to to

1684
01:07:25,839 --> 01:07:27,680
work a little bit on that

1685
01:07:27,680 --> 01:07:29,839
another interesting part is looking at

1686
01:07:29,839 --> 01:07:31,839
the other side of it so

1687
01:07:31,839 --> 01:07:34,079
taking the cata data and not only

1688
01:07:34,079 --> 01:07:35,760
generating the

1689
01:07:35,760 --> 01:07:39,920
the data for the pdus for the 80 to 10

1690
01:07:39,920 --> 01:07:44,400
videos but um creating the input data

1691
01:07:44,400 --> 01:07:46,400
for the validation caches so that you

1692
01:07:46,400 --> 01:07:48,960
can take your validation cache and and

1693
01:07:48,960 --> 01:07:51,440
test it and then you don't need our test

1694
01:07:51,440 --> 01:07:53,200
harness but we could run it against the

1695
01:07:53,200 --> 01:07:55,359
real validator that would be something

1696
01:07:55,359 --> 01:07:57,680
really nice too um

1697
01:07:57,680 --> 01:08:00,400
i don't know if if i can do it right now

1698
01:08:00,400 --> 01:08:02,559
because i didn't i didn't work enough on

1699
01:08:02,559 --> 01:08:04,559
this side of the of the project but

1700
01:08:04,559 --> 01:08:06,160
maybe others can join that would be

1701
01:08:06,160 --> 01:08:07,920
something really cool and i would really

1702
01:08:07,920 --> 01:08:11,200
look forward to doing stuff like that so

1703
01:08:11,200 --> 01:08:13,599
that's it for now um so if you have any

1704
01:08:13,599 --> 01:08:15,440
questions

1705
01:08:15,440 --> 01:08:17,759
speak up now or down there we have or

1706
01:08:17,759 --> 01:08:19,040
send me an email

1707
01:08:19,040 --> 01:08:20,640
if you have questions in general what we

1708
01:08:20,640 --> 01:08:24,399
do in this field um we have like a a

1709
01:08:24,399 --> 01:08:27,120
group email for us this itrg contact

1710
01:08:27,120 --> 01:08:28,719
list mr.gov

1711
01:08:28,719 --> 01:08:31,920
and just send it there and then

1712
01:08:31,920 --> 01:08:34,399
we will find the proper person who can

1713
01:08:34,399 --> 01:08:36,000
answer your question

1714
01:08:36,000 --> 01:08:39,839
and with that i think

1715
01:08:41,759 --> 01:08:44,238
i'm done

1716
01:08:44,399 --> 01:08:46,158
thank you

1717
01:08:46,158 --> 01:08:47,839
i think there's two questions for you

1718
01:08:47,839 --> 01:08:48,880
oliver

1719
01:08:48,880 --> 01:08:51,198
okay i think rudiger maybe was first and

1720
01:08:51,198 --> 01:08:53,839
then alexander

1721
01:08:56,399 --> 01:08:57,839
yes oops

1722
01:08:57,839 --> 01:08:59,600
so

1723
01:08:59,600 --> 01:09:01,679
am i being heard

1724
01:09:01,679 --> 01:09:04,080
yes yes okay

1725
01:09:04,080 --> 01:09:05,359
uh

1726
01:09:05,359 --> 01:09:10,158
well uh nice nice nice project

1727
01:09:10,158 --> 01:09:11,040
uh

1728
01:09:11,040 --> 01:09:12,399
one

1729
01:09:12,399 --> 01:09:17,439
stupid simple uh syntax question

1730
01:09:17,439 --> 01:09:18,319
uh

1731
01:09:18,319 --> 01:09:19,120
the

1732
01:09:19,120 --> 01:09:22,880
syntax that you give for the aspa

1733
01:09:22,880 --> 01:09:26,640
test data ends in an asterisk

1734
01:09:26,640 --> 01:09:30,560
you know and ends in a plus sign

1735
01:09:30,560 --> 01:09:34,158
and i guess it should be a plus

1736
01:09:34,158 --> 01:09:36,399
uh i have that

1737
01:09:36,399 --> 01:09:38,960
now it is a plus did i put an asterisk

1738
01:09:38,960 --> 01:09:41,920
and that might be a a function of

1739
01:09:41,920 --> 01:09:43,359
create your slides in the middle of a

1740
01:09:43,359 --> 01:09:46,719
night i would say no there's a plus

1741
01:09:46,719 --> 01:09:49,120
it's a provider yeah well okay yeah but

1742
01:09:49,120 --> 01:09:54,360
uh kind of uh that precludes uh empty a

1743
01:09:54,360 --> 01:09:58,719
as provider sets which i hope still are

1744
01:09:58,719 --> 01:10:01,360
in aspa oh if they are in there then

1745
01:10:01,360 --> 01:10:05,040
maybe i am again so i let let me check

1746
01:10:05,040 --> 01:10:08,239
if there if it has to be a star

1747
01:10:08,239 --> 01:10:10,239
i hope i normally our implementation

1748
01:10:10,239 --> 01:10:11,760
should do that i thought it was always a

1749
01:10:11,760 --> 01:10:12,560
plus

1750
01:10:12,560 --> 01:10:15,040
um yeah then this will be changed thank

1751
01:10:15,040 --> 01:10:17,120
you so much

1752
01:10:17,120 --> 01:10:19,519
thank you

1753
01:10:27,760 --> 01:10:29,760
so first of all thank you for the report

1754
01:10:29,760 --> 01:10:32,320
so it's good to see more

1755
01:10:32,320 --> 01:10:34,159
testing evaluation

1756
01:10:34,159 --> 01:10:35,520
around sp

1757
01:10:35,520 --> 01:10:37,440
but i have a

1758
01:10:37,440 --> 01:10:41,120
two questions the first one is about

1759
01:10:41,120 --> 01:10:43,520
your source of the data since you were

1760
01:10:43,520 --> 01:10:47,679
using cada as far as i understand

1761
01:10:47,679 --> 01:10:49,280
and as far as i remember

1762
01:10:49,280 --> 01:10:52,400
k the peering relations is based on

1763
01:10:52,400 --> 01:10:54,719
some kind of expert

1764
01:10:54,719 --> 01:10:56,239
set of

1765
01:10:56,239 --> 01:11:00,560
t1 providers and the thing is that these

1766
01:11:00,560 --> 01:11:02,400
tun providers

1767
01:11:02,400 --> 01:11:04,880
are not in the customer to provide a set

1768
01:11:04,880 --> 01:11:07,760
so you should have explicitly create

1769
01:11:07,760 --> 01:11:11,280
what is called now is p0 or mta spay

1770
01:11:11,280 --> 01:11:13,280
uh have you done it

1771
01:11:13,280 --> 01:11:14,640
because i'm very surprised with the

1772
01:11:14,640 --> 01:11:17,199
number of unknowns that are in yes

1773
01:11:17,199 --> 01:11:18,159
again

1774
01:11:18,159 --> 01:11:20,159
that's that's why i say take the data

1775
01:11:20,159 --> 01:11:22,560
with with a grain of salt um

1776
01:11:22,560 --> 01:11:25,040
we we did not really the only thing what

1777
01:11:25,040 --> 01:11:27,440
we did data data we looked basically

1778
01:11:27,440 --> 01:11:28,800
into the

1779
01:11:28,800 --> 01:11:31,280
um

1780
01:11:32,480 --> 01:11:34,560
the peering what they gave we didn't

1781
01:11:34,560 --> 01:11:37,120
really spend time into really adding

1782
01:11:37,120 --> 01:11:39,840
other things or

1783
01:11:39,840 --> 01:11:42,080
analyzing the data correctly because for

1784
01:11:42,080 --> 01:11:45,920
us the main the main issue was

1785
01:11:45,920 --> 01:11:48,239
for the testing that we wanted to go

1786
01:11:48,239 --> 01:11:49,600
scale test

1787
01:11:49,600 --> 01:11:51,760
and having some

1788
01:11:51,760 --> 01:11:53,920
data set that would make some kind of

1789
01:11:53,920 --> 01:11:55,760
sense rather than just

1790
01:11:55,760 --> 01:11:57,920
randomly generating something

1791
01:11:57,920 --> 01:11:58,880
and

1792
01:11:58,880 --> 01:12:00,560
um

1793
01:12:00,560 --> 01:12:04,480
again this data currently is not meant

1794
01:12:04,480 --> 01:12:08,480
to go out and start making real in deep

1795
01:12:08,480 --> 01:12:11,040
analysis why is it now like that or like

1796
01:12:11,040 --> 01:12:11,920
those

1797
01:12:11,920 --> 01:12:13,040
uh

1798
01:12:13,040 --> 01:12:15,360
you also have to see what kind of as you

1799
01:12:15,360 --> 01:12:16,880
you choose you know i mean here right

1800
01:12:16,880 --> 01:12:20,560
now we we chose 701 but you know i mean

1801
01:12:20,560 --> 01:12:22,880
if if the if the

1802
01:12:22,880 --> 01:12:25,199
peer is your customer

1803
01:12:25,199 --> 01:12:27,760
you would expect a slight different

1804
01:12:27,760 --> 01:12:29,840
kind of update stream what you receive

1805
01:12:29,840 --> 01:12:31,679
than if it is your provider

1806
01:12:31,679 --> 01:12:33,040
um

1807
01:12:33,040 --> 01:12:34,239
so so

1808
01:12:34,239 --> 01:12:36,239
again i

1809
01:12:36,239 --> 01:12:38,880
uh the the main part is this even though

1810
01:12:38,880 --> 01:12:41,440
if the data what is is

1811
01:12:41,440 --> 01:12:42,400
in its

1812
01:12:42,400 --> 01:12:44,000
in its uh

1813
01:12:44,000 --> 01:12:46,719
greatness or not that greatness

1814
01:12:46,719 --> 01:12:48,840
the main part is that if i have two

1815
01:12:48,840 --> 01:12:51,120
implementations that take this data as

1816
01:12:51,120 --> 01:12:53,679
input the output should be the same

1817
01:12:53,679 --> 01:12:54,560
so

1818
01:12:54,560 --> 01:12:56,320
so with this you can at least assure

1819
01:12:56,320 --> 01:12:58,320
that the validation itself the

1820
01:12:58,320 --> 01:13:00,159
validation algorithm

1821
01:13:00,159 --> 01:13:03,360
in the implementation

1822
01:13:03,360 --> 01:13:04,719
is

1823
01:13:04,719 --> 01:13:07,040
um

1824
01:13:07,840 --> 01:13:09,679
deterministic

1825
01:13:09,679 --> 01:13:14,400
okay uh i understand uh but i will just

1826
01:13:14,400 --> 01:13:16,400
highlight my point that you should check

1827
01:13:16,400 --> 01:13:18,320
how you are processing data from cada

1828
01:13:18,320 --> 01:13:20,239
because once again

1829
01:13:20,239 --> 01:13:23,199
what is called to1 providers will not be

1830
01:13:23,199 --> 01:13:26,480
in this data because they are in the

1831
01:13:26,480 --> 01:13:28,640
source of the algorithm but the data

1832
01:13:28,640 --> 01:13:31,440
shows only autonomous systems that do

1833
01:13:31,440 --> 01:13:34,880
have providers and the second uh

1834
01:13:34,880 --> 01:13:37,040
comment is about the

1835
01:13:37,040 --> 01:13:40,159
kd data itself because um

1836
01:13:40,159 --> 01:13:42,080
everybody ever knows that it is kind of

1837
01:13:42,080 --> 01:13:44,640
noisy you may have

1838
01:13:44,640 --> 01:13:47,440
both kinds of uh false positives you may

1839
01:13:47,440 --> 01:13:48,400
have

1840
01:13:48,400 --> 01:13:49,920
the uh the

1841
01:13:49,920 --> 01:13:52,640
uh systems that are named to be provide

1842
01:13:52,640 --> 01:13:54,960
providers when they are not

1843
01:13:54,960 --> 01:13:58,320
and the more important one when

1844
01:13:58,320 --> 01:14:01,679
there are missing providers and uh such

1845
01:14:01,679 --> 01:14:04,719
a situation may turn into the invaded

1846
01:14:04,719 --> 01:14:05,760
outcome

1847
01:14:05,760 --> 01:14:08,480
my suggestion is to

1848
01:14:08,480 --> 01:14:12,000
not uh using the

1849
01:14:12,000 --> 01:14:14,400
big set of outdoor system

1850
01:14:14,400 --> 01:14:16,880
relations but to use

1851
01:14:16,880 --> 01:14:20,400
top bottom approach to start with

1852
01:14:20,400 --> 01:14:21,440
simple

1853
01:14:21,440 --> 01:14:25,760
sp records for t1 providers

1854
01:14:25,760 --> 01:14:27,920
that's what we did in uh in our

1855
01:14:27,920 --> 01:14:30,320
detection system and

1856
01:14:30,320 --> 01:14:32,800
it just works there is

1857
01:14:32,800 --> 01:14:34,800
very rare noise in this uh kind of

1858
01:14:34,800 --> 01:14:36,159
system and

1859
01:14:36,159 --> 01:14:40,000
uh com combining this kind of of pro of

1860
01:14:40,000 --> 01:14:42,560
approach with uh

1861
01:14:42,560 --> 01:14:45,840
proud use what you just did i think it

1862
01:14:45,840 --> 01:14:48,719
can be very interesting research

1863
01:14:48,719 --> 01:14:50,719
yeah but anyway thank you thank you for

1864
01:14:50,719 --> 01:14:51,679
your work

1865
01:14:51,679 --> 01:14:53,199
i mean you

1866
01:14:53,199 --> 01:14:55,440
agreed you know it's always but for us

1867
01:14:55,440 --> 01:14:57,199
the main part is we wanted to have a

1868
01:14:57,199 --> 01:14:59,199
very quick way to generate large large

1869
01:14:59,199 --> 01:15:00,560
scale data sets

1870
01:15:00,560 --> 01:15:01,920
and

1871
01:15:01,920 --> 01:15:03,040
we have

1872
01:15:03,040 --> 01:15:05,679
we have handcrafted

1873
01:15:05,679 --> 01:15:09,360
um asba experimentation what what comes

1874
01:15:09,360 --> 01:15:11,120
with the software suite what we have in

1875
01:15:11,120 --> 01:15:12,640
there we have a complete experimentation

1876
01:15:12,640 --> 01:15:13,920
framework

1877
01:15:13,920 --> 01:15:15,520
um

1878
01:15:15,520 --> 01:15:17,360
and that that's all fine but

1879
01:15:17,360 --> 01:15:18,400
i mean

1880
01:15:18,400 --> 01:15:20,320
okay that was what is what is right now

1881
01:15:20,320 --> 01:15:22,480
around i know it's not the perfect set

1882
01:15:22,480 --> 01:15:24,080
but it always depends for what you want

1883
01:15:24,080 --> 01:15:24,960
to do

1884
01:15:24,960 --> 01:15:28,800
if you have other sources though that

1885
01:15:28,800 --> 01:15:31,920
uh that we can use that maybe give more

1886
01:15:31,920 --> 01:15:34,480
or a better data set even for looking

1887
01:15:34,480 --> 01:15:35,600
into

1888
01:15:35,600 --> 01:15:36,880
uh

1889
01:15:36,880 --> 01:15:39,199
into

1890
01:15:39,199 --> 01:15:42,719
working with um i'm more than willing to

1891
01:15:42,719 --> 01:15:45,520
to to use them as well uh again it's

1892
01:15:45,520 --> 01:15:46,640
it's

1893
01:15:46,640 --> 01:15:49,360
i think it's better than just having a

1894
01:15:49,360 --> 01:15:51,280
random number generator to generate

1895
01:15:51,280 --> 01:15:55,360
aspart or or customer peer relationships

1896
01:15:55,360 --> 01:15:56,719
um

1897
01:15:56,719 --> 01:15:59,360
and yeah

1898
01:16:01,520 --> 01:16:04,760
but thanks

1899
01:16:09,120 --> 01:16:13,120
uh yeah um so this is free ram

1900
01:16:13,120 --> 01:16:14,480
um

1901
01:16:14,480 --> 01:16:15,840
so

1902
01:16:15,840 --> 01:16:18,000
answering some of uh alexander's

1903
01:16:18,000 --> 01:16:19,199
questions

1904
01:16:19,199 --> 01:16:22,400
uh one of them is like small data

1905
01:16:22,400 --> 01:16:24,960
testing with us some small data

1906
01:16:24,960 --> 01:16:26,640
we do have uh

1907
01:16:26,640 --> 01:16:28,800
oliver didn't mention it i think but we

1908
01:16:28,800 --> 01:16:30,080
do have

1909
01:16:30,080 --> 01:16:31,520
um

1910
01:16:31,520 --> 01:16:34,400
like small data also which is synthetic

1911
01:16:34,400 --> 01:16:35,520
with

1912
01:16:35,520 --> 01:16:37,840
experimental as numbers

1913
01:16:37,840 --> 01:16:40,320
uh so so we can also make that available

1914
01:16:40,320 --> 01:16:42,400
in in which case you can just do a quick

1915
01:16:42,400 --> 01:16:46,320
test and see an output that is only 12

1916
01:16:46,320 --> 01:16:49,600
aspa or us 12 updates or something like

1917
01:16:49,600 --> 01:16:52,480
that with few few asps

1918
01:16:52,480 --> 01:16:54,880
and you can do a quick simple test so so

1919
01:16:54,880 --> 01:16:56,880
that's available and i think oliver can

1920
01:16:56,880 --> 01:16:59,360
make uh is planning to make

1921
01:16:59,360 --> 01:17:00,840
no no this one

1922
01:17:00,840 --> 01:17:03,920
is that is already available right yeah

1923
01:17:03,920 --> 01:17:05,440
that's part of when you go to this

1924
01:17:05,440 --> 01:17:08,159
github page oh yeah

1925
01:17:08,159 --> 01:17:10,000
and it's part of the experimentation set

1926
01:17:10,000 --> 01:17:10,880
yes

1927
01:17:10,880 --> 01:17:12,000
right okay

1928
01:17:12,000 --> 01:17:13,280
so another

1929
01:17:13,280 --> 01:17:16,880
observation that alexander made and he

1930
01:17:16,880 --> 01:17:19,520
he does have a sharp eye

1931
01:17:19,520 --> 01:17:22,159
on one of the results slides which are

1932
01:17:22,159 --> 01:17:23,920
of course like oliver said needs to be

1933
01:17:23,920 --> 01:17:26,239
taken with a grain of salt

1934
01:17:26,239 --> 01:17:27,280
but

1935
01:17:27,280 --> 01:17:30,800
alexander did observe very correctly

1936
01:17:30,800 --> 01:17:34,159
that the number of unknowns is large and

1937
01:17:34,159 --> 01:17:36,560
that indeed happened also for the reason

1938
01:17:36,560 --> 01:17:40,719
that alexander speculated or guessed

1939
01:17:40,719 --> 01:17:42,080
and that is

1940
01:17:42,080 --> 01:17:44,400
when you have tl1ass

1941
01:17:44,400 --> 01:17:46,800
we we realized it over the weekend after

1942
01:17:46,800 --> 01:17:49,679
the hackathon was completed uh we

1943
01:17:49,679 --> 01:17:52,640
realized it uh we realized that for tier

1944
01:17:52,640 --> 01:17:55,840
one ass or any ass that don't have

1945
01:17:55,840 --> 01:18:00,080
providers uh we should have an aspa

1946
01:18:00,080 --> 01:18:02,080
as0 aspa

1947
01:18:02,080 --> 01:18:04,480
uh so so that's going to be fixed it's

1948
01:18:04,480 --> 01:18:08,080
very simple to fix it uh we identify the

1949
01:18:08,080 --> 01:18:09,760
uh the um

1950
01:18:09,760 --> 01:18:11,760
the tier one

1951
01:18:11,760 --> 01:18:14,159
ra says that don't have providers and we

1952
01:18:14,159 --> 01:18:18,400
would add aspas uh that have uh asps 0

1953
01:18:18,400 --> 01:18:20,560
in them and that would fix that problem

1954
01:18:20,560 --> 01:18:21,360
and

1955
01:18:21,360 --> 01:18:23,520
alexander you will see that once we do

1956
01:18:23,520 --> 01:18:26,000
that the the unknowns will not be so

1957
01:18:26,000 --> 01:18:28,159
many they will in fact become

1958
01:18:28,159 --> 01:18:30,800
invalid invalid because something like

1959
01:18:30,800 --> 01:18:32,880
the way the experiment is being done is

1960
01:18:32,880 --> 01:18:34,800
a little bit unnatural

1961
01:18:34,800 --> 01:18:38,480
uh the 701as which is a tier one

1962
01:18:38,480 --> 01:18:41,199
in in the second set of experiments the

1963
01:18:41,199 --> 01:18:44,400
iut considers 701

1964
01:18:44,400 --> 01:18:47,679
as a customer which is unusual and

1965
01:18:47,679 --> 01:18:51,679
many uh so once we fix this

1966
01:18:51,920 --> 01:18:54,400
if it's considered as a customer many of

1967
01:18:54,400 --> 01:18:56,000
the uh

1968
01:18:56,000 --> 01:18:58,880
routes will become actually uninvalid uh

1969
01:18:58,880 --> 01:19:00,400
and so there will be a shift from

1970
01:19:00,400 --> 01:19:03,360
unknown to invalid once we fix the

1971
01:19:03,360 --> 01:19:06,159
asps to include the tier one

1972
01:19:06,159 --> 01:19:09,040
asps with as0 in them

1973
01:19:09,040 --> 01:19:12,000
and the third point uh picking up on uh

1974
01:19:12,000 --> 01:19:14,640
rudiger's comment uh there is no such

1975
01:19:14,640 --> 01:19:17,040
thing as alexander correct me if i'm

1976
01:19:17,040 --> 01:19:19,440
wrong but from the draft there is no

1977
01:19:19,440 --> 01:19:21,280
such thing as

1978
01:19:21,280 --> 01:19:26,320
empty aspa there is a zero uh aspa

1979
01:19:26,320 --> 01:19:27,040
uh

1980
01:19:27,040 --> 01:19:29,280
which which we you would create for uh

1981
01:19:29,280 --> 01:19:31,520
tier ones or pro or asses that don't

1982
01:19:31,520 --> 01:19:33,600
have providers but there is no such

1983
01:19:33,600 --> 01:19:35,520
thing as

1984
01:19:35,520 --> 01:19:38,320
empty aspa right

1985
01:19:38,320 --> 01:19:41,600
uh about your last uh point yes uh

1986
01:19:41,600 --> 01:19:43,440
you're you're correct so at the moment

1987
01:19:43,440 --> 01:19:46,960
uh the draft says that the empty should

1988
01:19:46,960 --> 01:19:50,000
be represented with asp 0 likewise it is

1989
01:19:50,000 --> 01:19:51,440
done with ross

1990
01:19:51,440 --> 01:19:53,600
the in the medical east uh there is

1991
01:19:53,600 --> 01:19:56,080
still ongoing discussion of the subject

1992
01:19:56,080 --> 01:19:58,960
we'll see how it ends up but

1993
01:19:58,960 --> 01:20:01,040
the syntax is correct in the slides so

1994
01:20:01,040 --> 01:20:03,199
and thank you for

1995
01:20:03,199 --> 01:20:04,800
giving comment

1996
01:20:04,800 --> 01:20:06,560
for my comment

1997
01:20:06,560 --> 01:20:07,840
okay

1998
01:20:07,840 --> 01:20:12,040
thank you thank you so much

1999
01:20:24,000 --> 01:20:25,679
yeah maybe one thing what i i also want

2000
01:20:25,679 --> 01:20:28,080
to say the the syntax basically is based

2001
01:20:28,080 --> 01:20:32,080
on the draft a's 82 10 bit three

2002
01:20:32,080 --> 01:20:34,480
and the pdu that gets sent over to the

2003
01:20:34,480 --> 01:20:36,880
router i think has a plus in there but

2004
01:20:36,880 --> 01:20:39,040
again i will verify that and if if i'm

2005
01:20:39,040 --> 01:20:40,719
mistaken then we will of course make the

2006
01:20:40,719 --> 01:20:42,400
modification

2007
01:20:42,400 --> 01:20:43,070
um

2008
01:20:43,070 --> 01:20:44,960
[Music]

2009
01:20:44,960 --> 01:20:46,960
or

2010
01:20:46,960 --> 01:20:49,520
maybe the ace right then then you will

2011
01:20:49,520 --> 01:20:52,760
deal with

2012
01:21:01,520 --> 01:21:03,600
okay

2013
01:21:03,600 --> 01:21:06,560
any more questions there are some

2014
01:21:06,560 --> 01:21:08,880
chat stuff about

2015
01:21:08,880 --> 01:21:10,239
why and

2016
01:21:10,239 --> 01:21:12,239
where for the data came from which

2017
01:21:12,239 --> 01:21:14,159
seemed to clarify some of alexander's

2018
01:21:14,159 --> 01:21:16,879
questions as well

2019
01:21:21,920 --> 01:21:23,040
i think

2020
01:21:23,040 --> 01:21:24,639
lacking any other people showing up at

2021
01:21:24,639 --> 01:21:26,880
the mic line

2022
01:21:26,880 --> 01:21:28,320
i think we're at the end of today's

2023
01:21:28,320 --> 01:21:29,920
agenda

2024
01:21:29,920 --> 01:21:32,000
and i would uh

2025
01:21:32,000 --> 01:21:33,120
thank

2026
01:21:33,120 --> 01:21:35,679
oliver and ben both for some actually

2027
01:21:35,679 --> 01:21:39,400
pretty cool talks

2028
01:21:48,080 --> 01:21:50,880
and i think that's it i think we can all

2029
01:21:50,880 --> 01:21:51,679
go

2030
01:21:51,679 --> 01:21:52,880
off to do what other things we're

2031
01:21:52,880 --> 01:21:54,480
supposed to do

2032
01:21:54,480 --> 01:21:57,799
thanks a bunch

