1
00:00:36,800 --> 00:00:37,840
it's

2
00:00:37,840 --> 00:00:39,920
just a little after eleven

3
00:00:39,920 --> 00:00:42,960
um i'm andy malus i'm going to be

4
00:00:42,960 --> 00:00:48,160
sharing this combined ietf 112 pals mpls

5
00:00:48,160 --> 00:00:50,640
and detonate session

6
00:00:50,640 --> 00:00:52,960
the session is being recorded as are all

7
00:00:52,960 --> 00:00:54,879
of these sessions

8
00:00:54,879 --> 00:00:56,800
as i said i'm chairing

9
00:00:56,800 --> 00:00:59,120
stuart and tariq

10
00:00:59,120 --> 00:01:00,879
are my

11
00:01:00,879 --> 00:01:02,640
co-chairs for this session as well

12
00:01:02,640 --> 00:01:05,360
although i'll be doing most of the heavy

13
00:01:05,360 --> 00:01:07,439
lifting in terms of the slides and

14
00:01:07,439 --> 00:01:10,960
and moderating the speaker cue and so on

15
00:01:10,960 --> 00:01:13,280
our working group secretary is dave cena

16
00:01:13,280 --> 00:01:15,680
crop dave thank you very much dave put

17
00:01:15,680 --> 00:01:18,400
together the agenda and dave will be

18
00:01:18,400 --> 00:01:21,040
taking the minutes for the session as

19
00:01:21,040 --> 00:01:22,320
well

20
00:01:22,320 --> 00:01:24,960
and by the way the minutes are available

21
00:01:24,960 --> 00:01:28,479
on ether pad slash hedge docs slash code

22
00:01:28,479 --> 00:01:30,400
imd whatever they're calling it these

23
00:01:30,400 --> 00:01:31,439
days

24
00:01:31,439 --> 00:01:33,280
so please

25
00:01:33,280 --> 00:01:35,759
if you'd like you can watch along and

26
00:01:35,759 --> 00:01:38,240
you can even type in to help out with

27
00:01:38,240 --> 00:01:40,960
the minute taking which will be done

28
00:01:40,960 --> 00:01:44,640
live in the ether pad slash hedge doc

29
00:01:44,640 --> 00:01:46,479
okay with that and go on to the next

30
00:01:46,479 --> 00:01:47,520
slide

31
00:01:47,520 --> 00:01:49,600
this is the note well uh this is

32
00:01:49,600 --> 00:01:51,920
something that you've all seen before

33
00:01:51,920 --> 00:01:53,920
and so i don't think we need to go into

34
00:01:53,920 --> 00:01:57,360
it in any great detail

35
00:01:58,000 --> 00:02:00,159
so the purpose for this meeting uh this

36
00:02:00,159 --> 00:02:03,280
is a joint session of pals mpls.net this

37
00:02:03,280 --> 00:02:05,360
is the third such meeting

38
00:02:05,360 --> 00:02:08,560
that we've had since ietf 111

39
00:02:08,560 --> 00:02:10,399
we're discussing basic architectural

40
00:02:10,399 --> 00:02:12,800
issues that have arisen from drastic

41
00:02:12,800 --> 00:02:15,280
proposing new applications and uses at

42
00:02:15,280 --> 00:02:18,000
the bottom of the nps label stack and

43
00:02:18,000 --> 00:02:20,560
that was the actually the initial intent

44
00:02:20,560 --> 00:02:23,200
and it's kind of groans from there and

45
00:02:23,200 --> 00:02:26,879
if you were in the mpls session um last

46
00:02:26,879 --> 00:02:29,120
period then you got to hear

47
00:02:29,120 --> 00:02:30,480
lower give

48
00:02:30,480 --> 00:02:33,440
a really good summary of uh of how we're

49
00:02:33,440 --> 00:02:35,840
coming along and and where things stand

50
00:02:35,840 --> 00:02:39,760
right now um so i highly recommend if

51
00:02:39,760 --> 00:02:42,560
you weren't in the mpls session

52
00:02:42,560 --> 00:02:44,879
previous uh the that you go to the

53
00:02:44,879 --> 00:02:47,440
meeting materials and you look in the

54
00:02:47,440 --> 00:02:50,000
mpls session and take a look at lowest

55
00:02:50,000 --> 00:02:51,280
slides

56
00:02:51,280 --> 00:02:53,200
from the last session as well

57
00:02:53,200 --> 00:02:56,480
um so a quick overview of the agenda it

58
00:02:56,480 --> 00:02:57,920
follows right here i'm actually not

59
00:02:57,920 --> 00:03:00,080
going to read it because the next slide

60
00:03:00,080 --> 00:03:03,120
is going into the agenda in in much more

61
00:03:03,120 --> 00:03:05,840
detail um the open design teamwork has

62
00:03:05,840 --> 00:03:08,319
not completed we will be continuing the

63
00:03:08,319 --> 00:03:10,879
open design team calls following this

64
00:03:10,879 --> 00:03:13,760
ietf meeting

65
00:03:13,760 --> 00:03:16,800
okay so next slide

66
00:03:16,800 --> 00:03:19,280
so this right here is the meeting agenda

67
00:03:19,280 --> 00:03:21,760
i have pre-loaded all the slides into

68
00:03:21,760 --> 00:03:25,200
meet echo so for for the speakers out

69
00:03:25,200 --> 00:03:27,680
there i will be running all the slides

70
00:03:27,680 --> 00:03:29,120
and when you want to go to the next

71
00:03:29,120 --> 00:03:30,879
slide just say next slide and i will

72
00:03:30,879 --> 00:03:32,879
switch it but i'll be doing all the

73
00:03:32,879 --> 00:03:34,879
projecting which is much easier than

74
00:03:34,879 --> 00:03:37,120
switching it to each of you individually

75
00:03:37,120 --> 00:03:40,080
so i'm doing the chairs intro right now

76
00:03:40,080 --> 00:03:42,159
next we'll be having matthew who'll be

77
00:03:42,159 --> 00:03:44,879
speaking about requirements for the mpls

78
00:03:44,879 --> 00:03:48,080
label stack indicators then we'll have

79
00:03:48,080 --> 00:03:50,080
balaz giving us an update on what's

80
00:03:50,080 --> 00:03:52,560
happening with debt net and detonates

81
00:03:52,560 --> 00:03:54,319
use for the ach

82
00:03:54,319 --> 00:03:56,720
uh then kuriti has two talks one after

83
00:03:56,720 --> 00:03:59,439
the other uh the first on the mpls first

84
00:03:59,439 --> 00:04:02,239
nibble and next on the special purpose

85
00:04:02,239 --> 00:04:04,959
label now we have 30 minutes allocated

86
00:04:04,959 --> 00:04:07,599
to kuriti's two talks and what i'm going

87
00:04:07,599 --> 00:04:09,599
to let greedy do is basically manage

88
00:04:09,599 --> 00:04:12,239
that time himself so as long as treaty

89
00:04:12,239 --> 00:04:15,120
stays within the the 30 minutes he can

90
00:04:15,120 --> 00:04:17,120
feel free to switch from one talk to the

91
00:04:17,120 --> 00:04:19,519
next talk um when he feels comfortable

92
00:04:19,519 --> 00:04:20,720
to do so

93
00:04:20,720 --> 00:04:23,040
uh then we're going to have the network

94
00:04:23,040 --> 00:04:25,680
function indicator from john drake we

95
00:04:25,680 --> 00:04:28,960
have 20 minutes of open discussion time

96
00:04:28,960 --> 00:04:31,360
allocated on the agenda so what we'd

97
00:04:31,360 --> 00:04:34,880
like to do is during the talks when

98
00:04:34,880 --> 00:04:36,400
presenters are actually presenting their

99
00:04:36,400 --> 00:04:38,880
slides if people could just

100
00:04:38,880 --> 00:04:41,759
ask questions for clarification only and

101
00:04:41,759 --> 00:04:44,560
not start to argue points or make points

102
00:04:44,560 --> 00:04:45,759
of your own

103
00:04:45,759 --> 00:04:48,240
what we'd like to do is table that kind

104
00:04:48,240 --> 00:04:48,960
of

105
00:04:48,960 --> 00:04:51,040
discussion for the

106
00:04:51,040 --> 00:04:53,280
open discussion period following the

107
00:04:53,280 --> 00:04:55,440
presentation of the slides especially

108
00:04:55,440 --> 00:04:57,040
because you may find that if you have a

109
00:04:57,040 --> 00:04:59,840
question or a comment it may it may be

110
00:04:59,840 --> 00:05:02,000
taken care of in a subsequent slide

111
00:05:02,000 --> 00:05:04,080
either from the same presenter or from a

112
00:05:04,080 --> 00:05:06,639
subsequent presenter so we'd like to ask

113
00:05:06,639 --> 00:05:08,880
that you that you keep them your major

114
00:05:08,880 --> 00:05:12,560
discussion points for um item seven on

115
00:05:12,560 --> 00:05:15,120
the agenda and finally stuart is going

116
00:05:15,120 --> 00:05:17,199
to be listening along he's going to be

117
00:05:17,199 --> 00:05:18,560
taking notes

118
00:05:18,560 --> 00:05:21,360
and then um at the end we're going to

119
00:05:21,360 --> 00:05:23,600
give stuart 10 minutes to basically

120
00:05:23,600 --> 00:05:26,320
summarize what's been going on what he's

121
00:05:26,320 --> 00:05:27,199
heard

122
00:05:27,199 --> 00:05:29,680
and what we would like to do going

123
00:05:29,680 --> 00:05:31,360
forward

124
00:05:31,360 --> 00:05:33,600
so with that

125
00:05:33,600 --> 00:05:36,080
uh first of all do we have any questions

126
00:05:36,080 --> 00:05:39,120
on on the agenda or any comments that

127
00:05:39,120 --> 00:05:40,400
people would like to make right now

128
00:05:40,400 --> 00:05:41,759
before we

129
00:05:41,759 --> 00:05:44,320
we we get started

130
00:05:44,320 --> 00:05:45,919
and i'm not seeing any hands raised so

131
00:05:45,919 --> 00:05:48,880
let me move on to my last slide

132
00:05:48,880 --> 00:05:50,720
these are the online resources for the

133
00:05:50,720 --> 00:05:53,360
meeting so that this is um

134
00:05:53,360 --> 00:05:55,520
urls you can click on for the agenda of

135
00:05:55,520 --> 00:05:56,639
course

136
00:05:56,639 --> 00:06:00,080
to get to directly to etherpad or you of

137
00:06:00,080 --> 00:06:02,479
course you can get there via the ihf

138
00:06:02,479 --> 00:06:04,800
agenda page as well

139
00:06:04,800 --> 00:06:06,880
you'll notice on the left of course in

140
00:06:06,880 --> 00:06:09,280
meet echo there's the notes

141
00:06:09,280 --> 00:06:12,319
section or or the the discussion that's

142
00:06:12,319 --> 00:06:14,160
exactly the same as the jabber room for

143
00:06:14,160 --> 00:06:17,120
pals so you can you can want to do the

144
00:06:17,120 --> 00:06:19,039
the java discussion either way either

145
00:06:19,039 --> 00:06:22,160
directly in meat echo or via your

146
00:06:22,160 --> 00:06:24,240
favorite jabber client

147
00:06:24,240 --> 00:06:28,000
um we also have an open design team wiki

148
00:06:28,000 --> 00:06:30,080
for the implants open design team group

149
00:06:30,080 --> 00:06:32,639
so i'd like to appoint you with that and

150
00:06:32,639 --> 00:06:35,120
the wiki is always there if you have any

151
00:06:35,120 --> 00:06:36,479
questions about what's going on in the

152
00:06:36,479 --> 00:06:38,960
design team you'll probably find your

153
00:06:38,960 --> 00:06:40,880
answers on the wiki so you can search

154
00:06:40,880 --> 00:06:42,639
there first

155
00:06:42,639 --> 00:06:45,919
if you have any issues with meet echo

156
00:06:45,919 --> 00:06:48,479
the meeting audio or so on

157
00:06:48,479 --> 00:06:51,680
send an email to support iatf.org and

158
00:06:51,680 --> 00:06:54,160
they will have someone help you and we

159
00:06:54,160 --> 00:06:56,160
also have a meet echo tech who's

160
00:06:56,160 --> 00:06:57,680
monitoring jabber

161
00:06:57,680 --> 00:07:00,479
for this session and for all sessions

162
00:07:00,479 --> 00:07:03,280
so with that i'm going to switch

163
00:07:03,280 --> 00:07:04,240
to

164
00:07:04,240 --> 00:07:08,560
matthew's deck so if you wait one second

165
00:07:08,880 --> 00:07:10,800
thank you

166
00:07:10,800 --> 00:07:12,160
and

167
00:07:12,160 --> 00:07:13,759
matthew take it away

168
00:07:13,759 --> 00:07:16,800
thanks andy uh hopefully you can hear me

169
00:07:16,800 --> 00:07:18,639
yes

170
00:07:18,639 --> 00:07:21,440
so this first presentation is about um

171
00:07:21,440 --> 00:07:24,080
the requirements draft um

172
00:07:24,080 --> 00:07:26,479
for mpls label stack indicators for

173
00:07:26,479 --> 00:07:28,880
ancillary data so this is

174
00:07:28,880 --> 00:07:31,280
um something that i've been editing

175
00:07:31,280 --> 00:07:33,199
along with stuart

176
00:07:33,199 --> 00:07:36,800
who's been been helping thank you

177
00:07:36,800 --> 00:07:37,599
and

178
00:07:37,599 --> 00:07:40,159
next slide

179
00:07:40,240 --> 00:07:42,240
so so this draft specifies the

180
00:07:42,240 --> 00:07:44,560
requirements for indicators

181
00:07:44,560 --> 00:07:46,479
in the mpls label stack of ancillary

182
00:07:46,479 --> 00:07:49,120
data that exists below the label stack

183
00:07:49,120 --> 00:07:52,319
and the intention is that this will be a

184
00:07:52,319 --> 00:07:55,599
product of the mpls open design team

185
00:07:55,599 --> 00:07:57,840
this is version 0 of the draft so this

186
00:07:57,840 --> 00:07:59,440
is just a

187
00:07:59,440 --> 00:08:03,039
this is the first revision of the draft

188
00:08:03,039 --> 00:08:05,039
and the intention is that it's it's

189
00:08:05,039 --> 00:08:07,039
going to describe the behavior of the

190
00:08:07,039 --> 00:08:09,520
protocol mechanisms and procedures so so

191
00:08:09,520 --> 00:08:10,720
just to be clear this is not

192
00:08:10,720 --> 00:08:13,599
implementation requirements

193
00:08:13,599 --> 00:08:14,400
um

194
00:08:14,400 --> 00:08:15,840
and we want to be able to identify the

195
00:08:15,840 --> 00:08:17,360
toolkit through these requirements and

196
00:08:17,360 --> 00:08:19,280
any new protocol work that's that's

197
00:08:19,280 --> 00:08:21,840
required

198
00:08:22,479 --> 00:08:24,720
the primary objective of this is to

199
00:08:24,720 --> 00:08:27,520
avoid piecemeal solutions um to

200
00:08:27,520 --> 00:08:30,240
different emerging applications for

201
00:08:30,240 --> 00:08:33,039
these indicators in the mpls label stack

202
00:08:33,039 --> 00:08:34,479
and we want to be able to ground the

203
00:08:34,479 --> 00:08:38,839
work um very clearly on existing mpls

204
00:08:38,839 --> 00:08:40,799
architecture

205
00:08:40,799 --> 00:08:43,439
next slide

206
00:08:44,320 --> 00:08:46,240
so we kind of started by by trying to

207
00:08:46,240 --> 00:08:49,279
define some terminology in in the draft

208
00:08:49,279 --> 00:08:50,959
and the two key things really are

209
00:08:50,959 --> 00:08:53,279
ancillary data

210
00:08:53,279 --> 00:08:56,240
what an ancillary data indicator is

211
00:08:56,240 --> 00:08:58,480
so we propose that terminology for

212
00:08:58,480 --> 00:09:00,399
ancillary data is data relating to the

213
00:09:00,399 --> 00:09:02,880
mpls packet that may be used to affect

214
00:09:02,880 --> 00:09:04,800
the forwarding or other processing of

215
00:09:04,800 --> 00:09:06,160
the packet

216
00:09:06,160 --> 00:09:09,040
and this can be done at either the

217
00:09:09,040 --> 00:09:11,360
ler or lsr

218
00:09:11,360 --> 00:09:14,080
and it may be implicit so it's implicit

219
00:09:14,080 --> 00:09:17,440
in the context of the the lsb or flow

220
00:09:17,440 --> 00:09:20,480
i've encoded within the label stack so

221
00:09:20,480 --> 00:09:22,560
it's actually explicitly encoded as in

222
00:09:22,560 --> 00:09:24,880
stack data in the label stack or it's

223
00:09:24,880 --> 00:09:26,480
after the bottom of the label stack but

224
00:09:26,480 --> 00:09:28,800
not considered part of the payload

225
00:09:28,800 --> 00:09:29,760
um

226
00:09:29,760 --> 00:09:33,440
or it's within the payload

227
00:09:33,440 --> 00:09:35,600
um and we need an ancillary data

228
00:09:35,600 --> 00:09:37,519
indicator this so this is an indicator

229
00:09:37,519 --> 00:09:39,519
in the mpls label stack that ancillary

230
00:09:39,519 --> 00:09:41,680
data exists in the packet

231
00:09:41,680 --> 00:09:44,240
um it could optionally also indicate the

232
00:09:44,240 --> 00:09:48,560
specific type of the ancillary data

233
00:09:48,880 --> 00:09:51,519
next side

234
00:09:51,600 --> 00:09:53,839
so i've i've kind of summarized some of

235
00:09:53,839 --> 00:09:54,880
the

236
00:09:54,880 --> 00:09:56,399
there's a couple of pages of high level

237
00:09:56,399 --> 00:09:58,560
requirements in in the draft as it

238
00:09:58,560 --> 00:10:00,720
stands and and i've clustered these

239
00:10:00,720 --> 00:10:02,560
together um

240
00:10:02,560 --> 00:10:05,040
on the next few slides i've only called

241
00:10:05,040 --> 00:10:07,839
out the key ones um from

242
00:10:07,839 --> 00:10:09,680
from the draft um a lot of these

243
00:10:09,680 --> 00:10:11,839
requirements were kind of gleaned from

244
00:10:11,839 --> 00:10:13,920
discussions in the open design team or

245
00:10:13,920 --> 00:10:15,120
from

246
00:10:15,120 --> 00:10:19,519
some of the uh existing uh proposals for

247
00:10:19,519 --> 00:10:20,959
for solutions

248
00:10:20,959 --> 00:10:22,240
um

249
00:10:22,240 --> 00:10:23,200
so

250
00:10:23,200 --> 00:10:24,720
so what we've tried to do is to take

251
00:10:24,720 --> 00:10:25,839
those kind of

252
00:10:25,839 --> 00:10:27,120
those sort of protocol specific

253
00:10:27,120 --> 00:10:28,560
requirements in those and generalize

254
00:10:28,560 --> 00:10:30,399
them

255
00:10:30,399 --> 00:10:32,480
so the first this first slide on the on

256
00:10:32,480 --> 00:10:34,240
the requirements is a set of

257
00:10:34,240 --> 00:10:37,519
architectural principles

258
00:10:37,680 --> 00:10:40,640
so the first one is that mpls combines

259
00:10:40,640 --> 00:10:43,040
extensibility flexibility and efficiency

260
00:10:43,040 --> 00:10:45,120
using control plane context combined

261
00:10:45,120 --> 00:10:48,959
combined with a very simple data plane

262
00:10:48,959 --> 00:10:50,800
to make forwarding decisions about the

263
00:10:50,800 --> 00:10:52,640
packet and we want to maintain those

264
00:10:52,640 --> 00:10:55,200
principles so any solution must maintain

265
00:10:55,200 --> 00:10:58,560
these properties of mpls

266
00:10:59,600 --> 00:11:02,399
any solution for um

267
00:11:02,399 --> 00:11:04,480
for this also must not restrict the

268
00:11:04,480 --> 00:11:07,120
generality of the npls architecture

269
00:11:07,120 --> 00:11:09,279
so it must be applicable across multiple

270
00:11:09,279 --> 00:11:10,320
different

271
00:11:10,320 --> 00:11:13,200
applications multiple different

272
00:11:13,200 --> 00:11:14,480
domains

273
00:11:14,480 --> 00:11:18,640
um multiple different use cases for mpls

274
00:11:19,279 --> 00:11:21,120
it must be able to coexist with and not

275
00:11:21,120 --> 00:11:24,959
obsolete existing mpls mechanisms so

276
00:11:24,959 --> 00:11:26,720
we're not we're not looking to obsolete

277
00:11:26,720 --> 00:11:28,480
the existing mpls data plane and control

278
00:11:28,480 --> 00:11:29,839
planes for example

279
00:11:29,839 --> 00:11:31,600
and it needs to work in it

280
00:11:31,600 --> 00:11:34,320
to some extent uh at least in in an

281
00:11:34,320 --> 00:11:36,560
existing network which uses existing

282
00:11:36,560 --> 00:11:39,839
control planes and data planes

283
00:11:39,920 --> 00:11:40,800
um

284
00:11:40,800 --> 00:11:42,720
ancillary data indicators should make

285
00:11:42,720 --> 00:11:44,560
use of the existing mpls data plane

286
00:11:44,560 --> 00:11:47,839
operations um we may we recognize it may

287
00:11:47,839 --> 00:11:49,839
require extensions to the mpls data

288
00:11:49,839 --> 00:11:51,680
plane but they mustn't be inconsistent

289
00:11:51,680 --> 00:11:54,480
with the mpls architecture

290
00:11:54,480 --> 00:11:58,639
that is defined in rfc 3031.

291
00:11:59,120 --> 00:12:01,760
next slide

292
00:12:01,760 --> 00:12:04,000
so now there's a set of um

293
00:12:04,000 --> 00:12:06,399
protocol capability and backwards

294
00:12:06,399 --> 00:12:09,839
compatibility requirements

295
00:12:09,839 --> 00:12:12,160
so this is really about

296
00:12:12,160 --> 00:12:14,399
you know defining the the the

297
00:12:14,399 --> 00:12:16,079
requirements for capability

298
00:12:16,079 --> 00:12:17,839
advertisements capability negotiation

299
00:12:17,839 --> 00:12:19,680
procedures um

300
00:12:19,680 --> 00:12:21,360
making sure that

301
00:12:21,360 --> 00:12:22,320
um

302
00:12:22,320 --> 00:12:25,200
bad things don't happen um for example

303
00:12:25,200 --> 00:12:27,760
um adis are not delivered to notes that

304
00:12:27,760 --> 00:12:29,519
that cannot process them and then start

305
00:12:29,519 --> 00:12:31,680
discarding data for example

306
00:12:31,680 --> 00:12:32,720
so

307
00:12:32,720 --> 00:12:34,160
so the first one is

308
00:12:34,160 --> 00:12:37,279
of these is that neither an adi

309
00:12:37,279 --> 00:12:38,880
nor these ancillary data must be

310
00:12:38,880 --> 00:12:40,480
delivered to a node that is not capable

311
00:12:40,480 --> 00:12:42,800
of processing it

312
00:12:42,800 --> 00:12:44,720
um and care needs to be taken in the

313
00:12:44,720 --> 00:12:46,880
coexistence of ancillary data and

314
00:12:46,880 --> 00:12:49,600
existing post-stack data mechanisms

315
00:12:49,600 --> 00:12:51,600
so for example things

316
00:12:51,600 --> 00:12:53,360
like the

317
00:12:53,360 --> 00:12:56,160
gach

318
00:12:56,639 --> 00:12:58,720
the mechanism is required to enable an

319
00:12:58,720 --> 00:13:01,360
ler to insert adis

320
00:13:01,360 --> 00:13:03,279
or inserting adis to determine if the

321
00:13:03,279 --> 00:13:05,200
far-right earldr can accept and process

322
00:13:05,200 --> 00:13:09,680
a packet containing a given adi

323
00:13:10,399 --> 00:13:13,279
next slide please

324
00:13:13,360 --> 00:13:15,120
so then there's uh some sort of high

325
00:13:15,120 --> 00:13:17,519
level requirements for for the protocol

326
00:13:17,519 --> 00:13:20,480
development development work um

327
00:13:20,480 --> 00:13:22,320
so any solution needs to accept the

328
00:13:22,320 --> 00:13:24,320
principle that special purpose labels

329
00:13:24,320 --> 00:13:26,639
are the mechanism of last resort

330
00:13:26,639 --> 00:13:28,560
so the the reason this is in there is

331
00:13:28,560 --> 00:13:31,120
that we have a very limited pool of free

332
00:13:31,120 --> 00:13:35,279
special purpose labels um we can use and

333
00:13:35,279 --> 00:13:37,600
ideally we're trying to avoid

334
00:13:37,600 --> 00:13:38,560
either

335
00:13:38,560 --> 00:13:41,040
allocating special purpose labels per

336
00:13:41,040 --> 00:13:42,480
application which is part of the reason

337
00:13:42,480 --> 00:13:43,920
we're doing this work

338
00:13:43,920 --> 00:13:46,399
um ideally we'd like to avoid allocating

339
00:13:46,399 --> 00:13:48,399
any special purpose labels in

340
00:13:48,399 --> 00:13:50,560
for these protocol mechanisms

341
00:13:50,560 --> 00:13:53,360
because it's such a limited bulk

342
00:13:53,360 --> 00:13:57,040
let's look at other mechanisms first

343
00:13:58,480 --> 00:14:00,639
the mechanism to indicate the ancillary

344
00:14:00,639 --> 00:14:03,040
data must is present must operate in the

345
00:14:03,040 --> 00:14:05,279
context of the top of stack

346
00:14:05,279 --> 00:14:07,199
um lse

347
00:14:07,199 --> 00:14:10,240
so the idea of this is basically in mpls

348
00:14:10,240 --> 00:14:12,399
today typically an sr will look at the

349
00:14:12,399 --> 00:14:14,079
top of stack and we make a forwarding

350
00:14:14,079 --> 00:14:16,639
decision based on the top of stack

351
00:14:16,639 --> 00:14:18,880
so we don't want to break that principle

352
00:14:18,880 --> 00:14:20,800
with with this

353
00:14:20,800 --> 00:14:23,519
with adis

354
00:14:24,160 --> 00:14:27,600
the mechanisms required to enable an adr

355
00:14:27,600 --> 00:14:29,440
inserting adis to determine whether or

356
00:14:29,440 --> 00:14:31,760
not the path can pass the label stack

357
00:14:31,760 --> 00:14:33,680
and process the adi

358
00:14:33,680 --> 00:14:37,040
at the location this is inserted so

359
00:14:37,040 --> 00:14:39,519
this is really saying um you need to

360
00:14:39,519 --> 00:14:41,760
insert if you're targeting an adi for a

361
00:14:41,760 --> 00:14:43,040
particular

362
00:14:43,040 --> 00:14:45,360
uh downstream lsr you must be sure that

363
00:14:45,360 --> 00:14:47,040
they can actually

364
00:14:47,040 --> 00:14:49,120
see parse the label stack to a

365
00:14:49,120 --> 00:14:50,720
sufficient extent to be able to read

366
00:14:50,720 --> 00:14:53,440
that adi

367
00:14:53,440 --> 00:14:54,399
um

368
00:14:54,399 --> 00:14:56,240
we need to be able to support this for

369
00:14:56,240 --> 00:14:58,639
point-to-point support to monitor paths

370
00:14:58,639 --> 00:14:59,839
um

371
00:14:59,839 --> 00:15:02,079
but we only expect what a specific adi

372
00:15:02,079 --> 00:15:05,600
to be supported for one or the other

373
00:15:05,600 --> 00:15:06,639
um

374
00:15:06,639 --> 00:15:08,800
data plane mechanisms for adis must be

375
00:15:08,800 --> 00:15:10,639
independent of the control plane type so

376
00:15:10,639 --> 00:15:13,040
it should work you know with ldp rsvp

377
00:15:13,040 --> 00:15:15,760
bgp static labels

378
00:15:15,760 --> 00:15:18,720
igp advertised labels and so on

379
00:15:18,720 --> 00:15:20,079
so basically anywhere where you can use

380
00:15:20,079 --> 00:15:24,079
the mpls data plane today

381
00:15:25,519 --> 00:15:27,519
a um must be defined for the control

382
00:15:27,519 --> 00:15:29,839
planes to be able to determine the

383
00:15:29,839 --> 00:15:32,000
the ability of downstream lsrs and odrs

384
00:15:32,000 --> 00:15:36,399
to accept and process uh given adi

385
00:15:36,399 --> 00:15:38,000
and it should be possible to include

386
00:15:38,000 --> 00:15:40,079
indicators for ancillary data for

387
00:15:40,079 --> 00:15:42,079
multiple applications in the same label

388
00:15:42,079 --> 00:15:44,160
stack but each adi only supports one

389
00:15:44,160 --> 00:15:46,719
application

390
00:15:47,279 --> 00:15:49,600
next slide

391
00:15:49,600 --> 00:15:51,759
okay and we started to write down some

392
00:15:51,759 --> 00:15:54,560
security requirements as well um i'm not

393
00:15:54,560 --> 00:15:56,800
a security expert but uh

394
00:15:56,800 --> 00:15:58,160
i've seen some of this work going on in

395
00:15:58,160 --> 00:16:00,800
other working groups related to

396
00:16:00,800 --> 00:16:03,360
what you can expose within a

397
00:16:03,360 --> 00:16:05,199
an outer or underlay

398
00:16:05,199 --> 00:16:07,519
protocol header depend you know based on

399
00:16:07,519 --> 00:16:09,279
on what it's carrying

400
00:16:09,279 --> 00:16:11,199
um so there's a couple of requirements

401
00:16:11,199 --> 00:16:14,240
in in in this draft as it stands um so

402
00:16:14,240 --> 00:16:16,480
the first is a solution must be provided

403
00:16:16,480 --> 00:16:18,560
to verify the authenticity of ancillary

404
00:16:18,560 --> 00:16:19,759
data

405
00:16:19,759 --> 00:16:23,120
processed in the lsrs and the design of

406
00:16:23,120 --> 00:16:25,279
the adis and the ancillary data must not

407
00:16:25,279 --> 00:16:27,680
expose confidential information to the

408
00:16:27,680 --> 00:16:30,480
lsrs and this is in there because

409
00:16:30,480 --> 00:16:32,480
there may be confidential information in

410
00:16:32,480 --> 00:16:34,480
the payload that potentially could be

411
00:16:34,480 --> 00:16:36,959
used to generate an adi

412
00:16:36,959 --> 00:16:38,720
but obviously you don't want to expose

413
00:16:38,720 --> 00:16:40,000
anything that's actually confidential

414
00:16:40,000 --> 00:16:42,000
about that information in the underlying

415
00:16:42,000 --> 00:16:45,120
to the underlay network

416
00:16:45,199 --> 00:16:47,360
next slide

417
00:16:47,360 --> 00:16:49,600
thank you so the next steps um to clean

418
00:16:49,600 --> 00:16:51,279
up any any duplicate requirements in the

419
00:16:51,279 --> 00:16:53,040
draft we'd like to continue to gather

420
00:16:53,040 --> 00:16:55,040
requirements from emerging applications

421
00:16:55,040 --> 00:16:56,000
um

422
00:16:56,000 --> 00:16:57,759
and also there will be some some kind of

423
00:16:57,759 --> 00:16:59,759
companion architecture and framework uh

424
00:16:59,759 --> 00:17:01,759
document i think that'll exist that will

425
00:17:01,759 --> 00:17:03,040
hopefully help to drive some of the

426
00:17:03,040 --> 00:17:05,599
requirements

427
00:17:05,599 --> 00:17:07,439
and we would really appreciate some

428
00:17:07,439 --> 00:17:09,679
review and feedback

429
00:17:09,679 --> 00:17:12,880
on the on the list

430
00:17:12,880 --> 00:17:17,959
and into the open design team thank you

431
00:17:18,240 --> 00:17:20,319
thank you matthew

432
00:17:20,319 --> 00:17:22,880
and i see the tweety has his hand up

433
00:17:22,880 --> 00:17:25,199
really

434
00:17:28,000 --> 00:17:29,440
hear me right

435
00:17:29,440 --> 00:17:32,400
yes i can hear now

436
00:17:32,400 --> 00:17:33,360
okay

437
00:17:33,360 --> 00:17:35,280
there were a couple of

438
00:17:35,280 --> 00:17:38,480
comments i had on previous slides

439
00:17:38,480 --> 00:17:41,919
one that we should use the

440
00:17:41,919 --> 00:17:45,200
special purpose labels as a last resort

441
00:17:45,200 --> 00:17:48,000
i think that one um first of all we've

442
00:17:48,000 --> 00:17:50,320
been using special purpose labels for

443
00:17:50,320 --> 00:17:54,080
other things um but um especially and i

444
00:17:54,080 --> 00:17:56,480
know that there's a specific solution

445
00:17:56,480 --> 00:17:58,240
but the fai

446
00:17:58,240 --> 00:18:01,039
approach essentially lets you use

447
00:18:01,039 --> 00:18:03,120
one special purpose label for lots of

448
00:18:03,120 --> 00:18:04,000
things

449
00:18:04,000 --> 00:18:07,919
so i think that that sort of um

450
00:18:07,919 --> 00:18:11,200
persimmony of special purpose labels can

451
00:18:11,200 --> 00:18:13,120
perhaps be uh

452
00:18:13,120 --> 00:18:15,840
you know pull back a little bit if you

453
00:18:15,840 --> 00:18:18,000
say that when you do the special purpose

454
00:18:18,000 --> 00:18:20,640
labels you try to do multiple things

455
00:18:20,640 --> 00:18:23,440
with a single special purpose label so i

456
00:18:23,440 --> 00:18:25,200
think that ability

457
00:18:25,200 --> 00:18:27,280
for a special purpose level to carry

458
00:18:27,280 --> 00:18:29,200
many more

459
00:18:29,200 --> 00:18:31,919
functions and many types of adi if you

460
00:18:31,919 --> 00:18:35,440
were doing one adi per spatial purpose

461
00:18:35,440 --> 00:18:38,240
label yes i'm totally with you but given

462
00:18:38,240 --> 00:18:40,320
a new mechanism where a single special

463
00:18:40,320 --> 00:18:42,240
purpose label can be used in a

464
00:18:42,240 --> 00:18:44,000
multi-purpose fashion

465
00:18:44,000 --> 00:18:45,919
i think that requirement and you know

466
00:18:45,919 --> 00:18:48,880
especially that term last resort

467
00:18:48,880 --> 00:18:50,799
i think is something that we should

468
00:18:50,799 --> 00:18:52,400
rethink

469
00:18:52,400 --> 00:18:55,760
so maybe you can soften that by saying

470
00:18:55,760 --> 00:18:57,919
if you're trying to do

471
00:18:57,919 --> 00:19:00,640
one special purpose label per type of

472
00:19:00,640 --> 00:19:02,240
adi

473
00:19:02,240 --> 00:19:04,000
then it absolutely should be a last

474
00:19:04,000 --> 00:19:06,400
resort but if you can carry multiple

475
00:19:06,400 --> 00:19:08,400
types of adi with a single special

476
00:19:08,400 --> 00:19:11,200
purpose label then that becomes a valid

477
00:19:11,200 --> 00:19:13,440
solution

478
00:19:13,440 --> 00:19:15,360
does that make sense

479
00:19:15,360 --> 00:19:17,120
yeah i think that's that makes sense

480
00:19:17,120 --> 00:19:18,240
because of course what we're trying to

481
00:19:18,240 --> 00:19:19,679
do here is to

482
00:19:19,679 --> 00:19:21,600
provide a framework or a set of a

483
00:19:21,600 --> 00:19:24,400
mechanism that will work for many future

484
00:19:24,400 --> 00:19:27,120
future applications for for adis rather

485
00:19:27,120 --> 00:19:30,320
so if presumably if we we can have one

486
00:19:30,320 --> 00:19:32,720
one special purpose label

487
00:19:32,720 --> 00:19:34,080
we're not going to be we're not being

488
00:19:34,080 --> 00:19:35,600
replicating multiple different specials

489
00:19:35,600 --> 00:19:38,880
for special purpose locals

490
00:19:38,880 --> 00:19:41,280
yeah yeah and and could you go back to

491
00:19:41,280 --> 00:19:43,360
that slide and the slide before it

492
00:19:43,360 --> 00:19:45,120
because i had a comment on the previous

493
00:19:45,120 --> 00:19:49,600
slide too but um i have to

494
00:19:50,400 --> 00:19:53,760
uh let's see

495
00:19:53,760 --> 00:19:55,520
that slide there

496
00:19:55,520 --> 00:19:57,840
um

497
00:19:59,360 --> 00:20:00,880
no

498
00:20:00,880 --> 00:20:05,159
just know about that one

499
00:20:07,440 --> 00:20:09,760
um

500
00:20:12,000 --> 00:20:15,039
no it's not this one okay uh maybe i'll

501
00:20:15,039 --> 00:20:16,799
look over this

502
00:20:16,799 --> 00:20:18,320
oh yeah this one this one yeah thank you

503
00:20:18,320 --> 00:20:20,240
thank you okay

504
00:20:20,240 --> 00:20:22,960
so neither an adi nor ancillary data

505
00:20:22,960 --> 00:20:24,960
must be delivered to a node that's not

506
00:20:24,960 --> 00:20:27,360
capable of processing it

507
00:20:27,360 --> 00:20:30,960
when we did uh elis we said hey you know

508
00:20:30,960 --> 00:20:34,000
we will ship this if someone can handle

509
00:20:34,000 --> 00:20:36,000
it great they can do a much better job

510
00:20:36,000 --> 00:20:38,880
of load balancing if they can't okay

511
00:20:38,880 --> 00:20:41,039
there's no harm no foul

512
00:20:41,039 --> 00:20:42,960
um and i think we have to be careful

513
00:20:42,960 --> 00:20:46,640
that if we classify adis into

514
00:20:46,640 --> 00:20:49,600
if you see this you must process it and

515
00:20:49,600 --> 00:20:52,559
if you can't process drop the packet

516
00:20:52,559 --> 00:20:53,840
um

517
00:20:53,840 --> 00:20:56,080
then i would i would go with this

518
00:20:56,080 --> 00:20:58,400
particular thing that ideally you don't

519
00:20:58,400 --> 00:21:00,960
even deliver it to a node if you know

520
00:21:00,960 --> 00:21:02,960
that it can't process it

521
00:21:02,960 --> 00:21:05,840
well the next one

522
00:21:05,840 --> 00:21:08,559
sorry sorry sorry let me just finish um

523
00:21:08,559 --> 00:21:10,159
but if it was like this is an

524
00:21:10,159 --> 00:21:12,400
optimization if you can process it and

525
00:21:12,400 --> 00:21:14,559
you know do better with the packet go

526
00:21:14,559 --> 00:21:17,360
for it if you can't process it ah no big

527
00:21:17,360 --> 00:21:18,240
deal

528
00:21:18,240 --> 00:21:20,880
and and so that distinction for example

529
00:21:20,880 --> 00:21:23,280
let's say that a slice identifier is

530
00:21:23,280 --> 00:21:24,799
really important you want that

531
00:21:24,799 --> 00:21:27,200
end-to-end guarantee for that slice and

532
00:21:27,200 --> 00:21:29,600
so if you send it to a note that doesn't

533
00:21:29,600 --> 00:21:31,360
uh understand it

534
00:21:31,360 --> 00:21:34,320
um then you know bad things will happen

535
00:21:34,320 --> 00:21:36,640
then um you really don't want to send it

536
00:21:36,640 --> 00:21:39,200
to that node so i think that that first

537
00:21:39,200 --> 00:21:42,840
bullet may have to be softened as well

538
00:21:42,840 --> 00:21:44,799
okay

539
00:21:44,799 --> 00:21:46,480
tweeting and we have to interrupt

540
00:21:46,480 --> 00:21:48,159
because we are getting along in the

541
00:21:48,159 --> 00:21:50,320
agenda um so

542
00:21:50,320 --> 00:21:51,039
like

543
00:21:51,039 --> 00:21:52,159
so i'd like to ask if you have any

544
00:21:52,159 --> 00:21:55,120
further comments keep them for the

545
00:21:55,120 --> 00:21:56,960
discussion area or take it to the

546
00:21:56,960 --> 00:21:59,520
listening list okay okay

547
00:21:59,520 --> 00:22:01,520
great thank you

548
00:22:01,520 --> 00:22:03,280
your audio is breaking up terribly i'm

549
00:22:03,280 --> 00:22:04,400
not sure whether you've done something

550
00:22:04,400 --> 00:22:06,159
to it since we first started

551
00:22:06,159 --> 00:22:07,840
no um

552
00:22:07,840 --> 00:22:10,480
let me see one second

553
00:22:10,480 --> 00:22:12,559
okay how is that now

554
00:22:12,559 --> 00:22:13,919
no it's still breaking up maybe it's

555
00:22:13,919 --> 00:22:16,000
just me but it's still breaking up

556
00:22:16,000 --> 00:22:18,080
no

557
00:22:18,080 --> 00:22:20,000
it might be my headset

558
00:22:20,000 --> 00:22:21,840
it's terrible

559
00:22:21,840 --> 00:22:23,840
oh yeah

560
00:22:23,840 --> 00:22:26,240
okay i'm gonna switch to my laptop

561
00:22:26,240 --> 00:22:28,720
microphone

562
00:22:28,720 --> 00:22:30,400
can you hear me now

563
00:22:30,400 --> 00:22:32,960
much better much better thank you

564
00:22:32,960 --> 00:22:36,000
okay very good i'll just use the laptop

565
00:22:36,000 --> 00:22:37,600
in that case

566
00:22:37,600 --> 00:22:40,159
okay very good um thanks for letting me

567
00:22:40,159 --> 00:22:41,760
know by the way

568
00:22:41,760 --> 00:22:44,320
and uh now what we're going to do is

569
00:22:44,320 --> 00:22:46,799
we're going to switch to the next top

570
00:22:46,799 --> 00:22:48,960
which is going to be greg

571
00:22:48,960 --> 00:22:52,159
so let me switch to greg slides

572
00:22:52,159 --> 00:22:55,400
thank you

573
00:22:57,120 --> 00:22:59,360
and that should do it

574
00:22:59,360 --> 00:23:00,880
no thank you

575
00:23:00,880 --> 00:23:01,600
nope

576
00:23:01,600 --> 00:23:03,840
wrong slides wait one second no no that

577
00:23:03,840 --> 00:23:07,799
was right oh

578
00:23:08,320 --> 00:23:09,919
wait wait one second

579
00:23:09,919 --> 00:23:12,880
so it so it disappeared so wait one

580
00:23:12,880 --> 00:23:14,640
second let me

581
00:23:14,640 --> 00:23:16,180
make sure that i have the right one

582
00:23:16,180 --> 00:23:18,640
[Music]

583
00:23:18,640 --> 00:23:21,520
greg mursky

584
00:23:21,600 --> 00:23:23,280
okay there we go

585
00:23:23,280 --> 00:23:24,640
okay great

586
00:23:24,640 --> 00:23:29,360
ah thank you andy um okay so um

587
00:23:29,360 --> 00:23:31,440
this is um

588
00:23:31,440 --> 00:23:34,880
resulting from our discussions in um

589
00:23:34,880 --> 00:23:35,679
that

590
00:23:35,679 --> 00:23:36,799
on

591
00:23:36,799 --> 00:23:39,200
um

592
00:23:39,280 --> 00:23:40,960
oem4.net

593
00:23:40,960 --> 00:23:44,000
over the mpls data plane

594
00:23:44,000 --> 00:23:47,640
next slide please

595
00:23:51,120 --> 00:23:52,240
um

596
00:23:52,240 --> 00:23:55,440
so there um

597
00:23:55,440 --> 00:23:58,480
deterministic networking data plane um

598
00:23:58,480 --> 00:24:03,679
uh we are working with the uh mpls and

599
00:24:03,679 --> 00:24:07,600
and for mpls uh the two sub layers been

600
00:24:07,600 --> 00:24:10,799
identified it's a deadnet a service sub

601
00:24:10,799 --> 00:24:13,120
layer and a forwarding sub layer

602
00:24:13,120 --> 00:24:16,000
so um

603
00:24:16,159 --> 00:24:20,080
for their um procedures we are

604
00:24:20,080 --> 00:24:23,279
using their pseudo-wire architecture

605
00:24:23,279 --> 00:24:25,600
and um

606
00:24:25,600 --> 00:24:29,679
for their detonate service sub layer uh

607
00:24:29,679 --> 00:24:34,159
need to use uh the sequence number

608
00:24:34,159 --> 00:24:36,480
and

609
00:24:36,480 --> 00:24:40,159
that net flow identified using

610
00:24:40,159 --> 00:24:42,480
the label and

611
00:24:42,480 --> 00:24:43,279
their

612
00:24:43,279 --> 00:24:45,679
sequence number in a control world so

613
00:24:45,679 --> 00:24:48,880
that's why we identified as a

614
00:24:48,880 --> 00:24:52,720
uh deadman control word and the use of

615
00:24:52,720 --> 00:24:53,600
that

616
00:24:53,600 --> 00:24:56,320
control word in um

617
00:24:56,320 --> 00:24:58,320
is mandatory

618
00:24:58,320 --> 00:25:02,640
okay um so uh on this uh figures you can

619
00:25:02,640 --> 00:25:05,760
see that effectively what we have is

620
00:25:05,760 --> 00:25:09,120
that that net is uh using

621
00:25:09,120 --> 00:25:12,480
a multi-segment uh pseudo-wire

622
00:25:12,480 --> 00:25:14,080
approach

623
00:25:14,080 --> 00:25:16,960
next slide please

624
00:25:19,840 --> 00:25:21,039
so uh

625
00:25:21,039 --> 00:25:24,400
in the figure would just um remind how

626
00:25:24,400 --> 00:25:29,840
their encapsulation looks and we have a

627
00:25:31,360 --> 00:25:35,039
label stack then s label that identifies

628
00:25:35,039 --> 00:25:37,679
uh their detonate flow

629
00:25:37,679 --> 00:25:39,520
and this is the bottom of the stack

630
00:25:39,520 --> 00:25:42,559
label and that immediately follows

631
00:25:42,559 --> 00:25:44,320
uh

632
00:25:44,320 --> 00:25:47,440
uh the deadnet control world so that's

633
00:25:47,440 --> 00:25:51,679
uh takes care of their um

634
00:25:52,320 --> 00:25:54,640
data traffic

635
00:25:54,640 --> 00:25:57,840
next slide please

636
00:26:04,240 --> 00:26:07,200
so in control word the first nebo is all

637
00:26:07,200 --> 00:26:08,159
zero

638
00:26:08,159 --> 00:26:09,360
and

639
00:26:09,360 --> 00:26:11,279
then it full uh

640
00:26:11,279 --> 00:26:14,799
using their sequence number

641
00:26:16,799 --> 00:26:19,039
and the sequence number is a

642
00:26:19,039 --> 00:26:22,159
critical for uh that net because

643
00:26:22,159 --> 00:26:25,520
uh in the service layer uh

644
00:26:25,520 --> 00:26:29,679
nodes uh dedicated nodes uh can

645
00:26:29,679 --> 00:26:30,720
be

646
00:26:30,720 --> 00:26:32,240
placed with a

647
00:26:32,240 --> 00:26:34,480
uh packet replication duplicate

648
00:26:34,480 --> 00:26:36,799
elimination and order preservation

649
00:26:36,799 --> 00:26:38,799
functions sub-functions

650
00:26:38,799 --> 00:26:41,200
and

651
00:26:42,080 --> 00:26:43,600
for

652
00:26:43,600 --> 00:26:45,679
duplicate elimination and order

653
00:26:45,679 --> 00:26:47,440
preservation the sequence number is

654
00:26:47,440 --> 00:26:49,760
critical essential

655
00:26:49,760 --> 00:26:52,559
so that's uh the payload

656
00:26:52,559 --> 00:26:54,880
must have the thickness number

657
00:26:54,880 --> 00:26:57,200
and the sequence number space is

658
00:26:57,200 --> 00:26:59,840
circular

659
00:27:00,159 --> 00:27:01,840
so

660
00:27:01,840 --> 00:27:05,200
and monatomically increasing

661
00:27:05,200 --> 00:27:08,480
okay next slide please

662
00:27:10,400 --> 00:27:13,360
so here you see the service layer uh

663
00:27:13,360 --> 00:27:16,159
being presented um

664
00:27:16,159 --> 00:27:18,159
serviceabler.net

665
00:27:18,159 --> 00:27:22,159
uh where we have um

666
00:27:22,480 --> 00:27:26,240
placed uh replication uh point

667
00:27:26,240 --> 00:27:29,279
duplicate elimination and ordering

668
00:27:29,279 --> 00:27:30,240
uh

669
00:27:30,240 --> 00:27:34,159
so uh the pre-off as an acronym for all

670
00:27:34,159 --> 00:27:35,520
these

671
00:27:35,520 --> 00:27:37,470
mechanics that used in a

672
00:27:37,470 --> 00:27:38,720
[Music]

673
00:27:38,720 --> 00:27:40,320
service sub layer

674
00:27:40,320 --> 00:27:41,200
is

675
00:27:41,200 --> 00:27:43,600
effectively

676
00:27:43,600 --> 00:27:46,960
a pair packet proactive protection so it

677
00:27:46,960 --> 00:27:49,520
might look uh similar to

678
00:27:49,520 --> 00:27:52,640
uh 1.1 protection but in the classical

679
00:27:52,640 --> 00:27:55,679
one plus one protection uh their

680
00:27:55,679 --> 00:28:00,080
destination selects uh one uh source

681
00:28:00,080 --> 00:28:03,360
uh to receive the packets whereas uh

682
00:28:03,360 --> 00:28:07,279
with the pre-off what happens is that uh

683
00:28:07,279 --> 00:28:10,159
packets being

684
00:28:10,399 --> 00:28:12,399
replicated at

685
00:28:12,399 --> 00:28:15,200
replication by replication function

686
00:28:15,200 --> 00:28:16,960
and then they can

687
00:28:16,960 --> 00:28:19,200
they will uh

688
00:28:19,200 --> 00:28:22,640
travel on this joint paths

689
00:28:22,640 --> 00:28:27,039
at somewhere there will be an

690
00:28:28,960 --> 00:28:31,360
order preservation and elimination

691
00:28:31,360 --> 00:28:32,640
functions

692
00:28:32,640 --> 00:28:35,360
so the elimination function is just to

693
00:28:35,360 --> 00:28:37,919
eliminate unnecessary copies

694
00:28:37,919 --> 00:28:40,880
so thus uh in the definite domain uh we

695
00:28:40,880 --> 00:28:42,840
can achieve

696
00:28:42,840 --> 00:28:45,360
our we can

697
00:28:45,360 --> 00:28:49,678
decrease their packet loss

698
00:28:51,360 --> 00:28:54,240
next slide please

699
00:28:57,120 --> 00:29:01,120
so the oem for the service sub layer is

700
00:29:01,120 --> 00:29:04,240
is important and what we have considered

701
00:29:04,240 --> 00:29:06,880
we consider it to use

702
00:29:06,880 --> 00:29:08,559
ach and

703
00:29:08,559 --> 00:29:10,640
use

704
00:29:10,640 --> 00:29:13,600
reserved field as a sequence number

705
00:29:13,600 --> 00:29:17,360
so that um

706
00:29:17,760 --> 00:29:21,840
oem packets uh can be

707
00:29:21,840 --> 00:29:24,640
processed uh in a way similar to the

708
00:29:24,640 --> 00:29:28,080
data packets and by the pre-op

709
00:29:28,080 --> 00:29:30,399
replication elimination and other

710
00:29:30,399 --> 00:29:32,320
preservation functions

711
00:29:32,320 --> 00:29:33,760
in the main

712
00:29:33,760 --> 00:29:36,320
but then when we started looking and we

713
00:29:36,320 --> 00:29:38,559
found is that

714
00:29:38,559 --> 00:29:41,679
we need some more functionality from

715
00:29:41,679 --> 00:29:44,240
their deathnet ach

716
00:29:44,240 --> 00:29:47,200
next slide please

717
00:29:50,640 --> 00:29:54,480
and what we are considering now is that

718
00:29:54,480 --> 00:29:57,360
again so uh what is being presented uh

719
00:29:57,360 --> 00:30:00,880
today is only individual draft it's not

720
00:30:00,880 --> 00:30:03,279
yet been discussed by that

721
00:30:03,279 --> 00:30:05,039
working group because

722
00:30:05,039 --> 00:30:06,080
uh

723
00:30:06,080 --> 00:30:08,720
our meeting i believe on wednesday

724
00:30:08,720 --> 00:30:13,279
so uh you can see here is that um

725
00:30:13,279 --> 00:30:17,039
new format for that net ach

726
00:30:17,039 --> 00:30:20,159
so the first nibble is still is one

727
00:30:20,159 --> 00:30:24,799
uh but version is uh one as well so we

728
00:30:24,799 --> 00:30:27,760
are taking the next uh version number

729
00:30:27,760 --> 00:30:29,440
and uh

730
00:30:29,440 --> 00:30:32,159
um it has a sequence number and a

731
00:30:32,159 --> 00:30:33,440
channel type

732
00:30:33,440 --> 00:30:37,760
and then the second 32-bit uh word uh is

733
00:30:37,760 --> 00:30:39,360
used for

734
00:30:39,360 --> 00:30:41,760
note id and some

735
00:30:41,760 --> 00:30:45,120
um other fields that we

736
00:30:45,120 --> 00:30:47,279
still thinking of how they interpret it

737
00:30:47,279 --> 00:30:48,559
but we just

738
00:30:48,559 --> 00:30:50,399
um

739
00:30:50,399 --> 00:30:51,679
put the

740
00:30:51,679 --> 00:30:54,559
level uh flags and the session

741
00:30:54,559 --> 00:30:56,080
identifier

742
00:30:56,080 --> 00:30:59,200
uh for placement so but they might be

743
00:30:59,200 --> 00:31:02,880
considered for now as reserved as well

744
00:31:02,880 --> 00:31:05,600
but in general so what we're

745
00:31:05,600 --> 00:31:08,799
proposing is we're proposing to change

746
00:31:08,799 --> 00:31:11,120
um

747
00:31:12,640 --> 00:31:15,679
to take a next step uh from um

748
00:31:15,679 --> 00:31:18,480
ach as defined for the pseudo-wire and

749
00:31:18,480 --> 00:31:19,600
that was

750
00:31:19,600 --> 00:31:21,760
uh previously

751
00:31:21,760 --> 00:31:24,159
up to now defined in

752
00:31:24,159 --> 00:31:26,799
that networking group document as one

753
00:31:26,799 --> 00:31:28,559
32-bit word

754
00:31:28,559 --> 00:31:33,039
and uh using the version versioning

755
00:31:33,039 --> 00:31:36,960
extender applicability and use of

756
00:31:36,960 --> 00:31:40,000
deadnet ach

757
00:31:40,640 --> 00:31:44,960
and i'll probably pause here to see if

758
00:31:44,960 --> 00:31:47,840
anybody wants to have a

759
00:31:47,840 --> 00:31:50,879
discussion about it

760
00:31:51,279 --> 00:31:54,000
yes creating

761
00:31:56,240 --> 00:31:58,720
short is that a good enough sequence

762
00:31:58,720 --> 00:32:01,039
number um

763
00:32:01,039 --> 00:32:02,960
yes uh

764
00:32:02,960 --> 00:32:05,120
that is

765
00:32:05,120 --> 00:32:06,880
might be not good enough and that's very

766
00:32:06,880 --> 00:32:08,880
good question so

767
00:32:08,880 --> 00:32:09,760
uh

768
00:32:09,760 --> 00:32:12,960
what might happen and again that we'll

769
00:32:12,960 --> 00:32:16,720
discuss more in more details in that

770
00:32:16,720 --> 00:32:17,760
note group

771
00:32:17,760 --> 00:32:18,960
is that

772
00:32:18,960 --> 00:32:21,679
uh the sequence number will be moved uh

773
00:32:21,679 --> 00:32:25,120
to their second word and that space can

774
00:32:25,120 --> 00:32:27,360
be reused for some other

775
00:32:27,360 --> 00:32:30,240
uh elements that we think that are

776
00:32:30,240 --> 00:32:32,080
needed in

777
00:32:32,080 --> 00:32:34,080
that net service sub layer

778
00:32:34,080 --> 00:32:36,399
because the reason why we introduced

779
00:32:36,399 --> 00:32:39,039
this uh new format

780
00:32:39,039 --> 00:32:42,960
and it was because of our analysis of uh

781
00:32:42,960 --> 00:32:45,440
service sabler and deathmatch and bill

782
00:32:45,440 --> 00:32:47,120
watts

783
00:32:47,120 --> 00:32:49,360
so i'm happy to hear that because one of

784
00:32:49,360 --> 00:32:51,600
the things that i was thinking is that

785
00:32:51,600 --> 00:32:52,880
um

786
00:32:52,880 --> 00:32:54,880
that space of the first nibble is really

787
00:32:54,880 --> 00:32:57,760
short and you know that first nibble

788
00:32:57,760 --> 00:32:59,840
came from a hack and i'll talk about it

789
00:32:59,840 --> 00:33:02,080
in my section but i'm thinking that we

790
00:33:02,080 --> 00:33:04,640
need an extension field that says here

791
00:33:04,640 --> 00:33:09,600
are subtypes so if you say 0 0 1 is

792
00:33:09,600 --> 00:33:12,399
definite oem

793
00:33:12,399 --> 00:33:15,279
then you could say i have uh subtypes of

794
00:33:15,279 --> 00:33:17,840
the deadnet om and

795
00:33:17,840 --> 00:33:20,640
so extend the space that way as opposed

796
00:33:20,640 --> 00:33:23,440
to try to

797
00:33:23,440 --> 00:33:25,679
live within that that really small space

798
00:33:25,679 --> 00:33:28,240
of just 16. so i think there are ways

799
00:33:28,240 --> 00:33:30,640
that we need to think about this so that

800
00:33:30,640 --> 00:33:33,440
we can really uh use that

801
00:33:33,440 --> 00:33:35,440
uh mfn the

802
00:33:35,440 --> 00:33:38,480
first level more effectively

803
00:33:38,480 --> 00:33:40,880
yes but it worked out

804
00:33:40,880 --> 00:33:42,399
yeah actually what we are taking

805
00:33:42,399 --> 00:33:44,480
advantage here and that's might be a

806
00:33:44,480 --> 00:33:46,880
good uh recommendation for

807
00:33:46,880 --> 00:33:49,440
uh more generic mechanisms

808
00:33:49,440 --> 00:33:52,720
is the versioning

809
00:33:52,720 --> 00:33:55,200
yeah the versioning is one aspect of it

810
00:33:55,200 --> 00:33:57,039
but typically versioning means you know

811
00:33:57,039 --> 00:33:58,880
i have

812
00:33:58,880 --> 00:34:00,960
i have some function that i have an

813
00:34:00,960 --> 00:34:02,720
updated version of the same function but

814
00:34:02,720 --> 00:34:04,159
if i have a different function that

815
00:34:04,159 --> 00:34:06,799
still falls under oam for that net

816
00:34:06,799 --> 00:34:09,520
then you know so i i think it's useful

817
00:34:09,520 --> 00:34:10,239
to

818
00:34:10,239 --> 00:34:12,000
to step back and think how you want to

819
00:34:12,000 --> 00:34:13,839
do this so you can have version you can

820
00:34:13,839 --> 00:34:16,480
have multiple sort of sub functions

821
00:34:16,480 --> 00:34:18,399
um it's an offline discussion but i

822
00:34:18,399 --> 00:34:20,639
think it's one worth having

823
00:34:20,639 --> 00:34:23,119
okay thank you

824
00:34:23,119 --> 00:34:24,800
all right and uh we'll probably have

825
00:34:24,800 --> 00:34:27,040
more discussions so welcome to that net

826
00:34:27,040 --> 00:34:29,359
uh meeting um

827
00:34:29,359 --> 00:34:31,599
this week

828
00:34:31,599 --> 00:34:34,239
and uh i think that that will be a last

829
00:34:34,239 --> 00:34:38,399
slide or less substantive slide

830
00:34:43,440 --> 00:34:45,040
okay thank you very much

831
00:34:45,040 --> 00:34:47,119
our next speaker

832
00:34:47,119 --> 00:34:49,199
is going to be karini so let me load his

833
00:34:49,199 --> 00:34:51,678
slides

834
00:34:52,560 --> 00:34:55,520
and karini you're doing the first nibble

835
00:34:55,520 --> 00:34:58,520
first

836
00:35:03,280 --> 00:35:05,200
there we go

837
00:35:05,200 --> 00:35:07,200
tweety thank you can you hear me

838
00:35:07,200 --> 00:35:09,280
yep we can hear you fine okay okay

839
00:35:09,280 --> 00:35:11,280
okay i just got a

840
00:35:11,280 --> 00:35:13,599
message from me echo that my audio was

841
00:35:13,599 --> 00:35:16,480
not visible or audible okay so yeah i

842
00:35:16,480 --> 00:35:18,720
want to talk about the first nibble

843
00:35:18,720 --> 00:35:21,680
and and several issues that we have with

844
00:35:21,680 --> 00:35:25,919
it um so next slide please

845
00:35:28,160 --> 00:35:30,640
so the mpls first nibble is the high

846
00:35:30,640 --> 00:35:33,839
order uh four bit field of the first

847
00:35:33,839 --> 00:35:36,160
octet after the last label in the label

848
00:35:36,160 --> 00:35:38,320
stack so you pass the label stack you

849
00:35:38,320 --> 00:35:40,480
say oh here's the label with the end of

850
00:35:40,480 --> 00:35:43,520
stack bit or the bottom stack that's set

851
00:35:43,520 --> 00:35:45,599
okay the first thing that i see after

852
00:35:45,599 --> 00:35:47,599
that take the first octet take the high

853
00:35:47,599 --> 00:35:50,000
order four bits that's the first nibble

854
00:35:50,000 --> 00:35:53,599
and it became special for a few reasons

855
00:35:53,599 --> 00:35:56,480
um first thing that

856
00:35:56,480 --> 00:35:59,040
you know people started using it for

857
00:35:59,040 --> 00:36:00,160
um

858
00:36:00,160 --> 00:36:02,160
is for load balance we'll get we'll get

859
00:36:02,160 --> 00:36:04,560
into that so the the point is that that

860
00:36:04,560 --> 00:36:07,680
first nibble uh became important and so

861
00:36:07,680 --> 00:36:10,640
what uh and and there have been a few

862
00:36:10,640 --> 00:36:14,320
rfcs that have dealt with it indirectly

863
00:36:14,320 --> 00:36:17,520
so what we decided to do is to step back

864
00:36:17,520 --> 00:36:20,320
look at what it's being used for

865
00:36:20,320 --> 00:36:22,640
look at how it should be used and then

866
00:36:22,640 --> 00:36:26,000
based on that make some recommendations

867
00:36:26,000 --> 00:36:27,440
and so we want to come up with a

868
00:36:27,440 --> 00:36:30,000
requirement and a recommendation on the

869
00:36:30,000 --> 00:36:32,800
use of uh the first nibble

870
00:36:32,800 --> 00:36:35,359
and and you know stuff around that we

871
00:36:35,359 --> 00:36:38,160
want to registry for first nibble values

872
00:36:38,160 --> 00:36:42,000
and we want to register for postdoc data

873
00:36:42,000 --> 00:36:44,320
so sort of the first nibble

874
00:36:44,320 --> 00:36:45,839
also

875
00:36:45,839 --> 00:36:47,760
is used for uh

876
00:36:47,760 --> 00:36:49,599
to tell you what is going on in the

877
00:36:49,599 --> 00:36:53,359
packet so next slide please

878
00:36:53,680 --> 00:36:56,480
so um just to make sure we're all on the

879
00:36:56,480 --> 00:37:00,079
same page here you see um ahead of you

880
00:37:00,079 --> 00:37:01,839
know on top of the label one that you

881
00:37:01,839 --> 00:37:03,760
see would be a layer 2 header saying

882
00:37:03,760 --> 00:37:05,839
this is an mpls packet

883
00:37:05,839 --> 00:37:07,520
then you see a bunch of labels you see

884
00:37:07,520 --> 00:37:09,599
the last label with the s

885
00:37:09,599 --> 00:37:12,720
end of stack which set to one

886
00:37:12,720 --> 00:37:14,640
the first

887
00:37:14,640 --> 00:37:17,040
nibble after that is what we're calling

888
00:37:17,040 --> 00:37:19,839
the mfn or mpls first level

889
00:37:19,839 --> 00:37:23,000
next slide

890
00:37:24,480 --> 00:37:27,359
so there are two cases in one case you

891
00:37:27,359 --> 00:37:30,160
actually have the payload the actual

892
00:37:30,160 --> 00:37:34,000
packet being carried over mpls directly

893
00:37:34,000 --> 00:37:36,720
after the last label this is how a lot

894
00:37:36,720 --> 00:37:38,720
of things started when you were doing

895
00:37:38,720 --> 00:37:40,800
mpls for traffic entering

896
00:37:40,800 --> 00:37:43,119
took an ipv4 packet and just stuck it in

897
00:37:43,119 --> 00:37:43,920
there

898
00:37:43,920 --> 00:37:45,760
when you did mpls

899
00:37:45,760 --> 00:37:49,440
for vpns ipvpns which came first

900
00:37:49,440 --> 00:37:51,920
you again do the same thing so you had a

901
00:37:51,920 --> 00:37:54,560
bunch of labels

902
00:37:54,560 --> 00:37:56,640
the last label might just be a traffic

903
00:37:56,640 --> 00:37:59,119
engineering label it might be a vpn

904
00:37:59,119 --> 00:38:01,280
label

905
00:38:01,280 --> 00:38:04,000
and then you had a v4 packet or v6

906
00:38:04,000 --> 00:38:06,320
packet so that's the case on the left

907
00:38:06,320 --> 00:38:09,119
the case on the right essentially says

908
00:38:09,119 --> 00:38:10,960
oh wait

909
00:38:10,960 --> 00:38:12,880
i want to put

910
00:38:12,880 --> 00:38:15,599
some extra metadata before i actually

911
00:38:15,599 --> 00:38:16,839
start the

912
00:38:16,839 --> 00:38:18,640
packet

913
00:38:18,640 --> 00:38:19,359
so

914
00:38:19,359 --> 00:38:21,280
the case from the left you also could

915
00:38:21,280 --> 00:38:23,280
have had a layer 2 packet you could have

916
00:38:23,280 --> 00:38:26,400
had an ethernet packet saying i want to

917
00:38:26,400 --> 00:38:27,839
do a pseudo wire

918
00:38:27,839 --> 00:38:30,160
or i want to do vpls

919
00:38:30,160 --> 00:38:31,599
i'm going to give you a bunch of labels

920
00:38:31,599 --> 00:38:35,520
the last label is my vpn label my vps

921
00:38:35,520 --> 00:38:37,440
label my pseudo wire label

922
00:38:37,440 --> 00:38:40,560
and i've got a layer 2 packet

923
00:38:40,560 --> 00:38:43,040
in some cases we said no we want to put

924
00:38:43,040 --> 00:38:45,760
a header in front of those two

925
00:38:45,760 --> 00:38:48,079
so typically a control word

926
00:38:48,079 --> 00:38:51,200
and and so then we said okay if you're

927
00:38:51,200 --> 00:38:53,200
going to put a control word that will

928
00:38:53,200 --> 00:38:55,680
help with a few things for example let's

929
00:38:55,680 --> 00:38:56,480
not

930
00:38:56,480 --> 00:38:59,359
use the first novel being 4

931
00:38:59,359 --> 00:39:01,119
so that someone who's looking at this

932
00:39:01,119 --> 00:39:03,280
won't mistake this packet

933
00:39:03,280 --> 00:39:05,440
for a

934
00:39:05,440 --> 00:39:08,240
an ipv4 packet and try to do some fancy

935
00:39:08,240 --> 00:39:09,760
load balancing on it

936
00:39:09,760 --> 00:39:12,160
so then that's where we started putting

937
00:39:12,160 --> 00:39:14,560
a post stack header which is what i'm

938
00:39:14,560 --> 00:39:17,839
going to call it uh so control word om

939
00:39:17,839 --> 00:39:21,119
word uh or words uh a bunch of um sort

940
00:39:21,119 --> 00:39:22,480
of extra

941
00:39:22,480 --> 00:39:24,880
metadata before the actual payload

942
00:39:24,880 --> 00:39:26,880
starts

943
00:39:26,880 --> 00:39:29,520
so those are the two cases

944
00:39:29,520 --> 00:39:32,320
next slide please

945
00:39:33,520 --> 00:39:34,400
so

946
00:39:34,400 --> 00:39:36,400
why did we why are we talking about the

947
00:39:36,400 --> 00:39:39,200
mfn why were people using the mfn well

948
00:39:39,200 --> 00:39:41,280
the first reason that they were using it

949
00:39:41,280 --> 00:39:44,000
is as a heuristic

950
00:39:44,000 --> 00:39:46,320
can i tell when the packet when the

951
00:39:46,320 --> 00:39:48,800
payload is actually an ip packet

952
00:39:48,800 --> 00:39:50,800
because if i can see an ip packet i can

953
00:39:50,800 --> 00:39:52,560
extract fields from it and do better

954
00:39:52,560 --> 00:39:53,920
load balancing

955
00:39:53,920 --> 00:39:56,560
otherwise i load balance on the

956
00:39:56,560 --> 00:39:58,400
transport label or maybe the transport

957
00:39:58,400 --> 00:40:00,800
label plus a vpn label

958
00:40:00,800 --> 00:40:01,920
and i get

959
00:40:01,920 --> 00:40:03,760
some load balancing but not very good

960
00:40:03,760 --> 00:40:06,480
load balancing

961
00:40:06,480 --> 00:40:08,319
so that was the first heuristic that

962
00:40:08,319 --> 00:40:10,319
people were using and then the second

963
00:40:10,319 --> 00:40:12,960
was kind of sort of let's use it also

964
00:40:12,960 --> 00:40:15,359
for the type of post-stack data that's

965
00:40:15,359 --> 00:40:19,119
carried if you're so the the heuristic

966
00:40:19,119 --> 00:40:22,319
number one uh works for the case on the

967
00:40:22,319 --> 00:40:24,400
left uh in the previous slide

968
00:40:24,400 --> 00:40:26,880
curious or the the indication of the

969
00:40:26,880 --> 00:40:29,920
type of postdoc data works for the case

970
00:40:29,920 --> 00:40:31,680
on the right

971
00:40:31,680 --> 00:40:32,480
where

972
00:40:32,480 --> 00:40:34,640
you put values that are different and

973
00:40:34,640 --> 00:40:36,560
then say oh this is going to tell me

974
00:40:36,560 --> 00:40:38,960
something useful about what kind of data

975
00:40:38,960 --> 00:40:41,119
i have

976
00:40:41,119 --> 00:40:42,560
so um

977
00:40:42,560 --> 00:40:44,000
essentially

978
00:40:44,000 --> 00:40:46,960
uh that post stack data started off

979
00:40:46,960 --> 00:40:49,359
being control words initially the

980
00:40:49,359 --> 00:40:51,040
survive control word then a death net

981
00:40:51,040 --> 00:40:53,359
control word but now it can also be a

982
00:40:53,359 --> 00:40:57,119
beer header or a gach or something

983
00:40:57,119 --> 00:40:57,920
so

984
00:40:57,920 --> 00:41:00,400
you know that they suppose stack data in

985
00:41:00,400 --> 00:41:03,200
two ways one is a signal in the control

986
00:41:03,200 --> 00:41:06,880
plane hey i'm doing that net uh as greg

987
00:41:06,880 --> 00:41:08,880
just said that net must have a control

988
00:41:08,880 --> 00:41:10,160
word

989
00:41:10,160 --> 00:41:11,520
so look for it

990
00:41:11,520 --> 00:41:14,160
or hey i'm doing survivors and i have

991
00:41:14,160 --> 00:41:16,880
this option to carry and control word

992
00:41:16,880 --> 00:41:20,960
i'm using it so expect a control word

993
00:41:20,960 --> 00:41:24,160
for beer and for jch it's actually

994
00:41:24,160 --> 00:41:27,680
heralded by a label so there's a gal

995
00:41:27,680 --> 00:41:29,520
label

996
00:41:29,520 --> 00:41:32,000
excuse me or there's a

997
00:41:32,000 --> 00:41:35,119
beer label that says um what comes next

998
00:41:35,119 --> 00:41:36,640
is a

999
00:41:36,640 --> 00:41:39,440
postdoc data which is of type beer or of

1000
00:41:39,440 --> 00:41:41,359
type gach

1001
00:41:41,359 --> 00:41:44,160
so so there's a combination of i there's

1002
00:41:44,160 --> 00:41:45,920
stuff in the control plane that tells

1003
00:41:45,920 --> 00:41:47,280
you that this is happening and then

1004
00:41:47,280 --> 00:41:48,560
there's stuff in the data plane that

1005
00:41:48,560 --> 00:41:50,960
tells you that this is happening

1006
00:41:50,960 --> 00:41:53,760
next slide please

1007
00:41:55,200 --> 00:41:57,760
things are broken and the biggest

1008
00:41:57,760 --> 00:42:00,960
problem is that you can have any kind in

1009
00:42:00,960 --> 00:42:03,119
principle you can have any kind of layer

1010
00:42:03,119 --> 00:42:04,560
two packet

1011
00:42:04,560 --> 00:42:05,680
uh

1012
00:42:05,680 --> 00:42:07,520
following the you know what i said there

1013
00:42:07,520 --> 00:42:09,760
are two cases on the left you can have

1014
00:42:09,760 --> 00:42:13,440
an ipv4 ipv6 packet or you can have any

1015
00:42:13,440 --> 00:42:15,760
kind of layer two packet

1016
00:42:15,760 --> 00:42:17,920
and if it's a layer two packet you're

1017
00:42:17,920 --> 00:42:18,880
gonna do

1018
00:42:18,880 --> 00:42:20,960
potentially bad things because you'll

1019
00:42:20,960 --> 00:42:23,440
interpret uh in the cases where the

1020
00:42:23,440 --> 00:42:25,760
first nibble is a four or a six we'll

1021
00:42:25,760 --> 00:42:28,880
interpret the packet as an ip packet and

1022
00:42:28,880 --> 00:42:30,560
try to load balance on fields that are

1023
00:42:30,560 --> 00:42:32,960
not meant for lower dancing

1024
00:42:32,960 --> 00:42:37,920
so um the theoristic can fail badly

1025
00:42:37,920 --> 00:42:41,119
now given that you know we said we want

1026
00:42:41,119 --> 00:42:44,240
things to continue working as they are

1027
00:42:44,240 --> 00:42:46,319
you know we have this big caveat but

1028
00:42:46,319 --> 00:42:49,200
that should continue to work

1029
00:42:49,200 --> 00:42:51,280
but at the same time to the extent that

1030
00:42:51,280 --> 00:42:52,800
we can prevent

1031
00:42:52,800 --> 00:42:53,760
um

1032
00:42:53,760 --> 00:42:56,560
confusion of an ipv4

1033
00:42:56,560 --> 00:42:59,280
or ip version number with the mfn we

1034
00:42:59,280 --> 00:43:00,800
should do that

1035
00:43:00,800 --> 00:43:03,359
and we have new and better ways of load

1036
00:43:03,359 --> 00:43:05,040
balancing packets so we should start

1037
00:43:05,040 --> 00:43:07,200
using those as well

1038
00:43:07,200 --> 00:43:09,759
next slide

1039
00:43:10,640 --> 00:43:12,400
so these are the

1040
00:43:12,400 --> 00:43:16,000
echoing what uh matthew said up front

1041
00:43:16,000 --> 00:43:18,240
we want to allow current implementations

1042
00:43:18,240 --> 00:43:20,240
to continue working even though there

1043
00:43:20,240 --> 00:43:23,280
may be some heuristics that are less

1044
00:43:23,280 --> 00:43:26,319
than ideal

1045
00:43:26,319 --> 00:43:27,599
um

1046
00:43:27,599 --> 00:43:29,119
i think we should point out that there

1047
00:43:29,119 --> 00:43:32,240
are these issues but hey

1048
00:43:32,240 --> 00:43:34,160
if you have an implementation today that

1049
00:43:34,160 --> 00:43:36,400
looks for the mfn and tries to load

1050
00:43:36,400 --> 00:43:37,599
balance on it

1051
00:43:37,599 --> 00:43:39,760
keep going

1052
00:43:39,760 --> 00:43:41,520
but we should lay the groundwork for

1053
00:43:41,520 --> 00:43:43,680
better more efficient implementations

1054
00:43:43,680 --> 00:43:46,640
and lay the groundwork for uh

1055
00:43:46,640 --> 00:43:50,240
easier identification of the psd when

1056
00:43:50,240 --> 00:43:52,720
there is psd and you know to the extent

1057
00:43:52,720 --> 00:43:54,640
that we can make it self-contained so

1058
00:43:54,640 --> 00:43:56,240
much the better

1059
00:43:56,240 --> 00:43:59,279
next next slide

1060
00:44:00,400 --> 00:44:02,720
so in the case of an ethernet payload

1061
00:44:02,720 --> 00:44:04,160
the mfn

1062
00:44:04,160 --> 00:44:06,560
if it is you know carried

1063
00:44:06,560 --> 00:44:12,079
as a naked layer two um over uh mpls

1064
00:44:12,079 --> 00:44:15,200
then uh that that first nibble is part

1065
00:44:15,200 --> 00:44:17,280
of the destination address the part of

1066
00:44:17,280 --> 00:44:19,119
the oui

1067
00:44:19,119 --> 00:44:21,119
it can take any value

1068
00:44:21,119 --> 00:44:23,599
and so there are rfc that says you

1069
00:44:23,599 --> 00:44:26,000
really should have a control word but

1070
00:44:26,000 --> 00:44:27,520
i think that's

1071
00:44:27,520 --> 00:44:30,079
weak and we should actually go go on to

1072
00:44:30,079 --> 00:44:32,319
a must

1073
00:44:32,319 --> 00:44:35,359
so we'll talk about that in a second

1074
00:44:35,359 --> 00:44:38,319
the current psd types uh you know when

1075
00:44:38,319 --> 00:44:39,839
we say here's a control what we're

1076
00:44:39,839 --> 00:44:41,760
staying away from four and six

1077
00:44:41,760 --> 00:44:44,079
but even they were saying okay we'll use

1078
00:44:44,079 --> 00:44:48,240
five for beer and we'll use one for oam

1079
00:44:48,240 --> 00:44:49,839
but you know what if there's a new

1080
00:44:49,839 --> 00:44:52,960
version for ip that is like seven or

1081
00:44:52,960 --> 00:44:55,280
maybe they want to reuse ip version one

1082
00:44:55,280 --> 00:44:57,920
what do we do it's like let's not even

1083
00:44:57,920 --> 00:44:59,119
go there

1084
00:44:59,119 --> 00:45:02,560
um let us stop confusing the ip version

1085
00:45:02,560 --> 00:45:04,640
number and the mfn

1086
00:45:04,640 --> 00:45:07,040
and so again for backward compatibility

1087
00:45:07,040 --> 00:45:10,160
if you see a 406 and you want to try to

1088
00:45:10,160 --> 00:45:12,480
recognize that as an ip packet and do

1089
00:45:12,480 --> 00:45:14,160
load balancing

1090
00:45:14,160 --> 00:45:16,560
go for it you know

1091
00:45:16,560 --> 00:45:18,640
understand the problems that you can

1092
00:45:18,640 --> 00:45:19,520
have

1093
00:45:19,520 --> 00:45:22,400
but if you see any other value

1094
00:45:22,400 --> 00:45:24,240
even if there's a new ip version one

1095
00:45:24,240 --> 00:45:28,880
please do not uh use uh one as

1096
00:45:28,880 --> 00:45:30,240
i can go look for

1097
00:45:30,240 --> 00:45:31,599
ippacket

1098
00:45:31,599 --> 00:45:34,800
or ip headers or do do not use seven for

1099
00:45:34,800 --> 00:45:37,920
that so let's decouple the mfn and the

1100
00:45:37,920 --> 00:45:40,400
ip version numbers

1101
00:45:40,400 --> 00:45:42,960
next slide

1102
00:45:44,800 --> 00:45:46,640
okay so

1103
00:45:46,640 --> 00:45:48,640
um we

1104
00:45:48,640 --> 00:45:51,200
we want to be careful also not to try to

1105
00:45:51,200 --> 00:45:54,640
back door an mpls protocol field in here

1106
00:45:54,640 --> 00:45:57,280
so the mfn kind of sort of was used as a

1107
00:45:57,280 --> 00:45:59,200
protocol field at least to recognize

1108
00:45:59,200 --> 00:46:01,200
ipv4 ipv6

1109
00:46:01,200 --> 00:46:03,280
yeah okay we will leave that in for

1110
00:46:03,280 --> 00:46:06,400
backward compatibility but no more

1111
00:46:06,400 --> 00:46:09,680
what we will use the mfn for is

1112
00:46:09,680 --> 00:46:12,160
uh to identify the type of poststack

1113
00:46:12,160 --> 00:46:13,839
data so

1114
00:46:13,839 --> 00:46:16,880
zero means uh a control word one means

1115
00:46:16,880 --> 00:46:19,359
om

1116
00:46:19,680 --> 00:46:22,480
five means beer you know and and so on

1117
00:46:22,480 --> 00:46:24,800
this is why we need a registry so that's

1118
00:46:24,800 --> 00:46:26,079
what we're gonna do

1119
00:46:26,079 --> 00:46:27,520
right

1120
00:46:27,520 --> 00:46:29,440
the other thing we're going to do

1121
00:46:29,440 --> 00:46:30,960
is to say

1122
00:46:30,960 --> 00:46:32,920
for all

1123
00:46:32,920 --> 00:46:37,119
non-ipv4 non-ipv6 payloads they must be

1124
00:46:37,119 --> 00:46:39,520
a psd there must be this kind of header

1125
00:46:39,520 --> 00:46:40,640
that says

1126
00:46:40,640 --> 00:46:43,359
um i have a control word it might only

1127
00:46:43,359 --> 00:46:44,079
be

1128
00:46:44,079 --> 00:46:46,480
uh i'm going to put something non-zero

1129
00:46:46,480 --> 00:46:49,040
here non-496 here

1130
00:46:49,040 --> 00:46:52,800
but other than that i'm not going to

1131
00:46:52,800 --> 00:46:55,520
do anything else and so if you do that

1132
00:46:55,520 --> 00:46:57,599
then you're not going to have any

1133
00:46:57,599 --> 00:46:59,040
confusion of

1134
00:46:59,040 --> 00:47:02,000
uh non-ipv4 packets being treated as

1135
00:47:02,000 --> 00:47:04,800
ipv4 and load balancing happen there

1136
00:47:04,800 --> 00:47:06,720
so there's a there's a recommendation

1137
00:47:06,720 --> 00:47:08,720
for this but we're trying to make this a

1138
00:47:08,720 --> 00:47:11,839
this requirement going forward so

1139
00:47:11,839 --> 00:47:14,000
existing implementations yeah they'll do

1140
00:47:14,000 --> 00:47:16,960
what they do uh and they understand the

1141
00:47:16,960 --> 00:47:19,119
the sort of what trouble they can get

1142
00:47:19,119 --> 00:47:21,119
into

1143
00:47:21,119 --> 00:47:24,160
there is a recommendation that's a more

1144
00:47:24,160 --> 00:47:25,920
like a requirement there's a

1145
00:47:25,920 --> 00:47:27,440
recommendation

1146
00:47:27,440 --> 00:47:30,079
that uh for load balancing purposes

1147
00:47:30,079 --> 00:47:31,680
don't even look for those things it's

1148
00:47:31,680 --> 00:47:34,800
actually a lot more efficient to use

1149
00:47:34,800 --> 00:47:38,880
a fat solar wire or an entropy label uh

1150
00:47:38,880 --> 00:47:40,640
and and you actually get much better

1151
00:47:40,640 --> 00:47:42,640
load balancing you do less work and you

1152
00:47:42,640 --> 00:47:44,720
get better load balancing by by doing

1153
00:47:44,720 --> 00:47:45,839
that

1154
00:47:45,839 --> 00:47:49,040
so so the recommendation is to use uh

1155
00:47:49,040 --> 00:47:51,440
faster wire or entropy labels for load

1156
00:47:51,440 --> 00:47:52,880
balancing

1157
00:47:52,880 --> 00:47:57,200
and it worked for more than just ipv4

1158
00:47:57,520 --> 00:47:58,400
and the

1159
00:47:58,400 --> 00:48:00,480
mandate or the requirement is going

1160
00:48:00,480 --> 00:48:02,559
forward implementations

1161
00:48:02,559 --> 00:48:05,040
uh can can only have

1162
00:48:05,040 --> 00:48:08,720
naked payload of ipv4 and ipv6 any new

1163
00:48:08,720 --> 00:48:11,680
versions of ip or any other layer 2 or

1164
00:48:11,680 --> 00:48:13,920
layer 1 packet that's carried here must

1165
00:48:13,920 --> 00:48:15,839
have

1166
00:48:15,839 --> 00:48:18,880
a post stack data

1167
00:48:19,119 --> 00:48:20,960
um the other thing that would be nice i

1168
00:48:20,960 --> 00:48:23,119
think is to keep the recognition passing

1169
00:48:23,119 --> 00:48:25,520
of the psg completely in the data plane

1170
00:48:25,520 --> 00:48:27,520
so again we'd like to create an mfn

1171
00:48:27,520 --> 00:48:29,760
registry today we have an overlap

1172
00:48:29,760 --> 00:48:30,720
between

1173
00:48:30,720 --> 00:48:33,359
zero would which could be a control word

1174
00:48:33,359 --> 00:48:36,079
for pseudovirus or for that net you have

1175
00:48:36,079 --> 00:48:38,400
to resolve that in the control plane

1176
00:48:38,400 --> 00:48:41,200
but to the extent that we can

1177
00:48:41,200 --> 00:48:44,880
if you say here are unique registries

1178
00:48:44,880 --> 00:48:48,319
for different types of postdoc data

1179
00:48:48,319 --> 00:48:50,400
then i think we

1180
00:48:50,400 --> 00:48:54,079
whoever is doing um

1181
00:48:55,040 --> 00:48:56,960
whoever's or whoever's trying to handle

1182
00:48:56,960 --> 00:48:59,040
this in the data plane has a better time

1183
00:48:59,040 --> 00:49:02,079
has an easier time

1184
00:49:02,079 --> 00:49:04,640
next slide

1185
00:49:08,319 --> 00:49:10,079
so

1186
00:49:10,079 --> 00:49:12,240
like i said existing implementations can

1187
00:49:12,240 --> 00:49:14,319
continue to be used with the caveats

1188
00:49:14,319 --> 00:49:18,079
that we've mentioned uh pseudowire and

1189
00:49:18,079 --> 00:49:20,079
that net control words

1190
00:49:20,079 --> 00:49:22,160
will work as is no changes are to be

1191
00:49:22,160 --> 00:49:24,160
made to them or if there are changes

1192
00:49:24,160 --> 00:49:27,040
made like um greg was suggesting you

1193
00:49:27,040 --> 00:49:31,359
know it is in the context of stuff that

1194
00:49:31,359 --> 00:49:33,839
they're working on

1195
00:49:33,839 --> 00:49:36,240
the the one that i think is much

1196
00:49:36,240 --> 00:49:39,760
more difficult is the gal

1197
00:49:39,760 --> 00:49:42,400
ach

1198
00:49:43,680 --> 00:49:47,119
post-stack data continues as is the br1

1199
00:49:47,119 --> 00:49:49,920
probably will continue as is and beyond

1200
00:49:49,920 --> 00:49:52,160
that that particular mfn will be used

1201
00:49:52,160 --> 00:49:54,000
for beer

1202
00:49:54,000 --> 00:49:57,359
any new ideas for psd should have a new

1203
00:49:57,359 --> 00:49:59,200
mfn code point so

1204
00:49:59,200 --> 00:50:01,359
you know this idea of reusing existing

1205
00:50:01,359 --> 00:50:04,079
code points and and saying i'll signal

1206
00:50:04,079 --> 00:50:06,160
it in the control plane

1207
00:50:06,160 --> 00:50:08,319
to the extent that we already have it we

1208
00:50:08,319 --> 00:50:10,319
keep keep it but if we can say going

1209
00:50:10,319 --> 00:50:12,400
forward we won't use it

1210
00:50:12,400 --> 00:50:13,839
then i think

1211
00:50:13,839 --> 00:50:15,599
people who write microcode will be

1212
00:50:15,599 --> 00:50:16,800
happier

1213
00:50:16,800 --> 00:50:19,119
on the other hand as we were discussing

1214
00:50:19,119 --> 00:50:19,920
with

1215
00:50:19,920 --> 00:50:22,400
greg we have a very small space for the

1216
00:50:22,400 --> 00:50:25,440
mfn so it would be nice to say

1217
00:50:25,440 --> 00:50:27,920
new code points for mfn are followed by

1218
00:50:27,920 --> 00:50:31,599
a sub function registry as well

1219
00:50:31,599 --> 00:50:34,559
and that way we can extend the msn

1220
00:50:34,559 --> 00:50:37,040
but that that problem does have to be

1221
00:50:37,040 --> 00:50:39,040
tackled

1222
00:50:39,040 --> 00:50:41,520
so but but we need to for the starting

1223
00:50:41,520 --> 00:50:43,200
point we need an mfn

1224
00:50:43,200 --> 00:50:45,520
registry and and corresponding chord

1225
00:50:45,520 --> 00:50:47,200
points

1226
00:50:47,200 --> 00:50:49,680
next slide

1227
00:50:50,480 --> 00:50:53,520
so here is sort of a proposal this is

1228
00:50:53,520 --> 00:50:55,680
not in the draft the draft is something

1229
00:50:55,680 --> 00:50:57,359
that we came up with i should have

1230
00:50:57,359 --> 00:50:59,599
mentioned this um there are several of

1231
00:50:59,599 --> 00:51:02,559
us who uh talk together about

1232
00:51:02,559 --> 00:51:04,720
uh um

1233
00:51:04,720 --> 00:51:07,359
you know that we need a registry for mfn

1234
00:51:07,359 --> 00:51:10,079
and and what all should go into it

1235
00:51:10,079 --> 00:51:11,599
um

1236
00:51:11,599 --> 00:51:15,040
but um in the offline discussions um

1237
00:51:15,040 --> 00:51:17,200
you know and and these thoughts that the

1238
00:51:17,200 --> 00:51:19,280
mfn space is really small

1239
00:51:19,280 --> 00:51:21,440
um we could have something like you know

1240
00:51:21,440 --> 00:51:24,000
you have an mfn that's four bits

1241
00:51:24,000 --> 00:51:25,920
existing elephants yeah they are what

1242
00:51:25,920 --> 00:51:28,400
they are but new ammo fans you might

1243
00:51:28,400 --> 00:51:30,880
introduce a subtype um

1244
00:51:30,880 --> 00:51:32,640
what greg was talking about is the

1245
00:51:32,640 --> 00:51:34,800
version number

1246
00:51:34,800 --> 00:51:38,000
um so so something that says um i can

1247
00:51:38,000 --> 00:51:40,400
extend the mfn space a little bit so i

1248
00:51:40,400 --> 00:51:42,640
don't have to burn a new top-level mfn

1249
00:51:42,640 --> 00:51:44,319
bit for every new

1250
00:51:44,319 --> 00:51:46,319
type of psd

1251
00:51:46,319 --> 00:51:48,559
you also have a total length of psd

1252
00:51:48,559 --> 00:51:49,599
field

1253
00:51:49,599 --> 00:51:51,440
and and after that you can do what you

1254
00:51:51,440 --> 00:51:54,160
want and that allows people that say i

1255
00:51:54,160 --> 00:51:55,680
don't know too much about this or i

1256
00:51:55,680 --> 00:51:57,200
don't care too much about this i want to

1257
00:51:57,200 --> 00:51:59,200
know where the real packet starts and

1258
00:51:59,200 --> 00:52:01,520
the total length of the psu will say if

1259
00:52:01,520 --> 00:52:03,119
you don't want to process the psd just

1260
00:52:03,119 --> 00:52:05,839
go on to the end and there's your

1261
00:52:05,839 --> 00:52:07,359
customer packet

1262
00:52:07,359 --> 00:52:09,760
and forward that as you need to so i

1263
00:52:09,760 --> 00:52:12,640
this is like i said just a proposal but

1264
00:52:12,640 --> 00:52:14,240
it captures two

1265
00:52:14,240 --> 00:52:16,079
important things that we need to tackle

1266
00:52:16,079 --> 00:52:18,480
one is how do we make the mfn space

1267
00:52:18,480 --> 00:52:21,440
bigger and two is how do i skip the psd

1268
00:52:21,440 --> 00:52:23,760
altogether and get to the customer

1269
00:52:23,760 --> 00:52:25,040
packet

1270
00:52:25,040 --> 00:52:27,040
and beyond that i think the psd should

1271
00:52:27,040 --> 00:52:30,558
be self self defining

1272
00:52:30,800 --> 00:52:33,599
questions

1273
00:52:33,599 --> 00:52:35,920
i'm in line

1274
00:52:35,920 --> 00:52:37,440
um

1275
00:52:37,440 --> 00:52:39,920
okay i actually had a quick question

1276
00:52:39,920 --> 00:52:44,000
just based on your last slide myself um

1277
00:52:44,000 --> 00:52:47,040
i i assume that that will be in the next

1278
00:52:47,040 --> 00:52:49,200
revision of the draft

1279
00:52:49,200 --> 00:52:50,400
yes yes

1280
00:52:50,400 --> 00:52:54,079
okay okay very good um let's move on to

1281
00:52:54,079 --> 00:52:55,040
um

1282
00:52:55,040 --> 00:52:56,720
to hyu and

1283
00:52:56,720 --> 00:52:59,359
and then loa

1284
00:52:59,359 --> 00:53:02,720
uh my question is that um i think the

1285
00:53:02,720 --> 00:53:05,599
use of this first label is to a wide

1286
00:53:05,599 --> 00:53:07,040
ambiguity

1287
00:53:07,040 --> 00:53:09,119
due to the lack of any effective

1288
00:53:09,119 --> 00:53:11,599
indicators in the label stack

1289
00:53:11,599 --> 00:53:12,640
but

1290
00:53:12,640 --> 00:53:15,359
from now if we are designing this uh

1291
00:53:15,359 --> 00:53:18,079
ancillary data we need uh

1292
00:53:18,079 --> 00:53:20,640
to define a uh indicator in the label

1293
00:53:20,640 --> 00:53:23,599
stack if we have that in place then

1294
00:53:23,599 --> 00:53:25,520
it seems says

1295
00:53:25,520 --> 00:53:27,200
why we should care about this first

1296
00:53:27,200 --> 00:53:28,960
neighbor anymore because we know for

1297
00:53:28,960 --> 00:53:32,400
sure what what follows a label stack

1298
00:53:32,400 --> 00:53:35,520
so that's my question

1299
00:53:35,760 --> 00:53:37,359
so um

1300
00:53:37,359 --> 00:53:40,079
that i actually i try to tackle that in

1301
00:53:40,079 --> 00:53:43,119
my next presentation but but i i agree

1302
00:53:43,119 --> 00:53:45,520
with you i think there's this place for

1303
00:53:45,520 --> 00:53:47,440
things in stack and there's place for

1304
00:53:47,440 --> 00:53:48,960
things post-stack

1305
00:53:48,960 --> 00:53:49,760
and

1306
00:53:49,760 --> 00:53:52,000
i i think we have both

1307
00:53:52,000 --> 00:53:54,400
levels in our hands and i think what we

1308
00:53:54,400 --> 00:53:57,040
should come up with is the ideal or you

1309
00:53:57,040 --> 00:53:58,960
know from what we see now the best

1310
00:53:58,960 --> 00:53:59,920
possible

1311
00:53:59,920 --> 00:54:04,240
view going forward so i'm with you

1312
00:54:06,640 --> 00:54:08,319
uh

1313
00:54:08,319 --> 00:54:11,280
may i or um

1314
00:54:11,280 --> 00:54:12,240
actually

1315
00:54:12,240 --> 00:54:13,119
lo

1316
00:54:13,119 --> 00:54:14,640
what was next even though we didn't put

1317
00:54:14,640 --> 00:54:16,559
his hand up he did turn on his

1318
00:54:16,559 --> 00:54:18,720
microphone

1319
00:54:18,720 --> 00:54:21,359
oh okay let's see

1320
00:54:21,359 --> 00:54:23,119
yeah so okay

1321
00:54:23,119 --> 00:54:25,440
one thing i'm

1322
00:54:25,440 --> 00:54:27,200
kind of supporting

1323
00:54:27,200 --> 00:54:29,599
how you on

1324
00:54:29,599 --> 00:54:30,319
uh

1325
00:54:30,319 --> 00:54:32,720
that we actually

1326
00:54:32,720 --> 00:54:35,680
know from the

1327
00:54:35,680 --> 00:54:38,480
flag field what actually follows

1328
00:54:38,480 --> 00:54:39,359
but

1329
00:54:39,359 --> 00:54:41,680
even if we didn't do that why couldn't

1330
00:54:41,680 --> 00:54:43,119
we just

1331
00:54:43,119 --> 00:54:48,000
increase the sub tape type to eight bits

1332
00:54:48,960 --> 00:54:51,520
it would work just fine

1333
00:54:51,520 --> 00:54:54,400
sure yeah yeah yeah so so this like i

1334
00:54:54,400 --> 00:54:57,280
said this is currently just a proposal

1335
00:54:57,280 --> 00:55:00,319
um so what you do is you take

1336
00:55:00,319 --> 00:55:03,040
you take one

1337
00:55:03,040 --> 00:55:07,040
mfn field or yeah value value

1338
00:55:07,040 --> 00:55:09,440
only one and then you have

1339
00:55:09,440 --> 00:55:13,119
eight bits to actually diversify it

1340
00:55:13,119 --> 00:55:16,079
yes yes

1341
00:55:16,720 --> 00:55:18,960
so the pseudo-wire control word has

1342
00:55:18,960 --> 00:55:21,599
those four bits for that sort of purpose

1343
00:55:21,599 --> 00:55:22,880
it was actually intended for version

1344
00:55:22,880 --> 00:55:25,920
fields but they are qualifier bits that

1345
00:55:25,920 --> 00:55:27,599
are available and were always in the

1346
00:55:27,599 --> 00:55:30,000
design

1347
00:55:30,160 --> 00:55:31,440
right

1348
00:55:31,440 --> 00:55:34,240
and and so i think where we are kind of

1349
00:55:34,240 --> 00:55:35,359
going is

1350
00:55:35,359 --> 00:55:38,000
maybe every mfn would have such a

1351
00:55:38,000 --> 00:55:39,760
qualifier and

1352
00:55:39,760 --> 00:55:41,599
you know everyone going forward might

1353
00:55:41,599 --> 00:55:43,359
have eight bits but the ones that have

1354
00:55:43,359 --> 00:55:45,599
already defined it you know

1355
00:55:45,599 --> 00:55:48,160
in greg's thing he had four bits for a

1356
00:55:48,160 --> 00:55:49,359
version number

1357
00:55:49,359 --> 00:55:51,760
uh as steward just mentioned we have

1358
00:55:51,760 --> 00:55:53,200
four bits for

1359
00:55:53,200 --> 00:55:55,920
a qualifier

1360
00:55:55,920 --> 00:55:57,920
i think going forward we might say every

1361
00:55:57,920 --> 00:56:01,359
new mfn would have eight bits set aside

1362
00:56:01,359 --> 00:56:02,480
to expand

1363
00:56:02,480 --> 00:56:05,119
the functionality so we group more

1364
00:56:05,119 --> 00:56:06,400
things under the

1365
00:56:06,400 --> 00:56:08,880
one top level four bit field

1366
00:56:08,880 --> 00:56:10,880
and then say okay here's how you know

1367
00:56:10,880 --> 00:56:13,119
which one of those it is in the second

1368
00:56:13,119 --> 00:56:15,440
eight bit field

1369
00:56:15,440 --> 00:56:18,240
uh so i you know i i think we're all

1370
00:56:18,240 --> 00:56:19,920
saying the same thing the one thing we

1371
00:56:19,920 --> 00:56:21,520
didn't talk about is the total length of

1372
00:56:21,520 --> 00:56:23,440
psd which i don't think people would

1373
00:56:23,440 --> 00:56:24,880
disagree with

1374
00:56:24,880 --> 00:56:26,240
from the point of view of being able to

1375
00:56:26,240 --> 00:56:28,640
skip the psd and knowing where the end

1376
00:56:28,640 --> 00:56:29,680
of

1377
00:56:29,680 --> 00:56:32,240
the psd field is so i know where the

1378
00:56:32,240 --> 00:56:34,880
packet starts the actual payload yeah

1379
00:56:34,880 --> 00:56:37,760
i i actually think creatine will be much

1380
00:56:37,760 --> 00:56:40,160
much easier for people to discuss once

1381
00:56:40,160 --> 00:56:42,079
there's a concrete proposal on paper

1382
00:56:42,079 --> 00:56:43,599
that they can all

1383
00:56:43,599 --> 00:56:46,960
look at and comment on

1384
00:56:47,040 --> 00:56:49,280
yeah no i agree i will bring that out as

1385
00:56:49,280 --> 00:56:51,760
soon as like as soon as this is over

1386
00:56:51,760 --> 00:56:52,720
okay

1387
00:56:52,720 --> 00:56:55,359
and the whim is next

1388
00:56:55,359 --> 00:56:57,200
yeah so my my questions relate to the

1389
00:56:57,200 --> 00:56:59,440
same thing as far as i understand the

1390
00:56:59,440 --> 00:57:02,640
psd can i it's it's ancillary data but

1391
00:57:02,640 --> 00:57:05,359
potentially could have multiple contexts

1392
00:57:05,359 --> 00:57:08,240
uh if i'm understanding it correct

1393
00:57:08,240 --> 00:57:11,200
and as a result don't yeah and then

1394
00:57:11,200 --> 00:57:12,559
to indicate

1395
00:57:12,559 --> 00:57:15,520
which piece is what

1396
00:57:15,520 --> 00:57:16,640
so

1397
00:57:16,640 --> 00:57:18,720
very good question um i would like the

1398
00:57:18,720 --> 00:57:21,599
psd to be self-describing

1399
00:57:21,599 --> 00:57:22,960
you know in the

1400
00:57:22,960 --> 00:57:25,839
in stack data you have very limited

1401
00:57:25,839 --> 00:57:27,839
space you want to try to fit everything

1402
00:57:27,839 --> 00:57:30,319
into 32-bit chunks and it's not even

1403
00:57:30,319 --> 00:57:32,319
full-third ruby chunks

1404
00:57:32,319 --> 00:57:34,880
so what you end up with is

1405
00:57:34,880 --> 00:57:36,960
you don't use tlb structures there you

1406
00:57:36,960 --> 00:57:39,599
use the indicator flag structure there

1407
00:57:39,599 --> 00:57:42,160
in the psd

1408
00:57:42,160 --> 00:57:44,880
after this first sort of header

1409
00:57:44,880 --> 00:57:47,760
that says this my mfn type this is my

1410
00:57:47,760 --> 00:57:50,000
subtype this is the total length

1411
00:57:50,000 --> 00:57:52,000
then you sort of say okay now you have a

1412
00:57:52,000 --> 00:57:54,160
tlb structure it could be a tlv it could

1413
00:57:54,160 --> 00:57:55,920
be next header it could be whatever

1414
00:57:55,920 --> 00:57:57,520
structure you want

1415
00:57:57,520 --> 00:57:59,440
but it's self-describing

1416
00:57:59,440 --> 00:58:02,000
and so you're able to parse it you're

1417
00:58:02,000 --> 00:58:03,839
able to do multiple functions you know

1418
00:58:03,839 --> 00:58:05,760
some of them might have a lot of data

1419
00:58:05,760 --> 00:58:07,280
the in stack

1420
00:58:07,280 --> 00:58:10,480
in situ oam could go in there a bunch of

1421
00:58:10,480 --> 00:58:12,559
other things could go in there and so

1422
00:58:12,559 --> 00:58:15,839
the the psd you know it's a free-for-all

1423
00:58:15,839 --> 00:58:17,280
thing

1424
00:58:17,280 --> 00:58:20,319
and so you have the tlv structure or tlv

1425
00:58:20,319 --> 00:58:22,799
type structure and then of course you

1426
00:58:22,799 --> 00:58:25,200
have your payload so i i you know i'm

1427
00:58:25,200 --> 00:58:26,880
leaving it open to that i think we're in

1428
00:58:26,880 --> 00:58:28,240
agreement

1429
00:58:28,240 --> 00:58:31,119
yeah no no i think yeah so but i i i'm

1430
00:58:31,119 --> 00:58:32,559
trying to make a point that we need

1431
00:58:32,559 --> 00:58:36,240
somehow an an event of some sort uh to

1432
00:58:36,240 --> 00:58:38,319
indicate also potentially for the order

1433
00:58:38,319 --> 00:58:39,520
right i mean

1434
00:58:39,520 --> 00:58:40,400
or

1435
00:58:40,400 --> 00:58:41,359
because

1436
00:58:41,359 --> 00:58:43,599
depending on the use case

1437
00:58:43,599 --> 00:58:46,720
it might matter which

1438
00:58:46,720 --> 00:58:48,880
part of the psd comes before the other i

1439
00:58:48,880 --> 00:58:50,400
don't know i mean

1440
00:58:50,400 --> 00:58:52,640
okay

1441
00:58:52,720 --> 00:58:54,799
you have a very good point so so this is

1442
00:58:54,799 --> 00:58:56,720
one of the things that the ipv6 guys

1443
00:58:56,720 --> 00:58:58,960
also struggle with so the idea is that

1444
00:58:58,960 --> 00:59:02,319
there is one mfn right that's the first

1445
00:59:02,319 --> 00:59:05,200
nibble and it says there's psd and that

1446
00:59:05,200 --> 00:59:07,280
and that's why there's a total length of

1447
00:59:07,280 --> 00:59:08,640
psd

1448
00:59:08,640 --> 00:59:10,799
that total length of psd can be broken

1449
00:59:10,799 --> 00:59:13,359
up into let's say tlv structures i'm not

1450
00:59:13,359 --> 00:59:15,520
wedded to tlb but let's just say because

1451
00:59:15,520 --> 00:59:17,839
i like to work in something concrete so

1452
00:59:17,839 --> 00:59:20,240
i can have multiple tlvs there so i can

1453
00:59:20,240 --> 00:59:22,319
have something that says this is in situ

1454
00:59:22,319 --> 00:59:26,079
data the length is you know 30 bytes and

1455
00:59:26,079 --> 00:59:27,760
now here's the value and then there's

1456
00:59:27,760 --> 00:59:29,839
something else that says this is i don't

1457
00:59:29,839 --> 00:59:32,480
know some other psp data

1458
00:59:32,480 --> 00:59:33,760
the length is

1459
00:59:33,760 --> 00:59:36,079
16 bytes and here's the value

1460
00:59:36,079 --> 00:59:39,040
so i i have all of those now organizing

1461
00:59:39,040 --> 00:59:40,480
those and putting them in the right

1462
00:59:40,480 --> 00:59:42,799
order is really important because you're

1463
00:59:42,799 --> 00:59:45,680
processing these in the data plane and

1464
00:59:45,680 --> 00:59:48,079
if you run out of time uh you know if

1465
00:59:48,079 --> 00:59:50,319
you process them sequentially

1466
00:59:50,319 --> 00:59:52,799
then you'd like the important ones up

1467
00:59:52,799 --> 00:59:53,920
front

1468
00:59:53,920 --> 00:59:55,760
that is a second order issue that i

1469
00:59:55,760 --> 00:59:57,760
don't want to get into but

1470
00:59:57,760 --> 00:59:59,680
you don't have a new mfn for each of

1471
00:59:59,680 --> 01:00:01,520
these i don't think that we need to burn

1472
01:00:01,520 --> 01:00:04,480
a new mfn we have a one top level header

1473
01:00:04,480 --> 01:00:05,920
that says

1474
01:00:05,920 --> 01:00:09,200
here's the type of mfn so let's say mfn

1475
01:00:09,200 --> 01:00:12,640
value nine is this is the new miad

1476
01:00:12,640 --> 01:00:17,280
generally extensible mfn post track data

1477
01:00:17,280 --> 01:00:19,839
here's the subtype here's the length and

1478
01:00:19,839 --> 01:00:23,359
then you have a bunch of new things

1479
01:00:23,359 --> 01:00:25,599
and to your point when you totally need

1480
01:00:25,599 --> 01:00:27,680
to put them in some order

1481
01:00:27,680 --> 01:00:31,759
but that is a second-order question

1482
01:00:31,839 --> 01:00:32,640
yeah

1483
01:00:32,640 --> 01:00:34,720
so katie my point is just i there is a

1484
01:00:34,720 --> 01:00:36,319
few considerations we have to take into

1485
01:00:36,319 --> 01:00:38,000
account right we don't have to solve it

1486
01:00:38,000 --> 01:00:39,760
right now but i think it's good to list

1487
01:00:39,760 --> 01:00:41,440
them somehow and maybe some of them are

1488
01:00:41,440 --> 01:00:43,599
not important some of them are but i

1489
01:00:43,599 --> 01:00:45,520
think it's good to list the things we

1490
01:00:45,520 --> 01:00:47,599
should consider for this and then see

1491
01:00:47,599 --> 01:00:49,520
what would be the best solution for it

1492
01:00:49,520 --> 01:00:51,200
somehow right

1493
01:00:51,200 --> 01:00:52,799
yeah yeah okay

1494
01:00:52,799 --> 01:00:54,160
yeah yeah

1495
01:00:54,160 --> 01:00:56,799
okay i've closed the queue because we're

1496
01:00:56,799 --> 01:00:58,799
starting to eat into the time

1497
01:00:58,799 --> 01:01:00,240
um for

1498
01:01:00,240 --> 01:01:01,359
um

1499
01:01:01,359 --> 01:01:02,400
for

1500
01:01:02,400 --> 01:01:04,319
greedy's next talk so for greg and

1501
01:01:04,319 --> 01:01:07,200
stuart if it's really really short uh we

1502
01:01:07,200 --> 01:01:09,359
can do it now but otherwise i'd like to

1503
01:01:09,359 --> 01:01:11,280
ask you to wait for the discussion

1504
01:01:11,280 --> 01:01:13,680
period

1505
01:01:14,079 --> 01:01:15,440
so uh jeff

1506
01:01:15,440 --> 01:01:18,160
another question um i get very good

1507
01:01:18,160 --> 01:01:21,200
feeling that uh it might look uh similar

1508
01:01:21,200 --> 01:01:25,599
to ipv6 extension headers and

1509
01:01:25,599 --> 01:01:28,400
that's something that uh we can discuss

1510
01:01:28,400 --> 01:01:30,400
in um on the list

1511
01:01:30,400 --> 01:01:31,359
and

1512
01:01:31,359 --> 01:01:34,079
actually we have advantage because they

1513
01:01:34,079 --> 01:01:36,799
suffered their pains and got their cuts

1514
01:01:36,799 --> 01:01:38,880
so we can learn from their experience

1515
01:01:38,880 --> 01:01:41,839
and see how we can apply it to what

1516
01:01:41,839 --> 01:01:43,599
what's a

1517
01:01:43,599 --> 01:01:45,440
task we have at hand

1518
01:01:45,440 --> 01:01:46,319
thanks

1519
01:01:46,319 --> 01:01:48,799
yep agreed

1520
01:01:48,799 --> 01:01:50,240
so just quickly

1521
01:01:50,240 --> 01:01:51,520
something the working group needs to be

1522
01:01:51,520 --> 01:01:54,880
under no illusion about is that there

1523
01:01:54,880 --> 01:01:55,920
will be

1524
01:01:55,920 --> 01:01:59,920
uh random raw ethernet packets floating

1525
01:01:59,920 --> 01:02:02,640
around the networks for the foreseeable

1526
01:02:02,640 --> 01:02:03,680
future

1527
01:02:03,680 --> 01:02:07,280
there's no way of forbidding them and

1528
01:02:07,280 --> 01:02:10,720
in any network where that they happen

1529
01:02:10,720 --> 01:02:13,039
then you can make no assumptions about

1530
01:02:13,039 --> 01:02:14,559
that first nibble

1531
01:02:14,559 --> 01:02:17,280
so as a way of organizing stuff this is

1532
01:02:17,280 --> 01:02:19,440
fine within the scope of the work we're

1533
01:02:19,440 --> 01:02:21,920
doing but i am really worried if anyone

1534
01:02:21,920 --> 01:02:25,119
makes a a serious forwarding decision

1535
01:02:25,119 --> 01:02:28,079
based on one of those on the meaning of

1536
01:02:28,079 --> 01:02:28,960
one of

1537
01:02:28,960 --> 01:02:30,559
of kuriti's um

1538
01:02:30,559 --> 01:02:34,440
uh mf um

1539
01:02:36,960 --> 01:02:37,920
um

1540
01:02:37,920 --> 01:02:40,960
without uh you know many other

1541
01:02:40,960 --> 01:02:43,039
qualifying things that tell them that

1542
01:02:43,039 --> 01:02:45,200
this is not a regular ethernet packet

1543
01:02:45,200 --> 01:02:48,640
they happen to pick up

1544
01:02:48,640 --> 01:02:51,280
i agree i i think the fact that we

1545
01:02:51,280 --> 01:02:54,000
allowed um you know in the way in the

1546
01:02:54,000 --> 01:02:55,440
beginning we said there's not going to

1547
01:02:55,440 --> 01:02:57,839
be a protocol field in mpls

1548
01:02:57,839 --> 01:02:59,920
and you know you could carry naked

1549
01:02:59,920 --> 01:03:01,440
packets

1550
01:03:01,440 --> 01:03:03,440
after the label stack

1551
01:03:03,440 --> 01:03:05,680
kind of bind our hands a little bit

1552
01:03:05,680 --> 01:03:09,200
but we need to move forward

1553
01:03:09,200 --> 01:03:11,440
but i don't see how we can move forward

1554
01:03:11,440 --> 01:03:12,480
um

1555
01:03:12,480 --> 01:03:14,319
and abide by the other important

1556
01:03:14,319 --> 01:03:16,640
principle that we've always had in mpls

1557
01:03:16,640 --> 01:03:18,799
which is that we don't obsolete any

1558
01:03:18,799 --> 01:03:20,960
existing lsps

1559
01:03:20,960 --> 01:03:22,319
right

1560
01:03:22,319 --> 01:03:24,079
let's do it we really do need to move

1561
01:03:24,079 --> 01:03:24,880
yeah

1562
01:03:24,880 --> 01:03:26,400
yeah yeah yeah

1563
01:03:26,400 --> 01:03:29,760
we'll discuss it at a later time

1564
01:03:29,760 --> 01:03:30,559
sure

1565
01:03:30,559 --> 01:03:31,440
okay

1566
01:03:31,440 --> 01:03:35,119
so thanks uh andy for the next slides um

1567
01:03:35,119 --> 01:03:37,280
so here this is about the forwarding

1568
01:03:37,280 --> 01:03:39,119
actions indicators

1569
01:03:39,119 --> 01:03:41,839
um so next slide

1570
01:03:41,839 --> 01:03:42,839
wait one

1571
01:03:42,839 --> 01:03:44,640
second

1572
01:03:44,640 --> 01:03:45,760
yeah

1573
01:03:45,760 --> 01:03:48,079
so there was discussions both in and

1574
01:03:48,079 --> 01:03:51,440
outside the open dt the open design team

1575
01:03:51,440 --> 01:03:54,319
regarding the isd and the psd

1576
01:03:54,319 --> 01:03:55,760
and so i thought it would be a good

1577
01:03:55,760 --> 01:03:58,079
place to bring this together

1578
01:03:58,079 --> 01:04:00,480
so some of the questions were

1579
01:04:00,480 --> 01:04:02,880
you know when should some

1580
01:04:02,880 --> 01:04:05,440
indicators or data be in the isd versus

1581
01:04:05,440 --> 01:04:07,839
the psd and we've had a little bit of

1582
01:04:07,839 --> 01:04:09,520
talk about this but

1583
01:04:09,520 --> 01:04:11,440
maybe not enough so

1584
01:04:11,440 --> 01:04:13,760
i think we need to do more of that

1585
01:04:13,760 --> 01:04:15,520
the other is what should be said about

1586
01:04:15,520 --> 01:04:18,160
the psd in the isc so in the in-stack

1587
01:04:18,160 --> 01:04:20,079
data what do i say about the post-stack

1588
01:04:20,079 --> 01:04:21,039
data

1589
01:04:21,039 --> 01:04:23,200
and one big consideration there is the

1590
01:04:23,200 --> 01:04:25,440
in-stack data is much closer to hand

1591
01:04:25,440 --> 01:04:27,599
typically than the post-track data which

1592
01:04:27,599 --> 01:04:29,920
you have to pass the entire start to get

1593
01:04:29,920 --> 01:04:31,839
to

1594
01:04:31,839 --> 01:04:33,520
um the third one is what about

1595
01:04:33,520 --> 01:04:36,400
extensions i mean you know initial the

1596
01:04:36,400 --> 01:04:38,160
very first version

1597
01:04:38,160 --> 01:04:39,200
had

1598
01:04:39,200 --> 01:04:41,200
seven or eight um

1599
01:04:41,200 --> 01:04:44,079
indicator fields uh sort of present

1600
01:04:44,079 --> 01:04:46,079
there was a field that said here's how

1601
01:04:46,079 --> 01:04:47,920
you extend it but we haven't gone into

1602
01:04:47,920 --> 01:04:50,079
details about that so

1603
01:04:50,079 --> 01:04:52,319
what if we need more indicators

1604
01:04:52,319 --> 01:04:53,440
in the same

1605
01:04:53,440 --> 01:04:55,680
uh fai block

1606
01:04:55,680 --> 01:04:57,440
and then

1607
01:04:57,440 --> 01:04:58,400
another

1608
01:04:58,400 --> 01:05:00,799
discussion was around what about

1609
01:05:00,799 --> 01:05:03,599
standard indicators that someone doesn't

1610
01:05:03,599 --> 01:05:04,640
understand

1611
01:05:04,640 --> 01:05:06,000
and then what about non-standard

1612
01:05:06,000 --> 01:05:08,000
indicators sort of user defined or

1613
01:05:08,000 --> 01:05:10,559
provider defined indicators i think that

1614
01:05:10,559 --> 01:05:12,960
would be a very nice thing to add but

1615
01:05:12,960 --> 01:05:15,200
how would you handle it

1616
01:05:15,200 --> 01:05:16,160
so

1617
01:05:16,160 --> 01:05:17,280
sort of trying to bring all this

1618
01:05:17,280 --> 01:05:22,200
together if you go to the next slide

1619
01:05:22,640 --> 01:05:24,400
let's start with the philosophy of the

1620
01:05:24,400 --> 01:05:27,520
isd the isd is

1621
01:05:27,520 --> 01:05:29,520
data that you want to process with some

1622
01:05:29,520 --> 01:05:30,640
urgency

1623
01:05:30,640 --> 01:05:32,960
you're willing to live in a more

1624
01:05:32,960 --> 01:05:34,559
constrained environment you're trying to

1625
01:05:34,559 --> 01:05:37,599
fit within ideally within a single label

1626
01:05:37,599 --> 01:05:41,280
including the pcttl fields

1627
01:05:41,280 --> 01:05:42,880
so you want to encode this very

1628
01:05:42,880 --> 01:05:45,280
compactly compactly you want to process

1629
01:05:45,280 --> 01:05:47,280
it pretty quickly

1630
01:05:47,280 --> 01:05:48,720
and you must

1631
01:05:48,720 --> 01:05:50,640
respect the bottom of trackpad because

1632
01:05:50,640 --> 01:05:53,119
you are still looking at what

1633
01:05:53,119 --> 01:05:55,839
theoretically seems to be a label

1634
01:05:55,839 --> 01:05:57,839
so the instax data

1635
01:05:57,839 --> 01:06:00,559
you want to be very careful with

1636
01:06:00,559 --> 01:06:03,520
passimonious with

1637
01:06:03,520 --> 01:06:06,640
and you want to process it quickly

1638
01:06:06,640 --> 01:06:09,200
next slide

1639
01:06:09,680 --> 01:06:12,400
the post stack data you have you know

1640
01:06:12,400 --> 01:06:14,400
your label stack is over i mean you've

1641
01:06:14,400 --> 01:06:17,599
you've hit the bottom of stack label and

1642
01:06:17,599 --> 01:06:19,839
now you can you can be a lot freer with

1643
01:06:19,839 --> 01:06:22,079
things so it does not have to be ultra

1644
01:06:22,079 --> 01:06:23,680
compact you still don't want to carry

1645
01:06:23,680 --> 01:06:26,160
you know gigabytes of data in there but

1646
01:06:26,160 --> 01:06:28,559
uh it doesn't have to sort of fit into i

1647
01:06:28,559 --> 01:06:30,319
look like a label even though i have all

1648
01:06:30,319 --> 01:06:32,799
this other information you don't have to

1649
01:06:32,799 --> 01:06:34,640
respect the bottom stack but so it's a

1650
01:06:34,640 --> 01:06:37,039
lot uh easier to work with

1651
01:06:37,039 --> 01:06:39,520
um ideally at least i think it should be

1652
01:06:39,520 --> 01:06:42,559
self-describing so a tlb type approach

1653
01:06:42,559 --> 01:06:45,359
and you know we can have the discussion

1654
01:06:45,359 --> 01:06:47,599
you know is it a next header is it a tlb

1655
01:06:47,599 --> 01:06:49,200
is it something else

1656
01:06:49,200 --> 01:06:51,920
but that is reasonable we we now have

1657
01:06:51,920 --> 01:06:54,799
more space to work with

1658
01:06:54,799 --> 01:06:56,880
so given this we don't have to put too

1659
01:06:56,880 --> 01:06:59,680
much information in the isd

1660
01:06:59,680 --> 01:07:02,079
in the in stack data about what's coming

1661
01:07:02,079 --> 01:07:04,960
after the postdac data

1662
01:07:04,960 --> 01:07:06,960
and if you put a lot of information

1663
01:07:06,960 --> 01:07:09,119
there it can also lead to confusion if

1664
01:07:09,119 --> 01:07:11,280
the in-stack data says oh and by the way

1665
01:07:11,280 --> 01:07:14,240
expect in-situ om and i'm just picking

1666
01:07:14,240 --> 01:07:16,079
that as the first thing that comes to

1667
01:07:16,079 --> 01:07:19,280
mind uh in the i in the psd and the ps3

1668
01:07:19,280 --> 01:07:22,000
doesn't have it you know that what am i

1669
01:07:22,000 --> 01:07:24,400
supposed to do or if it says there isn't

1670
01:07:24,400 --> 01:07:27,440
any uh institute data and then suddenly

1671
01:07:27,440 --> 01:07:29,440
when you're passing it you find it so

1672
01:07:29,440 --> 01:07:32,000
it's probably better not to repeat those

1673
01:07:32,000 --> 01:07:34,960
things and lead to confusion

1674
01:07:34,960 --> 01:07:38,079
next next slide

1675
01:07:38,880 --> 01:07:41,119
so one suggestion is the indicators

1676
01:07:41,119 --> 01:07:43,119
should only say who should look at the

1677
01:07:43,119 --> 01:07:45,039
psd

1678
01:07:45,039 --> 01:07:47,280
it's an optimization just because the

1679
01:07:47,280 --> 01:07:49,520
psd is so far away or potentially far

1680
01:07:49,520 --> 01:07:52,640
away and so uh the worst case is that

1681
01:07:52,640 --> 01:07:55,039
every hop looks at the plc which means

1682
01:07:55,039 --> 01:07:57,039
you scan the entire label stack you come

1683
01:07:57,039 --> 01:07:59,359
to the bottom label and say okay now i

1684
01:07:59,359 --> 01:08:01,039
have the psd i'm going to scan it and

1685
01:08:01,039 --> 01:08:04,240
see if there's something interesting

1686
01:08:04,240 --> 01:08:06,880
but ideally you know you could optimize

1687
01:08:06,880 --> 01:08:08,720
that away by saying i'm going to use two

1688
01:08:08,720 --> 01:08:11,520
bits zero zero

1689
01:08:11,520 --> 01:08:12,400
meaning

1690
01:08:12,400 --> 01:08:14,480
you could go look at the psd

1691
01:08:14,480 --> 01:08:16,238
but you don't have to

1692
01:08:16,238 --> 01:08:19,520
zero one saying ah if you if you want to

1693
01:08:19,520 --> 01:08:21,759
uh you can but if you're the egress you

1694
01:08:21,759 --> 01:08:25,759
must and in a sense that's kind of a

1695
01:08:25,759 --> 01:08:27,839
overkill because the egress

1696
01:08:27,839 --> 01:08:29,839
is going to see it anyway

1697
01:08:29,839 --> 01:08:32,880
um if there's one zero uh every hop

1698
01:08:32,880 --> 01:08:34,880
should look at the psd

1699
01:08:34,880 --> 01:08:36,960
uh and then if there's one one every hub

1700
01:08:36,960 --> 01:08:39,439
must look at the psd and this goes back

1701
01:08:39,439 --> 01:08:42,158
to what matthew was saying

1702
01:08:42,158 --> 01:08:43,839
in in terms of

1703
01:08:43,839 --> 01:08:45,439
these are the things that i don't want

1704
01:08:45,439 --> 01:08:47,279
to send to a node that doesn't know how

1705
01:08:47,279 --> 01:08:48,560
to process it

1706
01:08:48,560 --> 01:08:50,479
the other ones are you know

1707
01:08:50,479 --> 01:08:53,279
well maybe zero one about the egress but

1708
01:08:53,279 --> 01:08:55,520
that's only the egress if you think

1709
01:08:55,520 --> 01:08:57,359
about the per you know the hop by hop

1710
01:08:57,359 --> 01:08:59,920
thing and if you have a must if you

1711
01:08:59,920 --> 01:09:01,600
don't understand this you're gonna drop

1712
01:09:01,600 --> 01:09:02,640
the packet

1713
01:09:02,640 --> 01:09:06,000
then don't even route it over knows that

1714
01:09:06,000 --> 01:09:08,080
potentially won't understand it so this

1715
01:09:08,080 --> 01:09:10,319
is suggestion that you have these two

1716
01:09:10,319 --> 01:09:13,359
bits in the isd that tell you

1717
01:09:13,359 --> 01:09:16,479
who should or may you know may should or

1718
01:09:16,479 --> 01:09:18,399
must look at the

1719
01:09:18,399 --> 01:09:20,640
psd but it doesn't tell you anything

1720
01:09:20,640 --> 01:09:23,279
more than that um because you know it's

1721
01:09:23,279 --> 01:09:24,158
it's

1722
01:09:24,158 --> 01:09:25,759
you're going to look at the psd when the

1723
01:09:25,759 --> 01:09:27,679
time comes if you have

1724
01:09:27,679 --> 01:09:30,560
cycles to do it etc uh you really want

1725
01:09:30,560 --> 01:09:32,560
to process the ist because that's what's

1726
01:09:32,560 --> 01:09:34,640
much more immediate

1727
01:09:34,640 --> 01:09:37,199
next slide

1728
01:09:38,238 --> 01:09:39,198
um

1729
01:09:39,198 --> 01:09:41,040
so there's this whole other thing that

1730
01:09:41,040 --> 01:09:43,120
we're talking about handling extensions

1731
01:09:43,120 --> 01:09:46,479
and so those in the first uh version the

1732
01:09:46,479 --> 01:09:48,319
zero zero version of the draft it said

1733
01:09:48,319 --> 01:09:49,839
there could be extensions but didn't

1734
01:09:49,839 --> 01:09:51,040
talk about it

1735
01:09:51,040 --> 01:09:53,679
in version one uh we started trying to

1736
01:09:53,679 --> 01:09:55,199
put more into it

1737
01:09:55,199 --> 01:09:56,400
so

1738
01:09:56,400 --> 01:09:58,880
the idea was to put an ebit that says if

1739
01:09:58,880 --> 01:10:00,640
if the e beat is

1740
01:10:00,640 --> 01:10:02,719
zero that means you're done and ebit is

1741
01:10:02,719 --> 01:10:05,120
one that means there's more bits and the

1742
01:10:05,120 --> 01:10:06,960
next one will also have an e bit and so

1743
01:10:06,960 --> 01:10:09,440
on so you can keep processing indicator

1744
01:10:09,440 --> 01:10:11,040
flags

1745
01:10:11,040 --> 01:10:13,520
until the e bit goes back to zero so

1746
01:10:13,520 --> 01:10:16,000
it's sort of uh it's an inverse of how

1747
01:10:16,000 --> 01:10:18,400
the bottom of stack bit works and so i

1748
01:10:18,400 --> 01:10:21,199
decided what if we flip it and then we

1749
01:10:21,199 --> 01:10:24,000
can reuse this bit for other things

1750
01:10:24,000 --> 01:10:26,080
so because we have this question of

1751
01:10:26,080 --> 01:10:28,080
here's a standard data field but you

1752
01:10:28,080 --> 01:10:30,640
know maybe we have 20 data fields but a

1753
01:10:30,640 --> 01:10:32,000
particular implementation only

1754
01:10:32,000 --> 01:10:33,760
understands three of them

1755
01:10:33,760 --> 01:10:35,920
how would it know when the data is over

1756
01:10:35,920 --> 01:10:39,120
and the label stack continues as usual

1757
01:10:39,120 --> 01:10:42,800
um so so um i decided let's invert this

1758
01:10:42,800 --> 01:10:46,320
and use this bit for more than just

1759
01:10:46,320 --> 01:10:50,159
extensions so next slide please

1760
01:10:50,320 --> 01:10:52,480
and and this was a result of lots of

1761
01:10:52,480 --> 01:10:54,080
different discussions both in the

1762
01:10:54,080 --> 01:10:55,600
working group and outside the working

1763
01:10:55,600 --> 01:10:56,560
group

1764
01:10:56,560 --> 01:10:59,760
so the current thing is that you have uh

1765
01:10:59,760 --> 01:11:01,120
this what

1766
01:11:01,120 --> 01:11:02,960
well it's not the current if you if you

1767
01:11:02,960 --> 01:11:05,520
flip the in ebit you have something that

1768
01:11:05,520 --> 01:11:07,920
says this is the bottom of indicators so

1769
01:11:07,920 --> 01:11:09,600
if you flip the current meaning of the

1770
01:11:09,600 --> 01:11:11,760
ebit as long as it's zero that you have

1771
01:11:11,760 --> 01:11:14,320
more and when it says one you're done so

1772
01:11:14,320 --> 01:11:16,400
if you have a very very simple

1773
01:11:16,400 --> 01:11:19,920
fai label uh with just you know three or

1774
01:11:19,920 --> 01:11:22,960
four um indicator flags the very first

1775
01:11:22,960 --> 01:11:24,800
one would have the one set

1776
01:11:24,800 --> 01:11:26,640
but if you have more you put zero and

1777
01:11:26,640 --> 01:11:28,480
then you have more bits and then you

1778
01:11:28,480 --> 01:11:30,080
know if you have even more then you put

1779
01:11:30,080 --> 01:11:32,080
zero again and then finally you say one

1780
01:11:32,080 --> 01:11:33,360
you say okay

1781
01:11:33,360 --> 01:11:35,600
i'm done with the indicator section the

1782
01:11:35,600 --> 01:11:38,480
flag section so you can see on the on

1783
01:11:38,480 --> 01:11:41,040
the right that's the flag section so the

1784
01:11:41,040 --> 01:11:43,040
next thing you have is the standard data

1785
01:11:43,040 --> 01:11:45,520
corresponding to those flags i have this

1786
01:11:45,520 --> 01:11:47,520
data so there might be you know entropy

1787
01:11:47,520 --> 01:11:49,199
label there might be

1788
01:11:49,199 --> 01:11:52,560
a slice identifier they might be

1789
01:11:52,560 --> 01:11:54,480
you know whatever other standard data we

1790
01:11:54,480 --> 01:11:56,640
have but again you might have a problem

1791
01:11:56,640 --> 01:11:58,719
that someone says i don't i mean where

1792
01:11:58,719 --> 01:12:00,320
it starts is pretty simple it's where

1793
01:12:00,320 --> 01:12:03,760
the indicators end where it ends well i

1794
01:12:03,760 --> 01:12:05,600
don't know because i know only how to

1795
01:12:05,600 --> 01:12:08,400
process these two bits and so i get 16

1796
01:12:08,400 --> 01:12:11,840
bits or 32 bits or whatever and then

1797
01:12:11,840 --> 01:12:14,000
after that if there's more i have no

1798
01:12:14,000 --> 01:12:15,840
clue so what do i do

1799
01:12:15,840 --> 01:12:18,159
and we don't have a tlv structure so how

1800
01:12:18,159 --> 01:12:19,840
do i manage that

1801
01:12:19,840 --> 01:12:21,440
so um

1802
01:12:21,440 --> 01:12:23,280
you can do that

1803
01:12:23,280 --> 01:12:27,040
essentially by taking this idea further

1804
01:12:27,040 --> 01:12:30,159
so next slide please

1805
01:12:32,960 --> 01:12:35,520
yeah i'm just saying that again what if

1806
01:12:35,520 --> 01:12:38,239
there are 50 standards fields and i only

1807
01:12:38,239 --> 01:12:40,800
understand five of them how how do i

1808
01:12:40,800 --> 01:12:42,400
deal with that what if there is

1809
01:12:42,400 --> 01:12:44,080
user-defined data how does an

1810
01:12:44,080 --> 01:12:45,920
implementation know where it starts and

1811
01:12:45,920 --> 01:12:47,280
where it ends

1812
01:12:47,280 --> 01:12:49,199
so let's reuse this

1813
01:12:49,199 --> 01:12:50,080
off

1814
01:12:50,080 --> 01:12:51,679
kind of

1815
01:12:51,679 --> 01:12:52,480
thing

1816
01:12:52,480 --> 01:12:54,800
and for all these purposes so the next

1817
01:12:54,800 --> 01:12:57,440
slide please

1818
01:12:57,760 --> 01:13:00,800
so this is what it would look like so

1819
01:13:00,800 --> 01:13:03,120
in parallel you can see the end of stack

1820
01:13:03,120 --> 01:13:05,440
bits which are going to be all zero

1821
01:13:05,440 --> 01:13:06,880
there will be some labels in the front

1822
01:13:06,880 --> 01:13:08,960
some labels at the bottom uh and then

1823
01:13:08,960 --> 01:13:10,800
the last label which has the end of

1824
01:13:10,800 --> 01:13:13,600
stack or bottom of stack bit set

1825
01:13:13,600 --> 01:13:15,199
and then you have this thing that is the

1826
01:13:15,199 --> 01:13:18,239
bottom of section bit and so in this one

1827
01:13:18,239 --> 01:13:21,520
fai block you have zero zero zero one

1828
01:13:21,520 --> 01:13:23,840
that says okay these are indicators then

1829
01:13:23,840 --> 01:13:26,000
the meaning flips and at zero zero zero

1830
01:13:26,000 --> 01:13:28,480
one that's a standard data so standard

1831
01:13:28,480 --> 01:13:31,040
data starts when the indicators end till

1832
01:13:31,040 --> 01:13:32,400
the standard data

1833
01:13:32,400 --> 01:13:35,040
bottom of section bit goes back to one

1834
01:13:35,040 --> 01:13:36,719
and then you have zero zero zero and

1835
01:13:36,719 --> 01:13:39,280
then uh one that says this is user

1836
01:13:39,280 --> 01:13:40,719
defined data

1837
01:13:40,719 --> 01:13:43,520
so if you reuse that bit then what you

1838
01:13:43,520 --> 01:13:46,320
basically have is 30 bits per label that

1839
01:13:46,320 --> 01:13:47,760
you can play with

1840
01:13:47,760 --> 01:13:49,120
for anything

1841
01:13:49,120 --> 01:13:50,080
and

1842
01:13:50,080 --> 01:13:53,679
these these uh the end of stack bit is

1843
01:13:53,679 --> 01:13:55,600
completely has to be

1844
01:13:55,600 --> 01:13:57,840
preserved yeah just so that your label

1845
01:13:57,840 --> 01:14:00,640
stack the entire label stack is

1846
01:14:00,640 --> 01:14:01,920
sacrosanct

1847
01:14:01,920 --> 01:14:04,400
and then you have this end of section

1848
01:14:04,400 --> 01:14:06,560
bits that tell you i've got the

1849
01:14:06,560 --> 01:14:08,159
indicator section i've got a standard

1850
01:14:08,159 --> 01:14:11,520
data section i've got user-defined data

1851
01:14:11,520 --> 01:14:13,920
again this is just a proposal and i know

1852
01:14:13,920 --> 01:14:15,920
andy will say write it down so that

1853
01:14:15,920 --> 01:14:18,080
people can you know throw

1854
01:14:18,080 --> 01:14:20,320
things at it but and i totally agree but

1855
01:14:20,320 --> 01:14:22,320
i wanted to present it here so that

1856
01:14:22,320 --> 01:14:25,920
people have an idea what's coming up

1857
01:14:25,920 --> 01:14:28,800
next slide please

1858
01:14:28,800 --> 01:14:32,239
so so here's just a quick uh view of uh

1859
01:14:32,239 --> 01:14:35,520
someone who is looking at this the cross

1860
01:14:35,520 --> 01:14:37,920
hatches that are you know top

1861
01:14:37,920 --> 01:14:39,600
right to bottom left

1862
01:14:39,600 --> 01:14:42,239
in orange are things you understand the

1863
01:14:42,239 --> 01:14:44,560
cross hatches that are top left to

1864
01:14:44,560 --> 01:14:46,080
bottom right

1865
01:14:46,080 --> 01:14:48,480
in red are things you don't understand

1866
01:14:48,480 --> 01:14:51,360
so if you look at the first fai label it

1867
01:14:51,360 --> 01:14:54,719
has these 11 bits that you should be

1868
01:14:54,719 --> 01:14:56,640
trying to work with

1869
01:14:56,640 --> 01:14:58,320
and you understand some of them but not

1870
01:14:58,320 --> 01:15:01,040
all of them there's some extensions so

1871
01:15:01,040 --> 01:15:03,040
you say fine i'm going to process what i

1872
01:15:03,040 --> 01:15:04,880
understand i'm just going to skip the

1873
01:15:04,880 --> 01:15:07,920
rest i know that when i get to that

1874
01:15:07,920 --> 01:15:11,760
b bit equals 1 then the flags are over

1875
01:15:11,760 --> 01:15:13,600
and then i start processing the standard

1876
01:15:13,600 --> 01:15:15,840
data i only understand a little bit of

1877
01:15:15,840 --> 01:15:17,920
it but i know if i keep processing until

1878
01:15:17,920 --> 01:15:20,640
the b bit is one again standard data is

1879
01:15:20,640 --> 01:15:22,800
over i do understand a little bit of the

1880
01:15:22,800 --> 01:15:25,920
policy stuff or the user-defined stuff

1881
01:15:25,920 --> 01:15:28,800
again i know when that is over and so i

1882
01:15:28,800 --> 01:15:31,120
have come to the end of the fa approach

1883
01:15:31,120 --> 01:15:34,560
so by reusing that one bit i can define

1884
01:15:34,560 --> 01:15:37,520
break up my fai block into the flag

1885
01:15:37,520 --> 01:15:39,679
section the standard data section and

1886
01:15:39,679 --> 01:15:42,640
the user-defined data section

1887
01:15:42,640 --> 01:15:44,880
and again this is just an illustration

1888
01:15:44,880 --> 01:15:47,840
of how this proposal would work

1889
01:15:47,840 --> 01:15:49,760
so questions

1890
01:15:49,760 --> 01:15:51,920
comments thank you very much i actually

1891
01:15:51,920 --> 01:15:54,960
have i actually have the queue closed

1892
01:15:54,960 --> 01:15:57,120
and the reason is that we have

1893
01:15:57,120 --> 01:15:59,600
that we have to move on to john's talk

1894
01:15:59,600 --> 01:16:01,360
but if people have any questions or

1895
01:16:01,360 --> 01:16:04,239
comments uh please wait and write it

1896
01:16:04,239 --> 01:16:06,640
down and then you can ask it after

1897
01:16:06,640 --> 01:16:08,000
john's talk

1898
01:16:08,000 --> 01:16:09,360
so with that

1899
01:16:09,360 --> 01:16:12,080
john if you take the mic and i will put

1900
01:16:12,080 --> 01:16:15,480
up your slides

1901
01:16:23,520 --> 01:16:26,080
john are you there

1902
01:16:26,080 --> 01:16:29,120
if um adrian told me that john was

1903
01:16:29,120 --> 01:16:30,560
having issues

1904
01:16:30,560 --> 01:16:32,239
so if john if you're still having issues

1905
01:16:32,239 --> 01:16:35,839
then adrian can you speak

1906
01:16:36,000 --> 01:16:38,480
i can

1907
01:16:41,280 --> 01:16:45,120
so i think i will

1908
01:16:47,120 --> 01:16:49,440
uh all right then um

1909
01:16:49,440 --> 01:16:50,960
wait sean

1910
01:16:50,960 --> 01:16:52,960
what is his hand up well john has his

1911
01:16:52,960 --> 01:16:56,080
hand up john can you put your audio on

1912
01:16:56,080 --> 01:16:58,000
uh okay there we go

1913
01:16:58,000 --> 01:16:59,520
i'm sorry i was logged out i was in the

1914
01:16:59,520 --> 01:17:01,360
middle of logging back in again

1915
01:17:01,360 --> 01:17:04,640
okay john then you can take it over

1916
01:17:04,640 --> 01:17:07,840
okay uh next slide

1917
01:17:10,400 --> 01:17:12,320
okay uh

1918
01:17:12,320 --> 01:17:14,719
first thing is this this work on network

1919
01:17:14,719 --> 01:17:18,159
functions is derived from kurdish drafts

1920
01:17:18,159 --> 01:17:20,000
uh where you basically have a special

1921
01:17:20,000 --> 01:17:21,679
purpose label and then a bunch of bit

1922
01:17:21,679 --> 01:17:24,640
flags that identify forwarding actions

1923
01:17:24,640 --> 01:17:26,239
uh and what adrian and i are trying to

1924
01:17:26,239 --> 01:17:28,000
do is basically just

1925
01:17:28,000 --> 01:17:31,840
generalize it and flush it out and so we

1926
01:17:31,840 --> 01:17:33,520
are using the term network functions

1927
01:17:33,520 --> 01:17:35,600
rather than forwarding actions

1928
01:17:35,600 --> 01:17:38,239
uh we have two special purpose labels

1929
01:17:38,239 --> 01:17:40,480
one is hop by hop and one is end to end

1930
01:17:40,480 --> 01:17:42,719
and the p nodes only look at the uh hop

1931
01:17:42,719 --> 01:17:45,040
i hop special purpose levels

1932
01:17:45,040 --> 01:17:47,280
this was a suggestion from both adrian

1933
01:17:47,280 --> 01:17:48,640
and stewart

1934
01:17:48,640 --> 01:17:50,560
and basically it allows both types of

1935
01:17:50,560 --> 01:17:52,960
network functions to evolve

1936
01:17:52,960 --> 01:17:55,520
independently without any interference

1937
01:17:55,520 --> 01:17:58,239
and both are completely extensible and

1938
01:17:58,239 --> 01:18:00,159
we are not changing non-label fields in

1939
01:18:00,159 --> 01:18:02,480
the spls

1940
01:18:02,480 --> 01:18:04,560
uh and then what's going to happen is

1941
01:18:04,560 --> 01:18:06,960
when you define a network function

1942
01:18:06,960 --> 01:18:08,000
you're going to use it's going to be

1943
01:18:08,000 --> 01:18:10,480
defined in an rfc of some sort

1944
01:18:10,480 --> 01:18:12,719
we defined whether it's hot by hop or

1945
01:18:12,719 --> 01:18:14,320
end to end

1946
01:18:14,320 --> 01:18:15,360
uh

1947
01:18:15,360 --> 01:18:16,640
what bit it's going to use in the

1948
01:18:16,640 --> 01:18:18,080
network function flags which i'll

1949
01:18:18,080 --> 01:18:20,159
describe below

1950
01:18:20,159 --> 01:18:22,880
and whether it has ancillary data

1951
01:18:22,880 --> 01:18:24,960
if it does have ancillary data

1952
01:18:24,960 --> 01:18:26,640
what is the ancillary data is it in

1953
01:18:26,640 --> 01:18:28,400
stack or after stack

1954
01:18:28,400 --> 01:18:30,560
so that you basically will know you

1955
01:18:30,560 --> 01:18:33,520
don't need any indicators you will know

1956
01:18:33,520 --> 01:18:34,560
uh

1957
01:18:34,560 --> 01:18:36,320
all of the characteristics of the

1958
01:18:36,320 --> 01:18:39,199
ancillary data just from its definition

1959
01:18:39,199 --> 01:18:41,839
next slide please

1960
01:18:42,960 --> 01:18:44,960
um so we have this network function

1961
01:18:44,960 --> 01:18:46,800
label stock black

1962
01:18:46,800 --> 01:18:48,960
which is an spl

1963
01:18:48,960 --> 01:18:51,280
uh network function flags and in stack

1964
01:18:51,280 --> 01:18:52,719
ancillary data

1965
01:18:52,719 --> 01:18:56,239
um the spls we already talked about uh

1966
01:18:56,239 --> 01:18:59,280
the network function flags is basically

1967
01:18:59,280 --> 01:19:01,519
uh

1968
01:19:01,920 --> 01:19:03,440
it's what we're gonna it's gonna be

1969
01:19:03,440 --> 01:19:05,199
basically a registry

1970
01:19:05,199 --> 01:19:07,280
and whenever we define a new network

1971
01:19:07,280 --> 01:19:09,120
function we're going to define a new bit

1972
01:19:09,120 --> 01:19:12,159
which identifies that network function

1973
01:19:12,159 --> 01:19:13,600
it's in a set of

1974
01:19:13,600 --> 01:19:16,159
one or more label stack entries and we

1975
01:19:16,159 --> 01:19:17,760
have a continue bit which indicates that

1976
01:19:17,760 --> 01:19:19,199
there's another

1977
01:19:19,199 --> 01:19:20,840
label stack entry

1978
01:19:20,840 --> 01:19:24,400
with network function flags in it

1979
01:19:24,400 --> 01:19:28,799
then the ancillary data is 31 bits of

1980
01:19:29,199 --> 01:19:30,800
data ancillary data for each network

1981
01:19:30,800 --> 01:19:32,800
function whose network function flag is

1982
01:19:32,800 --> 01:19:33,600
set

1983
01:19:33,600 --> 01:19:35,440
and the ancillary data is in the same

1984
01:19:35,440 --> 01:19:38,960
order as the network function flags

1985
01:19:39,199 --> 01:19:40,800
and we had said that it was diluted by

1986
01:19:40,800 --> 01:19:43,199
another spl or label stack entry with

1987
01:19:43,199 --> 01:19:45,440
bottom and stack or ancillary data with

1988
01:19:45,440 --> 01:19:47,360
bottom of stack

1989
01:19:47,360 --> 01:19:49,360
there's actually a couple changes that

1990
01:19:49,360 --> 01:19:50,960
have been made in conversations with

1991
01:19:50,960 --> 01:19:52,560
adrian and stewart

1992
01:19:52,560 --> 01:19:54,320
over the last couple of days

1993
01:19:54,320 --> 01:19:55,679
one is that

1994
01:19:55,679 --> 01:19:57,440
there's no reason that the we couldn't

1995
01:19:57,440 --> 01:19:59,040
have uh

1996
01:19:59,040 --> 01:20:01,040
two or more label stock entries for a

1997
01:20:01,040 --> 01:20:04,159
given network function

1998
01:20:04,239 --> 01:20:06,639
and the other thing is that we probably

1999
01:20:06,639 --> 01:20:08,159
want to add the

2000
01:20:08,159 --> 01:20:10,880
continuation bit for the ancillary data

2001
01:20:10,880 --> 01:20:13,120
so that we will know precisely even

2002
01:20:13,120 --> 01:20:15,040
though that doesn't understand the

2003
01:20:15,040 --> 01:20:16,880
ancillary data we'll actually know when

2004
01:20:16,880 --> 01:20:19,440
the label stock black label stack block

2005
01:20:19,440 --> 01:20:20,800
ends

2006
01:20:20,800 --> 01:20:22,960
uh anyway at the bottom there's just a

2007
01:20:22,960 --> 01:20:25,199
picture showing what it looks like uh

2008
01:20:25,199 --> 01:20:28,000
next stack please

2009
01:20:29,120 --> 01:20:32,960
uh and the way it's gonna work is that

2010
01:20:32,960 --> 01:20:35,679
the network function flags are in order

2011
01:20:35,679 --> 01:20:37,360
and a given node will understand the

2012
01:20:37,360 --> 01:20:39,360
network function flags up to a given bit

2013
01:20:39,360 --> 01:20:40,560
position

2014
01:20:40,560 --> 01:20:42,080
it doesn't need to support them but it

2015
01:20:42,080 --> 01:20:43,360
understands

2016
01:20:43,360 --> 01:20:44,960
what they are and what their ancillary

2017
01:20:44,960 --> 01:20:46,560
data looks like

2018
01:20:46,560 --> 01:20:49,520
and so this allows the node that doesn't

2019
01:20:49,520 --> 01:20:51,199
support a given function to just skip

2020
01:20:51,199 --> 01:20:52,480
over the ancillary data for that

2021
01:20:52,480 --> 01:20:53,920
function

2022
01:20:53,920 --> 01:20:56,080
and then the label stock

2023
01:20:56,080 --> 01:20:57,679
label stack block

2024
01:20:57,679 --> 01:21:00,159
is terminated for all the function flags

2025
01:21:00,159 --> 01:21:02,239
greater than n basically

2026
01:21:02,239 --> 01:21:05,280
the labels the label stack block goes

2027
01:21:05,280 --> 01:21:07,600
opaque when

2028
01:21:07,600 --> 01:21:10,400
a given p router doesn't understand

2029
01:21:10,400 --> 01:21:12,960
any additional network functions

2030
01:21:12,960 --> 01:21:15,679
and so what that uh means is there will

2031
01:21:15,679 --> 01:21:18,960
be basically a given set of

2032
01:21:18,960 --> 01:21:21,600
network function file a set m whose

2033
01:21:21,600 --> 01:21:23,600
network function flags are set

2034
01:21:23,600 --> 01:21:25,760
and understood by that node

2035
01:21:25,760 --> 01:21:28,159
and so that basically says the size of m

2036
01:21:28,159 --> 01:21:30,159
is less than or equal to n

2037
01:21:30,159 --> 01:21:32,080
and then within m

2038
01:21:32,080 --> 01:21:33,840
there's going to be three sets there's a

2039
01:21:33,840 --> 01:21:35,840
set x which is network function flags

2040
01:21:35,840 --> 01:21:38,719
with no without ancillary data

2041
01:21:38,719 --> 01:21:40,560
network function flags with in stack

2042
01:21:40,560 --> 01:21:43,440
ancillary data and um

2043
01:21:43,440 --> 01:21:45,280
network function flags with after stack

2044
01:21:45,280 --> 01:21:47,040
data

2045
01:21:47,040 --> 01:21:49,920
and so basically you will have a set of

2046
01:21:49,920 --> 01:21:52,320
network function flags that are set

2047
01:21:52,320 --> 01:21:54,000
and then you will have

2048
01:21:54,000 --> 01:21:56,639
the in stack ancillary data

2049
01:21:56,639 --> 01:21:59,600
for those network functions

2050
01:21:59,600 --> 01:22:02,000
in the stack in order and then the after

2051
01:22:02,000 --> 01:22:04,320
stack data is in the same order uh as

2052
01:22:04,320 --> 01:22:05,840
the network function flags that were set

2053
01:22:05,840 --> 01:22:07,840
in the packet

2054
01:22:07,840 --> 01:22:10,960
and obviously if the if any one of these

2055
01:22:10,960 --> 01:22:13,199
sets is empty there is no ancillary date

2056
01:22:13,199 --> 01:22:14,960
of that type

2057
01:22:14,960 --> 01:22:17,520
and that's it

2058
01:22:20,880 --> 01:22:21,920
okay

2059
01:22:21,920 --> 01:22:25,800
kuidi you have a question

2060
01:22:26,400 --> 01:22:28,719
a couple of comments one is

2061
01:22:28,719 --> 01:22:32,159
if you have a special purpose label that

2062
01:22:32,159 --> 01:22:34,639
says this is hop by hop and another that

2063
01:22:34,639 --> 01:22:36,080
says this is

2064
01:22:36,080 --> 01:22:39,199
any two i mean uh and uh only to be

2065
01:22:39,199 --> 01:22:41,040
processed by the end nodes

2066
01:22:41,040 --> 01:22:42,639
um

2067
01:22:42,639 --> 01:22:44,639
how am i supposed to know that if i

2068
01:22:44,639 --> 01:22:47,440
haven't reached that position in the

2069
01:22:47,440 --> 01:22:50,159
in the label stack

2070
01:22:50,159 --> 01:22:53,638
i mean i'm sorry

2071
01:22:54,400 --> 01:22:56,239
please repeat the question one of our

2072
01:22:56,239 --> 01:22:58,239
dogs is working

2073
01:22:58,239 --> 01:22:59,199
okay

2074
01:22:59,199 --> 01:23:00,880
um

2075
01:23:00,880 --> 01:23:04,400
so let's say that i have various labels

2076
01:23:04,400 --> 01:23:06,639
um you know maybe they're

2077
01:23:06,639 --> 01:23:08,400
segment writing labels so there's like

2078
01:23:08,400 --> 01:23:11,040
five labels and then there's an spl down

2079
01:23:11,040 --> 01:23:13,280
there that says

2080
01:23:13,280 --> 01:23:16,000
i have data that should be processed by

2081
01:23:16,000 --> 01:23:17,600
every hop

2082
01:23:17,600 --> 01:23:19,280
or you have a similar situation where

2083
01:23:19,280 --> 01:23:21,360
you have five labels on top but i have

2084
01:23:21,360 --> 01:23:22,239
data

2085
01:23:22,239 --> 01:23:24,400
that is you know really interesting end

2086
01:23:24,400 --> 01:23:26,719
to end

2087
01:23:26,719 --> 01:23:28,960
i have to come down i mean you know i

2088
01:23:28,960 --> 01:23:30,880
can do my forwarding just by looking at

2089
01:23:30,880 --> 01:23:32,639
the top label

2090
01:23:32,639 --> 01:23:35,199
but i'm going to have to come down to

2091
01:23:35,199 --> 01:23:36,719
look through the stack

2092
01:23:36,719 --> 01:23:38,000
and say

2093
01:23:38,000 --> 01:23:40,239
is this interesting for me now or is

2094
01:23:40,239 --> 01:23:41,920
this interesting for me

2095
01:23:41,920 --> 01:23:44,960
uh only if i was an endnote is that how

2096
01:23:44,960 --> 01:23:47,280
you're seeing this that i have to parse

2097
01:23:47,280 --> 01:23:50,080
the label stack anyway looking for the

2098
01:23:50,080 --> 01:23:52,159
for these spls and say oh this is the

2099
01:23:52,159 --> 01:23:55,360
spl that is applicable to me as a p

2100
01:23:55,360 --> 01:23:58,880
router or not this one

2101
01:23:58,880 --> 01:24:01,520
what we said was the uh

2102
01:24:01,520 --> 01:24:03,520
the hop by hop spl

2103
01:24:03,520 --> 01:24:07,199
always precedes the end to end spl

2104
01:24:07,199 --> 01:24:09,519
okay

2105
01:24:10,320 --> 01:24:11,920
but but you have to go through the label

2106
01:24:11,920 --> 01:24:15,280
stack looking for the hop by hop

2107
01:24:15,280 --> 01:24:15,600
yeah spl

2108
01:24:15,600 --> 01:24:18,000
that's the same as your proposal

2109
01:24:18,000 --> 01:24:20,239
yeah yeah yeah yeah no i i'm i'm just

2110
01:24:20,239 --> 01:24:23,360
trying to understand so so um yeah i

2111
01:24:23,360 --> 01:24:24,560
mean

2112
01:24:24,560 --> 01:24:26,400
even for the entropy label back in the

2113
01:24:26,400 --> 01:24:28,320
day i mean you you'd have to go through

2114
01:24:28,320 --> 01:24:30,320
the label stack looking for the entropy

2115
01:24:30,320 --> 01:24:32,000
label indicator

2116
01:24:32,000 --> 01:24:34,239
okay

2117
01:24:34,960 --> 01:24:36,960
so like i said you know this this is

2118
01:24:36,960 --> 01:24:39,040
basically

2119
01:24:39,040 --> 01:24:40,960
an attempt to generalize and fill in the

2120
01:24:40,960 --> 01:24:44,679
blanks with your proposal

2121
01:24:44,880 --> 01:24:48,159
yes um i'm i'm trying to see what is

2122
01:24:48,159 --> 01:24:49,280
different and there are a couple of

2123
01:24:49,280 --> 01:24:52,400
things that are different one is

2124
01:24:52,400 --> 01:24:53,920
in my proposal

2125
01:24:53,920 --> 01:24:55,120
um

2126
01:24:55,120 --> 01:24:57,280
i don't want anything that is end-to-end

2127
01:24:57,280 --> 01:24:59,520
to be

2128
01:24:59,520 --> 01:25:01,679
you know try to fit itself in this label

2129
01:25:01,679 --> 01:25:04,719
stack format and and keep the label end

2130
01:25:04,719 --> 01:25:06,800
of you know the end of whatever i said

2131
01:25:06,800 --> 01:25:08,000
was

2132
01:25:08,000 --> 01:25:10,800
what we said was

2133
01:25:10,800 --> 01:25:13,840
if it's related to forwarding

2134
01:25:13,840 --> 01:25:16,080
it should probably go in the stack

2135
01:25:16,080 --> 01:25:17,920
if it's not related to forwarding it

2136
01:25:17,920 --> 01:25:20,480
probably shouldn't go in the stack

2137
01:25:20,480 --> 01:25:22,400
but we make that decision

2138
01:25:22,400 --> 01:25:24,800
we make that decision when we define the

2139
01:25:24,800 --> 01:25:26,800
network function

2140
01:25:26,800 --> 01:25:28,960
well so the first thing is this whole

2141
01:25:28,960 --> 01:25:31,360
thing about network function um i object

2142
01:25:31,360 --> 01:25:33,760
to that simply because

2143
01:25:33,760 --> 01:25:35,600
if it's related to forwarding i don't

2144
01:25:35,600 --> 01:25:37,520
want people to think oh i can put in

2145
01:25:37,520 --> 01:25:39,360
some tutoring computable function in

2146
01:25:39,360 --> 01:25:40,560
here

2147
01:25:40,560 --> 01:25:42,560
i just want an action that i do right

2148
01:25:42,560 --> 01:25:45,679
now and yeah this is more like

2149
01:25:45,679 --> 01:25:48,000
maybe marketing or something but by

2150
01:25:48,000 --> 01:25:50,480
saying function you're talking about

2151
01:25:50,480 --> 01:25:52,239
things that could be heavyweight by

2152
01:25:52,239 --> 01:25:54,800
saying action it's like something i do

2153
01:25:54,800 --> 01:25:57,600
now and move on but

2154
01:25:57,600 --> 01:25:59,840
network actions is good

2155
01:25:59,840 --> 01:26:00,560
yeah

2156
01:26:00,560 --> 01:26:04,159
but but the the higher order of it is

2157
01:26:04,159 --> 01:26:06,400
the the way that i had to find it is

2158
01:26:06,400 --> 01:26:07,920
that these following actions that are

2159
01:26:07,920 --> 01:26:10,239
going to be encoded in the label stack

2160
01:26:10,239 --> 01:26:11,840
and then there's going to be a bunch of

2161
01:26:11,840 --> 01:26:13,280
other things that you want to do that

2162
01:26:13,280 --> 01:26:17,840
you'll encode in the post stack data

2163
01:26:17,840 --> 01:26:19,280
and and so

2164
01:26:19,280 --> 01:26:21,360
if it is not hop by hop

2165
01:26:21,360 --> 01:26:23,280
put in the post stack data and if you're

2166
01:26:23,280 --> 01:26:25,360
putting in the post fact data then you

2167
01:26:25,360 --> 01:26:26,560
end up with

2168
01:26:26,560 --> 01:26:28,080
all i'm going to tell you is whether you

2169
01:26:28,080 --> 01:26:29,920
need to look at the post stack data or

2170
01:26:29,920 --> 01:26:31,199
not

2171
01:26:31,199 --> 01:26:33,679
and so i can put things that are hop by

2172
01:26:33,679 --> 01:26:35,760
hop in the post stack data but post-type

2173
01:26:35,760 --> 01:26:37,760
data is generally end-to-end

2174
01:26:37,760 --> 01:26:38,960
uh but

2175
01:26:38,960 --> 01:26:41,040
anything that i need to do on a

2176
01:26:41,040 --> 01:26:43,679
hop-by-hop basis the the majority of it

2177
01:26:43,679 --> 01:26:46,719
i'll try to put in in stack data

2178
01:26:46,719 --> 01:26:48,719
so it's not like there's instant data

2179
01:26:48,719 --> 01:26:50,560
that is hop by hop and there's instax

2180
01:26:50,560 --> 01:26:52,880
data that is end to end it's in stack

2181
01:26:52,880 --> 01:26:55,040
data that is hop by hop

2182
01:26:55,040 --> 01:26:57,360
always and then there's post track data

2183
01:26:57,360 --> 01:26:59,600
some of which is uh hop by hop and some

2184
01:26:59,600 --> 01:27:01,840
of which is the end to end that was kind

2185
01:27:01,840 --> 01:27:02,880
of like

2186
01:27:02,880 --> 01:27:05,040
yeah yeah that's just that's exactly

2187
01:27:05,040 --> 01:27:06,400
that's completely consistent with what

2188
01:27:06,400 --> 01:27:09,040
we're proposing

2189
01:27:09,199 --> 01:27:11,040
right i'm just saying that

2190
01:27:11,040 --> 01:27:13,440
yeah yeah okay

2191
01:27:13,440 --> 01:27:14,560
i would like to give other people a

2192
01:27:14,560 --> 01:27:16,400
chance as well

2193
01:27:16,400 --> 01:27:18,960
yeah sure so um

2194
01:27:18,960 --> 01:27:22,880
okay great thanks so take your next

2195
01:27:22,880 --> 01:27:23,760
thank you

2196
01:27:23,760 --> 01:27:27,360
uh uh thanks john uh for uh proposing

2197
01:27:27,360 --> 01:27:29,120
this uh

2198
01:27:29,120 --> 01:27:32,000
um many of the things uh you know i'm

2199
01:27:32,000 --> 01:27:35,120
okay with i just want clarification

2200
01:27:35,120 --> 01:27:35,920
on

2201
01:27:35,920 --> 01:27:39,360
um the flags and the metadata post tag

2202
01:27:39,360 --> 01:27:40,719
data

2203
01:27:40,719 --> 01:27:45,280
sometimes a flag might be present and

2204
01:27:45,280 --> 01:27:47,760
in the function flags as you call them

2205
01:27:47,760 --> 01:27:49,600
or forwarding action

2206
01:27:49,600 --> 01:27:50,560
flags

2207
01:27:50,560 --> 01:27:51,440
um

2208
01:27:51,440 --> 01:27:52,800
but the

2209
01:27:52,800 --> 01:27:56,560
uh the metadata is missing for uh

2210
01:27:56,560 --> 01:27:58,719
that type length value or

2211
01:27:58,719 --> 01:28:01,840
whatever we come up with like the data

2212
01:28:01,840 --> 01:28:04,400
associated with that flag is not in the

2213
01:28:04,400 --> 01:28:06,639
post-stack data would this can be

2214
01:28:06,639 --> 01:28:08,639
considered as

2215
01:28:08,639 --> 01:28:11,600
invalid packet uh in that case or this

2216
01:28:11,600 --> 01:28:14,239
is something we need to still define i

2217
01:28:14,239 --> 01:28:16,080
think

2218
01:28:16,080 --> 01:28:17,760
actually what

2219
01:28:17,760 --> 01:28:19,440
when we define a particular network

2220
01:28:19,440 --> 01:28:21,120
function

2221
01:28:21,120 --> 01:28:22,880
we specify

2222
01:28:22,880 --> 01:28:24,800
this as an additional part of the

2223
01:28:24,800 --> 01:28:26,719
behavior

2224
01:28:26,719 --> 01:28:27,679
yeah

2225
01:28:27,679 --> 01:28:29,360
you know for some i actually like

2226
01:28:29,360 --> 01:28:31,040
network actions now i think that's good

2227
01:28:31,040 --> 01:28:33,600
but for some network actions

2228
01:28:33,600 --> 01:28:35,199
you know for some reason the ancillary

2229
01:28:35,199 --> 01:28:36,880
data just didn't get put in but that's

2230
01:28:36,880 --> 01:28:39,199
okay

2231
01:28:39,280 --> 01:28:41,360
for another network action throw the

2232
01:28:41,360 --> 01:28:43,199
packet away

2233
01:28:43,199 --> 01:28:45,679
okay thank you

2234
01:28:45,679 --> 01:28:49,520
okay thank you stuart you're next

2235
01:28:52,159 --> 01:28:54,000
let's do a couple of things yeah yeah

2236
01:28:54,000 --> 01:28:55,520
yeah you have to give permission for the

2237
01:28:55,520 --> 01:28:57,280
browser i'm sorry i forgot i'm sorry if

2238
01:28:57,280 --> 01:28:58,400
i'm here

2239
01:28:58,400 --> 01:29:01,600
all right all right so um

2240
01:29:01,600 --> 01:29:04,639
a couple of things first off um

2241
01:29:04,639 --> 01:29:07,280
if you if this is this indication that's

2242
01:29:07,280 --> 01:29:10,320
in the stack in patients in the stack um

2243
01:29:10,320 --> 01:29:12,000
it's inconvenient to put it right at the

2244
01:29:12,000 --> 01:29:15,040
very top of the stack for example in

2245
01:29:15,040 --> 01:29:18,239
segment routing then you may consider an

2246
01:29:18,239 --> 01:29:20,159
indicator for the presence of an

2247
01:29:20,159 --> 01:29:23,600
indicator uh which may be either a you

2248
01:29:23,600 --> 01:29:25,840
know a real indicator or the use of a

2249
01:29:25,840 --> 01:29:27,840
fact that says whether it's worth

2250
01:29:27,840 --> 01:29:29,920
searching for anything of interest

2251
01:29:29,920 --> 01:29:31,840
further down in the in the label stack

2252
01:29:31,840 --> 01:29:34,080
so there are other toys that we've uh

2253
01:29:34,080 --> 01:29:36,880
that we've got to bear in mind

2254
01:29:36,880 --> 01:29:39,840
in terms of end to end data

2255
01:29:39,840 --> 01:29:41,920
um i think karichi sort of said it but i

2256
01:29:41,920 --> 01:29:44,239
want to be absolutely clear above the

2257
01:29:44,239 --> 01:29:45,440
top of the

2258
01:29:45,440 --> 01:29:47,840
of the bottom of stack there has to be

2259
01:29:47,840 --> 01:29:50,480
some indication that this stuff is below

2260
01:29:50,480 --> 01:29:52,480
the bottom of stack otherwise you could

2261
01:29:52,480 --> 01:29:55,760
never find it there be sure

2262
01:29:55,760 --> 01:29:57,600
that's done that is part of the

2263
01:29:57,600 --> 01:29:59,360
definition of a particular network

2264
01:29:59,360 --> 01:30:01,120
action

2265
01:30:01,120 --> 01:30:02,639
okay

2266
01:30:02,639 --> 01:30:03,600
all right

2267
01:30:03,600 --> 01:30:05,840
now i want to just deal with

2268
01:30:05,840 --> 01:30:08,239
two other one other case which is people

2269
01:30:08,239 --> 01:30:10,719
were assuming that data that you process

2270
01:30:10,719 --> 01:30:12,239
hot by hop

2271
01:30:12,239 --> 01:30:15,760
has to be uh above the bottom of stack i

2272
01:30:15,760 --> 01:30:17,440
think that's what i heard but there's

2273
01:30:17,440 --> 01:30:18,480
some types

2274
01:30:18,480 --> 01:30:20,159
we did not say that at all we when

2275
01:30:20,159 --> 01:30:22,080
you're defining the network action you

2276
01:30:22,080 --> 01:30:24,800
specify what is the ancillary data and

2277
01:30:24,800 --> 01:30:26,239
where is it

2278
01:30:26,239 --> 01:30:27,679
good because it has to be the general

2279
01:30:27,679 --> 01:30:29,520
case i think someone said suggested that

2280
01:30:29,520 --> 01:30:31,440
it wouldn't be maybe it was karite and

2281
01:30:31,440 --> 01:30:34,480
maybe i know i mean when i what i said

2282
01:30:34,480 --> 01:30:36,239
was

2283
01:30:36,239 --> 01:30:38,320
right so here's the case i am worried

2284
01:30:38,320 --> 01:30:40,880
can can i just answer stuart

2285
01:30:40,880 --> 01:30:41,679
um

2286
01:30:41,679 --> 01:30:45,040
there is definitely hop by hub psv

2287
01:30:45,040 --> 01:30:48,800
yep and there is end-to-end psv yep what

2288
01:30:48,800 --> 01:30:51,840
i did suggest is

2289
01:30:54,800 --> 01:30:57,600
so what i did suggest is that

2290
01:30:57,600 --> 01:30:58,719
the

2291
01:30:58,719 --> 01:31:01,520
in-stack data is generally hot by hop i

2292
01:31:01,520 --> 01:31:03,360
mean if you're going to put in the label

2293
01:31:03,360 --> 01:31:06,480
stack and live by those constraints

2294
01:31:06,480 --> 01:31:09,280
there's a reason you did that

2295
01:31:09,280 --> 01:31:11,199
so there's a dish that generally i think

2296
01:31:11,199 --> 01:31:13,199
probably is the is the get out of jail

2297
01:31:13,199 --> 01:31:15,360
card here there is some data that i

2298
01:31:15,360 --> 01:31:17,440
really don't think we would be likely to

2299
01:31:17,440 --> 01:31:19,920
want to put in the stack for example the

2300
01:31:19,920 --> 01:31:23,679
iom hop identifier or um some latency

2301
01:31:23,679 --> 01:31:26,000
based forwarding uh information that

2302
01:31:26,000 --> 01:31:28,320
took significant data so i think we need

2303
01:31:28,320 --> 01:31:30,960
to be careful here some data may go in

2304
01:31:30,960 --> 01:31:32,080
the stack

2305
01:31:32,080 --> 01:31:33,280
but some

2306
01:31:33,280 --> 01:31:35,679
hot by hop data may be forced to go

2307
01:31:35,679 --> 01:31:37,679
after the bottom stack simply because of

2308
01:31:37,679 --> 01:31:38,960
the size of it

2309
01:31:38,960 --> 01:31:41,360
that's right and right what happens as i

2310
01:31:41,360 --> 01:31:42,480
said

2311
01:31:42,480 --> 01:31:44,560
as i said when we define the function we

2312
01:31:44,560 --> 01:31:46,320
specify what the data is and where it

2313
01:31:46,320 --> 01:31:48,080
goes

2314
01:31:48,080 --> 01:31:50,800
good okay so if i if i

2315
01:31:50,800 --> 01:31:53,040
if i look at the difference between this

2316
01:31:53,040 --> 01:31:57,360
proposal and the original fai proposal

2317
01:31:57,360 --> 01:31:58,960
essentially

2318
01:31:58,960 --> 01:32:01,360
the fai proposal says everything that's

2319
01:32:01,360 --> 01:32:02,800
in stack

2320
01:32:02,800 --> 01:32:05,040
is hop by hop as well there is nothing

2321
01:32:05,040 --> 01:32:07,360
that is end to end that is in stack

2322
01:32:07,360 --> 01:32:09,520
everything that's post stack

2323
01:32:09,520 --> 01:32:12,159
could be hot by hub or could be so if

2324
01:32:12,159 --> 01:32:14,239
you take those four combinations in

2325
01:32:14,239 --> 01:32:16,800
stack hub by hub in stack end to end

2326
01:32:16,800 --> 01:32:18,880
both stack hop by hop post back end to

2327
01:32:18,880 --> 01:32:20,239
end

2328
01:32:20,239 --> 01:32:24,000
fai says in stack car by hob no in stack

2329
01:32:24,000 --> 01:32:25,520
end to end

2330
01:32:25,520 --> 01:32:28,639
post postdoc hop by hop postdoc end to

2331
01:32:28,639 --> 01:32:30,000
end

2332
01:32:30,000 --> 01:32:31,760
what i understand this proposal is

2333
01:32:31,760 --> 01:32:33,920
saying is you've got all four

2334
01:32:33,920 --> 01:32:36,639
combinations and i don't see any reason

2335
01:32:36,639 --> 01:32:39,040
for putting end to end data in the label

2336
01:32:39,040 --> 01:32:41,280
stack put it after the label stack you

2337
01:32:41,280 --> 01:32:42,880
know let the label start get be done

2338
01:32:42,880 --> 01:32:43,760
with

2339
01:32:43,760 --> 01:32:46,239
when when you get to the egress

2340
01:32:46,239 --> 01:32:48,239
you know you're ready to handle the post

2341
01:32:48,239 --> 01:32:49,600
tag so

2342
01:32:49,600 --> 01:32:51,600
that's the one piece of this that i

2343
01:32:51,600 --> 01:32:53,920
don't get

2344
01:33:01,280 --> 01:33:03,520
there may be a case where we want to

2345
01:33:03,520 --> 01:33:06,639
have end-to-end data in the label stack

2346
01:33:06,639 --> 01:33:09,040
when we define a network action we will

2347
01:33:09,040 --> 01:33:11,040
say what is the ancillary data and where

2348
01:33:11,040 --> 01:33:13,600
does it go

2349
01:33:14,320 --> 01:33:16,239
as a general approach

2350
01:33:16,239 --> 01:33:20,000
i i have a i have a general comment that

2351
01:33:20,000 --> 01:33:23,199
as a principle we should why to continue

2352
01:33:23,199 --> 01:33:25,600
to complicate the label stack

2353
01:33:25,600 --> 01:33:28,960
once we have a clear design how we

2354
01:33:28,960 --> 01:33:32,080
organize accelerated data we can just

2355
01:33:32,080 --> 01:33:34,719
put them all up to the label stack

2356
01:33:34,719 --> 01:33:36,639
i understand there are some legacy

2357
01:33:36,639 --> 01:33:38,080
designs uh

2358
01:33:38,080 --> 01:33:40,880
with user labels but uh

2359
01:33:40,880 --> 01:33:43,520
we just keep that as is and we should

2360
01:33:43,520 --> 01:33:46,400
continue to add more on that because

2361
01:33:46,400 --> 01:33:49,040
i i i'm saying that because recently i'm

2362
01:33:49,040 --> 01:33:51,360
doing a lot of research on i actually

2363
01:33:51,360 --> 01:33:52,239
write

2364
01:33:52,239 --> 01:33:55,040
uh the the passwords for the different

2365
01:33:55,040 --> 01:33:57,840
style for header header design and i

2366
01:33:57,840 --> 01:33:59,440
find all those

2367
01:33:59,440 --> 01:34:01,280
complications in the labels that will

2368
01:34:01,280 --> 01:34:03,840
just it doesn't help

2369
01:34:03,840 --> 01:34:05,760
most of times it just makes things more

2370
01:34:05,760 --> 01:34:08,000
complicated it doesn't help to improve

2371
01:34:08,000 --> 01:34:10,880
the performance and also it introduced a

2372
01:34:10,880 --> 01:34:12,960
lot of constraints and limitations to

2373
01:34:12,960 --> 01:34:14,800
the design well one of the one of the

2374
01:34:14,800 --> 01:34:17,120
things you stipulated in the definition

2375
01:34:17,120 --> 01:34:20,719
of the process for evaluating proposals

2376
01:34:20,719 --> 01:34:22,080
is that

2377
01:34:22,080 --> 01:34:25,120
proposals are uh

2378
01:34:25,120 --> 01:34:26,159
checked

2379
01:34:26,159 --> 01:34:28,639
with the hardware designers uh for the

2380
01:34:28,639 --> 01:34:30,639
various vendors that are working on this

2381
01:34:30,639 --> 01:34:33,199
initiative that's part of the process

2382
01:34:33,199 --> 01:34:35,520
yeah meanwhile i'm i have the hardware

2383
01:34:35,520 --> 01:34:38,080
design background i already downloaded

2384
01:34:38,080 --> 01:34:39,760
right but you're not the only hardware

2385
01:34:39,760 --> 01:34:41,040
designer

2386
01:34:41,040 --> 01:34:42,800
yep you're not the only hardware

2387
01:34:42,800 --> 01:34:44,639
designer that's looking at this stuff

2388
01:34:44,639 --> 01:34:47,199
yeah i'm just uh express my you know

2389
01:34:47,199 --> 01:34:48,480
perspective

2390
01:34:48,480 --> 01:34:53,040
so that's all i i got now for now right

2391
01:34:53,119 --> 01:34:54,000
okay

2392
01:34:54,000 --> 01:34:54,960
and

2393
01:34:54,960 --> 01:34:57,520
lower has a question

2394
01:34:57,520 --> 01:35:01,600
uh in that there is data that you need

2395
01:35:01,600 --> 01:35:04,400
to put in stack that you want right

2396
01:35:04,400 --> 01:35:07,280
there so you can process it

2397
01:35:07,280 --> 01:35:10,000
pretty urgently so for example

2398
01:35:10,000 --> 01:35:12,960
a slice identifier you cannot

2399
01:35:12,960 --> 01:35:14,880
treat a packet correctly if you don't

2400
01:35:14,880 --> 01:35:16,880
know what slice it belongs to

2401
01:35:16,880 --> 01:35:18,480
and so you want to see that slice

2402
01:35:18,480 --> 01:35:20,400
identifier right there so that you can

2403
01:35:20,400 --> 01:35:22,239
actually do that

2404
01:35:22,239 --> 01:35:24,480
anything you put a post stack

2405
01:35:24,480 --> 01:35:26,560
you have to parse the label stack to get

2406
01:35:26,560 --> 01:35:29,360
there and that that can be an onerous

2407
01:35:29,360 --> 01:35:31,679
task for every hop to do

2408
01:35:31,679 --> 01:35:34,159
uh the entropy label i know you were

2409
01:35:34,159 --> 01:35:36,320
saying a legacy i i don't know that i

2410
01:35:36,320 --> 01:35:38,400
would consider this legacy but the

2411
01:35:38,400 --> 01:35:40,880
entropy label is not you have to do it

2412
01:35:40,880 --> 01:35:42,960
but you can do a much better job

2413
01:35:42,960 --> 01:35:45,360
load balancing without going to the end

2414
01:35:45,360 --> 01:35:46,719
of stack and figuring out what's going

2415
01:35:46,719 --> 01:35:49,679
on there because you have a nice uh hash

2416
01:35:49,679 --> 01:35:51,760
right in front of you so there are

2417
01:35:51,760 --> 01:35:53,679
things that you need right there and

2418
01:35:53,679 --> 01:35:55,280
there are things that you can say after

2419
01:35:55,280 --> 01:35:57,440
weight or the things that you say i

2420
01:35:57,440 --> 01:35:59,600
would i don't want to wait but i have to

2421
01:35:59,600 --> 01:36:02,000
because there's so much work to do here

2422
01:36:02,000 --> 01:36:04,080
okay so

2423
01:36:04,080 --> 01:36:07,199
lower is next in the queue greedy

2424
01:36:07,199 --> 01:36:10,400
okay so i guess one small comment and

2425
01:36:10,400 --> 01:36:12,320
that is that

2426
01:36:12,320 --> 01:36:14,480
because you can do something it's not

2427
01:36:14,480 --> 01:36:17,360
necessary that you do it so if there are

2428
01:36:17,360 --> 01:36:18,800
data that you

2429
01:36:18,800 --> 01:36:22,080
normally don't want to put in the stack

2430
01:36:22,080 --> 01:36:25,440
then you don't do it but

2431
01:36:25,440 --> 01:36:27,360
there are four alternatives and we

2432
01:36:27,360 --> 01:36:31,519
should have we should cover all of them

2433
01:36:32,400 --> 01:36:33,520
right

2434
01:36:33,520 --> 01:36:35,600
and as i said when we define a function

2435
01:36:35,600 --> 01:36:39,560
we define where the data goes

2436
01:36:41,640 --> 01:36:44,819
[Music]

2437
01:36:46,400 --> 01:36:47,920
okay

2438
01:36:47,920 --> 01:36:50,239
i don't see any current hands up at the

2439
01:36:50,239 --> 01:36:53,799
moment um

2440
01:36:54,239 --> 01:36:55,119
yeah

2441
01:36:55,119 --> 01:36:57,360
it's something different this is more

2442
01:36:57,360 --> 01:36:59,599
a

2443
01:36:59,679 --> 01:37:00,960
working group

2444
01:37:00,960 --> 01:37:03,040
share position

2445
01:37:03,040 --> 01:37:03,840
i'm

2446
01:37:03,840 --> 01:37:08,159
concerned about we have eight

2447
01:37:08,239 --> 01:37:09,760
base

2448
01:37:09,760 --> 01:37:12,400
spls left

2449
01:37:12,400 --> 01:37:15,520
and if we take

2450
01:37:15,520 --> 01:37:18,840
25 of those

2451
01:37:18,840 --> 01:37:22,480
for uh

2452
01:37:22,800 --> 01:37:25,760
handling the uh

2453
01:37:25,760 --> 01:37:29,440
the indicators uh then

2454
01:37:29,440 --> 01:37:32,080
i'm i'm i'm concerned because i'm

2455
01:37:32,080 --> 01:37:34,719
getting on the low side of available

2456
01:37:34,719 --> 01:37:36,639
spls

2457
01:37:36,639 --> 01:37:38,159
lower

2458
01:37:38,159 --> 01:37:39,600
yeah

2459
01:37:39,600 --> 01:37:42,480
i mean once we have the two spls then we

2460
01:37:42,480 --> 01:37:46,560
can uh basically the uh hop by hop and

2461
01:37:46,560 --> 01:37:48,800
end to end functions are

2462
01:37:48,800 --> 01:37:51,040
pretty much extensible without any more

2463
01:37:51,040 --> 01:37:53,679
spls

2464
01:37:54,000 --> 01:37:54,880
well

2465
01:37:54,880 --> 01:37:57,679
the what's not extensible is the basis

2466
01:37:57,679 --> 01:37:58,880
spills

2467
01:37:58,880 --> 01:38:00,000
we will

2468
01:38:00,000 --> 01:38:02,159
run out of the sooner or later if we're

2469
01:38:02,159 --> 01:38:04,320
not

2470
01:38:05,199 --> 01:38:06,880
keeping it straight is

2471
01:38:06,880 --> 01:38:09,760
a very strict regime on how we allocate

2472
01:38:09,760 --> 01:38:10,560
them

2473
01:38:10,560 --> 01:38:11,679
so

2474
01:38:11,679 --> 01:38:13,679
one thing

2475
01:38:13,679 --> 01:38:15,040
is

2476
01:38:15,040 --> 01:38:16,960
we should look at

2477
01:38:16,960 --> 01:38:20,639
if we can do it as efficiently uh with

2478
01:38:20,639 --> 01:38:23,040
just one baseline uh

2479
01:38:23,040 --> 01:38:25,440
base spl

2480
01:38:25,440 --> 01:38:27,199
and i don't think it's any way around

2481
01:38:27,199 --> 01:38:30,199
that

2482
01:38:31,119 --> 01:38:33,440
so if i can comment

2483
01:38:33,440 --> 01:38:35,759
um

2484
01:38:36,480 --> 01:38:38,960
first of all i don't see a reason to

2485
01:38:38,960 --> 01:38:42,480
carry in-stack data which is end-to-end

2486
01:38:42,480 --> 01:38:45,360
i mean if there's if it is not urgent

2487
01:38:45,360 --> 01:38:48,080
for every hop to do put it in the end of

2488
01:38:48,080 --> 01:38:49,920
put it post stack

2489
01:38:49,920 --> 01:38:50,639
so

2490
01:38:50,639 --> 01:38:52,719
having one spl

2491
01:38:52,719 --> 01:38:53,840
saying

2492
01:38:53,840 --> 01:38:56,719
i've got data that's in interesting for

2493
01:38:56,719 --> 01:38:58,800
everyone that's going that's going to

2494
01:38:58,800 --> 01:39:00,080
process this

2495
01:39:00,080 --> 01:39:01,360
uh and

2496
01:39:01,360 --> 01:39:04,080
then having just bits that say there is

2497
01:39:04,080 --> 01:39:06,320
post stack data for for

2498
01:39:06,320 --> 01:39:08,480
everyone or this post actor just for the

2499
01:39:08,480 --> 01:39:10,560
end to end guys or there's no post stack

2500
01:39:10,560 --> 01:39:13,920
data i think that is a single spl that

2501
01:39:13,920 --> 01:39:16,639
you need and it cover i mean yes we have

2502
01:39:16,639 --> 01:39:18,320
four cases but i don't think all four

2503
01:39:18,320 --> 01:39:20,080
cases are valid

2504
01:39:20,080 --> 01:39:22,400
in stack data that is end to end is a

2505
01:39:22,400 --> 01:39:24,800
waste of in-stack data

2506
01:39:24,800 --> 01:39:28,080
that's that's my view

2507
01:39:32,400 --> 01:39:33,280
so

2508
01:39:33,280 --> 01:39:36,560
that i made to to john that i think you

2509
01:39:36,560 --> 01:39:37,840
know maybe i could encourage people to

2510
01:39:37,840 --> 01:39:39,280
think about

2511
01:39:39,280 --> 01:39:42,480
is whether we need physical definitions

2512
01:39:42,480 --> 01:39:44,320
of these bits or logical definitions of

2513
01:39:44,320 --> 01:39:46,719
these bits so this is mpls right and

2514
01:39:46,719 --> 01:39:48,960
mpls gets around a lot of these resource

2515
01:39:48,960 --> 01:39:51,119
limitations by mapping through the

2516
01:39:51,119 --> 01:39:52,639
control plane

2517
01:39:52,639 --> 01:39:56,719
so you could have an lsp wide or even a

2518
01:39:56,719 --> 01:40:00,400
network-wide set of mappings between

2519
01:40:00,400 --> 01:40:03,600
the functions and the physical bit that

2520
01:40:03,600 --> 01:40:06,239
they will occupy in the

2521
01:40:06,239 --> 01:40:08,159
in the network and that would seem if

2522
01:40:08,159 --> 01:40:10,320
that would reduce the number that we um

2523
01:40:10,320 --> 01:40:13,119
that we needed uh also i am sure that if

2524
01:40:13,119 --> 01:40:14,880
we go we think a bit harder about the

2525
01:40:14,880 --> 01:40:16,960
encoding we can probably get down to one

2526
01:40:16,960 --> 01:40:19,920
uh spl for both functions

2527
01:40:19,920 --> 01:40:23,040
okay and adrian has his hand up

2528
01:40:23,040 --> 01:40:26,080
yeah thanks i i just wanted to um

2529
01:40:26,080 --> 01:40:29,119
to wonder about kiriti's point there of

2530
01:40:29,119 --> 01:40:31,600
the uh for end-to-end

2531
01:40:31,600 --> 01:40:34,000
uh data because i think end to end is

2532
01:40:34,000 --> 01:40:37,440
can be blurred a little bit where it's a

2533
01:40:37,440 --> 01:40:38,560
um

2534
01:40:38,560 --> 01:40:41,040
a routing operation that has to take

2535
01:40:41,040 --> 01:40:43,679
place at the final router i you know

2536
01:40:43,679 --> 01:40:47,520
think of um pop and go type operations

2537
01:40:47,520 --> 01:40:48,400
um

2538
01:40:48,400 --> 01:40:50,400
and there it's not quite clear to me

2539
01:40:50,400 --> 01:40:53,599
whether this is um

2540
01:40:54,080 --> 01:40:56,000
sort of the end-to-end data that you put

2541
01:40:56,000 --> 01:40:58,239
after the stack because it's what you do

2542
01:40:58,239 --> 01:41:00,080
after you've written the label

2543
01:41:00,080 --> 01:41:03,600
or you it's entering data that you

2544
01:41:03,600 --> 01:41:07,199
do because you are at the end of the um

2545
01:41:07,199 --> 01:41:09,280
of the path and you are about to rip the

2546
01:41:09,280 --> 01:41:11,920
label um

2547
01:41:11,920 --> 01:41:13,040
yeah

2548
01:41:13,040 --> 01:41:14,320
there are also

2549
01:41:14,320 --> 01:41:15,920
i was talking with joel

2550
01:41:15,920 --> 01:41:20,159
and there's also another case which

2551
01:41:20,159 --> 01:41:23,119
may be of interest which is that

2552
01:41:23,119 --> 01:41:26,000
it's it's neither hop by hop nor end to

2553
01:41:26,000 --> 01:41:26,880
end

2554
01:41:26,880 --> 01:41:30,080
but it's really the router that

2555
01:41:30,080 --> 01:41:31,520
pops

2556
01:41:31,520 --> 01:41:34,800
the uh label at the top of the stack so

2557
01:41:34,800 --> 01:41:36,880
it's sort of between intermediate points

2558
01:41:36,880 --> 01:41:39,119
along the path uh i see what you mean

2559
01:41:39,119 --> 01:41:41,199
end of the tunnel type of end to end

2560
01:41:41,199 --> 01:41:43,679
rather than end of the whole mpls

2561
01:41:43,679 --> 01:41:47,320
end-to-end yeah

2562
01:41:52,320 --> 01:41:53,600
okay

2563
01:41:53,600 --> 01:41:54,480
um

2564
01:41:54,480 --> 01:41:56,480
laura

2565
01:41:56,480 --> 01:42:00,000
so one thought on this

2566
01:42:00,000 --> 01:42:04,320
when we did the mplstp we worked with

2567
01:42:04,320 --> 01:42:07,040
mips and maps

2568
01:42:07,040 --> 01:42:09,440
and if i understand correctly mip could

2569
01:42:09,440 --> 01:42:11,119
be actually

2570
01:42:11,119 --> 01:42:15,280
allocated anywhere along the lsp

2571
01:42:15,280 --> 01:42:18,480
do we have something similar here

2572
01:42:18,480 --> 01:42:20,719
that's what i was sort of alluding to in

2573
01:42:20,719 --> 01:42:23,440
my response to adrian

2574
01:42:23,440 --> 01:42:25,600
sure so

2575
01:42:25,600 --> 01:42:28,239
it's not it's not necessarily end of

2576
01:42:28,239 --> 01:42:30,639
tunnel or end of lsp it could be middle

2577
01:42:30,639 --> 01:42:32,400
of the lsp but you actually want to

2578
01:42:32,400 --> 01:42:33,920
address it

2579
01:42:33,920 --> 01:42:35,920
correct and uh

2580
01:42:35,920 --> 01:42:37,760
i think that there's been

2581
01:42:37,760 --> 01:42:39,760
previous discussion about that

2582
01:42:39,760 --> 01:42:41,360
in some of the

2583
01:42:41,360 --> 01:42:44,480
proposals from huawei

2584
01:42:44,880 --> 01:42:46,560
yeah maybe

2585
01:42:46,560 --> 01:42:48,960
but i thought they were a kind of mpls

2586
01:42:48,960 --> 01:42:51,440
tp

2587
01:42:51,760 --> 01:42:53,840
in other words

2588
01:42:53,840 --> 01:42:57,760
i mean it's an area that we can work

2589
01:42:57,760 --> 01:43:01,040
so from my point of view if everyone i

2590
01:43:01,040 --> 01:43:03,920
mean when i say hop by hop it doesn't

2591
01:43:03,920 --> 01:43:06,159
necessarily mean everyone

2592
01:43:06,159 --> 01:43:08,719
uh along the

2593
01:43:08,719 --> 01:43:11,280
along the path has to process it

2594
01:43:11,280 --> 01:43:13,360
it means that i mean if you if you have

2595
01:43:13,360 --> 01:43:16,000
this simple dichotomy into the end of

2596
01:43:16,000 --> 01:43:18,159
tunnel and hop by hop

2597
01:43:18,159 --> 01:43:19,600
um then

2598
01:43:19,600 --> 01:43:21,440
for the hop i hop things

2599
01:43:21,440 --> 01:43:23,040
you're saying and that's why i want to

2600
01:43:23,040 --> 01:43:25,520
have a shoot and a must right

2601
01:43:25,520 --> 01:43:27,520
if you have uh

2602
01:43:27,520 --> 01:43:30,159
cycles and and you can go down and look

2603
01:43:30,159 --> 01:43:31,040
at

2604
01:43:31,040 --> 01:43:33,840
whether whatever it is um you can

2605
01:43:33,840 --> 01:43:35,440
process this and you might get there and

2606
01:43:35,440 --> 01:43:37,199
say there's nothing really much for me

2607
01:43:37,199 --> 01:43:38,719
to do here

2608
01:43:38,719 --> 01:43:41,119
uh if you if you know that nobody in the

2609
01:43:41,119 --> 01:43:43,760
middle is interested or could use this

2610
01:43:43,760 --> 01:43:46,159
effectively then you say it's end-to-end

2611
01:43:46,159 --> 01:43:48,000
but but the fact that you say it's hop

2612
01:43:48,000 --> 01:43:50,560
by hop doesn't mean everyone on the hop

2613
01:43:50,560 --> 01:43:52,159
uh everyone on the phone that's what we

2614
01:43:52,159 --> 01:43:54,400
said on slide three

2615
01:43:54,400 --> 01:43:57,199
that's exactly what we said

2616
01:43:57,199 --> 01:44:00,159
so then i'm struggling to understand

2617
01:44:00,159 --> 01:44:01,679
what is

2618
01:44:01,679 --> 01:44:03,280
you know the fourth case what is the

2619
01:44:03,280 --> 01:44:05,440
case where you put something

2620
01:44:05,440 --> 01:44:09,920
in the data in the label in the isd

2621
01:44:09,920 --> 01:44:11,840
that is really only to be processed by

2622
01:44:11,840 --> 01:44:13,600
the endnote because

2623
01:44:13,600 --> 01:44:14,480
you know

2624
01:44:14,480 --> 01:44:16,800
if it's going to be processed by some

2625
01:44:16,800 --> 01:44:17,679
guys

2626
01:44:17,679 --> 01:44:19,360
that's hot by hop

2627
01:44:19,360 --> 01:44:21,760
and so what i'm basically saying is

2628
01:44:21,760 --> 01:44:23,920
you've got isd that is end to end you've

2629
01:44:23,920 --> 01:44:26,400
got potentially rsv that is hot by hop

2630
01:44:26,400 --> 01:44:29,040
uh you've got uh psd that is end-to-end

2631
01:44:29,040 --> 01:44:31,520
you've got psc that is hub by hub that

2632
01:44:31,520 --> 01:44:33,440
first case i see that is as end-to-end

2633
01:44:33,440 --> 01:44:36,320
don't even worry about it so your ic is

2634
01:44:36,320 --> 01:44:37,600
hot by hop

2635
01:44:37,600 --> 01:44:40,480
pst is hub by hop or end to end that's

2636
01:44:40,480 --> 01:44:42,880
what the current uh forwarding actions

2637
01:44:42,880 --> 01:44:45,040
talks about

2638
01:44:45,040 --> 01:44:48,040
adriana

2639
01:44:48,159 --> 01:44:49,600
adrian sorry

2640
01:44:49,600 --> 01:44:51,119
yeah okay

2641
01:44:51,119 --> 01:44:53,360
yeah so uh very quickly uh clarity just

2642
01:44:53,360 --> 01:44:56,239
reminded me of something that came up

2643
01:44:56,239 --> 01:44:59,119
long ago in this discussion which is

2644
01:44:59,119 --> 01:45:00,960
uh whether it should be necessary to

2645
01:45:00,960 --> 01:45:03,119
distinguish between

2646
01:45:03,119 --> 01:45:05,119
uh

2647
01:45:05,119 --> 01:45:08,560
actions that uh or or yeah functions

2648
01:45:08,560 --> 01:45:09,920
that a

2649
01:45:09,920 --> 01:45:13,520
router must operate on and if it doesn't

2650
01:45:13,520 --> 01:45:16,239
understand them then it it cannot

2651
01:45:16,239 --> 01:45:19,280
forward the packet and functions where

2652
01:45:19,280 --> 01:45:21,360
the router is allowed to say i don't

2653
01:45:21,360 --> 01:45:23,520
understand it or i don't want to operate

2654
01:45:23,520 --> 01:45:25,840
on it and can continue to forward the

2655
01:45:25,840 --> 01:45:26,960
packet

2656
01:45:26,960 --> 01:45:28,400
um

2657
01:45:28,400 --> 01:45:30,960
that's if you like slightly orthogonal

2658
01:45:30,960 --> 01:45:33,520
to the uh the hot by hop thing but i'm

2659
01:45:33,520 --> 01:45:35,920
not sure we closed on that

2660
01:45:35,920 --> 01:45:40,000
uh must versus can ignore

2661
01:45:40,000 --> 01:45:42,159
yeah i touched on it in my

2662
01:45:42,159 --> 01:45:45,840
slides but yeah we haven't closed on it

2663
01:45:45,840 --> 01:45:47,679
yeah i think adrian that we would just

2664
01:45:47,679 --> 01:45:50,080
that would also be in the definition of

2665
01:45:50,080 --> 01:45:52,880
the network action

2666
01:45:55,119 --> 01:45:57,360
uh it doesn't work in the definition i

2667
01:45:57,360 --> 01:45:59,040
think because if you

2668
01:45:59,040 --> 01:46:00,560
if you receive it and you don't

2669
01:46:00,560 --> 01:46:02,000
understand it

2670
01:46:02,000 --> 01:46:04,560
um you need to know whether or not you

2671
01:46:04,560 --> 01:46:07,040
can forward it without understanding it

2672
01:46:07,040 --> 01:46:09,199
and you can't if you haven't implemented

2673
01:46:09,199 --> 01:46:11,440
the rfc you can't know whether you can

2674
01:46:11,440 --> 01:46:14,080
forward it without some additional

2675
01:46:14,080 --> 01:46:16,560
information we

2676
01:46:16,560 --> 01:46:19,199
we have to be

2677
01:46:19,920 --> 01:46:21,760
we we have to be able to incrementally

2678
01:46:21,760 --> 01:46:24,639
deploy which means that there there are

2679
01:46:24,639 --> 01:46:26,239
routers that are not going to understand

2680
01:46:26,239 --> 01:46:28,000
all of the network functions that's

2681
01:46:28,000 --> 01:46:30,320
correct

2682
01:46:32,320 --> 01:46:35,520
a hat on um we didn't take questions and

2683
01:46:35,520 --> 01:46:37,600
clarify beyond clarifications for the

2684
01:46:37,600 --> 01:46:39,600
earlier uh pieces of this we're running

2685
01:46:39,600 --> 01:46:41,280
out of time

2686
01:46:41,280 --> 01:46:42,719
i think we need to give people the

2687
01:46:42,719 --> 01:46:44,880
opportunity if they want to discuss any

2688
01:46:44,880 --> 01:46:46,880
of the points that we we worked on

2689
01:46:46,880 --> 01:46:50,360
during the session

2690
01:46:54,400 --> 01:46:56,080
anyone out there with any other

2691
01:46:56,080 --> 01:46:57,679
questions or comments

2692
01:46:57,679 --> 01:46:59,040
yeah i'm not trying to shut john's

2693
01:46:59,040 --> 01:47:01,360
discussion down uh i i'm just gonna make

2694
01:47:01,360 --> 01:47:02,800
it clear that people can discuss other

2695
01:47:02,800 --> 01:47:05,800
things

2696
01:47:08,400 --> 01:47:12,080
and i'm not seeing any hands go up

2697
01:47:13,920 --> 01:47:14,800
so

2698
01:47:14,800 --> 01:47:16,400
i

2699
01:47:16,400 --> 01:47:17,760
i think we

2700
01:47:17,760 --> 01:47:20,320
we've reached the uh part of the

2701
01:47:20,320 --> 01:47:24,560
of the um meeting where i'm closing

2702
01:47:24,560 --> 01:47:26,960
the queue for further comments

2703
01:47:26,960 --> 01:47:29,760
and we're going to move on to stuart so

2704
01:47:29,760 --> 01:47:32,000
stuart can give us a summary

2705
01:47:32,000 --> 01:47:35,280
of uh of what he's heard

2706
01:47:35,280 --> 01:47:36,480
and

2707
01:47:36,480 --> 01:47:38,960
where we stand and what's next going

2708
01:47:38,960 --> 01:47:40,560
forward

2709
01:47:40,560 --> 01:47:42,480
right so this is a particularly short

2710
01:47:42,480 --> 01:47:44,800
short straw

2711
01:47:44,800 --> 01:47:47,520
so firstly i i i'd like to make an

2712
01:47:47,520 --> 01:47:50,960
observation from the mpls meeting that

2713
01:47:50,960 --> 01:47:53,360
where lower introduced a very important

2714
01:47:53,360 --> 01:47:56,159
point and that's that

2715
01:47:56,159 --> 01:47:58,159
this is a body of work that turned out

2716
01:47:58,159 --> 01:48:00,880
to be much deeper and more

2717
01:48:00,880 --> 01:48:03,440
difficult than we had anticipated when

2718
01:48:03,440 --> 01:48:04,960
we started

2719
01:48:04,960 --> 01:48:06,159
um

2720
01:48:06,159 --> 01:48:08,560
it's my opinion um

2721
01:48:08,560 --> 01:48:10,719
that we need to work

2722
01:48:10,719 --> 01:48:13,920
a bit harder to and certainly for longer

2723
01:48:13,920 --> 01:48:15,679
to bottom out

2724
01:48:15,679 --> 01:48:18,880
this piece of work rather than

2725
01:48:18,880 --> 01:48:20,880
just take the first things that come to

2726
01:48:20,880 --> 01:48:22,719
mind because

2727
01:48:22,719 --> 01:48:24,719
the more we explore this the more

2728
01:48:24,719 --> 01:48:26,800
difficult it seems to be

2729
01:48:26,800 --> 01:48:28,400
hopefully we will have some insights

2730
01:48:28,400 --> 01:48:30,719
soon that will allow us to to get to the

2731
01:48:30,719 --> 01:48:33,840
end relatively quickly

2732
01:48:33,840 --> 01:48:36,480
so the requirements they need to be

2733
01:48:36,480 --> 01:48:38,800
studied we really do need some uh

2734
01:48:38,800 --> 01:48:40,320
because they are the foundation of what

2735
01:48:40,320 --> 01:48:42,400
we do and the decisions we make

2736
01:48:42,400 --> 01:48:45,040
and um i think there needs to be more

2737
01:48:45,040 --> 01:48:49,199
input in the odt process on on

2738
01:48:49,199 --> 01:48:50,639
requirements we need to we need to find

2739
01:48:50,639 --> 01:48:52,239
a way of giving them more quality time

2740
01:48:52,239 --> 01:48:55,440
and of course time on the list

2741
01:48:55,440 --> 01:48:57,280
um

2742
01:48:57,280 --> 01:48:58,840
the

2743
01:48:58,840 --> 01:49:01,119
um uh

2744
01:49:01,119 --> 01:49:05,199
matters of how we encode uh the

2745
01:49:05,199 --> 01:49:07,840
information in the stack covered uh by

2746
01:49:07,840 --> 01:49:12,800
both um kiriti and uh by my john

2747
01:49:12,800 --> 01:49:15,199
i think he's going to need

2748
01:49:15,199 --> 01:49:16,000
some

2749
01:49:16,000 --> 01:49:18,639
again focused time maybe more time than

2750
01:49:18,639 --> 01:49:20,800
we can get from the weekly meeting maybe

2751
01:49:20,800 --> 01:49:22,639
a breakout group or something but there

2752
01:49:22,639 --> 01:49:25,360
are several areas actually where

2753
01:49:25,360 --> 01:49:28,159
i thought it would we could do with some

2754
01:49:28,159 --> 01:49:31,040
focused uh discussion uh more than the

2755
01:49:31,040 --> 01:49:33,119
sort of 10 minutes 15 minutes we get in

2756
01:49:33,119 --> 01:49:36,080
this session and perhaps more than we

2757
01:49:36,080 --> 01:49:39,280
can get in uh when we mix it with all

2758
01:49:39,280 --> 01:49:41,280
the status reports and everything on the

2759
01:49:41,280 --> 01:49:42,880
thursday meeting so i think there are a

2760
01:49:42,880 --> 01:49:45,199
number of cases here where uh and i

2761
01:49:45,199 --> 01:49:46,800
would um

2762
01:49:46,800 --> 01:49:50,320
recommend that the the the we as chairs

2763
01:49:50,320 --> 01:49:52,960
may be set up some specialist discussion

2764
01:49:52,960 --> 01:49:56,320
in the old days we would of course had

2765
01:49:56,320 --> 01:49:59,040
a an interim meeting

2766
01:49:59,040 --> 01:50:02,000
on a bunch of this but that's not really

2767
01:50:02,000 --> 01:50:03,040
going to

2768
01:50:03,040 --> 01:50:05,679
going to happen

2769
01:50:06,159 --> 01:50:10,360
i think um

2770
01:50:11,520 --> 01:50:12,960
i think there's something else that we

2771
01:50:12,960 --> 01:50:16,239
need um to uh to discuss which is the

2772
01:50:16,239 --> 01:50:18,159
processing model which we was brought

2773
01:50:18,159 --> 01:50:20,159
mentioned briefly by how you but again

2774
01:50:20,159 --> 01:50:20,880
is

2775
01:50:20,880 --> 01:50:22,560
fundamental to some of the decisions we

2776
01:50:22,560 --> 01:50:23,679
need to make

2777
01:50:23,679 --> 01:50:25,280
which is

2778
01:50:25,280 --> 01:50:27,599
that we need to understand what an mpls

2779
01:50:27,599 --> 01:50:29,760
router looks like for the purposes of

2780
01:50:29,760 --> 01:50:31,280
doing these and what constraints we're

2781
01:50:31,280 --> 01:50:33,440
going to introduce now

2782
01:50:33,440 --> 01:50:36,239
hopefully we can do both that discussion

2783
01:50:36,239 --> 01:50:38,400
and the detailed design discussion

2784
01:50:38,400 --> 01:50:39,760
and the

2785
01:50:39,760 --> 01:50:41,520
uh requirements in particular the

2786
01:50:41,520 --> 01:50:43,360
requirements without this becoming a

2787
01:50:43,360 --> 01:50:45,920
proxy fight for these solutions because

2788
01:50:45,920 --> 01:50:48,960
that is um what always bogs down these

2789
01:50:48,960 --> 01:50:50,639
sorts of discussions

2790
01:50:50,639 --> 01:50:52,800
so i think that's my summary of where we

2791
01:50:52,800 --> 01:50:55,360
are and what we need to do i'm more than

2792
01:50:55,360 --> 01:50:58,080
happy to hear contra views from my

2793
01:50:58,080 --> 01:51:02,519
co-chairs or from the working group

2794
01:51:11,679 --> 01:51:13,679
what's the audio or

2795
01:51:13,679 --> 01:51:17,679
um no one had any comment

2796
01:51:17,679 --> 01:51:18,800
yeah there

2797
01:51:18,800 --> 01:51:21,599
there was a comment from lou in the

2798
01:51:21,599 --> 01:51:24,639
uh in the chat about possible virtual

2799
01:51:24,639 --> 01:51:26,719
interim and we also have a comment from

2800
01:51:26,719 --> 01:51:29,119
turek

2801
01:51:30,639 --> 01:51:33,199
stewart um do you think the weekly

2802
01:51:33,199 --> 01:51:35,360
meeting that we're having for the open

2803
01:51:35,360 --> 01:51:37,360
design team uh

2804
01:51:37,360 --> 01:51:40,159
can fit into the the the breakout the

2805
01:51:40,159 --> 01:51:42,800
discussions that you know

2806
01:51:42,800 --> 01:51:45,280
well i think i think in terms of process

2807
01:51:45,280 --> 01:51:46,840
it's very reasonable for the breakout

2808
01:51:46,840 --> 01:51:50,000
discussions to report into the weekly

2809
01:51:50,000 --> 01:51:51,040
meetings

2810
01:51:51,040 --> 01:51:53,119
i i am just worried

2811
01:51:53,119 --> 01:51:54,719
um that

2812
01:51:54,719 --> 01:51:58,000
um one and a half hours a week

2813
01:51:58,000 --> 01:51:59,520
is not going to be enough to get our

2814
01:51:59,520 --> 01:52:02,159
heads around all of this particularly

2815
01:52:02,159 --> 01:52:03,520
some of these things

2816
01:52:03,520 --> 01:52:05,119
where your thought model process may be

2817
01:52:05,119 --> 01:52:06,159
different but some of these things you

2818
01:52:06,159 --> 01:52:07,679
really need to think about for a bit

2819
01:52:07,679 --> 01:52:08,639
before you

2820
01:52:08,639 --> 01:52:11,599
decide whether you agree um

2821
01:52:11,599 --> 01:52:13,520
or not but i think there's no reason why

2822
01:52:13,520 --> 01:52:14,560
we can't ha

2823
01:52:14,560 --> 01:52:17,360
why we can't have groups reporting

2824
01:52:17,360 --> 01:52:19,119
on the weekly meetings just to give a

2825
01:52:19,119 --> 01:52:21,920
status update rather than

2826
01:52:21,920 --> 01:52:24,159
necessarily

2827
01:52:24,159 --> 01:52:26,080
have to wait until the next free weekly

2828
01:52:26,080 --> 01:52:28,639
meeting to do the detailed discussion

2829
01:52:28,639 --> 01:52:30,719
okay i would like to give

2830
01:52:30,719 --> 01:52:34,159
lou a chance to make a comment blue

2831
01:52:34,159 --> 01:52:36,080
yeah so if you need more discussion time

2832
01:52:36,080 --> 01:52:38,560
either schedule more informal meetings

2833
01:52:38,560 --> 01:52:40,320
or if we want to make it formalize it

2834
01:52:40,320 --> 01:52:42,400
there's no reason we can't have one or

2835
01:52:42,400 --> 01:52:46,159
more uh virtual interims

2836
01:52:47,040 --> 01:52:48,560
well this is just me sort of feeding to

2837
01:52:48,560 --> 01:52:50,880
my my colleagues in the uh in the other

2838
01:52:50,880 --> 01:52:54,000
chairs to say where i where i got where

2839
01:52:54,000 --> 01:52:56,159
my head got to when i looked at the the

2840
01:52:56,159 --> 01:52:59,839
depth of discussion that we were having

2841
01:53:02,080 --> 01:53:06,639
so if i can jump in um yes

2842
01:53:06,719 --> 01:53:09,360
you know we've had several of our weekly

2843
01:53:09,360 --> 01:53:10,400
meetings

2844
01:53:10,400 --> 01:53:12,960
postponed for various reasons

2845
01:53:12,960 --> 01:53:13,840
uh

2846
01:53:13,840 --> 01:53:15,599
you know i think we could

2847
01:53:15,599 --> 01:53:17,280
we could fit this into our weekly

2848
01:53:17,280 --> 01:53:19,360
meetings if we really needed to we could

2849
01:53:19,360 --> 01:53:20,159
have

2850
01:53:20,159 --> 01:53:21,280
you know

2851
01:53:21,280 --> 01:53:23,199
more weekly meetings

2852
01:53:23,199 --> 01:53:25,280
i think the the the idea that we have

2853
01:53:25,280 --> 01:53:26,880
our weekly i mean it's an hour and a

2854
01:53:26,880 --> 01:53:27,679
half

2855
01:53:27,679 --> 01:53:29,840
and yes we want to do 10 minutes of

2856
01:53:29,840 --> 01:53:31,920
status and action items and make sure

2857
01:53:31,920 --> 01:53:33,840
that we are on track

2858
01:53:33,840 --> 01:53:36,719
but we could easily have an hour

2859
01:53:36,719 --> 01:53:38,880
in these weekly meetings where we have

2860
01:53:38,880 --> 01:53:40,960
focused discussion on any particular

2861
01:53:40,960 --> 01:53:42,000
subject

2862
01:53:42,000 --> 01:53:44,960
as opposed to try to say every weekly

2863
01:53:44,960 --> 01:53:46,800
meeting there's 10 minutes for you know

2864
01:53:46,800 --> 01:53:48,480
10 different topics

2865
01:53:48,480 --> 01:53:50,480
so i think we can make progress in the

2866
01:53:50,480 --> 01:53:52,080
weekly meetings but

2867
01:53:52,080 --> 01:53:54,719
to steward's point uh it might be

2868
01:53:54,719 --> 01:53:56,960
effective for some things to take them

2869
01:53:56,960 --> 01:53:58,080
offline

2870
01:53:58,080 --> 01:53:59,920
uh but the problem is then you have it

2871
01:53:59,920 --> 01:54:01,360
offline then you have to bring it back

2872
01:54:01,360 --> 01:54:02,880
to the main meeting

2873
01:54:02,880 --> 01:54:04,880
but you know

2874
01:54:04,880 --> 01:54:06,800
making forward progress on this i think

2875
01:54:06,800 --> 01:54:08,480
would be a good thing

2876
01:54:08,480 --> 01:54:10,560
uh but i think we also have to ask

2877
01:54:10,560 --> 01:54:12,080
ourselves if we're using our weekly

2878
01:54:12,080 --> 01:54:15,760
meetings in the most difficult way

2879
01:54:17,199 --> 01:54:20,080
it behooves the chairs just to have a

2880
01:54:20,080 --> 01:54:22,719
discussion after this to work out how we

2881
01:54:22,719 --> 01:54:25,119
can get this volume of work done in a

2882
01:54:25,119 --> 01:54:27,599
sensible time

2883
01:54:27,599 --> 01:54:29,840
sure

2884
01:54:31,920 --> 01:54:34,159
okay

2885
01:54:34,159 --> 01:54:36,719
anything else

2886
01:54:36,719 --> 01:54:38,880
going once

2887
01:54:38,880 --> 01:54:40,400
going twice

2888
01:54:40,400 --> 01:54:42,239
well i'd like to thank everybody for

2889
01:54:42,239 --> 01:54:44,960
participating um i think this this was a

2890
01:54:44,960 --> 01:54:46,000
really

2891
01:54:46,000 --> 01:54:47,280
good session

2892
01:54:47,280 --> 01:54:53,040
and we'll see you all at iatf 113

2893
01:54:56,960 --> 01:54:59,599
andy out

2894
01:55:00,560 --> 01:55:03,360
thank you andy bye

2895
01:55:03,360 --> 01:55:04,400
goodbye

2896
01:55:04,400 --> 01:55:06,719
dave

2897
01:55:07,760 --> 01:55:10,239
bye bye

2898
01:55:11,360 --> 01:55:14,360
goodbye

2899
01:55:21,520 --> 01:55:24,800
were you asking me something

2900
01:55:26,480 --> 01:55:30,759
i guess not adios

