1
00:00:24,000 --> 00:00:26,480
the role is quite simple um whenever

2
00:00:26,480 --> 00:00:29,359
someone in java just says at mike or

3
00:00:29,359 --> 00:00:31,039
whatever

4
00:00:31,039 --> 00:00:33,040
just pop in the queue and relay that so

5
00:00:33,040 --> 00:00:35,120
people can hear it

6
00:00:35,120 --> 00:00:36,800
we'll do our best to keep an eye on the

7
00:00:36,800 --> 00:00:38,879
conversation as it progresses but it's

8
00:00:38,879 --> 00:00:42,599
it's easy to miss things

9
00:00:49,680 --> 00:00:52,000
thanks lucas appreciate it

10
00:00:52,000 --> 00:00:55,960
you have two scribes in the chat

11
00:01:36,880 --> 00:01:40,240
okay um when we get going uh welcome

12
00:01:40,240 --> 00:01:42,159
everyone to the the first meeting of the

13
00:01:42,159 --> 00:01:44,640
week mask thanks for being here

14
00:01:44,640 --> 00:01:46,479
um

15
00:01:46,479 --> 00:01:47,280
uh

16
00:01:47,280 --> 00:01:50,560
it's quite early for some of us so um

17
00:01:50,560 --> 00:01:53,200
hopefully this is a productive session

18
00:01:53,200 --> 00:01:55,040
nevertheless

19
00:01:55,040 --> 00:01:57,360
um

20
00:01:57,439 --> 00:02:00,240
typical this meeting is recorded

21
00:02:00,240 --> 00:02:03,040
you've used this tool before

22
00:02:03,040 --> 00:02:04,399
if you use this tool before you know how

23
00:02:04,399 --> 00:02:06,240
the all the buttons work at the top but

24
00:02:06,240 --> 00:02:08,239
if you're not they're fairly it's fairly

25
00:02:08,239 --> 00:02:09,919
intuitive um if you want to join the mic

26
00:02:09,919 --> 00:02:12,239
queue just press the button

27
00:02:12,239 --> 00:02:14,640
you do have to unmute yourself uh to

28
00:02:14,640 --> 00:02:17,440
talk and share video um

29
00:02:17,440 --> 00:02:19,680
uh

30
00:02:20,080 --> 00:02:22,000
otherwise you know typical idtf rules

31
00:02:22,000 --> 00:02:26,000
apply in terms of uh queue management

32
00:02:26,319 --> 00:02:29,440
um and as a reminder as well um

33
00:02:29,440 --> 00:02:30,879
just state your name with the mic just

34
00:02:30,879 --> 00:02:32,720
so the the speaker knows

35
00:02:32,720 --> 00:02:34,480
who you are and the note taker can jot

36
00:02:34,480 --> 00:02:36,080
it down

37
00:02:36,080 --> 00:02:37,840
uh this is the notewell

38
00:02:37,840 --> 00:02:39,360
probably have not yet seen this this

39
00:02:39,360 --> 00:02:41,840
week uh because it's the first meeting

40
00:02:41,840 --> 00:02:44,080
um you're expected to be so familiar

41
00:02:44,080 --> 00:02:45,920
with the but what's here

42
00:02:45,920 --> 00:02:47,040
um

43
00:02:47,040 --> 00:02:49,599
i wanna take a moment to briefly uh call

44
00:02:49,599 --> 00:02:51,440
up the code of conduct

45
00:02:51,440 --> 00:02:52,879
um

46
00:02:52,879 --> 00:02:56,000
in essence uh what we are looking for is

47
00:02:56,000 --> 00:02:57,599
people to be you know professional

48
00:02:57,599 --> 00:03:00,319
respectful and courteous to others

49
00:03:00,319 --> 00:03:02,080
and how they engage and

50
00:03:02,080 --> 00:03:05,360
discuss technical details um we are an

51
00:03:05,360 --> 00:03:07,519
international standards body meaning

52
00:03:07,519 --> 00:03:10,720
that uh we do get people with different

53
00:03:10,720 --> 00:03:12,640
views different ways of delivering and

54
00:03:12,640 --> 00:03:14,879
different ways of receiving feedback

55
00:03:14,879 --> 00:03:16,959
um so we just ask as chairs to you know

56
00:03:16,959 --> 00:03:18,560
please please do your best to keep

57
00:03:18,560 --> 00:03:20,879
things and personal focusing on

58
00:03:20,879 --> 00:03:23,599
technical details um

59
00:03:23,599 --> 00:03:25,519
and uh and and

60
00:03:25,519 --> 00:03:26,319
and

61
00:03:26,319 --> 00:03:28,959
just just just be respectful generally

62
00:03:28,959 --> 00:03:33,040
um we've not had any issues in the past

63
00:03:33,040 --> 00:03:34,480
thankfully because everyone who

64
00:03:34,480 --> 00:03:37,760
participates in this group is

65
00:03:38,159 --> 00:03:39,280
our fine

66
00:03:39,280 --> 00:03:40,720
fine engineers

67
00:03:40,720 --> 00:03:45,120
exemplar and members of the ietf

68
00:03:45,519 --> 00:03:47,280
so hopefully we can keep it that way

69
00:03:47,280 --> 00:03:48,640
moving forward

70
00:03:48,640 --> 00:03:49,920
uh eric do you have anything else you'd

71
00:03:49,920 --> 00:03:52,480
like to add

72
00:03:53,040 --> 00:03:55,599
cool beans okay

73
00:03:55,599 --> 00:03:58,400
um here's some links uh the agenda is up

74
00:03:58,400 --> 00:04:01,680
it's also um here in the slide deck uh

75
00:04:01,680 --> 00:04:04,640
we have a note taker thank you robin uh

76
00:04:04,640 --> 00:04:08,000
javascribe thank you lucas

77
00:04:08,799 --> 00:04:10,799
and here is our agenda uh first up we're

78
00:04:10,799 --> 00:04:12,159
going to talk about connect qdp and hd

79
00:04:12,159 --> 00:04:14,400
datagrams

80
00:04:14,400 --> 00:04:16,000
david's going to give those

81
00:04:16,000 --> 00:04:18,320
presentations and then tommy's going to

82
00:04:18,320 --> 00:04:22,400
speak to connect ip the unified proposal

83
00:04:22,400 --> 00:04:24,479
based on the two drafts presented during

84
00:04:24,479 --> 00:04:26,240
the last meeting

85
00:04:26,240 --> 00:04:27,919
and then as time permits we'll talk

86
00:04:27,919 --> 00:04:29,280
about uh

87
00:04:29,280 --> 00:04:31,360
two new work proposal items that is

88
00:04:31,360 --> 00:04:33,600
paying from ben and prioritization from

89
00:04:33,600 --> 00:04:34,960
lucas

90
00:04:34,960 --> 00:04:36,960
uh quickly pause here to see if anyone

91
00:04:36,960 --> 00:04:39,840
wants to do any uh rearrangements or

92
00:04:39,840 --> 00:04:42,840
refactoring

93
00:04:49,199 --> 00:04:50,080
okay

94
00:04:50,080 --> 00:04:52,000
if not

95
00:04:52,000 --> 00:04:53,600
let's proceed

96
00:04:53,600 --> 00:04:54,840
i will stop

97
00:04:54,840 --> 00:04:57,040
sharing and david i'll hand it off to

98
00:04:57,040 --> 00:04:59,199
you

99
00:05:01,360 --> 00:05:03,199
thank you chris

100
00:05:03,199 --> 00:05:04,639
uh let's

101
00:05:04,639 --> 00:05:08,759
ask to share slides

102
00:05:18,000 --> 00:05:19,199
all right

103
00:05:19,199 --> 00:05:22,720
can you see the slides

104
00:05:23,360 --> 00:05:26,160
yes we're all set

105
00:05:26,160 --> 00:05:28,479
awesome all right

106
00:05:28,479 --> 00:05:32,240
good morning afternoon evening absolute

107
00:05:32,240 --> 00:05:34,560
complete middle of the night everyone uh

108
00:05:34,560 --> 00:05:37,199
my name is david snazzy and we're here

109
00:05:37,199 --> 00:05:40,080
to talk about mask uh more specifically

110
00:05:40,080 --> 00:05:42,160
uh this presentation i'll be talking

111
00:05:42,160 --> 00:05:45,600
about both the http datagrams and the

112
00:05:45,600 --> 00:05:49,039
connect udp uh draft

113
00:05:49,039 --> 00:05:50,560
so

114
00:05:50,560 --> 00:05:52,880
ah sorry um

115
00:05:52,880 --> 00:05:56,800
first a quick uh recap uh for if anyone

116
00:05:56,800 --> 00:05:59,280
is new to mask in the room

117
00:05:59,280 --> 00:06:02,639
so the main goal of these two drafts is

118
00:06:02,639 --> 00:06:05,600
to build connect udp which

119
00:06:05,600 --> 00:06:08,479
is like connect which is the tcp method

120
00:06:08,479 --> 00:06:10,639
for proxima sorry the http method for

121
00:06:10,639 --> 00:06:13,680
proxying tcp but for udp

122
00:06:13,680 --> 00:06:15,199
and uh

123
00:06:15,199 --> 00:06:17,039
on in our you know discussions of

124
00:06:17,039 --> 00:06:19,600
requirements over the the

125
00:06:19,600 --> 00:06:21,840
now two years almost that we've been

126
00:06:21,840 --> 00:06:23,919
working on this um

127
00:06:23,919 --> 00:06:26,479
we want this to work over all versions

128
00:06:26,479 --> 00:06:29,600
of http and across intermediaries

129
00:06:29,600 --> 00:06:32,960
and when we're working over http 3 we

130
00:06:32,960 --> 00:06:34,560
really want to leverage the quick

131
00:06:34,560 --> 00:06:37,280
datagram frame which is an extension to

132
00:06:37,280 --> 00:06:39,039
quick version 1

133
00:06:39,039 --> 00:06:43,759
which is currently undergoing asg review

134
00:06:43,759 --> 00:06:45,919
and since

135
00:06:45,919 --> 00:06:47,360
as we started working on this this was

136
00:06:47,360 --> 00:06:49,120
all in one draft

137
00:06:49,120 --> 00:06:51,759
but we realized that there were other

138
00:06:51,759 --> 00:06:53,919
features or applications such as web

139
00:06:53,919 --> 00:06:55,440
transport that were interested in using

140
00:06:55,440 --> 00:06:57,520
datagrams of http but not specifically

141
00:06:57,520 --> 00:06:59,599
in connect udp so we split it into two

142
00:06:59,599 --> 00:07:00,639
drafts

143
00:07:00,639 --> 00:07:02,400
so some other

144
00:07:02,400 --> 00:07:04,160
working groups could depend on the http

145
00:07:04,160 --> 00:07:05,759
datagrams draft without depending on the

146
00:07:05,759 --> 00:07:08,080
connect udp draft

147
00:07:08,080 --> 00:07:11,360
so earlier in april this year we had an

148
00:07:11,360 --> 00:07:14,160
interim to focus on http datagrams and

149
00:07:14,160 --> 00:07:17,759
we kind of redesigned the everything

150
00:07:17,759 --> 00:07:20,080
uh after and had some discussion on the

151
00:07:20,080 --> 00:07:22,080
list and then we merged some pr's which

152
00:07:22,080 --> 00:07:23,120
was great

153
00:07:23,120 --> 00:07:25,479
and then at the next itf meeting we

154
00:07:25,479 --> 00:07:29,280
re-redesigned everything again

155
00:07:29,280 --> 00:07:31,759
which is also great uh but you know it

156
00:07:31,759 --> 00:07:33,599
is causing quite some churn in the

157
00:07:33,599 --> 00:07:35,039
drafts so

158
00:07:35,039 --> 00:07:38,240
hopefully our goal today is um

159
00:07:38,240 --> 00:07:41,840
to if we're redesigning things again

160
00:07:41,840 --> 00:07:43,520
fairly you know reach some point where

161
00:07:43,520 --> 00:07:45,199
we have something that everyone likes so

162
00:07:45,199 --> 00:07:47,520
we can then move on from there

163
00:07:47,520 --> 00:07:49,599
because there are folks who have this uh

164
00:07:49,599 --> 00:07:51,599
in production and

165
00:07:51,599 --> 00:07:53,520
it'd be good to get to a place with the

166
00:07:53,520 --> 00:07:55,199
dresser more stable if we all find a

167
00:07:55,199 --> 00:07:58,319
design that everyone likes

168
00:07:58,319 --> 00:07:59,840
um so

169
00:07:59,840 --> 00:08:01,840
as of the

170
00:08:01,840 --> 00:08:04,639
connectudp draft 6 and http

171
00:08:04,639 --> 00:08:06,160
datagramsdraft5

172
00:08:06,160 --> 00:08:08,879
we have three working completely

173
00:08:08,879 --> 00:08:11,440
independent implementations right now

174
00:08:11,440 --> 00:08:14,000
the uh cloudflare quiche one the

175
00:08:14,000 --> 00:08:17,039
ericsson one and the google quiche one

176
00:08:17,039 --> 00:08:18,879
uh and

177
00:08:18,879 --> 00:08:20,720
both google and erickson have cliented

178
00:08:20,720 --> 00:08:23,919
servers and cloudflare has a client and

179
00:08:23,919 --> 00:08:26,000
we reached successfully drop with all of

180
00:08:26,000 --> 00:08:28,879
these at the hackathon last week so

181
00:08:28,879 --> 00:08:31,820
good news uh things work

182
00:08:31,820 --> 00:08:33,440
[Music]

183
00:08:33,440 --> 00:08:36,080
then let's see where we were kind of

184
00:08:36,080 --> 00:08:37,440
based on these

185
00:08:37,440 --> 00:08:39,279
prior meetings

186
00:08:39,279 --> 00:08:41,679
so a big read a part of the redesign

187
00:08:41,679 --> 00:08:44,000
that we did back in april was to have a

188
00:08:44,000 --> 00:08:45,279
strong and

189
00:08:45,279 --> 00:08:48,080
tight coupling between http datagrams

190
00:08:48,080 --> 00:08:50,480
and http request streams so think of it

191
00:08:50,480 --> 00:08:52,240
like a sidecar

192
00:08:52,240 --> 00:08:54,640
where the main motorcycle the main thing

193
00:08:54,640 --> 00:08:58,320
is your http request which

194
00:08:58,320 --> 00:09:00,160
in quick for example those are on

195
00:09:00,160 --> 00:09:02,880
client-initiated bi-directional streams

196
00:09:02,880 --> 00:09:05,279
and the idea is that datagrams all are

197
00:09:05,279 --> 00:09:07,440
associated with one such stream they

198
00:09:07,440 --> 00:09:10,080
don't exist in a vacuum and that makes

199
00:09:10,080 --> 00:09:12,240
it a lot easier for everyone to reason

200
00:09:12,240 --> 00:09:14,399
about datagrams and where they live in

201
00:09:14,399 --> 00:09:18,240
you know regards to http semantics

202
00:09:18,240 --> 00:09:22,160
we also landed on the capsule protocol

203
00:09:22,160 --> 00:09:25,360
which is a way to send information end

204
00:09:25,360 --> 00:09:28,160
to end between endpoints

205
00:09:28,160 --> 00:09:29,839
as a even if there are http

206
00:09:29,839 --> 00:09:32,000
intermediaries along the way and the

207
00:09:32,000 --> 00:09:33,839
capsule protocol is

208
00:09:33,839 --> 00:09:36,880
as simple as you can kind of get it it's

209
00:09:36,880 --> 00:09:37,600
a

210
00:09:37,600 --> 00:09:39,279
sequence of tlvs

211
00:09:39,279 --> 00:09:41,279
it's uh inside the data stream and by

212
00:09:41,279 --> 00:09:43,760
data stream i mean the for http two and

213
00:09:43,760 --> 00:09:46,240
three what's inside data frames

214
00:09:46,240 --> 00:09:50,000
and it's uh in http one that's just the

215
00:09:50,000 --> 00:09:52,080
the the mainstream of data for a

216
00:09:52,080 --> 00:09:53,360
connection

217
00:09:53,360 --> 00:09:55,440
uh and additionally

218
00:09:55,440 --> 00:09:58,480
one specific capsule that we define is

219
00:09:58,480 --> 00:10:01,120
the datagram capsule that carries an

220
00:10:01,120 --> 00:10:03,040
http datagram and in particular that's

221
00:10:03,040 --> 00:10:05,760
useful for versions of http that work

222
00:10:05,760 --> 00:10:08,640
over tcp so http one and two

223
00:10:08,640 --> 00:10:09,839
because you don't have the quick

224
00:10:09,839 --> 00:10:11,760
datagram frame there so that's how you

225
00:10:11,760 --> 00:10:15,519
convey http datagrams for those versions

226
00:10:15,519 --> 00:10:17,440
and then in terms of encoding for the

227
00:10:17,440 --> 00:10:19,440
quick datagram frame

228
00:10:19,440 --> 00:10:20,720
the

229
00:10:20,720 --> 00:10:22,720
like what at the quick layer is the

230
00:10:22,720 --> 00:10:25,279
payload of a quick datagram frame starts

231
00:10:25,279 --> 00:10:27,680
with a warrant so

232
00:10:27,680 --> 00:10:31,360
i rc 9000 style variable length integer

233
00:10:31,360 --> 00:10:34,399
which has the stream id divided by four

234
00:10:34,399 --> 00:10:36,240
and kind of the tweak of that encoding

235
00:10:36,240 --> 00:10:37,920
is because client-initiated

236
00:10:37,920 --> 00:10:39,200
bidirectional streams which are the

237
00:10:39,200 --> 00:10:41,519
request streams in http 3

238
00:10:41,519 --> 00:10:42,560
are

239
00:10:42,560 --> 00:10:45,200
all divisible by four so we just divided

240
00:10:45,200 --> 00:10:48,000
by four and that saves some bits

241
00:10:48,000 --> 00:10:50,320
and finally because

242
00:10:50,320 --> 00:10:52,399
that encoding could you know potentially

243
00:10:52,399 --> 00:10:54,640
change that on the road and also changes

244
00:10:54,640 --> 00:10:56,800
the semantics of what we see in quick

245
00:10:56,800 --> 00:10:58,240
datagram frames which didn't have

246
00:10:58,240 --> 00:11:00,000
semantics before we negotiate that with

247
00:11:00,000 --> 00:11:02,640
an http 3 setting

248
00:11:02,640 --> 00:11:05,440
all right um

249
00:11:05,440 --> 00:11:06,399
now

250
00:11:06,399 --> 00:11:07,519
where are we

251
00:11:07,519 --> 00:11:09,760
today so

252
00:11:09,760 --> 00:11:13,040
we had some good discussion on the list

253
00:11:13,040 --> 00:11:15,279
last week thanks for kicking things off

254
00:11:15,279 --> 00:11:16,320
empty

255
00:11:16,320 --> 00:11:17,519
and

256
00:11:17,519 --> 00:11:19,279
one of the things that we realized there

257
00:11:19,279 --> 00:11:20,480
is

258
00:11:20,480 --> 00:11:22,000
while there are some parts that you know

259
00:11:22,000 --> 00:11:24,480
we're reaching good agreement on

260
00:11:24,480 --> 00:11:26,959
such as most of what i just talked about

261
00:11:26,959 --> 00:11:30,880
the um bits about um extensibility and

262
00:11:30,880 --> 00:11:33,360
how you demultiplex

263
00:11:33,360 --> 00:11:36,000
aren't quite clear or you know quite

264
00:11:36,000 --> 00:11:37,920
full agreement there so i'm kind of

265
00:11:37,920 --> 00:11:39,680
gonna walk us through

266
00:11:39,680 --> 00:11:42,000
what we're trying to do with those uh

267
00:11:42,000 --> 00:11:44,800
what our requirements are and kind of

268
00:11:44,800 --> 00:11:46,320
explain the current design and how we

269
00:11:46,320 --> 00:11:48,320
could potentially change it

270
00:11:48,320 --> 00:11:50,079
um

271
00:11:50,079 --> 00:11:51,120
so

272
00:11:51,120 --> 00:11:53,360
yeah i'm gonna go through that apologies

273
00:11:53,360 --> 00:11:56,480
if this is kind of a long ramble it is

274
00:11:56,480 --> 00:11:57,920
the complete middle of the night over

275
00:11:57,920 --> 00:12:00,160
here in california but i will try to be

276
00:12:00,160 --> 00:12:01,760
as clear as possible

277
00:12:01,760 --> 00:12:03,760
um feel free to jump in especially with

278
00:12:03,760 --> 00:12:06,639
clarifying questions uh but then once i

279
00:12:06,639 --> 00:12:08,480
have gone through

280
00:12:08,480 --> 00:12:10,399
some set of slides i've definitely left

281
00:12:10,399 --> 00:12:12,720
a lot of time for discussion to

282
00:12:12,720 --> 00:12:14,240
make sure we get something that folks

283
00:12:14,240 --> 00:12:15,200
like

284
00:12:15,200 --> 00:12:18,800
all right um so

285
00:12:18,800 --> 00:12:22,320
this is a set of extensions that have

286
00:12:22,320 --> 00:12:24,399
been discussed in or around the working

287
00:12:24,399 --> 00:12:25,680
group

288
00:12:25,680 --> 00:12:28,720
of protocols that use http data grabs so

289
00:12:28,720 --> 00:12:30,720
to be clear i'm not saying that let's

290
00:12:30,720 --> 00:12:32,240
not try to figure out if those

291
00:12:32,240 --> 00:12:34,079
extensions are a good idea or if there's

292
00:12:34,079 --> 00:12:36,160
something we want to build they're just

293
00:12:36,160 --> 00:12:38,399
random ideas that exist

294
00:12:38,399 --> 00:12:39,519
and

295
00:12:39,519 --> 00:12:40,880
because they're out there and some

296
00:12:40,880 --> 00:12:42,800
people are passionate about them maybe

297
00:12:42,800 --> 00:12:44,160
like we should make sure that the

298
00:12:44,160 --> 00:12:46,000
protocol is extensible enough to allow

299
00:12:46,000 --> 00:12:47,680
building them down the road

300
00:12:47,680 --> 00:12:49,519
so we're you know eventually going to

301
00:12:49,519 --> 00:12:52,079
build connect ip and there is interest

302
00:12:52,079 --> 00:12:54,240
in being able to compress the ap header

303
00:12:54,240 --> 00:12:56,160
on connect ip

304
00:12:56,160 --> 00:12:57,120
um

305
00:12:57,120 --> 00:12:59,200
similarly in connect udp some folks have

306
00:12:59,200 --> 00:13:02,240
expressed interest in being able to

307
00:13:02,240 --> 00:13:04,560
speak ecn or you know if there is ecn

308
00:13:04,560 --> 00:13:06,560
between the proxy and target to be able

309
00:13:06,560 --> 00:13:08,079
to convey that

310
00:13:08,079 --> 00:13:10,160
on the encapsulated path between the

311
00:13:10,160 --> 00:13:11,760
client and the proxy

312
00:13:11,760 --> 00:13:13,920
or similarly if you if the proxy

313
00:13:13,920 --> 00:13:16,000
receives an icmp packet that refers to

314
00:13:16,000 --> 00:13:18,320
that five tuple being able to let the

315
00:13:18,320 --> 00:13:20,240
client know about that is an extension

316
00:13:20,240 --> 00:13:22,959
that someone wants to build

317
00:13:22,959 --> 00:13:25,040
otherwise

318
00:13:25,040 --> 00:13:27,360
there is interest in doing path mtu

319
00:13:27,360 --> 00:13:30,320
discovery for http datagrams so

320
00:13:30,320 --> 00:13:32,000
because the quick datagram frame can't

321
00:13:32,000 --> 00:13:34,959
be fragmented it has a maximal

322
00:13:34,959 --> 00:13:37,760
payload size so an mtu for datagrams

323
00:13:37,760 --> 00:13:39,519
and there is interest in being able to

324
00:13:39,519 --> 00:13:41,680
figure out what that is uh

325
00:13:41,680 --> 00:13:43,440
and that would be an extension so ben

326
00:13:43,440 --> 00:13:45,839
has a presentation about his proposal

327
00:13:45,839 --> 00:13:47,920
there in the end as time permits section

328
00:13:47,920 --> 00:13:49,199
so i won't need to go into too much

329
00:13:49,199 --> 00:13:50,560
detail but there's interest in doing

330
00:13:50,560 --> 00:13:53,600
this at the htp level as opposed to at a

331
00:13:53,600 --> 00:13:54,800
higher level

332
00:13:54,800 --> 00:13:57,440
and then over in web transport there's

333
00:13:57,440 --> 00:14:00,480
discussion of conveying priorities

334
00:14:00,480 --> 00:14:04,320
where potentially instead of just

335
00:14:04,320 --> 00:14:06,399
you know you you can always prioritize

336
00:14:06,399 --> 00:14:08,639
uh any data as you're sending it but

337
00:14:08,639 --> 00:14:10,800
being able to tell your peer how you

338
00:14:10,800 --> 00:14:12,079
want to prioritize it is something that

339
00:14:12,079 --> 00:14:14,160
we might want to be able to do for you

340
00:14:14,160 --> 00:14:16,560
know different types of data grabs

341
00:14:16,560 --> 00:14:18,320
so

342
00:14:18,320 --> 00:14:20,480
the the reason i kind of selected these

343
00:14:20,480 --> 00:14:22,639
extensions in particular

344
00:14:22,639 --> 00:14:24,079
is

345
00:14:24,079 --> 00:14:26,240
they right now we're building you know a

346
00:14:26,240 --> 00:14:28,959
way to send http datagrams uh which you

347
00:14:28,959 --> 00:14:30,240
know okay we're sending these data

348
00:14:30,240 --> 00:14:32,959
payloads um but it sounds like there is

349
00:14:32,959 --> 00:14:35,440
interest in being able to send multiple

350
00:14:35,440 --> 00:14:37,600
different types of payloads at the same

351
00:14:37,600 --> 00:14:38,480
time

352
00:14:38,480 --> 00:14:40,320
and that means demultiplexing so let's

353
00:14:40,320 --> 00:14:42,079
say if i'm sending

354
00:14:42,079 --> 00:14:45,040
you know a connect ap um

355
00:14:45,040 --> 00:14:48,480
uncompressed full ip packet uh and i'm

356
00:14:48,480 --> 00:14:50,560
also sending one that is compressed i

357
00:14:50,560 --> 00:14:52,720
need a way to tell my peer

358
00:14:52,720 --> 00:14:54,480
uh oh when you receive it this one is

359
00:14:54,480 --> 00:14:57,360
compressed and this one is not um

360
00:14:57,360 --> 00:14:58,480
so

361
00:14:58,480 --> 00:15:00,399
that's where we get into demultiplexing

362
00:15:00,399 --> 00:15:03,199
we need a way to tell between these

363
00:15:03,199 --> 00:15:04,800
different formats that we have on the

364
00:15:04,800 --> 00:15:07,040
wire and you know a simple way to do

365
00:15:07,040 --> 00:15:09,040
that is by having an identifier that you

366
00:15:09,040 --> 00:15:12,079
send at the start of each packet

367
00:15:12,079 --> 00:15:14,800
but um what the the big question here

368
00:15:14,800 --> 00:15:17,040
that has come up on the list is

369
00:15:17,040 --> 00:15:19,920
why do we need to care now um can't we

370
00:15:19,920 --> 00:15:21,040
just say

371
00:15:21,040 --> 00:15:22,720
this is extend these are extensions

372
00:15:22,720 --> 00:15:25,920
we'll deal with them when we're done

373
00:15:25,920 --> 00:15:28,560
and that that is absolutely a reasonable

374
00:15:28,560 --> 00:15:29,839
approach we want to keep the core

375
00:15:29,839 --> 00:15:33,839
protocol ideally as simple as possible

376
00:15:33,839 --> 00:15:35,360
but we want to make sure that we don't

377
00:15:35,360 --> 00:15:37,680
paint ourselves into a corner we want to

378
00:15:37,680 --> 00:15:39,360
make sure that when we go to build these

379
00:15:39,360 --> 00:15:41,279
extensions we don't look at what we have

380
00:15:41,279 --> 00:15:42,240
and go

381
00:15:42,240 --> 00:15:45,040
oh if we had just done this bit slightly

382
00:15:45,040 --> 00:15:46,800
differently we would have been able to

383
00:15:46,800 --> 00:15:49,120
extend this easily but now we can't so i

384
00:15:49,120 --> 00:15:50,480
think it's valuable to have this

385
00:15:50,480 --> 00:15:52,560
discussion right now before we publish

386
00:15:52,560 --> 00:15:53,360
this

387
00:15:53,360 --> 00:15:55,120
to make sure that whatever the

388
00:15:55,120 --> 00:15:57,759
extensibility knob or the extensibility

389
00:15:57,759 --> 00:15:59,279
foothold if you will

390
00:15:59,279 --> 00:16:03,440
that we need is in the core protocol

391
00:16:03,440 --> 00:16:04,399
so

392
00:16:04,399 --> 00:16:07,120
that you know as our favorite thing is a

393
00:16:07,120 --> 00:16:08,880
good segue into kind of requirements

394
00:16:08,880 --> 00:16:12,720
what will we want for these extensions

395
00:16:13,759 --> 00:16:16,160
um so the

396
00:16:16,160 --> 00:16:19,040
actual one second

397
00:16:19,920 --> 00:16:21,600
coffee

398
00:16:21,600 --> 00:16:22,959
so the

399
00:16:22,959 --> 00:16:25,519
the first goal for for this specific one

400
00:16:25,519 --> 00:16:28,240
is this idea of demultiplexing we can

401
00:16:28,240 --> 00:16:30,240
have multiple formats that coexist

402
00:16:30,240 --> 00:16:31,839
simultaneously

403
00:16:31,839 --> 00:16:33,759
and we want uh the receiver to be able

404
00:16:33,759 --> 00:16:36,800
to differentiate between them

405
00:16:36,800 --> 00:16:39,120
another requirement is you know we we're

406
00:16:39,120 --> 00:16:43,360
working across intermediaries here and

407
00:16:43,360 --> 00:16:46,079
often intermediaries don't get updated

408
00:16:46,079 --> 00:16:48,160
as often as endpoints so as we've seen

409
00:16:48,160 --> 00:16:50,480
you know with other protocols at the atf

410
00:16:50,480 --> 00:16:51,680
the fewer

411
00:16:51,680 --> 00:16:53,600
uh machines you need to update the more

412
00:16:53,600 --> 00:16:55,360
successful your protocol

413
00:16:55,360 --> 00:16:57,199
is likely to be take you know it was a

414
00:16:57,199 --> 00:16:59,279
lot easier to deploy quick than ipv6 for

415
00:16:59,279 --> 00:17:00,720
example because you know if you only

416
00:17:00,720 --> 00:17:02,399
need to deploy the modify the endpoints

417
00:17:02,399 --> 00:17:03,759
instead of everyone along the way you're

418
00:17:03,759 --> 00:17:05,119
in better shape

419
00:17:05,119 --> 00:17:08,000
so what the way that applies here is if

420
00:17:08,000 --> 00:17:10,079
we can have a way that we can deploy

421
00:17:10,079 --> 00:17:11,919
extensions by modifying the client who

422
00:17:11,919 --> 00:17:13,839
wants it and the proxy who wants it

423
00:17:13,839 --> 00:17:15,119
without having to modify all the

424
00:17:15,119 --> 00:17:18,480
intermediaries that's a big one

425
00:17:18,480 --> 00:17:20,959
another requirement is

426
00:17:20,959 --> 00:17:22,880
there is some interest like the mtu

427
00:17:22,880 --> 00:17:25,199
discovery extension

428
00:17:25,199 --> 00:17:27,839
for extensions that apply to multiple

429
00:17:27,839 --> 00:17:29,919
protocols so i'm saying protocol or

430
00:17:29,919 --> 00:17:32,160
application independently i mean like

431
00:17:32,160 --> 00:17:34,320
what sits on top of http datagram so

432
00:17:34,320 --> 00:17:36,240
that right now the main ones we have in

433
00:17:36,240 --> 00:17:38,160
mind are connect udp connect ip and web

434
00:17:38,160 --> 00:17:39,360
transform

435
00:17:39,360 --> 00:17:41,840
uh and there is some value like this one

436
00:17:41,840 --> 00:17:43,840
isn't absolutely obviously required but

437
00:17:43,840 --> 00:17:46,240
if we have a way to write this once and

438
00:17:46,240 --> 00:17:49,200
for all of them that could be useful

439
00:17:49,200 --> 00:17:50,000
uh

440
00:17:50,000 --> 00:17:51,679
and then another requirement that we

441
00:17:51,679 --> 00:17:53,760
didn't really set off with in the first

442
00:17:53,760 --> 00:17:55,600
versions of http datagrams but that

443
00:17:55,600 --> 00:17:57,520
became very clear

444
00:17:57,520 --> 00:17:58,720
this year

445
00:17:58,720 --> 00:18:00,880
was that uh we want to make this

446
00:18:00,880 --> 00:18:03,840
mechanism optional um there are

447
00:18:03,840 --> 00:18:05,679
implementers that don't want this

448
00:18:05,679 --> 00:18:07,280
feature today and really want to get

449
00:18:07,280 --> 00:18:08,880
things out the door as simple as

450
00:18:08,880 --> 00:18:10,400
possible

451
00:18:10,400 --> 00:18:11,600
so

452
00:18:11,600 --> 00:18:14,160
they really want to be able to pretend

453
00:18:14,160 --> 00:18:15,600
that if we build the system into the

454
00:18:15,600 --> 00:18:18,000
core spec uh to pretend it's not there

455
00:18:18,000 --> 00:18:19,679
so that means you know not only optional

456
00:18:19,679 --> 00:18:20,880
to implement

457
00:18:20,880 --> 00:18:23,440
sorry but also

458
00:18:23,440 --> 00:18:24,880
that they don't need to reason about too

459
00:18:24,880 --> 00:18:27,360
many concept concepts to be able to

460
00:18:27,360 --> 00:18:30,400
implement the core spec

461
00:18:30,400 --> 00:18:32,720
and then a final design requirement is

462
00:18:32,720 --> 00:18:34,480
what i've been calling zero latency

463
00:18:34,480 --> 00:18:35,919
extensibility

464
00:18:35,919 --> 00:18:38,640
which is the fact that were to be

465
00:18:38,640 --> 00:18:41,200
to allow using extensions in the first

466
00:18:41,200 --> 00:18:43,360
application flight i'm gonna i have some

467
00:18:43,360 --> 00:18:45,039
slides to explain into more detail what

468
00:18:45,039 --> 00:18:46,880
that means exactly

469
00:18:46,880 --> 00:18:48,160
um

470
00:18:48,160 --> 00:18:50,240
all right so

471
00:18:50,240 --> 00:18:52,880
on the topic of

472
00:18:52,880 --> 00:18:55,200
you know supporting extensions uh one

473
00:18:55,200 --> 00:18:57,280
important property here

474
00:18:57,280 --> 00:18:58,960
is

475
00:18:58,960 --> 00:19:00,799
if something is not mandatory to

476
00:19:00,799 --> 00:19:02,640
implement or if it's an extension that

477
00:19:02,640 --> 00:19:04,240
means that not everyone will implement

478
00:19:04,240 --> 00:19:05,600
it

479
00:19:05,600 --> 00:19:07,120
and

480
00:19:07,120 --> 00:19:10,080
one of the design properties of http is

481
00:19:10,080 --> 00:19:11,919
when the client wants to send its

482
00:19:11,919 --> 00:19:14,799
request it doesn't know the full feature

483
00:19:14,799 --> 00:19:17,919
set of the proxy it's talking to and

484
00:19:17,919 --> 00:19:19,760
you can't use settings to negotiate

485
00:19:19,760 --> 00:19:21,919
feature capabilities because there could

486
00:19:21,919 --> 00:19:23,520
be an intermediary between the client

487
00:19:23,520 --> 00:19:24,880
and the proxy

488
00:19:24,880 --> 00:19:26,400
so

489
00:19:26,400 --> 00:19:27,840
and that's a common thing across all of

490
00:19:27,840 --> 00:19:29,200
http that is one of the design

491
00:19:29,200 --> 00:19:30,559
constraints that we kind of inherited

492
00:19:30,559 --> 00:19:32,559
from designing deciding to build mask

493
00:19:32,559 --> 00:19:34,480
over http

494
00:19:34,480 --> 00:19:35,360
and

495
00:19:35,360 --> 00:19:37,520
waiting a full round trip from the

496
00:19:37,520 --> 00:19:39,440
between the client and the proxy to get

497
00:19:39,440 --> 00:19:40,240
the

498
00:19:40,240 --> 00:19:42,240
ttp response which could negotiate the

499
00:19:42,240 --> 00:19:44,480
support for an extension

500
00:19:44,480 --> 00:19:46,880
is unacceptable like we're in 2021

501
00:19:46,880 --> 00:19:48,880
latency is the

502
00:19:48,880 --> 00:19:51,120
most important like performance metric

503
00:19:51,120 --> 00:19:53,280
for pretty much everything we do

504
00:19:53,280 --> 00:19:55,360
and we need a way to be able to use

505
00:19:55,360 --> 00:19:57,600
things optimistically and fall back you

506
00:19:57,600 --> 00:19:59,360
know if they're not supported and

507
00:19:59,360 --> 00:20:01,200
without everything breaking we can't but

508
00:20:01,200 --> 00:20:03,280
we can't burn a full round trip to to

509
00:20:03,280 --> 00:20:04,840
wait for these

510
00:20:04,840 --> 00:20:06,960
things um

511
00:20:06,960 --> 00:20:08,559
all right so what what do i mean exactly

512
00:20:08,559 --> 00:20:11,120
by zero latency extensively well what's

513
00:20:11,120 --> 00:20:13,440
your latency setup uh so this is a

514
00:20:13,440 --> 00:20:16,159
pretty standard scenario where you're

515
00:20:16,159 --> 00:20:18,240
just doing the client wants to do

516
00:20:18,240 --> 00:20:21,360
connect udp to a proxy and then inside

517
00:20:21,360 --> 00:20:23,600
those udp payloads it wants to speak

518
00:20:23,600 --> 00:20:25,760
quick to a target server

519
00:20:25,760 --> 00:20:26,799
and

520
00:20:26,799 --> 00:20:28,400
one of the design choices we have in

521
00:20:28,400 --> 00:20:29,679
connect udp

522
00:20:29,679 --> 00:20:31,919
which technically is also possible in

523
00:20:31,919 --> 00:20:34,480
connect but is you send your connect udp

524
00:20:34,480 --> 00:20:37,200
request and alongside it maybe even in

525
00:20:37,200 --> 00:20:39,200
the same packet you can send an http

526
00:20:39,200 --> 00:20:40,720
datagram that contains your quick

527
00:20:40,720 --> 00:20:42,320
initial to the target

528
00:20:42,320 --> 00:20:44,240
and if the proxy

529
00:20:44,240 --> 00:20:47,280
accepts it it'll send a 200 okay back to

530
00:20:47,280 --> 00:20:49,039
the client and at the same time it'll

531
00:20:49,039 --> 00:20:50,720
receive that quick initial and send it

532
00:20:50,720 --> 00:20:53,039
over to the target if the proxy decides

533
00:20:53,039 --> 00:20:56,000
to reject the request it'll just

534
00:20:56,000 --> 00:20:58,159
silently drop that quick initial so

535
00:20:58,159 --> 00:21:00,159
there's no harm no foul

536
00:21:00,159 --> 00:21:01,679
but you've just saved a round trip

537
00:21:01,679 --> 00:21:03,039
between the client and proxy you don't

538
00:21:03,039 --> 00:21:04,159
need to say

539
00:21:04,159 --> 00:21:06,480
request response and then send the

540
00:21:06,480 --> 00:21:08,720
datagram you can send it optimistically

541
00:21:08,720 --> 00:21:10,240
knowing that if for some reason it's

542
00:21:10,240 --> 00:21:11,600
denied it gets dropped not the end of

543
00:21:11,600 --> 00:21:13,039
the world

544
00:21:13,039 --> 00:21:14,480
and

545
00:21:14,480 --> 00:21:17,120
again that that is user-visible latency

546
00:21:17,120 --> 00:21:18,559
for that end-to-end

547
00:21:18,559 --> 00:21:20,159
quick connection between the client and

548
00:21:20,159 --> 00:21:23,200
target that is um being saved so big win

549
00:21:23,200 --> 00:21:24,400
there

550
00:21:24,400 --> 00:21:25,840
um

551
00:21:25,840 --> 00:21:26,799
so

552
00:21:26,799 --> 00:21:28,559
now

553
00:21:28,559 --> 00:21:31,840
uh ian what's up

554
00:21:32,559 --> 00:21:34,960
on the last one so um are you

555
00:21:34,960 --> 00:21:36,159
i'll just go back one slide a few

556
00:21:36,159 --> 00:21:38,240
minutes so um

557
00:21:38,240 --> 00:21:39,919
my understanding is this just requires

558
00:21:39,919 --> 00:21:42,640
the core functionality of

559
00:21:42,640 --> 00:21:45,280
of the draft not the

560
00:21:45,280 --> 00:21:47,280
like any of the optional functionalities

561
00:21:47,280 --> 00:21:49,039
is that accurate or am i missing that's

562
00:21:49,039 --> 00:21:51,200
correct yeah this part is just a

563
00:21:51,200 --> 00:21:53,200
standard one i have a another diagram in

564
00:21:53,200 --> 00:21:55,600
two slides with with extensions okay i

565
00:21:55,600 --> 00:21:56,559
just want to make sure i understood

566
00:21:56,559 --> 00:21:58,080
correctly of like which portions of

567
00:21:58,080 --> 00:21:59,840
these um scenarios that you're trying to

568
00:21:59,840 --> 00:22:01,840
enable like require the extensions and

569
00:22:01,840 --> 00:22:03,440
which dome thanks

570
00:22:03,440 --> 00:22:05,360
absolutely that's a great question that

571
00:22:05,360 --> 00:22:07,039
is perfectly

572
00:22:07,039 --> 00:22:09,280
without any extensive vld multiplexing

573
00:22:09,280 --> 00:22:11,039
required

574
00:22:11,039 --> 00:22:13,840
tommy

575
00:22:16,240 --> 00:22:18,080
all right hello cool i think the audio

576
00:22:18,080 --> 00:22:19,280
is working now

577
00:22:19,280 --> 00:22:20,320
um

578
00:22:20,320 --> 00:22:22,799
just just to jump in a little bit to

579
00:22:22,799 --> 00:22:25,120
respond to ian though as we've been

580
00:22:25,120 --> 00:22:26,640
looking at the different options for how

581
00:22:26,640 --> 00:22:28,400
you communicate

582
00:22:28,400 --> 00:22:30,640
like if context are optional and stuff

583
00:22:30,640 --> 00:22:32,799
that does have an impact on

584
00:22:32,799 --> 00:22:34,960
how you send the early data and like

585
00:22:34,960 --> 00:22:38,080
what capsule types are allowed so it's

586
00:22:38,080 --> 00:22:40,400
just something to keep in mind like this

587
00:22:40,400 --> 00:22:41,679
should be possible with any of the

588
00:22:41,679 --> 00:22:42,799
setups

589
00:22:42,799 --> 00:22:43,679
but

590
00:22:43,679 --> 00:22:45,679
sometimes there are constraints on what

591
00:22:45,679 --> 00:22:47,440
you can send in this first flight

592
00:22:47,440 --> 00:22:48,960
depending on how you negotiate

593
00:22:48,960 --> 00:22:50,559
extensibility

594
00:22:50,559 --> 00:22:52,720
yeah i actually have some slides to

595
00:22:52,720 --> 00:22:55,120
discuss this in uh coming right up

596
00:22:55,120 --> 00:22:56,559
thanks tommy

597
00:22:56,559 --> 00:22:58,720
um

598
00:22:58,720 --> 00:22:59,520
so

599
00:22:59,520 --> 00:23:01,760
uh the

600
00:23:01,760 --> 00:23:04,240
kind of sorry the order of the slides is

601
00:23:04,240 --> 00:23:06,080
kind of a little bit of a mess i'm kind

602
00:23:06,080 --> 00:23:07,360
of jumping back and forth and i

603
00:23:07,360 --> 00:23:10,080
apologize for that um so

604
00:23:10,080 --> 00:23:11,440
as we were saying some of these

605
00:23:11,440 --> 00:23:13,600
extensions they want to be able to send

606
00:23:13,600 --> 00:23:15,440
multiple formats so

607
00:23:15,440 --> 00:23:17,360
what's the simplest way to do that you

608
00:23:17,360 --> 00:23:19,039
put an identifier at the start so when

609
00:23:19,039 --> 00:23:20,240
you're receiving you parse the

610
00:23:20,240 --> 00:23:22,320
identifier and then you know which uh

611
00:23:22,320 --> 00:23:24,480
which format like what parser you should

612
00:23:24,480 --> 00:23:26,559
use to parse this datagram like is this

613
00:23:26,559 --> 00:23:28,640
just a udb payload or is this compressed

614
00:23:28,640 --> 00:23:31,039
or does this have some additional data

615
00:23:31,039 --> 00:23:32,720
at the start at the end

616
00:23:32,720 --> 00:23:34,720
um

617
00:23:34,720 --> 00:23:37,760
and but if we're making this optional

618
00:23:37,760 --> 00:23:40,080
you end up with an interesting conundrum

619
00:23:40,080 --> 00:23:42,159
which is

620
00:23:42,159 --> 00:23:44,240
is that identifier at the start present

621
00:23:44,240 --> 00:23:46,159
or not should i be parsing this

622
00:23:46,159 --> 00:23:47,520
identifier

623
00:23:47,520 --> 00:23:49,279
or should i just assume that it's not

624
00:23:49,279 --> 00:23:51,840
there um

625
00:23:51,840 --> 00:23:53,520
and that that

626
00:23:53,520 --> 00:23:55,200
question is where

627
00:23:55,200 --> 00:23:57,120
some of these complexities for that

628
00:23:57,120 --> 00:23:59,600
extensibility design come from because

629
00:23:59,600 --> 00:24:01,520
in the original version where this was

630
00:24:01,520 --> 00:24:04,159
always there it was a lot easier but but

631
00:24:04,159 --> 00:24:07,919
turns out we can make this work um

632
00:24:10,320 --> 00:24:12,799
so then this is what

633
00:24:12,799 --> 00:24:14,720
tommy was alluding to a little bit now

634
00:24:14,720 --> 00:24:17,200
this is when we want to do extensibility

635
00:24:17,200 --> 00:24:19,279
but without a latency cost so let's say

636
00:24:19,279 --> 00:24:20,799
you're a client you want to talk to a

637
00:24:20,799 --> 00:24:21,919
proxy

638
00:24:21,919 --> 00:24:22,960
and

639
00:24:22,960 --> 00:24:25,760
you want to use some extensions um

640
00:24:25,760 --> 00:24:28,320
your main goal is to do connect udp to a

641
00:24:28,320 --> 00:24:30,000
target uh you still want to you know

642
00:24:30,000 --> 00:24:31,360
send you have your end-to-end quick

643
00:24:31,360 --> 00:24:33,840
connection to your connect udp proxy but

644
00:24:33,840 --> 00:24:35,679
maybe you want to use let's say the ecn

645
00:24:35,679 --> 00:24:37,919
extension um

646
00:24:37,919 --> 00:24:40,320
you just don't know for sure

647
00:24:40,320 --> 00:24:42,000
uh if the proxy supports it at the

648
00:24:42,000 --> 00:24:44,080
moment you start so you kind of send

649
00:24:44,080 --> 00:24:45,840
your request and mention you know

650
00:24:45,840 --> 00:24:47,279
potentially with a header or something

651
00:24:47,279 --> 00:24:48,880
as part of your request that you're also

652
00:24:48,880 --> 00:24:52,080
going to want to use extensibility

653
00:24:52,080 --> 00:24:55,360
and you still send your http datagram

654
00:24:55,360 --> 00:24:57,200
you just need to make sure to let the

655
00:24:57,200 --> 00:24:59,279
proxy know that

656
00:24:59,279 --> 00:25:01,360
this datagram for example doesn't have a

657
00:25:01,360 --> 00:25:03,840
demultiplexing identifier at the start

658
00:25:03,840 --> 00:25:05,919
so there's no confusion even if the

659
00:25:05,919 --> 00:25:07,679
proxy does or does not support this

660
00:25:07,679 --> 00:25:09,440
extension and then it can you know

661
00:25:09,440 --> 00:25:11,600
seamlessly without a round trip forward

662
00:25:11,600 --> 00:25:13,200
that over to the target

663
00:25:13,200 --> 00:25:15,600
and let you know with his response that

664
00:25:15,600 --> 00:25:17,279
extensions are

665
00:25:17,279 --> 00:25:19,360
supported on this connection or sorry on

666
00:25:19,360 --> 00:25:22,879
this uh for this request

667
00:25:23,760 --> 00:25:25,919
all right so what is the current design

668
00:25:25,919 --> 00:25:28,000
we have and that's you know as we're

669
00:25:28,000 --> 00:25:31,440
always not set in stone uh what we have

670
00:25:31,440 --> 00:25:32,640
uh today

671
00:25:32,640 --> 00:25:34,960
is uh we

672
00:25:34,960 --> 00:25:35,760
been

673
00:25:35,760 --> 00:25:38,799
vinnie go ahead sorry

674
00:25:39,520 --> 00:25:41,039
slight understand

675
00:25:41,039 --> 00:25:43,039
can you just clarify a little bit um

676
00:25:43,039 --> 00:25:44,240
absolutely

677
00:25:44,240 --> 00:25:45,840
so the proxy actually doesn't know

678
00:25:45,840 --> 00:25:48,000
anything about that extension in that

679
00:25:48,000 --> 00:25:50,720
scenario you described it just allowed

680
00:25:50,720 --> 00:25:53,600
that extension to work and end

681
00:25:53,600 --> 00:25:55,120
is that correct

682
00:25:55,120 --> 00:25:57,039
uh so

683
00:25:57,039 --> 00:25:59,039
let me clarify that's a that's a great

684
00:25:59,039 --> 00:26:00,480
question uh

685
00:26:00,480 --> 00:26:02,720
what we mean in this case by end to end

686
00:26:02,720 --> 00:26:05,360
because there are multiple ends in this

687
00:26:05,360 --> 00:26:06,960
protocol and it does make things

688
00:26:06,960 --> 00:26:09,600
confusing

689
00:26:09,600 --> 00:26:11,760
in this case an extension would be

690
00:26:11,760 --> 00:26:13,360
between the client and proxy so the

691
00:26:13,360 --> 00:26:15,120
client and proxy have to know about the

692
00:26:15,120 --> 00:26:16,880
extension so let's say for example in

693
00:26:16,880 --> 00:26:19,679
the ecn scenario

694
00:26:19,679 --> 00:26:21,919
this extension would allow when the

695
00:26:21,919 --> 00:26:25,039
proxy is reading udp packets from the

696
00:26:25,039 --> 00:26:26,159
target

697
00:26:26,159 --> 00:26:28,080
those could have ecn markings on them at

698
00:26:28,080 --> 00:26:29,760
the ip layer between the proxy and the

699
00:26:29,760 --> 00:26:30,799
target

700
00:26:30,799 --> 00:26:32,960
and this extension would allow the proxy

701
00:26:32,960 --> 00:26:34,799
to communicate those markings to the

702
00:26:34,799 --> 00:26:36,400
client as it's forwarding these

703
00:26:36,400 --> 00:26:38,480
encapsulated udp payloads

704
00:26:38,480 --> 00:26:40,480
like as it's sending a udp payload you

705
00:26:40,480 --> 00:26:43,279
could say oh this one was marked ect 0

706
00:26:43,279 --> 00:26:44,480
this one was marked congestion

707
00:26:44,480 --> 00:26:47,200
experienced so

708
00:26:47,200 --> 00:26:49,360
in the context of

709
00:26:49,360 --> 00:26:51,840
that extension the ants are the client

710
00:26:51,840 --> 00:26:53,520
in the proxy they're the ones that need

711
00:26:53,520 --> 00:26:55,520
to know about the extension but if we

712
00:26:55,520 --> 00:26:57,120
have an intermediary in the middle

713
00:26:57,120 --> 00:26:58,880
between the client and the proxy that

714
00:26:58,880 --> 00:27:01,840
doesn't need to know about the extension

715
00:27:01,840 --> 00:27:04,080
ted

716
00:27:04,880 --> 00:27:07,039
uh so a kind of a clarifying question

717
00:27:07,039 --> 00:27:08,559
here on what you do then if you're

718
00:27:08,559 --> 00:27:10,720
expecting an extension uh to pass

719
00:27:10,720 --> 00:27:12,640
through the proxy and head on toward the

720
00:27:12,640 --> 00:27:14,640
target and i'm thinking here

721
00:27:14,640 --> 00:27:18,320
about rfc 5795 style robust header

722
00:27:18,320 --> 00:27:20,799
compression for ip headers so you can

723
00:27:20,799 --> 00:27:22,640
imagine using that in two different ways

724
00:27:22,640 --> 00:27:24,080
one of which is saying hey i'm going to

725
00:27:24,080 --> 00:27:26,559
use rock and my compressing ip headers

726
00:27:26,559 --> 00:27:28,320
to you the proxy

727
00:27:28,320 --> 00:27:30,559
or to tell the proxy that you expect

728
00:27:30,559 --> 00:27:34,480
rock to go end to end to the target

729
00:27:34,480 --> 00:27:38,720
so in that second case

730
00:27:39,039 --> 00:27:40,960
i assume from this design you wouldn't

731
00:27:40,960 --> 00:27:42,720
negotiate the extension through the

732
00:27:42,720 --> 00:27:44,240
proxy

733
00:27:44,240 --> 00:27:46,880
it would then just take the the connect

734
00:27:46,880 --> 00:27:51,279
ip uh payload and treated like it

735
00:27:51,279 --> 00:27:52,720
it was an

736
00:27:52,720 --> 00:27:54,080
uncompressed

737
00:27:54,080 --> 00:27:55,520
ip

738
00:27:55,520 --> 00:27:56,799
um

739
00:27:56,799 --> 00:27:58,799
packet send it out and if it failed that

740
00:27:58,799 --> 00:28:00,480
was on on the client for not

741
00:28:00,480 --> 00:28:02,799
understanding that what it was sending

742
00:28:02,799 --> 00:28:04,720
is that approximately correct

743
00:28:04,720 --> 00:28:07,840
uh yes actually

744
00:28:08,320 --> 00:28:11,919
sorry ted some feedback um

745
00:28:11,919 --> 00:28:14,480
please use headphones or mute

746
00:28:14,480 --> 00:28:17,039
um so the

747
00:28:17,039 --> 00:28:19,120
extensions that are like transparent to

748
00:28:19,120 --> 00:28:20,559
the proxy in the sense that are client

749
00:28:20,559 --> 00:28:22,640
to target are kind of out of scope here

750
00:28:22,640 --> 00:28:23,919
because

751
00:28:23,919 --> 00:28:25,200
they're

752
00:28:25,200 --> 00:28:26,880
they'll work but the proxy doesn't even

753
00:28:26,880 --> 00:28:28,720
need to know so what i'm all the

754
00:28:28,720 --> 00:28:30,159
extensions i'm talking about are

755
00:28:30,159 --> 00:28:32,159
extensions between the client and the

756
00:28:32,159 --> 00:28:33,200
proxy

757
00:28:33,200 --> 00:28:36,240
um like for example in this case

758
00:28:36,240 --> 00:28:37,760
if they're extensions inside this

759
00:28:37,760 --> 00:28:40,640
end-to-end client to target connection

760
00:28:40,640 --> 00:28:42,640
the proxy doesn't need to know or care

761
00:28:42,640 --> 00:28:44,000
there and it can't even because they're

762
00:28:44,000 --> 00:28:45,919
encrypted inside quick

763
00:28:45,919 --> 00:28:48,159
so uh when i say extensions here uh to

764
00:28:48,159 --> 00:28:50,159
clarify i'm specifically talking about

765
00:28:50,159 --> 00:28:51,840
extensions between the client and proxy

766
00:28:51,840 --> 00:28:53,279
where both the client and the proxy know

767
00:28:53,279 --> 00:28:54,559
about them

768
00:28:54,559 --> 00:28:57,360
thanks for the question that was clear

769
00:28:57,360 --> 00:28:59,440
uh that mostly does i do think that

770
00:28:59,440 --> 00:29:02,080
there there may come some cases where

771
00:29:02,080 --> 00:29:04,000
the the proxy has to know that what's

772
00:29:04,000 --> 00:29:05,039
going on

773
00:29:05,039 --> 00:29:06,880
isn't malformed

774
00:29:06,880 --> 00:29:08,240
because obviously

775
00:29:08,240 --> 00:29:11,440
uh ip with rock headers and

776
00:29:11,440 --> 00:29:13,120
and presumption of context looks

777
00:29:13,120 --> 00:29:15,760
different from standard ip um but it

778
00:29:15,760 --> 00:29:17,360
probably doesn't need to do a lot to

779
00:29:17,360 --> 00:29:19,279
support it but i i think this is

780
00:29:19,279 --> 00:29:21,039
probably not the main

781
00:29:21,039 --> 00:29:23,120
topic so let's move on

782
00:29:23,120 --> 00:29:25,120
no thanks i think there's

783
00:29:25,120 --> 00:29:27,440
there's utility and value there but yeah

784
00:29:27,440 --> 00:29:29,200
that's not what we're trying to specify

785
00:29:29,200 --> 00:29:30,559
what i'm trying to

786
00:29:30,559 --> 00:29:32,320
specifically solve in in these set of

787
00:29:32,320 --> 00:29:33,760
slides thanks

788
00:29:33,760 --> 00:29:36,159
uh ian

789
00:29:36,159 --> 00:29:37,919
clarifying i think comment the proxy

790
00:29:37,919 --> 00:29:39,520
here is what echo referred to as a

791
00:29:39,520 --> 00:29:42,159
forward proxy and the target here

792
00:29:42,159 --> 00:29:44,880
is one or more

793
00:29:44,880 --> 00:29:46,960
reverse proxies machines application

794
00:29:46,960 --> 00:29:49,120
front ends yada yada that received the

795
00:29:49,120 --> 00:29:51,520
traffic right like just to clarify like

796
00:29:51,520 --> 00:29:52,799
like the target could be like one or

797
00:29:52,799 --> 00:29:54,080
more machines and we kind of don't care

798
00:29:54,080 --> 00:29:55,279
because it just should just all work

799
00:29:55,279 --> 00:29:57,360
because like reverse proxy providers

800
00:29:57,360 --> 00:29:59,120
need to deal with this stuff themselves

801
00:29:59,120 --> 00:30:00,960
is that accurate

802
00:30:00,960 --> 00:30:03,840
uh absolutely so in this scenario let's

803
00:30:03,840 --> 00:30:07,840
say you're using uh connect2udp as uh

804
00:30:07,840 --> 00:30:10,720
like an ip blinding service um

805
00:30:10,720 --> 00:30:12,960
it from from the client in the proxy's

806
00:30:12,960 --> 00:30:16,159
perspective the target is just an an ip

807
00:30:16,159 --> 00:30:18,000
address on the internet and a udp port

808
00:30:18,000 --> 00:30:19,279
that you're sending things to and that

809
00:30:19,279 --> 00:30:21,279
you're receiving things from

810
00:30:21,279 --> 00:30:24,399
there's worlds of complexity and servers

811
00:30:24,399 --> 00:30:26,640
and machinery behind the target but from

812
00:30:26,640 --> 00:30:28,399
our perspective we don't know we don't

813
00:30:28,399 --> 00:30:31,520
care the is this could all be running on

814
00:30:31,520 --> 00:30:33,520
a raspberry pi on a corner or it could

815
00:30:33,520 --> 00:30:36,080
be you know backed by a giant google

816
00:30:36,080 --> 00:30:37,200
data center

817
00:30:37,200 --> 00:30:39,440
completely oblivious to us we don't care

818
00:30:39,440 --> 00:30:42,240
um but the the from the client's

819
00:30:42,240 --> 00:30:44,000
perspective there could still be an

820
00:30:44,000 --> 00:30:46,480
interpreter in a proxy which

821
00:30:46,480 --> 00:30:48,000
like in general the client doesn't

822
00:30:48,000 --> 00:30:50,480
really need to care all it knows is it's

823
00:30:50,480 --> 00:30:52,320
trying to connect to a

824
00:30:52,320 --> 00:30:55,120
connect udp proxy with a given authority

825
00:30:55,120 --> 00:30:56,399
um

826
00:30:56,399 --> 00:30:58,559
what we just need to build here is make

827
00:30:58,559 --> 00:31:01,200
sure that the if the

828
00:31:01,200 --> 00:31:02,799
entity that wants to deploy the connect

829
00:31:02,799 --> 00:31:05,360
udp proxy wants to deploy that behind a

830
00:31:05,360 --> 00:31:06,640
front end in other words behind

831
00:31:06,640 --> 00:31:08,799
intermediary that needs to work in

832
00:31:08,799 --> 00:31:11,120
practice it doesn't really change the

833
00:31:11,120 --> 00:31:13,279
protocol much but it just impacts some

834
00:31:13,279 --> 00:31:14,640
design requirements like the fact that

835
00:31:14,640 --> 00:31:16,399
we can't rely on settings for everything

836
00:31:16,399 --> 00:31:19,440
for example

837
00:31:19,440 --> 00:31:22,000
all right so

838
00:31:22,240 --> 00:31:23,200
all right

839
00:31:23,200 --> 00:31:24,480
why can't we rely on settings here

840
00:31:24,480 --> 00:31:26,640
because i i think i i'm not i'm i'm

841
00:31:26,640 --> 00:31:31,240
missing why we can't rely on settings

842
00:31:32,399 --> 00:31:34,320
no no no no on the contrary this is

843
00:31:34,320 --> 00:31:35,840
really useful because these are trivial

844
00:31:35,840 --> 00:31:36,960
points thank you

845
00:31:36,960 --> 00:31:39,279
the so you're

846
00:31:39,279 --> 00:31:43,120
in a in a given http deployment uh it

847
00:31:43,120 --> 00:31:44,799
interpret areas are pretty common so

848
00:31:44,799 --> 00:31:46,880
like take our setup we have the google

849
00:31:46,880 --> 00:31:50,480
front end and then we have back ends so

850
00:31:50,480 --> 00:31:52,799
mapping to like the the terminology here

851
00:31:52,799 --> 00:31:55,519
the google front end is an intermediary

852
00:31:55,519 --> 00:31:57,279
and the google backend would be the one

853
00:31:57,279 --> 00:31:59,120
implementing connect udp and which we

854
00:31:59,120 --> 00:32:01,600
the one that we list as the proxy and

855
00:32:01,600 --> 00:32:03,440
that could be the egress to the internet

856
00:32:03,440 --> 00:32:05,360
in some scenarios

857
00:32:05,360 --> 00:32:06,320
the

858
00:32:06,320 --> 00:32:09,200
settings are hub by hop at the http

859
00:32:09,200 --> 00:32:10,320
layer

860
00:32:10,320 --> 00:32:12,799
whereas requests are end to end in that

861
00:32:12,799 --> 00:32:15,039
scenario where the end is the proxy you

862
00:32:15,039 --> 00:32:17,679
could be running something into that um

863
00:32:17,679 --> 00:32:18,399
but

864
00:32:18,399 --> 00:32:19,840
the request could flow through an

865
00:32:19,840 --> 00:32:21,279
interpret area and we have folks in the

866
00:32:21,279 --> 00:32:23,440
working group that wish to deploy that

867
00:32:23,440 --> 00:32:25,360
this way uh in particular for web

868
00:32:25,360 --> 00:32:26,880
transport

869
00:32:26,880 --> 00:32:29,200
so to walk back let me try to reset this

870
00:32:29,200 --> 00:32:31,519
in in more terms that like i am you know

871
00:32:31,519 --> 00:32:32,720
that are very focused on hardware

872
00:32:32,720 --> 00:32:35,039
infrastructure so like in this case like

873
00:32:35,039 --> 00:32:37,279
google is running like a target which is

874
00:32:37,279 --> 00:32:38,000
like

875
00:32:38,000 --> 00:32:38,799
you know

876
00:32:38,799 --> 00:32:40,080
probably at least two and sometimes

877
00:32:40,080 --> 00:32:42,320
three layers of load balancers uh stuck

878
00:32:42,320 --> 00:32:45,279
in in front of like an application front

879
00:32:45,279 --> 00:32:46,159
and

880
00:32:46,159 --> 00:32:47,840
you're saying that the first load

881
00:32:47,840 --> 00:32:49,120
balancer needs to make sure to

882
00:32:49,120 --> 00:32:51,039
communicate the right settings for all

883
00:32:51,039 --> 00:32:52,720
the things behind it because otherwise

884
00:32:52,720 --> 00:32:55,279
like bad things could happen right

885
00:32:55,279 --> 00:32:56,880
is that yeah so

886
00:32:56,880 --> 00:32:58,720
well yeah so so let's say i think the

887
00:32:58,720 --> 00:33:00,640
web transport example is perhaps a

888
00:33:00,640 --> 00:33:03,279
better one where you have a front end

889
00:33:03,279 --> 00:33:05,600
which is also a load balancer

890
00:33:05,600 --> 00:33:08,720
and you know you talk through that to a

891
00:33:08,720 --> 00:33:10,320
myriad of back ends as a client you

892
00:33:10,320 --> 00:33:11,919
don't even know that there are you know

893
00:33:11,919 --> 00:33:13,440
front-ends and back-ends you just know

894
00:33:13,440 --> 00:33:14,480
that you

895
00:33:14,480 --> 00:33:16,240
like the front-end sir and the or in

896
00:33:16,240 --> 00:33:17,840
other words the interpreter

897
00:33:17,840 --> 00:33:20,080
served you with the appropriate

898
00:33:20,080 --> 00:33:22,080
approved for the tls certificate

899
00:33:22,080 --> 00:33:23,840
and when you send your requests you

900
00:33:23,840 --> 00:33:25,440
gotta reply maybe you went through that

901
00:33:25,440 --> 00:33:26,960
to a different machine

902
00:33:26,960 --> 00:33:29,200
but potentially let's say some of the

903
00:33:29,200 --> 00:33:30,240
fleet

904
00:33:30,240 --> 00:33:32,799
uh supports the this web transport with

905
00:33:32,799 --> 00:33:34,320
extension some of it supports web

906
00:33:34,320 --> 00:33:36,240
transport without extensions

907
00:33:36,240 --> 00:33:40,159
um and the front end doesn't know all of

908
00:33:40,159 --> 00:33:42,000
these so like supported protocols

909
00:33:42,000 --> 00:33:43,919
features extensions of all of its back

910
00:33:43,919 --> 00:33:45,360
ends necessarily

911
00:33:45,360 --> 00:33:48,000
uh and so it can't synthesize a setting

912
00:33:48,000 --> 00:33:50,159
frame for you that covers everyone in

913
00:33:50,159 --> 00:33:51,039
the back

914
00:33:51,039 --> 00:33:52,720
uh you need to go and send the request

915
00:33:52,720 --> 00:33:54,480
and get a response to know fully what

916
00:33:54,480 --> 00:33:56,960
they support

917
00:33:56,960 --> 00:33:59,519
but just to like kind of really like

918
00:33:59,519 --> 00:34:00,720
slice this down to like the very

919
00:34:00,720 --> 00:34:02,399
specific points so the

920
00:34:02,399 --> 00:34:05,039
so the the server the the

921
00:34:05,039 --> 00:34:06,880
um the load balancer

922
00:34:06,880 --> 00:34:09,359
needs to know whether say connect ip

923
00:34:09,359 --> 00:34:11,760
connect udp connect

924
00:34:11,760 --> 00:34:14,800
or web transport is supported because

925
00:34:14,800 --> 00:34:16,800
the way you load balance those protocols

926
00:34:16,800 --> 00:34:18,239
is just like transformatively different

927
00:34:18,239 --> 00:34:20,719
from standard http so like you're just

928
00:34:20,719 --> 00:34:22,159
not getting away without like having

929
00:34:22,159 --> 00:34:24,560
that knowledge of the the terminating

930
00:34:24,560 --> 00:34:27,119
um load balancer but

931
00:34:27,119 --> 00:34:30,320
still so i think so to clarify that um

932
00:34:30,320 --> 00:34:32,239
you need to and that's that's

933
00:34:32,239 --> 00:34:33,359
specifically

934
00:34:33,359 --> 00:34:34,960
what we're picking at so let me just

935
00:34:34,960 --> 00:34:36,560
clarify on what you're saying

936
00:34:36,560 --> 00:34:39,040
the intermediary needs to know how to

937
00:34:39,040 --> 00:34:41,760
proxy http datagrams and especially for

938
00:34:41,760 --> 00:34:43,760
web transfer where transport has other

939
00:34:43,760 --> 00:34:45,440
custom things that need to be proxied

940
00:34:45,440 --> 00:34:47,040
such as like custom unidirectional

941
00:34:47,040 --> 00:34:49,199
streams for example so the interpreter

942
00:34:49,199 --> 00:34:51,199
needs to be aware of this

943
00:34:51,199 --> 00:34:54,639
but if we for example want to add in the

944
00:34:54,639 --> 00:34:56,480
future an extension

945
00:34:56,480 --> 00:34:58,400
the the goal there is that this front

946
00:34:58,400 --> 00:35:00,720
end that was modified once to speak web

947
00:35:00,720 --> 00:35:03,040
transport doesn't need to be modified

948
00:35:03,040 --> 00:35:04,720
every time we want to deploy a web

949
00:35:04,720 --> 00:35:06,400
transport extension

950
00:35:06,400 --> 00:35:07,440
um

951
00:35:07,440 --> 00:35:08,400
that is the

952
00:35:08,400 --> 00:35:09,760
kind of distinction

953
00:35:09,760 --> 00:35:11,520
okay that makes sense to me i i think i

954
00:35:11,520 --> 00:35:12,880
i think we should just move on because i

955
00:35:12,880 --> 00:35:14,320
think we've kind of gotten it down to

956
00:35:14,320 --> 00:35:15,359
the point where i just wanted to get it

957
00:35:15,359 --> 00:35:16,560
to which is

958
00:35:16,560 --> 00:35:17,280
the

959
00:35:17,280 --> 00:35:18,640
yeah the load balancer does actually

960
00:35:18,640 --> 00:35:20,079
need to know like whether web transport

961
00:35:20,079 --> 00:35:22,000
for example is supported but it's it's

962
00:35:22,000 --> 00:35:23,599
valid to say once web transport is

963
00:35:23,599 --> 00:35:25,359
supported that maybe there's some other

964
00:35:25,359 --> 00:35:29,280
stuff you want to like um tunnel to the

965
00:35:29,280 --> 00:35:30,640
to the actual application front end that

966
00:35:30,640 --> 00:35:31,920
you don't want to make every single hop

967
00:35:31,920 --> 00:35:33,760
in the middle be aware of um so why

968
00:35:33,760 --> 00:35:34,960
don't we move forward through what the

969
00:35:34,960 --> 00:35:36,720
extensions are and then maybe that'll

970
00:35:36,720 --> 00:35:38,960
clarify everything for me thanks cool

971
00:35:38,960 --> 00:35:40,960
well dude thanks no no that was that was

972
00:35:40,960 --> 00:35:42,560
a great point um

973
00:35:42,560 --> 00:35:43,760
and that was what i was trying to get

974
00:35:43,760 --> 00:35:45,200
across but yeah taking the time to

975
00:35:45,200 --> 00:35:46,560
actually state it clearly really

976
00:35:46,560 --> 00:35:48,560
important so thanks for your help

977
00:35:48,560 --> 00:35:49,680
um

978
00:35:49,680 --> 00:35:51,839
so yeah the the current design

979
00:35:51,839 --> 00:35:54,079
how do we do this um

980
00:35:54,079 --> 00:35:56,800
it introduces the concept of datagram

981
00:35:56,800 --> 00:35:58,400
format types

982
00:35:58,400 --> 00:36:01,040
which is a okay this is the semantics of

983
00:36:01,040 --> 00:36:02,560
my payload so

984
00:36:02,560 --> 00:36:04,160
for example in our current drafts

985
00:36:04,160 --> 00:36:06,640
connect udp registers the

986
00:36:06,640 --> 00:36:09,760
udp payload datagram format type

987
00:36:09,760 --> 00:36:13,040
and the client starts off by recall

988
00:36:13,040 --> 00:36:14,960
sorry by sending a registered datagram

989
00:36:14,960 --> 00:36:16,560
capsule that says hey

990
00:36:16,560 --> 00:36:18,960
i'm going to be sending udp payloads on

991
00:36:18,960 --> 00:36:22,000
here um

992
00:36:22,079 --> 00:36:23,760
good like those are the ones that you

993
00:36:23,760 --> 00:36:25,760
need to when you get the payload you

994
00:36:25,760 --> 00:36:27,280
then put that

995
00:36:27,280 --> 00:36:29,040
you write that into your udp socket to

996
00:36:29,040 --> 00:36:30,160
the target

997
00:36:30,160 --> 00:36:32,000
um and

998
00:36:32,000 --> 00:36:33,160
additionally we have this

999
00:36:33,160 --> 00:36:35,040
de-multiplexing mechanism which is

1000
00:36:35,040 --> 00:36:36,320
inside this

1001
00:36:36,320 --> 00:36:38,560
uh box on

1002
00:36:38,560 --> 00:36:40,880
and so you you negotiate using the

1003
00:36:40,880 --> 00:36:44,320
secu's datagram context's http header

1004
00:36:44,320 --> 00:36:46,560
and the draft introduces the concept of

1005
00:36:46,560 --> 00:36:49,520
a context um and the idea is when this

1006
00:36:49,520 --> 00:36:50,720
is in use

1007
00:36:50,720 --> 00:36:53,440
every datagram starts with a warrant

1008
00:36:53,440 --> 00:36:56,240
that is a context so for example you

1009
00:36:56,240 --> 00:36:58,320
could say okay i want to register the

1010
00:36:58,320 --> 00:37:00,560
udp payload context and i want to

1011
00:37:00,560 --> 00:37:03,680
register a udp payload with two bits of

1012
00:37:03,680 --> 00:37:06,720
ecn at the start context for the ecn

1013
00:37:06,720 --> 00:37:08,480
extension

1014
00:37:08,480 --> 00:37:10,560
or you could register the

1015
00:37:10,560 --> 00:37:12,960
icmp context extension so then when the

1016
00:37:12,960 --> 00:37:16,320
other side receives um a an http

1017
00:37:16,320 --> 00:37:18,079
datagram it knows

1018
00:37:18,079 --> 00:37:20,320
it'll read this warrant off the head and

1019
00:37:20,320 --> 00:37:22,320
then say oh this is just a udp pillow

1020
00:37:22,320 --> 00:37:25,200
let me put this into my udp stack or

1021
00:37:25,200 --> 00:37:27,119
this one oh i need to parse these first

1022
00:37:27,119 --> 00:37:29,280
two bits for ecn or this one's kind of a

1023
00:37:29,280 --> 00:37:32,160
separate sidecar of icmp or something

1024
00:37:32,160 --> 00:37:34,800
and it knows how it can parse and what

1025
00:37:34,800 --> 00:37:36,560
actions it needs to take

1026
00:37:36,560 --> 00:37:38,320
based on this demultiplexing identifier

1027
00:37:38,320 --> 00:37:39,760
at the start

1028
00:37:39,760 --> 00:37:40,720
um

1029
00:37:40,720 --> 00:37:41,920
and

1030
00:37:41,920 --> 00:37:44,160
mt mentioned on the list that

1031
00:37:44,160 --> 00:37:46,560
this is he he says that this is overly

1032
00:37:46,560 --> 00:37:48,400
complicated i don't disagree and

1033
00:37:48,400 --> 00:37:49,920
actually we had a good conversation with

1034
00:37:49,920 --> 00:37:52,400
him and others uh last week

1035
00:37:52,400 --> 00:37:53,520
and

1036
00:37:53,520 --> 00:37:55,839
the fundamental

1037
00:37:55,839 --> 00:37:56,880
um

1038
00:37:56,880 --> 00:37:59,920
thought that mta got across you which i

1039
00:37:59,920 --> 00:38:02,079
i think is very very reasonable is like

1040
00:38:02,079 --> 00:38:03,760
concepts aren't free when you meant a

1041
00:38:03,760 --> 00:38:05,920
new concept you have to keep it in mind

1042
00:38:05,920 --> 00:38:07,440
forever and if you ever got anything

1043
00:38:07,440 --> 00:38:09,200
wrong in the definition of that concept

1044
00:38:09,200 --> 00:38:11,520
you're gonna like pay it for for many

1045
00:38:11,520 --> 00:38:14,640
years um so if we can get something even

1046
00:38:14,640 --> 00:38:16,160
simpler

1047
00:38:16,160 --> 00:38:18,480
that's better so so we have an issue to

1048
00:38:18,480 --> 00:38:19,599
track that

1049
00:38:19,599 --> 00:38:21,119
um

1050
00:38:21,119 --> 00:38:23,119
and we we kind of came up with a new

1051
00:38:23,119 --> 00:38:25,359
design that i just wanted to run people

1052
00:38:25,359 --> 00:38:27,680
with and then as soon as

1053
00:38:27,680 --> 00:38:29,440
i'm done running through that i'll have

1054
00:38:29,440 --> 00:38:31,200
a slide and then we can like jump into a

1055
00:38:31,200 --> 00:38:33,599
full discussion

1056
00:38:33,599 --> 00:38:36,320
sorry so the

1057
00:38:36,320 --> 00:38:38,640
idea there is um

1058
00:38:38,640 --> 00:38:40,320
i initially thought that like the

1059
00:38:40,320 --> 00:38:42,960
datagram format type was our best

1060
00:38:42,960 --> 00:38:45,440
extensibility joint or foothold if you

1061
00:38:45,440 --> 00:38:48,560
will to enable all this extensibility

1062
00:38:48,560 --> 00:38:50,160
but it turns out after some more

1063
00:38:50,160 --> 00:38:52,960
thinking and discussion um it's possible

1064
00:38:52,960 --> 00:38:54,880
to get the extensibility we need without

1065
00:38:54,880 --> 00:38:57,359
introducing this concept and

1066
00:38:57,359 --> 00:38:59,680
um i think that that's a nice property

1067
00:38:59,680 --> 00:39:02,160
we want to have an extensibility joint

1068
00:39:02,160 --> 00:39:04,960
um but we kind of already have one in

1069
00:39:04,960 --> 00:39:07,520
the protocol it's capsule types so as a

1070
00:39:07,520 --> 00:39:10,320
reminder capsule is this client to proxy

1071
00:39:10,320 --> 00:39:12,079
protocol

1072
00:39:12,079 --> 00:39:14,720
where you just send a sequence of tlvs

1073
00:39:14,720 --> 00:39:17,200
and the t there this type is something

1074
00:39:17,200 --> 00:39:18,320
where you can mint new one they're

1075
00:39:18,320 --> 00:39:20,000
registered with viana

1076
00:39:20,000 --> 00:39:21,760
and that's a really good extensibility

1077
00:39:21,760 --> 00:39:23,920
joint because uh proxies and clients

1078
00:39:23,920 --> 00:39:26,240
will drop any capsule that it doesn't

1079
00:39:26,240 --> 00:39:27,280
understand

1080
00:39:27,280 --> 00:39:30,000
so a new extension protocol anything can

1081
00:39:30,000 --> 00:39:32,960
define its own capsule um

1082
00:39:32,960 --> 00:39:34,320
and

1083
00:39:34,320 --> 00:39:37,359
so this this pro 115 the idea is we

1084
00:39:37,359 --> 00:39:39,839
remove those registration capsules uh

1085
00:39:39,839 --> 00:39:41,440
because we don't need them in the core

1086
00:39:41,440 --> 00:39:43,920
spec we remove datagram format types

1087
00:39:43,920 --> 00:39:46,640
then we we add some text to say okay if

1088
00:39:46,640 --> 00:39:48,400
you're an extension

1089
00:39:48,400 --> 00:39:50,079
you'll be able to use these capsule

1090
00:39:50,079 --> 00:39:53,520
types as your extensibility mechanism um

1091
00:39:53,520 --> 00:39:56,160
and so what what the with this potential

1092
00:39:56,160 --> 00:39:59,119
design what you say is you send a header

1093
00:39:59,119 --> 00:40:01,440
uh as part of your request

1094
00:40:01,440 --> 00:40:02,160
to

1095
00:40:02,160 --> 00:40:04,000
when you're the client and you wanted

1096
00:40:04,000 --> 00:40:06,160
this demultiplexing functionality you

1097
00:40:06,160 --> 00:40:08,000
send that header

1098
00:40:08,000 --> 00:40:09,359
and

1099
00:40:09,359 --> 00:40:10,560
if the

1100
00:40:10,560 --> 00:40:11,839
proxy

1101
00:40:11,839 --> 00:40:13,440
replies with that header as well it

1102
00:40:13,440 --> 00:40:14,880
means okay we both

1103
00:40:14,880 --> 00:40:17,119
have like support at least one of these

1104
00:40:17,119 --> 00:40:18,720
extensions we think there's value here

1105
00:40:18,720 --> 00:40:21,440
we want this demultiplexing so when

1106
00:40:21,440 --> 00:40:24,240
we've negotiated that now every single

1107
00:40:24,240 --> 00:40:26,079
http datagram starts with this the

1108
00:40:26,079 --> 00:40:28,000
multiplexing variant

1109
00:40:28,000 --> 00:40:30,640
which we call the context id

1110
00:40:30,640 --> 00:40:32,640
the idea there is that context id maps

1111
00:40:32,640 --> 00:40:34,880
to a context for example let's say if

1112
00:40:34,880 --> 00:40:36,400
you're doing a p compression and you're

1113
00:40:36,400 --> 00:40:38,640
like removing the ip addresses

1114
00:40:38,640 --> 00:40:40,560
this context would be a struct somewhere

1115
00:40:40,560 --> 00:40:42,079
in your memory that contains the ip

1116
00:40:42,079 --> 00:40:44,000
addresses that have been removed so when

1117
00:40:44,000 --> 00:40:45,599
you parse the incoming datagram you

1118
00:40:45,599 --> 00:40:47,119
could put them back in before you feed

1119
00:40:47,119 --> 00:40:49,040
it into your ip stack

1120
00:40:49,040 --> 00:40:52,000
um and the because we know this we

1121
00:40:52,000 --> 00:40:53,599
wanted this idea of zero latency

1122
00:40:53,599 --> 00:40:55,119
extensibility

1123
00:40:55,119 --> 00:40:57,920
we add the concept of

1124
00:40:57,920 --> 00:41:00,480
data we add multiple capsules for

1125
00:41:00,480 --> 00:41:01,839
datagram

1126
00:41:01,839 --> 00:41:05,119
for to to convey the ones that

1127
00:41:05,119 --> 00:41:07,839
explicitly have or do not have context

1128
00:41:07,839 --> 00:41:09,760
so the idea there is

1129
00:41:09,760 --> 00:41:12,319
while you're negotiating the headers so

1130
00:41:12,319 --> 00:41:13,760
as a client before you've received the

1131
00:41:13,760 --> 00:41:14,800
headers

1132
00:41:14,800 --> 00:41:17,280
you can't send the like regular quick

1133
00:41:17,280 --> 00:41:19,920
datagram http datagram because there

1134
00:41:19,920 --> 00:41:21,599
could be some confusion about whether

1135
00:41:21,599 --> 00:41:23,760
that warrant is present or not

1136
00:41:23,760 --> 00:41:25,599
so until you know for sure and have

1137
00:41:25,599 --> 00:41:27,119
gotten the sort of response you use

1138
00:41:27,119 --> 00:41:29,119
these separate capsules that are

1139
00:41:29,119 --> 00:41:31,119
crystal clear they're self-describing in

1140
00:41:31,119 --> 00:41:32,319
other words

1141
00:41:32,319 --> 00:41:34,160
and once you've known the response then

1142
00:41:34,160 --> 00:41:35,599
you know you both agree on what the

1143
00:41:35,599 --> 00:41:38,319
format is you can send this or not

1144
00:41:38,319 --> 00:41:40,160
um

1145
00:41:40,160 --> 00:41:42,640
yes ian

1146
00:41:42,640 --> 00:41:44,000
the shape of what you're describing

1147
00:41:44,000 --> 00:41:46,319
sounds good one kind of wording

1148
00:41:46,319 --> 00:41:48,480
suggestion or comment is we're using the

1149
00:41:48,480 --> 00:41:50,800
word demultiplexing here

1150
00:41:50,800 --> 00:41:52,880
at any point do you actually mean like

1151
00:41:52,880 --> 00:41:54,960
an intermediary or a proxy or something

1152
00:41:54,960 --> 00:41:57,680
like that taking a single stream

1153
00:41:57,680 --> 00:41:59,599
and then sending it to two entirely

1154
00:41:59,599 --> 00:42:01,040
different locations or are you really

1155
00:42:01,040 --> 00:42:02,640
talking about like

1156
00:42:02,640 --> 00:42:04,880
um i might even call it like format

1157
00:42:04,880 --> 00:42:06,800
conversion or compression or something

1158
00:42:06,800 --> 00:42:08,800
like that where basically

1159
00:42:08,800 --> 00:42:10,240
you've developed like a better

1160
00:42:10,240 --> 00:42:13,119
formatting for whether it's like ecn or

1161
00:42:13,119 --> 00:42:15,839
ip compression or whatever and the thing

1162
00:42:15,839 --> 00:42:18,160
that terminates the proxy is responsible

1163
00:42:18,160 --> 00:42:20,960
which is in some sense and hop um is

1164
00:42:20,960 --> 00:42:22,640
responsible for saying like okay i

1165
00:42:22,640 --> 00:42:24,240
understand this format

1166
00:42:24,240 --> 00:42:26,400
and i know how to convert it to like you

1167
00:42:26,400 --> 00:42:28,800
know edp or ip or whatever i need to pop

1168
00:42:28,800 --> 00:42:30,960
out the other end and so it's it's kind

1169
00:42:30,960 --> 00:42:31,599
of

1170
00:42:31,599 --> 00:42:32,800
it's a format conversion it's a

1171
00:42:32,800 --> 00:42:34,640
compression i don't know like some other

1172
00:42:34,640 --> 00:42:36,560
so or is it actually multiplexing like a

1173
00:42:36,560 --> 00:42:38,240
load balancer differently

1174
00:42:38,240 --> 00:42:40,880
so so no that's a great question i i'm

1175
00:42:40,880 --> 00:42:42,740
using demultiplexing to say

1176
00:42:42,740 --> 00:42:43,920
[Music]

1177
00:42:43,920 --> 00:42:45,599
separating between

1178
00:42:45,599 --> 00:42:48,960
multiple things inside an incoming flow

1179
00:42:48,960 --> 00:42:51,760
of things so that's horribly unclear

1180
00:42:51,760 --> 00:42:53,839
what i mean by that is it's the goal

1181
00:42:53,839 --> 00:42:55,599
isn't to say like let's say you're a

1182
00:42:55,599 --> 00:42:58,480
connectudp proxy it's not to say

1183
00:42:58,480 --> 00:43:00,960
these uh these packets go here these

1184
00:43:00,960 --> 00:43:03,040
packets go there it's

1185
00:43:03,040 --> 00:43:04,800
let's say your connect ip it's this

1186
00:43:04,800 --> 00:43:06,720
packet came here

1187
00:43:06,720 --> 00:43:09,520
that is an uncompressed ip packet let me

1188
00:43:09,520 --> 00:43:11,359
just put it directly into my kernel ip

1189
00:43:11,359 --> 00:43:15,839
stack this one is a compressed ip packet

1190
00:43:15,839 --> 00:43:18,079
let me first decompress it and then put

1191
00:43:18,079 --> 00:43:19,680
it into the stack so you're

1192
00:43:19,680 --> 00:43:23,200
demultiplexing into your application

1193
00:43:23,200 --> 00:43:25,520
parsing logic not too necessarily a

1194
00:43:25,520 --> 00:43:27,040
different target

1195
00:43:27,040 --> 00:43:28,560
i think what you're talking about david

1196
00:43:28,560 --> 00:43:30,240
this is not demultiplexing in the sense

1197
00:43:30,240 --> 00:43:31,359
of going to a different piece of

1198
00:43:31,359 --> 00:43:33,440
hardware it's demultiplexing in the

1199
00:43:33,440 --> 00:43:35,040
sense of going to the piece of software

1200
00:43:35,040 --> 00:43:37,280
that knows what to do next with it

1201
00:43:37,280 --> 00:43:39,520
yeah

1202
00:43:39,680 --> 00:43:41,599
um exactly i i just wanted to kind of

1203
00:43:41,599 --> 00:43:42,880
make sure that everyone was on the same

1204
00:43:42,880 --> 00:43:44,880
page about that sorry another clarifying

1205
00:43:44,880 --> 00:43:46,960
question please no no yeah those are

1206
00:43:46,960 --> 00:43:48,800
extremely helpful thank you

1207
00:43:48,800 --> 00:43:50,480
um

1208
00:43:50,480 --> 00:43:52,079
cool and so

1209
00:43:52,079 --> 00:43:54,480
what does this means in in terms of the

1210
00:43:54,480 --> 00:43:55,839
like design requirements that we're

1211
00:43:55,839 --> 00:43:58,560
talking about earlier um

1212
00:43:58,560 --> 00:44:01,520
the so it's clear that this has

1213
00:44:01,520 --> 00:44:04,160
this has this multiplexing

1214
00:44:04,160 --> 00:44:06,000
for the definition we just talked about

1215
00:44:06,000 --> 00:44:08,960
it supports this well it's clear that

1216
00:44:08,960 --> 00:44:10,960
intermediaries are not involved as part

1217
00:44:10,960 --> 00:44:13,359
of this at all so

1218
00:44:13,359 --> 00:44:15,200
we are you'd be able to deploy this

1219
00:44:15,200 --> 00:44:16,560
later without having to modify the

1220
00:44:16,560 --> 00:44:19,200
intermediary which is really cool

1221
00:44:19,200 --> 00:44:20,160
um

1222
00:44:20,160 --> 00:44:21,680
it allows you because it's done at the

1223
00:44:21,680 --> 00:44:24,240
http datagram layer to

1224
00:44:24,240 --> 00:44:26,400
have extensions such as benz mtu

1225
00:44:26,400 --> 00:44:28,640
discovery extension that you can write

1226
00:44:28,640 --> 00:44:30,160
once and then use for web transform

1227
00:44:30,160 --> 00:44:32,160
connect udp and connect ip

1228
00:44:32,160 --> 00:44:34,880
uh it has this view latency property

1229
00:44:34,880 --> 00:44:37,520
thanks to that separate capsule but i

1230
00:44:37,520 --> 00:44:38,560
want to insist a little bit on the

1231
00:44:38,560 --> 00:44:40,400
optionality because that's been the

1232
00:44:40,400 --> 00:44:42,560
sticking point for folks who

1233
00:44:42,560 --> 00:44:44,240
don't want this concept to who don't

1234
00:44:44,240 --> 00:44:46,400
want to implement it

1235
00:44:46,400 --> 00:44:47,760
so i did i went through the mental

1236
00:44:47,760 --> 00:44:49,359
exercise of

1237
00:44:49,359 --> 00:44:50,800
if we took all this like the

1238
00:44:50,800 --> 00:44:53,119
multiplexing context all this body of

1239
00:44:53,119 --> 00:44:55,280
work and said and ripped it out of the

1240
00:44:55,280 --> 00:44:58,079
http datagramsdraft and created like an

1241
00:44:58,079 --> 00:45:00,160
http datagramscontext

1242
00:45:00,160 --> 00:45:01,920
extension draft

1243
00:45:01,920 --> 00:45:03,599
what would be the foothold that we need

1244
00:45:03,599 --> 00:45:05,040
to make sure the

1245
00:45:05,040 --> 00:45:06,079
we can

1246
00:45:06,079 --> 00:45:07,839
like ship that later

1247
00:45:07,839 --> 00:45:10,880
and the only thing we need is those

1248
00:45:10,880 --> 00:45:12,720
capsules

1249
00:45:12,720 --> 00:45:14,960
that allow you to send

1250
00:45:14,960 --> 00:45:16,560
things before you know what the server

1251
00:45:16,560 --> 00:45:17,760
supports

1252
00:45:17,760 --> 00:45:19,760
and so right now instead of having just

1253
00:45:19,760 --> 00:45:21,440
a datagram capsule

1254
00:45:21,440 --> 00:45:23,599
uh in the draft you would need so you

1255
00:45:23,599 --> 00:45:25,200
would move the datagram with context

1256
00:45:25,200 --> 00:45:26,720
capsule to that extension draft but

1257
00:45:26,720 --> 00:45:28,319
you're still left with two in the base

1258
00:45:28,319 --> 00:45:31,040
draft there's the datagram one which

1259
00:45:31,040 --> 00:45:33,760
might or might not have the context

1260
00:45:33,760 --> 00:45:37,200
and the datagram without context one so

1261
00:45:37,200 --> 00:45:39,599
conceptually you know maybe we

1262
00:45:39,599 --> 00:45:41,119
if we split it out of the draft and we

1263
00:45:41,119 --> 00:45:42,319
didn't want to have the word context

1264
00:45:42,319 --> 00:45:43,760
anywhere in this draft we'd call it

1265
00:45:43,760 --> 00:45:45,520
unextended datagram

1266
00:45:45,520 --> 00:45:46,800
and we would just require

1267
00:45:46,800 --> 00:45:48,720
implementations of http datagrams that

1268
00:45:48,720 --> 00:45:50,880
are not extended to

1269
00:45:50,880 --> 00:45:52,720
parse both of these capsules in the

1270
00:45:52,720 --> 00:45:55,520
exact same way whatever you do you get

1271
00:45:55,520 --> 00:45:57,119
one or the other you just take the

1272
00:45:57,119 --> 00:46:00,640
payload and you parse it as a payload um

1273
00:46:00,640 --> 00:46:03,119
that's the only kind of foothold we need

1274
00:46:03,119 --> 00:46:05,200
and an extension can kind of slightly

1275
00:46:05,200 --> 00:46:06,880
tweak these semantics and say well the

1276
00:46:06,880 --> 00:46:09,280
datagram capsule might have the context

1277
00:46:09,280 --> 00:46:11,920
id if it's negotiated but the unextended

1278
00:46:11,920 --> 00:46:13,760
datagram capsule never has it and

1279
00:46:13,760 --> 00:46:16,079
that'll that's the little

1280
00:46:16,079 --> 00:46:17,680
the kind of the hack that allows you to

1281
00:46:17,680 --> 00:46:19,119
send things

1282
00:46:19,119 --> 00:46:20,400
during

1283
00:46:20,400 --> 00:46:22,640
like the um before you've gotten the

1284
00:46:22,640 --> 00:46:24,720
responses so

1285
00:46:24,720 --> 00:46:26,880
my general idea is

1286
00:46:26,880 --> 00:46:28,880
we've managed to pare this down to kind

1287
00:46:28,880 --> 00:46:31,599
of the simplest thing possible the only

1288
00:46:31,599 --> 00:46:33,680
extensibility joint that we require that

1289
00:46:33,680 --> 00:46:35,680
is a burden for implementation that

1290
00:46:35,680 --> 00:46:36,720
don't care

1291
00:46:36,720 --> 00:46:38,720
is that they need to understand two

1292
00:46:38,720 --> 00:46:40,560
capsule types instead of one and put the

1293
00:46:40,560 --> 00:46:42,319
exact same machinery so you would put

1294
00:46:42,319 --> 00:46:44,319
you know two switch statements back to

1295
00:46:44,319 --> 00:46:48,000
back uh when you're parsing um

1296
00:46:48,000 --> 00:46:50,560
and i think yes that is

1297
00:46:50,560 --> 00:46:53,599
the end of my long ramble about uh all

1298
00:46:53,599 --> 00:46:55,359
these things

1299
00:46:55,359 --> 00:46:57,839
now uh let's bring everyone in for

1300
00:46:57,839 --> 00:47:00,400
discussion um in particular

1301
00:47:00,400 --> 00:47:01,839
are there requirements that we've

1302
00:47:01,839 --> 00:47:04,160
discussed here or that we haven't

1303
00:47:04,160 --> 00:47:05,680
discussed that you care about and that

1304
00:47:05,680 --> 00:47:06,720
you want

1305
00:47:06,720 --> 00:47:08,960
or are there properties of this system

1306
00:47:08,960 --> 00:47:11,280
that don't work for you for some reason

1307
00:47:11,280 --> 00:47:14,000
or do you have any other random thoughts

1308
00:47:14,000 --> 00:47:16,560
comments questions uh and i think like

1309
00:47:16,560 --> 00:47:19,119
we have some agenda time i haven't been

1310
00:47:19,119 --> 00:47:20,640
keeping too much track carrick you can

1311
00:47:20,640 --> 00:47:22,800
tell me how much more we have but we

1312
00:47:22,800 --> 00:47:24,400
have some time allocated for discussion

1313
00:47:24,400 --> 00:47:25,359
here

1314
00:47:25,359 --> 00:47:27,280
please come on up to the mic line

1315
00:47:27,280 --> 00:47:28,800
go ahead eric

1316
00:47:28,800 --> 00:47:30,400
so i think we're going to try to time

1317
00:47:30,400 --> 00:47:33,119
box this to about 15 minutes

1318
00:47:33,119 --> 00:47:33,920
and

1319
00:47:33,920 --> 00:47:35,440
when we get to the end of that we'll see

1320
00:47:35,440 --> 00:47:37,119
where we are if we've completely face

1321
00:47:37,119 --> 00:47:39,599
planted we'll go from there and if we

1322
00:47:39,599 --> 00:47:41,359
haven't then that's wonderful so let's

1323
00:47:41,359 --> 00:47:43,119
try and keep comments as short as

1324
00:47:43,119 --> 00:47:44,480
possible to let everybody get some time

1325
00:47:44,480 --> 00:47:47,480
in

1326
00:47:52,240 --> 00:47:55,040
vinnie go ahead

1327
00:47:57,359 --> 00:47:59,599
uh you know ideally the the less complex

1328
00:47:59,599 --> 00:48:01,280
this is the better so i like the idea

1329
00:48:01,280 --> 00:48:03,119
that you've kind of constrained some of

1330
00:48:03,119 --> 00:48:05,760
these things um

1331
00:48:05,760 --> 00:48:07,920
i assume just standard all the proxy

1332
00:48:07,920 --> 00:48:09,920
authentication methods will work with

1333
00:48:09,920 --> 00:48:13,119
with mask is that a correct assumption

1334
00:48:13,119 --> 00:48:14,960
uh absolutely so

1335
00:48:14,960 --> 00:48:17,520
mask uh in particular in this case uh

1336
00:48:17,520 --> 00:48:19,680
connect udp but all there are things

1337
00:48:19,680 --> 00:48:22,079
we're discussing are traditional http

1338
00:48:22,079 --> 00:48:24,079
requests and responses

1339
00:48:24,079 --> 00:48:26,480
uh like so connect udp now we're using

1340
00:48:26,480 --> 00:48:28,400
extend connect we'll talk about that in

1341
00:48:28,400 --> 00:48:30,000
a minute but

1342
00:48:30,000 --> 00:48:32,240
you can send any http header alongside

1343
00:48:32,240 --> 00:48:34,480
it including the pre-existing

1344
00:48:34,480 --> 00:48:36,880
authentication headers so absolutely

1345
00:48:36,880 --> 00:48:39,920
that just works that way

1346
00:48:40,000 --> 00:48:43,000
empty

1347
00:48:48,079 --> 00:48:50,160
not all right um

1348
00:48:50,160 --> 00:48:52,559
i can't even see myself

1349
00:48:52,559 --> 00:48:54,480
i can hear and see you though

1350
00:48:54,480 --> 00:48:56,640
it seems it's uh dark where you are as

1351
00:48:56,640 --> 00:48:58,400
well

1352
00:48:58,400 --> 00:49:02,480
very dark mode as alan said so um

1353
00:49:02,480 --> 00:49:04,400
this discussion

1354
00:49:04,400 --> 00:49:05,599
do you mind going back to the last slide

1355
00:49:05,599 --> 00:49:08,240
where we talk about the requirements

1356
00:49:08,240 --> 00:49:11,920
uh this one or the one that has just

1357
00:49:11,920 --> 00:49:13,920
this just has a summary right you've got

1358
00:49:13,920 --> 00:49:17,280
a couple of points here um

1359
00:49:17,280 --> 00:49:19,280
and there's there's a lot here that's

1360
00:49:19,280 --> 00:49:20,480
bound up with the design of the

1361
00:49:20,480 --> 00:49:21,920
different protocols that i can be using

1362
00:49:21,920 --> 00:49:24,559
the h3 datagram stuff

1363
00:49:24,559 --> 00:49:26,160
uh

1364
00:49:26,160 --> 00:49:27,359
and i've been

1365
00:49:27,359 --> 00:49:28,720
sort of

1366
00:49:28,720 --> 00:49:30,640
convinced back and forth throughout your

1367
00:49:30,640 --> 00:49:32,000
discussion of all of these things about

1368
00:49:32,000 --> 00:49:33,119
the

1369
00:49:33,119 --> 00:49:34,640
the virtues of some of these other

1370
00:49:34,640 --> 00:49:36,240
things but ultimately

1371
00:49:36,240 --> 00:49:39,119
uh what i think we want here

1372
00:49:39,119 --> 00:49:40,559
is the ability

1373
00:49:40,559 --> 00:49:42,800
to send a stream of data to the other

1374
00:49:42,800 --> 00:49:45,040
end bi-directional

1375
00:49:45,040 --> 00:49:48,000
and associate a bunch of datagrams with

1376
00:49:48,000 --> 00:49:50,720
it and that's it

1377
00:49:50,720 --> 00:49:53,440
the ability to fold stuff back in the

1378
00:49:53,440 --> 00:49:56,640
ability to add extensions the ability to

1379
00:49:56,640 --> 00:49:58,640
identify that this particular datagram

1380
00:49:58,640 --> 00:50:02,000
belongs to this particular subcontext

1381
00:50:02,000 --> 00:50:04,240
is

1382
00:50:05,440 --> 00:50:08,160
something those protocols can deal with

1383
00:50:08,160 --> 00:50:09,040
and

1384
00:50:09,040 --> 00:50:10,800
if the intermediary

1385
00:50:10,800 --> 00:50:12,559
understood that protocol then it can

1386
00:50:12,559 --> 00:50:14,160
participate in that if it doesn't

1387
00:50:14,160 --> 00:50:16,000
understand that protocol then it

1388
00:50:16,000 --> 00:50:18,079
probably has no business

1389
00:50:18,079 --> 00:50:20,559
in participating in that protocol

1390
00:50:20,559 --> 00:50:22,400
and we can have a much

1391
00:50:22,400 --> 00:50:24,319
simpler design here and probably a much

1392
00:50:24,319 --> 00:50:26,559
simpler design all over

1393
00:50:26,559 --> 00:50:28,400
if we just have

1394
00:50:28,400 --> 00:50:30,000
those capabilities that means no

1395
00:50:30,000 --> 00:50:32,800
capsules period

1396
00:50:32,800 --> 00:50:34,640
and that that would be something that i

1397
00:50:34,640 --> 00:50:36,319
think we could probably

1398
00:50:36,319 --> 00:50:37,839
make work

1399
00:50:37,839 --> 00:50:38,960
so

1400
00:50:38,960 --> 00:50:42,880
uh let's pick on that um one of the and

1401
00:50:42,880 --> 00:50:44,319
actually i didn't talk about this in the

1402
00:50:44,319 --> 00:50:45,839
slides because that part has been in the

1403
00:50:45,839 --> 00:50:48,640
draft for a while um so

1404
00:50:48,640 --> 00:50:51,359
we have a datagram capsule

1405
00:50:51,359 --> 00:50:54,400
and the goal there is to be able to send

1406
00:50:54,400 --> 00:50:56,160
datagrams over

1407
00:50:56,160 --> 00:50:59,359
versions of http that aren't http 3

1408
00:50:59,359 --> 00:51:01,440
and

1409
00:51:01,440 --> 00:51:03,280
a pretty common deployment model that

1410
00:51:03,280 --> 00:51:04,720
people have talked about here is that

1411
00:51:04,720 --> 00:51:06,559
you're going to have http 3 from the

1412
00:51:06,559 --> 00:51:08,400
client to the first intermediary in

1413
00:51:08,400 --> 00:51:10,480
other words your front end and then it's

1414
00:51:10,480 --> 00:51:13,680
common for folks to use let's say http 2

1415
00:51:13,680 --> 00:51:16,480
from the that intermediary to the proxy

1416
00:51:16,480 --> 00:51:17,520
and

1417
00:51:17,520 --> 00:51:19,359
if as a client you're sending your

1418
00:51:19,359 --> 00:51:22,319
datagrams in a quick datagram frame the

1419
00:51:22,319 --> 00:51:24,240
intermediary is going to have to convert

1420
00:51:24,240 --> 00:51:26,559
those into a datagram capsule to be able

1421
00:51:26,559 --> 00:51:28,319
to send it to

1422
00:51:28,319 --> 00:51:30,000
um the

1423
00:51:30,000 --> 00:51:32,640
the back end in other words the proxy

1424
00:51:32,640 --> 00:51:33,920
and

1425
00:51:33,920 --> 00:51:36,480
i think that the idea here or at least

1426
00:51:36,480 --> 00:51:38,240
in the draft as it's currently written

1427
00:51:38,240 --> 00:51:40,480
is you have a capsule

1428
00:51:40,480 --> 00:51:42,559
that is the datagram capsule

1429
00:51:42,559 --> 00:51:44,960
and the interpretatory speaks that

1430
00:51:44,960 --> 00:51:46,160
because it's going to need to do this

1431
00:51:46,160 --> 00:51:48,480
conversion and and then kind of you're

1432
00:51:48,480 --> 00:51:50,000
done that way you don't need to reinvent

1433
00:51:50,000 --> 00:51:52,720
this datagram capsule for each protocol

1434
00:51:52,720 --> 00:51:55,599
um is that what you're suggesting

1435
00:51:55,599 --> 00:51:58,000
i'm i'm actually suggesting that we

1436
00:51:58,000 --> 00:51:59,599
reinvent them

1437
00:51:59,599 --> 00:52:02,319
because that

1438
00:52:02,319 --> 00:52:04,400
it's not reinventing them i think the

1439
00:52:04,400 --> 00:52:07,520
idea is pretty simple uh but the

1440
00:52:07,520 --> 00:52:10,160
the protocol that the the intermediary

1441
00:52:10,160 --> 00:52:12,480
speaks that does involve

1442
00:52:12,480 --> 00:52:14,400
folding datagrams into the stream or

1443
00:52:14,400 --> 00:52:16,960
pulling them out again on a hot by hop

1444
00:52:16,960 --> 00:52:18,319
basis is something that can be

1445
00:52:18,319 --> 00:52:19,599
negotiated

1446
00:52:19,599 --> 00:52:21,280
on a hot by hot basis this is something

1447
00:52:21,280 --> 00:52:24,240
that what transport already does

1448
00:52:24,240 --> 00:52:25,760
you're you're talking about lifting

1449
00:52:25,760 --> 00:52:27,599
stuff out of these protocols that are

1450
00:52:27,599 --> 00:52:29,359
specific to those protocols and and

1451
00:52:29,359 --> 00:52:31,599
putting them in in a framework and then

1452
00:52:31,599 --> 00:52:33,440
imposing that framework on everyone who

1453
00:52:33,440 --> 00:52:35,920
uses datagrams in http

1454
00:52:35,920 --> 00:52:39,839
and i think that's a poor choice

1455
00:52:40,319 --> 00:52:41,680
so

1456
00:52:41,680 --> 00:52:44,559
that makes at the end of the day were

1457
00:52:44,559 --> 00:52:48,640
the question there is do we want to

1458
00:52:48,640 --> 00:52:50,960
have a common way to do this across

1459
00:52:50,960 --> 00:52:52,800
protocols or do we want each protocol to

1460
00:52:52,800 --> 00:52:55,359
do their their out uh

1461
00:52:55,359 --> 00:52:58,400
my general sense and i see more people

1462
00:52:58,400 --> 00:53:01,440
getting in the queue so um is

1463
00:53:01,440 --> 00:53:03,920
it feels silly to have everyone reinvent

1464
00:53:03,920 --> 00:53:06,480
the same wheel uh when like

1465
00:53:06,480 --> 00:53:08,640
suppo folks seem to like capsules

1466
00:53:08,640 --> 00:53:10,480
because you know how can you get any

1467
00:53:10,480 --> 00:53:12,880
more simpler than a sequence of tlvs

1468
00:53:12,880 --> 00:53:16,480
um but yeah i i see that we're we have

1469
00:53:16,480 --> 00:53:18,000
you and i don't necessarily agree on

1470
00:53:18,000 --> 00:53:20,319
that one

1471
00:53:23,200 --> 00:53:28,439
all right i'll jump to ben in the queue

1472
00:53:28,800 --> 00:53:31,040
hi

1473
00:53:31,119 --> 00:53:32,160
i

1474
00:53:32,160 --> 00:53:34,160
uh

1475
00:53:34,160 --> 00:53:36,240
there's a lot going on here i think that

1476
00:53:36,240 --> 00:53:38,480
it is getting a little confusing because

1477
00:53:38,480 --> 00:53:40,000
we're talking about multiple layers that

1478
00:53:40,000 --> 00:53:42,160
are really quite independent here so i

1479
00:53:42,160 --> 00:53:43,839
think a lot of people following this

1480
00:53:43,839 --> 00:53:46,000
presentation um

1481
00:53:46,000 --> 00:53:47,119
may not have

1482
00:53:47,119 --> 00:53:48,000
have

1483
00:53:48,000 --> 00:53:50,160
caught that the the datagram format

1484
00:53:50,160 --> 00:53:51,119
types

1485
00:53:51,119 --> 00:53:52,319
are

1486
00:53:52,319 --> 00:53:54,319
pretty much unrelated to the capsule

1487
00:53:54,319 --> 00:53:55,440
discussion

1488
00:53:55,440 --> 00:53:58,640
um that they they run end to end and are

1489
00:53:58,640 --> 00:54:00,240
not connected to that

1490
00:54:00,240 --> 00:54:02,160
um

1491
00:54:02,160 --> 00:54:04,559
i do think that we need to be clear that

1492
00:54:04,559 --> 00:54:05,599
there are there are two kinds of

1493
00:54:05,599 --> 00:54:06,880
intermediaries that we're actually

1494
00:54:06,880 --> 00:54:08,800
discussing here we're discussing

1495
00:54:08,800 --> 00:54:11,760
essentially

1496
00:54:11,760 --> 00:54:13,760
smart intermediaries and and sort of

1497
00:54:13,760 --> 00:54:16,000
dumb intermediaries

1498
00:54:16,000 --> 00:54:17,200
so we have

1499
00:54:17,200 --> 00:54:19,280
smart intermediaries that that can do

1500
00:54:19,280 --> 00:54:21,040
this kind of

1501
00:54:21,040 --> 00:54:24,480
http version conversion magic

1502
00:54:24,480 --> 00:54:26,720
with interleaving and de-interleaving to

1503
00:54:26,720 --> 00:54:29,119
convert to like merge datagrams into a

1504
00:54:29,119 --> 00:54:31,440
tcp stream or something

1505
00:54:31,440 --> 00:54:32,800
we also have dumb intermediaries that

1506
00:54:32,800 --> 00:54:34,240
just forward

1507
00:54:34,240 --> 00:54:36,880
things directly

1508
00:54:36,880 --> 00:54:40,240
and both of those are fine

1509
00:54:40,240 --> 00:54:41,839
but the the case that gets you in

1510
00:54:41,839 --> 00:54:44,880
trouble is dumb intermediaries

1511
00:54:44,880 --> 00:54:47,040
that are trying to talk to an h2 back

1512
00:54:47,040 --> 00:54:49,280
end so imagine that i'm an intermediary

1513
00:54:49,280 --> 00:54:52,079
i've advertised h3 datagram support to

1514
00:54:52,079 --> 00:54:54,160
my to to the clients because i do

1515
00:54:54,160 --> 00:54:56,640
support h3 datagrams

1516
00:54:56,640 --> 00:54:58,079
but

1517
00:54:58,079 --> 00:54:58,960
uh

1518
00:54:58,960 --> 00:55:01,680
there's one of the back ends that i talk

1519
00:55:01,680 --> 00:55:04,799
to is h2 only a protocol comes in i

1520
00:55:04,799 --> 00:55:06,079
don't even know what that protocol is i

1521
00:55:06,079 --> 00:55:09,040
don't know if it uses capsules

1522
00:55:09,040 --> 00:55:10,640
and so

1523
00:55:10,640 --> 00:55:12,880
i can't forward these datagrams and i

1524
00:55:12,880 --> 00:55:15,280
also can't signal that

1525
00:55:15,280 --> 00:55:18,720
the datagrams have failed

1526
00:55:19,760 --> 00:55:20,880
that's the

1527
00:55:20,880 --> 00:55:23,760
that's the case that worries me the most

1528
00:55:23,760 --> 00:55:24,559
uh

1529
00:55:24,559 --> 00:55:28,400
and it i i will just float that if you

1530
00:55:28,400 --> 00:55:29,839
think that all of this is too

1531
00:55:29,839 --> 00:55:31,200
complicated

1532
00:55:31,200 --> 00:55:32,160
um

1533
00:55:32,160 --> 00:55:33,119
you know

1534
00:55:33,119 --> 00:55:35,040
this complexity a lot of this is because

1535
00:55:35,040 --> 00:55:36,880
we're effectively reproducing a lot of

1536
00:55:36,880 --> 00:55:40,079
the functionality of web transport

1537
00:55:40,079 --> 00:55:42,000
in my view

1538
00:55:42,000 --> 00:55:45,119
because we need it and so if you think

1539
00:55:45,119 --> 00:55:46,880
this is too complicated

1540
00:55:46,880 --> 00:55:47,680
uh

1541
00:55:47,680 --> 00:55:49,680
i i would suggest weighing the

1542
00:55:49,680 --> 00:55:51,760
alternative which would be to run all of

1543
00:55:51,760 --> 00:55:54,880
this over web transport

1544
00:55:56,319 --> 00:55:58,559
all right thank you ben

1545
00:55:58,559 --> 00:56:01,559
ecker

1546
00:56:03,040 --> 00:56:04,720
all right um

1547
00:56:04,720 --> 00:56:06,959
so

1548
00:56:07,839 --> 00:56:08,880
i think perhaps we have some

1549
00:56:08,880 --> 00:56:10,559
disagreement requirements

1550
00:56:10,559 --> 00:56:12,400
which is i don't understand how you get

1551
00:56:12,400 --> 00:56:14,839
into the state then suggests which is to

1552
00:56:14,839 --> 00:56:17,680
say you have been configured

1553
00:56:17,680 --> 00:56:20,079
with the

1554
00:56:20,079 --> 00:56:21,599
you'll be you've been configured with

1555
00:56:21,599 --> 00:56:24,880
the url and settings of a of an endpoint

1556
00:56:24,880 --> 00:56:26,400
that you're connecting to

1557
00:56:26,400 --> 00:56:29,440
that endpoint that should not happen if

1558
00:56:29,440 --> 00:56:30,960
there's a distribution embed suggests in

1559
00:56:30,960 --> 00:56:33,280
which the european configure with that

1560
00:56:33,280 --> 00:56:34,160
and

1561
00:56:34,160 --> 00:56:35,760
then the back end doesn't work simply

1562
00:56:35,760 --> 00:56:36,720
should not happen but you should not be

1563
00:56:36,720 --> 00:56:38,160
configured with it and if it does the

1564
00:56:38,160 --> 00:56:40,000
answer is within an error so it's not

1565
00:56:40,000 --> 00:56:41,920
like only discovery here is happening in

1566
00:56:41,920 --> 00:56:43,760
settings because we're not discovering

1567
00:56:43,760 --> 00:56:45,200
like it's not like we're discovering

1568
00:56:45,200 --> 00:56:47,680
that you can use you know compression we

1569
00:56:47,680 --> 00:56:48,880
were talking about a specific service

1570
00:56:48,880 --> 00:56:50,640
which configured the client either via

1571
00:56:50,640 --> 00:56:52,400
some mechanism it was advertised by the

1572
00:56:52,400 --> 00:56:55,200
server so what i'm saying is don't do it

1573
00:56:55,200 --> 00:56:56,720
say simply not configure system that way

1574
00:56:56,720 --> 00:56:59,680
and the problem will go away so um the

1575
00:56:59,680 --> 00:57:01,760
the word intermediary appears in this

1576
00:57:01,760 --> 00:57:03,920
document on 30-ish times it should

1577
00:57:03,920 --> 00:57:06,000
appear zero times and the right answer

1578
00:57:06,000 --> 00:57:09,440
is that the um that the front that the

1579
00:57:09,440 --> 00:57:10,640
front end the thing which you initially

1580
00:57:10,640 --> 00:57:11,839
quit connect to

1581
00:57:11,839 --> 00:57:14,079
should um advertise only things that

1582
00:57:14,079 --> 00:57:16,559
make sense and if and it is its

1583
00:57:16,559 --> 00:57:18,319
responsibility to translate the things

1584
00:57:18,319 --> 00:57:19,839
that make sense to it things make sense

1585
00:57:19,839 --> 00:57:23,760
behind it and so i i i guess i i'm

1586
00:57:23,760 --> 00:57:25,200
persuaded that any of this machinery is

1587
00:57:25,200 --> 00:57:28,720
required um so i i guess that and so so

1588
00:57:28,720 --> 00:57:31,680
i i think that would be my put um and um

1589
00:57:31,680 --> 00:57:33,839
i i i think that probably that is that's

1590
00:57:33,839 --> 00:57:35,200
preparatory to like any discussion of

1591
00:57:35,200 --> 00:57:36,400
how to actually implement the

1592
00:57:36,400 --> 00:57:37,520
functionality you should see the

1593
00:57:37,520 --> 00:57:40,920
desiring here

1594
00:57:41,280 --> 00:57:44,240
thanks i mean that's uh in the sense

1595
00:57:44,240 --> 00:57:46,240
that um you know folks want to deploy

1596
00:57:46,240 --> 00:57:47,760
this behind

1597
00:57:47,760 --> 00:57:50,480
front ends so intermediaries uh one

1598
00:57:50,480 --> 00:57:52,400
potential design is what you're saying

1599
00:57:52,400 --> 00:57:55,920
is we terminate everything at that first

1600
00:57:55,920 --> 00:57:58,319
hop and conceptually then there's no

1601
00:57:58,319 --> 00:57:59,760
more intermediary because you say that

1602
00:57:59,760 --> 00:58:01,359
any protocol that supports http

1603
00:58:01,359 --> 00:58:02,799
datagrams

1604
00:58:02,799 --> 00:58:04,880
must kind of terminate that request it

1605
00:58:04,880 --> 00:58:07,599
can send another request behind it if it

1606
00:58:07,599 --> 00:58:09,839
wants but conceptually those are no

1607
00:58:09,839 --> 00:58:12,240
longer the same one

1608
00:58:12,240 --> 00:58:13,359
i don't think that particularly

1609
00:58:13,359 --> 00:58:15,040
simplifies things and my main concern

1610
00:58:15,040 --> 00:58:16,880
there personally

1611
00:58:16,880 --> 00:58:19,440
is that it means that now you can't

1612
00:58:19,440 --> 00:58:22,480
anytime you want to extend anything you

1613
00:58:22,480 --> 00:58:24,160
need to modify the front end as opposed

1614
00:58:24,160 --> 00:58:26,079
to just the client in the back end and

1615
00:58:26,079 --> 00:58:27,760
given you know software update cycles

1616
00:58:27,760 --> 00:58:29,359
aren't always the same on front end and

1617
00:58:29,359 --> 00:58:31,599
back ends you that could prevent you

1618
00:58:31,599 --> 00:58:33,520
from deploying extensions down the road

1619
00:58:33,520 --> 00:58:36,400
and that so that's why i would prefer an

1620
00:58:36,400 --> 00:58:38,640
approach where some of this is

1621
00:58:38,640 --> 00:58:41,119
transparent to intermediaries which then

1622
00:58:41,119 --> 00:58:43,280
means that there's a document needs to

1623
00:58:43,280 --> 00:58:46,480
acknowledge that intermediaries exist

1624
00:58:46,480 --> 00:58:49,040
i'm sorry i need to repeat that argument

1625
00:58:49,040 --> 00:58:51,119
so the

1626
00:58:51,119 --> 00:58:52,000
so

1627
00:58:52,000 --> 00:58:54,400
let's say for for example let's focus on

1628
00:58:54,400 --> 00:58:56,960
web transport

1629
00:58:56,960 --> 00:58:59,760
folks want to deploy web transport on

1630
00:58:59,760 --> 00:59:01,920
back ends through a front end i think

1631
00:59:01,920 --> 00:59:02,960
that's

1632
00:59:02,960 --> 00:59:05,200
that is going to happen um

1633
00:59:05,200 --> 00:59:07,119
and there are two ways of doing that you

1634
00:59:07,119 --> 00:59:08,720
can either say

1635
00:59:08,720 --> 00:59:11,359
the request is end to end from client to

1636
00:59:11,359 --> 00:59:14,079
back end and there is an intermediary or

1637
00:59:14,079 --> 00:59:16,079
you can say what so that's like the

1638
00:59:16,079 --> 00:59:17,839
design in the draft right now what

1639
00:59:17,839 --> 00:59:20,400
you're proposing i think is to say the

1640
00:59:20,400 --> 00:59:23,280
the front end terminates the request

1641
00:59:23,280 --> 00:59:24,319
and

1642
00:59:24,319 --> 00:59:26,799
if it and it then it creates a separate

1643
00:59:26,799 --> 00:59:28,880
disconnected request from the front end

1644
00:59:28,880 --> 00:59:30,839
to the back end

1645
00:59:30,839 --> 00:59:32,559
um

1646
00:59:32,559 --> 00:59:34,559
and so in that what that means is then

1647
00:59:34,559 --> 00:59:36,960
you no longer have uh

1648
00:59:36,960 --> 00:59:38,720
discussion of intermediaries in the http

1649
00:59:38,720 --> 00:59:40,960
datagram's draft because then you have

1650
00:59:40,960 --> 00:59:42,960
ngb intermediaries from client to front

1651
00:59:42,960 --> 00:59:44,640
end and from front end to back end

1652
00:59:44,640 --> 00:59:47,119
separately but then there is no sharing

1653
00:59:47,119 --> 00:59:49,599
of state or anything between them

1654
00:59:49,599 --> 00:59:51,599
but what that means however is if you

1655
00:59:51,599 --> 00:59:53,920
want to add any extension to web

1656
00:59:53,920 --> 00:59:55,119
transport

1657
00:59:55,119 --> 00:59:58,400
you need because the middle

1658
00:59:58,400 --> 01:00:00,559
intermediary needs to support support

1659
01:00:00,559 --> 01:00:02,559
that extension you need to modify it as

1660
01:00:02,559 --> 01:00:04,160
opposed to only having to modify the

1661
01:00:04,160 --> 01:00:05,760
client in the back end

1662
01:00:05,760 --> 01:00:07,839
does that make sense that helps yes i

1663
01:00:07,839 --> 01:00:09,280
and what i'm saying so i think what i'm

1664
01:00:09,280 --> 01:00:10,880
saying is one way to do is to terminate

1665
01:00:10,880 --> 01:00:12,240
and the other way is to have a private

1666
01:00:12,240 --> 01:00:13,680
arrangement between that between between

1667
01:00:13,680 --> 01:00:15,359
the intermediary the front end and the

1668
01:00:15,359 --> 01:00:17,359
back end which describes exactly how

1669
01:00:17,359 --> 01:00:18,559
which parts of the channel are clear on

1670
01:00:18,559 --> 01:00:20,640
parts of the channel are not clear and

1671
01:00:20,640 --> 01:00:24,000
that um and that the what's happening

1672
01:00:24,000 --> 01:00:25,200
here is you're hoisting all that

1673
01:00:25,200 --> 01:00:28,079
complexity on the client um because you

1674
01:00:28,079 --> 01:00:28,880
know because you don't want to make that

1675
01:00:28,880 --> 01:00:30,240
privilege and they put this between the

1676
01:00:30,240 --> 01:00:32,799
server and and and between the origin

1677
01:00:32,799 --> 01:00:34,480
and the immediate area but the truth of

1678
01:00:34,480 --> 01:00:36,079
the matter is is that there are many

1679
01:00:36,079 --> 01:00:37,359
such arrangements in many different many

1680
01:00:37,359 --> 01:00:41,040
different configurations and that um

1681
01:00:41,040 --> 01:00:43,119
and like and i think the tri the the the

1682
01:00:43,119 --> 01:00:44,240
attempting to dictate the behaviors

1683
01:00:44,240 --> 01:00:45,280
intermediaries has proven to be

1684
01:00:45,280 --> 01:00:46,880
extraordinarily difficult in both hdp

1685
01:00:46,880 --> 01:00:49,359
and sip and that um it's far so

1686
01:00:49,359 --> 01:00:50,640
important when you're modeling this b2b

1687
01:00:50,640 --> 01:00:53,680
ways and that then the bbx whatever the

1688
01:00:53,680 --> 01:00:54,880
heck they want and it's simply not a

1689
01:00:54,880 --> 01:00:56,480
non-memphis standardization so yeah i

1690
01:00:56,480 --> 01:00:57,599
think that i think that that actually

1691
01:00:57,599 --> 01:01:00,000
imports into a lot of complexity later

1692
01:01:00,000 --> 01:01:01,520
but anyway i think i i see there's a

1693
01:01:01,520 --> 01:01:03,599
cube behind me um so i'm going to stop

1694
01:01:03,599 --> 01:01:06,799
all right thanks um all right folks i've

1695
01:01:06,799 --> 01:01:08,559
heard of building i think we're getting

1696
01:01:08,559 --> 01:01:10,480
either close to or already out of time

1697
01:01:10,480 --> 01:01:13,359
so uh let's all try to be a bit quicker

1698
01:01:13,359 --> 01:01:16,078
uh victor

1699
01:01:16,160 --> 01:01:18,960
yeah i just wanted to say that like at

1700
01:01:18,960 --> 01:01:21,440
some level uh

1701
01:01:21,440 --> 01:01:24,240
the ways just document the way this

1702
01:01:24,240 --> 01:01:26,640
model's extensibility for things like

1703
01:01:26,640 --> 01:01:29,200
connect udp is that connect udp is a

1704
01:01:29,200 --> 01:01:30,400
resource

1705
01:01:30,400 --> 01:01:33,359
uh and fundamentally any extension to

1706
01:01:33,359 --> 01:01:35,520
connect utps that you negotiate is a

1707
01:01:35,520 --> 01:01:38,720
property of an individual resource

1708
01:01:38,720 --> 01:01:41,599
uh as opposed to property of the

1709
01:01:41,599 --> 01:01:42,880
connection

1710
01:01:42,880 --> 01:01:44,319
uh and

1711
01:01:44,319 --> 01:01:47,040
to comment on akka's point i do things

1712
01:01:47,040 --> 01:01:48,400
that of

1713
01:01:48,400 --> 01:01:50,079
proxy to back and require

1714
01:01:50,079 --> 01:01:52,720
standardization because in cases like

1715
01:01:52,720 --> 01:01:55,280
cdns those are

1716
01:01:55,280 --> 01:01:58,880
uh the objects that are

1717
01:01:58,960 --> 01:02:01,599
operated by different entities

1718
01:02:01,599 --> 01:02:04,240
and even in cases that aren't they're

1719
01:02:04,240 --> 01:02:07,520
operated by same entities uh there often

1720
01:02:07,520 --> 01:02:10,319
the software is implemented by

1721
01:02:10,319 --> 01:02:13,440
uh different people like for instance me

1722
01:02:13,440 --> 01:02:16,319
running nginx as a reverse proxy

1723
01:02:16,319 --> 01:02:19,359
uh so i do believe that we are

1724
01:02:19,359 --> 01:02:20,880
fundamentally

1725
01:02:20,880 --> 01:02:21,920
uh

1726
01:02:21,920 --> 01:02:25,119
do need to standardize those and that

1727
01:02:25,119 --> 01:02:28,559
works for http so that should work for

1728
01:02:28,559 --> 01:02:31,119
uh mask

1729
01:02:31,119 --> 01:02:32,880
or what so

1730
01:02:32,880 --> 01:02:34,400
thanks victor so to clarify what you're

1731
01:02:34,400 --> 01:02:37,280
saying uh you you're suggesting that we

1732
01:02:37,280 --> 01:02:40,480
have http datagrams function end-to-end

1733
01:02:40,480 --> 01:02:43,280
from client to proxy in such a way that

1734
01:02:43,280 --> 01:02:45,359
we don't need to modify the interpreter

1735
01:02:45,359 --> 01:02:46,880
to terminate things on the intermediate

1736
01:02:46,880 --> 01:02:48,960
area is that what you were saying

1737
01:02:48,960 --> 01:02:50,160
uh

1738
01:02:50,160 --> 01:02:51,440
yes

1739
01:02:51,440 --> 01:02:54,880
i i believe that like similar to things

1740
01:02:54,880 --> 01:02:57,760
like http headers that

1741
01:02:57,760 --> 01:03:00,640
those should be also my thing tells me

1742
01:03:00,640 --> 01:03:02,319
to stop talking so i'm going to stop

1743
01:03:02,319 --> 01:03:03,599
talking

1744
01:03:03,599 --> 01:03:07,039
awesome thanks victor um

1745
01:03:07,039 --> 01:03:08,559
alan

1746
01:03:08,559 --> 01:03:09,599
uh

1747
01:03:09,599 --> 01:03:12,000
yeah so the timer just expired um

1748
01:03:12,000 --> 01:03:13,760
and uh there's been a lot of discussion

1749
01:03:13,760 --> 01:03:15,599
going around back and forth i think at

1750
01:03:15,599 --> 01:03:16,960
this point it's fairly clear that

1751
01:03:16,960 --> 01:03:19,599
there's a lot of uh

1752
01:03:19,599 --> 01:03:21,200
different hot takes on you know what the

1753
01:03:21,200 --> 01:03:23,200
straps should do uh and and what the

1754
01:03:23,200 --> 01:03:24,720
requirements are

1755
01:03:24,720 --> 01:03:26,799
um and what the what the simplest thing

1756
01:03:26,799 --> 01:03:28,960
is moving forward so what eric and i

1757
01:03:28,960 --> 01:03:31,200
would like to do is propose a design

1758
01:03:31,200 --> 01:03:33,440
team uh to sort of resolve these

1759
01:03:33,440 --> 01:03:35,039
particular issues

1760
01:03:35,039 --> 01:03:36,000
um

1761
01:03:36,000 --> 01:03:38,240
followed by an interim meeting between

1762
01:03:38,240 --> 01:03:41,200
now and itf 113 to present the results

1763
01:03:41,200 --> 01:03:44,400
um and hopefully drive towards consensus

1764
01:03:44,400 --> 01:03:46,000
uh so

1765
01:03:46,000 --> 01:03:48,400
if you would like uh to participate on

1766
01:03:48,400 --> 01:03:50,079
this design team

1767
01:03:50,079 --> 01:03:52,400
uh please either like send eric or

1768
01:03:52,400 --> 01:03:55,119
myself an email or just you know

1769
01:03:55,119 --> 01:03:56,559
drop a note in the in the chat and we'll

1770
01:03:56,559 --> 01:03:58,240
make sure you're on it um

1771
01:03:58,240 --> 01:04:00,319
[Music]

1772
01:04:00,319 --> 01:04:02,160
david since you've been so instrumental

1773
01:04:02,160 --> 01:04:04,240
in moving this strap forward um

1774
01:04:04,240 --> 01:04:06,160
wondering if you'd be willing to to lead

1775
01:04:06,160 --> 01:04:08,640
the effort um

1776
01:04:08,640 --> 01:04:10,400
and and

1777
01:04:10,400 --> 01:04:11,520
help make

1778
01:04:11,520 --> 01:04:13,200
yeah happy too so

1779
01:04:13,200 --> 01:04:15,359
uh folks if you want to like i don't

1780
01:04:15,359 --> 01:04:17,359
know apply you know type

1781
01:04:17,359 --> 01:04:19,680
dt plus or something in the in the chat

1782
01:04:19,680 --> 01:04:21,520
i'll i'll make sure to gather everyone's

1783
01:04:21,520 --> 01:04:24,319
names uh and then we can have a side

1784
01:04:24,319 --> 01:04:26,960
beating sometime soon um

1785
01:04:26,960 --> 01:04:29,280
so or that are you can i

1786
01:04:29,280 --> 01:04:30,640
better than i will help coordinate

1787
01:04:30,640 --> 01:04:32,559
logistics uh to make it easier for you

1788
01:04:32,559 --> 01:04:34,079
all to focus on the technical details

1789
01:04:34,079 --> 01:04:35,680
rather than uh

1790
01:04:35,680 --> 01:04:38,319
dealing with time zones and whatnot um

1791
01:04:38,319 --> 01:04:39,359
so

1792
01:04:39,359 --> 01:04:40,400
um

1793
01:04:40,400 --> 01:04:41,839
thank you um

1794
01:04:41,839 --> 01:04:44,079
uh in the interest of time al and lucas

1795
01:04:44,079 --> 01:04:46,160
tell me if you have uh

1796
01:04:46,160 --> 01:04:48,160
clarifying questions that still can be

1797
01:04:48,160 --> 01:04:50,240
asked or um

1798
01:04:50,240 --> 01:04:51,760
or you still like to ask of course you

1799
01:04:51,760 --> 01:04:53,119
can ask them

1800
01:04:53,119 --> 01:04:54,640
but if the things that can be punted to

1801
01:04:54,640 --> 01:04:58,000
the design team uh later on uh i'd

1802
01:04:58,000 --> 01:05:00,799
encourage you to do that

1803
01:05:00,880 --> 01:05:02,000
all right

1804
01:05:02,000 --> 01:05:05,119
thanks um all right uh

1805
01:05:05,119 --> 01:05:08,160
lucas you're still in the queue

1806
01:05:08,160 --> 01:05:10,480
yeah i just i just want to say that the

1807
01:05:10,480 --> 01:05:12,000
decision like people have been arguing

1808
01:05:12,000 --> 01:05:14,480
about getting rid of capsules but if we

1809
01:05:14,480 --> 01:05:16,319
do that we're back to where this draft

1810
01:05:16,319 --> 01:05:18,880
started is hb3 datagram

1811
01:05:18,880 --> 01:05:20,640
the whole point of adding capsules was

1812
01:05:20,640 --> 01:05:23,920
to support datagram over http 2 which

1813
01:05:23,920 --> 01:05:27,119
was a use case people wanted and hb1 as

1814
01:05:27,119 --> 01:05:28,720
well so

1815
01:05:28,720 --> 01:05:30,319
if we're revisiting that it would make

1816
01:05:30,319 --> 01:05:31,599
me sad but

1817
01:05:31,599 --> 01:05:33,280
um and i'd want to know why and we can

1818
01:05:33,280 --> 01:05:35,280
have that discussion in the design team

1819
01:05:35,280 --> 01:05:39,200
or later ones so thanks

1820
01:05:40,480 --> 01:05:41,280
cool

1821
01:05:41,280 --> 01:05:45,039
um thanks lucas um

1822
01:05:45,280 --> 01:05:47,039
all right um

1823
01:05:47,039 --> 01:05:49,520
let me see

1824
01:05:49,520 --> 01:05:52,160
uh where was i

1825
01:05:52,160 --> 01:05:54,399
right

1826
01:05:54,960 --> 01:05:55,760
so

1827
01:05:55,760 --> 01:05:58,240
i had another question uh for this draft

1828
01:05:58,240 --> 01:06:00,480
about uh wait no that's uh there was an

1829
01:06:00,480 --> 01:06:02,799
alternate proposal and a discussion on

1830
01:06:02,799 --> 01:06:04,319
reliable datagram but i think i'm going

1831
01:06:04,319 --> 01:06:07,119
to punt this to after that after the

1832
01:06:07,119 --> 01:06:08,799
design team because

1833
01:06:08,799 --> 01:06:10,960
there's no point going even resolving

1834
01:06:10,960 --> 01:06:13,520
this until we know next so let let's

1835
01:06:13,520 --> 01:06:15,039
kind of switch gears and talk about

1836
01:06:15,039 --> 01:06:17,440
connect udp for a bit

1837
01:06:17,440 --> 01:06:18,960
um

1838
01:06:18,960 --> 01:06:20,559
so

1839
01:06:20,559 --> 01:06:22,319
where are we with connect udp so the

1840
01:06:22,319 --> 01:06:24,559
connect udp draft was kind of on hold

1841
01:06:24,559 --> 01:06:27,039
for a while um while we were you know

1842
01:06:27,039 --> 01:06:30,400
redesigning http datagrams uh and then

1843
01:06:30,400 --> 01:06:32,400
we kind of since we landed on

1844
01:06:32,400 --> 01:06:34,240
a vastly different design for http

1845
01:06:34,240 --> 01:06:36,799
datagrams i took some time to update

1846
01:06:36,799 --> 01:06:38,880
connect udp to

1847
01:06:38,880 --> 01:06:40,799
reference that and also to update some

1848
01:06:40,799 --> 01:06:43,680
of the discussions we had in the past

1849
01:06:43,680 --> 01:06:45,520
and the the main

1850
01:06:45,520 --> 01:06:49,039
change there is that um we connect udp

1851
01:06:49,039 --> 01:06:52,319
is no longer the connect udp method

1852
01:06:52,319 --> 01:06:55,039
it is now the connect udp http upgrade

1853
01:06:55,039 --> 01:06:56,000
token

1854
01:06:56,000 --> 01:06:57,680
which is the registry of things you can

1855
01:06:57,680 --> 01:07:01,119
use with upgrade in h1 or with extended

1856
01:07:01,119 --> 01:07:03,440
connect in h2 and h3

1857
01:07:03,440 --> 01:07:06,559
so we said we now say connect udp relies

1858
01:07:06,559 --> 01:07:09,280
on extended connect which is

1859
01:07:09,280 --> 01:07:10,240
uh

1860
01:07:10,240 --> 01:07:13,920
rfc 8441 and h2 and a draft that's

1861
01:07:13,920 --> 01:07:15,839
currently in the http working group for

1862
01:07:15,839 --> 01:07:17,039
h3

1863
01:07:17,039 --> 01:07:18,799
and the idea is the server sends a

1864
01:07:18,799 --> 01:07:21,920
setting to say i now allow a new pseudo

1865
01:07:21,920 --> 01:07:23,920
header which is the colon protocol

1866
01:07:23,920 --> 01:07:27,440
header and so you send a connect method

1867
01:07:27,440 --> 01:07:29,839
with with a colon protocol

1868
01:07:29,839 --> 01:07:32,319
and you send that with connect udp

1869
01:07:32,319 --> 01:07:34,640
so that was the one of the major changes

1870
01:07:34,640 --> 01:07:37,839
to the draft which we had discussed

1871
01:07:37,839 --> 01:07:40,799
pardon me in the previous meeting um

1872
01:07:40,799 --> 01:07:42,960
and it kind of simplifies things and

1873
01:07:42,960 --> 01:07:45,039
people are saying that it'll also be

1874
01:07:45,039 --> 01:07:47,680
easier to deploy given existing um

1875
01:07:47,680 --> 01:07:49,039
infrastructure

1876
01:07:49,039 --> 01:07:52,240
and then another important change was

1877
01:07:52,240 --> 01:07:54,400
configuration of

1878
01:07:54,400 --> 01:07:56,880
on the client so let's say you're you

1879
01:07:56,880 --> 01:07:58,720
want to tell your web browser for

1880
01:07:58,720 --> 01:08:01,599
example to use this connect udp

1881
01:08:01,599 --> 01:08:04,720
uh proxy uh before you would just you

1882
01:08:04,720 --> 01:08:07,119
know give it a host import

1883
01:08:07,119 --> 01:08:10,240
and now we say we use a uri template so

1884
01:08:10,240 --> 01:08:11,599
at the bottom of the slide here i have

1885
01:08:11,599 --> 01:08:13,839
like three random examples of how you

1886
01:08:13,839 --> 01:08:17,679
would connect configure the uh client

1887
01:08:17,679 --> 01:08:19,679
and conceptually what it means is that

1888
01:08:19,679 --> 01:08:20,719
you

1889
01:08:20,719 --> 01:08:22,080
send the

1890
01:08:22,080 --> 01:08:24,238
target so the target again is the server

1891
01:08:24,238 --> 01:08:26,640
that you want to proxy to

1892
01:08:26,640 --> 01:08:30,399
in the uh in the path uh pseudo header

1893
01:08:30,399 --> 01:08:32,319
uh when you're sending it and the

1894
01:08:32,319 --> 01:08:34,399
important distinction there is

1895
01:08:34,399 --> 01:08:37,920
so in almost every http method under the

1896
01:08:37,920 --> 01:08:38,880
sun

1897
01:08:38,880 --> 01:08:40,640
the authority is the authority of the

1898
01:08:40,640 --> 01:08:42,000
proxy

1899
01:08:42,000 --> 01:08:45,520
and then the path is how you tell

1900
01:08:45,520 --> 01:08:46,880
what you want you know your actual

1901
01:08:46,880 --> 01:08:49,040
target what you want to talk to

1902
01:08:49,040 --> 01:08:52,479
connect was its own beast uh where

1903
01:08:52,479 --> 01:08:54,319
in the authority it kind of in the

1904
01:08:54,319 --> 01:08:55,520
authority instead of having the

1905
01:08:55,520 --> 01:08:56,880
authority of the proxy you had the

1906
01:08:56,880 --> 01:08:58,719
authority of the target of the duality

1907
01:08:58,719 --> 01:09:00,158
sorry the host name

1908
01:09:00,158 --> 01:09:02,479
and port of the target um a lot of folks

1909
01:09:02,479 --> 01:09:04,000
were saying that that

1910
01:09:04,000 --> 01:09:06,560
design choice for connect was odd and we

1911
01:09:06,560 --> 01:09:07,839
didn't want to replicate that for

1912
01:09:07,839 --> 01:09:09,279
connect udp

1913
01:09:09,279 --> 01:09:12,640
so here we're back to a more traditional

1914
01:09:12,640 --> 01:09:15,040
http design where the authority header

1915
01:09:15,040 --> 01:09:17,040
contains the authority of the proxy

1916
01:09:17,040 --> 01:09:18,479
you're talking to

1917
01:09:18,479 --> 01:09:19,759
and then the

1918
01:09:19,759 --> 01:09:22,560
target is encoded in the path um

1919
01:09:22,560 --> 01:09:24,319
so right now we have in the draft is a

1920
01:09:24,319 --> 01:09:28,080
uri template for this um

1921
01:09:28,799 --> 01:09:29,600
uh

1922
01:09:29,600 --> 01:09:32,479
so that said um the ui template was

1923
01:09:32,479 --> 01:09:34,640
something that i forgot who proposed a

1924
01:09:34,640 --> 01:09:37,040
few atf's to go uh when i went to

1925
01:09:37,040 --> 01:09:39,279
implement this for the hackathon last

1926
01:09:39,279 --> 01:09:40,399
week

1927
01:09:40,399 --> 01:09:42,960
it was way more of a pain than i thought

1928
01:09:42,960 --> 01:09:45,040
it ever could be um

1929
01:09:45,040 --> 01:09:48,080
so for folks that i have read the rfc on

1930
01:09:48,080 --> 01:09:50,640
uri templates

1931
01:09:50,640 --> 01:09:51,839
they're

1932
01:09:51,839 --> 01:09:54,320
very complicated ways of encoding uri

1933
01:09:54,320 --> 01:09:56,000
templates and

1934
01:09:56,000 --> 01:09:57,760
i mean it's okay don't worry it's not

1935
01:09:57,760 --> 01:09:59,199
like anyone has introduced security

1936
01:09:59,199 --> 01:10:00,800
vulnerabilities by having mistakes in

1937
01:10:00,800 --> 01:10:02,640
their parser before

1938
01:10:02,640 --> 01:10:04,640
and so my thought was

1939
01:10:04,640 --> 01:10:07,600
do we actually need a uri template here

1940
01:10:07,600 --> 01:10:08,560
because

1941
01:10:08,560 --> 01:10:11,760
the really cool properties

1942
01:10:11,760 --> 01:10:15,280
that we rely on is the property that we

1943
01:10:15,280 --> 01:10:18,000
have a your uri for configuration but it

1944
01:10:18,000 --> 01:10:19,199
doesn't necessarily need to be a

1945
01:10:19,199 --> 01:10:21,600
template because if we have a uri for

1946
01:10:21,600 --> 01:10:23,600
configuration it means that

1947
01:10:23,600 --> 01:10:26,400
the scheme is decided at configuration

1948
01:10:26,400 --> 01:10:27,360
time

1949
01:10:27,360 --> 01:10:30,880
and that also conveys the um authority

1950
01:10:30,880 --> 01:10:32,480
of the proxy at configuration time which

1951
01:10:32,480 --> 01:10:34,239
you obviously need

1952
01:10:34,239 --> 01:10:36,239
and it allows you to rely on the path so

1953
01:10:36,239 --> 01:10:37,840
for example you could have behind the

1954
01:10:37,840 --> 01:10:39,840
same authority multiple paths for

1955
01:10:39,840 --> 01:10:42,480
proxying and you could pass in you know

1956
01:10:42,480 --> 01:10:45,600
as a http query parameter like the user

1957
01:10:45,600 --> 01:10:48,560
name or whatever you fancy

1958
01:10:48,560 --> 01:10:52,719
um and so the question is do we want to

1959
01:10:52,719 --> 01:10:55,120
uh how do we send than the target post

1960
01:10:55,120 --> 01:10:56,880
import that you want to connect to do we

1961
01:10:56,880 --> 01:11:00,800
send it in the path with a uri template

1962
01:11:00,800 --> 01:11:03,600
or do we say no the path is reserved for

1963
01:11:03,600 --> 01:11:05,280
like just configuration elements and

1964
01:11:05,280 --> 01:11:08,080
it's send in a separate header um i

1965
01:11:08,080 --> 01:11:09,440
initially thought the uri template was

1966
01:11:09,440 --> 01:11:12,239
really great but it ended up being way

1967
01:11:12,239 --> 01:11:15,040
more complex to implement and

1968
01:11:15,040 --> 01:11:16,880
that wasn't great and i'm not sure we

1969
01:11:16,880 --> 01:11:18,560
should replicate

1970
01:11:18,560 --> 01:11:21,440
this uh the so ui template really made

1971
01:11:21,440 --> 01:11:23,040
sense for something like dough because

1972
01:11:23,040 --> 01:11:24,880
it allowed you to

1973
01:11:24,880 --> 01:11:26,560
you know just type in

1974
01:11:26,560 --> 01:11:30,880
your query into like curl and get um a

1975
01:11:30,880 --> 01:11:32,560
response like directly from the account

1976
01:11:32,560 --> 01:11:34,080
which was really neat that's not

1977
01:11:34,080 --> 01:11:35,440
something you're going to want to do for

1978
01:11:35,440 --> 01:11:37,040
connect udp

1979
01:11:37,040 --> 01:11:39,840
and the other property is when we so in

1980
01:11:39,840 --> 01:11:41,360
the connect ip draft tell me we'll be

1981
01:11:41,360 --> 01:11:43,520
talking about later we decided to mimic

1982
01:11:43,520 --> 01:11:45,199
connect udp at the end of the day let's

1983
01:11:45,199 --> 01:11:47,040
try to keep them as close to pos

1984
01:11:47,040 --> 01:11:49,440
together as possible but the ui template

1985
01:11:49,440 --> 01:11:52,239
parameters were different so

1986
01:11:52,239 --> 01:11:53,520
i thought it would be really cool that

1987
01:11:53,520 --> 01:11:55,760
you could configure your mask proxy with

1988
01:11:55,760 --> 01:11:57,920
one configuration string

1989
01:11:57,920 --> 01:11:59,920
but if you're using a ui template you

1990
01:11:59,920 --> 01:12:01,440
can't really or you need all those

1991
01:12:01,440 --> 01:12:02,960
parameters in there

1992
01:12:02,960 --> 01:12:05,440
so if we have a uri for configuration

1993
01:12:05,440 --> 01:12:06,880
and not a template and we use headers

1994
01:12:06,880 --> 01:12:08,800
you can then reuse them for multiple

1995
01:12:08,800 --> 01:12:10,480
mask methods which

1996
01:12:10,480 --> 01:12:13,839
i thought would be kind of neat

1997
01:12:14,080 --> 01:12:16,159
so i personally would be inclined to

1998
01:12:16,159 --> 01:12:19,199
switching to headers

1999
01:12:19,199 --> 01:12:23,480
what do folks think about that

2000
01:12:30,640 --> 01:12:33,640
empty

2001
01:12:36,159 --> 01:12:38,159
here and

2002
01:12:38,159 --> 01:12:39,760
why would you move

2003
01:12:39,760 --> 01:12:43,440
resource identity to a header

2004
01:12:44,880 --> 01:12:46,159
sorry the

2005
01:12:46,159 --> 01:12:48,239
we you still need to wait like 10

2006
01:12:48,239 --> 01:12:49,760
seconds before your mic starts working

2007
01:12:49,760 --> 01:12:50,880
can you repeat the beginning of that

2008
01:12:50,880 --> 01:12:52,320
please

2009
01:12:52,320 --> 01:12:54,320
so um i i guess the question that you

2010
01:12:54,320 --> 01:12:55,920
want to ask here is

2011
01:12:55,920 --> 01:12:58,159
what resource are you identifying here

2012
01:12:58,159 --> 01:13:00,159
are you identifying a generic resource

2013
01:13:00,159 --> 01:13:01,600
that's got the ability to connect to

2014
01:13:01,600 --> 01:13:03,360
anything

2015
01:13:03,360 --> 01:13:05,040
such that

2016
01:13:05,040 --> 01:13:06,080
having

2017
01:13:06,080 --> 01:13:08,239
different ip addresses

2018
01:13:08,239 --> 01:13:09,360
um

2019
01:13:09,360 --> 01:13:14,239
in the url would be a mistake or are you

2020
01:13:14,239 --> 01:13:16,080
identifying a resource that has generic

2021
01:13:16,080 --> 01:13:19,600
connectivity properties

2022
01:13:19,600 --> 01:13:21,679
uh anyway and that's actually that that

2023
01:13:21,679 --> 01:13:23,120
is exactly the question that we're

2024
01:13:23,120 --> 01:13:25,679
trying to answer from a like so i was

2025
01:13:25,679 --> 01:13:27,520
asking it in terms of like practical you

2026
01:13:27,520 --> 01:13:30,159
know wine coding matter you're asking in

2027
01:13:30,159 --> 01:13:32,239
terms of like conceptual matter but i

2028
01:13:32,239 --> 01:13:34,560
totally agree it's the same question do

2029
01:13:34,560 --> 01:13:37,280
you are we saying that we are like the

2030
01:13:37,280 --> 01:13:39,520
the resource were you know in http terms

2031
01:13:39,520 --> 01:13:41,360
the resource that we're going to

2032
01:13:41,360 --> 01:13:43,840
is that the part of the proxy that

2033
01:13:43,840 --> 01:13:46,560
handles connect udp is that the resource

2034
01:13:46,560 --> 01:13:49,840
or is the target the resource and if the

2035
01:13:49,840 --> 01:13:52,800
resource is the target then we want

2036
01:13:52,800 --> 01:13:55,120
this to be encode like the target host

2037
01:13:55,120 --> 01:13:57,199
and port to be encoded in the path if

2038
01:13:57,199 --> 01:13:59,360
the resource is the proxy proxying

2039
01:13:59,360 --> 01:14:00,960
capability

2040
01:14:00,960 --> 01:14:02,239
then we don't want to encode it in the

2041
01:14:02,239 --> 01:14:03,840
path we want to encode it in a separate

2042
01:14:03,840 --> 01:14:05,440
header uh that's the question we're

2043
01:14:05,440 --> 01:14:07,679
trying to answer here yeah but might you

2044
01:14:07,679 --> 01:14:09,920
want to have different access control

2045
01:14:09,920 --> 01:14:11,840
depending on the destination that you're

2046
01:14:11,840 --> 01:14:12,840
going

2047
01:14:12,840 --> 01:14:18,000
to that suggests a uri

2048
01:14:20,080 --> 01:14:23,040
i mean you can perform access control

2049
01:14:23,040 --> 01:14:24,880
based on those other headers as well

2050
01:14:24,880 --> 01:14:26,719
right

2051
01:14:26,719 --> 01:14:28,480
you can do all sorts of

2052
01:14:28,480 --> 01:14:30,719
interesting things with editors

2053
01:14:30,719 --> 01:14:32,400
but when you start to use those headers

2054
01:14:32,400 --> 01:14:35,120
to identify resources then

2055
01:14:35,120 --> 01:14:39,519
they're no longer really headers anymore

2056
01:14:39,679 --> 01:14:40,880
i

2057
01:14:40,880 --> 01:14:44,239
i agree and and i guess conceptually i'm

2058
01:14:44,239 --> 01:14:46,320
saying that maybe the the resource isn't

2059
01:14:46,320 --> 01:14:49,120
the target the resource is the proxy inc

2060
01:14:49,120 --> 01:14:51,840
capability

2061
01:14:52,640 --> 01:14:56,199
um vinnie

2062
01:14:58,480 --> 01:15:00,640
a couple seconds here uh can you just

2063
01:15:00,640 --> 01:15:02,640
elaborate on how

2064
01:15:02,640 --> 01:15:06,159
you envision header parsing being

2065
01:15:06,159 --> 01:15:07,280
uh

2066
01:15:07,280 --> 01:15:09,280
simpler than template parsing like i

2067
01:15:09,280 --> 01:15:11,440
didn't understand that point

2068
01:15:11,440 --> 01:15:13,520
they both gonna have the same kind of

2069
01:15:13,520 --> 01:15:15,280
parser type

2070
01:15:15,280 --> 01:15:17,920
bugs would happen in both right

2071
01:15:17,920 --> 01:15:20,560
um no uh and that's a great question i

2072
01:15:20,560 --> 01:15:22,159
guess i should have been more clear uh

2073
01:15:22,159 --> 01:15:25,120
so right now on the client um

2074
01:15:25,120 --> 01:15:28,640
so i need to parse the uri template

2075
01:15:28,640 --> 01:15:30,480
uh so the the

2076
01:15:30,480 --> 01:15:32,400
uh you you're gonna have to run some

2077
01:15:32,400 --> 01:15:34,480
code on the client which as input is

2078
01:15:34,480 --> 01:15:36,000
going to take

2079
01:15:36,000 --> 01:15:37,520
the configuration

2080
01:15:37,520 --> 01:15:38,880
and

2081
01:15:38,880 --> 01:15:39,679
the

2082
01:15:39,679 --> 01:15:42,000
target so let's say your configuration

2083
01:15:42,000 --> 01:15:44,320
is a uri or ui template that's how you

2084
01:15:44,320 --> 01:15:46,000
refer to the proxy

2085
01:15:46,000 --> 01:15:49,360
and and you're going to take like the

2086
01:15:49,360 --> 01:15:50,960
at the moment your browser is saying i

2087
01:15:50,960 --> 01:15:52,960
want to connect to this target over

2088
01:15:52,960 --> 01:15:54,159
there so you're going to take those two

2089
01:15:54,159 --> 01:15:56,880
bits of information and combine them

2090
01:15:56,880 --> 01:15:59,600
into an http headers frame

2091
01:15:59,600 --> 01:16:00,960
and so

2092
01:16:00,960 --> 01:16:02,239
right now

2093
01:16:02,239 --> 01:16:04,080
what you need to do is parse the ui

2094
01:16:04,080 --> 01:16:05,360
template

2095
01:16:05,360 --> 01:16:06,400
uh

2096
01:16:06,400 --> 01:16:08,560
in order to like the technical term from

2097
01:16:08,560 --> 01:16:10,880
that rsc is to expand the ui template

2098
01:16:10,880 --> 01:16:13,840
into a fully resolved uri

2099
01:16:13,840 --> 01:16:15,679
and so you're gonna need to if you're

2100
01:16:15,679 --> 01:16:17,440
using a uri template look at the line at

2101
01:16:17,440 --> 01:16:18,800
the bottom you're gonna need to

2102
01:16:18,800 --> 01:16:20,880
understand that that

2103
01:16:20,880 --> 01:16:23,679
that is like a level three uri template

2104
01:16:23,679 --> 01:16:25,920
where you're gonna have to say okay well

2105
01:16:25,920 --> 01:16:28,120
my authority is proxy example.org port

2106
01:16:28,120 --> 01:16:30,800
443 and my path is

2107
01:16:30,800 --> 01:16:32,320
slash mask

2108
01:16:32,320 --> 01:16:36,880
question mark target host equals 1.2.3.4

2109
01:16:36,880 --> 01:16:40,080
ampersand target port equals

2110
01:16:40,080 --> 01:16:42,320
one two three four and that's that

2111
01:16:42,320 --> 01:16:44,640
parsing that you need for a ui template

2112
01:16:44,640 --> 01:16:46,640
whereas if we use the uri

2113
01:16:46,640 --> 01:16:48,159
regular uri for configuration you

2114
01:16:48,159 --> 01:16:49,199
wouldn't need that because you would

2115
01:16:49,199 --> 01:16:51,920
take the uri and you would parse it just

2116
01:16:51,920 --> 01:16:54,159
in order to split the authority off from

2117
01:16:54,159 --> 01:16:56,080
the path you put the authority in the

2118
01:16:56,080 --> 01:16:57,840
art authority pseudoheader you put the

2119
01:16:57,840 --> 01:16:59,679
path in the path to the header and you

2120
01:16:59,679 --> 01:17:01,600
put what separately you got as your

2121
01:17:01,600 --> 01:17:04,400
target ip into its new header and your

2122
01:17:04,400 --> 01:17:06,800
target port into its new header uh that

2123
01:17:06,800 --> 01:17:09,120
also makes parsing on the server on the

2124
01:17:09,120 --> 01:17:11,199
proxy side easier

2125
01:17:11,199 --> 01:17:14,159
because now you don't need to go and

2126
01:17:14,159 --> 01:17:15,679
parse some of this to get the ip address

2127
01:17:15,679 --> 01:17:18,400
you just say well i look at this

2128
01:17:18,400 --> 01:17:19,840
header and there it's there i don't need

2129
01:17:19,840 --> 01:17:23,120
to split it out in any way

2130
01:17:23,120 --> 01:17:26,120
echo

2131
01:17:30,800 --> 01:17:33,360
oh right i'm waiting i forgot

2132
01:17:33,360 --> 01:17:34,320
um

2133
01:17:34,320 --> 01:17:36,159
so i mean i guess i don't feel super

2134
01:17:36,159 --> 01:17:37,440
strongly about this but i also don't

2135
01:17:37,440 --> 01:17:38,400
think that the arguments you're offering

2136
01:17:38,400 --> 01:17:40,719
are very persuasive um no you have an

2137
01:17:40,719 --> 01:17:42,880
s509 parser so like i don't think like i

2138
01:17:42,880 --> 01:17:44,159
mean i don't think like the additional

2139
01:17:44,159 --> 01:17:46,080
security like like like overhead of

2140
01:17:46,080 --> 01:17:48,239
personal ui template is like is like

2141
01:17:48,239 --> 01:17:51,040
that bigger crisis um i i i i didn't

2142
01:17:51,040 --> 01:17:53,040
know i do i do know the comments but how

2143
01:17:53,040 --> 01:17:54,480
complicated it is i think i thought i

2144
01:17:54,480 --> 01:17:55,920
thought lucas's suggestion that maybe

2145
01:17:55,920 --> 01:17:57,360
your profile level one would be fairly

2146
01:17:57,360 --> 01:18:00,000
persuasive um the um

2147
01:18:00,000 --> 01:18:01,920
um i do think from a philosophical

2148
01:18:01,920 --> 01:18:03,840
perspective like which i mean is not

2149
01:18:03,840 --> 01:18:05,440
necessarily terminative the the header

2150
01:18:05,440 --> 01:18:08,320
is wrong um i mean the verb is connect

2151
01:18:08,320 --> 01:18:10,080
the the resource is the thing you want

2152
01:18:10,080 --> 01:18:13,280
to connect to and if if the if there if

2153
01:18:13,280 --> 01:18:15,760
the if the um if what you wanted to say

2154
01:18:15,760 --> 01:18:17,920
was um that the thing you're connecting

2155
01:18:17,920 --> 01:18:19,760
to is somehow the proxy then that

2156
01:18:19,760 --> 01:18:21,040
reaches the proxy then the verb should

2157
01:18:21,040 --> 01:18:22,960
not be connected to something else um

2158
01:18:22,960 --> 01:18:24,560
and you know we already have this worked

2159
01:18:24,560 --> 01:18:26,239
example of regular connect which is how

2160
01:18:26,239 --> 01:18:28,239
this works um so i i guess you know

2161
01:18:28,239 --> 01:18:29,840
that's like not disposed of necessarily

2162
01:18:29,840 --> 01:18:31,199
um you know one could argue that http

2163
01:18:31,199 --> 01:18:32,480
should not have been designed the way it

2164
01:18:32,480 --> 01:18:34,400
had been designed but um but like i

2165
01:18:34,400 --> 01:18:35,520
think you know for trying to if we're

2166
01:18:35,520 --> 01:18:37,040
aiming for aiming for some full so i

2167
01:18:37,040 --> 01:18:38,239
think that like

2168
01:18:38,239 --> 01:18:39,199
i think like the argument you're

2169
01:18:39,199 --> 01:18:40,239
offering that like this is like a pain

2170
01:18:40,239 --> 01:18:41,520
in the ass like i think someone has a

2171
01:18:41,520 --> 01:18:42,960
merit but i think the argument that like

2172
01:18:42,960 --> 01:18:44,960
you know um that it's that that like

2173
01:18:44,960 --> 01:18:46,560
philosophically it should be that i

2174
01:18:46,560 --> 01:18:48,640
think

2175
01:18:48,960 --> 01:18:53,120
i no i i agree with you uh i mainly care

2176
01:18:53,120 --> 01:18:56,320
because it was a pain to implement

2177
01:18:56,320 --> 01:18:57,440
at the end of the day that's what i'm

2178
01:18:57,440 --> 01:18:58,560
trying to minimize for i'm an

2179
01:18:58,560 --> 01:19:00,719
implementer the conceptual aspects of

2180
01:19:00,719 --> 01:19:03,360
http are not my personal

2181
01:19:03,360 --> 01:19:05,600
main concern

2182
01:19:05,600 --> 01:19:08,600
ben

2183
01:19:09,760 --> 01:19:12,320
waiting for audio okay

2184
01:19:12,320 --> 01:19:13,280
uh

2185
01:19:13,280 --> 01:19:14,480
so

2186
01:19:14,480 --> 01:19:16,719
just to remind people uh uri templates

2187
01:19:16,719 --> 01:19:20,320
uh mandate full unicode support so

2188
01:19:20,320 --> 01:19:22,800
uh a uri template can contain any

2189
01:19:22,800 --> 01:19:25,199
unicode code point which then has to be

2190
01:19:25,199 --> 01:19:27,840
uh escaped and normalized down to the

2191
01:19:27,840 --> 01:19:30,080
uri car set

2192
01:19:30,080 --> 01:19:31,280
um

2193
01:19:31,280 --> 01:19:32,719
that happens

2194
01:19:32,719 --> 01:19:35,440
after substitution so you can have

2195
01:19:35,440 --> 01:19:37,120
supremely weird

2196
01:19:37,120 --> 01:19:39,760
uh interactions here like a you know

2197
01:19:39,760 --> 01:19:43,360
like a rtl reversal unicode code point

2198
01:19:43,360 --> 01:19:45,360
that like sometimes appears depending on

2199
01:19:45,360 --> 01:19:48,159
the template contents or like there's

2200
01:19:48,159 --> 01:19:50,560
unlimited weirdness there

2201
01:19:50,560 --> 01:19:52,719
also ui templates can template any part

2202
01:19:52,719 --> 01:19:54,800
of the uri you can like template the

2203
01:19:54,800 --> 01:19:56,560
scheme you could have like template the

2204
01:19:56,560 --> 01:19:58,400
port number you could have like the

2205
01:19:58,400 --> 01:20:01,120
connect udp port target port port number

2206
01:20:01,120 --> 01:20:03,280
actually be the origin port number or

2207
01:20:03,280 --> 01:20:05,920
you could have be a sub domain of the or

2208
01:20:05,920 --> 01:20:08,480
even part of a domain you could register

2209
01:20:08,480 --> 01:20:11,280
all 65 000 domains like

2210
01:20:11,280 --> 01:20:13,440
anything is possible with uri templates

2211
01:20:13,440 --> 01:20:15,360
um

2212
01:20:15,360 --> 01:20:17,679
it's just a little bit of a warning

2213
01:20:17,679 --> 01:20:18,880
i'll just note that there is an

2214
01:20:18,880 --> 01:20:21,600
intermediary there's a middle ground

2215
01:20:21,600 --> 01:20:24,000
option here where

2216
01:20:24,000 --> 01:20:26,080
we say that that everything has to go in

2217
01:20:26,080 --> 01:20:29,920
the uri and we actually specify the uri

2218
01:20:29,920 --> 01:20:31,600
structure a little bit

2219
01:20:31,600 --> 01:20:35,120
rather than just templating it

2220
01:20:35,440 --> 01:20:36,320
cool

2221
01:20:36,320 --> 01:20:40,000
thanks uh tommy

2222
01:20:43,360 --> 01:20:45,280
waiting for audio cool

2223
01:20:45,280 --> 01:20:47,280
um

2224
01:20:47,280 --> 01:20:48,320
yeah so

2225
01:20:48,320 --> 01:20:49,679
i think i agree with what people are

2226
01:20:49,679 --> 01:20:52,000
saying um

2227
01:20:52,000 --> 01:20:53,520
implementations that support dough

2228
01:20:53,520 --> 01:20:56,400
already need to support uri templates um

2229
01:20:56,400 --> 01:20:58,320
people who are doing mask probably also

2230
01:20:58,320 --> 01:20:59,840
support dough

2231
01:20:59,840 --> 01:21:01,840
so it shouldn't be too much of a new

2232
01:21:01,840 --> 01:21:04,320
lift um

2233
01:21:04,320 --> 01:21:06,960
to ben's point about weird uri template

2234
01:21:06,960 --> 01:21:10,719
types i mean i think we you know

2235
01:21:10,719 --> 01:21:13,520
if it hurts to do that don't put your

2236
01:21:13,520 --> 01:21:14,880
things in the scheme we should probably

2237
01:21:14,880 --> 01:21:16,719
have some constraints here to say like

2238
01:21:16,719 --> 01:21:18,239
hey we're already using the scheme we're

2239
01:21:18,239 --> 01:21:20,320
already using the authority in the port

2240
01:21:20,320 --> 01:21:22,239
so like you can't put

2241
01:21:22,239 --> 01:21:25,440
your target there sorry

2242
01:21:27,600 --> 01:21:29,840
for connect udp i could i can see where

2243
01:21:29,840 --> 01:21:31,440
you're coming from here but when we go

2244
01:21:31,440 --> 01:21:33,440
into connect ip as you alluded to and

2245
01:21:33,440 --> 01:21:35,600
how we want to kind of align these

2246
01:21:35,600 --> 01:21:38,639
i think it's a stronger argument for why

2247
01:21:38,639 --> 01:21:42,000
these properties are part of

2248
01:21:42,000 --> 01:21:43,679
the resource

2249
01:21:43,679 --> 01:21:44,639
because you know in something like

2250
01:21:44,639 --> 01:21:46,639
connect udp i could very well have a

2251
01:21:46,639 --> 01:21:48,960
generic vpn that doesn't have any

2252
01:21:48,960 --> 01:21:50,560
constraints

2253
01:21:50,560 --> 01:21:52,159
on what i'm connecting to it's totally

2254
01:21:52,159 --> 01:21:53,840
open-ended and i have one that only

2255
01:21:53,840 --> 01:21:56,719
forwards sctp packets or whatever and

2256
01:21:56,719 --> 01:21:58,000
like those

2257
01:21:58,000 --> 01:21:59,199
are very

2258
01:21:59,199 --> 01:22:00,960
reasonably different resources than i'm

2259
01:22:00,960 --> 01:22:02,159
accessing

2260
01:22:02,159 --> 01:22:03,600
and so i do think

2261
01:22:03,600 --> 01:22:04,800
the logic

2262
01:22:04,800 --> 01:22:06,480
is clearer there but then you can kind

2263
01:22:06,480 --> 01:22:08,880
of back apply it into connect udp and

2264
01:22:08,880 --> 01:22:09,679
say

2265
01:22:09,679 --> 01:22:11,360
yeah this really is

2266
01:22:11,360 --> 01:22:14,000
the resource you're connecting to and

2267
01:22:14,000 --> 01:22:16,239
if you wanted to split up

2268
01:22:16,239 --> 01:22:17,600
your server to

2269
01:22:17,600 --> 01:22:19,120
think of it as different resources that

2270
01:22:19,120 --> 01:22:20,400
you're accessing have different access

2271
01:22:20,400 --> 01:22:23,199
control that way it it would make sense

2272
01:22:23,199 --> 01:22:25,920
so i think we should leave it in the uri

2273
01:22:25,920 --> 01:22:28,880
and maybe just add some constraints to

2274
01:22:28,880 --> 01:22:30,480
the crazy things you could do with a

2275
01:22:30,480 --> 01:22:33,600
template that are just wrong

2276
01:22:33,600 --> 01:22:34,639
okay

2277
01:22:34,639 --> 01:22:37,600
uh thank you yeah sounds like from the

2278
01:22:37,600 --> 01:22:39,360
folks in the mic line there's some

2279
01:22:39,360 --> 01:22:40,800
interesting keeping this in your eye

2280
01:22:40,800 --> 01:22:42,000
templates

2281
01:22:42,000 --> 01:22:44,800
all right moving on to

2282
01:22:44,800 --> 01:22:48,800
our next and final issue for today

2283
01:22:48,800 --> 01:22:52,639
um in so in connect udp since now we are

2284
01:22:52,639 --> 01:22:54,480
uh

2285
01:22:54,480 --> 01:22:56,960
so for for h2 and h3 we use extended

2286
01:22:56,960 --> 01:22:59,920
connect uh with uh the pro the colon

2287
01:22:59,920 --> 01:23:02,080
protocol uh pseudo header

2288
01:23:02,080 --> 01:23:04,719
uh the method is connect the protocol is

2289
01:23:04,719 --> 01:23:07,360
connect udp

2290
01:23:07,360 --> 01:23:10,719
what do we do for http one um right now

2291
01:23:10,719 --> 01:23:13,280
for http one we use uh

2292
01:23:13,280 --> 01:23:15,520
the upgrade mechanism

2293
01:23:15,520 --> 01:23:18,000
and we so at the end of the day this

2294
01:23:18,000 --> 01:23:20,000
mimics websocket which is the only

2295
01:23:20,000 --> 01:23:22,320
standardized use of extended connect

2296
01:23:22,320 --> 01:23:23,840
that i'm aware of

2297
01:23:23,840 --> 01:23:25,840
and so we say okay

2298
01:23:25,840 --> 01:23:28,480
same as what socket you can

2299
01:23:28,480 --> 01:23:32,400
do connect udp over h1 by using upgrade

2300
01:23:32,400 --> 01:23:34,800
but the question is what method do you

2301
01:23:34,800 --> 01:23:38,159
use because when you're using upgrade

2302
01:23:38,159 --> 01:23:39,760
conceptually you don't look at the

2303
01:23:39,760 --> 01:23:41,520
method you just look at what you're

2304
01:23:41,520 --> 01:23:44,960
upgrading the only kind of purpose is to

2305
01:23:44,960 --> 01:23:46,080
say

2306
01:23:46,080 --> 01:23:46,880
oh

2307
01:23:46,880 --> 01:23:49,679
what happens if you accidentally hit a

2308
01:23:49,679 --> 01:23:52,000
server maybe who doesn't support upgrade

2309
01:23:52,000 --> 01:23:52,960
like

2310
01:23:52,960 --> 01:23:54,880
what flavor of failure would you prefer

2311
01:23:54,880 --> 01:23:56,880
to have in that scenario

2312
01:23:56,880 --> 01:23:58,080
um

2313
01:23:58,080 --> 01:24:00,560
and so right now the connect udp draft

2314
01:24:00,560 --> 01:24:02,719
says you use connect with upgrade

2315
01:24:02,719 --> 01:24:05,199
websocket says you use get with upgrade

2316
01:24:05,199 --> 01:24:07,199
um

2317
01:24:07,199 --> 01:24:09,760
which one should we use here

2318
01:24:09,760 --> 01:24:13,199
i personally don't have an opinion uh

2319
01:24:13,199 --> 01:24:17,000
do folks have thoughts

2320
01:24:29,440 --> 01:24:32,000
all right well if uh no one cares we can

2321
01:24:32,000 --> 01:24:34,560
uh keep it as we have it today in the

2322
01:24:34,560 --> 01:24:37,280
draft and we can always uh change that

2323
01:24:37,280 --> 01:24:40,320
later uh martin

2324
01:24:42,400 --> 01:24:46,159
so if i understand correctly um

2325
01:24:46,239 --> 01:24:48,400
if if we ran into a server didn't that

2326
01:24:48,400 --> 01:24:49,520
didn't

2327
01:24:49,520 --> 01:24:50,639
uh

2328
01:24:50,639 --> 01:24:52,480
understand upgrade then we would just

2329
01:24:52,480 --> 01:24:53,600
end up

2330
01:24:53,600 --> 01:24:55,040
sending datagrams that would become

2331
01:24:55,040 --> 01:24:56,800
random bits somewhere and a tcp

2332
01:24:56,800 --> 01:24:59,679
connection coming out the proxy whereas

2333
01:24:59,679 --> 01:25:01,679
with get it would just sort of return a

2334
01:25:01,679 --> 01:25:04,560
404 or something correct

2335
01:25:04,560 --> 01:25:06,880
um

2336
01:25:08,080 --> 01:25:11,360
let's see well with get you would end up

2337
01:25:11,360 --> 01:25:13,840
sending a get with a body which is

2338
01:25:13,840 --> 01:25:17,840
technically not allowed uh so

2339
01:25:17,840 --> 01:25:20,159
yeah i guess that that would probably be

2340
01:25:20,159 --> 01:25:23,199
it where with get you would end up well

2341
01:25:23,199 --> 01:25:25,040
not necessarily a 4-4 because someone

2342
01:25:25,040 --> 01:25:26,880
could sure yeah

2343
01:25:26,880 --> 01:25:28,080
yeah

2344
01:25:28,080 --> 01:25:29,360
some error code

2345
01:25:29,360 --> 01:25:32,000
i mean that seems strictly better than

2346
01:25:32,000 --> 01:25:33,280
like this

2347
01:25:33,280 --> 01:25:36,000
undefined behavior with connect not

2348
01:25:36,000 --> 01:25:37,600
undefined but just the sort of spewing

2349
01:25:37,600 --> 01:25:39,040
random bits out

2350
01:25:39,040 --> 01:25:41,520
yeah well i mean uh from uh and actually

2351
01:25:41,520 --> 01:25:46,080
uh so connect uh you send a uh

2352
01:25:46,080 --> 01:25:48,320
http one connect you send an authority

2353
01:25:48,320 --> 01:25:50,080
without a path

2354
01:25:50,080 --> 01:25:52,400
whereas here you would send connect

2355
01:25:52,400 --> 01:25:55,679
with there would be a flash in there uh

2356
01:25:55,679 --> 01:25:57,280
and

2357
01:25:57,280 --> 01:25:58,239
now you know

2358
01:25:58,239 --> 01:25:59,920
it's it's always hard to imagine what

2359
01:25:59,920 --> 01:26:01,679
kinds of bugs exist but someone would

2360
01:26:01,679 --> 01:26:03,520
probably sending what's with this flash

2361
01:26:03,520 --> 01:26:05,679
to get at her info or something

2362
01:26:05,679 --> 01:26:07,239
so i'd expect that it would fail

2363
01:26:07,239 --> 01:26:10,400
spectacularly at the dns resolution or

2364
01:26:10,400 --> 01:26:12,800
trying to parse the ip stage as opposed

2365
01:26:12,800 --> 01:26:13,920
to

2366
01:26:13,920 --> 01:26:17,199
trying to create an an outbound tcp

2367
01:26:17,199 --> 01:26:18,639
connection

2368
01:26:18,639 --> 01:26:19,760
um

2369
01:26:19,760 --> 01:26:22,480
just to that something well i i don't

2370
01:26:22,480 --> 01:26:24,560
know we need to like analyze the failure

2371
01:26:24,560 --> 01:26:27,440
path here but um and you know

2372
01:26:27,440 --> 01:26:29,360
other people written more hp departures

2373
01:26:29,360 --> 01:26:31,600
than me but like i mean i would just say

2374
01:26:31,600 --> 01:26:33,360
just whatever has a more deterministic

2375
01:26:33,360 --> 01:26:35,760
and less goofy failure path would be the

2376
01:26:35,760 --> 01:26:37,920
way to go here thanks i

2377
01:26:37,920 --> 01:26:39,600
totally agree because

2378
01:26:39,600 --> 01:26:41,840
what we the new thing we build will work

2379
01:26:41,840 --> 01:26:43,920
whatever the connect the method we use

2380
01:26:43,920 --> 01:26:46,960
it's just if we hit right so maybe maybe

2381
01:26:46,960 --> 01:26:48,639
we just need to do some homework and hit

2382
01:26:48,639 --> 01:26:51,600
a bunch of existing servers with what it

2383
01:26:51,600 --> 01:26:53,679
was this would look like

2384
01:26:53,679 --> 01:26:55,920
and see in what way

2385
01:26:55,920 --> 01:27:00,679
things things fail uh eric

2386
01:27:04,080 --> 01:27:05,600
it seems like if we're going to be using

2387
01:27:05,600 --> 01:27:07,280
extended connect for a bunch of things

2388
01:27:07,280 --> 01:27:08,639
and we may want to be

2389
01:27:08,639 --> 01:27:09,760
going to figure out what we're going to

2390
01:27:09,760 --> 01:27:11,360
be happy with living with

2391
01:27:11,360 --> 01:27:13,280
long term there and pick something and

2392
01:27:13,280 --> 01:27:15,040
be consistent i guess another option

2393
01:27:15,040 --> 01:27:16,560
here would be a

2394
01:27:16,560 --> 01:27:20,000
new method like connectx

2395
01:27:20,320 --> 01:27:22,400
um

2396
01:27:22,400 --> 01:27:24,719
agreed i think we should be consistent

2397
01:27:24,719 --> 01:27:26,480
between connect udp and connect ip and

2398
01:27:26,480 --> 01:27:30,320
other things uh i would prefer not to

2399
01:27:30,320 --> 01:27:31,840
create a new method because that's

2400
01:27:31,840 --> 01:27:33,679
always work and

2401
01:27:33,679 --> 01:27:35,199
um but

2402
01:27:35,199 --> 01:27:36,320
yeah let's let's definitely be

2403
01:27:36,320 --> 01:27:39,840
consistent uh empty

2404
01:27:42,960 --> 01:27:46,080
so one option here is to ask http biz

2405
01:27:46,080 --> 01:27:48,000
what the answer is because

2406
01:27:48,000 --> 01:27:49,120
this is a

2407
01:27:49,120 --> 01:27:51,920
they currently are examining

2408
01:27:51,920 --> 01:27:53,280
in some part

2409
01:27:53,280 --> 01:27:56,000
when with the http 3 integration

2410
01:27:56,000 --> 01:27:58,880
or extended connect

2411
01:27:58,880 --> 01:28:01,440
maybe this is a generic problem for http

2412
01:28:01,440 --> 01:28:04,239
and not one that mask needs to

2413
01:28:04,239 --> 01:28:06,159
preempt

2414
01:28:06,159 --> 01:28:09,280
that sounds great to me uh okay uh

2415
01:28:09,280 --> 01:28:11,679
unless someone dislikes that idea i'm

2416
01:28:11,679 --> 01:28:14,080
gonna take the action item to email the

2417
01:28:14,080 --> 01:28:15,120
http

2418
01:28:15,120 --> 01:28:16,080
list

2419
01:28:16,080 --> 01:28:18,560
asking them what they think

2420
01:28:18,560 --> 01:28:20,960
um and i see some plus ones in there

2421
01:28:20,960 --> 01:28:24,560
perfect all right um and this

2422
01:28:24,560 --> 01:28:26,840
brings us to the end of this

2423
01:28:26,840 --> 01:28:29,840
presentation uh thanks everyone for

2424
01:28:29,840 --> 01:28:31,600
listening

2425
01:28:31,600 --> 01:28:33,440
and uh

2426
01:28:33,440 --> 01:28:35,199
good uh good luck until dawn for

2427
01:28:35,199 --> 01:28:37,199
everyone who's with me on the west coast

2428
01:28:37,199 --> 01:28:39,679
all right thanks everyone and

2429
01:28:39,679 --> 01:28:43,159
over to you tommy

2430
01:29:05,760 --> 01:29:07,600
all right

2431
01:29:07,600 --> 01:29:10,320
okay hello everyone um

2432
01:29:10,320 --> 01:29:12,960
i will be presenting uh

2433
01:29:12,960 --> 01:29:15,600
a new unified draft for

2434
01:29:15,600 --> 01:29:20,960
ip um ip proxy support for http

2435
01:29:21,679 --> 01:29:22,960
all right so

2436
01:29:22,960 --> 01:29:26,000
uh connect ip i think we've heard this

2437
01:29:26,000 --> 01:29:27,760
many times bounced around the working

2438
01:29:27,760 --> 01:29:29,360
group before

2439
01:29:29,360 --> 01:29:32,559
why why is this different

2440
01:29:33,040 --> 01:29:35,520
and mainly the difference is that we

2441
01:29:35,520 --> 01:29:37,679
have had

2442
01:29:37,679 --> 01:29:39,360
many different

2443
01:29:39,360 --> 01:29:41,280
versions of the proposals from different

2444
01:29:41,280 --> 01:29:42,719
authors

2445
01:29:42,719 --> 01:29:44,880
and over the past couple months those

2446
01:29:44,880 --> 01:29:47,440
different authors and myself have tried

2447
01:29:47,440 --> 01:29:49,760
to join forces and come up with a single

2448
01:29:49,760 --> 01:29:51,679
proposal for what connect ip should look

2449
01:29:51,679 --> 01:29:53,120
like

2450
01:29:53,120 --> 01:29:53,840
so

2451
01:29:53,840 --> 01:29:57,360
yay for unification

2452
01:29:58,080 --> 01:29:58,880
so

2453
01:29:58,880 --> 01:30:00,639
just to recap

2454
01:30:00,639 --> 01:30:03,120
the motivation for all of the connect ip

2455
01:30:03,120 --> 01:30:05,120
work in general

2456
01:30:05,120 --> 01:30:07,120
we want to be allowing

2457
01:30:07,120 --> 01:30:10,159
you know truly generic ip proxy through

2458
01:30:10,159 --> 01:30:12,159
an http proxy

2459
01:30:12,159 --> 01:30:14,000
not just what we get from connect and

2460
01:30:14,000 --> 01:30:15,600
connect udp

2461
01:30:15,600 --> 01:30:18,639
which is limited to tcp proxy and udp

2462
01:30:18,639 --> 01:30:20,880
proxy

2463
01:30:20,880 --> 01:30:22,560
and this

2464
01:30:22,560 --> 01:30:24,719
if we look at the requirements document

2465
01:30:24,719 --> 01:30:27,120
which was adopted and worked on by this

2466
01:30:27,120 --> 01:30:28,480
group

2467
01:30:28,480 --> 01:30:30,800
a lot of these use cases are what we

2468
01:30:30,800 --> 01:30:33,600
traditionally think of as vpns

2469
01:30:33,600 --> 01:30:35,679
whether those are

2470
01:30:35,679 --> 01:30:38,239
kind of just a user using a vpn for

2471
01:30:38,239 --> 01:30:39,840
privacy or remote access into an

2472
01:30:39,840 --> 01:30:41,679
enterprise

2473
01:30:41,679 --> 01:30:44,320
site to site vpn

2474
01:30:44,320 --> 01:30:46,239
that's a lot of the driving use cases

2475
01:30:46,239 --> 01:30:49,440
that constrain the space

2476
01:30:49,440 --> 01:30:52,239
but you can also think of this as just a

2477
01:30:52,239 --> 01:30:54,880
connect-like proxy for an arbitrary ip

2478
01:30:54,880 --> 01:30:56,320
protocol

2479
01:30:56,320 --> 01:30:58,639
and to that end you can have a lot of

2480
01:30:58,639 --> 01:31:01,840
similarities to connect

2481
01:31:01,840 --> 01:31:04,159
and i think as the authors looked at

2482
01:31:04,159 --> 01:31:06,719
collectively a lot of the differences

2483
01:31:06,719 --> 01:31:08,800
in perspectives were because

2484
01:31:08,800 --> 01:31:09,760
we had

2485
01:31:09,760 --> 01:31:11,280
some perspectives coming from the purely

2486
01:31:11,280 --> 01:31:14,159
vpn side and some coming from the

2487
01:31:14,159 --> 01:31:15,920
uh side of saying this should be a

2488
01:31:15,920 --> 01:31:17,199
connect

2489
01:31:17,199 --> 01:31:19,600
protocol for arbitrary ip so i think

2490
01:31:19,600 --> 01:31:21,040
we've tried to reconcile those two

2491
01:31:21,040 --> 01:31:22,560
worlds and

2492
01:31:22,560 --> 01:31:24,000
end up with something that is fairly

2493
01:31:24,000 --> 01:31:27,040
simple and straightforward

2494
01:31:28,719 --> 01:31:32,320
so as we discussed um with the authors

2495
01:31:32,320 --> 01:31:35,040
as we were coming together here

2496
01:31:35,040 --> 01:31:36,480
we um

2497
01:31:36,480 --> 01:31:38,080
agreed on a couple things as the scope

2498
01:31:38,080 --> 01:31:38,960
of this

2499
01:31:38,960 --> 01:31:41,120
so

2500
01:31:41,120 --> 01:31:42,800
you know right now it's defined as an

2501
01:31:42,800 --> 01:31:45,040
extended connect protocol mirroring

2502
01:31:45,040 --> 01:31:46,960
connect udp

2503
01:31:46,960 --> 01:31:48,800
we believe that if connect udp changes

2504
01:31:48,800 --> 01:31:50,400
its approach

2505
01:31:50,400 --> 01:31:53,920
this should also change its approach so

2506
01:31:53,920 --> 01:31:55,520
we just want to keep those things

2507
01:31:55,520 --> 01:31:58,000
aligned as much as possible we want to

2508
01:31:58,000 --> 01:32:01,280
follow the best practice there

2509
01:32:02,239 --> 01:32:03,280
for

2510
01:32:03,280 --> 01:32:04,960
kind of simplicity getting the base of

2511
01:32:04,960 --> 01:32:07,600
what connect ip is the proxy always is

2512
01:32:07,600 --> 01:32:10,880
dealing with entire ip packets

2513
01:32:10,880 --> 01:32:13,199
that are contained within the content of

2514
01:32:13,199 --> 01:32:16,480
http datagrams

2515
01:32:16,800 --> 01:32:18,880
compression could be done in some future

2516
01:32:18,880 --> 01:32:21,520
draft but the base definition is always

2517
01:32:21,520 --> 01:32:25,400
entire ip packets

2518
01:32:26,000 --> 01:32:28,239
then another key thing

2519
01:32:28,239 --> 01:32:30,159
that the authors agreed upon was the

2520
01:32:30,159 --> 01:32:32,639
fact that

2521
01:32:32,639 --> 01:32:33,840
it sounds quite simple when you think

2522
01:32:33,840 --> 01:32:34,719
about it

2523
01:32:34,719 --> 01:32:37,040
the connect ip document should be

2524
01:32:37,040 --> 01:32:40,880
concerned only with things that exist in

2525
01:32:40,880 --> 01:32:43,760
an ip header itself

2526
01:32:43,760 --> 01:32:45,440
and that's the kind of the unit that

2527
01:32:45,440 --> 01:32:47,520
they are operating on

2528
01:32:47,520 --> 01:32:48,560
so

2529
01:32:48,560 --> 01:32:51,040
the different endpoints can request and

2530
01:32:51,040 --> 01:32:52,880
assign and route

2531
01:32:52,880 --> 01:32:55,120
based on fields that exist in the ip

2532
01:32:55,120 --> 01:32:56,719
header so that's the source address

2533
01:32:56,719 --> 01:32:58,960
that's the destination address

2534
01:32:58,960 --> 01:33:02,080
and that's the next protocol

2535
01:33:02,080 --> 01:33:04,080
we could also add other things

2536
01:33:04,080 --> 01:33:05,840
in if people decided it was necessary

2537
01:33:05,840 --> 01:33:08,639
but these are kind of the core elements

2538
01:33:08,639 --> 01:33:11,440
that make sense

2539
01:33:12,000 --> 01:33:14,639
what is out of scope is

2540
01:33:14,639 --> 01:33:16,639
trying to do any ip header compression

2541
01:33:16,639 --> 01:33:20,239
now that should be an extension

2542
01:33:20,320 --> 01:33:22,400
things like icmp signaling we agreed

2543
01:33:22,400 --> 01:33:25,040
should probably be another document

2544
01:33:25,040 --> 01:33:25,920
um

2545
01:33:25,920 --> 01:33:27,600
that would be useful extension to have

2546
01:33:27,600 --> 01:33:30,080
both for ip and udp

2547
01:33:30,080 --> 01:33:32,719
connect methods

2548
01:33:32,719 --> 01:33:34,400
and there are also fancy things we could

2549
01:33:34,400 --> 01:33:36,800
do in which we could get a bit more

2550
01:33:36,800 --> 01:33:38,960
next protocol aware and understand what

2551
01:33:38,960 --> 01:33:41,360
we do for different port allow

2552
01:33:41,360 --> 01:33:43,440
lists for different vpns but that should

2553
01:33:43,440 --> 01:33:46,400
also be an extension

2554
01:33:47,679 --> 01:33:50,080
okay so what actually is defined in this

2555
01:33:50,080 --> 01:33:52,000
document and it's not too much

2556
01:33:52,000 --> 01:33:53,840
thankfully

2557
01:33:53,840 --> 01:33:56,400
first there's the um the upgrade or

2558
01:33:56,400 --> 01:33:59,360
protocol token connect ip which mirrors

2559
01:33:59,360 --> 01:34:00,880
the stuff that david was just talking

2560
01:34:00,880 --> 01:34:02,800
about as connect utp

2561
01:34:02,800 --> 01:34:06,400
so that's really just a lift and rename

2562
01:34:06,400 --> 01:34:08,560
currently it's also using a uri template

2563
01:34:08,560 --> 01:34:10,400
to be able to scope

2564
01:34:10,400 --> 01:34:13,840
things down if necessary

2565
01:34:13,840 --> 01:34:14,960
now

2566
01:34:14,960 --> 01:34:16,560
in this case it doesn't make sense to

2567
01:34:16,560 --> 01:34:17,679
talk about

2568
01:34:17,679 --> 01:34:18,960
a target

2569
01:34:18,960 --> 01:34:21,760
name and a target or a target host in a

2570
01:34:21,760 --> 01:34:24,639
target port because there are no ports

2571
01:34:24,639 --> 01:34:26,639
instead you have essentially the target

2572
01:34:26,639 --> 01:34:28,960
host that you want if you have one or

2573
01:34:28,960 --> 01:34:30,960
you can have none

2574
01:34:30,960 --> 01:34:34,400
and a target next protocol if there is

2575
01:34:34,400 --> 01:34:36,320
one or it can just be generic and get

2576
01:34:36,320 --> 01:34:38,000
anything

2577
01:34:38,000 --> 01:34:39,120
there are

2578
01:34:39,120 --> 01:34:41,600
a couple different capsules defined

2579
01:34:41,600 --> 01:34:44,000
this is using capsules uh really as just

2580
01:34:44,000 --> 01:34:46,480
a negotiation

2581
01:34:46,480 --> 01:34:49,440
mechanism so that you can

2582
01:34:49,440 --> 01:34:51,920
after the time of request

2583
01:34:51,920 --> 01:34:54,000
over the stream be able to add and

2584
01:34:54,000 --> 01:34:56,639
remove addresses and routes

2585
01:34:56,639 --> 01:34:58,960
and so there are three capsules defined

2586
01:34:58,960 --> 01:35:00,880
only there's an address assign which

2587
01:35:00,880 --> 01:35:02,960
allows one endpoint to tell the other

2588
01:35:02,960 --> 01:35:03,920
side

2589
01:35:03,920 --> 01:35:06,960
you can send from this address when you

2590
01:35:06,960 --> 01:35:08,560
want to generate a packet

2591
01:35:08,560 --> 01:35:09,840
you can also have an address request

2592
01:35:09,840 --> 01:35:11,520
which is i would like to send from this

2593
01:35:11,520 --> 01:35:13,199
address or this

2594
01:35:13,199 --> 01:35:15,520
subnet

2595
01:35:15,520 --> 01:35:16,639
and then

2596
01:35:16,639 --> 01:35:18,320
in the same way that address assign can

2597
01:35:18,320 --> 01:35:19,440
define

2598
01:35:19,440 --> 01:35:21,360
the source address for packets a route

2599
01:35:21,360 --> 01:35:22,960
advertisement capsule defines the

2600
01:35:22,960 --> 01:35:25,360
destination that a site is allowed to

2601
01:35:25,360 --> 01:35:26,800
send so you can say you are allowed to

2602
01:35:26,800 --> 01:35:30,080
send to anything essentially that falls

2603
01:35:30,080 --> 01:35:31,440
within this routing table i'm going to

2604
01:35:31,440 --> 01:35:33,199
give you

2605
01:35:33,199 --> 01:35:34,480
and then the last thing that's defined

2606
01:35:34,480 --> 01:35:36,960
in the document is

2607
01:35:36,960 --> 01:35:38,560
currently it's called the datagram

2608
01:35:38,560 --> 01:35:40,800
format because

2609
01:35:40,800 --> 01:35:43,280
the http datagrams document still has

2610
01:35:43,280 --> 01:35:45,440
these um but

2611
01:35:45,440 --> 01:35:47,199
essentially it's just saying the thing

2612
01:35:47,199 --> 01:35:49,280
that goes within a datagram

2613
01:35:49,280 --> 01:35:51,440
is a full ip packet

2614
01:35:51,440 --> 01:35:52,400
that's it

2615
01:35:52,400 --> 01:35:53,920
extensions can do something else if they

2616
01:35:53,920 --> 01:35:57,080
need to

2617
01:35:57,920 --> 01:36:01,040
um one one of the concepts in here that

2618
01:36:01,040 --> 01:36:02,239
we discussed a lot that isn't

2619
01:36:02,239 --> 01:36:04,000
necessarily um

2620
01:36:04,000 --> 01:36:06,480
immediately obvious is that

2621
01:36:06,480 --> 01:36:08,800
there are uses for limiting the routing

2622
01:36:08,800 --> 01:36:11,199
and being able to communicate that you

2623
01:36:11,199 --> 01:36:13,520
aren't able to route a full tunnel

2624
01:36:13,520 --> 01:36:16,159
so a lot of the the simplest vpn use

2625
01:36:16,159 --> 01:36:18,320
cases that we think about are

2626
01:36:18,320 --> 01:36:20,000
essentially when a

2627
01:36:20,000 --> 01:36:22,480
client device receives

2628
01:36:22,480 --> 01:36:25,199
a single address or a prefix to send

2629
01:36:25,199 --> 01:36:26,480
from and then it can send to everything

2630
01:36:26,480 --> 01:36:28,080
in the world

2631
01:36:28,080 --> 01:36:30,080
however there are a number of different

2632
01:36:30,080 --> 01:36:31,600
use cases where

2633
01:36:31,600 --> 01:36:33,440
that can be more restricted maybe you

2634
01:36:33,440 --> 01:36:36,639
have a split tunnel vpn or you're just

2635
01:36:36,639 --> 01:36:38,080
only trying to reach something very

2636
01:36:38,080 --> 01:36:40,000
limited on the other end on the other

2637
01:36:40,000 --> 01:36:41,440
side

2638
01:36:41,440 --> 01:36:42,159
so

2639
01:36:42,159 --> 01:36:44,239
there are different ways you can limit

2640
01:36:44,239 --> 01:36:46,159
the scope of a tunnel

2641
01:36:46,159 --> 01:36:47,199
you can

2642
01:36:47,199 --> 01:36:49,119
in the request specify that you only

2643
01:36:49,119 --> 01:36:51,040
care about a specific

2644
01:36:51,040 --> 01:36:53,840
target and protocol

2645
01:36:54,000 --> 01:36:56,080
either endpoint can also limit what the

2646
01:36:56,080 --> 01:36:57,920
other can send from

2647
01:36:57,920 --> 01:36:59,600
with its address assign and then the

2648
01:36:59,600 --> 01:37:02,239
route advertisement capsule itself can

2649
01:37:02,239 --> 01:37:05,040
limit the set of destination addresses

2650
01:37:05,040 --> 01:37:08,239
that an endpoint can send to

2651
01:37:08,239 --> 01:37:10,719
and besides being a good mechanism for

2652
01:37:10,719 --> 01:37:12,320
access control and being very clear

2653
01:37:12,320 --> 01:37:14,080
about what's going to be allowed

2654
01:37:14,080 --> 01:37:17,040
this also allows a proxy

2655
01:37:17,040 --> 01:37:19,199
um that's operating a bit more like a

2656
01:37:19,199 --> 01:37:21,440
normal connect or connect connect udp

2657
01:37:21,440 --> 01:37:23,840
proxy to be able to share source ip

2658
01:37:23,840 --> 01:37:26,480
addresses between multiple clients

2659
01:37:26,480 --> 01:37:27,760
so if

2660
01:37:27,760 --> 01:37:29,760
one client really only is trying to talk

2661
01:37:29,760 --> 01:37:32,159
to a specific host

2662
01:37:32,159 --> 01:37:35,280
or a specific subnet um maybe it's

2663
01:37:35,280 --> 01:37:37,679
it's not trying to open up

2664
01:37:37,679 --> 01:37:39,119
a completely

2665
01:37:39,119 --> 01:37:42,639
uh full tunnel scenario then you don't

2666
01:37:42,639 --> 01:37:44,880
need the same type of

2667
01:37:44,880 --> 01:37:46,480
ip address provisioning requirements

2668
01:37:46,480 --> 01:37:50,239
that you would as a normal vpn

2669
01:37:50,239 --> 01:37:52,239
so that's essentially the protocol as it

2670
01:37:52,239 --> 01:37:54,239
stands i have a couple examples here so

2671
01:37:54,239 --> 01:37:56,639
we can just see how this looks so the

2672
01:37:56,639 --> 01:37:58,719
traditional vpn setup

2673
01:37:58,719 --> 01:38:01,600
i have a client behind my proxy my vpn

2674
01:38:01,600 --> 01:38:03,199
server

2675
01:38:03,199 --> 01:38:06,480
it has some ip address ipc

2676
01:38:06,480 --> 01:38:08,639
that can go out to the world and talk to

2677
01:38:08,639 --> 01:38:10,880
any arbitrary address so the way this

2678
01:38:10,880 --> 01:38:12,960
would look is

2679
01:38:12,960 --> 01:38:15,199
the client starts at connect ip

2680
01:38:15,199 --> 01:38:17,119
currently it registers this datagram

2681
01:38:17,119 --> 01:38:18,719
context

2682
01:38:18,719 --> 01:38:20,159
that

2683
01:38:20,159 --> 01:38:23,839
may and hopefully will change

2684
01:38:24,400 --> 01:38:25,840
then the other side can just send back

2685
01:38:25,840 --> 01:38:27,199
to 200

2686
01:38:27,199 --> 01:38:29,520
and say hey you can send from this

2687
01:38:29,520 --> 01:38:32,080
address and you can send to

2688
01:38:32,080 --> 01:38:34,080
pretty much anything um you want for

2689
01:38:34,080 --> 01:38:36,880
that address family

2690
01:38:38,800 --> 01:38:40,639
and then at that point

2691
01:38:40,639 --> 01:38:42,639
the two sides can send datagrams back

2692
01:38:42,639 --> 01:38:44,239
and forth to each other and those are

2693
01:38:44,239 --> 01:38:47,840
full ip packets so this is quite simple

2694
01:38:47,840 --> 01:38:49,040
you could also have a case where the

2695
01:38:49,040 --> 01:38:50,000
client

2696
01:38:50,000 --> 01:38:51,600
is only interested in talking to a

2697
01:38:51,600 --> 01:38:53,360
single host on the other end maybe it's

2698
01:38:53,360 --> 01:38:55,440
just trying to open up a sctp flow for

2699
01:38:55,440 --> 01:38:56,800
some reason

2700
01:38:56,800 --> 01:38:59,360
and in this case

2701
01:38:59,360 --> 01:39:01,040
the protocol works exactly the same

2702
01:39:01,040 --> 01:39:03,360
except you can get back

2703
01:39:03,360 --> 01:39:05,440
um a very limited

2704
01:39:05,440 --> 01:39:07,600
route um that only is the thing that you

2705
01:39:07,600 --> 01:39:11,400
requested to connect to

2706
01:39:12,639 --> 01:39:15,360
and at that point the payloads are still

2707
01:39:15,360 --> 01:39:17,199
full ip packets but they're only going

2708
01:39:17,199 --> 01:39:19,280
to be ip packets that are going to that

2709
01:39:19,280 --> 01:39:22,239
one particular host

2710
01:39:22,400 --> 01:39:24,480
and then the last example we have here

2711
01:39:24,480 --> 01:39:27,360
is just showing um

2712
01:39:27,360 --> 01:39:28,159
how

2713
01:39:28,159 --> 01:39:29,679
you could use this even if you're

2714
01:39:29,679 --> 01:39:32,480
connecting to a specific

2715
01:39:32,480 --> 01:39:33,440
host

2716
01:39:33,440 --> 01:39:35,199
that you can receive different address

2717
01:39:35,199 --> 01:39:36,400
families

2718
01:39:36,400 --> 01:39:38,080
to send from because we like supporting

2719
01:39:38,080 --> 01:39:40,080
both v4 and v6 and you can get a routing

2720
01:39:40,080 --> 01:39:43,280
table that supports both

2721
01:39:43,520 --> 01:39:47,360
anyway so that's the protocol um

2722
01:39:48,800 --> 01:39:50,080
sorry

2723
01:39:50,080 --> 01:39:52,719
no not all that is supposed to be proxy

2724
01:39:52,719 --> 01:39:55,199
not server right just making sure that

2725
01:39:55,199 --> 01:39:56,400
no no

2726
01:39:56,400 --> 01:39:58,560
yes

2727
01:39:58,560 --> 01:40:00,480
trying to keep things less confusing i'm

2728
01:40:00,480 --> 01:40:03,199
confirming that you mean proxy there

2729
01:40:03,199 --> 01:40:05,199
it should yeah we can change it to proxy

2730
01:40:05,199 --> 01:40:07,360
it's it's the server

2731
01:40:07,360 --> 01:40:08,880
from the for the

2732
01:40:08,880 --> 01:40:11,360
master connection i understand that but

2733
01:40:11,360 --> 01:40:13,119
really yes yeah i mean i think proxy's

2734
01:40:13,119 --> 01:40:14,560
probably the terminology i've seen in

2735
01:40:14,560 --> 01:40:16,719
current gdp it might be good to unify

2736
01:40:16,719 --> 01:40:18,000
that as well to make sure we're not

2737
01:40:18,000 --> 01:40:19,280
going

2738
01:40:19,280 --> 01:40:20,960
yep that's a good point

2739
01:40:20,960 --> 01:40:23,840
thanks

2740
01:40:24,480 --> 01:40:25,920
all right so that's essentially the

2741
01:40:25,920 --> 01:40:27,119
scope of this

2742
01:40:27,119 --> 01:40:30,000
we've tried to keep it very simple

2743
01:40:30,000 --> 01:40:31,360
so i think the questions to the group

2744
01:40:31,360 --> 01:40:33,360
now are is this the right starting place

2745
01:40:33,360 --> 01:40:35,679
for doing connect ip

2746
01:40:35,679 --> 01:40:38,159
and if so is this ready to adopt

2747
01:40:38,159 --> 01:40:40,800
or do we have other

2748
01:40:40,800 --> 01:40:44,239
questions that we think need addressing

2749
01:40:48,840 --> 01:40:51,440
echo yeah i think this is a this is a

2750
01:40:51,440 --> 01:40:52,719
pretty good pretty good starting point

2751
01:40:52,719 --> 01:40:54,800
uh i think it's uh uh probably good

2752
01:40:54,800 --> 01:40:56,880
enough to adopt um uh i sent some

2753
01:40:56,880 --> 01:40:58,400
testimonial comments in email um last

2754
01:40:58,400 --> 01:41:00,080
night thank you for using them

2755
01:41:00,080 --> 01:41:00,880
completely because there's not like

2756
01:41:00,880 --> 01:41:03,600
midnight but um or something but um

2757
01:41:03,600 --> 01:41:04,639
actually i think it was more like you

2758
01:41:04,639 --> 01:41:07,199
know three but um anyway um yeah i i

2759
01:41:07,199 --> 01:41:09,600
think you know uh uh um you know these

2760
01:41:09,600 --> 01:41:10,880
are all things we could hash out in some

2761
01:41:10,880 --> 01:41:12,639
later discussions so i i think this is a

2762
01:41:12,639 --> 01:41:14,000
good starting point

2763
01:41:14,000 --> 01:41:15,920
great yeah and yeah and i did see your

2764
01:41:15,920 --> 01:41:18,639
comments thank you for them i think

2765
01:41:18,639 --> 01:41:20,800
there's stuff we can discuss um

2766
01:41:20,800 --> 01:41:22,320
i think we can go either way on a lot of

2767
01:41:22,320 --> 01:41:24,080
them yeah i'm not proposing to discuss

2768
01:41:24,080 --> 01:41:25,280
it now unless for some reason the chairs

2769
01:41:25,280 --> 01:41:28,759
are like in time primitive

2770
01:41:32,639 --> 01:41:35,600
any other comments

2771
01:41:43,280 --> 01:41:45,679
david

2772
01:41:45,679 --> 01:41:47,920
um i just wanted to

2773
01:41:47,920 --> 01:41:49,840
say like i'm i really

2774
01:41:49,840 --> 01:41:52,560
i wanted to thank tommy for all the work

2775
01:41:52,560 --> 01:41:54,800
he's been spending as editor to unify

2776
01:41:54,800 --> 01:41:58,239
the two connect ip proposals here um i'm

2777
01:41:58,239 --> 01:42:00,159
very happy we've that we've landed on

2778
01:42:00,159 --> 01:42:02,480
something that like works for everyone

2779
01:42:02,480 --> 01:42:04,320
so just wanted to thank tommy for all

2780
01:42:04,320 --> 01:42:06,719
the hard work here i'd love to see this

2781
01:42:06,719 --> 01:42:09,040
get adopted now that we have like kind

2782
01:42:09,040 --> 01:42:11,520
of one proposal with the backing of a

2783
01:42:11,520 --> 01:42:13,440
lot of folks as opposed to

2784
01:42:13,440 --> 01:42:15,119
like two separate ones pulling in

2785
01:42:15,119 --> 01:42:16,400
different directions like we had at the

2786
01:42:16,400 --> 01:42:18,239
last atf

2787
01:42:18,239 --> 01:42:21,119
awesome thank you

2788
01:42:21,119 --> 01:42:23,440
all right and

2789
01:42:23,440 --> 01:42:26,320
yep it sounds like in the chat people

2790
01:42:26,320 --> 01:42:28,639
are generally supportive of this so i

2791
01:42:28,639 --> 01:42:30,080
guess chairs do you want to do something

2792
01:42:30,080 --> 01:42:32,800
now or later

2793
01:42:32,800 --> 01:42:34,400
yeah so

2794
01:42:34,400 --> 01:42:36,960
uh thank you tommy for the presentation

2795
01:42:36,960 --> 01:42:38,880
and we're gonna use the show of hands

2796
01:42:38,880 --> 01:42:43,040
tool so everybody find this tab and

2797
01:42:43,040 --> 01:42:43,760
go

2798
01:42:43,760 --> 01:42:45,360
find where this is but effectively the

2799
01:42:45,360 --> 01:42:47,119
question we're going to ask is is this a

2800
01:42:47,119 --> 01:42:48,480
suitable starting point for working

2801
01:42:48,480 --> 01:42:49,760
group adoption and you're going to be

2802
01:42:49,760 --> 01:42:51,360
able to raise your hand if you think

2803
01:42:51,360 --> 01:42:53,840
that it is or you can actively choose to

2804
01:42:53,840 --> 01:42:55,760
not raise your hand if you think that it

2805
01:42:55,760 --> 01:42:58,000
is not so we're just going to do one

2806
01:42:58,000 --> 01:43:00,639
show of hands where you can choose up or

2807
01:43:00,639 --> 01:43:02,960
down

2808
01:43:02,960 --> 01:43:07,080
and that should be open now

2809
01:43:13,360 --> 01:43:14,800
give it a couple of seconds for people

2810
01:43:14,800 --> 01:43:18,280
to find the buttons

2811
01:43:35,520 --> 01:43:36,800
all right

2812
01:43:36,800 --> 01:43:39,440
so we seem to have pretty strong support

2813
01:43:39,440 --> 01:43:41,679
for using this as a starting point would

2814
01:43:41,679 --> 01:43:43,760
anybody who chose to not raise their

2815
01:43:43,760 --> 01:43:45,600
hand like to join the queue and

2816
01:43:45,600 --> 01:43:47,119
potentially give any thoughts or

2817
01:43:47,119 --> 01:43:48,880
reasoning as to why they

2818
01:43:48,880 --> 01:43:52,199
made that choice

2819
01:43:55,119 --> 01:43:56,639
and we'll take that as a no so we will

2820
01:43:56,639 --> 01:43:58,639
take this to the list and confirm on the

2821
01:43:58,639 --> 01:43:59,440
list

2822
01:43:59,440 --> 01:44:03,799
but thank you all for raising your hands

2823
01:44:08,719 --> 01:44:11,600
next up

2824
01:44:12,400 --> 01:44:15,360
we have

2825
01:44:17,600 --> 01:44:21,080
ben are you ready

2826
01:44:32,400 --> 01:44:35,839
alright if you requested

2827
01:44:43,600 --> 01:44:45,040
it's the one immediately to the right of

2828
01:44:45,040 --> 01:44:48,440
the cue button

2829
01:44:57,760 --> 01:45:00,239
we do not yet have audio for you either

2830
01:45:00,239 --> 01:45:02,719
yeah ben you're muted okay how are we

2831
01:45:02,719 --> 01:45:04,960
managing slides

2832
01:45:04,960 --> 01:45:06,960
uh you can share them yourself if you

2833
01:45:06,960 --> 01:45:08,719
click the little share preloaded slides

2834
01:45:08,719 --> 01:45:10,960
button

2835
01:45:11,600 --> 01:45:13,440
uh

2836
01:45:13,440 --> 01:45:15,119
looks like a piece of paper

2837
01:45:15,119 --> 01:45:17,119
yeah the button is called ask to share

2838
01:45:17,119 --> 01:45:20,800
slides for us non-chairs

2839
01:45:20,800 --> 01:45:21,920
indeed

2840
01:45:21,920 --> 01:45:23,679
uh okay can somebody tell me where that

2841
01:45:23,679 --> 01:45:25,199
might be

2842
01:45:25,199 --> 01:45:26,400
the joint

2843
01:45:26,400 --> 01:45:29,440
up left just to the right of that

2844
01:45:29,440 --> 01:45:32,800
okay ask to share slides

2845
01:45:32,800 --> 01:45:34,080
all right you should now be able to pick

2846
01:45:34,080 --> 01:45:36,000
your slide deck and then you can advance

2847
01:45:36,000 --> 01:45:37,520
at will okay

2848
01:45:37,520 --> 01:45:39,199
great thank you

2849
01:45:39,199 --> 01:45:42,000
okay lovely we see

2850
01:45:42,000 --> 01:45:44,880
so uh this

2851
01:45:44,880 --> 01:45:48,159
is about this presentation is about an

2852
01:45:48,159 --> 01:45:52,000
individual non-adopted draft

2853
01:45:52,000 --> 01:45:53,679
uh

2854
01:45:53,679 --> 01:45:56,719
that that i wrote in response to some

2855
01:45:56,719 --> 01:45:58,800
previous discussions about path mtu

2856
01:45:58,800 --> 01:46:01,199
discovery

2857
01:46:01,199 --> 01:46:03,520
and it's it's very much premised or

2858
01:46:03,520 --> 01:46:06,239
phrased in terms of the

2859
01:46:06,239 --> 01:46:08,719
in terms of the current

2860
01:46:08,719 --> 01:46:10,159
uh

2861
01:46:10,159 --> 01:46:13,199
datagram format and capsule system

2862
01:46:13,199 --> 01:46:15,199
so to the extent that the design team

2863
01:46:15,199 --> 01:46:18,000
decides to make changes there

2864
01:46:18,000 --> 01:46:20,880
this also would need to change

2865
01:46:20,880 --> 01:46:21,920
so

2866
01:46:21,920 --> 01:46:26,639
ping is an http datagram format type

2867
01:46:26,639 --> 01:46:28,880
and pings flow between a client and an

2868
01:46:28,880 --> 01:46:30,639
origin

2869
01:46:30,639 --> 01:46:33,760
or we can also call it a proxy

2870
01:46:33,760 --> 01:46:36,080
intermediaries if they exist

2871
01:46:36,080 --> 01:46:38,800
don't care about ping they are

2872
01:46:38,800 --> 01:46:40,960
again in the terminology of the h3

2873
01:46:40,960 --> 01:46:42,560
datagrams draft these are opaque

2874
01:46:42,560 --> 01:46:45,199
datagrams

2875
01:46:45,520 --> 01:46:47,119
and they look like this

2876
01:46:47,119 --> 01:46:50,800
each datagram contains a an event number

2877
01:46:50,800 --> 01:46:53,040
and some padding and the response

2878
01:46:53,040 --> 01:46:56,800
contains the next number and no padding

2879
01:46:56,800 --> 01:46:59,040
very very simple

2880
01:46:59,040 --> 01:47:01,040
they can go either way once you've

2881
01:47:01,040 --> 01:47:04,400
established a context for them they can

2882
01:47:04,400 --> 01:47:07,199
be sent and echoed in either direction

2883
01:47:07,199 --> 01:47:10,080
okay why

2884
01:47:10,080 --> 01:47:12,639
the main purpose of this is

2885
01:47:12,639 --> 01:47:15,520
inspired by connect ip connect ip in

2886
01:47:15,520 --> 01:47:16,880
order to be a fully compliant

2887
01:47:16,880 --> 01:47:19,280
implementation of ip needs to be able to

2888
01:47:19,280 --> 01:47:20,840
supply some

2889
01:47:20,840 --> 01:47:24,480
minimum mtu

2890
01:47:24,719 --> 01:47:26,800
and so this gets tricky if you're

2891
01:47:26,800 --> 01:47:29,199
running over a link that's already at or

2892
01:47:29,199 --> 01:47:32,960
close to the mtu with any of the links

2893
01:47:32,960 --> 01:47:35,679
on the chain between the client and and

2894
01:47:35,679 --> 01:47:39,280
the back end have have low mtu

2895
01:47:39,280 --> 01:47:40,880
then

2896
01:47:40,880 --> 01:47:43,760
what uh currently the way this

2897
01:47:43,760 --> 01:47:46,000
needs to uh the way you can solve this

2898
01:47:46,000 --> 01:47:47,520
is

2899
01:47:47,520 --> 01:47:48,320
by

2900
01:47:48,320 --> 01:47:50,560
by sending that datagram reliably well

2901
01:47:50,560 --> 01:47:52,159
okay so we can get to that in a second

2902
01:47:52,159 --> 01:47:53,040
but

2903
01:47:53,040 --> 01:47:53,920
uh

2904
01:47:53,920 --> 01:47:56,560
but basically endpoints need to

2905
01:47:56,560 --> 01:47:58,800
be able to detect that there's some

2906
01:47:58,800 --> 01:48:00,639
datagram that like

2907
01:48:00,639 --> 01:48:03,520
the ip layer is is officially able to

2908
01:48:03,520 --> 01:48:06,159
rely on so like this datagram is less

2909
01:48:06,159 --> 01:48:09,760
than 1280 in ipv6 so it is guaranteed to

2910
01:48:09,760 --> 01:48:11,440
be deliverable

2911
01:48:11,440 --> 01:48:13,600
but actually it's not because when you

2912
01:48:13,600 --> 01:48:15,520
wrap it in all of the mask overhead it

2913
01:48:15,520 --> 01:48:18,880
exceeds the underlying wire mtu

2914
01:48:18,880 --> 01:48:22,080
so we need to do something we need to

2915
01:48:22,080 --> 01:48:23,920
change what we're doing but in order to

2916
01:48:23,920 --> 01:48:27,199
do that the endpoints need to know

2917
01:48:27,199 --> 01:48:29,600
something about the path mtu and because

2918
01:48:29,600 --> 01:48:32,000
of the presence of intermediaries

2919
01:48:32,000 --> 01:48:34,560
using for example the mtu estimated by

2920
01:48:34,560 --> 01:48:36,960
the underlying quick session

2921
01:48:36,960 --> 01:48:38,480
is not going to be good enough and there

2922
01:48:38,480 --> 01:48:40,320
are even more complicated intermediary

2923
01:48:40,320 --> 01:48:42,080
arrangements like

2924
01:48:42,080 --> 01:48:44,000
when the the back end is actually

2925
01:48:44,000 --> 01:48:47,199
speaking to an intermediary over http2

2926
01:48:47,199 --> 01:48:48,320
uh so

2927
01:48:48,320 --> 01:48:50,719
there isn't even really a

2928
01:48:50,719 --> 01:48:52,400
there isn't really a relevant transport

2929
01:48:52,400 --> 01:48:56,559
mtu at that's on that hop

2930
01:48:56,960 --> 01:48:59,840
but this is a very general

2931
01:48:59,840 --> 01:49:03,360
anything that uses datagrams

2932
01:49:03,360 --> 01:49:04,480
needs

2933
01:49:04,480 --> 01:49:07,040
in general to know something about the

2934
01:49:07,040 --> 01:49:09,040
mtu of that datagram path

2935
01:49:09,040 --> 01:49:09,840
and

2936
01:49:09,840 --> 01:49:11,920
also it's very very common to need to

2937
01:49:11,920 --> 01:49:13,520
know something about the round trip

2938
01:49:13,520 --> 01:49:15,040
times and

2939
01:49:15,040 --> 01:49:16,560
packet loss rates

2940
01:49:16,560 --> 01:49:19,199
and so it's a very general problem and

2941
01:49:19,199 --> 01:49:20,960
so it seems appropriate to have a

2942
01:49:20,960 --> 01:49:23,679
general solution

2943
01:49:24,560 --> 01:49:26,239
so

2944
01:49:26,239 --> 01:49:27,760
this draft

2945
01:49:27,760 --> 01:49:29,840
is seeking work group adoption in mask

2946
01:49:29,840 --> 01:49:30,960
although

2947
01:49:30,960 --> 01:49:33,440
i don't think it's ready to ready for

2948
01:49:33,440 --> 01:49:35,199
that especially given the given the sort

2949
01:49:35,199 --> 01:49:37,040
of turmoil and the underlying draft i

2950
01:49:37,040 --> 01:49:38,480
think we're going to have to

2951
01:49:38,480 --> 01:49:39,840
revisit this

2952
01:49:39,840 --> 01:49:41,440
i think it's

2953
01:49:41,440 --> 01:49:44,719
it's most valuable as a as a test case

2954
01:49:44,719 --> 01:49:45,599
so

2955
01:49:45,599 --> 01:49:47,119
you know these are

2956
01:49:47,119 --> 01:49:49,280
problems and this is a this is the

2957
01:49:49,280 --> 01:49:52,880
solution that kind of falls out from

2958
01:49:52,880 --> 01:49:55,679
from one set of design choices about how

2959
01:49:55,679 --> 01:49:58,080
datagrams and formats work

2960
01:49:58,080 --> 01:50:00,480
and i think that hopefully that can help

2961
01:50:00,480 --> 01:50:02,719
inform the design team as as they

2962
01:50:02,719 --> 01:50:04,960
consider that design space you know try

2963
01:50:04,960 --> 01:50:06,719
to figure out well what what are you

2964
01:50:06,719 --> 01:50:08,960
going to do about these mtu issues

2965
01:50:08,960 --> 01:50:11,119
do you want a solution that looks like

2966
01:50:11,119 --> 01:50:12,639
this datagram ping or do you want

2967
01:50:12,639 --> 01:50:14,639
something else

2968
01:50:14,639 --> 01:50:16,000
and another thing that's important to

2969
01:50:16,000 --> 01:50:18,480
note here is that in the design

2970
01:50:18,480 --> 01:50:20,719
as considered here

2971
01:50:20,719 --> 01:50:22,080
it's

2972
01:50:22,080 --> 01:50:23,840
it's important for clients and servers

2973
01:50:23,840 --> 01:50:25,679
to be able to

2974
01:50:25,679 --> 01:50:29,040
identify when a datagram needs this kind

2975
01:50:29,040 --> 01:50:31,280
of protection it needs this extra

2976
01:50:31,280 --> 01:50:33,280
special end-to-end

2977
01:50:33,280 --> 01:50:36,000
reliability because it's too large for

2978
01:50:36,000 --> 01:50:39,040
the path mtu and be able to send it that

2979
01:50:39,040 --> 01:50:41,360
way and right now we don't have

2980
01:50:41,360 --> 01:50:43,440
actually a mechanism in the current

2981
01:50:43,440 --> 01:50:47,199
drafts that that really allows that

2982
01:50:47,199 --> 01:50:48,560
and so we've had some discussion on the

2983
01:50:48,560 --> 01:50:50,159
mailing list about do we need a

2984
01:50:50,159 --> 01:50:53,119
mechanism like this or do we need to

2985
01:50:53,119 --> 01:50:55,440
require intermediaries to

2986
01:50:55,440 --> 01:50:57,840
adopt some more sophisticated behavior

2987
01:50:57,840 --> 01:50:59,760
in order to

2988
01:50:59,760 --> 01:51:01,520
in order to make it more make it

2989
01:51:01,520 --> 01:51:04,239
possible to deliver those reliably or or

2990
01:51:04,239 --> 01:51:06,239
indeed do we need intermediaries to to

2991
01:51:06,239 --> 01:51:08,480
adopt a less sophisticated behavior that

2992
01:51:08,480 --> 01:51:09,840
would enable

2993
01:51:09,840 --> 01:51:10,800
that

2994
01:51:10,800 --> 01:51:14,080
that end-to-end property

2995
01:51:16,880 --> 01:51:18,840
so yeah that's all i have for

2996
01:51:18,840 --> 01:51:22,400
slides magnus

2997
01:51:24,960 --> 01:51:27,599
yes so i i think it's an interesting

2998
01:51:27,599 --> 01:51:29,920
mechanism i don't think it really solves

2999
01:51:29,920 --> 01:51:31,119
the

3000
01:51:31,119 --> 01:51:33,360
the toughest case at all of the

3001
01:51:33,360 --> 01:51:35,920
perfect discovery especially

3002
01:51:35,920 --> 01:51:38,480
if you're going to run the plpd of your

3003
01:51:38,480 --> 01:51:40,480
math tunnel you get the

3004
01:51:40,480 --> 01:51:44,480
oh before i can tell if the actual flow

3005
01:51:44,480 --> 01:51:46,000
is supported or not

3006
01:51:46,000 --> 01:51:47,440
you're going to have a delay because

3007
01:51:47,440 --> 01:51:50,000
first you need a probe what is the empty

3008
01:51:50,000 --> 01:51:51,520
you supported

3009
01:51:51,520 --> 01:51:53,280
and then you can make a decision about

3010
01:51:53,280 --> 01:51:55,599
it so it's i think it has some

3011
01:51:55,599 --> 01:51:57,280
significant downside to try to solve

3012
01:51:57,280 --> 01:51:58,639
that issue but

3013
01:51:58,639 --> 01:52:01,280
it may be

3014
01:52:01,760 --> 01:52:03,679
solving it faster of course means more

3015
01:52:03,679 --> 01:52:07,599
complexities in the intermediary so

3016
01:52:07,679 --> 01:52:09,920
yeah so there's there's this

3017
01:52:09,920 --> 01:52:12,560
learning mtu is always asynchronous

3018
01:52:12,560 --> 01:52:14,800
um you know it always takes you never

3019
01:52:14,800 --> 01:52:16,560
know it before you start you always have

3020
01:52:16,560 --> 01:52:18,159
to wait for it and the question is how

3021
01:52:18,159 --> 01:52:20,800
long do you have to wait

3022
01:52:20,800 --> 01:52:23,360
yeah but it's one cr cracks i think in

3023
01:52:23,360 --> 01:52:26,000
this which is particularly the mask or

3024
01:52:26,000 --> 01:52:28,480
any tunnel protocol in some sense in

3025
01:52:28,480 --> 01:52:30,960
that

3026
01:52:30,960 --> 01:52:33,280
you will know what empty you are for the

3027
01:52:33,280 --> 01:52:35,840
first hop for the first quick cop in

3028
01:52:35,840 --> 01:52:38,320
something yes

3029
01:52:38,320 --> 01:52:41,040
you can quick on that on that first half

3030
01:52:41,040 --> 01:52:42,320
yeah

3031
01:52:42,320 --> 01:52:43,280
but

3032
01:52:43,280 --> 01:52:46,480
not intermediate and forward until the

3033
01:52:46,480 --> 01:52:48,960
end of the the peers let's say the mask

3034
01:52:48,960 --> 01:52:49,920
appear

3035
01:52:49,920 --> 01:52:51,679
that's the that's where you run into the

3036
01:52:51,679 --> 01:52:54,159
trouble when you have intermediaries

3037
01:52:54,159 --> 01:52:58,199
on the http layer so

3038
01:53:00,159 --> 01:53:01,679
yeah but i guess it's for continued

3039
01:53:01,679 --> 01:53:03,520
discussion of this i mean how we solve

3040
01:53:03,520 --> 01:53:05,040
it and and i think it's one of these

3041
01:53:05,040 --> 01:53:06,480
requirements that should be considered

3042
01:53:06,480 --> 01:53:09,199
in the design team this quest is to

3043
01:53:09,199 --> 01:53:12,000
include that mtu question there

3044
01:53:12,000 --> 01:53:13,840
yeah and one thing that i would want to

3045
01:53:13,840 --> 01:53:15,599
emphasize is i think this illuminates

3046
01:53:15,599 --> 01:53:18,159
one of the questions that's um that's

3047
01:53:18,159 --> 01:53:19,599
come up a lot with the design team like

3048
01:53:19,599 --> 01:53:21,520
why can't we just use settings frames

3049
01:53:21,520 --> 01:53:22,880
for everything

3050
01:53:22,880 --> 01:53:25,199
um if you try to use for example if you

3051
01:53:25,199 --> 01:53:26,719
try to use settings frames to

3052
01:53:26,719 --> 01:53:28,960
communicate the

3053
01:53:28,960 --> 01:53:30,080
the

3054
01:53:30,080 --> 01:53:31,280
mtu

3055
01:53:31,280 --> 01:53:34,080
of the h3 datagram so the setting says

3056
01:53:34,080 --> 01:53:36,719
this this proxy supports datagrams up to

3057
01:53:36,719 --> 01:53:38,199
this size

3058
01:53:38,199 --> 01:53:40,400
then uh

3059
01:53:40,400 --> 01:53:41,520
that

3060
01:53:41,520 --> 01:53:45,119
implies knowledge of all of the paths to

3061
01:53:45,119 --> 01:53:48,560
all of the back ends of that proxy

3062
01:53:48,560 --> 01:53:50,560
so it's not just about compatibility

3063
01:53:50,560 --> 01:53:52,159
with all the proxies it's actually also

3064
01:53:52,159 --> 01:53:54,400
about all of the network elements that

3065
01:53:54,400 --> 01:53:57,199
stand between them

3066
01:53:59,440 --> 01:54:02,440
okay

3067
01:54:08,080 --> 01:54:11,599
ben we still have martin in the queue

3068
01:54:11,920 --> 01:54:14,560
sorry martin yeah oh

3069
01:54:14,560 --> 01:54:16,400
and um thanks for

3070
01:54:16,400 --> 01:54:18,239
thinking this through i think if nothing

3071
01:54:18,239 --> 01:54:20,239
else has been a useful exercise to

3072
01:54:20,239 --> 01:54:23,280
exercise this as you said but um

3073
01:54:23,280 --> 01:54:24,639
i guess it

3074
01:54:24,639 --> 01:54:26,159
what i'm wondering is

3075
01:54:26,159 --> 01:54:27,679
if you have been under if you have a

3076
01:54:27,679 --> 01:54:30,400
protocol running over a mask

3077
01:54:30,400 --> 01:54:31,679
yeah

3078
01:54:31,679 --> 01:54:34,639
i mean typically these off-the-shelf uh

3079
01:54:34,639 --> 01:54:36,400
protocols will presumably have their own

3080
01:54:36,400 --> 01:54:38,320
plp mtud

3081
01:54:38,320 --> 01:54:40,239
uh mechanism and they also have the

3082
01:54:40,239 --> 01:54:42,239
advantage of not only probing the the

3083
01:54:42,239 --> 01:54:44,000
mask mtu but also all the way to the

3084
01:54:44,000 --> 01:54:45,920
origin server so

3085
01:54:45,920 --> 01:54:47,679
um

3086
01:54:47,679 --> 01:54:49,119
what is the actual utility of having

3087
01:54:49,119 --> 01:54:50,560
this utility

3088
01:54:50,560 --> 01:54:52,239
in mask itself

3089
01:54:52,239 --> 01:54:56,400
sure so the fundamental problem here is

3090
01:54:56,400 --> 01:54:58,400
that

3091
01:54:58,400 --> 01:55:00,960
the iprfcs say that in order to be a

3092
01:55:00,960 --> 01:55:03,360
compliant ip implementation you must

3093
01:55:03,360 --> 01:55:04,400
have

3094
01:55:04,400 --> 01:55:07,040
an effective mtu of at least 1280 for

3095
01:55:07,040 --> 01:55:08,320
ipv6

3096
01:55:08,320 --> 01:55:09,760
and while

3097
01:55:09,760 --> 01:55:12,000
transport protocols running over it are

3098
01:55:12,000 --> 01:55:14,960
allowed or encouraged to use path mtu

3099
01:55:14,960 --> 01:55:17,520
discovery they are also

3100
01:55:17,520 --> 01:55:20,880
allowed explicitly to simply cap their

3101
01:55:20,880 --> 01:55:23,920
datagram output sizes at 1280. if you

3102
01:55:23,920 --> 01:55:26,000
never produce output greater than 1280

3103
01:55:26,000 --> 01:55:28,239
the ip specs say that you do not have to

3104
01:55:28,239 --> 01:55:30,880
do any path mtu discovery

3105
01:55:30,880 --> 01:55:34,480
and so if we want to be a compliant

3106
01:55:34,480 --> 01:55:36,400
implementation of ip

3107
01:55:36,400 --> 01:55:40,239
then we need to always provide

3108
01:55:40,239 --> 01:55:43,760
functional delivery of packets of size

3109
01:55:43,760 --> 01:55:44,880
1280.

3110
01:55:44,880 --> 01:55:46,719
that's a that's an actual if right we

3111
01:55:46,719 --> 01:55:48,239
have the option of saying this is an

3112
01:55:48,239 --> 01:55:51,040
almost complete implementation of ip

3113
01:55:51,040 --> 01:55:52,800
and one thing that it doesn't quite give

3114
01:55:52,800 --> 01:55:55,040
you is the mtu guarantees and so you

3115
01:55:55,040 --> 01:55:58,000
actually need to do some some pmtud for

3116
01:55:58,000 --> 01:56:01,400
smaller sizes

3117
01:56:04,159 --> 01:56:05,440
all right

3118
01:56:05,440 --> 01:56:07,760
thank you ben

3119
01:56:07,760 --> 01:56:10,560
and lucas is five slash four minutes

3120
01:56:10,560 --> 01:56:12,159
useful or do you want to punt to next

3121
01:56:12,159 --> 01:56:15,159
time

3122
01:56:15,440 --> 01:56:17,920
i think i think i could squeeze in 15

3123
01:56:17,920 --> 01:56:20,080
slides in two minutes

3124
01:56:20,080 --> 01:56:21,599
go for it

3125
01:56:21,599 --> 01:56:23,840
cool

3126
01:56:26,800 --> 01:56:30,159
oh no i'll push the wrong button

3127
01:56:30,159 --> 01:56:32,320
uh

3128
01:56:32,560 --> 01:56:34,480
i don't want to do that

3129
01:56:34,480 --> 01:56:36,959
here we go

3130
01:56:41,679 --> 01:56:44,239
uh okay um so this is about data ground

3131
01:56:44,239 --> 01:56:45,679
priorities which is probably a low

3132
01:56:45,679 --> 01:56:47,199
priority given what the mask working

3133
01:56:47,199 --> 01:56:48,880
group wants to work on uh this was

3134
01:56:48,880 --> 01:56:50,800
originally uh intended to be presented

3135
01:56:50,800 --> 01:56:53,119
at the last meeting but got uh pushed

3136
01:56:53,119 --> 01:56:55,280
off because we ran out of time hence why

3137
01:56:55,280 --> 01:56:57,440
i just wanted to disease any time here

3138
01:56:57,440 --> 01:56:59,440
to mention it and to see if anyone's

3139
01:56:59,440 --> 01:57:01,040
really interested or if we don't care

3140
01:57:01,040 --> 01:57:04,239
right now i have a draft an id um it

3141
01:57:04,239 --> 01:57:06,320
didn't take much work to write up

3142
01:57:06,320 --> 01:57:08,400
and it's going to expire soon so if no

3143
01:57:08,400 --> 01:57:10,080
one's interested we can just leave it

3144
01:57:10,080 --> 01:57:12,159
and maybe mothball it and pick it back

3145
01:57:12,159 --> 01:57:14,800
up when when the time's right if that

3146
01:57:14,800 --> 01:57:17,520
time ever occurs um so briefly there's a

3147
01:57:17,520 --> 01:57:19,360
lot of background here we won't go into

3148
01:57:19,360 --> 01:57:20,400
that but

3149
01:57:20,400 --> 01:57:22,960
uh quick doesn't specify anything about

3150
01:57:22,960 --> 01:57:25,199
prioritization of anything it says you

3151
01:57:25,199 --> 01:57:27,040
probably should do it but uh it doesn't

3152
01:57:27,040 --> 01:57:29,360
specify how the datagram draft that's

3153
01:57:29,360 --> 01:57:32,960
now opposed to the uh w g lc is uh

3154
01:57:32,960 --> 01:57:34,480
defines the frames but doesn't talk

3155
01:57:34,480 --> 01:57:37,040
about priorities of them uh hp3 doesn't

3156
01:57:37,040 --> 01:57:38,800
define any priority signals either and

3157
01:57:38,800 --> 01:57:41,520
that's post working group let's call um

3158
01:57:41,520 --> 01:57:43,920
and the the new mask http 3 datagram

3159
01:57:43,920 --> 01:57:45,199
draft that we have

3160
01:57:45,199 --> 01:57:47,119
also doesn't say anything

3161
01:57:47,119 --> 01:57:48,800
so so we're kind of bouncing around we

3162
01:57:48,800 --> 01:57:49,920
have different issues raising a

3163
01:57:49,920 --> 01:57:51,599
different draft that have all been

3164
01:57:51,599 --> 01:57:54,320
closed to say well you know

3165
01:57:54,320 --> 01:57:56,000
the princess is in another castle kind

3166
01:57:56,000 --> 01:57:58,800
of thing go go look somewhere else

3167
01:57:58,800 --> 01:58:00,239
you've got people like pointing at each

3168
01:58:00,239 --> 01:58:02,320
other and saying well you know maybe we

3169
01:58:02,320 --> 01:58:04,239
should but i think with all the drafts

3170
01:58:04,239 --> 01:58:06,239
we have today we're fine actually we're

3171
01:58:06,239 --> 01:58:09,040
not saying anything about priorities

3172
01:58:09,040 --> 01:58:11,040
and so that raises some problems for

3173
01:58:11,040 --> 01:58:12,560
anyone who's tried to implement

3174
01:58:12,560 --> 01:58:14,800
something based on datagrams where

3175
01:58:14,800 --> 01:58:16,800
they're being multiplexed with streams

3176
01:58:16,800 --> 01:58:18,880
as well or even

3177
01:58:18,880 --> 01:58:21,599
logical flows of datagrams might need

3178
01:58:21,599 --> 01:58:25,119
different priorities and uh you know

3179
01:58:25,119 --> 01:58:26,480
they have different needs and they need

3180
01:58:26,480 --> 01:58:28,239
to be scheduled differently otherwise

3181
01:58:28,239 --> 01:58:30,000
you know certain kinds of problems might

3182
01:58:30,000 --> 01:58:31,760
happen

3183
01:58:31,760 --> 01:58:33,760
so i wrote this draft just to get the

3184
01:58:33,760 --> 01:58:35,679
idea out of my head this is based on the

3185
01:58:35,679 --> 01:58:37,520
extendable priority scheme i don't

3186
01:58:37,520 --> 01:58:38,960
necessarily think it's the only way to

3187
01:58:38,960 --> 01:58:40,800
do things or the right one

3188
01:58:40,800 --> 01:58:42,719
but it is a way

3189
01:58:42,719 --> 01:58:45,920
um to do things uh we'll skip the the

3190
01:58:45,920 --> 01:58:47,199
recap here

3191
01:58:47,199 --> 01:58:50,159
the philosophy of this design is that

3192
01:58:50,159 --> 01:58:52,400
datagrams may have a different priority

3193
01:58:52,400 --> 01:58:54,239
than the stream that they're related to

3194
01:58:54,239 --> 01:58:56,000
and this is only at the http layer

3195
01:58:56,000 --> 01:58:57,440
nothing else

3196
01:58:57,440 --> 01:59:00,560
so there's some flexibility here but uh

3197
01:59:00,560 --> 01:59:02,880
sensible defaults there's no per context

3198
01:59:02,880 --> 01:59:05,360
prioritization which kind of skips some

3199
01:59:05,360 --> 01:59:07,520
of those problems that came up earlier

3200
01:59:07,520 --> 01:59:08,880
um

3201
01:59:08,880 --> 01:59:10,480
yeah the proposal is just a new

3202
01:59:10,480 --> 01:59:11,760
parameter

3203
01:59:11,760 --> 01:59:14,080
that gets defined a similar scale to

3204
01:59:14,080 --> 01:59:16,159
this urgency parameter that's already in

3205
01:59:16,159 --> 01:59:18,480
priority kind of decorates things and

3206
01:59:18,480 --> 01:59:20,080
inherits from it this is all in the

3207
01:59:20,080 --> 01:59:21,679
specification

3208
01:59:21,679 --> 01:59:23,679
uh

3209
01:59:23,679 --> 01:59:25,119
the question i was going to pose last

3210
01:59:25,119 --> 01:59:26,719
time is should we adopt this but i'm

3211
01:59:26,719 --> 01:59:28,320
thinking right now

3212
01:59:28,320 --> 01:59:30,639
the question is who cares uh

3213
01:59:30,639 --> 01:59:32,400
you know we could have an adoption

3214
01:59:32,400 --> 01:59:34,719
discussion later on when people have

3215
01:59:34,719 --> 01:59:37,199
actually read this um maybe mask isn't

3216
01:59:37,199 --> 01:59:40,239
even the correct venue i'm happy if

3217
01:59:40,239 --> 01:59:41,920
you know with whatever people might

3218
01:59:41,920 --> 01:59:43,599
think if they've had any time to look at

3219
01:59:43,599 --> 01:59:45,679
it so

3220
01:59:45,679 --> 01:59:47,040
that's it

3221
01:59:47,040 --> 01:59:51,159
thank you very much for your time

3222
01:59:59,040 --> 02:00:02,400
uh i see tommy in the queue

3223
02:00:02,400 --> 02:00:03,840
yeah i have time for a clarifying

3224
02:00:03,840 --> 02:00:06,560
question um

3225
02:00:06,560 --> 02:00:08,880
you mentioned how you know explicitly

3226
02:00:08,880 --> 02:00:10,400
this is a different priority than the

3227
02:00:10,400 --> 02:00:11,280
one

3228
02:00:11,280 --> 02:00:14,400
on the stream data

3229
02:00:14,400 --> 02:00:16,560
just what is the rationale for not just

3230
02:00:16,560 --> 02:00:18,639
letting this stream

3231
02:00:18,639 --> 02:00:20,239
priority be the priority here because

3232
02:00:20,239 --> 02:00:21,840
like for connect udp it's almost all

3233
02:00:21,840 --> 02:00:24,080
going to be datagrams anyway

3234
02:00:24,080 --> 02:00:27,840
uh it is if effectively allowed if if

3235
02:00:27,840 --> 02:00:29,679
you say that you support this scheme as

3236
02:00:29,679 --> 02:00:32,000
like a a server for instance and the

3237
02:00:32,000 --> 02:00:34,400
client doesn't send anything the default

3238
02:00:34,400 --> 02:00:37,119
is to inherit the stream's priority so

3239
02:00:37,119 --> 02:00:39,280
this effectively just makes that

3240
02:00:39,280 --> 02:00:41,599
abundantly clear that that people would

3241
02:00:41,599 --> 02:00:43,760
go with that kind of flow you could

3242
02:00:43,760 --> 02:00:45,520
equally say that without putting it in

3243
02:00:45,520 --> 02:00:47,760
any specification

3244
02:00:47,760 --> 02:00:50,760
okay

3245
02:00:59,040 --> 02:01:01,040
all right um

3246
02:01:01,040 --> 02:01:02,560
sorry to abruptly shut the queue but

3247
02:01:02,560 --> 02:01:03,599
we're at the top of the hour at the end

3248
02:01:03,599 --> 02:01:05,280
of the meeting and folks have to get to

3249
02:01:05,280 --> 02:01:06,719
the next one so

3250
02:01:06,719 --> 02:01:08,159
thanks everyone for your time comments

3251
02:01:08,159 --> 02:01:09,760
so we'll follow up on the list with

3252
02:01:09,760 --> 02:01:12,560
actions regarding the design team and

3253
02:01:12,560 --> 02:01:13,920
um

3254
02:01:13,920 --> 02:01:16,159
uh adoption of connect ip and uh we'll

3255
02:01:16,159 --> 02:01:17,840
see you at the interim

3256
02:01:17,840 --> 02:01:18,960
next

3257
02:01:18,960 --> 02:01:21,599
meeting and on the list

3258
02:01:21,599 --> 02:01:25,719
thanks all and thanks for notetakers

