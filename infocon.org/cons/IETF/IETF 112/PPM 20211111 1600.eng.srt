1
00:00:08,400 --> 00:00:11,400
so

2
00:00:39,040 --> 00:00:42,640
okay it is

3
00:00:42,840 --> 00:00:45,600
the right at the top of the hour

4
00:00:45,600 --> 00:00:48,480
and we have a pretty full agenda today

5
00:00:48,480 --> 00:00:50,719
so i think we should get started sound

6
00:00:50,719 --> 00:00:52,960
good

7
00:00:53,360 --> 00:00:54,320
um

8
00:00:54,320 --> 00:00:55,440
all right so

9
00:00:55,440 --> 00:00:57,360
welcome everyone this is ippm ip

10
00:00:57,360 --> 00:00:59,680
performance measurement um

11
00:00:59,680 --> 00:01:01,280
i'm tommy paulie

12
00:01:01,280 --> 00:01:02,960
one of your chairs

13
00:01:02,960 --> 00:01:05,438
marcus here is a

14
00:01:05,438 --> 00:01:08,400
new chair joining us so please welcome

15
00:01:08,400 --> 00:01:09,760
marcus and

16
00:01:09,760 --> 00:01:11,600
thank you marcus for stepping up

17
00:01:11,600 --> 00:01:14,400
ian is stepping down in his chair i

18
00:01:14,400 --> 00:01:16,240
don't see him here

19
00:01:16,240 --> 00:01:19,439
um so we may need to just bid him adieu

20
00:01:19,439 --> 00:01:21,439
uh virtually on the list

21
00:01:21,439 --> 00:01:23,759
but um he's been very helpful for the

22
00:01:23,759 --> 00:01:25,119
past

23
00:01:25,119 --> 00:01:27,520
you're in a bit

24
00:01:27,520 --> 00:01:29,840
okay

25
00:01:29,840 --> 00:01:31,920
this is pretty far into the week so

26
00:01:31,920 --> 00:01:34,400
you've probably seen the note well

27
00:01:34,400 --> 00:01:36,240
before um

28
00:01:36,240 --> 00:01:37,439
if you haven't

29
00:01:37,439 --> 00:01:39,600
if this is your first group of the week

30
00:01:39,600 --> 00:01:42,399
this is

31
00:01:42,799 --> 00:01:44,880
essentially describing all of the

32
00:01:44,880 --> 00:01:47,119
requirements and expectations for

33
00:01:47,119 --> 00:01:50,640
participating in ietf meetings

34
00:01:50,640 --> 00:01:53,600
the various processes we have around

35
00:01:53,600 --> 00:01:56,320
ipr as well as around how you

36
00:01:56,320 --> 00:01:58,000
participate

37
00:01:58,000 --> 00:01:59,280
and one thing we want to highlight

38
00:01:59,280 --> 00:02:01,520
specifically this time

39
00:02:01,520 --> 00:02:03,200
is just uh some of the aspects of the

40
00:02:03,200 --> 00:02:05,840
code of conduct you know this group i

41
00:02:05,840 --> 00:02:07,280
think you know for the entire time i've

42
00:02:07,280 --> 00:02:10,399
been here has been very good at

43
00:02:10,399 --> 00:02:13,040
um interacting well with each other but

44
00:02:13,040 --> 00:02:15,520
it's good to just remember

45
00:02:15,520 --> 00:02:17,920
um and have it at the forefront of our

46
00:02:17,920 --> 00:02:19,440
minds as we're interacting in the group

47
00:02:19,440 --> 00:02:20,640
that

48
00:02:20,640 --> 00:02:22,400
you know this is a group with a lot of

49
00:02:22,400 --> 00:02:23,200
different people from different

50
00:02:23,200 --> 00:02:24,879
backgrounds and

51
00:02:24,879 --> 00:02:26,400
the most important thing we can do here

52
00:02:26,400 --> 00:02:28,640
is to treat each other with respect

53
00:02:28,640 --> 00:02:31,440
and to make sure that we're clear

54
00:02:31,440 --> 00:02:33,040
and making it easy for everyone to

55
00:02:33,040 --> 00:02:35,440
understand and participate

56
00:02:35,440 --> 00:02:37,840
and that we focus on

57
00:02:37,840 --> 00:02:41,840
having you know technical discussions um

58
00:02:41,840 --> 00:02:43,519
that are getting at the details so that

59
00:02:43,519 --> 00:02:45,360
we can help progress the work

60
00:02:45,360 --> 00:02:46,800
not uh

61
00:02:46,800 --> 00:02:49,360
getting into anything uh personal or

62
00:02:49,360 --> 00:02:52,319
just trying to stop work um and we're

63
00:02:52,319 --> 00:02:53,599
trying to find the best solutions for

64
00:02:53,599 --> 00:02:55,680
the whole internet so just keep this in

65
00:02:55,680 --> 00:02:57,840
mind in your contributions at the mic

66
00:02:57,840 --> 00:03:00,000
and on jabber and i'm looking forward to

67
00:03:00,000 --> 00:03:02,720
a great meeting

68
00:03:02,959 --> 00:03:05,840
for the meeting management

69
00:03:05,840 --> 00:03:09,280
you are here you are in meet echo um

70
00:03:09,280 --> 00:03:11,200
just as a note when you want to queue

71
00:03:11,200 --> 00:03:15,040
use the little join queue hand sign

72
00:03:15,040 --> 00:03:16,000
um

73
00:03:16,000 --> 00:03:18,000
that's up by your name on the side of

74
00:03:18,000 --> 00:03:19,680
meet echo

75
00:03:19,680 --> 00:03:22,959
you can turn on your own video and audio

76
00:03:22,959 --> 00:03:25,200
if you are a presenter

77
00:03:25,200 --> 00:03:28,000
all of the slides are pre-loaded

78
00:03:28,000 --> 00:03:30,480
um through meet echo

79
00:03:30,480 --> 00:03:32,480
and there's next to the hand button

80
00:03:32,480 --> 00:03:34,080
there's the file button

81
00:03:34,080 --> 00:03:37,599
that allows you to um share slides that

82
00:03:37,599 --> 00:03:39,280
will you'll be able to request sharing

83
00:03:39,280 --> 00:03:40,640
slides when

84
00:03:40,640 --> 00:03:43,120
someone else is no longer sharing slides

85
00:03:43,120 --> 00:03:45,599
we do have a lot of presentations and a

86
00:03:45,599 --> 00:03:46,879
number of

87
00:03:46,879 --> 00:03:49,120
quick elevator pitches so there are

88
00:03:49,120 --> 00:03:51,599
like 20 slides pre-loaded in here so

89
00:03:51,599 --> 00:03:54,239
make sure to grab the right one

90
00:03:54,239 --> 00:03:56,239
and be ready to do that

91
00:03:56,239 --> 00:03:58,000
the notes can be found

92
00:03:58,000 --> 00:04:00,239
here i guess they're no longer etherpad

93
00:04:00,239 --> 00:04:02,319
um we should update that on the slide

94
00:04:02,319 --> 00:04:04,239
they're in hedge talk but you can find

95
00:04:04,239 --> 00:04:06,239
them here and lucas is helping us take

96
00:04:06,239 --> 00:04:07,360
notes

97
00:04:07,360 --> 00:04:08,560
um

98
00:04:08,560 --> 00:04:09,840
and

99
00:04:09,840 --> 00:04:12,080
yeah and if you see someone in jabber

100
00:04:12,080 --> 00:04:13,360
trying to say something on the mic who

101
00:04:13,360 --> 00:04:14,879
can't get audio

102
00:04:14,879 --> 00:04:17,600
please relate that and uh marcus can and

103
00:04:17,600 --> 00:04:20,000
i can watch that as well

104
00:04:20,000 --> 00:04:24,400
okay so on to our agenda

105
00:04:24,560 --> 00:04:27,360
we're going to start with uh

106
00:04:27,360 --> 00:04:29,199
a good amount of time

107
00:04:29,199 --> 00:04:30,240
um

108
00:04:30,240 --> 00:04:32,320
about an hour going over our primary

109
00:04:32,320 --> 00:04:33,759
documents the things that we currently

110
00:04:33,759 --> 00:04:35,360
have adopted

111
00:04:35,360 --> 00:04:36,880
in the working group we have some new

112
00:04:36,880 --> 00:04:39,440
things we adopted since last time around

113
00:04:39,440 --> 00:04:40,960
iom

114
00:04:40,960 --> 00:04:42,320
that we want to spend a bit of time

115
00:04:42,320 --> 00:04:44,240
going over

116
00:04:44,240 --> 00:04:45,840
and then in the second half of our

117
00:04:45,840 --> 00:04:50,239
meeting we have some new proposed work

118
00:04:50,639 --> 00:04:53,040
specifically we have three documents

119
00:04:53,040 --> 00:04:54,960
that we want to go over with 10 minutes

120
00:04:54,960 --> 00:04:57,919
each and this first one is related to

121
00:04:57,919 --> 00:05:00,240
some work that came out of a recent iab

122
00:05:00,240 --> 00:05:03,280
workshop on network quality so that is

123
00:05:03,280 --> 00:05:04,639
some of the background of the discussion

124
00:05:04,639 --> 00:05:05,840
that happened there

125
00:05:05,840 --> 00:05:07,440
but all of these had

126
00:05:07,440 --> 00:05:09,120
some discussion on the list and interest

127
00:05:09,120 --> 00:05:10,479
from the group

128
00:05:10,479 --> 00:05:12,240
and the remaining time will be

129
00:05:12,240 --> 00:05:14,400
a number of quick elevator pitches we're

130
00:05:14,400 --> 00:05:16,400
trying a new style this time where

131
00:05:16,400 --> 00:05:17,840
rather than trying to limit based on

132
00:05:17,840 --> 00:05:19,360
time we want people to summarize what

133
00:05:19,360 --> 00:05:22,000
they're doing within a single slide so

134
00:05:22,000 --> 00:05:23,520
that we can get all of the information

135
00:05:23,520 --> 00:05:25,600
up front and hopefully save more time

136
00:05:25,600 --> 00:05:27,600
for discussion and feedback

137
00:05:27,600 --> 00:05:29,280
and not just be trying to fill up the

138
00:05:29,280 --> 00:05:31,360
whole time of the lightning talk

139
00:05:31,360 --> 00:05:33,280
with um

140
00:05:33,280 --> 00:05:34,880
just you know a presentation of blasting

141
00:05:34,880 --> 00:05:36,840
information at

142
00:05:36,840 --> 00:05:40,160
people all right so that's all i have

143
00:05:40,160 --> 00:05:41,600
welcome ian

144
00:05:41,600 --> 00:05:43,759
and

145
00:05:43,759 --> 00:05:45,840
we we already mentioned that you will be

146
00:05:45,840 --> 00:05:47,919
stepping down and thank you again for

147
00:05:47,919 --> 00:05:49,039
your service

148
00:05:49,039 --> 00:05:51,039
um

149
00:05:51,039 --> 00:05:52,479
all right

150
00:05:52,479 --> 00:05:55,199
is there any agenda bashing or should we

151
00:05:55,199 --> 00:05:57,840
jump right in

152
00:06:01,440 --> 00:06:03,840
okay i don't see anyone coming up

153
00:06:03,840 --> 00:06:05,680
so our first

154
00:06:05,680 --> 00:06:08,240
presentation will be about some of the

155
00:06:08,240 --> 00:06:12,479
iom data integrity and deployments

156
00:06:13,199 --> 00:06:15,199
and frank if you could uh

157
00:06:15,199 --> 00:06:18,840
ask to share slides

158
00:06:21,840 --> 00:06:23,680
do the session for uh

159
00:06:23,680 --> 00:06:26,479
for us this time on iom i just got my my

160
00:06:26,479 --> 00:06:28,400
third jab yesterday

161
00:06:28,400 --> 00:06:29,520
and i'm

162
00:06:29,520 --> 00:06:31,600
kind of okay but i'm not feeling that

163
00:06:31,600 --> 00:06:34,319
well uh so uh

164
00:06:34,319 --> 00:06:35,759
thanks for that

165
00:06:35,759 --> 00:06:37,120
yeah okay

166
00:06:37,120 --> 00:06:39,440
thank you

167
00:06:42,880 --> 00:06:46,400
so here we go um

168
00:06:46,720 --> 00:06:48,400
this is going to be a quick update i

169
00:06:48,400 --> 00:06:51,039
hope we'll have more discussion time uh

170
00:06:51,039 --> 00:06:53,199
since we have 25 minutes allocated for

171
00:06:53,199 --> 00:06:55,440
these two drafts these were

172
00:06:55,440 --> 00:06:58,000
the two new drafts which

173
00:06:58,000 --> 00:06:59,919
were initiated because of the feedback

174
00:06:59,919 --> 00:07:03,280
that was received on the iom data draft

175
00:07:03,280 --> 00:07:06,080
both these drafts were adopted between

176
00:07:06,080 --> 00:07:07,680
last and the

177
00:07:07,680 --> 00:07:11,599
this just before this itf

178
00:07:12,319 --> 00:07:13,599
um

179
00:07:13,599 --> 00:07:17,120
we had discussed data integrity draft in

180
00:07:17,120 --> 00:07:19,360
the last ippm

181
00:07:19,360 --> 00:07:21,759
last two ippm meetings and

182
00:07:21,759 --> 00:07:24,560
we had a bunch of options to meet the

183
00:07:24,560 --> 00:07:27,120
data integrity requirements for the

184
00:07:27,120 --> 00:07:29,120
um for the iron

185
00:07:29,120 --> 00:07:32,000
protocols carrying iom options

186
00:07:32,000 --> 00:07:34,880
uh the changes uh um just highlighting

187
00:07:34,880 --> 00:07:36,720
the changes that happened

188
00:07:36,720 --> 00:07:38,720
uh post

189
00:07:38,720 --> 00:07:42,560
while we adopted this work here

190
00:07:42,560 --> 00:07:44,960
first change major change was changing

191
00:07:44,960 --> 00:07:47,199
it from informational to standard stack

192
00:07:47,199 --> 00:07:48,879
because we are defining

193
00:07:48,879 --> 00:07:52,479
uh integrity based options uh which are

194
00:07:52,479 --> 00:07:55,039
parallel to the the iom data options

195
00:07:55,039 --> 00:07:56,960
that are defined are i options that

196
00:07:56,960 --> 00:07:58,720
could be defined in

197
00:07:58,720 --> 00:08:01,120
other graphs like the direct direct

198
00:08:01,120 --> 00:08:02,720
export draft

199
00:08:02,720 --> 00:08:04,800
um then

200
00:08:04,800 --> 00:08:07,520
we based on the feedback from uh

201
00:08:07,520 --> 00:08:10,639
multiple folks in in the work group we

202
00:08:10,639 --> 00:08:13,599
uh we adopted method three uh which is a

203
00:08:13,599 --> 00:08:16,160
symmetric key based uh signature

204
00:08:16,160 --> 00:08:18,240
to protect the integrity of the options

205
00:08:18,240 --> 00:08:21,919
as uh the as as the proposed method

206
00:08:21,919 --> 00:08:23,520
and mode

207
00:08:23,520 --> 00:08:24,800
all the other methods that were

208
00:08:24,800 --> 00:08:26,479
discussed earlier were in the appendix

209
00:08:26,479 --> 00:08:28,720
that got removed because

210
00:08:28,720 --> 00:08:30,800
as as part of the adoption and feedback

211
00:08:30,800 --> 00:08:31,840
received

212
00:08:31,840 --> 00:08:33,839
during the adoption call

213
00:08:33,839 --> 00:08:36,799
and there were some editorial changes

214
00:08:36,799 --> 00:08:39,760
done for example we had given examples

215
00:08:39,760 --> 00:08:41,440
specific to the options that are there

216
00:08:41,440 --> 00:08:44,320
in the iom data draft but had not

217
00:08:44,320 --> 00:08:46,080
explicitly mentioned

218
00:08:46,080 --> 00:08:48,880
uh options in the direct export or any

219
00:08:48,880 --> 00:08:52,480
other iom drafts that could come come up

220
00:08:52,480 --> 00:08:54,800
in future but uh

221
00:08:54,800 --> 00:08:56,560
data integrity is quite generic it

222
00:08:56,560 --> 00:08:59,600
should apply to anything any iom options

223
00:08:59,600 --> 00:09:00,640
uh

224
00:09:00,640 --> 00:09:03,279
that are that are defined in

225
00:09:03,279 --> 00:09:05,360
uh beyond the data draft

226
00:09:05,360 --> 00:09:09,360
that that is fixed now and

227
00:09:09,360 --> 00:09:11,920
some terminology fixes we had called the

228
00:09:11,920 --> 00:09:14,720
inter i mean we were not following the

229
00:09:14,720 --> 00:09:17,600
the nomenclature used in the data draft

230
00:09:17,600 --> 00:09:21,160
which is now fixed

231
00:09:23,120 --> 00:09:26,000
uh so we we do have uh additional

232
00:09:26,000 --> 00:09:28,560
feedback and some of the internal

233
00:09:28,560 --> 00:09:30,399
discussions among the authors to improve

234
00:09:30,399 --> 00:09:32,640
the security sections

235
00:09:32,640 --> 00:09:35,519
we definitely want more input on uh yeah

236
00:09:35,519 --> 00:09:36,959
we have as2

237
00:09:36,959 --> 00:09:41,920
as256 and chart56 plus hcsa based uh uh

238
00:09:41,920 --> 00:09:44,959
algorithms that could be used for diff

239
00:09:44,959 --> 00:09:47,279
for carrying out the signature but

240
00:09:47,279 --> 00:09:49,760
uh we appreciate feedback from other

241
00:09:49,760 --> 00:09:52,720
folks more familiar with what would be

242
00:09:52,720 --> 00:09:55,200
other reasonable combination of

243
00:09:55,200 --> 00:09:57,120
hashing and signature algorithms that

244
00:09:57,120 --> 00:09:58,160
could be

245
00:09:58,160 --> 00:10:00,640
that should make it into that list

246
00:10:00,640 --> 00:10:02,800
and more reviews on the integrity

247
00:10:02,800 --> 00:10:06,160
methods that is adopted is

248
00:10:06,160 --> 00:10:07,519
appreciated

249
00:10:07,519 --> 00:10:09,839
and plus if anybody wants to try out the

250
00:10:09,839 --> 00:10:12,800
implementation uh of the data integrity

251
00:10:12,800 --> 00:10:14,160
option

252
00:10:14,160 --> 00:10:16,720
especially in the the kernel or in vpp

253
00:10:16,720 --> 00:10:18,480
where we have the iom data options

254
00:10:18,480 --> 00:10:19,680
implemented

255
00:10:19,680 --> 00:10:23,279
that is appreciated

256
00:10:23,279 --> 00:10:25,200
okay so that was about

257
00:10:25,200 --> 00:10:27,440
the data integrity draft i'll i'll just

258
00:10:27,440 --> 00:10:29,120
cover the deployment draft and then we

259
00:10:29,120 --> 00:10:31,120
could have discussions unless somebody

260
00:10:31,120 --> 00:10:33,360
has questions and we want to stop here

261
00:10:33,360 --> 00:10:37,040
specifically on the integrity draft

262
00:10:37,920 --> 00:10:40,240
okay

263
00:10:42,399 --> 00:10:44,079
actually i just jumped in queue quickly

264
00:10:44,079 --> 00:10:46,079
um a couple of questions on the

265
00:10:46,079 --> 00:10:48,800
integrity draft so yeah thank you

266
00:10:48,800 --> 00:10:52,320
very much for the work on cleaning it up

267
00:10:52,320 --> 00:10:55,600
kind of consolidating down to one option

268
00:10:55,600 --> 00:10:56,320
the

269
00:10:56,320 --> 00:10:59,360
two questions i wanted to check on was

270
00:10:59,360 --> 00:11:02,240
a status of implementing this solution

271
00:11:02,240 --> 00:11:04,480
and testing it um

272
00:11:04,480 --> 00:11:07,040
to see you know how it does this impact

273
00:11:07,040 --> 00:11:09,760
kind of the existing iom code bases and

274
00:11:09,760 --> 00:11:10,800
deployments

275
00:11:10,800 --> 00:11:12,959
and then the other question is

276
00:11:12,959 --> 00:11:14,720
should we

277
00:11:14,720 --> 00:11:15,680
um

278
00:11:15,680 --> 00:11:18,640
as a working group be requesting

279
00:11:18,640 --> 00:11:21,600
early sector review and when do we think

280
00:11:21,600 --> 00:11:23,200
we'd be ready

281
00:11:23,200 --> 00:11:24,880
to do that to get that input from the

282
00:11:24,880 --> 00:11:28,360
security area

283
00:11:32,240 --> 00:11:34,720
on the implementation i i think it's

284
00:11:34,720 --> 00:11:38,600
open for um

285
00:11:45,680 --> 00:11:47,839
looks like we may have lost

286
00:11:47,839 --> 00:11:50,079
sweat

287
00:11:51,279 --> 00:11:53,680
hit the wrong button i don't know um i'm

288
00:11:53,680 --> 00:11:55,279
not aware that anybody is coding the

289
00:11:55,279 --> 00:11:57,440
thing up right now i'm not sure whether

290
00:11:57,440 --> 00:11:59,920
justin is here who is driving most of

291
00:11:59,920 --> 00:12:01,360
the work on the kernel

292
00:12:01,360 --> 00:12:02,800
oh yeah we have just in here maybe he

293
00:12:02,800 --> 00:12:04,560
can go and speak up

294
00:12:04,560 --> 00:12:05,519
from

295
00:12:05,519 --> 00:12:06,800
this perspective on what he's been

296
00:12:06,800 --> 00:12:09,120
covering for either the colonel or

297
00:12:09,120 --> 00:12:11,040
yes colleagues also within the vpp

298
00:12:11,040 --> 00:12:12,959
implementation so i'm not sure where

299
00:12:12,959 --> 00:12:15,279
that work is uh but i'm not aware of

300
00:12:15,279 --> 00:12:17,839
anybody else um being actively coding

301
00:12:17,839 --> 00:12:19,279
this thing up so maybe we can have other

302
00:12:19,279 --> 00:12:20,959
people speak up here

303
00:12:20,959 --> 00:12:21,920
from

304
00:12:21,920 --> 00:12:24,399
perspective i think once we have i i

305
00:12:24,399 --> 00:12:26,560
would not feel comfortable going for a

306
00:12:26,560 --> 00:12:28,639
security review unless we have completed

307
00:12:28,639 --> 00:12:30,240
the security section which is one big

308
00:12:30,240 --> 00:12:32,160
leftover in the draw

309
00:12:32,160 --> 00:12:33,839
so that is something that we want to go

310
00:12:33,839 --> 00:12:34,959
and fill in

311
00:12:34,959 --> 00:12:36,320
um

312
00:12:36,320 --> 00:12:38,240
there was a little bit of a hush-hush

313
00:12:38,240 --> 00:12:39,760
well you know tommy when you kind of

314
00:12:39,760 --> 00:12:41,360
ping me can you get that out yeah i

315
00:12:41,360 --> 00:12:42,880
could get that out and

316
00:12:42,880 --> 00:12:45,760
um but um there is still a little bit of

317
00:12:45,760 --> 00:12:47,920
work to be done on the draft i think

318
00:12:47,920 --> 00:12:50,000
before we want to go and go for a proper

319
00:12:50,000 --> 00:12:51,519
security review

320
00:12:51,519 --> 00:12:53,200
um yeah that's sort of fitting in

321
00:12:53,200 --> 00:12:55,519
section six is mandatory that's what

322
00:12:55,519 --> 00:12:57,200
i've used

323
00:12:57,200 --> 00:12:59,920
great great okay so

324
00:12:59,920 --> 00:13:01,600
essentially our next step on this draft

325
00:13:01,600 --> 00:13:03,360
is filling that in and then once that's

326
00:13:03,360 --> 00:13:04,800
done

327
00:13:04,800 --> 00:13:07,839
we can get a security

328
00:13:07,920 --> 00:13:10,320
yeah along with what what is also asking

329
00:13:10,320 --> 00:13:12,639
right so we have two combinations listed

330
00:13:12,639 --> 00:13:14,480
right now for what people want to go and

331
00:13:14,480 --> 00:13:15,920
do from a signing perspective and the

332
00:13:15,920 --> 00:13:17,760
likes so what algorithms you would

333
00:13:17,760 --> 00:13:20,720
appreciate if there's others that people

334
00:13:20,720 --> 00:13:22,720
see as high priority let's go and speak

335
00:13:22,720 --> 00:13:24,480
up on the list please

336
00:13:24,480 --> 00:13:25,839
so that we have a relatively

337
00:13:25,839 --> 00:13:28,959
comprehensive set of things included

338
00:13:28,959 --> 00:13:31,360
um so that we are at least i think from

339
00:13:31,360 --> 00:13:33,040
a from a working group perspective given

340
00:13:33,040 --> 00:13:35,519
that this document is really a document

341
00:13:35,519 --> 00:13:36,959
that has been

342
00:13:36,959 --> 00:13:38,800
kind of shepherded and requested by the

343
00:13:38,800 --> 00:13:40,560
working group uh that we have a

344
00:13:40,560 --> 00:13:42,160
relatively good representation of what

345
00:13:42,160 --> 00:13:44,240
is in there

346
00:13:44,240 --> 00:13:46,160
right yeah

347
00:13:46,160 --> 00:13:48,399
so please speak up and voice opinions of

348
00:13:48,399 --> 00:13:50,160
what you want to go and see included so

349
00:13:50,160 --> 00:13:51,839
that we're comprehensive

350
00:13:51,839 --> 00:13:53,120
yeah

351
00:13:53,120 --> 00:13:55,199
i i would suggest

352
00:13:55,199 --> 00:13:56,399
the

353
00:13:56,399 --> 00:13:59,279
small set of algorithms like just let's

354
00:13:59,279 --> 00:14:01,279
you know choose kind of the best ones

355
00:14:01,279 --> 00:14:02,639
that we need

356
00:14:02,639 --> 00:14:04,480
but not

357
00:14:04,480 --> 00:14:05,600
too many

358
00:14:05,600 --> 00:14:07,199
uh

359
00:14:07,199 --> 00:14:08,880
in there because that often times is a

360
00:14:08,880 --> 00:14:09,920
bad

361
00:14:09,920 --> 00:14:11,040
right

362
00:14:11,040 --> 00:14:12,079
so it's

363
00:14:12,079 --> 00:14:14,160
symmetric the ones for asymmetric but if

364
00:14:14,160 --> 00:14:15,680
people have strong feelings around other

365
00:14:15,680 --> 00:14:18,399
things then let's go and get that in

366
00:14:18,399 --> 00:14:20,160
and as i said like um

367
00:14:20,160 --> 00:14:21,440
yeah i think we could probably give it

368
00:14:21,440 --> 00:14:22,880
another round for

369
00:14:22,880 --> 00:14:24,720
the next meeting that will hopefully be

370
00:14:24,720 --> 00:14:25,680
in person

371
00:14:25,680 --> 00:14:28,320
and uh then maybe we will

372
00:14:28,320 --> 00:14:30,959
really offer

373
00:14:35,839 --> 00:14:38,000
and hopefully we can also find out from

374
00:14:38,000 --> 00:14:39,920
implementations

375
00:14:39,920 --> 00:14:41,920
you know which algorithms are convenient

376
00:14:41,920 --> 00:14:44,399
for them to use or most conducive to

377
00:14:44,399 --> 00:14:45,680
their code base

378
00:14:45,680 --> 00:14:46,720
all right

379
00:14:46,720 --> 00:14:49,600
thank you that's all i had

380
00:14:53,199 --> 00:14:55,360
thank you sorry for the network glitch

381
00:14:55,360 --> 00:14:57,600
i'll i'll continue with the deployment

382
00:14:57,600 --> 00:14:59,839
draft

383
00:15:00,560 --> 00:15:03,279
again this was adopted

384
00:15:03,279 --> 00:15:06,720
recently and we have

385
00:15:07,519 --> 00:15:09,760
revised it based on

386
00:15:09,760 --> 00:15:12,399
basic feedback that was received some of

387
00:15:12,399 --> 00:15:14,320
the feedbacks uh some feedback is

388
00:15:14,320 --> 00:15:16,399
addressed in in the current zero zero

389
00:15:16,399 --> 00:15:17,680
version of the

390
00:15:17,680 --> 00:15:18,800
group draft

391
00:15:18,800 --> 00:15:23,040
uh we aligned the the limited domains

392
00:15:23,040 --> 00:15:26,720
per rfc 8799 and

393
00:15:26,720 --> 00:15:29,759
again aligned it with the ion data

394
00:15:29,759 --> 00:15:31,839
terminology

395
00:15:31,839 --> 00:15:33,680
which was

396
00:15:33,680 --> 00:15:37,959
which was good feedback that we received

397
00:15:40,160 --> 00:15:42,240
uh we are going to continue keeping uh

398
00:15:42,240 --> 00:15:45,600
this alive uh we want to keep it up to

399
00:15:45,600 --> 00:15:48,079
date with uh the new deployment

400
00:15:48,079 --> 00:15:50,720
experience that we have with

401
00:15:50,720 --> 00:15:52,160
the the

402
00:15:52,160 --> 00:15:54,959
kernel implementation as well as

403
00:15:54,959 --> 00:15:57,120
another open source implementation in

404
00:15:57,120 --> 00:15:59,680
fido vpp

405
00:15:59,680 --> 00:16:03,440
we do have iom support for wireshark

406
00:16:03,440 --> 00:16:05,199
which we we need to update the draft

407
00:16:05,199 --> 00:16:06,399
with

408
00:16:06,399 --> 00:16:09,040
further reviews are appreciated

409
00:16:09,040 --> 00:16:10,800
and before we go into the discussion i

410
00:16:10,800 --> 00:16:12,560
would just i want to go and give a big

411
00:16:12,560 --> 00:16:14,959
hand to to al morton who caught a lot of

412
00:16:14,959 --> 00:16:17,120
nits and so thanks al for for all the

413
00:16:17,120 --> 00:16:19,040
feedback that you've been given until to

414
00:16:19,040 --> 00:16:23,240
improve also the language and the draft

415
00:16:28,000 --> 00:16:29,040
like

416
00:16:29,040 --> 00:16:32,839
show in the queue

417
00:16:38,079 --> 00:16:39,199
um

418
00:16:39,199 --> 00:16:43,319
sherman do you want to speak up

419
00:16:50,000 --> 00:16:51,600
during the

420
00:16:51,600 --> 00:16:55,120
working club adoption poll of this job

421
00:16:55,120 --> 00:16:56,720
i sent my

422
00:16:56,720 --> 00:16:59,680
support and also a suggestion

423
00:16:59,680 --> 00:17:02,800
to include

424
00:17:02,800 --> 00:17:05,359
iom encapsulation over beer

425
00:17:05,359 --> 00:17:06,480
into

426
00:17:06,480 --> 00:17:07,520
this

427
00:17:07,520 --> 00:17:10,959
chopped the scope of this job

428
00:17:10,959 --> 00:17:13,359
but uh

429
00:17:13,359 --> 00:17:14,880
it's not

430
00:17:14,880 --> 00:17:16,720
in the zero zero version working group

431
00:17:16,720 --> 00:17:19,339
draft

432
00:17:19,339 --> 00:17:22,079
[Music]

433
00:17:22,079 --> 00:17:25,439
is there any special reason why uh blm

434
00:17:25,439 --> 00:17:28,400
is not included

435
00:17:31,039 --> 00:17:33,280
i we have not addressed uh sorry good

436
00:17:33,280 --> 00:17:34,960
friend

437
00:17:34,960 --> 00:17:36,799
yeah you can blame me i think i forgot

438
00:17:36,799 --> 00:17:39,200
about that i'm sorry for that

439
00:17:39,200 --> 00:17:40,480
okay thank you

440
00:17:40,480 --> 00:17:42,240
we'll fix that

441
00:17:42,240 --> 00:17:43,919
good point thanks for bringing it up i'm

442
00:17:43,919 --> 00:17:45,280
sorry

443
00:17:45,280 --> 00:17:47,840
okay

444
00:18:07,840 --> 00:18:09,200
yep um

445
00:18:09,200 --> 00:18:10,880
that sounds good and i think we gained

446
00:18:10,880 --> 00:18:12,799
back a lot of time which is very helpful

447
00:18:12,799 --> 00:18:14,640
so all the other

448
00:18:14,640 --> 00:18:17,840
presentations will appreciate it

449
00:18:17,840 --> 00:18:19,679
thank you

450
00:18:19,679 --> 00:18:21,120
so

451
00:18:21,120 --> 00:18:26,320
next up we have iom confistate

452
00:18:26,640 --> 00:18:28,160
and showman do you want to come back up

453
00:18:28,160 --> 00:18:31,960
for that great

454
00:18:43,679 --> 00:18:45,440
is my slide

455
00:18:45,440 --> 00:18:47,200
okay to you

456
00:18:47,200 --> 00:18:49,039
it looks good to me

457
00:18:49,039 --> 00:18:52,400
okay good thank you thank you tommy

458
00:18:52,400 --> 00:18:54,640
uh hello everyone uh it's xiaomi

459
00:18:54,640 --> 00:18:55,679
speaking

460
00:18:55,679 --> 00:18:58,320
this presentation is a accurate request

461
00:18:58,320 --> 00:19:00,720
to apply for enabled institution

462
00:19:00,720 --> 00:19:02,720
capabilities

463
00:19:02,720 --> 00:19:04,880
this is a working group draft and the

464
00:19:04,880 --> 00:19:08,000
latest version is zero one

465
00:19:08,000 --> 00:19:10,960
zero zero version of this chapter has

466
00:19:10,960 --> 00:19:15,440
already been presented at the last itf

467
00:19:19,919 --> 00:19:22,000
this is the summary of the

468
00:19:22,000 --> 00:19:25,520
two main updates in this revision

469
00:19:25,520 --> 00:19:28,640
firstly this revision changes the format

470
00:19:28,640 --> 00:19:31,039
of iom capabilities query

471
00:19:31,039 --> 00:19:32,320
and

472
00:19:32,320 --> 00:19:36,400
response from dlv to container

473
00:19:36,400 --> 00:19:40,080
and the reason is that for icmp v6

474
00:19:40,080 --> 00:19:41,200
and

475
00:19:41,200 --> 00:19:43,520
taking example by rc

476
00:19:43,520 --> 00:19:45,440
8335

477
00:19:45,440 --> 00:19:48,799
iom capabilities query is not

478
00:19:48,799 --> 00:19:51,679
a tov of echo request

479
00:19:51,679 --> 00:19:55,039
but the echo request itself

480
00:19:55,039 --> 00:19:57,520
the same goes to iom capabilities

481
00:19:57,520 --> 00:19:59,520
response

482
00:19:59,520 --> 00:20:02,000
it's also not a tov

483
00:20:02,000 --> 00:20:06,960
but the echo replied itself

484
00:20:06,960 --> 00:20:09,280
secondly this revision changes the

485
00:20:09,280 --> 00:20:12,480
format of response contents

486
00:20:12,480 --> 00:20:15,919
from sub to v to object

487
00:20:15,919 --> 00:20:18,000
and the reason is that

488
00:20:18,000 --> 00:20:21,440
for icmp v6

489
00:20:21,440 --> 00:20:24,159
the extensions contained in echo request

490
00:20:24,159 --> 00:20:25,360
reply

491
00:20:25,360 --> 00:20:29,918
are not to sub-tovs but objects

492
00:20:30,320 --> 00:20:32,000
also note that

493
00:20:32,000 --> 00:20:34,640
in six-man working group

494
00:20:34,640 --> 00:20:37,760
and the zero zero version uh

495
00:20:37,760 --> 00:20:40,640
individual draft

496
00:20:40,720 --> 00:20:44,320
javascript uh six-man icmp v6 iom comp

497
00:20:44,320 --> 00:20:45,520
state

498
00:20:45,520 --> 00:20:47,600
has been posted

499
00:20:47,600 --> 00:20:50,559
before ietf112

500
00:20:50,559 --> 00:20:51,919
and

501
00:20:51,919 --> 00:20:54,400
this new individual draft

502
00:20:54,400 --> 00:20:56,880
has been presented in six-man working

503
00:20:56,880 --> 00:20:58,000
group

504
00:20:58,000 --> 00:21:01,400
on tuesday

505
00:21:02,159 --> 00:21:05,840
my my personal feeling is that uh

506
00:21:05,840 --> 00:21:09,679
i've got positive feedback from there

507
00:21:09,679 --> 00:21:11,520
uh the internet

508
00:21:11,520 --> 00:21:14,240
id and six man chairs

509
00:21:14,240 --> 00:21:17,679
uh have no objection to

510
00:21:17,679 --> 00:21:20,720
extend icmp v6 for iom capabilities

511
00:21:20,720 --> 00:21:23,039
discovery

512
00:21:23,039 --> 00:21:24,960
as long as

513
00:21:24,960 --> 00:21:27,679
the ippm working group

514
00:21:27,679 --> 00:21:31,120
has a rough consensus

515
00:21:31,120 --> 00:21:35,039
is the right way to proceed

516
00:21:40,480 --> 00:21:43,520
this slide is about the first

517
00:21:43,520 --> 00:21:45,200
main update

518
00:21:45,200 --> 00:21:46,000
that

519
00:21:46,000 --> 00:21:48,159
changes query header and the response

520
00:21:48,159 --> 00:21:49,600
header

521
00:21:49,600 --> 00:21:51,679
from type lens to

522
00:21:51,679 --> 00:21:54,320
container header

523
00:21:54,320 --> 00:21:56,720
this figure shows the

524
00:21:56,720 --> 00:21:58,480
instantiation

525
00:21:58,480 --> 00:22:00,480
of container header

526
00:22:00,480 --> 00:22:05,039
for icmp v6 iom echo messages

527
00:22:05,039 --> 00:22:07,200
it can be seen that the container header

528
00:22:07,200 --> 00:22:09,200
of icmpv6

529
00:22:09,200 --> 00:22:12,640
does not include exactly uh type in the

530
00:22:12,640 --> 00:22:14,320
lens

531
00:22:14,320 --> 00:22:17,600
it includes a type code checksum

532
00:22:17,600 --> 00:22:20,159
identifier sequence number and

533
00:22:20,159 --> 00:22:23,120
a number of namespace ids

534
00:22:23,120 --> 00:22:24,840
so this change is

535
00:22:24,840 --> 00:22:29,520
needed also note that for nps lsb ping

536
00:22:29,520 --> 00:22:32,159
f sfc ping and vrp

537
00:22:32,159 --> 00:22:36,640
the container header is also applicable

538
00:22:39,280 --> 00:22:41,440
this slide is about the second main

539
00:22:41,440 --> 00:22:42,720
update

540
00:22:42,720 --> 00:22:45,440
that changes response con contents

541
00:22:45,440 --> 00:22:47,039
header from

542
00:22:47,039 --> 00:22:48,159
sub tube

543
00:22:48,159 --> 00:22:52,320
subtype lens to object header

544
00:22:52,320 --> 00:22:54,799
this figure shows the

545
00:22:54,799 --> 00:22:57,600
instantiation of object header

546
00:22:57,600 --> 00:23:01,840
for icmp v6 iom capabilities object

547
00:23:01,840 --> 00:23:03,919
it can be seen that the object header of

548
00:23:03,919 --> 00:23:06,159
icmpv6

549
00:23:06,159 --> 00:23:09,679
does not include exactly uh subtype and

550
00:23:09,679 --> 00:23:11,600
the lens

551
00:23:11,600 --> 00:23:13,200
it includes a

552
00:23:13,200 --> 00:23:15,919
lens class number and the c type

553
00:23:15,919 --> 00:23:19,200
so this change is needed

554
00:23:19,200 --> 00:23:22,240
also note that for mpls ping

555
00:23:22,240 --> 00:23:25,039
sfc ping and the beer ping

556
00:23:25,039 --> 00:23:29,360
the object header is also applicable

557
00:23:34,320 --> 00:23:37,200
except for them two main updates there

558
00:23:37,200 --> 00:23:39,440
are also some other uh mentionable

559
00:23:39,440 --> 00:23:40,480
updates

560
00:23:40,480 --> 00:23:43,200
the first one that a list of namespace

561
00:23:43,200 --> 00:23:44,320
ids

562
00:23:44,320 --> 00:23:48,159
must be included in an echo request

563
00:23:48,159 --> 00:23:52,480
in last version uh may is used here

564
00:23:52,480 --> 00:23:56,400
we think master is more appropriate

565
00:23:56,400 --> 00:23:59,200
specifically if you know any other

566
00:23:59,200 --> 00:24:03,120
namespace id then a default one

567
00:24:03,120 --> 00:24:04,480
zero x

568
00:24:04,480 --> 00:24:07,520
four zero is provisioned at the iom

569
00:24:07,520 --> 00:24:09,520
encapsulating node

570
00:24:09,520 --> 00:24:12,480
then the default one must be included

571
00:24:12,480 --> 00:24:14,640
if other namespace ids then the default

572
00:24:14,640 --> 00:24:17,120
one are provisioned at the i am

573
00:24:17,120 --> 00:24:18,799
encapsulating node

574
00:24:18,799 --> 00:24:20,880
then the provision the namespace ids

575
00:24:20,880 --> 00:24:22,159
must be

576
00:24:22,159 --> 00:24:24,000
included

577
00:24:24,000 --> 00:24:26,559
and the second dimensionable update

578
00:24:26,559 --> 00:24:28,720
is that for the feature described in

579
00:24:28,720 --> 00:24:31,679
this document to work

580
00:24:31,679 --> 00:24:33,520
more optional pre

581
00:24:33,520 --> 00:24:36,240
conditions are provided

582
00:24:36,240 --> 00:24:40,159
they include the explicit path is used

583
00:24:40,159 --> 00:24:43,039
or only one path can be used

584
00:24:43,039 --> 00:24:46,400
or echo request message experiences

585
00:24:46,400 --> 00:24:48,640
the same ecmp processing

586
00:24:48,640 --> 00:24:51,679
as a data packet

587
00:24:55,919 --> 00:24:58,720
the third mentionable update is that one

588
00:24:58,720 --> 00:25:00,240
new double bit

589
00:25:00,240 --> 00:25:03,520
is borrowed from the result field

590
00:25:03,520 --> 00:25:05,440
of iom pre-allocated tracing

591
00:25:05,440 --> 00:25:07,440
capabilities object

592
00:25:07,440 --> 00:25:09,919
and incremental tracing capabilities

593
00:25:09,919 --> 00:25:11,279
object

594
00:25:11,279 --> 00:25:12,840
it's used to

595
00:25:12,840 --> 00:25:16,720
indicate whether the object carries

596
00:25:16,720 --> 00:25:19,360
a 16-bit egress

597
00:25:19,360 --> 00:25:22,240
interface id or the

598
00:25:22,240 --> 00:25:24,400
object carries a

599
00:25:24,400 --> 00:25:26,799
32-bit egress

600
00:25:26,799 --> 00:25:29,840
interface id

601
00:25:33,840 --> 00:25:36,720
so uh next steps for

602
00:25:36,720 --> 00:25:38,799
this chapter we

603
00:25:38,799 --> 00:25:40,400
also

604
00:25:40,400 --> 00:25:42,720
ask for more reviews and comments

605
00:25:42,720 --> 00:25:43,760
uh we'll

606
00:25:43,760 --> 00:25:47,360
revise this chapter to improve it

607
00:25:47,360 --> 00:25:49,120
and then

608
00:25:49,120 --> 00:25:51,200
we'll ask for working group

609
00:25:51,200 --> 00:25:52,880
classical

610
00:25:52,880 --> 00:25:56,679
and thank you

611
00:25:59,360 --> 00:26:03,120
all right uh thank you frank go ahead

612
00:26:04,000 --> 00:26:05,600
comments um

613
00:26:05,600 --> 00:26:07,679
the first one is if you go back to slide

614
00:26:07,679 --> 00:26:09,039
six

615
00:26:09,039 --> 00:26:10,720
uh what we

616
00:26:10,720 --> 00:26:14,159
seemingly do right now is that we have a

617
00:26:14,159 --> 00:26:16,000
kind of opinionated choice of what we

618
00:26:16,000 --> 00:26:18,000
want to go and get included into one of

619
00:26:18,000 --> 00:26:19,200
these

620
00:26:19,200 --> 00:26:22,720
echo replies that you're

621
00:26:22,720 --> 00:26:25,679
transporting back to the requester

622
00:26:25,679 --> 00:26:27,200
which is kind of a bit field that we

623
00:26:27,200 --> 00:26:28,960
come up with here right and it's

624
00:26:28,960 --> 00:26:31,279
inspired by the data types that we have

625
00:26:31,279 --> 00:26:34,559
in the data draft but it's not the same

626
00:26:34,559 --> 00:26:36,799
rather than coming up with kind of new

627
00:26:36,799 --> 00:26:39,679
definitions here would it make sense

628
00:26:39,679 --> 00:26:41,840
to rather

629
00:26:41,840 --> 00:26:44,240
come up with an encapsulation or a

630
00:26:44,240 --> 00:26:46,240
translation of the yang model that we

631
00:26:46,240 --> 00:26:47,120
have

632
00:26:47,120 --> 00:26:49,840
that describes the various fields

633
00:26:49,840 --> 00:26:51,440
into an encapsulation into your

634
00:26:51,440 --> 00:26:52,960
container that you want to go and carry

635
00:26:52,960 --> 00:26:54,559
in your protocol

636
00:26:54,559 --> 00:26:56,080
i think that would make much more sense

637
00:26:56,080 --> 00:26:58,240
and it would avoid the redefinition of

638
00:26:58,240 --> 00:26:59,919
fields rather than

639
00:26:59,919 --> 00:27:01,840
yeah what we have here so i think

640
00:27:01,840 --> 00:27:03,919
aligning that and coming up with a

641
00:27:03,919 --> 00:27:05,600
mapping from the yang model that would

642
00:27:05,600 --> 00:27:08,000
go and be encapsulated over icmp or

643
00:27:08,000 --> 00:27:10,080
whatever carrier protocol you want

644
00:27:10,080 --> 00:27:12,320
i think it's the cleaner approach

645
00:27:12,320 --> 00:27:14,400
that's at least my suggestion and the

646
00:27:14,400 --> 00:27:16,640
other point that i have is

647
00:27:16,640 --> 00:27:19,600
we are starting to use icmp as a

648
00:27:19,600 --> 00:27:21,520
network management protocol

649
00:27:21,520 --> 00:27:23,200
so we should also go and treat it as a

650
00:27:23,200 --> 00:27:26,159
network management protocol here

651
00:27:26,159 --> 00:27:28,320
in the security section you say yeah

652
00:27:28,320 --> 00:27:30,480
icmp can be

653
00:27:30,480 --> 00:27:33,919
eventually secured with ah or even esp

654
00:27:33,919 --> 00:27:35,840
headers included

655
00:27:35,840 --> 00:27:38,000
um that's fine but i think we want to go

656
00:27:38,000 --> 00:27:39,520
on the top language language that is

657
00:27:39,520 --> 00:27:41,279
similar to what we use say for instance

658
00:27:41,279 --> 00:27:43,440
in the netconf rfc

659
00:27:43,440 --> 00:27:45,760
uh so there should be more

660
00:27:45,760 --> 00:27:48,720
less cans but more shoulds of what you

661
00:27:48,720 --> 00:27:50,640
want to go and use so that we have

662
00:27:50,640 --> 00:27:52,960
proper security in place

663
00:27:52,960 --> 00:27:55,200
because you probably need

664
00:27:55,200 --> 00:27:57,200
at least

665
00:27:57,200 --> 00:27:59,840
some form of integrity checking and even

666
00:27:59,840 --> 00:28:01,600
more right because you can retrieve a

667
00:28:01,600 --> 00:28:03,039
load of configuration information from

668
00:28:03,039 --> 00:28:04,960
the notes this way

669
00:28:04,960 --> 00:28:09,679
between the requester and the responder

670
00:28:11,279 --> 00:28:14,080
that's it thanks

671
00:28:15,200 --> 00:28:17,200
uh thank you

672
00:28:17,200 --> 00:28:19,919
i i think uh

673
00:28:19,919 --> 00:28:23,840
i i i uh know your comments uh

674
00:28:23,840 --> 00:28:27,279
uh from uh previous itf meetings

675
00:28:27,279 --> 00:28:28,799
but uh

676
00:28:28,799 --> 00:28:33,360
i'm not sure uh how can i uh encapsulate

677
00:28:33,360 --> 00:28:35,360
the young model uh

678
00:28:35,360 --> 00:28:37,360
data into the

679
00:28:37,360 --> 00:28:38,720
uh

680
00:28:38,720 --> 00:28:42,080
into this response message

681
00:28:42,080 --> 00:28:45,840
so is is that your uh first suggestion

682
00:28:45,840 --> 00:28:48,159
to include the young model data into the

683
00:28:48,159 --> 00:28:50,720
response

684
00:28:52,000 --> 00:28:54,080
go and build an encoding

685
00:28:54,080 --> 00:28:56,320
for the yang model

686
00:28:56,320 --> 00:28:57,760
uh similar to what we've done for

687
00:28:57,760 --> 00:28:59,120
netconf right

688
00:28:59,120 --> 00:29:00,159
um

689
00:29:00,159 --> 00:29:02,799
into uh what you're transporting here

690
00:29:02,799 --> 00:29:04,640
and that would align that we have in

691
00:29:04,640 --> 00:29:07,679
indeed like the yang model represented

692
00:29:07,679 --> 00:29:08,559
in

693
00:29:08,559 --> 00:29:10,000
the communication that you do between

694
00:29:10,000 --> 00:29:11,840
the notes because end of the day i think

695
00:29:11,840 --> 00:29:13,360
what you have with icmp define a

696
00:29:13,360 --> 00:29:15,039
container and then you just ship

697
00:29:15,039 --> 00:29:16,960
messages over that particular container

698
00:29:16,960 --> 00:29:18,880
back and forth between the node and i

699
00:29:18,880 --> 00:29:20,799
don't really see a reason why we should

700
00:29:20,799 --> 00:29:22,240
go and treat icmp as a different

701
00:29:22,240 --> 00:29:23,760
protocol than any other network

702
00:29:23,760 --> 00:29:25,120
management protocol that you're using

703
00:29:25,120 --> 00:29:27,120
here

704
00:29:27,120 --> 00:29:29,360
right so the reason the wheel for a

705
00:29:29,360 --> 00:29:31,440
specific let's not create a specific

706
00:29:31,440 --> 00:29:32,960
encapsulation of a network management

707
00:29:32,960 --> 00:29:35,440
protocol into icmp rather than

708
00:29:35,440 --> 00:29:37,679
we have something generic for managing

709
00:29:37,679 --> 00:29:40,880
individual um icmp individual iom notes

710
00:29:40,880 --> 00:29:42,880
and let's stay with that and then you

711
00:29:42,880 --> 00:29:45,279
just treat icmp as a carrier or beer as

712
00:29:45,279 --> 00:29:48,320
a carrier or whatever

713
00:29:48,799 --> 00:29:51,919
to my understanding uh if if we use

714
00:29:51,919 --> 00:29:55,440
netconf here then we need to

715
00:29:55,440 --> 00:29:58,080
establish a net kind of connection

716
00:29:58,080 --> 00:30:00,880
between the encapsulated node and

717
00:30:00,880 --> 00:30:03,039
each transition nodes

718
00:30:03,039 --> 00:30:05,279
right

719
00:30:06,480 --> 00:30:08,720
do netconf but i think you given that

720
00:30:08,720 --> 00:30:10,320
you want to go and carry

721
00:30:10,320 --> 00:30:12,640
network management information over a

722
00:30:12,640 --> 00:30:14,320
channel you don't want to use netconf

723
00:30:14,320 --> 00:30:16,399
you you're creating your own transport

724
00:30:16,399 --> 00:30:18,320
protocol using icmp

725
00:30:18,320 --> 00:30:21,039
but i think the

726
00:30:21,039 --> 00:30:23,600
there is no need to go and redefine

727
00:30:23,600 --> 00:30:25,919
what you do from an object's perspective

728
00:30:25,919 --> 00:30:29,520
because that is in the young model

729
00:30:29,520 --> 00:30:31,279
the reason why

730
00:30:31,279 --> 00:30:32,559
we choose

731
00:30:32,559 --> 00:30:34,240
yeah

732
00:30:34,240 --> 00:30:36,399
the reason why

733
00:30:36,399 --> 00:30:38,080
okay tommy

734
00:30:38,080 --> 00:30:40,720
yeah i think

735
00:30:40,720 --> 00:30:43,440
we're a little over time on this item

736
00:30:43,440 --> 00:30:46,640
we're overall ahead on time but um

737
00:30:46,640 --> 00:30:47,919
i think this is a

738
00:30:47,919 --> 00:30:50,480
great discussion um i think this is a

739
00:30:50,480 --> 00:30:53,279
good point to drill into um

740
00:30:53,279 --> 00:30:55,760
and maybe this is something that

741
00:30:55,760 --> 00:30:57,440
frank you know if

742
00:30:57,440 --> 00:30:58,880
we can take this

743
00:30:58,880 --> 00:31:00,159
to the list

744
00:31:00,159 --> 00:31:01,919
and just kind of go

745
00:31:01,919 --> 00:31:03,840
in depth on the different options about

746
00:31:03,840 --> 00:31:05,519
how we can

747
00:31:05,519 --> 00:31:06,799
not end up

748
00:31:06,799 --> 00:31:07,840
uh

749
00:31:07,840 --> 00:31:09,440
reinventing the wheel for the signal i

750
00:31:09,440 --> 00:31:10,799
think that would be a good discussion to

751
00:31:10,799 --> 00:31:13,279
have there

752
00:31:14,159 --> 00:31:17,640
does that work for everyone

753
00:31:22,799 --> 00:31:24,240
all right

754
00:31:24,240 --> 00:31:29,080
any other questions or comments on this

755
00:31:34,240 --> 00:31:37,200
okay it doesn't look like it

756
00:31:37,200 --> 00:31:39,279
okay thank you yeah thank you thank you

757
00:31:39,279 --> 00:31:41,919
very much this is good good update

758
00:31:41,919 --> 00:31:43,120
okay

759
00:31:43,120 --> 00:31:44,840
let's let's hammer out the

760
00:31:44,840 --> 00:31:47,360
details be good

761
00:31:47,360 --> 00:31:49,919
all right next up we have explicit flow

762
00:31:49,919 --> 00:31:51,039
measurements

763
00:31:51,039 --> 00:31:52,320
or

764
00:31:52,320 --> 00:31:55,678
i want more than one spin bit

765
00:31:59,120 --> 00:32:01,840
um

766
00:32:02,240 --> 00:32:04,399
all right tomorrow

767
00:32:04,399 --> 00:32:05,840
hi

768
00:32:05,840 --> 00:32:06,880
hello

769
00:32:06,880 --> 00:32:08,080
hello

770
00:32:08,080 --> 00:32:10,480
hello we can hear you do you want to

771
00:32:10,480 --> 00:32:11,840
share your slides

772
00:32:11,840 --> 00:32:14,559
using the preloaded slides yes you can

773
00:32:14,559 --> 00:32:17,279
share my slide

774
00:32:17,279 --> 00:32:18,960
you can drive it yourself so if next to

775
00:32:18,960 --> 00:32:20,640
the hand icon

776
00:32:20,640 --> 00:32:22,159
okay document

777
00:32:22,159 --> 00:32:24,399
yep

778
00:32:26,720 --> 00:32:29,519
so if you click on that

779
00:32:29,519 --> 00:32:32,640
little file icon

780
00:32:33,360 --> 00:32:35,120
file icon is this

781
00:32:35,120 --> 00:32:37,440
okay yes yep exactly and so now i'm

782
00:32:37,440 --> 00:32:38,799
going to approve you and then you should

783
00:32:38,799 --> 00:32:40,880
be able to select

784
00:32:40,880 --> 00:32:42,159
through all of the slides and find the

785
00:32:42,159 --> 00:32:44,880
ones okay

786
00:32:48,880 --> 00:32:51,279
okay

787
00:33:07,360 --> 00:33:10,360
is

788
00:33:20,240 --> 00:33:23,240
verbs

789
00:33:36,480 --> 00:33:38,880
okay thank you i find

790
00:33:38,880 --> 00:33:40,799
sure okay

791
00:33:40,799 --> 00:33:43,360
there we go okay

792
00:33:43,360 --> 00:33:46,320
we can start

793
00:33:46,880 --> 00:33:48,159
okay

794
00:33:48,159 --> 00:33:49,840
you can hear me

795
00:33:49,840 --> 00:33:52,320
it's good to sound

796
00:33:52,320 --> 00:33:55,279
okay we can start

797
00:33:55,600 --> 00:33:58,559
okay i can summarize in a simple same

798
00:33:58,559 --> 00:33:59,919
sentence

799
00:33:59,919 --> 00:34:02,399
the specific measurement concept

800
00:34:02,399 --> 00:34:04,240
explicit flow measurement techniques

801
00:34:04,240 --> 00:34:05,919
employ a few marking bits inside the

802
00:34:05,919 --> 00:34:07,679
head of each packet for los angeles

803
00:34:07,679 --> 00:34:09,520
measurement protocol independent

804
00:34:09,520 --> 00:34:11,679
evaluable for encryption either import

805
00:34:11,679 --> 00:34:13,520
protocols in particular

806
00:34:13,520 --> 00:34:16,719
the metrics described in this draft are

807
00:34:16,719 --> 00:34:20,079
several the first one is the rtt matrix

808
00:34:20,079 --> 00:34:22,079
that we expand the

809
00:34:22,079 --> 00:34:24,000
first idea of

810
00:34:24,000 --> 00:34:26,800
spin bit with the idea of delay bit and

811
00:34:26,800 --> 00:34:28,960
the new idea of

812
00:34:28,960 --> 00:34:30,320
hidden

813
00:34:30,320 --> 00:34:31,520
rtt

814
00:34:31,520 --> 00:34:33,599
that it can be applied

815
00:34:33,599 --> 00:34:36,239
both for spin bit and for delay b

816
00:34:36,239 --> 00:34:37,760
because it's possible to delay the

817
00:34:37,760 --> 00:34:40,560
signal from a certain amount of time in

818
00:34:40,560 --> 00:34:42,159
order to

819
00:34:42,159 --> 00:34:44,960
give them the real rtt for people that

820
00:34:44,960 --> 00:34:48,159
are not allowed to understand it after

821
00:34:48,159 --> 00:34:50,480
there is the round three packet loss

822
00:34:50,480 --> 00:34:51,679
that is

823
00:34:51,679 --> 00:34:53,918
made using the spin beat and the round

824
00:34:53,918 --> 00:34:56,000
three plus bit the t bit

825
00:34:56,000 --> 00:34:57,920
and finally there are two options for

826
00:34:57,920 --> 00:35:00,000
the one-way packet loss the first one is

827
00:35:00,000 --> 00:35:03,440
the square bit that is

828
00:35:03,440 --> 00:35:06,960
already noun techniques in 83

829
00:35:06,960 --> 00:35:09,040
21 fc

830
00:35:09,040 --> 00:35:11,839
and they lost event beat as a second bit

831
00:35:11,839 --> 00:35:15,200
of in the in alternative the square bit

832
00:35:15,200 --> 00:35:17,440
the same bit with the reflection square

833
00:35:17,440 --> 00:35:19,839
with that reflection

834
00:35:19,839 --> 00:35:20,960
from

835
00:35:20,960 --> 00:35:23,599
the other side the square wave that they

836
00:35:23,599 --> 00:35:26,640
could be to generate

837
00:35:26,960 --> 00:35:29,040
again

838
00:35:29,040 --> 00:35:32,079
there is some implementation both in the

839
00:35:32,079 --> 00:35:33,920
academy and

840
00:35:33,920 --> 00:35:36,000
in the field

841
00:35:36,000 --> 00:35:38,160
in the last academics we experimented

842
00:35:38,160 --> 00:35:40,560
with other companies for example

843
00:35:40,560 --> 00:35:42,480
ericsson huawei and so on

844
00:35:42,480 --> 00:35:45,200
some experiments about this quick

845
00:35:45,200 --> 00:35:46,640
measurement there are some

846
00:35:46,640 --> 00:35:48,640
implementation in the field the first

847
00:35:48,640 --> 00:35:50,880
one that we

848
00:35:50,880 --> 00:35:52,720
displaying this transparency is the

849
00:35:52,720 --> 00:35:55,440
recommendation implementation on android

850
00:35:55,440 --> 00:35:57,440
mobile phones

851
00:35:57,440 --> 00:36:00,560
that is inspired the draft about user

852
00:36:00,560 --> 00:36:03,760
devices uh monitoring that is presented

853
00:36:03,760 --> 00:36:06,560
in the last part of this meeting

854
00:36:06,560 --> 00:36:08,720
there is the ericsson implementation

855
00:36:08,720 --> 00:36:10,640
core network problem that detects the

856
00:36:10,640 --> 00:36:12,240
spin beat

857
00:36:12,240 --> 00:36:14,400
title at marking and make the

858
00:36:14,400 --> 00:36:15,680
measurement

859
00:36:15,680 --> 00:36:17,760
the orange akamai implementation that is

860
00:36:17,760 --> 00:36:19,760
the first one that implement on the

861
00:36:19,760 --> 00:36:23,359
field the packet loss using qubit and

862
00:36:23,359 --> 00:36:24,800
albeit

863
00:36:24,800 --> 00:36:26,640
the arcane university had an

864
00:36:26,640 --> 00:36:28,640
experimental implementation they

865
00:36:28,640 --> 00:36:32,720
presented a paper in an fbw

866
00:36:32,720 --> 00:36:36,880
that compared all the techniques that we

867
00:36:36,880 --> 00:36:39,839
described in this draft albeit

868
00:36:39,839 --> 00:36:43,440
arbit and tibit and they

869
00:36:43,440 --> 00:36:45,440
experimented it and

870
00:36:45,440 --> 00:36:48,240
concluded that they works with various

871
00:36:48,240 --> 00:36:49,680
pros and cons

872
00:36:49,680 --> 00:36:52,160
and finally also by way is starting to

873
00:36:52,160 --> 00:36:54,560
work on the topic and with presenting

874
00:36:54,560 --> 00:36:57,040
next academics or some experimental

875
00:36:57,040 --> 00:36:58,960
trials

876
00:36:58,960 --> 00:36:59,920
okay

877
00:36:59,920 --> 00:37:01,839
some words on the hidden beats that is

878
00:37:01,839 --> 00:37:05,680
the last last bit that we introduced

879
00:37:05,680 --> 00:37:08,720
in this draft in the last the version

880
00:37:08,720 --> 00:37:11,040
that we presented in july

881
00:37:11,040 --> 00:37:12,800
the idea is

882
00:37:12,800 --> 00:37:15,839
is born because the

883
00:37:15,839 --> 00:37:18,640
spin bit is not so much implemented

884
00:37:18,640 --> 00:37:20,720
we using our

885
00:37:20,720 --> 00:37:23,359
devices we spread

886
00:37:23,359 --> 00:37:25,359
some

887
00:37:25,359 --> 00:37:27,839
probes on our

888
00:37:27,839 --> 00:37:29,599
mobile phones that

889
00:37:29,599 --> 00:37:31,200
telecom italia

890
00:37:31,200 --> 00:37:33,920
uses for some experimentation in our

891
00:37:33,920 --> 00:37:35,440
network and we

892
00:37:35,440 --> 00:37:38,160
saw that there isn't uh

893
00:37:38,160 --> 00:37:41,760
market packets inside the quick quick is

894
00:37:41,760 --> 00:37:44,400
quite used for example by google

895
00:37:44,400 --> 00:37:46,640
application but also facebook

896
00:37:46,640 --> 00:37:48,720
application and many others

897
00:37:48,720 --> 00:37:52,880
but no spin bit is marked so it is uh

898
00:37:52,880 --> 00:37:55,599
implementation that is defined as not

899
00:37:55,599 --> 00:37:58,000
mandatory in the standards

900
00:37:58,000 --> 00:38:01,680
in the fc 9000 is not implemented in the

901
00:38:01,680 --> 00:38:02,720
field

902
00:38:02,720 --> 00:38:03,920
uh

903
00:38:03,920 --> 00:38:05,119
in italy

904
00:38:05,119 --> 00:38:06,240
almost

905
00:38:06,240 --> 00:38:08,400
but i think all over the world is the

906
00:38:08,400 --> 00:38:11,119
same so we think that to

907
00:38:11,119 --> 00:38:13,200
add a feature to

908
00:38:13,200 --> 00:38:15,760
that we need that then did i beat but

909
00:38:15,760 --> 00:38:18,160
it's possible so to have the hidden spin

910
00:38:18,160 --> 00:38:20,400
beat in order to

911
00:38:20,400 --> 00:38:23,119
mask the real rtt

912
00:38:23,119 --> 00:38:26,400
and introducing this simple mechanism

913
00:38:26,400 --> 00:38:28,240
that adds some

914
00:38:28,240 --> 00:38:30,480
delay in the reflection so the packets

915
00:38:30,480 --> 00:38:32,240
are reflected

916
00:38:32,240 --> 00:38:34,880
the real traffic works in the same way

917
00:38:34,880 --> 00:38:36,880
there is no delay in the real traffic

918
00:38:36,880 --> 00:38:38,880
but the markings delayed so it's

919
00:38:38,880 --> 00:38:41,119
possible to mask the reality but it's

920
00:38:41,119 --> 00:38:43,839
possible to have some measurement but

921
00:38:43,839 --> 00:38:45,520
knowing the

922
00:38:45,520 --> 00:38:47,440
time that we added

923
00:38:47,440 --> 00:38:50,000
but also not knowing it because if the

924
00:38:50,000 --> 00:38:53,200
measurements are between an observer and

925
00:38:53,200 --> 00:38:55,440
another observer or between a server and

926
00:38:55,440 --> 00:38:57,119
the server

927
00:38:57,119 --> 00:38:58,000
the

928
00:38:58,000 --> 00:38:59,920
the measurement are correct the

929
00:38:59,920 --> 00:39:02,480
end-to-end measurement is not

930
00:39:02,480 --> 00:39:04,400
visible

931
00:39:04,400 --> 00:39:07,200
unless you know the other the additional

932
00:39:07,200 --> 00:39:10,480
delay okay

933
00:39:11,200 --> 00:39:14,240
the main change of this draft dementia

934
00:39:14,240 --> 00:39:15,119
is

935
00:39:15,119 --> 00:39:18,880
the first great news is the eppm working

936
00:39:18,880 --> 00:39:22,320
group adopted this draft some days ago

937
00:39:22,320 --> 00:39:24,320
and we updated the

938
00:39:24,320 --> 00:39:27,200
draft the new version of the draft

939
00:39:27,200 --> 00:39:30,880
adding the new name and introducing a

940
00:39:30,880 --> 00:39:32,800
couple of changes that

941
00:39:32,800 --> 00:39:36,160
are suggested during the last during the

942
00:39:36,160 --> 00:39:39,599
working group adoption call

943
00:39:39,599 --> 00:39:41,440
in the introduction paragraph we

944
00:39:41,440 --> 00:39:43,680
underlined the beneficial approach of

945
00:39:43,680 --> 00:39:45,599
the methodology described described

946
00:39:45,599 --> 00:39:51,960
inside the document as per the lfc 1965

947
00:39:52,160 --> 00:39:54,720
thanks to the nikola scan suggestion so

948
00:39:54,720 --> 00:39:57,280
it is this kind of methodologies is

949
00:39:57,280 --> 00:39:59,920
beneficial in this case

950
00:39:59,920 --> 00:40:02,720
and we updated all the references using

951
00:40:02,720 --> 00:40:06,079
the new rfc that are

952
00:40:06,079 --> 00:40:09,040
standardized so there are see

953
00:40:09,040 --> 00:40:11,800
90 000

954
00:40:11,800 --> 00:40:16,880
1965 so we updated all the references

955
00:40:19,920 --> 00:40:22,400
that's the slide okay

956
00:40:22,400 --> 00:40:24,000
this is the summary of all the

957
00:40:24,000 --> 00:40:26,319
methodologies that we present in this

958
00:40:26,319 --> 00:40:27,359
draft

959
00:40:27,359 --> 00:40:29,440
the idea is these drafts is not to make

960
00:40:29,440 --> 00:40:32,480
a clear choices over one methodology

961
00:40:32,480 --> 00:40:35,040
instead of another but we we intend to

962
00:40:35,040 --> 00:40:36,839
present all the

963
00:40:36,839 --> 00:40:39,839
possibilities and then we are the

964
00:40:39,839 --> 00:40:42,960
intention to present in specific working

965
00:40:42,960 --> 00:40:45,119
group that are devoted to specific

966
00:40:45,119 --> 00:40:47,760
protocol the right choices for this

967
00:40:47,760 --> 00:40:49,200
protocol because

968
00:40:49,200 --> 00:40:52,880
a kind of marking can be useful for a

969
00:40:52,880 --> 00:40:55,200
protocol and not so useful in another

970
00:40:55,200 --> 00:40:57,040
protocol

971
00:40:57,040 --> 00:41:01,359
a clear example this idea is in the

972
00:41:01,359 --> 00:41:04,400
slide that we presented the lost lost

973
00:41:04,400 --> 00:41:07,920
beats summary because the main two

974
00:41:07,920 --> 00:41:09,680
methodology

975
00:41:09,680 --> 00:41:12,400
bot uses the square bit

976
00:41:12,400 --> 00:41:15,440
as first bit to mark because it's a very

977
00:41:15,440 --> 00:41:18,000
simple technology well known because

978
00:41:18,000 --> 00:41:20,400
already implementing field

979
00:41:20,400 --> 00:41:22,440
using the rfc

980
00:41:22,440 --> 00:41:25,280
8321 as a reference

981
00:41:25,280 --> 00:41:26,400
but

982
00:41:26,400 --> 00:41:30,000
we have to add another

983
00:41:30,000 --> 00:41:32,480
another bit to have end to end

984
00:41:32,480 --> 00:41:34,160
measurement because the square bit for

985
00:41:34,160 --> 00:41:36,960
this nature is not a 20 measurement but

986
00:41:36,960 --> 00:41:38,079
is

987
00:41:38,079 --> 00:41:40,880
origin to observer measurement we can

988
00:41:40,880 --> 00:41:43,200
measure only the loss between the origin

989
00:41:43,200 --> 00:41:46,240
the client and or the server and the

990
00:41:46,240 --> 00:41:47,680
measurement point

991
00:41:47,680 --> 00:41:52,240
because we mark the blocks of 64 packets

992
00:41:52,240 --> 00:41:55,520
and if the number of

993
00:41:55,520 --> 00:41:58,000
packets marked with the same

994
00:41:58,000 --> 00:42:02,480
color 0 and 1 is less than 64. there is

995
00:42:02,480 --> 00:42:04,560
a loss between the origin trying to

996
00:42:04,560 --> 00:42:07,200
serve and the measurement point so to

997
00:42:07,200 --> 00:42:09,359
have and to animation we have to add the

998
00:42:09,359 --> 00:42:11,920
other another bit the loss event bit as

999
00:42:11,920 --> 00:42:14,880
proposed by akamai and orange in the

1000
00:42:14,880 --> 00:42:17,280
their airdraft that we joined with

1001
00:42:17,280 --> 00:42:18,160
in

1002
00:42:18,160 --> 00:42:19,200
in

1003
00:42:19,200 --> 00:42:20,400
this draft

1004
00:42:20,400 --> 00:42:21,440
or the

1005
00:42:21,440 --> 00:42:24,480
team recom italia proposal to add the

1006
00:42:24,480 --> 00:42:26,720
reflection square bit

1007
00:42:26,720 --> 00:42:29,920
the lost event bit generates a market

1008
00:42:29,920 --> 00:42:33,440
packet every every loss detected by the

1009
00:42:33,440 --> 00:42:34,880
protocol

1010
00:42:34,880 --> 00:42:37,280
the reflection square bit reflects the

1011
00:42:37,280 --> 00:42:39,839
square wave on the other side so it's

1012
00:42:39,839 --> 00:42:41,839
possible to measure

1013
00:42:41,839 --> 00:42:43,359
the round trip

1014
00:42:43,359 --> 00:42:44,960
loss

1015
00:42:44,960 --> 00:42:48,240
using this reflection

1016
00:42:48,240 --> 00:42:51,359
all the two methods are quite good as

1017
00:42:51,359 --> 00:42:52,240
the

1018
00:42:52,240 --> 00:42:54,640
arcane paper

1019
00:42:54,640 --> 00:42:56,000
demonstrates

1020
00:42:56,000 --> 00:42:58,160
there are some differences because the

1021
00:42:58,160 --> 00:43:00,960
loss beat the l bit is very simple to

1022
00:43:00,960 --> 00:43:02,480
implement

1023
00:43:02,480 --> 00:43:04,720
is more simple than the reflection

1024
00:43:04,720 --> 00:43:05,920
square bit

1025
00:43:05,920 --> 00:43:08,480
but it is dependent from the protocol so

1026
00:43:08,480 --> 00:43:11,200
if the loss is detective of the in the

1027
00:43:11,200 --> 00:43:13,920
protocol the lbt's market is not

1028
00:43:13,920 --> 00:43:15,760
detected is not market

1029
00:43:15,760 --> 00:43:19,119
so it works well with quick so in our

1030
00:43:19,119 --> 00:43:20,720
opinion can be

1031
00:43:20,720 --> 00:43:21,440
a

1032
00:43:21,440 --> 00:43:23,359
right proposal for quicker

1033
00:43:23,359 --> 00:43:26,480
it works less well for less is less good

1034
00:43:26,480 --> 00:43:29,599
for tcp because for example the

1035
00:43:29,599 --> 00:43:31,680
packet is not

1036
00:43:31,680 --> 00:43:34,079
detected as losses

1037
00:43:34,079 --> 00:43:38,720
so if i load i'll uh i know

1038
00:43:39,200 --> 00:43:40,880
is lost

1039
00:43:40,880 --> 00:43:44,000
the protocol the tcp doesn't uh measure

1040
00:43:44,000 --> 00:43:47,119
it is lost so it's better to use for tcp

1041
00:43:47,119 --> 00:43:51,440
in our opinion probably the uh the r bit

1042
00:43:51,440 --> 00:43:54,640
but it is a as i said before this is

1043
00:43:54,640 --> 00:43:57,040
only a

1044
00:43:57,040 --> 00:43:59,040
general review of all the possible

1045
00:43:59,040 --> 00:44:00,079
techniques

1046
00:44:00,079 --> 00:44:02,960
there is a next step will be to the will

1047
00:44:02,960 --> 00:44:06,319
be to select the best bit to mark for

1048
00:44:06,319 --> 00:44:09,040
each protocols

1049
00:44:09,040 --> 00:44:12,160
next we can show this slide

1050
00:44:12,160 --> 00:44:16,000
so we have many possibilities

1051
00:44:16,000 --> 00:44:19,359
if there are only two bits for

1052
00:44:19,359 --> 00:44:21,119
a specific

1053
00:44:21,119 --> 00:44:22,640
measurement

1054
00:44:22,640 --> 00:44:23,680
there are

1055
00:44:23,680 --> 00:44:26,400
two possible options in my in our

1056
00:44:26,400 --> 00:44:29,280
opinion is the most significant

1057
00:44:29,280 --> 00:44:32,880
the spin beat and the t beat

1058
00:44:32,880 --> 00:44:35,920
to have the round trip time

1059
00:44:35,920 --> 00:44:36,720
and

1060
00:44:36,720 --> 00:44:38,880
round three packet loss using only two

1061
00:44:38,880 --> 00:44:39,920
beat

1062
00:44:39,920 --> 00:44:43,520
but the tbt is uh

1063
00:44:43,680 --> 00:44:44,480
is

1064
00:44:44,480 --> 00:44:47,839
less precise that uh using a

1065
00:44:47,839 --> 00:44:53,040
qubit and albeit or jubitan and

1066
00:44:53,040 --> 00:44:55,920
arbit so is a

1067
00:44:55,920 --> 00:44:58,640
we propose to use only if we have only

1068
00:44:58,640 --> 00:44:59,520
one

1069
00:44:59,520 --> 00:45:02,319
only two beats and only one for the loss

1070
00:45:02,319 --> 00:45:04,960
the option b is to use uh

1071
00:45:04,960 --> 00:45:08,319
the debate or the uh mask the diabetes

1072
00:45:08,319 --> 00:45:10,560
and delay beat for rtt

1073
00:45:10,560 --> 00:45:12,960
and to use the one-way packet loss they

1074
00:45:12,960 --> 00:45:15,440
could be for the loss in this case we

1075
00:45:15,440 --> 00:45:17,680
don't have the end-to-end measurement

1076
00:45:17,680 --> 00:45:20,560
for the loss but only the origin to a

1077
00:45:20,560 --> 00:45:22,640
problem measurement for the loss

1078
00:45:22,640 --> 00:45:25,520
so it's a compromise if we have only two

1079
00:45:25,520 --> 00:45:28,640
bits if we are we have a three bits that

1080
00:45:28,640 --> 00:45:31,599
is uh the best option for uh

1081
00:45:31,599 --> 00:45:34,000
monitoring on using a specific

1082
00:45:34,000 --> 00:45:35,440
measurement

1083
00:45:35,440 --> 00:45:38,240
and for example quick is possible to

1084
00:45:38,240 --> 00:45:39,280
have

1085
00:45:39,280 --> 00:45:41,280
is not defined in now but it's possible

1086
00:45:41,280 --> 00:45:43,119
to have three bits

1087
00:45:43,119 --> 00:45:45,599
there are four options in

1088
00:45:45,599 --> 00:45:48,640
that we have two choice to have a choice

1089
00:45:48,640 --> 00:45:52,079
but the first one is to use for rtt the

1090
00:45:52,079 --> 00:45:53,280
spin beat

1091
00:45:53,280 --> 00:45:56,560
or the idiom version of the spin beat if

1092
00:45:56,560 --> 00:46:00,640
can be useful to mask the rtt

1093
00:46:00,640 --> 00:46:03,200
and to use one for the one-way packet

1094
00:46:03,200 --> 00:46:06,400
loss qubit and albeit in order to have

1095
00:46:06,400 --> 00:46:08,480
origin two

1096
00:46:08,480 --> 00:46:11,440
measurement point loss or end-to-end

1097
00:46:11,440 --> 00:46:14,079
loss

1098
00:46:14,079 --> 00:46:16,480
the other the option d is very similar

1099
00:46:16,480 --> 00:46:18,720
there are only the substitution of spin

1100
00:46:18,720 --> 00:46:21,599
beat where the more precise but not so

1101
00:46:21,599 --> 00:46:24,240
well known the beat

1102
00:46:24,240 --> 00:46:26,880
and the option e is the equal to the

1103
00:46:26,880 --> 00:46:28,960
previous one but we

1104
00:46:28,960 --> 00:46:31,680
uh introduce the r bit in instead of the

1105
00:46:31,680 --> 00:46:33,040
l bit

1106
00:46:33,040 --> 00:46:36,480
this can be useful if we don't want

1107
00:46:36,480 --> 00:46:37,920
a measurement that depends from the

1108
00:46:37,920 --> 00:46:40,480
protocol because that'll be the signals

1109
00:46:40,480 --> 00:46:43,119
the losses detected by the protocol if

1110
00:46:43,119 --> 00:46:45,200
the protocol don't then take doesn't

1111
00:46:45,200 --> 00:46:47,760
detect the losses the albeit doesn't

1112
00:46:47,760 --> 00:46:49,680
signal the losses that bit is

1113
00:46:49,680 --> 00:46:52,480
independent so is more complicated of

1114
00:46:52,480 --> 00:46:54,800
the albeit and the rather problem is

1115
00:46:54,800 --> 00:46:56,800
that there is a delay in the measurement

1116
00:46:56,800 --> 00:46:59,119
because we have to wait

1117
00:46:59,119 --> 00:47:02,319
a square wave of the qubit starting from

1118
00:47:02,319 --> 00:47:04,480
the client reaching the

1119
00:47:04,480 --> 00:47:07,520
the server and converting in the

1120
00:47:07,520 --> 00:47:08,800
reflected

1121
00:47:08,800 --> 00:47:12,160
square wave and come back so we have a

1122
00:47:12,160 --> 00:47:15,680
two round trip time more plus the the

1123
00:47:15,680 --> 00:47:17,440
time of the square wave to complete the

1124
00:47:17,440 --> 00:47:19,920
first measurement but a little bit

1125
00:47:19,920 --> 00:47:21,760
instead a little bit is very

1126
00:47:21,760 --> 00:47:24,559
quick because there is a market packet

1127
00:47:24,559 --> 00:47:26,480
when the protocol detects

1128
00:47:26,480 --> 00:47:28,640
but in this case their bit is totally

1129
00:47:28,640 --> 00:47:30,880
independent from the protocol so

1130
00:47:30,880 --> 00:47:32,880
if also the protocol done

1131
00:47:32,880 --> 00:47:34,880
doesn't detect the loss the arbit can

1132
00:47:34,880 --> 00:47:38,359
detect it

1133
00:47:38,880 --> 00:47:42,240
uh okay the last slide

1134
00:47:42,240 --> 00:47:45,680
i'll spend the time for one minute

1135
00:47:45,680 --> 00:47:46,880
okay

1136
00:47:46,880 --> 00:47:49,839
so we can conclude uh conclude some

1137
00:47:49,839 --> 00:47:52,079
thoughts about that is a draft they

1138
00:47:52,079 --> 00:47:54,079
there are some implementation there are

1139
00:47:54,079 --> 00:47:56,640
some on feed implementation the eppm

1140
00:47:56,640 --> 00:47:59,599
working group adopted the draft

1141
00:47:59,599 --> 00:48:00,400
we

1142
00:48:00,400 --> 00:48:02,160
presented some

1143
00:48:02,160 --> 00:48:05,200
some sibling draft there was

1144
00:48:05,200 --> 00:48:07,839
another one in this working group about

1145
00:48:07,839 --> 00:48:10,720
the positioning of the probes the idea

1146
00:48:10,720 --> 00:48:15,040
is to positioning the probe in the

1147
00:48:15,200 --> 00:48:16,240
client

1148
00:48:16,240 --> 00:48:17,520
in the

1149
00:48:17,520 --> 00:48:19,839
client because so we can

1150
00:48:19,839 --> 00:48:20,720
save

1151
00:48:20,720 --> 00:48:23,200
hardware using the hardware of the

1152
00:48:23,200 --> 00:48:25,359
client to make also the measurement same

1153
00:48:25,359 --> 00:48:27,599
advantage that we explained in the

1154
00:48:27,599 --> 00:48:30,400
presentation at the end of this meeting

1155
00:48:30,400 --> 00:48:33,040
another sibling draft is presented in

1156
00:48:33,040 --> 00:48:36,160
this session of the core working group

1157
00:48:36,160 --> 00:48:38,400
about the co-op protocol

1158
00:48:38,400 --> 00:48:40,000
that was another

1159
00:48:40,000 --> 00:48:42,800
protocol client server that can

1160
00:48:42,800 --> 00:48:45,359
have some extension to have some

1161
00:48:45,359 --> 00:48:48,319
additional bit for marking so we we

1162
00:48:48,319 --> 00:48:50,480
think that can be a good idea to present

1163
00:48:50,480 --> 00:48:53,359
this in the future if the working group

1164
00:48:53,359 --> 00:48:57,040
are interested we can try to present an

1165
00:48:57,040 --> 00:48:59,280
implementation for quick

1166
00:48:59,280 --> 00:49:02,960
having a choice of the right beats

1167
00:49:02,960 --> 00:49:05,280
okay this is all thank you

1168
00:49:05,280 --> 00:49:08,800
all right thank you um

1169
00:49:08,800 --> 00:49:11,200
we do have some time for questions i've

1170
00:49:11,200 --> 00:49:12,480
seen some

1171
00:49:12,480 --> 00:49:14,640
comments in the chat

1172
00:49:14,640 --> 00:49:15,940
trying to clarify

1173
00:49:15,940 --> 00:49:17,280
[Music]

1174
00:49:17,280 --> 00:49:18,880
the the hidden

1175
00:49:18,880 --> 00:49:20,800
bits and

1176
00:49:20,800 --> 00:49:21,839
exactly

1177
00:49:21,839 --> 00:49:24,079
what each party can see

1178
00:49:24,079 --> 00:49:25,920
and what can still be measured with them

1179
00:49:25,920 --> 00:49:30,119
so be good to clarify that maybe

1180
00:49:30,240 --> 00:49:31,839
okay the

1181
00:49:31,839 --> 00:49:34,720
hidden beat the idea with it in beta can

1182
00:49:34,720 --> 00:49:38,720
be applied to every bit that measure the

1183
00:49:38,720 --> 00:49:40,240
rtt

1184
00:49:40,240 --> 00:49:42,240
because it can be applied

1185
00:49:42,240 --> 00:49:44,559
both for the beat and for the

1186
00:49:44,559 --> 00:49:47,200
traditional spin beat the idea is to

1187
00:49:47,200 --> 00:49:50,800
delay the reflection of the

1188
00:49:50,800 --> 00:49:52,640
of the packet

1189
00:49:52,640 --> 00:49:54,240
that detect

1190
00:49:54,240 --> 00:49:55,119
the

1191
00:49:55,119 --> 00:49:56,160
the

1192
00:49:56,160 --> 00:49:58,880
the square wave for the spin beat or the

1193
00:49:58,880 --> 00:50:01,119
uh sample delay sample that is the

1194
00:50:01,119 --> 00:50:04,400
single market packet that is used by the

1195
00:50:04,400 --> 00:50:05,520
light beat

1196
00:50:05,520 --> 00:50:08,160
so when for example for the spin bit

1197
00:50:08,160 --> 00:50:10,960
when the

1198
00:50:11,040 --> 00:50:12,720
square wave

1199
00:50:12,720 --> 00:50:14,000
that

1200
00:50:14,000 --> 00:50:17,520
is uh the the front of the square wave

1201
00:50:17,520 --> 00:50:21,200
that uh signal the starting of the rtt

1202
00:50:21,200 --> 00:50:24,559
or any of the rtt

1203
00:50:24,559 --> 00:50:26,800
arrived to the client the client don't

1204
00:50:26,800 --> 00:50:30,160
reflect the end of this square wave

1205
00:50:30,160 --> 00:50:33,440
immediately but he continually continued

1206
00:50:33,440 --> 00:50:34,559
to

1207
00:50:34,559 --> 00:50:37,520
mark the packets with the same

1208
00:50:37,520 --> 00:50:41,359
beat so if we are in the one

1209
00:50:41,359 --> 00:50:42,960
period

1210
00:50:42,960 --> 00:50:45,440
for example the rtt

1211
00:50:45,440 --> 00:50:47,760
is 10 milliseconds

1212
00:50:47,760 --> 00:50:50,800
and the additional that we add is

1213
00:50:50,800 --> 00:50:53,599
other five milliseconds so

1214
00:50:53,599 --> 00:50:56,880
when the square wave reached the client

1215
00:50:56,880 --> 00:50:59,599
the client don't change immediately the

1216
00:50:59,599 --> 00:51:02,000
front but it weighed other additional

1217
00:51:02,000 --> 00:51:05,920
five milliseconds to change the front so

1218
00:51:05,920 --> 00:51:08,800
the server don't measure the right rdt

1219
00:51:08,800 --> 00:51:10,960
but the right elementary plus 5

1220
00:51:10,960 --> 00:51:12,720
millisecond

1221
00:51:12,720 --> 00:51:14,160
this

1222
00:51:14,160 --> 00:51:17,440
masked only the end to end rtt because

1223
00:51:17,440 --> 00:51:19,520
if we measure

1224
00:51:19,520 --> 00:51:22,960
using a probe dirty between the observer

1225
00:51:22,960 --> 00:51:25,119
and the server for example

1226
00:51:25,119 --> 00:51:29,200
the server don't add anything because

1227
00:51:29,200 --> 00:51:32,000
it works in the same way that it work

1228
00:51:32,000 --> 00:51:34,720
for this enormous pin bit or normal bit

1229
00:51:34,720 --> 00:51:37,119
so the measurement observer server

1230
00:51:37,119 --> 00:51:39,280
observer the rtt

1231
00:51:39,280 --> 00:51:40,000
is

1232
00:51:40,000 --> 00:51:42,640
right so it's possible to segment the

1233
00:51:42,640 --> 00:51:44,720
network and to have a partial

1234
00:51:44,720 --> 00:51:47,119
measurement correct but not end-to-end

1235
00:51:47,119 --> 00:51:48,880
measurement the only measurement that is

1236
00:51:48,880 --> 00:51:53,040
a masked is the round trip between

1237
00:51:53,040 --> 00:51:56,160
client and observer

1238
00:51:56,160 --> 00:51:59,839
i see okay and the only extra delay is

1239
00:51:59,839 --> 00:52:01,119
added

1240
00:52:01,119 --> 00:52:03,599
on the client side not on the server yes

1241
00:52:03,599 --> 00:52:05,280
only the client side

1242
00:52:05,280 --> 00:52:06,800
perfect okay

1243
00:52:06,800 --> 00:52:08,160
and i think that's

1244
00:52:08,160 --> 00:52:09,440
roughly what the chat was getting to as

1245
00:52:09,440 --> 00:52:11,119
well but that is helpful to have

1246
00:52:11,119 --> 00:52:13,280
clarified

1247
00:52:13,280 --> 00:52:16,079
right and it's impossible to to choice

1248
00:52:16,079 --> 00:52:18,800
to choose that uh it is adding timing

1249
00:52:18,800 --> 00:52:20,880
many times in many ways

1250
00:52:20,880 --> 00:52:24,480
we propose to choose a fixed amount for

1251
00:52:24,480 --> 00:52:25,520
each

1252
00:52:25,520 --> 00:52:26,559
client

1253
00:52:26,559 --> 00:52:30,400
so the position the client is moved for

1254
00:52:30,400 --> 00:52:33,440
exactly the same amount of time so the

1255
00:52:33,440 --> 00:52:36,000
same amount of kilometer let me say for

1256
00:52:36,000 --> 00:52:37,920
all the time so it's impossible to

1257
00:52:37,920 --> 00:52:39,280
detect

1258
00:52:39,280 --> 00:52:41,040
if there is the right

1259
00:52:41,040 --> 00:52:43,920
distance or a fake distance because they

1260
00:52:43,920 --> 00:52:48,800
add all always the same amount of time

1261
00:52:49,440 --> 00:52:51,599
that makes sense

1262
00:52:51,599 --> 00:52:52,800
all right

1263
00:52:52,800 --> 00:52:54,160
thank you

1264
00:52:54,160 --> 00:52:56,480
thank you

1265
00:52:57,680 --> 00:52:59,760
okay next we have

1266
00:52:59,760 --> 00:53:03,800
the draft on connectivity monitoring

1267
00:53:27,520 --> 00:53:29,520
are you able to find your slides in

1268
00:53:29,520 --> 00:53:30,880
there

1269
00:53:30,880 --> 00:53:32,960
there we go great

1270
00:53:32,960 --> 00:53:34,559
we'll find it thanks

1271
00:53:34,559 --> 00:53:36,000
um

1272
00:53:36,000 --> 00:53:37,760
yep

1273
00:53:37,760 --> 00:53:39,839
i

1274
00:53:39,839 --> 00:53:42,480
made the presentation before i updated

1275
00:53:42,480 --> 00:53:45,359
the draft so these uh

1276
00:53:45,359 --> 00:53:48,880
presentation refers to the older version

1277
00:53:48,880 --> 00:53:51,119
i mean while updated the draft on monday

1278
00:53:51,119 --> 00:53:51,920
and

1279
00:53:51,920 --> 00:53:54,319
it contains a

1280
00:53:54,319 --> 00:53:57,440
packet loss based uh specification for a

1281
00:53:57,440 --> 00:53:58,800
connectivity

1282
00:53:58,800 --> 00:54:02,079
metric which is just announced here in

1283
00:54:02,079 --> 00:54:06,160
this i also have changed um

1284
00:54:06,160 --> 00:54:07,599
the

1285
00:54:07,599 --> 00:54:09,200
status from

1286
00:54:09,200 --> 00:54:10,720
standard strike meanwhile to

1287
00:54:10,720 --> 00:54:12,960
experimental because i think that's more

1288
00:54:12,960 --> 00:54:15,119
suitable i not able to come up with an

1289
00:54:15,119 --> 00:54:16,880
implementation

1290
00:54:16,880 --> 00:54:18,960
very soon

1291
00:54:18,960 --> 00:54:20,640
so i think

1292
00:54:20,640 --> 00:54:22,839
that's fair

1293
00:54:22,839 --> 00:54:24,960
um don't i

1294
00:54:24,960 --> 00:54:27,760
think i moved to the other slide yep

1295
00:54:27,760 --> 00:54:30,960
um and that is uh

1296
00:54:30,960 --> 00:54:33,119
indicating how the

1297
00:54:33,119 --> 00:54:36,319
loss-based connectivity

1298
00:54:36,319 --> 00:54:39,680
metric is going to work

1299
00:54:39,680 --> 00:54:41,839
the

1300
00:54:43,280 --> 00:54:45,440
router

1301
00:54:45,440 --> 00:54:48,559
sketch which is uh on the upper part is

1302
00:54:48,559 --> 00:54:51,680
already part of the other presentations

1303
00:54:51,680 --> 00:54:54,319
and there are three measurement loops

1304
00:54:54,319 --> 00:54:57,119
passing each

1305
00:54:57,119 --> 00:55:00,880
connection or path to be monitored

1306
00:55:00,880 --> 00:55:02,079
and uh

1307
00:55:02,079 --> 00:55:06,720
two go to the same direction always per

1308
00:55:06,720 --> 00:55:07,680
uh

1309
00:55:07,680 --> 00:55:09,760
upstream or downstream

1310
00:55:09,760 --> 00:55:11,359
and

1311
00:55:11,359 --> 00:55:14,160
there's always a contra

1312
00:55:14,160 --> 00:55:15,520
the

1313
00:55:15,520 --> 00:55:18,640
direction and uh there's only two

1314
00:55:18,640 --> 00:55:20,960
measurement path going per direction

1315
00:55:20,960 --> 00:55:22,000
either

1316
00:55:22,000 --> 00:55:25,200
upstream or downstream

1317
00:55:25,280 --> 00:55:29,200
and the idea then is if

1318
00:55:29,280 --> 00:55:31,359
there is no

1319
00:55:31,359 --> 00:55:34,400
packet received with within

1320
00:55:34,400 --> 00:55:39,119
one measurement interval inc t

1321
00:55:39,119 --> 00:55:40,480
on

1322
00:55:40,480 --> 00:55:42,480
all of the

1323
00:55:42,480 --> 00:55:43,839
measurement

1324
00:55:43,839 --> 00:55:46,960
loops per monitored interface

1325
00:55:46,960 --> 00:55:49,040
then you decide on

1326
00:55:49,040 --> 00:55:51,119
connectivity loss

1327
00:55:51,119 --> 00:55:54,240
and the simple definition

1328
00:55:54,240 --> 00:55:55,920
of

1329
00:55:55,920 --> 00:55:58,720
distance between two packets per

1330
00:55:58,720 --> 00:56:01,520
measurement interval to me seemed seemed

1331
00:56:01,520 --> 00:56:03,119
to be

1332
00:56:03,119 --> 00:56:06,240
to wait for the

1333
00:56:06,240 --> 00:56:09,280
measurement loop which is producing the

1334
00:56:09,280 --> 00:56:13,280
longest measurement loop delay and then

1335
00:56:13,280 --> 00:56:15,920
double that amount and simply send

1336
00:56:15,920 --> 00:56:18,319
packets only after that has passed on

1337
00:56:18,319 --> 00:56:20,079
each individual

1338
00:56:20,079 --> 00:56:23,520
measurement loop that means

1339
00:56:23,760 --> 00:56:26,000
you only send a

1340
00:56:26,000 --> 00:56:28,319
measurement packet along along the next

1341
00:56:28,319 --> 00:56:30,480
loop once you've received that of the

1342
00:56:30,480 --> 00:56:32,720
last one which is

1343
00:56:32,720 --> 00:56:35,520
maybe not the fastest way of operating

1344
00:56:35,520 --> 00:56:39,119
it but it's pretty reliable i think

1345
00:56:39,119 --> 00:56:39,550
and then

1346
00:56:39,550 --> 00:56:41,440
[Music]

1347
00:56:41,440 --> 00:56:43,440
you simply count whether you

1348
00:56:43,440 --> 00:56:47,040
have all those passing

1349
00:56:47,040 --> 00:56:49,280
the connection which you monitor and

1350
00:56:49,280 --> 00:56:52,559
i've used the colors to illustrate that

1351
00:56:52,559 --> 00:56:53,920
down there

1352
00:56:53,920 --> 00:56:55,280
and once

1353
00:56:55,280 --> 00:56:59,680
you did not receive them within the time

1354
00:56:59,680 --> 00:57:01,839
when you send the next one and it

1355
00:57:01,839 --> 00:57:03,280
doesn't matter in which order you do

1356
00:57:03,280 --> 00:57:05,280
that

1357
00:57:05,280 --> 00:57:06,319
then

1358
00:57:06,319 --> 00:57:08,559
you decide that this connection has

1359
00:57:08,559 --> 00:57:10,880
failed

1360
00:57:11,280 --> 00:57:13,760
the whole idea is to

1361
00:57:13,760 --> 00:57:15,839
overlay all these measurements so what

1362
00:57:15,839 --> 00:57:20,000
you see here is the individual

1363
00:57:21,040 --> 00:57:24,079
combination of measurement loops passing

1364
00:57:24,079 --> 00:57:27,440
this monitored interface and if you are

1365
00:57:27,440 --> 00:57:29,680
interested in details

1366
00:57:29,680 --> 00:57:32,240
terminology is adapted to try to

1367
00:57:32,240 --> 00:57:35,920
illustrate that as good as possible

1368
00:57:35,920 --> 00:57:37,280
and

1369
00:57:37,280 --> 00:57:39,520
you can read how that works

1370
00:57:39,520 --> 00:57:41,440
and i'd of course be

1371
00:57:41,440 --> 00:57:42,880
happy for

1372
00:57:42,880 --> 00:57:43,920
comments

1373
00:57:43,920 --> 00:57:46,000
and i'd like to add that the question

1374
00:57:46,000 --> 00:57:49,040
about timing has been put to me several

1375
00:57:49,040 --> 00:57:50,559
times so i think

1376
00:57:50,559 --> 00:57:53,440
or the intent now here is to to answer

1377
00:57:53,440 --> 00:57:55,839
these questions

1378
00:57:56,400 --> 00:57:59,760
and come up with a scheme how it works

1379
00:57:59,760 --> 00:58:00,799
all right

1380
00:58:00,799 --> 00:58:03,280
and that is it

1381
00:58:03,280 --> 00:58:05,280
from me

1382
00:58:05,280 --> 00:58:09,839
it looks like greg is in the queue

1383
00:58:11,200 --> 00:58:13,439
um

1384
00:58:13,839 --> 00:58:17,599
still i'm not really

1385
00:58:17,599 --> 00:58:21,760
comfortable with the terminology because

1386
00:58:21,760 --> 00:58:25,440
traditionally the connectivity is uh

1387
00:58:25,440 --> 00:58:27,040
state

1388
00:58:27,040 --> 00:58:30,319
uh in a fault management

1389
00:58:30,319 --> 00:58:31,440
oem

1390
00:58:31,440 --> 00:58:32,880
so and

1391
00:58:32,880 --> 00:58:34,480
if

1392
00:58:34,480 --> 00:58:37,280
there is a connection um so actually

1393
00:58:37,280 --> 00:58:39,040
when we are referring to something as a

1394
00:58:39,040 --> 00:58:41,680
connection we understand that it's uh

1395
00:58:41,680 --> 00:58:43,920
not only ability

1396
00:58:43,920 --> 00:58:46,640
uh to receive test packets but

1397
00:58:46,640 --> 00:58:49,280
uh on that connection that belong

1398
00:58:49,280 --> 00:58:51,760
to this connection but not receiving

1399
00:58:51,760 --> 00:58:53,599
packets from other connections so

1400
00:58:53,599 --> 00:58:57,040
basically absence of misconnection uh

1401
00:58:57,040 --> 00:58:59,440
state and uh misconnection

1402
00:58:59,440 --> 00:59:01,760
uh definition uh

1403
00:59:01,760 --> 00:59:02,839
usually

1404
00:59:02,839 --> 00:59:06,319
specific um

1405
00:59:06,319 --> 00:59:09,200
at itf since well we are dealing

1406
00:59:09,200 --> 00:59:10,559
primarily

1407
00:59:10,559 --> 00:59:13,280
with the ip and um

1408
00:59:13,280 --> 00:59:16,559
mpls if it's a pmp-ls and not traffic

1409
00:59:16,559 --> 00:59:17,920
engineered

1410
00:59:17,920 --> 00:59:19,040
then

1411
00:59:19,040 --> 00:59:22,000
we usually refer to the

1412
00:59:22,000 --> 00:59:25,040
laws of path continuity

1413
00:59:25,040 --> 00:59:26,480
and

1414
00:59:26,480 --> 00:59:29,040
the protocol that used to that

1415
00:59:29,040 --> 00:59:31,760
extent is a bidirectional forwarding

1416
00:59:31,760 --> 00:59:34,240
detection uh bfd

1417
00:59:34,240 --> 00:59:35,440
and

1418
00:59:35,440 --> 00:59:38,319
one of the things that property of bfd

1419
00:59:38,319 --> 00:59:39,760
is that

1420
00:59:39,760 --> 00:59:41,200
uh

1421
00:59:41,200 --> 00:59:44,240
their session goes down or path loss

1422
00:59:44,240 --> 00:59:46,000
continuity

1423
00:59:46,000 --> 00:59:47,520
state uh

1424
00:59:47,520 --> 00:59:50,640
declared uh when i lost

1425
00:59:50,640 --> 00:59:53,200
three consecutive test packets

1426
00:59:53,200 --> 00:59:56,160
and uh even though the protocol supports

1427
00:59:56,160 --> 00:59:59,119
uh doing that on

1428
00:59:59,119 --> 01:00:01,040
the first

1429
01:00:01,040 --> 01:00:03,680
packet on only one last packet

1430
01:00:03,680 --> 01:00:06,400
there is a good reason to have three

1431
01:00:06,400 --> 01:00:09,359
it's not only similar to how ethernet

1432
01:00:09,359 --> 01:00:10,960
oem

1433
01:00:10,960 --> 01:00:12,000
works

1434
01:00:12,000 --> 01:00:16,160
but it provides certain stability

1435
01:00:16,160 --> 01:00:19,200
i'm somewhat concerned that uh in this

1436
01:00:19,200 --> 01:00:20,400
proposal

1437
01:00:20,400 --> 01:00:22,400
uh the

1438
01:00:22,400 --> 01:00:25,200
miscon a loss of connectivity declared

1439
01:00:25,200 --> 01:00:29,399
on a very first packet

1440
01:00:29,760 --> 01:00:30,799
because

1441
01:00:30,799 --> 01:00:33,760
then uh if that's the case then uh so

1442
01:00:33,760 --> 01:00:37,359
the next packet what next packet will

1443
01:00:37,359 --> 01:00:40,839
mark the connection as up

1444
01:00:40,839 --> 01:00:42,400
um

1445
01:00:42,400 --> 01:00:43,920
then uh

1446
01:00:43,920 --> 01:00:46,880
we'll have probably states bouncing up

1447
01:00:46,880 --> 01:00:48,520
and down

1448
01:00:48,520 --> 01:00:51,040
interchangeably if uh

1449
01:00:51,040 --> 01:00:54,000
we have a flaky uh connection

1450
01:00:54,000 --> 01:00:55,599
um

1451
01:00:55,599 --> 01:00:58,079
on the other hand the uh packet loss

1452
01:00:58,079 --> 01:01:01,359
ratio or some other statistics

1453
01:01:01,359 --> 01:01:04,720
uh will indicate that the connection um

1454
01:01:04,720 --> 01:01:07,280
the path is not stable

1455
01:01:07,280 --> 01:01:08,400
but

1456
01:01:08,400 --> 01:01:10,559
uh from the uh fault management

1457
01:01:10,559 --> 01:01:13,040
perspective um

1458
01:01:13,040 --> 01:01:16,000
bouncing states and generating uh alarms

1459
01:01:16,000 --> 01:01:18,640
and clearing our arms and

1460
01:01:18,640 --> 01:01:21,599
that would cause a lot of uh confusion

1461
01:01:21,599 --> 01:01:23,280
so um

1462
01:01:23,280 --> 01:01:25,760
maybe that's something that needs uh

1463
01:01:25,760 --> 01:01:30,319
further uh discussion and uh look at

1464
01:01:30,319 --> 01:01:32,559
and especially how it relates to default

1465
01:01:32,559 --> 01:01:35,680
management oh yeah

1466
01:01:35,680 --> 01:01:38,480
um yes adding some text

1467
01:01:38,480 --> 01:01:41,119
with a relation to fault management oim

1468
01:01:41,119 --> 01:01:42,079
uh

1469
01:01:42,079 --> 01:01:44,240
i probably need to do that i'm not a bfd

1470
01:01:44,240 --> 01:01:46,640
expert

1471
01:01:47,599 --> 01:01:49,760
the state of lost connectivity is

1472
01:01:49,760 --> 01:01:51,520
declared after three packets have been

1473
01:01:51,520 --> 01:01:52,480
lost

1474
01:01:52,480 --> 01:01:54,880
if you look at the illustration below

1475
01:01:54,880 --> 01:01:57,599
it's uh that red uh

1476
01:01:57,599 --> 01:02:01,839
link lsr2 leri is disconnected that

1477
01:02:01,839 --> 01:02:04,720
what the text says also in the draft is

1478
01:02:04,720 --> 01:02:07,760
you start with sending packet f2 uh

1479
01:02:07,760 --> 01:02:08,960
index one

1480
01:02:08,960 --> 01:02:12,559
and then you send f3 index one

1481
01:02:12,559 --> 01:02:14,960
and the expectation would be if you send

1482
01:02:14,960 --> 01:02:17,280
a packet at t2 it should have been

1483
01:02:17,280 --> 01:02:19,119
received at t3

1484
01:02:19,119 --> 01:02:20,799
if you send one at t3 it should have

1485
01:02:20,799 --> 01:02:23,839
been received at t4 and so on and if you

1486
01:02:23,839 --> 01:02:26,559
look at the blue one at time t5 it

1487
01:02:26,559 --> 01:02:28,880
should have been received at t6 so these

1488
01:02:28,880 --> 01:02:30,559
are three packets

1489
01:02:30,559 --> 01:02:33,520
and if they haven't been received until

1490
01:02:33,520 --> 01:02:36,400
t8 which when when you would send the

1491
01:02:36,400 --> 01:02:38,559
next packet on

1492
01:02:38,559 --> 01:02:39,599
f2

1493
01:02:39,599 --> 01:02:41,280
then you declare the state to be

1494
01:02:41,280 --> 01:02:43,599
disconnected so um

1495
01:02:43,599 --> 01:02:45,359
yeah it's three packets

1496
01:02:45,359 --> 01:02:47,119
three packets which should have been

1497
01:02:47,119 --> 01:02:49,440
received for a long time then or

1498
01:02:49,440 --> 01:02:50,799
sometime then

1499
01:02:50,799 --> 01:02:53,280
at t8 when you declare it to be uh

1500
01:02:53,280 --> 01:02:55,200
disconnected

1501
01:02:55,200 --> 01:02:58,880
yeah uh i'll be uh happy uh to discuss

1502
01:02:58,880 --> 01:03:01,039
uh with the bfd because

1503
01:03:01,039 --> 01:03:04,480
i'm working on it extensively yeah sure

1504
01:03:04,480 --> 01:03:06,160
that would be helpful

1505
01:03:06,160 --> 01:03:08,640
yeah okay uh we can continue discussion

1506
01:03:08,640 --> 01:03:10,000
on the list

1507
01:03:10,000 --> 01:03:14,039
thanks yeah i would appreciate

1508
01:03:16,079 --> 01:03:18,079
right thank you

1509
01:03:18,079 --> 01:03:20,720
get on time

1510
01:03:21,680 --> 01:03:24,160
perfect okay and

1511
01:03:24,160 --> 01:03:26,960
last of our adopted documents

1512
01:03:26,960 --> 01:03:30,240
uh we have the srpm

1513
01:03:34,799 --> 01:03:36,160
do you want

1514
01:03:36,160 --> 01:03:37,359
sharing your screen just share the

1515
01:03:37,359 --> 01:03:40,319
preloaded slides

1516
01:03:42,000 --> 01:03:43,280
instead of the screen button you can

1517
01:03:43,280 --> 01:03:47,440
press the the document button

1518
01:03:51,839 --> 01:03:54,319
try click that again

1519
01:03:54,319 --> 01:03:56,559
sorry

1520
01:03:56,559 --> 01:03:58,640
yeah you see it yeah

1521
01:03:58,640 --> 01:04:01,359
yeah can you can you click the

1522
01:04:01,359 --> 01:04:03,440
document button one more time to ask to

1523
01:04:03,440 --> 01:04:05,680
share

1524
01:04:06,240 --> 01:04:09,039
okay i cancelled it and i'm asking again

1525
01:04:09,039 --> 01:04:11,440
here we go yep yeah

1526
01:04:11,440 --> 01:04:15,160
you are now granted

1527
01:04:36,640 --> 01:04:41,039
you see i'm setting it now

1528
01:04:41,039 --> 01:04:42,400
we do

1529
01:04:42,400 --> 01:04:44,240
okay great

1530
01:04:44,240 --> 01:04:45,839
yeah hi everyone

1531
01:04:45,839 --> 01:04:48,000
my name is rakesh gandhi i'm presenting

1532
01:04:48,000 --> 01:04:51,039
a very quick update on the

1533
01:04:51,039 --> 01:04:53,599
stem extension for sr

1534
01:04:53,599 --> 01:04:57,760
on behalf of the authors listed

1535
01:05:00,799 --> 01:05:04,079
so uh agenda is a brief update and

1536
01:05:04,079 --> 01:05:06,559
revision02

1537
01:05:06,559 --> 01:05:09,119
just to highlight the work happening in

1538
01:05:09,119 --> 01:05:11,520
other working groups on the stamp

1539
01:05:11,520 --> 01:05:15,119
extensions and next steps

1540
01:05:15,119 --> 01:05:18,319
so there is very brief minor updates in

1541
01:05:18,319 --> 01:05:20,480
revision zero two

1542
01:05:20,480 --> 01:05:23,200
mostly editorial changes uh we converted

1543
01:05:23,200 --> 01:05:26,240
ni into table format and we have no open

1544
01:05:26,240 --> 01:05:29,200
issues at the moment

1545
01:05:29,200 --> 01:05:32,559
uh there is uh extensions uh

1546
01:05:32,559 --> 01:05:35,200
that's built on the great work done by

1547
01:05:35,200 --> 01:05:37,920
ippm with stem

1548
01:05:37,920 --> 01:05:41,680
spring has two drops on srpm

1549
01:05:41,680 --> 01:05:45,920
and also there is one in mpls with a new

1550
01:05:45,920 --> 01:05:47,440
encapsulation

1551
01:05:47,440 --> 01:05:48,880
for pseudo wires

1552
01:05:48,880 --> 01:05:51,119
so uh welcome your review comments on

1553
01:05:51,119 --> 01:05:54,160
those traps as well

1554
01:05:55,119 --> 01:05:57,359
so uh just uh we are

1555
01:05:57,359 --> 01:05:59,119
seeking more review comments and

1556
01:05:59,119 --> 01:06:02,559
suggestions for this draft

1557
01:06:02,559 --> 01:06:05,200
and we'll wait for maybe one one more

1558
01:06:05,200 --> 01:06:09,520
itf before we request a last call

1559
01:06:09,520 --> 01:06:11,680
so that's all i had any comments

1560
01:06:11,680 --> 01:06:14,680
suggestions

1561
01:06:25,839 --> 01:06:29,240
yeah thank you

1562
01:06:33,760 --> 01:06:36,250
okay and now we're going to move on to

1563
01:06:36,250 --> 01:06:37,440
[Music]

1564
01:06:37,440 --> 01:06:39,839
our proposed work um

1565
01:06:39,839 --> 01:06:41,280
actually before we do that before we do

1566
01:06:41,280 --> 01:06:44,160
that there is one thing i uh

1567
01:06:44,160 --> 01:06:45,520
slides

1568
01:06:45,520 --> 01:06:47,760
which is we did we did

1569
01:06:47,760 --> 01:06:51,039
uh publish rfc emergency indeed

1570
01:06:51,039 --> 01:06:53,200
so i just wanted to say congrats

1571
01:06:53,200 --> 01:06:55,280
to those authors and

1572
01:06:55,280 --> 01:06:58,640
thanks for getting that work through

1573
01:06:59,520 --> 01:07:01,760
all right kristoff i'm going to approve

1574
01:07:01,760 --> 01:07:03,520
you here

1575
01:07:03,520 --> 01:07:07,000
and get started

1576
01:07:31,039 --> 01:07:34,799
okay hello can you hear me

1577
01:07:36,640 --> 01:07:39,520
can you hear me fine good it's good good

1578
01:07:39,520 --> 01:07:40,799
great

1579
01:07:40,799 --> 01:07:43,039
um hello everyone um

1580
01:07:43,039 --> 01:07:46,160
i will present our internet draft

1581
01:07:46,160 --> 01:07:48,000
responsiveness under working conditions

1582
01:07:48,000 --> 01:07:49,280
and uh

1583
01:07:49,280 --> 01:07:51,039
as this is uh the first time i'm

1584
01:07:51,039 --> 01:07:52,400
presenting and i'm giving a little bit a

1585
01:07:52,400 --> 01:07:53,920
start with a little bit of background

1586
01:07:53,920 --> 01:07:55,119
first

1587
01:07:55,119 --> 01:07:57,280
um so

1588
01:07:57,280 --> 01:07:59,520
first my

1589
01:07:59,520 --> 01:08:00,960
what is it actually what we are trying

1590
01:08:00,960 --> 01:08:02,799
here to solve here what are we trying to

1591
01:08:02,799 --> 01:08:04,720
address here um

1592
01:08:04,720 --> 01:08:07,920
the first problem is that we realized is

1593
01:08:07,920 --> 01:08:10,000
there have been 10 and more years of

1594
01:08:10,000 --> 01:08:11,280
buffer bloat

1595
01:08:11,280 --> 01:08:13,680
in the sense that it was made very

1596
01:08:13,680 --> 01:08:16,399
public more than 10 years ago

1597
01:08:16,399 --> 01:08:19,759
solutions quickly um started popping up

1598
01:08:19,759 --> 01:08:21,679
and were being standardized and

1599
01:08:21,679 --> 01:08:24,799
implemented but still today buffer bloat

1600
01:08:24,799 --> 01:08:27,120
is a very common problem

1601
01:08:27,120 --> 01:08:29,040
and why is that

1602
01:08:29,040 --> 01:08:30,880
one reason we believe that is the reason

1603
01:08:30,880 --> 01:08:32,640
is because there is first of all a lack

1604
01:08:32,640 --> 01:08:33,920
of awareness

1605
01:08:33,920 --> 01:08:36,479
and the lack of tools

1606
01:08:36,479 --> 01:08:38,960
the awareness of buffer bloat for the

1607
01:08:38,960 --> 01:08:42,158
end user would allow to

1608
01:08:42,158 --> 01:08:44,158
use the end user as a forcing function

1609
01:08:44,158 --> 01:08:47,920
to drive the solutions to being deployed

1610
01:08:47,920 --> 01:08:50,640
and find a tool that allows to measure

1611
01:08:50,640 --> 01:08:52,158
it would allow to actually measure the

1612
01:08:52,158 --> 01:08:55,520
buffer load and allow operators vendors

1613
01:08:55,520 --> 01:08:57,198
and so on to

1614
01:08:57,198 --> 01:09:00,319
build benchmarks to

1615
01:09:00,319 --> 01:09:02,960
to minimize buffer load

1616
01:09:02,960 --> 01:09:05,920
a second problem that we realize exists

1617
01:09:05,920 --> 01:09:08,399
is there's not really a clear definition

1618
01:09:08,399 --> 01:09:10,479
of what buffer load actually is and if

1619
01:09:10,479 --> 01:09:11,759
you ask

1620
01:09:11,759 --> 01:09:13,279
different people

1621
01:09:13,279 --> 01:09:15,679
um you will get different definitions of

1622
01:09:15,679 --> 01:09:17,040
buffer bloat

1623
01:09:17,040 --> 01:09:18,080
um

1624
01:09:18,080 --> 01:09:19,920
it's also not clear how you can measure

1625
01:09:19,920 --> 01:09:23,040
it is an icmp ping while doing the file

1626
01:09:23,040 --> 01:09:25,520
transfer good enough do you need to

1627
01:09:25,520 --> 01:09:26,640
um

1628
01:09:26,640 --> 01:09:29,040
flood the network with udp traffic and

1629
01:09:29,040 --> 01:09:32,080
then send tcp request response

1630
01:09:32,080 --> 01:09:34,560
dns can you use dns to measure buffer

1631
01:09:34,560 --> 01:09:35,759
bloat

1632
01:09:35,759 --> 01:09:37,759
right it's not really clear and there

1633
01:09:37,759 --> 01:09:40,640
are some tools that exists like dsl

1634
01:09:40,640 --> 01:09:44,640
reports fast.com waveform and so on

1635
01:09:44,640 --> 01:09:46,799
that are measuring buffer bloat but if

1636
01:09:46,799 --> 01:09:49,839
you compare one tool with the other

1637
01:09:49,839 --> 01:09:51,600
they have hugely

1638
01:09:51,600 --> 01:09:54,480
different methodologies and when you run

1639
01:09:54,480 --> 01:09:56,320
the tools they provide completely

1640
01:09:56,320 --> 01:09:59,040
different results so it's really a

1641
01:09:59,040 --> 01:10:00,560
problem of

1642
01:10:00,560 --> 01:10:02,320
we don't really know what is buffer

1643
01:10:02,320 --> 01:10:03,920
blown and how does it impact the end

1644
01:10:03,920 --> 01:10:06,640
user so we believe it's time to for

1645
01:10:06,640 --> 01:10:08,960
standardized metric of what we call

1646
01:10:08,960 --> 01:10:11,679
responsiveness under working conditions

1647
01:10:11,679 --> 01:10:14,000
which is what is exposes problems like

1648
01:10:14,000 --> 01:10:16,080
buffer blood

1649
01:10:16,080 --> 01:10:18,640
so first of all

1650
01:10:18,640 --> 01:10:20,880
we want to measure responsiveness for

1651
01:10:20,880 --> 01:10:22,320
the end user

1652
01:10:22,320 --> 01:10:23,920
and that means

1653
01:10:23,920 --> 01:10:26,400
that implies a certain set of things

1654
01:10:26,400 --> 01:10:28,960
first of all a realization that buffer

1655
01:10:28,960 --> 01:10:30,960
bloat while typically you think of

1656
01:10:30,960 --> 01:10:32,960
buffer bloat as something that is

1657
01:10:32,960 --> 01:10:36,159
a big da a big q in a bottleneck router

1658
01:10:36,159 --> 01:10:37,920
that is being filled up

1659
01:10:37,920 --> 01:10:39,520
buffer bloat can happen at many

1660
01:10:39,520 --> 01:10:42,320
different places right it cannot only be

1661
01:10:42,320 --> 01:10:44,560
in the bottlenecks router it can be on

1662
01:10:44,560 --> 01:10:46,960
the server it can be on the client it

1663
01:10:46,960 --> 01:10:49,679
can be in the service nic it can be in

1664
01:10:49,679 --> 01:10:52,880
the server's tcp implementation or even

1665
01:10:52,880 --> 01:10:55,920
in the http implementation right and we

1666
01:10:55,920 --> 01:10:58,080
have found that in many cases the buffer

1667
01:10:58,080 --> 01:11:00,880
bloat and http implementations are way

1668
01:11:00,880 --> 01:11:02,560
way higher than whatever you you can

1669
01:11:02,560 --> 01:11:05,280
measure on the internet so sometimes the

1670
01:11:05,280 --> 01:11:07,120
problem is at a different layer where

1671
01:11:07,120 --> 01:11:09,280
you would not expect it

1672
01:11:09,280 --> 01:11:11,040
so this implies that if we want to

1673
01:11:11,040 --> 01:11:12,719
measure um

1674
01:11:12,719 --> 01:11:15,199
buffer bloat between quotes because of

1675
01:11:15,199 --> 01:11:17,040
the sudden buffer load is no more just

1676
01:11:17,040 --> 01:11:18,960
on the bottleneck router but it can be

1677
01:11:18,960 --> 01:11:20,480
anywhere right

1678
01:11:20,480 --> 01:11:22,000
if you want to measure bar for load it

1679
01:11:22,000 --> 01:11:23,440
means you need to use the modern

1680
01:11:23,440 --> 01:11:25,520
protocol that the end users are actually

1681
01:11:25,520 --> 01:11:28,080
using which means you need to use for

1682
01:11:28,080 --> 01:11:31,280
example http 2 hp 3

1683
01:11:31,280 --> 01:11:33,920
you need to use tls and so on

1684
01:11:33,920 --> 01:11:36,000
you also want to measure all stages of

1685
01:11:36,000 --> 01:11:38,560
the connections right

1686
01:11:38,560 --> 01:11:40,159
if you have a good solution to handle

1687
01:11:40,159 --> 01:11:42,320
buffer bloat in your tcp stack but your

1688
01:11:42,320 --> 01:11:44,320
dns

1689
01:11:44,320 --> 01:11:45,840
is still going to

1690
01:11:45,840 --> 01:11:47,600
go through a shared queue that is

1691
01:11:47,600 --> 01:11:50,239
completely bloated well

1692
01:11:50,239 --> 01:11:52,159
your user experience will still be very

1693
01:11:52,159 --> 01:11:54,239
bad so you need to measure all stages of

1694
01:11:54,239 --> 01:11:57,600
the connections dns tcp tls and so on

1695
01:11:57,600 --> 01:11:59,679
and so on

1696
01:11:59,679 --> 01:12:01,920
and finally if as if we want to use this

1697
01:12:01,920 --> 01:12:03,679
kind of metric as a forcing function we

1698
01:12:03,679 --> 01:12:06,159
need it to be user friendly and we

1699
01:12:06,159 --> 01:12:07,520
needed to be

1700
01:12:07,520 --> 01:12:09,600
expressing the number in a way users can

1701
01:12:09,600 --> 01:12:12,239
understand it

1702
01:12:14,239 --> 01:12:15,040
so

1703
01:12:15,040 --> 01:12:16,880
how do we create what we call working

1704
01:12:16,880 --> 01:12:19,440
conditions because in order to measure

1705
01:12:19,440 --> 01:12:20,880
buffer bloat

1706
01:12:20,880 --> 01:12:23,280
in order to measure the responsiveness

1707
01:12:23,280 --> 01:12:25,120
when under working conditions we need to

1708
01:12:25,120 --> 01:12:27,600
fill the buffers right

1709
01:12:27,600 --> 01:12:29,920
now filling the buffers can be done for

1710
01:12:29,920 --> 01:12:32,480
example by flooding the network with udp

1711
01:12:32,480 --> 01:12:35,199
that would definitely very reliably fill

1712
01:12:35,199 --> 01:12:38,159
the buffers can guarantee that however

1713
01:12:38,159 --> 01:12:39,920
it is not a realistic traffic pattern

1714
01:12:39,920 --> 01:12:41,440
nobody does that

1715
01:12:41,440 --> 01:12:42,960
and so

1716
01:12:42,960 --> 01:12:44,960
in order to measure buffer build we need

1717
01:12:44,960 --> 01:12:47,040
to create

1718
01:12:47,040 --> 01:12:49,040
a balance between a realistic traffic

1719
01:12:49,040 --> 01:12:51,040
pattern while at the same time reliably

1720
01:12:51,040 --> 01:12:52,880
filling those buffers

1721
01:12:52,880 --> 01:12:54,000
um

1722
01:12:54,000 --> 01:12:54,880
and so

1723
01:12:54,880 --> 01:12:57,280
for example a good choice would be

1724
01:12:57,280 --> 01:12:58,159
running

1725
01:12:58,159 --> 01:13:01,920
several http 2 bulk data transfers right

1726
01:13:01,920 --> 01:13:04,000
now on the other side also with quick

1727
01:13:04,000 --> 01:13:05,920
coming along well in the future we

1728
01:13:05,920 --> 01:13:07,760
rather would want to probably use quick

1729
01:13:07,760 --> 01:13:10,800
instead of http 2 because uh the

1730
01:13:10,800 --> 01:13:12,320
buffering can be completely different

1731
01:13:12,320 --> 01:13:13,840
for quick

1732
01:13:13,840 --> 01:13:15,520
now in order to measure

1733
01:13:15,520 --> 01:13:18,239
responsiveness we need to create those

1734
01:13:18,239 --> 01:13:20,320
working conditions for an extended

1735
01:13:20,320 --> 01:13:22,320
period of time because we need to

1736
01:13:22,320 --> 01:13:25,120
measure it repeatedly and get multiple

1737
01:13:25,120 --> 01:13:27,679
samples to have a stable number right

1738
01:13:27,679 --> 01:13:30,000
and so we need to gradually add flows

1739
01:13:30,000 --> 01:13:31,679
and monitor the good put evolution to

1740
01:13:31,679 --> 01:13:33,600
create this kind of a stable condition

1741
01:13:33,600 --> 01:13:36,560
where the buffers are roughly full

1742
01:13:36,560 --> 01:13:38,560
and the good way to do is the way we do

1743
01:13:38,560 --> 01:13:41,840
it is for example in as we describe it

1744
01:13:41,840 --> 01:13:44,159
in the idea in the draft here is we

1745
01:13:44,159 --> 01:13:45,679
start with a certain number of

1746
01:13:45,679 --> 01:13:48,320
connections as those connections go

1747
01:13:48,320 --> 01:13:50,640
through tcp slow start the good put is

1748
01:13:50,640 --> 01:13:52,159
going to ramp up and it's eventually

1749
01:13:52,159 --> 01:13:53,760
going to level out

1750
01:13:53,760 --> 01:13:56,239
and at that point the only way to

1751
01:13:56,239 --> 01:13:57,760
increase the good but is by adding more

1752
01:13:57,760 --> 01:13:59,360
connections so we have more connections

1753
01:13:59,360 --> 01:14:01,520
again you will be able to see it the

1754
01:14:01,520 --> 01:14:03,280
good part increase again and then it

1755
01:14:03,280 --> 01:14:05,679
levels out again and then you basically

1756
01:14:05,679 --> 01:14:08,159
achieve a state of saturation where your

1757
01:14:08,159 --> 01:14:09,440
network is

1758
01:14:09,440 --> 01:14:11,520
as full as it can be with a reasonable

1759
01:14:11,520 --> 01:14:12,960
um

1760
01:14:12,960 --> 01:14:16,719
with a reasonable networking load

1761
01:14:17,679 --> 01:14:20,080
so once we have these stable

1762
01:14:20,080 --> 01:14:22,320
uh working conditions we can then go and

1763
01:14:22,320 --> 01:14:25,120
measure responsiveness right and there

1764
01:14:25,120 --> 01:14:27,120
are two ways to measure it the first one

1765
01:14:27,120 --> 01:14:29,679
is by using those connections that are

1766
01:14:29,679 --> 01:14:31,679
creating the working conditions by using

1767
01:14:31,679 --> 01:14:34,560
these bulk data transfer we can send an

1768
01:14:34,560 --> 01:14:36,560
additional get request on those

1769
01:14:36,560 --> 01:14:37,760
connections

1770
01:14:37,760 --> 01:14:39,440
and measure the latency for those get

1771
01:14:39,440 --> 01:14:40,880
requests

1772
01:14:40,880 --> 01:14:44,320
this is great because it allows to um

1773
01:14:44,320 --> 01:14:46,800
expose bad http 2 and tcp

1774
01:14:46,800 --> 01:14:48,480
implementations on the client and the

1775
01:14:48,480 --> 01:14:51,040
server side and it also exposes bad

1776
01:14:51,040 --> 01:14:53,280
buffering in the network

1777
01:14:53,280 --> 01:14:55,840
another the second approach and maybe or

1778
01:14:55,840 --> 01:14:58,640
orthogonal to it is measure the latency

1779
01:14:58,640 --> 01:15:00,719
on separate connections right for

1780
01:15:00,719 --> 01:15:03,840
example creating a short-lived http 2

1781
01:15:03,840 --> 01:15:06,239
get request which then allows to measure

1782
01:15:06,239 --> 01:15:09,280
dns tcp tls and the get request

1783
01:15:09,280 --> 01:15:12,480
while the network is is fully loaded

1784
01:15:12,480 --> 01:15:14,239
nick is allows to expose flow queueing

1785
01:15:14,239 --> 01:15:16,000
in the network which is a good property

1786
01:15:16,000 --> 01:15:18,640
right because it allows to work around

1787
01:15:18,640 --> 01:15:19,920
some of the

1788
01:15:19,920 --> 01:15:23,280
issues around buffer bloat

1789
01:15:23,679 --> 01:15:26,320
and then we need to as we gather all of

1790
01:15:26,320 --> 01:15:27,760
these latency measurements we need to

1791
01:15:27,760 --> 01:15:30,480
aggregate those numbers into a single

1792
01:15:30,480 --> 01:15:32,880
result because we want to have it being

1793
01:15:32,880 --> 01:15:35,040
a user-friendly number and so we can

1794
01:15:35,040 --> 01:15:37,600
take an average a 75th percentile and so

1795
01:15:37,600 --> 01:15:39,760
on

1796
01:15:39,760 --> 01:15:41,840
so finally

1797
01:15:41,840 --> 01:15:43,280
as we are doing all these measurements

1798
01:15:43,280 --> 01:15:45,199
we then expose what we call the round

1799
01:15:45,199 --> 01:15:47,600
trips per minute and we do this

1800
01:15:47,600 --> 01:15:49,600
round trip per minute instead of latency

1801
01:15:49,600 --> 01:15:51,600
because it is more user-friendly which

1802
01:15:51,600 --> 01:15:53,600
is one of the goals that i mentioned

1803
01:15:53,600 --> 01:15:55,520
initially is

1804
01:15:55,520 --> 01:15:57,840
we want it to be the higher the better

1805
01:15:57,840 --> 01:16:00,640
we want it to range from the low tens to

1806
01:16:00,640 --> 01:16:02,159
a few thousand

1807
01:16:02,159 --> 01:16:04,000
a few thousands

1808
01:16:04,000 --> 01:16:06,159
and we want it to be a nice analogy to

1809
01:16:06,159 --> 01:16:08,080
what we call revolutions per minute so

1810
01:16:08,080 --> 01:16:11,120
the rpm number is a good way to present

1811
01:16:11,120 --> 01:16:14,480
buffer bloat to the users

1812
01:16:14,640 --> 01:16:19,760
now this methodology is something um

1813
01:16:19,760 --> 01:16:21,920
is currently a work in progress and we

1814
01:16:21,920 --> 01:16:23,520
are very much looking forward to

1815
01:16:23,520 --> 01:16:24,719
feedback we have currently an

1816
01:16:24,719 --> 01:16:28,320
implementation uh in macos monterey and

1817
01:16:28,320 --> 01:16:30,400
in ios 15

1818
01:16:30,400 --> 01:16:32,800
and we also have published service

1819
01:16:32,800 --> 01:16:35,120
server-side implementations for it on on

1820
01:16:35,120 --> 01:16:37,520
github that i will show in a minute

1821
01:16:37,520 --> 01:16:38,239
so

1822
01:16:38,239 --> 01:16:40,640
we are very much looking to uh

1823
01:16:40,640 --> 01:16:43,679
collaborations around this effort to

1824
01:16:43,679 --> 01:16:44,880
define

1825
01:16:44,880 --> 01:16:45,840
um

1826
01:16:45,840 --> 01:16:48,159
to properly define a way to measure

1827
01:16:48,159 --> 01:16:49,760
buffer load and responsiveness under

1828
01:16:49,760 --> 01:16:51,600
working conditions

1829
01:16:51,600 --> 01:16:54,400
in our internet draft that we wrote we

1830
01:16:54,400 --> 01:16:57,040
are using http 2 and we are very open to

1831
01:16:57,040 --> 01:16:59,280
other suggestions on how to measure it

1832
01:16:59,280 --> 01:17:00,719
because there are many different ways to

1833
01:17:00,719 --> 01:17:02,480
create those working conditions and

1834
01:17:02,480 --> 01:17:04,320
there are many different ways to measure

1835
01:17:04,320 --> 01:17:06,560
the responsiveness and so this is really

1836
01:17:06,560 --> 01:17:07,920
a call for

1837
01:17:07,920 --> 01:17:09,920
contributions for people to come and

1838
01:17:09,920 --> 01:17:12,480
join this effort to um

1839
01:17:12,480 --> 01:17:14,719
to give suggestions on how how to

1840
01:17:14,719 --> 01:17:16,800
measure responsiveness

1841
01:17:16,800 --> 01:17:19,600
we believe that this would be very um

1842
01:17:19,600 --> 01:17:22,080
useful and we are already seeing

1843
01:17:22,080 --> 01:17:23,679
how the two can be used to actually

1844
01:17:23,679 --> 01:17:24,640
debug

1845
01:17:24,640 --> 01:17:27,840
bad http implementations in the wide end

1846
01:17:27,840 --> 01:17:29,840
so we believe that this would be very

1847
01:17:29,840 --> 01:17:31,440
beneficial for the overall user

1848
01:17:31,440 --> 01:17:33,919
experience

1849
01:17:34,560 --> 01:17:36,880
so with that i'm very happy to take any

1850
01:17:36,880 --> 01:17:38,320
questions

1851
01:17:38,320 --> 01:17:39,440
thank you

1852
01:17:39,440 --> 01:17:40,800
martin

1853
01:17:40,800 --> 01:17:42,320
hi christoph this is uh really

1854
01:17:42,320 --> 01:17:45,840
interesting really interesting um um

1855
01:17:45,840 --> 01:17:47,440
a couple so it seems like there's two

1856
01:17:47,440 --> 01:17:50,080
separate proposals here there's a um

1857
01:17:50,080 --> 01:17:52,159
like a methodology and then there's a

1858
01:17:52,159 --> 01:17:54,800
metric um so i actually have one

1859
01:17:54,800 --> 01:17:56,560
question for each so for the methodology

1860
01:17:56,560 --> 01:17:59,280
uh this this background these background

1861
01:17:59,280 --> 01:18:00,800
connections racing are they just

1862
01:18:00,800 --> 01:18:02,960
downloading an arbitrarily large

1863
01:18:02,960 --> 01:18:06,480
resource to fill the pipe

1864
01:18:06,480 --> 01:18:08,800
yeah yes that's right um okay it's just

1865
01:18:08,800 --> 01:18:11,120
an arbitrary uh it's basically an

1866
01:18:11,120 --> 01:18:14,560
infinite file yes right okay and then

1867
01:18:14,560 --> 01:18:16,480
the second question is about rpm um so

1868
01:18:16,480 --> 01:18:19,840
what what exactly is a uh

1869
01:18:19,840 --> 01:18:21,360
round trip

1870
01:18:21,360 --> 01:18:22,719
how is a round trip defined so if

1871
01:18:22,719 --> 01:18:24,719
they're doing a get does does that imply

1872
01:18:24,719 --> 01:18:26,400
that an entire resource

1873
01:18:26,400 --> 01:18:28,640
is arriving or is there some packet

1874
01:18:28,640 --> 01:18:31,199
coming back

1875
01:18:32,239 --> 01:18:33,760
so um

1876
01:18:33,760 --> 01:18:35,840
in the draft we specify also the what

1877
01:18:35,840 --> 01:18:37,679
what the the

1878
01:18:37,679 --> 01:18:40,159
protocol would be and so what we what we

1879
01:18:40,159 --> 01:18:42,000
require is that the server is able to

1880
01:18:42,000 --> 01:18:42,960
provide

1881
01:18:42,960 --> 01:18:45,120
one very large file

1882
01:18:45,120 --> 01:18:47,120
one very small file basically just one

1883
01:18:47,120 --> 01:18:50,880
byte and allow to upload data and so the

1884
01:18:50,880 --> 01:18:52,320
small file is used for latency

1885
01:18:52,320 --> 01:18:53,679
measurements and because it's just one

1886
01:18:53,679 --> 01:18:56,000
byte it would be one packet

1887
01:18:56,000 --> 01:18:57,520
um

1888
01:18:57,520 --> 01:18:59,120
so that's

1889
01:18:59,120 --> 01:19:00,719
that's basically it so in order to

1890
01:19:00,719 --> 01:19:02,480
measure latency if we send a get request

1891
01:19:02,480 --> 01:19:04,400
it takes it's just for the time it takes

1892
01:19:04,400 --> 01:19:06,239
to get the response back now the

1893
01:19:06,239 --> 01:19:08,800
assumption is that um

1894
01:19:08,800 --> 01:19:10,960
honest on a cdn implementation the

1895
01:19:10,960 --> 01:19:12,640
assumption is that this byte would be

1896
01:19:12,640 --> 01:19:14,560
locally generated so the cdn wouldn't

1897
01:19:14,560 --> 01:19:16,480
need to go back to the origin to fetch

1898
01:19:16,480 --> 01:19:17,920
it so that's that is not this kind of

1899
01:19:17,920 --> 01:19:22,040
latency in in the picture

1900
01:19:35,600 --> 01:19:38,000
do you want to

1901
01:19:38,880 --> 01:19:42,760
share your audio thank you

1902
01:19:50,480 --> 01:19:53,199
you guys hear me

1903
01:19:53,440 --> 01:19:55,199
ah no you can't

1904
01:19:55,199 --> 01:19:57,920
okay okay great yeah this is this is uh

1905
01:19:57,920 --> 01:20:00,719
very very interesting

1906
01:20:00,719 --> 01:20:02,640
yeah yeah i'm getting

1907
01:20:02,640 --> 01:20:05,679
i'm getting an echo

1908
01:20:05,679 --> 01:20:07,440
um

1909
01:20:07,440 --> 01:20:10,000
hang on yeah no anyway i hope you guys

1910
01:20:10,000 --> 01:20:11,840
are not getting an echo but anyway i

1911
01:20:11,840 --> 01:20:14,560
think this is very interesting and um i

1912
01:20:14,560 --> 01:20:18,480
would be very curious because our pdm

1913
01:20:18,480 --> 01:20:20,159
is

1914
01:20:20,159 --> 01:20:22,239
a performance and diagnostic metrics for

1915
01:20:22,239 --> 01:20:23,920
ipv6

1916
01:20:23,920 --> 01:20:26,880
that is installed both at the server and

1917
01:20:26,880 --> 01:20:31,679
client end and the idea of pdm

1918
01:20:31,679 --> 01:20:36,000
is to separate server time and client

1919
01:20:36,000 --> 01:20:37,040
time

1920
01:20:37,040 --> 01:20:38,639
because this is a problem that many

1921
01:20:38,639 --> 01:20:40,719
large enterprises have and i would be

1922
01:20:40,719 --> 01:20:42,960
very interested to see

1923
01:20:42,960 --> 01:20:45,920
how um what what kind of measurements we

1924
01:20:45,920 --> 01:20:50,880
come out with using your test data so so

1925
01:20:50,880 --> 01:20:53,040
as i said i think this is this is a

1926
01:20:53,040 --> 01:20:56,519
quite quite interesting

1927
01:21:01,440 --> 01:21:02,800
details of

1928
01:21:02,800 --> 01:21:05,840
pdm so i will all need to look into it

1929
01:21:05,840 --> 01:21:08,159
and learn a bit more about it

1930
01:21:08,159 --> 01:21:12,280
sure i'll contact you offline

1931
01:21:16,400 --> 01:21:19,600
all right uh lucas

1932
01:21:19,600 --> 01:21:20,880
i should probably

1933
01:21:20,880 --> 01:21:23,840
cut the cue after this

1934
01:21:24,960 --> 01:21:28,480
hello can you hear me okay okay

1935
01:21:28,480 --> 01:21:30,719
so just a quick one you mentioned

1936
01:21:30,719 --> 01:21:33,679
maybe being able to detect bad http 2 or

1937
01:21:33,679 --> 01:21:36,639
quick implementations but i just

1938
01:21:36,639 --> 01:21:38,320
a word of caution that there's many ways

1939
01:21:38,320 --> 01:21:39,520
to be bad

1940
01:21:39,520 --> 01:21:41,840
um you know there's lots of things in

1941
01:21:41,840 --> 01:21:42,639
these

1942
01:21:42,639 --> 01:21:44,400
specifications that

1943
01:21:44,400 --> 01:21:46,320
may be a bit optional and people choose

1944
01:21:46,320 --> 01:21:48,800
just not bother implementing them so i

1945
01:21:48,800 --> 01:21:50,320
just caveat

1946
01:21:50,320 --> 01:21:52,480
or try to caveat what you mean by a good

1947
01:21:52,480 --> 01:21:54,880
or this is bad this is for like raw

1948
01:21:54,880 --> 01:21:56,400
throughput or

1949
01:21:56,400 --> 01:21:58,800
scheduling these kinds of considerations

1950
01:21:58,800 --> 01:22:01,520
it's a very minor point but i think for

1951
01:22:01,520 --> 01:22:02,400
for

1952
01:22:02,400 --> 01:22:05,360
nitpickers like me um or people who are

1953
01:22:05,360 --> 01:22:07,600
really into web performance where the

1954
01:22:07,600 --> 01:22:09,520
workload's slightly different just

1955
01:22:09,520 --> 01:22:10,800
quantifying

1956
01:22:10,800 --> 01:22:12,480
good or bad might

1957
01:22:12,480 --> 01:22:15,120
mean something

1958
01:22:19,280 --> 01:22:22,000
the word bad was probably a bad choice

1959
01:22:22,000 --> 01:22:23,600
of words

1960
01:22:23,600 --> 01:22:26,320
sorry about that

1961
01:22:28,800 --> 01:22:30,800
all right i think we're up time on this

1962
01:22:30,800 --> 01:22:31,760
one

1963
01:22:31,760 --> 01:22:32,719
um

1964
01:22:32,719 --> 01:22:36,159
thank you stuff and

1965
01:22:36,639 --> 01:22:37,760
it'd be good to hear more comments on

1966
01:22:37,760 --> 01:22:40,639
the list especially from people who

1967
01:22:40,639 --> 01:22:42,159
have a lot of deep experience with

1968
01:22:42,159 --> 01:22:44,480
existing ippmetrics

1969
01:22:44,480 --> 01:22:47,678
and now we have al

1970
01:22:48,159 --> 01:22:51,559
wearing a deck

1971
01:23:19,520 --> 01:23:20,400
all right

1972
01:23:20,400 --> 01:23:22,080
are you able to find your slides in

1973
01:23:22,080 --> 01:23:25,760
there al i know i know there's a lot

1974
01:23:28,320 --> 01:23:30,159
still i'm still looking for the slides

1975
01:23:30,159 --> 01:23:32,560
tommy maybe i should just go with the

1976
01:23:32,560 --> 01:23:34,800
uh the screen

1977
01:23:34,800 --> 01:23:36,400
let me try to see if i can find them

1978
01:23:36,400 --> 01:23:39,799
there um

1979
01:23:53,679 --> 01:23:54,960
yeah if you want to share your screen

1980
01:23:54,960 --> 01:23:57,040
that's fine too

1981
01:23:57,040 --> 01:24:00,519
all right cool

1982
01:24:09,280 --> 01:24:10,719
and i think you still have to give me oh

1983
01:24:10,719 --> 01:24:12,320
yeah here we go

1984
01:24:12,320 --> 01:24:14,719
still yes i do

1985
01:24:14,719 --> 01:24:15,679
all right

1986
01:24:15,679 --> 01:24:19,280
i'll do the screen

1987
01:24:19,280 --> 01:24:21,599
and

1988
01:24:23,199 --> 01:24:25,280
uh let's see

1989
01:24:25,280 --> 01:24:27,920
screen one i think is this one

1990
01:24:27,920 --> 01:24:28,840
yes

1991
01:24:28,840 --> 01:24:33,280
okay and allow

1992
01:24:33,520 --> 01:24:34,800
and

1993
01:24:34,800 --> 01:24:36,719
slides

1994
01:24:36,719 --> 01:24:40,639
all right i guess i'll just make this

1995
01:24:45,120 --> 01:24:46,639
as big as i can

1996
01:24:46,639 --> 01:24:47,840
all right

1997
01:24:47,840 --> 01:24:51,440
so um thanks everybody and and uh

1998
01:24:51,440 --> 01:24:53,760
uh for um

1999
01:24:53,760 --> 01:24:55,760
joining in today and thanks uh tommy for

2000
01:24:55,760 --> 01:24:58,880
the congratulations on on the uh

2001
01:24:58,880 --> 01:25:02,040
one-way ip capacity measurement uh rc

2002
01:25:02,040 --> 01:25:05,199
1997 where uh was a long road longer

2003
01:25:05,199 --> 01:25:08,159
than we thought so um last time about

2004
01:25:08,159 --> 01:25:11,199
the protocol i gave a uh

2005
01:25:11,199 --> 01:25:13,920
let's see here i've got the time covered

2006
01:25:13,920 --> 01:25:16,320
that's not going to help

2007
01:25:16,320 --> 01:25:18,480
so um

2008
01:25:18,480 --> 01:25:22,559
what i wanted to do is is basically

2009
01:25:22,800 --> 01:25:24,719
talk about some special features of the

2010
01:25:24,719 --> 01:25:27,520
protocol since last time we talked about

2011
01:25:27,520 --> 01:25:29,440
security features and didn't get much

2012
01:25:29,440 --> 01:25:31,679
traction with that so

2013
01:25:31,679 --> 01:25:33,600
it's it's kind of a unique protocol that

2014
01:25:33,600 --> 01:25:35,760
we've developed to do this

2015
01:25:35,760 --> 01:25:37,280
uh you know what so we're going to talk

2016
01:25:37,280 --> 01:25:39,199
about what's new in the protocol

2017
01:25:39,199 --> 01:25:41,360
where the functions reside

2018
01:25:41,360 --> 01:25:43,199
between like a server and a client

2019
01:25:43,199 --> 01:25:44,080
matter

2020
01:25:44,080 --> 01:25:46,080
and

2021
01:25:46,080 --> 01:25:47,520
first and foremost thanks to the

2022
01:25:47,520 --> 01:25:49,120
reviewers

2023
01:25:49,120 --> 01:25:52,639
jan that's how he pronounces his name

2024
01:25:52,639 --> 01:25:55,360
lincoln rudiger and greg

2025
01:25:55,360 --> 01:25:57,280
so on to the next

2026
01:25:57,280 --> 01:25:59,840
all right so we've we've seen this in in

2027
01:25:59,840 --> 01:26:02,320
various forms the protocol setup and and

2028
01:26:02,320 --> 01:26:04,639
phases uh you know we've got a setup

2029
01:26:04,639 --> 01:26:08,400
exchange a test activation exchange and

2030
01:26:08,400 --> 01:26:10,080
um

2031
01:26:10,080 --> 01:26:11,360
the most important point i want to make

2032
01:26:11,360 --> 01:26:12,639
about this is that you're you're

2033
01:26:12,639 --> 01:26:14,560
actually testing connectivity when

2034
01:26:14,560 --> 01:26:17,280
you're uh your client is setting this up

2035
01:26:17,280 --> 01:26:19,920
and also um opening ports and and so

2036
01:26:19,920 --> 01:26:21,199
forth in the

2037
01:26:21,199 --> 01:26:23,199
firewalls and

2038
01:26:23,199 --> 01:26:25,760
translators and and so forth so um you

2039
01:26:25,760 --> 01:26:27,600
know these are these are important parts

2040
01:26:27,600 --> 01:26:28,960
of the exchange

2041
01:26:28,960 --> 01:26:31,199
uh and and it's always good to record

2042
01:26:31,199 --> 01:26:34,320
when you've lost connectivity uh to your

2043
01:26:34,320 --> 01:26:36,480
server or between your client and server

2044
01:26:36,480 --> 01:26:38,159
uh those are the kinds of things that

2045
01:26:38,159 --> 01:26:40,880
relate directly back to um you know

2046
01:26:40,880 --> 01:26:43,440
whether a user has connectivity in

2047
01:26:43,440 --> 01:26:45,040
general to the to the internet

2048
01:26:45,040 --> 01:26:47,920
specifically to one particular host but

2049
01:26:47,920 --> 01:26:49,920
that might be uh you know a sort of a

2050
01:26:49,920 --> 01:26:52,320
catastrophic indication as well so

2051
01:26:52,320 --> 01:26:54,719
recording failures is is just as

2052
01:26:54,719 --> 01:26:57,520
important that's one of my workshop uh

2053
01:26:57,520 --> 01:26:58,480
points

2054
01:26:58,480 --> 01:27:00,800
um but then we're going to go on mostly

2055
01:27:00,800 --> 01:27:02,639
today and talk about the test protocol

2056
01:27:02,639 --> 01:27:06,719
on the test protocol is the um

2057
01:27:06,719 --> 01:27:10,159
where we send test stream uh pdus

2058
01:27:10,159 --> 01:27:12,560
and uh and the most important part is

2059
01:27:12,560 --> 01:27:14,800
that we get measurement feedback here so

2060
01:27:14,800 --> 01:27:17,440
the measurement feedback is uh is

2061
01:27:17,440 --> 01:27:20,159
exactly what we really want to emphasize

2062
01:27:20,159 --> 01:27:21,840
and so we're going to carry these colors

2063
01:27:21,840 --> 01:27:24,960
through the load use our um

2064
01:27:24,960 --> 01:27:28,159
in the uh in black and the uh feedback

2065
01:27:28,159 --> 01:27:30,400
pdus are in blue

2066
01:27:30,400 --> 01:27:32,159
all right and not showing anything uh

2067
01:27:32,159 --> 01:27:36,320
else here other than that um

2068
01:27:36,320 --> 01:27:39,040
and uh of course this is uh the protocol

2069
01:27:39,040 --> 01:27:41,120
that we're currently using in uh running

2070
01:27:41,120 --> 01:27:42,400
code

2071
01:27:42,400 --> 01:27:43,600
so

2072
01:27:43,600 --> 01:27:46,320
so here's the test phase operation i've

2073
01:27:46,320 --> 01:27:47,120
got

2074
01:27:47,120 --> 01:27:48,639
two scenarios

2075
01:27:48,639 --> 01:27:50,480
side by side

2076
01:27:50,480 --> 01:27:53,199
i've got a downlink scenario here where

2077
01:27:53,199 --> 01:27:55,600
the server is in the network that's on

2078
01:27:55,600 --> 01:27:56,719
the top

2079
01:27:56,719 --> 01:27:59,520
it's in the role of the sender and the

2080
01:27:59,520 --> 01:28:02,000
test controller always resides with the

2081
01:28:02,000 --> 01:28:04,400
server so that's an important

2082
01:28:04,400 --> 01:28:06,639
functionality and it doesn't doesn't

2083
01:28:06,639 --> 01:28:08,639
swap completely when the

2084
01:28:08,639 --> 01:28:10,719
sending and receiving roles change

2085
01:28:10,719 --> 01:28:13,600
places so let's look at this quickly

2086
01:28:13,600 --> 01:28:15,679
you know the sender's deciding what uh

2087
01:28:15,679 --> 01:28:18,080
downlink uh test track traffic rates

2088
01:28:18,080 --> 01:28:19,679
it's going to send that for our our

2089
01:28:19,679 --> 01:28:23,120
classic uh iplayer capacity measurement

2090
01:28:23,120 --> 01:28:26,480
the receiver receives that traffic and

2091
01:28:26,480 --> 01:28:29,199
it formulates a reverse path feedback

2092
01:28:29,199 --> 01:28:32,880
message uh which includes uh loss delay

2093
01:28:32,880 --> 01:28:35,760
and reordering measured on the the scent

2094
01:28:35,760 --> 01:28:38,880
rate on uh and it sends it back every 50

2095
01:28:38,880 --> 01:28:40,960
milliseconds and i i didn't even include

2096
01:28:40,960 --> 01:28:42,880
the fact that it measures the rate here

2097
01:28:42,880 --> 01:28:44,480
but that's a fairly obvious thing that's

2098
01:28:44,480 --> 01:28:46,800
happening so then um

2099
01:28:46,800 --> 01:28:49,120
every 50 milliseconds that feedback

2100
01:28:49,120 --> 01:28:50,239
message

2101
01:28:50,239 --> 01:28:52,000
arrives at the sender

2102
01:28:52,000 --> 01:28:54,239
the test controller acts on it

2103
01:28:54,239 --> 01:28:56,639
it runs the load adjustment algorithm

2104
01:28:56,639 --> 01:28:59,199
and uh controls the sender rate uh it

2105
01:28:59,199 --> 01:29:00,880
can select a rate in the table with our

2106
01:29:00,880 --> 01:29:03,679
current logic and um

2107
01:29:03,679 --> 01:29:05,280
and that's kind of what you see uh

2108
01:29:05,280 --> 01:29:07,360
depicted here down at the bottom so

2109
01:29:07,360 --> 01:29:09,040
we're you know we ramp up the rate at

2110
01:29:09,040 --> 01:29:13,120
first uh ipgr capacity on the y-axis and

2111
01:29:13,120 --> 01:29:16,480
time on x and you can see us searching

2112
01:29:16,480 --> 01:29:19,600
for the maximum capacity here in the

2113
01:29:19,600 --> 01:29:21,280
typical uh

2114
01:29:21,280 --> 01:29:22,840
you know rfc

2115
01:29:22,840 --> 01:29:26,080
9097 method and then metric

2116
01:29:26,080 --> 01:29:29,120
so um we uh we reverse some things and

2117
01:29:29,120 --> 01:29:31,600
change some information that's exchanged

2118
01:29:31,600 --> 01:29:33,520
when we do an uplink test

2119
01:29:33,520 --> 01:29:36,239
um so now the we've arranged for the

2120
01:29:36,239 --> 01:29:38,080
sender to do

2121
01:29:38,080 --> 01:29:40,480
the sending from the client side

2122
01:29:40,480 --> 01:29:43,120
and so the uplink test traffic arrives

2123
01:29:43,120 --> 01:29:44,480
at the receiver

2124
01:29:44,480 --> 01:29:45,760
and now the

2125
01:29:45,760 --> 01:29:48,639
receiver's test controller function is

2126
01:29:48,639 --> 01:29:50,639
to perform the measurements

2127
01:29:50,639 --> 01:29:52,239
and it keeps those measurements to

2128
01:29:52,239 --> 01:29:54,480
itself it runs the load adjustment

2129
01:29:54,480 --> 01:29:57,600
algorithm and it sends the next rate uh

2130
01:29:57,600 --> 01:30:00,239
to be used over the uh the next feedback

2131
01:30:00,239 --> 01:30:01,360
interval

2132
01:30:01,360 --> 01:30:02,800
back to the sender

2133
01:30:02,800 --> 01:30:05,040
so the um

2134
01:30:05,040 --> 01:30:08,480
the reverse path uh contrary contains

2135
01:30:08,480 --> 01:30:10,560
mostly the sending rate structure which

2136
01:30:10,560 --> 01:30:13,520
is identified in the protocol and this

2137
01:30:13,520 --> 01:30:15,679
contains you know the size of packets

2138
01:30:15,679 --> 01:30:18,480
the marking of the packets uh the rate

2139
01:30:18,480 --> 01:30:21,760
at which they would be sent and um

2140
01:30:21,760 --> 01:30:23,440
and so forth and someone's looking for

2141
01:30:23,440 --> 01:30:25,199
me to go full screen which means i won't

2142
01:30:25,199 --> 01:30:26,800
be able to see

2143
01:30:26,800 --> 01:30:30,480
further comments like that so uh good so

2144
01:30:30,480 --> 01:30:31,280
um

2145
01:30:31,280 --> 01:30:33,360
what we've what we've basically enabled

2146
01:30:33,360 --> 01:30:35,840
here though is that for the the test

2147
01:30:35,840 --> 01:30:37,679
controller logic that we've currently

2148
01:30:37,679 --> 01:30:40,800
defined uh what we've got in

2149
01:30:40,800 --> 01:30:44,080
is the capability to change that logic

2150
01:30:44,080 --> 01:30:47,040
and so you could create alternate forms

2151
01:30:47,040 --> 01:30:48,000
of

2152
01:30:48,000 --> 01:30:51,199
reaction to the network or or simply uh

2153
01:30:51,199 --> 01:30:53,920
changing the rates and the and the time

2154
01:30:53,920 --> 01:30:56,480
rates over time uh the packet sizes and

2155
01:30:56,480 --> 01:30:59,040
their burst composition over time and

2156
01:30:59,040 --> 01:31:01,280
and so forth so it's a it's very much a

2157
01:31:01,280 --> 01:31:03,440
a a a

2158
01:31:03,440 --> 01:31:05,360
a uh

2159
01:31:05,360 --> 01:31:09,040
you know a very complete and uh uh easy

2160
01:31:09,040 --> 01:31:11,920
control of the um of the the testing

2161
01:31:11,920 --> 01:31:14,320
situation i i wanted also to mention

2162
01:31:14,320 --> 01:31:17,040
that we we measure round trip time on on

2163
01:31:17,040 --> 01:31:19,440
a sample basis and that's on the basis

2164
01:31:19,440 --> 01:31:22,480
of these feedback uh messages so we

2165
01:31:22,480 --> 01:31:24,639
always have an estimate of a round-trip

2166
01:31:24,639 --> 01:31:25,520
time

2167
01:31:25,520 --> 01:31:27,440
going on

2168
01:31:27,440 --> 01:31:28,239
okay

2169
01:31:28,239 --> 01:31:29,520
so

2170
01:31:29,520 --> 01:31:31,760
let's see uh i gotta hurry through this

2171
01:31:31,760 --> 01:31:34,719
now so we we've the we've got lots of

2172
01:31:34,719 --> 01:31:37,600
motivation for the new protocol um you

2173
01:31:37,600 --> 01:31:39,520
know it's different from a session

2174
01:31:39,520 --> 01:31:42,719
sender in that you um

2175
01:31:42,719 --> 01:31:45,120
uh you know or the reflector we're

2176
01:31:45,120 --> 01:31:46,560
definitely not sending packets back

2177
01:31:46,560 --> 01:31:49,440
every time uh it's different from owamp

2178
01:31:49,440 --> 01:31:51,040
in that there's a fetch and sending

2179
01:31:51,040 --> 01:31:52,960
results at the end of the session and

2180
01:31:52,960 --> 01:31:56,800
the the uh uh the security for uh owamp

2181
01:31:56,800 --> 01:31:58,639
and ramp is kind of old and was

2182
01:31:58,639 --> 01:32:00,960
described as unusual it was a little bit

2183
01:32:00,960 --> 01:32:02,719
challenging way back then

2184
01:32:02,719 --> 01:32:03,920
so um

2185
01:32:03,920 --> 01:32:04,880
uh

2186
01:32:04,880 --> 01:32:06,880
we've we've had some good comments as i

2187
01:32:06,880 --> 01:32:07,760
mentioned

2188
01:32:07,760 --> 01:32:08,960
and um

2189
01:32:08,960 --> 01:32:10,080
uh

2190
01:32:10,080 --> 01:32:12,000
one of the things i've decided which

2191
01:32:12,000 --> 01:32:14,159
made it kind of easy to just to decide

2192
01:32:14,159 --> 01:32:16,159
where we stopped with uh the zero two

2193
01:32:16,159 --> 01:32:18,800
update uh we're gonna stop

2194
01:32:18,800 --> 01:32:21,920
uh describing uh version eight after

2195
01:32:21,920 --> 01:32:25,120
this uh version and so new updates will

2196
01:32:25,120 --> 01:32:27,920
result in a version 9 or higher

2197
01:32:27,920 --> 01:32:29,920
versions of the protocol

2198
01:32:29,920 --> 01:32:32,560
so that's good that frees us up and of

2199
01:32:32,560 --> 01:32:34,000
course we've got running code and the

2200
01:32:34,000 --> 01:32:35,440
running codes available you can get that

2201
01:32:35,440 --> 01:32:37,520
link from the draft

2202
01:32:37,520 --> 01:32:39,920
when we see errors during setup there

2203
01:32:39,920 --> 01:32:41,679
could be multiple errors

2204
01:32:41,679 --> 01:32:44,400
right now we're using a hierarchy

2205
01:32:44,400 --> 01:32:45,840
you know where the first bad thing that

2206
01:32:45,840 --> 01:32:47,600
happens is what gets reported as an

2207
01:32:47,600 --> 01:32:48,560
error

2208
01:32:48,560 --> 01:32:50,639
but we could make that a field with

2209
01:32:50,639 --> 01:32:51,840
flags

2210
01:32:51,840 --> 01:32:53,520
both of those options are described in

2211
01:32:53,520 --> 01:32:55,920
the current draft

2212
01:32:55,920 --> 01:32:58,800
one of the options that jan asked for uh

2213
01:32:58,800 --> 01:33:01,120
was uh options for the payload uh you

2214
01:33:01,120 --> 01:33:03,040
know whether it be all ones or all zeros

2215
01:33:03,040 --> 01:33:05,199
or alternating or pseudo-random

2216
01:33:05,199 --> 01:33:06,800
that helps a pseudo-random helps out

2217
01:33:06,800 --> 01:33:09,600
with compression links like on satellite

2218
01:33:09,600 --> 01:33:12,320
and then um

2219
01:33:12,320 --> 01:33:14,960
then we've got

2220
01:33:15,360 --> 01:33:17,920
this last one here which is uh interface

2221
01:33:17,920 --> 01:33:20,000
measurements where we're actually in the

2222
01:33:20,000 --> 01:33:21,440
in the running code right now we're

2223
01:33:21,440 --> 01:33:23,760
actually making diagnostic measurements

2224
01:33:23,760 --> 01:33:26,560
on the interface uh that observes all

2225
01:33:26,560 --> 01:33:29,040
the traffic so you know way back here in

2226
01:33:29,040 --> 01:33:30,159
a downlink

2227
01:33:30,159 --> 01:33:32,639
test if we've got test traffic sharing

2228
01:33:32,639 --> 01:33:34,800
traffic with user traffic

2229
01:33:34,800 --> 01:33:38,320
uh we can measure that at where two and

2230
01:33:38,320 --> 01:33:40,080
it's a kind of a hybrid type two

2231
01:33:40,080 --> 01:33:42,320
measurement at that point uh before that

2232
01:33:42,320 --> 01:33:45,120
it's it's purely active so uh we've

2233
01:33:45,120 --> 01:33:47,840
we've got that going now and um you know

2234
01:33:47,840 --> 01:33:50,239
you could you could uh you could make

2235
01:33:50,239 --> 01:33:53,199
that a make a case for that in the um

2236
01:33:53,199 --> 01:33:54,400
uh

2237
01:33:54,400 --> 01:33:56,800
earlier two as well and maximize on

2238
01:33:56,800 --> 01:33:59,920
where to so um like i said next steps we

2239
01:33:59,920 --> 01:34:02,080
we talked about the security features at

2240
01:34:02,080 --> 01:34:05,280
uh 111 uh the authors uh welcome

2241
01:34:05,280 --> 01:34:07,120
protocols and and revisions to the

2242
01:34:07,120 --> 01:34:09,840
security modes of operation um but today

2243
01:34:09,840 --> 01:34:11,280
we talked about what i think are the

2244
01:34:11,280 --> 01:34:13,360
unique features of this protocol

2245
01:34:13,360 --> 01:34:15,440
proposal it can do more than measure

2246
01:34:15,440 --> 01:34:18,000
capacity and and um you know we've taken

2247
01:34:18,000 --> 01:34:20,320
a look at that uh we'd like others to

2248
01:34:20,320 --> 01:34:23,120
take a look and um uh i had a side

2249
01:34:23,120 --> 01:34:26,000
conversation with martin last time uh we

2250
01:34:26,000 --> 01:34:26,800
uh

2251
01:34:26,800 --> 01:34:28,880
with working group adoption we could get

2252
01:34:28,880 --> 01:34:32,400
an early uh security director view and

2253
01:34:32,400 --> 01:34:34,719
and that would help us uh solve that

2254
01:34:34,719 --> 01:34:36,960
aspect for this protocol in a way that

2255
01:34:36,960 --> 01:34:39,440
might uh go through the iesg a little

2256
01:34:39,440 --> 01:34:41,679
easier so um

2257
01:34:41,679 --> 01:34:43,199
thanks for your attention and i hope

2258
01:34:43,199 --> 01:34:46,678
there's some questions

2259
01:34:52,480 --> 01:34:55,280
well um

2260
01:34:55,920 --> 01:34:58,960
any question

2261
01:34:59,520 --> 01:35:01,760
all right

2262
01:35:02,239 --> 01:35:03,840
i'm sorry if you said this already but

2263
01:35:03,840 --> 01:35:04,960
like

2264
01:35:04,960 --> 01:35:09,520
how does this relate to rsc 1997

2265
01:35:10,159 --> 01:35:12,960
it this is the protocol we're using

2266
01:35:12,960 --> 01:35:14,719
currently in the running code for

2267
01:35:14,719 --> 01:35:17,920
measuring rfc 1997

2268
01:35:17,920 --> 01:35:19,920
and

2269
01:35:19,920 --> 01:35:21,840
with the logic that's in let me bring

2270
01:35:21,840 --> 01:35:23,760
this back up again martin

2271
01:35:23,760 --> 01:35:25,840
with the logic that's

2272
01:35:25,840 --> 01:35:27,840
that's currently implemented in here the

2273
01:35:27,840 --> 01:35:30,719
load adjustment algorithm

2274
01:35:30,719 --> 01:35:32,480
this is what we do

2275
01:35:32,480 --> 01:35:34,239
we try to measure

2276
01:35:34,239 --> 01:35:36,880
the maximum capacity and we do that

2277
01:35:36,880 --> 01:35:38,480
based on on the feedback that we're

2278
01:35:38,480 --> 01:35:41,879
currently receiving

2279
01:35:44,719 --> 01:35:46,560
and the point i'm making is that you

2280
01:35:46,560 --> 01:35:48,880
could change this logic this load

2281
01:35:48,880 --> 01:35:51,119
adjustment algorithm to do lots of other

2282
01:35:51,119 --> 01:35:54,119
things

2283
01:36:07,280 --> 01:36:09,600
for example um

2284
01:36:09,600 --> 01:36:11,280
you know a hybrid type 2 measurement

2285
01:36:11,280 --> 01:36:12,800
where you're where you're seeking

2286
01:36:12,800 --> 01:36:13,760
additional

2287
01:36:13,760 --> 01:36:15,280
uh downstream load and you want to

2288
01:36:15,280 --> 01:36:17,440
measure uh the performance of the

2289
01:36:17,440 --> 01:36:20,400
passive traffic that's alongside of it

2290
01:36:20,400 --> 01:36:22,719
you know at full capacity so where you

2291
01:36:22,719 --> 01:36:24,719
may be building up your buffers and so

2292
01:36:24,719 --> 01:36:26,960
forth

2293
01:36:35,280 --> 01:36:37,760
okay sounds like we don't have anyone

2294
01:36:37,760 --> 01:36:40,560
else in the queue

2295
01:36:41,440 --> 01:36:44,239
thank you al

2296
01:36:44,719 --> 01:36:46,480
you're welcome welcome

2297
01:36:46,480 --> 01:36:47,679
all right

2298
01:36:47,679 --> 01:36:49,119
hopefully we'll have some more follow-up

2299
01:36:49,119 --> 01:36:53,159
on list as well

2300
01:36:55,199 --> 01:36:57,040
okay and then

2301
01:36:57,040 --> 01:36:58,800
next up i think we have

2302
01:36:58,800 --> 01:37:02,600
greg talking about epm

2303
01:37:16,000 --> 01:37:19,320
about it

2304
01:37:21,600 --> 01:37:25,679
i can probably share my screen

2305
01:37:25,679 --> 01:37:26,880
you should also be able to share the

2306
01:37:26,880 --> 01:37:29,040
pre-loaded slides

2307
01:37:29,040 --> 01:37:32,040
yourself

2308
01:37:34,480 --> 01:37:38,440
do you want to click that button

2309
01:37:44,050 --> 01:37:47,169
[Music]

2310
01:37:48,159 --> 01:37:50,960
i don't see the button right

2311
01:37:50,960 --> 01:37:53,040
right of the hand button

2312
01:37:53,040 --> 01:37:55,360
okay

2313
01:37:56,719 --> 01:37:57,920
here we go

2314
01:37:57,920 --> 01:37:59,600
okay great thank you

2315
01:37:59,600 --> 01:38:01,360
okay so um

2316
01:38:01,360 --> 01:38:03,360
this is update on error performance

2317
01:38:03,360 --> 01:38:06,320
measurement in packet switch network and

2318
01:38:06,320 --> 01:38:07,840
uh let's

2319
01:38:07,840 --> 01:38:08,719
go

2320
01:38:08,719 --> 01:38:11,840
to the next slide please

2321
01:38:12,159 --> 01:38:14,159
okay so the recap

2322
01:38:14,159 --> 01:38:16,000
their error performance measurement we

2323
01:38:16,000 --> 01:38:18,560
define several metrics for the packet

2324
01:38:18,560 --> 01:38:21,520
switch networks that reflect conformance

2325
01:38:21,520 --> 01:38:25,199
to set of predefined uh service level

2326
01:38:25,199 --> 01:38:28,560
objectives and among this metrics we

2327
01:38:28,560 --> 01:38:32,000
have the availability and unavailability

2328
01:38:32,000 --> 01:38:34,800
as a sequence of the time intervals

2329
01:38:34,800 --> 01:38:40,000
that conforms on do not conform to slo

2330
01:38:40,000 --> 01:38:42,960
since our last presentation we have two

2331
01:38:42,960 --> 01:38:46,639
new coffers uh leon and joel joining us

2332
01:38:46,639 --> 01:38:47,679
welcome

2333
01:38:47,679 --> 01:38:51,040
and uh we updated um we edited the

2334
01:38:51,040 --> 01:38:54,480
section on um availability of

2335
01:38:54,480 --> 01:38:57,360
anything as a service and uh

2336
01:38:57,360 --> 01:39:01,520
availability uh as um

2337
01:39:01,520 --> 01:39:05,360
used uh in mobile communication and uh

2338
01:39:05,360 --> 01:39:06,480
look at

2339
01:39:06,480 --> 01:39:09,280
how are these two

2340
01:39:09,280 --> 01:39:11,360
uh interpretations

2341
01:39:11,360 --> 01:39:14,239
of availability relate to

2342
01:39:14,239 --> 01:39:16,800
what we discuss in error performance

2343
01:39:16,800 --> 01:39:20,560
measurement next slide please

2344
01:39:22,000 --> 01:39:24,639
so what is anything as a service i think

2345
01:39:24,639 --> 01:39:27,520
that we are all well familiar it's a

2346
01:39:27,520 --> 01:39:29,199
concept of

2347
01:39:29,199 --> 01:39:31,679
services related to the cloud computing

2348
01:39:31,679 --> 01:39:33,440
and remote access

2349
01:39:33,440 --> 01:39:35,920
uh and um

2350
01:39:35,920 --> 01:39:37,679
almost everything

2351
01:39:37,679 --> 01:39:40,400
anything is a service as a security

2352
01:39:40,400 --> 01:39:41,920
platform

2353
01:39:41,920 --> 01:39:43,679
uh software

2354
01:39:43,679 --> 01:39:44,719
um

2355
01:39:44,719 --> 01:39:46,960
so um

2356
01:39:46,960 --> 01:39:48,639
sdn um

2357
01:39:48,639 --> 01:39:50,159
as the van

2358
01:39:50,159 --> 01:39:51,840
um so

2359
01:39:51,840 --> 01:39:52,800
network

2360
01:39:52,800 --> 01:39:55,840
as a service

2361
01:39:56,159 --> 01:39:58,719
next slide

2362
01:40:00,320 --> 01:40:02,400
so

2363
01:40:02,400 --> 01:40:04,719
as everything uh it doesn't come for

2364
01:40:04,719 --> 01:40:06,800
free so it has some benefits but at the

2365
01:40:06,800 --> 01:40:08,880
same time it has

2366
01:40:08,880 --> 01:40:12,000
challenges and the advantages of

2367
01:40:12,000 --> 01:40:14,800
anything as a service is it improves

2368
01:40:14,800 --> 01:40:16,639
express model because

2369
01:40:16,639 --> 01:40:19,040
um there is a

2370
01:40:19,040 --> 01:40:22,560
lower uh capex

2371
01:40:22,560 --> 01:40:23,360
and

2372
01:40:23,360 --> 01:40:24,400
purchase

2373
01:40:24,400 --> 01:40:27,600
a subscribe subscription basis

2374
01:40:27,600 --> 01:40:30,320
and as more capacity needed from the

2375
01:40:30,320 --> 01:40:32,400
providers

2376
01:40:32,400 --> 01:40:34,320
and it allows

2377
01:40:34,320 --> 01:40:39,119
uh the enterprise uh to uh faster adopt

2378
01:40:39,119 --> 01:40:44,159
new applications and um use its uh

2379
01:40:44,159 --> 01:40:48,480
expertise of its it on a specifics of

2380
01:40:48,480 --> 01:40:51,119
its uh main business rather than in

2381
01:40:51,119 --> 01:40:52,320
support

2382
01:40:52,320 --> 01:40:54,639
but at the same time anything is a

2383
01:40:54,639 --> 01:40:57,280
service has some potential challenges

2384
01:40:57,280 --> 01:41:00,320
so because they depend on more equipment

2385
01:41:00,320 --> 01:41:03,040
on the network connectivity and

2386
01:41:03,040 --> 01:41:05,119
availability of

2387
01:41:05,119 --> 01:41:07,760
computing resources so they might be

2388
01:41:07,760 --> 01:41:12,800
constrained by their temporary loss of

2389
01:41:13,040 --> 01:41:15,119
connectivity uh

2390
01:41:15,119 --> 01:41:17,840
problems with the resilience

2391
01:41:17,840 --> 01:41:22,159
low bandwidth and low computing power

2392
01:41:22,400 --> 01:41:25,280
next slide please

2393
01:41:27,920 --> 01:41:30,159
for

2394
01:41:30,400 --> 01:41:32,960
anything is a service um

2395
01:41:32,960 --> 01:41:36,320
using a dedicated uh environment

2396
01:41:36,320 --> 01:41:38,480
uh the availability average is

2397
01:41:38,480 --> 01:41:41,119
understood as a mean time between

2398
01:41:41,119 --> 01:41:42,239
failures

2399
01:41:42,239 --> 01:41:43,199
uh

2400
01:41:43,199 --> 01:41:44,400
it's a

2401
01:41:44,400 --> 01:41:45,760
equation between

2402
01:41:45,760 --> 01:41:48,400
of a mean time between failures and mean

2403
01:41:48,400 --> 01:41:52,880
time to repair and um example of uh

2404
01:41:52,880 --> 01:41:55,440
failures that considered its hard drive

2405
01:41:55,440 --> 01:41:58,159
malfunction in a data center or

2406
01:41:58,159 --> 01:42:02,159
hypervisor reboot uh mean time to repair

2407
01:42:02,159 --> 01:42:04,800
is how much time it takes to fix a

2408
01:42:04,800 --> 01:42:07,679
broken component uh our application to

2409
01:42:07,679 --> 01:42:09,520
come back online

2410
01:42:09,520 --> 01:42:13,199
um obviously um so we can if we look at

2411
01:42:13,199 --> 01:42:14,880
this equation

2412
01:42:14,880 --> 01:42:17,679
we can see that

2413
01:42:17,679 --> 01:42:20,320
mean time between failures can be uh

2414
01:42:20,320 --> 01:42:22,320
considered as a constant for the

2415
01:42:22,320 --> 01:42:25,519
particular environment

2416
01:42:26,000 --> 01:42:29,280
and the only uh way to uh improve

2417
01:42:29,280 --> 01:42:30,719
availability

2418
01:42:30,719 --> 01:42:34,480
is uh to minimize uh mean time to repair

2419
01:42:34,480 --> 01:42:37,440
and that can be achieved by introducing

2420
01:42:37,440 --> 01:42:39,520
uh redundancy

2421
01:42:39,520 --> 01:42:41,119
uh in their

2422
01:42:41,119 --> 01:42:44,400
infrastructure is like um

2423
01:42:44,400 --> 01:42:46,239
with a web

2424
01:42:46,239 --> 01:42:49,040
or database service or

2425
01:42:49,040 --> 01:42:52,000
world balancers

2426
01:42:52,000 --> 01:42:54,639
uh in epm um

2427
01:42:54,639 --> 01:42:57,199
epm reflects uh near real-time

2428
01:42:57,199 --> 01:42:59,440
availability by uh measuring the

2429
01:42:59,440 --> 01:43:00,719
conformance

2430
01:43:00,719 --> 01:43:04,320
uh to uh slos and the ability to

2431
01:43:04,320 --> 01:43:06,960
communicate so basically it can it's a

2432
01:43:06,960 --> 01:43:08,719
combination of

2433
01:43:08,719 --> 01:43:09,679
uh

2434
01:43:09,679 --> 01:43:11,920
performance monitoring and

2435
01:43:11,920 --> 01:43:16,080
fault management monitoring their

2436
01:43:16,239 --> 01:43:18,880
continuity of the path

2437
01:43:18,880 --> 01:43:20,400
from the user

2438
01:43:20,400 --> 01:43:24,639
uh to their cloud

2439
01:43:24,639 --> 01:43:26,400
and um

2440
01:43:26,400 --> 01:43:29,119
using uh the epm interpretation of

2441
01:43:29,119 --> 01:43:31,040
availability it

2442
01:43:31,040 --> 01:43:33,440
provides uh valuable data and more

2443
01:43:33,440 --> 01:43:35,840
accurate realistic

2444
01:43:35,840 --> 01:43:38,239
information about

2445
01:43:38,239 --> 01:43:41,360
mean time between failures and

2446
01:43:41,360 --> 01:43:45,199
mean time to repair so

2447
01:43:45,280 --> 01:43:48,320
because these are

2448
01:43:48,639 --> 01:43:51,600
giving us a theoretical

2449
01:43:51,600 --> 01:43:54,560
estimation of availability while

2450
01:43:54,560 --> 01:43:56,239
using their

2451
01:43:56,239 --> 01:43:59,199
methodology of error performance

2452
01:43:59,199 --> 01:44:02,480
measurement gives us a real time or near

2453
01:44:02,480 --> 01:44:04,840
real-time

2454
01:44:04,840 --> 01:44:06,639
information

2455
01:44:06,639 --> 01:44:09,520
next slide please

2456
01:44:10,000 --> 01:44:13,119
so another um

2457
01:44:14,639 --> 01:44:18,800
domain are where we can see there or

2458
01:44:18,800 --> 01:44:21,040
hear about their availability is mobile

2459
01:44:21,040 --> 01:44:22,480
communication

2460
01:44:22,480 --> 01:44:24,719
so the mobile voice and data services

2461
01:44:24,719 --> 01:44:27,119
the definition of service availability

2462
01:44:27,119 --> 01:44:30,560
can be uh found in um

2463
01:44:30,560 --> 01:44:32,480
baric

2464
01:44:32,480 --> 01:44:35,040
communication positioning um

2465
01:44:35,040 --> 01:44:38,719
and it's uh oriented uh

2466
01:44:38,719 --> 01:44:42,560
for uh operators and consumers so and

2467
01:44:42,560 --> 01:44:44,320
it's uses their

2468
01:44:44,320 --> 01:44:48,000
percentage of the number of attempts

2469
01:44:48,000 --> 01:44:50,159
to their access

2470
01:44:50,159 --> 01:44:52,719
given services successful uh

2471
01:44:52,719 --> 01:44:53,840
attempt

2472
01:44:53,840 --> 01:44:54,960
but

2473
01:44:54,960 --> 01:44:57,360
it's only

2474
01:44:57,360 --> 01:45:00,080
reflects on

2475
01:45:00,080 --> 01:45:02,000
established connection it does not

2476
01:45:02,000 --> 01:45:03,920
reflect the quality of connection so

2477
01:45:03,920 --> 01:45:08,400
that now uh when we see that uh it's uh

2478
01:45:08,400 --> 01:45:12,639
not only a voice but a mobile broadband

2479
01:45:12,639 --> 01:45:15,760
so their quality of uh the connection

2480
01:45:15,760 --> 01:45:16,880
are

2481
01:45:16,880 --> 01:45:17,840
becomes

2482
01:45:17,840 --> 01:45:20,800
more important and that's where again

2483
01:45:20,800 --> 01:45:24,639
uh the methodology of

2484
01:45:24,639 --> 01:45:27,280
error performance management and the

2485
01:45:27,280 --> 01:45:31,119
approach of how availability is

2486
01:45:31,119 --> 01:45:32,719
uh

2487
01:45:32,719 --> 01:45:36,000
determined and measured and expressed

2488
01:45:36,000 --> 01:45:39,360
uh allows for a better understanding and

2489
01:45:39,360 --> 01:45:43,280
better uh quantifying of availability

2490
01:45:43,280 --> 01:45:45,199
for mobile

2491
01:45:45,199 --> 01:45:48,719
voice and data communication

2492
01:45:49,600 --> 01:45:52,400
next slide please

2493
01:45:52,800 --> 01:45:55,199
so what we

2494
01:45:55,199 --> 01:45:57,600
we always welcome comments and questions

2495
01:45:57,600 --> 01:45:59,760
contribution cooperation

2496
01:45:59,760 --> 01:46:00,800
and

2497
01:46:00,800 --> 01:46:02,719
we think that

2498
01:46:02,719 --> 01:46:04,400
this is something

2499
01:46:04,400 --> 01:46:06,560
that working group might be interested

2500
01:46:06,560 --> 01:46:08,719
and would like to ask to consider

2501
01:46:08,719 --> 01:46:12,360
working group adoption

2502
01:46:12,560 --> 01:46:14,480
and uh

2503
01:46:14,480 --> 01:46:18,080
i see fan um

2504
01:46:22,560 --> 01:46:25,880
yes please

2505
01:46:31,040 --> 01:46:34,400
i can't hear you if you're talking

2506
01:46:38,840 --> 01:46:41,280
fan all right in the interest of time i

2507
01:46:41,280 --> 01:46:42,800
think we're just going to have to take

2508
01:46:42,800 --> 01:46:45,520
that list or you can drop your question

2509
01:46:45,520 --> 01:46:48,239
or comment in the chat

2510
01:46:48,239 --> 01:46:49,520
thank you okay

2511
01:46:49,520 --> 01:46:51,040
thanks

2512
01:46:51,040 --> 01:46:53,600
okay so now we're on to our quick

2513
01:46:53,600 --> 01:46:55,679
elevator pitches these are ones like i

2514
01:46:55,679 --> 01:46:57,760
will display

2515
01:46:57,760 --> 01:46:58,560
the

2516
01:46:58,560 --> 01:46:59,520
oh

2517
01:46:59,520 --> 01:47:01,840
sorry yang can you come back on um i can

2518
01:47:01,840 --> 01:47:05,600
display the slides now

2519
01:47:07,119 --> 01:47:10,400
and we will start with

2520
01:47:12,080 --> 01:47:16,159
some of the draftly ones okay

2521
01:47:17,920 --> 01:47:19,840
all right

2522
01:47:19,840 --> 01:47:21,600
and again for these we just want to

2523
01:47:21,600 --> 01:47:23,040
cover them in

2524
01:47:23,040 --> 01:47:24,880
like a minute or two and please focus on

2525
01:47:24,880 --> 01:47:26,880
you know what should this group be

2526
01:47:26,880 --> 01:47:29,119
interested about why did it

2527
01:47:29,119 --> 01:47:30,880
uh why should people comment on it or

2528
01:47:30,880 --> 01:47:32,239
read your draft

2529
01:47:32,239 --> 01:47:33,360
okay

2530
01:47:33,360 --> 01:47:35,760
okay i'm yami from china mobile can you

2531
01:47:35,760 --> 01:47:38,159
hear me

2532
01:47:41,199 --> 01:47:43,520
okay

2533
01:47:43,520 --> 01:47:45,760
the title of my talk is one-way delay

2534
01:47:45,760 --> 01:47:48,480
moment based on reference delay

2535
01:47:48,480 --> 01:47:50,960
so the background is that entrance

2536
01:47:50,960 --> 01:47:53,119
one-way delay measurements is very

2537
01:47:53,119 --> 01:47:54,239
important

2538
01:47:54,239 --> 01:47:55,520
uh for

2539
01:47:55,520 --> 01:47:59,280
sla as in this fit and the figure on the

2540
01:47:59,280 --> 01:48:02,000
left we need to know the end-to-end one

2541
01:48:02,000 --> 01:48:05,600
one-way delay of a video surveillance

2542
01:48:05,600 --> 01:48:09,280
service in 5g network

2543
01:48:09,280 --> 01:48:11,840
we can see that the and one to one-way

2544
01:48:11,840 --> 01:48:15,119
delay is the sum of t1 to t4

2545
01:48:15,119 --> 01:48:17,760
we propose a new method to accurately

2546
01:48:17,760 --> 01:48:19,600
measure the one-way delay

2547
01:48:19,600 --> 01:48:22,480
using reference delay without deploying

2548
01:48:22,480 --> 01:48:24,320
clock synchronization

2549
01:48:24,320 --> 01:48:26,960
the reference delay

2550
01:48:26,960 --> 01:48:28,320
is bounded

2551
01:48:28,320 --> 01:48:31,520
and has lower data it can be obtained in

2552
01:48:31,520 --> 01:48:34,639
deterministic networking in figure 2 on

2553
01:48:34,639 --> 01:48:37,520
the left side the engine end-to-end

2554
01:48:37,520 --> 01:48:39,280
one-way delay from the sender to the

2555
01:48:39,280 --> 01:48:41,040
receiver

2556
01:48:41,040 --> 01:48:43,679
is measured and the intermediate network

2557
01:48:43,679 --> 01:48:46,560
device are hidden for simplicity we

2558
01:48:46,560 --> 01:48:49,119
assume the cinder

2559
01:48:49,119 --> 01:48:51,360
clock and the receiver clock are not

2560
01:48:51,360 --> 01:48:55,199
synchronized and has some clock offset

2561
01:48:55,199 --> 01:48:57,760
in this figure the delay of the

2562
01:48:57,760 --> 01:49:01,600
reference packet is stable and bounded

2563
01:49:01,600 --> 01:49:04,480
and deleted as the reference

2564
01:49:04,480 --> 01:49:06,480
and the

2565
01:49:06,480 --> 01:49:08,000
delay of the

2566
01:49:08,000 --> 01:49:11,199
target packet is measured

2567
01:49:11,199 --> 01:49:15,839
and the way denoted as the target

2568
01:49:16,080 --> 01:49:19,199
we will time step both the reference and

2569
01:49:19,199 --> 01:49:21,199
the target packet on the sender and

2570
01:49:21,199 --> 01:49:24,000
receiver side respectively

2571
01:49:24,000 --> 01:49:27,040
denoted as ts1 ts2

2572
01:49:27,040 --> 01:49:30,480
tr1 and tr2

2573
01:49:31,040 --> 01:49:32,960
uh for reference we're talking we're

2574
01:49:32,960 --> 01:49:34,719
we're out of time

2575
01:49:34,719 --> 01:49:35,679
um

2576
01:49:35,679 --> 01:49:37,920
i i know you have another slide coming

2577
01:49:37,920 --> 01:49:39,520
up right after this okay okay we're

2578
01:49:39,520 --> 01:49:40,960
gonna switch to that

2579
01:49:40,960 --> 01:49:42,960
people have comments you can get to

2580
01:49:42,960 --> 01:49:46,239
those on the list um

2581
01:49:46,239 --> 01:49:47,920
all right so your next one is again a

2582
01:49:47,920 --> 01:49:50,639
one-way delay

2583
01:49:52,320 --> 01:49:53,920
here we go

2584
01:49:53,920 --> 01:49:55,840
as quick as yes

2585
01:49:55,840 --> 01:49:57,360
okay

2586
01:49:57,360 --> 01:50:00,400
uh they we we propose a new one-way

2587
01:50:00,400 --> 01:50:01,840
delay environment

2588
01:50:01,840 --> 01:50:04,480
uh method also based on deterministic

2589
01:50:04,480 --> 01:50:07,119
net networking

2590
01:50:07,119 --> 01:50:10,400
uh the the way we can have a centralized

2591
01:50:10,400 --> 01:50:12,480
control node as shown

2592
01:50:12,480 --> 01:50:14,480
and used to collecting network

2593
01:50:14,480 --> 01:50:16,719
information and the link from each

2594
01:50:16,719 --> 01:50:19,040
network element to the synchronize the

2595
01:50:19,040 --> 01:50:21,840
control node leverages delay

2596
01:50:21,840 --> 01:50:23,679
deterministic links

2597
01:50:23,679 --> 01:50:25,599
so that the delay are shown in the

2598
01:50:25,599 --> 01:50:29,119
figure on the left side denoted at t1 t2

2599
01:50:29,119 --> 01:50:30,800
to tn

2600
01:50:30,800 --> 01:50:33,920
and can be calculated in advance and

2601
01:50:33,920 --> 01:50:39,080
have relatively stable and low jitter

2602
01:50:39,599 --> 01:50:42,800
as shown on the right side the network

2603
01:50:42,800 --> 01:50:45,520
element m and n are connected to the

2604
01:50:45,520 --> 01:50:48,360
centralized node by delay

2605
01:50:48,360 --> 01:50:51,599
deterministic network when the track

2606
01:50:51,599 --> 01:50:55,599
traffic flows from the network element

2607
01:50:55,599 --> 01:50:58,719
m to n they will upload flow information

2608
01:50:58,719 --> 01:51:00,719
to the centralizer control load the

2609
01:51:00,719 --> 01:51:03,440
transmission delay of flow information

2610
01:51:03,440 --> 01:51:07,280
tm and tn respectively

2611
01:51:07,280 --> 01:51:10,639
and the arrival time of flow information

2612
01:51:10,639 --> 01:51:13,119
at the centralized control load is tm

2613
01:51:13,119 --> 01:51:15,520
prime and the tm prime

2614
01:51:15,520 --> 01:51:17,599
respectively all right then the delay

2615
01:51:17,599 --> 01:51:20,560
can be calculated by this formula

2616
01:51:20,560 --> 01:51:22,560
and more details are shown in the

2617
01:51:22,560 --> 01:51:24,320
document thank you

2618
01:51:24,320 --> 01:51:26,400
great thank you

2619
01:51:26,400 --> 01:51:30,080
all right okay up next we have just

2620
01:51:30,400 --> 01:51:32,719
yeah hello all right let me just pull up

2621
01:51:32,719 --> 01:51:35,199
your this is the enhanced alternate

2622
01:51:35,199 --> 01:51:36,400
marking

2623
01:51:36,400 --> 01:51:38,400
yeah

2624
01:51:38,400 --> 01:51:39,760
all right

2625
01:51:39,760 --> 01:51:42,320
the single slide is light four if you

2626
01:51:42,320 --> 01:51:44,400
can go on flight four

2627
01:51:44,400 --> 01:51:46,960
but you're here yeah pitch it to us

2628
01:51:46,960 --> 01:51:48,800
yeah the background is that in a few

2629
01:51:48,800 --> 01:51:50,960
words that

2630
01:51:50,960 --> 01:51:51,760
we

2631
01:51:51,760 --> 01:51:54,239
already presented the alternate marking

2632
01:51:54,239 --> 01:51:58,239
data fields for ipv6 and the relevant

2633
01:51:58,239 --> 01:52:00,400
document is

2634
01:52:00,400 --> 01:52:02,320
an isg evaluation but during the

2635
01:52:02,320 --> 01:52:05,280
discussion we

2636
01:52:05,440 --> 01:52:08,480
there was some inputs from the sg to

2637
01:52:08,480 --> 01:52:10,400
consider whether the flow monitor

2638
01:52:10,400 --> 01:52:12,639
identification field can be extended in

2639
01:52:12,639 --> 01:52:15,760
order to have more entropy

2640
01:52:15,760 --> 01:52:16,560
uh

2641
01:52:16,560 --> 01:52:19,679
considering this motivation we propose

2642
01:52:19,679 --> 01:52:22,560
this graph to discuss in ippm how to

2643
01:52:22,560 --> 01:52:24,320
generalize the

2644
01:52:24,320 --> 01:52:26,239
data fields extension

2645
01:52:26,239 --> 01:52:28,040
and whether it

2646
01:52:28,040 --> 01:52:31,520
is necessary to

2647
01:52:31,520 --> 01:52:33,599
extend the

2648
01:52:33,599 --> 01:52:35,440
the flow monitor identification field

2649
01:52:35,440 --> 01:52:38,639
for example the next header can be

2650
01:52:38,639 --> 01:52:41,760
can be used to define this enhanced

2651
01:52:41,760 --> 01:52:44,080
capability so this is just a proposal

2652
01:52:44,080 --> 01:52:45,199
for

2653
01:52:45,199 --> 01:52:48,239
discussion in ippm so

2654
01:52:48,239 --> 01:52:50,239
we are looking for more feedback from

2655
01:52:50,239 --> 01:52:53,280
the group and to we already have some

2656
01:52:53,280 --> 01:52:56,320
discussion with greg on the list and we

2657
01:52:56,320 --> 01:52:57,520
hope to

2658
01:52:57,520 --> 01:53:00,000
have more feedback okay thank you

2659
01:53:00,000 --> 01:53:02,000
all right thank you

2660
01:53:02,000 --> 01:53:03,040
anyone

2661
01:53:03,040 --> 01:53:05,280
any quick comments while we're switching

2662
01:53:05,280 --> 01:53:06,719
slides

2663
01:53:06,719 --> 01:53:07,840
we have

2664
01:53:07,840 --> 01:53:10,719
tall up next

2665
01:53:11,440 --> 01:53:13,599
justin we'll give you an update on the

2666
01:53:13,599 --> 01:53:16,320
iom linux kernel implementation

2667
01:53:16,320 --> 01:53:18,719
perfect

2668
01:53:19,199 --> 01:53:21,440
thanks al so a quick update on the

2669
01:53:21,440 --> 01:53:24,320
implementation on the linux kernel so

2670
01:53:24,320 --> 01:53:26,719
last release of the kernel which is the

2671
01:53:26,719 --> 01:53:30,159
5.15 a few days ago has been released

2672
01:53:30,159 --> 01:53:33,199
and uh it comes with the uh support for

2673
01:53:33,199 --> 01:53:35,679
the iom prayer located trace

2674
01:53:35,679 --> 01:53:39,119
uh next version which is the 5.16 and it

2675
01:53:39,119 --> 01:53:41,199
is expected for end of december this

2676
01:53:41,199 --> 01:53:44,560
year will provide uh tunneling uh

2677
01:53:44,560 --> 01:53:46,800
support for in transit traffic so that

2678
01:53:46,800 --> 01:53:49,679
we are compliant with the rfc 8200

2679
01:53:49,679 --> 01:53:51,440
and actually everything is configurable

2680
01:53:51,440 --> 01:53:54,560
with the ip root 2 tool which most of

2681
01:53:54,560 --> 01:53:57,040
you probably know with

2682
01:53:57,040 --> 01:53:59,679
the ip command in the linux environment

2683
01:53:59,679 --> 01:54:01,760
and so there is a repo so feel free to

2684
01:54:01,760 --> 01:54:03,199
have a look at it

2685
01:54:03,199 --> 01:54:05,599
we provide some documentation an example

2686
01:54:05,599 --> 01:54:08,639
on how you can deploy and configure your

2687
01:54:08,639 --> 01:54:10,320
iom domain

2688
01:54:10,320 --> 01:54:13,360
so that the floor is yours

2689
01:54:13,360 --> 01:54:15,760
right so we have a new draft that

2690
01:54:15,760 --> 01:54:18,800
describes an iom profile

2691
01:54:18,800 --> 01:54:20,480
which is used by the linux kernel

2692
01:54:20,480 --> 01:54:22,000
implementation

2693
01:54:22,000 --> 01:54:24,560
and this means that by reading this

2694
01:54:24,560 --> 01:54:26,480
draft you can create an implementation

2695
01:54:26,480 --> 01:54:28,880
which can interoperate with the linux

2696
01:54:28,880 --> 01:54:30,800
kernel implementation

2697
01:54:30,800 --> 01:54:32,800
and we'd really be happy to get any

2698
01:54:32,800 --> 01:54:37,520
feedback and comments about that

2699
01:54:37,520 --> 01:54:39,040
so thanks

2700
01:54:39,040 --> 01:54:41,040
thank you is this the type of thing that

2701
01:54:41,040 --> 01:54:43,199
i mean

2702
01:54:43,199 --> 01:54:44,880
it seems a little out of

2703
01:54:44,880 --> 01:54:46,639
of what we normally do in ippm it seems

2704
01:54:46,639 --> 01:54:49,119
more like an ops

2705
01:54:49,119 --> 01:54:50,000
type thing if you're talking about a

2706
01:54:50,000 --> 01:54:51,920
linux specific profile but be curious to

2707
01:54:51,920 --> 01:54:52,880
hear that

2708
01:54:52,880 --> 01:54:55,679
it's closely related to iom so that's

2709
01:54:55,679 --> 01:54:57,040
why we thought this would be the right

2710
01:54:57,040 --> 01:54:59,199
place for it but if you think there's a

2711
01:54:59,199 --> 01:55:01,520
better working group for this we'll be

2712
01:55:01,520 --> 01:55:04,320
happy to hear about that sure okay be

2713
01:55:04,320 --> 01:55:06,080
interesting to discuss

2714
01:55:06,080 --> 01:55:08,000
all right um

2715
01:55:08,000 --> 01:55:09,760
next we've got some in-band flow

2716
01:55:09,760 --> 01:55:12,159
learning

2717
01:55:16,880 --> 01:55:19,840
all right

2718
01:55:22,960 --> 01:55:25,599
um i'm not hearing any audio

2719
01:55:25,599 --> 01:55:27,920
fan

2720
01:55:27,920 --> 01:55:28,960
any other

2721
01:55:28,960 --> 01:55:31,440
authors want to

2722
01:55:31,440 --> 01:55:34,799
speak up or present this

2723
01:55:40,000 --> 01:55:41,920
all right yeah seems like we're having

2724
01:55:41,920 --> 01:55:46,480
some technical issues so let's move on

2725
01:55:46,480 --> 01:55:47,840
the next one we have a simple direct

2726
01:55:47,840 --> 01:55:49,679
loss

2727
01:55:49,679 --> 01:55:52,159
now slide the six uh tell me if you have

2728
01:55:52,159 --> 01:55:54,320
it

2729
01:55:54,320 --> 01:55:55,599
yep

2730
01:55:55,599 --> 01:55:57,599
and if you go to slide six uh there it

2731
01:55:57,599 --> 01:55:58,560
is

2732
01:55:58,560 --> 01:55:59,760
yeah thank you

2733
01:55:59,760 --> 01:56:01,679
so um uh

2734
01:56:01,679 --> 01:56:04,320
this is a very uh simple um

2735
01:56:04,320 --> 01:56:07,360
straightforward draft that defines um

2736
01:56:07,360 --> 01:56:09,520
a packet format a message from it for

2737
01:56:09,520 --> 01:56:11,599
the session sender and a reflector to

2738
01:56:11,599 --> 01:56:13,920
measure the direct loss it's inline

2739
01:56:13,920 --> 01:56:15,920
counter stamping just like inline time

2740
01:56:15,920 --> 01:56:17,040
stamping

2741
01:56:17,040 --> 01:56:19,440
and it's asic friendly because the

2742
01:56:19,440 --> 01:56:22,000
counters are at the fixed location uh

2743
01:56:22,000 --> 01:56:25,280
supports the alternate marking method

2744
01:56:25,280 --> 01:56:26,639
as well as

2745
01:56:26,639 --> 01:56:29,520
32 bit and 64-bit packet and byte

2746
01:56:29,520 --> 01:56:31,119
counters as well as if you're doing

2747
01:56:31,119 --> 01:56:32,560
measurement for

2748
01:56:32,560 --> 01:56:35,360
dhcp scope counters as well

2749
01:56:35,360 --> 01:56:37,520
uh so messages are also defined for the

2750
01:56:37,520 --> 01:56:39,760
authentication mode as well

2751
01:56:39,760 --> 01:56:42,400
uh so it's fairly straightforward draft

2752
01:56:42,400 --> 01:56:44,239
and welcome your

2753
01:56:44,239 --> 01:56:46,080
comments and

2754
01:56:46,080 --> 01:56:47,679
suggestions on this

2755
01:56:47,679 --> 01:56:49,599
thank you

2756
01:56:49,599 --> 01:56:52,159
all right thank you

2757
01:56:52,480 --> 01:56:53,840
all right

2758
01:56:53,840 --> 01:56:58,239
next we have self-contained automark

2759
01:57:02,239 --> 01:57:04,000
hello everyone i am

2760
01:57:04,000 --> 01:57:06,560
i'm zombonzo from mobile

2761
01:57:06,560 --> 01:57:09,760
and this is a draft about self-content

2762
01:57:09,760 --> 01:57:12,800
automated marking mechanism

2763
01:57:12,800 --> 01:57:14,880
and then in the left

2764
01:57:14,880 --> 01:57:18,159
is the traditional alternate

2765
01:57:18,159 --> 01:57:19,560
marking method

2766
01:57:19,560 --> 01:57:23,040
the right is a self-contained alternate

2767
01:57:23,040 --> 01:57:25,280
marking method

2768
01:57:25,280 --> 01:57:27,599
we will introduce each

2769
01:57:27,599 --> 01:57:29,119
very quickly

2770
01:57:29,119 --> 01:57:30,320
in the live

2771
01:57:30,320 --> 01:57:33,520
the container or the ms will connect the

2772
01:57:33,520 --> 01:57:35,520
information from the coloring point and

2773
01:57:35,520 --> 01:57:37,360
the monitoring point

2774
01:57:37,360 --> 01:57:41,199
the non-problem parts may maybe several

2775
01:57:41,199 --> 01:57:42,639
many

2776
01:57:42,639 --> 01:57:44,800
and they need to

2777
01:57:44,800 --> 01:57:46,880
corrected the information by using the

2778
01:57:46,880 --> 01:57:50,239
block id and in the right

2779
01:57:50,239 --> 01:57:51,840
if we

2780
01:57:51,840 --> 01:57:54,639
insert the block id information

2781
01:57:54,639 --> 01:57:57,360
into the coloring point also with the

2782
01:57:57,360 --> 01:57:58,800
color information

2783
01:57:58,800 --> 01:58:01,840
by occupying another specific bit

2784
01:58:01,840 --> 01:58:04,639
we can replace the monitor

2785
01:58:04,639 --> 01:58:06,719
report at the monitoring point uh

2786
01:58:06,719 --> 01:58:09,840
directly uh target environment value

2787
01:58:09,840 --> 01:58:11,040
if needed

2788
01:58:11,040 --> 01:58:14,000
so we think it's very simple for the

2789
01:58:14,000 --> 01:58:16,560
client to join in the environment

2790
01:58:16,560 --> 01:58:17,760
environment

2791
01:58:17,760 --> 01:58:19,679
thank you everyone

2792
01:58:19,679 --> 01:58:21,280
that's how

2793
01:58:21,280 --> 01:58:22,639
all right

2794
01:58:22,639 --> 01:58:24,400
thank you

2795
01:58:24,400 --> 01:58:26,639
except we have some postcard based

2796
01:58:26,639 --> 01:58:29,280
telemetry

2797
01:58:29,360 --> 01:58:32,239
um this draft has been extensively

2798
01:58:32,239 --> 01:58:35,599
discussed the email list and a major

2799
01:58:35,599 --> 01:58:38,560
question raised by the chairs and ads

2800
01:58:38,560 --> 01:58:40,159
that is that's really worth to

2801
01:58:40,159 --> 01:58:42,719
standardize this approach or isn't it

2802
01:58:42,719 --> 01:58:45,520
already covered by some existing draft

2803
01:58:45,520 --> 01:58:48,880
i think it's worse to clarify this point

2804
01:58:48,880 --> 01:58:51,199
in the family of the on pass flow

2805
01:58:51,199 --> 01:58:52,880
telemetry techniques

2806
01:58:52,880 --> 01:58:55,040
there are two types passport mode and

2807
01:58:55,040 --> 01:58:56,239
the passco

2808
01:58:56,239 --> 01:58:59,440
postcard mode so the uh for the passport

2809
01:58:59,440 --> 01:59:01,599
mode the ios trace is already on the

2810
01:59:01,599 --> 01:59:02,960
standard track

2811
01:59:02,960 --> 01:59:05,840
and in the branch of postcard mode for

2812
01:59:05,840 --> 01:59:09,440
the instruction based telemetry is also

2813
01:59:09,440 --> 01:59:12,719
the iom dx is also

2814
01:59:12,719 --> 01:59:14,639
on the standard track

2815
01:59:14,639 --> 01:59:18,000
and the pvtm covered in this drive is a

2816
01:59:18,000 --> 01:59:20,480
standalone method as shown in the left

2817
01:59:20,480 --> 01:59:23,760
side figure and so but it's also have

2818
01:59:23,760 --> 01:59:26,400
some unique issues need to be

2819
01:59:26,400 --> 01:59:29,440
solved um indeed it's actually actually

2820
01:59:29,440 --> 01:59:30,560
this approach

2821
01:59:30,560 --> 01:59:33,599
has already been used by the srv6 oam

2822
01:59:33,599 --> 01:59:36,400
dropped but many uh open issues are

2823
01:59:36,400 --> 01:59:38,560
answered as this will be covered by this

2824
01:59:38,560 --> 01:59:42,000
drop so uh we hope that this is a word

2825
01:59:42,000 --> 01:59:42,719
to

2826
01:59:42,719 --> 01:59:45,599
be standardized in this working group

2827
01:59:45,599 --> 01:59:48,080
thank you very much all right thank you

2828
01:59:48,080 --> 01:59:50,000
i think the main question it's good to

2829
01:59:50,000 --> 01:59:51,440
have this formulation the main question

2830
01:59:51,440 --> 01:59:53,040
i would have is you know if the other

2831
01:59:53,040 --> 01:59:55,280
ones are you know defined as iom

2832
01:59:55,280 --> 01:59:56,639
[Music]

2833
01:59:56,639 --> 01:59:58,960
methods can

2834
01:59:58,960 --> 02:00:00,960
can we define this as a specific iom

2835
02:00:00,960 --> 02:00:03,199
protocol as well but we can carry that

2836
02:00:03,199 --> 02:00:05,040
on our list

2837
02:00:05,040 --> 02:00:06,960
thank you yes it can be yeah stay in the

2838
02:00:06,960 --> 02:00:08,960
same family here

2839
02:00:08,960 --> 02:00:10,719
all right and we're just going to keep

2840
02:00:10,719 --> 02:00:12,159
going i know it's at time if anyone

2841
02:00:12,159 --> 02:00:14,159
needs to leave they can but let's

2842
02:00:14,159 --> 02:00:17,040
get through these last little

2843
02:00:17,040 --> 02:00:19,840
talks delaney please go ahead

2844
02:00:19,840 --> 02:00:21,360
yes can you hear me

2845
02:00:21,360 --> 02:00:22,719
yes i can

2846
02:00:22,719 --> 02:00:24,560
okay perfect yep so we're going to have

2847
02:00:24,560 --> 02:00:27,040
a side meeting right after this and

2848
02:00:27,040 --> 02:00:28,880
we'll tell you the implementation i'll

2849
02:00:28,880 --> 02:00:31,679
just cut it really short is everything

2850
02:00:31,679 --> 02:00:33,760
just about everything that i've heard on

2851
02:00:33,760 --> 02:00:37,119
this ippm meeting could use

2852
02:00:37,119 --> 02:00:38,639
encryption

2853
02:00:38,639 --> 02:00:41,040
it's all really sensitive data

2854
02:00:41,040 --> 02:00:44,400
and so we want to um you know we'd love

2855
02:00:44,400 --> 02:00:47,440
to um work with anybody uh to do that

2856
02:00:47,440 --> 02:00:49,760
too and i'll be contacting you um

2857
02:00:49,760 --> 02:00:52,480
offline and because we're we're getting

2858
02:00:52,480 --> 02:00:54,560
we're getting an implementation

2859
02:00:54,560 --> 02:00:57,199
so that's it

2860
02:00:57,280 --> 02:00:59,520
great okay so anyone interested go to

2861
02:00:59,520 --> 02:01:01,520
the side meeting

2862
02:01:01,520 --> 02:01:03,920
thank you

2863
02:01:05,040 --> 02:01:06,080
all right

2864
02:01:06,080 --> 02:01:08,719
we have some user devices

2865
02:01:08,719 --> 02:01:11,840
explicit monitoring

2866
02:01:15,280 --> 02:01:16,639
all right

2867
02:01:16,639 --> 02:01:20,239
laura are you speaking to this

2868
02:01:20,960 --> 02:01:22,400
okay

2869
02:01:22,400 --> 02:01:25,280
this is the the draft that is a

2870
02:01:25,280 --> 02:01:28,159
sibling of the previous one the idea is

2871
02:01:28,159 --> 02:01:32,000
to put the probe on the user devices a

2872
02:01:32,000 --> 02:01:35,199
smartphone for example or pc in order to

2873
02:01:35,199 --> 02:01:36,400
have a

2874
02:01:36,400 --> 02:01:38,960
point that is

2875
02:01:38,960 --> 02:01:40,239
uh

2876
02:01:40,239 --> 02:01:42,480
where it is possible to make all the

2877
02:01:42,480 --> 02:01:45,119
measurements without

2878
02:01:45,119 --> 02:01:46,480
dedicated

2879
02:01:46,480 --> 02:01:48,400
hardware and the software inside the

2880
02:01:48,400 --> 02:01:49,440
network

2881
02:01:49,440 --> 02:01:54,239
or it can be also an additional point to

2882
02:01:54,239 --> 02:01:57,679
interface to the props in the network we

2883
02:01:57,679 --> 02:02:00,080
can have some advantages for example the

2884
02:02:00,080 --> 02:02:01,840
scalability

2885
02:02:01,840 --> 02:02:05,280
the hardware of the user is not

2886
02:02:05,280 --> 02:02:08,080
is very much so it's possible to have

2887
02:02:08,080 --> 02:02:10,320
many measurements the

2888
02:02:10,320 --> 02:02:12,719
measurements are more precise because

2889
02:02:12,719 --> 02:02:15,840
we have the point of measurement that is

2890
02:02:15,840 --> 02:02:18,719
on both the directions and it's possible

2891
02:02:18,719 --> 02:02:21,840
also the network monitoring

2892
02:02:21,840 --> 02:02:24,639
coordinated with with probes in the

2893
02:02:24,639 --> 02:02:25,840
network

2894
02:02:25,840 --> 02:02:28,560
so this is a about the positioning of

2895
02:02:28,560 --> 02:02:31,440
the probes of the species measurement

2896
02:02:31,440 --> 02:02:34,480
thank you we can discuss on the mainly

2897
02:02:34,480 --> 02:02:36,880
list of this idea

2898
02:02:36,880 --> 02:02:38,800
great thank you

2899
02:02:38,800 --> 02:02:42,000
okay and then we have our final

2900
02:02:42,000 --> 02:02:45,119
elevator pitch alexander

2901
02:02:45,119 --> 02:02:47,679
um yes hello yeah this is a brief

2902
02:02:47,679 --> 02:02:49,679
elevator pitch for a new draft

2903
02:02:49,679 --> 02:02:51,119
concerning high precision service

2904
02:02:51,119 --> 02:02:53,599
metrics uh the idea is basically to

2905
02:02:53,599 --> 02:02:56,639
define a new set of metrics that capture

2906
02:02:56,639 --> 02:02:58,239
whether or not the service that is being

2907
02:02:58,239 --> 02:02:59,920
delivered complies with the service

2908
02:02:59,920 --> 02:03:02,480
level objective uh for instance for when

2909
02:03:02,480 --> 02:03:04,719
you have uh precision services that

2910
02:03:04,719 --> 02:03:07,280
require a specific end-to-end latency uh

2911
02:03:07,280 --> 02:03:08,639
you would want to basically capture

2912
02:03:08,639 --> 02:03:10,560
whether or not uh yeah basically your

2913
02:03:10,560 --> 02:03:13,599
your uh your your flow your flows are in

2914
02:03:13,599 --> 02:03:15,520
compliance and so forth and multiple

2915
02:03:15,520 --> 02:03:17,199
applications for this in accounting

2916
02:03:17,199 --> 02:03:19,280
monitoring et cetera

2917
02:03:19,280 --> 02:03:21,199
some examples of the types of metrics

2918
02:03:21,199 --> 02:03:22,880
that we have in mind are fines you would

2919
02:03:22,880 --> 02:03:25,920
want to capture a number of packets that

2920
02:03:25,920 --> 02:03:27,840
were violating an objective the number

2921
02:03:27,840 --> 02:03:29,440
of time units

2922
02:03:29,440 --> 02:03:32,880
that were violated during um

2923
02:03:32,880 --> 02:03:34,639
during the duration of a service and

2924
02:03:34,639 --> 02:03:36,880
this basically gives you also second

2925
02:03:36,880 --> 02:03:39,360
order measures of precision availability

2926
02:03:39,360 --> 02:03:42,480
so not availability but available the

2927
02:03:42,480 --> 02:03:43,280
uh

2928
02:03:43,280 --> 02:03:44,480
during which a

2929
02:03:44,480 --> 02:03:47,760
uh service can be accessed with the uh

2930
02:03:47,760 --> 02:03:50,159
with agreed on uh pr uh

2931
02:03:50,159 --> 02:03:51,760
precision so

2932
02:03:51,760 --> 02:03:54,400
anyway so the the the just the elevator

2933
02:03:54,400 --> 02:03:56,320
page and the next steps are of course to

2934
02:03:56,320 --> 02:03:58,800
refine the steps and so forth and also

2935
02:03:58,800 --> 02:04:01,040
we would want to

2936
02:04:01,040 --> 02:04:03,119
ask anybody who's interested in this

2937
02:04:03,119 --> 02:04:06,000
work to to please reach out thank you

2938
02:04:06,000 --> 02:04:07,840
okay uh greg did you have a quick

2939
02:04:07,840 --> 02:04:10,639
question on this or comment

2940
02:04:10,639 --> 02:04:13,280
i'm just curious how that is different

2941
02:04:13,280 --> 02:04:16,560
from error performance measurement

2942
02:04:16,560 --> 02:04:18,400
so we can discuss it probably in the

2943
02:04:18,400 --> 02:04:21,599
middle because that seems to be

2944
02:04:21,599 --> 02:04:25,079
the same idea

2945
02:04:25,920 --> 02:04:28,960
okay so so um so i did not

2946
02:04:28,960 --> 02:04:30,880
let let's let's put this on the boiling

2947
02:04:30,880 --> 02:04:31,840
list

2948
02:04:31,840 --> 02:04:33,599
yeah uh i think it was referring to the

2949
02:04:33,599 --> 02:04:35,280
earlier presentation

2950
02:04:35,280 --> 02:04:37,920
alexander that greg made on the epm

2951
02:04:37,920 --> 02:04:40,000
proposal so

2952
02:04:40,000 --> 02:04:41,280
it sounds like you know read each

2953
02:04:41,280 --> 02:04:44,159
other's drafts and let's uh discuss on

2954
02:04:44,159 --> 02:04:46,239
the list how we can kind of combine

2955
02:04:46,239 --> 02:04:47,760
efforts here

2956
02:04:47,760 --> 02:04:49,920
all right sounds good thank you all

2957
02:04:49,920 --> 02:04:51,599
right

2958
02:04:51,599 --> 02:04:52,639
okay

2959
02:04:52,639 --> 02:04:53,520
um

2960
02:04:53,520 --> 02:04:55,119
thank you all it's

2961
02:04:55,119 --> 02:04:57,520
as as usual a

2962
02:04:57,520 --> 02:04:58,560
full

2963
02:04:58,560 --> 02:05:00,239
uh session but i think we made some good

2964
02:05:00,239 --> 02:05:03,598
progress today um

2965
02:05:03,679 --> 02:05:06,000
thank you to

2966
02:05:06,000 --> 02:05:07,760
co-chairs thanks marcus for running the

2967
02:05:07,760 --> 02:05:08,719
time

2968
02:05:08,719 --> 02:05:09,760
um

2969
02:05:09,760 --> 02:05:11,840
thanks ian for all your service

2970
02:05:11,840 --> 02:05:14,400
we shall miss you um

2971
02:05:14,400 --> 02:05:16,239
and thanks to everyone who came and have

2972
02:05:16,239 --> 02:05:18,560
a good rest of your ietf if you're going

2973
02:05:18,560 --> 02:05:21,199
to stuff tomorrow and we will see you

2974
02:05:21,199 --> 02:05:23,759
next time

2975
02:05:24,960 --> 02:05:27,960
bye

2976
02:05:35,040 --> 02:05:37,119
you

