1
00:00:12,240 --> 00:00:13,200
okay

2
00:00:13,200 --> 00:00:17,080
i think we're top of the hour

3
00:00:18,080 --> 00:00:20,480
good morning good afternoon good evening

4
00:00:20,480 --> 00:00:23,359
wherever you are welcome everyone um

5
00:00:23,359 --> 00:00:24,560
this is the

6
00:00:24,560 --> 00:00:26,720
computing in the network research group

7
00:00:26,720 --> 00:00:28,240
meeting

8
00:00:28,240 --> 00:00:32,000
with jeffrey he uh eve schooler and and

9
00:00:32,000 --> 00:00:34,719
me uh jose mourpitzi uh we are the

10
00:00:34,719 --> 00:00:38,559
chairs of this uh i think exciting uh

11
00:00:38,559 --> 00:00:40,079
research field

12
00:00:40,079 --> 00:00:42,640
that uh i think is is um

13
00:00:42,640 --> 00:00:45,840
more and more important um in the

14
00:00:45,840 --> 00:00:48,079
development of the internet

15
00:00:48,079 --> 00:00:50,879
uh you move the slides eve so can you

16
00:00:50,879 --> 00:00:52,239
hear me by the way

17
00:00:52,239 --> 00:00:55,760
i think everybody is uh aware of this

18
00:00:55,760 --> 00:00:57,039
uh i think

19
00:00:57,039 --> 00:01:00,079
it for this group yes it's important but

20
00:01:00,079 --> 00:01:01,359
also

21
00:01:01,359 --> 00:01:03,440
uh you know that we're recording this

22
00:01:03,440 --> 00:01:04,799
because we are

23
00:01:04,799 --> 00:01:06,400
um

24
00:01:06,400 --> 00:01:08,479
still virtual and i guess even when

25
00:01:08,479 --> 00:01:11,040
we'll go not virtual we'll do it

26
00:01:11,040 --> 00:01:13,600
i think what's also very important is

27
00:01:13,600 --> 00:01:16,799
all the uh disclosures of intellectual

28
00:01:16,799 --> 00:01:19,439
property which is on on the next slide

29
00:01:19,439 --> 00:01:20,880
or something

30
00:01:20,880 --> 00:01:24,400
and uh the code of conduct uh which is

31
00:01:24,400 --> 00:01:26,799
also very important and

32
00:01:26,799 --> 00:01:28,640
i think a few of us have

33
00:01:28,640 --> 00:01:29,680
had

34
00:01:29,680 --> 00:01:31,759
experiences that show us how important

35
00:01:31,759 --> 00:01:32,640
it is

36
00:01:32,640 --> 00:01:34,240
uh eve maybe you want to go to the

37
00:01:34,240 --> 00:01:36,079
agenda very fast

38
00:01:36,079 --> 00:01:40,320
sure can you hear me my audio

39
00:01:40,320 --> 00:01:43,680
and can you hear me am i not on um

40
00:01:43,680 --> 00:01:46,079
on this slide yeah i think we can yes so

41
00:01:46,079 --> 00:01:48,240
this is the oh you can hear me okay

42
00:01:48,240 --> 00:01:50,720
harassment copyrights and everything

43
00:01:50,720 --> 00:01:52,399
uh next one

44
00:01:52,399 --> 00:01:53,600
sure

45
00:01:53,600 --> 00:01:56,399
but maybe they can not hear i think it's

46
00:01:56,399 --> 00:01:58,960
very important okay

47
00:01:58,960 --> 00:02:01,920
we are meeting at the same time as uh

48
00:02:01,920 --> 00:02:06,240
the ietf but the irtf is not there to

49
00:02:06,240 --> 00:02:08,560
do standardizations it's there to

50
00:02:08,560 --> 00:02:11,120
conduct research and you will see from

51
00:02:11,120 --> 00:02:13,920
the agenda

52
00:02:14,319 --> 00:02:17,319
um

53
00:02:29,520 --> 00:02:34,319
um you will see from the agenda that the

54
00:02:34,840 --> 00:02:38,400
um there are important uh

55
00:02:38,400 --> 00:02:39,440
um

56
00:02:39,440 --> 00:02:40,879
research papers that are going to be

57
00:02:40,879 --> 00:02:42,800
presented today and i know there was an

58
00:02:42,800 --> 00:02:44,720
audio issue and i think i fixed it so

59
00:02:44,720 --> 00:02:46,640
thank you for the people who

60
00:02:46,640 --> 00:02:48,560
uh mentioned it

61
00:02:48,560 --> 00:02:50,160
um

62
00:02:50,160 --> 00:02:53,120
uh next slide eve

63
00:02:53,920 --> 00:02:56,000
so uh we have a very

64
00:02:56,000 --> 00:02:57,920
uh packed agenda

65
00:02:57,920 --> 00:03:01,040
uh so you know i'm already

66
00:03:01,040 --> 00:03:02,720
two or three minutes into this so we're

67
00:03:02,720 --> 00:03:05,040
going to go very fast i think we're very

68
00:03:05,040 --> 00:03:07,360
very happy to have scott chanker to

69
00:03:07,360 --> 00:03:09,280
present

70
00:03:09,280 --> 00:03:13,120
the extensible internet which was a ccr

71
00:03:13,120 --> 00:03:14,239
paper

72
00:03:14,239 --> 00:03:15,599
and

73
00:03:15,599 --> 00:03:17,680
essentially raises a lot of interesting

74
00:03:17,680 --> 00:03:18,959
questions about the future of the

75
00:03:18,959 --> 00:03:20,720
internet and also

76
00:03:20,720 --> 00:03:23,680
is is connected to some of the uh

77
00:03:23,680 --> 00:03:25,120
questions that we've had in this group

78
00:03:25,120 --> 00:03:27,200
so we're very lucky with this

79
00:03:27,200 --> 00:03:29,280
then we have the very interesting in

80
00:03:29,280 --> 00:03:31,680
network aggregation paper

81
00:03:31,680 --> 00:03:33,200
then also

82
00:03:33,200 --> 00:03:34,560
the

83
00:03:34,560 --> 00:03:37,040
information-centric data flow for

84
00:03:37,040 --> 00:03:39,519
distributed computing from dirk

85
00:03:39,519 --> 00:03:42,400
and um we we had well it's actually

86
00:03:42,400 --> 00:03:45,040
ideas but actually there's only one

87
00:03:45,040 --> 00:03:47,920
alessandro because it's a holiday uh is

88
00:03:47,920 --> 00:03:49,120
not going to present i'm going to

89
00:03:49,120 --> 00:03:50,319
present this

90
00:03:50,319 --> 00:03:51,840
it's about an operating system for

91
00:03:51,840 --> 00:03:54,560
distributed applications and in

92
00:03:54,560 --> 00:03:56,640
coin we are very big on thinking that

93
00:03:56,640 --> 00:03:58,640
the internet is moving to be more like a

94
00:03:58,640 --> 00:04:00,799
computer board and if we have a computer

95
00:04:00,799 --> 00:04:03,280
board you need an operating system

96
00:04:03,280 --> 00:04:06,080
uh next slide

97
00:04:06,560 --> 00:04:08,720
then we have the drafts update uh

98
00:04:08,720 --> 00:04:10,959
obviously a research group is not too

99
00:04:10,959 --> 00:04:14,239
about doing only drafts but we do have

100
00:04:14,239 --> 00:04:16,798
very interesting work this is happening

101
00:04:16,798 --> 00:04:18,880
in the drafts with this research group

102
00:04:18,880 --> 00:04:21,680
and we would like to give them a chance

103
00:04:21,680 --> 00:04:22,479
to

104
00:04:22,479 --> 00:04:26,080
talk about the ideas so use cases again

105
00:04:26,080 --> 00:04:28,080
uh to show that there you know there's a

106
00:04:28,080 --> 00:04:30,080
way to use these things transport

107
00:04:30,080 --> 00:04:32,160
protocols because the this has

108
00:04:32,160 --> 00:04:35,040
been an issue once you start putting uh

109
00:04:35,040 --> 00:04:37,199
computing in the system

110
00:04:37,199 --> 00:04:39,680
and then uh the security and privacy and

111
00:04:39,680 --> 00:04:43,120
again a big issue we have a new uh draft

112
00:04:43,120 --> 00:04:45,919
that was submitted by china mobile

113
00:04:45,919 --> 00:04:48,080
and then we'll have

114
00:04:48,080 --> 00:04:50,000
uh we would love to have 10 minutes left

115
00:04:50,000 --> 00:04:51,440
to talk about

116
00:04:51,440 --> 00:04:53,919
future groups and future meetings and we

117
00:04:53,919 --> 00:04:55,680
would like this a little bit to evolve

118
00:04:55,680 --> 00:04:56,479
into

119
00:04:56,479 --> 00:04:58,960
but i think uh the main goal is to have

120
00:04:58,960 --> 00:05:01,199
the papers presented so we're going to

121
00:05:01,199 --> 00:05:02,160
do this

122
00:05:02,160 --> 00:05:03,680
the meat deco

123
00:05:03,680 --> 00:05:05,600
uh please uh

124
00:05:05,600 --> 00:05:08,960
you found us you're here this is good

125
00:05:08,960 --> 00:05:10,639
yeah you found you know if you're there

126
00:05:10,639 --> 00:05:13,120
you found the meat deco which is good

127
00:05:13,120 --> 00:05:16,320
um the live minutes uh it's integrated

128
00:05:16,320 --> 00:05:19,039
to meet techo codim uh the mailing list

129
00:05:19,039 --> 00:05:21,199
uh well if you're here you probably know

130
00:05:21,199 --> 00:05:22,720
about our mailing list

131
00:05:22,720 --> 00:05:25,280
uh if you know if you don't well please

132
00:05:25,280 --> 00:05:27,280
do that and you know we have a ton of

133
00:05:27,280 --> 00:05:28,960
documents

134
00:05:28,960 --> 00:05:31,600
um turk your document expired that needs

135
00:05:31,600 --> 00:05:33,759
an update because it's an rg document we

136
00:05:33,759 --> 00:05:36,639
have two rg documents we have again a

137
00:05:36,639 --> 00:05:37,680
new

138
00:05:37,680 --> 00:05:39,600
new drafts i think this needs an update

139
00:05:39,600 --> 00:05:41,520
because we have the new draft from china

140
00:05:41,520 --> 00:05:42,880
mobile also

141
00:05:42,880 --> 00:05:46,479
and and we have a ton of other

142
00:05:46,479 --> 00:05:48,160
um

143
00:05:48,160 --> 00:05:50,080
drafts that you know are a different

144
00:05:50,080 --> 00:05:53,680
level of uh maturity and essentially

145
00:05:53,680 --> 00:05:55,199
this is something that

146
00:05:55,199 --> 00:05:57,039
we will raise on the list

147
00:05:57,039 --> 00:05:59,440
the idea that we need to do something

148
00:05:59,440 --> 00:06:00,639
about it

149
00:06:00,639 --> 00:06:03,360
the milestones um

150
00:06:03,360 --> 00:06:05,680
we've done a lot of it and and we need

151
00:06:05,680 --> 00:06:06,800
uh

152
00:06:06,800 --> 00:06:08,639
i'll go very fast because i know one

153
00:06:08,639 --> 00:06:09,759
minute over

154
00:06:09,759 --> 00:06:12,720
um we'll go very fast to uh the last

155
00:06:12,720 --> 00:06:14,080
thing which is we need a milestone

156
00:06:14,080 --> 00:06:16,240
review and we'll do it and now we have

157
00:06:16,240 --> 00:06:17,840
the presentations

158
00:06:17,840 --> 00:06:20,240
and the first one is scotch anchor from

159
00:06:20,240 --> 00:06:23,520
berkeley and uh the extensible internet

160
00:06:23,520 --> 00:06:26,319
so uh scott thank you very much for

161
00:06:26,319 --> 00:06:28,800
doing this because it's so early in

162
00:06:28,800 --> 00:06:30,960
california

163
00:06:30,960 --> 00:06:33,120
oh well thank you very much let me share

164
00:06:33,120 --> 00:06:35,840
my screen

165
00:06:44,160 --> 00:06:46,800
i don't see oh here no it's coming i

166
00:06:46,800 --> 00:06:49,039
just clicked on share screen

167
00:06:49,039 --> 00:06:52,000
oh okay good

168
00:06:54,240 --> 00:06:56,960
do you see it again

169
00:06:56,960 --> 00:07:01,719
yes here let me give you permission

170
00:07:04,479 --> 00:07:07,199
is it coming up

171
00:07:09,680 --> 00:07:12,160
okay this

172
00:07:12,160 --> 00:07:14,080
could people see this

173
00:07:14,080 --> 00:07:15,680
yes

174
00:07:15,680 --> 00:07:17,280
okay well thank you very much for

175
00:07:17,280 --> 00:07:19,120
inviting me i'm typically up at this

176
00:07:19,120 --> 00:07:21,039
time so this is not a problem

177
00:07:21,039 --> 00:07:24,720
uh this is uh based on

178
00:07:24,720 --> 00:07:25,759
uh

179
00:07:25,759 --> 00:07:27,280
i'll be talking about the extensible

180
00:07:27,280 --> 00:07:29,520
internet and this is based on a

181
00:07:29,520 --> 00:07:31,680
ccr editorial with 18 authors there's a

182
00:07:31,680 --> 00:07:33,360
much smaller group

183
00:07:33,360 --> 00:07:35,120
that is trying to actually bring this

184
00:07:35,120 --> 00:07:37,599
into reality

185
00:07:37,599 --> 00:07:38,639
and

186
00:07:38,639 --> 00:07:41,919
i gave a talk on this at another

187
00:07:41,919 --> 00:07:43,759
research group and so i apologize for

188
00:07:43,759 --> 00:07:45,599
people who saw that talk adrian and

189
00:07:45,599 --> 00:07:46,639
others

190
00:07:46,639 --> 00:07:48,639
but this will be a

191
00:07:48,639 --> 00:07:51,520
large overlap but the goal of this talk

192
00:07:51,520 --> 00:07:54,000
is really to give a very very brief

193
00:07:54,000 --> 00:07:57,280
overview of extensible internet

194
00:07:57,280 --> 00:07:59,680
just enough to initiate a discussion

195
00:07:59,680 --> 00:08:01,440
both about the merits of the proposal

196
00:08:01,440 --> 00:08:03,360
but also how it relates to the the

197
00:08:03,360 --> 00:08:05,520
charter of this research group

198
00:08:05,520 --> 00:08:08,400
um and obviously more details would be

199
00:08:08,400 --> 00:08:12,080
available in follow-up conversations

200
00:08:12,080 --> 00:08:13,280
so the

201
00:08:13,280 --> 00:08:15,199
core subject of the talk is really about

202
00:08:15,199 --> 00:08:17,440
architectural change so

203
00:08:17,440 --> 00:08:19,280
when i say the word architecture i'm

204
00:08:19,280 --> 00:08:21,280
really referring to the arrangement of

205
00:08:21,280 --> 00:08:23,520
the data plate functionality

206
00:08:23,520 --> 00:08:26,080
uh that is the layers and the basic

207
00:08:26,080 --> 00:08:28,000
functions they've been assigned it's not

208
00:08:28,000 --> 00:08:30,879
about specific protocols ipv4 to ipv6

209
00:08:30,879 --> 00:08:33,440
it's not an architectural change in in

210
00:08:33,440 --> 00:08:36,159
my lexicon nor is it about the control

211
00:08:36,159 --> 00:08:37,519
plane

212
00:08:37,519 --> 00:08:38,320
um

213
00:08:38,320 --> 00:08:40,479
now there's been decades of

214
00:08:40,479 --> 00:08:42,799
architectural research trying to make

215
00:08:42,799 --> 00:08:45,279
changes to the the basic architecture

216
00:08:45,279 --> 00:08:47,120
but i i think it's pretty clear that you

217
00:08:47,120 --> 00:08:49,760
know over 20 works of 20 years of clean

218
00:08:49,760 --> 00:08:51,839
slate architectural research there's no

219
00:08:51,839 --> 00:08:55,040
discernible architectural impact

220
00:08:55,040 --> 00:08:57,279
and the public internet at least in the

221
00:08:57,279 --> 00:08:59,120
eyes of certainly the researchers i

222
00:08:59,120 --> 00:09:00,080
talked to

223
00:09:00,080 --> 00:09:02,080
seems doomed to architectural stagnation

224
00:09:02,080 --> 00:09:04,320
that we've tried it just we don't see

225
00:09:04,320 --> 00:09:06,640
any movement

226
00:09:06,640 --> 00:09:09,279
but that's not what the hyperscalers

227
00:09:09,279 --> 00:09:10,640
think um

228
00:09:10,640 --> 00:09:12,240
the cloud and content providers are

229
00:09:12,240 --> 00:09:14,480
building their own large private ip

230
00:09:14,480 --> 00:09:16,560
based networks they've got many points

231
00:09:16,560 --> 00:09:17,760
of presence

232
00:09:17,760 --> 00:09:18,560
and

233
00:09:18,560 --> 00:09:20,000
what's relevant to this working group

234
00:09:20,000 --> 00:09:22,720
these points of presence apply

235
00:09:22,720 --> 00:09:25,360
extensive in-network services flow

236
00:09:25,360 --> 00:09:27,519
termination caching load balancing and

237
00:09:27,519 --> 00:09:28,800
so forth

238
00:09:28,800 --> 00:09:30,080
and

239
00:09:30,080 --> 00:09:31,839
these services have had a very

240
00:09:31,839 --> 00:09:34,560
significant impact on customer latency

241
00:09:34,560 --> 00:09:36,880
and reliability so they put a lot of

242
00:09:36,880 --> 00:09:39,120
money into it because they actually see

243
00:09:39,120 --> 00:09:41,760
very tangible benefits in their user

244
00:09:41,760 --> 00:09:43,440
community

245
00:09:43,440 --> 00:09:45,680
now this is great for applications users

246
00:09:45,680 --> 00:09:47,600
get much better service but it's bad for

247
00:09:47,600 --> 00:09:49,839
the internet

248
00:09:49,839 --> 00:09:51,120
because the internet is becoming

249
00:09:51,120 --> 00:09:53,519
increasingly balkanized these private

250
00:09:53,519 --> 00:09:55,440
networks are defining their own

251
00:09:55,440 --> 00:09:57,279
in-network services

252
00:09:57,279 --> 00:09:59,600
the public internet which can't do this

253
00:09:59,600 --> 00:10:03,839
kind of interposition is lagging behind

254
00:10:03,839 --> 00:10:07,279
so that we're in a situation

255
00:10:07,279 --> 00:10:08,399
where

256
00:10:08,399 --> 00:10:10,000
the the benefits of in-network

257
00:10:10,000 --> 00:10:11,680
processing have been shown but the

258
00:10:11,680 --> 00:10:13,760
public internet can't do it because it's

259
00:10:13,760 --> 00:10:15,519
not part of the architecture

260
00:10:15,519 --> 00:10:17,120
so rather than these ad hoc and

261
00:10:17,120 --> 00:10:19,600
proprietary designs what we need is to

262
00:10:19,600 --> 00:10:22,560
figure out a way to build this coherent

263
00:10:22,560 --> 00:10:25,279
this in-network processing into a

264
00:10:25,279 --> 00:10:27,519
coherent architecture

265
00:10:27,519 --> 00:10:28,800
and you might say at this point but

266
00:10:28,800 --> 00:10:30,320
didn't you start off by saying the

267
00:10:30,320 --> 00:10:32,560
internet is impossible to change so you

268
00:10:32,560 --> 00:10:34,160
know what's the deal

269
00:10:34,160 --> 00:10:36,399
and so we don't think it's impossible to

270
00:10:36,399 --> 00:10:37,760
change even though i've failed

271
00:10:37,760 --> 00:10:40,079
personally many times in the past but

272
00:10:40,079 --> 00:10:42,880
this talk is about why we we think

273
00:10:42,880 --> 00:10:45,360
there's a chance

274
00:10:45,360 --> 00:10:47,279
and so the rest of the talk much like a

275
00:10:47,279 --> 00:10:49,680
seder is going to be organized around

276
00:10:49,680 --> 00:10:51,440
four questions

277
00:10:51,440 --> 00:10:53,920
why is the internet so hard to change

278
00:10:53,920 --> 00:10:56,880
how can we overcome this barrier

279
00:10:56,880 --> 00:10:59,200
what would this new internet look like

280
00:10:59,200 --> 00:11:01,200
and given the failures of the past why

281
00:11:01,200 --> 00:11:03,680
do we think now is different

282
00:11:03,680 --> 00:11:05,920
and so for the first question

283
00:11:05,920 --> 00:11:07,760
you know you know far better than i do

284
00:11:07,760 --> 00:11:09,600
about the architecture but let me just

285
00:11:09,600 --> 00:11:11,440
review one of the critical aspects which

286
00:11:11,440 --> 00:11:14,640
is that layer 3 has two roles

287
00:11:14,640 --> 00:11:17,279
on the one hand it was designed to allow

288
00:11:17,279 --> 00:11:19,839
layer two networks to interconnect

289
00:11:19,839 --> 00:11:22,320
and therefore by definition it must be

290
00:11:22,320 --> 00:11:24,480
in every router

291
00:11:24,480 --> 00:11:26,480
that makes it almost impossible to make

292
00:11:26,480 --> 00:11:29,040
change that is it's in too many places

293
00:11:29,040 --> 00:11:31,200
it's got to be implemented with very

294
00:11:31,200 --> 00:11:33,760
good price per performance uh so it's

295
00:11:33,760 --> 00:11:35,440
typically baked into hardware so

296
00:11:35,440 --> 00:11:38,560
changing that is impossible now and in

297
00:11:38,560 --> 00:11:41,120
the future i don't see that changing

298
00:11:41,120 --> 00:11:42,399
on the other hand

299
00:11:42,399 --> 00:11:44,640
it provides the service model to host

300
00:11:44,640 --> 00:11:47,519
that is this best effort packet delivery

301
00:11:47,519 --> 00:11:50,320
is exactly what anything you want to do

302
00:11:50,320 --> 00:11:52,720
on a host that's the service that you

303
00:11:52,720 --> 00:11:55,600
see and you have to build on

304
00:11:55,600 --> 00:11:57,839
so it has to support all application

305
00:11:57,839 --> 00:11:59,200
requirements

306
00:11:59,200 --> 00:12:01,200
and these requirements are becoming more

307
00:12:01,200 --> 00:12:03,120
stringent

308
00:12:03,120 --> 00:12:04,560
which is a reason to change the

309
00:12:04,560 --> 00:12:06,959
architecture and that's exactly why

310
00:12:06,959 --> 00:12:08,160
the

311
00:12:08,160 --> 00:12:10,320
these hyperscalers have built out their

312
00:12:10,320 --> 00:12:12,240
own networks to extend

313
00:12:12,240 --> 00:12:13,760
the the architecture for their own

314
00:12:13,760 --> 00:12:15,440
purposes so they can meet these

315
00:12:15,440 --> 00:12:18,079
requirements

316
00:12:18,079 --> 00:12:20,320
but it's this dual role

317
00:12:20,320 --> 00:12:23,040
that prevents change because you have

318
00:12:23,040 --> 00:12:25,680
demands coming from above you have

319
00:12:25,680 --> 00:12:28,160
constraints coming from below and they

320
00:12:28,160 --> 00:12:30,399
are meeting in the middle in a single

321
00:12:30,399 --> 00:12:31,440
layer

322
00:12:31,440 --> 00:12:32,639
so

323
00:12:32,639 --> 00:12:34,880
the network must meet additional

324
00:12:34,880 --> 00:12:37,200
application requirements but the only

325
00:12:37,200 --> 00:12:38,480
layer that can address those

326
00:12:38,480 --> 00:12:41,200
requirements is also the only layer in

327
00:12:41,200 --> 00:12:42,639
the architecture

328
00:12:42,639 --> 00:12:44,480
that can't be changed

329
00:12:44,480 --> 00:12:46,800
so that's the the nub of the problem

330
00:12:46,800 --> 00:12:49,120
that they coincide in the single layer

331
00:12:49,120 --> 00:12:52,720
both the demands and the constraints

332
00:12:52,720 --> 00:12:54,240
so the second question is well how can

333
00:12:54,240 --> 00:12:56,240
we overcome this barrier

334
00:12:56,240 --> 00:12:58,639
and there this is where the extensible

335
00:12:58,639 --> 00:13:00,399
internet proposal comes in it's really

336
00:13:00,399 --> 00:13:02,560
very simple you use the current ip

337
00:13:02,560 --> 00:13:05,040
protocol unchanged you don't do anything

338
00:13:05,040 --> 00:13:07,040
but you do introduce a new layer above

339
00:13:07,040 --> 00:13:11,519
it we call it service layer or l 3.5

340
00:13:11,519 --> 00:13:13,519
and the service layer offers new

341
00:13:13,519 --> 00:13:15,360
in-network services

342
00:13:15,360 --> 00:13:17,360
to host so this is the relevance to this

343
00:13:17,360 --> 00:13:20,240
working group is this network services

344
00:13:20,240 --> 00:13:22,800
this is flow termination and caching

345
00:13:22,800 --> 00:13:26,160
um and and beyond which i will discuss

346
00:13:26,160 --> 00:13:29,200
later and the point is this is really

347
00:13:29,200 --> 00:13:32,160
the architecturally coherent version of

348
00:13:32,160 --> 00:13:33,440
what's going on in these private

349
00:13:33,440 --> 00:13:35,120
networks this is really trying to

350
00:13:35,120 --> 00:13:37,279
articulate how to think about it in a

351
00:13:37,279 --> 00:13:40,079
coherent way

352
00:13:40,079 --> 00:13:40,959
so

353
00:13:40,959 --> 00:13:42,880
why does this solve the problem because

354
00:13:42,880 --> 00:13:45,600
it decouples layer three's two roles

355
00:13:45,600 --> 00:13:47,600
currently it's the interface to both l2

356
00:13:47,600 --> 00:13:49,920
which gives it the constraints and l4

357
00:13:49,920 --> 00:13:52,160
which gives us the demands

358
00:13:52,160 --> 00:13:55,040
and in the ei l3 is still the interface

359
00:13:55,040 --> 00:13:57,279
to l2 it does a perfectly good job of

360
00:13:57,279 --> 00:14:01,360
that but l 3.5 is the interface

361
00:14:01,360 --> 00:14:03,040
to the hosts

362
00:14:03,040 --> 00:14:05,680
and there's no reason for l 3.5 to be in

363
00:14:05,680 --> 00:14:07,680
every router it can be much more

364
00:14:07,680 --> 00:14:10,000
sparsely deployed so it's more easily

365
00:14:10,000 --> 00:14:12,000
deployed and changed

366
00:14:12,000 --> 00:14:13,519
and at the same time there's no reason

367
00:14:13,519 --> 00:14:15,920
for it to be narrow so it can meet a

368
00:14:15,920 --> 00:14:18,880
wide range of needs so we've separated

369
00:14:18,880 --> 00:14:21,519
the constraints from the demands

370
00:14:21,519 --> 00:14:24,639
and so now l 3.5 can meet those demands

371
00:14:24,639 --> 00:14:27,440
while l3 is meeting the constraints or

372
00:14:27,440 --> 00:14:29,600
obeying the constraints

373
00:14:29,600 --> 00:14:32,639
so what would this design look like

374
00:14:32,639 --> 00:14:35,199
you have a service layer sl

375
00:14:35,199 --> 00:14:36,959
it's implemented in what we call service

376
00:14:36,959 --> 00:14:38,800
nodes these are racks of servers

377
00:14:38,800 --> 00:14:41,440
deployed at the network edge and here by

378
00:14:41,440 --> 00:14:43,519
edge i just mean somewhere close to

379
00:14:43,519 --> 00:14:45,519
clients it's not at a particular place

380
00:14:45,519 --> 00:14:47,040
in the network

381
00:14:47,040 --> 00:14:49,120
every host is associated with at least

382
00:14:49,120 --> 00:14:51,760
one and typically several service nodes

383
00:14:51,760 --> 00:14:53,760
for reliability

384
00:14:53,760 --> 00:14:56,079
and the typical communication pattern is

385
00:14:56,079 --> 00:14:58,560
packets go from the source

386
00:14:58,560 --> 00:15:00,399
to the service node associated with the

387
00:15:00,399 --> 00:15:01,440
source

388
00:15:01,440 --> 00:15:03,279
to the service node associated with the

389
00:15:03,279 --> 00:15:04,639
destination

390
00:15:04,639 --> 00:15:06,800
to the destination

391
00:15:06,800 --> 00:15:08,639
all the service layer communication is

392
00:15:08,639 --> 00:15:10,959
tunneled over ip

393
00:15:10,959 --> 00:15:13,760
and the source specifies which service

394
00:15:13,760 --> 00:15:16,399
to invoke using the tunneling protocol

395
00:15:16,399 --> 00:15:18,480
when the packet gets to the service node

396
00:15:18,480 --> 00:15:20,560
and it's this ability for clients to

397
00:15:20,560 --> 00:15:21,519
signal

398
00:15:21,519 --> 00:15:23,199
to the service node what service they

399
00:15:23,199 --> 00:15:25,920
want that allows this to go beyond what

400
00:15:25,920 --> 00:15:27,600
the hyperscalers are doing which needs

401
00:15:27,600 --> 00:15:30,320
to be backwards compatible to actually

402
00:15:30,320 --> 00:15:31,839
we're able to offer services like

403
00:15:31,839 --> 00:15:34,079
multicast where the host needs to know

404
00:15:34,079 --> 00:15:35,519
that you've changed the semantics of

405
00:15:35,519 --> 00:15:36,880
what they've asked

406
00:15:36,880 --> 00:15:39,040
so this is the basic outline of the

407
00:15:39,040 --> 00:15:42,240
design this diagram is just telling you

408
00:15:42,240 --> 00:15:43,680
that no matter whether you're at home or

409
00:15:43,680 --> 00:15:46,160
office or a cellular network or in a car

410
00:15:46,160 --> 00:15:48,320
or in the cloud there's a service node

411
00:15:48,320 --> 00:15:49,920
nearby that will mediate your

412
00:15:49,920 --> 00:15:52,639
communication

413
00:15:53,360 --> 00:15:56,000
now the key point here

414
00:15:56,000 --> 00:15:58,079
is that all these services

415
00:15:58,079 --> 00:15:59,920
that these in-network services that i

416
00:15:59,920 --> 00:16:02,800
talk about are in software

417
00:16:02,800 --> 00:16:05,199
so standards are not detailed written

418
00:16:05,199 --> 00:16:08,399
specifications they're open source code

419
00:16:08,399 --> 00:16:10,320
and there are three necessary software

420
00:16:10,320 --> 00:16:12,880
components on the service node

421
00:16:12,880 --> 00:16:14,959
one is the service modules that is for

422
00:16:14,959 --> 00:16:16,480
every service whether it's multicast

423
00:16:16,480 --> 00:16:18,720
whether it's ddos protection

424
00:16:18,720 --> 00:16:20,160
there is a service module that's

425
00:16:20,160 --> 00:16:21,839
implemented that's running on a service

426
00:16:21,839 --> 00:16:23,519
node

427
00:16:23,519 --> 00:16:26,240
it runs in a standardized execution

428
00:16:26,240 --> 00:16:27,680
environment if this execution

429
00:16:27,680 --> 00:16:29,199
environment has a very simple set of

430
00:16:29,199 --> 00:16:31,519
primitives pack it in out ephemeral

431
00:16:31,519 --> 00:16:33,600
storage stable storage

432
00:16:33,600 --> 00:16:35,920
maybe one or two others but it's a write

433
00:16:35,920 --> 00:16:38,240
once run anywhere environment if you

434
00:16:38,240 --> 00:16:40,959
write your service module to run inside

435
00:16:40,959 --> 00:16:43,120
this environment it can run on any

436
00:16:43,120 --> 00:16:44,480
service node

437
00:16:44,480 --> 00:16:46,000
and then of course in the service node

438
00:16:46,000 --> 00:16:47,600
you need some kind of runtime or

439
00:16:47,600 --> 00:16:49,600
orchestration to scale up scale down

440
00:16:49,600 --> 00:16:51,920
recover from failures

441
00:16:51,920 --> 00:16:53,839
this doesn't need to be standardized you

442
00:16:53,839 --> 00:16:55,440
know there'll be open source versions

443
00:16:55,440 --> 00:16:57,759
available whether it's kubernetes or

444
00:16:57,759 --> 00:17:01,440
openstack or whatever comes next

445
00:17:01,440 --> 00:17:03,199
and when i talk about in-network

446
00:17:03,199 --> 00:17:05,520
services this is limited computation

447
00:17:05,520 --> 00:17:07,039
this is not where you run your machine

448
00:17:07,039 --> 00:17:09,199
learning jobs this is basic packet

449
00:17:09,199 --> 00:17:11,359
forwarding payload processing

450
00:17:11,359 --> 00:17:13,839
simple functions like caching so it's

451
00:17:13,839 --> 00:17:15,760
more complicated than just simple ip

452
00:17:15,760 --> 00:17:17,679
forwarding but it's not general

453
00:17:17,679 --> 00:17:21,280
computation it's fairly limited

454
00:17:21,280 --> 00:17:22,400
and

455
00:17:22,400 --> 00:17:24,079
these service nodes

456
00:17:24,079 --> 00:17:26,319
don't just have to be generic processors

457
00:17:26,319 --> 00:17:28,480
they can have secure enclaves they can

458
00:17:28,480 --> 00:17:30,480
have hardware accelerators but

459
00:17:30,480 --> 00:17:32,720
everything you do has to run on a

460
00:17:32,720 --> 00:17:34,880
commodity processor but if there happens

461
00:17:34,880 --> 00:17:37,039
to be an accelerator that can be used to

462
00:17:37,039 --> 00:17:39,600
to get better performance

463
00:17:39,600 --> 00:17:41,440
now choosing the services this is where

464
00:17:41,440 --> 00:17:43,039
you have some kind of governance process

465
00:17:43,039 --> 00:17:45,120
whether it's itf or something else you

466
00:17:45,120 --> 00:17:47,840
know it's way too early but there's some

467
00:17:47,840 --> 00:17:49,360
body that decides what are the set of

468
00:17:49,360 --> 00:17:51,360
public services and and their

469
00:17:51,360 --> 00:17:52,880
implementations

470
00:17:52,880 --> 00:17:53,600
and

471
00:17:53,600 --> 00:17:55,919
all of these public services are run on

472
00:17:55,919 --> 00:17:57,600
all service nodes that is if you're

473
00:17:57,600 --> 00:17:59,520
offering internet service

474
00:17:59,520 --> 00:18:01,520
so you're supplying a service node you

475
00:18:01,520 --> 00:18:03,440
have to download all of the service

476
00:18:03,440 --> 00:18:06,080
modules that are in the service model

477
00:18:06,080 --> 00:18:07,760
that have been approved

478
00:18:07,760 --> 00:18:09,760
and so this is really the biggest change

479
00:18:09,760 --> 00:18:12,960
to ei meaning that ei brings this

480
00:18:12,960 --> 00:18:15,280
deployment model that is because they're

481
00:18:15,280 --> 00:18:16,960
approved software modules they can be

482
00:18:16,960 --> 00:18:19,039
rolled out they can be deployed there's

483
00:18:19,039 --> 00:18:21,679
no per vendor per domain decision

484
00:18:21,679 --> 00:18:24,000
process of is cisco going to support

485
00:18:24,000 --> 00:18:26,000
this is juniper going to support this

486
00:18:26,000 --> 00:18:28,240
that is 18t or deutsche telekom going to

487
00:18:28,240 --> 00:18:30,640
deploy it it just gets rolled out as

488
00:18:30,640 --> 00:18:33,360
part of the standards process

489
00:18:33,360 --> 00:18:34,400
now so

490
00:18:34,400 --> 00:18:36,960
after all this talk about

491
00:18:36,960 --> 00:18:39,120
you know the process what what are the

492
00:18:39,120 --> 00:18:41,440
services that might get offered

493
00:18:41,440 --> 00:18:42,960
you know the basics like flow

494
00:18:42,960 --> 00:18:44,559
termination and caching and load

495
00:18:44,559 --> 00:18:46,320
balancing which you already know

496
00:18:46,320 --> 00:18:48,640
bring a tremendous amount of value

497
00:18:48,640 --> 00:18:51,039
their support for other delivery models

498
00:18:51,039 --> 00:18:53,840
multicast pub sub redirection qos and

499
00:18:53,840 --> 00:18:56,480
qos here not in the inserv

500
00:18:56,480 --> 00:18:59,280
diffserv conduqs but in the

501
00:18:59,280 --> 00:19:01,840
sd-wan kind of qos that you can pick

502
00:19:01,840 --> 00:19:03,919
paths or different delivery vehicles

503
00:19:03,919 --> 00:19:06,000
that meet your needs

504
00:19:06,000 --> 00:19:08,000
support for security and privacy it's

505
00:19:08,000 --> 00:19:09,600
very easy given this architecture to

506
00:19:09,600 --> 00:19:12,320
build a very good ddos prevention but

507
00:19:12,320 --> 00:19:14,080
also if you have secure enclaves you can

508
00:19:14,080 --> 00:19:16,320
have scalable attestation so that a

509
00:19:16,320 --> 00:19:18,640
client when it's accessing google or

510
00:19:18,640 --> 00:19:20,720
some other hyperscaler

511
00:19:20,720 --> 00:19:22,559
can be assured that it's dealing with a

512
00:19:22,559 --> 00:19:24,160
legitimate

513
00:19:24,160 --> 00:19:25,919
node that is running the current google

514
00:19:25,919 --> 00:19:27,360
software

515
00:19:27,360 --> 00:19:30,000
you can have odns like privacy tour like

516
00:19:30,000 --> 00:19:32,240
privacy

517
00:19:32,240 --> 00:19:33,679
you can also incorporate other

518
00:19:33,679 --> 00:19:35,120
frameworks that are becoming quite

519
00:19:35,120 --> 00:19:37,120
popular they can be running on these

520
00:19:37,120 --> 00:19:39,280
service nodes istio and then oppa for

521
00:19:39,280 --> 00:19:42,080
the policies various telemetry kinds of

522
00:19:42,080 --> 00:19:44,080
frameworks

523
00:19:44,080 --> 00:19:45,679
and then support for radical new

524
00:19:45,679 --> 00:19:47,679
architecture something like icn whether

525
00:19:47,679 --> 00:19:51,039
it's the donor style or the ndn style

526
00:19:51,039 --> 00:19:52,799
this now just becomes a service you just

527
00:19:52,799 --> 00:19:54,400
roll it out you're not replacing all the

528
00:19:54,400 --> 00:19:56,400
routers it's just a piece of software

529
00:19:56,400 --> 00:19:58,000
there'll be host support

530
00:19:58,000 --> 00:19:59,679
uh obviously of course for all the

531
00:19:59,679 --> 00:20:01,600
services and

532
00:20:01,600 --> 00:20:03,200
this just gets rolled out like another

533
00:20:03,200 --> 00:20:04,320
standard

534
00:20:04,320 --> 00:20:07,679
um so it really lowers the bar to this

535
00:20:07,679 --> 00:20:08,880
deployment

536
00:20:08,880 --> 00:20:11,120
and that's why we call it the extensible

537
00:20:11,120 --> 00:20:13,520
internet because once you get this

538
00:20:13,520 --> 00:20:16,880
uh framework set up it makes it very

539
00:20:16,880 --> 00:20:18,480
easy to extend the service model in

540
00:20:18,480 --> 00:20:20,640
rather radical ways

541
00:20:20,640 --> 00:20:22,640
this is the last question i have a

542
00:20:22,640 --> 00:20:24,080
question for you would you like to take

543
00:20:24,080 --> 00:20:26,240
questions from the audience now or at

544
00:20:26,240 --> 00:20:28,320
the end

545
00:20:28,320 --> 00:20:30,000
i've only got a few more slides let me

546
00:20:30,000 --> 00:20:32,480
take it let me finish just because

547
00:20:32,480 --> 00:20:34,960
sounds good i

548
00:20:36,320 --> 00:20:37,919
given the failures

549
00:20:37,919 --> 00:20:39,440
why do we think this might succeed and

550
00:20:39,440 --> 00:20:41,600
there are three reasons one backwards

551
00:20:41,600 --> 00:20:44,080
compatibility ip just continues to be

552
00:20:44,080 --> 00:20:45,360
used if you don't want to change

553
00:20:45,360 --> 00:20:47,039
anything you just use ip

554
00:20:47,039 --> 00:20:48,559
you know maybe 20 years from now that

555
00:20:48,559 --> 00:20:51,520
will go away but when we roll ei out

556
00:20:51,520 --> 00:20:54,400
nothing changes about ip

557
00:20:54,400 --> 00:20:56,559
and the kind of resources you need you

558
00:20:56,559 --> 00:20:58,080
just need the service nodes which could

559
00:20:58,080 --> 00:21:00,799
use edge computing or existing pops they

560
00:21:00,799 --> 00:21:02,559
have these facilities out there i mean

561
00:21:02,559 --> 00:21:03,760
we've talked to some carriers and they

562
00:21:03,760 --> 00:21:05,280
say oh you know we could run this

563
00:21:05,280 --> 00:21:06,960
tomorrow that we've got all these

564
00:21:06,960 --> 00:21:08,559
facilities available obviously there's

565
00:21:08,559 --> 00:21:10,880
more involved but this isn't

566
00:21:10,880 --> 00:21:12,960
talking about you know major

567
00:21:12,960 --> 00:21:14,720
capital outlays

568
00:21:14,720 --> 00:21:17,039
the second reason is uh fear is a great

569
00:21:17,039 --> 00:21:19,440
motivator um you know the internet

570
00:21:19,440 --> 00:21:21,600
architecture has resisted change and

571
00:21:21,600 --> 00:21:23,280
mark handles this great essay on you

572
00:21:23,280 --> 00:21:25,600
know why the internet just barely works

573
00:21:25,600 --> 00:21:28,000
and his reasoning is you know sort of

574
00:21:28,000 --> 00:21:29,520
you know basically why should it change

575
00:21:29,520 --> 00:21:32,159
unless it has to but what's implicit in

576
00:21:32,159 --> 00:21:33,840
his essay is

577
00:21:33,840 --> 00:21:35,440
that there's no alternative that the

578
00:21:35,440 --> 00:21:37,760
internet is just there

579
00:21:37,760 --> 00:21:39,520
there's now an alternative

580
00:21:39,520 --> 00:21:41,200
you know if you talk to the clouds they

581
00:21:41,200 --> 00:21:42,880
they basically think that 10 years from

582
00:21:42,880 --> 00:21:44,559
now the internet will just be the last

583
00:21:44,559 --> 00:21:46,880
mile and they'll be

584
00:21:46,880 --> 00:21:48,400
providing all the networking that's

585
00:21:48,400 --> 00:21:50,000
clearly their vision

586
00:21:50,000 --> 00:21:50,880
so

587
00:21:50,880 --> 00:21:52,960
uh there's now an alternative and so the

588
00:21:52,960 --> 00:21:54,960
internet has a simple choice it either

589
00:21:54,960 --> 00:21:56,880
changes or it shrivels to being a last

590
00:21:56,880 --> 00:21:59,120
mile provider

591
00:21:59,120 --> 00:22:00,799
and we think the extensible internet is

592
00:22:00,799 --> 00:22:03,280
one possible change that will preserve

593
00:22:03,280 --> 00:22:04,400
its role

594
00:22:04,400 --> 00:22:06,480
and the third reason

595
00:22:06,480 --> 00:22:08,240
is that ei is based on a simple

596
00:22:08,240 --> 00:22:10,159
conjecture that in network support for

597
00:22:10,159 --> 00:22:11,760
applications

598
00:22:11,760 --> 00:22:13,679
it's important for current and emerging

599
00:22:13,679 --> 00:22:15,679
apps can be done at service nodes rather

600
00:22:15,679 --> 00:22:18,320
than each router can be done in software

601
00:22:18,320 --> 00:22:20,000
not in hardware

602
00:22:20,000 --> 00:22:21,600
and the point is the private networks

603
00:22:21,600 --> 00:22:23,039
have proven every aspect of this

604
00:22:23,039 --> 00:22:24,880
conjecture they're up in the running

605
00:22:24,880 --> 00:22:26,240
they're running at scale they're running

606
00:22:26,240 --> 00:22:28,320
with real traffic at an unimaginable

607
00:22:28,320 --> 00:22:30,320
scale so

608
00:22:30,320 --> 00:22:31,919
ei is really the architecturally

609
00:22:31,919 --> 00:22:34,480
co-version of what of the approach these

610
00:22:34,480 --> 00:22:36,320
private networks have already proven to

611
00:22:36,320 --> 00:22:37,120
work

612
00:22:37,120 --> 00:22:39,919
so that's why we think it might succeed

613
00:22:39,919 --> 00:22:42,480
so my last real slide is you know where

614
00:22:42,480 --> 00:22:44,320
are we we built a prototype really

615
00:22:44,320 --> 00:22:46,559
murphy mccauley who has built the

616
00:22:46,559 --> 00:22:48,559
prototype while teaching four classes a

617
00:22:48,559 --> 00:22:50,559
week so progress has been a little

618
00:22:50,559 --> 00:22:52,240
slower but

619
00:22:52,240 --> 00:22:53,840
you know we want to finish development

620
00:22:53,840 --> 00:22:55,760
which should be in a couple of months

621
00:22:55,760 --> 00:22:58,960
deploy it on fabric and other test beds

622
00:22:58,960 --> 00:23:01,600
engage the community by providing this

623
00:23:01,600 --> 00:23:02,880
test but we say if you have a new

624
00:23:02,880 --> 00:23:04,400
service we can deploy it if you want to

625
00:23:04,400 --> 00:23:06,559
write applications on top of these

626
00:23:06,559 --> 00:23:08,559
services like pub sub or whatever you

627
00:23:08,559 --> 00:23:10,000
can do that too

628
00:23:10,000 --> 00:23:11,679
uh continuing our discussions with

629
00:23:11,679 --> 00:23:13,919
industry and we'd love to have your

630
00:23:13,919 --> 00:23:15,600
participation you here meaning as

631
00:23:15,600 --> 00:23:18,000
individuals as a research group or the

632
00:23:18,000 --> 00:23:20,720
broader community with that

633
00:23:20,720 --> 00:23:22,799
thank you and i'll take your questions

634
00:23:22,799 --> 00:23:25,280
and eve why don't you kick it off

635
00:23:25,280 --> 00:23:27,520
sure um actually i wanted to just give

636
00:23:27,520 --> 00:23:30,799
adrian uh the opportunity to uh

637
00:23:30,799 --> 00:23:32,080
he's first in queue and then there were

638
00:23:32,080 --> 00:23:33,919
some interesting questions in the chat

639
00:23:33,919 --> 00:23:35,919
that um i encourage people who wrote

640
00:23:35,919 --> 00:23:39,039
them to get in line to queue up as well

641
00:23:39,039 --> 00:23:40,080
adrian

642
00:23:40,080 --> 00:23:42,960
thank you eve um and thank you scott for

643
00:23:42,960 --> 00:23:44,880
for this um

644
00:23:44,880 --> 00:23:46,559
as you said the second time i've sort of

645
00:23:46,559 --> 00:23:48,640
heard this and and finally it's sinking

646
00:23:48,640 --> 00:23:53,679
in a little bit um my question which um

647
00:23:53,679 --> 00:23:55,679
draws on some of the the stuff in the

648
00:23:55,679 --> 00:23:57,279
chat is about

649
00:23:57,279 --> 00:24:00,320
um the layering here and in particular

650
00:24:00,320 --> 00:24:02,480
the relationship with with transport

651
00:24:02,480 --> 00:24:04,640
protocols so in in your very simple

652
00:24:04,640 --> 00:24:07,440
example of uh source

653
00:24:07,440 --> 00:24:10,640
snsn dest um

654
00:24:10,640 --> 00:24:12,559
would the would you see the transport

655
00:24:12,559 --> 00:24:14,159
protocol running

656
00:24:14,159 --> 00:24:17,840
um end to end so source to destination

657
00:24:17,840 --> 00:24:20,240
uh or um

658
00:24:20,240 --> 00:24:23,760
would you imagine that those transport

659
00:24:23,760 --> 00:24:26,640
connections are terminated and restarted

660
00:24:26,640 --> 00:24:29,760
at the sn's

661
00:24:30,080 --> 00:24:32,640
so there will definitely be an

662
00:24:32,640 --> 00:24:35,120
end-to-end reliability layer

663
00:24:35,120 --> 00:24:36,240
uh

664
00:24:36,240 --> 00:24:37,039
and

665
00:24:37,039 --> 00:24:39,520
because for reliability we want the

666
00:24:39,520 --> 00:24:41,679
failure of a service node to be no more

667
00:24:41,679 --> 00:24:43,600
serious than the failure

668
00:24:43,600 --> 00:24:46,000
of a router today so they'll definitely

669
00:24:46,000 --> 00:24:49,679
be end to end whether the pipe that goes

670
00:24:49,679 --> 00:24:52,400
we view that ip is providing a pipe uh

671
00:24:52,400 --> 00:24:55,279
whether the the pipe that goes between

672
00:24:55,279 --> 00:24:57,760
these two implement some kind of

673
00:24:57,760 --> 00:24:59,440
reliability is

674
00:24:59,440 --> 00:25:00,480
uh

675
00:25:00,480 --> 00:25:01,840
an open question

676
00:25:01,840 --> 00:25:03,440
but but it's not mandated by the

677
00:25:03,440 --> 00:25:06,720
architecture the essential um

678
00:25:06,720 --> 00:25:08,880
transport is end to end where congestion

679
00:25:08,880 --> 00:25:10,320
control is done there's a much more

680
00:25:10,320 --> 00:25:12,799
complicated question

681
00:25:12,799 --> 00:25:14,080
right because i think i think this sort

682
00:25:14,080 --> 00:25:17,039
of factors into things like uh

683
00:25:17,039 --> 00:25:21,360
um transport layer encryption as well uh

684
00:25:21,360 --> 00:25:23,919
and whether the sms are able to access

685
00:25:23,919 --> 00:25:26,400
the data to do anything unless those

686
00:25:26,400 --> 00:25:29,039
transport sessions um

687
00:25:29,039 --> 00:25:31,760
are terminated and restarted and this is

688
00:25:31,760 --> 00:25:34,000
kind of making me wonder i i don't

689
00:25:34,000 --> 00:25:36,320
dispute at all the uh all your points

690
00:25:36,320 --> 00:25:38,400
about needing to introduce

691
00:25:38,400 --> 00:25:40,799
some additional layering to to get the

692
00:25:40,799 --> 00:25:42,480
development and i'm just wondering

693
00:25:42,480 --> 00:25:44,480
whether this is really go should go in

694
00:25:44,480 --> 00:25:47,440
at layer 4.5 rather than at 3.5 but i'll

695
00:25:47,440 --> 00:25:49,440
let others talk

696
00:25:49,440 --> 00:25:52,159
well i actually can i i mean this is a

697
00:25:52,159 --> 00:25:55,039
very active area of investigation for us

698
00:25:55,039 --> 00:25:57,039
and our current thinking is

699
00:25:57,039 --> 00:25:59,039
that the end to end

700
00:25:59,039 --> 00:26:00,320
first of all all the pipes will be

701
00:26:00,320 --> 00:26:02,559
encrypted at the low level uh but but

702
00:26:02,559 --> 00:26:03,840
that's trivial

703
00:26:03,840 --> 00:26:06,080
but and service node to service node

704
00:26:06,080 --> 00:26:09,039
pipes but at the end-to-end transport

705
00:26:09,039 --> 00:26:10,640
layer

706
00:26:10,640 --> 00:26:13,200
there will be encryption but i we want

707
00:26:13,200 --> 00:26:15,600
to have an option for the endpoints to

708
00:26:15,600 --> 00:26:16,640
say

709
00:26:16,640 --> 00:26:18,960
here are the parts that we are willing

710
00:26:18,960 --> 00:26:21,360
to let the intermediate node see

711
00:26:21,360 --> 00:26:22,720
versus here are the parts that they

712
00:26:22,720 --> 00:26:25,760
can't and so they can decide like they

713
00:26:25,760 --> 00:26:28,000
want to take care of uh

714
00:26:28,000 --> 00:26:30,400
you know take advantage of caching then

715
00:26:30,400 --> 00:26:33,120
they might expose certain aspects but if

716
00:26:33,120 --> 00:26:34,720
they want to keep certain material

717
00:26:34,720 --> 00:26:36,720
private they don't and so we want to

718
00:26:36,720 --> 00:26:39,120
give that leave that flexibility to the

719
00:26:39,120 --> 00:26:42,158
application itself

720
00:26:42,640 --> 00:26:46,080
does that make any sense adrian

721
00:26:46,799 --> 00:26:49,520
i yeah thank you and i i kind of take

722
00:26:49,520 --> 00:26:51,360
that as um this needs to be thought

723
00:26:51,360 --> 00:26:53,679
about more and and nailed down the

724
00:26:53,679 --> 00:26:55,760
details

725
00:26:55,760 --> 00:26:57,200
right but what i would say is i don't

726
00:26:57,200 --> 00:26:58,960
think there's a single answer that is

727
00:26:58,960 --> 00:27:00,159
mandated

728
00:27:00,159 --> 00:27:03,760
but there has to be some flexibility

729
00:27:05,039 --> 00:27:08,640
okay um why don't we uh dirk trossen

730
00:27:08,640 --> 00:27:11,440
you're next in the queue

731
00:27:11,440 --> 00:27:13,360
yes uh thanks thanks scott for for the

732
00:27:13,360 --> 00:27:15,679
presentation um similar to adrian some

733
00:27:15,679 --> 00:27:17,600
things that i heard again

734
00:27:17,600 --> 00:27:19,600
just slowly sang in and there was one

735
00:27:19,600 --> 00:27:21,600
issue that i stumbled across which is

736
00:27:21,600 --> 00:27:22,399
the

737
00:27:22,399 --> 00:27:24,640
sn must implement public services we

738
00:27:24,640 --> 00:27:27,440
need to agree somewhere um

739
00:27:27,440 --> 00:27:29,760
possibly in the itf by governance

740
00:27:29,760 --> 00:27:31,039
isn't that a

741
00:27:31,039 --> 00:27:33,840
barrier to entry though i'm i'm not

742
00:27:33,840 --> 00:27:36,000
really quite understanding the reason

743
00:27:36,000 --> 00:27:37,840
for doing so because also the culture

744
00:27:37,840 --> 00:27:39,120
asks the right question who has the

745
00:27:39,120 --> 00:27:40,720
incentive to really

746
00:27:40,720 --> 00:27:43,039
deploy this but if i'm if i have to ramp

747
00:27:43,039 --> 00:27:44,640
up my sn deployment by really

748
00:27:44,640 --> 00:27:46,159
essentially running any public service

749
00:27:46,159 --> 00:27:47,200
over it

750
00:27:47,200 --> 00:27:49,120
isn't it preventing me for just quickly

751
00:27:49,120 --> 00:27:50,720
roll out my

752
00:27:50,720 --> 00:27:52,640
owner's end where all i want to do is

753
00:27:52,640 --> 00:27:55,520
run my service on it because it's a low

754
00:27:55,520 --> 00:27:59,158
barrier to entry

755
00:28:02,240 --> 00:28:05,600
that our point is that once you support

756
00:28:05,600 --> 00:28:08,159
the execution environment

757
00:28:08,159 --> 00:28:09,919
uh

758
00:28:09,919 --> 00:28:12,080
implementing these other services

759
00:28:12,080 --> 00:28:14,880
is simple it it does require extra

760
00:28:14,880 --> 00:28:16,960
resources but if you don't make it

761
00:28:16,960 --> 00:28:19,440
uniform then the internet

762
00:28:19,440 --> 00:28:21,600
you know the beauty of the growth of the

763
00:28:21,600 --> 00:28:23,440
internet is you knew wherever you

764
00:28:23,440 --> 00:28:24,960
plugged in you had a set of services you

765
00:28:24,960 --> 00:28:26,480
could depend on

766
00:28:26,480 --> 00:28:29,520
if we now go to the space of ip options

767
00:28:29,520 --> 00:28:31,919
which you know is no fun

768
00:28:31,919 --> 00:28:34,159
that's not going to work and so that

769
00:28:34,159 --> 00:28:36,000
really is critical to this that you can

770
00:28:36,000 --> 00:28:38,159
build an application that relies on a

771
00:28:38,159 --> 00:28:39,440
public service

772
00:28:39,440 --> 00:28:41,039
and that will be available wherever the

773
00:28:41,039 --> 00:28:42,880
user is

774
00:28:42,880 --> 00:28:44,399
so that that's critical part of the

775
00:28:44,399 --> 00:28:45,520
proposal

776
00:28:45,520 --> 00:28:47,679
and given that it's

777
00:28:47,679 --> 00:28:49,679
not about changing equipment it's just

778
00:28:49,679 --> 00:28:51,919
about the scaling of your

779
00:28:51,919 --> 00:28:53,760
uh service nodes

780
00:28:53,760 --> 00:28:55,200
we think there's a chance that that's

781
00:28:55,200 --> 00:28:56,000
gonna

782
00:28:56,000 --> 00:28:57,039
take off

783
00:28:57,039 --> 00:29:00,000
so so so maybe i misunderstood your your

784
00:29:00,000 --> 00:29:01,840
slide then so you're saying because of

785
00:29:01,840 --> 00:29:03,919
the um standardized execution

786
00:29:03,919 --> 00:29:05,200
environment

787
00:29:05,200 --> 00:29:07,600
you can run any of the public services

788
00:29:07,600 --> 00:29:09,200
on any of these ends that have been

789
00:29:09,200 --> 00:29:12,480
deployed but i don't so if somebody

790
00:29:12,480 --> 00:29:14,320
comes and wants to run a public service

791
00:29:14,320 --> 00:29:17,039
on my execution environment or my sn

792
00:29:17,039 --> 00:29:18,880
it will just simply run because it's a

793
00:29:18,880 --> 00:29:20,159
standardized execution environment

794
00:29:20,159 --> 00:29:22,080
doesn't mean i have to provide it

795
00:29:22,080 --> 00:29:25,200
as a catalog of possible services i i i

796
00:29:25,200 --> 00:29:27,120
could run on mine

797
00:29:27,120 --> 00:29:29,679
somebody can just load the app onto mys

798
00:29:29,679 --> 00:29:31,760
and then it just runs

799
00:29:31,760 --> 00:29:33,760
no ah no it is

800
00:29:33,760 --> 00:29:34,480
the

801
00:29:34,480 --> 00:29:36,880
let's say it's the itf the iatf decides

802
00:29:36,880 --> 00:29:39,200
what the standard services are every

803
00:29:39,200 --> 00:29:41,039
service node that claims it's supporting

804
00:29:41,039 --> 00:29:45,039
the internet has to run all the services

805
00:29:45,039 --> 00:29:46,399
you know it's like once it's

806
00:29:46,399 --> 00:29:48,000
standardized within two months it must

807
00:29:48,000 --> 00:29:49,679
be up and running that's that's just the

808
00:29:49,679 --> 00:29:51,919
rule so it's not like somebody asks you

809
00:29:51,919 --> 00:29:53,279
to do it

810
00:29:53,279 --> 00:29:54,880
if you're either a cloud who's

811
00:29:54,880 --> 00:29:57,039
supporting this or a carrier who's

812
00:29:57,039 --> 00:29:58,320
supporting this

813
00:29:58,320 --> 00:29:59,440
that's the rule that it just

814
00:29:59,440 --> 00:30:01,679
automatically updates

815
00:30:01,679 --> 00:30:02,559
okay

816
00:30:02,559 --> 00:30:04,799
thanks

817
00:30:06,240 --> 00:30:09,480
dave iran

818
00:30:10,559 --> 00:30:12,000
scott just talk for a second about what

819
00:30:12,000 --> 00:30:13,919
you think the service composition model

820
00:30:13,919 --> 00:30:16,399
is for this

821
00:30:19,679 --> 00:30:21,360
that's the service model composition

822
00:30:21,360 --> 00:30:22,720
bottle

823
00:30:22,720 --> 00:30:26,080
uh what do we have for your attention

824
00:30:26,080 --> 00:30:28,240
no no no what i mean is we we

825
00:30:28,240 --> 00:30:29,679
specifically

826
00:30:29,679 --> 00:30:32,080
do not allow users to arbitrarily

827
00:30:32,080 --> 00:30:34,799
compose services

828
00:30:34,799 --> 00:30:36,880
that there will be

829
00:30:36,880 --> 00:30:37,760
sort of

830
00:30:37,760 --> 00:30:42,080
sets of approved compositions that work

831
00:30:42,080 --> 00:30:43,120
because we

832
00:30:43,120 --> 00:30:45,279
we think it is an impossible

833
00:30:45,279 --> 00:30:48,000
way to provide a general rule for what

834
00:30:48,000 --> 00:30:50,399
can compose with what

835
00:30:50,399 --> 00:30:52,480
um

836
00:30:52,480 --> 00:30:54,000
so yeah that that is one of the things

837
00:30:54,000 --> 00:30:56,000
that if you wanna you can't just say

838
00:30:56,000 --> 00:30:58,960
well i want services 28 and 37

839
00:30:58,960 --> 00:31:00,559
because

840
00:31:00,559 --> 00:31:02,000
you know what if it's some security

841
00:31:02,000 --> 00:31:03,919
measure that's point to point and the

842
00:31:03,919 --> 00:31:06,480
other one is a multicast

843
00:31:06,480 --> 00:31:08,720
so that we we actually sort of

844
00:31:08,720 --> 00:31:11,120
proactively say that kind of

845
00:31:11,120 --> 00:31:12,080
linking

846
00:31:12,080 --> 00:31:13,519
is done at the definition of the

847
00:31:13,519 --> 00:31:14,880
services

848
00:31:14,880 --> 00:31:15,760
level

849
00:31:15,760 --> 00:31:18,399
not at the user

850
00:31:18,399 --> 00:31:20,880
linking them together so there might be

851
00:31:20,880 --> 00:31:22,000
like a

852
00:31:22,000 --> 00:31:23,519
particular stack that says okay you're

853
00:31:23,519 --> 00:31:25,360
going to get an ip-like service and on

854
00:31:25,360 --> 00:31:26,880
top of it you're going to get this kind

855
00:31:26,880 --> 00:31:27,600
of

856
00:31:27,600 --> 00:31:29,120
transport service and on top of that

857
00:31:29,120 --> 00:31:31,120
there's going to be this kind of ddos

858
00:31:31,120 --> 00:31:32,399
prevention

859
00:31:32,399 --> 00:31:34,640
and you know whatever

860
00:31:34,640 --> 00:31:37,279
as a a set of what we might think of

861
00:31:37,279 --> 00:31:38,880
individual features

862
00:31:38,880 --> 00:31:40,720
but it'll be a single service so that

863
00:31:40,720 --> 00:31:42,240
you don't have to

864
00:31:42,240 --> 00:31:44,480
manually compose things and and the

865
00:31:44,480 --> 00:31:47,919
market will show us what

866
00:31:47,919 --> 00:31:50,080
you know how that rolls out but we

867
00:31:50,080 --> 00:31:51,679
really

868
00:31:51,679 --> 00:31:53,200
sort of uh

869
00:31:53,200 --> 00:31:55,440
discretion is the better part of valor

870
00:31:55,440 --> 00:31:57,039
decided that taking on general

871
00:31:57,039 --> 00:31:58,880
composability was going to be a losing

872
00:31:58,880 --> 00:32:01,760
battle so then one quick follow on which

873
00:32:01,760 --> 00:32:03,440
is okay so from the point of view of the

874
00:32:03,440 --> 00:32:05,200
user they see

875
00:32:05,200 --> 00:32:06,080
um

876
00:32:06,080 --> 00:32:08,480
you know a composed service as what what

877
00:32:08,480 --> 00:32:10,240
they talk to the service node about what

878
00:32:10,240 --> 00:32:12,080
about the internal

879
00:32:12,080 --> 00:32:15,039
communication among uh services

880
00:32:15,039 --> 00:32:16,159
is this

881
00:32:16,159 --> 00:32:17,919
some sort of private interconnect is it

882
00:32:17,919 --> 00:32:20,159
part of the architecture is it something

883
00:32:20,159 --> 00:32:22,399
like service chaining or vnfs that we

884
00:32:22,399 --> 00:32:24,080
see today that are

885
00:32:24,080 --> 00:32:25,360
so messy

886
00:32:25,360 --> 00:32:26,559
um

887
00:32:26,559 --> 00:32:28,559
any thoughts

888
00:32:28,559 --> 00:32:30,559
yeah so in our current implementation

889
00:32:30,559 --> 00:32:31,840
what we would do

890
00:32:31,840 --> 00:32:33,200
is we would

891
00:32:33,200 --> 00:32:35,039
say well if this is the composition then

892
00:32:35,039 --> 00:32:36,720
we would have that

893
00:32:36,720 --> 00:32:39,120
ball of code i mean take those several

894
00:32:39,120 --> 00:32:40,720
different pieces of code

895
00:32:40,720 --> 00:32:42,559
merge them together

896
00:32:42,559 --> 00:32:43,679
and then

897
00:32:43,679 --> 00:32:46,399
have them run as a single service module

898
00:32:46,399 --> 00:32:48,000
so that we've actually made sure that

899
00:32:48,000 --> 00:32:50,720
these code that the code bases work

900
00:32:50,720 --> 00:32:51,679
together

901
00:32:51,679 --> 00:32:53,600
and and so we're not doing

902
00:32:53,600 --> 00:32:55,440
enough chaining

903
00:32:55,440 --> 00:32:57,840
it is actually we decide to put it

904
00:32:57,840 --> 00:32:59,840
we won't be using vms probably but if we

905
00:32:59,840 --> 00:33:02,640
were we would put it in a single vm

906
00:33:02,640 --> 00:33:04,320
so that it's a single coherent piece

907
00:33:04,320 --> 00:33:06,880
rather than dealing with the nightmare

908
00:33:06,880 --> 00:33:09,760
of service changing

909
00:33:09,840 --> 00:33:13,760
in these clusters great thanks

910
00:33:14,559 --> 00:33:16,320
king would you like to go

911
00:33:16,320 --> 00:33:18,080
you're next

912
00:33:18,080 --> 00:33:20,640
always and it looks it looks like an

913
00:33:20,640 --> 00:33:22,880
interesting topic to me

914
00:33:22,880 --> 00:33:23,760
and

915
00:33:23,760 --> 00:33:26,480
it also reminded me of two things the

916
00:33:26,480 --> 00:33:28,320
first one is service function channing

917
00:33:28,320 --> 00:33:31,120
sfc and the next one is sd1

918
00:33:31,120 --> 00:33:34,880
so uh i do see that these two uh jose

919
00:33:34,880 --> 00:33:38,000
service has the same or similar uh

920
00:33:38,000 --> 00:33:39,279
model

921
00:33:39,279 --> 00:33:42,000
of this i'll say ei

922
00:33:42,000 --> 00:33:43,039
network

923
00:33:43,039 --> 00:33:45,919
so what's the difference or any relation

924
00:33:45,919 --> 00:33:49,039
between the sfc and s8 and sd1

925
00:33:49,039 --> 00:33:51,120
and ei

926
00:33:51,120 --> 00:33:52,559
yeah

927
00:33:52,559 --> 00:33:54,640
so i i think

928
00:33:54,640 --> 00:33:56,399
for

929
00:33:56,399 --> 00:33:57,760
uh

930
00:33:57,760 --> 00:34:00,880
both of them it is the extensibility

931
00:34:00,880 --> 00:34:02,240
um

932
00:34:02,240 --> 00:34:04,399
so for service chaining

933
00:34:04,399 --> 00:34:07,360
you tell it to go through various boxes

934
00:34:07,360 --> 00:34:09,520
but it's not the network is not making

935
00:34:09,520 --> 00:34:11,760
you a promise of i will deliver

936
00:34:11,760 --> 00:34:13,679
multicast packets for you

937
00:34:13,679 --> 00:34:15,679
it is go through this box this box can

938
00:34:15,679 --> 00:34:18,879
do something but but um

939
00:34:18,879 --> 00:34:21,760
service chaining doesn't give you any

940
00:34:21,760 --> 00:34:23,918
global service definition

941
00:34:23,918 --> 00:34:25,599
that that's your job you have to sort of

942
00:34:25,599 --> 00:34:26,719
you know if you say you go through a

943
00:34:26,719 --> 00:34:28,159
firewall and then go to this and go

944
00:34:28,159 --> 00:34:29,359
through that

945
00:34:29,359 --> 00:34:31,280
you're the one figuring out eventually

946
00:34:31,280 --> 00:34:33,280
what what that's giving you so i think

947
00:34:33,280 --> 00:34:34,399
that's the difference

948
00:34:34,399 --> 00:34:37,199
so something like ddos prevention

949
00:34:37,199 --> 00:34:38,320
um

950
00:34:38,320 --> 00:34:39,119
that

951
00:34:39,119 --> 00:34:41,119
you know we're architecting it

952
00:34:41,119 --> 00:34:43,199
to provide it's a service-wide thing

953
00:34:43,199 --> 00:34:44,879
it's not just a single box it's not just

954
00:34:44,879 --> 00:34:47,040
a scrubbing box so that's what i think

955
00:34:47,040 --> 00:34:49,119
that the key difference is i don't know

956
00:34:49,119 --> 00:34:51,919
whether that helps

957
00:34:54,159 --> 00:34:57,200
so so yeah i may need to read more of

958
00:34:57,200 --> 00:34:59,200
the details yep

959
00:34:59,200 --> 00:35:02,400
and there's a pointer to the paper um i

960
00:35:02,400 --> 00:35:04,720
think it's it's got uh

961
00:35:04,720 --> 00:35:06,480
could confirm i think it's an is it an

962
00:35:06,480 --> 00:35:08,960
april uh ccr paper yeah

963
00:35:08,960 --> 00:35:11,359
yeah and uh but we have a pointer in the

964
00:35:11,359 --> 00:35:12,480
agenda

965
00:35:12,480 --> 00:35:15,520
um and slides and um i see there's one

966
00:35:15,520 --> 00:35:18,560
other person who's joined the queue tng

967
00:35:18,560 --> 00:35:21,599
oh yes uh hey scott it's a good

968
00:35:21,599 --> 00:35:24,240
presentation here ever one thing to ask

969
00:35:24,240 --> 00:35:27,040
about your ei here you know it's running

970
00:35:27,040 --> 00:35:29,040
on the ip and the ip normally has some

971
00:35:29,040 --> 00:35:31,599
protocols to communicate among all the

972
00:35:31,599 --> 00:35:32,720
entities

973
00:35:32,720 --> 00:35:36,320
so for your ei as a 3.5 so how does one

974
00:35:36,320 --> 00:35:38,640
ei node in your term

975
00:35:38,640 --> 00:35:40,800
to communicate with others or will you

976
00:35:40,800 --> 00:35:43,119
configure or were you

977
00:35:43,119 --> 00:35:45,599
through some random no not run some

978
00:35:45,599 --> 00:35:48,000
centralized controller

979
00:35:48,000 --> 00:35:51,760
those type of things in that case well

980
00:35:51,760 --> 00:35:53,440
i don't know whether what the difference

981
00:35:53,440 --> 00:35:56,240
from the like uh icn model something

982
00:35:56,240 --> 00:35:58,720
like that thank you

983
00:35:58,720 --> 00:36:01,599
ah so yes we will have some kind of

984
00:36:01,599 --> 00:36:03,200
discovery

985
00:36:03,200 --> 00:36:05,520
um

986
00:36:05,599 --> 00:36:07,680
process for service nodes to discover

987
00:36:07,680 --> 00:36:08,800
each other but

988
00:36:08,800 --> 00:36:11,200
if you want to have an sdn like control

989
00:36:11,200 --> 00:36:12,400
for a domain

990
00:36:12,400 --> 00:36:13,920
to have the service nodes know about

991
00:36:13,920 --> 00:36:15,760
each other that would be fine so the

992
00:36:15,760 --> 00:36:18,320
control plane we i was completely silent

993
00:36:18,320 --> 00:36:20,880
on the control plane for this we're open

994
00:36:20,880 --> 00:36:21,839
to

995
00:36:21,839 --> 00:36:23,599
a wide variety of how you're going to

996
00:36:23,599 --> 00:36:25,119
manage your domain

997
00:36:25,119 --> 00:36:26,480
obviously a

998
00:36:26,480 --> 00:36:28,560
sdn like approach

999
00:36:28,560 --> 00:36:29,680
you know for

1000
00:36:29,680 --> 00:36:31,440
knowing where all the service nodes are

1001
00:36:31,440 --> 00:36:32,160
and

1002
00:36:32,160 --> 00:36:34,240
telling them how to reach each other

1003
00:36:34,240 --> 00:36:36,880
would be very easy to do and probably

1004
00:36:36,880 --> 00:36:39,680
the right approach

1005
00:36:39,760 --> 00:36:42,079
thank you

1006
00:36:43,119 --> 00:36:45,040
it's everybody in the queue but i wonder

1007
00:36:45,040 --> 00:36:47,440
i know there's a very um

1008
00:36:47,440 --> 00:36:50,160
uh thriving uh conversation going on

1009
00:36:50,160 --> 00:36:52,079
back and forth on the chat is there

1010
00:36:52,079 --> 00:36:54,480
anybody from there who would like to um

1011
00:36:54,480 --> 00:36:56,640
introduce i think i think we we're

1012
00:36:56,640 --> 00:36:58,880
getting so late eve uh

1013
00:36:58,880 --> 00:37:01,680
we're we need to send this to to the to

1014
00:37:01,680 --> 00:37:02,960
the chat

1015
00:37:02,960 --> 00:37:05,680
and uh offline to the list um because

1016
00:37:05,680 --> 00:37:07,040
we're already

1017
00:37:07,040 --> 00:37:09,920
sounds fine scott thank you so much for

1018
00:37:09,920 --> 00:37:12,240
coming in and um initiating the

1019
00:37:12,240 --> 00:37:14,160
discussion about this no doubt there

1020
00:37:14,160 --> 00:37:16,240
will be further conversation

1021
00:37:16,240 --> 00:37:18,079
so thank you very much okay thank you

1022
00:37:18,079 --> 00:37:20,480
all and and please feel free to contact

1023
00:37:20,480 --> 00:37:22,560
me if uh you know whatever is going on

1024
00:37:22,560 --> 00:37:23,920
in the chat let me know if there's

1025
00:37:23,920 --> 00:37:25,680
anything i can help with

1026
00:37:25,680 --> 00:37:27,200
thanks very much and you have access to

1027
00:37:27,200 --> 00:37:29,200
the chat so you can peruse what's been

1028
00:37:29,200 --> 00:37:31,040
stated there and the and the chat

1029
00:37:31,040 --> 00:37:33,680
actually gets posted after the fact okay

1030
00:37:33,680 --> 00:37:35,520
when say um

1031
00:37:35,520 --> 00:37:37,119
over to you

1032
00:37:37,119 --> 00:37:41,000
you're our next presenter

1033
00:37:52,000 --> 00:37:53,440
here we

1034
00:37:53,440 --> 00:37:55,520
we viewed our working data center so we

1035
00:37:55,520 --> 00:37:58,560
have the flexibility to customize

1036
00:37:58,560 --> 00:37:59,680
everything

1037
00:37:59,680 --> 00:38:02,000
and it's different from the internet

1038
00:38:02,000 --> 00:38:04,480
i'm happy to introduce our work in

1039
00:38:04,480 --> 00:38:06,800
network application for multi-tenant

1040
00:38:06,800 --> 00:38:09,280
learning so this is a joint work from

1041
00:38:09,280 --> 00:38:11,040
colleagues from chiang mai university

1042
00:38:11,040 --> 00:38:14,590
and the university of wisconsin medicine

1043
00:38:14,590 --> 00:38:16,800
[Music]

1044
00:38:16,800 --> 00:38:18,960
machine learning algorithms is used in

1045
00:38:18,960 --> 00:38:21,599
various scenarios such as uh natural

1046
00:38:21,599 --> 00:38:24,560
light reprocessing uh computer reading

1047
00:38:24,560 --> 00:38:27,119
so with the increasing size of the data

1048
00:38:27,119 --> 00:38:29,920
set and the model so the algorithm is

1049
00:38:29,920 --> 00:38:33,839
implemented as a as a distributed system

1050
00:38:33,839 --> 00:38:36,000
so the ps architecture is a typical

1051
00:38:36,000 --> 00:38:38,400
architecture that can support this kind

1052
00:38:38,400 --> 00:38:40,240
of distributed

1053
00:38:40,240 --> 00:38:41,920
system

1054
00:38:41,920 --> 00:38:45,040
in the ps architecture the data set is

1055
00:38:45,040 --> 00:38:47,920
partitioned and put on multiple workers

1056
00:38:47,920 --> 00:38:50,400
so in in the iteration

1057
00:38:50,400 --> 00:38:52,800
initiation of the algorithm

1058
00:38:52,800 --> 00:38:55,359
each worker would compute the gradients

1059
00:38:55,359 --> 00:38:57,599
all workers gradients

1060
00:38:57,599 --> 00:38:59,680
are aggregated and

1061
00:38:59,680 --> 00:39:02,560
used to update the model random

1062
00:39:02,560 --> 00:39:04,400
algorithm get into the next study

1063
00:39:04,400 --> 00:39:06,880
iteration

1064
00:39:07,280 --> 00:39:08,960
in the ps architecture

1065
00:39:08,960 --> 00:39:10,800
all workers gradients

1066
00:39:10,800 --> 00:39:13,760
are sent to us to a parameter server get

1067
00:39:13,760 --> 00:39:17,040
aggregated and the result is sent back

1068
00:39:17,040 --> 00:39:19,839
to each worker

1069
00:39:20,480 --> 00:39:21,440
so

1070
00:39:21,440 --> 00:39:24,560
this kind of or many-to-one transmission

1071
00:39:24,560 --> 00:39:27,280
could possibly

1072
00:39:27,280 --> 00:39:29,680
cause put on that in the transmission so

1073
00:39:29,680 --> 00:39:31,599
they are studying showing that the

1074
00:39:31,599 --> 00:39:34,880
performance degradation of such kind

1075
00:39:34,880 --> 00:39:39,040
of uh such kind of bottleneck

1076
00:39:39,040 --> 00:39:41,440
so recently the chain or network

1077
00:39:41,440 --> 00:39:43,920
competition provide an opportunity to

1078
00:39:43,920 --> 00:39:45,359
solve this problem

1079
00:39:45,359 --> 00:39:48,160
the programmable switches offer in

1080
00:39:48,160 --> 00:39:50,480
intrinsic packet processing so the

1081
00:39:50,480 --> 00:39:52,880
switch pipeline has registers which can

1082
00:39:52,880 --> 00:39:55,520
store the network states and the user

1083
00:39:55,520 --> 00:39:58,240
specified programs can be loaded to

1084
00:39:58,240 --> 00:40:00,880
customize the packet processing

1085
00:40:00,880 --> 00:40:03,280
so there is opportunity to move the

1086
00:40:03,280 --> 00:40:04,640
gradient

1087
00:40:04,640 --> 00:40:07,040
aggregation into the network which can

1088
00:40:07,040 --> 00:40:09,040
reduce the communication and

1089
00:40:09,040 --> 00:40:13,680
consequently the overall chain time

1090
00:40:14,640 --> 00:40:16,960
there exists there is an existing work

1091
00:40:16,960 --> 00:40:19,599
that applies in network of

1092
00:40:19,599 --> 00:40:23,280
aggregation to uh to distributed chain

1093
00:40:23,280 --> 00:40:25,040
html

1094
00:40:25,040 --> 00:40:27,520
this work target a single chart a single

1095
00:40:27,520 --> 00:40:30,079
rack setting so there is a wrap connect

1096
00:40:30,079 --> 00:40:32,960
multiple workers so the switch is

1097
00:40:32,960 --> 00:40:35,839
offload the ps is offloaded to the

1098
00:40:35,839 --> 00:40:37,119
switch

1099
00:40:37,119 --> 00:40:40,000
so the workers gradients are aggregated

1100
00:40:40,000 --> 00:40:42,160
in the switch

1101
00:40:42,160 --> 00:40:44,560
to support micro jobs the switch

1102
00:40:44,560 --> 00:40:47,520
resource is statically partitioned and

1103
00:40:47,520 --> 00:40:50,000
assigned to each job

1104
00:40:50,000 --> 00:40:53,280
so we think this uh network aggregation

1105
00:40:53,280 --> 00:40:55,920
can be further improved

1106
00:40:55,920 --> 00:40:58,240
uh because in

1107
00:40:58,240 --> 00:41:01,440
in much in in motor training the

1108
00:41:01,440 --> 00:41:04,319
algorithm takes uh takes efforts to

1109
00:41:04,319 --> 00:41:08,240
compute and communicate each iteration

1110
00:41:08,240 --> 00:41:11,359
so for static allocation when the job is

1111
00:41:11,359 --> 00:41:15,040
in um is in competition time this switch

1112
00:41:15,040 --> 00:41:19,839
memory would be a email would be a list

1113
00:41:19,839 --> 00:41:20,880
and

1114
00:41:20,880 --> 00:41:23,119
this design assumes the topology is a

1115
00:41:23,119 --> 00:41:24,880
star topology with a switch in the

1116
00:41:24,880 --> 00:41:28,160
middle connecting multiple workers so

1117
00:41:28,160 --> 00:41:30,240
it should be extended to multi

1118
00:41:30,240 --> 00:41:32,960
multi-rack setting

1119
00:41:32,960 --> 00:41:35,359
um for example in bird training there

1120
00:41:35,359 --> 00:41:37,520
are tens or hundreds of nodes which

1121
00:41:37,520 --> 00:41:40,240
cannot be put into a single rack

1122
00:41:40,240 --> 00:41:43,440
and in addition uh static partition add

1123
00:41:43,440 --> 00:41:46,079
complexity to integrate the

1124
00:41:46,079 --> 00:41:47,520
switch memory

1125
00:41:47,520 --> 00:41:51,200
allocation with the control plane

1126
00:41:51,440 --> 00:41:53,760
so we propose our solution with three

1127
00:41:53,760 --> 00:41:56,319
key goals uh the first goal is we should

1128
00:41:56,319 --> 00:41:57,599
uh

1129
00:41:57,599 --> 00:41:59,359
maximumly uh

1130
00:41:59,359 --> 00:42:01,760
you use the network condition for

1131
00:42:01,760 --> 00:42:05,200
performance gain on targeting the

1132
00:42:05,200 --> 00:42:07,040
production network

1133
00:42:07,040 --> 00:42:09,839
we should the solution should support

1134
00:42:09,839 --> 00:42:12,000
multiple simultaneous job change

1135
00:42:12,000 --> 00:42:14,480
efficiently and it should also support a

1136
00:42:14,480 --> 00:42:17,599
multi-rack quality

1137
00:42:18,480 --> 00:42:20,240
we designed our solution

1138
00:42:20,240 --> 00:42:21,520
atp

1139
00:42:21,520 --> 00:42:23,200
short for aggregation transmission

1140
00:42:23,200 --> 00:42:24,480
protocol

1141
00:42:24,480 --> 00:42:28,079
with the multi-tenant and multi-rack

1142
00:42:28,079 --> 00:42:30,720
as the requirements and we additionally

1143
00:42:30,720 --> 00:42:33,040
saw extra problems with which can

1144
00:42:33,040 --> 00:42:36,640
further improve the performance

1145
00:42:37,920 --> 00:42:41,200
so in adp the switch memory is organized

1146
00:42:41,200 --> 00:42:45,200
as a real-world details

1147
00:42:45,200 --> 00:42:48,160
then each job has a job id with multiple

1148
00:42:48,160 --> 00:42:52,160
workers and each worker has a sequence

1149
00:42:52,160 --> 00:42:55,040
each worker's gradient is organized as a

1150
00:42:55,040 --> 00:42:58,759
sequence of packets

1151
00:42:59,839 --> 00:43:01,040
so

1152
00:43:01,040 --> 00:43:03,839
to support multiple tenants we do not

1153
00:43:03,839 --> 00:43:06,079
uh statically partition the switch

1154
00:43:06,079 --> 00:43:09,200
memory instead we organize it as a whole

1155
00:43:09,200 --> 00:43:13,440
array as a as a shared resource pool

1156
00:43:13,440 --> 00:43:15,440
then

1157
00:43:15,440 --> 00:43:18,480
therefore for aggregation uh each packet

1158
00:43:18,480 --> 00:43:22,800
is randomly hashed to a unit aggregator

1159
00:43:22,800 --> 00:43:23,760
so

1160
00:43:23,760 --> 00:43:25,760
the

1161
00:43:25,760 --> 00:43:28,079
assignment use a hash function to hash

1162
00:43:28,079 --> 00:43:31,359
the job id and sequence number so for

1163
00:43:31,359 --> 00:43:34,880
four packets from one job with the same

1164
00:43:34,880 --> 00:43:36,400
sequence number but from different

1165
00:43:36,400 --> 00:43:39,119
workers they would be hashed to the same

1166
00:43:39,119 --> 00:43:42,000
position and get a repeated there

1167
00:43:42,000 --> 00:43:44,640
so the the vision result is sent to the

1168
00:43:44,640 --> 00:43:48,480
ps then the ps uh return the result to

1169
00:43:48,480 --> 00:43:49,680
the switch

1170
00:43:49,680 --> 00:43:51,599
it would do two things

1171
00:43:51,599 --> 00:43:53,520
first it would de-allocate the switch

1172
00:43:53,520 --> 00:43:54,400
memory

1173
00:43:54,400 --> 00:43:57,200
then the packets are

1174
00:43:57,200 --> 00:43:59,760
is multicast back to

1175
00:43:59,760 --> 00:44:02,319
all the workers

1176
00:44:02,319 --> 00:44:05,359
so we also overcome to or overcome two

1177
00:44:05,359 --> 00:44:07,359
challenges first

1178
00:44:07,359 --> 00:44:09,920
because the switch the aggregator

1179
00:44:09,920 --> 00:44:12,079
assignment is decentralized it's

1180
00:44:12,079 --> 00:44:15,280
possible to to have hash clearance

1181
00:44:15,280 --> 00:44:18,079
uh for example um

1182
00:44:18,079 --> 00:44:21,680
job tools gradient uh packet is a is a

1183
00:44:21,680 --> 00:44:24,800
assigned uh it's hashtag keeper which is

1184
00:44:24,800 --> 00:44:27,520
occupied by another job job three in

1185
00:44:27,520 --> 00:44:31,040
this case uh all the packets would pass

1186
00:44:31,040 --> 00:44:34,480
through the switch and arrive at the on

1187
00:44:34,480 --> 00:44:38,000
the ps the ps do the aggregation and

1188
00:44:38,000 --> 00:44:40,319
send the result back to the switch

1189
00:44:40,319 --> 00:44:43,040
the aggregator is not the allocated part

1190
00:44:43,040 --> 00:44:44,720
of the result is sent back to the

1191
00:44:44,720 --> 00:44:45,760
workers

1192
00:44:45,760 --> 00:44:48,720
so the switch service agreement service

1193
00:44:48,720 --> 00:44:51,359
is the best ever and the ps provides a

1194
00:44:51,359 --> 00:44:52,480
fallback

1195
00:44:52,480 --> 00:44:55,920
to handle the corner cases

1196
00:44:56,800 --> 00:44:58,720
there is another case

1197
00:44:58,720 --> 00:45:00,560
of inconsistency

1198
00:45:00,560 --> 00:45:01,839
or

1199
00:45:01,839 --> 00:45:04,160
membership inconsistency it causes

1200
00:45:04,160 --> 00:45:06,720
incomplete aggregation

1201
00:45:06,720 --> 00:45:08,319
for example

1202
00:45:08,319 --> 00:45:11,200
the first packet is sent to a aggregator

1203
00:45:11,200 --> 00:45:13,839
which is reserved by drop three

1204
00:45:13,839 --> 00:45:15,200
then

1205
00:45:15,200 --> 00:45:17,760
this packet it passes through passes

1206
00:45:17,760 --> 00:45:19,280
through to the ps

1207
00:45:19,280 --> 00:45:22,720
but at this time job3 completes its

1208
00:45:22,720 --> 00:45:25,119
application and deallocated the switch

1209
00:45:25,119 --> 00:45:27,599
memory the grid guitar the remaining

1210
00:45:27,599 --> 00:45:28,640
package

1211
00:45:28,640 --> 00:45:30,240
is sent to the

1212
00:45:30,240 --> 00:45:33,440
aggregator and the aggregated there so

1213
00:45:33,440 --> 00:45:36,800
both the switch and the ps uh have a

1214
00:45:36,800 --> 00:45:38,880
partial result they are waiting for each

1215
00:45:38,880 --> 00:45:40,160
other this

1216
00:45:40,160 --> 00:45:42,400
is a deadlock and uh they are

1217
00:45:42,400 --> 00:45:44,640
what's worse is that there is no return

1218
00:45:44,640 --> 00:45:46,880
packet of results to dialogue this

1219
00:45:46,880 --> 00:45:48,240
switch memory

1220
00:45:48,240 --> 00:45:51,920
causing a memory leak problem

1221
00:45:51,920 --> 00:45:53,920
so we design a re-transmission antenna

1222
00:45:53,920 --> 00:45:56,720
and host with the duplication

1223
00:45:56,720 --> 00:45:59,119
in the switch

1224
00:45:59,119 --> 00:46:03,200
so for for packet a uh it has that uh it

1225
00:46:03,200 --> 00:46:06,160
is a stock under the switch and the ps

1226
00:46:06,160 --> 00:46:07,440
but it's

1227
00:46:07,440 --> 00:46:10,800
uh it's a following package uh may be

1228
00:46:10,800 --> 00:46:12,720
maybe successfully aggregated and

1229
00:46:12,720 --> 00:46:14,880
returned so

1230
00:46:14,880 --> 00:46:17,839
if the sender observed reduplicated the

1231
00:46:17,839 --> 00:46:20,160
ack the result packet

1232
00:46:20,160 --> 00:46:22,800
it would re-transmit the missing

1233
00:46:22,800 --> 00:46:25,599
the packet that is missing the result

1234
00:46:25,599 --> 00:46:28,720
it will all workers would retransmit a

1235
00:46:28,720 --> 00:46:30,400
so um

1236
00:46:30,400 --> 00:46:33,280
the the regulator is a has a bitmap to

1237
00:46:33,280 --> 00:46:35,200
track which worker has already

1238
00:46:35,200 --> 00:46:39,040
participated the aggregation so a2 to a

1239
00:46:39,040 --> 00:46:41,920
n would not be aggregated twice it would

1240
00:46:41,920 --> 00:46:43,280
be

1241
00:46:43,280 --> 00:46:46,240
duplicated and the a1 is added to the

1242
00:46:46,240 --> 00:46:48,640
partial results so we get a complete

1243
00:46:48,640 --> 00:46:51,520
result which is sent to the ps and the

1244
00:46:51,520 --> 00:46:54,240
reply back

1245
00:46:54,400 --> 00:46:57,200
so with this design we have a uh correct

1246
00:46:57,200 --> 00:46:58,720
protocol

1247
00:46:58,720 --> 00:47:01,280
that can guarantee the um the

1248
00:47:01,280 --> 00:47:02,800
correctness

1249
00:47:02,800 --> 00:47:05,920
uh to support microreact aggregation uh

1250
00:47:05,920 --> 00:47:08,319
we need a aggregation hierarchy in the

1251
00:47:08,319 --> 00:47:09,520
topology

1252
00:47:09,520 --> 00:47:11,200
ideally this

1253
00:47:11,200 --> 00:47:14,319
aggregation hierarchy can be uh can be

1254
00:47:14,319 --> 00:47:17,440
of many levels um we consider the data

1255
00:47:17,440 --> 00:47:18,960
center topology

1256
00:47:18,960 --> 00:47:21,520
in the data center topology the core

1257
00:47:21,520 --> 00:47:25,280
network has multiple passes and it uses

1258
00:47:25,280 --> 00:47:28,559
non-deterministic locking so we

1259
00:47:28,559 --> 00:47:31,920
it's not easy for us to pre-compute the

1260
00:47:31,920 --> 00:47:34,880
hierarchy in the topology so we only

1261
00:47:34,880 --> 00:47:36,800
implement the objection in the course

1262
00:47:36,800 --> 00:47:38,559
torque switches because there are we

1263
00:47:38,559 --> 00:47:40,000
points that the

1264
00:47:40,000 --> 00:47:42,160
uh gradient packets

1265
00:47:42,160 --> 00:47:43,599
must pass

1266
00:47:43,599 --> 00:47:46,960
must pass must traverse

1267
00:47:46,960 --> 00:47:48,319
currently we have a two level

1268
00:47:48,319 --> 00:47:51,200
aggregation design

1269
00:47:51,280 --> 00:47:54,160
so uh all the packets would aggregate at

1270
00:47:54,160 --> 00:47:56,960
the walkers tour first then they are

1271
00:47:56,960 --> 00:47:59,760
sent to the ps4 and the second level

1272
00:47:59,760 --> 00:48:02,160
aggregation is happening at the ps4 the

1273
00:48:02,160 --> 00:48:04,640
final result is send it to the ps

1274
00:48:04,640 --> 00:48:06,480
um

1275
00:48:06,480 --> 00:48:09,200
so in this uh in this

1276
00:48:09,200 --> 00:48:11,680
multiple racks part we also overcome

1277
00:48:11,680 --> 00:48:15,520
another challenge because uh um

1278
00:48:15,520 --> 00:48:17,359
the higher level switch this is the

1279
00:48:17,359 --> 00:48:19,280
hierarch aggregation hierarchy or the

1280
00:48:19,280 --> 00:48:23,119
previous uh in the paris page so uh in

1281
00:48:23,119 --> 00:48:24,880
each of the guitar we have a big map

1282
00:48:24,880 --> 00:48:27,599
which uh where each b that he knows uh i

1283
00:48:27,599 --> 00:48:30,559
always children um but so there is one

1284
00:48:30,559 --> 00:48:32,800
bit of four in the switch two which

1285
00:48:32,800 --> 00:48:35,760
indicated the uh switch to zero but the

1286
00:48:35,760 --> 00:48:38,559
one meter here cannot denote the all the

1287
00:48:38,559 --> 00:48:41,280
possible aggregations these always

1288
00:48:41,280 --> 00:48:43,040
work because there are two workers there

1289
00:48:43,040 --> 00:48:45,520
are four possible agreements these

1290
00:48:45,520 --> 00:48:49,920
um so we overcome this challenge uh that

1291
00:48:49,920 --> 00:48:52,640
by falling back to the ps we use the one

1292
00:48:52,640 --> 00:48:55,359
in the higher level switch to denote the

1293
00:48:55,359 --> 00:48:56,720
successful

1294
00:48:56,720 --> 00:48:58,480
aggregation of the whole

1295
00:48:58,480 --> 00:48:59,680
sub tree

1296
00:48:59,680 --> 00:49:02,240
and in all other cases we regard it as a

1297
00:49:02,240 --> 00:49:05,440
feeder and send it to the ps for back to

1298
00:49:05,440 --> 00:49:08,559
the ps processing

1299
00:49:09,200 --> 00:49:10,400
um

1300
00:49:10,400 --> 00:49:12,960
so uh the previous design also overcome

1301
00:49:12,960 --> 00:49:14,160
other challenge

1302
00:49:14,160 --> 00:49:17,359
other challenges on our reliability

1303
00:49:17,359 --> 00:49:19,680
when the the re-transmission with the

1304
00:49:19,680 --> 00:49:22,800
duplication can also handle the packet

1305
00:49:22,800 --> 00:49:25,520
loss correctly and uh one pack loss

1306
00:49:25,520 --> 00:49:27,280
happens in the host of the

1307
00:49:27,280 --> 00:49:28,720
re-transmitter and

1308
00:49:28,720 --> 00:49:31,839
the bitmap in the switch can guarantee

1309
00:49:31,839 --> 00:49:35,040
there is exactly wax application

1310
00:49:35,040 --> 00:49:36,960
and we also redesigned the congestion

1311
00:49:36,960 --> 00:49:40,480
control uh the essential problem is

1312
00:49:40,480 --> 00:49:42,559
what should be the congestion signal

1313
00:49:42,559 --> 00:49:45,520
because some many packets are consumed

1314
00:49:45,520 --> 00:49:47,680
in the switch so they do not have round

1315
00:49:47,680 --> 00:49:50,640
sweep time so there is no rtt we use the

1316
00:49:50,640 --> 00:49:53,760
ecl as the congestion signal use eimd

1317
00:49:53,760 --> 00:49:56,640
for congestion control

1318
00:49:56,640 --> 00:49:57,440
and

1319
00:49:57,440 --> 00:49:59,599
on the in the host the switch can only

1320
00:49:59,599 --> 00:50:02,240
compute on integrals uh

1321
00:50:02,240 --> 00:50:04,480
it does not support floating point

1322
00:50:04,480 --> 00:50:07,760
arithmetic so we do compensation uh we

1323
00:50:07,760 --> 00:50:10,720
scale with scale the float point block

1324
00:50:10,720 --> 00:50:13,839
points two integers bioscanning factor

1325
00:50:13,839 --> 00:50:14,960
and uh

1326
00:50:14,960 --> 00:50:18,079
this because we skills uh the floating

1327
00:50:18,079 --> 00:50:21,119
numbers it's possible to have overflow

1328
00:50:21,119 --> 00:50:23,680
at the switch uh to handle this problem

1329
00:50:23,680 --> 00:50:26,160
we just use the fallback mechanism we

1330
00:50:26,160 --> 00:50:29,520
reuse the fallback magnesium when switch

1331
00:50:29,520 --> 00:50:30,720
detect

1332
00:50:30,720 --> 00:50:32,480
detects uh

1333
00:50:32,480 --> 00:50:33,920
our flow

1334
00:50:33,920 --> 00:50:35,359
overflow

1335
00:50:35,359 --> 00:50:38,079
the then host will fall back to the ps

1336
00:50:38,079 --> 00:50:41,599
aggregation with the floating part of

1337
00:50:41,599 --> 00:50:44,240
arithmetic

1338
00:50:44,720 --> 00:50:47,920
so we implemented the uh user space

1339
00:50:47,920 --> 00:50:49,680
networking stack

1340
00:50:49,680 --> 00:50:53,680
on hosts and we implemented a network of

1341
00:50:53,680 --> 00:50:57,200
rehab services in a switch

1342
00:50:57,520 --> 00:50:59,200
so in the evaluation we have nice

1343
00:50:59,200 --> 00:51:02,000
servers so uh little automatic workers

1344
00:51:02,000 --> 00:51:05,599
and one and the ps we compare atp with

1345
00:51:05,599 --> 00:51:08,160
other piece like pictures such as ps

1346
00:51:08,160 --> 00:51:09,839
architecture with different networking

1347
00:51:09,839 --> 00:51:11,599
stack and the ring or reduced

1348
00:51:11,599 --> 00:51:13,760
architecture with different steps

1349
00:51:13,760 --> 00:51:15,760
we use things rupert and time accuracy

1350
00:51:15,760 --> 00:51:17,040
as the method

1351
00:51:17,040 --> 00:51:19,359
we run workloads of

1352
00:51:19,359 --> 00:51:24,400
models in image imagenet contest

1353
00:51:25,280 --> 00:51:26,960
for a single job we showed our

1354
00:51:26,960 --> 00:51:29,920
performance of a single drop

1355
00:51:29,920 --> 00:51:32,720
so we run different models and measure

1356
00:51:32,720 --> 00:51:35,200
the chinese rupees we compare different

1357
00:51:35,200 --> 00:51:36,480
architectures

1358
00:51:36,480 --> 00:51:37,920
in each group

1359
00:51:37,920 --> 00:51:39,920
we have three observations

1360
00:51:39,920 --> 00:51:40,880
first

1361
00:51:40,880 --> 00:51:45,040
atp in all model trim etpr performs

1362
00:51:45,040 --> 00:51:47,040
other approaches

1363
00:51:47,040 --> 00:51:49,040
sometimes it's the performance skin is

1364
00:51:49,040 --> 00:51:50,400
very significant

1365
00:51:50,400 --> 00:51:54,000
atp can benefit the network intensive uh

1366
00:51:54,000 --> 00:51:56,160
workloads more than the

1367
00:51:56,160 --> 00:51:58,640
competition intensive workloads

1368
00:51:58,640 --> 00:52:00,640
and comparing atp

1369
00:52:00,640 --> 00:52:03,599
with the ring or reduce with hardware

1370
00:52:03,599 --> 00:52:05,040
acceleration

1371
00:52:05,040 --> 00:52:06,319
atp

1372
00:52:06,319 --> 00:52:08,960
is slightly better than ring or reduce

1373
00:52:08,960 --> 00:52:11,440
but more importantly it only uses half

1374
00:52:11,440 --> 00:52:15,200
of the batteries that we already use

1375
00:52:15,680 --> 00:52:17,280
then we show the performance of multiple

1376
00:52:17,280 --> 00:52:21,040
jobs uh we compare atp with the static

1377
00:52:21,040 --> 00:52:24,400
memory allocation in a static approach

1378
00:52:24,400 --> 00:52:28,240
we evenly partition the solution

1379
00:52:28,240 --> 00:52:31,040
are you close to conclusion

1380
00:52:31,040 --> 00:52:33,040
yes so thank you

1381
00:52:33,040 --> 00:52:36,000
thank you yeah

1382
00:52:36,000 --> 00:52:39,040
okay so we tune the switch memory for

1383
00:52:39,040 --> 00:52:41,920
three jobs and uh get that

1384
00:52:41,920 --> 00:52:44,079
throughput the peak throughput then we

1385
00:52:44,079 --> 00:52:47,599
reduce the memory to cause contentions

1386
00:52:47,599 --> 00:52:49,920
we can see dynamic allocation

1387
00:52:49,920 --> 00:52:52,559
degrees more greasefully than statical

1388
00:52:52,559 --> 00:52:54,800
approach

1389
00:52:54,800 --> 00:52:55,760
okay

1390
00:52:55,760 --> 00:52:57,680
there are more evaluations

1391
00:52:57,680 --> 00:53:00,240
so in atp we co-designed the host and

1392
00:53:00,240 --> 00:53:02,720
the switch logic the switch to service

1393
00:53:02,720 --> 00:53:05,119
security service is best effort it has

1394
00:53:05,119 --> 00:53:07,040
dynamic resource allocation

1395
00:53:07,040 --> 00:53:09,200
the host networking stack

1396
00:53:09,200 --> 00:53:11,200
has fallback mechanisms for correctness

1397
00:53:11,200 --> 00:53:13,359
guarantee and also reliability and

1398
00:53:13,359 --> 00:53:14,800
congestion control

1399
00:53:14,800 --> 00:53:17,680
to ml jobs such a design can provide

1400
00:53:17,680 --> 00:53:19,680
performance skill and correctness and we

1401
00:53:19,680 --> 00:53:21,920
achieve our goal of multi-tenant but to

1402
00:53:21,920 --> 00:53:24,960
draw support

1403
00:53:25,359 --> 00:53:28,079
um so there is takeaway so usually when

1404
00:53:28,079 --> 00:53:29,280
we

1405
00:53:29,280 --> 00:53:31,040
do a network competition usually we can

1406
00:53:31,040 --> 00:53:33,119
get a very significant performance scan

1407
00:53:33,119 --> 00:53:35,520
switch computes much faster than a

1408
00:53:35,520 --> 00:53:36,720
server

1409
00:53:36,720 --> 00:53:38,559
but correctness guarantee is very

1410
00:53:38,559 --> 00:53:40,480
difficult because the network

1411
00:53:40,480 --> 00:53:42,880
competition introduces new schematic

1412
00:53:42,880 --> 00:53:45,119
into the network for example practice

1413
00:53:45,119 --> 00:53:46,400
can be consumed

1414
00:53:46,400 --> 00:53:48,800
instead of lost then hosts need to

1415
00:53:48,800 --> 00:53:50,880
distinguish these cases

1416
00:53:50,880 --> 00:53:53,599
and usually we do switch and host the

1417
00:53:53,599 --> 00:53:55,040
co-design

1418
00:53:55,040 --> 00:53:57,440
so we can get both credits and perform

1419
00:53:57,440 --> 00:54:00,480
skin so for different applications we

1420
00:54:00,480 --> 00:54:01,520
can

1421
00:54:01,520 --> 00:54:04,720
we can make different designs

1422
00:54:04,720 --> 00:54:06,559
that's all about my thought i'm happy

1423
00:54:06,559 --> 00:54:09,800
for questions

1424
00:54:14,160 --> 00:54:17,040
thank you very much for this um

1425
00:54:17,040 --> 00:54:19,839
i think we um

1426
00:54:19,839 --> 00:54:21,359
are you know we're

1427
00:54:21,359 --> 00:54:23,119
it was great the first discussions were

1428
00:54:23,119 --> 00:54:24,640
great so we're losing a little bit on

1429
00:54:24,640 --> 00:54:27,040
time uh maybe we can send all the

1430
00:54:27,040 --> 00:54:30,160
questions to your paper uh either on the

1431
00:54:30,160 --> 00:54:32,400
chat or on the mailing list

1432
00:54:32,400 --> 00:54:34,800
thank you very much for this uh and dirk

1433
00:54:34,800 --> 00:54:36,960
you're next

1434
00:54:36,960 --> 00:54:40,640
yeah uh i need to stop

1435
00:54:42,559 --> 00:54:46,000
okay let me see how i can

1436
00:54:46,640 --> 00:54:49,280
get to my slides so i'm

1437
00:54:49,280 --> 00:54:51,280
trying to use to show the slides that

1438
00:54:51,280 --> 00:54:55,040
are uploaded to the data tracker

1439
00:54:55,150 --> 00:54:57,599
[Music]

1440
00:54:57,599 --> 00:54:59,440
do you have to put them up or how does

1441
00:54:59,440 --> 00:55:02,760
it work again

1442
00:55:06,720 --> 00:55:09,760
all right it says no slides available

1443
00:55:09,760 --> 00:55:11,200
you know what in the case let me do

1444
00:55:11,200 --> 00:55:13,839
screen sharing

1445
00:55:16,640 --> 00:55:18,000
here you go

1446
00:55:18,000 --> 00:55:21,160
thank you

1447
00:55:34,000 --> 00:55:37,680
you see my slice okay great

1448
00:55:38,079 --> 00:55:40,480
okay yeah thanks for inviting me it's uh

1449
00:55:40,480 --> 00:55:43,040
great being with you again um if only

1450
00:55:43,040 --> 00:55:46,079
ritual but um

1451
00:55:46,160 --> 00:55:46,839
let

1452
00:55:46,839 --> 00:55:50,640
me um tell you about some some recent

1453
00:55:50,640 --> 00:55:52,000
work um

1454
00:55:52,000 --> 00:55:54,319
on a system that we call information

1455
00:55:54,319 --> 00:55:57,359
centric data flow that

1456
00:55:57,359 --> 00:55:59,760
is a product of our

1457
00:55:59,760 --> 00:56:02,640
picollo research project that

1458
00:56:02,640 --> 00:56:04,000
investigates

1459
00:56:04,000 --> 00:56:05,920
there are new ways for

1460
00:56:05,920 --> 00:56:08,640
integrating computing and networking

1461
00:56:08,640 --> 00:56:12,160
so in some sense this could be seen as a

1462
00:56:12,160 --> 00:56:15,359
customer to a system like i'm the one

1463
00:56:15,359 --> 00:56:19,040
that that's got um talked about

1464
00:56:19,040 --> 00:56:20,720
um

1465
00:56:20,720 --> 00:56:22,640
so let's see and this is john worked

1466
00:56:22,640 --> 00:56:25,280
with my students laura alvardani and tm

1467
00:56:25,280 --> 00:56:27,680
reindeers

1468
00:56:27,680 --> 00:56:29,119
so in coin

1469
00:56:29,119 --> 00:56:30,640
so far um

1470
00:56:30,640 --> 00:56:32,160
in my view we have mainly been

1471
00:56:32,160 --> 00:56:35,839
discussing like two strengths of

1472
00:56:35,839 --> 00:56:38,240
of work so like one is coming from like

1473
00:56:38,240 --> 00:56:40,319
data plane probability

1474
00:56:40,319 --> 00:56:43,040
and then seeing how this could be put to

1475
00:56:43,040 --> 00:56:46,000
you know a useful purpose for um you

1476
00:56:46,000 --> 00:56:49,760
know having distributed applications and

1477
00:56:49,760 --> 00:56:51,680
improving their performance and so on

1478
00:56:51,680 --> 00:56:54,079
maybe also

1479
00:56:54,079 --> 00:56:57,440
evolving some protocols to support

1480
00:56:57,440 --> 00:56:59,839
certain use cases better

1481
00:56:59,839 --> 00:57:01,760
um the other strand

1482
00:57:01,760 --> 00:57:03,760
you could say is coming but from the

1483
00:57:03,760 --> 00:57:06,160
distributed computing um where we say

1484
00:57:06,160 --> 00:57:08,000
okay what can we learn from this will be

1485
00:57:08,000 --> 00:57:09,680
computing and how does it

1486
00:57:09,680 --> 00:57:12,400
affect our view on networking and maybe

1487
00:57:12,400 --> 00:57:15,440
then re-imagine the relationship and

1488
00:57:15,440 --> 00:57:16,640
in the end have more programmable

1489
00:57:16,640 --> 00:57:19,200
systems also like the ones that um scott

1490
00:57:19,200 --> 00:57:20,720
talked about

1491
00:57:20,720 --> 00:57:23,920
and so i think the the like the thesis

1492
00:57:23,920 --> 00:57:27,200
of this group in in general is

1493
00:57:27,200 --> 00:57:29,119
maybe is there some confluence at the

1494
00:57:29,119 --> 00:57:30,559
end

1495
00:57:30,559 --> 00:57:33,280
of these two strains

1496
00:57:33,280 --> 00:57:35,680
so this work here is more on the on the

1497
00:57:35,680 --> 00:57:39,119
lower strand here and so this is a paper

1498
00:57:39,119 --> 00:57:41,520
that we presented

1499
00:57:41,520 --> 00:57:42,480
at the

1500
00:57:42,480 --> 00:57:45,040
acm icn conference this year and there's

1501
00:57:45,040 --> 00:57:48,720
also an associated demo um

1502
00:57:48,720 --> 00:57:50,640
and so i hope to

1503
00:57:50,640 --> 00:57:52,400
get you interested in this and then you

1504
00:57:52,400 --> 00:57:54,880
can i invite you to check out the paper

1505
00:57:54,880 --> 00:57:58,079
and the demo video um after this

1506
00:57:58,079 --> 00:58:01,200
so in distributed computing um we know

1507
00:58:01,200 --> 00:58:02,640
that there are many different types of

1508
00:58:02,640 --> 00:58:04,160
interactions so like

1509
00:58:04,160 --> 00:58:06,480
simple message passing remote method

1510
00:58:06,480 --> 00:58:08,559
indication data sets implementation key

1511
00:58:08,559 --> 00:58:11,040
radio stores and so on

1512
00:58:11,040 --> 00:58:12,240
and

1513
00:58:12,240 --> 00:58:13,040
so

1514
00:58:13,040 --> 00:58:16,240
i think some itfs ago

1515
00:58:16,240 --> 00:58:18,000
we presented

1516
00:58:18,000 --> 00:58:20,079
a system that we called compute first

1517
00:58:20,079 --> 00:58:21,280
networking

1518
00:58:21,280 --> 00:58:23,520
that was essentially

1519
00:58:23,520 --> 00:58:26,799
a um yeah too incomplete really general

1520
00:58:26,799 --> 00:58:29,680
distributed computing system um

1521
00:58:29,680 --> 00:58:32,720
based on an icn

1522
00:58:32,720 --> 00:58:35,440
um today i want to talk about a

1523
00:58:35,440 --> 00:58:38,720
like competitively simple abstraction so

1524
00:58:38,720 --> 00:58:40,640
data flow which is really a

1525
00:58:40,640 --> 00:58:42,640
structured um

1526
00:58:42,640 --> 00:58:45,359
direct direct and basically graph based

1527
00:58:45,359 --> 00:58:46,799
uh

1528
00:58:46,799 --> 00:58:48,799
data processing approach

1529
00:58:48,799 --> 00:58:51,359
where you have a system um say nodes in

1530
00:58:51,359 --> 00:58:53,119
the in the network

1531
00:58:53,119 --> 00:58:56,079
and um like

1532
00:58:56,079 --> 00:58:59,200
data objects that are sourced um at some

1533
00:58:59,200 --> 00:59:01,200
some endpoint or in some node

1534
00:59:01,200 --> 00:59:02,880
trigger computation and other nodes

1535
00:59:02,880 --> 00:59:05,280
which then you know

1536
00:59:05,280 --> 00:59:06,720
leads to new designs that trigger

1537
00:59:06,720 --> 00:59:08,880
computation somewhere else

1538
00:59:08,880 --> 00:59:12,000
and so this deck here

1539
00:59:12,000 --> 00:59:13,200
can

1540
00:59:13,200 --> 00:59:15,599
be implemented in different ways

1541
00:59:15,599 --> 00:59:17,839
so you could say because this model is

1542
00:59:17,839 --> 00:59:19,680
so simple um

1543
00:59:19,680 --> 00:59:21,839
and so if your application semantics

1544
00:59:21,839 --> 00:59:24,160
allow it you could also say you want to

1545
00:59:24,160 --> 00:59:27,040
parallelize the execution by opening up

1546
00:59:27,040 --> 00:59:28,640
a second

1547
00:59:28,640 --> 00:59:30,960
subgraph here

1548
00:59:30,960 --> 00:59:33,760
and um then just run everything faster

1549
00:59:33,760 --> 00:59:35,839
if you have the resources for example

1550
00:59:35,839 --> 00:59:38,960
so what you have is um something like a

1551
00:59:38,960 --> 00:59:42,000
um like the the

1552
00:59:42,000 --> 00:59:44,480
data flow specification

1553
00:59:44,480 --> 00:59:47,040
um that could be um you know laid out in

1554
00:59:47,040 --> 00:59:49,280
the network in in different ways uh

1555
00:59:49,280 --> 00:59:51,359
different levels of parallelism and so

1556
00:59:51,359 --> 00:59:54,240
on so that so the semantics in this case

1557
00:59:54,240 --> 00:59:56,079
here in this like word count example

1558
00:59:56,079 --> 00:59:58,079
would be that um you split the input

1559
00:59:58,079 --> 01:00:01,680
here in this text-to-lines box

1560
01:00:01,680 --> 01:00:03,200
but you can also have other use cases

1561
01:00:03,200 --> 01:00:04,240
where you

1562
01:00:04,240 --> 01:00:06,400
you know reuse the same

1563
01:00:06,400 --> 01:00:07,359
input

1564
01:00:07,359 --> 01:00:08,799
for different types of computation of

1565
01:00:08,799 --> 01:00:11,040
course

1566
01:00:11,599 --> 01:00:14,559
so some some concepts so data flow can

1567
01:00:14,559 --> 01:00:16,960
this fundamental paradigm can be used to

1568
01:00:16,960 --> 01:00:19,520
implement batch as well as um stream

1569
01:00:19,520 --> 01:00:20,720
processing

1570
01:00:20,720 --> 01:00:23,119
so in steam processing you you

1571
01:00:23,119 --> 01:00:25,200
like conceptually you look at each data

1572
01:00:25,200 --> 01:00:27,920
object independently in an unbounded

1573
01:00:27,920 --> 01:00:29,440
stream of data

1574
01:00:29,440 --> 01:00:32,319
in batch processing you group data and

1575
01:00:32,319 --> 01:00:35,440
typically the systems allow you to um

1576
01:00:35,440 --> 01:00:37,760
you know implement groupings

1577
01:00:37,760 --> 01:00:39,839
dynamically so based on some predicate

1578
01:00:39,839 --> 01:00:40,880
or some

1579
01:00:40,880 --> 01:00:45,040
time window specification and so on

1580
01:00:45,040 --> 01:00:48,559
so um windowing is a

1581
01:00:48,559 --> 01:00:50,480
common concept here that

1582
01:00:50,480 --> 01:00:52,400
allows this grouping and

1583
01:00:52,400 --> 01:00:53,520
slicing

1584
01:00:53,520 --> 01:00:55,280
and this can also lead to situations

1585
01:00:55,280 --> 01:00:57,359
where you have something like a

1586
01:00:57,359 --> 01:00:58,640
predicate

1587
01:00:58,640 --> 01:01:00,480
that allows you to

1588
01:01:00,480 --> 01:01:02,480
um

1589
01:01:02,480 --> 01:01:04,160
put like one

1590
01:01:04,160 --> 01:01:06,960
data object into like multiple windows

1591
01:01:06,960 --> 01:01:09,040
for like consumption by by different

1592
01:01:09,040 --> 01:01:10,960
functions for example

1593
01:01:10,960 --> 01:01:12,480
but you can also

1594
01:01:12,480 --> 01:01:16,079
split this up in in different ways

1595
01:01:16,319 --> 01:01:18,720
time is an important concept

1596
01:01:18,720 --> 01:01:21,520
so you can imagine that the whole system

1597
01:01:21,520 --> 01:01:24,880
is has to be kind of elastic so you have

1598
01:01:24,880 --> 01:01:26,880
often asynchronous

1599
01:01:26,880 --> 01:01:28,480
data production

1600
01:01:28,480 --> 01:01:30,160
you can't really predict

1601
01:01:30,160 --> 01:01:32,319
the processing transport delays and so

1602
01:01:32,319 --> 01:01:33,119
on

1603
01:01:33,119 --> 01:01:35,599
and typically what you try to achieve is

1604
01:01:35,599 --> 01:01:37,040
that you match

1605
01:01:37,040 --> 01:01:39,599
the production rate with

1606
01:01:39,599 --> 01:01:42,079
the input rate

1607
01:01:42,079 --> 01:01:43,440
and

1608
01:01:43,440 --> 01:01:45,200
so the task of a data flow system then

1609
01:01:45,200 --> 01:01:46,960
is to

1610
01:01:46,960 --> 01:01:48,640
adjust the processing

1611
01:01:48,640 --> 01:01:50,079
graph to

1612
01:01:50,079 --> 01:01:51,359
the application

1613
01:01:51,359 --> 01:01:53,440
requirements and the data production

1614
01:01:53,440 --> 01:01:55,920
rate and you can you can see there's all

1615
01:01:55,920 --> 01:01:56,880
like

1616
01:01:56,880 --> 01:02:00,960
some kind of variable uh performance and

1617
01:02:00,960 --> 01:02:03,200
systems can be compared how well they

1618
01:02:03,200 --> 01:02:05,839
maybe keep up with the offered load

1619
01:02:05,839 --> 01:02:08,160
perhaps

1620
01:02:08,480 --> 01:02:11,119
there are a couple of really

1621
01:02:11,119 --> 01:02:13,680
widely used implementations so apache

1622
01:02:13,680 --> 01:02:14,880
beam is

1623
01:02:14,880 --> 01:02:17,039
basically the unified programming model

1624
01:02:17,039 --> 01:02:18,720
that many

1625
01:02:18,720 --> 01:02:21,920
data from invitations use um so

1626
01:02:21,920 --> 01:02:23,440
sometimes they're called

1627
01:02:23,440 --> 01:02:24,960
runners so you may have heard about

1628
01:02:24,960 --> 01:02:28,079
apache flink um spark of course um

1629
01:02:28,079 --> 01:02:30,640
google cloud dataflow is a product

1630
01:02:30,640 --> 01:02:31,920
and so on

1631
01:02:31,920 --> 01:02:34,319
and the picture here on the right hand

1632
01:02:34,319 --> 01:02:35,119
side

1633
01:02:35,119 --> 01:02:38,480
um depicts the architecture of a system

1634
01:02:38,480 --> 01:02:41,920
i think it's probably inspired by flink

1635
01:02:41,920 --> 01:02:44,480
um where you

1636
01:02:44,480 --> 01:02:46,559
um on the bottom here you you see the

1637
01:02:46,559 --> 01:02:48,640
the notes so these this uh what is

1638
01:02:48,640 --> 01:02:50,319
called task manager here so this could

1639
01:02:50,319 --> 01:02:51,920
be something like a

1640
01:02:51,920 --> 01:02:54,480
a compute node in your network which is

1641
01:02:54,480 --> 01:02:55,520
offering

1642
01:02:55,520 --> 01:02:58,880
several slots for computation and um

1643
01:02:58,880 --> 01:03:02,000
this like the job manager on the top

1644
01:03:02,000 --> 01:03:03,039
right here

1645
01:03:03,039 --> 01:03:05,280
is kind of orchestrating this whole

1646
01:03:05,280 --> 01:03:08,160
system so it's kind of

1647
01:03:08,160 --> 01:03:09,760
having an overview

1648
01:03:09,760 --> 01:03:11,839
about the available slots

1649
01:03:11,839 --> 01:03:14,839
and is responsible for allocating

1650
01:03:14,839 --> 01:03:18,720
um tasks for for certain jobs

1651
01:03:18,720 --> 01:03:21,359
and then also managing the connectivity

1652
01:03:21,359 --> 01:03:25,200
between those those jobs

1653
01:03:26,000 --> 01:03:27,200
and

1654
01:03:27,200 --> 01:03:29,680
so in flink in particular of course

1655
01:03:29,680 --> 01:03:31,839
performance is is also an important

1656
01:03:31,839 --> 01:03:32,880
topic

1657
01:03:32,880 --> 01:03:35,760
so flink just had their annual flink

1658
01:03:35,760 --> 01:03:38,319
forward conference recently and there

1659
01:03:38,319 --> 01:03:40,000
was quite a bit of

1660
01:03:40,000 --> 01:03:42,720
work on you know trying to reduce buffer

1661
01:03:42,720 --> 01:03:46,240
upload and improving in elasticity and

1662
01:03:46,240 --> 01:03:48,640
so on

1663
01:03:49,039 --> 01:03:49,839
so

1664
01:03:49,839 --> 01:03:53,200
fundamentally this is not so easy

1665
01:03:53,200 --> 01:03:55,359
because for example flink

1666
01:03:55,359 --> 01:03:56,480
is

1667
01:03:56,480 --> 01:03:58,400
really using a connection based approach

1668
01:03:58,400 --> 01:04:01,440
to connect these uh task managers and so

1669
01:04:01,440 --> 01:04:03,280
it's not going into the tasks but really

1670
01:04:03,280 --> 01:04:05,280
the the nodes if you like

1671
01:04:05,280 --> 01:04:07,920
and so these are like tunnels and so the

1672
01:04:07,920 --> 01:04:09,039
flink

1673
01:04:09,039 --> 01:04:11,599
task manager is basically tunneling all

1674
01:04:11,599 --> 01:04:14,640
the um or configuring the tunneling of

1675
01:04:14,640 --> 01:04:17,520
all the task communication inside um

1676
01:04:17,520 --> 01:04:19,359
these connections

1677
01:04:19,359 --> 01:04:24,000
and of course this needs um some some um

1678
01:04:24,000 --> 01:04:26,720
yeah control um so like credit based

1679
01:04:26,720 --> 01:04:29,520
schemes for example uh to reduce um

1680
01:04:29,520 --> 01:04:32,000
buffer load or our

1681
01:04:32,000 --> 01:04:34,400
queue sizes and so on

1682
01:04:34,400 --> 01:04:36,960
um so fundamentally um this is not a

1683
01:04:36,960 --> 01:04:39,440
trivial task so

1684
01:04:39,440 --> 01:04:41,839
you've been looking at this we find that

1685
01:04:41,839 --> 01:04:43,920
well these overlays do not match the

1686
01:04:43,920 --> 01:04:45,680
inherent logic of

1687
01:04:45,680 --> 01:04:47,599
like processing immutable data objects

1688
01:04:47,599 --> 01:04:50,480
very well so as i um

1689
01:04:50,480 --> 01:04:52,400
presented the data is really locked into

1690
01:04:52,400 --> 01:04:54,240
connections and these are like virtual

1691
01:04:54,240 --> 01:04:56,400
channels between hosts

1692
01:04:56,400 --> 01:04:58,319
and you always need this orchestrator

1693
01:04:58,319 --> 01:05:00,480
checking the resources and making the

1694
01:05:00,480 --> 01:05:03,200
task relationships and so on

1695
01:05:03,200 --> 01:05:04,319
and

1696
01:05:04,319 --> 01:05:06,799
so you treat the network as a black box

1697
01:05:06,799 --> 01:05:08,960
and then you tunnel the the task

1698
01:05:08,960 --> 01:05:10,640
communication inside

1699
01:05:10,640 --> 01:05:12,160
virtual channels

1700
01:05:12,160 --> 01:05:14,640
and this makes it um yeah difficult to

1701
01:05:14,640 --> 01:05:17,039
have a really agile

1702
01:05:17,039 --> 01:05:18,720
you know matching of

1703
01:05:18,720 --> 01:05:20,799
like your compute performance with the

1704
01:05:20,799 --> 01:05:22,400
network performance

1705
01:05:22,400 --> 01:05:23,280
and

1706
01:05:23,280 --> 01:05:26,319
having also really responsive systems in

1707
01:05:26,319 --> 01:05:28,000
the end you don't you have you don't

1708
01:05:28,000 --> 01:05:30,720
have this full visibility of both the

1709
01:05:30,720 --> 01:05:34,720
computing and the networking resources

1710
01:05:34,720 --> 01:05:37,359
now in the system i wanted to um talk

1711
01:05:37,359 --> 01:05:39,599
about today and so we call this ice flow

1712
01:05:39,599 --> 01:05:43,440
information senior data flow um we

1713
01:05:43,440 --> 01:05:45,280
assume that we have a

1714
01:05:45,280 --> 01:05:49,039
network of nodes and in in icn we we

1715
01:05:49,039 --> 01:05:50,400
name everything

1716
01:05:50,400 --> 01:05:52,079
so the assumption here that is that we

1717
01:05:52,079 --> 01:05:53,119
have a

1718
01:05:53,119 --> 01:05:55,920
network of named nodes

1719
01:05:55,920 --> 01:05:57,200
and there would be some routing

1720
01:05:57,200 --> 01:05:58,480
infrastructure

1721
01:05:58,480 --> 01:06:00,400
that allows us to

1722
01:06:00,400 --> 01:06:02,720
discover them and

1723
01:06:02,720 --> 01:06:04,240
forward forward

1724
01:06:04,240 --> 01:06:06,880
interest packets and data packets in the

1725
01:06:06,880 --> 01:06:08,799
system

1726
01:06:08,799 --> 01:06:11,680
and um so on top of this of these nodes

1727
01:06:11,680 --> 01:06:14,240
we would instantiate functions also with

1728
01:06:14,240 --> 01:06:15,920
a certain

1729
01:06:15,920 --> 01:06:17,680
naming convention

1730
01:06:17,680 --> 01:06:19,680
they would also be announced in this

1731
01:06:19,680 --> 01:06:22,000
routing system and so we'll be able to

1732
01:06:22,000 --> 01:06:25,440
construct compute graphs and

1733
01:06:25,440 --> 01:06:27,839
what we do in this system here is that

1734
01:06:27,839 --> 01:06:30,160
we are kind of not establishing

1735
01:06:30,160 --> 01:06:32,400
connections to

1736
01:06:32,400 --> 01:06:35,200
functions or to to nodes

1737
01:06:35,200 --> 01:06:37,760
we are actually just asking for input

1738
01:06:37,760 --> 01:06:40,559
data and so when there is new input data

1739
01:06:40,559 --> 01:06:43,280
we this triggers computation at the like

1740
01:06:43,280 --> 01:06:46,240
downstream function and so on in this

1741
01:06:46,240 --> 01:06:48,960
system we are able to for example you

1742
01:06:48,960 --> 01:06:51,200
know split up the computation as i

1743
01:06:51,200 --> 01:06:53,839
showed before but also um have something

1744
01:06:53,839 --> 01:06:56,480
like like like a multicast um system

1745
01:06:56,480 --> 01:06:58,240
where you can have reuse the same data

1746
01:06:58,240 --> 01:06:59,760
item

1747
01:06:59,760 --> 01:07:02,240
in like icn

1748
01:07:02,240 --> 01:07:04,559
idiomatic way

1749
01:07:04,559 --> 01:07:06,319
quite efficiently

1750
01:07:06,319 --> 01:07:08,880
so in ice flows we just talk about names

1751
01:07:08,880 --> 01:07:11,039
for the infrastructure and for for the

1752
01:07:11,039 --> 01:07:12,720
actors in the system

1753
01:07:12,720 --> 01:07:16,079
and the computation of the actors

1754
01:07:16,079 --> 01:07:18,079
they return name data object with the

1755
01:07:18,079 --> 01:07:20,720
usual icn properties so they are

1756
01:07:20,720 --> 01:07:22,880
immutable they can be cached and they

1757
01:07:22,880 --> 01:07:24,960
can be authenticated

1758
01:07:24,960 --> 01:07:26,960
encrypted and so on

1759
01:07:26,960 --> 01:07:30,160
and um so the interesting challenge is

1760
01:07:30,160 --> 01:07:31,760
here is that we have asynchronous data

1761
01:07:31,760 --> 01:07:34,000
production so we have to know when data

1762
01:07:34,000 --> 01:07:36,720
is available so like push semantics

1763
01:07:36,720 --> 01:07:40,799
which is typically not idiomatic in icn

1764
01:07:40,799 --> 01:07:42,880
and um then you have to think about flow

1765
01:07:42,880 --> 01:07:45,280
control so how do you couple consumers

1766
01:07:45,280 --> 01:07:47,440
and producers um

1767
01:07:47,440 --> 01:07:48,400
and then

1768
01:07:48,400 --> 01:07:51,039
in the icn system typically you you

1769
01:07:51,039 --> 01:07:53,119
publish data that means you make data

1770
01:07:53,119 --> 01:07:54,240
available

1771
01:07:54,240 --> 01:07:56,240
um so one challenge here is that you

1772
01:07:56,240 --> 01:07:58,559
also have to know when the data has been

1773
01:07:58,559 --> 01:08:00,960
consumed which normally you you don't

1774
01:08:00,960 --> 01:08:02,240
really know

1775
01:08:02,240 --> 01:08:03,520
um

1776
01:08:03,520 --> 01:08:05,119
because requests can be answered by

1777
01:08:05,119 --> 01:08:06,960
caches and and so on so there needs to

1778
01:08:06,960 --> 01:08:09,680
be a system like basically implementing

1779
01:08:09,680 --> 01:08:12,799
a bit of tighter coupling um as well

1780
01:08:12,799 --> 01:08:13,760
so

1781
01:08:13,760 --> 01:08:16,640
the system yeah has a certain naming

1782
01:08:16,640 --> 01:08:18,560
convention um where we named the

1783
01:08:18,560 --> 01:08:20,799
application the data flow actors and

1784
01:08:20,799 --> 01:08:22,319
then the

1785
01:08:22,319 --> 01:08:24,719
produce data objects um

1786
01:08:24,719 --> 01:08:27,600
um that the functions produce and with

1787
01:08:27,600 --> 01:08:31,040
that we are able to to set up the system

1788
01:08:31,040 --> 01:08:35,759
and um so this this um tasks of um you

1789
01:08:35,759 --> 01:08:37,759
know making data available and learning

1790
01:08:37,759 --> 01:08:40,000
about new data

1791
01:08:40,000 --> 01:08:42,560
we are using an icn technology called

1792
01:08:42,560 --> 01:08:45,600
dataset synchronization for that

1793
01:08:45,600 --> 01:08:46,640
where

1794
01:08:46,640 --> 01:08:49,040
so logically the producers produce data

1795
01:08:49,040 --> 01:08:51,520
under a known prefix and consumers can

1796
01:08:51,520 --> 01:08:53,520
subscribe to that prefix and then they

1797
01:08:53,520 --> 01:08:54,799
would learn

1798
01:08:54,799 --> 01:08:57,359
um when there is new data under that

1799
01:08:57,359 --> 01:08:59,759
prefix and then they can decide okay i'm

1800
01:08:59,759 --> 01:09:02,319
interested in text to lines object one

1801
01:09:02,319 --> 01:09:04,880
and then i can fetch that

1802
01:09:04,880 --> 01:09:07,839
so um there are implementations of this

1803
01:09:07,839 --> 01:09:11,359
concept like psync in in icn uh which in

1804
01:09:11,359 --> 01:09:13,439
the end which you may have heard about

1805
01:09:13,439 --> 01:09:14,238
um

1806
01:09:14,238 --> 01:09:15,040
and

1807
01:09:15,040 --> 01:09:15,759
so

1808
01:09:15,759 --> 01:09:18,960
that means um so in the on the like very

1809
01:09:18,960 --> 01:09:21,759
low layer this that means consumers

1810
01:09:21,759 --> 01:09:24,960
have to um kind of send update

1811
01:09:24,960 --> 01:09:27,759
interests uh to learn about new names uh

1812
01:09:27,759 --> 01:09:29,198
perfectly

1813
01:09:29,198 --> 01:09:31,040
and then um from an application

1814
01:09:31,040 --> 01:09:33,600
perspective it's quite a convenient

1815
01:09:33,600 --> 01:09:35,279
interface so it's a bit like reactive

1816
01:09:35,279 --> 01:09:37,120
programming so you just get notified

1817
01:09:37,120 --> 01:09:39,600
when something um you know

1818
01:09:39,600 --> 01:09:43,199
shows up that you are interested in

1819
01:09:43,279 --> 01:09:44,719
um

1820
01:09:44,719 --> 01:09:48,000
we implemented a few additions to make

1821
01:09:48,000 --> 01:09:50,799
the system yeah a bit more scalable

1822
01:09:50,799 --> 01:09:53,359
like to have like less updates so we

1823
01:09:53,359 --> 01:09:55,600
have a grouping concept

1824
01:09:55,600 --> 01:09:58,320
where we group data objects into windows

1825
01:09:58,320 --> 01:10:00,719
and we're actually just publishing

1826
01:10:00,719 --> 01:10:03,600
these windows so uh and so we're using

1827
01:10:03,600 --> 01:10:06,880
icn manifests uh um for that

1828
01:10:06,880 --> 01:10:10,320
and so there's like a like a a two level

1829
01:10:10,320 --> 01:10:13,600
inter indirection um scheme scheme here

1830
01:10:13,600 --> 01:10:14,480
um

1831
01:10:14,480 --> 01:10:15,360
that

1832
01:10:15,360 --> 01:10:17,280
makes that makes the whole system more

1833
01:10:17,280 --> 01:10:21,120
efficient and a bit more scalable

1834
01:10:21,280 --> 01:10:22,239
um

1835
01:10:22,239 --> 01:10:25,440
i'm almost done and so in addition to

1836
01:10:25,440 --> 01:10:26,560
the

1837
01:10:26,560 --> 01:10:28,800
data flow communication we also need to

1838
01:10:28,800 --> 01:10:30,880
share some

1839
01:10:30,880 --> 01:10:32,800
you know runtime information and

1840
01:10:32,800 --> 01:10:35,040
configuration information so what is the

1841
01:10:35,040 --> 01:10:37,280
static flow graph what is the actual

1842
01:10:37,280 --> 01:10:39,360
dynamic flow graph

1843
01:10:39,360 --> 01:10:41,120
um what are

1844
01:10:41,120 --> 01:10:43,440
available compute slots in the system

1845
01:10:43,440 --> 01:10:44,560
and so on

1846
01:10:44,560 --> 01:10:45,840
but also

1847
01:10:45,840 --> 01:10:48,239
implementing this loose coupling between

1848
01:10:48,239 --> 01:10:50,960
consumers and producers so we have

1849
01:10:50,960 --> 01:10:52,960
um conceived something that like what we

1850
01:10:52,960 --> 01:10:55,520
call consumer reports where basically we

1851
01:10:55,520 --> 01:10:57,360
publish

1852
01:10:57,360 --> 01:10:59,600
what windows have been processed by each

1853
01:10:59,600 --> 01:11:01,199
consumer

1854
01:11:01,199 --> 01:11:06,080
and so this is um also a um like a

1855
01:11:06,080 --> 01:11:08,960
organized data structure in in icn way

1856
01:11:08,960 --> 01:11:11,199
and we also use this

1857
01:11:11,199 --> 01:11:13,199
data set synchronization scheme

1858
01:11:13,199 --> 01:11:16,559
to share this information

1859
01:11:17,280 --> 01:11:18,320
okay

1860
01:11:18,320 --> 01:11:20,400
just very quickly

1861
01:11:20,400 --> 01:11:22,800
so this approach allows us to

1862
01:11:22,800 --> 01:11:23,760
deal with

1863
01:11:23,760 --> 01:11:26,880
congestion control and um

1864
01:11:26,880 --> 01:11:27,920
yeah

1865
01:11:27,920 --> 01:11:29,920
like a proper receive window

1866
01:11:29,920 --> 01:11:32,159
configuration in a different way so we

1867
01:11:32,159 --> 01:11:34,400
can really adapt

1868
01:11:34,400 --> 01:11:36,640
like the interest rate for example to

1869
01:11:36,640 --> 01:11:39,679
our actual processing speed so avoiding

1870
01:11:39,679 --> 01:11:41,280
that we asked for too much data we

1871
01:11:41,280 --> 01:11:42,400
cannot

1872
01:11:42,400 --> 01:11:44,560
process in in real time

1873
01:11:44,560 --> 01:11:47,120
and observing the performance of my

1874
01:11:47,120 --> 01:11:48,640
downstream

1875
01:11:48,640 --> 01:11:51,520
consumers um could be a trigger for an

1876
01:11:51,520 --> 01:11:54,719
upstream producer to initiate

1877
01:11:54,719 --> 01:11:57,280
scaling out and so by creating a new

1878
01:11:57,280 --> 01:12:00,880
subgraph so if i'm constantly realizing

1879
01:12:00,880 --> 01:12:02,480
that my

1880
01:12:02,480 --> 01:12:04,880
downstream cannot keep up

1881
01:12:04,880 --> 01:12:07,199
so this is the the trigger that we can

1882
01:12:07,199 --> 01:12:08,560
scale the system

1883
01:12:08,560 --> 01:12:10,239
so there's a demo on this

1884
01:12:10,239 --> 01:12:11,760
please check it out

1885
01:12:11,760 --> 01:12:14,080
and yeah wrapping up

1886
01:12:14,080 --> 01:12:16,239
so

1887
01:12:16,800 --> 01:12:18,400
these data flow systems are really

1888
01:12:18,400 --> 01:12:20,080
important they're driving many many data

1889
01:12:20,080 --> 01:12:21,679
science applications

1890
01:12:21,679 --> 01:12:23,360
today and

1891
01:12:23,360 --> 01:12:26,880
you can see also more coming up

1892
01:12:26,880 --> 01:12:29,280
so in the itf this week there

1893
01:12:29,280 --> 01:12:33,520
was a buff on a project called ppm

1894
01:12:33,520 --> 01:12:35,600
that is also using similar similar

1895
01:12:35,600 --> 01:12:36,960
concepts

1896
01:12:36,960 --> 01:12:38,480
the current systems are quite limited

1897
01:12:38,480 --> 01:12:40,960
because of their say overlay approach so

1898
01:12:40,960 --> 01:12:42,719
centralized orchestration limited data

1899
01:12:42,719 --> 01:12:45,520
sharing and we found this icn approach

1900
01:12:45,520 --> 01:12:48,480
quite promising

1901
01:12:48,840 --> 01:12:50,800
so

1902
01:12:50,800 --> 01:12:52,960
this uh data sensing synchronization

1903
01:12:52,960 --> 01:12:53,920
approach

1904
01:12:53,920 --> 01:12:55,120
um

1905
01:12:55,120 --> 01:12:58,159
works reasonably well um but um to be

1906
01:12:58,159 --> 01:13:00,480
honest we are currently looking um a lot

1907
01:13:00,480 --> 01:13:02,080
into performance

1908
01:13:02,080 --> 01:13:04,640
optimizations for that so there's a lot

1909
01:13:04,640 --> 01:13:07,679
to do in reducing the overhead

1910
01:13:07,679 --> 01:13:08,960
and so on

1911
01:13:08,960 --> 01:13:09,920
um

1912
01:13:09,920 --> 01:13:11,920
this system would basically need

1913
01:13:11,920 --> 01:13:13,679
additional infrastructure so like a

1914
01:13:13,679 --> 01:13:15,520
name-based routing infrastructure for

1915
01:13:15,520 --> 01:13:18,640
example and there are solutions for that

1916
01:13:18,640 --> 01:13:19,920
that

1917
01:13:19,920 --> 01:13:22,320
in principally principal work

1918
01:13:22,320 --> 01:13:23,199
but

1919
01:13:23,199 --> 01:13:25,760
maybe in terms of research

1920
01:13:25,760 --> 01:13:27,520
this system could also be supported

1921
01:13:27,520 --> 01:13:30,239
perhaps better by a routing system that

1922
01:13:30,239 --> 01:13:32,560
gives you more information so

1923
01:13:32,560 --> 01:13:33,600
for example

1924
01:13:33,600 --> 01:13:34,880
[Music]

1925
01:13:34,880 --> 01:13:37,360
resource education information directly

1926
01:13:37,360 --> 01:13:40,400
and not only reachability information

1927
01:13:40,400 --> 01:13:43,120
and so for coin we think this could be

1928
01:13:43,120 --> 01:13:44,880
an example for

1929
01:13:44,880 --> 01:13:47,280
like new protocol work so i'm not saying

1930
01:13:47,280 --> 01:13:49,199
that this is the the best way of doing

1931
01:13:49,199 --> 01:13:52,000
this so this is has to be something that

1932
01:13:52,000 --> 01:13:54,159
you know ends up in a protocol spec but

1933
01:13:54,159 --> 01:13:56,239
it's it's an interesting example so how

1934
01:13:56,239 --> 01:13:58,960
you can break up overlays and leverage

1935
01:13:58,960 --> 01:14:01,199
systems like icn to do that

1936
01:14:01,199 --> 01:14:03,199
and so today i talked about data flow

1937
01:14:03,199 --> 01:14:04,000
but

1938
01:14:04,000 --> 01:14:05,760
you can imagine that other

1939
01:14:05,760 --> 01:14:07,920
interaction classes could be promising

1940
01:14:07,920 --> 01:14:10,960
as well so other systems may be like

1941
01:14:10,960 --> 01:14:13,679
kafka like published broker systems and

1942
01:14:13,679 --> 01:14:15,520
so on

1943
01:14:15,520 --> 01:14:17,679
with that thanks for your attention

1944
01:14:17,679 --> 01:14:20,480
are there any questions

1945
01:14:27,440 --> 01:14:29,679
thank you so much dirk um

1946
01:14:29,679 --> 01:14:32,560
that was super interesting and um i just

1947
01:14:32,560 --> 01:14:34,640
want to point people to there's the you

1948
01:14:34,640 --> 01:14:36,000
know icn

1949
01:14:36,000 --> 01:14:38,800
paper and demo and um i also wanted to

1950
01:14:38,800 --> 01:14:40,239
kind of go back to one

1951
01:14:40,239 --> 01:14:42,239
um presentation and remind people that

1952
01:14:42,239 --> 01:14:44,800
his uh presentation and paper are

1953
01:14:44,800 --> 01:14:47,600
available from nsdi21

1954
01:14:47,600 --> 01:14:50,960
um so uh i think in the interest of time

1955
01:14:50,960 --> 01:14:53,760
we will um go forward in the program we

1956
01:14:53,760 --> 01:14:56,480
had segmented the program into

1957
01:14:56,480 --> 01:14:58,320
you know papers that have been published

1958
01:14:58,320 --> 01:14:59,840
elsewhere and that's been really

1959
01:14:59,840 --> 01:15:01,840
fruitful thank you all

1960
01:15:01,840 --> 01:15:03,440
uh for your presentations uh the next

1961
01:15:03,440 --> 01:15:05,600
section is gonna be brief uh it's sort

1962
01:15:05,600 --> 01:15:07,520
of new ideas section

1963
01:15:07,520 --> 01:15:09,360
um and then we're gonna get to the

1964
01:15:09,360 --> 01:15:10,560
drafts

1965
01:15:10,560 --> 01:15:11,840
um and

1966
01:15:11,840 --> 01:15:13,920
draft updates and then then a new draft

1967
01:15:13,920 --> 01:15:15,840
so with that i think i'll hand over the

1968
01:15:15,840 --> 01:15:18,159
floor to marie jose

1969
01:15:18,159 --> 01:15:20,719
who's going to introduce the moda ideas

1970
01:15:20,719 --> 01:15:22,239
on behalf of her

1971
01:15:22,239 --> 01:15:24,480
colleagues

1972
01:15:24,480 --> 01:15:27,440
um yeah um i hope my screen oh my god

1973
01:15:27,440 --> 01:15:30,080
what is this

1974
01:15:30,560 --> 01:15:32,640
and i'm gonna try the timer

1975
01:15:32,640 --> 01:15:35,760
clock yeah but i i have the the great

1976
01:15:35,760 --> 01:15:37,440
the great

1977
01:15:37,440 --> 01:15:39,600
the great

1978
01:15:39,600 --> 01:15:43,679
screen problem of um miteko

1979
01:15:43,679 --> 01:15:44,800
yes

1980
01:15:44,800 --> 01:15:48,679
if i can fix this

1981
01:16:01,120 --> 01:16:04,640
why why am i seeing all this

1982
01:16:04,640 --> 01:16:06,560
it's supposed to be just the

1983
01:16:06,560 --> 01:16:09,199
powerpoint

1984
01:16:09,520 --> 01:16:10,880
uh did you

1985
01:16:10,880 --> 01:16:12,000
there you go

1986
01:16:12,000 --> 01:16:15,040
if you could put that into the display

1987
01:16:15,040 --> 01:16:17,760
uh we did for a moment there

1988
01:16:17,760 --> 01:16:19,520
oh okay so let me go back into

1989
01:16:19,520 --> 01:16:21,440
powerpoint you can also select a

1990
01:16:21,440 --> 01:16:22,960
specific screen

1991
01:16:22,960 --> 01:16:25,679
versus the your entire there you go well

1992
01:16:25,679 --> 01:16:26,400
i

1993
01:16:26,400 --> 01:16:29,199
that's what i can't find

1994
01:16:29,199 --> 01:16:31,120
oh um

1995
01:16:31,120 --> 01:16:32,719
oh my god

1996
01:16:32,719 --> 01:16:36,080
let me stop this it's crazy

1997
01:16:38,239 --> 01:16:40,559
um

1998
01:16:43,199 --> 01:16:45,520
i i cannot find the thing to choose only

1999
01:16:45,520 --> 01:16:47,520
one part of the screen

2000
01:16:47,520 --> 01:16:48,640
i see

2001
01:16:48,640 --> 01:16:49,840
uh

2002
01:16:49,840 --> 01:16:50,880
okay

2003
01:16:50,880 --> 01:16:54,080
i'm gonna give it one last shot

2004
01:16:54,239 --> 01:16:55,840
and then i can and then i can download

2005
01:16:55,840 --> 01:16:57,280
in the interim

2006
01:16:57,280 --> 01:16:59,600
yeah can you okay you seem to be better

2007
01:16:59,600 --> 01:17:02,719
at this than me uh i i'm sorry i'm sorry

2008
01:17:02,719 --> 01:17:03,679
i

2009
01:17:03,679 --> 01:17:05,520
i know there's a way of doing only the

2010
01:17:05,520 --> 01:17:08,159
part of the slide but i can't find

2011
01:17:08,159 --> 01:17:10,239
the button

2012
01:17:10,239 --> 01:17:13,280
maybe if i could maybe if i close my oh

2013
01:17:13,280 --> 01:17:15,440
my no i can't close all my

2014
01:17:15,440 --> 01:17:17,199
my screens

2015
01:17:17,199 --> 01:17:19,040
yeah you should try it i'm sorry people

2016
01:17:19,040 --> 01:17:21,120
i can start talking anyway so that we

2017
01:17:21,120 --> 01:17:23,280
don't spend too much time

2018
01:17:23,280 --> 01:17:25,520
um

2019
01:17:25,520 --> 01:17:28,480
the presentation is about moda it's it's

2020
01:17:28,480 --> 01:17:31,440
a currently a a proposal that's been put

2021
01:17:31,440 --> 01:17:34,480
together by a large group of people

2022
01:17:34,480 --> 01:17:38,080
um and it's a european wide project and

2023
01:17:38,080 --> 01:17:40,960
the idea started from essentially

2024
01:17:40,960 --> 01:17:42,159
a lot of us

2025
01:17:42,159 --> 01:17:44,480
actually a lot of people on the moda

2026
01:17:44,480 --> 01:17:47,040
team or uh will be when we once we see

2027
01:17:47,040 --> 01:17:50,000
the slides uh are very familiar to uh

2028
01:17:50,000 --> 01:17:51,280
this group because a lot of them are

2029
01:17:51,280 --> 01:17:52,640
involved and

2030
01:17:52,640 --> 01:17:54,960
one of the ideas oh

2031
01:17:54,960 --> 01:17:57,120
my slides are coming thank you thank you

2032
01:17:57,120 --> 01:17:58,560
so much eve

2033
01:17:58,560 --> 01:18:00,159
um

2034
01:18:00,159 --> 01:18:02,800
and the the id and we can go directly to

2035
01:18:02,800 --> 01:18:05,040
the first slide if when it's you can go

2036
01:18:05,040 --> 01:18:07,920
to the next slide if please

2037
01:18:07,920 --> 01:18:10,320
okay just bring it in um presentation

2038
01:18:10,320 --> 01:18:13,360
yeah in mode yeah

2039
01:18:13,360 --> 01:18:16,320
so the idea started from this uh a lot

2040
01:18:16,320 --> 01:18:19,040
of us who work in iot

2041
01:18:19,040 --> 01:18:20,800
um

2042
01:18:20,800 --> 01:18:23,920
have a big problem is and i think it was

2043
01:18:23,920 --> 01:18:25,920
interesting that a little bit of that

2044
01:18:25,920 --> 01:18:27,840
the scot presentation touched it a

2045
01:18:27,840 --> 01:18:29,280
little bit everything is very

2046
01:18:29,280 --> 01:18:32,320
verticalized everything is fragmented

2047
01:18:32,320 --> 01:18:34,960
and for essentially in iot what people

2048
01:18:34,960 --> 01:18:37,120
do is they put a sensor somewhere they

2049
01:18:37,120 --> 01:18:38,560
put a gateway in they connect to the

2050
01:18:38,560 --> 01:18:40,560
cloud and they claim that the problem is

2051
01:18:40,560 --> 01:18:42,960
solved the problem is not solved because

2052
01:18:42,960 --> 01:18:45,360
the minute that you want to start having

2053
01:18:45,360 --> 01:18:46,719
uh

2054
01:18:46,719 --> 01:18:49,199
applications and services and artificial

2055
01:18:49,199 --> 01:18:51,760
intelligence that cover uh more than one

2056
01:18:51,760 --> 01:18:53,920
thing you you're in you're in your

2057
01:18:53,920 --> 01:18:55,920
agriculture well you may want to take

2058
01:18:55,920 --> 01:18:57,679
decisions that are based on the market

2059
01:18:57,679 --> 01:19:00,080
but then how does that work when you

2060
01:19:00,080 --> 01:19:02,320
need to det you need for that to know or

2061
01:19:02,320 --> 01:19:03,920
how much disease do you have in your

2062
01:19:03,920 --> 01:19:05,360
farm or maybe

2063
01:19:05,360 --> 01:19:06,960
what's the building temperature because

2064
01:19:06,960 --> 01:19:09,040
that will increase or decrease depending

2065
01:19:09,040 --> 01:19:11,520
on you know the time of year or the time

2066
01:19:11,520 --> 01:19:13,280
of day and it will increa increase or

2067
01:19:13,280 --> 01:19:15,199
decrease your production which yeah will

2068
01:19:15,199 --> 01:19:17,120
go back to your your modeling of

2069
01:19:17,120 --> 01:19:18,960
decision and now you would the minute

2070
01:19:18,960 --> 01:19:20,640
you do that well you have people

2071
01:19:20,640 --> 01:19:23,360
involved you have a ton of different

2072
01:19:23,360 --> 01:19:25,679
um

2073
01:19:25,679 --> 01:19:28,239
systems that don't talk to one another

2074
01:19:28,239 --> 01:19:30,159
next

2075
01:19:30,159 --> 01:19:32,719
it's like

2076
01:19:32,800 --> 01:19:35,360
let's see if i can

2077
01:19:35,360 --> 01:19:36,800
so oops

2078
01:19:36,800 --> 01:19:38,400
so

2079
01:19:38,400 --> 01:19:40,480
essentially in this fragmented

2080
01:19:40,480 --> 01:19:42,640
environment the application development

2081
01:19:42,640 --> 01:19:46,159
has very very important pain points so

2082
01:19:46,159 --> 01:19:48,080
all these fragmented systems that

2083
01:19:48,080 --> 01:19:50,640
require overlays multiple gateways

2084
01:19:50,640 --> 01:19:52,560
different cloud applications the

2085
01:19:52,560 --> 01:19:54,000
different cloud providers that don't

2086
01:19:54,000 --> 01:19:55,600
talk to one another

2087
01:19:55,600 --> 01:19:56,560
and

2088
01:19:56,560 --> 01:19:58,000
there's issues always of that in

2089
01:19:58,000 --> 01:19:59,760
security and privacy because there's

2090
01:19:59,760 --> 01:20:01,920
data privacy there's digital sovereignty

2091
01:20:01,920 --> 01:20:04,080
there's multiple customers who are

2092
01:20:04,080 --> 01:20:06,400
involved and it creates a big problem at

2093
01:20:06,400 --> 01:20:08,159
the same time

2094
01:20:08,159 --> 01:20:09,840
in this group coin

2095
01:20:09,840 --> 01:20:12,320
we started to think that

2096
01:20:12,320 --> 01:20:14,880
the internet paradigm is much more than

2097
01:20:14,880 --> 01:20:17,600
is much more like a computer board than

2098
01:20:17,600 --> 01:20:21,440
a telephone network and if we have a

2099
01:20:21,440 --> 01:20:24,400
computer board then we need an operating

2100
01:20:24,400 --> 01:20:27,679
system and the extra cloud

2101
01:20:27,679 --> 01:20:30,080
view

2102
01:20:30,400 --> 01:20:32,560
that we have in moda where there's

2103
01:20:32,560 --> 01:20:35,280
computing inside different nodes that

2104
01:20:35,280 --> 01:20:38,000
actually collaborate with one another

2105
01:20:38,000 --> 01:20:40,560
at different levels in the network is

2106
01:20:40,560 --> 01:20:41,600
one

2107
01:20:41,600 --> 01:20:42,800
um

2108
01:20:42,800 --> 01:20:45,199
realization of this vision and eve

2109
01:20:45,199 --> 01:20:47,440
you're the one who said that the data is

2110
01:20:47,440 --> 01:20:50,239
the fuel of the 21st century and in such

2111
01:20:50,239 --> 01:20:53,360
an environment also for iot and for all

2112
01:20:53,360 --> 01:20:55,600
these distributed systems

2113
01:20:55,600 --> 01:20:58,080
data valorization is key

2114
01:20:58,080 --> 01:20:59,120
i think

2115
01:20:59,120 --> 01:21:01,440
scott mentioned that you know you you

2116
01:21:01,440 --> 01:21:03,280
use open source approaches and this is

2117
01:21:03,280 --> 01:21:05,520
exactly what we want to do because in

2118
01:21:05,520 --> 01:21:08,320
fact it is not the algorithms or the

2119
01:21:08,320 --> 01:21:10,320
software that's worth and the words a

2120
01:21:10,320 --> 01:21:12,880
lot it's actually the data itself and so

2121
01:21:12,880 --> 01:21:14,239
we want to make sure that we can

2122
01:21:14,239 --> 01:21:15,360
actually

2123
01:21:15,360 --> 01:21:18,480
maximize data valorization by acting it

2124
01:21:18,480 --> 01:21:22,879
on it inside the network next slide

2125
01:21:25,920 --> 01:21:28,719
so what is moda it's the operating

2126
01:21:28,719 --> 01:21:31,360
system for a new distributed internet i

2127
01:21:31,360 --> 01:21:33,520
hope scott are you still on maybe it's

2128
01:21:33,520 --> 01:21:35,199
the operating system for the extensible

2129
01:21:35,199 --> 01:21:36,639
internet

2130
01:21:36,639 --> 01:21:38,480
it provides an infrastructure that

2131
01:21:38,480 --> 01:21:41,040
allows applications to be

2132
01:21:41,040 --> 01:21:43,360
um easily developed

2133
01:21:43,360 --> 01:21:45,280
and it has a lot of things that were

2134
01:21:45,280 --> 01:21:46,719
discussed in

2135
01:21:46,719 --> 01:21:50,480
in coin and almost uh we have almost uh

2136
01:21:50,480 --> 01:21:53,120
one one draft per each each topics here

2137
01:21:53,120 --> 01:21:55,360
discovery services communications and

2138
01:21:55,360 --> 01:21:57,760
publish subscribe uh we haven't talked a

2139
01:21:57,760 --> 01:22:00,800
lot about semantic integration but our

2140
01:22:00,800 --> 01:22:02,480
uh our friends and things to things have

2141
01:22:02,480 --> 01:22:05,040
done it a lot um the implementation of

2142
01:22:05,040 --> 01:22:07,120
common use functionalities that we need

2143
01:22:07,120 --> 01:22:10,159
uh including you know forwarding and and

2144
01:22:10,159 --> 01:22:12,080
forwarding to different cpus and

2145
01:22:12,080 --> 01:22:14,000
forwarding not across

2146
01:22:14,000 --> 01:22:16,800
just uh layer three but for functional

2147
01:22:16,800 --> 01:22:18,120
french

2148
01:22:18,120 --> 01:22:21,199
implementation of forwarding based on

2149
01:22:21,199 --> 01:22:23,920
name and so there's a link there to icn

2150
01:22:23,920 --> 01:22:24,639
and

2151
01:22:24,639 --> 01:22:25,760
ndn

2152
01:22:25,760 --> 01:22:27,840
and also obviously in moda what we want

2153
01:22:27,840 --> 01:22:29,920
to have going back to the pain points we

2154
01:22:29,920 --> 01:22:32,400
would like to have apis and tools

2155
01:22:32,400 --> 01:22:34,320
for writing class across though to

2156
01:22:34,320 --> 01:22:36,400
running code across those uh multiple

2157
01:22:36,400 --> 01:22:39,280
terrorists oh my god here's a typo

2158
01:22:39,280 --> 01:22:41,280
heterogeneous nodes

2159
01:22:41,280 --> 01:22:43,920
uh inside the network

2160
01:22:43,920 --> 01:22:46,400
next slide

2161
01:22:48,159 --> 01:22:50,639
um so

2162
01:22:50,639 --> 01:22:52,719
the format didn't work very well here uh

2163
01:22:52,719 --> 01:22:54,480
the main mode of functionality i don't

2164
01:22:54,480 --> 01:22:57,360
want to go uh i'll go fast because i

2165
01:22:57,360 --> 01:22:59,040
don't want to go into everything this

2166
01:22:59,040 --> 01:23:00,639
but obviously we want to do some

2167
01:23:00,639 --> 01:23:02,880
orchestration there was discussion

2168
01:23:02,880 --> 01:23:05,199
about orchestration before but we feel

2169
01:23:05,199 --> 01:23:07,520
that we can actually look into this

2170
01:23:07,520 --> 01:23:08,880
and um

2171
01:23:08,880 --> 01:23:11,199
again on device computing over a trojan

2172
01:23:11,199 --> 01:23:13,760
system we want to have

2173
01:23:13,760 --> 01:23:14,960
if we can

2174
01:23:14,960 --> 01:23:17,199
as much as possible reusability and

2175
01:23:17,199 --> 01:23:19,120
that's actually a problem on those

2176
01:23:19,120 --> 01:23:22,000
verticalized applications is if you

2177
01:23:22,000 --> 01:23:24,719
change vendor or if you change supplier

2178
01:23:24,719 --> 01:23:26,560
your system doesn't work anymore because

2179
01:23:26,560 --> 01:23:28,320
they use different protocols different

2180
01:23:28,320 --> 01:23:30,560
semantics different everything

2181
01:23:30,560 --> 01:23:32,639
you would like to have modularity as a

2182
01:23:32,639 --> 01:23:35,760
design choice i usually when i teach my

2183
01:23:35,760 --> 01:23:38,080
class on distributed systems i talk

2184
01:23:38,080 --> 01:23:40,800
about the lego blue brick approach so

2185
01:23:40,800 --> 01:23:42,400
that you know we want to have a lot of

2186
01:23:42,400 --> 01:23:44,719
lego bricks and we connect them when we

2187
01:23:44,719 --> 01:23:46,719
need them and we don't use

2188
01:23:46,719 --> 01:23:49,760
them when we can't or when we

2189
01:23:49,760 --> 01:23:52,639
uh we won't and actually also in iot

2190
01:23:52,639 --> 01:23:54,560
systems it's important because a lot of

2191
01:23:54,560 --> 01:23:56,719
times you have limited resources

2192
01:23:56,719 --> 01:23:57,679
um

2193
01:23:57,679 --> 01:23:59,760
you want to be able to

2194
01:23:59,760 --> 01:24:02,800
manage the the network processing units

2195
01:24:02,800 --> 01:24:05,600
themselves so the in-network computation

2196
01:24:05,600 --> 01:24:08,320
uh that allows uh the packets and the

2197
01:24:08,320 --> 01:24:10,000
information i would think i would speak

2198
01:24:10,000 --> 01:24:12,320
more of information in this case uh to

2199
01:24:12,320 --> 01:24:15,280
be properly managed and properly uh sent

2200
01:24:15,280 --> 01:24:17,600
to the right interfaces and the right

2201
01:24:17,600 --> 01:24:20,080
end devices and end system

2202
01:24:20,080 --> 01:24:22,719
and obviously we want to support data

2203
01:24:22,719 --> 01:24:25,040
and intelligence services um

2204
01:24:25,040 --> 01:24:27,920
more and more data driven until it is is

2205
01:24:27,920 --> 01:24:29,920
actually the basic of a lot of

2206
01:24:29,920 --> 01:24:32,159
networking uh last year with andy

2207
01:24:32,159 --> 01:24:34,960
schuster we did a study for the nsf on

2208
01:24:34,960 --> 01:24:36,560
the future of broadband and actually the

2209
01:24:36,560 --> 01:24:38,159
conclusion was that everybody who does

2210
01:24:38,159 --> 01:24:41,600
broadband wants data so data driven made

2211
01:24:41,600 --> 01:24:43,199
required to have

2212
01:24:43,199 --> 01:24:45,440
new new

2213
01:24:45,440 --> 01:24:47,360
features inside moda and inside the

2214
01:24:47,360 --> 01:24:50,159
network itself and of course

2215
01:24:50,159 --> 01:24:53,040
there's there's ai that is not only in

2216
01:24:53,040 --> 01:24:55,280
the applications but more and more in

2217
01:24:55,280 --> 01:24:57,360
the network in terms of network

2218
01:24:57,360 --> 01:24:58,480
management

2219
01:24:58,480 --> 01:25:01,280
and even uh management of

2220
01:25:01,280 --> 01:25:04,480
loads inside data centers and elsewhere

2221
01:25:04,480 --> 01:25:06,400
next slide i think it's almost the last

2222
01:25:06,400 --> 01:25:08,080
one

2223
01:25:08,080 --> 01:25:10,880
um yeah i think the previous slide is an

2224
01:25:10,880 --> 01:25:12,719
overview of of what it looks like but

2225
01:25:12,719 --> 01:25:15,040
the picture is not very good so let's we

2226
01:25:15,040 --> 01:25:16,400
can skip it

2227
01:25:16,400 --> 01:25:19,040
um and um

2228
01:25:19,040 --> 01:25:22,080
the link to the coin rg well actually um

2229
01:25:22,080 --> 01:25:23,679
again it's not just that there's a lot

2230
01:25:23,679 --> 01:25:25,360
of people involved in mode that are also

2231
01:25:25,360 --> 01:25:27,920
members of this community is actually

2232
01:25:27,920 --> 01:25:29,840
there's a lot of common research topics

2233
01:25:29,840 --> 01:25:31,760
i mentioned discovery

2234
01:25:31,760 --> 01:25:33,840
uh we would like to discover storage

2235
01:25:33,840 --> 01:25:35,360
function from you know functional

2236
01:25:35,360 --> 01:25:38,000
functions and and computation

2237
01:25:38,000 --> 01:25:39,760
uh so functional discovery storage

2238
01:25:39,760 --> 01:25:42,000
discovery computation discovery we would

2239
01:25:42,000 --> 01:25:44,639
like more and more i think both and

2240
01:25:44,639 --> 01:25:46,880
that's actually since i know i have two

2241
01:25:46,880 --> 01:25:49,760
hats here so i can say as i as now as

2242
01:25:49,760 --> 01:25:52,000
maybe as a current chair that

2243
01:25:52,000 --> 01:25:54,000
distributed distractions uh and

2244
01:25:54,000 --> 01:25:55,840
protocols are also very important to

2245
01:25:55,840 --> 01:25:58,400
both groups they centralize security and

2246
01:25:58,400 --> 01:26:01,520
trust uh obviously important and

2247
01:26:01,520 --> 01:26:03,440
there is going to be a

2248
01:26:03,440 --> 01:26:05,120
draft update later

2249
01:26:05,120 --> 01:26:07,120
in this talk about security but it's

2250
01:26:07,120 --> 01:26:09,199
also an important thing when you start

2251
01:26:09,199 --> 01:26:11,920
distributed systems federated learning

2252
01:26:11,920 --> 01:26:14,400
we haven't really addressed that a lot

2253
01:26:14,400 --> 01:26:15,760
in coin

2254
01:26:15,760 --> 01:26:18,000
but it is something that we could look

2255
01:26:18,000 --> 01:26:20,800
at because federated learning needs

2256
01:26:20,800 --> 01:26:22,960
some form of in-network

2257
01:26:22,960 --> 01:26:25,920
maybe not pure computation but at least

2258
01:26:25,920 --> 01:26:27,840
uh some form of

2259
01:26:27,840 --> 01:26:29,600
um

2260
01:26:29,600 --> 01:26:32,239
trending and and connections and

2261
01:26:32,239 --> 01:26:34,000
orchestration and obviously there's all

2262
01:26:34,000 --> 01:26:35,840
the use cases and actually the people

2263
01:26:35,840 --> 01:26:38,159
right after me will talk about use cases

2264
01:26:38,159 --> 01:26:40,880
so i won't go there so this was this was

2265
01:26:40,880 --> 01:26:45,040
a very short presentation this is moda

2266
01:26:45,040 --> 01:26:47,440
we know that this is right now being

2267
01:26:47,440 --> 01:26:49,679
proposed we've been evaluated we don't

2268
01:26:49,679 --> 01:26:51,199
know if it's going to go through but i

2269
01:26:51,199 --> 01:26:52,400
think the team

2270
01:26:52,400 --> 01:26:55,199
um and i'd like to really acknowledge uh

2271
01:26:55,199 --> 01:26:57,120
the architecture team that did this and

2272
01:26:57,120 --> 01:26:59,120
a few of them are on the call right now

2273
01:26:59,120 --> 01:27:00,719
this was an incredible effort this was

2274
01:27:00,719 --> 01:27:02,960
an incredible fun thing to do and we're

2275
01:27:02,960 --> 01:27:04,560
thinking that maybe

2276
01:27:04,560 --> 01:27:06,719
we want to continue the work inside this

2277
01:27:06,719 --> 01:27:09,920
community and outside thank you

2278
01:27:09,920 --> 01:27:12,480
thank you so much marie jose um there is

2279
01:27:12,480 --> 01:27:15,600
a question on the chat asking if there

2280
01:27:15,600 --> 01:27:18,800
are any pointers that you or others uh

2281
01:27:18,800 --> 01:27:20,080
can share

2282
01:27:20,080 --> 01:27:22,560
um that would help people read more

2283
01:27:22,560 --> 01:27:24,480
about or if there's a website for

2284
01:27:24,480 --> 01:27:26,800
example so um in the interest of trying

2285
01:27:26,800 --> 01:27:27,520
to

2286
01:27:27,520 --> 01:27:29,760
take that to the list

2287
01:27:29,760 --> 01:27:33,040
or the chat yeah i will yeah i will um

2288
01:27:33,040 --> 01:27:33,840
um

2289
01:27:33,840 --> 01:27:36,800
i will see what we can share uh i i see

2290
01:27:36,800 --> 01:27:39,360
this is from from daniel king um i will

2291
01:27:39,360 --> 01:27:41,600
see where we can share i'll ask um the

2292
01:27:41,600 --> 01:27:42,880
the

2293
01:27:42,880 --> 01:27:45,440
the proposal management which i was not

2294
01:27:45,440 --> 01:27:47,360
one of so thank you daniel for this

2295
01:27:47,360 --> 01:27:51,120
question and i will ask thank you

2296
01:27:54,159 --> 01:27:56,159
okay it looks like um

2297
01:27:56,159 --> 01:27:58,400
the use cases uh

2298
01:27:58,400 --> 01:28:01,040
presentation is next we're into the um

2299
01:28:01,040 --> 01:28:02,960
some draft updates and i'm going to ask

2300
01:28:02,960 --> 01:28:05,199
if folks could please uh shorten their

2301
01:28:05,199 --> 01:28:06,480
presentations

2302
01:28:06,480 --> 01:28:08,639
to uh eight minutes each just to kind of

2303
01:28:08,639 --> 01:28:11,760
reclaim a little bit of

2304
01:28:12,960 --> 01:28:16,159
try time

2305
01:28:16,159 --> 01:28:18,719
so let's see oh and actually you know

2306
01:28:18,719 --> 01:28:21,840
what i i see that uh um i did take the

2307
01:28:21,840 --> 01:28:24,960
advice of those on the chat window to

2308
01:28:24,960 --> 01:28:27,360
uh load things into

2309
01:28:27,360 --> 01:28:28,800
um

2310
01:28:28,800 --> 01:28:31,120
mid echo which i hadn't done before uh

2311
01:28:31,120 --> 01:28:35,199
so i admit user error on my part um it

2312
01:28:35,199 --> 01:28:38,000
says okay so do you know how to request

2313
01:28:38,000 --> 01:28:40,320
the slides looks like you've already

2314
01:28:40,320 --> 01:28:42,400
done that

2315
01:28:42,400 --> 01:28:44,960
ask to share the slides perfect

2316
01:28:44,960 --> 01:28:46,000
thank you

2317
01:28:46,000 --> 01:28:48,239
so that looks good

2318
01:28:48,239 --> 01:28:51,520
perfect yes thank you for helping me out

2319
01:28:51,520 --> 01:28:54,800
yeah so hi everyone i'm ike and i'm here

2320
01:28:54,800 --> 01:28:57,440
on behalf of all the co-authors now for

2321
01:28:57,440 --> 01:28:59,760
the use cases draft just giving you a

2322
01:28:59,760 --> 01:29:01,920
bit of uh update what we've done since

2323
01:29:01,920 --> 01:29:03,600
the last iteration

2324
01:29:03,600 --> 01:29:05,920
um so the first thing you can already

2325
01:29:05,920 --> 01:29:07,679
see on the on this slide so we've a

2326
01:29:07,679 --> 01:29:11,120
couple of new co-authors so xavier david

2327
01:29:11,120 --> 01:29:13,440
and miguel have joined us

2328
01:29:13,440 --> 01:29:17,120
um apart from that let me first give uh

2329
01:29:17,120 --> 01:29:18,960
or remind you again of the purpose of

2330
01:29:18,960 --> 01:29:22,400
this draft so the uh in our coin charter

2331
01:29:22,400 --> 01:29:25,679
we have this second item where we want

2332
01:29:25,679 --> 01:29:27,920
to do research on use case driven

2333
01:29:27,920 --> 01:29:30,159
requirements analysis and where we also

2334
01:29:30,159 --> 01:29:32,960
want to identify potential benefits to

2335
01:29:32,960 --> 01:29:35,280
these networks from in-network compute

2336
01:29:35,280 --> 01:29:36,800
functionality

2337
01:29:36,800 --> 01:29:38,159
and this is kind of what we're trying to

2338
01:29:38,159 --> 01:29:40,000
do with this draft now so until now it

2339
01:29:40,000 --> 01:29:42,320
was rather loose collection of use cases

2340
01:29:42,320 --> 01:29:44,560
so stemming from the industrial ones uh

2341
01:29:44,560 --> 01:29:46,000
right in the beginning

2342
01:29:46,000 --> 01:29:48,719
um and yeah now we've quite a few of

2343
01:29:48,719 --> 01:29:50,639
them uh and what we're now currently

2344
01:29:50,639 --> 01:29:53,920
trying to do is actually go more towards

2345
01:29:53,920 --> 01:29:56,159
providing input to the second

2346
01:29:56,159 --> 01:29:59,679
charter item that we have there

2347
01:30:00,080 --> 01:30:01,679
changes in a nutshell since the last

2348
01:30:01,679 --> 01:30:04,320
iteration so first of all we have

2349
01:30:04,320 --> 01:30:06,639
regrouped the use cases so from the

2350
01:30:06,639 --> 01:30:09,280
historically grown structure to the one

2351
01:30:09,280 --> 01:30:12,560
that we have right now so we thought of

2352
01:30:12,560 --> 01:30:14,239
four ways how we could think about the

2353
01:30:14,239 --> 01:30:15,520
use cases

2354
01:30:15,520 --> 01:30:18,080
the first one and our really

2355
01:30:18,080 --> 01:30:20,719
kind of new user experiences that can be

2356
01:30:20,719 --> 01:30:25,040
enabled using coin uh so the uh arvr

2357
01:30:25,040 --> 01:30:26,000
um

2358
01:30:26,000 --> 01:30:28,480
stuff that marie jose has uh presented

2359
01:30:28,480 --> 01:30:30,480
quite a few times is for example in that

2360
01:30:30,480 --> 01:30:31,600
category

2361
01:30:31,600 --> 01:30:34,239
uh the second group is

2362
01:30:34,239 --> 01:30:36,400
supporting new coin systems so where we

2363
01:30:36,400 --> 01:30:38,639
think that the new interaction between

2364
01:30:38,639 --> 01:30:40,960
communication and compute

2365
01:30:40,960 --> 01:30:42,560
can actually enable

2366
01:30:42,560 --> 01:30:45,280
new kinds of systems or so entirely new

2367
01:30:45,280 --> 01:30:46,400
systems

2368
01:30:46,400 --> 01:30:49,360
the third category um is on improving

2369
01:30:49,360 --> 01:30:52,239
existing coin capabilities so we already

2370
01:30:52,239 --> 01:30:55,120
have uh networks which use some form of

2371
01:30:55,120 --> 01:30:56,000
coin

2372
01:30:56,000 --> 01:31:00,080
and uh so for example uh cdns have kind

2373
01:31:00,080 --> 01:31:02,639
of already some coin functionality in

2374
01:31:02,639 --> 01:31:05,199
there and those use cases are now really

2375
01:31:05,199 --> 01:31:05,920
on

2376
01:31:05,920 --> 01:31:08,480
how those networks can even be improved

2377
01:31:08,480 --> 01:31:10,639
further and then finally we have

2378
01:31:10,639 --> 01:31:12,800
entirely new coin capabilities that can

2379
01:31:12,800 --> 01:31:14,880
be enabled

2380
01:31:14,880 --> 01:31:16,960
as a second aspect we've then also tried

2381
01:31:16,960 --> 01:31:18,960
to sharpen and tighten the taxonomy so

2382
01:31:18,960 --> 01:31:22,239
it was not that um focused before and

2383
01:31:22,239 --> 01:31:24,800
we've tried to do that now i'll come to

2384
01:31:24,800 --> 01:31:25,600
that

2385
01:31:25,600 --> 01:31:26,960
in a moment again

2386
01:31:26,960 --> 01:31:28,800
and finally we've also already started

2387
01:31:28,800 --> 01:31:31,120
to prepare the actual analysis that we

2388
01:31:31,120 --> 01:31:33,199
want to do later mainly focusing on the

2389
01:31:33,199 --> 01:31:36,800
research questions and requirements

2390
01:31:36,800 --> 01:31:38,800
so with that let's have a look at the

2391
01:31:38,800 --> 01:31:40,480
current draft structure so what you can

2392
01:31:40,480 --> 01:31:42,080
see is that we have actually done the

2393
01:31:42,080 --> 01:31:43,679
regrouping already

2394
01:31:43,679 --> 01:31:46,159
we also have this one new use case

2395
01:31:46,159 --> 01:31:48,880
provided by xavier that he has already

2396
01:31:48,880 --> 01:31:50,960
presented last time or in our last

2397
01:31:50,960 --> 01:31:52,400
meeting

2398
01:31:52,400 --> 01:31:54,400
and then also we have already the

2399
01:31:54,400 --> 01:31:57,440
analysis in the structure right now

2400
01:31:57,440 --> 01:32:00,560
um so we're all only

2401
01:32:00,560 --> 01:32:01,840
waiting to get started with that

2402
01:32:01,840 --> 01:32:03,199
basically

2403
01:32:03,199 --> 01:32:05,679
and then finally the aspect that is at

2404
01:32:05,679 --> 01:32:07,679
the top of this slide so the terminology

2405
01:32:07,679 --> 01:32:08,560
part

2406
01:32:08,560 --> 01:32:11,040
that we've tried to really

2407
01:32:11,040 --> 01:32:13,199
start aligning the terminology across

2408
01:32:13,199 --> 01:32:16,560
the different drafts and the other

2409
01:32:16,560 --> 01:32:19,040
research group documents or the draft by

2410
01:32:19,040 --> 01:32:19,920
dirk

2411
01:32:19,920 --> 01:32:21,040
which has

2412
01:32:21,040 --> 01:32:23,280
been expired already but yeah we've

2413
01:32:23,280 --> 01:32:27,120
tried to align it in some way and

2414
01:32:27,120 --> 01:32:30,320
that is the following now so everything

2415
01:32:30,320 --> 01:32:31,920
in green that you see on this slide is

2416
01:32:31,920 --> 01:32:34,239
terminology defined in this draft by

2417
01:32:34,239 --> 01:32:36,800
dirk and and the other authors

2418
01:32:36,800 --> 01:32:39,199
and we've tried to use that terminology

2419
01:32:39,199 --> 01:32:41,440
throughout our draft as well or actually

2420
01:32:41,440 --> 01:32:43,280
at least have started to do that

2421
01:32:43,280 --> 01:32:46,480
um and we've then also added quite a few

2422
01:32:46,480 --> 01:32:47,679
additional

2423
01:32:47,679 --> 01:32:51,040
uh terminology um that we thought might

2424
01:32:51,040 --> 01:32:54,719
be necessary for our for our draft

2425
01:32:54,719 --> 01:32:58,080
and overall our idea would be to sort of

2426
01:32:58,080 --> 01:33:01,120
get an an overall technology all across

2427
01:33:01,120 --> 01:33:02,080
coin

2428
01:33:02,080 --> 01:33:04,000
where then the question obviously would

2429
01:33:04,000 --> 01:33:06,000
be where would actually uh

2430
01:33:06,000 --> 01:33:08,239
place that terminology um so whether we

2431
01:33:08,239 --> 01:33:10,080
have that

2432
01:33:10,080 --> 01:33:12,480
in every draft or whether we have one

2433
01:33:12,480 --> 01:33:13,920
draft that collects all of that

2434
01:33:13,920 --> 01:33:16,639
terminology

2435
01:33:17,679 --> 01:33:19,679
then quickly regarding the use case

2436
01:33:19,679 --> 01:33:23,440
taxonomy um so not that much that has

2437
01:33:23,440 --> 01:33:25,440
changed here so we have basically only

2438
01:33:25,440 --> 01:33:26,480
split up

2439
01:33:26,480 --> 01:33:28,480
the opportunities and the research

2440
01:33:28,480 --> 01:33:30,320
questions so that they are now

2441
01:33:30,320 --> 01:33:32,400
more clearly identifiable

2442
01:33:32,400 --> 01:33:34,800
we've also tried to

2443
01:33:34,800 --> 01:33:36,320
link the description of the different

2444
01:33:36,320 --> 01:33:38,639
use cases really to the new grouping

2445
01:33:38,639 --> 01:33:40,719
that we have introduced into the draft

2446
01:33:40,719 --> 01:33:44,080
and finally we've also tried to um focus

2447
01:33:44,080 --> 01:33:46,800
the requirements uh a bit more really

2448
01:33:46,800 --> 01:33:49,360
only on the coin capabilities so that we

2449
01:33:49,360 --> 01:33:50,800
really

2450
01:33:50,800 --> 01:33:53,280
describe or try to describe what the

2451
01:33:53,280 --> 01:33:55,920
coin capabilities themselves need to do

2452
01:33:55,920 --> 01:33:58,880
rather than what the overall use case

2453
01:33:58,880 --> 01:34:00,159
has to

2454
01:34:00,159 --> 01:34:02,638
satisfy

2455
01:34:02,880 --> 01:34:05,440
and with that i'm already at the end um

2456
01:34:05,440 --> 01:34:08,080
so next steps that we are planning to do

2457
01:34:08,080 --> 01:34:10,639
is first uh finish aligning the use

2458
01:34:10,639 --> 01:34:13,440
cases according to the the new taxonomy

2459
01:34:13,440 --> 01:34:15,840
so really pinpointing the requirements

2460
01:34:15,840 --> 01:34:17,920
and aligning the descriptions a bit

2461
01:34:17,920 --> 01:34:21,679
better um then we're also trying to uh

2462
01:34:21,679 --> 01:34:23,360
think about the terminology that we're

2463
01:34:23,360 --> 01:34:25,199
currently using whether that's

2464
01:34:25,199 --> 01:34:26,560
everything that we need or whether there

2465
01:34:26,560 --> 01:34:28,480
are additional terms that we might

2466
01:34:28,480 --> 01:34:30,880
require and then also

2467
01:34:30,880 --> 01:34:32,800
maybe as a question to the the complete

2468
01:34:32,800 --> 01:34:34,639
research group where we would like to

2469
01:34:34,639 --> 01:34:37,679
collect that uh terminology as the uh

2470
01:34:37,679 --> 01:34:39,440
draft by uh

2471
01:34:39,440 --> 01:34:42,639
um and and york i think has been expired

2472
01:34:42,639 --> 01:34:46,159
uh some time and yeah that's just a

2473
01:34:46,159 --> 01:34:47,840
matter of things where we collect that

2474
01:34:47,840 --> 01:34:49,280
and then finally we would also like to

2475
01:34:49,280 --> 01:34:52,159
start uh with the analysis so we first

2476
01:34:52,159 --> 01:34:54,560
try to condense the opportunities

2477
01:34:54,560 --> 01:34:56,719
research questions and requirements and

2478
01:34:56,719 --> 01:35:00,000
then afterwards try to identify aspects

2479
01:35:00,000 --> 01:35:01,760
similar across all of the use cases so

2480
01:35:01,760 --> 01:35:04,639
that we can then uh perhaps give a

2481
01:35:04,639 --> 01:35:06,560
collected input into the

2482
01:35:06,560 --> 01:35:08,400
second uh

2483
01:35:08,400 --> 01:35:11,600
charter item of this research group

2484
01:35:11,600 --> 01:35:14,639
and that's it thank you

2485
01:35:14,639 --> 01:35:16,560
and i think comments we can take them to

2486
01:35:16,560 --> 01:35:17,600
the list

2487
01:35:17,600 --> 01:35:20,159
if there's not that much time

2488
01:35:20,159 --> 01:35:23,600
um thank you i i cannot really um i'm a

2489
01:35:23,600 --> 01:35:25,840
co-author so it's hard for me to be both

2490
01:35:25,840 --> 01:35:28,560
co-author and um

2491
01:35:28,560 --> 01:35:30,719
and and share on this but i think uh

2492
01:35:30,719 --> 01:35:32,880
there will be a discussion

2493
01:35:32,880 --> 01:35:33,840
uh

2494
01:35:33,840 --> 01:35:35,760
amongst the chairs to to bring this as

2495
01:35:35,760 --> 01:35:38,480
an orgy document but we'll

2496
01:35:38,480 --> 01:35:40,239
i'll let the other chairs talk about it

2497
01:35:40,239 --> 01:35:43,280
since i'm an author

2498
01:35:43,280 --> 01:35:45,119
thank you i'll just confirm that that

2499
01:35:45,119 --> 01:35:46,960
does seem like an appropriate next step

2500
01:35:46,960 --> 01:35:50,480
that we can discuss on the mailing list

2501
01:35:50,800 --> 01:35:52,400
okay thank you thanks for moving this

2502
01:35:52,400 --> 01:35:54,159
forward this was great

2503
01:35:54,159 --> 01:35:57,400
much appreciated

2504
01:35:57,600 --> 01:36:00,719
dirk truston you are next

2505
01:36:00,719 --> 01:36:02,560
okay

2506
01:36:02,560 --> 01:36:04,719
um

2507
01:36:04,719 --> 01:36:06,639
we see you

2508
01:36:06,639 --> 01:36:09,639
yeah

2509
01:36:13,119 --> 01:36:16,159
and there you are good

2510
01:36:16,159 --> 01:36:18,000
you can see this lines right

2511
01:36:18,000 --> 01:36:18,960
yes

2512
01:36:18,960 --> 01:36:21,119
very good still a bit new with the ui

2513
01:36:21,119 --> 01:36:23,040
and colin has given a good tutorial

2514
01:36:23,040 --> 01:36:24,960
thank you

2515
01:36:24,960 --> 01:36:27,360
transfer protocol issues uh even network

2516
01:36:27,360 --> 01:36:29,600
computing systems that's another draft

2517
01:36:29,600 --> 01:36:31,840
um like clouds and myself have been

2518
01:36:31,840 --> 01:36:34,560
working on um it had expired initially

2519
01:36:34,560 --> 01:36:35,600
in uh

2520
01:36:35,600 --> 01:36:37,520
in the last meeting because of the focus

2521
01:36:37,520 --> 01:36:40,080
we had mainly on research presentations

2522
01:36:40,080 --> 01:36:41,280
and and and

2523
01:36:41,280 --> 01:36:43,040
and

2524
01:36:43,040 --> 01:36:44,880
it's not quite as outstanding outdated

2525
01:36:44,880 --> 01:36:46,000
as the

2526
01:36:46,000 --> 01:36:48,159
um date on the first slide gives it was

2527
01:36:48,159 --> 01:36:49,600
obviously presented at the 11th of

2528
01:36:49,600 --> 01:36:53,280
november 2021 or not 2020.

2529
01:36:53,280 --> 01:36:55,520
the the premise um i highlighted the

2530
01:36:55,520 --> 01:36:57,360
main piece i don't intend to read this

2531
01:36:57,360 --> 01:36:59,679
so this is about um what if you have

2532
01:36:59,679 --> 01:37:02,239
functions of the communication system

2533
01:37:02,239 --> 01:37:04,560
i'm sorry if the part of the intent

2534
01:37:04,560 --> 01:37:06,639
function may be provided as part of a

2535
01:37:06,639 --> 01:37:10,320
communication system that's the network

2536
01:37:10,320 --> 01:37:12,400
premise really of coin this is a quote

2537
01:37:12,400 --> 01:37:14,320
from the end-to-end paper

2538
01:37:14,320 --> 01:37:16,400
from the original indian paper

2539
01:37:16,400 --> 01:37:17,920
and and we're looking at the challenges

2540
01:37:17,920 --> 01:37:19,679
to the traditional intent transport

2541
01:37:19,679 --> 01:37:22,639
protocols um you know trying to outline

2542
01:37:22,639 --> 01:37:25,119
opportunities research questions uh for

2543
01:37:25,119 --> 01:37:26,880
the design of transport protocols that

2544
01:37:26,880 --> 01:37:28,400
may arise

2545
01:37:28,400 --> 01:37:30,159
uh from the availability of in-network

2546
01:37:30,159 --> 01:37:31,840
computing capabilities that's the the

2547
01:37:31,840 --> 01:37:34,480
premise really as a recap so the

2548
01:37:34,480 --> 01:37:36,560
intention is to provide insights into

2549
01:37:36,560 --> 01:37:38,719
various transport technology areas uh

2550
01:37:38,719 --> 01:37:40,239
research question changes already

2551
01:37:40,239 --> 01:37:42,639
mentioned ongoing efforts and concepts

2552
01:37:42,639 --> 01:37:44,159
that are currently under studies so

2553
01:37:44,159 --> 01:37:45,119
we're not

2554
01:37:45,119 --> 01:37:47,920
limiting ourselves only to existing rfcs

2555
01:37:47,920 --> 01:37:50,080
but we're also looking at ongoing work

2556
01:37:50,080 --> 01:37:52,960
research whatever we can find

2557
01:37:52,960 --> 01:37:55,440
um outline possible future work

2558
01:37:55,440 --> 01:37:57,679
in coin and elsewhere

2559
01:37:57,679 --> 01:37:59,360
that's

2560
01:37:59,360 --> 01:38:00,480
starting with coin but doesn't

2561
01:38:00,480 --> 01:38:01,760
necessarily mean that all of the work

2562
01:38:01,760 --> 01:38:04,159
needs to be done in coin obviously

2563
01:38:04,159 --> 01:38:06,800
and provide that in a gap analysis

2564
01:38:06,800 --> 01:38:08,239
so the goal is to contribute to the

2565
01:38:08,239 --> 01:38:10,480
objectives of coin and i mentioned i i

2566
01:38:10,480 --> 01:38:12,880
quoted here the coin chart or scope

2567
01:38:12,880 --> 01:38:14,400
number four namely the research and

2568
01:38:14,400 --> 01:38:16,480
potential new transport protocol

2569
01:38:16,480 --> 01:38:18,080
required or enabled by in-network

2570
01:38:18,080 --> 01:38:20,000
commute

2571
01:38:20,000 --> 01:38:22,159
resources so that's a dedicated item

2572
01:38:22,159 --> 01:38:23,920
that's chartered really and we believe

2573
01:38:23,920 --> 01:38:26,159
that and hope that the draft contributes

2574
01:38:26,159 --> 01:38:27,600
to that

2575
01:38:27,600 --> 01:38:29,280
the general structure we made a similar

2576
01:38:29,280 --> 01:38:31,440
changes a bit you know aligned uh

2577
01:38:31,440 --> 01:38:34,480
in some sort of locks up to to the um

2578
01:38:34,480 --> 01:38:36,400
changes we also made in the in the use

2579
01:38:36,400 --> 01:38:39,440
case traffic presenters are trying to

2580
01:38:39,440 --> 01:38:41,520
sort this a bit more into various areas

2581
01:38:41,520 --> 01:38:43,119
of discussion so in this case for the

2582
01:38:43,119 --> 01:38:45,840
transport draft we divided the or

2583
01:38:45,840 --> 01:38:48,639
collected the uh separate

2584
01:38:48,639 --> 01:38:50,080
um

2585
01:38:50,080 --> 01:38:51,920
chapters from before into a single

2586
01:38:51,920 --> 01:38:54,719
technology areas uh section now that's a

2587
01:38:54,719 --> 01:38:56,880
section three so that has been entirely

2588
01:38:56,880 --> 01:38:59,440
restructured and everything has been fl

2589
01:38:59,440 --> 01:39:01,840
uh was was was integrated under that

2590
01:39:01,840 --> 01:39:02,880
section

2591
01:39:02,880 --> 01:39:05,280
um and then started with the gap

2592
01:39:05,280 --> 01:39:07,119
analysis this is just to present the

2593
01:39:07,119 --> 01:39:09,760
technology areas and the gap analysis

2594
01:39:09,760 --> 01:39:11,679
more visibly in the structure so there's

2595
01:39:11,679 --> 01:39:13,760
edit here for future extensions

2596
01:39:13,760 --> 01:39:15,520
um

2597
01:39:15,520 --> 01:39:17,280
and in particular with a possible

2598
01:39:17,280 --> 01:39:19,440
formation of future needed work so this

2599
01:39:19,440 --> 01:39:21,600
is much more gearing the the

2600
01:39:21,600 --> 01:39:23,840
i'm the document towards the

2601
01:39:23,840 --> 01:39:26,000
charter item that i mentioned before

2602
01:39:26,000 --> 01:39:28,000
right

2603
01:39:28,000 --> 01:39:29,679
um

2604
01:39:29,679 --> 01:39:31,760
so in section three um so everything

2605
01:39:31,760 --> 01:39:33,760
that really was before in the various i

2606
01:39:33,760 --> 01:39:36,239
think section initially three to seven

2607
01:39:36,239 --> 01:39:38,239
are now all found here

2608
01:39:38,239 --> 01:39:40,719
um and uh and that also helps us then to

2609
01:39:40,719 --> 01:39:42,320
link back from the gap analysis in

2610
01:39:42,320 --> 01:39:43,920
section five into the appropriate

2611
01:39:43,920 --> 01:39:45,679
technology section later on so it makes

2612
01:39:45,679 --> 01:39:47,280
the editing easier

2613
01:39:47,280 --> 01:39:49,679
um there were smaller updates here only

2614
01:39:49,679 --> 01:39:51,440
apart from the larger structural change

2615
01:39:51,440 --> 01:39:53,440
in section 3.1 by linking this to the

2616
01:39:53,440 --> 01:39:55,360
ongoing in the area of work on internet

2617
01:39:55,360 --> 01:39:57,440
addressing but there's a discussion

2618
01:39:57,440 --> 01:40:00,000
going on at the moment and

2619
01:40:00,000 --> 01:40:03,040
the section 3 also added ongoing work in

2620
01:40:03,040 --> 01:40:05,840
the ic energy and then the working group

2621
01:40:05,840 --> 01:40:08,000
um so these were

2622
01:40:08,000 --> 01:40:09,920
content changes as well to the

2623
01:40:09,920 --> 01:40:12,239
structural changes

2624
01:40:12,239 --> 01:40:13,920
um question obviously to the group we

2625
01:40:13,920 --> 01:40:16,800
would like to ask here and happy to get

2626
01:40:16,800 --> 01:40:19,760
any ideas either in the chat or on the

2627
01:40:19,760 --> 01:40:21,360
mailing list is what research question

2628
01:40:21,360 --> 01:40:23,199
related concept ongoing efforts our

2629
01:40:23,199 --> 01:40:24,719
intention is really to

2630
01:40:24,719 --> 01:40:26,960
you know also approach the new community

2631
01:40:26,960 --> 01:40:28,960
with that question specifically and

2632
01:40:28,960 --> 01:40:31,040
because we're sure that we're missing

2633
01:40:31,040 --> 01:40:32,880
concepts simply because we're not aware

2634
01:40:32,880 --> 01:40:34,080
of them or we

2635
01:40:34,080 --> 01:40:35,520
you know haven't worked through all the

2636
01:40:35,520 --> 01:40:37,199
various ones so if you have anything any

2637
01:40:37,199 --> 01:40:38,719
research question in a related concept

2638
01:40:38,719 --> 01:40:40,159
you want to share with us

2639
01:40:40,159 --> 01:40:42,639
please do so

2640
01:40:42,639 --> 01:40:44,880
gap analysis i said we edit this with

2641
01:40:44,880 --> 01:40:46,320
the same subsection structure so you

2642
01:40:46,320 --> 01:40:48,239
will see that the subsection structure

2643
01:40:48,239 --> 01:40:51,679
in section three is mirrored um in order

2644
01:40:51,679 --> 01:40:53,679
to later really have a clear relation

2645
01:40:53,679 --> 01:40:56,960
between technology areas uh the the the

2646
01:40:56,960 --> 01:40:59,040
the seven subsection we have to the

2647
01:40:59,040 --> 01:41:01,360
actual gap analysis in in these various

2648
01:41:01,360 --> 01:41:02,400
areas

2649
01:41:02,400 --> 01:41:03,679
at the moment we only added an

2650
01:41:03,679 --> 01:41:05,360
introductory paragraph outline the

2651
01:41:05,360 --> 01:41:07,199
intentions we have no content in the

2652
01:41:07,199 --> 01:41:09,840
individual sections yet um

2653
01:41:09,840 --> 01:41:10,719
uh

2654
01:41:10,719 --> 01:41:12,400
question obviously also to the list is

2655
01:41:12,400 --> 01:41:14,719
or to the community is to be one such uh

2656
01:41:14,719 --> 01:41:18,480
such uh section or not for coin so we

2657
01:41:18,480 --> 01:41:21,520
believe that it may help us to um

2658
01:41:21,520 --> 01:41:24,000
working towards the charter if we don't

2659
01:41:24,000 --> 01:41:25,840
want this we can remove it but that was

2660
01:41:25,840 --> 01:41:27,360
the suggestion we made and that's a

2661
01:41:27,360 --> 01:41:29,040
question we would like to get some

2662
01:41:29,040 --> 01:41:32,840
feeling from the community

2663
01:41:33,440 --> 01:41:35,360
future plans um

2664
01:41:35,360 --> 01:41:37,520
so we mentioned already the last time

2665
01:41:37,520 --> 01:41:39,520
and we we haven't really made too many

2666
01:41:39,520 --> 01:41:41,040
changes to do that but we want to

2667
01:41:41,040 --> 01:41:42,560
because we also made changes to the use

2668
01:41:42,560 --> 01:41:44,719
cases and i think now that we structure

2669
01:41:44,719 --> 01:41:46,320
the use cases as you could see in ike's

2670
01:41:46,320 --> 01:41:48,719
presentation more clearly around the

2671
01:41:48,719 --> 01:41:50,480
notion of capabilities we want to also

2672
01:41:50,480 --> 01:41:52,880
make clearer linkage to the use cases

2673
01:41:52,880 --> 01:41:55,119
and particular with that taxonomy that's

2674
01:41:55,119 --> 01:41:57,920
being used now in the use case draft in

2675
01:41:57,920 --> 01:42:00,880
a in the next version um of the

2676
01:42:00,880 --> 01:42:02,239
transport draft

2677
01:42:02,239 --> 01:42:04,239
we want to add more existing work um

2678
01:42:04,239 --> 01:42:05,760
we've already uh there was a

2679
01:42:05,760 --> 01:42:07,199
communication between the chairs but

2680
01:42:07,199 --> 01:42:08,960
unfortunately we're a bit too late to

2681
01:42:08,960 --> 01:42:10,880
bring this to the chairs um work that

2682
01:42:10,880 --> 01:42:14,000
has been presented at hotnet's 2021 and

2683
01:42:14,000 --> 01:42:15,920
bharaji the one of the

2684
01:42:15,920 --> 01:42:18,480
co-authors of that piper is actually i

2685
01:42:18,480 --> 01:42:20,000
hope he's still online but at least he

2686
01:42:20,000 --> 01:42:21,440
was online before

2687
01:42:21,440 --> 01:42:22,880
um so we tried to bring more existing

2688
01:42:22,880 --> 01:42:25,040
work here even to the point that we may

2689
01:42:25,040 --> 01:42:26,480
also

2690
01:42:26,480 --> 01:42:29,199
you know have this work that we find

2691
01:42:29,199 --> 01:42:30,960
present to the wider community as i said

2692
01:42:30,960 --> 01:42:32,480
we were a bit late for the agenda for

2693
01:42:32,480 --> 01:42:34,480
this time so it may come in the january

2694
01:42:34,480 --> 01:42:35,600
meeting

2695
01:42:35,600 --> 01:42:38,560
um also similar to the uh use case draft

2696
01:42:38,560 --> 01:42:40,400
to turn the research questions maybe at

2697
01:42:40,400 --> 01:42:41,840
a later stage into some sort of

2698
01:42:41,840 --> 01:42:44,000
requirements language that would allow

2699
01:42:44,000 --> 01:42:47,679
us to uh you know formulate um

2700
01:42:47,679 --> 01:42:49,040
research work

2701
01:42:49,040 --> 01:42:51,119
around these requirements

2702
01:42:51,119 --> 01:42:53,840
um gab analysis to fill this i mean if

2703
01:42:53,840 --> 01:42:54,639
the

2704
01:42:54,639 --> 01:42:56,400
question i asked before is answered

2705
01:42:56,400 --> 01:42:58,000
positively so we would like to have a

2706
01:42:58,000 --> 01:42:59,600
gab in ours because it's useful to have

2707
01:42:59,600 --> 01:43:00,400
that

2708
01:43:00,400 --> 01:43:02,800
we really would need help here would

2709
01:43:02,800 --> 01:43:05,199
invite uh contributors to that

2710
01:43:05,199 --> 01:43:07,520
uh and and and with the view on the

2711
01:43:07,520 --> 01:43:09,679
charter um the question here that was

2712
01:43:09,679 --> 01:43:11,119
the bit of the confusion i had wanted to

2713
01:43:11,119 --> 01:43:13,520
do because i thought the use case craft

2714
01:43:13,520 --> 01:43:16,400
was an rg document already um i think

2715
01:43:16,400 --> 01:43:17,920
it's the transport draft that isn't an

2716
01:43:17,920 --> 01:43:19,520
rg document yet which is why it's

2717
01:43:19,520 --> 01:43:23,199
written on here to maybe adopt that as a

2718
01:43:23,199 --> 01:43:25,520
potential key output towards the

2719
01:43:25,520 --> 01:43:28,080
scope of the charter as an as an rg

2720
01:43:28,080 --> 01:43:30,800
draft as well that at least that was the

2721
01:43:30,800 --> 01:43:32,800
memory that i had about this

2722
01:43:32,800 --> 01:43:36,000
the issue and again to repeat we would

2723
01:43:36,000 --> 01:43:39,040
really welcome contributors gab analysis

2724
01:43:39,040 --> 01:43:41,360
related work new work that exists even

2725
01:43:41,360 --> 01:43:42,320
if you

2726
01:43:42,320 --> 01:43:43,840
just send us links if you can't be

2727
01:43:43,840 --> 01:43:46,080
bothered to get it as a course or into

2728
01:43:46,080 --> 01:43:48,159
properly written up we're happy to get

2729
01:43:48,159 --> 01:43:49,520
any

2730
01:43:49,520 --> 01:43:51,520
material that you'll find that you think

2731
01:43:51,520 --> 01:43:54,239
is relevant should be listed in the

2732
01:43:54,239 --> 01:43:55,360
in the

2733
01:43:55,360 --> 01:43:56,639
uh draft

2734
01:43:56,639 --> 01:43:59,119
please do contact us to do that if you

2735
01:43:59,119 --> 01:44:00,719
want to become a bit more active in

2736
01:44:00,719 --> 01:44:03,440
helping us absolutely welcome um

2737
01:44:03,440 --> 01:44:06,159
certainly wouldn't that would want that

2738
01:44:06,159 --> 01:44:08,400
dirk i think you're spot on in terms of

2739
01:44:08,400 --> 01:44:10,800
what the future and next steps are

2740
01:44:10,800 --> 01:44:14,400
um you have a question from peng liu

2741
01:44:14,400 --> 01:44:16,960
um so pain if you'd like to

2742
01:44:16,960 --> 01:44:18,400
jump in

2743
01:44:18,400 --> 01:44:20,400
um

2744
01:44:20,400 --> 01:44:21,760
just one question

2745
01:44:21,760 --> 01:44:24,080
i see the draft mentioned that live for

2746
01:44:24,080 --> 01:44:27,040
with doncast so i want to ask that if

2747
01:44:27,040 --> 01:44:28,880
the quick could be a

2748
01:44:28,880 --> 01:44:30,880
potential way to help the flow affinity

2749
01:44:30,880 --> 01:44:33,760
or the service equivalence since it has

2750
01:44:33,760 --> 01:44:36,719
fixed the connection id regardless of

2751
01:44:36,719 --> 01:44:39,679
the change of address or part

2752
01:44:39,679 --> 01:44:41,440
yeah

2753
01:44:41,440 --> 01:44:42,960
yes yeah so

2754
01:44:42,960 --> 01:44:45,440
so the the linkage to diecast is still

2755
01:44:45,440 --> 01:44:46,719
in the draft even though i think the

2756
01:44:46,719 --> 01:44:48,560
draft actually have expired

2757
01:44:48,560 --> 01:44:50,320
and there are aspects that are mentioned

2758
01:44:50,320 --> 01:44:51,360
in the

2759
01:44:51,360 --> 01:44:53,840
dyncast work that i think um would need

2760
01:44:53,840 --> 01:44:55,119
to be pulled

2761
01:44:55,119 --> 01:44:56,960
more properly into the draft it's

2762
01:44:56,960 --> 01:45:00,239
correct so it's a little bit um

2763
01:45:00,560 --> 01:45:02,800
a loose issue at the moment of the draft

2764
01:45:02,800 --> 01:45:04,719
it needs to be it needs to be clarified

2765
01:45:04,719 --> 01:45:06,880
yeah

2766
01:45:07,600 --> 01:45:09,199
spencer um

2767
01:45:09,199 --> 01:45:11,440
okay

2768
01:45:14,320 --> 01:45:16,960
yeah i was just asking i'm seeing uh

2769
01:45:16,960 --> 01:45:19,040
answer it also in the chat but uh

2770
01:45:19,040 --> 01:45:20,320
question about

2771
01:45:20,320 --> 01:45:23,679
uh if there was a github repo that we

2772
01:45:23,679 --> 01:45:26,880
could contribute to especially in the

2773
01:45:26,880 --> 01:45:28,560
gap analysis

2774
01:45:28,560 --> 01:45:31,040
i think uh the gap analysis would be

2775
01:45:31,040 --> 01:45:33,040
really helpful if uh

2776
01:45:33,040 --> 01:45:35,119
you all could provide some uh insight

2777
01:45:35,119 --> 01:45:37,360
there

2778
01:45:37,440 --> 01:45:40,480
yes absolutely we we uh uh ike thanks

2779
01:45:40,480 --> 01:45:41,840
for putting the

2780
01:45:41,840 --> 01:45:44,239
um the get up into into the chat i i'd

2781
01:45:44,239 --> 01:45:46,800
seen that i couldn't type quickly enough

2782
01:45:46,800 --> 01:45:49,360
um yes i i would really welcome um and

2783
01:45:49,360 --> 01:45:50,880
and that's certainly a way to contribute

2784
01:45:50,880 --> 01:45:52,480
to that we do the same for the use case

2785
01:45:52,480 --> 01:45:55,360
draft as a separate one for you yeah

2786
01:45:55,360 --> 01:45:57,840
we've uh that's that's really improved

2787
01:45:57,840 --> 01:45:59,119
uh

2788
01:45:59,119 --> 01:46:02,639
us to get get uh input from contributors

2789
01:46:02,639 --> 01:46:05,440
uh in other venues so thank you

2790
01:46:05,440 --> 01:46:08,400
thanks yeah appreciate it

2791
01:46:08,400 --> 01:46:10,639
thanks so much dirk um

2792
01:46:10,639 --> 01:46:13,440
really great progress um i in the

2793
01:46:13,440 --> 01:46:16,159
interest of time we're going to um

2794
01:46:16,159 --> 01:46:18,400
move forward in the program

2795
01:46:18,400 --> 01:46:20,000
um

2796
01:46:20,000 --> 01:46:22,000
let's see we have

2797
01:46:22,000 --> 01:46:23,600
um

2798
01:46:23,600 --> 01:46:26,719
the enhancing security and privacy draft

2799
01:46:26,719 --> 01:46:28,880
and if again if you could condense your

2800
01:46:28,880 --> 01:46:30,480
talk i know we've given you ten minutes

2801
01:46:30,480 --> 01:46:31,840
originally but if you could cut it down

2802
01:46:31,840 --> 01:46:33,760
to seven or eight that would be

2803
01:46:33,760 --> 01:46:35,600
wonderful thank you very much

2804
01:46:35,600 --> 01:46:38,639
okay i will try and i also try to share

2805
01:46:38,639 --> 01:46:41,800
my screen

2806
01:46:43,840 --> 01:46:46,080
okay

2807
01:46:47,840 --> 01:46:51,360
okay do you see the right screen

2808
01:46:51,360 --> 01:46:52,400
we do

2809
01:46:52,400 --> 01:46:55,360
okay great so uh yeah thank you um you

2810
01:46:55,360 --> 01:46:57,440
didn't hear from me in a while but we

2811
01:46:57,440 --> 01:46:59,040
still have the draft on enhancing

2812
01:46:59,040 --> 01:47:01,040
security and privacy with in-network

2813
01:47:01,040 --> 01:47:04,000
computing ongoing and actually a lot has

2814
01:47:04,000 --> 01:47:06,000
been happening in the past month and

2815
01:47:06,000 --> 01:47:08,400
year in this field of research

2816
01:47:08,400 --> 01:47:11,040
so before i go into the update first a

2817
01:47:11,040 --> 01:47:12,880
short recap about the scope and

2818
01:47:12,880 --> 01:47:15,360
intention of this draft so the main

2819
01:47:15,360 --> 01:47:17,600
focus is to implement security and

2820
01:47:17,600 --> 01:47:20,159
privacy mechanisms within the network

2821
01:47:20,159 --> 01:47:23,440
and the idea behind is behind this is to

2822
01:47:23,440 --> 01:47:25,520
reduce the

2823
01:47:25,520 --> 01:47:27,840
latency and also to improve the

2824
01:47:27,840 --> 01:47:30,639
scalability and provide a quicker

2825
01:47:30,639 --> 01:47:33,280
reaction to security incidents

2826
01:47:33,280 --> 01:47:36,560
especially in comparison to middle boxes

2827
01:47:36,560 --> 01:47:37,679
which are

2828
01:47:37,679 --> 01:47:40,320
typically used to provide security

2829
01:47:40,320 --> 01:47:42,080
functionality today

2830
01:47:42,080 --> 01:47:44,560
and potential use cases for this are to

2831
01:47:44,560 --> 01:47:46,320
retrofit security for resource

2832
01:47:46,320 --> 01:47:48,880
restricted or legacy devices which

2833
01:47:48,880 --> 01:47:51,440
cannot implement security themselves

2834
01:47:51,440 --> 01:47:53,840
and this might be also beneficial for

2835
01:47:53,840 --> 01:47:55,280
industrial networks with high

2836
01:47:55,280 --> 01:47:57,760
performance requirements or to provide

2837
01:47:57,760 --> 01:48:01,040
scalable and transparent anonymization

2838
01:48:01,040 --> 01:48:03,040
so the goal of this draft is to provide

2839
01:48:03,040 --> 01:48:05,600
an insight into the potential of coin

2840
01:48:05,600 --> 01:48:08,400
for security and privacy and to show

2841
01:48:08,400 --> 01:48:09,920
research questions and telephone

2842
01:48:09,920 --> 01:48:12,920
inspections

2843
01:48:15,070 --> 01:48:38,639
[Laughter]

2844
01:48:38,639 --> 01:48:41,639
okay

2845
01:48:47,360 --> 01:48:50,360
yes

2846
01:48:55,440 --> 01:49:03,650
[Laughter]

2847
01:49:10,960 --> 01:49:14,840
so first related

2848
01:49:17,199 --> 01:49:20,199
um

2849
01:49:27,760 --> 01:49:35,350
[Laughter]

2850
01:49:39,520 --> 01:49:42,719
sadly aina can you hear us

2851
01:49:42,719 --> 01:49:44,880
oh aina can you hear us

2852
01:49:44,880 --> 01:49:46,080
we're having

2853
01:49:46,080 --> 01:49:48,239
terrible difficulty hearing you you're

2854
01:49:48,239 --> 01:49:50,080
completely broken

2855
01:49:50,080 --> 01:49:52,000
up um

2856
01:49:52,000 --> 01:49:55,199
we don't oh that sounded fine uh i

2857
01:49:55,199 --> 01:49:57,360
wonder if it's your headphone usually i

2858
01:49:57,360 --> 01:49:58,639
don't have

2859
01:49:58,639 --> 01:50:02,320
well when you continue we i don't

2860
01:50:03,840 --> 01:50:06,400
uh so i'm just wondering i don't know if

2861
01:50:06,400 --> 01:50:08,320
anybody heard anything

2862
01:50:08,320 --> 01:50:10,800
unfortunately because your your audio

2863
01:50:10,800 --> 01:50:12,320
problems started almost when you

2864
01:50:12,320 --> 01:50:15,040
immediately when you started presenting

2865
01:50:15,040 --> 01:50:17,280
turned off your video to reclaim some

2866
01:50:17,280 --> 01:50:20,000
bandwidth but um

2867
01:50:20,000 --> 01:50:21,199
could you

2868
01:50:21,199 --> 01:50:23,360
okay so

2869
01:50:23,360 --> 01:50:24,880
and let's see if we have a little better

2870
01:50:24,880 --> 01:50:26,480
luck i mean really it's been broken up

2871
01:50:26,480 --> 01:50:29,199
since the beginning

2872
01:50:29,599 --> 01:50:32,000
okay let me hear you now

2873
01:50:32,000 --> 01:50:35,040
but now you're showing that

2874
01:50:35,040 --> 01:50:37,599
uh we i think we got about one or two

2875
01:50:37,599 --> 01:50:40,639
yeah if you could go back

2876
01:50:40,639 --> 01:50:43,599
um yeah well

2877
01:50:43,679 --> 01:50:45,679
okay so you didn't hear anything that's

2878
01:50:45,679 --> 01:50:47,840
that i think we got we were on your

2879
01:50:47,840 --> 01:50:49,520
first slide we looking thank you very

2880
01:50:49,520 --> 01:50:50,880
very much

2881
01:50:50,880 --> 01:50:53,360
this slide we lost entirely and and

2882
01:50:53,360 --> 01:50:55,520
again we're sort of pressed for time so

2883
01:50:55,520 --> 01:50:56,400
um

2884
01:50:56,400 --> 01:50:58,560
okay okay let's make it crazy start

2885
01:50:58,560 --> 01:50:59,520
again

2886
01:50:59,520 --> 01:51:01,840
yeah sure maybe okay to make it quick

2887
01:51:01,840 --> 01:51:03,840
the focus is on implementing security

2888
01:51:03,840 --> 01:51:05,599
and privacy mechanisms within the

2889
01:51:05,599 --> 01:51:06,560
network

2890
01:51:06,560 --> 01:51:09,199
um yeah for better performance and

2891
01:51:09,199 --> 01:51:10,800
faster reaction

2892
01:51:10,800 --> 01:51:12,880
um and use cases are for example

2893
01:51:12,880 --> 01:51:17,400
retrofitting security forces

2894
01:51:36,880 --> 01:51:42,850
[Laughter]

2895
01:51:44,000 --> 01:51:47,000
um

2896
01:52:10,800 --> 01:52:13,800
um

2897
01:52:24,320 --> 01:52:26,480
okay i know

2898
01:52:26,480 --> 01:52:28,400
i know i think we're going to we're

2899
01:52:28,400 --> 01:52:30,960
going to need to defer your presentation

2900
01:52:30,960 --> 01:52:33,599
every time you we we speak it's fine

2901
01:52:33,599 --> 01:52:35,360
then as you um

2902
01:52:35,360 --> 01:52:37,599
present the audio is really okay i

2903
01:52:37,599 --> 01:52:40,560
understand that's amazing sadly um

2904
01:52:40,560 --> 01:52:43,800
i'm sorry

2905
01:52:44,400 --> 01:52:45,280
yeah

2906
01:52:45,280 --> 01:52:47,040
um

2907
01:52:47,040 --> 01:52:48,960
really too bad yes i know hannes is

2908
01:52:48,960 --> 01:52:51,119
saying he really wants to hear this as

2909
01:52:51,119 --> 01:52:52,960
do with the rest of us and now as we

2910
01:52:52,960 --> 01:52:54,880
converse it's fine but as you can

2911
01:52:54,880 --> 01:52:56,800
presentation mode it's completely broken

2912
01:52:56,800 --> 01:52:57,520
up

2913
01:52:57,520 --> 01:52:58,639
um

2914
01:52:58,639 --> 01:53:00,320
so i think we're gonna

2915
01:53:00,320 --> 01:53:02,480
yes it's very strange i wonder if it has

2916
01:53:02,480 --> 01:53:04,320
something to do i can't tell whether you

2917
01:53:04,320 --> 01:53:06,000
have a headphone or not but yeah there

2918
01:53:06,000 --> 01:53:07,920
may be a way that you could just share

2919
01:53:07,920 --> 01:53:09,360
the slides for her in case it's the

2920
01:53:09,360 --> 01:53:11,360
slideshare i'm gonna have to do somebody

2921
01:53:11,360 --> 01:53:13,840
already have it down let's see how do i

2922
01:53:13,840 --> 01:53:15,760
display it if i because it really seems

2923
01:53:15,760 --> 01:53:17,199
like we can hear a perfectly well as

2924
01:53:17,199 --> 01:53:20,879
long as he's not doing slight sharing

2925
01:53:21,040 --> 01:53:23,440
okay let me let me

2926
01:53:23,440 --> 01:53:26,239
download and um

2927
01:53:26,239 --> 01:53:28,719
let's see

2928
01:53:28,719 --> 01:53:31,040
where do i go to get the okay so i've

2929
01:53:31,040 --> 01:53:34,159
uploaded everything to manage the slides

2930
01:53:34,159 --> 01:53:37,520
and then if i want to

2931
01:53:37,520 --> 01:53:40,840
show this

2932
01:53:41,360 --> 01:53:44,880
button on the left hand side near the um

2933
01:53:44,880 --> 01:53:46,400
near where you mute and unmute on the

2934
01:53:46,400 --> 01:53:49,400
left

2935
01:53:56,159 --> 01:53:57,599
it's right next to the screen share

2936
01:53:57,599 --> 01:54:00,000
button

2937
01:54:02,400 --> 01:54:03,920
i'm just not

2938
01:54:03,920 --> 01:54:07,159
hang on

2939
01:54:10,480 --> 01:54:11,520
oh

2940
01:54:11,520 --> 01:54:14,639
got it sorry

2941
01:54:14,880 --> 01:54:16,639
all right

2942
01:54:16,639 --> 01:54:18,080
new user here

2943
01:54:18,080 --> 01:54:20,800
uh cher

2944
01:54:21,280 --> 01:54:22,639
okay

2945
01:54:22,639 --> 01:54:24,570
are you all seeing it now

2946
01:54:24,570 --> 01:54:27,280
[Music]

2947
01:54:27,280 --> 01:54:28,880
okay

2948
01:54:28,880 --> 01:54:32,000
all right let's start this again so you

2949
01:54:32,000 --> 01:54:36,760
uh you again missed everything

2950
01:54:41,440 --> 01:54:43,599
yes yeah

2951
01:54:43,599 --> 01:54:45,599
and we only have five minutes so i think

2952
01:54:45,599 --> 01:54:48,400
if you could just

2953
01:54:48,960 --> 01:54:50,960
give us the high level we're going to

2954
01:54:50,960 --> 01:54:52,560
have to punt on other

2955
01:54:52,560 --> 01:54:55,040
uh presentations sadly

2956
01:54:55,040 --> 01:54:56,480
go for it we'll give you the last five

2957
01:54:56,480 --> 01:54:58,000
minutes and we'll take the and the very

2958
01:54:58,000 --> 01:54:59,920
last minute

2959
01:54:59,920 --> 01:55:01,520
yeah the next tell me which slide to

2960
01:55:01,520 --> 01:55:03,440
start with

2961
01:55:03,440 --> 01:55:05,119
oh yes

2962
01:55:05,119 --> 01:55:08,880
okay so um yeah very quickly there is um

2963
01:55:08,880 --> 01:55:11,599
work which tries to implement um

2964
01:55:11,599 --> 01:55:13,920
encryption also secure cryptographic

2965
01:55:13,920 --> 01:55:16,719
functions for encryption and hashing in

2966
01:55:16,719 --> 01:55:18,639
the data plane so this lays the

2967
01:55:18,639 --> 01:55:20,719
foundation for security and privacy

2968
01:55:20,719 --> 01:55:23,280
applications such as implementing

2969
01:55:23,280 --> 01:55:26,719
security standards for example ipsec or

2970
01:55:26,719 --> 01:55:29,360
macseg in the data plane and it might

2971
01:55:29,360 --> 01:55:31,679
also allow for onion routing or message

2972
01:55:31,679 --> 01:55:34,719
authentication in the future

2973
01:55:34,719 --> 01:55:37,520
the next slide

2974
01:55:38,960 --> 01:55:41,520
yeah there is also an effort to

2975
01:55:41,520 --> 01:55:43,280
implement authentication in the data

2976
01:55:43,280 --> 01:55:46,239
plane by offering basic mechanisms like

2977
01:55:46,239 --> 01:55:50,400
port knocking or one-time passwords

2978
01:55:50,400 --> 01:55:52,320
and this might allow for continuous

2979
01:55:52,320 --> 01:55:54,880
authentication without latency overhead

2980
01:55:54,880 --> 01:55:57,679
or additional middle boxes

2981
01:55:57,679 --> 01:55:58,840
then next

2982
01:55:58,840 --> 01:56:00,639
slide

2983
01:56:00,639 --> 01:56:03,599
um other work is about allowing scalable

2984
01:56:03,599 --> 01:56:07,599
transparent oh obviously yes

2985
01:56:07,599 --> 01:56:08,880
no problem

2986
01:56:08,880 --> 01:56:11,760
yeah so our work is

2987
01:56:11,760 --> 01:56:13,679
available transparent and lightweight

2988
01:56:13,679 --> 01:56:15,920
anonymization in the data plane for

2989
01:56:15,920 --> 01:56:18,800
example by rewriting source addresses

2990
01:56:18,800 --> 01:56:21,520
and hiding path information by using

2991
01:56:21,520 --> 01:56:23,599
randomization

2992
01:56:23,599 --> 01:56:26,560
or encrypting ipv4 addresses to

2993
01:56:26,560 --> 01:56:29,119
obfuscate traffic and the idea behind

2994
01:56:29,119 --> 01:56:31,679
this is to address the performance and

2995
01:56:31,679 --> 01:56:34,639
usability issues of existing anonymity

2996
01:56:34,639 --> 01:56:37,520
tools like tor

2997
01:56:37,520 --> 01:56:40,639
okay the next slide

2998
01:56:41,520 --> 01:56:42,400
um

2999
01:56:42,400 --> 01:56:44,960
yeah we can also use um computing in the

3000
01:56:44,960 --> 01:56:48,159
network to improve intrusion detection

3001
01:56:48,159 --> 01:56:49,040
um

3002
01:56:49,040 --> 01:56:52,239
one one potential here is to allow for

3003
01:56:52,239 --> 01:56:54,400
inline detection and a quick reaction to

3004
01:56:54,400 --> 01:56:56,159
anomalies but we can also reduce the

3005
01:56:56,159 --> 01:56:58,000
load on existing intrusion detection

3006
01:56:58,000 --> 01:57:00,480
systems and this is exactly what lewis

3007
01:57:00,480 --> 01:57:03,280
and i'll do so here they apply

3008
01:57:03,280 --> 01:57:05,360
rule-based pre-filtering in the data

3009
01:57:05,360 --> 01:57:08,840
plane and by that they achieve a traffic

3010
01:57:08,840 --> 01:57:12,800
reduction of up to 75 percent

3011
01:57:12,800 --> 01:57:16,400
at the actual ids

3012
01:57:16,480 --> 01:57:19,360
okay next slide

3013
01:57:19,760 --> 01:57:22,000
and last we

3014
01:57:22,000 --> 01:57:23,840
looked into network monitoring which can

3015
01:57:23,840 --> 01:57:25,360
be for example used for network

3016
01:57:25,360 --> 01:57:28,320
forensics and here soundcheck i for

3017
01:57:28,320 --> 01:57:31,040
example propose flow monitoring on p4

3018
01:57:31,040 --> 01:57:33,280
based hardware switches so they

3019
01:57:33,280 --> 01:57:35,599
pre-process packets in the data plane

3020
01:57:35,599 --> 01:57:37,760
and then very efficiently create floor

3021
01:57:37,760 --> 01:57:40,000
records in the control plane and this

3022
01:57:40,000 --> 01:57:42,000
offers a high performance and cost

3023
01:57:42,000 --> 01:57:43,440
efficient

3024
01:57:43,440 --> 01:57:46,639
alternative for accurate flow monitoring

3025
01:57:46,639 --> 01:57:48,560
in comparison to

3026
01:57:48,560 --> 01:57:50,840
existing

3027
01:57:50,840 --> 01:57:54,960
solutions okay the next slide

3028
01:57:56,400 --> 01:57:59,679
um yeah so to conclude we see

3029
01:57:59,679 --> 01:58:01,440
increasing interest of research

3030
01:58:01,440 --> 01:58:03,920
community and that underlines our

3031
01:58:03,920 --> 01:58:05,760
intuition

3032
01:58:05,760 --> 01:58:08,239
about the possibilities that coin

3033
01:58:08,239 --> 01:58:10,560
provides for security and

3034
01:58:10,560 --> 01:58:13,040
privacy and also its relevance

3035
01:58:13,040 --> 01:58:14,719
and this is confirmed by recent

3036
01:58:14,719 --> 01:58:17,280
publications which match the ideas of

3037
01:58:17,280 --> 01:58:19,520
our draft and they're published at high

3038
01:58:19,520 --> 01:58:22,880
rank values for example usenix security

3039
01:58:22,880 --> 01:58:25,199
and existing work also provides first

3040
01:58:25,199 --> 01:58:28,000
proofs of concept which show that

3041
01:58:28,000 --> 01:58:30,159
implementing security

3042
01:58:30,159 --> 01:58:32,719
in the network is actually feasible

3043
01:58:32,719 --> 01:58:35,040
so we derived from these observations

3044
01:58:35,040 --> 01:58:36,880
that enhancing security and privacy

3045
01:58:36,880 --> 01:58:39,360
within network computing actually turned

3046
01:58:39,360 --> 01:58:41,679
into a hot research topic and there are

3047
01:58:41,679 --> 01:58:43,920
many exciting ideas left to investigate

3048
01:58:43,920 --> 01:58:45,199
in the future

3049
01:58:45,199 --> 01:58:47,920
therefore this draft underlines the

3050
01:58:47,920 --> 01:58:50,880
potential of coin to benefit diverse and

3051
01:58:50,880 --> 01:58:53,840
quite significant applications which

3052
01:58:53,840 --> 01:58:57,840
also go behind beyond typical networking

3053
01:58:57,840 --> 01:58:59,520
and um

3054
01:58:59,520 --> 01:59:01,679
yeah to drive this draft forward now we

3055
01:59:01,679 --> 01:59:03,599
are strongly looking for your feedback

3056
01:59:03,599 --> 01:59:05,920
and also contributions

3057
01:59:05,920 --> 01:59:07,840
so if you're curious about this draft or

3058
01:59:07,840 --> 01:59:10,880
have any comments just drop me an email

3059
01:59:10,880 --> 01:59:12,719
and otherwise i thank you for your

3060
01:59:12,719 --> 01:59:14,080
attention

3061
01:59:14,080 --> 01:59:17,119
and i'm yeah looking forward to any

3062
01:59:17,119 --> 01:59:19,759
inquiries

3063
01:59:20,880 --> 01:59:23,599
okay that's it

3064
01:59:27,119 --> 01:59:29,760
thank you so much uh really sorry about

3065
01:59:29,760 --> 01:59:32,080
yeah that was true the network itself

3066
01:59:32,080 --> 01:59:33,920
got in the way of your presentation but

3067
01:59:33,920 --> 01:59:36,560
um thank you for that terrific update

3068
01:59:36,560 --> 01:59:37,360
yeah

3069
01:59:37,360 --> 01:59:38,480
some of the

3070
01:59:38,480 --> 01:59:40,719
research that's out there

3071
01:59:40,719 --> 01:59:42,080
any questions

3072
01:59:42,080 --> 01:59:44,880
the audience in our last minute

3073
01:59:44,880 --> 01:59:46,560
i think where was the question in the

3074
01:59:46,560 --> 01:59:49,119
chat before but i can um get to this

3075
01:59:49,119 --> 01:59:51,840
offline i think

3076
01:59:51,840 --> 01:59:54,159
okay

3077
01:59:54,639 --> 01:59:56,400
okay that sounds good

3078
01:59:56,400 --> 01:59:58,320
um

3079
01:59:58,320 --> 01:59:59,840
great

3080
01:59:59,840 --> 02:00:01,520
then i will stop the slideshare thank

3081
02:00:01,520 --> 02:00:03,760
you so much for persevering everybody uh

3082
02:00:03,760 --> 02:00:06,320
in our last minute i think um they're

3083
02:00:06,320 --> 02:00:08,000
really two topics

3084
02:00:08,000 --> 02:00:10,880
uh one is just that if you have don't

3085
02:00:10,880 --> 02:00:12,880
know already that hot nets is going on

3086
02:00:12,880 --> 02:00:14,320
in parallel this week and there's some

3087
02:00:14,320 --> 02:00:15,920
very interesting work

3088
02:00:15,920 --> 02:00:18,320
um and the second point of interest is

3089
02:00:18,320 --> 02:00:19,679
that of course we've been threatening to

3090
02:00:19,679 --> 02:00:22,560
have um an interim in order to um review

3091
02:00:22,560 --> 02:00:23,679
our scope

3092
02:00:23,679 --> 02:00:25,679
and i think we really we would like to

3093
02:00:25,679 --> 02:00:29,280
do that um halfway between this ietf and

3094
02:00:29,280 --> 02:00:30,239
the next

3095
02:00:30,239 --> 02:00:33,040
um so stay tuned for that we welcome

3096
02:00:33,040 --> 02:00:35,119
your inputs on the um

3097
02:00:35,119 --> 02:00:37,440
mailing list and thank you to so many of

3098
02:00:37,440 --> 02:00:39,280
you for sticking it out despite the

3099
02:00:39,280 --> 02:00:41,199
network errors for arriving at whatever

3100
02:00:41,199 --> 02:00:42,000
hour

3101
02:00:42,000 --> 02:00:43,760
it is in your time zone many of those

3102
02:00:43,760 --> 02:00:45,920
time zones it's an inconvenient hour so

3103
02:00:45,920 --> 02:00:48,239
thank you for being here and to all the

3104
02:00:48,239 --> 02:00:50,880
presenters uh for the

3105
02:00:50,880 --> 02:00:52,080
terrific

3106
02:00:52,080 --> 02:00:54,159
presentations i know there's been a

3107
02:00:54,159 --> 02:00:55,840
really healthy dialogue in the chat

3108
02:00:55,840 --> 02:00:58,639
window so i look forward to um

3109
02:00:58,639 --> 02:01:00,639
sharing some of that uh we we all look

3110
02:01:00,639 --> 02:01:02,239
forward to sharing some of that in the

3111
02:01:02,239 --> 02:01:04,080
minutes um

3112
02:01:04,080 --> 02:01:05,840
so thank you once again since we're at

3113
02:01:05,840 --> 02:01:07,920
the top of the hour for for being here

3114
02:01:07,920 --> 02:01:09,520
any other comments

3115
02:01:09,520 --> 02:01:12,880
maurice jose or jeffrey

3116
02:01:14,800 --> 02:01:16,880
okay i think thank you very very much

3117
02:01:16,880 --> 02:01:19,040
everyone and uh

3118
02:01:19,040 --> 02:01:22,480
yes see you on the mailing list

3119
02:01:22,480 --> 02:01:26,880
and um and see you in um hopefully in

3120
02:01:26,880 --> 02:01:29,280
person soon

3121
02:01:29,280 --> 02:01:31,360
and thank you to those who helped hand

3122
02:01:31,360 --> 02:01:33,840
hold us through some of the

3123
02:01:33,840 --> 02:01:35,440
user interface issues that was greatly

3124
02:01:35,440 --> 02:01:39,519
appreciated in real time thank you

3125
02:01:41,280 --> 02:01:43,040
have a great day

3126
02:01:43,040 --> 02:01:47,480
evening afternoon bye-bye

3127
02:02:37,599 --> 02:02:39,679
you

