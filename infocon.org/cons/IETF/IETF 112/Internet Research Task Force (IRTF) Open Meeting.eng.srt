1
00:03:58,000 --> 00:03:59,760
all right so i make it a couple of

2
00:03:59,760 --> 00:04:01,920
minutes after four o'clock uh and i see

3
00:04:01,920 --> 00:04:04,959
that all of uh award winners have joined

4
00:04:04,959 --> 00:04:06,879
and the number of people are still

5
00:04:06,879 --> 00:04:09,200
joining seems to be slowing down so uh

6
00:04:09,200 --> 00:04:11,040
in that case uh i guess we should get

7
00:04:11,040 --> 00:04:12,879
started

8
00:04:12,879 --> 00:04:15,360
uh so my name is colin perkins from the

9
00:04:15,360 --> 00:04:17,680
the university of glasgow uh i'm the

10
00:04:17,680 --> 00:04:20,798
irtf chair and and this is the irtf open

11
00:04:20,798 --> 00:04:22,639
meeting for

12
00:04:22,639 --> 00:04:26,440
itf 112.

13
00:04:28,320 --> 00:04:30,720
um so i want to to start with the uh the

14
00:04:30,720 --> 00:04:33,280
usual note well and reminder of the

15
00:04:33,280 --> 00:04:36,160
intellectual property rules for the irtf

16
00:04:36,160 --> 00:04:37,120
um

17
00:04:37,120 --> 00:04:41,280
the irtf follows uh the the same sorts

18
00:04:41,280 --> 00:04:42,880
of intellectual property disclosure

19
00:04:42,880 --> 00:04:46,160
rules as the ietf um you know if if

20
00:04:46,160 --> 00:04:49,680
you're aware of uh contributions um

21
00:04:49,680 --> 00:04:51,840
if you're aware of patents or patents

22
00:04:51,840 --> 00:04:53,360
applications that

23
00:04:53,360 --> 00:04:54,840
cover the

24
00:04:54,840 --> 00:04:57,840
contributions that you make that are

25
00:04:57,840 --> 00:05:00,080
controlled by you or your sponsor you do

26
00:05:00,080 --> 00:05:03,039
need to disclose that or not participate

27
00:05:03,039 --> 00:05:04,639
in the discussion

28
00:05:04,639 --> 00:05:05,520
um

29
00:05:05,520 --> 00:05:07,919
perhaps a difference from the ietf

30
00:05:07,919 --> 00:05:11,199
disclosure rules is that the irtf

31
00:05:11,199 --> 00:05:13,600
expects you to file these disclosures in

32
00:05:13,600 --> 00:05:17,199
in a timely manner in a period of um

33
00:05:17,199 --> 00:05:19,680
days or weeks rather than months

34
00:05:19,680 --> 00:05:22,240
uh and we expect the the most liberal uh

35
00:05:22,240 --> 00:05:24,960
licensing terms possible are made

36
00:05:24,960 --> 00:05:28,320
available for irtf stream documents

37
00:05:28,320 --> 00:05:29,759
and if you need more details about this

38
00:05:29,759 --> 00:05:32,479
process um the um

39
00:05:32,479 --> 00:05:35,199
the rfc is listed on the slide rfc is

40
00:05:35,199 --> 00:05:37,440
5743

41
00:05:37,440 --> 00:05:38,880
78

42
00:05:38,880 --> 00:05:42,560
the 8179 uh give details of this

43
00:05:42,560 --> 00:05:44,680
uh and the url iot

44
00:05:44,680 --> 00:05:48,320
irtf.org policies slash ipr also has

45
00:05:48,320 --> 00:05:50,560
links to these and more details on on

46
00:05:50,560 --> 00:05:53,720
the process

47
00:05:54,960 --> 00:05:57,840
um also uh as should perhaps not be a

48
00:05:57,840 --> 00:05:58,880
surprise

49
00:05:58,880 --> 00:06:02,319
the irtf makes recordings of online and

50
00:06:02,319 --> 00:06:04,319
in-person meetings and this includes

51
00:06:04,319 --> 00:06:06,479
audio video and photographs

52
00:06:06,479 --> 00:06:07,919
and so on

53
00:06:07,919 --> 00:06:10,319
uh this session is being streamed uh

54
00:06:10,319 --> 00:06:12,800
live uh i believe we're going out on on

55
00:06:12,800 --> 00:06:16,319
youtube um as well as being uh

56
00:06:16,319 --> 00:06:18,479
the the meat echo session and as well as

57
00:06:18,479 --> 00:06:21,440
being recorded and the recording will be

58
00:06:21,440 --> 00:06:24,800
be on youtube after the session as well

59
00:06:24,800 --> 00:06:25,600
um

60
00:06:25,600 --> 00:06:28,319
if you participate online um if you turn

61
00:06:28,319 --> 00:06:30,319
on your camera microphone and make it

62
00:06:30,319 --> 00:06:33,120
the microphone then you are

63
00:06:33,120 --> 00:06:35,199
in the recordings

64
00:06:35,199 --> 00:06:37,840
and i'd also remind you that the chat

65
00:06:37,840 --> 00:06:38,800
logs

66
00:06:38,800 --> 00:06:41,360
in all of these meet echo sessions uh

67
00:06:41,360 --> 00:06:43,199
are recorded and they're available on

68
00:06:43,199 --> 00:06:45,120
the ietf site so what you put into the

69
00:06:45,120 --> 00:06:48,919
chat is also recorded

70
00:06:51,360 --> 00:06:53,120
i'd also like to

71
00:06:53,120 --> 00:06:55,199
remind you that we we have a code of

72
00:06:55,199 --> 00:07:00,160
conduct in the irtf and in the ietf

73
00:07:00,160 --> 00:07:01,120
and

74
00:07:01,120 --> 00:07:04,960
you know as um a participant uh as an

75
00:07:04,960 --> 00:07:07,759
attendee at the the irtf sessions uh you

76
00:07:07,759 --> 00:07:11,120
agree to um work uh respectfully with

77
00:07:11,120 --> 00:07:13,919
the other participants in the session um

78
00:07:13,919 --> 00:07:15,759
you agree to to behave in in a

79
00:07:15,759 --> 00:07:18,319
professional respectful uh

80
00:07:18,319 --> 00:07:20,479
and polite manner

81
00:07:20,479 --> 00:07:22,639
um and you know we we have the code of

82
00:07:22,639 --> 00:07:24,319
conduct we have the anterior harassment

83
00:07:24,319 --> 00:07:25,919
procedures which you see linked from the

84
00:07:25,919 --> 00:07:28,160
slide that go into a lot more detail

85
00:07:28,160 --> 00:07:31,120
about what we mean on that

86
00:07:31,120 --> 00:07:33,199
if you have any concerns about behavior

87
00:07:33,199 --> 00:07:36,240
of the uh various participants um the

88
00:07:36,240 --> 00:07:38,560
the ombuds team uh again linked from the

89
00:07:38,560 --> 00:07:40,560
slide um

90
00:07:40,560 --> 00:07:43,440
is available to to

91
00:07:43,440 --> 00:07:46,400
investigate those and and to act as a

92
00:07:46,400 --> 00:07:48,400
point of contact if you have any any

93
00:07:48,400 --> 00:07:50,000
issues with the

94
00:07:50,000 --> 00:07:52,960
the the participants in the session

95
00:07:52,960 --> 00:07:55,280
if you provide any personal data

96
00:07:55,280 --> 00:07:57,120
and in order to register you would have

97
00:07:57,120 --> 00:07:58,720
had to provide at least a little bit of

98
00:07:58,720 --> 00:08:00,560
personal data that's handled in

99
00:08:00,560 --> 00:08:02,960
accordance with the its privacy policy

100
00:08:02,960 --> 00:08:06,479
and again that's linked from the slide

101
00:08:11,199 --> 00:08:12,720
so what are the

102
00:08:12,720 --> 00:08:16,240
the goals of the irtf

103
00:08:16,240 --> 00:08:20,080
well the irtf is is there to provide a a

104
00:08:20,080 --> 00:08:24,240
forum for longer term research issues um

105
00:08:24,240 --> 00:08:26,800
while the the the parallel organization

106
00:08:26,800 --> 00:08:30,160
that the ietf focuses on um shorter term

107
00:08:30,160 --> 00:08:31,680
issues relating to engineering and

108
00:08:31,680 --> 00:08:34,560
making standards

109
00:08:34,640 --> 00:08:36,880
the goal of the irtf is very much to

110
00:08:36,880 --> 00:08:38,719
conduct research

111
00:08:38,719 --> 00:08:40,320
we're not a standards development

112
00:08:40,320 --> 00:08:42,559
organization

113
00:08:42,559 --> 00:08:45,600
and while the irtf research groups can

114
00:08:45,600 --> 00:08:49,600
publish uh informational or experimental

115
00:08:49,600 --> 00:08:52,480
documents in the rf series the primary

116
00:08:52,480 --> 00:08:54,720
goal of the research groups is not

117
00:08:54,720 --> 00:08:58,080
publishing rfcs publishing documents

118
00:08:58,080 --> 00:09:00,560
uh it's to promote um collaborations

119
00:09:00,560 --> 00:09:03,360
it's to promote research to promote

120
00:09:03,360 --> 00:09:05,600
development of research ideas that

121
00:09:05,600 --> 00:09:07,760
relate to the the internet protocols

122
00:09:07,760 --> 00:09:10,000
applications um architectures and

123
00:09:10,000 --> 00:09:12,640
technologies

124
00:09:12,640 --> 00:09:15,440
uh we have a very nice rfc that spencer

125
00:09:15,440 --> 00:09:18,600
dawkins wrote a few years ago uh rfc

126
00:09:18,600 --> 00:09:22,480
7418 which gives an irtf primer for atf

127
00:09:22,480 --> 00:09:24,560
participants which talks about some of

128
00:09:24,560 --> 00:09:26,720
the the differences between the goals of

129
00:09:26,720 --> 00:09:29,360
the irtf and the ietf

130
00:09:29,360 --> 00:09:31,440
um so if you're not familiar with that

131
00:09:31,440 --> 00:09:33,519
uh i would very much encourage you to to

132
00:09:33,519 --> 00:09:37,160
have a look at that

133
00:09:40,160 --> 00:09:43,040
the irtf is arranged as a set of

134
00:09:43,040 --> 00:09:45,200
research groups

135
00:09:45,200 --> 00:09:46,800
we have

136
00:09:46,800 --> 00:09:48,480
five research groups which are

137
00:09:48,480 --> 00:09:50,720
highlighted in dark blue on this slide

138
00:09:50,720 --> 00:09:53,760
which are still to meet later this week

139
00:09:53,760 --> 00:09:56,160
uh the crypto forum research group uh

140
00:09:56,160 --> 00:09:58,720
develops cryptographic algorithms uh

141
00:09:58,720 --> 00:10:00,480
looks for an understanding of various

142
00:10:00,480 --> 00:10:03,519
cryptographic algorithms and techniques

143
00:10:03,519 --> 00:10:06,000
and many of those

144
00:10:06,000 --> 00:10:09,839
are used in ietf standards

145
00:10:09,839 --> 00:10:11,760
the computation in the network group is

146
00:10:11,760 --> 00:10:14,160
looking at all aspects of in-network

147
00:10:14,160 --> 00:10:16,959
computation programmable networks

148
00:10:16,959 --> 00:10:18,480
and the impact

149
00:10:18,480 --> 00:10:20,160
of programmable

150
00:10:20,160 --> 00:10:21,040
um

151
00:10:21,040 --> 00:10:23,279
forwarding hardware programmable control

152
00:10:23,279 --> 00:10:26,880
planes uh on the internet architecture

153
00:10:26,880 --> 00:10:29,200
uh the pathway networking group uh is

154
00:10:29,200 --> 00:10:31,040
looking at um

155
00:10:31,040 --> 00:10:33,200
the the interplay between the end points

156
00:10:33,200 --> 00:10:35,200
and path elements and how that

157
00:10:35,200 --> 00:10:37,360
communication should happen

158
00:10:37,360 --> 00:10:39,519
uh the privacy enhancements uh an

159
00:10:39,519 --> 00:10:42,000
assessments group uh which uh

160
00:10:42,000 --> 00:10:43,920
my apologies to the chairs i noticed

161
00:10:43,920 --> 00:10:47,120
this was listed as a still a proposed

162
00:10:47,120 --> 00:10:48,560
group rather than a full group in the

163
00:10:48,560 --> 00:10:50,399
plenary slides

164
00:10:50,399 --> 00:10:51,839
is looking at privacy enhancing

165
00:10:51,839 --> 00:10:53,440
technologies

166
00:10:53,440 --> 00:10:54,720
and the human rights protocol

167
00:10:54,720 --> 00:10:56,720
considerations group is is looking at

168
00:10:56,720 --> 00:10:58,079
the impact

169
00:10:58,079 --> 00:10:59,279
of

170
00:10:59,279 --> 00:11:02,240
standards on human rights and the way we

171
00:11:02,240 --> 00:11:02,959
can

172
00:11:02,959 --> 00:11:06,000
reflect uh various um principles from

173
00:11:06,000 --> 00:11:08,959
humans in into the um the types of

174
00:11:08,959 --> 00:11:11,200
protocols we we develop

175
00:11:11,200 --> 00:11:14,399
in the community

176
00:11:14,399 --> 00:11:15,760
we also have a number of groups which

177
00:11:15,760 --> 00:11:20,320
have either met uh or um

178
00:11:20,320 --> 00:11:22,160
even met already or are not meeting at

179
00:11:22,160 --> 00:11:25,040
this session uh including the the map rg

180
00:11:25,040 --> 00:11:27,360
which uh had a bunch of interesting

181
00:11:27,360 --> 00:11:29,760
measurement papers uh looking at the

182
00:11:29,760 --> 00:11:31,839
network architecture in in the previous

183
00:11:31,839 --> 00:11:33,040
session

184
00:11:33,040 --> 00:11:34,480
um and

185
00:11:34,480 --> 00:11:36,720
the network management global access and

186
00:11:36,720 --> 00:11:38,399
congestion control groups which met

187
00:11:38,399 --> 00:11:41,399
yesterday

188
00:11:43,760 --> 00:11:47,760
the research groups in in the irtf um

189
00:11:47,760 --> 00:11:50,480
require um some understanding of of the

190
00:11:50,480 --> 00:11:52,399
various research questions and problems

191
00:11:52,399 --> 00:11:53,920
that that are interesting in a

192
00:11:53,920 --> 00:11:55,440
particular area

193
00:11:55,440 --> 00:11:57,200
are looking into understanding that the

194
00:11:57,200 --> 00:11:59,120
relevance of those problems and

195
00:11:59,120 --> 00:12:01,200
questions to the internet

196
00:12:01,200 --> 00:12:04,079
um they're built around um a particular

197
00:12:04,079 --> 00:12:05,200
community

198
00:12:05,200 --> 00:12:07,519
which is trying to conduct relevant

199
00:12:07,519 --> 00:12:09,600
research and that has been interested in

200
00:12:09,600 --> 00:12:12,320
bringing that research to the irtf

201
00:12:12,320 --> 00:12:13,839
they're built on an understanding that

202
00:12:13,839 --> 00:12:16,240
there is a benefit for conducting that

203
00:12:16,240 --> 00:12:18,639
work in the irtf uh both for that

204
00:12:18,639 --> 00:12:20,480
community that brought the work in and

205
00:12:20,480 --> 00:12:22,880
for the irtf and the broader internet

206
00:12:22,880 --> 00:12:24,959
community

207
00:12:24,959 --> 00:12:26,639
the goal of these groups is very much to

208
00:12:26,639 --> 00:12:28,240
understand the problem right that

209
00:12:28,240 --> 00:12:30,240
they're not there to lend support to

210
00:12:30,240 --> 00:12:32,240
particular outcomes they're not there to

211
00:12:32,240 --> 00:12:34,959
produce documents in in the way that i i

212
00:12:34,959 --> 00:12:37,200
etf groups are

213
00:12:37,200 --> 00:12:38,880
the goal is understanding rather than

214
00:12:38,880 --> 00:12:42,720
products rather than um rfcs in the irtf

215
00:12:42,720 --> 00:12:45,040
groups

216
00:12:47,760 --> 00:12:49,200
that said

217
00:12:49,200 --> 00:12:52,240
that the groups can publish rfcs um we

218
00:12:52,240 --> 00:12:54,720
have had uh what one rfc published on

219
00:12:54,720 --> 00:12:57,279
the irtf stream since the same which is

220
00:12:57,279 --> 00:12:58,320
rfc

221
00:12:58,320 --> 00:13:01,600
191.6 on the argon 2

222
00:13:01,600 --> 00:13:03,279
memory heart function for password

223
00:13:03,279 --> 00:13:05,200
password hashing

224
00:13:05,200 --> 00:13:08,240
which came out of the crypto forum group

225
00:13:08,240 --> 00:13:10,079
but as i said a minute ago that the main

226
00:13:10,079 --> 00:13:12,800
focus is on developing understanding

227
00:13:12,800 --> 00:13:15,200
and in

228
00:13:15,200 --> 00:13:16,959
you know the vast majority of the

229
00:13:16,959 --> 00:13:19,440
research groups i think research papers

230
00:13:19,440 --> 00:13:21,680
and discussion and understanding is a

231
00:13:21,680 --> 00:13:23,519
much more common out

232
00:13:23,519 --> 00:13:25,279
output than the

233
00:13:25,279 --> 00:13:28,160
the rfc's

234
00:13:33,279 --> 00:13:35,440
so um that's what i wanted to say about

235
00:13:35,440 --> 00:13:37,440
the irtf

236
00:13:37,440 --> 00:13:39,600
um there's a couple of other activities

237
00:13:39,600 --> 00:13:42,560
uh been happening uh which i want to

238
00:13:42,560 --> 00:13:46,479
to mention in this introductory look

239
00:13:46,959 --> 00:13:49,279
the the first is that the internet

240
00:13:49,279 --> 00:13:52,079
architecture board um has a

241
00:13:52,079 --> 00:13:54,320
program running to develop a new model

242
00:13:54,320 --> 00:13:57,680
for the rfc editor function

243
00:13:57,680 --> 00:13:59,680
and this program was created after the

244
00:13:59,680 --> 00:14:02,240
departure of the previous rfc series

245
00:14:02,240 --> 00:14:03,839
editor um

246
00:14:03,839 --> 00:14:05,440
i guess a

247
00:14:05,440 --> 00:14:08,480
a year 18 months or so ago i forget the

248
00:14:08,480 --> 00:14:10,800
exact timing um

249
00:14:10,800 --> 00:14:12,639
back in the times when we all used to

250
00:14:12,639 --> 00:14:14,399
meet in person in wonderland's hotel

251
00:14:14,399 --> 00:14:17,920
rooms so that i guess it was a while ago

252
00:14:17,920 --> 00:14:20,720
and that that program has been um

253
00:14:20,720 --> 00:14:24,399
developing a new model for how the rfc

254
00:14:24,399 --> 00:14:27,199
editor function uh is is organized and

255
00:14:27,199 --> 00:14:31,040
arranged and arranged

256
00:14:31,040 --> 00:14:32,720
the model they're proposing has some

257
00:14:32,720 --> 00:14:35,440
fairly significant changes to the rfc

258
00:14:35,440 --> 00:14:37,680
editor function

259
00:14:37,680 --> 00:14:40,240
um it's proposing to to change the rfc

260
00:14:40,240 --> 00:14:42,639
editor role to that of a consulting

261
00:14:42,639 --> 00:14:44,399
editor which will be known as the rx

262
00:14:44,399 --> 00:14:46,959
series consulting editor

263
00:14:46,959 --> 00:14:48,800
he'll be an expert that will provide

264
00:14:48,800 --> 00:14:51,360
guidance to the community to the

265
00:14:51,360 --> 00:14:54,000
rfc publishing streams and to the rfc

266
00:14:54,000 --> 00:14:56,560
publication center

267
00:14:56,560 --> 00:15:00,720
and it's proposing to shift the um

268
00:15:00,720 --> 00:15:03,680
the the responsibility for oversight of

269
00:15:03,680 --> 00:15:06,399
of the evolution of the rfc series um

270
00:15:06,399 --> 00:15:08,800
from the internet architecture board to

271
00:15:08,800 --> 00:15:13,600
to a new working group um

272
00:15:13,600 --> 00:15:16,480
which which will be known as the rfc uh

273
00:15:16,480 --> 00:15:18,800
fc series working group um

274
00:15:18,800 --> 00:15:20,399
which will be a working group which is

275
00:15:20,399 --> 00:15:23,120
independent of the the i i etf and the

276
00:15:23,120 --> 00:15:25,440
irtf and the independent stream and

277
00:15:25,440 --> 00:15:28,079
we'll just act as an oversight for the

278
00:15:28,079 --> 00:15:29,680
the series

279
00:15:29,680 --> 00:15:30,880
um

280
00:15:30,880 --> 00:15:33,360
and once that group reaches uh consensus

281
00:15:33,360 --> 00:15:35,120
on proposed changes to the operation of

282
00:15:35,120 --> 00:15:38,000
the rfc series um there'll be

283
00:15:38,000 --> 00:15:40,079
the the the proposals will then be

284
00:15:40,079 --> 00:15:43,279
reviewed by an rfc series approval board

285
00:15:43,279 --> 00:15:45,600
which will comprise the uh the rfc

286
00:15:45,600 --> 00:15:48,079
series consulting editor um and

287
00:15:48,079 --> 00:15:50,320
representatives of the various streams

288
00:15:50,320 --> 00:15:54,079
um which are likely to be the irtf chair

289
00:15:54,079 --> 00:15:56,720
the ietf chair and the iab chair

290
00:15:56,720 --> 00:15:59,040
although they can delegate that if they

291
00:15:59,040 --> 00:16:00,959
need to

292
00:16:00,959 --> 00:16:03,040
but it's shifting the responsibility of

293
00:16:03,040 --> 00:16:05,360
the management of the rfc series from

294
00:16:05,360 --> 00:16:09,839
the iab on to the community

295
00:16:11,040 --> 00:16:14,079
now this may seem like a fairly uh you

296
00:16:14,079 --> 00:16:16,320
know a bit of a process arcana but it's

297
00:16:16,320 --> 00:16:18,079
actually a fairly significant change to

298
00:16:18,079 --> 00:16:20,240
the administration of the rfc series

299
00:16:20,240 --> 00:16:21,680
going forward

300
00:16:21,680 --> 00:16:24,160
and potentially has the

301
00:16:24,160 --> 00:16:26,959
um the ability to impact uh the way the

302
00:16:26,959 --> 00:16:29,680
irtf can publish documents since if the

303
00:16:29,680 --> 00:16:32,480
way the the rfc series changes the way

304
00:16:32,480 --> 00:16:34,839
the irtf music

305
00:16:34,839 --> 00:16:36,800
changes

306
00:16:36,800 --> 00:16:38,399
um

307
00:16:38,399 --> 00:16:41,040
the new model that the description of

308
00:16:41,040 --> 00:16:44,480
this process uh is described in an

309
00:16:44,480 --> 00:16:46,079
internet draft that the iab have

310
00:16:46,079 --> 00:16:47,680
published that this program have

311
00:16:47,680 --> 00:16:52,959
published draft iab rfc ed future rfc ed

312
00:16:52,959 --> 00:16:55,199
model if i got the uh the draft name

313
00:16:55,199 --> 00:16:56,880
right

314
00:16:56,880 --> 00:16:59,040
that's just completed last call in the

315
00:16:59,040 --> 00:17:02,240
iab program and is about to enter at the

316
00:17:02,240 --> 00:17:06,959
community wide last call for comments

317
00:17:06,959 --> 00:17:09,439
so i i would encourage you as

318
00:17:09,439 --> 00:17:12,160
participants in the irtf to

319
00:17:12,160 --> 00:17:13,839
review this document

320
00:17:13,839 --> 00:17:17,280
and provide feedback to the rfc editor

321
00:17:17,280 --> 00:17:19,119
future development program

322
00:17:19,119 --> 00:17:22,000
uh they have a meeting tomorrow uh

323
00:17:22,000 --> 00:17:25,599
in the 1430 utc slot uh they also have a

324
00:17:25,599 --> 00:17:27,599
mailing list by which you can provide

325
00:17:27,599 --> 00:17:29,120
comments

326
00:17:29,120 --> 00:17:30,720
and as i said please do review this

327
00:17:30,720 --> 00:17:32,960
document please do

328
00:17:32,960 --> 00:17:34,720
send feedback on whether you think

329
00:17:34,720 --> 00:17:36,799
what's being proposed it is or is not

330
00:17:36,799 --> 00:17:40,480
appropriate so as you see fit

331
00:17:45,440 --> 00:17:48,799
all right on to um perhaps

332
00:17:48,799 --> 00:17:51,760
happier notes than um the arcane of the

333
00:17:51,760 --> 00:17:54,960
itf and ift of course um

334
00:17:54,960 --> 00:17:57,840
the next thing on my list today's is to

335
00:17:57,840 --> 00:18:00,640
uh congratulate uh one of our research

336
00:18:00,640 --> 00:18:03,520
group chairs uh vansant

337
00:18:03,520 --> 00:18:06,960
uh and i i believe uh marie jose has

338
00:18:06,960 --> 00:18:09,200
something to say on this topic murray

339
00:18:09,200 --> 00:18:12,240
jose are you there

340
00:18:12,559 --> 00:18:15,720
go ahead

341
00:18:15,919 --> 00:18:18,320
you hear me you hear this okay yes so

342
00:18:18,320 --> 00:18:20,799
okay so

343
00:18:20,799 --> 00:18:24,320
somebody has echo um i this morning

344
00:18:24,320 --> 00:18:25,919
actually it's a it's a new thing this

345
00:18:25,919 --> 00:18:28,880
morning at 11 a.m paris time

346
00:18:28,880 --> 00:18:31,280
uh bangsang um

347
00:18:31,280 --> 00:18:33,520
received his award

348
00:18:33,520 --> 00:18:37,120
is now a chevalier of the audre du merit

349
00:18:37,120 --> 00:18:40,000
of scientific signs for scientific work

350
00:18:40,000 --> 00:18:43,840
of the french government and while the

351
00:18:43,840 --> 00:18:46,480
award was given to him for this contact

352
00:18:46,480 --> 00:18:47,760
tracing

353
00:18:47,760 --> 00:18:48,960
um

354
00:18:48,960 --> 00:18:51,039
system or or protocol that they put

355
00:18:51,039 --> 00:18:53,280
together for the french government

356
00:18:53,280 --> 00:18:56,559
it was actually highly mentioned in the

357
00:18:56,559 --> 00:18:59,919
um presentation from the french

358
00:18:59,919 --> 00:19:02,880
government official uh that veisa was a

359
00:19:02,880 --> 00:19:06,000
major contributor to the ietf with 14

360
00:19:06,000 --> 00:19:08,880
rfcs which i think is about

361
00:19:08,880 --> 00:19:10,320
i think there's two french people have

362
00:19:10,320 --> 00:19:12,240
tons of rfcs the other one being

363
00:19:12,240 --> 00:19:15,280
christian utema of the iab and so that

364
00:19:15,280 --> 00:19:17,840
was actually mentioned as a major

365
00:19:17,840 --> 00:19:21,120
contribution also his work in the irtf

366
00:19:21,120 --> 00:19:23,280
which i am very much

367
00:19:23,280 --> 00:19:26,320
aware of but what was mentioned was also

368
00:19:26,320 --> 00:19:28,480
i think what we all came to appreciate

369
00:19:28,480 --> 00:19:29,600
of him

370
00:19:29,600 --> 00:19:32,720
the hard work the the community spirit

371
00:19:32,720 --> 00:19:34,400
the fact that he's

372
00:19:34,400 --> 00:19:36,960
always open to new ideas every team

373
00:19:36,960 --> 00:19:39,919
leader very committed to the people he

374
00:19:39,919 --> 00:19:41,919
works with to also to his family and to

375
00:19:41,919 --> 00:19:43,600
the environment

376
00:19:43,600 --> 00:19:45,280
it was funny for those of you who know

377
00:19:45,280 --> 00:19:47,440
him that he had a shirt and tie and a

378
00:19:47,440 --> 00:19:50,160
jacket which is like first for me

379
00:19:50,160 --> 00:19:51,200
but

380
00:19:51,200 --> 00:19:54,160
i think it was highly um

381
00:19:54,160 --> 00:19:55,919
um

382
00:19:55,919 --> 00:19:58,720
like it was highly deserved and i think

383
00:19:58,720 --> 00:20:00,559
uh we always forget

384
00:20:00,559 --> 00:20:02,320
that there are people like weinstein who

385
00:20:02,320 --> 00:20:04,240
are not like the most vocal and who are

386
00:20:04,240 --> 00:20:06,640
a little bit quiet but in the end do all

387
00:20:06,640 --> 00:20:09,360
the major work and i felt this was such

388
00:20:09,360 --> 00:20:11,679
a great

389
00:20:11,679 --> 00:20:14,000
recognition of all his achievements and

390
00:20:14,000 --> 00:20:16,400
and i'm absolutely proud of having been

391
00:20:16,400 --> 00:20:20,600
his co-chair thank you

392
00:20:23,919 --> 00:20:26,240
yeah think thank you murray

393
00:20:26,240 --> 00:20:28,159
congratulations to to vancouver as you

394
00:20:28,159 --> 00:20:30,240
say this is an incredibly well-deserved

395
00:20:30,240 --> 00:20:33,120
award uh that panson has been

396
00:20:33,120 --> 00:20:35,600
involved in the ietf and the irtf for

397
00:20:35,600 --> 00:20:37,600
very many years and has made some some

398
00:20:37,600 --> 00:20:39,440
really tremendous and really important

399
00:20:39,440 --> 00:20:40,720
contributions

400
00:20:40,720 --> 00:20:43,520
so i think that this is uh astoundingly

401
00:20:43,520 --> 00:20:46,679
good news

402
00:20:48,799 --> 00:20:51,679
all right continuing the good news um

403
00:20:51,679 --> 00:20:55,120
one of the uh more pleasurable uh parts

404
00:20:55,120 --> 00:20:58,159
of um being the irtf chairs is that we

405
00:20:58,159 --> 00:20:59,919
get toward the

406
00:20:59,919 --> 00:21:02,480
applied networking research prizes

407
00:21:02,480 --> 00:21:04,480
which we organize in in conjunction with

408
00:21:04,480 --> 00:21:06,159
the internet society

409
00:21:06,159 --> 00:21:09,039
and with support by like comcast and nbc

410
00:21:09,039 --> 00:21:11,120
university

411
00:21:11,120 --> 00:21:15,200
uh these places these prizes are awarded

412
00:21:15,200 --> 00:21:17,440
for some of the best recent results in

413
00:21:17,440 --> 00:21:19,840
applied networking um for some

414
00:21:19,840 --> 00:21:22,240
interesting new research

415
00:21:22,240 --> 00:21:23,600
ideas which

416
00:21:23,600 --> 00:21:25,520
may potentially be relevant to the

417
00:21:25,520 --> 00:21:27,679
internet standards community to the

418
00:21:27,679 --> 00:21:30,000
internet research community

419
00:21:30,000 --> 00:21:31,760
and to recognize upcoming people that

420
00:21:31,760 --> 00:21:34,559
are likely to have an impact on internet

421
00:21:34,559 --> 00:21:37,919
standards and technologies in the future

422
00:21:37,919 --> 00:21:40,320
and in normal times we would bring these

423
00:21:40,320 --> 00:21:44,080
people to to an ietf an irtf meeting and

424
00:21:44,080 --> 00:21:45,760
i would be introducing them into you in

425
00:21:45,760 --> 00:21:48,559
person uh and um

426
00:21:48,559 --> 00:21:50,000
we could uh

427
00:21:50,000 --> 00:21:51,679
chat with them in the breaks and bring

428
00:21:51,679 --> 00:21:54,080
them to the to the related sessions

429
00:21:54,080 --> 00:21:56,400
um of course in in these times that this

430
00:21:56,400 --> 00:21:59,360
is not necessarily possible but uh i i i

431
00:21:59,360 --> 00:22:02,080
hope you i hope they will be uh

432
00:22:02,080 --> 00:22:03,919
uh around for the week and then some of

433
00:22:03,919 --> 00:22:05,760
the breaks and and you can chat with

434
00:22:05,760 --> 00:22:06,880
them and

435
00:22:06,880 --> 00:22:10,640
we can try to get some interaction going

436
00:22:10,640 --> 00:22:12,960
but uh it's my pleasure to to announce

437
00:22:12,960 --> 00:22:16,080
that the the winners uh of of the

438
00:22:16,080 --> 00:22:18,159
applied networking research prizes uh

439
00:22:18,159 --> 00:22:20,799
which are being presented at this ietf

440
00:22:20,799 --> 00:22:23,520
meeting there's this irtf open meeting

441
00:22:23,520 --> 00:22:26,720
uh uh thomas vertigon uh for his work on

442
00:22:26,720 --> 00:22:29,840
uh extensibility of bgp implementations

443
00:22:29,840 --> 00:22:32,400
uh and other routing protocols

444
00:22:32,400 --> 00:22:35,039
uh they have to uh acts a cachef for her

445
00:22:35,039 --> 00:22:37,679
work uh looking at third party service

446
00:22:37,679 --> 00:22:39,600
dependencies on the internet

447
00:22:39,600 --> 00:22:41,679
and they go to kevin bach for his work

448
00:22:41,679 --> 00:22:44,240
on internet censorship

449
00:22:44,240 --> 00:22:45,760
and the the evasion of various

450
00:22:45,760 --> 00:22:47,840
censorship techniques

451
00:22:47,840 --> 00:22:49,760
so congratulations very much to the

452
00:22:49,760 --> 00:22:52,400
these three speakers uh we will see the

453
00:22:52,400 --> 00:22:55,120
uh the talks in in a few minutes um if

454
00:22:55,120 --> 00:22:57,120
you do see see these people around uh

455
00:22:57,120 --> 00:22:58,799
and i see that they're in the chat here

456
00:22:58,799 --> 00:23:00,320
but if you see them around at the rest

457
00:23:00,320 --> 00:23:03,039
of the itf irtf sessions or during the

458
00:23:03,039 --> 00:23:05,360
breaks uh please do talk to them please

459
00:23:05,360 --> 00:23:07,200
do congratulate them i think this is

460
00:23:07,200 --> 00:23:10,640
some really nice work we've got here

461
00:23:11,919 --> 00:23:14,720
and in addition to that the nominations

462
00:23:14,720 --> 00:23:17,760
for the 2022 applied networking research

463
00:23:17,760 --> 00:23:20,559
prize are now open um

464
00:23:20,559 --> 00:23:22,480
the the deadline for these uh

465
00:23:22,480 --> 00:23:25,919
nominations is the uh 19th of november

466
00:23:25,919 --> 00:23:28,559
so you have 10 days so if you know any

467
00:23:28,559 --> 00:23:30,080
um

468
00:23:30,080 --> 00:23:31,679
any interesting applied networking

469
00:23:31,679 --> 00:23:33,280
research um

470
00:23:33,280 --> 00:23:35,200
if you know any good papers in this area

471
00:23:35,200 --> 00:23:36,960
if you know any any people who you think

472
00:23:36,960 --> 00:23:39,200
will make interesting contributions to

473
00:23:39,200 --> 00:23:41,200
the community any work which you think

474
00:23:41,200 --> 00:23:43,120
is is especially valuable and isn't

475
00:23:43,120 --> 00:23:45,360
getting the recognition it deserves

476
00:23:45,360 --> 00:23:48,400
then please go to the website there

477
00:23:48,400 --> 00:23:49,440
please

478
00:23:49,440 --> 00:23:51,919
make the nominations uh and we very much

479
00:23:51,919 --> 00:23:54,080
encourage both um third-party

480
00:23:54,080 --> 00:23:56,320
nominations where um

481
00:23:56,320 --> 00:23:58,240
with someone's permission you nominate

482
00:23:58,240 --> 00:24:00,440
someone for the price but also

483
00:24:00,440 --> 00:24:03,440
self-nominations uh if if we you know if

484
00:24:03,440 --> 00:24:05,840
so if you think your work is deserving

485
00:24:05,840 --> 00:24:07,440
of the price and isn't getting the

486
00:24:07,440 --> 00:24:09,600
recognition as it deserves then please

487
00:24:09,600 --> 00:24:11,279
do nominate yourself

488
00:24:11,279 --> 00:24:13,279
and if you're shy about that

489
00:24:13,279 --> 00:24:15,840
reach out to me uh and i i will uh

490
00:24:15,840 --> 00:24:18,400
happily uh discuss this and

491
00:24:18,400 --> 00:24:19,760
you know

492
00:24:19,760 --> 00:24:22,000
highlight whether i i i think you should

493
00:24:22,000 --> 00:24:23,679
be dominating the work and and be as

494
00:24:23,679 --> 00:24:26,000
encouraging as i can to to get as much

495
00:24:26,000 --> 00:24:28,159
work in as we can

496
00:24:28,159 --> 00:24:30,640
and for the community um if if you have

497
00:24:30,640 --> 00:24:32,799
um you know as i say if you're worth

498
00:24:32,799 --> 00:24:34,559
work which deserves the price uh please

499
00:24:34,559 --> 00:24:37,279
do nominate

500
00:24:39,200 --> 00:24:41,440
and with that uh we'll move on to the

501
00:24:41,440 --> 00:24:44,080
the talks uh we have three talks uh

502
00:24:44,080 --> 00:24:45,840
we're running a little late but i think

503
00:24:45,840 --> 00:24:47,600
not all of the talks use their their

504
00:24:47,600 --> 00:24:50,480
full time uh so the first talk uh is by

505
00:24:50,480 --> 00:24:54,559
thomas uh talking about uh xbgp um

506
00:24:54,559 --> 00:24:56,799
in a certain amount of irony that the

507
00:24:56,799 --> 00:24:58,400
talk entitled when you can't wait for

508
00:24:58,400 --> 00:25:01,039
the ietf uh is presented in the last of

509
00:25:01,039 --> 00:25:03,600
the three uh award talks of the year so

510
00:25:03,600 --> 00:25:06,640
i guess there's something to be said the

511
00:25:06,640 --> 00:25:09,679
uh last of the three irtf meetings where

512
00:25:09,679 --> 00:25:11,279
the award talks are presented in the

513
00:25:11,279 --> 00:25:12,320
year

514
00:25:12,320 --> 00:25:13,679
um

515
00:25:13,679 --> 00:25:16,480
access talk on uh analyzing third party

516
00:25:16,480 --> 00:25:18,400
service dependencies we'll follow that

517
00:25:18,400 --> 00:25:21,120
uh in about 30 minutes uh and then

518
00:25:21,120 --> 00:25:23,360
finally we'll have kevin talking about

519
00:25:23,360 --> 00:25:25,360
um censorship

520
00:25:25,360 --> 00:25:27,039
and

521
00:25:27,039 --> 00:25:30,320
side censorship evolution

522
00:25:30,400 --> 00:25:34,080
so uh with that uh i'm done uh we will

523
00:25:34,080 --> 00:25:35,520
move on to the

524
00:25:35,520 --> 00:25:40,720
first of the pre-recorded uh videos um

525
00:25:40,720 --> 00:25:44,559
which is by thomas uh butts gun uh my

526
00:25:44,559 --> 00:25:47,440
apologies if i'm mispronouncing my name

527
00:25:47,440 --> 00:25:49,760
uh thomas received his uh master's

528
00:25:49,760 --> 00:25:52,960
degree in computer science

529
00:25:55,440 --> 00:25:56,559
and

530
00:25:56,559 --> 00:25:58,799
started a phd looking at the instability

531
00:25:58,799 --> 00:26:00,400
of routing protocols under the

532
00:26:00,400 --> 00:26:03,679
supervision of olivier bonaventure

533
00:26:03,679 --> 00:26:05,120
uh he's currently working on techniques

534
00:26:05,120 --> 00:26:06,480
from

535
00:26:06,480 --> 00:26:09,360
programmability of bgp um which led to

536
00:26:09,360 --> 00:26:11,919
the prototype xbgp system that he'll be

537
00:26:11,919 --> 00:26:13,760
talking about in this talk

538
00:26:13,760 --> 00:26:15,279
and his research interests include

539
00:26:15,279 --> 00:26:17,200
distributed routing protocols

540
00:26:17,200 --> 00:26:19,200
programmable networks and system

541
00:26:19,200 --> 00:26:20,799
architects

542
00:26:20,799 --> 00:26:23,440
uh he'll be talking about the paper xbgp

543
00:26:23,440 --> 00:26:25,120
when you can't wait for the itf and the

544
00:26:25,120 --> 00:26:27,520
vendors which is originally presented in

545
00:26:27,520 --> 00:26:31,600
the acm hardnet symposium in 2020

546
00:26:31,600 --> 00:26:33,679
and i think thomas is in the chat so if

547
00:26:33,679 --> 00:26:35,440
there are any um questions for

548
00:26:35,440 --> 00:26:37,919
clarification any quick questions during

549
00:26:37,919 --> 00:26:39,520
the talk we can ask them in the chat and

550
00:26:39,520 --> 00:26:41,200
then he'll be available

551
00:26:41,200 --> 00:26:44,480
to answer questions live after the talk

552
00:26:44,480 --> 00:26:46,960
so thank you and meet echo if we can

553
00:26:46,960 --> 00:26:50,840
play the first of the videos

554
00:26:56,000 --> 00:26:58,159
hello everyone my name is thomas and i

555
00:26:58,159 --> 00:27:00,400
will explain you eagle bgp a new way to

556
00:27:00,400 --> 00:27:02,159
add flexibility inside the routing

557
00:27:02,159 --> 00:27:04,880
protocol so why it is needed to bring

558
00:27:04,880 --> 00:27:07,200
programmability to a routing protocol

559
00:27:07,200 --> 00:27:09,520
imagine yourself as being a maintainer

560
00:27:09,520 --> 00:27:11,520
of an autonomous system the current best

561
00:27:11,520 --> 00:27:14,080
practice today is to have routers from

562
00:27:14,080 --> 00:27:15,919
different vendors but the problem is

563
00:27:15,919 --> 00:27:18,399
that is that you don't have a unified

564
00:27:18,399 --> 00:27:20,640
interface to configure your routers and

565
00:27:20,640 --> 00:27:22,320
the second problem is that if you would

566
00:27:22,320 --> 00:27:24,720
like to add a new functionality inside

567
00:27:24,720 --> 00:27:27,679
your network then all the routers must

568
00:27:27,679 --> 00:27:30,399
implement the functionality but all

569
00:27:30,399 --> 00:27:32,080
other routers do not implement the same

570
00:27:32,080 --> 00:27:33,600
set of functionality and this is a

571
00:27:33,600 --> 00:27:35,919
problem and the other problem is that if

572
00:27:35,919 --> 00:27:36,880
you would like to add a new

573
00:27:36,880 --> 00:27:38,960
functionality which is not standardized

574
00:27:38,960 --> 00:27:40,000
or

575
00:27:40,000 --> 00:27:42,559
implemented to the routers then you need

576
00:27:42,559 --> 00:27:45,520
to pass to a standardization step by the

577
00:27:45,520 --> 00:27:49,600
ietf in average for bgp it took 3.5

578
00:27:49,600 --> 00:27:51,840
years on the slide you can see the

579
00:27:51,840 --> 00:27:54,240
standardization delay of all bdp

580
00:27:54,240 --> 00:27:57,440
features so we measure the time since it

581
00:27:57,440 --> 00:28:00,320
is released as a draft to the robot it

582
00:28:00,320 --> 00:28:03,039
is released as an lfc this is not an

583
00:28:03,039 --> 00:28:05,200
isolated case all the routing protocols

584
00:28:05,200 --> 00:28:08,080
suffer from the same delay but the list

585
00:28:08,080 --> 00:28:10,080
have shown that this is also the case

586
00:28:10,080 --> 00:28:12,799
for other lfcs next you need to

587
00:28:12,799 --> 00:28:15,360
implement your feature to the operating

588
00:28:15,360 --> 00:28:17,760
system by doors and finally the rotors

589
00:28:17,760 --> 00:28:20,240
must be updated but if you are a small

590
00:28:20,240 --> 00:28:22,720
network such as ballet you cannot easily

591
00:28:22,720 --> 00:28:25,039
influence step one and step two because

592
00:28:25,039 --> 00:28:27,600
you are you don't have enough impact to

593
00:28:27,600 --> 00:28:30,159
actually convince a routers vendors and

594
00:28:30,159 --> 00:28:33,440
the itf from your new feature

595
00:28:33,440 --> 00:28:36,080
because of those problems we introduce

596
00:28:36,080 --> 00:28:38,799
xbgp that is designed to bring back

597
00:28:38,799 --> 00:28:41,039
innovation to the network operator we

598
00:28:41,039 --> 00:28:43,520
would like to open the mdp box so that

599
00:28:43,520 --> 00:28:46,080
the network operator can actually modify

600
00:28:46,080 --> 00:28:48,640
the protocol i will explain you how hbdp

601
00:28:48,640 --> 00:28:50,799
works in practice

602
00:28:50,799 --> 00:28:53,520
we start from bgp which is considered as

603
00:28:53,520 --> 00:28:56,399
a black box you can configure bgp with

604
00:28:56,399 --> 00:28:59,120
multiple interface for example cli

605
00:28:59,120 --> 00:29:01,840
netconf or snmp to make some monitoring

606
00:29:01,840 --> 00:29:04,720
so those are the main interfaces to

607
00:29:04,720 --> 00:29:07,279
configure but you'll not have any way to

608
00:29:07,279 --> 00:29:09,760
modify the protocol you as being a

609
00:29:09,760 --> 00:29:11,919
network operator this recipe will open

610
00:29:11,919 --> 00:29:14,320
delete and will export the protocol in

611
00:29:14,320 --> 00:29:16,159
the protocol member inside the protocol

612
00:29:16,159 --> 00:29:18,880
you can add a new state you can modify

613
00:29:18,880 --> 00:29:21,919
existing states and also you can modify

614
00:29:21,919 --> 00:29:23,760
the transition between two states

615
00:29:23,760 --> 00:29:25,520
concerning the protocol memory you can

616
00:29:25,520 --> 00:29:27,520
access to the writing table you can also

617
00:29:27,520 --> 00:29:30,399
access to other internal data structure

618
00:29:30,399 --> 00:29:31,279
now

619
00:29:31,279 --> 00:29:33,919
the operator thanks to the interface of

620
00:29:33,919 --> 00:29:36,799
mbgp can now add extension code to their

621
00:29:36,799 --> 00:29:39,120
router so they write the extension code

622
00:29:39,120 --> 00:29:41,760
once it will compile to a bytecode and

623
00:29:41,760 --> 00:29:44,480
this my code will be executed to all the

624
00:29:44,480 --> 00:29:47,679
routers which are usually dpp compatible

625
00:29:47,679 --> 00:29:51,360
now actually xbgp is added on the top of

626
00:29:51,360 --> 00:29:54,080
operating system vendors now the routers

627
00:29:54,080 --> 00:29:56,880
can be seen as a kernel where you can

628
00:29:56,880 --> 00:30:00,159
actually run some extension which is the

629
00:30:00,159 --> 00:30:03,120
modification to your pdp protocol now i

630
00:30:03,120 --> 00:30:05,200
will explain you how immediately work

631
00:30:05,200 --> 00:30:07,919
inside bgp but before i will take an

632
00:30:07,919 --> 00:30:09,520
example of a new feature which is not

633
00:30:09,520 --> 00:30:12,000
standardized by the itf and not

634
00:30:12,000 --> 00:30:15,120
implemented inside any operating system

635
00:30:15,120 --> 00:30:17,360
so what we would like is to add the

636
00:30:17,360 --> 00:30:19,520
geographical localization of the router

637
00:30:19,520 --> 00:30:22,559
we see the vdp update to make some for

638
00:30:22,559 --> 00:30:25,600
example filtering or some analysis

639
00:30:25,600 --> 00:30:27,600
this information about the geographical

640
00:30:27,600 --> 00:30:29,840
localization will be added to the gdp

641
00:30:29,840 --> 00:30:32,080
update that will be spread to other

642
00:30:32,080 --> 00:30:34,480
routers of your network and so that

643
00:30:34,480 --> 00:30:37,440
other waters can use your functionality

644
00:30:37,440 --> 00:30:39,520
that you have implemented and then in

645
00:30:39,520 --> 00:30:42,080
order to not spoil the order neighbor

646
00:30:42,080 --> 00:30:44,159
you will remove your geographical

647
00:30:44,159 --> 00:30:47,600
localization from the media update

648
00:30:47,600 --> 00:30:49,760
if you would like to add this new

649
00:30:49,760 --> 00:30:52,240
feature inside the mgp protocol then you

650
00:30:52,240 --> 00:30:53,919
need to think about how gdp

651
00:30:53,919 --> 00:30:57,039
implementation works normally all wgp

652
00:30:57,039 --> 00:30:59,720
implementation follows the rfc

653
00:30:59,720 --> 00:31:03,840
4271 and inside the rfc

654
00:31:03,840 --> 00:31:06,399
let's explain the video workflow first

655
00:31:06,399 --> 00:31:08,399
you have bgp message that comes from

656
00:31:08,399 --> 00:31:11,600
your pins it will pass to the adjacent

657
00:31:11,600 --> 00:31:13,919
then inside the import filter when it

658
00:31:13,919 --> 00:31:15,679
pass the input filter it goes to the

659
00:31:15,679 --> 00:31:18,000
locality all the acceptable route inside

660
00:31:18,000 --> 00:31:20,000
the loan carrying will be taken through

661
00:31:20,000 --> 00:31:22,640
the bgp process to take only one

662
00:31:22,640 --> 00:31:24,559
baseboard that will be pushed to the

663
00:31:24,559 --> 00:31:27,360
forwarding table of the routers and then

664
00:31:27,360 --> 00:31:29,600
putting inside the export heater to take

665
00:31:29,600 --> 00:31:32,399
whether or not the route can be exported

666
00:31:32,399 --> 00:31:34,960
to other networks and if it is the case

667
00:31:34,960 --> 00:31:37,039
it will be stored in the rj board and

668
00:31:37,039 --> 00:31:39,840
finally the message will be generated if

669
00:31:39,840 --> 00:31:42,080
i take back my geographical localization

670
00:31:42,080 --> 00:31:45,679
extension you need to modify multiple

671
00:31:45,679 --> 00:31:48,000
steps of the vdp protocol and those are

672
00:31:48,000 --> 00:31:50,559
represented by the blue arrows

673
00:31:50,559 --> 00:31:52,880
with ebgp it is possible to modify the

674
00:31:52,880 --> 00:31:55,760
protocol thanks to the introduction of

675
00:31:55,760 --> 00:31:58,720
insertion point insertion points are a

676
00:31:58,720 --> 00:32:01,840
way to execute arbitrary code and so if

677
00:32:01,840 --> 00:32:02,640
i take

678
00:32:02,640 --> 00:32:03,679
my

679
00:32:03,679 --> 00:32:06,159
geographical localization it is composed

680
00:32:06,159 --> 00:32:08,640
of multiple subpart and those apart will

681
00:32:08,640 --> 00:32:11,760
be added to the right insertion point

682
00:32:11,760 --> 00:32:14,080
but that's not all because our extension

683
00:32:14,080 --> 00:32:16,399
must talk to the protocol memory to

684
00:32:16,399 --> 00:32:18,720
retrieve the geographical localization

685
00:32:18,720 --> 00:32:21,600
and this is known via the xmdp api and

686
00:32:21,600 --> 00:32:23,120
this is something that make the

687
00:32:23,120 --> 00:32:25,440
interaction between the plugin and

688
00:32:25,440 --> 00:32:27,679
the protocol memory now i will explain

689
00:32:27,679 --> 00:32:30,480
you the xp api this is some way to

690
00:32:30,480 --> 00:32:32,240
communicate with the media

691
00:32:32,240 --> 00:32:34,399
implementation and all the extension

692
00:32:34,399 --> 00:32:36,960
code or plugin must use this api to

693
00:32:36,960 --> 00:32:40,320
receive or send some protocol memory why

694
00:32:40,320 --> 00:32:43,440
first because it ensures a desolation of

695
00:32:43,440 --> 00:32:46,240
the colleen and the dp implementation

696
00:32:46,240 --> 00:32:49,279
and second it is a unified way to

697
00:32:49,279 --> 00:32:52,159
access to the memory remember that xbgp

698
00:32:52,159 --> 00:32:54,799
must support multiple gdp implementation

699
00:32:54,799 --> 00:32:57,360
name xbtp api contains multiple

700
00:32:57,360 --> 00:32:59,519
functions such as function to send and

701
00:32:59,519 --> 00:33:01,840
read the gpp messages also the function

702
00:33:01,840 --> 00:33:04,240
to get or set some memory inside the

703
00:33:04,240 --> 00:33:06,320
protocol memory for example for the

704
00:33:06,320 --> 00:33:08,159
geographical localization you must

705
00:33:08,159 --> 00:33:10,080
access to the geographical localization

706
00:33:10,080 --> 00:33:10,960
of the

707
00:33:10,960 --> 00:33:13,360
router then you use the gentle function

708
00:33:13,360 --> 00:33:15,440
you have also functioned to access to

709
00:33:15,440 --> 00:33:17,120
the routing table and underneath the

710
00:33:17,120 --> 00:33:19,120
utility function to manipulate the mode

711
00:33:19,120 --> 00:33:22,399
memory or doing simple maps function

712
00:33:22,399 --> 00:33:25,120
so now we have the big mixture of xbgp

713
00:33:25,120 --> 00:33:26,880
and i will show you some new skills that

714
00:33:26,880 --> 00:33:29,760
you can do with lbgp but before you need

715
00:33:29,760 --> 00:33:32,559
to adapt some bgp implementation to make

716
00:33:32,559 --> 00:33:34,880
them xbgp compliant you have a

717
00:33:34,880 --> 00:33:37,360
favoriting and board in your case in the

718
00:33:37,360 --> 00:33:39,760
slide i've put an array with all the

719
00:33:39,760 --> 00:33:41,519
lines of code that you need to modify

720
00:33:41,519 --> 00:33:44,960
your ad to make the bgp implementation

721
00:33:44,960 --> 00:33:47,200
xbgp compatible

722
00:33:47,200 --> 00:33:49,360
the first use case is a simple one this

723
00:33:49,360 --> 00:33:51,360
is the monitoring and what we would like

724
00:33:51,360 --> 00:33:54,240
to do is to monitor the length of the

725
00:33:54,240 --> 00:33:56,480
ice path actually it is difficult to

726
00:33:56,480 --> 00:33:58,960
achieve it with traditional interface

727
00:33:58,960 --> 00:34:01,120
but within gpa you have an interface

728
00:34:01,120 --> 00:34:03,360
that is easier why would you like to

729
00:34:03,360 --> 00:34:05,679
monitor the is pass for example you

730
00:34:05,679 --> 00:34:08,159
would like to monitor it to filter out

731
00:34:08,159 --> 00:34:10,239
large as pass or make analysis

732
00:34:10,239 --> 00:34:13,119
afterwards so now i will explain you a

733
00:34:13,119 --> 00:34:15,359
complete example of c code that

734
00:34:15,359 --> 00:34:18,480
represents the xbgp expansion first you

735
00:34:18,480 --> 00:34:20,399
need to retrieve the data from the host

736
00:34:20,399 --> 00:34:23,040
implementation this is known true get

737
00:34:23,040 --> 00:34:24,879
arc function so this is a function of

738
00:34:24,879 --> 00:34:27,199
the api then you will do your

739
00:34:27,199 --> 00:34:29,599
computation so here you will pass the

740
00:34:29,599 --> 00:34:31,839
response attribute and count the number

741
00:34:31,839 --> 00:34:34,159
of photon of the system content inside

742
00:34:34,159 --> 00:34:37,040
the path and then you will use

743
00:34:37,040 --> 00:34:39,119
another function to actually log the

744
00:34:39,119 --> 00:34:42,639
number of as you computed this extension

745
00:34:42,639 --> 00:34:46,639
code will be added to the import filters

746
00:34:46,639 --> 00:34:48,719
the second new skill is related to the

747
00:34:48,719 --> 00:34:51,679
use of bgp inside data center in data

748
00:34:51,679 --> 00:34:54,159
center you use bdp to make your internal

749
00:34:54,159 --> 00:34:56,480
routine all the best practice concerning

750
00:34:56,480 --> 00:34:59,359
the use of bgp in a data center is

751
00:34:59,359 --> 00:35:02,400
stated in rse 7938

752
00:35:02,400 --> 00:35:04,400
inside this document there is a

753
00:35:04,400 --> 00:35:07,200
constraint you don't have any exact path

754
00:35:07,200 --> 00:35:09,280
so for example to go from level two to

755
00:35:09,280 --> 00:35:10,560
level zero

756
00:35:10,560 --> 00:35:13,280
you must go to level one and level zero

757
00:35:13,280 --> 00:35:15,200
but you cannot make some zigzag five

758
00:35:15,200 --> 00:35:16,960
between level 2 and level and 1 for

759
00:35:16,960 --> 00:35:18,400
example

760
00:35:18,400 --> 00:35:20,880
and to avoid this zigzag path you must

761
00:35:20,880 --> 00:35:22,960
have the same autonomous system number

762
00:35:22,960 --> 00:35:25,839
for all routers of the same level

763
00:35:25,839 --> 00:35:29,520
over here level 0 all routers if the as1

764
00:35:29,520 --> 00:35:31,359
number

765
00:35:31,359 --> 00:35:33,920
but these constraints make a debugging

766
00:35:33,920 --> 00:35:36,960
difficult if you would like to check

767
00:35:36,960 --> 00:35:38,800
where the roots are sourced from you

768
00:35:38,800 --> 00:35:41,680
cannot because all the paths have the

769
00:35:41,680 --> 00:35:43,839
same autonomous system for

770
00:35:43,839 --> 00:35:46,160
the same level and so you cannot decide

771
00:35:46,160 --> 00:35:48,480
if the packet goes through the left part

772
00:35:48,480 --> 00:35:51,280
of the data center or the right part

773
00:35:51,280 --> 00:35:54,160
but now with xvgp you can get rid of

774
00:35:54,160 --> 00:35:56,720
this constraint and put a different

775
00:35:56,720 --> 00:35:58,480
autonomous system that works for the

776
00:35:58,480 --> 00:36:00,960
routers on the same level to do so you

777
00:36:00,960 --> 00:36:04,560
must first design your xvdp extension

778
00:36:04,560 --> 00:36:07,359
and pass them a data center topology

779
00:36:07,359 --> 00:36:10,560
configuration so that you can actually

780
00:36:10,560 --> 00:36:13,280
check if there is any exact path to your

781
00:36:13,280 --> 00:36:15,280
data center

782
00:36:15,280 --> 00:36:18,079
this extension will also be put on the

783
00:36:18,079 --> 00:36:20,320
insertion point related to the import

784
00:36:20,320 --> 00:36:23,040
filters the third use case is related to

785
00:36:23,040 --> 00:36:24,400
the road selection

786
00:36:24,400 --> 00:36:26,960
so in this slide we consider a stop

787
00:36:26,960 --> 00:36:29,040
network for the source network connected

788
00:36:29,040 --> 00:36:33,040
to several transit transit 1n10 z2

789
00:36:33,040 --> 00:36:35,599
and to reach the network destination

790
00:36:35,599 --> 00:36:38,880
bgp must advertise a route to the source

791
00:36:38,880 --> 00:36:40,400
the source will directly receive the

792
00:36:40,400 --> 00:36:42,880
green road via transit one and another

793
00:36:42,880 --> 00:36:45,040
one on transit 2.

794
00:36:45,040 --> 00:36:48,400
according to the local 22 policy it will

795
00:36:48,400 --> 00:36:50,720
either announce the blue or the yellow

796
00:36:50,720 --> 00:36:51,680
path

797
00:36:51,680 --> 00:36:54,160
maybe transit to choose the path for its

798
00:36:54,160 --> 00:36:56,880
security properties not nurses prepare

799
00:36:56,880 --> 00:37:00,480
the past with a longer latencies and so

800
00:37:00,480 --> 00:37:02,079
the ranking of the source and the

801
00:37:02,079 --> 00:37:04,880
transit does not match xbtp can solve

802
00:37:04,880 --> 00:37:07,760
the problem to execute a plugin that

803
00:37:07,760 --> 00:37:10,720
will uh choose the route on the edge

804
00:37:10,720 --> 00:37:14,000
router of 202 according to the source

805
00:37:14,000 --> 00:37:16,320
ranking network and so can the two

806
00:37:16,320 --> 00:37:19,440
choose the root the source preference

807
00:37:19,440 --> 00:37:21,920
this mass election service will be added

808
00:37:21,920 --> 00:37:26,079
to the decision process insertion point

809
00:37:26,079 --> 00:37:28,320
the last use case is above detecting bgp

810
00:37:28,320 --> 00:37:29,440
zombies

811
00:37:29,440 --> 00:37:32,320
if you know a prefix p then your motor

812
00:37:32,320 --> 00:37:33,760
will announce

813
00:37:33,760 --> 00:37:36,000
that it can arrange in the prefix speed

814
00:37:36,000 --> 00:37:38,640
and then the order will do the same by

815
00:37:38,640 --> 00:37:41,440
advertising to the label the the prefix

816
00:37:41,440 --> 00:37:44,320
speed and so all the motors can reach b

817
00:37:44,320 --> 00:37:46,800
but now consider prefix p is no longer

818
00:37:46,800 --> 00:37:49,040
reachable so the rotors will send a

819
00:37:49,040 --> 00:37:51,599
result to the neighbor but for whatever

820
00:37:51,599 --> 00:37:54,720
reason due to a software bug or

821
00:37:54,720 --> 00:37:56,880
misconfiguration the water cannot

822
00:37:56,880 --> 00:37:59,599
process the result and so it fails to

823
00:37:59,599 --> 00:38:02,880
send a missile to the other level the

824
00:38:02,880 --> 00:38:05,520
upstream router will still have the p

825
00:38:05,520 --> 00:38:08,320
prefix in the forwarding table this is

826
00:38:08,320 --> 00:38:10,720
something we don't want because it may

827
00:38:10,720 --> 00:38:12,720
lead to some black owning or traffic and

828
00:38:12,720 --> 00:38:15,359
this is a big measurement this is a

829
00:38:15,359 --> 00:38:17,839
route that is still in the theme of some

830
00:38:17,839 --> 00:38:21,040
routers but no longer a cable anymore

831
00:38:21,040 --> 00:38:24,000
with it is bgp you can actually

832
00:38:24,000 --> 00:38:26,720
detect those bdps on mirrors

833
00:38:26,720 --> 00:38:29,040
you need to write a plugin that will

834
00:38:29,040 --> 00:38:31,440
analyze the routing table and

835
00:38:31,440 --> 00:38:33,760
flag all the roads that are older than

836
00:38:33,760 --> 00:38:35,760
the given threshold

837
00:38:35,760 --> 00:38:39,280
then for all those prefix it will ask to

838
00:38:39,280 --> 00:38:41,200
the upstream router to confirm if the

839
00:38:41,200 --> 00:38:43,520
route is still valid or not

840
00:38:43,520 --> 00:38:45,520
there are some mechanisms such as

841
00:38:45,520 --> 00:38:47,920
transformative staff that can actually

842
00:38:47,920 --> 00:38:50,720
reload all the entire routine table of

843
00:38:50,720 --> 00:38:52,240
the neighbor but

844
00:38:52,240 --> 00:38:53,119
since

845
00:38:53,119 --> 00:38:55,520
bgp zombie is concerning a small

846
00:38:55,520 --> 00:38:56,880
fraction of

847
00:38:56,880 --> 00:38:57,920
prefix

848
00:38:57,920 --> 00:38:59,760
according some measurement inside the

849
00:38:59,760 --> 00:39:01,599
internet it is

850
00:39:01,599 --> 00:39:03,920
not really necessary to renew all the

851
00:39:03,920 --> 00:39:07,040
entire routing table so we design a

852
00:39:07,040 --> 00:39:11,119
prototype that only asks for those

853
00:39:11,119 --> 00:39:14,760
of these that we detected

854
00:39:15,359 --> 00:39:18,079
this extension code will be added to the

855
00:39:18,079 --> 00:39:20,240
background task instruction pod

856
00:39:20,240 --> 00:39:24,079
which acts like a current job so each

857
00:39:24,079 --> 00:39:25,920
unit of time you will

858
00:39:25,920 --> 00:39:28,720
execute this plugin

859
00:39:28,720 --> 00:39:30,720
so now we've seen some use case that we

860
00:39:30,720 --> 00:39:33,359
can do within bgp but the code that is

861
00:39:33,359 --> 00:39:36,320
executed is untrusted and we can ask the

862
00:39:36,320 --> 00:39:38,640
following question could it break

863
00:39:38,640 --> 00:39:40,320
is bgp

864
00:39:40,320 --> 00:39:44,160
well uh we need to have an automatic way

865
00:39:44,160 --> 00:39:46,800
to verify some properties

866
00:39:46,800 --> 00:39:49,920
before injecting it to the routers

867
00:39:49,920 --> 00:39:52,160
with with vdp we

868
00:39:52,160 --> 00:39:54,880
make the following approach first you

869
00:39:54,880 --> 00:39:57,040
start from the extension source code

870
00:39:57,040 --> 00:39:58,880
that will annotate

871
00:39:58,880 --> 00:40:00,720
then it will be passed to the software

872
00:40:00,720 --> 00:40:03,520
verification tools and if the

873
00:40:03,520 --> 00:40:05,920
verification tool says okay

874
00:40:05,920 --> 00:40:08,079
the code can be trusted it will be

875
00:40:08,079 --> 00:40:10,480
compiled to the by code and then

876
00:40:10,480 --> 00:40:13,280
injected to the protocol now i will

877
00:40:13,280 --> 00:40:15,599
explain you some properties that we

878
00:40:15,599 --> 00:40:17,839
defined that all the plugin most

879
00:40:17,839 --> 00:40:20,319
satisfied before being injected to the

880
00:40:20,319 --> 00:40:22,839
routers the first one is the termination

881
00:40:22,839 --> 00:40:25,119
properties we do not want that an

882
00:40:25,119 --> 00:40:27,119
infinite loop for example

883
00:40:27,119 --> 00:40:28,640
breaks the protocol

884
00:40:28,640 --> 00:40:30,800
another properties is related to the

885
00:40:30,800 --> 00:40:33,280
memory isolation of the plugin

886
00:40:33,280 --> 00:40:36,240
all plugins must not modify memory that

887
00:40:36,240 --> 00:40:38,720
are not authorized to modify

888
00:40:38,720 --> 00:40:41,680
we also restrict some api function to

889
00:40:41,680 --> 00:40:43,760
some extension code for example for the

890
00:40:43,760 --> 00:40:47,359
monitoring they do not have the right to

891
00:40:47,359 --> 00:40:51,839
modify the protocol finally we use crm

892
00:40:51,839 --> 00:40:53,920
verification tool to

893
00:40:53,920 --> 00:40:56,480
verify properties related to the bdp

894
00:40:56,480 --> 00:40:59,200
syntax as an example we will verify the

895
00:40:59,200 --> 00:41:02,000
syntax of the geographic coordinate

896
00:41:02,000 --> 00:41:04,960
extension so this geographic coordinate

897
00:41:04,960 --> 00:41:08,319
extension is defined on the graph and

898
00:41:08,319 --> 00:41:10,960
it must follow the format specified on

899
00:41:10,960 --> 00:41:13,359
this graph and those properties i've

900
00:41:13,359 --> 00:41:15,839
defined on the on the slide are those

901
00:41:15,839 --> 00:41:17,040
that must

902
00:41:17,040 --> 00:41:17,839
be

903
00:41:17,839 --> 00:41:20,319
followed by the plane

904
00:41:20,319 --> 00:41:22,720
we write all the properties and we

905
00:41:22,720 --> 00:41:25,760
annotate the plugin and then this

906
00:41:25,760 --> 00:41:27,440
annotated plugin will be passed to the

907
00:41:27,440 --> 00:41:30,000
verification tool server that will say

908
00:41:30,000 --> 00:41:31,440
yes or no

909
00:41:31,440 --> 00:41:34,160
and if it say yes then we are the

910
00:41:34,160 --> 00:41:36,079
guarantee that all execution of the

911
00:41:36,079 --> 00:41:39,520
plugin will satisfy the constraints

912
00:41:39,520 --> 00:41:42,480
to conclude within pgp you can

913
00:41:42,480 --> 00:41:45,839
make hptp implementation truly expensive

914
00:41:45,839 --> 00:41:47,599
if you want more details you can read

915
00:41:47,599 --> 00:41:48,880
the paper

916
00:41:48,880 --> 00:41:51,440
related to this presentation we have

917
00:41:51,440 --> 00:41:54,560
also a website that collects all the

918
00:41:54,560 --> 00:41:56,880
source code of xvgp

919
00:41:56,880 --> 00:41:59,599
we designed a methodology for bgp but

920
00:41:59,599 --> 00:42:02,720
the methodology could be also applied to

921
00:42:02,720 --> 00:42:06,799
other writing protocol thank you

922
00:42:12,319 --> 00:42:13,280
okay

923
00:42:13,280 --> 00:42:15,200
thank you

924
00:42:15,200 --> 00:42:18,240
really interesting talk uh thomas uh if

925
00:42:18,240 --> 00:42:21,040
you're there uh you can

926
00:42:21,040 --> 00:42:24,240
open up your video um

927
00:42:24,240 --> 00:42:27,118
some questions

928
00:42:27,280 --> 00:42:28,960
hi

929
00:42:28,960 --> 00:42:31,680
okay can can you all hear us yeah

930
00:42:31,680 --> 00:42:33,520
yes i can hear you

931
00:42:33,520 --> 00:42:35,920
okay um well yeah as i say really

932
00:42:35,920 --> 00:42:39,200
interesting talk um do we have any

933
00:42:39,200 --> 00:42:41,520
questions for thomas

934
00:42:41,520 --> 00:42:43,599
uh i see elliot said something in the

935
00:42:43,599 --> 00:42:47,440
chats uh elliot jones maybe uh

936
00:42:47,680 --> 00:42:49,280
go ahead

937
00:42:49,280 --> 00:42:51,839
yeah thanks very much for um

938
00:42:51,839 --> 00:42:55,680
your talk it was very interesting um uh

939
00:42:55,680 --> 00:42:58,480
two points the first is a question

940
00:42:58,480 --> 00:43:02,240
um is in terms of that last slide

941
00:43:02,240 --> 00:43:04,640
it was it was your desire for this

942
00:43:04,640 --> 00:43:06,480
mechanism to always have the transitive

943
00:43:06,480 --> 00:43:08,160
bit set to zero

944
00:43:08,160 --> 00:43:09,040
um

945
00:43:09,040 --> 00:43:11,040
which i think does allow for a certain

946
00:43:11,040 --> 00:43:15,040
amount of prototyping for instance right

947
00:43:15,920 --> 00:43:18,400
uh yeah yeah yes this is

948
00:43:18,400 --> 00:43:20,640
actually hpgp is designed for quick

949
00:43:20,640 --> 00:43:23,280
prototype prototyping

950
00:43:23,280 --> 00:43:26,640
we just added an interface to allow

951
00:43:26,640 --> 00:43:28,720
some network operators to

952
00:43:28,720 --> 00:43:31,040
implement quickly its functionality and

953
00:43:31,040 --> 00:43:34,880
then it will uh actually test in another

954
00:43:34,880 --> 00:43:38,079
network and finally it will be uh maybe

955
00:43:38,079 --> 00:43:41,280
if it works well in maybe a release on a

956
00:43:41,280 --> 00:43:44,960
on the production routing network but uh

957
00:43:44,960 --> 00:43:47,359
actually uh if you would like to have

958
00:43:47,359 --> 00:43:49,520
performance you have to uh to write it

959
00:43:49,520 --> 00:43:51,440
uh directly inside the implementation

960
00:43:51,440 --> 00:43:52,720
level code

961
00:43:52,720 --> 00:43:55,520
so yeah maybe

962
00:43:55,520 --> 00:43:57,599
when you introduce new code you will

963
00:43:57,599 --> 00:43:59,599
actually um

964
00:43:59,599 --> 00:44:02,000
break some some rules of the bgp

965
00:44:02,000 --> 00:44:05,200
protocol but we designed some mechanism

966
00:44:05,200 --> 00:44:08,160
to guarantee the execution of the plugin

967
00:44:08,160 --> 00:44:12,000
locally but the execution in the global

968
00:44:12,000 --> 00:44:15,200
network is not something we've done and

969
00:44:15,200 --> 00:44:17,839
this is something that you can

970
00:44:17,839 --> 00:44:19,040
you you

971
00:44:19,040 --> 00:44:21,119
you test

972
00:44:21,119 --> 00:44:23,040
on yourself so you

973
00:44:23,040 --> 00:44:24,800
you make some tests and if you are

974
00:44:24,800 --> 00:44:26,640
confident about that you will push on

975
00:44:26,640 --> 00:44:29,920
the network so there is no really um

976
00:44:29,920 --> 00:44:31,599
a way to

977
00:44:31,599 --> 00:44:34,319
test the global

978
00:44:34,640 --> 00:44:37,760
safeties of the the implementation you

979
00:44:37,760 --> 00:44:39,839
you put on the on the router so i mean

980
00:44:39,839 --> 00:44:42,079
this is something we can actually do

981
00:44:42,079 --> 00:44:44,480
afterwards but something i think it is

982
00:44:44,480 --> 00:44:46,960
something quite complicated to uh to

983
00:44:46,960 --> 00:44:49,280
verify and satisfy the security property

984
00:44:49,280 --> 00:44:51,280
of the global network

985
00:44:51,280 --> 00:44:53,599
but with immediately we have also some

986
00:44:53,599 --> 00:44:56,640
just local verification

987
00:44:56,640 --> 00:44:59,119
yeah thank you um the reason i ask the

988
00:44:59,119 --> 00:45:01,359
question obviously is um you know one of

989
00:45:01,359 --> 00:45:02,560
the reasons it takes three and a half

990
00:45:02,560 --> 00:45:04,160
years to go through the standardization

991
00:45:04,160 --> 00:45:05,200
process

992
00:45:05,200 --> 00:45:07,599
is uh because i

993
00:45:07,599 --> 00:45:10,480
uh people are cons routing is a is is a

994
00:45:10,480 --> 00:45:13,359
difficult business to begin with and uh

995
00:45:13,359 --> 00:45:17,200
we do see cases where routes disappear

996
00:45:17,200 --> 00:45:20,079
for sometimes inexplicable reasons um

997
00:45:20,079 --> 00:45:22,800
even with the current mature

998
00:45:22,800 --> 00:45:25,920
mechanisms and so uh the there's a

999
00:45:25,920 --> 00:45:27,920
certain amount of proof time and so one

1000
00:45:27,920 --> 00:45:29,520
question i think

1001
00:45:29,520 --> 00:45:32,160
i think one research question to ask is

1002
00:45:32,160 --> 00:45:34,160
just how flexible

1003
00:45:34,160 --> 00:45:37,200
should a routing paradigm be and what

1004
00:45:37,200 --> 00:45:38,800
what are the guard rails that make it

1005
00:45:38,800 --> 00:45:41,280
safe to experiment

1006
00:45:41,280 --> 00:45:43,440
hi this is an interesting question

1007
00:45:43,440 --> 00:45:46,640
because when xmgp you can do pretty

1008
00:45:46,640 --> 00:45:50,000
pretty much what you can do um well the

1009
00:45:50,000 --> 00:45:52,720
first thing is that uh you have to uh

1010
00:45:52,720 --> 00:45:53,680
choose

1011
00:45:53,680 --> 00:45:56,400
uh the while right tool to uh

1012
00:45:56,400 --> 00:45:58,079
actually guarantee

1013
00:45:58,079 --> 00:46:00,000
uh the security property of the

1014
00:46:00,000 --> 00:46:02,480
underwater uh maybe

1015
00:46:02,480 --> 00:46:03,440
well

1016
00:46:03,440 --> 00:46:06,400
now we we write all the plugin in c code

1017
00:46:06,400 --> 00:46:08,720
this is not something which is uh really

1018
00:46:08,720 --> 00:46:10,960
secure uh but

1019
00:46:10,960 --> 00:46:12,000
you know

1020
00:46:12,000 --> 00:46:14,640
in another we can also use on the other

1021
00:46:14,640 --> 00:46:17,359
tools some some maybe some language that

1022
00:46:17,359 --> 00:46:21,440
are safer like rest and uh

1023
00:46:21,440 --> 00:46:24,079
those tools will be um

1024
00:46:24,079 --> 00:46:27,119
actually um provide a better security

1025
00:46:27,119 --> 00:46:32,400
but yeah and we don't have any yes maybe

1026
00:46:32,640 --> 00:46:33,760
obviously

1027
00:46:33,760 --> 00:46:36,000
there is a balance between us

1028
00:46:36,000 --> 00:46:39,440
flexibility and um and security and if

1029
00:46:39,440 --> 00:46:41,680
you add flexibility inside the routing

1030
00:46:41,680 --> 00:46:43,599
protocol then

1031
00:46:43,599 --> 00:46:46,400
the security part will be less uh

1032
00:46:46,400 --> 00:46:48,079
less mean in the

1033
00:46:48,079 --> 00:46:51,119
in the part of the

1034
00:46:53,359 --> 00:46:57,000
the reasoning of the

1035
00:46:59,280 --> 00:47:02,480
yeah thank you thank you um so uh a sort

1036
00:47:02,480 --> 00:47:05,520
of i had a follow-on to that to some

1037
00:47:05,520 --> 00:47:07,440
extent uh i mean if i understand write

1038
00:47:07,440 --> 00:47:09,040
this this adds a bunch of hooks

1039
00:47:09,040 --> 00:47:11,359
throughout the bgp implementation where

1040
00:47:11,359 --> 00:47:12,880
you can insert

1041
00:47:12,880 --> 00:47:15,440
different sets of functionality

1042
00:47:15,440 --> 00:47:19,680
um how much of the the core protocol has

1043
00:47:19,680 --> 00:47:21,359
to be implemented in the core and how

1044
00:47:21,359 --> 00:47:23,599
much can be implemented in in these

1045
00:47:23,599 --> 00:47:26,559
programmable hooks you know how much of

1046
00:47:26,559 --> 00:47:29,680
the core bg bgp logic is hard coded and

1047
00:47:29,680 --> 00:47:33,440
how much is extensible oh yeah

1048
00:47:33,440 --> 00:47:35,359
actually um

1049
00:47:35,359 --> 00:47:37,920
what you have to do to put xbgp inside

1050
00:47:37,920 --> 00:47:40,640
an implementation is to first follow the

1051
00:47:40,640 --> 00:47:44,160
original rfc so 4271

1052
00:47:44,160 --> 00:47:44,960
and

1053
00:47:44,960 --> 00:47:46,800
we also need

1054
00:47:46,800 --> 00:47:50,319
all the extensions above multiprotocol

1055
00:47:50,319 --> 00:47:52,240
for example in the in the in the paper

1056
00:47:52,240 --> 00:47:54,319
we reproduce the

1057
00:47:54,319 --> 00:47:58,079
root reflector functionalities

1058
00:47:58,079 --> 00:47:58,960
and

1059
00:47:58,960 --> 00:48:01,040
this is one of some

1060
00:48:01,040 --> 00:48:04,240
some some new skills that prove that we

1061
00:48:04,240 --> 00:48:06,800
can actually implement a lot of

1062
00:48:06,800 --> 00:48:08,079
complexity

1063
00:48:08,079 --> 00:48:09,040
um

1064
00:48:09,040 --> 00:48:09,920
but

1065
00:48:09,920 --> 00:48:13,760
the strong basis of hbgp relies on the

1066
00:48:13,760 --> 00:48:16,240
the original draft and multi-protocol

1067
00:48:16,240 --> 00:48:18,480
extension the other thing you can you

1068
00:48:18,480 --> 00:48:19,599
can do

1069
00:48:19,599 --> 00:48:22,000
you can actually put your code inside

1070
00:48:22,000 --> 00:48:24,160
the extension code and then put it in

1071
00:48:24,160 --> 00:48:25,760
the the

1072
00:48:25,760 --> 00:48:27,440
implementation which is six php

1073
00:48:27,440 --> 00:48:30,400
compatible but if for example if you

1074
00:48:30,400 --> 00:48:32,720
want to

1075
00:48:32,720 --> 00:48:34,800
to modify some data structure that you

1076
00:48:34,800 --> 00:48:36,559
just acquired inside the implementation

1077
00:48:36,559 --> 00:48:40,000
you cannot for example uh if you uh take

1078
00:48:40,000 --> 00:48:41,760
the the functionality that

1079
00:48:41,760 --> 00:48:44,319
enlarge the the buffer of uh

1080
00:48:44,319 --> 00:48:46,079
of bgp message so

1081
00:48:46,079 --> 00:48:49,440
4k to 74

1082
00:48:49,440 --> 00:48:50,640
kilobytes of

1083
00:48:50,640 --> 00:48:53,760
memory to one message that's this is one

1084
00:48:53,760 --> 00:48:56,079
example of a feature that you cannot uh

1085
00:48:56,079 --> 00:48:58,720
do within the bgp so everything related

1086
00:48:58,720 --> 00:49:01,359
to uh to the memory or

1087
00:49:01,359 --> 00:49:03,760
that's letter structure which is when he

1088
00:49:03,760 --> 00:49:05,760
put it inside the

1089
00:49:05,760 --> 00:49:08,480
implementation

1090
00:49:10,400 --> 00:49:11,520
oh okay

1091
00:49:11,520 --> 00:49:13,520
that makes sense that makes sense uh

1092
00:49:13,520 --> 00:49:16,000
does anyone else have questions if you

1093
00:49:16,000 --> 00:49:17,839
put yourself in in the queue if you have

1094
00:49:17,839 --> 00:49:20,720
uh elliot are you still in the queue or

1095
00:49:20,720 --> 00:49:24,839
said just left over from before

1096
00:49:30,800 --> 00:49:34,000
okay so i just had uh one one last thing

1097
00:49:34,000 --> 00:49:34,800
uh

1098
00:49:34,800 --> 00:49:36,559
i mean you know obviously that the focus

1099
00:49:36,559 --> 00:49:39,359
of the the of the

1100
00:49:39,359 --> 00:49:41,200
mechanism is extensibility of the

1101
00:49:41,200 --> 00:49:42,800
protocols uh

1102
00:49:42,800 --> 00:49:44,880
and you know you you make the point of

1103
00:49:44,880 --> 00:49:46,880
when you can't wait for the itf and i

1104
00:49:46,880 --> 00:49:48,800
think it's it's well known that that the

1105
00:49:48,800 --> 00:49:51,119
itf process takes time

1106
00:49:51,119 --> 00:49:54,000
uh and you know obviously uh elliot

1107
00:49:54,000 --> 00:49:56,240
mentioned some of the the reasons for

1108
00:49:56,240 --> 00:49:59,760
that uh a minute ago um

1109
00:49:59,760 --> 00:50:02,880
and um assuming we can't make the itf go

1110
00:50:02,880 --> 00:50:06,079
any faster um other things we

1111
00:50:06,079 --> 00:50:08,079
you think we should be

1112
00:50:08,079 --> 00:50:09,839
doing differently in the way we

1113
00:50:09,839 --> 00:50:12,000
structure the protocols that will help

1114
00:50:12,000 --> 00:50:14,000
this sort of experimentation once the

1115
00:50:14,000 --> 00:50:16,880
rfc has been published uh other are

1116
00:50:16,880 --> 00:50:19,040
there any general lessons that that can

1117
00:50:19,040 --> 00:50:20,640
be learned from this or is this very

1118
00:50:20,640 --> 00:50:22,960
specific to the the details of how bgp

1119
00:50:22,960 --> 00:50:26,200
was implemented

1120
00:50:27,920 --> 00:50:30,480
actually

1121
00:50:33,520 --> 00:50:36,480
when when we look at uh

1122
00:50:36,480 --> 00:50:39,440
xbgb the the protocol was pretty well

1123
00:50:39,440 --> 00:50:40,559
established

1124
00:50:40,559 --> 00:50:42,480
so if the

1125
00:50:42,480 --> 00:50:45,920
what we we try to do with cbgp is to uh

1126
00:50:45,920 --> 00:50:47,040
understand

1127
00:50:47,040 --> 00:50:49,760
what are the properties of the protocol

1128
00:50:49,760 --> 00:50:51,280
and then

1129
00:50:51,280 --> 00:50:52,319
we

1130
00:50:52,319 --> 00:50:54,319
establish a set of properties to

1131
00:50:54,319 --> 00:50:55,370
actually um

1132
00:50:55,370 --> 00:50:56,960
[Music]

1133
00:50:56,960 --> 00:51:00,079
actually model a general um

1134
00:51:00,079 --> 00:51:02,559
actually architecture of of the routing

1135
00:51:02,559 --> 00:51:04,000
protocol and then

1136
00:51:04,000 --> 00:51:06,400
when you have the general model of this

1137
00:51:06,400 --> 00:51:08,559
routing protocol then you will look

1138
00:51:08,559 --> 00:51:11,359
inside your implementation if it

1139
00:51:11,359 --> 00:51:13,520
actually implements this

1140
00:51:13,520 --> 00:51:15,680
kind of general model and if you

1141
00:51:15,680 --> 00:51:17,760
implement this general model then you

1142
00:51:17,760 --> 00:51:19,280
will be able to

1143
00:51:19,280 --> 00:51:22,319
actually put xbgp inside the protocol

1144
00:51:22,319 --> 00:51:25,280
but yeah if the the implementation is

1145
00:51:25,280 --> 00:51:29,280
only exotic i would say then ugp will be

1146
00:51:29,280 --> 00:51:30,800
more

1147
00:51:30,800 --> 00:51:32,240
it might be difficult to integrate

1148
00:51:32,240 --> 00:51:33,599
inside

1149
00:51:33,599 --> 00:51:36,680
the implementation

1150
00:51:37,599 --> 00:51:40,079
yeah that that that that makes sense so

1151
00:51:40,079 --> 00:51:41,119
i guess the

1152
00:51:41,119 --> 00:51:43,200
the general conclusion is the modularity

1153
00:51:43,200 --> 00:51:45,200
in the in the the way the specifications

1154
00:51:45,200 --> 00:51:46,800
are written might make this process

1155
00:51:46,800 --> 00:51:49,200
easier for developing modular apis and

1156
00:51:49,200 --> 00:51:51,200
extensions yeah okay

1157
00:51:51,200 --> 00:51:53,040
so that's maybe some something that for

1158
00:51:53,040 --> 00:51:56,480
the standards groups to think about

1159
00:51:56,480 --> 00:51:58,880
all right uh and this is where over time

1160
00:51:58,880 --> 00:52:01,040
and i i don't see anyone else in in the

1161
00:52:01,040 --> 00:52:03,680
queue so um thank you very much uh i

1162
00:52:03,680 --> 00:52:05,200
think that's a really interesting book

1163
00:52:05,200 --> 00:52:06,480
some really nice answers to the

1164
00:52:06,480 --> 00:52:08,240
questions um

1165
00:52:08,240 --> 00:52:10,319
if there are any any more questions to

1166
00:52:10,319 --> 00:52:12,000
tomorrow please please put them in the

1167
00:52:12,000 --> 00:52:14,240
chat uh and um

1168
00:52:14,240 --> 00:52:16,319
maybe he'll be able to to be around in

1169
00:52:16,319 --> 00:52:18,880
the break afterwards uh if people want

1170
00:52:18,880 --> 00:52:20,400
to catch up with him in in the gather

1171
00:52:20,400 --> 00:52:22,000
space perhaps

1172
00:52:22,000 --> 00:52:24,480
or of course drop him an email

1173
00:52:24,480 --> 00:52:27,280
all right so um thank you thomas um and

1174
00:52:27,280 --> 00:52:30,400
we'll move on to the the next talk uh of

1175
00:52:30,400 --> 00:52:31,280
the

1176
00:52:31,280 --> 00:52:33,119
the session um

1177
00:52:33,119 --> 00:52:36,880
which is by uh axa kashaf

1178
00:52:36,880 --> 00:52:40,160
uh axa is a phd student at carnegie

1179
00:52:40,160 --> 00:52:43,599
mellon university uh she's co-advised by

1180
00:52:43,599 --> 00:52:46,720
eva sekker and

1181
00:52:48,720 --> 00:52:50,880
and i apologize they must have mangled

1182
00:52:50,880 --> 00:52:52,160
those names

1183
00:52:52,160 --> 00:52:54,559
um axis focuses on

1184
00:52:54,559 --> 00:52:56,880
network security uh particularly uh

1185
00:52:56,880 --> 00:52:59,119
distributed denial of service attacks

1186
00:52:59,119 --> 00:53:01,280
and currently she's working on building

1187
00:53:01,280 --> 00:53:03,520
reconnaissance techniques to to profile

1188
00:53:03,520 --> 00:53:06,319
the capabilities of ddos defense systems

1189
00:53:06,319 --> 00:53:08,480
uh looking at understanding and

1190
00:53:08,480 --> 00:53:10,400
improving the resilience of the internet

1191
00:53:10,400 --> 00:53:12,960
against ddos attacks

1192
00:53:12,960 --> 00:53:15,920
the award paper today uh is uh analyzing

1193
00:53:15,920 --> 00:53:18,079
third-party service dependencies in

1194
00:53:18,079 --> 00:53:21,599
modern web services um what

1195
00:53:21,599 --> 00:53:23,359
what we learned from the the mirai din

1196
00:53:23,359 --> 00:53:25,119
incident uh and it was originally

1197
00:53:25,119 --> 00:53:26,960
presented at the acm internet

1198
00:53:26,960 --> 00:53:30,079
measurement conference in 2020

1199
00:53:30,079 --> 00:53:33,520
so if we can play the next video

1200
00:53:40,839 --> 00:53:44,079
please hi this is alexa i'm a phd

1201
00:53:44,079 --> 00:53:46,319
student at cmu and i'm going to present

1202
00:53:46,319 --> 00:53:48,240
my work on analyzing third-party

1203
00:53:48,240 --> 00:53:51,119
dependencies and modern web services

1204
00:53:51,119 --> 00:53:52,880
this is a collaborative work with my

1205
00:53:52,880 --> 00:53:56,880
advisors jasper and yuraj

1206
00:53:56,880 --> 00:53:59,280
the study is motivated by a ddos attack

1207
00:53:59,280 --> 00:54:01,920
that happened in 2016 on a dns provider

1208
00:54:01,920 --> 00:54:03,839
named time

1209
00:54:03,839 --> 00:54:06,079
there are a lot of lessons to be learned

1210
00:54:06,079 --> 00:54:08,400
from this attack particularly its root

1211
00:54:08,400 --> 00:54:11,599
cause and as i show in this talk

1212
00:54:11,599 --> 00:54:13,599
we can expect more time like attacks in

1213
00:54:13,599 --> 00:54:16,079
the future

1214
00:54:16,800 --> 00:54:19,200
during this attack in ray 16 a lot of

1215
00:54:19,200 --> 00:54:22,400
popular websites such as github

1216
00:54:22,400 --> 00:54:25,040
spotify and twitter were inaccessible to

1217
00:54:25,040 --> 00:54:27,839
users for many hours

1218
00:54:27,839 --> 00:54:30,160
here is an outage map of the attack in

1219
00:54:30,160 --> 00:54:33,760
total 178 000 domains went offline and

1220
00:54:33,760 --> 00:54:38,000
tens of millions of users were affected

1221
00:54:38,000 --> 00:54:40,799
the list of websites that went down goes

1222
00:54:40,799 --> 00:54:43,119
on it includes almost all the popular

1223
00:54:43,119 --> 00:54:45,280
services we know

1224
00:54:45,280 --> 00:54:47,520
so how were the attackers able to bring

1225
00:54:47,520 --> 00:54:50,400
all of these down

1226
00:54:50,799 --> 00:54:52,880
this was possible because all these

1227
00:54:52,880 --> 00:54:55,680
websites such as netflix exclusively

1228
00:54:55,680 --> 00:54:58,319
relied on dying a third-party dns

1229
00:54:58,319 --> 00:54:59,520
provider

1230
00:54:59,520 --> 00:55:02,000
that acted as their authoritative name

1231
00:55:02,000 --> 00:55:03,359
server

1232
00:55:03,359 --> 00:55:04,799
as a result

1233
00:55:04,799 --> 00:55:06,720
in the authoritative name server was

1234
00:55:06,720 --> 00:55:09,680
down a lot of websites were inaccessible

1235
00:55:09,680 --> 00:55:12,960
to millions of users

1236
00:55:16,400 --> 00:55:18,480
attacks like these raise many questions

1237
00:55:18,480 --> 00:55:21,040
about the resilience of the internet how

1238
00:55:21,040 --> 00:55:23,599
easy is it to bring down the internet

1239
00:55:23,599 --> 00:55:26,079
particularly we need to understand how

1240
00:55:26,079 --> 00:55:27,760
prevalent these kind of third-party

1241
00:55:27,760 --> 00:55:29,599
dependencies are

1242
00:55:29,599 --> 00:55:32,000
for example how many other websites are

1243
00:55:32,000 --> 00:55:35,280
at risk of plan-like attacks

1244
00:55:35,280 --> 00:55:37,200
are there other hidden dependencies that

1245
00:55:37,200 --> 00:55:39,280
we also need to know about

1246
00:55:39,280 --> 00:55:40,559
there might be inter-service

1247
00:55:40,559 --> 00:55:43,119
dependencies which indirectly affect the

1248
00:55:43,119 --> 00:55:45,200
website

1249
00:55:45,200 --> 00:55:46,799
and finally

1250
00:55:46,799 --> 00:55:48,720
since stein attack had such a huge

1251
00:55:48,720 --> 00:55:50,400
impact it is natural to think that

1252
00:55:50,400 --> 00:55:53,200
websites would adopt as a result

1253
00:55:53,200 --> 00:55:55,440
how has the world changed in using third

1254
00:55:55,440 --> 00:55:57,920
party services as a consequence of 9

1255
00:55:57,920 --> 00:55:59,440
attack

1256
00:55:59,440 --> 00:56:01,680
for example did websites stop using

1257
00:56:01,680 --> 00:56:03,760
dying or did they start using multiple

1258
00:56:03,760 --> 00:56:06,319
providers

1259
00:56:06,319 --> 00:56:08,400
to answer these questions we analyzed

1260
00:56:08,400 --> 00:56:10,960
top hundred thousand websites

1261
00:56:10,960 --> 00:56:12,640
alexa websites

1262
00:56:12,640 --> 00:56:14,880
alexa is an external service that ranks

1263
00:56:14,880 --> 00:56:17,040
websites by popularity

1264
00:56:17,040 --> 00:56:18,960
alexa rank is calculated from a

1265
00:56:18,960 --> 00:56:20,960
combination of daily visitors and page

1266
00:56:20,960 --> 00:56:24,079
views on a website

1267
00:56:24,240 --> 00:56:26,559
to see how the world changed in response

1268
00:56:26,559 --> 00:56:28,079
to the dine attack we look at the

1269
00:56:28,079 --> 00:56:29,760
dependencies of top hundred thousand

1270
00:56:29,760 --> 00:56:31,920
websites in 2016

1271
00:56:31,920 --> 00:56:35,040
and 2020.

1272
00:56:35,920 --> 00:56:37,760
in this talk i'll first describe our

1273
00:56:37,760 --> 00:56:39,760
measurement methodology

1274
00:56:39,760 --> 00:56:41,920
to measure the third-party dependencies

1275
00:56:41,920 --> 00:56:43,280
of websites

1276
00:56:43,280 --> 00:56:45,920
and then explain our main findings

1277
00:56:45,920 --> 00:56:48,720
then after the findings i will also

1278
00:56:48,720 --> 00:56:50,640
present some recommendations in light of

1279
00:56:50,640 --> 00:56:52,640
our findings and finally some

1280
00:56:52,640 --> 00:56:55,520
limitations of our work

1281
00:56:55,520 --> 00:56:56,640
to start with the measurement

1282
00:56:56,640 --> 00:56:59,040
methodology

1283
00:56:59,040 --> 00:57:01,200
we first need to identify the services

1284
00:57:01,200 --> 00:57:03,440
which are crucial for a user's access to

1285
00:57:03,440 --> 00:57:05,359
the website

1286
00:57:05,359 --> 00:57:07,440
to do this we look at the life cycle of

1287
00:57:07,440 --> 00:57:09,200
a web request

1288
00:57:09,200 --> 00:57:11,760
when a user makes a request to a website

1289
00:57:11,760 --> 00:57:14,480
it first goes to the authoritative dns

1290
00:57:14,480 --> 00:57:16,880
server which provides the ip resolution

1291
00:57:16,880 --> 00:57:19,520
of the website

1292
00:57:19,520 --> 00:57:21,599
after the ip resolution of the website

1293
00:57:21,599 --> 00:57:24,160
user starts a tcp handshake followed by

1294
00:57:24,160 --> 00:57:26,559
an ssl handshake if the website supports

1295
00:57:26,559 --> 00:57:28,000
https

1296
00:57:28,000 --> 00:57:30,240
if yes then the website provides a

1297
00:57:30,240 --> 00:57:31,599
certificate

1298
00:57:31,599 --> 00:57:33,680
which is verified for revocation by the

1299
00:57:33,680 --> 00:57:37,040
user by contacting the ocsp server or

1300
00:57:37,040 --> 00:57:39,359
crl distribution points set up by the

1301
00:57:39,359 --> 00:57:42,480
certifying authority

1302
00:57:42,480 --> 00:57:45,200
finally if the certificate is valid the

1303
00:57:45,200 --> 00:57:47,200
user requests the content of the of the

1304
00:57:47,200 --> 00:57:49,200
website page

1305
00:57:49,200 --> 00:57:51,920
if the website is using a cdn then cdn

1306
00:57:51,920 --> 00:57:54,960
will serve this content based on this we

1307
00:57:54,960 --> 00:57:57,119
identify three services the first one is

1308
00:57:57,119 --> 00:57:59,760
dns second one is certificate validation

1309
00:57:59,760 --> 00:58:00,559
by

1310
00:58:00,559 --> 00:58:02,880
certified authority and the third one is

1311
00:58:02,880 --> 00:58:04,000
cdn

1312
00:58:04,000 --> 00:58:05,119
note that

1313
00:58:05,119 --> 00:58:07,520
these by no means are the only services

1314
00:58:07,520 --> 00:58:10,000
that a web request encounters

1315
00:58:10,000 --> 00:58:11,839
but we just identify these three

1316
00:58:11,839 --> 00:58:13,680
services and define the scope of our

1317
00:58:13,680 --> 00:58:15,919
work

1318
00:58:16,559 --> 00:58:18,400
given these services and websites we

1319
00:58:18,400 --> 00:58:20,720
need to identify what exactly we want to

1320
00:58:20,720 --> 00:58:22,400
measure

1321
00:58:22,400 --> 00:58:23,520
so we

1322
00:58:23,520 --> 00:58:24,880
we are interested in third-party

1323
00:58:24,880 --> 00:58:27,280
dependency of a website for example here

1324
00:58:27,280 --> 00:58:29,359
the website techradar uses another

1325
00:58:29,359 --> 00:58:31,520
entity let's encrypt as its certificate

1326
00:58:31,520 --> 00:58:33,760
authority

1327
00:58:33,760 --> 00:58:34,720
next

1328
00:58:34,720 --> 00:58:36,319
there might be indirect dependencies

1329
00:58:36,319 --> 00:58:38,880
between websites and service providers

1330
00:58:38,880 --> 00:58:41,200
for example here let's encrypt uses

1331
00:58:41,200 --> 00:58:43,440
cloudflare as its authoritative name

1332
00:58:43,440 --> 00:58:45,680
server and hence techradar has an

1333
00:58:45,680 --> 00:58:48,720
indirect dependency on cloudflare

1334
00:58:48,720 --> 00:58:50,559
we are also interested in critical

1335
00:58:50,559 --> 00:58:52,960
dependencies which exist if a service

1336
00:58:52,960 --> 00:58:56,400
provider is integral for a given service

1337
00:58:56,400 --> 00:58:58,319
for example here

1338
00:58:58,319 --> 00:59:01,200
if cloudflare is down ocsp servers of

1339
00:59:01,200 --> 00:59:03,839
let's encrypt will not be accessible

1340
00:59:03,839 --> 00:59:05,839
hence let's encrypt has a critical

1341
00:59:05,839 --> 00:59:08,960
dependency on cloudflare

1342
00:59:08,960 --> 00:59:11,280
in case of dns in cdn we compute

1343
00:59:11,280 --> 00:59:13,280
critical dependency by measuring if the

1344
00:59:13,280 --> 00:59:17,040
website is redundantly provisioned

1345
00:59:17,040 --> 00:59:18,960
which means that the website is using

1346
00:59:18,960 --> 00:59:22,319
multiple dns or cdn providers

1347
00:59:22,319 --> 00:59:24,240
and in case of certificate authorities

1348
00:59:24,240 --> 00:59:25,920
we compute it by measuring if the

1349
00:59:25,920 --> 00:59:30,240
website has enabled ocsp stapling

1350
00:59:30,799 --> 00:59:33,119
here techradar does not support ocsp

1351
00:59:33,119 --> 00:59:35,200
stapling and hence techradar has a

1352
00:59:35,200 --> 00:59:37,440
critical dependency on let's encrypt as

1353
00:59:37,440 --> 00:59:40,079
well as cloudflare

1354
00:59:40,079 --> 00:59:42,720
if all csv step link is enabled the user

1355
00:59:42,720 --> 00:59:44,960
doesn't have to contact the ocsp server

1356
00:59:44,960 --> 00:59:47,280
for certificate validation so let's

1357
00:59:47,280 --> 00:59:50,640
encrypt will not be contacted here

1358
00:59:50,640 --> 00:59:52,799
but if

1359
00:59:52,799 --> 00:59:55,599
ocsp stapling is not is not enabled then

1360
00:59:55,599 --> 00:59:57,359
techradar will have to users of

1361
00:59:57,359 --> 00:59:59,760
techradar will have to contact the let's

1362
00:59:59,760 --> 01:00:01,760
encrypt ocsc servers to validate the

1363
01:00:01,760 --> 01:00:04,319
certificate

1364
01:00:04,640 --> 01:00:06,880
now given this we first describe our

1365
01:00:06,880 --> 01:00:10,319
measurement methodology for dns

1366
01:00:10,319 --> 01:00:12,720
what we essentially want is to find the

1367
01:00:12,720 --> 01:00:14,480
authoritative name server of each

1368
01:00:14,480 --> 01:00:16,480
website this can easily be done by

1369
01:00:16,480 --> 01:00:18,559
looking at the name servers resource

1370
01:00:18,559 --> 01:00:20,960
record of a website

1371
01:00:20,960 --> 01:00:23,520
then we want to identify if this name

1372
01:00:23,520 --> 01:00:26,240
service a server is private or a third

1373
01:00:26,240 --> 01:00:28,160
party

1374
01:00:28,160 --> 01:00:30,079
i would go into details for this in the

1375
01:00:30,079 --> 01:00:31,839
next slide that how do we actually

1376
01:00:31,839 --> 01:00:33,920
identify if it's a private or third

1377
01:00:33,920 --> 01:00:34,880
party

1378
01:00:34,880 --> 01:00:36,880
and finally for a website and its name

1379
01:00:36,880 --> 01:00:39,040
server we want to identify which of

1380
01:00:39,040 --> 01:00:40,960
these name servers belong to the same

1381
01:00:40,960 --> 01:00:44,400
entity for instance here azure dns and

1382
01:00:44,400 --> 01:00:47,440
o365 filtering both belong to microsoft

1383
01:00:47,440 --> 01:00:50,880
so since live is live.com is using

1384
01:00:50,880 --> 01:00:52,400
these two which belong to the same

1385
01:00:52,400 --> 01:00:54,640
entity it is actually not redundantly

1386
01:00:54,640 --> 01:00:57,640
provisioned

1387
01:00:58,640 --> 01:01:00,880
to identify third party name servers

1388
01:01:00,880 --> 01:01:03,440
prior work looks at second level and top

1389
01:01:03,440 --> 01:01:05,520
level domains of the name server and the

1390
01:01:05,520 --> 01:01:07,839
website if they match then the name

1391
01:01:07,839 --> 01:01:12,319
server is private otherwise third party

1392
01:01:12,319 --> 01:01:15,119
for example here in case of google its

1393
01:01:15,119 --> 01:01:17,680
name server also has the same second and

1394
01:01:17,680 --> 01:01:19,280
top level domain

1395
01:01:19,280 --> 01:01:20,880
google.com

1396
01:01:20,880 --> 01:01:23,040
hence it gets correctly classified as

1397
01:01:23,040 --> 01:01:25,119
private however

1398
01:01:25,119 --> 01:01:27,280
this fails in case of youtube where the

1399
01:01:27,280 --> 01:01:29,440
name server gets classified as third

1400
01:01:29,440 --> 01:01:33,119
party when in fact it is not

1401
01:01:34,079 --> 01:01:35,200
other

1402
01:01:35,200 --> 01:01:36,640
approaches look at the start of

1403
01:01:36,640 --> 01:01:39,119
authority dns records which contain

1404
01:01:39,119 --> 01:01:41,280
administrative information about the dns

1405
01:01:41,280 --> 01:01:42,799
zone

1406
01:01:42,799 --> 01:01:44,640
if the start of authority record of the

1407
01:01:44,640 --> 01:01:46,799
website and name server are the same

1408
01:01:46,799 --> 01:01:50,559
then it's private otherwise third party

1409
01:01:50,559 --> 01:01:52,720
this works in case of youtube

1410
01:01:52,720 --> 01:01:55,119
but it fails for instance in case of

1411
01:01:55,119 --> 01:01:57,200
twitter where it is using a third-party

1412
01:01:57,200 --> 01:01:59,280
name server

1413
01:01:59,280 --> 01:02:01,359
and its start of authority

1414
01:02:01,359 --> 01:02:02,960
is also

1415
01:02:02,960 --> 01:02:05,200
that third party

1416
01:02:05,200 --> 01:02:07,200
for instance here twitter using twitter

1417
01:02:07,200 --> 01:02:09,359
is using dyneck.net which actually

1418
01:02:09,359 --> 01:02:12,240
belongs to time

1419
01:02:13,039 --> 01:02:15,440
to cope with these issues we add a few

1420
01:02:15,440 --> 01:02:18,079
more heuristics so for all website and

1421
01:02:18,079 --> 01:02:20,240
name server pairs we classify the name

1422
01:02:20,240 --> 01:02:23,280
server as private if the second level

1423
01:02:23,280 --> 01:02:25,680
domain and top level domain match for

1424
01:02:25,680 --> 01:02:27,920
the website and the name server

1425
01:02:27,920 --> 01:02:30,400
or if the name server

1426
01:02:30,400 --> 01:02:33,119
is present in the subject alternate name

1427
01:02:33,119 --> 01:02:35,440
list of that website

1428
01:02:35,440 --> 01:02:37,520
san list is present on the https

1429
01:02:37,520 --> 01:02:39,680
certificate of a website which tells

1430
01:02:39,680 --> 01:02:41,920
that this certificate will also work for

1431
01:02:41,920 --> 01:02:44,480
the domains present in the send list

1432
01:02:44,480 --> 01:02:46,559
hence it's a good way to know if a given

1433
01:02:46,559 --> 01:02:48,559
domain is private

1434
01:02:48,559 --> 01:02:51,039
or not

1435
01:02:53,280 --> 01:02:55,839
if the start of authority do not match

1436
01:02:55,839 --> 01:02:59,359
we classify it as third and finally if

1437
01:02:59,359 --> 01:03:01,680
the name server

1438
01:03:01,680 --> 01:03:04,559
serves more than 50 websites then we say

1439
01:03:04,559 --> 01:03:08,400
that it's more likely third party

1440
01:03:10,160 --> 01:03:12,000
in general we identify

1441
01:03:12,000 --> 01:03:14,319
approximately 10 000 third-party dns

1442
01:03:14,319 --> 01:03:17,760
providers in our data

1443
01:03:17,760 --> 01:03:20,799
for measuring cdns we fetch the web page

1444
01:03:20,799 --> 01:03:22,319
of the website

1445
01:03:22,319 --> 01:03:24,480
that we want to measure the cdn of and

1446
01:03:24,480 --> 01:03:26,720
then we extract all the resources in the

1447
01:03:26,720 --> 01:03:28,799
webpage

1448
01:03:28,799 --> 01:03:30,960
and identify the resources which are

1449
01:03:30,960 --> 01:03:32,799
internal

1450
01:03:32,799 --> 01:03:34,079
for example

1451
01:03:34,079 --> 01:03:37,119
for reddit.com this resource that comes

1452
01:03:37,119 --> 01:03:39,119
from redditmedia.com

1453
01:03:39,119 --> 01:03:41,520
is an internal resource

1454
01:03:41,520 --> 01:03:44,079
we use tld matching startup authority

1455
01:03:44,079 --> 01:03:47,119
and subject alternate named lists here

1456
01:03:47,119 --> 01:03:49,200
as well to identify internal and

1457
01:03:49,200 --> 01:03:51,760
external resources

1458
01:03:51,760 --> 01:03:54,319
we do this because internal resources if

1459
01:03:54,319 --> 01:03:56,319
they come from a cdn then it means that

1460
01:03:56,319 --> 01:04:00,319
the website is actually using a cdo

1461
01:04:00,960 --> 01:04:02,960
for all the internal resources we fetch

1462
01:04:02,960 --> 01:04:05,599
their cname records

1463
01:04:05,599 --> 01:04:07,920
if the website is using a cdn then these

1464
01:04:07,920 --> 01:04:10,559
cnns will point to the cdn for instance

1465
01:04:10,559 --> 01:04:11,760
here the

1466
01:04:11,760 --> 01:04:15,760
the cnam actually points to fastly

1467
01:04:15,920 --> 01:04:18,000
we input this cname to

1468
01:04:18,000 --> 01:04:21,119
to our cname to cdn mark which we are

1469
01:04:21,119 --> 01:04:24,799
which will output fastly here

1470
01:04:24,799 --> 01:04:26,880
we manually build this map by taking

1471
01:04:26,880 --> 01:04:28,880
help from available seniors on the

1472
01:04:28,880 --> 01:04:31,599
internet on the cdn's websites and also

1473
01:04:31,599 --> 01:04:34,000
in public suffix lists

1474
01:04:34,000 --> 01:04:36,640
after we have identified the cdn being

1475
01:04:36,640 --> 01:04:38,880
used by our website we also need to see

1476
01:04:38,880 --> 01:04:41,920
if the cdn is private or a third party

1477
01:04:41,920 --> 01:04:44,480
and to do that we again use tld startup

1478
01:04:44,480 --> 01:04:46,880
authority and sans list

1479
01:04:46,880 --> 01:04:49,039
to see if the cdn is private or third

1480
01:04:49,039 --> 01:04:51,440
party

1481
01:04:51,680 --> 01:04:53,839
in general we identify total 86

1482
01:04:53,839 --> 01:04:57,599
third-party cdns in our data

1483
01:04:58,079 --> 01:05:00,480
for certificate authority dependency we

1484
01:05:00,480 --> 01:05:03,839
just fetch the certificate of a website

1485
01:05:03,839 --> 01:05:05,760
and from that extract the links for the

1486
01:05:05,760 --> 01:05:07,680
ocsp servers

1487
01:05:07,680 --> 01:05:10,319
and the crl distribution points

1488
01:05:10,319 --> 01:05:13,280
and we use the same techniques

1489
01:05:13,280 --> 01:05:15,599
which are tld matching startup authority

1490
01:05:15,599 --> 01:05:18,559
non-matching and sandless to identify

1491
01:05:18,559 --> 01:05:20,880
if these are third-party certificate

1492
01:05:20,880 --> 01:05:23,839
authorities or not

1493
01:05:24,559 --> 01:05:27,520
in our data we identify total 59

1494
01:05:27,520 --> 01:05:31,200
third-party certificate authorities

1495
01:05:34,480 --> 01:05:38,319
now we present our main findings

1496
01:05:40,079 --> 01:05:42,160
i will start by answering the question

1497
01:05:42,160 --> 01:05:44,160
how prevalent third party dependencies

1498
01:05:44,160 --> 01:05:46,480
are and how concentrated different third

1499
01:05:46,480 --> 01:05:50,240
party providers are

1500
01:05:50,240 --> 01:05:52,799
overall

1501
01:05:52,799 --> 01:05:55,119
we find that 89

1502
01:05:55,119 --> 01:05:57,760
of the top 100 000 websites

1503
01:05:57,760 --> 01:06:00,960
use third-party dns

1504
01:06:00,960 --> 01:06:05,039
32 use a third-party cdn

1505
01:06:05,039 --> 01:06:08,319
and 76.8 percent use a third-party

1506
01:06:08,319 --> 01:06:11,440
certificate authority

1507
01:06:11,440 --> 01:06:12,559
moreover

1508
01:06:12,559 --> 01:06:15,440
85 critically dependent on a third-party

1509
01:06:15,440 --> 01:06:17,520
dns provider

1510
01:06:17,520 --> 01:06:20,319
28 percent critically depend on a cdn

1511
01:06:20,319 --> 01:06:22,799
provider

1512
01:06:24,000 --> 01:06:26,960
and 59.5 critically depend on a

1513
01:06:26,960 --> 01:06:30,079
certificate authority

1514
01:06:30,480 --> 01:06:32,640
for dns in cdn it means that they're

1515
01:06:32,640 --> 01:06:35,200
using just a single dns or cdn provider

1516
01:06:35,200 --> 01:06:37,119
and for c it means that they do not

1517
01:06:37,119 --> 01:06:40,559
support ocsp stapling

1518
01:06:40,960 --> 01:06:44,240
all in all we found that 89

1519
01:06:44,240 --> 01:06:46,960
of the top 100 000 websites

1520
01:06:46,960 --> 01:06:50,000
critically depend on a dna dns

1521
01:06:50,000 --> 01:06:53,760
cdn or ca provider

1522
01:06:54,480 --> 01:06:56,240
in addition to this

1523
01:06:56,240 --> 01:06:58,559
we also found that critical dependencies

1524
01:06:58,559 --> 01:07:02,240
are higher for less popular websites

1525
01:07:02,240 --> 01:07:05,920
for example we observe that 49

1526
01:07:05,920 --> 01:07:08,480
use a third-party dns provider

1527
01:07:08,480 --> 01:07:10,960
in the top 100 websites

1528
01:07:10,960 --> 01:07:12,400
and 89

1529
01:07:12,400 --> 01:07:14,880
in the top 1000 websites

1530
01:07:14,880 --> 01:07:16,319
same is the case for critical

1531
01:07:16,319 --> 01:07:17,599
dependencies

1532
01:07:17,599 --> 01:07:20,480
for instance 27.9 percent critically

1533
01:07:20,480 --> 01:07:24,000
depend in the top 100 while 84.8 percent

1534
01:07:24,000 --> 01:07:27,280
in the top 100 000.

1535
01:07:27,280 --> 01:07:29,280
this means that more popular websites

1536
01:07:29,280 --> 01:07:32,799
care more about availability

1537
01:07:33,520 --> 01:07:35,839
now since third-party dependencies are

1538
01:07:35,839 --> 01:07:38,000
very prevalent it raises the question of

1539
01:07:38,000 --> 01:07:42,400
how concentrated various providers are

1540
01:07:42,400 --> 01:07:44,240
the greater the concentration greater

1541
01:07:44,240 --> 01:07:47,919
will be the single points of failure

1542
01:07:48,160 --> 01:07:50,640
this is a dependency graph

1543
01:07:50,640 --> 01:07:53,680
of website to dns dependency where each

1544
01:07:53,680 --> 01:07:56,079
edge shows the dependency of a website

1545
01:07:56,079 --> 01:07:59,119
on a third-party dns provider

1546
01:07:59,119 --> 01:08:00,799
the size of each node here is

1547
01:08:00,799 --> 01:08:03,039
proportional to its in-degree

1548
01:08:03,039 --> 01:08:05,119
which in the case of dns provider is the

1549
01:08:05,119 --> 01:08:08,240
number of websites using it

1550
01:08:08,240 --> 01:08:11,119
we observe that the topmost dns provider

1551
01:08:11,119 --> 01:08:14,319
cloudflare alone serves 23 of the top

1552
01:08:14,319 --> 01:08:17,600
100 000 websites

1553
01:08:17,600 --> 01:08:20,080
in general we observe that only top

1554
01:08:20,080 --> 01:08:22,560
three serve almost 40

1555
01:08:22,560 --> 01:08:24,799
of the websites when the total dns

1556
01:08:24,799 --> 01:08:29,679
providers we observe are almost 10 000.

1557
01:08:29,679 --> 01:08:32,319
this indicates dns space is highly

1558
01:08:32,319 --> 01:08:35,440
highly concentrated

1559
01:08:36,640 --> 01:08:39,600
we see similar trends in cdn where the

1560
01:08:39,600 --> 01:08:41,839
top most syrian provider amazon

1561
01:08:41,839 --> 01:08:44,960
cloudfront alone serves 26 percent of

1562
01:08:44,960 --> 01:08:48,319
the websites that use cdn

1563
01:08:48,319 --> 01:08:50,799
particularly we observe that only three

1564
01:08:50,799 --> 01:08:52,960
cdns serve almost 60 percent of the

1565
01:08:52,960 --> 01:08:55,920
websites that use cdn which are

1566
01:08:55,920 --> 01:09:00,080
cloudfront akamai and cloudflare

1567
01:09:02,960 --> 01:09:05,120
the situation for certificate validation

1568
01:09:05,120 --> 01:09:06,880
is also similar

1569
01:09:06,880 --> 01:09:09,279
digit alone serves 28 percent of the

1570
01:09:09,279 --> 01:09:13,440
websites that support https

1571
01:09:13,520 --> 01:09:15,600
particularly only three certificate

1572
01:09:15,600 --> 01:09:16,799
authorities

1573
01:09:16,799 --> 01:09:19,520
digi cert let's encrypt and

1574
01:09:19,520 --> 01:09:23,040
so 60 of the https supporting websites

1575
01:09:23,040 --> 01:09:25,120
out of the total 59 certificate

1576
01:09:25,120 --> 01:09:28,399
authorities we observed

1577
01:09:29,920 --> 01:09:32,799
to summarize our main findings were that

1578
01:09:32,799 --> 01:09:35,040
third critical dependencies are highly

1579
01:09:35,040 --> 01:09:36,719
prevalent

1580
01:09:36,719 --> 01:09:38,640
and third-party services are very

1581
01:09:38,640 --> 01:09:41,359
concentrated

1582
01:09:41,359 --> 01:09:44,158
a direct implication of this is

1583
01:09:44,158 --> 01:09:47,520
that 89 of the websites are vulnerable

1584
01:09:47,520 --> 01:09:50,960
to dying like incidents

1585
01:09:51,600 --> 01:09:54,158
a single provider can affect as much as

1586
01:09:54,158 --> 01:09:58,799
25 percent of the top 100 000 websites

1587
01:09:59,360 --> 01:10:01,040
now the question is

1588
01:10:01,040 --> 01:10:03,199
if this is the complete picture or do we

1589
01:10:03,199 --> 01:10:05,280
need to take indirect dependencies into

1590
01:10:05,280 --> 01:10:08,239
account as well

1591
01:10:09,440 --> 01:10:10,960
and this brings us to our second

1592
01:10:10,960 --> 01:10:12,480
question which is

1593
01:10:12,480 --> 01:10:14,400
are there any indirect dependencies

1594
01:10:14,400 --> 01:10:16,480
between websites and their third party

1595
01:10:16,480 --> 01:10:18,560
providers

1596
01:10:18,560 --> 01:10:20,719
to do this we first need to analyze

1597
01:10:20,719 --> 01:10:23,600
inter-service dependencies between dns

1598
01:10:23,600 --> 01:10:27,440
cdn and ca providers

1599
01:10:28,560 --> 01:10:31,679
in case of ca to dns dependency we found

1600
01:10:31,679 --> 01:10:35,120
that out of the 59 cas that we observed

1601
01:10:35,120 --> 01:10:36,320
48

1602
01:10:36,320 --> 01:10:40,640
of them use a third-party dns provider

1603
01:10:40,640 --> 01:10:43,760
in case of ca to cdn dependency 36

1604
01:10:43,760 --> 01:10:47,440
percent used a third party cdn provider

1605
01:10:47,440 --> 01:10:50,159
moreover out of the 86 cdns that we

1606
01:10:50,159 --> 01:10:52,960
observed we found that 36 percent use a

1607
01:10:52,960 --> 01:10:56,400
third-party dns provider

1608
01:10:56,480 --> 01:10:58,239
hence third third-party dependencies are

1609
01:10:58,239 --> 01:11:02,480
also prevalent among service providers

1610
01:11:02,880 --> 01:11:04,800
in case of critical dependencies we

1611
01:11:04,800 --> 01:11:06,960
found that 31 percent of certified

1612
01:11:06,960 --> 01:11:08,640
authorities relied on a single

1613
01:11:08,640 --> 01:11:11,760
third-party dns provider

1614
01:11:11,760 --> 01:11:13,920
percent relied on a third-party cdn

1615
01:11:13,920 --> 01:11:15,520
provider

1616
01:11:15,520 --> 01:11:18,400
and 17 percent cdns relied on a single

1617
01:11:18,400 --> 01:11:21,920
third-party dns provider

1618
01:11:22,000 --> 01:11:23,840
these critical dependencies between

1619
01:11:23,840 --> 01:11:24,840
service

1620
01:11:24,840 --> 01:11:26,960
providers give rise to indirect

1621
01:11:26,960 --> 01:11:28,640
dependency

1622
01:11:28,640 --> 01:11:30,400
but why should we care about indirect

1623
01:11:30,400 --> 01:11:32,719
dependencies i mean okay sure they exist

1624
01:11:32,719 --> 01:11:34,080
but

1625
01:11:34,080 --> 01:11:36,800
what's the harm

1626
01:11:37,120 --> 01:11:39,199
turns out that as a result of indirect

1627
01:11:39,199 --> 01:11:42,080
dependencies we see huge amplification

1628
01:11:42,080 --> 01:11:44,320
in the impact of a given provider

1629
01:11:44,320 --> 01:11:46,640
for example in case of ca to dns

1630
01:11:46,640 --> 01:11:47,920
dependency

1631
01:11:47,920 --> 01:11:50,960
cloudflare now critically serves 37 of

1632
01:11:50,960 --> 01:11:53,440
the top 100 000 websites as compared to

1633
01:11:53,440 --> 01:11:54,400
24

1634
01:11:54,400 --> 01:11:56,799
before

1635
01:11:58,640 --> 01:12:02,000
and in case of dns made easy the

1636
01:12:02,000 --> 01:12:04,400
impact goes from one percent to 23

1637
01:12:04,400 --> 01:12:07,400
percent

1638
01:12:12,560 --> 01:12:14,880
hence because of these indirect

1639
01:12:14,880 --> 01:12:17,360
dependencies we see

1640
01:12:17,360 --> 01:12:21,440
amplification of provider concentration

1641
01:12:21,520 --> 01:12:24,320
to summarize critical dependencies are

1642
01:12:24,320 --> 01:12:28,080
also widespread among service providers

1643
01:12:28,080 --> 01:12:29,920
and these dependencies can amplify the

1644
01:12:29,920 --> 01:12:32,800
concentration of service providers

1645
01:12:32,800 --> 01:12:34,800
which means that the effect of single

1646
01:12:34,800 --> 01:12:36,480
points of failures in the internet is

1647
01:12:36,480 --> 01:12:38,560
amplified

1648
01:12:38,560 --> 01:12:41,120
and a single provider can now impact 37

1649
01:12:41,120 --> 01:12:45,120
percent of the top 100 000 websites

1650
01:12:47,840 --> 01:12:49,679
this is what we observed for data in

1651
01:12:49,679 --> 01:12:52,400
2020 now we see how the world changed

1652
01:12:52,400 --> 01:12:54,239
after the dyna incident by comparing

1653
01:12:54,239 --> 01:12:57,199
2016 dependency data with 2020 data

1654
01:12:57,199 --> 01:12:59,040
which brings us to our third question

1655
01:12:59,040 --> 01:13:01,600
which is how did the world change after

1656
01:13:01,600 --> 01:13:03,679
the time incident

1657
01:13:03,679 --> 01:13:06,239
did websites try to reduce their

1658
01:13:06,239 --> 01:13:07,920
third-party dependency on service

1659
01:13:07,920 --> 01:13:10,080
providers did the concentration among

1660
01:13:10,080 --> 01:13:13,040
providers decrease

1661
01:13:13,760 --> 01:13:16,000
we observed that critical dependency in

1662
01:13:16,000 --> 01:13:20,320
dns increased with respect to cdn and ca

1663
01:13:20,320 --> 01:13:22,159
we see no significant change in the

1664
01:13:22,159 --> 01:13:25,280
critical dependency

1665
01:13:28,159 --> 01:13:30,400
similarly in case of inter service

1666
01:13:30,400 --> 01:13:32,880
dependencies we observe an eight percent

1667
01:13:32,880 --> 01:13:35,679
decrease in critical dependency in ca to

1668
01:13:35,679 --> 01:13:38,239
dns dependency and a four percent

1669
01:13:38,239 --> 01:13:41,360
decrease in cdn to dns dependency so

1670
01:13:41,360 --> 01:13:43,520
overall in terms of

1671
01:13:43,520 --> 01:13:45,520
provider to dns dependency we see a

1672
01:13:45,520 --> 01:13:49,199
decreasing trend which is encouraging

1673
01:13:49,199 --> 01:13:50,719
now let us look at the change in

1674
01:13:50,719 --> 01:13:54,560
concentration of service providers

1675
01:13:55,040 --> 01:13:58,000
according to this figure in 2016

1676
01:13:58,000 --> 01:14:01,360
2700 dns providers served 80 of the

1677
01:14:01,360 --> 01:14:03,280
websites

1678
01:14:03,280 --> 01:14:07,679
while in 2020 only 54 providers serve 80

1679
01:14:07,679 --> 01:14:09,840
of the websites

1680
01:14:09,840 --> 01:14:11,920
this means that we are in general moving

1681
01:14:11,920 --> 01:14:14,880
towards more concentration

1682
01:14:14,880 --> 01:14:16,480
this is not an encouraging result

1683
01:14:16,480 --> 01:14:18,000
because it means that single points of

1684
01:14:18,000 --> 01:14:21,199
failure actually got bigger

1685
01:14:21,199 --> 01:14:23,040
and we see similar trends in ca

1686
01:14:23,040 --> 01:14:25,199
providers while concentration decreased

1687
01:14:25,199 --> 01:14:28,360
in syrians

1688
01:14:31,920 --> 01:14:33,760
to summarize we see no significant

1689
01:14:33,760 --> 01:14:35,520
change in the third-party dependency

1690
01:14:35,520 --> 01:14:37,920
trends among websites

1691
01:14:37,920 --> 01:14:40,080
we do observe a decline in third-party

1692
01:14:40,080 --> 01:14:43,840
dependency among service providers

1693
01:14:43,920 --> 01:14:45,920
we also observed that services became

1694
01:14:45,920 --> 01:14:48,320
more concentrated in 2020 as compared to

1695
01:14:48,320 --> 01:14:50,960
2016.

1696
01:14:50,960 --> 01:14:53,440
all in all we do not see an increasing

1697
01:14:53,440 --> 01:14:56,080
trend in redundancy

1698
01:14:56,080 --> 01:14:58,560
we did observe that websites using dyne

1699
01:14:58,560 --> 01:15:00,239
were more redundantly provisioned in

1700
01:15:00,239 --> 01:15:03,920
2020 as compared to 2016

1701
01:15:03,920 --> 01:15:07,280
but in general there was no

1702
01:15:07,280 --> 01:15:11,360
significant trend towards redundancy

1703
01:15:11,360 --> 01:15:12,880
and because the concentration of

1704
01:15:12,880 --> 01:15:15,440
providers increased in 2020 single

1705
01:15:15,440 --> 01:15:19,199
points of failure actually got bigger

1706
01:15:20,320 --> 01:15:22,239
now based on these findings we make some

1707
01:15:22,239 --> 01:15:25,239
recommendations

1708
01:15:28,080 --> 01:15:29,920
for websites they should consider

1709
01:15:29,920 --> 01:15:31,840
redundancy while using a third party

1710
01:15:31,840 --> 01:15:33,360
provider

1711
01:15:33,360 --> 01:15:35,120
moreover they should try to understand

1712
01:15:35,120 --> 01:15:37,120
their indirect dependency arising from

1713
01:15:37,120 --> 01:15:38,960
the inter-service dependencies of the

1714
01:15:38,960 --> 01:15:42,000
providers that they're using

1715
01:15:42,000 --> 01:15:43,920
similarly for service providers they

1716
01:15:43,920 --> 01:15:46,159
should make it easy for websites to to

1717
01:15:46,159 --> 01:15:49,120
be redundantly provisioned

1718
01:15:49,120 --> 01:15:51,199
as we observed that many dns providers

1719
01:15:51,199 --> 01:15:54,000
do not support redundancy

1720
01:15:54,000 --> 01:15:56,080
and also service providers should try

1721
01:15:56,080 --> 01:15:58,080
for redundancy in their inter-service

1722
01:15:58,080 --> 01:16:00,719
dependencies

1723
01:16:00,719 --> 01:16:02,560
finally service providers should also

1724
01:16:02,560 --> 01:16:04,640
try to be more transparent about attacks

1725
01:16:04,640 --> 01:16:07,840
on their infrastructure

1726
01:16:08,960 --> 01:16:10,880
to highlight some of the limitations of

1727
01:16:10,880 --> 01:16:13,120
our work

1728
01:16:13,120 --> 01:16:14,719
our measurements are from a single

1729
01:16:14,719 --> 01:16:16,960
vantage point only and hence we may miss

1730
01:16:16,960 --> 01:16:20,840
region specific dependencies

1731
01:16:21,040 --> 01:16:22,960
we analyze dependencies only on the

1732
01:16:22,960 --> 01:16:25,040
landing page of a website hence we may

1733
01:16:25,040 --> 01:16:26,159
miss

1734
01:16:26,159 --> 01:16:28,080
dependencies that manifest deeper in the

1735
01:16:28,080 --> 01:16:30,080
content hierarchy

1736
01:16:30,080 --> 01:16:31,840
a direct consequence of this could be

1737
01:16:31,840 --> 01:16:34,080
that we may miss certain cdns used for

1738
01:16:34,080 --> 01:16:35,360
our website

1739
01:16:35,360 --> 01:16:36,400
because

1740
01:16:36,400 --> 01:16:39,199
their landing page didn't access

1741
01:16:39,199 --> 01:16:42,159
any resource from a cdn

1742
01:16:42,159 --> 01:16:43,920
finally we also did not look at the

1743
01:16:43,920 --> 01:16:46,000
physical and networking infrastructure

1744
01:16:46,000 --> 01:16:48,239
dependencies such as routing and hosting

1745
01:16:48,239 --> 01:16:50,159
mainly because it's not the scope of

1746
01:16:50,159 --> 01:16:52,719
this work

1747
01:16:52,960 --> 01:16:54,560
to summarize

1748
01:16:54,560 --> 01:16:57,120
the ddos attack on dine in 2016 raised

1749
01:16:57,120 --> 01:16:58,800
some questions about the resilience of

1750
01:16:58,800 --> 01:17:00,560
the internet

1751
01:17:00,560 --> 01:17:02,800
in our paper we try to answer some of

1752
01:17:02,800 --> 01:17:04,320
these questions

1753
01:17:04,320 --> 01:17:06,000
particularly about the prevalence of

1754
01:17:06,000 --> 01:17:07,760
third-party dependencies and their

1755
01:17:07,760 --> 01:17:09,520
impact

1756
01:17:09,520 --> 01:17:11,760
to do so when li stop hundred thousand

1757
01:17:11,760 --> 01:17:14,239
popular websites we also look at their

1758
01:17:14,239 --> 01:17:15,840
inter-service dependencies to get a

1759
01:17:15,840 --> 01:17:17,679
holistic view

1760
01:17:17,679 --> 01:17:19,679
and we identify the potential single

1761
01:17:19,679 --> 01:17:22,159
points of failure in the internet

1762
01:17:22,159 --> 01:17:24,080
we see that third-party dependencies are

1763
01:17:24,080 --> 01:17:26,719
highly prevalent

1764
01:17:26,719 --> 01:17:29,440
indirect dependencies amplify provider

1765
01:17:29,440 --> 01:17:30,800
concentration

1766
01:17:30,800 --> 01:17:33,840
and we do not see

1767
01:17:33,840 --> 01:17:36,239
a move away from third-party dependency

1768
01:17:36,239 --> 01:17:39,120
after dyn incident

1769
01:17:39,120 --> 01:17:42,000
the code and data used in this paper is

1770
01:17:42,000 --> 01:17:44,320
extremely also available online thank

1771
01:17:44,320 --> 01:17:46,880
you so much

1772
01:17:51,760 --> 01:17:53,120
okay

1773
01:17:53,120 --> 01:17:54,400
thank you

1774
01:17:54,400 --> 01:17:56,640
axa for that really really interesting

1775
01:17:56,640 --> 01:18:00,800
talk um please do come on up

1776
01:18:00,800 --> 01:18:03,920
all right can you hear us

1777
01:18:06,080 --> 01:18:07,760
can you guys

1778
01:18:07,760 --> 01:18:10,800
yes we can yes we can

1779
01:18:10,800 --> 01:18:13,760
all right uh so yeah as i say thank you

1780
01:18:13,760 --> 01:18:15,600
for the really interesting talk uh we

1781
01:18:15,600 --> 01:18:17,679
had a a bunch of really good questions

1782
01:18:17,679 --> 01:18:21,040
in in the chat already uh and uh i see a

1783
01:18:21,040 --> 01:18:23,520
couple of people in in the queue uh

1784
01:18:23,520 --> 01:18:27,719
where's uh i guess your first

1785
01:18:28,400 --> 01:18:30,239
uh hi yeah thanks a lot for the work i

1786
01:18:30,239 --> 01:18:32,239
you know measuring

1787
01:18:32,239 --> 01:18:34,640
i'm not able to understand i think uh my

1788
01:18:34,640 --> 01:18:36,960
internet maybe is very bad

1789
01:18:36,960 --> 01:18:41,840
uh oh can you hear me or anyone

1790
01:18:41,920 --> 01:18:44,239
i'm sorry for this i'm not sure why this

1791
01:18:44,239 --> 01:18:45,840
will happen

1792
01:18:45,840 --> 01:18:48,000
i i can hear you

1793
01:18:48,000 --> 01:18:49,600
yeah it gets

1794
01:18:49,600 --> 01:18:51,040
her reception is

1795
01:18:51,040 --> 01:18:52,640
it's odd her transmission looks great

1796
01:18:52,640 --> 01:18:54,320
her is

1797
01:18:54,320 --> 01:18:56,960
great so

1798
01:19:04,640 --> 01:19:08,360
give her a minute i guess

1799
01:19:08,440 --> 01:19:11,500
[Music]

1800
01:19:11,840 --> 01:19:13,360
yeah yeah

1801
01:19:13,360 --> 01:19:15,520
you might have to take her questions

1802
01:19:15,520 --> 01:19:16,800
after the other presentation or

1803
01:19:16,800 --> 01:19:19,920
something i think i can hear now

1804
01:19:19,920 --> 01:19:20,960
oh good

1805
01:19:20,960 --> 01:19:23,280
okay can you hear me

1806
01:19:23,280 --> 01:19:25,360
okay great um so thanks a lot for the

1807
01:19:25,360 --> 01:19:28,239
work uh so it's you know uh any studies

1808
01:19:28,239 --> 01:19:29,840
we get on centralization and

1809
01:19:29,840 --> 01:19:32,000
dependencies is fantastic because it's

1810
01:19:32,000 --> 01:19:35,120
definitely a trend as you have uh proved

1811
01:19:35,120 --> 01:19:36,400
in your numbers

1812
01:19:36,400 --> 01:19:39,679
you made one statement that said uh so

1813
01:19:39,679 --> 01:19:42,320
in your recommendations you said that

1814
01:19:42,320 --> 01:19:44,880
you recommend that companies be more

1815
01:19:44,880 --> 01:19:46,159
transparent

1816
01:19:46,159 --> 01:19:47,120
um

1817
01:19:47,120 --> 01:19:49,520
can is there any data to back that up or

1818
01:19:49,520 --> 01:19:51,440
or why companies should be more

1819
01:19:51,440 --> 01:19:54,640
transparent that has been something that

1820
01:19:54,640 --> 01:19:57,760
people want but it's hard to prove that

1821
01:19:57,760 --> 01:19:59,520
that's actually a good thing for them to

1822
01:19:59,520 --> 01:20:00,480
do

1823
01:20:00,480 --> 01:20:01,360
um

1824
01:20:01,360 --> 01:20:04,480
so actually i have a multiple

1825
01:20:04,480 --> 01:20:06,239
sort of data points for this for

1826
01:20:06,239 --> 01:20:08,400
instance

1827
01:20:08,400 --> 01:20:10,560
currently let's say i'm doing research

1828
01:20:10,560 --> 01:20:12,960
in the redox area and

1829
01:20:12,960 --> 01:20:14,960
when i say that companies should be more

1830
01:20:14,960 --> 01:20:16,480
transparent what i mean is that they

1831
01:20:16,480 --> 01:20:18,239
should be transparent about what attacks

1832
01:20:18,239 --> 01:20:19,920
they're observing so that we can sort of

1833
01:20:19,920 --> 01:20:21,920
determine

1834
01:20:21,920 --> 01:20:24,080
the skill level of the attackers to some

1835
01:20:24,080 --> 01:20:25,120
extent

1836
01:20:25,120 --> 01:20:27,600
for instance here in this in this attack

1837
01:20:27,600 --> 01:20:30,000
that happened we don't really know uh

1838
01:20:30,000 --> 01:20:31,600
for for the dyna tag we don't really

1839
01:20:31,600 --> 01:20:34,239
know if the uh if the target of this

1840
01:20:34,239 --> 01:20:36,159
attack was particularly dying or if the

1841
01:20:36,159 --> 01:20:37,679
target of this attack was some other

1842
01:20:37,679 --> 01:20:39,440
website and all other websites were just

1843
01:20:39,440 --> 01:20:42,080
collateral damage

1844
01:20:42,080 --> 01:20:43,920
and these kind of questions can actually

1845
01:20:43,920 --> 01:20:45,520
help in making informed decisions

1846
01:20:45,520 --> 01:20:47,600
because if many websites just became

1847
01:20:47,600 --> 01:20:50,000
collateral damage then people might

1848
01:20:50,000 --> 01:20:51,760
might want to think about okay also

1849
01:20:51,760 --> 01:20:54,400
having a private provider rather than

1850
01:20:54,400 --> 01:20:57,840
just having third party providers and if

1851
01:20:57,840 --> 01:20:59,520
a particular provider was specifically

1852
01:20:59,520 --> 01:21:01,120
being attached then we can make an

1853
01:21:01,120 --> 01:21:02,960
argument that okay

1854
01:21:02,960 --> 01:21:04,320
maybe we should be redundantly

1855
01:21:04,320 --> 01:21:05,679
provisioned

1856
01:21:05,679 --> 01:21:06,560
and

1857
01:21:06,560 --> 01:21:08,639
not in just this attack but there are

1858
01:21:08,639 --> 01:21:10,960
many other attacks for example uh

1859
01:21:10,960 --> 01:21:13,120
currently i'm working on

1860
01:21:13,120 --> 01:21:15,199
building attackers who can do

1861
01:21:15,199 --> 01:21:17,199
reconnaissance on on different service

1862
01:21:17,199 --> 01:21:18,400
providers

1863
01:21:18,400 --> 01:21:20,638
and

1864
01:21:20,800 --> 01:21:22,639
these type of attacks have existed for

1865
01:21:22,639 --> 01:21:24,880
so long i i look at all these companies

1866
01:21:24,880 --> 01:21:27,679
akamai verizon and their redox reports

1867
01:21:27,679 --> 01:21:29,199
and i see that they talk about okay

1868
01:21:29,199 --> 01:21:31,679
these attacks have existed but we don't

1869
01:21:31,679 --> 01:21:33,679
really know we don't know how to detect

1870
01:21:33,679 --> 01:21:35,360
these type of attacks how the attackers

1871
01:21:35,360 --> 01:21:37,440
were actually doing this attack

1872
01:21:37,440 --> 01:21:40,639
and i think this is very important

1873
01:21:40,639 --> 01:21:41,440
for

1874
01:21:41,440 --> 01:21:42,639
for at least

1875
01:21:42,639 --> 01:21:45,920
research in in ddos attacks to know

1876
01:21:45,920 --> 01:21:47,120
that

1877
01:21:47,120 --> 01:21:48,800
what the capabilities of existing

1878
01:21:48,800 --> 01:21:51,600
attackers are

1879
01:21:55,280 --> 01:21:58,239
that makes sense thank you

1880
01:21:59,440 --> 01:22:02,400
okay thank you uh elliot so i guess

1881
01:22:02,400 --> 01:22:04,639
you're next

1882
01:22:04,639 --> 01:22:06,880
thank you again colin alexa this is a

1883
01:22:06,880 --> 01:22:10,639
great paper i echo uh what what uh wes

1884
01:22:10,639 --> 01:22:11,360
said

1885
01:22:11,360 --> 01:22:12,400
it's a

1886
01:22:12,400 --> 01:22:13,679
really helpful

1887
01:22:13,679 --> 01:22:16,239
and an area that is uh i think

1888
01:22:16,239 --> 01:22:18,480
uh really challenging you know given our

1889
01:22:18,480 --> 01:22:21,679
dependency on the internet today um

1890
01:22:21,679 --> 01:22:23,679
two points first um the numbers you

1891
01:22:23,679 --> 01:22:26,880
presented in terms of concentration uh

1892
01:22:26,880 --> 01:22:30,239
very much uh are consistent with the

1893
01:22:30,239 --> 01:22:32,960
numbers that anna maria mandalari

1894
01:22:32,960 --> 01:22:34,159
at the

1895
01:22:34,159 --> 01:22:35,760
imperial college

1896
01:22:35,760 --> 01:22:39,840
uh showed when she was looking at uh iot

1897
01:22:39,840 --> 01:22:41,600
cloud dependencies

1898
01:22:41,600 --> 01:22:44,320
um so uh you can look up her work if

1899
01:22:44,320 --> 01:22:46,320
you'd like i think she presented at the

1900
01:22:46,320 --> 01:22:47,520
at imc

1901
01:22:47,520 --> 01:22:50,840
as well at some point about this um

1902
01:22:50,840 --> 01:22:54,480
the uh second point was was just

1903
01:22:54,480 --> 01:22:56,480
uh that uh

1904
01:22:56,480 --> 01:22:58,560
there's an activity going on inside the

1905
01:22:58,560 --> 01:23:01,440
ietf which may benefit from hearing more

1906
01:23:01,440 --> 01:23:03,199
about your work

1907
01:23:03,199 --> 01:23:05,520
which is benoit clay's

1908
01:23:05,520 --> 01:23:07,920
presented something called sane please

1909
01:23:07,920 --> 01:23:09,679
don't ask me to expand the acronym i

1910
01:23:09,679 --> 01:23:12,080
couldn't possibly but it essentially is

1911
01:23:12,080 --> 01:23:14,800
a dependency it's a service architecture

1912
01:23:14,800 --> 01:23:16,719
it looks

1913
01:23:16,719 --> 01:23:18,960
it's based on a dependency graph

1914
01:23:18,960 --> 01:23:20,880
and um there's a lot of work actually

1915
01:23:20,880 --> 01:23:23,280
going on in the ops and m area that is

1916
01:23:23,280 --> 01:23:25,440
focusing on this very important area of

1917
01:23:25,440 --> 01:23:28,800
resiliency so again congratulations on a

1918
01:23:28,800 --> 01:23:31,040
great paper and

1919
01:23:31,040 --> 01:23:33,679
i look forward to seeing a lot more

1920
01:23:33,679 --> 01:23:34,880
interesting stuff from you and your

1921
01:23:34,880 --> 01:23:36,560
colleagues thank you

1922
01:23:36,560 --> 01:23:38,960
thank you

1923
01:23:39,760 --> 01:23:40,560
yeah

1924
01:23:40,560 --> 01:23:42,560
thank you elliot if you could put

1925
01:23:42,560 --> 01:23:44,560
pointer to ben my stuff in the chat that

1926
01:23:44,560 --> 01:23:47,880
might be helpful

1927
01:23:48,639 --> 01:23:51,199
all right uh other than that uh i

1928
01:23:51,199 --> 01:23:52,880
noticed we're running shots on time

1929
01:23:52,880 --> 01:23:55,040
we've had a a bunch of really really

1930
01:23:55,040 --> 01:23:57,199
interesting questions there uh please do

1931
01:23:57,199 --> 01:24:00,320
reta reach out to exo if you have more

1932
01:24:00,320 --> 01:24:03,440
more questions uh and so as as everyone

1933
01:24:03,440 --> 01:24:05,120
said this has been a really nice piece

1934
01:24:05,120 --> 01:24:07,440
of work

1935
01:24:07,920 --> 01:24:10,480
all right and with that uh we should

1936
01:24:10,480 --> 01:24:13,760
move on to the final talk today uh which

1937
01:24:13,760 --> 01:24:15,840
is by kevin bock

1938
01:24:15,840 --> 01:24:18,560
kevin is a phd candidate in the

1939
01:24:18,560 --> 01:24:20,080
department of computer science at the

1940
01:24:20,080 --> 01:24:22,800
university of maryland uh advised by

1941
01:24:22,800 --> 01:24:24,159
dave levin

1942
01:24:24,159 --> 01:24:27,600
and his work focuses on enabling open

1943
01:24:27,600 --> 01:24:30,000
communication improving network security

1944
01:24:30,000 --> 01:24:32,480
and evading censorship

1945
01:24:32,480 --> 01:24:34,159
and if we can have the final video

1946
01:24:34,159 --> 01:24:37,159
please

1947
01:24:46,880 --> 01:24:48,239
one

1948
01:24:48,239 --> 01:24:50,159
hey everyone my name is kevin bach from

1949
01:24:50,159 --> 01:24:51,920
the university of maryland before i get

1950
01:24:51,920 --> 01:24:53,600
started i wanted to give a huge shout

1951
01:24:53,600 --> 01:24:55,920
out to all the ietf organizers for

1952
01:24:55,920 --> 01:24:57,520
making this event possible doing all

1953
01:24:57,520 --> 01:24:59,760
this remote organization and i wanted to

1954
01:24:59,760 --> 01:25:00,880
give a big thank you to all the

1955
01:25:00,880 --> 01:25:02,719
collaborators on this project it's

1956
01:25:02,719 --> 01:25:04,960
really taken a village to get this going

1957
01:25:04,960 --> 01:25:06,080
now i'm going to be talking about

1958
01:25:06,080 --> 01:25:08,080
censorship today and specifically a new

1959
01:25:08,080 --> 01:25:09,760
form of censorship evasion we've been

1960
01:25:09,760 --> 01:25:10,800
working on

1961
01:25:10,800 --> 01:25:13,120
server side of asia before i get into

1962
01:25:13,120 --> 01:25:14,480
that though i wanted to give you all a

1963
01:25:14,480 --> 01:25:16,239
brief background of what nation state

1964
01:25:16,239 --> 01:25:17,920
censorship looks like nowadays to

1965
01:25:17,920 --> 01:25:19,280
motivate some of the approaches we've

1966
01:25:19,280 --> 01:25:21,040
taken

1967
01:25:21,040 --> 01:25:22,639
now there are many types of censorship

1968
01:25:22,639 --> 01:25:24,639
that operate around the world today and

1969
01:25:24,639 --> 01:25:25,600
today i'm going to be talking

1970
01:25:25,600 --> 01:25:27,600
specifically about the automated

1971
01:25:27,600 --> 01:25:29,840
in-network censorship that operates in

1972
01:25:29,840 --> 01:25:32,400
the network by nation-states now some

1973
01:25:32,400 --> 01:25:34,239
nation-states operate censorship as

1974
01:25:34,239 --> 01:25:36,400
in-path sensors like this one with the

1975
01:25:36,400 --> 01:25:37,920
sensor physically sitting inside the

1976
01:25:37,920 --> 01:25:39,360
network path

1977
01:25:39,360 --> 01:25:41,199
other sensors operate censorship like

1978
01:25:41,199 --> 01:25:43,360
this instead of being in the path

1979
01:25:43,360 --> 01:25:45,040
they're on the path so if the client

1980
01:25:45,040 --> 01:25:47,360
makes a forbidden request

1981
01:25:47,360 --> 01:25:48,719
you'd see this request moving to the

1982
01:25:48,719 --> 01:25:50,560
network now the server will get the

1983
01:25:50,560 --> 01:25:53,040
packet and the sensor will too

1984
01:25:53,040 --> 01:25:54,400
if the sensor wants to censor this

1985
01:25:54,400 --> 01:25:55,920
connection though it can't drop it

1986
01:25:55,920 --> 01:25:58,480
anymore it's no longer in the path

1987
01:25:58,480 --> 01:26:00,080
so instead it performs deep packet

1988
01:26:00,080 --> 01:26:01,679
inspection on this packet and if the

1989
01:26:01,679 --> 01:26:04,000
pack contains something it disallows

1990
01:26:04,000 --> 01:26:05,760
what it will do is it will inject its

1991
01:26:05,760 --> 01:26:08,080
own packets into the connection

1992
01:26:08,080 --> 01:26:10,639
specifically it will inject spoofed tcp

1993
01:26:10,639 --> 01:26:13,440
reset or tear down packets these are

1994
01:26:13,440 --> 01:26:14,880
normal packets are computers send all

1995
01:26:14,880 --> 01:26:16,480
the time these just exist to tell the

1996
01:26:16,480 --> 01:26:18,080
other side stop talking to me

1997
01:26:18,080 --> 01:26:19,440
immediately

1998
01:26:19,440 --> 01:26:20,800
it's going to send one of these packets

1999
01:26:20,800 --> 01:26:22,400
to the client pretending to be the

2000
01:26:22,400 --> 01:26:23,280
server

2001
01:26:23,280 --> 01:26:25,040
and one of these packets to the server

2002
01:26:25,040 --> 01:26:27,120
pretending to be the client

2003
01:26:27,120 --> 01:26:28,960
and when these packets arrive the client

2004
01:26:28,960 --> 01:26:30,159
thinks the server terminated the

2005
01:26:30,159 --> 01:26:32,159
connection and the server thinks the

2006
01:26:32,159 --> 01:26:34,080
client terminated the connection

2007
01:26:34,080 --> 01:26:35,520
immediately both of these sides stop

2008
01:26:35,520 --> 01:26:37,199
talking to each other and just like that

2009
01:26:37,199 --> 01:26:39,679
censorship has been achieved

2010
01:26:39,679 --> 01:26:41,520
now in order to pull off this attack of

2011
01:26:41,520 --> 01:26:43,360
injecting tear down packets the sensor

2012
01:26:43,360 --> 01:26:44,960
needs to have some information about the

2013
01:26:44,960 --> 01:26:46,800
connection it needs to know the port

2014
01:26:46,800 --> 01:26:48,159
numbers the sequence and acknowledgment

2015
01:26:48,159 --> 01:26:50,159
numbers what this means is that the

2016
01:26:50,159 --> 01:26:53,360
sensor requires per flow state

2017
01:26:53,360 --> 01:26:54,880
and that means that these sensors have

2018
01:26:54,880 --> 01:26:56,639
to be tracking the full state of every

2019
01:26:56,639 --> 01:26:58,719
tcp connection coming into and out of

2020
01:26:58,719 --> 01:26:59,760
their country

2021
01:26:59,760 --> 01:27:01,280
and if you're trying to track every

2022
01:27:01,280 --> 01:27:02,800
single connection into and out of a

2023
01:27:02,800 --> 01:27:04,480
country at a country the scale of

2024
01:27:04,480 --> 01:27:06,239
something like china you're going to

2025
01:27:06,239 --> 01:27:07,760
necessarily have to start taking some

2026
01:27:07,760 --> 01:27:09,199
shortcuts

2027
01:27:09,199 --> 01:27:11,040
and we as evaders can take advantage of

2028
01:27:11,040 --> 01:27:12,639
some of those shortcuts

2029
01:27:12,639 --> 01:27:14,239
so let me give you an example from prior

2030
01:27:14,239 --> 01:27:15,920
work of how researchers were able to

2031
01:27:15,920 --> 01:27:18,000
take advantage of these ideas to evade

2032
01:27:18,000 --> 01:27:20,080
censorship

2033
01:27:20,080 --> 01:27:22,000
now once again our client is about to

2034
01:27:22,000 --> 01:27:24,159
generate a forbidden request to this

2035
01:27:24,159 --> 01:27:26,080
resource but this time we're going to

2036
01:27:26,080 --> 01:27:29,199
inject a tcp reset packet of our own

2037
01:27:29,199 --> 01:27:30,560
we're going to set it in such a way that

2038
01:27:30,560 --> 01:27:33,280
the ttl or time to live

2039
01:27:33,280 --> 01:27:35,360
this is a field in these packets

2040
01:27:35,360 --> 01:27:36,560
that

2041
01:27:36,560 --> 01:27:37,920
tell the network how long it should

2042
01:27:37,920 --> 01:27:39,520
survive in the network and it decrements

2043
01:27:39,520 --> 01:27:41,040
once per hop

2044
01:27:41,040 --> 01:27:42,560
we're going to set the ttl high enough

2045
01:27:42,560 --> 01:27:44,480
such that we reach the sensor

2046
01:27:44,480 --> 01:27:46,560
but not so high that we reach the server

2047
01:27:46,560 --> 01:27:47,920
so watch what happens when we send this

2048
01:27:47,920 --> 01:27:49,760
packet

2049
01:27:49,760 --> 01:27:51,199
now just like before the sensor will get

2050
01:27:51,199 --> 01:27:52,960
a copy of the packet but the packet's

2051
01:27:52,960 --> 01:27:54,239
not going to reach the server it's going

2052
01:27:54,239 --> 01:27:56,000
to get dropped along the way

2053
01:27:56,000 --> 01:27:57,840
now the server never saw this packet but

2054
01:27:57,840 --> 01:28:00,400
the sensor has and the sensor says

2055
01:28:00,400 --> 01:28:01,679
well it looks like the client just

2056
01:28:01,679 --> 01:28:03,760
terminated this connection so i can stop

2057
01:28:03,760 --> 01:28:05,760
tracking the connection now and it

2058
01:28:05,760 --> 01:28:07,120
throws away the state it's been

2059
01:28:07,120 --> 01:28:09,760
maintaining about the connection

2060
01:28:09,760 --> 01:28:11,679
now for the rest of this flow the client

2061
01:28:11,679 --> 01:28:13,440
and server are free to communicate the

2062
01:28:13,440 --> 01:28:15,280
sensor has no state with which to censor

2063
01:28:15,280 --> 01:28:16,960
us and the server is no idea we pulled

2064
01:28:16,960 --> 01:28:18,400
off this trick

2065
01:28:18,400 --> 01:28:20,159
and this is just one example of these

2066
01:28:20,159 --> 01:28:21,679
strategies that have been developed and

2067
01:28:21,679 --> 01:28:23,920
discovered over the last 10 plus years

2068
01:28:23,920 --> 01:28:25,199
and the one thing they all have in

2069
01:28:25,199 --> 01:28:26,159
common

2070
01:28:26,159 --> 01:28:28,480
is that evasion has always involved the

2071
01:28:28,480 --> 01:28:29,679
client

2072
01:28:29,679 --> 01:28:31,920
and that statement is true even beyond

2073
01:28:31,920 --> 01:28:33,520
ways and mechanisms of evading

2074
01:28:33,520 --> 01:28:35,920
censorship that do not rely on

2075
01:28:35,920 --> 01:28:38,239
manipulating your packet stream consider

2076
01:28:38,239 --> 01:28:40,960
tor or vpns or proxies

2077
01:28:40,960 --> 01:28:43,520
all of these things require the client

2078
01:28:43,520 --> 01:28:45,840
to install some software on their system

2079
01:28:45,840 --> 01:28:47,520
or take some direct action to make them

2080
01:28:47,520 --> 01:28:48,719
happen

2081
01:28:48,719 --> 01:28:50,239
this has always posed a significant

2082
01:28:50,239 --> 01:28:52,159
barrier to deployment though

2083
01:28:52,159 --> 01:28:53,600
installing the software can pose

2084
01:28:53,600 --> 01:28:55,040
significant risk to the user in the

2085
01:28:55,040 --> 01:28:57,679
first place and beyond that it can help

2086
01:28:57,679 --> 01:28:58,960
users who either don't have the

2087
01:28:58,960 --> 01:29:00,960
technical know-how to set these tools up

2088
01:29:00,960 --> 01:29:03,040
aren't comfortable doing so or even

2089
01:29:03,040 --> 01:29:05,199
those users who don't even know they are

2090
01:29:05,199 --> 01:29:06,719
experiencing censorship in the first

2091
01:29:06,719 --> 01:29:08,800
place

2092
01:29:08,800 --> 01:29:10,560
now ideally

2093
01:29:10,560 --> 01:29:12,639
servers would be able to help

2094
01:29:12,639 --> 01:29:14,080
instead of deploying software at the

2095
01:29:14,080 --> 01:29:16,159
client instead

2096
01:29:16,159 --> 01:29:18,239
we would deploy it at the server

2097
01:29:18,239 --> 01:29:19,600
and if such a thing were possible then

2098
01:29:19,600 --> 01:29:21,520
the server could subvert censorship on

2099
01:29:21,520 --> 01:29:23,600
the user's behalf without clients

2100
01:29:23,600 --> 01:29:26,560
needing to deploy anything at all

2101
01:29:26,560 --> 01:29:27,840
and just think about the benefits of

2102
01:29:27,840 --> 01:29:30,080
this this would immediately broaden

2103
01:29:30,080 --> 01:29:32,719
reachability and accessibility for these

2104
01:29:32,719 --> 01:29:34,480
resources without clients needing to do

2105
01:29:34,480 --> 01:29:36,320
anything many clients connect to one

2106
01:29:36,320 --> 01:29:38,080
server clients no longer need any

2107
01:29:38,080 --> 01:29:40,000
technical expertise or to download

2108
01:29:40,000 --> 01:29:41,840
anything every client immediately gets

2109
01:29:41,840 --> 01:29:44,080
plausible deniability and it helps all

2110
01:29:44,080 --> 01:29:45,840
those users who don't have technical

2111
01:29:45,840 --> 01:29:47,199
expertise or don't know they're being

2112
01:29:47,199 --> 01:29:49,440
censored in the first place

2113
01:29:49,440 --> 01:29:51,199
so this sounds amazing

2114
01:29:51,199 --> 01:29:52,800
the problem is it shouldn't work and it

2115
01:29:52,800 --> 01:29:54,639
shouldn't be possible

2116
01:29:54,639 --> 01:29:56,800
and to see what this is let's consider

2117
01:29:56,800 --> 01:29:58,880
the waterfall diagram of packets that

2118
01:29:58,880 --> 01:30:00,800
are exchanged leading up to some

2119
01:30:00,800 --> 01:30:02,560
censored query

2120
01:30:02,560 --> 01:30:04,480
clients going to send a sin to which the

2121
01:30:04,480 --> 01:30:06,400
server responds with the synack

2122
01:30:06,400 --> 01:30:07,600
the client completes it through a

2123
01:30:07,600 --> 01:30:09,120
handshake and then the sensor keyword is

2124
01:30:09,120 --> 01:30:10,320
sent

2125
01:30:10,320 --> 01:30:11,679
from the server's perspective though

2126
01:30:11,679 --> 01:30:13,360
there's very little it can do before the

2127
01:30:13,360 --> 01:30:15,520
sensor keyword is sent in fact the

2128
01:30:15,520 --> 01:30:17,040
server can't influence this connection

2129
01:30:17,040 --> 01:30:19,120
past the synack at all

2130
01:30:19,120 --> 01:30:20,480
underscoring the difficulty in this

2131
01:30:20,480 --> 01:30:22,239
space there's been no prior work on

2132
01:30:22,239 --> 01:30:24,560
evading a sensor evading censorship from

2133
01:30:24,560 --> 01:30:27,040
the server

2134
01:30:27,040 --> 01:30:28,159
now i'm thrilled to tell you that

2135
01:30:28,159 --> 01:30:30,239
server-side evasion is indeed possible

2136
01:30:30,239 --> 01:30:31,840
and the rest of this talk i'm going to

2137
01:30:31,840 --> 01:30:33,120
talk about how we discovered these

2138
01:30:33,120 --> 01:30:35,520
server side techniques and our results

2139
01:30:35,520 --> 01:30:36,960
across multiple different countries and

2140
01:30:36,960 --> 01:30:38,800
protocols and then i'm going to talk

2141
01:30:38,800 --> 01:30:40,639
about the insights we glean from the

2142
01:30:40,639 --> 01:30:43,120
sensors in these experiments

2143
01:30:43,120 --> 01:30:45,520
before i jump in to discovering

2144
01:30:45,520 --> 01:30:47,360
server-side evasion techniques i wanted

2145
01:30:47,360 --> 01:30:48,719
to first give you a little bit of

2146
01:30:48,719 --> 01:30:51,040
background on the tool we used and

2147
01:30:51,040 --> 01:30:53,520
modified to discover these strategies

2148
01:30:53,520 --> 01:30:56,560
and and get some insight into this idea

2149
01:30:56,560 --> 01:30:58,560
this tool is geneva

2150
01:30:58,560 --> 01:31:00,800
geneva is an open source originally

2151
01:31:00,800 --> 01:31:03,360
client-side tool that my team built a

2152
01:31:03,360 --> 01:31:04,800
few years ago for automatically

2153
01:31:04,800 --> 01:31:06,239
discovering censorship of agent

2154
01:31:06,239 --> 01:31:08,239
strategies this was originally published

2155
01:31:08,239 --> 01:31:10,320
by my team in 2019

2156
01:31:10,320 --> 01:31:12,080
geneva runs strictly one side of the

2157
01:31:12,080 --> 01:31:13,679
connection we originally designed it for

2158
01:31:13,679 --> 01:31:15,040
the client side

2159
01:31:15,040 --> 01:31:16,560
and the way it works is it manipulates

2160
01:31:16,560 --> 01:31:19,280
packets as they enter and leave the

2161
01:31:19,280 --> 01:31:20,400
system

2162
01:31:20,400 --> 01:31:22,480
now geneva is a genetic algorithm so in

2163
01:31:22,480 --> 01:31:25,120
fact it learns how it should manipulate

2164
01:31:25,120 --> 01:31:27,599
packets

2165
01:31:27,840 --> 01:31:29,360
specifically the way it can manipulate

2166
01:31:29,360 --> 01:31:31,199
packets is it can do that with just four

2167
01:31:31,199 --> 01:31:33,440
actions that's duplicate you take one

2168
01:31:33,440 --> 01:31:35,040
packet of two packets

2169
01:31:35,040 --> 01:31:36,960
tamper you take a pack and you change it

2170
01:31:36,960 --> 01:31:38,239
in some way

2171
01:31:38,239 --> 01:31:41,280
fragment take a packet break it in half

2172
01:31:41,280 --> 01:31:42,960
or drop cause take a packet you drop it

2173
01:31:42,960 --> 01:31:44,560
on the floor

2174
01:31:44,560 --> 01:31:45,679
now i'll call out two things

2175
01:31:45,679 --> 01:31:47,040
specifically here

2176
01:31:47,040 --> 01:31:49,040
the first is that tamper is allowed to

2177
01:31:49,040 --> 01:31:52,719
alter or corrupt any tcp header fields

2178
01:31:52,719 --> 01:31:54,000
importantly we don't give it any

2179
01:31:54,000 --> 01:31:55,600
semantic understanding of what these

2180
01:31:55,600 --> 01:31:57,600
fields mean we give it syntax but not

2181
01:31:57,600 --> 01:32:00,000
semantics what this means is that it can

2182
01:32:00,000 --> 01:32:02,000
access the tcp flags fields it can

2183
01:32:02,000 --> 01:32:04,239
change the flags fields but it has no

2184
01:32:04,239 --> 01:32:06,080
knowledge that if i set the flags field

2185
01:32:06,080 --> 01:32:07,679
to sin that means the sort of a

2186
01:32:07,679 --> 01:32:08,719
connection

2187
01:32:08,719 --> 01:32:12,000
so syntax no semantics

2188
01:32:12,000 --> 01:32:13,440
also call that fragment here it does a

2189
01:32:13,440 --> 01:32:15,600
bit of double duty the ip layer does

2190
01:32:15,600 --> 01:32:18,080
fragmentation but but it can also do

2191
01:32:18,080 --> 01:32:21,040
segmentation of the tcp layer

2192
01:32:21,040 --> 01:32:22,159
now let me show you what it looks like

2193
01:32:22,159 --> 01:32:24,560
when geneva puts these actions together

2194
01:32:24,560 --> 01:32:26,320
because geneva actually composes these

2195
01:32:26,320 --> 01:32:27,920
things into trees

2196
01:32:27,920 --> 01:32:30,800
and these trees look something like this

2197
01:32:30,800 --> 01:32:32,960
at the top we have some sort of match or

2198
01:32:32,960 --> 01:32:34,560
trigger

2199
01:32:34,560 --> 01:32:36,639
okay and then associated with that match

2200
01:32:36,639 --> 01:32:38,159
we have an actions these are match

2201
01:32:38,159 --> 01:32:40,880
action pairs and a strategy is comprised

2202
01:32:40,880 --> 01:32:42,639
of some combination of these match

2203
01:32:42,639 --> 01:32:44,159
action pairs

2204
01:32:44,159 --> 01:32:46,159
so for this specific strategy the

2205
01:32:46,159 --> 01:32:48,800
trigger is outbound tcp packets where

2206
01:32:48,800 --> 01:32:51,280
the flags set to ack

2207
01:32:51,280 --> 01:32:52,320
okay

2208
01:32:52,320 --> 01:32:54,239
when that match happens when a packet

2209
01:32:54,239 --> 01:32:56,239
matches that trigger it gets pulled into

2210
01:32:56,239 --> 01:32:58,480
the tree and then the tree decides how

2211
01:32:58,480 --> 01:33:00,239
that packet should be modified

2212
01:33:00,239 --> 01:33:02,239
the duplicate action makes two copies

2213
01:33:02,239 --> 01:33:03,600
and you can see different things happen

2214
01:33:03,600 --> 01:33:05,440
to each copy

2215
01:33:05,440 --> 01:33:07,040
then we do an inorder traversal of the

2216
01:33:07,040 --> 01:33:08,800
leaves and we send the packets that

2217
01:33:08,800 --> 01:33:09,920
emerge

2218
01:33:09,920 --> 01:33:11,040
so let me show you what this looks like

2219
01:33:11,040 --> 01:33:13,280
on the wire

2220
01:33:13,280 --> 01:33:15,040
once again our client has just finished

2221
01:33:15,040 --> 01:33:16,560
the three handshake where they're about

2222
01:33:16,560 --> 01:33:18,080
to finish the three-way handshake and

2223
01:33:18,080 --> 01:33:19,760
they're about to make a request to this

2224
01:33:19,760 --> 01:33:22,400
forbidden resource

2225
01:33:22,400 --> 01:33:24,080
we're going to generate our ack packet

2226
01:33:24,080 --> 01:33:26,320
which matches the trigger geneva pulls

2227
01:33:26,320 --> 01:33:29,280
it into the tree duplicates the packet

2228
01:33:29,280 --> 01:33:31,199
the left child is done

2229
01:33:31,199 --> 01:33:32,960
the right child the flags are changed to

2230
01:33:32,960 --> 01:33:36,239
reset the ttl is changed to and then in

2231
01:33:36,239 --> 01:33:38,000
order to reverse the leaves and we send

2232
01:33:38,000 --> 01:33:39,360
the packets

2233
01:33:39,360 --> 01:33:41,440
and if you'll notice this tree exactly

2234
01:33:41,440 --> 01:33:43,360
implements the censorship evasion

2235
01:33:43,360 --> 01:33:44,800
strategy that i opened this talk with

2236
01:33:44,800 --> 01:33:47,840
this is the ttl limited reset

2237
01:33:47,840 --> 01:33:49,520
now for this work specifically we

2238
01:33:49,520 --> 01:33:51,600
modified geneva so that it could run on

2239
01:33:51,600 --> 01:33:53,440
the server side so we deployed it

2240
01:33:53,440 --> 01:33:55,280
against real world sensors

2241
01:33:55,280 --> 01:33:56,880
in our previous work and a lot of other

2242
01:33:56,880 --> 01:33:58,480
previous work in the space we've tended

2243
01:33:58,480 --> 01:34:00,639
to focus on http

2244
01:34:00,639 --> 01:34:02,000
in this work we've brought in the

2245
01:34:02,000 --> 01:34:03,280
protocols that we try and subvert

2246
01:34:03,280 --> 01:34:04,560
censorship for

2247
01:34:04,560 --> 01:34:08,719
so specifically we look for http https

2248
01:34:08,719 --> 01:34:09,920
dns

2249
01:34:09,920 --> 01:34:13,440
ftp and also smtp censorship

2250
01:34:13,440 --> 01:34:14,800
now triggering censorship for these

2251
01:34:14,800 --> 01:34:16,719
protocols largely involves making

2252
01:34:16,719 --> 01:34:19,040
requests or queries with forbidden

2253
01:34:19,040 --> 01:34:20,960
keywords and domains

2254
01:34:20,960 --> 01:34:23,199
smtp is a bit of a special case

2255
01:34:23,199 --> 01:34:25,520
for smtp you can just send an email to

2256
01:34:25,520 --> 01:34:27,199
this email address

2257
01:34:27,199 --> 01:34:28,880
this is centered in china and for

2258
01:34:28,880 --> 01:34:31,199
context this email address is an old

2259
01:34:31,199 --> 01:34:33,120
mechanism by which how bridge nodes used

2260
01:34:33,120 --> 01:34:35,760
to be distributed in china so the email

2261
01:34:35,760 --> 01:34:37,679
is censored

2262
01:34:37,679 --> 01:34:39,120
to show how this could be applied

2263
01:34:39,120 --> 01:34:41,360
broadly in addition to the diversity of

2264
01:34:41,360 --> 01:34:43,119
protocols we also tested against a

2265
01:34:43,119 --> 01:34:45,520
diversity of sensors in both how these

2266
01:34:45,520 --> 01:34:47,119
sensors operate and where they're

2267
01:34:47,119 --> 01:34:48,159
located

2268
01:34:48,159 --> 01:34:51,440
so we tested in china iran kazakhstan

2269
01:34:51,440 --> 01:34:53,280
and india across all of these different

2270
01:34:53,280 --> 01:34:54,639
protocols

2271
01:34:54,639 --> 01:34:55,840
now i do want to note there's a small

2272
01:34:55,840 --> 01:34:58,080
asterisk on the slide this refers to

2273
01:34:58,080 --> 01:35:01,440
that although iran sensors dns over udp

2274
01:35:01,440 --> 01:35:03,920
at the time of our testing dns over tcp

2275
01:35:03,920 --> 01:35:05,360
was not censored from any of our vantage

2276
01:35:05,360 --> 01:35:07,679
points

2277
01:35:08,480 --> 01:35:10,239
now recall that server side evasion

2278
01:35:10,239 --> 01:35:11,920
shouldn't be possible in any of these

2279
01:35:11,920 --> 01:35:13,600
cases because the server can't really

2280
01:35:13,600 --> 01:35:16,000
influence the connection past the syntax

2281
01:35:16,000 --> 01:35:17,840
but geneva was able to find ways to do

2282
01:35:17,840 --> 01:35:18,880
it and i would love to show you what

2283
01:35:18,880 --> 01:35:21,360
some of those things look like

2284
01:35:21,360 --> 01:35:23,920
so this is one successful server-side

2285
01:35:23,920 --> 01:35:26,719
evasion strategy that works in china

2286
01:35:26,719 --> 01:35:28,239
now there's a lot going on here so let

2287
01:35:28,239 --> 01:35:29,840
me break this down

2288
01:35:29,840 --> 01:35:32,080
the client starts off just like normal

2289
01:35:32,080 --> 01:35:34,719
by sending a send packet okay

2290
01:35:34,719 --> 01:35:36,320
now instead of the server responding

2291
01:35:36,320 --> 01:35:38,080
with the synack doesn't respond with the

2292
01:35:38,080 --> 01:35:40,320
cynic anymore instead it responds with

2293
01:35:40,320 --> 01:35:42,400
two syn packets

2294
01:35:42,400 --> 01:35:44,400
the first is a normal syn packet

2295
01:35:44,400 --> 01:35:46,320
the second is the sim packet containing

2296
01:35:46,320 --> 01:35:48,080
a payload

2297
01:35:48,080 --> 01:35:50,320
now this amazingly is legal

2298
01:35:50,320 --> 01:35:52,239
the first syn packet serves to trigger a

2299
01:35:52,239 --> 01:35:54,320
tcp simultaneous open

2300
01:35:54,320 --> 01:35:56,480
this is an archaic feature of tcp that's

2301
01:35:56,480 --> 01:35:58,480
still supported by every major platform

2302
01:35:58,480 --> 01:35:59,760
and this was originally written to

2303
01:35:59,760 --> 01:36:01,760
handle the case of what happens if two

2304
01:36:01,760 --> 01:36:03,280
computers send a syn packet to each

2305
01:36:03,280 --> 01:36:06,000
other at the exact same time

2306
01:36:06,000 --> 01:36:07,840
now when the client receives the send

2307
01:36:07,840 --> 01:36:08,800
packet

2308
01:36:08,800 --> 01:36:11,280
the client now sends a synap

2309
01:36:11,280 --> 01:36:13,040
and it's actually this combination of

2310
01:36:13,040 --> 01:36:15,440
the client sending a send back

2311
01:36:15,440 --> 01:36:17,440
the client sending a synack

2312
01:36:17,440 --> 01:36:19,760
immediately preceded by a syn packet

2313
01:36:19,760 --> 01:36:22,000
containing a payload that causes the

2314
01:36:22,000 --> 01:36:23,600
great firewall of china to be

2315
01:36:23,600 --> 01:36:25,760
synchronized from the connection

2316
01:36:25,760 --> 01:36:28,239
and for the rest of this flow the client

2317
01:36:28,239 --> 01:36:29,760
and server can now communicate

2318
01:36:29,760 --> 01:36:31,679
censorship free

2319
01:36:31,679 --> 01:36:33,600
now this seems crazy but this actually

2320
01:36:33,600 --> 01:36:35,760
works with varying degrees of success

2321
01:36:35,760 --> 01:36:38,159
across all the protocols we tested and

2322
01:36:38,159 --> 01:36:40,159
for context the baseline success rate if

2323
01:36:40,159 --> 01:36:41,920
you do nothing at all for evading

2324
01:36:41,920 --> 01:36:45,119
censorship is about two percent

2325
01:36:45,119 --> 01:36:47,119
now this is one successful strategy but

2326
01:36:47,119 --> 01:36:49,520
it's actually just one of many

2327
01:36:49,520 --> 01:36:50,960
altogether we found 11 different

2328
01:36:50,960 --> 01:36:53,280
strategies at the time we did this work

2329
01:36:53,280 --> 01:36:55,040
we discovered eight in china

2330
01:36:55,040 --> 01:36:57,119
one in iran and india and another three

2331
01:36:57,119 --> 01:36:58,639
in kazakhstan

2332
01:36:58,639 --> 01:37:00,239
now our paper goes into detail across

2333
01:37:00,239 --> 01:37:02,080
all of these and unfortunately as much

2334
01:37:02,080 --> 01:37:03,840
as i would love to i don't have time to

2335
01:37:03,840 --> 01:37:05,600
go through them all now but i would love

2336
01:37:05,600 --> 01:37:08,159
to show you just one or two more

2337
01:37:08,159 --> 01:37:09,520
the next one i want to talk about takes

2338
01:37:09,520 --> 01:37:12,560
place in kazakhstan

2339
01:37:12,639 --> 01:37:15,360
this is the null tcp flags server side

2340
01:37:15,360 --> 01:37:16,800
of asian strategy

2341
01:37:16,800 --> 01:37:18,080
you'll notice it starts off just like

2342
01:37:18,080 --> 01:37:20,480
all of them do the client sends us in

2343
01:37:20,480 --> 01:37:21,920
but the server instead of responding

2344
01:37:21,920 --> 01:37:23,440
with the synax instead of what it

2345
01:37:23,440 --> 01:37:25,760
responds with is a packet with no flags

2346
01:37:25,760 --> 01:37:27,040
at all

2347
01:37:27,040 --> 01:37:28,320
now the client when it sees a packet

2348
01:37:28,320 --> 01:37:30,000
with no flags it has no idea what to do

2349
01:37:30,000 --> 01:37:32,080
with it so it just drops it ignores it

2350
01:37:32,080 --> 01:37:34,560
but when the sensor sees

2351
01:37:34,560 --> 01:37:37,280
a packet with no tcp flag set at all the

2352
01:37:37,280 --> 01:37:38,880
sensor can't handle it and assumes

2353
01:37:38,880 --> 01:37:39,840
there's something wrong with the

2354
01:37:39,840 --> 01:37:41,679
connection and immediately stops

2355
01:37:41,679 --> 01:37:44,480
tracking the connection

2356
01:37:44,480 --> 01:37:46,719
and just like that the server has helped

2357
01:37:46,719 --> 01:37:48,880
uncensored the client

2358
01:37:48,880 --> 01:37:50,239
now one of the big takeaways from this

2359
01:37:50,239 --> 01:37:51,679
is that it really has helped motivate

2360
01:37:51,679 --> 01:37:53,199
why we should be using automated

2361
01:37:53,199 --> 01:37:55,119
techniques to discover this this is

2362
01:37:55,119 --> 01:37:56,880
likely a bug in this sensor that it may

2363
01:37:56,880 --> 01:37:58,000
have been difficult for a human to

2364
01:37:58,000 --> 01:37:59,440
discover

2365
01:37:59,440 --> 01:38:00,960
now here's another example i wanted to

2366
01:38:00,960 --> 01:38:03,600
show you also in kazakhstan

2367
01:38:03,600 --> 01:38:04,960
now in this one

2368
01:38:04,960 --> 01:38:06,400
during the during the three-way

2369
01:38:06,400 --> 01:38:08,639
handshake instead of the server sending

2370
01:38:08,639 --> 01:38:11,920
one synac it actually sends two synax

2371
01:38:11,920 --> 01:38:14,719
and it includes payloads on those synax

2372
01:38:14,719 --> 01:38:16,480
specifically the payloads it includes

2373
01:38:16,480 --> 01:38:19,119
are two uncensored get requests get

2374
01:38:19,119 --> 01:38:21,440
requests for something like example.com

2375
01:38:21,440 --> 01:38:23,360
or something innocuous

2376
01:38:23,360 --> 01:38:24,880
and of course the client is just going

2377
01:38:24,880 --> 01:38:26,480
to ignore these payloads

2378
01:38:26,480 --> 01:38:28,159
but when the sensor sees these

2379
01:38:28,159 --> 01:38:30,880
well-formed http get requests on these

2380
01:38:30,880 --> 01:38:32,000
synax

2381
01:38:32,000 --> 01:38:33,840
the sensor confuses the connection

2382
01:38:33,840 --> 01:38:35,119
direction

2383
01:38:35,119 --> 01:38:37,280
it says whoa the server is sending this

2384
01:38:37,280 --> 01:38:39,679
data i must have had this mixed up the

2385
01:38:39,679 --> 01:38:42,159
server must actually be the client

2386
01:38:42,159 --> 01:38:44,159
and it reverses the roles of client and

2387
01:38:44,159 --> 01:38:46,800
server in the mind of the sensor

2388
01:38:46,800 --> 01:38:48,880
as a consequence of this because it

2389
01:38:48,880 --> 01:38:50,480
treats packets differently from the

2390
01:38:50,480 --> 01:38:52,400
client server when they begin

2391
01:38:52,400 --> 01:38:54,320
communicating again and when the client

2392
01:38:54,320 --> 01:38:56,639
issues the real censored query they can

2393
01:38:56,639 --> 01:38:58,400
now communicate scout free

2394
01:38:58,400 --> 01:39:00,080
because the sensor is no longer

2395
01:39:00,080 --> 01:39:01,440
examining the packets from the client

2396
01:39:01,440 --> 01:39:03,119
the way they should be

2397
01:39:03,119 --> 01:39:04,880
and this works with 100 success rate in

2398
01:39:04,880 --> 01:39:07,520
kazakhstan

2399
01:39:08,239 --> 01:39:09,600
now at this point we've seen a lot of

2400
01:39:09,600 --> 01:39:11,760
different types of bugs and sensors not

2401
01:39:11,760 --> 01:39:13,600
handling esoteric features in pcp

2402
01:39:13,600 --> 01:39:15,600
correctly correctly

2403
01:39:15,600 --> 01:39:18,000
error cases or just confusing the logic

2404
01:39:18,000 --> 01:39:20,000
altogether for more details for any of

2405
01:39:20,000 --> 01:39:22,159
these i'll refer you to the paper but

2406
01:39:22,159 --> 01:39:24,400
you will note that all of these

2407
01:39:24,400 --> 01:39:26,320
do not require any client behavior

2408
01:39:26,320 --> 01:39:28,800
whatsoever they may induce some behavior

2409
01:39:28,800 --> 01:39:31,280
from the client but no software changes

2410
01:39:31,280 --> 01:39:32,400
as needed

2411
01:39:32,400 --> 01:39:34,320
and we tested this across a wide range

2412
01:39:34,320 --> 01:39:36,639
of diverse clients and in fact we found

2413
01:39:36,639 --> 01:39:39,280
only one case of a strategy that relied

2414
01:39:39,280 --> 01:39:41,280
on platform independent behavior we were

2415
01:39:41,280 --> 01:39:43,119
able to very quickly write that strategy

2416
01:39:43,119 --> 01:39:45,199
to make it platform agnostic

2417
01:39:45,199 --> 01:39:46,800
and all of these really teach us more

2418
01:39:46,800 --> 01:39:49,760
about how sensors work

2419
01:39:51,119 --> 01:39:53,040
next i'd like to talk a little bit more

2420
01:39:53,040 --> 01:39:54,880
about the insights this work has helped

2421
01:39:54,880 --> 01:39:57,360
provide us with

2422
01:39:57,360 --> 01:39:58,480
so the first thing i'm going to talk

2423
01:39:58,480 --> 01:39:59,679
about is something called the

2424
01:39:59,679 --> 01:40:01,600
resynchronization state

2425
01:40:01,600 --> 01:40:02,960
this is a feature of the great firewall

2426
01:40:02,960 --> 01:40:04,639
of china that allows it to be more

2427
01:40:04,639 --> 01:40:06,719
tolerant to packet loss

2428
01:40:06,719 --> 01:40:08,800
so specifically the way this works is

2429
01:40:08,800 --> 01:40:11,119
let's say the sensor misses a packet

2430
01:40:11,119 --> 01:40:12,560
the idea is simple it can just

2431
01:40:12,560 --> 01:40:14,719
re-synchronize its state on a later

2432
01:40:14,719 --> 01:40:16,800
packet in the connection

2433
01:40:16,800 --> 01:40:18,239
now the exact dynamics of the

2434
01:40:18,239 --> 01:40:20,480
resynchronization state are constantly

2435
01:40:20,480 --> 01:40:22,719
evolving over time and understanding how

2436
01:40:22,719 --> 01:40:24,800
the resynchronization state operates

2437
01:40:24,800 --> 01:40:26,400
allows us to build better censorship

2438
01:40:26,400 --> 01:40:28,000
evasion tools

2439
01:40:28,000 --> 01:40:29,600
so looking at the resynchronization

2440
01:40:29,600 --> 01:40:32,239
state gives us some more insight as to

2441
01:40:32,239 --> 01:40:33,920
why that first strategy i showed you

2442
01:40:33,920 --> 01:40:36,239
actually works

2443
01:40:36,239 --> 01:40:38,560
so once again here's that strategy now

2444
01:40:38,560 --> 01:40:39,679
i'm going to focus right now on the

2445
01:40:39,679 --> 01:40:41,119
second syn packet we sent from the

2446
01:40:41,119 --> 01:40:43,440
server if you recall we sent this send

2447
01:40:43,440 --> 01:40:45,760
packet again we sent it from the server

2448
01:40:45,760 --> 01:40:47,199
we sent the sim packet including a

2449
01:40:47,199 --> 01:40:49,199
random payload

2450
01:40:49,199 --> 01:40:50,960
we notice here is that this payload

2451
01:40:50,960 --> 01:40:52,560
actually triggers the great firewalls

2452
01:40:52,560 --> 01:40:54,800
resynchronization state it tells the

2453
01:40:54,800 --> 01:40:56,159
great firewall hey you may have missed

2454
01:40:56,159 --> 01:40:58,320
something go re-synchronize on the next

2455
01:40:58,320 --> 01:40:59,760
packet

2456
01:40:59,760 --> 01:41:02,239
the next packet it re-synchronizes on

2457
01:41:02,239 --> 01:41:05,119
is the synack packet from the client

2458
01:41:05,119 --> 01:41:06,719
but because we force the tcp

2459
01:41:06,719 --> 01:41:08,239
simultaneous open

2460
01:41:08,239 --> 01:41:10,800
when you do a tcp simultaneous open the

2461
01:41:10,800 --> 01:41:12,639
mechanism by which sequence numbers are

2462
01:41:12,639 --> 01:41:13,840
incremented during the three-way

2463
01:41:13,840 --> 01:41:15,520
handshake changes

2464
01:41:15,520 --> 01:41:17,600
and the great firewall is not properly

2465
01:41:17,600 --> 01:41:20,800
incrementing its initial sequence number

2466
01:41:20,800 --> 01:41:22,880
while it's resynchronizing

2467
01:41:22,880 --> 01:41:24,639
what this effectively means is that this

2468
01:41:24,639 --> 01:41:26,400
is an off by one bug in the great

2469
01:41:26,400 --> 01:41:28,719
firewall of china the sensor is not

2470
01:41:28,719 --> 01:41:31,119
properly incrementing its isn

2471
01:41:31,119 --> 01:41:32,639
making it desynchronized from the rest

2472
01:41:32,639 --> 01:41:33,600
of the connection because of the

2473
01:41:33,600 --> 01:41:36,000
presence of this payload

2474
01:41:36,000 --> 01:41:38,480
now strangely the success rate of this

2475
01:41:38,480 --> 01:41:40,719
varies greatly by protocol

2476
01:41:40,719 --> 01:41:42,480
and in fact we found that the great

2477
01:41:42,480 --> 01:41:44,000
firewall itself has a different

2478
01:41:44,000 --> 01:41:46,320
resynchronization state depending on the

2479
01:41:46,320 --> 01:41:49,760
protocol itself which is strange

2480
01:41:49,760 --> 01:41:51,199
this is just the first example of

2481
01:41:51,199 --> 01:41:52,880
protocol variability we found in the

2482
01:41:52,880 --> 01:41:54,080
great firewall and i'm going to talk

2483
01:41:54,080 --> 01:41:57,199
about that a little bit more next

2484
01:41:58,080 --> 01:42:00,320
now all of our server-side strategies

2485
01:42:00,320 --> 01:42:02,159
operate strictly during the three-way

2486
01:42:02,159 --> 01:42:04,560
handshake okay which means they happen

2487
01:42:04,560 --> 01:42:06,960
before there's any application layer

2488
01:42:06,960 --> 01:42:09,840
specific data going on

2489
01:42:09,840 --> 01:42:11,040
we realized though when we started

2490
01:42:11,040 --> 01:42:12,880
looking at the success rates of these

2491
01:42:12,880 --> 01:42:15,440
strategies is that they didn't always

2492
01:42:15,440 --> 01:42:17,119
work the same way with the same degree

2493
01:42:17,119 --> 01:42:18,800
of success

2494
01:42:18,800 --> 01:42:21,280
this led us to raise the question

2495
01:42:21,280 --> 01:42:23,679
why are different applications affected

2496
01:42:23,679 --> 01:42:25,280
differently in china

2497
01:42:25,280 --> 01:42:27,679
if the only actions the server takes are

2498
01:42:27,679 --> 01:42:28,400
done

2499
01:42:28,400 --> 01:42:30,159
before there is any application layer

2500
01:42:30,159 --> 01:42:32,400
data exchanged

2501
01:42:32,400 --> 01:42:34,320
what this has led us to what it led us

2502
01:42:34,320 --> 01:42:36,320
to think about is a new model of how the

2503
01:42:36,320 --> 01:42:38,320
great firewall of china works

2504
01:42:38,320 --> 01:42:39,679
because in the past we've kind of

2505
01:42:39,679 --> 01:42:41,679
tacitly assumed that the great firewall

2506
01:42:41,679 --> 01:42:43,920
works with this kind of very same

2507
01:42:43,920 --> 01:42:46,719
network model where it seemly separates

2508
01:42:46,719 --> 01:42:48,239
uh application layer from transport

2509
01:42:48,239 --> 01:42:49,760
layer protocols it looks something like

2510
01:42:49,760 --> 01:42:51,040
this

2511
01:42:51,040 --> 01:42:52,320
but what's going on here is that we're

2512
01:42:52,320 --> 01:42:54,960
finding different tcp layer bugs for

2513
01:42:54,960 --> 01:42:56,400
each protocol

2514
01:42:56,400 --> 01:42:57,600
which means that each protocol

2515
01:42:57,600 --> 01:43:01,760
censorship must have its own tcpip stack

2516
01:43:01,760 --> 01:43:03,040
and this strongly suggests that the

2517
01:43:03,040 --> 01:43:04,639
great firewall is actually running

2518
01:43:04,639 --> 01:43:06,480
multiple sensory middle boxes in

2519
01:43:06,480 --> 01:43:08,159
parallel it's not just one set of

2520
01:43:08,159 --> 01:43:11,159
machines

2521
01:43:12,000 --> 01:43:13,840
so let's see what this looks like

2522
01:43:13,840 --> 01:43:16,480
instead of just one monolithic sensor

2523
01:43:16,480 --> 01:43:17,920
instead we think there are multiple

2524
01:43:17,920 --> 01:43:19,520
sensory middle boxes and each of these

2525
01:43:19,520 --> 01:43:21,119
are running in parallel

2526
01:43:21,119 --> 01:43:23,280
now this begs the question

2527
01:43:23,280 --> 01:43:25,440
how does the great firewall know which

2528
01:43:25,440 --> 01:43:28,719
middle box to apply to a connection

2529
01:43:28,719 --> 01:43:30,000
now you may look at this be like well

2530
01:43:30,000 --> 01:43:31,280
it's obvious it's just got to be using

2531
01:43:31,280 --> 01:43:32,560
the port number

2532
01:43:32,560 --> 01:43:34,159
but it's actually not relying on port

2533
01:43:34,159 --> 01:43:35,920
number the great firewall all these

2534
01:43:35,920 --> 01:43:38,480
protocols can sensor effectively on any

2535
01:43:38,480 --> 01:43:40,719
port if you try and make an http request

2536
01:43:40,719 --> 01:43:43,440
for some forbidden content on 80 or 8000

2537
01:43:43,440 --> 01:43:45,520
or a random port it will still censor

2538
01:43:45,520 --> 01:43:47,600
you the same so it's not using port

2539
01:43:47,600 --> 01:43:49,600
number

2540
01:43:49,600 --> 01:43:51,760
we think is going on is that how does it

2541
01:43:51,760 --> 01:43:53,920
know which middle box to apply we think

2542
01:43:53,920 --> 01:43:55,040
it doesn't

2543
01:43:55,040 --> 01:43:56,880
we think that every single little box

2544
01:43:56,880 --> 01:43:58,480
gets a copy of every packet

2545
01:43:58,480 --> 01:43:59,920
independently

2546
01:43:59,920 --> 01:44:01,840
and then every middle box applies

2547
01:44:01,840 --> 01:44:04,560
protocol fingerprinting

2548
01:44:04,560 --> 01:44:06,560
every middle box checks hey is this

2549
01:44:06,560 --> 01:44:08,400
something i can censor is this belong to

2550
01:44:08,400 --> 01:44:10,000
me does this belong to me

2551
01:44:10,000 --> 01:44:11,520
and then if it discovers hey this is

2552
01:44:11,520 --> 01:44:12,719
something i should be taking action

2553
01:44:12,719 --> 01:44:13,679
against

2554
01:44:13,679 --> 01:44:15,520
then that specific middle box will take

2555
01:44:15,520 --> 01:44:17,040
action

2556
01:44:17,040 --> 01:44:18,400
this raises the question where are these

2557
01:44:18,400 --> 01:44:21,280
guys located nearby are they far away

2558
01:44:21,280 --> 01:44:23,679
so we did was we used ttl limited probes

2559
01:44:23,679 --> 01:44:25,520
we sent forbidden queries with different

2560
01:44:25,520 --> 01:44:27,199
for different protocols with different

2561
01:44:27,199 --> 01:44:29,440
ttl limits and we tried to see are these

2562
01:44:29,440 --> 01:44:31,119
located in the same spot in the network

2563
01:44:31,119 --> 01:44:33,360
or they located far away

2564
01:44:33,360 --> 01:44:34,960
we find is that largely they're

2565
01:44:34,960 --> 01:44:36,639
co-located at the network level they

2566
01:44:36,639 --> 01:44:38,080
don't seem to be located at different

2567
01:44:38,080 --> 01:44:40,559
locations

2568
01:44:40,880 --> 01:44:42,800
now next i want to shift gears a little

2569
01:44:42,800 --> 01:44:44,480
bit and i want to talk about where we've

2570
01:44:44,480 --> 01:44:46,840
taken these ideas since we wrote this

2571
01:44:46,840 --> 01:44:49,199
paper now the first thing i want to talk

2572
01:44:49,199 --> 01:44:51,360
about is how this idea of service

2573
01:44:51,360 --> 01:44:52,560
activation

2574
01:44:52,560 --> 01:44:54,719
and this idea of an automated approach

2575
01:44:54,719 --> 01:44:56,639
to service activation has allowed us to

2576
01:44:56,639 --> 01:44:58,560
be highly responsive to new forms of

2577
01:44:58,560 --> 01:45:00,880
censorship

2578
01:45:00,880 --> 01:45:03,840
back in february of 2020 iran launched a

2579
01:45:03,840 --> 01:45:05,840
new form of censorship called a protocol

2580
01:45:05,840 --> 01:45:06,960
filter

2581
01:45:06,960 --> 01:45:09,040
the way this works was that it monitored

2582
01:45:09,040 --> 01:45:10,400
all protocols

2583
01:45:10,400 --> 01:45:11,679
entering and exiting the country on

2584
01:45:11,679 --> 01:45:13,199
certain ports

2585
01:45:13,199 --> 01:45:14,639
and it only allowed certain of those

2586
01:45:14,639 --> 01:45:16,800
protocols to happen it performed

2587
01:45:16,800 --> 01:45:18,400
vertical fingerprinting across all of

2588
01:45:18,400 --> 01:45:19,280
these

2589
01:45:19,280 --> 01:45:21,040
and protocols that didn't match were

2590
01:45:21,040 --> 01:45:23,520
then subject to censorship which means

2591
01:45:23,520 --> 01:45:24,880
if you tried to use a protocol they

2592
01:45:24,880 --> 01:45:26,159
didn't approve of

2593
01:45:26,159 --> 01:45:27,760
regardless if what you were doing as

2594
01:45:27,760 --> 01:45:29,199
innocuous they would take that

2595
01:45:29,199 --> 01:45:31,840
connection down

2596
01:45:31,840 --> 01:45:33,360
in fact the only connections they did

2597
01:45:33,360 --> 01:45:35,520
allow were those that were they were

2598
01:45:35,520 --> 01:45:36,800
able to be filtered by their standard

2599
01:45:36,800 --> 01:45:38,800
sendership system

2600
01:45:38,800 --> 01:45:40,560
so within a small amount of time of this

2601
01:45:40,560 --> 01:45:42,719
censorship system being deployed we

2602
01:45:42,719 --> 01:45:44,560
threw geneva at this problem and we were

2603
01:45:44,560 --> 01:45:46,320
able to discover four strategies to

2604
01:45:46,320 --> 01:45:48,639
evade this filter uh four from the

2605
01:45:48,639 --> 01:45:50,560
server side so this means that as soon

2606
01:45:50,560 --> 01:45:52,320
as iran rolled this out we were able to

2607
01:45:52,320 --> 01:45:54,080
defeat this thing and help roll out

2608
01:45:54,080 --> 01:45:55,119
those

2609
01:45:55,119 --> 01:45:58,880
evasion tactics to those in iran

2610
01:45:58,880 --> 01:46:00,880
another example of new censorship events

2611
01:46:00,880 --> 01:46:03,360
that occurred is last summer china began

2612
01:46:03,360 --> 01:46:06,000
censoring the use of encrypted sni

2613
01:46:06,000 --> 01:46:07,600
this is a new feature in newer versions

2614
01:46:07,600 --> 01:46:08,800
of tls

2615
01:46:08,800 --> 01:46:11,199
whereby the s i or server name

2616
01:46:11,199 --> 01:46:13,440
indication fields inside tls is

2617
01:46:13,440 --> 01:46:14,639
encrypted

2618
01:46:14,639 --> 01:46:17,760
now the sni field is filled in tls 1.2

2619
01:46:17,760 --> 01:46:19,920
where when a client connects to a server

2620
01:46:19,920 --> 01:46:22,480
the client announces in plain text the

2621
01:46:22,480 --> 01:46:24,960
domain it's trying to get to

2622
01:46:24,960 --> 01:46:27,360
sni is clearly a privacy leak and the

2623
01:46:27,360 --> 01:46:29,360
tls developers are working on

2624
01:46:29,360 --> 01:46:31,520
fixing that

2625
01:46:31,520 --> 01:46:32,480
but

2626
01:46:32,480 --> 01:46:34,800
sni is how sensors have been censoring

2627
01:46:34,800 --> 01:46:37,040
https for quite some time

2628
01:46:37,040 --> 01:46:38,560
es and i people have been looking

2629
01:46:38,560 --> 01:46:40,320
forward to is the mechanism by which

2630
01:46:40,320 --> 01:46:42,719
they can protect themselves from smi

2631
01:46:42,719 --> 01:46:44,719
based censorship and unfortunately last

2632
01:46:44,719 --> 01:46:46,400
summer china decided to ban the use of

2633
01:46:46,400 --> 01:46:48,480
esni completely so if you try and

2634
01:46:48,480 --> 01:46:50,320
encrypt your smi fields and any

2635
01:46:50,320 --> 01:46:52,080
connections china will take action

2636
01:46:52,080 --> 01:46:53,760
against that connection even if you're

2637
01:46:53,760 --> 01:46:55,679
talking to something innocuous and has

2638
01:46:55,679 --> 01:46:57,600
effectively stopped the roll out of esme

2639
01:46:57,600 --> 01:46:59,119
within the country

2640
01:46:59,119 --> 01:47:01,040
now within 24 hours of china rolling out

2641
01:47:01,040 --> 01:47:03,119
this system geneva had discovered six

2642
01:47:03,119 --> 01:47:04,719
strategies to evade it

2643
01:47:04,719 --> 01:47:06,480
six from the client and four from the

2644
01:47:06,480 --> 01:47:07,360
server

2645
01:47:07,360 --> 01:47:08,960
this is very exciting and it really

2646
01:47:08,960 --> 01:47:11,119
allows us to be highly responsive and

2647
01:47:11,119 --> 01:47:15,599
dynamic as new censorship events occur

2648
01:47:16,159 --> 01:47:17,679
now the other exciting direction we've

2649
01:47:17,679 --> 01:47:19,679
been able to explore since this work has

2650
01:47:19,679 --> 01:47:21,440
been a real world deployment of this

2651
01:47:21,440 --> 01:47:23,040
system and we've been working with a

2652
01:47:23,040 --> 01:47:24,719
number of anti-censorship groups to

2653
01:47:24,719 --> 01:47:26,960
integrate our software and our findings

2654
01:47:26,960 --> 01:47:28,960
into their systems and we're starting to

2655
01:47:28,960 --> 01:47:30,560
see success with this

2656
01:47:30,560 --> 01:47:32,639
we've been using geneva to help really

2657
01:47:32,639 --> 01:47:34,639
in two regards the first is in

2658
01:47:34,639 --> 01:47:36,719
bootstrapping initial connections so

2659
01:47:36,719 --> 01:47:38,239
let's say you're something like a vpn

2660
01:47:38,239 --> 01:47:40,320
and you really want to help users get

2661
01:47:40,320 --> 01:47:42,560
connected initially and the weak the

2662
01:47:42,560 --> 01:47:44,560
weak spot in a lot of these protocols is

2663
01:47:44,560 --> 01:47:46,480
that initial connection it's those api

2664
01:47:46,480 --> 01:47:48,560
calls that initial reaching out

2665
01:47:48,560 --> 01:47:50,400
now we can use what we can do is use

2666
01:47:50,400 --> 01:47:52,400
geneva to help protect those initial

2667
01:47:52,400 --> 01:47:53,600
bootstrapping and assist in

2668
01:47:53,600 --> 01:47:55,760
bootstrapping clients from a weaker

2669
01:47:55,760 --> 01:47:58,560
protocol to a more secure protocol

2670
01:47:58,560 --> 01:47:59,920
the second thing we've been able to help

2671
01:47:59,920 --> 01:48:02,639
with is in hardening is hardening

2672
01:48:02,639 --> 01:48:04,960
existing evasion protocols evasion

2673
01:48:04,960 --> 01:48:06,639
protocols that sensors may be working on

2674
01:48:06,639 --> 01:48:08,960
harassing or taking action against use

2675
01:48:08,960 --> 01:48:10,960
geneva on top of those and deploy these

2676
01:48:10,960 --> 01:48:13,119
server-side strategies to protect those

2677
01:48:13,119 --> 01:48:15,040
in use and make it harder for sensors to

2678
01:48:15,040 --> 01:48:16,719
take action against these

2679
01:48:16,719 --> 01:48:17,840
we're very excited about these new

2680
01:48:17,840 --> 01:48:20,320
directions

2681
01:48:20,400 --> 01:48:22,159
i want to conclude here to talk about

2682
01:48:22,159 --> 01:48:23,760
new directions that this work has opened

2683
01:48:23,760 --> 01:48:24,719
up for us

2684
01:48:24,719 --> 01:48:26,400
and really how it's changed the way we

2685
01:48:26,400 --> 01:48:28,800
conceptualize middle boxes because these

2686
01:48:28,800 --> 01:48:30,400
middle boxes are really creating new

2687
01:48:30,400 --> 01:48:32,880
possibilities in the network it's good

2688
01:48:32,880 --> 01:48:35,280
because this has opened up the ability

2689
01:48:35,280 --> 01:48:37,360
to do censorship evasion to more people

2690
01:48:37,360 --> 01:48:38,719
even those who don't know they're being

2691
01:48:38,719 --> 01:48:39,920
censored

2692
01:48:39,920 --> 01:48:41,679
now this is made possible though by the

2693
01:48:41,679 --> 01:48:43,360
ugly fact

2694
01:48:43,360 --> 01:48:45,520
that middle boxes have bugs and bad

2695
01:48:45,520 --> 01:48:47,760
assumptions that can be exploited

2696
01:48:47,760 --> 01:48:49,119
and unfortunately this can also lead to

2697
01:48:49,119 --> 01:48:50,800
some very bad directions

2698
01:48:50,800 --> 01:48:52,320
in another recent piece of work we

2699
01:48:52,320 --> 01:48:53,920
showed that middle boxes can be actually

2700
01:48:53,920 --> 01:48:56,080
weaponized by attackers to launch

2701
01:48:56,080 --> 01:48:57,280
attacks that were long thought and

2702
01:48:57,280 --> 01:48:58,719
possible

2703
01:48:58,719 --> 01:49:00,159
ultimately this leads us to conclude

2704
01:49:00,159 --> 01:49:02,080
that to really make sense about what

2705
01:49:02,080 --> 01:49:03,440
these new additions to the internet are

2706
01:49:03,440 --> 01:49:05,600
doing we really need to keep investing

2707
01:49:05,600 --> 01:49:08,000
and automated tools like geneva to

2708
01:49:08,000 --> 01:49:09,600
understand what new things these middle

2709
01:49:09,600 --> 01:49:10,960
boxes enable

2710
01:49:10,960 --> 01:49:12,480
and how they change the landscape of the

2711
01:49:12,480 --> 01:49:16,239
network and networking research

2712
01:49:16,320 --> 01:49:18,159
now i'm going to wrap up here today i've

2713
01:49:18,159 --> 01:49:20,080
talked about geneva and specifically how

2714
01:49:20,080 --> 01:49:21,760
we've applied it to make servers light

2715
01:49:21,760 --> 01:49:23,199
evasion possible

2716
01:49:23,199 --> 01:49:24,639
if you want to learn more our website is

2717
01:49:24,639 --> 01:49:26,159
available here at the slide it's

2718
01:49:26,159 --> 01:49:28,719
geneva.cs.umd

2719
01:49:28,719 --> 01:49:31,599
thank you all very much

2720
01:49:37,679 --> 01:49:39,119
all right so

2721
01:49:39,119 --> 01:49:40,159
thank you

2722
01:49:40,159 --> 01:49:44,000
kevin really nice talk um

2723
01:49:44,159 --> 01:49:46,799
are you there

2724
01:49:52,239 --> 01:49:55,119
yes hi

2725
01:49:55,280 --> 01:49:57,360
so uh i see tremendous amounts of

2726
01:49:57,360 --> 01:49:59,679
discussion in the chats already um are

2727
01:49:59,679 --> 01:50:01,360
there any questions which people haven't

2728
01:50:01,360 --> 01:50:04,719
asked already in the chat uh

2729
01:50:04,719 --> 01:50:09,080
see spencer maybe uh

2730
01:50:10,400 --> 01:50:14,719
what else do we have stewards yes

2731
01:50:15,840 --> 01:50:18,000
please don't join the queue if you have

2732
01:50:18,000 --> 01:50:20,560
questions

2733
01:50:23,760 --> 01:50:25,040
all right

2734
01:50:25,040 --> 01:50:27,360
go ahead

2735
01:50:27,360 --> 01:50:28,960
well since you needed questions so then

2736
01:50:28,960 --> 01:50:30,880
two more people popped up so it was

2737
01:50:30,880 --> 01:50:32,800
unclear to me maybe i missed it how did

2738
01:50:32,800 --> 01:50:35,119
you determine ground truth for

2739
01:50:35,119 --> 01:50:37,119
uh if you were doing server side you

2740
01:50:37,119 --> 01:50:40,560
know studies how do you decide whether

2741
01:50:40,560 --> 01:50:42,320
something is successful or not and

2742
01:50:42,320 --> 01:50:44,000
actually got transferred to and from the

2743
01:50:44,000 --> 01:50:46,719
client properly

2744
01:50:47,010 --> 01:50:48,480
[Music]

2745
01:50:48,480 --> 01:50:50,400
can you hear me let me know if my audio

2746
01:50:50,400 --> 01:50:52,800
is not great

2747
01:50:52,800 --> 01:50:54,960
so in our case we have the we have the

2748
01:50:54,960 --> 01:50:56,400
good fortune of being able to control

2749
01:50:56,400 --> 01:50:58,159
both the client and the server so we did

2750
01:50:58,159 --> 01:51:00,239
our experiments we actually had vantage

2751
01:51:00,239 --> 01:51:01,679
points located in all of these sensor

2752
01:51:01,679 --> 01:51:03,599
countries and so we could ground truth

2753
01:51:03,599 --> 01:51:05,920
was very easy to determine we could try

2754
01:51:05,920 --> 01:51:07,440
and obtain some forbidden resource see

2755
01:51:07,440 --> 01:51:09,440
the sensor take action and then try and

2756
01:51:09,440 --> 01:51:11,119
do that again with the server-side

2757
01:51:11,119 --> 01:51:13,840
strategy running and see it succeed

2758
01:51:13,840 --> 01:51:15,040
now when you're talking about scaling

2759
01:51:15,040 --> 01:51:16,719
this up to cases which you don't control

2760
01:51:16,719 --> 01:51:18,000
the client or some of our more

2761
01:51:18,000 --> 01:51:19,199
real-world deployments that we've been

2762
01:51:19,199 --> 01:51:20,800
working on recently it starts getting a

2763
01:51:20,800 --> 01:51:22,719
little trickier when you start you need

2764
01:51:22,719 --> 01:51:23,520
to

2765
01:51:23,520 --> 01:51:25,360
really look at telemetry and

2766
01:51:25,360 --> 01:51:26,400
um

2767
01:51:26,400 --> 01:51:28,320
look very carefully at what the if the

2768
01:51:28,320 --> 01:51:29,599
packets are getting exchanged if the

2769
01:51:29,599 --> 01:51:30,960
connection is staying alive that sort of

2770
01:51:30,960 --> 01:51:31,760
thing

2771
01:51:31,760 --> 01:51:34,880
i will say most sensors

2772
01:51:34,880 --> 01:51:35,920
when they take action against the

2773
01:51:35,920 --> 01:51:37,760
connection it's fairly obvious like it

2774
01:51:37,760 --> 01:51:39,920
they're usually not quite about it

2775
01:51:39,920 --> 01:51:42,400
so generally the server can determine

2776
01:51:42,400 --> 01:51:44,080
pretty accurately whether a sensor is

2777
01:51:44,080 --> 01:51:48,119
taken action against something or not

2778
01:51:51,679 --> 01:51:55,360
okay thank you uh shiva

2779
01:51:56,239 --> 01:51:58,400
hey kevin thanks for the talk um can you

2780
01:51:58,400 --> 01:52:00,638
hear me

2781
01:52:00,880 --> 01:52:02,800
i just so i i think you might have

2782
01:52:02,800 --> 01:52:05,040
touched upon this but um when it comes

2783
01:52:05,040 --> 01:52:08,400
to deploying this at scale uh were you i

2784
01:52:08,400 --> 01:52:11,040
think you mentioned like tunnelbear um

2785
01:52:11,040 --> 01:52:12,560
someone you were working with british

2786
01:52:12,560 --> 01:52:14,400
wondering were you thinking about the

2787
01:52:14,400 --> 01:52:15,840
coming up the strategies in a

2788
01:52:15,840 --> 01:52:17,840
centralized way and then distributing

2789
01:52:17,840 --> 01:52:19,440
those strategies to every deploy to

2790
01:52:19,440 --> 01:52:20,400
every

2791
01:52:20,400 --> 01:52:21,199
um

2792
01:52:21,199 --> 01:52:22,880
server running

2793
01:52:22,880 --> 01:52:24,960
geneva or were you thinking that every

2794
01:52:24,960 --> 01:52:26,560
individual deployment

2795
01:52:26,560 --> 01:52:28,320
server deployment would come up with its

2796
01:52:28,320 --> 01:52:30,800
own strategies um yeah like what were

2797
01:52:30,800 --> 01:52:33,040
you i guess thinking about like coming

2798
01:52:33,040 --> 01:52:35,280
up with the strategies of themselves

2799
01:52:35,280 --> 01:52:38,400
from a deployment point of view

2800
01:52:40,880 --> 01:52:43,119
for initial rollout the the methodology

2801
01:52:43,119 --> 01:52:46,000
has been um will be kind of a strategy

2802
01:52:46,000 --> 01:52:48,000
oracle and provide strategies

2803
01:52:48,000 --> 01:52:49,199
i didn't get to talk about it too much

2804
01:52:49,199 --> 01:52:51,040
of the talk but geneva's broadly broken

2805
01:52:51,040 --> 01:52:52,560
into two halves there's the component

2806
01:52:52,560 --> 01:52:54,400
that runs the strategy on the network

2807
01:52:54,400 --> 01:52:56,000
and the genetic algorithm that discovers

2808
01:52:56,000 --> 01:52:57,360
the strategies and those are fairly

2809
01:52:57,360 --> 01:52:59,199
self-contained

2810
01:52:59,199 --> 01:53:01,520
so for now we've been we've had success

2811
01:53:01,520 --> 01:53:05,199
with um having third parties deploy the

2812
01:53:05,199 --> 01:53:06,960
strategy engine the thing that takes the

2813
01:53:06,960 --> 01:53:08,880
strategy and runs it on the network

2814
01:53:08,880 --> 01:53:10,639
and we've been more strategy oracle

2815
01:53:10,639 --> 01:53:12,480
providing strategies that being said

2816
01:53:12,480 --> 01:53:13,840
there are more and more groups who are

2817
01:53:13,840 --> 01:53:16,480
working to find strategies themselves

2818
01:53:16,480 --> 01:53:17,520
and so as that becomes more

2819
01:53:17,520 --> 01:53:19,360
decentralized that'll

2820
01:53:19,360 --> 01:53:22,639
things will just continue to improve

2821
01:53:25,360 --> 01:53:27,920
okay great area

2822
01:53:27,920 --> 01:53:29,280
yeah and thanks a lot for this talk it

2823
01:53:29,280 --> 01:53:31,360
was very interesting to learn um what

2824
01:53:31,360 --> 01:53:32,560
the sensors are doing there and i

2825
01:53:32,560 --> 01:53:33,760
probably have to read the rest of the

2826
01:53:33,760 --> 01:53:35,040
paper as well to understand what's

2827
01:53:35,040 --> 01:53:36,960
happening there um we talked a little

2828
01:53:36,960 --> 01:53:39,280
bit uh in the chat about this is a cat

2829
01:53:39,280 --> 01:53:42,239
and mouse game right um can you just um

2830
01:53:42,239 --> 01:53:44,000
tell a little bit about like how long

2831
01:53:44,000 --> 01:53:45,440
because i think somebody said in the

2832
01:53:45,440 --> 01:53:46,880
chat that some of these bugs have been

2833
01:53:46,880 --> 01:53:48,480
fixed so like what's the timeline how

2834
01:53:48,480 --> 01:53:50,159
long did it take what was the dynamics

2835
01:53:50,159 --> 01:53:51,360
behind that

2836
01:53:51,360 --> 01:53:54,679
just curious

2837
01:53:55,040 --> 01:53:56,639
yes that's a really good question and

2838
01:53:56,639 --> 01:53:58,400
that's something we're still studying of

2839
01:53:58,400 --> 01:53:59,599
what does it look like when a nation

2840
01:53:59,599 --> 01:54:01,520
state rolls out a bug fix um like how

2841
01:54:01,520 --> 01:54:03,280
long does that take where does that go

2842
01:54:03,280 --> 01:54:04,480
um but still something we're studying

2843
01:54:04,480 --> 01:54:05,920
and i don't think i have a great answer

2844
01:54:05,920 --> 01:54:08,960
for you um the

2845
01:54:08,960 --> 01:54:11,840
yeah i think i'll put a tbd stay tuned

2846
01:54:11,840 --> 01:54:13,840
on that um it's something that's super

2847
01:54:13,840 --> 01:54:14,560
interesting we're going to keep

2848
01:54:14,560 --> 01:54:16,719
monitoring and we do test these things

2849
01:54:16,719 --> 01:54:18,800
fairly often to see what's goes on but i

2850
01:54:18,800 --> 01:54:19,599
don't think we have a great

2851
01:54:19,599 --> 01:54:22,080
understanding yet of

2852
01:54:22,080 --> 01:54:23,679
how those fixes get rolled out and part

2853
01:54:23,679 --> 01:54:25,920
of that is a limitation of

2854
01:54:25,920 --> 01:54:27,360
that can be quite difficult to do at

2855
01:54:27,360 --> 01:54:28,480
scale

2856
01:54:28,480 --> 01:54:30,320
for example a country like china may

2857
01:54:30,320 --> 01:54:31,360
have

2858
01:54:31,360 --> 01:54:33,199
may have many instances of middle boxes

2859
01:54:33,199 --> 01:54:34,960
and i mean perhaps the fix get rolled

2860
01:54:34,960 --> 01:54:36,400
out somewhere and it takes time to

2861
01:54:36,400 --> 01:54:37,760
traverse or

2862
01:54:37,760 --> 01:54:38,960
there's different sets of middle boxes

2863
01:54:38,960 --> 01:54:40,239
doing things

2864
01:54:40,239 --> 01:54:42,080
so it really takes quite a concerted

2865
01:54:42,080 --> 01:54:43,599
effort to measure these things at scale

2866
01:54:43,599 --> 01:54:46,480
and get a good understanding of

2867
01:54:46,480 --> 01:54:47,760
how the fixes move through the network

2868
01:54:47,760 --> 01:54:49,360
if you will so

2869
01:54:49,360 --> 01:54:51,040
a big tbd on that but it is a super

2870
01:54:51,040 --> 01:54:53,360
interesting question

2871
01:54:53,360 --> 01:54:54,960
okay thank you i will read your next

2872
01:54:54,960 --> 01:54:56,639
paper but yeah it's already known that

2873
01:54:56,639 --> 01:54:58,239
the system is very heavy so it's

2874
01:54:58,239 --> 01:55:02,519
probably hard to measure great

2875
01:55:04,480 --> 01:55:08,480
all right uh andrew i think is next

2876
01:55:08,480 --> 01:55:10,480
uh siobhan are you supposed to stop in

2877
01:55:10,480 --> 01:55:12,879
the queue

2878
01:55:15,199 --> 01:55:17,440
yeah should i go ahead yep

2879
01:55:17,440 --> 01:55:20,159
um uh yeah hi kevin thanks uh

2880
01:55:20,159 --> 01:55:22,480
very interesting presentation um just

2881
01:55:22,480 --> 01:55:24,560
just amplify a comment i made in the

2882
01:55:24,560 --> 01:55:26,800
chat which you answered but i think

2883
01:55:26,800 --> 01:55:28,239
um

2884
01:55:28,239 --> 01:55:31,440
clearly i can see nation states

2885
01:55:31,440 --> 01:55:33,520
have the resources to

2886
01:55:33,520 --> 01:55:35,119
you know respond over time with

2887
01:55:35,119 --> 01:55:38,560
countermeasures etc so it's an arms race

2888
01:55:38,560 --> 01:55:40,880
and no side will win i think by

2889
01:55:40,880 --> 01:55:42,000
definition

2890
01:55:42,000 --> 01:55:43,040
um

2891
01:55:43,040 --> 01:55:44,880
possibly china might because they got

2892
01:55:44,880 --> 01:55:46,320
more resources than anybody else but uh

2893
01:55:46,320 --> 01:55:47,840
notwithstanding that

2894
01:55:47,840 --> 01:55:50,239
my concern is for the non-nation states

2895
01:55:50,239 --> 01:55:52,719
affected by this so if you like for the

2896
01:55:52,719 --> 01:55:54,719
typical end user

2897
01:55:54,719 --> 01:55:59,199
versus the malicious content developer

2898
01:55:59,199 --> 01:56:01,040
clearly server-side evasions in the

2899
01:56:01,040 --> 01:56:02,800
hands of malware

2900
01:56:02,800 --> 01:56:06,159
has seriously bad implications for for

2901
01:56:06,159 --> 01:56:08,800
most end users

2902
01:56:08,800 --> 01:56:09,840
so

2903
01:56:09,840 --> 01:56:11,040
if you like

2904
01:56:11,040 --> 01:56:12,880
any tool can be used for good and bad i

2905
01:56:12,880 --> 01:56:14,880
think this tool has

2906
01:56:14,880 --> 01:56:17,199
tremendously negative connotations for

2907
01:56:17,199 --> 01:56:20,080
the vast majority of internet users

2908
01:56:20,080 --> 01:56:22,000
which doesn't negate the work but i

2909
01:56:22,000 --> 01:56:23,920
think that needs very very careful

2910
01:56:23,920 --> 01:56:26,920
considerations

2911
01:56:31,920 --> 01:56:33,360
it's a true statement generally that

2912
01:56:33,360 --> 01:56:34,800
anything like this can be used for good

2913
01:56:34,800 --> 01:56:37,040
and bad and malicious i think dave said

2914
01:56:37,040 --> 01:56:38,320
it best malicious is in the eye of the

2915
01:56:38,320 --> 01:56:39,599
beholder

2916
01:56:39,599 --> 01:56:41,199
so we've intentionally not taken this

2917
01:56:41,199 --> 01:56:43,360
work and applied it towards

2918
01:56:43,360 --> 01:56:45,360
um the firewalls like you're describing

2919
01:56:45,360 --> 01:56:46,639
like this really has been a very

2920
01:56:46,639 --> 01:56:48,400
concertedly focused effort on nation

2921
01:56:48,400 --> 01:56:50,639
states to try and at least angle things

2922
01:56:50,639 --> 01:56:52,480
towards the good side as as we can help

2923
01:56:52,480 --> 01:56:54,400
direct it um

2924
01:56:54,400 --> 01:56:57,520
i think it's difficult to quantify if

2925
01:56:57,520 --> 01:56:58,639
the

2926
01:56:58,639 --> 01:57:01,280
who who's affected the majority here

2927
01:57:01,280 --> 01:57:03,040
um i mean there are billions of people

2928
01:57:03,040 --> 01:57:05,679
living under the centered regimes um

2929
01:57:05,679 --> 01:57:06,639
there's also billions of people who

2930
01:57:06,639 --> 01:57:08,320
would like to be protected by firewalls

2931
01:57:08,320 --> 01:57:09,280
so

2932
01:57:09,280 --> 01:57:11,199
it's kind of a tough question to answer

2933
01:57:11,199 --> 01:57:12,800
um but it is something we've been

2934
01:57:12,800 --> 01:57:14,320
thinking about and it was a serious

2935
01:57:14,320 --> 01:57:15,679
consideration we were talking about

2936
01:57:15,679 --> 01:57:16,960
should we release this tool should we

2937
01:57:16,960 --> 01:57:18,320
make it open source

2938
01:57:18,320 --> 01:57:20,159
um at the end of the day we we thought

2939
01:57:20,159 --> 01:57:21,040
it

2940
01:57:21,040 --> 01:57:22,800
best to put it out there and

2941
01:57:22,800 --> 01:57:25,800
um

2942
01:57:26,320 --> 01:57:27,119
yeah

2943
01:57:27,119 --> 01:57:29,679
let the community use it

2944
01:57:29,679 --> 01:57:31,920
i guess i i just uh i would observe that

2945
01:57:31,920 --> 01:57:33,440
some of the earliest adopters of for

2946
01:57:33,440 --> 01:57:35,440
example encrypted dns

2947
01:57:35,440 --> 01:57:36,840
um

2948
01:57:36,840 --> 01:57:40,000
were malware

2949
01:57:40,000 --> 01:57:42,719
developers um so malicious content in

2950
01:57:42,719 --> 01:57:43,520
the

2951
01:57:43,520 --> 01:57:44,960
way that

2952
01:57:44,960 --> 01:57:46,960
in a definition that most of us would

2953
01:57:46,960 --> 01:57:48,840
recognize as malicious

2954
01:57:48,840 --> 01:57:50,880
[Music]

2955
01:57:50,880 --> 01:57:53,760
yeah anyway uh food for thought

2956
01:57:53,760 --> 01:57:55,760
certainly thank you

2957
01:57:55,760 --> 01:57:58,080
yeah it's a difficult problem i i'm

2958
01:57:58,080 --> 01:58:00,080
tempted to say that the only winning

2959
01:58:00,080 --> 01:58:02,400
move is not to play

2960
01:58:02,400 --> 01:58:02,860
um

2961
01:58:02,860 --> 01:58:04,800
[Music]

2962
01:58:04,800 --> 01:58:07,280
just following on a little bit from that

2963
01:58:07,280 --> 01:58:08,719
can you say

2964
01:58:08,719 --> 01:58:10,080
i think you've touched on this to some

2965
01:58:10,080 --> 01:58:11,440
extent already can you say something

2966
01:58:11,440 --> 01:58:13,760
about how you did the tests and how you

2967
01:58:13,760 --> 01:58:16,400
protected the uh the users who are

2968
01:58:16,400 --> 01:58:20,920
running the tests in these countries

2969
01:58:21,119 --> 01:58:23,760
so in these cases

2970
01:58:23,760 --> 01:58:27,679
we got some bad echo here is this on me

2971
01:58:27,840 --> 01:58:30,000
are we good okay we're good um in these

2972
01:58:30,000 --> 01:58:32,320
cases we did all these tests ourselves

2973
01:58:32,320 --> 01:58:34,080
so there were no end users directly

2974
01:58:34,080 --> 01:58:35,679
involved and the no end users were

2975
01:58:35,679 --> 01:58:36,719
harmed in the making of this paper if

2976
01:58:36,719 --> 01:58:39,599
you will um and no end users were we we

2977
01:58:39,599 --> 01:58:41,119
tried very hard to not put any end users

2978
01:58:41,119 --> 01:58:42,960
at risk it was from machines directly at

2979
01:58:42,960 --> 01:58:44,400
our control and

2980
01:58:44,400 --> 01:58:47,599
um we monitored all that very carefully

2981
01:58:47,599 --> 01:58:48,880
going forward as these things are

2982
01:58:48,880 --> 01:58:50,239
deployed that's a whole separate

2983
01:58:50,239 --> 01:58:51,679
question um

2984
01:58:51,679 --> 01:58:53,520
and that's that's something that as

2985
01:58:53,520 --> 01:58:54,800
people deploy these things they'll have

2986
01:58:54,800 --> 01:58:57,440
to wrestle with those um but at least in

2987
01:58:57,440 --> 01:58:59,360
in all the work we did and in those

2988
01:58:59,360 --> 01:59:02,159
circumstances there were no users

2989
01:59:02,159 --> 01:59:05,040
no users involved

2990
01:59:06,320 --> 01:59:09,119
all right great thank you very much uh

2991
01:59:09,119 --> 01:59:12,719
we are basically out of time here um

2992
01:59:12,719 --> 01:59:14,000
i think we've had three really

2993
01:59:14,000 --> 01:59:15,840
interesting talks we've had a bunch of

2994
01:59:15,840 --> 01:59:17,840
really interesting discussion

2995
01:59:17,840 --> 01:59:19,440
um if you

2996
01:59:19,440 --> 01:59:21,119
anyone here would like to follow up with

2997
01:59:21,119 --> 01:59:23,679
the the rest of the office uh

2998
01:59:23,679 --> 01:59:26,800
please do reach out to them uh i'm sure

2999
01:59:26,800 --> 01:59:28,719
everyone involved will be happy to chat

3000
01:59:28,719 --> 01:59:30,480
more um

3001
01:59:30,480 --> 01:59:32,480
the uh you know

3002
01:59:32,480 --> 01:59:33,840
people may be around for the rest of the

3003
01:59:33,840 --> 01:59:36,080
meeting uh we have the gather space if

3004
01:59:36,080 --> 01:59:38,320
people want to chat afterwards as well

3005
01:59:38,320 --> 01:59:40,960
uh which is all linked from the agenda

3006
01:59:40,960 --> 01:59:41,340
um

3007
01:59:41,340 --> 01:59:42,480
[Music]

3008
01:59:42,480 --> 01:59:45,199
yeah uh really nice talks as i say

3009
01:59:45,199 --> 01:59:47,520
please reach reach out to the offers and

3010
01:59:47,520 --> 01:59:50,719
uh please uh submit your nominations for

3011
01:59:50,719 --> 01:59:54,880
the price for 2022 uh the deadline is uh

3012
01:59:54,880 --> 01:59:57,199
i believe the end of next week

3013
01:59:57,199 --> 02:00:00,000
so thank you everybody uh

3014
02:00:00,000 --> 02:00:01,520
thank you again and and that's all we

3015
02:00:01,520 --> 02:00:04,719
have so thanks everyone

3016
02:00:05,840 --> 02:00:09,080
thanks colin

3017
02:00:33,840 --> 02:00:35,920
you

