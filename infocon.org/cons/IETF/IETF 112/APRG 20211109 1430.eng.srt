1
00:00:08,480 --> 00:00:10,240
all right looks like we got about 60

2
00:00:10,240 --> 00:00:12,320
people signed in

3
00:00:12,320 --> 00:00:14,719
it's about time to start

4
00:00:14,719 --> 00:00:17,359
so i'm ready to go

5
00:00:17,359 --> 00:00:19,439
all right uh good morning good afternoon

6
00:00:19,439 --> 00:00:22,480
and good evening everyone this is the uh

7
00:00:22,480 --> 00:00:24,240
measurement and analysis for protocols

8
00:00:24,240 --> 00:00:27,039
research group meeting in uh in concert

9
00:00:27,039 --> 00:00:29,039
with ietf112

10
00:00:29,039 --> 00:00:31,439
my name is dave lanka and miria

11
00:00:31,439 --> 00:00:35,840
cooliwind the co-chair is also on

12
00:00:38,800 --> 00:00:40,960
the irtf follows

13
00:00:40,960 --> 00:00:42,719
ietf intellectual property rights if

14
00:00:42,719 --> 00:00:44,960
you're going to talk about anything here

15
00:00:44,960 --> 00:00:47,920
that your company or your organization

16
00:00:47,920 --> 00:00:50,640
is uh has applied for a patent or has

17
00:00:50,640 --> 00:00:52,480
been granted granted patent you're

18
00:00:52,480 --> 00:00:54,320
required to disclose that in a timely

19
00:00:54,320 --> 00:00:55,600
fashion

20
00:00:55,600 --> 00:00:57,360
see the details in the rfcs and

21
00:00:57,360 --> 00:00:59,680
documents linked here if you need

22
00:00:59,680 --> 00:01:02,719
if that's appropriate for you

23
00:01:04,879 --> 00:01:05,680
uh

24
00:01:05,680 --> 00:01:06,960
the note well

25
00:01:06,960 --> 00:01:09,280
privacy and code of conduct this meeting

26
00:01:09,280 --> 00:01:12,479
is being recorded it's in the public

27
00:01:12,479 --> 00:01:13,840
the

28
00:01:13,840 --> 00:01:15,200
information you present here will be

29
00:01:15,200 --> 00:01:17,439
available publicly

30
00:01:17,439 --> 00:01:19,600
privacy policies linked there

31
00:01:19,600 --> 00:01:22,320
uh we also expect you to abide by the

32
00:01:22,320 --> 00:01:24,640
code of conduct uh be respectful to

33
00:01:24,640 --> 00:01:27,759
other people harassment is not tolerated

34
00:01:27,759 --> 00:01:30,079
if you find instances of this there's uh

35
00:01:30,079 --> 00:01:32,000
contact information to the ombudsman

36
00:01:32,000 --> 00:01:33,920
there but

37
00:01:33,920 --> 00:01:35,680
just please be courteous in your

38
00:01:35,680 --> 00:01:37,360
participation in

39
00:01:37,360 --> 00:01:39,360
our meeting

40
00:01:39,360 --> 00:01:41,040
yeah let me actually add a few words

41
00:01:41,040 --> 00:01:42,560
because um i think this is really

42
00:01:42,560 --> 00:01:44,799
important for our community and so uh

43
00:01:44,799 --> 00:01:47,280
just pointing people at this um code of

44
00:01:47,280 --> 00:01:49,759
conduct and the anti-arizona policy uh

45
00:01:49,759 --> 00:01:51,600
is a serious point and not only

46
00:01:51,600 --> 00:01:53,920
something we skip through and i think

47
00:01:53,920 --> 00:01:55,439
this is also very important for us in

48
00:01:55,439 --> 00:01:57,360
the irtf because in this especially in

49
00:01:57,360 --> 00:01:59,439
this group we have a lot of newcomers

50
00:01:59,439 --> 00:02:01,360
and so we should be very welcoming and

51
00:02:01,360 --> 00:02:04,000
open i think um and that doesn't mean

52
00:02:04,000 --> 00:02:05,759
that you cannot criticize anything but

53
00:02:05,759 --> 00:02:07,280
if you criticize something or if you

54
00:02:07,280 --> 00:02:08,479
provide feedback provided in a

55
00:02:08,479 --> 00:02:10,639
constructive way and be friendly and

56
00:02:10,639 --> 00:02:14,000
help people um to get to know the ietf

57
00:02:14,000 --> 00:02:16,000
um i mean consider this for this session

58
00:02:16,000 --> 00:02:17,520
i don't think we had any problems in the

59
00:02:17,520 --> 00:02:19,440
past also consider this for all the

60
00:02:19,440 --> 00:02:21,360
other sessions you're participating in

61
00:02:21,360 --> 00:02:23,280
for all activities around the ietf and

62
00:02:23,280 --> 00:02:26,080
the irtf also for the chat

63
00:02:26,080 --> 00:02:27,440
not only when you speak up on the

64
00:02:27,440 --> 00:02:29,440
mailing list or in the session

65
00:02:29,440 --> 00:02:31,440
and also please speak up if you see

66
00:02:31,440 --> 00:02:33,360
behavior and that is not appropriate you

67
00:02:33,360 --> 00:02:34,959
don't have to speak in public and of

68
00:02:34,959 --> 00:02:38,080
course it's always a subjective judgment

69
00:02:38,080 --> 00:02:39,840
but it does help to approach those

70
00:02:39,840 --> 00:02:41,519
people and tell the people that you

71
00:02:41,519 --> 00:02:43,120
personally had the feeling that

72
00:02:43,120 --> 00:02:44,720
something was not okay so we can all

73
00:02:44,720 --> 00:02:45,840
improve and make this a better

74
00:02:45,840 --> 00:02:47,360
environment

75
00:02:47,360 --> 00:02:49,200
when i go to the next slide

76
00:02:49,200 --> 00:02:51,040
thanks maria

77
00:02:51,040 --> 00:02:53,760
um so the goals of the irtf is to to

78
00:02:53,760 --> 00:02:55,840
support and present research work it is

79
00:02:55,840 --> 00:02:57,360
not the standards organization that the

80
00:02:57,360 --> 00:02:59,920
ietf is even though we are co-located

81
00:02:59,920 --> 00:03:03,599
and use some of the same procedures

82
00:03:03,680 --> 00:03:05,760
and there's more information about that

83
00:03:05,760 --> 00:03:09,120
at the link provided here

84
00:03:09,360 --> 00:03:12,080
so administrivia the charter for map rg

85
00:03:12,080 --> 00:03:13,680
which has been running more than five

86
00:03:13,680 --> 00:03:16,400
years now is available at the link there

87
00:03:16,400 --> 00:03:18,400
please subscribe to mailing list if you

88
00:03:18,400 --> 00:03:20,640
want to hear about upcoming map or g

89
00:03:20,640 --> 00:03:23,599
things but also related topics we

90
00:03:23,599 --> 00:03:25,599
regularly get advertisements for calls

91
00:03:25,599 --> 00:03:28,080
for participation or contributions

92
00:03:28,080 --> 00:03:29,519
in other

93
00:03:29,519 --> 00:03:33,120
workshops in symposia and conferences

94
00:03:33,120 --> 00:03:35,519
that are about measurement of internet

95
00:03:35,519 --> 00:03:37,360
things and you'll see today that will we

96
00:03:37,360 --> 00:03:39,280
sometimes host those in the map rg

97
00:03:39,280 --> 00:03:40,799
meeting as well

98
00:03:40,799 --> 00:03:42,879
uh today's slides are available

99
00:03:42,879 --> 00:03:46,000
go ahead go ahead sorry

100
00:03:46,000 --> 00:03:46,720
uh

101
00:03:46,720 --> 00:03:48,640
today's slides are at the link there you

102
00:03:48,640 --> 00:03:50,080
can find them in the agenda search for

103
00:03:50,080 --> 00:03:52,319
mamprgy

104
00:03:52,319 --> 00:03:54,080
and i just see that i missed the meet

105
00:03:54,080 --> 00:03:55,519
echo link but you're all here so that's

106
00:03:55,519 --> 00:03:57,680
great yeah i was i i saw that too and i

107
00:03:57,680 --> 00:03:59,360
was like well we're showing this like to

108
00:03:59,360 --> 00:04:01,280
people in medeco

109
00:04:01,280 --> 00:04:02,640
so i thought the one place it didn't

110
00:04:02,640 --> 00:04:03,920
need to be was that right there right

111
00:04:03,920 --> 00:04:05,519
now

112
00:04:05,519 --> 00:04:08,480
all right next slide

113
00:04:08,480 --> 00:04:10,080
the jabber is by the way linked to the

114
00:04:10,080 --> 00:04:13,519
same uh chat you see in midair

115
00:04:13,519 --> 00:04:16,720
a small announcement uh the iab workshop

116
00:04:16,720 --> 00:04:19,680
on annelle's analyzing in ietf data is

117
00:04:19,680 --> 00:04:21,440
coming up maria is one of the organizers

118
00:04:21,440 --> 00:04:22,479
of that

119
00:04:22,479 --> 00:04:23,840
and uh

120
00:04:23,840 --> 00:04:26,320
that's um november 29th is number two

121
00:04:26,320 --> 00:04:28,320
the call and the selection process has

122
00:04:28,320 --> 00:04:29,440
already occurred but we're letting you

123
00:04:29,440 --> 00:04:32,240
know that that's there for instance um

124
00:04:32,240 --> 00:04:34,080
to give you an idea of work that will be

125
00:04:34,080 --> 00:04:36,000
presented there that's peripheral and

126
00:04:36,000 --> 00:04:39,520
related but um but not in map rg for

127
00:04:39,520 --> 00:04:41,360
instance stephen mcquisten

128
00:04:41,360 --> 00:04:42,720
and his co-authors did a work on

129
00:04:42,720 --> 00:04:44,479
characterizing the ietf through the lens

130
00:04:44,479 --> 00:04:46,800
of rfc develop deployment so you can

131
00:04:46,800 --> 00:04:48,560
imagine it has a lot to do with the

132
00:04:48,560 --> 00:04:50,160
things that you might be interested in

133
00:04:50,160 --> 00:04:51,600
especially if you're working on

134
00:04:51,600 --> 00:04:53,919
protocols and the standardization but

135
00:04:53,919 --> 00:04:55,199
it's not about measurement of the

136
00:04:55,199 --> 00:04:57,360
protocol itself so we're not hosting it

137
00:04:57,360 --> 00:04:58,240
here

138
00:04:58,240 --> 00:04:59,759
um

139
00:04:59,759 --> 00:05:03,680
uh on on a similar note uh sig com uh 20

140
00:05:03,680 --> 00:05:06,560
2021 happened in august of this year

141
00:05:06,560 --> 00:05:08,240
there's also some work that you might be

142
00:05:08,240 --> 00:05:10,000
interested in that again wouldn't be in

143
00:05:10,000 --> 00:05:13,680
map rgb because it's not about you know

144
00:05:14,400 --> 00:05:15,759
two had a nice piece of work there

145
00:05:15,759 --> 00:05:18,639
called insights for from operating on an

146
00:05:18,639 --> 00:05:20,479
ip exchange provider

147
00:05:20,479 --> 00:05:23,440
that is about running a global

148
00:05:23,440 --> 00:05:25,840
network of fiber optic links in parallel

149
00:05:25,840 --> 00:05:27,360
with internet use for instance for

150
00:05:27,360 --> 00:05:29,600
global roaming for mobile so you can see

151
00:05:29,600 --> 00:05:31,199
why that wouldn't be here per se but we

152
00:05:31,199 --> 00:05:32,800
wanted to let you know that there's work

153
00:05:32,800 --> 00:05:34,880
in sitcom that's related to the work

154
00:05:34,880 --> 00:05:36,880
here that you might want to go and visit

155
00:05:36,880 --> 00:05:38,800
the next library

156
00:05:38,800 --> 00:05:40,800
yeah maybe just also the the authors of

157
00:05:40,800 --> 00:05:42,639
uh of those documents feel free to use a

158
00:05:42,639 --> 00:05:44,720
map of gmail just to announce this work

159
00:05:44,720 --> 00:05:46,160
and make people aware

160
00:05:46,160 --> 00:05:47,360
absolutely

161
00:05:47,360 --> 00:05:49,919
yeah and also i recommend everybody to

162
00:05:49,919 --> 00:05:52,479
check out the last imc

163
00:05:52,479 --> 00:05:54,080
that was just last week there's a lot of

164
00:05:54,080 --> 00:05:55,520
interesting papers and we have a bunch

165
00:05:55,520 --> 00:05:57,520
of interesting papers today from imc as

166
00:05:57,520 --> 00:05:59,680
well

167
00:06:01,680 --> 00:06:04,639
okay so the agenda for today uh first up

168
00:06:04,639 --> 00:06:06,560
we'll have so a number of these pieces

169
00:06:06,560 --> 00:06:08,800
of work are from imc

170
00:06:08,800 --> 00:06:11,440
and uh and it's a subset that samples

171
00:06:11,440 --> 00:06:12,880
across the kind of things that map rg

172
00:06:12,880 --> 00:06:15,120
uzi does first up we'll have giovanni

173
00:06:15,120 --> 00:06:19,440
mora talk about uh sue name and this uh

174
00:06:19,440 --> 00:06:21,520
problem with the dns system and work

175
00:06:21,520 --> 00:06:23,759
that they carried on to to adapt the

176
00:06:23,759 --> 00:06:26,479
protocol to not have this problem so an

177
00:06:26,479 --> 00:06:27,440
actual

178
00:06:27,440 --> 00:06:30,240
engineering effort there uh next up

179
00:06:30,240 --> 00:06:32,000
we'll have nicholas kuhn bringing some

180
00:06:32,000 --> 00:06:35,840
new work to us that and some early work

181
00:06:35,840 --> 00:06:38,720
about vpn performance over satellite

182
00:06:38,720 --> 00:06:40,080
communications

183
00:06:40,080 --> 00:06:42,479
and then and each of these will have 10

184
00:06:42,479 --> 00:06:45,039
to 15 minutes and uh let's go of time

185
00:06:45,039 --> 00:06:46,960
for questions between then we'll switch

186
00:06:46,960 --> 00:06:51,919
to iot or iot ls uh from taha paracha

187
00:06:51,919 --> 00:06:53,120
um

188
00:06:53,120 --> 00:06:54,000
and

189
00:06:54,000 --> 00:06:57,360
uh and that's a piece of work from imc

190
00:06:57,360 --> 00:06:59,280
obviously about um how the protocols are

191
00:06:59,280 --> 00:07:01,199
actually being used in operation

192
00:07:01,199 --> 00:07:03,120
in this case with iot and then we'll

193
00:07:03,120 --> 00:07:05,120
round out the meeting with kyle mcmillan

194
00:07:05,120 --> 00:07:06,720
bringing us their work on measuring the

195
00:07:06,720 --> 00:07:08,240
performance network utilization of

196
00:07:08,240 --> 00:07:10,720
popular video conferencing application

197
00:07:10,720 --> 00:07:12,000
um

198
00:07:12,000 --> 00:07:14,080
and uh what i can tell you i'm happy

199
00:07:14,080 --> 00:07:15,199
about this meeting today because we've

200
00:07:15,199 --> 00:07:16,560
just got four things and if i stop

201
00:07:16,560 --> 00:07:17,680
talking we'll have we should have

202
00:07:17,680 --> 00:07:19,280
approximately five minutes of comments

203
00:07:19,280 --> 00:07:20,720
for each of them so

204
00:07:20,720 --> 00:07:22,960
uh let's get underway um miria can you

205
00:07:22,960 --> 00:07:25,039
stop sharing that slide i guess i should

206
00:07:25,039 --> 00:07:26,800
call and say is there any is there any

207
00:07:26,800 --> 00:07:28,840
uh any questions or comments at this

208
00:07:28,840 --> 00:07:32,319
point i don't see anyone in the queue

209
00:07:32,319 --> 00:07:33,759
so

210
00:07:33,759 --> 00:07:35,680
so we can bring up the first

211
00:07:35,680 --> 00:07:38,400
presentation uh giovanni can you put

212
00:07:38,400 --> 00:07:41,120
yourself in the queue

213
00:07:41,680 --> 00:07:44,720
all right there you go

214
00:07:44,720 --> 00:07:46,080
and

215
00:07:46,080 --> 00:07:47,360
do you do

216
00:07:47,360 --> 00:07:49,440
do you do you plan 10 or 15 minutes for

217
00:07:49,440 --> 00:07:50,720
your talk

218
00:07:50,720 --> 00:07:53,440
it's perfect uh you folks hear me well

219
00:07:53,440 --> 00:07:55,520
yep yep all right

220
00:07:55,520 --> 00:07:58,400
so thanks dave thanks miriam and so a

221
00:07:58,400 --> 00:08:00,560
good morning evening or afternoon

222
00:08:00,560 --> 00:08:03,199
depending on where you are um so i'm

223
00:08:03,199 --> 00:08:05,199
gonna present here this work we did

224
00:08:05,199 --> 00:08:06,319
together

225
00:08:06,319 --> 00:08:08,319
with folks at internet new zealand and

226
00:08:08,319 --> 00:08:09,680
usc

227
00:08:09,680 --> 00:08:11,199
um

228
00:08:11,199 --> 00:08:13,120
uh was a paper that we presented last

229
00:08:13,120 --> 00:08:15,360
week at imc so if you want to get a full

230
00:08:15,360 --> 00:08:17,440
paper here's the link

231
00:08:17,440 --> 00:08:18,400
um

232
00:08:18,400 --> 00:08:20,800
why actually we actually identify some

233
00:08:20,800 --> 00:08:23,759
issues uh with current rxcs with regards

234
00:08:23,759 --> 00:08:24,840
um

235
00:08:24,840 --> 00:08:26,479
dns

236
00:08:26,479 --> 00:08:29,039
and we wrote a new draft which the link

237
00:08:29,039 --> 00:08:30,720
is also here so we're looking for

238
00:08:30,720 --> 00:08:32,719
feedback with i sent the draft to the

239
00:08:32,719 --> 00:08:34,799
dns uplist last monday but if you are

240
00:08:34,799 --> 00:08:35,919
interested please have a look and

241
00:08:35,919 --> 00:08:38,399
provide some feedback on the list

242
00:08:38,399 --> 00:08:39,599
um

243
00:08:39,599 --> 00:08:42,159
so let's get it started it's name

244
00:08:42,159 --> 00:08:44,320
we all know that the dns is one course

245
00:08:44,320 --> 00:08:46,640
the car services on the internet and you

246
00:08:46,640 --> 00:08:48,480
know that because when it breaks people

247
00:08:48,480 --> 00:08:51,200
do notice and there is this famous mirai

248
00:08:51,200 --> 00:08:53,680
button and attack against dyne a major

249
00:08:53,680 --> 00:08:56,320
dns provider that provide dns services

250
00:08:56,320 --> 00:08:58,560
for netflix qualifying and all and so

251
00:08:58,560 --> 00:08:59,839
forth

252
00:08:59,839 --> 00:09:02,320
and when dyne went partially down in the

253
00:09:02,320 --> 00:09:05,200
u.s and made to the you know

254
00:09:05,200 --> 00:09:07,279
front page of the you know the new york

255
00:09:07,279 --> 00:09:08,880
times you can see here a picture of the

256
00:09:08,880 --> 00:09:10,560
zones in the west were like partially

257
00:09:10,560 --> 00:09:12,480
affected on this picture here

258
00:09:12,480 --> 00:09:14,480
uh so it's a big deal

259
00:09:14,480 --> 00:09:16,000
and

260
00:09:16,000 --> 00:09:18,399
and we talk about dns there are two

261
00:09:18,399 --> 00:09:21,519
major types of servers there is um

262
00:09:21,519 --> 00:09:23,519
if you have a client in this figure here

263
00:09:23,519 --> 00:09:25,440
um the client wants to go let's say to a

264
00:09:25,440 --> 00:09:27,360
domain like wikipedia.org

265
00:09:27,360 --> 00:09:29,600
the client sends a dns query to its

266
00:09:29,600 --> 00:09:31,440
configured with this local resolver

267
00:09:31,440 --> 00:09:33,200
which is configured with and there is

268
00:09:33,200 --> 00:09:34,800
over those sort of the heavy lifting the

269
00:09:34,800 --> 00:09:37,120
resolver is just like trying to find

270
00:09:37,120 --> 00:09:39,200
where this information is it's located

271
00:09:39,200 --> 00:09:41,120
in terms of dns to map the you know the

272
00:09:41,120 --> 00:09:43,120
domain name to ip address and this

273
00:09:43,120 --> 00:09:45,279
information is fetched automatically

274
00:09:45,279 --> 00:09:47,279
from these authoritative servers as you

275
00:09:47,279 --> 00:09:48,480
can see here

276
00:09:48,480 --> 00:09:50,240
and once this information is fetched the

277
00:09:50,240 --> 00:09:51,519
resolver responds to the client the

278
00:09:51,519 --> 00:09:54,080
client can go happily to wikipedia

279
00:09:54,080 --> 00:09:56,080
and surname effects

280
00:09:56,080 --> 00:09:58,880
specifically traffic to authoritative

281
00:09:58,880 --> 00:10:01,440
servers is the resolvers that would kind

282
00:10:01,440 --> 00:10:05,040
of overwhelm uh authoritative servers

283
00:10:05,040 --> 00:10:07,120
and this all happened when we were

284
00:10:07,120 --> 00:10:11,279
working together in a paper for imc 2019

285
00:10:11,279 --> 00:10:14,480
um artillery and there is

286
00:10:14,480 --> 00:10:17,200
2020 actually and this is traffic that

287
00:10:17,200 --> 00:10:19,360
arrives at the authoritative servers of

288
00:10:19,360 --> 00:10:21,680
new zealand and the folks there were

289
00:10:21,680 --> 00:10:23,680
getting you know an average of 750

290
00:10:23,680 --> 00:10:25,600
million daily queries so all the data in

291
00:10:25,600 --> 00:10:27,360
securities that come to them

292
00:10:27,360 --> 00:10:29,360
and but one day to the other they saw

293
00:10:29,360 --> 00:10:30,800
this 50

294
00:10:30,800 --> 00:10:33,040
traffic surge in the traffic and if

295
00:10:33,040 --> 00:10:34,640
you're an operator you know you don't

296
00:10:34,640 --> 00:10:37,120
like such surprises

297
00:10:37,120 --> 00:10:39,680
and that got them concerned obviously

298
00:10:39,680 --> 00:10:42,640
and when they start to dig into the data

299
00:10:42,640 --> 00:10:44,720
they saw the two domains in their zone

300
00:10:44,720 --> 00:10:47,040
basically had no carries before very

301
00:10:47,040 --> 00:10:48,720
little daily currys and out of the

302
00:10:48,720 --> 00:10:50,720
suddenly they start to get like

303
00:10:50,720 --> 00:10:52,959
more than 100 million queries each and

304
00:10:52,959 --> 00:10:55,040
they wonder if that was a deny of serf's

305
00:10:55,040 --> 00:10:56,160
attack

306
00:10:56,160 --> 00:10:58,480
and if that were why

307
00:10:58,480 --> 00:11:01,120
it was actually uh targeted domain names

308
00:11:01,120 --> 00:11:02,800
were not popular at all that does not

309
00:11:02,800 --> 00:11:04,240
make any sense

310
00:11:04,240 --> 00:11:05,800
but it turned out that there was a

311
00:11:05,800 --> 00:11:08,079
misconfiguration in this particular two

312
00:11:08,079 --> 00:11:10,320
domains domain a

313
00:11:10,320 --> 00:11:12,079
was misconfigured with a loop which we

314
00:11:12,079 --> 00:11:14,800
call cyclic dependency domain

315
00:11:14,800 --> 00:11:16,640
a when you try to resolve that would try

316
00:11:16,640 --> 00:11:19,279
to would actually point to domain b but

317
00:11:19,279 --> 00:11:20,880
domain b in turn would point back to

318
00:11:20,880 --> 00:11:22,000
domain a

319
00:11:22,000 --> 00:11:23,760
which would create a loop

320
00:11:23,760 --> 00:11:26,079
in that situation some resolvers when

321
00:11:26,079 --> 00:11:27,600
they find loops or some clients they

322
00:11:27,600 --> 00:11:30,800
start to look and send in non-stop

323
00:11:30,800 --> 00:11:33,200
queries and the effect of that that

324
00:11:33,200 --> 00:11:35,760
overwhelms authoritative servers and

325
00:11:35,760 --> 00:11:37,200
this particular event on new zealand

326
00:11:37,200 --> 00:11:38,880
that was not a major issue for them but

327
00:11:38,880 --> 00:11:40,839
it could be have been

328
00:11:40,839 --> 00:11:42,560
um so

329
00:11:42,560 --> 00:11:44,959
as i said and cycle dependencies is an

330
00:11:44,959 --> 00:11:46,720
error it's a configuration error and one

331
00:11:46,720 --> 00:11:48,480
domain points to let's say category

332
00:11:48,480 --> 00:11:52,959
points to nzc.dog then ask.nz but dog.z

333
00:11:52,959 --> 00:11:55,120
would point back to ns.com and then we

334
00:11:55,120 --> 00:11:59,040
create a look and 1536 describe it uh

335
00:11:59,040 --> 00:12:01,279
this paper papa's 2004 they covered at

336
00:12:01,279 --> 00:12:02,639
the more details

337
00:12:02,639 --> 00:12:03,839
the issue with this domain that can

338
00:12:03,839 --> 00:12:06,240
never be resolved

339
00:12:06,240 --> 00:12:07,519
and what it did in this paper in

340
00:12:07,519 --> 00:12:09,040
particular is to show how this

341
00:12:09,040 --> 00:12:11,600
vulnerability can actually be weaponized

342
00:12:11,600 --> 00:12:14,480
we also provide a tool for dns authority

343
00:12:14,480 --> 00:12:16,480
server operators to get the rid of these

344
00:12:16,480 --> 00:12:18,720
loops in their zones because many times

345
00:12:18,720 --> 00:12:20,320
you're not aware that it exists in their

346
00:12:20,320 --> 00:12:22,880
zones so it's if it's if we provide a

347
00:12:22,880 --> 00:12:24,639
tool that's open source too cycle hunter

348
00:12:24,639 --> 00:12:26,800
they can download and scan their zones

349
00:12:26,800 --> 00:12:28,320
and also identify what's missing in

350
00:12:28,320 --> 00:12:29,920
current rfcs

351
00:12:29,920 --> 00:12:32,320
and we help like them also fixing bugs

352
00:12:32,320 --> 00:12:34,320
we carry out responsible disclosure we

353
00:12:34,320 --> 00:12:35,839
notify first the vendors and the

354
00:12:35,839 --> 00:12:38,480
specific groups and then later carry out

355
00:12:38,480 --> 00:12:41,200
the public disclosure and that cause

356
00:12:41,200 --> 00:12:43,440
that led to google and cisco public

357
00:12:43,440 --> 00:12:45,360
dynastics in their servers which was

358
00:12:45,360 --> 00:12:47,600
we're very happy about that

359
00:12:47,600 --> 00:12:48,560
um

360
00:12:48,560 --> 00:12:50,320
so the but the real threat in this case

361
00:12:50,320 --> 00:12:53,120
of surname is that its weaponization is

362
00:12:53,120 --> 00:12:55,040
that two domain names in the rnz that

363
00:12:55,040 --> 00:12:57,920
had zero basic little traffic cause a

364
00:12:57,920 --> 00:13:02,000
fifty percent total traffic surge

365
00:13:02,000 --> 00:13:04,320
and the threat suits the diversity will

366
00:13:04,320 --> 00:13:06,240
hold many domains and it would be

367
00:13:06,240 --> 00:13:08,240
configured many many domains with the

368
00:13:08,240 --> 00:13:09,200
slopes

369
00:13:09,200 --> 00:13:11,120
and then trigger recursive resolvers

370
00:13:11,120 --> 00:13:13,120
queries from botnet that could

371
00:13:13,120 --> 00:13:14,880
potentially you know

372
00:13:14,880 --> 00:13:17,360
bring down dns providers so we got very

373
00:13:17,360 --> 00:13:18,880
concerned about that

374
00:13:18,880 --> 00:13:19,760
and

375
00:13:19,760 --> 00:13:21,040
in practice

376
00:13:21,040 --> 00:13:22,880
uh the root causes of those loops are

377
00:13:22,880 --> 00:13:24,079
two-fold

378
00:13:24,079 --> 00:13:25,600
the first one is that resolvers

379
00:13:25,600 --> 00:13:27,279
themselves this infinite number one

380
00:13:27,279 --> 00:13:28,639
they're uh

381
00:13:28,639 --> 00:13:30,560
the resolvers when they see the sort of

382
00:13:30,560 --> 00:13:32,320
loops in the dns configurations they

383
00:13:32,320 --> 00:13:34,240
would simply start looping we found like

384
00:13:34,240 --> 00:13:36,560
old versions of windows resolvers doing

385
00:13:36,560 --> 00:13:37,920
just that

386
00:13:37,920 --> 00:13:40,880
um so that's one of the cases but the

387
00:13:40,880 --> 00:13:42,000
other case is that the clients

388
00:13:42,000 --> 00:13:43,600
themselves would start looping they

389
00:13:43,600 --> 00:13:45,440
would stop and send queries non-stop and

390
00:13:45,440 --> 00:13:47,519
that would cause resolvers also to

391
00:13:47,519 --> 00:13:49,839
look and the ultimate effect is on the

392
00:13:49,839 --> 00:13:52,079
targets here this authoritative service

393
00:13:52,079 --> 00:13:54,240
would see the surge in traffic

394
00:13:54,240 --> 00:13:56,639
um the solutions will cover later

395
00:13:56,639 --> 00:13:59,120
and you know people know that loops in

396
00:13:59,120 --> 00:14:01,519
dns are no problem but it isn't that

397
00:14:01,519 --> 00:14:03,839
solved already but they turned out that

398
00:14:03,839 --> 00:14:06,000
rfc 1034 was like the

399
00:14:06,000 --> 00:14:09,199
the first dns rfc it's very vague

400
00:14:09,199 --> 00:14:11,199
about loops they say it resolves just

401
00:14:11,199 --> 00:14:12,880
about the amount of work to avoid

402
00:14:12,880 --> 00:14:14,320
infinite loops

403
00:14:14,320 --> 00:14:17,360
and but not but that would only protect

404
00:14:17,360 --> 00:14:19,839
uh resolvers from overwhelming for the

405
00:14:19,839 --> 00:14:21,440
for the first part of the loop here the

406
00:14:21,440 --> 00:14:23,040
infinite one it was just for bid

407
00:14:23,040 --> 00:14:25,600
resolvers from looping even indefinitely

408
00:14:25,600 --> 00:14:27,279
and overall mean authority the name

409
00:14:27,279 --> 00:14:29,760
servers but does not protect any

410
00:14:29,760 --> 00:14:31,120
amplification from clients that the

411
00:14:31,120 --> 00:14:32,639
clients would send the queries non-stop

412
00:14:32,639 --> 00:14:34,880
to resolvers and then resolvers in turn

413
00:14:34,880 --> 00:14:36,880
would loot themselves for every occurred

414
00:14:36,880 --> 00:14:39,120
that arrives so that does not protect in

415
00:14:39,120 --> 00:14:40,959
this case

416
00:14:40,959 --> 00:14:43,680
1035 recommends to set counters in this

417
00:14:43,680 --> 00:14:44,639
case

418
00:14:44,639 --> 00:14:47,120
to forbid again um

419
00:14:47,120 --> 00:14:49,920
resolvers from uh looping to prevent

420
00:14:49,920 --> 00:14:52,320
resolvers from looping um

421
00:14:52,320 --> 00:14:54,240
but again does not

422
00:14:54,240 --> 00:14:55,760
provide any protection if clients or

423
00:14:55,760 --> 00:14:56,720
forwarders are actually looping

424
00:14:56,720 --> 00:14:58,880
themselves

425
00:14:58,880 --> 00:15:00,880
1536

426
00:15:00,880 --> 00:15:03,120
says that loops can occur again does not

427
00:15:03,120 --> 00:15:06,160
protect from looping clients

428
00:15:06,160 --> 00:15:08,480
so the solution we actually provide in

429
00:15:08,480 --> 00:15:10,240
this paper is that

430
00:15:10,240 --> 00:15:12,079
this is not really uh covering any

431
00:15:12,079 --> 00:15:13,279
servers at the moment which the

432
00:15:13,279 --> 00:15:14,959
resolvers should actually do negative

433
00:15:14,959 --> 00:15:16,880
caching should detect those cycles and

434
00:15:16,880 --> 00:15:19,040
put in their cache so every new client

435
00:15:19,040 --> 00:15:21,519
query can be like responded from cache

436
00:15:21,519 --> 00:15:22,800
and now it does not make it to the

437
00:15:22,800 --> 00:15:25,040
authoritative servers and that minimizes

438
00:15:25,040 --> 00:15:27,040
the both causes of looping here and

439
00:15:27,040 --> 00:15:28,720
that's where our draft comes from here

440
00:15:28,720 --> 00:15:30,959
on the dns hub

441
00:15:30,959 --> 00:15:33,199
and we also in the paper not only

442
00:15:33,199 --> 00:15:35,040
investigate what happened to new zealand

443
00:15:35,040 --> 00:15:36,399
but also we

444
00:15:36,399 --> 00:15:37,759
carry out a bunch of

445
00:15:37,759 --> 00:15:39,920
control experiments in the wild with

446
00:15:39,920 --> 00:15:41,440
using ripe athletes and other vantage

447
00:15:41,440 --> 00:15:44,320
points to that so the most basic

448
00:15:44,320 --> 00:15:46,880
experiment we did we configured ripe

449
00:15:46,880 --> 00:15:47,920
atlas

450
00:15:47,920 --> 00:15:50,800
10 000 probes to send one query only per

451
00:15:50,800 --> 00:15:51,839
probe

452
00:15:51,839 --> 00:15:53,920
um to their local resolvers we wanted

453
00:15:53,920 --> 00:15:56,720
really to determine if we could get that

454
00:15:56,720 --> 00:15:58,320
should if you really one probe wants to

455
00:15:58,320 --> 00:15:59,920
uncur if that would be enough to start

456
00:15:59,920 --> 00:16:02,720
looping and it's kind of the lower bound

457
00:16:02,720 --> 00:16:05,920
um so we did that and in atlas you know

458
00:16:05,920 --> 00:16:08,160
one atlas probe they may be configured

459
00:16:08,160 --> 00:16:10,240
multiple resolvers but the what we

460
00:16:10,240 --> 00:16:12,639
collected it's the traffic arriving the

461
00:16:12,639 --> 00:16:14,720
authoritative servers

462
00:16:14,720 --> 00:16:17,199
and this is the figure you see here

463
00:16:17,199 --> 00:16:20,079
uh on the top figure you see sort of a

464
00:16:20,079 --> 00:16:21,519
spike

465
00:16:21,519 --> 00:16:23,360
in the y-axis we see the number of

466
00:16:23,360 --> 00:16:25,360
queries that arrive the first spike

467
00:16:25,360 --> 00:16:27,279
there you see after two o'clock and when

468
00:16:27,279 --> 00:16:28,560
the normal traffic arrives at the

469
00:16:28,560 --> 00:16:31,199
resolvers we see like more than 150 000

470
00:16:31,199 --> 00:16:32,160
queries

471
00:16:32,160 --> 00:16:34,800
but after that there's no more queries

472
00:16:34,800 --> 00:16:36,800
for an atlas but we're still getting

473
00:16:36,800 --> 00:16:39,440
queries at our 32 servers for hours and

474
00:16:39,440 --> 00:16:41,759
hours and hours and he only stopped when

475
00:16:41,759 --> 00:16:43,759
he turned off the experiment

476
00:16:43,759 --> 00:16:45,839
uh and the re and what happened if you

477
00:16:45,839 --> 00:16:47,199
look at the graph below is that a

478
00:16:47,199 --> 00:16:49,440
portion of the resolvers you see like on

479
00:16:49,440 --> 00:16:52,240
the y-axis here and on the graph below

480
00:16:52,240 --> 00:16:54,480
and the number of resolvers doing that

481
00:16:54,480 --> 00:16:57,800
in this particular experiment 47-7

482
00:16:57,800 --> 00:17:00,639
574 uh actually looked and they came

483
00:17:00,639 --> 00:17:02,880
from 34 autonomous systems

484
00:17:02,880 --> 00:17:05,119
including google and cisco

485
00:17:05,119 --> 00:17:06,559
and the paper have way more complex

486
00:17:06,559 --> 00:17:08,799
scenarios and it gets worse if you make

487
00:17:08,799 --> 00:17:11,119
longer cycles it can make three

488
00:17:11,119 --> 00:17:13,359
fold cycles and so it gets worse and we

489
00:17:13,359 --> 00:17:14,640
have different vantage points so it's a

490
00:17:14,640 --> 00:17:16,720
widespread so that's the first figure

491
00:17:16,720 --> 00:17:18,480
into this newspaper but the second thing

492
00:17:18,480 --> 00:17:20,000
we're interested is not only understand

493
00:17:20,000 --> 00:17:22,480
the phenomena but also prevent it

494
00:17:22,480 --> 00:17:25,039
so we wrote this tool cycle hunter

495
00:17:25,039 --> 00:17:26,880
which you can download here here's the

496
00:17:26,880 --> 00:17:27,760
link

497
00:17:27,760 --> 00:17:30,400
it just gets your zone file gets all the

498
00:17:30,400 --> 00:17:32,080
ns records you have in it that's where

499
00:17:32,080 --> 00:17:34,480
the authority div servers are defined

500
00:17:34,480 --> 00:17:36,640
try to resolve them if they fail they

501
00:17:36,640 --> 00:17:38,320
try to find it they're cyclical or not

502
00:17:38,320 --> 00:17:40,080
and then you have an output

503
00:17:40,080 --> 00:17:42,320
and what we did we

504
00:17:42,320 --> 00:17:44,080
ran cycle hunter

505
00:17:44,080 --> 00:17:45,600
and by the way thanks for all

506
00:17:45,600 --> 00:17:47,120
folks that contributed to the tool later

507
00:17:47,120 --> 00:17:48,799
after disclosure

508
00:17:48,799 --> 00:17:51,280
uh we ran cycle hunter uh against

509
00:17:51,280 --> 00:17:54,160
multiple zones 184 million domains and

510
00:17:54,160 --> 00:17:57,840
we found that only 44 and 1500 domain

511
00:17:57,840 --> 00:18:00,240
names were like affected by that and we

512
00:18:00,240 --> 00:18:02,000
believe it's like human error because if

513
00:18:02,000 --> 00:18:04,080
you have this sort of thing your domain

514
00:18:04,080 --> 00:18:06,240
is not resolvable then if you're really

515
00:18:06,240 --> 00:18:07,679
legitimate use of your domain you're not

516
00:18:07,679 --> 00:18:09,200
interested in that

517
00:18:09,200 --> 00:18:11,520
but you know the

518
00:18:11,520 --> 00:18:12,960
malicious actor could just do

519
00:18:12,960 --> 00:18:16,960
differently and try to weaponize this

520
00:18:16,960 --> 00:18:19,120
and so that's the prevention part and

521
00:18:19,120 --> 00:18:21,280
then we came to the fixing box part we

522
00:18:21,280 --> 00:18:23,360
carry out responsible disclosure

523
00:18:23,360 --> 00:18:26,080
and here's the we started december last

524
00:18:26,080 --> 00:18:28,160
year to do that and we ended up in may

525
00:18:28,160 --> 00:18:30,240
this year with the public disclosure we

526
00:18:30,240 --> 00:18:32,080
talked first to google and then with a

527
00:18:32,080 --> 00:18:33,520
bunch of private groups that had

528
00:18:33,520 --> 00:18:36,559
contacts and including dnsr which which

529
00:18:36,559 --> 00:18:38,720
was the biggest uh iraq 34 was the

530
00:18:38,720 --> 00:18:41,760
biggest group that we disclosed and then

531
00:18:41,760 --> 00:18:44,000
we that calls like google and others and

532
00:18:44,000 --> 00:18:47,039
spoken as in cisco asset effects

533
00:18:47,039 --> 00:18:49,280
and we actually confirmed that google

534
00:18:49,280 --> 00:18:51,200
fixes public dns because we ran

535
00:18:51,200 --> 00:18:54,240
measurements uh before they fixed and

536
00:18:54,240 --> 00:18:55,840
and we repeat the same measurement using

537
00:18:55,840 --> 00:18:57,440
ramp atlas after

538
00:18:57,440 --> 00:18:59,679
and you see here that before in this

539
00:18:59,679 --> 00:19:00,880
particular scenario it's also in the

540
00:19:00,880 --> 00:19:01,840
paper

541
00:19:01,840 --> 00:19:04,000
uh we would get four million more than

542
00:19:04,000 --> 00:19:05,840
four million queries in our traditional

543
00:19:05,840 --> 00:19:07,840
servers but after that it will get like

544
00:19:07,840 --> 00:19:09,919
fewer than uh two hundred 000

545
00:19:09,919 --> 00:19:11,760
so we can really confirm that the google

546
00:19:11,760 --> 00:19:13,520
fix and we see that

547
00:19:13,520 --> 00:19:15,039
they fix that by deploying negative

548
00:19:15,039 --> 00:19:16,480
caching too

549
00:19:16,480 --> 00:19:17,520
um

550
00:19:17,520 --> 00:19:19,679
and after we came forward with the post

551
00:19:19,679 --> 00:19:23,120
with the disclosure and at the work 35

552
00:19:23,120 --> 00:19:25,679
uh i think was like

553
00:19:25,679 --> 00:19:28,080
five or more months and a half after we

554
00:19:28,080 --> 00:19:31,039
started the process of disclosing this

555
00:19:31,039 --> 00:19:32,559
some operators came forward to us and

556
00:19:32,559 --> 00:19:33,840
they said hey your folks are not the

557
00:19:33,840 --> 00:19:36,080
only ones we've seen we have seen that

558
00:19:36,080 --> 00:19:38,640
we saw that ourselves do and one

559
00:19:38,640 --> 00:19:41,200
european-based cctod they were kind

560
00:19:41,200 --> 00:19:44,000
enough to share this graph with us and

561
00:19:44,000 --> 00:19:46,480
you see here when the graph around 17

562
00:19:46,480 --> 00:19:48,480
hours starts to grow it's when two

563
00:19:48,480 --> 00:19:50,160
domains in their zone was were also

564
00:19:50,160 --> 00:19:52,720
misconfigured and their total traffic

565
00:19:52,720 --> 00:19:54,640
increases like 10 times because of two

566
00:19:54,640 --> 00:19:57,120
domain names so each color here shows a

567
00:19:57,120 --> 00:19:59,200
different authoritative name server for

568
00:19:59,200 --> 00:20:02,640
that eu based cctld operator so that's a

569
00:20:02,640 --> 00:20:04,640
big deal and you'll see a draw a sharp

570
00:20:04,640 --> 00:20:06,559
drop later on around 11 a.m the day

571
00:20:06,559 --> 00:20:07,360
after

572
00:20:07,360 --> 00:20:10,000
um when they fixed that manually so

573
00:20:10,000 --> 00:20:11,520
we're not the only ones seeing that in

574
00:20:11,520 --> 00:20:13,120
order to they also came forward during

575
00:20:13,120 --> 00:20:14,960
the work presentations

576
00:20:14,960 --> 00:20:16,400
um

577
00:20:16,400 --> 00:20:18,000
so that's um

578
00:20:18,000 --> 00:20:19,600
the third part of this the third

579
00:20:19,600 --> 00:20:20,960
contribution

580
00:20:20,960 --> 00:20:23,120
and the conclusions is that ns loops are

581
00:20:23,120 --> 00:20:25,200
no problem dns that they have been

582
00:20:25,200 --> 00:20:26,799
specified since they have been talked

583
00:20:26,799 --> 00:20:28,080
about since the original dns

584
00:20:28,080 --> 00:20:29,360
specification

585
00:20:29,360 --> 00:20:31,840
and we showed we must address it now

586
00:20:31,840 --> 00:20:34,799
uh current standards current rfcs do not

587
00:20:34,799 --> 00:20:37,200
cover them and that's why you propose

588
00:20:37,200 --> 00:20:38,799
this new draft

589
00:20:38,799 --> 00:20:41,440
and what to do if your operator you can

590
00:20:41,440 --> 00:20:42,960
run cycle hunter if you run your

591
00:20:42,960 --> 00:20:44,559
automated servers try to find those

592
00:20:44,559 --> 00:20:46,320
loops in amazon and if you're a

593
00:20:46,320 --> 00:20:48,080
developer of resolvers you should we

594
00:20:48,080 --> 00:20:49,840
recommend they would just do what's in

595
00:20:49,840 --> 00:20:51,520
it with what's in the draft like

596
00:20:51,520 --> 00:20:53,440
negative caching uploads

597
00:20:53,440 --> 00:20:57,120
and with that i think it opens questions

598
00:20:58,559 --> 00:21:00,799
uh we have two people in the queue and

599
00:21:00,799 --> 00:21:02,480
we've got a couple of minutes for their

600
00:21:02,480 --> 00:21:06,000
questions or comments so first let's uh

601
00:21:06,000 --> 00:21:09,840
take jonathan hoyland

602
00:21:10,720 --> 00:21:13,600
hi uh jonathan hoyland cloudflare

603
00:21:13,600 --> 00:21:16,720
um i'm interested have you seen

604
00:21:16,720 --> 00:21:18,720
uh g root or groot

605
00:21:18,720 --> 00:21:21,200
by the microsoft research people

606
00:21:21,200 --> 00:21:23,360
um they have uh

607
00:21:23,360 --> 00:21:25,760
they also do cycle hunting in dns and i

608
00:21:25,760 --> 00:21:27,440
was wondering if your tool is

609
00:21:27,440 --> 00:21:29,039
different the same

610
00:21:29,039 --> 00:21:30,720
solves the same problem

611
00:21:30,720 --> 00:21:32,720
i i haven't seen that one no i have not

612
00:21:32,720 --> 00:21:34,480
seen if you could share a link you could

613
00:21:34,480 --> 00:21:37,200
have a look at that in time yeah

614
00:21:37,200 --> 00:21:39,600
well not aware of it

615
00:21:39,600 --> 00:21:41,200
but thanks for sharing

616
00:21:41,200 --> 00:21:42,720
all right thanks jonathan

617
00:21:42,720 --> 00:21:46,640
up next we have daniel gilmore

618
00:21:49,280 --> 00:21:52,158
daniel are you there

619
00:21:55,840 --> 00:21:57,360
okay danielle you're at the top of the

620
00:21:57,360 --> 00:22:00,719
cube but i'm not hearing you

621
00:22:01,039 --> 00:22:03,360
uh do you want to put your question in

622
00:22:03,360 --> 00:22:07,039
in the chat and then you'll delay it

623
00:22:07,760 --> 00:22:09,840
oh i think daniel just wrote the

624
00:22:09,840 --> 00:22:12,080
question there

625
00:22:12,080 --> 00:22:14,880
uh i see him in the chat yeah i'm trying

626
00:22:14,880 --> 00:22:18,080
yeah oh now we can hear you go ahead

627
00:22:18,080 --> 00:22:19,360
uh i was just hoping you could say a

628
00:22:19,360 --> 00:22:20,640
little bit more about looping it's not

629
00:22:20,640 --> 00:22:22,480
about leaving the cursors

630
00:22:22,480 --> 00:22:26,720
what sort of clients were looping um

631
00:22:32,799 --> 00:22:35,440
so our vantage point was like we we used

632
00:22:35,440 --> 00:22:37,520
rap atlas and they created whatever the

633
00:22:37,520 --> 00:22:39,200
resolvers they had

634
00:22:39,200 --> 00:22:40,799
but it would also collect traffic and

635
00:22:40,799 --> 00:22:42,799
authoritative servers but there's a lot

636
00:22:42,799 --> 00:22:44,320
of things that come in between both of

637
00:22:44,320 --> 00:22:45,120
them

638
00:22:45,120 --> 00:22:46,159
uh

639
00:22:46,159 --> 00:22:49,120
what we could find specifically it's on

640
00:22:49,120 --> 00:22:51,360
the paper like two versions of the an

641
00:22:51,360 --> 00:22:54,159
old version of powerdns from 2014 was

642
00:22:54,159 --> 00:22:57,120
looping uh an old version of microsoft

643
00:22:57,120 --> 00:22:59,679
dns server from 2008 was looping we know

644
00:22:59,679 --> 00:23:00,400
that

645
00:23:00,400 --> 00:23:02,799
also that the clients that google which

646
00:23:02,799 --> 00:23:04,240
was the major responsible for the

647
00:23:04,240 --> 00:23:06,720
traffic and all the experiments we did

648
00:23:06,720 --> 00:23:09,520
google pump dns did not look so the only

649
00:23:09,520 --> 00:23:11,039
uh we talked that we worked with the

650
00:23:11,039 --> 00:23:12,640
operators on that

651
00:23:12,640 --> 00:23:14,559
so the only reason that could have been

652
00:23:14,559 --> 00:23:15,840
this could be happening is the client

653
00:23:15,840 --> 00:23:18,080
from google downstream they would before

654
00:23:18,080 --> 00:23:19,679
the fix they would be sending queries

655
00:23:19,679 --> 00:23:21,919
one after the order and every query

656
00:23:21,919 --> 00:23:23,840
would trigger let's say 10 new currents

657
00:23:23,840 --> 00:23:26,159
in our authoritative name servers but i

658
00:23:26,159 --> 00:23:27,840
don't know which clients were looping i

659
00:23:27,840 --> 00:23:29,440
i haven't looked specifically to that

660
00:23:29,440 --> 00:23:30,720
because my client my vantage points

661
00:23:30,720 --> 00:23:31,919
didn't allow me to see that

662
00:23:31,919 --> 00:23:33,360
unfortunately

663
00:23:33,360 --> 00:23:34,960
but at least two resolvers we could

664
00:23:34,960 --> 00:23:37,520
confirm that were old versions they were

665
00:23:37,520 --> 00:23:39,840
open

666
00:23:40,080 --> 00:23:40,880
and

667
00:23:40,880 --> 00:23:43,039
i think there's a does that answer your

668
00:23:43,039 --> 00:23:45,279
question

669
00:23:48,480 --> 00:23:50,080
i think let's assume that it does i

670
00:23:50,080 --> 00:23:51,120
think there's a little bit of audio

671
00:23:51,120 --> 00:23:52,960
trouble there and we're at time thanks

672
00:23:52,960 --> 00:23:55,520
so much giovanni um for bringing that

673
00:23:55,520 --> 00:23:58,159
work to us super cool uh i especially

674
00:23:58,159 --> 00:24:00,000
like the cycle hunter tool so people can

675
00:24:00,000 --> 00:24:02,320
see if they have the problem

676
00:24:02,320 --> 00:24:03,679
all right so up next we have nicholas

677
00:24:03,679 --> 00:24:05,039
nicholas can you put yourself in the

678
00:24:05,039 --> 00:24:08,559
queue to share your slides there you go

679
00:24:09,039 --> 00:24:11,440
all right

680
00:24:12,640 --> 00:24:14,320
there you go take it away nicholas uh

681
00:24:14,320 --> 00:24:16,159
you've got 10 minutes

682
00:24:16,159 --> 00:24:17,200
okay

683
00:24:17,200 --> 00:24:19,440
uh hello everyone uh so my name is

684
00:24:19,440 --> 00:24:21,279
nicholas and i'm presenting this work on

685
00:24:21,279 --> 00:24:22,480
the behalf of

686
00:24:22,480 --> 00:24:25,600
colleague of mine from varis

687
00:24:25,600 --> 00:24:28,960
this study came because we are all with

688
00:24:28,960 --> 00:24:30,880
all the pandemic that occurred we are

689
00:24:30,880 --> 00:24:33,520
all using vpns and

690
00:24:33,520 --> 00:24:35,760
we have measurements showing that when

691
00:24:35,760 --> 00:24:37,600
you use a vpn solution and you have

692
00:24:37,600 --> 00:24:39,120
satcom access

693
00:24:39,120 --> 00:24:41,600
things can be very bad so we wanted to

694
00:24:41,600 --> 00:24:42,720
do some

695
00:24:42,720 --> 00:24:45,840
work on an experiment wide experiments

696
00:24:45,840 --> 00:24:46,799
on

697
00:24:46,799 --> 00:24:49,360
trying to find what is the best vpn

698
00:24:49,360 --> 00:24:51,840
solutions for different circumstances

699
00:24:51,840 --> 00:24:53,039
and

700
00:24:53,039 --> 00:24:55,360
we have an archive paper showing lots of

701
00:24:55,360 --> 00:24:57,279
results

702
00:24:57,279 --> 00:24:58,480
so

703
00:24:58,480 --> 00:25:00,960
as i said we have all been working from

704
00:25:00,960 --> 00:25:03,600
home recently uh also enterprises

705
00:25:03,600 --> 00:25:07,200
networks need to interconnect their um

706
00:25:07,200 --> 00:25:09,840
for their different components and uh

707
00:25:09,840 --> 00:25:13,520
this comes with increased security needs

708
00:25:13,520 --> 00:25:15,840
and vpns are usually deployed in these

709
00:25:15,840 --> 00:25:19,039
schemes so i guess lots of us know what

710
00:25:19,039 --> 00:25:20,559
vpns are

711
00:25:20,559 --> 00:25:22,880
but the devil is in the details and and

712
00:25:22,880 --> 00:25:25,200
there are a lot of different solutions

713
00:25:25,200 --> 00:25:26,720
on

714
00:25:26,720 --> 00:25:29,840
here so we have been testing wire guard

715
00:25:29,840 --> 00:25:32,400
that is an ip6 solution but also

716
00:25:32,400 --> 00:25:34,559
comparing it with open vpn

717
00:25:34,559 --> 00:25:38,559
on top of udp and tcp

718
00:25:38,720 --> 00:25:41,600
dave told me that everyone is not always

719
00:25:41,600 --> 00:25:44,000
aware of what we do in satcom system but

720
00:25:44,000 --> 00:25:45,840
we are not the only ones

721
00:25:45,840 --> 00:25:48,480
we usually deploy tcp proxy

722
00:25:48,480 --> 00:25:50,320
so basically

723
00:25:50,320 --> 00:25:53,679
we have two components intercepting the

724
00:25:53,679 --> 00:25:57,279
triple check messages from tcp to have

725
00:25:57,279 --> 00:25:58,960
in the end three different tcp

726
00:25:58,960 --> 00:26:01,279
connections uh we do not do that because

727
00:26:01,279 --> 00:26:03,279
we like to break the in

728
00:26:03,279 --> 00:26:06,080
to end principle um we do that because

729
00:26:06,080 --> 00:26:10,720
it has a lot of interest and it is to

730
00:26:11,279 --> 00:26:13,039
answer to the specificities of the

731
00:26:13,039 --> 00:26:14,320
satellite links

732
00:26:14,320 --> 00:26:15,679
in short uh

733
00:26:15,679 --> 00:26:17,440
we have issues in connection

734
00:26:17,440 --> 00:26:20,400
initialization we can have lots of tuned

735
00:26:20,400 --> 00:26:21,360
specific

736
00:26:21,360 --> 00:26:23,840
initial windows in tcp pep

737
00:26:23,840 --> 00:26:25,520
sometimes

738
00:26:25,520 --> 00:26:27,600
the end-to-end buffers are not in

739
00:26:27,600 --> 00:26:30,799
adequation with the very high bdp that

740
00:26:30,799 --> 00:26:32,960
we have on satellite systems so we can

741
00:26:32,960 --> 00:26:34,960
have custom

742
00:26:34,960 --> 00:26:36,159
buffers

743
00:26:36,159 --> 00:26:37,440
also

744
00:26:37,440 --> 00:26:39,600
splitting the reliability in three

745
00:26:39,600 --> 00:26:42,960
subsystems abs helps a lot

746
00:26:42,960 --> 00:26:44,559
loss recovery is splitted in three

747
00:26:44,559 --> 00:26:47,600
segments and not really end to end on

748
00:26:47,600 --> 00:26:50,320
with a very large rtt

749
00:26:50,320 --> 00:26:51,279
and

750
00:26:51,279 --> 00:26:52,480
last but not least

751
00:26:52,480 --> 00:26:54,000
um

752
00:26:54,000 --> 00:26:55,200
when you are

753
00:26:55,200 --> 00:26:57,120
when you know your system and you know

754
00:26:57,120 --> 00:26:59,039
the condition status of it and then you

755
00:26:59,039 --> 00:27:00,559
can actually

756
00:27:00,559 --> 00:27:02,880
very quickly

757
00:27:02,880 --> 00:27:04,799
increase the

758
00:27:04,799 --> 00:27:07,360
rate at which you transmit data and so

759
00:27:07,360 --> 00:27:08,480
you have

760
00:27:08,480 --> 00:27:10,640
very homemade condition controls that

761
00:27:10,640 --> 00:27:12,880
are possible in these components

762
00:27:12,880 --> 00:27:16,159
also we we do that because basically

763
00:27:16,159 --> 00:27:19,120
here is just a basic example on

764
00:27:19,120 --> 00:27:21,200
you know showing the pager in time

765
00:27:21,200 --> 00:27:22,240
without

766
00:27:22,240 --> 00:27:23,440
with different

767
00:27:23,440 --> 00:27:25,760
initial windows of tcp and the pep and

768
00:27:25,760 --> 00:27:28,799
we can see that with tcp proxies even if

769
00:27:28,799 --> 00:27:30,640
we just speed the

770
00:27:30,640 --> 00:27:34,080
the connections in three we can have the

771
00:27:34,080 --> 00:27:36,720
page loading time

772
00:27:36,720 --> 00:27:39,200
that being said um

773
00:27:39,200 --> 00:27:40,480
if we look at an

774
00:27:40,480 --> 00:27:43,520
um let's say an enterprise network

775
00:27:43,520 --> 00:27:46,240
and using a satellite network

776
00:27:46,240 --> 00:27:49,360
we have end-to-end the server in the pc

777
00:27:49,360 --> 00:27:52,880
and we may have a pop um a satellite

778
00:27:52,880 --> 00:27:55,440
gateway that a terminal and an access

779
00:27:55,440 --> 00:27:57,279
box

780
00:27:57,279 --> 00:27:59,039
the pep can either be

781
00:27:59,039 --> 00:28:00,399
in

782
00:28:00,399 --> 00:28:03,200
or out of the vpn tunnel

783
00:28:03,200 --> 00:28:05,279
and basically

784
00:28:05,279 --> 00:28:07,760
we have seen deployments where

785
00:28:07,760 --> 00:28:10,559
a lot of configurations are possible

786
00:28:10,559 --> 00:28:14,240
so i can put my vp pap within my vpn

787
00:28:14,240 --> 00:28:16,640
tunnel out of my vpn tunnel i can have

788
00:28:16,640 --> 00:28:19,600
lots of vpn solutions so

789
00:28:19,600 --> 00:28:21,440
i can sometimes choose my connection

790
00:28:21,440 --> 00:28:23,760
control sometimes i cannot

791
00:28:23,760 --> 00:28:25,039
so basically

792
00:28:25,039 --> 00:28:28,879
that is the main rationale of this study

793
00:28:29,600 --> 00:28:31,440
we have tested it over a lot of

794
00:28:31,440 --> 00:28:35,520
configurations and uh on for to emulate

795
00:28:35,520 --> 00:28:38,720
satcom systems which are uh or geo-based

796
00:28:38,720 --> 00:28:39,440
or

797
00:28:39,440 --> 00:28:41,120
for geosynchronous

798
00:28:41,120 --> 00:28:42,320
systems or

799
00:28:42,320 --> 00:28:43,520
leo

800
00:28:43,520 --> 00:28:47,279
we have sometimes usually on jio systems

801
00:28:47,279 --> 00:28:50,640
you have no losses uh that being said um

802
00:28:50,640 --> 00:28:52,799
sometimes when you rent

803
00:28:52,799 --> 00:28:55,440
a subconscious access you may end up

804
00:28:55,440 --> 00:28:57,039
having losses you don't know whether

805
00:28:57,039 --> 00:28:58,720
there are transmission losses congestion

806
00:28:58,720 --> 00:29:00,240
losses but you can measure lots of

807
00:29:00,240 --> 00:29:02,159
losses on the system

808
00:29:02,159 --> 00:29:03,760
um

809
00:29:03,760 --> 00:29:06,320
and then we have tested cubic cubic

810
00:29:06,320 --> 00:29:10,159
without ice bridge lost start and br v2

811
00:29:10,159 --> 00:29:11,679
we have tested

812
00:29:11,679 --> 00:29:14,240
initial conditional windows um and so

813
00:29:14,240 --> 00:29:17,039
three different vpn solutions and um

814
00:29:17,039 --> 00:29:18,240
basically

815
00:29:18,240 --> 00:29:21,360
um the results are for the case where we

816
00:29:21,360 --> 00:29:23,120
don't have any losses so basically here

817
00:29:23,120 --> 00:29:28,959
i show the transfer time of 30 megabytes

818
00:29:29,200 --> 00:29:31,600
and i will just point to different

819
00:29:31,600 --> 00:29:34,959
results basically

820
00:29:35,039 --> 00:29:37,120
we have measured that

821
00:29:37,120 --> 00:29:39,200
when we use

822
00:29:39,200 --> 00:29:43,039
vpn tcp and that and there is a pep uh

823
00:29:43,039 --> 00:29:44,640
within the tunnel

824
00:29:44,640 --> 00:29:47,200
we have very bad performances uh we

825
00:29:47,200 --> 00:29:49,120
guess this is because we have some sort

826
00:29:49,120 --> 00:29:52,159
of a tcp in tcp issue and

827
00:29:52,159 --> 00:29:56,080
that end up with even bbr v2 exhibit uh

828
00:29:56,080 --> 00:29:58,559
exhibiting a downline time of up to

829
00:29:58,559 --> 00:30:00,960
40 seconds um

830
00:30:00,960 --> 00:30:03,760
in this configuration when we use just

831
00:30:03,760 --> 00:30:05,120
um

832
00:30:05,120 --> 00:30:07,120
for the pep in position b

833
00:30:07,120 --> 00:30:09,039
for the green circle

834
00:30:09,039 --> 00:30:11,120
so the pep is outside of the vpn tunnel

835
00:30:11,120 --> 00:30:14,000
and the vpn wire guard is just an ipc ap

836
00:30:14,000 --> 00:30:14,960
sec

837
00:30:14,960 --> 00:30:16,720
tunneling

838
00:30:16,720 --> 00:30:18,480
that ends up providing the best

839
00:30:18,480 --> 00:30:20,240
performances

840
00:30:20,240 --> 00:30:22,640
anyway a vpn

841
00:30:22,640 --> 00:30:23,520
on

842
00:30:23,520 --> 00:30:27,279
udp and without or without pep and

843
00:30:27,279 --> 00:30:28,399
basically

844
00:30:28,399 --> 00:30:30,159
the orange circles

845
00:30:30,159 --> 00:30:32,000
we have lots of cases where we have very

846
00:30:32,000 --> 00:30:35,120
fair and good performances

847
00:30:35,120 --> 00:30:37,200
in summary i thought we'd have summary

848
00:30:37,200 --> 00:30:39,200
of the results later on

849
00:30:39,200 --> 00:30:41,600
um

850
00:30:42,240 --> 00:30:45,120
when we have losses uh things are very

851
00:30:45,120 --> 00:30:47,360
getting very uh as we could have

852
00:30:47,360 --> 00:30:50,080
expected basically a cubic

853
00:30:50,080 --> 00:30:52,000
is very sensitive to losses on the

854
00:30:52,000 --> 00:30:56,399
network while bbr v2 is not um

855
00:30:56,399 --> 00:30:58,159
bbrv2

856
00:30:58,159 --> 00:30:59,919
ended up providing very good

857
00:30:59,919 --> 00:31:01,840
performances in terms of downloading

858
00:31:01,840 --> 00:31:04,080
time and using it helps a lot in these

859
00:31:04,080 --> 00:31:05,120
cases

860
00:31:05,120 --> 00:31:06,399
and

861
00:31:06,399 --> 00:31:07,919
when

862
00:31:07,919 --> 00:31:08,720
so

863
00:31:08,720 --> 00:31:10,480
when um

864
00:31:10,480 --> 00:31:13,840
we cannot use bb rv2 and we are we have

865
00:31:13,840 --> 00:31:17,679
to stick with cubic we can see that

866
00:31:17,679 --> 00:31:20,320
it is better to actually face the tcp

867
00:31:20,320 --> 00:31:23,840
and tcp problem but have a

868
00:31:23,840 --> 00:31:24,880
proxy

869
00:31:24,880 --> 00:31:25,760
and

870
00:31:25,760 --> 00:31:28,159
and assuming and vpn solution based on

871
00:31:28,159 --> 00:31:30,840
tcp so that the proxy can somehow

872
00:31:30,840 --> 00:31:34,000
help and

873
00:31:34,880 --> 00:31:36,000
so

874
00:31:36,000 --> 00:31:38,399
what we have measured in our short

875
00:31:38,399 --> 00:31:41,919
technical report um that you think we

876
00:31:41,919 --> 00:31:43,120
are god

877
00:31:43,120 --> 00:31:47,600
is very interesting um and

878
00:31:47,600 --> 00:31:49,440
basically we have more or less the same

879
00:31:49,440 --> 00:31:51,919
performances with qb and bbrv2 when we

880
00:31:51,919 --> 00:31:53,760
don't have losses when we have losses in

881
00:31:53,760 --> 00:31:56,559
the systems and that you don't manage uh

882
00:31:56,559 --> 00:32:00,880
actually activating bbrv2 helps a lot

883
00:32:00,880 --> 00:32:03,919
when you cannot turned on

884
00:32:03,919 --> 00:32:05,600
vbrv2

885
00:32:05,600 --> 00:32:07,360
we have measured that the damages can be

886
00:32:07,360 --> 00:32:11,600
reduced when you use the pnvp and tcp

887
00:32:11,600 --> 00:32:14,480
also we wanted to mention that

888
00:32:14,480 --> 00:32:16,480
in this short technical

889
00:32:16,480 --> 00:32:17,519
study

890
00:32:17,519 --> 00:32:20,799
we have emulated losses on the satellite

891
00:32:20,799 --> 00:32:22,880
network

892
00:32:22,880 --> 00:32:25,679
sometimes when losses are on the local

893
00:32:25,679 --> 00:32:27,919
network the pep can help much more

894
00:32:27,919 --> 00:32:30,480
because this the recovery process

895
00:32:30,480 --> 00:32:31,679
doesn't is not

896
00:32:31,679 --> 00:32:32,559
uh

897
00:32:32,559 --> 00:32:36,640
i am occurring on the large delay path

898
00:32:36,640 --> 00:32:38,559
and

899
00:32:38,559 --> 00:32:41,200
so basically

900
00:32:41,600 --> 00:32:44,320
we we we we have to admit that in this

901
00:32:44,320 --> 00:32:45,919
case that we have considered the pep

902
00:32:45,919 --> 00:32:47,679
cannot really help the risk of lost

903
00:32:47,679 --> 00:32:49,679
recovery process but um

904
00:32:49,679 --> 00:32:52,000
that is what we sometimes face in

905
00:32:52,000 --> 00:32:54,480
deployments where we actually

906
00:32:54,480 --> 00:32:56,640
cannot guarantee your loss free satcom

907
00:32:56,640 --> 00:32:58,799
system

908
00:32:58,799 --> 00:33:00,000
so

909
00:33:00,000 --> 00:33:02,080
we have recently published an archive

910
00:33:02,080 --> 00:33:05,840
paper and sent a link to the list

911
00:33:05,840 --> 00:33:08,880
and basically on top of what we have

912
00:33:08,880 --> 00:33:12,320
shown here in the paper we have also

913
00:33:12,320 --> 00:33:14,399
mentioned the conclusions we had when we

914
00:33:14,399 --> 00:33:17,039
tried to introduce um

915
00:33:17,039 --> 00:33:18,399
congestion and

916
00:33:18,399 --> 00:33:20,399
when baby rv2 is not alone to see if

917
00:33:20,399 --> 00:33:23,519
there are any fairness issues and

918
00:33:23,519 --> 00:33:25,360
in a nutshell

919
00:33:25,360 --> 00:33:27,600
we don't have much fairness issues with

920
00:33:27,600 --> 00:33:30,159
rv2 in our experiments so thank you all

921
00:33:30,159 --> 00:33:31,360
for and

922
00:33:31,360 --> 00:33:33,120
for listening and thank you very much

923
00:33:33,120 --> 00:33:35,279
for my prg to

924
00:33:35,279 --> 00:33:36,840
give me the opportunity to present this

925
00:33:36,840 --> 00:33:40,240
result hi nicholas this is this is dave

926
00:33:40,240 --> 00:33:42,399
um i i wanted to relay a couple of

927
00:33:42,399 --> 00:33:44,240
questions of basic questions that maybe

928
00:33:44,240 --> 00:33:45,679
i should interrupt you for can you go

929
00:33:45,679 --> 00:33:48,159
back to your slide with the results

930
00:33:48,159 --> 00:33:49,760
the questions were just about were these

931
00:33:49,760 --> 00:33:51,679
numbers

932
00:33:51,679 --> 00:33:54,080
total times the completion for the 30

933
00:33:54,080 --> 00:33:56,640
megabytes 30 make by transfer okay so

934
00:33:56,640 --> 00:33:58,480
it's time to completion instead of some

935
00:33:58,480 --> 00:33:59,919
latency measure

936
00:33:59,919 --> 00:34:02,640
uh okay uh

937
00:34:02,640 --> 00:34:04,240
yeah that was there's a there's a little

938
00:34:04,240 --> 00:34:05,519
more discussion in the chat that you

939
00:34:05,519 --> 00:34:07,679
might want to check on afterwards to see

940
00:34:07,679 --> 00:34:09,040
okay

941
00:34:09,040 --> 00:34:11,040
and anyone else with the question or

942
00:34:11,040 --> 00:34:13,280
comment for nicholas okay tommy paulie's

943
00:34:13,280 --> 00:34:15,440
in we'll take tommy's and then uh we'll

944
00:34:15,440 --> 00:34:16,560
switch to

945
00:34:16,560 --> 00:34:20,960
the next presentation so tommy go ahead

946
00:34:20,960 --> 00:34:22,239
we can see you

947
00:34:22,239 --> 00:34:24,399
yep great yeah thank you uh so much for

948
00:34:24,399 --> 00:34:26,159
sharing this uh definitely interesting

949
00:34:26,159 --> 00:34:29,679
to see your results um

950
00:34:29,760 --> 00:34:31,119
one thing i

951
00:34:31,119 --> 00:34:34,960
i'd love to see more work on

952
00:34:34,960 --> 00:34:36,399
if you're able to do more experiments

953
00:34:36,399 --> 00:34:38,879
with different types of configurations

954
00:34:38,879 --> 00:34:39,839
is

955
00:34:39,839 --> 00:34:42,159
you know what can happen if rather than

956
00:34:42,159 --> 00:34:43,119
using

957
00:34:43,119 --> 00:34:45,359
vpn and tcp proxies here we could look

958
00:34:45,359 --> 00:34:48,960
at using quick base proxies so within

959
00:34:48,960 --> 00:34:50,239
mask

960
00:34:50,239 --> 00:34:52,239
working group we're using quick based

961
00:34:52,239 --> 00:34:53,839
proxies and those are able to send both

962
00:34:53,839 --> 00:34:57,040
reliable and unreliable data

963
00:34:57,040 --> 00:34:59,520
i've been working on a project at apple

964
00:34:59,520 --> 00:35:01,520
to use multi-hop

965
00:35:01,520 --> 00:35:03,440
quick proxies for our service called

966
00:35:03,440 --> 00:35:04,800
private relay which is kind of like a

967
00:35:04,800 --> 00:35:07,280
vpn but it's using these proxies so i

968
00:35:07,280 --> 00:35:08,960
think it'd be interesting

969
00:35:08,960 --> 00:35:10,480
to try to see you know rather than

970
00:35:10,480 --> 00:35:12,880
having to choose between okay i'm doing

971
00:35:12,880 --> 00:35:15,200
a tcp solution here with a pap or udp

972
00:35:15,200 --> 00:35:16,720
solution with a pep if we have an

973
00:35:16,720 --> 00:35:18,800
ecosystem of quick proxies could we

974
00:35:18,800 --> 00:35:21,359
maybe get the best of both worlds across

975
00:35:21,359 --> 00:35:25,359
the no loss and lost scenarios

976
00:35:27,520 --> 00:35:29,599
to be honest

977
00:35:29,599 --> 00:35:31,119
we

978
00:35:31,119 --> 00:35:32,960
are very interested in deploying

979
00:35:32,960 --> 00:35:35,760
mask-like proxies in this kind of

980
00:35:35,760 --> 00:35:39,280
systems and because we didn't have

981
00:35:39,280 --> 00:35:40,800
running code for that

982
00:35:40,800 --> 00:35:43,040
we used what was available and

983
00:35:43,040 --> 00:35:45,119
we think that sometimes when we use the

984
00:35:45,119 --> 00:35:48,320
open vpn udp somehow even if it doesn't

985
00:35:48,320 --> 00:35:51,599
include a question control that mask

986
00:35:51,599 --> 00:35:54,000
would proxy will have uh we can still

987
00:35:54,000 --> 00:35:55,839
have some trend of the results we could

988
00:35:55,839 --> 00:35:59,760
observe um but then indeed we are very

989
00:35:59,760 --> 00:36:01,440
interested in going further i think it's

990
00:36:01,440 --> 00:36:03,440
very important for this kind of systems

991
00:36:03,440 --> 00:36:06,320
to look at mask proxies and what is

992
00:36:06,320 --> 00:36:07,599
possible

993
00:36:07,599 --> 00:36:09,359
we are all right thanks tommy and

994
00:36:09,359 --> 00:36:11,599
nicholas we're gonna spin up the next

995
00:36:11,599 --> 00:36:12,880
presentation

996
00:36:12,880 --> 00:36:15,839
thanks again for joining us

997
00:36:17,920 --> 00:36:20,400
all right we can see you

998
00:36:20,400 --> 00:36:23,280
uh and uh now i should be able to see my

999
00:36:23,280 --> 00:36:25,520
screen okay yep there you go i'll let

1000
00:36:25,520 --> 00:36:27,280
you know in 10 minutes

1001
00:36:27,280 --> 00:36:29,359
that sounds good okay so hello everyone

1002
00:36:29,359 --> 00:36:31,280
i'm talha i'm a phd student at

1003
00:36:31,280 --> 00:36:33,680
northeastern university and this work is

1004
00:36:33,680 --> 00:36:36,320
about tls usage and iot devices and was

1005
00:36:36,320 --> 00:36:38,800
published at imc last week it's done in

1006
00:36:38,800 --> 00:36:40,960
joint collaboration with daniel narcio

1007
00:36:40,960 --> 00:36:42,160
and dave

1008
00:36:42,160 --> 00:36:43,920
uh so as many of us know internet of

1009
00:36:43,920 --> 00:36:45,920
things devices such as smart tvs and

1010
00:36:45,920 --> 00:36:48,240
voice assistants are very popular and

1011
00:36:48,240 --> 00:36:50,480
are expected to become ubiquitous

1012
00:36:50,480 --> 00:36:52,640
um invasive nature of these devices

1013
00:36:52,640 --> 00:36:55,119
raises significant privacy implications

1014
00:36:55,119 --> 00:36:57,040
for example some of these privacy issues

1015
00:36:57,040 --> 00:36:58,800
in the past have been found in baby

1016
00:36:58,800 --> 00:37:01,680
monitors voice assistants and even

1017
00:37:01,680 --> 00:37:03,520
biomedical devices

1018
00:37:03,520 --> 00:37:05,280
in addition compromises in device

1019
00:37:05,280 --> 00:37:06,880
security can also lead to severe

1020
00:37:06,880 --> 00:37:10,160
outcomes for example in the past there

1021
00:37:10,160 --> 00:37:12,320
have been internet outages credentials

1022
00:37:12,320 --> 00:37:15,599
leaks and even vehicle hijacks

1023
00:37:15,599 --> 00:37:17,359
one of the ways to improve iot privacy

1024
00:37:17,359 --> 00:37:19,040
and security is to protect the network

1025
00:37:19,040 --> 00:37:21,520
communications from iot devices our

1026
00:37:21,520 --> 00:37:23,119
prior research shows that iot

1027
00:37:23,119 --> 00:37:25,760
manufacturers mainly rely on tls to do

1028
00:37:25,760 --> 00:37:26,720
so

1029
00:37:26,720 --> 00:37:28,800
now tls is the de facto web security

1030
00:37:28,800 --> 00:37:31,200
protocol that provides confidentiality

1031
00:37:31,200 --> 00:37:33,599
authenticity and data integrity to

1032
00:37:33,599 --> 00:37:35,520
network connections

1033
00:37:35,520 --> 00:37:36,880
um

1034
00:37:36,880 --> 00:37:38,400
nicholas i just want to briefly say that

1035
00:37:38,400 --> 00:37:40,079
your mic is on

1036
00:37:40,079 --> 00:37:41,680
in case you forgot

1037
00:37:41,680 --> 00:37:42,480
okay

1038
00:37:42,480 --> 00:37:45,200
but to use tls properly we need a client

1039
00:37:45,200 --> 00:37:47,599
needs to use secure protocol version and

1040
00:37:47,599 --> 00:37:49,920
features it needs to properly validate

1041
00:37:49,920 --> 00:37:52,240
certificate chains and it needs to adopt

1042
00:37:52,240 --> 00:37:54,240
new features as the protocol evolves

1043
00:37:54,240 --> 00:37:55,839
over time

1044
00:37:55,839 --> 00:37:57,359
now tls usage has been studied

1045
00:37:57,359 --> 00:37:59,280
rigorously in various platforms such as

1046
00:37:59,280 --> 00:38:01,040
web browsers and mobile operating

1047
00:38:01,040 --> 00:38:03,440
systems but little is known about tls

1048
00:38:03,440 --> 00:38:05,359
usage in iot devices

1049
00:38:05,359 --> 00:38:07,599
hence the main objective behind our work

1050
00:38:07,599 --> 00:38:10,079
was to study how effectively iot devices

1051
00:38:10,079 --> 00:38:11,440
use tls

1052
00:38:11,440 --> 00:38:12,720
however there were a couple of

1053
00:38:12,720 --> 00:38:14,480
challenges that we needed to circumvent

1054
00:38:14,480 --> 00:38:17,440
first for example iot devices provide

1055
00:38:17,440 --> 00:38:19,760
limited ways to trigger traffic in order

1056
00:38:19,760 --> 00:38:21,520
to interact with the devices one needs

1057
00:38:21,520 --> 00:38:23,680
one typically needs to plug them with a

1058
00:38:23,680 --> 00:38:26,160
power supply and manually interact their

1059
00:38:26,160 --> 00:38:28,880
functionality with their functionality

1060
00:38:28,880 --> 00:38:31,040
and second there are limited vantage

1061
00:38:31,040 --> 00:38:34,320
points that shed light on tls on on a

1062
00:38:34,320 --> 00:38:36,079
traffic that is tls traffic that is

1063
00:38:36,079 --> 00:38:38,320
specific to iot devices

1064
00:38:38,320 --> 00:38:39,680
uh here's how we mitigate these

1065
00:38:39,680 --> 00:38:42,320
challenges first we build on the prior

1066
00:38:42,320 --> 00:38:44,320
insight we build our insight by prior

1067
00:38:44,320 --> 00:38:46,800
works that devices generate significant

1068
00:38:46,800 --> 00:38:49,359
network traffic when they are powered on

1069
00:38:49,359 --> 00:38:51,359
we automate device reboots with the help

1070
00:38:51,359 --> 00:38:53,920
of of smart plugs and hence we have a

1071
00:38:53,920 --> 00:38:56,000
way to generate traffic uh whenever we

1072
00:38:56,000 --> 00:38:58,000
need for our experiment

1073
00:38:58,000 --> 00:38:59,599
and second we complement these

1074
00:38:59,599 --> 00:39:01,839
controlled experiments with uncontrolled

1075
00:39:01,839 --> 00:39:04,400
ones that span a long period of time and

1076
00:39:04,400 --> 00:39:08,079
enable us to study longitudinal trends

1077
00:39:08,079 --> 00:39:10,000
we conduct these experiments in the iot

1078
00:39:10,000 --> 00:39:11,599
lab at our school

1079
00:39:11,599 --> 00:39:13,920
we focus on the 40 tls supporting iot

1080
00:39:13,920 --> 00:39:15,520
devices across a wide range of

1081
00:39:15,520 --> 00:39:17,200
categories

1082
00:39:17,200 --> 00:39:18,720
we also recruit more than 30

1083
00:39:18,720 --> 00:39:20,560
participants to interact with these

1084
00:39:20,560 --> 00:39:22,560
devices in the lab through an irb

1085
00:39:22,560 --> 00:39:24,240
approved user study

1086
00:39:24,240 --> 00:39:26,000
as you may notice our lab is designed

1087
00:39:26,000 --> 00:39:27,599
like a studio apartment and our

1088
00:39:27,599 --> 00:39:29,680
participants were told that they can use

1089
00:39:29,680 --> 00:39:32,079
any of the devices as they please

1090
00:39:32,079 --> 00:39:34,560
and with this setup we conducted we

1091
00:39:34,560 --> 00:39:36,640
obtained two years of longitudinal data

1092
00:39:36,640 --> 00:39:39,839
from 2018 to 2020

1093
00:39:39,839 --> 00:39:41,680
i'll now share some of the key results

1094
00:39:41,680 --> 00:39:43,359
and we'll then talk about one result in

1095
00:39:43,359 --> 00:39:45,040
more detail

1096
00:39:45,040 --> 00:39:46,560
so first the first question that we

1097
00:39:46,560 --> 00:39:48,480
asked in the study was if these devices

1098
00:39:48,480 --> 00:39:51,040
securely establish tls connections on

1099
00:39:51,040 --> 00:39:53,040
the positive side what we found was that

1100
00:39:53,040 --> 00:39:56,160
most devices were using tls 1.2 and none

1101
00:39:56,160 --> 00:39:58,240
of the devices were using insecure

1102
00:39:58,240 --> 00:40:00,640
cipher suites but on the negative side

1103
00:40:00,640 --> 00:40:03,520
we also found that very few devices

1104
00:40:03,520 --> 00:40:06,240
upgraded to tls 1.3 or modern cipher

1105
00:40:06,240 --> 00:40:08,640
suites over time

1106
00:40:08,640 --> 00:40:10,319
the second question that we asked was if

1107
00:40:10,319 --> 00:40:12,160
these devices properly validate tls

1108
00:40:12,160 --> 00:40:14,720
certificates we found that 11 devices

1109
00:40:14,720 --> 00:40:16,800
were vulnerable to tls interception

1110
00:40:16,800 --> 00:40:19,119
attacks our manual analysis revealed

1111
00:40:19,119 --> 00:40:20,960
that many of these devices were sending

1112
00:40:20,960 --> 00:40:23,359
potentially sensitive data

1113
00:40:23,359 --> 00:40:25,119
we have reported this vulnerability to

1114
00:40:25,119 --> 00:40:27,280
all these vulnerabilities to all device

1115
00:40:27,280 --> 00:40:28,960
manufacturers

1116
00:40:28,960 --> 00:40:31,200
we also found that devices do not appear

1117
00:40:31,200 --> 00:40:33,599
to update their tls root stores and i'll

1118
00:40:33,599 --> 00:40:35,520
talk about this result in more detail in

1119
00:40:35,520 --> 00:40:36,640
a bit

1120
00:40:36,640 --> 00:40:38,880
and finally we also asked if these

1121
00:40:38,880 --> 00:40:41,440
devices share tls libraries with other

1122
00:40:41,440 --> 00:40:44,160
clients uh using a technique named tls

1123
00:40:44,160 --> 00:40:46,640
fingerprinting we were able to show that

1124
00:40:46,640 --> 00:40:48,800
devices and applications from the same

1125
00:40:48,800 --> 00:40:51,520
vendor likely share tls libraries

1126
00:40:51,520 --> 00:40:53,359
in the paper we talk about more details

1127
00:40:53,359 --> 00:40:54,880
about the positive and negative

1128
00:40:54,880 --> 00:40:58,240
implications of this finding

1129
00:40:58,400 --> 00:41:00,400
so i'll now talk about tls root stores

1130
00:41:00,400 --> 00:41:02,000
in more detail

1131
00:41:02,000 --> 00:41:03,760
to understand what these two stores are

1132
00:41:03,760 --> 00:41:06,400
let's consider an example dls handshake

1133
00:41:06,400 --> 00:41:08,640
here our device initiates a deal

1134
00:41:08,640 --> 00:41:11,280
initiates a connection with a web server

1135
00:41:11,280 --> 00:41:12,880
there are many steps in the handshake

1136
00:41:12,880 --> 00:41:15,119
the one to remember for this talk is

1137
00:41:15,119 --> 00:41:16,960
that at some point during the handshake

1138
00:41:16,960 --> 00:41:19,520
the server will send a certificate chain

1139
00:41:19,520 --> 00:41:21,200
the certificate chain contains the

1140
00:41:21,200 --> 00:41:23,440
certificate authority which in this case

1141
00:41:23,440 --> 00:41:24,880
is digit

1142
00:41:24,880 --> 00:41:26,880
these certificate authorities vouch for

1143
00:41:26,880 --> 00:41:29,040
the authenticity of the server

1144
00:41:29,040 --> 00:41:31,200
in order for this handshake to succeed

1145
00:41:31,200 --> 00:41:34,000
the device must trust the certificate

1146
00:41:34,000 --> 00:41:36,560
more specifically the name as well as

1147
00:41:36,560 --> 00:41:38,000
the signature of the certificate

1148
00:41:38,000 --> 00:41:40,560
authority must already be in the trusted

1149
00:41:40,560 --> 00:41:42,640
root store of the device

1150
00:41:42,640 --> 00:41:44,640
if the device does trust the certificate

1151
00:41:44,640 --> 00:41:46,400
it can continue with the handshake and

1152
00:41:46,400 --> 00:41:49,440
may mark it as a success

1153
00:41:49,440 --> 00:41:51,440
these root certificate authorities have

1154
00:41:51,440 --> 00:41:53,920
the power to compromise authenticity of

1155
00:41:53,920 --> 00:41:56,240
all connections that a device makes

1156
00:41:56,240 --> 00:41:58,720
hence it is essential to know what root

1157
00:41:58,720 --> 00:42:01,599
certificates are trusted by iot devices

1158
00:42:01,599 --> 00:42:03,760
other platforms such as web browsers and

1159
00:42:03,760 --> 00:42:05,680
mobile operating systems

1160
00:42:05,680 --> 00:42:07,359
publish the list of root certificates

1161
00:42:07,359 --> 00:42:09,359
that they trust and regularly update

1162
00:42:09,359 --> 00:42:12,640
them over time for example here a root

1163
00:42:12,640 --> 00:42:14,960
certificate is being removed from mozart

1164
00:42:14,960 --> 00:42:17,119
from mozilla route store because of

1165
00:42:17,119 --> 00:42:18,960
administrative reasons

1166
00:42:18,960 --> 00:42:21,359
but here the removal of this root store

1167
00:42:21,359 --> 00:42:23,839
is due to negligence and misbehavior on

1168
00:42:23,839 --> 00:42:27,040
behalf of the certificate authority

1169
00:42:27,040 --> 00:42:28,720
inspection of root stores and iot

1170
00:42:28,720 --> 00:42:30,720
devices is difficult due to their black

1171
00:42:30,720 --> 00:42:32,240
box nature

1172
00:42:32,240 --> 00:42:34,400
i will now share our technique i'll now

1173
00:42:34,400 --> 00:42:36,640
show how to use completely black box

1174
00:42:36,640 --> 00:42:39,040
measurements to try to infer root stores

1175
00:42:39,040 --> 00:42:41,200
of iot devices

1176
00:42:41,200 --> 00:42:42,880
let's take a look at the tls handshake

1177
00:42:42,880 --> 00:42:45,440
again but this time we intercept the

1178
00:42:45,440 --> 00:42:47,920
handshake and certain send a certificate

1179
00:42:47,920 --> 00:42:49,599
chain that contains a certificate

1180
00:42:49,599 --> 00:42:52,160
authority that is unknown to the client

1181
00:42:52,160 --> 00:42:54,160
in terms of both name as well as

1182
00:42:54,160 --> 00:42:55,680
signature

1183
00:42:55,680 --> 00:42:57,200
if the device is properly doing

1184
00:42:57,200 --> 00:42:59,760
certificate validation it must reject

1185
00:42:59,760 --> 00:43:02,000
this certificate and mark this handshake

1186
00:43:02,000 --> 00:43:03,599
as a failure

1187
00:43:03,599 --> 00:43:05,839
the device can also choose to

1188
00:43:05,839 --> 00:43:07,440
share the reason of failure through a

1189
00:43:07,440 --> 00:43:10,160
tls alert which in this case is unknown

1190
00:43:10,160 --> 00:43:11,680
ca

1191
00:43:11,680 --> 00:43:13,920
let's compare this with another scenario

1192
00:43:13,920 --> 00:43:15,920
where we also intercept the handshake

1193
00:43:15,920 --> 00:43:18,480
but this time we send a certificate

1194
00:43:18,480 --> 00:43:20,640
whose name is known to be trusted to the

1195
00:43:20,640 --> 00:43:22,400
client but whose signature does not

1196
00:43:22,400 --> 00:43:24,560
match the signature of the certificate

1197
00:43:24,560 --> 00:43:27,119
that is present in the device

1198
00:43:27,119 --> 00:43:29,359
in this case the handshake must fail as

1199
00:43:29,359 --> 00:43:31,599
well

1200
00:43:31,599 --> 00:43:33,200
so we can see that in both of these

1201
00:43:33,200 --> 00:43:35,520
cases the handshake fails but the reason

1202
00:43:35,520 --> 00:43:37,839
of failure in both cases is different

1203
00:43:37,839 --> 00:43:38,960
and that

1204
00:43:38,960 --> 00:43:41,280
in one case the reason is that

1205
00:43:41,280 --> 00:43:42,960
a certificate is unknown while in the

1206
00:43:42,960 --> 00:43:44,800
other case the reason is the failure of

1207
00:43:44,800 --> 00:43:47,119
a signature these two different reasons

1208
00:43:47,119 --> 00:43:48,800
can lead to the transmission of

1209
00:43:48,800 --> 00:43:51,599
different tls alerts if an iot device

1210
00:43:51,599 --> 00:43:53,760
behaves in such a way we can reliably

1211
00:43:53,760 --> 00:43:56,079
infer the presence of a given root

1212
00:43:56,079 --> 00:43:59,359
certificate in its store and to explore

1213
00:43:59,359 --> 00:44:01,440
all root certificates that a device has

1214
00:44:01,440 --> 00:44:03,440
we can simply repeat this methodology

1215
00:44:03,440 --> 00:44:05,520
with the names of all publicly known

1216
00:44:05,520 --> 00:44:08,319
root certificates

1217
00:44:08,319 --> 00:44:10,560
our technique of root stores exploration

1218
00:44:10,560 --> 00:44:12,800
worked for eight of the 24 devices we

1219
00:44:12,800 --> 00:44:14,000
could test

1220
00:44:14,000 --> 00:44:15,440
in order to get a list of root

1221
00:44:15,440 --> 00:44:17,440
certificates for whose inclusion we

1222
00:44:17,440 --> 00:44:19,839
could check we extracted historical root

1223
00:44:19,839 --> 00:44:22,560
certificate data from various platforms

1224
00:44:22,560 --> 00:44:24,720
using this data we generated two set of

1225
00:44:24,720 --> 00:44:26,079
certificates

1226
00:44:26,079 --> 00:44:28,240
one commonly certificate trusted

1227
00:44:28,240 --> 00:44:29,839
certificates are the ones that are

1228
00:44:29,839 --> 00:44:31,599
available in latest versions of all

1229
00:44:31,599 --> 00:44:33,920
platforms and second deprecated

1230
00:44:33,920 --> 00:44:35,520
certificates are the certificates that

1231
00:44:35,520 --> 00:44:37,440
were once a part of one or more of these

1232
00:44:37,440 --> 00:44:39,440
bad platforms but have since been

1233
00:44:39,440 --> 00:44:42,000
removed over time

1234
00:44:42,000 --> 00:44:43,680
we first checked for the inclusion of

1235
00:44:43,680 --> 00:44:46,400
commonly trusted root certificates

1236
00:44:46,400 --> 00:44:48,560
our results reveal that most of these

1237
00:44:48,560 --> 00:44:51,359
certificates are present in iot devices

1238
00:44:51,359 --> 00:44:53,119
this is good news because it shows that

1239
00:44:53,119 --> 00:44:55,520
iot devices web browsers and operating

1240
00:44:55,520 --> 00:44:57,680
systems likely trust a similar set of

1241
00:44:57,680 --> 00:44:59,760
root certificates

1242
00:44:59,760 --> 00:45:01,200
we then check for the inclusion of

1243
00:45:01,200 --> 00:45:03,280
deprecated root certificates

1244
00:45:03,280 --> 00:45:05,680
ideally none of our devices should trust

1245
00:45:05,680 --> 00:45:08,160
any of these certificates but our

1246
00:45:08,160 --> 00:45:10,160
results reveal that most of these

1247
00:45:10,160 --> 00:45:14,319
devices trust some of these certificates

1248
00:45:14,319 --> 00:45:16,560
us devices such as google home mini

1249
00:45:16,560 --> 00:45:18,079
trust a few percentage of these

1250
00:45:18,079 --> 00:45:20,000
certificates while some others such as

1251
00:45:20,000 --> 00:45:22,560
lg tv and invo restart percentage that's

1252
00:45:22,560 --> 00:45:24,319
quite high

1253
00:45:24,319 --> 00:45:26,079
the likely reason for this is that

1254
00:45:26,079 --> 00:45:28,079
devices either do not update their to

1255
00:45:28,079 --> 00:45:30,560
tls root stores or they do not update

1256
00:45:30,560 --> 00:45:34,000
them at a required frequency

1257
00:45:34,000 --> 00:45:36,560
in order to explore more of the security

1258
00:45:36,560 --> 00:45:38,880
implications of trusting deprecated root

1259
00:45:38,880 --> 00:45:41,040
certificates we manually analyze the

1260
00:45:41,040 --> 00:45:42,880
certificates that were still trusted by

1261
00:45:42,880 --> 00:45:44,240
these devices

1262
00:45:44,240 --> 00:45:46,560
to our surprise we found that all these

1263
00:45:46,560 --> 00:45:49,119
devices trusted at least one certificate

1264
00:45:49,119 --> 00:45:51,119
that has not just been deprecated but

1265
00:45:51,119 --> 00:45:53,760
also explicitly distrusted by either

1266
00:45:53,760 --> 00:45:55,760
firefox or chrome

1267
00:45:55,760 --> 00:45:58,400
based on this new analysis we argue that

1268
00:45:58,400 --> 00:46:00,960
tl tls root stores can be considered as

1269
00:46:00,960 --> 00:46:03,040
the weakest link of security in iot

1270
00:46:03,040 --> 00:46:05,200
devices

1271
00:46:05,200 --> 00:46:08,400
to conclude our study reveals a mix of

1272
00:46:08,400 --> 00:46:10,319
both good and bad news about tls usage

1273
00:46:10,319 --> 00:46:12,079
and iot devices

1274
00:46:12,079 --> 00:46:13,920
unlike the perception in the community

1275
00:46:13,920 --> 00:46:15,839
we do not believe tls usage in iot

1276
00:46:15,839 --> 00:46:18,960
devices is completely broken rather we

1277
00:46:18,960 --> 00:46:20,640
think it suffers from some of the same

1278
00:46:20,640 --> 00:46:22,880
issues that existed in other platforms

1279
00:46:22,880 --> 00:46:24,160
when they had just started their

1280
00:46:24,160 --> 00:46:26,480
reliance on tls

1281
00:46:26,480 --> 00:46:28,720
uh please feel free to read our paper

1282
00:46:28,720 --> 00:46:30,480
for more details and i'm happy to share

1283
00:46:30,480 --> 00:46:32,240
that we also have released the tls

1284
00:46:32,240 --> 00:46:34,079
handshake data and some software from

1285
00:46:34,079 --> 00:46:35,520
our research

1286
00:46:35,520 --> 00:46:37,040
uh thanks and i'm ready to take

1287
00:46:37,040 --> 00:46:38,400
questions now

1288
00:46:38,400 --> 00:46:40,480
thanks a lot taha uh right on time

1289
00:46:40,480 --> 00:46:42,720
perfect uh what up first i want to refer

1290
00:46:42,720 --> 00:46:44,880
you to uh people like that you're doing

1291
00:46:44,880 --> 00:46:46,480
this work and there's some questions for

1292
00:46:46,480 --> 00:46:48,079
you in the chat

1293
00:46:48,079 --> 00:46:50,880
i'm gonna refer you to their uh dkgs a

1294
00:46:50,880 --> 00:46:52,319
couple of things and was also referred

1295
00:46:52,319 --> 00:46:54,560
to your paper and then i see we have

1296
00:46:54,560 --> 00:46:56,960
uh uh hannes uh

1297
00:46:56,960 --> 00:46:58,800
uh actually benjamin i guess is ahead of

1298
00:46:58,800 --> 00:47:01,200
him we'll have benjamin go and uh and

1299
00:47:01,200 --> 00:47:02,480
we're gonna have to switch pretty quick

1300
00:47:02,480 --> 00:47:05,040
to kyle's so uh let's make it quick uh

1301
00:47:05,040 --> 00:47:07,759
go ahead benjamin

1302
00:47:08,960 --> 00:47:11,760
hi uh what

1303
00:47:11,760 --> 00:47:13,359
uh so you said this worked for eight of

1304
00:47:13,359 --> 00:47:15,119
the devices what happened with the other

1305
00:47:15,119 --> 00:47:16,800
16

1306
00:47:16,800 --> 00:47:18,720
so what happened with those devices that

1307
00:47:18,720 --> 00:47:20,559
was that uh they would either not send

1308
00:47:20,559 --> 00:47:21,280
us

1309
00:47:21,280 --> 00:47:23,520
a tls alert at all or they would send

1310
00:47:23,520 --> 00:47:25,839
the same dls alert so it means that we

1311
00:47:25,839 --> 00:47:28,160
need to find some other channel to like

1312
00:47:28,160 --> 00:47:30,319
study that uh difference because the

1313
00:47:30,319 --> 00:47:31,599
certificate validation would be

1314
00:47:31,599 --> 00:47:34,240
different in the both two cases but the

1315
00:47:34,240 --> 00:47:36,640
others are not necessary to be sent i

1316
00:47:36,640 --> 00:47:38,000
should also mention that the tls

1317
00:47:38,000 --> 00:47:40,559
protocol does not mandate the sending of

1318
00:47:40,559 --> 00:47:42,880
these alerts

1319
00:47:42,880 --> 00:47:47,280
um thanks anas can you can you go quick

1320
00:47:47,440 --> 00:47:48,800
yeah sure um

1321
00:47:48,800 --> 00:47:50,400
thanks for doing the work i was

1322
00:47:50,400 --> 00:47:53,520
wondering what type of devices those

1323
00:47:53,520 --> 00:47:55,119
were like did you

1324
00:47:55,119 --> 00:47:56,480
um sort of

1325
00:47:56,480 --> 00:47:58,079
analyze uh

1326
00:47:58,079 --> 00:48:00,240
whether those were sort of like uh

1327
00:48:00,240 --> 00:48:03,599
high-end iot devices like with a-class

1328
00:48:03,599 --> 00:48:05,839
processors or more these uh low end

1329
00:48:05,839 --> 00:48:07,839
devices which obviously have different

1330
00:48:07,839 --> 00:48:09,680
constraints

1331
00:48:09,680 --> 00:48:11,520
they were all popular consumer devices

1332
00:48:11,520 --> 00:48:13,599
so pretty high hand i would say and i

1333
00:48:13,599 --> 00:48:15,760
have a slide in the slide deck which has

1334
00:48:15,760 --> 00:48:17,200
a list of all these devices but they

1335
00:48:17,200 --> 00:48:19,040
were like alexa and smart tvs and

1336
00:48:19,040 --> 00:48:22,960
samsung fridge okay so it's most likely

1337
00:48:22,960 --> 00:48:24,800
running linux

1338
00:48:24,800 --> 00:48:27,040
off the shelf linux okay

1339
00:48:27,040 --> 00:48:28,640
cool thanks so much taha for bringing

1340
00:48:28,640 --> 00:48:31,200
that to us uh follow up in the chat with

1341
00:48:31,200 --> 00:48:32,720
them if you would like

1342
00:48:32,720 --> 00:48:34,800
bringing kyle's slides now and we'll

1343
00:48:34,800 --> 00:48:36,240
finish up with our last presentation

1344
00:48:36,240 --> 00:48:38,160
where kyle will be sharing with us uh

1345
00:48:38,160 --> 00:48:39,359
performance measurements with video

1346
00:48:39,359 --> 00:48:41,200
conferencing apps go ahead kyle you got

1347
00:48:41,200 --> 00:48:42,720
at least 10 minutes

1348
00:48:42,720 --> 00:48:45,200
great thanks dave uh yeah so my name is

1349
00:48:45,200 --> 00:48:47,839
kyle i'm a second year phd student at

1350
00:48:47,839 --> 00:48:49,680
the university of chicago and today i'll

1351
00:48:49,680 --> 00:48:51,359
be presenting our

1352
00:48:51,359 --> 00:48:54,160
imc paper measuring the performance and

1353
00:48:54,160 --> 00:48:56,400
network utilization of popular video

1354
00:48:56,400 --> 00:48:59,200
conferencing applications and i want to

1355
00:48:59,200 --> 00:49:00,559
start off by giving a little bit of

1356
00:49:00,559 --> 00:49:02,559
motivation for this work which actually

1357
00:49:02,559 --> 00:49:05,680
came from a question that our local city

1358
00:49:05,680 --> 00:49:08,400
officials here in chicago asked us

1359
00:49:08,400 --> 00:49:10,400
towards the beginning of the pandemic

1360
00:49:10,400 --> 00:49:14,400
namely what is the baseline level of

1361
00:49:14,400 --> 00:49:16,720
internet performance needed to support

1362
00:49:16,720 --> 00:49:19,280
common video conferencing applications

1363
00:49:19,280 --> 00:49:21,040
for remote learning

1364
00:49:21,040 --> 00:49:21,839
now

1365
00:49:21,839 --> 00:49:24,240
this question is becoming increasingly

1366
00:49:24,240 --> 00:49:27,200
relevant as local policy makers work to

1367
00:49:27,200 --> 00:49:29,839
provide sufficient internet access to

1368
00:49:29,839 --> 00:49:32,000
its uh citizens

1369
00:49:32,000 --> 00:49:34,079
so to answer this question we've

1370
00:49:34,079 --> 00:49:36,640
conducted a series of experiments to

1371
00:49:36,640 --> 00:49:39,359
better understand both the requirements

1372
00:49:39,359 --> 00:49:42,319
of vcas and the causes of poor

1373
00:49:42,319 --> 00:49:43,599
performance

1374
00:49:43,599 --> 00:49:45,760
so in this talk i want to briefly

1375
00:49:45,760 --> 00:49:49,040
highlight some of the core findings from

1376
00:49:49,040 --> 00:49:52,240
each of the sections of our paper

1377
00:49:52,240 --> 00:49:55,280
and to start uh in this work we study

1378
00:49:55,280 --> 00:49:57,440
three of the most popular

1379
00:49:57,440 --> 00:49:59,680
is in use right now

1380
00:49:59,680 --> 00:50:00,640
zoom

1381
00:50:00,640 --> 00:50:04,079
google meet and microsoft teams

1382
00:50:04,079 --> 00:50:04,880
so

1383
00:50:04,880 --> 00:50:07,359
we start by determining what the

1384
00:50:07,359 --> 00:50:09,599
bandwidth requirements are for a

1385
00:50:09,599 --> 00:50:12,800
two-person call on each of the vcas

1386
00:50:12,800 --> 00:50:16,400
and find that meet and zoom use under

1387
00:50:16,400 --> 00:50:19,119
one megabit per second on average in

1388
00:50:19,119 --> 00:50:20,640
both directions

1389
00:50:20,640 --> 00:50:25,359
while teams uses 1.4 and 1.86 megabits

1390
00:50:25,359 --> 00:50:27,839
per second in the upstream and

1391
00:50:27,839 --> 00:50:30,720
downstream directions respectively

1392
00:50:30,720 --> 00:50:31,520
now

1393
00:50:31,520 --> 00:50:34,400
for context uh home internet users have

1394
00:50:34,400 --> 00:50:37,920
access to speeds uh of up to one gigabit

1395
00:50:37,920 --> 00:50:40,000
per second and

1396
00:50:40,000 --> 00:50:42,720
many subscribe to plans in the tens and

1397
00:50:42,720 --> 00:50:45,520
hundreds of megabits per second

1398
00:50:45,520 --> 00:50:47,760
uh additionally the federal

1399
00:50:47,760 --> 00:50:50,160
communications commission known as the

1400
00:50:50,160 --> 00:50:51,280
fcc

1401
00:50:51,280 --> 00:50:54,160
defines broadband internet as 25

1402
00:50:54,160 --> 00:50:57,599
megabits down and three megabits up

1403
00:50:57,599 --> 00:51:00,000
now while there's uh still some debate

1404
00:51:00,000 --> 00:51:02,559
over this definition the actual

1405
00:51:02,559 --> 00:51:04,960
utilization rates that we found

1406
00:51:04,960 --> 00:51:07,920
for these apps that many consider to be

1407
00:51:07,920 --> 00:51:10,400
pretty big bandwidth hogs are actually

1408
00:51:10,400 --> 00:51:13,200
relatively low

1409
00:51:13,200 --> 00:51:15,440
but uh while utilization rates may be

1410
00:51:15,440 --> 00:51:18,160
low uh insufficient bandwidth is not the

1411
00:51:18,160 --> 00:51:21,680
only cause of poor performance

1412
00:51:21,680 --> 00:51:23,920
home internet connections can be dynamic

1413
00:51:23,920 --> 00:51:26,160
and encounter interruptions in

1414
00:51:26,160 --> 00:51:27,520
connectivity

1415
00:51:27,520 --> 00:51:30,880
so in this next part we study how vcas

1416
00:51:30,880 --> 00:51:33,920
respond to these sorts of

1417
00:51:33,920 --> 00:51:36,319
temporary disruptions

1418
00:51:36,319 --> 00:51:39,760
and to do so we use the following setup

1419
00:51:39,760 --> 00:51:43,200
where we start a call on v1 which is a

1420
00:51:43,200 --> 00:51:46,480
standard consumer laptop and adjust the

1421
00:51:46,480 --> 00:51:49,680
bandwidth capacity available to v1 at

1422
00:51:49,680 --> 00:51:50,960
the router

1423
00:51:50,960 --> 00:51:54,960
in order to simulate an interruption

1424
00:51:54,960 --> 00:51:57,440
um our experiment proceeds by starting

1425
00:51:57,440 --> 00:51:59,440
the call under what are effectively

1426
00:51:59,440 --> 00:52:01,920
unconstrained network conditions

1427
00:52:01,920 --> 00:52:04,480
and then one minute after starting we

1428
00:52:04,480 --> 00:52:07,599
reduce the available capacity uh to one

1429
00:52:07,599 --> 00:52:10,640
megabit per second or less for 30

1430
00:52:10,640 --> 00:52:11,920
seconds

1431
00:52:11,920 --> 00:52:14,240
after this 30 second period we revert to

1432
00:52:14,240 --> 00:52:16,559
the original unconstrained network

1433
00:52:16,559 --> 00:52:19,440
settings and allow the call to continue

1434
00:52:19,440 --> 00:52:21,200
for another three and a half minutes

1435
00:52:21,200 --> 00:52:23,839
before ending it

1436
00:52:23,839 --> 00:52:26,960
uh among our results we find that vcas

1437
00:52:26,960 --> 00:52:28,880
can take quite a long time to recover

1438
00:52:28,880 --> 00:52:30,960
from uh interruptions

1439
00:52:30,960 --> 00:52:33,040
in this figure we measure the time to

1440
00:52:33,040 --> 00:52:35,839
recovery which we define as the time

1441
00:52:35,839 --> 00:52:38,400
between when the interruption ends and

1442
00:52:38,400 --> 00:52:40,559
when the median utilization

1443
00:52:40,559 --> 00:52:42,800
routine excuse me when the median

1444
00:52:42,800 --> 00:52:44,960
utilization returns to the median

1445
00:52:44,960 --> 00:52:49,200
utilization from before the interruption

1446
00:52:49,200 --> 00:52:51,599
the levels on the x-axis indicate the

1447
00:52:51,599 --> 00:52:54,640
available uplink capacity during the

1448
00:52:54,640 --> 00:52:57,359
30-second interruption

1449
00:52:57,359 --> 00:53:00,160
and while zoom and meat are usually

1450
00:53:00,160 --> 00:53:02,720
faster than teams to recover from drops

1451
00:53:02,720 --> 00:53:06,240
to 0.75 and 1 megabit per second

1452
00:53:06,240 --> 00:53:09,760
all three vcas can take over 25 seconds

1453
00:53:09,760 --> 00:53:13,760
to recover from the most severe

1454
00:53:13,760 --> 00:53:16,319
uh these long recovery times may lead to

1455
00:53:16,319 --> 00:53:17,839
poor performance

1456
00:53:17,839 --> 00:53:20,079
especially on networks that are prone to

1457
00:53:20,079 --> 00:53:23,200
these types of interruptions

1458
00:53:23,200 --> 00:53:25,520
but uh interruptions aren't the only

1459
00:53:25,520 --> 00:53:28,400
cause of dynamic network conditions so

1460
00:53:28,400 --> 00:53:30,880
in this next part we study how the vcas

1461
00:53:30,880 --> 00:53:33,520
respond to competing traffic

1462
00:53:33,520 --> 00:53:34,480
and

1463
00:53:34,480 --> 00:53:36,240
this is really important because there

1464
00:53:36,240 --> 00:53:38,880
are often more than one user on a single

1465
00:53:38,880 --> 00:53:41,680
network and these other users could be

1466
00:53:41,680 --> 00:53:44,000
hosting their own uh video conferencing

1467
00:53:44,000 --> 00:53:45,359
calls or

1468
00:53:45,359 --> 00:53:47,359
using streaming services like youtube

1469
00:53:47,359 --> 00:53:48,960
and netflix

1470
00:53:48,960 --> 00:53:51,760
so to test how vcas interact with other

1471
00:53:51,760 --> 00:53:54,319
applications on a constrained network we

1472
00:53:54,319 --> 00:53:56,640
use the following setup

1473
00:53:56,640 --> 00:53:59,119
where we run a video conferencing call

1474
00:53:59,119 --> 00:54:02,079
on v1 and initiate a competing

1475
00:54:02,079 --> 00:54:04,400
application on c1

1476
00:54:04,400 --> 00:54:07,040
both v1 and c1 are connected to the same

1477
00:54:07,040 --> 00:54:09,200
network and will share the same

1478
00:54:09,200 --> 00:54:10,800
bottleneck link

1479
00:54:10,800 --> 00:54:12,720
again we're setting the capacity

1480
00:54:12,720 --> 00:54:16,800
available to v1 and c1 at the router

1481
00:54:16,800 --> 00:54:19,200
in each experiment we start by reducing

1482
00:54:19,200 --> 00:54:21,680
the capacity available to v1 and c1

1483
00:54:21,680 --> 00:54:23,119
before we started either of the

1484
00:54:23,119 --> 00:54:24,640
applications

1485
00:54:24,640 --> 00:54:28,000
then we initiate a call on v1

1486
00:54:28,000 --> 00:54:29,520
wait 30 seconds

1487
00:54:29,520 --> 00:54:32,079
and then start the competing application

1488
00:54:32,079 --> 00:54:34,000
on c1

1489
00:54:34,000 --> 00:54:34,880
now

1490
00:54:34,880 --> 00:54:36,960
it might not surprise you to learn that

1491
00:54:36,960 --> 00:54:38,799
applications aren't always fair with

1492
00:54:38,799 --> 00:54:41,520
other types of applications but we

1493
00:54:41,520 --> 00:54:44,000
actually found that the vcas are not

1494
00:54:44,000 --> 00:54:46,559
always fair with themselves

1495
00:54:46,559 --> 00:54:47,359
so

1496
00:54:47,359 --> 00:54:49,440
in this figure we plot the upstream

1497
00:54:49,440 --> 00:54:52,960
utilization over time for two different

1498
00:54:52,960 --> 00:54:56,000
teams calls using the same three megabit

1499
00:54:56,000 --> 00:54:58,240
per second uplink

1500
00:54:58,240 --> 00:55:00,480
the gray region indicates the time

1501
00:55:00,480 --> 00:55:03,839
period in which the two calls compete

1502
00:55:03,839 --> 00:55:06,559
the purple trend line is the utilization

1503
00:55:06,559 --> 00:55:09,680
for the incumbent call running on v1

1504
00:55:09,680 --> 00:55:11,280
whereas the black trend line is the

1505
00:55:11,280 --> 00:55:13,680
utilization for the competing call

1506
00:55:13,680 --> 00:55:15,599
running on c1

1507
00:55:15,599 --> 00:55:16,400
and

1508
00:55:16,400 --> 00:55:17,440
throughout the duration of the

1509
00:55:17,440 --> 00:55:19,599
experiment we find that the

1510
00:55:19,599 --> 00:55:22,319
incumbent teams call has a significantly

1511
00:55:22,319 --> 00:55:24,799
higher average utilization

1512
00:55:24,799 --> 00:55:27,520
uh than the competing call

1513
00:55:27,520 --> 00:55:30,000
now this lack of coordination between

1514
00:55:30,000 --> 00:55:31,359
the calls has

1515
00:55:31,359 --> 00:55:34,079
obviously implications on fairness and

1516
00:55:34,079 --> 00:55:37,280
could mean that one competing vca call

1517
00:55:37,280 --> 00:55:38,880
could use more of the available

1518
00:55:38,880 --> 00:55:43,440
bandwidth just because it started first

1519
00:55:43,920 --> 00:55:46,319
now uh up until this point i've only

1520
00:55:46,319 --> 00:55:49,119
discussed utilization and performance in

1521
00:55:49,119 --> 00:55:51,520
two-person calls but as we all know

1522
00:55:51,520 --> 00:55:53,040
there are many different ways that

1523
00:55:53,040 --> 00:55:55,280
people use vcas

1524
00:55:55,280 --> 00:55:57,839
so in this next part we explore how

1525
00:55:57,839 --> 00:56:00,079
varying the number of participants and

1526
00:56:00,079 --> 00:56:02,160
how people view the call affects

1527
00:56:02,160 --> 00:56:03,760
utilization

1528
00:56:03,760 --> 00:56:05,520
we use the following setup for the

1529
00:56:05,520 --> 00:56:07,920
experiments in which all participants

1530
00:56:07,920 --> 00:56:10,240
join the same vca call

1531
00:56:10,240 --> 00:56:12,640
we consider two viewing modes gallery

1532
00:56:12,640 --> 00:56:14,559
and speaker mode

1533
00:56:14,559 --> 00:56:16,720
uh in gallery mode uh you see everyone's

1534
00:56:16,720 --> 00:56:19,440
video on the screen at once this works

1535
00:56:19,440 --> 00:56:21,440
by shrinking the size of each person's

1536
00:56:21,440 --> 00:56:22,480
video

1537
00:56:22,480 --> 00:56:25,200
and in speaker mode all participants in

1538
00:56:25,200 --> 00:56:28,160
large participant a's video streaming it

1539
00:56:28,160 --> 00:56:30,799
at a high resolution

1540
00:56:30,799 --> 00:56:33,200
and what we find is that your

1541
00:56:33,200 --> 00:56:35,839
utilization can be affected by how other

1542
00:56:35,839 --> 00:56:38,559
participants use the vca

1543
00:56:38,559 --> 00:56:40,880
uh in this figure we show user a's

1544
00:56:40,880 --> 00:56:43,839
uplink bitrate or uplink utilization

1545
00:56:43,839 --> 00:56:46,480
when all other participants have user

1546
00:56:46,480 --> 00:56:48,960
a's video enlarged

1547
00:56:48,960 --> 00:56:51,520
in most vcas this is when you pin a

1548
00:56:51,520 --> 00:56:53,599
specific participant's video to the

1549
00:56:53,599 --> 00:56:55,520
screen

1550
00:56:55,520 --> 00:56:58,400
and we show how the uplink utilization

1551
00:56:58,400 --> 00:57:01,119
changes as we increase the total number

1552
00:57:01,119 --> 00:57:03,280
of participants in the call

1553
00:57:03,280 --> 00:57:05,680
what we see is that as the number of

1554
00:57:05,680 --> 00:57:08,000
participants increases the utilization

1555
00:57:08,000 --> 00:57:09,839
for meat and zoom remains relatively

1556
00:57:09,839 --> 00:57:11,040
constant

1557
00:57:11,040 --> 00:57:13,760
but when using teams user a's uplink

1558
00:57:13,760 --> 00:57:15,920
bitrate tends to increase

1559
00:57:15,920 --> 00:57:18,000
with the number of participants

1560
00:57:18,000 --> 00:57:20,240
and uh this is a really realistic

1561
00:57:20,240 --> 00:57:22,480
scenario scenario you can

1562
00:57:22,480 --> 00:57:24,240
imagine it occurring during remote

1563
00:57:24,240 --> 00:57:26,640
learning when all of the students have

1564
00:57:26,640 --> 00:57:28,480
pinned their teacher's video to their

1565
00:57:28,480 --> 00:57:29,680
screens

1566
00:57:29,680 --> 00:57:30,559
so

1567
00:57:30,559 --> 00:57:32,559
understanding this behavior is really

1568
00:57:32,559 --> 00:57:35,839
important when drafting broadband policy

1569
00:57:35,839 --> 00:57:37,920
especially given that the

1570
00:57:37,920 --> 00:57:41,119
uplink teams utilization approaches the

1571
00:57:41,119 --> 00:57:44,319
fcc standard for broadband internet at

1572
00:57:44,319 --> 00:57:46,960
three megabits per second when there are

1573
00:57:46,960 --> 00:57:49,760
eight participants in the call

1574
00:57:49,760 --> 00:57:51,599
so to recap

1575
00:57:51,599 --> 00:57:54,160
in our study of vcas we have several

1576
00:57:54,160 --> 00:57:56,079
interesting findings that can inform

1577
00:57:56,079 --> 00:57:59,040
policymakers that are designing internet

1578
00:57:59,040 --> 00:58:01,280
provisioning legislation

1579
00:58:01,280 --> 00:58:04,240
namely that vcas have relatively low

1580
00:58:04,240 --> 00:58:05,599
utilization

1581
00:58:05,599 --> 00:58:07,680
that they can take quite a long time to

1582
00:58:07,680 --> 00:58:09,920
recover from certain interruptions

1583
00:58:09,920 --> 00:58:13,119
that vcas may not compete fairly even

1584
00:58:13,119 --> 00:58:17,040
among themselves and finally that uh how

1585
00:58:17,040 --> 00:58:18,880
other people view

1586
00:58:18,880 --> 00:58:22,559
the call can affect your utilization

1587
00:58:22,559 --> 00:58:24,559
i hope you've enjoyed this presentation

1588
00:58:24,559 --> 00:58:25,520
uh

1589
00:58:25,520 --> 00:58:27,680
i'm happy to take any questions you can

1590
00:58:27,680 --> 00:58:29,040
email me at

1591
00:58:29,040 --> 00:58:31,000
my last name macmillan at

1592
00:58:31,000 --> 00:58:33,280
uchicago.edu i know we're running a

1593
00:58:33,280 --> 00:58:34,839
little low on time

1594
00:58:34,839 --> 00:58:37,680
here hi kyle uh thanks this is dave

1595
00:58:37,680 --> 00:58:39,119
we've got two people in the queue with a

1596
00:58:39,119 --> 00:58:40,559
question or comment for you and there's

1597
00:58:40,559 --> 00:58:41,839
a couple more in the chat if you want to

1598
00:58:41,839 --> 00:58:43,200
pick them up there otherwise they'll do

1599
00:58:43,200 --> 00:58:47,119
as you said uh go ahead andrew

1600
00:58:47,119 --> 00:58:49,359
hi thank you and thanks for the uh

1601
00:58:49,359 --> 00:58:52,079
interesting presentation it was uh

1602
00:58:52,079 --> 00:58:54,880
fascinating so uh good to see uh just

1603
00:58:54,880 --> 00:58:57,839
two quick questions uh when you did this

1604
00:58:57,839 --> 00:59:00,240
did you consider uh or did you look at

1605
00:59:00,240 --> 00:59:02,480
the any differences between using a

1606
00:59:02,480 --> 00:59:04,880
native app versus

1607
00:59:04,880 --> 00:59:06,960
a browser client

1608
00:59:06,960 --> 00:59:08,799
and also did you look at any differences

1609
00:59:08,799 --> 00:59:11,680
from different uh device types to see if

1610
00:59:11,680 --> 00:59:13,760
that made any material impact

1611
00:59:13,760 --> 00:59:14,960
on this

1612
00:59:14,960 --> 00:59:16,000
thank you

1613
00:59:16,000 --> 00:59:17,440
yeah thanks for your question so we

1614
00:59:17,440 --> 00:59:19,599
actually looked at um

1615
00:59:19,599 --> 00:59:21,599
how uh well google meet i guess the

1616
00:59:21,599 --> 00:59:23,119
native application would be google

1617
00:59:23,119 --> 00:59:24,960
chrome so that's what we used the whole

1618
00:59:24,960 --> 00:59:26,720
time but we also looked at how microsoft

1619
00:59:26,720 --> 00:59:29,200
teams performs in browser so

1620
00:59:29,200 --> 00:59:31,440
uh for that part we look at how

1621
00:59:31,440 --> 00:59:33,520
utilization changes as you adjust the

1622
00:59:33,520 --> 00:59:35,200
network settings but also how certain

1623
00:59:35,200 --> 00:59:37,520
qoe metrics change uh under different

1624
00:59:37,520 --> 00:59:39,440
network settings so stuff like freezes

1625
00:59:39,440 --> 00:59:42,000
and uh quantization parameter

1626
00:59:42,000 --> 00:59:44,960
uh and then as for device type

1627
00:59:44,960 --> 00:59:47,839
we we did most of our experiments on uh

1628
00:59:47,839 --> 00:59:50,240
this uh dell laptop that was running

1629
00:59:50,240 --> 00:59:51,440
ubuntu

1630
00:59:51,440 --> 00:59:53,280
uh but we also uh

1631
00:59:53,280 --> 00:59:55,280
replicated some of the experiments on a

1632
00:59:55,280 --> 00:59:57,680
on a mac computer but uh

1633
00:59:57,680 --> 00:59:58,799
in case you were asking about like

1634
00:59:58,799 --> 01:00:00,880
mobile devices or something we were uh

1635
01:00:00,880 --> 01:00:03,520
only looking at laptops

1636
01:00:03,520 --> 01:00:04,960
yeah yeah i was thinking more different

1637
01:00:04,960 --> 01:00:07,760
processes so without any

1638
01:00:07,760 --> 01:00:10,880
i9 type the distinction but maybe

1639
01:00:10,880 --> 01:00:14,079
discussion uh offline thank you okay

1640
01:00:14,079 --> 01:00:16,160
thanks a lot um ali why don't you go and

1641
01:00:16,160 --> 01:00:18,960
then we'll wrap it up

1642
01:00:23,440 --> 01:00:25,119
i suppose we can hear you

1643
01:00:25,119 --> 01:00:27,680
yep right thanks for the talk uh my

1644
01:00:27,680 --> 01:00:29,599
question was when you were doing the

1645
01:00:29,599 --> 01:00:31,920
video comparison the video betrayed

1646
01:00:31,920 --> 01:00:33,359
between team

1647
01:00:33,359 --> 01:00:35,440
teams versus another team's client or

1648
01:00:35,440 --> 01:00:38,240
another competing client uh where were

1649
01:00:38,240 --> 01:00:40,880
you double checking that you were

1650
01:00:40,880 --> 01:00:43,280
actually capturing a similar video uh

1651
01:00:43,280 --> 01:00:45,680
because you know uh talking a head

1652
01:00:45,680 --> 01:00:47,920
versus talk you know moving body or

1653
01:00:47,920 --> 01:00:50,000
moving ahead i mean makes a difference

1654
01:00:50,000 --> 01:00:53,599
in terms of video uh bitrate right so uh

1655
01:00:53,599 --> 01:00:55,280
i just want to make sure that you guys

1656
01:00:55,280 --> 01:00:56,720
were uh

1657
01:00:56,720 --> 01:00:59,760
uh you know confirming to pre you know

1658
01:00:59,760 --> 01:01:01,760
using pretty much the same video for

1659
01:01:01,760 --> 01:01:04,960
each webcam so that it will be a fairer

1660
01:01:04,960 --> 01:01:06,720
comparison yeah no that's that's a

1661
01:01:06,720 --> 01:01:09,200
really good point uh and we did so we uh

1662
01:01:09,200 --> 01:01:10,960
we had a pre-recorded talking head video

1663
01:01:10,960 --> 01:01:14,240
that we uh used for all the experiments

1664
01:01:14,240 --> 01:01:15,839
um okay

1665
01:01:15,839 --> 01:01:17,680
all right all right thank you

1666
01:01:17,680 --> 01:01:19,839
yep great thanks so much uh for joining

1667
01:01:19,839 --> 01:01:21,599
us kyle and thanks to the other

1668
01:01:21,599 --> 01:01:23,760
contributors those were great talks uh

1669
01:01:23,760 --> 01:01:25,680
you can go find their papers and another

1670
01:01:25,680 --> 01:01:27,200
recording of the presentation for the

1671
01:01:27,200 --> 01:01:29,280
three of them are ymc there thanks to

1672
01:01:29,280 --> 01:01:31,040
miriam for helping put together the

1673
01:01:31,040 --> 01:01:33,440
agenda again i hope you all have a good

1674
01:01:33,440 --> 01:01:36,160
week and thanks lastly to teresa encart

1675
01:01:36,160 --> 01:01:38,720
for taking the minutes for us and we

1676
01:01:38,720 --> 01:01:41,119
will see you at the next meeting bye bye

1677
01:01:41,119 --> 01:01:45,240
and thanks to dave bye

