1
00:00:06,000 --> 00:00:08,240
okay i think we'll get started in just a

2
00:00:08,240 --> 00:00:09,519
minute

3
00:00:09,519 --> 00:00:11,759
uh just to make sure

4
00:00:11,759 --> 00:00:15,799
we're here for uh tls

5
00:00:53,760 --> 00:00:57,600
alrighty let's get started um

6
00:00:57,600 --> 00:00:59,600
you all are probably familiar with the

7
00:00:59,600 --> 00:01:02,960
notewell which is uh with respect to ipr

8
00:01:02,960 --> 00:01:05,920
in the ietf um so please take a quick

9
00:01:05,920 --> 00:01:07,680
look at this if you're not familiar you

10
00:01:07,680 --> 00:01:09,520
know also find it on

11
00:01:09,520 --> 00:01:13,560
pretty much every uh

12
00:01:14,240 --> 00:01:15,920
thing that you get from the iepf when

13
00:01:15,920 --> 00:01:17,520
you're signing up

14
00:01:17,520 --> 00:01:19,119
the next

15
00:01:19,119 --> 00:01:23,439
thing we'd like to mention here is uh

16
00:01:23,439 --> 00:01:26,320
the ietf code of conduct

17
00:01:26,320 --> 00:01:27,600
so this is

18
00:01:27,600 --> 00:01:29,600
something we'd like to emphasize that we

19
00:01:29,600 --> 00:01:31,119
always want to treat our colleagues with

20
00:01:31,119 --> 00:01:32,640
respect

21
00:01:32,640 --> 00:01:34,400
try to make sure you speak so people can

22
00:01:34,400 --> 00:01:37,040
understand

23
00:01:37,040 --> 00:01:39,759
using reasoned arguments

24
00:01:39,759 --> 00:01:41,520
better than um

25
00:01:41,520 --> 00:01:44,560
you know trying to attack somebody's uh

26
00:01:44,560 --> 00:01:45,520
person

27
00:01:45,520 --> 00:01:46,960
um

28
00:01:46,960 --> 00:01:49,040
using your best engineering judgment to

29
00:01:49,040 --> 00:01:51,759
find solutions for the internet

30
00:01:51,759 --> 00:01:54,399
uh as a whole and we all want to keep

31
00:01:54,399 --> 00:01:56,880
that in mind and that people often have

32
00:01:56,880 --> 00:01:58,719
different points of view

33
00:01:58,719 --> 00:01:59,840
on

34
00:01:59,840 --> 00:02:01,600
on

35
00:02:01,600 --> 00:02:03,280
coming from different experiences and

36
00:02:03,280 --> 00:02:04,479
backgrounds

37
00:02:04,479 --> 00:02:06,640
so keep these in mind when uh coming to

38
00:02:06,640 --> 00:02:07,600
the mic

39
00:02:07,600 --> 00:02:10,239
speaking on jabber or

40
00:02:10,239 --> 00:02:13,840
on the mailing list thanks

41
00:02:14,720 --> 00:02:16,800
all right do we have minute tankers i

42
00:02:16,800 --> 00:02:18,800
didn't notice

43
00:02:18,800 --> 00:02:21,040
if we had i don't think we had requested

44
00:02:21,040 --> 00:02:22,480
is there somebody who's willing to take

45
00:02:22,480 --> 00:02:24,879
minutes

46
00:02:35,200 --> 00:02:37,920
yeah rich i'll do it in the

47
00:02:37,920 --> 00:02:40,160
hedge dock thing

48
00:02:40,160 --> 00:02:43,680
perfect thank you thank you

49
00:02:43,840 --> 00:02:46,080
um and i think probably we'll have a

50
00:02:46,080 --> 00:02:48,160
number of people in jabber but if

51
00:02:48,160 --> 00:02:51,840
somebody wants to speak

52
00:02:52,239 --> 00:02:54,000
and doesn't have uh

53
00:02:54,000 --> 00:02:56,640
audio access we can relay that to the

54
00:02:56,640 --> 00:02:58,799
mic

55
00:02:59,280 --> 00:03:01,599
um and again uh state your name when

56
00:03:01,599 --> 00:03:02,879
you're

57
00:03:02,879 --> 00:03:07,518
speaking and then keep it professional

58
00:03:08,720 --> 00:03:11,120
all right

59
00:03:11,120 --> 00:03:13,440
so

60
00:03:14,159 --> 00:03:16,239
we have a agenda we'll have a couple

61
00:03:16,239 --> 00:03:17,599
discussion a couple of working group

62
00:03:17,599 --> 00:03:20,480
jazz looks like we've had a revision uh

63
00:03:20,480 --> 00:03:22,080
here already

64
00:03:22,080 --> 00:03:24,720
um and then we'll have a discussion of

65
00:03:24,720 --> 00:03:26,080
of some new

66
00:03:26,080 --> 00:03:28,000
work uh

67
00:03:28,000 --> 00:03:30,319
that people have brought to the tls

68
00:03:30,319 --> 00:03:31,519
working group

69
00:03:31,519 --> 00:03:32,400
is there any

70
00:03:32,400 --> 00:03:34,239
agenda bashing that we'd like to do at

71
00:03:34,239 --> 00:03:36,720
this point

72
00:03:37,680 --> 00:03:40,480
any additions

73
00:03:45,519 --> 00:03:46,799
alrighty

74
00:03:46,799 --> 00:03:48,560
i think the

75
00:03:48,560 --> 00:03:50,879
next thing is just a quick uh check on

76
00:03:50,879 --> 00:03:53,360
document status um we have a number of

77
00:03:53,360 --> 00:03:56,000
things coming up into the rfc editor

78
00:03:56,000 --> 00:03:58,799
queue uh there are some drafts that have

79
00:03:58,799 --> 00:04:01,200
been in this state in their various

80
00:04:01,200 --> 00:04:03,280
states for some significant amounts of

81
00:04:03,280 --> 00:04:04,159
time

82
00:04:04,159 --> 00:04:06,239
uh usually waiting on

83
00:04:06,239 --> 00:04:09,040
uh author action in in oauth 48 or

84
00:04:09,040 --> 00:04:12,239
waiting for some revisions

85
00:04:12,879 --> 00:04:14,959
the document shepherds will be following

86
00:04:14,959 --> 00:04:16,478
up with you

87
00:04:16,478 --> 00:04:18,720
to strong arm you into getting some of

88
00:04:18,720 --> 00:04:20,639
these things to move forward some of

89
00:04:20,639 --> 00:04:23,120
them may rely lying on the chairs too

90
00:04:23,120 --> 00:04:24,160
but

91
00:04:24,160 --> 00:04:25,280
uh

92
00:04:25,280 --> 00:04:27,040
these are things that we want to try to

93
00:04:27,040 --> 00:04:29,840
push forward

94
00:04:33,360 --> 00:04:34,880
other than that i think you know we have

95
00:04:34,880 --> 00:04:37,759
a number of things uh in flight so it's

96
00:04:37,759 --> 00:04:39,600
you know good work by the working group

97
00:04:39,600 --> 00:04:41,280
good to

98
00:04:41,280 --> 00:04:42,880
see that we're making progress in a lot

99
00:04:42,880 --> 00:04:45,040
of areas

100
00:04:45,040 --> 00:04:47,440
so without further ado i think

101
00:04:47,440 --> 00:04:50,479
we will start on our first topic

102
00:04:50,479 --> 00:04:54,560
which is exported authenticators

103
00:04:55,520 --> 00:04:58,639
you did uh who's presenting that

104
00:04:58,639 --> 00:05:00,320
that's going to be me

105
00:05:00,320 --> 00:05:02,400
do you want me to run to you yeah could

106
00:05:02,400 --> 00:05:03,600
you run the slides there's only there's

107
00:05:03,600 --> 00:05:07,199
only two of them so or three types okay

108
00:05:07,199 --> 00:05:10,919
let me just uh

109
00:05:11,680 --> 00:05:14,639
find them sorry

110
00:05:17,520 --> 00:05:20,080
here we go

111
00:05:23,360 --> 00:05:25,440
hi so this is nick's draft but i think

112
00:05:25,440 --> 00:05:27,759
he's out on vacation um but basically

113
00:05:27,759 --> 00:05:29,440
i'm here as document shepard to try to

114
00:05:29,440 --> 00:05:31,759
get this document to the finish line

115
00:05:31,759 --> 00:05:34,000
because it's been through isg review and

116
00:05:34,000 --> 00:05:37,120
we have one loan comment remaining from

117
00:05:37,120 --> 00:05:39,120
ben kadek and i want to make sure that

118
00:05:39,120 --> 00:05:42,800
we get it reviewed next slide

119
00:05:43,440 --> 00:05:45,759
so again we got one comment from ben and

120
00:05:45,759 --> 00:05:48,080
uh could basically be summarized um that

121
00:05:48,080 --> 00:05:49,680
he noted the are there any security

122
00:05:49,680 --> 00:05:51,600
issues um caused by the fact that the

123
00:05:51,600 --> 00:05:53,280
exported authenticators is based on the

124
00:05:53,280 --> 00:05:55,520
exporter secret which is not incorporate

125
00:05:55,520 --> 00:05:57,280
the entire transcript and this issue

126
00:05:57,280 --> 00:06:01,039
kind of arose during the uh tls 1.3

127
00:06:01,039 --> 00:06:02,479
discussions that were on the mailing

128
00:06:02,479 --> 00:06:03,280
list

129
00:06:03,280 --> 00:06:04,960
and um

130
00:06:04,960 --> 00:06:06,960
nick basically said hey it'd be great if

131
00:06:06,960 --> 00:06:09,199
jonathan could look at this jonathan did

132
00:06:09,199 --> 00:06:12,080
take a look um he did an analysis and

133
00:06:12,080 --> 00:06:14,080
proposed two ways forward uh there's

134
00:06:14,080 --> 00:06:15,680
links there's to the emails and the

135
00:06:15,680 --> 00:06:18,479
proposal uh the response basically was

136
00:06:18,479 --> 00:06:19,680
like hey we could have security

137
00:06:19,680 --> 00:06:21,520
considerations to address this or we can

138
00:06:21,520 --> 00:06:25,440
change uh how the um exporter works and

139
00:06:25,440 --> 00:06:26,960
what he proposed was the security

140
00:06:26,960 --> 00:06:28,240
consideration and that's what we're

141
00:06:28,240 --> 00:06:30,160
going to review next um and so we've

142
00:06:30,160 --> 00:06:31,600
basically taken the approach that since

143
00:06:31,600 --> 00:06:33,520
no one has suggested the other option

144
00:06:33,520 --> 00:06:35,120
that we're gonna go with this so we we

145
00:06:35,120 --> 00:06:36,639
uh um

146
00:06:36,639 --> 00:06:38,400
he proposed some text i guess rich

147
00:06:38,400 --> 00:06:40,240
commented on it and so i'm we're curious

148
00:06:40,240 --> 00:06:43,520
to see that um is this done does anybody

149
00:06:43,520 --> 00:06:45,199
want to add anything is there anything

150
00:06:45,199 --> 00:06:46,960
new that we need to add or can we just

151
00:06:46,960 --> 00:06:49,840
call this closed

152
00:07:03,840 --> 00:07:06,400
going once

153
00:07:06,400 --> 00:07:08,240
going twice

154
00:07:08,240 --> 00:07:10,479
um i did note that martin thompson

155
00:07:10,479 --> 00:07:12,319
suggested in the draft that the short

156
00:07:12,319 --> 00:07:14,400
answer is that this is fine and that tls

157
00:07:14,400 --> 00:07:16,560
1.4 or whatever the next version will be

158
00:07:16,560 --> 00:07:18,479
numbered um might want to include the

159
00:07:18,479 --> 00:07:19,919
entire transcript under the exporter

160
00:07:19,919 --> 00:07:22,639
secret watson also suggested that it was

161
00:07:22,639 --> 00:07:25,120
ready to go

162
00:07:25,599 --> 00:07:27,440
so with that i think we're going to go

163
00:07:27,440 --> 00:07:30,240
ahead and um

164
00:07:30,240 --> 00:07:32,880
go ahead and uh get this merged and get

165
00:07:32,880 --> 00:07:34,479
this draft done and get it in the rc

166
00:07:34,479 --> 00:07:35,599
utter skew

167
00:07:35,599 --> 00:07:38,000
so thank you for your time

168
00:07:38,000 --> 00:07:40,160
ecker were you waiting to speak on this

169
00:07:40,160 --> 00:07:41,599
issue

170
00:07:41,599 --> 00:07:42,880
yeah i'm sorry i'm having trouble

171
00:07:42,880 --> 00:07:47,199
understanding what it says so um

172
00:07:56,319 --> 00:07:57,919
i'm trying to understand what this says

173
00:07:57,919 --> 00:08:00,719
because um

174
00:08:02,000 --> 00:08:03,840
like why what what how does how does the

175
00:08:03,840 --> 00:08:05,840
service any application data

176
00:08:05,840 --> 00:08:08,878
do anything useful here

177
00:08:11,199 --> 00:08:12,800
the client the client's final flight is

178
00:08:12,800 --> 00:08:16,160
not included in the traffic keys

179
00:08:16,800 --> 00:08:19,919
so if i can jump in then kdek i think

180
00:08:19,919 --> 00:08:21,199
that the

181
00:08:21,199 --> 00:08:22,960
application data

182
00:08:22,960 --> 00:08:26,879
is going to trigger the server to

183
00:08:26,879 --> 00:08:28,639
reject the connection or close the

184
00:08:28,639 --> 00:08:31,120
connection if it doesn't like the client

185
00:08:31,120 --> 00:08:33,599
certificate

186
00:08:38,719 --> 00:08:42,640
but the ea doesn't involve the client

187
00:08:46,320 --> 00:08:47,839
i don't understand this the the severe

188
00:08:47,839 --> 00:08:49,519
requests are sent in the channel after

189
00:08:49,519 --> 00:08:50,399
the

190
00:08:50,399 --> 00:08:52,320
entire time the hinging is completed

191
00:08:52,320 --> 00:08:54,080
right

192
00:08:54,080 --> 00:08:56,640
the ea certificate request

193
00:08:56,640 --> 00:08:58,880
yeah

194
00:09:00,959 --> 00:09:02,800
uh can i jump in

195
00:09:02,800 --> 00:09:03,680
please

196
00:09:03,680 --> 00:09:05,120
the

197
00:09:05,120 --> 00:09:07,120
ea request

198
00:09:07,120 --> 00:09:10,080
is can be done out of band so it is not

199
00:09:10,080 --> 00:09:11,680
necessarily sent

200
00:09:11,680 --> 00:09:13,680
after the connection is complete

201
00:09:13,680 --> 00:09:15,519
it can be sent

202
00:09:15,519 --> 00:09:16,800
for example

203
00:09:16,800 --> 00:09:17,800
by the server

204
00:09:17,800 --> 00:09:18,880
[Music]

205
00:09:18,880 --> 00:09:21,440
as long as it's computed the

206
00:09:21,440 --> 00:09:23,200
server finished

207
00:09:23,200 --> 00:09:27,279
so if the client then sends back a

208
00:09:27,279 --> 00:09:30,480
malformed finished message or something

209
00:09:30,480 --> 00:09:31,279
then

210
00:09:31,279 --> 00:09:33,519
you're not guaranteed like the server at

211
00:09:33,519 --> 00:09:35,360
the time it computes

212
00:09:35,360 --> 00:09:37,360
the request

213
00:09:37,360 --> 00:09:38,800
doesn't know

214
00:09:38,800 --> 00:09:40,560
that the client

215
00:09:40,560 --> 00:09:43,279
will successfully complete the handshake

216
00:09:43,279 --> 00:09:44,800
okay but how does any application get

217
00:09:44,800 --> 00:09:46,240
help

218
00:09:46,240 --> 00:09:50,160
um so the only thing that includes the

219
00:09:50,160 --> 00:09:52,000
client finished

220
00:09:52,000 --> 00:09:55,360
is the resumption master secret

221
00:09:55,360 --> 00:09:56,160
so

222
00:09:56,160 --> 00:09:58,480
producing a message that uses the

223
00:09:58,480 --> 00:10:01,040
resumption master secret first

224
00:10:01,040 --> 00:10:02,240
before you

225
00:10:02,240 --> 00:10:05,600
make this request guarantees that the

226
00:10:05,600 --> 00:10:07,839
client and server already agree on the

227
00:10:07,839 --> 00:10:09,360
client finished

228
00:10:09,360 --> 00:10:11,360
okay how does any application need to do

229
00:10:11,360 --> 00:10:12,800
that

230
00:10:12,800 --> 00:10:14,640
um

231
00:10:14,640 --> 00:10:18,640
because it's a

232
00:10:18,640 --> 00:10:20,720
implicit versus explicit

233
00:10:20,720 --> 00:10:23,920
authentication thing once you send

234
00:10:23,920 --> 00:10:27,360
your first thing of application data

235
00:10:27,360 --> 00:10:30,480
uh the server has to agree if sorry if

236
00:10:30,480 --> 00:10:32,720
the servers received it it has to agree

237
00:10:32,720 --> 00:10:34,640
on the client finished or it will abort

238
00:10:34,640 --> 00:10:36,240
the connection

239
00:10:36,240 --> 00:10:37,920
uh i i don't understand this is the

240
00:10:37,920 --> 00:10:39,440
server's instant application data we're

241
00:10:39,440 --> 00:10:41,200
sending us to request the client

242
00:10:41,200 --> 00:10:43,040
and the server is

243
00:10:43,040 --> 00:10:45,120
application data as soon as as soon as

244
00:10:45,120 --> 00:10:48,240
it receives the client's first flight

245
00:10:48,240 --> 00:10:49,839
so the circus application application

246
00:10:49,839 --> 00:10:51,519
have i ever even seen the client's

247
00:10:51,519 --> 00:10:54,760
second flight

248
00:11:04,880 --> 00:11:06,320
right and i think there is a difference

249
00:11:06,320 --> 00:11:08,079
between a new session ticket and

250
00:11:08,079 --> 00:11:10,480
application data and reading and writing

251
00:11:10,480 --> 00:11:13,440
application data thanks dkg in the chat

252
00:11:13,440 --> 00:11:16,480
but also but also the nst but the nst

253
00:11:16,480 --> 00:11:18,959
also doesn't like guarantee agreement on

254
00:11:18,959 --> 00:11:20,720
the resume master secret because you

255
00:11:20,720 --> 00:11:24,079
have to resume to get that information

256
00:11:24,480 --> 00:11:25,839
what the

257
00:11:25,839 --> 00:11:28,399
if i have

258
00:11:28,399 --> 00:11:31,120
the for the server to have complete

259
00:11:31,120 --> 00:11:33,040
for the server to compute the resumption

260
00:11:33,040 --> 00:11:35,839
master secret to produce an nst

261
00:11:35,839 --> 00:11:38,480
for the server to manufacture an nst

262
00:11:38,480 --> 00:11:39,760
it must have received the client

263
00:11:39,760 --> 00:11:40,800
finished

264
00:11:40,800 --> 00:11:41,680
no

265
00:11:41,680 --> 00:11:42,959
no not i'm not if you're not doing

266
00:11:42,959 --> 00:11:44,160
client authentication the servers are

267
00:11:44,160 --> 00:11:47,600
supposed to impact on to do that

268
00:11:47,760 --> 00:11:48,800
i'm looking at the key schedule now

269
00:11:48,800 --> 00:11:50,720
resumption master

270
00:11:50,720 --> 00:11:52,639
uh yeah but you can predict the client's

271
00:11:52,639 --> 00:11:54,079
final flight if a client is not

272
00:11:54,079 --> 00:11:56,480
authenticating correct like i don't

273
00:11:56,480 --> 00:11:57,839
understand like this like the server

274
00:11:57,839 --> 00:11:58,959
like why aren't you telling the server

275
00:11:58,959 --> 00:12:01,040
room don't do it don't do this like like

276
00:12:01,040 --> 00:12:02,639
like don't do anything i mean like as

277
00:12:02,639 --> 00:12:03,839
you understand like if we want the

278
00:12:03,839 --> 00:12:05,680
server not to do anything before

279
00:12:05,680 --> 00:12:07,360
receiving the clients finished don't do

280
00:12:07,360 --> 00:12:10,360
that

281
00:12:13,920 --> 00:12:14,800
like

282
00:12:14,800 --> 00:12:16,720
this isn't clear enough for me to like

283
00:12:16,720 --> 00:12:17,760
agree it's just like ready to move

284
00:12:17,760 --> 00:12:19,680
forward so like i think like like i

285
00:12:19,680 --> 00:12:21,360
guess i mean we have to go read the read

286
00:12:21,360 --> 00:12:22,720
the issue but like i don't think this

287
00:12:22,720 --> 00:12:24,800
text like like i don't think like i

288
00:12:24,800 --> 00:12:25,839
guess what i would say is i don't think

289
00:12:25,839 --> 00:12:27,279
this text is clear enough to put this

290
00:12:27,279 --> 00:12:29,920
specification

291
00:12:30,880 --> 00:12:31,920
like we're going to properly explain the

292
00:12:31,920 --> 00:12:33,040
issue in a way in a way that one can

293
00:12:33,040 --> 00:12:34,720
understand it and that's like that's the

294
00:12:34,720 --> 00:12:36,320
condition so i'm happy to go read that

295
00:12:36,320 --> 00:12:37,680
issue and try to understand what it's

296
00:12:37,680 --> 00:12:39,120
actually saying but whether this class

297
00:12:39,120 --> 00:12:40,560
has those in there or not on the

298
00:12:40,560 --> 00:12:43,199
specification

299
00:12:44,160 --> 00:12:46,399
okay so we'll go back and clarify the

300
00:12:46,399 --> 00:12:47,760
text

301
00:12:47,760 --> 00:12:50,079
i'd be a place to start i mean i guess

302
00:12:50,079 --> 00:12:51,680
i'll try if you issue it to understand

303
00:12:51,680 --> 00:12:52,800
it

304
00:12:52,800 --> 00:12:55,200
i i tagged you as a review actor

305
00:12:55,200 --> 00:12:56,800
thanks

306
00:12:56,800 --> 00:13:01,160
that'll work all right thanks dude

307
00:13:18,079 --> 00:13:21,839
uh flags are next you up are you here

308
00:13:22,720 --> 00:13:24,480
yes sam

309
00:13:24,480 --> 00:13:27,279
can you request the share slides

310
00:13:27,279 --> 00:13:31,600
you want share i can share if you want

311
00:13:40,560 --> 00:13:42,800
what can you request to share

312
00:13:42,800 --> 00:13:44,480
oh um

313
00:13:44,480 --> 00:13:47,279
i thought you were doing that um

314
00:13:47,279 --> 00:13:48,959
where is that

315
00:13:48,959 --> 00:13:50,160
right next to the joint cue button

316
00:13:50,160 --> 00:13:51,360
there's a

317
00:13:51,360 --> 00:13:53,120
request to share a preloaded slides

318
00:13:53,120 --> 00:13:56,120
button

319
00:14:01,080 --> 00:14:04,200
[Music]

320
00:14:06,800 --> 00:14:08,720
yeah perfect

321
00:14:08,720 --> 00:14:10,959
okay

322
00:14:10,959 --> 00:14:12,800
uh so hi

323
00:14:12,800 --> 00:14:15,839
talking about the tls flags

324
00:14:15,839 --> 00:14:17,279
draft and

325
00:14:17,279 --> 00:14:19,440
so what's happened since the last itf

326
00:14:19,440 --> 00:14:22,800
well that's a bad font for 111

327
00:14:22,800 --> 00:14:24,880
so we've gone through uh what we would

328
00:14:24,880 --> 00:14:26,399
last call

329
00:14:26,399 --> 00:14:28,399
we added the requirement to drop

330
00:14:28,399 --> 00:14:30,880
malformed packets and published version

331
00:14:30,880 --> 00:14:34,000
07 that includes this requirement

332
00:14:34,000 --> 00:14:36,000
so are we done not necessarily there's

333
00:14:36,000 --> 00:14:37,360
three

334
00:14:37,360 --> 00:14:40,240
issues that maybe are open

335
00:14:40,240 --> 00:14:43,440
so the first one is about the guidance

336
00:14:43,440 --> 00:14:45,440
for ayana experts

337
00:14:45,440 --> 00:14:48,160
so section 4.1 contains guidance and how

338
00:14:48,160 --> 00:14:50,800
to assign numbers to the flags

339
00:14:50,800 --> 00:14:53,600
and it's kind of a complicated thing so

340
00:14:53,600 --> 00:14:56,000
0 to 7 is for

341
00:14:56,000 --> 00:14:58,000
things that are like everybody has to

342
00:14:58,000 --> 00:15:00,560
implement them and i was thinking of uh

343
00:15:00,560 --> 00:15:01,600
ri

344
00:15:01,600 --> 00:15:02,399
or

345
00:15:02,399 --> 00:15:04,720
a new thing like our eye

346
00:15:04,720 --> 00:15:06,839
and then we have number

347
00:15:06,839 --> 00:15:09,120
8231 that's uh

348
00:15:09,120 --> 00:15:10,399
for um

349
00:15:10,399 --> 00:15:12,079
things coming out of this working group

350
00:15:12,079 --> 00:15:14,800
or specific requests said to have

351
00:15:14,800 --> 00:15:18,240
a small number and then from there on

352
00:15:18,240 --> 00:15:20,240
it's uh things that are

353
00:15:20,240 --> 00:15:23,920
maybe standards tracks but uh not um

354
00:15:23,920 --> 00:15:25,760
are more specialized and then there's

355
00:15:25,760 --> 00:15:27,920
experimental it's kind of a complicated

356
00:15:27,920 --> 00:15:30,160
thing so martin thompson opened issue

357
00:15:30,160 --> 00:15:32,959
number 11 and suggested to remove

358
00:15:32,959 --> 00:15:35,040
all advice and leave it just to the

359
00:15:35,040 --> 00:15:37,040
discretion of the expert

360
00:15:37,040 --> 00:15:38,000
and

361
00:15:38,000 --> 00:15:41,040
i think that giving the expert some

362
00:15:41,040 --> 00:15:43,120
rationale is important given

363
00:15:43,120 --> 00:15:44,880
uh if it's

364
00:15:44,880 --> 00:15:46,720
at some point in the future when i'm no

365
00:15:46,720 --> 00:15:48,000
longer the expert

366
00:15:48,000 --> 00:15:50,560
uh so so far i haven't made any changes

367
00:15:50,560 --> 00:15:52,160
to the draft

368
00:15:52,160 --> 00:15:53,839
if the working wants to make the chain

369
00:15:53,839 --> 00:15:55,839
time

370
00:15:55,839 --> 00:15:58,480
we can do it

371
00:16:01,040 --> 00:16:03,680
yes martin

372
00:16:05,440 --> 00:16:08,000
i don't think i made that specific

373
00:16:08,000 --> 00:16:09,519
suggestion

374
00:16:09,519 --> 00:16:11,839
what i was concerned with was the very

375
00:16:11,839 --> 00:16:14,000
specific set of rules

376
00:16:14,000 --> 00:16:16,320
specific boundaries that you'd set

377
00:16:16,320 --> 00:16:18,639
so you had no no i'm just running off

378
00:16:18,639 --> 00:16:20,160
memory i'm gonna have to go and look at

379
00:16:20,160 --> 00:16:22,079
the draft again but there were specific

380
00:16:22,079 --> 00:16:23,120
points

381
00:16:23,120 --> 00:16:25,920
that you had that you said

382
00:16:25,920 --> 00:16:29,360
i have to follow particular rules

383
00:16:29,519 --> 00:16:31,680
now flags 0 to 7 have to be out of the

384
00:16:31,680 --> 00:16:32,720
working group

385
00:16:32,720 --> 00:16:35,120
8 to 31 have to be standard track

386
00:16:35,120 --> 00:16:36,399
documents

387
00:16:36,399 --> 00:16:38,240
with very specific

388
00:16:38,240 --> 00:16:41,360
conditions on that and 32 to 63 are

389
00:16:41,360 --> 00:16:43,360
experimental and

390
00:16:43,360 --> 00:16:45,040
and that sort of thing and i think that

391
00:16:45,040 --> 00:16:46,720
what you want to provide is

392
00:16:46,720 --> 00:16:49,360
general guidance to experts

393
00:16:49,360 --> 00:16:51,360
and maybe reserve the top

394
00:16:51,360 --> 00:16:54,160
few flags because they're super super

395
00:16:54,160 --> 00:16:55,920
important or something but

396
00:16:55,920 --> 00:16:57,360
the

397
00:16:57,360 --> 00:16:59,920
level of specificity here is

398
00:16:59,920 --> 00:17:01,920
far in excess of what i think is

399
00:17:01,920 --> 00:17:04,920
reasonable

400
00:17:10,079 --> 00:17:12,400
you can see that practically

401
00:17:12,400 --> 00:17:14,959
and the ayana people always ask about

402
00:17:14,959 --> 00:17:16,319
every assignment

403
00:17:16,319 --> 00:17:18,400
they don't just say oh well we figure

404
00:17:18,400 --> 00:17:19,839
out through the

405
00:17:19,839 --> 00:17:21,760
um

406
00:17:21,760 --> 00:17:23,679
the rules and we think you should do

407
00:17:23,679 --> 00:17:26,880
that one they always ask so

408
00:17:26,880 --> 00:17:29,520
yes eric

409
00:17:30,160 --> 00:17:31,600
i i basically agree with martin's

410
00:17:31,600 --> 00:17:33,600
guidance which is like if we think that

411
00:17:33,600 --> 00:17:35,440
we i mean so obvious obviously like just

412
00:17:35,440 --> 00:17:36,960
we're all on the same page um to restate

413
00:17:36,960 --> 00:17:38,880
the obvious um you know the resources

414
00:17:38,880 --> 00:17:40,640
being conserved is a big pile of zeros

415
00:17:40,640 --> 00:17:42,080
at the front of the

416
00:17:42,080 --> 00:17:44,880
front of the flags for the fly's word um

417
00:17:44,880 --> 00:17:48,160
and so um i grew them t like and first

418
00:17:48,160 --> 00:17:49,679
of all i guess like this is already a

419
00:17:49,679 --> 00:17:51,360
relatively small idea so that's a better

420
00:17:51,360 --> 00:17:52,240
shape than that as long as you don't

421
00:17:52,240 --> 00:17:53,919
start like reserving like you know out

422
00:17:53,919 --> 00:17:57,280
like wait wait but um the um i mean so i

423
00:17:57,280 --> 00:17:59,440
think like my sense would be like let's

424
00:17:59,440 --> 00:18:01,039
reserve like

425
00:18:01,039 --> 00:18:04,080
zero to seven or zero zero to fifteen

426
00:18:04,080 --> 00:18:05,039
like

427
00:18:05,039 --> 00:18:06,960
um you know fuel that's appropriate for

428
00:18:06,960 --> 00:18:08,799
like working group discretion everything

429
00:18:08,799 --> 00:18:10,000
else should be allocated in sequence

430
00:18:10,000 --> 00:18:11,440
right after that and if this turns out

431
00:18:11,440 --> 00:18:12,480
to be like a nightmare and we have like

432
00:18:12,480 --> 00:18:14,160
a usually sparse thing then we can event

433
00:18:14,160 --> 00:18:15,360
like a new flags thing with like

434
00:18:15,360 --> 00:18:17,600
romantic coding for zeros or something

435
00:18:17,600 --> 00:18:20,320
but um but like i just like you know

436
00:18:20,320 --> 00:18:21,440
trying to spend a lot of effort trying

437
00:18:21,440 --> 00:18:23,039
to like optimize down that last night or

438
00:18:23,039 --> 00:18:24,240
two i mean

439
00:18:24,240 --> 00:18:25,520
that's the kind of thing ctls tries to

440
00:18:25,520 --> 00:18:26,400
do i don't think it's particularly

441
00:18:26,400 --> 00:18:28,080
helpful in class i mean the handy is

442
00:18:28,080 --> 00:18:30,720
already quite large

443
00:18:33,760 --> 00:18:35,760
so i'd be happy with the suggested text

444
00:18:35,760 --> 00:18:38,000
to replace where what there is right now

445
00:18:38,000 --> 00:18:40,080
in 4.1

446
00:18:40,080 --> 00:18:41,120
there

447
00:18:41,120 --> 00:18:42,320
and empty do you want to take that or

448
00:18:42,320 --> 00:18:43,840
you don't need to take it

449
00:18:43,840 --> 00:18:45,120
i think you had some strong you probably

450
00:18:45,120 --> 00:18:46,160
thought it was more than i have because

451
00:18:46,160 --> 00:18:47,280
like i thought about it for like all

452
00:18:47,280 --> 00:18:49,918
i've been american

453
00:18:57,360 --> 00:18:59,919
okay so can we go on to the

454
00:18:59,919 --> 00:19:01,440
next issue

455
00:19:01,440 --> 00:19:03,120
okay so

456
00:19:03,120 --> 00:19:05,280
the next issue about is about the

457
00:19:05,280 --> 00:19:07,280
recommended

458
00:19:07,280 --> 00:19:10,400
um flag well flag in the uh yana

459
00:19:10,400 --> 00:19:12,240
registry so the

460
00:19:12,240 --> 00:19:14,640
recommended flag is in the new registry

461
00:19:14,640 --> 00:19:16,559
the relative flags is

462
00:19:16,559 --> 00:19:17,360
uh

463
00:19:17,360 --> 00:19:19,760
what it says right now is uh recommended

464
00:19:19,760 --> 00:19:22,960
which is either wire or y or n value

465
00:19:22,960 --> 00:19:24,720
determined in the document defining the

466
00:19:24,720 --> 00:19:25,840
optional

467
00:19:25,840 --> 00:19:28,559
feature and doesn't say really anything

468
00:19:28,559 --> 00:19:29,520
about

469
00:19:29,520 --> 00:19:31,679
when we should

470
00:19:31,679 --> 00:19:33,520
when it should be recommended when the

471
00:19:33,520 --> 00:19:34,720
flag should be recommended when it

472
00:19:34,720 --> 00:19:36,080
should not

473
00:19:36,080 --> 00:19:37,919
the assumption was that it's the same

474
00:19:37,919 --> 00:19:41,120
thing as in all the other registries and

475
00:19:41,120 --> 00:19:44,400
specified in rfc 8447.

476
00:19:44,400 --> 00:19:45,280
so

477
00:19:45,280 --> 00:19:47,360
do we need an extra line of text that

478
00:19:47,360 --> 00:19:50,320
says so explicitly the meaning is like

479
00:19:50,320 --> 00:19:53,840
in rfc 8447

480
00:19:58,160 --> 00:19:59,840
yes joe

481
00:19:59,840 --> 00:20:02,880
hi uh hi this is honest yeah i thought

482
00:20:02,880 --> 00:20:04,559
it would be good to have some extra text

483
00:20:04,559 --> 00:20:05,600
as i

484
00:20:05,600 --> 00:20:07,600
mentioned on the mailing list like this

485
00:20:07,600 --> 00:20:08,240
is

486
00:20:08,240 --> 00:20:10,000
everything but clear like just have

487
00:20:10,000 --> 00:20:12,640
something meaningful there um what

488
00:20:12,640 --> 00:20:15,600
recommended here actually means

489
00:20:15,600 --> 00:20:17,360
like i don't care about it but it really

490
00:20:17,360 --> 00:20:19,280
is but but

491
00:20:19,280 --> 00:20:20,960
not saying anything i think is not a

492
00:20:20,960 --> 00:20:22,400
good idea

493
00:20:22,400 --> 00:20:24,880
so we're saying this is the same as what

494
00:20:24,880 --> 00:20:28,080
it says in section 5 of rfc 8447 which

495
00:20:28,080 --> 00:20:29,840
defines the recommended column for all

496
00:20:29,840 --> 00:20:32,080
the other registries

497
00:20:32,080 --> 00:20:32,840
well

498
00:20:32,840 --> 00:20:35,600
um in in this case it's a little bit

499
00:20:35,600 --> 00:20:37,840
different uh because

500
00:20:37,840 --> 00:20:41,120
like you are defining flags um which

501
00:20:41,120 --> 00:20:44,320
by its own nature already different from

502
00:20:44,320 --> 00:20:47,360
um in the general purpose uh extensions

503
00:20:47,360 --> 00:20:50,159
like the flags refer to some the need

504
00:20:50,159 --> 00:20:52,320
for having something optimized right

505
00:20:52,320 --> 00:20:54,640
that's why the flags are defined

506
00:20:54,640 --> 00:20:56,080
um

507
00:20:56,080 --> 00:20:56,799
right

508
00:20:56,799 --> 00:20:58,799
semantically they're just like an empty

509
00:20:58,799 --> 00:21:01,799
extension

510
00:21:06,240 --> 00:21:08,799
well um i went through the through the

511
00:21:08,799 --> 00:21:13,360
the list of extensions and even with uh

512
00:21:13,360 --> 00:21:14,880
what with the

513
00:21:14,880 --> 00:21:18,320
language from the r from the tls rfc

514
00:21:18,320 --> 00:21:20,240
like many of them don't make any sense

515
00:21:20,240 --> 00:21:23,600
like recommend it for what

516
00:21:24,640 --> 00:21:26,080
so that's

517
00:21:26,080 --> 00:21:30,720
what section 5 of 8447 is for means that

518
00:21:30,720 --> 00:21:32,400
um

519
00:21:32,400 --> 00:21:33,679
oh yeah

520
00:21:33,679 --> 00:21:36,559
yeah i can propose some text as uh dkg

521
00:21:36,559 --> 00:21:38,159
proposes but uh

522
00:21:38,159 --> 00:21:40,640
i i i'm in general against like just

523
00:21:40,640 --> 00:21:42,080
putting some columns there and

524
00:21:42,080 --> 00:21:43,919
populating with values nobody knows what

525
00:21:43,919 --> 00:21:47,679
they mean like and these type of things

526
00:21:52,240 --> 00:21:54,080
second i guess uh

527
00:21:54,080 --> 00:21:56,639
i'm sorry

528
00:21:57,360 --> 00:21:59,280
i guess at least they mean that we

529
00:21:59,280 --> 00:22:00,720
expect

530
00:22:00,720 --> 00:22:02,799
all or most uh

531
00:22:02,799 --> 00:22:05,280
implementations to implement this flag

532
00:22:05,280 --> 00:22:08,559
because it's recommended but

533
00:22:08,799 --> 00:22:13,840
that's the informal way of expressing it

534
00:22:16,480 --> 00:22:18,640
yeah and i think maybe this is something

535
00:22:18,640 --> 00:22:21,520
we would touch on with rfc 8447 this

536
00:22:21,520 --> 00:22:24,799
discussion later on but i think

537
00:22:24,799 --> 00:22:26,640
some of this may be around ambiguity

538
00:22:26,640 --> 00:22:29,440
about what recommended means in general

539
00:22:29,440 --> 00:22:32,960
or the yes and no i think those there's

540
00:22:32,960 --> 00:22:34,400
things that need to be clarified there

541
00:22:34,400 --> 00:22:36,400
and i would hesitate to put something

542
00:22:36,400 --> 00:22:38,559
too specific in here

543
00:22:38,559 --> 00:22:40,400
um when that should be really be

544
00:22:40,400 --> 00:22:44,799
clarified in the 447.

545
00:22:46,640 --> 00:22:48,880
so that tells that it's a good idea to

546
00:22:48,880 --> 00:22:52,240
just refer to 8447 or

547
00:22:52,240 --> 00:22:55,840
or maybe quote a line from there

548
00:22:56,559 --> 00:22:58,720
and wait for an update to

549
00:22:58,720 --> 00:23:00,480
come and update every registry including

550
00:23:00,480 --> 00:23:02,240
this one

551
00:23:02,240 --> 00:23:04,799
yes john

552
00:23:04,799 --> 00:23:05,679
yeah

553
00:23:05,679 --> 00:23:08,080
if it's updated in eight four four seven

554
00:23:08,080 --> 00:23:10,159
that's enough i think we should not

555
00:23:10,159 --> 00:23:13,280
introduce more of this confusing one bit

556
00:23:13,280 --> 00:23:14,880
recommended which

557
00:23:14,880 --> 00:23:16,559
i think in

558
00:23:16,559 --> 00:23:18,799
people outside of the tls working group

559
00:23:18,799 --> 00:23:20,400
does not understand what that

560
00:23:20,400 --> 00:23:22,960
recommended means

561
00:23:22,960 --> 00:23:25,120
but fixing it in general would be even

562
00:23:25,120 --> 00:23:27,600
better

563
00:23:31,840 --> 00:23:34,320
okay i'm still not getting guidance on

564
00:23:34,320 --> 00:23:37,840
what to do with the draft

565
00:23:46,400 --> 00:23:47,840
i think this column should look exactly

566
00:23:47,840 --> 00:23:49,679
like the column for other extensions and

567
00:23:49,679 --> 00:23:51,360
so we should defer this discussion 84

568
00:23:51,360 --> 00:23:53,679
47. and we want to just go especially if

569
00:23:53,679 --> 00:23:55,039
we're saying this like whatever the heck

570
00:23:55,039 --> 00:23:57,679
we decide like the um you know what

571
00:23:57,679 --> 00:23:58,640
it'll be what's applied here because

572
00:23:58,640 --> 00:24:00,080
these are as you say just like regular

573
00:24:00,080 --> 00:24:01,600
extensions the purpose of the the

574
00:24:01,600 --> 00:24:03,679
purpose of this field is not to cons not

575
00:24:03,679 --> 00:24:06,240
to say space is to indicate to people

576
00:24:06,240 --> 00:24:07,200
what

577
00:24:07,200 --> 00:24:08,000
like

578
00:24:08,000 --> 00:24:09,600
what things what things itf has

579
00:24:09,600 --> 00:24:11,039
confidence in one thing it does not have

580
00:24:11,039 --> 00:24:14,000
confidence in and um and you know it's

581
00:24:14,000 --> 00:24:15,039
certainly possible to have a one bit

582
00:24:15,039 --> 00:24:16,159
extension which you have no confidence

583
00:24:16,159 --> 00:24:17,840
in there's everyone essentially says

584
00:24:17,840 --> 00:24:19,360
like don't cook anything like we have

585
00:24:19,360 --> 00:24:20,400
like very little confidence and that

586
00:24:20,400 --> 00:24:21,760
would actually have very high confidence

587
00:24:21,760 --> 00:24:23,760
it was bad so like i i don't really

588
00:24:23,760 --> 00:24:24,880
think it's possible to have one bit

589
00:24:24,880 --> 00:24:27,039
extensions which like we have an opinion

590
00:24:27,039 --> 00:24:30,880
on positive or not so um um so um

591
00:24:30,880 --> 00:24:32,559
so i don't think that like i don't think

592
00:24:32,559 --> 00:24:34,559
that the the encoding really is relevant

593
00:24:34,559 --> 00:24:35,600
to this question of what the meaning of

594
00:24:35,600 --> 00:24:37,440
the columns is so like my vote is that

595
00:24:37,440 --> 00:24:40,240
this column this merely is exactly the

596
00:24:40,240 --> 00:24:42,640
same as as the other one and then we can

597
00:24:42,640 --> 00:24:44,799
debate like about 20 minutes what the

598
00:24:44,799 --> 00:24:47,840
other one means

599
00:24:48,080 --> 00:24:49,919
okay sounds good

600
00:24:49,919 --> 00:24:51,360
hey john i wasn't sure are you still in

601
00:24:51,360 --> 00:24:53,678
the queue

602
00:24:56,559 --> 00:24:58,720
um hey i think the easiest thing to do

603
00:24:58,720 --> 00:25:01,679
is just reference 8447 um

604
00:25:01,679 --> 00:25:03,120
because then you don't have to worry

605
00:25:03,120 --> 00:25:05,919
about updating it uh this document if

606
00:25:05,919 --> 00:25:07,360
you end up deciding to change the other

607
00:25:07,360 --> 00:25:08,880
values because then that document has to

608
00:25:08,880 --> 00:25:10,799
update two things so it's probably best

609
00:25:10,799 --> 00:25:12,559
just to point and then move on and just

610
00:25:12,559 --> 00:25:13,440
kind of

611
00:25:13,440 --> 00:25:14,720
deal with it this thing will go in the

612
00:25:14,720 --> 00:25:16,400
rfc editor's queue and it can wait for

613
00:25:16,400 --> 00:25:17,760
the best document which hopefully

614
00:25:17,760 --> 00:25:20,960
shouldn't take all that long to catch up

615
00:25:20,960 --> 00:25:22,480
okay

616
00:25:22,480 --> 00:25:24,480
right so i'll

617
00:25:24,480 --> 00:25:27,120
go to the last issue

618
00:25:27,120 --> 00:25:29,679
probably the more controversial one

619
00:25:29,679 --> 00:25:34,000
so about dtls 1.2 so i can cross sorry

620
00:25:34,000 --> 00:25:35,760
i'm from butchering your name

621
00:25:35,760 --> 00:25:38,000
opened issue number 13 asking for the

622
00:25:38,000 --> 00:25:41,200
flag extension to be defined in dtls 1.2

623
00:25:41,200 --> 00:25:44,159
as well it's already relevant for tls

624
00:25:44,159 --> 00:25:45,919
1.3 and

625
00:25:45,919 --> 00:25:49,760
dtls 1.3 they want it for dtls 1.2 as

626
00:25:49,760 --> 00:25:51,120
well

627
00:25:51,120 --> 00:25:54,640
this will be useful for dtls rrc return

628
00:25:54,640 --> 00:25:57,279
rule to ability check which does address

629
00:25:57,279 --> 00:26:01,360
dtls 1.2 as well as dtls 1.3

630
00:26:01,360 --> 00:26:04,640
so currently the tls flags is only for

631
00:26:04,640 --> 00:26:07,520
the 1.3 versions so up to the working

632
00:26:07,520 --> 00:26:08,799
group if

633
00:26:08,799 --> 00:26:10,400
we want this to also

634
00:26:10,400 --> 00:26:14,320
somehow apply to dtls 1.2

635
00:26:17,440 --> 00:26:18,960
the backstory here is for the working

636
00:26:18,960 --> 00:26:20,640
group is that typically when we start

637
00:26:20,640 --> 00:26:23,120
working on new extensions the default is

638
00:26:23,120 --> 00:26:26,480
that they apply to d to 1.3 and later um

639
00:26:26,480 --> 00:26:27,760
and not backwards and then we have to

640
00:26:27,760 --> 00:26:29,520
kind of make an explicit decision to go

641
00:26:29,520 --> 00:26:31,520
back and try to support something that

642
00:26:31,520 --> 00:26:35,200
essentially back port it to 1.2

643
00:26:35,679 --> 00:26:38,400
yeah so one thing the think is that if

644
00:26:38,400 --> 00:26:41,039
we do this for one if we add this to

645
00:26:41,039 --> 00:26:43,520
dtls 1.2 then we have to have another

646
00:26:43,520 --> 00:26:46,480
column that says does this apply to dtls

647
00:26:46,480 --> 00:26:47,760
1.2

648
00:26:47,760 --> 00:26:48,960
or

649
00:26:48,960 --> 00:26:50,640
do everything

650
00:26:50,640 --> 00:26:55,600
or rather is this flag only 1.3 or

651
00:26:55,600 --> 00:26:59,760
well or only 1.2 or both yeah

652
00:27:03,679 --> 00:27:06,679
ben

653
00:27:06,799 --> 00:27:08,960
i think he sort of started to touch on

654
00:27:08,960 --> 00:27:11,520
the point i got you to make which is

655
00:27:11,520 --> 00:27:12,880
sort of the

656
00:27:12,880 --> 00:27:14,640
scope at which

657
00:27:14,640 --> 00:27:17,279
the protocol version applicability

658
00:27:17,279 --> 00:27:20,240
is applied over and so you know right

659
00:27:20,240 --> 00:27:22,559
now we're saying tls flags extension is

660
00:27:22,559 --> 00:27:24,080
1.3 only

661
00:27:24,080 --> 00:27:25,200
and there's

662
00:27:25,200 --> 00:27:27,679
there is the conclusion the corollary is

663
00:27:27,679 --> 00:27:29,120
that all of the individual flags are

664
00:27:29,120 --> 00:27:31,840
also 1.3 only so if we start saying that

665
00:27:31,840 --> 00:27:34,159
okay the flags extension itself can now

666
00:27:34,159 --> 00:27:36,159
be used in 1.2

667
00:27:36,159 --> 00:27:37,039
um

668
00:27:37,039 --> 00:27:38,000
like

669
00:27:38,000 --> 00:27:40,240
is the scope of that literally just the

670
00:27:40,240 --> 00:27:41,919
flags extension and then we have to say

671
00:27:41,919 --> 00:27:43,440
something else about each individual

672
00:27:43,440 --> 00:27:46,000
flag or is the implication that all of

673
00:27:46,000 --> 00:27:48,720
the flags contained within it are also

674
00:27:48,720 --> 00:27:50,559
applicable to tla to

675
00:27:50,559 --> 00:27:53,200
tls and dtls 1.2 as well

676
00:27:53,200 --> 00:27:55,039
because if that's the case then there's

677
00:27:55,039 --> 00:27:57,279
a really severe implementation burden as

678
00:27:57,279 --> 00:27:59,919
david benjamin noted where now if you're

679
00:27:59,919 --> 00:28:02,000
a dual stack and you want to implement a

680
00:28:02,000 --> 00:28:03,520
new flag you have to implement it for

681
00:28:03,520 --> 00:28:06,240
both protocol versions at the same time

682
00:28:06,240 --> 00:28:07,760
and having recently gone through this

683
00:28:07,760 --> 00:28:10,640
exercise for raw public key it's kind of

684
00:28:10,640 --> 00:28:12,240
tedious to have to do both protocol

685
00:28:12,240 --> 00:28:13,840
versions

686
00:28:13,840 --> 00:28:15,200
it can be

687
00:28:15,200 --> 00:28:17,279
a fair bit simpler to only work on the

688
00:28:17,279 --> 00:28:20,159
telephone 3 version

689
00:28:20,159 --> 00:28:22,559
and i also don't think that

690
00:28:22,559 --> 00:28:24,640
there's a very strong

691
00:28:24,640 --> 00:28:26,720
argument for

692
00:28:26,720 --> 00:28:29,039
adding the extra granularity and having

693
00:28:29,039 --> 00:28:30,640
each individual flag

694
00:28:30,640 --> 00:28:34,240
say is this valid for pls 1.2 or not

695
00:28:34,240 --> 00:28:36,000
but i also don't have a great argument

696
00:28:36,000 --> 00:28:38,480
against it

697
00:28:41,120 --> 00:28:43,520
honest

698
00:28:43,600 --> 00:28:46,080
yeah this for me this is really a very

699
00:28:46,080 --> 00:28:47,760
practical issue like i was working on

700
00:28:47,760 --> 00:28:50,480
the update uh of our implementation for

701
00:28:50,480 --> 00:28:51,760
the cid

702
00:28:51,760 --> 00:28:52,960
and uh

703
00:28:52,960 --> 00:28:55,679
and also this um our this return

704
00:28:55,679 --> 00:28:58,159
routability check is is part of that

705
00:28:58,159 --> 00:28:59,520
story

706
00:28:59,520 --> 00:29:00,880
and

707
00:29:00,880 --> 00:29:03,679
we have uh the 1.2 and the 1.3 and the

708
00:29:03,679 --> 00:29:05,679
question for me was like i have to

709
00:29:05,679 --> 00:29:08,320
provide features for both because both

710
00:29:08,320 --> 00:29:10,480
um provide this

711
00:29:10,480 --> 00:29:12,640
cid for dtls

712
00:29:12,640 --> 00:29:14,799
what what should i do do i have to write

713
00:29:14,799 --> 00:29:17,440
a different extension for 1.2 and have

714
00:29:17,440 --> 00:29:20,880
and again use the flux extension in 1.3

715
00:29:20,880 --> 00:29:22,080
or

716
00:29:22,080 --> 00:29:24,000
what's the story and that's why i was

717
00:29:24,000 --> 00:29:27,840
asking for that on the mailing list

718
00:29:29,279 --> 00:29:30,960
and in general of course it raises the

719
00:29:30,960 --> 00:29:33,840
question of like what happens um with

720
00:29:33,840 --> 00:29:37,039
the details or with dls and details 1.2

721
00:29:37,039 --> 00:29:40,240
in general like if someone wants to sort

722
00:29:40,240 --> 00:29:42,159
of define an extension and probably this

723
00:29:42,159 --> 00:29:44,799
is less uh

724
00:29:44,799 --> 00:29:47,279
fewer people want to do that but uh it

725
00:29:47,279 --> 00:29:48,880
it will be out in the field for a while

726
00:29:48,880 --> 00:29:50,399
because there's it's still a fine

727
00:29:50,399 --> 00:29:52,240
brother code like this it's not broken

728
00:29:52,240 --> 00:29:54,320
if you use it with the right uh

729
00:29:54,320 --> 00:29:57,760
algorithms in the right settings

730
00:29:59,279 --> 00:30:02,320
and we have already decided that uh

731
00:30:02,320 --> 00:30:07,039
rc does apply to dtls 1.2 it's not just

732
00:30:07,039 --> 00:30:09,840
the latest version

733
00:30:16,320 --> 00:30:17,919
i guess we could

734
00:30:17,919 --> 00:30:19,840
work around the

735
00:30:19,840 --> 00:30:22,000
complexity of having the same extension

736
00:30:22,000 --> 00:30:22,720
by

737
00:30:22,720 --> 00:30:25,120
making this two extensions one

738
00:30:25,120 --> 00:30:29,760
flags for 1.2 and one flags for 1.3 and

739
00:30:29,760 --> 00:30:32,399
if you want a certain flag to apply to

740
00:30:32,399 --> 00:30:34,399
both then you just

741
00:30:34,399 --> 00:30:37,039
update both registries and to add the

742
00:30:37,039 --> 00:30:39,679
flag to each extension it's

743
00:30:39,679 --> 00:30:41,520
a bit more complex but

744
00:30:41,520 --> 00:30:43,279
the complexity then

745
00:30:43,279 --> 00:30:46,840
dies with 1.2

746
00:30:54,880 --> 00:30:55,760
i guess

747
00:30:55,760 --> 00:30:57,360
i kind of think this is a this is a set

748
00:30:57,360 --> 00:30:59,760
of paramedic questions um um because no

749
00:30:59,760 --> 00:31:01,919
answer seems ideal um

750
00:31:01,919 --> 00:31:03,440
uh you know

751
00:31:03,440 --> 00:31:04,880
basically

752
00:31:04,880 --> 00:31:07,440
it is a is as ben's as a hassle to have

753
00:31:07,440 --> 00:31:08,799
half like

754
00:31:08,799 --> 00:31:10,399
been maybe been support like this for

755
00:31:10,399 --> 00:31:13,840
1.2 1.3 um i i think if we were going to

756
00:31:13,840 --> 00:31:15,519
do that we would have to say

757
00:31:15,519 --> 00:31:17,440
whether it's two cup points or one that

758
00:31:17,440 --> 00:31:18,960
the flags are valid from one point two

759
00:31:18,960 --> 00:31:20,000
and not knowledge one point three and

760
00:31:20,000 --> 00:31:22,159
vice versa right um and probably we

761
00:31:22,159 --> 00:31:23,360
shouldn't define any that are right home

762
00:31:23,360 --> 00:31:27,279
but two only um um you know uh

763
00:31:27,279 --> 00:31:29,279
like it's not i think like i guess the

764
00:31:29,279 --> 00:31:32,159
question i would have is like you know

765
00:31:32,159 --> 00:31:33,760
like is like

766
00:31:33,760 --> 00:31:35,440
the people the people who the people

767
00:31:35,440 --> 00:31:36,880
would like to have this from 1.2 like

768
00:31:36,880 --> 00:31:38,399
how inconvenient is it to like not have

769
00:31:38,399 --> 00:31:39,440
it if the answer is like really

770
00:31:39,440 --> 00:31:41,039
inconvenient then we should do it and at

771
00:31:41,039 --> 00:31:42,159
the end

772
00:31:42,159 --> 00:31:43,519
unless the end because because i already

773
00:31:43,519 --> 00:31:45,440
heard from david ben and ben and

774
00:31:45,440 --> 00:31:47,279
benjamin kadek that's like not that

775
00:31:47,279 --> 00:31:49,679
inconvenient to like implement it's just

776
00:31:49,679 --> 00:31:51,039
kind of inconvenient and so i don't feel

777
00:31:51,039 --> 00:31:52,399
that strongly about it so i guess like

778
00:31:52,399 --> 00:31:54,240
you know i like to hear from honest and

779
00:31:54,240 --> 00:31:55,840
uh and other people who sort of like

780
00:31:55,840 --> 00:31:57,600
like that this is valuable like like

781
00:31:57,600 --> 00:31:58,880
this is getting a real pain in your ass

782
00:31:58,880 --> 00:32:00,399
if we don't do it if the answer is the

783
00:32:00,399 --> 00:32:01,519
answer is yes though you shouldn't like

784
00:32:01,519 --> 00:32:03,200
do it um even though like kind of this

785
00:32:03,200 --> 00:32:06,240
might um

786
00:32:07,519 --> 00:32:08,799
and i guess i guess i would observe like

787
00:32:08,799 --> 00:32:12,600
you know you could just not do it

788
00:32:20,080 --> 00:32:22,159
echo to your point and that that's where

789
00:32:22,159 --> 00:32:23,200
i was going to go is that you know

790
00:32:23,200 --> 00:32:25,519
apparently this could be useful well

791
00:32:25,519 --> 00:32:27,440
like useful like how useful like you're

792
00:32:27,440 --> 00:32:29,279
going to use it every time you you send

793
00:32:29,279 --> 00:32:32,720
a dtls 1.2 um you know set up details

794
00:32:32,720 --> 00:32:35,519
1.2 and handshake

795
00:32:35,519 --> 00:32:37,840
or not so that's kind of where i'm i'm

796
00:32:37,840 --> 00:32:42,039
i'm kind of thinking about this

797
00:32:45,120 --> 00:32:46,240
i don't know i mean you actually i mean

798
00:32:46,240 --> 00:32:48,159
i guess i guess oh i see honestly

799
00:32:48,159 --> 00:32:49,519
to talk about it but i think i i want to

800
00:32:49,519 --> 00:32:50,799
appreciate it at home at this point

801
00:32:50,799 --> 00:32:52,240
because i guess

802
00:32:52,240 --> 00:32:53,679
honestly but most house is about to make

803
00:32:53,679 --> 00:32:57,399
a very impassioned case

804
00:32:57,679 --> 00:32:59,360
yeah i think it's not for me it's not

805
00:32:59,360 --> 00:33:01,279
terribly inconvenient it's just i need

806
00:33:01,279 --> 00:33:04,799
to define an um a separate extension for

807
00:33:04,799 --> 00:33:07,440
1.2 and then

808
00:33:07,440 --> 00:33:08,799
that means

809
00:33:08,799 --> 00:33:10,799
a few more bites over the wire extra

810
00:33:10,799 --> 00:33:13,440
coat but only a little bit um

811
00:33:13,440 --> 00:33:15,679
so so it's not uh

812
00:33:15,679 --> 00:33:17,519
it's it's definitely not the end of the

813
00:33:17,519 --> 00:33:20,320
world so i wouldn't uh

814
00:33:20,320 --> 00:33:23,799
die for this

815
00:33:27,760 --> 00:33:29,760
so i guess we should do do we need to do

816
00:33:29,760 --> 00:33:31,600
a hum if the person that was asking the

817
00:33:31,600 --> 00:33:33,360
question uh isn't willing to fall on a

818
00:33:33,360 --> 00:33:34,240
sword

819
00:33:34,240 --> 00:33:35,919
um i'm thinking that we should basically

820
00:33:35,919 --> 00:33:39,640
just leave it as is

821
00:33:41,120 --> 00:33:43,679
it definitely works for me

822
00:33:43,679 --> 00:33:46,159
okay let's go ahead and note that

823
00:33:46,159 --> 00:33:48,720
thank you and thanks honest for uh being

824
00:33:48,720 --> 00:33:50,799
pragmatic

825
00:33:50,799 --> 00:33:52,399
okay so

826
00:33:52,399 --> 00:33:54,960
that's the third and last issue that i

827
00:33:54,960 --> 00:33:56,320
know about

828
00:33:56,320 --> 00:33:58,000
which leaves us with the question if

829
00:33:58,000 --> 00:34:01,960
there are any other issues

830
00:34:11,520 --> 00:34:12,560
um

831
00:34:12,560 --> 00:34:13,918
so in the interest of time i think we

832
00:34:13,918 --> 00:34:14,960
should move forward to the next

833
00:34:14,960 --> 00:34:19,119
presentation uh which is details 1.3

834
00:34:19,119 --> 00:34:23,359
okay so i'll stop the slideshow

835
00:34:31,199 --> 00:34:32,560
what to present which button is that

836
00:34:32,560 --> 00:34:34,560
again is that it says presentation paper

837
00:34:34,560 --> 00:34:35,918
button

838
00:34:35,918 --> 00:34:38,480
the paper button

839
00:34:38,480 --> 00:34:41,359
right next to joining the queue

840
00:34:41,359 --> 00:34:43,760
oh okay

841
00:34:43,760 --> 00:34:46,839
how did i not recognize that

842
00:34:46,839 --> 00:34:48,480
um

843
00:34:48,480 --> 00:34:50,879
okay uh okay why can't i just talk

844
00:34:50,879 --> 00:34:52,719
multiples no i can only share one okay

845
00:34:52,719 --> 00:34:55,119
um that would have been awesome um

846
00:34:55,119 --> 00:34:57,839
so yeah but uh obviously um i i'm too

847
00:34:57,839 --> 00:34:59,359
clear i've heard like temporary

848
00:34:59,359 --> 00:35:01,280
bankruptcy any four forty six ps um i

849
00:35:01,280 --> 00:35:02,960
just wanted to um i still plan to work

850
00:35:02,960 --> 00:35:05,520
on it um but um um i i prefer this

851
00:35:05,520 --> 00:35:06,400
meeting i went through a bunch of

852
00:35:06,400 --> 00:35:07,920
comments david mentioned had and

853
00:35:07,920 --> 00:35:10,079
realized that i was not able to like

854
00:35:10,079 --> 00:35:11,920
like produce useful discussion in the

855
00:35:11,920 --> 00:35:13,440
time i had available and so i'm planning

856
00:35:13,440 --> 00:35:14,800
to do that but like i didn't see any

857
00:35:14,800 --> 00:35:17,280
point in requiring us to discuss it um

858
00:35:17,280 --> 00:35:19,280
when i wasn't here does anything

859
00:35:19,280 --> 00:35:20,960
meaningful um

860
00:35:20,960 --> 00:35:23,760
next slide please

861
00:35:25,119 --> 00:35:28,079
no it's me isn't it that's right um

862
00:35:28,079 --> 00:35:30,800
okay yeah i just did that um it's not

863
00:35:30,800 --> 00:35:32,400
used to being i used to have net control

864
00:35:32,400 --> 00:35:35,680
so um uh the status of g203 is um that

865
00:35:35,680 --> 00:35:37,359
we're all 48 but we've had two celsium

866
00:35:37,359 --> 00:35:38,640
issues raised that we thought we had to

867
00:35:38,640 --> 00:35:41,440
deal with um and so um this is hoping to

868
00:35:41,440 --> 00:35:43,040
get this issues out as fast as possible

869
00:35:43,040 --> 00:35:45,599
and then get this out the door um

870
00:35:45,599 --> 00:35:48,320
so the first subset of issue um was

871
00:35:48,320 --> 00:35:51,200
raised by i'm john matson um uh which is

872
00:35:51,200 --> 00:35:53,200
that because gtls has much tighter

873
00:35:53,200 --> 00:35:56,800
record limits than tls for asgcm um due

874
00:35:56,800 --> 00:35:59,920
to the the um the fact that forgery that

875
00:35:59,920 --> 00:36:02,720
that um mass failure does not cause um

876
00:36:02,720 --> 00:36:04,960
protection tear down um

877
00:36:04,960 --> 00:36:07,680
then um as a practical matter um you

878
00:36:07,680 --> 00:36:09,440
have to you have to rekey very often in

879
00:36:09,440 --> 00:36:11,760
order to um deal with uh the key

880
00:36:11,760 --> 00:36:14,240
extraction but the xbox are only 16 bits

881
00:36:14,240 --> 00:36:15,359
which means that the total number of

882
00:36:15,359 --> 00:36:16,720
records you can actually send is only

883
00:36:16,720 --> 00:36:18,320
about to the 40th which is really quite

884
00:36:18,320 --> 00:36:21,599
a small number and like concerning um so

885
00:36:21,599 --> 00:36:23,920
um that seems like not um it's worth

886
00:36:23,920 --> 00:36:26,000
noting that like um

887
00:36:26,000 --> 00:36:27,359
that this is also a problem with details

888
00:36:27,359 --> 00:36:28,720
1.2 it's just that we didn't actually

889
00:36:28,720 --> 00:36:30,240
write anything about about the key

890
00:36:30,240 --> 00:36:33,599
record limits in dlc 1.2 um so um we're

891
00:36:33,599 --> 00:36:36,880
trying to be more rigid about 1.3 um

892
00:36:36,880 --> 00:36:37,680
so

893
00:36:37,680 --> 00:36:40,480
um we have two poles in front of us um

894
00:36:40,480 --> 00:36:42,720
that both kind of are relatively similar

895
00:36:42,720 --> 00:36:45,599
um one by uh chris wood one myself

896
00:36:45,599 --> 00:36:46,480
though i don't think chris and i are

897
00:36:46,480 --> 00:36:48,000
fighting about this we just decided to

898
00:36:48,000 --> 00:36:49,520
um to try to like flash both of those

899
00:36:49,520 --> 00:36:52,720
people to see them um so um

900
00:36:52,720 --> 00:36:55,760
the um first is to expand the outbox to

901
00:36:55,760 --> 00:36:57,839
64 bits which you have to do in any case

902
00:36:57,839 --> 00:36:59,680
so that you can re-key more than 16

903
00:36:59,680 --> 00:37:02,160
times um and so the question is what to

904
00:37:02,160 --> 00:37:04,400
do with the um

905
00:37:04,400 --> 00:37:06,240
with the uh the

906
00:37:06,240 --> 00:37:08,640
key formatting for the aead so one

907
00:37:08,640 --> 00:37:10,640
option is to just encode the lower 16

908
00:37:10,640 --> 00:37:14,320
bits in the um in the knots so the nods

909
00:37:14,320 --> 00:37:17,040
would be um you know to still be 16 bits

910
00:37:17,040 --> 00:37:19,359
of epoch and 48 bits of of record

911
00:37:19,359 --> 00:37:21,599
identifier um

912
00:37:21,599 --> 00:37:24,079
so um this obviously requires you to

913
00:37:24,079 --> 00:37:25,920
spend the act 112 bits to incorporate

914
00:37:25,920 --> 00:37:28,079
the entire epoch um but it's still the

915
00:37:28,079 --> 00:37:30,000
same um it's still the same underlying

916
00:37:30,000 --> 00:37:32,079
formatting for the details records um so

917
00:37:32,079 --> 00:37:34,240
that's more consistent with gl's 1.2

918
00:37:34,240 --> 00:37:36,960
um the other option is to

919
00:37:36,960 --> 00:37:39,839
um expand the sequence number 64 bits

920
00:37:39,839 --> 00:37:41,359
use the entire sequence number and the

921
00:37:41,359 --> 00:37:43,760
knots um and just remove the epoch

922
00:37:43,760 --> 00:37:45,839
entirely um

923
00:37:45,839 --> 00:37:47,520
so um

924
00:37:47,520 --> 00:37:49,440
i think the argument that i think to try

925
00:37:49,440 --> 00:37:51,359
to argue for like what one or the other

926
00:37:51,359 --> 00:37:54,720
um the argument i think for um the uh

927
00:37:54,720 --> 00:37:58,240
235 um is it's a simple change um

928
00:37:58,240 --> 00:38:00,640
uh and and and you still have the app on

929
00:38:00,640 --> 00:38:02,640
the not you know the lower 1650 at back

930
00:38:02,640 --> 00:38:04,640
of the knots but when you go to look at

931
00:38:04,640 --> 00:38:07,760
the analysis um about um the situation

932
00:38:07,760 --> 00:38:09,040
you say what is the epoch doing the

933
00:38:09,040 --> 00:38:11,599
knots anyway and um to be honest like

934
00:38:11,599 --> 00:38:12,800
this like really really old it was done

935
00:38:12,800 --> 00:38:14,640
when we first did gtls i'm not sure we

936
00:38:14,640 --> 00:38:17,200
had a good reason um but um the

937
00:38:17,200 --> 00:38:18,240
essential which you're thinking about

938
00:38:18,240 --> 00:38:19,440
this problem anyway if you're worried

939
00:38:19,440 --> 00:38:20,560
about the epoch allowing you to

940
00:38:20,560 --> 00:38:22,320
distinguish between different um

941
00:38:22,320 --> 00:38:24,160
different key phases well now you have

942
00:38:24,160 --> 00:38:26,240
to worry about cycling around 2016. and

943
00:38:26,240 --> 00:38:27,520
so it's not going to actually helps and

944
00:38:27,520 --> 00:38:29,200
so what you're really saying is and so

945
00:38:29,200 --> 00:38:31,119
we went to the analysis we actually said

946
00:38:31,119 --> 00:38:32,480
each outback has to have separate keys

947
00:38:32,480 --> 00:38:33,920
and that's what's giving you separation

948
00:38:33,920 --> 00:38:35,760
between the epochs not having that block

949
00:38:35,760 --> 00:38:38,160
bit in the nonce um

950
00:38:38,160 --> 00:38:40,480
so the argument for 257 is once we had

951
00:38:40,480 --> 00:38:41,760
to accept the keys had to be separate

952
00:38:41,760 --> 00:38:43,680
anyway which they already are and we

953
00:38:43,680 --> 00:38:45,040
were depending on that property then it

954
00:38:45,040 --> 00:38:46,480
didn't matter what that was what was in

955
00:38:46,480 --> 00:38:49,040
the knots um and

956
00:38:49,040 --> 00:38:50,000
um

957
00:38:50,000 --> 00:38:51,760
so uh

958
00:38:51,760 --> 00:38:54,000
um and and so and this allows you to be

959
00:38:54,000 --> 00:38:58,320
to a um have uh 264 um you know possible

960
00:38:58,320 --> 00:38:59,680
sequence numbers if you had a cipher

961
00:38:59,680 --> 00:39:01,680
permitted that um and b it looks more

962
00:39:01,680 --> 00:39:03,359
like t tl's from point three so it

963
00:39:03,359 --> 00:39:04,720
harmonizes the tail some point three

964
00:39:04,720 --> 00:39:07,119
instead of being a special dcls

965
00:39:07,119 --> 00:39:09,520
um so that's um

966
00:39:09,520 --> 00:39:10,640
so that's what we were thinking about

967
00:39:10,640 --> 00:39:11,760
when we did

968
00:39:11,760 --> 00:39:13,040
um

969
00:39:13,040 --> 00:39:16,400
uh uh we when i post this um i think um

970
00:39:16,400 --> 00:39:17,839
you know in either case i'm gonna want

971
00:39:17,839 --> 00:39:20,400
to run this by um a couple um

972
00:39:20,400 --> 00:39:23,200
uh uh on some uh uh um some

973
00:39:23,200 --> 00:39:24,320
photographers but we can do that quite

974
00:39:24,320 --> 00:39:25,520
quickly once it's written down and we

975
00:39:25,520 --> 00:39:29,200
already did run by um the um 255 by

976
00:39:29,200 --> 00:39:32,079
karthik um

977
00:39:32,079 --> 00:39:33,680
so um

978
00:39:33,680 --> 00:39:37,440
uh um i i think i'm seeing scott flores

979
00:39:37,440 --> 00:39:39,280
comments um

980
00:39:39,280 --> 00:39:40,240
my

981
00:39:40,240 --> 00:39:42,079
my impression is because we're also

982
00:39:42,079 --> 00:39:44,160
randomizing um

983
00:39:44,160 --> 00:39:45,760
we because we randomized the sequence

984
00:39:45,760 --> 00:39:48,560
numbers uh we have the xor against the

985
00:39:48,560 --> 00:39:50,480
epoch um as martin was saying yeah i

986
00:39:50,480 --> 00:39:51,440
don't think that actually as much

987
00:39:51,440 --> 00:39:53,599
difference you think so i guess um i

988
00:39:53,599 --> 00:39:54,800
think

989
00:39:54,800 --> 00:39:56,640
i prefer 2d7 i think that being closer

990
00:39:56,640 --> 00:39:58,560
to sales 1.3 is better um than being

991
00:39:58,560 --> 00:40:01,280
closer to details 1.2 in this case um

992
00:40:01,280 --> 00:40:03,440
and um i did it leaves us with this like

993
00:40:03,440 --> 00:40:04,880
this sort of weird work we have like

994
00:40:04,880 --> 00:40:06,560
half of it there and we have to reason

995
00:40:06,560 --> 00:40:08,880
about it

996
00:40:09,680 --> 00:40:11,440
so i guess um what other people think i

997
00:40:11,440 --> 00:40:14,319
saw i said mt was suggesting um uh that

998
00:40:14,319 --> 00:40:17,520
he thinks 257 is better

999
00:40:22,400 --> 00:40:23,200
okay

1000
00:40:23,200 --> 00:40:24,400
okay

1001
00:40:24,400 --> 00:40:27,760
anybody wanna argue for 255.

1002
00:40:28,319 --> 00:40:31,280
okay um then i will find 287 i will um

1003
00:40:31,280 --> 00:40:33,040
run it quickly by um some of the usual

1004
00:40:33,040 --> 00:40:38,160
suspects and we will call soup um

1005
00:40:38,160 --> 00:40:41,680
okay uh next um

1006
00:40:41,680 --> 00:40:43,040
so this is saying this thing dave

1007
00:40:43,040 --> 00:40:46,000
benjamin raised um that the um

1008
00:40:46,000 --> 00:40:48,400
um because the dc so gtl's handshake um

1009
00:40:48,400 --> 00:40:50,160
structure is different from the dlc

1010
00:40:50,160 --> 00:40:52,160
structure and it has these three uh

1011
00:40:52,160 --> 00:40:54,000
fields which are used for reconstruction

1012
00:40:54,000 --> 00:40:54,800
um

1013
00:40:54,800 --> 00:40:56,480
uh of the handshake of the firing hand

1014
00:40:56,480 --> 00:40:58,640
tape messages um and so the question

1015
00:40:58,640 --> 00:41:00,640
becomes like and so like if you like

1016
00:41:00,640 --> 00:41:02,160
ordinarily you would say the transcript

1017
00:41:02,160 --> 00:41:03,760
like consists and so even when you

1018
00:41:03,760 --> 00:41:06,240
reconstruct the messages what you do um

1019
00:41:06,240 --> 00:41:07,119
is

1020
00:41:07,119 --> 00:41:08,960
uh you instead of instead of basically

1021
00:41:08,960 --> 00:41:10,800
saying we didn't need this framing what

1022
00:41:10,800 --> 00:41:12,400
you do is you basically set the message

1023
00:41:12,400 --> 00:41:13,920
question to be what it's supposed to be

1024
00:41:13,920 --> 00:41:15,680
and then use the fragment offset and the

1025
00:41:15,680 --> 00:41:18,079
fragment length to be like zero and

1026
00:41:18,079 --> 00:41:19,359
length and the length of the message

1027
00:41:19,359 --> 00:41:21,200
right um

1028
00:41:21,200 --> 00:41:23,920
and so uh um so so these are these are

1029
00:41:23,920 --> 00:41:25,280
fixed values but they still go in the

1030
00:41:25,280 --> 00:41:27,040
transcript currently um and they

1031
00:41:27,040 --> 00:41:28,720
eventually pointed out that this like is

1032
00:41:28,720 --> 00:41:30,880
a little weird in the message hash um

1033
00:41:30,880 --> 00:41:33,599
that we use that we use for um you know

1034
00:41:33,599 --> 00:41:36,800
for hr um and he also pointed out that

1035
00:41:36,800 --> 00:41:38,720
in this case um it's not entirely clear

1036
00:41:38,720 --> 00:41:40,560
you convince yourself the tl 0.3 and

1037
00:41:40,560 --> 00:41:42,400
details 1.3 transcripts like don't

1038
00:41:42,400 --> 00:41:44,319
overlap in some way because this

1039
00:41:44,319 --> 00:41:45,839
sequence number and stuff is overlapping

1040
00:41:45,839 --> 00:41:48,560
with message contents um so

1041
00:41:48,560 --> 00:41:51,119
um i think david sort of said like well

1042
00:41:51,119 --> 00:41:52,560
this is just annoying and grumpy but we

1043
00:41:52,560 --> 00:41:53,920
should like live with it um but i

1044
00:41:53,920 --> 00:41:55,599
actually am wondering if in line with a

1045
00:41:55,599 --> 00:41:56,800
previous thing we should just bite the

1046
00:41:56,800 --> 00:41:58,960
bullet and like say that that the dtls

1047
00:41:58,960 --> 00:42:00,640
message transcript does not include

1048
00:42:00,640 --> 00:42:02,960
these um whatever uh

1049
00:42:02,960 --> 00:42:04,160
uh

1050
00:42:04,160 --> 00:42:07,200
uh six eight octets um and then it would

1051
00:42:07,200 --> 00:42:08,240
look the same as the tails with the

1052
00:42:08,240 --> 00:42:09,520
message transcript

1053
00:42:09,520 --> 00:42:10,960
um

1054
00:42:10,960 --> 00:42:14,640
and um so i i think you know um

1055
00:42:14,640 --> 00:42:15,839
like i don't think it's much harder i

1056
00:42:15,839 --> 00:42:17,119
think this would not be harder for us in

1057
00:42:17,119 --> 00:42:18,560
any meaningful way um i don't think hard

1058
00:42:18,560 --> 00:42:20,480
for anybody else um i know it's like

1059
00:42:20,480 --> 00:42:22,160
breaking change but i guess like because

1060
00:42:22,160 --> 00:42:23,920
we had to do some david points out we

1061
00:42:23,920 --> 00:42:25,280
did something here because we have to

1062
00:42:25,280 --> 00:42:27,119
specify what goes in message hash and so

1063
00:42:27,119 --> 00:42:28,400
once we're doing that maybe we should

1064
00:42:28,400 --> 00:42:30,240
just like live with it and make the

1065
00:42:30,240 --> 00:42:32,479
change

1066
00:42:32,720 --> 00:42:34,079
um people are probably getting the

1067
00:42:34,079 --> 00:42:35,520
impression i'm like trying to eliminate

1068
00:42:35,520 --> 00:42:37,599
any distinction between one point in

1069
00:42:37,599 --> 00:42:38,800
detail loss and tails and point three

1070
00:42:38,800 --> 00:42:41,960
when i count

1071
00:42:44,319 --> 00:42:45,839
i will say like the reconstruction code

1072
00:42:45,839 --> 00:42:47,599
has to like it's not like just just the

1073
00:42:47,599 --> 00:42:49,040
people on the same page like the

1074
00:42:49,040 --> 00:42:51,359
reconstruction code like has to assemble

1075
00:42:51,359 --> 00:42:52,960
messages anyway so it's not like it's

1076
00:42:52,960 --> 00:42:54,000
like it's not like you're like not

1077
00:42:54,000 --> 00:42:57,960
having to screw up these fields

1078
00:42:58,000 --> 00:43:01,280
david mt chris

1079
00:43:08,240 --> 00:43:09,680
yeah that sounds pretty

1080
00:43:09,680 --> 00:43:12,560
um i don't have any concerns um given

1081
00:43:12,560 --> 00:43:13,839
especially the point that martin points

1082
00:43:13,839 --> 00:43:15,520
out in the chat

1083
00:43:15,520 --> 00:43:16,240
so

1084
00:43:16,240 --> 00:43:18,480
um

1085
00:43:18,480 --> 00:43:20,720
uh perhaps i can work with david to

1086
00:43:20,720 --> 00:43:25,319
prepare pr and here he is

1087
00:43:26,510 --> 00:43:29,569
[Music]

1088
00:43:34,480 --> 00:43:36,079
sorry it's been a while since i've used

1089
00:43:36,079 --> 00:43:37,440
this thing so i forgot which buttons to

1090
00:43:37,440 --> 00:43:39,040
press um

1091
00:43:39,040 --> 00:43:40,960
yeah so i guess

1092
00:43:40,960 --> 00:43:42,560
i i think when i filed the issue i

1093
00:43:42,560 --> 00:43:44,000
thought it would be kind of annoying to

1094
00:43:44,000 --> 00:43:46,000
change it around i originally found it

1095
00:43:46,000 --> 00:43:47,200
just because it was like ambiguously

1096
00:43:47,200 --> 00:43:48,480
specified it wasn't sure which one was

1097
00:43:48,480 --> 00:43:50,319
supposed to be um

1098
00:43:50,319 --> 00:43:52,079
but i guess it's true that the only like

1099
00:43:52,079 --> 00:43:53,920
by the time the only mess is only the

1100
00:43:53,920 --> 00:43:55,680
first client hello that ever is in this

1101
00:43:55,680 --> 00:43:57,599
like ambiguous stage

1102
00:43:57,599 --> 00:43:58,720
so

1103
00:43:58,720 --> 00:44:00,079
uh and at that point you haven't even

1104
00:44:00,079 --> 00:44:02,079
picked the hash yet so you could just

1105
00:44:02,079 --> 00:44:03,839
like keep the clientele around and just

1106
00:44:03,839 --> 00:44:06,720
sort of like erase the extra bites as

1107
00:44:06,720 --> 00:44:08,960
needed maybe it's okay

1108
00:44:08,960 --> 00:44:10,160
um

1109
00:44:10,160 --> 00:44:12,079
it also like like we also don't strictly

1110
00:44:12,079 --> 00:44:14,079
need them to be separable if like well

1111
00:44:14,079 --> 00:44:15,680
i'm not sure i suspect we don't strictly

1112
00:44:15,680 --> 00:44:16,800
need them to be separable if all the

1113
00:44:16,800 --> 00:44:19,280
labels say dtls rather than tls but it

1114
00:44:19,280 --> 00:44:20,880
is like kind of annoying to have to

1115
00:44:20,880 --> 00:44:24,800
remember to do that like every time so

1116
00:44:26,480 --> 00:44:27,599
okay

1117
00:44:27,599 --> 00:44:29,839
so i'll prepare for this

1118
00:44:29,839 --> 00:44:31,599
and if someone given there's gonna take

1119
00:44:31,599 --> 00:44:33,359
a couple weeks to like you know to like

1120
00:44:33,359 --> 00:44:34,880
finish the other thing like um you know

1121
00:44:34,880 --> 00:44:36,000
someone could try implementing this make

1122
00:44:36,000 --> 00:44:37,040
sure it doesn't like vaping explode

1123
00:44:37,040 --> 00:44:40,279
that'd be great

1124
00:44:51,200 --> 00:44:52,480
i i don't think by the way you keep the

1125
00:44:52,480 --> 00:44:54,640
client around very long um just to

1126
00:44:54,640 --> 00:44:56,800
contact honesty's comment i mean like

1127
00:44:56,800 --> 00:44:58,480
you did you do the you do the version

1128
00:44:58,480 --> 00:45:00,079
negotiation immediately so like um so

1129
00:45:00,079 --> 00:45:02,000
you already know what you're doing it

1130
00:45:02,000 --> 00:45:05,000
um

1131
00:45:05,920 --> 00:45:08,240
okay

1132
00:45:10,480 --> 00:45:13,280
uh i am done

1133
00:45:15,440 --> 00:45:19,200
the um in the repo there's also this uh

1134
00:45:19,200 --> 00:45:22,000
uh pull request to address uh sorry to

1135
00:45:22,000 --> 00:45:24,720
reference rfc 7457 which is the utah

1136
00:45:24,720 --> 00:45:25,680
draft

1137
00:45:25,680 --> 00:45:28,160
um i think that the you know i

1138
00:45:28,160 --> 00:45:29,520
definitely think it's not needed i think

1139
00:45:29,520 --> 00:45:31,359
you didn't either does there anyone want

1140
00:45:31,359 --> 00:45:32,880
to speak to

1141
00:45:32,880 --> 00:45:34,000
adding that as a reference because

1142
00:45:34,000 --> 00:45:35,280
otherwise i think you should just go

1143
00:45:35,280 --> 00:45:39,200
ahead and close the close the pr

1144
00:45:40,079 --> 00:45:42,720
um i was playing close to pr

1145
00:45:42,720 --> 00:45:45,720
okay

1146
00:45:50,800 --> 00:45:53,800
uh

1147
00:46:04,000 --> 00:46:07,640
implementation report

1148
00:46:17,440 --> 00:46:18,960
who is

1149
00:46:18,960 --> 00:46:20,319
going to be giving the ech

1150
00:46:20,319 --> 00:46:23,960
implementation report

1151
00:46:30,560 --> 00:46:32,640
okay i think we're all set uh echo i'll

1152
00:46:32,640 --> 00:46:37,400
take the slides away and then pop up vch

1153
00:46:42,720 --> 00:46:43,070
um

1154
00:46:43,070 --> 00:46:44,160
[Music]

1155
00:46:44,160 --> 00:46:45,280
sean i'm going to meet you as well

1156
00:46:45,280 --> 00:46:46,640
that's okay

1157
00:46:46,640 --> 00:46:48,319
oops sorry

1158
00:46:48,319 --> 00:46:50,480
no worries

1159
00:46:50,480 --> 00:46:54,839
um okay this is a fairly quick update um

1160
00:46:54,839 --> 00:46:57,520
hello um

1161
00:46:57,520 --> 00:46:59,280
uh just i guess a

1162
00:46:59,280 --> 00:47:00,800
quick primer for those of you who are

1163
00:47:00,800 --> 00:47:04,800
not familiar uh with the protocol

1164
00:47:05,599 --> 00:47:08,240
imagine you had a normal tls 1.3

1165
00:47:08,240 --> 00:47:09,520
connection in which you're connecting to

1166
00:47:09,520 --> 00:47:11,119
a server revealing

1167
00:47:11,119 --> 00:47:12,720
um in the

1168
00:47:12,720 --> 00:47:15,359
sni extension um potentially sensitive

1169
00:47:15,359 --> 00:47:17,359
information uh about what you're doing

1170
00:47:17,359 --> 00:47:18,400
specifically what server you're

1171
00:47:18,400 --> 00:47:19,760
connecting to

1172
00:47:19,760 --> 00:47:20,720
um

1173
00:47:20,720 --> 00:47:21,599
uh

1174
00:47:21,599 --> 00:47:23,200
ech's name suggests is just some

1175
00:47:23,200 --> 00:47:24,319
mechanism for encrypting that

1176
00:47:24,319 --> 00:47:25,920
information to the the target server

1177
00:47:25,920 --> 00:47:27,200
that you're eventually trying to connect

1178
00:47:27,200 --> 00:47:28,000
to

1179
00:47:28,000 --> 00:47:30,240
um such that you know passive ease

1180
00:47:30,240 --> 00:47:32,000
droppers on the on the wire between

1181
00:47:32,000 --> 00:47:34,480
client server can't figure out

1182
00:47:34,480 --> 00:47:35,760
any of that potentially sensitive

1183
00:47:35,760 --> 00:47:38,079
information beyond the sni other

1184
00:47:38,079 --> 00:47:39,440
extensions in the future might be

1185
00:47:39,440 --> 00:47:40,640
sensitive

1186
00:47:40,640 --> 00:47:43,119
um aopn for example might be something

1187
00:47:43,119 --> 00:47:44,559
you'd like to hide

1188
00:47:44,559 --> 00:47:45,760
um

1189
00:47:45,760 --> 00:47:48,800
psk identities that sort of thing

1190
00:47:48,800 --> 00:47:50,960
um

1191
00:47:50,960 --> 00:47:52,800
since the last itf uh we sort of

1192
00:47:52,800 --> 00:47:54,880
declared drop 13 as the interop and

1193
00:47:54,880 --> 00:47:56,160
deployment target to get some initial

1194
00:47:56,160 --> 00:47:57,359
experience

1195
00:47:57,359 --> 00:47:59,599
um to avoid sort of circling on issues

1196
00:47:59,599 --> 00:48:01,760
that we had open particularly around you

1197
00:48:01,760 --> 00:48:02,800
know

1198
00:48:02,800 --> 00:48:04,079
what is the right mechanism for

1199
00:48:04,079 --> 00:48:06,720
signaling acceptance versus rejection

1200
00:48:06,720 --> 00:48:09,040
how do you deal with hrr in greece

1201
00:48:09,040 --> 00:48:10,079
um

1202
00:48:10,079 --> 00:48:11,839
practically speaking how you would

1203
00:48:11,839 --> 00:48:13,359
implement server-side padding for the

1204
00:48:13,359 --> 00:48:14,720
purposes of hiding you know which

1205
00:48:14,720 --> 00:48:16,720
certificate was actually chosen

1206
00:48:16,720 --> 00:48:19,040
for the particular connection

1207
00:48:19,040 --> 00:48:20,319
and there's also been other questions

1208
00:48:20,319 --> 00:48:21,119
around

1209
00:48:21,119 --> 00:48:23,040
extensibility in the ech configuration

1210
00:48:23,040 --> 00:48:25,839
that's published in the https record

1211
00:48:25,839 --> 00:48:27,839
we've parked all of those open issues

1212
00:48:27,839 --> 00:48:29,200
and labeled them

1213
00:48:29,200 --> 00:48:30,800
as such in github

1214
00:48:30,800 --> 00:48:32,800
uh with the the plan being to

1215
00:48:32,800 --> 00:48:34,319
effectively

1216
00:48:34,319 --> 00:48:36,960
get some experimentation um you know

1217
00:48:36,960 --> 00:48:39,040
experience under our belts

1218
00:48:39,040 --> 00:48:40,960
and then revisit these based on that

1219
00:48:40,960 --> 00:48:43,839
experience um to have you know a more

1220
00:48:43,839 --> 00:48:46,720
informed decision about how complicated

1221
00:48:46,720 --> 00:48:48,800
this thing is to actually do in practice

1222
00:48:48,800 --> 00:48:52,880
uh how feasible it is and so on

1223
00:48:52,960 --> 00:48:55,040
there are a number of implementations uh

1224
00:48:55,040 --> 00:48:57,920
out there right now um bring us open ssl

1225
00:48:57,920 --> 00:48:59,610
forks nss um

1226
00:48:59,610 --> 00:49:00,720
[Music]

1227
00:49:00,720 --> 00:49:03,040
and so on um some of these are

1228
00:49:03,040 --> 00:49:05,920
interoperable than others uh others are

1229
00:49:05,920 --> 00:49:08,079
you know working their way up towards

1230
00:49:08,079 --> 00:49:10,079
draft their team which is good

1231
00:49:10,079 --> 00:49:12,640
um if you know of other implementations

1232
00:49:12,640 --> 00:49:14,319
uh request that you please add it to the

1233
00:49:14,319 --> 00:49:17,359
wiki you can find the wiki page under

1234
00:49:17,359 --> 00:49:20,720
the um the esni or ech repository on

1235
00:49:20,720 --> 00:49:21,839
github

1236
00:49:21,839 --> 00:49:24,960
um if you can't find it just drop

1237
00:49:24,960 --> 00:49:27,520
me or the the list of a message asking

1238
00:49:27,520 --> 00:49:28,480
for and we can point in the right

1239
00:49:28,480 --> 00:49:29,839
direction but the link in the slides

1240
00:49:29,839 --> 00:49:32,799
also should work as well

1241
00:49:35,599 --> 00:49:38,079
um during the course of uh bringing up

1242
00:49:38,079 --> 00:49:39,440
the different implementations and other

1243
00:49:39,440 --> 00:49:42,000
people have um sort of been taking notes

1244
00:49:42,000 --> 00:49:43,119
in terms of you know what are some of

1245
00:49:43,119 --> 00:49:45,680
the pain points um in the protocol right

1246
00:49:45,680 --> 00:49:46,400
now

1247
00:49:46,400 --> 00:49:47,920
uh thanks to note going forward to

1248
00:49:47,920 --> 00:49:49,810
potentially revisit uh depending on

1249
00:49:49,810 --> 00:49:50,880
[Music]

1250
00:49:50,880 --> 00:49:53,520
uh you know how how uh severe the or how

1251
00:49:53,520 --> 00:49:55,119
how painful these sharp edges happen to

1252
00:49:55,119 --> 00:49:56,000
be

1253
00:49:56,000 --> 00:49:59,359
um you know for example uh configuring

1254
00:49:59,359 --> 00:50:00,160
um

1255
00:50:00,160 --> 00:50:01,839
uh your stack such that

1256
00:50:01,839 --> 00:50:04,640
things from dns are plumbed uh into the

1257
00:50:04,640 --> 00:50:07,359
the tl stack accordingly and parsed and

1258
00:50:07,359 --> 00:50:09,119
validated in the right way

1259
00:50:09,119 --> 00:50:10,640
uh has been

1260
00:50:10,640 --> 00:50:12,960
somewhat annoying there's a there's the

1261
00:50:12,960 --> 00:50:14,960
required text for checking

1262
00:50:14,960 --> 00:50:17,440
um the public name in the ech config

1263
00:50:17,440 --> 00:50:19,280
inside the tls stack which requires you

1264
00:50:19,280 --> 00:50:21,359
know an ip address parser

1265
00:50:21,359 --> 00:50:22,880
which typically was or previously was

1266
00:50:22,880 --> 00:50:25,520
not a requirement for um

1267
00:50:25,520 --> 00:50:27,440
for most tls stacks

1268
00:50:27,440 --> 00:50:29,680
uh so the i mean what's currently in the

1269
00:50:29,680 --> 00:50:32,480
draft right now is is not the best um

1270
00:50:32,480 --> 00:50:33,599
in terms of

1271
00:50:33,599 --> 00:50:34,880
uh

1272
00:50:34,880 --> 00:50:36,880
the technical procedure for validating

1273
00:50:36,880 --> 00:50:38,880
that particular ech config

1274
00:50:38,880 --> 00:50:40,240
so it's no surprise that this became

1275
00:50:40,240 --> 00:50:41,760
somewhat of a pain point uh when

1276
00:50:41,760 --> 00:50:43,119
implementing things

1277
00:50:43,119 --> 00:50:45,200
um perhaps we can do something uh in the

1278
00:50:45,200 --> 00:50:48,480
future to fix it but um you know uh

1279
00:50:48,480 --> 00:50:49,680
something to be mindful of if you're

1280
00:50:49,680 --> 00:50:51,520
gonna spit up an implementation of your

1281
00:50:51,520 --> 00:50:52,800
own

1282
00:50:52,800 --> 00:50:55,440
um also been noted uh by several people

1283
00:50:55,440 --> 00:50:57,760
that uh split mode is

1284
00:50:57,760 --> 00:50:59,839
kind of challenging to deal with as well

1285
00:50:59,839 --> 00:51:01,119
um

1286
00:51:01,119 --> 00:51:03,359
not aware of any uh experiments or

1287
00:51:03,359 --> 00:51:04,720
deployments that are planning on using

1288
00:51:04,720 --> 00:51:06,240
split loan right now

1289
00:51:06,240 --> 00:51:07,359
um

1290
00:51:07,359 --> 00:51:10,720
uh but uh if there are folks who uh do

1291
00:51:10,720 --> 00:51:12,800
specifically try to implement this use

1292
00:51:12,800 --> 00:51:15,680
case uh it'd be very good to know um

1293
00:51:15,680 --> 00:51:17,760
what sort of obstacles you run into

1294
00:51:17,760 --> 00:51:19,440
specifically around coordination between

1295
00:51:19,440 --> 00:51:21,119
the front end and the uh the

1296
00:51:21,119 --> 00:51:22,880
client-facing server and the back-end

1297
00:51:22,880 --> 00:51:24,240
server

1298
00:51:24,240 --> 00:51:25,760
um

1299
00:51:25,760 --> 00:51:28,000
similar to the implementation uh

1300
00:51:28,000 --> 00:51:30,559
interrupt uh wiki there's a there's a

1301
00:51:30,559 --> 00:51:32,480
there's a wiki page for sort of tracking

1302
00:51:32,480 --> 00:51:34,960
these uh these red flags with these

1303
00:51:34,960 --> 00:51:36,960
sharp edges

1304
00:51:36,960 --> 00:51:38,720
it would be useful

1305
00:51:38,720 --> 00:51:40,160
i think it would be useful for

1306
00:51:40,160 --> 00:51:42,000
posterity's sake

1307
00:51:42,000 --> 00:51:42,880
if

1308
00:51:42,880 --> 00:51:44,240
we started accumulating these

1309
00:51:44,240 --> 00:51:45,839
collectively

1310
00:51:45,839 --> 00:51:47,599
just so we you know can be mindful of

1311
00:51:47,599 --> 00:51:49,119
potentially ways to simplify the

1312
00:51:49,119 --> 00:51:52,480
specification going forward

1313
00:51:52,559 --> 00:51:53,760
or

1314
00:51:53,760 --> 00:51:56,319
you know areas we might expand upon and

1315
00:51:56,319 --> 00:51:57,839
you know the draft and appendix or what

1316
00:51:57,839 --> 00:52:00,800
have you um for the purposes of helping

1317
00:52:00,800 --> 00:52:02,800
implementers similar to what's in the

1318
00:52:02,800 --> 00:52:05,119
rfc 8446

1319
00:52:05,119 --> 00:52:07,119
um steven did you have a question or did

1320
00:52:07,119 --> 00:52:10,319
you want to elaborate on anything

1321
00:52:10,319 --> 00:52:11,920
yeah just on the on the split board

1322
00:52:11,920 --> 00:52:14,079
thing um split mode itself was was

1323
00:52:14,079 --> 00:52:15,520
pretty straightforward

1324
00:52:15,520 --> 00:52:16,640
um

1325
00:52:16,640 --> 00:52:18,240
you just required a new api but it was

1326
00:52:18,240 --> 00:52:20,160
it was easy enough it's split node plus

1327
00:52:20,160 --> 00:52:22,720
hr that was the problem

1328
00:52:22,720 --> 00:52:24,800
and the issue was with in particular

1329
00:52:24,800 --> 00:52:26,720
with h a proxy

1330
00:52:26,720 --> 00:52:28,480
you either operate as a kind of a tls

1331
00:52:28,480 --> 00:52:29,760
endpoint

1332
00:52:29,760 --> 00:52:31,839
in non-split mode or in what they call

1333
00:52:31,839 --> 00:52:34,079
basically a tran you know tcp mode is

1334
00:52:34,079 --> 00:52:35,520
what they call it where they're trying

1335
00:52:35,520 --> 00:52:38,240
to do go faster stripes essentially

1336
00:52:38,240 --> 00:52:39,760
and in that mode they only look at the

1337
00:52:39,760 --> 00:52:41,680
first packet so i don't know there's any

1338
00:52:41,680 --> 00:52:44,240
way to fix the issue that with hr you

1339
00:52:44,240 --> 00:52:45,440
have to change the second packet as well

1340
00:52:45,440 --> 00:52:46,720
as the first one

1341
00:52:46,720 --> 00:52:48,000
um

1342
00:52:48,000 --> 00:52:49,520
but on the other hand it's presumably

1343
00:52:49,520 --> 00:52:52,240
when hr might happen more often so

1344
00:52:52,240 --> 00:52:54,559
it might indicate that

1345
00:52:54,559 --> 00:52:57,280
what we're doing with hrr

1346
00:52:57,280 --> 00:52:59,599
is less likely to

1347
00:52:59,599 --> 00:53:01,119
be of real interest in the real world i

1348
00:53:01,119 --> 00:53:03,359
don't know

1349
00:53:04,160 --> 00:53:05,599
but it was

1350
00:53:05,599 --> 00:53:07,359
with her that was problematic the the

1351
00:53:07,359 --> 00:53:08,480
basic split mode was pretty

1352
00:53:08,480 --> 00:53:09,839
straightforward

1353
00:53:09,839 --> 00:53:11,520
okay yeah thanks for clarifying um no

1354
00:53:11,520 --> 00:53:13,440
surprise that hr is problematic i guess

1355
00:53:13,440 --> 00:53:14,960
um

1356
00:53:14,960 --> 00:53:16,240
uh i think you also raised an

1357
00:53:16,240 --> 00:53:19,280
interesting point in that um this was

1358
00:53:19,280 --> 00:53:21,200
particular to particular

1359
00:53:21,200 --> 00:53:23,200
or to a specific server implementation

1360
00:53:23,200 --> 00:53:25,280
aj proxy um

1361
00:53:25,280 --> 00:53:26,720
the interesting thing to know is people

1362
00:53:26,720 --> 00:53:28,960
are integrating ech as it exists in

1363
00:53:28,960 --> 00:53:30,960
various tls stacks like boeing ssr what

1364
00:53:30,960 --> 00:53:32,160
have you into different server

1365
00:53:32,160 --> 00:53:33,440
implementations

1366
00:53:33,440 --> 00:53:34,319
um

1367
00:53:34,319 --> 00:53:36,559
uh what what pain points uh come up

1368
00:53:36,559 --> 00:53:38,559
along the way similarly for clients you

1369
00:53:38,559 --> 00:53:41,520
know how challenging is it or not uh to

1370
00:53:41,520 --> 00:53:43,280
you know plumb this into curl if you're

1371
00:53:43,280 --> 00:53:44,640
gonna if you're gonna if you were to

1372
00:53:44,640 --> 00:53:46,960
extend curl to add support for this uh

1373
00:53:46,960 --> 00:53:51,040
or to browsers or what have you um

1374
00:53:51,040 --> 00:53:52,240
yeah so you remind me of something i

1375
00:53:52,240 --> 00:53:53,760
meant to say there which is the it's not

1376
00:53:53,760 --> 00:53:54,720
on the list i think it's on the wiki

1377
00:53:54,720 --> 00:53:56,400
page though

1378
00:53:56,400 --> 00:53:59,440
um with coral one of the big issues is

1379
00:53:59,440 --> 00:54:01,920
going to be supporting svcp it's not ech

1380
00:54:01,920 --> 00:54:04,240
per se that's tricky it's all the dns

1381
00:54:04,240 --> 00:54:05,839
handling and caching that might go

1382
00:54:05,839 --> 00:54:07,440
around that that i think would be a

1383
00:54:07,440 --> 00:54:11,280
giant piece of work for carl

1384
00:54:11,280 --> 00:54:12,960
yeah

1385
00:54:12,960 --> 00:54:15,119
thank you

1386
00:54:15,119 --> 00:54:17,359
then

1387
00:54:17,920 --> 00:54:19,200
hey

1388
00:54:19,200 --> 00:54:21,839
uh so ssl stacks

1389
00:54:21,839 --> 00:54:23,680
uh generally

1390
00:54:23,680 --> 00:54:26,079
general purpose ssl stacks have to have

1391
00:54:26,079 --> 00:54:30,000
ip address parsing to be able to

1392
00:54:30,000 --> 00:54:30,880
uh

1393
00:54:30,880 --> 00:54:33,040
to be able to do certificate validation

1394
00:54:33,040 --> 00:54:36,240
for ip certificates

1395
00:54:36,960 --> 00:54:39,920
uh is my audio incomprehensible

1396
00:54:39,920 --> 00:54:41,680
it's a little bit choppy but so i'm i'm

1397
00:54:41,680 --> 00:54:43,359
just trying to piece it together i i

1398
00:54:43,359 --> 00:54:45,760
believe i heard you though

1399
00:54:45,760 --> 00:54:47,200
okay

1400
00:54:47,200 --> 00:54:48,240
uh

1401
00:54:48,240 --> 00:54:49,599
so yeah why

1402
00:54:49,599 --> 00:54:50,960
i guess i'm

1403
00:54:50,960 --> 00:54:52,640
i was curious if you had more insight

1404
00:54:52,640 --> 00:54:55,599
into why all the ip address parsing code

1405
00:54:55,599 --> 00:54:57,680
for ip certificate

1406
00:54:57,680 --> 00:54:58,880
validation

1407
00:54:58,880 --> 00:54:59,760
wasn't

1408
00:54:59,760 --> 00:55:02,319
didn't make this easy

1409
00:55:02,319 --> 00:55:05,200
well we mean we recommend a particular

1410
00:55:05,200 --> 00:55:08,079
parser the the what wg parser um in the

1411
00:55:08,079 --> 00:55:10,319
draft if i recall correctly um and i

1412
00:55:10,319 --> 00:55:12,640
don't i don't know um often if that

1413
00:55:12,640 --> 00:55:14,559
matches the existing parsers that are

1414
00:55:14,559 --> 00:55:15,839
present and

1415
00:55:15,839 --> 00:55:18,079
you know uh existing dls stacks or

1416
00:55:18,079 --> 00:55:20,480
elsewhere in host stacks

1417
00:55:20,480 --> 00:55:23,119
so it's mainly i guess a problem of you

1418
00:55:23,119 --> 00:55:26,240
know ensuring parity between

1419
00:55:26,240 --> 00:55:28,319
what's available and what's expected

1420
00:55:28,319 --> 00:55:31,040
from the perspective of vch

1421
00:55:31,040 --> 00:55:32,079
and

1422
00:55:32,079 --> 00:55:34,000
as you may recall trying to carve out

1423
00:55:34,000 --> 00:55:36,000
specifically in language what is

1424
00:55:36,000 --> 00:55:38,799
considered to be a valid or not uh

1425
00:55:38,799 --> 00:55:40,480
public name

1426
00:55:40,480 --> 00:55:40,820
um

1427
00:55:40,820 --> 00:55:42,720
[Music]

1428
00:55:42,720 --> 00:55:45,040
the world would be i guess a lot simpler

1429
00:55:45,040 --> 00:55:47,359
if we did not

1430
00:55:47,359 --> 00:55:49,599
have to deal with this

1431
00:55:49,599 --> 00:55:54,240
ipv4 nonsense but last year we are

1432
00:55:54,960 --> 00:55:56,400
i don't remember any more particular

1433
00:55:56,400 --> 00:55:59,599
details beyond that

1434
00:56:01,119 --> 00:56:05,599
okay uh go ahead david

1435
00:56:05,920 --> 00:56:07,760
so the the web with parser did also

1436
00:56:07,760 --> 00:56:09,839
recently change in a way that's actually

1437
00:56:09,839 --> 00:56:13,359
probably useful to us uh because uh we

1438
00:56:13,359 --> 00:56:14,960
realized that uh

1439
00:56:14,960 --> 00:56:17,440
if the the that you really want dns

1440
00:56:17,440 --> 00:56:18,960
names to be closed under a subset of

1441
00:56:18,960 --> 00:56:21,839
other under suffixes um and so we can

1442
00:56:21,839 --> 00:56:24,799
instead simplify our rule to if the last

1443
00:56:24,799 --> 00:56:26,960
component is all numeric or looks like

1444
00:56:26,960 --> 00:56:29,280
hex then reject it which should be a lot

1445
00:56:29,280 --> 00:56:31,520
simpler than the like

1446
00:56:31,520 --> 00:56:33,520
go check for like four components or

1447
00:56:33,520 --> 00:56:35,119
three components insanity that we

1448
00:56:35,119 --> 00:56:37,440
previously had to deal with

1449
00:56:37,440 --> 00:56:39,200
right uh yeah i didn't know that thanks

1450
00:56:39,200 --> 00:56:41,200
for flagging that um

1451
00:56:41,200 --> 00:56:43,119
uh might be good uh it might be useful

1452
00:56:43,119 --> 00:56:44,799
to track that um

1453
00:56:44,799 --> 00:56:46,400
um

1454
00:56:46,400 --> 00:56:48,000
i guess i don't think that would require

1455
00:56:48,000 --> 00:56:49,520
a spec change provided that you just

1456
00:56:49,520 --> 00:56:51,040
implement the latest version of the the

1457
00:56:51,040 --> 00:56:53,280
wg parser but

1458
00:56:53,280 --> 00:56:55,440
um

1459
00:56:55,520 --> 00:56:56,880
but anyways good to know

1460
00:56:56,880 --> 00:56:58,880
steven

1461
00:56:58,880 --> 00:57:00,559
yeah i mean i just i only just noticed

1462
00:57:00,559 --> 00:57:02,480
that the title of the slide here um i

1463
00:57:02,480 --> 00:57:03,520
think we should

1464
00:57:03,520 --> 00:57:04,720
there's some really reasonably good news

1465
00:57:04,720 --> 00:57:06,720
too i think actually because

1466
00:57:06,720 --> 00:57:08,559
although eh is a lot more complicated

1467
00:57:08,559 --> 00:57:10,720
internally than the s i

1468
00:57:10,720 --> 00:57:12,640
externally for all the web servers we've

1469
00:57:12,640 --> 00:57:14,799
integrated with it it was really really

1470
00:57:14,799 --> 00:57:18,319
easy to to upgrade him from vs9 to ech

1471
00:57:18,319 --> 00:57:21,599
um so and we got a drop with with

1472
00:57:21,599 --> 00:57:23,280
with i think mozilla for about 10 and

1473
00:57:23,280 --> 00:57:24,960
with boring for 13 without too much

1474
00:57:24,960 --> 00:57:26,960
hassle uh i'm a cloud player as well i'm

1475
00:57:26,960 --> 00:57:29,440
not sure what on 13. so you know

1476
00:57:29,440 --> 00:57:30,720
i think there's quite a bit good news as

1477
00:57:30,720 --> 00:57:34,079
well as red flags more good news

1478
00:57:34,079 --> 00:57:37,119
um yeah sorry i didn't mean to uh to

1479
00:57:37,119 --> 00:57:39,760
cast out on sort of the the future of

1480
00:57:39,760 --> 00:57:41,359
ech but um

1481
00:57:41,359 --> 00:57:42,880
mostly just to point out that the few

1482
00:57:42,880 --> 00:57:44,960
implementation uh sharp edges that have

1483
00:57:44,960 --> 00:57:46,000
come up

1484
00:57:46,000 --> 00:57:46,799
um

1485
00:57:46,799 --> 00:57:49,680
it is good news indeed that it's been

1486
00:57:49,680 --> 00:57:52,160
relatively easy to upgrade existing

1487
00:57:52,160 --> 00:57:54,799
servers to support ech as you say

1488
00:57:54,799 --> 00:57:56,960
um

1489
00:57:56,960 --> 00:57:58,960
it'd be great if this list was empty but

1490
00:57:58,960 --> 00:58:00,559
uh you know

1491
00:58:00,559 --> 00:58:03,520
i can't have it all i guess

1492
00:58:03,520 --> 00:58:05,599
all right um that's pretty much it um i

1493
00:58:05,599 --> 00:58:08,640
i you know between now and i guess ihf

1494
00:58:08,640 --> 00:58:12,480
113. um i guess the expectation is still

1495
00:58:12,480 --> 00:58:14,240
still targeting draft 13 for

1496
00:58:14,240 --> 00:58:16,000
interoperative deployment

1497
00:58:16,000 --> 00:58:16,799
um

1498
00:58:16,799 --> 00:58:19,119
and uh as you know client stack server

1499
00:58:19,119 --> 00:58:21,920
stacks uh you know proceed in adding

1500
00:58:21,920 --> 00:58:23,280
more support for this we should have a

1501
00:58:23,280 --> 00:58:25,839
better uh better picture in terms of you

1502
00:58:25,839 --> 00:58:28,960
know how deployable ech is

1503
00:58:28,960 --> 00:58:32,400
on the internet at that meeting

1504
00:58:32,400 --> 00:58:35,640
any questions

1505
00:58:41,680 --> 00:58:43,359
if not

1506
00:58:43,359 --> 00:58:44,160
uh

1507
00:58:44,160 --> 00:58:46,400
i will yield the floor and we can turn

1508
00:58:46,400 --> 00:58:49,359
it over i think steven your next

1509
00:58:49,359 --> 00:58:52,960
no sorry joe you're next for a47

1510
00:58:52,960 --> 00:58:56,200
no stop

1511
00:59:10,319 --> 00:59:11,200
okay

1512
00:59:11,200 --> 00:59:13,440
here we are again so this is going to be

1513
00:59:13,440 --> 00:59:16,400
a little bit of a re hash of the

1514
00:59:16,400 --> 00:59:20,640
some of the discussion we had in uh

1515
00:59:20,960 --> 00:59:23,520
the flags spec so

1516
00:59:23,520 --> 00:59:26,880
in rfc 8447 we have

1517
00:59:26,880 --> 00:59:30,000
this uh recommended column uh which is

1518
00:59:30,000 --> 00:59:33,119
supposed to indicate okay if it's yes

1519
00:59:33,119 --> 00:59:34,240
then this is

1520
00:59:34,240 --> 00:59:37,200
an extension or a parameter that's

1521
00:59:37,200 --> 00:59:39,040
generally recommended

1522
00:59:39,040 --> 00:59:41,040
for an implementation to support and if

1523
00:59:41,040 --> 00:59:43,280
it's no it means it's not generally

1524
00:59:43,280 --> 00:59:44,880
recommended for an implementation

1525
00:59:44,880 --> 00:59:47,440
support uh to support

1526
00:59:47,440 --> 00:59:48,559
so

1527
00:59:48,559 --> 00:59:50,960
on the surface this seems seemed like a

1528
00:59:50,960 --> 00:59:53,599
a good idea so that you know there were

1529
00:59:53,599 --> 00:59:56,960
certain ciphers that we we thought were

1530
00:59:56,960 --> 00:59:58,079
good

1531
00:59:58,079 --> 00:59:59,280
and then others which we hadn't

1532
00:59:59,280 --> 01:00:02,000
evaluated or we might think were bad uh

1533
01:00:02,000 --> 01:00:04,079
that we didn't recommend or were useful

1534
01:00:04,079 --> 01:00:06,720
only in particular uh circumstances or

1535
01:00:06,720 --> 01:00:08,559
could only be thought of as secure in

1536
01:00:08,559 --> 01:00:10,319
particular circumstances

1537
01:00:10,319 --> 01:00:11,280
um

1538
01:00:11,280 --> 01:00:13,440
the feedback that we got from here is

1539
01:00:13,440 --> 01:00:14,960
that well

1540
01:00:14,960 --> 01:00:17,359
this isn't really perhaps enough

1541
01:00:17,359 --> 01:00:20,640
information um

1542
01:00:20,640 --> 01:00:22,240
you know n could mean a number of

1543
01:00:22,240 --> 01:00:24,079
different things from what hey we didn't

1544
01:00:24,079 --> 01:00:26,640
it was not evaluated by us it was not

1545
01:00:26,640 --> 01:00:28,880
recommended in any circumstances this

1546
01:00:28,880 --> 01:00:31,200
cypher is not safe at any speed can't

1547
01:00:31,200 --> 01:00:33,839
you know you should should not use it um

1548
01:00:33,839 --> 01:00:34,799
or

1549
01:00:34,799 --> 01:00:36,559
could mean that it's only recommended in

1550
01:00:36,559 --> 01:00:38,240
specific cases

1551
01:00:38,240 --> 01:00:42,079
um so as we're working on rfc 8447

1552
01:00:42,079 --> 01:00:43,119
this

1553
01:00:43,119 --> 01:00:44,559
uh we

1554
01:00:44,559 --> 01:00:46,000
we'd like to

1555
01:00:46,000 --> 01:00:48,480
try to address this issue and make it a

1556
01:00:48,480 --> 01:00:50,960
bit clearer which probably means

1557
01:00:50,960 --> 01:00:53,359
um adding

1558
01:00:53,359 --> 01:00:55,440
uh some additional

1559
01:00:55,440 --> 01:00:59,119
states in here i guess you'd say

1560
01:00:59,520 --> 01:01:01,680
so we have a we have a draft out and we

1561
01:01:01,680 --> 01:01:04,480
have a proposal in that draft

1562
01:01:04,480 --> 01:01:06,880
that we'd like to to run by the working

1563
01:01:06,880 --> 01:01:08,000
group here

1564
01:01:08,000 --> 01:01:11,839
and get some feedback on the

1565
01:01:11,839 --> 01:01:14,880
proposal is parameters you know if it's

1566
01:01:14,880 --> 01:01:18,400
yes and we can argue about what the uh

1567
01:01:18,400 --> 01:01:20,960
what the character here is but yet why

1568
01:01:20,960 --> 01:01:22,559
right now would mean parameters are

1569
01:01:22,559 --> 01:01:24,160
recommended for general religious as it

1570
01:01:24,160 --> 01:01:26,319
is today and then n would mean that

1571
01:01:26,319 --> 01:01:29,599
they're discouraged um and then we would

1572
01:01:29,599 --> 01:01:32,160
also include a reference there that to

1573
01:01:32,160 --> 01:01:33,760
the

1574
01:01:33,760 --> 01:01:36,160
to the document that says why

1575
01:01:36,160 --> 01:01:38,720
uh this parameter is limited and then if

1576
01:01:38,720 --> 01:01:40,240
if the

1577
01:01:40,240 --> 01:01:42,160
area was blank if there was a space

1578
01:01:42,160 --> 01:01:43,839
there then parameters would be

1579
01:01:43,839 --> 01:01:46,240
unevaluated so they would in general be

1580
01:01:46,240 --> 01:01:48,799
not recommended uh but

1581
01:01:48,799 --> 01:01:50,640
we wouldn't have any specific thing to

1582
01:01:50,640 --> 01:01:53,040
say about why other than it's just we

1583
01:01:53,040 --> 01:01:56,000
haven't gone through the work

1584
01:01:57,039 --> 01:01:59,280
uh

1585
01:02:00,400 --> 01:02:02,559
so

1586
01:02:04,839 --> 01:02:08,079
martin so i was looking at this

1587
01:02:08,079 --> 01:02:09,760
and it sort of occurred to me that this

1588
01:02:09,760 --> 01:02:11,520
column is really what does the ietf

1589
01:02:11,520 --> 01:02:13,039
think about this

1590
01:02:13,039 --> 01:02:14,400
code point

1591
01:02:14,400 --> 01:02:16,559
and if if you frame it that way then

1592
01:02:16,559 --> 01:02:18,400
then maybe

1593
01:02:18,400 --> 01:02:20,799
the title of the column is you know

1594
01:02:20,799 --> 01:02:22,400
its status

1595
01:02:22,400 --> 01:02:25,119
and the values are recommended

1596
01:02:25,119 --> 01:02:28,960
discouraged or you know no opinion

1597
01:02:28,960 --> 01:02:31,280
and that gives you the opportunity to to

1598
01:02:31,280 --> 01:02:33,520
have some statements there about other

1599
01:02:33,520 --> 01:02:35,839
things if you if the ietf wants to say

1600
01:02:35,839 --> 01:02:37,200
something else like

1601
01:02:37,200 --> 01:02:38,400
um

1602
01:02:38,400 --> 01:02:40,480
limited applicability or

1603
01:02:40,480 --> 01:02:41,839
something else

1604
01:02:41,839 --> 01:02:43,200
i don't know

1605
01:02:43,200 --> 01:02:46,399
can we just say what we mean

1606
01:02:46,839 --> 01:02:50,720
yeah that's that's a good suggestion uh

1607
01:02:50,720 --> 01:02:53,279
next stephen

1608
01:02:53,839 --> 01:02:55,520
yeah i gotta maybe argue the opposite i

1609
01:02:55,520 --> 01:02:57,119
think the semantics of no can't be

1610
01:02:57,119 --> 01:02:59,039
defined precisely and therefore has to

1611
01:02:59,039 --> 01:03:01,039
be vague and i think we can't do any

1612
01:03:01,039 --> 01:03:04,240
better really because sometimes no means

1613
01:03:04,240 --> 01:03:05,520
maybe it'll be good in future and

1614
01:03:05,520 --> 01:03:07,520
sometimes no means we absolutely hate

1615
01:03:07,520 --> 01:03:09,440
this sometimes no means this is

1616
01:03:09,440 --> 01:03:10,799
something that somebody else thinks is

1617
01:03:10,799 --> 01:03:13,440
good but we have no opinion on

1618
01:03:13,440 --> 01:03:15,039
if we try and get any more fine grained

1619
01:03:15,039 --> 01:03:16,559
i think we're on a slippery slope and i

1620
01:03:16,559 --> 01:03:18,160
don't think it'll work so i i would

1621
01:03:18,160 --> 01:03:19,760
argue for the status quo

1622
01:03:19,760 --> 01:03:21,200
even if some people find it difficult

1623
01:03:21,200 --> 01:03:24,319
sometimes life is difficult

1624
01:03:28,400 --> 01:03:31,400
eckerd

1625
01:03:33,440 --> 01:03:35,119
yeah

1626
01:03:35,119 --> 01:03:37,520
i guess i guess i'm persuaded i think

1627
01:03:37,520 --> 01:03:39,039
that we need to have something more

1628
01:03:39,039 --> 01:03:40,799
fancy than we have now um i think that

1629
01:03:40,799 --> 01:03:42,400
like what we have now is innovation and

1630
01:03:42,400 --> 01:03:44,960
that like it you know it it it avoided

1631
01:03:44,960 --> 01:03:46,559
us having to like spend a lot of time

1632
01:03:46,559 --> 01:03:48,000
evaluating things we didn't care about

1633
01:03:48,000 --> 01:03:49,520
um but um

1634
01:03:49,520 --> 01:03:50,720
i think it's also clear people are

1635
01:03:50,720 --> 01:03:52,400
confused um

1636
01:03:52,400 --> 01:03:54,240
i i think martin's suggestion is

1637
01:03:54,240 --> 01:03:56,240
actually pretty pretty solid um i don't

1638
01:03:56,240 --> 01:03:57,359
care what things are called but i think

1639
01:03:57,359 --> 01:03:59,680
that like the like i think the minimum

1640
01:03:59,680 --> 01:04:01,200
things we need to be able to say

1641
01:04:01,200 --> 01:04:02,240
are

1642
01:04:02,240 --> 01:04:03,760
we're in favor of this

1643
01:04:03,760 --> 01:04:05,680
we think this is bad and we have no

1644
01:04:05,680 --> 01:04:07,280
opinion about it and there's many things

1645
01:04:07,280 --> 01:04:08,720
we have to say and i think there's like

1646
01:04:08,720 --> 01:04:10,160
room for

1647
01:04:10,160 --> 01:04:11,760
here were some nuanced opinion like that

1648
01:04:11,760 --> 01:04:13,520
maybe is only good for iot or something

1649
01:04:13,520 --> 01:04:16,079
um so i think you know and i think it's

1650
01:04:16,079 --> 01:04:17,440
clear that the why end thing didn't

1651
01:04:17,440 --> 01:04:19,119
really work out that well um

1652
01:04:19,119 --> 01:04:22,559
specifically um so um i think i think

1653
01:04:22,559 --> 01:04:25,119
empty swirls will be fine um uh

1654
01:04:25,119 --> 01:04:27,920
you know um i i i think i but i think we

1655
01:04:27,920 --> 01:04:29,440
probably should just strike the y in the

1656
01:04:29,440 --> 01:04:31,200
end

1657
01:04:31,200 --> 01:04:33,439
um

1658
01:04:38,839 --> 01:04:42,240
okay uh stephen

1659
01:04:42,240 --> 01:04:43,920
yeah sorry for getting back into again

1660
01:04:43,920 --> 01:04:46,000
honestly i think

1661
01:04:46,000 --> 01:04:48,000
no opinion versus bad

1662
01:04:48,000 --> 01:04:50,160
involves almost as many debates that are

1663
01:04:50,160 --> 01:04:53,119
pointless as the previous situation

1664
01:04:53,119 --> 01:04:54,559
and so i i don't think that's going to

1665
01:04:54,559 --> 01:04:55,599
solve it for us and i don't think it

1666
01:04:55,599 --> 01:04:56,880
really makes it much clearer for

1667
01:04:56,880 --> 01:04:58,160
somebody who's going to be confused

1668
01:04:58,160 --> 01:04:59,280
anyway

1669
01:04:59,280 --> 01:05:00,720
so you know i think that's confused a

1670
01:05:00,720 --> 01:05:03,959
little bit

1671
01:05:08,000 --> 01:05:09,839
yola

1672
01:05:09,839 --> 01:05:13,680
um right so uh these kind of values make

1673
01:05:13,680 --> 01:05:15,200
sense for um

1674
01:05:15,200 --> 01:05:17,200
cypher suites or for

1675
01:05:17,200 --> 01:05:19,440
i don't know uh different helmet groups

1676
01:05:19,440 --> 01:05:23,200
like uh yeah we really like uh the 512

1677
01:05:23,200 --> 01:05:24,640
bit

1678
01:05:24,640 --> 01:05:26,240
from one

1679
01:05:26,240 --> 01:05:28,480
edd sa but

1680
01:05:28,480 --> 01:05:31,039
this is a yes and the

1681
01:05:31,039 --> 01:05:33,280
512 bit

1682
01:05:33,280 --> 01:05:34,799
rsa is

1683
01:05:34,799 --> 01:05:35,599
no

1684
01:05:35,599 --> 01:05:37,280
and we're not saying anything about the

1685
01:05:37,280 --> 01:05:38,720
brain pool curves

1686
01:05:38,720 --> 01:05:41,039
that that makes sense but uh for

1687
01:05:41,039 --> 01:05:43,280
extensions what possible extension are

1688
01:05:43,280 --> 01:05:44,960
you going to say no don't use that

1689
01:05:44,960 --> 01:05:46,000
testing

1690
01:05:46,000 --> 01:05:48,559
standardize that we just added this

1691
01:05:48,559 --> 01:05:50,640
so it might be a change that we make

1692
01:05:50,640 --> 01:05:52,799
later to this extension but

1693
01:05:52,799 --> 01:05:54,720
i don't see how we're making new

1694
01:05:54,720 --> 01:05:56,799
extensions and making them not

1695
01:05:56,799 --> 01:05:59,359
recommended

1696
01:05:59,760 --> 01:06:03,640
with this with these semantics

1697
01:06:05,920 --> 01:06:07,920
answer that question the the ones that

1698
01:06:07,920 --> 01:06:10,079
have come up before typically do not get

1699
01:06:10,079 --> 01:06:11,440
adopted by the working group and then

1700
01:06:11,440 --> 01:06:13,280
they go to the ise

1701
01:06:13,280 --> 01:06:15,920
um to get published um but what i got on

1702
01:06:15,920 --> 01:06:17,200
the queue to say was that instead of

1703
01:06:17,200 --> 01:06:20,000
having an open-ended um

1704
01:06:20,000 --> 01:06:21,280
section where we could put it in this

1705
01:06:21,280 --> 01:06:23,359
column we could also just put notes in

1706
01:06:23,359 --> 01:06:26,319
the in the actual registry and point so

1707
01:06:26,319 --> 01:06:28,079
that there's less

1708
01:06:28,079 --> 01:06:31,640
ascii art problems

1709
01:06:38,000 --> 01:06:40,640
okay rich

1710
01:06:43,359 --> 01:06:45,520
uh yeah i think

1711
01:06:45,520 --> 01:06:47,039
i thought i heard steven say he was

1712
01:06:47,039 --> 01:06:48,880
against having a no

1713
01:06:48,880 --> 01:06:52,079
um and i think we need that or when we

1714
01:06:52,079 --> 01:06:54,720
have yet another die die die rfc that

1715
01:06:54,720 --> 01:06:57,200
says don't use you know these ciphers

1716
01:06:57,200 --> 01:06:58,880
okay it wasn't steven if somebody else i

1717
01:06:58,880 --> 01:07:02,160
thought said no um i think

1718
01:07:02,160 --> 01:07:05,680
notes as a one of the designated experts

1719
01:07:05,680 --> 01:07:06,720
is

1720
01:07:06,720 --> 01:07:08,640
a slippery slope

1721
01:07:08,640 --> 01:07:11,920
where do we get the note text from

1722
01:07:11,920 --> 01:07:12,720
um

1723
01:07:12,720 --> 01:07:14,799
i wouldn't want to write it and i also

1724
01:07:14,799 --> 01:07:17,359
wouldn't want to copy it blindly from

1725
01:07:17,359 --> 01:07:20,160
some ise's

1726
01:07:20,160 --> 01:07:23,279
ise draft

1727
01:07:26,240 --> 01:07:29,479
that's it

1728
01:07:31,520 --> 01:07:33,839
turn

1729
01:07:37,920 --> 01:07:40,400
for any standards draft i think it would

1730
01:07:40,400 --> 01:07:43,359
be good with a text column to

1731
01:07:43,359 --> 01:07:46,720
complement this yes no

1732
01:07:46,720 --> 01:07:49,760
reference that could for example like

1733
01:07:49,760 --> 01:07:50,880
explain

1734
01:07:50,880 --> 01:07:54,960
what any limitations would be or

1735
01:07:54,960 --> 01:07:57,680
for example a specific use case this is

1736
01:07:57,680 --> 01:07:59,520
recommended for iot

1737
01:07:59,520 --> 01:08:01,760
and so on that's similar to what ipsec

1738
01:08:01,760 --> 01:08:02,880
is doing

1739
01:08:02,880 --> 01:08:05,920
today at least in their drafts but i

1740
01:08:05,920 --> 01:08:08,480
think that should only be used for

1741
01:08:08,480 --> 01:08:10,880
standards track not for any

1742
01:08:10,880 --> 01:08:14,799
individual registrations

1743
01:08:22,560 --> 01:08:25,839
okay rich

1744
01:08:28,000 --> 01:08:30,479
sorry i meant to take my hand down um

1745
01:08:30,479 --> 01:08:32,640
but in the chat i think was watson

1746
01:08:32,640 --> 01:08:34,719
proposed having a d for you know

1747
01:08:34,719 --> 01:08:36,960
deprecated and maybe that's a finer

1748
01:08:36,960 --> 01:08:38,479
grain than

1749
01:08:38,479 --> 01:08:40,319
n

1750
01:08:40,319 --> 01:08:42,719
don't know

1751
01:08:46,080 --> 01:08:49,080
then

1752
01:08:54,238 --> 01:08:55,120
hi

1753
01:08:55,120 --> 01:08:57,520
so uh yeah then the concept of freeform

1754
01:08:57,520 --> 01:09:00,399
notes seems pretty strange because

1755
01:09:00,399 --> 01:09:02,238
it seems like we a lot of the places

1756
01:09:02,238 --> 01:09:05,439
where we want these notes are on ise

1757
01:09:05,439 --> 01:09:07,040
submissions

1758
01:09:07,040 --> 01:09:09,759
and so we i guess be in the position of

1759
01:09:09,759 --> 01:09:10,719
writing

1760
01:09:10,719 --> 01:09:11,839
an

1761
01:09:11,839 --> 01:09:15,120
ietf standards track rfc

1762
01:09:15,120 --> 01:09:17,839
that adds a comment to an entry created

1763
01:09:17,839 --> 01:09:20,479
by an isd commission it seems uh at best

1764
01:09:20,479 --> 01:09:22,319
hostile and also

1765
01:09:22,319 --> 01:09:23,120
uh

1766
01:09:23,120 --> 01:09:24,960
pretty complicated

1767
01:09:24,960 --> 01:09:25,920
uh

1768
01:09:25,920 --> 01:09:28,000
i think that uh oh in terms of

1769
01:09:28,000 --> 01:09:30,880
deprecated uh remember that we can also

1770
01:09:30,880 --> 01:09:33,520
remove coke from the register

1771
01:09:33,520 --> 01:09:35,679
um we

1772
01:09:35,679 --> 01:09:37,198
not that they be free again they just

1773
01:09:37,198 --> 01:09:39,198
get marked as as reserved due to

1774
01:09:39,198 --> 01:09:41,040
collision

1775
01:09:41,040 --> 01:09:42,560
or uh

1776
01:09:42,560 --> 01:09:43,839
we have various ways that we could

1777
01:09:43,839 --> 01:09:46,839
potentially notate that independent of

1778
01:09:46,839 --> 01:09:49,679
this i think what might be

1779
01:09:49,679 --> 01:09:52,960
most straightforward and clear

1780
01:09:52,960 --> 01:09:55,840
would be to simply note the status of

1781
01:09:55,840 --> 01:09:57,840
the mining document

1782
01:09:57,840 --> 01:10:01,199
in the registry so if we're allowing

1783
01:10:01,199 --> 01:10:02,480
code points to be registered from

1784
01:10:02,480 --> 01:10:05,280
documents that are independent stream or

1785
01:10:05,280 --> 01:10:09,040
standards track or experimental

1786
01:10:09,040 --> 01:10:10,400
let's just

1787
01:10:10,400 --> 01:10:12,159
have a column that tells you the status

1788
01:10:12,159 --> 01:10:16,280
of the accompanying document

1789
01:10:22,480 --> 01:10:24,560
so speaking just for myself joe what i

1790
01:10:24,560 --> 01:10:27,120
like about this is that it doesn't take

1791
01:10:27,120 --> 01:10:29,920
a lot of itf arcane process

1792
01:10:29,920 --> 01:10:32,560
interpretation to parse those words even

1793
01:10:32,560 --> 01:10:34,320
if we want to put a little more nuance

1794
01:10:34,320 --> 01:10:35,440
in it so i think we may need some

1795
01:10:35,440 --> 01:10:37,600
finesse but top line i like the starting

1796
01:10:37,600 --> 01:10:39,440
point of just the clarity of of what

1797
01:10:39,440 --> 01:10:40,960
that might mean to someone that's not

1798
01:10:40,960 --> 01:10:44,080
steep in in an itf process and back to

1799
01:10:44,080 --> 01:10:45,280
kind of uh

1800
01:10:45,280 --> 01:10:46,640
your comment been pre that you

1801
01:10:46,640 --> 01:10:48,560
previously made to list kind of status i

1802
01:10:48,560 --> 01:10:50,159
i think that's helpful for inside

1803
01:10:50,159 --> 01:10:52,480
baseball for ietf but the nuance of

1804
01:10:52,480 --> 01:10:55,360
what's in isc versus kind of someplace

1805
01:10:55,360 --> 01:10:57,199
else that's not so well appreciated

1806
01:10:57,199 --> 01:11:00,159
that's just for us

1807
01:11:03,600 --> 01:11:05,280
yeah

1808
01:11:05,280 --> 01:11:07,520
okay great this is a good feedback i

1809
01:11:07,520 --> 01:11:09,760
think

1810
01:11:09,760 --> 01:11:11,679
we're also going to present this at sag

1811
01:11:11,679 --> 01:11:14,159
we may do a little revision of of this

1812
01:11:14,159 --> 01:11:15,760
based on some of the feedback we got

1813
01:11:15,760 --> 01:11:16,880
here

1814
01:11:16,880 --> 01:11:18,880
because this something that may be of

1815
01:11:18,880 --> 01:11:21,520
interest in general to other groups that

1816
01:11:21,520 --> 01:11:23,440
face similar

1817
01:11:23,440 --> 01:11:25,120
challenges

1818
01:11:25,120 --> 01:11:27,440
there are a couple other things in this

1819
01:11:27,440 --> 01:11:30,000
draft that i want to quickly uh go

1820
01:11:30,000 --> 01:11:32,320
through here um

1821
01:11:32,320 --> 01:11:33,440
the other

1822
01:11:33,440 --> 01:11:35,920
thing we had added was a

1823
01:11:35,920 --> 01:11:38,080
a way to reserve

1824
01:11:38,080 --> 01:11:38,880
uh

1825
01:11:38,880 --> 01:11:42,159
experimental uh

1826
01:11:42,320 --> 01:11:45,040
code point range uh that we kind of set

1827
01:11:45,040 --> 01:11:47,360
aside a temporary uh space where we

1828
01:11:47,360 --> 01:11:50,000
could assign values that were valid for

1829
01:11:50,000 --> 01:11:52,640
only a year uh for for kind of larger

1830
01:11:52,640 --> 01:11:54,400
scale experience

1831
01:11:54,400 --> 01:11:57,040
experiments um

1832
01:11:57,040 --> 01:11:59,840
i think you know after some discussion

1833
01:11:59,840 --> 01:12:02,560
this really probably is is

1834
01:12:02,560 --> 01:12:05,440
would be better not trying to manage a

1835
01:12:05,440 --> 01:12:08,480
space separately from ayana but kind of

1836
01:12:08,480 --> 01:12:10,400
go through the existing iona process and

1837
01:12:10,400 --> 01:12:12,480
maybe see if we can

1838
01:12:12,480 --> 01:12:15,839
streamline that a bit

1839
01:12:18,000 --> 01:12:20,000
i don't know if anybody has any feedback

1840
01:12:20,000 --> 01:12:23,840
on that particular area

1841
01:12:27,040 --> 01:12:29,600
go ahead martin

1842
01:12:31,360 --> 01:12:32,880
so i think this is this is a good

1843
01:12:32,880 --> 01:12:34,480
direction the

1844
01:12:34,480 --> 01:12:36,640
the idea that we give someone a con

1845
01:12:36,640 --> 01:12:38,800
experiment within the experiment turns

1846
01:12:38,800 --> 01:12:40,239
into success

1847
01:12:40,239 --> 01:12:41,360
and then they have to pick a different

1848
01:12:41,360 --> 01:12:42,960
code point

1849
01:12:42,960 --> 01:12:44,560
and

1850
01:12:44,560 --> 01:12:46,480
deal with the deployment come from that

1851
01:12:46,480 --> 01:12:48,719
is is kind of annoying

1852
01:12:48,719 --> 01:12:50,480
at the same time

1853
01:12:50,480 --> 01:12:52,719
having the entire space available for

1854
01:12:52,719 --> 01:12:56,239
experimentation perhaps with a a process

1855
01:12:56,239 --> 01:12:57,199
that

1856
01:12:57,199 --> 01:12:59,760
streamlines the registration would be

1857
01:12:59,760 --> 01:13:01,760
would be a good thing i think we want to

1858
01:13:01,760 --> 01:13:03,440
encourage people to register the code

1859
01:13:03,440 --> 01:13:05,280
points that they're going to use

1860
01:13:05,280 --> 01:13:08,400
and keep that as simple as possible

1861
01:13:08,400 --> 01:13:11,040
this seems right

1862
01:13:12,800 --> 01:13:15,800
rich

1863
01:13:24,960 --> 01:13:27,120
so you got to see my face um

1864
01:13:27,120 --> 01:13:29,040
i don't think the registration is overly

1865
01:13:29,040 --> 01:13:30,640
complex i mean sometimes you have to

1866
01:13:30,640 --> 01:13:32,960
wait you know the email delay for one of

1867
01:13:32,960 --> 01:13:35,920
the experts to respond

1868
01:13:35,920 --> 01:13:36,719
but

1869
01:13:36,719 --> 01:13:39,280
you know it's only like a week or two in

1870
01:13:39,280 --> 01:13:41,440
general and no experiment that lasts a

1871
01:13:41,440 --> 01:13:43,040
year is really going to be

1872
01:13:43,040 --> 01:13:44,840
offset by a week you can always

1873
01:13:44,840 --> 01:13:48,320
pre-allocate ask for a pre-allocation um

1874
01:13:48,320 --> 01:13:50,800
i'm just mainly concerned about the you

1875
01:13:50,800 --> 01:13:51,520
know

1876
01:13:51,520 --> 01:13:54,000
two places to go for things um and the

1877
01:13:54,000 --> 01:13:55,120
minute you have to write down

1878
01:13:55,120 --> 01:13:56,719
information in two places you're almost

1879
01:13:56,719 --> 01:13:58,480
guaranteed somewhere it's gonna be out

1880
01:13:58,480 --> 01:14:00,719
of sync right the old comment about code

1881
01:14:00,719 --> 01:14:02,719
and comments disagreeing

1882
01:14:02,719 --> 01:14:04,800
um

1883
01:14:04,800 --> 01:14:07,760
expiration date yeah

1884
01:14:08,880 --> 01:14:11,040
you know make it renewable

1885
01:14:11,040 --> 01:14:14,440
a couple years

1886
01:14:15,840 --> 01:14:18,320
all right

1887
01:14:20,560 --> 01:14:23,280
so i think for for this draft we would

1888
01:14:23,280 --> 01:14:25,920
like to do an adoption call after this

1889
01:14:25,920 --> 01:14:26,800
meeting

1890
01:14:26,800 --> 01:14:28,640
there will still be some things probably

1891
01:14:28,640 --> 01:14:31,440
to work out in some of these details

1892
01:14:31,440 --> 01:14:33,678
but

1893
01:14:35,520 --> 01:14:38,000
that's it thanks

1894
01:14:38,000 --> 01:14:39,400
uh yeah thanks joe um

1895
01:14:39,400 --> 01:14:41,520
[Music]

1896
01:14:41,520 --> 01:14:43,120
that that that sounds reasonable to me i

1897
01:14:43,120 --> 01:14:45,199
know there's been um some discussion

1898
01:14:45,199 --> 01:14:46,320
about this on the list there's been

1899
01:14:46,320 --> 01:14:47,840
interest in doing this for sort of a

1900
01:14:47,840 --> 01:14:48,800
while

1901
01:14:48,800 --> 01:14:50,159
um

1902
01:14:50,159 --> 01:14:52,320
so uh i guess the the question that

1903
01:14:52,320 --> 01:14:54,080
we'll ask the list is is it you know

1904
01:14:54,080 --> 01:14:56,320
what's in the document right now uh

1905
01:14:56,320 --> 01:14:58,000
pending the changes that were discussed

1906
01:14:58,000 --> 01:15:01,840
um uh in the last 15 minutes um is it a

1907
01:15:01,840 --> 01:15:04,560
reasonable starting point for um uh

1908
01:15:04,560 --> 01:15:06,400
updating april for seven

1909
01:15:06,400 --> 01:15:08,800
um so i'll work with uh joe and sean to

1910
01:15:08,800 --> 01:15:10,719
get the document updated and then

1911
01:15:10,719 --> 01:15:12,640
we can start an adoption call on the

1912
01:15:12,640 --> 01:15:14,880
list

1913
01:15:16,880 --> 01:15:18,640
all right um

1914
01:15:18,640 --> 01:15:22,400
i believe now then this uh

1915
01:15:22,400 --> 01:15:23,760
unless anyone had any questions or

1916
01:15:23,760 --> 01:15:25,199
concerns about that i believe now we're

1917
01:15:25,199 --> 01:15:26,560
uh we're

1918
01:15:26,560 --> 01:15:28,410
over to stephen um

1919
01:15:28,410 --> 01:15:29,520
[Music]

1920
01:15:29,520 --> 01:15:32,080
so stephen you can uh request a share of

1921
01:15:32,080 --> 01:15:33,920
slides and then i will

1922
01:15:33,920 --> 01:15:37,320
if you have that

1923
01:15:38,320 --> 01:15:39,840
so i'm just pulling that there was two

1924
01:15:39,840 --> 01:15:42,320
drafts i had

1925
01:15:42,320 --> 01:15:45,920
um back when eth was esi and

1926
01:15:45,920 --> 01:15:48,480
uh i i'm just this is kind of a heads up

1927
01:15:48,480 --> 01:15:50,080
and to get some feedback i'm gonna i'm

1928
01:15:50,080 --> 01:15:51,920
proposing to maybe refresh these with a

1929
01:15:51,920 --> 01:15:52,960
general

1930
01:15:52,960 --> 01:15:55,840
substitution of the smi for ech

1931
01:15:55,840 --> 01:15:58,640
um and then i think last time we talked

1932
01:15:58,640 --> 01:16:00,480
about this a couple years ago people

1933
01:16:00,480 --> 01:16:02,560
seemed like okay with maybe adopting

1934
01:16:02,560 --> 01:16:03,920
them but we didn't do an adoption call

1935
01:16:03,920 --> 01:16:04,800
so

1936
01:16:04,800 --> 01:16:06,080
i'd hope to get back to that state

1937
01:16:06,080 --> 01:16:08,800
pretty quick the text could go into ech

1938
01:16:08,800 --> 01:16:10,000
as an appendix or something that'd be

1939
01:16:10,000 --> 01:16:10,880
fine

1940
01:16:10,880 --> 01:16:12,560
the first one basically just defines a

1941
01:16:12,560 --> 01:16:14,880
pem format for a private key and an ach

1942
01:16:14,880 --> 01:16:15,920
config

1943
01:16:15,920 --> 01:16:18,480
and that's really useful for loading

1944
01:16:18,480 --> 01:16:20,400
into a server when you want to have

1945
01:16:20,400 --> 01:16:22,800
multiple key keys supported

1946
01:16:22,800 --> 01:16:25,440
so you load one file for ech config plus

1947
01:16:25,440 --> 01:16:26,960
private key pair and then you can load a

1948
01:16:26,960 --> 01:16:28,239
whole directory of them or do various

1949
01:16:28,239 --> 01:16:29,199
things

1950
01:16:29,199 --> 01:16:30,320
um

1951
01:16:30,320 --> 01:16:32,480
and it's just just a pen file format the

1952
01:16:32,480 --> 01:16:35,520
second one is a well-known uri and last

1953
01:16:35,520 --> 01:16:37,280
time i did it i found it very useful to

1954
01:16:37,280 --> 01:16:38,560
be able to

1955
01:16:38,560 --> 01:16:41,679
have a web server publish its ech config

1956
01:16:41,679 --> 01:16:43,440
so that a dns

1957
01:16:43,440 --> 01:16:44,719
process could pick it up and then

1958
01:16:44,719 --> 01:16:45,760
publish it

1959
01:16:45,760 --> 01:16:48,080
if you're refreshing keys and so that

1960
01:16:48,080 --> 01:16:50,560
was the well known uh the well-known uri

1961
01:16:50,560 --> 01:16:51,520
one

1962
01:16:51,520 --> 01:16:52,400
um

1963
01:16:52,400 --> 01:16:53,840
so that's what i propose doing i'd love

1964
01:16:53,840 --> 01:16:55,280
to get any feedback

1965
01:16:55,280 --> 01:16:57,120
i'm happy to do that the next uh little

1966
01:16:57,120 --> 01:16:59,120
while and then see if the work group

1967
01:16:59,120 --> 01:17:00,960
want to adopt them or not but if people

1968
01:17:00,960 --> 01:17:02,480
think this is really not a good idea

1969
01:17:02,480 --> 01:17:03,840
anymore then i'd like to know that now

1970
01:17:03,840 --> 01:17:05,199
before i do anything

1971
01:17:05,199 --> 01:17:07,839
that's all i have

1972
01:17:08,159 --> 01:17:10,320
here

1973
01:17:12,719 --> 01:17:14,480
pam thing seems seems harmless but i

1974
01:17:14,480 --> 01:17:15,600
don't think it needs to be specified

1975
01:17:15,600 --> 01:17:19,280
here um it's pen file um so um so no i

1976
01:17:19,280 --> 01:17:20,480
don't think we should adopt that the

1977
01:17:20,480 --> 01:17:24,159
other thing um i i guess i um

1978
01:17:24,159 --> 01:17:25,679
i don't know yet until i know whether or

1979
01:17:25,679 --> 01:17:27,440
not anybody who deploys dns would be

1980
01:17:27,440 --> 01:17:29,199
interested in it um if they do then i

1981
01:17:29,199 --> 01:17:30,480
think we could then i think the question

1982
01:17:30,480 --> 01:17:32,560
would be i'd ask your ids where the

1983
01:17:32,560 --> 01:17:33,920
appropriate places because that could

1984
01:17:33,920 --> 01:17:36,080
it's not like a team like a tls thing in

1985
01:17:36,080 --> 01:17:37,679
particular so um it's not clear to me it

1986
01:17:37,679 --> 01:17:39,840
belongs here if that's the case um but i

1987
01:17:39,840 --> 01:17:41,280
guess the question would be

1988
01:17:41,280 --> 01:17:42,960
like i mean i mean no particular is like

1989
01:17:42,960 --> 01:17:44,400
epp or something right it's like you

1990
01:17:44,400 --> 01:17:47,280
know um so um so so i guess you know i

1991
01:17:47,280 --> 01:17:50,159
guess i i would defer i guess like

1992
01:17:50,159 --> 01:17:53,040
the answer i try to give is like

1993
01:17:53,040 --> 01:17:54,800
is if people are interested then i think

1994
01:17:54,800 --> 01:17:56,239
someone should do it and i would refer

1995
01:17:56,239 --> 01:17:59,920
to the is where it should go sure i mean

1996
01:17:59,920 --> 01:18:02,080
but i guess i i think the performance

1997
01:18:02,080 --> 01:18:03,199
would make more sense here because we're

1998
01:18:03,199 --> 01:18:05,360
defining ech config it's fair point

1999
01:18:05,360 --> 01:18:07,040
about the other one i think

2000
01:18:07,040 --> 01:18:08,080
um

2001
01:18:08,080 --> 01:18:10,400
you know i think if you have dda dynamic

2002
01:18:10,400 --> 01:18:13,360
dns you wouldn't need that well not eso

2003
01:18:13,360 --> 01:18:15,199
thing at all if you don't have dynamic

2004
01:18:15,199 --> 01:18:17,040
dns and you have some other

2005
01:18:17,040 --> 01:18:18,480
zone production

2006
01:18:18,480 --> 01:18:19,520
mechanism

2007
01:18:19,520 --> 01:18:21,360
that feeds into its own file that gets

2008
01:18:21,360 --> 01:18:23,440
dns excited or whatever then in our

2009
01:18:23,440 --> 01:18:25,280
experience it was kind of handy

2010
01:18:25,280 --> 01:18:27,040
but i guess you could you could argue it

2011
01:18:27,040 --> 01:18:28,239
could be to find somewhere else for sure

2012
01:18:28,239 --> 01:18:28,960
yeah

2013
01:18:28,960 --> 01:18:31,040
like itself or whatever right

2014
01:18:31,040 --> 01:18:32,400
that's what i'm suggesting i mean just

2015
01:18:32,400 --> 01:18:33,920
to be clear i'm opposing taking the pen

2016
01:18:33,920 --> 01:18:37,360
thing um so um um

2017
01:18:37,360 --> 01:18:39,040
yes i don't think we should take it

2018
01:18:39,040 --> 01:18:41,199
okay so i don't understand why

2019
01:18:41,199 --> 01:18:42,560
because i don't think we need to specify

2020
01:18:42,560 --> 01:18:43,600
here

2021
01:18:43,600 --> 01:18:46,960
i think it's fine it's internet draft

2022
01:18:48,080 --> 01:18:50,800
okay i don't follow but

2023
01:18:50,800 --> 01:18:52,880
i mean we don't it's not it's simply not

2024
01:18:52,880 --> 01:18:55,679
let's go for this right here

2025
01:18:58,000 --> 01:19:00,320
okay i still don't follow but we can

2026
01:19:00,320 --> 01:19:01,679
probably that's enough time for this

2027
01:19:01,679 --> 01:19:03,199
item probably we can talk about the list

2028
01:19:03,199 --> 01:19:04,239
i guess

2029
01:19:04,239 --> 01:19:07,239
okay

2030
01:19:08,080 --> 01:19:09,120
all i had on this and chairs wanted to

2031
01:19:09,120 --> 01:19:11,920
devote more time to this

2032
01:19:13,600 --> 01:19:16,000
uh yeah thanks steven um

2033
01:19:16,000 --> 01:19:18,800
so yeah uh i mean

2034
01:19:18,800 --> 01:19:21,199
you went away but uh quickly um

2035
01:19:21,199 --> 01:19:23,199
if if you can come back how uh how much

2036
01:19:23,199 --> 01:19:24,320
work do you think it would be to update

2037
01:19:24,320 --> 01:19:27,199
to ech for either of these

2038
01:19:27,199 --> 01:19:29,280
uh not much it's just just it's just a

2039
01:19:29,280 --> 01:19:32,480
case of getting around to it so

2040
01:19:32,480 --> 01:19:33,679
i could probably get done next couple

2041
01:19:33,679 --> 01:19:35,440
weeks

2042
01:19:35,440 --> 01:19:38,800
um yeah i think uh if if you're able to

2043
01:19:38,800 --> 01:19:40,480
spend some cycles on it just updating it

2044
01:19:40,480 --> 01:19:42,560
then we we can uh talk with the the

2045
01:19:42,560 --> 01:19:44,320
chairs um or the other i can talk with

2046
01:19:44,320 --> 01:19:45,600
the other chairs to see

2047
01:19:45,600 --> 01:19:46,880
you know um

2048
01:19:46,880 --> 01:19:48,159
whether or not this is something we want

2049
01:19:48,159 --> 01:19:49,760
to you know actively pursue here or

2050
01:19:49,760 --> 01:19:51,520
elsewhere um it does seem like there's

2051
01:19:51,520 --> 01:19:53,920
some interest in uh

2052
01:19:53,920 --> 01:19:56,560
at least the the well-known draft um

2053
01:19:56,560 --> 01:19:58,719
whether that's tls or not i i i don't

2054
01:19:58,719 --> 01:20:01,040
think it's a a big concern

2055
01:20:01,040 --> 01:20:02,960
um and um

2056
01:20:02,960 --> 01:20:04,560
i guess same for the fan format as well

2057
01:20:04,560 --> 01:20:05,520
i don't know

2058
01:20:05,520 --> 01:20:07,040
specifically where they used to be but

2059
01:20:07,040 --> 01:20:07,840
um

2060
01:20:07,840 --> 01:20:09,679
it does seem that there's uh at least

2061
01:20:09,679 --> 01:20:11,120
some interest in it so

2062
01:20:11,120 --> 01:20:13,600
um all that is to say uh we'll chat

2063
01:20:13,600 --> 01:20:16,800
offline um and come back um with uh

2064
01:20:16,800 --> 01:20:19,360
proposal for how to move it forward

2065
01:20:19,360 --> 01:20:20,560
i'll respect the drafts and talk to the

2066
01:20:20,560 --> 01:20:22,400
chairs as we go from there thanks all

2067
01:20:22,400 --> 01:20:25,120
right yep thank you stephen

2068
01:20:25,120 --> 01:20:28,960
okay uh next up on the agenda is i

2069
01:20:28,960 --> 01:20:30,159
believe

2070
01:20:30,159 --> 01:20:33,159
um

2071
01:20:33,600 --> 01:20:34,480
uh

2072
01:20:34,480 --> 01:20:36,719
the pseudorandom ctos extension out of

2073
01:20:36,719 --> 01:20:40,800
ben is that that's you okay

2074
01:20:41,840 --> 01:20:44,000
and i will

2075
01:20:44,000 --> 01:20:47,639
let you take it away

2076
01:20:56,000 --> 01:21:00,159
hi i don't see the slides in the in the

2077
01:21:00,159 --> 01:21:02,239
slide collection

2078
01:21:02,239 --> 01:21:03,840
oh they're not there

2079
01:21:03,840 --> 01:21:05,920
um

2080
01:21:05,920 --> 01:21:08,639
so i'll take another

2081
01:21:08,639 --> 01:21:11,880
i see

2082
01:21:16,960 --> 01:21:19,920
export authenticators chair slides e c h

2083
01:21:19,920 --> 01:21:22,239
zero knowledge proofs it's uh

2084
01:21:22,239 --> 01:21:23,760
okay so

2085
01:21:23,760 --> 01:21:26,840
i will try to present for my own screen

2086
01:21:26,840 --> 01:21:30,159
instead oh uh sorry um

2087
01:21:30,159 --> 01:21:31,760
i must have skipped over this one when i

2088
01:21:31,760 --> 01:21:33,199
was importing things hold on it's

2089
01:21:33,199 --> 01:21:34,800
processing right now

2090
01:21:34,800 --> 01:21:38,080
oh okay that's that's my bad

2091
01:21:38,080 --> 01:21:41,120
one moment um

2092
01:21:41,120 --> 01:21:44,159
okay can you is my audio still

2093
01:21:44,159 --> 01:21:45,280
crummy

2094
01:21:45,280 --> 01:21:47,440
no no no it might have been just me um

2095
01:21:47,440 --> 01:21:49,360
you you sound fine now

2096
01:21:49,360 --> 01:21:50,880
okay

2097
01:21:50,880 --> 01:21:53,880
um

2098
01:22:02,480 --> 01:22:05,280
okay great

2099
01:22:05,520 --> 01:22:08,639
sorry about that take it away

2100
01:22:09,280 --> 01:22:12,639
so hi all this is a uh a zero zero draft

2101
01:22:12,639 --> 01:22:14,239
this is the first time we're talking

2102
01:22:14,239 --> 01:22:17,120
about this draft the authors are myself

2103
01:22:17,120 --> 01:22:20,239
and chris patton who's also here

2104
01:22:20,239 --> 01:22:22,719
and this is intended status experimental

2105
01:22:22,719 --> 01:22:25,120
so this is new stuff

2106
01:22:25,120 --> 01:22:27,760
weird stuff

2107
01:22:28,400 --> 01:22:30,000
so what are we talking about we are

2108
01:22:30,000 --> 01:22:32,480
talking about an experimental extension

2109
01:22:32,480 --> 01:22:36,400
for ctls so ctls that's the

2110
01:22:36,400 --> 01:22:38,560
also relatively new still an

2111
01:22:38,560 --> 01:22:41,199
underdevelopment version of tls that has

2112
01:22:41,199 --> 01:22:43,520
a pre-shared template that the client

2113
01:22:43,520 --> 01:22:46,320
and server somehow agree on out of band

2114
01:22:46,320 --> 01:22:49,520
before they attempt the connection

2115
01:22:49,520 --> 01:22:52,159
an extension to that that makes the wire

2116
01:22:52,159 --> 01:22:54,480
image purely pseudorandom in other words

2117
01:22:54,480 --> 01:22:57,679
it makes all of the transport contents

2118
01:22:57,679 --> 01:23:00,320
pure pseudorandom

2119
01:23:00,320 --> 01:23:01,840
bytes

2120
01:23:01,840 --> 01:23:03,840
so this is possible because we have a

2121
01:23:03,840 --> 01:23:07,520
template and because ctls already has

2122
01:23:07,520 --> 01:23:09,840
essentially an unpredictable wire format

2123
01:23:09,840 --> 01:23:12,080
where the wire format varies in

2124
01:23:12,080 --> 01:23:14,719
arbitrary ways depending on the contents

2125
01:23:14,719 --> 01:23:16,639
of the template

2126
01:23:16,639 --> 01:23:19,199
that's very different of course from

2127
01:23:19,199 --> 01:23:22,880
mainline tls 1.2 or 1.3 that has

2128
01:23:22,880 --> 01:23:25,520
a very deliberately carefully structured

2129
01:23:25,520 --> 01:23:28,159
wire image

2130
01:23:29,520 --> 01:23:33,199
this extension sits between ctlx and the

2131
01:23:33,199 --> 01:23:35,840
transport so the transport like tcp or

2132
01:23:35,840 --> 01:23:38,719
udp is not modified and ctls is also not

2133
01:23:38,719 --> 01:23:41,920
modified this is layered between them

2134
01:23:41,920 --> 01:23:44,400
with the goal basically of simplifying

2135
01:23:44,400 --> 01:23:46,400
security analysis right all the security

2136
01:23:46,400 --> 01:23:49,040
analysis that holds for tls or ctls

2137
01:23:49,040 --> 01:23:50,000
should

2138
01:23:50,000 --> 01:23:53,679
for the most part continue to hold

2139
01:23:54,560 --> 01:23:57,679
why might you want such a thing

2140
01:23:57,679 --> 01:24:01,360
there's a security benefit here so there

2141
01:24:01,360 --> 01:24:03,440
are these attacks called the nat

2142
01:24:03,440 --> 01:24:06,080
nat slipstream attacks and also various

2143
01:24:06,080 --> 01:24:07,199
other

2144
01:24:07,199 --> 01:24:08,880
protocol confusion or middlebox

2145
01:24:08,880 --> 01:24:12,320
confusion attacks

2146
01:24:13,120 --> 01:24:15,040
where

2147
01:24:15,040 --> 01:24:16,800
where one party

2148
01:24:16,800 --> 01:24:19,920
causes the other party to emit

2149
01:24:19,920 --> 01:24:21,600
text on the mid

2150
01:24:21,600 --> 01:24:24,800
bytes on the wire that are confusing to

2151
01:24:24,800 --> 01:24:28,159
a badly written parser in the middle

2152
01:24:28,159 --> 01:24:29,520
so

2153
01:24:29,520 --> 01:24:31,840
that's uh that's one for

2154
01:24:31,840 --> 01:24:34,400
concern there's also a privacy benefit

2155
01:24:34,400 --> 01:24:35,280
here

2156
01:24:35,280 --> 01:24:38,000
because because each ctls template

2157
01:24:38,000 --> 01:24:41,280
results in a different wire image ctls

2158
01:24:41,280 --> 01:24:44,159
reveals which template is in use

2159
01:24:44,159 --> 01:24:47,120
normally but this extension causes all

2160
01:24:47,120 --> 01:24:49,199
ctls templates that use this extension

2161
01:24:49,199 --> 01:24:53,360
to be indistinguishable on the wire

2162
01:24:53,360 --> 01:24:55,600
there's a protocol agility benefit

2163
01:24:55,600 --> 01:24:58,400
because if the wire format is fully

2164
01:24:58,400 --> 01:24:59,520
encrypted

2165
01:24:59,520 --> 01:25:00,400
then

2166
01:25:00,400 --> 01:25:02,400
only authorized parties or at least only

2167
01:25:02,400 --> 01:25:04,960
parties with specific knowledge of this

2168
01:25:04,960 --> 01:25:08,960
protocol will be parsing it

2169
01:25:11,760 --> 01:25:14,320
so the current

2170
01:25:14,320 --> 01:25:16,719
model that we've that we've specced out

2171
01:25:16,719 --> 01:25:18,480
in our draft is based on something

2172
01:25:18,480 --> 01:25:20,560
called a strong tweakable pseudo-random

2173
01:25:20,560 --> 01:25:23,040
permutation or uh sometimes in the

2174
01:25:23,040 --> 01:25:24,639
literature this is called a tweakable

2175
01:25:24,639 --> 01:25:26,960
super pseudorandom permutation

2176
01:25:26,960 --> 01:25:29,280
or a wide block cipher or variable input

2177
01:25:29,280 --> 01:25:30,800
length block cipher there's a lot of

2178
01:25:30,800 --> 01:25:32,960
different terminology around this but

2179
01:25:32,960 --> 01:25:35,600
it's fundamentally just a

2180
01:25:35,600 --> 01:25:37,360
slightly trickier

2181
01:25:37,360 --> 01:25:40,239
cipher mode like the usual block cipher

2182
01:25:40,239 --> 01:25:41,600
modes like

2183
01:25:41,600 --> 01:25:45,360
aes cbc but more complicated

2184
01:25:45,360 --> 01:25:48,239
and it gives you one one really big

2185
01:25:48,239 --> 01:25:50,800
block cipher

2186
01:25:50,800 --> 01:25:53,040
our extension takes that and applies it

2187
01:25:53,040 --> 01:25:57,040
to any tls messages that are plain text

2188
01:25:57,040 --> 01:25:59,120
that aren't already ciphertext

2189
01:25:59,120 --> 01:26:02,080
and also then to segments that contain

2190
01:26:02,080 --> 01:26:04,400
both the headers which are clear text

2191
01:26:04,400 --> 01:26:07,040
and at least 16 bytes of the ciphertext

2192
01:26:07,040 --> 01:26:08,880
uh

2193
01:26:08,880 --> 01:26:12,080
this is we chose this setup because

2194
01:26:12,080 --> 01:26:14,320
it has no ciphertext expansion has zero

2195
01:26:14,320 --> 01:26:16,400
space overhead so the output and the

2196
01:26:16,400 --> 01:26:18,800
input are exactly the same size

2197
01:26:18,800 --> 01:26:20,719
and we believe

2198
01:26:20,719 --> 01:26:24,159
and and hope to be able to prove that

2199
01:26:24,159 --> 01:26:26,800
it is still

2200
01:26:26,800 --> 01:26:29,920
very highly secure in particular it

2201
01:26:29,920 --> 01:26:33,199
relies on tls's integrity checks

2202
01:26:33,199 --> 01:26:35,360
so any modification to any part of the

2203
01:26:35,360 --> 01:26:37,920
bitstream will cause tls's integrity

2204
01:26:37,920 --> 01:26:40,719
checks to fail

2205
01:26:42,880 --> 01:26:44,480
so this is just a

2206
01:26:44,480 --> 01:26:46,239
a quick

2207
01:26:46,239 --> 01:26:48,000
outline of what we're talking about here

2208
01:26:48,000 --> 01:26:49,040
this is a

2209
01:26:49,040 --> 01:26:52,560
typical seat a diagram of a typical ctls

2210
01:26:52,560 --> 01:26:54,480
stream so you've got a handset handshake

2211
01:26:54,480 --> 01:26:57,199
message like a client hello

2212
01:26:57,199 --> 01:26:59,280
that can be fragmented especially in a

2213
01:26:59,280 --> 01:27:00,560
dtls

2214
01:27:00,560 --> 01:27:04,719
style situation into multiple fragments

2215
01:27:04,719 --> 01:27:08,320
handshake fragments which are then

2216
01:27:08,320 --> 01:27:10,560
prefixed with headers and sent to the

2217
01:27:10,560 --> 01:27:11,840
other party and then eventually when the

2218
01:27:11,840 --> 01:27:13,520
handshake is over

2219
01:27:13,520 --> 01:27:14,960
the the bytes that follow those

2220
01:27:14,960 --> 01:27:16,639
handshake messages

2221
01:27:16,639 --> 01:27:19,520
are aad ciphertext output so they're

2222
01:27:19,520 --> 01:27:21,440
they're already pseudorandom

2223
01:27:21,440 --> 01:27:23,600
so in our extension

2224
01:27:23,600 --> 01:27:27,280
we take two steps first we use this

2225
01:27:27,280 --> 01:27:30,560
this stprp the cipher to

2226
01:27:30,560 --> 01:27:32,400
render the handshake message itself

2227
01:27:32,400 --> 01:27:35,679
pseudorandom before it's fragmented

2228
01:27:35,679 --> 01:27:37,440
i'll note that this

2229
01:27:37,440 --> 01:27:40,000
cipher this sdprp takes a key

2230
01:27:40,000 --> 01:27:41,920
and a tweak

2231
01:27:41,920 --> 01:27:43,760
tweak is a little bit like a nonce but

2232
01:27:43,760 --> 01:27:46,159
we don't actually require it to be

2233
01:27:46,159 --> 01:27:48,159
non-repeating it's a it's a key

2234
01:27:48,159 --> 01:27:51,759
diversification input

2235
01:27:52,000 --> 01:27:54,560
so first we we

2236
01:27:54,560 --> 01:27:57,440
insider the handshake message rendering

2237
01:27:57,440 --> 01:28:00,000
it pseudorandom and only decipherable to

2238
01:28:00,000 --> 01:28:01,920
a party that knows the key

2239
01:28:01,920 --> 01:28:04,560
and then as a second step

2240
01:28:04,560 --> 01:28:07,920
we do the same thing to a block

2241
01:28:07,920 --> 01:28:09,520
containing each

2242
01:28:09,520 --> 01:28:12,800
bit of the subsequent ciphertext we rely

2243
01:28:12,800 --> 01:28:14,719
on the fact that every

2244
01:28:14,719 --> 01:28:16,960
and every message

2245
01:28:16,960 --> 01:28:19,840
includes at least 16 bytes of

2246
01:28:19,840 --> 01:28:21,520
ciphertext payload because that's the

2247
01:28:21,520 --> 01:28:26,360
smallest aead output

2248
01:28:28,000 --> 01:28:30,159
so the resulting

2249
01:28:30,159 --> 01:28:32,000
the resulting stream here at the bottom

2250
01:28:32,000 --> 01:28:34,000
is composed of lots of different kinds

2251
01:28:34,000 --> 01:28:35,920
of output but

2252
01:28:35,920 --> 01:28:39,520
all of the outputs are pseudorandom

2253
01:28:40,960 --> 01:28:43,440
so this is very early days

2254
01:28:43,440 --> 01:28:46,239
we are seeking working group input most

2255
01:28:46,239 --> 01:28:48,320
importantly i think on

2256
01:28:48,320 --> 01:28:50,560
the cryptographic construction here so

2257
01:28:50,560 --> 01:28:52,880
we've we've chosen stprp for this draft

2258
01:28:52,880 --> 01:28:54,400
but there are a lot of other options

2259
01:28:54,400 --> 01:28:57,120
here with different trade-offs in terms

2260
01:28:57,120 --> 01:28:58,080
of

2261
01:28:58,080 --> 01:29:00,239
simplicity of description

2262
01:29:00,239 --> 01:29:02,159
and

2263
01:29:02,159 --> 01:29:04,880
and also how complicated the analysis is

2264
01:29:04,880 --> 01:29:07,679
especially under active attack

2265
01:29:07,679 --> 01:29:10,679
assumptions

2266
01:29:11,280 --> 01:29:14,320
and we're also looking for input on how

2267
01:29:14,320 --> 01:29:17,840
to integrate this with ctls

2268
01:29:17,840 --> 01:29:20,080
in the way that it's cleanest in the way

2269
01:29:20,080 --> 01:29:24,760
that enables broadest use

2270
01:29:25,040 --> 01:29:26,960
we do have some requested changes to

2271
01:29:26,960 --> 01:29:29,120
ctls itself so i sent

2272
01:29:29,120 --> 01:29:31,679
an email a few weeks ago with a bunch of

2273
01:29:31,679 --> 01:29:32,639
input

2274
01:29:32,639 --> 01:29:34,000
based on

2275
01:29:34,000 --> 01:29:35,600
based on this work things that could

2276
01:29:35,600 --> 01:29:37,520
change in ctls that

2277
01:29:37,520 --> 01:29:39,840
would make it clearer in general or that

2278
01:29:39,840 --> 01:29:43,360
would make this extension easier

2279
01:29:43,360 --> 01:29:45,280
and we do hope to pursue working group

2280
01:29:45,280 --> 01:29:47,679
adoption at some point but i think right

2281
01:29:47,679 --> 01:29:49,120
now really the question is what would

2282
01:29:49,120 --> 01:29:51,440
you like to see in a version of this

2283
01:29:51,440 --> 01:29:54,879
that was ready for adoption

2284
01:29:55,440 --> 01:29:58,400
so that's that's all i have for slides

2285
01:29:58,400 --> 01:29:59,760
and welcome many thoughts from the

2286
01:29:59,760 --> 01:30:03,000
working group

2287
01:30:06,239 --> 01:30:11,040
uh jonathan lex i assume you're in

2288
01:30:11,120 --> 01:30:12,800
yes i just i was just gonna say i don't

2289
01:30:12,800 --> 01:30:14,560
think this prevents that slipstream

2290
01:30:14,560 --> 01:30:15,760
because

2291
01:30:15,760 --> 01:30:17,040
um the

2292
01:30:17,040 --> 01:30:18,320
you know

2293
01:30:18,320 --> 01:30:20,960
the uh so far as the server can force

2294
01:30:20,960 --> 01:30:23,520
you know the server obviously knows the

2295
01:30:23,520 --> 01:30:26,000
key stream and can insofar as they can

2296
01:30:26,000 --> 01:30:28,480
should get a you know select what the

2297
01:30:28,480 --> 01:30:30,239
client sends as plain text they can

2298
01:30:30,239 --> 01:30:31,679
therefore select what could set a cipher

2299
01:30:31,679 --> 01:30:34,159
text which is what you need for for that

2300
01:30:34,159 --> 01:30:36,560
substrate

2301
01:30:36,560 --> 01:30:39,120
uh that's interesting i

2302
01:30:39,120 --> 01:30:41,600
uh i'm going to discuss

2303
01:30:41,600 --> 01:30:44,080
we had a discussion earlier today in uh

2304
01:30:44,080 --> 01:30:46,080
transport where we have this might be a

2305
01:30:46,080 --> 01:30:47,920
problem you know for all of quick too so

2306
01:30:47,920 --> 01:30:50,320
this might be but yeah so basically you

2307
01:30:50,320 --> 01:30:51,679
know because you know the key you know

2308
01:30:51,679 --> 01:30:53,679
you know the key stream in advance

2309
01:30:53,679 --> 01:30:54,800
um

2310
01:30:54,800 --> 01:30:57,840
you can just say okay send me this

2311
01:30:57,840 --> 01:30:59,600
you know take the

2312
01:30:59,600 --> 01:31:02,320
the cipher text you want xor it with the

2313
01:31:02,320 --> 01:31:04,800
key stream tell the client to send that

2314
01:31:04,800 --> 01:31:07,040
and that's

2315
01:31:07,040 --> 01:31:08,239
you know that's your native stream

2316
01:31:08,239 --> 01:31:10,559
attack

2317
01:31:10,880 --> 01:31:12,639
that's uh that's a very interesting

2318
01:31:12,639 --> 01:31:14,800
observation um

2319
01:31:14,800 --> 01:31:16,400
i think that we have been thinking about

2320
01:31:16,400 --> 01:31:17,760
this principally in the handshake

2321
01:31:17,760 --> 01:31:19,760
messages where there's clear

2322
01:31:19,760 --> 01:31:21,520
client provided or rather you know

2323
01:31:21,520 --> 01:31:23,199
source provided entropy each side is

2324
01:31:23,199 --> 01:31:25,120
providing their own entropy there

2325
01:31:25,120 --> 01:31:27,679
uh you're right that gets harder in the

2326
01:31:27,679 --> 01:31:30,400
in the body of the stream so we'll have

2327
01:31:30,400 --> 01:31:31,600
to give that some more thought thanks

2328
01:31:31,600 --> 01:31:35,199
for thanks for noting that

2329
01:31:35,679 --> 01:31:38,000
ecker

2330
01:31:41,199 --> 01:31:42,800
this is uh quite fancy um and

2331
01:31:42,800 --> 01:31:45,600
interesting um um those are independent

2332
01:31:45,600 --> 01:31:49,440
observations not one um so um um i mean

2333
01:31:49,440 --> 01:31:50,800
i'm not sure i think of the not split

2334
01:31:50,800 --> 01:31:53,280
screening um i guess um

2335
01:31:53,280 --> 01:31:54,560
um

2336
01:31:54,560 --> 01:31:55,520
you know obviously if we're going to

2337
01:31:55,520 --> 01:31:57,280
expand the data then it's to remember

2338
01:31:57,280 --> 01:31:59,760
about that this ring um um depending on

2339
01:31:59,760 --> 01:32:02,320
how this construction actually works um

2340
01:32:02,320 --> 01:32:04,400
it may be it may it may be

2341
01:32:04,400 --> 01:32:07,600
quite inconvenient to um uh to to

2342
01:32:07,600 --> 01:32:09,120
construct the appropriate appropriate

2343
01:32:09,120 --> 01:32:11,199
cipher text um

2344
01:32:11,199 --> 01:32:12,639
because i recall you you're probably

2345
01:32:12,639 --> 01:32:15,199
depending on the um because the aad

2346
01:32:15,199 --> 01:32:16,719
because because the authentication tag

2347
01:32:16,719 --> 01:32:17,840
is random

2348
01:32:17,840 --> 01:32:19,920
authentication tag then becomes input to

2349
01:32:19,920 --> 01:32:22,239
the the prp then it may be the case that

2350
01:32:22,239 --> 01:32:23,920
you have to essentially iterate through

2351
01:32:23,920 --> 01:32:25,360
a large number of plaintext in order to

2352
01:32:25,360 --> 01:32:26,880
get in order to get advertisers of

2353
01:32:26,880 --> 01:32:28,080
choice but i wouldn't be able to

2354
01:32:28,080 --> 01:32:28,960
guarantee that because i don't

2355
01:32:28,960 --> 01:32:31,679
understand construction well enough um

2356
01:32:31,679 --> 01:32:33,679
so i guess one thing i should a question

2357
01:32:33,679 --> 01:32:35,760
about that i'm not sure i understand um

2358
01:32:35,760 --> 01:32:36,639
is

2359
01:32:36,639 --> 01:32:39,520
does this mean that a server

2360
01:32:39,520 --> 01:32:40,560
um

2361
01:32:40,560 --> 01:32:41,440
that

2362
01:32:41,440 --> 01:32:44,080
uh uh if a server supports multiple

2363
01:32:44,080 --> 01:32:46,320
profiles it is then required to trial to

2364
01:32:46,320 --> 01:32:48,000
correct in order for which profile the

2365
01:32:48,000 --> 01:32:50,639
client is using

2366
01:32:50,719 --> 01:32:52,480
that's um

2367
01:32:52,480 --> 01:32:55,120
so mostly no if all of the profiles

2368
01:32:55,120 --> 01:32:57,600
share the same key then you can have

2369
01:32:57,600 --> 01:33:00,400
distinct profiles and still multiplex

2370
01:33:00,400 --> 01:33:01,760
them

2371
01:33:01,760 --> 01:33:03,600
right although uh they'll take this

2372
01:33:03,600 --> 01:33:05,520
check and then the jabber that the uh

2373
01:33:05,520 --> 01:33:06,880
that the key material should depend on

2374
01:33:06,880 --> 01:33:08,320
the profile as well that will no longer

2375
01:33:08,320 --> 01:33:09,600
work

2376
01:33:09,600 --> 01:33:10,880
that's right the key material

2377
01:33:10,880 --> 01:33:12,800
deliberately the decryption process

2378
01:33:12,800 --> 01:33:15,600
deliberately is is profile independent

2379
01:33:15,600 --> 01:33:17,760
okay after that okay right oh well sorry

2380
01:33:17,760 --> 01:33:18,560
i think

2381
01:33:18,560 --> 01:33:20,000
so i think that the question would then

2382
01:33:20,000 --> 01:33:24,080
be is it required to is it required to

2383
01:33:24,080 --> 01:33:26,880
is a security reason to have the uh the

2384
01:33:26,880 --> 01:33:28,880
the so i mean you just see the java paul

2385
01:33:28,880 --> 01:33:30,239
grabs is saying sharing keys it makes it

2386
01:33:30,239 --> 01:33:31,679
makes analysis difficult i don't know

2387
01:33:31,679 --> 01:33:32,800
but like that i'm not sure it's in

2388
01:33:32,800 --> 01:33:34,320
disaster to have a travel but i

2389
01:33:34,320 --> 01:33:35,679
just wanted to like to flush that a

2390
01:33:35,679 --> 01:33:37,600
little bit yeah this is actually the

2391
01:33:37,600 --> 01:33:39,040
the thing that worries me more is it's

2392
01:33:39,040 --> 01:33:40,639
not clear that trial decryption is

2393
01:33:40,639 --> 01:33:43,360
possible because there's no mac

2394
01:33:43,360 --> 01:33:44,159
um

2395
01:33:44,159 --> 01:33:46,719
specifically on handshake messages

2396
01:33:46,719 --> 01:33:48,080
um the

2397
01:33:48,080 --> 01:33:50,000
handshake doesn't contain its own mac we

2398
01:33:50,000 --> 01:33:51,920
haven't added a mac so how do you trial

2399
01:33:51,920 --> 01:33:53,760
decrypt yeah fair enough uh that's one

2400
01:33:53,760 --> 01:33:55,040
of the open fashions here at the

2401
01:33:55,040 --> 01:33:56,400
excellent point right

2402
01:33:56,400 --> 01:33:57,600
right and since details are trying to

2403
01:33:57,600 --> 01:33:59,280
make it smaller right um

2404
01:33:59,280 --> 01:34:03,040
max is unfortunate um yeah um anyway i

2405
01:34:03,040 --> 01:34:04,719
think this is like pretty interesting um

2406
01:34:04,719 --> 01:34:05,920
you know we've been discussing exactly

2407
01:34:05,920 --> 01:34:07,520
what we needed to get ctos are aligned

2408
01:34:07,520 --> 01:34:10,480
to so um i think like you know uh

2409
01:34:10,480 --> 01:34:11,440
um

2410
01:34:11,440 --> 01:34:13,280
you know i i guess well i'd like you

2411
01:34:13,280 --> 01:34:14,960
guys to see before we think about

2412
01:34:14,960 --> 01:34:16,080
adopting

2413
01:34:16,080 --> 01:34:18,400
is to make is enough harmonization with

2414
01:34:18,400 --> 01:34:20,400
ctls which may mean the changes you

2415
01:34:20,400 --> 01:34:22,239
propose because i i i'll just not even

2416
01:34:22,239 --> 01:34:24,560
reviewed that we like have confidence

2417
01:34:24,560 --> 01:34:26,159
that we're not like we're not fighting

2418
01:34:26,159 --> 01:34:27,199
with you know not fighting each other

2419
01:34:27,199 --> 01:34:28,560
right

2420
01:34:28,560 --> 01:34:30,400
yeah obviously this is early days we

2421
01:34:30,400 --> 01:34:32,320
don't have anything look we haven't

2422
01:34:32,320 --> 01:34:34,719
attempted an implementation so right

2423
01:34:34,719 --> 01:34:36,719
well

2424
01:34:36,719 --> 01:34:39,040
the thing i want to see is um

2425
01:34:39,040 --> 01:34:40,320
um i would surprise not see this in the

2426
01:34:40,320 --> 01:34:41,760
specification but i may use that around

2427
01:34:41,760 --> 01:34:44,159
time is at least one concrete puzzle for

2428
01:34:44,159 --> 01:34:47,520
for the stdrp um uh because like when i

2429
01:34:47,520 --> 01:34:48,800
would specification i was kind of like

2430
01:34:48,800 --> 01:34:50,159
we just don't define one thanks i think

2431
01:34:50,159 --> 01:34:51,520
like i'd like to see a definition for

2432
01:34:51,520 --> 01:34:53,199
one even if it wasn't great i'm gonna

2433
01:34:53,199 --> 01:34:54,560
now be honest i don't want to see but

2434
01:34:54,560 --> 01:34:55,760
maybe i think imagine you run out of

2435
01:34:55,760 --> 01:34:57,440
time right um

2436
01:34:57,440 --> 01:34:59,679
uh so i see my co-author in the queue

2437
01:34:59,679 --> 01:35:02,000
maybe i'll let him um maybe i'll let

2438
01:35:02,000 --> 01:35:06,080
chris chime in on that topic right

2439
01:35:08,080 --> 01:35:10,000
uh chris were you responding to ecker's

2440
01:35:10,000 --> 01:35:13,159
point there

2441
01:35:18,159 --> 01:35:21,440
i can go away from chris

2442
01:35:21,679 --> 01:35:23,760
uh well i don't hear uh i don't hear

2443
01:35:23,760 --> 01:35:25,199
anything from chris so stephen go ahead

2444
01:35:25,199 --> 01:35:27,600
okay oh my microsoft

2445
01:35:27,600 --> 01:35:29,199
go ahead go ahead stephen i was i was

2446
01:35:29,199 --> 01:35:31,040
just saying uh you're first in the queue

2447
01:35:31,040 --> 01:35:33,119
so go ahead okay so

2448
01:35:33,119 --> 01:35:35,199
i i i would encourage further work on

2449
01:35:35,199 --> 01:35:37,679
this i think it's uh it's interesting i

2450
01:35:37,679 --> 01:35:39,040
really like how many people this will

2451
01:35:39,040 --> 01:35:40,800
annoy um

2452
01:35:40,800 --> 01:35:43,360
um i would encourage you to maybe think

2453
01:35:43,360 --> 01:35:44,880
about this as

2454
01:35:44,880 --> 01:35:46,400
a way of kind of pushing the envelope

2455
01:35:46,400 --> 01:35:49,040
and breaking things for a while at least

2456
01:35:49,040 --> 01:35:51,199
um and you know see if you did all this

2457
01:35:51,199 --> 01:35:52,719
and succeeded

2458
01:35:52,719 --> 01:35:54,480
even ignoring some of the security goals

2459
01:35:54,480 --> 01:35:55,600
what would you break it would be

2460
01:35:55,600 --> 01:35:57,920
interesting to learn that um and then

2461
01:35:57,920 --> 01:36:00,400
last comment is i think

2462
01:36:00,400 --> 01:36:02,239
as this if you assume this kind of

2463
01:36:02,239 --> 01:36:03,840
eventually reaches maturity maybe the

2464
01:36:03,840 --> 01:36:05,679
stage we wanted to be mature is not to

2465
01:36:05,679 --> 01:36:07,760
have one fixed way of doing it

2466
01:36:07,760 --> 01:36:10,400
but many many ways that are malleable

2467
01:36:10,400 --> 01:36:12,800
even after the standard has been

2468
01:36:12,800 --> 01:36:14,480
produced in an rfc

2469
01:36:14,480 --> 01:36:15,360
um

2470
01:36:15,360 --> 01:36:17,520
because the yeah the anniversary in this

2471
01:36:17,520 --> 01:36:19,920
kind of context is probably pretty uh

2472
01:36:19,920 --> 01:36:21,840
good at changing themselves as well

2473
01:36:21,840 --> 01:36:23,600
uh so maybe think about you know the

2474
01:36:23,600 --> 01:36:25,440
eventual outcome not being just a fixed

2475
01:36:25,440 --> 01:36:27,679
single interoperable way of doing it but

2476
01:36:27,679 --> 01:36:29,600
more of a way that you can keep changing

2477
01:36:29,600 --> 01:36:31,119
what you do

2478
01:36:31,119 --> 01:36:33,920
and and i like it's a good good work

2479
01:36:33,920 --> 01:36:36,000
thank you

2480
01:36:36,000 --> 01:36:38,560
thanks stephen um yeah so about the st

2481
01:36:38,560 --> 01:36:41,360
prp construction so we were

2482
01:36:41,360 --> 01:36:43,119
we were going back and forth about this

2483
01:36:43,119 --> 01:36:45,600
because like uh

2484
01:36:45,600 --> 01:36:48,000
it doesn't it like we were wondering if

2485
01:36:48,000 --> 01:36:50,080
this is something that the scfrg is

2486
01:36:50,080 --> 01:36:53,199
supposed to do or like could we specify

2487
01:36:53,199 --> 01:36:54,800
our own construction

2488
01:36:54,800 --> 01:36:57,520
there are like there's lots of options

2489
01:36:57,520 --> 01:36:58,960
in the literature that i think work

2490
01:36:58,960 --> 01:37:01,679
really well um and all you really need

2491
01:37:01,679 --> 01:37:04,239
is aes so um

2492
01:37:04,239 --> 01:37:06,639
i think i mean i'd be happy to

2493
01:37:06,639 --> 01:37:09,280
stick a uh construction in in the

2494
01:37:09,280 --> 01:37:11,520
document um but yeah i guess the

2495
01:37:11,520 --> 01:37:13,440
question is like where where where

2496
01:37:13,440 --> 01:37:16,839
should that live

2497
01:37:23,040 --> 01:37:23,920
um

2498
01:37:23,920 --> 01:37:24,960
yeah so

2499
01:37:24,960 --> 01:37:26,880
before i guess uh talking about

2500
01:37:26,880 --> 01:37:28,400
particular constructions and what now it

2501
01:37:28,400 --> 01:37:30,639
might be useful to try to identify what

2502
01:37:30,639 --> 01:37:32,800
are the requirements of the thing that

2503
01:37:32,800 --> 01:37:35,199
you need um

2504
01:37:35,199 --> 01:37:37,280
i had been mentioned that you know you

2505
01:37:37,280 --> 01:37:40,400
you need non-malleability um but now cca

2506
01:37:40,400 --> 01:37:41,760
security

2507
01:37:41,760 --> 01:37:45,920
is that necessarily true i don't know um

2508
01:37:45,920 --> 01:37:47,520
an answer to the requirements question

2509
01:37:47,520 --> 01:37:49,440
could be useful in helping shape what

2510
01:37:49,440 --> 01:37:50,880
the actual construction you end up with

2511
01:37:50,880 --> 01:37:52,639
at the end

2512
01:37:52,639 --> 01:37:55,840
i think that's true um i think um

2513
01:37:55,840 --> 01:37:58,239
i think that we

2514
01:37:58,239 --> 01:38:01,199
it's i mean the the the very informal

2515
01:38:01,199 --> 01:38:02,639
idea is

2516
01:38:02,639 --> 01:38:04,880
by tampering with the the bits on the

2517
01:38:04,880 --> 01:38:07,360
wire you can't predict an adversary

2518
01:38:07,360 --> 01:38:09,600
can't predict how it impacts

2519
01:38:09,600 --> 01:38:12,960
what is deciphered and how the server

2520
01:38:12,960 --> 01:38:15,199
like interprets the handshake so the

2521
01:38:15,199 --> 01:38:18,239
idea is that like that should cause

2522
01:38:18,239 --> 01:38:20,880
there with you know you can you can

2523
01:38:20,880 --> 01:38:22,159
you can probably talk about the

2524
01:38:22,159 --> 01:38:24,480
probability that the it leads to a

2525
01:38:24,480 --> 01:38:25,840
handshake failure but you're right like

2526
01:38:25,840 --> 01:38:28,080
we haven't really worked this out um

2527
01:38:28,080 --> 01:38:32,159
like like ben said this is super early

2528
01:38:33,520 --> 01:38:35,840
ecker

2529
01:38:39,440 --> 01:38:42,480
yeah so i i i would think um

2530
01:38:42,480 --> 01:38:44,639
uh like for the moment it sounds like it

2531
01:38:44,639 --> 01:38:46,000
sounds expression's pretty simple so i

2532
01:38:46,000 --> 01:38:47,760
would just like pick one you like and

2533
01:38:47,760 --> 01:38:49,040
kind of like set a reference and stuff

2534
01:38:49,040 --> 01:38:50,719
and stuff and stuff in appendix or like

2535
01:38:50,719 --> 01:38:52,159
or something i mean there's just like

2536
01:38:52,159 --> 01:38:53,040
they need to complete then you have a

2537
01:38:53,040 --> 01:38:55,040
complete specification right um

2538
01:38:55,040 --> 01:38:56,560
um it's like that i put and then like i

2539
01:38:56,560 --> 01:39:00,159
could just you know hold up loosely

2540
01:39:00,400 --> 01:39:02,239
yeah i think we'll do that pretty soon

2541
01:39:02,239 --> 01:39:05,679
um maybe after the next ctls iteration

2542
01:39:05,679 --> 01:39:08,000
scott

2543
01:39:08,480 --> 01:39:11,840
um i would i if you're talking about

2544
01:39:11,840 --> 01:39:15,040
which stprp you want to use well once

2545
01:39:15,040 --> 01:39:17,119
you it's up to you to to decide what are

2546
01:39:17,119 --> 01:39:19,360
the security properties you need from it

2547
01:39:19,360 --> 01:39:21,199
but once you do it

2548
01:39:21,199 --> 01:39:23,040
really really that's what the cfrg is

2549
01:39:23,040 --> 01:39:24,480
there for you really should go to them

2550
01:39:24,480 --> 01:39:27,679
and saying gee here's what we need

2551
01:39:27,679 --> 01:39:30,480
what do you recommend

2552
01:39:30,480 --> 01:39:33,360
i agree uh i think that we

2553
01:39:33,360 --> 01:39:35,440
ultimately we we would not really

2554
01:39:35,440 --> 01:39:38,400
progress to publication without a

2555
01:39:38,400 --> 01:39:41,040
probably a cfrg approved

2556
01:39:41,040 --> 01:39:44,000
underlying construction

2557
01:39:44,800 --> 01:39:45,679
okay

2558
01:39:45,679 --> 01:39:48,840
thank you

2559
01:39:55,040 --> 01:39:57,199
all right uh thanks

2560
01:39:57,199 --> 01:40:00,239
ben um paul you're up uh if you guys

2561
01:40:00,239 --> 01:40:03,599
request to share slides

2562
01:40:04,639 --> 01:40:07,920
yeah so okay i'm i'm sharing my

2563
01:40:07,920 --> 01:40:09,840
we discussed this already

2564
01:40:09,840 --> 01:40:12,080
yeah

2565
01:40:14,880 --> 01:40:17,199
hi everyone can you see my uh my desktop

2566
01:40:17,199 --> 01:40:18,080
here

2567
01:40:18,080 --> 01:40:19,360
can see the desktop i'll let you know

2568
01:40:19,360 --> 01:40:22,480
when we see the full screen slides

2569
01:40:22,480 --> 01:40:23,920
all right we can see him now take it

2570
01:40:23,920 --> 01:40:26,639
away okay great

2571
01:40:27,600 --> 01:40:29,280
okay uh thanks chris so today i'm going

2572
01:40:29,280 --> 01:40:31,199
to be talking about uh

2573
01:40:31,199 --> 01:40:31,920
uh

2574
01:40:31,920 --> 01:40:34,639
zero knowledge proofs meets tls uh so

2575
01:40:34,639 --> 01:40:36,639
i'd like to well sorry at first i'd like

2576
01:40:36,639 --> 01:40:38,159
to say that this is based on joint work

2577
01:40:38,159 --> 01:40:40,960
with uh urasu arun joe bonneau zach de

2578
01:40:40,960 --> 01:40:44,320
stefano mike wallfish and yes

2579
01:40:44,320 --> 01:40:46,560
and i'd like to start by um just saying

2580
01:40:46,560 --> 01:40:48,719
that i think tls is pretty awesome i'm a

2581
01:40:48,719 --> 01:40:51,440
newcomer to this uh working group um but

2582
01:40:51,440 --> 01:40:52,480
i've always

2583
01:40:52,480 --> 01:40:54,400
been a big fan of the work that everyone

2584
01:40:54,400 --> 01:40:57,520
here does um and uh i think uh i'd like

2585
01:40:57,520 --> 01:40:59,520
to congratulate everyone here for uh

2586
01:40:59,520 --> 01:41:00,560
getting

2587
01:41:00,560 --> 01:41:03,119
a bunch of awesome um crypto deployed on

2588
01:41:03,119 --> 01:41:05,600
the internet most notably tls 1.3

2589
01:41:05,600 --> 01:41:08,560
um which is an amazing protocol and uh

2590
01:41:08,560 --> 01:41:10,000
um this i think is a great

2591
01:41:10,000 --> 01:41:11,920
accomplishment for the working group

2592
01:41:11,920 --> 01:41:13,760
to get this pushed into more and more

2593
01:41:13,760 --> 01:41:14,800
places

2594
01:41:14,800 --> 01:41:18,480
um however i'd like to talk about um the

2595
01:41:18,480 --> 01:41:19,679
challenges that the increasing

2596
01:41:19,679 --> 01:41:22,719
deployment of tls is causing and these

2597
01:41:22,719 --> 01:41:25,280
challenges um are so-called visibility

2598
01:41:25,280 --> 01:41:28,560
challenges um for for network operators

2599
01:41:28,560 --> 01:41:30,719
because network operators uh who are

2600
01:41:30,719 --> 01:41:32,719
used to enforcing network policies by

2601
01:41:32,719 --> 01:41:35,280
scanning plaintext traffic directly

2602
01:41:35,280 --> 01:41:36,719
so an example of these policies would be

2603
01:41:36,719 --> 01:41:38,639
like dns filtering data loss prevention

2604
01:41:38,639 --> 01:41:40,719
and enterprise networks uh malware

2605
01:41:40,719 --> 01:41:42,400
scanning and the list goes on and on

2606
01:41:42,400 --> 01:41:44,320
there's a ton of these um security

2607
01:41:44,320 --> 01:41:47,119
network security policies um

2608
01:41:47,119 --> 01:41:49,119
so obviously though by design tls

2609
01:41:49,119 --> 01:41:50,960
prevents the network from scanning the

2610
01:41:50,960 --> 01:41:53,440
traffic and enforcing these policies uh

2611
01:41:53,440 --> 01:41:55,760
so this this this causes a challenge for

2612
01:41:55,760 --> 01:41:58,560
uh for network operators and so um these

2613
01:41:58,560 --> 01:42:01,280
visibility challenges are are are pretty

2614
01:42:01,280 --> 01:42:03,760
old and um even in the in the

2615
01:42:03,760 --> 01:42:05,679
development of pls 1.3 as far back as

2616
01:42:05,679 --> 01:42:08,080
2016 there is this famous well maybe

2617
01:42:08,080 --> 01:42:09,600
some people consider infamous thread on

2618
01:42:09,600 --> 01:42:11,760
the tls mailing list um in which a

2619
01:42:11,760 --> 01:42:12,800
representative from the financial

2620
01:42:12,800 --> 01:42:15,280
services industry uh came and requested

2621
01:42:15,280 --> 01:42:18,159
that tls 1.3 retain rsa key transport

2622
01:42:18,159 --> 01:42:20,560
cipher suites because it makes the kind

2623
01:42:20,560 --> 01:42:22,159
of like monitoring and policy

2624
01:42:22,159 --> 01:42:23,840
enforcement that they need to do

2625
01:42:23,840 --> 01:42:26,480
on their own traffic easier

2626
01:42:26,480 --> 01:42:28,560
and so this this challenge uh still

2627
01:42:28,560 --> 01:42:29,840
persists today and there's lots of

2628
01:42:29,840 --> 01:42:32,000
companies that have kind of sprung up to

2629
01:42:32,000 --> 01:42:34,719
address these challenges with tls 1.3 so

2630
01:42:34,719 --> 01:42:36,480
i googled last week and i found this

2631
01:42:36,480 --> 01:42:39,440
extra hop company um that is talking

2632
01:42:39,440 --> 01:42:41,199
about security operations visibility for

2633
01:42:41,199 --> 01:42:42,800
tls 1.3 and

2634
01:42:42,800 --> 01:42:45,119
interestingly also nist now has a some

2635
01:42:45,119 --> 01:42:47,119
kind of working group that specifically

2636
01:42:47,119 --> 01:42:49,040
is is focused on finding solutions to

2637
01:42:49,040 --> 01:42:50,880
these kind of visibility problems with

2638
01:42:50,880 --> 01:42:53,679
tls 1.3

2639
01:42:53,679 --> 01:42:54,719
um

2640
01:42:54,719 --> 01:42:56,400
so the solution

2641
01:42:56,400 --> 01:42:58,159
to these problems that exists in most

2642
01:42:58,159 --> 01:43:01,520
systems today uh is to just not use tls

2643
01:43:01,520 --> 01:43:04,239
at all or to terminate the connection in

2644
01:43:04,239 --> 01:43:07,199
the network uh and uh just enforce

2645
01:43:07,199 --> 01:43:09,679
scanning on plaintext directly um so

2646
01:43:09,679 --> 01:43:11,520
there have been some more fine-grained

2647
01:43:11,520 --> 01:43:13,360
solutions proposed to these visibility

2648
01:43:13,360 --> 01:43:14,960
problems probably the most mature is

2649
01:43:14,960 --> 01:43:17,600
multi-context tls uh which changes the

2650
01:43:17,600 --> 01:43:19,199
tls record layer to a lot of different

2651
01:43:19,199 --> 01:43:21,040
kind of contexts to have different keys

2652
01:43:21,040 --> 01:43:23,199
which some of which can be shared with

2653
01:43:23,199 --> 01:43:25,040
the network or or a middle box to allow

2654
01:43:25,040 --> 01:43:26,960
them to kind of enforce policies in a

2655
01:43:26,960 --> 01:43:28,480
more fine-grained way but directly on

2656
01:43:28,480 --> 01:43:30,639
plain text um other proposals are like

2657
01:43:30,639 --> 01:43:33,119
enterprise tls which is or like ets

2658
01:43:33,119 --> 01:43:34,480
which is a protocol that's kind of a

2659
01:43:34,480 --> 01:43:37,440
variant of tls um that retains some like

2660
01:43:37,440 --> 01:43:39,600
some some properties of older tls

2661
01:43:39,600 --> 01:43:42,000
versions that make monitoring easier and

2662
01:43:42,000 --> 01:43:43,679
there are lots of um proposals based on

2663
01:43:43,679 --> 01:43:45,040
like trusted heart like sgx on the

2664
01:43:45,040 --> 01:43:46,239
client or

2665
01:43:46,239 --> 01:43:48,080
or in the network um but all these

2666
01:43:48,080 --> 01:43:50,560
solutions basically focus on keeping uh

2667
01:43:50,560 --> 01:43:52,159
scanning and other kinds of network

2668
01:43:52,159 --> 01:43:54,400
functionality in the network uh by

2669
01:43:54,400 --> 01:43:58,960
weakening or modifying uh tls

2670
01:43:58,960 --> 01:44:01,119
uh so today i'm just gonna talk to you

2671
01:44:01,119 --> 01:44:02,239
about

2672
01:44:02,239 --> 01:44:04,080
zero knowledge proofs uh because i think

2673
01:44:04,080 --> 01:44:05,440
zero knowledge proofs are a really

2674
01:44:05,440 --> 01:44:07,199
interesting set of tools

2675
01:44:07,199 --> 01:44:08,480
for addressing these visibility

2676
01:44:08,480 --> 01:44:10,480
challenges in a different way

2677
01:44:10,480 --> 01:44:12,639
importantly that doesn't require

2678
01:44:12,639 --> 01:44:13,840
kind of weakening the security

2679
01:44:13,840 --> 01:44:16,400
guarantees of tls nor does it require

2680
01:44:16,400 --> 01:44:18,320
like modifying tls

2681
01:44:18,320 --> 01:44:20,800
the protocol itself so uh uh this

2682
01:44:20,800 --> 01:44:22,320
discussion will mostly be centered on a

2683
01:44:22,320 --> 01:44:23,760
recent paper that my co-authors and i

2684
01:44:23,760 --> 01:44:24,880
wrote called xero knowledge and middle

2685
01:44:24,880 --> 01:44:26,400
boxes and i'll focus on a key

2686
01:44:26,400 --> 01:44:28,000
contribution of this paper which is an

2687
01:44:28,000 --> 01:44:29,360
efficiency or knowledge protocol for

2688
01:44:29,360 --> 01:44:32,480
decrypting tls 1.3 records

2689
01:44:32,480 --> 01:44:33,840
uh then i'll just speak kind of in

2690
01:44:33,840 --> 01:44:35,760
general about future directions i see

2691
01:44:35,760 --> 01:44:38,719
for uh zero knowledge proofs and tls um

2692
01:44:38,719 --> 01:44:40,480
and suggest some other open problems

2693
01:44:40,480 --> 01:44:41,840
from our work and then finally i'll

2694
01:44:41,840 --> 01:44:43,280
finish by soliciting some feedback and

2695
01:44:43,280 --> 01:44:45,679
criticism um and hopefully some maybe

2696
01:44:45,679 --> 01:44:46,800
some suggestions for interesting

2697
01:44:46,800 --> 01:44:48,719
applications of xero knowledge proofs to

2698
01:44:48,719 --> 01:44:50,639
tls

2699
01:44:50,639 --> 01:44:52,080
so first i'll talk about this this

2700
01:44:52,080 --> 01:44:54,639
recent work but first i'll give just a

2701
01:44:54,639 --> 01:44:56,639
very quick primer on zero knowledge

2702
01:44:56,639 --> 01:44:59,520
proofs uh so zero knowledge proof is a

2703
01:44:59,520 --> 01:45:01,199
cryptographic primitive that's focused

2704
01:45:01,199 --> 01:45:03,280
on allowing approver to convince a

2705
01:45:03,280 --> 01:45:05,520
verifier that a public statement like

2706
01:45:05,520 --> 01:45:07,280
for example an arithmetic or a boolean

2707
01:45:07,280 --> 01:45:10,000
circuit uh is true so in the circuit

2708
01:45:10,000 --> 01:45:11,440
sense this would be

2709
01:45:11,440 --> 01:45:13,760
that the this circuit has a satisfying

2710
01:45:13,760 --> 01:45:15,280
assignment so the approver wants to

2711
01:45:15,280 --> 01:45:16,719
convince the verifier that the statement

2712
01:45:16,719 --> 01:45:19,520
is true uh without revealing why it

2713
01:45:19,520 --> 01:45:21,520
knows that it's it's true

2714
01:45:21,520 --> 01:45:24,159
so zero knowledge proof um is is a is a

2715
01:45:24,159 --> 01:45:25,760
string like a bit string that the prover

2716
01:45:25,760 --> 01:45:27,280
generates and it will send to the

2717
01:45:27,280 --> 01:45:29,679
verifier and the verifier can check this

2718
01:45:29,679 --> 01:45:31,360
bit string along with this public

2719
01:45:31,360 --> 01:45:33,199
statement and by checking this bit

2720
01:45:33,199 --> 01:45:35,199
string it can it can gain an assurance

2721
01:45:35,199 --> 01:45:37,040
that the approver knows why this public

2722
01:45:37,040 --> 01:45:39,840
statement is true but but not not why so

2723
01:45:39,840 --> 01:45:42,800
so the zero knowledge proof um kind of

2724
01:45:42,800 --> 01:45:44,239
guarantees the verifier that the

2725
01:45:44,239 --> 01:45:46,080
statement is true but but prevents the

2726
01:45:46,080 --> 01:45:48,320
verifier from learning um

2727
01:45:48,320 --> 01:45:49,679
why the prover knows it's true so for

2728
01:45:49,679 --> 01:45:52,719
example in the circuit case um this this

2729
01:45:52,719 --> 01:45:54,560
the provers knowledge could be something

2730
01:45:54,560 --> 01:45:56,880
like a satisfying assignment to this to

2731
01:45:56,880 --> 01:45:58,960
the circuit

2732
01:45:58,960 --> 01:46:01,840
um so zero knowledge middle boxes uh

2733
01:46:01,840 --> 01:46:04,080
use zero knowledge proofs to

2734
01:46:04,080 --> 01:46:06,000
allow network

2735
01:46:06,000 --> 01:46:07,760
operators to enforce security policies

2736
01:46:07,760 --> 01:46:10,960
on traffic without decrypting it um so

2737
01:46:10,960 --> 01:46:13,199
this is this addresses a lot of these

2738
01:46:13,199 --> 01:46:14,639
visibility challenges especially with

2739
01:46:14,639 --> 01:46:17,040
things like like filtering and scanning

2740
01:46:17,040 --> 01:46:19,920
um in in traffic um so the way zero

2741
01:46:19,920 --> 01:46:21,920
knowledge middle box works is as follows

2742
01:46:21,920 --> 01:46:24,159
so when a client first joins the network

2743
01:46:24,159 --> 01:46:26,480
the the middle box uh gives a

2744
01:46:26,480 --> 01:46:28,320
description of the security policy to

2745
01:46:28,320 --> 01:46:29,840
the client

2746
01:46:29,840 --> 01:46:31,520
then the client when it wants to make an

2747
01:46:31,520 --> 01:46:33,360
outbound connection to a server uh can

2748
01:46:33,360 --> 01:46:34,800
just perform a normal handshake and

2749
01:46:34,800 --> 01:46:37,199
establish a session key with that server

2750
01:46:37,199 --> 01:46:38,960
then when the client wants to send some

2751
01:46:38,960 --> 01:46:41,520
traffic the client enforces the policy

2752
01:46:41,520 --> 01:46:43,280
the security policy locally on its own

2753
01:46:43,280 --> 01:46:45,920
traffic and additionally uh creates a

2754
01:46:45,920 --> 01:46:48,080
zero-knowledge proof that it enforced

2755
01:46:48,080 --> 01:46:50,320
this policy correctly on its traffic and

2756
01:46:50,320 --> 01:46:52,320
so it sends the the encrypted traffic as

2757
01:46:52,320 --> 01:46:53,840
well as zero knowledge proof that the

2758
01:46:53,840 --> 01:46:56,159
underlying plaintext is compliant with

2759
01:46:56,159 --> 01:46:58,080
this policy and finally the middlebucks

2760
01:46:58,080 --> 01:47:01,199
can verify this proof uh and block the

2761
01:47:01,199 --> 01:47:05,040
traffic if the proof verification fails

2762
01:47:05,600 --> 01:47:07,360
so just to make this setting a little

2763
01:47:07,360 --> 01:47:09,679
bit more concrete i'll explain a use

2764
01:47:09,679 --> 01:47:11,679
case from the paper that my co-authors

2765
01:47:11,679 --> 01:47:12,960
and i wrote

2766
01:47:12,960 --> 01:47:15,520
so the use case is filtering dns queries

2767
01:47:15,520 --> 01:47:17,760
that are sent using either dns over tls

2768
01:47:17,760 --> 01:47:20,960
or dns or https which are too

2769
01:47:20,960 --> 01:47:22,960
increasingly deployed ways to encrypt

2770
01:47:22,960 --> 01:47:26,719
dns traffic so in this case the the the

2771
01:47:26,719 --> 01:47:28,000
security policy would be basically a

2772
01:47:28,000 --> 01:47:30,320
block list of websites that the the

2773
01:47:30,320 --> 01:47:32,239
client can't visit on the network and so

2774
01:47:32,239 --> 01:47:33,440
the client would when they join the

2775
01:47:33,440 --> 01:47:35,040
network get a list of these these

2776
01:47:35,040 --> 01:47:37,280
websites and then they would perform a

2777
01:47:37,280 --> 01:47:39,760
normal tls 1.3 handshake as in the

2778
01:47:39,760 --> 01:47:42,239
regular dot or doh protocol

2779
01:47:42,239 --> 01:47:45,040
and then when they want to send a a dns

2780
01:47:45,040 --> 01:47:46,880
query encrypted what they do is they

2781
01:47:46,880 --> 01:47:48,239
they encrypt the dns query and send it

2782
01:47:48,239 --> 01:47:49,920
and then they include as your knowledge

2783
01:47:49,920 --> 01:47:51,920
proof that the underlying domain name in

2784
01:47:51,920 --> 01:47:53,520
this dns query

2785
01:47:53,520 --> 01:47:56,080
is not on the block list

2786
01:47:56,080 --> 01:47:57,360
and so i want to reiterate here an

2787
01:47:57,360 --> 01:47:59,040
important point which is that this zero

2788
01:47:59,040 --> 01:48:01,119
knowledge proof reveals nothing at all

2789
01:48:01,119 --> 01:48:03,119
about the client's dns query except that

2790
01:48:03,119 --> 01:48:04,960
the underlying domain name is not not in

2791
01:48:04,960 --> 01:48:06,719
the block list

2792
01:48:06,719 --> 01:48:09,199
and so finally the middle box can

2793
01:48:09,199 --> 01:48:11,199
block the dns query if the proof doesn't

2794
01:48:11,199 --> 01:48:13,199
verify it

2795
01:48:13,199 --> 01:48:14,320
that the

2796
01:48:14,320 --> 01:48:17,280
domain name is not in the block list

2797
01:48:17,280 --> 01:48:19,119
so how do we build these your knowledge

2798
01:48:19,119 --> 01:48:20,800
proofs um in the paper we describe a

2799
01:48:20,800 --> 01:48:22,639
three-step pipeline and in my talk i

2800
01:48:22,639 --> 01:48:24,080
really don't have time to go into it in

2801
01:48:24,080 --> 01:48:26,400
too much detail uh but the this

2802
01:48:26,400 --> 01:48:28,239
three-step pipeline the first step is

2803
01:48:28,239 --> 01:48:30,320
basically a zero-knowledge

2804
01:48:30,320 --> 01:48:33,040
like a circuit that can decrypt the tls

2805
01:48:33,040 --> 01:48:36,239
1.3 records in in zero knowledge

2806
01:48:36,239 --> 01:48:38,239
and then in the paper we describe how

2807
01:48:38,239 --> 01:48:40,239
this these circuits can be composed with

2808
01:48:40,239 --> 01:48:41,199
other circuits that are kind of

2809
01:48:41,199 --> 01:48:43,520
responsible for checking policy um so

2810
01:48:43,520 --> 01:48:45,119
and by composing these circuits you can

2811
01:48:45,119 --> 01:48:46,639
kind of do an end-to-end policy

2812
01:48:46,639 --> 01:48:47,920
enforcement on encrypted traffic so i

2813
01:48:47,920 --> 01:48:49,760
won't talk about that um the latter

2814
01:48:49,760 --> 01:48:51,440
steps of this pipeline but i will talk

2815
01:48:51,440 --> 01:48:53,920
about um this zero knowledge circuit for

2816
01:48:53,920 --> 01:48:56,800
decrypting tls connections

2817
01:48:56,800 --> 01:48:59,679
uh so the question is how do we decrypt

2818
01:48:59,679 --> 01:49:02,320
uh tls 1.3 records in in zero knowledge

2819
01:49:02,320 --> 01:49:05,360
proof um the most obvious way to tackle

2820
01:49:05,360 --> 01:49:07,440
this is to just re-run the record layer

2821
01:49:07,440 --> 01:49:09,679
decryption uh in this in the xero north

2822
01:49:09,679 --> 01:49:11,199
group so basically express record layer

2823
01:49:11,199 --> 01:49:13,199
decryption as a circuit and just

2824
01:49:13,199 --> 01:49:15,520
decrypt the encrypted traffic uh in the

2825
01:49:15,520 --> 01:49:17,199
in the in the circuit

2826
01:49:17,199 --> 01:49:18,880
so the problem with doing this is that

2827
01:49:18,880 --> 01:49:21,520
uh tls 1.3 records are not binding

2828
01:49:21,520 --> 01:49:23,199
commitments to the underlying plaintext

2829
01:49:23,199 --> 01:49:25,199
because uh tls 1.3 really only supports

2830
01:49:25,199 --> 01:49:28,560
either gcm or cha cha 20 poly 1305 um

2831
01:49:28,560 --> 01:49:30,880
and both of these uh aads have the

2832
01:49:30,880 --> 01:49:32,320
property that you can create craft a

2833
01:49:32,320 --> 01:49:33,760
single cipher text that has multiple

2834
01:49:33,760 --> 01:49:35,280
possible decryptions

2835
01:49:35,280 --> 01:49:37,599
so this means that a malicious client

2836
01:49:37,599 --> 01:49:39,199
could lie about what it's putting in the

2837
01:49:39,199 --> 01:49:40,960
proof basically craft a cipher text that

2838
01:49:40,960 --> 01:49:42,880
has multiple decryptions and then issue

2839
01:49:42,880 --> 01:49:44,080
a zero-knowledge proof about one of

2840
01:49:44,080 --> 01:49:45,679
these decryptions but actually send a

2841
01:49:45,679 --> 01:49:47,679
different one to the to the server so so

2842
01:49:47,679 --> 01:49:49,599
this this problem of kind of lying in

2843
01:49:49,599 --> 01:49:51,920
the proof about the key that is used is

2844
01:49:51,920 --> 01:49:52,800
uh

2845
01:49:52,800 --> 01:49:55,760
one we need to tackle um so to fix this

2846
01:49:55,760 --> 01:49:57,840
in the paper we observe that you can use

2847
01:49:57,840 --> 01:50:00,560
the handshake information um to act as a

2848
01:50:00,560 --> 01:50:02,239
kind of consistency check with the key

2849
01:50:02,239 --> 01:50:04,080
that the client gives as input to the

2850
01:50:04,080 --> 01:50:06,400
zero knowledge decryption

2851
01:50:06,400 --> 01:50:08,560
um so in the in the circuit in addition

2852
01:50:08,560 --> 01:50:10,639
to doing record layer decryption

2853
01:50:10,639 --> 01:50:12,239
the circuit also checks that the key

2854
01:50:12,239 --> 01:50:13,520
that is given is consistent with the

2855
01:50:13,520 --> 01:50:15,360
handshake information that was sent on

2856
01:50:15,360 --> 01:50:16,480
the wire

2857
01:50:16,480 --> 01:50:18,080
so the question really boils down to how

2858
01:50:18,080 --> 01:50:20,080
do we build an efficient zero-knowledge

2859
01:50:20,080 --> 01:50:22,840
key consistency check for zeal for tls

2860
01:50:22,840 --> 01:50:25,360
1.3 um and so because

2861
01:50:25,360 --> 01:50:27,840
uh tls 1.3 key schedule and the

2862
01:50:27,840 --> 01:50:30,080
handshake are are quite complicated i i

2863
01:50:30,080 --> 01:50:31,440
could get into the fine details here and

2864
01:50:31,440 --> 01:50:32,639
i'm sure everybody here would understand

2865
01:50:32,639 --> 01:50:33,760
them but it would take a lot of time

2866
01:50:33,760 --> 01:50:37,119
that i really don't have um so i

2867
01:50:37,119 --> 01:50:39,199
uh would i'll i'll just skip most of the

2868
01:50:39,199 --> 01:50:40,880
details here uh but i first would like

2869
01:50:40,880 --> 01:50:44,400
to thank um the dowling at all tls 1.3

2870
01:50:44,400 --> 01:50:46,560
analysis paper of like cryptographic

2871
01:50:46,560 --> 01:50:48,960
analysis of the tls 1.3 handshake for

2872
01:50:48,960 --> 01:50:51,599
this incredible diagram of the tls key

2873
01:50:51,599 --> 01:50:52,800
schedule which i think is like this is

2874
01:50:52,800 --> 01:50:54,239
like maybe the best diagram i've ever

2875
01:50:54,239 --> 01:50:57,040
seen in a crypto paper but anyway so we

2876
01:50:57,040 --> 01:50:58,080
don't really have time to get into the

2877
01:50:58,080 --> 01:50:59,679
details here but uh what i'll say is

2878
01:50:59,679 --> 01:51:01,840
that the the simple and efficient way to

2879
01:51:01,840 --> 01:51:03,440
design this key consistency check is to

2880
01:51:03,440 --> 01:51:04,880
just rerun most of the client's key

2881
01:51:04,880 --> 01:51:06,880
derivation in the circuit and so in the

2882
01:51:06,880 --> 01:51:08,719
paper what we what we observe is that

2883
01:51:08,719 --> 01:51:11,199
this the server finished value basically

2884
01:51:11,199 --> 01:51:12,719
the mac of the server computes over the

2885
01:51:12,719 --> 01:51:15,679
transcript acts as a commitment to some

2886
01:51:15,679 --> 01:51:17,199
the intermediate steps of this key

2887
01:51:17,199 --> 01:51:19,199
derivation process and so by checking

2888
01:51:19,199 --> 01:51:21,840
these uh in the circuit we can shortcut

2889
01:51:21,840 --> 01:51:23,360
most of the expensive operations of the

2890
01:51:23,360 --> 01:51:25,199
client's key derivation and get

2891
01:51:25,199 --> 01:51:28,080
like a key consistency check whose cost

2892
01:51:28,080 --> 01:51:29,280
and the size of the circuit doesn't

2893
01:51:29,280 --> 01:51:33,119
depend on the size of the tls transcript

2894
01:51:33,119 --> 01:51:35,040
so i'll just talk very very briefly

2895
01:51:35,040 --> 01:51:36,719
about the results of our prototype

2896
01:51:36,719 --> 01:51:39,520
implementation um we talked uh we used

2897
01:51:39,520 --> 01:51:41,440
uh the xj smart development environment

2898
01:51:41,440 --> 01:51:43,280
uh and the graph 16 zero knowledge proof

2899
01:51:43,280 --> 01:51:44,800
system and so the cost of this key

2900
01:51:44,800 --> 01:51:46,880
consistency check the proof generation

2901
01:51:46,880 --> 01:51:47,840
um

2902
01:51:47,840 --> 01:51:49,679
is about 15 seconds and so in the paper

2903
01:51:49,679 --> 01:51:51,599
we explained that this consistency check

2904
01:51:51,599 --> 01:51:53,280
really only has to be done once per tls

2905
01:51:53,280 --> 01:51:55,840
session um which um

2906
01:51:55,840 --> 01:51:57,679
ameliorates the high cost of doing this

2907
01:51:57,679 --> 01:51:59,040
somewhat but it still is quite a high

2908
01:51:59,040 --> 01:52:00,560
cost this is this is pretty impractical

2909
01:52:00,560 --> 01:52:02,880
at this point however once you do this

2910
01:52:02,880 --> 01:52:05,280
key consistency check um actually you're

2911
01:52:05,280 --> 01:52:08,159
doing like per like for the dn the dot

2912
01:52:08,159 --> 01:52:11,199
filtering um use case i described before

2913
01:52:11,199 --> 01:52:12,719
the per packet cost of this is only

2914
01:52:12,719 --> 01:52:15,040
about three seconds per per dns query if

2915
01:52:15,040 --> 01:52:16,639
you want to prove that your dns query is

2916
01:52:16,639 --> 01:52:18,639
not for a is for a domain not on a block

2917
01:52:18,639 --> 01:52:19,520
list

2918
01:52:19,520 --> 01:52:21,280
um and finally the proof verification

2919
01:52:21,280 --> 01:52:22,960
cost here is the best

2920
01:52:22,960 --> 01:52:25,199
um of the three uh it we inherit the

2921
01:52:25,199 --> 01:52:26,960
fast proof verification of grout 16 so

2922
01:52:26,960 --> 01:52:28,400
proof verification for the middle box

2923
01:52:28,400 --> 01:52:30,080
only takes about five milliseconds so

2924
01:52:30,080 --> 01:52:32,880
the tldr here is that these techniques

2925
01:52:32,880 --> 01:52:34,159
are not practical yet but they're

2926
01:52:34,159 --> 01:52:35,760
they're really really close um and there

2927
01:52:35,760 --> 01:52:37,440
are a lot of interesting optimizations

2928
01:52:37,440 --> 01:52:38,719
that are possible here so like for

2929
01:52:38,719 --> 01:52:40,639
example ongoing work uh we're using a

2930
01:52:40,639 --> 01:52:41,920
different zero-knowledge proof system

2931
01:52:41,920 --> 01:52:43,440
that reduces the client cost here by

2932
01:52:43,440 --> 01:52:46,239
about 70x um but there are some some

2933
01:52:46,239 --> 01:52:47,440
caveats here which i can get into if

2934
01:52:47,440 --> 01:52:49,280
people are curious and i encourage you

2935
01:52:49,280 --> 01:52:50,320
if you're interested in more of these

2936
01:52:50,320 --> 01:52:52,080
numbers or more context to see the paper

2937
01:52:52,080 --> 01:52:53,840
online

2938
01:52:53,840 --> 01:52:55,920
um so finally i'll just conclude with

2939
01:52:55,920 --> 01:52:57,360
some general thoughts about zero

2940
01:52:57,360 --> 01:53:00,000
knowledge proofs and and tls um so

2941
01:53:00,000 --> 01:53:02,080
whatever people think of of this this

2942
01:53:02,080 --> 01:53:03,360
particular research that my co-authors

2943
01:53:03,360 --> 01:53:05,440
and i have done i hope you'll agree that

2944
01:53:05,440 --> 01:53:06,480
zero knowledge proofs are a really

2945
01:53:06,480 --> 01:53:08,639
really interesting tool for lots of of

2946
01:53:08,639 --> 01:53:10,560
practical uh network security and

2947
01:53:10,560 --> 01:53:12,880
privacy problems um so zero knowledge

2948
01:53:12,880 --> 01:53:13,760
proofs are in a really really

2949
01:53:13,760 --> 01:53:16,400
interesting um place right now as a

2950
01:53:16,400 --> 01:53:18,000
technology they're they're really on the

2951
01:53:18,000 --> 01:53:20,480
cusp of becoming unpractical uh

2952
01:53:20,480 --> 01:53:21,679
practical enough to use real

2953
01:53:21,679 --> 01:53:23,760
applications so one other interesting

2954
01:53:23,760 --> 01:53:26,400
application specifically tls could be um

2955
01:53:26,400 --> 01:53:28,480
in other s in other network security

2956
01:53:28,480 --> 01:53:30,800
settings it's important to see uh sni

2957
01:53:30,800 --> 01:53:33,360
values in plain text um so one possible

2958
01:53:33,360 --> 01:53:34,639
application could be doing like zero

2959
01:53:34,639 --> 01:53:36,560
knowledge proofs about the contents of

2960
01:53:36,560 --> 01:53:39,920
of an encrypted client hello um in in um

2961
01:53:39,920 --> 01:53:41,920
in a tls handshake um and there are lots

2962
01:53:41,920 --> 01:53:43,520
of other problems here which for time

2963
01:53:43,520 --> 01:53:45,520
reasons i won't um go over them but

2964
01:53:45,520 --> 01:53:47,040
there are a lot of other parts of tls

2965
01:53:47,040 --> 01:53:48,960
that we didn't really uh approach in

2966
01:53:48,960 --> 01:53:50,639
this work on zero knowledge proof so

2967
01:53:50,639 --> 01:53:51,599
figuring out how to do things like

2968
01:53:51,599 --> 01:53:53,040
client authentication in azure knowledge

2969
01:53:53,040 --> 01:53:54,400
proof would be pretty interesting

2970
01:53:54,400 --> 01:53:56,320
um and another

2971
01:53:56,320 --> 01:53:58,080
very outlandish suggestion which i'll

2972
01:53:58,080 --> 01:54:00,320
i'll just suggest and i expect people to

2973
01:54:00,320 --> 01:54:02,560
to push back on this but i it would be

2974
01:54:02,560 --> 01:54:05,119
interesting to me to imagine zero

2975
01:54:05,119 --> 01:54:07,199
knowledge friendliness as a design

2976
01:54:07,199 --> 01:54:09,199
consideration for future

2977
01:54:09,199 --> 01:54:11,440
versions of tls and indeed for other

2978
01:54:11,440 --> 01:54:14,159
future secure channel uh protocols

2979
01:54:14,159 --> 01:54:15,360
um

2980
01:54:15,360 --> 01:54:17,599
so with that uh i'll just conclude and

2981
01:54:17,599 --> 01:54:20,400
uh take some questions

2982
01:54:20,400 --> 01:54:23,839
so thanks everybody

2983
01:54:31,440 --> 01:54:33,599
hi ben schwartz

2984
01:54:33,599 --> 01:54:35,679
uh so

2985
01:54:35,679 --> 01:54:38,880
you you mentioned the idea of yeah

2986
01:54:38,880 --> 01:54:41,440
sorry to see to see the the screen i

2987
01:54:41,440 --> 01:54:43,440
have to like end the

2988
01:54:43,440 --> 01:54:45,280
presentation here so

2989
01:54:45,280 --> 01:54:47,119
oh well that's fine

2990
01:54:47,119 --> 01:54:50,119
okay

2991
01:54:52,239 --> 01:54:55,119
uh so you you mentioned zero knowledge

2992
01:54:55,119 --> 01:54:56,960
proof friendly version of tls can you

2993
01:54:56,960 --> 01:55:00,480
imagine a zkp hostile version of tls

2994
01:55:00,480 --> 01:55:02,840
what would that look like

2995
01:55:02,840 --> 01:55:05,199
um well

2996
01:55:05,199 --> 01:55:07,440
um the the glib answer to your question

2997
01:55:07,440 --> 01:55:09,920
is that tls 1.3 is already the zkp

2998
01:55:09,920 --> 01:55:11,840
hostile version of cls

2999
01:55:11,840 --> 01:55:14,159
um

3000
01:55:14,639 --> 01:55:16,239
and that sounds like a criticism and

3001
01:55:16,239 --> 01:55:18,400
it's honestly it's not a criticism um

3002
01:55:18,400 --> 01:55:21,920
tls 1.3 is extremely well designed for

3003
01:55:21,920 --> 01:55:24,000
the the use cases that the designers

3004
01:55:24,000 --> 01:55:26,480
envisioned um but

3005
01:55:26,480 --> 01:55:27,440
the

3006
01:55:27,440 --> 01:55:29,199
the like some some of the reasons why

3007
01:55:29,199 --> 01:55:30,639
tls 1.3

3008
01:55:30,639 --> 01:55:32,639
excuse me is well designed are also

3009
01:55:32,639 --> 01:55:35,119
reasons why it's it's quite quite

3010
01:55:35,119 --> 01:55:37,199
hostile to zero knowledge so for example

3011
01:55:37,199 --> 01:55:39,199
the the kind of extreme

3012
01:55:39,199 --> 01:55:41,520
precision and detail of the key schedule

3013
01:55:41,520 --> 01:55:43,360
um is something that

3014
01:55:43,360 --> 01:55:46,799
uh makes it quite hard to

3015
01:55:46,960 --> 01:55:48,880
do efficiency or knowledge proofs about

3016
01:55:48,880 --> 01:55:49,760
because

3017
01:55:49,760 --> 01:55:51,840
in the key schedule not only do you need

3018
01:55:51,840 --> 01:55:55,199
to do a lot of kind of hkdf operations

3019
01:55:55,199 --> 01:55:57,360
uh hk you know you're using hkdf on a

3020
01:55:57,360 --> 01:56:00,000
primitive like like hmac shot 56 which

3021
01:56:00,000 --> 01:56:01,840
is like not zero knowledge friendly so

3022
01:56:01,840 --> 01:56:04,400
shot 56 is extremely expensive to

3023
01:56:04,400 --> 01:56:06,960
evaluate and zero knowledge proof um

3024
01:56:06,960 --> 01:56:09,599
so the key schedule having this you know

3025
01:56:09,599 --> 01:56:12,159
there are lots of context hashes

3026
01:56:12,159 --> 01:56:14,239
and like like label inputs and

3027
01:56:14,239 --> 01:56:16,159
everything there's lots of like the

3028
01:56:16,159 --> 01:56:18,000
there's kind of a hierarchy of keys uh

3029
01:56:18,000 --> 01:56:20,080
this is this is quite quite hard to do

3030
01:56:20,080 --> 01:56:21,599
efficiently in zero knowledge and zero

3031
01:56:21,599 --> 01:56:23,360
knowledge proof yeah

3032
01:56:23,360 --> 01:56:25,040
um

3033
01:56:25,040 --> 01:56:27,599
yeah i guess

3034
01:56:27,920 --> 01:56:29,679
another thing

3035
01:56:29,679 --> 01:56:31,520
well

3036
01:56:31,520 --> 01:56:33,040
yeah yeah

3037
01:56:33,040 --> 01:56:35,199
okay thank you but i i can i'd be i'd be

3038
01:56:35,199 --> 01:56:39,559
willing to i'll stop my head i can't

3039
01:56:46,400 --> 01:56:48,400
quick question is how lengthy is the

3040
01:56:48,400 --> 01:56:50,239
zero knowledge proof that you need to

3041
01:56:50,239 --> 01:56:52,480
send to the middle box

3042
01:56:52,480 --> 01:56:55,440
yeah great question so um this depends a

3043
01:56:55,440 --> 01:56:57,679
lot on the specific zero knowledge proof

3044
01:56:57,679 --> 01:57:00,560
back end that that um you use so for our

3045
01:57:00,560 --> 01:57:02,480
system the proofs are quite short so

3046
01:57:02,480 --> 01:57:04,800
grass 16 uh which is the proof system

3047
01:57:04,800 --> 01:57:06,159
that we use is really designed to

3048
01:57:06,159 --> 01:57:08,639
produce extremely succinct small proofs

3049
01:57:08,639 --> 01:57:10,080
so the proofs are only only going to be

3050
01:57:10,080 --> 01:57:12,000
about 128 bytes

3051
01:57:12,000 --> 01:57:14,480
um in in our in our prototype

3052
01:57:14,480 --> 01:57:17,440
um and so the trade-off here is that

3053
01:57:17,440 --> 01:57:20,239
gross 16 the the the work of proof

3054
01:57:20,239 --> 01:57:22,320
generation is relatively high

3055
01:57:22,320 --> 01:57:24,400
that this is kind of a trade-off in all

3056
01:57:24,400 --> 01:57:26,320
existing um

3057
01:57:26,320 --> 01:57:27,599
zero enough proof systems is that

3058
01:57:27,599 --> 01:57:29,040
there's a kind of trade-off between the

3059
01:57:29,040 --> 01:57:30,639
succinctness of the proof and the work

3060
01:57:30,639 --> 01:57:33,040
that the proverb has to produce it um so

3061
01:57:33,040 --> 01:57:34,320
we're exploring like kind of different

3062
01:57:34,320 --> 01:57:36,320
trade-offs here um like maybe if you

3063
01:57:36,320 --> 01:57:37,119
were

3064
01:57:37,119 --> 01:57:38,960
if you were able to accept like a one

3065
01:57:38,960 --> 01:57:40,560
kilobyte proof you could get a much

3066
01:57:40,560 --> 01:57:42,800
faster proverb but currently

3067
01:57:42,800 --> 01:57:47,880
our prototype is 128 bytes per proof

3068
01:57:52,159 --> 01:57:53,520
i just had a

3069
01:57:53,520 --> 01:57:56,159
a comment i think the um

3070
01:57:56,159 --> 01:57:58,080
the proposition that visibility is a

3071
01:57:58,080 --> 01:58:00,080
reasonable thing to want for tls is

3072
01:58:00,080 --> 01:58:02,480
contested uh i wouldn't accept it at all

3073
01:58:02,480 --> 01:58:04,719
myself

3074
01:58:04,719 --> 01:58:07,119
and i would encourage you to maybe do

3075
01:58:07,119 --> 01:58:08,800
more research on on trying to make this

3076
01:58:08,800 --> 01:58:10,320
harder rather than easier and slower

3077
01:58:10,320 --> 01:58:12,239
rather than faster in other words

3078
01:58:12,239 --> 01:58:13,520
it would be good research to try and

3079
01:58:13,520 --> 01:58:16,080
figure out how to improve tls to make

3080
01:58:16,080 --> 01:58:18,800
these methods work less well

3081
01:58:18,800 --> 01:58:22,239
uh in my opinion um and it seems like as

3082
01:58:22,239 --> 01:58:24,560
as good a research goal perhaps not as

3083
01:58:24,560 --> 01:58:26,400
popular with certain people

3084
01:58:26,400 --> 01:58:27,280
um

3085
01:58:27,280 --> 01:58:28,159
so

3086
01:58:28,159 --> 01:58:29,440
well it's probably hard to publish a

3087
01:58:29,440 --> 01:58:31,199
paper like that

3088
01:58:31,199 --> 01:58:32,639
right but sometimes protecting the

3089
01:58:32,639 --> 01:58:34,239
security of the internet as well i don't

3090
01:58:34,239 --> 01:58:35,920
know i understand sorry

3091
01:58:35,920 --> 01:58:38,480
yeah so but my question is so you you

3092
01:58:38,480 --> 01:58:40,639
you said that uh you have like a 15

3093
01:58:40,639 --> 01:58:43,280
second overhead and maybe a 70 x speed

3094
01:58:43,280 --> 01:58:45,679
up how realistic is the 70x speed up in

3095
01:58:45,679 --> 01:58:47,360
what time frame can you can you can i

3096
01:58:47,360 --> 01:58:49,119
give a feel for that

3097
01:58:49,119 --> 01:58:51,760
um so the 70x speed up

3098
01:58:51,760 --> 01:58:53,679
relies on a different set of trade-offs

3099
01:58:53,679 --> 01:58:56,400
for the the zero knowledge per system um

3100
01:58:56,400 --> 01:58:58,800
so it's you but in terms of time frame

3101
01:58:58,800 --> 01:59:00,159
do you mean like when could this be

3102
01:59:00,159 --> 01:59:02,400
deployable or

3103
01:59:02,400 --> 01:59:04,320
yeah yeah but yeah when might get

3104
01:59:04,320 --> 01:59:06,400
feasible to be 70 times quicker than 15

3105
01:59:06,400 --> 01:59:09,040
seconds overhead per trs session

3106
01:59:09,040 --> 01:59:10,880
um well the the back end the zero

3107
01:59:10,880 --> 01:59:12,239
knowledge backing that we're using i

3108
01:59:12,239 --> 01:59:13,679
mean exists today i mean we're using

3109
01:59:13,679 --> 01:59:15,520
code that was written by actually like

3110
01:59:15,520 --> 01:59:18,159
like a researcher at northwestern um

3111
01:59:18,159 --> 01:59:20,239
xiao wang um so

3112
01:59:20,239 --> 01:59:21,119
the

3113
01:59:21,119 --> 01:59:24,880
the 70x speed up um

3114
01:59:24,880 --> 01:59:26,719
is is the caveat here is that there are

3115
01:59:26,719 --> 01:59:28,800
other trade-offs so the the middle boxes

3116
01:59:28,800 --> 01:59:30,560
verification cost is also quite a bit

3117
01:59:30,560 --> 01:59:31,840
higher in this

3118
01:59:31,840 --> 01:59:34,639
in in the 70x speed up so

3119
01:59:34,639 --> 01:59:36,800
you think that you can imagine that like

3120
01:59:36,800 --> 01:59:39,199
both the the client and the middle box

3121
01:59:39,199 --> 01:59:40,719
in in this proof system would need to

3122
01:59:40,719 --> 01:59:42,880
pay about like a 200 milliseconds

3123
01:59:42,880 --> 01:59:45,040
overhead of proof generation and also

3124
01:59:45,040 --> 01:59:46,880
verification

3125
01:59:46,880 --> 01:59:50,080
um so so 200 milliseconds is

3126
01:59:50,080 --> 01:59:51,679
you know quite a bit faster than 15

3127
01:59:51,679 --> 01:59:54,000
seconds of course but to be doing this

3128
01:59:54,000 --> 01:59:55,679
on every packet

3129
01:59:55,679 --> 01:59:56,960
on every network packet is probably

3130
01:59:56,960 --> 01:59:59,040
still impractical so

3131
01:59:59,040 --> 02:00:00,080
there are

3132
02:00:00,080 --> 02:00:03,119
um there's a lot of research um ongoing

3133
02:00:03,119 --> 02:00:04,239
in like these zero-knowledge proof

3134
02:00:04,239 --> 02:00:05,760
systems um

3135
02:00:05,760 --> 02:00:06,560
and

3136
02:00:06,560 --> 02:00:08,639
i think like in the next five years i

3137
02:00:08,639 --> 02:00:10,239
expect that people will develop

3138
02:00:10,239 --> 02:00:11,599
techniques that kind of achieve the best

3139
02:00:11,599 --> 02:00:13,199
of both worlds

3140
02:00:13,199 --> 02:00:15,119
where you have kind of more succinct

3141
02:00:15,119 --> 02:00:17,440
proofs but that are also faster to

3142
02:00:17,440 --> 02:00:19,040
generate

3143
02:00:19,040 --> 02:00:20,639
okay thanks so my takeaway is that if

3144
02:00:20,639 --> 02:00:22,560
the tds working group

3145
02:00:22,560 --> 02:00:24,400
is is looking at trying to make these

3146
02:00:24,400 --> 02:00:26,480
techniques less effective then we have a

3147
02:00:26,480 --> 02:00:28,880
couple of years to do it

3148
02:00:28,880 --> 02:00:30,480
right and we'd welcome your help of

3149
02:00:30,480 --> 02:00:32,400
course

3150
02:00:32,400 --> 02:00:35,360
well thank you i appreciate that

3151
02:00:35,360 --> 02:00:37,360
although i would i if if i can i would

3152
02:00:37,360 --> 02:00:39,119
just kind of like to

3153
02:00:39,119 --> 02:00:42,400
push back a little bit on on the

3154
02:00:42,400 --> 02:00:43,199
the first thing you said about

3155
02:00:43,199 --> 02:00:45,199
visibility um

3156
02:00:45,199 --> 02:00:48,239
i think it's it's it's very very natural

3157
02:00:48,239 --> 02:00:49,119
to

3158
02:00:49,119 --> 02:00:51,440
um oppose

3159
02:00:51,440 --> 02:00:52,239
like

3160
02:00:52,239 --> 02:00:54,480
like efforts towards the kind of network

3161
02:00:54,480 --> 02:00:56,320
visibility but i think it's important to

3162
02:00:56,320 --> 02:00:58,560
remember that the starting point like if

3163
02:00:58,560 --> 02:00:59,760
you are

3164
02:00:59,760 --> 02:01:02,080
taking a very pro privacy standpoint i

3165
02:01:02,080 --> 02:01:03,599
think it's important to remember that

3166
02:01:03,599 --> 02:01:06,960
the starting point here is not tls 1.3

3167
02:01:06,960 --> 02:01:08,320
security guarantees the starting point

3168
02:01:08,320 --> 02:01:10,480
here is really networks where tls is not

3169
02:01:10,480 --> 02:01:12,880
used at all because it conflicts with

3170
02:01:12,880 --> 02:01:16,159
these visibility requirements so

3171
02:01:16,159 --> 02:01:17,920
to me the reason why i think this is an

3172
02:01:17,920 --> 02:01:20,080
interesting research question and a very

3173
02:01:20,080 --> 02:01:23,280
challenging one admittedly is that

3174
02:01:23,280 --> 02:01:25,280
by doing these kinds of like like you

3175
02:01:25,280 --> 02:01:27,760
know these visibility um

3176
02:01:27,760 --> 02:01:28,880
by doing this kind of visibility

3177
02:01:28,880 --> 02:01:30,320
research i think we can improve the

3178
02:01:30,320 --> 02:01:32,639
privacy of a lot of networks um and

3179
02:01:32,639 --> 02:01:34,159
improve the privacy of end users who

3180
02:01:34,159 --> 02:01:35,360
today

3181
02:01:35,360 --> 02:01:36,400
don't get to encrypt their

3182
02:01:36,400 --> 02:01:38,000
communications because the network

3183
02:01:38,000 --> 02:01:39,199
operators can't

3184
02:01:39,199 --> 02:01:41,040
have this visibility into the

3185
02:01:41,040 --> 02:01:43,440
traffic

3186
02:01:47,199 --> 02:01:48,719
uh okay

3187
02:01:48,719 --> 02:01:50,800
thank you paul ecker um

3188
02:01:50,800 --> 02:01:52,719
since we're one minute over is it is it

3189
02:01:52,719 --> 02:01:54,239
quick

3190
02:01:54,239 --> 02:01:56,800
uh yes um thank you paul um interesting

3191
02:01:56,800 --> 02:01:58,320
talk i'm looking forward to waiting 15

3192
02:01:58,320 --> 02:02:01,920
seconds to uh to download thanks um um

3193
02:02:01,920 --> 02:02:03,199
so can you

3194
02:02:03,199 --> 02:02:05,199
say what would what would make um what

3195
02:02:05,199 --> 02:02:06,560
would make those more friendly to this

3196
02:02:06,560 --> 02:02:08,159
is it just having committing ciphers or

3197
02:02:08,159 --> 02:02:09,679
something more fancy

3198
02:02:09,679 --> 02:02:11,440
yeah yeah that's a good question so um

3199
02:02:11,440 --> 02:02:13,119
having committing ciphers would help

3200
02:02:13,119 --> 02:02:14,159
however

3201
02:02:14,159 --> 02:02:16,400
committing ciphers

3202
02:02:16,400 --> 02:02:18,080
they actually aren't the best way to

3203
02:02:18,080 --> 02:02:20,239
solve this problem um they are the way

3204
02:02:20,239 --> 02:02:22,159
that like kind of in the past people

3205
02:02:22,159 --> 02:02:23,760
have approached this and like the kind

3206
02:02:23,760 --> 02:02:25,199
of receiver wisdom in the crypto

3207
02:02:25,199 --> 02:02:26,320
community about doing verifiable

3208
02:02:26,320 --> 02:02:27,760
decryption is that you know as long as

3209
02:02:27,760 --> 02:02:29,040
your encryption is committing then you

3210
02:02:29,040 --> 02:02:30,239
can just kind of verify the commitment

3211
02:02:30,239 --> 02:02:32,080
and everything's fine however in this

3212
02:02:32,080 --> 02:02:33,599
paper one of the interesting things we

3213
02:02:33,599 --> 02:02:36,320
found is that it's actually if if your

3214
02:02:36,320 --> 02:02:37,520
sessions are long-lived it's actually

3215
02:02:37,520 --> 02:02:39,440
much more efficient to do a one-time key

3216
02:02:39,440 --> 02:02:42,239
consistency check uh and then rather

3217
02:02:42,239 --> 02:02:43,599
than having to kind of check the

3218
02:02:43,599 --> 02:02:45,040
commitment in every ciphertext every

3219
02:02:45,040 --> 02:02:47,199
time you do a proof so one thing that

3220
02:02:47,199 --> 02:02:48,480
tls could do

3221
02:02:48,480 --> 02:02:50,239
is send as part of the handshake a

3222
02:02:50,239 --> 02:02:52,159
commitment to the session keys

3223
02:02:52,159 --> 02:02:53,119
um

3224
02:02:53,119 --> 02:02:55,440
even even just as an extension like if

3225
02:02:55,440 --> 02:02:57,760
if you if you sent this and had both

3226
02:02:57,760 --> 02:02:58,960
both parties kind of check these

3227
02:02:58,960 --> 02:03:01,280
commitments um then

3228
02:03:01,280 --> 02:03:03,040
this whole key consistency check this 15

3229
02:03:03,040 --> 02:03:04,239
second cost that i described would go

3230
02:03:04,239 --> 02:03:06,080
away pretty much immediately because the

3231
02:03:06,080 --> 02:03:07,520
handshake would actually

3232
02:03:07,520 --> 02:03:10,000
to have a like like a correctly

3233
02:03:10,000 --> 02:03:11,520
set up tls connection you would need to

3234
02:03:11,520 --> 02:03:13,199
check a commitment to the session key

3235
02:03:13,199 --> 02:03:14,560
and if the middle box can extract this

3236
02:03:14,560 --> 02:03:16,239
then they can just check subsequent

3237
02:03:16,239 --> 02:03:17,599
proofs against this commitment that is

3238
02:03:17,599 --> 02:03:20,080
sent by the client

3239
02:03:20,080 --> 02:03:21,520
does that make sense

3240
02:03:21,520 --> 02:03:26,280
uh not for the purposes thank you

3241
02:03:29,040 --> 02:03:30,560
all right um

3242
02:03:30,560 --> 02:03:32,239
so we're three minutes over thank you

3243
02:03:32,239 --> 02:03:34,560
paul for uh you know talking about this

3244
02:03:34,560 --> 02:03:36,000
you know

3245
02:03:36,000 --> 02:03:37,199
interesting

3246
02:03:37,199 --> 02:03:40,560
uh a new take on uh tls and

3247
02:03:40,560 --> 02:03:43,760
uh privacy and security um

3248
02:03:43,760 --> 02:03:46,560
sorry for going over time

3249
02:03:46,560 --> 02:03:47,920
that's our fault this chairs for not

3250
02:03:47,920 --> 02:03:49,840
managing the time better um

3251
02:03:49,840 --> 02:03:51,440
uh as discussed in the chat the the

3252
02:03:51,440 --> 02:03:53,199
paper was shared on the list so if

3253
02:03:53,199 --> 02:03:55,599
you're curious please check it out

3254
02:03:55,599 --> 02:03:57,280
be interesting to see how things can be

3255
02:03:57,280 --> 02:04:00,960
improved or or not one way the other

3256
02:04:00,960 --> 02:04:02,800
and unless anyone else has any burning

3257
02:04:02,800 --> 02:04:07,480
questions i think we can wrap up here

3258
02:04:10,719 --> 02:04:13,199
okay bye thanks thanks folks thanks for

3259
02:04:13,199 --> 02:04:16,280
our notetaker

