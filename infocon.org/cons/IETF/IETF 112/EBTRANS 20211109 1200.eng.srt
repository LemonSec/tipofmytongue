1
00:00:14,480 --> 00:00:16,239
foreign

2
00:00:16,239 --> 00:00:18,639
hello

3
00:00:22,880 --> 00:00:25,519
good morning

4
00:00:25,519 --> 00:00:26,960
or you know

5
00:00:26,960 --> 00:00:29,439
afternoon or middle of the night

6
00:00:29,439 --> 00:00:31,840
evening

7
00:02:04,399 --> 00:02:07,680
so apparently folks are having a hard

8
00:02:07,680 --> 00:02:10,560
time logging in to um

9
00:02:10,560 --> 00:02:13,599
uh either to data tracker to the

10
00:02:13,599 --> 00:02:15,440
integration with meat echo so maybe

11
00:02:15,440 --> 00:02:18,879
let's give them a couple more minutes to

12
00:02:18,879 --> 00:02:22,280
enter the meeting

13
00:02:49,840 --> 00:02:51,920
you

14
00:03:59,840 --> 00:04:01,920
you

15
00:04:41,840 --> 00:04:43,919
you

16
00:05:31,919 --> 00:05:34,479
uh since mike asked on the chat this is

17
00:05:34,479 --> 00:05:36,639
just making sure that audio works can

18
00:05:36,639 --> 00:05:38,880
someone confirm on the chat that you can

19
00:05:38,880 --> 00:05:39,919
hear me

20
00:05:39,919 --> 00:05:42,639
uh we can hear you just fine david

21
00:05:42,639 --> 00:05:44,240
all right thanks

22
00:05:44,240 --> 00:05:46,400
yeah we're we're still waiting on some

23
00:05:46,400 --> 00:05:49,600
more participants to get through uh i'm

24
00:05:49,600 --> 00:05:52,320
seeing victor

25
00:05:52,320 --> 00:05:54,400
all right then i think i think maybe at

26
00:05:54,400 --> 00:05:55,759
this point we can get started or not

27
00:05:55,759 --> 00:05:56,960
what do you think

28
00:05:56,960 --> 00:05:58,880
yeah i think i think it looks like uh

29
00:05:58,880 --> 00:06:01,440
the log jam has been broken

30
00:06:01,440 --> 00:06:03,199
we've just added like 20 people in the

31
00:06:03,199 --> 00:06:05,600
last uh minute or two

32
00:06:05,600 --> 00:06:07,280
okay

33
00:06:07,280 --> 00:06:09,199
all right

34
00:06:09,199 --> 00:06:12,319
okay thank you this is the itf 112

35
00:06:12,319 --> 00:06:17,319
meeting of the web trans working group

36
00:06:23,919 --> 00:06:26,880
a few meeting tips this session is being

37
00:06:26,880 --> 00:06:29,280
recorded

38
00:06:29,280 --> 00:06:31,360
a data tracker login is required to

39
00:06:31,360 --> 00:06:32,960
attend i know a bunch of you have had

40
00:06:32,960 --> 00:06:35,039
problems with that but hopefully you're

41
00:06:35,039 --> 00:06:36,479
through it now

42
00:06:36,479 --> 00:06:37,600
you don't have to fill in the blue

43
00:06:37,600 --> 00:06:39,440
sheets that's automatic

44
00:06:39,440 --> 00:06:41,520
you can join the jabber room via the

45
00:06:41,520 --> 00:06:43,600
data tracker meeting agenda

46
00:06:43,600 --> 00:06:45,360
uh please use headphones or an echo

47
00:06:45,360 --> 00:06:48,160
canceling speakerphone and stake your

48
00:06:48,160 --> 00:06:50,000
full name before speaking so we can get

49
00:06:50,000 --> 00:06:52,639
you in the minutes

50
00:06:54,000 --> 00:06:55,599
so we are going to be running a queue i

51
00:06:55,599 --> 00:06:57,440
guess david you'll

52
00:06:57,440 --> 00:06:59,280
run the queue

53
00:06:59,280 --> 00:07:01,599
and this is a little bit of advice on

54
00:07:01,599 --> 00:07:03,840
how to get into it and out of it

55
00:07:03,840 --> 00:07:07,039
you use the basically the hand tool

56
00:07:07,039 --> 00:07:08,560
and then you'll need to enable your

57
00:07:08,560 --> 00:07:12,880
audio or you'll be talking well muted

58
00:07:12,880 --> 00:07:15,680
you do or you can enable video you don't

59
00:07:15,680 --> 00:07:16,880
have to

60
00:07:16,880 --> 00:07:18,639
um it does help a little bit with the

61
00:07:18,639 --> 00:07:21,759
comprehension but it isn't required

62
00:07:21,759 --> 00:07:24,000
so the notewell

63
00:07:24,000 --> 00:07:25,919
this is an itf working group so itf

64
00:07:25,919 --> 00:07:28,160
policies are in effect

65
00:07:28,160 --> 00:07:30,479
and by participating you agree to follow

66
00:07:30,479 --> 00:07:32,720
those processes definitive information

67
00:07:32,720 --> 00:07:35,280
is in the bcps below

68
00:07:35,280 --> 00:07:36,800
in this slide

69
00:07:36,800 --> 00:07:39,599
and we encourage you to read them

70
00:07:39,599 --> 00:07:41,680
and understand them

71
00:07:41,680 --> 00:07:43,759
and also of course personal information

72
00:07:43,759 --> 00:07:45,919
you provide is handled in accordance

73
00:07:45,919 --> 00:07:49,120
with the privacy statement

74
00:07:51,039 --> 00:07:55,120
also we like to be clear that the itf

75
00:07:55,120 --> 00:07:57,280
meetings virtual meetings mailing lists

76
00:07:57,280 --> 00:07:58,560
etc

77
00:07:58,560 --> 00:08:00,720
are intended for professional

78
00:08:00,720 --> 00:08:02,240
collaboration

79
00:08:02,240 --> 00:08:05,319
and we have itf guidelines for conduct

80
00:08:05,319 --> 00:08:06,879
anti-harassment

81
00:08:06,879 --> 00:08:09,120
and procedures for the same

82
00:08:09,120 --> 00:08:10,639
if you have any concerns about anything

83
00:08:10,639 --> 00:08:13,759
you're observing please talk to the

84
00:08:13,759 --> 00:08:15,199
boots team

85
00:08:15,199 --> 00:08:17,120
who are available for you and you can do

86
00:08:17,120 --> 00:08:19,120
that confidentially

87
00:08:19,120 --> 00:08:20,800
and of course we strive to maintain an

88
00:08:20,800 --> 00:08:23,120
environment which

89
00:08:23,120 --> 00:08:26,080
exemplifies dignity decency

90
00:08:26,080 --> 00:08:28,240
and respect and we expect you to do the

91
00:08:28,240 --> 00:08:30,479
same

92
00:08:31,520 --> 00:08:33,440
so a little bit about the meeting

93
00:08:33,440 --> 00:08:37,519
the agenda is up on the web we also have

94
00:08:37,519 --> 00:08:39,679
the notes

95
00:08:39,679 --> 00:08:43,360
segment is enabled in a jabber room

96
00:08:43,360 --> 00:08:45,440
i guess alan has volunteered to be the

97
00:08:45,440 --> 00:08:47,279
jabra scribe we are looking for note

98
00:08:47,279 --> 00:08:48,640
takers

99
00:08:48,640 --> 00:08:50,560
and would like to solicit volunteers for

100
00:08:50,560 --> 00:08:53,560
that

101
00:08:54,880 --> 00:08:56,959
do we have volunteers for taking notes

102
00:08:56,959 --> 00:08:59,680
in the notes app

103
00:09:05,120 --> 00:09:08,160
as a reminder to folks taking notes is

104
00:09:08,160 --> 00:09:09,760
not very hard they don't need to be

105
00:09:09,760 --> 00:09:11,279
perfect because we have the video

106
00:09:11,279 --> 00:09:13,040
they're mainly to capture

107
00:09:13,040 --> 00:09:15,600
decisions and we can't start meeting

108
00:09:15,600 --> 00:09:18,000
without a volunteer so please volunteer

109
00:09:18,000 --> 00:09:21,959
to come and help us take notes

110
00:09:44,560 --> 00:09:47,600
i guess we can try drafting people

111
00:09:47,600 --> 00:09:51,160
if they won't volunteer

112
00:09:51,440 --> 00:09:54,080
we really really do need a notetaker

113
00:09:54,080 --> 00:09:56,240
i see james volunteered in the chats

114
00:09:56,240 --> 00:09:58,880
thank you so much james uh thank you we

115
00:09:58,880 --> 00:10:01,120
have a second person as well to

116
00:10:01,120 --> 00:10:03,279
assist

117
00:10:03,279 --> 00:10:05,040
all right

118
00:10:05,040 --> 00:10:08,719
secondary is even less work

119
00:10:09,120 --> 00:10:12,079
this this is spencer uh i can do that i

120
00:10:12,079 --> 00:10:14,320
i can help james as well

121
00:10:14,320 --> 00:10:16,160
thank you very much spencer thank you

122
00:10:16,160 --> 00:10:18,880
very much of

123
00:10:19,120 --> 00:10:21,760
okay so uh some other meetings this week

124
00:10:21,760 --> 00:10:23,360
which you may be interested in there's a

125
00:10:23,360 --> 00:10:25,680
media over quick side meetings and if

126
00:10:25,680 --> 00:10:27,200
you go to the link above you'll see when

127
00:10:27,200 --> 00:10:29,360
they are there's one today a little bit

128
00:10:29,360 --> 00:10:30,320
later

129
00:10:30,320 --> 00:10:31,839
and there's another one on friday so we

130
00:10:31,839 --> 00:10:33,760
encourage you to have a look at those uh

131
00:10:33,760 --> 00:10:35,519
they will be uh talking about some of

132
00:10:35,519 --> 00:10:37,120
the issues of

133
00:10:37,120 --> 00:10:39,519
transporting media over quick or or web

134
00:10:39,519 --> 00:10:42,079
transport

135
00:10:42,320 --> 00:10:44,720
okay so the agenda we're mostly through

136
00:10:44,720 --> 00:10:46,800
the preliminaries thankfully

137
00:10:46,800 --> 00:10:49,200
we should do the agenda bash but

138
00:10:49,200 --> 00:10:51,440
here's basically what we have on store

139
00:10:51,440 --> 00:10:53,360
for you we have a web transport update

140
00:10:53,360 --> 00:10:56,720
from the w3c yanivar will do that we

141
00:10:56,720 --> 00:10:58,320
then have victor talking about web

142
00:10:58,320 --> 00:11:00,560
transporter http 3 and eric talking

143
00:11:00,560 --> 00:11:03,279
about web transport over http 2

144
00:11:03,279 --> 00:11:05,360
and then we'll have our wrap up and

145
00:11:05,360 --> 00:11:06,560
summary

146
00:11:06,560 --> 00:11:08,000
is there anything else that anybody

147
00:11:08,000 --> 00:11:11,640
wants to put on the agenda

148
00:11:14,800 --> 00:11:16,640
okay not hearing any suggested

149
00:11:16,640 --> 00:11:18,880
modifications i'm going to turn it over

150
00:11:18,880 --> 00:11:21,680
to jan ivar for the w3c

151
00:11:21,680 --> 00:11:24,560
web transport update

152
00:11:24,560 --> 00:11:26,480
yanivar

153
00:11:26,480 --> 00:11:29,519
all right can you hear me we can

154
00:11:29,519 --> 00:11:31,839
all right great so this is an update uh

155
00:11:31,839 --> 00:11:34,560
from the w3c web transport working group

156
00:11:34,560 --> 00:11:36,880
uh with progress we've made since uh

157
00:11:36,880 --> 00:11:40,079
last itf111 on july 30th

158
00:11:40,079 --> 00:11:42,399
the status is now a we published a

159
00:11:42,399 --> 00:11:44,480
another working draft which means we're

160
00:11:44,480 --> 00:11:45,920
technically no longer first public

161
00:11:45,920 --> 00:11:47,519
working guy we're just working left so

162
00:11:47,519 --> 00:11:48,560
yeah

163
00:11:48,560 --> 00:11:50,639
um we finished we believe we finished

164
00:11:50,639 --> 00:11:52,639
all discussion of issues in our minimum

165
00:11:52,639 --> 00:11:54,480
viable ship milestone

166
00:11:54,480 --> 00:11:56,800
that we advertised last time

167
00:11:56,800 --> 00:11:58,480
there are four non-editorial issues

168
00:11:58,480 --> 00:12:00,399
remaining that are ready for pr but we

169
00:12:00,399 --> 00:12:01,680
believe there are

170
00:12:01,680 --> 00:12:04,240
uh not controversial and three editorial

171
00:12:04,240 --> 00:12:05,920
and attractor for web platform tests

172
00:12:05,920 --> 00:12:07,200
which are

173
00:12:07,200 --> 00:12:08,480
been added

174
00:12:08,480 --> 00:12:10,720
some decisions and pr's we sort of error

175
00:12:10,720 --> 00:12:13,120
handling in the algorithms

176
00:12:13,120 --> 00:12:15,200
and there's a new web transport error

177
00:12:15,200 --> 00:12:17,680
dom exception with the following members

178
00:12:17,680 --> 00:12:19,839
and there's a source to say whether the

179
00:12:19,839 --> 00:12:22,000
source of the error is stream

180
00:12:22,000 --> 00:12:23,839
or session

181
00:12:23,839 --> 00:12:25,760
session being the entire connection

182
00:12:25,760 --> 00:12:27,440
uh and with a

183
00:12:27,440 --> 00:12:29,920
also an eight bit uh stream error code

184
00:12:29,920 --> 00:12:31,680
that defaults to zero

185
00:12:31,680 --> 00:12:33,600
this means that um

186
00:12:33,600 --> 00:12:35,360
upstream of a sender even you can now

187
00:12:35,360 --> 00:12:38,079
abort a what wg stream with a new web

188
00:12:38,079 --> 00:12:40,240
transport error and you could specify

189
00:12:40,240 --> 00:12:42,480
stream error code that will be sent

190
00:12:42,480 --> 00:12:43,200
to

191
00:12:43,200 --> 00:12:44,800
the receiver

192
00:12:44,800 --> 00:12:46,480
there's also a max datagram size

193
00:12:46,480 --> 00:12:48,560
read-only member on datagrams

194
00:12:48,560 --> 00:12:50,720
that is a

195
00:12:50,720 --> 00:12:52,560
user agent implementation defined

196
00:12:52,560 --> 00:12:53,519
integer

197
00:12:53,519 --> 00:12:54,639
um

198
00:12:54,639 --> 00:12:56,560
you can query

199
00:12:56,560 --> 00:12:58,320
uh there's also center side now takes

200
00:12:58,320 --> 00:13:00,320
streams of buffer source objects as

201
00:13:00,320 --> 00:13:01,200
input

202
00:13:01,200 --> 00:13:03,440
which means array buffer or array buffer

203
00:13:03,440 --> 00:13:05,519
view

204
00:13:05,519 --> 00:13:08,079
we added in uh minimal prioritization

205
00:13:08,079 --> 00:13:09,200
which means that

206
00:13:09,200 --> 00:13:11,040
all outgoing datagrams have priority

207
00:13:11,040 --> 00:13:13,680
over outdoor other outcome data like uh

208
00:13:13,680 --> 00:13:15,279
in other streams

209
00:13:15,279 --> 00:13:18,240
uh we added a 32-bit close code which is

210
00:13:18,240 --> 00:13:21,200
not an error but we can await the

211
00:13:21,200 --> 00:13:23,920
web transport closed promise

212
00:13:23,920 --> 00:13:28,160
with a recent string as well next line

213
00:13:29,120 --> 00:13:30,959
we also had an annual tpac meeting

214
00:13:30,959 --> 00:13:33,360
october 26th slides are available in the

215
00:13:33,360 --> 00:13:34,639
link here

216
00:13:34,639 --> 00:13:36,240
we highlighted different clips for those

217
00:13:36,240 --> 00:13:37,360
coming

218
00:13:37,360 --> 00:13:40,240
from a websocket background and also

219
00:13:40,240 --> 00:13:42,560
from a webrtc background to try to give

220
00:13:42,560 --> 00:13:45,839
a broader overview for people

221
00:13:45,839 --> 00:13:47,760
of web transport

222
00:13:47,760 --> 00:13:50,079
we also highlighted a chrome update uh

223
00:13:50,079 --> 00:13:53,199
they are shipping web transport in m97

224
00:13:53,199 --> 00:13:55,440
uh which is built on the o2 version of

225
00:13:55,440 --> 00:13:57,680
the draft and has support for 8-bit

226
00:13:57,680 --> 00:14:01,600
reset stream code and i really 32-bit

227
00:14:01,600 --> 00:14:03,279
closing error code

228
00:14:03,279 --> 00:14:05,360
no origin which trial is required this

229
00:14:05,360 --> 00:14:06,240
is

230
00:14:06,240 --> 00:14:08,399
fully shipped available in window and

231
00:14:08,399 --> 00:14:11,600
workers uh only secure context

232
00:14:11,600 --> 00:14:13,839
um some things that still need to be

233
00:14:13,839 --> 00:14:17,440
added are you know deeper prioritization

234
00:14:17,440 --> 00:14:20,320
of sending and stats

235
00:14:20,320 --> 00:14:22,720
also the hash based certificates

236
00:14:22,720 --> 00:14:26,079
instead of web pki may be available m98

237
00:14:26,079 --> 00:14:27,279
as we said

238
00:14:27,279 --> 00:14:28,880
uh implementation is fairly mature

239
00:14:28,880 --> 00:14:31,199
covered by web platform tests using an

240
00:14:31,199 --> 00:14:34,560
echo server based on aio quick

241
00:14:34,560 --> 00:14:37,040
also a presentation was made by a member

242
00:14:37,040 --> 00:14:39,680
for multicast for the web

243
00:14:39,680 --> 00:14:40,720
from the

244
00:14:40,720 --> 00:14:43,360
w3c multicast community group with the

245
00:14:43,360 --> 00:14:44,480
demo

246
00:14:44,480 --> 00:14:46,240
and uh

247
00:14:46,240 --> 00:14:47,760
they made a request to the w actually

248
00:14:47,760 --> 00:14:50,240
clarified uh the member made a request

249
00:14:50,240 --> 00:14:53,519
to the w3c to add multicast datagrams as

250
00:14:53,519 --> 00:14:56,079
a use case and so

251
00:14:56,079 --> 00:14:58,240
the w3c is not requesting this but we're

252
00:14:58,240 --> 00:15:00,079
forwarding that request

253
00:15:00,079 --> 00:15:02,160
for consideration by this working group

254
00:15:02,160 --> 00:15:03,760
because it's more

255
00:15:03,760 --> 00:15:07,600
network related looks like

256
00:15:08,399 --> 00:15:10,320
also

257
00:15:10,320 --> 00:15:11,680
an issue was identified around

258
00:15:11,680 --> 00:15:13,440
bi-directional server-based video

259
00:15:13,440 --> 00:15:14,959
conferencing and low-latency video

260
00:15:14,959 --> 00:15:17,920
upload from client to server

261
00:15:17,920 --> 00:15:19,760
so this is an important use case for for

262
00:15:19,760 --> 00:15:21,680
us and

263
00:15:21,680 --> 00:15:23,920
we've seen

264
00:15:23,920 --> 00:15:25,600
some evidence that

265
00:15:25,600 --> 00:15:27,519
better integration between encoder and

266
00:15:27,519 --> 00:15:29,519
congestion control algorithms

267
00:15:29,519 --> 00:15:32,160
can be helpful uh

268
00:15:32,160 --> 00:15:34,320
not sufficient stats

269
00:15:34,320 --> 00:15:37,040
apis are not available today in web

270
00:15:37,040 --> 00:15:40,880
transport to do that well we believe uh

271
00:15:40,880 --> 00:15:42,560
web codex api for average bit rate

272
00:15:42,560 --> 00:15:44,800
result target for instance can results

273
00:15:44,800 --> 00:15:46,160
in overshoots

274
00:15:46,160 --> 00:15:47,600
uh when keyframes are sent and

275
00:15:47,600 --> 00:15:50,639
undershoots for delta frames

276
00:15:50,639 --> 00:15:52,240
uh while an application can always send

277
00:15:52,240 --> 00:15:53,519
less what the condition would they will

278
00:15:53,519 --> 00:15:54,880
allow

279
00:15:54,880 --> 00:15:56,480
um

280
00:15:56,480 --> 00:15:58,399
it's not really easy to send more than

281
00:15:58,399 --> 00:16:01,440
the congestion window permits because uh

282
00:16:01,440 --> 00:16:03,120
what you want to do probably is like

283
00:16:03,120 --> 00:16:04,560
additive increase

284
00:16:04,560 --> 00:16:06,880
to probe for more uh network

285
00:16:06,880 --> 00:16:08,480
availability

286
00:16:08,480 --> 00:16:09,920
uh

287
00:16:09,920 --> 00:16:12,079
however that doesn't allow you to

288
00:16:12,079 --> 00:16:13,839
re-enable dropped layers

289
00:16:13,839 --> 00:16:16,480
which would be a multiplicative increase

290
00:16:16,480 --> 00:16:18,320
so with that application filling in the

291
00:16:18,320 --> 00:16:20,720
congestion window by probing that this

292
00:16:20,720 --> 00:16:23,120
end is gonna practically get stuck in an

293
00:16:23,120 --> 00:16:24,959
artificially low rate

294
00:16:24,959 --> 00:16:26,959
and there's also some conflicts

295
00:16:26,959 --> 00:16:28,639
potential conflicts with other

296
00:16:28,639 --> 00:16:30,880
congestion controls being discussed such

297
00:16:30,880 --> 00:16:32,000
as this

298
00:16:32,000 --> 00:16:34,079
paper and rdp over quick

299
00:16:34,079 --> 00:16:37,600
so the wtc working group is requesting

300
00:16:37,600 --> 00:16:39,920
that the this working group

301
00:16:39,920 --> 00:16:41,519
support this use case because it's an

302
00:16:41,519 --> 00:16:42,880
important use case

303
00:16:42,880 --> 00:16:44,800
and help us develop

304
00:16:44,800 --> 00:16:46,560
measurements

305
00:16:46,560 --> 00:16:49,440
that uh can be used to do this more

306
00:16:49,440 --> 00:16:51,839
effectively

307
00:16:52,480 --> 00:16:53,519
and that's it

308
00:16:53,519 --> 00:16:55,759
thank you okay thank you yanivar i would

309
00:16:55,759 --> 00:16:57,040
note that some of this is being

310
00:16:57,040 --> 00:16:58,800
discussed now on the media over quick

311
00:16:58,800 --> 00:17:00,000
mailing list

312
00:17:00,000 --> 00:17:02,079
and uh with respect to rtp over quick

313
00:17:02,079 --> 00:17:04,400
there will be a discussion in abt core

314
00:17:04,400 --> 00:17:07,119
uh later in the week

315
00:17:07,119 --> 00:17:10,160
okay so we're going to hand it over to

316
00:17:10,160 --> 00:17:12,160
victor to talk about web transport of

317
00:17:12,160 --> 00:17:13,760
http 3.

318
00:17:13,760 --> 00:17:17,000
right there

319
00:17:18,000 --> 00:17:20,319
hello can you hear me

320
00:17:20,319 --> 00:17:21,520
we can

321
00:17:21,520 --> 00:17:23,280
okay so

322
00:17:23,280 --> 00:17:24,559
uh

323
00:17:24,559 --> 00:17:26,559
i'm going to give update over web

324
00:17:26,559 --> 00:17:28,799
transport to reach free as well to go

325
00:17:28,799 --> 00:17:30,559
over some issues

326
00:17:30,559 --> 00:17:33,039
i don't expect this to go

327
00:17:33,039 --> 00:17:35,360
over too long because

328
00:17:35,360 --> 00:17:38,880
most of the issues are either

329
00:17:38,880 --> 00:17:41,840
the easy issues were addressed and the

330
00:17:41,840 --> 00:17:44,400
hard issues require more discussion that

331
00:17:44,400 --> 00:17:46,799
this missing is likely to fit

332
00:17:46,799 --> 00:17:49,200
uh but uh

333
00:17:49,200 --> 00:17:52,160
uh next slide

334
00:17:52,640 --> 00:17:53,440
so

335
00:17:53,440 --> 00:17:55,039
let's start with

336
00:17:55,039 --> 00:17:58,799
there is a new version of draft draft o2

337
00:17:58,799 --> 00:18:02,640
uh it incorporates like

338
00:18:02,640 --> 00:18:06,160
months like six months worth of changes

339
00:18:06,160 --> 00:18:07,600
to the draft

340
00:18:07,600 --> 00:18:10,559
and it includes the clean close of the

341
00:18:10,559 --> 00:18:14,240
entire session reset error codes

342
00:18:14,240 --> 00:18:16,480
and bunch of other stuff

343
00:18:16,480 --> 00:18:19,520
and this is the version that is

344
00:18:19,520 --> 00:18:22,400
uh in its non-pooled incarnation

345
00:18:22,400 --> 00:18:24,880
shipping in chrome 97

346
00:18:24,880 --> 00:18:27,280
uh which means at least we as a club

347
00:18:27,280 --> 00:18:29,120
team would have to

348
00:18:29,120 --> 00:18:32,240
maintain it for quite a while uh

349
00:18:32,240 --> 00:18:33,120
uh

350
00:18:33,120 --> 00:18:37,039
next uh slide

351
00:18:38,320 --> 00:18:41,280
uh so one of the details which

352
00:18:41,280 --> 00:18:42,880
i had to

353
00:18:42,880 --> 00:18:45,520
add because i realized we don't have

354
00:18:45,520 --> 00:18:48,559
anything like that is we added a header

355
00:18:48,559 --> 00:18:49,360
that

356
00:18:49,360 --> 00:18:51,120
indicates the version of the draft

357
00:18:51,120 --> 00:18:52,400
you're using

358
00:18:52,400 --> 00:18:54,799
uh it is intentionally

359
00:18:54,799 --> 00:18:57,600
framed in the draft version and

360
00:18:57,600 --> 00:18:58,960
it will

361
00:18:58,960 --> 00:19:02,559
uh probable so that and we will likely

362
00:19:02,559 --> 00:19:04,880
reshape it or

363
00:19:04,880 --> 00:19:06,559
remove it when we

364
00:19:06,559 --> 00:19:08,640
ship the final version

365
00:19:08,640 --> 00:19:11,919
uh but that this is how it looks uh

366
00:19:11,919 --> 00:19:13,200
right now

367
00:19:13,200 --> 00:19:14,160
uh

368
00:19:14,160 --> 00:19:16,799
next slide

369
00:19:18,080 --> 00:19:21,440
so let's move on to the issues as i said

370
00:19:21,440 --> 00:19:24,160
i didn't put that many issues on the

371
00:19:24,160 --> 00:19:25,280
sides

372
00:19:25,280 --> 00:19:28,000
uh because

373
00:19:28,080 --> 00:19:29,919
most of them are

374
00:19:29,919 --> 00:19:33,360
eyes are closed or uh

375
00:19:33,360 --> 00:19:36,640
require more effort uh

376
00:19:36,640 --> 00:19:39,200
next slide

377
00:19:39,200 --> 00:19:40,480
uh

378
00:19:40,480 --> 00:19:42,480
so the first issue we

379
00:19:42,480 --> 00:19:44,880
kind of discussed in past but never came

380
00:19:44,880 --> 00:19:47,760
to conclusion is how do we

381
00:19:47,760 --> 00:19:50,240
do we need a mechanism for training

382
00:19:50,240 --> 00:19:53,360
sessions gracefully that is the

383
00:19:53,360 --> 00:19:59,360
equivalent of a go away frame for uh

384
00:20:02,080 --> 00:20:04,799
for webtr

385
00:20:04,799 --> 00:20:07,200
uh one sec uh

386
00:20:07,200 --> 00:20:10,159
that is to say do we need anything like

387
00:20:10,159 --> 00:20:12,559
a go away frame and the reason we would

388
00:20:12,559 --> 00:20:16,240
want it for individual session is that

389
00:20:16,240 --> 00:20:18,559
uh

390
00:20:18,559 --> 00:20:21,600
we have similar capabilities and

391
00:20:21,600 --> 00:20:24,080
protocols like age free

392
00:20:24,080 --> 00:20:27,360
uh and uh

393
00:20:27,520 --> 00:20:32,760
people have expressed interest i guess

394
00:20:34,400 --> 00:20:37,280
the people who expressed interest are

395
00:20:37,280 --> 00:20:41,039
look and allen so i wonder if either of

396
00:20:41,039 --> 00:20:44,400
you still thinks that's useful or

397
00:20:44,400 --> 00:20:46,240
can elaborate on what you think about

398
00:20:46,240 --> 00:20:49,840
this uh ellen

399
00:20:50,880 --> 00:20:53,120
yeah this is alan frindell i'm

400
00:20:53,120 --> 00:20:55,679
still inclined to say there is value in

401
00:20:55,679 --> 00:20:57,919
having a go away

402
00:20:57,919 --> 00:20:59,440
capsule well

403
00:20:59,440 --> 00:21:01,039
the capsule may be a loaded term based

404
00:21:01,039 --> 00:21:02,880
on what's going on from yesterday

405
00:21:02,880 --> 00:21:03,679
um

406
00:21:03,679 --> 00:21:05,360
but as long as there's a

407
00:21:05,360 --> 00:21:07,120
structured way to send messages over the

408
00:21:07,120 --> 00:21:08,960
extended connect

409
00:21:08,960 --> 00:21:09,919
uh

410
00:21:09,919 --> 00:21:10,880
stream

411
00:21:10,880 --> 00:21:13,200
then it seems very lightweight to be

412
00:21:13,200 --> 00:21:15,919
able to add a message like go away and

413
00:21:15,919 --> 00:21:18,000
uh we've seen lots of examples of people

414
00:21:18,000 --> 00:21:19,919
building protocols without things like

415
00:21:19,919 --> 00:21:21,360
go away and it

416
00:21:21,360 --> 00:21:22,960
causes a bunch of problems for for

417
00:21:22,960 --> 00:21:24,720
servers that that want to drink

418
00:21:24,720 --> 00:21:27,600
gracefully and anybody who

419
00:21:27,600 --> 00:21:29,120
would want it i mean you can always sort

420
00:21:29,120 --> 00:21:31,440
of build it yourself by adding a control

421
00:21:31,440 --> 00:21:33,440
stream inside your web transport session

422
00:21:33,440 --> 00:21:34,640
and defining your own framing but it

423
00:21:34,640 --> 00:21:35,520
seems

424
00:21:35,520 --> 00:21:36,880
much cheaper

425
00:21:36,880 --> 00:21:39,360
for us to add a mechanism for it

426
00:21:39,360 --> 00:21:42,399
martin will argue with me

427
00:21:42,880 --> 00:21:45,840
martin

428
00:21:47,360 --> 00:21:48,320
uh

429
00:21:48,320 --> 00:21:49,840
in in this case

430
00:21:49,840 --> 00:21:53,200
i'm not sure what the semantics

431
00:21:53,200 --> 00:21:56,000
you would attach to a go away would be

432
00:21:56,000 --> 00:21:57,360
it's gonna depend on the application

433
00:21:57,360 --> 00:22:00,959
that's using the web transport isn't it

434
00:22:03,039 --> 00:22:05,679
okay waiting for audio yeah i i mean

435
00:22:05,679 --> 00:22:06,960
it can

436
00:22:06,960 --> 00:22:09,039
be a signal that just says but it

437
00:22:09,039 --> 00:22:11,280
signals just an intention like i would

438
00:22:11,280 --> 00:22:13,679
like this to go away soon and can

439
00:22:13,679 --> 00:22:16,159
include information like and the last

440
00:22:16,159 --> 00:22:18,400
set of whatever streams i received

441
00:22:18,400 --> 00:22:20,000
anyway uh

442
00:22:20,000 --> 00:22:21,840
you know could be identified by these

443
00:22:21,840 --> 00:22:23,120
numbers

444
00:22:23,120 --> 00:22:24,000
and

445
00:22:24,000 --> 00:22:26,480
what the semantics are you're right are

446
00:22:26,480 --> 00:22:28,000
sort of dependent on whatever protocol

447
00:22:28,000 --> 00:22:30,000
is running over top but the

448
00:22:30,000 --> 00:22:31,440
i think the high level signal is still

449
00:22:31,440 --> 00:22:33,039
valuable

450
00:22:33,039 --> 00:22:34,159
yeah i

451
00:22:34,159 --> 00:22:35,679
i guess what i was getting at there was

452
00:22:35,679 --> 00:22:37,760
if there is a generic signal then it

453
00:22:37,760 --> 00:22:38,880
would

454
00:22:38,880 --> 00:22:40,000
wouldn't really make a whole lot of

455
00:22:40,000 --> 00:22:42,400
sense to attach anything with to it

456
00:22:42,400 --> 00:22:43,679
because

457
00:22:43,679 --> 00:22:45,600
the the concepts that an application

458
00:22:45,600 --> 00:22:46,720
uses the

459
00:22:46,720 --> 00:22:49,200
sort of granularity of its stream usage

460
00:22:49,200 --> 00:22:51,440
and datagram usage is

461
00:22:51,440 --> 00:22:52,840
unknown and

462
00:22:52,840 --> 00:22:55,360
unknowable i agree with what you're

463
00:22:55,360 --> 00:22:57,280
saying i think

464
00:22:57,280 --> 00:22:59,280
the information you can include is

465
00:22:59,280 --> 00:23:01,760
information that is exposed

466
00:23:01,760 --> 00:23:02,799
at the

467
00:23:02,799 --> 00:23:05,039
to the web transport which is like i i

468
00:23:05,039 --> 00:23:07,520
have seen these stream identifiers

469
00:23:07,520 --> 00:23:10,320
like they have at least been

470
00:23:10,320 --> 00:23:12,799
whatever like pass to the application

471
00:23:12,799 --> 00:23:14,159
uh

472
00:23:14,159 --> 00:23:16,240
but everything else i guess it's

473
00:23:16,240 --> 00:23:17,919
certainly possible the application has

474
00:23:17,919 --> 00:23:20,080
higher level semantics and that

475
00:23:20,080 --> 00:23:21,679
that it would need to convey beyond

476
00:23:21,679 --> 00:23:23,120
what's in the transport in which case

477
00:23:23,120 --> 00:23:24,720
they have to write their own

478
00:23:24,720 --> 00:23:26,080
frame anyway

479
00:23:26,080 --> 00:23:28,320
um

480
00:23:28,320 --> 00:23:30,960
okay yep that makes sense

481
00:23:30,960 --> 00:23:32,000
another

482
00:23:32,000 --> 00:23:34,159
possibility is

483
00:23:34,159 --> 00:23:35,120
that

484
00:23:35,120 --> 00:23:37,679
i'm not sure if we've defined

485
00:23:37,679 --> 00:23:40,480
on the connect stream is it okay

486
00:23:40,480 --> 00:23:41,840
to

487
00:23:41,840 --> 00:23:44,640
have unknown capsules

488
00:23:44,640 --> 00:23:45,679
then

489
00:23:45,679 --> 00:23:47,919
people could use that connect stream as

490
00:23:47,919 --> 00:23:51,760
a control stream or is the messages are

491
00:23:51,760 --> 00:23:54,080
the messages on the connect stream

492
00:23:54,080 --> 00:23:56,320
only the ones defined in the standard

493
00:23:56,320 --> 00:23:57,120
and

494
00:23:57,120 --> 00:23:58,640
if you want to send any other messages

495
00:23:58,640 --> 00:24:00,559
which are session level messages

496
00:24:00,559 --> 00:24:03,200
they have to go over some stream

497
00:24:03,200 --> 00:24:06,880
that your application controls

498
00:24:08,720 --> 00:24:10,240
i guess to

499
00:24:10,240 --> 00:24:12,400
the later comment

500
00:24:12,400 --> 00:24:15,440
uh about messages i think that control

501
00:24:15,440 --> 00:24:17,679
that capsules are

502
00:24:17,679 --> 00:24:19,360
to some extent

503
00:24:19,360 --> 00:24:21,840
not controlled by application because

504
00:24:21,840 --> 00:24:24,720
they're in some in some sense privileged

505
00:24:24,720 --> 00:24:26,400
as in uh

506
00:24:26,400 --> 00:24:28,480
we assume they come from the browser and

507
00:24:28,480 --> 00:24:30,640
not from the web application

508
00:24:30,640 --> 00:24:33,120
uh in that sense uh we

509
00:24:33,120 --> 00:24:35,919
can't really give you the full control

510
00:24:35,919 --> 00:24:39,679
uh but also in general my intuition is

511
00:24:39,679 --> 00:24:40,720
uh

512
00:24:40,720 --> 00:24:44,480
we should not add new concepts which are

513
00:24:44,480 --> 00:24:47,039
already trivially achievable with the

514
00:24:47,039 --> 00:24:49,039
apis we give

515
00:24:49,039 --> 00:24:52,080
uh because it's just like adds multiple

516
00:24:52,080 --> 00:24:53,840
ways to do things

517
00:24:53,840 --> 00:24:54,640
that

518
00:24:54,640 --> 00:24:58,240
are somewhat redundant

519
00:24:58,240 --> 00:25:01,520
i would i don't i don't know that how

520
00:25:01,520 --> 00:25:04,000
trivial it is or if it's you know

521
00:25:04,000 --> 00:25:05,520
everyone there because there may be

522
00:25:05,520 --> 00:25:07,760
applications that don't use or need a

523
00:25:07,760 --> 00:25:10,159
control stream i don't know and so

524
00:25:10,159 --> 00:25:11,279
and requiring

525
00:25:11,279 --> 00:25:12,960
every application to do it i guess we

526
00:25:12,960 --> 00:25:14,320
had this discussion i don't know four

527
00:25:14,320 --> 00:25:15,840
years ago and quick

528
00:25:15,840 --> 00:25:17,679
when someone tried to add go away

529
00:25:17,679 --> 00:25:19,120
originally go away it was a quick frame

530
00:25:19,120 --> 00:25:20,400
and then we said no make every

531
00:25:20,400 --> 00:25:21,919
application do it

532
00:25:21,919 --> 00:25:24,159
uh and now we have so

533
00:25:24,159 --> 00:25:25,760
um

534
00:25:25,760 --> 00:25:27,679
i guess maybe the same principles apply

535
00:25:27,679 --> 00:25:30,000
here i don't know i still think the

536
00:25:30,000 --> 00:25:32,240
like signaling the intent and

537
00:25:32,240 --> 00:25:34,080
capturing transport level information to

538
00:25:34,080 --> 00:25:35,279
the other side about what's been

539
00:25:35,279 --> 00:25:37,039
received is

540
00:25:37,039 --> 00:25:39,600
uh a building block that can be

541
00:25:39,600 --> 00:25:42,320
reused and it's low cost

542
00:25:42,320 --> 00:25:43,600
but i don't know i don't need to die on

543
00:25:43,600 --> 00:25:45,120
this hill either if people feel strongly

544
00:25:45,120 --> 00:25:48,399
that it's the other way

545
00:25:48,559 --> 00:25:53,360
uh all right thank you uh lucas

546
00:25:53,360 --> 00:25:54,320
hello

547
00:25:54,320 --> 00:25:56,720
um so i i think i was agreeing with

548
00:25:56,720 --> 00:25:58,720
martin's earlier point that

549
00:25:58,720 --> 00:26:01,600
the value of this uh

550
00:26:01,600 --> 00:26:03,679
thing go away whatever you want to call

551
00:26:03,679 --> 00:26:05,360
it depends on what information it

552
00:26:05,360 --> 00:26:08,159
includes and what the receiver would act

553
00:26:08,159 --> 00:26:11,039
upon so i think i don't understand

554
00:26:11,039 --> 00:26:14,000
really what does ads above http 3 go

555
00:26:14,000 --> 00:26:14,880
away

556
00:26:14,880 --> 00:26:17,039
um and what it would include that's

557
00:26:17,039 --> 00:26:19,120
generic enough that anything else that

558
00:26:19,120 --> 00:26:22,240
the web transport layer would be able to

559
00:26:22,240 --> 00:26:24,960
read that and act on it um so maybe

560
00:26:24,960 --> 00:26:26,720
there is if someone has a proposal but

561
00:26:26,720 --> 00:26:27,760
right now

562
00:26:27,760 --> 00:26:30,000
it kind of seems like impossible to

563
00:26:30,000 --> 00:26:32,240
define and

564
00:26:32,240 --> 00:26:33,840
implement in a way that would work for

565
00:26:33,840 --> 00:26:37,639
everything to me

566
00:26:42,320 --> 00:26:45,600
uh eric negren

567
00:26:47,840 --> 00:26:50,559
i guess the benefit of doing this in the

568
00:26:50,559 --> 00:26:52,400
um at this layer

569
00:26:52,400 --> 00:26:55,279
would be um if there was an intermediate

570
00:26:55,279 --> 00:26:57,440
that wanted to go and and send that um

571
00:26:57,440 --> 00:26:59,279
send it to both of the endpoints but

572
00:26:59,279 --> 00:27:01,120
without knowing the inner protocol the

573
00:27:01,120 --> 00:27:02,799
endpoints were using such as like if you

574
00:27:02,799 --> 00:27:05,840
had a cdn that implemented web transport

575
00:27:05,840 --> 00:27:08,640
the alternative may be

576
00:27:08,640 --> 00:27:10,559
on the api side

577
00:27:10,559 --> 00:27:14,159
um if there if the api exposed up the

578
00:27:14,159 --> 00:27:15,039
the

579
00:27:15,039 --> 00:27:17,120
h2 or h3 go away

580
00:27:17,120 --> 00:27:18,480
as part of the

581
00:27:18,480 --> 00:27:20,559
the web transport api but i'm not sure

582
00:27:20,559 --> 00:27:22,240
which would which is going to be cleaner

583
00:27:22,240 --> 00:27:23,279
from a

584
00:27:23,279 --> 00:27:26,480
a just only keep it at the h2h3 layer

585
00:27:26,480 --> 00:27:29,760
or also have a way to send

586
00:27:29,760 --> 00:27:31,440
go away through a capsule or capsule

587
00:27:31,440 --> 00:27:34,440
equivalent

588
00:27:37,600 --> 00:27:38,399
uh

589
00:27:38,399 --> 00:27:39,600
alan

590
00:27:39,600 --> 00:27:41,840
yeah the i think i now

591
00:27:41,840 --> 00:27:43,600
the context is like paging in after

592
00:27:43,600 --> 00:27:45,279
months and it being four in the morning

593
00:27:45,279 --> 00:27:46,559
um

594
00:27:46,559 --> 00:27:48,240
the intermediary case i think is the one

595
00:27:48,240 --> 00:27:51,279
where it's useful because you may have

596
00:27:51,279 --> 00:27:53,520
first of all the intermediary goal

597
00:27:53,520 --> 00:27:55,200
that is sort of proxying web transport

598
00:27:55,200 --> 00:27:56,640
without understanding the underlying

599
00:27:56,640 --> 00:27:59,120
protocol and it wants to go away and it

600
00:27:59,120 --> 00:28:01,120
needs to tell both endpoint like it's

601
00:28:01,120 --> 00:28:02,720
got a web transport session going in

602
00:28:02,720 --> 00:28:05,039
each direction and it wants to tell both

603
00:28:05,039 --> 00:28:06,399
of them that it's going away and it may

604
00:28:06,399 --> 00:28:08,480
be using pooling so

605
00:28:08,480 --> 00:28:11,120
i guess in that case the

606
00:28:11,120 --> 00:28:13,360
http 3 level go away

607
00:28:13,360 --> 00:28:15,039
is probably sufficient but there may

608
00:28:15,039 --> 00:28:16,960
also be cases where

609
00:28:16,960 --> 00:28:19,360
somebody wants to make a web there are

610
00:28:19,360 --> 00:28:20,880
pool web transport sessions and i want

611
00:28:20,880 --> 00:28:22,640
one session to go away but not other

612
00:28:22,640 --> 00:28:24,559
sessions or other http requests that are

613
00:28:24,559 --> 00:28:25,840
on the same

614
00:28:25,840 --> 00:28:27,600
connection which is why it would be a

615
00:28:27,600 --> 00:28:29,440
session specific message rather than a

616
00:28:29,440 --> 00:28:32,720
connection specific message

617
00:28:32,720 --> 00:28:33,600
uh

618
00:28:33,600 --> 00:28:37,039
all right uh i think my main question is

619
00:28:37,039 --> 00:28:39,039
think we

620
00:28:39,039 --> 00:28:41,120
it sounds like we need a specific

621
00:28:41,120 --> 00:28:43,600
proposal that explains the use cases

622
00:28:43,600 --> 00:28:45,600
that this is for

623
00:28:45,600 --> 00:28:48,480
and my question would be

624
00:28:48,480 --> 00:28:51,440
alan would you volunteer to write

625
00:28:51,440 --> 00:28:53,840
a pr or a proposal

626
00:28:53,840 --> 00:28:54,880
for

627
00:28:54,880 --> 00:28:57,840
how to handle go aways in web transport

628
00:28:57,840 --> 00:29:00,080
over http free

629
00:29:00,080 --> 00:29:02,799
uh yeah i can write a pr uh and we can

630
00:29:02,799 --> 00:29:03,760
people can

631
00:29:03,760 --> 00:29:06,080
argue about it we can we can repeat our

632
00:29:06,080 --> 00:29:08,399
arguments here on the pr

633
00:29:08,399 --> 00:29:09,679
uh

634
00:29:09,679 --> 00:29:13,120
all right uh uh uh

635
00:29:13,120 --> 00:29:14,080
coots

636
00:29:14,080 --> 00:29:16,240
either of the chairs recorded on the

637
00:29:16,240 --> 00:29:19,919
issue while i moved to the next slide

638
00:29:19,919 --> 00:29:21,760
or someone

639
00:29:21,760 --> 00:29:23,360
uh

640
00:29:23,360 --> 00:29:25,918
next slide

641
00:29:26,880 --> 00:29:28,960
go ahead thank you david

642
00:29:28,960 --> 00:29:29,919
uh

643
00:29:29,919 --> 00:29:33,919
now here is an interesting issue that we

644
00:29:33,919 --> 00:29:38,559
uh have historically just punted until

645
00:29:38,559 --> 00:29:40,399
later and

646
00:29:40,399 --> 00:29:43,279
the later is kind of approaching

647
00:29:43,279 --> 00:29:44,960
uh and

648
00:29:44,960 --> 00:29:47,440
that is at some point we agreed that it

649
00:29:47,440 --> 00:29:49,679
would be useful to support pulling of

650
00:29:49,679 --> 00:29:52,000
multiple web transport sections

651
00:29:52,000 --> 00:29:53,039
or

652
00:29:53,039 --> 00:29:54,880
of with

653
00:29:54,880 --> 00:29:57,919
each other and with regular http free

654
00:29:57,919 --> 00:29:59,200
traffic

655
00:29:59,200 --> 00:30:02,799
uh and in order to do that we need to

656
00:30:02,799 --> 00:30:04,799
have some understanding

657
00:30:04,799 --> 00:30:08,799
of how to do resource management namely

658
00:30:08,799 --> 00:30:10,880
how do we limit

659
00:30:10,880 --> 00:30:11,840
namely

660
00:30:11,840 --> 00:30:14,399
quick provides flow control for

661
00:30:14,399 --> 00:30:16,559
all of the resources

662
00:30:16,559 --> 00:30:20,240
but the flow control is

663
00:30:20,240 --> 00:30:23,919
it's not it's connection global and the

664
00:30:23,919 --> 00:30:27,760
pulling is between sessions that are

665
00:30:27,760 --> 00:30:30,880
uh in some sense not related to each

666
00:30:30,880 --> 00:30:32,000
other

667
00:30:32,000 --> 00:30:35,760
and in ideal scenario we

668
00:30:35,760 --> 00:30:39,039
would strongly prefer to isolate the

669
00:30:39,039 --> 00:30:41,440
sessions in a sense that even if one

670
00:30:41,440 --> 00:30:42,559
session

671
00:30:42,559 --> 00:30:44,640
uh

672
00:30:44,640 --> 00:30:47,600
misbehaves and acts in a way that

673
00:30:47,600 --> 00:30:49,919
starves itself as a connection it does

674
00:30:49,919 --> 00:30:53,279
not serve others of resources

675
00:30:53,279 --> 00:30:54,720
uh

676
00:30:54,720 --> 00:30:56,720
and the question is

677
00:30:56,720 --> 00:30:59,840
how do we do that

678
00:30:59,840 --> 00:31:02,480
and currently there are no specific

679
00:31:02,480 --> 00:31:06,320
proposals in uh

680
00:31:07,600 --> 00:31:11,918
at least the ones i'm aware of so i

681
00:31:12,640 --> 00:31:15,279
was wondering if we can at least start

682
00:31:15,279 --> 00:31:18,880
discussion here and i want to do people

683
00:31:18,880 --> 00:31:24,279
have opinions or ideas about this

684
00:31:38,559 --> 00:31:41,279
uh martin

685
00:31:42,720 --> 00:31:45,039
for someone to say something okay

686
00:31:45,039 --> 00:31:47,279
so um last time we talked about this

687
00:31:47,279 --> 00:31:49,519
you raised the point that

688
00:31:49,519 --> 00:31:52,799
we essentially give sites the ability to

689
00:31:52,799 --> 00:31:54,080
use fetch

690
00:31:54,080 --> 00:31:56,159
to consume all of the available

691
00:31:56,159 --> 00:31:58,000
bi-directional stream resources for a

692
00:31:58,000 --> 00:31:58,960
connection

693
00:31:58,960 --> 00:32:00,720
sort of almost

694
00:32:00,720 --> 00:32:02,480
without constraint

695
00:32:02,480 --> 00:32:03,679
and we sort of assume that there's

696
00:32:03,679 --> 00:32:05,840
enough resources there that they can

697
00:32:05,840 --> 00:32:08,640
they can do that if they so choose

698
00:32:08,640 --> 00:32:10,240
and

699
00:32:10,240 --> 00:32:11,840
the more that i think about this the

700
00:32:11,840 --> 00:32:13,120
more that i think that that sort of

701
00:32:13,120 --> 00:32:15,840
class a fair attitude toward this thing

702
00:32:15,840 --> 00:32:16,640
might

703
00:32:16,640 --> 00:32:17,919
actually be

704
00:32:17,919 --> 00:32:20,000
the best solution at least for the

705
00:32:20,000 --> 00:32:22,000
meantime

706
00:32:22,000 --> 00:32:23,840
it doesn't mean that we might not choose

707
00:32:23,840 --> 00:32:27,120
later to do something but

708
00:32:27,120 --> 00:32:29,519
maybe maybe we can just do nothing for

709
00:32:29,519 --> 00:32:31,919
the moment

710
00:32:34,000 --> 00:32:35,200
that is

711
00:32:35,200 --> 00:32:37,519
that is definitely a possible approach

712
00:32:37,519 --> 00:32:39,360
we can take

713
00:32:39,360 --> 00:32:42,840
uh and

714
00:32:44,880 --> 00:32:45,840
yes

715
00:32:45,840 --> 00:32:48,159
the cases i'm afraid are

716
00:32:48,159 --> 00:32:50,880
the pathological interactions that are

717
00:32:50,880 --> 00:32:53,760
novel to web transport for instance your

718
00:32:53,760 --> 00:32:56,159
web transport opens so many streams that

719
00:32:56,159 --> 00:32:59,440
you cannot fetch at all

720
00:33:01,120 --> 00:33:03,360
yeah that seems entirely possible

721
00:33:03,360 --> 00:33:04,880
particularly given some of the patterns

722
00:33:04,880 --> 00:33:05,919
that

723
00:33:05,919 --> 00:33:08,960
that yanivara shared with

724
00:33:08,960 --> 00:33:12,159
uh us it is not entirely clear to me

725
00:33:12,159 --> 00:33:14,159
that such patterns would be possible

726
00:33:14,159 --> 00:33:16,720
with fetch because fetch is a

727
00:33:16,720 --> 00:33:19,519
more complicated structure and it has

728
00:33:19,519 --> 00:33:22,080
its own limitations and

729
00:33:22,080 --> 00:33:23,440
things

730
00:33:23,440 --> 00:33:25,440
oh don't don't make claims like that

731
00:33:25,440 --> 00:33:28,799
because that's just a challenge

732
00:33:28,880 --> 00:33:30,080
yes

733
00:33:30,080 --> 00:33:33,200
uh well i am not challenging to

734
00:33:33,200 --> 00:33:36,080
intentionally do that i am saying

735
00:33:36,080 --> 00:33:38,559
i'm talking about likelihood of that

736
00:33:38,559 --> 00:33:41,760
occurring unintentionally

737
00:33:41,760 --> 00:33:43,440
right

738
00:33:43,440 --> 00:33:44,640
uh

739
00:33:44,640 --> 00:33:47,120
spencer

740
00:33:47,919 --> 00:33:49,440
thank you and i was actually just

741
00:33:49,440 --> 00:33:53,039
following up with uh martin

742
00:33:53,039 --> 00:33:54,960
do you do you think do you think that

743
00:33:54,960 --> 00:33:58,399
the philosophy fair attitude would be

744
00:33:58,399 --> 00:34:00,240
easier to

745
00:34:00,240 --> 00:34:01,279
add

746
00:34:01,279 --> 00:34:04,000
or to take another ad later or to take

747
00:34:04,000 --> 00:34:07,399
away later

748
00:34:09,839 --> 00:34:11,119
i don't

749
00:34:11,119 --> 00:34:13,918
think it's particularly difficult to add

750
00:34:13,918 --> 00:34:15,760
some controls

751
00:34:15,760 --> 00:34:17,520
i think it's pretty difficult to add

752
00:34:17,520 --> 00:34:19,280
them in such a way that they would be

753
00:34:19,280 --> 00:34:21,839
reliable and such that you could depend

754
00:34:21,839 --> 00:34:23,760
on them being there and depend on them

755
00:34:23,760 --> 00:34:24,960
being effective

756
00:34:24,960 --> 00:34:26,320
so if there's something that was truly

757
00:34:26,320 --> 00:34:28,000
bad going on

758
00:34:28,000 --> 00:34:30,560
and things were breaking i don't think

759
00:34:30,560 --> 00:34:32,960
you could rely entirely on

760
00:34:32,960 --> 00:34:35,599
whatever mechanism that you introduced

761
00:34:35,599 --> 00:34:36,800
but that's just

762
00:34:36,800 --> 00:34:38,320
guessing i'd have to sort of think about

763
00:34:38,320 --> 00:34:40,399
what sort of system that you might want

764
00:34:40,399 --> 00:34:41,839
to introduce

765
00:34:41,839 --> 00:34:43,359
i've got no way no good ideas at the

766
00:34:43,359 --> 00:34:45,040
moment unfortunately

767
00:34:45,040 --> 00:34:48,320
okay thank you

768
00:34:48,320 --> 00:34:49,918
oh

769
00:34:49,918 --> 00:34:52,560
oh look us

770
00:34:52,560 --> 00:34:54,399
hello um

771
00:34:54,399 --> 00:34:56,239
i was just reading up on the issue uh

772
00:34:56,239 --> 00:34:57,760
which is like a year old so my memory's

773
00:34:57,760 --> 00:35:00,800
a bit hazy but um it kind of seems a bit

774
00:35:00,800 --> 00:35:02,640
similar to a discussion we are having a

775
00:35:02,640 --> 00:35:04,640
few weeks ago on the

776
00:35:04,640 --> 00:35:07,200
http priorities draft

777
00:35:07,200 --> 00:35:09,359
unrelated to priorities but around the

778
00:35:09,359 --> 00:35:12,000
ability for endpoints to detect how many

779
00:35:12,000 --> 00:35:14,640
concurrent streams they might be able to

780
00:35:14,640 --> 00:35:17,119
open or that they gave to the peer to be

781
00:35:17,119 --> 00:35:19,359
able to open um some of that hinges on

782
00:35:19,359 --> 00:35:20,800
the quick

783
00:35:20,800 --> 00:35:24,560
api that is exposed up to applications

784
00:35:24,560 --> 00:35:26,800
and that you know you should assume that

785
00:35:26,800 --> 00:35:28,320
the api gives you all the information

786
00:35:28,320 --> 00:35:30,240
you need to know but that assumption

787
00:35:30,240 --> 00:35:32,160
maybe doesn't hold for different

788
00:35:32,160 --> 00:35:33,680
implementations

789
00:35:33,680 --> 00:35:34,400
so

790
00:35:34,400 --> 00:35:36,800
i think like if if if we look at it from

791
00:35:36,800 --> 00:35:38,240
a perspective of trying to avoid a

792
00:35:38,240 --> 00:35:40,640
client consuming all of the concurrent

793
00:35:40,640 --> 00:35:42,960
um request streams or bidirectional

794
00:35:42,960 --> 00:35:45,280
streams it could open um

795
00:35:45,280 --> 00:35:48,400
like i i honestly i don't know if if we

796
00:35:48,400 --> 00:35:50,320
can assume that that information is

797
00:35:50,320 --> 00:35:53,280
available directly to clients

798
00:35:53,280 --> 00:35:54,560
but that

799
00:35:54,560 --> 00:35:57,599
if if it was in some way that there

800
00:35:57,599 --> 00:35:59,760
seems to be to me an api issue not a

801
00:35:59,760 --> 00:36:03,119
protocol one such as you could

802
00:36:03,119 --> 00:36:05,119
say at the the

803
00:36:05,119 --> 00:36:08,000
browser level just ask for a share of

804
00:36:08,000 --> 00:36:10,240
the available connection resource for

805
00:36:10,240 --> 00:36:12,079
concurrent streams that the server would

806
00:36:12,079 --> 00:36:13,520
let you open because you're not going to

807
00:36:13,520 --> 00:36:15,440
know that information until you create

808
00:36:15,440 --> 00:36:17,839
the connection uh and that could vary by

809
00:36:17,839 --> 00:36:19,359
server so

810
00:36:19,359 --> 00:36:21,280
i i i

811
00:36:21,280 --> 00:36:22,720
i don't think there's much we could do

812
00:36:22,720 --> 00:36:24,800
here but i could be wrong and i'm happy

813
00:36:24,800 --> 00:36:27,839
to be wrong

814
00:36:27,920 --> 00:36:32,599
thank you lucas uh your attacker

815
00:36:40,320 --> 00:36:43,119
can you hear me

816
00:36:43,520 --> 00:36:46,480
oh yes

817
00:36:46,720 --> 00:36:48,240
uh

818
00:36:48,240 --> 00:36:49,839
so that

819
00:36:49,839 --> 00:36:53,760
i dare you the memory consumed

820
00:36:53,760 --> 00:36:56,560
in the connection should

821
00:36:56,560 --> 00:37:00,079
be a function of the boundaries

822
00:37:00,079 --> 00:37:01,920
so that

823
00:37:01,920 --> 00:37:06,800
even if we have many many streams

824
00:37:07,040 --> 00:37:08,560
the

825
00:37:08,560 --> 00:37:09,520
bytes

826
00:37:09,520 --> 00:37:12,720
transmitted per second

827
00:37:12,720 --> 00:37:15,760
shouldn't increase by creating more

828
00:37:15,760 --> 00:37:18,079
streams so

829
00:37:18,079 --> 00:37:21,020
with ideal implementation

830
00:37:21,020 --> 00:37:23,200
[Music]

831
00:37:23,200 --> 00:37:26,720
the constant memory should be enough is

832
00:37:26,720 --> 00:37:29,359
that right

833
00:37:29,359 --> 00:37:30,320
uh

834
00:37:30,320 --> 00:37:33,520
that is to some extent correct but there

835
00:37:33,520 --> 00:37:37,599
is also the issue of not just

836
00:37:37,599 --> 00:37:39,040
limiting

837
00:37:39,040 --> 00:37:42,640
the buffer size but also the

838
00:37:42,640 --> 00:37:46,480
total number of streams

839
00:37:47,119 --> 00:37:48,320
uh so

840
00:37:48,320 --> 00:37:50,880
my in fact this is like more of my main

841
00:37:50,880 --> 00:37:53,920
concerns is that their quick has

842
00:37:53,920 --> 00:37:56,320
some limit of how many streams you can

843
00:37:56,320 --> 00:37:59,200
open on the same http free connection

844
00:37:59,200 --> 00:38:02,640
and those that limit is shared between

845
00:38:02,640 --> 00:38:05,599
regular fetch requests and web transport

846
00:38:05,599 --> 00:38:06,560
in

847
00:38:06,560 --> 00:38:09,520
the situation when there is pooling so

848
00:38:09,520 --> 00:38:10,720
uh

849
00:38:10,720 --> 00:38:13,839
the problem here is how do we make sure

850
00:38:13,839 --> 00:38:15,040
that

851
00:38:15,040 --> 00:38:17,359
we don't open too many web transfers so

852
00:38:17,359 --> 00:38:21,200
we are incapable of doing fetch and

853
00:38:21,200 --> 00:38:24,000
vice versa

854
00:38:28,079 --> 00:38:29,119
thank you

855
00:38:29,119 --> 00:38:30,000
uh

856
00:38:30,000 --> 00:38:33,000
dragana

857
00:38:34,000 --> 00:38:36,240
hi you hear me

858
00:38:36,240 --> 00:38:37,520
do you hear me yes

859
00:38:37,520 --> 00:38:40,320
yeah okay sorry i

860
00:38:40,320 --> 00:38:42,400
haven't used that this often um

861
00:38:42,400 --> 00:38:44,240
i'm afraid of uh

862
00:38:44,240 --> 00:38:45,440
different implementation having

863
00:38:45,440 --> 00:38:47,920
different limits and this really being

864
00:38:47,920 --> 00:38:50,800
the timing issue that

865
00:38:50,800 --> 00:38:52,160
pages opening and there is a lot of

866
00:38:52,160 --> 00:38:54,640
fetches and then they cannot uh open the

867
00:38:54,640 --> 00:38:57,440
streams and that's this is like timing

868
00:38:57,440 --> 00:38:59,359
dependent that uh

869
00:38:59,359 --> 00:39:01,520
for application developer can be pretty

870
00:39:01,520 --> 00:39:03,280
tricky to like

871
00:39:03,280 --> 00:39:07,359
notice the problems uh by testing

872
00:39:07,359 --> 00:39:09,920
uh i i'm wondering if this is like going

873
00:39:09,920 --> 00:39:11,760
far away uh like in the different

874
00:39:11,760 --> 00:39:14,800
direction i'm wondering of having the

875
00:39:14,800 --> 00:39:16,640
um

876
00:39:16,640 --> 00:39:19,839
guarantees about the limits first

877
00:39:19,839 --> 00:39:22,240
rap transport session

878
00:39:22,240 --> 00:39:26,079
to make this um debuggable

879
00:39:26,079 --> 00:39:27,839
but this is like uh opening the

880
00:39:27,839 --> 00:39:30,640
different kind of uh issues

881
00:39:30,640 --> 00:39:33,520
uh around that

882
00:39:36,560 --> 00:39:37,359
uh

883
00:39:37,359 --> 00:39:41,119
i do some so i agree that we should have

884
00:39:41,119 --> 00:39:44,960
sub give developers some idea of what

885
00:39:44,960 --> 00:39:46,320
their

886
00:39:46,320 --> 00:39:48,880
they should at least expect the browser

887
00:39:48,880 --> 00:39:51,040
to support because

888
00:39:51,040 --> 00:39:53,920
uh if my web transport only supports

889
00:39:53,920 --> 00:39:55,680
four concurrent streams that's well

890
00:39:55,680 --> 00:39:58,079
that's a very different situation if it

891
00:39:58,079 --> 00:40:00,400
supports 100 and that would

892
00:40:00,400 --> 00:40:02,720
to some extent the fact even the

893
00:40:02,720 --> 00:40:06,000
fundamentally how i design protocol

894
00:40:06,000 --> 00:40:06,800
uh

895
00:40:06,800 --> 00:40:09,040
so

896
00:40:09,599 --> 00:40:11,920
yeah i'm just wondering about the

897
00:40:11,920 --> 00:40:14,400
pooling uh behaviors different different

898
00:40:14,400 --> 00:40:16,319
browsing genes that there are

899
00:40:16,319 --> 00:40:18,240
some of them pull more that some amber

900
00:40:18,240 --> 00:40:20,720
moon less than if you open two three

901
00:40:20,720 --> 00:40:22,880
taps that in the end that transfer

902
00:40:22,880 --> 00:40:24,880
doesn't work because they are completely

903
00:40:24,880 --> 00:40:26,319
to the same

904
00:40:26,319 --> 00:40:30,079
but this is like a different

905
00:40:30,480 --> 00:40:31,280
yeah

906
00:40:31,280 --> 00:40:32,319
okay

907
00:40:32,319 --> 00:40:34,720
i see thank you

908
00:40:34,720 --> 00:40:37,720
martin

909
00:40:40,000 --> 00:40:42,400
point here is probably one that we need

910
00:40:42,400 --> 00:40:43,280
to

911
00:40:43,280 --> 00:40:45,520
pay a little bit more attention to

912
00:40:45,520 --> 00:40:46,400
um

913
00:40:46,400 --> 00:40:48,640
when i suggested we just sort of

914
00:40:48,640 --> 00:40:49,920
do nothing

915
00:40:49,920 --> 00:40:52,160
i hadn't sort of internalized that

916
00:40:52,160 --> 00:40:53,680
problem

917
00:40:53,680 --> 00:40:54,960
but

918
00:40:54,960 --> 00:40:56,800
you can imagine how easy it would be to

919
00:40:56,800 --> 00:40:58,720
use up all of the streams

920
00:40:58,720 --> 00:41:00,880
it's just a for loop with a create

921
00:41:00,880 --> 00:41:04,000
stream call right and you've used them

922
00:41:04,000 --> 00:41:05,200
all up

923
00:41:05,200 --> 00:41:08,000
the streams are easy to create but

924
00:41:08,000 --> 00:41:09,839
there's no guarantees about the number

925
00:41:09,839 --> 00:41:11,440
of concurrent streams that will be

926
00:41:11,440 --> 00:41:13,520
available to you at any time quick

927
00:41:13,520 --> 00:41:14,960
doesn't provide

928
00:41:14,960 --> 00:41:18,319
any any real guarantees http 2 has this

929
00:41:18,319 --> 00:41:20,800
sort of you you can have 100 concurrent

930
00:41:20,800 --> 00:41:21,920
streams or

931
00:41:21,920 --> 00:41:23,760
um whatever the number happens to be and

932
00:41:23,760 --> 00:41:26,000
you know what that number will be but

933
00:41:26,000 --> 00:41:27,040
quick

934
00:41:27,040 --> 00:41:29,359
you you only get new streams when the

935
00:41:29,359 --> 00:41:31,200
other side decides that

936
00:41:31,200 --> 00:41:33,040
it wants to give you something

937
00:41:33,040 --> 00:41:34,400
and it could

938
00:41:34,400 --> 00:41:36,560
reduce the number of concurrent streams

939
00:41:36,560 --> 00:41:38,720
so

940
00:41:39,040 --> 00:41:41,200
i think there's there's

941
00:41:41,200 --> 00:41:43,680
minimum guarantees and i think there

942
00:41:43,680 --> 00:41:46,480
probably needs to be some sort of cap

943
00:41:46,480 --> 00:41:47,760
the more that i think about this is

944
00:41:47,760 --> 00:41:49,839
we've discussed it and it's coming back

945
00:41:49,839 --> 00:41:51,920
in

946
00:41:55,839 --> 00:41:57,119
i see

947
00:41:57,119 --> 00:42:01,119
so it sounds like

948
00:42:01,119 --> 00:42:02,400
we have

949
00:42:02,400 --> 00:42:03,920
some ideas

950
00:42:03,920 --> 00:42:06,160
on how this should work

951
00:42:06,160 --> 00:42:08,960
uh and uh

952
00:42:08,960 --> 00:42:11,119
i think that we should discuss the rest

953
00:42:11,119 --> 00:42:13,680
on the mailing list because uh

954
00:42:13,680 --> 00:42:14,960
i think we've

955
00:42:14,960 --> 00:42:18,079
spent already like 20 minutes or so

956
00:42:18,079 --> 00:42:19,760
talking about this

957
00:42:19,760 --> 00:42:22,240
uh but

958
00:42:25,359 --> 00:42:27,440
yes this is definitely needs further

959
00:42:27,440 --> 00:42:31,119
discussion and probably mailing list uh

960
00:42:31,119 --> 00:42:34,079
thanks for free everyone this was very

961
00:42:34,079 --> 00:42:35,680
valuable

962
00:42:35,680 --> 00:42:39,118
uh next slide

963
00:42:40,079 --> 00:42:41,359
oh

964
00:42:41,359 --> 00:42:44,160
so the next issue is what do we do with

965
00:42:44,160 --> 00:42:46,079
redirects

966
00:42:46,079 --> 00:42:48,880
and there are roughly two options we

967
00:42:48,880 --> 00:42:50,960
have to follow redirects or to not

968
00:42:50,960 --> 00:42:53,440
follow redirects and diverges to the

969
00:42:53,440 --> 00:42:56,000
application

970
00:42:56,000 --> 00:42:59,520
we had similar discussion a while ago in

971
00:42:59,520 --> 00:43:01,359
w3c

972
00:43:01,359 --> 00:43:04,079
uh and i think back then we agreed that

973
00:43:04,079 --> 00:43:06,480
we should redirect to the application

974
00:43:06,480 --> 00:43:08,960
because that makes the stack just much

975
00:43:08,960 --> 00:43:10,560
simpler

976
00:43:10,560 --> 00:43:14,720
but i wanted to know what

977
00:43:14,720 --> 00:43:16,000
opinions

978
00:43:16,000 --> 00:43:18,160
on this matter to fox since this working

979
00:43:18,160 --> 00:43:19,839
group have

980
00:43:19,839 --> 00:43:22,319
uh so oh

981
00:43:22,319 --> 00:43:23,680
if anyone

982
00:43:23,680 --> 00:43:25,760
has opinions please

983
00:43:25,760 --> 00:43:29,240
during the queue

984
00:43:45,680 --> 00:43:49,040
uh if no one has opinions i uh uh i

985
00:43:49,040 --> 00:43:51,440
think i will just close with the double

986
00:43:51,440 --> 00:43:54,640
ifrc conclusion which is uh we don't

987
00:43:54,640 --> 00:43:56,640
support redirects uh

988
00:43:56,640 --> 00:43:59,279
uh david

989
00:44:00,400 --> 00:44:02,640
uh thanks speaking as individual

990
00:44:02,640 --> 00:44:04,640
contributor and the person who followed

991
00:44:04,640 --> 00:44:07,760
this issue um i'm okay with that i i

992
00:44:07,760 --> 00:44:10,160
don't have a strong opinion on what on

993
00:44:10,160 --> 00:44:11,680
whether we should support it or not i

994
00:44:11,680 --> 00:44:13,599
just think we should be very clear in

995
00:44:13,599 --> 00:44:16,480
the spec uh whether it is supported or

996
00:44:16,480 --> 00:44:18,640
not

997
00:44:18,640 --> 00:44:23,799
uh i see thank you uh martin

998
00:44:27,119 --> 00:44:29,599
sorry i'm going to have to refresh my

999
00:44:29,599 --> 00:44:31,920
memory on bcp56

1000
00:44:31,920 --> 00:44:33,040
biz

1001
00:44:33,040 --> 00:44:36,000
but i think if we're playing http we

1002
00:44:36,000 --> 00:44:38,720
have to play by the rules and

1003
00:44:38,720 --> 00:44:42,960
3xx is one of the http things that you

1004
00:44:42,960 --> 00:44:45,280
just have to deal with

1005
00:44:45,280 --> 00:44:47,119
um

1006
00:44:47,119 --> 00:44:49,359
and so there are three x's that don't

1007
00:44:49,359 --> 00:44:51,599
make any sense for web transport

1008
00:44:51,599 --> 00:44:53,760
um but there are three x x's that

1009
00:44:53,760 --> 00:44:55,599
probably do

1010
00:44:55,599 --> 00:44:57,839
uh i can't remember which one which one

1011
00:44:57,839 --> 00:44:59,920
goes where but

1012
00:44:59,920 --> 00:45:01,839
i think that if we're playing http then

1013
00:45:01,839 --> 00:45:02,960
we have to

1014
00:45:02,960 --> 00:45:05,839
not pretend

1015
00:45:12,000 --> 00:45:15,280
yeah i can see that

1016
00:45:15,280 --> 00:45:18,480
from my personal perspective

1017
00:45:18,480 --> 00:45:20,079
and

1018
00:45:20,079 --> 00:45:22,880
my intuition is roughly redirects are

1019
00:45:22,880 --> 00:45:24,480
the things that

1020
00:45:24,480 --> 00:45:27,680
people don't build in initially and then

1021
00:45:27,680 --> 00:45:29,920
when they don't build it they end up

1022
00:45:29,920 --> 00:45:32,079
regretting this

1023
00:45:32,079 --> 00:45:33,119
and

1024
00:45:33,119 --> 00:45:34,319
i know

1025
00:45:34,319 --> 00:45:38,240
that because i used to support a certain

1026
00:45:38,240 --> 00:45:40,960
very ancient legacy protocol with a

1027
00:45:40,960 --> 00:45:44,079
server that i needed to move

1028
00:45:44,079 --> 00:45:46,560
and i had to do really dirty load

1029
00:45:46,560 --> 00:45:49,040
balancing tricks to move it because that

1030
00:45:49,040 --> 00:45:51,520
protocol did not support redirects which

1031
00:45:51,520 --> 00:45:52,480
made it

1032
00:45:52,480 --> 00:45:54,160
a lot harder

1033
00:45:54,160 --> 00:45:55,520
uh

1034
00:45:55,520 --> 00:45:58,480
so uh

1035
00:45:58,480 --> 00:46:00,480
i

1036
00:46:00,480 --> 00:46:03,920
so i think we need to figure out whether

1037
00:46:03,920 --> 00:46:05,359
we

1038
00:46:05,359 --> 00:46:08,079
actually need to do redirects according

1039
00:46:08,079 --> 00:46:12,160
to the bcp and if that is the case

1040
00:46:12,160 --> 00:46:13,359
uh

1041
00:46:13,359 --> 00:46:15,280
i do

1042
00:46:15,280 --> 00:46:18,079
we should support them and if not we

1043
00:46:18,079 --> 00:46:21,200
should revisit this

1044
00:46:21,200 --> 00:46:23,439
uh

1045
00:46:25,440 --> 00:46:26,560
uh

1046
00:46:26,560 --> 00:46:28,160
all right uh

1047
00:46:28,160 --> 00:46:31,200
next issue and i think that's the last

1048
00:46:31,200 --> 00:46:33,599
big issue we should address

1049
00:46:33,599 --> 00:46:36,800
uh is the issue of request forgery and

1050
00:46:36,800 --> 00:46:39,520
this probably is not a very good summary

1051
00:46:39,520 --> 00:46:40,839
because

1052
00:46:40,839 --> 00:46:43,839
uh martin

1053
00:46:43,839 --> 00:46:44,800
wrote

1054
00:46:44,800 --> 00:46:46,560
much more

1055
00:46:46,560 --> 00:46:49,520
uh but uh

1056
00:46:50,000 --> 00:46:52,400
basically in

1057
00:46:52,400 --> 00:46:54,400
the issue is

1058
00:46:54,400 --> 00:46:57,400
oh

1059
00:46:59,920 --> 00:47:01,040
uh

1060
00:47:01,040 --> 00:47:03,759
there are

1061
00:47:05,280 --> 00:47:10,319
multiple forms of attacks that uh

1062
00:47:10,319 --> 00:47:14,079
exists in which you

1063
00:47:14,240 --> 00:47:18,240
a can confuse appear into billy

1064
00:47:18,240 --> 00:47:20,800
in which you can confuse various parties

1065
00:47:20,800 --> 00:47:22,480
into believing that you are speaking a

1066
00:47:22,480 --> 00:47:24,400
protocol different from the one you're

1067
00:47:24,400 --> 00:47:27,359
actually speaking

1068
00:47:27,680 --> 00:47:31,119
on one level uh

1069
00:47:31,119 --> 00:47:33,040
there is

1070
00:47:33,040 --> 00:47:36,480
obvious attacks like the ones we

1071
00:47:36,480 --> 00:47:38,960
one of the reasons we don't get

1072
00:47:38,960 --> 00:47:42,640
uh rock quick sockets to web directly is

1073
00:47:42,640 --> 00:47:45,520
it allows you to bypass authentication

1074
00:47:45,520 --> 00:47:49,040
and whenever in web transport we go out

1075
00:47:49,040 --> 00:47:51,760
of our way and as a part of requirements

1076
00:47:51,760 --> 00:47:52,559
we

1077
00:47:52,559 --> 00:47:55,920
have to identify that all of our traffic

1078
00:47:55,920 --> 00:47:58,880
that is initiated by a web application

1079
00:47:58,880 --> 00:48:01,920
is identified as being initiated by a

1080
00:48:01,920 --> 00:48:04,240
web application as opposed to any native

1081
00:48:04,240 --> 00:48:05,599
client

1082
00:48:05,599 --> 00:48:08,240
but there are also families of attacks

1083
00:48:08,240 --> 00:48:09,760
that do

1084
00:48:09,760 --> 00:48:11,839
you can still perform

1085
00:48:11,839 --> 00:48:15,119
uh and one of them is the one websocket

1086
00:48:15,119 --> 00:48:18,240
tried to avoid with masking is

1087
00:48:18,240 --> 00:48:20,559
an attack where you

1088
00:48:20,559 --> 00:48:22,960
try to make your traffic

1089
00:48:22,960 --> 00:48:25,760
uh from client to server look like

1090
00:48:25,760 --> 00:48:28,640
certain kind of http traffic

1091
00:48:28,640 --> 00:48:31,599
uh and that would lead intermediaries to

1092
00:48:31,599 --> 00:48:34,319
assume that you're speaking http even if

1093
00:48:34,319 --> 00:48:37,200
you're obviously not

1094
00:48:37,200 --> 00:48:38,480
and

1095
00:48:38,480 --> 00:48:39,839
websocket

1096
00:48:39,839 --> 00:48:42,000
addresses that by

1097
00:48:42,000 --> 00:48:44,720
trying to make the traffic unpredictable

1098
00:48:44,720 --> 00:48:47,119
via masking

1099
00:48:47,119 --> 00:48:49,200
and the question is

1100
00:48:49,200 --> 00:48:52,640
do we need to do anything similar in web

1101
00:48:52,640 --> 00:48:55,040
transport or not

1102
00:48:55,040 --> 00:48:56,079
uh

1103
00:48:56,079 --> 00:48:59,920
and i wanna hear people's substances

1104
00:48:59,920 --> 00:49:03,520
especially martin since he filed that

1105
00:49:03,520 --> 00:49:05,760
issue and i'm not even sure if my

1106
00:49:05,760 --> 00:49:09,359
summary is good or not

1107
00:49:14,720 --> 00:49:17,720
martin

1108
00:49:19,440 --> 00:49:21,680
takes about five seconds for this to

1109
00:49:21,680 --> 00:49:22,720
come through

1110
00:49:22,720 --> 00:49:24,880
so victor the only thing that i'd

1111
00:49:24,880 --> 00:49:26,720
probably correct in your summary was

1112
00:49:26,720 --> 00:49:28,640
that the impersonation of another

1113
00:49:28,640 --> 00:49:29,680
protocol

1114
00:49:29,680 --> 00:49:31,520
is not just http you can make it look

1115
00:49:31,520 --> 00:49:33,200
like other things and

1116
00:49:33,200 --> 00:49:35,839
i think one of the um the net slip

1117
00:49:35,839 --> 00:49:38,000
streaming stuff was was using

1118
00:49:38,000 --> 00:49:42,400
i think stun at one point or sip or

1119
00:49:42,400 --> 00:49:44,640
something else it was a whole bunch of

1120
00:49:44,640 --> 00:49:46,000
different different loopholes that they

1121
00:49:46,000 --> 00:49:47,760
were looking to exploit

1122
00:49:47,760 --> 00:49:48,480
so

1123
00:49:48,480 --> 00:49:50,480
because you have essentially full

1124
00:49:50,480 --> 00:49:51,680
control

1125
00:49:51,680 --> 00:49:53,680
over the the packets that are being

1126
00:49:53,680 --> 00:49:55,359
exchanged between the client and the

1127
00:49:55,359 --> 00:49:58,079
server you can

1128
00:49:58,079 --> 00:50:00,640
you can do a lot

1129
00:50:00,640 --> 00:50:01,760
um

1130
00:50:01,760 --> 00:50:04,160
i'm not

1131
00:50:04,160 --> 00:50:06,800
yeah harold harold's much closer to this

1132
00:50:06,800 --> 00:50:08,800
than i had it was it was done

1133
00:50:08,800 --> 00:50:10,400
with um

1134
00:50:10,400 --> 00:50:12,160
special control over the udp message

1135
00:50:12,160 --> 00:50:13,920
fragmentation which i don't think that

1136
00:50:13,920 --> 00:50:15,760
quick natively has

1137
00:50:15,760 --> 00:50:18,079
but it's worth considering um

1138
00:50:18,079 --> 00:50:20,079
i have not come to any conclusions

1139
00:50:20,079 --> 00:50:22,480
myself on this one i was hoping that

1140
00:50:22,480 --> 00:50:24,240
mike harold would be able to

1141
00:50:24,240 --> 00:50:26,240
provide their insights

1142
00:50:26,240 --> 00:50:27,599
and

1143
00:50:27,599 --> 00:50:29,359
i know adam rice has been doing some

1144
00:50:29,359 --> 00:50:31,119
work on this as well

1145
00:50:31,119 --> 00:50:34,559
yeah so the questions i would have like

1146
00:50:34,559 --> 00:50:37,280
the first question i would ask is

1147
00:50:37,280 --> 00:50:40,480
uh is this specific to web transport or

1148
00:50:40,480 --> 00:50:42,960
if this is a problem why is this not a

1149
00:50:42,960 --> 00:50:46,559
problem with something like fetch

1150
00:50:47,440 --> 00:50:49,200
it is a problem with fetch

1151
00:50:49,200 --> 00:50:51,119
yep

1152
00:50:51,119 --> 00:50:54,920
okay uh harold

1153
00:51:00,400 --> 00:51:01,359
yes

1154
00:51:01,359 --> 00:51:02,480
so

1155
00:51:02,480 --> 00:51:05,119
the problem with masking is

1156
00:51:05,119 --> 00:51:06,720
if you

1157
00:51:06,720 --> 00:51:09,440
give the attacker control over basically

1158
00:51:09,440 --> 00:51:11,920
the first bytes of a packet

1159
00:51:11,920 --> 00:51:15,119
then uh you can count on some

1160
00:51:15,119 --> 00:51:17,200
idiot box on the on the network

1161
00:51:17,200 --> 00:51:19,280
somewhere doing something inappropriate

1162
00:51:19,280 --> 00:51:20,800
with it

1163
00:51:20,800 --> 00:51:23,200
uh so the reason why

1164
00:51:23,200 --> 00:51:24,160
uh

1165
00:51:24,160 --> 00:51:26,319
the natch lip stream attack worked was

1166
00:51:26,319 --> 00:51:29,119
because uh

1167
00:51:29,760 --> 00:51:30,720
stun

1168
00:51:30,720 --> 00:51:34,558
sent packets that were

1169
00:51:35,280 --> 00:51:37,920
chopped into more than one udp fragment

1170
00:51:37,920 --> 00:51:39,119
and

1171
00:51:39,119 --> 00:51:41,119
the attacker had control over the first

1172
00:51:41,119 --> 00:51:42,960
bytes of the

1173
00:51:42,960 --> 00:51:45,200
of the b fragment fragment

1174
00:51:45,200 --> 00:51:47,920
now if you encrypt

1175
00:51:47,920 --> 00:51:49,680
content

1176
00:51:49,680 --> 00:51:50,960
then

1177
00:51:50,960 --> 00:51:53,280
the attacker does not have control

1178
00:51:53,280 --> 00:51:56,240
and if you have a header that is uh

1179
00:51:56,240 --> 00:51:58,000
controlled by the protocol the attacker

1180
00:51:58,000 --> 00:52:00,160
does not have control so

1181
00:52:00,160 --> 00:52:01,839
if you and if you encrypt what's the

1182
00:52:01,839 --> 00:52:05,040
what the attacker has control over and

1183
00:52:05,040 --> 00:52:06,000
and

1184
00:52:06,000 --> 00:52:07,839
and format the rest according to your

1185
00:52:07,839 --> 00:52:09,599
own rules you're basically safe against

1186
00:52:09,599 --> 00:52:11,680
forgery

1187
00:52:11,680 --> 00:52:13,599
that's the that's the

1188
00:52:13,599 --> 00:52:16,000
short version now web transport didn't

1189
00:52:16,000 --> 00:52:18,800
encrypt so therefore they did masking

1190
00:52:18,800 --> 00:52:20,400
instead

1191
00:52:20,400 --> 00:52:24,160
no way web sockets i mean

1192
00:52:24,160 --> 00:52:26,160
it's much better to encrypt as quick

1193
00:52:26,160 --> 00:52:27,440
does

1194
00:52:27,440 --> 00:52:28,559
i see

1195
00:52:28,559 --> 00:52:32,760
uh thank you davis quinase

1196
00:52:33,680 --> 00:52:35,920
um yes speaking as individual

1197
00:52:35,920 --> 00:52:38,559
contributor again so um

1198
00:52:38,559 --> 00:52:40,880
encryption helps but not in this

1199
00:52:40,880 --> 00:52:44,079
scenario because it is predictable

1200
00:52:44,079 --> 00:52:46,720
uh the issue here is uh

1201
00:52:46,720 --> 00:52:50,000
the the these attack setups include like

1202
00:52:50,000 --> 00:52:51,040
a

1203
00:52:51,040 --> 00:52:53,839
a participating evil web transport

1204
00:52:53,839 --> 00:52:55,040
server

1205
00:52:55,040 --> 00:52:57,119
with you know like evil web transport

1206
00:52:57,119 --> 00:52:59,200
javascript on the client

1207
00:52:59,200 --> 00:53:00,640
and so

1208
00:53:00,640 --> 00:53:02,960
even though we are encrypting because

1209
00:53:02,960 --> 00:53:05,280
we're using stream ciphers in quick you

1210
00:53:05,280 --> 00:53:07,440
can have the

1211
00:53:07,440 --> 00:53:10,720
evil web transport server send the keys

1212
00:53:10,720 --> 00:53:13,520
over the application layer and the

1213
00:53:13,520 --> 00:53:15,680
packet numbers it is receiving from the

1214
00:53:15,680 --> 00:53:16,640
client

1215
00:53:16,640 --> 00:53:18,880
so the client can pick some packet

1216
00:53:18,880 --> 00:53:20,000
number

1217
00:53:20,000 --> 00:53:22,880
in the close future and then blast that

1218
00:53:22,880 --> 00:53:25,680
a bunch of times because

1219
00:53:25,680 --> 00:53:28,160
since it's a stream cipher you can you

1220
00:53:28,160 --> 00:53:30,720
know if you know what the

1221
00:53:30,720 --> 00:53:32,640
uh you can recover what the key mat is

1222
00:53:32,640 --> 00:53:35,040
so you just absorb your plain text with

1223
00:53:35,040 --> 00:53:36,880
that and then you can have influence

1224
00:53:36,880 --> 00:53:38,720
over the cipher text so you can defeat

1225
00:53:38,720 --> 00:53:40,400
the protection brought about by

1226
00:53:40,400 --> 00:53:42,640
encryption using this

1227
00:53:42,640 --> 00:53:43,680
um

1228
00:53:43,680 --> 00:53:45,839
so so we we still have a problem we need

1229
00:53:45,839 --> 00:53:47,760
to solve is kind of all i'm saying

1230
00:53:47,760 --> 00:53:50,800
uh but the next step is how do we solve

1231
00:53:50,800 --> 00:53:53,839
it my personal take is this isn't

1232
00:53:53,839 --> 00:53:56,240
specific to web transport like you have

1233
00:53:56,240 --> 00:53:57,760
the same issue with regular fetch

1234
00:53:57,760 --> 00:53:59,280
requests

1235
00:53:59,280 --> 00:54:01,760
and so potentially the best solution is

1236
00:54:01,760 --> 00:54:03,359
to do the same thing

1237
00:54:03,359 --> 00:54:06,000
as what we did for the slipstream attack

1238
00:54:06,000 --> 00:54:07,359
which was

1239
00:54:07,359 --> 00:54:10,319
to add a few ports to the fetch tcp

1240
00:54:10,319 --> 00:54:12,720
block list so i think the solution here

1241
00:54:12,720 --> 00:54:15,280
is that we need a fetch udp block list

1242
00:54:15,280 --> 00:54:16,720
of ports

1243
00:54:16,720 --> 00:54:18,559
which would solve the problem for

1244
00:54:18,559 --> 00:54:20,800
regular http requests and for web

1245
00:54:20,800 --> 00:54:22,960
transport um that means that here in

1246
00:54:22,960 --> 00:54:25,440
terms of itf

1247
00:54:25,440 --> 00:54:26,800
we would have

1248
00:54:26,800 --> 00:54:28,800
we would do nothing and then we would

1249
00:54:28,800 --> 00:54:31,359
kind of punch the problem to the w3c

1250
00:54:31,359 --> 00:54:35,440
uh that would be my personal put here

1251
00:54:35,440 --> 00:54:38,480
yeah so i agree one thing i will notice

1252
00:54:38,480 --> 00:54:40,960
is as far as i remember web transport

1253
00:54:40,960 --> 00:54:43,359
actually respects the tcp blood port

1254
00:54:43,359 --> 00:54:44,799
block list

1255
00:54:44,799 --> 00:54:48,240
and the other thing is uh

1256
00:54:48,240 --> 00:54:50,960
this will protect us against port

1257
00:54:50,960 --> 00:54:54,000
blocking will attack us against this

1258
00:54:54,000 --> 00:54:56,000
netflix streaming attacks but that

1259
00:54:56,000 --> 00:54:58,079
doesn't mean that it will protect us

1260
00:54:58,079 --> 00:54:59,040
against

1261
00:54:59,040 --> 00:55:01,599
all classes of attacks that we may not

1262
00:55:01,599 --> 00:55:03,359
be yet aware of

1263
00:55:03,359 --> 00:55:04,960
uh

1264
00:55:04,960 --> 00:55:07,839
uh utaka

1265
00:55:12,960 --> 00:55:16,160
only for client to server direction

1266
00:55:16,160 --> 00:55:19,040
server to client communication is not

1267
00:55:19,040 --> 00:55:23,200
masked because the original scenario was

1268
00:55:23,200 --> 00:55:25,119
the client attacks

1269
00:55:25,119 --> 00:55:27,760
proxies

1270
00:55:27,920 --> 00:55:31,280
living between the survived client

1271
00:55:31,280 --> 00:55:32,240
but

1272
00:55:32,240 --> 00:55:33,440
given

1273
00:55:33,440 --> 00:55:37,359
the scenario scenarios for web transport

1274
00:55:37,359 --> 00:55:39,200
it seems the

1275
00:55:39,200 --> 00:55:42,400
client to server and server to client

1276
00:55:42,400 --> 00:55:44,319
both needs

1277
00:55:44,319 --> 00:55:48,520
masking is that right

1278
00:55:48,640 --> 00:55:51,520
well to some extent i don't think

1279
00:55:51,520 --> 00:55:54,319
masking can help on server to client

1280
00:55:54,319 --> 00:55:56,720
because if server is malicious it will

1281
00:55:56,720 --> 00:55:57,520
do

1282
00:55:57,520 --> 00:55:59,520
like the entire attack depends on the

1283
00:55:59,520 --> 00:56:01,040
premise that

1284
00:56:01,040 --> 00:56:02,400
both

1285
00:56:02,400 --> 00:56:04,799
web application and the server are

1286
00:56:04,799 --> 00:56:06,160
malicious

1287
00:56:06,160 --> 00:56:09,680
and you it doesn't help you to demand to

1288
00:56:09,680 --> 00:56:12,079
require masking on server because the

1289
00:56:12,079 --> 00:56:14,720
server can already send whatever it

1290
00:56:14,720 --> 00:56:18,880
wants uh and the fundamental problem of

1291
00:56:18,880 --> 00:56:21,599
this attack are the client to server

1292
00:56:21,599 --> 00:56:25,599
flight as far as i understand

1293
00:56:25,839 --> 00:56:28,240
in that case the

1294
00:56:28,240 --> 00:56:30,400
the masking

1295
00:56:30,400 --> 00:56:32,880
sounds relying on

1296
00:56:32,880 --> 00:56:35,200
an assumption that the

1297
00:56:35,200 --> 00:56:37,599
sabbath client is safe

1298
00:56:37,599 --> 00:56:38,640
that

1299
00:56:38,640 --> 00:56:39,839
and it

1300
00:56:39,839 --> 00:56:42,839
sounds understick to

1301
00:56:42,839 --> 00:56:44,400
me

1302
00:56:44,400 --> 00:56:47,119
well it is not

1303
00:56:47,119 --> 00:56:50,799
as much as safe as is

1304
00:56:50,799 --> 00:56:52,880
there is nothing we can do about it

1305
00:56:52,880 --> 00:56:55,040
because the server can send whatever it

1306
00:56:55,040 --> 00:56:56,000
can

1307
00:56:56,000 --> 00:56:59,040
yeah yeah yeah i i i see

1308
00:56:59,040 --> 00:57:01,279
uh

1309
00:57:01,440 --> 00:57:03,680
i i guess

1310
00:57:03,680 --> 00:57:06,400
i'm not sure how this works out in case

1311
00:57:06,400 --> 00:57:09,280
of nas lip strumming but

1312
00:57:09,280 --> 00:57:12,400
in general

1313
00:57:12,400 --> 00:57:14,400
the problem is

1314
00:57:14,400 --> 00:57:16,000
we're where it is

1315
00:57:16,000 --> 00:57:18,079
forging the

1316
00:57:18,079 --> 00:57:22,400
packets that initiate from a fan network

1317
00:57:22,880 --> 00:57:24,480
thank you

1318
00:57:24,480 --> 00:57:28,160
thank you uh harold

1319
00:57:29,440 --> 00:57:31,200
i kind of kind of panicked when i

1320
00:57:31,200 --> 00:57:33,119
realized what uh

1321
00:57:33,119 --> 00:57:36,400
what what you're saying

1322
00:57:37,520 --> 00:57:39,040
about

1323
00:57:39,040 --> 00:57:40,720
an evil server

1324
00:57:40,720 --> 00:57:42,640
being able to

1325
00:57:42,640 --> 00:57:44,559
leak the keys and thereby influencing

1326
00:57:44,559 --> 00:57:46,160
the ciphertext because

1327
00:57:46,160 --> 00:57:48,160
that that attack will actually work

1328
00:57:48,160 --> 00:57:52,400
against anything that uses quick

1329
00:57:52,400 --> 00:57:54,720
and that means that uh

1330
00:57:54,720 --> 00:57:56,640
well first of all it's a much bigger

1331
00:57:56,640 --> 00:57:58,720
problem than i thought

1332
00:57:58,720 --> 00:58:00,640
and second it's not

1333
00:58:00,640 --> 00:58:04,160
this working group's problem to solve

1334
00:58:04,160 --> 00:58:05,200
the first

1335
00:58:05,200 --> 00:58:07,440
the first bad the other is good for this

1336
00:58:07,440 --> 00:58:10,079
meeting but not not for the

1337
00:58:10,079 --> 00:58:12,799
not not for the ecosystem

1338
00:58:12,799 --> 00:58:14,799
if that if the attack is real then it's

1339
00:58:14,799 --> 00:58:17,119
then it's uh applies to any protocol

1340
00:58:17,119 --> 00:58:19,680
using quick

1341
00:58:21,359 --> 00:58:23,040
yes i think

1342
00:58:23,040 --> 00:58:26,000
i think my intuition is that

1343
00:58:26,000 --> 00:58:28,880
this is an issue we should probably

1344
00:58:28,880 --> 00:58:31,920
uh punt to quick working group

1345
00:58:31,920 --> 00:58:34,319
uh because this is

1346
00:58:34,319 --> 00:58:35,680
much

1347
00:58:35,680 --> 00:58:38,720
extends far beyond web transport

1348
00:58:38,720 --> 00:58:40,160
uh

1349
00:58:40,160 --> 00:58:42,960
and to some extent this is the problem

1350
00:58:42,960 --> 00:58:45,280
that

1351
00:58:47,520 --> 00:58:51,839
can be addressed in various levels

1352
00:58:52,400 --> 00:58:55,440
but i don't think we are

1353
00:58:55,440 --> 00:58:58,079
web transport is the correct level

1354
00:58:58,079 --> 00:59:03,559
uh does anyone object to that conclusion

1355
00:59:10,000 --> 00:59:12,720
uh martin

1356
00:59:14,640 --> 00:59:16,720
uh just a note i think we're almost out

1357
00:59:16,720 --> 00:59:18,799
of time on this segment so we should

1358
00:59:18,799 --> 00:59:20,480
probably do we have any more slides

1359
00:59:20,480 --> 00:59:22,799
victor

1360
00:59:22,960 --> 00:59:24,960
no this is the final site

1361
00:59:24,960 --> 00:59:27,040
okay

1362
00:59:27,040 --> 00:59:28,640
i i was going to say

1363
00:59:28,640 --> 00:59:30,839
i only object to it to the extent that

1364
00:59:30,839 --> 00:59:34,640
it might then not go addressed

1365
00:59:34,640 --> 00:59:36,960
in if indeed we believe that

1366
00:59:36,960 --> 00:59:40,079
it's being addressed is necessary

1367
00:59:40,079 --> 00:59:41,599
but um

1368
00:59:41,599 --> 00:59:42,480
if

1369
00:59:42,480 --> 00:59:44,400
if we take the necessary steps to ensure

1370
00:59:44,400 --> 00:59:46,720
that we have a discussion perhaps in

1371
00:59:46,720 --> 00:59:48,559
http perhaps

1372
00:59:48,559 --> 00:59:49,839
in tls

1373
00:59:49,839 --> 00:59:51,440
then

1374
00:59:51,440 --> 00:59:54,160
i can live with that

1375
00:59:56,400 --> 00:59:57,440
uh

1376
00:59:57,440 --> 01:00:00,720
thanks martin uh this is all for my

1377
01:00:00,720 --> 01:00:02,319
slides

1378
01:00:02,319 --> 01:00:04,558
uh

1379
01:00:04,960 --> 01:00:09,359
uh i'm returning mike to the chairs

1380
01:00:09,440 --> 01:00:11,839
okay

1381
01:00:11,920 --> 01:00:15,359
i think we're going to move on to eric

1382
01:00:15,359 --> 01:00:20,078
kinnear with web transport using http 2.

1383
01:00:20,960 --> 01:00:23,760
all right we should have audio and next

1384
01:00:23,760 --> 01:00:27,079
slide please

1385
01:00:29,599 --> 01:00:31,200
so we've had

1386
01:00:31,200 --> 01:00:33,839
quite a few changes since we last talked

1387
01:00:33,839 --> 01:00:37,040
if you may recall at ietf 111 we talked

1388
01:00:37,040 --> 01:00:40,160
about moving to a layered design

1389
01:00:40,160 --> 01:00:43,520
uh which effectively pulls in kind of a

1390
01:00:43,520 --> 01:00:46,160
minimal set of framing from quick

1391
01:00:46,160 --> 01:00:49,599
and runs that over a single hv2 stream

1392
01:00:49,599 --> 01:00:52,000
uh in large part because

1393
01:00:52,000 --> 01:00:54,240
we were saying that it was easier to

1394
01:00:54,240 --> 01:00:57,520
build something on top of hgv2 then to

1395
01:00:57,520 --> 01:00:59,839
own an http 2 implementation and expect

1396
01:00:59,839 --> 01:01:01,760
those implementations to change

1397
01:01:01,760 --> 01:01:05,280
um martin has also graciously uh said he

1398
01:01:05,280 --> 01:01:06,960
is willing to join us as an author and

1399
01:01:06,960 --> 01:01:08,559
has been contributing a lot of nice

1400
01:01:08,559 --> 01:01:10,720
texts so thank you martin next slide

1401
01:01:10,720 --> 01:01:12,959
please

1402
01:01:14,240 --> 01:01:16,640
so i drew a couple of fairly crude

1403
01:01:16,640 --> 01:01:19,839
diagrams to kind of help us all page in

1404
01:01:19,839 --> 01:01:21,200
what we mean when we talk about these

1405
01:01:21,200 --> 01:01:22,240
things

1406
01:01:22,240 --> 01:01:23,200
so

1407
01:01:23,200 --> 01:01:25,680
to set the stage here i've got this box

1408
01:01:25,680 --> 01:01:26,799
in the middle that we're going to worry

1409
01:01:26,799 --> 01:01:29,440
about in a little bit later but

1410
01:01:29,440 --> 01:01:32,480
instead of adding additional frames to

1411
01:01:32,480 --> 01:01:33,920
http 2

1412
01:01:33,920 --> 01:01:36,960
we now have an h2 implementation on

1413
01:01:36,960 --> 01:01:39,200
either end there's client server

1414
01:01:39,200 --> 01:01:42,559
pick your favorite intermediaries um and

1415
01:01:42,559 --> 01:01:45,280
we use extended connect to say hey i'm

1416
01:01:45,280 --> 01:01:47,920
speaking web transport and then that

1417
01:01:47,920 --> 01:01:50,480
connect stream becomes the thing that

1418
01:01:50,480 --> 01:01:52,400
carries the entirety of the web

1419
01:01:52,400 --> 01:01:53,760
transport session

1420
01:01:53,760 --> 01:01:56,000
so when we've talked about kind of

1421
01:01:56,000 --> 01:01:58,240
breaking out to use native

1422
01:01:58,240 --> 01:01:59,119
um

1423
01:01:59,119 --> 01:02:01,280
streams or datagrams when they're

1424
01:02:01,280 --> 01:02:03,200
available or something like that this is

1425
01:02:03,200 --> 01:02:06,000
kind of the the far end of that spectrum

1426
01:02:06,000 --> 01:02:07,200
where nothing is broken out and

1427
01:02:07,200 --> 01:02:08,799
everything is self-contained within the

1428
01:02:08,799 --> 01:02:10,400
single connect stream

1429
01:02:10,400 --> 01:02:13,280
next slide please

1430
01:02:14,640 --> 01:02:16,480
if we then move into what was inside

1431
01:02:16,480 --> 01:02:18,480
that box in the middle we have a web

1432
01:02:18,480 --> 01:02:20,240
transport session where we have

1433
01:02:20,240 --> 01:02:22,160
bi-directional streams we also have

1434
01:02:22,160 --> 01:02:24,079
unidirectional streams and we also have

1435
01:02:24,079 --> 01:02:26,160
datagrams and of course these can be

1436
01:02:26,160 --> 01:02:27,760
initiated from either side which is why

1437
01:02:27,760 --> 01:02:29,359
i've got some of them kind of anchored

1438
01:02:29,359 --> 01:02:31,359
on the left and some of them anchored on

1439
01:02:31,359 --> 01:02:32,720
the right

1440
01:02:32,720 --> 01:02:34,400
but conceptually what we're doing is

1441
01:02:34,400 --> 01:02:36,240
we're taking a lot of the framing that

1442
01:02:36,240 --> 01:02:38,960
we were adding into http 2

1443
01:02:38,960 --> 01:02:42,319
and lifting it up one layer so that it's

1444
01:02:42,319 --> 01:02:45,119
effectively version independent

1445
01:02:45,119 --> 01:02:48,599
next slide please

1446
01:02:50,079 --> 01:02:51,920
in order to do that we end up pulling

1447
01:02:51,920 --> 01:02:55,359
over a subset of the frames that came

1448
01:02:55,359 --> 01:02:56,880
from quick and

1449
01:02:56,880 --> 01:02:59,760
we saw a variant of this slide at 111

1450
01:02:59,760 --> 01:03:01,599
and in actually

1451
01:03:01,599 --> 01:03:02,960
writing up a bunch of the text and the

1452
01:03:02,960 --> 01:03:04,960
definitions there's a couple of issues

1453
01:03:04,960 --> 01:03:06,880
uh that we need to work out which we'll

1454
01:03:06,880 --> 01:03:08,559
get to in a little bit but in general it

1455
01:03:08,559 --> 01:03:11,440
was fairly clean so there's kind of the

1456
01:03:11,440 --> 01:03:13,280
main set on the left you've got stream

1457
01:03:13,280 --> 01:03:14,960
and datagram and we also brought along

1458
01:03:14,960 --> 01:03:17,599
padding and that allows you to do you

1459
01:03:17,599 --> 01:03:19,280
know the bi-directional unidirectional

1460
01:03:19,280 --> 01:03:20,400
streams

1461
01:03:20,400 --> 01:03:24,000
and datagrams and then there's a set of

1462
01:03:24,000 --> 01:03:26,400
reset streams stop sending

1463
01:03:26,400 --> 01:03:28,240
kind of state management there and then

1464
01:03:28,240 --> 01:03:29,119
there's

1465
01:03:29,119 --> 01:03:31,440
flow control which is pretty much lifted

1466
01:03:31,440 --> 01:03:33,119
exactly

1467
01:03:33,119 --> 01:03:36,000
from quick which is subtly different

1468
01:03:36,000 --> 01:03:38,400
from h2 but that's not the end of the

1469
01:03:38,400 --> 01:03:39,440
world

1470
01:03:39,440 --> 01:03:41,119
so for that we have max data for the

1471
01:03:41,119 --> 01:03:43,359
whole web transport session we have mac

1472
01:03:43,359 --> 01:03:44,880
stream data for a given stream and then

1473
01:03:44,880 --> 01:03:46,880
we have mac streams for stream counts

1474
01:03:46,880 --> 01:03:48,000
and

1475
01:03:48,000 --> 01:03:50,319
brought along the uh the blocked

1476
01:03:50,319 --> 01:03:52,079
variants of those frames as well for the

1477
01:03:52,079 --> 01:03:56,240
same purposes as we have them in quick

1478
01:03:56,240 --> 01:03:57,440
and

1479
01:03:57,440 --> 01:04:00,319
next slide please

1480
01:04:04,799 --> 01:04:05,520
so

1481
01:04:05,520 --> 01:04:07,119
we've got a couple of issues that i

1482
01:04:07,119 --> 01:04:09,119
wanted to bring up here so that we could

1483
01:04:09,119 --> 01:04:10,559
kind of talk about them as a group and

1484
01:04:10,559 --> 01:04:12,319
hopefully make some progress on

1485
01:04:12,319 --> 01:04:13,599
unblocking

1486
01:04:13,599 --> 01:04:15,039
kind of some of the remaining questions

1487
01:04:15,039 --> 01:04:16,640
as we were specifying exactly where the

1488
01:04:16,640 --> 01:04:19,520
different bits and bytes go

1489
01:04:19,520 --> 01:04:22,160
the first one is when we talk about

1490
01:04:22,160 --> 01:04:24,400
mirroring quick

1491
01:04:24,400 --> 01:04:25,760
there's

1492
01:04:25,760 --> 01:04:27,359
kind of two pieces that come into this

1493
01:04:27,359 --> 01:04:28,559
and the first one is that there's a

1494
01:04:28,559 --> 01:04:31,200
couple of fields in certain quick frames

1495
01:04:31,200 --> 01:04:33,760
and i've pulled up uh reset stream as an

1496
01:04:33,760 --> 01:04:36,640
example that are just not necessary

1497
01:04:36,640 --> 01:04:39,039
uh in the way that we're doing this so

1498
01:04:39,039 --> 01:04:41,520
for example uh within reset stream

1499
01:04:41,520 --> 01:04:42,960
there's final size and it turns out

1500
01:04:42,960 --> 01:04:44,960
there aren't very many other examples of

1501
01:04:44,960 --> 01:04:45,760
this

1502
01:04:45,760 --> 01:04:46,640
um

1503
01:04:46,640 --> 01:04:49,359
but here is an example of a field where

1504
01:04:49,359 --> 01:04:51,599
both sides already know

1505
01:04:51,599 --> 01:04:53,599
the amount of data that's that's gone on

1506
01:04:53,599 --> 01:04:56,240
the stream we don't actually need final

1507
01:04:56,240 --> 01:04:57,920
size it's not communicating anything

1508
01:04:57,920 --> 01:04:59,760
that's interesting and so the main

1509
01:04:59,760 --> 01:05:02,480
question is we're talking about hey you

1510
01:05:02,480 --> 01:05:04,160
know there's some additional lifting

1511
01:05:04,160 --> 01:05:06,000
necessary in that you now need to parse

1512
01:05:06,000 --> 01:05:08,319
a bunch of these frames one of the ideas

1513
01:05:08,319 --> 01:05:10,799
that was brought up that is potentially

1514
01:05:10,799 --> 01:05:12,720
really attractive is you know you could

1515
01:05:12,720 --> 01:05:16,480
just reuse your quick parser

1516
01:05:16,480 --> 01:05:17,920
for a bunch of these frames and so

1517
01:05:17,920 --> 01:05:19,280
rather than needing to do a bunch of

1518
01:05:19,280 --> 01:05:20,799
lifting to

1519
01:05:20,799 --> 01:05:22,319
handle all of this stuff you could just

1520
01:05:22,319 --> 01:05:25,760
say hey this looks like a quick frame

1521
01:05:25,760 --> 01:05:27,359
at which point we could just leave final

1522
01:05:27,359 --> 01:05:29,520
size there and your parser would just do

1523
01:05:29,520 --> 01:05:30,960
the thing and you just wouldn't bother

1524
01:05:30,960 --> 01:05:32,400
looking at what's there

1525
01:05:32,400 --> 01:05:33,680
and it's a variable with vintage so it

1526
01:05:33,680 --> 01:05:35,599
wouldn't take up very much space

1527
01:05:35,599 --> 01:05:38,880
and we could all move on with our day

1528
01:05:38,880 --> 01:05:40,559
we can talk about what our appetite is

1529
01:05:40,559 --> 01:05:44,240
for that if we go to the next slide

1530
01:05:46,960 --> 01:05:50,640
the other thing that comes up there is

1531
01:05:50,640 --> 01:05:52,880
we've added a length field to every

1532
01:05:52,880 --> 01:05:55,119
frame um that gives you a couple of

1533
01:05:55,119 --> 01:05:57,440
things one it lets you take unknown

1534
01:05:57,440 --> 01:05:59,760
frame types and be able to skip them

1535
01:05:59,760 --> 01:06:01,440
and you're packing all of these frames

1536
01:06:01,440 --> 01:06:02,480
into

1537
01:06:02,480 --> 01:06:04,799
a reliable byte stream and so it's

1538
01:06:04,799 --> 01:06:05,839
really kind of nice to have the

1539
01:06:05,839 --> 01:06:08,559
delineations of where things are

1540
01:06:08,559 --> 01:06:10,640
especially since things can't be lost

1541
01:06:10,640 --> 01:06:12,799
and you can't just ignore any of them

1542
01:06:12,799 --> 01:06:15,119
um

1543
01:06:15,200 --> 01:06:17,520
we've currently put that right after the

1544
01:06:17,520 --> 01:06:19,920
type but it is entirely possible that we

1545
01:06:19,920 --> 01:06:22,079
could put the length first and i think

1546
01:06:22,079 --> 01:06:23,680
alan had the interest made the

1547
01:06:23,680 --> 01:06:25,359
interesting observation that if we put

1548
01:06:25,359 --> 01:06:28,160
the length first you could consume the

1549
01:06:28,160 --> 01:06:30,240
length strip it off and then shove the

1550
01:06:30,240 --> 01:06:32,240
entire rest of what's there at your

1551
01:06:32,240 --> 01:06:34,559
quick frame parser and be done

1552
01:06:34,559 --> 01:06:36,319
and so i think the the

1553
01:06:36,319 --> 01:06:37,760
place where we want to stop right here

1554
01:06:37,760 --> 01:06:38,480
is

1555
01:06:38,480 --> 01:06:40,400
to get some sense from people of is this

1556
01:06:40,400 --> 01:06:42,880
an attractive thing to do is this a as

1557
01:06:42,880 --> 01:06:45,200
somebody who's implementing this you say

1558
01:06:45,200 --> 01:06:48,400
oh yes this is you know substantially

1559
01:06:48,400 --> 01:06:50,400
easier if i don't have to do any of this

1560
01:06:50,400 --> 01:06:51,599
parsing there's a bunch of variable

1561
01:06:51,599 --> 01:06:53,280
length integers here i'd like to just

1562
01:06:53,280 --> 01:06:55,920
take my quick code and you know strip

1563
01:06:55,920 --> 01:06:58,160
off the length and shove the frame at it

1564
01:06:58,160 --> 01:06:58,960
or

1565
01:06:58,960 --> 01:07:00,799
does this become

1566
01:07:00,799 --> 01:07:02,160
useless and and not actually

1567
01:07:02,160 --> 01:07:04,960
particularly helpful

1568
01:07:05,440 --> 01:07:08,799
i see martin is joining the cube

1569
01:07:11,200 --> 01:07:13,200
well i was just going to point out that

1570
01:07:13,200 --> 01:07:15,359
you could be even even more clever than

1571
01:07:15,359 --> 01:07:16,480
this

1572
01:07:16,480 --> 01:07:18,240
and use the same length field for

1573
01:07:18,240 --> 01:07:20,319
multiple frames

1574
01:07:20,319 --> 01:07:22,960
because that's what quick does right

1575
01:07:22,960 --> 01:07:24,480
and you

1576
01:07:24,480 --> 01:07:25,280
but

1577
01:07:25,280 --> 01:07:27,760
i'm not sure that i really need to go

1578
01:07:27,760 --> 01:07:28,559
there

1579
01:07:28,559 --> 01:07:31,119
this is this is the fallback protocol

1580
01:07:31,119 --> 01:07:33,520
and we could we can always be too too

1581
01:07:33,520 --> 01:07:34,720
clever

1582
01:07:34,720 --> 01:07:37,039
uh i kind of like the way that we have

1583
01:07:37,039 --> 01:07:39,119
it in the draft at the moment

1584
01:07:39,119 --> 01:07:41,119
and i'm

1585
01:07:41,119 --> 01:07:43,200
comfortable then saying that this is not

1586
01:07:43,200 --> 01:07:44,240
quick

1587
01:07:44,240 --> 01:07:46,160
and removing the final size doesn't

1588
01:07:46,160 --> 01:07:49,598
doesn't make me at all uncomfortable

1589
01:07:50,480 --> 01:07:52,000
i think that seems pretty reasonable

1590
01:07:52,000 --> 01:07:54,400
lucas

1591
01:07:54,400 --> 01:07:57,119
yeah like if if you're gonna change the

1592
01:07:57,119 --> 01:07:58,720
frame layout then you're not gonna get

1593
01:07:58,720 --> 01:08:00,880
any reuse from quick unless you start to

1594
01:08:00,880 --> 01:08:02,640
special casey quick parser which i

1595
01:08:02,640 --> 01:08:04,880
wouldn't suggest anyone does like the

1596
01:08:04,880 --> 01:08:07,839
parsing code for these things is

1597
01:08:07,839 --> 01:08:09,359
like if you have a length it's pretty

1598
01:08:09,359 --> 01:08:12,160
easy it's not that hard to you know copy

1599
01:08:12,160 --> 01:08:14,160
paste the code and call it a web

1600
01:08:14,160 --> 01:08:17,279
transport frame parser or something so

1601
01:08:17,279 --> 01:08:19,439
i'll just go for the simple thing and

1602
01:08:19,439 --> 01:08:22,479
not try to be overly clever

1603
01:08:22,479 --> 01:08:24,479
thanks

1604
01:08:24,479 --> 01:08:27,358
all right alan

1605
01:08:28,640 --> 01:08:30,719
i i guess since this is my suggestion uh

1606
01:08:30,719 --> 01:08:32,479
i'll just say that i

1607
01:08:32,479 --> 01:08:33,759
think i prefer

1608
01:08:33,759 --> 01:08:35,679
like having the

1609
01:08:35,679 --> 01:08:37,839
i would either put the length first and

1610
01:08:37,839 --> 01:08:40,399
keep the flame formats the same and then

1611
01:08:40,399 --> 01:08:42,560
just reuse the quick parser i mean yes

1612
01:08:42,560 --> 01:08:44,560
you can copy and paste it but

1613
01:08:44,560 --> 01:08:46,960
uh i think i would prefer not to

1614
01:08:46,960 --> 01:08:48,000
uh

1615
01:08:48,000 --> 01:08:49,759
and i don't

1616
01:08:49,759 --> 01:08:51,040
and the other option we have talked

1617
01:08:51,040 --> 01:08:53,120
about is that quick itself doesn't have

1618
01:08:53,120 --> 01:08:54,319
the lengths

1619
01:08:54,319 --> 01:08:56,480
and

1620
01:08:56,640 --> 01:08:58,960
do we need them here do we want i mean

1621
01:08:58,960 --> 01:09:02,000
the main benefit is you could add more

1622
01:09:02,000 --> 01:09:03,920
um you could add unknown types and

1623
01:09:03,920 --> 01:09:05,279
that's why you have a length if you

1624
01:09:05,279 --> 01:09:06,719
otherwise you know exactly what's going

1625
01:09:06,719 --> 01:09:07,920
to be in there that's what quick does

1626
01:09:07,920 --> 01:09:10,719
you can't add unknown types in quick

1627
01:09:10,719 --> 01:09:12,158
so

1628
01:09:12,158 --> 01:09:13,920
i think it's sort of bound together we

1629
01:09:13,920 --> 01:09:15,520
could drop length all we could we could

1630
01:09:15,520 --> 01:09:18,560
drop length entirely

1631
01:09:19,040 --> 01:09:20,960
if we don't want to support unknown

1632
01:09:20,960 --> 01:09:22,719
types

1633
01:09:22,719 --> 01:09:25,040
right it seems like we're

1634
01:09:25,040 --> 01:09:26,880
kind of walking into a binary decision

1635
01:09:26,880 --> 01:09:29,679
of make it look like quick or

1636
01:09:29,679 --> 01:09:31,198
it's okay that it doesn't look exactly

1637
01:09:31,198 --> 01:09:34,158
like quick and we're fine with that

1638
01:09:34,158 --> 01:09:36,479
ian

1639
01:09:36,479 --> 01:09:38,080
actually i think ask basically the same

1640
01:09:38,080 --> 01:09:39,839
question of like um is that do we really

1641
01:09:39,839 --> 01:09:41,520
think we need a length

1642
01:09:41,520 --> 01:09:44,158
here because yeah i think

1643
01:09:44,158 --> 01:09:45,279
you know out of a slight preference

1644
01:09:45,279 --> 01:09:46,880
we're just like not adding a length and

1645
01:09:46,880 --> 01:09:48,158
then like making it look like quick

1646
01:09:48,158 --> 01:09:49,679
because it does seem slightly preferable

1647
01:09:49,679 --> 01:09:50,640
to me but

1648
01:09:50,640 --> 01:09:52,000
um

1649
01:09:52,000 --> 01:09:53,359
and i'm not sure if i understand like

1650
01:09:53,359 --> 01:09:54,719
why we care about skipping unknown frame

1651
01:09:54,719 --> 01:09:55,760
types but

1652
01:09:55,760 --> 01:09:57,840
um maybe there's some use case that i'm

1653
01:09:57,840 --> 01:10:00,000
missing so um the other thing i wanted

1654
01:10:00,000 --> 01:10:01,440
to conf this might pop stack a little

1655
01:10:01,440 --> 01:10:02,719
bit but like at some point can we get

1656
01:10:02,719 --> 01:10:04,320
back around to it looks like there's

1657
01:10:04,320 --> 01:10:06,400
some functionality that on the session

1658
01:10:06,400 --> 01:10:07,280
layer

1659
01:10:07,280 --> 01:10:08,800
here um

1660
01:10:08,800 --> 01:10:12,159
that is per connect stream in hp2

1661
01:10:12,159 --> 01:10:14,480
and we when we go back to hp3 like max

1662
01:10:14,480 --> 01:10:18,239
data and such apply across all sessions

1663
01:10:18,239 --> 01:10:19,920
which we sort of alluded to earlier

1664
01:10:19,920 --> 01:10:20,960
today

1665
01:10:20,960 --> 01:10:21,920
um

1666
01:10:21,920 --> 01:10:23,360
i'm not saying that either of those are

1667
01:10:23,360 --> 01:10:25,360
right or wrong but it does seem like the

1668
01:10:25,360 --> 01:10:27,360
functionality that you're mapping over

1669
01:10:27,360 --> 01:10:29,440
hp2 is offering is actually a slightly

1670
01:10:29,440 --> 01:10:32,080
richer functionality when multiplexing

1671
01:10:32,080 --> 01:10:35,360
than the hp3 version is that correct

1672
01:10:35,360 --> 01:10:37,520
yes and there's an entire slide in

1673
01:10:37,520 --> 01:10:39,600
section later we'll talk about this kind

1674
01:10:39,600 --> 01:10:40,320
of

1675
01:10:40,320 --> 01:10:41,760
all of the questions we had earlier

1676
01:10:41,760 --> 01:10:43,360
about pooling and flow control and all

1677
01:10:43,360 --> 01:10:46,000
of those things are effectively gone

1678
01:10:46,000 --> 01:10:47,360
when we talked about this but we'll get

1679
01:10:47,360 --> 01:10:49,040
to that in a little bit okay sorry to

1680
01:10:49,040 --> 01:10:50,320
start yeah

1681
01:10:50,320 --> 01:10:51,440
better

1682
01:10:51,440 --> 01:10:53,360
you're awake it's great

1683
01:10:53,360 --> 01:10:55,679
victor

1684
01:10:56,159 --> 01:10:58,960
oh i just wanted to say that in general

1685
01:10:58,960 --> 01:11:00,159
the

1686
01:11:00,159 --> 01:11:02,880
landfills it sounds like a great idea

1687
01:11:02,880 --> 01:11:05,040
for anything that is not super concerned

1688
01:11:05,040 --> 01:11:07,360
about the size and we're not concerned

1689
01:11:07,360 --> 01:11:10,960
about the size here so uh

1690
01:11:10,960 --> 01:11:13,440
it sounds good to uh keep lens and

1691
01:11:13,440 --> 01:11:16,480
remove the final size

1692
01:11:18,239 --> 01:11:21,120
all right david

1693
01:11:23,440 --> 01:11:26,560
uh speaking as participant um

1694
01:11:26,560 --> 01:11:29,600
yeah my general take here is that since

1695
01:11:29,600 --> 01:11:31,600
uh this is the fallback transport we

1696
01:11:31,600 --> 01:11:34,239
don't need to squeeze every single bit

1697
01:11:34,239 --> 01:11:36,560
of overhead out of it the same way we do

1698
01:11:36,560 --> 01:11:37,280
for

1699
01:11:37,280 --> 01:11:39,280
the quick transport layer so

1700
01:11:39,280 --> 01:11:41,600
having a length seems like a recipe for

1701
01:11:41,600 --> 01:11:45,199
fewer headaches down the road

1702
01:11:45,199 --> 01:11:48,480
and once you have a length um

1703
01:11:48,480 --> 01:11:50,080
i

1704
01:11:50,080 --> 01:11:50,960
this

1705
01:11:50,960 --> 01:11:52,800
this is then becomes a segway into your

1706
01:11:52,800 --> 01:11:54,640
next slide

1707
01:11:54,640 --> 01:11:57,520
which is this is starting to look an

1708
01:11:57,520 --> 01:12:00,159
awful lot like a capsule and why don't

1709
01:12:00,159 --> 01:12:01,600
we simply

1710
01:12:01,600 --> 01:12:04,239
bingo thank you mt why don't we just use

1711
01:12:04,239 --> 01:12:06,159
capsules then because this sounds

1712
01:12:06,159 --> 01:12:08,159
exactly like what you want to do and as

1713
01:12:08,159 --> 01:12:10,320
a wise mt once said

1714
01:12:10,320 --> 01:12:12,159
why have another

1715
01:12:12,159 --> 01:12:14,320
frame type and you know another

1716
01:12:14,320 --> 01:12:16,080
extensibility joint when you can just

1717
01:12:16,080 --> 01:12:18,560
use a capsule type and then we register

1718
01:12:18,560 --> 01:12:20,239
whatever eight capsule types for all

1719
01:12:20,239 --> 01:12:22,560
these wt frames and we call them wd

1720
01:12:22,560 --> 01:12:24,400
capsules and we move on

1721
01:12:24,400 --> 01:12:28,239
um that would be my put here

1722
01:12:28,239 --> 01:12:29,600
so i think just to make sure i

1723
01:12:29,600 --> 01:12:31,840
understand you're saying make it a

1724
01:12:31,840 --> 01:12:33,679
capsule register it don't worry about

1725
01:12:33,679 --> 01:12:35,760
trying to make the types overlap with

1726
01:12:35,760 --> 01:12:37,040
quick because we're doing a separate

1727
01:12:37,040 --> 01:12:39,040
parser anyway and so this is the we're

1728
01:12:39,040 --> 01:12:40,480
not super worried about making it look

1729
01:12:40,480 --> 01:12:42,239
like quick just make them be capsules

1730
01:12:42,239 --> 01:12:44,000
and keep going

1731
01:12:44,000 --> 01:12:45,199
yes that's

1732
01:12:45,199 --> 01:12:47,040
what i would say

1733
01:12:47,040 --> 01:12:48,560
gotcha thanks

1734
01:12:48,560 --> 01:12:51,560
ellen

1735
01:12:51,840 --> 01:12:54,719
so the only thing i would say about

1736
01:12:54,719 --> 01:12:57,040
capsules here is that

1737
01:12:57,040 --> 01:12:58,560
i don't like

1738
01:12:58,560 --> 01:13:00,560
all that is going to buy you is a parser

1739
01:13:00,560 --> 01:13:03,040
that knows how to parse a type and a

1740
01:13:03,040 --> 01:13:04,960
length and then give you a blob

1741
01:13:04,960 --> 01:13:07,199
or you know and go to a more specific a

1742
01:13:07,199 --> 01:13:08,800
type specific parser which you have to

1743
01:13:08,800 --> 01:13:10,000
have anyway

1744
01:13:10,000 --> 01:13:11,040
um

1745
01:13:11,040 --> 01:13:12,800
so i'm not sure that

1746
01:13:12,800 --> 01:13:14,480
the capsule protocol

1747
01:13:14,480 --> 01:13:15,199
like

1748
01:13:15,199 --> 01:13:16,800
that code i'm not worried about either

1749
01:13:16,800 --> 01:13:18,480
copy or pasting or templating or

1750
01:13:18,480 --> 01:13:19,760
whatever

1751
01:13:19,760 --> 01:13:22,239
the parsing of the type and length

1752
01:13:22,239 --> 01:13:24,800
it's more handling the specific type

1753
01:13:24,800 --> 01:13:26,400
types which i already have code for in

1754
01:13:26,400 --> 01:13:27,920
quick

1755
01:13:27,920 --> 01:13:29,920
and would rather just

1756
01:13:29,920 --> 01:13:31,440
reuse that

1757
01:13:31,440 --> 01:13:33,360
that's a lot more code to copy and paste

1758
01:13:33,360 --> 01:13:36,320
versus like getting out the the type end

1759
01:13:36,320 --> 01:13:38,960
length or in you know or if we decide we

1760
01:13:38,960 --> 01:13:40,960
really want length then length and type

1761
01:13:40,960 --> 01:13:42,480
would be my preference

1762
01:13:42,480 --> 01:13:43,760
um

1763
01:13:43,760 --> 01:13:45,840
so

1764
01:13:45,840 --> 01:13:48,000
right i think what we're deciding

1765
01:13:48,000 --> 01:13:49,679
between is effectively

1766
01:13:49,679 --> 01:13:53,520
length then type and keep final size or

1767
01:13:53,520 --> 01:13:57,360
type then length and cut final size

1768
01:13:57,360 --> 01:13:58,320
um

1769
01:13:58,320 --> 01:14:02,640
but it is is final size the only

1770
01:14:02,640 --> 01:14:03,760
field

1771
01:14:03,760 --> 01:14:05,760
that would be that is not the exact same

1772
01:14:05,760 --> 01:14:07,600
as quick

1773
01:14:07,600 --> 01:14:09,199
i'd have to double check when the sun is

1774
01:14:09,199 --> 01:14:11,360
up but if if it's not the only one there

1775
01:14:11,360 --> 01:14:15,320
aren't more than one or two others

1776
01:14:16,560 --> 01:14:17,920
yeah i mean if it's i don't know if it

1777
01:14:17,920 --> 01:14:20,239
was the only one it's one bite that you

1778
01:14:20,239 --> 01:14:23,040
would be sending in an error frame like

1779
01:14:23,040 --> 01:14:24,560
i just don't

1780
01:14:24,560 --> 01:14:26,960
i mean i would just keep it the same but

1781
01:14:26,960 --> 01:14:30,400
other people make different decisions

1782
01:14:30,880 --> 01:14:33,920
all right david

1783
01:14:34,560 --> 01:14:37,520
i would just to echo what uh

1784
01:14:37,520 --> 01:14:39,920
i have and i think empty uh have been

1785
01:14:39,920 --> 01:14:43,280
saying on the chat uh like given that

1786
01:14:43,280 --> 01:14:45,920
there are like six frame types that all

1787
01:14:45,920 --> 01:14:48,640
have like on the order of two to three

1788
01:14:48,640 --> 01:14:51,679
fields on average uh like

1789
01:14:51,679 --> 01:14:53,520
reusing the

1790
01:14:53,520 --> 01:14:55,600
quick frame parser

1791
01:14:55,600 --> 01:14:58,080
sounds like trying to shoehorn something

1792
01:14:58,080 --> 01:15:00,640
that doesn't fit so i would very much

1793
01:15:00,640 --> 01:15:02,480
push to like not have that as a

1794
01:15:02,480 --> 01:15:05,920
requirement and then just say we have a

1795
01:15:05,920 --> 01:15:07,199
different

1796
01:15:07,199 --> 01:15:09,280
uh encoding of the frames their

1797
01:15:09,280 --> 01:15:11,440
semantics are the same but we can have a

1798
01:15:11,440 --> 01:15:13,040
completely different encoding like when

1799
01:15:13,040 --> 01:15:15,679
it comes to processing these

1800
01:15:15,679 --> 01:15:18,159
uh frames like all the hard part is the

1801
01:15:18,159 --> 01:15:20,640
stream logic it's the flow control it's

1802
01:15:20,640 --> 01:15:23,120
the all that machinery which you can

1803
01:15:23,120 --> 01:15:26,159
reuse the parsing is like you know 0.1

1804
01:15:26,159 --> 01:15:28,000
percent of your code size at the end of

1805
01:15:28,000 --> 01:15:30,719
the day so i would very much push to

1806
01:15:30,719 --> 01:15:32,320
drop the trying to reuse the quick

1807
01:15:32,320 --> 01:15:33,840
parser and then things become a lot

1808
01:15:33,840 --> 01:15:36,320
simpler and it also avoids some kinds of

1809
01:15:36,320 --> 01:15:38,239
confusions down the road when you have

1810
01:15:38,239 --> 01:15:40,000
things yeah like final size or others

1811
01:15:40,000 --> 01:15:41,520
that could you know mean slowly

1812
01:15:41,520 --> 01:15:44,080
different things

1813
01:15:44,239 --> 01:15:45,679
i think that makes a lot of sense so i'm

1814
01:15:45,679 --> 01:15:47,199
i'm hearing

1815
01:15:47,199 --> 01:15:49,679
a overall lack of concern

1816
01:15:49,679 --> 01:15:52,320
with having it not look just like quick

1817
01:15:52,320 --> 01:15:53,679
and then people think it's it's a

1818
01:15:53,679 --> 01:15:55,440
reasonable thing if it's a little bit

1819
01:15:55,440 --> 01:15:56,320
different

1820
01:15:56,320 --> 01:15:57,120
um

1821
01:15:57,120 --> 01:15:58,960
and that we sidestep any of the

1822
01:15:58,960 --> 01:16:00,719
negotiation issues by having a length in

1823
01:16:00,719 --> 01:16:03,920
there and can just keep going

1824
01:16:03,920 --> 01:16:04,960
all right

1825
01:16:04,960 --> 01:16:08,480
thank you all next slide please

1826
01:16:09,920 --> 01:16:12,000
for our next issue as david alluded to

1827
01:16:12,000 --> 01:16:14,800
earlier uh if we have this type and

1828
01:16:14,800 --> 01:16:16,239
we're not sticking the length in front

1829
01:16:16,239 --> 01:16:18,800
to try to do anything cutesy um the

1830
01:16:18,800 --> 01:16:21,600
thing we were just looking at happens to

1831
01:16:21,600 --> 01:16:24,080
kind of already be a capsule

1832
01:16:24,080 --> 01:16:25,679
and so effectively

1833
01:16:25,679 --> 01:16:26,960
my understanding of what we're doing

1834
01:16:26,960 --> 01:16:30,000
here is saying yeah previously when we

1835
01:16:30,000 --> 01:16:31,840
defined these frames we used the exact

1836
01:16:31,840 --> 01:16:33,679
frame types from quick but now we're

1837
01:16:33,679 --> 01:16:35,760
going to just register them as capsules

1838
01:16:35,760 --> 01:16:37,679
and keep going so it sounds like this

1839
01:16:37,679 --> 01:16:39,280
probably falls out from what we're doing

1840
01:16:39,280 --> 01:16:40,960
before but i thought we'd stop and talk

1841
01:16:40,960 --> 01:16:43,120
about it just in case anybody

1842
01:16:43,120 --> 01:16:44,480
feels really strongly one way or the

1843
01:16:44,480 --> 01:16:45,360
other

1844
01:16:45,360 --> 01:16:47,280
so

1845
01:16:47,280 --> 01:16:48,480
basically

1846
01:16:48,480 --> 01:16:51,199
assuming whatever is going on in mask we

1847
01:16:51,199 --> 01:16:54,159
resolve and come to a

1848
01:16:54,159 --> 01:16:56,159
adequate consensus on

1849
01:16:56,159 --> 01:16:59,440
for where http datagrams are going

1850
01:16:59,440 --> 01:17:01,600
what this will end up looking like

1851
01:17:01,600 --> 01:17:02,400
is

1852
01:17:02,400 --> 01:17:04,080
you make this connect stream and then

1853
01:17:04,080 --> 01:17:05,760
you start sending capsules which are

1854
01:17:05,760 --> 01:17:07,760
effectively just the web transport

1855
01:17:07,760 --> 01:17:09,920
frames that we've been defining

1856
01:17:09,920 --> 01:17:12,239
um and we're just gonna say one capsule

1857
01:17:12,239 --> 01:17:14,400
is one web transport frame

1858
01:17:14,400 --> 01:17:16,480
effectively types are kind of in this

1859
01:17:16,480 --> 01:17:18,080
more shared place but otherwise we're

1860
01:17:18,080 --> 01:17:18,960
good

1861
01:17:18,960 --> 01:17:21,280
uh and then

1862
01:17:21,280 --> 01:17:24,000
the other question there is do we make

1863
01:17:24,000 --> 01:17:26,000
web transport datagram

1864
01:17:26,000 --> 01:17:27,280
be its own

1865
01:17:27,280 --> 01:17:29,679
thing or do we just use the actual

1866
01:17:29,679 --> 01:17:31,679
datagram datagram

1867
01:17:31,679 --> 01:17:34,159
from http datagram land

1868
01:17:34,159 --> 01:17:37,440
and i see alan is in the queue

1869
01:17:39,280 --> 01:17:42,239
i i mean i really i'm not sure

1870
01:17:42,239 --> 01:17:45,199
what the value capsule brings here even

1871
01:17:45,199 --> 01:17:47,040
if the format is defined exactly the

1872
01:17:47,040 --> 01:17:50,880
same it now means we have to register

1873
01:17:50,880 --> 01:17:53,040
our type the types for this protocol in

1874
01:17:53,040 --> 01:17:55,120
a global place

1875
01:17:55,120 --> 01:17:57,120
when i don't know that that it's not

1876
01:17:57,120 --> 01:17:58,640
like some other protocol is going to

1877
01:17:58,640 --> 01:18:00,880
want to parse these frames

1878
01:18:00,880 --> 01:18:03,120
in their capsule handling

1879
01:18:03,120 --> 01:18:04,080
um

1880
01:18:04,080 --> 01:18:06,239
nor would we really want to handle their

1881
01:18:06,239 --> 01:18:08,159
capsules in ours so even though they

1882
01:18:08,159 --> 01:18:09,520
look the same

1883
01:18:09,520 --> 01:18:11,760
i don't think they need to be the same

1884
01:18:11,760 --> 01:18:12,640
and

1885
01:18:12,640 --> 01:18:15,120
uh if we were saying that it's no big

1886
01:18:15,120 --> 01:18:17,520
deal to copy and paste your quick parser

1887
01:18:17,520 --> 01:18:19,199
then it's definitely no big deal to copy

1888
01:18:19,199 --> 01:18:22,480
and paste your capsule parser

1889
01:18:22,880 --> 01:18:24,320
and there there's one other thing that

1890
01:18:24,320 --> 01:18:26,159
comes up there as well we had some

1891
01:18:26,159 --> 01:18:27,440
interesting conversations around

1892
01:18:27,440 --> 01:18:29,440
capsules and intermediaries but we're

1893
01:18:29,440 --> 01:18:31,600
doing all of this over a connect stream

1894
01:18:31,600 --> 01:18:34,640
already so

1895
01:18:38,560 --> 01:18:40,960
david's

1896
01:18:43,120 --> 01:18:46,960
well so i mean not to open up the uh

1897
01:18:46,960 --> 01:18:48,640
capsule discussion that we are having in

1898
01:18:48,640 --> 01:18:50,560
mask and that we will be having as part

1899
01:18:50,560 --> 01:18:53,360
of the uh masked http datagrams design

1900
01:18:53,360 --> 01:18:54,400
team

1901
01:18:54,400 --> 01:18:57,600
but um in general

1902
01:18:57,600 --> 01:18:58,960
um my

1903
01:18:58,960 --> 01:19:01,760
i think a lot of this comes down to

1904
01:19:01,760 --> 01:19:04,000
what your plans are for getting across

1905
01:19:04,000 --> 01:19:07,120
intermediaries um if at the end of the

1906
01:19:07,120 --> 01:19:09,840
day uh for let's say you know if you

1907
01:19:09,840 --> 01:19:12,560
have like an h2 to h1 through an

1908
01:19:12,560 --> 01:19:14,080
intermediary

1909
01:19:14,080 --> 01:19:16,000
are you saying if you're saying that web

1910
01:19:16,000 --> 01:19:18,800
transport needs to be done

1911
01:19:18,800 --> 01:19:20,960
reimplemented on each hop as opposed to

1912
01:19:20,960 --> 01:19:22,480
it can go through intermediaries

1913
01:19:22,480 --> 01:19:23,679
seamlessly

1914
01:19:23,679 --> 01:19:25,120
that kind of

1915
01:19:25,120 --> 01:19:26,800
changes the outcome here because

1916
01:19:26,800 --> 01:19:28,560
capsules gives you a

1917
01:19:28,560 --> 01:19:29,280
the

1918
01:19:29,280 --> 01:19:31,840
the justification and motivation for

1919
01:19:31,840 --> 01:19:33,280
having capsules as a shared

1920
01:19:33,280 --> 01:19:34,800
infrastructure layer

1921
01:19:34,800 --> 01:19:36,480
is the idea that they go through

1922
01:19:36,480 --> 01:19:40,080
intermediaries just unchanged simply

1923
01:19:40,080 --> 01:19:41,520
and so that way if you get on that

1924
01:19:41,520 --> 01:19:44,320
bandwagon yeah you use the general

1925
01:19:44,320 --> 01:19:45,760
capsule registry so you don't need to

1926
01:19:45,760 --> 01:19:47,760
have your own iana registry which saves

1927
01:19:47,760 --> 01:19:50,800
some work there and then they just you

1928
01:19:50,800 --> 01:19:52,000
know you put them in your stream they

1929
01:19:52,000 --> 01:19:53,679
get across to the other side you don't

1930
01:19:53,679 --> 01:19:54,719
need to worry about things like

1931
01:19:54,719 --> 01:19:56,159
intermediaries

1932
01:19:56,159 --> 01:19:58,719
but you know that comes down to

1933
01:19:58,719 --> 01:20:00,560
if we instead say well transport needs

1934
01:20:00,560 --> 01:20:02,159
to be re-implemented for each german

1935
01:20:02,159 --> 01:20:04,560
area especially between h2 and h1 then

1936
01:20:04,560 --> 01:20:07,199
that is a bit less attractive

1937
01:20:07,199 --> 01:20:09,440
so clarification question there we're

1938
01:20:09,440 --> 01:20:12,719
not talking a whole ton about h1

1939
01:20:12,719 --> 01:20:14,800
specifically here because we've been

1940
01:20:14,800 --> 01:20:17,120
continuing to focus on h2 to keep from

1941
01:20:17,120 --> 01:20:19,679
expanding super rapidly as we type all

1942
01:20:19,679 --> 01:20:20,560
this in

1943
01:20:20,560 --> 01:20:24,159
but if i weren't using capsules and i

1944
01:20:24,159 --> 01:20:27,760
sent connect to an intermediary that

1945
01:20:27,760 --> 01:20:31,360
then was doing h1 to the back end and it

1946
01:20:31,360 --> 01:20:34,400
made a sensibly tcp connection somewhere

1947
01:20:34,400 --> 01:20:36,400
and started sending my web transport

1948
01:20:36,400 --> 01:20:37,679
frames are you saying that's

1949
01:20:37,679 --> 01:20:39,440
meaningfully different if we call those

1950
01:20:39,440 --> 01:20:42,799
web transport frames capsules

1951
01:20:43,199 --> 01:20:45,440
um

1952
01:20:45,760 --> 01:20:48,560
the the meaningful difference is that it

1953
01:20:48,560 --> 01:20:50,880
so first off you're right that like if

1954
01:20:50,880 --> 01:20:53,760
we're just focusing on h2 it's not as

1955
01:20:53,760 --> 01:20:55,679
bored but i guess you know if h2 to h2

1956
01:20:55,679 --> 01:20:57,600
have an intermediary in the middle

1957
01:20:57,600 --> 01:21:00,880
uh it's if you're using capsules and we

1958
01:21:00,880 --> 01:21:03,679
you know i'm waving my magic wand and we

1959
01:21:03,679 --> 01:21:06,000
have defined a you know generic capsule

1960
01:21:06,000 --> 01:21:07,360
thing where you tell the intermediary

1961
01:21:07,360 --> 01:21:09,040
with a simple way oh yeah this is a

1962
01:21:09,040 --> 01:21:10,639
capsule protocol then i will just be

1963
01:21:10,639 --> 01:21:13,120
forwarding these to the corresponding

1964
01:21:13,120 --> 01:21:14,880
connect stream on the up bound

1965
01:21:14,880 --> 01:21:16,000
connection

1966
01:21:16,000 --> 01:21:18,239
um then you get that you know forwarding

1967
01:21:18,239 --> 01:21:21,920
property for free um whereas if you

1968
01:21:21,920 --> 01:21:24,080
don't then you need a more you know web

1969
01:21:24,080 --> 01:21:26,400
transport specific uh

1970
01:21:26,400 --> 01:21:29,440
handling at that layer

1971
01:21:29,440 --> 01:21:30,719
thank you

1972
01:21:30,719 --> 01:21:33,679
okay we can also uh have this sit until

1973
01:21:33,679 --> 01:21:35,440
the design team and mask comes out which

1974
01:21:35,440 --> 01:21:36,320
is probably something we're going to

1975
01:21:36,320 --> 01:21:39,040
want to do either way

1976
01:21:39,920 --> 01:21:43,199
yeah to add a quick note on that our

1977
01:21:43,199 --> 01:21:45,040
goal is to have that mass design team

1978
01:21:45,040 --> 01:21:46,960
happen very soon like most likely next

1979
01:21:46,960 --> 01:21:49,440
week so just this would be a small delay

1980
01:21:49,440 --> 01:21:51,520
and i think that makes sense um

1981
01:21:51,520 --> 01:21:53,040
sorry

1982
01:21:53,040 --> 01:21:54,880
just the last thing i want to to add

1983
01:21:54,880 --> 01:21:56,639
here is that

1984
01:21:56,639 --> 01:21:58,480
that what you're describing the like oh

1985
01:21:58,480 --> 01:22:01,120
i if i need to get the bits from

1986
01:22:01,120 --> 01:22:02,560
i don't want to participate in this

1987
01:22:02,560 --> 01:22:04,000
thing and i need to get the bits from

1988
01:22:04,000 --> 01:22:05,920
one side to the other

1989
01:22:05,920 --> 01:22:07,520
that is already free

1990
01:22:07,520 --> 01:22:09,520
because it's on a data stream and that's

1991
01:22:09,520 --> 01:22:12,400
what intermediaries do right they take

1992
01:22:12,400 --> 01:22:14,000
data from one side and they put it to

1993
01:22:14,000 --> 01:22:15,280
the other side and they're not

1994
01:22:15,280 --> 01:22:16,719
participating anyway they're not parsing

1995
01:22:16,719 --> 01:22:18,800
these things it's fine

1996
01:22:18,800 --> 01:22:20,320
the only reason they would ever need to

1997
01:22:20,320 --> 01:22:21,600
parse them

1998
01:22:21,600 --> 01:22:24,960
is if they were actually participating

1999
01:22:24,960 --> 01:22:26,080
in the protocol because they have to

2000
01:22:26,080 --> 01:22:27,199
understand it

2001
01:22:27,199 --> 01:22:28,320
anyway

2002
01:22:28,320 --> 01:22:31,440
um so again i just don't i don't think

2003
01:22:31,440 --> 01:22:33,040
the only thing i think a cap bringing

2004
01:22:33,040 --> 01:22:34,480
account even if they look exactly the

2005
01:22:34,480 --> 01:22:37,199
same and you overlaid capsules here all

2006
01:22:37,199 --> 01:22:39,199
that would mean is we need to register

2007
01:22:39,199 --> 01:22:41,280
our type in some other global type and

2008
01:22:41,280 --> 01:22:43,199
then we i don't know not sure why we

2009
01:22:43,199 --> 01:22:45,040
care what our type numbers are but like

2010
01:22:45,040 --> 01:22:46,560
we have the sort of global registry of

2011
01:22:46,560 --> 01:22:47,920
things that can never appear in the same

2012
01:22:47,920 --> 01:22:50,920
place

2013
01:22:52,239 --> 01:22:53,760
all right

2014
01:22:53,760 --> 01:22:55,360
so it sounds like we're gonna sit on

2015
01:22:55,360 --> 01:22:56,960
this until we hear

2016
01:22:56,960 --> 01:22:58,560
which way we're jumping over and mask

2017
01:22:58,560 --> 01:22:59,600
either way

2018
01:22:59,600 --> 01:23:00,719
um

2019
01:23:00,719 --> 01:23:02,000
but

2020
01:23:02,000 --> 01:23:03,520
let's take some of this discussion onto

2021
01:23:03,520 --> 01:23:05,360
the issue and see if we can actually

2022
01:23:05,360 --> 01:23:07,760
write down i know some of what you were

2023
01:23:07,760 --> 01:23:08,719
just saying

2024
01:23:08,719 --> 01:23:11,120
um david might be worth putting in the

2025
01:23:11,120 --> 01:23:13,120
issue so that we have you know something

2026
01:23:13,120 --> 01:23:14,800
we can refer to later and say okay

2027
01:23:14,800 --> 01:23:16,480
here's the kind of concrete difference

2028
01:23:16,480 --> 01:23:18,880
between these approaches

2029
01:23:18,880 --> 01:23:22,560
all right next slide please

2030
01:23:27,040 --> 01:23:28,800
so this is where we start getting into

2031
01:23:28,800 --> 01:23:30,400
some interesting questions where

2032
01:23:30,400 --> 01:23:31,920
eventually we'll talk about this with

2033
01:23:31,920 --> 01:23:33,679
http 3 as well

2034
01:23:33,679 --> 01:23:35,679
so

2035
01:23:35,679 --> 01:23:36,960
right now

2036
01:23:36,960 --> 01:23:38,560
as i was saying a minute ago we're kind

2037
01:23:38,560 --> 01:23:41,199
of at one end of the spectrum in that

2038
01:23:41,199 --> 01:23:42,080
we've

2039
01:23:42,080 --> 01:23:44,239
pulled all of these things into that

2040
01:23:44,239 --> 01:23:46,400
connect stream so there's the

2041
01:23:46,400 --> 01:23:48,719
you know sequence of data frames that is

2042
01:23:48,719 --> 01:23:50,880
this web transport session

2043
01:23:50,880 --> 01:23:53,600
and the lifetime of that connect stream

2044
01:23:53,600 --> 01:23:55,199
wherever you are on the spectrum is

2045
01:23:55,199 --> 01:23:56,639
going to determine the lifetime of this

2046
01:23:56,639 --> 01:23:58,880
web transport session but

2047
01:23:58,880 --> 01:24:00,239
we're currently

2048
01:24:00,239 --> 01:24:02,400
we have retracted everything back into

2049
01:24:02,400 --> 01:24:04,560
that uh into that connect stream and

2050
01:24:04,560 --> 01:24:06,880
that makes a whole lot of things

2051
01:24:06,880 --> 01:24:08,719
fall out rather nicely like flow control

2052
01:24:08,719 --> 01:24:10,239
becomes fairly elegant and a bunch of

2053
01:24:10,239 --> 01:24:12,800
other stuff pooling is a non-issue um

2054
01:24:12,800 --> 01:24:13,920
there's all sorts of things that are

2055
01:24:13,920 --> 01:24:15,600
nice about that

2056
01:24:15,600 --> 01:24:16,560
but

2057
01:24:16,560 --> 01:24:19,199
part of how we got here through

2058
01:24:19,199 --> 01:24:20,320
what we've been calling the web

2059
01:24:20,320 --> 01:24:23,440
transport framework um is effectively

2060
01:24:23,440 --> 01:24:25,120
that

2061
01:24:25,120 --> 01:24:26,000
you know

2062
01:24:26,000 --> 01:24:28,320
we can have a fallback or something like

2063
01:24:28,320 --> 01:24:29,280
this

2064
01:24:29,280 --> 01:24:32,159
but we want to be able to

2065
01:24:32,159 --> 01:24:35,120
use the native implementation of things

2066
01:24:35,120 --> 01:24:38,719
the example here being http 3 with http

2067
01:24:38,719 --> 01:24:41,040
3 datagrams

2068
01:24:41,040 --> 01:24:42,800
we want to be able to send actual

2069
01:24:42,800 --> 01:24:45,679
datagrams when we're over something

2070
01:24:45,679 --> 01:24:48,400
where the transport does have support

2071
01:24:48,400 --> 01:24:51,760
for that capability so

2072
01:24:51,760 --> 01:24:53,600
when you pack your web transport

2073
01:24:53,600 --> 01:24:55,199
datagram frames

2074
01:24:55,199 --> 01:24:57,840
into your h2 data frames and send them

2075
01:24:57,840 --> 01:24:59,760
on your connect stream they're not

2076
01:24:59,760 --> 01:25:02,239
actually unreliable um

2077
01:25:02,239 --> 01:25:03,840
they can be unreliable when they get

2078
01:25:03,840 --> 01:25:06,480
somewhere and you know flow control

2079
01:25:06,480 --> 01:25:08,000
has some interesting

2080
01:25:08,000 --> 01:25:09,760
lack of application and so they may be

2081
01:25:09,760 --> 01:25:10,880
dropped

2082
01:25:10,880 --> 01:25:12,400
but they're not going to get lost in a

2083
01:25:12,400 --> 01:25:16,080
lost packet that is not retransmitted

2084
01:25:16,080 --> 01:25:17,920
so

2085
01:25:17,920 --> 01:25:21,280
with that said h2 does provide native

2086
01:25:21,280 --> 01:25:23,760
streams and so if you take all of our

2087
01:25:23,760 --> 01:25:26,239
words and don't really think too hard

2088
01:25:26,239 --> 01:25:28,960
about it you could assume okay well if

2089
01:25:28,960 --> 01:25:30,639
there are native streams even if there

2090
01:25:30,639 --> 01:25:33,120
aren't native datagrams then we should

2091
01:25:33,120 --> 01:25:35,600
split out every web transport stream

2092
01:25:35,600 --> 01:25:38,719
into a native h2 stream

2093
01:25:38,719 --> 01:25:39,679
and

2094
01:25:39,679 --> 01:25:42,000
the last bullet on this slide kind of

2095
01:25:42,000 --> 01:25:44,159
goes to where we are right now which is

2096
01:25:44,159 --> 01:25:46,320
we didn't actually do that because there

2097
01:25:46,320 --> 01:25:48,880
didn't seem to be significant benefit

2098
01:25:48,880 --> 01:25:50,639
from doing so

2099
01:25:50,639 --> 01:25:51,520
so

2100
01:25:51,520 --> 01:25:53,360
if anybody feels strongly that we need

2101
01:25:53,360 --> 01:25:55,360
to do that

2102
01:25:55,360 --> 01:25:58,480
now would be a time to speak up but

2103
01:25:58,480 --> 01:26:00,800
unless somebody can see a significant

2104
01:26:00,800 --> 01:26:02,719
benefit for us doing that

2105
01:26:02,719 --> 01:26:04,320
there's obviously benefit for doing that

2106
01:26:04,320 --> 01:26:05,679
for datagrams

2107
01:26:05,679 --> 01:26:07,840
but for streams themselves it doesn't

2108
01:26:07,840 --> 01:26:10,159
seem like it it really helps one way or

2109
01:26:10,159 --> 01:26:11,360
the other and there's all sorts of nice

2110
01:26:11,360 --> 01:26:12,639
benefits to having them inside the

2111
01:26:12,639 --> 01:26:15,120
connect stream

2112
01:26:20,000 --> 01:26:22,400
all right we'll take that as a

2113
01:26:22,400 --> 01:26:26,000
happy moment next slide please

2114
01:26:28,480 --> 01:26:31,199
so we have an issue in github and i

2115
01:26:31,199 --> 01:26:32,880
think this is one of our last ones here

2116
01:26:32,880 --> 01:26:34,320
that we're going to talk about but we

2117
01:26:34,320 --> 01:26:36,960
have an issue in github to write up

2118
01:26:36,960 --> 01:26:39,040
um kind of how flow control works with

2119
01:26:39,040 --> 01:26:40,639
this whole thing

2120
01:26:40,639 --> 01:26:42,639
um and so i wanted to just kind of talk

2121
01:26:42,639 --> 01:26:44,000
through that and make sure that

2122
01:26:44,000 --> 01:26:45,760
everybody's comfortable with where we

2123
01:26:45,760 --> 01:26:48,400
think we are um and how this is going to

2124
01:26:48,400 --> 01:26:51,840
interact with some of the pooling so

2125
01:26:51,840 --> 01:26:53,280
you end up with

2126
01:26:53,280 --> 01:26:54,400
four

2127
01:26:54,400 --> 01:26:57,360
nested layers of flow control which is

2128
01:26:57,360 --> 01:26:59,679
rather a lot but does mean that each

2129
01:26:59,679 --> 01:27:01,199
concept

2130
01:27:01,199 --> 01:27:05,440
and each kind of scope if you will uh

2131
01:27:05,440 --> 01:27:07,679
gets its own level of control and you

2132
01:27:07,679 --> 01:27:10,239
can do exactly what you want so

2133
01:27:10,239 --> 01:27:11,920
i drew a picture for this on the next

2134
01:27:11,920 --> 01:27:14,159
slide in case it's more interesting so

2135
01:27:14,159 --> 01:27:17,799
if we go there

2136
01:27:19,120 --> 01:27:20,639
so this is kind of

2137
01:27:20,639 --> 01:27:21,520
the

2138
01:27:21,520 --> 01:27:23,520
diagram from earlier but i

2139
01:27:23,520 --> 01:27:25,520
squished the two of them together and if

2140
01:27:25,520 --> 01:27:28,800
we advance one more slide

2141
01:27:30,239 --> 01:27:32,800
i added some pretty colors uh so you

2142
01:27:32,800 --> 01:27:35,840
effectively have flow control

2143
01:27:35,840 --> 01:27:37,440
where

2144
01:27:37,440 --> 01:27:39,360
there's you know the h2 connection

2145
01:27:39,360 --> 01:27:42,159
that's governing everything across

2146
01:27:42,159 --> 01:27:44,719
all of h2 that's

2147
01:27:44,719 --> 01:27:47,440
uh useful for saying you know here's how

2148
01:27:47,440 --> 01:27:49,440
much you can send across all web

2149
01:27:49,440 --> 01:27:51,679
transport sessions that are going on

2150
01:27:51,679 --> 01:27:54,719
then there's the connect stream itself

2151
01:27:54,719 --> 01:27:58,159
um and so that one you know

2152
01:27:58,159 --> 01:28:00,960
contains an entire web transport session

2153
01:28:00,960 --> 01:28:03,760
and that allows you to limit

2154
01:28:03,760 --> 01:28:06,480
the amount of data for that whole web

2155
01:28:06,480 --> 01:28:08,560
transport session um and that's

2156
01:28:08,560 --> 01:28:10,159
especially useful when we talk about

2157
01:28:10,159 --> 01:28:11,679
cooling and things like that right so

2158
01:28:11,679 --> 01:28:14,400
those kind of outer two boxes are the

2159
01:28:14,400 --> 01:28:16,719
things that allow you to have multiple

2160
01:28:16,719 --> 01:28:19,440
web transport sessions and express the

2161
01:28:19,440 --> 01:28:21,360
relationships between them

2162
01:28:21,360 --> 01:28:22,400
um

2163
01:28:22,400 --> 01:28:24,080
then the next two colors are within a

2164
01:28:24,080 --> 01:28:25,520
web transport session you have the kind

2165
01:28:25,520 --> 01:28:27,120
of overall session level flow control

2166
01:28:27,120 --> 01:28:30,639
which is analogous um to what

2167
01:28:30,639 --> 01:28:32,719
quick is doing or a little bit like what

2168
01:28:32,719 --> 01:28:34,960
h2 is doing which allows you to control

2169
01:28:34,960 --> 01:28:36,480
the total across all of the web

2170
01:28:36,480 --> 01:28:39,120
transport streams um and then each

2171
01:28:39,120 --> 01:28:40,639
stream obviously has its own flow

2172
01:28:40,639 --> 01:28:42,880
control so

2173
01:28:42,880 --> 01:28:44,880
that ends up being a lot of flow control

2174
01:28:44,880 --> 01:28:46,000
but

2175
01:28:46,000 --> 01:28:47,520
with all of that

2176
01:28:47,520 --> 01:28:49,520
possibility to potentially screw things

2177
01:28:49,520 --> 01:28:52,000
up you also have the ability to control

2178
01:28:52,000 --> 01:28:53,520
all of these relationships between the

2179
01:28:53,520 --> 01:28:54,639
different

2180
01:28:54,639 --> 01:28:56,000
things and you can have multiple web

2181
01:28:56,000 --> 01:28:57,520
transport sessions and they can all be

2182
01:28:57,520 --> 01:28:59,760
pooled and you have limits on the number

2183
01:28:59,760 --> 01:29:01,840
of streams that can be established both

2184
01:29:01,840 --> 01:29:04,800
within web transport streams and within

2185
01:29:04,800 --> 01:29:08,080
h2 for the connect streams um so

2186
01:29:08,080 --> 01:29:10,080
without a whole lot of extra effort or

2187
01:29:10,080 --> 01:29:11,679
anything like that kind of the existing

2188
01:29:11,679 --> 01:29:15,360
model that you're using for h2 and for

2189
01:29:15,360 --> 01:29:18,639
quick um applies respectively here

2190
01:29:18,639 --> 01:29:19,679
um

2191
01:29:19,679 --> 01:29:21,520
and

2192
01:29:21,520 --> 01:29:23,199
much of the pooling questions become

2193
01:29:23,199 --> 01:29:27,839
moot and we continue on our merry way

2194
01:29:28,159 --> 01:29:29,840
so the current proposal here is we're

2195
01:29:29,840 --> 01:29:31,120
going to write up a bunch of text that

2196
01:29:31,120 --> 01:29:34,159
describes how this works to help people

2197
01:29:34,159 --> 01:29:36,320
go in eyes wide open and make sure that

2198
01:29:36,320 --> 01:29:38,960
we avoid any of the kind of common

2199
01:29:38,960 --> 01:29:41,360
pitfalls

2200
01:29:41,360 --> 01:29:42,719
but unless

2201
01:29:42,719 --> 01:29:44,800
folks have strong objections or feel

2202
01:29:44,800 --> 01:29:46,960
strongly that this should be different

2203
01:29:46,960 --> 01:29:50,600
it seems pretty workable

2204
01:29:55,920 --> 01:29:57,440
and in the absence of anyone in the

2205
01:29:57,440 --> 01:29:59,120
queue we'll take that as being workable

2206
01:29:59,120 --> 01:30:02,239
all right next slide please

2207
01:30:03,920 --> 01:30:07,120
so we have an issue on github for doing

2208
01:30:07,120 --> 01:30:09,600
some error handling to which the initial

2209
01:30:09,600 --> 01:30:11,360
response is yeah we should probably do

2210
01:30:11,360 --> 01:30:12,239
that

2211
01:30:12,239 --> 01:30:13,120
so

2212
01:30:13,120 --> 01:30:14,480
the

2213
01:30:14,480 --> 01:30:16,000
existing

2214
01:30:16,000 --> 01:30:19,280
draft we did not import all of the

2215
01:30:19,280 --> 01:30:21,199
error handling from quick that goes

2216
01:30:21,199 --> 01:30:22,800
along with these frames and so we have

2217
01:30:22,800 --> 01:30:24,719
kind of an outstanding item of we need

2218
01:30:24,719 --> 01:30:26,560
to import that over but we wanted to

2219
01:30:26,560 --> 01:30:29,040
talk a little bit about the shape of how

2220
01:30:29,040 --> 01:30:30,800
that should look

2221
01:30:30,800 --> 01:30:32,800
and interestingly we

2222
01:30:32,800 --> 01:30:35,280
had a conversation in h3 earlier this

2223
01:30:35,280 --> 01:30:38,080
morning about go away and some of that

2224
01:30:38,080 --> 01:30:40,560
for non-error cases

2225
01:30:40,560 --> 01:30:43,360
next slide please

2226
01:30:45,840 --> 01:30:47,199
so

2227
01:30:47,199 --> 01:30:52,000
we could bring along a go away here

2228
01:30:52,080 --> 01:30:54,960
we've got a way to

2229
01:30:54,960 --> 01:30:56,800
reset individual web transport streams

2230
01:30:56,800 --> 01:30:57,840
already

2231
01:30:57,840 --> 01:31:00,000
we've brought those frames over so

2232
01:31:00,000 --> 01:31:01,760
effectively

2233
01:31:01,760 --> 01:31:03,360
we could pull over

2234
01:31:03,360 --> 01:31:05,360
the closed web transport session capsule

2235
01:31:05,360 --> 01:31:07,520
this is the one from h3

2236
01:31:07,520 --> 01:31:09,520
we could just bring that over and say it

2237
01:31:09,520 --> 01:31:13,679
looks the same in h3 as it does in h2

2238
01:31:13,679 --> 01:31:15,199
there's a bunch of different ways we

2239
01:31:15,199 --> 01:31:17,040
could shape this so

2240
01:31:17,040 --> 01:31:19,040
the real question here is do we want

2241
01:31:19,040 --> 01:31:21,760
this to look just like we do in h3 do we

2242
01:31:21,760 --> 01:31:23,920
want to borrow things from how h2

2243
01:31:23,920 --> 01:31:25,920
handles some of these things

2244
01:31:25,920 --> 01:31:29,719
where do we want to go

2245
01:31:40,639 --> 01:31:43,639
alan

2246
01:31:44,480 --> 01:31:45,840
uh yeah i mean

2247
01:31:45,840 --> 01:31:48,639
this may also depend on where things go

2248
01:31:48,639 --> 01:31:51,199
with capsule um

2249
01:31:51,199 --> 01:31:51,920
so

2250
01:31:51,920 --> 01:31:54,480
whether or not we want to reuse that

2251
01:31:54,480 --> 01:31:56,718
thing

2252
01:31:57,040 --> 01:31:59,840
so i don't know

2253
01:32:02,480 --> 01:32:04,000
i think that makes some sense if if

2254
01:32:04,000 --> 01:32:06,719
we're sharing capsules with h3 and

2255
01:32:06,719 --> 01:32:08,159
especially if we start using these

2256
01:32:08,159 --> 01:32:12,320
capsules over h3 in some cases

2257
01:32:12,320 --> 01:32:14,000
the benefits of sharing those goes up

2258
01:32:14,000 --> 01:32:16,800
significantly

2259
01:32:20,639 --> 01:32:22,880
ian

2260
01:32:22,880 --> 01:32:24,639
seems like this

2261
01:32:24,639 --> 01:32:26,080
the same question is very relevant to

2262
01:32:26,080 --> 01:32:28,080
the hp3 mapping

2263
01:32:28,080 --> 01:32:29,760
so

2264
01:32:29,760 --> 01:32:32,400
um as much as possible shouldn't we make

2265
01:32:32,400 --> 01:32:34,800
sure our answers for the two are similar

2266
01:32:34,800 --> 01:32:37,520
or should they not be similar and

2267
01:32:37,520 --> 01:32:41,840
um i don't know yeah thoughts

2268
01:32:42,320 --> 01:32:43,440
i think that makes a lot of sense i

2269
01:32:43,440 --> 01:32:45,520
don't have any strong reason why they

2270
01:32:45,520 --> 01:32:48,080
shouldn't be similar which in my mind is

2271
01:32:48,080 --> 01:32:49,600
usually an indication that they should

2272
01:32:49,600 --> 01:32:52,600
match

2273
01:32:54,719 --> 01:32:57,120
martin

2274
01:32:59,440 --> 01:33:02,239
but you want to see what here one is

2275
01:33:02,239 --> 01:33:04,080
one is that things have gone poorly and

2276
01:33:04,080 --> 01:33:06,480
you want to tear the whole thing down

2277
01:33:06,480 --> 01:33:08,080
which is the thing you send before you

2278
01:33:08,080 --> 01:33:09,520
close the stream and

2279
01:33:09,520 --> 01:33:11,760
the h3

2280
01:33:11,760 --> 01:33:14,320
web transport thing already has that

2281
01:33:14,320 --> 01:33:16,639
we should have the same thing and if

2282
01:33:16,639 --> 01:33:17,520
we're

2283
01:33:17,520 --> 01:33:19,120
using the same format then we should use

2284
01:33:19,120 --> 01:33:21,440
the same message uh

2285
01:33:21,440 --> 01:33:23,280
just makes it easier to forward these

2286
01:33:23,280 --> 01:33:25,440
things right they're end-to-end signals

2287
01:33:25,440 --> 01:33:27,678
um

2288
01:33:28,080 --> 01:33:29,760
again the same applies to the go away

2289
01:33:29,760 --> 01:33:32,719
discussion that we have previously so uh

2290
01:33:32,719 --> 01:33:34,080
let's work out what the requirements

2291
01:33:34,080 --> 01:33:35,760
look like uh see what airline comes up

2292
01:33:35,760 --> 01:33:36,480
with

2293
01:33:36,480 --> 01:33:38,400
with respect to to go away and then

2294
01:33:38,400 --> 01:33:42,080
we'll we'll take it or not

2295
01:33:42,400 --> 01:33:43,920
i think that makes a lot of sense so

2296
01:33:43,920 --> 01:33:46,000
we're gonna effectively import whatever

2297
01:33:46,000 --> 01:33:48,400
we end up doing in h3 and our discussion

2298
01:33:48,400 --> 01:33:50,320
earlier was super relevant to this

2299
01:33:50,320 --> 01:33:52,719
victor

2300
01:33:53,679 --> 01:33:55,280
slight question about the slide what

2301
01:33:55,280 --> 01:33:58,000
does mean web transport over h3 shares

2302
01:33:58,000 --> 01:34:01,800
our space with h3

2303
01:34:04,239 --> 01:34:05,520
so

2304
01:34:05,520 --> 01:34:08,719
there's some text in the h3 document

2305
01:34:08,719 --> 01:34:10,719
right now or at least the version i was

2306
01:34:10,719 --> 01:34:13,280
looking at when doing some of this

2307
01:34:13,280 --> 01:34:14,239
um

2308
01:34:14,239 --> 01:34:15,840
where we

2309
01:34:15,840 --> 01:34:17,760
take a

2310
01:34:17,760 --> 01:34:21,920
error code and apply a transform to it

2311
01:34:21,920 --> 01:34:24,639
to be our actual error code

2312
01:34:24,639 --> 01:34:27,120
because we needed to put those errors

2313
01:34:27,120 --> 01:34:30,000
in the same registry in space as the

2314
01:34:30,000 --> 01:34:33,440
other h3 ones so note this is a

2315
01:34:33,440 --> 01:34:35,199
different error code this is for

2316
01:34:35,199 --> 01:34:38,159
resetting streams

2317
01:34:38,159 --> 01:34:39,360
not for

2318
01:34:39,360 --> 01:34:41,280
resetting the streams inside with

2319
01:34:41,280 --> 01:34:42,560
transport

2320
01:34:42,560 --> 01:34:44,719
the closer transport capsule is for

2321
01:34:44,719 --> 01:34:48,000
resetting this session

2322
01:34:48,000 --> 01:34:50,880
yes so i guess the question i would have

2323
01:34:50,880 --> 01:34:53,360
is uh

2324
01:34:53,760 --> 01:34:56,560
this is does this issue cover both

2325
01:34:56,560 --> 01:34:59,600
streams and

2326
01:34:59,679 --> 01:35:01,679
sessions

2327
01:35:01,679 --> 01:35:02,639
or

2328
01:35:02,639 --> 01:35:03,600
that's

2329
01:35:03,600 --> 01:35:04,880
that's not something that we've been

2330
01:35:04,880 --> 01:35:07,600
super clear about but i think

2331
01:35:07,600 --> 01:35:09,679
the the short answer is yes

2332
01:35:09,679 --> 01:35:10,480
um

2333
01:35:10,480 --> 01:35:11,920
we've

2334
01:35:11,920 --> 01:35:14,480
we need to be able to to

2335
01:35:14,480 --> 01:35:16,960
uh remove a stream and we need to be

2336
01:35:16,960 --> 01:35:20,159
able to say this is very bad you just uh

2337
01:35:20,159 --> 01:35:21,280
you know did something that doesn't

2338
01:35:21,280 --> 01:35:23,360
align with the spec or or broker

2339
01:35:23,360 --> 01:35:25,280
requirement that i had and the whole

2340
01:35:25,280 --> 01:35:26,560
thing is over and we're not going to be

2341
01:35:26,560 --> 01:35:28,560
talking anymore

2342
01:35:28,560 --> 01:35:31,280
so this this issue

2343
01:35:31,280 --> 01:35:33,040
i think the original intent of the issue

2344
01:35:33,040 --> 01:35:34,800
was was for the i need to tear down the

2345
01:35:34,800 --> 01:35:37,440
session um but we need to have the

2346
01:35:37,440 --> 01:35:39,679
ability for people to do both and we've

2347
01:35:39,679 --> 01:35:40,800
got that

2348
01:35:40,800 --> 01:35:42,400
pretty well spelled out i think for

2349
01:35:42,400 --> 01:35:44,639
streams

2350
01:35:44,639 --> 01:35:45,679
but

2351
01:35:45,679 --> 01:35:47,920
obviously we shouldn't jump in one

2352
01:35:47,920 --> 01:35:49,440
direction strongly for streams in a

2353
01:35:49,440 --> 01:35:50,639
different direction strongly for the

2354
01:35:50,639 --> 01:35:52,960
session

2355
01:35:53,119 --> 01:35:55,360
uh

2356
01:35:55,360 --> 01:35:58,000
okay it sounds like i need to

2357
01:35:58,000 --> 01:36:00,480
take a closer read on the issue

2358
01:36:00,480 --> 01:36:03,119
uh thank you

2359
01:36:04,960 --> 01:36:06,480
all right

2360
01:36:06,480 --> 01:36:08,320
so it sounds like we're gonna see where

2361
01:36:08,320 --> 01:36:10,880
we wind up for

2362
01:36:10,880 --> 01:36:13,199
h3 getting rid of the whole session and

2363
01:36:13,199 --> 01:36:16,800
then import as much of that as we can

2364
01:36:16,800 --> 01:36:18,880
which seems totally reasonable

2365
01:36:18,880 --> 01:36:21,920
right next slide please

2366
01:36:22,639 --> 01:36:25,440
this is our overall discussion of any h2

2367
01:36:25,440 --> 01:36:27,119
things

2368
01:36:27,119 --> 01:36:29,119
assuming that there's nothing major that

2369
01:36:29,119 --> 01:36:31,760
anybody wants to bring up for h2

2370
01:36:31,760 --> 01:36:33,440
specifically we can move on to the next

2371
01:36:33,440 --> 01:36:35,678
bit

2372
01:36:36,239 --> 01:36:38,639
all right so this is kind of the

2373
01:36:38,639 --> 01:36:40,800
last section of this which is i think

2374
01:36:40,800 --> 01:36:43,520
what ian was alluding to earlier

2375
01:36:43,520 --> 01:36:47,199
um next slide please

2376
01:36:48,880 --> 01:36:51,880
so

2377
01:36:52,080 --> 01:36:55,520
of what we just did in moving to this

2378
01:36:55,520 --> 01:36:57,600
more layered model where we're

2379
01:36:57,600 --> 01:37:00,480
using web transport frames on top of

2380
01:37:00,480 --> 01:37:02,480
http 2 rather than adding additional

2381
01:37:02,480 --> 01:37:05,679
frames into http 2

2382
01:37:05,679 --> 01:37:06,400
is

2383
01:37:06,400 --> 01:37:08,239
we have now defined

2384
01:37:08,239 --> 01:37:11,760
a way that you can use http semantics

2385
01:37:11,760 --> 01:37:15,440
with ostensibly any http version not

2386
01:37:15,440 --> 01:37:17,280
just http 2

2387
01:37:17,280 --> 01:37:18,320
to

2388
01:37:18,320 --> 01:37:21,119
communicate via web transport frames

2389
01:37:21,119 --> 01:37:22,800
uh

2390
01:37:22,800 --> 01:37:25,040
with the other side

2391
01:37:25,040 --> 01:37:26,000
and

2392
01:37:26,000 --> 01:37:27,520
we've talked about

2393
01:37:27,520 --> 01:37:29,360
how that

2394
01:37:29,360 --> 01:37:30,800
works really nicely with flow control

2395
01:37:30,800 --> 01:37:32,480
when everything is kind of retracted

2396
01:37:32,480 --> 01:37:33,199
back

2397
01:37:33,199 --> 01:37:36,000
into that connect stream

2398
01:37:36,000 --> 01:37:37,600
or that connect

2399
01:37:37,600 --> 01:37:40,400
exchange message

2400
01:37:40,400 --> 01:37:42,080
and we've also talked

2401
01:37:42,080 --> 01:37:44,159
but not actually done

2402
01:37:44,159 --> 01:37:46,480
a lot about being able to split out to

2403
01:37:46,480 --> 01:37:49,760
use native features like datagrams in h3

2404
01:37:49,760 --> 01:37:51,280
and

2405
01:37:51,280 --> 01:37:53,360
maybe not doing that for streams in h2

2406
01:37:53,360 --> 01:37:54,080
but

2407
01:37:54,080 --> 01:37:56,159
you might choose to do that for streams

2408
01:37:56,159 --> 01:37:58,239
in h3 because you wanted some of the

2409
01:37:58,239 --> 01:38:00,480
benefits that h3 provides around you

2410
01:38:00,480 --> 01:38:02,400
know blocking between streams and that

2411
01:38:02,400 --> 01:38:05,440
sort of thing which doesn't exist for h2

2412
01:38:05,440 --> 01:38:06,880
and so the

2413
01:38:06,880 --> 01:38:09,440
the question we come back to is should

2414
01:38:09,440 --> 01:38:11,440
all of the mappings of web transport be

2415
01:38:11,440 --> 01:38:13,600
doing the same thing in other words

2416
01:38:13,600 --> 01:38:15,920
should this be the generic set of web

2417
01:38:15,920 --> 01:38:18,480
transport frames that you can speak

2418
01:38:18,480 --> 01:38:19,679
and

2419
01:38:19,679 --> 01:38:22,080
h3 might break those out into

2420
01:38:22,080 --> 01:38:24,400
datagrams and streams and otherwise look

2421
01:38:24,400 --> 01:38:28,080
very similar to what it does today

2422
01:38:28,080 --> 01:38:30,400
but should that be a version independent

2423
01:38:30,400 --> 01:38:32,080
thing and if we go to the next slide

2424
01:38:32,080 --> 01:38:34,400
please

2425
01:38:35,280 --> 01:38:37,199
try to capture a little bit of why we

2426
01:38:37,199 --> 01:38:38,800
might want to do this or why we might

2427
01:38:38,800 --> 01:38:40,639
not want to do this but i think there's

2428
01:38:40,639 --> 01:38:42,639
there's kind of two things going on that

2429
01:38:42,639 --> 01:38:44,320
are a little bit in conflict one of them

2430
01:38:44,320 --> 01:38:45,040
is

2431
01:38:45,040 --> 01:38:46,000
uh

2432
01:38:46,000 --> 01:38:46,960
that

2433
01:38:46,960 --> 01:38:49,440
if you are going through an intermediary

2434
01:38:49,440 --> 01:38:51,760
being able to do this you know using hp

2435
01:38:51,760 --> 01:38:54,000
semantics to talk to the remote end

2436
01:38:54,000 --> 01:38:55,199
allows you

2437
01:38:55,199 --> 01:38:56,159
to

2438
01:38:56,159 --> 01:38:58,080
ignore much of the pooling questions it

2439
01:38:58,080 --> 01:38:59,440
allows you to go through an intermediary

2440
01:38:59,440 --> 01:39:00,400
really nicely because you're just

2441
01:39:00,400 --> 01:39:03,119
sending web transport frames um in h2

2442
01:39:03,119 --> 01:39:04,719
you're just sending those inside of data

2443
01:39:04,719 --> 01:39:06,960
frames um but

2444
01:39:06,960 --> 01:39:07,840
that

2445
01:39:07,840 --> 01:39:10,159
your intermediary can go from h2 to h1

2446
01:39:10,159 --> 01:39:11,679
to h3 and back again and you don't

2447
01:39:11,679 --> 01:39:14,320
really need to care

2448
01:39:14,320 --> 01:39:16,159
i mentioned already pooling becomes much

2449
01:39:16,159 --> 01:39:17,840
less of an issue because all of the

2450
01:39:17,840 --> 01:39:20,480
limits about how you handle streams

2451
01:39:20,480 --> 01:39:22,639
are fine here

2452
01:39:22,639 --> 01:39:24,800
but then there's also some drawbacks to

2453
01:39:24,800 --> 01:39:26,719
this approach which are

2454
01:39:26,719 --> 01:39:29,040
if you've retracted everything inside of

2455
01:39:29,040 --> 01:39:31,440
this connect stream um

2456
01:39:31,440 --> 01:39:33,840
pooling isn't an issue but that's at

2457
01:39:33,840 --> 01:39:35,440
odds with splitting out datagrams and

2458
01:39:35,440 --> 01:39:36,880
splitting out streams and if you split

2459
01:39:36,880 --> 01:39:38,000
out the datagrams and just let out the

2460
01:39:38,000 --> 01:39:39,119
streams now you have to deal with the

2461
01:39:39,119 --> 01:39:40,639
pooling for them again

2462
01:39:40,639 --> 01:39:41,760
um

2463
01:39:41,760 --> 01:39:43,520
and

2464
01:39:43,520 --> 01:39:45,360
the real thing that i think

2465
01:39:45,360 --> 01:39:47,600
gave a lot of folks pause is how do we

2466
01:39:47,600 --> 01:39:49,360
negotiate which one you're doing like if

2467
01:39:49,360 --> 01:39:53,040
i'm implementing h3 do i

2468
01:39:53,040 --> 01:39:54,400
suddenly need

2469
01:39:54,400 --> 01:39:56,480
implementing web transport over h3 like

2470
01:39:56,480 --> 01:39:58,400
do i suddenly need to be able to handle

2471
01:39:58,400 --> 01:40:00,560
web transport frames coming in on a new

2472
01:40:00,560 --> 01:40:03,760
h3 stream and on

2473
01:40:03,760 --> 01:40:06,000
the original connect stream that that's

2474
01:40:06,000 --> 01:40:07,199
carrying the lifetime of the web

2475
01:40:07,199 --> 01:40:08,560
transport session

2476
01:40:08,560 --> 01:40:09,760
and

2477
01:40:09,760 --> 01:40:11,360
that's kind of annoying

2478
01:40:11,360 --> 01:40:13,040
and like could the same web transport

2479
01:40:13,040 --> 01:40:14,800
session do some things in one place and

2480
01:40:14,800 --> 01:40:16,159
some things in the other place or do we

2481
01:40:16,159 --> 01:40:17,679
negotiate that like i'm doing this in

2482
01:40:17,679 --> 01:40:18,800
this mode

2483
01:40:18,800 --> 01:40:19,679
um

2484
01:40:19,679 --> 01:40:21,199
where do we want to go

2485
01:40:21,199 --> 01:40:23,040
from here so i believe the next slide is

2486
01:40:23,040 --> 01:40:26,080
just a discuss slide

2487
01:40:27,920 --> 01:40:29,440
yeah so if we go back one just so we

2488
01:40:29,440 --> 01:40:32,560
have our kind of pros and cons things

2489
01:40:32,560 --> 01:40:34,400
where do we want to go with this

2490
01:40:34,400 --> 01:40:36,480
like we don't have to touch h3 at all

2491
01:40:36,480 --> 01:40:37,679
but there is

2492
01:40:37,679 --> 01:40:40,159
some architectural elegance to having

2493
01:40:40,159 --> 01:40:41,440
the same thing that is version

2494
01:40:41,440 --> 01:40:43,920
independent and the mapping of it onto

2495
01:40:43,920 --> 01:40:47,040
h3 provides these native capabilities

2496
01:40:47,040 --> 01:40:49,040
um and it happens to solve a number of

2497
01:40:49,040 --> 01:40:50,480
other issues

2498
01:40:50,480 --> 01:40:52,960
so i'm going to

2499
01:40:52,960 --> 01:40:55,440
hand over the q and the mics to the

2500
01:40:55,440 --> 01:40:56,719
chairs here because i think this is a

2501
01:40:56,719 --> 01:40:58,960
little bit larger than h2 and something

2502
01:40:58,960 --> 01:41:01,440
that we need to talk about as a

2503
01:41:01,440 --> 01:41:02,719
whole group

2504
01:41:02,719 --> 01:41:05,840
so i think martin

2505
01:41:11,199 --> 01:41:12,880
yeah just a time check

2506
01:41:12,880 --> 01:41:17,400
this is the remainder of the session now

2507
01:41:19,199 --> 01:41:22,159
uh yes the chairs will want to save like

2508
01:41:22,159 --> 01:41:23,840
on the order of five minutes at the end

2509
01:41:23,840 --> 01:41:26,560
for wrap-up but this is the rest of the

2510
01:41:26,560 --> 01:41:27,600
discussion that we were thinking of

2511
01:41:27,600 --> 01:41:29,199
having today

2512
01:41:29,199 --> 01:41:32,000
sure that's it this is this is a great

2513
01:41:32,000 --> 01:41:33,920
discussion to be having i think that we

2514
01:41:33,920 --> 01:41:35,760
should be talking about this

2515
01:41:35,760 --> 01:41:37,920
so thanks for bringing it up eric i

2516
01:41:37,920 --> 01:41:39,360
raced an issue on one of the

2517
01:41:39,360 --> 01:41:41,119
repositories today

2518
01:41:41,119 --> 01:41:43,440
on exactly this topic i think it'd be

2519
01:41:43,440 --> 01:41:45,440
really nice if

2520
01:41:45,440 --> 01:41:48,320
the protocol that we define here could

2521
01:41:48,320 --> 01:41:51,840
go over http 3

2522
01:41:52,400 --> 01:41:54,639
but i think it's also a reasonable

2523
01:41:54,639 --> 01:41:56,480
position to say that

2524
01:41:56,480 --> 01:41:59,520
if you've got http 3 then

2525
01:41:59,520 --> 01:42:01,920
you must use datagrams and you must use

2526
01:42:01,920 --> 01:42:03,920
the native quick streams for

2527
01:42:03,920 --> 01:42:05,199
transporting

2528
01:42:05,199 --> 01:42:07,040
the stream the datagrams and streams

2529
01:42:07,040 --> 01:42:10,560
across that connection

2530
01:42:10,639 --> 01:42:12,000
simply because

2531
01:42:12,000 --> 01:42:14,560
it is much much easier

2532
01:42:14,560 --> 01:42:15,440
and

2533
01:42:15,440 --> 01:42:17,119
also because it provides the sort of

2534
01:42:17,119 --> 01:42:18,400
performance guarantees that we're

2535
01:42:18,400 --> 01:42:21,280
looking to provide from the protocol

2536
01:42:21,280 --> 01:42:22,960
this really does exist

2537
01:42:22,960 --> 01:42:24,960
primarily for the purposes of

2538
01:42:24,960 --> 01:42:27,440
integrating with the quick capabilities

2539
01:42:27,440 --> 01:42:30,320
and not not just sort of serializing

2540
01:42:30,320 --> 01:42:32,480
everything which i think might have some

2541
01:42:32,480 --> 01:42:35,760
surprising consequences for for things

2542
01:42:35,760 --> 01:42:38,320
but i do think it would be nice if the

2543
01:42:38,320 --> 01:42:40,400
if the protocol was defined as the one

2544
01:42:40,400 --> 01:42:41,600
protocol

2545
01:42:41,600 --> 01:42:44,639
with the http 3 draft

2546
01:42:44,639 --> 01:42:46,960
effectively just describing the the way

2547
01:42:46,960 --> 01:42:48,159
that the

2548
01:42:48,159 --> 01:42:50,239
streams and datagrams are lifted off

2549
01:42:50,239 --> 01:42:54,040
into those native capabilities

2550
01:43:02,159 --> 01:43:03,760
uh

2551
01:43:03,760 --> 01:43:08,080
my uptake is that we should not

2552
01:43:08,080 --> 01:43:10,639
require servers to implement with

2553
01:43:10,639 --> 01:43:13,040
transport over h2

2554
01:43:13,040 --> 01:43:15,840
if the only protocol they're interested

2555
01:43:15,840 --> 01:43:18,880
in is web transport over h3

2556
01:43:18,880 --> 01:43:21,280
and the reason for that there are

2557
01:43:21,280 --> 01:43:24,239
servers that would be only interested in

2558
01:43:24,239 --> 01:43:26,320
web transport overage free or web

2559
01:43:26,320 --> 01:43:29,679
transport in general if they can rely on

2560
01:43:29,679 --> 01:43:32,880
quick performance guarantees

2561
01:43:32,880 --> 01:43:35,360
uh and because of that

2562
01:43:35,360 --> 01:43:36,080
me

2563
01:43:36,080 --> 01:43:37,199
they are

2564
01:43:37,199 --> 01:43:39,119
that would mean they're not really

2565
01:43:39,119 --> 01:43:40,960
interested in other versions of web

2566
01:43:40,960 --> 01:43:42,960
transport and

2567
01:43:42,960 --> 01:43:45,360
this would effectively require them to

2568
01:43:45,360 --> 01:43:48,080
implement twice the code

2569
01:43:48,080 --> 01:43:48,880
uh

2570
01:43:48,880 --> 01:43:53,800
that's my opinion on this matter

2571
01:43:59,600 --> 01:44:03,199
yeah i also if if we're allowing

2572
01:44:03,199 --> 01:44:05,119
um

2573
01:44:05,119 --> 01:44:07,199
if they're the same protocol and h3

2574
01:44:07,199 --> 01:44:09,600
receives the frames that are only

2575
01:44:09,600 --> 01:44:12,159
allowed on h2 then it has to have sort

2576
01:44:12,159 --> 01:44:14,080
of error checks to like say no you can't

2577
01:44:14,080 --> 01:44:17,440
send wt stream this is h3 sorry

2578
01:44:17,440 --> 01:44:19,119
um

2579
01:44:19,119 --> 01:44:21,199
i mean and except for the

2580
01:44:21,199 --> 01:44:22,800
right so right now we would only have

2581
01:44:22,800 --> 01:44:25,040
one shared message between what you can

2582
01:44:25,040 --> 01:44:26,960
send on the h2 connect stream at h3

2583
01:44:26,960 --> 01:44:29,440
which is the closed web transport

2584
01:44:29,440 --> 01:44:32,400
session maybe they'll be go away maybe

2585
01:44:32,400 --> 01:44:34,239
we'll come up with some other shared

2586
01:44:34,239 --> 01:44:36,719
things that don't map to any like native

2587
01:44:36,719 --> 01:44:38,800
h3 semantic

2588
01:44:38,800 --> 01:44:42,560
um but i'm inclined to say you

2589
01:44:42,560 --> 01:44:45,040
that they're that they're different and

2590
01:44:45,040 --> 01:44:46,159
uh

2591
01:44:46,159 --> 01:44:47,360
you can't

2592
01:44:47,360 --> 01:44:49,600
i mean you you don't you can't speak

2593
01:44:49,600 --> 01:44:52,800
those each two frames over an h3 connect

2594
01:44:52,800 --> 01:44:53,920
stream

2595
01:44:53,920 --> 01:44:55,679
um and we should just make it not

2596
01:44:55,679 --> 01:44:59,400
possible to do so

2597
01:45:02,320 --> 01:45:04,320
yeah i think that could make some sense

2598
01:45:04,320 --> 01:45:05,360
i

2599
01:45:05,360 --> 01:45:07,280
martin's proposal is

2600
01:45:07,280 --> 01:45:09,760
kind of attractive which is

2601
01:45:09,760 --> 01:45:12,239
you could almost do a slightly modified

2602
01:45:12,239 --> 01:45:13,679
version of that you could almost do the

2603
01:45:13,679 --> 01:45:14,880
same

2604
01:45:14,880 --> 01:45:17,600
um or at least where they overlap the

2605
01:45:17,600 --> 01:45:19,520
same set of things but require them to

2606
01:45:19,520 --> 01:45:22,080
be split out into streams and require

2607
01:45:22,080 --> 01:45:23,760
them to be split out into datagrams when

2608
01:45:23,760 --> 01:45:25,600
you're operating over h3

2609
01:45:25,600 --> 01:45:27,360
um and i think that would address

2610
01:45:27,360 --> 01:45:29,119
victor's point which is where at that

2611
01:45:29,119 --> 01:45:30,639
point we wouldn't be asking people to

2612
01:45:30,639 --> 01:45:32,239
have to implement both you would

2613
01:45:32,239 --> 01:45:35,119
implement one thing which was this is

2614
01:45:35,119 --> 01:45:37,040
how i speak web transport over http

2615
01:45:37,040 --> 01:45:39,119
semantics and

2616
01:45:39,119 --> 01:45:41,360
if you chose to only support h3 that

2617
01:45:41,360 --> 01:45:43,119
would be totally okay you would send

2618
01:45:43,119 --> 01:45:44,960
those things over

2619
01:45:44,960 --> 01:45:49,119
http 3 streams and over hp3 datagrams

2620
01:45:49,119 --> 01:45:52,159
and if you chose to also support h2 you

2621
01:45:52,159 --> 01:45:53,199
would take

2622
01:45:53,199 --> 01:45:55,199
effectively the same things and bundle

2623
01:45:55,199 --> 01:45:57,040
them up in

2624
01:45:57,040 --> 01:45:59,440
uh you know a connect stream in data

2625
01:45:59,440 --> 01:46:02,000
frames and you'd have that for free but

2626
01:46:02,000 --> 01:46:03,520
we wouldn't be asking people to actually

2627
01:46:03,520 --> 01:46:04,960
support two things

2628
01:46:04,960 --> 01:46:07,840
i think architecturally in words that

2629
01:46:07,840 --> 01:46:09,840
sounds really nice

2630
01:46:09,840 --> 01:46:10,840
but in

2631
01:46:10,840 --> 01:46:12,639
practice

2632
01:46:12,639 --> 01:46:14,639
allen just pointed out you know

2633
01:46:14,639 --> 01:46:17,040
it isn't a 100 overlap

2634
01:46:17,040 --> 01:46:18,480
because a lot of the things that we're

2635
01:46:18,480 --> 01:46:20,080
trying to provide with the web transport

2636
01:46:20,080 --> 01:46:23,199
frames over these data frames in h2 are

2637
01:46:23,199 --> 01:46:24,400
things that are already available

2638
01:46:24,400 --> 01:46:27,440
natively in h3 anyway and so

2639
01:46:27,440 --> 01:46:28,880
you know we could write a lot of text

2640
01:46:28,880 --> 01:46:30,639
about how that's kind of a null mapping

2641
01:46:30,639 --> 01:46:31,280
and

2642
01:46:31,280 --> 01:46:32,320
it's all really the same thing

2643
01:46:32,320 --> 01:46:33,600
underneath but at that point we're just

2644
01:46:33,600 --> 01:46:36,400
calling it that because it sounds nice

2645
01:46:36,400 --> 01:46:37,280
um

2646
01:46:37,280 --> 01:46:39,679
they could just remain separate things

2647
01:46:39,679 --> 01:46:41,840
that don't actually overlap and i don't

2648
01:46:41,840 --> 01:46:45,199
know that that would upset anybody

2649
01:46:49,520 --> 01:46:50,960
uh what

2650
01:46:50,960 --> 01:46:51,760
so

2651
01:46:51,760 --> 01:46:53,679
conceptual is the way i see web

2652
01:46:53,679 --> 01:46:56,800
transport is web transport

2653
01:46:56,800 --> 01:46:58,320
is

2654
01:46:58,320 --> 01:47:01,040
it well the overview draft is called web

2655
01:47:01,040 --> 01:47:03,360
transport protocol framework and

2656
01:47:03,360 --> 01:47:05,840
what web transfer fundamentally provides

2657
01:47:05,840 --> 01:47:09,280
it provides a model of how you interact

2658
01:47:09,280 --> 01:47:11,360
with a remote server

2659
01:47:11,360 --> 01:47:14,639
and that model is fundamentally based on

2660
01:47:14,639 --> 01:47:15,679
quick

2661
01:47:15,679 --> 01:47:17,199
that is to say

2662
01:47:17,199 --> 01:47:20,080
uh my idea of how this works when i

2663
01:47:20,080 --> 01:47:22,560
started writing the web transport

2664
01:47:22,560 --> 01:47:24,560
overview and work transferred over free

2665
01:47:24,560 --> 01:47:27,360
draft when we first adopted was

2666
01:47:27,360 --> 01:47:30,000
that there is this model of that web

2667
01:47:30,000 --> 01:47:33,119
transport has streams and datagrams

2668
01:47:33,119 --> 01:47:35,360
and then

2669
01:47:35,360 --> 01:47:37,840
web transport over http 3 and web

2670
01:47:37,840 --> 01:47:40,360
transport over http 2 are

2671
01:47:40,360 --> 01:47:43,440
implementations of that model uh but the

2672
01:47:43,440 --> 01:47:46,960
level of abstraction is not on this

2673
01:47:46,960 --> 01:47:48,880
frame remapping

2674
01:47:48,880 --> 01:47:51,760
which is just something that kind of

2675
01:47:51,760 --> 01:47:53,840
naturally emerged for those two yes

2676
01:47:53,840 --> 01:47:55,040
cases

2677
01:47:55,040 --> 01:47:57,600
but the level of abstraction is

2678
01:47:57,600 --> 01:47:59,840
fundamentally the streams and data

2679
01:47:59,840 --> 01:48:01,360
groups model

2680
01:48:01,360 --> 01:48:02,840
uh

2681
01:48:02,840 --> 01:48:09,920
and the i think there is a value in that

2682
01:48:10,239 --> 01:48:11,520
uh because

2683
01:48:11,520 --> 01:48:15,119
this is on some conceptual level is a

2684
01:48:15,119 --> 01:48:19,159
very clean model

2685
01:48:24,239 --> 01:48:26,639
so i think if we if we said that you

2686
01:48:26,639 --> 01:48:29,119
weren't allowed to speak the h2 version

2687
01:48:29,119 --> 01:48:30,639
over h3

2688
01:48:30,639 --> 01:48:32,239
you know the feature you would you might

2689
01:48:32,239 --> 01:48:35,199
lose is if for some reason you had

2690
01:48:35,199 --> 01:48:38,000
a client that was talking h2

2691
01:48:38,000 --> 01:48:40,480
to an intermediary

2692
01:48:40,480 --> 01:48:43,199
which it must have advertised

2693
01:48:43,199 --> 01:48:44,960
web transport over h2 support but it

2694
01:48:44,960 --> 01:48:46,560
didn't really want to go to the trouble

2695
01:48:46,560 --> 01:48:49,520
of looking inside the data stream

2696
01:48:49,520 --> 01:48:52,480
and it's speaking h3 upstream to a web

2697
01:48:52,480 --> 01:48:55,199
transport capable h3 server so now that

2698
01:48:55,199 --> 01:48:57,840
proxy has to do the translation it's

2699
01:48:57,840 --> 01:48:59,040
kind of what martin pointed out in the

2700
01:48:59,040 --> 01:49:01,840
chat like it has to parse that data

2701
01:49:01,840 --> 01:49:04,560
stream and pull all the things out and

2702
01:49:04,560 --> 01:49:08,960
um and translate it for that upstream h3

2703
01:49:08,960 --> 01:49:10,480
but i think that the converse

2704
01:49:10,480 --> 01:49:12,639
requirement would be like the proxy can

2705
01:49:12,639 --> 01:49:15,040
be dumb and the server has to do it is

2706
01:49:15,040 --> 01:49:15,920
like

2707
01:49:15,920 --> 01:49:18,880
it's probably worse

2708
01:49:20,639 --> 01:49:21,360
so

2709
01:49:21,360 --> 01:49:24,400
my my fundamental argument is if we are

2710
01:49:24,400 --> 01:49:26,480
talking about cost as a proxy versus

2711
01:49:26,480 --> 01:49:30,320
prof to the server i would focus

2712
01:49:30,320 --> 01:49:33,040
on offloading the cost of the server

2713
01:49:33,040 --> 01:49:35,760
because the servers are typically

2714
01:49:35,760 --> 01:49:39,360
individual web developers

2715
01:49:39,679 --> 01:49:43,599
and part of reasoning behind the web

2716
01:49:43,599 --> 01:49:45,920
transport effort was making life easier

2717
01:49:45,920 --> 01:49:49,080
for them

2718
01:50:02,239 --> 01:50:04,239
sounds like what we're saying is that

2719
01:50:04,239 --> 01:50:04,960
we're

2720
01:50:04,960 --> 01:50:06,480
totally okay

2721
01:50:06,480 --> 01:50:09,119
if these don't look like the same thing

2722
01:50:09,119 --> 01:50:10,480
um

2723
01:50:10,480 --> 01:50:12,159
and

2724
01:50:12,159 --> 01:50:14,239
we'd let

2725
01:50:14,239 --> 01:50:16,880
we we'd let any intermediaries

2726
01:50:16,880 --> 01:50:18,880
have to deal with translating between

2727
01:50:18,880 --> 01:50:20,159
the two

2728
01:50:20,159 --> 01:50:21,760
and

2729
01:50:21,760 --> 01:50:23,040
pooling

2730
01:50:23,040 --> 01:50:24,480
works great right up until your

2731
01:50:24,480 --> 01:50:26,080
intermediary because you have a bunch of

2732
01:50:26,080 --> 01:50:28,000
different connect streams um assuming

2733
01:50:28,000 --> 01:50:30,400
that you know h2 is is the leg that

2734
01:50:30,400 --> 01:50:32,719
faces the client and then

2735
01:50:32,719 --> 01:50:34,880
upstream

2736
01:50:34,880 --> 01:50:36,400
depending on what's going on with

2737
01:50:36,400 --> 01:50:37,840
pooling there and how we choose to solve

2738
01:50:37,840 --> 01:50:39,440
that in h3 it's possible that the

2739
01:50:39,440 --> 01:50:41,280
intermediary needs to make multiple h3

2740
01:50:41,280 --> 01:50:43,840
connections upstream um and vice versa

2741
01:50:43,840 --> 01:50:45,760
you could have a client that's speaking

2742
01:50:45,760 --> 01:50:47,760
h3 to an intermediary

2743
01:50:47,760 --> 01:50:50,400
would make multiple h3 connections and

2744
01:50:50,400 --> 01:50:52,800
then those might be shared over a single

2745
01:50:52,800 --> 01:50:54,480
h2

2746
01:50:54,480 --> 01:50:56,880
upstream

2747
01:50:56,880 --> 01:50:58,880
which seems not unlike how we do other

2748
01:50:58,880 --> 01:51:01,119
things

2749
01:51:05,679 --> 01:51:07,280
just one thing that brought to mind is

2750
01:51:07,280 --> 01:51:10,080
that the you know the stream limits

2751
01:51:10,080 --> 01:51:12,239
can just be different on different sides

2752
01:51:12,239 --> 01:51:15,440
of these things and this is not an h2 to

2753
01:51:15,440 --> 01:51:17,440
h3 specific problem it exists even with

2754
01:51:17,440 --> 01:51:21,119
pure h3 or pure h2 intermediaries and it

2755
01:51:21,119 --> 01:51:22,719
it was sort of all

2756
01:51:22,719 --> 01:51:24,719
it was true in h2 sometimes with push

2757
01:51:24,719 --> 01:51:27,040
where you you'd have like an upstream

2758
01:51:27,040 --> 01:51:29,440
server that was allowed to create a push

2759
01:51:29,440 --> 01:51:31,599
stream but then the downstream session

2760
01:51:31,599 --> 01:51:33,119
didn't have any push streams available

2761
01:51:33,119 --> 01:51:34,960
and so you kind of had to handle this

2762
01:51:34,960 --> 01:51:36,639
this case but it might

2763
01:51:36,639 --> 01:51:38,400
be sort of hairier in web transport

2764
01:51:38,400 --> 01:51:40,400
where it's not directly related to this

2765
01:51:40,400 --> 01:51:42,320
issue but since we're talking about

2766
01:51:42,320 --> 01:51:44,400
intermediaries it's just a potential

2767
01:51:44,400 --> 01:51:47,400
mismatch

2768
01:52:28,840 --> 01:52:30,480
right

2769
01:52:30,480 --> 01:52:32,080
thanks

2770
01:52:32,080 --> 01:52:34,639
eric bernard could you go to the like

2771
01:52:34,639 --> 01:52:38,400
chair wrap-up slide please

2772
01:52:39,599 --> 01:52:40,150
um

2773
01:52:40,150 --> 01:52:41,520
[Music]

2774
01:52:41,520 --> 01:52:44,480
yeah well we have eight minutes left uh

2775
01:52:44,480 --> 01:52:46,880
if someone has something that they think

2776
01:52:46,880 --> 01:52:48,719
could be useful to discuss in like under

2777
01:52:48,719 --> 01:52:50,320
five minutes they should come up now

2778
01:52:50,320 --> 01:52:52,239
otherwise we're gonna wrap up and give

2779
01:52:52,239 --> 01:52:54,719
some time to uh roam the hallways and

2780
01:52:54,719 --> 01:52:56,840
eat some extra cookies

2781
01:52:56,840 --> 01:53:00,320
um so uh thanks everyone for coming to

2782
01:53:00,320 --> 01:53:01,679
web transport we had some good

2783
01:53:01,679 --> 01:53:04,000
discussion on quite a few issues uh we

2784
01:53:04,000 --> 01:53:05,760
do realize that we are

2785
01:53:05,760 --> 01:53:09,280
a bit blocked on the mask work with you

2786
01:53:09,280 --> 01:53:12,000
yours truly will work hard to resolve

2787
01:53:12,000 --> 01:53:14,320
that as quickly as possible

2788
01:53:14,320 --> 01:53:15,440
um

2789
01:53:15,440 --> 01:53:18,639
and but otherwise um yeah thanks

2790
01:53:18,639 --> 01:53:21,040
everyone for coming uh we're making good

2791
01:53:21,040 --> 01:53:23,280
progress and we're looking forward to

2792
01:53:23,280 --> 01:53:25,360
you know having this in in a shape where

2793
01:53:25,360 --> 01:53:28,239
we don't move quite as much bernard any

2794
01:53:28,239 --> 01:53:29,920
other words you want to add

2795
01:53:29,920 --> 01:53:32,960
uh yeah just to note that web transport

2796
01:53:32,960 --> 01:53:35,840
is available now in chromium so you can

2797
01:53:35,840 --> 01:53:37,760
actually this isn't just an academic

2798
01:53:37,760 --> 01:53:39,840
discussion you can actually play with it

2799
01:53:39,840 --> 01:53:42,000
and in particular some of the quick

2800
01:53:42,000 --> 01:53:44,239
media over quick stuff

2801
01:53:44,239 --> 01:53:45,119
um

2802
01:53:45,119 --> 01:53:47,119
you know we have all the apis now for

2803
01:53:47,119 --> 01:53:49,840
people to actually build things

2804
01:53:49,840 --> 01:53:52,719
so it's not just an academic exercise

2805
01:53:52,719 --> 01:53:55,840
it's out there

2806
01:53:56,080 --> 01:53:56,880
yep

2807
01:53:56,880 --> 01:53:58,960
definitely uh spencer

2808
01:53:58,960 --> 01:54:00,320
go ahead

2809
01:54:00,320 --> 01:54:03,199
i just wanted to say that uh james and i

2810
01:54:03,199 --> 01:54:05,119
uh have had

2811
01:54:05,119 --> 01:54:08,320
pretty close notes to the discussion but

2812
01:54:08,320 --> 01:54:10,320
uh if people could take a chat take a

2813
01:54:10,320 --> 01:54:11,760
look at them and see

2814
01:54:11,760 --> 01:54:14,000
uh if we're massively misquoting

2815
01:54:14,000 --> 01:54:15,280
anything

2816
01:54:15,280 --> 01:54:17,119
i think we have question marks on

2817
01:54:17,119 --> 01:54:19,119
everything that we didn't get there's

2818
01:54:19,119 --> 01:54:21,199
only about two or three of them but i

2819
01:54:21,199 --> 01:54:24,799
just wanted to let the chairs know that

2820
01:54:25,760 --> 01:54:27,520
okay

2821
01:54:27,520 --> 01:54:29,119
cool

2822
01:54:29,119 --> 01:54:31,040
thanks thank you spencer

2823
01:54:31,040 --> 01:54:33,679
all right and uh we wanted to especially

2824
01:54:33,679 --> 01:54:35,679
thank um

2825
01:54:35,679 --> 01:54:38,400
alan for the jabber scribing which

2826
01:54:38,400 --> 01:54:40,400
didn't wasn't required today but thanks

2827
01:54:40,400 --> 01:54:42,480
for keeping an eye on that and thanks

2828
01:54:42,480 --> 01:54:45,280
also to james and spencer for the work

2829
01:54:45,280 --> 01:54:46,800
on the minutes i've been keeping on them

2830
01:54:46,800 --> 01:54:48,800
and they look absolutely great thank you

2831
01:54:48,800 --> 01:54:50,800
so much for taking the time to do that

2832
01:54:50,800 --> 01:54:52,719
we really appreciate it

2833
01:54:52,719 --> 01:54:54,159
um

2834
01:54:54,159 --> 01:54:58,000
okay uh that's all folks and we'll see

2835
01:54:58,000 --> 01:54:59,520
you on the mailing list to keep

2836
01:54:59,520 --> 01:55:02,719
discussing these issues um otherwise um

2837
01:55:02,719 --> 01:55:07,119
see you in march at the next atf if we

2838
01:55:07,119 --> 01:55:09,360
if we don't have an interim before then

2839
01:55:09,360 --> 01:55:11,599
okay thanks everybody

2840
01:55:11,599 --> 01:55:14,599
bye

