1
00:00:14,000 --> 00:00:17,000
uh

2
00:00:17,520 --> 00:00:20,480
okay we are on top of the hour so i

3
00:00:20,480 --> 00:00:22,640
think we can start

4
00:00:22,640 --> 00:00:25,359
uh welcome everybody to this co-working

5
00:00:25,359 --> 00:00:28,000
group session at itf 112

6
00:00:28,000 --> 00:00:30,480
i am marco tidoka my culture is jaime

7
00:00:30,480 --> 00:00:32,880
menetz

8
00:00:33,520 --> 00:00:35,520
and we assume people

9
00:00:35,520 --> 00:00:38,079
at this meeting have read the documents

10
00:00:38,079 --> 00:00:40,719
discussed today to better contribute and

11
00:00:40,719 --> 00:00:42,960
be engaged in the discussion the not

12
00:00:42,960 --> 00:00:45,039
well applies there's no next slide for

13
00:00:45,039 --> 00:00:46,079
that

14
00:00:46,079 --> 00:00:48,160
and we're using miteko so the list of

15
00:00:48,160 --> 00:00:50,559
attendees is compiled automatically

16
00:00:50,559 --> 00:00:52,960
i'll keep a look at the chat and

17
00:00:52,960 --> 00:00:56,000
a few people volunteered to help taking

18
00:00:56,000 --> 00:00:58,559
notes christian and joran thank you so

19
00:00:58,559 --> 00:01:01,038
much again

20
00:01:01,920 --> 00:01:04,640
and this is an official itf meeting so

21
00:01:04,640 --> 00:01:06,799
the note well displayed in this

22
00:01:06,799 --> 00:01:08,479
slide applies

23
00:01:08,479 --> 00:01:09,760
it's about

24
00:01:09,760 --> 00:01:12,799
ipr patents and so on it's very much

25
00:01:12,799 --> 00:01:14,880
about anti-harassment procedures and

26
00:01:14,880 --> 00:01:16,400
code of conduct

27
00:01:16,400 --> 00:01:18,640
so be nice and professional with one

28
00:01:18,640 --> 00:01:21,040
another

29
00:01:22,400 --> 00:01:26,080
uh yeah if you want to interact you can

30
00:01:26,080 --> 00:01:28,159
raise your hands with a raised hands

31
00:01:28,159 --> 00:01:31,280
tool on the top left

32
00:01:31,280 --> 00:01:33,200
section of the window the first button

33
00:01:33,200 --> 00:01:34,479
from the left

34
00:01:34,479 --> 00:01:36,560
and if you can talk in your environment

35
00:01:36,560 --> 00:01:38,720
just type my colon followed by your

36
00:01:38,720 --> 00:01:40,400
question or comment will relate to the

37
00:01:40,400 --> 00:01:41,520
room

38
00:01:41,520 --> 00:01:44,079
we've been recording already and end up

39
00:01:44,079 --> 00:01:46,159
on youtube in one or two days

40
00:01:46,159 --> 00:01:48,479
again blue shield compiled automatically

41
00:01:48,479 --> 00:01:51,200
by miteiko

42
00:01:52,159 --> 00:01:53,119
so

43
00:01:53,119 --> 00:01:55,360
this is the agenda for today and

44
00:01:55,360 --> 00:01:57,600
following an introduction uh from the

45
00:01:57,600 --> 00:02:00,159
chairs we'll go through uh

46
00:02:00,159 --> 00:02:02,079
four working group documents and for uh

47
00:02:02,079 --> 00:02:03,840
individual submissions

48
00:02:03,840 --> 00:02:06,799
and we start with um href and coral

49
00:02:06,799 --> 00:02:09,440
presented by a karsten and christian

50
00:02:09,440 --> 00:02:11,920
then we enter into group communication

51
00:02:11,920 --> 00:02:14,400
and low score territory

52
00:02:14,400 --> 00:02:16,400
we have esco presenting group on this

53
00:02:16,400 --> 00:02:19,920
i'll give an update on group of score

54
00:02:19,920 --> 00:02:21,680
then we have the key update procedure

55
00:02:21,680 --> 00:02:22,959
for oscor

56
00:02:22,959 --> 00:02:24,560
on recard

57
00:02:24,560 --> 00:02:26,959
christian has updates on cacheable auth

58
00:02:26,959 --> 00:02:28,080
score

59
00:02:28,080 --> 00:02:29,920
i'll give an update on oscar capable

60
00:02:29,920 --> 00:02:32,720
proxies and we conclude with a brand new

61
00:02:32,720 --> 00:02:34,319
draft about

62
00:02:34,319 --> 00:02:36,000
a co-op option for performance

63
00:02:36,000 --> 00:02:37,680
measurement

64
00:02:37,680 --> 00:02:41,120
and 10 minutes of flex time also

65
00:02:41,120 --> 00:02:42,879
does anyone want to

66
00:02:42,879 --> 00:02:46,480
bash this agenda in any way today

67
00:02:49,120 --> 00:02:51,680
her known

68
00:02:52,000 --> 00:02:56,560
so let's get into the document status

69
00:02:56,560 --> 00:02:58,879
and we always have good news uh of the

70
00:02:58,879 --> 00:03:00,800
sky was mentioned at the latest interim

71
00:03:00,800 --> 00:03:02,879
but just to bring it to the

72
00:03:02,879 --> 00:03:04,720
main atf session

73
00:03:04,720 --> 00:03:07,760
since july we got published one more rfc

74
00:03:07,760 --> 00:03:11,519
9100 was sentimental versions

75
00:03:11,519 --> 00:03:12,959
thank you very much to the authors in

76
00:03:12,959 --> 00:03:14,239
the working group

77
00:03:14,239 --> 00:03:18,000
for yet another achievement

78
00:03:18,000 --> 00:03:19,200
and

79
00:03:19,200 --> 00:03:21,599
along the same lines in the past months

80
00:03:21,599 --> 00:03:23,680
we got approved two more documents for

81
00:03:23,680 --> 00:03:26,640
publication as proposed standard they

82
00:03:26,640 --> 00:03:28,720
are also in the rfc editor queue now

83
00:03:28,720 --> 00:03:31,599
where they joined tumor documents

84
00:03:31,599 --> 00:03:33,519
also waiting there for

85
00:03:33,519 --> 00:03:35,280
echo request tag

86
00:03:35,280 --> 00:03:37,440
so there shouldn't be any more uh

87
00:03:37,440 --> 00:03:40,159
blocking conflicts in this respect and

88
00:03:40,159 --> 00:03:42,000
these four documents should be

89
00:03:42,000 --> 00:03:44,720
published in the relatively relatively

90
00:03:44,720 --> 00:03:47,840
near future

91
00:03:48,879 --> 00:03:52,000
we also have two of the four core comp

92
00:03:52,000 --> 00:03:55,040
documents in isg processing now

93
00:03:55,040 --> 00:03:57,599
uh we got very good reviews from the isg

94
00:03:57,599 --> 00:04:00,319
and the authors are now processing the

95
00:04:00,319 --> 00:04:03,280
comments uh very well tracked as github

96
00:04:03,280 --> 00:04:05,680
issues and discussed in dedicated

97
00:04:05,680 --> 00:04:08,080
design team meetings occurring bi-weekly

98
00:04:08,080 --> 00:04:10,319
we have uh next one

99
00:04:10,319 --> 00:04:12,640
early next week

100
00:04:12,640 --> 00:04:16,318
it was are young cyborg and nc

101
00:04:16,720 --> 00:04:18,238
and then to mention some post-working

102
00:04:18,238 --> 00:04:19,759
groups called uh

103
00:04:19,759 --> 00:04:22,240
document uh it's about the other two

104
00:04:22,240 --> 00:04:24,400
core conf documents comai and yang

105
00:04:24,400 --> 00:04:26,479
library they're a bit in the background

106
00:04:26,479 --> 00:04:29,440
now to prioritize the the first two ones

107
00:04:29,440 --> 00:04:32,320
i mentioned and once they are done autos

108
00:04:32,320 --> 00:04:34,639
can focus a bit more on on these ones

109
00:04:34,639 --> 00:04:35,600
too

110
00:04:35,600 --> 00:04:37,600
uh there were just some open points left

111
00:04:37,600 --> 00:04:38,880
following

112
00:04:38,880 --> 00:04:41,040
the shepherd review i remember

113
00:04:41,040 --> 00:04:44,000
and finally we have group of score that

114
00:04:44,000 --> 00:04:45,759
in fact had the first working group was

115
00:04:45,759 --> 00:04:48,240
call earlier this year and the second

116
00:04:48,240 --> 00:04:50,080
from last version addressed those

117
00:04:50,080 --> 00:04:52,479
comments but this latest version

118
00:04:52,479 --> 00:04:53,840
published

119
00:04:53,840 --> 00:04:55,600
before the cutoff

120
00:04:55,600 --> 00:04:57,520
addressed also some more points

121
00:04:57,520 --> 00:04:58,960
remaining open and this is also

122
00:04:58,960 --> 00:05:00,000
approaching

123
00:05:00,000 --> 00:05:03,600
a second working group last call

124
00:05:05,360 --> 00:05:07,759
a few adds up on things to come

125
00:05:07,759 --> 00:05:10,240
as also suggested by francesca that

126
00:05:10,240 --> 00:05:12,400
shares plan to have an update of the

127
00:05:12,400 --> 00:05:14,160
working group milestones

128
00:05:14,160 --> 00:05:17,120
uh on the entry page of core in the data

129
00:05:17,120 --> 00:05:20,000
tracker and some milestones have been

130
00:05:20,000 --> 00:05:22,479
pretty much met in the past months or

131
00:05:22,479 --> 00:05:26,320
even years and it's good to add a few

132
00:05:26,320 --> 00:05:28,720
new ones to reflect ongoing work and

133
00:05:28,720 --> 00:05:31,039
especially documents that at some point

134
00:05:31,039 --> 00:05:32,400
next year

135
00:05:32,400 --> 00:05:36,320
will be shipped to the isg kirsten

136
00:05:36,320 --> 00:05:38,479
yeah they're a

137
00:05:38,479 --> 00:05:41,360
question by katyan a couple of hours ago

138
00:05:41,360 --> 00:05:43,199
on the mailing list whether we should

139
00:05:43,199 --> 00:05:45,440
maybe have another of those core

140
00:05:45,440 --> 00:05:47,039
applications

141
00:05:47,039 --> 00:05:49,600
meetings and i said maybe not this week

142
00:05:49,600 --> 00:05:52,560
because that is already pretty full um

143
00:05:52,560 --> 00:05:55,280
but maybe it's actually worth trying to

144
00:05:55,280 --> 00:05:58,000
do an interim before

145
00:05:58,000 --> 00:06:00,639
one month's time

146
00:06:00,639 --> 00:06:03,680
uh so specifically to talk about these

147
00:06:03,680 --> 00:06:05,600
applications things because we don't

148
00:06:05,600 --> 00:06:06,479
have

149
00:06:06,479 --> 00:06:07,360
much

150
00:06:07,360 --> 00:06:09,759
apart from coral not much applications

151
00:06:09,759 --> 00:06:13,520
oriented stuff on the agenda today

152
00:06:15,039 --> 00:06:17,840
yes it might work just quickly thinking

153
00:06:17,840 --> 00:06:19,919
on december 1st i just like to

154
00:06:19,919 --> 00:06:22,400
synchronize a bit better on that and

155
00:06:22,400 --> 00:06:25,120
what to cover with that during this week

156
00:06:25,120 --> 00:06:27,199
uh even on gather town

157
00:06:27,199 --> 00:06:29,440
i think we can do that

158
00:06:29,440 --> 00:06:33,120
okay a second observation

159
00:06:33,120 --> 00:06:34,479
so um

160
00:06:34,479 --> 00:06:36,639
a couple of interims ago we decided it

161
00:06:36,639 --> 00:06:38,400
would be too much

162
00:06:38,400 --> 00:06:40,479
work and and really not necessary to

163
00:06:40,479 --> 00:06:42,000
recharter

164
00:06:42,000 --> 00:06:44,560
and now there is an interesting rumor

165
00:06:44,560 --> 00:06:46,800
circulating that the fact that we are

166
00:06:46,800 --> 00:06:49,360
not recharging means the working group

167
00:06:49,360 --> 00:06:52,319
will be concluded next week

168
00:06:52,319 --> 00:06:55,840
i think that's a rumor we all can

169
00:06:55,840 --> 00:06:56,960
work

170
00:06:56,960 --> 00:06:59,680
to dispel

171
00:07:00,000 --> 00:07:03,840
yes sounds very new to me at least

172
00:07:03,919 --> 00:07:06,720
okay just wanted to mention it

173
00:07:06,720 --> 00:07:09,120
thank you

174
00:07:09,919 --> 00:07:13,199
any comment on this first part francesca

175
00:07:13,199 --> 00:07:15,199
or anyone

176
00:07:15,199 --> 00:07:17,840
by the way

177
00:07:22,560 --> 00:07:24,720
on the rumor i have no idea first news i

178
00:07:24,720 --> 00:07:27,199
hear as well on the other stuff on the

179
00:07:27,199 --> 00:07:28,720
problem details and pops up so i would

180
00:07:28,720 --> 00:07:31,520
like to have perhaps before an interim

181
00:07:31,520 --> 00:07:33,120
because in an interim it's nicer to

182
00:07:33,120 --> 00:07:35,199
present something and show progress so

183
00:07:35,199 --> 00:07:37,520
it'd be nice to have first perhaps

184
00:07:37,520 --> 00:07:41,039
a work meeting with co-authors so

185
00:07:41,039 --> 00:07:42,720
providing that we have it within the

186
00:07:42,720 --> 00:07:44,720
month we could have it then the interim

187
00:07:44,720 --> 00:07:46,560
also within the month

188
00:07:46,560 --> 00:07:48,000
and i agree also with michael maybe we

189
00:07:48,000 --> 00:07:49,680
can have something informal on the other

190
00:07:49,680 --> 00:07:51,039
yeah sorry

191
00:07:51,039 --> 00:07:53,599
yeah that's okay with me we actually we

192
00:07:53,599 --> 00:07:56,560
don't really need the the heft of an

193
00:07:56,560 --> 00:07:59,039
interim we don't need the two-week wait

194
00:07:59,039 --> 00:08:01,599
time and so on and maybe we should just

195
00:08:01,599 --> 00:08:04,960
schedule a meeting to to do this

196
00:08:04,960 --> 00:08:08,960
that would work better for me at least

197
00:08:10,879 --> 00:08:14,160
thank you the other documentation

198
00:08:14,160 --> 00:08:16,479
also

199
00:08:18,879 --> 00:08:21,440
okay and thinking of uh yeah already

200
00:08:21,440 --> 00:08:24,080
scheduled thing um as agreed

201
00:08:24,080 --> 00:08:26,400
at the latest interim before the cut-off

202
00:08:26,400 --> 00:08:29,440
we are going to have one on december 8th

203
00:08:29,440 --> 00:08:32,159
it's a wednesday usual local time

204
00:08:32,159 --> 00:08:34,399
and then an actual regular series will

205
00:08:34,399 --> 00:08:36,479
resume in january every other wednesdays

206
00:08:36,479 --> 00:08:38,719
same local time uh alternating with

207
00:08:38,719 --> 00:08:42,159
seabor as usual

208
00:08:43,839 --> 00:08:47,920
any more comments anyone

209
00:08:50,800 --> 00:08:53,800
okay

210
00:08:55,120 --> 00:08:57,279
this actually concludes the uh fair

211
00:08:57,279 --> 00:09:00,720
introduction and if there are no more

212
00:09:00,720 --> 00:09:02,640
comments we can move on to the first

213
00:09:02,640 --> 00:09:06,560
document maybe carsten has a comment

214
00:09:07,279 --> 00:09:08,800
no i just wanted to start with the first

215
00:09:08,800 --> 00:09:11,200
document you're welcome

216
00:09:11,200 --> 00:09:13,440
so are you showing the start slides no

217
00:09:13,440 --> 00:09:15,760
i'm showing the slides you can take over

218
00:09:15,760 --> 00:09:18,000
now

219
00:09:19,680 --> 00:09:22,320
now we are doing the game how to find

220
00:09:22,320 --> 00:09:23,920
the

221
00:09:23,920 --> 00:09:28,479
slides in the weirdly sorted list

222
00:09:30,800 --> 00:09:32,880
okay thank you

223
00:09:32,880 --> 00:09:35,360
so i wanted to quickly

224
00:09:35,360 --> 00:09:37,279
report on on the

225
00:09:37,279 --> 00:09:39,600
work on the draft that is called href

226
00:09:39,600 --> 00:09:43,040
but that actually standardizes what

227
00:09:43,040 --> 00:09:45,680
cris are

228
00:09:45,680 --> 00:09:48,480
and i have 14 slides 11 of which you

229
00:09:48,480 --> 00:09:50,560
mostly have seen so i will run through

230
00:09:50,560 --> 00:09:53,200
them really quickly but please do stop

231
00:09:53,200 --> 00:09:54,080
me

232
00:09:54,080 --> 00:09:56,240
um if there is a

233
00:09:56,240 --> 00:09:58,720
need to discuss something

234
00:09:58,720 --> 00:10:01,440
so just as a quick reminder

235
00:10:01,440 --> 00:10:04,399
the the car group really tries to do the

236
00:10:04,399 --> 00:10:06,800
the web of things even if we didn't call

237
00:10:06,800 --> 00:10:08,320
it that way

238
00:10:08,320 --> 00:10:09,760
and um

239
00:10:09,760 --> 00:10:11,760
the web of course has three things a

240
00:10:11,760 --> 00:10:14,240
hyper references transfer protocol and

241
00:10:14,240 --> 00:10:15,920
representation format

242
00:10:15,920 --> 00:10:18,800
and moving this to to

243
00:10:18,800 --> 00:10:20,560
devices means

244
00:10:20,560 --> 00:10:22,959
we did a new transfer protocol we did

245
00:10:22,959 --> 00:10:25,600
various representation formats not just

246
00:10:25,600 --> 00:10:27,120
a single one

247
00:10:27,120 --> 00:10:30,000
um and well we stuck with the hyper

248
00:10:30,000 --> 00:10:32,800
references which are there in the weapon

249
00:10:32,800 --> 00:10:35,040
that probably was a good thing to to do

250
00:10:35,040 --> 00:10:37,360
for the first 10 years or so

251
00:10:37,360 --> 00:10:38,079
but

252
00:10:38,079 --> 00:10:40,000
maybe we actually want to do a little

253
00:10:40,000 --> 00:10:42,240
bit of a cleanup

254
00:10:42,240 --> 00:10:44,959
now and see whether we can have

255
00:10:44,959 --> 00:10:47,760
hyper references that are

256
00:10:47,760 --> 00:10:50,959
a bit easier to to operate on in in

257
00:10:50,959 --> 00:10:53,040
various formats

258
00:10:53,040 --> 00:10:56,399
so uh we're trying to pair the uri files

259
00:10:56,399 --> 00:10:58,880
which of course won't be going away

260
00:10:58,880 --> 00:11:00,800
with a concise

261
00:11:00,800 --> 00:11:01,920
um

262
00:11:01,920 --> 00:11:06,240
form or constraint from the ci

263
00:11:06,240 --> 00:11:07,200
so

264
00:11:07,200 --> 00:11:10,160
one reason is actually that that ui is

265
00:11:10,160 --> 00:11:10,880
why

266
00:11:10,880 --> 00:11:14,160
widely really widely implemented

267
00:11:14,160 --> 00:11:16,640
most of these implements implementations

268
00:11:16,640 --> 00:11:18,800
are really bad

269
00:11:18,800 --> 00:11:21,360
and and have mistakes and so on so some

270
00:11:21,360 --> 00:11:24,800
features that uris ostensibly have

271
00:11:24,800 --> 00:11:26,959
don't actually exist when you look at

272
00:11:26,959 --> 00:11:29,760
the the implementations out there

273
00:11:29,760 --> 00:11:32,079
so just to remind people what a ui is it

274
00:11:32,079 --> 00:11:34,079
has five components a scheme an

275
00:11:34,079 --> 00:11:37,760
authority a path a query and a fragment

276
00:11:37,760 --> 00:11:41,440
and these are single items like scheme

277
00:11:41,440 --> 00:11:42,560
and fragment

278
00:11:42,560 --> 00:11:44,640
or they're actually structured in some

279
00:11:44,640 --> 00:11:46,880
ways or the the authority is at the end

280
00:11:46,880 --> 00:11:49,839
is often a dns name which is structured

281
00:11:49,839 --> 00:11:51,440
by dots the

282
00:11:51,440 --> 00:11:54,000
path is structured by slashes

283
00:11:54,000 --> 00:11:56,320
and in co-op we decided to structure our

284
00:11:56,320 --> 00:11:58,240
queries by embassad science because

285
00:11:58,240 --> 00:12:01,440
that's the the existing practice in the

286
00:12:01,440 --> 00:12:02,720
web

287
00:12:02,720 --> 00:12:05,360
and there is also something called ui

288
00:12:05,360 --> 00:12:07,920
references which are used together with

289
00:12:07,920 --> 00:12:11,839
a base uri to have a short way

290
00:12:11,839 --> 00:12:13,920
to

291
00:12:13,920 --> 00:12:15,920
to talk about a ui

292
00:12:15,920 --> 00:12:18,000
that is close to the context that we are

293
00:12:18,000 --> 00:12:19,200
currently in

294
00:12:19,200 --> 00:12:21,200
so you can say something like foo and

295
00:12:21,200 --> 00:12:23,440
then you take the existing

296
00:12:23,440 --> 00:12:26,000
ui the ui you are add and

297
00:12:26,000 --> 00:12:29,600
remove the last path segment put in foo

298
00:12:29,600 --> 00:12:32,800
and so on so all this all also should be

299
00:12:32,800 --> 00:12:35,680
uh standard uh stuff

300
00:12:35,680 --> 00:12:38,959
now what does a cr i do

301
00:12:38,959 --> 00:12:41,760
it's essentially a representation format

302
00:12:41,760 --> 00:12:44,000
for the uri data model

303
00:12:44,000 --> 00:12:45,440
which is really interesting because

304
00:12:45,440 --> 00:12:47,839
nobody sat down and actually defined the

305
00:12:47,839 --> 00:12:49,680
ui data model

306
00:12:49,680 --> 00:12:51,279
so we essentially have to reverse

307
00:12:51,279 --> 00:12:52,399
engineer

308
00:12:52,399 --> 00:12:54,480
that and and one of the contributions

309
00:12:54,480 --> 00:12:56,880
that the uh that the ci document in the

310
00:12:56,880 --> 00:12:57,760
end

311
00:12:57,760 --> 00:12:59,120
will provide

312
00:12:59,120 --> 00:13:02,079
is a much clearer

313
00:13:02,079 --> 00:13:05,200
expression of the data model underlying

314
00:13:05,200 --> 00:13:06,320
eyes

315
00:13:06,320 --> 00:13:09,440
so the the draft called ahref

316
00:13:09,440 --> 00:13:13,360
defines cris and cri references so these

317
00:13:13,360 --> 00:13:15,200
relative things that you use when you

318
00:13:15,200 --> 00:13:16,800
have a defined

319
00:13:16,800 --> 00:13:18,480
context

320
00:13:18,480 --> 00:13:21,360
so this work started a while ago but

321
00:13:21,360 --> 00:13:23,760
was started by klaus harker and jim

322
00:13:23,760 --> 00:13:25,279
shard had some

323
00:13:25,279 --> 00:13:26,160
uh

324
00:13:26,160 --> 00:13:29,120
pretty good contributions in this space

325
00:13:29,120 --> 00:13:31,519
the format is now sibo

326
00:13:31,519 --> 00:13:32,880
uh based

327
00:13:32,880 --> 00:13:34,959
and the the short

328
00:13:34,959 --> 00:13:35,839
form

329
00:13:35,839 --> 00:13:38,560
the abstract content of the draft is in

330
00:13:38,560 --> 00:13:40,160
the

331
00:13:40,160 --> 00:13:42,320
little piece of cddl

332
00:13:42,320 --> 00:13:44,800
here so you you

333
00:13:44,800 --> 00:13:47,040
have something that ends with a path a

334
00:13:47,040 --> 00:13:48,720
query and a fragment which are all three

335
00:13:48,720 --> 00:13:49,760
optional

336
00:13:49,760 --> 00:13:50,959
and

337
00:13:50,959 --> 00:13:52,160
you have

338
00:13:52,160 --> 00:13:55,839
you started with a scheme or authority

339
00:13:55,839 --> 00:13:59,120
most cases of which are absolute uris or

340
00:13:59,120 --> 00:14:02,160
with a discard number which are relative

341
00:14:02,160 --> 00:14:04,800
uh uis so that then there are there is

342
00:14:04,800 --> 00:14:06,560
fine print here with optional part

343
00:14:06,560 --> 00:14:09,519
numbers and and so on

344
00:14:09,519 --> 00:14:11,519
so this was uh

345
00:14:11,519 --> 00:14:14,639
moved around for a while and then we

346
00:14:14,639 --> 00:14:18,480
with 06 we finally ran into one problem

347
00:14:18,480 --> 00:14:20,399
we hadn't solved yet

348
00:14:20,399 --> 00:14:23,839
so with urns and similar structures

349
00:14:23,839 --> 00:14:27,279
which include the gids which are

350
00:14:27,279 --> 00:14:31,839
popular in certain parts of the universe

351
00:14:31,920 --> 00:14:33,440
you don't necessarily have a need

352
00:14:33,440 --> 00:14:35,519
leading slash so you have to have a way

353
00:14:35,519 --> 00:14:37,279
to to

354
00:14:37,279 --> 00:14:39,440
indicate that and we found a way to

355
00:14:39,440 --> 00:14:41,839
indicate that by putting true in the

356
00:14:41,839 --> 00:14:44,240
place where normally an authority would

357
00:14:44,240 --> 00:14:45,600
be

358
00:14:45,600 --> 00:14:47,839
so this gives us a

359
00:14:47,839 --> 00:14:48,720
nice

360
00:14:48,720 --> 00:14:51,760
way to essentially have

361
00:14:51,760 --> 00:14:54,079
a fully passed uri

362
00:14:54,079 --> 00:14:55,040
and

363
00:14:55,040 --> 00:14:56,560
the the last thing we essentially

364
00:14:56,560 --> 00:14:58,880
changed in know 6 was to pass the host

365
00:14:58,880 --> 00:15:02,560
name as well so dzi dot de becomes an

366
00:15:02,560 --> 00:15:03,760
array

367
00:15:03,760 --> 00:15:06,000
of two elements these are i and d e and

368
00:15:06,000 --> 00:15:08,480
there is a port number down there in in

369
00:15:08,480 --> 00:15:10,399
the example

370
00:15:10,399 --> 00:15:12,560
so we put the port number there

371
00:15:12,560 --> 00:15:14,800
as well

372
00:15:14,800 --> 00:15:17,120
um so this has uh

373
00:15:17,120 --> 00:15:20,959
got a little bit of uh fixing uh so

374
00:15:20,959 --> 00:15:23,199
after six they came over seven and then

375
00:15:23,199 --> 00:15:24,880
an o8 sorry

376
00:15:24,880 --> 00:15:26,079
and

377
00:15:26,079 --> 00:15:28,720
we now have something which i think can

378
00:15:28,720 --> 00:15:30,959
be called a consistent design

379
00:15:30,959 --> 00:15:32,880
we think we are feature complete with

380
00:15:32,880 --> 00:15:34,160
respect to

381
00:15:34,160 --> 00:15:38,639
rfc 3986 in the form that co-web

382
00:15:38,639 --> 00:15:40,800
actually supports and i have a slide on

383
00:15:40,800 --> 00:15:41,680
that

384
00:15:41,680 --> 00:15:43,040
in a minute

385
00:15:43,040 --> 00:15:46,720
we have some initial test vectors um and

386
00:15:46,720 --> 00:15:49,279
we need to update those but it's already

387
00:15:49,279 --> 00:15:51,279
looking good the implementations seem to

388
00:15:51,279 --> 00:15:53,600
work together

389
00:15:53,600 --> 00:15:55,440
few updates are probably needed in the

390
00:15:55,440 --> 00:15:57,839
implementations as well but by the end

391
00:15:57,839 --> 00:15:59,360
of the year we should have

392
00:15:59,360 --> 00:16:01,279
implementations that actually

393
00:16:01,279 --> 00:16:02,959
uh work together

394
00:16:02,959 --> 00:16:06,240
so uh for from my point of view we just

395
00:16:06,240 --> 00:16:08,160
need a little bit more implementation

396
00:16:08,160 --> 00:16:10,320
and implementer reviews and then a

397
00:16:10,320 --> 00:16:12,880
working group last call

398
00:16:12,880 --> 00:16:14,240
there are two

399
00:16:14,240 --> 00:16:16,480
questions that i think we

400
00:16:16,480 --> 00:16:19,120
should think about

401
00:16:19,120 --> 00:16:23,600
one is a pretty popular way to treat

402
00:16:23,600 --> 00:16:26,720
uh your eyes in in documents like like

403
00:16:26,720 --> 00:16:30,000
uh document formats like json ld

404
00:16:30,000 --> 00:16:32,880
where you put a uri prefix into one

405
00:16:32,880 --> 00:16:33,839
place

406
00:16:33,839 --> 00:16:35,680
and then from a different

407
00:16:35,680 --> 00:16:36,720
place

408
00:16:36,720 --> 00:16:39,199
reference this prefix either explicitly

409
00:16:39,199 --> 00:16:40,560
or implicitly

410
00:16:40,560 --> 00:16:42,399
via add context

411
00:16:42,399 --> 00:16:44,240
and concatenate

412
00:16:44,240 --> 00:16:45,680
and give the rest of the ui and

413
00:16:45,680 --> 00:16:49,600
concatenate that to the prefix gift

414
00:16:49,600 --> 00:16:50,880
and

415
00:16:50,880 --> 00:16:54,000
as they are right now cis can only do

416
00:16:54,000 --> 00:16:56,160
this in certain places

417
00:16:56,160 --> 00:17:00,560
so for instance if we have a scheme and

418
00:17:00,560 --> 00:17:02,120
an authority we can

419
00:17:02,120 --> 00:17:03,440
[Music]

420
00:17:03,440 --> 00:17:04,480
put

421
00:17:04,480 --> 00:17:08,160
a path after that and sibo pact

422
00:17:08,160 --> 00:17:10,400
can can handle that nicely so we don't

423
00:17:10,400 --> 00:17:13,919
have to have any special

424
00:17:13,919 --> 00:17:16,240
mechanism we can handle this within sibo

425
00:17:16,240 --> 00:17:17,520
pact

426
00:17:17,520 --> 00:17:20,079
but it becomes difficult if

427
00:17:20,079 --> 00:17:20,959
the

428
00:17:20,959 --> 00:17:24,640
uri the prefix ui goes on into

429
00:17:24,640 --> 00:17:26,959
a partial path

430
00:17:26,959 --> 00:17:30,080
and expects the the referencing

431
00:17:30,080 --> 00:17:30,960
site

432
00:17:30,960 --> 00:17:33,760
to actually put in the rest of the path

433
00:17:33,760 --> 00:17:35,520
and of course the first place where

434
00:17:35,520 --> 00:17:38,400
where this becomes very obvious is when

435
00:17:38,400 --> 00:17:39,679
you

436
00:17:39,679 --> 00:17:40,799
look at

437
00:17:40,799 --> 00:17:42,480
w3c

438
00:17:42,480 --> 00:17:44,960
web of things thing descriptions

439
00:17:44,960 --> 00:17:47,440
because they use a

440
00:17:47,440 --> 00:17:50,080
prefix an add context

441
00:17:50,080 --> 00:17:50,880
that

442
00:17:50,880 --> 00:17:53,280
has two elements of a path name it's

443
00:17:53,280 --> 00:17:55,840
under w3.org and then it has two

444
00:17:55,840 --> 00:17:58,720
elements ns and td and as for namespace

445
00:17:58,720 --> 00:18:02,400
td for thing description and then it it

446
00:18:02,400 --> 00:18:05,840
expects that you provide the next

447
00:18:05,840 --> 00:18:07,679
path component

448
00:18:07,679 --> 00:18:08,480
and

449
00:18:08,480 --> 00:18:10,240
that is

450
00:18:10,240 --> 00:18:11,919
difficult to do right now zero pack

451
00:18:11,919 --> 00:18:14,160
doesn't provide you a form of prefix

452
00:18:14,160 --> 00:18:15,919
compression that

453
00:18:15,919 --> 00:18:18,240
would enable you to do that

454
00:18:18,240 --> 00:18:20,960
so this is an area where we have

455
00:18:20,960 --> 00:18:24,240
a functional deficiency

456
00:18:24,240 --> 00:18:25,679
and

457
00:18:25,679 --> 00:18:28,000
we currently don't have a nice idea how

458
00:18:28,000 --> 00:18:29,760
to fix this there are several not so

459
00:18:29,760 --> 00:18:31,760
nice ideas how to fix this

460
00:18:31,760 --> 00:18:34,240
and this probably needs a little bit

461
00:18:34,240 --> 00:18:35,200
more

462
00:18:35,200 --> 00:18:36,799
thinking of course we can

463
00:18:36,799 --> 00:18:39,200
leave the functional deficiency in place

464
00:18:39,200 --> 00:18:41,360
or we can address it

465
00:18:41,360 --> 00:18:42,480
so this is

466
00:18:42,480 --> 00:18:43,360
one

467
00:18:43,360 --> 00:18:45,440
phone in our site

468
00:18:45,440 --> 00:18:48,240
and the other phone in our site is

469
00:18:48,240 --> 00:18:49,919
that co-app

470
00:18:49,919 --> 00:18:52,400
has decided to

471
00:18:52,400 --> 00:18:55,120
not support percent encoding

472
00:18:55,120 --> 00:18:57,440
in your eyes except for

473
00:18:57,440 --> 00:19:00,960
uh the specific case that co-op's own or

474
00:19:00,960 --> 00:19:04,320
the the co-op ui's own delimiters

475
00:19:04,320 --> 00:19:05,280
are

476
00:19:05,280 --> 00:19:07,679
escaped by the percent encoding

477
00:19:07,679 --> 00:19:09,600
so i think that that's a reasonable

478
00:19:09,600 --> 00:19:11,440
thing because percent encoding means you

479
00:19:11,440 --> 00:19:13,919
have to do string scanning and and

480
00:19:13,919 --> 00:19:16,559
copying and all that stuff

481
00:19:16,559 --> 00:19:18,240
which you don't want to do on a

482
00:19:18,240 --> 00:19:19,919
constrained device

483
00:19:19,919 --> 00:19:23,200
so when cohab sees a path percent to f

484
00:19:23,200 --> 00:19:26,000
slash slash foo

485
00:19:26,000 --> 00:19:27,280
then it

486
00:19:27,280 --> 00:19:30,240
the the uri to curb conversion converts

487
00:19:30,240 --> 00:19:32,880
the percent to f to a slash

488
00:19:32,880 --> 00:19:35,440
so that slash is part of the path

489
00:19:35,440 --> 00:19:37,200
segment and not the delimiter between

490
00:19:37,200 --> 00:19:39,600
path segments and everything works like

491
00:19:39,600 --> 00:19:40,559
it should

492
00:19:40,559 --> 00:19:44,080
but that doesn't work with w3

493
00:19:44,080 --> 00:19:45,120
c

494
00:19:45,120 --> 00:19:47,679
um the ids

495
00:19:47,679 --> 00:19:50,320
which we probably have to support in

496
00:19:50,320 --> 00:19:54,799
some way and we had a meeting just last

497
00:19:54,799 --> 00:19:57,919
friday where we discussed this and

498
00:19:57,919 --> 00:19:59,280
we're a little bit unhappy with the

499
00:19:59,280 --> 00:20:00,960
situation that

500
00:20:00,960 --> 00:20:02,880
we cannot really

501
00:20:02,880 --> 00:20:08,559
express all potential dids using cis

502
00:20:08,559 --> 00:20:09,600
so

503
00:20:09,600 --> 00:20:11,919
yeah we thought a little bit and

504
00:20:11,919 --> 00:20:14,159
there is a pretty

505
00:20:14,159 --> 00:20:16,960
easy fix

506
00:20:16,960 --> 00:20:18,559
which maybe is a little bit easier on

507
00:20:18,559 --> 00:20:20,000
the specification side than the

508
00:20:20,000 --> 00:20:22,000
implementation side but that's not that

509
00:20:22,000 --> 00:20:23,679
bad

510
00:20:23,679 --> 00:20:26,159
where all the the

511
00:20:26,159 --> 00:20:29,440
text strings that are

512
00:20:29,440 --> 00:20:31,919
used in your eyes

513
00:20:31,919 --> 00:20:35,440
have an optional

514
00:20:35,440 --> 00:20:38,880
form in which they alternate

515
00:20:38,880 --> 00:20:42,320
unencoded and percent encoded parts

516
00:20:42,320 --> 00:20:45,679
so the the bb percent 3ac that that is

517
00:20:45,679 --> 00:20:48,000
up there in the example in the uin

518
00:20:48,000 --> 00:20:50,640
example which would be look similar for

519
00:20:50,640 --> 00:20:52,559
the idea example

520
00:20:52,559 --> 00:20:55,120
that is a colon that actually is not

521
00:20:55,120 --> 00:20:58,640
used by the url internal syntax and that

522
00:20:58,640 --> 00:21:00,559
may have been registered

523
00:21:00,559 --> 00:21:04,159
as double a by someone before so there's

524
00:21:04,159 --> 00:21:06,159
no way a generic processor is going to

525
00:21:06,159 --> 00:21:07,039
know

526
00:21:07,039 --> 00:21:09,360
what the the internal syntax of that uin

527
00:21:09,360 --> 00:21:10,240
is

528
00:21:10,240 --> 00:21:13,760
so percent encoding may be may be needed

529
00:21:13,760 --> 00:21:17,679
uh to escape things that uh need to use

530
00:21:17,679 --> 00:21:19,280
the same delimiters

531
00:21:19,280 --> 00:21:21,919
that are used for the internal syntax

532
00:21:21,919 --> 00:21:25,200
and the idea is to allow instead of the

533
00:21:25,200 --> 00:21:27,440
the

534
00:21:27,760 --> 00:21:31,360
string which is a a colon bb colon c in

535
00:21:31,360 --> 00:21:34,000
the second last line

536
00:21:34,000 --> 00:21:37,760
to allow an array there and the array is

537
00:21:37,760 --> 00:21:40,400
structured in such a way that the odd

538
00:21:40,400 --> 00:21:42,559
numbered elements are actually percent

539
00:21:42,559 --> 00:21:43,679
encoded

540
00:21:43,679 --> 00:21:45,120
but they don't need to be percent

541
00:21:45,120 --> 00:21:47,360
encoded that there's no no need to

542
00:21:47,360 --> 00:21:49,039
actually do the percent encoding they

543
00:21:49,039 --> 00:21:50,000
can be

544
00:21:50,000 --> 00:21:51,679
uh fully processable by the

545
00:21:51,679 --> 00:21:52,960
implementation

546
00:21:52,960 --> 00:21:53,919
um

547
00:21:53,919 --> 00:21:55,039
except that

548
00:21:55,039 --> 00:21:56,960
they have the special percent encoding

549
00:21:56,960 --> 00:21:59,679
syntax so they would not be used by a

550
00:21:59,679 --> 00:22:02,240
string scanner that looks for colon uh

551
00:22:02,240 --> 00:22:05,440
delimiters in the unia

552
00:22:05,440 --> 00:22:07,679
syntax

553
00:22:07,679 --> 00:22:11,280
um so it's a little bit like

554
00:22:11,280 --> 00:22:14,000
indefinite length strings that the kind

555
00:22:14,000 --> 00:22:17,280
of processing that that you get into

556
00:22:17,280 --> 00:22:20,559
except that the the elements actually

557
00:22:20,559 --> 00:22:22,640
mean something slightly different and if

558
00:22:22,640 --> 00:22:25,200
you are scanning for the limiters

559
00:22:25,200 --> 00:22:27,200
you just leave out the odd elements you

560
00:22:27,200 --> 00:22:29,520
only scan in the even

561
00:22:29,520 --> 00:22:31,280
numbered elements

562
00:22:31,280 --> 00:22:33,679
so here we have a proposal

563
00:22:33,679 --> 00:22:35,679
and now of course it's it's a matter of

564
00:22:35,679 --> 00:22:38,400
of design taste to whether people think

565
00:22:38,400 --> 00:22:40,880
this is a proposal we can

566
00:22:40,880 --> 00:22:42,320
uh pick up

567
00:22:42,320 --> 00:22:44,559
or whether this is

568
00:22:44,559 --> 00:22:46,400
just too ugly

569
00:22:46,400 --> 00:22:48,400
but not picking it up of course would

570
00:22:48,400 --> 00:22:50,880
mean that we don't have a way to

571
00:22:50,880 --> 00:22:55,480
do all these cases of

572
00:22:56,080 --> 00:22:58,000
percent encoded

573
00:22:58,000 --> 00:23:00,640
uris

574
00:23:00,799 --> 00:23:02,640
so uh

575
00:23:02,640 --> 00:23:05,840
yeah i'm not

576
00:23:06,320 --> 00:23:09,760
well i'm happy that we have a proposal

577
00:23:09,760 --> 00:23:11,520
that that's a good thing

578
00:23:11,520 --> 00:23:12,320
um

579
00:23:12,320 --> 00:23:15,120
but uh i'm i'm still not entirely

580
00:23:15,120 --> 00:23:17,120
convinced myself

581
00:23:17,120 --> 00:23:18,720
but i think

582
00:23:18,720 --> 00:23:20,799
if we actually do want to support

583
00:23:20,799 --> 00:23:23,440
percent encoding in some form

584
00:23:23,440 --> 00:23:26,559
this is the by far the simplest way to

585
00:23:26,559 --> 00:23:28,880
do this so everything else when one can

586
00:23:28,880 --> 00:23:30,080
come up

587
00:23:30,080 --> 00:23:32,400
with is is even

588
00:23:32,400 --> 00:23:34,880
uglier

589
00:23:35,120 --> 00:23:38,320
so that's that's the two things we

590
00:23:38,320 --> 00:23:41,440
may want to think about before we go for

591
00:23:41,440 --> 00:23:44,640
a working roblox coil

592
00:23:48,400 --> 00:23:51,400
comments

593
00:23:57,279 --> 00:23:58,240
just

594
00:23:58,240 --> 00:24:00,240
i'd like to point out that the

595
00:24:00,240 --> 00:24:02,880
alternative to doing these presenting

596
00:24:02,880 --> 00:24:05,120
codings and other things that we might

597
00:24:05,120 --> 00:24:06,320
need to do

598
00:24:06,320 --> 00:24:07,520
apparently

599
00:24:07,520 --> 00:24:10,720
is to just admit uh your eyes in several

600
00:24:10,720 --> 00:24:12,480
places where see your eyes are

601
00:24:12,480 --> 00:24:15,200
acceptable and it will be something that

602
00:24:15,200 --> 00:24:18,240
will need to work through as um also in

603
00:24:18,240 --> 00:24:19,039
the

604
00:24:19,039 --> 00:24:21,360
in the design team but also

605
00:24:21,360 --> 00:24:23,919
solicit input here that this is just the

606
00:24:23,919 --> 00:24:26,400
easier thing to do

607
00:24:26,400 --> 00:24:28,320
for the general case

608
00:24:28,320 --> 00:24:29,919
which means that you have to carry

609
00:24:29,919 --> 00:24:32,320
around both the ci and the ui

610
00:24:32,320 --> 00:24:34,640
implementation

611
00:24:34,640 --> 00:24:36,320
yep where

612
00:24:36,320 --> 00:24:38,799
you where whereas do i'm doing these

613
00:24:38,799 --> 00:24:40,720
present encoding tricks here and some

614
00:24:40,720 --> 00:24:41,760
other

615
00:24:41,760 --> 00:24:44,240
um mean that you have to

616
00:24:44,240 --> 00:24:46,799
you might have to go into a uri anyway

617
00:24:46,799 --> 00:24:49,760
because processing it out of the the

618
00:24:49,760 --> 00:24:51,200
separated form

619
00:24:51,200 --> 00:24:54,480
if you have semantics in there might be

620
00:24:54,480 --> 00:24:56,240
comparatively tricky too

621
00:24:56,240 --> 00:24:57,440
i think we should

622
00:24:57,440 --> 00:24:58,880
should just keep an open mind towards

623
00:24:58,880 --> 00:25:00,960
both solutions while we were exploring

624
00:25:00,960 --> 00:25:03,120
them

625
00:25:05,919 --> 00:25:08,159
from the chat hank is overall supportive

626
00:25:08,159 --> 00:25:11,919
of somehow taking care of the id support

627
00:25:11,919 --> 00:25:14,080
you have any preference on the exact

628
00:25:14,080 --> 00:25:16,799
solution hank

629
00:25:25,360 --> 00:25:28,600
no audio

630
00:25:30,159 --> 00:25:32,640
mumbling to you

631
00:25:32,640 --> 00:25:34,720
so this is yeah of course it's tricky to

632
00:25:34,720 --> 00:25:35,600
uh

633
00:25:35,600 --> 00:25:36,320
and

634
00:25:36,320 --> 00:25:37,840
encompass them all

635
00:25:37,840 --> 00:25:38,640
but

636
00:25:38,640 --> 00:25:42,640
my my suspicion my and maybe my hope is

637
00:25:42,640 --> 00:25:46,960
that uh when we when we try to support

638
00:25:46,960 --> 00:25:49,600
the majority or the host of it

639
00:25:49,600 --> 00:25:51,840
um

640
00:25:52,640 --> 00:25:55,840
in the end uh the the the

641
00:25:55,840 --> 00:25:58,159
of how they're constructed today might

642
00:25:58,159 --> 00:26:00,720
be contained a little bit

643
00:26:00,720 --> 00:26:04,400
and and then uh the cri could be the uh

644
00:26:04,400 --> 00:26:07,200
the guidance how you would do it

645
00:26:07,200 --> 00:26:10,720
and and that might might ease the the

646
00:26:10,720 --> 00:26:13,279
the the wilderness out there a little

647
00:26:13,279 --> 00:26:16,000
bit and calm a little bit down um

648
00:26:16,000 --> 00:26:18,080
so so i i think the effort of trying

649
00:26:18,080 --> 00:26:19,120
this is

650
00:26:19,120 --> 00:26:22,320
volunteered i understand that of course

651
00:26:22,320 --> 00:26:25,679
you fall back to uri if nothing fits

652
00:26:25,679 --> 00:26:28,159
but in the end maybe that's

653
00:26:28,159 --> 00:26:30,240
something we can

654
00:26:30,240 --> 00:26:33,919
make go away over time

655
00:26:36,799 --> 00:26:39,039
yeah basically the idea in in the ci

656
00:26:39,039 --> 00:26:42,080
draft was to actually document which

657
00:26:42,080 --> 00:26:43,840
your eyes are not

658
00:26:43,840 --> 00:26:45,919
uh supported and there there are still

659
00:26:45,919 --> 00:26:48,799
some some very weird uis that are not

660
00:26:48,799 --> 00:26:50,799
supported even with this

661
00:26:50,799 --> 00:26:53,279
percent encoding fix

662
00:26:53,279 --> 00:26:55,279
but i think they don't have much

663
00:26:55,279 --> 00:26:57,279
practical relevance why

664
00:26:57,279 --> 00:27:00,159
the percent encoding is actually being

665
00:27:00,159 --> 00:27:01,919
used even if we know that

666
00:27:01,919 --> 00:27:05,279
implementations usually are really bad

667
00:27:05,279 --> 00:27:06,400
in this

668
00:27:06,400 --> 00:27:08,080
space

669
00:27:08,080 --> 00:27:09,440
so

670
00:27:09,440 --> 00:27:11,440
they probably won't be correct but they

671
00:27:11,440 --> 00:27:13,679
they probably will at least

672
00:27:13,679 --> 00:27:16,400
cover like 80 percent of the

673
00:27:16,400 --> 00:27:19,679
cases that actually do occur

674
00:27:19,679 --> 00:27:20,720
so

675
00:27:20,720 --> 00:27:22,159
it would be

676
00:27:22,159 --> 00:27:24,799
a drawback if we couldn't support those

677
00:27:24,799 --> 00:27:27,039
but it's probably the one place where i

678
00:27:27,039 --> 00:27:28,880
would say that might be an optional

679
00:27:28,880 --> 00:27:31,279
feature in ci is because you don't

680
00:27:31,279 --> 00:27:32,960
actually need it

681
00:27:32,960 --> 00:27:34,960
unless you you have

682
00:27:34,960 --> 00:27:39,919
weird ui designs or weird server layouts

683
00:27:44,799 --> 00:27:49,720
thank you any more comments anyone

684
00:27:52,720 --> 00:27:54,320
okay now

685
00:27:54,320 --> 00:27:57,200
thank you for today kirsten and

686
00:27:57,200 --> 00:28:01,880
next is christian with coral

687
00:28:10,240 --> 00:28:13,520
hello um like carsten did i'd like to go

688
00:28:13,520 --> 00:28:15,440
through a bit of

689
00:28:15,440 --> 00:28:17,760
introduction of what coral does because

690
00:28:17,760 --> 00:28:19,039
it's been advised this has been

691
00:28:19,039 --> 00:28:22,240
presented as at a full itf meeting

692
00:28:22,240 --> 00:28:24,480
coral is a data model and a language

693
00:28:24,480 --> 00:28:26,880
that allows us to talk about resources

694
00:28:26,880 --> 00:28:29,840
on co-op and other protocols and on how

695
00:28:29,840 --> 00:28:31,440
to interact with them in a way that is

696
00:28:31,440 --> 00:28:34,000
suitable for constraint devices that is

697
00:28:34,000 --> 00:28:37,919
um similar to how cri fits into this um

698
00:28:37,919 --> 00:28:40,320
fits into the analogy of

699
00:28:40,320 --> 00:28:41,919
of having

700
00:28:41,919 --> 00:28:42,840
a

701
00:28:42,840 --> 00:28:45,520
constrained device processable

702
00:28:45,520 --> 00:28:47,279
forward for

703
00:28:47,279 --> 00:28:50,000
um for your eyes here we have a format

704
00:28:50,000 --> 00:28:54,480
that covers areas of of metadata

705
00:28:54,480 --> 00:28:56,880
and this um before i get into kind of

706
00:28:56,880 --> 00:29:00,399
the the concrete um

707
00:29:00,399 --> 00:29:03,279
um formulas this could replace or could

708
00:29:03,279 --> 00:29:06,399
is similar to um

709
00:29:06,640 --> 00:29:09,840
we already have a few users that would

710
00:29:09,840 --> 00:29:11,600
would want to use this so the first two

711
00:29:11,600 --> 00:29:13,520
documents are problem details and pops

712
00:29:13,520 --> 00:29:15,600
up are in this working group a group

713
00:29:15,600 --> 00:29:19,200
management that administration is in ace

714
00:29:19,200 --> 00:29:21,440
which would be a bit simplified if built

715
00:29:21,440 --> 00:29:22,320
on

716
00:29:22,320 --> 00:29:23,520
coral

717
00:29:23,520 --> 00:29:25,520
sdf might have applications that we're

718
00:29:25,520 --> 00:29:27,120
starting exploring and basically

719
00:29:27,120 --> 00:29:31,440
anything that so far uses link format

720
00:29:31,440 --> 00:29:33,520
could could just as well um build on

721
00:29:33,520 --> 00:29:34,480
coral

722
00:29:34,480 --> 00:29:38,000
but it's not precisely the same

723
00:29:38,000 --> 00:29:39,919
so for example i'm

724
00:29:39,919 --> 00:29:42,799
going ahead for link format our c6690 uh

725
00:29:42,799 --> 00:29:45,039
this had a lot of string parsing so like

726
00:29:45,039 --> 00:29:48,240
we had before about um processing your

727
00:29:48,240 --> 00:29:50,640
eye by by bite and looking into what

728
00:29:50,640 --> 00:29:53,279
what does this mean semantically

729
00:29:53,279 --> 00:29:55,520
um

730
00:29:55,520 --> 00:29:57,840
in in coral all the information that in

731
00:29:57,840 --> 00:29:59,520
link format is there

732
00:29:59,520 --> 00:30:00,320
by

733
00:30:00,320 --> 00:30:02,880
possible escaping of strings and and

734
00:30:02,880 --> 00:30:05,360
processing parts of your ui out of it

735
00:30:05,360 --> 00:30:07,679
this is all expressed in sibo but then

736
00:30:07,679 --> 00:30:10,399
again compared to seabor um we have

737
00:30:10,399 --> 00:30:12,240
cement we have semantic information

738
00:30:12,240 --> 00:30:13,600
there we have

739
00:30:13,600 --> 00:30:16,480
properties of resources that are packed

740
00:30:16,480 --> 00:30:17,679
with

741
00:30:17,679 --> 00:30:18,640
uh

742
00:30:18,640 --> 00:30:20,960
that are described by predicates quite

743
00:30:20,960 --> 00:30:22,720
similar to rdf

744
00:30:22,720 --> 00:30:25,919
which allows us to use several

745
00:30:25,919 --> 00:30:28,159
domain languages in the same document so

746
00:30:28,159 --> 00:30:29,840
we can for example

747
00:30:29,840 --> 00:30:30,960
extend

748
00:30:30,960 --> 00:30:33,120
say a pub sub broker that uses

749
00:30:33,120 --> 00:30:35,279
terminology

750
00:30:35,279 --> 00:30:36,480
originally

751
00:30:36,480 --> 00:30:38,880
designed for pubsub with application

752
00:30:38,880 --> 00:30:40,640
specific semantics

753
00:30:40,640 --> 00:30:43,520
that are ignored by processes that are

754
00:30:43,520 --> 00:30:45,600
unaware of that application but can be

755
00:30:45,600 --> 00:30:48,000
used to augment functionality

756
00:30:48,000 --> 00:30:49,840
so terminology can be reused when

757
00:30:49,840 --> 00:30:52,320
building an application on top of coral

758
00:30:52,320 --> 00:30:54,159
um

759
00:30:54,159 --> 00:30:56,240
but it doesn't

760
00:30:56,240 --> 00:30:58,480
um

761
00:31:00,399 --> 00:31:04,720
terminology can be reused and

762
00:31:04,720 --> 00:31:05,840
sorry

763
00:31:05,840 --> 00:31:08,399
last track um

764
00:31:08,399 --> 00:31:10,320
and doesn't need to give

765
00:31:10,320 --> 00:31:12,159
and there's no need to define a fully

766
00:31:12,159 --> 00:31:13,840
custom format based on the old

767
00:31:13,840 --> 00:31:15,840
terminology but things can just be mixed

768
00:31:15,840 --> 00:31:18,399
in a single document

769
00:31:18,399 --> 00:31:21,039
compared to rdf to which this is also

770
00:31:21,039 --> 00:31:22,960
similar especially in the data model

771
00:31:22,960 --> 00:31:25,039
this is personable processable by

772
00:31:25,039 --> 00:31:27,279
constraint devices there's no ui process

773
00:31:27,279 --> 00:31:28,320
that you need

774
00:31:28,320 --> 00:31:31,440
and it's quite compact so just as we do

775
00:31:31,440 --> 00:31:34,640
in co-op with using option numbers here

776
00:31:34,640 --> 00:31:36,799
we can express all those predicates that

777
00:31:36,799 --> 00:31:38,880
are conceptually

778
00:31:38,880 --> 00:31:40,799
your eyes that describe the relation

779
00:31:40,799 --> 00:31:43,120
between the things that we describe and

780
00:31:43,120 --> 00:31:46,000
the data we described with

781
00:31:46,000 --> 00:31:48,240
is included in numbers rather than

782
00:31:48,240 --> 00:31:50,399
or is expressed in numbers that encode

783
00:31:50,399 --> 00:31:53,120
for uris

784
00:31:55,919 --> 00:31:56,799
still

785
00:31:56,799 --> 00:31:59,480
all those are similar so rdf and

786
00:31:59,480 --> 00:32:02,240
rc6690 link format have

787
00:32:02,240 --> 00:32:04,159
now in the latest version defined

788
00:32:04,159 --> 00:32:06,640
conversions back and forth at least for

789
00:32:06,640 --> 00:32:08,640
for subset without the rdf the

790
00:32:08,640 --> 00:32:09,840
exceptions are

791
00:32:09,840 --> 00:32:12,480
relatively a minor with link format it's

792
00:32:12,480 --> 00:32:16,559
a bit um it needs a bit more thinking um

793
00:32:16,559 --> 00:32:18,720
link format can only be converted to

794
00:32:18,720 --> 00:32:21,200
coral provided the application uses the

795
00:32:21,200 --> 00:32:23,679
semantics that we use in core for the

796
00:32:23,679 --> 00:32:25,919
attributes because otherwise the values

797
00:32:25,919 --> 00:32:27,279
of the attributes in the link format

798
00:32:27,279 --> 00:32:29,919
document are not necessarily

799
00:32:29,919 --> 00:32:32,720
well defined or registered anywhere so

800
00:32:32,720 --> 00:32:34,720
it's up to the application to define

801
00:32:34,720 --> 00:32:37,039
what the attributes mean

802
00:32:37,039 --> 00:32:39,760
if the common attributes are used there

803
00:32:39,760 --> 00:32:41,440
is a conversion back and forth between

804
00:32:41,440 --> 00:32:44,080
coral and rfc 6690

805
00:32:44,080 --> 00:32:45,120
defined

806
00:32:45,120 --> 00:32:46,720
at least for the subset of coral that

807
00:32:46,720 --> 00:32:50,559
can express 6690

808
00:32:50,799 --> 00:32:54,720
with c-boards relatively straightforward

809
00:32:54,880 --> 00:32:57,200
coral can express

810
00:32:57,200 --> 00:32:58,480
literals and

811
00:32:58,480 --> 00:33:01,279
these literals are just the ones based

812
00:33:01,279 --> 00:33:02,960
in zebra because coral is encoded in

813
00:33:02,960 --> 00:33:05,519
seawater so you can just use basically

814
00:33:05,519 --> 00:33:07,919
any value of the extended data model

815
00:33:07,919 --> 00:33:11,799
and put it in there

816
00:33:11,919 --> 00:33:15,279
we've been meeting regularly in

817
00:33:15,279 --> 00:33:19,120
design team meetings and processed a few

818
00:33:19,120 --> 00:33:21,200
focused on a few components that we

819
00:33:21,200 --> 00:33:22,799
thought that we better make progress

820
00:33:22,799 --> 00:33:25,440
fast one of those was the information

821
00:33:25,440 --> 00:33:27,440
model this is now

822
00:33:27,440 --> 00:33:30,080
i think almost complete the information

823
00:33:30,080 --> 00:33:31,760
model is now twofold

824
00:33:31,760 --> 00:33:34,559
there is the very rdf-ish

825
00:33:34,559 --> 00:33:36,880
basic information model that just

826
00:33:36,880 --> 00:33:40,480
describes what is encoded in the file

827
00:33:40,480 --> 00:33:42,559
and there is the additional structure

828
00:33:42,559 --> 00:33:45,519
that can be put on that information that

829
00:33:45,519 --> 00:33:47,919
describes how this is laid out in the

830
00:33:47,919 --> 00:33:50,320
file so that a consumer a constraint

831
00:33:50,320 --> 00:33:52,799
device can process this without building

832
00:33:52,799 --> 00:33:54,960
the full graph graph and traversing that

833
00:33:54,960 --> 00:33:57,919
graph and instead transfer traverse a

834
00:33:57,919 --> 00:34:00,399
much easier tree

835
00:34:00,399 --> 00:34:02,480
the interaction model didn't change too

836
00:34:02,480 --> 00:34:04,240
much this has already been in a very

837
00:34:04,240 --> 00:34:06,640
good shape a few versions ago

838
00:34:06,640 --> 00:34:08,719
basically describing that there is a

839
00:34:08,719 --> 00:34:11,839
user agent similar to a web browser that

840
00:34:11,839 --> 00:34:15,440
hops along this this graph or tree

841
00:34:15,440 --> 00:34:19,040
but may need to fetch a resource that it

842
00:34:19,040 --> 00:34:20,480
that it encounters

843
00:34:20,480 --> 00:34:22,320
gets gets information gets a

844
00:34:22,320 --> 00:34:24,079
representation of that resource that is

845
00:34:24,079 --> 00:34:26,560
typically a choral document again

846
00:34:26,560 --> 00:34:28,800
find that there is a link or form that

847
00:34:28,800 --> 00:34:30,879
it knows to be able to follow perform

848
00:34:30,879 --> 00:34:31,839
that

849
00:34:31,839 --> 00:34:34,639
until the program terminates or reaches

850
00:34:34,639 --> 00:34:37,520
a state where it waits

851
00:34:37,760 --> 00:34:39,918
we've changed a bit compared to the

852
00:34:39,918 --> 00:34:41,839
version that was presented a year ago

853
00:34:41,839 --> 00:34:44,639
how the dictionary is precisely defined

854
00:34:44,639 --> 00:34:48,079
and now seaboro has at least as a as an

855
00:34:48,079 --> 00:34:51,440
adopted item the packed seabor format

856
00:34:51,440 --> 00:34:53,599
that reserves a few

857
00:34:53,599 --> 00:34:55,839
seaboard tags that

858
00:34:55,839 --> 00:34:58,160
can be thought of

859
00:34:58,160 --> 00:35:00,000
as compressions of

860
00:35:00,000 --> 00:35:02,560
larger seaboard items

861
00:35:02,560 --> 00:35:05,200
and this this is basically what coral

862
00:35:05,200 --> 00:35:08,079
has been doing for a long time but now

863
00:35:08,079 --> 00:35:10,640
instead of using integers we use those

864
00:35:10,640 --> 00:35:13,280
tags and all the defined semantics for

865
00:35:13,280 --> 00:35:14,160
that

866
00:35:14,160 --> 00:35:16,880
what is not clear there yet is how we

867
00:35:16,880 --> 00:35:19,920
precisely we will set up the doc set up

868
00:35:19,920 --> 00:35:21,839
the dictionary based on which the

869
00:35:21,839 --> 00:35:23,119
compression happens because it's not

870
00:35:23,119 --> 00:35:25,359
like gzip or or

871
00:35:25,359 --> 00:35:27,280
said sdg or what or not

872
00:35:27,280 --> 00:35:28,560
that

873
00:35:28,560 --> 00:35:31,760
ship all the dictionary in the file but

874
00:35:31,760 --> 00:35:33,760
the typical situation especially for

875
00:35:33,760 --> 00:35:35,599
things like

876
00:35:35,599 --> 00:35:40,240
link format ish documents will be that

877
00:35:40,240 --> 00:35:43,200
the document format is declared as a

878
00:35:43,200 --> 00:35:46,160
as a media type with a parameter

879
00:35:46,160 --> 00:35:49,359
has that is all compressed into a single

880
00:35:49,359 --> 00:35:51,280
content format number

881
00:35:51,280 --> 00:35:53,760
and the consumer seeing that number will

882
00:35:53,760 --> 00:35:56,560
know to pre-populate all the dictionary

883
00:35:56,560 --> 00:35:58,720
with the typical items like resource

884
00:35:58,720 --> 00:36:01,040
type core interface

885
00:36:01,040 --> 00:36:02,800
the host's relation

886
00:36:02,800 --> 00:36:04,560
and all those things that are

887
00:36:04,560 --> 00:36:06,000
common

888
00:36:06,000 --> 00:36:06,880
in

889
00:36:06,880 --> 00:36:09,680
link format documents

890
00:36:09,680 --> 00:36:12,800
we might also want to use

891
00:36:12,800 --> 00:36:15,280
basic packet format which is packed

892
00:36:15,280 --> 00:36:16,640
seabor's

893
00:36:16,640 --> 00:36:18,640
way of saying of defining that

894
00:36:18,640 --> 00:36:21,520
dictionary at the front of the file

895
00:36:21,520 --> 00:36:23,680
and we might also consider importing a

896
00:36:23,680 --> 00:36:26,880
named dictionary that is your state one

897
00:36:26,880 --> 00:36:29,359
uri or one uran

898
00:36:29,359 --> 00:36:31,520
and the application then

899
00:36:31,520 --> 00:36:34,240
loads a dictionary associated with that

900
00:36:34,240 --> 00:36:35,359
name

901
00:36:35,359 --> 00:36:37,599
into the current state

902
00:36:37,599 --> 00:36:40,160
what which of those we take will

903
00:36:40,160 --> 00:36:43,119
probably be guided by

904
00:36:43,119 --> 00:36:43,450
um

905
00:36:43,450 --> 00:36:44,880
[Music]

906
00:36:44,880 --> 00:36:48,320
by applications that we try this out on

907
00:36:48,320 --> 00:36:50,000
the binary serialization we didn't

908
00:36:50,000 --> 00:36:52,079
change a lot this is just something that

909
00:36:52,079 --> 00:36:54,720
will also to a later stage when we have

910
00:36:54,720 --> 00:36:57,119
a corpus of example cases where we can

911
00:36:57,119 --> 00:36:59,280
then evaluate does it make sense to

912
00:36:59,280 --> 00:37:02,000
spend a bite here or spend a bite there

913
00:37:02,000 --> 00:37:03,040
um

914
00:37:03,040 --> 00:37:05,520
but this is best done with a

915
00:37:05,520 --> 00:37:07,599
with a with a with a larger basis that

916
00:37:07,599 --> 00:37:08,400
will

917
00:37:08,400 --> 00:37:10,720
that i'll come to in the next step uh we

918
00:37:10,720 --> 00:37:13,599
will will have to obtain

919
00:37:13,599 --> 00:37:15,359
there used to be a text serialization

920
00:37:15,359 --> 00:37:18,000
that was very similar to turtle um that

921
00:37:18,000 --> 00:37:20,640
took up a large portion of the document

922
00:37:20,640 --> 00:37:22,320
and we've removed that for the time

923
00:37:22,320 --> 00:37:23,760
being

924
00:37:23,760 --> 00:37:27,200
um expressing sibor in diagnostic

925
00:37:27,200 --> 00:37:29,920
notation of of uh expression curl and

926
00:37:29,920 --> 00:37:32,240
the diagnostic notation of zebra is now

927
00:37:32,240 --> 00:37:34,160
a bit easier now that there's the edn

928
00:37:34,160 --> 00:37:36,320
extended diagnostic notation draft

929
00:37:36,320 --> 00:37:38,480
around which allows us to just write

930
00:37:38,480 --> 00:37:41,760
cris in in text uri

931
00:37:41,760 --> 00:37:43,839
reference representation

932
00:37:43,839 --> 00:37:45,359
and occasional examples are also

933
00:37:45,359 --> 00:37:47,440
expressed in turtle in those cases where

934
00:37:47,440 --> 00:37:49,520
we just need the c of triple semantic

935
00:37:49,520 --> 00:37:52,000
and not all the structure that is in the

936
00:37:52,000 --> 00:37:54,720
tree shape and we don't need to express

937
00:37:54,720 --> 00:37:57,040
whether something is

938
00:37:57,040 --> 00:38:00,079
um written down in packed format or just

939
00:38:00,079 --> 00:38:01,920
uh just spelled out

940
00:38:01,920 --> 00:38:05,040
and there is the topic of how we do

941
00:38:05,040 --> 00:38:07,359
queries around this how we modify a

942
00:38:07,359 --> 00:38:09,359
document like can we use this with

943
00:38:09,359 --> 00:38:11,200
factual with post

944
00:38:11,200 --> 00:38:13,920
and how we describe where the data comes

945
00:38:13,920 --> 00:38:14,800
from

946
00:38:14,800 --> 00:38:16,880
which is related to reification of those

947
00:38:16,880 --> 00:38:18,320
statements that is making them into

948
00:38:18,320 --> 00:38:20,560
something that we can later talk about

949
00:38:20,560 --> 00:38:23,520
having come from this or that authority

950
00:38:23,520 --> 00:38:25,119
which is very

951
00:38:25,119 --> 00:38:27,280
very important to have but

952
00:38:27,280 --> 00:38:29,520
we're currently just chunking it up

953
00:38:29,520 --> 00:38:31,440
we're keeping those things in mind

954
00:38:31,440 --> 00:38:32,480
um

955
00:38:32,480 --> 00:38:34,160
but they are for later phases in the

956
00:38:34,160 --> 00:38:36,320
specification and some of those we might

957
00:38:36,320 --> 00:38:39,599
also refer to uh through a second stage

958
00:38:39,599 --> 00:38:42,880
when the basic model is already done

959
00:38:42,880 --> 00:38:44,960
so our next steps are to coordinate with

960
00:38:44,960 --> 00:38:48,000
uses of the of the most potential uses

961
00:38:48,000 --> 00:38:50,079
of coral and just

962
00:38:50,079 --> 00:38:51,760
check whether what we're doing is still

963
00:38:51,760 --> 00:38:53,359
aligned with them

964
00:38:53,359 --> 00:38:55,280
this is relatively easy for things like

965
00:38:55,280 --> 00:38:57,599
problem details where we're already

966
00:38:57,599 --> 00:38:59,119
using

967
00:38:59,119 --> 00:39:01,359
those documents for example

968
00:39:01,359 --> 00:39:04,000
and aligning this with

969
00:39:04,000 --> 00:39:05,760
with astf

970
00:39:05,760 --> 00:39:07,520
will hopefully give us a bit more

971
00:39:07,520 --> 00:39:10,000
insights because we don't precisely know

972
00:39:10,000 --> 00:39:12,079
how things like forms are used there at

973
00:39:12,079 --> 00:39:13,119
all

974
00:39:13,119 --> 00:39:15,280
from that we hope to get a

975
00:39:15,280 --> 00:39:16,560
corpus of

976
00:39:16,560 --> 00:39:18,800
items that we can then try the binary

977
00:39:18,800 --> 00:39:21,680
serializations against and also evaluate

978
00:39:21,680 --> 00:39:24,000
how which steps in the

979
00:39:24,000 --> 00:39:27,119
dictionary setup we need

980
00:39:27,760 --> 00:39:29,200
something that we

981
00:39:29,200 --> 00:39:31,280
could probably use working group input

982
00:39:31,280 --> 00:39:34,560
on right now is defining the the subset

983
00:39:34,560 --> 00:39:36,720
of features that we want to have right

984
00:39:36,720 --> 00:39:38,720
away especially when it comes to things

985
00:39:38,720 --> 00:39:40,960
like um patching or fetching is this

986
00:39:40,960 --> 00:39:43,520
something we should aim for in the

987
00:39:43,520 --> 00:39:45,280
in the current iteration or is this

988
00:39:45,280 --> 00:39:48,000
something that would be okay to ship

989
00:39:48,000 --> 00:39:52,000
um in uh as an update

990
00:39:52,000 --> 00:39:54,400
yep uh thanks for your time

991
00:39:54,400 --> 00:39:57,200
other questions do you have maybe

992
00:39:57,200 --> 00:39:59,759
comments right

993
00:40:08,839 --> 00:40:13,920
away nicely no in the chat either

994
00:40:17,119 --> 00:40:20,480
audi says this is good stuff

995
00:40:21,040 --> 00:40:24,040
indeed

996
00:40:27,920 --> 00:40:30,800
okay if there are no other comments or

997
00:40:30,800 --> 00:40:32,400
input from christian

998
00:40:32,400 --> 00:40:34,720
thank you so much

999
00:40:34,720 --> 00:40:39,200
we move on to the next item that's esko

1000
00:40:39,200 --> 00:40:43,200
for group communication for co-op

1001
00:40:46,560 --> 00:40:48,160
hi esco

1002
00:40:48,160 --> 00:40:50,480
we cannot hear you

1003
00:40:50,480 --> 00:40:53,599
but we can see you

1004
00:40:53,599 --> 00:40:55,440
okay i just need to unmute so it's okay

1005
00:40:55,440 --> 00:40:58,560
i don't know yes

1006
00:41:00,880 --> 00:41:02,400
slides

1007
00:41:02,400 --> 00:41:05,400
right

1008
00:41:10,800 --> 00:41:12,960
so maybe you have to remind me again for

1009
00:41:12,960 --> 00:41:14,160
the slide so

1010
00:41:14,160 --> 00:41:15,839
look on the top left

1011
00:41:15,839 --> 00:41:19,040
the second icon from the left

1012
00:41:19,040 --> 00:41:21,599
so the pdf icon and then you have to

1013
00:41:21,599 --> 00:41:23,040
select

1014
00:41:23,040 --> 00:41:24,640
the right one but you can have also

1015
00:41:24,640 --> 00:41:26,400
preview

1016
00:41:26,400 --> 00:41:29,200
in the selection window

1017
00:41:29,200 --> 00:41:32,720
okay and i need to do it right

1018
00:41:32,839 --> 00:41:34,720
yeah

1019
00:41:34,720 --> 00:41:36,000
let's see

1020
00:41:36,000 --> 00:41:37,920
sorry presentation view

1021
00:41:37,920 --> 00:41:39,920
um that's not the right icon there or

1022
00:41:39,920 --> 00:41:42,480
just uh

1023
00:41:42,480 --> 00:41:44,400
yeah okay ask to share slides is that

1024
00:41:44,400 --> 00:41:45,359
one

1025
00:41:45,359 --> 00:41:46,839
yes okay it's

1026
00:41:46,839 --> 00:41:50,160
loading yeah

1027
00:41:53,359 --> 00:41:55,359
okay i see it at least now

1028
00:41:55,359 --> 00:41:59,200
yeah it works there you go okay

1029
00:41:59,280 --> 00:42:02,079
so i'm going to talk about group combis

1030
00:42:02,079 --> 00:42:04,240
now at version 5

1031
00:42:04,240 --> 00:42:06,640
already

1032
00:42:07,040 --> 00:42:08,560
and

1033
00:42:08,560 --> 00:42:11,200
let's briefly recap the goal

1034
00:42:11,200 --> 00:42:13,440
of this document so i'll made it shorter

1035
00:42:13,440 --> 00:42:14,800
than the last time

1036
00:42:14,800 --> 00:42:16,720
so we actually have um

1037
00:42:16,720 --> 00:42:19,119
working on normative successor for rfc

1038
00:42:19,119 --> 00:42:21,119
7390

1039
00:42:21,119 --> 00:42:23,839
which was experimental and addressed

1040
00:42:23,839 --> 00:42:27,200
co-op group communication

1041
00:42:27,760 --> 00:42:30,000
we obsolete that

1042
00:42:30,000 --> 00:42:32,160
predecessor rc and also make some

1043
00:42:32,160 --> 00:42:33,520
updates to

1044
00:42:33,520 --> 00:42:36,319
co-op and observe

1045
00:42:36,319 --> 00:42:39,680
and the idea was to have a new kind of

1046
00:42:39,680 --> 00:42:41,440
standard reference document for group

1047
00:42:41,440 --> 00:42:43,359
communication that also implementers can

1048
00:42:43,359 --> 00:42:45,839
use

1049
00:42:46,160 --> 00:42:48,720
the scope we cover various things

1050
00:42:48,720 --> 00:42:51,119
all around group communication so not

1051
00:42:51,119 --> 00:42:52,000
just

1052
00:42:52,000 --> 00:42:55,359
over udp or ip multicast but more in

1053
00:42:55,359 --> 00:42:57,200
general now as well

1054
00:42:57,200 --> 00:42:59,359
and also mentioned latest features like

1055
00:42:59,359 --> 00:43:03,920
observe clockwise and of course security

1056
00:43:03,920 --> 00:43:05,680
that's also a major part of the draft so

1057
00:43:05,680 --> 00:43:08,000
we now define a group of score based

1058
00:43:08,000 --> 00:43:09,200
security

1059
00:43:09,200 --> 00:43:11,839
besides the unsecured co-op group

1060
00:43:11,839 --> 00:43:13,680
communication

1061
00:43:13,680 --> 00:43:16,000
there's also now a bit more extensive

1062
00:43:16,000 --> 00:43:18,640
definitions of the group types and how

1063
00:43:18,640 --> 00:43:21,119
they relate to each other

1064
00:43:21,119 --> 00:43:23,200
and also some

1065
00:43:23,200 --> 00:43:25,040
guide guidelines for a secure group

1066
00:43:25,040 --> 00:43:27,839
communication

1067
00:43:29,520 --> 00:43:31,280
so now i'll go into quick overview of

1068
00:43:31,280 --> 00:43:32,000
the

1069
00:43:32,000 --> 00:43:35,119
updates we did for this version

1070
00:43:35,119 --> 00:43:38,400
so the first thing we did was remove the

1071
00:43:38,400 --> 00:43:40,480
multi etac option

1072
00:43:40,480 --> 00:43:42,720
so at some point we introduced the

1073
00:43:42,720 --> 00:43:45,839
existing e-tec option which seems okay

1074
00:43:45,839 --> 00:43:48,240
for the purpose and is also simpler

1075
00:43:48,240 --> 00:43:51,040
because it's already there

1076
00:43:51,040 --> 00:43:52,839
and it has a simpler

1077
00:43:52,839 --> 00:43:54,800
structure and

1078
00:43:54,800 --> 00:43:58,079
to us that seemed enough

1079
00:43:58,079 --> 00:43:59,760
so we don't need

1080
00:43:59,760 --> 00:44:03,760
necessarily this this multi etag option

1081
00:44:03,760 --> 00:44:05,760
the second point was that a whole

1082
00:44:05,760 --> 00:44:08,160
section was added 1.3 based on review

1083
00:44:08,160 --> 00:44:09,280
comments

1084
00:44:09,280 --> 00:44:11,280
to clarify more detail what we actually

1085
00:44:11,280 --> 00:44:14,160
update or obsolete informal rfc so this

1086
00:44:14,160 --> 00:44:15,920
is now all

1087
00:44:15,920 --> 00:44:18,560
kept in one place

1088
00:44:18,560 --> 00:44:21,799
in this section

1089
00:44:22,160 --> 00:44:24,960
also in change was made in

1090
00:44:24,960 --> 00:44:26,960
section two to one

1091
00:44:26,960 --> 00:44:29,200
so this was about uh

1092
00:44:29,200 --> 00:44:32,560
yeah how you basically can identify

1093
00:44:32,560 --> 00:44:35,359
or name an application group within the

1094
00:44:35,359 --> 00:44:37,680
group awry or more general within the

1095
00:44:37,680 --> 00:44:39,839
corp request

1096
00:44:39,839 --> 00:44:41,760
so we put this

1097
00:44:41,760 --> 00:44:44,640
resolution for this issue also 28

1098
00:44:44,640 --> 00:44:46,480
in the new version

1099
00:44:46,480 --> 00:44:48,400
but it's still pending some working

1100
00:44:48,400 --> 00:44:52,079
group review and approval of course

1101
00:44:52,240 --> 00:44:54,160
so now i'll just

1102
00:44:54,160 --> 00:44:56,400
move to that so this is a little bit of

1103
00:44:56,400 --> 00:44:58,160
an intermediate where i introduced this

1104
00:44:58,160 --> 00:45:02,399
issue 28 application group naming

1105
00:45:02,800 --> 00:45:05,200
so what we have defined in the draft is

1106
00:45:05,200 --> 00:45:07,180
the application groups that could be

1107
00:45:07,180 --> 00:45:08,720
[Music]

1108
00:45:08,720 --> 00:45:10,880
named with any identifier such as a

1109
00:45:10,880 --> 00:45:13,119
string a number entity number or

1110
00:45:13,119 --> 00:45:15,040
complete uri

1111
00:45:15,040 --> 00:45:16,800
if you have such identifier it may be

1112
00:45:16,800 --> 00:45:19,599
encoded within the group uri

1113
00:45:19,599 --> 00:45:21,599
so this top form is what we basically

1114
00:45:21,599 --> 00:45:24,079
recommend it's kind of a

1115
00:45:24,079 --> 00:45:27,359
usual way to do it so you have here

1116
00:45:27,359 --> 00:45:29,440
in the authority there's go up co-op

1117
00:45:29,440 --> 00:45:30,960
group address

1118
00:45:30,960 --> 00:45:32,720
that's basically the co-op group to

1119
00:45:32,720 --> 00:45:34,240
which the request

1120
00:45:34,240 --> 00:45:36,079
is targeted and within the co-op group

1121
00:45:36,079 --> 00:45:39,200
you can have multiple application groups

1122
00:45:39,200 --> 00:45:42,400
still and this is group one shown in red

1123
00:45:42,400 --> 00:45:44,240
here in the path

1124
00:45:44,240 --> 00:45:45,599
of course you can encode the same

1125
00:45:45,599 --> 00:45:48,000
information also in other ways so it's

1126
00:45:48,000 --> 00:45:51,520
also shown how to do that in a query

1127
00:45:51,520 --> 00:45:53,040
in different ways

1128
00:45:53,040 --> 00:45:54,560
you can even

1129
00:45:54,560 --> 00:45:56,240
put it in the host

1130
00:45:56,240 --> 00:45:58,800
component in that case it becomes a part

1131
00:45:58,800 --> 00:46:00,640
of the co-op group

1132
00:46:00,640 --> 00:46:02,640
because the co-op group is composed of

1133
00:46:02,640 --> 00:46:04,400
the

1134
00:46:04,400 --> 00:46:07,440
authority including the port

1135
00:46:07,440 --> 00:46:09,440
you can also put it

1136
00:46:09,440 --> 00:46:11,440
explicitly in the port number so then

1137
00:46:11,440 --> 00:46:13,440
the group application groups becomes a

1138
00:46:13,440 --> 00:46:14,640
number

1139
00:46:14,640 --> 00:46:16,640
in that case it is also

1140
00:46:16,640 --> 00:46:19,200
part of the co-op group because the port

1141
00:46:19,200 --> 00:46:21,599
number is also included in co-op group

1142
00:46:21,599 --> 00:46:23,280
so there's some

1143
00:46:23,280 --> 00:46:25,359
overlap in that case between what is the

1144
00:46:25,359 --> 00:46:27,040
co-op group and what is the application

1145
00:46:27,040 --> 00:46:28,400
groups

1146
00:46:28,400 --> 00:46:30,800
but these are always that the receiver

1147
00:46:30,800 --> 00:46:32,079
can at least

1148
00:46:32,079 --> 00:46:33,920
identify

1149
00:46:33,920 --> 00:46:36,000
yeah the group but also the sender can

1150
00:46:36,000 --> 00:46:38,079
identify it within the uri

1151
00:46:38,079 --> 00:46:40,880
which is still not yet encoded in carb

1152
00:46:40,880 --> 00:46:44,319
form this is just the uri as such

1153
00:46:44,319 --> 00:46:46,400
and the final option we show is that it

1154
00:46:46,400 --> 00:46:48,960
can also be not in the group uri

1155
00:46:48,960 --> 00:46:50,960
so you can also say well

1156
00:46:50,960 --> 00:46:53,520
the sender adds this for example in a

1157
00:46:53,520 --> 00:46:54,880
co-op option

1158
00:46:54,880 --> 00:46:56,560
and adds that to the request which is

1159
00:46:56,560 --> 00:46:58,319
not something that's not part of the

1160
00:46:58,319 --> 00:47:01,200
group uri but is still in the request

1161
00:47:01,200 --> 00:47:02,880
you could also have it implicit so that

1162
00:47:02,880 --> 00:47:04,720
means that the receiver has to figure

1163
00:47:04,720 --> 00:47:05,920
out

1164
00:47:05,920 --> 00:47:07,359
what is the application group or there

1165
00:47:07,359 --> 00:47:09,680
is just one default application group in

1166
00:47:09,680 --> 00:47:12,079
that case

1167
00:47:12,079 --> 00:47:14,079
that could be associated to that co-op

1168
00:47:14,079 --> 00:47:16,319
group

1169
00:47:16,880 --> 00:47:19,040
so this is the part we clarify a bit

1170
00:47:19,040 --> 00:47:20,050
more so it was

1171
00:47:20,050 --> 00:47:21,599
[Music]

1172
00:47:21,599 --> 00:47:23,280
not so clear from the previous version

1173
00:47:23,280 --> 00:47:25,040
of the giraffe that that we could

1174
00:47:25,040 --> 00:47:27,119
actually do all these things and all of

1175
00:47:27,119 --> 00:47:28,960
this is of course application dependent

1176
00:47:28,960 --> 00:47:29,920
how you

1177
00:47:29,920 --> 00:47:32,240
exactly encode this you can do many

1178
00:47:32,240 --> 00:47:35,598
different things here with co-op

1179
00:47:36,839 --> 00:47:39,680
okay we'll just continue now with the

1180
00:47:39,680 --> 00:47:41,520
updates um

1181
00:47:41,520 --> 00:47:44,240
so three more updates we did

1182
00:47:44,240 --> 00:47:47,040
was in section two two three

1183
00:47:47,040 --> 00:47:49,040
we also had another open issue so that

1184
00:47:49,040 --> 00:47:52,240
was also based on a review by christian

1185
00:47:52,240 --> 00:47:53,440
about

1186
00:47:53,440 --> 00:47:55,280
what kinds of group discovery are

1187
00:47:55,280 --> 00:47:56,720
possible using co-op because we

1188
00:47:56,720 --> 00:47:58,400
mentioned there is rd

1189
00:47:58,400 --> 00:48:00,960
group discovery and we mentioned there

1190
00:48:00,960 --> 00:48:02,720
is also

1191
00:48:02,720 --> 00:48:05,200
discovery of groups you can do with pure

1192
00:48:05,200 --> 00:48:07,440
co-op so client-to-server without using

1193
00:48:07,440 --> 00:48:08,480
an rd

1194
00:48:08,480 --> 00:48:10,319
it was not so clear what what this

1195
00:48:10,319 --> 00:48:12,319
really was and what kinds of uh

1196
00:48:12,319 --> 00:48:13,839
discovery are possible so now we

1197
00:48:13,839 --> 00:48:16,000
expanded this text here

1198
00:48:16,000 --> 00:48:18,240
also make some examples of what you can

1199
00:48:18,240 --> 00:48:20,480
discover with

1200
00:48:20,480 --> 00:48:25,119
basically cop discovery and link format

1201
00:48:25,119 --> 00:48:26,960
this is also pending working group

1202
00:48:26,960 --> 00:48:28,640
review

1203
00:48:28,640 --> 00:48:31,359
and approval

1204
00:48:31,359 --> 00:48:33,839
yeah a second important change was the

1205
00:48:33,839 --> 00:48:35,760
second point on the slides so we have

1206
00:48:35,760 --> 00:48:37,839
stronger advice on unsecured group

1207
00:48:37,839 --> 00:48:39,839
communications and are we just saying

1208
00:48:39,839 --> 00:48:43,520
capitals it's not recommended

1209
00:48:43,760 --> 00:48:45,040
and this was

1210
00:48:45,040 --> 00:48:47,599
one of the open issues number 20 do

1211
00:48:47,599 --> 00:48:49,119
so we hope that's okay for the working

1212
00:48:49,119 --> 00:48:52,319
group to have it uh as a normative

1213
00:48:52,319 --> 00:48:53,440
statement

1214
00:48:53,440 --> 00:48:56,720
still possible to to do it but

1215
00:48:56,720 --> 00:48:58,480
if you have ways of course to protect it

1216
00:48:58,480 --> 00:49:03,079
then that is definitely recommended

1217
00:49:04,480 --> 00:49:06,960
let's see i see your hands coming up

1218
00:49:06,960 --> 00:49:08,559
yeah i just have a quick question when

1219
00:49:08,559 --> 00:49:10,000
you say not

1220
00:49:10,000 --> 00:49:12,480
not recommended

1221
00:49:12,480 --> 00:49:14,640
does this mean that we are essentially

1222
00:49:14,640 --> 00:49:17,760
deprecating the use of multicast for

1223
00:49:17,760 --> 00:49:20,480
discovery

1224
00:49:21,920 --> 00:49:23,680
i think multicast for discovery was i

1225
00:49:23,680 --> 00:49:25,599
think mentioned as one of the cases

1226
00:49:25,599 --> 00:49:28,319
where you uh often you do still need it

1227
00:49:28,319 --> 00:49:30,559
so uh okay

1228
00:49:30,559 --> 00:49:33,680
i think marco that's correct right

1229
00:49:33,680 --> 00:49:36,400
yes we're basically saying it's not

1230
00:49:36,400 --> 00:49:38,720
recommended if you do otherwise you'd

1231
00:49:38,720 --> 00:49:40,559
better have very good reasons and

1232
00:49:40,559 --> 00:49:42,960
analysis of your case and early

1233
00:49:42,960 --> 00:49:46,319
discovery is one example we gave

1234
00:49:46,319 --> 00:49:48,160
yeah i think this discovery needs to be

1235
00:49:48,160 --> 00:49:51,680
qualified a little bit to

1236
00:49:51,839 --> 00:49:55,680
reduce the potential for

1237
00:49:55,839 --> 00:49:57,920
reflection attacks so you should say

1238
00:49:57,920 --> 00:50:00,640
something that if you use it that way

1239
00:50:00,640 --> 00:50:03,520
make sure that the response is not much

1240
00:50:03,520 --> 00:50:06,160
larger than the request

1241
00:50:06,160 --> 00:50:07,839
but of course that also doesn't help if

1242
00:50:07,839 --> 00:50:11,680
your multicast group is gigantic

1243
00:50:11,680 --> 00:50:12,480
so

1244
00:50:12,480 --> 00:50:14,559
yeah it would be interesting to see how

1245
00:50:14,559 --> 00:50:16,559
how we actually

1246
00:50:16,559 --> 00:50:18,640
position ourselves to with respect to

1247
00:50:18,640 --> 00:50:20,640
that usage because it

1248
00:50:20,640 --> 00:50:22,720
certainly was very popular when when the

1249
00:50:22,720 --> 00:50:24,839
work on corp

1250
00:50:24,839 --> 00:50:28,400
began uh on this point carson following

1251
00:50:28,400 --> 00:50:30,880
jones review we also added in this

1252
00:50:30,880 --> 00:50:33,520
version more content about the risk of

1253
00:50:33,520 --> 00:50:35,920
amplification attack

1254
00:50:35,920 --> 00:50:38,559
so that's discussed now also more than

1255
00:50:38,559 --> 00:50:40,400
the previous version

1256
00:50:40,400 --> 00:50:42,400
good

1257
00:50:42,400 --> 00:50:44,800
thank you

1258
00:50:46,079 --> 00:50:49,200
okay yeah that's right

1259
00:50:49,680 --> 00:50:52,720
and yeah then finally uh that's the kind

1260
00:50:52,720 --> 00:50:55,200
of catch-all improvement so we made some

1261
00:50:55,200 --> 00:50:57,200
editorial improvements

1262
00:50:57,200 --> 00:50:59,440
and fixes so there were some fixes in

1263
00:50:59,440 --> 00:51:01,599
the description of the group relations

1264
00:51:01,599 --> 00:51:03,440
and the diagrams

1265
00:51:03,440 --> 00:51:06,480
we expanded explanations of forward and

1266
00:51:06,480 --> 00:51:08,559
backward security

1267
00:51:08,559 --> 00:51:11,280
just to make sure that it was clear what

1268
00:51:11,280 --> 00:51:13,520
that meant in our case

1269
00:51:13,520 --> 00:51:15,839
also the text that marco mentioned about

1270
00:51:15,839 --> 00:51:17,839
amplification

1271
00:51:17,839 --> 00:51:22,200
risk is also more extensive

1272
00:51:23,359 --> 00:51:25,760
all right so i think these are the main

1273
00:51:25,760 --> 00:51:27,280
improvements so i want to go back to

1274
00:51:27,280 --> 00:51:30,000
this top one so number 29

1275
00:51:30,000 --> 00:51:32,160
just to give give an overview what this

1276
00:51:32,160 --> 00:51:34,079
was about

1277
00:51:34,079 --> 00:51:35,760
so here are some

1278
00:51:35,760 --> 00:51:38,240
co-op multicast queries that you can do

1279
00:51:38,240 --> 00:51:40,559
so a multicast request

1280
00:51:40,559 --> 00:51:43,280
that's basically doing a query on

1281
00:51:43,280 --> 00:51:45,680
dot well known slash core

1282
00:51:45,680 --> 00:51:47,680
to discover something and of course all

1283
00:51:47,680 --> 00:51:49,839
of this is very much application

1284
00:51:49,839 --> 00:51:51,599
dependent there's no

1285
00:51:51,599 --> 00:51:54,880
single way to do this it depends how the

1286
00:51:54,880 --> 00:51:55,680
yeah

1287
00:51:55,680 --> 00:51:58,480
if and how the groups are encoded

1288
00:51:58,480 --> 00:52:01,680
as part of resources on servers so

1289
00:52:01,680 --> 00:52:03,839
in this case we assume that

1290
00:52:03,839 --> 00:52:07,040
application groups are represented as

1291
00:52:07,040 --> 00:52:08,559
resources

1292
00:52:08,559 --> 00:52:10,640
and also these resources in the top

1293
00:52:10,640 --> 00:52:13,040
example are located

1294
00:52:13,040 --> 00:52:13,920
within

1295
00:52:13,920 --> 00:52:17,200
a specific part so slash g

1296
00:52:17,200 --> 00:52:18,720
something and then that something is the

1297
00:52:18,720 --> 00:52:21,040
group name

1298
00:52:21,040 --> 00:52:23,599
so basically this sends a query to the

1299
00:52:23,599 --> 00:52:25,920
co-op group cg1

1300
00:52:25,920 --> 00:52:27,359
which could be uh

1301
00:52:27,359 --> 00:52:29,599
it could be your uri that's resolved to

1302
00:52:29,599 --> 00:52:31,599
multicast address it could be

1303
00:52:31,599 --> 00:52:34,160
just a plain multicast address

1304
00:52:34,160 --> 00:52:35,599
and port

1305
00:52:35,599 --> 00:52:38,559
so this goes to all the cg1 members

1306
00:52:38,559 --> 00:52:40,480
and this these members will basically be

1307
00:52:40,480 --> 00:52:42,319
queried for uh

1308
00:52:42,319 --> 00:52:44,720
application groups so and with star we

1309
00:52:44,720 --> 00:52:46,720
basically have a wild card so any

1310
00:52:46,720 --> 00:52:50,400
application group name should match here

1311
00:52:50,400 --> 00:52:52,559
so the idea is that these application

1312
00:52:52,559 --> 00:52:54,720
group members then will be reporting

1313
00:52:54,720 --> 00:52:55,680
back

1314
00:52:55,680 --> 00:52:59,480
their application groups

1315
00:53:00,720 --> 00:53:03,280
let's see then the second example uh

1316
00:53:03,280 --> 00:53:05,520
that's sending specifically a multicast

1317
00:53:05,520 --> 00:53:06,800
to the realm

1318
00:53:06,800 --> 00:53:08,000
local

1319
00:53:08,000 --> 00:53:10,240
co-op group of all co-op nodes that's

1320
00:53:10,240 --> 00:53:11,880
this

1321
00:53:11,880 --> 00:53:14,720
ff03fd address

1322
00:53:14,720 --> 00:53:16,880
so there it's querying a specific group

1323
00:53:16,880 --> 00:53:17,760
so

1324
00:53:17,760 --> 00:53:20,400
this is encoded in a slash group

1325
00:53:20,400 --> 00:53:23,200
parent resource and the slash group 1

1326
00:53:23,200 --> 00:53:25,440
child resource is in there

1327
00:53:25,440 --> 00:53:27,280
so it will basically find this specific

1328
00:53:27,280 --> 00:53:29,599
named group or all

1329
00:53:29,599 --> 00:53:30,880
including all

1330
00:53:30,880 --> 00:53:32,319
members of that group who will be

1331
00:53:32,319 --> 00:53:34,960
responding

1332
00:53:36,800 --> 00:53:39,440
let's see the third example is to have

1333
00:53:39,440 --> 00:53:42,240
application groups of a particular type

1334
00:53:42,240 --> 00:53:44,720
again in the local mesh

1335
00:53:44,720 --> 00:53:47,599
so that's the ff03 it's multicasting to

1336
00:53:47,599 --> 00:53:50,640
the realm local address local mesh

1337
00:53:50,640 --> 00:53:52,800
so this type is now encoded as a

1338
00:53:52,800 --> 00:53:55,280
resource type rt attribute here in this

1339
00:53:55,280 --> 00:53:57,359
particular example

1340
00:53:57,359 --> 00:53:59,280
so the client knows that and we'll just

1341
00:53:59,280 --> 00:54:02,559
query for anything with that rt

1342
00:54:02,559 --> 00:54:04,400
to get these

1343
00:54:04,400 --> 00:54:06,240
these specific types of application

1344
00:54:06,240 --> 00:54:07,280
groups

1345
00:54:07,280 --> 00:54:10,280
back

1346
00:54:10,480 --> 00:54:12,240
and there's one more example of this in

1347
00:54:12,240 --> 00:54:14,960
the id so this is not

1348
00:54:14,960 --> 00:54:16,559
exhaustive of course this is just to

1349
00:54:16,559 --> 00:54:18,880
give some examples of how

1350
00:54:18,880 --> 00:54:19,839
you can

1351
00:54:19,839 --> 00:54:22,079
use this for discovery of groups and

1352
00:54:22,079 --> 00:54:23,280
group members

1353
00:54:23,280 --> 00:54:25,200
so both for application groups and co-op

1354
00:54:25,200 --> 00:54:26,960
groups

1355
00:54:26,960 --> 00:54:28,160
question i see

1356
00:54:28,160 --> 00:54:30,558
i mean

1357
00:54:32,720 --> 00:54:34,400
did you have a question

1358
00:54:34,400 --> 00:54:36,000
yes well more than a question a

1359
00:54:36,000 --> 00:54:38,240
clarification so all these examples in

1360
00:54:38,240 --> 00:54:40,480
the presentation are excellent i'm just

1361
00:54:40,480 --> 00:54:42,480
trying to look for them in the document

1362
00:54:42,480 --> 00:54:43,200
and

1363
00:54:43,200 --> 00:54:44,640
i i

1364
00:54:44,640 --> 00:54:46,799
it would seem it's missing some examples

1365
00:54:46,799 --> 00:54:49,920
so you could benefit from them

1366
00:54:49,920 --> 00:54:51,040
yeah yeah i haven't done a thorough

1367
00:54:51,040 --> 00:54:52,640
review so i apologize for that to begin

1368
00:54:52,640 --> 00:54:53,680
with but

1369
00:54:53,680 --> 00:54:54,880
just a comment

1370
00:54:54,880 --> 00:54:56,720
it's true that they are in kind of in

1371
00:54:56,720 --> 00:54:57,760
text

1372
00:54:57,760 --> 00:55:00,480
there uh maybe it would help to also

1373
00:55:00,480 --> 00:55:01,920
have these uh

1374
00:55:01,920 --> 00:55:03,680
example

1375
00:55:03,680 --> 00:55:05,599
uri so these are a bit more specific

1376
00:55:05,599 --> 00:55:08,799
than what we wrote down i think

1377
00:55:08,799 --> 00:55:10,640
yeah maybe like this classic request

1378
00:55:10,640 --> 00:55:13,839
response examples

1379
00:55:14,559 --> 00:55:16,160
thanks

1380
00:55:16,160 --> 00:55:18,480
okay yeah that could be uh helpful there

1381
00:55:18,480 --> 00:55:20,799
to add maybe add this particular example

1382
00:55:20,799 --> 00:55:22,319
so now we have some text and you could

1383
00:55:22,319 --> 00:55:23,680
have a

1384
00:55:23,680 --> 00:55:24,640
yeah

1385
00:55:24,640 --> 00:55:26,559
request response type thing added to

1386
00:55:26,559 --> 00:55:28,240
that

1387
00:55:28,240 --> 00:55:29,839
okay it's definitely something to

1388
00:55:29,839 --> 00:55:32,839
consider

1389
00:55:34,400 --> 00:55:37,280
yeah that's fine

1390
00:55:37,280 --> 00:55:39,119
and let's see uh we can go then i think

1391
00:55:39,119 --> 00:55:40,960
to the next steps

1392
00:55:40,960 --> 00:55:43,280
of this

1393
00:55:43,280 --> 00:55:46,000
so what do we need to do um so i think

1394
00:55:46,000 --> 00:55:47,599
what will be helpful is some more

1395
00:55:47,599 --> 00:55:49,920
reviews of the updated parts

1396
00:55:49,920 --> 00:55:52,640
that we had in the last draft

1397
00:55:52,640 --> 00:55:54,720
if all that is well we can

1398
00:55:54,720 --> 00:55:57,359
close these issues maybe

1399
00:55:57,359 --> 00:55:58,960
extend the examples a little bit more

1400
00:55:58,960 --> 00:56:02,680
like we just discussed

1401
00:56:02,720 --> 00:56:04,480
now question is do we need more reviews

1402
00:56:04,480 --> 00:56:06,640
of the entire document

1403
00:56:06,640 --> 00:56:09,440
i copy-pasted here the promise from itf

1404
00:56:09,440 --> 00:56:12,160
108 so we have here christian and

1405
00:56:12,160 --> 00:56:13,760
francesca

1406
00:56:13,760 --> 00:56:14,960
reviews

1407
00:56:14,960 --> 00:56:17,280
christian actually did a review because

1408
00:56:17,280 --> 00:56:18,640
i got

1409
00:56:18,640 --> 00:56:20,319
yeah at least a couple of comments from

1410
00:56:20,319 --> 00:56:22,799
him so

1411
00:56:22,799 --> 00:56:24,559
i'm not sure if you you know i wanted to

1412
00:56:24,559 --> 00:56:26,240
do more than that

1413
00:56:26,240 --> 00:56:28,720
but okay that's i just wanted to

1414
00:56:28,720 --> 00:56:31,599
mention that i most likely won't have

1415
00:56:31,599 --> 00:56:34,160
time to review this before it gets to me

1416
00:56:34,160 --> 00:56:35,040
um

1417
00:56:35,040 --> 00:56:37,599
after working group last call

1418
00:56:37,599 --> 00:56:39,280
sorry about that okay

1419
00:56:39,280 --> 00:56:41,839
yeah okay no no problem so uh yeah the

1420
00:56:41,839 --> 00:56:43,520
question was also we can also do this as

1421
00:56:43,520 --> 00:56:45,680
part of working group last fall that he

1422
00:56:45,680 --> 00:56:47,599
started and then

1423
00:56:47,599 --> 00:56:50,000
um this could trigger

1424
00:56:50,000 --> 00:56:52,480
another review for example

1425
00:56:52,480 --> 00:56:54,640
i think the previous review comments so

1426
00:56:54,640 --> 00:56:56,559
there were a lot from john and christian

1427
00:56:56,559 --> 00:56:58,640
so thanks for that these are now the

1428
00:56:58,640 --> 00:57:00,319
rest we think at least

1429
00:57:00,319 --> 00:57:02,319
so that's why we believe the version

1430
00:57:02,319 --> 00:57:04,559
zero five may be ready for the working

1431
00:57:04,559 --> 00:57:07,520
group plus call now

1432
00:57:08,880 --> 00:57:12,400
okay and uh yeah

1433
00:57:12,400 --> 00:57:14,480
that's it for this time thanks for your

1434
00:57:14,480 --> 00:57:16,400
attention

1435
00:57:16,400 --> 00:57:18,319
in case you have some questions let me

1436
00:57:18,319 --> 00:57:20,480
know

1437
00:57:23,680 --> 00:57:25,359
just to relay from the chat that

1438
00:57:25,359 --> 00:57:28,799
christian will have another look too

1439
00:57:29,520 --> 00:57:32,400
okay very good yeah to see if we uh

1440
00:57:32,400 --> 00:57:34,400
solve the issues uh

1441
00:57:34,400 --> 00:57:39,319
in an understandable way basically yeah

1442
00:57:44,400 --> 00:57:48,480
any more questions comments to esco

1443
00:57:51,520 --> 00:57:53,040
okay

1444
00:57:53,040 --> 00:57:54,799
thank you then

1445
00:57:54,799 --> 00:57:57,040
thanks

1446
00:57:57,280 --> 00:58:00,000
we came up to the next one which is

1447
00:58:00,000 --> 00:58:03,480
purple score

1448
00:58:12,480 --> 00:58:15,760
all right this is an update of the group

1449
00:58:15,760 --> 00:58:18,640
score document

1450
00:58:18,640 --> 00:58:21,520
we have submitted version 13 before the

1451
00:58:21,520 --> 00:58:24,160
cut-off and the version before that was

1452
00:58:24,160 --> 00:58:26,480
uh indeed a major revision based on

1453
00:58:26,480 --> 00:58:28,480
comments from working group last call

1454
00:58:28,480 --> 00:58:30,960
and some follow-up comments

1455
00:58:30,960 --> 00:58:35,040
uh in comparison to that this version uh

1456
00:58:35,040 --> 00:58:38,559
comes in with uh much simpler updates

1457
00:58:38,559 --> 00:58:41,760
and to start we updated the terminology

1458
00:58:41,760 --> 00:58:44,720
to be aligned with what the addock

1459
00:58:44,720 --> 00:58:46,640
draft in the lake working group is doing

1460
00:58:46,640 --> 00:58:48,319
in naming

1461
00:58:48,319 --> 00:58:52,000
public keys as possible uh credentials

1462
00:58:52,000 --> 00:58:55,760
uh so now we are referring to ccs uh so

1463
00:58:55,760 --> 00:58:58,799
it's sufficient to refer to rfc 83

1464
00:58:58,799 --> 00:59:00,000
92.

1465
00:59:00,000 --> 00:59:02,720
uh while roof reading the draft again we

1466
00:59:02,720 --> 00:59:04,079
noticed there was

1467
00:59:04,079 --> 00:59:06,960
an oversight when defining the the key

1468
00:59:06,960 --> 00:59:09,760
derivation of one particular key

1469
00:59:09,760 --> 00:59:11,920
the group encryption key which is used

1470
00:59:11,920 --> 00:59:14,559
to derive a key stream for encrypting

1471
00:59:14,559 --> 00:59:16,000
the signature

1472
00:59:16,000 --> 00:59:17,599
in group mode

1473
00:59:17,599 --> 00:59:19,599
so that is fixed now and it was about

1474
00:59:19,599 --> 00:59:22,079
the exact key size of that key

1475
00:59:22,079 --> 00:59:24,400
which which is exactly the same key size

1476
00:59:24,400 --> 00:59:26,000
used by any other

1477
00:59:26,000 --> 00:59:27,920
symmetric keys for the encryption

1478
00:59:27,920 --> 00:59:29,920
algorithm in group mode

1479
00:59:29,920 --> 00:59:33,359
so that's also fixed

1480
00:59:33,359 --> 00:59:36,079
uh other than this the the major update

1481
00:59:36,079 --> 00:59:38,319
in this version was instead some more

1482
00:59:38,319 --> 00:59:41,200
specific text about what is uh mandatory

1483
00:59:41,200 --> 00:59:42,400
to implement

1484
00:59:42,400 --> 00:59:45,119
uh there was an issue that john opened

1485
00:59:45,119 --> 00:59:48,079
about this i think even two years ago

1486
00:59:48,079 --> 00:59:50,559
and thanks to this update uh it's also

1487
00:59:50,559 --> 00:59:52,079
resolved now

1488
00:59:52,079 --> 00:59:54,720
um it boils down to what we can expect

1489
00:59:54,720 --> 00:59:56,480
constrained devices

1490
00:59:56,480 --> 00:59:58,640
to support especially when it comes to

1491
00:59:58,640 --> 00:59:59,599
this

1492
00:59:59,599 --> 01:00:02,880
signature algorithms and and companion

1493
01:00:02,880 --> 01:00:05,200
key agreement algorithms for the paywise

1494
01:00:05,200 --> 01:00:06,160
mode

1495
01:00:06,160 --> 01:00:08,240
and we are fundamentally taking the same

1496
01:00:08,240 --> 01:00:10,960
rationale uh used again in the addock

1497
01:00:10,960 --> 01:00:13,520
document in the late working group

1498
01:00:13,520 --> 01:00:16,160
adapted to the grupos core case

1499
01:00:16,160 --> 01:00:18,400
it reads pretty much like this for the

1500
01:00:18,400 --> 01:00:19,920
sake of the group node we expect

1501
01:00:19,920 --> 01:00:23,040
non-constrained devices to support

1502
01:00:23,040 --> 01:00:25,760
uh both the eddsa algorithm and the

1503
01:00:25,760 --> 01:00:28,079
ecdsa algorithm

1504
01:00:28,079 --> 01:00:31,280
while we expect constrained devices to

1505
01:00:31,280 --> 01:00:32,640
support

1506
01:00:32,640 --> 01:00:35,520
at least one or the other

1507
01:00:35,520 --> 01:00:37,599
at the end of the day to support as much

1508
01:00:37,599 --> 01:00:40,960
interoperability as we can recently have

1509
01:00:40,960 --> 01:00:43,200
um

1510
01:00:43,200 --> 01:00:44,960
just as a parallel thing the pairwise

1511
01:00:44,960 --> 01:00:47,280
mode follows the same rational so that

1512
01:00:47,280 --> 01:00:49,920
we expect non-constrained devices to uh

1513
01:00:49,920 --> 01:00:52,880
implement both key agreement curves

1514
01:00:52,880 --> 01:00:55,680
and constrained devices to

1515
01:00:55,680 --> 01:00:58,559
to support at least one

1516
01:00:58,559 --> 01:01:01,119
and this can probably be relieved

1517
01:01:01,119 --> 01:01:03,839
and lived better in the near future as

1518
01:01:03,839 --> 01:01:06,319
more algorithms are supported also

1519
01:01:06,319 --> 01:01:08,240
in hardware but it seems a reasonable

1520
01:01:08,240 --> 01:01:09,599
thing to do

1521
01:01:09,599 --> 01:01:12,400
for a time being

1522
01:01:13,200 --> 01:01:15,119
and that was it about the updates to

1523
01:01:15,119 --> 01:01:18,319
this version and some of the still open

1524
01:01:18,319 --> 01:01:20,160
issues were actually already addressed

1525
01:01:20,160 --> 01:01:23,119
in the previous version 12

1526
01:01:23,119 --> 01:01:26,000
but we waited anyway considering that we

1527
01:01:26,000 --> 01:01:28,960
had these small points uh to still close

1528
01:01:28,960 --> 01:01:31,200
so at the moment uh we are not aware of

1529
01:01:31,200 --> 01:01:34,880
any other uh open points or issues and

1530
01:01:34,880 --> 01:01:37,680
we have also updated our implementation

1531
01:01:37,680 --> 01:01:40,720
for californium aligned now

1532
01:01:40,720 --> 01:01:43,760
with the latest version 13.

1533
01:01:43,760 --> 01:01:46,880
so we believe this version 13 is now

1534
01:01:46,880 --> 01:01:49,359
ready for a second working group last

1535
01:01:49,359 --> 01:01:50,960
call

1536
01:01:50,960 --> 01:01:54,079
and independent of that

1537
01:01:54,079 --> 01:01:56,640
we are also starting producing uh test

1538
01:01:56,640 --> 01:01:59,359
vectors uh taking as a starting point

1539
01:01:59,359 --> 01:02:02,000
the ones of the oscar rfc but

1540
01:02:02,000 --> 01:02:04,000
we expect this ones to be

1541
01:02:04,000 --> 01:02:06,960
a bit longer uh since we want to cover

1542
01:02:06,960 --> 01:02:09,359
the group and the pairwise mode possibly

1543
01:02:09,359 --> 01:02:11,200
and the combination of the different uh

1544
01:02:11,200 --> 01:02:14,319
signature and key agreement algorithm

1545
01:02:14,319 --> 01:02:17,039
uh so no need to find an answer to these

1546
01:02:17,039 --> 01:02:18,960
questions now but but just to to raise

1547
01:02:18,960 --> 01:02:20,559
the point that

1548
01:02:20,559 --> 01:02:22,880
at some point we'll need to decide um

1549
01:02:22,880 --> 01:02:24,799
where the best place should be to have

1550
01:02:24,799 --> 01:02:26,480
uh test vectors

1551
01:02:26,480 --> 01:02:28,720
because probably they'll be too long to

1552
01:02:28,720 --> 01:02:30,640
be included in the main draft

1553
01:02:30,640 --> 01:02:33,440
uh it can certainly start as material

1554
01:02:33,440 --> 01:02:35,440
in a working group repo

1555
01:02:35,440 --> 01:02:38,319
but then we can possibly consider what

1556
01:02:38,319 --> 01:02:40,640
is happening uh about these vectors in

1557
01:02:40,640 --> 01:02:42,400
the lake working group

1558
01:02:42,400 --> 01:02:43,760
meaning it can be a separate

1559
01:02:43,760 --> 01:02:46,480
informational draft and if so

1560
01:02:46,480 --> 01:02:49,039
we can think if it is also worth a

1561
01:02:49,039 --> 01:02:50,960
specific publication

1562
01:02:50,960 --> 01:02:52,799
but i just want to raise up the point

1563
01:02:52,799 --> 01:02:54,079
for the time being we are on test

1564
01:02:54,079 --> 01:02:56,640
vectors

1565
01:02:56,640 --> 01:02:58,720
and

1566
01:02:58,720 --> 01:03:01,720
joran

1567
01:03:02,559 --> 01:03:04,079
hello can you hear me

1568
01:03:04,079 --> 01:03:06,000
yes yes

1569
01:03:06,000 --> 01:03:08,799
so how is the thinking on lining this

1570
01:03:08,799 --> 01:03:10,640
draft and

1571
01:03:10,640 --> 01:03:13,280
drafting the previous presentation

1572
01:03:13,280 --> 01:03:14,799
and

1573
01:03:14,799 --> 01:03:16,559
are we going for independent working

1574
01:03:16,559 --> 01:03:18,240
group class calls and i mean at some

1575
01:03:18,240 --> 01:03:19,920
point they will

1576
01:03:19,920 --> 01:03:21,680
align i suppose since this depends on

1577
01:03:21,680 --> 01:03:24,720
the on the other

1578
01:03:24,799 --> 01:03:28,160
so content-wise they are aligned and

1579
01:03:28,160 --> 01:03:30,400
both mature i believe i think it's

1580
01:03:30,400 --> 01:03:32,720
easier if they proceed uh to work in

1581
01:03:32,720 --> 01:03:35,280
group calling parallel uh certainly it's

1582
01:03:35,280 --> 01:03:37,520
easier i believe for the isg to receive

1583
01:03:37,520 --> 01:03:40,759
them together

1584
01:03:44,559 --> 01:03:46,640
okay fair enough and and the other draft

1585
01:03:46,640 --> 01:03:47,599
was

1586
01:03:47,599 --> 01:03:49,920
also about to come to its first working

1587
01:03:49,920 --> 01:03:51,839
group last call or that would be the

1588
01:03:51,839 --> 01:03:52,799
first one

1589
01:03:52,799 --> 01:03:55,599
yeah okay

1590
01:03:56,400 --> 01:03:59,680
i quickly saw francesca in the queue but

1591
01:03:59,680 --> 01:04:01,599
yeah i just want to say i will move them

1592
01:04:01,599 --> 01:04:06,000
forward together when they reach me yes

1593
01:04:08,799 --> 01:04:12,000
yeah that's all from my side

1594
01:04:12,000 --> 01:04:14,000
we think this is ready for consideration

1595
01:04:14,000 --> 01:04:18,039
for a second working with us

1596
01:04:26,480 --> 01:04:30,079
any comments questions

1597
01:04:36,640 --> 01:04:40,559
okay i seen on the chat either

1598
01:04:40,559 --> 01:04:43,039
then we can move to the next item oh hi

1599
01:04:43,039 --> 01:04:44,640
matt

1600
01:04:44,640 --> 01:04:46,480
no i'm just going to say that maybe we

1601
01:04:46,480 --> 01:04:48,000
can start the second working group last

1602
01:04:48,000 --> 01:04:49,839
call already in the main list this week

1603
01:04:49,839 --> 01:04:52,400
if that's okay

1604
01:04:52,559 --> 01:04:55,839
what's for me

1605
01:04:57,520 --> 01:05:00,079
all right uh i think we we can do that

1606
01:05:00,079 --> 01:05:01,200
um

1607
01:05:01,200 --> 01:05:02,000
how

1608
01:05:02,000 --> 01:05:03,760
long would it take to have the test

1609
01:05:03,760 --> 01:05:04,720
vectors

1610
01:05:04,720 --> 01:05:06,960
ready by the way

1611
01:05:06,960 --> 01:05:09,839
do you have any an estimation

1612
01:05:09,839 --> 01:05:11,280
yeah probably it will take a while

1613
01:05:11,280 --> 01:05:13,920
before having a full set but i hope by

1614
01:05:13,920 --> 01:05:15,200
the end of the year we can have a

1615
01:05:15,200 --> 01:05:16,799
preliminary set

1616
01:05:16,799 --> 01:05:19,280
realistically

1617
01:05:19,280 --> 01:05:21,039
right

1618
01:05:21,039 --> 01:05:22,640
but again they are probably an overkill

1619
01:05:22,640 --> 01:05:25,440
to be included in this exact document

1620
01:05:25,440 --> 01:05:27,440
see that as supplementary material and

1621
01:05:27,440 --> 01:05:29,680
then we can decide later on exactly how

1622
01:05:29,680 --> 01:05:32,879
to release it in the best way

1623
01:05:34,000 --> 01:05:37,599
and also could we get already in this uh

1624
01:05:37,599 --> 01:05:39,839
meeting an estimation of how many people

1625
01:05:39,839 --> 01:05:41,599
have read the current version maybe not

1626
01:05:41,599 --> 01:05:43,920
the current but the one that is a major

1627
01:05:43,920 --> 01:05:45,520
update the previous one

1628
01:05:45,520 --> 01:05:48,000
um just to

1629
01:05:48,000 --> 01:05:52,880
you know see some participation there

1630
01:05:53,920 --> 01:05:55,920
don't know what is the right way to do

1631
01:05:55,920 --> 01:05:57,599
it but i think a plus one on the channel

1632
01:05:57,599 --> 01:05:59,520
will be sufficient

1633
01:05:59,520 --> 01:06:01,520
or if you want to

1634
01:06:01,520 --> 01:06:03,680
read one of the last three versions yeah

1635
01:06:03,680 --> 01:06:06,240
or you can join the queue as well

1636
01:06:06,240 --> 01:06:08,240
just to see how we are we are in the

1637
01:06:08,240 --> 01:06:10,479
group

1638
01:06:11,839 --> 01:06:15,400
so i see christian

1639
01:06:21,119 --> 01:06:23,839
and click card

1640
01:06:28,799 --> 01:06:29,680
right

1641
01:06:29,680 --> 01:06:30,880
and

1642
01:06:30,880 --> 01:06:33,440
also i mean for the second working place

1643
01:06:33,440 --> 01:06:34,799
called we need more

1644
01:06:34,799 --> 01:06:37,200
uh eyes on this uh do we have some

1645
01:06:37,200 --> 01:06:39,920
volunteers already to have a look to the

1646
01:06:39,920 --> 01:06:42,319
latest version

1647
01:06:42,319 --> 01:06:43,760
let's go

1648
01:06:43,760 --> 01:06:46,000
okay

1649
01:06:50,640 --> 01:06:52,880
for the mini takers please remember to

1650
01:06:52,880 --> 01:06:55,760
write the names there

1651
01:06:59,280 --> 01:07:03,440
okay any any other volunteers

1652
01:07:05,280 --> 01:07:07,599
all right

1653
01:07:07,599 --> 01:07:09,760
thanks

1654
01:07:09,760 --> 01:07:12,160
thank you

1655
01:07:12,160 --> 01:07:14,640
yeah i'm done here so

1656
01:07:14,640 --> 01:07:18,160
next in the queue is record

1657
01:07:19,200 --> 01:07:23,919
yes hello let me share the slides

1658
01:07:26,240 --> 01:07:27,599
loading now

1659
01:07:27,599 --> 01:07:29,839
yep

1660
01:07:33,119 --> 01:07:35,440
right

1661
01:07:36,079 --> 01:07:39,440
yes so i will be presenting this uh work

1662
01:07:39,440 --> 01:07:43,359
on a key update for os core uh

1663
01:07:43,359 --> 01:07:48,000
also now called kudos as a short name

1664
01:07:48,400 --> 01:07:51,039
and these are uh yes let's start with a

1665
01:07:51,039 --> 01:07:53,440
short recap so first of all what this is

1666
01:07:53,440 --> 01:07:56,160
about well os core uses and the

1667
01:07:56,160 --> 01:07:59,280
algorithms for providing security

1668
01:07:59,280 --> 01:08:00,480
and

1669
01:08:00,480 --> 01:08:02,319
there is a c4d document which is

1670
01:08:02,319 --> 01:08:04,480
referenced here in this slide which

1671
01:08:04,480 --> 01:08:07,359
defines the fact that you need to

1672
01:08:07,359 --> 01:08:09,359
obey certain limits in terms of key

1673
01:08:09,359 --> 01:08:12,160
usage when it comes to

1674
01:08:12,160 --> 01:08:13,760
amount of encryptions and number of

1675
01:08:13,760 --> 01:08:15,680
failed decryptions and if you reach

1676
01:08:15,680 --> 01:08:18,000
those limits you should rekey

1677
01:08:18,000 --> 01:08:19,839
because extensive use of the same key

1678
01:08:19,839 --> 01:08:22,238
can enable breaking security properties

1679
01:08:22,238 --> 01:08:24,880
of the aed algorithms

1680
01:08:24,880 --> 01:08:26,880
so basically this draft has two main

1681
01:08:26,880 --> 01:08:30,158
parts the first part is the study of

1682
01:08:30,158 --> 01:08:32,080
these limits and their impact on our

1683
01:08:32,080 --> 01:08:34,799
score which means among other things

1684
01:08:34,799 --> 01:08:35,839
that you

1685
01:08:35,839 --> 01:08:37,759
we we

1686
01:08:37,759 --> 01:08:40,640
some appropriate limits for our score

1687
01:08:40,640 --> 01:08:42,080
and

1688
01:08:42,080 --> 01:08:43,920
yeah for a variety of variety of

1689
01:08:43,920 --> 01:08:46,640
algorithms we also define counters

1690
01:08:46,640 --> 01:08:48,560
message processing details and practical

1691
01:08:48,560 --> 01:08:50,880
steps to take when limits are reached so

1692
01:08:50,880 --> 01:08:53,920
it's about the limits and yeah what how

1693
01:08:53,920 --> 01:08:55,439
you should change the message message

1694
01:08:55,439 --> 01:08:57,040
processing in our score to take this

1695
01:08:57,040 --> 01:08:58,399
into account which practically means

1696
01:08:58,399 --> 01:08:59,439
counting

1697
01:08:59,439 --> 01:09:00,399
uh

1698
01:09:00,399 --> 01:09:02,158
key usage

1699
01:09:02,158 --> 01:09:03,120
and

1700
01:09:03,120 --> 01:09:06,399
we also took into account by the way

1701
01:09:06,399 --> 01:09:08,960
input from your matson on the april core

1702
01:09:08,960 --> 01:09:11,198
interim and we also got very recently

1703
01:09:11,198 --> 01:09:13,040
some further input from him

1704
01:09:13,040 --> 01:09:16,158
which we will be taking into account

1705
01:09:16,158 --> 01:09:18,158
the second part is about defining a new

1706
01:09:18,158 --> 01:09:20,238
method for a keying oscore which we call

1707
01:09:20,238 --> 01:09:21,920
kudos now

1708
01:09:21,920 --> 01:09:23,520
we discussed in the previous meeting if

1709
01:09:23,520 --> 01:09:24,560
it should have

1710
01:09:24,560 --> 01:09:26,719
an actual name and now we

1711
01:09:26,719 --> 01:09:28,399
we put the name kudos

1712
01:09:28,399 --> 01:09:29,759
and this

1713
01:09:29,759 --> 01:09:31,759
method is loosely inspired by appendix

1714
01:09:31,759 --> 01:09:33,520
p204s core

1715
01:09:33,520 --> 01:09:35,120
what you want to do is renew the master

1716
01:09:35,120 --> 01:09:37,198
secret and master salt and thus to get

1717
01:09:37,198 --> 01:09:39,679
new send and recipient keys practically

1718
01:09:39,679 --> 01:09:41,520
rekey in your context

1719
01:09:41,520 --> 01:09:42,799
and also this

1720
01:09:42,799 --> 01:09:46,719
method achieves perfect forward secrecy

1721
01:09:46,719 --> 01:09:48,560
going into some details and updates on

1722
01:09:48,560 --> 01:09:51,040
the key limits so first of all a recap

1723
01:09:51,040 --> 01:09:52,799
again on the scale limit so again it's

1724
01:09:52,799 --> 01:09:55,120
discussed in this e4g document

1725
01:09:55,120 --> 01:09:57,120
you need to limit key usage for

1726
01:09:57,120 --> 01:10:00,239
encryption which is counted as the you

1727
01:10:00,239 --> 01:10:03,520
know a queue parameter or q variable and

1728
01:10:03,520 --> 01:10:05,440
invalid decryptions which is the v

1729
01:10:05,440 --> 01:10:07,600
variable so basically what this draft

1730
01:10:07,600 --> 01:10:09,440
does is defines

1731
01:10:09,440 --> 01:10:12,400
fixed values for q v and l

1732
01:10:12,400 --> 01:10:14,960
and from those values they you calculate

1733
01:10:14,960 --> 01:10:18,400
these c a and i a probabilities which is

1734
01:10:18,400 --> 01:10:20,239
the confidentiality and integrity

1735
01:10:20,239 --> 01:10:21,600
advantage

1736
01:10:21,600 --> 01:10:22,480
um

1737
01:10:22,480 --> 01:10:24,239
which is basically the probability of

1738
01:10:24,239 --> 01:10:25,360
breaking

1739
01:10:25,360 --> 01:10:28,159
these properties of the algorithm

1740
01:10:28,159 --> 01:10:31,360
so um what you want to see is uh set

1741
01:10:31,360 --> 01:10:34,719
qvnl and from those calculate acceptably

1742
01:10:34,719 --> 01:10:38,960
uh acceptable values of cn ca and ia

1743
01:10:38,960 --> 01:10:40,080
and

1744
01:10:40,080 --> 01:10:42,320
yeah we also added some text now now i

1745
01:10:42,320 --> 01:10:45,199
go into some updates from the last um

1746
01:10:45,199 --> 01:10:46,960
from the last version so what we did we

1747
01:10:46,960 --> 01:10:49,600
added explicit mentioning of

1748
01:10:49,600 --> 01:10:51,760
the fact that now when you send an

1749
01:10:51,760 --> 01:10:53,840
oscore message you have to obey the l

1750
01:10:53,840 --> 01:10:56,239
value which means you have a practical

1751
01:10:56,239 --> 01:10:59,040
size limit to the amount of data you may

1752
01:10:59,040 --> 01:11:00,080
send

1753
01:11:00,080 --> 01:11:01,280
um

1754
01:11:01,280 --> 01:11:02,640
since the l is basically the message

1755
01:11:02,640 --> 01:11:05,280
size per uh the message size in cypher

1756
01:11:05,280 --> 01:11:07,840
blocks and you should not exceed that

1757
01:11:07,840 --> 01:11:09,840
and we have some text there specifically

1758
01:11:09,840 --> 01:11:13,520
on how you can easily calculate that

1759
01:11:13,520 --> 01:11:15,280
we also now after suggestion on

1760
01:11:15,280 --> 01:11:17,040
christian have a table

1761
01:11:17,040 --> 01:11:19,040
showing the values of l not just in

1762
01:11:19,040 --> 01:11:22,719
cypher blocks but also in actual bytes

1763
01:11:22,719 --> 01:11:25,840
and continuing on so what we did was we

1764
01:11:25,840 --> 01:11:28,960
have this table where we show the iinc a

1765
01:11:28,960 --> 01:11:31,520
probability for a number of algorithms

1766
01:11:31,520 --> 01:11:36,000
and these are all algorithms um

1767
01:11:36,000 --> 01:11:39,679
except as128 ccm8 so basically we deal

1768
01:11:39,679 --> 01:11:42,880
with as128 ccm8 in a separate table and

1769
01:11:42,880 --> 01:11:45,120
these algorithms are the ones that the

1770
01:11:45,120 --> 01:11:48,000
c4d document defines formulas for

1771
01:11:48,000 --> 01:11:51,040
so we set qb and l

1772
01:11:51,040 --> 01:11:53,360
fixed values from those we calculate the

1773
01:11:53,360 --> 01:11:54,800
probabilities

1774
01:11:54,800 --> 01:11:57,600
and in c4d document they mentioned

1775
01:11:57,600 --> 01:12:01,120
aiming for a probability of c and i a

1776
01:12:01,120 --> 01:12:03,199
that is to be lower than 2 to the power

1777
01:12:03,199 --> 01:12:04,800
of minus 50

1778
01:12:04,800 --> 01:12:08,400
and as you can see in this table we are

1779
01:12:08,400 --> 01:12:10,000
within that safe margin so our

1780
01:12:10,000 --> 01:12:11,840
probabilities are in fact even lower

1781
01:12:11,840 --> 01:12:14,560
than 2 to the power of minus 50.

1782
01:12:14,560 --> 01:12:17,199
and so that brings me to this red line

1783
01:12:17,199 --> 01:12:20,080
here which says that we do intend to

1784
01:12:20,080 --> 01:12:22,960
increase q and l further because we do

1785
01:12:22,960 --> 01:12:25,360
seem to have some margin for doing that

1786
01:12:25,360 --> 01:12:26,960
as we're still

1787
01:12:26,960 --> 01:12:28,560
way lower than 2 to the power of minus

1788
01:12:28,560 --> 01:12:31,120
50 in terms of the probabilities

1789
01:12:31,120 --> 01:12:32,880
so there's an open question if we should

1790
01:12:32,880 --> 01:12:35,280
proceed with actually

1791
01:12:35,280 --> 01:12:38,159
increasing these values

1792
01:12:38,159 --> 01:12:40,480
and yeah please jump in if you have any

1793
01:12:40,480 --> 01:12:43,040
comments yeah see christian

1794
01:12:43,040 --> 01:12:46,080
um listen i'm just i think l would if if

1795
01:12:46,080 --> 01:12:49,840
we can uh increment l by at least one um

1796
01:12:49,840 --> 01:12:51,360
one power of two

1797
01:12:51,360 --> 01:12:52,640
then

1798
01:12:52,640 --> 01:12:54,880
full messages can fit because

1799
01:12:54,880 --> 01:12:58,880
one um 1000 1024 byte is enough as a

1800
01:12:58,880 --> 01:13:00,960
payload but the whole message will be

1801
01:13:00,960 --> 01:13:03,280
longer so if that's the limit it's kind

1802
01:13:03,280 --> 01:13:05,199
of impractical because it limits block

1803
01:13:05,199 --> 01:13:08,960
wise to under fi to 512 byte blocks

1804
01:13:08,960 --> 01:13:11,040
so you would like l to be like 2 to the

1805
01:13:11,040 --> 01:13:13,199
power of 11.

1806
01:13:13,199 --> 01:13:14,400
yes

1807
01:13:14,400 --> 01:13:17,960
yes that's definitely

1808
01:13:18,960 --> 01:13:21,440
now these these values are these l is in

1809
01:13:21,440 --> 01:13:23,360
blocks in cypher blocks

1810
01:13:23,360 --> 01:13:25,440
then scratch that

1811
01:13:25,440 --> 01:13:27,520
okay let's catch that yeah

1812
01:13:27,520 --> 01:13:29,040
we don't present it here but if you

1813
01:13:29,040 --> 01:13:31,280
check the draft we do have a table now

1814
01:13:31,280 --> 01:13:35,040
which shows the actual l value in bytes

1815
01:13:35,040 --> 01:13:36,480
which is then

1816
01:13:36,480 --> 01:13:38,800
of course depends on the algorithm

1817
01:13:38,800 --> 01:13:40,080
but check that and we have an actual

1818
01:13:40,080 --> 01:13:41,120
table

1819
01:13:41,120 --> 01:13:43,920
showing that information

1820
01:13:43,920 --> 01:13:46,800
uh yep and so basically here's the table

1821
01:13:46,800 --> 01:13:49,679
where we deal with aes 128 ccm8 because

1822
01:13:49,679 --> 01:13:52,080
that's a bit of a special case where

1823
01:13:52,080 --> 01:13:52,400
um

1824
01:13:52,400 --> 01:13:54,560
[Music]

1825
01:13:54,560 --> 01:13:56,239
you need to treat that separately

1826
01:13:56,239 --> 01:13:58,560
because um

1827
01:13:58,560 --> 01:14:00,719
here you end up with quite a low or less

1828
01:14:00,719 --> 01:14:03,440
it's like quite a high ia probability

1829
01:14:03,440 --> 01:14:06,640
so we chose custom values for as128 ccma

1830
01:14:06,640 --> 01:14:08,239
to try to optimize

1831
01:14:08,239 --> 01:14:11,679
uh reasonable values of q e and l

1832
01:14:11,679 --> 01:14:13,520
because if you have l 2 to the power of

1833
01:14:13,520 --> 01:14:15,280
10 here you know you couldn't have a

1834
01:14:15,280 --> 01:14:18,080
very high q or v so here we have l 2 the

1835
01:14:18,080 --> 01:14:19,679
power 8. like you see the green arrow

1836
01:14:19,679 --> 01:14:21,840
where is which is the recommended values

1837
01:14:21,840 --> 01:14:24,239
that we have currently set alone

1838
01:14:24,239 --> 01:14:26,480
um and of course here's an open question

1839
01:14:26,480 --> 01:14:30,560
is it ideal to aim for a ca and ia close

1840
01:14:30,560 --> 01:14:34,000
to 2 to the power -50 as they

1841
01:14:34,000 --> 01:14:37,600
mention as a proposed goal in the c4d

1842
01:14:37,600 --> 01:14:40,080
document

1843
01:14:40,320 --> 01:14:41,520
that's the current approach we're

1844
01:14:41,520 --> 01:14:43,840
following

1845
01:14:46,640 --> 01:14:48,960
yeah then i go into updates on the key

1846
01:14:48,960 --> 01:14:51,600
update procedure so we did define a new

1847
01:14:51,600 --> 01:14:53,679
method now for a keynote score which we

1848
01:14:53,679 --> 01:14:56,719
call kudos key update for score

1849
01:14:56,719 --> 01:14:58,400
so essentially the client and server

1850
01:14:58,400 --> 01:15:01,679
exchange to nonsense r1 and r2

1851
01:15:01,679 --> 01:15:03,040
and

1852
01:15:03,040 --> 01:15:06,000
you have this update ctx function that

1853
01:15:06,000 --> 01:15:08,880
you use to derive new contexts

1854
01:15:08,880 --> 01:15:10,480
using the nonsense

1855
01:15:10,480 --> 01:15:12,480
and practically you start with your

1856
01:15:12,480 --> 01:15:14,000
current context you have one

1857
01:15:14,000 --> 01:15:16,080
intermediate context and then you end up

1858
01:15:16,080 --> 01:15:17,440
with your

1859
01:15:17,440 --> 01:15:20,080
new security context and we also managed

1860
01:15:20,080 --> 01:15:22,080
to get a number of beneficial properties

1861
01:15:22,080 --> 01:15:23,600
here

1862
01:15:23,600 --> 01:15:25,199
as you can see in the list you can

1863
01:15:25,199 --> 01:15:28,080
initiate by either client or a server it

1864
01:15:28,080 --> 01:15:30,000
is completed in one round trip and after

1865
01:15:30,000 --> 01:15:32,480
that you can use the new context

1866
01:15:32,480 --> 01:15:35,040
only one intermediate security context

1867
01:15:35,040 --> 01:15:37,120
the id context doesn't change throughout

1868
01:15:37,120 --> 01:15:40,560
the procedure in contrast to append xp2

1869
01:15:40,560 --> 01:15:42,400
it's also robust and secure against the

1870
01:15:42,400 --> 01:15:45,280
pair rebooting and compatible with prior

1871
01:15:45,280 --> 01:15:46,880
key establishment using the addock

1872
01:15:46,880 --> 01:15:48,560
protocol

1873
01:15:48,560 --> 01:15:51,120
because update c update ctx can actually

1874
01:15:51,120 --> 01:15:54,320
use the dead.exporter if your original

1875
01:15:54,320 --> 01:15:57,520
context was built using adhoc

1876
01:15:57,520 --> 01:16:00,080
and by the way i have this red box here

1877
01:16:00,080 --> 01:16:02,400
so what we did is also extend the score

1878
01:16:02,400 --> 01:16:02,830
option

1879
01:16:02,830 --> 01:16:03,920
[Music]

1880
01:16:03,920 --> 01:16:07,600
with a new flag bit and a field called

1881
01:16:07,600 --> 01:16:10,480
id detail where we practically exchange

1882
01:16:10,480 --> 01:16:13,199
the nuances

1883
01:16:15,040 --> 01:16:17,280
some other updates we did so first of

1884
01:16:17,280 --> 01:16:19,600
all we no longer include r1 in the

1885
01:16:19,600 --> 01:16:21,600
response one for the client initiated

1886
01:16:21,600 --> 01:16:23,920
rekeying and this is just like how it's

1887
01:16:23,920 --> 01:16:26,320
done in score appendix p2

1888
01:16:26,320 --> 01:16:28,880
because it's simply not needed here as

1889
01:16:28,880 --> 01:16:32,560
you can correlate the request one

1890
01:16:32,560 --> 01:16:35,040
you can correlate in response one with

1891
01:16:35,040 --> 01:16:36,960
request one using the code token so

1892
01:16:36,960 --> 01:16:39,679
correctly you don't need this extra

1893
01:16:39,679 --> 01:16:43,920
or one value in the id detail

1894
01:16:43,920 --> 01:16:46,080
other updates uh

1895
01:16:46,080 --> 01:16:48,159
we had recommendations now on minimum

1896
01:16:48,159 --> 01:16:50,159
length of r1 and r2

1897
01:16:50,159 --> 01:16:52,640
which are used as nonsense and

1898
01:16:52,640 --> 01:16:55,520
motivation is similar to what it is

1899
01:16:55,520 --> 01:16:57,440
written in appendix b2

1900
01:16:57,440 --> 01:16:59,440
and as things stand now we recommend

1901
01:16:59,440 --> 01:17:01,520
minimum eight bytes and here's an open

1902
01:17:01,520 --> 01:17:05,280
question if this is sufficient or not

1903
01:17:05,280 --> 01:17:07,679
we also discussed a bit now on

1904
01:17:07,679 --> 01:17:09,520
observations and our conclusion

1905
01:17:09,520 --> 01:17:11,280
currently is that you must terminate

1906
01:17:11,280 --> 01:17:12,960
observations

1907
01:17:12,960 --> 01:17:14,840
after a keying

1908
01:17:14,840 --> 01:17:16,560
because uh

1909
01:17:16,560 --> 01:17:17,920
basically you don't have the

1910
01:17:17,920 --> 01:17:20,159
cryptographic binding between

1911
01:17:20,159 --> 01:17:22,800
notifications in some situations and

1912
01:17:22,800 --> 01:17:25,360
there is possibility to keep these uh by

1913
01:17:25,360 --> 01:17:26,960
paying a price

1914
01:17:26,960 --> 01:17:29,280
and the suggested solution we have here

1915
01:17:29,280 --> 01:17:31,360
is that what you can do is

1916
01:17:31,360 --> 01:17:32,719
um

1917
01:17:32,719 --> 01:17:34,239
if you have ongoing observations

1918
01:17:34,239 --> 01:17:37,120
basically after every keying you need to

1919
01:17:37,120 --> 01:17:39,280
jump your partial v and the sequence

1920
01:17:39,280 --> 01:17:41,120
number uh

1921
01:17:41,120 --> 01:17:42,400
to

1922
01:17:42,400 --> 01:17:43,440
higher

1923
01:17:43,440 --> 01:17:46,560
than the maximum partial av for any

1924
01:17:46,560 --> 01:17:49,600
ongoing uh observation you have

1925
01:17:49,600 --> 01:17:51,280
and of course the drawback here is you

1926
01:17:51,280 --> 01:17:53,040
have very big jumps in the partial av

1927
01:17:53,040 --> 01:17:54,719
which means faster consumption and

1928
01:17:54,719 --> 01:17:57,199
larger communication overhead

1929
01:17:57,199 --> 01:17:59,440
so

1930
01:17:59,440 --> 01:18:00,880
there's also some possibility for more

1931
01:18:00,880 --> 01:18:02,640
complicated solutions like reserving

1932
01:18:02,640 --> 01:18:04,640
some pivs in a bitmap

1933
01:18:04,640 --> 01:18:06,480
but for now our

1934
01:18:06,480 --> 01:18:09,520
proposal here and plan is to not

1935
01:18:09,520 --> 01:18:11,679
keep observations after a keying because

1936
01:18:11,679 --> 01:18:13,040
you can basically reestablish the

1937
01:18:13,040 --> 01:18:15,360
observations and keeping them seems to

1938
01:18:15,360 --> 01:18:18,159
have many drawbacks here

1939
01:18:18,159 --> 01:18:19,760
but again this is an open question and

1940
01:18:19,760 --> 01:18:22,880
any feedback is welcome

1941
01:18:23,360 --> 01:18:25,360
yeah we added a

1942
01:18:25,360 --> 01:18:27,679
use case related to six dish

1943
01:18:27,679 --> 01:18:28,719
and

1944
01:18:28,719 --> 01:18:29,760
the

1945
01:18:29,760 --> 01:18:33,280
i see carsten is in the queue

1946
01:18:35,440 --> 01:18:36,719
um

1947
01:18:36,719 --> 01:18:39,040
if the the observations

1948
01:18:39,040 --> 01:18:40,800
are going away

1949
01:18:40,800 --> 01:18:44,320
this means that the reaching event is

1950
01:18:44,320 --> 01:18:47,600
visible on the application layer

1951
01:18:47,600 --> 01:18:49,840
is is that

1952
01:18:49,840 --> 01:18:54,320
something that that we should be doing

1953
01:18:54,320 --> 01:18:55,840
yeah that's uh

1954
01:18:55,840 --> 01:18:57,360
yeah so basically right then the

1955
01:18:57,360 --> 01:18:59,360
application would have to

1956
01:18:59,360 --> 01:19:01,040
probably then take the responsibility to

1957
01:19:01,040 --> 01:19:03,360
re-establish these observations

1958
01:19:03,360 --> 01:19:06,560
um yeah that's it's open if if

1959
01:19:06,560 --> 01:19:07,760
yeah of course that's that's one

1960
01:19:07,760 --> 01:19:09,520
drawback of

1961
01:19:09,520 --> 01:19:13,520
terminating observations yeah um

1962
01:19:13,520 --> 01:19:15,760
so yeah

1963
01:19:15,760 --> 01:19:18,560
trying to understand how bad this this

1964
01:19:18,560 --> 01:19:20,960
piv advancing thing

1965
01:19:20,960 --> 01:19:23,840
actually is

1966
01:19:23,920 --> 01:19:26,640
yeah so it would be basically like

1967
01:19:26,640 --> 01:19:28,239
yeah as we stated in the possible

1968
01:19:28,239 --> 01:19:30,640
solution so right after a keying you

1969
01:19:30,640 --> 01:19:32,239
would have to check the

1970
01:19:32,239 --> 01:19:34,560
highest partial av among all your

1971
01:19:34,560 --> 01:19:36,719
ongoing observations and then when the

1972
01:19:36,719 --> 01:19:38,880
client starts a new observation

1973
01:19:38,880 --> 01:19:41,040
you need to jump your your sequence

1974
01:19:41,040 --> 01:19:42,640
number to

1975
01:19:42,640 --> 01:19:44,880
that highest value plus one

1976
01:19:44,880 --> 01:19:45,760
uh

1977
01:19:45,760 --> 01:19:47,600
so of course it depends on the scenario

1978
01:19:47,600 --> 01:19:48,880
and and how

1979
01:19:48,880 --> 01:19:50,640
you know often and much this client is

1980
01:19:50,640 --> 01:19:52,560
using absurd but

1981
01:19:52,560 --> 01:19:53,520
in

1982
01:19:53,520 --> 01:19:56,000
some situations it would mean then big

1983
01:19:56,000 --> 01:19:59,360
jumps in the partial iv and

1984
01:19:59,360 --> 01:20:01,360
a lot faster consumption and then larger

1985
01:20:01,360 --> 01:20:03,120
communication overhead

1986
01:20:03,120 --> 01:20:05,760
um

1987
01:20:05,760 --> 01:20:07,840
so yeah it depends i would say also on

1988
01:20:07,840 --> 01:20:09,440
the on the way that application is

1989
01:20:09,440 --> 01:20:11,040
acting and how much it's actually

1990
01:20:11,040 --> 01:20:12,400
observing

1991
01:20:12,400 --> 01:20:14,638
um

1992
01:20:14,800 --> 01:20:17,600
so but also by the way one thing we

1993
01:20:17,600 --> 01:20:19,120
thought about here is i think the way we

1994
01:20:19,120 --> 01:20:21,199
have to deal with this is that

1995
01:20:21,199 --> 01:20:23,360
the two peers we basically have to

1996
01:20:23,360 --> 01:20:25,520
define how this works here in the in the

1997
01:20:25,520 --> 01:20:27,120
text because

1998
01:20:27,120 --> 01:20:28,880
the two peers have to agree on what to

1999
01:20:28,880 --> 01:20:31,360
do and there's not really an opportunity

2000
01:20:31,360 --> 01:20:32,880
for negotiation

2001
01:20:32,880 --> 01:20:35,679
or choosing on your own so

2002
01:20:35,679 --> 01:20:37,040
it should really be stated in the text

2003
01:20:37,040 --> 01:20:38,960
what to do with observations

2004
01:20:38,960 --> 01:20:40,639
um

2005
01:20:40,639 --> 01:20:44,000
so the question is this drawback uh

2006
01:20:44,000 --> 01:20:45,840
big and you know too big of a drawback

2007
01:20:45,840 --> 01:20:47,199
and secondly are there any other

2008
01:20:47,199 --> 01:20:49,920
possible solutions to

2009
01:20:49,920 --> 01:20:51,840
in such case keeps observations with

2010
01:20:51,840 --> 01:20:54,800
some smaller drawback

2011
01:20:55,920 --> 01:20:57,040
so this would definitely be good for

2012
01:20:57,040 --> 01:21:00,719
further discussions

2013
01:21:00,719 --> 01:21:03,280
thank you for the feedback

2014
01:21:03,280 --> 01:21:06,080
i see you're on also

2015
01:21:06,080 --> 01:21:10,239
um yeah so just question for carson

2016
01:21:10,239 --> 01:21:12,080
if if

2017
01:21:12,080 --> 01:21:13,840
if you need to update keys for some

2018
01:21:13,840 --> 01:21:15,920
other reason

2019
01:21:15,920 --> 01:21:18,960
uh that are you is your

2020
01:21:18,960 --> 01:21:20,880
sort of proposal that it should not be

2021
01:21:20,880 --> 01:21:22,000
visible

2022
01:21:22,000 --> 01:21:25,199
to just happen or what's

2023
01:21:25,199 --> 01:21:26,880
what's the mind what what would you

2024
01:21:26,880 --> 01:21:28,960
prefer would it be that this is

2025
01:21:28,960 --> 01:21:31,840
controlled or it just happens without

2026
01:21:31,840 --> 01:21:34,639
without any notice

2027
01:21:34,639 --> 01:21:36,960
well the the the application probably

2028
01:21:36,960 --> 01:21:41,679
should have a way to to ask the security

2029
01:21:41,679 --> 01:21:44,480
component to re-key

2030
01:21:44,480 --> 01:21:46,638
but

2031
01:21:46,880 --> 01:21:49,520
what what's in here right now means that

2032
01:21:49,520 --> 01:21:51,679
each time the security component just

2033
01:21:51,679 --> 01:21:53,440
just based on the number of messages

2034
01:21:53,440 --> 01:21:54,880
that have been sent

2035
01:21:54,880 --> 01:21:57,199
decides to re-key it needs to involve

2036
01:21:57,199 --> 01:21:58,560
the application

2037
01:21:58,560 --> 01:22:00,719
doing that

2038
01:22:00,719 --> 01:22:01,440
and

2039
01:22:01,440 --> 01:22:02,480
that's

2040
01:22:02,480 --> 01:22:04,560
a bit inconvenient i mean it's not a

2041
01:22:04,560 --> 01:22:07,760
disaster but um

2042
01:22:07,760 --> 01:22:09,920
yeah you have to send all these messages

2043
01:22:09,920 --> 01:22:12,159
then

2044
01:22:13,040 --> 01:22:16,239
yeah you want to send yeah

2045
01:22:17,040 --> 01:22:20,400
i i it's inconvenient and we

2046
01:22:20,400 --> 01:22:21,840
and definitely a good point for

2047
01:22:21,840 --> 01:22:24,159
consideration but on the application

2048
01:22:24,159 --> 01:22:26,320
level is the loss of an observation

2049
01:22:26,320 --> 01:22:28,000
really that visible i mean the

2050
01:22:28,000 --> 01:22:30,480
application might be requesting from the

2051
01:22:30,480 --> 01:22:33,600
from the co-op stack just to get

2052
01:22:33,600 --> 01:22:35,360
to get a continuously fresh

2053
01:22:35,360 --> 01:22:37,520
representation of that resource

2054
01:22:37,520 --> 01:22:39,440
and the co-op stack might do this by

2055
01:22:39,440 --> 01:22:40,880
polling or by establishing an

2056
01:22:40,880 --> 01:22:43,520
observation and in such a situation the

2057
01:22:43,520 --> 01:22:45,600
co-op stack noticing that the

2058
01:22:45,600 --> 01:22:48,320
observation goes away with a good reason

2059
01:22:48,320 --> 01:22:52,360
would just re-establish the observation

2060
01:22:55,440 --> 01:22:56,880
yeah i see a comment in the chat also

2061
01:22:56,880 --> 01:22:59,520
christian so that's a good point

2062
01:22:59,520 --> 01:23:00,800
but yeah this is definitely worth i

2063
01:23:00,800 --> 01:23:04,639
think for discussions and considerations

2064
01:23:04,639 --> 01:23:05,440
uh

2065
01:23:05,440 --> 01:23:07,760
yes i'll proceed then so again we added

2066
01:23:07,760 --> 01:23:10,560
this 60 use case and you can read this i

2067
01:23:10,560 --> 01:23:11,920
will speed up a bit but you can read

2068
01:23:11,920 --> 01:23:14,080
about this in the draft but essentially

2069
01:23:14,080 --> 01:23:16,000
one big benefit of this new procedure is

2070
01:23:16,000 --> 01:23:17,760
that you preserve the id context which

2071
01:23:17,760 --> 01:23:21,800
is used as a pledge identifier

2072
01:23:23,280 --> 01:23:26,639
in 60s 60s or rather you have a binding

2073
01:23:26,639 --> 01:23:28,080
between the context and the pledge

2074
01:23:28,080 --> 01:23:30,880
identifier so

2075
01:23:32,239 --> 01:23:34,400
okay so next point here is that you

2076
01:23:34,400 --> 01:23:37,360
we now update the rfc8613 which is those

2077
01:23:37,360 --> 01:23:39,440
core rc saying that this is deprecating

2078
01:23:39,440 --> 01:23:42,320
and replacing its appendix v2

2079
01:23:42,320 --> 01:23:43,520
and

2080
01:23:43,520 --> 01:23:46,480
yeah just check here if this is okay

2081
01:23:46,480 --> 01:23:48,639
and if anyone has any feedback if this

2082
01:23:48,639 --> 01:23:51,360
is okay to do

2083
01:23:52,159 --> 01:23:53,199
uh

2084
01:23:53,199 --> 01:23:54,960
we have some more general updates

2085
01:23:54,960 --> 01:23:57,280
improved the table of content

2086
01:23:57,280 --> 01:23:58,880
um some editorial improvements

2087
01:23:58,880 --> 01:24:01,440
formalization with adhok

2088
01:24:01,440 --> 01:24:03,520
ayana considerations we updated the

2089
01:24:03,520 --> 01:24:05,679
title now to be called key update for us

2090
01:24:05,679 --> 01:24:07,280
core kudos

2091
01:24:07,280 --> 01:24:10,080
and yeah that's also an open question

2092
01:24:10,080 --> 01:24:12,080
any feedback on the title now the title

2093
01:24:12,080 --> 01:24:13,679
of course mostly considers the key

2094
01:24:13,679 --> 01:24:15,280
updates section of the draft and not

2095
01:24:15,280 --> 01:24:17,199
really the limits

2096
01:24:17,199 --> 01:24:20,799
so any feedback on that is welcome

2097
01:24:21,520 --> 01:24:23,679
then we have some next steps uh yeah

2098
01:24:23,679 --> 01:24:25,280
addressing some open points we have a

2099
01:24:25,280 --> 01:24:28,000
number of issues on the gitlab repo

2100
01:24:28,000 --> 01:24:30,239
we need to look at material to save to

2101
01:24:30,239 --> 01:24:32,239
disk to support rebooting

2102
01:24:32,239 --> 01:24:34,560
uh applicability uh applicable

2103
01:24:34,560 --> 01:24:37,280
considerations from score appendix v2

2104
01:24:37,280 --> 01:24:39,440
updated security considerations and then

2105
01:24:39,440 --> 01:24:41,360
we want to further refine the key limits

2106
01:24:41,360 --> 01:24:44,159
as i mentioned earlier

2107
01:24:44,159 --> 01:24:45,840
so we do feel that document foundation

2108
01:24:45,840 --> 01:24:48,639
and the key update protocol are stable

2109
01:24:48,639 --> 01:24:50,480
and by the way yeah we do have plans to

2110
01:24:50,480 --> 01:24:53,600
actually implement this in code also

2111
01:24:53,600 --> 01:24:55,920
both the limits part and the key update

2112
01:24:55,920 --> 01:24:57,600
procedure

2113
01:24:57,600 --> 01:24:59,280
so then we

2114
01:24:59,280 --> 01:25:02,000
wanted to here propose a

2115
01:25:02,000 --> 01:25:03,760
working group adoption

2116
01:25:03,760 --> 01:25:06,560
of this draft

2117
01:25:06,560 --> 01:25:09,199
because we feel that it's it's at that

2118
01:25:09,199 --> 01:25:13,839
stage now and it's ready for that

2119
01:25:14,000 --> 01:25:16,159
and yeah that's about it

2120
01:25:16,159 --> 01:25:18,239
thank you it was a bit over time but

2121
01:25:18,239 --> 01:25:19,840
thank you for the for listening and

2122
01:25:19,840 --> 01:25:23,400
thank you for the feedback

2123
01:25:35,770 --> 01:25:38,829
[Music]

2124
01:25:39,600 --> 01:25:42,880
so uh when you say workshop adoption in

2125
01:25:42,880 --> 01:25:44,159
you mean uh

2126
01:25:44,159 --> 01:25:45,920
within this week

2127
01:25:45,920 --> 01:25:49,040
or even in this meeting right and and

2128
01:25:49,040 --> 01:25:50,480
the question also goes to marco which is

2129
01:25:50,480 --> 01:25:52,080
a co-author i'm just asking because if

2130
01:25:52,080 --> 01:25:54,719
asked qual for he cannot maybe call the

2131
01:25:54,719 --> 01:25:56,800
working adoption right now

2132
01:25:56,800 --> 01:25:58,400
right

2133
01:25:58,400 --> 01:26:00,080
right okay

2134
01:26:00,080 --> 01:26:01,440
so

2135
01:26:01,440 --> 01:26:03,440
right so well actually

2136
01:26:03,440 --> 01:26:05,040
similar processes before i would like to

2137
01:26:05,040 --> 01:26:08,000
know first on the chat who has read a

2138
01:26:08,000 --> 01:26:10,400
current version of the draft

2139
01:26:10,400 --> 01:26:13,440
other than the authors

2140
01:26:14,000 --> 01:26:17,040
i assume john and others have

2141
01:26:17,040 --> 01:26:17,840
and

2142
01:26:17,840 --> 01:26:20,960
i cannot see the chat okay joran

2143
01:26:20,960 --> 01:26:23,840
and christian

2144
01:26:32,800 --> 01:26:34,159
right

2145
01:26:34,159 --> 01:26:35,760
and uh well then i think i think we

2146
01:26:35,760 --> 01:26:36,880
could do a

2147
01:26:36,880 --> 01:26:39,920
a working group adoption on the

2148
01:26:39,920 --> 01:26:41,679
on the current call and then take it

2149
01:26:41,679 --> 01:26:43,040
also on the

2150
01:26:43,040 --> 01:26:45,280
main list let me just i'm trying to use

2151
01:26:45,280 --> 01:26:47,760
now the show at hands tool

2152
01:26:47,760 --> 01:26:50,239
to see

2153
01:26:50,480 --> 01:26:52,480
let me phrase the title here

2154
01:26:52,480 --> 01:26:54,159
of the question so

2155
01:26:54,159 --> 01:26:55,600
um

2156
01:26:55,600 --> 01:26:57,679
something like uh

2157
01:26:57,679 --> 01:26:59,600
is the first time i used this actually

2158
01:26:59,600 --> 01:27:01,120
sorry for that

2159
01:27:01,120 --> 01:27:02,800
who thinks

2160
01:27:02,800 --> 01:27:03,679
the

2161
01:27:03,679 --> 01:27:05,040
draft is

2162
01:27:05,040 --> 01:27:06,000
ready

2163
01:27:06,000 --> 01:27:07,920
for adoption

2164
01:27:07,920 --> 01:27:09,360
[Music]

2165
01:27:09,360 --> 01:27:10,400
right

2166
01:27:10,400 --> 01:27:11,760
is that a good way to phrase the

2167
01:27:11,760 --> 01:27:13,280
question by the way

2168
01:27:13,280 --> 01:27:14,400
who thinks the draft is ready for

2169
01:27:14,400 --> 01:27:16,000
adoption

2170
01:27:16,000 --> 01:27:18,480
and then just click yes if you

2171
01:27:18,480 --> 01:27:19,600
agree

2172
01:27:19,600 --> 01:27:21,360
and uh

2173
01:27:21,360 --> 01:27:24,159
i guess you can also uh

2174
01:27:24,159 --> 01:27:26,159
maybe let you put it in

2175
01:27:26,159 --> 01:27:29,440
uh race and

2176
01:27:29,440 --> 01:27:33,839
if i agree just to avoid confusion

2177
01:27:34,400 --> 01:27:37,599
and you should

2178
01:27:37,679 --> 01:27:40,719
uh have it on the

2179
01:27:40,719 --> 01:27:44,400
on the there is a session going on

2180
01:27:44,639 --> 01:27:48,800
i see seven raised hands

2181
01:27:49,600 --> 01:27:52,239
so just remember we have 43 it's not bad

2182
01:27:52,239 --> 01:27:53,520
but we don't worry as much about the

2183
01:27:53,520 --> 01:27:54,719
numbers because in previous sessions

2184
01:27:54,719 --> 01:27:56,000
usually like there is a small

2185
01:27:56,000 --> 01:27:57,840
participation compared with the amount

2186
01:27:57,840 --> 01:27:59,600
of

2187
01:27:59,600 --> 01:28:02,800
participants on the call

2188
01:28:04,880 --> 01:28:07,760
eight nine

2189
01:28:10,400 --> 01:28:13,400
okay

2190
01:28:14,000 --> 01:28:15,040
think it's a

2191
01:28:15,040 --> 01:28:18,000
a good uh show of hands so let's keep it

2192
01:28:18,000 --> 01:28:19,440
in the minutes

2193
01:28:19,440 --> 01:28:21,840
that we have got the caption screencap

2194
01:28:21,840 --> 01:28:24,239
also

2195
01:28:25,760 --> 01:28:27,120
the number of

2196
01:28:27,120 --> 01:28:29,520
jabber and reject global differences

2197
01:28:29,520 --> 01:28:31,600
will be three the number of

2198
01:28:31,600 --> 01:28:34,080
actual media echo participants is like

2199
01:28:34,080 --> 01:28:36,000
28

2200
01:28:36,000 --> 01:28:38,400
or 27 or something

2201
01:28:38,400 --> 01:28:40,960
right correctly just for information

2202
01:28:40,960 --> 01:28:44,239
they count here is really misleading

2203
01:28:44,239 --> 01:28:46,159
yes i agree with that because we have so

2204
01:28:46,159 --> 01:28:48,800
many java participants uh i think uh

2205
01:28:48,800 --> 01:28:50,880
anyway in the session now

2206
01:28:50,880 --> 01:28:52,719
i think it's a sufficient number

2207
01:28:52,719 --> 01:28:55,840
uh for i mean previous documents we have

2208
01:28:55,840 --> 01:28:57,600
adopted them based on that and anyways

2209
01:28:57,600 --> 01:28:59,920
we have to confirm on the main list

2210
01:28:59,920 --> 01:29:00,960
so

2211
01:29:00,960 --> 01:29:03,199
i'll take care of of uh sending a

2212
01:29:03,199 --> 01:29:05,600
message to mainly later after this

2213
01:29:05,600 --> 01:29:06,960
and um

2214
01:29:06,960 --> 01:29:08,080
thank you

2215
01:29:08,080 --> 01:29:09,520
yeah thank you

2216
01:29:09,520 --> 01:29:11,800
thank you richard

2217
01:29:11,800 --> 01:29:13,679
[Music]

2218
01:29:13,679 --> 01:29:15,280
okay uh

2219
01:29:15,280 --> 01:29:16,480
next is

2220
01:29:16,480 --> 01:29:18,000
christian

2221
01:29:18,000 --> 01:29:21,159
with cashablascore

2222
01:29:26,719 --> 01:29:28,320
yep next time i start with video and

2223
01:29:28,320 --> 01:29:30,159
audio again so that i can speak while

2224
01:29:30,159 --> 01:29:31,679
i'm looking

2225
01:29:31,679 --> 01:29:33,840
uh this is an update on casual oscorp

2226
01:29:33,840 --> 01:29:35,920
which has last been presented during the

2227
01:29:35,920 --> 01:29:37,360
interims

2228
01:29:37,360 --> 01:29:39,840
today i'd like to focus not so much on

2229
01:29:39,840 --> 01:29:41,520
the mechanics which are

2230
01:29:41,520 --> 01:29:43,600
slowly maturing and

2231
01:29:43,600 --> 01:29:46,159
basically working but on a topic that

2232
01:29:46,159 --> 01:29:48,320
came up during the work on the current

2233
01:29:48,320 --> 01:29:51,280
dash of three draft

2234
01:29:51,760 --> 01:29:54,480
which is more along the lines of

2235
01:29:54,480 --> 01:29:56,080
um

2236
01:29:56,080 --> 01:29:58,639
what does this do precisely in terms of

2237
01:29:58,639 --> 01:30:01,440
request response binding

2238
01:30:01,440 --> 01:30:02,239
so

2239
01:30:02,239 --> 01:30:04,960
what i thought i could do and i'll

2240
01:30:04,960 --> 01:30:06,560
walk with you through the the steps

2241
01:30:06,560 --> 01:30:10,320
there is split this into

2242
01:30:10,320 --> 01:30:12,239
how do we obtain a request response

2243
01:30:12,239 --> 01:30:14,400
binding north score in general

2244
01:30:14,400 --> 01:30:17,120
how and in particular how do we obtain

2245
01:30:17,120 --> 01:30:19,120
requests and response binding when we do

2246
01:30:19,120 --> 01:30:20,480
not have source authentication for the

2247
01:30:20,480 --> 01:30:21,840
request

2248
01:30:21,840 --> 01:30:24,800
and then building on that how do you how

2249
01:30:24,800 --> 01:30:28,800
do we obtain casablance core responses

2250
01:30:28,800 --> 01:30:29,760
i

2251
01:30:29,760 --> 01:30:31,520
originally i was afraid that this would

2252
01:30:31,520 --> 01:30:33,840
be a very very large change to the

2253
01:30:33,840 --> 01:30:36,480
document um i tried it anyway and turned

2254
01:30:36,480 --> 01:30:38,800
out that it hasn't been that large of a

2255
01:30:38,800 --> 01:30:39,600
change

2256
01:30:39,600 --> 01:30:42,080
in terms of text in terms of semantics

2257
01:30:42,080 --> 01:30:44,000
um probably it still is so this is why

2258
01:30:44,000 --> 01:30:49,280
i'd like to focus on this part one today

2259
01:30:49,280 --> 01:30:51,440
just to set up the stage in the context

2260
01:30:51,440 --> 01:30:52,400
um

2261
01:30:52,400 --> 01:30:54,880
in auscore we get request response

2262
01:30:54,880 --> 01:30:56,400
binding by

2263
01:30:56,400 --> 01:30:58,960
repeating the sequence number and the

2264
01:30:58,960 --> 01:31:01,600
sender id

2265
01:31:01,600 --> 01:31:04,400
in the response not in actual text but

2266
01:31:04,400 --> 01:31:06,639
as part of the additional authenticated

2267
01:31:06,639 --> 01:31:07,840
data

2268
01:31:07,840 --> 01:31:10,000
so for mismatch to happen there and

2269
01:31:10,000 --> 01:31:11,840
that's one of those co-op attacks that

2270
01:31:11,840 --> 01:31:14,080
oscore is designed to prevent

2271
01:31:14,080 --> 01:31:16,000
the client would need to send a request

2272
01:31:16,000 --> 01:31:17,360
r1

2273
01:31:17,360 --> 01:31:19,120
but the server would need to process a

2274
01:31:19,120 --> 01:31:21,440
different request r2 that match on those

2275
01:31:21,440 --> 01:31:23,040
details that are

2276
01:31:23,040 --> 01:31:26,080
put into the aad

2277
01:31:26,080 --> 01:31:27,920
but in regular auscore this can't happen

2278
01:31:27,920 --> 01:31:29,600
because the key is shared between those

2279
01:31:29,600 --> 01:31:31,199
two parties

2280
01:31:31,199 --> 01:31:33,199
the server verifies that the request is

2281
01:31:33,199 --> 01:31:35,600
coming from the client so either the

2282
01:31:35,600 --> 01:31:38,239
client would need to maliciously um send

2283
01:31:38,239 --> 01:31:40,000
to requests which

2284
01:31:40,000 --> 01:31:41,280
doesn't make any sense because the

2285
01:31:41,280 --> 01:31:43,600
client that wants the

2286
01:31:43,600 --> 01:31:46,320
rebinding to be there or the server

2287
01:31:46,320 --> 01:31:47,840
would need to lie and the server can lie

2288
01:31:47,840 --> 01:31:49,600
anyway because it's the authority on all

2289
01:31:49,600 --> 01:31:52,159
the things here

2290
01:31:52,320 --> 01:31:54,080
in grouposcore things look a bit

2291
01:31:54,080 --> 01:31:55,040
different

2292
01:31:55,040 --> 01:31:57,040
in grouposcore there is shared key

2293
01:31:57,040 --> 01:31:59,760
material for the smac for the symmetric

2294
01:31:59,760 --> 01:32:02,239
um encryption part so any other client

2295
01:32:02,239 --> 01:32:04,639
other than our particular client c

2296
01:32:04,639 --> 01:32:07,120
could have done the encryption

2297
01:32:07,120 --> 01:32:09,520
but there is the signa in in group group

2298
01:32:09,520 --> 01:32:11,199
mode and in

2299
01:32:11,199 --> 01:32:13,280
um in group mode and in powers mode

2300
01:32:13,280 --> 01:32:15,920
there is source authentication because

2301
01:32:15,920 --> 01:32:18,960
either the there is a shared key used

2302
01:32:18,960 --> 01:32:20,800
between client server that only those

2303
01:32:20,800 --> 01:32:22,960
two parties know or there is a signature

2304
01:32:22,960 --> 01:32:25,199
by the client so again the server can

2305
01:32:25,199 --> 01:32:28,159
know that the request was

2306
01:32:28,159 --> 01:32:30,480
originated from the client

2307
01:32:30,480 --> 01:32:32,000
process that information into the

2308
01:32:32,000 --> 01:32:34,639
response and then the client can

2309
01:32:34,639 --> 01:32:36,560
understand that response knowing that

2310
01:32:36,560 --> 01:32:39,760
the server knew who sent it

2311
01:32:39,760 --> 01:32:41,840
but this also means that anyone on the

2312
01:32:41,840 --> 01:32:44,560
wire who might be member of the group

2313
01:32:44,560 --> 01:32:48,000
cannot trust responses at all

2314
01:32:48,000 --> 01:32:50,639
unless it also trusts the party that

2315
01:32:50,639 --> 01:32:53,120
sent the the client the original client

2316
01:32:53,120 --> 01:32:54,960
see that sends a request

2317
01:32:54,960 --> 01:32:55,920
which

2318
01:32:55,920 --> 01:32:57,920
is not generally the case so we are

2319
01:32:57,920 --> 01:33:00,400
usually assuming that

2320
01:33:00,400 --> 01:33:02,159
there might be malicious members in the

2321
01:33:02,159 --> 01:33:04,800
group which may then read responses but

2322
01:33:04,800 --> 01:33:06,719
they cannot

2323
01:33:06,719 --> 01:33:09,440
spoof answers from from any other group

2324
01:33:09,440 --> 01:33:11,040
member

2325
01:33:11,040 --> 01:33:12,400
so in general

2326
01:33:12,400 --> 01:33:15,679
um a third party cannot use those at all

2327
01:33:15,679 --> 01:33:17,920
because it doesn't know

2328
01:33:17,920 --> 01:33:20,480
whether the client might have sent one

2329
01:33:20,480 --> 01:33:23,280
request to that trusting to that third

2330
01:33:23,280 --> 01:33:25,840
party but another to the server and then

2331
01:33:25,840 --> 01:33:27,520
the server center response and then

2332
01:33:27,520 --> 01:33:31,120
those don't line up anymore

2333
01:33:31,199 --> 01:33:33,280
and this is

2334
01:33:33,280 --> 01:33:35,600
in retrospect the very situation we were

2335
01:33:35,600 --> 01:33:38,639
finding ourselves in when defining a

2336
01:33:38,639 --> 01:33:40,639
group of current sorry catchable law

2337
01:33:40,639 --> 01:33:42,159
score in the first place

2338
01:33:42,159 --> 01:33:46,080
but it might not be the only situation

2339
01:33:46,719 --> 01:33:49,040
so how can can we salvage this

2340
01:33:49,040 --> 01:33:51,440
we can um

2341
01:33:51,440 --> 01:33:53,360
as done in in the non-traditional

2342
01:33:53,360 --> 01:33:56,480
responses just uh send the full request

2343
01:33:56,480 --> 01:33:57,440
in

2344
01:33:57,440 --> 01:33:59,360
in the response again which we want to

2345
01:33:59,360 --> 01:34:00,639
avoid because that's

2346
01:34:00,639 --> 01:34:03,679
with all about saving bytes here so

2347
01:34:03,679 --> 01:34:06,080
repeating a request is is something to

2348
01:34:06,080 --> 01:34:07,520
avoid

2349
01:34:07,520 --> 01:34:10,560
we can send a hash of that request

2350
01:34:10,560 --> 01:34:12,639
or we could just try to make the hash of

2351
01:34:12,639 --> 01:34:13,840
that request

2352
01:34:13,840 --> 01:34:15,440
part of the additional authenticated

2353
01:34:15,440 --> 01:34:16,639
data

2354
01:34:16,639 --> 01:34:18,639
that is um

2355
01:34:18,639 --> 01:34:20,400
that is um

2356
01:34:20,400 --> 01:34:23,120
verifying that the server you saw that

2357
01:34:23,120 --> 01:34:25,199
request without actual actually uh

2358
01:34:25,199 --> 01:34:28,000
transmitting that

2359
01:34:28,000 --> 01:34:30,800
previous versions of uh cachable oscore

2360
01:34:30,800 --> 01:34:33,280
had that information in the in a

2361
01:34:33,280 --> 01:34:35,840
modified external aed currently we're

2362
01:34:35,840 --> 01:34:38,080
more leaning towards putting that in a

2363
01:34:38,080 --> 01:34:40,800
class i option and then not necessarily

2364
01:34:40,800 --> 01:34:42,880
sending that class i option

2365
01:34:42,880 --> 01:34:44,080
but

2366
01:34:44,080 --> 01:34:45,920
so one way or another that information

2367
01:34:45,920 --> 01:34:48,880
needs to wind up in the in the in the

2368
01:34:48,880 --> 01:34:50,080
aed

2369
01:34:50,080 --> 01:34:51,440
and thus

2370
01:34:51,440 --> 01:34:52,880
really it's not really

2371
01:34:52,880 --> 01:34:55,119
it's not replacing because the parts are

2372
01:34:55,119 --> 01:34:56,320
still there but practically it's

2373
01:34:56,320 --> 01:34:58,239
augmenting the request response binding

2374
01:34:58,239 --> 01:35:00,400
mechanism so now the client

2375
01:35:00,400 --> 01:35:02,960
even not necessarily the the sorry the

2376
01:35:02,960 --> 01:35:04,639
receiver of the response

2377
01:35:04,639 --> 01:35:06,480
even not necessarily trusting that the

2378
01:35:06,480 --> 01:35:08,480
server was able to perform source

2379
01:35:08,480 --> 01:35:10,000
authentication

2380
01:35:10,000 --> 01:35:11,360
on the request

2381
01:35:11,360 --> 01:35:14,239
can be sure that this response is a val

2382
01:35:14,239 --> 01:35:17,440
is a response created by the server for

2383
01:35:17,440 --> 01:35:20,638
this particular request

2384
01:35:22,719 --> 01:35:24,800
and this deals with all the parts of

2385
01:35:24,800 --> 01:35:28,639
cachable oscore that are about how these

2386
01:35:28,639 --> 01:35:30,400
two things match together

2387
01:35:30,400 --> 01:35:31,840
and some of the even some of the

2388
01:35:31,840 --> 01:35:34,400
security kind of reviewing the the

2389
01:35:34,400 --> 01:35:36,560
security caveats that we are having in

2390
01:35:36,560 --> 01:35:39,600
case of law school one of them just uh

2391
01:35:39,600 --> 01:35:42,719
goes up to that original just goes into

2392
01:35:42,719 --> 01:35:44,880
that into that half so the the statement

2393
01:35:44,880 --> 01:35:47,440
that we don't get freshness with cash of

2394
01:35:47,440 --> 01:35:49,280
law score is really a more general

2395
01:35:49,280 --> 01:35:51,440
statement the statement should be that

2396
01:35:51,440 --> 01:35:53,040
whenever we

2397
01:35:53,040 --> 01:35:55,119
have we don't rely on the original

2398
01:35:55,119 --> 01:35:57,119
request response binding but just some

2399
01:35:57,119 --> 01:35:58,400
additional

2400
01:35:58,400 --> 01:36:00,080
request response binding we lose

2401
01:36:00,080 --> 01:36:01,679
freshness

2402
01:36:01,679 --> 01:36:03,840
and then with deterministic if we use

2403
01:36:03,840 --> 01:36:06,400
deterministic keys we need additional

2404
01:36:06,400 --> 01:36:08,880
considerations for

2405
01:36:08,880 --> 01:36:11,280
how do we arrive at the deterministic

2406
01:36:11,280 --> 01:36:13,280
request what key material do we use to

2407
01:36:13,280 --> 01:36:16,080
protect that request and what does that

2408
01:36:16,080 --> 01:36:18,639
mean for the request privacy

2409
01:36:18,639 --> 01:36:20,239
but the

2410
01:36:20,239 --> 01:36:22,239
request response binding

2411
01:36:22,239 --> 01:36:25,119
is probably a somewhat different topic

2412
01:36:25,119 --> 01:36:27,520
and that could be even useful for other

2413
01:36:27,520 --> 01:36:28,639
cases so

2414
01:36:28,639 --> 01:36:30,960
one example and actually the example

2415
01:36:30,960 --> 01:36:32,639
that that triggered

2416
01:36:32,639 --> 01:36:34,000
all this

2417
01:36:34,000 --> 01:36:36,880
is that group of core used to have an

2418
01:36:36,880 --> 01:36:39,760
appendix in which it was described that

2419
01:36:39,760 --> 01:36:42,639
under certain circumstances it might be

2420
01:36:42,639 --> 01:36:45,360
okay not to verify the signature on a

2421
01:36:45,360 --> 01:36:47,380
request

2422
01:36:47,380 --> 01:36:48,639
[Music]

2423
01:36:48,639 --> 01:36:51,280
now that appendix was lacking a few

2424
01:36:51,280 --> 01:36:53,199
security considerations and eventually

2425
01:36:53,199 --> 01:36:54,880
scratched

2426
01:36:54,880 --> 01:36:56,960
which is a good thing to have happened

2427
01:36:56,960 --> 01:36:57,760
with

2428
01:36:57,760 --> 01:37:01,119
with the text that was there

2429
01:37:01,280 --> 01:37:02,080
but

2430
01:37:02,080 --> 01:37:04,320
it does leave an open use case that is

2431
01:37:04,320 --> 01:37:06,560
when you have a group where you're just

2432
01:37:06,560 --> 01:37:08,880
doing requests and the client does not

2433
01:37:08,880 --> 01:37:11,840
really have an interest in doing

2434
01:37:11,840 --> 01:37:12,639
uh

2435
01:37:12,639 --> 01:37:14,320
doing an asymmetric signature on a

2436
01:37:14,320 --> 01:37:15,520
request

2437
01:37:15,520 --> 01:37:18,159
and on sending 64 bytes just to send a

2438
01:37:18,159 --> 01:37:20,400
request that really any of the other

2439
01:37:20,400 --> 01:37:22,960
clients could just as well have sent

2440
01:37:22,960 --> 01:37:25,679
and where the server might not even for

2441
01:37:25,679 --> 01:37:27,600
its regular operation depend on source

2442
01:37:27,600 --> 01:37:29,119
authentication

2443
01:37:29,119 --> 01:37:31,840
for example because any client might be

2444
01:37:31,840 --> 01:37:34,159
eligible to use that information or just

2445
01:37:34,159 --> 01:37:35,920
because the request is

2446
01:37:35,920 --> 01:37:38,080
uh the handler is side effect free i

2447
01:37:38,080 --> 01:37:40,159
mean it's it's a get there's nothing

2448
01:37:40,159 --> 01:37:41,119
wrong in

2449
01:37:41,119 --> 01:37:43,600
um encrypting the response

2450
01:37:43,600 --> 01:37:45,040
and um

2451
01:37:45,040 --> 01:37:46,960
and sending it to a party that can read

2452
01:37:46,960 --> 01:37:48,560
it if it's

2453
01:37:48,560 --> 01:37:50,719
if it's the authorized party and if not

2454
01:37:50,719 --> 01:37:53,520
it would just not be able to process it

2455
01:37:53,520 --> 01:37:55,600
but this this needs very careful

2456
01:37:55,600 --> 01:37:58,000
considerations for um for request

2457
01:37:58,000 --> 01:38:00,239
response binding and i think that all

2458
01:38:00,239 --> 01:38:02,400
the tools that we set up in cash flow

2459
01:38:02,400 --> 01:38:05,119
score can do this

2460
01:38:05,119 --> 01:38:07,600
and thus not only benefit cashable oscar

2461
01:38:07,600 --> 01:38:10,719
by becoming more readable and

2462
01:38:10,719 --> 01:38:13,760
easier to easier to verify but also open

2463
01:38:13,760 --> 01:38:16,320
up those new cases

2464
01:38:16,320 --> 01:38:18,400
so for me the main questions for today

2465
01:38:18,400 --> 01:38:19,119
are

2466
01:38:19,119 --> 01:38:21,360
is this a split that you would consider

2467
01:38:21,360 --> 01:38:23,119
useful

2468
01:38:23,119 --> 01:38:25,360
and if so is this something that is

2469
01:38:25,360 --> 01:38:27,679
useful to be in the same document

2470
01:38:27,679 --> 01:38:29,280
i think so i think it can be

2471
01:38:29,280 --> 01:38:31,280
meaningfully presented in

2472
01:38:31,280 --> 01:38:34,560
in a document doing really two parts

2473
01:38:34,560 --> 01:38:35,840
describing

2474
01:38:35,840 --> 01:38:38,400
request response binding in absence of

2475
01:38:38,400 --> 01:38:39,520
source authentication group

2476
01:38:39,520 --> 01:38:42,880
communication and then building on that

2477
01:38:42,880 --> 01:38:44,639
doing

2478
01:38:44,639 --> 01:38:46,719
doing cashable loss core

2479
01:38:46,719 --> 01:38:48,560
but i'd like to hear your opinions here

2480
01:38:48,560 --> 01:38:51,560
too

2481
01:39:05,199 --> 01:39:07,920
you're on go ahead

2482
01:39:07,920 --> 01:39:10,080
yeah i actually actually don't have a

2483
01:39:10,080 --> 01:39:11,360
strong opinion

2484
01:39:11,360 --> 01:39:12,400
here i'm

2485
01:39:12,400 --> 01:39:13,600
[Music]

2486
01:39:13,600 --> 01:39:14,800
i'm

2487
01:39:14,800 --> 01:39:16,800
i'm i'm really happy that that this

2488
01:39:16,800 --> 01:39:19,119
there is actually a solution to to the

2489
01:39:19,119 --> 01:39:22,560
this cachable problem and

2490
01:39:22,560 --> 01:39:23,760
um

2491
01:39:23,760 --> 01:39:25,199
i think that

2492
01:39:25,199 --> 01:39:27,840
we should prioritize to make that as

2493
01:39:27,840 --> 01:39:30,320
simple as possible to to use

2494
01:39:30,320 --> 01:39:32,560
and whether it's useful in the

2495
01:39:32,560 --> 01:39:34,239
in other

2496
01:39:34,239 --> 01:39:37,040
instances is lower priority in my my

2497
01:39:37,040 --> 01:39:38,800
view

2498
01:39:38,800 --> 01:39:43,440
okay so but yeah that's my input

2499
01:39:49,040 --> 01:39:53,960
any more comments or input for christian

2500
01:39:56,880 --> 01:39:59,360
neither in the chat

2501
01:39:59,360 --> 01:40:01,679
okay

2502
01:40:01,840 --> 01:40:03,360
and thank you for the presentation

2503
01:40:03,360 --> 01:40:05,839
christian

2504
01:40:07,679 --> 01:40:13,119
and next is oscar capable proxies

2505
01:40:15,040 --> 01:40:17,360
yes

2506
01:40:20,639 --> 01:40:24,719
okay so this is a relatively uh new work

2507
01:40:24,719 --> 01:40:27,360
but not a super new idea it was also

2508
01:40:27,360 --> 01:40:30,719
presented uh some interim ago earlier

2509
01:40:30,719 --> 01:40:32,560
this year

2510
01:40:32,560 --> 01:40:34,960
and to recap you may have a proxy

2511
01:40:34,960 --> 01:40:37,920
deployed between a client and the server

2512
01:40:37,920 --> 01:40:40,560
and your use case we have examples

2513
01:40:40,560 --> 01:40:42,159
may need the security association

2514
01:40:42,159 --> 01:40:44,320
between the client and the proxy

2515
01:40:44,320 --> 01:40:46,400
and it may be very convenient that that

2516
01:40:46,400 --> 01:40:48,560
is based on all score especially if

2517
01:40:48,560 --> 01:40:50,159
you're already using all score

2518
01:40:50,159 --> 01:40:51,840
end-to-end between origin client and

2519
01:40:51,840 --> 01:40:53,040
server

2520
01:40:53,040 --> 01:40:54,880
and you end up into something that right

2521
01:40:54,880 --> 01:40:57,760
now it is not defined or even forbidden

2522
01:40:57,760 --> 01:41:00,239
in your score rfc where oscar is

2523
01:41:00,239 --> 01:41:02,239
something only for region client and

2524
01:41:02,239 --> 01:41:03,199
server

2525
01:41:03,199 --> 01:41:05,360
and definitely you cannot have something

2526
01:41:05,360 --> 01:41:07,679
like nested oscar where you protect the

2527
01:41:07,679 --> 01:41:10,320
same message multiple times

2528
01:41:10,320 --> 01:41:12,480
they started in the draft providing in

2529
01:41:12,480 --> 01:41:14,880
fact the first use case group comproxy

2530
01:41:14,880 --> 01:41:17,679
and then it was agreed to just move

2531
01:41:17,679 --> 01:41:19,280
move this content out of that because it

2532
01:41:19,280 --> 01:41:22,320
was a more general applicability and to

2533
01:41:22,320 --> 01:41:24,400
have it in a separate document which is

2534
01:41:24,400 --> 01:41:26,879
this one

2535
01:41:27,679 --> 01:41:29,920
as a recap of main use cases also

2536
01:41:29,920 --> 01:41:31,840
described in the document yeah group

2537
01:41:31,840 --> 01:41:33,840
comproxy was the first one you want the

2538
01:41:33,840 --> 01:41:36,960
proxy to identify the client before

2539
01:41:36,960 --> 01:41:39,280
forwarding a request over multicast to a

2540
01:41:39,280 --> 01:41:40,880
group of servers

2541
01:41:40,880 --> 01:41:43,360
uh second one in a sense also related to

2542
01:41:43,360 --> 01:41:45,119
your communication

2543
01:41:45,119 --> 01:41:46,880
you may have a server sending multicast

2544
01:41:46,880 --> 01:41:49,760
notifications to a group of clients all

2545
01:41:49,760 --> 01:41:52,400
observing the same uh resource

2546
01:41:52,400 --> 01:41:54,960
and if you have group score end-to-end

2547
01:41:54,960 --> 01:41:56,960
and the proxy deployed

2548
01:41:56,960 --> 01:41:58,560
clients are required to take an

2549
01:41:58,560 --> 01:42:01,360
additional step which means providing an

2550
01:42:01,360 --> 01:42:04,320
additional ticket request to the proxy

2551
01:42:04,320 --> 01:42:06,239
to make things work and

2552
01:42:06,239 --> 01:42:09,280
that exchange among others is better to

2553
01:42:09,280 --> 01:42:11,440
be protected for instance with oscar

2554
01:42:11,440 --> 01:42:12,639
again

2555
01:42:12,639 --> 01:42:14,159
and then another use case comes from the

2556
01:42:14,159 --> 01:42:15,920
lightweight endpoint specification where

2557
01:42:15,920 --> 01:42:19,040
um evoscore is used uh the lightweight

2558
01:42:19,040 --> 01:42:21,360
one client may want to use it also

2559
01:42:21,360 --> 01:42:23,440
end-to-end with an external application

2560
01:42:23,440 --> 01:42:24,560
server

2561
01:42:24,560 --> 01:42:27,360
uh using the lifetime tom server as a

2562
01:42:27,360 --> 01:42:29,520
co-proxy basically

2563
01:42:29,520 --> 01:42:31,600
and and here you have allscore both

2564
01:42:31,600 --> 01:42:33,199
end-to-end with the external application

2565
01:42:33,199 --> 01:42:36,000
server and uh internal your hope i hope

2566
01:42:36,000 --> 01:42:38,080
if you want between lightweight and

2567
01:42:38,080 --> 01:42:41,280
client and server

2568
01:42:41,760 --> 01:42:44,159
so the contribution of this document is

2569
01:42:44,159 --> 01:42:47,360
trying to update uh the oscar rfc in

2570
01:42:47,360 --> 01:42:49,760
defining also intermediaries as possible

2571
01:42:49,760 --> 01:42:52,639
um oscar endpoint so consuming the oscar

2572
01:42:52,639 --> 01:42:55,280
option and an oscar layer

2573
01:42:55,280 --> 01:42:57,760
and then in that meeting also a double

2574
01:42:57,760 --> 01:43:00,880
triple uh as many as you want layer uh

2575
01:43:00,880 --> 01:43:03,520
protection on sap message

2576
01:43:03,520 --> 01:43:05,440
we did have a limit of two layers at

2577
01:43:05,440 --> 01:43:07,040
most in the previous version of the

2578
01:43:07,040 --> 01:43:09,679
draft and it was lifted out of feedback

2579
01:43:09,679 --> 01:43:10,800
we got

2580
01:43:10,800 --> 01:43:13,679
and yeah we really consider oscar but

2581
01:43:13,679 --> 01:43:15,280
what you see in the document can be

2582
01:43:15,280 --> 01:43:16,239
applied

2583
01:43:16,239 --> 01:43:20,638
right away also for uh group of score

2584
01:43:22,320 --> 01:43:23,040
so

2585
01:43:23,040 --> 01:43:25,280
for version zero it was presenting also

2586
01:43:25,280 --> 01:43:27,760
at an interim we got some early comments

2587
01:43:27,760 --> 01:43:30,400
from from christian and joran that were

2588
01:43:30,400 --> 01:43:32,560
uh very constructive and essentially

2589
01:43:32,560 --> 01:43:34,639
suggesting some more use cases uh

2590
01:43:34,639 --> 01:43:37,600
lifting the limit of uh two at most

2591
01:43:37,600 --> 01:43:39,440
protections of the same message

2592
01:43:39,440 --> 01:43:42,639
and their main feedback was uh that the

2593
01:43:42,639 --> 01:43:44,480
the message processing description and

2594
01:43:44,480 --> 01:43:45,600
notation of

2595
01:43:45,600 --> 01:43:48,400
version zero was way too complicated and

2596
01:43:48,400 --> 01:43:50,960
uh requires some uh restructuring uh

2597
01:43:50,960 --> 01:43:54,560
that we did um as to the use cases we

2598
01:43:54,560 --> 01:43:57,280
mentioned also the case of a cross proxy

2599
01:43:57,280 --> 01:43:58,800
acting as third party service for the

2600
01:43:58,800 --> 01:44:00,960
sake of transport indication which is

2601
01:44:00,960 --> 01:44:01,920
also

2602
01:44:01,920 --> 01:44:03,840
christian's work

2603
01:44:03,840 --> 01:44:06,320
a proxy as a traditional big firewall as

2604
01:44:06,320 --> 01:44:08,639
an entry point of a network uh that is

2605
01:44:08,639 --> 01:44:11,760
required to uh identify the exact nodes

2606
01:44:11,760 --> 01:44:13,920
joining the network and then we started

2607
01:44:13,920 --> 01:44:16,000
to think but requires much more uh

2608
01:44:16,000 --> 01:44:18,560
elaboration uh a case where you have a

2609
01:44:18,560 --> 01:44:21,600
long chain of proxies and you really

2610
01:44:21,600 --> 01:44:23,119
want to hide that position in the

2611
01:44:23,119 --> 01:44:25,440
network of the client

2612
01:44:25,440 --> 01:44:28,239
from most of the chain elements and the

2613
01:44:28,239 --> 01:44:30,239
final origin server building something

2614
01:44:30,239 --> 01:44:31,199
like

2615
01:44:31,199 --> 01:44:33,840
let's say on your oscar

2616
01:44:33,840 --> 01:44:35,520
we have to think more about that though

2617
01:44:35,520 --> 01:44:37,920
the the core idea is is already defined

2618
01:44:37,920 --> 01:44:40,639
in the document

2619
01:44:41,679 --> 01:44:45,119
and coming to the main uh point in in

2620
01:44:45,119 --> 01:44:46,880
christians and uranus feedback uh

2621
01:44:46,880 --> 01:44:49,199
instead we got rid of the very

2622
01:44:49,199 --> 01:44:52,239
complicated notation and

2623
01:44:52,239 --> 01:44:55,360
two fine-grained message processing step

2624
01:44:55,360 --> 01:44:58,080
and we came up with a general algorithm

2625
01:44:58,080 --> 01:45:00,880
that is applicable right away to any

2626
01:45:00,880 --> 01:45:03,280
endpoint in the chain so a client an

2627
01:45:03,280 --> 01:45:06,159
intermediary uh or a server now we also

2628
01:45:06,159 --> 01:45:08,880
say explicitly that we are not defining

2629
01:45:08,880 --> 01:45:11,600
any explicit signaling of what is

2630
01:45:11,600 --> 01:45:13,760
happening and we don't need to

2631
01:45:13,760 --> 01:45:16,080
so basically the the presence possibly

2632
01:45:16,080 --> 01:45:18,960
in combination of certain cop options is

2633
01:45:18,960 --> 01:45:21,199
just sufficient for an endpoint to

2634
01:45:21,199 --> 01:45:23,440
understand exactly what is going on

2635
01:45:23,440 --> 01:45:25,280
and and what to do

2636
01:45:25,280 --> 01:45:28,719
and a main deviation from the oscar rfc

2637
01:45:28,719 --> 01:45:31,760
uh is that an endpoint shouldn't panic

2638
01:45:31,760 --> 01:45:34,320
anymore if after the encryption uh anal

2639
01:45:34,320 --> 01:45:35,760
score option is

2640
01:45:35,760 --> 01:45:37,679
is still there because that just means

2641
01:45:37,679 --> 01:45:39,840
one more oscar layer

2642
01:45:39,840 --> 01:45:41,199
to strip

2643
01:45:41,199 --> 01:45:42,159
and

2644
01:45:42,159 --> 01:45:45,520
some options uh have to be uh protected

2645
01:45:45,520 --> 01:45:48,080
or to be treated as class e if you want

2646
01:45:48,080 --> 01:45:50,239
uh unlike the scorer fc and this

2647
01:45:50,239 --> 01:45:52,239
includes in fact just corruption

2648
01:45:52,239 --> 01:45:53,760
and

2649
01:45:53,760 --> 01:45:56,000
options intended for a proxy

2650
01:45:56,000 --> 01:45:58,320
so with this in mind it's pretty easy to

2651
01:45:58,320 --> 01:46:01,520
uh protect the request just applying

2652
01:46:01,520 --> 01:46:03,840
uh the oscar layers one after the other

2653
01:46:03,840 --> 01:46:07,360
um typically using as first one the one

2654
01:46:07,360 --> 01:46:09,040
shared end-to-end between

2655
01:46:09,040 --> 01:46:12,400
the origin client and the server

2656
01:46:12,400 --> 01:46:14,719
things get interested and here's the

2657
01:46:14,719 --> 01:46:17,360
generalized algorithm when you think of

2658
01:46:17,360 --> 01:46:19,600
an incoming request and

2659
01:46:19,600 --> 01:46:22,080
based on the new text we have it's

2660
01:46:22,080 --> 01:46:23,760
really about evaluating which of these

2661
01:46:23,760 --> 01:46:25,199
conditions apply

2662
01:46:25,199 --> 01:46:26,800
to a request

2663
01:46:26,800 --> 01:46:29,679
so it includes proxy options well

2664
01:46:29,679 --> 01:46:31,760
forward to the next stop towards the

2665
01:46:31,760 --> 01:46:35,199
server if this is a proxy at all

2666
01:46:35,199 --> 01:46:37,600
if it doesn't have proxy options and it

2667
01:46:37,600 --> 01:46:39,360
doesn't have just corruption either

2668
01:46:39,360 --> 01:46:41,119
delivered to the application if there is

2669
01:46:41,119 --> 01:46:42,560
any at all

2670
01:46:42,560 --> 01:46:44,800
uh you are in kc otherwise meaning you

2671
01:46:44,800 --> 01:46:46,480
don't have proxy options but you have an

2672
01:46:46,480 --> 01:46:48,960
oscar option and then well

2673
01:46:48,960 --> 01:46:51,040
use the recipient context

2674
01:46:51,040 --> 01:46:53,760
pointed by the oscar option decrypt

2675
01:46:53,760 --> 01:46:57,199
take the result and own it assess which

2676
01:46:57,199 --> 01:47:00,080
condition applies again and eventually

2677
01:47:00,080 --> 01:47:02,320
you lend to case a or b

2678
01:47:02,320 --> 01:47:04,320
for forwarding or delivering to the

2679
01:47:04,320 --> 01:47:05,840
application

2680
01:47:05,840 --> 01:47:08,080
omitted in the slides but of course we

2681
01:47:08,080 --> 01:47:10,800
have also error randomly covered

2682
01:47:10,800 --> 01:47:13,280
already

2683
01:47:13,440 --> 01:47:16,239
for responses it is easier

2684
01:47:16,239 --> 01:47:18,960
for a responder it is really about

2685
01:47:18,960 --> 01:47:21,360
reapplying the same security layers

2686
01:47:21,360 --> 01:47:23,440
successfully stripped out

2687
01:47:23,440 --> 01:47:26,719
from the request but in reverse order

2688
01:47:26,719 --> 01:47:28,880
and the recipient of the response is

2689
01:47:28,880 --> 01:47:30,639
expected to find

2690
01:47:30,639 --> 01:47:33,760
the same security layers it applied

2691
01:47:33,760 --> 01:47:36,320
but this time in reverse order and at

2692
01:47:36,320 --> 01:47:38,239
most as many as it

2693
01:47:38,239 --> 01:47:40,480
as many as it applied

2694
01:47:40,480 --> 01:47:43,199
in the request

2695
01:47:43,600 --> 01:47:46,400
so this is what we have now and again

2696
01:47:46,400 --> 01:47:48,480
the main update was generalizing the

2697
01:47:48,480 --> 01:47:51,199
procedure to admit right away a long

2698
01:47:51,199 --> 01:47:52,960
chain of intermediaries more than two

2699
01:47:52,960 --> 01:47:54,880
layers if you want to

2700
01:47:54,880 --> 01:47:57,199
and to have a much

2701
01:47:57,199 --> 01:47:59,520
simpler and easier to read

2702
01:47:59,520 --> 01:48:01,199
message processing as a general

2703
01:48:01,199 --> 01:48:02,400
algorithm

2704
01:48:02,400 --> 01:48:04,719
uh we have still a lot to do we want to

2705
01:48:04,719 --> 01:48:07,840
add examples uh considering caching but

2706
01:48:07,840 --> 01:48:09,920
that should be possible to have just

2707
01:48:09,920 --> 01:48:12,480
using the cachable score proposal that

2708
01:48:12,480 --> 01:48:14,400
kristen presented before

2709
01:48:14,400 --> 01:48:16,400
and we want to to elaborate a bit more

2710
01:48:16,400 --> 01:48:18,639
on a use case where having more than two

2711
01:48:18,639 --> 01:48:20,960
layers per message is useful

2712
01:48:20,960 --> 01:48:22,960
and this is perhaps a bit longer term

2713
01:48:22,960 --> 01:48:26,800
but we want to look into rfc 8824

2714
01:48:26,800 --> 01:48:28,400
that define another compression for

2715
01:48:28,400 --> 01:48:30,560
co-op also for the case when all score

2716
01:48:30,560 --> 01:48:31,600
is used

2717
01:48:31,600 --> 01:48:35,199
and maybe not as is but uh we we think

2718
01:48:35,199 --> 01:48:37,520
that approach can be possibly uh adapted

2719
01:48:37,520 --> 01:48:40,000
a bit to be used also in the case where

2720
01:48:40,000 --> 01:48:41,520
a message is protected with multiple

2721
01:48:41,520 --> 01:48:43,520
layers so that we can at the end of the

2722
01:48:43,520 --> 01:48:46,000
day reduce the hover and in this case

2723
01:48:46,000 --> 01:48:48,080
too

2724
01:48:48,080 --> 01:48:49,440
this is the plan for

2725
01:48:49,440 --> 01:48:52,480
version zero two but until then uh

2726
01:48:52,480 --> 01:48:57,559
comments input are very welcome anyone

2727
01:49:00,159 --> 01:49:02,960
esco is already suggesting a name uh

2728
01:49:02,960 --> 01:49:05,520
matryoshka

2729
01:49:05,520 --> 01:49:07,600
probably

2730
01:49:07,600 --> 01:49:10,400
would think about it

2731
01:49:10,480 --> 01:49:12,719
we were trivially thinking of oscar and

2732
01:49:12,719 --> 01:49:14,880
oscar on nested oscar but

2733
01:49:14,880 --> 01:49:17,280
why not

2734
01:49:19,679 --> 01:49:22,159
wow unexpected

2735
01:49:22,159 --> 01:49:26,119
okay we'll seriously consider

2736
01:49:29,920 --> 01:49:32,080
well you need to code acronym maybe then

2737
01:49:32,080 --> 01:49:34,159
if you want to do that

2738
01:49:34,159 --> 01:49:36,400
yes

2739
01:49:37,840 --> 01:49:40,560
okay i i'm actually done and we entered

2740
01:49:40,560 --> 01:49:43,199
the flex time just in time for the last

2741
01:49:43,199 --> 01:49:44,639
presentation

2742
01:49:44,639 --> 01:49:47,199
thank you all

2743
01:49:47,920 --> 01:49:52,360
and now it should be about giuseppe

2744
01:49:57,040 --> 01:49:58,239
hello

2745
01:49:58,239 --> 01:50:02,400
hi i can hear you okay good

2746
01:50:02,639 --> 01:50:06,320
uh i have to present by myself right

2747
01:50:06,320 --> 01:50:08,400
yes if it works for you

2748
01:50:08,400 --> 01:50:09,510
yeah

2749
01:50:09,510 --> 01:50:12,640
[Music]

2750
01:50:18,639 --> 01:50:20,000
perfect

2751
01:50:20,000 --> 01:50:20,960
okay

2752
01:50:20,960 --> 01:50:21,840
yeah

2753
01:50:21,840 --> 01:50:24,320
hello everybody this is a new work about

2754
01:50:24,320 --> 01:50:25,360
the core

2755
01:50:25,360 --> 01:50:28,800
performance measurement option

2756
01:50:28,800 --> 01:50:30,880
that we have proposed as a zero zero

2757
01:50:30,880 --> 01:50:32,080
version

2758
01:50:32,080 --> 01:50:32,960
for

2759
01:50:32,960 --> 01:50:34,000
this

2760
01:50:34,000 --> 01:50:35,360
meeting

2761
01:50:35,360 --> 01:50:36,480
yeah

2762
01:50:36,480 --> 01:50:37,840
first of all let's explain the

2763
01:50:37,840 --> 01:50:39,560
motivation for this work so

2764
01:50:39,560 --> 01:50:41,440
[Music]

2765
01:50:41,440 --> 01:50:42,560
um

2766
01:50:42,560 --> 01:50:45,599
you you are of course the expert on cope

2767
01:50:45,599 --> 01:50:47,119
and

2768
01:50:47,119 --> 01:50:49,599
you know that there are uh two modes

2769
01:50:49,599 --> 01:50:52,480
reliable mode and reliable mode in case

2770
01:50:52,480 --> 01:50:55,920
of reliable mode reliability is provided

2771
01:50:55,920 --> 01:50:58,239
with acknowledgement so because the

2772
01:50:58,239 --> 01:51:00,159
message is

2773
01:51:00,159 --> 01:51:03,119
marked as confirmable

2774
01:51:03,119 --> 01:51:04,960
in this case

2775
01:51:04,960 --> 01:51:07,679
we can say we can think that if we want

2776
01:51:07,679 --> 01:51:09,920
to implement some measurement we can use

2777
01:51:09,920 --> 01:51:10,800
the

2778
01:51:10,800 --> 01:51:13,840
message id and acknowledge to identify

2779
01:51:13,840 --> 01:51:16,159
the packets and measure rounded time to

2780
01:51:16,159 --> 01:51:18,000
verify losses

2781
01:51:18,000 --> 01:51:20,480
this can be done in case of reliable

2782
01:51:20,480 --> 01:51:21,280
mode

2783
01:51:21,280 --> 01:51:23,840
in case of unreliable reliable mode of

2784
01:51:23,840 --> 01:51:25,840
course this is not possible and this is

2785
01:51:25,840 --> 01:51:27,599
no easy way to

2786
01:51:27,599 --> 01:51:29,760
do measurement uh

2787
01:51:29,760 --> 01:51:32,840
round-trip time losses delay

2788
01:51:32,840 --> 01:51:35,440
measurement in any case

2789
01:51:35,440 --> 01:51:38,880
even if we are in reliable mode it is

2790
01:51:38,880 --> 01:51:41,840
resource consuming to read id sequence

2791
01:51:41,840 --> 01:51:44,800
numbers store timestamps for each packet

2792
01:51:44,800 --> 01:51:47,360
so and since we are in a constrained

2793
01:51:47,360 --> 01:51:50,400
environment with constrained nodes

2794
01:51:50,400 --> 01:51:52,639
this is not the

2795
01:51:52,639 --> 01:51:55,599
the best way to implement measurement

2796
01:51:55,599 --> 01:51:58,000
in constrained environment so we need to

2797
01:51:58,000 --> 01:52:02,040
find a simplified mechanism

2798
01:52:02,560 --> 01:52:05,920
uh yeah i go to the next slide so uh it

2799
01:52:05,920 --> 01:52:08,400
is not new in itf there are already some

2800
01:52:08,400 --> 01:52:11,119
mechanisms that are also called explicit

2801
01:52:11,119 --> 01:52:13,520
flow measurement this is a draft that

2802
01:52:13,520 --> 01:52:16,159
has been just adopted in ippm working

2803
01:52:16,159 --> 01:52:18,000
group and

2804
01:52:18,000 --> 01:52:20,000
the techniques described this draft

2805
01:52:20,000 --> 01:52:22,080
employ a few marking leads

2806
01:52:22,080 --> 01:52:24,719
inside the header of a packet for loss

2807
01:52:24,719 --> 01:52:26,480
and delay measurement

2808
01:52:26,480 --> 01:52:27,920
in particular

2809
01:52:27,920 --> 01:52:29,760
i want to start with the

2810
01:52:29,760 --> 01:52:30,880
two

2811
01:52:30,880 --> 01:52:34,080
uh idea one is the spin lead idea this

2812
01:52:34,080 --> 01:52:38,080
is already optional in quick protocol so

2813
01:52:38,080 --> 01:52:41,119
if you go to the rfc 9000 uh there is

2814
01:52:41,119 --> 01:52:42,560
the

2815
01:52:42,560 --> 01:52:45,920
one bait that is dedicated for spin beat

2816
01:52:45,920 --> 01:52:49,360
so distinguished idea is to create

2817
01:52:49,360 --> 01:52:51,440
a square wave signal

2818
01:52:51,440 --> 01:52:53,520
using a lead and the length of this

2819
01:52:53,520 --> 01:52:56,639
signal is equal to rtt

2820
01:52:56,639 --> 01:52:58,719
so you can understand that in this way

2821
01:52:58,719 --> 01:53:00,080
this is very

2822
01:53:00,080 --> 01:53:02,080
straightforward to measure

2823
01:53:02,080 --> 01:53:03,840
the delay because you

2824
01:53:03,840 --> 01:53:06,000
only need to

2825
01:53:06,000 --> 01:53:07,280
measure the

2826
01:53:07,280 --> 01:53:10,080
the length of a square wave so you don't

2827
01:53:10,080 --> 01:53:12,480
need to take time stamps so you need to

2828
01:53:12,480 --> 01:53:15,119
take 10 steps but only for

2829
01:53:15,119 --> 01:53:16,400
a

2830
01:53:16,400 --> 01:53:19,440
few packets not for every target

2831
01:53:19,440 --> 01:53:23,199
on the other end there is also another

2832
01:53:23,199 --> 01:53:24,320
another

2833
01:53:24,320 --> 01:53:26,480
technique that is based on square

2834
01:53:26,480 --> 01:53:29,199
square bit also in this case the idea is

2835
01:53:29,199 --> 01:53:30,960
not new so

2836
01:53:30,960 --> 01:53:32,480
it is also

2837
01:53:32,480 --> 01:53:35,119
known as alternate marking methodology

2838
01:53:35,119 --> 01:53:38,839
defined in the rfc8321

2839
01:53:39,040 --> 01:53:40,800
uh also in this case we are talking

2840
01:53:40,800 --> 01:53:43,360
about square waves but in this case the

2841
01:53:43,360 --> 01:53:46,239
square waves is is made of

2842
01:53:46,239 --> 01:53:49,040
a fixed number of packets in this way

2843
01:53:49,040 --> 01:53:52,000
these fixed numbers all packets can be

2844
01:53:52,000 --> 01:53:54,639
recognized between the client and server

2845
01:53:54,639 --> 01:53:58,159
and you can measure the losses

2846
01:53:58,159 --> 01:54:01,280
just to give a quick view of these two

2847
01:54:01,280 --> 01:54:03,840
methodologies so what we are proposing

2848
01:54:03,840 --> 01:54:05,040
now

2849
01:54:05,040 --> 01:54:06,880
we are proposing thanks to the

2850
01:54:06,880 --> 01:54:10,239
extensibility of co-op

2851
01:54:10,239 --> 01:54:14,239
the draft aims to define a new option

2852
01:54:14,239 --> 01:54:16,400
carrying these performance measurement

2853
01:54:16,400 --> 01:54:17,440
bids

2854
01:54:17,440 --> 01:54:19,920
in particular we can start with spin

2855
01:54:19,920 --> 01:54:22,320
beat and square beat that are let's say

2856
01:54:22,320 --> 01:54:25,360
the the most stable solutions because as

2857
01:54:25,360 --> 01:54:28,560
i said spin bit is already defined for

2858
01:54:28,560 --> 01:54:29,360
quick

2859
01:54:29,360 --> 01:54:32,080
while square bit is already defined for

2860
01:54:32,080 --> 01:54:35,760
ipv6 for srv6 so there are already a lot

2861
01:54:35,760 --> 01:54:37,599
of proposal about the alternate

2862
01:54:37,599 --> 01:54:41,119
marketing application

2863
01:54:41,119 --> 01:54:43,199
so

2864
01:54:43,199 --> 01:54:45,199
the proposal for this option is quite

2865
01:54:45,199 --> 01:54:47,199
simple so we

2866
01:54:47,199 --> 01:54:49,679
introduced two kind of patterns

2867
01:54:49,679 --> 01:54:52,239
one that include only the square bit the

2868
01:54:52,239 --> 01:54:54,719
other one include the square beat and

2869
01:54:54,719 --> 01:54:56,000
spin beat

2870
01:54:56,000 --> 01:54:58,639
in both cases we have added

2871
01:54:58,639 --> 01:55:02,080
let's say to complete the byte available

2872
01:55:02,080 --> 01:55:04,400
we have added some event bits that can

2873
01:55:04,400 --> 01:55:05,119
be

2874
01:55:05,119 --> 01:55:08,560
can be used for advanced users who usage

2875
01:55:08,560 --> 01:55:11,360
of this option

2876
01:55:11,599 --> 01:55:12,880
uh

2877
01:55:12,880 --> 01:55:14,800
what are the key points and benefit of

2878
01:55:14,800 --> 01:55:16,800
this solution so

2879
01:55:16,800 --> 01:55:19,119
the first one as i said is that no

2880
01:55:19,119 --> 01:55:21,199
sequence number no ids no sequence

2881
01:55:21,199 --> 01:55:23,440
number no um

2882
01:55:23,440 --> 01:55:26,080
time stamping for each packet so

2883
01:55:26,080 --> 01:55:30,560
there is an easy way to measure ftt and

2884
01:55:30,560 --> 01:55:33,440
delay and the redundant time that fits

2885
01:55:33,440 --> 01:55:35,520
well with

2886
01:55:35,520 --> 01:55:39,280
the requirement of constrained nodes

2887
01:55:39,280 --> 01:55:41,280
there is also a proposal to

2888
01:55:41,280 --> 01:55:42,560
improve the

2889
01:55:42,560 --> 01:55:44,560
square bit mechanisms to find the

2890
01:55:44,560 --> 01:55:48,639
synergy with spin beat in order to

2891
01:55:48,639 --> 01:55:49,599
need

2892
01:55:49,599 --> 01:55:52,000
the methodology

2893
01:55:52,000 --> 01:55:54,560
simpler but i don't want to

2894
01:55:54,560 --> 01:55:55,679
to

2895
01:55:55,679 --> 01:55:59,440
to explain this here because it is it is

2896
01:55:59,440 --> 01:56:01,920
mentioned we didn't draft and

2897
01:56:01,920 --> 01:56:04,239
maybe i can we can discuss on the list

2898
01:56:04,239 --> 01:56:05,599
or i can

2899
01:56:05,599 --> 01:56:07,840
i can present during the next meeting if

2900
01:56:07,840 --> 01:56:10,080
the idea is of interest of the working

2901
01:56:10,080 --> 01:56:11,360
group

2902
01:56:11,360 --> 01:56:13,440
and

2903
01:56:13,440 --> 01:56:15,760
once you are able to

2904
01:56:15,760 --> 01:56:18,159
to to do performance measurement you can

2905
01:56:18,159 --> 01:56:19,599
also think about

2906
01:56:19,599 --> 01:56:21,599
possible advanced usage of this

2907
01:56:21,599 --> 01:56:24,880
methodology for example uh an impact

2908
01:56:24,880 --> 01:56:28,320
observer that can be a probe a a2ar

2909
01:56:28,320 --> 01:56:29,760
proxy

2910
01:56:29,760 --> 01:56:34,080
can use this information to

2911
01:56:34,080 --> 01:56:36,480
to adjust for example protocol

2912
01:56:36,480 --> 01:56:40,560
parameters or to decide whether to use

2913
01:56:40,560 --> 01:56:42,880
reliable or unreliable message

2914
01:56:42,880 --> 01:56:45,599
transmission based on the conditions of

2915
01:56:45,599 --> 01:56:47,199
the network

2916
01:56:47,199 --> 01:56:49,760
so you can also think about this kind of

2917
01:56:49,760 --> 01:56:52,480
advance and music

2918
01:56:52,480 --> 01:56:53,599
so

2919
01:56:53,599 --> 01:56:55,920
yeah the next step the draft is based as

2920
01:56:55,920 --> 01:56:58,400
aside on well-known methodologies that

2921
01:56:58,400 --> 01:57:00,480
we had this

2922
01:57:00,480 --> 01:57:02,719
idea to extend

2923
01:57:02,719 --> 01:57:05,360
in this kind of environment because this

2924
01:57:05,360 --> 01:57:06,960
methodology

2925
01:57:06,960 --> 01:57:10,159
can be easily extended to

2926
01:57:10,159 --> 01:57:12,560
to constrain the environment and

2927
01:57:12,560 --> 01:57:16,400
considering that iot machine to machine

2928
01:57:16,400 --> 01:57:19,760
devices keep growing nowadays

2929
01:57:19,760 --> 01:57:21,760
the also the performance measurement

2930
01:57:21,760 --> 01:57:23,040
aspect

2931
01:57:23,040 --> 01:57:25,440
and something to be considered

2932
01:57:25,440 --> 01:57:28,159
for an enterprise for a network operator

2933
01:57:28,159 --> 01:57:29,760
that

2934
01:57:29,760 --> 01:57:32,960
want to use co-op protocol in

2935
01:57:32,960 --> 01:57:35,280
in the constrained environment so

2936
01:57:35,280 --> 01:57:37,520
okay it's just a proposal for discussion

2937
01:57:37,520 --> 01:57:40,480
so we welcome collaboration quests and

2938
01:57:40,480 --> 01:57:42,800
comments on this work so

2939
01:57:42,800 --> 01:57:45,840
that's all thank you

2940
01:57:47,440 --> 01:57:50,159
christine go ahead

2941
01:57:50,159 --> 01:57:50,960
um

2942
01:57:50,960 --> 01:57:52,560
presenting this here

2943
01:57:52,560 --> 01:57:54,719
you mentioned in the also in the

2944
01:57:54,719 --> 01:57:57,040
response to previous communication that

2945
01:57:57,040 --> 01:57:59,520
you would and here again that you would

2946
01:57:59,520 --> 01:58:03,199
like to use this across proxies so that

2947
01:58:03,199 --> 01:58:05,440
that the spin bit would kind of be set

2948
01:58:05,440 --> 01:58:07,599
by the client and then we are not

2949
01:58:07,599 --> 01:58:09,679
modified by the proxy and then sent to

2950
01:58:09,679 --> 01:58:11,679
the server or other values of that

2951
01:58:11,679 --> 01:58:12,560
option

2952
01:58:12,560 --> 01:58:15,840
could you briefly describe which parties

2953
01:58:15,840 --> 01:58:18,320
would all need to cooperate here because

2954
01:58:18,320 --> 01:58:20,480
i understand this to be coming from a

2955
01:58:20,480 --> 01:58:22,719
telecom background and kind of

2956
01:58:22,719 --> 01:58:24,960
would would this be implemented on all

2957
01:58:24,960 --> 01:58:26,480
those devices

2958
01:58:26,480 --> 01:58:28,400
and

2959
01:58:28,400 --> 01:58:29,199
which

2960
01:58:29,199 --> 01:58:31,360
components would then can can you give a

2961
01:58:31,360 --> 01:58:33,599
concrete example of of which devices

2962
01:58:33,599 --> 01:58:36,239
interact here in a proxy situation

2963
01:58:36,239 --> 01:58:38,239
because my impression is that when

2964
01:58:38,239 --> 01:58:40,800
proxies are involved it could really be

2965
01:58:40,800 --> 01:58:43,119
linked local and then

2966
01:58:43,119 --> 01:58:44,159
we could

2967
01:58:44,159 --> 01:58:46,719
and then things like carson suggested

2968
01:58:46,719 --> 01:58:48,560
use of mid could come into play but

2969
01:58:48,560 --> 01:58:50,960
first i think we should understand

2970
01:58:50,960 --> 01:58:52,480
how you intend this to be used with

2971
01:58:52,480 --> 01:58:54,719
proxies

2972
01:58:54,719 --> 01:58:56,560
yes um

2973
01:58:56,560 --> 01:58:57,760
i i

2974
01:58:57,760 --> 01:59:00,159
mentioned in in the reply that

2975
01:59:00,159 --> 01:59:02,960
these there are several

2976
01:59:02,960 --> 01:59:04,719
way to use this methodology because

2977
01:59:04,719 --> 01:59:08,960
since it is based on um

2978
01:59:08,960 --> 01:59:11,280
on the client server so it's kind of

2979
01:59:11,280 --> 01:59:14,000
applicable to to the session so for

2980
01:59:14,000 --> 01:59:17,280
example if the proxy is going to start a

2981
01:59:17,280 --> 01:59:19,360
session on the iphone of the client of

2982
01:59:19,360 --> 01:59:22,000
course the proxy can implement

2983
01:59:22,000 --> 01:59:23,840
can be of course the

2984
01:59:23,840 --> 01:59:26,400
the client in terms of

2985
01:59:26,400 --> 01:59:28,560
uh in terms of the measurement so it

2986
01:59:28,560 --> 01:59:31,599
depends on on

2987
01:59:31,599 --> 01:59:33,300
on the situation that we

2988
01:59:33,300 --> 01:59:34,560
[Music]

2989
01:59:34,560 --> 01:59:35,760
uh

2990
01:59:35,760 --> 01:59:38,000
we are we want to monitor

2991
01:59:38,000 --> 01:59:38,960
so

2992
01:59:38,960 --> 01:59:40,320
i think

2993
01:59:40,320 --> 01:59:41,760
for example i

2994
01:59:41,760 --> 01:59:43,920
based on your comment i think that we

2995
01:59:43,920 --> 01:59:46,639
have to further clarify the user

2996
01:59:46,639 --> 01:59:48,800
scenarios that we have in mind in the

2997
01:59:48,800 --> 01:59:50,800
next version of the draft in order to

2998
01:59:50,800 --> 01:59:53,280
say okay if there is a proxy

2999
01:59:53,280 --> 01:59:56,960
the the way to do measurement is that

3000
01:59:56,960 --> 01:59:59,760
if there is no proxy

3001
01:59:59,760 --> 02:00:02,320
client server can

3002
02:00:02,320 --> 02:00:04,480
implement the measurement so we have to

3003
02:00:04,480 --> 02:00:06,639
distinguish between the different

3004
02:00:06,639 --> 02:00:08,719
the different

3005
02:00:08,719 --> 02:00:10,320
situations so

3006
02:00:10,320 --> 02:00:13,040
thank you for coming because we can

3007
02:00:13,040 --> 02:00:16,000
we can surely improve the the next

3008
02:00:16,000 --> 02:00:19,199
version of the document

3009
02:00:24,960 --> 02:00:26,719
thank you giuseppe

3010
02:00:26,719 --> 02:00:28,560
we may have time for one more quick

3011
02:00:28,560 --> 02:00:29,840
question because we are really on top of

3012
02:00:29,840 --> 02:00:32,320
the hour

3013
02:00:32,480 --> 02:00:36,360
any more questions or comments

3014
02:00:40,400 --> 02:00:42,239
i hear none and

3015
02:00:42,239 --> 02:00:43,920
seen on the chat

3016
02:00:43,920 --> 02:00:44,800
so

3017
02:00:44,800 --> 02:00:46,480
we can adjourn the meeting thank you

3018
02:00:46,480 --> 02:00:48,320
very much for participating today and

3019
02:00:48,320 --> 02:00:49,920
for your hard work

3020
02:00:49,920 --> 02:00:51,599
and join the rest of the itf weeks see

3021
02:00:51,599 --> 02:00:55,159
you all in other town

3022
02:00:58,480 --> 02:01:02,080
thank you thanks a lot to the new takers

3023
02:01:02,080 --> 02:01:04,480
thank you

3024
02:01:04,960 --> 02:01:08,199
thanks bye

3025
02:01:14,560 --> 02:01:17,560
so

3026
02:01:35,520 --> 02:01:37,599
you

