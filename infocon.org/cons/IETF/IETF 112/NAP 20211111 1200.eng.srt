1
00:00:30,000 --> 00:00:33,440
i apologize guys apologies uh to the

2
00:00:33,440 --> 00:00:34,719
audience

3
00:00:34,719 --> 00:00:36,160
uh we're

4
00:00:36,160 --> 00:00:37,360
having a

5
00:00:37,360 --> 00:00:40,640
few technical problems we'll get started

6
00:00:40,640 --> 00:00:44,280
in one or two minutes

7
00:01:42,479 --> 00:01:45,040
alessandra could you give us a hand

8
00:01:45,040 --> 00:01:47,040
we're still having some difficulty on

9
00:01:47,040 --> 00:01:48,560
sharing the slides out of the data

10
00:01:48,560 --> 00:01:50,960
tracker

11
00:01:51,600 --> 00:01:52,840
yeah in the

12
00:01:52,840 --> 00:01:56,799
meantime screenshow instead

13
00:01:56,799 --> 00:02:00,320
and let's get going

14
00:02:04,640 --> 00:02:07,880
all right

15
00:02:08,560 --> 00:02:11,840
so sorry about this delay and

16
00:02:11,840 --> 00:02:14,480
welcome everyone to the

17
00:02:14,480 --> 00:02:17,599
gnab meeting

18
00:02:20,560 --> 00:02:23,440
we'll start with the note 12

19
00:02:23,440 --> 00:02:25,680
everything we say in this meeting is

20
00:02:25,680 --> 00:02:28,879
subject to the itf note 12. if you

21
00:02:28,879 --> 00:02:31,120
haven't yet please please read it

22
00:02:31,120 --> 00:02:32,480
carefully

23
00:02:32,480 --> 00:02:35,599
uh and pay attention to the

24
00:02:35,599 --> 00:02:38,800
ipr issues that are described

25
00:02:38,800 --> 00:02:41,519
at length

26
00:02:44,480 --> 00:02:47,680
oh i'm glad to see leaf joining hello

27
00:02:47,680 --> 00:02:50,680
leaf

28
00:02:53,120 --> 00:02:56,239
still no idea though

29
00:03:02,720 --> 00:03:05,720
no

30
00:03:08,800 --> 00:03:11,920
we are also subject to the itf code of

31
00:03:11,920 --> 00:03:14,159
contact conduct

32
00:03:14,159 --> 00:03:17,920
and in contrast to other organizations

33
00:03:17,920 --> 00:03:20,239
where the code of conduct

34
00:03:20,239 --> 00:03:22,879
is purely around

35
00:03:22,879 --> 00:03:24,319
bias

36
00:03:24,319 --> 00:03:27,280
or anti-bias

37
00:03:27,280 --> 00:03:29,440
which is a very important issue in

38
00:03:29,440 --> 00:03:30,799
itself

39
00:03:30,799 --> 00:03:35,120
the itf code of conduct is broader

40
00:03:35,120 --> 00:03:38,159
and it boils down to

41
00:03:38,159 --> 00:03:41,280
having respectful conversations with one

42
00:03:41,280 --> 00:03:42,560
another

43
00:03:42,560 --> 00:03:46,239
focusing on the subjects rather than the

44
00:03:46,239 --> 00:03:48,239
individuals

45
00:03:48,239 --> 00:03:51,040
please read this summary

46
00:03:51,040 --> 00:03:54,319
on the slide and i apologize for the

47
00:03:54,319 --> 00:03:55,680
font

48
00:03:55,680 --> 00:03:58,080
and

49
00:03:59,519 --> 00:04:02,159
and uh

50
00:04:02,159 --> 00:04:06,920
please uh go to rfc7154

51
00:04:08,000 --> 00:04:09,760
for more

52
00:04:09,760 --> 00:04:11,519
more depth

53
00:04:11,519 --> 00:04:15,239
on the code of contact

54
00:04:22,880 --> 00:04:26,080
still not done was still

55
00:04:26,080 --> 00:04:29,520
trying to show the slides to meet echo

56
00:04:29,520 --> 00:04:31,919
uh in the meantime

57
00:04:31,919 --> 00:04:35,040
uh for audio and video as you can see

58
00:04:35,040 --> 00:04:39,600
metacore is uh working fine please uh

59
00:04:39,600 --> 00:04:42,720
keep your video off unless you're

60
00:04:42,720 --> 00:04:47,040
sharing unless you're presenting

61
00:04:47,120 --> 00:04:49,280
please also use the video when you're

62
00:04:49,280 --> 00:04:51,440
asking questions

63
00:04:51,440 --> 00:04:53,919
to make for a better discussion

64
00:04:53,919 --> 00:04:56,560
and make sure you're muted but yeah

65
00:04:56,560 --> 00:05:00,880
after two years of zoom you know that

66
00:05:06,880 --> 00:05:09,440
no blue sheets we already we've

67
00:05:09,440 --> 00:05:13,440
forgotten what blue sheets are by now uh

68
00:05:13,440 --> 00:05:17,360
we do need a minute taker

69
00:05:19,280 --> 00:05:22,000
and in fact this is the point uh

70
00:05:22,000 --> 00:05:24,800
where traditionally we stop and wait for

71
00:05:24,800 --> 00:05:27,280
a volunteer to take minutes

72
00:05:27,280 --> 00:05:30,960
we cannot move forward without

73
00:05:30,960 --> 00:05:32,720
minutes

74
00:05:32,720 --> 00:05:33,680
and

75
00:05:33,680 --> 00:05:35,759
if you want to take minutes

76
00:05:35,759 --> 00:05:39,120
um it's much easier for everybody if you

77
00:05:39,120 --> 00:05:40,800
take it on

78
00:05:40,800 --> 00:05:44,160
hedge dock which is what replaces

79
00:05:44,160 --> 00:05:46,639
etherpad

80
00:05:46,639 --> 00:05:49,199
so a collaborative

81
00:05:49,199 --> 00:05:50,960
meeting

82
00:05:50,960 --> 00:05:53,840
note taker

83
00:05:54,080 --> 00:05:57,120
volunteers please

84
00:06:04,319 --> 00:06:05,360
please

85
00:06:05,360 --> 00:06:07,840
either

86
00:06:08,639 --> 00:06:11,600
activate your audio

87
00:06:11,600 --> 00:06:14,160
or else just put it

88
00:06:14,160 --> 00:06:17,639
on the chat

89
00:06:22,240 --> 00:06:24,560
this is a good opportunity if you're new

90
00:06:24,560 --> 00:06:26,160
to the working group

91
00:06:26,160 --> 00:06:29,840
a good opportunity to get familiar with

92
00:06:29,840 --> 00:06:30,800
uh

93
00:06:30,800 --> 00:06:34,400
with both the subject and the people so

94
00:06:34,400 --> 00:06:36,719
please

95
00:06:37,199 --> 00:06:39,120
stand up and

96
00:06:39,120 --> 00:06:40,479
join us

97
00:06:40,479 --> 00:06:44,599
as a as a minute taker

98
00:07:04,000 --> 00:07:07,280
i really really don't like to call out

99
00:07:07,280 --> 00:07:10,280
names

100
00:07:17,120 --> 00:07:20,479
thank you very much kathleen

101
00:07:23,520 --> 00:07:25,199
i'm happy to help i just have to figure

102
00:07:25,199 --> 00:07:26,000
out

103
00:07:26,000 --> 00:07:27,840
where and how i know you posted a link

104
00:07:27,840 --> 00:07:29,520
but that wasn't a

105
00:07:29,520 --> 00:07:31,039
clickable one so you'll have to give me

106
00:07:31,039 --> 00:07:33,360
a couple of minutes to figure this out

107
00:07:33,360 --> 00:07:36,240
the link is actually on the main agenda

108
00:07:36,240 --> 00:07:40,080
where it's still called etherpad

109
00:07:40,319 --> 00:07:42,560
okay all right i have it now i just had

110
00:07:42,560 --> 00:07:44,319
to click an extra button that i didn't

111
00:07:44,319 --> 00:07:47,199
see at first thank you

112
00:07:47,199 --> 00:07:49,440
okay great

113
00:07:49,440 --> 00:07:51,440
oh and here's leaf

114
00:07:51,440 --> 00:07:55,199
uh yeah third browser is the charm

115
00:07:55,199 --> 00:07:56,879
indeed

116
00:07:56,879 --> 00:08:00,479
all right and most of the session uh

117
00:08:00,479 --> 00:08:02,720
will be around the uh

118
00:08:02,720 --> 00:08:05,120
the core protocol and the resource

119
00:08:05,120 --> 00:08:06,879
server protocol

120
00:08:06,879 --> 00:08:09,440
uh led by the editors

121
00:08:09,440 --> 00:08:13,039
and then we have a 20-minute session

122
00:08:13,039 --> 00:08:15,440
for denis who has some concerns with the

123
00:08:15,440 --> 00:08:17,680
latest draft

124
00:08:17,680 --> 00:08:20,800
and has in fact published

125
00:08:20,800 --> 00:08:22,240
his own

126
00:08:22,240 --> 00:08:24,000
internet draft

127
00:08:24,000 --> 00:08:28,160
with his view on on how this should work

128
00:08:28,160 --> 00:08:29,599
and so that's

129
00:08:29,599 --> 00:08:31,360
after we're done

130
00:08:31,360 --> 00:08:32,880
with the editor's

131
00:08:32,880 --> 00:08:34,240
part

132
00:08:34,240 --> 00:08:36,719
after the gnap meeting

133
00:08:36,719 --> 00:08:42,799
uh feel free to join us on gather room 6

134
00:08:42,799 --> 00:08:45,680
a good opportunity to get to know your

135
00:08:45,680 --> 00:08:48,320
your fellow

136
00:08:48,320 --> 00:08:50,959
members of this community

137
00:08:50,959 --> 00:08:54,640
talk to the editors talk to the church

138
00:08:54,640 --> 00:08:56,480
and with that

139
00:08:56,480 --> 00:08:59,279
i believe by now we should have the

140
00:08:59,279 --> 00:09:00,720
slides

141
00:09:00,720 --> 00:09:04,080
uploaded so let me see if

142
00:09:04,080 --> 00:09:08,519
this magic works for me

143
00:09:16,800 --> 00:09:20,560
no it does not leave for using the

144
00:09:20,560 --> 00:09:23,839
any short slides

145
00:09:25,760 --> 00:09:28,080
or not um

146
00:09:28,080 --> 00:09:29,600
you are not

147
00:09:29,600 --> 00:09:31,519
okay in that case

148
00:09:31,519 --> 00:09:32,720
can

149
00:09:32,720 --> 00:09:35,040
is it justin is that you will be

150
00:09:35,040 --> 00:09:37,839
presenting

151
00:09:38,160 --> 00:09:40,720
uh yes i'm i'm gonna be presenting today

152
00:09:40,720 --> 00:09:42,880
let's see if you can screen share

153
00:09:42,880 --> 00:09:46,480
yeah okay so please screenshot yeah

154
00:09:46,480 --> 00:09:48,560
and you can go ahead

155
00:09:48,560 --> 00:09:52,000
yep just give me a sec to

156
00:09:52,000 --> 00:09:56,000
clean up the desktop a little bit more

157
00:09:56,000 --> 00:09:59,120
and we should be good

158
00:10:00,399 --> 00:10:03,399
okay

159
00:10:04,880 --> 00:10:07,360
all right so there's that should be

160
00:10:07,360 --> 00:10:09,040
sending video

161
00:10:09,040 --> 00:10:10,640
there's the video

162
00:10:10,640 --> 00:10:13,440
all right i you guys need to approve the

163
00:10:13,440 --> 00:10:17,079
screen share request

164
00:10:29,040 --> 00:10:32,599
give me one sec

165
00:10:45,279 --> 00:10:47,200
all right

166
00:10:47,200 --> 00:10:48,000
so

167
00:10:48,000 --> 00:10:49,839
uh because of this i'm not going to be

168
00:10:49,839 --> 00:10:51,360
able to

169
00:10:51,360 --> 00:10:54,800
see the chat so uh chairs please let me

170
00:10:54,800 --> 00:10:57,040
know

171
00:10:59,200 --> 00:11:01,120
all right

172
00:11:01,120 --> 00:11:03,200
okay so can everybody see the uh the

173
00:11:03,200 --> 00:11:05,760
slide back

174
00:11:06,079 --> 00:11:07,440
yes here

175
00:11:07,440 --> 00:11:09,120
all right fantastic

176
00:11:09,120 --> 00:11:10,640
um

177
00:11:10,640 --> 00:11:14,399
okay hi everybody uh good day um

178
00:11:14,399 --> 00:11:16,720
you know whatever time zone it is for

179
00:11:16,720 --> 00:11:19,360
you i've got some nice strong tea this

180
00:11:19,360 --> 00:11:21,440
morning and um

181
00:11:21,440 --> 00:11:24,160
uh my name's justin and uh i'm joined

182
00:11:24,160 --> 00:11:26,720
today with fabian um

183
00:11:26,720 --> 00:11:28,640
co-editors on the draft uh aaron

184
00:11:28,640 --> 00:11:30,000
couldn't make it today he had a

185
00:11:30,000 --> 00:11:31,839
scheduling conflict with uh with

186
00:11:31,839 --> 00:11:33,200
something else but

187
00:11:33,200 --> 00:11:36,720
um we the three editors met went over uh

188
00:11:36,720 --> 00:11:38,959
all the content of the slide so he's got

189
00:11:38,959 --> 00:11:40,160
some stuff in here that we're gonna do

190
00:11:40,160 --> 00:11:43,040
our best to cover um the current

191
00:11:43,040 --> 00:11:45,200
versions of the draft are the core

192
00:11:45,200 --> 00:11:48,160
protocol 08 and resource servers one

193
00:11:48,160 --> 00:11:49,279
um

194
00:11:49,279 --> 00:11:51,760
today we're going to go over all of the

195
00:11:51,760 --> 00:11:54,839
changes that have happened since ietf

196
00:11:54,839 --> 00:11:58,160
111 um in the core draft that's uh two

197
00:11:58,160 --> 00:12:00,160
full revisions um

198
00:12:00,160 --> 00:12:01,279
we're going to talk through about the

199
00:12:01,279 --> 00:12:03,760
editorial and functional changes

200
00:12:03,760 --> 00:12:05,680
excuse me in that draft

201
00:12:05,680 --> 00:12:08,160
um the rs draft we actually have not

202
00:12:08,160 --> 00:12:10,800
published a new revision since 111 there

203
00:12:10,800 --> 00:12:13,360
have been a a handful of small changes

204
00:12:13,360 --> 00:12:15,519
and some uh you know some small issues

205
00:12:15,519 --> 00:12:17,600
that have been addressed but the editors

206
00:12:17,600 --> 00:12:19,680
looked at the diff and it wasn't worth

207
00:12:19,680 --> 00:12:21,440
publishing a full revision

208
00:12:21,440 --> 00:12:22,720
because there's

209
00:12:22,720 --> 00:12:24,320
not a lot to talk about there hasn't

210
00:12:24,320 --> 00:12:27,600
been a lot of focus on the rs draft yet

211
00:12:27,600 --> 00:12:29,680
um more on that when we get to the uh to

212
00:12:29,680 --> 00:12:32,000
the roadmap at the end um we are going

213
00:12:32,000 --> 00:12:33,200
to take some time talking about some

214
00:12:33,200 --> 00:12:34,720
formal security analysis that's been

215
00:12:34,720 --> 00:12:38,880
applied to uh the map core protocol um

216
00:12:38,880 --> 00:12:40,480
and uh some attacks and proposed

217
00:12:40,480 --> 00:12:43,200
mitigations and the uh

218
00:12:43,200 --> 00:12:44,399
some of the

219
00:12:44,399 --> 00:12:45,920
other kinds of stuff that's happening

220
00:12:45,920 --> 00:12:48,079
around the protocol

221
00:12:48,079 --> 00:12:49,040
um

222
00:12:49,040 --> 00:12:50,240
all right

223
00:12:50,240 --> 00:12:52,800
uh if you download the uh the deck these

224
00:12:52,800 --> 00:12:55,279
are our clickable links um you can look

225
00:12:55,279 --> 00:12:58,480
at the diffs between uh six and eight uh

226
00:12:58,480 --> 00:12:59,920
as i said before the resource server

227
00:12:59,920 --> 00:13:02,560
draft is is the same version um you'll

228
00:13:02,560 --> 00:13:05,839
see that most of the differences are in

229
00:13:05,839 --> 00:13:08,160
new sections that have been added for uh

230
00:13:08,160 --> 00:13:09,519
for trust security and privacy

231
00:13:09,519 --> 00:13:11,519
consideration sections there's other

232
00:13:11,519 --> 00:13:13,120
stuff peppered through

233
00:13:13,120 --> 00:13:14,720
but that's the majority of the text

234
00:13:14,720 --> 00:13:16,880
changes that you'll see there

235
00:13:16,880 --> 00:13:18,079
um

236
00:13:18,079 --> 00:13:22,000
we have merged 32 pull requests on uh

237
00:13:22,000 --> 00:13:23,519
core and three

238
00:13:23,519 --> 00:13:26,399
pull requests on the uh resource server

239
00:13:26,399 --> 00:13:28,959
draft uh in the last few months since

240
00:13:28,959 --> 00:13:31,600
the last ietf meeting um again these are

241
00:13:31,600 --> 00:13:33,760
clickable links in the downloaded copy

242
00:13:33,760 --> 00:13:35,200
um

243
00:13:35,200 --> 00:13:36,079
and

244
00:13:36,079 --> 00:13:38,959
uh this is just in the space between uh

245
00:13:38,959 --> 00:13:39,760
the

246
00:13:39,760 --> 00:13:42,880
the cutoff for draft publication for 08

247
00:13:42,880 --> 00:13:44,880
and uh and today

248
00:13:44,880 --> 00:13:48,160
we have closed 55 issues with those pull

249
00:13:48,160 --> 00:13:50,639
requests though um the editors went

250
00:13:50,639 --> 00:13:53,440
through and uh there was a lot there

251
00:13:53,440 --> 00:13:56,240
were a lot of interrelated issues that

252
00:13:56,240 --> 00:13:58,160
a lot of them boiled down to you know

253
00:13:58,160 --> 00:14:00,320
there's this specific uh issue that

254
00:14:00,320 --> 00:14:02,880
needs a discussion section and so that

255
00:14:02,880 --> 00:14:04,560
either went into privacy or security

256
00:14:04,560 --> 00:14:06,079
considerations there were a bunch that

257
00:14:06,079 --> 00:14:08,560
were about the trust model between

258
00:14:08,560 --> 00:14:10,480
different parties now that all that's

259
00:14:10,480 --> 00:14:12,079
been added we've been able to close a

260
00:14:12,079 --> 00:14:14,399
lot of those issues and uh five issues

261
00:14:14,399 --> 00:14:16,000
closed on the resource service draft as

262
00:14:16,000 --> 00:14:16,800
well

263
00:14:16,800 --> 00:14:17,920
um

264
00:14:17,920 --> 00:14:20,320
like i said though uh no new publication

265
00:14:20,320 --> 00:14:22,959
but you can see the editor's draft on uh

266
00:14:22,959 --> 00:14:25,120
the resource server uh

267
00:14:25,120 --> 00:14:26,959
from the github page uh if you're

268
00:14:26,959 --> 00:14:29,120
interested in seeing any of that

269
00:14:29,120 --> 00:14:30,399
um

270
00:14:30,399 --> 00:14:31,680
all right

271
00:14:31,680 --> 00:14:35,360
on to the issues onto the pull requests

272
00:14:35,360 --> 00:14:37,760
themselves um so these are all pull

273
00:14:37,760 --> 00:14:39,120
request numbers

274
00:14:39,120 --> 00:14:40,079
um

275
00:14:40,079 --> 00:14:42,560
as you can see most of

276
00:14:42,560 --> 00:14:45,279
the uh most of those pull requests uh

277
00:14:45,279 --> 00:14:47,199
are what we would consider really

278
00:14:47,199 --> 00:14:48,880
editorial changes

279
00:14:48,880 --> 00:14:51,600
a lot of them uh came from folks in the

280
00:14:51,600 --> 00:14:54,000
community uh andreas and florian

281
00:14:54,000 --> 00:14:55,199
specifically

282
00:14:55,199 --> 00:14:58,560
um have contributed a lot of little

283
00:14:58,560 --> 00:15:00,000
changes where the text was not

284
00:15:00,000 --> 00:15:02,160
internally consistent some things were

285
00:15:02,160 --> 00:15:04,399
was referred to as a flag in one place

286
00:15:04,399 --> 00:15:06,320
and a value in another place

287
00:15:06,320 --> 00:15:09,519
um or there were leftovers in the

288
00:15:09,519 --> 00:15:11,920
descriptive text from when uh the

289
00:15:11,920 --> 00:15:14,079
normative text changed or leftovers in

290
00:15:14,079 --> 00:15:15,920
examples from when the normative text

291
00:15:15,920 --> 00:15:16,959
changed

292
00:15:16,959 --> 00:15:18,399
um so

293
00:15:18,399 --> 00:15:20,320
lots of cleanup there's probably

294
00:15:20,320 --> 00:15:23,920
still a bit more to go but uh thank you

295
00:15:23,920 --> 00:15:27,519
so much for um for those contributions

296
00:15:27,519 --> 00:15:29,920
uh they are immensely helpful for making

297
00:15:29,920 --> 00:15:31,920
sure that uh the protocol actually makes

298
00:15:31,920 --> 00:15:35,040
sense and uh it speaks to

299
00:15:35,040 --> 00:15:37,600
people really reading through this

300
00:15:37,600 --> 00:15:40,880
document uh with you know an eye for

301
00:15:40,880 --> 00:15:43,759
fine details which is a really really

302
00:15:43,759 --> 00:15:45,600
important thing for this stage of the

303
00:15:45,600 --> 00:15:46,800
document

304
00:15:46,800 --> 00:15:50,399
uh a handful of other things were

305
00:15:50,399 --> 00:15:53,040
truly editorial stuff uh either you know

306
00:15:53,040 --> 00:15:55,440
typos or misspellings or formatting

307
00:15:55,440 --> 00:15:57,519
changes and stuff like that

308
00:15:57,519 --> 00:15:58,399
um

309
00:15:58,399 --> 00:16:01,120
we've started to use this configuration

310
00:16:01,120 --> 00:16:04,639
uh called editor config to uh

311
00:16:04,639 --> 00:16:08,959
to hopefully minimize the amount of um

312
00:16:08,959 --> 00:16:11,600
sort of spurious changes from from the

313
00:16:11,600 --> 00:16:13,040
different editors and community

314
00:16:13,040 --> 00:16:14,639
contributors for

315
00:16:14,639 --> 00:16:18,079
uh things like white space changes and

316
00:16:18,079 --> 00:16:20,079
uh the the one that's always getting

317
00:16:20,079 --> 00:16:22,959
especially fabian and i is the um

318
00:16:22,959 --> 00:16:26,639
uh extraneous white space at the end of

319
00:16:26,639 --> 00:16:29,440
um at the end of lines um

320
00:16:29,440 --> 00:16:32,399
our editors treat those differently our

321
00:16:32,399 --> 00:16:33,759
editing software treats those

322
00:16:33,759 --> 00:16:36,480
differently so um we were running into

323
00:16:36,480 --> 00:16:38,320
that a lot until aaron added the editor

324
00:16:38,320 --> 00:16:40,399
config controls there and that will

325
00:16:40,399 --> 00:16:43,120
hopefully clean that up a lot we've also

326
00:16:43,120 --> 00:16:45,120
added a few contributors like i

327
00:16:45,120 --> 00:16:47,680
mentioned people that have been um

328
00:16:47,680 --> 00:16:50,320
putting in this work uh we are very

329
00:16:50,320 --> 00:16:52,800
grateful uh you are um you know

330
00:16:52,800 --> 00:16:54,000
definitely contributing to the

331
00:16:54,000 --> 00:16:55,440
specification

332
00:16:55,440 --> 00:16:58,560
um and i i really want to say that even

333
00:16:58,560 --> 00:16:59,600
though

334
00:16:59,600 --> 00:17:01,839
these like all of these pull requests

335
00:17:01,839 --> 00:17:03,920
aren't like you know deep technical

336
00:17:03,920 --> 00:17:05,439
protocol

337
00:17:05,439 --> 00:17:07,679
edits and things like that these are all

338
00:17:07,679 --> 00:17:09,919
really really important um

339
00:17:09,919 --> 00:17:11,760
you know for the

340
00:17:11,760 --> 00:17:14,000
for the text to actually

341
00:17:14,000 --> 00:17:16,799
read consistently and read well to

342
00:17:16,799 --> 00:17:18,319
somebody that's sitting down and using

343
00:17:18,319 --> 00:17:20,959
this so thank you very much for that

344
00:17:20,959 --> 00:17:22,880
and finally the release and cleanup

345
00:17:22,880 --> 00:17:26,400
commit for draft o8

346
00:17:26,959 --> 00:17:30,400
so functional changes um

347
00:17:30,400 --> 00:17:34,080
in the protocol itself uh the top uh

348
00:17:34,080 --> 00:17:36,960
three bullets are we're gonna talk about

349
00:17:36,960 --> 00:17:38,480
uh we're gonna talk about all of these

350
00:17:38,480 --> 00:17:40,080
but the top three bullets are the new

351
00:17:40,080 --> 00:17:41,520
major sections

352
00:17:41,520 --> 00:17:43,200
there's uh trust relationships and

353
00:17:43,200 --> 00:17:45,919
fabian uh is here on the call uh he'll

354
00:17:45,919 --> 00:17:48,000
be talking about that and how that works

355
00:17:48,000 --> 00:17:49,600
there's the security considerations

356
00:17:49,600 --> 00:17:50,559
section

357
00:17:50,559 --> 00:17:53,120
um and the privacy considerations

358
00:17:53,120 --> 00:17:54,160
section

359
00:17:54,160 --> 00:17:55,760
um

360
00:17:55,760 --> 00:17:58,160
there's also a change that we've made a

361
00:17:58,160 --> 00:17:59,520
couple of changes that we've made to how

362
00:17:59,520 --> 00:18:02,000
the subject identifier is handled

363
00:18:02,000 --> 00:18:03,760
um and how the client instance

364
00:18:03,760 --> 00:18:06,640
identifier is handled these are largely

365
00:18:06,640 --> 00:18:09,679
continuations as you'll see um sort of

366
00:18:09,679 --> 00:18:11,360
building on previous work and making

367
00:18:11,360 --> 00:18:13,120
things making the protocol itself more

368
00:18:13,120 --> 00:18:14,720
internally consistent

369
00:18:14,720 --> 00:18:15,919
and

370
00:18:15,919 --> 00:18:18,799
making use of and taking advantage of

371
00:18:18,799 --> 00:18:20,559
aspects of the protocol that we have now

372
00:18:20,559 --> 00:18:22,080
that we didn't

373
00:18:22,080 --> 00:18:25,440
have in the past um to you know make

374
00:18:25,440 --> 00:18:26,559
things make

375
00:18:26,559 --> 00:18:28,640
make more sense to somebody hopefully

376
00:18:28,640 --> 00:18:30,559
make more sense to somebody sitting down

377
00:18:30,559 --> 00:18:32,160
and implementing it

378
00:18:32,160 --> 00:18:33,679
uh fabian you want to go ahead and talk

379
00:18:33,679 --> 00:18:35,520
about trust relationships

380
00:18:35,520 --> 00:18:38,520
please

381
00:18:44,799 --> 00:18:47,840
fabian are you here

382
00:18:54,160 --> 00:18:56,559
all right i'll try to um

383
00:18:56,559 --> 00:18:59,120
i'm not hearing fabian so i'm going to

384
00:18:59,120 --> 00:19:00,480
uh

385
00:19:00,480 --> 00:19:01,919
talk through this

386
00:19:01,919 --> 00:19:03,919
best as i can all right

387
00:19:03,919 --> 00:19:06,960
oh is that you go ahead yes yes oh

388
00:19:06,960 --> 00:19:10,320
excellent all right yep

389
00:19:12,559 --> 00:19:14,080
um

390
00:19:14,080 --> 00:19:15,600
so yes we've been working on trust

391
00:19:15,600 --> 00:19:19,679
relationships uh especially since um

392
00:19:19,679 --> 00:19:22,160
it was something that was expected for

393
00:19:22,160 --> 00:19:23,760
for a long time

394
00:19:23,760 --> 00:19:25,039
together with

395
00:19:25,039 --> 00:19:28,960
privacy and security considerations

396
00:19:28,960 --> 00:19:32,080
so it's a new section section 1.4

397
00:19:32,080 --> 00:19:34,960
and what we've been adding is basically

398
00:19:34,960 --> 00:19:37,679
the details on on what each party is

399
00:19:37,679 --> 00:19:38,720
actually

400
00:19:38,720 --> 00:19:41,200
doing and expecting from others

401
00:19:41,200 --> 00:19:42,160
um

402
00:19:42,160 --> 00:19:43,600
so

403
00:19:43,600 --> 00:19:45,919
detailing for each pair of of

404
00:19:45,919 --> 00:19:48,080
relationships like end user resource

405
00:19:48,080 --> 00:19:50,240
owner and user client and user

406
00:19:50,240 --> 00:19:52,640
authorization server et cetera et cetera

407
00:19:52,640 --> 00:19:54,320
so compared to the last interim

408
00:19:54,320 --> 00:19:56,400
discussion that we had for those of you

409
00:19:56,400 --> 00:19:58,880
that were present we actually added the

410
00:19:58,880 --> 00:20:01,200
end user authorization server a

411
00:20:01,200 --> 00:20:04,840
relationship in in the last draft or

412
00:20:04,840 --> 00:20:07,440
eighth um the general idea is we are

413
00:20:07,440 --> 00:20:10,240
actually using promise theory um so it's

414
00:20:10,240 --> 00:20:12,960
actually an alternative thresh model to

415
00:20:12,960 --> 00:20:17,520
produce iso descriptions um which is um

416
00:20:17,520 --> 00:20:18,880
actually taking

417
00:20:18,880 --> 00:20:21,039
the description a bit further in the

418
00:20:21,039 --> 00:20:22,559
sense that you're actually describing

419
00:20:22,559 --> 00:20:25,760
what each agent is promising to others

420
00:20:25,760 --> 00:20:27,600
and you're building the trust

421
00:20:27,600 --> 00:20:30,080
relationship based on that

422
00:20:30,080 --> 00:20:32,000
so that's basically the part that you've

423
00:20:32,000 --> 00:20:34,799
got here so trust is defined as an

424
00:20:34,799 --> 00:20:36,400
agent's expectation that the promise

425
00:20:36,400 --> 00:20:38,559
will be kept of course there can be a

426
00:20:38,559 --> 00:20:40,080
lot of promises

427
00:20:40,080 --> 00:20:41,440
in our protocol

428
00:20:41,440 --> 00:20:42,880
and so what you can do is you can

429
00:20:42,880 --> 00:20:44,640
actually

430
00:20:44,640 --> 00:20:47,280
execute each

431
00:20:47,280 --> 00:20:50,640
promise as as a base in probability so

432
00:20:50,640 --> 00:20:51,760
it's not

433
00:20:51,760 --> 00:20:55,440
uh the trust itself is not a zero or

434
00:20:55,440 --> 00:20:57,679
or one it's something that you're going

435
00:20:57,679 --> 00:21:00,880
to build up um and that's actually more

436
00:21:00,880 --> 00:21:02,559
um

437
00:21:02,559 --> 00:21:04,880
more looking into reality not in that

438
00:21:04,880 --> 00:21:08,320
area because it's not something that's

439
00:21:08,320 --> 00:21:10,080
when you look at the entirety of the

440
00:21:10,080 --> 00:21:12,480
protocol some parts may

441
00:21:12,480 --> 00:21:14,320
present some vulnerabilities especially

442
00:21:14,320 --> 00:21:16,400
if you didn't implement

443
00:21:16,400 --> 00:21:19,520
security considerations

444
00:21:19,520 --> 00:21:21,600
in full and so you can actually have

445
00:21:21,600 --> 00:21:23,360
something that you're going to be able

446
00:21:23,360 --> 00:21:25,840
to assess marginally and what we want to

447
00:21:25,840 --> 00:21:28,240
do is to build a formal security

448
00:21:28,240 --> 00:21:30,480
verification based on that and for

449
00:21:30,480 --> 00:21:32,720
instance we've got

450
00:21:32,720 --> 00:21:34,799
some participation that's planned for

451
00:21:34,799 --> 00:21:38,000
the oauth security

452
00:21:38,000 --> 00:21:42,720
conference in at the end of november

453
00:21:42,960 --> 00:21:46,320
and so you can read through that uh the

454
00:21:46,320 --> 00:21:48,240
entire

455
00:21:48,240 --> 00:21:49,919
description is available in in the

456
00:21:49,919 --> 00:21:53,280
give-up repository

457
00:21:54,880 --> 00:21:56,400
all right

458
00:21:56,400 --> 00:21:58,559
thank you and um

459
00:21:58,559 --> 00:22:01,440
the uh the one last bit that i i want to

460
00:22:01,440 --> 00:22:03,600
point out that fabian touched on is that

461
00:22:03,600 --> 00:22:05,280
uh one of the best things about this

462
00:22:05,280 --> 00:22:06,880
theory is that it's always about these

463
00:22:06,880 --> 00:22:08,320
relationships

464
00:22:08,320 --> 00:22:10,080
uh between the different parties it's

465
00:22:10,080 --> 00:22:12,799
not just about the parties

466
00:22:12,799 --> 00:22:15,679
and a lot of the the early discussions

467
00:22:15,679 --> 00:22:18,400
about use cases in the protocol um

468
00:22:18,400 --> 00:22:20,400
were really about

469
00:22:20,400 --> 00:22:22,000
getting into what those relationships

470
00:22:22,000 --> 00:22:24,240
are how they're formed uh how they're

471
00:22:24,240 --> 00:22:27,360
modified over time that kind of stuff

472
00:22:27,360 --> 00:22:29,440
yeah something also interesting is we

473
00:22:29,440 --> 00:22:31,760
really tried very hard not to repeat

474
00:22:31,760 --> 00:22:33,039
ourselves

475
00:22:33,039 --> 00:22:35,280
between what trust this is about and

476
00:22:35,280 --> 00:22:37,360
what security and privacy configurations

477
00:22:37,360 --> 00:22:41,039
are about so when we need that into a

478
00:22:41,039 --> 00:22:43,280
trust relationship here we actually

479
00:22:43,280 --> 00:22:45,440
describe what we link to to the parts

480
00:22:45,440 --> 00:22:47,520
which are relevant in in

481
00:22:47,520 --> 00:22:49,520
the rest of the documentation in the

482
00:22:49,520 --> 00:22:50,960
specification so

483
00:22:50,960 --> 00:22:53,280
we are trying not to repeat ourselves

484
00:22:53,280 --> 00:22:56,240
which is otherwise something you would

485
00:22:56,240 --> 00:22:58,159
tend to do if you are not describing it

486
00:22:58,159 --> 00:22:59,840
like that but of course we are really

487
00:22:59,840 --> 00:23:02,799
looking into your your feedbacks and but

488
00:23:02,799 --> 00:23:05,360
we think it's something interesting to

489
00:23:05,360 --> 00:23:08,880
to get into more detail

490
00:23:08,880 --> 00:23:10,720
excellent

491
00:23:10,720 --> 00:23:14,080
all right so uh the next

492
00:23:14,080 --> 00:23:14,960
come on

493
00:23:14,960 --> 00:23:18,159
there we go the next big section is the

494
00:23:18,159 --> 00:23:21,679
security considerations uh which now now

495
00:23:21,679 --> 00:23:24,720
counts to 25 subsections

496
00:23:24,720 --> 00:23:26,960
um and as you would expect

497
00:23:26,960 --> 00:23:30,080
in a protocol like this uh

498
00:23:30,080 --> 00:23:32,159
that's security focused

499
00:23:32,159 --> 00:23:33,520
there's a lot of different stuff to

500
00:23:33,520 --> 00:23:34,840
cover here

501
00:23:34,840 --> 00:23:37,600
um and i'm not going to go into detail

502
00:23:37,600 --> 00:23:40,320
of every single uh bit uh in that

503
00:23:40,320 --> 00:23:42,720
section here on today's call

504
00:23:42,720 --> 00:23:46,080
uh but we do ask the editors to ask

505
00:23:46,080 --> 00:23:47,840
people to read through this section

506
00:23:47,840 --> 00:23:48,880
because

507
00:23:48,880 --> 00:23:50,080
there probably needs to be more

508
00:23:50,080 --> 00:23:51,840
subsections there probably needs to be

509
00:23:51,840 --> 00:23:53,200
more

510
00:23:53,200 --> 00:23:55,840
aspects that need to be covered

511
00:23:55,840 --> 00:23:56,960
about

512
00:23:56,960 --> 00:23:58,559
all of these different things

513
00:23:58,559 --> 00:24:00,159
and um

514
00:24:00,159 --> 00:24:01,279
the editors do know that the

515
00:24:01,279 --> 00:24:03,039
organization of that section isn't isn't

516
00:24:03,039 --> 00:24:04,960
the best right now i'm taking full blame

517
00:24:04,960 --> 00:24:07,440
for that uh it's just kind of a

518
00:24:07,440 --> 00:24:09,840
one top level bucket at the moment we

519
00:24:09,840 --> 00:24:12,320
are uh we are working on kind of

520
00:24:12,320 --> 00:24:14,400
organizing these into into categories

521
00:24:14,400 --> 00:24:15,760
and things like that

522
00:24:15,760 --> 00:24:16,960
um

523
00:24:16,960 --> 00:24:18,480
but some of the uh some of the larger

524
00:24:18,480 --> 00:24:21,679
things that uh covers is that um even

525
00:24:21,679 --> 00:24:24,240
though you're signing requests you still

526
00:24:24,240 --> 00:24:26,640
have to use tls because signatures don't

527
00:24:26,640 --> 00:24:29,360
provide confidentiality in transit

528
00:24:29,360 --> 00:24:31,039
but you still have to sign things

529
00:24:31,039 --> 00:24:34,240
because tls doesn't provide um

530
00:24:34,240 --> 00:24:37,120
identification um and your signatures

531
00:24:37,120 --> 00:24:38,559
need to be able to

532
00:24:38,559 --> 00:24:40,640
cover uh the

533
00:24:40,640 --> 00:24:43,840
message uh the relevant message content

534
00:24:43,840 --> 00:24:45,279
um

535
00:24:45,279 --> 00:24:46,880
in order for signatures and anything

536
00:24:46,880 --> 00:24:48,400
like this to be trusted you have to

537
00:24:48,400 --> 00:24:50,159
protect your keys if you're sharing the

538
00:24:50,159 --> 00:24:52,159
keys that you're signing things with

539
00:24:52,159 --> 00:24:53,840
with other parties

540
00:24:53,840 --> 00:24:56,880
those parties can sign for you and you

541
00:24:56,880 --> 00:25:01,520
probably don't want that um and uh

542
00:25:01,520 --> 00:25:03,679
and also if you're using bearer tokens

543
00:25:03,679 --> 00:25:06,159
there are no signatures

544
00:25:06,159 --> 00:25:08,320
uh with it so anybody who sees the token

545
00:25:08,320 --> 00:25:09,919
is allowed to use the token regardless

546
00:25:09,919 --> 00:25:11,679
of the contents of the token

547
00:25:11,679 --> 00:25:12,880
so

548
00:25:12,880 --> 00:25:15,360
this is the kind of stuff that uh is

549
00:25:15,360 --> 00:25:17,120
obvious to a lot of practitioners in our

550
00:25:17,120 --> 00:25:19,840
space but still absolutely needs to be

551
00:25:19,840 --> 00:25:21,200
enumerated

552
00:25:21,200 --> 00:25:22,480
um

553
00:25:22,480 --> 00:25:26,080
then there's more subtle stuff uh like

554
00:25:26,080 --> 00:25:28,640
the crypto algorithms and the uh the

555
00:25:28,640 --> 00:25:30,240
random number generator algorithms that

556
00:25:30,240 --> 00:25:32,799
you choose could have their own

557
00:25:32,799 --> 00:25:35,760
susceptibilities uh their own weaknesses

558
00:25:35,760 --> 00:25:39,760
uh so uh for example uh if you're using

559
00:25:39,760 --> 00:25:42,799
um a bad pseudo-random number generation

560
00:25:42,799 --> 00:25:45,039
in order to generate some of these

561
00:25:45,039 --> 00:25:45,919
um

562
00:25:45,919 --> 00:25:48,720
you know ephemeral handles like the uh

563
00:25:48,720 --> 00:25:50,400
say you're using a handle-based access

564
00:25:50,400 --> 00:25:52,559
token um you know a reference-based

565
00:25:52,559 --> 00:25:54,400
access token so no internal content or

566
00:25:54,400 --> 00:25:56,400
structure

567
00:25:56,400 --> 00:25:57,520
somebody could

568
00:25:57,520 --> 00:26:01,039
try to either guess or exhaust your

569
00:26:01,039 --> 00:26:04,080
access token space

570
00:26:04,640 --> 00:26:07,200
if you're not using a good even random

571
00:26:07,200 --> 00:26:09,760
number generator

572
00:26:09,760 --> 00:26:12,080
we also have a couple of uh sections

573
00:26:12,080 --> 00:26:14,320
that point out uh

574
00:26:14,320 --> 00:26:15,919
the ways that

575
00:26:15,919 --> 00:26:18,559
front channel redirects are kind of

576
00:26:18,559 --> 00:26:20,960
inherently susceptible to attacks like

577
00:26:20,960 --> 00:26:23,440
phishing attacks like session capture

578
00:26:23,440 --> 00:26:26,799
um and how aspects of gnapp

579
00:26:26,799 --> 00:26:31,520
um can combat that when used properly uh

580
00:26:31,520 --> 00:26:33,120
but still there is this notion of you

581
00:26:33,120 --> 00:26:35,120
are giving away control

582
00:26:35,120 --> 00:26:39,120
of the system to uh an untrusted party

583
00:26:39,120 --> 00:26:40,960
for a bit and then waiting to come back

584
00:26:40,960 --> 00:26:42,559
so there's there is inherent risk in

585
00:26:42,559 --> 00:26:45,039
that that you need to understand before

586
00:26:45,039 --> 00:26:47,600
you just go start applying this

587
00:26:47,600 --> 00:26:48,100
um

588
00:26:48,100 --> 00:26:49,520
[Music]

589
00:26:49,520 --> 00:26:51,840
if you guys will remember earlier in the

590
00:26:51,840 --> 00:26:54,400
year uh we had some researchers point

591
00:26:54,400 --> 00:26:55,919
out um

592
00:26:55,919 --> 00:26:58,960
a uh a an authorization server mix-up

593
00:26:58,960 --> 00:27:01,760
attack against canap um and the

594
00:27:01,760 --> 00:27:04,559
mitigation for that is the interaction

595
00:27:04,559 --> 00:27:08,000
hash in the front channel um and so

596
00:27:08,000 --> 00:27:11,039
we've got text now that describes why

597
00:27:11,039 --> 00:27:13,520
it's important to check that hash and

598
00:27:13,520 --> 00:27:15,200
all of the signatures on all of the

599
00:27:15,200 --> 00:27:18,159
various messages

600
00:27:19,279 --> 00:27:21,279
along with the keys like i said exactly

601
00:27:21,279 --> 00:27:23,760
these need to be binned and um i'm like

602
00:27:23,760 --> 00:27:26,000
editing the bins in my head as i'm going

603
00:27:26,000 --> 00:27:27,679
through even this list

604
00:27:27,679 --> 00:27:28,040
um

605
00:27:28,040 --> 00:27:29,200
[Music]

606
00:27:29,200 --> 00:27:32,000
the uh

607
00:27:32,480 --> 00:27:35,279
pre-registering your keys uh

608
00:27:35,279 --> 00:27:37,360
solves some problems but creates other

609
00:27:37,360 --> 00:27:39,760
problems uh so just because you know a

610
00:27:39,760 --> 00:27:41,200
key ahead of time especially client

611
00:27:41,200 --> 00:27:43,120
instances key ahead of time doesn't mean

612
00:27:43,120 --> 00:27:45,360
that you can necessarily always trust it

613
00:27:45,360 --> 00:27:47,919
to not have been exfiltrated and copied

614
00:27:47,919 --> 00:27:49,279
and charity it just

615
00:27:49,279 --> 00:27:50,559
moves the

616
00:27:50,559 --> 00:27:51,360
uh

617
00:27:51,360 --> 00:27:53,760
the focus of that trust

618
00:27:53,760 --> 00:27:56,559
um which is something that's part of the

619
00:27:56,559 --> 00:27:58,960
uh the trust theory that uh favian was

620
00:27:58,960 --> 00:28:00,720
just talking about

621
00:28:00,720 --> 00:28:04,240
um using mutual tls everywhere um

622
00:28:04,240 --> 00:28:06,640
doesn't actually solve a lot of the uh

623
00:28:06,640 --> 00:28:09,440
the problems that uh that it tends to

624
00:28:09,440 --> 00:28:12,159
get applied to um that

625
00:28:12,159 --> 00:28:15,600
people apply it for um

626
00:28:15,600 --> 00:28:17,600
and uh so there's discussion about that

627
00:28:17,600 --> 00:28:20,720
and also different ways that tls can be

628
00:28:20,720 --> 00:28:23,039
deployed so you can deploy with a ca you

629
00:28:23,039 --> 00:28:25,919
can deploy with just explicitly trusting

630
00:28:25,919 --> 00:28:27,679
uh self-signed certificates and things

631
00:28:27,679 --> 00:28:28,880
like that

632
00:28:28,880 --> 00:28:30,480
um

633
00:28:30,480 --> 00:28:32,240
and uh and

634
00:28:32,240 --> 00:28:33,760
finally

635
00:28:33,760 --> 00:28:35,440
uh since we are

636
00:28:35,440 --> 00:28:38,880
we do allow the protocol to um

637
00:28:38,880 --> 00:28:41,279
to touch complex things like identity

638
00:28:41,279 --> 00:28:42,559
assertions

639
00:28:42,559 --> 00:28:43,679
um

640
00:28:43,679 --> 00:28:45,919
processing those assertions has its own

641
00:28:45,919 --> 00:28:48,480
set of vulnerabilities uh there have

642
00:28:48,480 --> 00:28:51,760
been attacks against xml dc against saml

643
00:28:51,760 --> 00:28:53,200
against jose

644
00:28:53,200 --> 00:28:55,600
and uh if you are working with those

645
00:28:55,600 --> 00:28:58,559
assertions that use those technologies

646
00:28:58,559 --> 00:28:59,440
then

647
00:28:59,440 --> 00:29:02,720
uh you are susceptible to those attacks

648
00:29:02,720 --> 00:29:03,679
as well

649
00:29:03,679 --> 00:29:07,840
so somebody could do a um you know an ex

650
00:29:07,840 --> 00:29:10,399
an xml fork bomb attack against you if

651
00:29:10,399 --> 00:29:11,840
they're just trying to get you to parse

652
00:29:11,840 --> 00:29:14,240
a saml assertion and you're doing it

653
00:29:14,240 --> 00:29:18,559
naively so um what this basically

654
00:29:18,559 --> 00:29:21,039
means is that if you need to

655
00:29:21,039 --> 00:29:23,440
if you need to work with these other

656
00:29:23,440 --> 00:29:25,919
data structures in these other formats

657
00:29:25,919 --> 00:29:28,320
you also have to like really pay

658
00:29:28,320 --> 00:29:30,559
attention to all of the susceptibilities

659
00:29:30,559 --> 00:29:32,399
that they have and they they carry with

660
00:29:32,399 --> 00:29:33,950
them

661
00:29:33,950 --> 00:29:35,520
[Music]

662
00:29:35,520 --> 00:29:36,240
so

663
00:29:36,240 --> 00:29:38,399
there's there's other details there's

664
00:29:38,399 --> 00:29:40,240
there's other security considerations in

665
00:29:40,240 --> 00:29:42,559
there uh the editors ask that everybody

666
00:29:42,559 --> 00:29:44,000
please go read through those read

667
00:29:44,000 --> 00:29:46,799
through them thoroughly we have tried to

668
00:29:46,799 --> 00:29:49,760
uh add forward-facing links to uh the

669
00:29:49,760 --> 00:29:52,080
rest of the document um

670
00:29:52,080 --> 00:29:52,840
where

671
00:29:52,840 --> 00:29:55,039
appropriate uh so

672
00:29:55,039 --> 00:29:57,520
so where we have a normative discussion

673
00:29:57,520 --> 00:29:59,600
about something

674
00:29:59,600 --> 00:30:03,039
it'll say see section 12.6

675
00:30:03,039 --> 00:30:05,679
uh for discussion of different attacks

676
00:30:05,679 --> 00:30:08,080
or you know or whatever um if there are

677
00:30:08,080 --> 00:30:09,520
other places that we can add those links

678
00:30:09,520 --> 00:30:11,440
if there are places we can add backlinks

679
00:30:11,440 --> 00:30:12,640
uh for

680
00:30:12,640 --> 00:30:15,200
uh greater explanations uh from the

681
00:30:15,200 --> 00:30:16,960
security considerations

682
00:30:16,960 --> 00:30:18,399
uh you know

683
00:30:18,399 --> 00:30:22,240
please help us to do that as well

684
00:30:22,240 --> 00:30:25,200
justin unless you have a slide about it

685
00:30:25,200 --> 00:30:28,320
i think this is a a great place to stop

686
00:30:28,320 --> 00:30:29,520
and mention

687
00:30:29,520 --> 00:30:32,320
the old security workshop

688
00:30:32,320 --> 00:30:33,279
oh

689
00:30:33,279 --> 00:30:36,559
we don't have a slide thank you yarn um

690
00:30:36,559 --> 00:30:38,559
so the oauth security workshop is an

691
00:30:38,559 --> 00:30:40,080
online event that's happening in a

692
00:30:40,080 --> 00:30:42,000
couple of weeks uh i shut down my

693
00:30:42,000 --> 00:30:43,520
calendar so it wouldn't pop up but if

694
00:30:43,520 --> 00:30:44,880
somebody has the date

695
00:30:44,880 --> 00:30:46,159
um

696
00:30:46,159 --> 00:30:47,520
um

697
00:30:47,520 --> 00:30:50,799
this is a free online event um i will be

698
00:30:50,799 --> 00:30:53,039
presenting um

699
00:30:53,039 --> 00:30:54,640
sort of the uh

700
00:30:54,640 --> 00:30:56,000
the core

701
00:30:56,000 --> 00:30:58,640
structure of gnapp as a protocol uh

702
00:30:58,640 --> 00:31:00,399
fabian's going to be presenting formal

703
00:31:00,399 --> 00:31:02,080
security analysis

704
00:31:02,080 --> 00:31:03,120
uh

705
00:31:03,120 --> 00:31:04,559
you know a lot of the trust and security

706
00:31:04,559 --> 00:31:07,120
modeling of knapp there um there's also

707
00:31:07,120 --> 00:31:09,360
going to be a lot of discussion on oauth

708
00:31:09,360 --> 00:31:11,519
and open id connect and uh related

709
00:31:11,519 --> 00:31:14,320
protocols so uh it is a free event it's

710
00:31:14,320 --> 00:31:16,559
happening in a couple of weeks um you

711
00:31:16,559 --> 00:31:19,840
know uh if you can make it please do um

712
00:31:19,840 --> 00:31:21,919
this is a place where a lot of very

713
00:31:21,919 --> 00:31:24,080
in-depth uh sort of gloves off

714
00:31:24,080 --> 00:31:27,200
discussion happens in terms of like well

715
00:31:27,200 --> 00:31:28,880
you know if you do things this way then

716
00:31:28,880 --> 00:31:30,799
it's going to fall apart so how do we

717
00:31:30,799 --> 00:31:32,320
how do we make sure this bit doesn't

718
00:31:32,320 --> 00:31:34,320
doesn't actually fall apart

719
00:31:34,320 --> 00:31:37,279
um an app is in a really good

720
00:31:37,279 --> 00:31:39,360
uh position to be

721
00:31:39,360 --> 00:31:40,799
uh

722
00:31:40,799 --> 00:31:43,200
kind of part of this community now this

723
00:31:43,200 --> 00:31:45,200
is the first time that can apple is that

724
00:31:45,200 --> 00:31:46,960
can app is formally

725
00:31:46,960 --> 00:31:49,600
part of the oauth security workshop

726
00:31:49,600 --> 00:31:51,120
um

727
00:31:51,120 --> 00:31:54,240
um agenda and so we're in a really good

728
00:31:54,240 --> 00:31:55,600
position for this

729
00:31:55,600 --> 00:31:57,440
now because

730
00:31:57,440 --> 00:32:00,240
while the core protocol is fairly stable

731
00:32:00,240 --> 00:32:03,679
we're not yet final so we can still

732
00:32:03,679 --> 00:32:05,440
tweak things we can still fix things we

733
00:32:05,440 --> 00:32:07,519
can still call things out as we're gonna

734
00:32:07,519 --> 00:32:09,919
be doing uh later today so please make

735
00:32:09,919 --> 00:32:11,919
the security workshop if you can fabian

736
00:32:11,919 --> 00:32:15,200
and i will be there um

737
00:32:15,200 --> 00:32:16,000
and

738
00:32:16,000 --> 00:32:17,519
did anybody do does anybody have the

739
00:32:17,519 --> 00:32:19,679
date or that or if it's in the chat that

740
00:32:19,679 --> 00:32:21,519
would be great

741
00:32:21,519 --> 00:32:24,480
you can google it too

742
00:32:26,320 --> 00:32:28,399
the link on the chat

743
00:32:28,399 --> 00:32:30,559
all right perfect thank you uh kathleen

744
00:32:30,559 --> 00:32:31,679
if you could add that to the notes that

745
00:32:31,679 --> 00:32:33,919
would be perfect

746
00:32:33,919 --> 00:32:35,679
uh just the link

747
00:32:35,679 --> 00:32:38,320
um all right

748
00:32:38,320 --> 00:32:39,600
so

749
00:32:39,600 --> 00:32:43,080
privacy considerations

750
00:32:43,760 --> 00:32:44,559
we

751
00:32:44,559 --> 00:32:46,960
were we we are lucky in the itf to have

752
00:32:46,960 --> 00:32:50,640
rfc 6973 that actually lays out

753
00:32:50,640 --> 00:32:53,440
uh topics and uh sort of major

754
00:32:53,440 --> 00:32:54,880
categories

755
00:32:54,880 --> 00:32:56,480
um to

756
00:32:56,480 --> 00:32:59,279
analyze uh specification

757
00:32:59,279 --> 00:33:00,799
um

758
00:33:00,799 --> 00:33:02,399
and just like the security

759
00:33:02,399 --> 00:33:04,559
considerations these are all things that

760
00:33:04,559 --> 00:33:06,320
you need to be aware of that this is

761
00:33:06,320 --> 00:33:08,159
something that could happen sometimes

762
00:33:08,159 --> 00:33:09,840
it's it turns out this is actually

763
00:33:09,840 --> 00:33:12,000
something that you want sometimes it's

764
00:33:12,000 --> 00:33:13,440
something that you might not have

765
00:33:13,440 --> 00:33:15,519
realized could happen

766
00:33:15,519 --> 00:33:17,120
so on the surveillance side you could be

767
00:33:17,120 --> 00:33:18,480
surveilled by the client you could be

768
00:33:18,480 --> 00:33:20,000
surveilled by the authorization server

769
00:33:20,000 --> 00:33:21,600
and those can actually happen in ways

770
00:33:21,600 --> 00:33:22,840
that you might not

771
00:33:22,840 --> 00:33:26,399
realize um you know for example if uh

772
00:33:26,399 --> 00:33:28,320
the authorization server

773
00:33:28,320 --> 00:33:31,760
um we would expect that uh as it's you

774
00:33:31,760 --> 00:33:33,519
know by its nature we would expect that

775
00:33:33,519 --> 00:33:35,919
to be able to know where you're making

776
00:33:35,919 --> 00:33:37,760
calls and things like that because

777
00:33:37,760 --> 00:33:40,240
you're asking it for access tokens

778
00:33:40,240 --> 00:33:42,960
but uh you might not expect it to have

779
00:33:42,960 --> 00:33:45,440
all of the exact uh information about

780
00:33:45,440 --> 00:33:47,679
like when you are making those calls and

781
00:33:47,679 --> 00:33:48,960
what calls you're making because that's

782
00:33:48,960 --> 00:33:50,880
something the resource server might be

783
00:33:50,880 --> 00:33:52,720
calling back to the authorization server

784
00:33:52,720 --> 00:33:53,679
to get

785
00:33:53,679 --> 00:33:56,000
uh sort of policy decisions on

786
00:33:56,000 --> 00:33:58,399
so we laid out that type of uh

787
00:33:58,399 --> 00:33:59,600
information

788
00:33:59,600 --> 00:34:00,720
um

789
00:34:00,720 --> 00:34:04,240
the the data that you're storing um

790
00:34:04,240 --> 00:34:06,399
you know uh

791
00:34:06,399 --> 00:34:08,239
the shared references because of all the

792
00:34:08,239 --> 00:34:11,760
identity stuff uh that uh that can be

793
00:34:11,760 --> 00:34:16,960
added into gnapp um the references to uh

794
00:34:16,960 --> 00:34:20,159
to user information um so an opaque

795
00:34:20,159 --> 00:34:22,239
identifier from an as if that's reused

796
00:34:22,239 --> 00:34:24,159
across multiple systems and that's

797
00:34:24,159 --> 00:34:26,480
actually disclosing more information

798
00:34:26,480 --> 00:34:28,399
than um

799
00:34:28,399 --> 00:34:31,280
then you might expect it to you might

800
00:34:31,280 --> 00:34:33,359
not expect two different resource

801
00:34:33,359 --> 00:34:34,960
servers or two different domains to know

802
00:34:34,960 --> 00:34:37,918
that you're the same user

803
00:34:38,800 --> 00:34:41,119
and these are considerations that need

804
00:34:41,119 --> 00:34:42,960
to be made for

805
00:34:42,960 --> 00:34:45,040
pretty much all of the implementers in

806
00:34:45,040 --> 00:34:46,719
the system so people are building

807
00:34:46,719 --> 00:34:48,399
clients building resource servers

808
00:34:48,399 --> 00:34:50,639
building authorization servers and the

809
00:34:50,639 --> 00:34:53,199
support components for for each of these

810
00:34:53,199 --> 00:34:54,639
kinds of things

811
00:34:54,639 --> 00:34:58,079
uh one of the ones that um

812
00:34:58,079 --> 00:35:00,880
that shows up uh and this is this is

813
00:35:00,880 --> 00:35:02,240
also

814
00:35:02,240 --> 00:35:03,440
going to be part of the security

815
00:35:03,440 --> 00:35:05,680
considerations that if a client uses the

816
00:35:05,680 --> 00:35:07,040
same key

817
00:35:07,040 --> 00:35:08,880
to talk to the authorization server and

818
00:35:08,880 --> 00:35:11,440
every resource server then all of those

819
00:35:11,440 --> 00:35:12,960
resource servers

820
00:35:12,960 --> 00:35:14,400
even if they don't know any information

821
00:35:14,400 --> 00:35:15,440
about

822
00:35:15,440 --> 00:35:17,599
about the user they're just they're just

823
00:35:17,599 --> 00:35:18,720
serving

824
00:35:18,720 --> 00:35:20,960
some non-user related stuff

825
00:35:20,960 --> 00:35:22,480
those resource servers would be able to

826
00:35:22,480 --> 00:35:24,640
correlate hey i'm seeing the same key

827
00:35:24,640 --> 00:35:26,880
used for signature that you're seeing so

828
00:35:26,880 --> 00:35:28,720
this is probably the same person this is

829
00:35:28,720 --> 00:35:30,880
this is the same piece of software

830
00:35:30,880 --> 00:35:31,839
um

831
00:35:31,839 --> 00:35:34,079
and that might not be something that uh

832
00:35:34,079 --> 00:35:36,480
that the client actually wants uh the

833
00:35:36,480 --> 00:35:39,119
client might actually want to hide that

834
00:35:39,119 --> 00:35:41,119
from those different systems gnapp

835
00:35:41,119 --> 00:35:43,599
allows that hiding but a developer might

836
00:35:43,599 --> 00:35:45,359
not realize that when they're sitting

837
00:35:45,359 --> 00:35:48,400
down and they might take the easy path

838
00:35:48,400 --> 00:35:50,000
of just using the same key everywhere

839
00:35:50,000 --> 00:35:51,920
the same identifier everywhere all the

840
00:35:51,920 --> 00:35:55,839
same sort of other information

841
00:35:56,160 --> 00:35:58,560
across all of these different systems

842
00:35:58,560 --> 00:36:00,480
and so that's why it's important to

843
00:36:00,480 --> 00:36:03,680
really call all of these out um

844
00:36:03,680 --> 00:36:05,920
for implementers to be able to

845
00:36:05,920 --> 00:36:09,280
make those decisions um

846
00:36:09,280 --> 00:36:12,640
as they go forward

847
00:36:12,640 --> 00:36:15,200
all right so that's it for the major

848
00:36:15,200 --> 00:36:16,720
sort of trust security and privacy

849
00:36:16,720 --> 00:36:19,599
considerations sections um i i will

850
00:36:19,599 --> 00:36:21,200
pause before we get into the more

851
00:36:21,200 --> 00:36:23,440
detailed stuff if anybody has

852
00:36:23,440 --> 00:36:26,480
um questions about these major sections

853
00:36:26,480 --> 00:36:28,880
uh because as i said before these are

854
00:36:28,880 --> 00:36:31,520
these are the major new sections uh to

855
00:36:31,520 --> 00:36:34,320
to the document

856
00:36:36,800 --> 00:36:38,240
so yarn in life just let me know if

857
00:36:38,240 --> 00:36:39,440
anybody's on the queue or if i should

858
00:36:39,440 --> 00:36:41,839
move on

859
00:36:47,280 --> 00:36:48,800
it doesn't look like it

860
00:36:48,800 --> 00:36:49,839
all right

861
00:36:49,839 --> 00:36:52,960
or maybe i will ask

862
00:36:52,960 --> 00:36:54,400
so

863
00:36:54,400 --> 00:36:56,560
just to get everybody on the same page

864
00:36:56,560 --> 00:36:59,599
we obviously have two protocols you

865
00:36:59,599 --> 00:37:02,240
talked about security and privacy

866
00:37:02,240 --> 00:37:05,280
uh consideration two drafts we

867
00:37:05,280 --> 00:37:06,640
you talked about

868
00:37:06,640 --> 00:37:09,440
security and privacy considerations in

869
00:37:09,440 --> 00:37:11,760
one of the drafts the core protocol can

870
00:37:11,760 --> 00:37:14,560
you speak to how it relates to the other

871
00:37:14,560 --> 00:37:16,000
one

872
00:37:16,000 --> 00:37:19,200
that oh okay fantastic question um uh my

873
00:37:19,200 --> 00:37:21,440
apologies for not uh for not bringing

874
00:37:21,440 --> 00:37:23,119
this up because you made the same point

875
00:37:23,119 --> 00:37:24,240
at the interim so i should have

876
00:37:24,240 --> 00:37:25,440
remembered this

877
00:37:25,440 --> 00:37:26,400
um

878
00:37:26,400 --> 00:37:28,160
these are all sections that have been

879
00:37:28,160 --> 00:37:30,720
added to the core draft um the editors

880
00:37:30,720 --> 00:37:33,920
have not applied this um

881
00:37:33,920 --> 00:37:36,160
exercise to the resource server draft

882
00:37:36,160 --> 00:37:37,040
yet

883
00:37:37,040 --> 00:37:38,240
um

884
00:37:38,240 --> 00:37:40,640
we expect that

885
00:37:40,640 --> 00:37:43,119
uh the resource server draft

886
00:37:43,119 --> 00:37:44,480
will

887
00:37:44,480 --> 00:37:47,520
uh inherit a lot of

888
00:37:47,520 --> 00:37:49,760
the uh considerations from the core and

889
00:37:49,760 --> 00:37:51,440
be able to point back to

890
00:37:51,440 --> 00:37:52,400
them

891
00:37:52,400 --> 00:37:53,760
um

892
00:37:53,760 --> 00:37:56,960
but we do expect there to be

893
00:37:56,960 --> 00:37:59,040
additional considerations

894
00:37:59,040 --> 00:38:01,760
um that are going to be unique for

895
00:38:01,760 --> 00:38:03,040
uh for

896
00:38:03,040 --> 00:38:06,160
that uh draft and also

897
00:38:06,160 --> 00:38:07,680
things that you would want to go into

898
00:38:07,680 --> 00:38:09,839
more detail for that draft for example

899
00:38:09,839 --> 00:38:12,560
um the resource server draft defines the

900
00:38:12,560 --> 00:38:15,280
introspection protocol which is uh the

901
00:38:15,280 --> 00:38:17,680
mechanism by which an authorization

902
00:38:17,680 --> 00:38:19,280
server would learn

903
00:38:19,280 --> 00:38:21,440
that a given access token is being

904
00:38:21,440 --> 00:38:23,200
actively used

905
00:38:23,200 --> 00:38:24,560
add a bunch of different resource

906
00:38:24,560 --> 00:38:26,320
servers

907
00:38:26,320 --> 00:38:28,400
and that is a trade-off of using uh

908
00:38:28,400 --> 00:38:29,839
introspection

909
00:38:29,839 --> 00:38:31,040
that might be something you actually

910
00:38:31,040 --> 00:38:32,720
want your authorization server to know

911
00:38:32,720 --> 00:38:34,000
in order to

912
00:38:34,000 --> 00:38:35,599
protect the users and protect the

913
00:38:35,599 --> 00:38:37,680
environment that is its job but it might

914
00:38:37,680 --> 00:38:39,760
also be something that you want to

915
00:38:39,760 --> 00:38:41,760
mask

916
00:38:41,760 --> 00:38:45,680
in some fashion um and

917
00:38:45,680 --> 00:38:48,160
or or avoid entirely by not using token

918
00:38:48,160 --> 00:38:50,000
introspection uh by using a structure

919
00:38:50,000 --> 00:38:52,240
token instead um

920
00:38:52,240 --> 00:38:54,720
there are also going there are also

921
00:38:54,720 --> 00:38:56,960
security considerations for if you're

922
00:38:56,960 --> 00:38:58,560
using a structure token what goes in a

923
00:38:58,560 --> 00:39:00,560
structure token versus what you don't

924
00:39:00,560 --> 00:39:01,599
return

925
00:39:01,599 --> 00:39:02,960
for example i've done a lot of work in

926
00:39:02,960 --> 00:39:05,440
health care spaces where putting a user

927
00:39:05,440 --> 00:39:07,839
identifier in the access token is a

928
00:39:07,839 --> 00:39:10,800
gross privacy violation

929
00:39:10,800 --> 00:39:12,400
because

930
00:39:12,400 --> 00:39:15,040
you do not want to

931
00:39:15,040 --> 00:39:18,079
allow these uh data endpoints to

932
00:39:18,079 --> 00:39:21,119
correlate a real-life person

933
00:39:21,119 --> 00:39:23,680
against a um

934
00:39:23,680 --> 00:39:26,640
a specific medical record or um you know

935
00:39:26,640 --> 00:39:28,079
like a piece of medical imagery or

936
00:39:28,079 --> 00:39:30,320
something like that um and they don't

937
00:39:30,320 --> 00:39:32,079
need that in order to function

938
00:39:32,079 --> 00:39:34,640
um so all of these kinds of trade-offs

939
00:39:34,640 --> 00:39:36,880
uh need to be discussed in depth in the

940
00:39:36,880 --> 00:39:38,800
resource draft so we do expect there to

941
00:39:38,800 --> 00:39:40,480
be um

942
00:39:40,480 --> 00:39:42,400
additional stuff and expansion of stuff

943
00:39:42,400 --> 00:39:43,839
inside that draft

944
00:39:43,839 --> 00:39:45,599
but we haven't we haven't really gotten

945
00:39:45,599 --> 00:39:47,440
to that part yet

946
00:39:47,440 --> 00:39:49,440
okay thank you there's no one else on

947
00:39:49,440 --> 00:39:51,599
the queue so let's move on

948
00:39:51,599 --> 00:39:53,200
fantastic

949
00:39:53,200 --> 00:39:56,000
all right so symmetric cryptography we

950
00:39:56,000 --> 00:39:57,920
had uh we had a lot of discussion back

951
00:39:57,920 --> 00:39:59,440
and forth in github and a bit on the

952
00:39:59,440 --> 00:40:01,040
list about this

953
00:40:01,040 --> 00:40:04,560
and uh what it boils down to uh the way

954
00:40:04,560 --> 00:40:06,319
that we have it right now

955
00:40:06,319 --> 00:40:08,839
is that it is allowed but it is

956
00:40:08,839 --> 00:40:10,960
restricted uh

957
00:40:10,960 --> 00:40:12,560
a lot of the reason that it's allowed is

958
00:40:12,560 --> 00:40:15,599
that the underlying crypto methods um

959
00:40:15,599 --> 00:40:18,000
allow for symmetric cryptography

960
00:40:18,000 --> 00:40:21,040
so it's a little

961
00:40:21,040 --> 00:40:23,760
it would be awkward at best and silly at

962
00:40:23,760 --> 00:40:25,760
worst for gnap to

963
00:40:25,760 --> 00:40:28,079
uh to attempt to disallow something like

964
00:40:28,079 --> 00:40:28,960
that

965
00:40:28,960 --> 00:40:30,240
um

966
00:40:30,240 --> 00:40:33,200
what we do disallow though is using gnat

967
00:40:33,200 --> 00:40:35,520
for symmetric key distribution so

968
00:40:35,520 --> 00:40:37,760
knapp's

969
00:40:37,760 --> 00:40:40,800
mechanisms for introducing keys uh by

970
00:40:40,800 --> 00:40:41,920
value

971
00:40:41,920 --> 00:40:45,359
um are only allowed to be used for

972
00:40:45,359 --> 00:40:46,160
uh

973
00:40:46,160 --> 00:40:47,359
for

974
00:40:47,359 --> 00:40:49,040
public private key

975
00:40:49,040 --> 00:40:51,599
uh crypto

976
00:40:51,599 --> 00:40:52,800
um

977
00:40:52,800 --> 00:40:54,800
the reason for that being obvious if

978
00:40:54,800 --> 00:40:56,560
somebody has your symmetric key they can

979
00:40:56,560 --> 00:40:58,160
actually go and do things

980
00:40:58,160 --> 00:41:00,000
uh you're only allowed to pass around

981
00:41:00,000 --> 00:41:01,839
key identifiers how you set up those

982
00:41:01,839 --> 00:41:04,560
identifiers is up to you uh you

983
00:41:04,560 --> 00:41:07,359
but we have text now in security

984
00:41:07,359 --> 00:41:09,359
considerations which

985
00:41:09,359 --> 00:41:11,200
explains some ways that you might

986
00:41:11,200 --> 00:41:12,960
actually want to do that some things you

987
00:41:12,960 --> 00:41:16,319
can consider uh like key derivation uh

988
00:41:16,319 --> 00:41:18,319
functions in order to get to asymmetric

989
00:41:18,319 --> 00:41:19,440
key

990
00:41:19,440 --> 00:41:21,280
so you can pass in an identifier run

991
00:41:21,280 --> 00:41:22,880
that through a derivation function to

992
00:41:22,880 --> 00:41:24,319
get the appropriate key in the right

993
00:41:24,319 --> 00:41:25,200
place

994
00:41:25,200 --> 00:41:26,400
um

995
00:41:26,400 --> 00:41:27,920
you can do

996
00:41:27,920 --> 00:41:30,880
things like uh use a key escrowing

997
00:41:30,880 --> 00:41:33,440
service uh to actually do all of the

998
00:41:33,440 --> 00:41:35,280
crypto for you so that your code never

999
00:41:35,280 --> 00:41:38,240
actually sees the key and you are locked

1000
00:41:38,240 --> 00:41:41,040
out to only do verification for example

1001
00:41:41,040 --> 00:41:42,800
um and you never actually see the key

1002
00:41:42,800 --> 00:41:45,359
for that um

1003
00:41:45,359 --> 00:41:48,640
and um

1004
00:41:48,640 --> 00:41:50,480
what we wanted to make sure was that

1005
00:41:50,480 --> 00:41:53,359
there are ways uh

1006
00:41:53,359 --> 00:41:56,240
for people to do this to not do it

1007
00:41:56,240 --> 00:41:57,440
naively

1008
00:41:57,440 --> 00:41:59,760
uh and not approach this in a way that

1009
00:41:59,760 --> 00:42:01,680
uh that leads people to believe oh

1010
00:42:01,680 --> 00:42:04,000
symmetric is easier therefore i'll just

1011
00:42:04,000 --> 00:42:05,520
do that everywhere

1012
00:42:05,520 --> 00:42:08,319
um and we wanted to get away from

1013
00:42:08,319 --> 00:42:10,560
defaulting to shared secrets in the way

1014
00:42:10,560 --> 00:42:12,560
that oauth2 does

1015
00:42:12,560 --> 00:42:14,560
now oauth2 defaults not only to shared

1016
00:42:14,560 --> 00:42:17,839
secrets but shared bearer secrets uh

1017
00:42:17,839 --> 00:42:19,440
which is even worse

1018
00:42:19,440 --> 00:42:21,280
but um

1019
00:42:21,280 --> 00:42:22,800
so we're at least we're at least away

1020
00:42:22,800 --> 00:42:24,000
from that

1021
00:42:24,000 --> 00:42:25,920
uh however

1022
00:42:25,920 --> 00:42:27,680
there are some

1023
00:42:27,680 --> 00:42:30,319
big drawbacks to using symmetric crypto

1024
00:42:30,319 --> 00:42:32,319
but there are enough compelling use

1025
00:42:32,319 --> 00:42:33,359
cases

1026
00:42:33,359 --> 00:42:36,240
uh where it would be useful to do that

1027
00:42:36,240 --> 00:42:37,920
the editors are very interested to see

1028
00:42:37,920 --> 00:42:40,520
how something like um

1029
00:42:40,520 --> 00:42:43,520
hpke hk the hybrid

1030
00:42:43,520 --> 00:42:46,400
key thing from cfc

1031
00:42:46,400 --> 00:42:49,119
cfrg wow alphabet soup sorry

1032
00:42:49,119 --> 00:42:50,880
um

1033
00:42:50,880 --> 00:42:54,000
uh the the hybrid key uh hybrid public

1034
00:42:54,000 --> 00:42:58,240
key encryption hpke there it is um

1035
00:42:58,240 --> 00:43:02,079
could be used uh as a key derivation

1036
00:43:02,079 --> 00:43:04,240
mechanism inside of knapp and how that

1037
00:43:04,240 --> 00:43:06,480
could be potentially signaled on top of

1038
00:43:06,480 --> 00:43:08,640
the existing um

1039
00:43:08,640 --> 00:43:10,800
crypto methods because that's

1040
00:43:10,800 --> 00:43:14,319
really a key agreement method um

1041
00:43:14,319 --> 00:43:17,040
but uh we we haven't profiled that we

1042
00:43:17,040 --> 00:43:19,599
haven't seen anybody profile that yet um

1043
00:43:19,599 --> 00:43:21,280
i think it would be really interesting

1044
00:43:21,280 --> 00:43:23,520
to see where that might go

1045
00:43:23,520 --> 00:43:24,839
um

1046
00:43:24,839 --> 00:43:27,680
so pause here for a moment on symmetric

1047
00:43:27,680 --> 00:43:30,160
crypto

1048
00:43:36,240 --> 00:43:38,640
nobody's running to the mic

1049
00:43:38,640 --> 00:43:40,880
thank you all right the next thing that

1050
00:43:40,880 --> 00:43:44,240
we changed is we used to have this thing

1051
00:43:44,240 --> 00:43:46,800
called a user handle

1052
00:43:46,800 --> 00:43:48,640
um and the idea with this is that this

1053
00:43:48,640 --> 00:43:50,640
was a special piece of information that

1054
00:43:50,640 --> 00:43:52,960
the client instance had

1055
00:43:52,960 --> 00:43:56,480
that it could send to the as to say hey

1056
00:43:56,480 --> 00:43:58,560
as far as i know

1057
00:43:58,560 --> 00:44:01,040
this is the same user that has been here

1058
00:44:01,040 --> 00:44:02,640
in the past

1059
00:44:02,640 --> 00:44:04,880
um that's something that it kind of came

1060
00:44:04,880 --> 00:44:06,960
in from uma and

1061
00:44:06,960 --> 00:44:10,079
um with the persistent claims token

1062
00:44:10,079 --> 00:44:13,520
um but knapp goes a lot further in

1063
00:44:13,520 --> 00:44:16,640
handling the identity uh and user-facing

1064
00:44:16,640 --> 00:44:18,000
stuff

1065
00:44:18,000 --> 00:44:23,119
what we have now um is a way to exchange

1066
00:44:23,119 --> 00:44:26,880
opaque identifiers uh using the uh the

1067
00:44:26,880 --> 00:44:29,040
subject identifier format from the

1068
00:44:29,040 --> 00:44:30,960
security events working group

1069
00:44:30,960 --> 00:44:34,560
um these opaque identifiers we realized

1070
00:44:34,560 --> 00:44:35,760
a bit ago

1071
00:44:35,760 --> 00:44:39,440
give us all of the power of this uh of

1072
00:44:39,440 --> 00:44:41,760
this special user handle construct that

1073
00:44:41,760 --> 00:44:43,680
we had had previously

1074
00:44:43,680 --> 00:44:44,720
um

1075
00:44:44,720 --> 00:44:47,599
but without inventing something new

1076
00:44:47,599 --> 00:44:48,880
so

1077
00:44:48,880 --> 00:44:51,760
what we ended up doing was we took out

1078
00:44:51,760 --> 00:44:53,520
that part of the protocol but didn't

1079
00:44:53,520 --> 00:44:56,319
actually lose any of the functionality

1080
00:44:56,319 --> 00:44:59,359
um of being of allowing the client to

1081
00:44:59,359 --> 00:45:01,440
say hey as far as i know it's the same

1082
00:45:01,440 --> 00:45:04,720
user because now the client can be told

1083
00:45:04,720 --> 00:45:07,200
this user has this identifier according

1084
00:45:07,200 --> 00:45:08,880
to me the as

1085
00:45:08,880 --> 00:45:11,520
and the client can just echo back hi as

1086
00:45:11,520 --> 00:45:14,480
as far as i know it's the same person

1087
00:45:14,480 --> 00:45:17,359
now the as can take that and as with

1088
00:45:17,359 --> 00:45:20,000
anything in the in the user section of

1089
00:45:20,000 --> 00:45:22,800
the of the request it can either

1090
00:45:22,800 --> 00:45:24,400
trust that the client is probably

1091
00:45:24,400 --> 00:45:25,839
telling the truth there and the client's

1092
00:45:25,839 --> 00:45:28,240
probably correct or it can say i don't

1093
00:45:28,240 --> 00:45:30,000
believe you and i need to talk to the

1094
00:45:30,000 --> 00:45:31,760
user myself and that's where the whole

1095
00:45:31,760 --> 00:45:33,599
interaction thing falls through

1096
00:45:33,599 --> 00:45:35,599
and um

1097
00:45:35,599 --> 00:45:37,760
but this is this is just one of the ways

1098
00:45:37,760 --> 00:45:40,240
that we've been able to kind of um

1099
00:45:40,240 --> 00:45:41,760
shrink the protocol a bit without

1100
00:45:41,760 --> 00:45:43,920
shrinking what it's capable of doing

1101
00:45:43,920 --> 00:45:45,520
we've been able if you if you've been

1102
00:45:45,520 --> 00:45:47,280
watching uh the changes of the protocol

1103
00:45:47,280 --> 00:45:48,640
over the last

1104
00:45:48,640 --> 00:45:52,240
six to nine months or so um you you've

1105
00:45:52,240 --> 00:45:53,920
probably seen we've been doing a lot of

1106
00:45:53,920 --> 00:45:55,839
that we've been uh cutting out a lot of

1107
00:45:55,839 --> 00:45:58,240
these like little special pieces

1108
00:45:58,240 --> 00:46:00,560
and uh we've been able to use just sort

1109
00:46:00,560 --> 00:46:02,400
of the core functions of the protocol in

1110
00:46:02,400 --> 00:46:05,760
ways that still make sense

1111
00:46:05,760 --> 00:46:07,040
um

1112
00:46:07,040 --> 00:46:09,839
part of that is that we now removed

1113
00:46:09,839 --> 00:46:11,520
there was this whole

1114
00:46:11,520 --> 00:46:12,960
handle

1115
00:46:12,960 --> 00:46:16,319
discussion uh because the original

1116
00:46:16,319 --> 00:46:17,680
uh

1117
00:46:17,680 --> 00:46:18,640
id

1118
00:46:18,640 --> 00:46:19,760
uh

1119
00:46:19,760 --> 00:46:21,599
that i had called xyz

1120
00:46:21,599 --> 00:46:23,920
um had all sorts of different handles

1121
00:46:23,920 --> 00:46:26,079
for all sorts of different things

1122
00:46:26,079 --> 00:46:29,680
so this user handle is now this opaque

1123
00:46:29,680 --> 00:46:32,640
identifier uh about about the subject

1124
00:46:32,640 --> 00:46:35,119
the subject identifier the resource

1125
00:46:35,119 --> 00:46:37,280
handle that now is information that

1126
00:46:37,280 --> 00:46:39,920
comes from the resource server um and

1127
00:46:39,920 --> 00:46:40,960
that's something that's covered by the

1128
00:46:40,960 --> 00:46:42,560
resource server draft

1129
00:46:42,560 --> 00:46:44,240
now the last thing that we have is also

1130
00:46:44,240 --> 00:46:45,920
no longer called handle it's the client

1131
00:46:45,920 --> 00:46:47,599
instance identifier

1132
00:46:47,599 --> 00:46:48,480
um

1133
00:46:48,480 --> 00:46:50,560
and so we're actually wondering

1134
00:46:50,560 --> 00:46:52,960
could we even simplify that

1135
00:46:52,960 --> 00:46:55,040
we have an open issue

1136
00:46:55,040 --> 00:46:57,440
for um

1137
00:46:57,440 --> 00:46:59,680
trying to figure out uh

1138
00:46:59,680 --> 00:47:02,079
dynamic client registration management

1139
00:47:02,079 --> 00:47:04,240
over time and that kind of stuff

1140
00:47:04,240 --> 00:47:06,160
this is really where this type of

1141
00:47:06,160 --> 00:47:09,200
instance identifier really comes to play

1142
00:47:09,200 --> 00:47:11,599
as a reminder this is an identifier that

1143
00:47:11,599 --> 00:47:14,160
the client can use in lieu of presenting

1144
00:47:14,160 --> 00:47:16,079
its key by value

1145
00:47:16,079 --> 00:47:17,680
and all of its sort of display

1146
00:47:17,680 --> 00:47:21,680
information by value that the as can

1147
00:47:21,680 --> 00:47:24,079
dereference however it likes to figure

1148
00:47:24,079 --> 00:47:26,559
out that this is the piece of software

1149
00:47:26,559 --> 00:47:28,160
or the instance of software that's

1150
00:47:28,160 --> 00:47:29,920
calling me right now

1151
00:47:29,920 --> 00:47:31,200
so we have a way for that to be

1152
00:47:31,200 --> 00:47:33,440
provisioned dynamically sort of built

1153
00:47:33,440 --> 00:47:35,760
into gnab

1154
00:47:35,760 --> 00:47:36,559
but

1155
00:47:36,559 --> 00:47:38,319
could that actually be leveraged to do

1156
00:47:38,319 --> 00:47:40,400
things like allow the client to update

1157
00:47:40,400 --> 00:47:42,800
itself over time allow the client to

1158
00:47:42,800 --> 00:47:44,480
rotate its keys over time we'll get to

1159
00:47:44,480 --> 00:47:46,880
that in just a moment um so we think

1160
00:47:46,880 --> 00:47:47,839
that there's

1161
00:47:47,839 --> 00:47:49,119
there's more that we can do with this

1162
00:47:49,119 --> 00:47:51,680
that would actually simplify this entire

1163
00:47:51,680 --> 00:47:54,319
handle discussion even further by using

1164
00:47:54,319 --> 00:47:55,839
mechanisms that are

1165
00:47:55,839 --> 00:47:58,000
really already built into

1166
00:47:58,000 --> 00:48:01,520
the the protocol itself

1167
00:48:01,760 --> 00:48:03,680
all right

1168
00:48:03,680 --> 00:48:07,280
now on to the formal security analysis

1169
00:48:07,280 --> 00:48:08,960
um

1170
00:48:08,960 --> 00:48:12,720
and uh this is something that uh that

1171
00:48:12,720 --> 00:48:16,160
the editors received an email about

1172
00:48:16,160 --> 00:48:17,359
these are a couple of things that the

1173
00:48:17,359 --> 00:48:19,599
editors received an email about uh some

1174
00:48:19,599 --> 00:48:21,520
researchers um

1175
00:48:21,520 --> 00:48:24,079
i'm terrible with names but it's florian

1176
00:48:24,079 --> 00:48:26,000
hemmerschmidt

1177
00:48:26,000 --> 00:48:28,240
i think it's not personal i'm honestly

1178
00:48:28,240 --> 00:48:30,000
just really bad with names and

1179
00:48:30,000 --> 00:48:33,359
colleagues uh were um

1180
00:48:33,359 --> 00:48:35,920
we're doing analysis of

1181
00:48:35,920 --> 00:48:37,920
of gnapp in light of

1182
00:48:37,920 --> 00:48:39,599
a lot of analysis taking basically

1183
00:48:39,599 --> 00:48:41,119
applying a lot of analysis that's been

1184
00:48:41,119 --> 00:48:45,040
done to oauth and uh related protocols

1185
00:48:45,040 --> 00:48:46,240
and so

1186
00:48:46,240 --> 00:48:47,680
um

1187
00:48:47,680 --> 00:48:49,599
with this they have figured out that

1188
00:48:49,599 --> 00:48:53,040
there are some ways to exploit knapp um

1189
00:48:53,040 --> 00:48:55,280
that are uh that do carry over from

1190
00:48:55,280 --> 00:48:57,839
oauth um this shouldn't be particularly

1191
00:48:57,839 --> 00:48:59,760
surprising there's a lot of uh there's a

1192
00:48:59,760 --> 00:49:02,400
lot of similarities um

1193
00:49:02,400 --> 00:49:05,359
and so now it's our job as a working

1194
00:49:05,359 --> 00:49:07,440
group to figure out what our

1195
00:49:07,440 --> 00:49:09,599
mitigations for these are going to be

1196
00:49:09,599 --> 00:49:11,359
and uh before i go into this i want to

1197
00:49:11,359 --> 00:49:12,960
remind everybody that the mitigation

1198
00:49:12,960 --> 00:49:17,040
could uh can be um a change in the

1199
00:49:17,040 --> 00:49:19,599
protocol it can be a

1200
00:49:19,599 --> 00:49:22,319
uh behavior recommendation you know

1201
00:49:22,319 --> 00:49:24,000
don't do this bad thing that leads to

1202
00:49:24,000 --> 00:49:25,680
this bad situation

1203
00:49:25,680 --> 00:49:29,040
um or it could just be a heads up if

1204
00:49:29,040 --> 00:49:30,880
you're going to use this option this is

1205
00:49:30,880 --> 00:49:32,720
something you need to worry about

1206
00:49:32,720 --> 00:49:34,960
right

1207
00:49:34,960 --> 00:49:36,559
so the first of these is called the

1208
00:49:36,559 --> 00:49:39,520
cuckoo token attack

1209
00:49:39,760 --> 00:49:42,000
the preconditions for this attack

1210
00:49:42,000 --> 00:49:44,720
are that the client instance is um

1211
00:49:44,720 --> 00:49:47,200
talking to is able to talk to two

1212
00:49:47,200 --> 00:49:49,599
authorization servers which in geneapp

1213
00:49:49,599 --> 00:49:50,319
is

1214
00:49:50,319 --> 00:49:52,000
not crazy given sort of the dynamic

1215
00:49:52,000 --> 00:49:54,960
first nature of the protocol um

1216
00:49:54,960 --> 00:49:56,800
but the client has decided to use the

1217
00:49:56,800 --> 00:49:58,640
same keys when talking to both

1218
00:49:58,640 --> 00:50:00,319
authorization servers

1219
00:50:00,319 --> 00:50:02,079
again this is a pretty reasonable naive

1220
00:50:02,079 --> 00:50:03,920
implementation of a client instance you

1221
00:50:03,920 --> 00:50:05,760
generate one key and just use that

1222
00:50:05,760 --> 00:50:08,160
everywhere

1223
00:50:08,480 --> 00:50:11,359
the interesting thing here is that the

1224
00:50:11,359 --> 00:50:14,400
client instance gets tricked into using

1225
00:50:14,400 --> 00:50:16,880
the attacker's authorization server

1226
00:50:16,880 --> 00:50:18,640
in order to get a token for a particular

1227
00:50:18,640 --> 00:50:20,400
resource server

1228
00:50:20,400 --> 00:50:22,720
so this can happen in a multitude of

1229
00:50:22,720 --> 00:50:25,200
different configuration ways

1230
00:50:25,200 --> 00:50:27,040
we saw this

1231
00:50:27,040 --> 00:50:29,680
in various flavors of mix-up attack in

1232
00:50:29,680 --> 00:50:32,000
uh against openid connect where

1233
00:50:32,000 --> 00:50:34,160
somebody points to the token endpoint of

1234
00:50:34,160 --> 00:50:35,839
the attacker server and the user info

1235
00:50:35,839 --> 00:50:40,400
endpoint of of the legitimate server

1236
00:50:40,400 --> 00:50:42,000
for example

1237
00:50:42,000 --> 00:50:42,880
um

1238
00:50:42,880 --> 00:50:45,359
and the interesting thing here

1239
00:50:45,359 --> 00:50:47,599
is that this attack actually works for

1240
00:50:47,599 --> 00:50:50,400
keybound access tokens it doesn't assume

1241
00:50:50,400 --> 00:50:53,040
um bearer tokens

1242
00:50:53,040 --> 00:50:56,240
um what happens is that the attacker

1243
00:50:56,240 --> 00:50:58,319
manages to get a hold of a keybound

1244
00:50:58,319 --> 00:51:00,240
access token but not the keys for that

1245
00:51:00,240 --> 00:51:01,599
token

1246
00:51:01,599 --> 00:51:03,839
and then they replay that token to the

1247
00:51:03,839 --> 00:51:05,920
client to the same client

1248
00:51:05,920 --> 00:51:09,040
from their own authorization server

1249
00:51:09,040 --> 00:51:11,200
um in order to

1250
00:51:11,200 --> 00:51:12,240
uh

1251
00:51:12,240 --> 00:51:14,319
in order to trick the client

1252
00:51:14,319 --> 00:51:16,800
into using that token

1253
00:51:16,800 --> 00:51:19,839
with the key at the honest authors at

1254
00:51:19,839 --> 00:51:22,079
the honest resource server for the

1255
00:51:22,079 --> 00:51:23,760
attacker

1256
00:51:23,760 --> 00:51:24,800
right

1257
00:51:24,800 --> 00:51:26,079
um

1258
00:51:26,079 --> 00:51:26,880
this

1259
00:51:26,880 --> 00:51:28,160
makes a little bit more sense in a

1260
00:51:28,160 --> 00:51:30,720
diagram

1261
00:51:30,800 --> 00:51:31,680
the

1262
00:51:31,680 --> 00:51:34,880
access token here probably represents an

1263
00:51:34,880 --> 00:51:37,200
end user that is not the attacker

1264
00:51:37,200 --> 00:51:38,800
but the attacker has control over the

1265
00:51:38,800 --> 00:51:40,720
client instance in this case so this

1266
00:51:40,720 --> 00:51:42,960
client instance is probably something

1267
00:51:42,960 --> 00:51:45,599
that talks to multiple users as well

1268
00:51:45,599 --> 00:51:47,680
something like a web server or something

1269
00:51:47,680 --> 00:51:49,440
like that where it's using the same key

1270
00:51:49,440 --> 00:51:51,680
to talk to multiple asses

1271
00:51:51,680 --> 00:51:53,680
so the attacker goes and pokes the

1272
00:51:53,680 --> 00:51:55,440
client instance and says

1273
00:51:55,440 --> 00:51:56,559
um

1274
00:51:56,559 --> 00:51:59,839
go talk to my compromised as

1275
00:51:59,839 --> 00:52:01,920
and the client instance does so and it

1276
00:52:01,920 --> 00:52:04,800
makes it makes its request and then the

1277
00:52:04,800 --> 00:52:07,920
attacker's ask says hey use this access

1278
00:52:07,920 --> 00:52:10,559
token with your key

1279
00:52:10,559 --> 00:52:13,280
the trick is that that access token

1280
00:52:13,280 --> 00:52:15,440
is the token that the attacker stole

1281
00:52:15,440 --> 00:52:16,880
from somebody else's account now the

1282
00:52:16,880 --> 00:52:18,720
attacker can't use it on their own they

1283
00:52:18,720 --> 00:52:21,040
don't have the keys to just start using

1284
00:52:21,040 --> 00:52:23,359
it so they need to trick the client

1285
00:52:23,359 --> 00:52:26,480
instance to use it for them

1286
00:52:26,480 --> 00:52:28,559
so now that now the attacker has a

1287
00:52:28,559 --> 00:52:30,240
client instance in it that's in a state

1288
00:52:30,240 --> 00:52:32,880
where it's got the stolen access token

1289
00:52:32,880 --> 00:52:35,520
that it's going to use with its own keys

1290
00:52:35,520 --> 00:52:37,280
and then it's going to use that at the

1291
00:52:37,280 --> 00:52:39,920
resource server to get stuff

1292
00:52:39,920 --> 00:52:42,319
representing whatever that access token

1293
00:52:42,319 --> 00:52:44,559
was good for that the attacker doesn't

1294
00:52:44,559 --> 00:52:46,880
actually have access to

1295
00:52:46,880 --> 00:52:49,119
now remember the attacker controls the

1296
00:52:49,119 --> 00:52:52,079
this as in the red over on the right so

1297
00:52:52,079 --> 00:52:54,880
you know they're not getting uh

1298
00:52:54,880 --> 00:52:56,079
you know they're they're not really

1299
00:52:56,079 --> 00:52:57,760
being prompted for approval and all of

1300
00:52:57,760 --> 00:52:59,839
this other stuff it's it's their server

1301
00:52:59,839 --> 00:53:01,760
um and it's spitting out the stolen

1302
00:53:01,760 --> 00:53:03,520
access token that then is getting used

1303
00:53:03,520 --> 00:53:06,319
on the resource which is then releasing

1304
00:53:06,319 --> 00:53:08,720
that in the context of of the client

1305
00:53:08,720 --> 00:53:12,319
instance that the attacker controls

1306
00:53:12,319 --> 00:53:13,280
right

1307
00:53:13,280 --> 00:53:15,359
um so

1308
00:53:15,359 --> 00:53:16,480
this

1309
00:53:16,480 --> 00:53:17,839
is a problem

1310
00:53:17,839 --> 00:53:19,680
uh the editors have uh looked through

1311
00:53:19,680 --> 00:53:22,000
this and talked uh talked with us a bit

1312
00:53:22,000 --> 00:53:23,280
um

1313
00:53:23,280 --> 00:53:26,640
uh about this with uh the researchers

1314
00:53:26,640 --> 00:53:29,119
and these are the proposed uh

1315
00:53:29,119 --> 00:53:30,400
mitigations

1316
00:53:30,400 --> 00:53:32,400
uh we're not now to be clear we're not

1317
00:53:32,400 --> 00:53:34,640
saying do all of these um

1318
00:53:34,640 --> 00:53:36,240
but these are possible things that we

1319
00:53:36,240 --> 00:53:38,480
can do

1320
00:53:38,480 --> 00:53:41,680
now the client could send an identifier

1321
00:53:41,680 --> 00:53:43,920
to the resource server that says not

1322
00:53:43,920 --> 00:53:46,160
only is this the token this is the

1323
00:53:46,160 --> 00:53:48,319
authorization server that i got it from

1324
00:53:48,319 --> 00:53:50,319
this is the mitigation that is proposed

1325
00:53:50,319 --> 00:53:52,960
in the paper uh

1326
00:53:52,960 --> 00:53:55,040
on oauth

1327
00:53:55,040 --> 00:53:57,280
this is a protocol change uh for token

1328
00:53:57,280 --> 00:53:58,559
presentation

1329
00:53:58,559 --> 00:54:00,400
uh the client does have to track and

1330
00:54:00,400 --> 00:54:02,240
send more data each time

1331
00:54:02,240 --> 00:54:04,319
um and the rs now actually has to check

1332
00:54:04,319 --> 00:54:06,960
these for consistency so it needs to

1333
00:54:06,960 --> 00:54:08,960
know that this is a token and that this

1334
00:54:08,960 --> 00:54:10,880
came from a specific authorization

1335
00:54:10,880 --> 00:54:11,839
server

1336
00:54:11,839 --> 00:54:13,119
and things like that that might not

1337
00:54:13,119 --> 00:54:15,359
always be tenable for a given uh

1338
00:54:15,359 --> 00:54:16,800
resource server

1339
00:54:16,800 --> 00:54:19,359
uh depending on

1340
00:54:19,359 --> 00:54:21,920
you know network latencies and um and

1341
00:54:21,920 --> 00:54:24,720
topologies and other things like that

1342
00:54:24,720 --> 00:54:26,480
the biggest downside to this mitigation

1343
00:54:26,480 --> 00:54:28,559
is that it is protocol change and more

1344
00:54:28,559 --> 00:54:29,839
moving parts that would need to be

1345
00:54:29,839 --> 00:54:31,599
tracked

1346
00:54:31,599 --> 00:54:33,760
the next mitigation would be

1347
00:54:33,760 --> 00:54:35,599
to tell the client to use different keys

1348
00:54:35,599 --> 00:54:37,680
with every authorization server

1349
00:54:37,680 --> 00:54:39,599
this might honestly just boil down to

1350
00:54:39,599 --> 00:54:41,520
this is actually a best security best

1351
00:54:41,520 --> 00:54:42,960
practice

1352
00:54:42,960 --> 00:54:45,760
this breaks this attack because when the

1353
00:54:45,760 --> 00:54:48,319
client calls the attacker's ass

1354
00:54:48,319 --> 00:54:51,440
it uses a different key

1355
00:54:51,440 --> 00:54:52,400
and so

1356
00:54:52,400 --> 00:54:55,680
when um the resource server sees that

1357
00:54:55,680 --> 00:54:57,359
access token

1358
00:54:57,359 --> 00:54:59,280
it's going to be checking it against the

1359
00:54:59,280 --> 00:55:01,520
key that it was issued

1360
00:55:01,520 --> 00:55:03,200
against from

1361
00:55:03,200 --> 00:55:05,119
the good authorization server which the

1362
00:55:05,119 --> 00:55:06,960
client won't be using it'll be using a

1363
00:55:06,960 --> 00:55:08,799
different key to sign that and so the

1364
00:55:08,799 --> 00:55:10,880
resource server will just

1365
00:55:10,880 --> 00:55:13,599
naturally reject this this is something

1366
00:55:13,599 --> 00:55:15,040
that

1367
00:55:15,040 --> 00:55:17,760
is mostly security consideration could

1368
00:55:17,760 --> 00:55:19,680
even be normative text

1369
00:55:19,680 --> 00:55:22,000
for you know a client instance must use

1370
00:55:22,000 --> 00:55:24,480
different keys uh somewhere in the up in

1371
00:55:24,480 --> 00:55:26,559
the keys and security section but for

1372
00:55:26,559 --> 00:55:27,760
the most part it would be a security

1373
00:55:27,760 --> 00:55:30,240
best practice that we would tell

1374
00:55:30,240 --> 00:55:32,839
client developers to do

1375
00:55:32,839 --> 00:55:36,480
um the next uh mitigation would be for

1376
00:55:36,480 --> 00:55:39,680
the client to have a very strong binding

1377
00:55:39,680 --> 00:55:41,200
between a resource server and an

1378
00:55:41,200 --> 00:55:42,880
authorization server

1379
00:55:42,880 --> 00:55:43,760
um

1380
00:55:43,760 --> 00:55:45,440
this stops the attack because now the

1381
00:55:45,440 --> 00:55:47,359
attacker can't convince the client to

1382
00:55:47,359 --> 00:55:50,480
use the attacker's authorization server

1383
00:55:50,480 --> 00:55:51,760
again this is largely security

1384
00:55:51,760 --> 00:55:53,359
consideration

1385
00:55:53,359 --> 00:55:54,480
there are

1386
00:55:54,480 --> 00:55:55,839
some discovery

1387
00:55:55,839 --> 00:55:57,599
runtime discovery aspects that can help

1388
00:55:57,599 --> 00:56:00,799
this so the rs first

1389
00:56:00,799 --> 00:56:02,640
data dataflow for example

1390
00:56:02,640 --> 00:56:04,640
um

1391
00:56:04,640 --> 00:56:06,640
we the editors would like feedback from

1392
00:56:06,640 --> 00:56:08,720
the working group we will bring this uh

1393
00:56:08,720 --> 00:56:10,960
to the list with more details uh for

1394
00:56:10,960 --> 00:56:13,520
consideration um at the moment the

1395
00:56:13,520 --> 00:56:17,040
editors are leaning towards um adding uh

1396
00:56:17,040 --> 00:56:19,440
text for the bottom two bullets uh in

1397
00:56:19,440 --> 00:56:20,640
order to

1398
00:56:20,640 --> 00:56:21,599
um

1399
00:56:21,599 --> 00:56:24,000
mitigate this particular attack

1400
00:56:24,000 --> 00:56:25,119
um

1401
00:56:25,119 --> 00:56:27,680
before we move on

1402
00:56:27,680 --> 00:56:31,440
i see that we have florian with us

1403
00:56:31,440 --> 00:56:33,839
so florian if there's anything you'd

1404
00:56:33,839 --> 00:56:35,920
like to add about the attack or the

1405
00:56:35,920 --> 00:56:38,240
mitigations

1406
00:56:38,240 --> 00:56:42,520
can you please speak up

1407
00:56:44,559 --> 00:56:47,119
i don't have anything to add i think uh

1408
00:56:47,119 --> 00:56:50,319
he explained it quite well

1409
00:56:50,319 --> 00:56:51,920
thank you florian

1410
00:56:51,920 --> 00:56:54,160
yeah

1411
00:56:54,400 --> 00:56:56,960
thank you and um

1412
00:56:56,960 --> 00:56:59,359
and uh just just as a side note just as

1413
00:56:59,359 --> 00:57:01,680
we did with the uh the mix-up attack

1414
00:57:01,680 --> 00:57:03,839
that was uh previously discussed here in

1415
00:57:03,839 --> 00:57:06,799
the working group uh once this is a

1416
00:57:06,799 --> 00:57:09,119
you know once this is a published paper

1417
00:57:09,119 --> 00:57:11,680
uh we will gladly add it as a an

1418
00:57:11,680 --> 00:57:14,079
informative reference in the document

1419
00:57:14,079 --> 00:57:16,240
and link to it from the uh security

1420
00:57:16,240 --> 00:57:18,880
consideration sections

1421
00:57:18,880 --> 00:57:20,079
all right

1422
00:57:20,079 --> 00:57:23,040
next up is just an http

1423
00:57:23,040 --> 00:57:26,720
weirdness mechanical attack um it's it's

1424
00:57:26,720 --> 00:57:29,839
known against uh oauth2 and is already

1425
00:57:29,839 --> 00:57:32,480
being incorporated to oauth 2.1 so we

1426
00:57:32,480 --> 00:57:35,119
honestly just just need to do this

1427
00:57:35,119 --> 00:57:37,040
um

1428
00:57:37,040 --> 00:57:40,079
if you're using an http 307 there are

1429
00:57:40,079 --> 00:57:41,520
cases where

1430
00:57:41,520 --> 00:57:44,079
it will cause uh a post

1431
00:57:44,079 --> 00:57:46,960
that was sent with a 307 being sent back

1432
00:57:46,960 --> 00:57:48,880
to be reposted

1433
00:57:48,880 --> 00:57:50,079
to

1434
00:57:50,079 --> 00:57:52,240
the page that you're sent to

1435
00:57:52,240 --> 00:57:54,640
the page that you're redirected to and

1436
00:57:54,640 --> 00:57:56,960
depending on how you've implemented your

1437
00:57:56,960 --> 00:57:58,240
site

1438
00:57:58,240 --> 00:57:59,200
um

1439
00:57:59,200 --> 00:58:02,319
this can leak information in including

1440
00:58:02,319 --> 00:58:04,000
credentials

1441
00:58:04,000 --> 00:58:06,480
uh user credentials

1442
00:58:06,480 --> 00:58:09,680
so say for example um just give you an

1443
00:58:09,680 --> 00:58:12,319
idea how how serious this could be um

1444
00:58:12,319 --> 00:58:14,319
say for example you've got things set up

1445
00:58:14,319 --> 00:58:15,520
so that

1446
00:58:15,520 --> 00:58:19,359
you have a a form page that has that

1447
00:58:19,359 --> 00:58:20,880
prompts the user for

1448
00:58:20,880 --> 00:58:22,559
just keeping it simple a username and

1449
00:58:22,559 --> 00:58:23,760
password

1450
00:58:23,760 --> 00:58:24,880
and

1451
00:58:24,880 --> 00:58:27,040
ask them whether or not they they

1452
00:58:27,040 --> 00:58:28,079
approve

1453
00:58:28,079 --> 00:58:30,319
the decision

1454
00:58:30,319 --> 00:58:32,960
you submit that as a form

1455
00:58:32,960 --> 00:58:35,520
the as processes all of that all in one

1456
00:58:35,520 --> 00:58:36,400
go

1457
00:58:36,400 --> 00:58:38,319
and says yep that's correct i'm going to

1458
00:58:38,319 --> 00:58:40,960
return you to the client instance and

1459
00:58:40,960 --> 00:58:42,240
i'm going to use

1460
00:58:42,240 --> 00:58:45,680
a an http 307

1461
00:58:45,680 --> 00:58:46,960
and

1462
00:58:46,960 --> 00:58:49,040
it does so

1463
00:58:49,040 --> 00:58:50,559
at that point

1464
00:58:50,559 --> 00:58:52,000
your browser

1465
00:58:52,000 --> 00:58:54,400
could actually take everything from that

1466
00:58:54,400 --> 00:58:56,880
form including the username and password

1467
00:58:56,880 --> 00:58:59,359
and send it as a post

1468
00:58:59,359 --> 00:59:00,880
back to

1469
00:59:00,880 --> 00:59:02,319
the client

1470
00:59:02,319 --> 00:59:04,799
which means we have now leaked

1471
00:59:04,799 --> 00:59:07,920
uh the end users credentials to the

1472
00:59:07,920 --> 00:59:10,319
client software which is one of the main

1473
00:59:10,319 --> 00:59:12,000
things that delegation protocols are

1474
00:59:12,000 --> 00:59:14,960
trying to stop happening

1475
00:59:14,960 --> 00:59:16,720
so we need to be stricter about which

1476
00:59:16,720 --> 00:59:18,880
http things are allowed to be used on

1477
00:59:18,880 --> 00:59:21,040
all of the redirect based systems and we

1478
00:59:21,040 --> 00:59:23,440
need uh security considerations on that

1479
00:59:23,440 --> 00:59:25,760
uh florian's already uh submitted some

1480
00:59:25,760 --> 00:59:28,799
text for uh part of this um we need to

1481
00:59:28,799 --> 00:59:30,880
add the normative uh discussion for this

1482
00:59:30,880 --> 00:59:32,240
as well and the editors need to review

1483
00:59:32,240 --> 00:59:34,640
that pr uh to make sure that all of that

1484
00:59:34,640 --> 00:59:36,319
is in uh all of that is in the right

1485
00:59:36,319 --> 00:59:37,359
place

1486
00:59:37,359 --> 00:59:38,799
um

1487
00:59:38,799 --> 00:59:40,319
pretty straightforward attack and

1488
00:59:40,319 --> 00:59:42,400
mitigation uh for this like i said it's

1489
00:59:42,400 --> 00:59:44,160
well known in the oauth world

1490
00:59:44,160 --> 00:59:45,920
not really surprising here it's just you

1491
00:59:45,920 --> 00:59:46,640
know

1492
00:59:46,640 --> 00:59:49,520
we we didn't have text for it yet

1493
00:59:49,520 --> 00:59:51,599
uh any questions on the formal analysis

1494
00:59:51,599 --> 00:59:54,799
pieces before we move on

1495
00:59:57,040 --> 01:00:00,480
we had the question from padramadron

1496
01:00:00,480 --> 01:00:02,640
okay

1497
01:00:02,640 --> 01:00:04,319
yes hi

1498
01:00:04,319 --> 01:00:07,040
um i have a question on the second

1499
01:00:07,040 --> 01:00:08,400
mitigation

1500
01:00:08,400 --> 01:00:12,480
that you explained on page 17

1501
01:00:12,799 --> 01:00:15,280
so that was to basically use a different

1502
01:00:15,280 --> 01:00:18,640
key for each a s

1503
01:00:18,640 --> 01:00:20,960
and how would that work when using mtls

1504
01:00:20,960 --> 01:00:23,440
for example because um that's basically

1505
01:00:23,440 --> 01:00:26,000
on the tls deck right so that would mean

1506
01:00:26,000 --> 01:00:28,160
that um

1507
01:00:28,160 --> 01:00:30,319
that the client would need a domain for

1508
01:00:30,319 --> 01:00:34,319
each um as right

1509
01:00:34,720 --> 01:00:36,640
um

1510
01:00:36,640 --> 01:00:39,839
yeah so um

1511
01:00:40,640 --> 01:00:42,880
it's it's harder if you're doing mtls

1512
01:00:42,880 --> 01:00:45,280
but not impossible because one of the

1513
01:00:45,280 --> 01:00:46,480
things

1514
01:00:46,480 --> 01:00:49,440
with mtls as it works in canap is that

1515
01:00:49,440 --> 01:00:52,319
you don't necessarily have to use

1516
01:00:52,319 --> 01:00:54,880
um a ca to

1517
01:00:54,880 --> 01:00:59,599
uh to verify the certificate at the rs

1518
01:00:59,599 --> 01:01:01,920
because ultimately all that the rs cares

1519
01:01:01,920 --> 01:01:03,599
about is that the certificate that's

1520
01:01:03,599 --> 01:01:04,880
used

1521
01:01:04,880 --> 01:01:08,079
is the certificate that's being um

1522
01:01:08,079 --> 01:01:10,799
that's being presented uh alongside the

1523
01:01:10,799 --> 01:01:12,160
token

1524
01:01:12,160 --> 01:01:13,839
right is the certificate that's supposed

1525
01:01:13,839 --> 01:01:15,520
to be used with the token

1526
01:01:15,520 --> 01:01:17,839
um you make a very

1527
01:01:17,839 --> 01:01:20,640
good point though that and i'm i'm going

1528
01:01:20,640 --> 01:01:22,640
to write a note right now to make sure

1529
01:01:22,640 --> 01:01:25,520
that we talk about um

1530
01:01:25,520 --> 01:01:28,240
uh different keys

1531
01:01:28,240 --> 01:01:30,480
uh

1532
01:01:30,480 --> 01:01:32,160
in mtls

1533
01:01:32,160 --> 01:01:34,000
as part of that uh security

1534
01:01:34,000 --> 01:01:35,920
consideration thank you for that

1535
01:01:35,920 --> 01:01:37,280
um

1536
01:01:37,280 --> 01:01:40,240
because it is possible but uh mostly if

1537
01:01:40,240 --> 01:01:43,440
you're using uh self-signed certificates

1538
01:01:43,440 --> 01:01:45,839
if you're in an ecosystem whereby

1539
01:01:45,839 --> 01:01:48,079
uh the client has a registered

1540
01:01:48,079 --> 01:01:50,400
certificate or has a pre-registered key

1541
01:01:50,400 --> 01:01:53,119
that all asses will will know which

1542
01:01:53,119 --> 01:01:54,960
happens in a bunch and a lot of

1543
01:01:54,960 --> 01:01:57,760
different ecosystems uh then you know

1544
01:01:57,760 --> 01:01:59,200
you're not going to

1545
01:01:59,200 --> 01:02:02,319
necessarily be able to do this uh this

1546
01:02:02,319 --> 01:02:04,640
mitigation and uh and that does need to

1547
01:02:04,640 --> 01:02:07,680
be called out okay thanks

1548
01:02:07,680 --> 01:02:09,359
all right thank you great question

1549
01:02:09,359 --> 01:02:11,598
though

1550
01:02:13,359 --> 01:02:14,880
believe it or not as an editor i

1551
01:02:14,880 --> 01:02:16,480
actually really love it when people poke

1552
01:02:16,480 --> 01:02:18,880
holes in these things um

1553
01:02:18,880 --> 01:02:20,640
it means people are paying attention in

1554
01:02:20,640 --> 01:02:22,480
the in the right ways

1555
01:02:22,480 --> 01:02:23,599
all right

1556
01:02:23,599 --> 01:02:26,559
so that brings us up to uh yeah we're at

1557
01:02:26,559 --> 01:02:29,039
the top of the hour and we've got some

1558
01:02:29,039 --> 01:02:31,680
items for discussion

1559
01:02:31,680 --> 01:02:34,000
um

1560
01:02:34,000 --> 01:02:37,520
the editors met about um over the last

1561
01:02:37,520 --> 01:02:39,359
few weeks and

1562
01:02:39,359 --> 01:02:42,559
uh this is what we are proposing to do

1563
01:02:42,559 --> 01:02:44,559
so these are kind of the next the next

1564
01:02:44,559 --> 01:02:46,079
major things

1565
01:02:46,079 --> 01:02:48,960
that um that we're going to be doing

1566
01:02:48,960 --> 01:02:51,440
pretty much between now and ietf 113 in

1567
01:02:51,440 --> 01:02:54,000
the spring which hopefully maybe we'll

1568
01:02:54,000 --> 01:02:56,240
see each other in person we'll see

1569
01:02:56,240 --> 01:02:57,760
uh the biggest thing is that we're going

1570
01:02:57,760 --> 01:03:00,000
to continue processing the issue backlog

1571
01:03:00,000 --> 01:03:02,799
um we went through these issues and uh

1572
01:03:02,799 --> 01:03:04,559
realized that there once again were a

1573
01:03:04,559 --> 01:03:07,440
couple of sort of major categories

1574
01:03:07,440 --> 01:03:10,160
um that would each take care of sort of

1575
01:03:10,160 --> 01:03:10,960
a

1576
01:03:10,960 --> 01:03:14,160
you know a a chunk of issues at once

1577
01:03:14,160 --> 01:03:15,680
um and a lot of these are stuff that's

1578
01:03:15,680 --> 01:03:18,640
been sitting around for a long time and

1579
01:03:18,640 --> 01:03:20,160
it's just

1580
01:03:20,160 --> 01:03:21,680
we just need to

1581
01:03:21,680 --> 01:03:23,920
make a decision have a discussion and

1582
01:03:23,920 --> 01:03:25,119
move forward

1583
01:03:25,119 --> 01:03:26,400
or

1584
01:03:26,400 --> 01:03:27,920
have a discussion make a decision and

1585
01:03:27,920 --> 01:03:30,000
move forward that's probably a better

1586
01:03:30,000 --> 01:03:32,559
order um

1587
01:03:32,559 --> 01:03:35,920
and uh we just uh in a lot of cases it's

1588
01:03:35,920 --> 01:03:38,000
the issue is just like should we do a or

1589
01:03:38,000 --> 01:03:40,240
b we need to just

1590
01:03:40,240 --> 01:03:42,720
decide a or b or figure out if there's a

1591
01:03:42,720 --> 01:03:45,520
c out there um

1592
01:03:45,520 --> 01:03:47,440
and i'm going to go through all of these

1593
01:03:47,440 --> 01:03:49,760
uh all of these now

1594
01:03:49,760 --> 01:03:52,720
so ellen by the way please go look at

1595
01:03:52,720 --> 01:03:54,640
the issue trackers there's lots of good

1596
01:03:54,640 --> 01:03:56,079
stuff in there

1597
01:03:56,079 --> 01:03:56,610
um

1598
01:03:56,610 --> 01:03:57,760
[Music]

1599
01:03:57,760 --> 01:04:00,160
first off uh there's a there are a bunch

1600
01:04:00,160 --> 01:04:02,000
of issues that amount to

1601
01:04:02,000 --> 01:04:04,079
what's your what you're allowed to send

1602
01:04:04,079 --> 01:04:06,079
and not allowed to send at each step of

1603
01:04:06,079 --> 01:04:07,359
the process

1604
01:04:07,359 --> 01:04:11,200
um so gnapp defines an api for

1605
01:04:11,200 --> 01:04:15,520
managing these grant requests over time

1606
01:04:15,520 --> 01:04:18,799
and there are a lot of things that are

1607
01:04:18,799 --> 01:04:20,480
that make a lot of sense in the initial

1608
01:04:20,480 --> 01:04:21,599
request

1609
01:04:21,599 --> 01:04:22,559
that

1610
01:04:22,559 --> 01:04:24,000
probably don't make sense in a

1611
01:04:24,000 --> 01:04:26,079
continuation request but we need to

1612
01:04:26,079 --> 01:04:28,559
decide is it not allowed is it undefined

1613
01:04:28,559 --> 01:04:30,400
does it have a specific

1614
01:04:30,400 --> 01:04:32,079
um

1615
01:04:32,079 --> 01:04:33,599
does it does it have a specific

1616
01:04:33,599 --> 01:04:36,319
semantics applied to it if it is allowed

1617
01:04:36,319 --> 01:04:37,359
um

1618
01:04:37,359 --> 01:04:39,839
and we need to kind of come down on what

1619
01:04:39,839 --> 01:04:41,039
makes sense and what doesn't because

1620
01:04:41,039 --> 01:04:42,799
right now we've got this kind of

1621
01:04:42,799 --> 01:04:44,960
large there's a request object there's a

1622
01:04:44,960 --> 01:04:47,200
response object and stuff can just kind

1623
01:04:47,200 --> 01:04:48,319
of show up

1624
01:04:48,319 --> 01:04:50,000
um

1625
01:04:50,000 --> 01:04:53,280
and that leads that type of

1626
01:04:53,280 --> 01:04:55,680
definition leads to

1627
01:04:55,680 --> 01:04:57,839
uh weird corner cases where you end up

1628
01:04:57,839 --> 01:04:59,359
with combinations of things that you

1629
01:04:59,359 --> 01:05:01,039
didn't anticipate

1630
01:05:01,039 --> 01:05:03,760
and we want to make sure that we don't

1631
01:05:03,760 --> 01:05:06,640
have those as much as is possible

1632
01:05:06,640 --> 01:05:07,599
um

1633
01:05:07,599 --> 01:05:09,599
for example are you allowed to send the

1634
01:05:09,599 --> 01:05:12,640
client object on a continuation request

1635
01:05:12,640 --> 01:05:14,000
what does that mean

1636
01:05:14,000 --> 01:05:16,799
does that mean that you are changing the

1637
01:05:16,799 --> 01:05:19,280
display text you are swapping out one

1638
01:05:19,280 --> 01:05:21,280
client for another that shouldn't be

1639
01:05:21,280 --> 01:05:23,520
allowed but what is what does it mean

1640
01:05:23,520 --> 01:05:25,520
to even send this so should this

1641
01:05:25,520 --> 01:05:27,119
actually be disallowed

1642
01:05:27,119 --> 01:05:28,480
when you get back an interaction

1643
01:05:28,480 --> 01:05:30,720
reference from the interaction finish

1644
01:05:30,720 --> 01:05:32,559
method are you allowed to send that

1645
01:05:32,559 --> 01:05:35,520
multiple times or is that a one-time use

1646
01:05:35,520 --> 01:05:37,680
or is that the client can only send it

1647
01:05:37,680 --> 01:05:41,119
once but it's item potent at the as

1648
01:05:41,119 --> 01:05:43,039
the oauth working group is actually

1649
01:05:43,039 --> 01:05:45,119
tackling something very similar with the

1650
01:05:45,119 --> 01:05:47,119
authorization code right now so we're

1651
01:05:47,119 --> 01:05:48,960
also paying attention and getting

1652
01:05:48,960 --> 01:05:52,000
involved in those discussions because a

1653
01:05:52,000 --> 01:05:54,319
lot of the experience of wisdom with

1654
01:05:54,319 --> 01:05:55,200
that

1655
01:05:55,200 --> 01:05:57,760
is getting applied here

1656
01:05:57,760 --> 01:05:59,599
um

1657
01:05:59,599 --> 01:06:02,640
the interaction start methods right now

1658
01:06:02,640 --> 01:06:04,319
kind of say that you're only supposed to

1659
01:06:04,319 --> 01:06:06,240
do it once but

1660
01:06:06,240 --> 01:06:07,039
uh

1661
01:06:07,039 --> 01:06:08,799
that needs to be made a lot clearer

1662
01:06:08,799 --> 01:06:09,599
right

1663
01:06:09,599 --> 01:06:11,280
uh we've got

1664
01:06:11,280 --> 01:06:13,440
probable answers to most of these kinds

1665
01:06:13,440 --> 01:06:14,559
of things

1666
01:06:14,559 --> 01:06:16,799
what we're going to do uh is we're

1667
01:06:16,799 --> 01:06:19,200
encouraging people to go um through the

1668
01:06:19,200 --> 01:06:21,760
issue tracker we're going to go through

1669
01:06:21,760 --> 01:06:24,480
these and propose text

1670
01:06:24,480 --> 01:06:28,400
to close them and get discussion on uh

1671
01:06:28,400 --> 01:06:29,520
sort of

1672
01:06:29,520 --> 01:06:31,680
what closing it in this in a particular

1673
01:06:31,680 --> 01:06:33,440
direction actually means

1674
01:06:33,440 --> 01:06:35,599
and move it forward so these will be

1675
01:06:35,599 --> 01:06:36,640
protocol

1676
01:06:36,640 --> 01:06:39,839
changes but more so making the protocol

1677
01:06:39,839 --> 01:06:41,680
more tightly defined to say that this is

1678
01:06:41,680 --> 01:06:43,119
what you're allowed to do in this in

1679
01:06:43,119 --> 01:06:46,400
this instance

1680
01:06:46,400 --> 01:06:49,039
key rotation it keeps coming up uh in

1681
01:06:49,039 --> 01:06:50,400
all of these conversations we don't have

1682
01:06:50,400 --> 01:06:53,359
a solution for it yet uh except that we

1683
01:06:53,359 --> 01:06:55,119
do have feedback from the working group

1684
01:06:55,119 --> 01:06:57,039
that this is something that we want to

1685
01:06:57,039 --> 01:06:59,760
do the editors have uh

1686
01:06:59,760 --> 01:07:02,240
have come down with what we think is a

1687
01:07:02,240 --> 01:07:04,079
probable direct probably a good

1688
01:07:04,079 --> 01:07:05,920
direction

1689
01:07:05,920 --> 01:07:10,160
and that's to tie the rotation mechanism

1690
01:07:10,160 --> 01:07:13,039
to the key presentation type

1691
01:07:13,039 --> 01:07:15,119
because the way that you

1692
01:07:15,119 --> 01:07:16,720
do the type of

1693
01:07:16,720 --> 01:07:19,359
um you know multiple key presentation

1694
01:07:19,359 --> 01:07:20,960
and sort of signing the keys and stuff

1695
01:07:20,960 --> 01:07:22,480
like that um

1696
01:07:22,480 --> 01:07:25,440
uh ben has a post on the list from

1697
01:07:25,440 --> 01:07:27,440
over a year ago now i think that that

1698
01:07:27,440 --> 01:07:29,359
talks that talks about this

1699
01:07:29,359 --> 01:07:30,240
uh

1700
01:07:30,240 --> 01:07:31,760
the way that you

1701
01:07:31,760 --> 01:07:34,799
present keys in a way that is uh that is

1702
01:07:34,799 --> 01:07:36,000
trustable

1703
01:07:36,000 --> 01:07:38,559
um is going to vary depending on the

1704
01:07:38,559 --> 01:07:41,039
type of key that it is and the type of

1705
01:07:41,039 --> 01:07:43,280
presentation mechanism that you have

1706
01:07:43,280 --> 01:07:44,799
so

1707
01:07:44,799 --> 01:07:46,799
previously one thing that's been kind of

1708
01:07:46,799 --> 01:07:49,039
hanging us up is that the editors have

1709
01:07:49,039 --> 01:07:50,480
been kind of

1710
01:07:50,480 --> 01:07:52,640
waiting or trying to figure out if there

1711
01:07:52,640 --> 01:07:55,520
was this like one grand unified scheme

1712
01:07:55,520 --> 01:07:57,359
of key rotation

1713
01:07:57,359 --> 01:07:58,799
we think that there might not actually

1714
01:07:58,799 --> 01:08:01,920
be that it might be uh simply tied to

1715
01:08:01,920 --> 01:08:02,960
the different

1716
01:08:02,960 --> 01:08:05,039
presentation mechanisms such that with

1717
01:08:05,039 --> 01:08:07,839
http sig you add multiple signatures and

1718
01:08:07,839 --> 01:08:10,400
you sign the key value for as part of

1719
01:08:10,400 --> 01:08:12,079
one of those signatures and then you

1720
01:08:12,079 --> 01:08:14,079
signal that within within the protocol

1721
01:08:14,079 --> 01:08:15,119
itself

1722
01:08:15,119 --> 01:08:18,080
um with jose you can wrap jose objects

1723
01:08:18,080 --> 01:08:20,238
you're probably using jwk's as well so

1724
01:08:20,238 --> 01:08:22,960
you can sign the jwk values with the

1725
01:08:22,960 --> 01:08:25,439
other keys things like that

1726
01:08:25,439 --> 01:08:25,939
um

1727
01:08:25,939 --> 01:08:27,359
[Music]

1728
01:08:27,359 --> 01:08:28,799
what we're going to do is once again

1729
01:08:28,799 --> 01:08:29,920
we're going to

1730
01:08:29,920 --> 01:08:31,520
uh

1731
01:08:31,520 --> 01:08:34,560
propose text that defines these and then

1732
01:08:34,560 --> 01:08:36,479
applies them to all of the different

1733
01:08:36,479 --> 01:08:38,399
places in the protocol that can use key

1734
01:08:38,399 --> 01:08:39,759
rotation

1735
01:08:39,759 --> 01:08:41,679
so for client instances and access

1736
01:08:41,679 --> 01:08:44,080
tokens and grant continuation which is a

1737
01:08:44,080 --> 01:08:45,839
form of access token

1738
01:08:45,839 --> 01:08:47,120
um

1739
01:08:47,120 --> 01:08:49,359
and we're going to try to use as much of

1740
01:08:49,359 --> 01:08:51,520
the existing infrastructure

1741
01:08:51,520 --> 01:08:53,679
that's in the protocol uh as we can in

1742
01:08:53,679 --> 01:08:55,439
order to do this we don't want to invent

1743
01:08:55,439 --> 01:08:59,279
a lot of special stuff uh to handle this

1744
01:08:59,279 --> 01:09:00,960
if we can because we've already got a

1745
01:09:00,960 --> 01:09:02,238
lot of

1746
01:09:02,238 --> 01:09:03,439
um

1747
01:09:03,439 --> 01:09:06,479
complex security pieces in place

1748
01:09:06,479 --> 01:09:08,000
we want to be able to use those we want

1749
01:09:08,000 --> 01:09:10,399
to be able to um to leverage that as

1750
01:09:10,399 --> 01:09:12,080
much as we can

1751
01:09:12,080 --> 01:09:14,319
and um

1752
01:09:14,319 --> 01:09:16,080
so we will propose text

1753
01:09:16,080 --> 01:09:18,000
for these over over the next couple of

1754
01:09:18,000 --> 01:09:21,839
months as we can um in order to

1755
01:09:21,839 --> 01:09:23,600
to kind of get what that uh actually

1756
01:09:23,600 --> 01:09:27,359
looks like uh this uh this does also uh

1757
01:09:27,359 --> 01:09:28,640
touch on this

1758
01:09:28,640 --> 01:09:31,359
same area as before of how do you even

1759
01:09:31,359 --> 01:09:35,120
rotate keys if you're doing mtls uh

1760
01:09:35,120 --> 01:09:36,640
you might just be doing

1761
01:09:36,640 --> 01:09:38,640
pki but if you're doing self-signed

1762
01:09:38,640 --> 01:09:40,000
certs

1763
01:09:40,000 --> 01:09:41,279
how are you even gonna be able to do

1764
01:09:41,279 --> 01:09:43,839
that we're not sure yet but we're gonna

1765
01:09:43,839 --> 01:09:45,600
or maybe that's something you just

1766
01:09:45,600 --> 01:09:48,399
you're not able to do in that case if

1767
01:09:48,399 --> 01:09:49,839
you're using that mechanism that's a

1768
01:09:49,839 --> 01:09:52,000
trade-off um

1769
01:09:52,000 --> 01:09:54,158
that you can't dynamically rotate unless

1770
01:09:54,158 --> 01:09:56,000
there's a clever way to do this that we

1771
01:09:56,000 --> 01:09:57,760
haven't figured out yet

1772
01:09:57,760 --> 01:09:59,840
anyway we're going to be proposing text

1773
01:09:59,840 --> 01:10:02,560
for uh for discussion on that uh look

1774
01:10:02,560 --> 01:10:03,280
for

1775
01:10:03,280 --> 01:10:06,159
pull requests for that

1776
01:10:06,159 --> 01:10:08,000
another very big question that needs to

1777
01:10:08,000 --> 01:10:10,159
be answered uh especially in the core

1778
01:10:10,159 --> 01:10:12,000
protocol is what is mandatory to

1779
01:10:12,000 --> 01:10:14,960
implement

1780
01:10:14,960 --> 01:10:17,199
we have a comment from the queue you oh

1781
01:10:17,199 --> 01:10:19,440
sure

1782
01:10:22,239 --> 01:10:25,440
my thought on this isn't um it's just to

1783
01:10:25,440 --> 01:10:29,120
uh hit on the the key problem have you

1784
01:10:29,120 --> 01:10:31,840
looked at acme and

1785
01:10:31,840 --> 01:10:34,640
i i actually have a client

1786
01:10:34,640 --> 01:10:37,840
draft to do code signing certificates

1787
01:10:37,840 --> 01:10:39,600
but it establishes different

1788
01:10:39,600 --> 01:10:41,840
authentication mechanisms

1789
01:10:41,840 --> 01:10:46,880
the authors of six store so it's um

1790
01:10:46,960 --> 01:10:48,640
being used for code signing certificates

1791
01:10:48,640 --> 01:10:51,120
are looking to add open identity

1792
01:10:51,120 --> 01:10:55,120
into my client draft and so there might

1793
01:10:55,120 --> 01:10:58,719
be while your solution is not the same

1794
01:10:58,719 --> 01:11:02,480
there might be enough ties that

1795
01:11:02,480 --> 01:11:04,480
we could do something for the fast

1796
01:11:04,480 --> 01:11:06,320
issuance of certificate so basically

1797
01:11:06,320 --> 01:11:08,640
they reissue

1798
01:11:08,640 --> 01:11:10,159
the goal for them is to have

1799
01:11:10,159 --> 01:11:12,640
certificates that last a few seconds

1800
01:11:12,640 --> 01:11:15,520
so that in their instance yes and they

1801
01:11:15,520 --> 01:11:17,520
use a transparency log which is already

1802
01:11:17,520 --> 01:11:19,280
present in acme

1803
01:11:19,280 --> 01:11:20,239
um

1804
01:11:20,239 --> 01:11:22,560
so their goal is to have code signing

1805
01:11:22,560 --> 01:11:24,000
certificates

1806
01:11:24,000 --> 01:11:26,800
that are used once

1807
01:11:26,800 --> 01:11:28,080
right and

1808
01:11:28,080 --> 01:11:29,760
so there there could be some ties here

1809
01:11:29,760 --> 01:11:33,280
so i can definitely hook you into that

1810
01:11:33,280 --> 01:11:35,360
and um i actually had already said to

1811
01:11:35,360 --> 01:11:37,280
them if they needed review

1812
01:11:37,280 --> 01:11:39,520
on the open identity pieces that i knew

1813
01:11:39,520 --> 01:11:41,520
somebody which i meant a lot of you on

1814
01:11:41,520 --> 01:11:43,280
this list

1815
01:11:43,280 --> 01:11:44,239
yes

1816
01:11:44,239 --> 01:11:46,880
and i'm i'm guessing that is the draft

1817
01:11:46,880 --> 01:11:48,719
that you emailed me about about the code

1818
01:11:48,719 --> 01:11:50,239
asked me to review

1819
01:11:50,239 --> 01:11:51,760
um

1820
01:11:51,760 --> 01:11:55,360
i haven't read the draft yet uh but uh

1821
01:11:55,360 --> 01:11:56,800
i i

1822
01:11:56,800 --> 01:11:58,800
thank you for that i had uh i had not

1823
01:11:58,800 --> 01:12:00,960
made the acne connection to mtls that is

1824
01:12:00,960 --> 01:12:03,840
a really really good idea um so

1825
01:12:03,840 --> 01:12:06,480
uh if as as much as we can

1826
01:12:06,480 --> 01:12:08,880
point to existing tools existing uh

1827
01:12:08,880 --> 01:12:10,080
structures

1828
01:12:10,080 --> 01:12:11,679
we should do so here we should not be

1829
01:12:11,679 --> 01:12:12,960
inventing

1830
01:12:12,960 --> 01:12:15,760
um special stuff inside of uh inside of

1831
01:12:15,760 --> 01:12:18,239
canap so thank you for that

1832
01:12:18,239 --> 01:12:20,640
i should be getting a text proposal to

1833
01:12:20,640 --> 01:12:23,520
add uh what they need for open identity

1834
01:12:23,520 --> 01:12:27,280
into the client draft so um you can even

1835
01:12:27,280 --> 01:12:28,800
start from there and wait for them to

1836
01:12:28,800 --> 01:12:30,719
provide something and my child because

1837
01:12:30,719 --> 01:12:32,960
i'm taking notes and he's off today is

1838
01:12:32,960 --> 01:12:35,280
eating all of his halloween candy so you

1839
01:12:35,280 --> 01:12:37,280
guys owe me a week thank you because i'm

1840
01:12:37,280 --> 01:12:40,639
gonna have a hypey hit after this

1841
01:12:41,440 --> 01:12:44,400
good luck good luck kathleen

1842
01:12:44,400 --> 01:12:45,199
all right

1843
01:12:45,199 --> 01:12:46,800
thank you for those pointers uh we'll

1844
01:12:46,800 --> 01:12:50,400
definitely look into that uh um i can

1845
01:12:50,400 --> 01:12:52,239
say that the acme didn't come up when

1846
01:12:52,239 --> 01:12:54,239
the editors were uh discussing this so

1847
01:12:54,239 --> 01:12:55,920
thank you for that pointer we will uh

1848
01:12:55,920 --> 01:12:58,000
we'll definitely dig into that uh for

1849
01:12:58,000 --> 01:13:00,480
the uh mtls and really just the

1850
01:13:00,480 --> 01:13:02,960
certificate case in general um

1851
01:13:02,960 --> 01:13:04,960
great idea

1852
01:13:04,960 --> 01:13:06,560
uh

1853
01:13:06,560 --> 01:13:08,719
but this is exactly the kind of thing

1854
01:13:08,719 --> 01:13:10,719
that um

1855
01:13:10,719 --> 01:13:12,159
this is why we want to go in this

1856
01:13:12,159 --> 01:13:14,000
direction um

1857
01:13:14,000 --> 01:13:16,080
of having a different mechanism that's

1858
01:13:16,080 --> 01:13:18,320
tied to the presentation type uh to the

1859
01:13:18,320 --> 01:13:21,600
key presentation type because um

1860
01:13:21,600 --> 01:13:24,560
it allows us to do things like this

1861
01:13:24,560 --> 01:13:27,600
to say like oh you're doing mtls then

1862
01:13:27,600 --> 01:13:28,480
you know

1863
01:13:28,480 --> 01:13:30,159
you've got different considerations

1864
01:13:30,159 --> 01:13:31,360
you've got different tools that are

1865
01:13:31,360 --> 01:13:33,360
available that aren't elsewhere

1866
01:13:33,360 --> 01:13:37,120
um so now that's great

1867
01:13:37,520 --> 01:13:38,960
all right

1868
01:13:38,960 --> 01:13:41,280
so um

1869
01:13:41,280 --> 01:13:43,040
anyone else on the cube

1870
01:13:43,040 --> 01:13:44,320
like i said apology that i can't

1871
01:13:44,320 --> 01:13:46,480
actually see chat or the queue

1872
01:13:46,480 --> 01:13:48,560
no no one all right

1873
01:13:48,560 --> 01:13:50,480
um so

1874
01:13:50,480 --> 01:13:51,840
uh

1875
01:13:51,840 --> 01:13:54,159
knapp is designed to be very very

1876
01:13:54,159 --> 01:13:56,719
flexible everything is

1877
01:13:56,719 --> 01:13:59,199
um

1878
01:14:00,480 --> 01:14:02,159
people have argued that everything is

1879
01:14:02,159 --> 01:14:04,400
optional um

1880
01:14:04,400 --> 01:14:05,199
but

1881
01:14:05,199 --> 01:14:06,560
one of the

1882
01:14:06,560 --> 01:14:08,800
key design differences with knapp is

1883
01:14:08,800 --> 01:14:10,080
that

1884
01:14:10,080 --> 01:14:11,280
it is

1885
01:14:11,280 --> 01:14:13,760
built around this whole negotiation

1886
01:14:13,760 --> 01:14:16,640
aspect so you negotiate uh sort of the

1887
01:14:16,640 --> 01:14:18,480
parameters of the transaction at runtime

1888
01:14:18,480 --> 01:14:20,480
or you're able to negotiate

1889
01:14:20,480 --> 01:14:22,480
that at runtime by saying like this is

1890
01:14:22,480 --> 01:14:25,120
what i can do this is what you can do

1891
01:14:25,120 --> 01:14:27,360
and then you figure out the overlap and

1892
01:14:27,360 --> 01:14:29,120
sometimes there is no overlap and the

1893
01:14:29,120 --> 01:14:30,719
answer is no

1894
01:14:30,719 --> 01:14:32,000
but

1895
01:14:32,000 --> 01:14:34,960
we need to answer beyond that sort of

1896
01:14:34,960 --> 01:14:37,120
core negotiation piece

1897
01:14:37,120 --> 01:14:39,520
are there a set of features uh or is

1898
01:14:39,520 --> 01:14:41,440
there a set of functionality

1899
01:14:41,440 --> 01:14:44,640
that would be mandatory to implement

1900
01:14:44,640 --> 01:14:45,600
so

1901
01:14:45,600 --> 01:14:49,120
is an authorization server required to

1902
01:14:49,120 --> 01:14:50,640
um

1903
01:14:50,640 --> 01:14:53,520
always provide continuation

1904
01:14:53,520 --> 01:14:56,000
or you know is capable of providing

1905
01:14:56,000 --> 01:14:58,000
continuation of the grant request for

1906
01:14:58,000 --> 01:15:00,960
example um is a client instance

1907
01:15:00,960 --> 01:15:01,760
uh

1908
01:15:01,760 --> 01:15:03,600
required to

1909
01:15:03,600 --> 01:15:05,199
do a

1910
01:15:05,199 --> 01:15:06,239
uh

1911
01:15:06,239 --> 01:15:07,920
be able to do a

1912
01:15:07,920 --> 01:15:10,800
an http message signature um as a

1913
01:15:10,800 --> 01:15:11,920
baseline

1914
01:15:11,920 --> 01:15:14,239
um even if the as can support other

1915
01:15:14,239 --> 01:15:15,199
things

1916
01:15:15,199 --> 01:15:16,480
um

1917
01:15:16,480 --> 01:15:17,679
you know what are the kinds of things

1918
01:15:17,679 --> 01:15:20,719
that the two people building map that

1919
01:15:20,719 --> 01:15:23,280
are from sort of different spaces what

1920
01:15:23,280 --> 01:15:25,360
can they expect to work when they plug

1921
01:15:25,360 --> 01:15:26,880
things in together

1922
01:15:26,880 --> 01:15:28,560
um

1923
01:15:28,560 --> 01:15:30,320
and that's the kind of question that we

1924
01:15:30,320 --> 01:15:31,679
need to be able to

1925
01:15:31,679 --> 01:15:33,199
uh to answer

1926
01:15:33,199 --> 01:15:35,199
we don't have anything for that in the

1927
01:15:35,199 --> 01:15:37,840
draft right now

1928
01:15:37,840 --> 01:15:40,000
there is one uh

1929
01:15:40,000 --> 01:15:42,800
one possibility here um

1930
01:15:42,800 --> 01:15:44,880
that i know uh

1931
01:15:44,880 --> 01:15:47,520
leif with his uh saml profiles uh

1932
01:15:47,520 --> 01:15:50,159
background is gonna love uh is that

1933
01:15:50,159 --> 01:15:52,560
maybe we have what we call gnap

1934
01:15:52,560 --> 01:15:54,960
interoperability profiles so we have the

1935
01:15:54,960 --> 01:15:57,840
redirect based web application profile

1936
01:15:57,840 --> 01:16:01,520
of gnapp that says do http signatures

1937
01:16:01,520 --> 01:16:03,440
use the redirect

1938
01:16:03,440 --> 01:16:05,760
uh authenti our interaction start and

1939
01:16:05,760 --> 01:16:07,440
stop methods

1940
01:16:07,440 --> 01:16:08,239
and

1941
01:16:08,239 --> 01:16:10,000
you know things like that

1942
01:16:10,000 --> 01:16:12,000
we already kind of described these kinds

1943
01:16:12,000 --> 01:16:15,440
of profiles in the examples in gennapp

1944
01:16:15,440 --> 01:16:17,360
so the question here is not really the

1945
01:16:17,360 --> 01:16:19,600
just uh whether or not we talk about

1946
01:16:19,600 --> 01:16:21,600
these it's whether or not we kind of

1947
01:16:21,600 --> 01:16:23,600
formalize these and say that when you're

1948
01:16:23,600 --> 01:16:24,880
doing this

1949
01:16:24,880 --> 01:16:27,920
if you declare you are this type of gnap

1950
01:16:27,920 --> 01:16:29,520
client application

1951
01:16:29,520 --> 01:16:31,360
this is the kind of support that you

1952
01:16:31,360 --> 01:16:35,199
want uh open id connect um has had

1953
01:16:35,199 --> 01:16:37,920
a reasonable amount of success doing

1954
01:16:37,920 --> 01:16:40,080
this with its different client profiles

1955
01:16:40,080 --> 01:16:41,679
so maybe that's something that we can

1956
01:16:41,679 --> 01:16:44,239
leverage here

1957
01:16:45,120 --> 01:16:48,080
um and mti of course brings us sorry go

1958
01:16:48,080 --> 01:16:49,040
ahead

1959
01:16:49,040 --> 01:16:51,440
putting myself on the queue and

1960
01:16:51,440 --> 01:16:54,719
absolutely heads off

1961
01:16:54,719 --> 01:16:57,440
i think we should have mandatory to

1962
01:16:57,440 --> 01:16:59,840
implement features for sure in the core

1963
01:16:59,840 --> 01:17:01,280
protocol

1964
01:17:01,280 --> 01:17:02,719
i'm

1965
01:17:02,719 --> 01:17:05,520
very skeptical about interoperability

1966
01:17:05,520 --> 01:17:08,320
profiles i think you're very likely to

1967
01:17:08,320 --> 01:17:11,440
end up with esoteric profiles

1968
01:17:11,440 --> 01:17:12,560
um

1969
01:17:12,560 --> 01:17:16,560
or else not think about what ends up as

1970
01:17:16,560 --> 01:17:19,040
your most important profile

1971
01:17:19,040 --> 01:17:20,400
so

1972
01:17:20,400 --> 01:17:22,960
if we ever do profiles maybe as a

1973
01:17:22,960 --> 01:17:24,960
separate draft

1974
01:17:24,960 --> 01:17:26,560
but

1975
01:17:26,560 --> 01:17:28,840
i don't think that's even

1976
01:17:28,840 --> 01:17:32,239
necessary all right

1977
01:17:32,239 --> 01:17:33,679
um

1978
01:17:33,679 --> 01:17:36,159
thanks john and one of one of the other

1979
01:17:36,159 --> 01:17:38,960
things i will say with openid connect

1980
01:17:38,960 --> 01:17:41,199
in particular

1981
01:17:41,199 --> 01:17:42,960
we've seen that

1982
01:17:42,960 --> 01:17:45,920
a lot of the most successful

1983
01:17:45,920 --> 01:17:48,159
functional profiles have actually come

1984
01:17:48,159 --> 01:17:49,280
from

1985
01:17:49,280 --> 01:17:52,000
um industry vertical groups so open

1986
01:17:52,000 --> 01:17:54,320
banking initiatives say

1987
01:17:54,320 --> 01:17:56,800
take these specific features of openid

1988
01:17:56,800 --> 01:17:58,880
connect and use it in this exact same

1989
01:17:58,880 --> 01:17:59,840
way

1990
01:17:59,840 --> 01:18:02,239
and that is our profile for our vertical

1991
01:18:02,239 --> 01:18:04,159
in our group for everybody to plug

1992
01:18:04,159 --> 01:18:05,679
everything in together

1993
01:18:05,679 --> 01:18:06,640
um

1994
01:18:06,640 --> 01:18:08,320
that's stuff that is not controlled by

1995
01:18:08,320 --> 01:18:10,480
the openid

1996
01:18:10,480 --> 01:18:13,360
working group and openid foundation

1997
01:18:13,360 --> 01:18:15,360
so there might be something like that

1998
01:18:15,360 --> 01:18:17,520
that ends up happening with canap

1999
01:18:17,520 --> 01:18:20,000
we might see something else i don't know

2000
01:18:20,000 --> 01:18:23,280
um so this is

2001
01:18:23,280 --> 01:18:24,640
this is a set of things where the

2002
01:18:24,640 --> 01:18:28,000
editors we are looking for feedback on

2003
01:18:28,000 --> 01:18:28,800
um

2004
01:18:28,800 --> 01:18:30,159
if there are things that are mandatory

2005
01:18:30,159 --> 01:18:32,320
to implement we do think that there

2006
01:18:32,320 --> 01:18:33,920
probably are

2007
01:18:33,920 --> 01:18:35,120
what are they

2008
01:18:35,120 --> 01:18:38,000
and why are those mandatory uh you know

2009
01:18:38,000 --> 01:18:40,239
what what is driving this because we

2010
01:18:40,239 --> 01:18:42,960
also don't want the mti features

2011
01:18:42,960 --> 01:18:45,120
to be things that people just have to

2012
01:18:45,120 --> 01:18:47,280
implement and nobody uses

2013
01:18:47,280 --> 01:18:50,880
and we have caslin on the queue

2014
01:18:53,040 --> 01:18:55,199
go ahead

2015
01:18:55,199 --> 01:18:56,800
sorry i was also trying to write down

2016
01:18:56,800 --> 01:18:59,600
minutes um so to tack onto yaron's

2017
01:18:59,600 --> 01:19:02,800
points on the profiles there are some

2018
01:19:02,800 --> 01:19:04,480
other protocols that have gone heavy

2019
01:19:04,480 --> 01:19:06,880
into the use of protocol uh profiles

2020
01:19:06,880 --> 01:19:08,719
that are maintained

2021
01:19:08,719 --> 01:19:10,640
in some central way and it's hurt

2022
01:19:10,640 --> 01:19:12,960
adoption

2023
01:19:12,960 --> 01:19:16,640
um and then the comparable protocols

2024
01:19:16,640 --> 01:19:19,920
so so the uh the comparison here is um

2025
01:19:19,920 --> 01:19:23,199
the sticks versus misp and those are

2026
01:19:23,199 --> 01:19:27,040
information sharing protocols so sticks

2027
01:19:27,040 --> 01:19:30,640
is a really robust and full

2028
01:19:30,640 --> 01:19:32,239
explanation of every way you can

2029
01:19:32,239 --> 01:19:35,120
possibly shape information to share

2030
01:19:35,120 --> 01:19:36,480
and because of that there's multiple

2031
01:19:36,480 --> 01:19:37,920
ways that you can do the same thing and

2032
01:19:37,920 --> 01:19:40,159
so they needed profiles but then you

2033
01:19:40,159 --> 01:19:41,920
have to check that you know centrally

2034
01:19:41,920 --> 01:19:43,520
managed profile

2035
01:19:43,520 --> 01:19:45,920
misc went the other direction and it has

2036
01:19:45,920 --> 01:19:47,840
much higher adoption where it has a

2037
01:19:47,840 --> 01:19:49,600
really slim core

2038
01:19:49,600 --> 01:19:52,320
and then individual groups can create

2039
01:19:52,320 --> 01:19:54,320
their own extension points

2040
01:19:54,320 --> 01:19:56,159
and that has a much higher success rate

2041
01:19:56,159 --> 01:19:58,000
in terms of adoption so

2042
01:19:58,000 --> 01:19:59,280
just um

2043
01:19:59,280 --> 01:20:01,840
just a consideration point um you know

2044
01:20:01,840 --> 01:20:03,840
and and that goes along with the theme

2045
01:20:03,840 --> 01:20:07,040
of you simplifying and using additional

2046
01:20:07,040 --> 01:20:09,360
additional constructs right going more

2047
01:20:09,360 --> 01:20:12,639
the direction that mist went

2048
01:20:12,800 --> 01:20:17,480
all right thank you hope that helpful

2049
01:20:18,880 --> 01:20:21,520
sorry what was that

2050
01:20:25,360 --> 01:20:28,719
i thought i had hurt someone else

2051
01:20:28,960 --> 01:20:30,880
all right

2052
01:20:30,880 --> 01:20:36,000
so um mti leads us to uh very naturally

2053
01:20:36,000 --> 01:20:38,880
to extensions uh there's been uh some

2054
01:20:38,880 --> 01:20:40,639
stuff that we've pulled out of the core

2055
01:20:40,639 --> 01:20:44,080
over the last year uh said that you know

2056
01:20:44,080 --> 01:20:45,520
this is really better fit as an

2057
01:20:45,520 --> 01:20:47,199
extension people are going to invent

2058
01:20:47,199 --> 01:20:48,800
things that we haven't thought of here

2059
01:20:48,800 --> 01:20:51,040
in this working group um

2060
01:20:51,040 --> 01:20:52,159
we've

2061
01:20:52,159 --> 01:20:54,159
left a lot of spots of the protocol

2062
01:20:54,159 --> 01:20:56,000
which could be extended but we don't

2063
01:20:56,000 --> 01:20:57,920
really have discussion

2064
01:20:57,920 --> 01:20:59,520
in the document about

2065
01:20:59,520 --> 01:21:01,280
the right way to extend all of these

2066
01:21:01,280 --> 01:21:03,520
different pieces uh so this goes beyond

2067
01:21:03,520 --> 01:21:05,040
the fact that we just we need to write

2068
01:21:05,040 --> 01:21:06,320
the iana

2069
01:21:06,320 --> 01:21:08,159
registry section for a bunch of these

2070
01:21:08,159 --> 01:21:10,400
bits um

2071
01:21:10,400 --> 01:21:13,920
but we need to uh we also need to

2072
01:21:13,920 --> 01:21:16,880
consider how things can be extended so

2073
01:21:16,880 --> 01:21:19,199
for example we anticipate that adding a

2074
01:21:19,199 --> 01:21:20,800
new field in the request and in the

2075
01:21:20,800 --> 01:21:22,400
response is something that people are

2076
01:21:22,400 --> 01:21:24,639
probably going to want to do um that

2077
01:21:24,639 --> 01:21:26,800
those are really natural places to put

2078
01:21:26,800 --> 01:21:28,639
things so

2079
01:21:28,639 --> 01:21:29,520
what

2080
01:21:29,520 --> 01:21:32,000
are the requirements for doing that like

2081
01:21:32,000 --> 01:21:33,040
um

2082
01:21:33,040 --> 01:21:35,440
you know is it do we give guidance to

2083
01:21:35,440 --> 01:21:37,280
say this should be orthogonal to other

2084
01:21:37,280 --> 01:21:39,360
functionality that's already in there

2085
01:21:39,360 --> 01:21:41,760
uh it can't override something that's in

2086
01:21:41,760 --> 01:21:44,239
another field but how do we actually

2087
01:21:44,239 --> 01:21:45,520
talk about that

2088
01:21:45,520 --> 01:21:47,920
another thing that's possible is that

2089
01:21:47,920 --> 01:21:50,159
defining a different data type for an

2090
01:21:50,159 --> 01:21:51,760
existing field

2091
01:21:51,760 --> 01:21:54,320
so for example this is a terrible straw

2092
01:21:54,320 --> 01:21:55,600
man example

2093
01:21:55,600 --> 01:21:58,480
but for example say somebody wants to

2094
01:21:58,480 --> 01:21:59,679
define

2095
01:21:59,679 --> 01:22:03,280
behavior for uh sending a boolean value

2096
01:22:03,280 --> 01:22:06,080
for the access token field in a request

2097
01:22:06,080 --> 01:22:08,000
i don't know what that would mean

2098
01:22:08,000 --> 01:22:09,679
but let's say we have an extension that

2099
01:22:09,679 --> 01:22:10,639
does

2100
01:22:10,639 --> 01:22:13,199
right now the access token uh value is

2101
01:22:13,199 --> 01:22:14,800
defined as either an object or an array

2102
01:22:14,800 --> 01:22:16,000
of objects

2103
01:22:16,000 --> 01:22:16,960
so

2104
01:22:16,960 --> 01:22:19,199
um

2105
01:22:19,199 --> 01:22:21,760
what is it what does it mean uh when you

2106
01:22:21,760 --> 01:22:25,040
get a different data type there uh do we

2107
01:22:25,040 --> 01:22:27,760
even allow extensions to do that

2108
01:22:27,760 --> 01:22:30,159
or do we lock down and say existing

2109
01:22:30,159 --> 01:22:32,000
fields and existing data types this is

2110
01:22:32,000 --> 01:22:33,679
everything that's defined

2111
01:22:33,679 --> 01:22:34,880
um

2112
01:22:34,880 --> 01:22:38,880
we need to we need to decide that um

2113
01:22:38,880 --> 01:22:40,719
if you don't know an extension are you

2114
01:22:40,719 --> 01:22:43,040
allowed to ignore it this seems to be

2115
01:22:43,040 --> 01:22:45,520
reasonable until you realize that some

2116
01:22:45,520 --> 01:22:46,719
of these extensions are going to be

2117
01:22:46,719 --> 01:22:49,280
security focused and therefore

2118
01:22:49,280 --> 01:22:51,280
it's actually dangerous if you don't

2119
01:22:51,280 --> 01:22:52,800
know the extension

2120
01:22:52,800 --> 01:22:56,320
and and follow it um

2121
01:22:56,320 --> 01:22:57,120
but

2122
01:22:57,120 --> 01:22:59,199
if you if we do have logic that says an

2123
01:22:59,199 --> 01:23:01,360
unknown extension is ignored that

2124
01:23:01,360 --> 01:23:03,360
actually influences how extensions get

2125
01:23:03,360 --> 01:23:04,320
written

2126
01:23:04,320 --> 01:23:07,120
uh such that um

2127
01:23:07,120 --> 01:23:09,760
you know the security properties uh do

2128
01:23:09,760 --> 01:23:11,280
actually get added

2129
01:23:11,280 --> 01:23:13,760
um in sort of the right the right ways

2130
01:23:13,760 --> 01:23:16,480
so pixie and oauth for example was uh

2131
01:23:16,480 --> 01:23:18,639
was built in such a way that

2132
01:23:18,639 --> 01:23:19,679
um

2133
01:23:19,679 --> 01:23:21,280
if you ignore it you don't get the

2134
01:23:21,280 --> 01:23:23,520
benefit but you also it doesn't make it

2135
01:23:23,520 --> 01:23:24,800
worse

2136
01:23:24,800 --> 01:23:26,800
um

2137
01:23:26,800 --> 01:23:30,320
there are lots of different um

2138
01:23:30,320 --> 01:23:32,719
things that are

2139
01:23:32,719 --> 01:23:35,760
sort of other natural extension points

2140
01:23:35,760 --> 01:23:36,880
so

2141
01:23:36,880 --> 01:23:40,480
the uh end user claims um so

2142
01:23:40,480 --> 01:23:43,199
the uh the subject types for example the

2143
01:23:43,199 --> 01:23:45,120
access data types these are things that

2144
01:23:45,120 --> 01:23:46,960
we've discussed that there is already

2145
01:23:46,960 --> 01:23:48,400
text in there for

2146
01:23:48,400 --> 01:23:50,880
but um

2147
01:23:50,880 --> 01:23:52,000
we need to

2148
01:23:52,000 --> 01:23:53,360
we probably need to expand the

2149
01:23:53,360 --> 01:23:55,120
discussion on all of these

2150
01:23:55,120 --> 01:23:56,080
um

2151
01:23:56,080 --> 01:23:57,760
and probably one of the one of the

2152
01:23:57,760 --> 01:23:59,199
hairiest bits

2153
01:23:59,199 --> 01:24:02,080
is the whole interaction method and

2154
01:24:02,080 --> 01:24:04,480
specifically the combinatorics of the

2155
01:24:04,480 --> 01:24:06,080
start and finish methods

2156
01:24:06,080 --> 01:24:08,480
so what does it mean when i use

2157
01:24:08,480 --> 01:24:10,719
these start methods with this new finish

2158
01:24:10,719 --> 01:24:13,040
method

2159
01:24:13,040 --> 01:24:15,280
can i define another thing inside that

2160
01:24:15,280 --> 01:24:17,040
interaction block beyond start and

2161
01:24:17,040 --> 01:24:18,400
finish and hints

2162
01:24:18,400 --> 01:24:19,360
um

2163
01:24:19,360 --> 01:24:21,120
you know because i feel like my

2164
01:24:21,120 --> 01:24:23,040
extension needs to go do something else

2165
01:24:23,040 --> 01:24:24,719
that's not one of those things do we

2166
01:24:24,719 --> 01:24:27,360
allow that or is that part locked down

2167
01:24:27,360 --> 01:24:27,820
um

2168
01:24:27,820 --> 01:24:29,199
[Music]

2169
01:24:29,199 --> 01:24:30,880
all of these the editors think that we

2170
01:24:30,880 --> 01:24:31,920
have

2171
01:24:31,920 --> 01:24:34,080
an idea of what the right answer ought

2172
01:24:34,080 --> 01:24:36,480
to be uh for a lot of these kinds of

2173
01:24:36,480 --> 01:24:37,360
things

2174
01:24:37,360 --> 01:24:39,679
um that all needs to get written down

2175
01:24:39,679 --> 01:24:41,920
and uh and the working group needs to

2176
01:24:41,920 --> 01:24:44,080
discuss what we really want to do here

2177
01:24:44,080 --> 01:24:45,679
so as with the other things the editors

2178
01:24:45,679 --> 01:24:47,520
are going to be proposing text proposing

2179
01:24:47,520 --> 01:24:49,360
discussion on that text

2180
01:24:49,360 --> 01:24:51,040
and figure out if that's the direction

2181
01:24:51,040 --> 01:24:52,239
we want to go or if we want to do

2182
01:24:52,239 --> 01:24:54,799
something else

2183
01:24:55,440 --> 01:24:57,120
all right

2184
01:24:57,120 --> 01:24:59,920
jose is used in exactly uh two sections

2185
01:24:59,920 --> 01:25:02,080
in the draft right now uh they're both

2186
01:25:02,080 --> 01:25:03,520
key proofing mechanisms there's the

2187
01:25:03,520 --> 01:25:06,080
detached your ws header and the attached

2188
01:25:06,080 --> 01:25:08,480
jws header which you use when you have a

2189
01:25:08,480 --> 01:25:10,719
request body and you use the detached

2190
01:25:10,719 --> 01:25:12,639
jws header when you don't have a request

2191
01:25:12,639 --> 01:25:13,679
body

2192
01:25:13,679 --> 01:25:16,159
so they really do stick together

2193
01:25:16,159 --> 01:25:18,480
um

2194
01:25:18,560 --> 01:25:20,239
these are the only jose dependencies in

2195
01:25:20,239 --> 01:25:22,880
canapcore so uh we brought this up

2196
01:25:22,880 --> 01:25:24,560
during the key proofing

2197
01:25:24,560 --> 01:25:26,880
discussion a while back

2198
01:25:26,880 --> 01:25:29,920
uh should these really be used uh

2199
01:25:29,920 --> 01:25:32,480
should these really be their own spec

2200
01:25:32,480 --> 01:25:35,120
um and could these even possibly be used

2201
01:25:35,120 --> 01:25:37,520
outside of canap um

2202
01:25:37,520 --> 01:25:39,600
you know these these are these key

2203
01:25:39,600 --> 01:25:42,320
proofing mechanisms are things that are

2204
01:25:42,320 --> 01:25:43,600
general use

2205
01:25:43,600 --> 01:25:45,760
um you know we didn't invent http

2206
01:25:45,760 --> 01:25:47,360
signing we're using that draft from the

2207
01:25:47,360 --> 01:25:50,159
http working group uh this is something

2208
01:25:50,159 --> 01:25:51,280
that was

2209
01:25:51,280 --> 01:25:53,360
kind of invented uh in an earlier

2210
01:25:53,360 --> 01:25:55,199
version of xyz

2211
01:25:55,199 --> 01:25:58,239
um that got pulled into into xyz and

2212
01:25:58,239 --> 01:26:01,600
axoth uh that got pulled into canap and

2213
01:26:01,600 --> 01:26:03,280
um

2214
01:26:03,280 --> 01:26:04,800
so

2215
01:26:04,800 --> 01:26:06,320
should this be pulled out into its own

2216
01:26:06,320 --> 01:26:10,320
thing um as uh extensions for uh key

2217
01:26:10,320 --> 01:26:12,639
mechanisms and if so is that in the cap

2218
01:26:12,639 --> 01:26:15,600
working group is that its own own draft

2219
01:26:15,600 --> 01:26:17,600
is it something we adopt is it something

2220
01:26:17,600 --> 01:26:18,560
we just

2221
01:26:18,560 --> 01:26:20,480
let exist out there

2222
01:26:20,480 --> 01:26:22,560
um that's something we need to decide

2223
01:26:22,560 --> 01:26:24,320
back when we had the key uh the

2224
01:26:24,320 --> 01:26:26,560
keyproofing method discussion

2225
01:26:26,560 --> 01:26:30,000
there was not a strong feeling um to

2226
01:26:30,000 --> 01:26:32,000
keep it or to remove it so the editors

2227
01:26:32,000 --> 01:26:33,120
took the

2228
01:26:33,120 --> 01:26:35,280
more conservative approach of leaving it

2229
01:26:35,280 --> 01:26:36,960
in there for now

2230
01:26:36,960 --> 01:26:38,560
uh in order to have this future

2231
01:26:38,560 --> 01:26:40,320
discussion now that now that the rest

2232
01:26:40,320 --> 01:26:43,040
has settled more

2233
01:26:45,440 --> 01:26:46,960
and then

2234
01:26:46,960 --> 01:26:50,639
um speaking to uh

2235
01:26:50,639 --> 01:26:52,960
move on okay again

2236
01:26:52,960 --> 01:26:54,320
oh yeah go ahead

2237
01:26:54,320 --> 01:26:55,920
sorry i'm not more active on list

2238
01:26:55,920 --> 01:26:57,840
because i probably could have uh

2239
01:26:57,840 --> 01:27:00,320
provided some of these comments there my

2240
01:27:00,320 --> 01:27:05,199
take would be to include it in a draft

2241
01:27:05,199 --> 01:27:06,960
because then it's part of the core

2242
01:27:06,960 --> 01:27:08,960
protocol if you put it in a separate

2243
01:27:08,960 --> 01:27:12,400
draft it becomes optional

2244
01:27:13,520 --> 01:27:15,360
for other functions

2245
01:27:15,360 --> 01:27:17,199
i i think it's important to leave in the

2246
01:27:17,199 --> 01:27:19,679
draft and that's a differentiator from

2247
01:27:19,679 --> 01:27:21,040
oauth right because you'll have the

2248
01:27:21,040 --> 01:27:23,199
security bit right into the protocol as

2249
01:27:23,199 --> 01:27:24,480
opposed to

2250
01:27:24,480 --> 01:27:26,159
you know something that has to show up

2251
01:27:26,159 --> 01:27:27,120
in

2252
01:27:27,120 --> 01:27:29,760
owasp lists on how to secure the

2253
01:27:29,760 --> 01:27:31,920
protocol and you know vulnerabilities

2254
01:27:31,920 --> 01:27:33,360
with the protocol

2255
01:27:33,360 --> 01:27:35,280
just bake it in

2256
01:27:35,280 --> 01:27:36,320
yep

2257
01:27:36,320 --> 01:27:38,000
thank you for that kathleen uh to be

2258
01:27:38,000 --> 01:27:39,920
clear uh the

2259
01:27:39,920 --> 01:27:42,080
http message signing and mtls

2260
01:27:42,080 --> 01:27:44,239
keyproofing mechanisms are staying in

2261
01:27:44,239 --> 01:27:46,800
court there was there was really strong

2262
01:27:46,800 --> 01:27:48,639
support for that

2263
01:27:48,639 --> 01:27:50,560
so those two are absolutely staying all

2264
01:27:50,560 --> 01:27:52,960
of that discussion all of that is there

2265
01:27:52,960 --> 01:27:56,239
and uh those may even uh

2266
01:27:56,239 --> 01:27:58,000
end up being what's mandatory to

2267
01:27:58,000 --> 01:28:00,560
implement the question is just about the

2268
01:28:00,560 --> 01:28:03,120
two jose based mechanisms

2269
01:28:03,120 --> 01:28:05,520
um and not the uh not the key proofing

2270
01:28:05,520 --> 01:28:06,639
in general

2271
01:28:06,639 --> 01:28:09,679
so i guess if you have the actual

2272
01:28:09,679 --> 01:28:11,520
function in another draft but it's

2273
01:28:11,520 --> 01:28:13,360
called out in the core draft that it's

2274
01:28:13,360 --> 01:28:15,840
mandatory but then you're creating

2275
01:28:15,840 --> 01:28:18,320
a dependency on that other draft right

2276
01:28:18,320 --> 01:28:20,320
so i think that would be the question

2277
01:28:20,320 --> 01:28:22,320
but i do think it's important to keep it

2278
01:28:22,320 --> 01:28:25,679
in the core draft either by reference as

2279
01:28:25,679 --> 01:28:28,560
it being required that it's there okay

2280
01:28:28,560 --> 01:28:29,760
um

2281
01:28:29,760 --> 01:28:31,920
and then you have the dependency on

2282
01:28:31,920 --> 01:28:33,520
publication

2283
01:28:33,520 --> 01:28:35,920
all right so you all right so just just

2284
01:28:35,920 --> 01:28:36,880
to

2285
01:28:36,880 --> 01:28:38,320
summarize and make sure i understand it

2286
01:28:38,320 --> 01:28:40,840
your your take is that the jose

2287
01:28:40,840 --> 01:28:43,040
mechanisms specifically

2288
01:28:43,040 --> 01:28:45,520
should be uh kept in core

2289
01:28:45,520 --> 01:28:47,199
um and

2290
01:28:47,199 --> 01:28:49,520
be a core dependency

2291
01:28:49,520 --> 01:28:52,880
yes because they provide object level

2292
01:28:52,880 --> 01:28:55,440
security protections right so

2293
01:28:55,440 --> 01:28:58,719
so does the hdb signing

2294
01:29:01,199 --> 01:29:02,320
but they're not

2295
01:29:02,320 --> 01:29:04,320
addressing the same functions are they

2296
01:29:04,320 --> 01:29:06,560
yes they are

2297
01:29:06,560 --> 01:29:07,840
all right i'll have to look at the draft

2298
01:29:07,840 --> 01:29:08,719
then

2299
01:29:08,719 --> 01:29:09,840
okay

2300
01:29:09,840 --> 01:29:10,880
sorry

2301
01:29:10,880 --> 01:29:13,199
no no worries no worries indeed uh so

2302
01:29:13,199 --> 01:29:15,679
basically uh

2303
01:29:15,679 --> 01:29:17,360
this is this is the kind of thing that

2304
01:29:17,360 --> 01:29:20,960
you will be using http signing or mtls

2305
01:29:20,960 --> 01:29:24,960
or one of the two jose mechanisms for

2306
01:29:24,960 --> 01:29:26,719
your keyproofing for any given

2307
01:29:26,719 --> 01:29:28,080
transaction

2308
01:29:28,080 --> 01:29:29,920
um

2309
01:29:29,920 --> 01:29:32,239
so you always have to use

2310
01:29:32,239 --> 01:29:34,320
one of a

2311
01:29:34,320 --> 01:29:37,199
uh secure keyproofing mechanism and

2312
01:29:37,199 --> 01:29:39,040
message signing mechanism

2313
01:29:39,040 --> 01:29:40,560
um

2314
01:29:40,560 --> 01:29:43,760
and there was uh

2315
01:29:43,760 --> 01:29:45,199
the editors

2316
01:29:45,199 --> 01:29:46,880
believe that there was consensus to keep

2317
01:29:46,880 --> 01:29:49,280
http signing as a

2318
01:29:49,280 --> 01:29:50,880
an object level

2319
01:29:50,880 --> 01:29:53,760
um you know sort of message level

2320
01:29:53,760 --> 01:29:54,560
uh

2321
01:29:54,560 --> 01:29:56,800
security protection and mtls as a socket

2322
01:29:56,800 --> 01:29:57,760
level

2323
01:29:57,760 --> 01:29:59,040
protection

2324
01:29:59,040 --> 01:30:00,400
um

2325
01:30:00,400 --> 01:30:01,440
and

2326
01:30:01,440 --> 01:30:03,120
uh

2327
01:30:03,120 --> 01:30:07,199
as sort of the two core options and so

2328
01:30:07,199 --> 01:30:10,320
the jose pieces are a different way to

2329
01:30:10,320 --> 01:30:12,560
do message level protection they have

2330
01:30:12,560 --> 01:30:14,880
some pretty major drawbacks but they do

2331
01:30:14,880 --> 01:30:16,480
work

2332
01:30:16,480 --> 01:30:18,400
and so the question is whether we keep

2333
01:30:18,400 --> 01:30:21,360
these these bits specifically in core as

2334
01:30:21,360 --> 01:30:22,800
as options

2335
01:30:22,800 --> 01:30:24,800
or they live in their own draft so we

2336
01:30:24,800 --> 01:30:26,639
can take this discussion back onto the

2337
01:30:26,639 --> 01:30:28,080
list

2338
01:30:28,080 --> 01:30:30,800
because we we want feedback uh of what

2339
01:30:30,800 --> 01:30:33,440
people plan to use what what people

2340
01:30:33,440 --> 01:30:34,719
actually plan to do with this kind of

2341
01:30:34,719 --> 01:30:35,920
stuff

2342
01:30:35,920 --> 01:30:37,760
and this uh this is also going to help

2343
01:30:37,760 --> 01:30:41,199
the uh the mti discussion as well

2344
01:30:41,199 --> 01:30:45,280
yeah if i if i may have to what

2345
01:30:45,920 --> 01:30:49,800
and head off again

2346
01:30:50,080 --> 01:30:53,040
if the methods that are mti they

2347
01:30:53,040 --> 01:30:55,679
obviously need to stay in the draft

2348
01:30:55,679 --> 01:30:58,400
otherwise the more

2349
01:30:58,400 --> 01:31:00,880
more content we can remove from the

2350
01:31:00,880 --> 01:31:04,239
draft the main draft the better off we

2351
01:31:04,239 --> 01:31:06,400
are

2352
01:31:07,600 --> 01:31:09,440
all right

2353
01:31:09,440 --> 01:31:10,960
thank you obviously this needs a lot

2354
01:31:10,960 --> 01:31:12,159
more discussion

2355
01:31:12,159 --> 01:31:14,480
um so we will we will pull that into the

2356
01:31:14,480 --> 01:31:18,719
list um uh fabian has uh

2357
01:31:18,719 --> 01:31:20,320
uh proposed at least in the editors

2358
01:31:20,320 --> 01:31:22,880
meetings that we've write up what this

2359
01:31:22,880 --> 01:31:25,440
jose draft would actually look like

2360
01:31:25,440 --> 01:31:28,840
um and present that as as an id

2361
01:31:28,840 --> 01:31:31,199
um just so that people could see like

2362
01:31:31,199 --> 01:31:33,040
okay if we take this out this is the

2363
01:31:33,040 --> 01:31:34,639
part that would be there and this is how

2364
01:31:34,639 --> 01:31:37,520
we might reference it

2365
01:31:38,639 --> 01:31:40,719
but again the the mti discussion is

2366
01:31:40,719 --> 01:31:43,840
absolutely entwined with this

2367
01:31:43,840 --> 01:31:44,800
all right

2368
01:31:44,800 --> 01:31:48,320
um and then almost to the end here uh

2369
01:31:48,320 --> 01:31:49,920
the resource server draft still

2370
01:31:49,920 --> 01:31:53,440
definitely needs a lot of work um as we

2371
01:31:53,440 --> 01:31:56,960
uh start wrapping up these major uh

2372
01:31:56,960 --> 01:31:58,560
pieces and you know sort of pare down

2373
01:31:58,560 --> 01:32:00,560
the issues on the core draft we are

2374
01:32:00,560 --> 01:32:01,679
going to be turning our focus to the

2375
01:32:01,679 --> 01:32:03,760
resource server draft one of the biggest

2376
01:32:03,760 --> 01:32:05,760
pieces of this is going to be a token

2377
01:32:05,760 --> 01:32:06,800
model

2378
01:32:06,800 --> 01:32:08,800
not a token format

2379
01:32:08,800 --> 01:32:10,639
but a token model that could be

2380
01:32:10,639 --> 01:32:13,679
represented in token formats

2381
01:32:13,679 --> 01:32:16,400
if you wanted to have a formatted token

2382
01:32:16,400 --> 01:32:18,400
um if you wanted to have a reference

2383
01:32:18,400 --> 01:32:19,920
based token that would obviously still

2384
01:32:19,920 --> 01:32:20,960
be

2385
01:32:20,960 --> 01:32:23,440
possible and the access token itself

2386
01:32:23,440 --> 01:32:26,239
would still remain opaque to the client

2387
01:32:26,239 --> 01:32:29,679
inside the nap just like it is in omaha

2388
01:32:29,679 --> 01:32:31,760
but it's a lot this is just a short way

2389
01:32:31,760 --> 01:32:33,120
of saying we know there's a lot of work

2390
01:32:33,120 --> 01:32:35,920
to do on the rs draft still

2391
01:32:35,920 --> 01:32:38,719
all right um implementation status has

2392
01:32:38,719 --> 01:32:40,560
grown a little bit in the last couple of

2393
01:32:40,560 --> 01:32:42,320
months but uh

2394
01:32:42,320 --> 01:32:44,080
there's still a lot of

2395
01:32:44,080 --> 01:32:46,880
uh a lot of people kind of poking around

2396
01:32:46,880 --> 01:32:49,199
uh at the edges of this for both sort of

2397
01:32:49,199 --> 01:32:50,639
the core stuff and the stuff around the

2398
01:32:50,639 --> 01:32:51,920
dependencies

2399
01:32:51,920 --> 01:32:54,239
uh we will still at some point add an

2400
01:32:54,239 --> 01:32:56,000
implementation status section to the

2401
01:32:56,000 --> 01:32:57,760
draft we haven't done that yet

2402
01:32:57,760 --> 01:32:59,040
um

2403
01:32:59,040 --> 01:33:01,600
but we also as as we kind of predicted

2404
01:33:01,600 --> 01:33:02,639
um

2405
01:33:02,639 --> 01:33:05,840
back in the summer the the major turn of

2406
01:33:05,840 --> 01:33:07,600
the protocol

2407
01:33:07,600 --> 01:33:09,440
has remained quiet over the last four

2408
01:33:09,440 --> 01:33:13,440
months and um that is a good sign it's

2409
01:33:13,440 --> 01:33:15,280
obviously we're not done

2410
01:33:15,280 --> 01:33:19,280
but uh it is a good sign that this um

2411
01:33:19,280 --> 01:33:21,520
that we're not changing out

2412
01:33:21,520 --> 01:33:23,679
major swaths of the protocol on a

2413
01:33:23,679 --> 01:33:25,520
regular basis anymore

2414
01:33:25,520 --> 01:33:28,800
um so this is a really good time to

2415
01:33:28,800 --> 01:33:30,480
uh to keep implementing things to keep

2416
01:33:30,480 --> 01:33:32,400
trying stuff out applying it to use

2417
01:33:32,400 --> 01:33:34,000
cases and figuring out how and where it

2418
01:33:34,000 --> 01:33:36,480
works and doesn't

2419
01:33:36,480 --> 01:33:38,239
that's all the editors had we've got

2420
01:33:38,239 --> 01:33:40,560
about 10 minutes or so for

2421
01:33:40,560 --> 01:33:42,400
open discussion

2422
01:33:42,400 --> 01:33:46,400
so i'm going to stop sharing

2423
01:33:48,960 --> 01:33:50,560
and oh

2424
01:33:50,560 --> 01:33:52,239
i think my browser crashed am i am i

2425
01:33:52,239 --> 01:33:54,239
still connected

2426
01:33:54,239 --> 01:33:55,679
yes you are

2427
01:33:55,679 --> 01:33:58,000
okay

2428
01:33:59,600 --> 01:34:02,840
all right so i oh there we are

2429
01:34:02,840 --> 01:34:06,400
okay it just it just took a while to un

2430
01:34:06,400 --> 01:34:10,159
unshare all right um

2431
01:34:10,480 --> 01:34:12,239
let's see uh

2432
01:34:12,239 --> 01:34:16,040
is there anyone in the queue

2433
01:34:20,000 --> 01:34:21,440
i don't think there's anybody in the

2434
01:34:21,440 --> 01:34:22,880
queue

2435
01:34:22,880 --> 01:34:26,040
all right

2436
01:34:42,400 --> 01:34:44,560
all right well um so we know that

2437
01:34:44,560 --> 01:34:46,560
there's a lot of new stuff uh in the

2438
01:34:46,560 --> 01:34:48,960
draft uh there's a lot of new text in

2439
01:34:48,960 --> 01:34:50,000
the draft

2440
01:34:50,000 --> 01:34:51,119
um

2441
01:34:51,119 --> 01:34:53,760
please read through that um

2442
01:34:53,760 --> 01:34:56,000
uh please continue to help improve that

2443
01:34:56,000 --> 01:34:58,080
and thank you again to everybody who has

2444
01:34:58,080 --> 01:35:00,560
been doing so so far

2445
01:35:00,560 --> 01:35:03,199
so i

2446
01:35:03,360 --> 01:35:05,280
i think we might be good to move on to

2447
01:35:05,280 --> 01:35:07,360
the next section then

2448
01:35:07,360 --> 01:35:09,440
all right thank you justin and the

2449
01:35:09,440 --> 01:35:11,760
editor team

2450
01:35:11,760 --> 01:35:13,040
and

2451
01:35:13,040 --> 01:35:16,480
dna go on next

2452
01:35:25,920 --> 01:35:27,920
i don't know whether you will present my

2453
01:35:27,920 --> 01:35:29,840
slide or if i can share my slide i've

2454
01:35:29,840 --> 01:35:33,119
never experienced that before

2455
01:35:33,119 --> 01:35:34,880
i can

2456
01:35:34,880 --> 01:35:38,080
try to show your slides it will take me

2457
01:35:38,080 --> 01:35:42,119
a few seconds though

2458
01:35:44,400 --> 01:35:46,159
but you can

2459
01:35:46,159 --> 01:35:50,199
get going in the meantime

2460
01:36:26,719 --> 01:36:28,480
um

2461
01:36:28,480 --> 01:36:31,480
sorry

2462
01:36:51,360 --> 01:36:53,520
it's not a good day for me to come a

2463
01:36:53,520 --> 01:36:55,920
friend

2464
01:37:01,840 --> 01:37:03,600
would be able to pick the powerpoint

2465
01:37:03,600 --> 01:37:07,840
slides instead of the pdf one

2466
01:37:09,520 --> 01:37:12,560
yeah let me see if i can get uh miteko

2467
01:37:12,560 --> 01:37:15,520
to collaborate with anything and i will

2468
01:37:15,520 --> 01:37:18,080
be there

2469
01:37:18,080 --> 01:37:21,840
or at least to start with

2470
01:37:24,320 --> 01:37:27,679
a pdf and then maybe i can switch but

2471
01:37:27,679 --> 01:37:29,440
let me see if i can

2472
01:37:29,440 --> 01:37:33,239
get it to work

2473
01:37:37,119 --> 01:37:39,119
no i'm sorry uh

2474
01:37:39,119 --> 01:37:40,400
leaf

2475
01:37:40,400 --> 01:37:43,920
could you try on your side

2476
01:37:47,520 --> 01:37:49,360
yes if you tell me again what to try

2477
01:37:49,360 --> 01:37:52,400
because i missed your audio

2478
01:37:52,400 --> 01:37:53,760
yeah there's

2479
01:37:53,760 --> 01:37:54,880
the

2480
01:37:54,880 --> 01:37:56,320
middle button

2481
01:37:56,320 --> 01:37:59,440
next to your name on the top left is

2482
01:37:59,440 --> 01:38:01,520
show screen

2483
01:38:01,520 --> 01:38:03,600
and you need to have a separate

2484
01:38:03,600 --> 01:38:07,360
application or separate browser instance

2485
01:38:07,360 --> 01:38:10,880
with any slides

2486
01:38:15,520 --> 01:38:17,679
i can try that to do it myself if you

2487
01:38:17,679 --> 01:38:20,960
just tell me how to do it

2488
01:38:22,480 --> 01:38:25,679
i'm i'm sorry uh jaron i'm

2489
01:38:25,679 --> 01:38:28,000
dropping your audio uh your audio is

2490
01:38:28,000 --> 01:38:29,840
dropping periodically so you gotta say

2491
01:38:29,840 --> 01:38:31,760
that again

2492
01:38:31,760 --> 01:38:33,840
what do you want me to do share screen

2493
01:38:33,840 --> 01:38:35,600
show screen yeah

2494
01:38:35,600 --> 01:38:39,560
with the new slides

2495
01:38:48,400 --> 01:38:50,480
i you know i i'm not sure this is going

2496
01:38:50,480 --> 01:38:52,719
to work because i'm dropping audio all

2497
01:38:52,719 --> 01:38:54,560
the time here so this is going to be a

2498
01:38:54,560 --> 01:38:58,719
problem but they're problematic i think

2499
01:39:04,159 --> 01:39:06,320
let me try again

2500
01:39:06,320 --> 01:39:10,360
let me see if i can

2501
01:39:27,840 --> 01:39:30,800
i think i pressed the block at some

2502
01:39:30,800 --> 01:39:33,920
point and now it's

2503
01:39:35,119 --> 01:39:36,719
okay

2504
01:39:36,719 --> 01:39:40,440
now this should work

2505
01:39:50,320 --> 01:39:52,800
all right there we go

2506
01:39:52,800 --> 01:39:54,880
okay that's the pdf which is better than

2507
01:39:54,880 --> 01:39:55,840
nothing

2508
01:39:55,840 --> 01:39:56,800
yes

2509
01:39:56,800 --> 01:39:59,280
and yeah

2510
01:39:59,280 --> 01:40:00,400
okay

2511
01:40:00,400 --> 01:40:02,800
so i have various concerns with draft

2512
01:40:02,800 --> 01:40:05,520
eight and i propose some way to address

2513
01:40:05,520 --> 01:40:06,800
them

2514
01:40:06,800 --> 01:40:09,199
so the first real slide which is next

2515
01:40:09,199 --> 01:40:11,440
one

2516
01:40:13,440 --> 01:40:16,719
and it is about the fact that attributes

2517
01:40:16,719 --> 01:40:18,800
are within the scope of the core

2518
01:40:18,800 --> 01:40:20,239
document

2519
01:40:20,239 --> 01:40:22,000
there are two definitions that have

2520
01:40:22,000 --> 01:40:25,040
picked up privilege and access token

2521
01:40:25,040 --> 01:40:27,280
privilege is a right or attribute

2522
01:40:27,280 --> 01:40:29,280
associated with a subject

2523
01:40:29,280 --> 01:40:31,119
and an access token

2524
01:40:31,119 --> 01:40:33,760
is a data artifact representing a set of

2525
01:40:33,760 --> 01:40:37,040
rights and or attribute

2526
01:40:37,040 --> 01:40:39,760
currently the draft 8 only supports

2527
01:40:39,760 --> 01:40:42,239
rights which in terms of security are

2528
01:40:42,239 --> 01:40:44,000
called capabilities

2529
01:40:44,000 --> 01:40:46,960
so i use acronym capability-based access

2530
01:40:46,960 --> 01:40:48,320
control

2531
01:40:48,320 --> 01:40:50,639
but not attributes and usually

2532
01:40:50,639 --> 01:40:53,040
attributes come with two flavors

2533
01:40:53,040 --> 01:40:55,040
whether they are attribute banks access

2534
01:40:55,040 --> 01:40:58,000
control are back or role based access

2535
01:40:58,000 --> 01:40:59,520
control

2536
01:40:59,520 --> 01:41:00,960
and i

2537
01:41:00,960 --> 01:41:02,880
propose that the support of attributes

2538
01:41:02,880 --> 01:41:06,080
should be added to the core document

2539
01:41:06,080 --> 01:41:08,639
next slide

2540
01:41:09,520 --> 01:41:10,560
now

2541
01:41:10,560 --> 01:41:12,400
this list to the following model which

2542
01:41:12,400 --> 01:41:15,679
is the model on the right

2543
01:41:15,840 --> 01:41:16,960
there is

2544
01:41:16,960 --> 01:41:19,040
in fact the resource owner

2545
01:41:19,040 --> 01:41:21,920
that can work in collaboration with the

2546
01:41:21,920 --> 01:41:23,760
authorization server

2547
01:41:23,760 --> 01:41:27,040
or with the resource server

2548
01:41:27,040 --> 01:41:29,920
today the resource owner is working in

2549
01:41:29,920 --> 01:41:31,600
collaboration with the authorization

2550
01:41:31,600 --> 01:41:32,639
server

2551
01:41:32,639 --> 01:41:35,360
and it's a case of capability-based

2552
01:41:35,360 --> 01:41:37,600
access control

2553
01:41:37,600 --> 01:41:38,480
now

2554
01:41:38,480 --> 01:41:40,800
when the resource owner is working in

2555
01:41:40,800 --> 01:41:43,119
collaboration with the resource server

2556
01:41:43,119 --> 01:41:46,800
it's a case of attribute exactly

2557
01:41:46,800 --> 01:41:48,880
so that makes a big difference between

2558
01:41:48,880 --> 01:41:50,239
the two models

2559
01:41:50,239 --> 01:41:53,280
because in the model from drive 8

2560
01:41:53,280 --> 01:41:55,440
the second case our attributes back

2561
01:41:55,440 --> 01:41:58,639
access control is not supported

2562
01:41:58,639 --> 01:42:01,840
next one

2563
01:42:04,000 --> 01:42:06,080
so

2564
01:42:06,080 --> 01:42:07,440
there are

2565
01:42:07,440 --> 01:42:08,880
different reasons why they should be

2566
01:42:08,880 --> 01:42:10,639
supported

2567
01:42:10,639 --> 01:42:14,080
i took a recent reason because there was

2568
01:42:14,080 --> 01:42:14,800
a

2569
01:42:14,800 --> 01:42:17,760
proposal for amending a relation from

2570
01:42:17,760 --> 01:42:20,880
european union that was posted in june

2571
01:42:20,880 --> 01:42:22,000
this year

2572
01:42:22,000 --> 01:42:25,119
and the proposal considers a qualified

2573
01:42:25,119 --> 01:42:28,000
trust service for the provision of

2574
01:42:28,000 --> 01:42:31,440
electronic attestation attribute

2575
01:42:31,440 --> 01:42:34,320
translated into our wording it will mean

2576
01:42:34,320 --> 01:42:35,760
access control

2577
01:42:35,760 --> 01:42:36,560
that

2578
01:42:36,560 --> 01:42:39,360
access token that control contains end

2579
01:42:39,360 --> 01:42:41,199
user attributes

2580
01:42:41,199 --> 01:42:43,760
and this end user attributes may come

2581
01:42:43,760 --> 01:42:45,760
from multiple sources

2582
01:42:45,760 --> 01:42:48,480
which means from multiples authorization

2583
01:42:48,480 --> 01:42:50,639
server

2584
01:42:50,639 --> 01:42:52,880
and the core protocol

2585
01:42:52,880 --> 01:42:55,440
should define two fields in access token

2586
01:42:55,440 --> 01:42:57,920
to distinguish very easily between

2587
01:42:57,920 --> 01:42:58,960
rights

2588
01:42:58,960 --> 01:43:00,880
and attributes

2589
01:43:00,880 --> 01:43:02,960
today the argument is that there is an

2590
01:43:02,960 --> 01:43:04,880
array and you can put anything in the

2591
01:43:04,880 --> 01:43:06,239
array

2592
01:43:06,239 --> 01:43:08,000
every rs

2593
01:43:08,000 --> 01:43:10,960
should be able to immediately know

2594
01:43:10,960 --> 01:43:14,239
whether the access token contains rights

2595
01:43:14,239 --> 01:43:16,560
and or attributes

2596
01:43:16,560 --> 01:43:18,159
and what is very important when you

2597
01:43:18,159 --> 01:43:20,239
consider attributes

2598
01:43:20,239 --> 01:43:23,679
is to define some attribute types

2599
01:43:23,679 --> 01:43:26,320
like what a first name a family name a

2600
01:43:26,320 --> 01:43:29,520
birth date and so on

2601
01:43:29,520 --> 01:43:32,719
an example is those attribute defined in

2602
01:43:32,719 --> 01:43:35,199
open id connect

2603
01:43:35,199 --> 01:43:38,320
and an user should be able to query a

2604
01:43:38,320 --> 01:43:39,920
given rs

2605
01:43:39,920 --> 01:43:42,400
to know which attribute types

2606
01:43:42,400 --> 01:43:45,760
and value are known by a given rs

2607
01:43:45,760 --> 01:43:50,000
this is requesting end user information

2608
01:43:50,000 --> 01:43:53,360
not requesting arrow information

2609
01:43:53,360 --> 01:43:56,159
not requesting user information or

2610
01:43:56,159 --> 01:43:58,480
subject information as it is in the

2611
01:43:58,480 --> 01:43:59,920
current draft

2612
01:43:59,920 --> 01:44:02,560
so requesting an user attribute is not

2613
01:44:02,560 --> 01:44:04,639
supported currently

2614
01:44:04,639 --> 01:44:05,520
next

2615
01:44:05,520 --> 01:44:07,840
slide

2616
01:44:12,480 --> 01:44:15,600
now in order to support attributes

2617
01:44:15,600 --> 01:44:18,080
well we should

2618
01:44:18,080 --> 01:44:20,639
allow rs to indicate which attribute

2619
01:44:20,639 --> 01:44:23,520
types and in some cases attribute values

2620
01:44:23,520 --> 01:44:26,400
should be included into the access token

2621
01:44:26,400 --> 01:44:29,119
in order to allow given operation on a

2622
01:44:29,119 --> 01:44:31,440
given protected resource this can be

2623
01:44:31,440 --> 01:44:35,520
done using an http option request

2624
01:44:35,520 --> 01:44:37,280
to allow an user

2625
01:44:37,280 --> 01:44:39,679
which rs plurals

2626
01:44:39,679 --> 01:44:42,800
are appropriate for each attribute type

2627
01:44:42,800 --> 01:44:45,840
to allow an user to know the reason why

2628
01:44:45,840 --> 01:44:48,480
this attributes type should be disclosed

2629
01:44:48,480 --> 01:44:50,560
of course in their preferred language

2630
01:44:50,560 --> 01:44:53,440
this is your call user notice

2631
01:44:53,440 --> 01:44:55,679
of course allow end user to accept or

2632
01:44:55,679 --> 01:44:58,320
deny fetching those attribute types

2633
01:44:58,320 --> 01:45:00,239
using the preferred language this is

2634
01:45:00,239 --> 01:45:03,840
called user choice and consent

2635
01:45:03,840 --> 01:45:06,400
of course to allow a client to request

2636
01:45:06,400 --> 01:45:07,600
to more

2637
01:45:07,600 --> 01:45:10,000
or to one or more is such attribute

2638
01:45:10,000 --> 01:45:11,360
types

2639
01:45:11,360 --> 01:45:13,600
and something which is interesting in

2640
01:45:13,600 --> 01:45:17,600
terms of privacy to allow client to hide

2641
01:45:17,600 --> 01:45:19,040
to the as

2642
01:45:19,040 --> 01:45:21,040
the identity of the

2643
01:45:21,040 --> 01:45:22,480
rs

2644
01:45:22,480 --> 01:45:25,679
some rs some as may be too curious to

2645
01:45:25,679 --> 01:45:29,199
know which rs are being accessed by

2646
01:45:29,199 --> 01:45:30,639
their user

2647
01:45:30,639 --> 01:45:34,080
and this is possible using an unsigned

2648
01:45:34,080 --> 01:45:36,880
part of the access token as he said they

2649
01:45:36,880 --> 01:45:39,040
proposed on the mailing list

2650
01:45:39,040 --> 01:45:41,360
more than one year ago but still not

2651
01:45:41,360 --> 01:45:44,400
incorporated into the document because

2652
01:45:44,400 --> 01:45:46,480
currently as long as you support

2653
01:45:46,480 --> 01:45:49,360
capabilities you must disclose the

2654
01:45:49,360 --> 01:45:52,639
identity of the rs but when you support

2655
01:45:52,639 --> 01:45:55,280
attributes you don't necessarily need to

2656
01:45:55,280 --> 01:45:56,320
disclose

2657
01:45:56,320 --> 01:46:00,080
the identity of the rs next

2658
01:46:00,080 --> 01:46:02,480
please

2659
01:46:02,480 --> 01:46:04,719
now the benefits of the support of

2660
01:46:04,719 --> 01:46:06,960
attributes

2661
01:46:06,960 --> 01:46:08,320
uh rs

2662
01:46:08,320 --> 01:46:10,400
metrist a set of

2663
01:46:10,400 --> 01:46:13,679
authorization server for only some types

2664
01:46:13,679 --> 01:46:16,320
of attributes

2665
01:46:16,320 --> 01:46:18,239
there is no necessary to have a

2666
01:46:18,239 --> 01:46:21,199
bilateral pre-relationship between an

2667
01:46:21,199 --> 01:46:23,600
rs and a s

2668
01:46:23,600 --> 01:46:25,760
the rs trust

2669
01:46:25,760 --> 01:46:27,199
as

2670
01:46:27,199 --> 01:46:29,920
uh as does not need necessarily to trust

2671
01:46:29,920 --> 01:46:35,040
rs when attributes are being supported

2672
01:46:35,520 --> 01:46:39,159
when you are using

2673
01:46:41,199 --> 01:46:43,679
attributes the ro is working in

2674
01:46:43,679 --> 01:46:46,400
collaboration with an rs

2675
01:46:46,400 --> 01:46:48,239
with where it is different of course

2676
01:46:48,239 --> 01:46:49,280
when

2677
01:46:49,280 --> 01:46:51,679
rights are being supported

2678
01:46:51,679 --> 01:46:54,880
and the as can be kept ignorant of which

2679
01:46:54,880 --> 01:46:57,040
action will be performed by your client

2680
01:46:57,040 --> 01:46:59,199
and on which resources

2681
01:46:59,199 --> 01:47:01,119
this is an important privacy

2682
01:47:01,119 --> 01:47:03,040
consideration

2683
01:47:03,040 --> 01:47:07,040
and as i already indicated in some cases

2684
01:47:07,040 --> 01:47:09,360
which means not all cases

2685
01:47:09,360 --> 01:47:13,040
the is can be kept ignorant of which rs

2686
01:47:13,040 --> 01:47:14,639
will be accessed

2687
01:47:14,639 --> 01:47:16,719
which means that the true identifier of

2688
01:47:16,719 --> 01:47:19,280
the rs can be concealed to the client to

2689
01:47:19,280 --> 01:47:20,960
the

2690
01:47:20,960 --> 01:47:23,199
rs by the client

2691
01:47:23,199 --> 01:47:24,239
but

2692
01:47:24,239 --> 01:47:27,600
the access token is still targeted to

2693
01:47:27,600 --> 01:47:29,280
the rs

2694
01:47:29,280 --> 01:47:32,080
and finally the following privacy

2695
01:47:32,080 --> 01:47:34,159
property should be supported

2696
01:47:34,159 --> 01:47:35,600
user notice

2697
01:47:35,600 --> 01:47:37,280
user choice

2698
01:47:37,280 --> 01:47:39,119
user consent

2699
01:47:39,119 --> 01:47:40,320
and

2700
01:47:40,320 --> 01:47:43,280
there is a third one that some people do

2701
01:47:43,280 --> 01:47:46,560
not like because they want access token

2702
01:47:46,560 --> 01:47:49,360
to be opaque but transparency

2703
01:47:49,360 --> 01:47:52,480
means that the end user or the client

2704
01:47:52,480 --> 01:47:54,880
working on behalf of the end user must

2705
01:47:54,880 --> 01:47:57,280
be able to verify that what has been

2706
01:47:57,280 --> 01:47:59,760
requested is really what has been

2707
01:47:59,760 --> 01:48:02,560
obtained and for that the analysis of

2708
01:48:02,560 --> 01:48:04,800
the access token is needed

2709
01:48:04,800 --> 01:48:07,360
next one

2710
01:48:09,920 --> 01:48:11,040
now

2711
01:48:11,040 --> 01:48:14,080
draft 8 make a general assumption that

2712
01:48:14,080 --> 01:48:15,760
an end user

2713
01:48:15,760 --> 01:48:18,880
and arrow are the same entity

2714
01:48:18,880 --> 01:48:19,920
however

2715
01:48:19,920 --> 01:48:22,560
there is a note that say pinup makes no

2716
01:48:22,560 --> 01:48:25,119
general exception that they are

2717
01:48:25,119 --> 01:48:28,719
well unfortunately the note is incorrect

2718
01:48:28,719 --> 01:48:32,560
when you look at section 1 5 1 1 5 2 and

2719
01:48:32,560 --> 01:48:34,880
all other section from 1 5

2720
01:48:34,880 --> 01:48:37,199
there is not a single example where the

2721
01:48:37,199 --> 01:48:40,000
end user is not also the arrow and when

2722
01:48:40,000 --> 01:48:42,719
the ro is an automatic process

2723
01:48:42,719 --> 01:48:45,360
so this will need to be corrected

2724
01:48:45,360 --> 01:48:47,839
next one

2725
01:48:49,920 --> 01:48:53,840
now trust relationship in draft 8

2726
01:48:53,840 --> 01:48:56,320
section 1 4 is supposed to be about

2727
01:48:56,320 --> 01:48:59,199
trust relationship but in fact it is not

2728
01:48:59,199 --> 01:49:01,679
it is based on the promised theory which

2729
01:49:01,679 --> 01:49:04,800
is a 300 pages document

2730
01:49:04,800 --> 01:49:06,800
where you can read that the promises

2731
01:49:06,800 --> 01:49:08,480
stated intention

2732
01:49:08,480 --> 01:49:10,800
each agent defines its own valuation

2733
01:49:10,800 --> 01:49:14,080
function of promise given or received

2734
01:49:14,080 --> 01:49:16,440
you have to wait on page

2735
01:49:16,440 --> 01:49:20,560
108 to find the first definition of what

2736
01:49:20,560 --> 01:49:22,000
trust is

2737
01:49:22,000 --> 01:49:22,800
and

2738
01:49:22,800 --> 01:49:25,440
you just define you just discover

2739
01:49:25,440 --> 01:49:26,960
that

2740
01:49:26,960 --> 01:49:29,679
trust is an agent expectations that the

2741
01:49:29,679 --> 01:49:32,400
promise will be kept and it's a bias and

2742
01:49:32,400 --> 01:49:34,880
property with a value

2743
01:49:34,880 --> 01:49:37,199
lying between zero and one

2744
01:49:37,199 --> 01:49:41,119
so you trust 220 25 22

2745
01:49:41,119 --> 01:49:42,560
that's crazy

2746
01:49:42,560 --> 01:49:45,360
in the iit community trust is a binary

2747
01:49:45,360 --> 01:49:48,239
combination it's one or zero either you

2748
01:49:48,239 --> 01:49:50,960
trust something or you don't trust

2749
01:49:50,960 --> 01:49:53,920
and we should not mix trust relationship

2750
01:49:53,920 --> 01:49:56,560
with preliminarities of course

2751
01:49:56,560 --> 01:49:58,800
there are availabilities in a system but

2752
01:49:58,800 --> 01:50:01,679
trust are remains the same

2753
01:50:01,679 --> 01:50:02,480
well

2754
01:50:02,480 --> 01:50:05,599
section one four is failing to indicate

2755
01:50:05,599 --> 01:50:07,679
relationship relationship that any

2756
01:50:07,679 --> 01:50:10,480
exists between client instance and auto

2757
01:50:10,480 --> 01:50:12,000
application

2758
01:50:12,000 --> 01:50:13,360
server

2759
01:50:13,360 --> 01:50:15,840
authorization server sorry and end user

2760
01:50:15,840 --> 01:50:18,320
and alteration server so the trace

2761
01:50:18,320 --> 01:50:21,440
relationship condition are not complete

2762
01:50:21,440 --> 01:50:23,199
and those that are described are

2763
01:50:23,199 --> 01:50:24,560
incorrect

2764
01:50:24,560 --> 01:50:27,119
next one

2765
01:50:29,679 --> 01:50:30,719
now

2766
01:50:30,719 --> 01:50:32,639
on the same track

2767
01:50:32,639 --> 01:50:35,119
in draft eight the link if any between

2768
01:50:35,119 --> 01:50:37,280
client instance authentication and end

2769
01:50:37,280 --> 01:50:40,800
user authentication is left undefined

2770
01:50:40,800 --> 01:50:42,880
how may a client instance be associated

2771
01:50:42,880 --> 01:50:44,320
with an end user

2772
01:50:44,320 --> 01:50:46,639
i would guess that the editors knows

2773
01:50:46,639 --> 01:50:49,199
that response however this is left

2774
01:50:49,199 --> 01:50:51,360
undefined in the draft

2775
01:50:51,360 --> 01:50:53,280
how may nas be confident that the

2776
01:50:53,280 --> 01:50:56,400
legitimate user is using a given given

2777
01:50:56,400 --> 01:50:59,280
client instance this is also less left

2778
01:50:59,280 --> 01:51:01,199
undefined

2779
01:51:01,199 --> 01:51:04,159
now you can find an interesting sentence

2780
01:51:04,159 --> 01:51:07,360
on page five of the draft the end user

2781
01:51:07,360 --> 01:51:09,440
operating the software

2782
01:51:09,440 --> 01:51:10,480
may

2783
01:51:10,480 --> 01:51:13,119
the world is important may interact with

2784
01:51:13,119 --> 01:51:15,119
the trojan server to authenticate

2785
01:51:15,119 --> 01:51:17,440
provide consent and authorize the

2786
01:51:17,440 --> 01:51:18,800
request

2787
01:51:18,800 --> 01:51:22,719
hence the draft does not require an user

2788
01:51:22,719 --> 01:51:24,719
to authenticate

2789
01:51:24,719 --> 01:51:28,000
well uh a thing that i just remarked on

2790
01:51:28,000 --> 01:51:30,080
the flyer is that draft 8 will be

2791
01:51:30,080 --> 01:51:33,920
enabled to comply with a directive from

2792
01:51:33,920 --> 01:51:36,400
the european union which is about the

2793
01:51:36,400 --> 01:51:40,800
payment service directive or ps d2 which

2794
01:51:40,800 --> 01:51:42,199
requires

2795
01:51:42,199 --> 01:51:45,119
multi-factor authentication

2796
01:51:45,119 --> 01:51:48,000
and how that's this shall be supported

2797
01:51:48,000 --> 01:51:50,000
or may be supported is fully left

2798
01:51:50,000 --> 01:51:52,639
undefined

2799
01:51:52,880 --> 01:51:55,360
next one

2800
01:51:58,480 --> 01:52:00,960
now what is what is more important is

2801
01:52:00,960 --> 01:52:05,440
draft 8 model is insecure

2802
01:52:05,440 --> 01:52:08,000
there is a section

2803
01:52:08,000 --> 01:52:08,800
called

2804
01:52:08,800 --> 01:52:11,199
protection of client instance key

2805
01:52:11,199 --> 01:52:14,880
material section 12 3

2806
01:52:14,880 --> 01:52:17,360
and that section in fact is not

2807
01:52:17,360 --> 01:52:20,239
addressing the protection of this key

2808
01:52:20,239 --> 01:52:22,480
instance immaterial

2809
01:52:22,480 --> 01:52:23,599
anyway

2810
01:52:23,599 --> 01:52:26,400
such a protection cannot be guaranteed

2811
01:52:26,400 --> 01:52:28,639
even if you use a hardware security

2812
01:52:28,639 --> 01:52:31,360
module to protect the private private

2813
01:52:31,360 --> 01:52:34,159
key you cannot access the value to the

2814
01:52:34,159 --> 01:52:36,880
private key but you can still use that

2815
01:52:36,880 --> 01:52:38,159
private key

2816
01:52:38,159 --> 01:52:41,040
so as soon as two client instances

2817
01:52:41,040 --> 01:52:42,320
collaborate

2818
01:52:42,320 --> 01:52:44,719
the security foundation of the drive f

2819
01:52:44,719 --> 01:52:46,159
collapse

2820
01:52:46,159 --> 01:52:48,800
a solution resistant to client

2821
01:52:48,800 --> 01:52:51,840
collaborative attacks is needed and is

2822
01:52:51,840 --> 01:52:56,199
possible next slide

2823
01:52:58,159 --> 01:53:00,800
well it is in fact unfortunate that such

2824
01:53:00,800 --> 01:53:04,480
solution is negated in draft 8.

2825
01:53:04,480 --> 01:53:07,280
this was new text that was added

2826
01:53:07,280 --> 01:53:08,080
and

2827
01:53:08,080 --> 01:53:10,719
it is said however note that the lack of

2828
01:53:10,719 --> 01:53:14,080
inclusion of a user identifier in an

2829
01:53:14,080 --> 01:53:15,440
access token

2830
01:53:15,440 --> 01:53:17,920
may be a risk if there is a concern that

2831
01:53:17,920 --> 01:53:20,800
two users may voluntary share access

2832
01:53:20,800 --> 01:53:22,080
token

2833
01:53:22,080 --> 01:53:25,520
fine then since that is the solution

2834
01:53:25,520 --> 01:53:28,400
since on the contrary the inclusion of

2835
01:53:28,400 --> 01:53:30,960
the user identifier in an access token

2836
01:53:30,960 --> 01:53:33,679
is able to prevent to end user or to

2837
01:53:33,679 --> 01:53:36,800
client to voluntary share access token

2838
01:53:36,800 --> 01:53:39,360
between them

2839
01:53:39,360 --> 01:53:41,040
now

2840
01:53:41,040 --> 01:53:43,199
we are going to consider the addition of

2841
01:53:43,199 --> 01:53:46,800
a new field that i call the binding user

2842
01:53:46,800 --> 01:53:49,599
identifier in an access token

2843
01:53:49,599 --> 01:53:51,199
that is able to prevent in some

2844
01:53:51,199 --> 01:53:52,560
situation

2845
01:53:52,560 --> 01:53:55,119
the access token from being voluntary

2846
01:53:55,119 --> 01:53:58,480
shared next slide

2847
01:54:01,760 --> 01:54:03,760
now there are two concepts to be

2848
01:54:03,760 --> 01:54:06,840
considered before diving into the

2849
01:54:06,840 --> 01:54:08,560
fielder

2850
01:54:08,560 --> 01:54:10,719
in fact you can

2851
01:54:10,719 --> 01:54:13,199
for example want to access your bank

2852
01:54:13,199 --> 01:54:15,440
account and when you do that you are

2853
01:54:15,440 --> 01:54:18,480
accessing what i call a long-term user

2854
01:54:18,480 --> 01:54:19,599
account

2855
01:54:19,599 --> 01:54:22,560
you want some data to be kept by the

2856
01:54:22,560 --> 01:54:24,159
bank about you

2857
01:54:24,159 --> 01:54:26,800
when you unlock and when you reload

2858
01:54:26,800 --> 01:54:28,080
again

2859
01:54:28,080 --> 01:54:30,239
on the contrary you may use short-term

2860
01:54:30,239 --> 01:54:32,560
user account an example is you make a

2861
01:54:32,560 --> 01:54:34,080
transaction

2862
01:54:34,080 --> 01:54:36,719
without the creation of a user account

2863
01:54:36,719 --> 01:54:38,480
and when the session is closed when you

2864
01:54:38,480 --> 01:54:40,719
got your ticket maybe send on your email

2865
01:54:40,719 --> 01:54:42,000
address

2866
01:54:42,000 --> 01:54:44,880
the rs will not maintain any information

2867
01:54:44,880 --> 01:54:47,280
about that temporary user account it is

2868
01:54:47,280 --> 01:54:48,719
closed

2869
01:54:48,719 --> 01:54:51,840
next slide

2870
01:54:56,639 --> 01:54:59,920
we are at the five or six minutes mark

2871
01:54:59,920 --> 01:55:02,320
you may want to either wrap up and take

2872
01:55:02,320 --> 01:55:06,559
questions or continue up to you

2873
01:55:06,880 --> 01:55:08,400
well we can

2874
01:55:08,400 --> 01:55:11,280
go to the next one

2875
01:55:14,800 --> 01:55:17,119
well there are five types of by by being

2876
01:55:17,119 --> 01:55:19,440
using identifier and what is very

2877
01:55:19,440 --> 01:55:23,280
important is that the four types are

2878
01:55:23,280 --> 01:55:26,639
exhibiting different privacy properties

2879
01:55:26,639 --> 01:55:29,040
the first type is the best one because

2880
01:55:29,040 --> 01:55:30,560
it is able to

2881
01:55:30,560 --> 01:55:33,840
prevent correlation of

2882
01:55:33,840 --> 01:55:36,400
end user between rs

2883
01:55:36,400 --> 01:55:39,520
and it is also able to prevent

2884
01:55:39,520 --> 01:55:42,080
the authorization server to know the

2885
01:55:42,080 --> 01:55:45,360
identity of the rs that the

2886
01:55:45,360 --> 01:55:48,560
uh the best way to do that however to do

2887
01:55:48,560 --> 01:55:49,840
that you need

2888
01:55:49,840 --> 01:55:53,280
a hardware security module no a secure

2889
01:55:53,280 --> 01:55:55,440
element

2890
01:55:55,440 --> 01:55:57,520
from the end user

2891
01:55:57,520 --> 01:56:01,760
you can have a unique pair for each

2892
01:56:01,760 --> 01:56:03,440
asrs

2893
01:56:03,440 --> 01:56:05,840
but the inconvenience is that you must

2894
01:56:05,840 --> 01:56:08,320
disclose to the as the identity of the

2895
01:56:08,320 --> 01:56:09,599
rs

2896
01:56:09,599 --> 01:56:11,679
and the two last cases

2897
01:56:11,679 --> 01:56:12,960
are

2898
01:56:12,960 --> 01:56:16,000
a loss correlation between rs

2899
01:56:16,000 --> 01:56:19,440
but have the advantage to hide to the as

2900
01:56:19,440 --> 01:56:22,159
the identity of the rs

2901
01:56:22,159 --> 01:56:25,040
the fifth type is used for short-term

2902
01:56:25,040 --> 01:56:26,880
user accounts only

2903
01:56:26,880 --> 01:56:29,840
next one

2904
01:56:32,000 --> 01:56:32,800
so

2905
01:56:32,800 --> 01:56:35,280
i will let you read that

2906
01:56:35,280 --> 01:56:37,599
slide to know understand let you

2907
01:56:37,599 --> 01:56:39,840
understand how that works

2908
01:56:39,840 --> 01:56:42,480
that this mechanism does not protect

2909
01:56:42,480 --> 01:56:44,400
against impersonation

2910
01:56:44,400 --> 01:56:46,320
it allows bob

2911
01:56:46,320 --> 01:56:49,040
it prevents bob to send his an access

2912
01:56:49,040 --> 01:56:52,880
token to alice so that alice can use it

2913
01:56:52,880 --> 01:56:54,800
on her own user

2914
01:56:54,800 --> 01:56:56,639
long-term user account

2915
01:56:56,639 --> 01:56:58,960
and that is very important because if

2916
01:56:58,960 --> 01:57:00,719
bob is older than

2917
01:57:00,719 --> 01:57:01,840
18

2918
01:57:01,840 --> 01:57:04,159
he cannot transmit that access token to

2919
01:57:04,159 --> 01:57:07,599
alice that is younger than 18.

2920
01:57:07,599 --> 01:57:10,840
next one

2921
01:57:13,280 --> 01:57:15,520
now there are different legislation

2922
01:57:15,520 --> 01:57:18,080
uh in european unions and i believe they

2923
01:57:18,080 --> 01:57:20,239
should be considered the first one is

2924
01:57:20,239 --> 01:57:23,920
the gdpr the second one is a psd2

2925
01:57:23,920 --> 01:57:26,719
directive and the last one is simply a

2926
01:57:26,719 --> 01:57:29,920
proposal that highlights the fact that

2927
01:57:29,920 --> 01:57:32,880
attributes are being the direction

2928
01:57:32,880 --> 01:57:35,040
that is likely to be followed by the

2929
01:57:35,040 --> 01:57:36,480
european union

2930
01:57:36,480 --> 01:57:39,119
and at this time none of these theory of

2931
01:57:39,119 --> 01:57:41,520
these documents are being considered

2932
01:57:41,520 --> 01:57:44,080
last slide

2933
01:57:46,080 --> 01:57:49,440
now i propose a modify model where both

2934
01:57:49,440 --> 01:57:51,679
attributes and capabilities should be

2935
01:57:51,679 --> 01:57:52,960
supported

2936
01:57:52,960 --> 01:57:55,840
where end user shall authenticate to the

2937
01:57:55,840 --> 01:57:57,040
as

2938
01:57:57,040 --> 01:57:59,599
where trust relationships are clear and

2939
01:57:59,599 --> 01:58:01,360
understandable

2940
01:58:01,360 --> 01:58:03,280
and where in order to defeat

2941
01:58:03,280 --> 01:58:05,840
collaborative attack access token should

2942
01:58:05,840 --> 01:58:09,199
be protected using the byd mechanism

2943
01:58:09,199 --> 01:58:10,560
and in order to protect the

2944
01:58:10,560 --> 01:58:13,199
impersonation access token should be

2945
01:58:13,199 --> 01:58:14,560
protected using

2946
01:58:14,560 --> 01:58:18,639
mutual cls with fml client key pairs and

2947
01:58:18,639 --> 01:58:21,840
that's it

2948
01:58:22,800 --> 01:58:25,760
thank you very much

2949
01:58:32,239 --> 01:58:36,239
any questions to deny or in fact

2950
01:58:36,239 --> 01:58:38,560
any other questions in the last two

2951
01:58:38,560 --> 01:58:40,960
minutes

2952
01:58:44,560 --> 01:58:47,800
yes fabian

2953
01:58:48,320 --> 01:58:50,400
yes it's just to say that

2954
01:58:50,400 --> 01:58:52,159
all these different uh

2955
01:58:52,159 --> 01:58:54,639
issues have been discussed at length uh

2956
01:58:54,639 --> 01:58:56,320
on the github

2957
01:58:56,320 --> 01:58:57,840
repository

2958
01:58:57,840 --> 01:58:58,880
and so

2959
01:58:58,880 --> 01:59:01,840
um of course if there are

2960
01:59:01,840 --> 01:59:05,199
some criticisms to to reuse and

2961
01:59:05,199 --> 01:59:07,119
implement into the draft we're very open

2962
01:59:07,119 --> 01:59:08,239
to that

2963
01:59:08,239 --> 01:59:09,199
but

2964
01:59:09,199 --> 01:59:12,239
most of the comments that this has made

2965
01:59:12,239 --> 01:59:15,280
um have already been answered

2966
01:59:15,280 --> 01:59:17,920
and we've provided actually the rational

2967
01:59:17,920 --> 01:59:18,719
for

2968
01:59:18,719 --> 01:59:20,639
rejecting those so

2969
01:59:20,639 --> 01:59:23,360
of course we we are very open to more

2970
01:59:23,360 --> 01:59:25,280
discussion from from other people in the

2971
01:59:25,280 --> 01:59:27,760
working group but so far

2972
01:59:27,760 --> 01:59:29,679
i think it's pretty clear it won't be

2973
01:59:29,679 --> 01:59:32,400
included unless there's a

2974
01:59:32,400 --> 01:59:36,000
general agreement on that

2975
01:59:43,280 --> 01:59:46,400
any other comments

2976
01:59:49,520 --> 01:59:51,599
all right

2977
01:59:51,599 --> 01:59:54,639
thank you very much

2978
01:59:56,080 --> 01:59:58,800
and thank you all for joining us

2979
01:59:58,800 --> 01:59:59,599
uh

2980
01:59:59,599 --> 02:00:00,560
please

2981
02:00:00,560 --> 02:00:02,960
if you can spare the next half hour

2982
02:00:02,960 --> 02:00:04,480
please join us

2983
02:00:04,480 --> 02:00:07,920
in room six of gather

2984
02:00:07,920 --> 02:00:09,520
and uh

2985
02:00:09,520 --> 02:00:13,320
see you next time

2986
02:00:29,520 --> 02:00:31,599
you

