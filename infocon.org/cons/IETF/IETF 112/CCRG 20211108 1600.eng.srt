1
00:00:13,120 --> 00:00:15,759
jonah that's this that's the same

2
00:00:15,759 --> 00:00:20,480
one as the as the one in mid echo right

3
00:00:20,480 --> 00:00:22,160
it should be yeah yeah it's the same one

4
00:00:22,160 --> 00:00:24,320
here okay i got it thanks

5
00:00:24,320 --> 00:00:28,680
thanks zeke thanks lucas

6
00:01:23,680 --> 00:01:24,880
all right

7
00:01:24,880 --> 00:01:27,439
it's a minute passed um so let's get

8
00:01:27,439 --> 00:01:29,200
started

9
00:01:29,200 --> 00:01:33,759
um welcome to iccrg at iit f112

10
00:01:33,759 --> 00:01:36,320
uh we are meeting after about six

11
00:01:36,320 --> 00:01:39,119
um oh after about eight months

12
00:01:39,119 --> 00:01:41,200
so i hope you had

13
00:01:41,200 --> 00:01:44,479
a good eight months and

14
00:01:44,640 --> 00:01:46,640
i'm looking forward to our session today

15
00:01:46,640 --> 00:01:49,119
it's a pretty packed agenda

16
00:01:49,119 --> 00:01:52,840
um and i hope to get through all of it

17
00:01:52,840 --> 00:01:56,719
so i'll start off by um

18
00:01:56,719 --> 00:01:59,439
with the with the irdf note well which

19
00:01:59,439 --> 00:02:01,600
is pretty similar to the ietf model if

20
00:02:01,600 --> 00:02:04,159
you're not familiar with it you should

21
00:02:04,159 --> 00:02:06,320
you should read this carefully

22
00:02:06,320 --> 00:02:08,399
at a high level i will simply point out

23
00:02:08,399 --> 00:02:10,878
that you are simply following these idf

24
00:02:10,878 --> 00:02:12,879
processes and policies by participating

25
00:02:12,879 --> 00:02:14,720
in terms of your the intellectual

26
00:02:14,720 --> 00:02:17,440
property of anything that you share

27
00:02:17,440 --> 00:02:19,760
um you are expected to file ipr

28
00:02:19,760 --> 00:02:21,680
disclosures on anything that you file

29
00:02:21,680 --> 00:02:24,160
that might have ipr that you're aware of

30
00:02:24,160 --> 00:02:26,480
otherwise

31
00:02:26,480 --> 00:02:30,160
read the note for more details

32
00:02:31,200 --> 00:02:32,480
generally

33
00:02:32,480 --> 00:02:34,319
i will just point out one thing on the

34
00:02:34,319 --> 00:02:35,840
code of conduct

35
00:02:35,840 --> 00:02:38,879
please work respectfully this is a

36
00:02:38,879 --> 00:02:40,239
group of

37
00:02:40,239 --> 00:02:42,480
people from many different

38
00:02:42,480 --> 00:02:44,400
backgrounds and many different

39
00:02:44,400 --> 00:02:47,040
uh with many different views um be

40
00:02:47,040 --> 00:02:48,160
respectful

41
00:02:48,160 --> 00:02:52,480
and have respectful discussions

42
00:02:52,480 --> 00:02:55,120
and finally the goals of the irdf

43
00:02:55,120 --> 00:02:57,519
specifically pointing out that the irtf

44
00:02:57,519 --> 00:02:59,280
conducts research and it is not a

45
00:02:59,280 --> 00:03:02,319
standards organization so as you as you

46
00:03:02,319 --> 00:03:04,480
engage as you participate and as you

47
00:03:04,480 --> 00:03:06,319
discuss items bear in mind that we are

48
00:03:06,319 --> 00:03:09,840
not trying to standardize anything here

49
00:03:09,840 --> 00:03:12,720
and with that let's get to the agenda

50
00:03:12,720 --> 00:03:13,680
so

51
00:03:13,680 --> 00:03:15,760
um

52
00:03:15,760 --> 00:03:17,760
basically we have we have a number of

53
00:03:17,760 --> 00:03:18,400
things

54
00:03:18,400 --> 00:03:21,920
uh uh today we're going to start with

55
00:03:21,920 --> 00:03:23,040
a a

56
00:03:23,040 --> 00:03:25,440
a different uh item

57
00:03:25,440 --> 00:03:28,400
than usual which is uh uh

58
00:03:28,400 --> 00:03:29,920
source priority flow control and data

59
00:03:29,920 --> 00:03:34,319
centers um from jk lee who's at intel

60
00:03:34,319 --> 00:03:36,159
and i will let him

61
00:03:36,159 --> 00:03:37,680
talk about this this is different in the

62
00:03:37,680 --> 00:03:39,920
sense that we don't normally

63
00:03:39,920 --> 00:03:42,640
or off in anyways talk about data center

64
00:03:42,640 --> 00:03:43,840
stuff

65
00:03:43,840 --> 00:03:45,120
and we

66
00:03:45,120 --> 00:03:47,519
have sometimes done that

67
00:03:47,519 --> 00:03:49,840
and we have a presentation here which

68
00:03:49,840 --> 00:03:51,519
seems to be very much

69
00:03:51,519 --> 00:03:54,400
uh on target for iccrg so we're going to

70
00:03:54,400 --> 00:03:56,319
talk about that first

71
00:03:56,319 --> 00:03:57,920
after that it's

72
00:03:57,920 --> 00:04:00,480
going to be uh

73
00:04:00,480 --> 00:04:02,720
more

74
00:04:03,120 --> 00:04:05,360
things that you are used to we're going

75
00:04:05,360 --> 00:04:06,799
to start off with we're going to go on

76
00:04:06,799 --> 00:04:07,680
to

77
00:04:07,680 --> 00:04:13,200
a ccid for bvr for dccp followed by a

78
00:04:13,200 --> 00:04:16,238
presentation from ayosh mishra on

79
00:04:16,238 --> 00:04:18,079
the game theory behind running cubic and

80
00:04:18,079 --> 00:04:21,199
dvr you've seen ayush in the past at

81
00:04:21,199 --> 00:04:23,360
iccrg and i'm looking forward to this

82
00:04:23,360 --> 00:04:25,919
presentation

83
00:04:25,919 --> 00:04:27,120
and then we have

84
00:04:27,120 --> 00:04:30,400
uh updates on bbr v2 from ravine and

85
00:04:30,400 --> 00:04:32,639
neil and ian and praveen is also going

86
00:04:32,639 --> 00:04:34,960
to give us an update on our like that

87
00:04:34,960 --> 00:04:39,840
so with that i'm going to get started um

88
00:04:40,320 --> 00:04:43,759
jk do you are you here

89
00:04:43,759 --> 00:04:45,280
yes hi

90
00:04:45,280 --> 00:04:46,560
oh there you go

91
00:04:46,560 --> 00:04:49,440
wonderful so you can uh for for all the

92
00:04:49,440 --> 00:04:51,680
speakers you can you can present your

93
00:04:51,680 --> 00:04:53,759
own slides you just have to go to the

94
00:04:53,759 --> 00:04:54,880
little

95
00:04:54,880 --> 00:04:57,759
start slides share

96
00:04:57,759 --> 00:04:59,840
button which is right next to the hand

97
00:04:59,840 --> 00:05:02,479
the raised hand thing uh on the left

98
00:05:02,479 --> 00:05:04,320
there we go

99
00:05:04,320 --> 00:05:07,199
and i will

100
00:05:07,600 --> 00:05:09,919
allow you to do that which you should

101
00:05:09,919 --> 00:05:12,880
now be able to

102
00:05:15,360 --> 00:05:18,160
i'm gonna try to grant

103
00:05:18,160 --> 00:05:21,919
try to stop sharing first apps

104
00:05:23,440 --> 00:05:25,520
ah

105
00:05:25,520 --> 00:05:29,758
and now you shaw skin should be

106
00:05:31,120 --> 00:05:34,000
okay i mean

107
00:05:34,000 --> 00:05:35,360
excellent

108
00:05:35,360 --> 00:05:36,840
the flow is yours

109
00:05:36,840 --> 00:05:39,840
jk thank you very much everyone um this

110
00:05:39,840 --> 00:05:42,000
i'm jk lee a principal engineer from

111
00:05:42,000 --> 00:05:42,960
intel

112
00:05:42,960 --> 00:05:45,680
uh this is my first time attending ietf

113
00:05:45,680 --> 00:05:46,479
so

114
00:05:46,479 --> 00:05:47,520
um

115
00:05:47,520 --> 00:05:50,320
i'm glad to be part of this forum

116
00:05:50,320 --> 00:05:52,639
um yeah i'm going to talk a little bit

117
00:05:52,639 --> 00:05:53,919
about

118
00:05:53,919 --> 00:05:57,120
source flow control or a little bit more

119
00:05:57,120 --> 00:05:58,479
degenerative form which is source

120
00:05:58,479 --> 00:06:01,199
priority flow control source pfc

121
00:06:01,199 --> 00:06:03,039
and this has been a

122
00:06:03,039 --> 00:06:04,880
collaboration mostly between inter and

123
00:06:04,880 --> 00:06:06,560
recently we started to talk about you

124
00:06:06,560 --> 00:06:09,759
said i3 a report condo and then lilly

125
00:06:09,759 --> 00:06:12,319
probably

126
00:06:13,680 --> 00:06:17,840
oh sorry i need to click here good so um

127
00:06:17,840 --> 00:06:19,440
i don't think i need to

128
00:06:19,440 --> 00:06:21,440
go through what kind of conditions are

129
00:06:21,440 --> 00:06:23,440
there in data center there are multiple

130
00:06:23,440 --> 00:06:24,960
different types but one type we are

131
00:06:24,960 --> 00:06:28,400
looking at right now is incase condition

132
00:06:28,400 --> 00:06:30,720
which is mostly caused by the money to

133
00:06:30,720 --> 00:06:32,400
one traffic pattern

134
00:06:32,400 --> 00:06:34,400
and it uh mostly happens that the last

135
00:06:34,400 --> 00:06:35,840
of switch is the last of course for our

136
00:06:35,840 --> 00:06:37,520
second half switches

137
00:06:37,520 --> 00:06:39,199
and it drastically

138
00:06:39,199 --> 00:06:42,960
uh goblins affects the uh tail latency

139
00:06:42,960 --> 00:06:45,039
because of the large queen delay or even

140
00:06:45,039 --> 00:06:47,280
it can cause packet drops

141
00:06:47,280 --> 00:06:48,720
and

142
00:06:48,720 --> 00:06:50,479
absolutely this tail latency is well

143
00:06:50,479 --> 00:06:51,840
known to have a

144
00:06:51,840 --> 00:06:54,240
large impact on the application

145
00:06:54,240 --> 00:06:56,080
performance for our scale

146
00:06:56,080 --> 00:06:57,919
metrics

147
00:06:57,919 --> 00:06:59,440
and especially when

148
00:06:59,440 --> 00:07:02,720
incase happens due to the line rate rdna

149
00:07:02,720 --> 00:07:05,919
senders because they are really

150
00:07:05,919 --> 00:07:07,680
starting to send at the right line rate

151
00:07:07,680 --> 00:07:10,400
or the messages and uh connections

152
00:07:10,400 --> 00:07:12,960
um the the same size the message can

153
00:07:12,960 --> 00:07:14,720
actually finish really short amount of

154
00:07:14,720 --> 00:07:16,880
time which means that it doesn't really

155
00:07:16,880 --> 00:07:20,240
give large uh rtt time for the condition

156
00:07:20,240 --> 00:07:21,280
control

157
00:07:21,280 --> 00:07:22,000
to

158
00:07:22,000 --> 00:07:24,639
detect and then converge and react to

159
00:07:24,639 --> 00:07:26,160
the condition so

160
00:07:26,160 --> 00:07:27,919
fast reaction

161
00:07:27,919 --> 00:07:30,319
possibly at the sub rtt time is more

162
00:07:30,319 --> 00:07:33,280
preferable with rdma incas in data

163
00:07:33,280 --> 00:07:35,599
center

164
00:07:38,479 --> 00:07:41,680
so yeah obviously for congestion we

165
00:07:41,680 --> 00:07:44,160
the community has been working on

166
00:07:44,160 --> 00:07:46,080
entering condition control for many many

167
00:07:46,080 --> 00:07:48,160
decades

168
00:07:48,160 --> 00:07:50,400
and at hell level yeah it's uh

169
00:07:50,400 --> 00:07:51,360
end-to-end

170
00:07:51,360 --> 00:07:52,800
signaling

171
00:07:52,800 --> 00:07:54,960
from four direction data packets and

172
00:07:54,960 --> 00:07:57,199
echoed by the receiver so that the

173
00:07:57,199 --> 00:07:59,680
sender can adjust its transmission rates

174
00:07:59,680 --> 00:08:01,440
and condition window

175
00:08:01,440 --> 00:08:02,560
and

176
00:08:02,560 --> 00:08:04,800
one thing we kind of notice here is that

177
00:08:04,800 --> 00:08:07,120
the condition signaling itself is

178
00:08:07,120 --> 00:08:08,479
carried by

179
00:08:08,479 --> 00:08:10,879
the the data packets

180
00:08:10,879 --> 00:08:13,039
either explicit condition notification

181
00:08:13,039 --> 00:08:14,960
like ecn or

182
00:08:14,960 --> 00:08:17,759
rtt measurement so they happen to be

183
00:08:17,759 --> 00:08:20,319
copper with ongoing congestion

184
00:08:20,319 --> 00:08:23,840
and um if for example there's a new

185
00:08:23,840 --> 00:08:26,479
sender arriving at the

186
00:08:26,479 --> 00:08:28,879
the tail of the heavily congested queue

187
00:08:28,879 --> 00:08:29,759
then

188
00:08:29,759 --> 00:08:32,080
the the new the pocket the first packet

189
00:08:32,080 --> 00:08:34,640
of this new flow has to wait until

190
00:08:34,640 --> 00:08:37,200
um the all the other congested packets

191
00:08:37,200 --> 00:08:39,599
are dequeued out and then finally hit

192
00:08:39,599 --> 00:08:42,880
the receiver and then can be echoed back

193
00:08:42,880 --> 00:08:45,760
and also the nature of aimd or

194
00:08:45,760 --> 00:08:47,680
the typical um

195
00:08:47,680 --> 00:08:50,080
rate control mechanism it takes multiple

196
00:08:50,080 --> 00:08:53,040
rtts to actually flatten the curve

197
00:08:53,040 --> 00:08:55,600
like if uh if the rate adjustment

198
00:08:55,600 --> 00:08:58,000
mechanism is a cut rate by half open the

199
00:08:58,000 --> 00:09:00,240
reaction architecture of congestion that

200
00:09:00,240 --> 00:09:01,360
means that

201
00:09:01,360 --> 00:09:04,560
16 to one in case will take another rtt

202
00:09:04,560 --> 00:09:06,640
for eight to one four to one down to one

203
00:09:06,640 --> 00:09:09,040
to one and eventually we want to really

204
00:09:09,040 --> 00:09:10,959
cut the rate down to zero if there is a

205
00:09:10,959 --> 00:09:13,120
having cast so that we

206
00:09:13,120 --> 00:09:15,519
really flatten the curve that means that

207
00:09:15,519 --> 00:09:19,519
many rtt times will be required

208
00:09:19,680 --> 00:09:21,680
um at the same time there are a number

209
00:09:21,680 --> 00:09:22,640
of

210
00:09:22,640 --> 00:09:25,600
flow control mechanisms mostly layer two

211
00:09:25,600 --> 00:09:29,120
and well known for i3 pfc

212
00:09:29,120 --> 00:09:30,000
and

213
00:09:30,000 --> 00:09:31,839
they are really mean to

214
00:09:31,839 --> 00:09:33,200
uh

215
00:09:33,200 --> 00:09:35,279
prevent congestion practicus from the

216
00:09:35,279 --> 00:09:36,399
beginning

217
00:09:36,399 --> 00:09:37,680
by ex

218
00:09:37,680 --> 00:09:40,959
employing something like uh exonyx of uh

219
00:09:40,959 --> 00:09:43,519
low latency reaction mechanism that is

220
00:09:43,519 --> 00:09:45,600
guaranteed to be happening within one

221
00:09:45,600 --> 00:09:47,680
microsecond detection and reaction can

222
00:09:47,680 --> 00:09:49,760
should happen within one microsecond as

223
00:09:49,760 --> 00:09:52,160
required by the standard

224
00:09:52,160 --> 00:09:54,800
and but it's a hopper hub flow control

225
00:09:54,800 --> 00:09:55,839
so

226
00:09:55,839 --> 00:09:57,760
although it can actually

227
00:09:57,760 --> 00:09:59,680
avoid congestion packet drops from the

228
00:09:59,680 --> 00:10:00,880
beginning

229
00:10:00,880 --> 00:10:03,200
it effectively slows down the fabric

230
00:10:03,200 --> 00:10:05,200
because of the many of the hard drive

231
00:10:05,200 --> 00:10:08,240
line blockings happening at the

232
00:10:08,240 --> 00:10:09,920
inter-switch links

233
00:10:09,920 --> 00:10:11,839
and it can actually back pressure from

234
00:10:11,839 --> 00:10:12,640
the

235
00:10:12,640 --> 00:10:15,120
um transition point to towards the

236
00:10:15,120 --> 00:10:16,880
upstream switches and towards the

237
00:10:16,880 --> 00:10:19,200
eventually to the senders

238
00:10:19,200 --> 00:10:20,480
and

239
00:10:20,480 --> 00:10:22,560
it is well known that some side of

240
00:10:22,560 --> 00:10:24,560
operational side effects like a pfc

241
00:10:24,560 --> 00:10:26,160
storm and deadlocks can happen at the

242
00:10:26,160 --> 00:10:28,399
same time

243
00:10:28,399 --> 00:10:31,839
so um here this presentation we are

244
00:10:31,839 --> 00:10:34,720
going to kind of stress on the needs for

245
00:10:34,720 --> 00:10:38,000
the new layer 3 flow control mechanism

246
00:10:38,000 --> 00:10:39,600
which can give us

247
00:10:39,600 --> 00:10:42,000
immediate detection and reaction

248
00:10:42,000 --> 00:10:42,959
and

249
00:10:42,959 --> 00:10:44,720
um

250
00:10:44,720 --> 00:10:46,720
and the layer is better to be layer

251
00:10:46,720 --> 00:10:49,120
three so that we can reach out um across

252
00:10:49,120 --> 00:10:51,839
the data center

253
00:10:53,760 --> 00:10:57,040
so this is the one slide summary of the

254
00:10:57,040 --> 00:10:58,800
our proposer

255
00:10:58,800 --> 00:11:01,680
so the key idea is very simple

256
00:11:01,680 --> 00:11:04,240
at the congested switch um

257
00:11:04,240 --> 00:11:05,760
which we just first

258
00:11:05,760 --> 00:11:08,880
compute the minimum time required to

259
00:11:08,880 --> 00:11:10,160
drain that

260
00:11:10,160 --> 00:11:13,440
target in case q where you can expect

261
00:11:13,440 --> 00:11:15,519
is something like a expected surgeon

262
00:11:15,519 --> 00:11:16,959
time

263
00:11:16,959 --> 00:11:18,399
of the queue

264
00:11:18,399 --> 00:11:19,360
and

265
00:11:19,360 --> 00:11:21,200
the signal

266
00:11:21,200 --> 00:11:22,720
is

267
00:11:22,720 --> 00:11:24,399
signal packet is generated and carrying

268
00:11:24,399 --> 00:11:26,160
the information backwards

269
00:11:26,160 --> 00:11:29,440
for the incas senders and there are two

270
00:11:29,440 --> 00:11:31,920
different ways for us to consume

271
00:11:31,920 --> 00:11:34,880
uh this information the first one is

272
00:11:34,880 --> 00:11:38,640
um the sender side top of rec switch can

273
00:11:38,640 --> 00:11:40,000
convert this

274
00:11:40,000 --> 00:11:42,880
layer three signaling packet back to

275
00:11:42,880 --> 00:11:46,320
standard pfc to directly pause the

276
00:11:46,320 --> 00:11:51,200
sender nic cues so we call it source pfc

277
00:11:51,200 --> 00:11:52,880
or um the

278
00:11:52,880 --> 00:11:55,120
signal information can be

279
00:11:55,120 --> 00:11:57,040
forwarded back to senders and then

280
00:11:57,040 --> 00:11:58,320
sender

281
00:11:58,320 --> 00:12:00,880
link hardware or host networking stack

282
00:12:00,880 --> 00:12:02,720
can directly consume that information

283
00:12:02,720 --> 00:12:05,600
and pause the search flow and we call it

284
00:12:05,600 --> 00:12:09,880
source flow control or sfc

285
00:12:10,639 --> 00:12:14,160
with that um the next slide is about

286
00:12:14,160 --> 00:12:16,560
simple

287
00:12:16,560 --> 00:12:18,880
diagram depicting the

288
00:12:18,880 --> 00:12:20,160
uh the

289
00:12:20,160 --> 00:12:23,040
behavior of search pfc

290
00:12:23,040 --> 00:12:25,040
so what you're talking about here is

291
00:12:25,040 --> 00:12:28,160
that um simple cartoon data center with

292
00:12:28,160 --> 00:12:30,399
two senders and one receiver there's an

293
00:12:30,399 --> 00:12:32,320
interest happening

294
00:12:32,320 --> 00:12:36,079
um so typically when we enable pfc and

295
00:12:36,079 --> 00:12:39,200
2n that means that the the destination

296
00:12:39,200 --> 00:12:42,720
top of rec switch will create pf's

297
00:12:42,720 --> 00:12:44,639
priority flow control

298
00:12:44,639 --> 00:12:47,120
and this will pause the upstream

299
00:12:47,120 --> 00:12:49,600
aggregation core switch links

300
00:12:49,600 --> 00:12:52,880
instead of that what we do here is that

301
00:12:52,880 --> 00:12:54,800
we assume some simple mechanism at the

302
00:12:54,800 --> 00:12:57,680
switch ingress which can learn about the

303
00:12:57,680 --> 00:13:00,000
ongoing congestion at the switch egress

304
00:13:00,000 --> 00:13:02,079
so even before when we

305
00:13:02,079 --> 00:13:04,399
fold the package from ingress to egress

306
00:13:04,399 --> 00:13:06,880
the ingress pipeline has some capability

307
00:13:06,880 --> 00:13:08,800
to generate a signaling packing back to

308
00:13:08,800 --> 00:13:11,920
the senders

309
00:13:11,920 --> 00:13:15,680
and here for source pfc we are assuming

310
00:13:15,680 --> 00:13:16,480
that

311
00:13:16,480 --> 00:13:18,720
i actually implemented that the

312
00:13:18,720 --> 00:13:20,399
source side topper work switch can

313
00:13:20,399 --> 00:13:22,720
simply convert this layer three similar

314
00:13:22,720 --> 00:13:23,920
packet

315
00:13:23,920 --> 00:13:27,040
to pfc frames so that it can immediately

316
00:13:27,040 --> 00:13:28,320
pause the

317
00:13:28,320 --> 00:13:31,200
uh in case senders

318
00:13:31,200 --> 00:13:33,040
so the entire

319
00:13:33,040 --> 00:13:35,760
detection and reaction can happen within

320
00:13:35,760 --> 00:13:38,399
sub-rtt time where the rtt is

321
00:13:38,399 --> 00:13:41,920
congestion-free based rtt

322
00:13:42,240 --> 00:13:45,279
and here we are not really aiming to

323
00:13:45,279 --> 00:13:47,680
replace entering condition control

324
00:13:47,680 --> 00:13:50,560
this is more about kind of emergency

325
00:13:50,560 --> 00:13:52,320
brake or

326
00:13:52,320 --> 00:13:54,320
reaction to

327
00:13:54,320 --> 00:13:56,480
having cast

328
00:13:56,480 --> 00:13:58,480
because we are not really pausing any of

329
00:13:58,480 --> 00:14:00,720
the inter-switch links there is no head

330
00:14:00,720 --> 00:14:03,519
of line blocking happening between the

331
00:14:03,519 --> 00:14:05,519
inter-switch links and no phd side

332
00:14:05,519 --> 00:14:08,000
effects are expected

333
00:14:08,000 --> 00:14:10,079
um of course we can

334
00:14:10,079 --> 00:14:12,560
deploy this mechanism

335
00:14:12,560 --> 00:14:14,639
every switch in the data center

336
00:14:14,639 --> 00:14:17,519
but from our

337
00:14:17,519 --> 00:14:19,760
simulations and test beds

338
00:14:19,760 --> 00:14:21,600
top of rack switch only upgrades can

339
00:14:21,600 --> 00:14:23,120
actually give us mostly bang for the

340
00:14:23,120 --> 00:14:25,760
buck because i think mostly happens at

341
00:14:25,760 --> 00:14:28,399
the last stop switch and the signal link

342
00:14:28,399 --> 00:14:30,079
between this these couple rack switches

343
00:14:30,079 --> 00:14:32,560
can still give us pretty good

344
00:14:32,560 --> 00:14:36,719
reaction to most of the heavy intestine

345
00:14:37,760 --> 00:14:38,880
meanwhile

346
00:14:38,880 --> 00:14:39,920
when

347
00:14:39,920 --> 00:14:41,040
the

348
00:14:41,040 --> 00:14:42,320
heavy

349
00:14:42,320 --> 00:14:44,399
congested queue is being drained

350
00:14:44,399 --> 00:14:46,560
but finally the entry and condition

351
00:14:46,560 --> 00:14:48,959
signal will be received by the receiver

352
00:14:48,959 --> 00:14:50,639
and then echoed by

353
00:14:50,639 --> 00:14:53,040
uh the receiver back to sender

354
00:14:53,040 --> 00:14:55,199
so here the point here is that

355
00:14:55,199 --> 00:14:56,800
um the this

356
00:14:56,800 --> 00:14:59,120
source pfc reaction can be much faster

357
00:14:59,120 --> 00:14:59,920
than

358
00:14:59,920 --> 00:15:01,839
uh the heavy

359
00:15:01,839 --> 00:15:03,600
condition control reaction to the heavy

360
00:15:03,600 --> 00:15:05,680
incase when the especially qdap is

361
00:15:05,680 --> 00:15:08,319
pretty large

362
00:15:09,839 --> 00:15:13,760
um this is the very simple um

363
00:15:13,760 --> 00:15:14,959
test battery

364
00:15:14,959 --> 00:15:17,120
experiment to

365
00:15:17,120 --> 00:15:18,639
show the benefit of

366
00:15:18,639 --> 00:15:20,160
source pfc

367
00:15:20,160 --> 00:15:21,839
here uh we have two switches and

368
00:15:21,839 --> 00:15:24,240
multiple senders and receivers senders

369
00:15:24,240 --> 00:15:25,680
on the right hand side mostly and the

370
00:15:25,680 --> 00:15:28,000
receiver on the uh sorry senders and the

371
00:15:28,000 --> 00:15:29,600
left-hand side receiving the right-hand

372
00:15:29,600 --> 00:15:30,720
side

373
00:15:30,720 --> 00:15:33,519
there are two in-case flows happening at

374
00:15:33,519 --> 00:15:34,720
the same time

375
00:15:34,720 --> 00:15:35,759
here

376
00:15:35,759 --> 00:15:37,440
the the experiment is designed in a way

377
00:15:37,440 --> 00:15:39,920
such that the the link between top of

378
00:15:39,920 --> 00:15:42,480
rack switch 1 and to r2

379
00:15:42,480 --> 00:15:45,440
will be a head of line blocked mostly by

380
00:15:45,440 --> 00:15:46,320
the

381
00:15:46,320 --> 00:15:49,360
uh in case happening at the receiver 2

382
00:15:49,360 --> 00:15:52,160
will pfc pause the omnics

383
00:15:52,160 --> 00:15:55,279
port and which will in effect

384
00:15:55,279 --> 00:15:57,680
uh create head of line blocking also for

385
00:15:57,680 --> 00:16:02,000
the flows of sender one to receiver one

386
00:16:03,120 --> 00:16:07,600
so this is all the rdma write request

387
00:16:07,600 --> 00:16:09,600
so first we measure

388
00:16:09,600 --> 00:16:10,399
the

389
00:16:10,399 --> 00:16:13,279
q-dabs over time using our some

390
00:16:13,279 --> 00:16:15,199
telemetry mechanism

391
00:16:15,199 --> 00:16:18,720
and here we compare the q-dabs uh

392
00:16:18,720 --> 00:16:20,720
between the two mechanisms

393
00:16:20,720 --> 00:16:23,120
on the upper hand side we have a

394
00:16:23,120 --> 00:16:25,600
the case where pfc is enabled everywhere

395
00:16:25,600 --> 00:16:28,720
versus the and the lower handler side

396
00:16:28,720 --> 00:16:29,600
um

397
00:16:29,600 --> 00:16:32,079
we have a case with the remote pfc or

398
00:16:32,079 --> 00:16:34,160
source pfc enabled

399
00:16:34,160 --> 00:16:36,560
and you can see that the q that's at the

400
00:16:36,560 --> 00:16:39,600
order three congested links are

401
00:16:39,600 --> 00:16:41,920
pushed down to drastically

402
00:16:41,920 --> 00:16:45,920
um with more than sometimes tens of

403
00:16:45,920 --> 00:16:49,120
order of magnitude difference

404
00:16:49,680 --> 00:16:51,360
with that you may wonder what would be

405
00:16:51,360 --> 00:16:54,000
the throughput performance so with so

406
00:16:54,000 --> 00:16:56,000
this is the measurement of the flow

407
00:16:56,000 --> 00:16:58,800
completion time of this um

408
00:16:58,800 --> 00:17:01,440
more than the thousands of flows

409
00:17:01,440 --> 00:17:05,039
uh or rdma write request and yeah we see

410
00:17:05,039 --> 00:17:06,000
that

411
00:17:06,000 --> 00:17:08,319
in the cdf of the flow completion time

412
00:17:08,319 --> 00:17:10,640
the source pfc

413
00:17:10,640 --> 00:17:13,119
performs uh better than the traditional

414
00:17:13,119 --> 00:17:15,119
pfc

415
00:17:15,119 --> 00:17:15,919
here

416
00:17:15,919 --> 00:17:18,319
we actually didn't enable ecn because it

417
00:17:18,319 --> 00:17:20,880
was not easy to find the good tuning of

418
00:17:20,880 --> 00:17:23,119
ec and dcqcn

419
00:17:23,119 --> 00:17:24,400
and actually when we enabled this

420
00:17:24,400 --> 00:17:26,400
sequence we found that the tail latency

421
00:17:26,400 --> 00:17:27,520
was worse

422
00:17:27,520 --> 00:17:29,679
uh in case of tfc

423
00:17:29,679 --> 00:17:32,799
so we just wanted to simply compare the

424
00:17:32,799 --> 00:17:36,720
operation between pfs and source pfc

425
00:17:39,600 --> 00:17:41,200
so you may wonder what information we

426
00:17:41,200 --> 00:17:42,480
need to carry

427
00:17:42,480 --> 00:17:45,200
for this layer 3 signaling packet

428
00:17:45,200 --> 00:17:48,320
um so key id is very simple um so we

429
00:17:48,320 --> 00:17:50,559
have some more detailed backup slide at

430
00:17:50,559 --> 00:17:51,679
the back

431
00:17:51,679 --> 00:17:54,240
down the road um how we can convey these

432
00:17:54,240 --> 00:17:55,440
signaling

433
00:17:55,440 --> 00:17:58,360
informations in the i3

434
00:17:58,360 --> 00:18:01,840
802.12 cz which is the draft

435
00:18:01,840 --> 00:18:03,840
cim here means that

436
00:18:03,840 --> 00:18:07,520
conditional isolation messaging

437
00:18:08,960 --> 00:18:10,720
excuse me

438
00:18:10,720 --> 00:18:12,160
um so in the

439
00:18:12,160 --> 00:18:15,440
source pfc mode uh the we just need to

440
00:18:15,440 --> 00:18:16,960
mostly swap the

441
00:18:16,960 --> 00:18:19,360
uh source and ip addresses of the data

442
00:18:19,360 --> 00:18:20,320
packet

443
00:18:20,320 --> 00:18:23,520
so that the the newly generated

444
00:18:23,520 --> 00:18:25,200
so when we generate a signal in packet

445
00:18:25,200 --> 00:18:27,440
we can just swap the source ip from the

446
00:18:27,440 --> 00:18:29,679
data packet and then use them as the

447
00:18:29,679 --> 00:18:32,320
user's destination ip of the signaling

448
00:18:32,320 --> 00:18:33,280
packet

449
00:18:33,280 --> 00:18:35,200
with that the packet will be forwarded

450
00:18:35,200 --> 00:18:37,039
signal packet will put it back to the

451
00:18:37,039 --> 00:18:38,160
sender

452
00:18:38,160 --> 00:18:39,600
and we can still

453
00:18:39,600 --> 00:18:42,880
carry the original destination ipod

454
00:18:42,880 --> 00:18:45,760
the incas traffic

455
00:18:45,760 --> 00:18:48,240
it can be optionally used to cache some

456
00:18:48,240 --> 00:18:50,320
of the post time at the sender side top

457
00:18:50,320 --> 00:18:52,559
product switch

458
00:18:52,559 --> 00:18:55,360
i can talk about that more later

459
00:18:55,360 --> 00:18:58,080
and we can also we should also carry

460
00:18:58,080 --> 00:19:00,000
something like a dhcp

461
00:19:00,000 --> 00:19:02,559
uh or vlan pcp whatever

462
00:19:02,559 --> 00:19:03,520
um

463
00:19:03,520 --> 00:19:06,160
qs priority information that is needed

464
00:19:06,160 --> 00:19:08,480
to identify the actual pfc priority

465
00:19:08,480 --> 00:19:09,600
queue

466
00:19:09,600 --> 00:19:12,240
to pause at the center nick

467
00:19:12,240 --> 00:19:14,080
and most importantly we

468
00:19:14,080 --> 00:19:15,919
we carry the pulse time duration or

469
00:19:15,919 --> 00:19:18,720
expected surgeon time

470
00:19:18,720 --> 00:19:20,320
it should be the

471
00:19:20,320 --> 00:19:22,799
smaller or the equal than minimum drain

472
00:19:22,799 --> 00:19:25,120
time to reach the target shoot ups so

473
00:19:25,120 --> 00:19:27,120
here the target q depths could be

474
00:19:27,120 --> 00:19:29,679
something like an ecm thresher or

475
00:19:29,679 --> 00:19:32,320
uh slightly over uh lower than that when

476
00:19:32,320 --> 00:19:33,679
we tried to

477
00:19:33,679 --> 00:19:35,679
try with different values they didn't

478
00:19:35,679 --> 00:19:37,520
really make big difference

479
00:19:37,520 --> 00:19:39,760
because our reaction was the spx

480
00:19:39,760 --> 00:19:42,720
reaction is really fast

481
00:19:42,720 --> 00:19:44,240
and optionally we can carry some

482
00:19:44,240 --> 00:19:46,000
additional condition locator information

483
00:19:46,000 --> 00:19:48,400
like a switch for qids but that's really

484
00:19:48,400 --> 00:19:50,400
optional even without the information

485
00:19:50,400 --> 00:19:51,360
the

486
00:19:51,360 --> 00:19:52,400
entire

487
00:19:52,400 --> 00:19:55,360
protocol behavior should be the same

488
00:19:55,360 --> 00:19:57,039
the additional information can have if

489
00:19:57,039 --> 00:19:59,440
you really want to consume that for more

490
00:19:59,440 --> 00:20:01,840
network-wide

491
00:20:01,840 --> 00:20:03,679
monitoring and then traffic management

492
00:20:03,679 --> 00:20:04,880
etc

493
00:20:04,880 --> 00:20:06,799
but that's a kind of beyond scope of the

494
00:20:06,799 --> 00:20:08,000
initial

495
00:20:08,000 --> 00:20:10,480
use case

496
00:20:10,559 --> 00:20:11,440
and

497
00:20:11,440 --> 00:20:14,320
for the source flow control

498
00:20:14,320 --> 00:20:17,760
we want it to be consumed by the

499
00:20:17,760 --> 00:20:19,039
sender

500
00:20:19,039 --> 00:20:21,919
side transport layer so

501
00:20:21,919 --> 00:20:25,360
we need to carry some additional layer 4

502
00:20:25,360 --> 00:20:28,159
port or maybe qpid like information so

503
00:20:28,159 --> 00:20:28,880
that

504
00:20:28,880 --> 00:20:29,679
the

505
00:20:29,679 --> 00:20:31,840
the actual

506
00:20:31,840 --> 00:20:33,679
sender side flow and connection can be

507
00:20:33,679 --> 00:20:35,760
identified which flow and connection to

508
00:20:35,760 --> 00:20:37,200
be paused

509
00:20:37,200 --> 00:20:41,039
as a reaction of the signaling

510
00:20:45,120 --> 00:20:45,919
so

511
00:20:45,919 --> 00:20:48,159
when we look at this source flow control

512
00:20:48,159 --> 00:20:49,919
um

513
00:20:49,919 --> 00:20:53,039
a bit more kind of advanced version of

514
00:20:53,039 --> 00:20:54,480
source pfc

515
00:20:54,480 --> 00:20:56,640
because we are pausing the flow

516
00:20:56,640 --> 00:20:59,120
uh at the flow level

517
00:20:59,120 --> 00:21:00,880
at the transport

518
00:21:00,880 --> 00:21:04,320
um you may wonder how is it how does it

519
00:21:04,320 --> 00:21:06,240
look different from something like icmp

520
00:21:06,240 --> 00:21:07,520
source crunch

521
00:21:07,520 --> 00:21:09,039
so just as a data point there is

522
00:21:09,039 --> 00:21:10,880
actually recent paper

523
00:21:10,880 --> 00:21:12,640
nsdi this year

524
00:21:12,640 --> 00:21:14,480
something called onramp

525
00:21:14,480 --> 00:21:17,120
which also implements such a similar

526
00:21:17,120 --> 00:21:18,400
flow level

527
00:21:18,400 --> 00:21:20,159
um

528
00:21:20,159 --> 00:21:22,640
connection level flow control mechanism

529
00:21:22,640 --> 00:21:25,200
implemented

530
00:21:25,200 --> 00:21:27,520
at the linux q disk

531
00:21:27,520 --> 00:21:30,400
so yeah in order to make a reaction and

532
00:21:30,400 --> 00:21:32,000
consumption of this information we need

533
00:21:32,000 --> 00:21:35,360
some uh changes on the software stagware

534
00:21:35,360 --> 00:21:37,280
uh we need to modify the rdm hardware

535
00:21:37,280 --> 00:21:38,480
stack

536
00:21:38,480 --> 00:21:41,600
um and there's one example uh in the nsd

537
00:21:41,600 --> 00:21:42,960
paper

538
00:21:42,960 --> 00:21:45,600
back to this question how does it uh

539
00:21:45,600 --> 00:21:48,240
differ from source crunch

540
00:21:48,240 --> 00:21:49,120
which

541
00:21:49,120 --> 00:21:51,520
is actually duplicated rfc i think more

542
00:21:51,520 --> 00:21:53,200
than 10 years ago

543
00:21:53,200 --> 00:21:54,720
um as i understand there are multiple

544
00:21:54,720 --> 00:21:56,840
reasons why source quench has been

545
00:21:56,840 --> 00:21:58,480
deprecated

546
00:21:58,480 --> 00:22:00,240
first it didn't really specify which

547
00:22:00,240 --> 00:22:02,000
information to carry

548
00:22:02,000 --> 00:22:03,919
or how to

549
00:22:03,919 --> 00:22:05,679
consume and react to that information at

550
00:22:05,679 --> 00:22:07,840
the sender side

551
00:22:07,840 --> 00:22:11,120
and so we in sfc or as tfc we clearly

552
00:22:11,120 --> 00:22:13,200
specified that we just carry the pulse

553
00:22:13,200 --> 00:22:15,360
time duration for the drain time

554
00:22:15,360 --> 00:22:16,480
duration

555
00:22:16,480 --> 00:22:17,840
and

556
00:22:17,840 --> 00:22:21,120
we promote that uh the immediate

557
00:22:21,120 --> 00:22:23,120
flow control so that

558
00:22:23,120 --> 00:22:25,280
incas senders can

559
00:22:25,280 --> 00:22:28,000
really stop sending immediately

560
00:22:28,000 --> 00:22:29,440
rather than

561
00:22:29,440 --> 00:22:31,760
aim this style of transition control

562
00:22:31,760 --> 00:22:34,000
especially for data center

563
00:22:34,000 --> 00:22:36,559
and uh yeah source quench was really

564
00:22:36,559 --> 00:22:39,360
designed for or promoted for

565
00:22:39,360 --> 00:22:42,240
when internet transition handling but we

566
00:22:42,240 --> 00:22:45,120
are promoting this sfc for data center

567
00:22:45,120 --> 00:22:49,199
with single administrative domain

568
00:22:49,679 --> 00:22:50,799
and

569
00:22:50,799 --> 00:22:52,640
in case of

570
00:22:52,640 --> 00:22:54,960
layer two data center there what has

571
00:22:54,960 --> 00:22:57,520
been something called i3 qcn

572
00:22:57,520 --> 00:22:59,200
uh it's actually

573
00:22:59,200 --> 00:23:00,799
quite similar you know message that it

574
00:23:00,799 --> 00:23:02,400
also promotes the

575
00:23:02,400 --> 00:23:04,240
back to sender signaling from switches

576
00:23:04,240 --> 00:23:05,520
to the

577
00:23:05,520 --> 00:23:06,880
traffic senders

578
00:23:06,880 --> 00:23:09,760
but this is a layer 2 transition control

579
00:23:09,760 --> 00:23:11,679
with similar aimd

580
00:23:11,679 --> 00:23:14,480
still requiring multiple time to flatten

581
00:23:14,480 --> 00:23:15,840
the curve

582
00:23:15,840 --> 00:23:18,720
and rocky dcq cn is the l3 adaption of

583
00:23:18,720 --> 00:23:21,720
gcm

584
00:23:22,080 --> 00:23:24,000
answer is one of the questions

585
00:23:24,000 --> 00:23:25,200
and some

586
00:23:25,200 --> 00:23:27,360
additional questions are

587
00:23:27,360 --> 00:23:30,720
shared by the itp community uh by

588
00:23:30,720 --> 00:23:32,960
separate emails so

589
00:23:32,960 --> 00:23:35,520
um at high level how do we secure the

590
00:23:35,520 --> 00:23:36,530
protocol um

591
00:23:36,530 --> 00:23:37,840
[Music]

592
00:23:37,840 --> 00:23:40,240
we assume this will be for single domain

593
00:23:40,240 --> 00:23:42,480
data center with trusted switching

594
00:23:42,480 --> 00:23:43,760
devices

595
00:23:43,760 --> 00:23:45,760
and i can

596
00:23:45,760 --> 00:23:47,520
make some argument that the signaling

597
00:23:47,520 --> 00:23:50,559
between switches for source pfc

598
00:23:50,559 --> 00:23:52,799
it could be similar to error dp and bgp

599
00:23:52,799 --> 00:23:54,640
and then i understand that there is a

600
00:23:54,640 --> 00:23:56,880
bgp encryption mechanism

601
00:23:56,880 --> 00:23:59,440
but in reality it hasn't been really

602
00:23:59,440 --> 00:24:00,720
used for

603
00:24:00,720 --> 00:24:03,039
many regions it cannot really serve the

604
00:24:03,039 --> 00:24:04,880
problem of malicious or poorly

605
00:24:04,880 --> 00:24:06,960
implemented router and it can actually

606
00:24:06,960 --> 00:24:09,200
cause additional headaches so as i

607
00:24:09,200 --> 00:24:10,720
understand no one

608
00:24:10,720 --> 00:24:12,960
not really heavily

609
00:24:12,960 --> 00:24:14,080
turned on

610
00:24:14,080 --> 00:24:16,799
the bgp encryption mechanisms

611
00:24:16,799 --> 00:24:19,360
and for the signaling for sfc source

612
00:24:19,360 --> 00:24:20,640
flow control

613
00:24:20,640 --> 00:24:23,200
for the sender transport to react

614
00:24:23,200 --> 00:24:24,159
um

615
00:24:24,159 --> 00:24:26,159
we can see that this is quite similar to

616
00:24:26,159 --> 00:24:29,279
ecm marking where the

617
00:24:29,279 --> 00:24:30,880
data center switches for intermediate

618
00:24:30,880 --> 00:24:32,640
switches and routers are

619
00:24:32,640 --> 00:24:35,120
uh provide some information in the

620
00:24:35,120 --> 00:24:38,080
actual data packet and

621
00:24:38,080 --> 00:24:39,360
consumed by the

622
00:24:39,360 --> 00:24:41,120
sender side transport

623
00:24:41,120 --> 00:24:43,440
here we are generating the new new

624
00:24:43,440 --> 00:24:45,919
signaling packet instead of

625
00:24:45,919 --> 00:24:48,559
modifying or marking on the

626
00:24:48,559 --> 00:24:50,480
inband data packets

627
00:24:50,480 --> 00:24:52,559
but you know such that the information

628
00:24:52,559 --> 00:24:54,159
is provided by the switches and then

629
00:24:54,159 --> 00:24:56,480
directly concerned by

630
00:24:56,480 --> 00:24:58,720
the end host is pretty similar in my

631
00:24:58,720 --> 00:24:59,679
opinion

632
00:24:59,679 --> 00:25:02,159
and then ecn is has been uh heavily used

633
00:25:02,159 --> 00:25:04,080
in data centers these days something

634
00:25:04,080 --> 00:25:06,720
like a dc-tcp

635
00:25:06,720 --> 00:25:09,200
at the end uh we can simply

636
00:25:09,200 --> 00:25:11,760
uh implement accur at the domain

637
00:25:11,760 --> 00:25:14,400
boundaries uh like a topper rec switches

638
00:25:14,400 --> 00:25:17,600
or maybe gateway switches so that

639
00:25:17,600 --> 00:25:20,320
this new form of signal packet

640
00:25:20,320 --> 00:25:21,919
cannot really come from the outside of

641
00:25:21,919 --> 00:25:24,400
the domain

642
00:25:25,440 --> 00:25:27,679
and another question was yeah is it only

643
00:25:27,679 --> 00:25:31,120
for rocky yes rdma is a primary use case

644
00:25:31,120 --> 00:25:34,559
and then rocky b2 is the

645
00:25:34,559 --> 00:25:35,919
most popular

646
00:25:35,919 --> 00:25:39,520
transfer of today but we see more

647
00:25:39,520 --> 00:25:41,360
new type of

648
00:25:41,360 --> 00:25:44,320
transport for rdma or rma

649
00:25:44,320 --> 00:25:47,440
mechanisms are rising and so we believe

650
00:25:47,440 --> 00:25:49,120
we can have

651
00:25:49,120 --> 00:25:51,520
many different rdma transports in a

652
00:25:51,520 --> 00:25:54,320
similar way to scale on standard

653
00:25:54,320 --> 00:25:57,440
ethernet fabric

654
00:25:57,440 --> 00:25:59,200
and uh we have some

655
00:25:59,200 --> 00:26:01,600
some argument how this can be a good fit

656
00:26:01,600 --> 00:26:03,039
for the machine learning training in the

657
00:26:03,039 --> 00:26:05,039
backup slide so if you want you can take

658
00:26:05,039 --> 00:26:06,640
a look

659
00:26:06,640 --> 00:26:09,279
and sfc can also be applied to non-rdm

660
00:26:09,279 --> 00:26:12,080
use cases as similar to

661
00:26:12,080 --> 00:26:15,440
on-ramp paper from nsdi and we are

662
00:26:15,440 --> 00:26:17,520
currently

663
00:26:17,520 --> 00:26:19,520
performing some

664
00:26:19,520 --> 00:26:23,279
evaluations with the tcp traffic

665
00:26:23,360 --> 00:26:26,000
and you may wonder that the ig-28 signal

666
00:26:26,000 --> 00:26:28,400
link is still sub-rtt but it can be

667
00:26:28,400 --> 00:26:30,400
still proportional to the network rtt if

668
00:26:30,400 --> 00:26:32,320
the network size is growth

669
00:26:32,320 --> 00:26:34,240
so then isn't it too slow

670
00:26:34,240 --> 00:26:36,320
um so we have a simple mechanism that we

671
00:26:36,320 --> 00:26:38,480
can catch the uh pause time per

672
00:26:38,480 --> 00:26:40,400
destination ip at the sender site top

673
00:26:40,400 --> 00:26:41,760
project switch

674
00:26:41,760 --> 00:26:44,320
and this information can be used to

675
00:26:44,320 --> 00:26:47,520
instantly pause another sender's

676
00:26:47,520 --> 00:26:50,640
coming from the same connected same

677
00:26:50,640 --> 00:26:53,360
switches and then uh handy

678
00:26:53,360 --> 00:26:55,440
gearing for the same destination ip can

679
00:26:55,440 --> 00:26:57,440
be immediately paused without waiting

680
00:26:57,440 --> 00:26:59,760
for them to be trend uh

681
00:26:59,760 --> 00:27:01,919
reach out to the sender side receiver

682
00:27:01,919 --> 00:27:05,960
side tour and their account back

683
00:27:06,640 --> 00:27:09,919
with that um this is a simple history

684
00:27:09,919 --> 00:27:13,039
um of the mechanism yeah we first talked

685
00:27:13,039 --> 00:27:15,520
about this idea starting from uh last

686
00:27:15,520 --> 00:27:16,880
year april

687
00:27:16,880 --> 00:27:19,200
under a number of presentations at the

688
00:27:19,200 --> 00:27:21,360
public domain and also recently more in

689
00:27:21,360 --> 00:27:23,520
the iit pre

690
00:27:23,520 --> 00:27:25,200
there is a suggestion that ietf should

691
00:27:25,200 --> 00:27:27,120
be aware of this activity so we are

692
00:27:27,120 --> 00:27:30,399
having this conversation here in iccrg

693
00:27:30,399 --> 00:27:32,080
thanks for the opportunity

694
00:27:32,080 --> 00:27:34,720
and the planet the i3 is simply

695
00:27:34,720 --> 00:27:36,080
extending the

696
00:27:36,080 --> 00:27:37,760
existing in 80

697
00:27:37,760 --> 00:27:41,120
2.1 qcd uh

698
00:27:41,120 --> 00:27:43,039
conditional isolation mechanism it

699
00:27:43,039 --> 00:27:45,520
already has a layer 3 mechanism so we

700
00:27:45,520 --> 00:27:48,480
can simply extend it to enable something

701
00:27:48,480 --> 00:27:51,120
like a source pfc but i can easily

702
00:27:51,120 --> 00:27:53,279
imagine that if you really want to do

703
00:27:53,279 --> 00:27:56,000
source flow control uh for the transport

704
00:27:56,000 --> 00:27:58,960
to make use of this information then

705
00:27:58,960 --> 00:28:03,799
ietf can be a better forum to discuss

706
00:28:05,200 --> 00:28:06,880
yeah i think for the sake of time i'm

707
00:28:06,880 --> 00:28:08,559
going to stop here and then

708
00:28:08,559 --> 00:28:09,520
we can

709
00:28:09,520 --> 00:28:13,158
i can take some questions

710
00:28:16,559 --> 00:28:20,158
should i stop sharing my screen

711
00:28:23,440 --> 00:28:25,600
hey jk let's keep your screen on in case

712
00:28:25,600 --> 00:28:27,360
people have questions about

713
00:28:27,360 --> 00:28:30,240
any other slides

714
00:28:37,679 --> 00:28:41,840
um there is a question from jonathan

715
00:28:43,200 --> 00:28:45,120
in the chat room if i understand

716
00:28:45,120 --> 00:28:46,720
correctly

717
00:28:46,720 --> 00:28:49,039
yep go ahead take that and then praveen

718
00:28:49,039 --> 00:28:50,559
can go on after that

719
00:28:50,559 --> 00:28:53,840
uh i was just uh pointing out that the

720
00:28:53,840 --> 00:28:55,840
um

721
00:28:55,840 --> 00:28:59,200
the basic uh multipli but multiplicative

722
00:28:59,200 --> 00:29:01,600
decrease mechanism is an order log n

723
00:29:01,600 --> 00:29:03,520
mechanisms that was from quite early in

724
00:29:03,520 --> 00:29:06,399
your presentation

725
00:29:07,919 --> 00:29:10,399
i see yes sorry sorry if i misunderstood

726
00:29:10,399 --> 00:29:12,559
but yeah it still takes more than one

727
00:29:12,559 --> 00:29:13,919
itt

728
00:29:13,919 --> 00:29:16,960
i guess that's the key question

729
00:29:16,960 --> 00:29:19,919
thanks for pointing out

730
00:29:22,960 --> 00:29:26,360
growing europe

731
00:29:30,640 --> 00:29:32,880
the question um so there was another

732
00:29:32,880 --> 00:29:35,039
work recently presented in iccrg called

733
00:29:35,039 --> 00:29:36,640
hpcc

734
00:29:36,640 --> 00:29:38,799
uh can you compare and contrast approach

735
00:29:38,799 --> 00:29:41,760
with hpcc

736
00:29:41,760 --> 00:29:45,440
yes hbcc i'm also part of the effort

737
00:29:45,440 --> 00:29:47,200
it's still

738
00:29:47,200 --> 00:29:49,600
four direction

739
00:29:49,600 --> 00:29:51,360
signaling

740
00:29:51,360 --> 00:29:55,919
so hpcc you can imagine this as a really

741
00:29:55,919 --> 00:29:57,919
multi-bit ecn so instead of just one

742
00:29:57,919 --> 00:30:00,159
bdcn it carries the

743
00:30:00,159 --> 00:30:02,159
multiple information about the condition

744
00:30:02,159 --> 00:30:04,320
like qdaps and then

745
00:30:04,320 --> 00:30:06,480
link utilization

746
00:30:06,480 --> 00:30:09,200
but still in the four direction data

747
00:30:09,200 --> 00:30:12,000
packet and echoed back by the

748
00:30:12,000 --> 00:30:16,000
uh receiver back to sender so

749
00:30:16,000 --> 00:30:17,440
um

750
00:30:17,440 --> 00:30:19,120
it still kind of

751
00:30:19,120 --> 00:30:22,520
suffer from

752
00:30:22,960 --> 00:30:25,760
um the condition signaling path is

753
00:30:25,760 --> 00:30:26,880
coupled

754
00:30:26,880 --> 00:30:29,200
with the ongoing condition

755
00:30:29,200 --> 00:30:30,640
um

756
00:30:30,640 --> 00:30:32,399
so we do have actually simulation

757
00:30:32,399 --> 00:30:35,480
results um demonstrating the

758
00:30:35,480 --> 00:30:38,159
effectiveness of

759
00:30:38,159 --> 00:30:41,600
source flow control or sfc

760
00:30:41,600 --> 00:30:43,919
with hpcc

761
00:30:43,919 --> 00:30:44,960
so

762
00:30:44,960 --> 00:30:45,760
when

763
00:30:45,760 --> 00:30:49,200
the incase ratio is not that small then

764
00:30:49,200 --> 00:30:51,679
new condition control like httpcc can

765
00:30:51,679 --> 00:30:53,840
actually do decently better but here in

766
00:30:53,840 --> 00:30:55,840
in this case if we actually created an

767
00:30:55,840 --> 00:30:58,720
in case a little bit higher than uh user

768
00:30:58,720 --> 00:31:01,240
um let me go back uh

769
00:31:01,240 --> 00:31:05,840
88 of traffic is in caspers with hundred

770
00:31:05,840 --> 00:31:08,080
twenty two down to one so it might be a

771
00:31:08,080 --> 00:31:10,080
little bit kind of severe in case

772
00:31:10,080 --> 00:31:11,279
condition

773
00:31:11,279 --> 00:31:14,559
in those cases and uh we still kind of

774
00:31:14,559 --> 00:31:16,000
generate

775
00:31:16,000 --> 00:31:18,399
up to orders of magnitude

776
00:31:18,399 --> 00:31:20,320
and it's one order of the magnitude

777
00:31:20,320 --> 00:31:22,000
better improved our flow compression

778
00:31:22,000 --> 00:31:23,440
time compared to

779
00:31:23,440 --> 00:31:25,360
uh sfc

780
00:31:25,360 --> 00:31:28,320
and uh we could also maintain the buffer

781
00:31:28,320 --> 00:31:30,559
occupancy smaller and then slight

782
00:31:30,559 --> 00:31:33,120
improvement in the good

783
00:31:33,120 --> 00:31:36,399
but overall because of the

784
00:31:36,480 --> 00:31:37,440
queuing

785
00:31:37,440 --> 00:31:39,519
is better managed that

786
00:31:39,519 --> 00:31:41,600
that leads to the reduction of the flow

787
00:31:41,600 --> 00:31:44,399
completion time

788
00:31:45,440 --> 00:31:49,039
i hope this answers your question

789
00:31:54,159 --> 00:31:56,559
png you're on

790
00:31:56,559 --> 00:31:59,120
uh yeah okay here we just want to double

791
00:31:59,120 --> 00:32:01,519
check hello

792
00:32:01,519 --> 00:32:02,799
hello

793
00:32:02,799 --> 00:32:05,840
yes okay hey john i have a particular

794
00:32:05,840 --> 00:32:08,320
question regarding your slide 6 the

795
00:32:08,320 --> 00:32:10,880
example in the normally in data center

796
00:32:10,880 --> 00:32:12,960
of the tor switch or for the other

797
00:32:12,960 --> 00:32:14,559
aggregation switch

798
00:32:14,559 --> 00:32:16,399
from the downlink to uplink you're going

799
00:32:16,399 --> 00:32:18,960
to have some ratio not just like the one

800
00:32:18,960 --> 00:32:21,200
you're showing in the slide six like

801
00:32:21,200 --> 00:32:23,840
the downlink 100 gig and the update also

802
00:32:23,840 --> 00:32:26,000
100 gig normally just like a photo one

803
00:32:26,000 --> 00:32:27,679
ratio it's like

804
00:32:27,679 --> 00:32:31,120
not uh not so con congested as you're

805
00:32:31,120 --> 00:32:33,840
showing here so like you are using 100

806
00:32:33,840 --> 00:32:35,600
gig for the downlink you probably are

807
00:32:35,600 --> 00:32:38,000
going to use like 400 gig or even

808
00:32:38,000 --> 00:32:40,000
combine up to 1t

809
00:32:40,000 --> 00:32:42,720
so in that case are you still seeing so

810
00:32:42,720 --> 00:32:46,000
much uh uh improvement from your

811
00:32:46,000 --> 00:32:48,880
yeah experiment thank you

812
00:32:48,880 --> 00:32:51,120
yeah that's a fair question thanks yeah

813
00:32:51,120 --> 00:32:52,960
this this has been

814
00:32:52,960 --> 00:32:55,200
intentionally designed the topology has

815
00:32:55,200 --> 00:32:57,039
been intentionally designed to

816
00:32:57,039 --> 00:32:59,519
uh just nail down on the head of line

817
00:32:59,519 --> 00:33:00,880
blocking issue

818
00:33:00,880 --> 00:33:01,840
and

819
00:33:01,840 --> 00:33:04,320
uh when we simulated

820
00:33:04,320 --> 00:33:06,880
the larger scale simulation for

821
00:33:06,880 --> 00:33:09,760
320 servers yeah we definitely created a

822
00:33:09,760 --> 00:33:12,480
full bisection than this uh topology

823
00:33:12,480 --> 00:33:13,679
without any

824
00:33:13,679 --> 00:33:15,279
um

825
00:33:15,279 --> 00:33:17,600
um oversubscription

826
00:33:17,600 --> 00:33:18,640
and

827
00:33:18,640 --> 00:33:21,120
here there we could still see that

828
00:33:21,120 --> 00:33:22,240
pretty good

829
00:33:22,240 --> 00:33:24,480
flow completion time improvement

830
00:33:24,480 --> 00:33:26,880
even for the dc qc which is the

831
00:33:26,880 --> 00:33:28,640
uh actually improve the cqc and also

832
00:33:28,640 --> 00:33:30,159
hpcc

833
00:33:30,159 --> 00:33:32,480
and um there was another

834
00:33:32,480 --> 00:33:34,480
presentation from

835
00:33:34,480 --> 00:33:35,279
uh

836
00:33:35,279 --> 00:33:37,120
at i3

837
00:33:37,120 --> 00:33:38,399
so if you

838
00:33:38,399 --> 00:33:40,000
sorry

839
00:33:40,000 --> 00:33:41,679
yeah this particular

840
00:33:41,679 --> 00:33:44,080
highlighted link if you can

841
00:33:44,080 --> 00:33:46,240
click on this one this was the

842
00:33:46,240 --> 00:33:49,200
measurement study done by

843
00:33:49,200 --> 00:33:50,240
huawei

844
00:33:50,240 --> 00:33:52,159
um a month after our initial

845
00:33:52,159 --> 00:33:54,240
presentation in i23 and then they

846
00:33:54,240 --> 00:33:56,320
actually quickly the prototype and then

847
00:33:56,320 --> 00:33:58,320
uh demonstrated when

848
00:33:58,320 --> 00:34:01,200
their rdma traffic is mixed with tcp

849
00:34:01,200 --> 00:34:02,000
uh

850
00:34:02,000 --> 00:34:04,799
with i think normal of a subscription or

851
00:34:04,799 --> 00:34:07,120
maybe small over subscription uh the

852
00:34:07,120 --> 00:34:08,800
benefit was still

853
00:34:08,800 --> 00:34:10,800
pretty good there in uh in terms of tail

854
00:34:10,800 --> 00:34:13,280
latency

855
00:34:13,359 --> 00:34:14,719
so yeah my

856
00:34:14,719 --> 00:34:16,239
key answer is that there are multiple

857
00:34:16,239 --> 00:34:18,839
data points that you can still

858
00:34:18,839 --> 00:34:21,359
have thank you

859
00:34:21,359 --> 00:34:23,759
thank you

860
00:34:28,079 --> 00:34:31,199
all right i have a question

861
00:34:31,199 --> 00:34:33,199
from the queue from the flow so i'll ask

862
00:34:33,199 --> 00:34:36,320
you this question jk um

863
00:34:36,320 --> 00:34:38,560
i'm familiar with some work in the past

864
00:34:38,560 --> 00:34:40,399
and this is probably a few years ago

865
00:34:40,399 --> 00:34:42,159
timely and

866
00:34:42,159 --> 00:34:45,199
from from google folks did some work on

867
00:34:45,199 --> 00:34:47,679
basically using rtd rtd

868
00:34:47,679 --> 00:34:50,560
as a congestion signal for within data

869
00:34:50,560 --> 00:34:52,239
centers and it was

870
00:34:52,239 --> 00:34:55,440
if i remember correctly they did

871
00:34:55,440 --> 00:34:59,280
some work on rdma fabric

872
00:34:59,280 --> 00:35:01,280
have you compared your work to theirs or

873
00:35:01,280 --> 00:35:03,200
have you looked at that book

874
00:35:03,200 --> 00:35:04,640
somebody else from google might be able

875
00:35:04,640 --> 00:35:06,800
to shed more like on the specifics of

876
00:35:06,800 --> 00:35:08,160
the proposal but

877
00:35:08,160 --> 00:35:11,599
um have you had a chance to look at that

878
00:35:11,599 --> 00:35:14,800
yes yes um we are very well aware of

879
00:35:14,800 --> 00:35:17,760
such a new condition control algorithms

880
00:35:17,760 --> 00:35:19,040
designed for

881
00:35:19,040 --> 00:35:22,720
rdma so hpcc is one of them timely and

882
00:35:22,720 --> 00:35:24,480
recently swift

883
00:35:24,480 --> 00:35:26,880
i think near carville is here today

884
00:35:26,880 --> 00:35:29,359
and um

885
00:35:29,359 --> 00:35:32,160
many of them really make up way more

886
00:35:32,160 --> 00:35:33,839
better position control than something

887
00:35:33,839 --> 00:35:36,720
like a tcqc or dc tcp because

888
00:35:36,720 --> 00:35:39,680
um it's really designed to for low

889
00:35:39,680 --> 00:35:42,160
latency high bandwidth

890
00:35:42,160 --> 00:35:43,920
but i think the fundamental difference

891
00:35:43,920 --> 00:35:45,119
is that

892
00:35:45,119 --> 00:35:46,960
um

893
00:35:46,960 --> 00:35:48,880
incas can still happen because you

894
00:35:48,880 --> 00:35:50,960
cannot really perfectly synchronize all

895
00:35:50,960 --> 00:35:52,240
the senders

896
00:35:52,240 --> 00:35:54,880
especially with rdma each centers uh

897
00:35:54,880 --> 00:35:56,960
blasting at line rate

898
00:35:56,960 --> 00:35:58,880
if somehow they happen to collapse in

899
00:35:58,880 --> 00:36:02,079
the within one or two rtt time maybe

900
00:36:02,079 --> 00:36:03,920
more than just three or four senders

901
00:36:03,920 --> 00:36:06,880
they can easily just fill up the queue

902
00:36:06,880 --> 00:36:08,560
very quickly right

903
00:36:08,560 --> 00:36:10,880
and the entry condition controller

904
00:36:10,880 --> 00:36:12,480
still has to

905
00:36:12,480 --> 00:36:14,800
kind of have the signal

906
00:36:14,800 --> 00:36:16,720
uh

907
00:36:16,720 --> 00:36:18,880
passing through the congested queue

908
00:36:18,880 --> 00:36:20,880
and reaching the receiver and echoed

909
00:36:20,880 --> 00:36:23,440
back so this will naturally will take

910
00:36:23,440 --> 00:36:26,000
endless more than two to three or maybe

911
00:36:26,000 --> 00:36:28,320
more rtts depending on the level of

912
00:36:28,320 --> 00:36:29,440
incas

913
00:36:29,440 --> 00:36:31,359
so um this

914
00:36:31,359 --> 00:36:34,400
source flow control or we colleges back

915
00:36:34,400 --> 00:36:37,520
to sender signaling mechanism

916
00:36:37,520 --> 00:36:38,720
um

917
00:36:38,720 --> 00:36:40,480
provides that

918
00:36:40,480 --> 00:36:42,480
incast information

919
00:36:42,480 --> 00:36:45,040
directly back to sender within

920
00:36:45,040 --> 00:36:47,839
uh one rtt time

921
00:36:47,839 --> 00:36:50,160
and so they can handle such a unintended

922
00:36:50,160 --> 00:36:51,599
synchronized

923
00:36:51,599 --> 00:36:53,200
interest or

924
00:36:53,200 --> 00:36:55,599
it may also handle the case where

925
00:36:55,599 --> 00:36:58,240
um the timely or

926
00:36:58,240 --> 00:37:00,720
the rdma condition control

927
00:37:00,720 --> 00:37:02,160
uh happen to

928
00:37:02,160 --> 00:37:04,880
coincides with non-compliant congestion

929
00:37:04,880 --> 00:37:07,599
control or maybe when when condition

930
00:37:07,599 --> 00:37:10,079
control reach has a way larger rtt time

931
00:37:10,079 --> 00:37:12,400
that they wouldn't really react to this

932
00:37:12,400 --> 00:37:14,480
uh incase congestion control uh

933
00:37:14,480 --> 00:37:15,920
signaling within

934
00:37:15,920 --> 00:37:16,640
uh

935
00:37:16,640 --> 00:37:18,960
soon enough so that the back to sender

936
00:37:18,960 --> 00:37:20,480
is really

937
00:37:20,480 --> 00:37:23,760
handled such a different cases

938
00:37:23,760 --> 00:37:25,119
understand

939
00:37:25,119 --> 00:37:26,720
well thank you so much for that and with

940
00:37:26,720 --> 00:37:29,520
that i'm gonna uh uh

941
00:37:29,520 --> 00:37:31,680
that we do not have any other folks and

942
00:37:31,680 --> 00:37:33,119
we need to move on to the next

943
00:37:33,119 --> 00:37:34,720
presentation so thank you so much for

944
00:37:34,720 --> 00:37:38,000
your time jk your presentation to the

945
00:37:38,000 --> 00:37:39,520
folks in the group i'll say that this is

946
00:37:39,520 --> 00:37:42,160
work that's going to the ieee

947
00:37:42,160 --> 00:37:43,599
and

948
00:37:43,599 --> 00:37:44,960
if there's any feedback that you'd like

949
00:37:44,960 --> 00:37:47,920
to pass along i think it will be welcome

950
00:37:47,920 --> 00:37:50,079
either on the

951
00:37:50,079 --> 00:37:52,000
on the research group mailing list or

952
00:37:52,000 --> 00:37:53,760
directly to

953
00:37:53,760 --> 00:37:54,880
jk

954
00:37:54,880 --> 00:37:58,720
and with that i am going to move to the

955
00:37:58,720 --> 00:38:01,359
next presentation

956
00:38:01,359 --> 00:38:03,440
um

957
00:38:03,440 --> 00:38:05,280
natalie i hope you say i'm saying your

958
00:38:05,280 --> 00:38:09,520
name right i'm not sure yes i'm here

959
00:38:09,520 --> 00:38:11,839
yes i can hear you um

960
00:38:11,839 --> 00:38:13,839
i'm gonna ask you to request

961
00:38:13,839 --> 00:38:15,839
uh presentation

962
00:38:15,839 --> 00:38:18,839
okay

963
00:38:25,680 --> 00:38:28,079
and you should be able to choose your

964
00:38:28,079 --> 00:38:30,720
slides now

965
00:38:30,839 --> 00:38:32,400
yes

966
00:38:32,400 --> 00:38:34,880
excellent

967
00:38:34,960 --> 00:38:37,680
uh take it away then yes

968
00:38:37,680 --> 00:38:39,440
okay

969
00:38:39,440 --> 00:38:40,800
so

970
00:38:40,800 --> 00:38:42,640
good afternoon everybody my name is

971
00:38:42,640 --> 00:38:44,640
natalie roman and i work for the

972
00:38:44,640 --> 00:38:46,640
strategy and technology innovation at

973
00:38:46,640 --> 00:38:48,240
deutsche telekom

974
00:38:48,240 --> 00:38:49,599
and today i'm going to give a short

975
00:38:49,599 --> 00:38:52,240
presentation about an implementation of

976
00:38:52,240 --> 00:38:54,560
the vbr congestion control algorithm for

977
00:38:54,560 --> 00:38:59,720
the ccp which we have named sincerely

978
00:39:01,040 --> 00:39:04,320
so uh first of all the motivation to

979
00:39:04,320 --> 00:39:08,240
bring bvr to the tccp protocol relies on

980
00:39:08,240 --> 00:39:10,720
the fact that right now for dccp there

981
00:39:10,720 --> 00:39:12,560
are only three congestion control

982
00:39:12,560 --> 00:39:14,720
algorithms standardize it and all of

983
00:39:14,720 --> 00:39:16,720
them are lost bases

984
00:39:16,720 --> 00:39:19,040
so we thought about bringing vbr

985
00:39:19,040 --> 00:39:21,359
precisely because it is a non-loss-based

986
00:39:21,359 --> 00:39:23,119
acc algorithm

987
00:39:23,119 --> 00:39:24,400
apart from that

988
00:39:24,400 --> 00:39:27,200
we also wanted to use vbr within the

989
00:39:27,200 --> 00:39:30,000
multipath dccp protocol

990
00:39:30,000 --> 00:39:30,960
that means

991
00:39:30,960 --> 00:39:33,040
to bring it into a multiple scenario

992
00:39:33,040 --> 00:39:34,800
where the latency difference among the

993
00:39:34,800 --> 00:39:36,720
paths is a key factor to achieve a good

994
00:39:36,720 --> 00:39:38,480
performance and we thought that in this

995
00:39:38,480 --> 00:39:42,079
case bbr might be useful

996
00:39:42,079 --> 00:39:45,040
last but not least a will note that bbr

997
00:39:45,040 --> 00:39:47,040
has proven to have quite good results

998
00:39:47,040 --> 00:39:50,160
for tcp in terms of having a low latency

999
00:39:50,160 --> 00:39:52,160
high bandwidth and also avoiding

1000
00:39:52,160 --> 00:39:54,480
problems like buffer blood

1001
00:39:54,480 --> 00:39:56,880
so we wanted to verify whether all these

1002
00:39:56,880 --> 00:40:01,359
characteristics also apply for this ecp

1003
00:40:01,359 --> 00:40:03,599
on that basis a we started the

1004
00:40:03,599 --> 00:40:07,040
development of bbr version one for dccp

1005
00:40:07,040 --> 00:40:10,079
as cc85 within the linux kernel this

1006
00:40:10,079 --> 00:40:12,400
implementation is available as open

1007
00:40:12,400 --> 00:40:15,680
source and of course it is based on the

1008
00:40:15,680 --> 00:40:19,680
existing implementation of bvr for tcp

1009
00:40:19,680 --> 00:40:22,640
however the main difference between tcp

1010
00:40:22,640 --> 00:40:26,319
and dccp relies on the unreliable nature

1011
00:40:26,319 --> 00:40:27,680
of dccp

1012
00:40:27,680 --> 00:40:29,359
which means that all the functions

1013
00:40:29,359 --> 00:40:30,880
related to the acknowledgement

1014
00:40:30,880 --> 00:40:33,200
generation and their processing are part

1015
00:40:33,200 --> 00:40:35,119
of the ccid definition not of the

1016
00:40:35,119 --> 00:40:36,960
protocol itself

1017
00:40:36,960 --> 00:40:39,520
which means they are going to be part of

1018
00:40:39,520 --> 00:40:42,160
the ccid code

1019
00:40:42,160 --> 00:40:45,040
apart from that a we also wanted to

1020
00:40:45,040 --> 00:40:48,800
adopt this existing and mature a

1021
00:40:48,800 --> 00:40:50,319
tcp vbvr

1022
00:40:50,319 --> 00:40:54,160
as a new ccid profile for tccp and for

1023
00:40:54,160 --> 00:40:56,480
that we have already submitted an

1024
00:40:56,480 --> 00:40:58,640
initial draft and we will be happy to

1025
00:40:58,640 --> 00:41:00,800
receive some feedback and comments about

1026
00:41:00,800 --> 00:41:02,960
it

1027
00:41:05,040 --> 00:41:06,560
so

1028
00:41:06,560 --> 00:41:08,960
once we finish our first implementation

1029
00:41:08,960 --> 00:41:10,960
of bbr for dccp

1030
00:41:10,960 --> 00:41:13,119
we started some evaluation in a

1031
00:41:13,119 --> 00:41:15,599
controlled environment using a single

1032
00:41:15,599 --> 00:41:17,839
path and a multiple scenario

1033
00:41:17,839 --> 00:41:19,920
in this evaluation we compared the

1034
00:41:19,920 --> 00:41:22,480
performance of our implementation of bvr

1035
00:41:22,480 --> 00:41:24,560
which is cc85

1036
00:41:24,560 --> 00:41:27,119
with the performance of cci2 which is

1037
00:41:27,119 --> 00:41:29,119
the default congestion control for the

1038
00:41:29,119 --> 00:41:30,800
ccp

1039
00:41:30,800 --> 00:41:33,839
the results show that for both cases for

1040
00:41:33,839 --> 00:41:35,760
single pad and multipath

1041
00:41:35,760 --> 00:41:38,800
cc-85 that means bbr has way better

1042
00:41:38,800 --> 00:41:41,440
results in terms of latency when the pad

1043
00:41:41,440 --> 00:41:43,839
has a limitation in the bandwidth

1044
00:41:43,839 --> 00:41:45,680
apart from that in the case of the

1045
00:41:45,680 --> 00:41:48,720
multipath scenario ccid5 also helped

1046
00:41:48,720 --> 00:41:51,839
improve the scheduling performance

1047
00:41:51,839 --> 00:41:53,760
moreover the main achievement of this

1048
00:41:53,760 --> 00:41:56,160
test was to prove that the conceptual

1049
00:41:56,160 --> 00:41:59,520
basis of tcpvr was also applicable for

1050
00:41:59,520 --> 00:42:02,560
dccp which means that all the

1051
00:42:02,560 --> 00:42:04,960
existing studies and results available

1052
00:42:04,960 --> 00:42:08,640
can be extended to dccp as well

1053
00:42:08,640 --> 00:42:09,040
in

1054
00:42:09,040 --> 00:42:10,480
[Music]

1055
00:42:10,480 --> 00:42:11,599
the whole

1056
00:42:11,599 --> 00:42:14,240
analysis and also the

1057
00:42:14,240 --> 00:42:16,319
description of the test environment is

1058
00:42:16,319 --> 00:42:18,319
here in this paper which i have linked

1059
00:42:18,319 --> 00:42:20,240
in case anyone is interested to check

1060
00:42:20,240 --> 00:42:22,720
about it

1061
00:42:24,000 --> 00:42:25,839
so after

1062
00:42:25,839 --> 00:42:28,400
executing this first test we move to a

1063
00:42:28,400 --> 00:42:30,480
more realistic environment

1064
00:42:30,480 --> 00:42:32,240
and we started testing

1065
00:42:32,240 --> 00:42:35,200
our implementation in nlt link and we

1066
00:42:35,200 --> 00:42:38,000
compared the result of cc 85

1067
00:42:38,000 --> 00:42:40,880
and the standard tcp vivia

1068
00:42:40,880 --> 00:42:42,400
in this results

1069
00:42:42,400 --> 00:42:45,599
we found that a during the pro rtt phase

1070
00:42:45,599 --> 00:42:47,440
the drops in the bandwidth were quite

1071
00:42:47,440 --> 00:42:50,000
deeper for the cc-85 in comparison with

1072
00:42:50,000 --> 00:42:52,079
the tcp vr

1073
00:42:52,079 --> 00:42:54,560
and also the duration of the property

1074
00:42:54,560 --> 00:42:56,880
phase was a little bit longer in some

1075
00:42:56,880 --> 00:43:00,079
cases in comparison with tcp

1076
00:43:00,079 --> 00:43:02,560
so we started an analysis of this

1077
00:43:02,560 --> 00:43:05,440
problem and we figured out that

1078
00:43:05,440 --> 00:43:06,960
what was the cause

1079
00:43:06,960 --> 00:43:09,280
the point is a bbr

1080
00:43:09,280 --> 00:43:10,720
requires the restoration of the

1081
00:43:10,720 --> 00:43:13,119
congestion window when it leaves the

1082
00:43:13,119 --> 00:43:15,200
property phase so it restores the

1083
00:43:15,200 --> 00:43:17,839
congestion window from a quite low value

1084
00:43:17,839 --> 00:43:20,319
to the value it had previous entering

1085
00:43:20,319 --> 00:43:21,839
this phase

1086
00:43:21,839 --> 00:43:23,839
apart from that

1087
00:43:23,839 --> 00:43:25,359
the dccp

1088
00:43:25,359 --> 00:43:27,440
requires that when there is a big change

1089
00:43:27,440 --> 00:43:29,200
in the congestion window

1090
00:43:29,200 --> 00:43:30,880
there has to be a synchronization

1091
00:43:30,880 --> 00:43:32,720
between the sequence and acknowledgement

1092
00:43:32,720 --> 00:43:34,720
validity windows

1093
00:43:34,720 --> 00:43:36,400
this synchronization

1094
00:43:36,400 --> 00:43:38,960
uses a feature negotiation function

1095
00:43:38,960 --> 00:43:41,680
which is described here in this figure

1096
00:43:41,680 --> 00:43:43,760
basically the sender

1097
00:43:43,760 --> 00:43:46,160
starts this negotiation and once it

1098
00:43:46,160 --> 00:43:48,720
receives the confirmation it can update

1099
00:43:48,720 --> 00:43:51,040
the local buy

1100
00:43:51,040 --> 00:43:53,359
this brings a

1101
00:43:53,359 --> 00:43:55,520
brings us to a problem and is that the

1102
00:43:55,520 --> 00:43:58,000
property federation acquires a latency

1103
00:43:58,000 --> 00:44:00,000
dependency because this negotiation

1104
00:44:00,000 --> 00:44:03,040
takes at least one a rtt before we can

1105
00:44:03,040 --> 00:44:05,680
update the local values and proceed to

1106
00:44:05,680 --> 00:44:08,880
the restoration of the

1107
00:44:08,880 --> 00:44:10,240
of the congestion window when leaving

1108
00:44:10,240 --> 00:44:13,279
the property phase

1109
00:44:15,280 --> 00:44:17,839
so to solve this problem we apply the

1110
00:44:17,839 --> 00:44:20,240
temporary solution which is that we

1111
00:44:20,240 --> 00:44:23,359
trigger this synchronization but we

1112
00:44:23,359 --> 00:44:25,119
don't wait for the confirmation to

1113
00:44:25,119 --> 00:44:26,800
update the local values

1114
00:44:26,800 --> 00:44:29,280
that means as soon as we trigger the

1115
00:44:29,280 --> 00:44:31,359
synchronization we can update the local

1116
00:44:31,359 --> 00:44:33,280
value and proceed to restore the

1117
00:44:33,280 --> 00:44:35,440
congestion wind

1118
00:44:35,440 --> 00:44:38,720
after applying this a temporary solution

1119
00:44:38,720 --> 00:44:40,800
we managed to achieve a similar

1120
00:44:40,800 --> 00:44:45,520
performance comparing ccid5 and tcpi

1121
00:44:45,520 --> 00:44:47,280
now the question is that as i said this

1122
00:44:47,280 --> 00:44:49,680
is a temporary solution and we would

1123
00:44:49,680 --> 00:44:50,800
like to

1124
00:44:50,800 --> 00:44:53,440
start a discussion to know what is the

1125
00:44:53,440 --> 00:44:55,680
best approach to solve this problem

1126
00:44:55,680 --> 00:44:58,400
so maybe a new or an enhancing feature

1127
00:44:58,400 --> 00:45:00,000
for the sequence with the negotiation is

1128
00:45:00,000 --> 00:45:02,640
necessary or maybe there can be a

1129
00:45:02,640 --> 00:45:04,480
different approach that help us to solve

1130
00:45:04,480 --> 00:45:07,280
this problem

1131
00:45:09,359 --> 00:45:12,400
so to summarize this whole thing

1132
00:45:12,400 --> 00:45:16,079
we have implemented bbr for dccp

1133
00:45:16,079 --> 00:45:18,079
the initial test that we have made have

1134
00:45:18,079 --> 00:45:20,640
proven that a the conceptual basis of

1135
00:45:20,640 --> 00:45:23,599
tcpvr applies as well for the ccp

1136
00:45:23,599 --> 00:45:25,440
of course taking into account the

1137
00:45:25,440 --> 00:45:27,359
unreliable nature of dccp and the

1138
00:45:27,359 --> 00:45:29,520
difference that that brings us

1139
00:45:29,520 --> 00:45:31,839
and on that basis we would like to adopt

1140
00:45:31,839 --> 00:45:34,880
vbr as a new ccid profile

1141
00:45:34,880 --> 00:45:36,079
for that

1142
00:45:36,079 --> 00:45:38,079
as i said we have already submitted an

1143
00:45:38,079 --> 00:45:39,280
initial draft

1144
00:45:39,280 --> 00:45:42,160
we submitted it initially to iccrg but

1145
00:45:42,160 --> 00:45:43,599
we have been told that

1146
00:45:43,599 --> 00:45:45,760
this has to actually be part of the

1147
00:45:45,760 --> 00:45:48,720
usbwg group so in in the further version

1148
00:45:48,720 --> 00:45:51,119
google submitted that but we will be

1149
00:45:51,119 --> 00:45:52,640
happy to receive any comment or any

1150
00:45:52,640 --> 00:45:54,640
feedback about it

1151
00:45:54,640 --> 00:45:57,839
the second question comes about this

1152
00:45:57,839 --> 00:46:00,720
sequence window negotiation so we have

1153
00:46:00,720 --> 00:46:02,480
described the problem and we would like

1154
00:46:02,480 --> 00:46:04,240
to receive some feedback about it and to

1155
00:46:04,240 --> 00:46:06,560
start as well a discussion there but if

1156
00:46:06,560 --> 00:46:08,720
we are not sure what should be the right

1157
00:46:08,720 --> 00:46:10,480
place to start the discussion either

1158
00:46:10,480 --> 00:46:15,040
here in ccr in iccrg or in tsbwg

1159
00:46:15,040 --> 00:46:17,599
so that's the reason why i'm making this

1160
00:46:17,599 --> 00:46:19,280
presentation now

1161
00:46:19,280 --> 00:46:22,319
and that's it for now

1162
00:46:25,920 --> 00:46:28,560
thank you natalie that was a wonderful

1163
00:46:28,560 --> 00:46:31,200
uh and short presentation so

1164
00:46:31,200 --> 00:46:32,960
uh and thank you for that last slide in

1165
00:46:32,960 --> 00:46:35,359
particular i think it's uh

1166
00:46:35,359 --> 00:46:37,839
gauri's in the queue so i'll i'll let

1167
00:46:37,839 --> 00:46:41,880
him have a take as to www

1168
00:46:54,720 --> 00:46:57,599
that we'd be able to discuss this um on

1169
00:46:57,599 --> 00:46:59,440
the mailing list and

1170
00:46:59,440 --> 00:47:01,680
make

1171
00:47:01,680 --> 00:47:03,520
some progress with the algorithm and the

1172
00:47:03,520 --> 00:47:06,400
proposal i'm not sure where the home

1173
00:47:06,400 --> 00:47:09,040
would be um but it lies between these

1174
00:47:09,040 --> 00:47:11,920
two groups and whatever the home you

1175
00:47:11,920 --> 00:47:13,839
shouldn't be discouraged please please

1176
00:47:13,839 --> 00:47:16,000
discuss how to fix it and please discuss

1177
00:47:16,000 --> 00:47:17,280
the issues

1178
00:47:17,280 --> 00:47:19,040
um

1179
00:47:19,040 --> 00:47:21,119
it was a great presentation

1180
00:47:21,119 --> 00:47:22,960
i don't know what the outcome will be so

1181
00:47:22,960 --> 00:47:25,040
i'm looking forward to hearing more from

1182
00:47:25,040 --> 00:47:27,760
you about these methods

1183
00:47:27,760 --> 00:47:31,200
okay i want this stuff thanks

1184
00:47:31,359 --> 00:47:34,078
thank you gauri

1185
00:47:35,440 --> 00:47:38,400
i had one uh question here so you refer

1186
00:47:38,400 --> 00:47:40,240
to bbr here as mature right my

1187
00:47:40,240 --> 00:47:41,680
understanding is there's quite a few

1188
00:47:41,680 --> 00:47:44,240
presentations today talking about bbr v2

1189
00:47:44,240 --> 00:47:46,240
which is the next evolution of bbr with

1190
00:47:46,240 --> 00:47:48,960
like coexistence with cubic etc right so

1191
00:47:48,960 --> 00:47:51,119
my question is if you're going to place

1192
00:47:51,119 --> 00:47:53,280
you know create a new standard

1193
00:47:53,280 --> 00:47:54,559
um

1194
00:47:54,559 --> 00:47:58,000
would it be better to wait for bbr v2 to

1195
00:47:58,000 --> 00:48:00,400
mature before doing this i guess that's

1196
00:48:00,400 --> 00:48:03,359
my question to the group

1197
00:48:03,440 --> 00:48:05,520
yes i mean from my point of view we are

1198
00:48:05,520 --> 00:48:07,839
also planning to implement vbr version 2

1199
00:48:07,839 --> 00:48:10,880
and tested it in dca in tccp that is in

1200
00:48:10,880 --> 00:48:11,839
our

1201
00:48:11,839 --> 00:48:14,319
scope of workforce next year and i think

1202
00:48:14,319 --> 00:48:15,839
yes it will be better to use bible

1203
00:48:15,839 --> 00:48:20,839
version 2 as it is a more mature version

1204
00:48:23,280 --> 00:48:24,400
all right so we're going to take more

1205
00:48:24,400 --> 00:48:27,119
discussion on to the list and when i say

1206
00:48:27,119 --> 00:48:29,920
the less i mean i see crg but

1207
00:48:29,920 --> 00:48:31,359
um

1208
00:48:31,359 --> 00:48:33,119
we're going to talk to the chairs about

1209
00:48:33,119 --> 00:48:36,079
oh i see the ad is in there so martin go

1210
00:48:36,079 --> 00:48:39,680
for it well not the id for this but um

1211
00:48:39,680 --> 00:48:41,520
yeah i like i i

1212
00:48:41,520 --> 00:48:43,680
i support this work as well but i am a

1213
00:48:43,680 --> 00:48:45,599
little

1214
00:48:45,599 --> 00:48:47,520
concerned that this is racing a little

1215
00:48:47,520 --> 00:48:50,480
bit ahead of the actual tcp bbr work um

1216
00:48:50,480 --> 00:48:52,000
which i i think probably has a little

1217
00:48:52,000 --> 00:48:54,160
more data to support it um

1218
00:48:54,160 --> 00:48:55,680
so i mean

1219
00:48:55,680 --> 00:48:57,520
it seems like most bbr discussion at

1220
00:48:57,520 --> 00:49:00,400
this point is happening in iccrg

1221
00:49:00,400 --> 00:49:02,319
um and you could certainly do a drafting

1222
00:49:02,319 --> 00:49:04,960
iccrg it would be experimental but given

1223
00:49:04,960 --> 00:49:06,720
the bb like we'll find out more i guess

1224
00:49:06,720 --> 00:49:08,240
in a minute here but given the bbr is

1225
00:49:08,240 --> 00:49:09,440
still a little

1226
00:49:09,440 --> 00:49:11,599
uh is a moving target maybe that's the

1227
00:49:11,599 --> 00:49:15,559
right designation for now

1228
00:49:16,880 --> 00:49:19,440
yeah that's my sense as well um but

1229
00:49:19,440 --> 00:49:21,440
we'll take this discussion offline uh

1230
00:49:21,440 --> 00:49:24,559
with the chairs of tsuwg and

1231
00:49:24,559 --> 00:49:27,119
um we'll get back on that

1232
00:49:27,119 --> 00:49:29,040
david you'll have the last comment and

1233
00:49:29,040 --> 00:49:30,800
then i'll let them on to the next

1234
00:49:30,800 --> 00:49:32,880
discussion

1235
00:49:32,880 --> 00:49:35,280
among chairs is fine

1236
00:49:35,280 --> 00:49:38,400
um i think icc as as

1237
00:49:38,400 --> 00:49:40,880
i think iccrg is the right place to

1238
00:49:40,880 --> 00:49:43,680
discuss the technology and it's also the

1239
00:49:43,680 --> 00:49:46,079
right place to figure out appropriate

1240
00:49:46,079 --> 00:49:48,280
timing when the timing is appropriate

1241
00:49:48,280 --> 00:49:52,640
tsvwg uh is almost certainly uh the uh

1242
00:49:52,640 --> 00:49:54,400
the venue to work on the directness here

1243
00:49:54,400 --> 00:49:57,040
and standardization but uh

1244
00:49:57,040 --> 00:49:59,680
need to get the timing right and make

1245
00:49:59,680 --> 00:50:01,839
sure that it's it's it's well

1246
00:50:01,839 --> 00:50:05,759
coordinated with bbr as a whole

1247
00:50:07,200 --> 00:50:08,400
yep

1248
00:50:08,400 --> 00:50:09,920
thank you for that comment david all

1249
00:50:09,920 --> 00:50:11,440
right thank you so much natalie and i

1250
00:50:11,440 --> 00:50:13,520
hope to see you on the mating list

1251
00:50:13,520 --> 00:50:14,559
um

1252
00:50:14,559 --> 00:50:16,559
people please engage

1253
00:50:16,559 --> 00:50:20,240
it's good to have this mapping for

1254
00:50:20,400 --> 00:50:22,319
bccp as well

1255
00:50:22,319 --> 00:50:24,079
i will now move on to the next

1256
00:50:24,079 --> 00:50:27,680
presentation and that is ayush

1257
00:50:27,680 --> 00:50:30,558
are you sure you're here

1258
00:50:31,040 --> 00:50:33,280
i see you up there

1259
00:50:33,280 --> 00:50:38,079
uh can you i i see you requested i am

1260
00:50:38,319 --> 00:50:41,640
wait a minute

1261
00:50:50,240 --> 00:50:52,480
all right take it away

1262
00:50:52,480 --> 00:50:55,760
okay uh so yeah hi everyone i'm ayush

1263
00:50:55,760 --> 00:50:58,640
i'm a third year phd student at the

1264
00:50:58,640 --> 00:51:00,720
national university of singapore and

1265
00:51:00,720 --> 00:51:03,280
today i'll be talking about uh some very

1266
00:51:03,280 --> 00:51:05,359
interesting work that we've been doing

1267
00:51:05,359 --> 00:51:07,280
on studying the game theory behind

1268
00:51:07,280 --> 00:51:08,800
actually you know choosing between

1269
00:51:08,800 --> 00:51:12,079
running cubic and bbr on the internet

1270
00:51:12,079 --> 00:51:13,680
uh this work has been done in

1271
00:51:13,680 --> 00:51:15,359
collaboration with my

1272
00:51:15,359 --> 00:51:19,440
uh collaborators jinxie melties sean raj

1273
00:51:19,440 --> 00:51:20,559
and my

1274
00:51:20,559 --> 00:51:23,839
advisor ben leon

1275
00:51:25,119 --> 00:51:28,559
okay so since pbr was introduced in 2016

1276
00:51:28,559 --> 00:51:30,480
a lot of websites have made the

1277
00:51:30,480 --> 00:51:32,240
performance driven decision to actually

1278
00:51:32,240 --> 00:51:35,119
adopt it and use it to send

1279
00:51:35,119 --> 00:51:37,440
data for their websites and companies

1280
00:51:37,440 --> 00:51:39,839
like google and spotify and dropbox have

1281
00:51:39,839 --> 00:51:41,520
reported seeing lower delays and better

1282
00:51:41,520 --> 00:51:43,839
throughput especially in lossy networks

1283
00:51:43,839 --> 00:51:46,160
where act locked loss-based algorithms

1284
00:51:46,160 --> 00:51:49,599
like cubic are known to suffer

1285
00:51:49,599 --> 00:51:51,839
and clearly this trend has got on

1286
00:51:51,839 --> 00:51:53,359
since um

1287
00:51:53,359 --> 00:51:55,599
we did a measurement study in late 2019

1288
00:51:55,599 --> 00:51:57,599
we found that close to eighteen percent

1289
00:51:57,599 --> 00:51:59,599
of the alexa top twenty thousand

1290
00:51:59,599 --> 00:52:01,280
thousand websites are already running

1291
00:52:01,280 --> 00:52:04,880
vbr and this 18 metric actually goes up

1292
00:52:04,880 --> 00:52:06,720
even more when you consider the more

1293
00:52:06,720 --> 00:52:10,240
popular websites or websites that uh

1294
00:52:10,240 --> 00:52:12,400
contribute more to downstream traffic

1295
00:52:12,400 --> 00:52:14,319
like for example video streaming

1296
00:52:14,319 --> 00:52:17,319
websites

1297
00:52:18,880 --> 00:52:21,839
so the question we want to ask is

1298
00:52:21,839 --> 00:52:24,240
where is this transition uh really

1299
00:52:24,240 --> 00:52:26,400
heading so this transition in the

1300
00:52:26,400 --> 00:52:28,559
internet's congestion control landscape

1301
00:52:28,559 --> 00:52:30,960
is definitely not a new thing we've seen

1302
00:52:30,960 --> 00:52:32,880
in the past that renault dominated

1303
00:52:32,880 --> 00:52:35,920
internet in the early 2000s slowly

1304
00:52:35,920 --> 00:52:38,960
transitioned into an internet that

1305
00:52:38,960 --> 00:52:41,520
was mainly cubic dominant and much like

1306
00:52:41,520 --> 00:52:44,000
gbr does today even back then cubic

1307
00:52:44,000 --> 00:52:46,880
basically gave you better throughput and

1308
00:52:46,880 --> 00:52:48,480
better utilization guarantees on the

1309
00:52:48,480 --> 00:52:50,800
internet which is why people moved on to

1310
00:52:50,800 --> 00:52:52,480
it

1311
00:52:52,480 --> 00:52:54,720
but there is one key aspect

1312
00:52:54,720 --> 00:52:57,119
in terms of which this transition from

1313
00:52:57,119 --> 00:52:59,599
cubic to bbr is very different from the

1314
00:52:59,599 --> 00:53:01,680
transition that we've already seen which

1315
00:53:01,680 --> 00:53:04,640
was between renault uh to cubic

1316
00:53:04,640 --> 00:53:06,000
so

1317
00:53:06,000 --> 00:53:07,839
the transition between render to cubic

1318
00:53:07,839 --> 00:53:10,480
was essentially between two window-based

1319
00:53:10,480 --> 00:53:12,559
loss-based algorithms so

1320
00:53:12,559 --> 00:53:14,800
they were they both had the same

1321
00:53:14,800 --> 00:53:17,520
congestion control philosophy they both

1322
00:53:17,520 --> 00:53:20,720
uh reacted to the same congestion uh

1323
00:53:20,720 --> 00:53:23,280
signal and that's why you know we didn't

1324
00:53:23,280 --> 00:53:25,359
really face a lot of problems

1325
00:53:25,359 --> 00:53:28,720
but right now as you have more and more

1326
00:53:28,720 --> 00:53:31,200
websites replacing uh using bbr to

1327
00:53:31,200 --> 00:53:32,640
replace the existing loss-based

1328
00:53:32,640 --> 00:53:35,119
algorithms what's that actually doing is

1329
00:53:35,119 --> 00:53:37,520
it's creating a paradigm shift in how

1330
00:53:37,520 --> 00:53:38,960
congestion control is done on the

1331
00:53:38,960 --> 00:53:40,079
internet

1332
00:53:40,079 --> 00:53:43,760
uh now we have websites um

1333
00:53:43,760 --> 00:53:45,440
now we have floors that are competing

1334
00:53:45,440 --> 00:53:47,599
with other floors and

1335
00:53:47,599 --> 00:53:48,640
we have

1336
00:53:48,640 --> 00:53:51,359
all mixed set of congestion signals that

1337
00:53:51,359 --> 00:53:54,960
everyone's uh responding to

1338
00:53:55,520 --> 00:53:58,160
so the question we want to ask is uh

1339
00:53:58,160 --> 00:54:00,559
given this performance improvement uh

1340
00:54:00,559 --> 00:54:02,880
that bbr has given us so far

1341
00:54:02,880 --> 00:54:04,240
uh

1342
00:54:04,240 --> 00:54:06,559
where do we actually

1343
00:54:06,559 --> 00:54:09,200
expect this transition to move or in

1344
00:54:09,200 --> 00:54:11,119
other words if you're seeing such good

1345
00:54:11,119 --> 00:54:13,280
performance benefits is it reasonable to

1346
00:54:13,280 --> 00:54:14,559
expect

1347
00:54:14,559 --> 00:54:16,559
everyone to switch from cubic to bbi at

1348
00:54:16,559 --> 00:54:18,400
some point in the future

1349
00:54:18,400 --> 00:54:20,640
so this is a question uh that we

1350
00:54:20,640 --> 00:54:22,960
discussed in a recent short paper at

1351
00:54:22,960 --> 00:54:25,440
epnet 21

1352
00:54:25,440 --> 00:54:27,680
it was titled conjecture existence of

1353
00:54:27,680 --> 00:54:29,200
nash equilibria and modern internet

1354
00:54:29,200 --> 00:54:30,720
congestion control

1355
00:54:30,720 --> 00:54:34,079
and the main insight

1356
00:54:34,079 --> 00:54:36,000
we found while writing this paper is

1357
00:54:36,000 --> 00:54:36,880
that

1358
00:54:36,880 --> 00:54:39,760
you can really model this entire problem

1359
00:54:39,760 --> 00:54:42,480
of choosing between cubic and bbr as a

1360
00:54:42,480 --> 00:54:44,799
normal form game because we have some

1361
00:54:44,799 --> 00:54:47,280
players or in this case websites that

1362
00:54:47,280 --> 00:54:49,920
can maximize some utility

1363
00:54:49,920 --> 00:54:51,599
which in this case is network

1364
00:54:51,599 --> 00:54:54,240
performance and all these players have a

1365
00:54:54,240 --> 00:54:56,079
fixed set of strategies which is either

1366
00:54:56,079 --> 00:54:58,400
running cubic or bbr

1367
00:54:58,400 --> 00:55:00,559
available to them to maximize their

1368
00:55:00,559 --> 00:55:03,040
utility

1369
00:55:04,960 --> 00:55:08,400
so the approach we had uh to analyze

1370
00:55:08,400 --> 00:55:10,480
this entire system was actually to

1371
00:55:10,480 --> 00:55:11,680
calculate

1372
00:55:11,680 --> 00:55:13,839
uh the nash equilibrium in the network

1373
00:55:13,839 --> 00:55:15,200
where the senders have the freedom to

1374
00:55:15,200 --> 00:55:17,760
choose between cubic and bbr to maximize

1375
00:55:17,760 --> 00:55:19,520
the throughput

1376
00:55:19,520 --> 00:55:20,640
so

1377
00:55:20,640 --> 00:55:22,720
just as a refresher a nash equilibrium

1378
00:55:22,720 --> 00:55:25,040
is basically a strategy distribution

1379
00:55:25,040 --> 00:55:26,720
where none of the players have the

1380
00:55:26,720 --> 00:55:28,880
incentive to switch to the other

1381
00:55:28,880 --> 00:55:31,599
strategy or in other words

1382
00:55:31,599 --> 00:55:33,440
in networking terms it would mean a

1383
00:55:33,440 --> 00:55:34,960
distribution of congestion control

1384
00:55:34,960 --> 00:55:37,040
algorithms over the network where none

1385
00:55:37,040 --> 00:55:39,200
of the senders have the incentive have

1386
00:55:39,200 --> 00:55:41,680
the performance incentive to switch from

1387
00:55:41,680 --> 00:55:45,280
cubic to bbr or vice versa

1388
00:55:45,280 --> 00:55:47,520
so let's look at the example

1389
00:55:47,520 --> 00:55:49,040
on the slide here let's say we have a

1390
00:55:49,040 --> 00:55:51,839
network with seven senders and

1391
00:55:51,839 --> 00:55:53,599
of the seven centers four of them are

1392
00:55:53,599 --> 00:55:55,280
running bbr and three of them are

1393
00:55:55,280 --> 00:55:57,760
running cubic and given this network

1394
00:55:57,760 --> 00:55:59,839
configuration and congestion control

1395
00:55:59,839 --> 00:56:01,839
algorithm distribution

1396
00:56:01,839 --> 00:56:03,680
each of the flows are getting some share

1397
00:56:03,680 --> 00:56:05,440
of the bottleneck bandwidth

1398
00:56:05,440 --> 00:56:07,680
now let's say one of these senders alex

1399
00:56:07,680 --> 00:56:11,119
decides to switch from bbr to cubic

1400
00:56:11,119 --> 00:56:13,040
and while making the switch he

1401
00:56:13,040 --> 00:56:15,280
essentially changes the

1402
00:56:15,280 --> 00:56:17,040
internet's congestion control landscape

1403
00:56:17,040 --> 00:56:18,640
and now he sees

1404
00:56:18,640 --> 00:56:20,160
um

1405
00:56:20,160 --> 00:56:22,880
different throughput on the network

1406
00:56:22,880 --> 00:56:24,880
so in this case uh we're going to make

1407
00:56:24,880 --> 00:56:27,280
the assumption that when alex does this

1408
00:56:27,280 --> 00:56:30,400
switch if he sees a better throughput

1409
00:56:30,400 --> 00:56:32,000
he's going to

1410
00:56:32,000 --> 00:56:34,000
switch to the algorithm that is giving

1411
00:56:34,000 --> 00:56:36,799
him better throughput or basically all

1412
00:56:36,799 --> 00:56:39,040
uh the agents in our network are going

1413
00:56:39,040 --> 00:56:41,280
to make a performance driven decision on

1414
00:56:41,280 --> 00:56:43,599
which algorithm they want to run

1415
00:56:43,599 --> 00:56:46,480
so in such a network if we are able to

1416
00:56:46,480 --> 00:56:49,839
find a congestion control distribution

1417
00:56:49,839 --> 00:56:50,880
where

1418
00:56:50,880 --> 00:56:53,599
everyone where for everyone making the

1419
00:56:53,599 --> 00:56:56,480
switch to the other algorithm

1420
00:56:56,480 --> 00:56:58,880
gives them strictly worse performance

1421
00:56:58,880 --> 00:57:00,880
that essentially means that

1422
00:57:00,880 --> 00:57:03,599
this uh conjunction control algorithm

1423
00:57:03,599 --> 00:57:06,079
distribution is the nash equilibria for

1424
00:57:06,079 --> 00:57:08,079
that network or basically

1425
00:57:08,079 --> 00:57:10,160
this is the fixed share of cubic and bbr

1426
00:57:10,160 --> 00:57:12,319
flows we have in the network uh there's

1427
00:57:12,319 --> 00:57:14,720
really no incentive for the number of

1428
00:57:14,720 --> 00:57:16,480
bbr flows to increase or for the number

1429
00:57:16,480 --> 00:57:20,240
of cubic floors to increase

1430
00:57:20,640 --> 00:57:23,599
uh now a conjecture in the paper is that

1431
00:57:23,599 --> 00:57:25,760
we think this nash equilibrium

1432
00:57:25,760 --> 00:57:28,640
equilibria will exist in all kinds of

1433
00:57:28,640 --> 00:57:30,319
networks where you have

1434
00:57:30,319 --> 00:57:32,079
senders and

1435
00:57:32,079 --> 00:57:34,880
senders running cubic and vbr flows

1436
00:57:34,880 --> 00:57:37,760
and this is actually quite a big claim

1437
00:57:37,760 --> 00:57:40,000
to make which is why we still say that

1438
00:57:40,000 --> 00:57:42,000
it's a conjecture

1439
00:57:42,000 --> 00:57:44,640
but we have good reason

1440
00:57:44,640 --> 00:57:46,960
for making this conjecture so in the

1441
00:57:46,960 --> 00:57:49,520
paper we go over the

1442
00:57:49,520 --> 00:57:52,160
exact observations that we made

1443
00:57:52,160 --> 00:57:54,480
based on how cubic and bbr interact and

1444
00:57:54,480 --> 00:57:56,720
how these observations actually guide us

1445
00:57:56,720 --> 00:57:58,960
towards making this conjecture but in

1446
00:57:58,960 --> 00:58:00,720
the interest of time i'm only going to

1447
00:58:00,720 --> 00:58:03,599
discuss the key observation uh over here

1448
00:58:03,599 --> 00:58:04,720
which

1449
00:58:04,720 --> 00:58:06,559
will hopefully convince you guys that

1450
00:58:06,559 --> 00:58:08,480
yeah there might indeed be a nash

1451
00:58:08,480 --> 00:58:10,559
equilibria when you know n number of

1452
00:58:10,559 --> 00:58:14,240
flows compete at a common bottleneck

1453
00:58:14,240 --> 00:58:17,359
so um over here i'm going to plot a

1454
00:58:17,359 --> 00:58:19,680
graph for a system where let's say we

1455
00:58:19,680 --> 00:58:20,559
have

1456
00:58:20,559 --> 00:58:23,359
uh symmetric senders so all my senders

1457
00:58:23,359 --> 00:58:26,400
have the same rtt and they only differ

1458
00:58:26,400 --> 00:58:28,640
in the sense of which congestion control

1459
00:58:28,640 --> 00:58:31,119
algorithm they choose to run

1460
00:58:31,119 --> 00:58:33,839
now we know from

1461
00:58:33,839 --> 00:58:35,599
other measurement studies that when you

1462
00:58:35,599 --> 00:58:38,319
have a very small number of

1463
00:58:38,319 --> 00:58:41,599
uh bbr flows in the network they can get

1464
00:58:41,599 --> 00:58:43,839
a disproportionately high share of the

1465
00:58:43,839 --> 00:58:45,359
bottleneck bandwidth

1466
00:58:45,359 --> 00:58:48,240
so i'm going to plot this as point a in

1467
00:58:48,240 --> 00:58:50,640
the graph on the slide so on this graph

1468
00:58:50,640 --> 00:58:52,559
basically on the y-axis i have the

1469
00:58:52,559 --> 00:58:55,040
combined throughput of all the bbr flows

1470
00:58:55,040 --> 00:58:57,920
and on the x-axis i have the percentage

1471
00:58:57,920 --> 00:59:00,400
of bbi flows in each

1472
00:59:00,400 --> 00:59:02,839
congestion control algorithm

1473
00:59:02,839 --> 00:59:05,200
distribution so we can

1474
00:59:05,200 --> 00:59:07,680
plot point a based on the observation

1475
00:59:07,680 --> 00:59:09,839
made by other measurement studies we can

1476
00:59:09,839 --> 00:59:11,920
also plot point b which basically says

1477
00:59:11,920 --> 00:59:14,000
that when all the flows uh at the

1478
00:59:14,000 --> 00:59:16,000
bottleneck are bbr flows they will

1479
00:59:16,000 --> 00:59:18,160
basically use the entire bottleneck

1480
00:59:18,160 --> 00:59:21,200
bandwidth which is really a no-brainer

1481
00:59:21,200 --> 00:59:23,680
so we have two points point a and point

1482
00:59:23,680 --> 00:59:26,480
b and we can also say that all

1483
00:59:26,480 --> 00:59:28,720
uh all the data points between point a

1484
00:59:28,720 --> 00:59:31,119
and point b will lie on some line

1485
00:59:31,119 --> 00:59:34,559
connecting uh the two points

1486
00:59:34,559 --> 00:59:37,359
and these different possible lines i've

1487
00:59:37,359 --> 00:59:39,520
just depicted using the different gray

1488
00:59:39,520 --> 00:59:42,079
squiggly lines of the slide

1489
00:59:42,079 --> 00:59:44,240
so the interesting thing about this

1490
00:59:44,240 --> 00:59:46,880
graph is that when you actually plot out

1491
00:59:46,880 --> 00:59:48,960
these values

1492
00:59:48,960 --> 00:59:50,720
every point at which

1493
00:59:50,720 --> 00:59:54,240
your gray line intersects

1494
00:59:54,240 --> 00:59:56,400
the fair share line

1495
00:59:56,400 --> 00:59:59,040
that essentially signifies the nash

1496
00:59:59,040 --> 01:00:01,359
equilibrium point in the network

1497
01:00:01,359 --> 01:00:03,680
so the fair share line uh i'm sorry i

1498
01:00:03,680 --> 01:00:05,200
didn't go over it earlier but the fair

1499
01:00:05,200 --> 01:00:07,520
share line is basically

1500
01:00:07,520 --> 01:00:09,040
the line at which

1501
01:00:09,040 --> 01:00:11,920
all your flows get uh the fair share so

1502
01:00:11,920 --> 01:00:14,240
if bpr was getting the fair share in

1503
01:00:14,240 --> 01:00:16,400
this network the

1504
01:00:16,400 --> 01:00:17,119
the

1505
01:00:17,119 --> 01:00:18,960
data points would follow the fair share

1506
01:00:18,960 --> 01:00:20,480
line

1507
01:00:20,480 --> 01:00:23,839
so let me actually go over why uh we

1508
01:00:23,839 --> 01:00:25,440
actually claim that this intersection

1509
01:00:25,440 --> 01:00:27,200
point in this graph is going to be the

1510
01:00:27,200 --> 01:00:28,720
nash equilibrium

1511
01:00:28,720 --> 01:00:30,640
so to do so let's zoom into one of these

1512
01:00:30,640 --> 01:00:32,400
intersection points so at this

1513
01:00:32,400 --> 01:00:34,160
intersection point basically what's

1514
01:00:34,160 --> 01:00:36,480
happening is that the average bandwidth

1515
01:00:36,480 --> 01:00:38,799
of all the cubic flows

1516
01:00:38,799 --> 01:00:40,640
equals to the average bandwidth of all

1517
01:00:40,640 --> 01:00:43,599
the bbr flows which is

1518
01:00:43,599 --> 01:00:45,839
why neither of them wants to switch to

1519
01:00:45,839 --> 01:00:47,440
the other kind

1520
01:00:47,440 --> 01:00:49,200
but why do we say that this is actually

1521
01:00:49,200 --> 01:00:51,119
the nash equilibrium well we say this

1522
01:00:51,119 --> 01:00:52,640
intersection point is the nash

1523
01:00:52,640 --> 01:00:54,240
equilibrium because

1524
01:00:54,240 --> 01:00:56,160
let's say we move to the right of this

1525
01:00:56,160 --> 01:00:58,400
point which would signify that a cubic

1526
01:00:58,400 --> 01:01:00,880
flow in my current configuration wants

1527
01:01:00,880 --> 01:01:03,680
to switch to running dbr so when we do

1528
01:01:03,680 --> 01:01:05,680
this we will actually be transforming

1529
01:01:05,680 --> 01:01:07,440
the entire system into a regime where

1530
01:01:07,440 --> 01:01:10,720
bbr flows perform worse on the other

1531
01:01:10,720 --> 01:01:11,440
hand

1532
01:01:11,440 --> 01:01:14,160
if um there's a bbr flow in the network

1533
01:01:14,160 --> 01:01:16,880
that wants to switch to cubic that would

1534
01:01:16,880 --> 01:01:19,359
move the distribution to the left into a

1535
01:01:19,359 --> 01:01:21,599
regime where cubic flows perform worse

1536
01:01:21,599 --> 01:01:23,200
so in both cases

1537
01:01:23,200 --> 01:01:25,280
the cubic floor does not switch to bbr

1538
01:01:25,280 --> 01:01:27,040
because that would mean

1539
01:01:27,040 --> 01:01:28,160
meaning to

1540
01:01:28,160 --> 01:01:30,079
moving to a region where bbi performs

1541
01:01:30,079 --> 01:01:32,960
worse and similarly the bbr flow does

1542
01:01:32,960 --> 01:01:34,640
not want to switch to cubic because that

1543
01:01:34,640 --> 01:01:36,960
would mean moving to a regime where

1544
01:01:36,960 --> 01:01:39,040
cubic floors perform worse

1545
01:01:39,040 --> 01:01:41,680
and because there is no incentive for

1546
01:01:41,680 --> 01:01:43,920
any floor to switch

1547
01:01:43,920 --> 01:01:45,440
to the other strategy at this

1548
01:01:45,440 --> 01:01:47,920
intersection point this by definition

1549
01:01:47,920 --> 01:01:51,440
becomes our nash equilibrium point

1550
01:01:51,440 --> 01:01:54,559
now the graph that i plotted earlier was

1551
01:01:54,559 --> 01:01:57,599
uh theoretical but we have uh

1552
01:01:57,599 --> 01:01:59,680
validated these predictions through

1553
01:01:59,680 --> 01:02:02,240
actual experiments so we had 20 flows

1554
01:02:02,240 --> 01:02:04,319
running through

1555
01:02:04,319 --> 01:02:06,240
different length speeds and different

1556
01:02:06,240 --> 01:02:08,960
buffer sizes and across these different

1557
01:02:08,960 --> 01:02:11,039
regimes we plotted the normalized

1558
01:02:11,039 --> 01:02:14,880
bandwidth for bbr and we did actually

1559
01:02:14,880 --> 01:02:17,440
uh observe that at the intersection

1560
01:02:17,440 --> 01:02:19,520
point where the line crosses the fair

1561
01:02:19,520 --> 01:02:21,920
share line to the right pbr actually

1562
01:02:21,920 --> 01:02:23,839
performs worse than cubic and to the

1563
01:02:23,839 --> 01:02:24,880
left

1564
01:02:24,880 --> 01:02:28,640
cubic performs worse than bbr

1565
01:02:32,880 --> 01:02:34,799
so to

1566
01:02:34,799 --> 01:02:36,799
so in the paper uh beyond the

1567
01:02:36,799 --> 01:02:39,520
observations we also use these um

1568
01:02:39,520 --> 01:02:41,440
observations to

1569
01:02:41,440 --> 01:02:44,480
write down a couple of uh equations

1570
01:02:44,480 --> 01:02:46,720
which we use to come up with the

1571
01:02:46,720 --> 01:02:49,119
exhaustive proof for showing that a nash

1572
01:02:49,119 --> 01:02:51,440
equilibrium will always exist when two

1573
01:02:51,440 --> 01:02:53,440
floors are competing

1574
01:02:53,440 --> 01:02:55,039
and the two floors have the choice to

1575
01:02:55,039 --> 01:02:56,000
run

1576
01:02:56,000 --> 01:02:58,240
either cubic or bbr

1577
01:02:58,240 --> 01:03:00,079
but in the interest of time i will not

1578
01:03:00,079 --> 01:03:02,720
go into the details of this proof

1579
01:03:02,720 --> 01:03:05,599
but i will just say that the nash

1580
01:03:05,599 --> 01:03:07,920
equilibria in this case depends on the

1581
01:03:07,920 --> 01:03:10,559
buffer size unsurprisingly and the nash

1582
01:03:10,559 --> 01:03:13,359
equilibria also exists

1583
01:03:13,359 --> 01:03:15,680
independent of the fact whether your two

1584
01:03:15,680 --> 01:03:18,319
floors have similar rtts or distinct

1585
01:03:18,319 --> 01:03:20,799
rtts

1586
01:03:22,319 --> 01:03:25,119
but beyond the exhaustive proof we also

1587
01:03:25,119 --> 01:03:27,200
wanted to empirically validate some of

1588
01:03:27,200 --> 01:03:29,599
the claims of our conjecture which is

1589
01:03:29,599 --> 01:03:31,280
saying that the nash equilibrium will

1590
01:03:31,280 --> 01:03:32,880
always exist

1591
01:03:32,880 --> 01:03:35,520
so what we did was we

1592
01:03:35,520 --> 01:03:37,760
set up networks with six nine and 12

1593
01:03:37,760 --> 01:03:40,319
floors where all these flows shared a

1594
01:03:40,319 --> 01:03:42,960
common bottleneck bandwidth and in each

1595
01:03:42,960 --> 01:03:44,720
experiment exactly one third of these

1596
01:03:44,720 --> 01:03:45,680
flows

1597
01:03:45,680 --> 01:03:49,359
had uh 2050 and etms rtts and this was

1598
01:03:49,359 --> 01:03:51,440
basically to simulate flows of different

1599
01:03:51,440 --> 01:03:54,240
rtts competing with each other

1600
01:03:54,240 --> 01:03:55,680
and then

1601
01:03:55,680 --> 01:03:58,000
we wanted to see how this actually

1602
01:03:58,000 --> 01:03:59,599
impacts the existence of the nash

1603
01:03:59,599 --> 01:04:00,880
equilibrium

1604
01:04:00,880 --> 01:04:03,119
so given this network configuration we

1605
01:04:03,119 --> 01:04:06,079
basically ran all the two power

1606
01:04:06,079 --> 01:04:07,039
n

1607
01:04:07,039 --> 01:04:09,119
combinations of different flows running

1608
01:04:09,119 --> 01:04:11,520
cubic or bbr and then we recorded that

1609
01:04:11,520 --> 01:04:12,480
throughput

1610
01:04:12,480 --> 01:04:15,119
and once we had the throughputs uh we

1611
01:04:15,119 --> 01:04:17,839
used these throughput values to

1612
01:04:17,839 --> 01:04:20,559
validate if any of those uh congestion

1613
01:04:20,559 --> 01:04:22,559
control algorithm distributions were the

1614
01:04:22,559 --> 01:04:25,200
nash equilibria so just to recap if we

1615
01:04:25,200 --> 01:04:27,359
have a three-floor system

1616
01:04:27,359 --> 01:04:29,119
and we say that

1617
01:04:29,119 --> 01:04:30,799
cbc or

1618
01:04:30,799 --> 01:04:32,480
the first floor running cubic the second

1619
01:04:32,480 --> 01:04:34,559
floor running bbr and the third floor

1620
01:04:34,559 --> 01:04:37,039
running cubic again is the nash

1621
01:04:37,039 --> 01:04:40,400
equilibrium that basically means that uh

1622
01:04:40,400 --> 01:04:42,799
when your distribution is bbc the first

1623
01:04:42,799 --> 01:04:44,640
flow gets worse throughput when your

1624
01:04:44,640 --> 01:04:46,880
distribution is ccc the second flow gets

1625
01:04:46,880 --> 01:04:48,079
worse through part and when your

1626
01:04:48,079 --> 01:04:51,280
distribution is cbb the third flow will

1627
01:04:51,280 --> 01:04:54,760
get worse throughput

1628
01:04:55,920 --> 01:04:57,839
so before i actually get into the graphs

1629
01:04:57,839 --> 01:04:59,280
there were a couple of interesting

1630
01:04:59,280 --> 01:05:02,880
properties that uh we found while uh

1631
01:05:02,880 --> 01:05:04,799
actually calculating the smash

1632
01:05:04,799 --> 01:05:06,720
equilibria in our experiments

1633
01:05:06,720 --> 01:05:08,480
uh interestingly enough we found out

1634
01:05:08,480 --> 01:05:10,319
that in all our experiments there was

1635
01:05:10,319 --> 01:05:13,760
exactly one nash equilibria so

1636
01:05:13,760 --> 01:05:14,720
there was

1637
01:05:14,720 --> 01:05:17,039
one fixed distribution of congestion

1638
01:05:17,039 --> 01:05:19,680
control algorithms where none of the

1639
01:05:19,680 --> 01:05:21,520
flows had the incentive to switch to the

1640
01:05:21,520 --> 01:05:24,160
other algorithm and we also found that

1641
01:05:24,160 --> 01:05:26,799
in each of these nash equilibria um the

1642
01:05:26,799 --> 01:05:28,240
congestion control algorithm

1643
01:05:28,240 --> 01:05:29,440
distribution

1644
01:05:29,440 --> 01:05:31,760
fell in such a manner that it was always

1645
01:05:31,760 --> 01:05:34,799
the smaller itt flows that chose cubic

1646
01:05:34,799 --> 01:05:38,160
and the large rtt4 flows uh decided to

1647
01:05:38,160 --> 01:05:40,160
opt for bbr

1648
01:05:40,160 --> 01:05:40,960
so

1649
01:05:40,960 --> 01:05:43,280
later on in the graphs when i say that

1650
01:05:43,280 --> 01:05:44,480
let's say that

1651
01:05:44,480 --> 01:05:46,400
a sixth floor system has a natch

1652
01:05:46,400 --> 01:05:48,559
equilibria where 50 of the floors are

1653
01:05:48,559 --> 01:05:51,359
running cubic uh that basically means

1654
01:05:51,359 --> 01:05:52,400
that

1655
01:05:52,400 --> 01:05:53,280
uh

1656
01:05:53,280 --> 01:05:56,319
220 ms flows and 150 ms flow is running

1657
01:05:56,319 --> 01:05:59,280
cubic and 150 ms flow and

1658
01:05:59,280 --> 01:06:04,200
two atms flows are running bbr

1659
01:06:06,400 --> 01:06:08,240
so while actually calculating the nash

1660
01:06:08,240 --> 01:06:10,960
equilibria we experimented with

1661
01:06:10,960 --> 01:06:13,599
different link speeds and different uh

1662
01:06:13,599 --> 01:06:14,960
buffer sizes

1663
01:06:14,960 --> 01:06:17,520
and the entire point of this was to see

1664
01:06:17,520 --> 01:06:19,200
how the link speed and the buffer sizes

1665
01:06:19,200 --> 01:06:21,680
impacted where the nash equilibria lied

1666
01:06:21,680 --> 01:06:23,680
uh predictably buffer size had the

1667
01:06:23,680 --> 01:06:25,760
biggest impact on the

1668
01:06:25,760 --> 01:06:27,200
on the distribution at the nash

1669
01:06:27,200 --> 01:06:29,520
equilibria so when your buffer size was

1670
01:06:29,520 --> 01:06:33,200
deeper you're more likely to have um

1671
01:06:33,200 --> 01:06:35,520
floors opting for cubic rather than your

1672
01:06:35,520 --> 01:06:39,119
buffer size when your buffer size is uh

1673
01:06:39,119 --> 01:06:41,520
shallower and this

1674
01:06:41,520 --> 01:06:43,359
makes sense because cubic is a buffer

1675
01:06:43,359 --> 01:06:45,520
filling algorithm and it's likely to be

1676
01:06:45,520 --> 01:06:47,039
more aggressive when you have deeper

1677
01:06:47,039 --> 01:06:49,440
buffers

1678
01:06:49,599 --> 01:06:51,599
uh we also tried changing the rtt

1679
01:06:51,599 --> 01:06:53,680
distribution to see if that made any

1680
01:06:53,680 --> 01:06:56,000
impact on where we earlier saw the nash

1681
01:06:56,000 --> 01:06:58,240
equilibria and we found that there was

1682
01:06:58,240 --> 01:06:59,680
very little in

1683
01:06:59,680 --> 01:07:01,839
impact on

1684
01:07:01,839 --> 01:07:03,839
where what the distribution of

1685
01:07:03,839 --> 01:07:06,079
algorithms actually was at the nash

1686
01:07:06,079 --> 01:07:08,960
equilibrium point

1687
01:07:10,079 --> 01:07:13,520
so to summarize uh the findings of our

1688
01:07:13,520 --> 01:07:14,880
short paper

1689
01:07:14,880 --> 01:07:15,839
is that

1690
01:07:15,839 --> 01:07:17,359
despite bbi's current throughput

1691
01:07:17,359 --> 01:07:19,520
benefits we think it's unlikely that

1692
01:07:19,520 --> 01:07:22,240
cubic is going to disappear soon

1693
01:07:22,240 --> 01:07:24,240
and this is because we think that dbr's

1694
01:07:24,240 --> 01:07:26,000
performance benefits that we see on the

1695
01:07:26,000 --> 01:07:28,319
internet today are going to wane as more

1696
01:07:28,319 --> 01:07:29,839
and more people on the internet start

1697
01:07:29,839 --> 01:07:31,200
running bpr

1698
01:07:31,200 --> 01:07:32,960
therefore we think that the internet is

1699
01:07:32,960 --> 01:07:34,880
likely to remain a heterogeneous mix of

1700
01:07:34,880 --> 01:07:37,359
congestion control algorithms

1701
01:07:37,359 --> 01:07:39,520
uh we also think that a lot of our

1702
01:07:39,520 --> 01:07:41,119
results

1703
01:07:41,119 --> 01:07:43,599
are a good lesson in understanding that

1704
01:07:43,599 --> 01:07:46,559
tcp performance is highly contextual so

1705
01:07:46,559 --> 01:07:49,119
how your algorithm performs not only

1706
01:07:49,119 --> 01:07:51,039
depends on the characteristics of your

1707
01:07:51,039 --> 01:07:53,839
network but also who you're competing

1708
01:07:53,839 --> 01:07:55,280
with

1709
01:07:55,280 --> 01:07:57,599
and lastly i would like to know that you

1710
01:07:57,599 --> 01:07:59,200
know we can make all the fancy

1711
01:07:59,200 --> 01:08:01,440
predictions of uh having different kind

1712
01:08:01,440 --> 01:08:03,280
of nash equilibria

1713
01:08:03,280 --> 01:08:06,319
but the internet actually does not uh

1714
01:08:06,319 --> 01:08:09,200
follow economic game theory exactly so

1715
01:08:09,200 --> 01:08:11,599
it's not a given that the internet will

1716
01:08:11,599 --> 01:08:15,359
move towards nash equilibria but given

1717
01:08:15,359 --> 01:08:17,359
uh the fact that a lot of people on the

1718
01:08:17,359 --> 01:08:19,198
internet are likely to make the decision

1719
01:08:19,198 --> 01:08:21,279
between cubic and bbr based on

1720
01:08:21,279 --> 01:08:22,799
performance

1721
01:08:22,799 --> 01:08:24,719
we think it's likely that even if we

1722
01:08:24,719 --> 01:08:26,319
don't reach the nash equilibrium we are

1723
01:08:26,319 --> 01:08:30,080
going to move in that direction

1724
01:08:30,799 --> 01:08:32,640
now obviously there's a lot of future

1725
01:08:32,640 --> 01:08:35,920
work to be done uh in this paper we want

1726
01:08:35,920 --> 01:08:39,439
to come up with a formal proof uh for

1727
01:08:39,439 --> 01:08:41,600
general inflow game

1728
01:08:41,600 --> 01:08:43,359
we also want to

1729
01:08:43,359 --> 01:08:44,880
look at the effect of more complex

1730
01:08:44,880 --> 01:08:47,520
network utilities so in our paper we

1731
01:08:47,520 --> 01:08:50,238
assumed a very simple uh utility

1732
01:08:50,238 --> 01:08:52,080
function where every flow wanted to

1733
01:08:52,080 --> 01:08:54,000
maximize its throughput but obviously

1734
01:08:54,000 --> 01:08:56,238
that's not true on a real network uh

1735
01:08:56,238 --> 01:08:58,399
flows are likely to care about

1736
01:08:58,399 --> 01:09:00,479
both throughput and delay and the

1737
01:09:00,479 --> 01:09:02,399
utility function is likely to be a

1738
01:09:02,399 --> 01:09:06,000
combination of these metrics

1739
01:09:06,000 --> 01:09:08,640
we also want to look at the effects on

1740
01:09:08,640 --> 01:09:10,560
the congestion control algorithm

1741
01:09:10,560 --> 01:09:12,640
distribution at the nash equilibria in

1742
01:09:12,640 --> 01:09:15,439
the presence of bbr v2 uh multi-hop

1743
01:09:15,439 --> 01:09:18,960
paths and eqm's and also how things

1744
01:09:18,960 --> 01:09:20,640
change when you have very very deep

1745
01:09:20,640 --> 01:09:22,719
buffers and

1746
01:09:22,719 --> 01:09:26,238
much larger number of flows

1747
01:09:26,238 --> 01:09:28,158
so in terms of very deep buffers and

1748
01:09:28,158 --> 01:09:30,000
much larger number of flows we have been

1749
01:09:30,000 --> 01:09:33,120
doing a fair number of experiments and

1750
01:09:33,120 --> 01:09:35,679
so far what we've found is that the

1751
01:09:35,679 --> 01:09:39,520
trend still exists that at higher bdps

1752
01:09:39,520 --> 01:09:40,799
the

1753
01:09:40,799 --> 01:09:42,479
the share of cubic flows at the natural

1754
01:09:42,479 --> 01:09:44,479
equilibria will be greater

1755
01:09:44,479 --> 01:09:47,679
but um there is one aspect in which the

1756
01:09:47,679 --> 01:09:49,279
large flow experiments differ from the

1757
01:09:49,279 --> 01:09:50,719
experiments that we've done in the short

1758
01:09:50,719 --> 01:09:51,679
paper

1759
01:09:51,679 --> 01:09:54,480
uh and that aspect is that when you have

1760
01:09:54,480 --> 01:09:56,159
very deep buffers and very large number

1761
01:09:56,159 --> 01:09:58,880
of floors things are not

1762
01:09:58,880 --> 01:10:01,199
as nice and clean as having one nash

1763
01:10:01,199 --> 01:10:02,480
equilibrium point

1764
01:10:02,480 --> 01:10:04,560
uh generally we found that there exists

1765
01:10:04,560 --> 01:10:07,600
a region or a window within which

1766
01:10:07,600 --> 01:10:11,840
you're likely to get a nash equilibria

1767
01:10:13,199 --> 01:10:14,400
okay so

1768
01:10:14,400 --> 01:10:16,320
thank you for your time uh that's all i

1769
01:10:16,320 --> 01:10:18,719
have for you today and i'd like to take

1770
01:10:18,719 --> 01:10:21,600
questions if there are any now

1771
01:10:21,600 --> 01:10:23,360
thank you so much for your time irish

1772
01:10:23,360 --> 01:10:24,800
this is a

1773
01:10:24,800 --> 01:10:27,120
very very interesting piece of a number

1774
01:10:27,120 --> 01:10:28,960
of people in the queue already but i'm

1775
01:10:28,960 --> 01:10:31,840
going to uh ask a question before i get

1776
01:10:31,840 --> 01:10:33,440
in there i actually took two quick

1777
01:10:33,440 --> 01:10:34,880
questions one of them is that you seem

1778
01:10:34,880 --> 01:10:36,320
to suggest

1779
01:10:36,320 --> 01:10:39,679
cbb and bbc as two different

1780
01:10:39,679 --> 01:10:42,719
uh um experiments and i want yes that

1781
01:10:42,719 --> 01:10:45,280
seems to me i said the order in which

1782
01:10:45,280 --> 01:10:48,000
uh flows entering choose makes a

1783
01:10:48,000 --> 01:10:49,120
difference

1784
01:10:49,120 --> 01:10:52,320
um so it it's not really the order in

1785
01:10:52,320 --> 01:10:54,880
which the flows enter but

1786
01:10:54,880 --> 01:10:57,040
it's just the fact that

1787
01:10:57,040 --> 01:10:58,480
you know we have given all the flow some

1788
01:10:58,480 --> 01:11:00,400
cardinality and we're treating all the

1789
01:11:00,400 --> 01:11:02,159
flows separately

1790
01:11:02,159 --> 01:11:05,520
uh so basically we are

1791
01:11:05,520 --> 01:11:07,840
in this notation we're not assuming that

1792
01:11:07,840 --> 01:11:09,760
flows are symmetric or there are a bunch

1793
01:11:09,760 --> 01:11:11,600
of flows that have this that have same

1794
01:11:11,600 --> 01:11:12,800
rtts

1795
01:11:12,800 --> 01:11:14,719
so each flow here is distinct you can

1796
01:11:14,719 --> 01:11:17,280
assume each flow has different rdt and

1797
01:11:17,280 --> 01:11:21,199
therefore is a separate entity

1798
01:11:21,199 --> 01:11:22,159
i see

1799
01:11:22,159 --> 01:11:23,920
yeah okay well maybe i'll ask you later

1800
01:11:23,920 --> 01:11:25,440
but i can't see the difference then

1801
01:11:25,440 --> 01:11:27,440
between the first

1802
01:11:27,440 --> 01:11:29,199
uh set up there the first experiment

1803
01:11:29,199 --> 01:11:31,040
then the third one because to me they

1804
01:11:31,040 --> 01:11:33,760
seem to be this okay so basically the

1805
01:11:33,760 --> 01:11:35,840
first second and third floors might have

1806
01:11:35,840 --> 01:11:38,159
different rdts

1807
01:11:38,159 --> 01:11:39,120
understood

1808
01:11:39,120 --> 01:11:42,719
which is why bcc and cbc are different

1809
01:11:42,719 --> 01:11:44,640
handsome all right i'm gonna i'm gonna

1810
01:11:44,640 --> 01:11:46,239
get out and allow the others to ask

1811
01:11:46,239 --> 01:11:47,679
questions but i'm gonna close the queue

1812
01:11:47,679 --> 01:11:49,280
here because we don't have

1813
01:11:49,280 --> 01:11:50,560
a lot of time

1814
01:11:50,560 --> 01:11:54,320
um all right go for a dn

1815
01:11:54,320 --> 01:11:56,159
hi thanks uh this is this is quite

1816
01:11:56,159 --> 01:11:58,719
interesting um i i do have some kind of

1817
01:11:58,719 --> 01:12:00,159
um

1818
01:12:00,159 --> 01:12:01,120
extra

1819
01:12:01,120 --> 01:12:02,880
complexity to add on to this whole thing

1820
01:12:02,880 --> 01:12:04,640
which kind of um

1821
01:12:04,640 --> 01:12:06,080
at least my thoughts on how this

1822
01:12:06,080 --> 01:12:07,520
replicates or does not replicate the

1823
01:12:07,520 --> 01:12:08,400
real world

1824
01:12:08,400 --> 01:12:11,280
so um it's it's worth it noting that

1825
01:12:11,280 --> 01:12:14,080
the most valuable flows are commonly the

1826
01:12:14,080 --> 01:12:16,080
short ones that are very accurate

1827
01:12:16,080 --> 01:12:17,840
uh the conical example is things like

1828
01:12:17,840 --> 01:12:19,120
search and ads

1829
01:12:19,120 --> 01:12:21,199
and in the case of my employer

1830
01:12:21,199 --> 01:12:22,560
you generate a lot more value you

1831
01:12:22,560 --> 01:12:24,719
certainly want more value provide

1832
01:12:24,719 --> 01:12:26,560
something like youtube video

1833
01:12:26,560 --> 01:12:28,960
um and given the amount of value it's

1834
01:12:28,960 --> 01:12:31,120
actually kind of incentive compatible

1835
01:12:31,120 --> 01:12:31,840
to

1836
01:12:31,840 --> 01:12:34,880
make sure your uh your long-term flows

1837
01:12:34,880 --> 01:12:36,480
are not too aggressive and that they

1838
01:12:36,480 --> 01:12:38,960
move out of the way quickly uh when

1839
01:12:38,960 --> 01:12:40,320
something that's high value like start

1840
01:12:40,320 --> 01:12:41,280
your ads

1841
01:12:41,280 --> 01:12:42,719
comes up um

1842
01:12:42,719 --> 01:12:44,159
and

1843
01:12:44,159 --> 01:12:45,679
the the other thing to note is it's not

1844
01:12:45,679 --> 01:12:47,760
uncommon to have between 10 and 20

1845
01:12:47,760 --> 01:12:49,920
connections for a single page load on

1846
01:12:49,920 --> 01:12:51,199
the internet

1847
01:12:51,199 --> 01:12:52,640
um and when you're dealing with that

1848
01:12:52,640 --> 01:12:54,640
kind of chaotic environment where

1849
01:12:54,640 --> 01:12:56,080
nothing really gets out of startup or

1850
01:12:56,080 --> 01:12:57,360
very rarely

1851
01:12:57,360 --> 01:12:59,679
um it's it's very difficult to reason

1852
01:12:59,679 --> 01:13:01,040
about the

1853
01:13:01,040 --> 01:13:02,800
congestion control performance right

1854
01:13:02,800 --> 01:13:04,400
like like the

1855
01:13:04,400 --> 01:13:06,320
congestion avoidance phase is basically

1856
01:13:06,320 --> 01:13:07,760
like irrelevant

1857
01:13:07,760 --> 01:13:09,679
um you can largely like remove it from

1858
01:13:09,679 --> 01:13:10,800
the congestion controller and it would

1859
01:13:10,800 --> 01:13:13,120
like largely work the same for search um

1860
01:13:13,120 --> 01:13:15,679
and a number of other major websites um

1861
01:13:15,679 --> 01:13:17,120
it obviously matters intensely for

1862
01:13:17,120 --> 01:13:19,199
youtube that matters intensely for

1863
01:13:19,199 --> 01:13:20,800
you know a large flow like an uploader

1864
01:13:20,800 --> 01:13:22,000
or download

1865
01:13:22,000 --> 01:13:22,800
um

1866
01:13:22,800 --> 01:13:24,560
but but i guess

1867
01:13:24,560 --> 01:13:26,000
even for a given provider it might

1868
01:13:26,000 --> 01:13:27,440
actually be instead of a compatibility

1869
01:13:27,440 --> 01:13:28,159
like

1870
01:13:28,159 --> 01:13:29,679
make your congestion avoidance scheme

1871
01:13:29,679 --> 01:13:31,360
not too aggressive to make sure that

1872
01:13:31,360 --> 01:13:33,440
like smaller flows which are higher

1873
01:13:33,440 --> 01:13:35,520
value like our favorite um and so i

1874
01:13:35,520 --> 01:13:36,880
think

1875
01:13:36,880 --> 01:13:38,400
i think it's complicated

1876
01:13:38,400 --> 01:13:40,639
um

1877
01:13:41,679 --> 01:13:43,600
made sure that this was not a problem

1878
01:13:43,600 --> 01:13:44,960
and make sure that there was no negative

1879
01:13:44,960 --> 01:13:46,400
impact on search latency when we

1880
01:13:46,400 --> 01:13:48,080
launched pvr originally

1881
01:13:48,080 --> 01:13:50,000
um and we did a bunch of studies and

1882
01:13:50,000 --> 01:13:52,000
couldn't find anything

1883
01:13:52,000 --> 01:13:54,000
so as an anecdotal yeah

1884
01:13:54,000 --> 01:13:56,560
yeah uh i i think all those are fair

1885
01:13:56,560 --> 01:13:58,640
points and i completely agree with you

1886
01:13:58,640 --> 01:14:00,880
that this is uh

1887
01:14:00,880 --> 01:14:03,199
extremely complex problem in fact you

1888
01:14:03,199 --> 01:14:05,520
mentioned the flow durations and how

1889
01:14:05,520 --> 01:14:07,120
flows of different iterations might have

1890
01:14:07,120 --> 01:14:09,199
different metrics and they might want to

1891
01:14:09,199 --> 01:14:11,360
optimize for different things

1892
01:14:11,360 --> 01:14:13,360
so yeah all those things definitely

1893
01:14:13,360 --> 01:14:16,560
complicate uh things a lot but currently

1894
01:14:16,560 --> 01:14:18,480
from um

1895
01:14:18,480 --> 01:14:21,120
what we are working on is the assumption

1896
01:14:21,120 --> 01:14:23,600
that all your flows uh

1897
01:14:23,600 --> 01:14:25,199
that all the flows that you care about

1898
01:14:25,199 --> 01:14:26,800
are

1899
01:14:26,800 --> 01:14:28,960
substantially long such that they enter

1900
01:14:28,960 --> 01:14:30,719
congestion avoidance mode

1901
01:14:30,719 --> 01:14:34,159
and then we want to see um you know how

1902
01:14:34,159 --> 01:14:35,760
how performance is going to change for

1903
01:14:35,760 --> 01:14:39,840
these considerably longer flows

1904
01:14:41,520 --> 01:14:43,040
all right martin duke uh thanks it's a

1905
01:14:43,040 --> 01:14:45,280
very creative um way of approaching the

1906
01:14:45,280 --> 01:14:47,679
problem but um there's a little

1907
01:14:47,679 --> 01:14:50,320
discussion in the chat uh because of

1908
01:14:50,320 --> 01:14:52,320
course the term rtt

1909
01:14:52,320 --> 01:14:54,080
is a little overloaded in our in our

1910
01:14:54,080 --> 01:14:55,840
field right where sometimes it includes

1911
01:14:55,840 --> 01:14:57,600
the buffer sometimes it's not

1912
01:14:57,600 --> 01:14:59,520
so there are two ways to look at it that

1913
01:14:59,520 --> 01:15:02,400
if that if the two two intuitions that

1914
01:15:02,400 --> 01:15:03,280
that are

1915
01:15:03,280 --> 01:15:05,120
that we're applying in the chat one is

1916
01:15:05,120 --> 01:15:06,960
that um

1917
01:15:06,960 --> 01:15:09,520
that like if the path latency aside from

1918
01:15:09,520 --> 01:15:11,520
buffering is low the cubic is favored

1919
01:15:11,520 --> 01:15:13,840
and therefore like low flow latency

1920
01:15:13,840 --> 01:15:16,400
flows will low latency pads will just

1921
01:15:16,400 --> 01:15:17,920
use cubic forever

1922
01:15:17,920 --> 01:15:21,440
um the other the other one is that um

1923
01:15:21,440 --> 01:15:24,800
uh as more and more people adopt cubic

1924
01:15:24,800 --> 01:15:27,360
towards the nash equilibrium that that

1925
01:15:27,360 --> 01:15:30,640
buffers that buffer occupancy drops and

1926
01:15:30,640 --> 01:15:32,640
therefore that the the benefit of

1927
01:15:32,640 --> 01:15:35,040
adopting bbr instead of

1928
01:15:35,040 --> 01:15:38,239
uh cubic lessons and so the the nth

1929
01:15:38,239 --> 01:15:39,760
person to adopt

1930
01:15:39,760 --> 01:15:41,280
cubic um

1931
01:15:41,280 --> 01:15:43,520
has no incentive because the other bbr

1932
01:15:43,520 --> 01:15:45,040
people have already you know reduced the

1933
01:15:45,040 --> 01:15:47,199
buffer occupancy so i don't know if you

1934
01:15:47,199 --> 01:15:48,719
can speak to either of those intuitions

1935
01:15:48,719 --> 01:15:50,880
if they're if both or neither or one of

1936
01:15:50,880 --> 01:15:53,120
them is correct in your view

1937
01:15:53,120 --> 01:15:55,440
yeah so generally we have seen that

1938
01:15:55,440 --> 01:15:57,120
there are diminishing returns in both

1939
01:15:57,120 --> 01:15:59,440
directions so whether it be for more and

1940
01:15:59,440 --> 01:16:01,840
more people to adopt cubic or more and

1941
01:16:01,840 --> 01:16:05,040
more people to adopt bbr and

1942
01:16:05,040 --> 01:16:07,520
we are in the process of actually

1943
01:16:07,520 --> 01:16:08,400
um

1944
01:16:08,400 --> 01:16:10,960
coming up with a model that can reason

1945
01:16:10,960 --> 01:16:13,679
about these diminishing returns and i

1946
01:16:13,679 --> 01:16:15,679
won't get into the details but

1947
01:16:15,679 --> 01:16:17,280
at a very high level

1948
01:16:17,280 --> 01:16:19,520
basically why we think this is happening

1949
01:16:19,520 --> 01:16:21,040
is that

1950
01:16:21,040 --> 01:16:23,440
when you have uh both cubic and bbr

1951
01:16:23,440 --> 01:16:25,840
flows uh competing at the bottleneck

1952
01:16:25,840 --> 01:16:27,360
what they do is that they section off

1953
01:16:27,360 --> 01:16:29,199
different they basically section of

1954
01:16:29,199 --> 01:16:31,600
different regions of the buffer so there

1955
01:16:31,600 --> 01:16:34,560
you have one box that belongs to bbr and

1956
01:16:34,560 --> 01:16:37,360
one box that belongs to cubic and as you

1957
01:16:37,360 --> 01:16:39,280
put more and more flows into the cubic

1958
01:16:39,280 --> 01:16:40,080
foot

1959
01:16:40,080 --> 01:16:42,000
box or more and more flows in the bbr

1960
01:16:42,000 --> 01:16:42,880
box

1961
01:16:42,880 --> 01:16:46,239
the boxes don't increase in size

1962
01:16:46,239 --> 01:16:47,920
linearly compared to the number of flows

1963
01:16:47,920 --> 01:16:50,400
you're putting into them which is

1964
01:16:50,400 --> 01:16:52,159
why we're getting diminishing returns

1965
01:16:52,159 --> 01:16:54,159
and which is why you know

1966
01:16:54,159 --> 01:16:55,120
the

1967
01:16:55,120 --> 01:16:57,679
the rate of acceleration when you reach

1968
01:16:57,679 --> 01:16:59,440
the nash equilibrium point keeps on

1969
01:16:59,440 --> 01:17:00,640
reducing

1970
01:17:00,640 --> 01:17:03,199
in terms of the the performance benefits

1971
01:17:03,199 --> 01:17:06,519
that you get

1972
01:17:27,679 --> 01:17:29,600
i just wanted to thank you first off for

1973
01:17:29,600 --> 01:17:31,440
this work it's really interesting and it

1974
01:17:31,440 --> 01:17:34,560
seems super useful um i just wanted to

1975
01:17:34,560 --> 01:17:36,640
um amplify some of the discussion here

1976
01:17:36,640 --> 01:17:37,520
about

1977
01:17:37,520 --> 01:17:39,600
the workload that's being tested here i

1978
01:17:39,600 --> 01:17:41,840
think a lot of us are

1979
01:17:41,840 --> 01:17:44,640
thinking it would be really useful to um

1980
01:17:44,640 --> 01:17:46,719
in future versions of this work to

1981
01:17:46,719 --> 01:17:49,679
include a sort of mix of short and long

1982
01:17:49,679 --> 01:17:50,880
flows

1983
01:17:50,880 --> 01:17:52,560
and in particular the kind of effect i'm

1984
01:17:52,560 --> 01:17:54,640
interested in is that if you have a

1985
01:17:54,640 --> 01:17:58,640
dynamic mix of entering short flows then

1986
01:17:58,640 --> 01:17:59,679
often

1987
01:17:59,679 --> 01:18:01,520
every time somebody enters the

1988
01:18:01,520 --> 01:18:03,520
bottleneck they'll cause packet loss

1989
01:18:03,520 --> 01:18:05,360
because they sort of try to figure out

1990
01:18:05,360 --> 01:18:07,199
you know what what bandwidth and how

1991
01:18:07,199 --> 01:18:09,760
much buffer space is available and if

1992
01:18:09,760 --> 01:18:12,239
those flow entries all cause packet loss

1993
01:18:12,239 --> 01:18:15,120
and those flow entries are um close

1994
01:18:15,120 --> 01:18:18,080
enough together then that can basically

1995
01:18:18,080 --> 01:18:20,880
prevent cubic from reaching its fair

1996
01:18:20,880 --> 01:18:22,480
share you know because obviously it's

1997
01:18:22,480 --> 01:18:24,239
going to be very sensitive to how far

1998
01:18:24,239 --> 01:18:26,400
apart those lost points are so i think

1999
01:18:26,400 --> 01:18:29,520
you might get very different answers to

2000
01:18:29,520 --> 01:18:31,920
in the question of what cc is

2001
01:18:31,920 --> 01:18:34,080
incentivized if there's sort of a mix of

2002
01:18:34,080 --> 01:18:36,000
dynamically entering short flows so i'd

2003
01:18:36,000 --> 01:18:37,679
love to see that in a future version of

2004
01:18:37,679 --> 01:18:39,040
this

2005
01:18:39,040 --> 01:18:40,960
yeah yeah so we're definitely

2006
01:18:40,960 --> 01:18:43,120
considering uh different kind of

2007
01:18:43,120 --> 01:18:44,880
workloads uh i think it's a great

2008
01:18:44,880 --> 01:18:47,040
suggestion that we should look at a mix

2009
01:18:47,040 --> 01:18:49,679
of short flows and long flows and uh see

2010
01:18:49,679 --> 01:18:51,840
how things are changing uh in fact

2011
01:18:51,840 --> 01:18:53,520
another thing that we are exploring

2012
01:18:53,520 --> 01:18:55,199
currently is

2013
01:18:55,199 --> 01:18:57,679
if you remove um

2014
01:18:57,679 --> 01:18:59,199
right now we were just experimenting

2015
01:18:59,199 --> 01:19:00,640
with long flows

2016
01:19:00,640 --> 01:19:01,600
but we

2017
01:19:01,600 --> 01:19:03,679
also want to experiment with what

2018
01:19:03,679 --> 01:19:05,920
happens when you have video workloads

2019
01:19:05,920 --> 01:19:07,520
and

2020
01:19:07,520 --> 01:19:09,679
when you're dealing with video workloads

2021
01:19:09,679 --> 01:19:11,440
ideally the utility function that we'll

2022
01:19:11,440 --> 01:19:13,120
be looking at would not be the

2023
01:19:13,120 --> 01:19:14,800
throughput but actually the qoe that

2024
01:19:14,800 --> 01:19:17,199
your client is calculating

2025
01:19:17,199 --> 01:19:18,000
so

2026
01:19:18,000 --> 01:19:20,239
yeah thank you for your suggestion uh

2027
01:19:20,239 --> 01:19:23,520
i mean all these uh all these

2028
01:19:23,520 --> 01:19:25,600
different aspects of the problem

2029
01:19:25,600 --> 01:19:26,400
uh

2030
01:19:26,400 --> 01:19:28,320
i mean we have been also trying to

2031
01:19:28,320 --> 01:19:30,560
reason about it a lot and in fact the

2032
01:19:30,560 --> 01:19:32,640
biggest problem we're facing right now

2033
01:19:32,640 --> 01:19:33,840
is really

2034
01:19:33,840 --> 01:19:35,199
you know to come up with a nice

2035
01:19:35,199 --> 01:19:37,040
systematic way to

2036
01:19:37,040 --> 01:19:38,640
explore all the different things that

2037
01:19:38,640 --> 01:19:41,760
can happen in this space

2038
01:19:49,280 --> 01:19:50,880
hey uh great work

2039
01:19:50,880 --> 01:19:53,679
hi hey uh this is great work uh uh so

2040
01:19:53,679 --> 01:19:55,679
i'm assuming this work was done uh

2041
01:19:55,679 --> 01:19:58,080
measuring bbr v1 with cubic it would be

2042
01:19:58,080 --> 01:20:00,880
also interesting to include vbrv2 and

2043
01:20:00,880 --> 01:20:02,960
the second comment i had was yeah you're

2044
01:20:02,960 --> 01:20:05,040
right that the evolution here might not

2045
01:20:05,040 --> 01:20:07,520
be just based on maximizing throughput

2046
01:20:07,520 --> 01:20:08,719
as a utility function so i think

2047
01:20:08,719 --> 01:20:10,560
certainly reducing latency is one of the

2048
01:20:10,560 --> 01:20:12,639
goals on the internet right so for all

2049
01:20:12,639 --> 01:20:14,239
the players here the utility function

2050
01:20:14,239 --> 01:20:16,560
might not be just maximizing throughput

2051
01:20:16,560 --> 01:20:18,639
so that should be taken into account

2052
01:20:18,639 --> 01:20:22,719
and the other thing here is that um

2053
01:20:22,719 --> 01:20:24,719
there's certainly a benefit to

2054
01:20:24,719 --> 01:20:26,480
standardizing on one algorithm in the

2055
01:20:26,480 --> 01:20:28,639
long term so when you look at it from

2056
01:20:28,639 --> 01:20:30,960
purely you know engineering efficiency

2057
01:20:30,960 --> 01:20:33,040
point of view there's one algorithm that

2058
01:20:33,040 --> 01:20:34,880
can give you better throughput and lower

2059
01:20:34,880 --> 01:20:36,639
latency that's what everyone will

2060
01:20:36,639 --> 01:20:39,760
eventually convert to

2061
01:20:40,880 --> 01:20:42,560
um

2062
01:20:42,560 --> 01:20:46,000
yeah yeah i agree but actually from uh

2063
01:20:46,000 --> 01:20:48,320
from a design point of view i think it

2064
01:20:48,320 --> 01:20:49,920
really

2065
01:20:49,920 --> 01:20:53,360
it's quite a hard problem to convince

2066
01:20:53,360 --> 01:20:55,040
everyone to

2067
01:20:55,040 --> 01:20:57,840
you know switch to that oracle algorithm

2068
01:20:57,840 --> 01:21:01,040
uh just based on performance because

2069
01:21:01,040 --> 01:21:02,560
that would mean that

2070
01:21:02,560 --> 01:21:04,159
uh

2071
01:21:04,159 --> 01:21:07,360
okay in this graph we basically want our

2072
01:21:07,360 --> 01:21:10,719
designed algorithm to always exist north

2073
01:21:10,719 --> 01:21:12,400
of the fair share line

2074
01:21:12,400 --> 01:21:14,320
and uh

2075
01:21:14,320 --> 01:21:17,040
i mean that you can obviously design

2076
01:21:17,040 --> 01:21:18,719
based on whatever utility function is

2077
01:21:18,719 --> 01:21:20,880
you can design you know a utility-based

2078
01:21:20,880 --> 01:21:23,679
algorithm that only maximizes that

2079
01:21:23,679 --> 01:21:26,080
utility but yeah i i think it becomes a

2080
01:21:26,080 --> 01:21:29,840
very hard problem to

2081
01:21:30,000 --> 01:21:32,000
you know incentivize people to switch

2082
01:21:32,000 --> 01:21:34,159
incentivize everyone to switch to just

2083
01:21:34,159 --> 01:21:35,840
one algorithm

2084
01:21:35,840 --> 01:21:38,320
because there are different because

2085
01:21:38,320 --> 01:21:40,080
performance is contextual and also

2086
01:21:40,080 --> 01:21:42,880
because generally the performance gains

2087
01:21:42,880 --> 01:21:45,120
are diminishing as more and more people

2088
01:21:45,120 --> 01:21:47,440
use it so

2089
01:21:47,440 --> 01:21:48,719
from um

2090
01:21:48,719 --> 01:21:50,400
from a design point of view i definitely

2091
01:21:50,400 --> 01:21:52,800
agree uh that the best thing is to have

2092
01:21:52,800 --> 01:21:54,480
everyone on the internet run the same

2093
01:21:54,480 --> 01:21:55,440
thing

2094
01:21:55,440 --> 01:21:57,520
but uh

2095
01:21:57,520 --> 01:21:58,960
realistically

2096
01:21:58,960 --> 01:22:00,639
we feel that it

2097
01:22:00,639 --> 01:22:02,719
that's something that might never happen

2098
01:22:02,719 --> 01:22:04,800
and we might have to you know figure out

2099
01:22:04,800 --> 01:22:07,920
a way to work around with these zoo of

2100
01:22:07,920 --> 01:22:10,920
algorithms

2101
01:22:15,040 --> 01:22:17,120
thank you again ayush we seem to not

2102
01:22:17,120 --> 01:22:19,280
have scared you away

2103
01:22:19,280 --> 01:22:21,280
that he came back and presently the

2104
01:22:21,280 --> 01:22:22,159
second

2105
01:22:22,159 --> 01:22:23,760
thing with us and we look forward to

2106
01:22:23,760 --> 01:22:25,840
seeing i look forward to seeing more of

2107
01:22:25,840 --> 01:22:27,840
this work in particular the last thing

2108
01:22:27,840 --> 01:22:29,679
that you just said which is to

2109
01:22:29,679 --> 01:22:31,679
uh i'd be very curious to see how you

2110
01:22:31,679 --> 01:22:33,440
can if you can extend this to the zoo of

2111
01:22:33,440 --> 01:22:36,800
algorithms that you found either on the

2112
01:22:36,800 --> 01:22:38,560
internet

2113
01:22:38,560 --> 01:22:39,600
and with that i'm going to move on to

2114
01:22:39,600 --> 01:22:41,679
the next presentation thanks again ayush

2115
01:22:41,679 --> 01:22:44,320
and uh please i wish it was on the iccrg

2116
01:22:44,320 --> 01:22:47,679
mailing list so if you want uh uh

2117
01:22:47,679 --> 01:22:48,880
to have

2118
01:22:48,880 --> 01:22:49,920
any

2119
01:22:49,920 --> 01:22:51,760
discussion on this please take it there

2120
01:22:51,760 --> 01:22:53,440
i encourage that

2121
01:22:53,440 --> 01:22:56,480
um i'm going to ask um praveen to come

2122
01:22:56,480 --> 01:22:57,840
back on

2123
01:22:57,840 --> 01:23:00,080
so that he can start his presentation

2124
01:23:00,080 --> 01:23:01,840
next

2125
01:23:01,840 --> 01:23:03,520
proving we are running behind so i'm

2126
01:23:03,520 --> 01:23:04,960
going to ask you if you could try to

2127
01:23:04,960 --> 01:23:07,840
keep it tight

2128
01:23:22,320 --> 01:23:25,440
um hello everyone so um this talk is

2129
01:23:25,440 --> 01:23:27,280
slightly different i'm going to be

2130
01:23:27,280 --> 01:23:28,960
talking about implementation experience

2131
01:23:28,960 --> 01:23:30,639
uh hopefully you know talking about two

2132
01:23:30,639 --> 01:23:31,840
drafts

2133
01:23:31,840 --> 01:23:35,760
um that have been presented to the iccr

2134
01:23:35,760 --> 01:23:37,360
in some form uh we have an

2135
01:23:37,360 --> 01:23:39,679
implementation update on on both both of

2136
01:23:39,679 --> 01:23:42,560
these algorithms

2137
01:23:44,480 --> 01:23:47,120
uh so a quick recap on our led bat uh so

2138
01:23:47,120 --> 01:23:49,280
early bite is basically trying to bring

2139
01:23:49,280 --> 01:23:51,120
the benefits of lead battery led by plus

2140
01:23:51,120 --> 01:23:52,960
plus to the receive side of the

2141
01:23:52,960 --> 01:23:54,880
transport connection uh the draft

2142
01:23:54,880 --> 01:23:56,960
currently only talks about tcp but it

2143
01:23:56,960 --> 01:23:59,199
could be applicable to other transports

2144
01:23:59,199 --> 01:24:00,480
the key insight is to use the flow

2145
01:24:00,480 --> 01:24:02,800
control mechanism to throttle the pure

2146
01:24:02,800 --> 01:24:04,480
uh in the tcp case it's basically

2147
01:24:04,480 --> 01:24:06,560
shrinking the tcp

2148
01:24:06,560 --> 01:24:08,880
receive window uh and and growing it

2149
01:24:08,880 --> 01:24:10,639
based on uh

2150
01:24:10,639 --> 01:24:13,199
running sort of an equivalent condition

2151
01:24:13,199 --> 01:24:16,400
control algorithm on the receiver side

2152
01:24:16,400 --> 01:24:18,560
um i missed books there when i said

2153
01:24:18,560 --> 01:24:20,560
shrink so yeah we don't

2154
01:24:20,560 --> 01:24:22,080
shrink the advertise window which is we

2155
01:24:22,080 --> 01:24:23,679
just reduce it by the amount of bytes we

2156
01:24:23,679 --> 01:24:26,000
received but we do tune the window over

2157
01:24:26,000 --> 01:24:27,840
time depending on

2158
01:24:27,840 --> 01:24:29,679
the observed events from the network

2159
01:24:29,679 --> 01:24:30,719
like

2160
01:24:30,719 --> 01:24:32,159
loss

2161
01:24:32,159 --> 01:24:34,719
now why is this important uh so one of

2162
01:24:34,719 --> 01:24:36,719
the reasons why just a center side

2163
01:24:36,719 --> 01:24:38,239
conjunction controller is not good

2164
01:24:38,239 --> 01:24:40,239
enough in practice is because

2165
01:24:40,239 --> 01:24:43,040
uh a lot of a lot of software uses cdns

2166
01:24:43,040 --> 01:24:45,360
a lot of cdns currently don't have for

2167
01:24:45,360 --> 01:24:47,040
example that bet plus support it's

2168
01:24:47,040 --> 01:24:49,280
harder to update all cdns to have the

2169
01:24:49,280 --> 01:24:52,080
right uh congestion controller

2170
01:24:52,080 --> 01:24:54,719
proxies can prevent effective use of led

2171
01:24:54,719 --> 01:24:56,800
bat on the end to end path also if you

2172
01:24:56,800 --> 01:24:58,960
have proxies on the path then

2173
01:24:58,960 --> 01:25:00,159
effectively

2174
01:25:00,159 --> 01:25:02,639
uh from the server side you're not

2175
01:25:02,639 --> 01:25:04,400
actually measuring the

2176
01:25:04,400 --> 01:25:07,040
right bottleneck and are able to

2177
01:25:07,040 --> 01:25:10,800
basically throttle your sanding rate

2178
01:25:10,880 --> 01:25:13,360
and the receiver has a very clear

2179
01:25:13,360 --> 01:25:16,320
information about which download it

2180
01:25:16,320 --> 01:25:18,080
things are background downloads compared

2181
01:25:18,080 --> 01:25:19,440
to foreground download so there's

2182
01:25:19,440 --> 01:25:22,000
advantages logistically in

2183
01:25:22,000 --> 01:25:25,040
doing it on the receiver side

2184
01:25:25,040 --> 01:25:28,239
um and this work is based on this draft

2185
01:25:28,239 --> 01:25:32,239
which is currently active in iccrg

2186
01:25:32,880 --> 01:25:34,800
so we did implement this in the windows

2187
01:25:34,800 --> 01:25:36,239
tcp stack

2188
01:25:36,239 --> 01:25:39,120
so we have a single api currently that

2189
01:25:39,120 --> 01:25:41,040
enables both the sender and receiver

2190
01:25:41,040 --> 01:25:43,520
side scavenger algorithm so all right

2191
01:25:43,520 --> 01:25:45,600
let met plus plus an outlet bat

2192
01:25:45,600 --> 01:25:48,639
uh our implementation on of our led by

2193
01:25:48,639 --> 01:25:50,560
is based on lightbed plus plus so it

2194
01:25:50,560 --> 01:25:51,840
includes all the

2195
01:25:51,840 --> 01:25:53,840
uh additional mechanisms that were

2196
01:25:53,840 --> 01:25:56,239
introduced in ledbet plus plus like uh

2197
01:25:56,239 --> 01:25:58,159
using rtt measurements instead of

2198
01:25:58,159 --> 01:26:00,639
one-way delay uh slower than reno

2199
01:26:00,639 --> 01:26:02,400
condition window increase with the

2200
01:26:02,400 --> 01:26:04,719
adaptive factor as well as the

2201
01:26:04,719 --> 01:26:06,639
multiplicative condition window decrease

2202
01:26:06,639 --> 01:26:09,679
with the adaptive reduction factor

2203
01:26:09,679 --> 01:26:12,000
uh the slow start is also modified to be

2204
01:26:12,000 --> 01:26:13,520
slower than reno

2205
01:26:13,520 --> 01:26:15,520
and then we have the

2206
01:26:15,520 --> 01:26:17,440
periodic slowdown

2207
01:26:17,440 --> 01:26:20,719
so we did simplify this compared to uh

2208
01:26:20,719 --> 01:26:22,639
ledbet plus plus so

2209
01:26:22,639 --> 01:26:25,679
uh we currently are doing one slowdown

2210
01:26:25,679 --> 01:26:27,760
period uh per

2211
01:26:27,760 --> 01:26:30,159
um basically a measurement interval so

2212
01:26:30,159 --> 01:26:32,560
this was deliberately done to simplify

2213
01:26:32,560 --> 01:26:35,120
uh the code uh

2214
01:26:35,120 --> 01:26:37,040
we haven't compared one approach to the

2215
01:26:37,040 --> 01:26:38,560
other but this just a simpler

2216
01:26:38,560 --> 01:26:39,840
implementation

2217
01:26:39,840 --> 01:26:41,600
and we also simplify the base delay

2218
01:26:41,600 --> 01:26:44,400
implementation uh based on the outlet by

2219
01:26:44,400 --> 01:26:46,799
draft

2220
01:26:47,280 --> 01:26:49,280
so we do require negotiation of time

2221
01:26:49,280 --> 01:26:50,320
stamps

2222
01:26:50,320 --> 01:26:51,280
so

2223
01:26:51,280 --> 01:26:53,040
what this means is that if the

2224
01:26:53,040 --> 01:26:56,639
application did request or let bat

2225
01:26:56,639 --> 01:26:58,960
and the timestamp negotiation may fail

2226
01:26:58,960 --> 01:27:01,520
with the server in that case we need to

2227
01:27:01,520 --> 01:27:03,440
reflect that up to the application so it

2228
01:27:03,440 --> 01:27:05,760
can implement its own fallback logic to

2229
01:27:05,760 --> 01:27:08,719
throttle for example using a fixed rate

2230
01:27:08,719 --> 01:27:09,920
um

2231
01:27:09,920 --> 01:27:12,639
currently we don't take an action if a

2232
01:27:12,639 --> 01:27:14,560
data packet is received without

2233
01:27:14,560 --> 01:27:16,560
timestamps after establishment so for

2234
01:27:16,560 --> 01:27:18,159
example a middle box is stripping

2235
01:27:18,159 --> 01:27:19,679
timestamp options

2236
01:27:19,679 --> 01:27:21,440
uh we are currently not reacting to that

2237
01:27:21,440 --> 01:27:22,639
that's actually

2238
01:27:22,639 --> 01:27:23,760
a

2239
01:27:23,760 --> 01:27:25,760
the standard says you know the receiver

2240
01:27:25,760 --> 01:27:26,960
should drop those packets but we

2241
01:27:26,960 --> 01:27:29,600
currently don't um this is an area where

2242
01:27:29,600 --> 01:27:30,639
we would like to continue some

2243
01:27:30,639 --> 01:27:32,080
investigations to see what the draft

2244
01:27:32,080 --> 01:27:33,920
should recommend

2245
01:27:33,920 --> 01:27:35,360
but we are collecting data on this to

2246
01:27:35,360 --> 01:27:39,920
see how prevalent this is uh in the wild

2247
01:27:39,920 --> 01:27:41,199
the other problem that we haven't

2248
01:27:41,199 --> 01:27:42,960
mitigated is that

2249
01:27:42,960 --> 01:27:43,760
the

2250
01:27:43,760 --> 01:27:47,040
uh rtt is measured could be inflated

2251
01:27:47,040 --> 01:27:49,280
because of bursts during slow start on

2252
01:27:49,280 --> 01:27:51,840
the sender side uh there's no

2253
01:27:51,840 --> 01:27:53,760
uh effective mitigation we can think of

2254
01:27:53,760 --> 01:27:56,800
this on the receive side uh if there are

2255
01:27:56,800 --> 01:27:58,320
you know this might be an area of

2256
01:27:58,320 --> 01:28:01,320
research

2257
01:28:03,679 --> 01:28:05,679
so uh one of the things we observed

2258
01:28:05,679 --> 01:28:07,600
while we

2259
01:28:07,600 --> 01:28:10,320
started experimenting with this in in

2260
01:28:10,320 --> 01:28:12,560
production was to

2261
01:28:12,560 --> 01:28:14,400
find that there are several cdns which

2262
01:28:14,400 --> 01:28:16,639
currently do not enable timestamps

2263
01:28:16,639 --> 01:28:19,280
so we have worked with uh many cdns to

2264
01:28:19,280 --> 01:28:22,000
enable timestamps when the client

2265
01:28:22,000 --> 01:28:25,040
requests timestamps uh and i believe i

2266
01:28:25,040 --> 01:28:28,400
think the coverage is much higher now we

2267
01:28:28,400 --> 01:28:29,840
are currently doing these measurements

2268
01:28:29,840 --> 01:28:31,920
with with the windows update downloads

2269
01:28:31,920 --> 01:28:34,080
uh both for operating system updates as

2270
01:28:34,080 --> 01:28:36,480
well as uh store downloads

2271
01:28:36,480 --> 01:28:38,639
and we are aiming to share some data by

2272
01:28:38,639 --> 01:28:41,679
the next iccrg

2273
01:28:41,679 --> 01:28:43,520
i'm i'm leaving your question open here

2274
01:28:43,520 --> 01:28:46,000
i'm a co-author on the outlet red draft

2275
01:28:46,000 --> 01:28:48,080
this work is this presentation was about

2276
01:28:48,080 --> 01:28:49,760
the implementation but

2277
01:28:49,760 --> 01:28:51,280
now that we have an implementation based

2278
01:28:51,280 --> 01:28:52,960
on the draft uh

2279
01:28:52,960 --> 01:28:54,960
um i wanted to ask

2280
01:28:54,960 --> 01:28:55,920
janna

2281
01:28:55,920 --> 01:28:57,760
and and the group whether you know we

2282
01:28:57,760 --> 01:28:59,840
should consider publishing drafts as an

2283
01:28:59,840 --> 01:29:01,679
experiment

2284
01:29:01,679 --> 01:29:04,320
uh we can take that during the q a um i

2285
01:29:04,320 --> 01:29:06,159
will go on ahead with the presentation

2286
01:29:06,159 --> 01:29:08,880
because limited time

2287
01:29:08,880 --> 01:29:10,800
so i'm also going to talk about bbr v2

2288
01:29:10,800 --> 01:29:13,120
and our implementation of bb rb2

2289
01:29:13,120 --> 01:29:16,320
um so bbr v2 a quick recap is a model

2290
01:29:16,320 --> 01:29:18,719
based condition control algorithm

2291
01:29:18,719 --> 01:29:20,719
uh the goal is low q

2292
01:29:20,719 --> 01:29:23,520
occupancy of the bottleneck buffer

2293
01:29:23,520 --> 01:29:25,920
low loss uh and also

2294
01:29:25,920 --> 01:29:28,400
some form of bounded aren't cubic

2295
01:29:28,400 --> 01:29:30,560
coexistence

2296
01:29:30,560 --> 01:29:33,040
so the way the algorithm works is uh

2297
01:29:33,040 --> 01:29:35,120
continuously measure bandwidth round

2298
01:29:35,120 --> 01:29:37,760
trip time uh packet loss and then ecn

2299
01:29:37,760 --> 01:29:40,480
markings from the network

2300
01:29:40,480 --> 01:29:43,360
and basically figure out a rate that the

2301
01:29:43,360 --> 01:29:45,040
sender should be

2302
01:29:45,040 --> 01:29:46,960
sending packets at

2303
01:29:46,960 --> 01:29:48,880
there are some notable additions in v2

2304
01:29:48,880 --> 01:29:50,400
compared to v1

2305
01:29:50,400 --> 01:29:52,560
so the bandwidth probing time scale is

2306
01:29:52,560 --> 01:29:55,360
adaptive uh loss and ecn have been

2307
01:29:55,360 --> 01:29:57,920
incorporated into the network model

2308
01:29:57,920 --> 01:29:58,800
um

2309
01:29:58,800 --> 01:30:00,480
and then even when even when we are

2310
01:30:00,480 --> 01:30:02,800
application limited uh we want to

2311
01:30:02,800 --> 01:30:04,800
basically adapt to loss and ecn

2312
01:30:04,800 --> 01:30:07,920
information and finally uh because there

2313
01:30:07,920 --> 01:30:09,199
is significant

2314
01:30:09,199 --> 01:30:12,000
aggregation in networks uh we want to

2315
01:30:12,000 --> 01:30:13,920
adapt this event based on

2316
01:30:13,920 --> 01:30:15,679
estimating the amount of ack aggregation

2317
01:30:15,679 --> 01:30:17,440
that's happening in the network and

2318
01:30:17,440 --> 01:30:19,600
finally

2319
01:30:19,600 --> 01:30:20,480
the

2320
01:30:20,480 --> 01:30:23,120
the computed rate uh the sender will

2321
01:30:23,120 --> 01:30:24,719
basically paste the packets at the

2322
01:30:24,719 --> 01:30:27,360
computed rate

2323
01:30:28,560 --> 01:30:31,840
uh so a brief uh overview of how we

2324
01:30:31,840 --> 01:30:33,920
implemented this uh so basically the

2325
01:30:33,920 --> 01:30:36,320
code is actually open source um it's

2326
01:30:36,320 --> 01:30:38,560
available at this link so that's what we

2327
01:30:38,560 --> 01:30:40,560
based our implementation on

2328
01:30:40,560 --> 01:30:42,320
uh we integrated it as a conjunction

2329
01:30:42,320 --> 01:30:44,800
control module in the windows tcp stack

2330
01:30:44,800 --> 01:30:46,320
um it's currently available as an

2331
01:30:46,320 --> 01:30:48,800
experimental knob in windows 11 insider

2332
01:30:48,800 --> 01:30:49,920
builds

2333
01:30:49,920 --> 01:30:50,880
um

2334
01:30:50,880 --> 01:30:52,000
the

2335
01:30:52,000 --> 01:30:54,320
raid based pacer was built into tcp so

2336
01:30:54,320 --> 01:30:56,239
we're not using a pacer that's outside

2337
01:30:56,239 --> 01:30:58,639
the tcp module and the way this works is

2338
01:30:58,639 --> 01:31:00,800
that basically on each send

2339
01:31:00,800 --> 01:31:03,679
uh we're computing an allowance uh based

2340
01:31:03,679 --> 01:31:06,320
on the time since the last send

2341
01:31:06,320 --> 01:31:08,480
and effectively if the allowance does

2342
01:31:08,480 --> 01:31:10,000
not allow us to send us the send the

2343
01:31:10,000 --> 01:31:11,760
package at that time we schedule the

2344
01:31:11,760 --> 01:31:16,000
pacing timer to send the remaining data

2345
01:31:16,000 --> 01:31:17,679
um so

2346
01:31:17,679 --> 01:31:19,600
one of the challenges for us was because

2347
01:31:19,600 --> 01:31:22,480
this code is also integrated into the

2348
01:31:22,480 --> 01:31:24,880
linux kernel one of the challenges was

2349
01:31:24,880 --> 01:31:26,960
that and because the code is not final

2350
01:31:26,960 --> 01:31:29,280
it's still evolving uh we wanted to

2351
01:31:29,280 --> 01:31:31,199
integrate this but still leave most of

2352
01:31:31,199 --> 01:31:34,080
the code intact so that we can

2353
01:31:34,080 --> 01:31:36,480
enable direct comparisons between you

2354
01:31:36,480 --> 01:31:38,880
know future versions and be able to you

2355
01:31:38,880 --> 01:31:41,920
know pull in those changes easily

2356
01:31:41,920 --> 01:31:43,360
one of the

2357
01:31:43,360 --> 01:31:45,040
simplifications we did was we currently

2358
01:31:45,040 --> 01:31:46,560
don't do any ecn handling so we

2359
01:31:46,560 --> 01:31:48,000
currently assume there's no ecm marking

2360
01:31:48,000 --> 01:31:50,000
happening on the network um so that's

2361
01:31:50,000 --> 01:31:51,840
just a simplification but eventually

2362
01:31:51,840 --> 01:31:54,239
we'd like to add that in

2363
01:31:54,239 --> 01:31:56,320
i would like to say that

2364
01:31:56,320 --> 01:31:58,159
this sort of we called it a reverse

2365
01:31:58,159 --> 01:31:59,600
engineering approach basically just

2366
01:31:59,600 --> 01:32:01,760
looking at code and trying to

2367
01:32:01,760 --> 01:32:02,880
implement a conjunction control

2368
01:32:02,880 --> 01:32:04,480
algorithm is something we've done for

2369
01:32:04,480 --> 01:32:06,880
the first time and it was very very hard

2370
01:32:06,880 --> 01:32:09,840
um lack of spec was uh

2371
01:32:09,840 --> 01:32:12,480
a significant uh

2372
01:32:12,480 --> 01:32:14,800
problem for us while developing this uh

2373
01:32:14,800 --> 01:32:17,040
but thankfully you know we had good

2374
01:32:17,040 --> 01:32:19,760
support from new and yuck on on email

2375
01:32:19,760 --> 01:32:20,719
and

2376
01:32:20,719 --> 01:32:22,719
we were able to get most of our

2377
01:32:22,719 --> 01:32:24,960
questions answered but you know longer

2378
01:32:24,960 --> 01:32:28,480
term it's probably not sustainable

2379
01:32:28,480 --> 01:32:30,800
uh some of the early data

2380
01:32:30,800 --> 01:32:32,320
uh so significant improvements in

2381
01:32:32,320 --> 01:32:34,880
latency so uh particularly with cubic

2382
01:32:34,880 --> 01:32:38,480
you know we see uh latency overshoot uh

2383
01:32:38,480 --> 01:32:41,840
a lot beyond uh the base rtt

2384
01:32:41,840 --> 01:32:43,440
uh but in this case we're seeing up to

2385
01:32:43,440 --> 01:32:46,719
like 10x improvements in many cases um

2386
01:32:46,719 --> 01:32:48,560
and some throughput improvements as well

2387
01:32:48,560 --> 01:32:50,800
and these are like test cases in the lab

2388
01:32:50,800 --> 01:32:52,719
that are doing uh wide area network

2389
01:32:52,719 --> 01:32:56,159
emulation so um one of the interesting

2390
01:32:56,159 --> 01:32:58,320
things was hey you know this this is

2391
01:32:58,320 --> 01:33:00,000
primarily aimed to you know reduce

2392
01:33:00,000 --> 01:33:02,159
latency let's run it uh at you know

2393
01:33:02,159 --> 01:33:04,000
ultra low latency test cases where you

2394
01:33:04,000 --> 01:33:05,600
have like back to back systems in the

2395
01:33:05,600 --> 01:33:07,360
same rack and

2396
01:33:07,360 --> 01:33:08,639
loopback

2397
01:33:08,639 --> 01:33:11,360
test cases and we see that

2398
01:33:11,360 --> 01:33:13,440
there's actually a cpu

2399
01:33:13,440 --> 01:33:15,840
usage bottleneck so the algorithm

2400
01:33:15,840 --> 01:33:17,760
is executing more cycles compared to

2401
01:33:17,760 --> 01:33:19,520
cubic so this is something we would like

2402
01:33:19,520 --> 01:33:21,040
to address by doing software

2403
01:33:21,040 --> 01:33:22,639
optimizations and we also find that

2404
01:33:22,639 --> 01:33:24,560
there are interactions between

2405
01:33:24,560 --> 01:33:27,440
uh placing an lso lso is basically you

2406
01:33:27,440 --> 01:33:28,480
know

2407
01:33:28,480 --> 01:33:30,560
a tso or like sending a large segment

2408
01:33:30,560 --> 01:33:31,840
out to the neck

2409
01:33:31,840 --> 01:33:33,760
to improve the efficiency and we find

2410
01:33:33,760 --> 01:33:35,840
that because of pacing there are fewer

2411
01:33:35,840 --> 01:33:37,679
opportunities to do so and the and the

2412
01:33:37,679 --> 01:33:39,040
size of the

2413
01:33:39,040 --> 01:33:41,679
lso is actually smaller

2414
01:33:41,679 --> 01:33:45,120
um we also did an inter region test uh

2415
01:33:45,120 --> 01:33:47,040
in the in the azure

2416
01:33:47,040 --> 01:33:49,120
cloud and we see about 20 throughput

2417
01:33:49,120 --> 01:33:50,719
improvement and not much difference in

2418
01:33:50,719 --> 01:33:53,360
latency and this is a low loss sort of

2419
01:33:53,360 --> 01:33:54,159
uh

2420
01:33:54,159 --> 01:33:56,639
not uh you know

2421
01:33:56,639 --> 01:33:58,800
over saturated network basically so

2422
01:33:58,800 --> 01:34:00,800
there's ample headroom and we see

2423
01:34:00,800 --> 01:34:02,320
basically throughput improvements but

2424
01:34:02,320 --> 01:34:04,000
not much difference in latency in this

2425
01:34:04,000 --> 01:34:06,480
particular test case

2426
01:34:06,480 --> 01:34:08,880
uh significant fairness issues still so

2427
01:34:08,880 --> 01:34:10,719
uh in all our lab tests we see that

2428
01:34:10,719 --> 01:34:13,920
cubic dominates bb or v2 across a range

2429
01:34:13,920 --> 01:34:16,000
of test cases so

2430
01:34:16,000 --> 01:34:18,080
i think in bbr v1 we sort of had an

2431
01:34:18,080 --> 01:34:19,520
opposite problem with some of the shell

2432
01:34:19,520 --> 01:34:22,400
buffer cases but in this case

2433
01:34:22,400 --> 01:34:25,520
uh we find that uh i think maybe we have

2434
01:34:25,520 --> 01:34:27,760
over compensated a little bit and cubic

2435
01:34:27,760 --> 01:34:30,239
is dominating bbr v2

2436
01:34:30,239 --> 01:34:32,560
um and currently it doesn't seem

2437
01:34:32,560 --> 01:34:34,000
incrementally deployable of course if

2438
01:34:34,000 --> 01:34:35,280
you have if you have a network in

2439
01:34:35,280 --> 01:34:37,520
workload where you can guarantee that

2440
01:34:37,520 --> 01:34:39,840
it's only going to be uh bbr v2 then

2441
01:34:39,840 --> 01:34:42,320
it's certainly deployable but otherwise

2442
01:34:42,320 --> 01:34:43,679
uh for any sort of incremental

2443
01:34:43,679 --> 01:34:46,480
deployment uh currently we have

2444
01:34:46,480 --> 01:34:49,759
significant finance issues

2445
01:34:50,400 --> 01:34:53,280
so uh next steps here so uh neil did

2446
01:34:53,280 --> 01:34:54,960
promise he'll bring a draft

2447
01:34:54,960 --> 01:34:56,800
i think his talk is next so i'm looking

2448
01:34:56,800 --> 01:34:58,080
forward to that but basically we would

2449
01:34:58,080 --> 01:35:00,400
like to help review that draft and adopt

2450
01:35:00,400 --> 01:35:03,119
it and take it forward and

2451
01:35:03,119 --> 01:35:04,639
change our implementation according to

2452
01:35:04,639 --> 01:35:06,239
the community feedback

2453
01:35:06,239 --> 01:35:07,760
uh we'd like to resolve the fairness

2454
01:35:07,760 --> 01:35:10,320
issues when cubic shares the bottleneck

2455
01:35:10,320 --> 01:35:11,520
link

2456
01:35:11,520 --> 01:35:13,119
and of course the cpu usage

2457
01:35:13,119 --> 01:35:14,800
optimizations

2458
01:35:14,800 --> 01:35:16,719
that need to be looked at and finally

2459
01:35:16,719 --> 01:35:19,360
deployment production a big shout out

2460
01:35:19,360 --> 01:35:21,119
and thanks to neil and newton for all

2461
01:35:21,119 --> 01:35:24,400
their help on this work

2462
01:35:27,199 --> 01:35:30,000
uh questions

2463
01:35:30,960 --> 01:35:33,440
thanks so much praveen um i

2464
01:35:33,440 --> 01:35:35,360
uh

2465
01:35:35,360 --> 01:35:37,280
i want to say i don't we don't have time

2466
01:35:37,280 --> 01:35:38,880
for questions there are negative time

2467
01:35:38,880 --> 01:35:40,880
for questions but if you have a really

2468
01:35:40,880 --> 01:35:43,440
quick uh question asked here or i would

2469
01:35:43,440 --> 01:35:45,280
recommend that you take it to the chat

2470
01:35:45,280 --> 01:35:46,960
uh if you can because we're already

2471
01:35:46,960 --> 01:35:49,119
behind way behind on time

2472
01:35:49,119 --> 01:35:50,639
do you have a burning learning question

2473
01:35:50,639 --> 01:35:53,119
that you want to ask in person

2474
01:35:53,119 --> 01:35:54,159
um

2475
01:35:54,159 --> 01:35:56,000
not really just very quick comment so

2476
01:35:56,000 --> 01:35:57,600
about our light pattern like that

2477
01:35:57,600 --> 01:35:59,920
possible it's the gain factor

2478
01:35:59,920 --> 01:36:01,199
and the

2479
01:36:01,199 --> 01:36:03,600
the target these are the two things i i

2480
01:36:03,600 --> 01:36:05,119
just wanted to say that we shipped these

2481
01:36:05,119 --> 01:36:05,920
two

2482
01:36:05,920 --> 01:36:07,600
last year um

2483
01:36:07,600 --> 01:36:08,840
in our

2484
01:36:08,840 --> 01:36:11,360
tcp implementation and the gain factor

2485
01:36:11,360 --> 01:36:14,080
that we are using and the target

2486
01:36:14,080 --> 01:36:16,239
um we probably played with it a little

2487
01:36:16,239 --> 01:36:18,560
bit because it wasn't working uh the

2488
01:36:18,560 --> 01:36:20,400
additive increase wasn't going as fast

2489
01:36:20,400 --> 01:36:22,239
as i was expecting and the throughput

2490
01:36:22,239 --> 01:36:24,639
was really suffering so that's all i

2491
01:36:24,639 --> 01:36:26,880
want to mention and maybe i can speak to

2492
01:36:26,880 --> 01:36:29,600
praveen offline

2493
01:36:29,600 --> 01:36:32,159
yes um and i would encourage by the way

2494
01:36:32,159 --> 01:36:35,280
i would encourage even for conversations

2495
01:36:35,280 --> 01:36:36,719
i would strongly encourage using the

2496
01:36:36,719 --> 01:36:39,199
iccrg as a place where when you're

2497
01:36:39,199 --> 01:36:40,800
having conversation across

2498
01:36:40,800 --> 01:36:43,600
uh on clarification of implementations

2499
01:36:43,600 --> 01:36:45,280
or various things if you're able to

2500
01:36:45,280 --> 01:36:47,040
identify ccrg

2501
01:36:47,040 --> 01:36:48,639
a lot of lot of good things come out of

2502
01:36:48,639 --> 01:36:50,480
it because the community gets to see it

2503
01:36:50,480 --> 01:36:52,239
there's a record of it it's available

2504
01:36:52,239 --> 01:36:53,920
for others to see later when they're

2505
01:36:53,920 --> 01:36:56,080
doing the implementation work so not

2506
01:36:56,080 --> 01:36:58,159
just for this but for praveen and neil

2507
01:36:58,159 --> 01:36:59,440
when you're having your conversations if

2508
01:36:59,440 --> 01:37:01,280
you're able to have it on the channel

2509
01:37:01,280 --> 01:37:04,080
they'll be very very welcome as well um

2510
01:37:04,080 --> 01:37:06,719
thanks for your presentation um praveen

2511
01:37:06,719 --> 01:37:08,480
that was very it's exciting to see this

2512
01:37:08,480 --> 01:37:11,040
work move forward and i want to now hand

2513
01:37:11,040 --> 01:37:12,320
it over to neil

2514
01:37:12,320 --> 01:37:15,840
uh neil i know that we are uh behind so

2515
01:37:15,840 --> 01:37:17,360
uh the rest of the

2516
01:37:17,360 --> 01:37:20,239
time is yours so managers manage it as

2517
01:37:20,239 --> 01:37:24,400
you see best but uh go for it

2518
01:37:25,199 --> 01:37:27,679
thank you let me uh just get set here i

2519
01:37:27,679 --> 01:37:29,840
will request permission

2520
01:37:29,840 --> 01:37:31,440
to

2521
01:37:31,440 --> 01:37:35,000
present the slides

2522
01:37:36,000 --> 01:37:38,480
let's see

2523
01:37:39,040 --> 01:37:42,400
actually get the right one okay

2524
01:37:44,320 --> 01:37:46,400
okay uh let's see is everyone able to

2525
01:37:46,400 --> 01:37:49,719
see the slides

2526
01:37:51,840 --> 01:37:55,119
can you guys hear my audio

2527
01:37:55,600 --> 01:37:56,400
yep

2528
01:37:56,400 --> 01:37:57,920
 visible

2529
01:37:57,920 --> 01:38:00,159
okay great um

2530
01:38:00,159 --> 01:38:01,760
so yeah so i wanted to give a quick

2531
01:38:01,760 --> 01:38:02,560
update

2532
01:38:02,560 --> 01:38:06,560
um about uh bbr work going on uh inside

2533
01:38:06,560 --> 01:38:08,159
our team um

2534
01:38:08,159 --> 01:38:10,719
and uh ian will also be presenting uh

2535
01:38:10,719 --> 01:38:12,880
some updates on the quick uh side as

2536
01:38:12,880 --> 01:38:15,679
well um and i'll make this super quick

2537
01:38:15,679 --> 01:38:16,480
um

2538
01:38:16,480 --> 01:38:18,320
so i just wanted to talk a little bit

2539
01:38:18,320 --> 01:38:20,880
about the deployment status code status

2540
01:38:20,880 --> 01:38:23,280
and then give a super high level

2541
01:38:23,280 --> 01:38:26,239
overview of the internet drafts that um

2542
01:38:26,239 --> 01:38:28,880
i updated um

2543
01:38:28,880 --> 01:38:30,639
the

2544
01:38:30,639 --> 01:38:32,560
site last night so you can you can find

2545
01:38:32,560 --> 01:38:35,600
links um on the iccrg list and the vbr

2546
01:38:35,600 --> 01:38:38,239
devs list um and the goal here is

2547
01:38:38,239 --> 01:38:40,560
basically to um

2548
01:38:40,560 --> 01:38:42,239
uh you know talk mostly to talk about

2549
01:38:42,239 --> 01:38:44,400
the drafts which are responding to

2550
01:38:44,400 --> 01:38:47,119
requests from uh the itf community and

2551
01:38:47,119 --> 01:38:48,880
other transport stack maintainers

2552
01:38:48,880 --> 01:38:51,440
implementing bbr v2 that um you know

2553
01:38:51,440 --> 01:38:53,440
obviously that would be useful to have a

2554
01:38:53,440 --> 01:38:55,440
draft documenting the algorithm and you

2555
01:38:55,440 --> 01:38:57,040
know this is always part of the plan and

2556
01:38:57,040 --> 01:38:58,880
we apologize for this not happening

2557
01:38:58,880 --> 01:39:00,719
sooner

2558
01:39:00,719 --> 01:39:02,880
and we also of course want to invite the

2559
01:39:02,880 --> 01:39:04,400
community to

2560
01:39:04,400 --> 01:39:06,080
read the drafts and offer any kind of

2561
01:39:06,080 --> 01:39:07,520
feedback

2562
01:39:07,520 --> 01:39:09,679
both low-level editorial feedback

2563
01:39:09,679 --> 01:39:11,520
algorithm

2564
01:39:11,520 --> 01:39:13,280
ideas or bug fixes

2565
01:39:13,280 --> 01:39:15,600
test results anything is useful and

2566
01:39:15,600 --> 01:39:17,679
welcome

2567
01:39:17,679 --> 01:39:20,800
so uh in terms of deployment status of

2568
01:39:20,800 --> 01:39:22,400
vbr at google

2569
01:39:22,400 --> 01:39:24,480
right now google internal traffic is

2570
01:39:24,480 --> 01:39:26,480
either using bbrd2

2571
01:39:26,480 --> 01:39:28,719
as a default or

2572
01:39:28,719 --> 01:39:30,719
it's part of a pilot program or we're

2573
01:39:30,719 --> 01:39:33,600
gradually rolling out the rv to the

2574
01:39:33,600 --> 01:39:36,400
swift variant which we discussed at a

2575
01:39:36,400 --> 01:39:38,480
recent iccrg

2576
01:39:38,480 --> 01:39:41,679
so the default right now is bbr v2 um

2577
01:39:41,679 --> 01:39:44,880
using ecn and loss and bandwidth and rtt

2578
01:39:44,880 --> 01:39:46,480
is as signals

2579
01:39:46,480 --> 01:39:49,040
but we are doing a pilot that is small

2580
01:39:49,040 --> 01:39:51,920
but growing of bbr

2581
01:39:51,920 --> 01:39:54,320
a swift variant that is using a sort of

2582
01:39:54,320 --> 01:39:56,880
network rtt estimate as a primary

2583
01:39:56,880 --> 01:39:58,719
congestion signal

2584
01:39:58,719 --> 01:40:00,560
in the manner of the swift algorithm

2585
01:40:00,560 --> 01:40:03,520
that was published at sitcom in 2020.

2586
01:40:03,520 --> 01:40:05,440
google external traffic is still using

2587
01:40:05,440 --> 01:40:08,000
bbr v1 by default but we're working on

2588
01:40:08,000 --> 01:40:11,119
transitioning that to v2 um looking at

2589
01:40:11,119 --> 01:40:12,639
av experiments

2590
01:40:12,639 --> 01:40:15,760
qoe and latency data and iterating

2591
01:40:15,760 --> 01:40:17,280
to to improve that

2592
01:40:17,280 --> 01:40:18,960
for the launch

2593
01:40:18,960 --> 01:40:20,400
and of course we're continuing to

2594
01:40:20,400 --> 01:40:22,159
iterate

2595
01:40:22,159 --> 01:40:23,760
on some of the

2596
01:40:23,760 --> 01:40:25,360
areas where we know we want to improve

2597
01:40:25,360 --> 01:40:26,719
including the

2598
01:40:26,719 --> 01:40:28,960
issues that praveen mentioned about

2599
01:40:28,960 --> 01:40:30,960
coexistence with cubic

2600
01:40:30,960 --> 01:40:32,960
i also wanted to mention we have

2601
01:40:32,960 --> 01:40:35,119
praveen mentioned cpu usage and we do

2602
01:40:35,119 --> 01:40:38,560
have a apache set that introduces a fast

2603
01:40:38,560 --> 01:40:41,199
path for ppr processing that we did find

2604
01:40:41,199 --> 01:40:44,560
was useful in bringing the cpu usage um

2605
01:40:44,560 --> 01:40:47,679
between to parity with cubic for our at

2606
01:40:47,679 --> 01:40:49,679
least for our production workloads

2607
01:40:49,679 --> 01:40:51,760
which we will be sharing when we get

2608
01:40:51,760 --> 01:40:52,719
time

2609
01:40:52,719 --> 01:40:53,679
um

2610
01:40:53,679 --> 01:40:55,360
let's see the status of the code this is

2611
01:40:55,360 --> 01:40:57,119
just a sort of repeat we have open

2612
01:40:57,119 --> 01:40:59,119
source versions you can find the links

2613
01:40:59,119 --> 01:41:02,159
in the slides

2614
01:41:02,560 --> 01:41:04,800
so the bbr

2615
01:41:04,800 --> 01:41:07,199
functionality is sort of split between

2616
01:41:07,199 --> 01:41:09,119
two different drafts as it was in the

2617
01:41:09,119 --> 01:41:11,440
original um release

2618
01:41:11,440 --> 01:41:14,000
for pbrv1 so the first

2619
01:41:14,000 --> 01:41:16,719
draft is a delivery rate estimation

2620
01:41:16,719 --> 01:41:18,320
algorithm

2621
01:41:18,320 --> 01:41:20,159
and that covers a bandwidth sampling

2622
01:41:20,159 --> 01:41:22,560
mechanism that's used by both pvr

2623
01:41:22,560 --> 01:41:24,480
version one and version two and it's

2624
01:41:24,480 --> 01:41:26,800
also just generically available in linux

2625
01:41:26,800 --> 01:41:30,159
tcp you can use those bandwidth samples

2626
01:41:30,159 --> 01:41:32,400
no matter what congestion control is in

2627
01:41:32,400 --> 01:41:34,159
place and being used

2628
01:41:34,159 --> 01:41:36,719
the algorithm is largely unchanged since

2629
01:41:36,719 --> 01:41:38,320
vbrv1

2630
01:41:38,320 --> 01:41:39,360
times

2631
01:41:39,360 --> 01:41:42,080
there was a significant bug fix though

2632
01:41:42,080 --> 01:41:45,280
that we've folded in and described

2633
01:41:45,280 --> 01:41:48,159
basically the you realize that

2634
01:41:48,159 --> 01:41:49,600
when the loss detection algorithm

2635
01:41:49,600 --> 01:41:51,760
decides to retransmit something

2636
01:41:51,760 --> 01:41:54,239
that is another point when you need to

2637
01:41:54,239 --> 01:41:56,480
look for bubbles of silence before that

2638
01:41:56,480 --> 01:41:59,440
event just as you would for

2639
01:41:59,440 --> 01:42:01,199
cases where an application decided to

2640
01:42:01,199 --> 01:42:02,480
send something

2641
01:42:02,480 --> 01:42:03,840
um

2642
01:42:03,840 --> 01:42:05,600
anyway so you can take a look at the

2643
01:42:05,600 --> 01:42:08,080
draft and give us feedback we'd be

2644
01:42:08,080 --> 01:42:09,119
appreciated

2645
01:42:09,119 --> 01:42:11,920
um so the other piece of this puzzle is

2646
01:42:11,920 --> 01:42:15,199
the bbr congestion control draft itself

2647
01:42:15,199 --> 01:42:17,679
that's also been updated to cover the

2648
01:42:17,679 --> 01:42:20,480
current pbr version 2 algorithm

2649
01:42:20,480 --> 01:42:22,719
right now it just includes the aspects

2650
01:42:22,719 --> 01:42:24,480
relevant to the current public internet

2651
01:42:24,480 --> 01:42:25,440
so

2652
01:42:25,440 --> 01:42:27,840
the core model and the loss response and

2653
01:42:27,840 --> 01:42:29,840
the strategy for coexistence with cubic

2654
01:42:29,840 --> 01:42:33,199
and reno um the

2655
01:42:33,199 --> 01:42:36,080
ecm part is only missing due to time

2656
01:42:36,080 --> 01:42:39,520
limitations that's still used uh at our

2657
01:42:39,520 --> 01:42:41,360
site and still part of the long-term

2658
01:42:41,360 --> 01:42:43,840
roadmap we just haven't had time to put

2659
01:42:43,840 --> 01:42:46,000
that in the draft so i'll do that you

2660
01:42:46,000 --> 01:42:47,440
know we'll work on that as soon as we

2661
01:42:47,440 --> 01:42:48,320
can

2662
01:42:48,320 --> 01:42:49,360
um

2663
01:42:49,360 --> 01:42:52,400
and you know the the algorithm is sort

2664
01:42:52,400 --> 01:42:55,119
of documented um in its current state

2665
01:42:55,119 --> 01:42:56,320
and of course there are some known

2666
01:42:56,320 --> 01:42:58,800
issues um the one i mentioned here it

2667
01:42:58,800 --> 01:43:01,600
corresponds to the the issue proving

2668
01:43:01,600 --> 01:43:05,040
mentioned in terms of um cubic and bbrb2

2669
01:43:05,040 --> 01:43:08,159
coexistence or cubic winds too often

2670
01:43:08,159 --> 01:43:09,119
um

2671
01:43:09,119 --> 01:43:11,040
and then i'm just going to zoom through

2672
01:43:11,040 --> 01:43:13,360
some pictures and well actually first in

2673
01:43:13,360 --> 01:43:16,400
a quick outline as you would expect um

2674
01:43:16,400 --> 01:43:18,560
the draft sort of covers first an

2675
01:43:18,560 --> 01:43:20,639
overview and then a detailed rundown of

2676
01:43:20,639 --> 01:43:21,840
the algorithm

2677
01:43:21,840 --> 01:43:23,520
uh

2678
01:43:23,520 --> 01:43:25,520
network path model how it sets the

2679
01:43:25,520 --> 01:43:27,199
control parameters and then the state

2680
01:43:27,199 --> 01:43:29,920
machine as the algorithm decides to

2681
01:43:29,920 --> 01:43:32,239
probe the network um

2682
01:43:32,239 --> 01:43:33,679
during its lifetime

2683
01:43:33,679 --> 01:43:34,639
um

2684
01:43:34,639 --> 01:43:35,920
and then

2685
01:43:35,920 --> 01:43:38,400
then i posted a couple pictures that i

2686
01:43:38,400 --> 01:43:39,119
think

2687
01:43:39,119 --> 01:43:41,040
you know as pictures by themselves they

2688
01:43:41,040 --> 01:43:42,560
won't have enough context but i am

2689
01:43:42,560 --> 01:43:44,719
hoping they'll be useful to folks who

2690
01:43:44,719 --> 01:43:46,800
are making their way through the draft

2691
01:43:46,800 --> 01:43:49,040
reading the content and they could

2692
01:43:49,040 --> 01:43:50,000
um

2693
01:43:50,000 --> 01:43:52,400
you know use a little picture to help uh

2694
01:43:52,400 --> 01:43:54,639
put everything in context and make it a

2695
01:43:54,639 --> 01:43:56,800
little more clear so this is a sort of

2696
01:43:56,800 --> 01:43:58,159
high level

2697
01:43:58,159 --> 01:44:00,639
block diagram if you will about how the

2698
01:44:00,639 --> 01:44:03,440
bbr algorithm fits in with its inputs

2699
01:44:03,440 --> 01:44:05,040
and outputs

2700
01:44:05,040 --> 01:44:06,960
and the basic structure of the algorithm

2701
01:44:06,960 --> 01:44:09,119
where it's ticking various input signals

2702
01:44:09,119 --> 01:44:10,880
feeding it through a model and a state

2703
01:44:10,880 --> 01:44:13,040
machine and then generating you know the

2704
01:44:13,040 --> 01:44:14,719
three control parameters congestion

2705
01:44:14,719 --> 01:44:17,440
window pacing rate and quantum or burst

2706
01:44:17,440 --> 01:44:18,960
size

2707
01:44:18,960 --> 01:44:20,560
um and then the next picture that i

2708
01:44:20,560 --> 01:44:22,480
think might be useful to people is just

2709
01:44:22,480 --> 01:44:24,239
a picture of the parameters in the model

2710
01:44:24,239 --> 01:44:26,560
and how they fit together and we don't

2711
01:44:26,560 --> 01:44:28,000
have time to go into detail but all of

2712
01:44:28,000 --> 01:44:30,080
these are defined in the draft and at a

2713
01:44:30,080 --> 01:44:31,520
high level you can say there's basically

2714
01:44:31,520 --> 01:44:33,280
a set of parameters

2715
01:44:33,280 --> 01:44:35,920
about the data rate that the algorithm

2716
01:44:35,920 --> 01:44:37,920
thinks is appropriate and then some

2717
01:44:37,920 --> 01:44:40,719
parameters about the data volume or you

2718
01:44:40,719 --> 01:44:42,800
know amount of in-flight data

2719
01:44:42,800 --> 01:44:44,400
and a key part of that of course is the

2720
01:44:44,400 --> 01:44:46,560
bdp estimate but there are also other

2721
01:44:46,560 --> 01:44:49,760
pieces that are discussed in draft

2722
01:44:49,760 --> 01:44:51,920
and then there's just a little

2723
01:44:51,920 --> 01:44:53,440
colorful picture of the state machine

2724
01:44:53,440 --> 01:44:55,040
diagram

2725
01:44:55,040 --> 01:44:56,159
that might be

2726
01:44:56,159 --> 01:44:57,280
helpful as you're reading through the

2727
01:44:57,280 --> 01:44:59,119
draft

2728
01:44:59,119 --> 01:45:00,080
and then

2729
01:45:00,080 --> 01:45:02,400
here's also a just a picture of a

2730
01:45:02,400 --> 01:45:04,880
typical life in the day in the life of a

2731
01:45:04,880 --> 01:45:07,280
bbr flow that sort of starts up and this

2732
01:45:07,280 --> 01:45:08,800
shows its evolution through the state

2733
01:45:08,800 --> 01:45:12,480
machine uh with the level of in-flight

2734
01:45:12,480 --> 01:45:13,520
data

2735
01:45:13,520 --> 01:45:15,360
superimposed on top so you can sort of

2736
01:45:15,360 --> 01:45:18,400
get a sense of how these things interact

2737
01:45:18,400 --> 01:45:19,760
and again we don't have time to go into

2738
01:45:19,760 --> 01:45:21,360
it but this might help

2739
01:45:21,360 --> 01:45:23,760
visualize what's going on in the text of

2740
01:45:23,760 --> 01:45:25,520
the draft

2741
01:45:25,520 --> 01:45:28,080
um so yeah in conclusion

2742
01:45:28,080 --> 01:45:30,239
we've updated the drafts to cover pbr

2743
01:45:30,239 --> 01:45:33,600
version two and uh we look forward to uh

2744
01:45:33,600 --> 01:45:36,080
feedback if people have time to read um

2745
01:45:36,080 --> 01:45:37,920
and high level feedback low level

2746
01:45:37,920 --> 01:45:39,760
feedback anything in between it's all

2747
01:45:39,760 --> 01:45:41,679
welcome um so

2748
01:45:41,679 --> 01:45:45,440
uh yeah thank you very much and um

2749
01:45:45,440 --> 01:45:47,199
if there are any quick questions i can

2750
01:45:47,199 --> 01:45:49,040
take some but let's also leave time for

2751
01:45:49,040 --> 01:45:51,760
ian to give his uh update about the

2752
01:45:51,760 --> 01:45:55,000
quick side

2753
01:45:58,480 --> 01:45:59,840
neil do you want to take questions now

2754
01:45:59,840 --> 01:46:01,840
or wait until the end's done

2755
01:46:01,840 --> 01:46:03,600
yeah maybe let's wait until ian's done

2756
01:46:03,600 --> 01:46:05,440
so i'll um see is there a way i can

2757
01:46:05,440 --> 01:46:06,880
yield do i

2758
01:46:06,880 --> 01:46:09,760
to just give it up uh folks line up in

2759
01:46:09,760 --> 01:46:11,280
queue if you want but uh we'll wait

2760
01:46:11,280 --> 01:46:13,119
until the end is done before we take

2761
01:46:13,119 --> 01:46:14,880
questions

2762
01:46:14,880 --> 01:46:17,280
go for it

2763
01:46:17,580 --> 01:46:19,360
[Music]

2764
01:46:19,360 --> 01:46:21,600
how do i uh oh there you go all right i

2765
01:46:21,600 --> 01:46:25,239
was just grabbing my slides

2766
01:46:26,880 --> 01:46:29,840
okay let's do this

2767
01:46:31,920 --> 01:46:34,080
all right um

2768
01:46:34,080 --> 01:46:37,280
so i i've been working on a variety of

2769
01:46:37,280 --> 01:46:39,520
small changes to bdr p2 that don't

2770
01:46:39,520 --> 01:46:40,560
actually

2771
01:46:40,560 --> 01:46:42,080
they don't substantively change kind of

2772
01:46:42,080 --> 01:46:44,000
the core algorithm and the approach that

2773
01:46:44,000 --> 01:46:45,520
neil outland

2774
01:46:45,520 --> 01:46:47,280
but they do make some tweaks kind of

2775
01:46:47,280 --> 01:46:49,920
around the edges and some of those

2776
01:46:49,920 --> 01:46:53,119
tweaks um may or may not end up being

2777
01:46:53,119 --> 01:46:54,719
particularly relevant particularly in

2778
01:46:54,719 --> 01:46:56,080
the public internet

2779
01:46:56,080 --> 01:46:57,840
so i'm going to walk through three today

2780
01:46:57,840 --> 01:46:58,639
um

2781
01:46:58,639 --> 01:47:00,560
there are a number of others that i had

2782
01:47:00,560 --> 01:47:02,560
time to outline

2783
01:47:02,560 --> 01:47:04,159
and also a number of others that i do

2784
01:47:04,159 --> 01:47:05,440
not yet have

2785
01:47:05,440 --> 01:47:08,719
a good qe experience for um so yeah let

2786
01:47:08,719 --> 01:47:11,360
me go for it

2787
01:47:11,679 --> 01:47:12,960
um

2788
01:47:12,960 --> 01:47:16,320
so the the tljr is basically that

2789
01:47:16,320 --> 01:47:20,560
uh bbrv2 is very very close to achieving

2790
01:47:20,560 --> 01:47:23,920
the same uh youtube video qe

2791
01:47:23,920 --> 01:47:27,199
as well as search latency as bbr b1 um

2792
01:47:27,199 --> 01:47:29,119
with these tweaks and a few others but

2793
01:47:29,119 --> 01:47:30,320
these are kind of the most substantive

2794
01:47:30,320 --> 01:47:31,760
ones probably the pilot

2795
01:47:31,760 --> 01:47:33,360
um

2796
01:47:33,360 --> 01:47:35,360
and you know there are still some some

2797
01:47:35,360 --> 01:47:36,560
differences between the two in

2798
01:47:36,560 --> 01:47:38,000
particular

2799
01:47:38,000 --> 01:47:40,000
we we expect that there will be a

2800
01:47:40,000 --> 01:47:42,000
bandwidth regression between the two

2801
01:47:42,000 --> 01:47:44,239
algorithms just you know because that's

2802
01:47:44,239 --> 01:47:45,520
kind of the intent

2803
01:47:45,520 --> 01:47:46,480
um

2804
01:47:46,480 --> 01:47:48,080
and i think that's deemed hopefully

2805
01:47:48,080 --> 01:47:49,600
acceptable

2806
01:47:49,600 --> 01:47:51,199
but that the key issue is that rebuff

2807
01:47:51,199 --> 01:47:52,960
rate and those other metrics

2808
01:47:52,960 --> 01:47:55,040
are not seriously harmed

2809
01:47:55,040 --> 01:47:58,080
uh as as a result um consumer related

2810
01:47:58,080 --> 01:47:59,199
research

2811
01:47:59,199 --> 01:48:00,560
uh search actually has been a little bit

2812
01:48:00,560 --> 01:48:02,560
easier really so far it looks like

2813
01:48:02,560 --> 01:48:04,239
um and possibly due to the fact that

2814
01:48:04,239 --> 01:48:06,480
bbr2 is a little bit less aggressive uh

2815
01:48:06,480 --> 01:48:08,000
search latency seems to be pretty

2816
01:48:08,000 --> 01:48:09,199
robustly

2817
01:48:09,199 --> 01:48:11,600
uh pretty close to neutral um so

2818
01:48:11,600 --> 01:48:13,199
whenever we launch it we'll release full

2819
01:48:13,199 --> 01:48:15,760
details but um you know it's it's not a

2820
01:48:15,760 --> 01:48:17,600
major concern at this point so the the

2821
01:48:17,600 --> 01:48:19,600
video queue is more the problem

2822
01:48:19,600 --> 01:48:20,800
um

2823
01:48:20,800 --> 01:48:23,360
so uh one challenge is

2824
01:48:23,360 --> 01:48:25,440
uh today when you start up due to loss

2825
01:48:25,440 --> 01:48:28,239
you set imply high to bdp

2826
01:48:28,239 --> 01:48:32,239
um that that means that unless you are

2827
01:48:32,239 --> 01:48:34,000
extremely nicely out clocked in an

2828
01:48:34,000 --> 01:48:35,679
extremely smooth manner you are going to

2829
01:48:35,679 --> 01:48:37,119
be sewing limited

2830
01:48:37,119 --> 01:48:38,800
uh before you ever achieve the max

2831
01:48:38,800 --> 01:48:41,040
bandwidth uh that kind of has resulted

2832
01:48:41,040 --> 01:48:42,239
in bdp

2833
01:48:42,239 --> 01:48:43,440
um

2834
01:48:43,440 --> 01:48:45,440
and similarly once inflate high is low

2835
01:48:45,440 --> 01:48:47,440
it can be very difficult

2836
01:48:47,440 --> 01:48:48,800
or even impossible to grow it

2837
01:48:48,800 --> 01:48:51,040
substantially um so this can sort of

2838
01:48:51,040 --> 01:48:52,800
result in this sort of a bandwidth crash

2839
01:48:52,800 --> 01:48:53,679
thing

2840
01:48:53,679 --> 01:48:55,440
where you know you

2841
01:48:55,440 --> 01:48:57,920
have a certain bandwidth and then you

2842
01:48:57,920 --> 01:49:00,639
each crank down the invite high um and

2843
01:49:00,639 --> 01:49:02,000
then you know the future bandwidths

2844
01:49:02,000 --> 01:49:03,679
actually keep going lower because in

2845
01:49:03,679 --> 01:49:05,040
flight high is so low that you can't

2846
01:49:05,040 --> 01:49:06,159
actually achieve the bandwidth that you

2847
01:49:06,159 --> 01:49:07,199
first

2848
01:49:07,199 --> 01:49:08,400
achieved

2849
01:49:08,400 --> 01:49:11,360
um so my my proposed fix is relatively

2850
01:49:11,360 --> 01:49:13,679
simple which is you track the maximum

2851
01:49:13,679 --> 01:49:15,440
bytes delivered in a round um not the

2852
01:49:15,440 --> 01:49:17,840
maximum fight to be clear the max bytes

2853
01:49:17,840 --> 01:49:19,280
actually delivered

2854
01:49:19,280 --> 01:49:21,199
um so that should indicate that the pipe

2855
01:49:21,199 --> 01:49:23,119
is at least that large because actually

2856
01:49:23,119 --> 01:49:24,800
to look though when you put that many

2857
01:49:24,800 --> 01:49:26,159
guys in lounge

2858
01:49:26,159 --> 01:49:28,719
around um and

2859
01:49:28,719 --> 01:49:30,159
as a result you have a lot less of a

2860
01:49:30,159 --> 01:49:31,360
bandwidth crash

2861
01:49:31,360 --> 01:49:34,320
uh when aggregation is present um

2862
01:49:34,320 --> 01:49:35,679
and as well as like when you have

2863
01:49:35,679 --> 01:49:37,119
excessive loss

2864
01:49:37,119 --> 01:49:39,040
um so this seemed

2865
01:49:39,040 --> 01:49:40,159
uh

2866
01:49:40,159 --> 01:49:42,080
the change at least in our experience

2867
01:49:42,080 --> 01:49:43,920
improved qe and had

2868
01:49:43,920 --> 01:49:45,760
almost no downside the three trans

2869
01:49:45,760 --> 01:49:46,960
change and retransfer it was

2870
01:49:46,960 --> 01:49:49,040
extraordinarily small so i think niels

2871
01:49:49,040 --> 01:49:50,560
actually has plans to like start

2872
01:49:50,560 --> 01:49:52,560
experimenting with us at some point but

2873
01:49:52,560 --> 01:49:54,239
it's kind of one of many

2874
01:49:54,239 --> 01:49:56,719
smaller changes um there are a few other

2875
01:49:56,719 --> 01:49:58,480
spots in the code that one could

2876
01:49:58,480 --> 01:50:00,159
potentially start using this max

2877
01:50:00,159 --> 01:50:01,760
delivered in around or

2878
01:50:01,760 --> 01:50:03,840
rely more on bytes delivered rather than

2879
01:50:03,840 --> 01:50:05,040
like um

2880
01:50:05,040 --> 01:50:06,960
inflight and other metrics and i have

2881
01:50:06,960 --> 01:50:09,199
some experiments to work with those but

2882
01:50:09,199 --> 01:50:11,360
the results are less clear than they are

2883
01:50:11,360 --> 01:50:12,560
with this one

2884
01:50:12,560 --> 01:50:14,080
where this one kind of was a pretty

2885
01:50:14,080 --> 01:50:16,559
clear one

2886
01:50:16,880 --> 01:50:19,040
uh so the next one that's an issue that

2887
01:50:19,040 --> 01:50:21,280
neil's talked about a few times

2888
01:50:21,280 --> 01:50:23,199
is early provo exit

2889
01:50:23,199 --> 01:50:24,960
um and similarly like

2890
01:50:24,960 --> 01:50:26,800
the lack of inflight high growth during

2891
01:50:26,800 --> 01:50:28,480
promo which is kind of related

2892
01:50:28,480 --> 01:50:30,800
um so probate up connects it early due

2893
01:50:30,800 --> 01:50:32,000
to queueing

2894
01:50:32,000 --> 01:50:34,080
uh the queueing criteria is you exit

2895
01:50:34,080 --> 01:50:36,719
probe up if it's been at least minority

2896
01:50:36,719 --> 01:50:40,159
in probe up and to be clear probe up in

2897
01:50:40,159 --> 01:50:42,239
these slides means probe bw

2898
01:50:42,239 --> 01:50:44,800
colon going up from needle slots uh and

2899
01:50:44,800 --> 01:50:46,159
the bytes in flight are greater than

2900
01:50:46,159 --> 01:50:49,520
1.25 times bdb plus 2 mss

2901
01:50:49,520 --> 01:50:50,719
um

2902
01:50:50,719 --> 01:50:52,480
so if you're not in profit you don't

2903
01:50:52,480 --> 01:50:54,080
really increase in flight high there are

2904
01:50:54,080 --> 01:50:56,080
some ways it can increase but typically

2905
01:50:56,080 --> 01:50:58,400
it's quite rare um again you never kind

2906
01:50:58,400 --> 01:51:01,599
of re-achieve the max bandwidth

2907
01:51:01,599 --> 01:51:03,920
so the

2908
01:51:03,920 --> 01:51:05,280
the simple solution that we currently

2909
01:51:05,280 --> 01:51:07,360
have in our code default enabled is you

2910
01:51:07,360 --> 01:51:08,880
wait at least one round instead of min

2911
01:51:08,880 --> 01:51:09,920
rtt

2912
01:51:09,920 --> 01:51:11,280
uh in cases when there's a lot of

2913
01:51:11,280 --> 01:51:13,760
aggregation the min rtt can be an order

2914
01:51:13,760 --> 01:51:16,000
of magnitude um smaller than the smooth

2915
01:51:16,000 --> 01:51:17,360
rtds that kind of ends up being

2916
01:51:17,360 --> 01:51:18,639
necessary

2917
01:51:18,639 --> 01:51:20,880
and then you put on the extra act um and

2918
01:51:20,880 --> 01:51:21,679
the

2919
01:51:21,679 --> 01:51:24,800
for the in-flight check um

2920
01:51:24,800 --> 01:51:26,719
this isn't perfect this does increase

2921
01:51:26,719 --> 01:51:28,400
pre-transit rates somewhat measurably

2922
01:51:28,400 --> 01:51:30,880
it's still massively less than dvr1 but

2923
01:51:30,880 --> 01:51:34,159
um this extra criteria is in some cases

2924
01:51:34,159 --> 01:51:35,440
a little bit

2925
01:51:35,440 --> 01:51:37,119
aggressive but it it

2926
01:51:37,119 --> 01:51:39,520
at least is proof that um there are

2927
01:51:39,520 --> 01:51:41,679
solutions out there that kind of like

2928
01:51:41,679 --> 01:51:44,480
avoid this early exit um and don't

2929
01:51:44,480 --> 01:51:45,840
cause like you know a huge amount of

2930
01:51:45,840 --> 01:51:47,280
collateral damage

2931
01:51:47,280 --> 01:51:48,480
um

2932
01:51:48,480 --> 01:51:50,639
a newer idea that i wrote relatively

2933
01:51:50,639 --> 01:51:52,000
recently

2934
01:51:52,000 --> 01:51:53,760
is instead of looking at the extra act

2935
01:51:53,760 --> 01:51:55,280
what about looking for a persistent

2936
01:51:55,280 --> 01:51:57,199
queue of the course of the round

2937
01:51:57,199 --> 01:51:59,360
um and so the code says if you've been

2938
01:51:59,360 --> 01:52:01,199
in profit for at least a round and your

2939
01:52:01,199 --> 01:52:02,880
main bites and flight

2940
01:52:02,880 --> 01:52:05,360
are greater than kind of the 1.25 bdp

2941
01:52:05,360 --> 01:52:07,440
number that we're checking against

2942
01:52:07,440 --> 01:52:08,960
um then

2943
01:52:08,960 --> 01:52:10,480
then you exit

2944
01:52:10,480 --> 01:52:11,920
in theory this might allow us to skip

2945
01:52:11,920 --> 01:52:13,360
the application limited check in various

2946
01:52:13,360 --> 01:52:14,480
spots

2947
01:52:14,480 --> 01:52:16,239
there are some spots in startup is

2948
01:52:16,239 --> 01:52:18,960
otherwise that we do have limited checks

2949
01:52:18,960 --> 01:52:20,719
um if you were app limited and you still

2950
01:52:20,719 --> 01:52:22,880
couldn't get your queue under the target

2951
01:52:22,880 --> 01:52:25,119
um probably something's not going great

2952
01:52:25,119 --> 01:52:26,000
um

2953
01:52:26,000 --> 01:52:27,119
and so

2954
01:52:27,119 --> 01:52:28,560
uh making code a little less sensitive

2955
01:52:28,560 --> 01:52:31,040
to checks it's kind of a potentially

2956
01:52:31,040 --> 01:52:33,040
side benefit of this

2957
01:52:33,040 --> 01:52:35,280
um

2958
01:52:35,360 --> 01:52:37,520
and yeah the last one was uh excessive

2959
01:52:37,520 --> 01:52:39,520
time and probe rt this one's pretty

2960
01:52:39,520 --> 01:52:40,800
simple basically when you're coming out

2961
01:52:40,800 --> 01:52:43,119
of quiescence and you're in pro rtt you

2962
01:52:43,119 --> 01:52:44,719
don't leave until like a full round has

2963
01:52:44,719 --> 01:52:46,639
passed because you need an ack to kick

2964
01:52:46,639 --> 01:52:48,480
yourself out of probe rtt

2965
01:52:48,480 --> 01:52:49,280
um

2966
01:52:49,280 --> 01:52:50,560
and so that means you know you're

2967
01:52:50,560 --> 01:52:51,920
sending it like well less than half the

2968
01:52:51,920 --> 01:52:54,320
bandwidth for a full round um

2969
01:52:54,320 --> 01:52:55,679
we independently discovered this

2970
01:52:55,679 --> 01:52:57,360
apparently anticipated quick

2971
01:52:57,360 --> 01:52:59,920
um so apparently it was a good idea and

2972
01:52:59,920 --> 01:53:02,800
um yeah tcp already has this this fix in

2973
01:53:02,800 --> 01:53:04,560
as well but it's kind of worth noting

2974
01:53:04,560 --> 01:53:06,080
just because it's um

2975
01:53:06,080 --> 01:53:08,320
it does it can increase the amount of

2976
01:53:08,320 --> 01:53:09,840
time and probe rgt when you're doing app

2977
01:53:09,840 --> 01:53:11,119
limited traffic

2978
01:53:11,119 --> 01:53:12,239
and we noticed there's a number of

2979
01:53:12,239 --> 01:53:14,320
youtube flows where you'd get a chunk

2980
01:53:14,320 --> 01:53:15,520
and then stop for a while and get a

2981
01:53:15,520 --> 01:53:17,280
chunk and so on and so forth and when

2982
01:53:17,280 --> 01:53:18,560
you finish the last chunk you'd still be

2983
01:53:18,560 --> 01:53:20,320
in pro partsd

2984
01:53:20,320 --> 01:53:23,119
um cool so that's it

2985
01:53:23,119 --> 01:53:25,119
um i want to open up the floor for

2986
01:53:25,119 --> 01:53:26,960
questions we have

2987
01:53:26,960 --> 01:53:29,760
seven minutes left

2988
01:53:33,840 --> 01:53:35,440
sweet

2989
01:53:35,440 --> 01:53:37,760
thank you all right uh jonathan you're

2990
01:53:37,760 --> 01:53:39,679
up

2991
01:53:39,679 --> 01:53:41,679
neil do you want to join

2992
01:53:41,679 --> 01:53:42,719
yeah

2993
01:53:42,719 --> 01:53:44,960
i um

2994
01:53:44,960 --> 01:53:47,679
i i was wanting to ask about the ecn

2995
01:53:47,679 --> 01:53:50,080
since it isn't in the draft yet

2996
01:53:50,080 --> 01:53:53,119
uh could we have a brief summary of how

2997
01:53:53,119 --> 01:53:56,320
ecn information is incorporated into the

2998
01:53:56,320 --> 01:53:59,920
algorithm and how it differs into how

2999
01:53:59,920 --> 01:54:03,760
loss information is incorporated

3000
01:54:03,840 --> 01:54:05,840
right the um

3001
01:54:05,840 --> 01:54:09,199
ecn information is interpreted in a

3002
01:54:09,199 --> 01:54:13,100
manner that's very similar to dc-tcp

3003
01:54:13,100 --> 01:54:14,719
[Music]

3004
01:54:14,719 --> 01:54:16,639
is

3005
01:54:16,639 --> 01:54:18,800
so i think that tells you all you need

3006
01:54:18,800 --> 01:54:19,840
to know

3007
01:54:19,840 --> 01:54:21,360
right now there's no

3008
01:54:21,360 --> 01:54:23,920
it's not l4s specifically just because

3009
01:54:23,920 --> 01:54:25,920
there's no you know it's not tied with

3010
01:54:25,920 --> 01:54:28,239
the ect1 code point and it's not

3011
01:54:28,239 --> 01:54:31,840
integrated with uh accurate ecn

3012
01:54:31,840 --> 01:54:33,599
but the

3013
01:54:33,599 --> 01:54:35,280
intent is to

3014
01:54:35,280 --> 01:54:38,560
allow it in the future to be

3015
01:54:38,560 --> 01:54:40,800
for us compliant

3016
01:54:40,800 --> 01:54:43,360
down the road

3017
01:54:46,880 --> 01:54:48,719
right and that differs from how lost

3018
01:54:48,719 --> 01:54:50,400
information is incorporated

3019
01:54:50,400 --> 01:54:51,840
right

3020
01:54:51,840 --> 01:54:53,280
uh yes

3021
01:54:53,280 --> 01:54:55,519
yeah

3022
01:55:00,400 --> 01:55:01,599
did you what well i don't know if we

3023
01:55:01,599 --> 01:55:03,920
have time to go on the specifics but the

3024
01:55:03,920 --> 01:55:05,840
the um

3025
01:55:05,840 --> 01:55:08,880
the reaction to the econ is very similar

3026
01:55:08,880 --> 01:55:12,080
to dc tcp so there's a every round trip

3027
01:55:12,080 --> 01:55:13,840
where there's a where there's ecn

3028
01:55:13,840 --> 01:55:16,159
marking um there's sort of a

3029
01:55:16,159 --> 01:55:18,880
multiplicative uh decrease thoughts

3030
01:55:18,880 --> 01:55:20,480
proportional to the

3031
01:55:20,480 --> 01:55:22,239
exponentially weighted moving average of

3032
01:55:22,239 --> 01:55:25,199
recent ecn marks um

3033
01:55:25,199 --> 01:55:26,000
so

3034
01:55:26,000 --> 01:55:28,719
yeah so hopefully that's a quick summary

3035
01:55:28,719 --> 01:55:31,040
there are also um details about it i

3036
01:55:31,040 --> 01:55:34,320
think in in previous iccrg uh slides but

3037
01:55:34,320 --> 01:55:36,639
i'll also try to update the draft to

3038
01:55:36,639 --> 01:55:38,719
discuss the ecm part um as soon as we

3039
01:55:38,719 --> 01:55:41,440
get cycles

3040
01:55:43,679 --> 01:55:45,040
that's probably a good idea to put in

3041
01:55:45,040 --> 01:55:49,360
the draft um video you're up next

3042
01:55:51,679 --> 01:55:54,000
i was actually going to ask about the

3043
01:55:54,000 --> 01:55:55,360
which form of

3044
01:55:55,360 --> 01:55:57,920
acn are we using but uh

3045
01:55:57,920 --> 01:56:00,880
neil already answered that um

3046
01:56:00,880 --> 01:56:02,480
and you said there's plans to use

3047
01:56:02,480 --> 01:56:04,800
accurate ecn right if accurate dcn is

3048
01:56:04,800 --> 01:56:05,920
supported

3049
01:56:05,920 --> 01:56:08,639
so that's that's good um

3050
01:56:08,639 --> 01:56:10,639
oh so the second question i had is oh

3051
01:56:10,639 --> 01:56:12,000
sorry go ahead

3052
01:56:12,000 --> 01:56:14,400
no i was just gonna confirm that yeah so

3053
01:56:14,400 --> 01:56:15,520
i think

3054
01:56:15,520 --> 01:56:17,679
if and when accurate ecm makes it into

3055
01:56:17,679 --> 01:56:19,679
um linux or other

3056
01:56:19,679 --> 01:56:21,599
os's then yeah the plan would be to use

3057
01:56:21,599 --> 01:56:22,960
that signal

3058
01:56:22,960 --> 01:56:23,840
yeah

3059
01:56:23,840 --> 01:56:24,719
okay

3060
01:56:24,719 --> 01:56:26,719
the second question i had was regarding

3061
01:56:26,719 --> 01:56:28,400
uh the the

3062
01:56:28,400 --> 01:56:31,040
points that ian noted about in flight

3063
01:56:31,040 --> 01:56:33,520
high so it's not is is the in flight

3064
01:56:33,520 --> 01:56:36,159
high not set again after the loss like i

3065
01:56:36,159 --> 01:56:38,800
was assuming it would be said again you

3066
01:56:38,800 --> 01:56:40,480
know once you have a last year you set

3067
01:56:40,480 --> 01:56:43,119
it to bdp but then you have probably

3068
01:56:43,119 --> 01:56:44,880
another stage where you would increase

3069
01:56:44,880 --> 01:56:46,880
the in-flight high

3070
01:56:46,880 --> 01:56:49,840
or am i understanding it

3071
01:56:49,840 --> 01:56:51,840
yeah that that's that's right

3072
01:56:51,840 --> 01:56:53,520
but i'll let you know

3073
01:56:53,520 --> 01:56:54,840
yeah

3074
01:56:54,840 --> 01:56:57,599
yeah you're correct that the flow probes

3075
01:56:57,599 --> 01:56:59,280
again um

3076
01:56:59,280 --> 01:57:01,920
but the tricky issue is that there's

3077
01:57:01,920 --> 01:57:04,239
sort of a coupling between

3078
01:57:04,239 --> 01:57:06,719
the in-flight high value that's that's

3079
01:57:06,719 --> 01:57:08,320
bounding the amount of

3080
01:57:08,320 --> 01:57:10,159
uh the volume of data that you're

3081
01:57:10,159 --> 01:57:12,639
willing to put in the network and then

3082
01:57:12,639 --> 01:57:14,719
your bandwidth estimate which is the

3083
01:57:14,719 --> 01:57:16,719
rate the delivery rate that you can

3084
01:57:16,719 --> 01:57:18,880
achieve and once you've decided you can

3085
01:57:18,880 --> 01:57:20,719
only fit a certain amount of data inside

3086
01:57:20,719 --> 01:57:23,199
the network then that implicitly bounds

3087
01:57:23,199 --> 01:57:25,760
the rate that you're able to achieve and

3088
01:57:25,760 --> 01:57:27,119
then because it's bounding the rate

3089
01:57:27,119 --> 01:57:29,840
you're able to achieve that

3090
01:57:29,840 --> 01:57:31,679
um bounds the

3091
01:57:31,679 --> 01:57:33,599
your estimate of the bdp

3092
01:57:33,599 --> 01:57:36,000
and then that in turn bounds the

3093
01:57:36,000 --> 01:57:38,080
amount of data you're willing to put in

3094
01:57:38,080 --> 01:57:41,360
the network to probe for bandwidth

3095
01:57:41,360 --> 01:57:43,760
and causes you to

3096
01:57:43,760 --> 01:57:47,119
not put enough data in the network in

3097
01:57:47,119 --> 01:57:48,480
order to

3098
01:57:48,480 --> 01:57:50,800
achieve a higher delivery rate and raise

3099
01:57:50,800 --> 01:57:53,520
your bandwidth estimate and so you can

3100
01:57:53,520 --> 01:57:55,520
sort of with the current logic that's in

3101
01:57:55,520 --> 01:57:56,960
place you can sort of get stuck

3102
01:57:56,960 --> 01:57:59,440
sometimes if there's a packet loss early

3103
01:57:59,440 --> 01:58:02,080
on that can

3104
01:58:02,080 --> 01:58:05,119
limit your sense of the safe volume of

3105
01:58:05,119 --> 01:58:07,280
data which limits your bandwidth

3106
01:58:07,280 --> 01:58:09,199
estimate limits your probing and you can

3107
01:58:09,199 --> 01:58:11,119
kind of get stuck in these cases

3108
01:58:11,119 --> 01:58:12,639
um and

3109
01:58:12,639 --> 01:58:14,159
uh you know there are a couple of

3110
01:58:14,159 --> 01:58:16,639
different ways you can fix that and uh

3111
01:58:16,639 --> 01:58:18,400
you know ian and i are both continuing

3112
01:58:18,400 --> 01:58:20,639
to experiment with that it gets a little

3113
01:58:20,639 --> 01:58:22,480
tricky though because then

3114
01:58:22,480 --> 01:58:24,560
once you fix that which i think is is

3115
01:58:24,560 --> 01:58:26,159
fairly straightforward to do then it

3116
01:58:26,159 --> 01:58:28,560
impacts your coexistence behavior with

3117
01:58:28,560 --> 01:58:31,199
cubic and reno because then you end up

3118
01:58:31,199 --> 01:58:33,520
causing packet loss more often and so i

3119
01:58:33,520 --> 01:58:36,080
think the algorithm might need to be a

3120
01:58:36,080 --> 01:58:38,159
little more shrewd about how it

3121
01:58:38,159 --> 01:58:40,480
schedules it's been with probing once

3122
01:58:40,480 --> 01:58:43,040
it's more robust about pushing up to

3123
01:58:43,040 --> 01:58:44,639
encounter loss

3124
01:58:44,639 --> 01:58:46,639
in these cases

3125
01:58:46,639 --> 01:58:48,320
thank you yeah that's a great insight

3126
01:58:48,320 --> 01:58:49,440
thank you

3127
01:58:49,440 --> 01:58:51,598
yeah

3128
01:58:53,520 --> 01:58:54,960
halloween europe

3129
01:58:54,960 --> 01:58:56,880
yeah hey thanks neil uh really

3130
01:58:56,880 --> 01:58:59,040
appreciate the new drafts uh i will

3131
01:58:59,040 --> 01:59:00,480
certainly go over them provide my

3132
01:59:00,480 --> 01:59:03,040
feedback um one quick question on the

3133
01:59:03,040 --> 01:59:05,280
logistics so do these drafts reflect the

3134
01:59:05,280 --> 01:59:08,320
code that's uh in the sort of uh out of

3135
01:59:08,320 --> 01:59:10,880
kernel repo that we are using as the

3136
01:59:10,880 --> 01:59:13,280
basis or is this a reflecting work there

3137
01:59:13,280 --> 01:59:14,639
is

3138
01:59:14,639 --> 01:59:17,040
not part of that code um so that was one

3139
01:59:17,040 --> 01:59:18,880
question and and i also had a suggestion

3140
01:59:18,880 --> 01:59:21,840
for ian is to like you know whatever

3141
01:59:21,840 --> 01:59:23,440
enhancements you've made you know bring

3142
01:59:23,440 --> 01:59:26,320
them twice as dirty to the draft uh

3143
01:59:26,320 --> 01:59:28,719
having quicken tcp converse to the same

3144
01:59:28,719 --> 01:59:31,840
thing would be extremely useful

3145
01:59:32,159 --> 01:59:34,400
so that's that that is the intent um as

3146
01:59:34,400 --> 01:59:36,480
soon as these things are kind of proven

3147
01:59:36,480 --> 01:59:39,520
to work well in both tcp and quick we're

3148
01:59:39,520 --> 01:59:40,639
gonna make sure they make it into the

3149
01:59:40,639 --> 01:59:43,199
draft but um we're we're so very far

3150
01:59:43,199 --> 01:59:45,679
been a little bit conservative

3151
01:59:45,679 --> 01:59:47,599
and tried to make sure that

3152
01:59:47,599 --> 01:59:49,119
we're we're very sure that like any

3153
01:59:49,119 --> 01:59:50,320
change we make

3154
01:59:50,320 --> 01:59:51,920
really like works well in a variety of

3155
01:59:51,920 --> 01:59:54,080
robust circumstances

3156
01:59:54,080 --> 01:59:56,480
neil has a variety of simulations and

3157
01:59:56,480 --> 01:59:58,639
uh test scenarios that i don't easily

3158
01:59:58,639 --> 02:00:00,239
have available to me and and kind of

3159
02:00:00,239 --> 02:00:02,960
vice versa to some extent um

3160
02:00:02,960 --> 02:00:04,480
and so

3161
02:00:04,480 --> 02:00:05,679
we kind of need to make sure that

3162
02:00:05,679 --> 02:00:07,040
something i changed that like works

3163
02:00:07,040 --> 02:00:09,199
great for youtube doesn't like destroy

3164
02:00:09,199 --> 02:00:10,480
like data center

3165
02:00:10,480 --> 02:00:12,400
applications so we do need to kind of go

3166
02:00:12,400 --> 02:00:13,679
back and forth and i think that'll take

3167
02:00:13,679 --> 02:00:16,000
some time

3168
02:00:16,239 --> 02:00:18,560
right well and then this is a

3169
02:00:18,560 --> 02:00:20,880
question about uh which version yeah

3170
02:00:20,880 --> 02:00:23,119
this should correspond very closely to

3171
02:00:23,119 --> 02:00:25,119
the code that's currently on github

3172
02:00:25,119 --> 02:00:26,239
there may be one or two small

3173
02:00:26,239 --> 02:00:27,920
differences where there are two

3174
02:00:27,920 --> 02:00:28,800
different

3175
02:00:28,800 --> 02:00:30,480
behaviors available in the github code

3176
02:00:30,480 --> 02:00:32,639
and the draft documents the one that we

3177
02:00:32,639 --> 02:00:34,480
currently recommend but otherwise it

3178
02:00:34,480 --> 02:00:36,880
should be very similar

3179
02:00:36,880 --> 02:00:38,719
thanks

3180
02:00:38,719 --> 02:00:41,599
i'll short my question um so uh you're

3181
02:00:41,599 --> 02:00:43,280
implying that um

3182
02:00:43,280 --> 02:00:45,520
the quick and tcp inflation is diverging

3183
02:00:45,520 --> 02:00:46,639
a little bit and obviously there's a

3184
02:00:46,639 --> 02:00:49,360
practical issue there but is is the

3185
02:00:49,360 --> 02:00:52,080
different um are the differences solely

3186
02:00:52,080 --> 02:00:54,000
related to the applications involved or

3187
02:00:54,000 --> 02:00:55,440
are you seeing

3188
02:00:55,440 --> 02:00:57,920
like protocol specifics that are driving

3189
02:00:57,920 --> 02:01:00,960
these divergences

3190
02:01:00,960 --> 02:01:01,679
i

3191
02:01:01,679 --> 02:01:03,599
i mean i'll let ian give his perspective

3192
02:01:03,599 --> 02:01:06,080
but my perspective is that we just have

3193
02:01:06,080 --> 02:01:08,560
a team with multiple people who are both

3194
02:01:08,560 --> 02:01:10,800
doing experiments um on a continuous

3195
02:01:10,800 --> 02:01:12,000
basis

3196
02:01:12,000 --> 02:01:14,320
and just in different code bases and you

3197
02:01:14,320 --> 02:01:15,520
know

3198
02:01:15,520 --> 02:01:18,239
quick is probably able to move get

3199
02:01:18,239 --> 02:01:20,239
experiments pushed to

3200
02:01:20,239 --> 02:01:22,080
front-end servers faster because it's

3201
02:01:22,080 --> 02:01:24,480
user space code

3202
02:01:24,480 --> 02:01:27,360
we have some different tools for the tcp

3203
02:01:27,360 --> 02:01:29,119
side that can help explore other

3204
02:01:29,119 --> 02:01:30,960
scenarios so i would view it as a

3205
02:01:30,960 --> 02:01:32,960
collaboration and both both of us are

3206
02:01:32,960 --> 02:01:34,960
running experiments to sort of move

3207
02:01:34,960 --> 02:01:36,719
you know figure out how to improve the

3208
02:01:36,719 --> 02:01:38,960
algorithm and then as ian said once we

3209
02:01:38,960 --> 02:01:40,719
gain confidence with one particular

3210
02:01:40,719 --> 02:01:42,080
approach we're going to make sure that

3211
02:01:42,080 --> 02:01:44,880
the tcp and quick

3212
02:01:44,880 --> 02:01:47,119
versions of the algorithm agree

3213
02:01:47,119 --> 02:01:48,480
and likewise if there are other people

3214
02:01:48,480 --> 02:01:51,360
out there doing bbr v2 experiments

3215
02:01:51,360 --> 02:01:52,960
we want to make sure we're incorporating

3216
02:01:52,960 --> 02:01:55,199
any good ideas that are out there in the

3217
02:01:55,199 --> 02:01:58,879
external research community as well

3218
02:01:59,280 --> 02:02:00,719
the only thing that's a really protocol

3219
02:02:00,719 --> 02:02:02,719
difference i can think of that we do

3220
02:02:02,719 --> 02:02:05,199
observe some of is um as you probably

3221
02:02:05,199 --> 02:02:08,000
know martin ack decimation act frequency

3222
02:02:08,000 --> 02:02:09,520
whatever you'd like to call it is quite

3223
02:02:09,520 --> 02:02:11,199
widespread frequent

3224
02:02:11,199 --> 02:02:12,960
similar approaches are fairly it's read

3225
02:02:12,960 --> 02:02:14,239
for tcp

3226
02:02:14,239 --> 02:02:16,080
um but they kind of the the way they

3227
02:02:16,080 --> 02:02:17,599
manifest themselves are a little bit

3228
02:02:17,599 --> 02:02:18,639
different

3229
02:02:18,639 --> 02:02:20,719
um and that along with like some of the

3230
02:02:20,719 --> 02:02:22,880
scheduling being user space means that i

3231
02:02:22,880 --> 02:02:24,159
think the traces

3232
02:02:24,159 --> 02:02:25,760
and the ack lines tend to look a little

3233
02:02:25,760 --> 02:02:27,520
bit different and i think kwik suffers a

3234
02:02:27,520 --> 02:02:30,159
little more from the aggregation effects

3235
02:02:30,159 --> 02:02:31,760
on the public internet due to a variety

3236
02:02:31,760 --> 02:02:34,239
of these factors so uh my experience

3237
02:02:34,239 --> 02:02:35,199
with

3238
02:02:35,199 --> 02:02:36,960
pbrv one is

3239
02:02:36,960 --> 02:02:42,000
quick was impacted more by aggregation

3240
02:02:42,159 --> 02:02:43,199
yeah that's that's definitely all

3241
02:02:43,199 --> 02:02:44,560
different

3242
02:02:44,560 --> 02:02:46,239
yeah although it's interesting because

3243
02:02:46,239 --> 02:02:47,280
uh

3244
02:02:47,280 --> 02:02:50,639
inside in the data center case um tcp

3245
02:02:50,639 --> 02:02:52,800
also does see massive degrees of

3246
02:02:52,800 --> 02:02:54,480
aggregation because when your rgts are

3247
02:02:54,480 --> 02:02:56,719
super small in the data center then the

3248
02:02:56,719 --> 02:02:58,320
aggregation that the

3249
02:02:58,320 --> 02:03:00,480
the nics are doing or your software is

3250
02:03:00,480 --> 02:03:03,520
doing uh then becomes massive in the in

3251
02:03:03,520 --> 02:03:05,119
the traces again at these very tiny

3252
02:03:05,119 --> 02:03:08,239
rtt's so um so yeah so i think there's

3253
02:03:08,239 --> 02:03:10,400
plenty of aggregation on both sides and

3254
02:03:10,400 --> 02:03:12,719
and i think um yeah i'm sure we'll be

3255
02:03:12,719 --> 02:03:15,199
able to coalesce on a single um final

3256
02:03:15,199 --> 02:03:17,598
algorithm

3257
02:03:21,520 --> 02:03:23,119
thank you for that and i want to i want

3258
02:03:23,119 --> 02:03:24,880
to uh thank

3259
02:03:24,880 --> 02:03:27,679
anil and others on on pushing in new

3260
02:03:27,679 --> 02:03:28,480
draft

3261
02:03:28,480 --> 02:03:30,719
and i will also say that if you don't

3262
02:03:30,719 --> 02:03:32,159
i'm going to start requiring you to have

3263
02:03:32,159 --> 02:03:33,520
all of your discussions on the mailing

3264
02:03:33,520 --> 02:03:35,840
list so that somebody else can copy them

3265
02:03:35,840 --> 02:03:38,560
and turn it into a draft

3266
02:03:38,560 --> 02:03:41,119
but thank you for for for

3267
02:03:41,119 --> 02:03:43,840
all the presentations and uh thanks neil

3268
02:03:43,840 --> 02:03:45,520
ian and praveen for shortening your

3269
02:03:45,520 --> 02:03:48,079
discussions and allowing the the the

3270
02:03:48,079 --> 02:03:50,320
first timers to take some more time to

3271
02:03:50,320 --> 02:03:51,199
present

3272
02:03:51,199 --> 02:03:52,560
their stuff but i want to thank

3273
02:03:52,560 --> 02:03:54,159
everybody for being here

3274
02:03:54,159 --> 02:03:56,719
um this is a fantastic session and i

3275
02:03:56,719 --> 02:03:58,079
look forward to more discussions i've

3276
02:03:58,079 --> 02:04:00,239
just created a slack channel so use that

3277
02:04:00,239 --> 02:04:01,390
as well and

3278
02:04:01,390 --> 02:04:02,719
[Music]

3279
02:04:02,719 --> 02:04:06,520
we'll see you next time

