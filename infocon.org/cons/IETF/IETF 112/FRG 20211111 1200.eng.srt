1
00:00:42,000 --> 00:00:44,879
so i suppose we can start

2
00:00:44,879 --> 00:00:48,079
uh hello everyone this is cephergy

3
00:00:48,079 --> 00:00:50,079
uh alexis menninger of nick sullivan and

4
00:00:50,079 --> 00:00:51,199
stanislav

5
00:00:51,199 --> 00:00:52,800
the chairs

6
00:00:52,800 --> 00:00:55,600
and we'll start with our

7
00:00:55,600 --> 00:00:59,239
traditional presentation

8
00:00:59,920 --> 00:01:00,719
so

9
00:01:00,719 --> 00:01:02,719
some administrator session has been

10
00:01:02,719 --> 00:01:05,438
recorded we have a min taker thanks a

11
00:01:05,438 --> 00:01:07,600
lot to watson led

12
00:01:07,600 --> 00:01:09,920
we have a debit relay

13
00:01:09,920 --> 00:01:11,040
uh

14
00:01:11,040 --> 00:01:13,600
here are the links to the participant

15
00:01:13,600 --> 00:01:15,040
guide and

16
00:01:15,040 --> 00:01:16,880
you can report issues

17
00:01:16,880 --> 00:01:18,799
via this link

18
00:01:18,799 --> 00:01:21,200
blue sheets are automatically generated

19
00:01:21,200 --> 00:01:25,680
and the minutes are in codemd

20
00:01:25,680 --> 00:01:28,560
this is a noteworld

21
00:01:34,400 --> 00:01:39,600
c4g is a research group in the ird so

22
00:01:39,600 --> 00:01:40,640
you can

23
00:01:40,640 --> 00:01:47,399
learn more about the irkf in rfc 7418

24
00:01:49,600 --> 00:01:51,200
so

25
00:01:51,200 --> 00:01:53,360
we have the following agenda after the

26
00:01:53,360 --> 00:01:55,840
7g update will have

27
00:01:55,840 --> 00:01:57,759
two items on

28
00:01:57,759 --> 00:01:59,840
existing drafts let's space and view

29
00:01:59,840 --> 00:02:00,880
perf

30
00:02:00,880 --> 00:02:01,759
and

31
00:02:01,759 --> 00:02:03,200
three

32
00:02:03,200 --> 00:02:04,399
items

33
00:02:04,399 --> 00:02:05,759
new

34
00:02:05,759 --> 00:02:08,800
potential walking items it's verifiable

35
00:02:08,800 --> 00:02:10,959
distribute distributed aggregation

36
00:02:10,959 --> 00:02:12,720
functions

37
00:02:12,720 --> 00:02:16,640
shortcuts and k-mec spdif and private

38
00:02:16,640 --> 00:02:19,440
access tokens

39
00:02:20,239 --> 00:02:22,879
if we have some spare time we have quite

40
00:02:22,879 --> 00:02:24,560
a lot of

41
00:02:24,560 --> 00:02:25,760
time for

42
00:02:25,760 --> 00:02:27,360
any other business

43
00:02:27,360 --> 00:02:29,920
um any last minute

44
00:02:29,920 --> 00:02:32,640
agenda version

45
00:02:32,720 --> 00:02:33,840
one

46
00:02:33,840 --> 00:02:35,200
two

47
00:02:35,200 --> 00:02:36,800
three

48
00:02:36,800 --> 00:02:37,840
okay

49
00:02:37,840 --> 00:02:40,560
uh then let's discuss our current

50
00:02:40,560 --> 00:02:42,640
document status

51
00:02:42,640 --> 00:02:46,400
we have a new rfc that's are gonna do

52
00:02:46,400 --> 00:02:48,080
finally

53
00:02:48,080 --> 00:02:51,080
uh

54
00:02:51,120 --> 00:02:52,160
we

55
00:02:52,160 --> 00:02:53,519
um

56
00:02:53,519 --> 00:02:55,920
we walked down there going to for

57
00:02:55,920 --> 00:02:57,519
four years i think

58
00:02:57,519 --> 00:02:59,360
uh now it's rfc

59
00:02:59,360 --> 00:03:01,920
9106

60
00:03:01,920 --> 00:03:03,599
congratulations

61
00:03:03,599 --> 00:03:06,959
we have two rfcs to draft sorry

62
00:03:06,959 --> 00:03:11,680
in isg review and in irsg review

63
00:03:11,680 --> 00:03:15,760
those one are hpk and spec 2.

64
00:03:15,760 --> 00:03:17,120
hpk

65
00:03:17,120 --> 00:03:22,879
is in sg review and spec 2 is in

66
00:03:22,879 --> 00:03:25,679
irs gpu

67
00:03:25,920 --> 00:03:26,959
we have

68
00:03:26,959 --> 00:03:30,400
a lot of progress with hashtag

69
00:03:30,400 --> 00:03:32,799
you can see that it is waiting for

70
00:03:32,799 --> 00:03:36,159
document shepard but actually uh until

71
00:03:36,159 --> 00:03:38,319
earlier today uh

72
00:03:38,319 --> 00:03:40,799
the shepherd's review was uploaded to

73
00:03:40,799 --> 00:03:43,120
the data tracker so

74
00:03:43,120 --> 00:03:44,400
now it's

75
00:03:44,400 --> 00:03:47,920
it will be waiting for ifts chair

76
00:03:47,920 --> 00:03:51,120
and we have a lot of changes in other

77
00:03:51,120 --> 00:03:53,040
drafts

78
00:03:53,040 --> 00:03:55,439
we have an update in

79
00:03:55,439 --> 00:03:58,400
for vprf and

80
00:03:58,400 --> 00:04:00,959
we'll have a status update from chris

81
00:04:00,959 --> 00:04:03,439
wood uh later today

82
00:04:03,439 --> 00:04:06,400
and we have peripheral curves updated

83
00:04:06,400 --> 00:04:07,519
and

84
00:04:07,519 --> 00:04:09,920
there are some changes in the

85
00:04:09,920 --> 00:04:11,680
author team

86
00:04:11,680 --> 00:04:14,879
and we have updates on both bank drafts

87
00:04:14,879 --> 00:04:17,918
on our opec in nc pace

88
00:04:17,918 --> 00:04:20,720
and again we'll have an update on cpace

89
00:04:20,720 --> 00:04:22,079
from beyond us

90
00:04:22,079 --> 00:04:23,520
later today

91
00:04:23,520 --> 00:04:26,000
we have updates and frost and our

92
00:04:26,000 --> 00:04:27,600
recipient signatures

93
00:04:27,600 --> 00:04:28,880
and

94
00:04:28,880 --> 00:04:32,560
we have two drafts in a recessional plus

95
00:04:32,560 --> 00:04:34,320
call or

96
00:04:34,320 --> 00:04:37,280
collecting some

97
00:04:37,280 --> 00:04:40,960
feedback after the group called

98
00:04:40,960 --> 00:04:44,880
that's about vrf and kangaroo 12.

99
00:04:44,880 --> 00:04:48,479
um we have dls signature expired

100
00:04:48,479 --> 00:04:50,320
and

101
00:04:50,320 --> 00:04:51,600
we have

102
00:04:51,600 --> 00:04:54,880
one draft that was unchanged that is

103
00:04:54,880 --> 00:04:58,240
that is 80 limits

104
00:04:58,880 --> 00:05:01,360
so a lot of work

105
00:05:01,360 --> 00:05:04,160
is to be done and a lot of news since

106
00:05:04,160 --> 00:05:07,160
july

107
00:05:10,720 --> 00:05:14,560
we have crypto panel in

108
00:05:14,560 --> 00:05:17,520
which helps the chairs to review the

109
00:05:17,520 --> 00:05:21,039
drafts and helps

110
00:05:22,080 --> 00:05:25,280
ic and potentially is ready to help any

111
00:05:25,280 --> 00:05:27,600
other working groups

112
00:05:27,600 --> 00:05:28,400
so

113
00:05:28,400 --> 00:05:30,800
it can be used to review documents

114
00:05:30,800 --> 00:05:33,280
coming to c4g

115
00:05:33,280 --> 00:05:35,199
to security area

116
00:05:35,199 --> 00:05:36,080
from

117
00:05:36,080 --> 00:05:38,720
iec possible possibly

118
00:05:38,720 --> 00:05:39,919
uh

119
00:05:39,919 --> 00:05:42,400
we ask for reviews from cryptography

120
00:05:42,400 --> 00:05:45,199
panel members before research group last

121
00:05:45,199 --> 00:05:50,479
calls for several documents and for most

122
00:05:50,479 --> 00:05:52,960
difficult documents we

123
00:05:52,960 --> 00:05:55,360
ask also some

124
00:05:55,360 --> 00:05:56,880
reviews

125
00:05:56,880 --> 00:05:59,440
in the process of document development

126
00:05:59,440 --> 00:06:00,960
for example

127
00:06:00,960 --> 00:06:03,600
we've asked the panel

128
00:06:03,600 --> 00:06:06,800
for a year of opaque because there was

129
00:06:06,800 --> 00:06:10,319
some discussion about mechanisms

130
00:06:10,319 --> 00:06:13,759
used inside the protocol of bank

131
00:06:13,759 --> 00:06:18,080
the current members of cryptery panel

132
00:06:18,080 --> 00:06:20,880
serve until december

133
00:06:20,880 --> 00:06:23,199
2021

134
00:06:23,199 --> 00:06:24,000
so

135
00:06:24,000 --> 00:06:25,600
it's

136
00:06:25,600 --> 00:06:28,400
about two months left

137
00:06:28,400 --> 00:06:33,560
and we'll have a rotation of members

138
00:06:34,160 --> 00:06:35,360
we

139
00:06:35,360 --> 00:06:38,319
would be happy to work with a lot of as

140
00:06:38,319 --> 00:06:39,280
a

141
00:06:39,280 --> 00:06:41,280
current experts in panel because we are

142
00:06:41,280 --> 00:06:45,599
sure that uh the current uh

143
00:06:46,000 --> 00:06:49,360
panel members work really

144
00:06:49,360 --> 00:06:51,120
excellent and we have a lot of great

145
00:06:51,120 --> 00:06:52,720
reviews

146
00:06:52,720 --> 00:06:53,599
but

147
00:06:53,599 --> 00:06:54,960
also we

148
00:06:54,960 --> 00:06:58,319
will call for nominations to join

149
00:06:58,319 --> 00:07:01,680
the victory panel i'll send a message to

150
00:07:01,680 --> 00:07:04,560
the cfg maybe at least

151
00:07:04,560 --> 00:07:07,280
in a week or two

152
00:07:07,280 --> 00:07:08,240
so

153
00:07:08,240 --> 00:07:09,759
please

154
00:07:09,759 --> 00:07:11,919
eliminate yourself if you

155
00:07:11,919 --> 00:07:13,120
want to

156
00:07:13,120 --> 00:07:16,840
work in the panel

157
00:07:17,919 --> 00:07:18,880
so

158
00:07:18,880 --> 00:07:21,440
any questions to the chairs before we

159
00:07:21,440 --> 00:07:23,039
start with

160
00:07:23,039 --> 00:07:26,039
presentations

161
00:07:31,599 --> 00:07:35,120
okay then let's start with our first

162
00:07:35,120 --> 00:07:36,560
presentation

163
00:07:36,560 --> 00:07:37,440
uh

164
00:07:37,440 --> 00:07:39,599
this will be from chris pattern

165
00:07:39,599 --> 00:07:41,759
uh verifiable distributed aggregation

166
00:07:41,759 --> 00:07:43,360
functions

167
00:07:43,360 --> 00:07:46,639
please grace i

168
00:07:46,720 --> 00:07:49,520
share the slides

169
00:07:49,599 --> 00:07:51,919
yep i uh requested to share my slides

170
00:07:51,919 --> 00:07:53,840
i'm waiting for

171
00:07:53,840 --> 00:07:56,239
just a

172
00:07:56,840 --> 00:07:59,120
moment i hope it

173
00:07:59,120 --> 00:08:01,919
will appear now yes you can see them yep

174
00:08:01,919 --> 00:08:03,440
got it

175
00:08:03,440 --> 00:08:05,199
everyone can see me everyone can hear me

176
00:08:05,199 --> 00:08:07,039
well

177
00:08:07,039 --> 00:08:10,400
all right um okay

178
00:08:10,400 --> 00:08:14,240
um okay so um

179
00:08:14,240 --> 00:08:16,560
yeah so this is a this is a new document

180
00:08:16,560 --> 00:08:19,520
um uh this it's it's very very early

181
00:08:19,520 --> 00:08:21,039
stages right now

182
00:08:21,039 --> 00:08:23,759
um i we're not asking right now for the

183
00:08:23,759 --> 00:08:26,639
research group to consider adoption um

184
00:08:26,639 --> 00:08:28,879
the purpose of this presentation is is

185
00:08:28,879 --> 00:08:30,400
mostly to

186
00:08:30,400 --> 00:08:33,760
um introduce everyone to this concept

187
00:08:33,760 --> 00:08:35,120
and um

188
00:08:35,120 --> 00:08:37,599
and solicit feedback on on on the

189
00:08:37,599 --> 00:08:40,000
document and and it helps shaping it and

190
00:08:40,000 --> 00:08:41,919
putting it in the right direction

191
00:08:41,919 --> 00:08:43,200
um

192
00:08:43,200 --> 00:08:46,320
so this dovetails with uh the priv buff

193
00:08:46,320 --> 00:08:48,399
yesterday and i'm not gonna assume

194
00:08:48,399 --> 00:08:51,360
anyone here has attended that buff and

195
00:08:51,360 --> 00:08:53,680
i'm not gonna go into much more detail

196
00:08:53,680 --> 00:08:56,240
than richard barnes did yesterday

197
00:08:56,240 --> 00:08:57,920
as i said the intention here is to kind

198
00:08:57,920 --> 00:09:00,880
of um introduce everyone to this idea so

199
00:09:00,880 --> 00:09:02,880
what is a verifiable distributed

200
00:09:02,880 --> 00:09:06,720
aggregation function or vdaf or vdf if

201
00:09:06,720 --> 00:09:08,959
you like

202
00:09:08,959 --> 00:09:11,680
so the the the purpose of the buff

203
00:09:11,680 --> 00:09:14,800
yesterday um was

204
00:09:14,800 --> 00:09:16,880
to form a working group that will work

205
00:09:16,880 --> 00:09:19,279
on standardizing protocols for privacy

206
00:09:19,279 --> 00:09:21,680
preserving aggregation of user

207
00:09:21,680 --> 00:09:22,880
measurements

208
00:09:22,880 --> 00:09:26,160
so we're taking a bunch of today uh

209
00:09:26,160 --> 00:09:27,839
service providers are taking a bunch of

210
00:09:27,839 --> 00:09:30,080
measurements of users for various

211
00:09:30,080 --> 00:09:31,360
purposes

212
00:09:31,360 --> 00:09:34,800
and typically very often they're often

213
00:09:34,800 --> 00:09:38,240
they're interested just in the the um

214
00:09:38,240 --> 00:09:40,320
the aggregate and not the individual

215
00:09:40,320 --> 00:09:42,160
measurements themselves

216
00:09:42,160 --> 00:09:42,880
so

217
00:09:42,880 --> 00:09:45,600
what we're after is a way of computing

218
00:09:45,600 --> 00:09:48,240
these aggregates without actually having

219
00:09:48,240 --> 00:09:51,360
to see individual inputs in the clear

220
00:09:51,360 --> 00:09:53,600
so the charters right now envisions

221
00:09:53,600 --> 00:09:55,519
doing this by distributing the

222
00:09:55,519 --> 00:09:58,800
computation among multiple aggregation

223
00:09:58,800 --> 00:09:59,920
servers

224
00:09:59,920 --> 00:10:02,640
so um and that way the computation can

225
00:10:02,640 --> 00:10:04,800
be carried out basically on secret

226
00:10:04,800 --> 00:10:07,040
shared data so no one actually sees any

227
00:10:07,040 --> 00:10:08,560
input in the clear

228
00:10:08,560 --> 00:10:10,079
um and

229
00:10:10,079 --> 00:10:12,399
uh one one thing we have to make sure we

230
00:10:12,399 --> 00:10:14,959
do is because we're working on see with

231
00:10:14,959 --> 00:10:17,680
secret shared data we have to make sure

232
00:10:17,680 --> 00:10:19,040
that um

233
00:10:19,040 --> 00:10:20,880
inputs are valid basically we have to

234
00:10:20,880 --> 00:10:25,200
have a way of of of of of um

235
00:10:25,200 --> 00:10:26,079
uh

236
00:10:26,079 --> 00:10:28,000
of checking for

237
00:10:28,000 --> 00:10:30,320
invalid inputs submitted by clients so

238
00:10:30,320 --> 00:10:31,440
there's gonna be some amount of

239
00:10:31,440 --> 00:10:33,839
coordination that's required among the

240
00:10:33,839 --> 00:10:36,160
aggregation servers to ensure

241
00:10:36,160 --> 00:10:37,600
correctness of the computation so what

242
00:10:37,600 --> 00:10:39,040
we're talking about here is basically

243
00:10:39,040 --> 00:10:42,560
multi-party computation um but a very uh

244
00:10:42,560 --> 00:10:46,959
very specific um kind of shape of npc um

245
00:10:46,959 --> 00:10:49,760
not general purpose npc

246
00:10:49,760 --> 00:10:51,680
and there's a lots of uh

247
00:10:51,680 --> 00:10:53,279
recent work in the literature about

248
00:10:53,279 --> 00:10:54,959
literature about this so folks might

249
00:10:54,959 --> 00:10:56,880
have heard of prio

250
00:10:56,880 --> 00:10:59,360
prio is a paper from henry corgan gibbs

251
00:10:59,360 --> 00:11:02,880
and dan bonnay from 2017

252
00:11:02,880 --> 00:11:05,120
and it's basically set out to solve this

253
00:11:05,120 --> 00:11:06,800
exact problem and this is what really

254
00:11:06,800 --> 00:11:09,200
started our interest in um

255
00:11:09,200 --> 00:11:11,360
in uh in in this with you know this is a

256
00:11:11,360 --> 00:11:13,680
solution to a problem that we have let's

257
00:11:13,680 --> 00:11:16,020
go and standardize it um

258
00:11:16,020 --> 00:11:17,279
[Music]

259
00:11:17,279 --> 00:11:20,000
so what one finds though there's there's

260
00:11:20,000 --> 00:11:22,320
a lot of papers about this and

261
00:11:22,320 --> 00:11:24,880
there's one thing that's becomes clear

262
00:11:24,880 --> 00:11:26,880
is that there's no one-size-fits-all

263
00:11:26,880 --> 00:11:29,519
solution so there's no one protocol

264
00:11:29,519 --> 00:11:31,120
in the literature that's going to solve

265
00:11:31,120 --> 00:11:33,839
every aggregation

266
00:11:33,839 --> 00:11:35,839
compute every aggregation function one

267
00:11:35,839 --> 00:11:38,240
wants to compute now creo happens to

268
00:11:38,240 --> 00:11:40,959
solve uh like a large class of problems

269
00:11:40,959 --> 00:11:43,600
but it doesn't solve every problem

270
00:11:43,600 --> 00:11:46,720
um and another thing uh to when when we

271
00:11:46,720 --> 00:11:49,600
look at the literature what we see is

272
00:11:49,600 --> 00:11:50,800
kind of a

273
00:11:50,800 --> 00:11:53,360
wide variety of security and operational

274
00:11:53,360 --> 00:11:55,120
consideration so

275
00:11:55,120 --> 00:11:56,480
um

276
00:11:56,480 --> 00:11:58,240
starting with operational consideration

277
00:11:58,240 --> 00:12:00,320
so how do client does the client

278
00:12:00,320 --> 00:12:02,399
interact with the servers how do the

279
00:12:02,399 --> 00:12:04,240
servers interact with one another what

280
00:12:04,240 --> 00:12:06,560
is the kind of communication pattern

281
00:12:06,560 --> 00:12:08,800
um and then you know and then from just

282
00:12:08,800 --> 00:12:10,880
a just a security perspective like what

283
00:12:10,880 --> 00:12:13,440
did it what what is it that we're after

284
00:12:13,440 --> 00:12:15,680
so for a multi-party computation it's

285
00:12:15,680 --> 00:12:18,800
pretty well defined but there are

286
00:12:18,800 --> 00:12:21,680
rough edges in many in many of these in

287
00:12:21,680 --> 00:12:23,440
paper so there's there's a certain

288
00:12:23,440 --> 00:12:25,360
amount of leakage sometimes

289
00:12:25,360 --> 00:12:27,200
so what we end up with is kind of a lack

290
00:12:27,200 --> 00:12:30,240
of consistent abstraction boundary for

291
00:12:30,240 --> 00:12:33,360
standardization efforts like priv to to

292
00:12:33,360 --> 00:12:35,600
build on

293
00:12:35,600 --> 00:12:36,639
um

294
00:12:36,639 --> 00:12:38,720
so what we want to do in this document

295
00:12:38,720 --> 00:12:40,399
is provide this abstraction boundary

296
00:12:40,399 --> 00:12:42,959
that's kind of the main purpose so

297
00:12:42,959 --> 00:12:46,720
we our hope is to to um to uh

298
00:12:46,720 --> 00:12:49,519
to address directly the operational and

299
00:12:49,519 --> 00:12:51,200
security considerations that have come

300
00:12:51,200 --> 00:12:53,760
up so far in real world deployments and

301
00:12:53,760 --> 00:12:55,519
uh a couple of these were talked about

302
00:12:55,519 --> 00:12:58,079
in the buff yesterday um

303
00:12:58,079 --> 00:13:00,560
and another thing we want to do is

304
00:13:00,560 --> 00:13:01,680
provide

305
00:13:01,680 --> 00:13:04,240
um basically a design target for crop

306
00:13:04,240 --> 00:13:06,000
cryptographers to go and build new

307
00:13:06,000 --> 00:13:07,440
schemes so they don't have to think

308
00:13:07,440 --> 00:13:09,360
about what you know what is what is the

309
00:13:09,360 --> 00:13:11,200
shape of this protocol supposed to be

310
00:13:11,200 --> 00:13:13,440
i'm given the shape and i try to find a

311
00:13:13,440 --> 00:13:15,519
solution that uh that works in this

312
00:13:15,519 --> 00:13:16,560
framework

313
00:13:16,560 --> 00:13:18,160
um and at the same time we want to

314
00:13:18,160 --> 00:13:20,959
standardize a few video vdifs from the

315
00:13:20,959 --> 00:13:22,320
literature

316
00:13:22,320 --> 00:13:24,160
in particular those that we've looked at

317
00:13:24,160 --> 00:13:27,439
in the priv buff so far

318
00:13:27,600 --> 00:13:30,800
so what is a vdaf um so aggregation

319
00:13:30,800 --> 00:13:32,959
function basically means we have the

320
00:13:32,959 --> 00:13:34,480
sequence of

321
00:13:34,480 --> 00:13:36,959
inputs and uh we want to compute some

322
00:13:36,959 --> 00:13:38,880
function over over those inputs the

323
00:13:38,880 --> 00:13:41,040
order of the inputs shouldn't matter

324
00:13:41,040 --> 00:13:43,600
um and then there's also this thing we

325
00:13:43,600 --> 00:13:46,399
call an aggregation parameter um and so

326
00:13:46,399 --> 00:13:48,560
the function the aggregation function

327
00:13:48,560 --> 00:13:51,360
takes the the measurements the

328
00:13:51,360 --> 00:13:53,199
aggregation parameter and outputs the

329
00:13:53,199 --> 00:13:54,720
aggregate result

330
00:13:54,720 --> 00:13:56,160
um for example this could be the

331
00:13:56,160 --> 00:13:57,920
arithmetic mean this can be some

332
00:13:57,920 --> 00:14:00,480
estimation of the distribution of inputs

333
00:14:00,480 --> 00:14:03,760
or um or you know

334
00:14:03,760 --> 00:14:05,120
the the function can be a little bit

335
00:14:05,120 --> 00:14:06,959
more sophisticated so like let's say we

336
00:14:06,959 --> 00:14:10,800
want to count p as a string m one to n

337
00:14:10,800 --> 00:14:12,639
are strings and we want to count the

338
00:14:12,639 --> 00:14:17,639
number of times that p occurs in the set

339
00:14:17,680 --> 00:14:21,279
so the the shape the the overall shape

340
00:14:21,279 --> 00:14:23,760
that we envision for this is uh is the

341
00:14:23,760 --> 00:14:25,199
following

342
00:14:25,199 --> 00:14:27,760
we we we divide the processing of inputs

343
00:14:27,760 --> 00:14:30,000
into kind of discrete steps that are

344
00:14:30,000 --> 00:14:31,360
executed

345
00:14:31,360 --> 00:14:34,000
by all the parties in the protocol

346
00:14:34,000 --> 00:14:36,320
and it begins with the clients mapping

347
00:14:36,320 --> 00:14:38,399
their measurement to a sequence of input

348
00:14:38,399 --> 00:14:40,399
shares um

349
00:14:40,399 --> 00:14:42,880
we call this the sharding step

350
00:14:42,880 --> 00:14:44,480
and then um

351
00:14:44,480 --> 00:14:46,240
and then imagine there's this function

352
00:14:46,240 --> 00:14:48,800
that takes these we call this the uh

353
00:14:48,800 --> 00:14:51,040
preparation function uh for lack of a

354
00:14:51,040 --> 00:14:52,160
better term

355
00:14:52,160 --> 00:14:53,519
um

356
00:14:53,519 --> 00:14:55,839
that takes the aggregation parameter the

357
00:14:55,839 --> 00:14:59,199
uh the in one an input share and outputs

358
00:14:59,199 --> 00:15:00,800
an output share and this is a function

359
00:15:00,800 --> 00:15:03,360
that's run locally by the aggregator

360
00:15:03,360 --> 00:15:05,120
and then in the next step the aggregator

361
00:15:05,120 --> 00:15:07,760
takes all of its output shares uh

362
00:15:07,760 --> 00:15:10,560
combines them in some manner and uh

363
00:15:10,560 --> 00:15:12,800
outputs what we call an aggregate share

364
00:15:12,800 --> 00:15:14,720
and then um there's

365
00:15:14,720 --> 00:15:16,480
another server called the collector who

366
00:15:16,480 --> 00:15:18,480
eventually gets all of these aggregate

367
00:15:18,480 --> 00:15:21,519
shares and it can uh combine them to get

368
00:15:21,519 --> 00:15:24,160
the final aggregate results

369
00:15:24,160 --> 00:15:27,440
so imagine so the reason that this works

370
00:15:27,440 --> 00:15:30,079
is imagine you have the uh the output

371
00:15:30,079 --> 00:15:31,120
shares

372
00:15:31,120 --> 00:15:33,440
or have some algebra have some algebraic

373
00:15:33,440 --> 00:15:35,360
structure they might be in a in a ring

374
00:15:35,360 --> 00:15:38,639
or a field or just a group and um

375
00:15:38,639 --> 00:15:40,800
we can compute the aggregate results

376
00:15:40,800 --> 00:15:43,040
just by adding things together so we can

377
00:15:43,040 --> 00:15:45,120
find the output shares by adding them

378
00:15:45,120 --> 00:15:47,600
and then we combine the uh aggregate

379
00:15:47,600 --> 00:15:49,920
shares by adding them

380
00:15:49,920 --> 00:15:52,399
so um yeah so this is a mat this is this

381
00:15:52,399 --> 00:15:55,040
is how we get privacy so what as you can

382
00:15:55,040 --> 00:15:57,920
imagine here when no matter what any of

383
00:15:57,920 --> 00:15:59,839
the servers do in this protocol they

384
00:15:59,839 --> 00:16:00,959
never see

385
00:16:00,959 --> 00:16:04,240
uh out output shares in the clear or uh

386
00:16:04,240 --> 00:16:06,240
or learn anything about the measurements

387
00:16:06,240 --> 00:16:08,560
as long as um

388
00:16:08,560 --> 00:16:10,320
one of the aggregators executes the

389
00:16:10,320 --> 00:16:11,920
protocol honestly and that means

390
00:16:11,920 --> 00:16:14,000
basically i don't share any of the

391
00:16:14,000 --> 00:16:16,320
information any of the um

392
00:16:16,320 --> 00:16:18,240
my uh my output shares with the other

393
00:16:18,240 --> 00:16:20,399
servers

394
00:16:20,399 --> 00:16:24,160
so what can go wrong here is you have

395
00:16:24,160 --> 00:16:27,120
a very sparse input share space

396
00:16:27,120 --> 00:16:29,600
so the client is uh

397
00:16:29,600 --> 00:16:32,000
client maps its measurements to

398
00:16:32,000 --> 00:16:34,079
a sequence of input shares

399
00:16:34,079 --> 00:16:36,720
and um you know if you're doing secret

400
00:16:36,720 --> 00:16:39,839
sharing over some finite fields it's uh

401
00:16:39,839 --> 00:16:41,600
it's pretty straightforward for a client

402
00:16:41,600 --> 00:16:45,040
to just pick random junk um and when the

403
00:16:45,040 --> 00:16:48,000
aggregators process that junk and output

404
00:16:48,000 --> 00:16:50,320
aggregate shares to the collector um the

405
00:16:50,320 --> 00:16:52,320
collectors nick going to combine them to

406
00:16:52,320 --> 00:16:54,560
get just junk um

407
00:16:54,560 --> 00:16:55,600
so

408
00:16:55,600 --> 00:16:58,160
we have to avoid this problem um

409
00:16:58,160 --> 00:17:01,360
and uh systems like prior this is kind

410
00:17:01,360 --> 00:17:03,680
of a first class consideration for them

411
00:17:03,680 --> 00:17:05,439
um and so we're going to try to bake

412
00:17:05,439 --> 00:17:07,119
that into the protocol we want to make

413
00:17:07,119 --> 00:17:09,439
that into the protocol somehow

414
00:17:09,439 --> 00:17:10,959
and um

415
00:17:10,959 --> 00:17:12,640
you know in general what we're going to

416
00:17:12,640 --> 00:17:16,079
need to do is is provide some way for

417
00:17:16,079 --> 00:17:18,319
the aggregators to interact with one

418
00:17:18,319 --> 00:17:20,160
another so what we're going to do is

419
00:17:20,160 --> 00:17:22,079
replace this local

420
00:17:22,079 --> 00:17:25,119
preparation function preparation step

421
00:17:25,119 --> 00:17:28,079
into a multi-party computation so that

422
00:17:28,079 --> 00:17:29,600
takes the

423
00:17:29,600 --> 00:17:31,919
aggregation parameter the input shares

424
00:17:31,919 --> 00:17:34,640
and maps it to the output shares and the

425
00:17:34,640 --> 00:17:37,280
idea here is that

426
00:17:37,280 --> 00:17:40,559
no matter what a malicious aggregator

427
00:17:40,559 --> 00:17:43,840
does an active attacker does

428
00:17:43,840 --> 00:17:45,679
as long as the other aggregator is

429
00:17:45,679 --> 00:17:48,640
honest it learns nothing about um

430
00:17:48,640 --> 00:17:52,000
it it learns nothing useful about

431
00:17:52,000 --> 00:17:53,919
the output shares

432
00:17:53,919 --> 00:17:56,640
that it would learn otherwise

433
00:17:56,640 --> 00:17:58,400
and i want to emphasize again this isn't

434
00:17:58,400 --> 00:18:01,200
meant to be general purpose npc often

435
00:18:01,200 --> 00:18:02,640
the solution here is going to be

436
00:18:02,640 --> 00:18:05,760
tailored to the application

437
00:18:05,760 --> 00:18:08,799
so um we have we've been looking at two

438
00:18:08,799 --> 00:18:10,480
uh protocols from the

439
00:18:10,480 --> 00:18:12,960
two uh basic schemes from the literature

440
00:18:12,960 --> 00:18:14,640
that have this shape

441
00:18:14,640 --> 00:18:17,280
uh one we're calling prio three this is

442
00:18:17,280 --> 00:18:20,080
based on uh so this is this is there's a

443
00:18:20,080 --> 00:18:22,000
there's the original prio paper from

444
00:18:22,000 --> 00:18:25,760
2017 and then uh many some authors plus

445
00:18:25,760 --> 00:18:27,840
some other uh the original authors and

446
00:18:27,840 --> 00:18:29,679
plus some uh new people

447
00:18:29,679 --> 00:18:31,600
worked on this really really cool paper

448
00:18:31,600 --> 00:18:33,039
called distributed serial knowledge

449
00:18:33,039 --> 00:18:35,280
proofs uh well okay i forget what the

450
00:18:35,280 --> 00:18:36,799
name of the paper but i call it zero

451
00:18:36,799 --> 00:18:38,320
knowledge proof distributed zero

452
00:18:38,320 --> 00:18:40,720
knowledge proof systems um

453
00:18:40,720 --> 00:18:43,120
crypto 2019 i have reference at the end

454
00:18:43,120 --> 00:18:45,120
um so

455
00:18:45,120 --> 00:18:47,600
yeah in the use case here is we have we

456
00:18:47,600 --> 00:18:50,480
we're encoding measurements as uh as

457
00:18:50,480 --> 00:18:53,360
vectors of elements of some finite field

458
00:18:53,360 --> 00:18:55,600
and so the input shares are just

459
00:18:55,600 --> 00:18:58,080
additive shares over over that finite

460
00:18:58,080 --> 00:19:00,000
field and the aggregation function is

461
00:19:00,000 --> 00:19:03,760
any any function that can be defined as

462
00:19:03,760 --> 00:19:07,039
ad as just adding up these

463
00:19:07,039 --> 00:19:08,840
these encoded

464
00:19:08,840 --> 00:19:12,080
vectors and um what does what the what

465
00:19:12,080 --> 00:19:14,160
the uh distribu the uh

466
00:19:14,160 --> 00:19:15,120
uh

467
00:19:15,120 --> 00:19:18,160
the prepare the distributed preparer npc

468
00:19:18,160 --> 00:19:19,760
thing is going to do is just check for

469
00:19:19,760 --> 00:19:23,200
validity where validity is defined by an

470
00:19:23,200 --> 00:19:25,520
arithmetic circuit um that's evaluated

471
00:19:25,520 --> 00:19:26,799
over the input

472
00:19:26,799 --> 00:19:28,640
um i am running low on time and i want

473
00:19:28,640 --> 00:19:30,640
to save time for questions so i'm going

474
00:19:30,640 --> 00:19:33,039
to skip hits for now um and i'll just

475
00:19:33,039 --> 00:19:36,000
say that we um have we're working on

476
00:19:36,000 --> 00:19:40,080
some implementations um we have um

477
00:19:40,080 --> 00:19:41,760
the the two main schemes we were

478
00:19:41,760 --> 00:19:44,400
interested in implementing um

479
00:19:44,400 --> 00:19:46,640
they you know they they're in various

480
00:19:46,640 --> 00:19:49,200
states but we're very early on here but

481
00:19:49,200 --> 00:19:52,320
i can report some you know basic basic

482
00:19:52,320 --> 00:19:55,760
metrics here um the very the for preo3

483
00:19:55,760 --> 00:19:58,240
the the computationally expensive part

484
00:19:58,240 --> 00:20:01,520
is uh uh proof generation basically this

485
00:20:01,520 --> 00:20:05,039
sharding step um and um for

486
00:20:05,039 --> 00:20:07,360
for uh aggregate functions that we're

487
00:20:07,360 --> 00:20:09,520
interested in um this is pretty

488
00:20:09,520 --> 00:20:11,679
performance so the so the main thing i

489
00:20:11,679 --> 00:20:13,440
think is um

490
00:20:13,440 --> 00:20:14,320
uh

491
00:20:14,320 --> 00:20:17,200
uh communication costs but we can we can

492
00:20:17,200 --> 00:20:19,120
so these numbers are uh kind of

493
00:20:19,120 --> 00:20:21,120
preliminary we can drive these down more

494
00:20:21,120 --> 00:20:24,159
with with optimizations um

495
00:20:24,159 --> 00:20:26,080
and and i want to emphasize that this is

496
00:20:26,080 --> 00:20:30,000
being built on lots of prior work um

497
00:20:30,000 --> 00:20:31,679
and uh

498
00:20:31,679 --> 00:20:34,000
uh and i won't say much more about that

499
00:20:34,000 --> 00:20:36,400
because i'm i i want to save time for

500
00:20:36,400 --> 00:20:40,159
questions so um i will leave it here um

501
00:20:40,159 --> 00:20:43,520
and take any questions people have

502
00:20:46,080 --> 00:20:49,120
thank you any questions

503
00:20:49,120 --> 00:20:52,959
yes go ahead watson watson

504
00:20:53,840 --> 00:20:57,039
watson lad cloudflare um i i'm not sure

505
00:20:57,039 --> 00:20:59,120
i understand with your

506
00:20:59,120 --> 00:21:01,200
presentation what you're asking you're

507
00:21:01,200 --> 00:21:02,880
saying you don't necessarily want

508
00:21:02,880 --> 00:21:05,520
adoption is that just now or

509
00:21:05,520 --> 00:21:07,440
in in the future this might come back

510
00:21:07,440 --> 00:21:09,840
you might ask for adoption later

511
00:21:09,840 --> 00:21:11,280
yeah so i think we're going to come back

512
00:21:11,280 --> 00:21:13,039
and ask for adoption later we want to

513
00:21:13,039 --> 00:21:15,280
wait until the working group is formed

514
00:21:15,280 --> 00:21:18,960
and we have a for the for uh the priv

515
00:21:18,960 --> 00:21:21,440
the priv buff yesterday is the the hope

516
00:21:21,440 --> 00:21:23,679
is to lead us to form a working group

517
00:21:23,679 --> 00:21:25,200
and we want to wait until that's

518
00:21:25,200 --> 00:21:27,679
chartered so we have a pretty clear path

519
00:21:27,679 --> 00:21:28,799
from

520
00:21:28,799 --> 00:21:31,440
the protocol that's being implemented

521
00:21:31,440 --> 00:21:34,080
designed there and um

522
00:21:34,080 --> 00:21:36,159
and the thing that we're using here

523
00:21:36,159 --> 00:21:38,640
basically

524
00:21:42,400 --> 00:21:43,840
but i would love it if people read the

525
00:21:43,840 --> 00:21:45,840
document and and and told me what they

526
00:21:45,840 --> 00:21:47,360
think there's like you know there's a

527
00:21:47,360 --> 00:21:48,640
lot of

528
00:21:48,640 --> 00:21:49,600
um

529
00:21:49,600 --> 00:21:51,039
there's a lot of things that potentially

530
00:21:51,039 --> 00:21:52,640
fit in this framework and i would love

531
00:21:52,640 --> 00:21:56,159
to i would love to hear about um new

532
00:21:56,159 --> 00:21:58,799
constructions that potentially don't fit

533
00:21:58,799 --> 00:22:02,559
and uh and consider whether we should

534
00:22:02,559 --> 00:22:05,200
change the syntax

535
00:22:05,200 --> 00:22:08,400
to to account for them

536
00:22:11,039 --> 00:22:15,440
thank you any other questions comments

537
00:22:20,400 --> 00:22:23,120
okay then thanks a lot chris when you

538
00:22:23,120 --> 00:22:24,080
want

539
00:22:24,080 --> 00:22:27,600
some document to be adopted please

540
00:22:27,600 --> 00:22:29,840
ask in the list or

541
00:22:29,840 --> 00:22:31,679
during this

542
00:22:31,679 --> 00:22:33,039
meeting

543
00:22:33,039 --> 00:22:35,760
thanks hello thank you

544
00:22:36,799 --> 00:22:37,840
uh

545
00:22:37,840 --> 00:22:40,640
please be honest

546
00:22:40,640 --> 00:22:43,440
the update of the

547
00:22:43,440 --> 00:22:47,080
sea base draft

548
00:22:55,919 --> 00:22:58,559
please start

549
00:23:02,799 --> 00:23:05,200
we can hear you please

550
00:23:05,200 --> 00:23:08,840
turn on your mic

551
00:23:20,640 --> 00:23:24,799
bjorn we still don't hear you

552
00:23:24,799 --> 00:23:26,080
do you hear me now

553
00:23:26,080 --> 00:23:29,679
yes no i hear you so again uh

554
00:23:29,679 --> 00:23:32,159
i'd like to present an update regarding

555
00:23:32,159 --> 00:23:33,760
the sea pace draft

556
00:23:33,760 --> 00:23:35,280
so first i'd be

557
00:23:35,280 --> 00:23:37,840
speaking about the updates regarding the

558
00:23:37,840 --> 00:23:39,679
security analysis papers and then i'll

559
00:23:39,679 --> 00:23:42,480
be talking about the major rewrite of

560
00:23:42,480 --> 00:23:44,880
the internet draft that we are currently

561
00:23:44,880 --> 00:23:47,440
working on

562
00:23:48,000 --> 00:23:49,360
so

563
00:23:49,360 --> 00:23:51,200
regarding the security analysis there

564
00:23:51,200 --> 00:23:54,559
are two major updates first we have uh

565
00:23:54,559 --> 00:23:55,840
uploaded a

566
00:23:55,840 --> 00:23:58,880
new revision of our security analysis

567
00:23:58,880 --> 00:24:00,320
paper which is

568
00:24:00,320 --> 00:24:02,840
worked by julia

569
00:24:02,840 --> 00:24:05,120
michelanny with the proofs regarding

570
00:24:05,120 --> 00:24:07,679
cpace and then there's a second paper by

571
00:24:07,679 --> 00:24:09,760
edward eaton and douglas de villa which

572
00:24:09,760 --> 00:24:11,440
have been working on

573
00:24:11,440 --> 00:24:16,080
the quantum annoying property of cpace

574
00:24:16,080 --> 00:24:16,799
so

575
00:24:16,799 --> 00:24:18,080
regarding this quantum annoying

576
00:24:18,080 --> 00:24:20,400
properties it has been conjectured that

577
00:24:20,400 --> 00:24:21,440
the

578
00:24:21,440 --> 00:24:24,080
attacker which is able to calculate

579
00:24:24,080 --> 00:24:26,080
calculate some discrete

580
00:24:26,080 --> 00:24:29,200
logarithm oracles

581
00:24:29,200 --> 00:24:32,640
has a hard work of

582
00:24:32,640 --> 00:24:34,000
of attacking

583
00:24:34,000 --> 00:24:36,320
cpas and in fact what they found out

584
00:24:36,320 --> 00:24:38,159
they have formalized the assumption and

585
00:24:38,159 --> 00:24:40,799
they found out that the dominating term

586
00:24:40,799 --> 00:24:42,880
which dominates the attacker's advantage

587
00:24:42,880 --> 00:24:44,720
is dominated by the number but the

588
00:24:44,720 --> 00:24:47,200
possibility of having online queries

589
00:24:47,200 --> 00:24:49,440
uh testing one password online or

590
00:24:49,440 --> 00:24:51,840
alternatively to use a discrete

591
00:24:51,840 --> 00:24:55,200
logarithmic rhythm oracle for testing

592
00:24:55,200 --> 00:24:58,159
one password offline so that's the

593
00:24:58,159 --> 00:25:00,559
essence so what one intuitively expects

594
00:25:00,559 --> 00:25:02,240
from a quantum annoying

595
00:25:02,240 --> 00:25:04,480
protocol

596
00:25:04,480 --> 00:25:06,640
and secondly we

597
00:25:06,640 --> 00:25:09,760
have an update regarding our

598
00:25:09,760 --> 00:25:11,200
see pace paper

599
00:25:11,200 --> 00:25:14,320
and it's now reviewed and accepted at

600
00:25:14,320 --> 00:25:16,240
asia crypt

601
00:25:16,240 --> 00:25:18,000
for this december

602
00:25:18,000 --> 00:25:20,799
and essentially we have several

603
00:25:20,799 --> 00:25:22,799
improvements and changes

604
00:25:22,799 --> 00:25:25,360
we have aimed at clarifying the security

605
00:25:25,360 --> 00:25:27,679
definitions and proofs i'll detail on

606
00:25:27,679 --> 00:25:29,279
that

607
00:25:29,279 --> 00:25:31,760
more importantly we have now

608
00:25:31,760 --> 00:25:33,760
explicitly covered two different

609
00:25:33,760 --> 00:25:35,200
settings one

610
00:25:35,200 --> 00:25:36,720
initiator responder setting where we

611
00:25:36,720 --> 00:25:39,120
have one initiator which first starts

612
00:25:39,120 --> 00:25:40,960
the protocol and the responder which is

613
00:25:40,960 --> 00:25:43,120
always second

614
00:25:43,120 --> 00:25:44,880
so we call that initiator responder

615
00:25:44,880 --> 00:25:46,880
protocol and

616
00:25:46,880 --> 00:25:49,039
the second option is um the case where

617
00:25:49,039 --> 00:25:53,200
we don't have uh a prescribed ordering

618
00:25:53,200 --> 00:25:55,520
where it's not clear which parties sends

619
00:25:55,520 --> 00:25:57,760
the first message and in the proof we

620
00:25:57,760 --> 00:26:00,480
now cover both settings

621
00:26:00,480 --> 00:26:03,440
we ended improving readability and most

622
00:26:03,440 --> 00:26:05,120
importantly we

623
00:26:05,120 --> 00:26:07,679
have worked on clarificatifying the role

624
00:26:07,679 --> 00:26:09,600
of the session id that's beforehand we

625
00:26:09,600 --> 00:26:11,840
only had the security proof and the

626
00:26:11,840 --> 00:26:13,600
simulation based

627
00:26:13,600 --> 00:26:15,279
uc model

628
00:26:15,279 --> 00:26:16,960
which implied that there needs to be

629
00:26:16,960 --> 00:26:19,360
some session id

630
00:26:19,360 --> 00:26:22,320
so and this part of the analysis is

631
00:26:22,320 --> 00:26:24,720
covered in the new appendix b which is

632
00:26:24,720 --> 00:26:27,520
in the security paper and it includes a

633
00:26:27,520 --> 00:26:30,240
game based proof which complements the

634
00:26:30,240 --> 00:26:33,600
security analysis that we had beforehand

635
00:26:33,600 --> 00:26:36,000
so in order to carry out the proof we

636
00:26:36,000 --> 00:26:38,400
first had made some adoptions on the

637
00:26:38,400 --> 00:26:40,799
existing page

638
00:26:40,799 --> 00:26:42,720
models game based

639
00:26:42,720 --> 00:26:43,919
proof models

640
00:26:43,919 --> 00:26:46,080
so that we also are able to cover the

641
00:26:46,080 --> 00:26:48,000
parallel protocol case where we don't

642
00:26:48,000 --> 00:26:51,760
have ordering of the uh

643
00:26:51,760 --> 00:26:54,159
prescribed ordering of the

644
00:26:54,159 --> 00:26:56,320
protocol messages

645
00:26:56,320 --> 00:26:58,960
and with this proof we are able to

646
00:26:58,960 --> 00:27:00,320
show

647
00:27:00,320 --> 00:27:02,559
security of cpace without

648
00:27:02,559 --> 00:27:05,039
pre-established session id values so as

649
00:27:05,039 --> 00:27:07,760
a result the security we still have

650
00:27:07,760 --> 00:27:08,720
strong

651
00:27:08,720 --> 00:27:10,799
security guarantees but the guarantees

652
00:27:10,799 --> 00:27:11,520
are

653
00:27:11,520 --> 00:27:13,039
somewhat different

654
00:27:13,039 --> 00:27:15,440
in comparison to the

655
00:27:15,440 --> 00:27:17,840
case without uh where we have the

656
00:27:17,840 --> 00:27:20,240
simulation based proof so for details

657
00:27:20,240 --> 00:27:22,320
it's i think it's too complicated for

658
00:27:22,320 --> 00:27:24,559
this presentation it's described in the

659
00:27:24,559 --> 00:27:26,960
paper

660
00:27:27,679 --> 00:27:29,760
so the second

661
00:27:29,760 --> 00:27:32,000
major change that we have been doing in

662
00:27:32,000 --> 00:27:35,039
the in the latest version of the

663
00:27:35,039 --> 00:27:38,559
security paper is that we describe

664
00:27:38,559 --> 00:27:40,320
a subset of functions which are

665
00:27:40,320 --> 00:27:43,200
important for cpase implementations

666
00:27:43,200 --> 00:27:44,559
and

667
00:27:44,559 --> 00:27:46,240
so we

668
00:27:46,240 --> 00:27:49,200
distinguish four different sub steps

669
00:27:49,200 --> 00:27:50,960
which where the first one is scalar

670
00:27:50,960 --> 00:27:52,720
sampling where we have some

671
00:27:52,720 --> 00:27:54,720
conditions which needs to be fulfilled

672
00:27:54,720 --> 00:27:57,520
here we have a generator function which

673
00:27:57,520 --> 00:27:59,840
maps the password on a

674
00:27:59,840 --> 00:28:01,360
generator on the group

675
00:28:01,360 --> 00:28:02,799
and then we have two scalar

676
00:28:02,799 --> 00:28:05,840
multiplication methods where we decided

677
00:28:05,840 --> 00:28:07,840
to use two methods in order to make it

678
00:28:07,840 --> 00:28:10,960
explicit that point verification and

679
00:28:10,960 --> 00:28:12,640
checking for low order

680
00:28:12,640 --> 00:28:15,440
for the identity element

681
00:28:15,440 --> 00:28:18,320
is important so we split it up so that

682
00:28:18,320 --> 00:28:21,760
we can uh mandate the check uh

683
00:28:21,760 --> 00:28:23,039
and make a transparent way it's

684
00:28:23,039 --> 00:28:26,399
necessary to uh to avoid attacks

685
00:28:26,399 --> 00:28:27,120
so

686
00:28:27,120 --> 00:28:28,480
and once we're having these four

687
00:28:28,480 --> 00:28:30,960
functions we have in an appendix g where

688
00:28:30,960 --> 00:28:34,240
we analyze analyze how to best implement

689
00:28:34,240 --> 00:28:36,480
these four functions for the different

690
00:28:36,480 --> 00:28:38,799
application settings which we

691
00:28:38,799 --> 00:28:40,640
might call it ecosystem

692
00:28:40,640 --> 00:28:43,679
so we adding one set uh how to implement

693
00:28:43,679 --> 00:28:45,679
these functions best when using short

694
00:28:45,679 --> 00:28:47,840
wire stress functions in order to main

695
00:28:47,840 --> 00:28:50,880
comp best compatibility and uh same

696
00:28:50,880 --> 00:28:51,840
using

697
00:28:51,840 --> 00:28:54,320
use cases as that we have today for

698
00:28:54,320 --> 00:28:56,880
nist's curves and brain blue curves

699
00:28:56,880 --> 00:29:00,399
then we have a second uh ecosystem

700
00:29:00,399 --> 00:29:03,520
where we um focus on uh constraint

701
00:29:03,520 --> 00:29:05,120
devices which

702
00:29:05,120 --> 00:29:06,880
one would like would like to work on

703
00:29:06,880 --> 00:29:10,080
montgomery curves and use x4 25519 or

704
00:29:10,080 --> 00:29:11,600
x448

705
00:29:11,600 --> 00:29:13,919
and then cpase for

706
00:29:13,919 --> 00:29:15,600
idealized group abstractions such as

707
00:29:15,600 --> 00:29:18,639
restretcher and dcaf

708
00:29:19,919 --> 00:29:22,399
regarding the session identifier

709
00:29:22,399 --> 00:29:24,559
we come up with a recommendation that

710
00:29:24,559 --> 00:29:26,640
it's a good idea to if it's possible in

711
00:29:26,640 --> 00:29:30,000
the application to first agree on a

712
00:29:30,000 --> 00:29:31,840
joint session identifier between the two

713
00:29:31,840 --> 00:29:33,120
parties

714
00:29:33,120 --> 00:29:34,880
uh so

715
00:29:34,880 --> 00:29:36,880
both users should

716
00:29:36,880 --> 00:29:38,640
contribute to the randomness when

717
00:29:38,640 --> 00:29:40,159
generating the session id so it's not

718
00:29:40,159 --> 00:29:41,360
complicated

719
00:29:41,360 --> 00:29:43,200
the only important things are that both

720
00:29:43,200 --> 00:29:46,000
users should contribute randomness it's

721
00:29:46,000 --> 00:29:48,559
not necessary to have secrecy for this

722
00:29:48,559 --> 00:29:51,039
process and the messages for

723
00:29:51,039 --> 00:29:52,880
generating a session id can be

724
00:29:52,880 --> 00:29:54,799
piggybacked to the messages sent by the

725
00:29:54,799 --> 00:29:56,080
application

726
00:29:56,080 --> 00:29:57,840
so more details are given here in the

727
00:29:57,840 --> 00:30:00,639
reference 3

728
00:30:01,279 --> 00:30:04,240
which i understand just in the slides

729
00:30:04,240 --> 00:30:07,200
and the main

730
00:30:07,200 --> 00:30:07,840
c messages that

731
00:30:07,840 --> 00:30:10,159
secure also without a pre-established

732
00:30:10,159 --> 00:30:12,159
session id but the pre-established

733
00:30:12,159 --> 00:30:14,000
session id makes a difference and

734
00:30:14,000 --> 00:30:15,840
specifically

735
00:30:15,840 --> 00:30:17,840
the essential point is that there come

736
00:30:17,840 --> 00:30:20,640
is less which can grow go wrong if you

737
00:30:20,640 --> 00:30:23,600
take pace as one sub step of a larger

738
00:30:23,600 --> 00:30:25,840
construction and want to integrate it in

739
00:30:25,840 --> 00:30:28,399
a larger

740
00:30:29,039 --> 00:30:30,240
application

741
00:30:30,240 --> 00:30:33,679
and if you're having a session id and

742
00:30:33,679 --> 00:30:37,360
which is unique for this specific

743
00:30:37,360 --> 00:30:39,120
protocol run

744
00:30:39,120 --> 00:30:41,039
you bind the protocol run to this

745
00:30:41,039 --> 00:30:42,799
specific session and there's less than

746
00:30:42,799 --> 00:30:44,880
what can go wrong

747
00:30:44,880 --> 00:30:46,000
if you have it

748
00:30:46,000 --> 00:30:47,200
and secondly

749
00:30:47,200 --> 00:30:48,720
there is some

750
00:30:48,720 --> 00:30:51,679
impact of the session id uniqueness on

751
00:30:51,679 --> 00:30:53,120
the level of quantum annoyance

752
00:30:53,120 --> 00:30:56,320
guarantees so

753
00:30:56,320 --> 00:30:59,120
for details on this uh minor impact

754
00:30:59,120 --> 00:31:01,200
that's i've added

755
00:31:01,200 --> 00:31:02,799
the chapters where

756
00:31:02,799 --> 00:31:03,679
one

757
00:31:03,679 --> 00:31:06,720
an interested reader may have a look

758
00:31:06,720 --> 00:31:09,519
for for the ugly details of this this

759
00:31:09,519 --> 00:31:12,799
property so as a

760
00:31:12,799 --> 00:31:14,799
essentially

761
00:31:14,799 --> 00:31:17,039
i think we have resolved the issue and

762
00:31:17,039 --> 00:31:18,559
the question which has been raised in

763
00:31:18,559 --> 00:31:19,760
the last

764
00:31:19,760 --> 00:31:22,000
cfrg meeting regarding the session

765
00:31:22,000 --> 00:31:25,679
identifier and the game-based proof

766
00:31:26,640 --> 00:31:29,360
regarding the internet draft we are

767
00:31:29,360 --> 00:31:33,440
currently making a major rewrite so

768
00:31:33,440 --> 00:31:36,000
the current draft version 2 is a mixture

769
00:31:36,000 --> 00:31:38,399
between a scientific paper and some

770
00:31:38,399 --> 00:31:41,039
guidance document for the implementer

771
00:31:41,039 --> 00:31:42,559
and

772
00:31:42,559 --> 00:31:43,440
with

773
00:31:43,440 --> 00:31:45,760
the new papers we i think we have the

774
00:31:45,760 --> 00:31:47,840
basis for uh

775
00:31:47,840 --> 00:31:50,159
referring the theoretically inclined

776
00:31:50,159 --> 00:31:53,200
reader to the to the paper and

777
00:31:53,200 --> 00:31:55,279
so that we can focus on the implementer

778
00:31:55,279 --> 00:31:57,279
for the draft and that's what we are

779
00:31:57,279 --> 00:32:00,399
currently working on

780
00:32:00,399 --> 00:32:03,440
it's the current version is on the

781
00:32:03,440 --> 00:32:06,720
on the github it's not yet uploaded and

782
00:32:06,720 --> 00:32:09,440
we plan to upload a new version once we

783
00:32:09,440 --> 00:32:11,679
have finished uh the test vector

784
00:32:11,679 --> 00:32:13,840
generation

785
00:32:13,840 --> 00:32:15,679
regarding the new definitions and the

786
00:32:15,679 --> 00:32:18,640
new text that we have we are preparing

787
00:32:18,640 --> 00:32:21,200
so the structure is

788
00:32:21,200 --> 00:32:23,440
what we have changed is that we now

789
00:32:23,440 --> 00:32:26,159
consider both the parallel uh

790
00:32:26,159 --> 00:32:27,440
sessions which

791
00:32:27,440 --> 00:32:29,679
remember for this application such as

792
00:32:29,679 --> 00:32:32,080
this magic wormhole which has been

793
00:32:32,080 --> 00:32:34,720
discussed on the cfrg list for instance

794
00:32:34,720 --> 00:32:37,120
uh so this parallel setting and in the

795
00:32:37,120 --> 00:32:40,240
classical initiator responder setting

796
00:32:40,240 --> 00:32:43,600
and that's included now and

797
00:32:43,600 --> 00:32:44,480
we

798
00:32:44,480 --> 00:32:46,640
have a structure where we now first give

799
00:32:46,640 --> 00:32:48,720
a generic description of the definition

800
00:32:48,720 --> 00:32:50,799
of the protocol the pro definition based

801
00:32:50,799 --> 00:32:52,240
on these four functions that i've

802
00:32:52,240 --> 00:32:54,240
mentioned before

803
00:32:54,240 --> 00:32:55,840
and then we have a second section where

804
00:32:55,840 --> 00:32:58,320
we specify how exactly these four

805
00:32:58,320 --> 00:33:00,720
functions shall be implemented for uh

806
00:33:00,720 --> 00:33:03,120
three specific ecosystems so short wire

807
00:33:03,120 --> 00:33:05,919
stress single coordinate letters and uh

808
00:33:05,919 --> 00:33:09,799
for a stretcher and decaf

809
00:33:11,600 --> 00:33:14,080
so regarding the protocol description

810
00:33:14,080 --> 00:33:16,159
there's one change

811
00:33:16,159 --> 00:33:18,559
regarding the protocol messages

812
00:33:18,559 --> 00:33:20,559
and it stems from

813
00:33:20,559 --> 00:33:23,600
as a result of the game based proof

814
00:33:23,600 --> 00:33:25,679
which we have in the new security paper

815
00:33:25,679 --> 00:33:27,519
and essentially it turned out in order

816
00:33:27,519 --> 00:33:30,640
to to reuse the existing game-based

817
00:33:30,640 --> 00:33:32,320
security models for instance the

818
00:33:32,320 --> 00:33:34,240
game-based model which has been used for

819
00:33:34,240 --> 00:33:36,399
spec 2 and

820
00:33:36,399 --> 00:33:38,799
other protocols in order to

821
00:33:38,799 --> 00:33:41,760
use this model we needed the possibility

822
00:33:41,760 --> 00:33:42,880
to have

823
00:33:42,880 --> 00:33:45,360
the session the party identifiers as

824
00:33:45,360 --> 00:33:47,519
part of the protocol messages

825
00:33:47,519 --> 00:33:50,480
so in order to deal with this setting

826
00:33:50,480 --> 00:33:53,200
and use reduce the security model there

827
00:33:53,200 --> 00:33:56,320
we decided to add the associated data

828
00:33:56,320 --> 00:33:58,000
field to

829
00:33:58,000 --> 00:34:00,640
the protocol description so that we can

830
00:34:00,640 --> 00:34:02,880
not only have the public share

831
00:34:02,880 --> 00:34:05,200
y a and yb in the messages but also an

832
00:34:05,200 --> 00:34:07,679
associated data field so typically this

833
00:34:07,679 --> 00:34:10,000
would include any data that the users

834
00:34:10,000 --> 00:34:12,480
will need to will want to authenticate

835
00:34:12,480 --> 00:34:14,879
such as party identifiers

836
00:34:14,879 --> 00:34:17,599
and this also allows for applications

837
00:34:17,599 --> 00:34:20,960
now where we don't where we have no

838
00:34:20,960 --> 00:34:23,520
unambiguous party identifier encoding

839
00:34:23,520 --> 00:34:26,000
available protocols protocol start for

840
00:34:26,000 --> 00:34:28,320
instance if you're having a

841
00:34:28,320 --> 00:34:30,719
device which has several mac addresses

842
00:34:30,719 --> 00:34:33,599
and the the software

843
00:34:33,599 --> 00:34:35,760
which is running the cpase protocol does

844
00:34:35,760 --> 00:34:37,918
not know on which of the different mac

845
00:34:37,918 --> 00:34:40,000
addresses the communication actually

846
00:34:40,000 --> 00:34:40,960
happens

847
00:34:40,960 --> 00:34:43,599
uh it's not clear which

848
00:34:43,599 --> 00:34:45,520
party identifier or which

849
00:34:45,520 --> 00:34:48,879
mac address to use

850
00:34:48,879 --> 00:34:51,440
a protocol start so it's

851
00:34:51,440 --> 00:34:53,280
this allows us

852
00:34:53,280 --> 00:34:55,440
this associated data fields allow for

853
00:34:55,440 --> 00:34:56,879
including this

854
00:34:56,879 --> 00:35:00,240
later as part of the protocol

855
00:35:00,560 --> 00:35:01,280
and

856
00:35:01,280 --> 00:35:03,200
the second change we which we have in

857
00:35:03,200 --> 00:35:05,599
the current draft which on github is

858
00:35:05,599 --> 00:35:06,880
that we

859
00:35:06,880 --> 00:35:09,520
modified how we are hashing

860
00:35:09,520 --> 00:35:12,640
so the hash functions and the security

861
00:35:12,640 --> 00:35:15,280
models both for the ethernet stabila

862
00:35:15,280 --> 00:35:18,400
model and in our own paper we model the

863
00:35:18,400 --> 00:35:21,280
hash functions as idealized random

864
00:35:21,280 --> 00:35:23,920
oracles which

865
00:35:24,480 --> 00:35:26,880
calculate a bit string

866
00:35:26,880 --> 00:35:27,760
so

867
00:35:27,760 --> 00:35:30,560
and we if we don't consider uh

868
00:35:30,560 --> 00:35:32,720
imperfections which might stem from

869
00:35:32,720 --> 00:35:35,280
mercury dam guard uh constructions such

870
00:35:35,280 --> 00:35:36,800
such as uh

871
00:35:36,800 --> 00:35:38,400
256.

872
00:35:38,400 --> 00:35:39,119
so

873
00:35:39,119 --> 00:35:41,760
in order to deal with that we

874
00:35:41,760 --> 00:35:43,280
now are

875
00:35:43,280 --> 00:35:45,680
having a prescription that we

876
00:35:45,680 --> 00:35:48,480
prepend the length of each substring to

877
00:35:48,480 --> 00:35:50,400
the protocol messages

878
00:35:50,400 --> 00:35:52,480
to all subfields

879
00:35:52,480 --> 00:35:54,640
and that's also helpful first for

880
00:35:54,640 --> 00:35:56,240
instance when prepending the length of

881
00:35:56,240 --> 00:35:57,920
the public share and the length of the

882
00:35:57,920 --> 00:36:00,160
associate data fields it's

883
00:36:00,160 --> 00:36:02,480
helpful for passing the messages by the

884
00:36:02,480 --> 00:36:04,079
receivers

885
00:36:04,079 --> 00:36:05,920
it's also helpful for

886
00:36:05,920 --> 00:36:07,200
dealing with

887
00:36:07,200 --> 00:36:10,640
buffer flow over power overflows hannity

888
00:36:10,640 --> 00:36:13,640
checks

889
00:36:25,440 --> 00:36:27,599
don't need to consider the problem of

890
00:36:27,599 --> 00:36:30,000
length and extension imperfections that

891
00:36:30,000 --> 00:36:31,760
come with merkle dumb guards hash

892
00:36:31,760 --> 00:36:34,480
constructions

893
00:36:36,480 --> 00:36:37,280
so

894
00:36:37,280 --> 00:36:40,480
finally we are currently working on

895
00:36:40,480 --> 00:36:43,359
the test vectors so since yesterday we

896
00:36:43,359 --> 00:36:45,359
have a first version of test vectors

897
00:36:45,359 --> 00:36:46,880
available the first subset of test

898
00:36:46,880 --> 00:36:49,280
vectors available on the github

899
00:36:49,280 --> 00:36:51,839
but it's not yet finished

900
00:36:51,839 --> 00:36:54,960
we the sage code is largely rewritten we

901
00:36:54,960 --> 00:36:56,880
have a proof of concept implementation

902
00:36:56,880 --> 00:36:58,960
and sake map for all the different

903
00:36:58,960 --> 00:37:00,640
ecosystems now

904
00:37:00,640 --> 00:37:02,400
um we

905
00:37:02,400 --> 00:37:04,240
also follow the directory structure and

906
00:37:04,240 --> 00:37:05,520
build system

907
00:37:05,520 --> 00:37:07,200
just that is it used for the hash to

908
00:37:07,200 --> 00:37:10,079
curt and opirf drafts and the goal is to

909
00:37:10,079 --> 00:37:11,920
automatically generate the markdown

910
00:37:11,920 --> 00:37:13,920
sources for the for the test vectors

911
00:37:13,920 --> 00:37:16,160
from the sage script and once we finish

912
00:37:16,160 --> 00:37:18,560
this sub step

913
00:37:18,560 --> 00:37:21,760
the plan is to upload a new uh

914
00:37:21,760 --> 00:37:24,400
ide revision to the

915
00:37:24,400 --> 00:37:27,280
iatf server

916
00:37:28,160 --> 00:37:31,440
so basically that's that was it i'd like

917
00:37:31,440 --> 00:37:32,240
to

918
00:37:32,240 --> 00:37:34,560
express a big thank to christopher wood

919
00:37:34,560 --> 00:37:37,520
for his with xml to markdown conversion

920
00:37:37,520 --> 00:37:39,920
for the internet draft it's a big

921
00:37:39,920 --> 00:37:41,520
difference to

922
00:37:41,520 --> 00:37:42,320
i

923
00:37:42,320 --> 00:37:44,560
if i knew beforehand that it's not

924
00:37:44,560 --> 00:37:46,720
mandatory to use an xml version of the

925
00:37:46,720 --> 00:37:48,400
files that's

926
00:37:48,400 --> 00:37:50,720
i would have spared a lot of time so

927
00:37:50,720 --> 00:37:52,640
thank you very much for that

928
00:37:52,640 --> 00:37:56,079
and we'd appreciate feedback and tints

929
00:37:56,079 --> 00:37:58,480
on all aspects but specifically i'd

930
00:37:58,480 --> 00:38:02,079
invite feedback regarding the object

931
00:38:02,079 --> 00:38:04,160
style notation that we have now in the

932
00:38:04,160 --> 00:38:06,079
github version of the draft

933
00:38:06,079 --> 00:38:07,200
so where we

934
00:38:07,200 --> 00:38:08,960
compile for instance the different

935
00:38:08,960 --> 00:38:11,920
functions that we need uh together

936
00:38:11,920 --> 00:38:14,480
in some kind of object type

937
00:38:14,480 --> 00:38:18,880
notation with a class and method

938
00:38:18,880 --> 00:38:20,720
then

939
00:38:20,720 --> 00:38:22,800
we are a bit discussing in the editor

940
00:38:22,800 --> 00:38:23,599
team

941
00:38:23,599 --> 00:38:26,480
whether we should be considering

942
00:38:26,480 --> 00:38:28,720
explicitly both the initiator and

943
00:38:28,720 --> 00:38:30,240
responder

944
00:38:30,240 --> 00:38:32,480
version and the parallel version or

945
00:38:32,480 --> 00:38:34,640
should we focus on one setting for

946
00:38:34,640 --> 00:38:36,960
concise and so as for instance is the

947
00:38:36,960 --> 00:38:39,200
case for the spec 2 draft

948
00:38:39,200 --> 00:38:43,200
so it adds some complexity and

949
00:38:43,280 --> 00:38:45,760
we're not yet decided which what is the

950
00:38:45,760 --> 00:38:46,400
best

951
00:38:46,400 --> 00:38:49,920
best way currently we have uh both

952
00:38:49,920 --> 00:38:51,760
versions covered and

953
00:38:51,760 --> 00:38:54,160
as a consequence both two versions of

954
00:38:54,160 --> 00:38:56,079
test vectors

955
00:38:56,079 --> 00:38:58,240
so then there's the

956
00:38:58,240 --> 00:39:00,560
question how to best prepend the field

957
00:39:00,560 --> 00:39:02,560
length to the octet strings for the

958
00:39:02,560 --> 00:39:04,880
prefix free encoding currently we are

959
00:39:04,880 --> 00:39:08,240
suggesting to use utf-8 as it's

960
00:39:08,240 --> 00:39:10,960
very compact and in most cases it's just

961
00:39:10,960 --> 00:39:13,760
the plain integer as

962
00:39:13,760 --> 00:39:16,640
and it's a single byte for lengths up to

963
00:39:16,640 --> 00:39:18,880
127

964
00:39:18,880 --> 00:39:20,640
bytes

965
00:39:20,640 --> 00:39:22,079
and finally

966
00:39:22,079 --> 00:39:24,560
there's still some issue with the auto

967
00:39:24,560 --> 00:39:27,440
magical markdown to html conversion on

968
00:39:27,440 --> 00:39:29,359
github so

969
00:39:29,359 --> 00:39:31,839
if anybody if there's somebody who has

970
00:39:31,839 --> 00:39:34,320
more experience or which might volunteer

971
00:39:34,320 --> 00:39:36,640
to ask some questions i'd appreciate

972
00:39:36,640 --> 00:39:38,160
that

973
00:39:38,160 --> 00:39:41,799
so thank you very much

974
00:39:42,720 --> 00:39:44,720
thanks a lot bjorn

975
00:39:44,720 --> 00:39:47,839
questions comments

976
00:39:51,920 --> 00:39:55,440
uh then my maybe one small question from

977
00:39:55,440 --> 00:39:56,640
my side

978
00:39:56,640 --> 00:39:57,440
uh

979
00:39:57,440 --> 00:40:00,079
bjorn could you please give us the

980
00:40:00,079 --> 00:40:03,920
outline of your future plans of when do

981
00:40:03,920 --> 00:40:06,640
you want us to

982
00:40:06,640 --> 00:40:09,599
ask the crypto review panel for another

983
00:40:09,599 --> 00:40:11,599
set of reviews

984
00:40:11,599 --> 00:40:13,359
when do you want

985
00:40:13,359 --> 00:40:15,920
when you plan to ask for such a group of

986
00:40:15,920 --> 00:40:18,079
us calls so

987
00:40:18,079 --> 00:40:20,800
could you please give us your

988
00:40:20,800 --> 00:40:22,839
current

989
00:40:22,839 --> 00:40:24,400
understanding

990
00:40:24,400 --> 00:40:25,440
so

991
00:40:25,440 --> 00:40:27,119
my plan is

992
00:40:27,119 --> 00:40:28,240
to

993
00:40:28,240 --> 00:40:29,040
to

994
00:40:29,040 --> 00:40:32,000
have a first version with a test picture

995
00:40:32,000 --> 00:40:34,079
this week

996
00:40:34,079 --> 00:40:35,359
then

997
00:40:35,359 --> 00:40:37,760
i think we will um we

998
00:40:37,760 --> 00:40:40,800
my suggestion will be that we invite

999
00:40:40,800 --> 00:40:43,359
comments for say two or three weeks on

1000
00:40:43,359 --> 00:40:46,000
the cfrg lists

1001
00:40:46,000 --> 00:40:48,319
and so that's the

1002
00:40:48,319 --> 00:40:50,160
feedback and hints may be

1003
00:40:50,160 --> 00:40:52,880
incorporated so that we might be having

1004
00:40:52,880 --> 00:40:55,839
a second uh

1005
00:40:55,839 --> 00:40:57,920
published version of the draft end of

1006
00:40:57,920 --> 00:40:59,040
the year

1007
00:40:59,040 --> 00:41:00,640
so and

1008
00:41:00,640 --> 00:41:01,760
hopefully

1009
00:41:01,760 --> 00:41:03,440
i have

1010
00:41:03,440 --> 00:41:05,359
i think the security analysis is now

1011
00:41:05,359 --> 00:41:08,880
very detailed and very explicit

1012
00:41:08,880 --> 00:41:10,720
and i

1013
00:41:10,720 --> 00:41:12,480
think that it might be

1014
00:41:12,480 --> 00:41:14,560
by end of the year that we could ask for

1015
00:41:14,560 --> 00:41:15,280
a

1016
00:41:15,280 --> 00:41:18,800
more a lot larger review of the draft

1017
00:41:18,800 --> 00:41:21,680
by the review panel but that might also

1018
00:41:21,680 --> 00:41:24,240
come out from there might be uh result

1019
00:41:24,240 --> 00:41:25,280
in the

1020
00:41:25,280 --> 00:41:27,680
first discussion ground on the cfrg list

1021
00:41:27,680 --> 00:41:29,839
so that there's might be some delay but

1022
00:41:29,839 --> 00:41:32,480
i think it might be feasible to to ask

1023
00:41:32,480 --> 00:41:35,040
for more formal review

1024
00:41:35,040 --> 00:41:37,200
by the by the end of the year by the

1025
00:41:37,200 --> 00:41:39,839
review panel so that we could proceed

1026
00:41:39,839 --> 00:41:42,400
afterwards

1027
00:41:45,520 --> 00:41:47,520
okay thanks

1028
00:41:47,520 --> 00:41:51,359
any questions to bjorn

1029
00:41:53,920 --> 00:41:56,240
once

1030
00:41:57,680 --> 00:42:00,000
and thanks a lot bjorn

1031
00:42:00,000 --> 00:42:00,960
and

1032
00:42:00,960 --> 00:42:04,160
the second following presentation is

1033
00:42:04,160 --> 00:42:05,680
from chris food

1034
00:42:05,680 --> 00:42:07,119
it's about

1035
00:42:07,119 --> 00:42:11,359
current status of vlp aircraft

1036
00:42:15,760 --> 00:42:18,560
so please please

1037
00:42:18,560 --> 00:42:20,160
all right thanks everyone uh good

1038
00:42:20,160 --> 00:42:21,040
morning

1039
00:42:21,040 --> 00:42:23,599
good night i guess good good day good

1040
00:42:23,599 --> 00:42:25,040
evening good afternoon we'll have you

1041
00:42:25,040 --> 00:42:27,280
what time it is this is an update on uh

1042
00:42:27,280 --> 00:42:29,280
voprf uh or

1043
00:42:29,280 --> 00:42:33,040
rf as i should say now um

1044
00:42:33,119 --> 00:42:35,119
since the the last time we talked about

1045
00:42:35,119 --> 00:42:37,119
this the draft has undergone somewhat of

1046
00:42:37,119 --> 00:42:40,560
a significant uh change internally uh

1047
00:42:40,560 --> 00:42:42,160
the the major change being the

1048
00:42:42,160 --> 00:42:45,200
transition from uh the sort of classical

1049
00:42:45,200 --> 00:42:48,960
to have to to hash to the hominoprf

1050
00:42:48,960 --> 00:42:51,520
uh to what's referred to as the three

1051
00:42:51,520 --> 00:42:53,200
hash um

1052
00:42:53,200 --> 00:42:54,400
which is called the three hashtag

1053
00:42:54,400 --> 00:42:56,880
helmand pio prf or partially oblivious

1054
00:42:56,880 --> 00:42:59,680
opioid or partially obvious prf

1055
00:42:59,680 --> 00:43:00,560
um

1056
00:43:00,560 --> 00:43:01,839
and i'll explain the the sort of

1057
00:43:01,839 --> 00:43:04,079
difference between that in just a moment

1058
00:43:04,079 --> 00:43:05,920
um there's also been some other minor

1059
00:43:05,920 --> 00:43:08,000
updates with respect to cypher suites

1060
00:43:08,000 --> 00:43:09,760
that are offering in the spec uh

1061
00:43:09,760 --> 00:43:11,440
changing hash functions to you know

1062
00:43:11,440 --> 00:43:13,200
better align with the corresponding

1063
00:43:13,200 --> 00:43:14,079
groups

1064
00:43:14,079 --> 00:43:16,400
and then as usual um

1065
00:43:16,400 --> 00:43:17,839
updating test factors working on

1066
00:43:17,839 --> 00:43:21,759
document editorial clarity and so on

1067
00:43:22,480 --> 00:43:26,240
on the uh the the poprf difference um or

1068
00:43:26,240 --> 00:43:27,680
update rather

1069
00:43:27,680 --> 00:43:31,280
a a rpf uh unlike an opref

1070
00:43:31,280 --> 00:43:34,079
is is effectively an opr but it

1071
00:43:34,079 --> 00:43:36,640
has this additional input t

1072
00:43:36,640 --> 00:43:38,319
um

1073
00:43:38,319 --> 00:43:39,520
uh

1074
00:43:39,520 --> 00:43:42,319
so in in the classical case you have um

1075
00:43:42,319 --> 00:43:44,560
you know an opioid computing a prf over

1076
00:43:44,560 --> 00:43:47,359
a server private key um which is hidden

1077
00:43:47,359 --> 00:43:49,280
from the client a

1078
00:43:49,280 --> 00:43:51,440
uh client's input

1079
00:43:51,440 --> 00:43:54,079
x which is also hidden from the server

1080
00:43:54,079 --> 00:43:56,640
then you get some output y

1081
00:43:56,640 --> 00:43:58,240
and the protocol the interactive

1082
00:43:58,240 --> 00:44:00,000
protocol takes place between client

1083
00:44:00,000 --> 00:44:02,000
servers such that the client doesn't

1084
00:44:02,000 --> 00:44:03,040
learn

1085
00:44:03,040 --> 00:44:05,359
the value of k and likewise the server

1086
00:44:05,359 --> 00:44:08,079
does not learn the value of x

1087
00:44:08,079 --> 00:44:09,680
and the client is the only one that

1088
00:44:09,680 --> 00:44:11,359
learns the output y

1089
00:44:11,359 --> 00:44:13,920
now this t value that is new to the

1090
00:44:13,920 --> 00:44:16,800
popuf construction is a shared

1091
00:44:16,800 --> 00:44:19,440
public value that both client and server

1092
00:44:19,440 --> 00:44:22,400
know prior to execution of the protocol

1093
00:44:22,400 --> 00:44:24,800
that's effectively metadata um or you

1094
00:44:24,800 --> 00:44:27,280
can think of it as metadata that's a

1095
00:44:27,280 --> 00:44:30,960
bound that binds to the output y

1096
00:44:30,960 --> 00:44:32,560
um you can think of it as a context

1097
00:44:32,560 --> 00:44:36,079
string and input string what have you um

1098
00:44:36,079 --> 00:44:37,920
t here i think just generally refers to

1099
00:44:37,920 --> 00:44:38,720
tweak

1100
00:44:38,720 --> 00:44:40,880
um

1101
00:44:40,880 --> 00:44:42,000
but the

1102
00:44:42,000 --> 00:44:44,800
the gist is that you have um

1103
00:44:44,800 --> 00:44:47,680
effectively a a more generic oprf

1104
00:44:47,680 --> 00:44:50,319
construction

1105
00:44:52,560 --> 00:44:54,560
and by more generic i mean you can

1106
00:44:54,560 --> 00:44:56,480
effectively uh

1107
00:44:56,480 --> 00:45:00,800
implement or use it as an opr uh with an

1108
00:45:00,800 --> 00:45:03,920
empty fixed uh constant

1109
00:45:03,920 --> 00:45:06,400
shared value as an input

1110
00:45:06,400 --> 00:45:07,119
t

1111
00:45:07,119 --> 00:45:09,040
so if you run the popup vertical with a

1112
00:45:09,040 --> 00:45:11,280
fixed public input what you have

1113
00:45:11,280 --> 00:45:15,119
functionally is an opref on the outside

1114
00:45:15,119 --> 00:45:17,119
and this is quite useful because now we

1115
00:45:17,119 --> 00:45:19,040
have a construction that is suitable for

1116
00:45:19,040 --> 00:45:21,200
all of the applications for which the

1117
00:45:21,200 --> 00:45:23,599
opr construction was already useful but

1118
00:45:23,599 --> 00:45:25,280
also those that would benefit from

1119
00:45:25,280 --> 00:45:28,000
additional context where appropriate

1120
00:45:28,000 --> 00:45:30,880
um so some examples that come to mind um

1121
00:45:30,880 --> 00:45:33,119
are our privacy pass

1122
00:45:33,119 --> 00:45:35,760
privacy pass has a dependency on the vo

1123
00:45:35,760 --> 00:45:37,680
prf in particular

1124
00:45:37,680 --> 00:45:40,720
for computing tokens and verifying them

1125
00:45:40,720 --> 00:45:43,440
and for privacy reasons

1126
00:45:43,440 --> 00:45:45,440
the keys have to rotate quite

1127
00:45:45,440 --> 00:45:47,520
regularly

1128
00:45:47,520 --> 00:45:49,440
or for privacy and security reasons the

1129
00:45:49,440 --> 00:45:51,119
keys rotate quite regularly but not too

1130
00:45:51,119 --> 00:45:52,800
frequently so as to the airport users

1131
00:45:52,800 --> 00:45:54,640
into small buckets

1132
00:45:54,640 --> 00:45:56,480
this requires sort of complicated

1133
00:45:56,480 --> 00:45:59,200
machinery to actually rotate the key

1134
00:45:59,200 --> 00:46:00,400
publish the key

1135
00:46:00,400 --> 00:46:02,160
verify the key

1136
00:46:02,160 --> 00:46:04,400
um externally and

1137
00:46:04,400 --> 00:46:06,319
get it down to clients

1138
00:46:06,319 --> 00:46:09,599
in contrast if you were to have

1139
00:46:09,599 --> 00:46:11,200
the key change less frequently but

1140
00:46:11,200 --> 00:46:13,280
perhaps fold in

1141
00:46:13,280 --> 00:46:15,599
sort of the expiration of tokens in as

1142
00:46:15,599 --> 00:46:17,680
the public metadata

1143
00:46:17,680 --> 00:46:18,480
uh

1144
00:46:18,480 --> 00:46:20,640
your your resulting you know system

1145
00:46:20,640 --> 00:46:22,560
might be a lot simpler

1146
00:46:22,560 --> 00:46:23,920
and that you could

1147
00:46:23,920 --> 00:46:26,000
effectively just pin a key on a on a

1148
00:46:26,000 --> 00:46:29,119
blackboard or chalkboard somewhere

1149
00:46:29,119 --> 00:46:31,200
change it very infrequently

1150
00:46:31,200 --> 00:46:33,119
perhaps it's in an hsn or some other you

1151
00:46:33,119 --> 00:46:34,800
know privileged environment where it's

1152
00:46:34,800 --> 00:46:36,319
you know the risk of compromise is quite

1153
00:46:36,319 --> 00:46:38,000
low

1154
00:46:38,000 --> 00:46:39,359
and still get the same functionality as

1155
00:46:39,359 --> 00:46:42,880
if you're actually rotating the key

1156
00:46:43,280 --> 00:46:44,720
so you can

1157
00:46:44,720 --> 00:46:47,439
you can imagine

1158
00:46:47,599 --> 00:46:48,800
i guess using metadata for that

1159
00:46:48,800 --> 00:46:51,359
particular purpose the facebook

1160
00:46:51,359 --> 00:46:54,640
private stats paper or meta private sets

1161
00:46:54,640 --> 00:46:57,359
paper however um we'll call it

1162
00:46:57,359 --> 00:46:58,240
uh

1163
00:46:58,240 --> 00:47:00,400
uh used a uh

1164
00:47:00,400 --> 00:47:03,280
an attribute-based vop ref uh

1165
00:47:03,280 --> 00:47:05,680
in a similar way um the attribute here

1166
00:47:05,680 --> 00:47:07,599
was the expiration timestamp associated

1167
00:47:07,599 --> 00:47:09,839
with the oprf output

1168
00:47:09,839 --> 00:47:11,920
you can instantiate the exact same

1169
00:47:11,920 --> 00:47:14,240
system using a pop-rf

1170
00:47:14,240 --> 00:47:16,560
with the expiration encoded as the

1171
00:47:16,560 --> 00:47:18,400
metadata input

1172
00:47:18,400 --> 00:47:19,839
you can also

1173
00:47:19,839 --> 00:47:21,839
rather than using you know

1174
00:47:21,839 --> 00:47:25,119
time i guess as your as your public

1175
00:47:25,119 --> 00:47:27,119
input you could use you know some other

1176
00:47:27,119 --> 00:47:28,400
value that's

1177
00:47:28,400 --> 00:47:31,119
it constrains the the pr output in space

1178
00:47:31,119 --> 00:47:33,119
so for example you can imagine in the

1179
00:47:33,119 --> 00:47:35,040
context of privacy pass again

1180
00:47:35,040 --> 00:47:37,040
uh using information about where the

1181
00:47:37,040 --> 00:47:38,720
client is coming from perhaps it's

1182
00:47:38,720 --> 00:47:40,720
perhaps it's country or it's like

1183
00:47:40,720 --> 00:47:42,880
network asn or something like that

1184
00:47:42,880 --> 00:47:45,200
to ensure that tokens

1185
00:47:45,200 --> 00:47:46,720
for this particular client are only

1186
00:47:46,720 --> 00:47:48,720
redeemable in that particular region so

1187
00:47:48,720 --> 00:47:50,880
you can't have tokens you know being

1188
00:47:50,880 --> 00:47:52,960
collected in one region and then spent

1189
00:47:52,960 --> 00:47:54,240
in another

1190
00:47:54,240 --> 00:47:55,440
um

1191
00:47:55,440 --> 00:47:57,040
so they're all there in general there

1192
00:47:57,040 --> 00:47:59,599
are you know a variety of use cases that

1193
00:47:59,599 --> 00:48:01,839
come up uh where a metadata is quite

1194
00:48:01,839 --> 00:48:02,800
useful

1195
00:48:02,800 --> 00:48:04,480
for simplifying you know the sort of

1196
00:48:04,480 --> 00:48:06,800
ecosystem around which oprs

1197
00:48:06,800 --> 00:48:09,119
or in which oprs exist

1198
00:48:09,119 --> 00:48:09,839
um

1199
00:48:09,839 --> 00:48:12,160
and then as a result um this this more

1200
00:48:12,160 --> 00:48:14,800
general construction seems uh

1201
00:48:14,800 --> 00:48:16,800
more applicable to a wider set of use

1202
00:48:16,800 --> 00:48:19,200
cases without invalidating any existing

1203
00:48:19,200 --> 00:48:21,520
ones

1204
00:48:21,520 --> 00:48:22,559
um

1205
00:48:22,559 --> 00:48:25,119
from a security perspective uh the the

1206
00:48:25,119 --> 00:48:27,760
the paper upon which this is built uh

1207
00:48:27,760 --> 00:48:29,680
demonstrates that just like the

1208
00:48:29,680 --> 00:48:32,640
classical two hash sticky helmet opr um

1209
00:48:32,640 --> 00:48:35,119
it reduces to the the classical uh

1210
00:48:35,119 --> 00:48:37,520
discrete log problem uh in the algebraic

1211
00:48:37,520 --> 00:48:38,559
group model

1212
00:48:38,559 --> 00:48:40,960
however the the proof of this reduction

1213
00:48:40,960 --> 00:48:43,440
is done um with a game-based definition

1214
00:48:43,440 --> 00:48:48,000
of um uh security rather than um

1215
00:48:48,000 --> 00:48:49,520
it doesn't it doesn't prove that it

1216
00:48:49,520 --> 00:48:51,520
satisfies this sort of ideal opera

1217
00:48:51,520 --> 00:48:54,079
functionality that has been used to

1218
00:48:54,079 --> 00:48:55,920
assess the security of opaque and

1219
00:48:55,920 --> 00:48:59,040
similar uh password-based constructions

1220
00:48:59,040 --> 00:49:02,400
um from stosh and hugo and others

1221
00:49:02,400 --> 00:49:05,200
um we also uh have shown that the i

1222
00:49:05,200 --> 00:49:07,280
guess superior the security primers for

1223
00:49:07,280 --> 00:49:10,079
um the static diffie-hellman attack or

1224
00:49:10,079 --> 00:49:11,599
the xi'an attack

1225
00:49:11,599 --> 00:49:14,640
um are uh identical to the the classical

1226
00:49:14,640 --> 00:49:16,640
opioid problem as well meaning that you

1227
00:49:16,640 --> 00:49:19,119
don't need to use even larger groups

1228
00:49:19,119 --> 00:49:20,880
than you would for the the classical do

1229
00:49:20,880 --> 00:49:23,119
hashtag helmand to to combat this

1230
00:49:23,119 --> 00:49:25,040
particular problem

1231
00:49:25,040 --> 00:49:28,319
so they're similar in that respect

1232
00:49:28,559 --> 00:49:30,800
and i guess the takeaway here is that um

1233
00:49:30,800 --> 00:49:33,040
we have effectively confidence uh

1234
00:49:33,040 --> 00:49:34,880
equivalent confidence in the scarity of

1235
00:49:34,880 --> 00:49:37,280
both of these constructions um

1236
00:49:37,280 --> 00:49:40,960
uh but the lack of a uc proof um for

1237
00:49:40,960 --> 00:49:43,359
rehashed helmet um

1238
00:49:43,359 --> 00:49:46,000
is uh it does call into question sort of

1239
00:49:46,000 --> 00:49:48,880
the security analysis um for opaque in

1240
00:49:48,880 --> 00:49:50,400
particular because opaque is dependent

1241
00:49:50,400 --> 00:49:53,200
on the vop rf draft the vo prf now uses

1242
00:49:53,200 --> 00:49:54,720
this new construction

1243
00:49:54,720 --> 00:49:57,040
um however uh we are actively behind the

1244
00:49:57,040 --> 00:49:58,720
scenes working with the authors of all

1245
00:49:58,720 --> 00:50:00,240
the relevant works to ensure that this

1246
00:50:00,240 --> 00:50:02,480
analysis is done and all signs point

1247
00:50:02,480 --> 00:50:04,480
towards it being feasible so

1248
00:50:04,480 --> 00:50:06,400
um not at all concerned about you know

1249
00:50:06,400 --> 00:50:08,160
the demonstrating that this new

1250
00:50:08,160 --> 00:50:10,240
construction uh can

1251
00:50:10,240 --> 00:50:12,079
sufficiently meet the ideal opioid

1252
00:50:12,079 --> 00:50:13,440
functionality

1253
00:50:13,440 --> 00:50:15,599
that is necessary for opaque um it's

1254
00:50:15,599 --> 00:50:17,839
just the work that needs to be done as

1255
00:50:17,839 --> 00:50:19,280
is you know

1256
00:50:19,280 --> 00:50:23,040
for the charter cfrg

1257
00:50:23,760 --> 00:50:25,760
um there is one important difference

1258
00:50:25,760 --> 00:50:28,079
that i i tried to know on the list um

1259
00:50:28,079 --> 00:50:30,000
i'm gonna get much feedback

1260
00:50:30,000 --> 00:50:32,720
and that is the the classical two hash

1261
00:50:32,720 --> 00:50:34,640
oprf um

1262
00:50:34,640 --> 00:50:37,040
is is threshold friendly um meaning you

1263
00:50:37,040 --> 00:50:38,960
can secret share the private key using

1264
00:50:38,960 --> 00:50:41,839
shamir um and then uh

1265
00:50:41,839 --> 00:50:45,119
non-interactively sort of compute um a a

1266
00:50:45,119 --> 00:50:47,920
or evaluate you know an input uh in a

1267
00:50:47,920 --> 00:50:49,839
threshold manner transparently to the

1268
00:50:49,839 --> 00:50:52,559
client which is quite nice if you wanted

1269
00:50:52,559 --> 00:50:55,760
to do that for your application

1270
00:50:55,760 --> 00:50:57,119
in contrast

1271
00:50:57,119 --> 00:50:59,520
the three hash debbie hellman

1272
00:50:59,520 --> 00:51:01,200
because it doesn't require private key

1273
00:51:01,200 --> 00:51:04,240
augmentation during evaluation

1274
00:51:04,240 --> 00:51:07,040
that the same techniques don't apply

1275
00:51:07,040 --> 00:51:08,960
which means that making this uh

1276
00:51:08,960 --> 00:51:11,760
threshold a threshold uh or turning this

1277
00:51:11,760 --> 00:51:13,599
into a threshold deployment

1278
00:51:13,599 --> 00:51:15,040
would require sort of an interactive

1279
00:51:15,040 --> 00:51:17,280
protocol between uh the thing that's

1280
00:51:17,280 --> 00:51:19,920
doing aggregation of different shares

1281
00:51:19,920 --> 00:51:22,800
and uh the different holders of uh

1282
00:51:22,800 --> 00:51:24,800
secret share private keys

1283
00:51:24,800 --> 00:51:27,839
um uh multi-round here being an

1284
00:51:27,839 --> 00:51:29,680
interactive multi-rom being uh just a

1285
00:51:29,680 --> 00:51:32,640
single round between them

1286
00:51:32,640 --> 00:51:35,440
uh we do believe however that um

1287
00:51:35,440 --> 00:51:37,839
for the purposes of you know a fixed

1288
00:51:37,839 --> 00:51:39,200
public input

1289
00:51:39,200 --> 00:51:41,200
uh which again is effectively the same

1290
00:51:41,200 --> 00:51:43,920
case as if you're um you know using the

1291
00:51:43,920 --> 00:51:46,880
two hashtv helmand um that we can use

1292
00:51:46,880 --> 00:51:50,960
the existing threshold mechanisms for uh

1293
00:51:50,960 --> 00:51:52,240
uh

1294
00:51:52,240 --> 00:51:54,319
for turning three hash to be helmet into

1295
00:51:54,319 --> 00:51:56,480
a threshold-friendly uh protocol in

1296
00:51:56,480 --> 00:51:57,920
practice

1297
00:51:57,920 --> 00:52:01,119
um but uh that's uh sort of intuition at

1298
00:52:01,119 --> 00:52:02,480
this point uh we need to write the code

1299
00:52:02,480 --> 00:52:06,079
to verify that's actually correct um

1300
00:52:06,079 --> 00:52:07,520
however um

1301
00:52:07,520 --> 00:52:08,880
uh i i

1302
00:52:08,880 --> 00:52:11,760
i raised this because uh the the

1303
00:52:11,760 --> 00:52:13,920
original vopr of spec was not written

1304
00:52:13,920 --> 00:52:15,520
with threshold friendliness in white in

1305
00:52:15,520 --> 00:52:17,440
particular had nothing said nothing

1306
00:52:17,440 --> 00:52:20,960
about how to turn this existing uh two

1307
00:52:20,960 --> 00:52:23,760
different helmet of virus into

1308
00:52:23,760 --> 00:52:25,359
or how to implement the server side in a

1309
00:52:25,359 --> 00:52:27,280
threshold friendly manner

1310
00:52:27,280 --> 00:52:29,359
said nothing in terms of how to you know

1311
00:52:29,359 --> 00:52:31,200
actually do the secret sharing how to

1312
00:52:31,200 --> 00:52:32,640
distribute the key amongst all these

1313
00:52:32,640 --> 00:52:34,400
different participants and so on

1314
00:52:34,400 --> 00:52:38,160
um and what the aggregation looked like

1315
00:52:38,160 --> 00:52:39,680
um so

1316
00:52:39,680 --> 00:52:40,559
from

1317
00:52:40,559 --> 00:52:42,000
i guess one perspective you can imagine

1318
00:52:42,000 --> 00:52:43,680
that this is not a functional regression

1319
00:52:43,680 --> 00:52:45,839
in terms of uh you know set of features

1320
00:52:45,839 --> 00:52:47,839
supported by transfer but moving from

1321
00:52:47,839 --> 00:52:50,000
two hash to three hash

1322
00:52:50,000 --> 00:52:51,440
um

1323
00:52:51,440 --> 00:52:53,280
so if we ask the question you know if if

1324
00:52:53,280 --> 00:52:55,119
we do if we actually care about

1325
00:52:55,119 --> 00:52:58,960
threshold friendly uh oprs um uh based

1326
00:52:58,960 --> 00:53:00,400
on the you know the previous scope of

1327
00:53:00,400 --> 00:53:02,079
the document and the current scope of

1328
00:53:02,079 --> 00:53:04,160
the document if the answer is no

1329
00:53:04,160 --> 00:53:06,640
um i think uh we should just

1330
00:53:06,640 --> 00:53:08,559
press on with what's in there now uh

1331
00:53:08,559 --> 00:53:10,480
only pick one particular construction

1332
00:53:10,480 --> 00:53:12,720
that is specifically the more generic

1333
00:53:12,720 --> 00:53:15,839
popuf based on three hashtag helmet um

1334
00:53:15,839 --> 00:53:17,359
simply because it's a generalization and

1335
00:53:17,359 --> 00:53:19,920
it satisfies more use cases

1336
00:53:19,920 --> 00:53:21,359
however

1337
00:53:21,359 --> 00:53:23,760
if people think there are legitimate

1338
00:53:23,760 --> 00:53:28,480
needs uh for threshold friendly oprs um

1339
00:53:28,480 --> 00:53:31,520
and i say needs rather than once um

1340
00:53:31,520 --> 00:53:33,599
because i want to distinguish sort of

1341
00:53:33,599 --> 00:53:36,240
the ability to threshold from the actual

1342
00:53:36,240 --> 00:53:38,720
desire to use this in practice uh i

1343
00:53:38,720 --> 00:53:40,240
don't think it's in our best interest to

1344
00:53:40,240 --> 00:53:43,040
try to specify functionality that people

1345
00:53:43,040 --> 00:53:44,400
will not use that will just further

1346
00:53:44,400 --> 00:53:46,400
complicate things

1347
00:53:46,400 --> 00:53:47,920
but if the answer to this question is

1348
00:53:47,920 --> 00:53:48,720
yes

1349
00:53:48,720 --> 00:53:50,480
there are several other questions that i

1350
00:53:50,480 --> 00:53:52,720
think we need to answer as a group

1351
00:53:52,720 --> 00:53:54,800
first of which is do we now

1352
00:53:54,800 --> 00:53:56,400
do the work to try to

1353
00:53:56,400 --> 00:53:58,000
you know

1354
00:53:58,000 --> 00:54:00,720
show how to uh deploy three hashtag

1355
00:54:00,720 --> 00:54:02,240
helmet in a threshold-friendly manner or

1356
00:54:02,240 --> 00:54:05,359
do we specify three hdp helmet without

1357
00:54:05,359 --> 00:54:07,359
threshold capabilities and two hashtag

1358
00:54:07,359 --> 00:54:09,599
helmet with threshold capabilities

1359
00:54:09,599 --> 00:54:11,440
um and are these treated as sort of

1360
00:54:11,440 --> 00:54:12,960
separate cryptographic objects with

1361
00:54:12,960 --> 00:54:15,920
distinct apis

1362
00:54:16,079 --> 00:54:17,359
and

1363
00:54:17,359 --> 00:54:19,920
i guess importantly in my view what do

1364
00:54:19,920 --> 00:54:21,920
we do about distributed key generation

1365
00:54:21,920 --> 00:54:24,400
which is perhaps the harder problem in

1366
00:54:24,400 --> 00:54:26,000
this space um

1367
00:54:26,000 --> 00:54:28,960
indeed the threshold signing draft frost

1368
00:54:28,960 --> 00:54:30,960
uh kind of punts on this and assumes you

1369
00:54:30,960 --> 00:54:32,800
know either you have some trusted deal

1370
00:54:32,800 --> 00:54:35,200
there that's dealing with um distributed

1371
00:54:35,200 --> 00:54:36,559
key generation

1372
00:54:36,559 --> 00:54:38,960
um or you have some out-of-band protocol

1373
00:54:38,960 --> 00:54:40,480
for other out-of-band protocol for

1374
00:54:40,480 --> 00:54:42,160
actually distributing the keys

1375
00:54:42,160 --> 00:54:45,040
um peterson's uh protocol does not

1376
00:54:45,040 --> 00:54:48,160
generalize to or there is no you know

1377
00:54:48,160 --> 00:54:50,079
security analysis done to convince us

1378
00:54:50,079 --> 00:54:51,839
that peterson's protocol generalizes to

1379
00:54:51,839 --> 00:54:54,400
discrete log protocols uh like either

1380
00:54:54,400 --> 00:54:56,319
these oprs so

1381
00:54:56,319 --> 00:54:57,760
that's really kind of an open question

1382
00:54:57,760 --> 00:55:01,200
of an open research question

1383
00:55:02,160 --> 00:55:04,480
anyways

1384
00:55:05,040 --> 00:55:06,799
that's it for the update um at this

1385
00:55:06,799 --> 00:55:09,359
point i think we need to hear from uh

1386
00:55:09,359 --> 00:55:11,359
you know implementers who uh i guess

1387
00:55:11,359 --> 00:55:14,319
care about use cases of oprs um and care

1388
00:55:14,319 --> 00:55:16,640
about what's in the specification um

1389
00:55:16,640 --> 00:55:17,920
to know whether or not this is heading

1390
00:55:17,920 --> 00:55:19,280
in the right direction

1391
00:55:19,280 --> 00:55:22,640
i believe it is um and

1392
00:55:22,640 --> 00:55:23,440
and

1393
00:55:23,440 --> 00:55:25,520
to clarify what the current direction is

1394
00:55:25,520 --> 00:55:27,920
it is uh simply the uh partially

1395
00:55:27,920 --> 00:55:30,400
oblivious prf construction without any

1396
00:55:30,400 --> 00:55:33,359
threshold stuff in the in the spec

1397
00:55:33,359 --> 00:55:34,799
um

1398
00:55:34,799 --> 00:55:37,040
but i uh i think i think we need to hear

1399
00:55:37,040 --> 00:55:39,280
from others so i i will pause take

1400
00:55:39,280 --> 00:55:41,200
questions there's also a thread in cfrg

1401
00:55:41,200 --> 00:55:42,880
if you have feelings or opinions about

1402
00:55:42,880 --> 00:55:44,720
this

1403
00:55:44,720 --> 00:55:47,279
love to him

1404
00:55:47,359 --> 00:55:49,359
thank you grace

1405
00:55:49,359 --> 00:55:52,400
uh yes bjorn

1406
00:55:53,680 --> 00:55:54,400
so

1407
00:55:54,400 --> 00:55:57,359
regarding this request for the proof for

1408
00:55:57,359 --> 00:55:59,920
the uc proof for the new construction do

1409
00:55:59,920 --> 00:56:01,680
you know whether somebody is already

1410
00:56:01,680 --> 00:56:03,839
working on it

1411
00:56:03,839 --> 00:56:06,240
yeah yes we're actively working on it

1412
00:56:06,240 --> 00:56:08,079
behind the scenes

1413
00:56:08,079 --> 00:56:10,319
because in order to join forces maybe

1414
00:56:10,319 --> 00:56:13,440
because we considered

1415
00:56:13,680 --> 00:56:15,680
working on a proof which considers the

1416
00:56:15,680 --> 00:56:17,760
property of the map since in the current

1417
00:56:17,760 --> 00:56:19,680
map you are uh

1418
00:56:19,680 --> 00:56:22,079
treating the map as a

1419
00:56:22,079 --> 00:56:24,880
ideal randomized random oracle and we

1420
00:56:24,880 --> 00:56:28,079
are aiming at considering to to

1421
00:56:28,079 --> 00:56:30,000
write a proof regarding the uh

1422
00:56:30,000 --> 00:56:31,920
properties of the map just as we we've

1423
00:56:31,920 --> 00:56:34,799
been doing for sea pace so that might uh

1424
00:56:34,799 --> 00:56:37,119
might uh enter in the storyline but if

1425
00:56:37,119 --> 00:56:39,680
you're uh working on this uh

1426
00:56:39,680 --> 00:56:42,160
so we might discuss so that we um join

1427
00:56:42,160 --> 00:56:45,359
forces so that we have less effort uh

1428
00:56:45,359 --> 00:56:46,720
together on that

1429
00:56:46,720 --> 00:56:48,720
yeah i'll follow up offline and uh we

1430
00:56:48,720 --> 00:56:50,799
can chat

1431
00:56:50,799 --> 00:56:52,160
thanks

1432
00:56:52,160 --> 00:56:54,399
chris

1433
00:56:55,280 --> 00:56:56,480
so i have uh

1434
00:56:56,480 --> 00:56:58,640
i've i have one comment but i want to

1435
00:56:58,640 --> 00:57:01,280
start with a kind of clarifying question

1436
00:57:01,280 --> 00:57:04,799
so the new construction requires the

1437
00:57:04,799 --> 00:57:06,880
okay so the the current analysis for the

1438
00:57:06,880 --> 00:57:08,720
new construction is in the generic group

1439
00:57:08,720 --> 00:57:09,680
model

1440
00:57:09,680 --> 00:57:11,760
um algebraic group model

1441
00:57:11,760 --> 00:57:12,400
yeah

1442
00:57:12,400 --> 00:57:13,920
yeah uh

1443
00:57:13,920 --> 00:57:16,480
okay uh so um

1444
00:57:16,480 --> 00:57:18,799
my question is

1445
00:57:18,799 --> 00:57:21,680
does two that two hash diffie-hellman

1446
00:57:21,680 --> 00:57:23,440
make this have the same

1447
00:57:23,440 --> 00:57:26,720
uh is is the analysis for the two hash

1448
00:57:26,720 --> 00:57:29,440
diffie helmet in the same model

1449
00:57:29,440 --> 00:57:32,240
no they're a weaker they're

1450
00:57:32,240 --> 00:57:35,598
they're not in the same model um

1451
00:57:36,319 --> 00:57:39,200
the two hdp helmet is in this uc model

1452
00:57:39,200 --> 00:57:41,200
and three http helmet is in this

1453
00:57:41,200 --> 00:57:43,839
algebraic group model and uh

1454
00:57:43,839 --> 00:57:46,400
we don't quite know how to compare them

1455
00:57:46,400 --> 00:57:48,640
okay okay i mean i think that for that

1456
00:57:48,640 --> 00:57:50,559
reason it might be worth keeping them

1457
00:57:50,559 --> 00:57:53,359
both around um just because if it turns

1458
00:57:53,359 --> 00:57:56,720
out the um the algebraic group models is

1459
00:57:56,720 --> 00:57:58,559
overly optimistic it's nice to have a

1460
00:57:58,559 --> 00:58:00,799
backup but um i'm also trying not to

1461
00:58:00,799 --> 00:58:03,760
make your life too complicated um it's i

1462
00:58:03,760 --> 00:58:07,520
mean i'm fine to write text um i'm less

1463
00:58:07,520 --> 00:58:09,359
fine with specifying things that have

1464
00:58:09,359 --> 00:58:11,839
basically equivalent security um

1465
00:58:11,839 --> 00:58:13,440
uh

1466
00:58:13,440 --> 00:58:14,720
but i think you can argue that they

1467
00:58:14,720 --> 00:58:17,119
don't have equivalent security if one if

1468
00:58:17,119 --> 00:58:19,119
one isn't provably secure in this in the

1469
00:58:19,119 --> 00:58:22,079
model of the other so i mean um we can

1470
00:58:22,079 --> 00:58:26,079
take that question offline i guess um

1471
00:58:26,079 --> 00:58:27,280
sure

1472
00:58:27,280 --> 00:58:29,520
okay um the other thing uh the other

1473
00:58:29,520 --> 00:58:31,200
thing i wanted to say uh the the

1474
00:58:31,200 --> 00:58:32,640
thresholding

1475
00:58:32,640 --> 00:58:34,720
bit makes things very complicated and i

1476
00:58:34,720 --> 00:58:36,640
would say without an explicit use case

1477
00:58:36,640 --> 00:58:38,160
that someone cares about i think it

1478
00:58:38,160 --> 00:58:39,680
shouldn't be in the draft just to keep

1479
00:58:39,680 --> 00:58:41,839
things simpler

1480
00:58:41,839 --> 00:58:43,040
right um

1481
00:58:43,040 --> 00:58:45,040
and i think that's my intuition as well

1482
00:58:45,040 --> 00:58:47,680
uh which means uh

1483
00:58:47,680 --> 00:58:48,960
you're effectively left with the

1484
00:58:48,960 --> 00:58:50,720
question you know if you don't care

1485
00:58:50,720 --> 00:58:52,160
about thresholding

1486
00:58:52,160 --> 00:58:53,119
do you

1487
00:58:53,119 --> 00:58:54,799
just have one construction or do you

1488
00:58:54,799 --> 00:58:56,640
have both constructions and based on

1489
00:58:56,640 --> 00:59:00,160
this slide um i from my implementers and

1490
00:59:00,160 --> 00:59:02,559
a use case perspective i see no reason

1491
00:59:02,559 --> 00:59:07,119
to have both okay thank you

1492
00:59:10,000 --> 00:59:12,319
jonathan

1493
00:59:12,319 --> 00:59:13,200
um

1494
00:59:13,200 --> 00:59:14,640
just as a

1495
00:59:14,640 --> 00:59:16,720
a clarifying question could you speak a

1496
00:59:16,720 --> 00:59:19,839
bit more about how you ensure that

1497
00:59:19,839 --> 00:59:20,720
the

1498
00:59:20,720 --> 00:59:24,160
uh final parameter the public parameter

1499
00:59:24,160 --> 00:59:26,400
isn't just like the person's ip address

1500
00:59:26,400 --> 00:59:28,400
or like how you ensure that it's not

1501
00:59:28,400 --> 00:59:30,960
like directly bucketing people

1502
00:59:30,960 --> 00:59:33,119
this this specification does not touch

1503
00:59:33,119 --> 00:59:34,960
on that whatsoever it is completely

1504
00:59:34,960 --> 00:59:36,319
application dependent to determine

1505
00:59:36,319 --> 00:59:39,440
whether or not that's like you know

1506
00:59:39,440 --> 00:59:41,440
revealing in a privacy specific specific

1507
00:59:41,440 --> 00:59:43,359
way

1508
00:59:43,359 --> 00:59:44,720
okay there's nothing you can do with

1509
00:59:44,720 --> 00:59:46,319
this protocol level to ensure that it's

1510
00:59:46,319 --> 00:59:47,520
not that

1511
00:59:47,520 --> 00:59:49,280
ah okay cool

1512
00:59:49,280 --> 00:59:50,720
in which case maybe we should just stick

1513
00:59:50,720 --> 00:59:53,359
with the two perhaps

1514
00:59:53,359 --> 00:59:55,760
like harder to improve

1515
00:59:55,760 --> 00:59:58,880
uh the the 2dh like if we can just say

1516
00:59:58,880 --> 01:00:00,400
like

1517
01:00:00,400 --> 01:00:02,400
this has huge potential for abuse and

1518
01:00:02,400 --> 01:00:04,319
there's nothing we can do about it then

1519
01:00:04,319 --> 01:00:06,160
just don't do it

1520
01:00:06,160 --> 01:00:07,760
so i'm not sure i agree in particular

1521
01:00:07,760 --> 01:00:09,200
because you can imagine the client just

1522
01:00:09,200 --> 01:00:11,520
like telling the server hey here's my ip

1523
01:00:11,520 --> 01:00:12,559
address

1524
01:00:12,559 --> 01:00:14,559
rather than accidentally mixing it into

1525
01:00:14,559 --> 01:00:17,200
the opr um there are lots of ways in

1526
01:00:17,200 --> 01:00:18,799
which you can reveal the same sensitive

1527
01:00:18,799 --> 01:00:20,240
information so

1528
01:00:20,240 --> 01:00:21,520
um

1529
01:00:21,520 --> 01:00:24,640
yeah i i i think uh it's incumbent on

1530
01:00:24,640 --> 01:00:26,880
applications using the theoprf to ensure

1531
01:00:26,880 --> 01:00:29,280
that the you know the the width of the

1532
01:00:29,280 --> 01:00:31,839
metadata and the type of metadata is not

1533
01:00:31,839 --> 01:00:34,000
revealing in any particular way

1534
01:00:34,000 --> 01:00:35,440
um

1535
01:00:35,440 --> 01:00:37,760
i don't think that's uh you know

1536
01:00:37,760 --> 01:00:39,839
anything we need to constrain further

1537
01:00:39,839 --> 01:00:42,400
at this layer

1538
01:00:42,400 --> 01:00:44,240
okay thank you

1539
01:00:44,240 --> 01:00:47,279
chris are you still in the queue

1540
01:00:50,000 --> 01:00:52,240
okay

1541
01:00:52,480 --> 01:00:53,200
hi

1542
01:00:53,200 --> 01:00:55,359
sophia silly from cloudflare just to

1543
01:00:55,359 --> 01:00:57,680
clarify also just leave it for whatever

1544
01:00:57,680 --> 01:00:59,040
that i was saying

1545
01:00:59,040 --> 01:01:01,520
um in the too hash th construction also

1546
01:01:01,520 --> 01:01:02,799
there's a way

1547
01:01:02,799 --> 01:01:04,480
um in which

1548
01:01:04,480 --> 01:01:05,280
uh

1549
01:01:05,280 --> 01:01:07,760
kind of a unlinkability attack can also

1550
01:01:07,760 --> 01:01:09,280
happen because there's no way that you

1551
01:01:09,280 --> 01:01:11,359
can actually check that the server is

1552
01:01:11,359 --> 01:01:13,440
not imposing a rotation of the key that

1553
01:01:13,440 --> 01:01:15,599
is too small as to for example indeed

1554
01:01:15,599 --> 01:01:17,760
create a linkability attack with the

1555
01:01:17,760 --> 01:01:19,920
metadata constructions at least you are

1556
01:01:19,920 --> 01:01:22,160
assured that that is not happening but

1557
01:01:22,160 --> 01:01:25,119
it is the decision of the application to

1558
01:01:25,119 --> 01:01:27,359
actually define in such a correct way

1559
01:01:27,359 --> 01:01:29,359
which kind of metadata you are passing

1560
01:01:29,359 --> 01:01:31,520
um so it's not of the contraction itself

1561
01:01:31,520 --> 01:01:33,520
here presented in the cfsg but rather

1562
01:01:33,520 --> 01:01:35,040
when it's going to be implemented in the

1563
01:01:35,040 --> 01:01:38,079
application but just to know that in the

1564
01:01:38,079 --> 01:01:40,319
other construction in the 2-hdh you also

1565
01:01:40,319 --> 01:01:42,559
can have these problems because if you

1566
01:01:42,559 --> 01:01:44,720
rotate the key too often then you can

1567
01:01:44,720 --> 01:01:48,720
also be diminishing unlinkability

1568
01:01:49,280 --> 01:01:52,520
thank you

1569
01:02:04,240 --> 01:02:07,839
okay thank you

1570
01:02:08,799 --> 01:02:10,079
so now

1571
01:02:10,079 --> 01:02:11,839
bookmarks

1572
01:02:11,839 --> 01:02:16,720
uh shortcash and gamer sir kdf

1573
01:02:16,720 --> 01:02:20,118
please book

1574
01:02:30,160 --> 01:02:32,079
you can select

1575
01:02:32,079 --> 01:02:35,839
okay let me see if i can share my slides

1576
01:02:37,119 --> 01:02:39,359
yes

1577
01:02:39,920 --> 01:02:41,680
uh

1578
01:02:41,680 --> 01:02:44,558
let's go to here

1579
01:02:45,440 --> 01:02:46,640
share

1580
01:02:46,640 --> 01:02:47,680
yes

1581
01:02:47,680 --> 01:02:49,280
please stop

1582
01:02:49,280 --> 01:02:50,799
okay

1583
01:02:50,799 --> 01:02:52,480
so

1584
01:02:52,480 --> 01:02:55,440
i'm sitting here as a uh as i call

1585
01:02:55,440 --> 01:02:58,400
myself a crypto plumber i'm the guy who

1586
01:02:58,400 --> 01:03:00,880
takes your work and tries to put it to

1587
01:03:00,880 --> 01:03:02,559
some use

1588
01:03:02,559 --> 01:03:06,000
and recently i have been dealing with

1589
01:03:06,000 --> 01:03:08,880
small hashes and working a lot with kmac

1590
01:03:08,880 --> 01:03:10,480
i like to share some of my experiences

1591
01:03:10,480 --> 01:03:12,640
and some of my challenges here with you

1592
01:03:12,640 --> 01:03:14,880
and ask for guidelines coming out of

1593
01:03:14,880 --> 01:03:17,359
cfrg

1594
01:03:17,359 --> 01:03:19,839
uh let's see how does this work

1595
01:03:19,839 --> 01:03:22,559
how do i get into my slides

1596
01:03:22,559 --> 01:03:24,799
uh go this way just past my slides ah

1597
01:03:24,799 --> 01:03:27,440
there we go uh so first of all small

1598
01:03:27,440 --> 01:03:28,480
hashes

1599
01:03:28,480 --> 01:03:31,200
it's hopefully a design compromise why

1600
01:03:31,200 --> 01:03:33,359
somebody's using a small hatch and

1601
01:03:33,359 --> 01:03:35,119
hopefully they looked at acceptable

1602
01:03:35,119 --> 01:03:38,640
risks within a constrained environment

1603
01:03:38,640 --> 01:03:40,960
and there are two cases that i've looked

1604
01:03:40,960 --> 01:03:43,680
at dealing with small hashes one is just

1605
01:03:43,680 --> 01:03:46,799
a hash over clear text or the other case

1606
01:03:46,799 --> 01:03:50,079
is where it's a keyed hash

1607
01:03:50,079 --> 01:03:50,960
and

1608
01:03:50,960 --> 01:03:53,680
point out that small hashes have existed

1609
01:03:53,680 --> 01:03:56,160
risks to key attacks

1610
01:03:56,160 --> 01:03:58,240
recognize that and i'll be talking about

1611
01:03:58,240 --> 01:04:00,799
that later

1612
01:04:00,799 --> 01:04:01,839
and

1613
01:04:01,839 --> 01:04:04,160
the other thing that we

1614
01:04:04,160 --> 01:04:07,039
i've always been using a probabilistic

1615
01:04:07,039 --> 01:04:11,520
model of what is the risk of a collision

1616
01:04:11,520 --> 01:04:12,960
but the reason you point out to me on

1617
01:04:12,960 --> 01:04:15,839
this the cfrg list that modern hashing

1618
01:04:15,839 --> 01:04:18,160
hardware has changed the game we no

1619
01:04:18,160 --> 01:04:20,720
longer say oh it's g it's hard to

1620
01:04:20,720 --> 01:04:23,039
generate a million

1621
01:04:23,039 --> 01:04:25,680
10 million 6 million

1622
01:04:25,680 --> 01:04:27,280
hashes

1623
01:04:27,280 --> 01:04:30,000
to try to force a collision to try to do

1624
01:04:30,000 --> 01:04:33,599
an attack it's no longer the case

1625
01:04:33,599 --> 01:04:35,440
so the math preclusive probability is no

1626
01:04:35,440 --> 01:04:37,839
longer sufficient we have to look at the

1627
01:04:37,839 --> 01:04:40,720
problem differently than we have in the

1628
01:04:40,720 --> 01:04:41,920
past

1629
01:04:41,920 --> 01:04:43,760
and that poses a problem for me trying

1630
01:04:43,760 --> 01:04:45,839
to figure out what can i do

1631
01:04:45,839 --> 01:04:48,880
how can i what is my real risk and how

1632
01:04:48,880 --> 01:04:52,000
can i mitigate it

1633
01:04:52,720 --> 01:04:56,160
so i need an understandable guidelines

1634
01:04:56,160 --> 01:04:58,079
for us developers

1635
01:04:58,079 --> 01:05:00,319
how to measure the risks to hash

1636
01:05:00,319 --> 01:05:01,760
compromise

1637
01:05:01,760 --> 01:05:06,240
and what is the exposure to attack

1638
01:05:06,240 --> 01:05:09,280
some good guidelines for this i've seen

1639
01:05:09,280 --> 01:05:13,119
some really bad things out there um i i

1640
01:05:13,119 --> 01:05:15,520
pay attention i work here

1641
01:05:15,520 --> 01:05:18,160
um come to you people for for guidelines

1642
01:05:18,160 --> 01:05:19,760
other people don't they just read what

1643
01:05:19,760 --> 01:05:22,000
literature is readily available and look

1644
01:05:22,000 --> 01:05:25,280
at nav link 2 which is the

1645
01:05:25,280 --> 01:05:27,359
the command and control protocol for

1646
01:05:27,359 --> 01:05:29,440
unmanned aircraft

1647
01:05:29,440 --> 01:05:31,839
they put in an authentication

1648
01:05:31,839 --> 01:05:34,839
field a 6-bit key hash for message

1649
01:05:34,839 --> 01:05:37,200
authentication you can go look at it and

1650
01:05:37,200 --> 01:05:39,920
i'll talk about that more later

1651
01:05:39,920 --> 01:05:41,119
so

1652
01:05:41,119 --> 01:05:43,599
with the

1653
01:05:47,039 --> 01:05:50,799
this whole area of of small hashes is

1654
01:05:50,799 --> 01:05:53,359
there's no real good guidelines you have

1655
01:05:53,359 --> 01:05:55,039
to be willing to plow through the

1656
01:05:55,039 --> 01:05:56,079
literature

1657
01:05:56,079 --> 01:05:59,440
talk with people and find out what are

1658
01:05:59,440 --> 01:06:02,400
what are things are happening and

1659
01:06:02,400 --> 01:06:05,359
what can um

1660
01:06:05,359 --> 01:06:08,319
you do within a constrained environment

1661
01:06:08,319 --> 01:06:10,480
where you only have so many bytes to

1662
01:06:10,480 --> 01:06:11,520
work with

1663
01:06:11,520 --> 01:06:14,799
you only have so much time to work with

1664
01:06:14,799 --> 01:06:17,039
and you only have so much memory slash

1665
01:06:17,039 --> 01:06:19,839
processing part of work with so what

1666
01:06:19,839 --> 01:06:22,000
guidelines can we have can we put

1667
01:06:22,000 --> 01:06:24,880
forward for making hashes which are

1668
01:06:24,880 --> 01:06:27,200
eight bytes six bytes

1669
01:06:27,200 --> 01:06:29,520
don't go that way

1670
01:06:29,520 --> 01:06:30,640
or

1671
01:06:30,640 --> 01:06:32,480
the risk to keys

1672
01:06:32,480 --> 01:06:34,319
and and what that means

1673
01:06:34,319 --> 01:06:36,960
um there is nothing that somebody can

1674
01:06:36,960 --> 01:06:39,760
point me to read this through to get um

1675
01:06:39,760 --> 01:06:42,960
to get a good understanding so one of

1676
01:06:42,960 --> 01:06:47,039
the first thing i'm asking cfrg form is

1677
01:06:47,039 --> 01:06:50,400
to work on guidelines in this area

1678
01:06:50,400 --> 01:06:53,760
i'm a reviewer i can help author it but

1679
01:06:53,760 --> 01:06:56,160
no way do i have the knowledge to be

1680
01:06:56,160 --> 01:06:58,720
able to be the principal

1681
01:06:58,720 --> 01:07:01,520
on such such a document but

1682
01:07:01,520 --> 01:07:04,319
working out there people talking to me

1683
01:07:04,319 --> 01:07:07,440
particularly in this area i find that

1684
01:07:07,440 --> 01:07:10,240
they say well bob what should we do

1685
01:07:10,240 --> 01:07:13,119
my answer is i really don't know

1686
01:07:13,119 --> 01:07:14,559
um so that's what i have to say about

1687
01:07:14,559 --> 01:07:18,559
small hashes um you'll see it in my uh

1688
01:07:18,559 --> 01:07:21,839
my work in uh um drip for the unmanned

1689
01:07:21,839 --> 01:07:24,240
aircraft i have a

1690
01:07:24,240 --> 01:07:27,280
64-bit hash and we talk about attack

1691
01:07:27,280 --> 01:07:28,640
against that

1692
01:07:28,640 --> 01:07:31,359
uh and i just mentioned here a uh a a

1693
01:07:31,359 --> 01:07:34,400
six spike keyed hash that's in in map

1694
01:07:34,400 --> 01:07:35,920
link so

1695
01:07:35,920 --> 01:07:39,359
there's some guidelines needed here

1696
01:07:39,359 --> 01:07:41,680
that's all i have to have in my slides

1697
01:07:41,680 --> 01:07:44,960
here on hashes and again it's i'm asking

1698
01:07:44,960 --> 01:07:49,359
for guidance and putting things together

1699
01:07:49,680 --> 01:07:50,720
now

1700
01:07:50,720 --> 01:07:52,400
my work with kmac though is much

1701
01:07:52,400 --> 01:07:53,599
different

1702
01:07:53,599 --> 01:07:55,680
to me it looks like a sadly overlooked

1703
01:07:55,680 --> 01:07:56,720
function

1704
01:07:56,720 --> 01:07:58,079
um

1705
01:07:58,079 --> 01:07:59,200
i know that

1706
01:07:59,200 --> 01:08:01,920
this will say why by the deuce saw three

1707
01:08:01,920 --> 01:08:04,400
it's not really a processing advantage

1708
01:08:04,400 --> 01:08:08,160
over saw 256 about the same amount of

1709
01:08:08,160 --> 01:08:11,839
resources to get it done except

1710
01:08:11,839 --> 01:08:13,039
kmac

1711
01:08:13,039 --> 01:08:15,039
is one

1712
01:08:15,039 --> 01:08:16,640
cat check function

1713
01:08:16,640 --> 01:08:20,158
where it's hmac is two shaw functions

1714
01:08:20,158 --> 01:08:21,359
and again when i'm working with

1715
01:08:21,359 --> 01:08:23,279
constrained environments

1716
01:08:23,279 --> 01:08:25,839
and i wonder about big heavy hit servers

1717
01:08:25,839 --> 01:08:28,319
that they may have this the same issue

1718
01:08:28,319 --> 01:08:29,920
that

1719
01:08:29,920 --> 01:08:33,359
half the processing cost is something of

1720
01:08:33,359 --> 01:08:34,799
importance

1721
01:08:34,799 --> 01:08:36,080
um

1722
01:08:36,080 --> 01:08:38,799
another thing which i have over over the

1723
01:08:38,799 --> 01:08:40,880
decades have a deal with well i only

1724
01:08:40,880 --> 01:08:44,479
need so many um bites for my uh my hash

1725
01:08:44,479 --> 01:08:46,000
i'm truncating it

1726
01:08:46,000 --> 01:08:47,920
i need a short hash

1727
01:08:47,920 --> 01:08:50,399
how do i truncate it which bites do i

1728
01:08:50,399 --> 01:08:54,399
take out to get my hash

1729
01:08:54,399 --> 01:08:55,439
and

1730
01:08:55,439 --> 01:08:57,120
so

1731
01:08:57,120 --> 01:08:58,399
kmac

1732
01:08:58,399 --> 01:09:00,640
you tell it how many bites you want

1733
01:09:00,640 --> 01:09:02,399
there's no

1734
01:09:02,399 --> 01:09:05,040
designer thought process and what they

1735
01:09:05,040 --> 01:09:08,080
should do they say i need eight bytes

1736
01:09:08,080 --> 01:09:10,238
get eight bytes out

1737
01:09:10,238 --> 01:09:12,080
um

1738
01:09:12,080 --> 01:09:16,319
and of course we have recently on uh

1739
01:09:16,319 --> 01:09:18,080
been having a discussion

1740
01:09:18,080 --> 01:09:19,439
that

1741
01:09:19,439 --> 01:09:21,679
in and fips 202

1742
01:09:21,679 --> 01:09:23,920
um

1743
01:09:24,319 --> 01:09:28,560
shake which kmac is built on is an x off

1744
01:09:28,560 --> 01:09:29,920
and there's questions is there a

1745
01:09:29,920 --> 01:09:33,040
difference between a hash and exoth me i

1746
01:09:33,040 --> 01:09:34,880
don't see the difference i only see that

1747
01:09:34,880 --> 01:09:36,479
it's a question of

1748
01:09:36,479 --> 01:09:39,359
the security strength problem

1749
01:09:39,359 --> 01:09:40,560
we need some maybe some more

1750
01:09:40,560 --> 01:09:42,560
clarification on that because that was

1751
01:09:42,560 --> 01:09:44,479
recently brought up me i didn't see it

1752
01:09:44,479 --> 01:09:47,920
as as a problem but apparently some do

1753
01:09:47,920 --> 01:09:49,759
and maybe we need some clarification on

1754
01:09:49,759 --> 01:09:53,359
that so kmac as a keen hash i look as a

1755
01:09:53,359 --> 01:09:54,238
winner

1756
01:09:54,238 --> 01:09:57,440
in terms of design and in terms of when

1757
01:09:57,440 --> 01:09:58,960
i'm working on these these constrained

1758
01:09:58,960 --> 01:10:02,320
devices i save that processing i save

1759
01:10:02,320 --> 01:10:05,120
their time

1760
01:10:05,440 --> 01:10:08,320
but i take it one step further

1761
01:10:08,320 --> 01:10:10,880
and that's i want to use as a kdf

1762
01:10:10,880 --> 01:10:14,159
particular interest here is with ecdh

1763
01:10:14,159 --> 01:10:16,159
the problem is or the challenges if you

1764
01:10:16,159 --> 01:10:18,120
go to uh um

1765
01:10:18,120 --> 01:10:19,920
856

1766
01:10:19,920 --> 01:10:20,719
c

1767
01:10:20,719 --> 01:10:22,560
release one

1768
01:10:22,560 --> 01:10:25,360
it does not recommend kmac as a two-step

1769
01:10:25,360 --> 01:10:27,199
kdf until

1770
01:10:27,199 --> 01:10:28,840
108 gets

1771
01:10:28,840 --> 01:10:31,760
revised but how long

1772
01:10:31,760 --> 01:10:34,480
and there is no i can't find any draft

1773
01:10:34,480 --> 01:10:37,040
of revision for 108 what's happening

1774
01:10:37,040 --> 01:10:40,000
there why do they have why do we have to

1775
01:10:40,000 --> 01:10:43,120
revision for 108 before we can seriously

1776
01:10:43,120 --> 01:10:47,040
look at using kmac as a kdf because when

1777
01:10:47,040 --> 01:10:48,560
you look at

1778
01:10:48,560 --> 01:10:51,440
hkdf and you look at kmac you ask the

1779
01:10:51,440 --> 01:10:54,239
question what is the difference

1780
01:10:54,239 --> 01:10:55,679
you have the

1781
01:10:55,679 --> 01:10:59,679
expand and contract um function in hkdf

1782
01:10:59,679 --> 01:11:01,520
you look at feed the input into the

1783
01:11:01,520 --> 01:11:03,679
sponge you look at squeeze the output

1784
01:11:03,679 --> 01:11:06,159
out of the sponge you ask the question

1785
01:11:06,159 --> 01:11:07,840
what is the difference

1786
01:11:07,840 --> 01:11:10,480
i have some guidance from team ketchup

1787
01:11:10,480 --> 01:11:11,679
on this

1788
01:11:11,679 --> 01:11:13,679
that

1789
01:11:13,679 --> 01:11:15,360
leading me to believe that

1790
01:11:15,360 --> 01:11:18,719
8k mac is a valid kdf

1791
01:11:18,719 --> 01:11:21,920
for a a diffie-hellman uh

1792
01:11:21,920 --> 01:11:23,840
key extraction function

1793
01:11:23,840 --> 01:11:26,880
and the big point about this is that

1794
01:11:26,880 --> 01:11:28,960
whereas

1795
01:11:28,960 --> 01:11:31,120
kmac compared to

1796
01:11:31,120 --> 01:11:34,080
hvac is a two to one

1797
01:11:34,080 --> 01:11:36,480
here it's a four to one at least a four

1798
01:11:36,480 --> 01:11:40,239
to one because hkdf does two hmac

1799
01:11:40,239 --> 01:11:42,000
operations

1800
01:11:42,000 --> 01:11:44,080
where here we're doing one k map

1801
01:11:44,080 --> 01:11:47,040
function so again i need to derive a key

1802
01:11:47,040 --> 01:11:48,400
i need to derive it with the least

1803
01:11:48,400 --> 01:11:50,159
amount of resources on a constrained

1804
01:11:50,159 --> 01:11:52,800
system and oh by the way one of the

1805
01:11:52,800 --> 01:11:55,280
summer jokes in unmanned aircraft they

1806
01:11:55,280 --> 01:11:57,440
have these high-definition cameras

1807
01:11:57,440 --> 01:11:59,840
streaming a lot of data and you say well

1808
01:11:59,840 --> 01:12:01,600
can i have some of the processing power

1809
01:12:01,600 --> 01:12:04,560
no you can't you can't disrupt plus also

1810
01:12:04,560 --> 01:12:07,520
it's in the special processing so it it

1811
01:12:07,520 --> 01:12:10,480
still becomes a problem that where i get

1812
01:12:10,480 --> 01:12:13,040
the processing power for for when i have

1813
01:12:13,040 --> 01:12:15,840
to um key generation or anything like

1814
01:12:15,840 --> 01:12:16,719
that

1815
01:12:16,719 --> 01:12:20,880
and so um looking at savings here is is

1816
01:12:20,880 --> 01:12:23,280
important to me in the design

1817
01:12:23,280 --> 01:12:24,320
um

1818
01:12:24,320 --> 01:12:25,760
and

1819
01:12:25,760 --> 01:12:27,679
so there's that but then there comes the

1820
01:12:27,679 --> 01:12:31,040
question of i need multiple shared

1821
01:12:31,040 --> 01:12:35,360
secrets how to do it i need two 128-bit

1822
01:12:35,360 --> 01:12:36,480
keys

1823
01:12:36,480 --> 01:12:40,560
can i run kmac to put out 256 bits and

1824
01:12:40,560 --> 01:12:42,800
then split it in half to yield two

1825
01:12:42,800 --> 01:12:45,520
unique case of 128 bit strength

1826
01:12:45,520 --> 01:12:48,080
i can't find anything in the literature

1827
01:12:48,080 --> 01:12:51,120
which gives me clear direction on this

1828
01:12:51,120 --> 01:12:52,719
can i break no

1829
01:12:52,719 --> 01:12:54,960
does breaking one of those keys break

1830
01:12:54,960 --> 01:12:56,719
the other

1831
01:12:56,719 --> 01:12:59,199
again i have not found anything on

1832
01:12:59,199 --> 01:13:02,800
guidelines on this and what to do

1833
01:13:02,800 --> 01:13:04,719
it still be cheaper to run the kmac

1834
01:13:04,719 --> 01:13:07,840
twice than hkdf if i need just two keys

1835
01:13:07,840 --> 01:13:09,600
um and there's a question of how to do a

1836
01:13:09,600 --> 01:13:11,520
key hierarchy there's efficient way to

1837
01:13:11,520 --> 01:13:15,040
do key hierarchy um using kmac

1838
01:13:15,040 --> 01:13:16,960
versus way that we have done key

1839
01:13:16,960 --> 01:13:19,120
hierarchies in the past

1840
01:13:19,120 --> 01:13:21,920
so i look at kmac as this looks like a

1841
01:13:21,920 --> 01:13:25,760
very powerful tool which has been

1842
01:13:25,760 --> 01:13:29,199
very much neglected by the community

1843
01:13:29,199 --> 01:13:32,400
and without the guidelines for protocol

1844
01:13:32,400 --> 01:13:35,360
developers to say here is something else

1845
01:13:35,360 --> 01:13:38,360
worthwhile

1846
01:13:42,159 --> 01:13:46,000
and along this cfrg led on eddsa

1847
01:13:46,000 --> 01:13:48,320
we still don't have uh

1848
01:13:48,320 --> 01:13:50,679
this to have come out of

1849
01:13:50,679 --> 01:13:54,880
185-6 for using edsa yet we are using

1850
01:13:54,880 --> 01:13:59,840
edsa so can cfrg lead with kmac broader

1851
01:13:59,840 --> 01:14:00,960
use

1852
01:14:00,960 --> 01:14:02,480
particularly

1853
01:14:02,480 --> 01:14:04,960
note that once this finishes with the

1854
01:14:04,960 --> 01:14:08,080
light crypto competition

1855
01:14:08,080 --> 01:14:11,520
there are kmac equivalences in

1856
01:14:11,520 --> 01:14:13,679
many of the proposed algorithms

1857
01:14:13,679 --> 01:14:16,080
particularly kudiak which very much it's

1858
01:14:16,080 --> 01:14:18,000
that's a ketchik

1859
01:14:18,000 --> 01:14:21,600
function uh so we'd be looking again in

1860
01:14:21,600 --> 01:14:25,360
the iot world in the constrained systems

1861
01:14:25,360 --> 01:14:27,520
of looking very heavily at

1862
01:14:27,520 --> 01:14:29,199
at using one of these lightweight

1863
01:14:29,199 --> 01:14:31,920
cryptos to be able to use a kmac

1864
01:14:31,920 --> 01:14:35,520
construction for both keyed hash and for

1865
01:14:35,520 --> 01:14:37,360
kdf

1866
01:14:37,360 --> 01:14:38,640
uh so

1867
01:14:38,640 --> 01:14:41,280
can we get cfrg to produce guidelines

1868
01:14:41,280 --> 01:14:44,560
encouraging kmac usage and then later a

1869
01:14:44,560 --> 01:14:46,239
lightweight crypto

1870
01:14:46,239 --> 01:14:47,920
option for

1871
01:14:47,920 --> 01:14:48,880
such

1872
01:14:48,880 --> 01:14:51,120
work

1873
01:14:51,679 --> 01:14:52,960
and

1874
01:14:52,960 --> 01:14:55,120
if we were to do this we're less likely

1875
01:14:55,120 --> 01:14:58,239
to see bad designs elsewhere if you look

1876
01:14:58,239 --> 01:15:00,719
again at what map link 2 did the fact

1877
01:15:00,719 --> 01:15:03,040
that they just do a shaw on a shared

1878
01:15:03,040 --> 01:15:04,960
secret concatenated with them with parts

1879
01:15:04,960 --> 01:15:07,679
of the message and a time stamp

1880
01:15:07,679 --> 01:15:08,480
and

1881
01:15:08,480 --> 01:15:10,560
i was there in 96

1882
01:15:10,560 --> 01:15:14,159
when when when um hugo did his first

1883
01:15:14,159 --> 01:15:15,679
presentation

1884
01:15:15,679 --> 01:15:18,560
and and why we don't do this and why we

1885
01:15:18,560 --> 01:15:20,560
need hmac

1886
01:15:20,560 --> 01:15:23,920
so this is six 25 years ago we said this

1887
01:15:23,920 --> 01:15:25,840
was bad design

1888
01:15:25,840 --> 01:15:27,360
somebody doing something now they have

1889
01:15:27,360 --> 01:15:28,880
nothing to look at

1890
01:15:28,880 --> 01:15:30,640
they have nothing to look at and say

1891
01:15:30,640 --> 01:15:32,800
guidance you don't do it this way here

1892
01:15:32,800 --> 01:15:35,600
is how this thing this server design

1893
01:15:35,600 --> 01:15:37,679
can be attacked

1894
01:15:37,679 --> 01:15:40,080
so we have here is a case of a bad

1895
01:15:40,080 --> 01:15:41,760
design

1896
01:15:41,760 --> 01:15:43,600
uh at least when you look at literature

1897
01:15:43,600 --> 01:15:45,520
why we did hmac

1898
01:15:45,520 --> 01:15:47,920
and yet this is really recent this is

1899
01:15:47,920 --> 01:15:50,400
only five years old

1900
01:15:50,400 --> 01:15:51,440
uh

1901
01:15:51,440 --> 01:15:53,280
and so it's a problem where is our

1902
01:15:53,280 --> 01:15:55,600
guidance for these these sorts of things

1903
01:15:55,600 --> 01:15:58,480
i think that is where cfrg comes in

1904
01:15:58,480 --> 01:16:00,560
uh i think this is a role that cfrg

1905
01:16:00,560 --> 01:16:03,520
needs to do uh you you are the people

1906
01:16:03,520 --> 01:16:05,280
this is a place where the experts live

1907
01:16:05,280 --> 01:16:07,440
on this stuff where the knowledge lives

1908
01:16:07,440 --> 01:16:08,800
and this is where this sort of

1909
01:16:08,800 --> 01:16:10,719
guidelines should come out

1910
01:16:10,719 --> 01:16:14,560
and i be very happy to work to produce

1911
01:16:14,560 --> 01:16:16,960
these guidelines but i can't leave it i

1912
01:16:16,960 --> 01:16:18,800
have to turn to you people for guidance

1913
01:16:18,800 --> 01:16:21,520
on that so that is my

1914
01:16:21,520 --> 01:16:24,400
my material i'm doing small hashes i

1915
01:16:24,400 --> 01:16:26,880
need to do small hashes i have payloads

1916
01:16:26,880 --> 01:16:28,960
i am so highly constrained on how much

1917
01:16:28,960 --> 01:16:31,600
data i can put out so but i need to then

1918
01:16:31,600 --> 01:16:34,080
become an intelligent balance or

1919
01:16:34,080 --> 01:16:36,640
intelligent risk mitigation when i use

1920
01:16:36,640 --> 01:16:39,440
small hashes i have minimal processing

1921
01:16:39,440 --> 01:16:42,560
power i have minimal time to get it done

1922
01:16:42,560 --> 01:16:45,520
how can i do this more efficiently

1923
01:16:45,520 --> 01:16:47,840
so that is where i'm coming from on this

1924
01:16:47,840 --> 01:16:50,320
and i'm turning to the people here for

1925
01:16:50,320 --> 01:16:52,000
your help

1926
01:16:52,000 --> 01:16:53,760
and i will participate

1927
01:16:53,760 --> 01:16:56,239
and that's my my material and i'm now

1928
01:16:56,239 --> 01:16:58,480
open for questions and for comments and

1929
01:16:58,480 --> 01:17:00,159
i'll grip and grab my kevlar suit and

1930
01:17:00,159 --> 01:17:03,799
put it on if needed

1931
01:17:06,560 --> 01:17:09,280
is awesome

1932
01:17:11,440 --> 01:17:13,520
watson lad

1933
01:17:13,520 --> 01:17:15,120
at the start of your presentation i was

1934
01:17:15,120 --> 01:17:16,800
a little confused when you're talking

1935
01:17:16,800 --> 01:17:19,760
about 48-bit hashtags are these

1936
01:17:19,760 --> 01:17:22,239
message authentication codes that that

1937
01:17:22,239 --> 01:17:24,000
serve you are authenticating a message

1938
01:17:24,000 --> 01:17:25,280
and you can only

1939
01:17:25,280 --> 01:17:27,920
have 48 bits for that or is it

1940
01:17:27,920 --> 01:17:29,360
are you trying or they're trying to be

1941
01:17:29,360 --> 01:17:31,760
used as a hash function

1942
01:17:31,760 --> 01:17:32,800
um

1943
01:17:32,800 --> 01:17:35,199
that particular case map link that is a

1944
01:17:35,199 --> 01:17:37,440
message authentication

1945
01:17:37,440 --> 01:17:39,280
um and once if you look at what we're

1946
01:17:39,280 --> 01:17:41,360
doing in

1947
01:17:41,360 --> 01:17:44,719
the draft ietf drip off

1948
01:17:44,719 --> 01:17:47,440
um there it is an um

1949
01:17:47,440 --> 01:17:49,520
we're arguing internally should be an 8

1950
01:17:49,520 --> 01:17:52,560
or 12 byte hash can we get by with an 8

1951
01:17:52,560 --> 01:17:54,880
byte hash where it's a hash of one

1952
01:17:54,880 --> 01:17:58,239
message authenticated in a later message

1953
01:17:58,239 --> 01:18:01,040
because we can't add a an authenticated

1954
01:18:01,040 --> 01:18:03,199
hash into the original message so we

1955
01:18:03,199 --> 01:18:05,600
follow it later with another mass hat

1956
01:18:05,600 --> 01:18:07,600
another message where we take the hash

1957
01:18:07,600 --> 01:18:09,920
and we authenticate it

1958
01:18:09,920 --> 01:18:13,679
uh and so how small can we get by with

1959
01:18:13,679 --> 01:18:15,920
the hash size there

1960
01:18:15,920 --> 01:18:18,719
such that it's just a hash of a message

1961
01:18:18,719 --> 01:18:21,440
which we are including in a

1962
01:18:21,440 --> 01:18:24,239
authenticated frame so i'm using these

1963
01:18:24,239 --> 01:18:26,960
in a bunch of different ways but what

1964
01:18:26,960 --> 01:18:30,800
what is my attack what's my risk

1965
01:18:30,800 --> 01:18:33,360
so i can i can i will post the list to

1966
01:18:33,360 --> 01:18:35,760
the cfrg list all the places where i'm

1967
01:18:35,760 --> 01:18:37,840
working with these things

1968
01:18:37,840 --> 01:18:39,600
and the ways where i know where they are

1969
01:18:39,600 --> 01:18:40,800
and that's what i'm talking about does

1970
01:18:40,800 --> 01:18:42,640
that help uh

1971
01:18:42,640 --> 01:18:45,040
clarify things

1972
01:18:45,040 --> 01:18:46,800
okay

1973
01:18:46,800 --> 01:18:48,640
it's very different depending on what

1974
01:18:48,640 --> 01:18:51,120
exactly you're doing for a mass that's

1975
01:18:51,120 --> 01:18:53,600
okay because you the only way to attack

1976
01:18:53,600 --> 01:18:56,159
the mac if it has a key is just sort of

1977
01:18:56,159 --> 01:18:58,239
send to the 48 messages and see that one

1978
01:18:58,239 --> 01:19:00,719
you know try every one but for the other

1979
01:19:00,719 --> 01:19:02,080
things you're doing it might be more or

1980
01:19:02,080 --> 01:19:04,239
less a problem it's very

1981
01:19:04,239 --> 01:19:06,239
very difficult to analyze

1982
01:19:06,239 --> 01:19:09,360
yeah but again if it's if it's if it's a

1983
01:19:09,360 --> 01:19:12,640
if it's a keyed hash can attack against

1984
01:19:12,640 --> 01:19:14,880
it uh reveal the key

1985
01:19:14,880 --> 01:19:17,199
and then you can um slip your own data

1986
01:19:17,199 --> 01:19:19,120
in particular when this is command and

1987
01:19:19,120 --> 01:19:22,080
control for them and aircraft if i can

1988
01:19:22,080 --> 01:19:24,159
steal the key i can now tell that

1989
01:19:24,159 --> 01:19:26,320
aircraft to do other things

1990
01:19:26,320 --> 01:19:28,560
like happen to uh the unp

1991
01:19:28,560 --> 01:19:31,120
unauthenticated messages to the the

1992
01:19:31,120 --> 01:19:34,159
drone over iran some years ago

1993
01:19:34,159 --> 01:19:35,520
and how they managed to get that drone

1994
01:19:35,520 --> 01:19:38,159
to land there

1995
01:19:38,640 --> 01:19:41,840
so so it's also can with a heat hatch

1996
01:19:41,840 --> 01:19:45,199
can i steal the key

1997
01:19:45,679 --> 01:19:48,679
scott

1998
01:19:50,560 --> 01:19:55,840
okay uh again i would uh highlight uh um

1999
01:19:55,840 --> 01:19:58,960
watson's uh question about uh there's a

2000
01:19:58,960 --> 01:20:01,520
bunch of different use cases uh uh

2001
01:20:01,520 --> 01:20:04,400
please the six byte thing is a mac not a

2002
01:20:04,400 --> 01:20:06,560
hash and

2003
01:20:06,560 --> 01:20:08,800
uh yeah me we may perhaps we should

2004
01:20:08,800 --> 01:20:11,199
there are some macs where doing a forge

2005
01:20:11,199 --> 01:20:13,520
a single managing final forgery doesn't

2006
01:20:13,520 --> 01:20:16,080
actually allow you to do anything else

2007
01:20:16,080 --> 01:20:18,400
other macs you really can

2008
01:20:18,400 --> 01:20:20,000
we need to

2009
01:20:20,000 --> 01:20:22,639
publicize that difference in addition in

2010
01:20:22,639 --> 01:20:24,320
terms of hashes you also need to

2011
01:20:24,320 --> 01:20:26,560
distinguish between hash

2012
01:20:26,560 --> 01:20:28,400
hashes where you only need pre-image or

2013
01:20:28,400 --> 01:20:30,480
second frames resistance and hashes

2014
01:20:30,480 --> 01:20:31,679
where you really need collision

2015
01:20:31,679 --> 01:20:33,280
resistance

2016
01:20:33,280 --> 01:20:35,360
and how do we actually

2017
01:20:35,360 --> 01:20:38,239
give useful advice to a non-crypto

2018
01:20:38,239 --> 01:20:40,159
person to able to make that distinction

2019
01:20:40,159 --> 01:20:43,199
i have no idea

2020
01:20:43,280 --> 01:20:44,800
if i'd like to see if we could write

2021
01:20:44,800 --> 01:20:46,880
something up scott at least getting a

2022
01:20:46,880 --> 01:20:49,280
good start on it and let the community

2023
01:20:49,280 --> 01:20:51,280
learn

2024
01:20:51,280 --> 01:20:52,080
uh

2025
01:20:52,080 --> 01:20:55,120
uh okay on another topic you you seem to

2026
01:20:55,120 --> 01:20:57,600
advocate kmac for

2027
01:20:57,600 --> 01:20:58,480
for

2028
01:20:58,480 --> 01:21:00,960
small devices one problem with kmac is

2029
01:21:00,960 --> 01:21:05,360
it has a it requires a sizeable 200 byte

2030
01:21:05,360 --> 01:21:08,560
estate uh state to actually compute

2031
01:21:08,560 --> 01:21:11,120
uh that may not be feasible on very

2032
01:21:11,120 --> 01:21:13,600
small devices

2033
01:21:13,600 --> 01:21:15,360
well that's true and that's why i'm like

2034
01:21:15,360 --> 01:21:17,199
looking to the lightweight crypto so

2035
01:21:17,199 --> 01:21:19,600
right now i'm working with kmac where i

2036
01:21:19,600 --> 01:21:21,120
can

2037
01:21:21,120 --> 01:21:24,800
um and but looking forward to

2038
01:21:24,800 --> 01:21:26,000
maybe

2039
01:21:26,000 --> 01:21:27,280
next month

2040
01:21:27,280 --> 01:21:29,199
for the lightweight crypto competition

2041
01:21:29,199 --> 01:21:30,880
to be finished and then we have

2042
01:21:30,880 --> 01:21:33,600
guidelines on alternatives

2043
01:21:33,600 --> 01:21:35,440
that will be using the kmac type

2044
01:21:35,440 --> 01:21:37,520
construction

2045
01:21:37,520 --> 01:21:39,440
well using kmac type construction is

2046
01:21:39,440 --> 01:21:42,719
very different than using kmac as is

2047
01:21:42,719 --> 01:21:43,920
um

2048
01:21:43,920 --> 01:21:47,199
i i i've been looking at koodiak

2049
01:21:47,199 --> 01:21:48,800
and

2050
01:21:48,800 --> 01:21:51,440
and kudiak is really

2051
01:21:51,440 --> 01:21:53,840
it's uh

2052
01:21:53,840 --> 01:21:56,000
i ask people for you like other than

2053
01:21:56,000 --> 01:21:58,320
this some of the size difference it is

2054
01:21:58,320 --> 01:22:00,400
it's working the same way it's still uh

2055
01:22:00,400 --> 01:22:02,239
a sponge function

2056
01:22:02,239 --> 01:22:03,760
okay

2057
01:22:03,760 --> 01:22:06,159
uh i uh john i think you can kind of

2058
01:22:06,159 --> 01:22:09,440
continue uh asking questions

2059
01:22:09,440 --> 01:22:12,480
thank you scott john

2060
01:22:14,080 --> 01:22:17,280
i i think a guidance document

2061
01:22:17,280 --> 01:22:19,679
would be very helpful for the

2062
01:22:19,679 --> 01:22:20,960
community

2063
01:22:20,960 --> 01:22:23,280
there is a lot of different you have

2064
01:22:23,280 --> 01:22:26,159
hkdf you have hmac you have kmac and

2065
01:22:26,159 --> 01:22:29,199
then you have like one or

2066
01:22:29,199 --> 01:22:30,080
two

2067
01:22:30,080 --> 01:22:32,000
iterations

2068
01:22:32,000 --> 01:22:33,040
and

2069
01:22:33,040 --> 01:22:35,520
there's a lot of this document just

2070
01:22:35,520 --> 01:22:38,400
guiding the reader to the this document

2071
01:22:38,400 --> 01:22:41,040
would be helpful i think

2072
01:22:41,040 --> 01:22:43,040
i think there's also

2073
01:22:43,040 --> 01:22:46,159
you gave an example of people using uh

2074
01:22:46,159 --> 01:22:47,199
hash

2075
01:22:47,199 --> 01:22:48,320
as a

2076
01:22:48,320 --> 01:22:50,480
creating their own mac but

2077
01:22:50,480 --> 01:22:53,040
there's also people using there's a lot

2078
01:22:53,040 --> 01:22:56,480
of cases where people use hkdf without

2079
01:22:56,480 --> 01:22:57,520
maybe not

2080
01:22:57,520 --> 01:23:01,360
needing hkdf maybe a simple hmac or kmac

2081
01:23:01,360 --> 01:23:02,960
would be

2082
01:23:02,960 --> 01:23:05,360
enough as you say so i think the

2083
01:23:05,360 --> 01:23:07,600
guidance documents would be good my

2084
01:23:07,600 --> 01:23:10,480
colleague muhit yes actually yesterday

2085
01:23:10,480 --> 01:23:12,960
writing such a thing yesterday couple of

2086
01:23:12,960 --> 01:23:15,199
months ago i don't know if you have

2087
01:23:15,199 --> 01:23:17,840
talked with him recently but i think

2088
01:23:17,840 --> 01:23:19,920
him and i would if you want help him and

2089
01:23:19,920 --> 01:23:22,000
i would probably be willing to help with

2090
01:23:22,000 --> 01:23:23,360
this yeah

2091
01:23:23,360 --> 01:23:26,800
okay john i'll reach out to you um i'm

2092
01:23:26,800 --> 01:23:29,120
like next month to start working on us

2093
01:23:29,120 --> 01:23:32,880
on such a uh a document and we can maybe

2094
01:23:32,880 --> 01:23:35,920
uh start getting some people together um

2095
01:23:35,920 --> 01:23:38,560
and and i i'll supply use cases and

2096
01:23:38,560 --> 01:23:40,159
we'll start could start framing all the

2097
01:23:40,159 --> 01:23:42,159
different cases on the whole thing

2098
01:23:42,159 --> 01:23:44,560
and and i would really because i've been

2099
01:23:44,560 --> 01:23:48,679
struggling here the past two years

2100
01:23:50,400 --> 01:23:53,679
yeah hi bob uh i like the work i support

2101
01:23:53,679 --> 01:23:55,520
it um

2102
01:23:55,520 --> 01:23:57,120
i'd just like to flag that there's some

2103
01:23:57,120 --> 01:24:01,199
other thing reasons uh

2104
01:24:01,360 --> 01:24:04,800
when i was trying to use uh hmac i

2105
01:24:04,800 --> 01:24:07,280
discovered how you know it's proven

2106
01:24:07,280 --> 01:24:09,040
correct

2107
01:24:09,040 --> 01:24:11,040
but that doesn't necessarily mean that

2108
01:24:11,040 --> 01:24:13,440
it works the way that you would expect

2109
01:24:13,440 --> 01:24:14,639
it

2110
01:24:14,639 --> 01:24:18,560
in that uh there are certain cases where

2111
01:24:18,560 --> 01:24:21,199
if you have a null input to the

2112
01:24:21,199 --> 01:24:23,040
algorithm

2113
01:24:23,040 --> 01:24:26,159
that has the same effect as

2114
01:24:26,159 --> 01:24:28,840
all zeros into the

2115
01:24:28,840 --> 01:24:31,199
algorithm and

2116
01:24:31,199 --> 01:24:32,320
you know

2117
01:24:32,320 --> 01:24:34,080
back when it was written that was

2118
01:24:34,080 --> 01:24:35,520
considered

2119
01:24:35,520 --> 01:24:38,800
acceptable and the author insists that

2120
01:24:38,800 --> 01:24:41,199
that is still acceptable i do not

2121
01:24:41,199 --> 01:24:43,920
consider that acceptable i think that

2122
01:24:43,920 --> 01:24:45,120
stinks

2123
01:24:45,120 --> 01:24:47,760
and i think that that is an error

2124
01:24:47,760 --> 01:24:50,400
that should at the very least be called

2125
01:24:50,400 --> 01:24:52,000
out

2126
01:24:52,000 --> 01:24:52,880
uh

2127
01:24:52,880 --> 01:24:55,600
as a security concern

2128
01:24:55,600 --> 01:24:56,800
um

2129
01:24:56,800 --> 01:24:58,960
and so i i i think that it is worth

2130
01:24:58,960 --> 01:25:00,880
going back and looking at some of these

2131
01:25:00,880 --> 01:25:01,920
things

2132
01:25:01,920 --> 01:25:04,560
because um

2133
01:25:04,560 --> 01:25:06,000
you know

2134
01:25:06,000 --> 01:25:08,960
it should take more than a very vigilant

2135
01:25:08,960 --> 01:25:12,719
implementer to get crypto right

2136
01:25:12,719 --> 01:25:15,040
particularly when we're presenting

2137
01:25:15,040 --> 01:25:16,239
something

2138
01:25:16,239 --> 01:25:18,800
as a construction that

2139
01:25:18,800 --> 01:25:20,000
we the

2140
01:25:20,000 --> 01:25:22,159
experts not that i think that there are

2141
01:25:22,159 --> 01:25:24,560
any in this field

2142
01:25:24,560 --> 01:25:26,560
yeah it's a bad thing to think

2143
01:25:26,560 --> 01:25:29,600
think of yourself uh

2144
01:25:30,080 --> 01:25:32,639
i i think that when we do that

2145
01:25:32,639 --> 01:25:34,960
we've got to make sure that it really is

2146
01:25:34,960 --> 01:25:36,880
as safe as possible

2147
01:25:36,880 --> 01:25:38,960
and as a

2148
01:25:38,960 --> 01:25:41,679
booby trap free as possible

2149
01:25:41,679 --> 01:25:43,679
and that brings up another one of my

2150
01:25:43,679 --> 01:25:46,639
concerns and like how long does a string

2151
01:25:46,639 --> 01:25:50,560
have to be to be fit into the hash to be

2152
01:25:50,560 --> 01:25:53,679
safe in terms of attack or other things

2153
01:25:53,679 --> 01:25:57,120
like i need i want to get out a eight

2154
01:25:57,120 --> 01:25:58,719
byte hash

2155
01:25:58,719 --> 01:26:01,920
and i only have um 24 bytes that i'm

2156
01:26:01,920 --> 01:26:04,080
hashing is that okay

2157
01:26:04,080 --> 01:26:06,400
or should it be adding how many bytes of

2158
01:26:06,400 --> 01:26:08,400
a known random string

2159
01:26:08,400 --> 01:26:10,320
and do i add that known random string at

2160
01:26:10,320 --> 01:26:12,480
the beginning or at the end

2161
01:26:12,480 --> 01:26:17,440
so that is a related question to this um

2162
01:26:17,440 --> 01:26:18,239
that

2163
01:26:18,239 --> 01:26:19,280
how

2164
01:26:19,280 --> 01:26:21,920
big how small of a message can you

2165
01:26:21,920 --> 01:26:27,120
safely hash not how big but how small

2166
01:26:27,120 --> 01:26:28,480
anybody else john are you back in the

2167
01:26:28,480 --> 01:26:30,718
queue

2168
01:26:32,800 --> 01:26:34,880
oh no john just started that and fill up

2169
01:26:34,880 --> 01:26:37,840
anything else

2170
01:26:38,000 --> 01:26:41,040
christopher chris

2171
01:26:41,840 --> 01:26:44,480
i was just going to say um

2172
01:26:44,480 --> 01:26:45,520
uh

2173
01:26:45,520 --> 01:26:47,280
describing the use case would be a good

2174
01:26:47,280 --> 01:26:52,960
start um i think that um depending on

2175
01:26:52,960 --> 01:26:55,520
depending on uh i mean yeah like like

2176
01:26:55,520 --> 01:26:58,960
what's been said before like if if if

2177
01:26:58,960 --> 01:27:00,000
if

2178
01:27:00,000 --> 01:27:01,920
if you need collisions resistance you

2179
01:27:01,920 --> 01:27:04,800
shouldn't ever truncate but um

2180
01:27:04,800 --> 01:27:06,080
if you

2181
01:27:06,080 --> 01:27:07,760
you know if you're if you have like for

2182
01:27:07,760 --> 01:27:09,120
certain yeah

2183
01:27:09,120 --> 01:27:11,760
i i would like to see the use cases laid

2184
01:27:11,760 --> 01:27:13,520
out that's all

2185
01:27:13,520 --> 01:27:15,840
start doing that i can put together a

2186
01:27:15,840 --> 01:27:19,120
use case draft as a starting point

2187
01:27:19,120 --> 01:27:21,600
and unfortunately chris uh

2188
01:27:21,600 --> 01:27:23,360
sometimes i only have something bites

2189
01:27:23,360 --> 01:27:25,679
available in my payload so i need to say

2190
01:27:25,679 --> 01:27:28,560
this is a size that i can carry what do

2191
01:27:28,560 --> 01:27:30,400
i what can i put in here which is

2192
01:27:30,400 --> 01:27:33,400
meaningful

2193
01:27:33,520 --> 01:27:34,880
so

2194
01:27:34,880 --> 01:27:36,560
ha control

2195
01:27:36,560 --> 01:27:38,400
maybe what security properties you need

2196
01:27:38,400 --> 01:27:40,080
i think i think it's going to depend on

2197
01:27:40,080 --> 01:27:42,719
what security properties you need uh

2198
01:27:42,719 --> 01:27:44,320
you know scott that indicated that in

2199
01:27:44,320 --> 01:27:46,400
terms of for somebody did about

2200
01:27:46,400 --> 01:27:49,199
uh collision resistance pre-image second

2201
01:27:49,199 --> 01:27:51,120
pre-image what know what what what what

2202
01:27:51,120 --> 01:27:53,600
are you dealing with granted

2203
01:27:53,600 --> 01:27:57,320
philip something else

2204
01:28:01,280 --> 01:28:04,320
fill up your hands raise

2205
01:28:06,320 --> 01:28:07,120
okay

2206
01:28:07,120 --> 01:28:10,080
um stanislav i think then that's all the

2207
01:28:10,080 --> 01:28:12,719
questions nobody else is in the queue

2208
01:28:12,719 --> 01:28:15,520
uh yes it's a lot boop and uh

2209
01:28:15,520 --> 01:28:18,560
if you have your

2210
01:28:18,560 --> 01:28:20,960
uh some people uh

2211
01:28:20,960 --> 01:28:22,639
have some

2212
01:28:22,639 --> 01:28:24,880
specific requests to see to adopt

2213
01:28:24,880 --> 01:28:27,040
something and

2214
01:28:27,040 --> 01:28:29,440
so that people can collaborate and come

2215
01:28:29,440 --> 01:28:31,920
back with specific requests to us and of

2216
01:28:31,920 --> 01:28:34,400
course we'll be happy to announce some

2217
01:28:34,400 --> 01:28:36,880
adoption call or something yeah i will

2218
01:28:36,880 --> 01:28:38,719
take it to the list i'll start a

2219
01:28:38,719 --> 01:28:40,400
discussion going on on both these

2220
01:28:40,400 --> 01:28:41,600
subjects

2221
01:28:41,600 --> 01:28:44,480
and i'll start framing out the use cases

2222
01:28:44,480 --> 01:28:46,960
leading up up to draft and and others

2223
01:28:46,960 --> 01:28:48,159
hopefully will

2224
01:28:48,159 --> 01:28:50,239
will give me the uh the expert

2225
01:28:50,239 --> 01:28:52,480
assistance on it and i thank you for

2226
01:28:52,480 --> 01:28:53,679
your time

2227
01:28:53,679 --> 01:28:54,960
okay thank you

2228
01:28:54,960 --> 01:28:57,840
thank you bob thanks a lot bye

2229
01:28:57,840 --> 01:28:59,520
bye

2230
01:28:59,520 --> 01:29:02,480
and the last item uh

2231
01:29:02,480 --> 01:29:03,760
the agenda

2232
01:29:03,760 --> 01:29:08,920
private access tokens chris wood

2233
01:29:16,080 --> 01:29:17,170
all right um

2234
01:29:17,170 --> 01:29:18,480
[Music]

2235
01:29:18,480 --> 01:29:20,719
uh so thanks nancyleff and others for

2236
01:29:20,719 --> 01:29:22,400
letting us talk about this this is not

2237
01:29:22,400 --> 01:29:25,679
um an individual draft for cfrg

2238
01:29:25,679 --> 01:29:27,600
um so we're not we're not explicitly

2239
01:29:27,600 --> 01:29:30,080
asking for adoption or anything um the

2240
01:29:30,080 --> 01:29:32,080
the purpose of this presentation is more

2241
01:29:32,080 --> 01:29:32,880
to

2242
01:29:32,880 --> 01:29:35,520
uh so it's a wider review of the uh sort

2243
01:29:35,520 --> 01:29:37,040
of cryptographic techniques that are

2244
01:29:37,040 --> 01:29:38,560
used in this private access tokens

2245
01:29:38,560 --> 01:29:39,760
document

2246
01:29:39,760 --> 01:29:42,159
which you can find by just punching in

2247
01:29:42,159 --> 01:29:43,600
this name or title into your favorite

2248
01:29:43,600 --> 01:29:46,159
search engine

2249
01:29:46,400 --> 01:29:49,280
it was sufficiently different enough

2250
01:29:49,280 --> 01:29:50,239
that

2251
01:29:50,239 --> 01:29:52,239
we felt like it definitely needed wider

2252
01:29:52,239 --> 01:29:54,320
review um from experts in this

2253
01:29:54,320 --> 01:29:56,719
particular community um

2254
01:29:56,719 --> 01:29:58,159
and beyond so

2255
01:29:58,159 --> 01:30:00,000
um i should also note that i'm gonna try

2256
01:30:00,000 --> 01:30:02,080
and describe sort of the the general

2257
01:30:02,080 --> 01:30:03,679
problem um

2258
01:30:03,679 --> 01:30:04,639
uh

2259
01:30:04,639 --> 01:30:07,120
somewhat out of context uh from private

2260
01:30:07,120 --> 01:30:09,440
access tokens uh to to sort of best

2261
01:30:09,440 --> 01:30:11,040
focused on the the core cryptographic

2262
01:30:11,040 --> 01:30:12,159
concepts

2263
01:30:12,159 --> 01:30:13,120
um

2264
01:30:13,120 --> 01:30:14,880
uh but if there's like questions around

2265
01:30:14,880 --> 01:30:16,880
the the wider use case that might help

2266
01:30:16,880 --> 01:30:19,280
um you know feel free to jump in the

2267
01:30:19,280 --> 01:30:22,239
queue and ask um

2268
01:30:22,239 --> 01:30:25,760
so seeking clarity here um as well as

2269
01:30:25,760 --> 01:30:27,360
you know whether or not the thing is

2270
01:30:27,360 --> 01:30:29,360
correct

2271
01:30:29,360 --> 01:30:31,360
okay um

2272
01:30:31,360 --> 01:30:33,679
in private access tokens we have the

2273
01:30:33,679 --> 01:30:34,560
sort of

2274
01:30:34,560 --> 01:30:36,480
the the arrangement sort of shown on the

2275
01:30:36,480 --> 01:30:37,760
screen you have

2276
01:30:37,760 --> 01:30:40,639
a number of clients uh each distinct uh

2277
01:30:40,639 --> 01:30:43,440
connected to um or interacting with what

2278
01:30:43,440 --> 01:30:45,360
we call a mediator

2279
01:30:45,360 --> 01:30:47,520
and the mediator interacts with what we

2280
01:30:47,520 --> 01:30:50,239
call an issuer

2281
01:30:50,239 --> 01:30:53,840
each of these entities holds some state

2282
01:30:53,840 --> 01:30:56,719
the issuer has a sort of fixed private

2283
01:30:56,719 --> 01:30:59,120
value we call k

2284
01:30:59,120 --> 01:31:01,760
the mediator has

2285
01:31:01,760 --> 01:31:04,639
a fixed commitment for each

2286
01:31:04,639 --> 01:31:07,520
individual client um so

2287
01:31:07,520 --> 01:31:10,320
uh ev every single client has their own

2288
01:31:10,320 --> 01:31:12,639
secret value x and the mediator holds

2289
01:31:12,639 --> 01:31:14,239
the corresponding public

2290
01:31:14,239 --> 01:31:16,800
commitment to that value

2291
01:31:16,800 --> 01:31:18,560
um and

2292
01:31:18,560 --> 01:31:21,120
in this arrangement um our goal is to

2293
01:31:21,120 --> 01:31:23,520
sort of compute a deterministic function

2294
01:31:23,520 --> 01:31:25,520
uh or value y

2295
01:31:25,520 --> 01:31:28,239
uh over the client's private input x and

2296
01:31:28,239 --> 01:31:29,280
the

2297
01:31:29,280 --> 01:31:32,000
issuers private input k

2298
01:31:32,000 --> 01:31:34,320
under the following conditions the first

2299
01:31:34,320 --> 01:31:36,159
of which is that

2300
01:31:36,159 --> 01:31:37,440
the mediator

2301
01:31:37,440 --> 01:31:39,760
only learns this output y

2302
01:31:39,760 --> 01:31:42,639
if the client specifically engages

2303
01:31:42,639 --> 01:31:45,199
with the protocol using its secret value

2304
01:31:45,199 --> 01:31:47,520
that is to say the mediator cannot act

2305
01:31:47,520 --> 01:31:50,960
as a client um and request uh that the

2306
01:31:50,960 --> 01:31:53,600
and interact with the issuer to compute

2307
01:31:53,600 --> 01:31:54,800
why without

2308
01:31:54,800 --> 01:31:57,120
without having x

2309
01:31:57,120 --> 01:32:00,159
um we also want a desire for the client

2310
01:32:00,159 --> 01:32:01,760
to not be able to engage with the

2311
01:32:01,760 --> 01:32:03,840
protocol for secret values that it does

2312
01:32:03,840 --> 01:32:04,960
not own

2313
01:32:04,960 --> 01:32:07,040
um so x prime set are you know different

2314
01:32:07,040 --> 01:32:08,880
from its own x

2315
01:32:08,880 --> 01:32:10,400
um

2316
01:32:10,400 --> 01:32:11,280
and

2317
01:32:11,280 --> 01:32:13,600
uh the the this

2318
01:32:13,600 --> 01:32:15,760
the the space of x's is sufficiently

2319
01:32:15,760 --> 01:32:18,400
large enough that um you know this is

2320
01:32:18,400 --> 01:32:19,840
this should be invisible but we have

2321
01:32:19,840 --> 01:32:21,199
additional measures in place to prevent

2322
01:32:21,199 --> 01:32:22,400
this

2323
01:32:22,400 --> 01:32:24,080
um and i guess importantly at the end as

2324
01:32:24,080 --> 01:32:25,920
well we also don't want the issuer to

2325
01:32:25,920 --> 01:32:28,159
learn x um

2326
01:32:28,159 --> 01:32:30,400
uh and moreover we don't want the issuer

2327
01:32:30,400 --> 01:32:33,040
to learn when two x's uh our two

2328
01:32:33,040 --> 01:32:34,880
requests that sort of come into the

2329
01:32:34,880 --> 01:32:37,760
issuer correspond to the same acts

2330
01:32:37,760 --> 01:32:40,159
um the the issuer in this in this sense

2331
01:32:40,159 --> 01:32:41,760
is kind of just a dumb

2332
01:32:41,760 --> 01:32:44,560
oracle that's you know evaluating inputs

2333
01:32:44,560 --> 01:32:46,639
over this secret uh with the secret

2334
01:32:46,639 --> 01:32:47,760
value k

2335
01:32:47,760 --> 01:32:51,280
and then responding to the mediator

2336
01:32:51,280 --> 01:32:52,840
okay

2337
01:32:52,840 --> 01:32:54,719
um to

2338
01:32:54,719 --> 01:32:57,679
to sort of uh satisfy uh

2339
01:32:57,679 --> 01:32:59,679
or to instantiate this particular

2340
01:32:59,679 --> 01:33:01,120
solution that we have a number of things

2341
01:33:01,120 --> 01:33:02,400
that we build upon

2342
01:33:02,400 --> 01:33:03,520
um

2343
01:33:03,520 --> 01:33:05,120
the first of which is just the primary

2344
01:33:05,120 --> 01:33:06,800
group um

2345
01:33:06,800 --> 01:33:08,800
and we treat all of the secret values as

2346
01:33:08,800 --> 01:33:12,159
c as scalars uh in the underlying field

2347
01:33:12,159 --> 01:33:14,719
and then um effectively the commitments

2348
01:33:14,719 --> 01:33:17,760
as uh the public values uh corresponding

2349
01:33:17,760 --> 01:33:20,159
to these secret scalars

2350
01:33:20,159 --> 01:33:21,280
um

2351
01:33:21,280 --> 01:33:24,159
we also make use of a uh non-interactive

2352
01:33:24,159 --> 01:33:26,320
uh schnorr proof of knowledge to uh

2353
01:33:26,320 --> 01:33:28,159
prove the discrete log of a particular

2354
01:33:28,159 --> 01:33:29,440
value

2355
01:33:29,440 --> 01:33:32,400
um and the the syntax is here very

2356
01:33:32,400 --> 01:33:34,800
convenience but effectively uh when when

2357
01:33:34,800 --> 01:33:36,960
we write this we say that you know the

2358
01:33:36,960 --> 01:33:39,360
the proof

2359
01:33:39,920 --> 01:33:42,960
is such that the the the proof

2360
01:33:42,960 --> 01:33:44,400
proves knowledge of the discrete log

2361
01:33:44,400 --> 01:33:45,920
without actually revealing the discrete

2362
01:33:45,920 --> 01:33:46,800
log

2363
01:33:46,800 --> 01:33:48,639
um and the verify the corresponding

2364
01:33:48,639 --> 01:33:50,880
verification part of that

2365
01:33:50,880 --> 01:33:52,719
only returns true if that proof checks

2366
01:33:52,719 --> 01:33:54,880
out

2367
01:33:55,679 --> 01:33:56,880
um

2368
01:33:56,880 --> 01:33:58,320
so

2369
01:33:58,320 --> 01:34:00,000
as a sort of first step leading up to

2370
01:34:00,000 --> 01:34:02,840
the the solution you can imagine

2371
01:34:02,840 --> 01:34:05,280
um uh sort of doing something that's on

2372
01:34:05,280 --> 01:34:07,520
this similar child on the screen here um

2373
01:34:07,520 --> 01:34:09,520
and you can you can kind of maybe view

2374
01:34:09,520 --> 01:34:11,840
this this interaction as uh

2375
01:34:11,840 --> 01:34:14,800
like say blinded dicky hellman in a way

2376
01:34:14,800 --> 01:34:16,080
um

2377
01:34:16,080 --> 01:34:16,880
so

2378
01:34:16,880 --> 01:34:19,199
uh the client uh the very first thing it

2379
01:34:19,199 --> 01:34:21,360
does is generate a random scalar

2380
01:34:21,360 --> 01:34:24,320
um and then blinds its corresponding

2381
01:34:24,320 --> 01:34:26,560
public value x

2382
01:34:26,560 --> 01:34:28,560
um sends both over the wire to the

2383
01:34:28,560 --> 01:34:30,480
mediator the mediator forwards that

2384
01:34:30,480 --> 01:34:32,960
along to the issuer who

2385
01:34:32,960 --> 01:34:35,120
does evaluation as it would

2386
01:34:35,120 --> 01:34:38,719
over that particular blinded value

2387
01:34:38,719 --> 01:34:39,679
and then

2388
01:34:39,679 --> 01:34:41,199
sends the result back to the media who

2389
01:34:41,199 --> 01:34:43,280
removes the blind provided by the the

2390
01:34:43,280 --> 01:34:44,320
client

2391
01:34:44,320 --> 01:34:46,880
getting as desired a function a

2392
01:34:46,880 --> 01:34:48,800
deterministic function over the client's

2393
01:34:48,800 --> 01:34:50,159
input x

2394
01:34:50,159 --> 01:34:52,000
the issuer's input k

2395
01:34:52,000 --> 01:34:53,600
um

2396
01:34:53,600 --> 01:34:56,320
and uh you know insert a suitable hash

2397
01:34:56,320 --> 01:34:58,239
function and our key derivation

2398
01:34:58,239 --> 01:34:59,520
functions here to make sure that you

2399
01:34:59,520 --> 01:35:02,639
know y is sufficiently

2400
01:35:02,639 --> 01:35:04,560
indistinguishable from random but

2401
01:35:04,560 --> 01:35:06,880
this is the gist

2402
01:35:06,880 --> 01:35:09,280
the problem with this is that

2403
01:35:09,280 --> 01:35:10,719
if you were to assume a malicious

2404
01:35:10,719 --> 01:35:12,239
mediator

2405
01:35:12,239 --> 01:35:14,400
who wants to compute why without

2406
01:35:14,400 --> 01:35:16,320
the client's engagement they can just

2407
01:35:16,320 --> 01:35:19,520
run the protocol as it would um as if it

2408
01:35:19,520 --> 01:35:21,040
were the client

2409
01:35:21,040 --> 01:35:22,400
in particular it does the same exact

2410
01:35:22,400 --> 01:35:23,600
thing the client does it generates a

2411
01:35:23,600 --> 01:35:24,880
random blind

2412
01:35:24,880 --> 01:35:27,679
blinds the the client's public value

2413
01:35:27,679 --> 01:35:29,679
which it has

2414
01:35:29,679 --> 01:35:31,360
and then interacts with the issuer to

2415
01:35:31,360 --> 01:35:34,000
compute the output

2416
01:35:34,000 --> 01:35:36,159
so we need some way to

2417
01:35:36,159 --> 01:35:38,719
protect against this particular

2418
01:35:38,719 --> 01:35:40,960
against this particular problem

2419
01:35:40,960 --> 01:35:43,040
and this is where the the the zero

2420
01:35:43,040 --> 01:35:45,360
knowledge proofs come into play

2421
01:35:45,360 --> 01:35:46,159
um

2422
01:35:46,159 --> 01:35:49,199
so uh they're basically uh appended to

2423
01:35:49,199 --> 01:35:51,280
the interaction uh between client and

2424
01:35:51,280 --> 01:35:52,400
issuer

2425
01:35:52,400 --> 01:35:53,360
um

2426
01:35:53,360 --> 01:35:54,320
uh

2427
01:35:54,320 --> 01:35:56,639
such that when the client generates it

2428
01:35:56,639 --> 01:35:59,600
blind and it's blind in public value it

2429
01:35:59,600 --> 01:36:01,920
proves at the same time that it knows

2430
01:36:01,920 --> 01:36:05,040
um the the corresponding super value x

2431
01:36:05,040 --> 01:36:06,000
um

2432
01:36:06,000 --> 01:36:07,840
and presents that proof to both the

2433
01:36:07,840 --> 01:36:11,760
mediator and the and the issuer

2434
01:36:11,760 --> 01:36:13,280
and this is important because now this

2435
01:36:13,280 --> 01:36:15,840
allows the issuer to check

2436
01:36:15,840 --> 01:36:17,760
that this request that it's about to

2437
01:36:17,760 --> 01:36:20,400
evaluate

2438
01:36:20,480 --> 01:36:22,320
the request is generated by an entity

2439
01:36:22,320 --> 01:36:24,000
which knows the corresponding discrete

2440
01:36:24,000 --> 01:36:26,400
log does not rev learn the discrete log

2441
01:36:26,400 --> 01:36:28,239
it just learns that you know only the

2442
01:36:28,239 --> 01:36:29,679
entity which could have generated the

2443
01:36:29,679 --> 01:36:30,719
request

2444
01:36:30,719 --> 01:36:33,040
did so in possession of

2445
01:36:33,040 --> 01:36:34,639
x in this case

2446
01:36:34,639 --> 01:36:36,239
um

2447
01:36:36,239 --> 01:36:37,679
uh the

2448
01:36:37,679 --> 01:36:40,159
the proof itself um will be different

2449
01:36:40,159 --> 01:36:42,239
for every single for for a fixed client

2450
01:36:42,239 --> 01:36:43,600
the proof will be different because the

2451
01:36:43,600 --> 01:36:45,040
blind is different

2452
01:36:45,040 --> 01:36:46,800
um the blinded version of the the

2453
01:36:46,800 --> 01:36:49,440
generator that's sent across uh between

2454
01:36:49,440 --> 01:36:51,840
um uh from client to issuer is also

2455
01:36:51,840 --> 01:36:53,760
different and the blinded point p is

2456
01:36:53,760 --> 01:36:55,440
different each time so

2457
01:36:55,440 --> 01:36:57,520
uh we still maintain the the sort of

2458
01:36:57,520 --> 01:36:59,280
ideal property that the issuer learns

2459
01:36:59,280 --> 01:37:01,520
nothing about you know repeated values

2460
01:37:01,520 --> 01:37:04,639
of uh acts upon uh you know subsequent

2461
01:37:04,639 --> 01:37:07,199
engagement with a particular client

2462
01:37:07,199 --> 01:37:08,960
um and the rest of the protocol is the

2463
01:37:08,960 --> 01:37:11,119
same um the

2464
01:37:11,119 --> 01:37:12,320
you still have this divi helmet that

2465
01:37:12,320 --> 01:37:13,840
takes place um

2466
01:37:13,840 --> 01:37:15,360
after the issuer checks the proof and

2467
01:37:15,360 --> 01:37:17,199
assuming it checks out returns the

2468
01:37:17,199 --> 01:37:19,360
result to the the mediator

2469
01:37:19,360 --> 01:37:21,440
um the

2470
01:37:21,440 --> 01:37:25,040
the media removes the blind um

2471
01:37:25,040 --> 01:37:26,000
and

2472
01:37:26,000 --> 01:37:30,159
gets a function of x k and um and insert

2473
01:37:30,159 --> 01:37:32,719
hashing and key derivation as necessary

2474
01:37:32,719 --> 01:37:37,520
um to to make it initially from random

2475
01:37:37,600 --> 01:37:40,639
uh that's effectively it um

2476
01:37:40,639 --> 01:37:42,159
so the i guess the questions for the

2477
01:37:42,159 --> 01:37:44,239
group are um a we

2478
01:37:44,239 --> 01:37:45,280
uh

2479
01:37:45,280 --> 01:37:47,440
uh you know does this sort of i guess

2480
01:37:47,440 --> 01:37:50,560
security model makes sense um it is and

2481
01:37:50,560 --> 01:37:52,320
i guess more importantly is the problem

2482
01:37:52,320 --> 01:37:54,000
statement somewhat clear

2483
01:37:54,000 --> 01:37:55,280
um

2484
01:37:55,280 --> 01:37:57,520
does this uh you know about the envelope

2485
01:37:57,520 --> 01:37:59,600
sketch of a protocol sort of uh

2486
01:37:59,600 --> 01:38:01,440
intuitively meet these goals

2487
01:38:01,440 --> 01:38:04,159
um and i guess uh at the end of the day

2488
01:38:04,159 --> 01:38:06,400
we're likely looking uh that this

2489
01:38:06,400 --> 01:38:07,760
we're hoping that this is effectively a

2490
01:38:07,760 --> 01:38:09,520
prf um

2491
01:38:09,520 --> 01:38:11,600
uh you know and and of course i've

2492
01:38:11,600 --> 01:38:13,920
alighted some of the the particulars

2493
01:38:13,920 --> 01:38:15,760
that would uh that would be necessary to

2494
01:38:15,760 --> 01:38:18,639
make this a the prf but um

2495
01:38:18,639 --> 01:38:22,080
does this intuitively meet that goal so

2496
01:38:22,080 --> 01:38:24,080
um i i will pause

2497
01:38:24,080 --> 01:38:27,040
here at the end

2498
01:38:27,040 --> 01:38:31,719
and take any questions you may have

2499
01:38:44,080 --> 01:38:47,360
any questions comments

2500
01:38:51,040 --> 01:38:52,960
um

2501
01:38:52,960 --> 01:38:54,880
no no questions is fine

2502
01:38:54,880 --> 01:38:57,520
it would be useful to know though

2503
01:38:57,520 --> 01:39:00,000
i had been in chat or elsewhere if the

2504
01:39:00,000 --> 01:39:02,080
problem statement was clear

2505
01:39:02,080 --> 01:39:04,239
i should also note that um

2506
01:39:04,239 --> 01:39:06,480
we're in no particular way bound to uh

2507
01:39:06,480 --> 01:39:10,159
or tied to this particular solution

2508
01:39:10,159 --> 01:39:13,840
the the general desire to have this um

2509
01:39:13,840 --> 01:39:16,000
a deterministic function over some

2510
01:39:16,000 --> 01:39:17,920
secrets that the client has and the

2511
01:39:17,920 --> 01:39:19,119
issuer has

2512
01:39:19,119 --> 01:39:20,480
is uh

2513
01:39:20,480 --> 01:39:22,719
um i think that's the

2514
01:39:22,719 --> 01:39:23,840
the the

2515
01:39:23,840 --> 01:39:26,639
the essence of the the problem

2516
01:39:26,639 --> 01:39:28,320
so if there is a simpler way to solve

2517
01:39:28,320 --> 01:39:30,480
this particular problem uh

2518
01:39:30,480 --> 01:39:32,400
perhaps a simpler protocol

2519
01:39:32,400 --> 01:39:35,040
um we would love to to use that

2520
01:39:35,040 --> 01:39:36,719
this is just this is the current

2521
01:39:36,719 --> 01:39:40,119
proposed solution

2522
01:39:48,800 --> 01:39:51,800
uh

2523
01:39:54,000 --> 01:39:56,159
um okay so i'm not seeing any comments

2524
01:39:56,159 --> 01:39:58,159
or questions so uh

2525
01:39:58,159 --> 01:40:00,480
i think

2526
01:40:01,760 --> 01:40:02,719
uh

2527
01:40:02,719 --> 01:40:04,080
martin's question

2528
01:40:04,080 --> 01:40:05,920
no certainly not um

2529
01:40:05,920 --> 01:40:06,719
but

2530
01:40:06,719 --> 01:40:08,560
these are these are separable problems

2531
01:40:08,560 --> 01:40:10,320
or questions i think

2532
01:40:10,320 --> 01:40:12,559
um

2533
01:40:12,639 --> 01:40:14,719
i i think what i'll likely do is try and

2534
01:40:14,719 --> 01:40:18,400
condense uh this particular um

2535
01:40:18,400 --> 01:40:19,600
the essence of this problem and the

2536
01:40:19,600 --> 01:40:23,360
proposed solution uh to the list

2537
01:40:23,360 --> 01:40:24,960
and

2538
01:40:24,960 --> 01:40:26,800
follow up there

2539
01:40:26,800 --> 01:40:30,480
it's pretty early for folks here or late

2540
01:40:33,280 --> 01:40:35,119
in fact we have some

2541
01:40:35,119 --> 01:40:37,040
responses in the chat

2542
01:40:37,040 --> 01:40:38,080
so

2543
01:40:38,080 --> 01:40:40,080
there are

2544
01:40:40,080 --> 01:40:41,920
at least three opinions that the problem

2545
01:40:41,920 --> 01:40:43,600
is worth solving

2546
01:40:43,600 --> 01:40:45,119
so

2547
01:40:45,119 --> 01:40:47,840
i hope those are um those are opinions

2548
01:40:47,840 --> 01:40:49,199
um

2549
01:40:49,199 --> 01:40:51,440
that i i i hope it's safe to assume that

2550
01:40:51,440 --> 01:40:54,480
those uh those those comments uh imply

2551
01:40:54,480 --> 01:40:56,719
that the problem statement is clear

2552
01:40:56,719 --> 01:40:58,719
and

2553
01:40:58,719 --> 01:41:00,960
uh

2554
01:41:01,679 --> 01:41:03,520
yeah there there is some overlap with

2555
01:41:03,520 --> 01:41:07,040
the opr um uh it looks sort of on paper

2556
01:41:07,040 --> 01:41:09,119
similar to an opr um

2557
01:41:09,119 --> 01:41:12,400
i think the difference is um

2558
01:41:12,400 --> 01:41:14,719
uh you do note that the there's no

2559
01:41:14,719 --> 01:41:17,119
there's no hash to group step

2560
01:41:17,119 --> 01:41:19,600
computed by uh or done by the client on

2561
01:41:19,600 --> 01:41:22,239
the first step so it's arguably simpler

2562
01:41:22,239 --> 01:41:23,920
um if you ignore the zero not true stuff

2563
01:41:23,920 --> 01:41:25,360
than the opr

2564
01:41:25,360 --> 01:41:26,880
um

2565
01:41:26,880 --> 01:41:29,760
uh the it's it's closer i would say to

2566
01:41:29,760 --> 01:41:31,600
like just classical diffie-hellman which

2567
01:41:31,600 --> 01:41:33,600
is not surprising because the opr is

2568
01:41:33,600 --> 01:41:35,600
just you know as we saw earlier is just

2569
01:41:35,600 --> 01:41:40,679
a you know a variant of jiffy helmet

2570
01:41:48,880 --> 01:41:51,199
okay

2571
01:41:51,840 --> 01:41:53,520
all right um

2572
01:41:53,520 --> 01:41:55,840
i will uh i'll take it to the list

2573
01:41:55,840 --> 01:41:57,040
thanks

2574
01:41:57,040 --> 01:41:59,119
yes yes

2575
01:41:59,119 --> 01:42:02,080
uh so chris

2576
01:42:02,080 --> 01:42:02,960
uh

2577
01:42:02,960 --> 01:42:03,920
so

2578
01:42:03,920 --> 01:42:06,719
any other business

2579
01:42:11,119 --> 01:42:13,440
please just having a remark all the

2580
01:42:13,440 --> 01:42:15,920
notes that i've seen i think you

2581
01:42:15,920 --> 01:42:18,880
misunderstood me the note keeper and i

2582
01:42:18,880 --> 01:42:20,719
think that it's a good idea to have a

2583
01:42:20,719 --> 01:42:22,960
discussion on the on the list until the

2584
01:42:22,960 --> 01:42:26,000
end of the year and i think by christmas

2585
01:42:26,000 --> 01:42:27,520
i have the hope that the draft has a

2586
01:42:27,520 --> 01:42:29,920
state that can start with a crypto

2587
01:42:29,920 --> 01:42:31,920
review but i think we need the time

2588
01:42:31,920 --> 01:42:33,520
until the end of the year in order to

2589
01:42:33,520 --> 01:42:37,040
get it in a good shape

2590
01:42:37,040 --> 01:42:38,880
so i'm trying to push things but i don't

2591
01:42:38,880 --> 01:42:43,280
think that we will will be this fast

2592
01:42:43,280 --> 01:42:45,600
thank you

2593
01:42:45,600 --> 01:42:47,840
thank you

2594
01:42:48,800 --> 01:42:51,040
any other comments maybe some questions

2595
01:42:51,040 --> 01:42:54,280
to the chairs

2596
01:42:59,440 --> 01:43:01,440
um

2597
01:43:01,440 --> 01:43:04,639
i'll be releasing my uh threshold inf

2598
01:43:04,639 --> 01:43:07,600
structure in the next few weeks uh it's

2599
01:43:07,600 --> 01:43:10,480
now passing all the unit tests

2600
01:43:10,480 --> 01:43:13,760
so if people are interested in

2601
01:43:13,760 --> 01:43:16,400
seeing what threshold can be applied to

2602
01:43:16,400 --> 01:43:18,800
in to real world problems

2603
01:43:18,800 --> 01:43:21,040
like managing ssh keys they may be

2604
01:43:21,040 --> 01:43:22,800
interested in that

2605
01:43:22,800 --> 01:43:26,000
one thing that i need though is um i'm

2606
01:43:26,000 --> 01:43:28,480
using threshold encryption

2607
01:43:28,480 --> 01:43:29,440
and

2608
01:43:29,440 --> 01:43:31,360
nobody's

2609
01:43:31,360 --> 01:43:34,000
seems to be very interested in uh

2610
01:43:34,000 --> 01:43:36,639
looking at the uh drafts

2611
01:43:36,639 --> 01:43:38,639
on how i do that

2612
01:43:38,639 --> 01:43:41,520
i think that that might be a uh very

2613
01:43:41,520 --> 01:43:44,719
useful um

2614
01:43:44,719 --> 01:43:46,400
common application

2615
01:43:46,400 --> 01:43:49,440
i did present at this at cfrg and i was

2616
01:43:49,440 --> 01:43:51,199
told that there would be

2617
01:43:51,199 --> 01:43:53,360
a uh

2618
01:43:53,360 --> 01:43:55,840
a review on the list

2619
01:43:55,840 --> 01:43:57,199
uh

2620
01:43:57,199 --> 01:43:59,119
deciding whether we were going to adopt

2621
01:43:59,119 --> 01:44:00,159
it

2622
01:44:00,159 --> 01:44:03,040
uh that was over two years ago i've

2623
01:44:03,040 --> 01:44:06,639
asked periodically since and nothing has

2624
01:44:06,639 --> 01:44:09,960
ever happened

2625
01:44:23,199 --> 01:44:27,638
all right just wanted to say that

2626
01:44:34,320 --> 01:44:38,159
chris patton was in the queue no

2627
01:44:41,199 --> 01:44:43,360
i clicked the button um i didn't mean to

2628
01:44:43,360 --> 01:44:47,080
put myself in the queue

2629
01:44:52,080 --> 01:44:54,400
all right

2630
01:44:54,400 --> 01:44:55,440
then

2631
01:44:55,440 --> 01:44:58,239
thanks everyone

2632
01:44:58,560 --> 01:45:00,320
thanks thank you for

2633
01:45:00,320 --> 01:45:03,520
your attention and see you

2634
01:45:03,520 --> 01:45:06,080
next hi dev

2635
01:45:06,080 --> 01:45:10,760
maybe some comments from alexey or nick

2636
01:45:18,639 --> 01:45:19,600
no

2637
01:45:19,600 --> 01:45:21,679
there are no comments so

2638
01:45:21,679 --> 01:45:23,040
thank everyone

2639
01:45:23,040 --> 01:45:24,880
goodbye

2640
01:45:24,880 --> 01:45:28,360
have a nice day

