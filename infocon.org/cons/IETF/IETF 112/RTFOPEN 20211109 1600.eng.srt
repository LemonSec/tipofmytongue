1
00:03:41,599 --> 00:03:43,360
all right so i make it a couple of

2
00:03:43,360 --> 00:03:45,599
minutes after four o'clock and i see

3
00:03:45,599 --> 00:03:48,640
that all of uh award winners have joined

4
00:03:48,640 --> 00:03:50,879
and the number of people still joining

5
00:03:50,879 --> 00:03:53,840
seems to be slowing down so in that case

6
00:03:53,840 --> 00:03:56,799
i guess we should get started

7
00:03:56,799 --> 00:03:59,200
so my name is colin perkins from the the

8
00:03:59,200 --> 00:04:00,799
university of glasgow

9
00:04:00,799 --> 00:04:03,439
i'm the irtf chair and and this is the

10
00:04:03,439 --> 00:04:06,319
irtf open meeting for

11
00:04:06,319 --> 00:04:10,119
itf 112.

12
00:04:12,239 --> 00:04:14,879
so i want to start with the uh the usual

13
00:04:14,879 --> 00:04:16,959
note well and reminder of the

14
00:04:16,959 --> 00:04:19,839
intellectual property rules for the irtf

15
00:04:19,839 --> 00:04:20,720
um

16
00:04:20,720 --> 00:04:24,960
the irtf follows uh the the same sorts

17
00:04:24,960 --> 00:04:26,560
of intellectual property disclosure

18
00:04:26,560 --> 00:04:28,960
rules as the ietf

19
00:04:28,960 --> 00:04:31,360
you know if if you're aware of uh

20
00:04:31,360 --> 00:04:33,280
contributions um

21
00:04:33,280 --> 00:04:35,440
if you're aware of patents or patent

22
00:04:35,440 --> 00:04:37,040
applications that

23
00:04:37,040 --> 00:04:40,000
cover the contributions

24
00:04:40,000 --> 00:04:42,160
that you make that are controlled by you

25
00:04:42,160 --> 00:04:44,080
or your sponsor uh you do need to

26
00:04:44,080 --> 00:04:46,880
disclose that uh or not participate in

27
00:04:46,880 --> 00:04:48,320
the discussion

28
00:04:48,320 --> 00:04:50,800
um uh perhaps uh a difference from the

29
00:04:50,800 --> 00:04:53,800
ietf disclosure rules is that uh the

30
00:04:53,800 --> 00:04:56,400
irtf expects you to to file these

31
00:04:56,400 --> 00:04:58,960
disclosures in in a timely manner in a

32
00:04:58,960 --> 00:05:02,320
period of um days or weeks rather than

33
00:05:02,320 --> 00:05:03,360
months

34
00:05:03,360 --> 00:05:05,840
uh and we expect the the most liberal uh

35
00:05:05,840 --> 00:05:08,639
licensing terms uh possible are made

36
00:05:08,639 --> 00:05:12,000
available for irtf stream documents

37
00:05:12,000 --> 00:05:13,440
and if you need more details about this

38
00:05:13,440 --> 00:05:17,199
process um the um that the rfc is listed

39
00:05:17,199 --> 00:05:20,400
on the slide uh rfc is 5743

40
00:05:20,400 --> 00:05:22,720
uh 5378

41
00:05:22,720 --> 00:05:26,560
8179 uh give details of this

42
00:05:26,560 --> 00:05:28,440
and the url iot

43
00:05:28,440 --> 00:05:31,840
irtf.org slash policies slash ipr also

44
00:05:31,840 --> 00:05:34,160
has links to these and more details on

45
00:05:34,160 --> 00:05:37,479
on the process

46
00:05:38,720 --> 00:05:41,600
um also uh as should perhaps not be a

47
00:05:41,600 --> 00:05:45,039
surprise uh the irtf makes recordings of

48
00:05:45,039 --> 00:05:47,440
online and in-person meetings and this

49
00:05:47,440 --> 00:05:50,240
includes audio video and photographs and

50
00:05:50,240 --> 00:05:53,520
so on uh this session is being streamed

51
00:05:53,520 --> 00:05:56,080
uh live uh i believe we're going out on

52
00:05:56,080 --> 00:05:59,680
on youtube um as well as being uh

53
00:05:59,680 --> 00:06:02,000
the the meet echo session and as well as

54
00:06:02,000 --> 00:06:04,639
being recorded uh and the recording will

55
00:06:04,639 --> 00:06:08,400
be on youtube after the session as well

56
00:06:08,400 --> 00:06:09,199
um

57
00:06:09,199 --> 00:06:11,919
if you participate online um if you turn

58
00:06:11,919 --> 00:06:13,440
on your camera and microphone and make

59
00:06:13,440 --> 00:06:15,759
sense of the microphone then you are

60
00:06:15,759 --> 00:06:16,800
consider

61
00:06:16,800 --> 00:06:18,880
in the recordings

62
00:06:18,880 --> 00:06:21,520
and i'd also remind you that the chat

63
00:06:21,520 --> 00:06:24,000
logs uh in all of these meet echo

64
00:06:24,000 --> 00:06:26,319
sessions uh are recorded and they're

65
00:06:26,319 --> 00:06:28,240
available on the ietf site so what you

66
00:06:28,240 --> 00:06:32,520
put into the chat is also recorded

67
00:06:34,800 --> 00:06:36,720
um i'd also like to

68
00:06:36,720 --> 00:06:38,800
remind you that we we have a code of

69
00:06:38,800 --> 00:06:43,520
conduct in the irtf and in the ietf

70
00:06:43,520 --> 00:06:44,720
uh and

71
00:06:44,720 --> 00:06:46,560
you know as

72
00:06:46,560 --> 00:06:49,440
a participant uh as an attendee at the

73
00:06:49,440 --> 00:06:53,199
the irtf sessions uh you agree to um

74
00:06:53,199 --> 00:06:55,039
work uh respectfully with the other

75
00:06:55,039 --> 00:06:57,520
participants in the session um

76
00:06:57,520 --> 00:07:00,080
you agree to to behave in a professional

77
00:07:00,080 --> 00:07:01,919
respectful

78
00:07:01,919 --> 00:07:04,479
and polite manner

79
00:07:04,479 --> 00:07:06,240
and you know we we have the code of

80
00:07:06,240 --> 00:07:07,919
conduct we have the anterior harassment

81
00:07:07,919 --> 00:07:09,520
procedures which you see linked from the

82
00:07:09,520 --> 00:07:11,759
slide that go into a lot more detail

83
00:07:11,759 --> 00:07:14,720
about what we mean on that

84
00:07:14,720 --> 00:07:16,800
if you have any concerns about behavior

85
00:07:16,800 --> 00:07:19,759
of the uh various participants um the

86
00:07:19,759 --> 00:07:22,160
the ombuds team uh again linked from the

87
00:07:22,160 --> 00:07:24,160
slide um

88
00:07:24,160 --> 00:07:28,000
is available to to um investigate those

89
00:07:28,000 --> 00:07:31,199
and and to act as a point of contact if

90
00:07:31,199 --> 00:07:34,080
you have any any issues with the the

91
00:07:34,080 --> 00:07:36,560
participants in the session

92
00:07:36,560 --> 00:07:39,199
if you provide any personal data uh and

93
00:07:39,199 --> 00:07:40,880
in order to register you would have had

94
00:07:40,880 --> 00:07:42,240
to provide at least a little bit of

95
00:07:42,240 --> 00:07:44,160
personal data that's handled in

96
00:07:44,160 --> 00:07:46,479
accordance with the its privacy policy

97
00:07:46,479 --> 00:07:50,080
and again that's linked from the slide

98
00:07:54,800 --> 00:07:56,319
so what are the

99
00:07:56,319 --> 00:07:59,840
the goals of the irtf

100
00:07:59,840 --> 00:08:03,680
well the irtf is is there to provide a

101
00:08:03,680 --> 00:08:07,840
forum for longer term research issues um

102
00:08:07,840 --> 00:08:10,319
while the the the parallel organization

103
00:08:10,319 --> 00:08:13,120
that the ietf focuses on

104
00:08:13,120 --> 00:08:14,639
shorter term issues relating to

105
00:08:14,639 --> 00:08:18,160
engineering and making standards

106
00:08:18,240 --> 00:08:20,400
the goal of the iitf is very much to

107
00:08:20,400 --> 00:08:22,000
conduct research

108
00:08:22,000 --> 00:08:23,840
we're not a standards development

109
00:08:23,840 --> 00:08:26,160
organization

110
00:08:26,160 --> 00:08:29,199
and while the irtf research groups can

111
00:08:29,199 --> 00:08:30,400
publish

112
00:08:30,400 --> 00:08:33,279
informational or experimental

113
00:08:33,279 --> 00:08:36,080
documents in the rfc series the primary

114
00:08:36,080 --> 00:08:38,320
goal of the research groups is not

115
00:08:38,320 --> 00:08:40,479
publishing rfcs it's not publishing

116
00:08:40,479 --> 00:08:41,760
documents

117
00:08:41,760 --> 00:08:44,159
uh it's to promote um collaborations

118
00:08:44,159 --> 00:08:46,959
it's to promote research it's to promote

119
00:08:46,959 --> 00:08:49,120
development of research ideas that

120
00:08:49,120 --> 00:08:51,360
relate to the the internet protocols

121
00:08:51,360 --> 00:08:53,600
applications um architectures and

122
00:08:53,600 --> 00:08:56,320
technologies

123
00:08:56,480 --> 00:08:59,040
we have a very nice rfc that spencer

124
00:08:59,040 --> 00:09:03,519
dawkins wrote a few years ago rfc 7418

125
00:09:03,519 --> 00:09:06,080
which gives an irtf primer for ietf

126
00:09:06,080 --> 00:09:08,160
participants which talks about some of

127
00:09:08,160 --> 00:09:10,240
the the differences between the goals of

128
00:09:10,240 --> 00:09:12,959
the irtf and the ietf

129
00:09:12,959 --> 00:09:15,040
um so if you're not familiar with that

130
00:09:15,040 --> 00:09:17,120
uh i would very much encourage you to

131
00:09:17,120 --> 00:09:20,680
have a look at that

132
00:09:23,680 --> 00:09:26,640
the irtf is arranged as a set of

133
00:09:26,640 --> 00:09:28,800
research groups um

134
00:09:28,800 --> 00:09:31,760
we have uh five research groups which

135
00:09:31,760 --> 00:09:33,839
are highlighted in dark blue on this

136
00:09:33,839 --> 00:09:36,240
slide which are still to meet later this

137
00:09:36,240 --> 00:09:37,360
week

138
00:09:37,360 --> 00:09:39,680
uh the crypto forum research group uh

139
00:09:39,680 --> 00:09:42,080
develops cryptographic algorithms

140
00:09:42,080 --> 00:09:43,680
and looks for an understanding of

141
00:09:43,680 --> 00:09:45,839
various cryptographic algorithms and

142
00:09:45,839 --> 00:09:49,519
techniques uh many of those uh

143
00:09:49,519 --> 00:09:53,120
are used in itf standards

144
00:09:53,120 --> 00:09:55,200
uh the computation in the network group

145
00:09:55,200 --> 00:09:57,760
is looking at all aspects of in-network

146
00:09:57,760 --> 00:10:00,880
computation programmable networks uh and

147
00:10:00,880 --> 00:10:02,079
the impact

148
00:10:02,079 --> 00:10:04,640
of programmable um

149
00:10:04,640 --> 00:10:06,880
forwarding hardware programmable control

150
00:10:06,880 --> 00:10:10,480
planes uh on the internet architecture

151
00:10:10,480 --> 00:10:12,800
uh the pathway networking group uh is

152
00:10:12,800 --> 00:10:14,640
looking at um

153
00:10:14,640 --> 00:10:16,800
the the interplay between the endpoints

154
00:10:16,800 --> 00:10:18,800
and path elements and how that

155
00:10:18,800 --> 00:10:20,959
communication should happen

156
00:10:20,959 --> 00:10:23,040
uh the privacy enhancements and

157
00:10:23,040 --> 00:10:25,600
assessments group uh which uh

158
00:10:25,600 --> 00:10:27,519
my apologies to the chairs i noticed

159
00:10:27,519 --> 00:10:29,839
this was listed as a

160
00:10:29,839 --> 00:10:31,440
still a proposed group rather than a

161
00:10:31,440 --> 00:10:34,000
full group in the plenary slides

162
00:10:34,000 --> 00:10:35,360
is looking at privacy enhancing

163
00:10:35,360 --> 00:10:37,040
technologies

164
00:10:37,040 --> 00:10:38,240
and the human rights protocol

165
00:10:38,240 --> 00:10:40,320
considerations group is is looking at

166
00:10:40,320 --> 00:10:42,880
the impact of

167
00:10:42,880 --> 00:10:45,760
standards on human rights and the way we

168
00:10:45,760 --> 00:10:46,560
can

169
00:10:46,560 --> 00:10:48,880
reflect uh various

170
00:10:48,880 --> 00:10:51,440
principles from human rights in into the

171
00:10:51,440 --> 00:10:55,200
um the types of protocols we we develop

172
00:10:55,200 --> 00:10:58,000
in the community

173
00:10:58,000 --> 00:10:59,360
we also have a number of groups which

174
00:10:59,360 --> 00:11:03,920
have either met uh or or um

175
00:11:03,920 --> 00:11:05,920
even met already or not meeting at this

176
00:11:05,920 --> 00:11:08,640
session uh including the the map rg

177
00:11:08,640 --> 00:11:10,880
which uh had a bunch of interesting

178
00:11:10,880 --> 00:11:13,360
measurement papers uh looking at the

179
00:11:13,360 --> 00:11:15,440
network architecture in in the previous

180
00:11:15,440 --> 00:11:17,040
session

181
00:11:17,040 --> 00:11:17,920
and

182
00:11:17,920 --> 00:11:20,320
the network management global access and

183
00:11:20,320 --> 00:11:22,000
congestion control groups which met

184
00:11:22,000 --> 00:11:24,560
yesterday

185
00:11:27,360 --> 00:11:31,360
the research groups in in the irtf um

186
00:11:31,360 --> 00:11:34,079
require um some understanding of of the

187
00:11:34,079 --> 00:11:36,000
various research questions and problems

188
00:11:36,000 --> 00:11:37,519
that that are interesting in a

189
00:11:37,519 --> 00:11:39,040
particular area

190
00:11:39,040 --> 00:11:40,640
and are looking into understanding that

191
00:11:40,640 --> 00:11:42,720
the relevance of those problems and

192
00:11:42,720 --> 00:11:45,200
questions to the internet

193
00:11:45,200 --> 00:11:47,040
they're built around

194
00:11:47,040 --> 00:11:49,440
a particular community which is trying

195
00:11:49,440 --> 00:11:52,240
to conduct relevant research and that

196
00:11:52,240 --> 00:11:53,680
has been interested in bringing that

197
00:11:53,680 --> 00:11:56,000
research to the irtf

198
00:11:56,000 --> 00:11:57,440
and they're built on an understanding

199
00:11:57,440 --> 00:11:59,839
that there is a benefit for conducting

200
00:11:59,839 --> 00:12:01,760
that work in the irtf

201
00:12:01,760 --> 00:12:03,519
both for that community that brought the

202
00:12:03,519 --> 00:12:06,240
work in and for the irtf and the broader

203
00:12:06,240 --> 00:12:08,720
internet community

204
00:12:08,720 --> 00:12:10,399
the goal of these groups is very much to

205
00:12:10,399 --> 00:12:12,160
understand a problem right that they're

206
00:12:12,160 --> 00:12:14,480
not there to lend support to particular

207
00:12:14,480 --> 00:12:16,399
outcomes they're not there to produce

208
00:12:16,399 --> 00:12:19,279
documents in in the way that i i etf

209
00:12:19,279 --> 00:12:20,880
groups are

210
00:12:20,880 --> 00:12:22,639
the goal is understanding rather than

211
00:12:22,639 --> 00:12:26,480
products rather than rfcs in the irtf

212
00:12:26,480 --> 00:12:28,800
groups

213
00:12:31,360 --> 00:12:33,040
that said

214
00:12:33,040 --> 00:12:35,680
the groups can publish rfcs

215
00:12:35,680 --> 00:12:37,120
we have had

216
00:12:37,120 --> 00:12:39,440
one rfc published on the irtf stream

217
00:12:39,440 --> 00:12:41,959
since the last meeting which is rfc uh

218
00:12:41,959 --> 00:12:45,839
9106 on on the argon 2 uh memory hard

219
00:12:45,839 --> 00:12:48,639
function for password password hashing

220
00:12:48,639 --> 00:12:50,839
uh which came out of the crypto forum

221
00:12:50,839 --> 00:12:53,279
group but as i said a minute ago that

222
00:12:53,279 --> 00:12:55,200
the main focus is on developing

223
00:12:55,200 --> 00:12:58,800
understanding uh and in um

224
00:12:58,800 --> 00:13:00,560
you know the vast majority of the

225
00:13:00,560 --> 00:13:02,720
research groups i think research papers

226
00:13:02,720 --> 00:13:05,360
uh and discussion and understanding is a

227
00:13:05,360 --> 00:13:07,200
much more common out

228
00:13:07,200 --> 00:13:11,760
output than the the rfcs

229
00:13:16,800 --> 00:13:17,680
so

230
00:13:17,680 --> 00:13:19,120
um that's what i wanted to say about the

231
00:13:19,120 --> 00:13:20,880
irtf

232
00:13:20,880 --> 00:13:23,120
um there's a couple of other activities

233
00:13:23,120 --> 00:13:26,079
uh been happening uh which i i want to

234
00:13:26,079 --> 00:13:30,160
to mention in in this introductory talk

235
00:13:30,560 --> 00:13:32,880
the the first is that the internet

236
00:13:32,880 --> 00:13:34,480
architecture board

237
00:13:34,480 --> 00:13:37,360
has a program running to develop a new

238
00:13:37,360 --> 00:13:41,199
model for the rfc editor function

239
00:13:41,199 --> 00:13:43,199
and this program was created after the

240
00:13:43,199 --> 00:13:45,839
departure of the previous rfc series

241
00:13:45,839 --> 00:13:47,440
editor

242
00:13:47,440 --> 00:13:48,959
i guess uh

243
00:13:48,959 --> 00:13:52,079
a year 18 months or so ago i forget the

244
00:13:52,079 --> 00:13:55,199
exact timing um in it back in the times

245
00:13:55,199 --> 00:13:57,040
when we all used to meet in person in

246
00:13:57,040 --> 00:13:59,440
wonderland hotel rooms so i guess it was

247
00:13:59,440 --> 00:14:01,120
a while ago

248
00:14:01,120 --> 00:14:04,320
um and that that program has been um

249
00:14:04,320 --> 00:14:07,920
developing a new model for how the rfc

250
00:14:07,920 --> 00:14:10,800
editor function uh is is organized and

251
00:14:10,800 --> 00:14:14,560
arranged and arranged

252
00:14:14,560 --> 00:14:16,240
the model they're proposing has some

253
00:14:16,240 --> 00:14:18,959
fairly significant changes to the rfc

254
00:14:18,959 --> 00:14:21,199
editor function

255
00:14:21,199 --> 00:14:23,839
um it's proposing to to change the rfc

256
00:14:23,839 --> 00:14:26,160
editor role to that of a consulting

257
00:14:26,160 --> 00:14:28,160
editor which will be known as the rs

258
00:14:28,160 --> 00:14:31,120
series consulting editor um he'll be an

259
00:14:31,120 --> 00:14:33,120
expert that will provide guidance to the

260
00:14:33,120 --> 00:14:36,160
community to the uh rfc publishing

261
00:14:36,160 --> 00:14:38,320
streams and to the rfc publication

262
00:14:38,320 --> 00:14:40,079
center

263
00:14:40,079 --> 00:14:44,240
and it's proposing to shift the um

264
00:14:44,240 --> 00:14:46,959
the the the responsibility for oversight

265
00:14:46,959 --> 00:14:49,920
of of the evolution of the rfc series um

266
00:14:49,920 --> 00:14:52,480
from the internet architecture board to

267
00:14:52,480 --> 00:14:56,480
a new working group um

268
00:14:57,120 --> 00:15:00,320
which will be known as as the rfc uh fc

269
00:15:00,320 --> 00:15:02,399
series working group um

270
00:15:02,399 --> 00:15:03,920
which will be a a working group which is

271
00:15:03,920 --> 00:15:06,800
independent of the the i i etf and the

272
00:15:06,800 --> 00:15:09,040
irtf and the independent stream and

273
00:15:09,040 --> 00:15:11,600
we'll just act as an oversight for the

274
00:15:11,600 --> 00:15:13,199
the series

275
00:15:13,199 --> 00:15:14,399
um

276
00:15:14,399 --> 00:15:16,880
and once that group reaches uh consensus

277
00:15:16,880 --> 00:15:18,720
on proposed changes to the operation of

278
00:15:18,720 --> 00:15:21,519
the rfc series um there'll be

279
00:15:21,519 --> 00:15:23,600
the the the proposals will then be

280
00:15:23,600 --> 00:15:26,880
reviewed by an rfc series approval board

281
00:15:26,880 --> 00:15:29,120
which will comprise the uh the rfc

282
00:15:29,120 --> 00:15:30,959
series consulting editor

283
00:15:30,959 --> 00:15:33,199
um and representatives of the various

284
00:15:33,199 --> 00:15:36,560
streams um which are likely to be the

285
00:15:36,560 --> 00:15:40,079
irtf chair the ietf chair and the iab

286
00:15:40,079 --> 00:15:42,480
chair although they can delegate that if

287
00:15:42,480 --> 00:15:44,639
they need to

288
00:15:44,639 --> 00:15:46,560
but it's shifting the responsibility of

289
00:15:46,560 --> 00:15:49,040
of the management of the rfc series from

290
00:15:49,040 --> 00:15:53,800
the iab on to the community

291
00:15:54,720 --> 00:15:57,680
now this may seem like uh a fairly uh

292
00:15:57,680 --> 00:15:59,839
you know a bit of a process arcana but

293
00:15:59,839 --> 00:16:01,279
it's actually a fairly significant

294
00:16:01,279 --> 00:16:03,360
change to the administration of the rfc

295
00:16:03,360 --> 00:16:05,120
series going forward

296
00:16:05,120 --> 00:16:08,959
uh and potentially has the ability to

297
00:16:08,959 --> 00:16:11,759
impact the way the irtf can publish

298
00:16:11,759 --> 00:16:14,399
documents since if the way the the rfc

299
00:16:14,399 --> 00:16:18,079
series changes the way the irtf music

300
00:16:18,079 --> 00:16:20,560
changes

301
00:16:20,839 --> 00:16:24,800
um the new model the the description of

302
00:16:24,800 --> 00:16:28,160
this process uh is described in an

303
00:16:28,160 --> 00:16:29,759
internet draft that the iab have

304
00:16:29,759 --> 00:16:31,440
published that this program have

305
00:16:31,440 --> 00:16:36,240
published uh draft iab rfc ed future rfc

306
00:16:36,240 --> 00:16:38,880
ed model if i got the uh the draft name

307
00:16:38,880 --> 00:16:40,639
right

308
00:16:40,639 --> 00:16:42,800
that's just completed last call in the

309
00:16:42,800 --> 00:16:46,000
iab program and is about to enter it a

310
00:16:46,000 --> 00:16:50,480
community wide last call for comments

311
00:16:50,480 --> 00:16:52,959
so i i would encourage you as

312
00:16:52,959 --> 00:16:55,680
participants in the irtf to

313
00:16:55,680 --> 00:16:57,360
review this document

314
00:16:57,360 --> 00:17:00,800
and provide feedback to the rfc editor

315
00:17:00,800 --> 00:17:02,880
future development program

316
00:17:02,880 --> 00:17:05,520
they have a meeting tomorrow uh

317
00:17:05,520 --> 00:17:09,119
in the 1430 utc slot uh they also have a

318
00:17:09,119 --> 00:17:11,119
mailing list by which you can provide

319
00:17:11,119 --> 00:17:12,400
comments

320
00:17:12,400 --> 00:17:14,240
uh and as i said please do review this

321
00:17:14,240 --> 00:17:16,480
document please do

322
00:17:16,480 --> 00:17:18,240
send feedback on whether you think

323
00:17:18,240 --> 00:17:20,319
what's being proposed it is or is not

324
00:17:20,319 --> 00:17:24,000
appropriate so as you see fit

325
00:17:29,039 --> 00:17:32,480
all right onto um perhaps happier

326
00:17:32,480 --> 00:17:35,440
happier notes than um the arcana of the

327
00:17:35,440 --> 00:17:38,640
itf and irtf process um

328
00:17:38,640 --> 00:17:41,520
the next thing on my list today's is to

329
00:17:41,520 --> 00:17:43,360
uh congratulate

330
00:17:43,360 --> 00:17:45,440
one of our research group chairs uh

331
00:17:45,440 --> 00:17:47,520
vansant

332
00:17:47,520 --> 00:17:50,640
and i i believe marie jose has

333
00:17:50,640 --> 00:17:52,960
something to say on this topic murray

334
00:17:52,960 --> 00:17:56,000
jose are you there

335
00:17:56,320 --> 00:17:58,720
go ahead

336
00:17:59,520 --> 00:18:04,480
you hear me you hear me okay so okay so

337
00:18:04,480 --> 00:18:07,919
somebody has echo um i this morning

338
00:18:07,919 --> 00:18:09,520
actually it's a it's a new thing this

339
00:18:09,520 --> 00:18:12,559
morning at 11 a.m uh paris time

340
00:18:12,559 --> 00:18:14,960
uh weinstein um

341
00:18:14,960 --> 00:18:17,200
received uh his award

342
00:18:17,200 --> 00:18:19,679
is another chevalier of the audre du

343
00:18:19,679 --> 00:18:20,799
merit

344
00:18:20,799 --> 00:18:23,600
of scientific signed for scientific work

345
00:18:23,600 --> 00:18:25,679
of the french government

346
00:18:25,679 --> 00:18:29,360
and while the award was given to him for

347
00:18:29,360 --> 00:18:31,360
this contact tracing

348
00:18:31,360 --> 00:18:32,559
um

349
00:18:32,559 --> 00:18:34,720
system or or protocol that they put

350
00:18:34,720 --> 00:18:36,960
together for the french government

351
00:18:36,960 --> 00:18:40,160
it was actually highly mentioned in the

352
00:18:40,160 --> 00:18:43,520
um presentation from the french

353
00:18:43,520 --> 00:18:46,559
government official uh that veins was a

354
00:18:46,559 --> 00:18:49,600
major contributor to the ietf with 14

355
00:18:49,600 --> 00:18:52,480
rfcs which i think is about

356
00:18:52,480 --> 00:18:53,919
i think there's two french people have

357
00:18:53,919 --> 00:18:56,320
tons of rfcs the other one being crystal

358
00:18:56,320 --> 00:18:59,200
utema of the iab and so that was

359
00:18:59,200 --> 00:19:01,440
actually mentioned as a major

360
00:19:01,440 --> 00:19:04,720
contribution also his work in the irtf

361
00:19:04,720 --> 00:19:06,880
which i am very much

362
00:19:06,880 --> 00:19:10,000
aware of but what was mentioned was also

363
00:19:10,000 --> 00:19:12,000
i think what we all came to appreciate

364
00:19:12,000 --> 00:19:13,200
of him

365
00:19:13,200 --> 00:19:16,320
the hard work the the community spirit

366
00:19:16,320 --> 00:19:17,919
the fact that he's

367
00:19:17,919 --> 00:19:20,559
always open to new ideas every team

368
00:19:20,559 --> 00:19:21,520
leader

369
00:19:21,520 --> 00:19:23,760
um very committed to the people he works

370
00:19:23,760 --> 00:19:25,679
with to also to his family and to the

371
00:19:25,679 --> 00:19:27,200
environment

372
00:19:27,200 --> 00:19:28,880
it was funny for those of you who know

373
00:19:28,880 --> 00:19:31,039
him that he had a shirt and tie and a

374
00:19:31,039 --> 00:19:33,760
jacket which is like first for me

375
00:19:33,760 --> 00:19:34,799
but

376
00:19:34,799 --> 00:19:39,480
i think it was highly um

377
00:19:39,520 --> 00:19:42,320
like it was highly deserved and i think

378
00:19:42,320 --> 00:19:44,559
uh we always forget that there are

379
00:19:44,559 --> 00:19:46,400
people like weinstein who are not like

380
00:19:46,400 --> 00:19:48,320
the most vocal and who are a little bit

381
00:19:48,320 --> 00:19:50,720
quiet but in the end do all the major

382
00:19:50,720 --> 00:19:55,280
work and i felt this was such a great

383
00:19:55,280 --> 00:19:57,600
recognition of all his achievements and

384
00:19:57,600 --> 00:20:00,000
and i'm absolutely proud of having been

385
00:20:00,000 --> 00:20:04,200
his co-chair thank you

386
00:20:07,600 --> 00:20:09,840
yeah think thank you murray

387
00:20:09,840 --> 00:20:11,760
congratulations to to vancouver as you

388
00:20:11,760 --> 00:20:13,840
say this is an incredibly well deserved

389
00:20:13,840 --> 00:20:17,360
award uh panson has been uh involved in

390
00:20:17,360 --> 00:20:19,679
in the ietf and the irtf for very many

391
00:20:19,679 --> 00:20:21,679
years and has made some some really

392
00:20:21,679 --> 00:20:23,039
tremendous and really important

393
00:20:23,039 --> 00:20:24,320
contributions

394
00:20:24,320 --> 00:20:27,120
so i think that this is uh astoundingly

395
00:20:27,120 --> 00:20:29,600
good news

396
00:20:32,400 --> 00:20:35,280
all right continuing the good news um

397
00:20:35,280 --> 00:20:38,720
one of the uh more pleasurable uh parts

398
00:20:38,720 --> 00:20:41,760
of um being the irtf chair is is that we

399
00:20:41,760 --> 00:20:43,520
get toward the

400
00:20:43,520 --> 00:20:46,080
applied networking research prizes

401
00:20:46,080 --> 00:20:48,080
which we organize in in conjunction with

402
00:20:48,080 --> 00:20:50,559
the internet society uh and with support

403
00:20:50,559 --> 00:20:54,720
by by comcast and nbc university

404
00:20:54,720 --> 00:20:58,240
uh these places these prizes are awarded

405
00:20:58,240 --> 00:21:00,960
um for some of the best recent results

406
00:21:00,960 --> 00:21:02,400
in applied networking

407
00:21:02,400 --> 00:21:05,840
um for some interesting new research

408
00:21:05,840 --> 00:21:07,200
ideas which

409
00:21:07,200 --> 00:21:09,120
may potentially be relevant to the

410
00:21:09,120 --> 00:21:11,280
internet standards community to the

411
00:21:11,280 --> 00:21:13,600
internet research community

412
00:21:13,600 --> 00:21:15,360
and to recognize upcoming people that

413
00:21:15,360 --> 00:21:18,159
are likely to have an impact on internet

414
00:21:18,159 --> 00:21:21,520
standards and technologies in the future

415
00:21:21,520 --> 00:21:23,919
and in normal times we would bring these

416
00:21:23,919 --> 00:21:27,679
people to to an ietf an irtf meeting and

417
00:21:27,679 --> 00:21:29,360
i would be introducing them into you in

418
00:21:29,360 --> 00:21:31,679
person uh and um

419
00:21:31,679 --> 00:21:33,600
we we could uh

420
00:21:33,600 --> 00:21:35,280
chat with them in the breaks and bring

421
00:21:35,280 --> 00:21:37,679
them to the to the related sessions

422
00:21:37,679 --> 00:21:40,000
um of course in in these times that this

423
00:21:40,000 --> 00:21:42,960
is not necessarily possible but uh i i i

424
00:21:42,960 --> 00:21:45,760
hope you i hope they will be uh

425
00:21:45,760 --> 00:21:47,679
uh around for the week and then similar

426
00:21:47,679 --> 00:21:49,679
breaks and and you can chat with them

427
00:21:49,679 --> 00:21:51,440
and uh we can try to get some

428
00:21:51,440 --> 00:21:54,240
interaction going

429
00:21:54,240 --> 00:21:56,640
but uh it's my pleasure to to announce

430
00:21:56,640 --> 00:21:59,679
that the the winners uh of of the

431
00:21:59,679 --> 00:22:01,840
applied networking research prizes uh

432
00:22:01,840 --> 00:22:04,400
which are being presented at this ietf

433
00:22:04,400 --> 00:22:07,200
meeting there's this irtf open meeting

434
00:22:07,200 --> 00:22:10,320
uh uh thomas vertigon uh for his work on

435
00:22:10,320 --> 00:22:13,760
uh extensibility of bgp implementations

436
00:22:13,760 --> 00:22:16,000
and other routing protocols

437
00:22:16,000 --> 00:22:18,640
uh they have to uh axa cash f for her

438
00:22:18,640 --> 00:22:21,360
work uh looking at third party service

439
00:22:21,360 --> 00:22:23,280
dependencies on the internet

440
00:22:23,280 --> 00:22:25,360
and they go to kevin bock for his work

441
00:22:25,360 --> 00:22:27,840
on internet censorship

442
00:22:27,840 --> 00:22:29,440
and the the evasion of various

443
00:22:29,440 --> 00:22:31,520
censorship techniques

444
00:22:31,520 --> 00:22:33,360
so congratulations very much to the

445
00:22:33,360 --> 00:22:36,080
these three speakers uh we will see the

446
00:22:36,080 --> 00:22:38,799
uh the talks in in a few minutes um if

447
00:22:38,799 --> 00:22:41,200
you do see see these people around and i

448
00:22:41,200 --> 00:22:42,640
see they're they're in the chat here but

449
00:22:42,640 --> 00:22:44,080
if you see them around at the rest of

450
00:22:44,080 --> 00:22:46,720
the itf irtf sessions or during the

451
00:22:46,720 --> 00:22:47,600
breaks

452
00:22:47,600 --> 00:22:49,120
uh please do talk to them please do

453
00:22:49,120 --> 00:22:51,039
congratulate them i think this is some

454
00:22:51,039 --> 00:22:55,158
really nice work we've got here

455
00:22:55,600 --> 00:22:57,200
and in addition to that

456
00:22:57,200 --> 00:23:00,559
the nominations for the 2022 applied

457
00:23:00,559 --> 00:23:03,280
networking research prize are now open

458
00:23:03,280 --> 00:23:04,240
um

459
00:23:04,240 --> 00:23:06,960
the the deadline for these nominations

460
00:23:06,960 --> 00:23:10,400
is the uh 19th of november so you have

461
00:23:10,400 --> 00:23:13,840
10 days so if you know any um

462
00:23:13,840 --> 00:23:15,440
any interesting applied networking

463
00:23:15,440 --> 00:23:16,960
research um

464
00:23:16,960 --> 00:23:18,880
if you know any good papers in this area

465
00:23:18,880 --> 00:23:20,720
if you know any any people who you think

466
00:23:20,720 --> 00:23:22,960
will make interesting contributions to

467
00:23:22,960 --> 00:23:24,880
the community any work which you think

468
00:23:24,880 --> 00:23:26,799
is is especially valuable and isn't

469
00:23:26,799 --> 00:23:29,039
getting the recognition it deserves

470
00:23:29,039 --> 00:23:32,080
then please go go to the website there

471
00:23:32,080 --> 00:23:33,200
please

472
00:23:33,200 --> 00:23:34,960
make the nominations

473
00:23:34,960 --> 00:23:37,120
and we very much encourage both um

474
00:23:37,120 --> 00:23:40,080
third-party nominations where um

475
00:23:40,080 --> 00:23:41,919
with someone's permission you nominate

476
00:23:41,919 --> 00:23:44,120
someone for the price but also

477
00:23:44,120 --> 00:23:47,200
self-nominations uh if if we you know if

478
00:23:47,200 --> 00:23:49,520
so if you think your work is deserving

479
00:23:49,520 --> 00:23:51,120
of the price and isn't getting the

480
00:23:51,120 --> 00:23:53,279
recognition as it deserves then please

481
00:23:53,279 --> 00:23:54,960
do nominate yourself

482
00:23:54,960 --> 00:23:56,960
and if you're shy about that

483
00:23:56,960 --> 00:24:00,080
reach out to me uh and i will uh happily

484
00:24:00,080 --> 00:24:02,159
uh discuss this and

485
00:24:02,159 --> 00:24:03,520
you know

486
00:24:03,520 --> 00:24:05,600
highlight whether i i i think you should

487
00:24:05,600 --> 00:24:07,279
be dominating the work and and be as

488
00:24:07,279 --> 00:24:09,600
encouraging as i can to to get as much

489
00:24:09,600 --> 00:24:11,760
work in as we can

490
00:24:11,760 --> 00:24:14,320
and for the community um if if you have

491
00:24:14,320 --> 00:24:16,400
um you know as i say if you're worth

492
00:24:16,400 --> 00:24:18,240
work which deserves the price uh please

493
00:24:18,240 --> 00:24:20,880
do nominate

494
00:24:23,039 --> 00:24:25,360
with that uh we'll move on to the the

495
00:24:25,360 --> 00:24:28,000
talks uh we have three talks uh we're

496
00:24:28,000 --> 00:24:29,760
running a little late but i think not

497
00:24:29,760 --> 00:24:31,600
all of the talks use their their full

498
00:24:31,600 --> 00:24:34,799
time uh so the first talk uh is by toma

499
00:24:34,799 --> 00:24:38,000
uh talking about uh xbgp um

500
00:24:38,000 --> 00:24:40,320
and in a certain amount of irony that

501
00:24:40,320 --> 00:24:41,919
the talk entitled when you can't wait

502
00:24:41,919 --> 00:24:44,559
for the ietf uh is presented in the last

503
00:24:44,559 --> 00:24:47,039
of the three uh award talks of the year

504
00:24:47,039 --> 00:24:49,039
so i guess there's something to be said

505
00:24:49,039 --> 00:24:50,320
the

506
00:24:50,320 --> 00:24:53,360
uh last of the three irtf meetings where

507
00:24:53,360 --> 00:24:54,880
the award talks are presented in the

508
00:24:54,880 --> 00:24:56,000
year

509
00:24:56,000 --> 00:24:57,360
um

510
00:24:57,360 --> 00:24:59,600
access talk on uh

511
00:24:59,600 --> 00:25:01,279
third party service dependencies we'll

512
00:25:01,279 --> 00:25:04,080
follow that uh in about 30 minutes

513
00:25:04,080 --> 00:25:06,080
and then finally we'll have kevin

514
00:25:06,080 --> 00:25:07,760
talking about

515
00:25:07,760 --> 00:25:10,000
censorship

516
00:25:10,000 --> 00:25:12,840
and server-side censorship

517
00:25:12,840 --> 00:25:17,120
evasion so uh with that uh i'm done uh

518
00:25:17,120 --> 00:25:19,039
we will move on to the

519
00:25:19,039 --> 00:25:24,240
first of the pre-recorded uh videos um

520
00:25:24,240 --> 00:25:28,080
which is by thomas uh vertigon my

521
00:25:28,080 --> 00:25:31,440
apologies if i'm mispronouncing my name

522
00:25:31,440 --> 00:25:33,760
thomas received his master's degree in

523
00:25:33,760 --> 00:25:36,240
computer science from

524
00:25:36,240 --> 00:25:39,200
van in belgium

525
00:25:39,279 --> 00:25:40,159
and

526
00:25:40,159 --> 00:25:41,600
started a phd looking at the

527
00:25:41,600 --> 00:25:44,000
extensibility of routing protocols under

528
00:25:44,000 --> 00:25:47,520
the supervision of olivier bonaventure

529
00:25:47,520 --> 00:25:48,799
he's currently working on techniques to

530
00:25:48,799 --> 00:25:51,039
improve the program programmability of

531
00:25:51,039 --> 00:25:54,720
bgp um which led to the prototype xbgp

532
00:25:54,720 --> 00:25:56,240
system that he'll be talking about in

533
00:25:56,240 --> 00:25:57,360
this talk

534
00:25:57,360 --> 00:25:58,799
and his research interests include

535
00:25:58,799 --> 00:26:00,720
distributed routing protocols

536
00:26:00,720 --> 00:26:02,720
programmable networks and system

537
00:26:02,720 --> 00:26:04,480
architectures

538
00:26:04,480 --> 00:26:05,840
now he'll be talking about the paper

539
00:26:05,840 --> 00:26:07,200
xbgp

540
00:26:07,200 --> 00:26:08,799
when you can't wait for the itf and the

541
00:26:08,799 --> 00:26:11,200
vendors which is originally presented in

542
00:26:11,200 --> 00:26:15,279
the acm hotnet symposium in 2020

543
00:26:15,279 --> 00:26:17,360
and i think thomas is in the chat so if

544
00:26:17,360 --> 00:26:19,200
there are any um questions for

545
00:26:19,200 --> 00:26:20,480
clarification

546
00:26:20,480 --> 00:26:22,080
any quick questions during the talk we

547
00:26:22,080 --> 00:26:23,520
can ask them in the chat and then he'll

548
00:26:23,520 --> 00:26:24,880
be available

549
00:26:24,880 --> 00:26:28,159
to answer questions live after the talk

550
00:26:28,159 --> 00:26:30,720
so thank you and meet echo if we can

551
00:26:30,720 --> 00:26:34,520
play the first of the videos

552
00:26:39,679 --> 00:26:41,840
hello everyone my name is tona and i

553
00:26:41,840 --> 00:26:44,320
will explain you xbgp a new way to add

554
00:26:44,320 --> 00:26:47,039
flexibility inside a routing protocol so

555
00:26:47,039 --> 00:26:48,559
why it is needed to bring

556
00:26:48,559 --> 00:26:50,880
programmability to a routing protocol

557
00:26:50,880 --> 00:26:53,120
inventing yourself as being a maintainer

558
00:26:53,120 --> 00:26:55,200
of an autonomous system the current best

559
00:26:55,200 --> 00:26:57,760
practice today is to have routers from

560
00:26:57,760 --> 00:26:59,600
different vendors but the problem with

561
00:26:59,600 --> 00:27:02,080
that is that you don't have a unified

562
00:27:02,080 --> 00:27:04,320
interface to configure your routers and

563
00:27:04,320 --> 00:27:06,000
the second problem is that if you would

564
00:27:06,000 --> 00:27:08,400
like to add a new functionality inside

565
00:27:08,400 --> 00:27:11,360
your network then all the routers must

566
00:27:11,360 --> 00:27:14,080
implement the functionality but all of

567
00:27:14,080 --> 00:27:15,760
the routers do not implement the same

568
00:27:15,760 --> 00:27:17,279
set of functionality and this is a

569
00:27:17,279 --> 00:27:19,520
problem and the other problem is that if

570
00:27:19,520 --> 00:27:20,559
you would like to add a new

571
00:27:20,559 --> 00:27:22,640
functionality which is not standardized

572
00:27:22,640 --> 00:27:23,679
or

573
00:27:23,679 --> 00:27:26,159
implemented to the routers then you need

574
00:27:26,159 --> 00:27:29,200
to pass to a standardization step by the

575
00:27:29,200 --> 00:27:33,279
ietf in average for bgp it took 3.5

576
00:27:33,279 --> 00:27:35,520
euros on the slide you can see the

577
00:27:35,520 --> 00:27:37,919
standardization delay of all bdp

578
00:27:37,919 --> 00:27:41,120
features so we measure the time since it

579
00:27:41,120 --> 00:27:44,000
is released as a draft to the moment it

580
00:27:44,000 --> 00:27:46,640
is released as an lfc this is not an

581
00:27:46,640 --> 00:27:48,880
isolated case what are routing protocols

582
00:27:48,880 --> 00:27:51,679
suffer from the same delay but the least

583
00:27:51,679 --> 00:27:53,760
i have shown that this is also the case

584
00:27:53,760 --> 00:27:56,480
for other lfcs next you need to

585
00:27:56,480 --> 00:27:58,480
implement your feature through the

586
00:27:58,480 --> 00:28:01,039
operating system vendors and finally the

587
00:28:01,039 --> 00:28:03,279
routers must be updated but if you are a

588
00:28:03,279 --> 00:28:06,000
small network such as bullet you cannot

589
00:28:06,000 --> 00:28:08,320
easily influence step one and step two

590
00:28:08,320 --> 00:28:10,399
because you are you don't have enough in

591
00:28:10,399 --> 00:28:13,200
fact to actually convince routers

592
00:28:13,200 --> 00:28:16,000
vendors and the itf from your new

593
00:28:16,000 --> 00:28:17,120
feature

594
00:28:17,120 --> 00:28:19,760
because of those problems we introduce

595
00:28:19,760 --> 00:28:22,480
xbgp that is designed to bring back

596
00:28:22,480 --> 00:28:24,720
innovation to the network operator we

597
00:28:24,720 --> 00:28:27,200
would like to open the bdp box so that

598
00:28:27,200 --> 00:28:29,760
the network operator can actually modify

599
00:28:29,760 --> 00:28:32,320
the protocol i will explain you how hvp

600
00:28:32,320 --> 00:28:34,480
works in practice

601
00:28:34,480 --> 00:28:37,120
we start from bgp which is considered as

602
00:28:37,120 --> 00:28:40,080
the black box you can configure bgp with

603
00:28:40,080 --> 00:28:42,799
multiple interface for example cli

604
00:28:42,799 --> 00:28:45,520
netconf or snmp to make some monitoring

605
00:28:45,520 --> 00:28:48,399
so those are the main interfaces to

606
00:28:48,399 --> 00:28:50,960
configure but you'll not have any way to

607
00:28:50,960 --> 00:28:53,440
modify the protocol you as being a

608
00:28:53,440 --> 00:28:56,080
network operator xbgp will open delete

609
00:28:56,080 --> 00:28:58,080
and will expose the protocol in the

610
00:28:58,080 --> 00:29:00,000
protocol memory inside the protocol you

611
00:29:00,000 --> 00:29:02,480
can add a new state you can modify

612
00:29:02,480 --> 00:29:05,600
existing states and also you can modify

613
00:29:05,600 --> 00:29:07,440
the transition between two states

614
00:29:07,440 --> 00:29:09,200
concerning the protocol memory you can

615
00:29:09,200 --> 00:29:10,880
access through the routing table you can

616
00:29:10,880 --> 00:29:12,880
also access to other internal desktop

617
00:29:12,880 --> 00:29:14,000
structure

618
00:29:14,000 --> 00:29:14,960
now

619
00:29:14,960 --> 00:29:17,440
the operator thanks to the interface of

620
00:29:17,440 --> 00:29:20,480
edgp can now add extension code to their

621
00:29:20,480 --> 00:29:22,799
router so they write the extension code

622
00:29:22,799 --> 00:29:25,440
once it will compile to a bytecode and

623
00:29:25,440 --> 00:29:28,159
this my code will be executed to all the

624
00:29:28,159 --> 00:29:31,360
routers which are usbd compatible

625
00:29:31,360 --> 00:29:34,399
now actually is mgp let's add it on the

626
00:29:34,399 --> 00:29:37,200
top of operating system vendors now the

627
00:29:37,200 --> 00:29:40,000
routers can be seen as a kernel where

628
00:29:40,000 --> 00:29:43,120
you can actually run some extension

629
00:29:43,120 --> 00:29:45,600
which is the modification to your pdp

630
00:29:45,600 --> 00:29:47,919
protocol now i will explain you how

631
00:29:47,919 --> 00:29:51,200
enzyme work inside bgp but before i will

632
00:29:51,200 --> 00:29:52,880
take an example of a new feature which

633
00:29:52,880 --> 00:29:55,600
is not standardized by the itf and not

634
00:29:55,600 --> 00:29:58,720
implemented inside any operating system

635
00:29:58,720 --> 00:30:01,039
so what we would like is to add the

636
00:30:01,039 --> 00:30:03,200
geographical localization of the router

637
00:30:03,200 --> 00:30:06,000
when i see the vdp update to make some

638
00:30:06,000 --> 00:30:09,200
for example filtering or some analysis

639
00:30:09,200 --> 00:30:11,279
this information about the geographical

640
00:30:11,279 --> 00:30:13,520
localization will be added to the bgp

641
00:30:13,520 --> 00:30:15,760
update that will be spread to other

642
00:30:15,760 --> 00:30:18,159
routers of your network and so that

643
00:30:18,159 --> 00:30:21,039
other voters can use your functionality

644
00:30:21,039 --> 00:30:23,200
that you have implemented and then in

645
00:30:23,200 --> 00:30:25,760
order to not spoil the order neighbor

646
00:30:25,760 --> 00:30:27,840
you will remove your geographical

647
00:30:27,840 --> 00:30:31,279
localization from the mdp update

648
00:30:31,279 --> 00:30:33,440
if you would like to add this new

649
00:30:33,440 --> 00:30:35,840
feature inside the mdb protocol then you

650
00:30:35,840 --> 00:30:37,600
need to think about how bgp

651
00:30:37,600 --> 00:30:40,720
implementation works normally all wdp

652
00:30:40,720 --> 00:30:43,399
implementation follows the rfc

653
00:30:43,399 --> 00:30:48,240
4271 and inside the rfc 4271 it explains

654
00:30:48,240 --> 00:30:51,039
the bdp workflow first you have bgp

655
00:30:51,039 --> 00:30:52,960
message that comes from your heels it

656
00:30:52,960 --> 00:30:56,000
will pass to the ajar bin then inside

657
00:30:56,000 --> 00:30:58,240
the import filter when it was the import

658
00:30:58,240 --> 00:31:00,320
filter it goes to the locality all the

659
00:31:00,320 --> 00:31:02,399
acceptable route inside the long calling

660
00:31:02,399 --> 00:31:05,760
will be taken to the bgp process to take

661
00:31:05,760 --> 00:31:07,600
only one baseboard that will be pushed

662
00:31:07,600 --> 00:31:10,000
to the forwarding table of the routers

663
00:31:10,000 --> 00:31:11,039
and then

664
00:31:11,039 --> 00:31:13,279
putting inside the export meter to take

665
00:31:13,279 --> 00:31:16,000
whether or not the route can be exported

666
00:31:16,000 --> 00:31:18,640
to other networks and if it is the case

667
00:31:18,640 --> 00:31:20,720
it will be stored in the rj board and

668
00:31:20,720 --> 00:31:23,519
finally the message will be generated if

669
00:31:23,519 --> 00:31:25,760
i take back my geographical localization

670
00:31:25,760 --> 00:31:29,360
extension you need to modify multiple

671
00:31:29,360 --> 00:31:31,600
steps of the bdp protocol and those are

672
00:31:31,600 --> 00:31:34,240
represented by the blue arrows

673
00:31:34,240 --> 00:31:36,399
with the bdp it is possible to modify

674
00:31:36,399 --> 00:31:39,120
the protocol thanks to the introduction

675
00:31:39,120 --> 00:31:42,080
of insertion point insertion points are

676
00:31:42,080 --> 00:31:45,279
a way to execute arbitrary code and so

677
00:31:45,279 --> 00:31:47,360
if i take back my

678
00:31:47,360 --> 00:31:49,840
geographical localization it is composed

679
00:31:49,840 --> 00:31:52,240
of multiple subpart and also part will

680
00:31:52,240 --> 00:31:55,440
be added to the right insertion point

681
00:31:55,440 --> 00:31:57,760
but that's not all because our extension

682
00:31:57,760 --> 00:32:00,080
must talk to the protocol member to

683
00:32:00,080 --> 00:32:02,399
retrieve the geographical localization

684
00:32:02,399 --> 00:32:05,279
and this is known via the xmdp api and

685
00:32:05,279 --> 00:32:06,799
this is something that makes the

686
00:32:06,799 --> 00:32:09,039
interaction between the plugin and

687
00:32:09,039 --> 00:32:11,360
the protocol memory now i will explain

688
00:32:11,360 --> 00:32:14,159
you dxpgpl this is some way to

689
00:32:14,159 --> 00:32:16,960
communicate with the vdp implementation

690
00:32:16,960 --> 00:32:18,960
and all the extension code or plugin

691
00:32:18,960 --> 00:32:21,840
must use this api to retrieve or set

692
00:32:21,840 --> 00:32:25,120
some protocol memory why first because

693
00:32:25,120 --> 00:32:28,080
it ensures a designation of the plugin

694
00:32:28,080 --> 00:32:30,720
and the gp implementation and second it

695
00:32:30,720 --> 00:32:32,960
is a unified way to

696
00:32:32,960 --> 00:32:35,760
access to the memory remember that xbgp

697
00:32:35,760 --> 00:32:38,480
must support multiple pdp implementation

698
00:32:38,480 --> 00:32:41,039
name xvdp api contains multiple

699
00:32:41,039 --> 00:32:43,200
functions such as function to send and

700
00:32:43,200 --> 00:32:45,760
read bgp messages also the function to

701
00:32:45,760 --> 00:32:47,919
get or set some memory inside the

702
00:32:47,919 --> 00:32:50,000
protocol memory for example for the

703
00:32:50,000 --> 00:32:51,840
geographical localization you must

704
00:32:51,840 --> 00:32:53,760
access to the geographical localization

705
00:32:53,760 --> 00:32:54,640
of the

706
00:32:54,640 --> 00:32:56,960
router then you use the getter function

707
00:32:56,960 --> 00:32:59,120
you have also function to access through

708
00:32:59,120 --> 00:33:01,279
the routing table and underneath utility

709
00:33:01,279 --> 00:33:03,360
function to manipulate the mode memory

710
00:33:03,360 --> 00:33:06,080
or doing simple maps function

711
00:33:06,080 --> 00:33:08,799
so now we have the big mixture of xbgp

712
00:33:08,799 --> 00:33:10,559
and i will show you some new skills that

713
00:33:10,559 --> 00:33:13,440
you can do with ldgp but before you need

714
00:33:13,440 --> 00:33:16,240
to adapt some bdp implementation to make

715
00:33:16,240 --> 00:33:18,559
them xbgp compliant you have a

716
00:33:18,559 --> 00:33:21,039
favoriting and board in our case in the

717
00:33:21,039 --> 00:33:23,679
slide i put an array with all the lines

718
00:33:23,679 --> 00:33:26,000
of code that you need to modify your ad

719
00:33:26,000 --> 00:33:29,600
to make the bgp implementation xbgp

720
00:33:29,600 --> 00:33:30,880
compatible

721
00:33:30,880 --> 00:33:33,039
the first use case is a simple one this

722
00:33:33,039 --> 00:33:35,039
is the monitoring and what we would like

723
00:33:35,039 --> 00:33:37,840
to do is to monitor the length of the

724
00:33:37,840 --> 00:33:40,159
ice path actually it is difficult to

725
00:33:40,159 --> 00:33:42,559
achieve it with traditional interface

726
00:33:42,559 --> 00:33:44,720
but within gpa you have an interface

727
00:33:44,720 --> 00:33:47,039
that is easier why would you like to

728
00:33:47,039 --> 00:33:49,360
monitor the is pass for example you

729
00:33:49,360 --> 00:33:51,840
would like to monitor it to filter out

730
00:33:51,840 --> 00:33:55,039
large aspars or make analysis afterwards

731
00:33:55,039 --> 00:33:57,279
so now i will explain you a complete

732
00:33:57,279 --> 00:34:00,000
example of c code that represents the

733
00:34:00,000 --> 00:34:02,640
xbgp expansion first you need to

734
00:34:02,640 --> 00:34:04,080
retrieve the data from the host

735
00:34:04,080 --> 00:34:06,720
implementation this is known true get

736
00:34:06,720 --> 00:34:08,560
arc function so this is a function of

737
00:34:08,560 --> 00:34:10,879
the api then you will do your

738
00:34:10,879 --> 00:34:13,280
computation so here you will pass the

739
00:34:13,280 --> 00:34:15,520
response attribute and count the number

740
00:34:15,520 --> 00:34:17,839
of autonomous system contained inside

741
00:34:17,839 --> 00:34:20,719
the path and then you will use

742
00:34:20,719 --> 00:34:22,800
another function to actually log the

743
00:34:22,800 --> 00:34:26,320
number of as you computed this extension

744
00:34:26,320 --> 00:34:30,239
code will be added to the import filters

745
00:34:30,239 --> 00:34:32,399
the second use case is related to the

746
00:34:32,399 --> 00:34:35,280
use of bgp inside data center in data

747
00:34:35,280 --> 00:34:37,839
center you use bdp to make your internal

748
00:34:37,839 --> 00:34:40,079
routing all the best practice concerning

749
00:34:40,079 --> 00:34:43,040
the use of bgp in a data center is

750
00:34:43,040 --> 00:34:46,079
stated in lrc7938

751
00:34:46,079 --> 00:34:48,079
inside this document there is a

752
00:34:48,079 --> 00:34:50,879
constraint you don't have any exact path

753
00:34:50,879 --> 00:34:52,879
so for example to go from level two to

754
00:34:52,879 --> 00:34:54,239
level zero

755
00:34:54,239 --> 00:34:56,960
you must go to level one and level zero

756
00:34:56,960 --> 00:34:58,880
but you cannot make something exactly

757
00:34:58,880 --> 00:35:00,640
between level two and level and one for

758
00:35:00,640 --> 00:35:04,079
example and to avoid this zigzag path

759
00:35:04,079 --> 00:35:06,160
you must have the same autonomous system

760
00:35:06,160 --> 00:35:09,520
number for all routers of the same level

761
00:35:09,520 --> 00:35:12,320
over here level 0 all routers have the

762
00:35:12,320 --> 00:35:15,040
as1 number

763
00:35:15,040 --> 00:35:17,599
but these constraints make a debugging

764
00:35:17,599 --> 00:35:20,640
difficult if you would like to check

765
00:35:20,640 --> 00:35:22,480
where the route are source from you

766
00:35:22,480 --> 00:35:25,359
cannot because all the paths have the

767
00:35:25,359 --> 00:35:27,440
same autonomous system for

768
00:35:27,440 --> 00:35:29,760
the same level and so you cannot decide

769
00:35:29,760 --> 00:35:32,240
if the packet goes from the left part of

770
00:35:32,240 --> 00:35:34,960
the data center or the right part

771
00:35:34,960 --> 00:35:37,839
but now with xvgp you can get rid of

772
00:35:37,839 --> 00:35:40,400
this constraint and put a different

773
00:35:40,400 --> 00:35:42,560
autonomous system number for the rotors

774
00:35:42,560 --> 00:35:45,040
on the same level to do so you must

775
00:35:45,040 --> 00:35:48,240
first design your xbgp extension

776
00:35:48,240 --> 00:35:51,040
and pass them a data center topology

777
00:35:51,040 --> 00:35:54,240
configuration so that you can actually

778
00:35:54,240 --> 00:35:56,960
check if there is any exact path to your

779
00:35:56,960 --> 00:35:58,960
data center

780
00:35:58,960 --> 00:36:01,760
this extension will also be put on the

781
00:36:01,760 --> 00:36:03,920
insertion point related to the import

782
00:36:03,920 --> 00:36:06,720
filters the third use case is related to

783
00:36:06,720 --> 00:36:08,079
the road selection

784
00:36:08,079 --> 00:36:10,640
so in this slide we consider a stop

785
00:36:10,640 --> 00:36:12,640
network for the source network connected

786
00:36:12,640 --> 00:36:16,720
to several transit transit 1n102

787
00:36:16,720 --> 00:36:19,280
and to reach the network destination

788
00:36:19,280 --> 00:36:22,480
bgp must advertise a route to the source

789
00:36:22,480 --> 00:36:24,000
the source will directly receive the

790
00:36:24,000 --> 00:36:26,560
green road via transit one and another

791
00:36:26,560 --> 00:36:28,720
one on transit 2.

792
00:36:28,720 --> 00:36:32,079
according to the local 22 policy it will

793
00:36:32,079 --> 00:36:34,400
either announce the blue or the yellow

794
00:36:34,400 --> 00:36:35,359
path

795
00:36:35,359 --> 00:36:37,839
maybe transit 2 choose the path for its

796
00:36:37,839 --> 00:36:40,640
security properties nurses prepare the

797
00:36:40,640 --> 00:36:44,320
path with a longer latencies and so the

798
00:36:44,320 --> 00:36:46,240
ranking of the source and the transit

799
00:36:46,240 --> 00:36:48,720
does not match xbtp can solve the

800
00:36:48,720 --> 00:36:52,480
problem to execute a plugin that will

801
00:36:52,480 --> 00:36:54,960
choose the route on the edge router of

802
00:36:54,960 --> 00:36:58,079
202 according to the source ranking

803
00:36:58,079 --> 00:37:00,640
network and so transit to choose the

804
00:37:00,640 --> 00:37:03,599
root the source preference this mass

805
00:37:03,599 --> 00:37:06,000
election service will be added to the

806
00:37:06,000 --> 00:37:09,760
decision process insertion point

807
00:37:09,760 --> 00:37:12,000
the last use case is above detecting bgp

808
00:37:12,000 --> 00:37:13,119
zombies

809
00:37:13,119 --> 00:37:16,000
if you know a prefix p then your motor

810
00:37:16,000 --> 00:37:17,440
will announce

811
00:37:17,440 --> 00:37:19,760
that it can arrange in the prefix speed

812
00:37:19,760 --> 00:37:22,320
and the order router will do the same by

813
00:37:22,320 --> 00:37:24,720
advertising to the neighbor the the

814
00:37:24,720 --> 00:37:26,800
prefix speed and so all the motors can

815
00:37:26,800 --> 00:37:28,000
reach me

816
00:37:28,000 --> 00:37:30,160
but now consider prepping speed is no

817
00:37:30,160 --> 00:37:32,640
longer reachable so the rotors will send

818
00:37:32,640 --> 00:37:34,800
a result to the neighbor but for

819
00:37:34,800 --> 00:37:38,320
whatever reason due to a software bug or

820
00:37:38,320 --> 00:37:40,560
misconfiguration the router cannot

821
00:37:40,560 --> 00:37:43,280
process the result and so it fails to

822
00:37:43,280 --> 00:37:44,079
send

823
00:37:44,079 --> 00:37:46,480
a missile to the other label the

824
00:37:46,480 --> 00:37:49,119
upstream router will still have the key

825
00:37:49,119 --> 00:37:52,000
prefix in their forwarding table this is

826
00:37:52,000 --> 00:37:54,400
something we don't want because it may

827
00:37:54,400 --> 00:37:56,320
lead to some black owning or traffic and

828
00:37:56,320 --> 00:37:59,440
this is a big misogyny this is a route

829
00:37:59,440 --> 00:38:01,520
that is still in the theme of some

830
00:38:01,520 --> 00:38:04,640
routers but no longer reachable anymore

831
00:38:04,640 --> 00:38:07,599
with it is bgp you can actually

832
00:38:07,599 --> 00:38:10,400
detect those bdp zombie routes

833
00:38:10,400 --> 00:38:12,640
you need to write a plugin that will

834
00:38:12,640 --> 00:38:15,760
analyze the routing table and flag all

835
00:38:15,760 --> 00:38:17,839
the roads that are older than the given

836
00:38:17,839 --> 00:38:19,359
threshold

837
00:38:19,359 --> 00:38:22,960
then for all those prefix it will ask to

838
00:38:22,960 --> 00:38:24,880
the upstream router to confirm if the

839
00:38:24,880 --> 00:38:27,200
route is still valid or not

840
00:38:27,200 --> 00:38:29,200
there are some mechanisms such as

841
00:38:29,200 --> 00:38:31,599
transforming staff that can actually

842
00:38:31,599 --> 00:38:34,400
reload all the entire routine table of

843
00:38:34,400 --> 00:38:35,920
the neighbor but

844
00:38:35,920 --> 00:38:39,760
since mgm is concerning a small fraction

845
00:38:39,760 --> 00:38:40,560
of

846
00:38:40,560 --> 00:38:43,359
prefix according some measurement inside

847
00:38:43,359 --> 00:38:45,280
the internet it is

848
00:38:45,280 --> 00:38:47,599
not really necessary to renew all the

849
00:38:47,599 --> 00:38:50,720
entire routing table so we designed a

850
00:38:50,720 --> 00:38:54,880
prototype that only asked for those uh

851
00:38:54,880 --> 00:38:58,000
means that we detected

852
00:38:59,040 --> 00:39:01,680
this extension code will be added to the

853
00:39:01,680 --> 00:39:03,920
background task instruction board

854
00:39:03,920 --> 00:39:07,760
which acts like a current job so each

855
00:39:07,760 --> 00:39:09,599
unit of time you will

856
00:39:09,599 --> 00:39:12,400
execute this plugin

857
00:39:12,400 --> 00:39:14,400
so now we've seen some use case that we

858
00:39:14,400 --> 00:39:17,040
can do within gdp once the code that is

859
00:39:17,040 --> 00:39:20,000
executed is untrusted and we can ask the

860
00:39:20,000 --> 00:39:22,400
following question could it break

861
00:39:22,400 --> 00:39:24,000
usb

862
00:39:24,000 --> 00:39:25,680
well

863
00:39:25,680 --> 00:39:28,000
we need to have an automatic way to

864
00:39:28,000 --> 00:39:30,480
verify some properties

865
00:39:30,480 --> 00:39:33,520
before injecting it to the routers

866
00:39:33,520 --> 00:39:35,839
with with vdp we

867
00:39:35,839 --> 00:39:38,560
make the following approach first you

868
00:39:38,560 --> 00:39:40,720
start from the extension source code

869
00:39:40,720 --> 00:39:42,560
that will annotate

870
00:39:42,560 --> 00:39:44,400
then it will be passed to the software

871
00:39:44,400 --> 00:39:47,200
verification tools and if the

872
00:39:47,200 --> 00:39:49,520
verification tool says ok

873
00:39:49,520 --> 00:39:51,680
the code can be trusted it will be

874
00:39:51,680 --> 00:39:54,160
compiled to the bytecode and then

875
00:39:54,160 --> 00:39:56,960
injected to the protocol now i will

876
00:39:56,960 --> 00:39:59,280
explain you some properties that we

877
00:39:59,280 --> 00:40:01,520
define that all the plugin most

878
00:40:01,520 --> 00:40:04,000
satisfied before being injected to the

879
00:40:04,000 --> 00:40:06,400
routers the first one is the termination

880
00:40:06,400 --> 00:40:07,599
properties

881
00:40:07,599 --> 00:40:09,760
we do not want that an infinite loop for

882
00:40:09,760 --> 00:40:10,800
example

883
00:40:10,800 --> 00:40:12,319
breaks the protocol

884
00:40:12,319 --> 00:40:14,480
another properties is related to the

885
00:40:14,480 --> 00:40:16,960
memory isolation of the plugin

886
00:40:16,960 --> 00:40:19,839
all plugins must not modify memory that

887
00:40:19,839 --> 00:40:22,400
are not authorized to modify

888
00:40:22,400 --> 00:40:25,359
we also restrict some api function to

889
00:40:25,359 --> 00:40:27,280
some extension code for example for

890
00:40:27,280 --> 00:40:29,839
double detailing they do not have the

891
00:40:29,839 --> 00:40:31,040
right to

892
00:40:31,040 --> 00:40:34,560
modify the protocol finally we use cr a

893
00:40:34,560 --> 00:40:37,599
lot of verification tools to

894
00:40:37,599 --> 00:40:40,160
verify properties related to the bdp

895
00:40:40,160 --> 00:40:42,880
syntax as an example we will verify the

896
00:40:42,880 --> 00:40:45,599
syntax of the geographic coordinate

897
00:40:45,599 --> 00:40:48,640
extension so this geographic coordinate

898
00:40:48,640 --> 00:40:52,000
extension is defined on a graph and

899
00:40:52,000 --> 00:40:54,640
it must follow the format specified on

900
00:40:54,640 --> 00:40:57,040
this graph and those properties i've

901
00:40:57,040 --> 00:40:59,520
defined on the on the slide are those

902
00:40:59,520 --> 00:41:00,720
that must

903
00:41:00,720 --> 00:41:01,520
be

904
00:41:01,520 --> 00:41:04,000
followed by the plugin

905
00:41:04,000 --> 00:41:06,400
we write all the properties and we

906
00:41:06,400 --> 00:41:09,440
annotate the plugin and then this

907
00:41:09,440 --> 00:41:10,960
annotated plugin will be passed through

908
00:41:10,960 --> 00:41:13,680
the application to server that will say

909
00:41:13,680 --> 00:41:15,119
yes or no

910
00:41:15,119 --> 00:41:17,839
and if it say yes then we are the

911
00:41:17,839 --> 00:41:19,760
guarantee that all execution of the

912
00:41:19,760 --> 00:41:23,119
plugin will satisfy the constraint

913
00:41:23,119 --> 00:41:26,160
to conclude within pdp you can

914
00:41:26,160 --> 00:41:28,400
make hptp implementation totally

915
00:41:28,400 --> 00:41:30,800
expensive if you want more details you

916
00:41:30,800 --> 00:41:33,359
can read the paper related to this

917
00:41:33,359 --> 00:41:34,480
presentation

918
00:41:34,480 --> 00:41:38,000
we have also a website that collects all

919
00:41:38,000 --> 00:41:40,560
the source code of xbgp

920
00:41:40,560 --> 00:41:43,280
we designed a methodology for bgp but

921
00:41:43,280 --> 00:41:46,319
the methodology could be also applied to

922
00:41:46,319 --> 00:41:50,400
other routing protocol thank you

923
00:41:55,920 --> 00:41:56,960
okay

924
00:41:56,960 --> 00:41:58,800
thank you

925
00:41:58,800 --> 00:42:00,640
really interesting talk

926
00:42:00,640 --> 00:42:04,720
thomas uh if you're there uh you can

927
00:42:04,720 --> 00:42:07,920
open up your video um

928
00:42:07,920 --> 00:42:10,720
some questions

929
00:42:10,960 --> 00:42:12,560
hi

930
00:42:12,560 --> 00:42:15,760
okay can can you all hear us yeah yes i

931
00:42:15,760 --> 00:42:17,119
can hear

932
00:42:17,119 --> 00:42:19,599
okay um well yeah as i say really

933
00:42:19,599 --> 00:42:22,800
interesting talk um do we have any

934
00:42:22,800 --> 00:42:25,119
questions for thomas

935
00:42:25,119 --> 00:42:27,200
uh i see elliot had something in the

936
00:42:27,200 --> 00:42:31,280
chat uh elliot jones maybe uh

937
00:42:31,280 --> 00:42:32,960
go ahead

938
00:42:32,960 --> 00:42:35,520
yeah thanks very much for um

939
00:42:35,520 --> 00:42:39,359
your talk it was very interesting um

940
00:42:39,359 --> 00:42:42,160
two points the first is a question

941
00:42:42,160 --> 00:42:43,359
um

942
00:42:43,359 --> 00:42:45,920
in terms of that last slide

943
00:42:45,920 --> 00:42:48,319
it was it was your desire for this

944
00:42:48,319 --> 00:42:50,160
mechanism to always have the transitive

945
00:42:50,160 --> 00:42:51,839
bit set to zero

946
00:42:51,839 --> 00:42:52,720
um

947
00:42:52,720 --> 00:42:54,720
which i think does allow for a certain

948
00:42:54,720 --> 00:42:59,480
amount of prototyping for instance right

949
00:42:59,599 --> 00:43:02,720
uh yeah yeah yes this is uh actually

950
00:43:02,720 --> 00:43:05,119
xbtp is designed for quick prototype

951
00:43:05,119 --> 00:43:08,160
prototyping uh we just added an

952
00:43:08,160 --> 00:43:10,319
interface to allow

953
00:43:10,319 --> 00:43:13,200
some network operators to implement

954
00:43:13,200 --> 00:43:15,359
quickly this functionality and then you

955
00:43:15,359 --> 00:43:18,480
will uh actually test in another

956
00:43:18,480 --> 00:43:21,520
network and finally it will be uh maybe

957
00:43:21,520 --> 00:43:23,920
uh if it is it works well in maybe a

958
00:43:23,920 --> 00:43:27,119
release on the prediction routing

959
00:43:27,119 --> 00:43:30,160
network but uh actually uh if you would

960
00:43:30,160 --> 00:43:32,240
like to have performance you have to uh

961
00:43:32,240 --> 00:43:33,440
to write it

962
00:43:33,440 --> 00:43:35,359
directly inside the implementation level

963
00:43:35,359 --> 00:43:36,400
code

964
00:43:36,400 --> 00:43:38,000
so yeah

965
00:43:38,000 --> 00:43:39,200
maybe

966
00:43:39,200 --> 00:43:41,200
when you introduce new code you will

967
00:43:41,200 --> 00:43:43,280
actually

968
00:43:43,280 --> 00:43:45,599
break some some rules on the bgp

969
00:43:45,599 --> 00:43:48,800
protocol but we designed some mechanism

970
00:43:48,800 --> 00:43:51,760
to guarantee the execution of the plugin

971
00:43:51,760 --> 00:43:55,680
locally but the execution in the global

972
00:43:55,680 --> 00:43:58,800
network is not something we've done and

973
00:43:58,800 --> 00:44:01,520
this is something that you can uh

974
00:44:01,520 --> 00:44:02,720
you you

975
00:44:02,720 --> 00:44:04,800
you test

976
00:44:04,800 --> 00:44:06,720
on yourself so you

977
00:44:06,720 --> 00:44:08,480
you make some tests and if you are

978
00:44:08,480 --> 00:44:10,240
confident about that you will push on

979
00:44:10,240 --> 00:44:13,680
the network so there is no really um

980
00:44:13,680 --> 00:44:15,200
way to

981
00:44:15,200 --> 00:44:16,480
test the global

982
00:44:16,480 --> 00:44:18,319
uh

983
00:44:18,319 --> 00:44:19,760
safeties of the

984
00:44:19,760 --> 00:44:22,240
the implementation you you put on the on

985
00:44:22,240 --> 00:44:24,160
the router so i mean this is something

986
00:44:24,160 --> 00:44:26,960
we can actually do afterwards but

987
00:44:26,960 --> 00:44:29,119
something i think it is something quite

988
00:44:29,119 --> 00:44:31,760
complicated to uh to verify and satisfy

989
00:44:31,760 --> 00:44:33,839
the security property of the global

990
00:44:33,839 --> 00:44:34,880
network

991
00:44:34,880 --> 00:44:37,680
but with me we have also some just no

992
00:44:37,680 --> 00:44:40,319
care verification

993
00:44:40,319 --> 00:44:42,800
yeah thank you um the reason i ask the

994
00:44:42,800 --> 00:44:45,040
question obviously is um you know one of

995
00:44:45,040 --> 00:44:46,319
the reasons it takes three and a half

996
00:44:46,319 --> 00:44:47,839
years to go through the standardization

997
00:44:47,839 --> 00:44:48,880
process

998
00:44:48,880 --> 00:44:52,400
is uh because i think uh people are cons

999
00:44:52,400 --> 00:44:54,880
routing is a is is a difficult business

1000
00:44:54,880 --> 00:44:56,880
to begin with and

1001
00:44:56,880 --> 00:44:59,520
we we do see cases where routes

1002
00:44:59,520 --> 00:45:02,400
disappear uh for sometimes inexplicable

1003
00:45:02,400 --> 00:45:06,400
reasons um even with the current mature

1004
00:45:06,400 --> 00:45:09,440
mechanisms and so uh the there's a

1005
00:45:09,440 --> 00:45:11,520
certain amount of proof time and so one

1006
00:45:11,520 --> 00:45:13,040
question i think

1007
00:45:13,040 --> 00:45:15,680
i think one research question to ask is

1008
00:45:15,680 --> 00:45:17,680
just how flexible

1009
00:45:17,680 --> 00:45:20,720
should a routing paradigm be and what

1010
00:45:20,720 --> 00:45:22,400
what are the guard rails that make it

1011
00:45:22,400 --> 00:45:24,960
safe to experiment

1012
00:45:24,960 --> 00:45:27,040
hi this is an interesting question

1013
00:45:27,040 --> 00:45:30,240
because when xmgp you can do what you

1014
00:45:30,240 --> 00:45:33,839
pretty much we can do um well the first

1015
00:45:33,839 --> 00:45:37,359
thing is that uh you have to uh choose

1016
00:45:37,359 --> 00:45:40,640
uh the while right tool to uh actually

1017
00:45:40,640 --> 00:45:41,760
guarantee

1018
00:45:41,760 --> 00:45:43,680
uh the security property of the

1019
00:45:43,680 --> 00:45:47,119
underwater uh maybe well

1020
00:45:47,119 --> 00:45:50,079
now we we write all the plugin in c code

1021
00:45:50,079 --> 00:45:52,400
this is not something which is uh really

1022
00:45:52,400 --> 00:45:54,560
secure uh but

1023
00:45:54,560 --> 00:45:55,680
you know

1024
00:45:55,680 --> 00:45:56,800
in another

1025
00:45:56,800 --> 00:45:59,680
we can also use on other tools some some

1026
00:45:59,680 --> 00:46:02,560
maybe some language that are safer like

1027
00:46:02,560 --> 00:46:03,440
rust

1028
00:46:03,440 --> 00:46:05,040
and uh

1029
00:46:05,040 --> 00:46:07,680
those two will will be um

1030
00:46:07,680 --> 00:46:09,200
actually um

1031
00:46:09,200 --> 00:46:11,839
provide a better security but yeah you

1032
00:46:11,839 --> 00:46:15,839
know we don't have any yes maybe

1033
00:46:16,319 --> 00:46:17,440
obviously

1034
00:46:17,440 --> 00:46:19,680
there is a balance between us

1035
00:46:19,680 --> 00:46:21,280
flexibility and

1036
00:46:21,280 --> 00:46:22,640
and security

1037
00:46:22,640 --> 00:46:25,040
and if you add flexibility inside the

1038
00:46:25,040 --> 00:46:27,280
routing protocol then

1039
00:46:27,280 --> 00:46:30,240
the security part will be less uh less

1040
00:46:30,240 --> 00:46:32,079
mean in the

1041
00:46:32,079 --> 00:46:33,440
part of the

1042
00:46:33,440 --> 00:46:35,599
the

1043
00:46:36,119 --> 00:46:37,770
the reasoning of the

1044
00:46:37,770 --> 00:46:40,400
[Music]

1045
00:46:40,400 --> 00:46:42,960
thing yeah

1046
00:46:42,960 --> 00:46:46,160
yeah thank you thank you um so uh a sort

1047
00:46:46,160 --> 00:46:49,200
of i had a follow-on to that to some

1048
00:46:49,200 --> 00:46:51,119
extent uh i mean if i understand write

1049
00:46:51,119 --> 00:46:52,720
this this adds a bunch of hooks

1050
00:46:52,720 --> 00:46:54,880
throughout the the bgp implementation

1051
00:46:54,880 --> 00:46:56,560
where you can insert

1052
00:46:56,560 --> 00:46:59,119
different sets of functionality

1053
00:46:59,119 --> 00:47:03,359
um how much of the the core protocol has

1054
00:47:03,359 --> 00:47:05,040
to be implemented in the core and how

1055
00:47:05,040 --> 00:47:07,280
much can be implemented in in these

1056
00:47:07,280 --> 00:47:09,839
programmable

1057
00:47:09,839 --> 00:47:12,560
how much of the core bg bgp logic is

1058
00:47:12,560 --> 00:47:15,119
hard-coded and how much is extensible oh

1059
00:47:15,119 --> 00:47:17,119
yeah

1060
00:47:17,119 --> 00:47:18,960
actually um

1061
00:47:18,960 --> 00:47:21,599
what you have to do to put xbgp inside

1062
00:47:21,599 --> 00:47:24,319
an implementation is to first follow the

1063
00:47:24,319 --> 00:47:27,760
original llc's of 4271

1064
00:47:27,760 --> 00:47:31,440
and uh we also need uh all the extension

1065
00:47:31,440 --> 00:47:33,440
above multiprotocol

1066
00:47:33,440 --> 00:47:36,480
uh for example in the in the paper we

1067
00:47:36,480 --> 00:47:39,040
reproduce the root reflector

1068
00:47:39,040 --> 00:47:41,680
functionalities

1069
00:47:41,680 --> 00:47:42,640
and

1070
00:47:42,640 --> 00:47:44,720
this is one of some

1071
00:47:44,720 --> 00:47:47,760
some some new skills that prove that

1072
00:47:47,760 --> 00:47:50,400
we can actually implement a lot of

1073
00:47:50,400 --> 00:47:52,640
complexity

1074
00:47:52,640 --> 00:47:53,599
but

1075
00:47:53,599 --> 00:47:57,200
the strong basis of hbgp relies on the

1076
00:47:57,200 --> 00:47:59,839
the original draft and multi-protocol

1077
00:47:59,839 --> 00:48:02,160
extension the other thing you can you

1078
00:48:02,160 --> 00:48:03,280
can do

1079
00:48:03,280 --> 00:48:05,599
you can actually put your code inside

1080
00:48:05,599 --> 00:48:07,760
the extension code and then put it in

1081
00:48:07,760 --> 00:48:09,359
the the

1082
00:48:09,359 --> 00:48:11,119
implementation which is six php

1083
00:48:11,119 --> 00:48:14,000
compatible but if for example if you

1084
00:48:14,000 --> 00:48:15,040
want to

1085
00:48:15,040 --> 00:48:16,319
um

1086
00:48:16,319 --> 00:48:18,400
to modify some data structure that you

1087
00:48:18,400 --> 00:48:20,160
just argued inside the implementation

1088
00:48:20,160 --> 00:48:23,599
you cannot for example uh if you uh take

1089
00:48:23,599 --> 00:48:26,240
the the functionality that enlarge the

1090
00:48:26,240 --> 00:48:28,000
the buffer of uh

1091
00:48:28,000 --> 00:48:29,760
of bgp message or

1092
00:48:29,760 --> 00:48:33,040
4k to a 74

1093
00:48:33,040 --> 00:48:35,920
kilobytes of memory to one message

1094
00:48:35,920 --> 00:48:38,880
that's this is one example of a feature

1095
00:48:38,880 --> 00:48:41,520
that you cannot uh do within ubdp so

1096
00:48:41,520 --> 00:48:44,079
everything related to uh to the memory

1097
00:48:44,079 --> 00:48:46,319
or internet that's data structure which

1098
00:48:46,319 --> 00:48:49,040
is when you put it inside

1099
00:48:49,040 --> 00:48:52,160
the the implementation

1100
00:48:54,000 --> 00:48:55,200
oh okay

1101
00:48:55,200 --> 00:48:57,200
that makes sense that makes sense uh

1102
00:48:57,200 --> 00:48:59,280
does anyone else have questions

1103
00:48:59,280 --> 00:49:01,119
if you put yourself in in the queue if

1104
00:49:01,119 --> 00:49:03,520
you have uh elliot are you still in the

1105
00:49:03,520 --> 00:49:04,640
queue or

1106
00:49:04,640 --> 00:49:07,839
just left over from before

1107
00:49:14,480 --> 00:49:17,119
okay so i just had uh what one last

1108
00:49:17,119 --> 00:49:18,400
thing uh

1109
00:49:18,400 --> 00:49:20,640
i mean you know obviously the focus of

1110
00:49:20,640 --> 00:49:23,040
the the thing of the

1111
00:49:23,040 --> 00:49:24,880
mechanism is extensibility of the

1112
00:49:24,880 --> 00:49:27,760
protocols uh and you know you you make

1113
00:49:27,760 --> 00:49:29,359
the point of when you can't wait for the

1114
00:49:29,359 --> 00:49:32,079
ietf and i think it's well known that

1115
00:49:32,079 --> 00:49:34,720
that the itf process takes time

1116
00:49:34,720 --> 00:49:37,680
uh and you know obviously uh elliott

1117
00:49:37,680 --> 00:49:39,920
mentioned some of the the reasons for

1118
00:49:39,920 --> 00:49:43,440
that uh a minute ago um

1119
00:49:43,440 --> 00:49:46,559
and um assuming we can't make the itf go

1120
00:49:46,559 --> 00:49:48,319
any faster um

1121
00:49:48,319 --> 00:49:49,760
other things we

1122
00:49:49,760 --> 00:49:51,760
you think we should be

1123
00:49:51,760 --> 00:49:53,520
doing differently in the way we

1124
00:49:53,520 --> 00:49:55,680
structure the protocols that will help

1125
00:49:55,680 --> 00:49:57,680
this sort of experimentation once the

1126
00:49:57,680 --> 00:50:00,559
rfc has been published uh other are

1127
00:50:00,559 --> 00:50:02,720
there any general lessons that that can

1128
00:50:02,720 --> 00:50:04,240
be learned from this or is this very

1129
00:50:04,240 --> 00:50:06,880
specific to the details of how bgp was

1130
00:50:06,880 --> 00:50:09,440
implemented

1131
00:50:11,520 --> 00:50:13,839
actually

1132
00:50:17,119 --> 00:50:20,160
when when we look at uh

1133
00:50:20,160 --> 00:50:23,119
xbgb the the protocol was pretty well

1134
00:50:23,119 --> 00:50:27,040
established so if the what we we try to

1135
00:50:27,040 --> 00:50:29,520
do with single gp is to uh

1136
00:50:29,520 --> 00:50:30,640
understand

1137
00:50:30,640 --> 00:50:32,720
what are the properties of the uh the

1138
00:50:32,720 --> 00:50:36,559
protocol and then uh we um establish a

1139
00:50:36,559 --> 00:50:40,640
set of properties to actually um

1140
00:50:40,640 --> 00:50:43,680
actually model a general um

1141
00:50:43,680 --> 00:50:45,520
actually architecture of

1142
00:50:45,520 --> 00:50:47,680
of the routing protocol and then

1143
00:50:47,680 --> 00:50:50,079
when you have the general model of this

1144
00:50:50,079 --> 00:50:52,240
routing protocol then you will look

1145
00:50:52,240 --> 00:50:54,960
inside your implementation if it

1146
00:50:54,960 --> 00:50:57,200
actually implements this

1147
00:50:57,200 --> 00:50:59,359
kind of general model and if you

1148
00:50:59,359 --> 00:51:01,440
implement this general model then you

1149
00:51:01,440 --> 00:51:05,280
will be able to actually put xbgp inside

1150
00:51:05,280 --> 00:51:07,520
the protocol but yeah if the the

1151
00:51:07,520 --> 00:51:10,319
implementation is only exotic i would

1152
00:51:10,319 --> 00:51:12,960
say then you know gp will be um

1153
00:51:12,960 --> 00:51:13,760
more

1154
00:51:13,760 --> 00:51:15,920
um it might be difficult to integrate

1155
00:51:15,920 --> 00:51:17,200
inside

1156
00:51:17,200 --> 00:51:20,078
the implementation

1157
00:51:21,200 --> 00:51:23,760
yeah that that that that makes sense so

1158
00:51:23,760 --> 00:51:24,800
i guess the

1159
00:51:24,800 --> 00:51:26,880
the general conclusion is the modularity

1160
00:51:26,880 --> 00:51:28,880
in the in the the way the specifications

1161
00:51:28,880 --> 00:51:30,480
are written might make this process

1162
00:51:30,480 --> 00:51:32,880
easier for developing modular apis and

1163
00:51:32,880 --> 00:51:35,680
extensions yeah okay so that's maybe

1164
00:51:35,680 --> 00:51:37,680
some something for the the standard

1165
00:51:37,680 --> 00:51:40,160
groups to think about

1166
00:51:40,160 --> 00:51:42,559
all right uh and this is where over time

1167
00:51:42,559 --> 00:51:44,720
and i i don't see anyone else in in the

1168
00:51:44,720 --> 00:51:47,280
queue so um thank you very much uh i

1169
00:51:47,280 --> 00:51:49,040
think that's really interesting some

1170
00:51:49,040 --> 00:51:51,920
really nice answers to the questions um

1171
00:51:51,920 --> 00:51:54,000
if there are any any more questions to

1172
00:51:54,000 --> 00:51:55,680
tomorrow please please put them in the

1173
00:51:55,680 --> 00:51:57,920
chat uh and um

1174
00:51:57,920 --> 00:52:00,000
maybe he'll be able to to be around in

1175
00:52:00,000 --> 00:52:02,000
the break afterwards uh

1176
00:52:02,000 --> 00:52:03,280
if people want to catch up with him in

1177
00:52:03,280 --> 00:52:05,680
in the cover space perhaps

1178
00:52:05,680 --> 00:52:08,160
or of course drop him an email

1179
00:52:08,160 --> 00:52:10,960
all right so um thank you thomas um

1180
00:52:10,960 --> 00:52:14,079
we'll move on to the the next talk uh of

1181
00:52:14,079 --> 00:52:14,960
the

1182
00:52:14,960 --> 00:52:16,800
the session um

1183
00:52:16,800 --> 00:52:20,559
which is by uh axa kashaf

1184
00:52:20,559 --> 00:52:23,839
uh axa is a phd student at carnegie

1185
00:52:23,839 --> 00:52:27,200
mellon university uh she's co-advised by

1186
00:52:27,200 --> 00:52:29,680
eva sekker and uh

1187
00:52:29,680 --> 00:52:32,880
you you've reached a gowell and i

1188
00:52:32,880 --> 00:52:34,800
apologize i must have mangled those

1189
00:52:34,800 --> 00:52:35,839
names

1190
00:52:35,839 --> 00:52:39,359
um access focuses on um network security

1191
00:52:39,359 --> 00:52:41,520
uh particularly uh distributed denial of

1192
00:52:41,520 --> 00:52:43,599
service attacks uh and currently she's

1193
00:52:43,599 --> 00:52:45,599
working on building reconnaissance

1194
00:52:45,599 --> 00:52:47,280
techniques to to profile the

1195
00:52:47,280 --> 00:52:50,079
capabilities of ddos defense systems

1196
00:52:50,079 --> 00:52:52,240
uh looking at uh understanding and

1197
00:52:52,240 --> 00:52:54,160
improving the resilience of the internet

1198
00:52:54,160 --> 00:52:56,480
against ddos attacks

1199
00:52:56,480 --> 00:52:59,040
uh the award paper today uh is uh

1200
00:52:59,040 --> 00:53:00,800
analyzing third party service

1201
00:53:00,800 --> 00:53:05,200
dependencies in modern web services um

1202
00:53:05,200 --> 00:53:06,880
what have we learned from the the mirai

1203
00:53:06,880 --> 00:53:08,880
din incident and it was originally

1204
00:53:08,880 --> 00:53:10,720
presented at the acm internet

1205
00:53:10,720 --> 00:53:12,839
measurement conference in

1206
00:53:12,839 --> 00:53:15,280
2020 so if we can play the next video

1207
00:53:15,280 --> 00:53:17,599
please

1208
00:53:25,520 --> 00:53:28,240
hi this is alexa i'm a phd student at

1209
00:53:28,240 --> 00:53:30,640
cmu and i'm going to present my work on

1210
00:53:30,640 --> 00:53:32,800
analyzing third-party dependencies in

1211
00:53:32,800 --> 00:53:34,800
modern web services

1212
00:53:34,800 --> 00:53:36,559
this is a collaborative work with my

1213
00:53:36,559 --> 00:53:40,559
advisors varseker and yuraj agarwal

1214
00:53:40,559 --> 00:53:42,880
the study is motivated by a ddos attack

1215
00:53:42,880 --> 00:53:45,599
that happened in 2016 on a dns provider

1216
00:53:45,599 --> 00:53:47,520
named time

1217
00:53:47,520 --> 00:53:49,760
there are a lot of lessons to be learned

1218
00:53:49,760 --> 00:53:52,079
from this attack particularly its root

1219
00:53:52,079 --> 00:53:55,200
cause and as i show in this talk

1220
00:53:55,200 --> 00:53:57,280
we can expect more dine-like attacks in

1221
00:53:57,280 --> 00:53:59,760
the future

1222
00:54:00,480 --> 00:54:02,880
during this attack in range 16 a lot of

1223
00:54:02,880 --> 00:54:06,079
popular websites such as github

1224
00:54:06,079 --> 00:54:08,640
spotify and twitter were inaccessible to

1225
00:54:08,640 --> 00:54:11,440
users for many hours

1226
00:54:11,440 --> 00:54:13,839
here is an outage map of the attack in

1227
00:54:13,839 --> 00:54:17,359
total 178 000 domains went offline and

1228
00:54:17,359 --> 00:54:21,680
tens of millions of users were affected

1229
00:54:21,680 --> 00:54:24,400
the list of websites that went down goes

1230
00:54:24,400 --> 00:54:26,720
on it includes almost all the popular

1231
00:54:26,720 --> 00:54:28,960
services we know

1232
00:54:28,960 --> 00:54:31,200
so how were the attackers able to bring

1233
00:54:31,200 --> 00:54:34,000
all of these down

1234
00:54:34,480 --> 00:54:36,480
this was possible because all these

1235
00:54:36,480 --> 00:54:39,280
websites such as netflix exclusively

1236
00:54:39,280 --> 00:54:40,880
relied on dyne

1237
00:54:40,880 --> 00:54:43,200
third-party dns provider

1238
00:54:43,200 --> 00:54:45,680
that acted as their authoritative name

1239
00:54:45,680 --> 00:54:47,040
server

1240
00:54:47,040 --> 00:54:48,480
as a result

1241
00:54:48,480 --> 00:54:50,400
when the authoritative name server was

1242
00:54:50,400 --> 00:54:53,359
down a lot of websites were inaccessible

1243
00:54:53,359 --> 00:54:56,640
to millions of users

1244
00:55:00,079 --> 00:55:02,079
attacks like these raise many questions

1245
00:55:02,079 --> 00:55:04,640
about the resilience of the internet how

1246
00:55:04,640 --> 00:55:07,280
easy is it to bring down the internet

1247
00:55:07,280 --> 00:55:09,760
particularly we need to understand how

1248
00:55:09,760 --> 00:55:11,359
prevalent these kind of third-party

1249
00:55:11,359 --> 00:55:13,280
dependencies are

1250
00:55:13,280 --> 00:55:15,599
for example how many other websites are

1251
00:55:15,599 --> 00:55:18,880
at risk of client-like attacks

1252
00:55:18,880 --> 00:55:20,799
are there other hidden dependencies that

1253
00:55:20,799 --> 00:55:22,880
we also need to know about

1254
00:55:22,880 --> 00:55:24,160
there might be inter-service

1255
00:55:24,160 --> 00:55:26,720
dependencies which indirectly affect the

1256
00:55:26,720 --> 00:55:28,880
website

1257
00:55:28,880 --> 00:55:30,480
and finally

1258
00:55:30,480 --> 00:55:32,400
since stein attack had such a huge

1259
00:55:32,400 --> 00:55:34,079
impact it is natural to think that

1260
00:55:34,079 --> 00:55:36,799
websites would adopt as a result

1261
00:55:36,799 --> 00:55:39,119
how has the world changed in using third

1262
00:55:39,119 --> 00:55:41,119
party services as a consequence of

1263
00:55:41,119 --> 00:55:43,119
denying attack

1264
00:55:43,119 --> 00:55:45,760
for example did websites stop using dyne

1265
00:55:45,760 --> 00:55:47,359
or did they start using multiple

1266
00:55:47,359 --> 00:55:49,839
providers

1267
00:55:49,920 --> 00:55:52,319
to answer these questions we analyze top

1268
00:55:52,319 --> 00:55:54,640
100 000 websites

1269
00:55:54,640 --> 00:55:56,240
alexa websites

1270
00:55:56,240 --> 00:55:58,480
alexa is an external service that ranks

1271
00:55:58,480 --> 00:56:00,720
websites by popularity

1272
00:56:00,720 --> 00:56:02,559
alexa rank is calculated from a

1273
00:56:02,559 --> 00:56:04,559
combination of daily visitors and page

1274
00:56:04,559 --> 00:56:07,760
views on a website

1275
00:56:07,839 --> 00:56:10,240
to see how the world changed in response

1276
00:56:10,240 --> 00:56:11,760
to the diner tag we look at the

1277
00:56:11,760 --> 00:56:14,079
dependencies of top 100 000 websites in

1278
00:56:14,079 --> 00:56:15,520
2016

1279
00:56:15,520 --> 00:56:18,640
and 2020

1280
00:56:19,599 --> 00:56:21,440
in this talk i'll first describe our

1281
00:56:21,440 --> 00:56:23,359
measurement methodology

1282
00:56:23,359 --> 00:56:25,599
to measure the third-party dependencies

1283
00:56:25,599 --> 00:56:26,880
of websites

1284
00:56:26,880 --> 00:56:29,599
and then explain our main findings

1285
00:56:29,599 --> 00:56:32,400
then after the findings i will also

1286
00:56:32,400 --> 00:56:34,319
present some recommendations in light of

1287
00:56:34,319 --> 00:56:36,240
our findings and finally some

1288
00:56:36,240 --> 00:56:39,119
limitations of our work

1289
00:56:39,119 --> 00:56:40,319
to start with the measurement

1290
00:56:40,319 --> 00:56:42,720
methodology

1291
00:56:42,720 --> 00:56:44,880
we first need to identify the services

1292
00:56:44,880 --> 00:56:47,040
which are crucial for a user's access to

1293
00:56:47,040 --> 00:56:48,960
the website

1294
00:56:48,960 --> 00:56:51,200
to do this we look at the lifecycle of a

1295
00:56:51,200 --> 00:56:52,880
web request

1296
00:56:52,880 --> 00:56:55,440
when a user makes a request to a website

1297
00:56:55,440 --> 00:56:58,079
it first goes to the authoritative dns

1298
00:56:58,079 --> 00:57:00,480
server which provides the ip resolution

1299
00:57:00,480 --> 00:57:03,200
of the website

1300
00:57:03,200 --> 00:57:05,200
after the ip resolution of the website

1301
00:57:05,200 --> 00:57:07,760
user starts a tcp handshake followed by

1302
00:57:07,760 --> 00:57:10,160
an ssl handshake if the website supports

1303
00:57:10,160 --> 00:57:11,680
https

1304
00:57:11,680 --> 00:57:13,920
if yes then the website provides a

1305
00:57:13,920 --> 00:57:16,319
certificate which is verified for

1306
00:57:16,319 --> 00:57:19,359
revocation by the user by contacting the

1307
00:57:19,359 --> 00:57:22,319
ocsp server or crl distribution points

1308
00:57:22,319 --> 00:57:26,160
set up by the certifying authority

1309
00:57:26,160 --> 00:57:27,200
finally

1310
00:57:27,200 --> 00:57:29,119
if the certificate is valid the user

1311
00:57:29,119 --> 00:57:30,799
requests the content of the of the

1312
00:57:30,799 --> 00:57:32,799
website page

1313
00:57:32,799 --> 00:57:35,599
if the website is using a cdn then cdn

1314
00:57:35,599 --> 00:57:37,520
will serve this content

1315
00:57:37,520 --> 00:57:40,000
based on this we identify three services

1316
00:57:40,000 --> 00:57:42,319
the first one is dns second one is

1317
00:57:42,319 --> 00:57:44,240
certificate validation by

1318
00:57:44,240 --> 00:57:46,559
certified authority and the third one is

1319
00:57:46,559 --> 00:57:47,680
cdn

1320
00:57:47,680 --> 00:57:48,720
note that

1321
00:57:48,720 --> 00:57:51,119
these by no means are the only services

1322
00:57:51,119 --> 00:57:53,599
that a web request encounters

1323
00:57:53,599 --> 00:57:55,440
but we just identify these three

1324
00:57:55,440 --> 00:57:57,359
services and define the scope of our

1325
00:57:57,359 --> 00:57:59,598
work

1326
00:58:00,160 --> 00:58:02,079
given these services and websites we

1327
00:58:02,079 --> 00:58:04,400
need to identify what exactly we want to

1328
00:58:04,400 --> 00:58:06,000
measure

1329
00:58:06,000 --> 00:58:07,119
so we

1330
00:58:07,119 --> 00:58:08,559
we are interested in third-party

1331
00:58:08,559 --> 00:58:10,960
dependency of a website for example here

1332
00:58:10,960 --> 00:58:13,040
the website tech radar uses another

1333
00:58:13,040 --> 00:58:15,200
entity let's encrypt as its certificate

1334
00:58:15,200 --> 00:58:17,359
authority

1335
00:58:17,359 --> 00:58:18,400
next

1336
00:58:18,400 --> 00:58:20,000
there might be indirect dependencies

1337
00:58:20,000 --> 00:58:22,559
between websites and service providers

1338
00:58:22,559 --> 00:58:24,880
for example here let's encrypt uses

1339
00:58:24,880 --> 00:58:27,119
cloudflare as its authoritative name

1340
00:58:27,119 --> 00:58:29,280
server and hence techradar has an

1341
00:58:29,280 --> 00:58:32,319
indirect dependency on cloudflare

1342
00:58:32,319 --> 00:58:34,160
we are also interested in critical

1343
00:58:34,160 --> 00:58:36,640
dependencies which exist if a service

1344
00:58:36,640 --> 00:58:40,079
provider is integral for a given service

1345
00:58:40,079 --> 00:58:42,000
for example here

1346
00:58:42,000 --> 00:58:44,880
if cloudflare is down ocsp servers of

1347
00:58:44,880 --> 00:58:47,440
let's encrypt will not be accessible

1348
00:58:47,440 --> 00:58:49,440
hence let's encrypt has a critical

1349
00:58:49,440 --> 00:58:52,640
dependency on cloudflare

1350
00:58:52,640 --> 00:58:54,960
in case of dns in cdn we compute

1351
00:58:54,960 --> 00:58:56,960
critical dependency by measuring if the

1352
00:58:56,960 --> 00:59:00,720
website is redundantly provisioned

1353
00:59:00,720 --> 00:59:02,640
which means that the website is using

1354
00:59:02,640 --> 00:59:06,000
multiple dns or cdn providers

1355
00:59:06,000 --> 00:59:07,839
and in case of certificate authorities

1356
00:59:07,839 --> 00:59:09,520
we compute it by measuring if the

1357
00:59:09,520 --> 00:59:13,920
website has enabled ocsp stapling

1358
00:59:14,480 --> 00:59:16,720
here techradar does not support ocsp

1359
00:59:16,720 --> 00:59:18,880
stapling and hence techradar has a

1360
00:59:18,880 --> 00:59:21,119
critical dependency on let's encrypt as

1361
00:59:21,119 --> 00:59:23,760
well as cloudflare

1362
00:59:23,760 --> 00:59:26,400
if ocsp step link is enabled the user

1363
00:59:26,400 --> 00:59:28,559
doesn't have to contact the ocsp server

1364
00:59:28,559 --> 00:59:30,960
for certificate validation so let's

1365
00:59:30,960 --> 00:59:34,319
encrypt will not be contacted here

1366
00:59:34,319 --> 00:59:36,480
but if

1367
00:59:36,480 --> 00:59:39,200
ocsp stapling is not is not enabled then

1368
00:59:39,200 --> 00:59:41,040
techradar will have to users of

1369
00:59:41,040 --> 00:59:43,440
techradar will have to contact the let's

1370
00:59:43,440 --> 00:59:45,359
encrypt ocsc servers to validate the

1371
00:59:45,359 --> 00:59:47,839
certificate

1372
00:59:48,319 --> 00:59:50,559
now given this we first describe our

1373
00:59:50,559 --> 00:59:54,000
measurement methodology for dns

1374
00:59:54,000 --> 00:59:56,319
what we essentially want is to find the

1375
00:59:56,319 --> 00:59:58,079
authoritative name server of each

1376
00:59:58,079 --> 01:00:00,160
website this can easily be done by

1377
01:00:00,160 --> 01:00:02,240
looking at the name servers resource

1378
01:00:02,240 --> 01:00:04,559
record of a website

1379
01:00:04,559 --> 01:00:07,119
then we want to identify if this name

1380
01:00:07,119 --> 01:00:09,920
service a server is private or a third

1381
01:00:09,920 --> 01:00:11,839
party

1382
01:00:11,839 --> 01:00:13,680
i would go into details for this in the

1383
01:00:13,680 --> 01:00:15,520
next slide that how do we actually

1384
01:00:15,520 --> 01:00:17,520
identify if it's a private or a third

1385
01:00:17,520 --> 01:00:18,559
party

1386
01:00:18,559 --> 01:00:20,480
and finally for a website and its name

1387
01:00:20,480 --> 01:00:22,720
server we want to identify which of

1388
01:00:22,720 --> 01:00:24,559
these name servers belong to the same

1389
01:00:24,559 --> 01:00:25,680
entity

1390
01:00:25,680 --> 01:00:28,960
for instance here azure dns and o365

1391
01:00:28,960 --> 01:00:31,440
filtering both belong to microsoft so

1392
01:00:31,440 --> 01:00:34,480
since live is live.com is using

1393
01:00:34,480 --> 01:00:36,079
these two which belong to the same

1394
01:00:36,079 --> 01:00:38,319
entity it is actually not redundantly

1395
01:00:38,319 --> 01:00:41,319
provisioned

1396
01:00:42,240 --> 01:00:44,559
to identify third party name servers

1397
01:00:44,559 --> 01:00:47,040
prior work looks at second level and top

1398
01:00:47,040 --> 01:00:49,200
level domains of the name server and the

1399
01:00:49,200 --> 01:00:51,520
website if they match then the name

1400
01:00:51,520 --> 01:00:56,000
server is private otherwise third party

1401
01:00:56,000 --> 01:00:58,799
for example here in case of google its

1402
01:00:58,799 --> 01:01:01,359
name server also has the same second and

1403
01:01:01,359 --> 01:01:02,880
top level domain

1404
01:01:02,880 --> 01:01:04,559
google.com

1405
01:01:04,559 --> 01:01:06,640
hence it gets correctly classified as

1406
01:01:06,640 --> 01:01:07,760
private

1407
01:01:07,760 --> 01:01:10,559
however this fails in case of youtube

1408
01:01:10,559 --> 01:01:12,799
where the name server gets classified as

1409
01:01:12,799 --> 01:01:16,799
third party when in fact it is not

1410
01:01:17,760 --> 01:01:18,799
other

1411
01:01:18,799 --> 01:01:20,240
approaches look at the start of

1412
01:01:20,240 --> 01:01:22,720
authority dns records which contain

1413
01:01:22,720 --> 01:01:24,960
administrative information about the dns

1414
01:01:24,960 --> 01:01:26,480
zone

1415
01:01:26,480 --> 01:01:28,240
if the start of authority record of the

1416
01:01:28,240 --> 01:01:30,400
website and name server are the same

1417
01:01:30,400 --> 01:01:34,240
then it's private otherwise third party

1418
01:01:34,240 --> 01:01:36,400
this works in case of youtube

1419
01:01:36,400 --> 01:01:38,799
but it fails for instance in case of

1420
01:01:38,799 --> 01:01:40,799
twitter where it is using a third-party

1421
01:01:40,799 --> 01:01:42,960
name server

1422
01:01:42,960 --> 01:01:44,960
and its startup authority

1423
01:01:44,960 --> 01:01:46,559
is also

1424
01:01:46,559 --> 01:01:48,799
that third party

1425
01:01:48,799 --> 01:01:50,880
for instance here twitter using twitter

1426
01:01:50,880 --> 01:01:52,960
is using dyneck.net which actually

1427
01:01:52,960 --> 01:01:55,839
belongs to dyn

1428
01:01:56,720 --> 01:01:59,119
to cope with these issues we add a few

1429
01:01:59,119 --> 01:02:00,559
more heuristics

1430
01:02:00,559 --> 01:02:02,720
so for all website and name server pairs

1431
01:02:02,720 --> 01:02:05,440
we classify the name server as private

1432
01:02:05,440 --> 01:02:08,079
if the second level domain and top level

1433
01:02:08,079 --> 01:02:10,079
domain match for the website and the

1434
01:02:10,079 --> 01:02:11,599
name server

1435
01:02:11,599 --> 01:02:14,079
or if the name server

1436
01:02:14,079 --> 01:02:16,720
is present in the subject alternate name

1437
01:02:16,720 --> 01:02:19,119
list of that website

1438
01:02:19,119 --> 01:02:21,200
sand list is present on the https

1439
01:02:21,200 --> 01:02:23,280
certificate of a website which tells

1440
01:02:23,280 --> 01:02:25,599
that this certificate will also work for

1441
01:02:25,599 --> 01:02:28,160
the domains present in the send list

1442
01:02:28,160 --> 01:02:30,160
hence it's a good way to know if a given

1443
01:02:30,160 --> 01:02:32,240
domain is private

1444
01:02:32,240 --> 01:02:35,399
or not

1445
01:02:36,960 --> 01:02:39,520
if the start of authority do not match

1446
01:02:39,520 --> 01:02:42,960
we classify it as third and finally if

1447
01:02:42,960 --> 01:02:45,359
the name server

1448
01:02:45,359 --> 01:02:48,160
serves more than 50 websites then we say

1449
01:02:48,160 --> 01:02:52,078
that it's more likely third party

1450
01:02:53,839 --> 01:02:55,680
in general we identify

1451
01:02:55,680 --> 01:02:58,000
approximately 10 000 third-party dns

1452
01:02:58,000 --> 01:03:01,119
providers in our data

1453
01:03:01,440 --> 01:03:04,400
for measuring cdns we fetch the web page

1454
01:03:04,400 --> 01:03:06,000
of the website

1455
01:03:06,000 --> 01:03:08,160
that we want to measure the cdn of and

1456
01:03:08,160 --> 01:03:10,400
then we extract all the resources in the

1457
01:03:10,400 --> 01:03:12,400
web page

1458
01:03:12,400 --> 01:03:14,640
and identify the resources which are

1459
01:03:14,640 --> 01:03:16,480
internal

1460
01:03:16,480 --> 01:03:17,680
for example

1461
01:03:17,680 --> 01:03:20,720
for reddit.com this resource that comes

1462
01:03:20,720 --> 01:03:22,720
from redditmedia.com

1463
01:03:22,720 --> 01:03:25,119
is an internal resource

1464
01:03:25,119 --> 01:03:27,760
we use tld matching startup authority

1465
01:03:27,760 --> 01:03:30,799
and subject alternate named lists here

1466
01:03:30,799 --> 01:03:32,799
as well to identify internal and

1467
01:03:32,799 --> 01:03:35,440
external resources

1468
01:03:35,440 --> 01:03:37,920
we do this because internal resources if

1469
01:03:37,920 --> 01:03:39,920
they come from a cdn then it means that

1470
01:03:39,920 --> 01:03:44,520
the website is actually using a cd

1471
01:03:44,640 --> 01:03:46,559
for all the internal resources we fetch

1472
01:03:46,559 --> 01:03:49,280
their cname records

1473
01:03:49,280 --> 01:03:51,280
if the website is using the cdn then

1474
01:03:51,280 --> 01:03:53,760
these cnns will point to the cdn for

1475
01:03:53,760 --> 01:03:55,440
instance here the

1476
01:03:55,440 --> 01:03:59,520
the cname actually points too fastly

1477
01:03:59,520 --> 01:04:01,599
we input this cname to

1478
01:04:01,599 --> 01:04:04,720
to our cname to cdn map which we are

1479
01:04:04,720 --> 01:04:08,400
which will output fastly here

1480
01:04:08,400 --> 01:04:10,480
we manually build this map by taking

1481
01:04:10,480 --> 01:04:12,480
help from available seniors on the

1482
01:04:12,480 --> 01:04:15,200
internet on the cdn's websites and also

1483
01:04:15,200 --> 01:04:17,680
in public suffix lists

1484
01:04:17,680 --> 01:04:20,319
after we have identified the cdn being

1485
01:04:20,319 --> 01:04:22,480
used by our website we also need to see

1486
01:04:22,480 --> 01:04:25,520
if the cdn is private or a third party

1487
01:04:25,520 --> 01:04:28,079
and to do that we again use tld startup

1488
01:04:28,079 --> 01:04:30,559
authority and sans list

1489
01:04:30,559 --> 01:04:32,720
to see if the cdn is private or third

1490
01:04:32,720 --> 01:04:35,118
party

1491
01:04:35,280 --> 01:04:37,760
in general we identify total 86 third

1492
01:04:37,760 --> 01:04:41,680
party syrians in our data

1493
01:04:41,680 --> 01:04:44,160
for certificate authority dependency we

1494
01:04:44,160 --> 01:04:47,440
just fetch the certificate of a website

1495
01:04:47,440 --> 01:04:49,440
and from that extract the links for the

1496
01:04:49,440 --> 01:04:51,440
ocsp servers

1497
01:04:51,440 --> 01:04:54,319
and the crl distribution points and we

1498
01:04:54,319 --> 01:04:56,960
use the same techniques

1499
01:04:56,960 --> 01:04:58,720
which are tld mentioning startup

1500
01:04:58,720 --> 01:05:00,880
authority non-matching and sandless to

1501
01:05:00,880 --> 01:05:02,240
identify

1502
01:05:02,240 --> 01:05:04,480
if these are third-party certificate

1503
01:05:04,480 --> 01:05:08,240
authorities or not

1504
01:05:08,240 --> 01:05:11,440
in our data we identify total 59 third

1505
01:05:11,440 --> 01:05:14,880
party certificate authorities

1506
01:05:18,160 --> 01:05:22,359
now we present our main findings

1507
01:05:23,680 --> 01:05:25,760
i will start by answering the question

1508
01:05:25,760 --> 01:05:27,839
how prevalent third-party dependencies

1509
01:05:27,839 --> 01:05:29,839
are and how concentrated different

1510
01:05:29,839 --> 01:05:33,200
third-party providers are

1511
01:05:34,839 --> 01:05:36,480
overall

1512
01:05:36,480 --> 01:05:39,119
we find that eighty nine percent of the

1513
01:05:39,119 --> 01:05:41,440
top hundred thousand websites

1514
01:05:41,440 --> 01:05:44,559
use third party dns

1515
01:05:44,559 --> 01:05:48,720
thirty two percent use a third party cdn

1516
01:05:48,720 --> 01:05:50,799
and 76.8

1517
01:05:50,799 --> 01:05:55,039
use a third-party certificate authority

1518
01:05:55,039 --> 01:05:56,240
moreover

1519
01:05:56,240 --> 01:05:58,480
85 percent critically depend on a

1520
01:05:58,480 --> 01:06:01,200
third-party dns provider

1521
01:06:01,200 --> 01:06:03,920
28 percent critically depend on a cdn

1522
01:06:03,920 --> 01:06:06,480
provider

1523
01:06:07,599 --> 01:06:10,640
and 59.5 percent degree depend on a

1524
01:06:10,640 --> 01:06:13,680
certificate authority

1525
01:06:14,160 --> 01:06:16,240
for dns in cdn it means that they are

1526
01:06:16,240 --> 01:06:18,880
using just a single dns or cdn provider

1527
01:06:18,880 --> 01:06:20,720
and for c it means that they do not

1528
01:06:20,720 --> 01:06:24,240
support ocsp stapling

1529
01:06:24,559 --> 01:06:27,920
all in all we found that 89

1530
01:06:27,920 --> 01:06:30,559
of the top 100 000 websites

1531
01:06:30,559 --> 01:06:33,680
critically depend on a dna dns

1532
01:06:33,680 --> 01:06:37,440
cdn or ca provider

1533
01:06:38,160 --> 01:06:39,920
in addition to this

1534
01:06:39,920 --> 01:06:42,240
we also found that critical dependencies

1535
01:06:42,240 --> 01:06:43,839
are higher

1536
01:06:43,839 --> 01:06:46,799
for less popular websites for example we

1537
01:06:46,799 --> 01:06:49,599
observe that 49

1538
01:06:49,599 --> 01:06:52,160
use a third-party dns provider

1539
01:06:52,160 --> 01:06:54,559
in the top 100 websites

1540
01:06:54,559 --> 01:06:56,000
and 89

1541
01:06:56,000 --> 01:06:58,480
in the top 1000 websites

1542
01:06:58,480 --> 01:06:59,920
same is the case for critical

1543
01:06:59,920 --> 01:07:01,280
dependencies

1544
01:07:01,280 --> 01:07:03,200
for instance twenty seven point nine

1545
01:07:03,200 --> 01:07:05,039
percent critically depend in the top

1546
01:07:05,039 --> 01:07:06,000
hundred

1547
01:07:06,000 --> 01:07:07,680
while eighty four point eight percent in

1548
01:07:07,680 --> 01:07:10,799
the top hundred thousand

1549
01:07:10,960 --> 01:07:12,880
this means that more popular websites

1550
01:07:12,880 --> 01:07:16,400
care more about availability

1551
01:07:17,200 --> 01:07:19,440
now since third-party dependencies are

1552
01:07:19,440 --> 01:07:21,680
very prevalent it raises the question of

1553
01:07:21,680 --> 01:07:25,759
how concentrated various providers are

1554
01:07:26,000 --> 01:07:27,839
the greater the concentration greater

1555
01:07:27,839 --> 01:07:31,520
will be the single points of failure

1556
01:07:31,760 --> 01:07:34,240
this is a dependency graph

1557
01:07:34,240 --> 01:07:37,280
of website to dns dependency where each

1558
01:07:37,280 --> 01:07:39,760
edge shows the dependency of a website

1559
01:07:39,760 --> 01:07:42,720
on a third-party dns provider

1560
01:07:42,720 --> 01:07:44,480
the size of each node here is

1561
01:07:44,480 --> 01:07:46,720
proportional to its in degree

1562
01:07:46,720 --> 01:07:48,799
which in the case of dns provider is the

1563
01:07:48,799 --> 01:07:51,839
number of websites using it

1564
01:07:51,839 --> 01:07:53,839
we observe that the top most dns

1565
01:07:53,839 --> 01:07:57,520
provider cloudflare alone serves 23 of

1566
01:07:57,520 --> 01:08:01,200
the top 100 000 websites

1567
01:08:01,200 --> 01:08:03,680
in general we observe that only top

1568
01:08:03,680 --> 01:08:06,480
three serve almost 40 percent of the

1569
01:08:06,480 --> 01:08:09,200
websites when the total dns providers we

1570
01:08:09,200 --> 01:08:13,280
observe are almost 10 000.

1571
01:08:13,280 --> 01:08:15,920
this indicates dns space is highly

1572
01:08:15,920 --> 01:08:19,120
highly concentrated

1573
01:08:20,319 --> 01:08:23,279
we see similar trends in cdn where the

1574
01:08:23,279 --> 01:08:26,719
top most cdn provider amazon cloudfront

1575
01:08:26,719 --> 01:08:29,359
alone serves 26 percent of the websites

1576
01:08:29,359 --> 01:08:31,920
that use cdn

1577
01:08:31,920 --> 01:08:34,479
particularly we observe that only three

1578
01:08:34,479 --> 01:08:37,759
cdns serve almost 60 of the websites

1579
01:08:37,759 --> 01:08:40,960
that use cdn which are cloudfront akamai

1580
01:08:40,960 --> 01:08:43,679
and cloudflare

1581
01:08:46,560 --> 01:08:48,799
the situation for certificate validation

1582
01:08:48,799 --> 01:08:50,560
is also similar

1583
01:08:50,560 --> 01:08:53,520
digit alone serves 28 of the websites

1584
01:08:53,520 --> 01:08:57,120
that support https

1585
01:08:57,120 --> 01:08:59,198
particularly only three certificate

1586
01:08:59,198 --> 01:09:00,399
authorities

1587
01:09:00,399 --> 01:09:03,520
digi cert let's encrypt and section so

1588
01:09:03,520 --> 01:09:06,719
60 of the https supporting websites

1589
01:09:06,719 --> 01:09:08,799
out of the total 59 certificate

1590
01:09:08,799 --> 01:09:12,000
authorities we observed

1591
01:09:13,600 --> 01:09:16,479
to summarize our main findings were that

1592
01:09:16,479 --> 01:09:18,319
third party critical dependencies are

1593
01:09:18,319 --> 01:09:20,319
highly prevalent

1594
01:09:20,319 --> 01:09:22,238
and third-party services are very

1595
01:09:22,238 --> 01:09:25,040
concentrated

1596
01:09:25,040 --> 01:09:27,759
a direct implication of this is

1597
01:09:27,759 --> 01:09:31,120
that 89 of the websites are vulnerable

1598
01:09:31,120 --> 01:09:35,080
to dine-like incidents

1599
01:09:35,198 --> 01:09:37,759
a single provider can affect as much as

1600
01:09:37,759 --> 01:09:42,479
25 percent of the top 100 000 websites

1601
01:09:43,040 --> 01:09:44,719
now the question is

1602
01:09:44,719 --> 01:09:46,880
if this is the complete picture or do we

1603
01:09:46,880 --> 01:09:48,960
need to take indirect dependencies into

1604
01:09:48,960 --> 01:09:51,839
account as well

1605
01:09:53,120 --> 01:09:54,640
and this brings us to our second

1606
01:09:54,640 --> 01:09:56,159
question which is

1607
01:09:56,159 --> 01:09:58,000
are there any indirect dependencies

1608
01:09:58,000 --> 01:10:00,159
between websites and their third party

1609
01:10:00,159 --> 01:10:02,239
providers

1610
01:10:02,239 --> 01:10:04,400
to do this we first need to analyze

1611
01:10:04,400 --> 01:10:07,199
inter-service dependencies between dns

1612
01:10:07,199 --> 01:10:11,120
cdn and ca providers

1613
01:10:12,159 --> 01:10:15,360
in case of ca to dns dependency we found

1614
01:10:15,360 --> 01:10:18,719
that out of the 59 cas that we observed

1615
01:10:18,719 --> 01:10:19,920
48

1616
01:10:19,920 --> 01:10:24,320
of them use a third-party dns provider

1617
01:10:24,320 --> 01:10:27,440
in case of ca to cdn dependency 36

1618
01:10:27,440 --> 01:10:31,120
percent used a third-party cdn provider

1619
01:10:31,120 --> 01:10:33,760
moreover out of the 86 cdns that we

1620
01:10:33,760 --> 01:10:36,560
observed we found that 36 percent use a

1621
01:10:36,560 --> 01:10:40,080
third-party dns provider

1622
01:10:40,080 --> 01:10:42,239
hence third-party dependencies are also

1623
01:10:42,239 --> 01:10:46,159
prevalent among service providers

1624
01:10:46,480 --> 01:10:48,480
in case of critical dependencies we

1625
01:10:48,480 --> 01:10:50,640
found that 31 percent of certified

1626
01:10:50,640 --> 01:10:52,239
authorities relied on a single

1627
01:10:52,239 --> 01:10:54,719
third-party dns provider

1628
01:10:54,719 --> 01:10:57,520
36 percent relied on a third party cdn

1629
01:10:57,520 --> 01:10:59,120
provider

1630
01:10:59,120 --> 01:11:02,000
and 17 cdns relied on a single

1631
01:11:02,000 --> 01:11:05,600
third-party dns provider

1632
01:11:05,679 --> 01:11:07,520
these critical dependencies between

1633
01:11:07,520 --> 01:11:09,440
service providers

1634
01:11:09,440 --> 01:11:12,719
give rise to indirect dependency but why

1635
01:11:12,719 --> 01:11:14,000
should we care about indirect

1636
01:11:14,000 --> 01:11:16,400
dependencies i mean okay sure they exist

1637
01:11:16,400 --> 01:11:17,679
but

1638
01:11:17,679 --> 01:11:20,480
what's the harm

1639
01:11:20,800 --> 01:11:22,880
turns out that as a result of indirect

1640
01:11:22,880 --> 01:11:25,679
dependencies we see huge amplification

1641
01:11:25,679 --> 01:11:28,000
in the impact of a given provider

1642
01:11:28,000 --> 01:11:30,320
for example in case of ca to dns

1643
01:11:30,320 --> 01:11:31,520
dependency

1644
01:11:31,520 --> 01:11:34,640
cloudflare now critically serves 37 of

1645
01:11:34,640 --> 01:11:37,120
the top 100 000 websites as compared to

1646
01:11:37,120 --> 01:11:41,000
24 before

1647
01:11:42,320 --> 01:11:45,679
and in case of dns made easy the

1648
01:11:45,679 --> 01:11:48,000
impact goes from one percent to 23

1649
01:11:48,000 --> 01:11:51,000
percent

1650
01:11:56,159 --> 01:11:58,560
hence because of these in indirect

1651
01:11:58,560 --> 01:12:00,960
dependencies we see

1652
01:12:00,960 --> 01:12:05,120
amplification of provider concentration

1653
01:12:05,199 --> 01:12:07,920
to summarize critical dependencies are

1654
01:12:07,920 --> 01:12:11,760
also widespread among service providers

1655
01:12:11,760 --> 01:12:13,600
and these dependencies can amplify the

1656
01:12:13,600 --> 01:12:16,480
concentration of service providers

1657
01:12:16,480 --> 01:12:18,480
which means that the effect of single

1658
01:12:18,480 --> 01:12:20,159
points of failures in the internet is

1659
01:12:20,159 --> 01:12:22,159
amplified

1660
01:12:22,159 --> 01:12:24,800
and a single provider can now impact 37

1661
01:12:24,800 --> 01:12:28,719
percent of the top 100 000 websites

1662
01:12:31,440 --> 01:12:33,280
this is what we observed for data in

1663
01:12:33,280 --> 01:12:36,080
2020 now we see how the world changed

1664
01:12:36,080 --> 01:12:37,840
after the dying incident by comparing

1665
01:12:37,840 --> 01:12:40,880
2016 dependency data with 2020 data

1666
01:12:40,880 --> 01:12:42,719
which brings us to our third question

1667
01:12:42,719 --> 01:12:45,280
which is how did the world change after

1668
01:12:45,280 --> 01:12:47,360
the time incident

1669
01:12:47,360 --> 01:12:49,840
did websites try to reduce their

1670
01:12:49,840 --> 01:12:51,600
third-party dependency on service

1671
01:12:51,600 --> 01:12:53,760
providers did the concentration among

1672
01:12:53,760 --> 01:12:56,719
providers decrease

1673
01:12:57,440 --> 01:12:59,679
we observed that critical dependency in

1674
01:12:59,679 --> 01:13:01,840
dns increased

1675
01:13:01,840 --> 01:13:04,640
with respect to cdn and ca we see no

1676
01:13:04,640 --> 01:13:06,239
significant change in the critical

1677
01:13:06,239 --> 01:13:08,959
dependency

1678
01:13:11,760 --> 01:13:14,080
similarly in case of inter service

1679
01:13:14,080 --> 01:13:16,560
dependencies we observe an 8 percent

1680
01:13:16,560 --> 01:13:19,360
decrease in critical dependency in ca to

1681
01:13:19,360 --> 01:13:21,840
dns dependency and a four percent

1682
01:13:21,840 --> 01:13:25,040
decrease in cdn to dns dependency so

1683
01:13:25,040 --> 01:13:27,120
overall in terms of

1684
01:13:27,120 --> 01:13:29,199
provider to dns dependency we see a

1685
01:13:29,199 --> 01:13:32,800
decreasing trend which is encouraging

1686
01:13:32,800 --> 01:13:34,320
now let us look at the change in

1687
01:13:34,320 --> 01:13:38,159
concentration of service providers

1688
01:13:38,719 --> 01:13:41,640
according to this figure in 2016

1689
01:13:41,640 --> 01:13:44,960
2700 dns providers served 80 of the

1690
01:13:44,960 --> 01:13:46,960
websites

1691
01:13:46,960 --> 01:13:51,360
while in 2020 only 54 providers serve 80

1692
01:13:51,360 --> 01:13:53,440
of the websites

1693
01:13:53,440 --> 01:13:55,600
this means that we are in general moving

1694
01:13:55,600 --> 01:13:58,480
towards more concentration

1695
01:13:58,480 --> 01:14:00,080
this is not an encouraging result

1696
01:14:00,080 --> 01:14:01,679
because it means that single points of

1697
01:14:01,679 --> 01:14:04,800
failure actually got bigger

1698
01:14:04,800 --> 01:14:06,719
and we see similar trends in ca

1699
01:14:06,719 --> 01:14:08,800
providers while concentration decreased

1700
01:14:08,800 --> 01:14:11,800
incidence

1701
01:14:15,600 --> 01:14:17,440
to summarize we see no significant

1702
01:14:17,440 --> 01:14:19,199
change in the third party dependency

1703
01:14:19,199 --> 01:14:21,600
trends among websites

1704
01:14:21,600 --> 01:14:23,679
we do observe a decline in third-party

1705
01:14:23,679 --> 01:14:27,520
dependency among service providers

1706
01:14:27,520 --> 01:14:29,520
we also observed that services became

1707
01:14:29,520 --> 01:14:31,920
more concentrated in 2020 as compared to

1708
01:14:31,920 --> 01:14:34,640
2016.

1709
01:14:34,640 --> 01:14:37,040
all in all we do not see an increasing

1710
01:14:37,040 --> 01:14:39,760
trend in redundancy

1711
01:14:39,760 --> 01:14:42,159
we did observe that websites using dyne

1712
01:14:42,159 --> 01:14:43,920
were more redundantly provisioned in

1713
01:14:43,920 --> 01:14:47,600
2020 as compared to 2016

1714
01:14:47,600 --> 01:14:50,880
but in general there was no

1715
01:14:50,880 --> 01:14:55,040
significant trend towards redundancy

1716
01:14:55,040 --> 01:14:56,560
and because the concentration of

1717
01:14:56,560 --> 01:14:59,040
providers increased in 2020 single

1718
01:14:59,040 --> 01:15:02,880
points of failure actually got bigger

1719
01:15:03,920 --> 01:15:05,920
now based on these findings we make some

1720
01:15:05,920 --> 01:15:08,920
recommendations

1721
01:15:11,760 --> 01:15:13,520
for websites they should consider

1722
01:15:13,520 --> 01:15:15,440
redundancy while using a third party

1723
01:15:15,440 --> 01:15:16,960
provider

1724
01:15:16,960 --> 01:15:18,719
moreover they should try to understand

1725
01:15:18,719 --> 01:15:20,719
their indirect dependency arising from

1726
01:15:20,719 --> 01:15:22,640
the inter-service dependencies of the

1727
01:15:22,640 --> 01:15:25,679
providers that they are using

1728
01:15:25,679 --> 01:15:27,600
similarly for service providers they

1729
01:15:27,600 --> 01:15:29,760
should make it easy for websites to to

1730
01:15:29,760 --> 01:15:32,719
be redundantly provisioned

1731
01:15:32,719 --> 01:15:34,800
as we observed that many dns providers

1732
01:15:34,800 --> 01:15:37,679
do not support redundancy

1733
01:15:37,679 --> 01:15:39,679
and also service providers should try

1734
01:15:39,679 --> 01:15:41,679
for redundancy in their inter-service

1735
01:15:41,679 --> 01:15:44,400
dependencies

1736
01:15:44,400 --> 01:15:46,239
finally service providers should also

1737
01:15:46,239 --> 01:15:48,239
try to be more transparent about attacks

1738
01:15:48,239 --> 01:15:51,718
on their infrastructure

1739
01:15:52,640 --> 01:15:54,480
to highlight some of the limitations of

1740
01:15:54,480 --> 01:15:56,800
our work

1741
01:15:56,800 --> 01:15:58,320
our measurements are from a single

1742
01:15:58,320 --> 01:16:00,640
vantage point only and hence we may miss

1743
01:16:00,640 --> 01:16:04,440
region specific dependencies

1744
01:16:04,719 --> 01:16:06,640
we analyze dependencies only on the

1745
01:16:06,640 --> 01:16:08,719
landing page of a website hence we may

1746
01:16:08,719 --> 01:16:09,760
miss

1747
01:16:09,760 --> 01:16:11,760
dependencies that manifest deeper in the

1748
01:16:11,760 --> 01:16:13,679
content hierarchy

1749
01:16:13,679 --> 01:16:15,440
a direct consequence of this could be

1750
01:16:15,440 --> 01:16:17,679
that we may miss certain cdns used for

1751
01:16:17,679 --> 01:16:18,960
our website

1752
01:16:18,960 --> 01:16:22,800
because the landing page didn't access

1753
01:16:22,800 --> 01:16:25,840
any resource from a cpm

1754
01:16:25,840 --> 01:16:27,600
finally we also did not look at the

1755
01:16:27,600 --> 01:16:29,679
physical and networking infrastructure

1756
01:16:29,679 --> 01:16:31,840
dependencies such as routing and hosting

1757
01:16:31,840 --> 01:16:33,840
mainly because it's not the scope of

1758
01:16:33,840 --> 01:16:36,320
this work

1759
01:16:36,640 --> 01:16:38,159
to summarize

1760
01:16:38,159 --> 01:16:40,800
the ddos attack on dine in 2016 raised

1761
01:16:40,800 --> 01:16:42,400
some questions about the resilience of

1762
01:16:42,400 --> 01:16:44,239
the internet

1763
01:16:44,239 --> 01:16:46,400
in our paper we try to answer some of

1764
01:16:46,400 --> 01:16:48,960
these questions particularly about the

1765
01:16:48,960 --> 01:16:50,960
prevalence of third-party dependencies

1766
01:16:50,960 --> 01:16:53,199
and their impact

1767
01:16:53,199 --> 01:16:55,360
to do so when li stop hundred thousand

1768
01:16:55,360 --> 01:16:57,840
popular websites we also look at their

1769
01:16:57,840 --> 01:16:59,440
inter-service dependencies to get a

1770
01:16:59,440 --> 01:17:01,360
holistic view

1771
01:17:01,360 --> 01:17:03,360
and we identify the potential single

1772
01:17:03,360 --> 01:17:05,760
points of failure in the internet

1773
01:17:05,760 --> 01:17:07,760
we see that third party dependencies are

1774
01:17:07,760 --> 01:17:10,400
highly prevalent

1775
01:17:10,400 --> 01:17:13,040
indirect dependencies amplify provider

1776
01:17:13,040 --> 01:17:14,480
concentration

1777
01:17:14,480 --> 01:17:17,440
and we do not see

1778
01:17:17,440 --> 01:17:19,920
a move away from third-party dependency

1779
01:17:19,920 --> 01:17:22,800
after dyna incident

1780
01:17:22,800 --> 01:17:25,600
the code and data used in this paper is

1781
01:17:25,600 --> 01:17:27,920
extremely also available online thank

1782
01:17:27,920 --> 01:17:31,320
you so much

1783
01:17:35,360 --> 01:17:36,719
okay

1784
01:17:36,719 --> 01:17:38,080
thank you

1785
01:17:38,080 --> 01:17:40,239
axa for that really really interesting

1786
01:17:40,239 --> 01:17:44,480
talk um please do come on up

1787
01:17:44,480 --> 01:17:47,519
all right can you all hear us

1788
01:17:51,360 --> 01:17:54,480
yes we can yes we can

1789
01:17:54,480 --> 01:17:57,360
all right uh so yeah as i say thank you

1790
01:17:57,360 --> 01:17:59,280
for the really interesting talk uh we

1791
01:17:59,280 --> 01:18:01,520
had a bunch of really good questions in

1792
01:18:01,520 --> 01:18:04,640
in the chat already uh and uh i see a

1793
01:18:04,640 --> 01:18:07,199
couple of people in in the queue uh

1794
01:18:07,199 --> 01:18:11,400
where's uh i guess your first

1795
01:18:12,080 --> 01:18:13,920
uh hi yeah thanks a lot for the work uh

1796
01:18:13,920 --> 01:18:14,740
you know measuring

1797
01:18:14,740 --> 01:18:15,920
[Music]

1798
01:18:15,920 --> 01:18:18,239
i'm not able to understand i think uh my

1799
01:18:18,239 --> 01:18:20,640
internet maybe is very bad

1800
01:18:20,640 --> 01:18:23,679
uh oh can you hear me or anyone

1801
01:18:23,679 --> 01:18:24,530
oh

1802
01:18:24,530 --> 01:18:32,449
[Music]

1803
01:18:33,280 --> 01:18:34,719
her reception is

1804
01:18:34,719 --> 01:18:36,239
it's odd her transmission looks great

1805
01:18:36,239 --> 01:18:37,920
her picture's

1806
01:18:37,920 --> 01:18:41,480
great so

1807
01:18:48,320 --> 01:18:51,280
give her a minute i guess

1808
01:18:52,800 --> 01:18:54,960
you

1809
01:18:55,520 --> 01:18:57,040
yeah yeah

1810
01:18:57,040 --> 01:18:59,199
you might have to take her questions

1811
01:18:59,199 --> 01:19:00,480
after the other presentation or

1812
01:19:00,480 --> 01:19:01,280
something

1813
01:19:01,280 --> 01:19:03,520
i think i can hear now

1814
01:19:03,520 --> 01:19:04,640
oh good

1815
01:19:04,640 --> 01:19:06,480
okay can you hear me

1816
01:19:06,480 --> 01:19:08,800
yeah yeah okay great um so thanks a lot

1817
01:19:08,800 --> 01:19:11,600
for the work uh so it's you know uh any

1818
01:19:11,600 --> 01:19:13,440
studies we get on centralization and

1819
01:19:13,440 --> 01:19:15,679
dependencies is fantastic because it's

1820
01:19:15,679 --> 01:19:18,800
definitely a trend as you have uh proved

1821
01:19:18,800 --> 01:19:20,080
in your numbers

1822
01:19:20,080 --> 01:19:23,360
you made one statement that said uh so

1823
01:19:23,360 --> 01:19:26,000
in your recommendations you said that

1824
01:19:26,000 --> 01:19:28,560
you recommend the companies be more

1825
01:19:28,560 --> 01:19:29,840
transparent

1826
01:19:29,840 --> 01:19:30,800
um

1827
01:19:30,800 --> 01:19:33,520
can is there any data to back that up or

1828
01:19:33,520 --> 01:19:35,120
or why companies should be more

1829
01:19:35,120 --> 01:19:38,320
transparent that has been something that

1830
01:19:38,320 --> 01:19:41,440
people want but it's hard to prove that

1831
01:19:41,440 --> 01:19:43,199
that's actually a good thing for them to

1832
01:19:43,199 --> 01:19:44,960
do

1833
01:19:44,960 --> 01:19:48,080
so actually i have a multiple

1834
01:19:48,080 --> 01:19:49,840
sort of data points for this for

1835
01:19:49,840 --> 01:19:50,880
instance

1836
01:19:50,880 --> 01:19:52,000
uh

1837
01:19:52,000 --> 01:19:54,080
currently let's say i'm doing research

1838
01:19:54,080 --> 01:19:56,560
in the redos area and

1839
01:19:56,560 --> 01:19:58,560
when i say that companies should be more

1840
01:19:58,560 --> 01:20:00,080
transparent what i mean is that they

1841
01:20:00,080 --> 01:20:01,840
should be transparent about what attacks

1842
01:20:01,840 --> 01:20:03,440
they're observing so that we can sort of

1843
01:20:03,440 --> 01:20:05,520
determine

1844
01:20:05,520 --> 01:20:07,679
the skill level of the attackers to some

1845
01:20:07,679 --> 01:20:08,719
extent

1846
01:20:08,719 --> 01:20:11,120
for instance here in this in this attack

1847
01:20:11,120 --> 01:20:13,600
that happened we don't really know uh

1848
01:20:13,600 --> 01:20:15,199
for for the dyna tag we don't really

1849
01:20:15,199 --> 01:20:17,840
know if the uh if the target of this

1850
01:20:17,840 --> 01:20:19,679
attack was particularly dine or if the

1851
01:20:19,679 --> 01:20:21,280
target of this attack was some other

1852
01:20:21,280 --> 01:20:23,040
website and all other websites were just

1853
01:20:23,040 --> 01:20:25,679
collateral damage

1854
01:20:25,679 --> 01:20:27,520
and these kind of questions can actually

1855
01:20:27,520 --> 01:20:29,120
help in making informed decisions

1856
01:20:29,120 --> 01:20:31,120
because if many websites just became

1857
01:20:31,120 --> 01:20:33,600
collateral damage then people might

1858
01:20:33,600 --> 01:20:35,280
might want to think about okay also

1859
01:20:35,280 --> 01:20:37,920
having a private provider rather than

1860
01:20:37,920 --> 01:20:41,440
just having third party providers and if

1861
01:20:41,440 --> 01:20:43,120
a particular provider was specifically

1862
01:20:43,120 --> 01:20:44,719
being attached then we can make an

1863
01:20:44,719 --> 01:20:46,480
argument that okay

1864
01:20:46,480 --> 01:20:47,920
maybe we should be redundantly

1865
01:20:47,920 --> 01:20:49,280
provisioned

1866
01:20:49,280 --> 01:20:50,159
and

1867
01:20:50,159 --> 01:20:52,159
not in just this attack but there are

1868
01:20:52,159 --> 01:20:54,560
many other attacks for example uh

1869
01:20:54,560 --> 01:20:56,719
currently i'm working on uh

1870
01:20:56,719 --> 01:20:58,719
building attackers who can do

1871
01:20:58,719 --> 01:21:00,800
reconnaissance on on different service

1872
01:21:00,800 --> 01:21:02,000
providers

1873
01:21:02,000 --> 01:21:04,239
and

1874
01:21:04,400 --> 01:21:06,239
these type of attacks have existed for

1875
01:21:06,239 --> 01:21:08,400
so long i look at all these companies

1876
01:21:08,400 --> 01:21:11,280
aka my verizon and their ddos reports

1877
01:21:11,280 --> 01:21:12,800
and i see that they talk about okay

1878
01:21:12,800 --> 01:21:15,199
these attacks have existed but we don't

1879
01:21:15,199 --> 01:21:17,280
really know we don't know how to detect

1880
01:21:17,280 --> 01:21:18,960
these type of attacks how the attackers

1881
01:21:18,960 --> 01:21:20,960
were actually doing this attack

1882
01:21:20,960 --> 01:21:24,239
and i think this is very important

1883
01:21:24,239 --> 01:21:25,040
for

1884
01:21:25,040 --> 01:21:28,000
for at least research in in ddos attacks

1885
01:21:28,000 --> 01:21:29,440
to know

1886
01:21:29,440 --> 01:21:30,719
that

1887
01:21:30,719 --> 01:21:32,400
what the capabilities of existing

1888
01:21:32,400 --> 01:21:35,120
attackers are

1889
01:21:38,880 --> 01:21:42,760
that makes sense thank you

1890
01:21:43,120 --> 01:21:46,080
okay thank you uh elliot uh i guess

1891
01:21:46,080 --> 01:21:48,320
you're next

1892
01:21:48,320 --> 01:21:50,560
thank you again colin axo this is a

1893
01:21:50,560 --> 01:21:54,239
great paper i echo uh what what uh wes

1894
01:21:54,239 --> 01:21:55,040
said

1895
01:21:55,040 --> 01:21:57,360
it's a really helpful

1896
01:21:57,360 --> 01:22:00,080
and an area that is uh i think

1897
01:22:00,080 --> 01:22:02,159
really challenging you know given our

1898
01:22:02,159 --> 01:22:05,360
dependency on the internet today um

1899
01:22:05,360 --> 01:22:07,360
two points first um the numbers you

1900
01:22:07,360 --> 01:22:10,560
presented in terms of concentration uh

1901
01:22:10,560 --> 01:22:13,920
very much uh are consistent with the

1902
01:22:13,920 --> 01:22:16,639
numbers that anna maria mandalari

1903
01:22:16,639 --> 01:22:17,840
at the

1904
01:22:17,840 --> 01:22:19,440
imperial college

1905
01:22:19,440 --> 01:22:22,639
uh showed when she was looking at

1906
01:22:22,639 --> 01:22:25,280
iot cloud dependencies

1907
01:22:25,280 --> 01:22:28,000
um so uh you can look up her work if

1908
01:22:28,000 --> 01:22:29,920
you'd like i think she presented at the

1909
01:22:29,920 --> 01:22:31,199
at imc

1910
01:22:31,199 --> 01:22:34,480
as well at some point about this um

1911
01:22:34,480 --> 01:22:35,600
the

1912
01:22:35,600 --> 01:22:38,800
uh second point was was just

1913
01:22:38,800 --> 01:22:40,159
that

1914
01:22:40,159 --> 01:22:42,239
there's an activity going on inside the

1915
01:22:42,239 --> 01:22:45,120
ietf which may benefit from hearing more

1916
01:22:45,120 --> 01:22:46,880
about your work

1917
01:22:46,880 --> 01:22:49,199
which is benoit clays

1918
01:22:49,199 --> 01:22:51,520
presented something called sane please

1919
01:22:51,520 --> 01:22:53,360
don't ask me to expand the acronym i

1920
01:22:53,360 --> 01:22:55,679
couldn't possibly but it essentially is

1921
01:22:55,679 --> 01:22:58,400
a dependency it's a service architecture

1922
01:22:58,400 --> 01:23:00,400
it looks a it and

1923
01:23:00,400 --> 01:23:02,639
it's based on a dependency graph

1924
01:23:02,639 --> 01:23:04,560
and um there's a lot of work actually

1925
01:23:04,560 --> 01:23:06,880
going on in the ops and m area that is

1926
01:23:06,880 --> 01:23:09,040
focusing on this very important area of

1927
01:23:09,040 --> 01:23:12,480
resiliency so again congratulations on a

1928
01:23:12,480 --> 01:23:15,600
great paper and uh i look forward to

1929
01:23:15,600 --> 01:23:18,080
seeing a lot more interesting stuff from

1930
01:23:18,080 --> 01:23:20,400
you and your colleagues thank you thank

1931
01:23:20,400 --> 01:23:22,559
you

1932
01:23:23,360 --> 01:23:24,239
yeah

1933
01:23:24,239 --> 01:23:26,239
thank you uh elliott if you could put a

1934
01:23:26,239 --> 01:23:28,080
pointed tube in my stuff in the chat

1935
01:23:28,080 --> 01:23:30,880
that might be helpful

1936
01:23:32,239 --> 01:23:34,880
all right uh other than that uh i

1937
01:23:34,880 --> 01:23:36,480
noticed we're running shots on time

1938
01:23:36,480 --> 01:23:38,639
we've had a a bunch of really really

1939
01:23:38,639 --> 01:23:40,880
interesting questions there uh please do

1940
01:23:40,880 --> 01:23:44,000
read reach out to exo if you have more

1941
01:23:44,000 --> 01:23:47,120
more questions uh and so as as everyone

1942
01:23:47,120 --> 01:23:48,719
said this has been a really nice piece

1943
01:23:48,719 --> 01:23:51,120
of work

1944
01:23:51,600 --> 01:23:54,159
all right and with that uh we should

1945
01:23:54,159 --> 01:23:56,960
move on to the the final talk today uh

1946
01:23:56,960 --> 01:23:59,520
which is by kevin bock

1947
01:23:59,520 --> 01:24:02,239
kevin is a phd candidate in the

1948
01:24:02,239 --> 01:24:03,679
department of computer science at the

1949
01:24:03,679 --> 01:24:06,480
university of maryland uh advised by

1950
01:24:06,480 --> 01:24:07,760
dave levin

1951
01:24:07,760 --> 01:24:11,199
and his work focuses on enabling open

1952
01:24:11,199 --> 01:24:13,600
communication improving network security

1953
01:24:13,600 --> 01:24:16,560
and evading censorship and if we can

1954
01:24:16,560 --> 01:24:20,840
have the final video please

1955
01:24:30,560 --> 01:24:31,920
one

1956
01:24:31,920 --> 01:24:33,840
hey everyone my name is kevin bach from

1957
01:24:33,840 --> 01:24:35,600
the university of maryland before i get

1958
01:24:35,600 --> 01:24:37,280
started i wanted to give a huge shout

1959
01:24:37,280 --> 01:24:39,600
out to all the ietf organizers for

1960
01:24:39,600 --> 01:24:41,120
making this event possible doing all

1961
01:24:41,120 --> 01:24:43,440
this remote organization and i wanted to

1962
01:24:43,440 --> 01:24:44,560
give a big thank you to all the

1963
01:24:44,560 --> 01:24:46,400
collaborators on this project it's

1964
01:24:46,400 --> 01:24:48,639
really taken a village to get this going

1965
01:24:48,639 --> 01:24:49,760
now i'm going to be talking about

1966
01:24:49,760 --> 01:24:51,760
censorship today and specifically a new

1967
01:24:51,760 --> 01:24:53,440
form of censorship evasion we've been

1968
01:24:53,440 --> 01:24:54,480
working on

1969
01:24:54,480 --> 01:24:56,000
server side of asia

1970
01:24:56,000 --> 01:24:57,520
before i get into that though i wanted

1971
01:24:57,520 --> 01:24:59,120
to give you all a brief background of

1972
01:24:59,120 --> 01:25:00,880
what nation state censorship looks like

1973
01:25:00,880 --> 01:25:02,320
nowadays to motivate some of the

1974
01:25:02,320 --> 01:25:04,719
approaches we've taken

1975
01:25:04,719 --> 01:25:06,320
now there are many types of censorship

1976
01:25:06,320 --> 01:25:08,239
that operate around the world today and

1977
01:25:08,239 --> 01:25:09,280
today i'm going to be talking

1978
01:25:09,280 --> 01:25:11,280
specifically about the automated

1979
01:25:11,280 --> 01:25:13,520
in-network censorship that operates in

1980
01:25:13,520 --> 01:25:16,080
the network by nation-states now some

1981
01:25:16,080 --> 01:25:17,920
nation-states operate censorship as

1982
01:25:17,920 --> 01:25:20,080
in-path sensors like this one with the

1983
01:25:20,080 --> 01:25:21,520
sensor physically sitting inside the

1984
01:25:21,520 --> 01:25:23,040
network path

1985
01:25:23,040 --> 01:25:24,880
other sensors operate censorship like

1986
01:25:24,880 --> 01:25:27,040
this instead of being in the path

1987
01:25:27,040 --> 01:25:28,719
they're on the path so if the client

1988
01:25:28,719 --> 01:25:30,960
makes a forbidden request

1989
01:25:30,960 --> 01:25:32,400
you'd see this request moving to the

1990
01:25:32,400 --> 01:25:34,159
network now the server will get the

1991
01:25:34,159 --> 01:25:36,719
packet and the sensor will too

1992
01:25:36,719 --> 01:25:38,000
if the sensor wants to sensor this

1993
01:25:38,000 --> 01:25:39,520
connection though it can't drop it

1994
01:25:39,520 --> 01:25:42,159
anymore it's no longer in the path

1995
01:25:42,159 --> 01:25:43,679
so instead it performs deep packet

1996
01:25:43,679 --> 01:25:45,360
inspection on this packet and if the

1997
01:25:45,360 --> 01:25:47,600
pack contains something it disallows

1998
01:25:47,600 --> 01:25:49,440
what it will do is it will inject its

1999
01:25:49,440 --> 01:25:51,760
own packets into the connection

2000
01:25:51,760 --> 01:25:54,320
specifically it will inject spoofed tcp

2001
01:25:54,320 --> 01:25:57,040
reset or tear down packets these are

2002
01:25:57,040 --> 01:25:58,560
normal packets are computers sent all

2003
01:25:58,560 --> 01:26:00,159
the time these just exist to tell the

2004
01:26:00,159 --> 01:26:01,760
other side stop talking to me

2005
01:26:01,760 --> 01:26:03,120
immediately

2006
01:26:03,120 --> 01:26:04,480
it's going to send one of these packets

2007
01:26:04,480 --> 01:26:06,080
to the client pretending to be the

2008
01:26:06,080 --> 01:26:06,960
server

2009
01:26:06,960 --> 01:26:08,719
and one of these packets to the server

2010
01:26:08,719 --> 01:26:10,719
pretending to be the client

2011
01:26:10,719 --> 01:26:12,560
now when these packets arrive the client

2012
01:26:12,560 --> 01:26:13,840
thinks the server terminated the

2013
01:26:13,840 --> 01:26:15,840
connection and the server thinks the

2014
01:26:15,840 --> 01:26:17,760
client terminated the connection

2015
01:26:17,760 --> 01:26:19,199
immediately both of these sides stop

2016
01:26:19,199 --> 01:26:20,800
talking to each other and just like that

2017
01:26:20,800 --> 01:26:23,360
censorship has been achieved

2018
01:26:23,360 --> 01:26:25,199
now in order to pull off this attack of

2019
01:26:25,199 --> 01:26:27,040
injecting tear down packets the sensor

2020
01:26:27,040 --> 01:26:28,639
needs to have some information about the

2021
01:26:28,639 --> 01:26:30,480
connection it needs to know the port

2022
01:26:30,480 --> 01:26:31,840
numbers the sequence and acknowledgment

2023
01:26:31,840 --> 01:26:33,840
numbers what this means is that the

2024
01:26:33,840 --> 01:26:37,040
sensor requires per flow state

2025
01:26:37,040 --> 01:26:38,480
and that means that these sensors have

2026
01:26:38,480 --> 01:26:40,320
to be tracking the full state of every

2027
01:26:40,320 --> 01:26:42,320
tcp connection coming into and out of

2028
01:26:42,320 --> 01:26:43,440
their country

2029
01:26:43,440 --> 01:26:44,960
and if you're trying to track every

2030
01:26:44,960 --> 01:26:46,480
single connection into and out of a

2031
01:26:46,480 --> 01:26:48,159
country at a country the scale of

2032
01:26:48,159 --> 01:26:49,920
something like china you're going to

2033
01:26:49,920 --> 01:26:51,440
necessarily have to start taking some

2034
01:26:51,440 --> 01:26:52,800
shortcuts

2035
01:26:52,800 --> 01:26:54,639
and we as evaders can take advantage of

2036
01:26:54,639 --> 01:26:56,320
some of those shortcuts

2037
01:26:56,320 --> 01:26:57,920
so let me give you an example from prior

2038
01:26:57,920 --> 01:26:59,600
work of how researchers were able to

2039
01:26:59,600 --> 01:27:01,600
take advantage of these ideas to evade

2040
01:27:01,600 --> 01:27:03,679
censorship

2041
01:27:03,679 --> 01:27:05,679
now once again our client is about to

2042
01:27:05,679 --> 01:27:07,760
generate a forbidden request to this

2043
01:27:07,760 --> 01:27:09,760
resource but this time we're going to

2044
01:27:09,760 --> 01:27:12,880
inject a tcp reset packet of our own

2045
01:27:12,880 --> 01:27:14,239
we're going to set it in such a way that

2046
01:27:14,239 --> 01:27:16,960
the ttl or time to live

2047
01:27:16,960 --> 01:27:19,040
this is a field in these packets

2048
01:27:19,040 --> 01:27:20,239
that

2049
01:27:20,239 --> 01:27:21,600
tell the network how long it should

2050
01:27:21,600 --> 01:27:23,199
survive in the network and it decrements

2051
01:27:23,199 --> 01:27:24,719
once per hop

2052
01:27:24,719 --> 01:27:26,159
we're going to set the ttl high enough

2053
01:27:26,159 --> 01:27:28,159
such that we reach the sensor

2054
01:27:28,159 --> 01:27:30,239
but not so high that we reach the server

2055
01:27:30,239 --> 01:27:31,520
so watch what happens when we send this

2056
01:27:31,520 --> 01:27:33,360
packet

2057
01:27:33,360 --> 01:27:34,800
now just like before the sensor will get

2058
01:27:34,800 --> 01:27:36,639
a copy of the packet but the packet's

2059
01:27:36,639 --> 01:27:37,840
not going to reach the server it's going

2060
01:27:37,840 --> 01:27:39,679
to get dropped along the way

2061
01:27:39,679 --> 01:27:41,520
now the server never saw this packet but

2062
01:27:41,520 --> 01:27:44,080
the sensor has and the sensor says

2063
01:27:44,080 --> 01:27:45,360
well it looks like the client just

2064
01:27:45,360 --> 01:27:47,360
terminated this connection so i can stop

2065
01:27:47,360 --> 01:27:49,440
tracking the connection now and it

2066
01:27:49,440 --> 01:27:50,800
throws away the state it's been

2067
01:27:50,800 --> 01:27:53,440
maintaining about the connection

2068
01:27:53,440 --> 01:27:55,360
now for the rest of this flow the client

2069
01:27:55,360 --> 01:27:57,120
and server are free to communicate the

2070
01:27:57,120 --> 01:27:58,960
sensor has no state with which to censor

2071
01:27:58,960 --> 01:28:00,639
us and the server is no idea we pulled

2072
01:28:00,639 --> 01:28:02,080
off this trick

2073
01:28:02,080 --> 01:28:03,840
now this is just one example of these

2074
01:28:03,840 --> 01:28:05,280
strategies that have been developed and

2075
01:28:05,280 --> 01:28:07,600
discovered over the last 10 plus years

2076
01:28:07,600 --> 01:28:08,880
and the one thing they all have in

2077
01:28:08,880 --> 01:28:09,840
common

2078
01:28:09,840 --> 01:28:12,159
is that evasion has always involved the

2079
01:28:12,159 --> 01:28:13,360
client

2080
01:28:13,360 --> 01:28:15,600
and that statement is true even beyond

2081
01:28:15,600 --> 01:28:17,199
ways and mechanisms of evading

2082
01:28:17,199 --> 01:28:19,600
censorship that do not rely on

2083
01:28:19,600 --> 01:28:21,920
manipulating your packet stream consider

2084
01:28:21,920 --> 01:28:24,639
tor or vpns or proxies

2085
01:28:24,639 --> 01:28:27,199
all of these things require the client

2086
01:28:27,199 --> 01:28:29,520
to install some software on their system

2087
01:28:29,520 --> 01:28:31,199
or take some direct action to make them

2088
01:28:31,199 --> 01:28:32,400
happen

2089
01:28:32,400 --> 01:28:33,840
this has always posed a significant

2090
01:28:33,840 --> 01:28:35,840
barrier to deployment though

2091
01:28:35,840 --> 01:28:37,280
installing the software can pose

2092
01:28:37,280 --> 01:28:38,639
significant risk to the user in the

2093
01:28:38,639 --> 01:28:39,920
first place

2094
01:28:39,920 --> 01:28:41,840
and beyond that it can help users who

2095
01:28:41,840 --> 01:28:43,360
either don't have the technical know-how

2096
01:28:43,360 --> 01:28:45,280
to set these tools up aren't comfortable

2097
01:28:45,280 --> 01:28:47,600
doing so or even those users who don't

2098
01:28:47,600 --> 01:28:49,440
even know they are experiencing

2099
01:28:49,440 --> 01:28:52,400
censorship in the first place

2100
01:28:52,400 --> 01:28:54,239
now ideally

2101
01:28:54,239 --> 01:28:56,719
servers would be able to help instead of

2102
01:28:56,719 --> 01:28:59,840
deploying software at the client instead

2103
01:28:59,840 --> 01:29:01,920
we would deploy it at the server

2104
01:29:01,920 --> 01:29:03,280
and if such a thing were possible then

2105
01:29:03,280 --> 01:29:05,199
the server could subvert censorship on

2106
01:29:05,199 --> 01:29:07,280
the user's behalf without clients

2107
01:29:07,280 --> 01:29:10,400
needing to deploy anything at all and

2108
01:29:10,400 --> 01:29:12,080
just think about the benefits of this

2109
01:29:12,080 --> 01:29:13,760
this would immediately broaden

2110
01:29:13,760 --> 01:29:16,400
reachability and accessibility for these

2111
01:29:16,400 --> 01:29:18,159
resources without clients needing to do

2112
01:29:18,159 --> 01:29:20,000
anything many clients connect to one

2113
01:29:20,000 --> 01:29:21,760
server clients no longer need any

2114
01:29:21,760 --> 01:29:23,600
technical expertise or to download

2115
01:29:23,600 --> 01:29:24,480
anything

2116
01:29:24,480 --> 01:29:25,840
every client immediately gets plausible

2117
01:29:25,840 --> 01:29:28,639
deniability and it helps all those users

2118
01:29:28,639 --> 01:29:30,239
who don't have technical expertise or

2119
01:29:30,239 --> 01:29:31,280
don't know they're being censored in the

2120
01:29:31,280 --> 01:29:33,120
first place

2121
01:29:33,120 --> 01:29:34,800
so this sounds amazing

2122
01:29:34,800 --> 01:29:36,480
the problem is it shouldn't work and it

2123
01:29:36,480 --> 01:29:38,880
shouldn't be possible and to see where

2124
01:29:38,880 --> 01:29:41,120
this is let's consider the waterfall

2125
01:29:41,120 --> 01:29:43,600
diagram of packets that are exchanged

2126
01:29:43,600 --> 01:29:46,239
leading up to some censored query

2127
01:29:46,239 --> 01:29:48,159
clients going to send a sin to which the

2128
01:29:48,159 --> 01:29:50,080
server responds with the synack

2129
01:29:50,080 --> 01:29:51,280
the client completes it through a

2130
01:29:51,280 --> 01:29:52,800
handshake and then the sensor keyword is

2131
01:29:52,800 --> 01:29:53,920
sent

2132
01:29:53,920 --> 01:29:55,360
from the server's perspective though

2133
01:29:55,360 --> 01:29:57,040
there's very little it can do before the

2134
01:29:57,040 --> 01:29:59,199
sensor keyword is sent in fact the

2135
01:29:59,199 --> 01:30:00,719
server can't influence this connection

2136
01:30:00,719 --> 01:30:02,800
past the synack at all

2137
01:30:02,800 --> 01:30:04,159
underscoring the difficulty in this

2138
01:30:04,159 --> 01:30:05,840
space there's been no prior work on

2139
01:30:05,840 --> 01:30:08,239
evading a sensor evading censorship from

2140
01:30:08,239 --> 01:30:10,719
the server

2141
01:30:10,719 --> 01:30:11,840
now i'm thrilled to tell you that

2142
01:30:11,840 --> 01:30:13,920
server-side evasion is indeed possible

2143
01:30:13,920 --> 01:30:15,440
and the rest of this talk i'm going to

2144
01:30:15,440 --> 01:30:16,800
talk about how we discovered these

2145
01:30:16,800 --> 01:30:19,120
server-side techniques and our results

2146
01:30:19,120 --> 01:30:20,639
across multiple different countries and

2147
01:30:20,639 --> 01:30:22,400
protocols and then i'm going to talk

2148
01:30:22,400 --> 01:30:24,320
about the insights we glean from the

2149
01:30:24,320 --> 01:30:26,800
sensors in these experiments

2150
01:30:26,800 --> 01:30:28,639
before i jump in to

2151
01:30:28,639 --> 01:30:30,000
discovering server-side evasion

2152
01:30:30,000 --> 01:30:31,920
techniques i wanted to first give you a

2153
01:30:31,920 --> 01:30:34,159
little bit of background on the tool we

2154
01:30:34,159 --> 01:30:36,080
used and modified to discover these

2155
01:30:36,080 --> 01:30:37,199
strategies

2156
01:30:37,199 --> 01:30:40,239
and and get some insight into this idea

2157
01:30:40,239 --> 01:30:42,239
this tool is geneva

2158
01:30:42,239 --> 01:30:44,480
geneva is an open source originally

2159
01:30:44,480 --> 01:30:47,040
client-side tool that my team built a

2160
01:30:47,040 --> 01:30:48,480
few years ago for automatically

2161
01:30:48,480 --> 01:30:49,920
discovering censorship of agent

2162
01:30:49,920 --> 01:30:51,920
strategies this was originally published

2163
01:30:51,920 --> 01:30:54,000
by my teen in 2019

2164
01:30:54,000 --> 01:30:55,760
geneva runs strictly one side of the

2165
01:30:55,760 --> 01:30:57,280
connection we originally designed it for

2166
01:30:57,280 --> 01:30:58,719
the client side

2167
01:30:58,719 --> 01:31:00,239
and the way it works is it manipulates

2168
01:31:00,239 --> 01:31:02,960
packets as they enter and leave the

2169
01:31:02,960 --> 01:31:04,080
system

2170
01:31:04,080 --> 01:31:06,159
now geneva is a genetic algorithm so in

2171
01:31:06,159 --> 01:31:08,800
fact it learns how it should manipulate

2172
01:31:08,800 --> 01:31:11,280
packets

2173
01:31:11,440 --> 01:31:13,040
specifically the way it can manipulate

2174
01:31:13,040 --> 01:31:14,800
packets is it can do that with just four

2175
01:31:14,800 --> 01:31:17,040
actions that's duplicate you take one

2176
01:31:17,040 --> 01:31:18,719
packet of two packets

2177
01:31:18,719 --> 01:31:20,639
tamper you take a pack and you change it

2178
01:31:20,639 --> 01:31:21,920
in some way

2179
01:31:21,920 --> 01:31:23,760
fragment take a packet and break it in

2180
01:31:23,760 --> 01:31:24,960
half

2181
01:31:24,960 --> 01:31:26,800
or drop take a packet you drop it on the

2182
01:31:26,800 --> 01:31:28,239
floor

2183
01:31:28,239 --> 01:31:29,360
now i'll call out two things

2184
01:31:29,360 --> 01:31:30,719
specifically here

2185
01:31:30,719 --> 01:31:32,719
the first is that tamper is allowed to

2186
01:31:32,719 --> 01:31:36,400
alter or corrupt any tcp header fields

2187
01:31:36,400 --> 01:31:37,679
importantly we don't give it any

2188
01:31:37,679 --> 01:31:39,280
semantic understanding of what these

2189
01:31:39,280 --> 01:31:41,199
fields mean we give it syntax but not

2190
01:31:41,199 --> 01:31:43,600
semantics what this means is that it can

2191
01:31:43,600 --> 01:31:45,679
access the tcp flags fields it can

2192
01:31:45,679 --> 01:31:47,920
change the flags fields but it has no

2193
01:31:47,920 --> 01:31:49,760
knowledge that if i set the flags field

2194
01:31:49,760 --> 01:31:51,360
to sim that means the start of a

2195
01:31:51,360 --> 01:31:52,400
connection

2196
01:31:52,400 --> 01:31:55,440
so syntax no semantics

2197
01:31:55,440 --> 01:31:56,880
i'll also call that fragment here it

2198
01:31:56,880 --> 01:31:59,120
does a bit of double duty the ip layer

2199
01:31:59,120 --> 01:32:01,520
does fragmentation but but it can also

2200
01:32:01,520 --> 01:32:04,719
do segmentation of the tcp layer

2201
01:32:04,719 --> 01:32:05,840
now let me show you what it looks like

2202
01:32:05,840 --> 01:32:08,239
when geneva puts these actions together

2203
01:32:08,239 --> 01:32:10,000
because genita actually composes these

2204
01:32:10,000 --> 01:32:11,600
things into trees

2205
01:32:11,600 --> 01:32:14,480
and these trees look something like this

2206
01:32:14,480 --> 01:32:16,639
at the top we have some sort of match or

2207
01:32:16,639 --> 01:32:18,239
trigger

2208
01:32:18,239 --> 01:32:20,320
okay and then associated with that match

2209
01:32:20,320 --> 01:32:21,840
we have an actions these are match

2210
01:32:21,840 --> 01:32:24,560
action pairs and a strategy is comprised

2211
01:32:24,560 --> 01:32:26,239
of some combination of these match

2212
01:32:26,239 --> 01:32:27,760
action pairs

2213
01:32:27,760 --> 01:32:29,840
so for this specific strategy the

2214
01:32:29,840 --> 01:32:32,480
trigger is outbound tcp packets where

2215
01:32:32,480 --> 01:32:34,960
the flags set to ack

2216
01:32:34,960 --> 01:32:35,920
okay

2217
01:32:35,920 --> 01:32:37,920
when that match happens when a packet

2218
01:32:37,920 --> 01:32:39,840
matches that trigger it gets pulled into

2219
01:32:39,840 --> 01:32:42,159
the tree and then the tree decides how

2220
01:32:42,159 --> 01:32:43,920
that package should be modified

2221
01:32:43,920 --> 01:32:45,840
the duplicate action makes two copies

2222
01:32:45,840 --> 01:32:47,280
and you can see different things happen

2223
01:32:47,280 --> 01:32:49,120
to each copy

2224
01:32:49,120 --> 01:32:50,719
then we do an in-order traversal of the

2225
01:32:50,719 --> 01:32:52,400
leaves and we send the packets that

2226
01:32:52,400 --> 01:32:53,679
emerge

2227
01:32:53,679 --> 01:32:54,719
so let me show you what this looks like

2228
01:32:54,719 --> 01:32:56,880
on the wire

2229
01:32:56,880 --> 01:32:58,639
once again our client has just finished

2230
01:32:58,639 --> 01:33:00,000
the three-way handshake where they're

2231
01:33:00,000 --> 01:33:01,679
about to finish the three-way handshake

2232
01:33:01,679 --> 01:33:03,280
and they're about to make a request to

2233
01:33:03,280 --> 01:33:06,000
this forbidden resource

2234
01:33:06,000 --> 01:33:07,679
we're going to generate our act packet

2235
01:33:07,679 --> 01:33:09,280
which matches the trigger

2236
01:33:09,280 --> 01:33:11,199
geneva pulls it into the tree

2237
01:33:11,199 --> 01:33:12,960
duplicates the packet

2238
01:33:12,960 --> 01:33:14,880
the left child is done

2239
01:33:14,880 --> 01:33:16,639
the right child the flags are changed to

2240
01:33:16,639 --> 01:33:19,520
reset the ttl is changed to two

2241
01:33:19,520 --> 01:33:21,120
and then in order to traverse the leaves

2242
01:33:21,120 --> 01:33:23,040
and we send the packets

2243
01:33:23,040 --> 01:33:25,120
and if you'll notice this tree exactly

2244
01:33:25,120 --> 01:33:27,040
implements the censorship evasion

2245
01:33:27,040 --> 01:33:28,480
strategy that i opened this talk with

2246
01:33:28,480 --> 01:33:31,520
this is the ttl limited reset

2247
01:33:31,520 --> 01:33:33,199
now for this work specifically we

2248
01:33:33,199 --> 01:33:35,199
modified geneva so that it could run on

2249
01:33:35,199 --> 01:33:37,120
the server side so we deployed it

2250
01:33:37,120 --> 01:33:38,960
against real world sensors

2251
01:33:38,960 --> 01:33:40,560
in our previous work and a lot of other

2252
01:33:40,560 --> 01:33:42,159
previous work in the space we've tended

2253
01:33:42,159 --> 01:33:44,320
to focus on http

2254
01:33:44,320 --> 01:33:45,679
in this work we've broadened the

2255
01:33:45,679 --> 01:33:46,960
protocols that we try and support

2256
01:33:46,960 --> 01:33:48,239
censorship for

2257
01:33:48,239 --> 01:33:52,400
so specifically we look for http https

2258
01:33:52,400 --> 01:33:53,520
dns

2259
01:33:53,520 --> 01:33:57,120
ftp and also smtp censorship

2260
01:33:57,120 --> 01:33:58,480
now triggering censorship for these

2261
01:33:58,480 --> 01:34:00,400
protocols largely involves making

2262
01:34:00,400 --> 01:34:02,719
requests or queries with forbidden

2263
01:34:02,719 --> 01:34:04,639
keywords and domains

2264
01:34:04,639 --> 01:34:06,880
smtp is a bit of a special case

2265
01:34:06,880 --> 01:34:09,199
for smtp you can just send an email to

2266
01:34:09,199 --> 01:34:10,880
this email address

2267
01:34:10,880 --> 01:34:12,480
this is censored in china and for

2268
01:34:12,480 --> 01:34:14,880
context this email address is an old

2269
01:34:14,880 --> 01:34:16,800
mechanism by which how bridge nodes used

2270
01:34:16,800 --> 01:34:19,440
to be distributed in china so the email

2271
01:34:19,440 --> 01:34:21,360
is censored

2272
01:34:21,360 --> 01:34:22,800
to show how this could be applied

2273
01:34:22,800 --> 01:34:25,040
broadly in addition to the diversity of

2274
01:34:25,040 --> 01:34:26,800
protocols we also tested against a

2275
01:34:26,800 --> 01:34:29,280
diversity of sensors in both how these

2276
01:34:29,280 --> 01:34:30,840
sensors operate and where they're

2277
01:34:30,840 --> 01:34:34,320
located so we tested in china iran

2278
01:34:34,320 --> 01:34:36,719
kazakhstan and india across all of these

2279
01:34:36,719 --> 01:34:38,320
different protocols

2280
01:34:38,320 --> 01:34:39,520
now i do want to note there's a small

2281
01:34:39,520 --> 01:34:41,679
asterisk on the slide this refers to

2282
01:34:41,679 --> 01:34:45,119
that although iran censors dns over udp

2283
01:34:45,119 --> 01:34:47,520
at the time of our testing dns over tcp

2284
01:34:47,520 --> 01:34:49,040
was not censored from any of our vantage

2285
01:34:49,040 --> 01:34:51,360
points

2286
01:34:52,159 --> 01:34:53,920
now recall that server-side evasion

2287
01:34:53,920 --> 01:34:55,600
shouldn't be possible in any of these

2288
01:34:55,600 --> 01:34:57,280
cases because the server can't really

2289
01:34:57,280 --> 01:34:59,679
influence the connection past the synack

2290
01:34:59,679 --> 01:35:01,520
but geneva was able to find ways to do

2291
01:35:01,520 --> 01:35:02,560
it and i would love to show you what

2292
01:35:02,560 --> 01:35:05,040
some of those things look like

2293
01:35:05,040 --> 01:35:07,600
so this is one successful server-side

2294
01:35:07,600 --> 01:35:10,400
evasion strategy that works in china

2295
01:35:10,400 --> 01:35:11,920
now there's a lot going on here so let

2296
01:35:11,920 --> 01:35:13,440
me break this down

2297
01:35:13,440 --> 01:35:15,679
the client starts off just like normal

2298
01:35:15,679 --> 01:35:18,400
by sending a sin packet okay

2299
01:35:18,400 --> 01:35:20,000
now instead of the server responding

2300
01:35:20,000 --> 01:35:21,760
with the synack doesn't respond with the

2301
01:35:21,760 --> 01:35:24,000
cynic anymore instead it responds with

2302
01:35:24,000 --> 01:35:26,080
two syn packets

2303
01:35:26,080 --> 01:35:28,239
the first is a normal synth packet the

2304
01:35:28,239 --> 01:35:30,159
second is a sim packet containing a

2305
01:35:30,159 --> 01:35:31,679
payload

2306
01:35:31,679 --> 01:35:34,000
now this amazingly is legal

2307
01:35:34,000 --> 01:35:35,920
the first syn packet serves to trigger a

2308
01:35:35,920 --> 01:35:38,000
tcp simultaneous open

2309
01:35:38,000 --> 01:35:40,080
this is an archaic feature of tcp that's

2310
01:35:40,080 --> 01:35:42,159
still supported by every major platform

2311
01:35:42,159 --> 01:35:43,440
and this was originally written to

2312
01:35:43,440 --> 01:35:45,440
handle the case of what happens if two

2313
01:35:45,440 --> 01:35:46,960
computers send a syn packet to each

2314
01:35:46,960 --> 01:35:49,679
other at the exact same time

2315
01:35:49,679 --> 01:35:51,520
now when the client receives the send

2316
01:35:51,520 --> 01:35:52,480
packet

2317
01:35:52,480 --> 01:35:54,960
the client now sends a synack

2318
01:35:54,960 --> 01:35:56,719
and it's actually this combination of

2319
01:35:56,719 --> 01:35:59,119
the client sending a sin back

2320
01:35:59,119 --> 01:36:01,119
the client sending a synac

2321
01:36:01,119 --> 01:36:03,360
immediately preceded by a syn packet

2322
01:36:03,360 --> 01:36:05,679
containing a payload that causes the

2323
01:36:05,679 --> 01:36:07,920
great firewall of china to desynchronize

2324
01:36:07,920 --> 01:36:09,360
from the connection

2325
01:36:09,360 --> 01:36:11,920
and for the rest of this flow the client

2326
01:36:11,920 --> 01:36:13,440
and server can now communicate

2327
01:36:13,440 --> 01:36:15,280
censorship free

2328
01:36:15,280 --> 01:36:17,280
now this seems crazy but this actually

2329
01:36:17,280 --> 01:36:19,440
works with varying degrees of success

2330
01:36:19,440 --> 01:36:21,840
across all the protocols we tested and

2331
01:36:21,840 --> 01:36:23,760
for context the baseline success rate if

2332
01:36:23,760 --> 01:36:25,600
you do nothing at all for evading

2333
01:36:25,600 --> 01:36:28,800
censorship is about two percent

2334
01:36:28,800 --> 01:36:30,719
now this is one successful strategy but

2335
01:36:30,719 --> 01:36:33,119
it's actually just one of many

2336
01:36:33,119 --> 01:36:34,639
altogether we found 11 different

2337
01:36:34,639 --> 01:36:36,960
strategies at the time we did this work

2338
01:36:36,960 --> 01:36:38,719
we discovered eight in china

2339
01:36:38,719 --> 01:36:40,800
one in iran and india and another three

2340
01:36:40,800 --> 01:36:42,320
in kazakhstan

2341
01:36:42,320 --> 01:36:43,920
now our paper goes into detail across

2342
01:36:43,920 --> 01:36:45,679
all of these and unfortunately as much

2343
01:36:45,679 --> 01:36:47,440
as i would love to i don't have time to

2344
01:36:47,440 --> 01:36:49,280
go through them all now but i would love

2345
01:36:49,280 --> 01:36:51,920
to show you just one or two more the

2346
01:36:51,920 --> 01:36:53,199
next one i want to talk about takes

2347
01:36:53,199 --> 01:36:56,239
place in kazakhstan

2348
01:36:56,239 --> 01:36:58,960
this is the null pcp flags server side

2349
01:36:58,960 --> 01:37:00,480
of asian strategy

2350
01:37:00,480 --> 01:37:01,760
you'll notice it starts off just like

2351
01:37:01,760 --> 01:37:04,159
all of them do the client sends us in

2352
01:37:04,159 --> 01:37:05,600
but the server instead of responding

2353
01:37:05,600 --> 01:37:07,119
with the synax instead of what it

2354
01:37:07,119 --> 01:37:09,440
responds with is a packet with no flags

2355
01:37:09,440 --> 01:37:10,719
at all

2356
01:37:10,719 --> 01:37:12,000
now the client when it sees a packet

2357
01:37:12,000 --> 01:37:13,679
with no flags it has no idea what to do

2358
01:37:13,679 --> 01:37:15,760
with it so it just drops and ignores it

2359
01:37:15,760 --> 01:37:18,159
but when the sensor sees

2360
01:37:18,159 --> 01:37:20,960
a packet with no tcp flag set at all the

2361
01:37:20,960 --> 01:37:22,560
sensor can't handle it and assumes

2362
01:37:22,560 --> 01:37:23,520
there's something wrong with the

2363
01:37:23,520 --> 01:37:25,360
connection and immediately stops

2364
01:37:25,360 --> 01:37:28,159
tracking the connection

2365
01:37:28,159 --> 01:37:30,400
and just like that the server has helped

2366
01:37:30,400 --> 01:37:32,480
uncensored the client

2367
01:37:32,480 --> 01:37:33,840
now one of the big takeaways from this

2368
01:37:33,840 --> 01:37:35,360
is that it really has helped motivate

2369
01:37:35,360 --> 01:37:36,880
why we should be using automated

2370
01:37:36,880 --> 01:37:38,800
techniques to discover this this is

2371
01:37:38,800 --> 01:37:40,480
likely a bug in this sensor that it may

2372
01:37:40,480 --> 01:37:41,679
have been difficult for a human to

2373
01:37:41,679 --> 01:37:43,119
discover

2374
01:37:43,119 --> 01:37:44,560
now here's another example that i wanted

2375
01:37:44,560 --> 01:37:47,280
to show you also in kazakhstan

2376
01:37:47,280 --> 01:37:48,639
now in this one

2377
01:37:48,639 --> 01:37:50,080
during the during the three-way

2378
01:37:50,080 --> 01:37:52,320
handshake instead of the server sending

2379
01:37:52,320 --> 01:37:55,600
one synack it actually sends two synax

2380
01:37:55,600 --> 01:37:58,400
and it includes payloads on those synax

2381
01:37:58,400 --> 01:38:00,159
specifically the payloads it includes

2382
01:38:00,159 --> 01:38:02,719
are two uncensored get requests get

2383
01:38:02,719 --> 01:38:05,040
requests for something like example.com

2384
01:38:05,040 --> 01:38:07,040
or something innocuous

2385
01:38:07,040 --> 01:38:08,480
and of course the client is just going

2386
01:38:08,480 --> 01:38:10,159
to ignore these payloads

2387
01:38:10,159 --> 01:38:11,840
but when the sensor sees these

2388
01:38:11,840 --> 01:38:14,560
well-formed http get requests on these

2389
01:38:14,560 --> 01:38:15,679
synax

2390
01:38:15,679 --> 01:38:17,520
the sensor confuses the connection

2391
01:38:17,520 --> 01:38:18,719
direction

2392
01:38:18,719 --> 01:38:20,960
it says whoa the server is sending this

2393
01:38:20,960 --> 01:38:23,360
data i must have had this mixed up the

2394
01:38:23,360 --> 01:38:25,760
server must actually be the client

2395
01:38:25,760 --> 01:38:27,760
and it reverses the roles of client and

2396
01:38:27,760 --> 01:38:30,480
server in the mind of the sensor

2397
01:38:30,480 --> 01:38:32,560
as a consequence of this because it

2398
01:38:32,560 --> 01:38:34,159
treats packets differently from the

2399
01:38:34,159 --> 01:38:36,080
client server when they begin

2400
01:38:36,080 --> 01:38:38,000
communicating again and when the client

2401
01:38:38,000 --> 01:38:40,320
issues the real censored query they can

2402
01:38:40,320 --> 01:38:42,400
now communicate scout free because the

2403
01:38:42,400 --> 01:38:44,320
sensor is no longer examining the

2404
01:38:44,320 --> 01:38:45,440
packets from the client the way they

2405
01:38:45,440 --> 01:38:46,800
should be

2406
01:38:46,800 --> 01:38:48,480
and this works with a 100 success rate

2407
01:38:48,480 --> 01:38:51,119
in kazakhstan

2408
01:38:51,840 --> 01:38:53,280
now at this point we've seen a lot of

2409
01:38:53,280 --> 01:38:55,440
different types of bugs and sensors not

2410
01:38:55,440 --> 01:38:57,280
handling esoteric features in tcp

2411
01:38:57,280 --> 01:38:59,280
correctly correctly

2412
01:38:59,280 --> 01:39:01,679
error cases or just confusing the logic

2413
01:39:01,679 --> 01:39:03,679
altogether for more details for any of

2414
01:39:03,679 --> 01:39:05,920
these i'll refer you to the paper but it

2415
01:39:05,920 --> 01:39:08,080
will note that all of these

2416
01:39:08,080 --> 01:39:10,000
do not require any client behavior

2417
01:39:10,000 --> 01:39:12,400
whatsoever they may induce some behavior

2418
01:39:12,400 --> 01:39:14,960
from the client but no software changes

2419
01:39:14,960 --> 01:39:16,080
as needed

2420
01:39:16,080 --> 01:39:18,000
and we tested this across a wide range

2421
01:39:18,000 --> 01:39:20,320
of diverse clients and in fact we found

2422
01:39:20,320 --> 01:39:22,960
only one case of a strategy that relied

2423
01:39:22,960 --> 01:39:24,960
on platform independent behavior we were

2424
01:39:24,960 --> 01:39:26,800
able to very quickly write that strategy

2425
01:39:26,800 --> 01:39:28,880
to make it platform agnostic

2426
01:39:28,880 --> 01:39:30,400
and all of these really teach us more

2427
01:39:30,400 --> 01:39:33,440
about how sensors work

2428
01:39:34,800 --> 01:39:36,639
next i'd like to talk a little bit more

2429
01:39:36,639 --> 01:39:38,560
about the insights this work has helped

2430
01:39:38,560 --> 01:39:41,199
provide us with

2431
01:39:41,199 --> 01:39:42,480
the first thing i'm going to talk about

2432
01:39:42,480 --> 01:39:43,360
is something called the

2433
01:39:43,360 --> 01:39:45,199
resynchronization state

2434
01:39:45,199 --> 01:39:46,639
this is a feature of the great firewall

2435
01:39:46,639 --> 01:39:48,239
of china that allows it to be more

2436
01:39:48,239 --> 01:39:50,320
tolerant to packet loss

2437
01:39:50,320 --> 01:39:52,480
so specifically the way this works is

2438
01:39:52,480 --> 01:39:54,800
let's say the sensor misses a packet

2439
01:39:54,800 --> 01:39:56,159
the idea is simple it can just

2440
01:39:56,159 --> 01:39:58,400
re-synchronize its state on a later

2441
01:39:58,400 --> 01:40:00,400
packet in the connection

2442
01:40:00,400 --> 01:40:01,920
now the exact dynamics of the

2443
01:40:01,920 --> 01:40:04,080
resynchronization state are constantly

2444
01:40:04,080 --> 01:40:06,400
evolving over time and understanding how

2445
01:40:06,400 --> 01:40:08,400
the resynchronization state operates

2446
01:40:08,400 --> 01:40:10,000
allows us to build better censorship

2447
01:40:10,000 --> 01:40:11,679
evasion tools

2448
01:40:11,679 --> 01:40:13,280
so looking at the resynchronization

2449
01:40:13,280 --> 01:40:15,920
state gives us some more insight as to

2450
01:40:15,920 --> 01:40:17,600
why that first strategy i showed you

2451
01:40:17,600 --> 01:40:19,920
actually works

2452
01:40:19,920 --> 01:40:22,239
so once again here's that strategy now

2453
01:40:22,239 --> 01:40:23,360
i'm going to focus right now on the

2454
01:40:23,360 --> 01:40:24,800
second syn packet we sent from the

2455
01:40:24,800 --> 01:40:27,119
server if you recall we sent this syn

2456
01:40:27,119 --> 01:40:29,280
packet again we sent it from the server

2457
01:40:29,280 --> 01:40:30,880
but we sent the sim packet including a

2458
01:40:30,880 --> 01:40:32,880
random payload

2459
01:40:32,880 --> 01:40:34,560
we notice here is that this payload

2460
01:40:34,560 --> 01:40:36,239
actually triggers the great firewall's

2461
01:40:36,239 --> 01:40:38,480
resynchronization state it tells the

2462
01:40:38,480 --> 01:40:39,840
great firewall hey you may have missed

2463
01:40:39,840 --> 01:40:42,000
something go re-synchronize on the next

2464
01:40:42,000 --> 01:40:43,440
packet

2465
01:40:43,440 --> 01:40:45,199
the next packet that it resynchronizes

2466
01:40:45,199 --> 01:40:45,920
on

2467
01:40:45,920 --> 01:40:48,719
is the synack packet from the client

2468
01:40:48,719 --> 01:40:50,400
but because we force the tcp

2469
01:40:50,400 --> 01:40:52,880
simultaneous open when you do a tcp

2470
01:40:52,880 --> 01:40:55,360
simultaneous open the mechanism by which

2471
01:40:55,360 --> 01:40:57,119
sequence numbers are incremented during

2472
01:40:57,119 --> 01:40:59,199
the three-way handshake changes

2473
01:40:59,199 --> 01:41:01,280
and the grade firewall is not properly

2474
01:41:01,280 --> 01:41:04,480
incrementing its initial sequence number

2475
01:41:04,480 --> 01:41:06,560
while it's resynchronizing

2476
01:41:06,560 --> 01:41:08,320
what this effectively means is that this

2477
01:41:08,320 --> 01:41:10,080
is an off by one bug in the great

2478
01:41:10,080 --> 01:41:12,400
firewall of china the sensor is not

2479
01:41:12,400 --> 01:41:14,800
properly incrementing its isn

2480
01:41:14,800 --> 01:41:16,320
making it desynchronized from the rest

2481
01:41:16,320 --> 01:41:17,280
of the connection because of the

2482
01:41:17,280 --> 01:41:19,679
presence of this payload

2483
01:41:19,679 --> 01:41:22,159
now strangely the success rate of this

2484
01:41:22,159 --> 01:41:24,400
varies greatly by protocol

2485
01:41:24,400 --> 01:41:26,080
and in fact we found that the great

2486
01:41:26,080 --> 01:41:27,679
firewall itself has a different

2487
01:41:27,679 --> 01:41:29,920
resynchronization state depending on the

2488
01:41:29,920 --> 01:41:33,440
protocol itself which is strange

2489
01:41:33,440 --> 01:41:34,800
this is just the first example of

2490
01:41:34,800 --> 01:41:36,480
protocol variability we found in the

2491
01:41:36,480 --> 01:41:37,760
great firewall and i'm going to talk

2492
01:41:37,760 --> 01:41:40,880
about that a little bit more next

2493
01:41:41,760 --> 01:41:44,000
now all of our server side strategies

2494
01:41:44,000 --> 01:41:45,760
operate strictly during the three-way

2495
01:41:45,760 --> 01:41:48,239
handshake okay which means they happen

2496
01:41:48,239 --> 01:41:50,639
before there's any application layer

2497
01:41:50,639 --> 01:41:53,280
specific data going on

2498
01:41:53,280 --> 01:41:54,719
what we realized though when we started

2499
01:41:54,719 --> 01:41:56,480
looking at the success rates of these

2500
01:41:56,480 --> 01:41:57,920
strategies

2501
01:41:57,920 --> 01:41:59,760
is that they didn't always work the same

2502
01:41:59,760 --> 01:42:02,480
way with the same degree of success

2503
01:42:02,480 --> 01:42:04,880
this led us to raise the question

2504
01:42:04,880 --> 01:42:07,360
why are different applications affected

2505
01:42:07,360 --> 01:42:08,960
differently in china

2506
01:42:08,960 --> 01:42:11,360
if the only actions a server takes are

2507
01:42:11,360 --> 01:42:13,520
done before there is any application

2508
01:42:13,520 --> 01:42:16,080
layer data exchanged

2509
01:42:16,080 --> 01:42:17,920
what this has led us to what it led us

2510
01:42:17,920 --> 01:42:20,000
to think about is a new model of how the

2511
01:42:20,000 --> 01:42:21,920
great firewall of china works

2512
01:42:21,920 --> 01:42:23,360
because in the past we've kind of

2513
01:42:23,360 --> 01:42:25,360
tacitly assumed that the great firewall

2514
01:42:25,360 --> 01:42:27,600
works with this kind of very same

2515
01:42:27,600 --> 01:42:30,320
network model where it seemly separates

2516
01:42:30,320 --> 01:42:31,920
uh application layer from transport

2517
01:42:31,920 --> 01:42:33,360
layer protocols it looks something like

2518
01:42:33,360 --> 01:42:34,719
this

2519
01:42:34,719 --> 01:42:36,000
but what's going on here is that we're

2520
01:42:36,000 --> 01:42:38,560
finding different tcp layer bugs for

2521
01:42:38,560 --> 01:42:40,000
each protocol

2522
01:42:40,000 --> 01:42:41,280
which means that each protocol

2523
01:42:41,280 --> 01:42:45,440
censorship must have its own tcp stack

2524
01:42:45,440 --> 01:42:46,719
and this strongly suggests that the

2525
01:42:46,719 --> 01:42:48,320
great firewall is actually running

2526
01:42:48,320 --> 01:42:50,159
multiple sensory middle boxes in

2527
01:42:50,159 --> 01:42:51,840
parallel it's not just one set of

2528
01:42:51,840 --> 01:42:54,320
machines

2529
01:42:55,679 --> 01:42:57,520
so let's see what this looks like

2530
01:42:57,520 --> 01:43:00,159
instead of just one monolithic sensor

2531
01:43:00,159 --> 01:43:01,600
instead we think there are multiple

2532
01:43:01,600 --> 01:43:03,199
sensory middle boxes and each of these

2533
01:43:03,199 --> 01:43:04,800
are running in parallel

2534
01:43:04,800 --> 01:43:06,880
now this begs the question

2535
01:43:06,880 --> 01:43:09,119
how does the great firewall know which

2536
01:43:09,119 --> 01:43:12,400
middle box to apply to a connection

2537
01:43:12,400 --> 01:43:13,600
now you may look at this be like well

2538
01:43:13,600 --> 01:43:14,960
it's obvious it's just got to be using

2539
01:43:14,960 --> 01:43:16,239
the port number

2540
01:43:16,239 --> 01:43:17,840
but it's actually not relying on port

2541
01:43:17,840 --> 01:43:19,520
number the great firewall for all these

2542
01:43:19,520 --> 01:43:22,080
protocols can sensor effectively on any

2543
01:43:22,080 --> 01:43:24,400
port if you try and make an http request

2544
01:43:24,400 --> 01:43:27,119
for some forbidden content on 80 or 8000

2545
01:43:27,119 --> 01:43:29,199
or a random port it will still censor

2546
01:43:29,199 --> 01:43:31,280
you the same so it's not using port

2547
01:43:31,280 --> 01:43:33,280
number

2548
01:43:33,280 --> 01:43:35,440
we think is going on is that how does it

2549
01:43:35,440 --> 01:43:37,600
know which middle box to apply we think

2550
01:43:37,600 --> 01:43:38,719
it doesn't

2551
01:43:38,719 --> 01:43:40,560
we think that every single little box

2552
01:43:40,560 --> 01:43:42,080
gets a copy of every packet

2553
01:43:42,080 --> 01:43:43,600
independently

2554
01:43:43,600 --> 01:43:45,520
and then every middle box applies

2555
01:43:45,520 --> 01:43:48,239
protocol fingerprinting

2556
01:43:48,239 --> 01:43:50,239
every middle box checks hey is this

2557
01:43:50,239 --> 01:43:52,080
something i can censor is this belong to

2558
01:43:52,080 --> 01:43:53,679
me does this belong to me

2559
01:43:53,679 --> 01:43:55,199
and then if it discovers hey this is

2560
01:43:55,199 --> 01:43:56,400
something i should be taking action

2561
01:43:56,400 --> 01:43:57,360
against

2562
01:43:57,360 --> 01:43:59,199
then that specific middle box will take

2563
01:43:59,199 --> 01:44:00,719
action

2564
01:44:00,719 --> 01:44:02,080
this raises the question where are these

2565
01:44:02,080 --> 01:44:03,920
guys located are they nearby are they

2566
01:44:03,920 --> 01:44:04,960
far away

2567
01:44:04,960 --> 01:44:07,360
so we did was we used ttl limited probes

2568
01:44:07,360 --> 01:44:09,199
we sent forbidden queries with different

2569
01:44:09,199 --> 01:44:10,800
for different protocols with different

2570
01:44:10,800 --> 01:44:13,119
ttl limits and we tried to see are these

2571
01:44:13,119 --> 01:44:14,800
located in the same spot in the network

2572
01:44:14,800 --> 01:44:16,880
or they located far away

2573
01:44:16,880 --> 01:44:18,639
what we find is that largely they're

2574
01:44:18,639 --> 01:44:20,239
co-located at the network level they

2575
01:44:20,239 --> 01:44:21,760
don't seem to be located at different

2576
01:44:21,760 --> 01:44:24,239
locations

2577
01:44:24,560 --> 01:44:26,480
now next i want to shift gears a little

2578
01:44:26,480 --> 01:44:28,159
bit and i want to talk about where we've

2579
01:44:28,159 --> 01:44:30,239
taken these ideas since we wrote this

2580
01:44:30,239 --> 01:44:31,760
paper

2581
01:44:31,760 --> 01:44:33,600
now the first thing i want to talk about

2582
01:44:33,600 --> 01:44:36,239
is how this idea of service activation

2583
01:44:36,239 --> 01:44:38,400
and this idea of an automated approach

2584
01:44:38,400 --> 01:44:40,159
to service side evasion has allowed us

2585
01:44:40,159 --> 01:44:42,159
to be highly responsive to new forms of

2586
01:44:42,159 --> 01:44:44,560
censorship

2587
01:44:44,560 --> 01:44:47,520
back in february of 2020 iran launched a

2588
01:44:47,520 --> 01:44:49,520
new form of censorship called a protocol

2589
01:44:49,520 --> 01:44:50,560
filter

2590
01:44:50,560 --> 01:44:52,719
the way this works was that it monitored

2591
01:44:52,719 --> 01:44:54,080
all protocols

2592
01:44:54,080 --> 01:44:55,360
entering and exiting the country on

2593
01:44:55,360 --> 01:44:56,800
certain ports

2594
01:44:56,800 --> 01:44:58,320
and it only allowed certain of those

2595
01:44:58,320 --> 01:44:59,840
protocols to happen

2596
01:44:59,840 --> 01:45:01,440
it performed protocol fingerprinting

2597
01:45:01,440 --> 01:45:02,960
across all of these

2598
01:45:02,960 --> 01:45:04,719
and protocols that didn't match were

2599
01:45:04,719 --> 01:45:07,199
then subject to censorship which means

2600
01:45:07,199 --> 01:45:08,560
if you tried to use a protocol they

2601
01:45:08,560 --> 01:45:10,960
didn't approve of regardless if what you

2602
01:45:10,960 --> 01:45:12,719
were doing is innocuous they would take

2603
01:45:12,719 --> 01:45:15,520
that connection down

2604
01:45:15,520 --> 01:45:16,960
in fact the only connections they did

2605
01:45:16,960 --> 01:45:19,119
allow were those that were they were

2606
01:45:19,119 --> 01:45:20,480
able to be filtered by their standard

2607
01:45:20,480 --> 01:45:22,480
sendership system

2608
01:45:22,480 --> 01:45:24,239
so within a small amount of time of this

2609
01:45:24,239 --> 01:45:26,320
censorship system being deployed we

2610
01:45:26,320 --> 01:45:28,239
threw geneva at this problem and we were

2611
01:45:28,239 --> 01:45:30,000
able to discover four strategies to

2612
01:45:30,000 --> 01:45:32,320
evade this filter uh four from the

2613
01:45:32,320 --> 01:45:34,239
server side so this means that as soon

2614
01:45:34,239 --> 01:45:36,000
as iran rolled this out we were able to

2615
01:45:36,000 --> 01:45:37,760
defeat this thing and help roll out

2616
01:45:37,760 --> 01:45:38,800
those

2617
01:45:38,800 --> 01:45:42,480
evasion tactics to those in iran

2618
01:45:42,560 --> 01:45:44,560
another example of new censorship events

2619
01:45:44,560 --> 01:45:47,040
that occurred is last summer china began

2620
01:45:47,040 --> 01:45:49,679
censoring the use of encrypted sni

2621
01:45:49,679 --> 01:45:51,280
this is a new feature in newer versions

2622
01:45:51,280 --> 01:45:52,480
of tls

2623
01:45:52,480 --> 01:45:54,880
whereby the s i or server name

2624
01:45:54,880 --> 01:45:57,119
indication fields inside tls is

2625
01:45:57,119 --> 01:45:59,920
encrypted now the sni field is revealed

2626
01:45:59,920 --> 01:46:02,639
in tls 1.2 where when a client connects

2627
01:46:02,639 --> 01:46:05,199
to a server the client announces in

2628
01:46:05,199 --> 01:46:07,119
plain text the domain it's trying to get

2629
01:46:07,119 --> 01:46:08,560
to

2630
01:46:08,560 --> 01:46:11,040
sni is clearly a privacy leak and the

2631
01:46:11,040 --> 01:46:13,040
tls developers are working on

2632
01:46:13,040 --> 01:46:15,199
fixing that

2633
01:46:15,199 --> 01:46:16,159
but

2634
01:46:16,159 --> 01:46:18,480
sni is how sensors have been censoring

2635
01:46:18,480 --> 01:46:20,639
https for quite some time

2636
01:46:20,639 --> 01:46:22,239
es and i people have been looking

2637
01:46:22,239 --> 01:46:24,159
forward to as a mechanism by which they

2638
01:46:24,159 --> 01:46:26,560
can protect themselves from smi based

2639
01:46:26,560 --> 01:46:28,719
censorship and unfortunately last summer

2640
01:46:28,719 --> 01:46:30,639
china decided to ban the use of esi

2641
01:46:30,639 --> 01:46:32,719
completely so if you try and encrypt

2642
01:46:32,719 --> 01:46:34,800
your sni fields and any connections

2643
01:46:34,800 --> 01:46:36,159
china will take action against that

2644
01:46:36,159 --> 01:46:37,760
connection even if you're talking to

2645
01:46:37,760 --> 01:46:39,920
something innocuous and has effectively

2646
01:46:39,920 --> 01:46:41,520
stopped the rollout of esmi within the

2647
01:46:41,520 --> 01:46:42,800
country

2648
01:46:42,800 --> 01:46:44,719
now within 24 hours of china rolling out

2649
01:46:44,719 --> 01:46:46,719
this system geneva had discovered six

2650
01:46:46,719 --> 01:46:48,400
strategies to evade it

2651
01:46:48,400 --> 01:46:50,159
six from the client and four from the

2652
01:46:50,159 --> 01:46:51,040
server

2653
01:46:51,040 --> 01:46:52,560
this is very exciting and it really

2654
01:46:52,560 --> 01:46:54,639
allows us to be highly responsive

2655
01:46:54,639 --> 01:46:57,040
and dynamic as new censorship events

2656
01:46:57,040 --> 01:46:59,280
occur

2657
01:46:59,760 --> 01:47:01,360
now the other exciting direction we've

2658
01:47:01,360 --> 01:47:03,360
been able to explore since this work has

2659
01:47:03,360 --> 01:47:05,040
been a real world deployment of this

2660
01:47:05,040 --> 01:47:06,000
system

2661
01:47:06,000 --> 01:47:07,040
we've been working with a number of

2662
01:47:07,040 --> 01:47:09,040
anti-censorship groups to integrate our

2663
01:47:09,040 --> 01:47:10,960
software and our findings into their

2664
01:47:10,960 --> 01:47:12,800
systems and we're starting to see

2665
01:47:12,800 --> 01:47:14,239
success with this

2666
01:47:14,239 --> 01:47:16,320
we've been using geneva to help really

2667
01:47:16,320 --> 01:47:18,320
in two regards the first is in

2668
01:47:18,320 --> 01:47:20,400
bootstrapping initial connections so

2669
01:47:20,400 --> 01:47:21,920
let's say you're something like a vpn

2670
01:47:21,920 --> 01:47:23,920
and you really want to help users get

2671
01:47:23,920 --> 01:47:26,159
connected initially and the weak the

2672
01:47:26,159 --> 01:47:28,159
weak spot in a lot of these protocols is

2673
01:47:28,159 --> 01:47:30,159
that initial connection is those api

2674
01:47:30,159 --> 01:47:32,239
calls that initial reaching out

2675
01:47:32,239 --> 01:47:34,080
now we can use what we can do is use

2676
01:47:34,080 --> 01:47:36,080
geneva to help protect those initial

2677
01:47:36,080 --> 01:47:37,280
bootstrapping and assist in

2678
01:47:37,280 --> 01:47:39,360
bootstrapping clients from a weaker

2679
01:47:39,360 --> 01:47:42,239
protocol to a more secure protocol

2680
01:47:42,239 --> 01:47:43,600
the second thing we've been able to help

2681
01:47:43,600 --> 01:47:46,320
with is in hardening is hardening

2682
01:47:46,320 --> 01:47:48,639
existing evasion protocols evasion

2683
01:47:48,639 --> 01:47:50,320
protocols that sensors may be working on

2684
01:47:50,320 --> 01:47:52,560
harassing or taking action against use

2685
01:47:52,560 --> 01:47:54,639
geneva on top of those and deploy these

2686
01:47:54,639 --> 01:47:56,800
server-side strategies to protect those

2687
01:47:56,800 --> 01:47:58,719
in use and make it harder for sensors to

2688
01:47:58,719 --> 01:48:00,239
take action against these

2689
01:48:00,239 --> 01:48:01,520
and we're very excited about these new

2690
01:48:01,520 --> 01:48:04,080
directions

2691
01:48:04,080 --> 01:48:05,840
i want to conclude here to talk about

2692
01:48:05,840 --> 01:48:07,360
new directions that this work has opened

2693
01:48:07,360 --> 01:48:09,679
up for us and really how it's changed

2694
01:48:09,679 --> 01:48:11,679
the way we conceptualize middle boxes

2695
01:48:11,679 --> 01:48:13,440
because these middle boxes are really

2696
01:48:13,440 --> 01:48:14,880
creating new possibilities in the

2697
01:48:14,880 --> 01:48:15,920
network

2698
01:48:15,920 --> 01:48:18,400
it's good because this has opened up the

2699
01:48:18,400 --> 01:48:20,320
ability to do censorship evasion to more

2700
01:48:20,320 --> 01:48:22,159
people even those who don't know they're

2701
01:48:22,159 --> 01:48:23,600
being censored

2702
01:48:23,600 --> 01:48:25,360
now this is made possible though by the

2703
01:48:25,360 --> 01:48:27,040
ugly fact

2704
01:48:27,040 --> 01:48:29,199
that middle boxes have bugs and bad

2705
01:48:29,199 --> 01:48:31,440
assumptions that can be exploited

2706
01:48:31,440 --> 01:48:32,800
and unfortunately this can also lead to

2707
01:48:32,800 --> 01:48:34,480
some very bad directions

2708
01:48:34,480 --> 01:48:36,000
in another recent piece of work we

2709
01:48:36,000 --> 01:48:37,600
showed that middle boxes can be actually

2710
01:48:37,600 --> 01:48:39,760
weaponized by attackers to launch

2711
01:48:39,760 --> 01:48:40,960
attacks that were long thought and

2712
01:48:40,960 --> 01:48:42,400
possible

2713
01:48:42,400 --> 01:48:43,840
ultimately this leads us to conclude

2714
01:48:43,840 --> 01:48:45,760
that to really make sense about what

2715
01:48:45,760 --> 01:48:47,119
these new additions to the internet are

2716
01:48:47,119 --> 01:48:49,199
doing we really need to keep investing

2717
01:48:49,199 --> 01:48:51,679
and automated tools like geneva to

2718
01:48:51,679 --> 01:48:53,280
understand what new things these middle

2719
01:48:53,280 --> 01:48:54,560
boxes enable

2720
01:48:54,560 --> 01:48:56,159
and how they change the landscape of the

2721
01:48:56,159 --> 01:48:58,840
network and networking

2722
01:48:58,840 --> 01:49:01,440
research now i'm going to wrap up here

2723
01:49:01,440 --> 01:49:03,040
today i've talked about geneva and

2724
01:49:03,040 --> 01:49:04,719
specifically how we've applied it to

2725
01:49:04,719 --> 01:49:06,880
make server's light evasion possible

2726
01:49:06,880 --> 01:49:08,320
if you want to learn more our website is

2727
01:49:08,320 --> 01:49:10,920
available here at the slide it's

2728
01:49:10,920 --> 01:49:13,040
geneva.cs.umd.edu thank you all very

2729
01:49:13,040 --> 01:49:15,840
much

2730
01:49:21,280 --> 01:49:22,719
all right so

2731
01:49:22,719 --> 01:49:27,679
thank you uh kevin really nice talk um

2732
01:49:27,840 --> 01:49:30,480
are you there

2733
01:49:35,920 --> 01:49:38,800
yes hi

2734
01:49:38,960 --> 01:49:41,040
so uh i see tremendous amounts of

2735
01:49:41,040 --> 01:49:43,280
discussion in the chats already

2736
01:49:43,280 --> 01:49:44,639
are there any questions which people

2737
01:49:44,639 --> 01:49:48,239
haven't asked already in the chat

2738
01:49:48,400 --> 01:49:51,519
see spencer maybe

2739
01:49:54,080 --> 01:49:58,400
what else do we have stewards yes

2740
01:49:59,440 --> 01:50:01,679
please don't join the queue if you have

2741
01:50:01,679 --> 01:50:04,239
questions

2742
01:50:07,440 --> 01:50:11,040
all right where's go ahead

2743
01:50:11,040 --> 01:50:12,639
well since you needed questions and then

2744
01:50:12,639 --> 01:50:14,560
two more people popped up so it was

2745
01:50:14,560 --> 01:50:16,239
unclear to me and maybe i missed it how

2746
01:50:16,239 --> 01:50:18,960
did you determine ground truth for

2747
01:50:18,960 --> 01:50:21,040
if you were doing server-side you know

2748
01:50:21,040 --> 01:50:22,719
studies how do you

2749
01:50:22,719 --> 01:50:25,199
decide whether something is successful

2750
01:50:25,199 --> 01:50:27,119
or not and actually got transferred to

2751
01:50:27,119 --> 01:50:30,400
and from the client properly

2752
01:50:30,690 --> 01:50:32,159
[Music]

2753
01:50:32,159 --> 01:50:34,159
can you hear me let me know if my audio

2754
01:50:34,159 --> 01:50:36,480
is not great

2755
01:50:36,480 --> 01:50:38,639
so in our case we have the we have the

2756
01:50:38,639 --> 01:50:40,080
good fortune of being able to control

2757
01:50:40,080 --> 01:50:41,840
both the client and the server so we did

2758
01:50:41,840 --> 01:50:43,920
our experiments we actually had vantage

2759
01:50:43,920 --> 01:50:45,360
points located in all of these censored

2760
01:50:45,360 --> 01:50:47,280
countries and so we could ground truth

2761
01:50:47,280 --> 01:50:49,599
was very easy to determine we could try

2762
01:50:49,599 --> 01:50:51,119
and obtain some forbidden resource see

2763
01:50:51,119 --> 01:50:52,560
the sensor take action

2764
01:50:52,560 --> 01:50:53,840
and then try and do that again with the

2765
01:50:53,840 --> 01:50:55,840
server side strategy running and see it

2766
01:50:55,840 --> 01:50:57,520
succeed

2767
01:50:57,520 --> 01:50:58,719
now when you're talking about scaling

2768
01:50:58,719 --> 01:51:00,080
this up to cases in which you don't

2769
01:51:00,080 --> 01:51:01,679
control the client or some of our more

2770
01:51:01,679 --> 01:51:02,880
real-world deployments that we've been

2771
01:51:02,880 --> 01:51:04,480
working on recently it starts getting a

2772
01:51:04,480 --> 01:51:06,400
little trickier when you start needing

2773
01:51:06,400 --> 01:51:10,080
to really look at telemetry and

2774
01:51:10,080 --> 01:51:12,000
look very carefully at what the if the

2775
01:51:12,000 --> 01:51:13,280
packets are getting exchanged if the

2776
01:51:13,280 --> 01:51:14,639
connection is staying alive that sort of

2777
01:51:14,639 --> 01:51:15,520
thing

2778
01:51:15,520 --> 01:51:18,639
i will say most sensors

2779
01:51:18,639 --> 01:51:19,599
when they take action against the

2780
01:51:19,599 --> 01:51:21,440
connection it's fairly obvious like it

2781
01:51:21,440 --> 01:51:23,599
they're usually not quite about it

2782
01:51:23,599 --> 01:51:26,080
so generally the server can determine uh

2783
01:51:26,080 --> 01:51:27,760
pretty accurately whether a sensor's

2784
01:51:27,760 --> 01:51:31,800
taken action against something or not

2785
01:51:35,360 --> 01:51:39,040
okay thank you uh shiva

2786
01:51:39,920 --> 01:51:42,000
hey kevin thanks for the talk um can you

2787
01:51:42,000 --> 01:51:44,560
hear me okay

2788
01:51:44,560 --> 01:51:46,400
i just so i i think he might have

2789
01:51:46,400 --> 01:51:48,880
touched upon this but when it comes to

2790
01:51:48,880 --> 01:51:50,880
deploying this at scale

2791
01:51:50,880 --> 01:51:52,719
were you i think you mentioned like

2792
01:51:52,719 --> 01:51:54,719
tunnelbear

2793
01:51:54,719 --> 01:51:56,159
someone you were working with british

2794
01:51:56,159 --> 01:51:58,080
wondering were you thinking about the

2795
01:51:58,080 --> 01:51:59,440
coming up the strategies in a

2796
01:51:59,440 --> 01:52:01,520
centralized way and then distributing

2797
01:52:01,520 --> 01:52:03,119
those strategies to every deploy to

2798
01:52:03,119 --> 01:52:04,080
every

2799
01:52:04,080 --> 01:52:04,880
um

2800
01:52:04,880 --> 01:52:06,480
server running

2801
01:52:06,480 --> 01:52:08,639
geneva or were you thinking that every

2802
01:52:08,639 --> 01:52:10,960
individual deployment server deployment

2803
01:52:10,960 --> 01:52:13,360
would come up with its own strategies

2804
01:52:13,360 --> 01:52:15,440
um yeah like what were you i guess

2805
01:52:15,440 --> 01:52:17,040
thinking about like coming up with the

2806
01:52:17,040 --> 01:52:18,000
strategies

2807
01:52:18,000 --> 01:52:19,920
themselves from a deployment point of

2808
01:52:19,920 --> 01:52:22,080
view

2809
01:52:24,560 --> 01:52:26,719
for initial rollout the the methodology

2810
01:52:26,719 --> 01:52:29,599
has been um will be kind of a strategy

2811
01:52:29,599 --> 01:52:31,840
oracle and provide strategies um i

2812
01:52:31,840 --> 01:52:32,960
didn't get to talk about it too much of

2813
01:52:32,960 --> 01:52:34,719
the talk but geneva's broadly broken

2814
01:52:34,719 --> 01:52:36,239
into two halves there's the component

2815
01:52:36,239 --> 01:52:38,239
that runs a strategy on the network and

2816
01:52:38,239 --> 01:52:39,840
a genetic algorithm that discovers the

2817
01:52:39,840 --> 01:52:41,040
strategies and those are fairly

2818
01:52:41,040 --> 01:52:42,880
self-contained

2819
01:52:42,880 --> 01:52:45,199
so for now we've been we've had success

2820
01:52:45,199 --> 01:52:48,880
with um having third parties deploy the

2821
01:52:48,880 --> 01:52:50,560
strategy engine the thing that takes the

2822
01:52:50,560 --> 01:52:52,560
strategy and runs it on the network um

2823
01:52:52,560 --> 01:52:54,239
and we've been more strategy oracle

2824
01:52:54,239 --> 01:52:56,159
providing strategies uh that being said

2825
01:52:56,159 --> 01:52:57,520
there are more and more groups who are

2826
01:52:57,520 --> 01:53:00,159
working to find strategies themselves

2827
01:53:00,159 --> 01:53:01,199
and so as that becomes more

2828
01:53:01,199 --> 01:53:03,040
decentralized that'll

2829
01:53:03,040 --> 01:53:06,320
things will just continue to improve

2830
01:53:09,040 --> 01:53:11,679
okay great area

2831
01:53:11,679 --> 01:53:12,960
yeah and thanks a lot for this talk it

2832
01:53:12,960 --> 01:53:15,040
was very interesting to learn um what

2833
01:53:15,040 --> 01:53:16,239
the senders are doing there and i

2834
01:53:16,239 --> 01:53:17,440
probably have to read the rest of the

2835
01:53:17,440 --> 01:53:18,719
paper as well to understand what's

2836
01:53:18,719 --> 01:53:20,639
happening there um we talked a little

2837
01:53:20,639 --> 01:53:22,960
bit uh in the chat about this is a cat

2838
01:53:22,960 --> 01:53:25,920
and mouse game right um can you just um

2839
01:53:25,920 --> 01:53:27,679
tell a little bit about like how long

2840
01:53:27,679 --> 01:53:29,040
because i think somebody said in the

2841
01:53:29,040 --> 01:53:30,560
chat that some of these bugs have been

2842
01:53:30,560 --> 01:53:32,159
fixed so like what's the timeline how

2843
01:53:32,159 --> 01:53:33,840
long did it take what was the dynamics

2844
01:53:33,840 --> 01:53:35,040
behind that

2845
01:53:35,040 --> 01:53:37,760
just curious

2846
01:53:38,719 --> 01:53:40,320
yes that's a really good question and

2847
01:53:40,320 --> 01:53:42,080
that's something we're still studying of

2848
01:53:42,080 --> 01:53:43,280
what does it look like when a nation

2849
01:53:43,280 --> 01:53:45,199
state rolls out a bug fix um like how

2850
01:53:45,199 --> 01:53:46,960
long does that take where does that go

2851
01:53:46,960 --> 01:53:48,159
um but still something we're studying

2852
01:53:48,159 --> 01:53:49,360
and i i don't think i have a great

2853
01:53:49,360 --> 01:53:52,639
answer for you um the

2854
01:53:52,639 --> 01:53:55,520
yeah i think i'll put a tbd stay tuned

2855
01:53:55,520 --> 01:53:57,520
on that um it's something that's super

2856
01:53:57,520 --> 01:53:58,239
interesting we're going to keep

2857
01:53:58,239 --> 01:54:00,159
monitoring um and we do test these

2858
01:54:00,159 --> 01:54:01,599
things fairly often to see what's goes

2859
01:54:01,599 --> 01:54:03,280
on but i don't think we have a great

2860
01:54:03,280 --> 01:54:05,760
understanding yet of

2861
01:54:05,760 --> 01:54:07,360
how those fixes get rolled out and part

2862
01:54:07,360 --> 01:54:09,599
of that is a limitation of

2863
01:54:09,599 --> 01:54:11,040
that can be quite difficult to do at

2864
01:54:11,040 --> 01:54:12,159
scale

2865
01:54:12,159 --> 01:54:14,000
for example a country like china may

2866
01:54:14,000 --> 01:54:15,040
have

2867
01:54:15,040 --> 01:54:16,880
may have many instances of middle boxes

2868
01:54:16,880 --> 01:54:18,719
and i mean perhaps the fix get rolled

2869
01:54:18,719 --> 01:54:20,080
out somewhere and it takes time to

2870
01:54:20,080 --> 01:54:21,520
traverse or

2871
01:54:21,520 --> 01:54:22,719
there's different sets of middle boxes

2872
01:54:22,719 --> 01:54:23,920
doing things

2873
01:54:23,920 --> 01:54:25,760
so it it really takes quite a concerted

2874
01:54:25,760 --> 01:54:27,280
effort to measure these things at scale

2875
01:54:27,280 --> 01:54:30,159
and get a good understanding of

2876
01:54:30,159 --> 01:54:31,440
how the fixes move through the network

2877
01:54:31,440 --> 01:54:33,040
if you will so

2878
01:54:33,040 --> 01:54:34,719
a big tbd on that but it is a super

2879
01:54:34,719 --> 01:54:36,960
interesting question

2880
01:54:36,960 --> 01:54:38,560
okay thank you i will read your next

2881
01:54:38,560 --> 01:54:40,320
paper but yeah it's already known that

2882
01:54:40,320 --> 01:54:42,000
the system is very heavy so it's

2883
01:54:42,000 --> 01:54:45,360
probably hard to measure great

2884
01:54:48,159 --> 01:54:52,159
all right uh andrew i think is next

2885
01:54:52,159 --> 01:54:54,080
uh siobhan are you supposed to still be

2886
01:54:54,080 --> 01:54:56,480
in the queue

2887
01:54:58,880 --> 01:55:01,119
yeah should i go ahead yep

2888
01:55:01,119 --> 01:55:04,000
um uh yeah hi kevin thanks uh very

2889
01:55:04,000 --> 01:55:06,639
interesting presentation um just just

2890
01:55:06,639 --> 01:55:08,400
amplify a comment i made in the chat

2891
01:55:08,400 --> 01:55:10,480
which you answered but i think

2892
01:55:10,480 --> 01:55:11,920
um

2893
01:55:11,920 --> 01:55:15,119
clearly i can see nation states

2894
01:55:15,119 --> 01:55:17,199
have the resources to

2895
01:55:17,199 --> 01:55:18,800
you know respond over time with

2896
01:55:18,800 --> 01:55:22,239
countermeasures etc so it's an arms race

2897
01:55:22,239 --> 01:55:24,560
and no side will win i think by

2898
01:55:24,560 --> 01:55:25,679
definition

2899
01:55:25,679 --> 01:55:26,719
um

2900
01:55:26,719 --> 01:55:28,560
possibly china might because they got

2901
01:55:28,560 --> 01:55:30,000
more resources than anybody else but

2902
01:55:30,000 --> 01:55:31,520
notwithstanding that

2903
01:55:31,520 --> 01:55:33,920
my concern is for the non-nation states

2904
01:55:33,920 --> 01:55:36,400
affected by this so if you like for the

2905
01:55:36,400 --> 01:55:38,400
typical end user

2906
01:55:38,400 --> 01:55:42,320
versus the malicious content developer

2907
01:55:42,320 --> 01:55:44,639
um clearly server-side evasions in the

2908
01:55:44,639 --> 01:55:46,480
hands of malware

2909
01:55:46,480 --> 01:55:49,840
has seriously bad implications for for

2910
01:55:49,840 --> 01:55:52,480
most end users

2911
01:55:52,480 --> 01:55:53,520
so

2912
01:55:53,520 --> 01:55:54,719
if you like

2913
01:55:54,719 --> 01:55:56,560
any tool can be used for good and bad i

2914
01:55:56,560 --> 01:55:58,560
think this tool has

2915
01:55:58,560 --> 01:56:00,880
tremendously negative connotations for

2916
01:56:00,880 --> 01:56:03,440
the vast majority of internet users

2917
01:56:03,440 --> 01:56:05,599
um which doesn't negate the work but i

2918
01:56:05,599 --> 01:56:07,599
think that needs very very careful

2919
01:56:07,599 --> 01:56:10,320
consideration

2920
01:56:12,239 --> 01:56:14,560
really true i mean the

2921
01:56:14,560 --> 01:56:15,599
the true

2922
01:56:15,599 --> 01:56:16,960
it's a true statement generally that

2923
01:56:16,960 --> 01:56:18,480
anything like this can be used for good

2924
01:56:18,480 --> 01:56:20,719
and bad and malicious i think dave said

2925
01:56:20,719 --> 01:56:22,000
it best malicious is in the eye of the

2926
01:56:22,000 --> 01:56:23,199
beholder

2927
01:56:23,199 --> 01:56:24,880
so we've intentionally not taken this

2928
01:56:24,880 --> 01:56:27,040
work and applied it towards

2929
01:56:27,040 --> 01:56:29,040
um the firewalls like you're describing

2930
01:56:29,040 --> 01:56:30,239
like this really has been a very

2931
01:56:30,239 --> 01:56:32,000
concertedly focused effort on nation

2932
01:56:32,000 --> 01:56:34,320
states to try and at least angle things

2933
01:56:34,320 --> 01:56:36,159
towards the good side as as we can help

2934
01:56:36,159 --> 01:56:38,080
direct it um

2935
01:56:38,080 --> 01:56:41,119
i think it's difficult to quantify if

2936
01:56:41,119 --> 01:56:42,480
the

2937
01:56:42,480 --> 01:56:44,880
who's affected the majority here

2938
01:56:44,880 --> 01:56:46,639
um i mean there are billions of people

2939
01:56:46,639 --> 01:56:49,280
living under the centered regimes

2940
01:56:49,280 --> 01:56:50,320
there's also billions of people who

2941
01:56:50,320 --> 01:56:52,000
would like to be protected by firewalls

2942
01:56:52,000 --> 01:56:52,880
so

2943
01:56:52,880 --> 01:56:55,280
it's kind of a tough question to answer

2944
01:56:55,280 --> 01:56:56,719
but it is something we've been thinking

2945
01:56:56,719 --> 01:56:58,480
about and it was a serious consideration

2946
01:56:58,480 --> 01:56:59,920
we were talking about should we release

2947
01:56:59,920 --> 01:57:01,920
this tool should we make it open source

2948
01:57:01,920 --> 01:57:03,840
um at the end of the day we we thought

2949
01:57:03,840 --> 01:57:04,719
it

2950
01:57:04,719 --> 01:57:06,480
best to put it out there and

2951
01:57:06,480 --> 01:57:09,480
um

2952
01:57:10,000 --> 01:57:10,800
yeah

2953
01:57:10,800 --> 01:57:13,360
let the community use it

2954
01:57:13,360 --> 01:57:15,599
i guess i i just uh i would observe that

2955
01:57:15,599 --> 01:57:17,040
some of the earliest adopters of for

2956
01:57:17,040 --> 01:57:19,119
example encrypted dns

2957
01:57:19,119 --> 01:57:21,760
um were

2958
01:57:21,760 --> 01:57:23,679
malware

2959
01:57:23,679 --> 01:57:26,320
developers um so malicious content in

2960
01:57:26,320 --> 01:57:27,199
the

2961
01:57:27,199 --> 01:57:28,639
way that

2962
01:57:28,639 --> 01:57:30,639
in a definition that most of us would

2963
01:57:30,639 --> 01:57:32,550
recognize as malicious um

2964
01:57:32,550 --> 01:57:33,679
[Music]

2965
01:57:33,679 --> 01:57:34,560
but

2966
01:57:34,560 --> 01:57:35,520
yeah

2967
01:57:35,520 --> 01:57:36,560
anyway

2968
01:57:36,560 --> 01:57:39,360
food for thought certainly thank you

2969
01:57:39,360 --> 01:57:41,599
yeah it's it's a difficult problem i i'm

2970
01:57:41,599 --> 01:57:43,920
tempted to say the the only winning move

2971
01:57:43,920 --> 01:57:45,840
is not to play

2972
01:57:45,840 --> 01:57:46,410
um

2973
01:57:46,410 --> 01:57:48,320
[Music]

2974
01:57:48,320 --> 01:57:50,320
just uh following on a little bit from

2975
01:57:50,320 --> 01:57:53,040
that can you say i think you've touched

2976
01:57:53,040 --> 01:57:54,560
on this to some extent already can you

2977
01:57:54,560 --> 01:57:56,000
say something about how you did the

2978
01:57:56,000 --> 01:57:58,960
tests and how you protected the uh the

2979
01:57:58,960 --> 01:58:01,440
users who are running the tests in these

2980
01:58:01,440 --> 01:58:03,839
countries

2981
01:58:04,800 --> 01:58:07,440
so in these cases

2982
01:58:07,440 --> 01:58:11,360
we got some bad echo here is this on me

2983
01:58:11,520 --> 01:58:13,679
are we good okay we're good um in these

2984
01:58:13,679 --> 01:58:15,760
cases we did all these tests ourselves

2985
01:58:15,760 --> 01:58:17,760
um so there were no end users directly

2986
01:58:17,760 --> 01:58:19,360
involved and the no end users were

2987
01:58:19,360 --> 01:58:20,400
harmed in the making of this paper if

2988
01:58:20,400 --> 01:58:23,119
you will um and no end users were

2989
01:58:23,119 --> 01:58:24,480
we tried very hard to not put any end

2990
01:58:24,480 --> 01:58:26,159
users at risk i was from machines

2991
01:58:26,159 --> 01:58:28,080
directly at our control and

2992
01:58:28,080 --> 01:58:29,760
um that we monitored all that very

2993
01:58:29,760 --> 01:58:31,280
carefully

2994
01:58:31,280 --> 01:58:32,560
going forward as these things are

2995
01:58:32,560 --> 01:58:33,920
deployed that's a whole separate

2996
01:58:33,920 --> 01:58:35,360
question um

2997
01:58:35,360 --> 01:58:37,199
and that's that's something that as

2998
01:58:37,199 --> 01:58:38,480
people deploy these things they'll have

2999
01:58:38,480 --> 01:58:41,119
to wrestle with those um but at least in

3000
01:58:41,119 --> 01:58:43,040
in all the work we did and in those

3001
01:58:43,040 --> 01:58:45,840
circumstances there were no users um

3002
01:58:45,840 --> 01:58:49,400
no users involved

3003
01:58:50,000 --> 01:58:52,800
all right great thank you very much uh

3004
01:58:52,800 --> 01:58:56,400
we are basically out of time here um

3005
01:58:56,400 --> 01:58:57,599
i think we've had three really

3006
01:58:57,599 --> 01:58:59,520
interesting talks we've had a bunch of

3007
01:58:59,520 --> 01:59:01,520
really interesting discussion

3008
01:59:01,520 --> 01:59:03,040
um if you

3009
01:59:03,040 --> 01:59:04,800
anyone here would like to follow up with

3010
01:59:04,800 --> 01:59:07,280
the the rest of the office uh you know

3011
01:59:07,280 --> 01:59:10,480
please do reach out to them uh i'm sure

3012
01:59:10,480 --> 01:59:12,400
everyone involved will be happy to chat

3013
01:59:12,400 --> 01:59:13,199
more

3014
01:59:13,199 --> 01:59:14,159
um

3015
01:59:14,159 --> 01:59:17,040
the uh you know people may be around for

3016
01:59:17,040 --> 01:59:18,639
the rest of the meeting we have the

3017
01:59:18,639 --> 01:59:20,480
gather space if people want to chat

3018
01:59:20,480 --> 01:59:21,920
afterwards as well

3019
01:59:21,920 --> 01:59:24,639
uh which is all linked from the agenda

3020
01:59:24,639 --> 01:59:26,159
um

3021
01:59:26,159 --> 01:59:28,880
yeah uh really nice talks as i say

3022
01:59:28,880 --> 01:59:31,119
please reach reach out to the office and

3023
01:59:31,119 --> 01:59:34,400
uh please uh submit your nominations for

3024
01:59:34,400 --> 01:59:38,639
the price for 2022 uh the deadline is i

3025
01:59:38,639 --> 01:59:40,880
believe the end of next week

3026
01:59:40,880 --> 01:59:43,679
so thank you everybody uh

3027
01:59:43,679 --> 01:59:45,119
thank you again and and that's all we

3028
01:59:45,119 --> 01:59:48,400
have so thanks everyone

3029
01:59:49,520 --> 01:59:52,760
thanks colin

