1
00:00:16,239 --> 00:00:17,840
hello everyone

2
00:00:17,840 --> 00:00:20,160
this is the sibo working group meeting

3
00:00:20,160 --> 00:00:22,240
at itf 112.

4
00:00:22,240 --> 00:00:24,320
my name is christian amsas very labor is

5
00:00:24,320 --> 00:00:25,840
sharing with me and will be joining us

6
00:00:25,840 --> 00:00:28,240
shortly

7
00:00:28,800 --> 00:00:30,800
let's get started

8
00:00:30,800 --> 00:00:32,558
this is an itf meeting

9
00:00:32,558 --> 00:00:34,960
so the note 1 applies this means that

10
00:00:34,960 --> 00:00:36,640
this is a public meeting and it is being

11
00:00:36,640 --> 00:00:37,840
recorded

12
00:00:37,840 --> 00:00:40,000
it also means that if there is anything

13
00:00:40,000 --> 00:00:42,800
in terms of patents or other ipr that

14
00:00:42,800 --> 00:00:46,160
you're aware of please state what state

15
00:00:46,160 --> 00:00:48,719
would state state that

16
00:00:48,719 --> 00:00:52,000
or do not talk about that topic at all

17
00:00:52,000 --> 00:00:54,960
um this also means that we all want to

18
00:00:54,960 --> 00:00:56,879
be nice to each other this is supposed

19
00:00:56,879 --> 00:00:59,520
to be a space where everyone can talk up

20
00:00:59,520 --> 00:01:01,840
freely so um please

21
00:01:01,840 --> 00:01:04,959
ensure that people feel welcome here

22
00:01:04,959 --> 00:01:06,400
if you have any questions about any of

23
00:01:06,400 --> 00:01:08,799
that um please follow the links that are

24
00:01:08,799 --> 00:01:11,040
all listed in the slides um indicated

25
00:01:11,040 --> 00:01:12,479
here in think

26
00:01:12,479 --> 00:01:15,360
or talk to me or the onwards team

27
00:01:15,360 --> 00:01:17,040
depending on what kind of questions

28
00:01:17,040 --> 00:01:19,360
arise

29
00:01:19,840 --> 00:01:22,720
and our agenda for today we have a few

30
00:01:22,720 --> 00:01:24,080
topics

31
00:01:24,080 --> 00:01:26,159
first group of first block is working

32
00:01:26,159 --> 00:01:27,520
group documents

33
00:01:27,520 --> 00:01:29,680
there i'll just give a few a brief

34
00:01:29,680 --> 00:01:31,920
update about documents that are sent to

35
00:01:31,920 --> 00:01:34,000
the rc editor or our

36
00:01:34,000 --> 00:01:36,400
work in progress without any particular

37
00:01:36,400 --> 00:01:38,880
updates that need for the discussion

38
00:01:38,880 --> 00:01:43,040
here then um filling in for michael who

39
00:01:43,040 --> 00:01:45,520
is also busy in another meeting our

40
00:01:45,520 --> 00:01:47,040
carson will

41
00:01:47,040 --> 00:01:48,799
tell a bit about

42
00:01:48,799 --> 00:01:50,799
issues that have come up late in file

43
00:01:50,799 --> 00:01:53,119
magic

44
00:01:53,360 --> 00:01:56,479
and then we'll continue with seaboard

45
00:01:56,479 --> 00:01:57,840
pact

46
00:01:57,840 --> 00:01:58,640
um

47
00:01:58,640 --> 00:02:00,560
looking at the the open questions that

48
00:02:00,560 --> 00:02:02,320
we'll have to answer there before the

49
00:02:02,320 --> 00:02:04,719
document can run

50
00:02:04,719 --> 00:02:08,080
and after that there will be a few words

51
00:02:08,080 --> 00:02:10,878
on the topic of notable tags

52
00:02:10,878 --> 00:02:12,239
and

53
00:02:12,239 --> 00:02:13,280
um

54
00:02:13,280 --> 00:02:15,280
and a large block on the future on

55
00:02:15,280 --> 00:02:16,800
future development

56
00:02:16,800 --> 00:02:20,239
of city of syria and apologies for

57
00:02:20,239 --> 00:02:22,000
whatever happened in there that it says

58
00:02:22,000 --> 00:02:24,640
notable text that's why i stumbled here

59
00:02:24,640 --> 00:02:27,360
briefly um the individual document that

60
00:02:27,360 --> 00:02:30,000
should be here is notable text

61
00:02:30,000 --> 00:02:32,560
um which is also something that

62
00:02:32,560 --> 00:02:35,760
will need work in the work group but

63
00:02:35,760 --> 00:02:37,280
was not planned for today i don't know

64
00:02:37,280 --> 00:02:39,760
what happened here um what should be it

65
00:02:39,760 --> 00:02:41,599
should be saying here is application

66
00:02:41,599 --> 00:02:43,680
oriented literals um

67
00:02:43,680 --> 00:02:46,080
extended diagnostic notation

68
00:02:46,080 --> 00:02:48,640
which is something that i'd like to ask

69
00:02:48,640 --> 00:02:50,480
about whether or not

70
00:02:50,480 --> 00:02:51,680
we should

71
00:02:51,680 --> 00:02:54,560
we should adopt that

72
00:02:56,000 --> 00:02:58,400
are there any changes you'd like to

73
00:02:58,400 --> 00:03:00,720
propose any additional topics that we

74
00:03:00,720 --> 00:03:04,680
should bring up today

75
00:03:09,599 --> 00:03:13,480
um hearing none

76
00:03:18,800 --> 00:03:20,319
uh

77
00:03:20,319 --> 00:03:22,239
um hearing then let's go to the

78
00:03:22,239 --> 00:03:23,840
documents that are

79
00:03:23,840 --> 00:03:25,440
uh that actually have left in the

80
00:03:25,440 --> 00:03:26,959
working group already just giving a

81
00:03:26,959 --> 00:03:28,959
brief update on what changed there in

82
00:03:28,959 --> 00:03:30,400
the steps that not all of you might have

83
00:03:30,400 --> 00:03:31,519
followed

84
00:03:31,519 --> 00:03:34,400
cddl control got switched over to the

85
00:03:34,400 --> 00:03:35,760
standards track

86
00:03:35,760 --> 00:03:38,239
and is now in the rfc editor's queue

87
00:03:38,239 --> 00:03:40,080
network addresses

88
00:03:40,080 --> 00:03:42,400
um in the latest iterations after the

89
00:03:42,400 --> 00:03:44,799
last itf gain support for zone

90
00:03:44,799 --> 00:03:47,040
identifiers which may be numeric maybe

91
00:03:47,040 --> 00:03:49,280
textual or maybe absent as they always

92
00:03:49,280 --> 00:03:50,959
were

93
00:03:50,959 --> 00:03:54,799
and this now is also in the in the rfc

94
00:03:54,799 --> 00:03:57,280
editor queue

95
00:03:57,280 --> 00:03:59,599
the time tag document we adopted in may

96
00:03:59,599 --> 00:04:01,840
is still active

97
00:04:01,840 --> 00:04:02,640
but

98
00:04:02,640 --> 00:04:04,799
this is largely waiting for input from

99
00:04:04,799 --> 00:04:07,760
the state working group because whereas

100
00:04:07,760 --> 00:04:10,480
much of this is rather uncontroversial

101
00:04:10,480 --> 00:04:13,200
the topics of time zone indication that

102
00:04:13,200 --> 00:04:16,478
will also um be supported in the sewer

103
00:04:16,478 --> 00:04:17,680
time tag

104
00:04:17,680 --> 00:04:20,079
will just need to wait for whatever

105
00:04:20,079 --> 00:04:22,560
comes out of the date but judging from

106
00:04:22,560 --> 00:04:24,880
having seen the minutes and how of how

107
00:04:24,880 --> 00:04:26,240
often this has come up in homewood

108
00:04:26,240 --> 00:04:29,040
discussions i conclude that the group is

109
00:04:29,040 --> 00:04:31,280
rather active and we just

110
00:04:31,280 --> 00:04:34,638
follow what is happening there

111
00:04:36,960 --> 00:04:38,720
if there are no comments or

112
00:04:38,720 --> 00:04:41,199
questions on those documents i'll hand

113
00:04:41,199 --> 00:04:43,440
it over to carson

114
00:04:43,440 --> 00:04:48,080
for the next topic of cdl control

115
00:04:48,080 --> 00:04:51,120
ah sorry of file

116
00:04:54,840 --> 00:04:58,800
magic thing so let me try

117
00:04:58,800 --> 00:04:59,050
to

118
00:04:59,050 --> 00:05:00,800
[Music]

119
00:05:00,800 --> 00:05:04,080
get my slides

120
00:05:08,240 --> 00:05:09,440
nice

121
00:05:09,440 --> 00:05:12,720
okay so i have one slight deck for

122
00:05:12,720 --> 00:05:15,360
file magic packed and

123
00:05:15,360 --> 00:05:18,880
for cdl 2.0

124
00:05:18,880 --> 00:05:21,680
um so let's talk about file magic first

125
00:05:21,680 --> 00:05:24,880
so what what do we have at the moment

126
00:05:24,880 --> 00:05:26,160
we have

127
00:05:26,160 --> 00:05:28,400
a way to use

128
00:05:28,400 --> 00:05:32,160
555 799 which is a tag that already was

129
00:05:32,160 --> 00:05:33,600
defined in

130
00:05:33,600 --> 00:05:36,080
7049

131
00:05:36,080 --> 00:05:37,199
as

132
00:05:37,199 --> 00:05:38,880
together with uh

133
00:05:38,880 --> 00:05:41,120
a oneplus 4 tag

134
00:05:41,120 --> 00:05:44,000
identifying a specific

135
00:05:44,000 --> 00:05:45,840
kind of data item

136
00:05:45,840 --> 00:05:48,400
and thus the file format to get an eight

137
00:05:48,400 --> 00:05:52,479
byte prefix for sibo data items

138
00:05:52,479 --> 00:05:54,000
but that only works for single data

139
00:05:54,000 --> 00:05:56,479
items so if we want to

140
00:05:56,479 --> 00:05:59,680
have a magic number for a

141
00:05:59,680 --> 00:06:01,280
cbo sequence

142
00:06:01,280 --> 00:06:03,520
then we would use a new tag which is

143
00:06:03,520 --> 00:06:05,680
defined in this document which is also a

144
00:06:05,680 --> 00:06:07,680
one plus two check plus

145
00:06:07,680 --> 00:06:09,680
a one plus four takes so together we

146
00:06:09,680 --> 00:06:11,440
have eight bytes

147
00:06:11,440 --> 00:06:13,280
uh plus um

148
00:06:13,280 --> 00:06:15,919
conventional content for that

149
00:06:15,919 --> 00:06:18,160
uh tag which is the

150
00:06:18,160 --> 00:06:20,160
um

151
00:06:20,160 --> 00:06:23,039
byte string b o r which uh miraculously

152
00:06:23,039 --> 00:06:24,720
becomes c bar when you look at its

153
00:06:24,720 --> 00:06:26,479
representation

154
00:06:26,479 --> 00:06:28,880
um so that would be a 12 byte prefix you

155
00:06:28,880 --> 00:06:31,840
you uh prepend to a sibo sequence it

156
00:06:31,840 --> 00:06:33,919
stays a sibo sequence but it just has

157
00:06:33,919 --> 00:06:34,800
this

158
00:06:34,800 --> 00:06:36,319
additional

159
00:06:36,319 --> 00:06:38,000
entry that that

160
00:06:38,000 --> 00:06:40,000
identifies it as

161
00:06:40,000 --> 00:06:41,039
what the tag

162
00:06:41,039 --> 00:06:43,400
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

163
00:06:43,400 --> 00:06:45,520
so that

164
00:06:45,520 --> 00:06:47,919
is stuff we have had for a while and

165
00:06:47,919 --> 00:06:49,199
then we

166
00:06:49,199 --> 00:06:51,120
thought well it might be nice to

167
00:06:51,120 --> 00:06:53,520
actually have pre-allocated

168
00:06:53,520 --> 00:06:54,800
tags

169
00:06:54,800 --> 00:06:57,759
for sibo content formats there are two

170
00:06:57,759 --> 00:06:59,440
to the sixteen

171
00:06:59,440 --> 00:07:02,639
uh siebel content format so it that only

172
00:07:02,639 --> 00:07:04,560
takes a small byte

173
00:07:04,560 --> 00:07:07,599
out of the oneplus 4

174
00:07:07,599 --> 00:07:08,639
tags

175
00:07:08,639 --> 00:07:09,759
so we

176
00:07:09,759 --> 00:07:11,199
define

177
00:07:11,199 --> 00:07:13,919
one oneplus 4 tag for each of the two

178
00:07:13,919 --> 00:07:16,400
216.

179
00:07:16,400 --> 00:07:18,319
content formats and we actually managed

180
00:07:18,319 --> 00:07:20,720
to do this not with a table but with a

181
00:07:20,720 --> 00:07:22,160
simple

182
00:07:22,160 --> 00:07:23,919
arithmetic

183
00:07:23,919 --> 00:07:25,039
and

184
00:07:25,039 --> 00:07:28,319
so that was all fine and we thought we

185
00:07:28,319 --> 00:07:30,720
were done

186
00:07:30,720 --> 00:07:31,520
but

187
00:07:31,520 --> 00:07:32,400
then

188
00:07:32,400 --> 00:07:35,520
i made a big mistake and put in examples

189
00:07:35,520 --> 00:07:37,120
into the document

190
00:07:37,120 --> 00:07:39,840
that actually are non-cbo content

191
00:07:39,840 --> 00:07:42,239
formats

192
00:07:42,319 --> 00:07:43,199
so

193
00:07:43,199 --> 00:07:45,520
all this the things on this slide really

194
00:07:45,520 --> 00:07:47,759
work with data that are in sibo form

195
00:07:47,759 --> 00:07:49,759
either a single zebra item or receiver

196
00:07:49,759 --> 00:07:51,120
sequence

197
00:07:51,120 --> 00:07:53,919
and um of course the mechanism just

198
00:07:53,919 --> 00:07:55,759
doesn't work

199
00:07:55,759 --> 00:07:59,039
for data that are not

200
00:07:59,039 --> 00:08:00,879
sibo-shaped

201
00:08:00,879 --> 00:08:04,319
so these examples are really misleading

202
00:08:04,319 --> 00:08:08,000
and the the comments came in that

203
00:08:08,000 --> 00:08:10,879
we would need to do bytes ring wrapping

204
00:08:10,879 --> 00:08:13,360
for these data to fit them into either

205
00:08:13,360 --> 00:08:17,360
555 for 799 or 55 800.

206
00:08:17,360 --> 00:08:19,840
um which one could do

207
00:08:19,840 --> 00:08:21,919
but then it would no longer be a

208
00:08:21,919 --> 00:08:24,080
constant prefix that you just have to

209
00:08:24,080 --> 00:08:27,680
slap in front of your your data so it

210
00:08:27,680 --> 00:08:28,800
would be

211
00:08:28,800 --> 00:08:31,280
more work i mean it's it's a

212
00:08:31,280 --> 00:08:32,880
killing amount of work but it would be

213
00:08:32,880 --> 00:08:34,240
more work

214
00:08:34,240 --> 00:08:38,000
and it would make it harder to peel off

215
00:08:38,000 --> 00:08:39,200
that

216
00:08:39,200 --> 00:08:42,559
prefix so it would be a much worse

217
00:08:42,559 --> 00:08:43,919
situation

218
00:08:43,919 --> 00:08:46,480
um in addition you wouldn't necessarily

219
00:08:46,480 --> 00:08:47,279
know

220
00:08:47,279 --> 00:08:48,800
whether you need this byte string

221
00:08:48,800 --> 00:08:51,360
wrapping or not so this this this is a

222
00:08:51,360 --> 00:08:54,880
non-starter that doesn't make sense um

223
00:08:54,880 --> 00:08:55,760
so

224
00:08:55,760 --> 00:08:58,160
we wanted to have a version of the

225
00:08:58,160 --> 00:09:00,560
document ready for the the deadline for

226
00:09:00,560 --> 00:09:02,000
this itf

227
00:09:02,000 --> 00:09:04,560
um but that

228
00:09:04,560 --> 00:09:07,360
threw a monkey wrench into that

229
00:09:07,360 --> 00:09:08,480
so

230
00:09:08,480 --> 00:09:10,399
we since have

231
00:09:10,399 --> 00:09:12,480
discussed this some more

232
00:09:12,480 --> 00:09:14,320
and came up

233
00:09:14,320 --> 00:09:16,480
with the idea that maybe we spend

234
00:09:16,480 --> 00:09:18,160
another tag

235
00:09:18,160 --> 00:09:20,050
which would be 55801

236
00:09:20,050 --> 00:09:21,440
[Music]

237
00:09:21,440 --> 00:09:22,399
which

238
00:09:22,399 --> 00:09:24,880
is essentially works like five five

239
00:09:24,880 --> 00:09:27,680
eight zero zero so you prefix it

240
00:09:27,680 --> 00:09:29,200
uh to something

241
00:09:29,200 --> 00:09:31,360
uh but the the something that you prefix

242
00:09:31,360 --> 00:09:34,800
it doesn't need to be zero data

243
00:09:34,800 --> 00:09:37,680
um so this this would be almost but not

244
00:09:37,680 --> 00:09:41,279
entirely unlike a zebra uh sequence

245
00:09:41,279 --> 00:09:42,320
um

246
00:09:42,320 --> 00:09:45,760
this is this works with cbo decoders

247
00:09:45,760 --> 00:09:48,720
that can decode one item and then hand

248
00:09:48,720 --> 00:09:49,519
up

249
00:09:49,519 --> 00:09:51,920
the raw data for the rest of the input

250
00:09:51,920 --> 00:09:55,360
so for instance in the receiver

251
00:09:55,360 --> 00:09:57,839
implementation there's an interface

252
00:09:57,839 --> 00:09:59,760
called decode with rest

253
00:09:59,760 --> 00:10:01,920
which takes one item

254
00:10:01,920 --> 00:10:03,200
off

255
00:10:03,200 --> 00:10:06,000
um data

256
00:10:06,000 --> 00:10:08,640
of binary data by string file

257
00:10:08,640 --> 00:10:12,160
and gives you the the decoded

258
00:10:12,160 --> 00:10:15,120
item plus the the rest of the

259
00:10:15,120 --> 00:10:17,760
data in undecoded form and this this is

260
00:10:17,760 --> 00:10:20,640
exactly the api that would be needed for

261
00:10:20,640 --> 00:10:23,279
this and yeah that happens to be a

262
00:10:23,279 --> 00:10:26,320
relatively common api i cannot

263
00:10:26,320 --> 00:10:28,079
guarantee it's

264
00:10:28,079 --> 00:10:29,440
everywhere

265
00:10:29,440 --> 00:10:31,440
but if you don't have that api just read

266
00:10:31,440 --> 00:10:34,160
the first 12 bytes and decode that so so

267
00:10:34,160 --> 00:10:35,279
that should

268
00:10:35,279 --> 00:10:38,240
uh do the job

269
00:10:38,240 --> 00:10:39,120
so

270
00:10:39,120 --> 00:10:42,240
with the addition of this we would be

271
00:10:42,240 --> 00:10:44,560
able to actually

272
00:10:44,560 --> 00:10:47,519
define file magic for all

273
00:10:47,519 --> 00:10:48,480
um

274
00:10:48,480 --> 00:10:50,720
content formats

275
00:10:50,720 --> 00:10:53,760
uh which i think is is desirable but

276
00:10:53,760 --> 00:10:56,320
it's a bit of a scope creep for for this

277
00:10:56,320 --> 00:10:58,640
document i must admit so

278
00:10:58,640 --> 00:11:01,200
um i think this is not a no-brainer but

279
00:11:01,200 --> 00:11:03,839
we we should think about that

280
00:11:03,839 --> 00:11:05,360
um so

281
00:11:05,360 --> 00:11:07,680
assuming that that we can reach

282
00:11:07,680 --> 00:11:09,760
consensus

283
00:11:09,760 --> 00:11:11,200
um to

284
00:11:11,200 --> 00:11:12,480
uh

285
00:11:12,480 --> 00:11:16,000
put this in the the job would be to

286
00:11:16,000 --> 00:11:19,519
actually put it in to um

287
00:11:19,519 --> 00:11:21,920
keep this non-sibo content performance

288
00:11:21,920 --> 00:11:25,360
thing with 55 801s

289
00:11:25,360 --> 00:11:28,000
and again the examples that i i made

290
00:11:28,000 --> 00:11:30,560
kind of assume that we already have that

291
00:11:30,560 --> 00:11:33,680
but it doesn't distinguish between sibo

292
00:11:33,680 --> 00:11:36,240
and non-zero so that was the problem

293
00:11:36,240 --> 00:11:38,800
so these examples would be kept but that

294
00:11:38,800 --> 00:11:41,519
changed to talk about 55801

295
00:11:41,519 --> 00:11:44,240
and we would add a couple of examples

296
00:11:44,240 --> 00:11:46,640
that actually have a siebel content

297
00:11:46,640 --> 00:11:51,920
format using 55 799 and 55-800

298
00:11:51,920 --> 00:11:54,480
so that would be dash 07 and then we

299
00:11:54,480 --> 00:11:56,079
would go for working with glass called

300
00:11:56,079 --> 00:11:58,399
with that

301
00:11:58,560 --> 00:12:02,119
so that's my plan

302
00:12:12,480 --> 00:12:15,760
comments questions

303
00:12:18,639 --> 00:12:21,200
michael please

304
00:12:21,600 --> 00:12:22,480
um

305
00:12:22,480 --> 00:12:25,279
so i think that the 55801 is a good

306
00:12:25,279 --> 00:12:26,399
solution

307
00:12:26,399 --> 00:12:30,399
um and but i i did ask i don't know if

308
00:12:30,399 --> 00:12:32,320
we have this problem

309
00:12:32,320 --> 00:12:33,200
and

310
00:12:33,200 --> 00:12:34,079
so

311
00:12:34,079 --> 00:12:36,639
i would a little bit tend to unless

312
00:12:36,639 --> 00:12:38,639
someone really thinks we should do that

313
00:12:38,639 --> 00:12:40,639
i would tend towards let's not go there

314
00:12:40,639 --> 00:12:42,240
and just

315
00:12:42,240 --> 00:12:44,800
just stick with what we have

316
00:12:44,800 --> 00:12:47,519
i'm also concerned about the review

317
00:12:47,519 --> 00:12:50,839
content comments that will result

318
00:12:50,839 --> 00:12:54,320
in these things that are way beyond

319
00:12:54,320 --> 00:12:56,720
seabor

320
00:13:00,079 --> 00:13:02,399
so we have one comment in the chat that

321
00:13:02,399 --> 00:13:04,079
says

322
00:13:04,079 --> 00:13:07,079
55801

323
00:13:13,040 --> 00:13:16,160
um just to to to get a bit of a better

324
00:13:16,160 --> 00:13:16,959
view

325
00:13:16,959 --> 00:13:19,120
would we still have use cases for

326
00:13:19,120 --> 00:13:21,680
seabourn uh for num for uh content

327
00:13:21,680 --> 00:13:23,600
format numbers in all those three

328
00:13:23,600 --> 00:13:25,360
categories that is five five seven nine

329
00:13:25,360 --> 00:13:28,320
nine eight hundred and eighty one yeah

330
00:13:28,320 --> 00:13:31,279
can could we slim this uh is there any

331
00:13:31,279 --> 00:13:33,279
of those that is kind of

332
00:13:33,279 --> 00:13:34,880
um

333
00:13:34,880 --> 00:13:36,480
where we don't really have a full use

334
00:13:36,480 --> 00:13:38,160
case

335
00:13:38,160 --> 00:13:40,000
well if we didn't have a use case we

336
00:13:40,000 --> 00:13:42,880
shouldn't do it um so um yes i think

337
00:13:42,880 --> 00:13:44,560
that there are

338
00:13:44,560 --> 00:13:46,959
examples meaningful examples that can be

339
00:13:46,959 --> 00:13:48,399
put into

340
00:13:48,399 --> 00:13:50,079
the document and i think it's useful to

341
00:13:50,079 --> 00:13:51,839
have these examples because we are not

342
00:13:51,839 --> 00:13:53,360
now opening up

343
00:13:53,360 --> 00:13:55,360
the choice of the three different ways

344
00:13:55,360 --> 00:13:56,270
to do things and

345
00:13:56,270 --> 00:13:57,440
[Music]

346
00:13:57,440 --> 00:13:59,760
it certainly helps to explain when you

347
00:13:59,760 --> 00:14:03,000
use what

348
00:14:08,480 --> 00:14:11,199
so just i'm taking taking my document

349
00:14:11,199 --> 00:14:14,399
shepard hat here

350
00:14:14,399 --> 00:14:15,360
the

351
00:14:15,360 --> 00:14:17,680
byte string version has been in there

352
00:14:17,680 --> 00:14:21,040
for the the dash 05 and dash 06 versions

353
00:14:21,040 --> 00:14:22,880
which was what the working group last

354
00:14:22,880 --> 00:14:24,880
call um covered so

355
00:14:24,880 --> 00:14:27,519
um i'd like just to point out that if we

356
00:14:27,519 --> 00:14:29,839
if we extend the scope here this will

357
00:14:29,839 --> 00:14:32,959
put the document through

358
00:14:33,120 --> 00:14:34,639
definitely through another working group

359
00:14:34,639 --> 00:14:36,160
last call and

360
00:14:36,160 --> 00:14:38,320
probably a bit of designing

361
00:14:38,320 --> 00:14:41,120
on the way there

362
00:14:41,839 --> 00:14:43,440
one thing that was pointed out in

363
00:14:43,440 --> 00:14:45,360
previous discussion that might help here

364
00:14:45,360 --> 00:14:46,480
is that

365
00:14:46,480 --> 00:14:48,639
many of the things this document kind of

366
00:14:48,639 --> 00:14:50,880
set out to do are already have already

367
00:14:50,880 --> 00:14:53,519
happened by early registrations which as

368
00:14:53,519 --> 00:14:56,240
i checked only affect the kind of the

369
00:14:56,240 --> 00:14:57,440
the

370
00:14:57,440 --> 00:15:00,959
parts unaffected by all this

371
00:15:01,920 --> 00:15:04,079
so that's not a reason not to do it it's

372
00:15:04,079 --> 00:15:05,519
just something that i'd like to put out

373
00:15:05,519 --> 00:15:07,440
and make people aware of

374
00:15:07,440 --> 00:15:09,360
um if there's any urgency on the rest of

375
00:15:09,360 --> 00:15:12,440
the document

376
00:15:24,880 --> 00:15:28,079
yeah just to give an example the

377
00:15:28,079 --> 00:15:30,720
the one example that that i would build

378
00:15:30,720 --> 00:15:32,000
for

379
00:15:32,000 --> 00:15:32,680
uh

380
00:15:32,680 --> 00:15:36,079
55801 would use

381
00:15:36,079 --> 00:15:39,440
the content format 11 5

382
00:15:39,440 --> 00:15:41,040
42

383
00:15:41,040 --> 00:15:44,160
application slash

384
00:15:44,279 --> 00:15:46,230
vnd.oma.lwm2m plus dlv

385
00:15:46,230 --> 00:15:49,369
[Music]

386
00:15:50,000 --> 00:15:53,040
because that that's a weird format

387
00:15:53,040 --> 00:15:54,720
that where it really helps if you

388
00:15:54,720 --> 00:15:56,480
actually can identify it

389
00:15:56,480 --> 00:16:00,440
by a magic number

390
00:16:10,399 --> 00:16:12,560
christian i think you your audio totally

391
00:16:12,560 --> 00:16:15,279
broke down now

392
00:16:15,360 --> 00:16:18,360
um

393
00:16:26,160 --> 00:16:28,720
um is this better now again

394
00:16:28,720 --> 00:16:30,079
yes

395
00:16:30,079 --> 00:16:31,199
okay

396
00:16:31,199 --> 00:16:31,680
um

397
00:16:31,680 --> 00:16:32,880
[Music]

398
00:16:32,880 --> 00:16:35,440
so i've heard a bit of um i've heard

399
00:16:35,440 --> 00:16:36,720
some positive

400
00:16:36,720 --> 00:16:39,040
um some positive input and some cautious

401
00:16:39,040 --> 00:16:41,519
input on going forward so

402
00:16:41,519 --> 00:16:44,160
i suggest that this can be explored in a

403
00:16:44,160 --> 00:16:45,920
dasher seven

404
00:16:45,920 --> 00:16:48,399
um and that the examples there will

405
00:16:48,399 --> 00:16:49,839
hopefully

406
00:16:49,839 --> 00:16:52,240
make the use case clear enough that we

407
00:16:52,240 --> 00:16:55,120
can go on with this

408
00:16:55,839 --> 00:16:57,519
thank you

409
00:16:57,519 --> 00:16:58,399
then

410
00:16:58,399 --> 00:17:03,480
next up is caution again with pact

411
00:17:04,480 --> 00:17:06,079
yeah so this is

412
00:17:06,079 --> 00:17:07,520
the slide ahead

413
00:17:07,520 --> 00:17:09,199
in july

414
00:17:09,199 --> 00:17:12,559
um so the the main issue is stable

415
00:17:12,559 --> 00:17:14,000
building

416
00:17:14,000 --> 00:17:16,240
um and um

417
00:17:16,240 --> 00:17:18,559
i think we need to

418
00:17:18,559 --> 00:17:21,199
not boil the ocean here but on the other

419
00:17:21,199 --> 00:17:23,839
hand have something that that has

420
00:17:23,839 --> 00:17:25,760
batteries included

421
00:17:25,760 --> 00:17:28,799
uh so i'll come to that in a minute

422
00:17:28,799 --> 00:17:31,520
uh maybe i use should use the fact that

423
00:17:31,520 --> 00:17:35,120
this points to chris zipp's records

424
00:17:35,120 --> 00:17:36,640
tag proposal

425
00:17:36,640 --> 00:17:39,039
for a quick intermission

426
00:17:39,039 --> 00:17:41,840
so i just sent some some additional

427
00:17:41,840 --> 00:17:44,480
comments to him on the mailing list

428
00:17:44,480 --> 00:17:46,400
and i think that that's a pretty good

429
00:17:46,400 --> 00:17:48,320
proposal and uh

430
00:17:48,320 --> 00:17:49,760
people if you

431
00:17:49,760 --> 00:17:51,120
um

432
00:17:51,120 --> 00:17:52,400
can

433
00:17:52,400 --> 00:17:54,559
um if you think you you have comments on

434
00:17:54,559 --> 00:17:57,520
that uh please send them to the

435
00:17:57,520 --> 00:17:59,120
list because i think that will be a

436
00:17:59,120 --> 00:18:01,840
pretty useful addition to our

437
00:18:01,840 --> 00:18:05,360
library of tags

438
00:18:06,240 --> 00:18:08,559
so let's go to

439
00:18:08,559 --> 00:18:09,760
pact

440
00:18:09,760 --> 00:18:12,320
so pack really is three things

441
00:18:12,320 --> 00:18:15,120
it's a processing model

442
00:18:15,120 --> 00:18:16,640
uh which is

443
00:18:16,640 --> 00:18:19,440
in in contrast to to actual compression

444
00:18:19,440 --> 00:18:22,080
schemes based on in place

445
00:18:22,080 --> 00:18:24,880
usage of of the packed

446
00:18:24,880 --> 00:18:27,520
data items so you do reference chasing

447
00:18:27,520 --> 00:18:28,799
in

448
00:18:28,799 --> 00:18:29,180
the

449
00:18:29,180 --> 00:18:30,640
[Music]

450
00:18:30,640 --> 00:18:32,640
data you got

451
00:18:32,640 --> 00:18:36,000
then it's the registration of a number

452
00:18:36,000 --> 00:18:39,039
of tags and simple items

453
00:18:39,039 --> 00:18:42,080
that allow you to reference

454
00:18:42,080 --> 00:18:45,039
items so these are the the

455
00:18:45,039 --> 00:18:48,480
origins of those arrows

456
00:18:48,480 --> 00:18:51,039
that the processing model foresees

457
00:18:51,039 --> 00:18:52,000
and

458
00:18:52,000 --> 00:18:54,640
i think we we have a pretty good

459
00:18:54,640 --> 00:18:57,360
understanding where in the sibo basic

460
00:18:57,360 --> 00:18:58,720
data model

461
00:18:58,720 --> 00:19:01,039
we have the gaps where we can put these

462
00:19:01,039 --> 00:19:02,880
references in

463
00:19:02,880 --> 00:19:05,440
and finally and this is the part that

464
00:19:05,440 --> 00:19:08,480
isn't quite as stable as the rest

465
00:19:08,480 --> 00:19:11,679
the the table building and in particular

466
00:19:11,679 --> 00:19:14,400
the the nesting aspect

467
00:19:14,400 --> 00:19:17,440
uh where we may have more than one

468
00:19:17,440 --> 00:19:18,480
uh

469
00:19:18,480 --> 00:19:21,520
place in the the data item where

470
00:19:21,520 --> 00:19:23,440
something is added

471
00:19:23,440 --> 00:19:25,039
to the table

472
00:19:25,039 --> 00:19:27,120
i think we we now have a pretty good

473
00:19:27,120 --> 00:19:30,720
understanding of a push model or shift

474
00:19:30,720 --> 00:19:33,360
model depending on how you think about

475
00:19:33,360 --> 00:19:34,160
it

476
00:19:34,160 --> 00:19:36,080
where you essentially have a stack of

477
00:19:36,080 --> 00:19:39,200
tables and pushing something on the

478
00:19:39,200 --> 00:19:40,960
stack

479
00:19:40,960 --> 00:19:41,880
means that

480
00:19:41,880 --> 00:19:43,280
[Music]

481
00:19:43,280 --> 00:19:46,960
you get control over the lowest numbers

482
00:19:46,960 --> 00:19:49,280
in the various reference and various

483
00:19:49,280 --> 00:19:52,960
referral encodings encodings

484
00:19:52,960 --> 00:19:56,559
um and push the existing table entries

485
00:19:56,559 --> 00:19:57,440
up

486
00:19:57,440 --> 00:20:00,480
uh to higher numbers

487
00:20:00,480 --> 00:20:02,480
so i think that that is now well

488
00:20:02,480 --> 00:20:04,559
understood if maybe

489
00:20:04,559 --> 00:20:07,280
not fully described so that that's

490
00:20:07,280 --> 00:20:08,960
probably a place where at least

491
00:20:08,960 --> 00:20:10,559
editorial work

492
00:20:10,559 --> 00:20:12,799
is needed

493
00:20:12,799 --> 00:20:13,760
and

494
00:20:13,760 --> 00:20:16,320
basically what i think we

495
00:20:16,320 --> 00:20:18,720
should be doing

496
00:20:18,720 --> 00:20:21,360
in the base document

497
00:20:21,360 --> 00:20:22,799
is um

498
00:20:22,799 --> 00:20:24,240
provide

499
00:20:24,240 --> 00:20:28,080
um the referrers of course um so we we

500
00:20:28,080 --> 00:20:30,240
have uh allocated

501
00:20:30,240 --> 00:20:32,799
tags and and simple items for sharing

502
00:20:32,799 --> 00:20:33,679
for

503
00:20:33,679 --> 00:20:37,360
adding prefixes and for adding suffixes

504
00:20:37,360 --> 00:20:41,039
we describe the pad table model

505
00:20:41,039 --> 00:20:43,679
including the push mechanism

506
00:20:43,679 --> 00:20:45,679
and we probably should describe this in

507
00:20:45,679 --> 00:20:48,400
a way that we can add

508
00:20:48,400 --> 00:20:51,919
future kinds of referrers

509
00:20:51,919 --> 00:20:53,360
for instance

510
00:20:53,360 --> 00:20:56,640
using the record or template proposals

511
00:20:56,640 --> 00:20:58,960
so the model is extensible but we only

512
00:20:58,960 --> 00:21:01,120
fill it in for the three kinds share

513
00:21:01,120 --> 00:21:04,158
prefix and suffix

514
00:21:04,240 --> 00:21:08,240
we add a basic table setup tag that is

515
00:21:08,240 --> 00:21:10,720
making use of the push model and pushes

516
00:21:10,720 --> 00:21:13,679
to the share prefix and suffix

517
00:21:13,679 --> 00:21:15,120
tables

518
00:21:15,120 --> 00:21:17,760
that that's pretty much already there it

519
00:21:17,760 --> 00:21:19,679
probably just has to be qualified as

520
00:21:19,679 --> 00:21:21,679
something that that is just one way to

521
00:21:21,679 --> 00:21:23,280
do things

522
00:21:23,280 --> 00:21:26,880
and then we provide a framework

523
00:21:26,880 --> 00:21:30,640
for defining more specific setup tags

524
00:21:30,640 --> 00:21:32,559
uh where

525
00:21:32,559 --> 00:21:33,520
um

526
00:21:33,520 --> 00:21:36,559
i think we we should foresee two kinds

527
00:21:36,559 --> 00:21:38,400
of setup takes but of course it it's

528
00:21:38,400 --> 00:21:40,080
always possible to define other texts

529
00:21:40,080 --> 00:21:41,679
that's

530
00:21:41,679 --> 00:21:42,480
just

531
00:21:42,480 --> 00:21:44,880
these are the two that i expect we will

532
00:21:44,880 --> 00:21:47,200
make a lot of use of

533
00:21:47,200 --> 00:21:49,679
one is an implicit reference

534
00:21:49,679 --> 00:21:52,799
so if an application protocol defines a

535
00:21:52,799 --> 00:21:54,480
dictionary

536
00:21:54,480 --> 00:21:57,440
um like we we did 20 years ago with the

537
00:21:57,440 --> 00:21:59,360
the sip

538
00:21:59,360 --> 00:22:02,640
encoding zip compression

539
00:22:02,640 --> 00:22:05,840
dictionary there is an rfc that has the

540
00:22:05,840 --> 00:22:07,039
the

541
00:22:07,039 --> 00:22:09,679
bytes of the dictionary

542
00:22:09,679 --> 00:22:11,280
in it

543
00:22:11,280 --> 00:22:13,760
similar here you would write in the

544
00:22:13,760 --> 00:22:16,159
specification that that

545
00:22:16,159 --> 00:22:18,240
allocates this tag

546
00:22:18,240 --> 00:22:20,400
the actual table

547
00:22:20,400 --> 00:22:21,200
that

548
00:22:21,200 --> 00:22:22,880
would be pushed

549
00:22:22,880 --> 00:22:24,480
on to

550
00:22:24,480 --> 00:22:26,400
this push model

551
00:22:26,400 --> 00:22:28,000
for tables

552
00:22:28,000 --> 00:22:30,000
so the advantage of course is that you

553
00:22:30,000 --> 00:22:33,039
can have very very short

554
00:22:33,039 --> 00:22:35,120
setup tags

555
00:22:35,120 --> 00:22:36,799
if the application

556
00:22:36,799 --> 00:22:39,280
requires that

557
00:22:39,280 --> 00:22:42,320
and you you don't have to do complicated

558
00:22:42,320 --> 00:22:44,720
lookups it's really just a tag

559
00:22:44,720 --> 00:22:46,720
when you implement a specific

560
00:22:46,720 --> 00:22:47,919
application

561
00:22:47,919 --> 00:22:50,159
uh then you implement the tag for that

562
00:22:50,159 --> 00:22:51,520
as well

563
00:22:51,520 --> 00:22:53,039
and then you have your application

564
00:22:53,039 --> 00:22:56,799
specific dictionary included

565
00:22:56,799 --> 00:22:58,640
um so this this is kind of for

566
00:22:58,640 --> 00:23:01,280
standardized dictionaries

567
00:23:01,280 --> 00:23:02,559
where standardization doesn't

568
00:23:02,559 --> 00:23:04,720
necessarily mean going through isg but

569
00:23:04,720 --> 00:23:05,679
somebody

570
00:23:05,679 --> 00:23:07,440
makes the effort and

571
00:23:07,440 --> 00:23:09,840
writes a specification that

572
00:23:09,840 --> 00:23:12,799
then registers a tag

573
00:23:12,799 --> 00:23:13,840
and

574
00:23:13,840 --> 00:23:16,159
the other part of the framework should

575
00:23:16,159 --> 00:23:18,640
be hashed references

576
00:23:18,640 --> 00:23:22,400
so the the table said setup tag

577
00:23:22,400 --> 00:23:24,880
uh would include

578
00:23:24,880 --> 00:23:27,280
um a hash value

579
00:23:27,280 --> 00:23:30,559
and probably also a cosy algorithm

580
00:23:30,559 --> 00:23:32,799
identifier because the hash algorithm

581
00:23:32,799 --> 00:23:34,799
identifier

582
00:23:34,799 --> 00:23:37,360
to

583
00:23:37,360 --> 00:23:39,919
explain how the hashing is supposed

584
00:23:39,919 --> 00:23:42,720
supposed to be done

585
00:23:42,720 --> 00:23:45,120
hashing of course needs a specification

586
00:23:45,120 --> 00:23:47,919
for how the hash input actually

587
00:23:47,919 --> 00:23:51,120
should look like and

588
00:23:51,120 --> 00:23:54,320
that i think should be pretty obvious by

589
00:23:54,320 --> 00:23:56,320
by simply hashing

590
00:23:56,320 --> 00:23:58,640
the simple deterministic encoding of an

591
00:23:58,640 --> 00:23:59,919
equivalent

592
00:23:59,919 --> 00:24:03,120
basic table setup tag

593
00:24:03,120 --> 00:24:04,720
um so

594
00:24:04,720 --> 00:24:07,440
we don't have to invent a lot of

595
00:24:07,440 --> 00:24:09,520
mechanism for this we have everything we

596
00:24:09,520 --> 00:24:11,679
just have to put it together

597
00:24:11,679 --> 00:24:13,279
in the right way

598
00:24:13,279 --> 00:24:16,960
and of course an implementation might

599
00:24:16,960 --> 00:24:19,600
just implement a number of those hashed

600
00:24:19,600 --> 00:24:21,679
references or it might have a way to

601
00:24:21,679 --> 00:24:23,520
actually get that attached reference

602
00:24:23,520 --> 00:24:24,880
somewhere

603
00:24:24,880 --> 00:24:25,840
um

604
00:24:25,840 --> 00:24:28,240
that's not really something that the the

605
00:24:28,240 --> 00:24:30,640
data format defines it just says if you

606
00:24:30,640 --> 00:24:33,039
have

607
00:24:33,039 --> 00:24:34,720
a hashed

608
00:24:34,720 --> 00:24:36,559
setup tag

609
00:24:36,559 --> 00:24:37,760
with this

610
00:24:37,760 --> 00:24:39,360
hash

611
00:24:39,360 --> 00:24:40,240
then

612
00:24:40,240 --> 00:24:42,400
insert it here

613
00:24:42,400 --> 00:24:46,000
so that's my plan for the base document

614
00:24:46,000 --> 00:24:48,159
and then we can of course go ahead and

615
00:24:48,159 --> 00:24:48,560
do

616
00:24:48,560 --> 00:24:49,760
[Music]

617
00:24:49,760 --> 00:24:53,279
circumfix and template and record and

618
00:24:53,279 --> 00:24:55,679
whatever kinds of

619
00:24:55,679 --> 00:24:59,640
packing we come up with

620
00:25:09,279 --> 00:25:12,279
comments

621
00:25:19,440 --> 00:25:21,840
just for for understanding

622
00:25:21,840 --> 00:25:22,640
the

623
00:25:22,640 --> 00:25:23,600
um

624
00:25:23,600 --> 00:25:27,120
records would then be a use case of

625
00:25:27,120 --> 00:25:29,200
of pact and

626
00:25:29,200 --> 00:25:31,760
whoever defines the records would set up

627
00:25:31,760 --> 00:25:34,080
the table to have these specific

628
00:25:34,080 --> 00:25:35,200
semantics

629
00:25:35,200 --> 00:25:37,039
is that the intention

630
00:25:37,039 --> 00:25:38,159
i don't know

631
00:25:38,159 --> 00:25:39,520
okay

632
00:25:39,520 --> 00:25:42,640
um i think the record proposal in in its

633
00:25:42,640 --> 00:25:44,080
standalone form

634
00:25:44,080 --> 00:25:46,480
uh as it is defined today maybe with a

635
00:25:46,480 --> 00:25:48,240
couple of tweaks that that i've

636
00:25:48,240 --> 00:25:50,720
identified memory that's actually viable

637
00:25:50,720 --> 00:25:52,799
so we wouldn't need

638
00:25:52,799 --> 00:25:55,279
to put it into the

639
00:25:55,279 --> 00:25:57,039
framework

640
00:25:57,039 --> 00:26:00,159
but maybe we want to so

641
00:26:00,159 --> 00:26:02,640
i think that that depends a lot on on

642
00:26:02,640 --> 00:26:04,960
what applications this

643
00:26:04,960 --> 00:26:07,760
tag will be used

644
00:26:08,080 --> 00:26:09,279
thank you

645
00:26:09,279 --> 00:26:11,200
hank

646
00:26:11,200 --> 00:26:13,360
yeah hi uh thank you apparently this is

647
00:26:13,360 --> 00:26:14,880
hank um

648
00:26:14,880 --> 00:26:17,679
so unfortunately brandon cannot uh here

649
00:26:17,679 --> 00:26:20,159
with us today uh due to a

650
00:26:20,159 --> 00:26:21,760
time conflict

651
00:26:21,760 --> 00:26:22,559
but

652
00:26:22,559 --> 00:26:25,760
i want to highlight um that

653
00:26:25,760 --> 00:26:28,320
i think it would be really cool

654
00:26:28,320 --> 00:26:31,360
to use the uh

655
00:26:31,360 --> 00:26:34,080
now um finalizing

656
00:26:34,080 --> 00:26:37,600
suit manifest specification

657
00:26:37,600 --> 00:26:41,279
as an example for a siber pact

658
00:26:41,279 --> 00:26:43,360
i think that would be uh something we

659
00:26:43,360 --> 00:26:46,559
can start after this is uh moving out of

660
00:26:46,559 --> 00:26:47,520
the gate

661
00:26:47,520 --> 00:26:49,760
uh as because this will take some time

662
00:26:49,760 --> 00:26:51,760
but i think it is it would be an

663
00:26:51,760 --> 00:26:54,159
excellent uh exercise

664
00:26:54,159 --> 00:26:58,080
to to instantiate this uh in real life

665
00:26:58,080 --> 00:26:59,679
so can can you

666
00:26:59,679 --> 00:27:02,880
explain use as an example because that

667
00:27:02,880 --> 00:27:06,559
triggers some different neurons for me

668
00:27:06,559 --> 00:27:10,320
okay so i think that uh there is a lot

669
00:27:10,320 --> 00:27:12,000
of redundant

670
00:27:12,000 --> 00:27:16,000
references in in directives and and uh

671
00:27:16,000 --> 00:27:18,640
for example identify us for several

672
00:27:18,640 --> 00:27:20,720
things like classes or environments or

673
00:27:20,720 --> 00:27:22,799
software effectively

674
00:27:22,799 --> 00:27:24,559
in the suit manifest

675
00:27:24,559 --> 00:27:25,520
and

676
00:27:25,520 --> 00:27:28,480
my assumption is that and and brenton

677
00:27:28,480 --> 00:27:30,559
really works on trimming down every

678
00:27:30,559 --> 00:27:31,840
single bite

679
00:27:31,840 --> 00:27:35,279
and i think uh as the manifest is

680
00:27:35,279 --> 00:27:36,159
already

681
00:27:36,159 --> 00:27:38,960
pretty much compact uh i assume that the

682
00:27:38,960 --> 00:27:40,240
packed uh

683
00:27:40,240 --> 00:27:42,159
approach will still

684
00:27:42,159 --> 00:27:45,600
uh yield a significant reduction of size

685
00:27:45,600 --> 00:27:48,320
so so that is something i would like to

686
00:27:48,320 --> 00:27:52,080
just uh well uh um try out

687
00:27:52,080 --> 00:27:54,080
yeah i'm just wondering whether you want

688
00:27:54,080 --> 00:27:56,559
to use it as an example in the document

689
00:27:56,559 --> 00:27:58,720
no no no no

690
00:27:58,720 --> 00:28:01,360
so it would be the suit 2.0 or the

691
00:28:01,360 --> 00:28:04,000
suit-packed manifest you know

692
00:28:04,000 --> 00:28:05,600
because we can't do this with the rear

693
00:28:05,600 --> 00:28:07,440
one if you delay this any more further

694
00:28:07,440 --> 00:28:09,840
somewhere that throws stones at me so so

695
00:28:09,840 --> 00:28:12,320
that that isn't possible but uh but

696
00:28:12,320 --> 00:28:14,640
immediately as this is stable and out i

697
00:28:14,640 --> 00:28:18,080
would like immediately do it with pact

698
00:28:18,080 --> 00:28:20,720
to be honest

699
00:28:20,880 --> 00:28:22,000
yeah

700
00:28:22,000 --> 00:28:23,520
okay one one interesting question of

701
00:28:23,520 --> 00:28:25,600
course would also be whether you can

702
00:28:25,600 --> 00:28:27,039
simply use

703
00:28:27,039 --> 00:28:30,080
suit as is plus peg as is and get

704
00:28:30,080 --> 00:28:32,080
anything useful out of that

705
00:28:32,080 --> 00:28:33,919
yeah that is that is part of the

706
00:28:33,919 --> 00:28:37,679
experiment so uh we have to uh

707
00:28:37,679 --> 00:28:40,640
find out so but again brandon and i will

708
00:28:40,640 --> 00:28:43,440
not be doing this this year to be honest

709
00:28:43,440 --> 00:28:44,880
but but

710
00:28:44,880 --> 00:28:45,919
but

711
00:28:45,919 --> 00:28:48,559
maybe around the next hackathon before

712
00:28:48,559 --> 00:28:51,840
the itf in in some hopefully actual

713
00:28:51,840 --> 00:28:56,120
location that would be nice

714
00:29:02,080 --> 00:29:04,480
okay so that maybe leads into to a

715
00:29:04,480 --> 00:29:05,760
general

716
00:29:05,760 --> 00:29:08,640
uh request for

717
00:29:08,640 --> 00:29:11,039
data items so if if you have any data

718
00:29:11,039 --> 00:29:13,360
items that are not entirely trivially

719
00:29:13,360 --> 00:29:14,880
and that would

720
00:29:14,880 --> 00:29:18,000
maybe benefit uh from sibo pact we might

721
00:29:18,000 --> 00:29:20,399
want to collect these data items

722
00:29:20,399 --> 00:29:23,039
uh in a repository so we understand what

723
00:29:23,039 --> 00:29:25,360
what sibo pack does to them

724
00:29:25,360 --> 00:29:29,360
and and of course also how how good

725
00:29:29,360 --> 00:29:31,679
different packer implementations would

726
00:29:31,679 --> 00:29:34,080
be because the packer implementation can

727
00:29:34,080 --> 00:29:35,200
have

728
00:29:35,200 --> 00:29:37,440
different qualities of implementation

729
00:29:37,440 --> 00:29:42,640
that there is no one way to pick things

730
00:29:49,919 --> 00:29:52,159
christian here brief question on packer

731
00:29:52,159 --> 00:29:54,159
implementations do you expect these to

732
00:29:54,159 --> 00:29:55,440
be

733
00:29:55,440 --> 00:29:58,000
widely used because my impression was

734
00:29:58,000 --> 00:30:00,320
that the

735
00:30:00,320 --> 00:30:02,320
that most of the most of the time

736
00:30:02,320 --> 00:30:04,480
packing would be done in a more static

737
00:30:04,480 --> 00:30:06,559
way so that the application would

738
00:30:06,559 --> 00:30:08,799
use its information on the structure

739
00:30:08,799 --> 00:30:11,520
already to create the tags do you think

740
00:30:11,520 --> 00:30:12,640
that

741
00:30:12,640 --> 00:30:15,279
kind of um free form compression is

742
00:30:15,279 --> 00:30:16,799
something that

743
00:30:16,799 --> 00:30:19,200
we need to expect in the

744
00:30:19,200 --> 00:30:22,840
um in applications

745
00:30:24,080 --> 00:30:26,559
that that is a good question

746
00:30:26,559 --> 00:30:28,080
so

747
00:30:28,080 --> 00:30:28,880
uh

748
00:30:28,880 --> 00:30:31,039
if you have a

749
00:30:31,039 --> 00:30:32,640
generic picker

750
00:30:32,640 --> 00:30:34,390
you probably should call them this way

751
00:30:34,390 --> 00:30:35,600
[Music]

752
00:30:35,600 --> 00:30:37,840
then you may save some time in your

753
00:30:37,840 --> 00:30:41,120
application actually doing these things

754
00:30:41,120 --> 00:30:43,440
but of course it requires to actually

755
00:30:43,440 --> 00:30:45,679
build the full structure and then submit

756
00:30:45,679 --> 00:30:47,840
it to the packer so it it's not

757
00:30:47,840 --> 00:30:49,279
something you would do in a constrained

758
00:30:49,279 --> 00:30:50,799
implementation in a constrained

759
00:30:50,799 --> 00:30:52,880
limitation you would always

760
00:30:52,880 --> 00:30:54,799
generate a sibo

761
00:30:54,799 --> 00:30:56,880
pact

762
00:30:56,880 --> 00:30:58,080
right from the

763
00:30:58,080 --> 00:31:00,799
data that you have

764
00:31:00,799 --> 00:31:04,000
so yes i see some some areas where

765
00:31:04,000 --> 00:31:07,679
generic packers might be useful

766
00:31:07,679 --> 00:31:09,919
and that's why i think it's a good idea

767
00:31:09,919 --> 00:31:12,799
to collect some some

768
00:31:12,799 --> 00:31:15,919
best practices for building them

769
00:31:15,919 --> 00:31:16,799
but

770
00:31:16,799 --> 00:31:18,150
also the

771
00:31:18,150 --> 00:31:19,679
[Music]

772
00:31:19,679 --> 00:31:22,159
how do you say that packing friendly

773
00:31:22,159 --> 00:31:25,519
sibo encoder apis

774
00:31:25,519 --> 00:31:27,840
might also be an interesting

775
00:31:27,840 --> 00:31:33,080
subject of doing hacking work

776
00:31:42,399 --> 00:31:45,120
yeah just about quick question because i

777
00:31:45,120 --> 00:31:47,600
have no gut feeling for this

778
00:31:47,600 --> 00:31:48,640
uh

779
00:31:48,640 --> 00:31:50,960
how

780
00:31:51,120 --> 00:31:54,640
easy or effective would be an auto pack

781
00:31:54,640 --> 00:31:58,320
feature in contrast to a manual

782
00:31:58,320 --> 00:31:59,679
manually uh

783
00:31:59,679 --> 00:32:02,240
i'm going to say configured packing of

784
00:32:02,240 --> 00:32:05,600
content where you will maybe guide

785
00:32:05,600 --> 00:32:07,279
that a little bit

786
00:32:07,279 --> 00:32:09,360
should be this almost the same in the

787
00:32:09,360 --> 00:32:10,640
end

788
00:32:10,640 --> 00:32:12,320
well that depends on how much machine

789
00:32:12,320 --> 00:32:14,720
learning and and ai you put into your

790
00:32:14,720 --> 00:32:17,200
packer okay

791
00:32:17,200 --> 00:32:18,000
but

792
00:32:18,000 --> 00:32:22,080
generally writing compressors is is a

793
00:32:22,080 --> 00:32:25,519
a pretty well understood

794
00:32:25,519 --> 00:32:26,960
area of work

795
00:32:26,960 --> 00:32:28,960
so i would expect that if you write a

796
00:32:28,960 --> 00:32:30,960
generic packer

797
00:32:30,960 --> 00:32:34,720
that will often be as good

798
00:32:34,720 --> 00:32:36,720
as your manual

799
00:32:36,720 --> 00:32:37,919
packing

800
00:32:37,919 --> 00:32:39,279
scheme is

801
00:32:39,279 --> 00:32:41,760
and it will also find some opportunities

802
00:32:41,760 --> 00:32:43,200
for packing that you simply didn't

803
00:32:43,200 --> 00:32:46,320
address in your manual

804
00:32:47,440 --> 00:32:51,200
in fact it might be better

805
00:32:51,600 --> 00:32:53,760
maybe not compared to brandon but but in

806
00:32:53,760 --> 00:32:57,158
general yes

807
00:33:05,120 --> 00:33:08,120
good

808
00:33:10,159 --> 00:33:12,799
on the queue

809
00:33:13,279 --> 00:33:16,320
so let's go on

810
00:33:16,320 --> 00:33:19,840
i don't think that there are

811
00:33:19,840 --> 00:33:22,159
there are prepared slides for the for

812
00:33:22,159 --> 00:33:25,120
the um for the edn is there something

813
00:33:25,120 --> 00:33:27,600
that that you'd like to see there or

814
00:33:27,600 --> 00:33:29,519
um shall we keep that for

815
00:33:29,519 --> 00:33:32,080
for basically last um for the aop

816
00:33:32,080 --> 00:33:33,360
section

817
00:33:33,360 --> 00:33:35,679
and so let's do it now

818
00:33:35,679 --> 00:33:38,880
um so we had some some uh positive

819
00:33:38,880 --> 00:33:41,200
feedback during the interim

820
00:33:41,200 --> 00:33:43,919
um we haven't implemented that yet which

821
00:33:43,919 --> 00:33:47,279
always makes me a little bit hesitant

822
00:33:47,279 --> 00:33:49,279
of of going for something like a working

823
00:33:49,279 --> 00:33:51,679
glass troll hi barry

824
00:33:51,679 --> 00:33:52,480
but

825
00:33:52,480 --> 00:33:53,600
we might

826
00:33:53,600 --> 00:33:55,679
go for adoption that that certainly

827
00:33:55,679 --> 00:34:00,200
would be possible at this stage

828
00:34:12,000 --> 00:34:14,399
um so maybe just a brief um show of

829
00:34:14,399 --> 00:34:15,760
hands around

830
00:34:15,760 --> 00:34:20,000
around the room given that we have um

831
00:34:20,000 --> 00:34:21,918
almost 20 participants um could you

832
00:34:21,918 --> 00:34:24,480
please indicate uh using the uh show of

833
00:34:24,480 --> 00:34:26,320
hands tool whether you have

834
00:34:26,320 --> 00:34:28,719
um well whether you're interested in

835
00:34:28,719 --> 00:34:31,359
that document in in

836
00:34:31,359 --> 00:34:33,599
for working the working group or well i

837
00:34:33,599 --> 00:34:36,879
just have to find the right

838
00:34:40,159 --> 00:34:42,960
but i take this as kind of a preliminary

839
00:34:42,960 --> 00:34:45,119
show of interest in the in the document

840
00:34:45,119 --> 00:34:46,480
this is not

841
00:34:46,480 --> 00:34:48,800
on its own an option call that will be

842
00:34:48,800 --> 00:34:50,320
later on the mailing list

843
00:34:50,320 --> 00:34:54,480
but this is just a brief um

844
00:34:54,480 --> 00:34:56,320
brief thing to to guard the interest in

845
00:34:56,320 --> 00:34:59,760
the room and i see a lot of hands going

846
00:34:59,760 --> 00:35:03,640
up going up here

847
00:35:05,280 --> 00:35:06,000
so

848
00:35:06,000 --> 00:35:06,880
um

849
00:35:06,880 --> 00:35:07,760
um

850
00:35:07,760 --> 00:35:10,240
in the minutes please note that this is

851
00:35:10,240 --> 00:35:12,720
um even within the short um within a

852
00:35:12,720 --> 00:35:15,440
short um show of hands uh showing 7 out

853
00:35:15,440 --> 00:35:18,960
of 20 uh raised and none not raised so

854
00:35:18,960 --> 00:35:20,560
to me this shows that there is interest

855
00:35:20,560 --> 00:35:21,920
in the working group

856
00:35:21,920 --> 00:35:25,200
and i think i'll um we can

857
00:35:25,200 --> 00:35:27,200
handle the rest of the failing list

858
00:35:27,200 --> 00:35:28,160
thank you

859
00:35:28,160 --> 00:35:31,839
next item please

860
00:35:35,280 --> 00:35:36,640
okay

861
00:35:36,640 --> 00:35:40,160
so let's go to city 2.0

862
00:35:40,160 --> 00:35:40,960
um

863
00:35:40,960 --> 00:35:43,839
we have talked about that in the in the

864
00:35:43,839 --> 00:35:45,920
last uh

865
00:35:45,920 --> 00:35:48,000
full itf meeting

866
00:35:48,000 --> 00:35:49,520
111

867
00:35:49,520 --> 00:35:54,240
and i gave some some hints for how this

868
00:35:54,240 --> 00:35:55,760
and that

869
00:35:55,760 --> 00:35:59,040
particular piece of it might look like

870
00:35:59,040 --> 00:36:01,440
and what i want to do today is maybe

871
00:36:01,440 --> 00:36:04,240
give a little bit more structured

872
00:36:04,240 --> 00:36:05,839
uh overview

873
00:36:05,839 --> 00:36:09,920
over where i think cda 2.0 should go

874
00:36:09,920 --> 00:36:10,800
and

875
00:36:10,800 --> 00:36:13,680
well we have done a few low hanging

876
00:36:13,680 --> 00:36:15,040
fruit

877
00:36:15,040 --> 00:36:16,640
in the

878
00:36:16,640 --> 00:36:19,119
cdi control

879
00:36:19,119 --> 00:36:21,359
specification which gives us a few

880
00:36:21,359 --> 00:36:24,160
things that that already good on the

881
00:36:24,160 --> 00:36:26,800
range 2.0 but there of course we only

882
00:36:26,800 --> 00:36:27,839
could do

883
00:36:27,839 --> 00:36:29,760
things that didn't actually require

884
00:36:29,760 --> 00:36:32,640
changing cddl we just used its extension

885
00:36:32,640 --> 00:36:34,160
points

886
00:36:34,160 --> 00:36:36,640
and what i'm describing now really is

887
00:36:36,640 --> 00:36:40,480
going beyond using extension points and

888
00:36:40,480 --> 00:36:44,240
to me it seems that there are two

889
00:36:44,240 --> 00:36:46,640
aspects that

890
00:36:46,640 --> 00:36:49,599
are also low hanging fruit but

891
00:36:49,599 --> 00:36:51,520
low hanging on the way of actually

892
00:36:51,520 --> 00:36:54,000
extending the language

893
00:36:54,000 --> 00:36:56,079
and one is annotation and the other one

894
00:36:56,079 --> 00:36:58,240
is composition

895
00:36:58,240 --> 00:37:00,720
so let me talk about those starting with

896
00:37:00,720 --> 00:37:02,880
composition

897
00:37:02,880 --> 00:37:04,720
so right now

898
00:37:04,720 --> 00:37:06,079
cddl

899
00:37:06,079 --> 00:37:08,800
works with a single file i mean we don't

900
00:37:08,800 --> 00:37:12,880
even talk about files because

901
00:37:13,200 --> 00:37:15,520
there is no file structure so there's no

902
00:37:15,520 --> 00:37:17,520
reason to talk about files but in

903
00:37:17,520 --> 00:37:19,760
practice you have a single cdl file

904
00:37:19,760 --> 00:37:21,680
maybe you concatenate that together out

905
00:37:21,680 --> 00:37:24,240
of several input files

906
00:37:24,240 --> 00:37:26,400
but essentially the thing is a sequence

907
00:37:26,400 --> 00:37:27,520
of rules

908
00:37:27,520 --> 00:37:30,320
and the first rule

909
00:37:30,320 --> 00:37:33,440
which must be a type and not a group

910
00:37:33,440 --> 00:37:37,280
is the entry point so

911
00:37:37,280 --> 00:37:40,000
at that service value the

912
00:37:40,000 --> 00:37:42,000
whole cdda file

913
00:37:42,000 --> 00:37:43,599
defines

914
00:37:43,599 --> 00:37:44,560
one

915
00:37:44,560 --> 00:37:46,960
data type

916
00:37:46,960 --> 00:37:48,320
and

917
00:37:48,320 --> 00:37:51,839
this this has been quite useful but uh

918
00:37:51,839 --> 00:37:54,960
we probably want to go beyond that

919
00:37:54,960 --> 00:37:57,520
and i think what i'm here most is that

920
00:37:57,520 --> 00:38:00,320
we actually want to build libraries

921
00:38:00,320 --> 00:38:01,839
uh which are

922
00:38:01,839 --> 00:38:06,000
ctdl files that export

923
00:38:06,000 --> 00:38:07,599
one or more

924
00:38:07,599 --> 00:38:10,240
rules well typically types but might be

925
00:38:10,240 --> 00:38:12,160
groups as well

926
00:38:12,160 --> 00:38:13,040
and

927
00:38:13,040 --> 00:38:15,599
we also want to be able to import those

928
00:38:15,599 --> 00:38:16,640
rules

929
00:38:16,640 --> 00:38:19,520
from another city specification whether

930
00:38:19,520 --> 00:38:21,920
that was intended as a library or it's a

931
00:38:21,920 --> 00:38:23,760
standalone

932
00:38:23,760 --> 00:38:25,760
cdl specification doesn't make a big

933
00:38:25,760 --> 00:38:27,040
difference

934
00:38:27,040 --> 00:38:28,400
so we want to

935
00:38:28,400 --> 00:38:30,839
have an export interface and an import

936
00:38:30,839 --> 00:38:32,800
interface and

937
00:38:32,800 --> 00:38:35,200
to to be able to do this it probably

938
00:38:35,200 --> 00:38:36,640
makes sense to

939
00:38:36,640 --> 00:38:38,640
actually be able to name

940
00:38:38,640 --> 00:38:40,160
the library

941
00:38:40,160 --> 00:38:42,960
um so when you do an import you you have

942
00:38:42,960 --> 00:38:44,640
something you can talk about what you

943
00:38:44,640 --> 00:38:47,200
are importing and

944
00:38:47,200 --> 00:38:50,400
you also want to control the naming of

945
00:38:50,400 --> 00:38:53,200
the exported or imported

946
00:38:53,200 --> 00:38:55,839
rule so an existing city aspect might

947
00:38:55,839 --> 00:38:57,920
want to export something but

948
00:38:57,920 --> 00:39:00,720
maybe it has a very short name in in

949
00:39:00,720 --> 00:39:03,200
that spec and there are reasons why you

950
00:39:03,200 --> 00:39:04,880
don't want to change it i come to those

951
00:39:04,880 --> 00:39:05,920
reasons

952
00:39:05,920 --> 00:39:08,079
and you want to export it

953
00:39:08,079 --> 00:39:11,119
under a more useful

954
00:39:11,119 --> 00:39:14,960
name or when you import something that

955
00:39:14,960 --> 00:39:16,480
something may have

956
00:39:16,480 --> 00:39:20,160
a very short name in its context

957
00:39:20,160 --> 00:39:22,640
but in the context where you are pulling

958
00:39:22,640 --> 00:39:25,599
it into that short name is misleading

959
00:39:25,599 --> 00:39:27,359
so if you import something that has the

960
00:39:27,359 --> 00:39:28,480
the

961
00:39:28,480 --> 00:39:30,640
rule name signature and

962
00:39:30,640 --> 00:39:32,160
you have a

963
00:39:32,160 --> 00:39:34,000
specification that has three different

964
00:39:34,000 --> 00:39:35,359
kinds of signatures you don't want to

965
00:39:35,359 --> 00:39:37,040
call it signature you

966
00:39:37,040 --> 00:39:39,520
will want to call it full signature

967
00:39:39,520 --> 00:39:40,839
if it's coming from the full

968
00:39:40,839 --> 00:39:43,760
specification so there is some manage

969
00:39:43,760 --> 00:39:45,680
management of names

970
00:39:45,680 --> 00:39:48,560
uh needed

971
00:39:48,800 --> 00:39:50,640
so

972
00:39:50,640 --> 00:39:52,320
i have shown a

973
00:39:52,320 --> 00:39:56,560
simple way of doing implicit importing

974
00:39:56,560 --> 00:39:59,280
so we might have a convention that

975
00:39:59,280 --> 00:40:02,560
causes a tool to actually

976
00:40:02,560 --> 00:40:05,599
find a library and then reference things

977
00:40:05,599 --> 00:40:09,440
from there so rfc 1990.oid

978
00:40:09,440 --> 00:40:11,280
might be something that that at some

979
00:40:11,280 --> 00:40:13,760
point every cdl

980
00:40:13,760 --> 00:40:15,839
tool will understand so you don't have

981
00:40:15,839 --> 00:40:17,839
to to do lots of

982
00:40:17,839 --> 00:40:19,760
things to actually

983
00:40:19,760 --> 00:40:22,000
get it and if you actually need a short

984
00:40:22,000 --> 00:40:24,000
name you can simply write another rule

985
00:40:24,000 --> 00:40:27,200
and say oid equals rfc1990.id

986
00:40:27,200 --> 00:40:28,160
and

987
00:40:28,160 --> 00:40:29,760
um then you

988
00:40:29,760 --> 00:40:31,599
will have a short name for for this

989
00:40:31,599 --> 00:40:32,640
thing so

990
00:40:32,640 --> 00:40:34,960
the implicit mechanism would be an easy

991
00:40:34,960 --> 00:40:36,319
way

992
00:40:36,319 --> 00:40:38,640
to do things without

993
00:40:38,640 --> 00:40:41,839
completely leaving the cdl 1.0

994
00:40:41,839 --> 00:40:43,520
um envelope

995
00:40:43,520 --> 00:40:45,280
but of course the tool has to support

996
00:40:45,280 --> 00:40:46,720
doing doing this

997
00:40:46,720 --> 00:40:48,319
lookup

998
00:40:48,319 --> 00:40:51,280
and the the more powerful explicit

999
00:40:51,280 --> 00:40:52,960
import

1000
00:40:52,960 --> 00:40:56,400
would identify a library

1001
00:40:56,400 --> 00:41:00,319
maybe identify a versioned sequence

1002
00:41:00,319 --> 00:41:03,599
using a semantic versioning reference

1003
00:41:03,599 --> 00:41:07,680
so that that's a very popular subject

1004
00:41:07,680 --> 00:41:09,760
and i think the young people have been

1005
00:41:09,760 --> 00:41:12,480
discussing this for about two years now

1006
00:41:12,480 --> 00:41:14,720
so maybe we can actually steal something

1007
00:41:14,720 --> 00:41:16,319
from them

1008
00:41:16,319 --> 00:41:17,359
and

1009
00:41:17,359 --> 00:41:19,680
then when you have identified the

1010
00:41:19,680 --> 00:41:21,520
library you want to manage

1011
00:41:21,520 --> 00:41:24,319
what names are introduced i talked about

1012
00:41:24,319 --> 00:41:26,400
name management potential conflicts and

1013
00:41:26,400 --> 00:41:29,359
so on so this will be the explicit

1014
00:41:29,359 --> 00:41:31,760
uh import interface

1015
00:41:31,760 --> 00:41:33,520
i'm not putting an example in here

1016
00:41:33,520 --> 00:41:36,160
because i come to the syntax

1017
00:41:36,160 --> 00:41:37,040
in a

1018
00:41:37,040 --> 00:41:39,520
few slides

1019
00:41:39,520 --> 00:41:40,720
so the

1020
00:41:40,720 --> 00:41:42,079
export

1021
00:41:42,079 --> 00:41:44,880
interface would provide a way to name

1022
00:41:44,880 --> 00:41:47,359
the library so you don't just have an

1023
00:41:47,359 --> 00:41:48,480
anonymous

1024
00:41:48,480 --> 00:41:52,160
city a file but the cda file itself

1025
00:41:52,160 --> 00:41:53,839
says

1026
00:41:53,839 --> 00:41:56,640
under which name it expects to be

1027
00:41:56,640 --> 00:41:58,319
imported

1028
00:41:58,319 --> 00:42:01,520
um gives the version number probably

1029
00:42:01,520 --> 00:42:03,839
semantic version number

1030
00:42:03,839 --> 00:42:06,560
and you probably also want to identify

1031
00:42:06,560 --> 00:42:08,079
the rule names

1032
00:42:08,079 --> 00:42:09,119
that

1033
00:42:09,119 --> 00:42:12,319
this library intends to export

1034
00:42:12,319 --> 00:42:15,440
so this is not not a required list for

1035
00:42:15,440 --> 00:42:17,839
the

1036
00:42:18,079 --> 00:42:20,400
importer it's just the default set so if

1037
00:42:20,400 --> 00:42:22,319
you just import the library without

1038
00:42:22,319 --> 00:42:24,400
saying anything else

1039
00:42:24,400 --> 00:42:28,079
you get this this exported word set

1040
00:42:28,079 --> 00:42:30,400
but you can import less and you also can

1041
00:42:30,400 --> 00:42:32,079
import more

1042
00:42:32,079 --> 00:42:35,040
so we are not not trying to do

1043
00:42:35,040 --> 00:42:37,599
protection of uh

1044
00:42:37,599 --> 00:42:39,599
class internals here

1045
00:42:39,599 --> 00:42:41,760
uh i mean if if you do that then you

1046
00:42:41,760 --> 00:42:44,400
know that you are doing something on

1047
00:42:44,400 --> 00:42:46,480
your own so if

1048
00:42:46,480 --> 00:42:49,280
the next version actually changes

1049
00:42:49,280 --> 00:42:51,359
the name of a rule then you have a

1050
00:42:51,359 --> 00:42:53,520
little problem but

1051
00:42:53,520 --> 00:42:56,240
in particular during development

1052
00:42:56,240 --> 00:42:58,960
of things that that may be a much too

1053
00:42:58,960 --> 00:43:01,920
useful thing to leave out

1054
00:43:01,920 --> 00:43:05,119
so um the the question of course is how

1055
00:43:05,119 --> 00:43:07,040
do we do the linkage

1056
00:43:07,040 --> 00:43:09,440
so somewhere on my laptop that there is

1057
00:43:09,440 --> 00:43:13,119
a cdfi that says it exports foo

1058
00:43:13,119 --> 00:43:15,359
and somebody else somewhere else there

1059
00:43:15,359 --> 00:43:16,480
is a

1060
00:43:16,480 --> 00:43:19,520
city aspect that says an imports foo

1061
00:43:19,520 --> 00:43:23,040
but how do the these two files actually

1062
00:43:23,040 --> 00:43:24,720
meet each other

1063
00:43:24,720 --> 00:43:25,680
and

1064
00:43:25,680 --> 00:43:27,839
one way of course is doing this outside

1065
00:43:27,839 --> 00:43:30,319
the specification

1066
00:43:30,319 --> 00:43:33,200
language so you essentially give some

1067
00:43:33,200 --> 00:43:36,079
cli parameters that

1068
00:43:36,079 --> 00:43:39,200
tell the tool that these

1069
00:43:39,200 --> 00:43:40,720
specifications

1070
00:43:40,720 --> 00:43:43,119
files are going to be used as the

1071
00:43:43,119 --> 00:43:44,160
library

1072
00:43:44,160 --> 00:43:47,440
files going into that other

1073
00:43:47,440 --> 00:43:49,200
specifications so that that's certainly

1074
00:43:49,200 --> 00:43:51,599
one way to do it and that that's again

1075
00:43:51,599 --> 00:43:55,599
useful during development when the

1076
00:43:55,599 --> 00:43:57,599
specification has become more

1077
00:43:57,599 --> 00:43:59,040
established

1078
00:43:59,040 --> 00:44:02,560
uh and maybe even standardized

1079
00:44:02,560 --> 00:44:04,960
it should be possible to to give a hint

1080
00:44:04,960 --> 00:44:06,880
inside the spec

1081
00:44:06,880 --> 00:44:08,960
for instance a ui that points to a

1082
00:44:08,960 --> 00:44:11,920
github repository or something

1083
00:44:11,920 --> 00:44:15,280
so you you don't have to

1084
00:44:15,280 --> 00:44:18,640
repeat all that information in every

1085
00:44:18,640 --> 00:44:23,319
call of a cdl tool

1086
00:44:24,560 --> 00:44:26,319
so i don't have a problem with

1087
00:44:26,319 --> 00:44:29,119
hardwiring github in here just as long

1088
00:44:29,119 --> 00:44:30,720
as we have other

1089
00:44:30,720 --> 00:44:31,920
ways of

1090
00:44:31,920 --> 00:44:34,839
referencing repositories as

1091
00:44:34,839 --> 00:44:37,119
well um

1092
00:44:37,119 --> 00:44:39,680
yeah name spacing um

1093
00:44:39,680 --> 00:44:42,800
that's probably the best way to handle

1094
00:44:42,800 --> 00:44:44,560
these these name

1095
00:44:44,560 --> 00:44:48,240
conflict and bad naming uh issues so rfc

1096
00:44:48,240 --> 00:44:51,599
1990. already already shows the idea of

1097
00:44:51,599 --> 00:44:53,920
a namespace so there is an rfc 1990

1098
00:44:53,920 --> 00:44:55,520
namespace

1099
00:44:55,520 --> 00:44:59,119
from which we import the oid

1100
00:44:59,119 --> 00:45:00,160
rule

1101
00:45:00,160 --> 00:45:03,440
and while we are added we could maybe

1102
00:45:03,440 --> 00:45:07,359
make the the one watch that

1103
00:45:07,359 --> 00:45:10,960
the that ad610 has where we have a

1104
00:45:10,960 --> 00:45:12,480
defined

1105
00:45:12,480 --> 00:45:16,079
prelude that is always imported

1106
00:45:16,079 --> 00:45:18,640
we could make this part of the model so

1107
00:45:18,640 --> 00:45:20,319
you actually get

1108
00:45:20,319 --> 00:45:21,920
control over that this is a little bit

1109
00:45:21,920 --> 00:45:24,960
like c plus plus using namespace std

1110
00:45:24,960 --> 00:45:26,880
um except that

1111
00:45:26,880 --> 00:45:28,880
uh you don't

1112
00:45:28,880 --> 00:45:30,400
um

1113
00:45:30,400 --> 00:45:32,720
the default is to actually do that and

1114
00:45:32,720 --> 00:45:34,480
you would have to do extra work to not

1115
00:45:34,480 --> 00:45:36,079
do that

1116
00:45:36,079 --> 00:45:37,119
and

1117
00:45:37,119 --> 00:45:40,079
maybe we actually want to to think about

1118
00:45:40,079 --> 00:45:41,119
some

1119
00:45:41,119 --> 00:45:44,079
mechanisms that allows you to

1120
00:45:44,079 --> 00:45:46,319
continue working when you have some some

1121
00:45:46,319 --> 00:45:48,400
name spacing

1122
00:45:48,400 --> 00:45:50,079
errors

1123
00:45:50,079 --> 00:45:52,560
um in particular if if you work with

1124
00:45:52,560 --> 00:45:54,400
revisions

1125
00:45:54,400 --> 00:45:56,560
that might

1126
00:45:56,560 --> 00:45:59,440
happen quite often

1127
00:45:59,440 --> 00:46:02,240
so that's the namespacing

1128
00:46:02,240 --> 00:46:05,520
let's talk about alternatives

1129
00:46:05,520 --> 00:46:07,839
um

1130
00:46:08,160 --> 00:46:10,240
many people want to use the same cdi

1131
00:46:10,240 --> 00:46:15,040
specification for different formats

1132
00:46:15,040 --> 00:46:16,319
so

1133
00:46:16,319 --> 00:46:18,240
for instance you have one specification

1134
00:46:18,240 --> 00:46:21,040
that explains how to do cinema in json

1135
00:46:21,040 --> 00:46:23,680
and another one how to do it in

1136
00:46:23,680 --> 00:46:25,440
c bar and we know how to do this

1137
00:46:25,440 --> 00:46:28,319
manually the centimeter specification

1138
00:46:28,319 --> 00:46:30,960
defines it a manual way

1139
00:46:30,960 --> 00:46:34,160
cta control gives an example of another

1140
00:46:34,160 --> 00:46:35,520
manual

1141
00:46:35,520 --> 00:46:38,480
way but we probably want to to make this

1142
00:46:38,480 --> 00:46:41,599
a little bit more first class

1143
00:46:41,599 --> 00:46:42,560
so

1144
00:46:42,560 --> 00:46:44,400
we

1145
00:46:44,400 --> 00:46:46,960
don't do this on the lexical level alone

1146
00:46:46,960 --> 00:46:49,599
because that always makes it hard

1147
00:46:49,599 --> 00:46:51,680
for implementations to actually process

1148
00:46:51,680 --> 00:46:52,720
this

1149
00:46:52,720 --> 00:46:54,880
so if we make the alternatives first

1150
00:46:54,880 --> 00:46:57,760
class we might actually be able to

1151
00:46:57,760 --> 00:46:59,040
define

1152
00:46:59,040 --> 00:47:01,200
uh to write a tool

1153
00:47:01,200 --> 00:47:04,800
that does translations between the two

1154
00:47:04,800 --> 00:47:07,040
representations i mean

1155
00:47:07,040 --> 00:47:11,599
if everything lines up properly

1156
00:47:11,599 --> 00:47:13,040
so this would not be part of the

1157
00:47:13,040 --> 00:47:15,760
specification but it would be an

1158
00:47:15,760 --> 00:47:17,359
interesting

1159
00:47:17,359 --> 00:47:18,210
implementation

1160
00:47:18,210 --> 00:47:19,440
[Music]

1161
00:47:19,440 --> 00:47:21,359
project

1162
00:47:21,359 --> 00:47:22,319
so that's why i want to have

1163
00:47:22,319 --> 00:47:24,800
alternatives be first class and not

1164
00:47:24,800 --> 00:47:25,680
just

1165
00:47:25,680 --> 00:47:27,920
be done on the lexical level like in the

1166
00:47:27,920 --> 00:47:30,720
cinematic spec

1167
00:47:31,359 --> 00:47:33,599
finally we should make this whole thing

1168
00:47:33,599 --> 00:47:34,960
more

1169
00:47:34,960 --> 00:47:37,050
accessible

1170
00:47:37,050 --> 00:47:38,800
[Music]

1171
00:47:38,800 --> 00:47:40,800
to automation

1172
00:47:40,800 --> 00:47:44,400
it should be able to actually generate

1173
00:47:44,400 --> 00:47:46,640
uh libraries

1174
00:47:46,640 --> 00:47:49,119
um so you if you have an rfc that has

1175
00:47:49,119 --> 00:47:52,079
some cdl in it and i think we now have a

1176
00:47:52,079 --> 00:47:54,400
two-digit number of those

1177
00:47:54,400 --> 00:47:57,040
um it should be possible to generate the

1178
00:47:57,040 --> 00:47:58,960
libraries from those automatically and

1179
00:47:58,960 --> 00:48:00,640
that should also be

1180
00:48:00,640 --> 00:48:03,440
possible for new ids so we probably want

1181
00:48:03,440 --> 00:48:04,079
to

1182
00:48:04,079 --> 00:48:06,880
establish a few conventions how you

1183
00:48:06,880 --> 00:48:08,319
expose

1184
00:48:08,319 --> 00:48:10,240
um ctdl

1185
00:48:10,240 --> 00:48:12,800
uh in a draft

1186
00:48:12,800 --> 00:48:15,599
we cannot define new conventions for

1187
00:48:15,599 --> 00:48:17,200
rfcs but we can

1188
00:48:17,200 --> 00:48:20,720
define them for for new draft we want to

1189
00:48:20,720 --> 00:48:22,800
be able to generate libraries from iana

1190
00:48:22,800 --> 00:48:25,119
registries there are several registries

1191
00:48:25,119 --> 00:48:27,680
that are just very very useful

1192
00:48:27,680 --> 00:48:30,960
uh think about interface types

1193
00:48:30,960 --> 00:48:34,480
which you just want to be able to use um

1194
00:48:34,480 --> 00:48:37,040
in a specification and of course the the

1195
00:48:37,040 --> 00:48:39,359
what i'm saying here for for documents

1196
00:48:39,359 --> 00:48:40,720
and registries

1197
00:48:40,720 --> 00:48:43,119
is not just for itf sources but this

1198
00:48:43,119 --> 00:48:45,280
should also be possible for non-itf

1199
00:48:45,280 --> 00:48:46,240
sources

1200
00:48:46,240 --> 00:48:48,559
so if there are interesting registries

1201
00:48:48,559 --> 00:48:50,880
or interesting documents that we want to

1202
00:48:50,880 --> 00:48:52,000
extract

1203
00:48:52,000 --> 00:48:53,520
uh cdda

1204
00:48:53,520 --> 00:48:55,599
uh from automatically

1205
00:48:55,599 --> 00:48:59,119
uh that we should look at those

1206
00:48:59,119 --> 00:49:01,040
and um

1207
00:49:01,040 --> 00:49:03,599
yeah that should be possible from a cdl

1208
00:49:03,599 --> 00:49:06,160
spec to trigger that automation

1209
00:49:06,160 --> 00:49:08,800
not in the sense of uh we

1210
00:49:08,800 --> 00:49:11,280
run a random operating system command

1211
00:49:11,280 --> 00:49:14,480
that's always a bit uh dangerous

1212
00:49:14,480 --> 00:49:16,240
but it should be possible to just point

1213
00:49:16,240 --> 00:49:18,480
to an internet draft and say i'm i want

1214
00:49:18,480 --> 00:49:20,160
to import the city data from there and

1215
00:49:20,160 --> 00:49:22,800
put it in that namespace and that should

1216
00:49:22,800 --> 00:49:24,880
be possible that's probably not the way

1217
00:49:24,880 --> 00:49:27,200
you actually publish your specifications

1218
00:49:27,200 --> 00:49:28,640
in the end

1219
00:49:28,640 --> 00:49:30,640
um because well of course you would

1220
00:49:30,640 --> 00:49:33,200
reference an rfc and no longer an id and

1221
00:49:33,200 --> 00:49:36,160
so on um but it would be good to to make

1222
00:49:36,160 --> 00:49:38,000
the language accessible for this kind of

1223
00:49:38,000 --> 00:49:40,559
automation

1224
00:49:40,559 --> 00:49:43,040
okay let's talk about syntax

1225
00:49:43,040 --> 00:49:45,200
for a second

1226
00:49:45,200 --> 00:49:48,880
the idea is to do this transition from

1227
00:49:48,880 --> 00:49:51,920
1.0 into 2.0

1228
00:49:51,920 --> 00:49:54,079
in a way that you won't notice that it

1229
00:49:54,079 --> 00:49:55,760
happened

1230
00:49:55,760 --> 00:49:57,599
so cdl

1231
00:49:57,599 --> 00:49:58,640
files

1232
00:49:58,640 --> 00:50:00,100
should still be

1233
00:50:00,100 --> 00:50:02,319
[Music]

1234
00:50:02,319 --> 00:50:04,400
2.0 files

1235
00:50:04,400 --> 00:50:07,200
and cdi 1.0 processors should be able to

1236
00:50:07,200 --> 00:50:09,520
do useful things with 2.0 files they

1237
00:50:09,520 --> 00:50:11,280
won't be able to do everything that you

1238
00:50:11,280 --> 00:50:12,480
can do with

1239
00:50:12,480 --> 00:50:14,720
2.0 files but

1240
00:50:14,720 --> 00:50:16,800
it would be good if

1241
00:50:16,800 --> 00:50:18,800
these processors

1242
00:50:18,800 --> 00:50:19,680
can

1243
00:50:19,680 --> 00:50:23,280
process 2.0 files

1244
00:50:23,280 --> 00:50:26,240
and yeah there are several places where

1245
00:50:26,240 --> 00:50:27,839
we can

1246
00:50:27,839 --> 00:50:31,680
uh stash things into 1.0 syntax

1247
00:50:31,680 --> 00:50:32,480
um

1248
00:50:32,480 --> 00:50:35,040
yeah that's one way of doing it but this

1249
00:50:35,040 --> 00:50:36,960
needs to be designed so i'm not sure how

1250
00:50:36,960 --> 00:50:39,200
exactly it will look like but i showed

1251
00:50:39,200 --> 00:50:40,800
some examples

1252
00:50:40,800 --> 00:50:44,880
um at iit f111

1253
00:50:45,280 --> 00:50:47,839
okay so this is the

1254
00:50:47,839 --> 00:50:50,079
syntax

1255
00:50:50,079 --> 00:50:51,040
finally

1256
00:50:51,040 --> 00:50:52,960
the other part that i think we should be

1257
00:50:52,960 --> 00:50:56,400
doing in 2.0 is annotation

1258
00:50:56,400 --> 00:51:00,000
um cddl has a processing model that

1259
00:51:00,000 --> 00:51:03,760
can be described with kernighan's car

1260
00:51:03,760 --> 00:51:05,119
which interestingly doesn't have a

1261
00:51:05,119 --> 00:51:07,119
wikipedia entry so you will have to find

1262
00:51:07,119 --> 00:51:08,480
it somewhere else

1263
00:51:08,480 --> 00:51:11,599
um so you put in an instance and the

1264
00:51:11,599 --> 00:51:14,160
model and the thing says yes or it says

1265
00:51:14,160 --> 00:51:15,680
no

1266
00:51:15,680 --> 00:51:17,359
and we have extended that with dot

1267
00:51:17,359 --> 00:51:19,280
feature a little bit but that's still

1268
00:51:19,280 --> 00:51:22,880
the the main processing model

1269
00:51:22,880 --> 00:51:25,520
the cdl tool can do more

1270
00:51:25,520 --> 00:51:27,359
it can annotate

1271
00:51:27,359 --> 00:51:28,559
a tree

1272
00:51:28,559 --> 00:51:30,880
with rule names

1273
00:51:30,880 --> 00:51:33,280
so that's really useful

1274
00:51:33,280 --> 00:51:36,240
but there is no control the spec writer

1275
00:51:36,240 --> 00:51:37,760
has about that

1276
00:51:37,760 --> 00:51:38,640
so

1277
00:51:38,640 --> 00:51:40,960
is it important that

1278
00:51:40,960 --> 00:51:42,720
the

1279
00:51:42,720 --> 00:51:45,119
data item matches text

1280
00:51:45,119 --> 00:51:47,760
or is it maybe more important that it

1281
00:51:47,760 --> 00:51:51,040
matches a country

1282
00:51:51,040 --> 00:51:52,480
so

1283
00:51:52,480 --> 00:51:54,880
a lot of these rules are actually noise

1284
00:51:54,880 --> 00:51:56,720
when you annotate

1285
00:51:56,720 --> 00:51:57,839
trees

1286
00:51:57,839 --> 00:52:00,160
and of course you want to be able to

1287
00:52:00,160 --> 00:52:02,079
put information into the specification

1288
00:52:02,079 --> 00:52:05,760
that goes beyond full names

1289
00:52:05,760 --> 00:52:08,480
and finally rule names are these things

1290
00:52:08,480 --> 00:52:10,400
that don't have a relationship to real

1291
00:52:10,400 --> 00:52:12,559
to the real world so maybe we should do

1292
00:52:12,559 --> 00:52:15,280
something about that

1293
00:52:15,280 --> 00:52:16,480
other

1294
00:52:16,480 --> 00:52:18,800
validation languages have something

1295
00:52:18,800 --> 00:52:21,920
called a post schema validation instance

1296
00:52:21,920 --> 00:52:23,599
which is a term i would like to avoid

1297
00:52:23,599 --> 00:52:26,079
but let's use it for now

1298
00:52:26,079 --> 00:52:28,720
and the psvi actually uses the

1299
00:52:28,720 --> 00:52:31,200
validation process to augment the data

1300
00:52:31,200 --> 00:52:33,200
with for instance with annotation

1301
00:52:33,200 --> 00:52:34,319
information

1302
00:52:34,319 --> 00:52:37,280
and possibly even to transform it

1303
00:52:37,280 --> 00:52:39,440
so filling in default values

1304
00:52:39,440 --> 00:52:42,559
constructing data from

1305
00:52:42,559 --> 00:52:46,319
data that has been passed and so on this

1306
00:52:46,319 --> 00:52:48,720
is all things that can be done in a psvi

1307
00:52:48,720 --> 00:52:51,119
we don't want to reinvent xsrt so the

1308
00:52:51,119 --> 00:52:54,640
transforming mechanism will be limited

1309
00:52:54,640 --> 00:52:55,599
but

1310
00:52:55,599 --> 00:52:58,800
yeah something maybe is

1311
00:52:58,800 --> 00:53:00,800
useful here

1312
00:53:00,800 --> 00:53:02,559
the interesting question is what is the

1313
00:53:02,559 --> 00:53:05,440
data models for that

1314
00:53:05,440 --> 00:53:07,760
and it's probably useful to be able to

1315
00:53:07,760 --> 00:53:11,119
put attributes on on any data item and

1316
00:53:11,119 --> 00:53:15,280
maybe even to have some richer types

1317
00:53:15,280 --> 00:53:17,200
maybe even things like application

1318
00:53:17,200 --> 00:53:20,079
specific edn

1319
00:53:20,079 --> 00:53:22,240
so we would need to think about

1320
00:53:22,240 --> 00:53:24,160
representations in various forms and

1321
00:53:24,160 --> 00:53:26,000
particularly in civil

1322
00:53:26,000 --> 00:53:28,880
diagnostic notation

1323
00:53:28,880 --> 00:53:31,200
so for annotation i think the the

1324
00:53:31,200 --> 00:53:33,520
minimum variable product

1325
00:53:33,520 --> 00:53:35,920
is uh to

1326
00:53:35,920 --> 00:53:38,880
be able to put attributes

1327
00:53:38,880 --> 00:53:40,079
on

1328
00:53:40,079 --> 00:53:41,680
rule names

1329
00:53:41,680 --> 00:53:44,240
so you can select which actually rituals

1330
00:53:44,240 --> 00:53:46,400
actively annotate

1331
00:53:46,400 --> 00:53:49,200
and maybe associate rule names with some

1332
00:53:49,200 --> 00:53:51,200
real world concept the ui thing i talked

1333
00:53:51,200 --> 00:53:52,559
about

1334
00:53:52,559 --> 00:53:55,119
you might have special description

1335
00:53:55,119 --> 00:53:57,200
attributes that you just

1336
00:53:57,200 --> 00:53:59,280
extract out of comments

1337
00:53:59,280 --> 00:54:01,359
some additional spec writer defined

1338
00:54:01,359 --> 00:54:03,920
attributes so for instance a unit could

1339
00:54:03,920 --> 00:54:06,559
be added to something

1340
00:54:06,559 --> 00:54:07,680
and

1341
00:54:07,680 --> 00:54:10,880
yeah you could even generate tags tags

1342
00:54:10,880 --> 00:54:12,640
that are not on the wire because the

1343
00:54:12,640 --> 00:54:14,400
schema implies them

1344
00:54:14,400 --> 00:54:17,280
and this already can be in many cases

1345
00:54:17,280 --> 00:54:19,680
can be taken from the unwrapped

1346
00:54:19,680 --> 00:54:23,040
information so i if i have a tilde time

1347
00:54:23,040 --> 00:54:25,599
somewhere i know that that number is a

1348
00:54:25,599 --> 00:54:26,640
tag one

1349
00:54:26,640 --> 00:54:29,280
uh time

1350
00:54:29,280 --> 00:54:31,040
okay and final slide

1351
00:54:31,040 --> 00:54:33,440
how quickly you should be able to be

1352
00:54:33,440 --> 00:54:35,359
able to do this again i think this is

1353
00:54:35,359 --> 00:54:37,200
low-hanging fruit

1354
00:54:37,200 --> 00:54:41,119
so my objective is to have a prototype

1355
00:54:41,119 --> 00:54:43,680
and a written up spec by the end of the

1356
00:54:43,680 --> 00:54:44,559
year

1357
00:54:44,559 --> 00:54:46,559
for composition

1358
00:54:46,559 --> 00:54:48,640
and probably for first elements of

1359
00:54:48,640 --> 00:54:50,640
annotation but that probably requires

1360
00:54:50,640 --> 00:54:51,760
some more

1361
00:54:51,760 --> 00:54:53,760
playing around with

1362
00:54:53,760 --> 00:54:56,480
with actual applications

1363
00:54:56,480 --> 00:55:00,160
and my objective is to have a complete

1364
00:55:00,160 --> 00:55:01,119
spec

1365
00:55:01,119 --> 00:55:03,440
at iitf 113

1366
00:55:03,440 --> 00:55:04,319
and

1367
00:55:04,319 --> 00:55:06,799
well then we can decide whether we are

1368
00:55:06,799 --> 00:55:09,599
done or want to split this document and

1369
00:55:09,599 --> 00:55:11,760
publish parts of it and publish other

1370
00:55:11,760 --> 00:55:14,640
parts later after some more experience

1371
00:55:14,640 --> 00:55:17,440
but i think we can only discuss this at

1372
00:55:17,440 --> 00:55:19,839
itf

1373
00:55:19,839 --> 00:55:22,960
comments questions

1374
00:55:24,799 --> 00:55:27,040
hank

1375
00:55:32,640 --> 00:55:35,280
hello hank please unmute yourself

1376
00:55:35,280 --> 00:55:37,920
no i'm i'm muted i'm just being polite i

1377
00:55:37,920 --> 00:55:38,960
guess

1378
00:55:38,960 --> 00:55:40,480
okay so

1379
00:55:40,480 --> 00:55:43,040
maybe my mic did not move

1380
00:55:43,040 --> 00:55:45,680
okay yeah so this is saying uh

1381
00:55:45,680 --> 00:55:48,640
obviously i'm a strong as a part of this

1382
00:55:48,640 --> 00:55:50,400
we encountered

1383
00:55:50,400 --> 00:55:52,240
several

1384
00:55:52,240 --> 00:55:53,680
pain points

1385
00:55:53,680 --> 00:55:57,280
without a strict composition feature

1386
00:55:57,280 --> 00:55:59,280
this also includes

1387
00:55:59,280 --> 00:56:03,119
how we define code points in over maps

1388
00:56:03,119 --> 00:56:04,079
like

1389
00:56:04,079 --> 00:56:06,960
are there global for a document or are

1390
00:56:06,960 --> 00:56:08,240
they uh

1391
00:56:08,240 --> 00:56:11,200
specific to certain subsets of a single

1392
00:56:11,200 --> 00:56:13,280
cta sorry i'm saying document here but

1393
00:56:13,280 --> 00:56:15,520
what i mean is they see the

1394
00:56:15,520 --> 00:56:18,480
data definition and uh so so yeah this

1395
00:56:18,480 --> 00:56:21,839
this really uh so we have a lot of ideas

1396
00:56:21,839 --> 00:56:24,799
how this works uh and i hope uh some of

1397
00:56:24,799 --> 00:56:25,920
them

1398
00:56:25,920 --> 00:56:27,839
we can find consensus on in this

1399
00:56:27,839 --> 00:56:29,280
document

1400
00:56:29,280 --> 00:56:31,520
that would be really really great

1401
00:56:31,520 --> 00:56:34,079
especially because i do not think that

1402
00:56:34,079 --> 00:56:37,040
these documents will come to a working

1403
00:56:37,040 --> 00:56:40,480
group last call before itf-113

1404
00:56:40,480 --> 00:56:41,280
so

1405
00:56:41,280 --> 00:56:44,079
if this timeline is realistic that would

1406
00:56:44,079 --> 00:56:45,520
be awesome because then we can

1407
00:56:45,520 --> 00:56:47,200
incorporate it already

1408
00:56:47,200 --> 00:56:51,040
and so uh so yeah i i'd say i would even

1409
00:56:51,040 --> 00:56:52,960
go so far in

1410
00:56:52,960 --> 00:56:55,359
splitting out more time

1411
00:56:55,359 --> 00:56:58,400
to do this and i'm in full support

1412
00:56:58,400 --> 00:57:02,880
of that part um on the annotation part

1413
00:57:02,880 --> 00:57:05,359
uh unfortunately again brenton is not

1414
00:57:05,359 --> 00:57:08,000
here i think he has some uh

1415
00:57:08,000 --> 00:57:11,119
really really constructive views on this

1416
00:57:11,119 --> 00:57:13,839
and so maybe in the next instagram uh we

1417
00:57:13,839 --> 00:57:14,640
can

1418
00:57:14,640 --> 00:57:16,960
read him in and and elaborate on that a

1419
00:57:16,960 --> 00:57:19,359
little bit

1420
00:57:19,839 --> 00:57:21,680
yeah we might also run a design game

1421
00:57:21,680 --> 00:57:24,720
meeting if we want

1422
00:57:25,040 --> 00:57:27,359
yeah sure that is yeah that is even

1423
00:57:27,359 --> 00:57:28,319
better

1424
00:57:28,319 --> 00:57:31,359
if we uh have a higher frequency on on

1425
00:57:31,359 --> 00:57:33,839
that and then we can use the interim to

1426
00:57:33,839 --> 00:57:37,920
uh discuss uh uh major uh turning points

1427
00:57:37,920 --> 00:57:39,359
or something like singularities or

1428
00:57:39,359 --> 00:57:41,598
something

1429
00:57:43,440 --> 00:57:45,440
yeah i just wanted to to bring that up

1430
00:57:45,440 --> 00:57:48,640
to um so design this is a this is an

1431
00:57:48,640 --> 00:57:50,480
ambitious timeline

1432
00:57:50,480 --> 00:57:51,359
um

1433
00:57:51,359 --> 00:57:53,520
if if this is to work i think this will

1434
00:57:53,520 --> 00:57:55,280
need design team meetings in addition to

1435
00:57:55,280 --> 00:57:56,720
the interims

1436
00:57:56,720 --> 00:57:57,680
um

1437
00:57:57,680 --> 00:57:58,720
the

1438
00:57:58,720 --> 00:58:00,720
my roth plan would be to start interims

1439
00:58:00,720 --> 00:58:02,160
again in

1440
00:58:02,160 --> 00:58:04,079
around december 15th

1441
00:58:04,079 --> 00:58:06,640
in in our regular schedule

1442
00:58:06,640 --> 00:58:08,559
but even with these and the holidays in

1443
00:58:08,559 --> 00:58:09,520
between

1444
00:58:09,520 --> 00:58:10,559
um

1445
00:58:10,559 --> 00:58:12,880
this this will a lot of work by by the

1446
00:58:12,880 --> 00:58:14,240
authors

1447
00:58:14,240 --> 00:58:16,960
um speaking of which um

1448
00:58:16,960 --> 00:58:19,680
hank would um hank and carson would you

1449
00:58:19,680 --> 00:58:22,640
would you collaborate on this document

1450
00:58:22,640 --> 00:58:25,040
or do you have um

1451
00:58:25,040 --> 00:58:26,240
are there other

1452
00:58:26,240 --> 00:58:28,400
interested parties that have shown up so

1453
00:58:28,400 --> 00:58:29,359
far

1454
00:58:29,359 --> 00:58:31,520
that would that would volunteer to work

1455
00:58:31,520 --> 00:58:33,520
on this too

1456
00:58:33,520 --> 00:58:35,520
i mean it's not a working group item yet

1457
00:58:35,520 --> 00:58:37,599
so it's technically speaking it's still

1458
00:58:37,599 --> 00:58:39,680
up to you carson um

1459
00:58:39,680 --> 00:58:42,240
anticipating

1460
00:58:42,240 --> 00:58:45,200
yeah i expect that that i will write

1461
00:58:45,200 --> 00:58:47,680
something like a seed document and then

1462
00:58:47,680 --> 00:58:50,640
people will come in and and contribute

1463
00:58:50,640 --> 00:58:52,240
and at some point we decide their

1464
00:58:52,240 --> 00:58:54,319
co-authors

1465
00:58:54,319 --> 00:58:57,040
um so i i didn't even think about that

1466
00:58:57,040 --> 00:59:00,160
yet but i know that hank has been

1467
00:59:00,160 --> 00:59:02,640
uh pinging me whether i'm going to do

1468
00:59:02,640 --> 00:59:04,880
everything about this for a while so i

1469
00:59:04,880 --> 00:59:06,799
knew that tank was going to contribute

1470
00:59:06,799 --> 00:59:08,000
and

1471
00:59:08,000 --> 00:59:10,640
brendon of course would make an awesome

1472
00:59:10,640 --> 00:59:14,440
contributor or co-author

1473
00:59:21,839 --> 00:59:24,400
anybody else who has this opinion on

1474
00:59:24,400 --> 00:59:26,319
this

1475
00:59:26,319 --> 00:59:28,160
wants to write text

1476
00:59:28,160 --> 00:59:31,319
or code

1477
00:59:32,720 --> 00:59:36,000
as a as a user of cbor um

1478
00:59:36,000 --> 00:59:38,799
i not sure i will write much text or

1479
00:59:38,799 --> 00:59:41,359
code but i'm quite looking forward to

1480
00:59:41,359 --> 00:59:43,440
the annotation features and especially

1481
00:59:43,440 --> 00:59:46,799
curious whether this um this work might

1482
00:59:46,799 --> 00:59:48,720
allow later to not only

1483
00:59:48,720 --> 00:59:49,920
um

1484
00:59:49,920 --> 00:59:53,760
very um to use the to use the validation

1485
00:59:53,760 --> 00:59:56,559
uh to extend annotation in such a way

1486
00:59:56,559 --> 00:59:57,920
that you can

1487
00:59:57,920 --> 01:00:00,400
also verify whether your cdl allows

1488
01:00:00,400 --> 01:00:03,119
unambiguous annotation because right now

1489
01:00:03,119 --> 01:00:05,040
validation is always unambiguous but

1490
01:00:05,040 --> 01:00:05,920
many

1491
01:00:05,920 --> 01:00:08,559
cdl documents out there do not allow

1492
01:00:08,559 --> 01:00:10,319
unambiguous

1493
01:00:10,319 --> 01:00:12,839
annotation and

1494
01:00:12,839 --> 01:00:17,040
if if the annotation extensions

1495
01:00:17,040 --> 01:00:19,839
facilitate i'm gonna be um checking this

1496
01:00:19,839 --> 01:00:22,319
i would appreciate this a lot

1497
01:00:22,319 --> 01:00:24,640
great

1498
01:00:25,359 --> 01:00:27,119
bank again

1499
01:00:27,119 --> 01:00:30,480
yeah again thank you thank you um so

1500
01:00:30,480 --> 01:00:30,790
um

1501
01:00:30,790 --> 01:00:32,000
[Music]

1502
01:00:32,000 --> 01:00:33,760
i haven't brought this up yet because

1503
01:00:33,760 --> 01:00:35,599
that is kind of there's not nothing

1504
01:00:35,599 --> 01:00:37,680
really tangible yet

1505
01:00:37,680 --> 01:00:39,839
so uh

1506
01:00:39,839 --> 01:00:42,640
take this with a grain of salt but

1507
01:00:42,640 --> 01:00:44,190
i think that some

1508
01:00:44,190 --> 01:00:45,920
[Music]

1509
01:00:45,920 --> 01:00:48,319
supporters and they are rallying fast at

1510
01:00:48,319 --> 01:00:50,720
the moment due to some other things like

1511
01:00:50,720 --> 01:00:52,480
in the cozy realm

1512
01:00:52,480 --> 01:00:54,960
a cdd ida might

1513
01:00:54,960 --> 01:00:57,760
manifest are these requirements for it

1514
01:00:57,760 --> 01:00:59,920
that is close coming closer to the

1515
01:00:59,920 --> 01:01:01,520
annotation part

1516
01:01:01,520 --> 01:01:02,559
so

1517
01:01:02,559 --> 01:01:04,400
an idea might not

1518
01:01:04,400 --> 01:01:06,960
uh so so the messages for the input open

1519
01:01:06,960 --> 01:01:10,240
for rpcs basically make up like a i

1520
01:01:10,240 --> 01:01:11,920
don't know majority portion of all of

1521
01:01:11,920 --> 01:01:13,599
that so there might be

1522
01:01:13,599 --> 01:01:14,520
again

1523
01:01:14,520 --> 01:01:16,960
external syntax

1524
01:01:16,960 --> 01:01:19,280
that can glue that together

1525
01:01:19,280 --> 01:01:22,240
and and and that might make use of some

1526
01:01:22,240 --> 01:01:24,559
of the annotation parts so i'm just

1527
01:01:24,559 --> 01:01:26,240
highlighting this because this is just

1528
01:01:26,240 --> 01:01:28,799
all i don't know a pipe dream today but

1529
01:01:28,799 --> 01:01:31,680
it might manifest faster than one things

1530
01:01:31,680 --> 01:01:34,559
in the next months and so

1531
01:01:34,559 --> 01:01:37,280
why is this interesting uh because there

1532
01:01:37,280 --> 01:01:40,319
might be offers on that from that pool

1533
01:01:40,319 --> 01:01:42,799
of interested people but i could not

1534
01:01:42,799 --> 01:01:46,799
name a single one today with any

1535
01:01:46,799 --> 01:01:49,799
reliability

1536
01:01:53,680 --> 01:01:56,880
so the um

1537
01:01:56,880 --> 01:01:59,839
i was in the skim meeting two hours ago

1538
01:01:59,839 --> 01:02:00,640
and

1539
01:02:00,640 --> 01:02:03,599
that would be a nice benchmark

1540
01:02:03,599 --> 01:02:07,119
for doing something like that as cim

1541
01:02:07,119 --> 01:02:08,400
um

1542
01:02:08,400 --> 01:02:11,760
barry is uh co-chair for that so maybe

1543
01:02:11,760 --> 01:02:13,680
he's now

1544
01:02:13,680 --> 01:02:17,039
in fight-or-flight mode uh that that we

1545
01:02:17,039 --> 01:02:18,480
might want to contribute something to

1546
01:02:18,480 --> 01:02:21,760
that but we can use it as a benchmark

1547
01:02:21,760 --> 01:02:23,760
and if it turns out to be useful we can

1548
01:02:23,760 --> 01:02:25,599
still try to contribute to the

1549
01:02:25,599 --> 01:02:28,559
standardization effort

1550
01:02:28,960 --> 01:02:30,960
i have to highlight that the other

1551
01:02:30,960 --> 01:02:32,960
project that is really

1552
01:02:32,960 --> 01:02:36,720
interesting the ctdl is also called skim

1553
01:02:36,720 --> 01:02:39,920
but it's a totally different skin

1554
01:02:39,920 --> 01:02:44,160
it's the supply chain integrity model so

1555
01:02:44,160 --> 01:02:46,319
maybe we should just start going for

1556
01:02:46,319 --> 01:02:47,839
five letter

1557
01:02:47,839 --> 01:02:50,000
yeah probably

1558
01:02:50,000 --> 01:02:53,039
no like with the five-digit rfc numbers

1559
01:02:53,039 --> 01:02:55,200
or rfd numbers or whatever we're gonna

1560
01:02:55,200 --> 01:02:56,960
call them then

1561
01:02:56,960 --> 01:02:58,799
okay um

1562
01:02:58,799 --> 01:03:02,559
we are um already in overtime so

1563
01:03:02,559 --> 01:03:04,960
i take any last comment if there is

1564
01:03:04,960 --> 01:03:07,440
still one

1565
01:03:11,760 --> 01:03:13,280
other than that

1566
01:03:13,280 --> 01:03:17,640
thanks everyone for all your input

1567
01:03:18,400 --> 01:03:21,039
as i mentioned interims are planned to

1568
01:03:21,039 --> 01:03:23,200
resume in the same

1569
01:03:23,200 --> 01:03:24,960
cadence that we had them

1570
01:03:24,960 --> 01:03:27,680
in during the last its

1571
01:03:27,680 --> 01:03:31,440
probably starting december 15th

1572
01:03:31,440 --> 01:03:34,319
may we'll go out on that and also always

1573
01:03:34,319 --> 01:03:35,520
also on

1574
01:03:35,520 --> 01:03:37,280
um topics that

1575
01:03:37,280 --> 01:03:39,520
topics that we just took a rough reading

1576
01:03:39,520 --> 01:03:41,280
on here for example the interested in

1577
01:03:41,280 --> 01:03:43,599
interest in edn

1578
01:03:43,599 --> 01:03:46,240
um with that review on the mailing list

1579
01:03:46,240 --> 01:03:48,960
thanks and have a nice rest of the itf

1580
01:03:48,960 --> 01:03:50,799
goodbye

1581
01:03:50,799 --> 01:03:53,839
thank you bye

1582
01:03:55,119 --> 01:03:58,119
bye

1583
01:03:58,720 --> 01:04:00,799
you

