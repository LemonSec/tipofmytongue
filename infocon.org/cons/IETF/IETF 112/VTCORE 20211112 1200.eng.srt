1
00:01:43,759 --> 00:01:44,799
okay

2
00:01:44,799 --> 00:01:46,479
that's

3
00:01:46,479 --> 00:01:50,000
top of the hour i guess we'll give it a

4
00:01:50,000 --> 00:01:51,439
few more minutes for people to trickle

5
00:01:51,439 --> 00:01:52,880
in but

6
00:01:52,880 --> 00:01:54,479
i guess still i don't know if people

7
00:01:54,479 --> 00:01:56,079
could

8
00:01:56,079 --> 00:01:57,439
should probably start doing the question

9
00:01:57,439 --> 00:01:59,360
if anybody like to

10
00:01:59,360 --> 00:02:03,040
volunteer to take dots

11
00:02:07,200 --> 00:02:09,199
i need to be

12
00:02:09,199 --> 00:02:11,519
um

13
00:02:13,440 --> 00:02:16,720
terribly you know detailed just uh

14
00:02:16,720 --> 00:02:18,959
active items and decisions is really all

15
00:02:18,959 --> 00:02:20,160
we need

16
00:02:20,160 --> 00:02:23,840
and you can use the uh

17
00:02:24,319 --> 00:02:25,760
the notetaking tool which is linked from

18
00:02:25,760 --> 00:02:27,680
the web

19
00:02:27,680 --> 00:02:28,800
from this

20
00:02:28,800 --> 00:02:32,319
conference at the top right

21
00:02:33,519 --> 00:02:36,640
do we have a jabra scribe also

22
00:02:36,640 --> 00:02:37,599
um

23
00:02:37,599 --> 00:02:39,120
i'm not positive we need one in this

24
00:02:39,120 --> 00:02:40,319
context but

25
00:02:40,319 --> 00:02:42,239
somebody wants to volunteer for that

26
00:02:42,239 --> 00:02:45,200
i'll probably be good too

27
00:02:52,400 --> 00:02:54,959
uh something said

28
00:02:54,959 --> 00:02:56,560
great thank you james

29
00:02:56,560 --> 00:02:58,560
james grayson

30
00:02:58,560 --> 00:03:01,560
cursing

31
00:03:14,720 --> 00:03:18,080
yes you don't have to use the

32
00:03:18,959 --> 00:03:20,480
note taking total hedge doc if you don't

33
00:03:20,480 --> 00:03:22,080
want to if you want to take notes

34
00:03:22,080 --> 00:03:23,519
yourself and email them to us that would

35
00:03:23,519 --> 00:03:27,000
be fine too

36
00:03:32,000 --> 00:03:34,400
don't volunteer all at once but

37
00:03:34,400 --> 00:03:36,640
yes

38
00:03:38,319 --> 00:03:42,518
yeah we really do need this

39
00:03:49,760 --> 00:03:51,120
well i guess we can

40
00:03:51,120 --> 00:03:53,439
start calling on people hey jonathan

41
00:03:53,439 --> 00:03:56,920
yeah i guess so

42
00:04:01,200 --> 00:04:02,799
uh bo

43
00:04:02,799 --> 00:04:04,640
can we

44
00:04:04,640 --> 00:04:08,640
call upon your services as a notetaker

45
00:04:09,200 --> 00:04:11,040
sure i can take notes

46
00:04:11,040 --> 00:04:12,840
thanks

47
00:04:12,840 --> 00:04:16,238
moe okay

48
00:04:22,639 --> 00:04:24,880
just a few meeting tips this

49
00:04:24,880 --> 00:04:27,759
session is being recorded

50
00:04:27,759 --> 00:04:29,360
you do need a data tracker login and

51
00:04:29,360 --> 00:04:31,199
hopefully that all worked i know it was

52
00:04:31,199 --> 00:04:34,400
problematic earlier in the week

53
00:04:34,400 --> 00:04:36,160
you can join the session dragon room

54
00:04:36,160 --> 00:04:38,400
jabber room via the meeting agenda

55
00:04:38,400 --> 00:04:40,720
although i'm not sure why you'd need to

56
00:04:40,720 --> 00:04:42,160
please use headphones or an echo

57
00:04:42,160 --> 00:04:44,560
canceling speakerphone and state your

58
00:04:44,560 --> 00:04:45,680
full name

59
00:04:45,680 --> 00:04:47,680
before speaking so that we can get it in

60
00:04:47,680 --> 00:04:50,160
the notes

61
00:04:50,639 --> 00:04:52,800
you enter the queue with a hand raising

62
00:04:52,800 --> 00:04:54,000
tool and

63
00:04:54,000 --> 00:04:56,639
leave with it as well you do need to

64
00:04:56,639 --> 00:04:58,560
enable your auto audio to be heard and

65
00:04:58,560 --> 00:05:00,560
unmute yourself

66
00:05:00,560 --> 00:05:02,960
uh you don't have to enable

67
00:05:02,960 --> 00:05:06,000
video if you don't want to

68
00:05:06,400 --> 00:05:07,919
here's the notewell

69
00:05:07,919 --> 00:05:10,960
a reminder of itf policies

70
00:05:10,960 --> 00:05:12,720
by participating you agree to follow

71
00:05:12,720 --> 00:05:16,000
these policies which are listed below

72
00:05:16,000 --> 00:05:19,120
bcp 9 through 79 please read them and

73
00:05:19,120 --> 00:05:21,759
understand them

74
00:05:23,280 --> 00:05:26,560
in addition uh to the ipr policies we do

75
00:05:26,560 --> 00:05:29,919
have a policy on guidelines for conduct

76
00:05:29,919 --> 00:05:33,520
an anti-harassment policy and procedures

77
00:05:33,520 --> 00:05:35,840
if you're having concerns about observed

78
00:05:35,840 --> 00:05:39,440
behavior please talk to the ombuds team

79
00:05:39,440 --> 00:05:41,039
and we do strive to create an

80
00:05:41,039 --> 00:05:42,639
environment which people are treated

81
00:05:42,639 --> 00:05:45,440
with dignity decency

82
00:05:45,440 --> 00:05:47,440
and respect and we expect you to behave

83
00:05:47,440 --> 00:05:50,400
according to professional standards

84
00:05:50,400 --> 00:05:52,000
and demonstrate appropriate workplace

85
00:05:52,000 --> 00:05:53,039
behavior

86
00:05:53,039 --> 00:05:54,560
so if you believe you've been harassed

87
00:05:54,560 --> 00:05:56,000
or noticed that someone else is being

88
00:05:56,000 --> 00:05:57,520
harassed or have any other concerns

89
00:05:57,520 --> 00:06:01,198
please talk to the ombuds persons

90
00:06:02,400 --> 00:06:04,960
right as jonathan mentioned we have the

91
00:06:04,960 --> 00:06:06,720
notes on the note-taking tool at this

92
00:06:06,720 --> 00:06:07,840
link

93
00:06:07,840 --> 00:06:10,479
the agenda has been posted

94
00:06:10,479 --> 00:06:12,400
and we have the job describe and note

95
00:06:12,400 --> 00:06:13,759
takers

96
00:06:13,759 --> 00:06:17,120
and this is the agenda

97
00:06:17,680 --> 00:06:21,840
do we have any additions or subtractions

98
00:06:23,520 --> 00:06:26,479
or modifications

99
00:06:30,479 --> 00:06:33,360
okay hearing none we will move on

100
00:06:33,360 --> 00:06:35,280
to the draft status why don't you want

101
00:06:35,280 --> 00:06:38,239
to cover this jonathan

102
00:06:43,360 --> 00:06:44,800
yeah it's the only

103
00:06:44,800 --> 00:06:48,319
the only new thing is rc 9134 from the

104
00:06:48,319 --> 00:06:50,800
publishers publications yeah right yeah

105
00:06:50,800 --> 00:06:52,319
i think yeah so uh

106
00:06:52,319 --> 00:06:54,880
jpeg xs has been published so

107
00:06:54,880 --> 00:06:57,599
it would work there

108
00:06:58,000 --> 00:07:01,120
let's see yeah uh vp9 is in the rsd

109
00:07:01,120 --> 00:07:03,840
editor queue it's waiting on

110
00:07:03,840 --> 00:07:07,599
um lrr which is waiting on

111
00:07:07,599 --> 00:07:08,960
uh

112
00:07:08,960 --> 00:07:11,919
frame marking uh we did a pub rack on

113
00:07:11,919 --> 00:07:13,759
cryptex

114
00:07:13,759 --> 00:07:16,960
so that should go through the 80s soon

115
00:07:16,960 --> 00:07:19,440
uh frameworking

116
00:07:19,440 --> 00:07:20,400
as of

117
00:07:20,400 --> 00:07:22,639
about an hour ago this noticed

118
00:07:22,639 --> 00:07:24,479
incorrect we needed

119
00:07:24,479 --> 00:07:26,160
we needed an updated draft because we

120
00:07:26,160 --> 00:07:28,319
decided to change it to experimental

121
00:07:28,319 --> 00:07:29,280
uh

122
00:07:29,280 --> 00:07:31,360
well published that this morning so now

123
00:07:31,360 --> 00:07:32,800
um

124
00:07:32,800 --> 00:07:34,000
i will do the write-up on that and

125
00:07:34,000 --> 00:07:35,759
hopefully that should get done

126
00:07:35,759 --> 00:07:37,840
uh we dropped petra a while ago he

127
00:07:37,840 --> 00:07:38,960
probably dropped this from the draft

128
00:07:38,960 --> 00:07:41,120
status too uh

129
00:07:41,120 --> 00:07:43,440
the next as a next time so if anybody

130
00:07:43,440 --> 00:07:45,520
that's in tetra let us know but

131
00:07:45,520 --> 00:07:46,800
in the meantime

132
00:07:46,800 --> 00:07:48,479
we can ignore that

133
00:07:48,479 --> 00:07:51,280
and um

134
00:07:51,280 --> 00:07:53,440
we

135
00:07:53,520 --> 00:07:56,639
adopted a few drafts

136
00:07:56,639 --> 00:07:59,840
and i'm like to know which one's 79

137
00:07:59,840 --> 00:08:03,520
i'm liking which one 7983 is i'm sorry

138
00:08:03,520 --> 00:08:05,919
that's uh quick multiplexing i'll go

139
00:08:05,919 --> 00:08:07,759
multiplexing right right right yes yes

140
00:08:07,759 --> 00:08:10,000
so but we i think

141
00:08:10,000 --> 00:08:11,840
all our other milestones are going to be

142
00:08:11,840 --> 00:08:13,120
discussed

143
00:08:13,120 --> 00:08:16,000
here today so yeah so vvc is

144
00:08:16,000 --> 00:08:17,919
both adopted and in first working group

145
00:08:17,919 --> 00:08:19,680
last call there were a lot of comments

146
00:08:19,680 --> 00:08:22,160
there from mostly from the vc community

147
00:08:22,160 --> 00:08:23,759
itself so it's great that they're

148
00:08:23,759 --> 00:08:27,360
participating here and

149
00:08:27,360 --> 00:08:28,400
we'll just definitely be talking about

150
00:08:28,400 --> 00:08:30,799
that later

151
00:08:31,440 --> 00:08:33,519
all right so now i'm going to talk

152
00:08:33,519 --> 00:08:35,839
briefly hopefully about recent liaison

153
00:08:35,839 --> 00:08:37,039
statements

154
00:08:37,039 --> 00:08:39,279
we have a request from the w3c web

155
00:08:39,279 --> 00:08:41,120
transport working group and yanivar is

156
00:08:41,120 --> 00:08:43,360
here to talk a little bit about that and

157
00:08:43,360 --> 00:08:46,959
then we have a liaison from iso iec jtc

158
00:08:46,959 --> 00:08:50,000
one sc29 working group three

159
00:08:50,000 --> 00:08:52,240
about green metadata so

160
00:08:52,240 --> 00:08:55,480
uh yanivar

161
00:08:58,399 --> 00:09:00,480
all right can you hear me

162
00:09:00,480 --> 00:09:02,480
we can

163
00:09:02,480 --> 00:09:04,560
hello uh yes i'm yanni barbury from

164
00:09:04,560 --> 00:09:07,600
mozilla i co-chair the w3c web transport

165
00:09:07,600 --> 00:09:09,120
working group

166
00:09:09,120 --> 00:09:10,880
where one of our use cases is

167
00:09:10,880 --> 00:09:13,040
bi-directional real-time audio video

168
00:09:13,040 --> 00:09:14,320
communication

169
00:09:14,320 --> 00:09:15,920
over web transport

170
00:09:15,920 --> 00:09:17,200
which is a

171
00:09:17,200 --> 00:09:19,360
javascript api on top of itf web

172
00:09:19,360 --> 00:09:22,160
transport and quick uh

173
00:09:22,160 --> 00:09:24,800
and the problem we're having there is

174
00:09:24,800 --> 00:09:25,680
uh

175
00:09:25,680 --> 00:09:27,360
when sending

176
00:09:27,360 --> 00:09:28,320
video

177
00:09:28,320 --> 00:09:31,279
uh when a client is sending video to a

178
00:09:31,279 --> 00:09:32,480
server

179
00:09:32,480 --> 00:09:34,160
and the problem is the client does not

180
00:09:34,160 --> 00:09:36,560
have enough information to know what it

181
00:09:36,560 --> 00:09:38,320
can when it can reapply

182
00:09:38,320 --> 00:09:40,560
a multiplicative increase in the media

183
00:09:40,560 --> 00:09:42,560
center rate to recover from prime

184
00:09:42,560 --> 00:09:44,240
congestion

185
00:09:44,240 --> 00:09:46,160
so basically

186
00:09:46,160 --> 00:09:48,880
we can reduce

187
00:09:48,880 --> 00:09:51,360
we can reduce send rate in in the face

188
00:09:51,360 --> 00:09:52,640
of congestion

189
00:09:52,640 --> 00:09:55,519
but we don't know how to rapidly

190
00:09:55,519 --> 00:09:58,720
reapply ascend rate a faster send rate

191
00:09:58,720 --> 00:10:00,160
afterwards

192
00:10:00,160 --> 00:10:02,160
when the congestion goes away

193
00:10:02,160 --> 00:10:05,040
so the request is to know if uh so we're

194
00:10:05,040 --> 00:10:06,320
glad to hear that

195
00:10:06,320 --> 00:10:08,480
this working group is uh

196
00:10:08,480 --> 00:10:11,360
considering rtp over quick and we're

197
00:10:11,360 --> 00:10:12,959
concerned we're

198
00:10:12,959 --> 00:10:14,640
we would like to know if rtp over quick

199
00:10:14,640 --> 00:10:17,200
can satisfy this use case and if so what

200
00:10:17,200 --> 00:10:18,399
measurements

201
00:10:18,399 --> 00:10:20,640
could a browser make available to aj's

202
00:10:20,640 --> 00:10:23,040
client to assist this problem

203
00:10:23,040 --> 00:10:26,320
and would it perhaps require uh

204
00:10:26,320 --> 00:10:28,720
some form of selectable replaceable even

205
00:10:28,720 --> 00:10:31,120
congestion control

206
00:10:31,120 --> 00:10:33,279
and if so which algorithms

207
00:10:33,279 --> 00:10:35,120
thank you

208
00:10:35,120 --> 00:10:38,160
yeah i would i would caution uh yanivar

209
00:10:38,160 --> 00:10:41,920
that uh rtp over web transport or uh is

210
00:10:41,920 --> 00:10:43,519
a little bit different from rtp over

211
00:10:43,519 --> 00:10:45,279
quick so maybe we'll get into that in

212
00:10:45,279 --> 00:10:48,000
the in the session to follow

213
00:10:48,000 --> 00:10:52,079
because it's not as tightly coupled but

214
00:10:52,320 --> 00:10:54,240
so uh

215
00:10:54,240 --> 00:10:55,920
i guess can you raise some of these

216
00:10:55,920 --> 00:10:57,600
issues in the discussion that follows

217
00:10:57,600 --> 00:10:59,200
and we'll try to see where to go from

218
00:10:59,200 --> 00:11:02,160
there does that make sense

219
00:11:03,839 --> 00:11:05,600
okay we'll do

220
00:11:05,600 --> 00:11:07,600
okay

221
00:11:07,600 --> 00:11:11,600
uh the second liaison is from iso iec

222
00:11:11,600 --> 00:11:14,800
jtc one sc29 working compo3 do we have a

223
00:11:14,800 --> 00:11:17,120
representative

224
00:11:17,120 --> 00:11:21,399
to talk about this liaison request

225
00:11:28,480 --> 00:11:30,560
all right let's see um

226
00:11:30,560 --> 00:11:32,480
see what cars see i hope i'm pronouncing

227
00:11:32,480 --> 00:11:35,200
that right in the queue um are you

228
00:11:35,200 --> 00:11:36,000
okay

229
00:11:36,000 --> 00:11:37,440
go ahead

230
00:11:37,440 --> 00:11:40,640
hi uh can you hear me so yes we can

231
00:11:40,640 --> 00:11:42,880
yes i can uh speak on that my colleagues

232
00:11:42,880 --> 00:11:44,800
uh worked on this uh

233
00:11:44,800 --> 00:11:45,600
so

234
00:11:45,600 --> 00:11:47,600
uh if it's okay i can

235
00:11:47,600 --> 00:11:49,279
go through please

236
00:11:49,279 --> 00:11:52,560
uh so this uh

237
00:11:53,360 --> 00:11:55,360
three epic systems and they would like

238
00:11:55,360 --> 00:11:58,240
to point an update on the progress of uh

239
00:11:58,240 --> 00:11:59,880
this standard

240
00:11:59,880 --> 00:12:02,399
2301-11 which is energy efficient media

241
00:12:02,399 --> 00:12:05,200
consumption green metadata uh this has

242
00:12:05,200 --> 00:12:08,399
been uh so 2015 19 first and second

243
00:12:08,399 --> 00:12:09,680
editions and now

244
00:12:09,680 --> 00:12:12,240
the third edition is uh

245
00:12:12,240 --> 00:12:14,800
currently in the committee drafts uh

246
00:12:14,800 --> 00:12:16,399
series status

247
00:12:16,399 --> 00:12:19,600
and just as an overview uh in general

248
00:12:19,600 --> 00:12:22,560
this standard uh provides uh various

249
00:12:22,560 --> 00:12:25,120
type of metadata that enable uh

250
00:12:25,120 --> 00:12:27,600
management of uh there are these four

251
00:12:27,600 --> 00:12:29,839
bullets uh management of decoder power

252
00:12:29,839 --> 00:12:32,800
consumption or display power consumption

253
00:12:32,800 --> 00:12:33,680
and

254
00:12:33,680 --> 00:12:36,959
for offline uh applications or for uh

255
00:12:36,959 --> 00:12:38,480
like adaptive streaming or dash

256
00:12:38,480 --> 00:12:42,000
applications it provides media selection

257
00:12:42,000 --> 00:12:42,880
uh

258
00:12:42,880 --> 00:12:45,120
metadata and also

259
00:12:45,120 --> 00:12:48,079
quality recovery for uh video encoding

260
00:12:48,079 --> 00:12:50,560
uh power consumption so different kind

261
00:12:50,560 --> 00:12:52,720
of metadata are provided in this

262
00:12:52,720 --> 00:12:55,120
specification and recently the third

263
00:12:55,120 --> 00:12:57,600
edition of this standard uh which is uh

264
00:12:57,600 --> 00:13:00,079
which is pointed to in this ls provides

265
00:13:00,079 --> 00:13:01,839
a bunch of new features

266
00:13:01,839 --> 00:13:02,880
uh

267
00:13:02,880 --> 00:13:04,959
for example these three bullets say here

268
00:13:04,959 --> 00:13:07,920
there is now interactive signaling for

269
00:13:07,920 --> 00:13:10,399
remote decoder power reduction that

270
00:13:10,399 --> 00:13:12,560
gives better power reductions

271
00:13:12,560 --> 00:13:15,760
and also vvc sci messages uh for

272
00:13:15,760 --> 00:13:18,320
carrying green metadata uh related to

273
00:13:18,320 --> 00:13:20,560
complexity metrics this has been added

274
00:13:20,560 --> 00:13:22,399
and also we will see

275
00:13:22,399 --> 00:13:23,360
seo

276
00:13:23,360 --> 00:13:25,760
that can also carry uh metrics for

277
00:13:25,760 --> 00:13:27,519
quality recovery after low power

278
00:13:27,519 --> 00:13:29,440
encoding so a bunch of new features have

279
00:13:29,440 --> 00:13:30,639
been added

280
00:13:30,639 --> 00:13:33,120
and uh

281
00:13:33,120 --> 00:13:34,720
hope that this information is of

282
00:13:34,720 --> 00:13:36,639
interest to this group and uh we can

283
00:13:36,639 --> 00:13:38,880
consider uh using this

284
00:13:38,880 --> 00:13:40,079
in this group

285
00:13:40,079 --> 00:13:42,800
uh these different metadata have all a

286
00:13:42,800 --> 00:13:45,040
very different uh shape and form some

287
00:13:45,040 --> 00:13:47,120
are for live applications some are for a

288
00:13:47,120 --> 00:13:50,000
stream adaptive streaming applications

289
00:13:50,000 --> 00:13:53,120
um and some are forward direction from

290
00:13:53,120 --> 00:13:55,040
center to receiver some are from

291
00:13:55,040 --> 00:13:57,600
receiver site to the sender side so my

292
00:13:57,600 --> 00:14:00,160
imagination is that the the metadata

293
00:14:00,160 --> 00:14:02,160
that is to be transferred from receiver

294
00:14:02,160 --> 00:14:03,920
to the center side that's something

295
00:14:03,920 --> 00:14:06,160
especially where you know some container

296
00:14:06,160 --> 00:14:10,160
formats and so on might be of interest

297
00:14:11,040 --> 00:14:13,440
that's my take on it so that was just

298
00:14:13,440 --> 00:14:16,320
like a quick one-minute summary on this

299
00:14:16,320 --> 00:14:18,800
ls and if there are questions i can try

300
00:14:18,800 --> 00:14:21,439
to answer them

301
00:14:22,720 --> 00:14:25,519
i see james

302
00:14:27,519 --> 00:14:29,279
reading through this it looks like

303
00:14:29,279 --> 00:14:31,920
you're targeting bbc is there any

304
00:14:31,920 --> 00:14:35,279
interest in porting this to other

305
00:14:35,279 --> 00:14:37,440
potentially older codecs that are more

306
00:14:37,440 --> 00:14:39,440
used today

307
00:14:39,440 --> 00:14:41,440
this is the third edition that now adds

308
00:14:41,440 --> 00:14:43,839
vbc but already there are metrics for

309
00:14:43,839 --> 00:14:46,560
older codecs available so uh

310
00:14:46,560 --> 00:14:48,480
yes they are already in the previous

311
00:14:48,480 --> 00:14:50,639
editions

312
00:14:50,639 --> 00:14:53,040
okay

313
00:14:56,399 --> 00:14:59,399
stephanie

314
00:14:59,519 --> 00:15:00,720
question

315
00:15:00,720 --> 00:15:02,959
question would be have you any real

316
00:15:02,959 --> 00:15:04,880
world deployment of these previous

317
00:15:04,880 --> 00:15:06,800
editions i mean the stuff is around now

318
00:15:06,800 --> 00:15:10,000
for a few years right

319
00:15:10,560 --> 00:15:14,160
that is uh where i don't have any

320
00:15:14,160 --> 00:15:16,160
complete information if there's anybody

321
00:15:16,160 --> 00:15:17,360
else

322
00:15:17,360 --> 00:15:21,560
i'm also fairly new to this

323
00:15:26,959 --> 00:15:28,800
okay maybe we can take it on reflector

324
00:15:28,800 --> 00:15:32,639
and so on so we can have uh somehow

325
00:15:34,880 --> 00:15:38,160
is there any action required of the abt

326
00:15:38,160 --> 00:15:40,399
core working group

327
00:15:40,399 --> 00:15:43,600
other than discussion on the main list

328
00:15:43,600 --> 00:15:47,360
i mean it seeks some feedback

329
00:15:47,360 --> 00:15:51,920
of interest from from the group so

330
00:15:52,720 --> 00:15:55,360
yeah i mean i think you know if

331
00:15:55,360 --> 00:15:57,120
you know in so far it's i guess there's

332
00:15:57,120 --> 00:15:59,120
not one of the elements is the receiver

333
00:15:59,120 --> 00:16:00,959
to send her feedback so

334
00:16:00,959 --> 00:16:02,959
um i think if somebody is you know

335
00:16:02,959 --> 00:16:04,160
interested in

336
00:16:04,160 --> 00:16:05,600
uh submitting a draft on that i think we

337
00:16:05,600 --> 00:16:07,680
could certainly

338
00:16:07,680 --> 00:16:08,800
you know be

339
00:16:08,800 --> 00:16:10,959
you know interested in them you can take

340
00:16:10,959 --> 00:16:12,320
up with the if the work group wants to

341
00:16:12,320 --> 00:16:13,759
do it but

342
00:16:13,759 --> 00:16:15,600
i think yeah certainly i think any sort

343
00:16:15,600 --> 00:16:16,720
of

344
00:16:16,720 --> 00:16:17,519
uh

345
00:16:17,519 --> 00:16:19,360
receiver

346
00:16:19,360 --> 00:16:22,399
to send our feedback over rtcp

347
00:16:22,399 --> 00:16:24,000
is in scope for this group

348
00:16:24,000 --> 00:16:26,160
so somebody wants to do that work

349
00:16:26,160 --> 00:16:27,920
uh i think there would be interest in

350
00:16:27,920 --> 00:16:28,800
that

351
00:16:28,800 --> 00:16:30,240
i mean assuming there's interested in

352
00:16:30,240 --> 00:16:32,720
the community

353
00:16:35,440 --> 00:16:36,800
that probably should be noted in the

354
00:16:36,800 --> 00:16:39,199
minutes

355
00:16:40,720 --> 00:16:42,560
so i would assume then we could do some

356
00:16:42,560 --> 00:16:44,480
email communication on this on the

357
00:16:44,480 --> 00:16:45,600
lecture

358
00:16:45,600 --> 00:16:46,880
absolutely

359
00:16:46,880 --> 00:16:50,040
all right

360
00:16:51,519 --> 00:16:54,079
okay thank you

361
00:16:54,079 --> 00:16:55,600
uh

362
00:16:55,600 --> 00:16:58,160
next topic is rtp

363
00:16:58,160 --> 00:17:00,240
hold on stefan and colin are in the

364
00:17:00,240 --> 00:17:02,320
queue okay

365
00:17:02,320 --> 00:17:06,160
so just uh just one remark that uh if

366
00:17:06,160 --> 00:17:08,240
if someone were interested in this type

367
00:17:08,240 --> 00:17:10,400
of stuff then uh of course the forward

368
00:17:10,400 --> 00:17:13,199
direction is also something i mean a lot

369
00:17:13,199 --> 00:17:15,359
of this gets

370
00:17:15,359 --> 00:17:16,880
as far as i understand a lot of this can

371
00:17:16,880 --> 00:17:19,760
get piggy packed into the codec

372
00:17:19,760 --> 00:17:20,880
uh

373
00:17:20,880 --> 00:17:23,119
into the codec bit stream using sai

374
00:17:23,119 --> 00:17:24,480
messages and such

375
00:17:24,480 --> 00:17:27,679
but uh it could also be multiplexed uh

376
00:17:27,679 --> 00:17:29,360
by simply creating its own payload

377
00:17:29,360 --> 00:17:30,840
format right and

378
00:17:30,840 --> 00:17:33,600
um that way it may be applicable also to

379
00:17:33,600 --> 00:17:35,120
non-epic standards

380
00:17:35,120 --> 00:17:37,360
so it i mean see

381
00:17:37,360 --> 00:17:40,160
what i want to say is the uh

382
00:17:40,160 --> 00:17:42,480
um

383
00:17:43,440 --> 00:17:46,080
chances to work on that are not limited

384
00:17:46,080 --> 00:17:47,120
to

385
00:17:47,120 --> 00:17:50,320
to uh the return direction yeah that's a

386
00:17:50,320 --> 00:17:51,039
lot

387
00:17:51,039 --> 00:17:53,120
done in this in this area

388
00:17:53,120 --> 00:17:54,080
um

389
00:17:54,080 --> 00:17:57,360
whether it's worth doing it

390
00:17:57,360 --> 00:17:58,400
you know

391
00:17:58,400 --> 00:18:02,799
but we'll see yeah thank you veron

392
00:18:05,760 --> 00:18:08,960
yeah hi um so i wanted to return back to

393
00:18:08,960 --> 00:18:11,120
the the first liaison statement just

394
00:18:11,120 --> 00:18:13,360
briefly talking about uh congestion

395
00:18:13,360 --> 00:18:15,679
control um

396
00:18:15,679 --> 00:18:17,840
and um

397
00:18:17,840 --> 00:18:20,799
it would seem that

398
00:18:20,799 --> 00:18:23,200
um you know the issues of congestion

399
00:18:23,200 --> 00:18:25,039
control coming up in a bunch of

400
00:18:25,039 --> 00:18:26,799
different groups

401
00:18:26,799 --> 00:18:28,799
and and the media of a quick side

402
00:18:28,799 --> 00:18:30,960
meeting was talking about this and uh

403
00:18:30,960 --> 00:18:32,559
it's come up in a bunch of different

404
00:18:32,559 --> 00:18:33,919
places

405
00:18:33,919 --> 00:18:36,480
uh and certainly for um congestion

406
00:18:36,480 --> 00:18:37,919
control for rtp

407
00:18:37,919 --> 00:18:41,120
udp i know we had the the rmcat group uh

408
00:18:41,120 --> 00:18:43,120
which tried to do a bunch of algorithms

409
00:18:43,120 --> 00:18:44,559
um

410
00:18:44,559 --> 00:18:46,320
and i'm not sure those algorithms

411
00:18:46,320 --> 00:18:48,160
directly apply to quick so i'm not

412
00:18:48,160 --> 00:18:49,679
suggesting we take the work there but

413
00:18:49,679 --> 00:18:51,840
i'm i was wondering if uh we should

414
00:18:51,840 --> 00:18:54,000
maybe have a broader conversation about

415
00:18:54,000 --> 00:18:56,480
where we do

416
00:18:56,480 --> 00:18:58,799
media congestion control over quick and

417
00:18:58,799 --> 00:19:01,600
whether that's of rtp specific or a more

418
00:19:01,600 --> 00:19:03,360
general conversation

419
00:19:03,360 --> 00:19:04,160
so

420
00:19:04,160 --> 00:19:05,919
maybe we should bring it with the ads at

421
00:19:05,919 --> 00:19:08,320
some point

422
00:19:08,640 --> 00:19:09,679
yeah

423
00:19:09,679 --> 00:19:12,000
well i think the presentation to follow

424
00:19:12,000 --> 00:19:14,160
uh colin will directly

425
00:19:14,160 --> 00:19:17,600
uh bear on that question so maybe we can

426
00:19:17,600 --> 00:19:19,600
we can talk about it uh during the

427
00:19:19,600 --> 00:19:23,440
presentation or in the q a show

428
00:19:23,440 --> 00:19:25,600
sure i think it's more general than um

429
00:19:25,600 --> 00:19:30,439
rtp over quick quick yeah

430
00:19:45,600 --> 00:19:48,000
anyone else in the queue

431
00:19:48,000 --> 00:19:50,559
no that's it seems to be up so it's okay

432
00:19:50,559 --> 00:19:52,559
you wanted

433
00:19:52,559 --> 00:19:54,960
all right so uh we're now going to hand

434
00:19:54,960 --> 00:19:56,480
it over

435
00:19:56,480 --> 00:20:00,080
to the rtp over quick team

436
00:20:00,799 --> 00:20:03,039
yeah hi can you hear me

437
00:20:03,039 --> 00:20:04,840
yes

438
00:20:04,840 --> 00:20:07,760
cool uh yeah thanks for inviting us to

439
00:20:07,760 --> 00:20:10,320
present here again today um in july we

440
00:20:10,320 --> 00:20:12,559
already presented the mapping of rtp

441
00:20:12,559 --> 00:20:14,799
onto quick draft and today we would like

442
00:20:14,799 --> 00:20:16,640
to go a bit more into detail on

443
00:20:16,640 --> 00:20:20,400
congestion control for rtp over quick on

444
00:20:20,400 --> 00:20:22,400
the next slide

445
00:20:22,400 --> 00:20:24,640
i'd like to start with a

446
00:20:24,640 --> 00:20:26,159
short overview on the context of the

447
00:20:26,159 --> 00:20:28,240
draft

448
00:20:28,240 --> 00:20:31,679
there are actually two similar drafts

449
00:20:31,679 --> 00:20:34,480
the other one is from sam hurst from bbc

450
00:20:34,480 --> 00:20:37,200
research and development and both drafts

451
00:20:37,200 --> 00:20:39,360
provide a basic encapsulation for

452
00:20:39,360 --> 00:20:44,240
rtp and rtpc rtcp over quick

453
00:20:44,240 --> 00:20:46,080
both of the drafts use the unreliable

454
00:20:46,080 --> 00:20:47,760
datagram extension with the flow

455
00:20:47,760 --> 00:20:49,840
identifier to demultiplex

456
00:20:49,840 --> 00:20:52,320
different rtp sessions

457
00:20:52,320 --> 00:20:55,360
and our draft focuses a bit more on

458
00:20:55,360 --> 00:20:56,960
congestion control and the interface

459
00:20:56,960 --> 00:20:58,559
requirements for

460
00:20:58,559 --> 00:21:01,039
quick implementations and condition

461
00:21:01,039 --> 00:21:02,480
controlling

462
00:21:02,480 --> 00:21:05,280
and yeah both drafts use sdp for

463
00:21:05,280 --> 00:21:07,200
signaling

464
00:21:07,200 --> 00:21:10,960
um harold did you have a question

465
00:21:12,080 --> 00:21:13,280
or are you just getting in the queue to

466
00:21:13,280 --> 00:21:16,280
talk

467
00:21:32,880 --> 00:21:34,960
i couldn't figure out why he won't

468
00:21:34,960 --> 00:21:36,559
wanted to

469
00:21:36,559 --> 00:21:37,840
to carry

470
00:21:37,840 --> 00:21:40,320
a multiple rtp sessions or one quick

471
00:21:40,320 --> 00:21:41,520
session

472
00:21:41,520 --> 00:21:43,919
and this might be obvious to someone but

473
00:21:43,919 --> 00:21:47,200
it doesn't seem to be in the draft

474
00:21:47,200 --> 00:21:48,559
and it's

475
00:21:48,559 --> 00:21:50,720
it's a few bites of tax

476
00:21:50,720 --> 00:21:52,480
that i would like to avoid if we don't

477
00:21:52,480 --> 00:21:55,720
need it

478
00:21:58,559 --> 00:22:00,320
uh sorry i'm not sure understand this

479
00:22:00,320 --> 00:22:02,639
question

480
00:22:03,120 --> 00:22:05,440
you have a you put the flow idea into

481
00:22:05,440 --> 00:22:06,320
the

482
00:22:06,320 --> 00:22:07,840
into the

483
00:22:07,840 --> 00:22:09,600
into the session

484
00:22:09,600 --> 00:22:11,919
and what do you what you to d multiplex

485
00:22:11,919 --> 00:22:14,400
rtp sessions what do you need to do to

486
00:22:14,400 --> 00:22:17,200
demultiplex rtp sessions

487
00:22:17,200 --> 00:22:20,880
um okay yeah uh that is because in udp

488
00:22:20,880 --> 00:22:22,320
um one would

489
00:22:22,320 --> 00:22:24,880
probably typically use different udp

490
00:22:24,880 --> 00:22:27,280
ports and do different rtp sessions over

491
00:22:27,280 --> 00:22:29,440
different udp ports and identify them by

492
00:22:29,440 --> 00:22:30,240
that

493
00:22:30,240 --> 00:22:32,559
and in quick we can

494
00:22:32,559 --> 00:22:34,799
have the itp sessions in one connection

495
00:22:34,799 --> 00:22:35,950
and then try to

496
00:22:35,950 --> 00:22:37,360
[Music]

497
00:22:37,360 --> 00:22:38,880
use all of the information we have

498
00:22:38,880 --> 00:22:41,120
available in that one connection to you

499
00:22:41,120 --> 00:22:42,799
use for different rtp sessions at the

500
00:22:42,799 --> 00:22:44,080
same time like for example the

501
00:22:44,080 --> 00:22:46,720
congestion control information

502
00:22:46,720 --> 00:22:48,640
i was trying to find i was trying to

503
00:22:48,640 --> 00:22:50,080
figure out the use case where i would

504
00:22:50,080 --> 00:22:53,760
want to have multiple rtp sessions on

505
00:22:53,760 --> 00:22:55,520
between the same entities and i couldn't

506
00:22:55,520 --> 00:22:56,559
find one

507
00:22:56,559 --> 00:22:57,679
so

508
00:22:57,679 --> 00:22:58,480
uh

509
00:22:58,480 --> 00:23:00,960
so i was wondering whether it's

510
00:23:00,960 --> 00:23:02,000
it's

511
00:23:02,000 --> 00:23:04,320
reasonable to drop this requirement and

512
00:23:04,320 --> 00:23:05,440
just say

513
00:23:05,440 --> 00:23:07,520
if you if you need more rtp sessions set

514
00:23:07,520 --> 00:23:11,440
up more quickly quick connections

515
00:23:12,000 --> 00:23:14,400
yep um maybe i'll

516
00:23:14,400 --> 00:23:16,480
take that and

517
00:23:16,480 --> 00:23:19,360
we can expand that on the draft

518
00:23:19,360 --> 00:23:23,399
and explain it further

519
00:23:23,520 --> 00:23:26,240
especially explain the need for it

520
00:23:26,240 --> 00:23:28,400
yeah

521
00:23:28,400 --> 00:23:30,640
con

522
00:23:30,880 --> 00:23:32,480
yeah i mean there was a comment in the

523
00:23:32,480 --> 00:23:34,320
chat about not understanding what rtp

524
00:23:34,320 --> 00:23:36,320
session meant in this context i mean you

525
00:23:36,320 --> 00:23:38,559
know rtp session has a very well defined

526
00:23:38,559 --> 00:23:41,520
meaning in in the rtp spec and we need

527
00:23:41,520 --> 00:23:44,080
to make sure that that what's meant here

528
00:23:44,080 --> 00:23:45,120
is

529
00:23:45,120 --> 00:23:46,799
uh consistent with that meaning and it's

530
00:23:46,799 --> 00:23:48,720
not just being used as a as an

531
00:23:48,720 --> 00:23:51,360
alternative to the ssrc for example for

532
00:23:51,360 --> 00:23:53,600
demonstrating users

533
00:23:53,600 --> 00:23:55,760
um so i think there's a perhaps a deeper

534
00:23:55,760 --> 00:23:57,360
conversation about sessions and

535
00:23:57,360 --> 00:23:59,520
demultiplexing that should happen at

536
00:23:59,520 --> 00:24:02,679
some point

537
00:24:07,360 --> 00:24:11,200
okay then maybe i continue with the

538
00:24:11,200 --> 00:24:13,039
presentation on congestion controlling

539
00:24:13,039 --> 00:24:15,279
first and we keep that on a later

540
00:24:15,279 --> 00:24:17,360
discussion

541
00:24:17,360 --> 00:24:18,960
um

542
00:24:18,960 --> 00:24:20,720
yeah so today we want to focus on the

543
00:24:20,720 --> 00:24:23,840
congestion controlling and um

544
00:24:23,840 --> 00:24:25,120
we

545
00:24:25,120 --> 00:24:27,440
identified a couple of questions which

546
00:24:27,440 --> 00:24:29,919
come up when we do rtp over quick

547
00:24:29,919 --> 00:24:32,720
and first is that um

548
00:24:32,720 --> 00:24:35,760
we have congestion control in quick and

549
00:24:35,760 --> 00:24:37,679
rtp

550
00:24:37,679 --> 00:24:40,640
and quick suggestion to use an algorithm

551
00:24:40,640 --> 00:24:42,480
similar to neurano

552
00:24:42,480 --> 00:24:44,640
uh it does not meditate mandate any

553
00:24:44,640 --> 00:24:46,799
congestion control algorithm and rather

554
00:24:46,799 --> 00:24:48,640
provides a set of connection statistics

555
00:24:48,640 --> 00:24:50,320
that can be used by any congestion

556
00:24:50,320 --> 00:24:52,400
controller and other algorithms than the

557
00:24:52,400 --> 00:24:55,600
arena are currently under investigation

558
00:24:55,600 --> 00:24:58,080
and rtp also provides its own congestion

559
00:24:58,080 --> 00:24:59,039
control

560
00:24:59,039 --> 00:25:01,520
using explicit transition controls

561
00:25:01,520 --> 00:25:04,480
signaling in rtcp

562
00:25:04,480 --> 00:25:05,720
for example there's

563
00:25:05,720 --> 00:25:09,200
rc8888 which provides a feedback format

564
00:25:09,200 --> 00:25:12,000
that can be used for algorithms

565
00:25:12,000 --> 00:25:13,919
for example firearms like scream and

566
00:25:13,919 --> 00:25:17,440
nada and also gcc as proposed by

567
00:25:17,440 --> 00:25:20,559
the rmcud group

568
00:25:20,559 --> 00:25:24,159
um now the two main questions we try to

569
00:25:24,159 --> 00:25:26,400
investigate in our experimentations are

570
00:25:26,400 --> 00:25:27,440
first

571
00:25:27,440 --> 00:25:29,440
how can we do con gesture control for

572
00:25:29,440 --> 00:25:31,200
return media

573
00:25:31,200 --> 00:25:33,360
on top of quick which already has its

574
00:25:33,360 --> 00:25:36,159
own congestion control on another level

575
00:25:36,159 --> 00:25:39,440
and then the second is if we can reduce

576
00:25:39,440 --> 00:25:41,200
rtcp overhead

577
00:25:41,200 --> 00:25:43,279
due to duplicate signaling of

578
00:25:43,279 --> 00:25:45,279
congestion stick living in quick and

579
00:25:45,279 --> 00:25:47,919
rtcp

580
00:25:48,240 --> 00:25:51,200
next slide please

581
00:25:52,559 --> 00:25:53,919
so we did

582
00:25:53,919 --> 00:25:55,840
experiments with a couple of different

583
00:25:55,840 --> 00:25:57,520
options we could use for congestion

584
00:25:57,520 --> 00:25:58,880
control

585
00:25:58,880 --> 00:26:00,559
the first one is that we tried to

586
00:26:00,559 --> 00:26:02,320
relieve congestion control entirely to

587
00:26:02,320 --> 00:26:04,400
quick and only do some trivial rate

588
00:26:04,400 --> 00:26:07,279
adaption in our media application

589
00:26:07,279 --> 00:26:09,679
we will leave that out today because

590
00:26:09,679 --> 00:26:11,520
it's um

591
00:26:11,520 --> 00:26:13,279
we already know that it's probably

592
00:26:13,279 --> 00:26:15,760
better to have a um

593
00:26:15,760 --> 00:26:17,679
congestion control algorithm which is

594
00:26:17,679 --> 00:26:19,840
specified for real time and we would

595
00:26:19,840 --> 00:26:23,039
rather look at these today

596
00:26:23,440 --> 00:26:25,440
the next option is that we disabled

597
00:26:25,440 --> 00:26:27,600
quick internal congestion control and we

598
00:26:27,600 --> 00:26:28,960
only use the real-time congestion

599
00:26:28,960 --> 00:26:30,799
controller like we would use for example

600
00:26:30,799 --> 00:26:32,960
over udp like the algorithms from our

601
00:26:32,960 --> 00:26:35,200
cut

602
00:26:36,159 --> 00:26:38,400
in our experiments we use screen because

603
00:26:38,400 --> 00:26:39,200
the

604
00:26:39,200 --> 00:26:41,200
existing implementation for screen was

605
00:26:41,200 --> 00:26:43,679
quite easy to integrate in our setup

606
00:26:43,679 --> 00:26:45,120
and then in the last um

607
00:26:45,120 --> 00:26:46,240
[Music]

608
00:26:46,240 --> 00:26:48,880
combination we used scream and neurano

609
00:26:48,880 --> 00:26:50,159
together

610
00:26:50,159 --> 00:26:51,600
and

611
00:26:51,600 --> 00:26:53,760
on the next slide i have a

612
00:26:53,760 --> 00:26:56,640
couple of notes on how to reduce rtcp

613
00:26:56,640 --> 00:26:58,000
feedback

614
00:26:58,000 --> 00:26:58,960
um

615
00:26:58,960 --> 00:27:00,320
we would like to use the quick

616
00:27:00,320 --> 00:27:01,679
connection stats which are already

617
00:27:01,679 --> 00:27:05,120
available in the transport protocol to

618
00:27:05,120 --> 00:27:07,200
reduce the rtcp overhead

619
00:27:07,200 --> 00:27:11,600
and in quick we have the datagram draft

620
00:27:11,600 --> 00:27:13,840
which allows an implementation to expose

621
00:27:13,840 --> 00:27:16,720
the datagram acknowledgments to the

622
00:27:16,720 --> 00:27:18,000
application

623
00:27:18,000 --> 00:27:20,960
and we're using this to identify which

624
00:27:20,960 --> 00:27:24,960
rtp packets have arrived at the receiver

625
00:27:24,960 --> 00:27:28,240
um we keep track of the send rtp packets

626
00:27:28,240 --> 00:27:30,000
and in which datagrams they were sent

627
00:27:30,000 --> 00:27:31,679
and at what time they were sent so we

628
00:27:31,679 --> 00:27:33,600
have the timestamp and as soon as an

629
00:27:33,600 --> 00:27:35,039
acknowledgement arrives we know that

630
00:27:35,039 --> 00:27:38,960
this rtp packet has been received

631
00:27:38,960 --> 00:27:41,919
and then we also use the rtt samples

632
00:27:41,919 --> 00:27:43,440
provided by the quick connection

633
00:27:43,440 --> 00:27:45,039
statistics

634
00:27:45,039 --> 00:27:46,480
to

635
00:27:46,480 --> 00:27:50,320
infer a receive timestamp at which the

636
00:27:50,320 --> 00:27:53,039
packet arrived at the receiver by just

637
00:27:53,039 --> 00:27:55,200
adding half of the rtt

638
00:27:55,200 --> 00:27:57,520
the last known rtt to the same timestamp

639
00:27:57,520 --> 00:28:00,879
we kept track of earlier

640
00:28:01,200 --> 00:28:03,279
uh the next slide i have a short

641
00:28:03,279 --> 00:28:05,679
overview of our test implementation

642
00:28:05,679 --> 00:28:07,679
um we integrated

643
00:28:07,679 --> 00:28:10,159
quick go with g streamer and the screen

644
00:28:10,159 --> 00:28:12,159
implementation

645
00:28:12,159 --> 00:28:14,399
um

646
00:28:14,399 --> 00:28:15,520
the

647
00:28:15,520 --> 00:28:18,480
application transmit video data in rtp

648
00:28:18,480 --> 00:28:21,279
packets from one sender to a receiver

649
00:28:21,279 --> 00:28:24,240
um using g streamer to encode and

650
00:28:24,240 --> 00:28:28,960
packetize rtp packets which are then

651
00:28:28,960 --> 00:28:30,399
prepended with the flow identifier we

652
00:28:30,399 --> 00:28:32,080
talked about earlier and sent to the

653
00:28:32,080 --> 00:28:33,279
receiver

654
00:28:33,279 --> 00:28:36,000
um the receiver takes the

655
00:28:36,000 --> 00:28:37,200
um

656
00:28:37,200 --> 00:28:39,600
rtp packet and identifies the itp

657
00:28:39,600 --> 00:28:41,840
session and

658
00:28:41,840 --> 00:28:44,320
forwards the data from the package to

659
00:28:44,320 --> 00:28:47,840
the corresponding rg streamer pipeline

660
00:28:47,840 --> 00:28:49,919
and

661
00:28:49,919 --> 00:28:52,399
then we use a slightly modified version

662
00:28:52,399 --> 00:28:54,720
of quick go to be able to selectively

663
00:28:54,720 --> 00:28:57,600
disable new venue in our experiments and

664
00:28:57,600 --> 00:28:59,200
also to

665
00:28:59,200 --> 00:29:01,279
expose the connection statistics and the

666
00:29:01,279 --> 00:29:04,399
datagram acknowledgements

667
00:29:04,399 --> 00:29:07,039
uh we build a testbed setup on the next

668
00:29:07,039 --> 00:29:10,360
slide please

669
00:29:14,720 --> 00:29:16,799
yes i had a question about the

670
00:29:16,799 --> 00:29:17,919
uh

671
00:29:17,919 --> 00:29:20,080
the time stamp feedback

672
00:29:20,080 --> 00:29:21,360
um from

673
00:29:21,360 --> 00:29:23,279
from what i understand the the purpose

674
00:29:23,279 --> 00:29:25,200
of that in rtcp

675
00:29:25,200 --> 00:29:27,279
is for congestion controls to understand

676
00:29:27,279 --> 00:29:29,120
the one-way delay

677
00:29:29,120 --> 00:29:31,200
to understand variance in one-way delay

678
00:29:31,200 --> 00:29:33,279
and those delay-sensitive algorithms

679
00:29:33,279 --> 00:29:36,080
um can use that high-fidelity

680
00:29:36,080 --> 00:29:38,320
one-way delay inferencing

681
00:29:38,320 --> 00:29:40,480
from that but if you're basing if you're

682
00:29:40,480 --> 00:29:42,320
trying to synthesize that using round

683
00:29:42,320 --> 00:29:43,840
trip times it seems like you've lost the

684
00:29:43,840 --> 00:29:46,080
one-way delay aspect of that which may

685
00:29:46,080 --> 00:29:47,760
be important for some of those

686
00:29:47,760 --> 00:29:48,559
uh

687
00:29:48,559 --> 00:29:49,840
uh some of those congestion control

688
00:29:49,840 --> 00:29:52,320
algorithms

689
00:29:52,480 --> 00:29:54,240
uh yeah i think we will get back to that

690
00:29:54,240 --> 00:29:56,559
in a later slide on the results for this

691
00:29:56,559 --> 00:29:57,760
inferring

692
00:29:57,760 --> 00:30:01,200
and there are drafts um or quite recent

693
00:30:01,200 --> 00:30:03,840
drafts which also try to use the um

694
00:30:03,840 --> 00:30:05,440
receive time stamps directly in

695
00:30:05,440 --> 00:30:06,799
acknowledgements i will reference that

696
00:30:06,799 --> 00:30:09,799
later

697
00:30:12,640 --> 00:30:15,600
yeah next slide please

698
00:30:16,320 --> 00:30:18,880
so we have a test pad set up in which we

699
00:30:18,880 --> 00:30:21,919
run both of the applications in separate

700
00:30:21,919 --> 00:30:23,919
containers on the same host

701
00:30:23,919 --> 00:30:25,600
and we use

702
00:30:25,600 --> 00:30:27,440
the virtual network interfaces in the

703
00:30:27,440 --> 00:30:29,360
containers to

704
00:30:29,360 --> 00:30:32,320
simulate different network conditions

705
00:30:32,320 --> 00:30:34,159
we configured a bandwidth limit of one

706
00:30:34,159 --> 00:30:37,279
megabit per second and we run

707
00:30:37,279 --> 00:30:39,120
the experiments with different one-way

708
00:30:39,120 --> 00:30:40,880
delays and

709
00:30:40,880 --> 00:30:43,679
after 60 seconds of a video run

710
00:30:43,679 --> 00:30:46,000
for video transmission we reduce the

711
00:30:46,000 --> 00:30:48,559
available link capacity to 500 kilobits

712
00:30:48,559 --> 00:30:52,080
per second to see how the algorithms and

713
00:30:52,080 --> 00:30:54,720
the transport react to this

714
00:30:54,720 --> 00:30:56,559
and then our application locks incoming

715
00:30:56,559 --> 00:31:00,080
and outgoing rtp and rtcp packets for

716
00:31:00,080 --> 00:31:02,399
analyzers afterwards and

717
00:31:02,399 --> 00:31:06,240
will to calculate psnr and sm statistics

718
00:31:06,240 --> 00:31:09,519
on the raw video files

719
00:31:09,600 --> 00:31:12,799
uh next slide please

720
00:31:13,200 --> 00:31:15,360
so the first results for

721
00:31:15,360 --> 00:31:18,480
um screen using rtp over

722
00:31:18,480 --> 00:31:21,519
for rtp over quick using stream screen

723
00:31:21,519 --> 00:31:25,600
and comparing this to udp

724
00:31:26,960 --> 00:31:29,360
the left graph shows the quick

725
00:31:29,360 --> 00:31:31,679
implementation and the right one udp and

726
00:31:31,679 --> 00:31:33,360
we can see that the results are quite

727
00:31:33,360 --> 00:31:36,080
similar so it seems to be possible to to

728
00:31:36,080 --> 00:31:38,080
use um

729
00:31:38,080 --> 00:31:43,360
quick data grams to transmit rtp and

730
00:31:43,360 --> 00:31:46,799
we can also see that the

731
00:31:47,120 --> 00:31:49,279
target bit rate of the screen condition

732
00:31:49,279 --> 00:31:52,000
control are slightly below the one in

733
00:31:52,000 --> 00:31:53,039
udp

734
00:31:53,039 --> 00:31:55,440
we're not exactly sure why yet maybe due

735
00:31:55,440 --> 00:31:57,039
to some overhead but we need to

736
00:31:57,039 --> 00:31:58,840
investigate that

737
00:31:58,840 --> 00:32:01,840
further on the next slide

738
00:32:01,840 --> 00:32:03,360
so please hold on

739
00:32:03,360 --> 00:32:05,440
the screen plus quick is just the quick

740
00:32:05,440 --> 00:32:07,360
congestion control replaced by screen

741
00:32:07,360 --> 00:32:08,799
right

742
00:32:08,799 --> 00:32:09,760
yes

743
00:32:09,760 --> 00:32:12,000
okay

744
00:32:13,200 --> 00:32:15,440
uh then on the next slide we

745
00:32:15,440 --> 00:32:16,240
um

746
00:32:16,240 --> 00:32:17,760
leave the quick congestion controller

747
00:32:17,760 --> 00:32:19,760
enabled and we congestion control the

748
00:32:19,760 --> 00:32:22,080
real-time traffic by screen before we

749
00:32:22,080 --> 00:32:24,559
put it too quick

750
00:32:24,559 --> 00:32:27,200
so everything um

751
00:32:27,200 --> 00:32:29,200
goes through the both combustion

752
00:32:29,200 --> 00:32:33,039
controllers and we see that in the first

753
00:32:33,039 --> 00:32:35,200
part of the video transmission

754
00:32:35,200 --> 00:32:37,279
it seems to behave very similar to the

755
00:32:37,279 --> 00:32:39,200
previous slide um

756
00:32:39,200 --> 00:32:41,679
but that probably is due to application

757
00:32:41,679 --> 00:32:43,600
limited transmission so

758
00:32:43,600 --> 00:32:46,960
as long as screen is

759
00:32:46,960 --> 00:32:49,470
sending less data than urinal would

760
00:32:49,470 --> 00:32:50,960
[Music]

761
00:32:50,960 --> 00:32:52,080
then we

762
00:32:52,080 --> 00:32:53,919
are in this

763
00:32:53,919 --> 00:32:56,559
application limited state where um

764
00:32:56,559 --> 00:32:58,960
neurano doesn't really do much yet

765
00:32:58,960 --> 00:33:00,960
but as soon as then the link capacity is

766
00:33:00,960 --> 00:33:03,039
reduced to 500 kilobits per second for

767
00:33:03,039 --> 00:33:06,000
30 seconds we see that both congestion

768
00:33:06,000 --> 00:33:07,279
controllers

769
00:33:07,279 --> 00:33:09,519
try to

770
00:33:09,519 --> 00:33:12,559
adapt to the new link capacity and the

771
00:33:12,559 --> 00:33:14,320
the screen target bitrate drops to

772
00:33:14,320 --> 00:33:16,320
almost zero and the ramp up also does

773
00:33:16,320 --> 00:33:18,559
not happen um

774
00:33:18,559 --> 00:33:21,039
at all in the case of a one millisecond

775
00:33:21,039 --> 00:33:23,039
delay it may be that that happens much

776
00:33:23,039 --> 00:33:24,960
later if we looked into it for a longer

777
00:33:24,960 --> 00:33:27,039
time but this is already not really

778
00:33:27,039 --> 00:33:28,480
usable so we didn't investigate that

779
00:33:28,480 --> 00:33:29,519
further

780
00:33:29,519 --> 00:33:32,080
and in the second case our

781
00:33:32,080 --> 00:33:34,720
one-way delay was 15 milliseconds

782
00:33:34,720 --> 00:33:36,799
it seems to be ramping up but also only

783
00:33:36,799 --> 00:33:39,279
much later after the target spirit rate

784
00:33:39,279 --> 00:33:41,039
already dropped to zero

785
00:33:41,039 --> 00:33:43,440
earlier

786
00:33:44,399 --> 00:33:46,399
then on the next slide we

787
00:33:46,399 --> 00:33:48,960
show some results for

788
00:33:48,960 --> 00:33:52,399
trying to reduce rtcp overhead

789
00:33:52,399 --> 00:33:56,080
on the left side we see the results with

790
00:33:56,080 --> 00:33:59,360
rtp over quick using rtcp feedback and

791
00:33:59,360 --> 00:34:01,519
on the right side rgb over quick using

792
00:34:01,519 --> 00:34:03,360
only the inferred feedback i described

793
00:34:03,360 --> 00:34:04,640
earlier

794
00:34:04,640 --> 00:34:07,640
um

795
00:34:08,480 --> 00:34:09,199
we

796
00:34:09,199 --> 00:34:11,550
can see that the

797
00:34:11,550 --> 00:34:12,960
[Music]

798
00:34:12,960 --> 00:34:16,159
the top two experiments looks pretty

799
00:34:16,159 --> 00:34:17,839
similar so it seems to be possible in

800
00:34:17,839 --> 00:34:19,359
general too

801
00:34:19,359 --> 00:34:22,560
um use the quick statistics for rtcp

802
00:34:22,560 --> 00:34:24,079
feedback but we also see that in the

803
00:34:24,079 --> 00:34:26,560
later experiments especially in the 150

804
00:34:26,560 --> 00:34:29,199
milliseconds one way delay the ramp up

805
00:34:29,199 --> 00:34:32,159
in the beginning um works much

806
00:34:32,159 --> 00:34:34,639
slower or starts much slower

807
00:34:34,639 --> 00:34:36,239
and

808
00:34:36,239 --> 00:34:37,839
we

809
00:34:37,839 --> 00:34:39,679
in our experiments we generate the

810
00:34:39,679 --> 00:34:42,000
feedback at a fixed interval and we

811
00:34:42,000 --> 00:34:44,159
think that the

812
00:34:44,159 --> 00:34:46,879
instability in the last experiments

813
00:34:46,879 --> 00:34:50,159
are due to this fixed generation of

814
00:34:50,159 --> 00:34:53,280
feedback which may lead to

815
00:34:53,280 --> 00:34:55,359
some acknowledgements from quick

816
00:34:55,359 --> 00:34:56,960
arriving after

817
00:34:56,960 --> 00:34:58,480
we generate the next feedback even

818
00:34:58,480 --> 00:35:00,880
though the rtp packet has already been

819
00:35:00,880 --> 00:35:02,880
received by the receiver and

820
00:35:02,880 --> 00:35:06,079
due to the delayed and aggregate x they

821
00:35:06,079 --> 00:35:08,320
only arrive a little bit too late at our

822
00:35:08,320 --> 00:35:10,160
sender so that some feedback is not

823
00:35:10,160 --> 00:35:12,160
included which leads to

824
00:35:12,160 --> 00:35:14,240
feedback which would be less precise

825
00:35:14,240 --> 00:35:18,479
than the one rtcp could provide

826
00:35:19,280 --> 00:35:21,760
there are probably

827
00:35:21,760 --> 00:35:24,400
two drafts which could

828
00:35:24,400 --> 00:35:25,920
improve the situation because there's

829
00:35:25,920 --> 00:35:27,599
one draft for

830
00:35:27,599 --> 00:35:30,560
quick timestamps which would give us

831
00:35:30,560 --> 00:35:33,359
timestamps for um

832
00:35:33,359 --> 00:35:35,920
which would help us to

833
00:35:35,920 --> 00:35:37,680
estimate the one-way delay as we already

834
00:35:37,680 --> 00:35:39,359
talked about earlier and then there's a

835
00:35:39,359 --> 00:35:42,320
very recent draft which gives timestamps

836
00:35:42,320 --> 00:35:43,760
for

837
00:35:43,760 --> 00:35:45,760
received packets and that would also

838
00:35:45,760 --> 00:35:47,040
help to

839
00:35:47,040 --> 00:35:48,720
improve the

840
00:35:48,720 --> 00:35:50,480
generated feedback because we then

841
00:35:50,480 --> 00:35:53,599
didn't have wouldn't have to use the

842
00:35:53,599 --> 00:35:56,320
latest rtt samples anymore and instead

843
00:35:56,320 --> 00:35:58,640
we could just use the feedback which is

844
00:35:58,640 --> 00:36:00,400
directly on what we need from quick

845
00:36:00,400 --> 00:36:02,240
instead of inferring it from the

846
00:36:02,240 --> 00:36:04,079
feedback which is already present and

847
00:36:04,079 --> 00:36:06,720
quick now

848
00:36:07,599 --> 00:36:09,520
um then we have one more slide on

849
00:36:09,520 --> 00:36:12,400
prioritization

850
00:36:12,400 --> 00:36:14,880
we run all the experiments again with

851
00:36:14,880 --> 00:36:16,079
the

852
00:36:16,079 --> 00:36:17,359
second

853
00:36:17,359 --> 00:36:20,079
stream opened and quick this time not

854
00:36:20,079 --> 00:36:22,000
datagrams but the real quick stream

855
00:36:22,000 --> 00:36:24,839
which sends constant data

856
00:36:24,839 --> 00:36:26,480
and um

857
00:36:26,480 --> 00:36:29,460
in this case we see that the um

858
00:36:29,460 --> 00:36:31,200
[Music]

859
00:36:31,200 --> 00:36:32,720
application probably needs some

860
00:36:32,720 --> 00:36:35,440
prioritization between real-time data in

861
00:36:35,440 --> 00:36:37,760
quick data grams and background traffic

862
00:36:37,760 --> 00:36:40,320
within the same connection

863
00:36:40,320 --> 00:36:42,640
as

864
00:36:42,960 --> 00:36:46,079
in our experiments we see that the

865
00:36:46,079 --> 00:36:47,760
target bitrate

866
00:36:47,760 --> 00:36:50,320
quickly degrades and it might even

867
00:36:50,320 --> 00:36:51,000
starve

868
00:36:51,000 --> 00:36:52,800
[Music]

869
00:36:52,800 --> 00:36:55,119
because of the background data

870
00:36:55,119 --> 00:36:57,599
and uh yeah there's done probably some

871
00:36:57,599 --> 00:37:00,079
better scheduling of prioritization

872
00:37:00,079 --> 00:37:01,599
necessary

873
00:37:01,599 --> 00:37:02,800
um

874
00:37:02,800 --> 00:37:05,280
but this is also very artificial setup

875
00:37:05,280 --> 00:37:07,520
in our experiments because we really

876
00:37:07,520 --> 00:37:09,920
send a lot of background data and there

877
00:37:09,920 --> 00:37:11,200
are probably

878
00:37:11,200 --> 00:37:12,400
um

879
00:37:12,400 --> 00:37:15,520
better experiments needed with more

880
00:37:15,520 --> 00:37:18,880
natural forms of background traffic like

881
00:37:18,880 --> 00:37:21,119
on-off http request or something like

882
00:37:21,119 --> 00:37:24,240
that instead of constant sending

883
00:37:24,240 --> 00:37:26,560
data

884
00:37:28,480 --> 00:37:31,440
yep then on the last slide i come to the

885
00:37:31,440 --> 00:37:34,079
conclusion

886
00:37:34,160 --> 00:37:36,880
i think there are many three results we

887
00:37:36,880 --> 00:37:39,359
have here so the first one is that it's

888
00:37:39,359 --> 00:37:41,520
probably problematic to run two separate

889
00:37:41,520 --> 00:37:43,280
congestion control loops at the same

890
00:37:43,280 --> 00:37:45,839
time um like

891
00:37:45,839 --> 00:37:47,359
a real-time congestion control algorithm

892
00:37:47,359 --> 00:37:48,480
like screen

893
00:37:48,480 --> 00:37:50,880
for the real-time data and um something

894
00:37:50,880 --> 00:37:53,359
like neurino and quick at the same time

895
00:37:53,359 --> 00:37:55,359
for all of the outgoing

896
00:37:55,359 --> 00:37:57,839
data on the connection

897
00:37:57,839 --> 00:38:00,720
um and the second is that it's probably

898
00:38:00,720 --> 00:38:02,800
possible to use grid

899
00:38:02,800 --> 00:38:04,880
state information to reduce rtcp

900
00:38:04,880 --> 00:38:06,480
feedback

901
00:38:06,480 --> 00:38:08,960
but that could probably also profit from

902
00:38:08,960 --> 00:38:10,720
some optimizations which would be

903
00:38:10,720 --> 00:38:12,160
provided by the

904
00:38:12,160 --> 00:38:14,560
receive timestamp draft or

905
00:38:14,560 --> 00:38:16,960
something similar which would give more

906
00:38:16,960 --> 00:38:19,200
detailed information than just the rtt

907
00:38:19,200 --> 00:38:22,720
and using this rtt for the

908
00:38:22,960 --> 00:38:25,359
debating pro

909
00:38:25,359 --> 00:38:27,280
and then the last point is that

910
00:38:27,280 --> 00:38:30,880
some prioritization is necessary

911
00:38:30,880 --> 00:38:33,920
as we've seen on the last slide

912
00:38:33,920 --> 00:38:36,000
uh yeah in the future we plan to do some

913
00:38:36,000 --> 00:38:38,160
more experiments on

914
00:38:38,160 --> 00:38:39,920
different congestion control algorithms

915
00:38:39,920 --> 00:38:42,160
and different forms of computing traffic

916
00:38:42,160 --> 00:38:45,119
and different network topologies

917
00:38:45,119 --> 00:38:48,079
and we would also like to um

918
00:38:48,079 --> 00:38:50,640
try to find some way to do better

919
00:38:50,640 --> 00:38:53,599
prioritization than no prioritization at

920
00:38:53,599 --> 00:38:56,079
all to see how we can use one quick

921
00:38:56,079 --> 00:38:57,599
connection for

922
00:38:57,599 --> 00:38:59,680
real-time data and non-return data at

923
00:38:59,680 --> 00:39:02,240
the same time

924
00:39:03,359 --> 00:39:06,240
posted in the queue

925
00:39:08,960 --> 00:39:10,480
hey can you hear me

926
00:39:10,480 --> 00:39:11,599
yep yeah

927
00:39:11,599 --> 00:39:12,560
yeah

928
00:39:12,560 --> 00:39:14,800
this is this is really good work uh i'm

929
00:39:14,800 --> 00:39:16,880
glad to see this kind of moving forward

930
00:39:16,880 --> 00:39:18,880
uh i guess i have three points here that

931
00:39:18,880 --> 00:39:21,280
i think are it would be good for us to

932
00:39:21,280 --> 00:39:23,839
try to limit scope um here

933
00:39:23,839 --> 00:39:25,440
uh one would be you know is there

934
00:39:25,440 --> 00:39:28,000
anything besides receive time spawn we

935
00:39:28,000 --> 00:39:30,400
need to have the same information that

936
00:39:30,400 --> 00:39:32,640
rtp or what we had here as

937
00:39:32,640 --> 00:39:34,480
udp

938
00:39:34,480 --> 00:39:35,839
would have

939
00:39:35,839 --> 00:39:37,440
because if i think if we get there then

940
00:39:37,440 --> 00:39:39,760
we can feel pretty confident that

941
00:39:39,760 --> 00:39:41,680
we have everything at a protocol level

942
00:39:41,680 --> 00:39:43,760
you need to do a good real-time

943
00:39:43,760 --> 00:39:46,160
congestion control

944
00:39:46,160 --> 00:39:48,640
second thing is that uh

945
00:39:48,640 --> 00:39:51,040
you know i think trying to prioritize

946
00:39:51,040 --> 00:39:54,079
real-time and non-real time right now uh

947
00:39:54,079 --> 00:39:57,359
might be i think a lot uh and

948
00:39:57,359 --> 00:39:59,119
we might just say open a different quick

949
00:39:59,119 --> 00:40:00,320
connection

950
00:40:00,320 --> 00:40:01,520
or

951
00:40:01,520 --> 00:40:03,280
non-real-time stuff because that's how

952
00:40:03,280 --> 00:40:04,640
it works today

953
00:40:04,640 --> 00:40:07,200
uh and that's that that's where we stop

954
00:40:07,200 --> 00:40:09,119
but that might be a good milestone of

955
00:40:09,119 --> 00:40:10,720
saying that we just

956
00:40:10,720 --> 00:40:12,240
basically replaced the entire congestion

957
00:40:12,240 --> 00:40:15,599
controller if we do rpp flows today and

958
00:40:15,599 --> 00:40:16,880
get that working over quick and i think

959
00:40:16,880 --> 00:40:17,599
that would be a pretty good

960
00:40:17,599 --> 00:40:19,359
accomplishment

961
00:40:19,359 --> 00:40:20,720
and then last

962
00:40:20,720 --> 00:40:22,160
one thing we haven't really talked about

963
00:40:22,160 --> 00:40:23,040
here

964
00:40:23,040 --> 00:40:24,880
is sort of overhead

965
00:40:24,880 --> 00:40:26,880
of um how many more bytes are we putting

966
00:40:26,880 --> 00:40:29,280
on the wire for each rtb packet you know

967
00:40:29,280 --> 00:40:31,520
and where are we sending redundant rtc

968
00:40:31,520 --> 00:40:33,599
feedback and it'll be good to sort of

969
00:40:33,599 --> 00:40:35,359
dive into that and see you know what

970
00:40:35,359 --> 00:40:36,880
those numbers are and then we start

971
00:40:36,880 --> 00:40:38,160
thinking about is there anything that

972
00:40:38,160 --> 00:40:41,920
can be done to mitigate that

973
00:40:49,520 --> 00:40:52,319
yeah i i i think i agree with all of the

974
00:40:52,319 --> 00:40:54,240
points you say

975
00:40:54,240 --> 00:40:56,160
um

976
00:40:56,160 --> 00:40:58,399
yeah

977
00:40:58,640 --> 00:41:02,040
uh sergio

978
00:41:11,599 --> 00:41:15,480
seriously i don't hear you

979
00:41:20,880 --> 00:41:22,480
seriously i'll see if you can figure out

980
00:41:22,480 --> 00:41:26,680
your audio in anytime soon us

981
00:41:36,800 --> 00:41:39,760
i'm not hearing so fast either

982
00:41:39,760 --> 00:41:40,720
oh

983
00:41:40,720 --> 00:41:42,160
i'm here

984
00:41:42,160 --> 00:41:44,400
yeah now here yes yes i do

985
00:41:44,400 --> 00:41:46,880
okay so i just wanted to echo on some

986
00:41:46,880 --> 00:41:48,720
point and make an observation what

987
00:41:48,720 --> 00:41:50,720
justin made and also clarification

988
00:41:50,720 --> 00:41:53,439
question is uh

989
00:41:54,800 --> 00:41:56,800
what's the main specific reason why uh

990
00:41:56,800 --> 00:41:58,160
rtp

991
00:41:58,160 --> 00:42:00,640
uh was considered for this investigation

992
00:42:00,640 --> 00:42:03,040
is that was it was a reason because

993
00:42:03,040 --> 00:42:05,599
some some sense of interoperability with

994
00:42:05,599 --> 00:42:09,040
existing rpg stacks or or or uh was that

995
00:42:09,040 --> 00:42:11,040
a protocol of choice to pick i just want

996
00:42:11,040 --> 00:42:12,319
to understand the

997
00:42:12,319 --> 00:42:16,040
context behind that

998
00:42:16,160 --> 00:42:18,960
can you hear me now

999
00:42:18,960 --> 00:42:20,720
yes

1000
00:42:20,720 --> 00:42:22,560
okay it's stupid

1001
00:42:22,560 --> 00:42:25,359
see i had the the headset muted even i

1002
00:42:25,359 --> 00:42:26,480
spoke okay

1003
00:42:26,480 --> 00:42:28,880
so um i think let's

1004
00:42:28,880 --> 00:42:32,319
let mathis respond to us first

1005
00:42:32,319 --> 00:42:33,920
sorry i'm not sure i understand the

1006
00:42:33,920 --> 00:42:35,359
question was a bit hard to understand

1007
00:42:35,359 --> 00:42:36,480
i'm sorry

1008
00:42:36,480 --> 00:42:37,520
yeah that

1009
00:42:37,520 --> 00:42:39,520
that first is even that's i think that

1010
00:42:39,520 --> 00:42:41,760
this is awesome work and if you have the

1011
00:42:41,760 --> 00:42:44,000
goal there to replicate the results and

1012
00:42:44,000 --> 00:42:47,280
maybe this on our own

1013
00:42:47,520 --> 00:42:50,160
uh yeah we have we have the code um it

1014
00:42:50,160 --> 00:42:53,760
is on github but it's not pro probably

1015
00:42:53,760 --> 00:42:55,839
documented right now but we plan to do

1016
00:42:55,839 --> 00:42:57,440
that soon

1017
00:42:57,440 --> 00:42:59,680
yeah i i was also interested in how to

1018
00:42:59,680 --> 00:43:01,599
replicate the the network application i

1019
00:43:01,599 --> 00:43:03,200
think like that so because the code is

1020
00:43:03,200 --> 00:43:05,760
typically available but the the

1021
00:43:05,760 --> 00:43:08,000
how how to replicate the asphalt test is

1022
00:43:08,000 --> 00:43:11,440
could be interesting as well

1023
00:43:11,680 --> 00:43:13,680
yeah we can share that differently

1024
00:43:13,680 --> 00:43:15,440
okay and the second thing is that i

1025
00:43:15,440 --> 00:43:16,800
think that

1026
00:43:16,800 --> 00:43:18,480
one thing that it is also related to the

1027
00:43:18,480 --> 00:43:20,720
web transport thing is that this kind of

1028
00:43:20,720 --> 00:43:22,400
test seems to be very

1029
00:43:22,400 --> 00:43:24,800
focused on what a native application can

1030
00:43:24,800 --> 00:43:26,960
do by modifying or adding integrating

1031
00:43:26,960 --> 00:43:29,599
deeply with the quick stack

1032
00:43:29,599 --> 00:43:31,340
or providing or

1033
00:43:31,340 --> 00:43:32,720
[Music]

1034
00:43:32,720 --> 00:43:36,000
but in if we are using web transfer

1035
00:43:36,000 --> 00:43:38,800
and i think that we have to consider

1036
00:43:38,800 --> 00:43:41,119
also what will happen if the

1037
00:43:41,119 --> 00:43:42,560
if the downward destination is going to

1038
00:43:42,560 --> 00:43:44,079
be ruined in javascript because probably

1039
00:43:44,079 --> 00:43:46,480
the the browser will not provide a

1040
00:43:46,480 --> 00:43:49,040
de facto bandwidth estimation

1041
00:43:49,040 --> 00:43:50,880
for the application level

1042
00:43:50,880 --> 00:43:52,560
uh how can we

1043
00:43:52,560 --> 00:43:54,880
make this work when the the

1044
00:43:54,880 --> 00:43:56,400
application that it is using the quick

1045
00:43:56,400 --> 00:43:59,440
stack is untrusted for example

1046
00:43:59,440 --> 00:44:01,839
we are going to replace the the rtcp

1047
00:44:01,839 --> 00:44:03,040
feedback

1048
00:44:03,040 --> 00:44:04,400
from

1049
00:44:04,400 --> 00:44:06,960
from this quick feedback uh how this

1050
00:44:06,960 --> 00:44:09,119
will be exposed to the application

1051
00:44:09,119 --> 00:44:11,119
because i think that they will impact

1052
00:44:11,119 --> 00:44:13,440
quite a lot what we will be able to do

1053
00:44:13,440 --> 00:44:16,400
with west transport

1054
00:44:17,280 --> 00:44:19,520
um yeah i think

1055
00:44:19,520 --> 00:44:20,480
this is

1056
00:44:20,480 --> 00:44:22,079
very much focused on our native

1057
00:44:22,079 --> 00:44:23,599
application right now which we built for

1058
00:44:23,599 --> 00:44:24,560
testing

1059
00:44:24,560 --> 00:44:27,119
and there will probably

1060
00:44:27,119 --> 00:44:29,200
be a need for more broader discussion on

1061
00:44:29,200 --> 00:44:32,480
api things in the future

1062
00:44:33,040 --> 00:44:35,200
yeah because for example i doubt that we

1063
00:44:35,200 --> 00:44:37,119
can just disable the

1064
00:44:37,119 --> 00:44:39,359
the quick confession control and let the

1065
00:44:39,359 --> 00:44:40,090
application

1066
00:44:40,090 --> 00:44:41,680
[Music]

1067
00:44:41,680 --> 00:44:43,280
run on javascript

1068
00:44:43,280 --> 00:44:44,560
just do

1069
00:44:44,560 --> 00:44:46,079
behave properly

1070
00:44:46,079 --> 00:44:48,560
so we will have to find a way of trying

1071
00:44:48,560 --> 00:44:50,960
to have both working simultaneously you

1072
00:44:50,960 --> 00:44:52,000
know

1073
00:44:52,000 --> 00:44:53,920
i think that it was sometime proposed

1074
00:44:53,920 --> 00:44:56,960
that have some good breakers in case the

1075
00:44:56,960 --> 00:44:58,960
the bandwidth estimation done by the

1076
00:44:58,960 --> 00:45:01,200
application is to is not behaving

1077
00:45:01,200 --> 00:45:03,040
properly or things like that

1078
00:45:03,040 --> 00:45:06,319
but but anyway i think that it is a very

1079
00:45:06,319 --> 00:45:08,480
great work that you have done so far and

1080
00:45:08,480 --> 00:45:11,359
just hope to be able to improve it

1081
00:45:11,359 --> 00:45:14,359
thanks

1082
00:45:19,760 --> 00:45:22,079
i guess bernard you're next up that's

1083
00:45:22,079 --> 00:45:24,400
going to do it

1084
00:45:25,520 --> 00:45:27,680
uh i guess i had uh

1085
00:45:27,680 --> 00:45:29,680
wanted to focus on some of the questions

1086
00:45:29,680 --> 00:45:32,480
yanivar asked

1087
00:45:32,480 --> 00:45:33,520
which is

1088
00:45:33,520 --> 00:45:35,599
i guess your paper has the different

1089
00:45:35,599 --> 00:45:37,760
metrics that you've

1090
00:45:37,760 --> 00:45:38,960
been using

1091
00:45:38,960 --> 00:45:41,119
and i guess most of those are probably

1092
00:45:41,119 --> 00:45:44,240
exposable in web transport

1093
00:45:44,240 --> 00:45:46,960
including that the time stamp info i

1094
00:45:46,960 --> 00:45:48,480
guess the one thing that wouldn't

1095
00:45:48,480 --> 00:45:51,839
potentially be exposable is the detailed

1096
00:45:51,839 --> 00:45:53,599
act data

1097
00:45:53,599 --> 00:45:56,560
because um in a browser basically you

1098
00:45:56,560 --> 00:45:58,160
can't assume that

1099
00:45:58,160 --> 00:46:00,640
that the acts reflect the application

1100
00:46:00,640 --> 00:46:03,760
uh what it got but maybe uh

1101
00:46:03,760 --> 00:46:06,960
uh the the timestamp uh and other info

1102
00:46:06,960 --> 00:46:08,319
from the acts

1103
00:46:08,319 --> 00:46:11,119
uh could be could be provided up

1104
00:46:11,119 --> 00:46:13,200
i guess uh

1105
00:46:13,200 --> 00:46:15,040
and and originally in web transport we

1106
00:46:15,040 --> 00:46:17,680
did have the concept of uh adding a

1107
00:46:17,680 --> 00:46:19,599
congestion control selector to the

1108
00:46:19,599 --> 00:46:21,920
constructor and i guess to justin's

1109
00:46:21,920 --> 00:46:23,520
point that would be on a quick

1110
00:46:23,520 --> 00:46:25,200
connection level

1111
00:46:25,200 --> 00:46:27,680
um so i guess

1112
00:46:27,680 --> 00:46:30,079
one thing to think about would be if you

1113
00:46:30,079 --> 00:46:30,960
had

1114
00:46:30,960 --> 00:46:32,480
separate quick connections instead of

1115
00:46:32,480 --> 00:46:34,160
the prioritization thing operating with

1116
00:46:34,160 --> 00:46:36,560
different congestion control algorithms

1117
00:46:36,560 --> 00:46:41,078
um what the behavior might be there

1118
00:46:44,240 --> 00:46:47,040
uh and also web transport does have uh

1119
00:46:47,040 --> 00:46:48,480
prioritization built in but it's

1120
00:46:48,480 --> 00:46:50,640
probably of the kind that your research

1121
00:46:50,640 --> 00:46:52,880
shows is going to be problematic

1122
00:46:52,880 --> 00:46:54,560
uh which is basically right now the

1123
00:46:54,560 --> 00:46:58,560
datagrams get get uh absolute priority

1124
00:46:58,560 --> 00:47:00,800
um so they will starve out the uh the

1125
00:47:00,800 --> 00:47:03,520
reliable streams

1126
00:47:03,520 --> 00:47:05,839
um yeah i think we could do more

1127
00:47:05,839 --> 00:47:07,920
experiments on that in web transport

1128
00:47:07,920 --> 00:47:11,119
especially under prioritization and

1129
00:47:11,119 --> 00:47:13,200
i agree that it might be hard to

1130
00:47:13,200 --> 00:47:14,960
expose all of the data we use in our

1131
00:47:14,960 --> 00:47:17,760
experiments yet

1132
00:47:18,079 --> 00:47:19,760
yep

1133
00:47:19,760 --> 00:47:22,800
okay thank you

1134
00:47:23,280 --> 00:47:25,839
spencer

1135
00:47:30,880 --> 00:47:32,800
i wanted to thank you for uh bringing

1136
00:47:32,800 --> 00:47:34,480
this work uh

1137
00:47:34,480 --> 00:47:37,200
forward and thank the chairs for bring

1138
00:47:37,200 --> 00:47:39,760
this uh oregon

1139
00:47:39,760 --> 00:47:42,480
navy avt core

1140
00:47:42,480 --> 00:47:43,520
the

1141
00:47:43,520 --> 00:47:45,440
question i probably have or the suggest

1142
00:47:45,440 --> 00:47:46,960
i have is

1143
00:47:46,960 --> 00:47:48,160
uh

1144
00:47:48,160 --> 00:47:51,440
this draft did not actually flag avt

1145
00:47:51,440 --> 00:47:54,240
core in the file name and i've been

1146
00:47:54,240 --> 00:47:56,160
having some conversations on the media

1147
00:47:56,160 --> 00:47:57,599
of a quick

1148
00:47:57,599 --> 00:48:00,559
mailing list which is only available

1149
00:48:00,559 --> 00:48:01,839
uh

1150
00:48:01,839 --> 00:48:03,680
about about another draft that's

1151
00:48:03,680 --> 00:48:06,480
relevant here that doesn't have avt core

1152
00:48:06,480 --> 00:48:07,440
in the name

1153
00:48:07,440 --> 00:48:09,040
it was focused on

1154
00:48:09,040 --> 00:48:10,079
uh

1155
00:48:10,079 --> 00:48:12,800
the svp for uh

1156
00:48:12,800 --> 00:48:14,559
or keeping over quick

1157
00:48:14,559 --> 00:48:16,800
but uh

1158
00:48:16,800 --> 00:48:18,960
recognizing that that was going to have

1159
00:48:18,960 --> 00:48:20,480
know a lot of

1160
00:48:20,480 --> 00:48:22,960
uh a lot was going to have to reflect a

1161
00:48:22,960 --> 00:48:25,040
lot of discussions about

1162
00:48:25,040 --> 00:48:26,000
uh

1163
00:48:26,000 --> 00:48:27,119
what

1164
00:48:27,119 --> 00:48:29,359
rtp over quick was actually going to

1165
00:48:29,359 --> 00:48:31,520
look like uh

1166
00:48:31,520 --> 00:48:32,800
or we

1167
00:48:32,800 --> 00:48:34,880
for the chairs are you are we to the

1168
00:48:34,880 --> 00:48:36,559
point where we should be putting mvt

1169
00:48:36,559 --> 00:48:39,280
core the in the draft beams we get more

1170
00:48:39,280 --> 00:48:43,200
visibility within the group here

1171
00:48:44,480 --> 00:48:45,050
um

1172
00:48:45,050 --> 00:48:46,559
[Music]

1173
00:48:46,559 --> 00:48:49,520
i mean i don't know is the short answer

1174
00:48:49,520 --> 00:48:51,760
i mean because i mean we don't know if

1175
00:48:51,760 --> 00:48:52,880
this is ultimately going to end up in

1176
00:48:52,880 --> 00:48:55,280
avt core i mean visibility is good i

1177
00:48:55,280 --> 00:48:57,920
understand that yeah i'm thinking mostly

1178
00:48:57,920 --> 00:48:59,359
from the standpoint of making sure the

1179
00:48:59,359 --> 00:49:03,558
right people are looking at it

1180
00:49:04,640 --> 00:49:07,040
um

1181
00:49:07,359 --> 00:49:10,319
you all can think about that and yeah

1182
00:49:10,319 --> 00:49:12,319
yeah sure

1183
00:49:12,319 --> 00:49:14,480
the the discussions we've been having

1184
00:49:14,480 --> 00:49:15,440
for

1185
00:49:15,440 --> 00:49:18,079
uh my draft in this space and uh the

1186
00:49:18,079 --> 00:49:20,640
over in the mock mailing list are i

1187
00:49:20,640 --> 00:49:22,559
think they're definitely ready uh to

1188
00:49:22,559 --> 00:49:23,920
move into

1189
00:49:23,920 --> 00:49:25,599
uh

1190
00:49:25,599 --> 00:49:28,079
abc core or a group like that rather

1191
00:49:28,079 --> 00:49:30,720
than kind of an ad hoc overall media

1192
00:49:30,720 --> 00:49:32,480
over a quick discussion yeah i mean

1193
00:49:32,480 --> 00:49:34,480
insofar as things are you know rtp is

1194
00:49:34,480 --> 00:49:36,800
feel free to tire them at abd card it's

1195
00:49:36,800 --> 00:49:39,839
you know it doesn't hurt anything

1196
00:49:39,839 --> 00:49:44,440
thank you thank you so much yeah

1197
00:49:46,880 --> 00:49:50,000
uh bernadette

1198
00:49:56,240 --> 00:49:58,959
remembers a lot

1199
00:50:00,160 --> 00:50:02,720
yeah hi um so i mean there's a bunch of

1200
00:50:02,720 --> 00:50:05,040
discussion in the chat about short-term

1201
00:50:05,040 --> 00:50:07,119
and long-term approaches and i think

1202
00:50:07,119 --> 00:50:09,040
that's important i think

1203
00:50:09,040 --> 00:50:11,520
we should make sure we have that broader

1204
00:50:11,520 --> 00:50:13,119
architectural conversation about where

1205
00:50:13,119 --> 00:50:14,960
we want to go rather than necessarily

1206
00:50:14,960 --> 00:50:16,160
just

1207
00:50:16,160 --> 00:50:18,960
sleepwalking into into reusing our tp

1208
00:50:18,960 --> 00:50:20,079
here

1209
00:50:20,079 --> 00:50:23,520
um the the the actual reason i i got up

1210
00:50:23,520 --> 00:50:26,319
to the mic was um you know the comments

1211
00:50:26,319 --> 00:50:28,240
about using separate connections to

1212
00:50:28,240 --> 00:50:30,240
avoid having the the congestion control

1213
00:50:30,240 --> 00:50:32,800
prioritization discussion uh i mean

1214
00:50:32,800 --> 00:50:34,720
separate connections causes quite a lot

1215
00:50:34,720 --> 00:50:38,079
of pain in in the current model um and

1216
00:50:38,079 --> 00:50:38,460
um

1217
00:50:38,460 --> 00:50:39,920
[Music]

1218
00:50:39,920 --> 00:50:42,079
we we should uh have it have a

1219
00:50:42,079 --> 00:50:44,079
deliberate discussion about whether we

1220
00:50:44,079 --> 00:50:45,920
we think that's acceptable pain or

1221
00:50:45,920 --> 00:50:48,880
whether we want to

1222
00:50:49,200 --> 00:50:52,079
make conscious effort to reduce that and

1223
00:50:52,079 --> 00:50:53,839
try to make everything run over a single

1224
00:50:53,839 --> 00:50:55,200
connection even if it means more

1225
00:50:55,200 --> 00:50:57,760
congestion control and prioritization

1226
00:50:57,760 --> 00:51:00,760
work

1227
00:51:08,720 --> 00:51:11,598
okay james

1228
00:51:12,800 --> 00:51:14,640
uh thank you thank you for doing this

1229
00:51:14,640 --> 00:51:17,599
work uh the question that i have is

1230
00:51:17,599 --> 00:51:19,599
you've only looked at doing this in the

1231
00:51:19,599 --> 00:51:22,400
uni-directional flow right this is just

1232
00:51:22,400 --> 00:51:25,280
a sender of one sender one with the one

1233
00:51:25,280 --> 00:51:28,160
flow of media correct

1234
00:51:28,160 --> 00:51:29,839
yes true

1235
00:51:29,839 --> 00:51:32,559
cool in our experimentations it is

1236
00:51:32,559 --> 00:51:34,800
probably possible to build something

1237
00:51:34,800 --> 00:51:36,160
else with the draft but that's what we

1238
00:51:36,160 --> 00:51:38,160
experimented with yeah

1239
00:51:38,160 --> 00:51:40,400
cool i think that when we

1240
00:51:40,400 --> 00:51:42,960
get sort of tagging on from uh colin's

1241
00:51:42,960 --> 00:51:45,400
last remark around

1242
00:51:45,400 --> 00:51:47,760
connections and and just various

1243
00:51:47,760 --> 00:51:49,680
thoughts are how

1244
00:51:49,680 --> 00:51:52,000
multiplexing might be dealt with in this

1245
00:51:52,000 --> 00:51:53,280
space

1246
00:51:53,280 --> 00:51:54,880
bi-directional

1247
00:51:54,880 --> 00:51:56,960
of flows of media should also be

1248
00:51:56,960 --> 00:51:58,559
considered as well

1249
00:51:58,559 --> 00:51:59,359
um

1250
00:51:59,359 --> 00:52:01,119
we've had an awful lot of discussions

1251
00:52:01,119 --> 00:52:03,839
earlier this week in the media of the

1252
00:52:03,839 --> 00:52:06,400
moq side meeting and in other sort of

1253
00:52:06,400 --> 00:52:07,520
forums

1254
00:52:07,520 --> 00:52:10,160
around those use cases and

1255
00:52:10,160 --> 00:52:12,160
i think that there may be and this is a

1256
00:52:12,160 --> 00:52:14,240
hand wave uh

1257
00:52:14,240 --> 00:52:17,599
potential issues when it comes to uh

1258
00:52:17,599 --> 00:52:19,839
complex competition between congestion

1259
00:52:19,839 --> 00:52:22,400
control depending on which way

1260
00:52:22,400 --> 00:52:24,240
we tackle the conductivity and

1261
00:52:24,240 --> 00:52:27,839
multiplexing of the sessions

1262
00:52:28,400 --> 00:52:31,040
uh yeah that's probably true

1263
00:52:31,040 --> 00:52:33,119
we were planning to

1264
00:52:33,119 --> 00:52:35,680
or our current test sub setup is kind of

1265
00:52:35,680 --> 00:52:38,720
inspired by the test cases evaluation

1266
00:52:38,720 --> 00:52:41,200
for congestion control from rmcat but

1267
00:52:41,200 --> 00:52:43,280
they don't completely implement all of

1268
00:52:43,280 --> 00:52:44,160
it

1269
00:52:44,160 --> 00:52:46,240
um and yeah as i said we would like to

1270
00:52:46,240 --> 00:52:47,839
do more experimentations with that and

1271
00:52:47,839 --> 00:52:49,839
then we should probably also include

1272
00:52:49,839 --> 00:52:53,200
bi-directional streams there

1273
00:52:56,800 --> 00:52:59,800
justin

1274
00:53:03,920 --> 00:53:06,000
uh so i just wanted to add on to

1275
00:53:06,000 --> 00:53:08,000
comments point uh where he sort of

1276
00:53:08,000 --> 00:53:10,160
mentioned that well maybe we should take

1277
00:53:10,160 --> 00:53:11,200
on

1278
00:53:11,200 --> 00:53:13,680
uh you know prioritization

1279
00:53:13,680 --> 00:53:15,839
know i think that's for any uh specific

1280
00:53:15,839 --> 00:53:17,200
work in this area we probably want to

1281
00:53:17,200 --> 00:53:20,000
have a good sense of what our goals are

1282
00:53:20,000 --> 00:53:22,079
uh you know what would count enough will

1283
00:53:22,079 --> 00:53:24,960
we count as like a reasonable v1

1284
00:53:24,960 --> 00:53:25,839
uh

1285
00:53:25,839 --> 00:53:28,160
what what things do we think we have to

1286
00:53:28,160 --> 00:53:28,880
do

1287
00:53:28,880 --> 00:53:29,599
uh

1288
00:53:29,599 --> 00:53:31,599
i think this author has shown

1289
00:53:31,599 --> 00:53:34,720
you can get you know some results uh

1290
00:53:34,720 --> 00:53:36,079
even just now just by sort of

1291
00:53:36,079 --> 00:53:39,040
encapsulating rtp within quite datagram

1292
00:53:39,040 --> 00:53:41,040
but what would be necessary for us to

1293
00:53:41,040 --> 00:53:42,480
kind of consider is something that we

1294
00:53:42,480 --> 00:53:44,480
want people to play on

1295
00:53:44,480 --> 00:53:45,920
whether it's overhead whether it's

1296
00:53:45,920 --> 00:53:48,000
packet rate optimization

1297
00:53:48,000 --> 00:53:49,920
uh you know this is still an early draft

1298
00:53:49,920 --> 00:53:51,839
so this is fine where it is right now

1299
00:53:51,839 --> 00:53:53,760
but as this moves forward i think kind

1300
00:53:53,760 --> 00:53:55,200
of lining up as a

1301
00:53:55,200 --> 00:53:56,960
working group what do we think that you

1302
00:53:56,960 --> 00:53:58,800
know they should be trying to solve

1303
00:53:58,800 --> 00:54:00,240
i think would help us all kind of get to

1304
00:54:00,240 --> 00:54:02,000
a shared picture of where we want to end

1305
00:54:02,000 --> 00:54:04,160
up

1306
00:54:05,680 --> 00:54:07,040
uh yep

1307
00:54:07,040 --> 00:54:11,079
fully agree with all of that

1308
00:54:17,200 --> 00:54:19,200
okay and we're

1309
00:54:19,200 --> 00:54:20,960
kind of over time but this is dairy with

1310
00:54:20,960 --> 00:54:22,160
a lot of interest so i figured we would

1311
00:54:22,160 --> 00:54:23,599
let us go

1312
00:54:23,599 --> 00:54:25,680
over but thank you all and i guess

1313
00:54:25,680 --> 00:54:27,440
discussion

1314
00:54:27,440 --> 00:54:29,359
um probably on the abt

1315
00:54:29,359 --> 00:54:32,160
list um or the mock list or both

1316
00:54:32,160 --> 00:54:34,000
uh probably if you're interested should

1317
00:54:34,000 --> 00:54:35,839
be subscribed to both but hopefully we

1318
00:54:35,839 --> 00:54:37,040
can try to converge on where we're

1319
00:54:37,040 --> 00:54:38,640
having the discussion

1320
00:54:38,640 --> 00:54:41,119
um and yes then did the authors please

1321
00:54:41,119 --> 00:54:42,319
continue your experiments it's very

1322
00:54:42,319 --> 00:54:43,520
helpful

1323
00:54:43,520 --> 00:54:46,160
uh sergio

1324
00:54:50,160 --> 00:54:50,839
so

1325
00:54:50,839 --> 00:54:53,440
please this

1326
00:54:54,960 --> 00:54:57,839
yeah we have

1327
00:54:57,839 --> 00:54:59,359
hold hold on one second spencer are you

1328
00:54:59,359 --> 00:55:01,680
trying to do something with slides or

1329
00:55:01,680 --> 00:55:02,880
no you're okay

1330
00:55:02,880 --> 00:55:04,960
okay go ahead

1331
00:55:04,960 --> 00:55:08,720
yeah and then we have released

1332
00:55:08,720 --> 00:55:11,759
what are you trying to say something

1333
00:55:12,960 --> 00:55:14,400
no okay i don't know

1334
00:55:14,400 --> 00:55:16,799
okay sorry sorry

1335
00:55:16,799 --> 00:55:20,160
okay so we have been i put a new draft

1336
00:55:20,160 --> 00:55:22,319
for greatness that it is

1337
00:55:22,319 --> 00:55:24,960
does to clarification one was the

1338
00:55:24,960 --> 00:55:27,440
authentication after encryption

1339
00:55:27,440 --> 00:55:30,000
and also how the

1340
00:55:30,000 --> 00:55:31,760
what the they mean what's the minute of

1341
00:55:31,760 --> 00:55:34,160
the crisis attribute when it is present

1342
00:55:34,160 --> 00:55:36,720
with with with bundle

1343
00:55:36,720 --> 00:55:38,960
it does not change the

1344
00:55:38,960 --> 00:55:40,160
anything

1345
00:55:40,160 --> 00:55:42,319
on the draft it's just clarification say

1346
00:55:42,319 --> 00:55:43,760
that were needed because it was not

1347
00:55:43,760 --> 00:55:46,240
clear at the moment

1348
00:55:46,240 --> 00:55:48,319
and regarding the implementation status

1349
00:55:48,319 --> 00:55:50,880
we still have only two implementations

1350
00:55:50,880 --> 00:55:52,960
currently one is

1351
00:55:52,960 --> 00:55:56,480
done by you jonathan and that in the etc

1352
00:55:56,480 --> 00:55:57,280
and

1353
00:55:57,280 --> 00:55:59,599
the the request that i have for leave

1354
00:55:59,599 --> 00:56:02,799
srtp that it is not yet merc but i hope

1355
00:56:02,799 --> 00:56:04,799
that it will be soon

1356
00:56:04,799 --> 00:56:07,599
and we hear the

1357
00:56:07,599 --> 00:56:10,319
uh we have it has been requested for

1358
00:56:10,319 --> 00:56:12,079
publication and

1359
00:56:12,079 --> 00:56:14,160
we are already also

1360
00:56:14,160 --> 00:56:17,839
trying to have a an issue open for for

1361
00:56:17,839 --> 00:56:20,240
adding the api for enable and disable it

1362
00:56:20,240 --> 00:56:23,118
in webrtc

1363
00:56:24,960 --> 00:56:26,559
so

1364
00:56:26,559 --> 00:56:28,880
i think that that's all and i think that

1365
00:56:28,880 --> 00:56:31,839
there is nothing

1366
00:56:32,960 --> 00:56:35,040
for the the review but

1367
00:56:35,040 --> 00:56:36,400
we will just

1368
00:56:36,400 --> 00:56:37,760
need to do the review but i think that

1369
00:56:37,760 --> 00:56:39,359
there is nothing

1370
00:56:39,359 --> 00:56:41,760
pending to to be done in in the current

1371
00:56:41,760 --> 00:56:44,760
draft

1372
00:56:49,440 --> 00:56:52,240
there one more side

1373
00:56:54,880 --> 00:56:56,240
okay

1374
00:56:56,240 --> 00:56:57,440
all right yes i think that's in good

1375
00:56:57,440 --> 00:57:00,000
shape and it's in the hands of our a.d

1376
00:57:00,000 --> 00:57:01,520
now so

1377
00:57:01,520 --> 00:57:04,480
hopefully that will get moving quickly

1378
00:57:04,480 --> 00:57:06,720
uh

1379
00:57:06,880 --> 00:57:09,280
and

1380
00:57:11,040 --> 00:57:12,880
stefan are you presenting

1381
00:57:12,880 --> 00:57:13,920
yes

1382
00:57:13,920 --> 00:57:15,680
yeah hi um

1383
00:57:15,680 --> 00:57:18,799
no this is uh uh the two payload

1384
00:57:18,799 --> 00:57:21,680
formulas for the evc will be a quick

1385
00:57:21,680 --> 00:57:25,558
thing next please

1386
00:57:26,160 --> 00:57:29,040
thank you um

1387
00:57:29,040 --> 00:57:32,319
so we had a working group last call a

1388
00:57:32,319 --> 00:57:34,720
few weeks ago

1389
00:57:34,720 --> 00:57:37,440
a few months ago actually and uh we got

1390
00:57:37,440 --> 00:57:39,839
comments uh from

1391
00:57:39,839 --> 00:57:43,040
from this guy from henry and they were

1392
00:57:43,040 --> 00:57:44,640
all in all

1393
00:57:44,640 --> 00:57:46,640
the the the the

1394
00:57:46,640 --> 00:57:47,839
activity

1395
00:57:47,839 --> 00:57:49,839
on the mailing list in response to this

1396
00:57:49,839 --> 00:57:51,280
working group class called was quite

1397
00:57:51,280 --> 00:57:53,680
active uh we had more than 30 emails

1398
00:57:53,680 --> 00:57:54,640
there

1399
00:57:54,640 --> 00:57:55,599
um

1400
00:57:55,599 --> 00:57:57,359
and

1401
00:57:57,359 --> 00:58:00,079
the comments were also quite extensive

1402
00:58:00,079 --> 00:58:03,040
and uh but over the time

1403
00:58:03,040 --> 00:58:04,079
i think

1404
00:58:04,079 --> 00:58:07,200
we got to a good understanding of what

1405
00:58:07,200 --> 00:58:09,280
the commenters were

1406
00:58:09,280 --> 00:58:12,400
asking and i think we addressed most

1407
00:58:12,400 --> 00:58:13,839
of them

1408
00:58:13,839 --> 00:58:16,880
in this version number 12 which was

1409
00:58:16,880 --> 00:58:18,160
posted

1410
00:58:18,160 --> 00:58:20,160
just before the deadline

1411
00:58:20,160 --> 00:58:21,200
and

1412
00:58:21,200 --> 00:58:23,599
uh we have remembered the revision

1413
00:58:23,599 --> 00:58:26,079
number 13 in the

1414
00:58:26,079 --> 00:58:30,079
in the works um that is currently

1415
00:58:30,079 --> 00:58:32,319
uh reviewed by the authors where miska

1416
00:58:32,319 --> 00:58:35,040
actually uh put in

1417
00:58:35,040 --> 00:58:37,200
uh some additional text uh related to

1418
00:58:37,200 --> 00:58:39,440
the remaining issue somewhere deep down

1419
00:58:39,440 --> 00:58:40,880
in the alpha answer

1420
00:58:40,880 --> 00:58:41,920
um

1421
00:58:41,920 --> 00:58:44,400
and that's

1422
00:58:44,400 --> 00:58:46,960
i mean i i i can promise it for uh

1423
00:58:46,960 --> 00:58:49,040
pretty quickly

1424
00:58:49,040 --> 00:58:51,680
um

1425
00:58:51,680 --> 00:58:53,760
what's a little bit concerning to me is

1426
00:58:53,760 --> 00:58:57,440
that uh our usual suspects here on this

1427
00:58:57,440 --> 00:59:00,240
uh in this work group uh didn't comment

1428
00:59:00,240 --> 00:59:02,240
at all yeah except belmont

1429
00:59:02,240 --> 00:59:05,200
and um but i would

1430
00:59:05,200 --> 00:59:08,480
guess that uh

1431
00:59:08,480 --> 00:59:11,599
that's perhaps because all these uh

1432
00:59:11,599 --> 00:59:13,440
payload formats for

1433
00:59:13,440 --> 00:59:16,720
for um null unit based codecs are so

1434
00:59:16,720 --> 00:59:18,400
similar nowadays that

1435
00:59:18,400 --> 00:59:19,280
that

1436
00:59:19,280 --> 00:59:20,880
perhaps most of the bugs have been

1437
00:59:20,880 --> 00:59:22,480
ironed out

1438
00:59:22,480 --> 00:59:24,240
much earlier but

1439
00:59:24,240 --> 00:59:25,280
i

1440
00:59:25,280 --> 00:59:28,240
really it it would be good if people

1441
00:59:28,240 --> 00:59:30,240
could take one more look at it at some

1442
00:59:30,240 --> 00:59:32,480
point

1443
00:59:32,480 --> 00:59:33,680
now

1444
00:59:33,680 --> 00:59:36,319
i i think the real test will come

1445
00:59:36,319 --> 00:59:38,000
when the thing goes out to publication

1446
00:59:38,000 --> 00:59:40,160
request and

1447
00:59:40,160 --> 00:59:42,720
all these uh

1448
00:59:42,720 --> 00:59:45,599
security guys come out of the woods and

1449
00:59:45,599 --> 00:59:47,200
and talk about

1450
00:59:47,200 --> 00:59:49,520
the newest trend uh that they want to

1451
00:59:49,520 --> 00:59:52,160
see in the security sections

1452
00:59:52,160 --> 00:59:54,160
uh and similar maybe the congestion

1453
00:59:54,160 --> 00:59:58,400
control guys i don't know so um

1454
00:59:58,400 --> 01:00:02,240
yeah and well so what we will be doing

1455
01:00:02,240 --> 01:00:04,720
is we'll publish one more

1456
01:00:04,720 --> 01:00:06,559
uh revision

1457
01:00:06,559 --> 01:00:09,280
of the bbc draft

1458
01:00:09,280 --> 01:00:11,359
uh pretty soon

1459
01:00:11,359 --> 01:00:13,920
i gave you a target date mid of the

1460
01:00:13,920 --> 01:00:15,920
month but we will do that earlier i

1461
01:00:15,920 --> 01:00:17,520
think

1462
01:00:17,520 --> 01:00:19,839
probably as soon as later today

1463
01:00:19,839 --> 01:00:22,400
and then

1464
01:00:22,720 --> 01:00:24,640
we suggest that maybe another working

1465
01:00:24,640 --> 01:00:26,960
group last call is adequate since the

1466
01:00:26,960 --> 01:00:28,720
text changes are

1467
01:00:28,720 --> 01:00:31,040
not insubstantial

1468
01:00:31,040 --> 01:00:32,319
although they are deep down in the

1469
01:00:32,319 --> 01:00:34,000
details

1470
01:00:34,000 --> 01:00:34,880
where

1471
01:00:34,880 --> 01:00:37,599
where the bbc codec maps to the offer

1472
01:00:37,599 --> 01:00:39,599
answer mostly

1473
01:00:39,599 --> 01:00:40,720
and

1474
01:00:40,720 --> 01:00:43,200
then i think we're ready for

1475
01:00:43,200 --> 01:00:44,640
after that working plus call for

1476
01:00:44,640 --> 01:00:46,799
publication request

1477
01:00:46,799 --> 01:00:47,760
um

1478
01:00:47,760 --> 01:00:50,720
next slide please

1479
01:00:54,400 --> 01:00:56,880
thanks bernard now

1480
01:00:56,880 --> 01:01:00,720
this was an issue that's more a generic

1481
01:01:00,720 --> 01:01:02,640
uh question

1482
01:01:02,640 --> 01:01:03,760
uh

1483
01:01:03,760 --> 01:01:06,000
that

1484
01:01:06,319 --> 01:01:08,480
was triggered by the banner by a comment

1485
01:01:08,480 --> 01:01:10,400
from belmod

1486
01:01:10,400 --> 01:01:11,680
where he said there are no complete

1487
01:01:11,680 --> 01:01:13,119
examples of the stp of our answer

1488
01:01:13,119 --> 01:01:14,480
negotiation

1489
01:01:14,480 --> 01:01:17,040
in the draft that was in in the context

1490
01:01:17,040 --> 01:01:19,359
i think mostly of the scalability

1491
01:01:19,359 --> 01:01:20,720
uh

1492
01:01:20,720 --> 01:01:22,079
related

1493
01:01:22,079 --> 01:01:24,480
rather complex of answers scenarios that

1494
01:01:24,480 --> 01:01:26,960
this draft would allow

1495
01:01:26,960 --> 01:01:28,640
um

1496
01:01:28,640 --> 01:01:30,319
and

1497
01:01:30,319 --> 01:01:31,520
that raises a little bit the

1498
01:01:31,520 --> 01:01:34,480
philosophical question of uh what good

1499
01:01:34,480 --> 01:01:36,319
do examples do

1500
01:01:36,319 --> 01:01:41,119
yeah the um so one thing that i've seen

1501
01:01:41,119 --> 01:01:43,119
rather consistently

1502
01:01:43,119 --> 01:01:46,799
in implementations by people who are not

1503
01:01:46,799 --> 01:01:47,920
say

1504
01:01:47,920 --> 01:01:50,319
regular participants of this group is

1505
01:01:50,319 --> 01:01:53,119
that they take code snippets from the

1506
01:01:53,119 --> 01:01:54,000
uh

1507
01:01:54,000 --> 01:01:55,119
from the

1508
01:01:55,119 --> 01:01:57,920
um drafts or at least

1509
01:01:57,920 --> 01:01:59,839
you know the examples were biting from

1510
01:01:59,839 --> 01:02:01,520
the drafts

1511
01:02:01,520 --> 01:02:04,400
hack a little bit around them

1512
01:02:04,400 --> 01:02:06,720
for the special needs they may have and

1513
01:02:06,720 --> 01:02:08,880
think that they have uh

1514
01:02:08,880 --> 01:02:10,559
something that ought to work with other

1515
01:02:10,559 --> 01:02:12,240
people's um

1516
01:02:12,240 --> 01:02:14,880
implementation and typically it does not

1517
01:02:14,880 --> 01:02:17,680
very often it does not and

1518
01:02:17,680 --> 01:02:19,039
the

1519
01:02:19,039 --> 01:02:21,119
the reason for that is i think that

1520
01:02:21,119 --> 01:02:22,240
people

1521
01:02:22,240 --> 01:02:25,119
uh uh simply take the examples as

1522
01:02:25,119 --> 01:02:26,640
shortcuts

1523
01:02:26,640 --> 01:02:28,480
of for

1524
01:02:28,480 --> 01:02:30,720
um

1525
01:02:30,960 --> 01:02:33,359
you know for for the way how things are

1526
01:02:33,359 --> 01:02:34,880
to be done

1527
01:02:34,880 --> 01:02:36,160
and don't really get a full

1528
01:02:36,160 --> 01:02:38,559
understanding of what's going on

1529
01:02:38,559 --> 01:02:39,920
um

1530
01:02:39,920 --> 01:02:42,160
we had this discussion before a few

1531
01:02:42,160 --> 01:02:46,400
years ago uh or decades ago or so um

1532
01:02:46,400 --> 01:02:48,319
and in uh

1533
01:02:48,319 --> 01:02:51,200
for the hvc payload there we later on

1534
01:02:51,200 --> 01:02:53,359
decided not to go for full examples and

1535
01:02:53,359 --> 01:02:55,440
i just want to

1536
01:02:55,440 --> 01:02:57,520
kind of reconfirm that that's the right

1537
01:02:57,520 --> 01:02:58,640
thing to do

1538
01:02:58,640 --> 01:03:00,240
um

1539
01:03:00,240 --> 01:03:02,559
i mean we we can add more examples if we

1540
01:03:02,559 --> 01:03:04,240
absolutely need to

1541
01:03:04,240 --> 01:03:05,440
but

1542
01:03:05,440 --> 01:03:08,160
for the reasons i stated we are

1543
01:03:08,160 --> 01:03:10,480
it's not laziness it's really it's it's

1544
01:03:10,480 --> 01:03:12,000
more

1545
01:03:12,000 --> 01:03:13,839
um

1546
01:03:13,839 --> 01:03:14,880
you know i

1547
01:03:14,880 --> 01:03:16,880
i think examples teach you way too much

1548
01:03:16,880 --> 01:03:19,200
from uh from

1549
01:03:19,200 --> 01:03:20,720
the

1550
01:03:20,720 --> 01:03:23,280
the complexity of the problems uh that

1551
01:03:23,280 --> 01:03:25,280
are hidden in those

1552
01:03:25,280 --> 01:03:28,079
uh in those um

1553
01:03:28,079 --> 01:03:31,280
of our answer uh cap exchange uh

1554
01:03:31,280 --> 01:03:33,920
options that we have in those drafts

1555
01:03:33,920 --> 01:03:35,599
so what i asked this question on the

1556
01:03:35,599 --> 01:03:38,960
mailing list there was no response um

1557
01:03:38,960 --> 01:03:40,960
what do people think

1558
01:03:40,960 --> 01:03:43,039
um

1559
01:03:43,039 --> 01:03:45,440
yeah uh thanks stefan

1560
01:03:45,440 --> 01:03:47,520
i guess what i was responding to in part

1561
01:03:47,520 --> 01:03:50,240
is some of the issues we've seen uh with

1562
01:03:50,240 --> 01:03:52,000
implementations and figuring out what

1563
01:03:52,000 --> 01:03:53,119
they do

1564
01:03:53,119 --> 01:03:54,720
there's a pretty widespread problem now

1565
01:03:54,720 --> 01:03:57,520
with people inventing their own

1566
01:03:57,520 --> 01:03:59,920
very different implementations of hevc

1567
01:03:59,920 --> 01:04:01,119
for example

1568
01:04:01,119 --> 01:04:02,720
i had an instance where it was

1569
01:04:02,720 --> 01:04:04,720
integrated with webrtc and nobody could

1570
01:04:04,720 --> 01:04:07,280
figure out what it was doing

1571
01:04:07,280 --> 01:04:09,039
and i know that's not the fault of the

1572
01:04:09,039 --> 01:04:10,480
draft because it probably didn't also

1573
01:04:10,480 --> 01:04:12,550
implement the payload format either

1574
01:04:12,550 --> 01:04:13,920
[Music]

1575
01:04:13,920 --> 01:04:15,520
but uh

1576
01:04:15,520 --> 01:04:17,039
yeah it just

1577
01:04:17,039 --> 01:04:20,240
um i understand your point uh

1578
01:04:20,240 --> 01:04:22,079
that

1579
01:04:22,079 --> 01:04:24,160
but you know translating these things

1580
01:04:24,160 --> 01:04:26,559
into actual implementations

1581
01:04:26,559 --> 01:04:28,799
uh has just it has been problematic

1582
01:04:28,799 --> 01:04:30,799
because people pick and choose things

1583
01:04:30,799 --> 01:04:32,319
and

1584
01:04:32,319 --> 01:04:33,599
you never know what they're going to do

1585
01:04:33,599 --> 01:04:36,799
until you actually look at it

1586
01:04:37,760 --> 01:04:39,359
i completely agree

1587
01:04:39,359 --> 01:04:41,119
i think

1588
01:04:41,119 --> 01:04:42,160
the

1589
01:04:42,160 --> 01:04:43,839
the disagreement if there is any i don't

1590
01:04:43,839 --> 01:04:46,079
know the disagreement is what the cure

1591
01:04:46,079 --> 01:04:48,079
to this problem is

1592
01:04:48,079 --> 01:04:50,960
right i think fever is not to

1593
01:04:50,960 --> 01:04:53,359
to put oversimplified examples in a

1594
01:04:53,359 --> 01:04:54,400
draft

1595
01:04:54,400 --> 01:04:57,200
that will be copy pasted

1596
01:04:57,200 --> 01:04:59,839
in that may be known as correct but may

1597
01:04:59,839 --> 01:05:01,839
may not be known as applicable for the

1598
01:05:01,839 --> 01:05:04,240
particular problem that people have and

1599
01:05:04,240 --> 01:05:05,920
that people

1600
01:05:05,920 --> 01:05:10,079
go away from you know frankly from

1601
01:05:10,079 --> 01:05:11,920
from from specs

1602
01:05:11,920 --> 01:05:14,480
for something as comparatively simple as

1603
01:05:14,480 --> 01:05:16,079
a payload format when you compare it to

1604
01:05:16,079 --> 01:05:18,319
the video codec that's

1605
01:05:18,319 --> 01:05:20,319
i mean that's

1606
01:05:20,319 --> 01:05:22,640
people take shortcuts they do it all the

1607
01:05:22,640 --> 01:05:24,960
time right so yeah unfortunately i'm not

1608
01:05:24,960 --> 01:05:27,039
running a standards police otherwise i

1609
01:05:27,039 --> 01:05:29,119
could i could do something about it but

1610
01:05:29,119 --> 01:05:30,880
i don't

1611
01:05:30,880 --> 01:05:33,039
yeah

1612
01:05:33,039 --> 01:05:36,039
so

1613
01:05:38,240 --> 01:05:40,240
okay let me put this as the proposal or

1614
01:05:40,240 --> 01:05:42,799
let me put that not as a question but as

1615
01:05:42,799 --> 01:05:45,440
a statement so unless people speak up

1616
01:05:45,440 --> 01:05:47,920
pretty darn soon uh

1617
01:05:47,920 --> 01:05:49,440
right now

1618
01:05:49,440 --> 01:05:50,880
but they want to see more detailed

1619
01:05:50,880 --> 01:05:52,079
examples

1620
01:05:52,079 --> 01:05:53,920
we are not going to add more examples

1621
01:05:53,920 --> 01:05:55,599
and we will be

1622
01:05:55,599 --> 01:05:57,680
uh we will be

1623
01:05:57,680 --> 01:06:00,400
referring to this discussion if we come

1624
01:06:00,400 --> 01:06:04,680
out of the woods later for more examples

1625
01:06:08,799 --> 01:06:11,119
yeah i don't think you need

1626
01:06:11,119 --> 01:06:13,680
examples to spoon feed people um i don't

1627
01:06:13,680 --> 01:06:16,319
think that's necessary but in your view

1628
01:06:16,319 --> 01:06:18,400
do you think that the current examples

1629
01:06:18,400 --> 01:06:20,160
give the high order bit

1630
01:06:20,160 --> 01:06:22,000
of of what um

1631
01:06:22,000 --> 01:06:23,200
what the

1632
01:06:23,200 --> 01:06:25,039
important part most important parts of

1633
01:06:25,039 --> 01:06:26,720
the draft we're trying to convey in

1634
01:06:26,720 --> 01:06:28,720
their stp i think that's the useful part

1635
01:06:28,720 --> 01:06:29,920
because there's usually a lot of text

1636
01:06:29,920 --> 01:06:32,240
and it's usually um you know

1637
01:06:32,240 --> 01:06:34,079
drafts that have uh

1638
01:06:34,079 --> 01:06:36,880
many parameters and and many rules

1639
01:06:36,880 --> 01:06:38,960
um on all the parameters it's it's hard

1640
01:06:38,960 --> 01:06:41,920
to lose it's easy to lose high order bit

1641
01:06:41,920 --> 01:06:44,720
of functional negotiation

1642
01:06:44,720 --> 01:06:46,480
in all of the different nuances of of

1643
01:06:46,480 --> 01:06:48,240
the parameters so do you feel like

1644
01:06:48,240 --> 01:06:49,440
you've captured

1645
01:06:49,440 --> 01:06:51,520
just the high order bits and not

1646
01:06:51,520 --> 01:06:53,200
all the full complete

1647
01:06:53,200 --> 01:06:56,079
negotiations so okay i i think i think

1648
01:06:56,079 --> 01:06:59,280
we are we're good enough um if you take

1649
01:06:59,280 --> 01:07:02,720
this and and a little bit of say

1650
01:07:02,720 --> 01:07:04,880
common understanding of how of irons are

1651
01:07:04,880 --> 01:07:08,640
supposed to work uh we we are good for

1652
01:07:08,640 --> 01:07:10,799
the relatively

1653
01:07:10,799 --> 01:07:14,240
simple use cases say no scalability

1654
01:07:14,240 --> 01:07:16,240
once complex stuff comes into the

1655
01:07:16,240 --> 01:07:17,359
picture

1656
01:07:17,359 --> 01:07:19,200
people have to dig in people have to

1657
01:07:19,200 --> 01:07:21,680
understand that you know because if you

1658
01:07:21,680 --> 01:07:23,280
if you if you

1659
01:07:23,280 --> 01:07:25,680
if you just try to create recreate a

1660
01:07:25,680 --> 01:07:28,720
scalability model without understanding

1661
01:07:28,720 --> 01:07:30,000
uh

1662
01:07:30,000 --> 01:07:32,480
the the vvc scalability mechanism which

1663
01:07:32,480 --> 01:07:36,160
are not that easy to to block right

1664
01:07:36,160 --> 01:07:37,280
and that

1665
01:07:37,280 --> 01:07:38,160
that

1666
01:07:38,160 --> 01:07:40,000
five percent of additional complexity

1667
01:07:40,000 --> 01:07:42,480
that's being added by the payload format

1668
01:07:42,480 --> 01:07:44,480
if if you don't have an if you don't

1669
01:07:44,480 --> 01:07:47,200
have an a good picture of that and just

1670
01:07:47,200 --> 01:07:50,960
naively starts implementing then

1671
01:07:50,960 --> 01:07:52,240
then you will arrive at something that

1672
01:07:52,240 --> 01:07:54,960
just doesn't work so the the uh but for

1673
01:07:54,960 --> 01:07:57,039
the for the relatively simple use cases

1674
01:07:57,039 --> 01:07:59,760
if you're using uh say

1675
01:07:59,760 --> 01:08:01,920
say no scalability or temporal

1676
01:08:01,920 --> 01:08:05,680
scalability only you should be fine

1677
01:08:05,680 --> 01:08:07,359
then i think it's appropriate to not

1678
01:08:07,359 --> 01:08:08,319
include

1679
01:08:08,319 --> 01:08:09,920
detailed examples of all the possible

1680
01:08:09,920 --> 01:08:11,520
subtleties

1681
01:08:11,520 --> 01:08:12,480
implementers should know those

1682
01:08:12,480 --> 01:08:16,799
subtleties and know the stp for them

1683
01:08:17,839 --> 01:08:20,080
okay

1684
01:08:23,359 --> 01:08:26,238
good uh thanks i think that's all i had

1685
01:08:26,238 --> 01:08:29,040
on the vvc thing so that's on track um

1686
01:08:29,040 --> 01:08:30,880
next slide please

1687
01:08:30,880 --> 01:08:32,880
so jumping over to evc uh that's a

1688
01:08:32,880 --> 01:08:34,479
really short one

1689
01:08:34,479 --> 01:08:38,120
um next slide

1690
01:08:38,399 --> 01:08:41,679
we haven't uh wrapped the uh uh or one

1691
01:08:41,679 --> 01:08:43,839
working group draft

1692
01:08:43,839 --> 01:08:44,799
this

1693
01:08:44,799 --> 01:08:47,679
this tradition of keeper life drafts uh

1694
01:08:47,679 --> 01:08:50,479
i i consider

1695
01:08:50,479 --> 01:08:52,319
you know this is this is just not not a

1696
01:08:52,319 --> 01:08:54,640
good thing so unless uh you chairs tell

1697
01:08:54,640 --> 01:08:56,080
me that we should

1698
01:08:56,080 --> 01:08:59,920
uh run keep a live keeper live drafts uh

1699
01:08:59,920 --> 01:09:02,319
um for bookkeeping purposes or something

1700
01:09:02,319 --> 01:09:04,158
like that uh we're not going to do it

1701
01:09:04,158 --> 01:09:06,560
however the draft is still on our

1702
01:09:06,560 --> 01:09:09,120
on our internal agenda and we are

1703
01:09:09,120 --> 01:09:11,679
committed to to deal with that

1704
01:09:11,679 --> 01:09:14,560
however the the way we want to do that

1705
01:09:14,560 --> 01:09:18,000
and that was i think greed

1706
01:09:18,000 --> 01:09:19,600
in last summer

1707
01:09:19,600 --> 01:09:22,719
is we'll deal with it

1708
01:09:22,719 --> 01:09:24,880
once we have

1709
01:09:24,880 --> 01:09:26,238
learned the lessons and that's

1710
01:09:26,238 --> 01:09:28,640
especially the lessons i'm expecting on

1711
01:09:28,640 --> 01:09:30,319
the security side

1712
01:09:30,319 --> 01:09:34,080
uh during uh the idf last call so in

1713
01:09:34,080 --> 01:09:37,120
other words what we suggest to do is uh

1714
01:09:37,120 --> 01:09:40,640
we will produce version two

1715
01:09:40,640 --> 01:09:42,080
after we

1716
01:09:42,080 --> 01:09:42,960
got

1717
01:09:42,960 --> 01:09:46,560
the bbc draft through the last call

1718
01:09:46,560 --> 01:09:48,640
and then we'll be ready very very

1719
01:09:48,640 --> 01:09:50,719
quickly uh with working group glass curl

1720
01:09:50,719 --> 01:09:52,399
of the ebc draft

1721
01:09:52,399 --> 01:09:54,640
the alternative would be keeper lives if

1722
01:09:54,640 --> 01:09:56,480
you choose uh if you do that i think

1723
01:09:56,480 --> 01:09:58,560
that's that's that sounds reasonable to

1724
01:09:58,560 --> 01:09:59,920
me i think

1725
01:09:59,920 --> 01:10:01,360
which one

1726
01:10:01,360 --> 01:10:03,199
sorry the the no no don't keep the live

1727
01:10:03,199 --> 01:10:04,080
needed

1728
01:10:04,080 --> 01:10:05,440
sorry

1729
01:10:05,440 --> 01:10:06,560
just okay

1730
01:10:06,560 --> 01:10:08,880
okay that's basically

1731
01:10:08,880 --> 01:10:10,719
the other question i had is you so when

1732
01:10:10,719 --> 01:10:12,320
you're saying security do you think

1733
01:10:12,320 --> 01:10:13,679
there'll be sufficient

1734
01:10:13,679 --> 01:10:14,960
you know

1735
01:10:14,960 --> 01:10:16,719
specific security issues that might come

1736
01:10:16,719 --> 01:10:19,920
up due to something like bbc or just

1737
01:10:19,920 --> 01:10:21,920
no no if if there were if there were

1738
01:10:21,920 --> 01:10:24,320
specific security issues that i'm

1739
01:10:24,320 --> 01:10:26,000
i think that would come up we would have

1740
01:10:26,000 --> 01:10:28,239
proactively addressed them

1741
01:10:28,239 --> 01:10:30,800
this is this is just uh doing payload

1742
01:10:30,800 --> 01:10:32,560
formats for the last 20 years something

1743
01:10:32,560 --> 01:10:35,920
always comes up from that crowd so uh

1744
01:10:35,920 --> 01:10:37,920
i mean if i would be very pleasantly

1745
01:10:37,920 --> 01:10:39,679
surprised if this time nothing comes up

1746
01:10:39,679 --> 01:10:40,960
but

1747
01:10:40,960 --> 01:10:42,880
something always comes up so

1748
01:10:42,880 --> 01:10:45,679
uh and there's always a need to add a

1749
01:10:45,679 --> 01:10:47,679
sentence or to

1750
01:10:47,679 --> 01:10:49,280
to the security

1751
01:10:49,280 --> 01:10:51,120
uh consideration question and frankly in

1752
01:10:51,120 --> 01:10:52,880
in the past that was also the truth for

1753
01:10:52,880 --> 01:10:54,480
the congestion control

1754
01:10:54,480 --> 01:10:56,640
i think this time congestion control is

1755
01:10:56,640 --> 01:10:59,760
probably not the big issue anymore

1756
01:10:59,760 --> 01:11:01,840
because those people are

1757
01:11:01,840 --> 01:11:04,239
watching video payload formats generally

1758
01:11:04,239 --> 01:11:05,360
nowadays

1759
01:11:05,360 --> 01:11:06,480
but

1760
01:11:06,480 --> 01:11:08,960
on the security side it's just

1761
01:11:08,960 --> 01:11:10,719
i'm just expecting it without knowing

1762
01:11:10,719 --> 01:11:12,080
what it may be

1763
01:11:12,080 --> 01:11:14,400
okay

1764
01:11:16,400 --> 01:11:19,360
okay thank you very much

1765
01:11:20,480 --> 01:11:23,480
okay

1766
01:11:26,000 --> 01:11:29,360
see mike faller in the queue uh

1767
01:11:29,360 --> 01:11:31,520
annular mike which are your branding

1768
01:11:31,520 --> 01:11:33,280
with uh general dynamics i was gonna

1769
01:11:33,280 --> 01:11:35,760
have mike do our presentation for us

1770
01:11:35,760 --> 01:11:36,960
okay

1771
01:11:36,960 --> 01:11:39,360
protect and i'll be certainly here for

1772
01:11:39,360 --> 01:11:40,880
questions

1773
01:11:40,880 --> 01:11:42,960
as we go along

1774
01:11:42,960 --> 01:11:45,440
sounds good

1775
01:11:46,800 --> 01:11:48,560
hello can you hear me

1776
01:11:48,560 --> 01:11:49,840
yes

1777
01:11:49,840 --> 01:11:52,080
okay um

1778
01:11:52,080 --> 01:11:53,360
i've been listening to the the

1779
01:11:53,360 --> 01:11:55,120
conversations of the others and i'll

1780
01:11:55,120 --> 01:11:57,600
i'll augment the presentation based on

1781
01:11:57,600 --> 01:11:59,120
some of what i've heard

1782
01:11:59,120 --> 01:12:00,159
um

1783
01:12:00,159 --> 01:12:03,679
but as far as i know the organization we

1784
01:12:03,679 --> 01:12:07,679
are supporting is is new or somewhat new

1785
01:12:07,679 --> 01:12:10,480
to the ietf

1786
01:12:10,719 --> 01:12:12,560
so i provided a couple slides that

1787
01:12:12,560 --> 01:12:15,120
discuss our background

1788
01:12:15,120 --> 01:12:18,480
for the draft rfc that was submitted

1789
01:12:18,480 --> 01:12:20,400
the particular protocol we support is

1790
01:12:20,400 --> 01:12:22,320
called skip skirt communications

1791
01:12:22,320 --> 01:12:24,880
interoperability pro call it began in

1792
01:12:24,880 --> 01:12:27,520
1994.

1793
01:12:27,520 --> 01:12:30,159
i was around for the birth of that

1794
01:12:30,159 --> 01:12:31,760
as a combined

1795
01:12:31,760 --> 01:12:33,440
department of defense and vendor working

1796
01:12:33,440 --> 01:12:34,960
group

1797
01:12:34,960 --> 01:12:36,239
the working group was called

1798
01:12:36,239 --> 01:12:39,360
interoperably controlled working group

1799
01:12:39,360 --> 01:12:40,719
um

1800
01:12:40,719 --> 01:12:41,679
this

1801
01:12:41,679 --> 01:12:44,320
while the skip protocol began in 1994

1802
01:12:44,320 --> 01:12:46,560
there were predecessors to it

1803
01:12:46,560 --> 01:12:48,840
we go back to the pstn

1804
01:12:48,840 --> 01:12:52,239
days of early communications that the

1805
01:12:52,239 --> 01:12:54,960
dod would do over pstns and then into is

1806
01:12:54,960 --> 01:12:58,800
the end and migrated into ip

1807
01:12:58,800 --> 01:13:00,400
all handled with a

1808
01:13:00,400 --> 01:13:02,400
with a community of interest if you want

1809
01:13:02,400 --> 01:13:04,480
to call it that

1810
01:13:04,480 --> 01:13:06,400
and the community was mostly confined in

1811
01:13:06,400 --> 01:13:09,520
the u.s uh for a large part of this but

1812
01:13:09,520 --> 01:13:11,040
the goal of this group was to develop

1813
01:13:11,040 --> 01:13:12,960
the next generation interoperability

1814
01:13:12,960 --> 01:13:14,880
security protocol supporting the us

1815
01:13:14,880 --> 01:13:16,840
government and the military

1816
01:13:16,840 --> 01:13:20,560
interests later around 2001 to include

1817
01:13:20,560 --> 01:13:22,960
nato and nato partners and the name

1818
01:13:22,960 --> 01:13:25,520
changed to the skip working group

1819
01:13:25,520 --> 01:13:28,480
the skip working group is a functional

1820
01:13:28,480 --> 01:13:30,840
standards making test

1821
01:13:30,840 --> 01:13:32,719
um

1822
01:13:32,719 --> 01:13:34,800
community that meets

1823
01:13:34,800 --> 01:13:37,120
one or two times a year depending upon

1824
01:13:37,120 --> 01:13:38,480
the needs

1825
01:13:38,480 --> 01:13:40,400
we have separate

1826
01:13:40,400 --> 01:13:42,239
action items to do we have

1827
01:13:42,239 --> 01:13:44,400
demonstrations to provide

1828
01:13:44,400 --> 01:13:46,320
we are a functioning body that's been

1829
01:13:46,320 --> 01:13:48,000
around them for a while

1830
01:13:48,000 --> 01:13:50,560
next slide

1831
01:13:53,520 --> 01:13:54,960
one of the problems that's come up is

1832
01:13:54,960 --> 01:13:57,199
about the skip information access and

1833
01:13:57,199 --> 01:13:59,840
awareness

1834
01:13:59,840 --> 01:14:01,440
the skip standards are currently

1835
01:14:01,440 --> 01:14:03,120
available to participating government

1836
01:14:03,120 --> 01:14:05,440
military communities and select

1837
01:14:05,440 --> 01:14:07,600
oems of network equipment and call

1838
01:14:07,600 --> 01:14:11,120
management servers that support skip

1839
01:14:11,120 --> 01:14:13,120
government business entities must

1840
01:14:13,120 --> 01:14:15,280
request access to relevant information

1841
01:14:15,280 --> 01:14:17,199
and access to skip standards is based

1842
01:14:17,199 --> 01:14:20,719
upon a need to need to know

1843
01:14:20,719 --> 01:14:23,360
now devices that implement skip

1844
01:14:23,360 --> 01:14:26,000
standards transparently operate over

1845
01:14:26,000 --> 01:14:28,080
digital carriers

1846
01:14:28,080 --> 01:14:30,880
skip is an application layer

1847
01:14:30,880 --> 01:14:33,120
protocol it doesn't function down in the

1848
01:14:33,120 --> 01:14:34,800
network layer

1849
01:14:34,800 --> 01:14:35,930
the devices

1850
01:14:35,930 --> 01:14:37,600
[Music]

1851
01:14:37,600 --> 01:14:39,920
most commercial network and security

1852
01:14:39,920 --> 01:14:41,920
community personnel are not aware of

1853
01:14:41,920 --> 01:14:45,199
skip and this can result in a skip sub

1854
01:14:45,199 --> 01:14:47,360
media type skip being removed from the

1855
01:14:47,360 --> 01:14:48,400
sdp

1856
01:14:48,400 --> 01:14:50,960
of a standard sip message

1857
01:14:50,960 --> 01:14:52,800
so the lack of awareness among the

1858
01:14:52,800 --> 01:14:54,159
network and security community has

1859
01:14:54,159 --> 01:14:57,360
become a larger issue as the use of skip

1860
01:14:57,360 --> 01:15:00,080
grows over more commercial carriers and

1861
01:15:00,080 --> 01:15:02,320
as network security devices become more

1862
01:15:02,320 --> 01:15:05,520
restrictive of unknown media

1863
01:15:05,520 --> 01:15:07,840
as a side story to that

1864
01:15:07,840 --> 01:15:10,640
my first exposure to to

1865
01:15:10,640 --> 01:15:12,800
network security was way back in the

1866
01:15:12,800 --> 01:15:14,560
early cisco days of

1867
01:15:14,560 --> 01:15:16,480
building a firewall based on ip

1868
01:15:16,480 --> 01:15:17,679
addresses

1869
01:15:17,679 --> 01:15:19,520
i think we can all agree it's progressed

1870
01:15:19,520 --> 01:15:22,000
a lot since then as to what the security

1871
01:15:22,000 --> 01:15:24,560
appliances do to your network

1872
01:15:24,560 --> 01:15:26,000
so

1873
01:15:26,000 --> 01:15:27,760
we

1874
01:15:27,760 --> 01:15:30,239
we have come across issues next slide

1875
01:15:30,239 --> 01:15:32,559
please

1876
01:15:34,880 --> 01:15:37,600
we have come across issues where the sd

1877
01:15:37,600 --> 01:15:39,520
stp doesn't contain the transport that

1878
01:15:39,520 --> 01:15:40,640
we need

1879
01:15:40,640 --> 01:15:42,960
so the draft rfc submitted the ietf is

1880
01:15:42,960 --> 01:15:44,719
designed to provide information to

1881
01:15:44,719 --> 01:15:46,719
network equipment oems network

1882
01:15:46,719 --> 01:15:49,360
administrators security personnel and to

1883
01:15:49,360 --> 01:15:51,360
help skip succeed of the commercial

1884
01:15:51,360 --> 01:15:52,800
networks

1885
01:15:52,800 --> 01:15:56,080
because skip relies on

1886
01:15:56,080 --> 01:15:58,000
commercial equipment within the network

1887
01:15:58,000 --> 01:16:00,320
infrastructure to operate and as it's

1888
01:16:00,320 --> 01:16:03,199
become security policies have changed

1889
01:16:03,199 --> 01:16:06,880
devices have changed from being

1890
01:16:06,880 --> 01:16:09,920
where you go in and decide what you're

1891
01:16:09,920 --> 01:16:12,080
going to not let into your network now

1892
01:16:12,080 --> 01:16:14,159
they are more like they're going to deny

1893
01:16:14,159 --> 01:16:15,679
all and you have to tell them what you

1894
01:16:15,679 --> 01:16:18,400
want into your network and when that

1895
01:16:18,400 --> 01:16:20,159
telling gets all the way down into the

1896
01:16:20,159 --> 01:16:21,920
contents of the stp

1897
01:16:21,920 --> 01:16:24,320
skip can have a problem

1898
01:16:24,320 --> 01:16:26,560
so the skip rfc enables network

1899
01:16:26,560 --> 01:16:28,560
equipment and manufacturers to provide

1900
01:16:28,560 --> 01:16:31,040
an equipment configuration that supports

1901
01:16:31,040 --> 01:16:35,040
uh skip as a as a media subtype

1902
01:16:35,040 --> 01:16:37,199
so that the network administrators

1903
01:16:37,199 --> 01:16:39,280
network security personnel can define

1904
01:16:39,280 --> 01:16:41,840
and implement compatible network policy

1905
01:16:41,840 --> 01:16:44,000
which permits the skip media subtype to

1906
01:16:44,000 --> 01:16:46,159
reverse the network

1907
01:16:46,159 --> 01:16:47,520
what the skip

1908
01:16:47,520 --> 01:16:50,560
media subtype provides is end-to-end bit

1909
01:16:50,560 --> 01:16:53,600
integrity no transcoding on the channel

1910
01:16:53,600 --> 01:16:57,120
and in treatment as if the the data is

1911
01:16:57,120 --> 01:16:58,960
clear channel data

1912
01:16:58,960 --> 01:17:01,040
and there is actually a precedence to us

1913
01:17:01,040 --> 01:17:04,400
within the rfc standards of rfc 4040 and

1914
01:17:04,400 --> 01:17:07,280
we referenced that in the in the draft

1915
01:17:07,280 --> 01:17:08,640
submitted

1916
01:17:08,640 --> 01:17:10,480
rfc 4040

1917
01:17:10,480 --> 01:17:13,120
while it is a gateway protocol it is it

1918
01:17:13,120 --> 01:17:16,400
is meant to take iep traffic and

1919
01:17:16,400 --> 01:17:19,120
an isdn bri

1920
01:17:19,120 --> 01:17:20,880
network

1921
01:17:20,880 --> 01:17:23,280
64k udi channel

1922
01:17:23,280 --> 01:17:25,120
and build a

1923
01:17:25,120 --> 01:17:27,440
end-to-end bit integrity network for the

1924
01:17:27,440 --> 01:17:30,560
users to use whatever they want so rfc

1925
01:17:30,560 --> 01:17:33,600
4040 develops a clear channel

1926
01:17:33,600 --> 01:17:36,320
it just happens to transverse uh

1927
01:17:36,320 --> 01:17:40,719
go from ip to isdn 64k udi

1928
01:17:40,719 --> 01:17:44,480
so skip is to be treated like that

1929
01:17:44,480 --> 01:17:46,640
on a pure ip network

1930
01:17:46,640 --> 01:17:49,199
next slide

1931
01:17:50,800 --> 01:17:52,640
there are two sub media types that have

1932
01:17:52,640 --> 01:17:55,440
been registered with iana as rtp payload

1933
01:17:55,440 --> 01:17:58,239
format media types audio skip and video

1934
01:17:58,239 --> 01:18:00,000
skip

1935
01:18:00,000 --> 01:18:02,239
this rfc is needed to provide additional

1936
01:18:02,239 --> 01:18:04,159
information for those media subtypes

1937
01:18:04,159 --> 01:18:05,600
where we include the media type

1938
01:18:05,600 --> 01:18:07,040
description

1939
01:18:07,040 --> 01:18:07,920
the

1940
01:18:07,920 --> 01:18:10,880
payload format rtp header fields payload

1941
01:18:10,880 --> 01:18:12,640
format parameters and the stp

1942
01:18:12,640 --> 01:18:15,760
declaration as a mapping to the sdp

1943
01:18:15,760 --> 01:18:18,080
and provides mapping examples what

1944
01:18:18,080 --> 01:18:22,000
you'll see on the next slide i believe

1945
01:18:22,400 --> 01:18:24,639
next

1946
01:18:24,840 --> 01:18:27,920
slide this is the contents of the stp

1947
01:18:27,920 --> 01:18:30,320
declaration to support a skip session

1948
01:18:30,320 --> 01:18:33,840
i kind of uh like mo's comment of of

1949
01:18:33,840 --> 01:18:35,199
high order bits

1950
01:18:35,199 --> 01:18:37,199
this is just simply what will be

1951
01:18:37,199 --> 01:18:39,440
included in a sip invite of what would

1952
01:18:39,440 --> 01:18:42,320
maybe a normal video call with different

1953
01:18:42,320 --> 01:18:43,760
codecs listed

1954
01:18:43,760 --> 01:18:46,000
so the skip devices are presently

1955
01:18:46,000 --> 01:18:48,400
deployed in the u.s and nato tactical

1956
01:18:48,400 --> 01:18:49,920
networks

1957
01:18:49,920 --> 01:18:51,679
and many national networks in some

1958
01:18:51,679 --> 01:18:54,159
commercial networks using that following

1959
01:18:54,159 --> 01:18:56,480
sdp media and submedia type

1960
01:18:56,480 --> 01:18:58,400
we have deployed products and have had

1961
01:18:58,400 --> 01:19:00,880
for over a decade

1962
01:19:00,880 --> 01:19:03,199
using these protocols so the secure

1963
01:19:03,199 --> 01:19:05,520
session can be used as audio skip video

1964
01:19:05,520 --> 01:19:07,760
skip or both and the mapping is shown

1965
01:19:07,760 --> 01:19:09,679
there

1966
01:19:09,679 --> 01:19:11,120
presently there

1967
01:19:11,120 --> 01:19:13,520
i think within the uh

1968
01:19:13,520 --> 01:19:16,560
the global community my knowledge is is

1969
01:19:16,560 --> 01:19:18,880
that there are probably about

1970
01:19:18,880 --> 01:19:22,000
eight nine nations producing products

1971
01:19:22,000 --> 01:19:24,080
using these protocols

1972
01:19:24,080 --> 01:19:26,640
next slide

1973
01:19:29,920 --> 01:19:32,640
so in summary here's here's our

1974
01:19:32,640 --> 01:19:34,880
actual issues have occurred because oems

1975
01:19:34,880 --> 01:19:37,040
and network equipment

1976
01:19:37,040 --> 01:19:38,960
networks administrators and security

1977
01:19:38,960 --> 01:19:41,120
personnel are unaware of skip and sdp

1978
01:19:41,120 --> 01:19:43,120
contents necessary to establish scare

1979
01:19:43,120 --> 01:19:44,239
session

1980
01:19:44,239 --> 01:19:46,560
that unawareness is partially tied to

1981
01:19:46,560 --> 01:19:48,480
the fact that this

1982
01:19:48,480 --> 01:19:51,040
that the body of uh community that this

1983
01:19:51,040 --> 01:19:53,760
serves is one that has a as an already

1984
01:19:53,760 --> 01:19:56,640
standing community already has expanding

1985
01:19:56,640 --> 01:19:59,199
set of standards in which to operate to

1986
01:19:59,199 --> 01:20:00,400
do this

1987
01:20:00,400 --> 01:20:05,520
so it operating in that environment

1988
01:20:05,520 --> 01:20:07,440
is is one that produces the fact that

1989
01:20:07,440 --> 01:20:09,520
while we're defining the end products

1990
01:20:09,520 --> 01:20:11,920
but we don't have any way to let the

1991
01:20:11,920 --> 01:20:14,400
people in the middle know what we do

1992
01:20:14,400 --> 01:20:17,520
so the draft rfc increases the etf

1993
01:20:17,520 --> 01:20:19,360
awareness of the skip working group in

1994
01:20:19,360 --> 01:20:21,120
its efforts to achieve international

1995
01:20:21,120 --> 01:20:23,280
interoperability

1996
01:20:23,280 --> 01:20:24,880
actually we'd probably welcome some

1997
01:20:24,880 --> 01:20:27,120
involvement of the ietf community if

1998
01:20:27,120 --> 01:20:28,800
they choose to participate in our

1999
01:20:28,800 --> 01:20:30,320
sessions

2000
01:20:30,320 --> 01:20:32,239
the purpose of the rfc is to provide

2001
01:20:32,239 --> 01:20:34,400
global access to information necessary

2002
01:20:34,400 --> 01:20:37,199
to support skip

2003
01:20:37,199 --> 01:20:39,440
and a reference to the rfc provides

2004
01:20:39,440 --> 01:20:42,080
context in a single reference point for

2005
01:20:42,080 --> 01:20:44,400
the newly defined iana media subtypes

2006
01:20:44,400 --> 01:20:47,280
audio skip and video skip

2007
01:20:47,280 --> 01:20:48,400
so

2008
01:20:48,400 --> 01:20:50,719
we have to look at our problem as not

2009
01:20:50,719 --> 01:20:52,080
just being

2010
01:20:52,080 --> 01:20:55,040
the end products having interoperability

2011
01:20:55,040 --> 01:20:57,360
because everyone else who carries

2012
01:20:57,360 --> 01:20:59,280
traffic is responsible for defining

2013
01:20:59,280 --> 01:21:01,199
what's on the network is responsible for

2014
01:21:01,199 --> 01:21:02,800
building equipment that implements

2015
01:21:02,800 --> 01:21:04,800
security plans

2016
01:21:04,800 --> 01:21:06,639
they need the knowledge to know how to

2017
01:21:06,639 --> 01:21:07,760
do that

2018
01:21:07,760 --> 01:21:09,199
it even goes down as far as the

2019
01:21:09,199 --> 01:21:11,040
procurement people

2020
01:21:11,040 --> 01:21:12,159
if i

2021
01:21:12,159 --> 01:21:14,800
as a network designer want to

2022
01:21:14,800 --> 01:21:17,840
support this protocol on my network

2023
01:21:17,840 --> 01:21:19,520
how do i reference that to a procurement

2024
01:21:19,520 --> 01:21:22,719
rep so that they can then write a

2025
01:21:22,719 --> 01:21:23,679
a

2026
01:21:23,679 --> 01:21:26,080
request for quote to vendors saying this

2027
01:21:26,080 --> 01:21:28,560
is what your product needs to support

2028
01:21:28,560 --> 01:21:29,360
so

2029
01:21:29,360 --> 01:21:31,360
as in the last bullet

2030
01:21:31,360 --> 01:21:33,760
the rfc provides information about skip

2031
01:21:33,760 --> 01:21:35,520
and the skip working group community

2032
01:21:35,520 --> 01:21:37,360
system network architects dr

2033
01:21:37,360 --> 01:21:40,800
administrators security personnel oems

2034
01:21:40,800 --> 01:21:42,960
risk analyst procurement personnel

2035
01:21:42,960 --> 01:21:45,280
necessary for skip to be included in the

2036
01:21:45,280 --> 01:21:48,719
system security life cycle

2037
01:21:49,280 --> 01:21:51,760
so that's pretty much it in in a

2038
01:21:51,760 --> 01:21:53,040
nutshell

2039
01:21:53,040 --> 01:21:55,360
um

2040
01:21:55,600 --> 01:21:59,960
i can respond to questions

2041
01:22:16,320 --> 01:22:19,360
i'm not hearing anything

2042
01:22:20,480 --> 01:22:22,639
um basically you said that the actual

2043
01:22:22,639 --> 01:22:24,880
content of the skip is

2044
01:22:24,880 --> 01:22:27,920
on a is need to know which is just a

2045
01:22:27,920 --> 01:22:31,520
um some form of classification right

2046
01:22:31,520 --> 01:22:33,440
um it's not

2047
01:22:33,440 --> 01:22:34,639
the the

2048
01:22:34,639 --> 01:22:37,600
it's basically building a a channel by

2049
01:22:37,600 --> 01:22:39,920
which the end devices will negotiate

2050
01:22:39,920 --> 01:22:41,360
what they're going to do they're going

2051
01:22:41,360 --> 01:22:43,440
to negotiate applications they're going

2052
01:22:43,440 --> 01:22:47,360
to negotiate security parameters

2053
01:22:47,360 --> 01:22:50,880
so its format itself is not as clearly

2054
01:22:50,880 --> 01:22:52,800
defined as if you were

2055
01:22:52,800 --> 01:22:56,159
carrying a movie traffic or 729 or

2056
01:22:56,159 --> 01:22:58,799
something like that

2057
01:23:00,320 --> 01:23:01,840
so basically this is just establishing a

2058
01:23:01,840 --> 01:23:03,920
channel over

2059
01:23:03,920 --> 01:23:05,280
you know a

2060
01:23:05,280 --> 01:23:06,800
you know it's an

2061
01:23:06,800 --> 01:23:09,360
opaque application channel over

2062
01:23:09,360 --> 01:23:11,679
over the art existing rtb fashion then

2063
01:23:11,679 --> 01:23:14,880
you need to integrate this with

2064
01:23:16,639 --> 01:23:18,320
you know things that use the ip

2065
01:23:18,320 --> 01:23:21,040
telephony that what you're saying yes

2066
01:23:21,040 --> 01:23:22,480
okay

2067
01:23:22,480 --> 01:23:23,920
yeah

2068
01:23:23,920 --> 01:23:26,480
and it has been done in some devices

2069
01:23:26,480 --> 01:23:28,080
when we've had direct interaction with

2070
01:23:28,080 --> 01:23:31,440
vendors we've been able to

2071
01:23:31,520 --> 01:23:33,440
especially those that are aware of the

2072
01:23:33,440 --> 01:23:35,440
type of work we do

2073
01:23:35,440 --> 01:23:37,520
they're saying oh okay so this is just

2074
01:23:37,520 --> 01:23:40,080
kind of the next generation of what was

2075
01:23:40,080 --> 01:23:41,360
in the previous in the previous in the

2076
01:23:41,360 --> 01:23:44,480
pstn world we'd be talking to telcos

2077
01:23:44,480 --> 01:23:45,440
about

2078
01:23:45,440 --> 01:23:47,760
what they need to do on their network

2079
01:23:47,760 --> 01:23:49,280
but

2080
01:23:49,280 --> 01:23:52,800
there is no real telco anymore

2081
01:23:54,080 --> 01:23:56,239
yeah so my question is what is the what

2082
01:23:56,239 --> 01:23:58,800
can the abt core working group do for

2083
01:23:58,800 --> 01:23:59,920
you

2084
01:23:59,920 --> 01:24:01,120
so are you

2085
01:24:01,120 --> 01:24:03,040
i guess the document is an informational

2086
01:24:03,040 --> 01:24:05,280
rfc are you looking for it to be working

2087
01:24:05,280 --> 01:24:07,760
with less cold or

2088
01:24:07,760 --> 01:24:11,920
what's the ask from us

2089
01:24:12,000 --> 01:24:13,920
um

2090
01:24:13,920 --> 01:24:15,520
here's here's we have to express some

2091
01:24:15,520 --> 01:24:17,840
ignorance of your of how the ifc works

2092
01:24:17,840 --> 01:24:18,719
so

2093
01:24:18,719 --> 01:24:19,760
um

2094
01:24:19,760 --> 01:24:22,880
for for our purposes we we look at this

2095
01:24:22,880 --> 01:24:23,679
as

2096
01:24:23,679 --> 01:24:25,679
uh

2097
01:24:25,679 --> 01:24:28,320
the the adoption of this draft rfc

2098
01:24:28,320 --> 01:24:31,120
is not the end of the game um we have

2099
01:24:31,120 --> 01:24:33,840
much more work to do because an rfc

2100
01:24:33,840 --> 01:24:35,679
doesn't mean anyone's going to implement

2101
01:24:35,679 --> 01:24:37,120
anything

2102
01:24:37,120 --> 01:24:40,000
into their product it takes work beyond

2103
01:24:40,000 --> 01:24:43,120
that but an available global reference

2104
01:24:43,120 --> 01:24:45,840
is a big start

2105
01:24:45,920 --> 01:24:48,880
i would ask buber what do you

2106
01:24:48,880 --> 01:24:52,239
where would something like this go

2107
01:24:52,239 --> 01:24:54,320
because it is

2108
01:24:54,320 --> 01:24:56,400
in the end

2109
01:24:56,400 --> 01:24:58,800
it is the standard that's needed for end

2110
01:24:58,800 --> 01:25:01,040
products to communicate and the way that

2111
01:25:01,040 --> 01:25:03,920
they were designed um the recognition

2112
01:25:03,920 --> 01:25:05,600
that their far end product is a

2113
01:25:05,600 --> 01:25:07,920
compatible one and then

2114
01:25:07,920 --> 01:25:10,159
working over a clear channel

2115
01:25:10,159 --> 01:25:12,960
establish what each of the users are

2116
01:25:12,960 --> 01:25:16,639
capable of doing and want to do

2117
01:25:16,639 --> 01:25:18,239
yeah so i think we have our area

2118
01:25:18,239 --> 01:25:20,320
director here uh murray i don't know

2119
01:25:20,320 --> 01:25:24,519
murray if you want to comment on that

2120
01:25:43,390 --> 01:25:46,569
[Music]

2121
01:25:48,400 --> 01:25:50,480
um i was just reading your tweeting over

2122
01:25:50,480 --> 01:25:51,920
the charter because it's been a while

2123
01:25:51,920 --> 01:25:54,400
since i've read it and as long as

2124
01:25:54,400 --> 01:25:56,560
um this is covered in it which i haven't

2125
01:25:56,560 --> 01:25:58,560
i've finished reading it yet and this

2126
01:25:58,560 --> 01:25:59,760
working group doesn't have any

2127
01:25:59,760 --> 01:26:01,520
objections or the working group supports

2128
01:26:01,520 --> 01:26:03,280
the idea of bringing it in since it's

2129
01:26:03,280 --> 01:26:04,639
informational

2130
01:26:04,639 --> 01:26:06,080
um i

2131
01:26:06,080 --> 01:26:07,760
don't think this is a problem to take up

2132
01:26:07,760 --> 01:26:11,520
but you know consensus prevails

2133
01:26:14,480 --> 01:26:16,320
but i think that's an example

2134
01:26:16,320 --> 01:26:18,799
of the discussion

2135
01:26:20,570 --> 01:26:21,760
[Music]

2136
01:26:21,760 --> 01:26:23,679
as an example we could work a group less

2137
01:26:23,679 --> 01:26:26,000
call it uh it could be published i guess

2138
01:26:26,000 --> 01:26:27,520
through the independent

2139
01:26:27,520 --> 01:26:30,960
submissions process also

2140
01:26:32,239 --> 01:26:34,400
there's a variety of ways to to get it

2141
01:26:34,400 --> 01:26:35,920
through the publication process which

2142
01:26:35,920 --> 01:26:37,840
seems to be the goal

2143
01:26:37,840 --> 01:26:39,040
is yeah if you're going for

2144
01:26:39,040 --> 01:26:40,159
informational there are there are

2145
01:26:40,159 --> 01:26:42,879
several options

2146
01:26:47,360 --> 01:26:49,360
well that can be a discussion we can

2147
01:26:49,360 --> 01:26:51,679
have offline is to the benefits of one

2148
01:26:51,679 --> 01:26:55,199
versus the other because that's um

2149
01:26:55,199 --> 01:26:56,880
also something that i don't know

2150
01:26:56,880 --> 01:26:59,040
personally so

2151
01:26:59,040 --> 01:27:00,320
yeah i think one of the things you're

2152
01:27:00,320 --> 01:27:02,480
looking for because of the sdp issues is

2153
01:27:02,480 --> 01:27:04,080
to get the attention of the sdp

2154
01:27:04,080 --> 01:27:05,440
directorate and some of the people who

2155
01:27:05,440 --> 01:27:09,280
make these b2b uas who are torturing you

2156
01:27:09,280 --> 01:27:11,120
so that's kind of another consideration

2157
01:27:11,120 --> 01:27:14,719
is how to get the most exposure to them

2158
01:27:14,719 --> 01:27:17,280
that is true

2159
01:27:17,280 --> 01:27:18,800
in a sense they are

2160
01:27:18,800 --> 01:27:20,320
uh

2161
01:27:20,320 --> 01:27:22,800
participants in how network equipment is

2162
01:27:22,800 --> 01:27:25,840
created uh by the rfcs that

2163
01:27:25,840 --> 01:27:27,760
they have endorsed or or information

2164
01:27:27,760 --> 01:27:31,480
that they have to disposal

2165
01:27:34,719 --> 01:27:37,040
okay i think the action item and correct

2166
01:27:37,040 --> 01:27:38,960
me jonathan would be to bring this

2167
01:27:38,960 --> 01:27:41,760
discussion to the mailing list as to

2168
01:27:41,760 --> 01:27:44,880
uh how to get this published

2169
01:27:44,880 --> 01:27:46,400
does that make sense to you that

2170
01:27:46,400 --> 01:27:47,760
probably makes sense i do some people on

2171
01:27:47,760 --> 01:27:49,520
the queue let's give it a quick

2172
01:27:49,520 --> 01:27:50,639
over time

2173
01:27:50,639 --> 01:27:53,440
yeah carol

2174
01:27:53,600 --> 01:27:56,400
yeah i was stuck by struck by the

2175
01:27:56,400 --> 01:27:59,760
similarities of what you want i want

2176
01:27:59,760 --> 01:28:01,920
intermediate nodes to do with between

2177
01:28:01,920 --> 01:28:04,560
this and s frame actually

2178
01:28:04,560 --> 01:28:07,280
in both cases the main purpose of this

2179
01:28:07,280 --> 01:28:09,920
stp negotiation is to say

2180
01:28:09,920 --> 01:28:13,360
to tell other entities on the roots

2181
01:28:13,360 --> 01:28:14,719
please let this

2182
01:28:14,719 --> 01:28:17,440
this through and don't touch it

2183
01:28:17,440 --> 01:28:19,360
it's not unlike right this game i think

2184
01:28:19,360 --> 01:28:21,199
that's an accurate description of the of

2185
01:28:21,199 --> 01:28:24,400
what you present the escape right

2186
01:28:24,400 --> 01:28:26,480
yes it is we've been uh

2187
01:28:26,480 --> 01:28:28,480
been building products to this since

2188
01:28:28,480 --> 01:28:31,040
about

2189
01:28:31,199 --> 01:28:33,280
i want to say 2000

2190
01:28:33,280 --> 01:28:35,679
2004 2003.

2191
01:28:35,679 --> 01:28:39,199
i was about 2008 for skip for

2192
01:28:39,199 --> 01:28:40,639
for this so

2193
01:28:40,639 --> 01:28:41,600
yeah

2194
01:28:41,600 --> 01:28:43,600
it was yeah there was a lot in the works

2195
01:28:43,600 --> 01:28:45,040
before it ever

2196
01:28:45,040 --> 01:28:46,800
became uh

2197
01:28:46,800 --> 01:28:49,199
product

2198
01:28:49,280 --> 01:28:50,480
yep

2199
01:28:50,480 --> 01:28:53,519
thank you for confirming

2200
01:28:54,239 --> 01:28:57,440
good um the question regret in beginning

2201
01:28:57,440 --> 01:29:00,000
of the earlier slides uh for this they

2202
01:29:00,000 --> 01:29:01,719
were as i mentioned about the

2203
01:29:01,719 --> 01:29:04,239
tsbcis specification

2204
01:29:04,239 --> 01:29:05,440
um

2205
01:29:05,440 --> 01:29:07,360
it's kind of in the same

2206
01:29:07,360 --> 01:29:09,600
ballpark if you will

2207
01:29:09,600 --> 01:29:11,840
similar or not but not the same as what

2208
01:29:11,840 --> 01:29:13,679
we're doing i was kind of curious

2209
01:29:13,679 --> 01:29:15,760
how that was approval for that was

2210
01:29:15,760 --> 01:29:19,679
processed through the group

2211
01:29:22,560 --> 01:29:23,920
that was a while ago i'm not sure how

2212
01:29:23,920 --> 01:29:25,920
many people

2213
01:29:25,920 --> 01:29:29,040
here now are the extra member

2214
01:29:29,040 --> 01:29:30,880
okay yeah because it was like

2215
01:29:30,880 --> 01:29:32,400
in the very beginning of the of the

2216
01:29:32,400 --> 01:29:33,840
presentation

2217
01:29:33,840 --> 01:29:35,600
um yeah it was on the thomas

2218
01:29:35,600 --> 01:29:38,719
list of rrcs that were approved um i

2219
01:29:38,719 --> 01:29:40,639
guess since the last meeting or whatever

2220
01:29:40,639 --> 01:29:44,560
oh no that one yeah yeah um

2221
01:29:45,840 --> 01:29:48,000
so

2222
01:29:48,560 --> 01:29:50,080
i would actually suggest talking to the

2223
01:29:50,080 --> 01:29:53,280
media type reviewers for that and i know

2224
01:29:53,280 --> 01:29:55,360
murray is one that wasn't one

2225
01:29:55,360 --> 01:29:57,440
at that time so it might be something

2226
01:29:57,440 --> 01:30:00,000
where you need to ask that

2227
01:30:00,000 --> 01:30:02,080
um but i actually got in queue to ask a

2228
01:30:02,080 --> 01:30:04,000
different question um

2229
01:30:04,000 --> 01:30:06,000
which is actually on this slide if i can

2230
01:30:06,000 --> 01:30:08,400
if i can point to this uh from my

2231
01:30:08,400 --> 01:30:10,320
understanding of your description in

2232
01:30:10,320 --> 01:30:12,800
addition to the two media types uh that

2233
01:30:12,800 --> 01:30:14,800
you have in there you do have data

2234
01:30:14,800 --> 01:30:16,800
streams which you describe in this slide

2235
01:30:16,800 --> 01:30:19,199
as uh clear channel data

2236
01:30:19,199 --> 01:30:20,960
are you anticipating a media type

2237
01:30:20,960 --> 01:30:22,159
request

2238
01:30:22,159 --> 01:30:24,480
separate from the video and audio media

2239
01:30:24,480 --> 01:30:25,679
type of

2240
01:30:25,679 --> 01:30:27,199
requests

2241
01:30:27,199 --> 01:30:28,159
for

2242
01:30:28,159 --> 01:30:30,639
some sort of application slash skip as

2243
01:30:30,639 --> 01:30:32,880
well

2244
01:30:33,600 --> 01:30:36,239
um no the the reference to last bullet

2245
01:30:36,239 --> 01:30:38,320
in that slide is is that the data

2246
01:30:38,320 --> 01:30:40,080
present on the

2247
01:30:40,080 --> 01:30:41,760
um audio

2248
01:30:41,760 --> 01:30:44,800
or video skip

2249
01:30:44,800 --> 01:30:47,199
payload type it will be treated as clear

2250
01:30:47,199 --> 01:30:50,080
channel data don't mess with it

2251
01:30:50,080 --> 01:30:52,719
whatever is there just let it go

2252
01:30:52,719 --> 01:30:54,719
because there's there's negotiations

2253
01:30:54,719 --> 01:30:57,360
going on we need to fit the and then bid

2254
01:30:57,360 --> 01:31:01,760
integrity to to make the devices work

2255
01:31:01,760 --> 01:31:02,480
and

2256
01:31:02,480 --> 01:31:04,159
trying to trying to look at the traffic

2257
01:31:04,159 --> 01:31:06,159
channels not gonna not gonna help you

2258
01:31:06,159 --> 01:31:08,400
much

2259
01:31:09,040 --> 01:31:09,840
uh

2260
01:31:09,840 --> 01:31:11,760
i think you may want to

2261
01:31:11,760 --> 01:31:14,239
uh take another pass through the draft

2262
01:31:14,239 --> 01:31:16,560
and in your description of that because

2263
01:31:16,560 --> 01:31:18,480
that's not the same impression i got uh

2264
01:31:18,480 --> 01:31:22,239
with a quick look at the draft so okay

2265
01:31:22,239 --> 01:31:23,920
thanks well that's that's why we're here

2266
01:31:23,920 --> 01:31:26,400
comments

2267
01:31:28,159 --> 01:31:31,159
stefan

2268
01:31:34,080 --> 01:31:35,280
so um

2269
01:31:35,280 --> 01:31:38,000
having just gone through this xs thing

2270
01:31:38,000 --> 01:31:40,159
where

2271
01:31:40,159 --> 01:31:42,239
frankly a perfectly available iso

2272
01:31:42,239 --> 01:31:44,800
standard uh that just cost a little bit

2273
01:31:44,800 --> 01:31:48,159
of money raised a big big uproar

2274
01:31:48,159 --> 01:31:52,639
um i i think you will all have a hard

2275
01:31:52,639 --> 01:31:54,960
time to get anything through the

2276
01:31:54,960 --> 01:31:58,400
standard itf process where they needs to

2277
01:31:58,400 --> 01:32:00,480
be a reference in there to a document

2278
01:32:00,480 --> 01:32:03,520
that's not available to the public

2279
01:32:03,520 --> 01:32:05,040
and so far

2280
01:32:05,040 --> 01:32:07,520
my suggestion would be to target from

2281
01:32:07,520 --> 01:32:09,199
the outset

2282
01:32:09,199 --> 01:32:11,600
to give this to the independent stream

2283
01:32:11,600 --> 01:32:13,840
or whatever it's called so basically

2284
01:32:13,840 --> 01:32:16,960
not an itf document but still an rfc

2285
01:32:16,960 --> 01:32:18,400
uh and

2286
01:32:18,400 --> 01:32:20,480
uh

2287
01:32:20,480 --> 01:32:22,719
therefore something which most network

2288
01:32:22,719 --> 01:32:25,360
people pay some attention to

2289
01:32:25,360 --> 01:32:27,199
yeah and then you only have to go

2290
01:32:27,199 --> 01:32:29,280
through a conflict review in the idf and

2291
01:32:29,280 --> 01:32:30,880
that's that's

2292
01:32:30,880 --> 01:32:34,000
much easier thank you

2293
01:32:37,280 --> 01:32:38,960
right and then that sort of goes back

2294
01:32:38,960 --> 01:32:41,920
also to my comment about the tsvci spec

2295
01:32:41,920 --> 01:32:44,080
is that it also references

2296
01:32:44,080 --> 01:32:46,400
documents that were only available

2297
01:32:46,400 --> 01:32:48,960
through the government so i guess

2298
01:32:48,960 --> 01:32:51,440
again sort of requesting or

2299
01:32:51,440 --> 01:32:53,199
understanding how that process worked

2300
01:32:53,199 --> 01:32:55,040
for that particular

2301
01:32:55,040 --> 01:32:56,239
rfc

2302
01:32:56,239 --> 01:32:59,360
and its approval again this sort of

2303
01:32:59,360 --> 01:33:00,480
similar

2304
01:33:00,480 --> 01:33:03,120
to what work what work path if you will

2305
01:33:03,120 --> 01:33:05,040
that we're asking for

2306
01:33:05,040 --> 01:33:07,120
okay

2307
01:33:07,120 --> 01:33:09,360
car

2308
01:33:10,400 --> 01:33:11,679
hi um

2309
01:33:11,679 --> 01:33:13,840
we seem to be going a little bit

2310
01:33:13,840 --> 01:33:16,239
backwards in terms of the way the itf

2311
01:33:16,239 --> 01:33:19,040
handles these sorts of documents uh i i

2312
01:33:19,040 --> 01:33:21,199
was very surprised to see that all that

2313
01:33:21,199 --> 01:33:24,159
um the controversy about the um the spec

2314
01:33:24,159 --> 01:33:25,840
that stefan was just talking about

2315
01:33:25,840 --> 01:33:27,280
because we've done lots of payload

2316
01:33:27,280 --> 01:33:29,040
formats which have

2317
01:33:29,040 --> 01:33:31,199
you know had various degrees of

2318
01:33:31,199 --> 01:33:32,560
difficulty in accessing the

2319
01:33:32,560 --> 01:33:35,440
specifications over the years

2320
01:33:35,440 --> 01:33:37,920
so process wise i don't see that there

2321
01:33:37,920 --> 01:33:41,120
should be a problem with this in atf

2322
01:33:41,120 --> 01:33:44,320
and i i think the ietf certainly should

2323
01:33:44,320 --> 01:33:46,239
be able to

2324
01:33:46,239 --> 01:33:48,239
publish open specifications that

2325
01:33:48,239 --> 01:33:51,600
describe how to use a closed thing

2326
01:33:51,600 --> 01:33:53,600
um so i i would sort of somewhat

2327
01:33:53,600 --> 01:33:55,360
disagree with stefan and say that they

2328
01:33:55,360 --> 01:33:57,040
should go through the standard itf

2329
01:33:57,040 --> 01:33:59,360
process because the itf needs to be able

2330
01:33:59,360 --> 01:34:01,520
to do this sort of document and has in

2331
01:34:01,520 --> 01:34:03,199
the past

2332
01:34:03,199 --> 01:34:05,520
um so i i would encourage the group to

2333
01:34:05,520 --> 01:34:08,560
adopt this and take it on as a a a

2334
01:34:08,560 --> 01:34:10,400
payload format specification in the

2335
01:34:10,400 --> 01:34:12,880
usual way and work with

2336
01:34:12,880 --> 01:34:14,320
the chairs to work with the area

2337
01:34:14,320 --> 01:34:17,440
directors to to find a way of

2338
01:34:17,440 --> 01:34:18,560
your

2339
01:34:18,560 --> 01:34:19,760
uh

2340
01:34:19,760 --> 01:34:21,840
making making sure this is acceptable

2341
01:34:21,840 --> 01:34:23,679
and that that may just mean that uh you

2342
01:34:23,679 --> 01:34:26,080
know a small number of people are given

2343
01:34:26,080 --> 01:34:27,840
access to check that the specification

2344
01:34:27,840 --> 01:34:29,360
makes sense

2345
01:34:29,360 --> 01:34:31,120
um because it's accessible to the

2346
01:34:31,120 --> 01:34:32,800
community which cares and i think that's

2347
01:34:32,800 --> 01:34:34,639
what matters

2348
01:34:34,639 --> 01:34:37,360
um if i may speak for a minute the uh

2349
01:34:37,360 --> 01:34:41,199
that is possible to to for um request

2350
01:34:41,199 --> 01:34:42,560
permission for this

2351
01:34:42,560 --> 01:34:44,679
to look at this it's a skip standard

2352
01:34:44,679 --> 01:34:48,480
214.2 referenced in the r draft rfc

2353
01:34:48,480 --> 01:34:50,960
um and really most of the contents that

2354
01:34:50,960 --> 01:34:53,040
of that document of any technical

2355
01:34:53,040 --> 01:34:55,840
significance um

2356
01:34:55,840 --> 01:34:58,639
are in the draft rfc itself

2357
01:34:58,639 --> 01:34:59,520
this

2358
01:34:59,520 --> 01:35:01,280
doesn't

2359
01:35:01,280 --> 01:35:04,239
not much more than that

2360
01:35:05,679 --> 01:35:07,600
i mean i think it probably does need

2361
01:35:07,600 --> 01:35:11,520
someone who understands rtp um from this

2362
01:35:11,520 --> 01:35:14,639
from the ietf to look at look at the the

2363
01:35:14,639 --> 01:35:16,080
the kodak specification and look at

2364
01:35:16,080 --> 01:35:17,840
what's being proposed and say yeah this

2365
01:35:17,840 --> 01:35:19,440
makes sense

2366
01:35:19,440 --> 01:35:22,000
but i don't see that it requires it to

2367
01:35:22,000 --> 01:35:23,520
be made available to the entire

2368
01:35:23,520 --> 01:35:25,280
community it requires

2369
01:35:25,280 --> 01:35:27,040
it to be available to the community who

2370
01:35:27,040 --> 01:35:29,520
will be implementing it and you know

2371
01:35:29,520 --> 01:35:31,679
someone to to look at the spec and say

2372
01:35:31,679 --> 01:35:33,119
yeah that what's being proposed from the

2373
01:35:33,119 --> 01:35:36,000
rtv point makes sense uh and i'm pretty

2374
01:35:36,000 --> 01:35:37,119
sure we've done this sort of thing

2375
01:35:37,119 --> 01:35:39,679
before in itf's

2376
01:35:39,679 --> 01:35:42,920
that's fine

2377
01:35:46,880 --> 01:35:48,400
right

2378
01:35:48,400 --> 01:35:50,639
um yeah just on that point the isg

2379
01:35:50,639 --> 01:35:52,880
recently has uh

2380
01:35:52,880 --> 01:35:55,520
if you look there's there's a bcp 97 is

2381
01:35:55,520 --> 01:35:57,440
under revision for

2382
01:35:57,440 --> 01:35:59,119
exactly this reason we had a number of

2383
01:35:59,119 --> 01:36:01,280
documents come to us that

2384
01:36:01,280 --> 01:36:03,600
um we were not able to evaluate because

2385
01:36:03,600 --> 01:36:05,600
the specification to which it referred

2386
01:36:05,600 --> 01:36:07,520
was not available to us

2387
01:36:07,520 --> 01:36:09,520
i think the proposal is exactly what i

2388
01:36:09,520 --> 01:36:11,440
think colin just said as long as the

2389
01:36:11,440 --> 01:36:13,440
reviewers the people who need to review

2390
01:36:13,440 --> 01:36:15,199
it and approve it can get access to it

2391
01:36:15,199 --> 01:36:16,880
to make sure this the wrapping

2392
01:36:16,880 --> 01:36:19,040
specification is right then it can go

2393
01:36:19,040 --> 01:36:20,480
forward it doesn't need to be you know

2394
01:36:20,480 --> 01:36:22,639
permanently open public

2395
01:36:22,639 --> 01:36:24,400
but also but it is a problem if the

2396
01:36:24,400 --> 01:36:28,000
reviewers can't do their jobs that's all

2397
01:36:28,159 --> 01:36:30,239
we just have to uh the reviewers will

2398
01:36:30,239 --> 01:36:33,199
just have to contact the uh there's a

2399
01:36:33,199 --> 01:36:35,040
contact within the draft rfc at the

2400
01:36:35,040 --> 01:36:36,320
bottom

2401
01:36:36,320 --> 01:36:39,040
requesting access

2402
01:36:39,040 --> 01:36:40,800
we know in advance who they are we can

2403
01:36:40,800 --> 01:36:42,880
make sure that they get approved

2404
01:36:42,880 --> 01:36:46,639
yeah i think that's probably workable

2405
01:36:51,520 --> 01:36:54,480
okay so do we have the action items

2406
01:36:54,480 --> 01:36:57,119
identified

2407
01:36:57,600 --> 01:37:01,199
yes we have mailing list discussion

2408
01:37:04,400 --> 01:37:08,159
uh um i'm not sure yeah

2409
01:37:08,159 --> 01:37:11,040
sorry my my question is along the line

2410
01:37:11,040 --> 01:37:13,440
of that the action items i guess

2411
01:37:13,440 --> 01:37:16,960
um you're suggesting that we uh make the

2412
01:37:16,960 --> 01:37:18,159
doc the

2413
01:37:18,159 --> 01:37:20,960
background document skip 214.2 available

2414
01:37:20,960 --> 01:37:23,360
to certain people

2415
01:37:23,360 --> 01:37:25,280
we would need to know

2416
01:37:25,280 --> 01:37:27,280
who and will help guide them through the

2417
01:37:27,280 --> 01:37:29,119
process of who they need to

2418
01:37:29,119 --> 01:37:31,519
talk to

2419
01:37:31,920 --> 01:37:34,320
and who would be on the iatf side who

2420
01:37:34,320 --> 01:37:36,080
would be contacting us letting us know

2421
01:37:36,080 --> 01:37:40,239
who needs to get access to the document

2422
01:37:43,600 --> 01:37:46,080
i think i think that's probably a chair

2423
01:37:46,080 --> 01:37:49,840
item is that right jonathan

2424
01:37:53,199 --> 01:37:55,040
so we will um

2425
01:37:55,040 --> 01:37:56,639
try to get back to you with with

2426
01:37:56,639 --> 01:37:58,000
feedback

2427
01:37:58,000 --> 01:37:59,679
um okay

2428
01:37:59,679 --> 01:38:01,520
i mean i can think of some some folks

2429
01:38:01,520 --> 01:38:03,600
who who might uh

2430
01:38:03,600 --> 01:38:05,280
might be appropriate but we'll have to

2431
01:38:05,280 --> 01:38:06,560
discuss it

2432
01:38:06,560 --> 01:38:09,360
and we'll revisit the uh draft rfc for

2433
01:38:09,360 --> 01:38:10,400
for

2434
01:38:10,400 --> 01:38:12,639
making it clear that the uh the last

2435
01:38:12,639 --> 01:38:15,520
bullet in this slide referencing

2436
01:38:15,520 --> 01:38:18,639
treated as clear channel daily is is

2437
01:38:18,639 --> 01:38:21,199
is concise and and exact enough to

2438
01:38:21,199 --> 01:38:23,280
specify that it's referencing

2439
01:38:23,280 --> 01:38:25,199
just the data that is traveling within

2440
01:38:25,199 --> 01:38:26,239
the

2441
01:38:26,239 --> 01:38:28,320
uh audio skip

2442
01:38:28,320 --> 01:38:31,840
or video skip

2443
01:38:32,639 --> 01:38:35,360
traffic channels

2444
01:38:37,440 --> 01:38:39,600
okay

2445
01:38:39,600 --> 01:38:41,520
well thank you

2446
01:38:41,520 --> 01:38:43,040
thank you

2447
01:38:43,040 --> 01:38:45,840
thank you

2448
01:38:58,560 --> 01:38:59,920
okay you're on

2449
01:38:59,920 --> 01:39:02,239
go ahead

2450
01:39:07,280 --> 01:39:08,880
yeah yes right

2451
01:39:08,880 --> 01:39:10,000
cool

2452
01:39:10,000 --> 01:39:13,480
next slide please

2453
01:39:14,400 --> 01:39:16,800
so yeah i first wanted to

2454
01:39:16,800 --> 01:39:19,440
update on the avt co-working group on

2455
01:39:19,440 --> 01:39:21,280
s-frame

2456
01:39:21,280 --> 01:39:23,360
progress that has been made in various

2457
01:39:23,360 --> 01:39:24,960
areas

2458
01:39:24,960 --> 01:39:27,520
so first you might already be aware that

2459
01:39:27,520 --> 01:39:31,119
uh the ietfs framework you issued a call

2460
01:39:31,119 --> 01:39:33,760
for adoption of uh

2461
01:39:33,760 --> 01:39:34,719
the

2462
01:39:34,719 --> 01:39:37,199
omar s frame draft which is mostly

2463
01:39:37,199 --> 01:39:38,560
talking about

2464
01:39:38,560 --> 01:39:41,360
the format itself and has some arctic

2465
01:39:41,360 --> 01:39:43,920
architecture points as well

2466
01:39:43,920 --> 01:39:47,040
so it was a successful call with some uh

2467
01:39:47,040 --> 01:39:49,040
feedback that maybe the graph should be

2468
01:39:49,040 --> 01:39:51,920
split in a pure

2469
01:39:51,920 --> 01:39:56,639
format based spec and a separate um

2470
01:39:56,639 --> 01:39:59,760
active architecture draft

2471
01:39:59,760 --> 01:40:02,800
in addition to that

2472
01:40:02,800 --> 01:40:05,360
on the mailing list or in various place

2473
01:40:05,360 --> 01:40:07,280
it was noted that there's interest in

2474
01:40:07,280 --> 01:40:09,040
using strain format either at the back

2475
01:40:09,040 --> 01:40:11,440
up level or the frame level

2476
01:40:11,440 --> 01:40:14,000
but not in between which might be a good

2477
01:40:14,000 --> 01:40:15,520
simplification

2478
01:40:15,520 --> 01:40:17,440
also it was noted that

2479
01:40:17,440 --> 01:40:20,480
the sram format itself is uh has some

2480
01:40:20,480 --> 01:40:23,520
interest outside rtp um so for instance

2481
01:40:23,520 --> 01:40:25,840
you could you could use web transport or

2482
01:40:25,840 --> 01:40:28,800
rtc data channel uh with webcodex and

2483
01:40:28,800 --> 01:40:31,199
still use this frame uh in between to do

2484
01:40:31,199 --> 01:40:32,960
end-to-end encryption

2485
01:40:32,960 --> 01:40:34,080
um

2486
01:40:34,080 --> 01:40:34,960
so

2487
01:40:34,960 --> 01:40:38,719
that that means that uh we

2488
01:40:38,719 --> 01:40:41,360
we want integration with rtp but we also

2489
01:40:41,360 --> 01:40:43,280
want a screen to be used uh

2490
01:40:43,280 --> 01:40:45,119
outside of rtp

2491
01:40:45,119 --> 01:40:48,560
um in addition to that uh on the wp side

2492
01:40:48,560 --> 01:40:50,400
so the api level

2493
01:40:50,400 --> 01:40:52,639
the webrtc working group adopted the

2494
01:40:52,639 --> 01:40:54,880
webrt and curry transform as the first

2495
01:40:54,880 --> 01:40:56,400
public working draft

2496
01:40:56,400 --> 01:40:59,119
and the functionality

2497
01:40:59,119 --> 01:41:01,760
already shipped in chrome since

2498
01:41:01,760 --> 01:41:02,840
maybe a

2499
01:41:02,840 --> 01:41:06,400
year and it's also enabled by default in

2500
01:41:06,400 --> 01:41:08,560
software tech preview

2501
01:41:08,560 --> 01:41:09,679
and

2502
01:41:09,679 --> 01:41:12,800
it might be also

2503
01:41:12,800 --> 01:41:13,760
in

2504
01:41:13,760 --> 01:41:15,840
in the queue for other browsers as well

2505
01:41:15,840 --> 01:41:17,600
so

2506
01:41:17,600 --> 01:41:19,679
progress is being made to add support to

2507
01:41:19,679 --> 01:41:22,880
allow webpages to to use s-frame or to

2508
01:41:22,880 --> 01:41:24,159
implement engine encryption into

2509
01:41:24,159 --> 01:41:25,440
browsers

2510
01:41:25,440 --> 01:41:26,400
um

2511
01:41:26,400 --> 01:41:28,719
so the webrt and kodi transform is

2512
01:41:28,719 --> 01:41:29,920
definitely used for end-to-end

2513
01:41:29,920 --> 01:41:31,520
encryption

2514
01:41:31,520 --> 01:41:32,880
it's also

2515
01:41:32,880 --> 01:41:35,119
being used either for prototype or real

2516
01:41:35,119 --> 01:41:37,440
applications for other stuff like app

2517
01:41:37,440 --> 01:41:40,000
specific metadata enrichment

2518
01:41:40,000 --> 01:41:41,920
of and credit payloads

2519
01:41:41,920 --> 01:41:44,239
it was also used for uh

2520
01:41:44,239 --> 01:41:45,840
emulating

2521
01:41:45,840 --> 01:41:48,639
emulating red

2522
01:41:48,639 --> 01:41:52,000
if if it's not available in the browser

2523
01:41:52,000 --> 01:41:53,520
um

2524
01:41:53,520 --> 01:41:54,560
so

2525
01:41:54,560 --> 01:41:57,360
so we are seeing that solutions are in

2526
01:41:57,360 --> 01:41:59,119
browsers are more and more

2527
01:41:59,119 --> 01:42:00,880
using that

2528
01:42:00,880 --> 01:42:01,679
and

2529
01:42:01,679 --> 01:42:03,760
we're seeing that solution existing

2530
01:42:03,760 --> 01:42:06,080
webrtc solutions are using

2531
01:42:06,080 --> 01:42:08,960
uh like google do facetime webex there

2532
01:42:08,960 --> 01:42:11,040
all adding progressively support for

2533
01:42:11,040 --> 01:42:14,159
energy encryption and they're all doing

2534
01:42:14,159 --> 01:42:16,719
that with different test firm like

2535
01:42:16,719 --> 01:42:18,480
formats and flavors

2536
01:42:18,480 --> 01:42:19,440
uh

2537
01:42:19,440 --> 01:42:20,639
so

2538
01:42:20,639 --> 01:42:22,719
there's no interpolation it's not the

2539
01:42:22,719 --> 01:42:24,159
same kind of technology it's very

2540
01:42:24,159 --> 01:42:26,639
related but it's not exactly the same

2541
01:42:26,639 --> 01:42:29,199
some workarounds are being used and so

2542
01:42:29,199 --> 01:42:31,840
so it's not great uh and it's not great

2543
01:42:31,840 --> 01:42:33,520
because it's a security privacy

2544
01:42:33,520 --> 01:42:37,040
technology and usually having just one

2545
01:42:37,040 --> 01:42:37,840
uh

2546
01:42:37,840 --> 01:42:39,920
well identified piece of technology to

2547
01:42:39,920 --> 01:42:42,800
do that is better so

2548
01:42:42,800 --> 01:42:44,480
next slide

2549
01:42:44,480 --> 01:42:46,560
based on that my understanding is really

2550
01:42:46,560 --> 01:42:48,880
that we need to make progress uh i think

2551
01:42:48,880 --> 01:42:50,880
we already had a similar slide one year

2552
01:42:50,880 --> 01:42:53,040
ago about that saying hey things are

2553
01:42:53,040 --> 01:42:55,199
starting to evolve and to an encryption

2554
01:42:55,199 --> 01:42:57,199
is being shipped and we need to make

2555
01:42:57,199 --> 01:42:59,440
progress and it's even more of a case

2556
01:42:59,440 --> 01:43:00,320
now

2557
01:43:00,320 --> 01:43:01,760
um

2558
01:43:01,760 --> 01:43:03,760
so and it's particularly particularly

2559
01:43:03,760 --> 01:43:04,880
the case for

2560
01:43:04,880 --> 01:43:08,320
s frame within webrtc ecosystem for web

2561
01:43:08,320 --> 01:43:09,920
transport and data channel we still have

2562
01:43:09,920 --> 01:43:13,040
some time but for webrtc ecosystem it's

2563
01:43:13,040 --> 01:43:14,800
it's really uh

2564
01:43:14,800 --> 01:43:17,520
getting fat there so that means s frame

2565
01:43:17,520 --> 01:43:20,080
rtp integration and s frame sdp

2566
01:43:20,080 --> 01:43:21,280
integration

2567
01:43:21,280 --> 01:43:22,159
um

2568
01:43:22,159 --> 01:43:24,560
my understanding in the past was that uh

2569
01:43:24,560 --> 01:43:26,800
avt4 for instance would be responsible

2570
01:43:26,800 --> 01:43:30,000
for doing the srm rtp integration but

2571
01:43:30,000 --> 01:43:32,800
we are seeing um email threads on the

2572
01:43:32,800 --> 01:43:35,679
sframe working mailing list about that

2573
01:43:35,679 --> 01:43:38,800
so first question that i have to the avt

2574
01:43:38,800 --> 01:43:40,880
core working group uh no

2575
01:43:40,880 --> 01:43:42,800
previous slide my first question would

2576
01:43:42,800 --> 01:43:44,000
be uh

2577
01:43:44,000 --> 01:43:45,280
to

2578
01:43:45,280 --> 01:43:46,800
to be clear about

2579
01:43:46,800 --> 01:43:49,440
uh where should that work go or where

2580
01:43:49,440 --> 01:43:50,960
should it be worked on

2581
01:43:50,960 --> 01:43:52,239
could it be all done in this frame

2582
01:43:52,239 --> 01:43:54,480
working group the sms integration

2583
01:43:54,480 --> 01:43:55,360
or

2584
01:43:55,360 --> 01:43:57,280
would it be better to do that in ibt

2585
01:43:57,280 --> 01:44:00,000
core because currently i see that uh

2586
01:44:00,000 --> 01:44:01,360
there are discussions being done in

2587
01:44:01,360 --> 01:44:03,440
parallel and maybe it would be

2588
01:44:03,440 --> 01:44:06,719
good to be clear exactly about where

2589
01:44:06,719 --> 01:44:08,960
he's going to work and

2590
01:44:08,960 --> 01:44:10,800
which working group is responsible for

2591
01:44:10,800 --> 01:44:13,280
which part

2592
01:44:13,440 --> 01:44:16,759
and your opinion

2593
01:44:20,639 --> 01:44:21,679
um

2594
01:44:21,679 --> 01:44:24,239
i think that probably anything where

2595
01:44:24,239 --> 01:44:25,840
certainly anything where like rtp

2596
01:44:25,840 --> 01:44:27,520
architecture is implicated is best in

2597
01:44:27,520 --> 01:44:28,719
avt core

2598
01:44:28,719 --> 01:44:29,600
because i feel like that for the

2599
01:44:29,600 --> 01:44:31,040
expertise is

2600
01:44:31,040 --> 01:44:34,040
um

2601
01:44:34,560 --> 01:44:37,360
okay so that's that seems reasonable uh

2602
01:44:37,360 --> 01:44:39,679
for stp integration i guess that it

2603
01:44:39,679 --> 01:44:42,159
should be s frame or a music

2604
01:44:42,159 --> 01:44:43,199
correct

2605
01:44:43,199 --> 01:44:45,679
probably yeah though certainly

2606
01:44:45,679 --> 01:44:47,360
you know insofar as it's

2607
01:44:47,360 --> 01:44:48,719
i mean yeah i mean especially because it

2608
01:44:48,719 --> 01:44:49,440
probably needs something more

2609
01:44:49,440 --> 01:44:50,800
complicated than just

2610
01:44:50,800 --> 01:44:52,719
what a payload format would do so

2611
01:44:52,719 --> 01:44:53,920
probably that means that music

2612
01:44:53,920 --> 01:44:55,360
integration

2613
01:44:55,360 --> 01:44:57,920
okay okay um

2614
01:44:57,920 --> 01:44:59,440
okay so

2615
01:44:59,440 --> 01:45:03,559
it's good we're in a vt core

2616
01:45:05,040 --> 01:45:08,400
yeah just on that point the the stp

2617
01:45:08,400 --> 01:45:10,800
um i mean obviously music is the home

2618
01:45:10,800 --> 01:45:13,760
for sdp the payload formats are usually

2619
01:45:13,760 --> 01:45:16,400
defined in avt core and that's but

2620
01:45:16,400 --> 01:45:18,880
specifies a lot of the sdp parameters so

2621
01:45:18,880 --> 01:45:22,480
it maybe needs to review here as well

2622
01:45:23,199 --> 01:45:26,080
okay um so so it's great we're in a ut

2623
01:45:26,080 --> 01:45:27,760
core we're discussing that so let's try

2624
01:45:27,760 --> 01:45:29,280
to make progress

2625
01:45:29,280 --> 01:45:31,280
so at last meeting we we discussed a lot

2626
01:45:31,280 --> 01:45:34,080
the packet versus frame issue

2627
01:45:34,080 --> 01:45:35,520
and uh

2628
01:45:35,520 --> 01:45:37,360
i think that there are common

2629
01:45:37,360 --> 01:45:40,159
requirements in both cases so if we put

2630
01:45:40,159 --> 01:45:42,159
the packet versus frame issue aside we

2631
01:45:42,159 --> 01:45:43,840
can try to focus on uncommon

2632
01:45:43,840 --> 01:45:45,679
requirements and that's what we try to

2633
01:45:45,679 --> 01:45:49,360
do in the next slides next few slides

2634
01:45:49,360 --> 01:45:51,440
um

2635
01:45:51,440 --> 01:45:54,239
so yeah the vs frame working

2636
01:45:54,239 --> 01:45:55,760
there was a good discussions in base

2637
01:45:55,760 --> 01:45:57,600
frame working with making list about

2638
01:45:57,600 --> 01:46:00,320
various approaches and

2639
01:46:00,320 --> 01:46:02,239
basically i think

2640
01:46:02,239 --> 01:46:03,280
we

2641
01:46:03,280 --> 01:46:05,679
we know that middleware uh middleware

2642
01:46:05,679 --> 01:46:08,080
being like sfus network intermediaries

2643
01:46:08,080 --> 01:46:10,560
or browsers cannot inspect encrypted or

2644
01:46:10,560 --> 01:46:13,360
transform packet payloads

2645
01:46:13,360 --> 01:46:16,000
but they still especially as a fuse they

2646
01:46:16,000 --> 01:46:18,239
still need information to root and

2647
01:46:18,239 --> 01:46:20,480
complete transform packets separately um

2648
01:46:20,480 --> 01:46:21,520
and that's

2649
01:46:21,520 --> 01:46:23,440
especially the case in svc simulcat

2650
01:46:23,440 --> 01:46:24,719
cases but

2651
01:46:24,719 --> 01:46:27,119
it's already the case for instance in

2652
01:46:27,119 --> 01:46:28,960
in non-simulcast cases

2653
01:46:28,960 --> 01:46:30,480
so

2654
01:46:30,480 --> 01:46:33,199
one question was uh

2655
01:46:33,199 --> 01:46:35,280
from the main list whether

2656
01:46:35,280 --> 01:46:37,280
it should be if possible just from http

2657
01:46:37,280 --> 01:46:39,679
inspection to determine that content is

2658
01:46:39,679 --> 01:46:43,600
encrypted or transformed and if so

2659
01:46:43,600 --> 01:46:45,840
where should the information be located

2660
01:46:45,840 --> 01:46:47,840
should it should should it be just a

2661
01:46:47,840 --> 01:46:50,480
payload type should it be a dedicated

2662
01:46:50,480 --> 01:46:51,920
head extension

2663
01:46:51,920 --> 01:46:54,159
should we put that information in rtp

2664
01:46:54,159 --> 01:46:56,639
payload

2665
01:46:56,639 --> 01:46:57,440
so

2666
01:46:57,440 --> 01:46:58,639
that's

2667
01:46:58,639 --> 01:47:00,639
feedback i like to get from

2668
01:47:00,639 --> 01:47:03,440
ebitda forks

2669
01:47:05,119 --> 01:47:08,119
car

2670
01:47:08,159 --> 01:47:10,400
uh i'm a little

2671
01:47:10,400 --> 01:47:13,440
uh confused about what you mean by this

2672
01:47:13,440 --> 01:47:16,639
question because um my understanding is

2673
01:47:16,639 --> 01:47:18,719
that the payload type defines what what

2674
01:47:18,719 --> 01:47:20,800
is within the rtp payload so i'm not

2675
01:47:20,800 --> 01:47:22,880
sure what you mean by the separate

2676
01:47:22,880 --> 01:47:26,480
the separate points there

2677
01:47:26,639 --> 01:47:27,679
um

2678
01:47:27,679 --> 01:47:29,840
so currently in uh

2679
01:47:29,840 --> 01:47:32,639
the current and deployed environments

2680
01:47:32,639 --> 01:47:35,440
the payload type is defining

2681
01:47:35,440 --> 01:47:41,040
the codec so let's say h64 api 8p9

2682
01:47:41,280 --> 01:47:43,280
and we need we need at some point this

2683
01:47:43,280 --> 01:47:45,280
information anyway

2684
01:47:45,280 --> 01:47:48,719
and that's how it's being deployed but

2685
01:47:48,719 --> 01:47:50,800
we could also say that you know that's

2686
01:47:50,800 --> 01:47:53,360
wrong and the pilot type should say oh

2687
01:47:53,360 --> 01:47:55,600
it's encrypted content or it's content

2688
01:47:55,600 --> 01:47:57,920
that you you do not need to care

2689
01:47:57,920 --> 01:47:59,119
it's opaque

2690
01:47:59,119 --> 01:48:02,560
and that's one possibility

2691
01:48:02,560 --> 01:48:05,199
so i i don't think that's what the

2692
01:48:05,199 --> 01:48:07,600
payload type does

2693
01:48:07,600 --> 01:48:10,800
in rtp the payload type defines the

2694
01:48:10,800 --> 01:48:12,480
payload format

2695
01:48:12,480 --> 01:48:14,639
and the payload format describes what

2696
01:48:14,639 --> 01:48:19,360
codec it is and how it is packaged

2697
01:48:19,360 --> 01:48:21,600
and so if it specifies what's the

2698
01:48:21,600 --> 01:48:25,199
contents of the rtp payload

2699
01:48:27,119 --> 01:48:28,080
yeah

2700
01:48:28,080 --> 01:48:30,000
i mean the only thing is that it was i

2701
01:48:30,000 --> 01:48:32,639
mean it was right there in the in some

2702
01:48:32,639 --> 01:48:34,320
discussion of the main disease that

2703
01:48:34,320 --> 01:48:35,199
maybe

2704
01:48:35,199 --> 01:48:37,679
yeah signaling that in the sdp that the

2705
01:48:37,679 --> 01:48:39,119
content was

2706
01:48:39,119 --> 01:48:41,040
even if it is yes

2707
01:48:41,040 --> 01:48:41,760
and

2708
01:48:41,760 --> 01:48:44,000
we don't change the packet decision

2709
01:48:44,000 --> 01:48:45,679
of the codec just

2710
01:48:45,679 --> 01:48:48,239
increasing the the payload yeah the the

2711
01:48:48,239 --> 01:48:51,040
payload of the the of the rtp packet

2712
01:48:51,040 --> 01:48:53,679
that it could go from there within the

2713
01:48:53,679 --> 01:48:56,000
the same pilot time but for example me i

2714
01:48:56,000 --> 01:48:57,600
think that it will have a different

2715
01:48:57,600 --> 01:49:00,719
payload type to specify that it is not

2716
01:49:00,719 --> 01:49:01,760
the

2717
01:49:01,760 --> 01:49:04,639
the normal payload type so this is a

2718
01:49:04,639 --> 01:49:06,960
it is not um

2719
01:49:06,960 --> 01:49:08,400
we are saying what is the solution is

2720
01:49:08,400 --> 01:49:10,960
that some people have claimed that

2721
01:49:10,960 --> 01:49:12,719
it could be done in a different way so

2722
01:49:12,719 --> 01:49:13,599
yes

2723
01:49:13,599 --> 01:49:15,520
we were seeking guidance about

2724
01:49:15,520 --> 01:49:17,360
exactly if

2725
01:49:17,360 --> 01:49:20,000
if this could be an option or we should

2726
01:49:20,000 --> 01:49:21,040
just

2727
01:49:21,040 --> 01:49:23,520
er if we see for example shape and

2728
01:49:23,520 --> 01:49:23,920
sending

2729
01:49:23,920 --> 01:49:25,199
[Music]

2730
01:49:25,199 --> 01:49:26,800
an rtp packet with

2731
01:49:26,800 --> 01:49:29,360
with payload the payload network for vp8

2732
01:49:29,360 --> 01:49:32,080
then the payload must be vp8

2733
01:49:32,080 --> 01:49:35,119
and an unless view or whatever it can

2734
01:49:35,119 --> 01:49:36,480
expect it in

2735
01:49:36,480 --> 01:49:38,080
an exped to have

2736
01:49:38,080 --> 01:49:40,000
the the correct

2737
01:49:40,000 --> 01:49:43,040
payload in there

2738
01:49:43,040 --> 01:49:45,119
um so i think that there's some separate

2739
01:49:45,119 --> 01:49:47,040
issue issues here

2740
01:49:47,040 --> 01:49:49,440
i mean um

2741
01:49:49,440 --> 01:49:51,679
one is how you signal it and one is what

2742
01:49:51,679 --> 01:49:56,080
is the payload format um

2743
01:49:56,080 --> 01:49:58,719
you know the the the the the question on

2744
01:49:58,719 --> 01:50:00,719
the slide about here is this located in

2745
01:50:00,719 --> 01:50:02,560
the the payload type or within the itp

2746
01:50:02,560 --> 01:50:04,239
pillow that i mean they're the same

2747
01:50:04,239 --> 01:50:05,440
thing

2748
01:50:05,440 --> 01:50:08,000
so you may are you asking about the way

2749
01:50:08,000 --> 01:50:09,520
that

2750
01:50:09,520 --> 01:50:11,280
is included into the packet or the way

2751
01:50:11,280 --> 01:50:12,719
the data is

2752
01:50:12,719 --> 01:50:14,239
the way the contents of the packets are

2753
01:50:14,239 --> 01:50:17,239
signaled

2754
01:50:22,460 --> 01:50:24,400
[Music]

2755
01:50:24,400 --> 01:50:27,040
so yeah i was trying to to to cover the

2756
01:50:27,040 --> 01:50:29,679
fact that um

2757
01:50:29,679 --> 01:50:32,239
in vs frame uh working mainly so there

2758
01:50:32,239 --> 01:50:36,799
was a a proposal and um

2759
01:50:36,880 --> 01:50:38,960
usually you could say oh i want to

2760
01:50:38,960 --> 01:50:41,119
negotiate vpa because that's really what

2761
01:50:41,119 --> 01:50:44,480
i want and i want also to to this frame

2762
01:50:44,480 --> 01:50:45,520
um

2763
01:50:45,520 --> 01:50:47,440
so then you need to provide that

2764
01:50:47,440 --> 01:50:49,360
information the fact that you're using

2765
01:50:49,360 --> 01:50:52,239
vp8 and the fact that you're using s

2766
01:50:52,239 --> 01:50:53,760
frame uh

2767
01:50:53,760 --> 01:50:56,000
to view the party and

2768
01:50:56,000 --> 01:50:59,599
this information dp8 plus s frame uh

2769
01:50:59,599 --> 01:51:01,840
could go also in the packet or it could

2770
01:51:01,840 --> 01:51:04,840
be left elsewhere and so on and that's

2771
01:51:04,840 --> 01:51:08,000
uh what what i would like to to hear

2772
01:51:08,000 --> 01:51:10,320
about

2773
01:51:11,440 --> 01:51:13,520
because we we think that getting both

2774
01:51:13,520 --> 01:51:15,119
information like that

2775
01:51:15,119 --> 01:51:18,840
yeah it is uh it's ep8 and yeah it's

2776
01:51:18,840 --> 01:51:22,880
um it's encrypted it's transformed uh

2777
01:51:22,880 --> 01:51:24,400
would be useful

2778
01:51:24,400 --> 01:51:28,559
by looking at rtp packets

2779
01:51:29,440 --> 01:51:32,080
yeah i mean i think my argument here

2780
01:51:32,080 --> 01:51:34,159
would be if you're changing what what is

2781
01:51:34,159 --> 01:51:35,760
the payload then that's a different

2782
01:51:35,760 --> 01:51:38,080
payload format and maybe that's some

2783
01:51:38,080 --> 01:51:40,239
sort of encapsulation payload formats

2784
01:51:40,239 --> 01:51:41,199
but

2785
01:51:41,199 --> 01:51:44,000
it seems strange to say this is vp8 but

2786
01:51:44,000 --> 01:51:47,360
the content isn't actually vp8

2787
01:51:47,360 --> 01:51:50,480
yep sounds good

2788
01:51:56,560 --> 01:51:59,119
number nine

2789
01:51:59,440 --> 01:52:00,960
i think what

2790
01:52:00,960 --> 01:52:02,880
uh there's a couple of distinct issues

2791
01:52:02,880 --> 01:52:04,320
as colin said

2792
01:52:04,320 --> 01:52:06,880
one is the negotiation of specific rtp

2793
01:52:06,880 --> 01:52:08,320
header extensions like we've had the

2794
01:52:08,320 --> 01:52:10,000
frame marking header extension there's

2795
01:52:10,000 --> 01:52:11,840
the dependency descriptor

2796
01:52:11,840 --> 01:52:12,960
you know that there's routing

2797
01:52:12,960 --> 01:52:15,599
information that's being negotiated

2798
01:52:15,599 --> 01:52:17,520
um that really does not tell you

2799
01:52:17,520 --> 01:52:19,520
anything about what's in the payload

2800
01:52:19,520 --> 01:52:21,760
although people have been using it as a

2801
01:52:21,760 --> 01:52:23,520
kind of a hint of what might be in the

2802
01:52:23,520 --> 01:52:26,400
payload like it you know it's likely to

2803
01:52:26,400 --> 01:52:28,000
be encrypted but it doesn't really tell

2804
01:52:28,000 --> 01:52:29,679
you that explicitly

2805
01:52:29,679 --> 01:52:31,199
and the thing is that you could

2806
01:52:31,199 --> 01:52:33,040
negotiate those rgb header extensions

2807
01:52:33,040 --> 01:52:35,119
without encrypting the payload

2808
01:52:35,119 --> 01:52:36,719
right so

2809
01:52:36,719 --> 01:52:38,639
um and then there's the payload type

2810
01:52:38,639 --> 01:52:40,719
which or negotiation of things like the

2811
01:52:40,719 --> 01:52:43,040
codec but again that currently doesn't

2812
01:52:43,040 --> 01:52:44,719
tell you whether the payload itself is

2813
01:52:44,719 --> 01:52:47,280
encrypted so it seems to me like there's

2814
01:52:47,280 --> 01:52:49,119
something missing in there

2815
01:52:49,119 --> 01:52:50,880
um and i know there's been discussions

2816
01:52:50,880 --> 01:52:53,040
on the s frame mailing list about

2817
01:52:53,040 --> 01:52:54,880
whether you really want to even tell the

2818
01:52:54,880 --> 01:52:56,560
sfu that you're encrypting it or it's

2819
01:52:56,560 --> 01:52:59,760
none of the sfu's business

2820
01:52:59,760 --> 01:53:02,400
so i know there's there's that

2821
01:53:02,400 --> 01:53:04,159
issue because really the

2822
01:53:04,159 --> 01:53:05,840
the encrypted payload is really an

2823
01:53:05,840 --> 01:53:08,000
end-to-end thing and sdp really isn't

2824
01:53:08,000 --> 01:53:10,800
about that it's hot by hop

2825
01:53:10,800 --> 01:53:12,719
but i think it's a little bit dangerous

2826
01:53:12,719 --> 01:53:15,199
to assume that because you've negotiated

2827
01:53:15,199 --> 01:53:17,920
a particular header extension that uh

2828
01:53:17,920 --> 01:53:20,239
everything will work end to end with an

2829
01:53:20,239 --> 01:53:22,239
encrypted payload uh because there could

2830
01:53:22,239 --> 01:53:24,480
be as we just talked about with the b2b

2831
01:53:24,480 --> 01:53:25,920
uas right there could be somebody in the

2832
01:53:25,920 --> 01:53:28,080
middle who's looking at this and if the

2833
01:53:28,080 --> 01:53:29,360
sdp doesn't

2834
01:53:29,360 --> 01:53:31,199
tell it that they give it any inkling

2835
01:53:31,199 --> 01:53:33,199
that it's encrypted it probably could be

2836
01:53:33,199 --> 01:53:37,040
uh could become a problem at some point

2837
01:53:37,360 --> 01:53:39,440
so i think there is a piece that's maybe

2838
01:53:39,440 --> 01:53:40,480
none of the

2839
01:53:40,480 --> 01:53:42,080
some of the information is in none of

2840
01:53:42,080 --> 01:53:43,599
these none of the things you described

2841
01:53:43,599 --> 01:53:45,040
here it's not right yellow type it's not

2842
01:53:45,040 --> 01:53:46,719
a header extension

2843
01:53:46,719 --> 01:53:49,679
it's probably something else

2844
01:53:52,239 --> 01:53:53,760
oh yes i mean it seems to me like

2845
01:53:53,760 --> 01:53:55,280
conceptually what this actually should

2846
01:53:55,280 --> 01:53:57,040
be i mean insofar as

2847
01:53:57,040 --> 01:53:58,880
everything in the rtp session will be s

2848
01:53:58,880 --> 01:54:00,719
frame which i think is what people

2849
01:54:00,719 --> 01:54:02,000
probably want because you don't because

2850
01:54:02,000 --> 01:54:03,440
i think having this be

2851
01:54:03,440 --> 01:54:05,760
mixed is a security and you know

2852
01:54:05,760 --> 01:54:07,520
nightmare i think what this actually is

2853
01:54:07,520 --> 01:54:10,480
a profile much like savp has a profile

2854
01:54:10,480 --> 01:54:12,320
um this is a new transformation like

2855
01:54:12,320 --> 01:54:14,000
savpp

2856
01:54:14,000 --> 01:54:15,280
um

2857
01:54:15,280 --> 01:54:17,360
which uh i mean i don't know if you just

2858
01:54:17,360 --> 01:54:19,119
i mean whether you actually negotiate it

2859
01:54:19,119 --> 01:54:20,639
that way for backward compatibility

2860
01:54:20,639 --> 01:54:24,719
reasons is a separate issue but um

2861
01:54:24,719 --> 01:54:27,360
i feel like

2862
01:54:27,360 --> 01:54:28,719
you know that might be at least

2863
01:54:28,719 --> 01:54:30,239
conceptually the cleanest way to

2864
01:54:30,239 --> 01:54:32,239
approach it and if we have to hack

2865
01:54:32,239 --> 01:54:33,440
something to get it to work with

2866
01:54:33,440 --> 01:54:36,719
browsers or whatever so be it um

2867
01:54:36,719 --> 01:54:37,679
but

2868
01:54:37,679 --> 01:54:40,480
i know that certainly especially for

2869
01:54:40,480 --> 01:54:42,000
you know the problem with having to be a

2870
01:54:42,000 --> 01:54:43,760
payload type is a

2871
01:54:43,760 --> 01:54:45,679
the payload type

2872
01:54:45,679 --> 01:54:48,880
um multiplication issues

2873
01:54:48,880 --> 01:54:50,400
and

2874
01:54:50,400 --> 01:54:52,400
um also just the i don't know if you

2875
01:54:52,400 --> 01:54:54,639
want to be able to negotiate both

2876
01:54:54,639 --> 01:54:55,679
you know

2877
01:54:55,679 --> 01:54:57,199
s frame and non-s frame in the same

2878
01:54:57,199 --> 01:54:58,639
session because that sounds like a good

2879
01:54:58,639 --> 01:55:00,080
way to accidentally discover you're not

2880
01:55:00,080 --> 01:55:01,520
intending

2881
01:55:01,520 --> 01:55:03,040
or not discover it

2882
01:55:03,040 --> 01:55:05,840
worse

2883
01:55:14,719 --> 01:55:17,520
uh sue us

2884
01:55:27,679 --> 01:55:29,840
sfu to make some decisions it's not

2885
01:55:29,840 --> 01:55:30,960
they're not

2886
01:55:30,960 --> 01:55:32,800
different islands they have to be

2887
01:55:32,800 --> 01:55:34,239
combined together in any business logic

2888
01:55:34,239 --> 01:55:36,320
that you apply on per packet basis and

2889
01:55:36,320 --> 01:55:38,719
stp is the one that sets up some uh kind

2890
01:55:38,719 --> 01:55:41,679
of stream level indications and uh and

2891
01:55:41,679 --> 01:55:43,360
speaking here just in terms of the

2892
01:55:43,360 --> 01:55:45,440
articulator it's a bit kind of not

2893
01:55:45,440 --> 01:55:47,040
thinking about what happens in the

2894
01:55:47,040 --> 01:55:48,560
setting up there

2895
01:55:48,560 --> 01:55:50,080
and uh

2896
01:55:50,080 --> 01:55:52,000
i did did uh see some of the discussions

2897
01:55:52,000 --> 01:55:53,360
that happening on the streams mailing

2898
01:55:53,360 --> 01:55:56,000
list about you know saying uh uh for for

2899
01:55:56,000 --> 01:55:59,199
a media stream level or for or for

2900
01:55:59,199 --> 01:56:02,080
particular payload type on applicability

2901
01:56:02,080 --> 01:56:05,360
that if if this is an uh s frame or on s

2902
01:56:05,360 --> 01:56:06,560
packet

2903
01:56:06,560 --> 01:56:10,000
that way uh for it's kind of hint to the

2904
01:56:10,000 --> 01:56:12,159
an stp offensive can be defined

2905
01:56:12,159 --> 01:56:14,159
explicitly to say what the behavior

2906
01:56:14,159 --> 01:56:15,040
should be

2907
01:56:15,040 --> 01:56:17,520
uh they think it's a hint uh to the sf

2908
01:56:17,520 --> 01:56:19,599
utility it's saying that you know you

2909
01:56:19,599 --> 01:56:21,280
know don't look into the packet further

2910
01:56:21,280 --> 01:56:23,599
because it's entered and created you

2911
01:56:23,599 --> 01:56:26,159
don't get anything versus uh something

2912
01:56:26,159 --> 01:56:28,000
like if it's if it is not an internet

2913
01:56:28,000 --> 01:56:29,360
encrypted thing you can look into the

2914
01:56:29,360 --> 01:56:32,320
packet to see for example audio level or

2915
01:56:32,320 --> 01:56:33,840
something like that and hence having

2916
01:56:33,840 --> 01:56:36,800
some we need to kind of uh look it in

2917
01:56:36,800 --> 01:56:38,639
the picture of the signaling and the

2918
01:56:38,639 --> 01:56:40,800
media to make a decision just looking at

2919
01:56:40,800 --> 01:56:45,360
rtp there would kind of leave a bigger

2920
01:56:45,440 --> 01:56:46,800
system set up that's happening here and

2921
01:56:46,800 --> 01:56:50,400
we need to consider that as well

2922
01:56:55,520 --> 01:56:57,840
um

2923
01:57:02,800 --> 01:57:05,440
yeah i think um conceptually i agree

2924
01:57:05,440 --> 01:57:07,199
with uh jonathan that the first thing i

2925
01:57:07,199 --> 01:57:09,520
thought conceptually was also

2926
01:57:09,520 --> 01:57:12,239
profile level things like that savp or

2927
01:57:12,239 --> 01:57:13,520
something like that

2928
01:57:13,520 --> 01:57:15,920
i was an original i made

2929
01:57:15,920 --> 01:57:16,719
the

2930
01:57:16,719 --> 01:57:20,000
the right precedent model to use however

2931
01:57:20,000 --> 01:57:20,800
uh

2932
01:57:20,800 --> 01:57:22,320
not an originalist and i don't believe

2933
01:57:22,320 --> 01:57:23,199
that

2934
01:57:23,199 --> 01:57:25,760
it decided uh long ago should impact

2935
01:57:25,760 --> 01:57:28,480
everything today and i think i would

2936
01:57:28,480 --> 01:57:30,719
argue that savp has caused a lot more

2937
01:57:30,719 --> 01:57:31,840
damage than

2938
01:57:31,840 --> 01:57:34,000
uh than good um

2939
01:57:34,000 --> 01:57:35,840
and there's been a lot of problems with

2940
01:57:35,840 --> 01:57:36,960
things like

2941
01:57:36,960 --> 01:57:38,719
stuff for security

2942
01:57:38,719 --> 01:57:40,960
i would i would caution against trying

2943
01:57:40,960 --> 01:57:42,320
to do

2944
01:57:42,320 --> 01:57:44,639
what logically makes sense

2945
01:57:44,639 --> 01:57:48,000
is to make a new profile out of this um

2946
01:57:48,000 --> 01:57:49,840
but i think that's

2947
01:57:49,840 --> 01:57:51,920
that's probably a mistake that rehashes

2948
01:57:51,920 --> 01:57:53,679
a lot of the mistakes that those older

2949
01:57:53,679 --> 01:57:55,119
profiles cause

2950
01:57:55,119 --> 01:57:56,639
what makes more logical sense to me is

2951
01:57:56,639 --> 01:57:58,639
this is just an encapsulation like

2952
01:57:58,639 --> 01:58:00,560
like red or effect or anything else it's

2953
01:58:00,560 --> 01:58:02,719
an encapsulation of

2954
01:58:02,719 --> 01:58:04,480
of some other payload so i think it

2955
01:58:04,480 --> 01:58:06,239
makes more logical sense to declare all

2956
01:58:06,239 --> 01:58:08,960
the real payloads and then also declare

2957
01:58:08,960 --> 01:58:11,679
the encapsulated uh types

2958
01:58:11,679 --> 01:58:12,800
and then what you actually send on the

2959
01:58:12,800 --> 01:58:14,639
wire is the encapsulated type so it

2960
01:58:14,639 --> 01:58:16,880
would be a different payload type number

2961
01:58:16,880 --> 01:58:19,040
um and it would just be an encapsulation

2962
01:58:19,040 --> 01:58:20,880
of some other payload type that is also

2963
01:58:20,880 --> 01:58:23,360
in the stp but won't appear on the wire

2964
01:58:23,360 --> 01:58:25,119
because you're not actually sending that

2965
01:58:25,119 --> 01:58:27,040
format on the wire

2966
01:58:27,040 --> 01:58:28,480
that's what i think makes more logical

2967
01:58:28,480 --> 01:58:31,480
sense

2968
01:58:37,280 --> 01:58:40,000
um yeah i think i agree with what i just

2969
01:58:40,000 --> 01:58:42,320
said that this to me does not make sense

2970
01:58:42,320 --> 01:58:45,599
as a profile um i think it's entirely

2971
01:58:45,599 --> 01:58:47,440
the wrong level of modifications to be

2972
01:58:47,440 --> 01:58:50,239
represented as a profile

2973
01:58:50,239 --> 01:58:52,480
it strikes me as a wrapper format much

2974
01:58:52,480 --> 01:58:54,800
more like um

2975
01:58:54,800 --> 01:58:57,599
you read or the retransmission formats

2976
01:58:57,599 --> 01:58:59,360
also

2977
01:58:59,360 --> 01:59:01,520
and i think what what you are specifying

2978
01:59:01,520 --> 01:59:03,760
here is a wrapper format which says that

2979
01:59:03,760 --> 01:59:06,480
the content is for example vp8 but

2980
01:59:06,480 --> 01:59:08,480
encrypted

2981
01:59:08,480 --> 01:59:09,760
um

2982
01:59:09,760 --> 01:59:11,760
and so it's a it

2983
01:59:11,760 --> 01:59:14,400
so you know i don't think this is a a

2984
01:59:14,400 --> 01:59:16,560
codec agnostic payload format i think

2985
01:59:16,560 --> 01:59:18,639
this is a codec specific format which

2986
01:59:18,639 --> 01:59:19,679
wraps

2987
01:59:19,679 --> 01:59:21,199
you know something which which wraps a

2988
01:59:21,199 --> 01:59:22,960
particular set of content so what you're

2989
01:59:22,960 --> 01:59:24,960
signaling is is that it's this wrapper

2990
01:59:24,960 --> 01:59:27,760
format and what is being wrapped is this

2991
01:59:27,760 --> 01:59:30,560
you and you know the the the existing

2992
01:59:30,560 --> 01:59:33,040
payload format gets put into the wrapper

2993
01:59:33,040 --> 01:59:35,440
perhaps with an additional header uh had

2994
01:59:35,440 --> 01:59:36,880
it before the front of it and it's

2995
01:59:36,880 --> 01:59:39,840
signaled as a payload type um

2996
01:59:39,840 --> 01:59:44,360
wrapping some existing payload type

2997
01:59:52,960 --> 01:59:54,480
so i just one response i mean i think

2998
01:59:54,480 --> 01:59:55,280
that's

2999
01:59:55,280 --> 01:59:57,280
probably a fine solution i think

3000
01:59:57,280 --> 01:59:58,800
the sdp part is going to have to be a

3001
01:59:58,800 --> 02:00:00,400
little tricky because

3002
02:00:00,400 --> 02:00:01,760
if you want to say i'm willing to

3003
02:00:01,760 --> 02:00:04,560
receive rap vp8 i do not want to receive

3004
02:00:04,560 --> 02:00:06,480
unwrapped vp8 but i think that might be

3005
02:00:06,480 --> 02:00:09,199
more music consideration than a

3006
02:00:09,199 --> 02:00:13,119
avt core consideration per se

3007
02:00:13,119 --> 02:00:15,280
yeah i think it's uh it's a good issue

3008
02:00:15,280 --> 02:00:19,199
to tackle as well and to keep track of

3009
02:00:19,199 --> 02:00:21,119
yeah i mean i i agree there's probably

3010
02:00:21,119 --> 02:00:23,040
some signaling issues i suspect they're

3011
02:00:23,040 --> 02:00:24,800
not that different to the ones we use

3012
02:00:24,800 --> 02:00:26,880
for some of the retransmission or

3013
02:00:26,880 --> 02:00:28,719
redundancy format

3014
02:00:28,719 --> 02:00:30,960
i guess we'll need to work that through

3015
02:00:30,960 --> 02:00:33,199
okay

3016
02:00:35,520 --> 02:00:38,320
okay uh we don't have a lot of time but

3017
02:00:38,320 --> 02:00:40,800
maybe this is my yeah we could say it's

3018
02:00:40,800 --> 02:00:44,560
my last slide no go above

3019
02:00:44,560 --> 02:00:47,760
and previous slide

3020
02:00:49,520 --> 02:00:51,679
yeah so

3021
02:00:51,679 --> 02:00:54,159
i think from what i hear is consensus is

3022
02:00:54,159 --> 02:00:56,000
that

3023
02:00:56,000 --> 02:00:58,239
we need an ability to identify whether

3024
02:00:58,239 --> 02:01:00,880
it's encrypted and transform and also be

3025
02:01:00,880 --> 02:01:02,880
an underlying

3026
02:01:02,880 --> 02:01:05,199
codec type

3027
02:01:05,199 --> 02:01:06,800
i'm

3028
02:01:06,800 --> 02:01:08,480
not sure about whether

3029
02:01:08,480 --> 02:01:09,840
it's good

3030
02:01:09,840 --> 02:01:12,560
with consensus on uh having a solution

3031
02:01:12,560 --> 02:01:14,159
that is independent of the exact

3032
02:01:14,159 --> 02:01:16,639
transformation format uh it seems to me

3033
02:01:16,639 --> 02:01:18,560
that it would be good to have

3034
02:01:18,560 --> 02:01:20,800
um because what we're seeing is being

3035
02:01:20,800 --> 02:01:23,679
deployed they are various s frame or

3036
02:01:23,679 --> 02:01:27,440
transform being used and so

3037
02:01:27,440 --> 02:01:28,960
um

3038
02:01:28,960 --> 02:01:31,440
the wrapper format will only be able to

3039
02:01:31,440 --> 02:01:32,880
will not

3040
02:01:32,880 --> 02:01:36,080
we don't want to have a reference for

3041
02:01:36,080 --> 02:01:36,960
each

3042
02:01:36,960 --> 02:01:40,719
and exact transformation

3043
02:01:41,520 --> 02:01:42,880
transform

3044
02:01:42,880 --> 02:01:45,760
and uh yes the scope

3045
02:01:45,760 --> 02:01:47,520
is directly

3046
02:01:47,520 --> 02:01:49,520
related to whatever skill your video

3047
02:01:49,520 --> 02:01:52,000
codex only so there's any known set of

3048
02:01:52,000 --> 02:01:54,639
codecs that we want to store and it's a

3049
02:01:54,639 --> 02:01:56,719
fully generic solution

3050
02:01:56,719 --> 02:01:58,320
in any way

3051
02:01:58,320 --> 02:02:00,320
the target is only working on your video

3052
02:02:00,320 --> 02:02:01,520
products

3053
02:02:01,520 --> 02:02:05,040
um just you're on

3054
02:02:05,760 --> 02:02:07,360
here going back to your you know the

3055
02:02:07,360 --> 02:02:09,199
first slide of

3056
02:02:09,199 --> 02:02:12,080
having different uh systems in uh

3057
02:02:12,080 --> 02:02:14,080
implementing s frame versus packet in

3058
02:02:14,080 --> 02:02:15,599
different uh

3059
02:02:15,599 --> 02:02:16,400
uh

3060
02:02:16,400 --> 02:02:17,840
different phase like google facetime

3061
02:02:17,840 --> 02:02:19,599
versus webex and those kind of things

3062
02:02:19,599 --> 02:02:22,080
i'm going back to if you go with an

3063
02:02:22,080 --> 02:02:23,520
alternative payload format or some kind

3064
02:02:23,520 --> 02:02:26,080
of wrapping payload format how how would

3065
02:02:26,080 --> 02:02:28,480
that uh level of

3066
02:02:28,480 --> 02:02:30,639
entropy will be achieved with a two

3067
02:02:30,639 --> 02:02:32,400
different implementation of the

3068
02:02:32,400 --> 02:02:34,639
s frame or what is the packet

3069
02:02:34,639 --> 02:02:36,480
so are we are we

3070
02:02:36,480 --> 02:02:38,320
kind of saying that we have to do one

3071
02:02:38,320 --> 02:02:40,960
versus the other or or are we saying we

3072
02:02:40,960 --> 02:02:42,960
we don't talk about that and somehow the

3073
02:02:42,960 --> 02:02:47,080
implementations need to figure it out

3074
02:03:00,159 --> 02:03:01,119
um

3075
02:03:01,119 --> 02:03:02,800
it's open question i don't think that

3076
02:03:02,800 --> 02:03:06,639
there's consensus on uh or

3077
02:03:06,639 --> 02:03:09,280
on anything there yet

3078
02:03:09,280 --> 02:03:10,639
um

3079
02:03:10,639 --> 02:03:12,960
what is known now is that

3080
02:03:12,960 --> 02:03:15,599
it's either a packet law or a freight

3081
02:03:15,599 --> 02:03:18,080
level yeah we're not interested in

3082
02:03:18,080 --> 02:03:18,960
cases

3083
02:03:18,960 --> 02:03:20,639
but more than that uh since there are

3084
02:03:20,639 --> 02:03:22,080
experimentation

3085
02:03:22,080 --> 02:03:23,679
implementations sorting the cat and

3086
02:03:23,679 --> 02:03:26,320
implementation support frame level so

3087
02:03:26,320 --> 02:03:29,840
just maybe we'll

3088
02:03:30,239 --> 02:03:32,000
we'll see from there or maybe we can

3089
02:03:32,000 --> 02:03:36,920
some consensus i'm picking just one

3090
02:03:54,960 --> 02:03:56,880
in the chat about we want to apply s

3091
02:03:56,880 --> 02:04:00,239
frame packetization vp8 packetization

3092
02:04:00,239 --> 02:04:02,800
uh and this this perhaps comes to the

3093
02:04:02,800 --> 02:04:05,520
heart of what's what's the issue yeah

3094
02:04:05,520 --> 02:04:08,079
um i i was my understanding was that

3095
02:04:08,079 --> 02:04:10,960
what you wanted to do was take um

3096
02:04:10,960 --> 02:04:13,679
vpa content you know in the same way

3097
02:04:13,679 --> 02:04:15,280
it's usually packetized encrypt it and

3098
02:04:15,280 --> 02:04:18,079
then put it into a new payload format

3099
02:04:18,079 --> 02:04:20,159
um which seems to be the model i was

3100
02:04:20,159 --> 02:04:21,599
talking about and i thought mo was

3101
02:04:21,599 --> 02:04:22,800
talking about

3102
02:04:22,800 --> 02:04:24,400
justin's talking about doing something

3103
02:04:24,400 --> 02:04:26,800
different then perhaps we need to have a

3104
02:04:26,800 --> 02:04:28,000
conversation to make sure we're all

3105
02:04:28,000 --> 02:04:29,599
understanding that the same thing about

3106
02:04:29,599 --> 02:04:33,719
what's meant here

3107
02:04:38,400 --> 02:04:42,079
you know it would seem like a package

3108
02:04:42,079 --> 02:04:43,840
the things you would put

3109
02:04:43,840 --> 02:04:45,760
you know packetize it for vp8 as if

3110
02:04:45,760 --> 02:04:47,440
you're going to put it in the packet

3111
02:04:47,440 --> 02:04:50,560
encrypt it and then put it in the packet

3112
02:04:50,560 --> 02:04:53,520
possess frame vp8 inside but if that's

3113
02:04:53,520 --> 02:04:54,960
not what's being proposed then i think

3114
02:04:54,960 --> 02:04:58,480
we've got a bigger discussion to have

3115
02:05:03,920 --> 02:05:05,440
yeah i'm

3116
02:05:05,440 --> 02:05:07,840
sorry we this discussion that'll cut a

3117
02:05:07,840 --> 02:05:08,960
little short by other things running

3118
02:05:08,960 --> 02:05:10,400
over time

3119
02:05:10,400 --> 02:05:12,560
i feel like this needs more discussion

3120
02:05:12,560 --> 02:05:12,980
um

3121
02:05:12,980 --> 02:05:14,560
[Music]

3122
02:05:14,560 --> 02:05:16,320
uh we should try to figure out what's

3123
02:05:16,320 --> 02:05:18,480
the best place to have this discussion

3124
02:05:18,480 --> 02:05:20,079
uh would people we tried to do an

3125
02:05:20,079 --> 02:05:21,360
interim on this before or didn't really

3126
02:05:21,360 --> 02:05:23,599
have the right take up but

3127
02:05:23,599 --> 02:05:25,199
if we can get the right people in a room

3128
02:05:25,199 --> 02:05:26,800
an interim or

3129
02:05:26,800 --> 02:05:28,239
perhaps a more informal side meeting

3130
02:05:28,239 --> 02:05:30,400
might be helpful just so we can sort of

3131
02:05:30,400 --> 02:05:32,960
get convergence on make sure everybody's

3132
02:05:32,960 --> 02:05:33,840
talking about the same things

3133
02:05:33,840 --> 02:05:36,719
architecturally

3134
02:05:37,360 --> 02:05:39,440
is there any interest in that

3135
02:05:39,440 --> 02:05:42,159
quickly hopefully

3136
02:05:45,840 --> 02:05:48,560
justin says yes

3137
02:05:48,560 --> 02:05:50,880
colin says yes

3138
02:05:50,880 --> 02:05:53,119
uh

3139
02:05:54,000 --> 02:05:56,000
okay we'll try to sus says yes okay

3140
02:05:56,000 --> 02:05:57,520
we'll try to have some put up not

3141
02:05:57,520 --> 02:05:59,360
something on the list for that

3142
02:05:59,360 --> 02:06:00,840
uh so

3143
02:06:00,840 --> 02:06:05,440
um all right that seems reasonable

3144
02:06:05,440 --> 02:06:08,000
um

3145
02:06:08,079 --> 02:06:09,760
good

3146
02:06:09,760 --> 02:06:11,360
i think we've reached the end of the

3147
02:06:11,360 --> 02:06:13,119
meeting and we want to thank you for

3148
02:06:13,119 --> 02:06:14,639
coming okay the only other thing i

3149
02:06:14,639 --> 02:06:16,639
wanted to raise is that spencer

3150
02:06:16,639 --> 02:06:19,280
um mentioned earlier on the rtp over

3151
02:06:19,280 --> 02:06:20,719
quick discussions

3152
02:06:20,719 --> 02:06:22,480
we think uh probably having specifically

3153
02:06:22,480 --> 02:06:24,719
rtp over quick discussions on the aut

3154
02:06:24,719 --> 02:06:25,599
list

3155
02:06:25,599 --> 02:06:27,360
would be best whereas more general media

3156
02:06:27,360 --> 02:06:29,119
over click on the macquest

3157
02:06:29,119 --> 02:06:30,960
uh so just to keep things somewhat

3158
02:06:30,960 --> 02:06:32,239
separable

3159
02:06:32,239 --> 02:06:33,440
except someone's separate there that's

3160
02:06:33,440 --> 02:06:36,879
probably the best organization for that

3161
02:06:40,000 --> 02:06:41,760
and with that thank you all for coming

3162
02:06:41,760 --> 02:06:43,360
and uh

3163
02:06:43,360 --> 02:06:46,000
we'll see you at uh

3164
02:06:46,000 --> 02:06:48,079
uh other sessions here or next time

3165
02:06:48,079 --> 02:06:50,880
possibly in person

3166
02:06:51,920 --> 02:06:53,119
and we'll

3167
02:06:53,119 --> 02:06:56,159
uh arrange for interim on the uh s3

3168
02:06:56,159 --> 02:06:57,679
measures i believe we can get some

3169
02:06:57,679 --> 02:06:59,440
convergence on that

3170
02:06:59,440 --> 02:07:02,480
we'll just go side on the left

3171
02:07:04,400 --> 02:07:07,719
thank you everybody

3172
02:07:16,800 --> 02:07:19,800
uh

