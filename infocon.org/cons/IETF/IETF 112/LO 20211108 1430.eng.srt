1
00:00:14,960 --> 00:00:18,160
okay so it seems like it's the time to

2
00:00:18,160 --> 00:00:19,760
start the meeting

3
00:00:19,760 --> 00:00:23,119
so hello everyone welcome to the meeting

4
00:00:23,119 --> 00:00:25,279
of the sixth law working group

5
00:00:25,279 --> 00:00:27,840
my name is carlos gomez the other chair

6
00:00:27,840 --> 00:00:30,480
is shreta bhandari and our responsible

7
00:00:30,480 --> 00:00:32,800
lady is eric klein

8
00:00:32,800 --> 00:00:34,399
we are all here

9
00:00:34,399 --> 00:00:35,440
and

10
00:00:35,440 --> 00:00:37,280
for me to taking

11
00:00:37,280 --> 00:00:39,760
we have dominique who has kindly

12
00:00:39,760 --> 00:00:41,200
volunteered

13
00:00:41,200 --> 00:00:44,160
and thanks a lot dominique once again

14
00:00:44,160 --> 00:00:45,680
and nevertheless

15
00:00:45,680 --> 00:00:47,840
we encourage everyone to join the

16
00:00:47,840 --> 00:00:50,960
collaborative process of taking minutes

17
00:00:50,960 --> 00:00:54,079
so don't hesitate to join the link that

18
00:00:54,079 --> 00:00:57,600
you can find at the end of the slide

19
00:00:57,600 --> 00:01:00,239
next please

20
00:01:02,160 --> 00:01:03,920
so this is the notewell

21
00:01:03,920 --> 00:01:05,920
this is a reminder that if you are

22
00:01:05,920 --> 00:01:07,840
participating in the itf then you agree

23
00:01:07,840 --> 00:01:11,040
to follow the itf processes and policies

24
00:01:11,040 --> 00:01:12,799
the noteworld contains a number of

25
00:01:12,799 --> 00:01:15,680
pointers to documents on several of

26
00:01:15,680 --> 00:01:17,680
these policies so please make sure that

27
00:01:17,680 --> 00:01:19,680
you have read it

28
00:01:19,680 --> 00:01:22,320
next please

29
00:01:22,880 --> 00:01:25,600
so this would be the agenda for today

30
00:01:25,600 --> 00:01:27,920
the first presentation is the usual

31
00:01:27,920 --> 00:01:29,759
chairs introduction that's currently in

32
00:01:29,759 --> 00:01:31,280
progress

33
00:01:31,280 --> 00:01:32,960
this will be followed by the

34
00:01:32,960 --> 00:01:35,680
presentations given by pascal

35
00:01:35,680 --> 00:01:38,079
entitled nd multi multicast address

36
00:01:38,079 --> 00:01:40,400
listener registration and and the

37
00:01:40,400 --> 00:01:42,720
unicast lookup

38
00:01:42,720 --> 00:01:44,720
this will be followed by a presentation

39
00:01:44,720 --> 00:01:46,720
on the updated version of the draft and

40
00:01:46,720 --> 00:01:48,640
title transmission of sheet contrast

41
00:01:48,640 --> 00:01:51,520
packets over 15.4 networks

42
00:01:51,520 --> 00:01:53,280
after that there will be a presentation

43
00:01:53,280 --> 00:01:56,079
by rigi yannoni entitled native short

44
00:01:56,079 --> 00:01:58,479
addressing for lln expansion

45
00:01:58,479 --> 00:02:00,479
and the last presentation will be given

46
00:02:00,479 --> 00:02:02,000
by how you song

47
00:02:02,000 --> 00:02:04,399
entitled short hierarchical ip addresses

48
00:02:04,399 --> 00:02:06,479
attached networks

49
00:02:06,479 --> 00:02:08,560
so as you can see this is a packed

50
00:02:08,560 --> 00:02:10,639
agenda so we hope

51
00:02:10,639 --> 00:02:12,560
the presenters can

52
00:02:12,560 --> 00:02:14,879
stick to the allocated time

53
00:02:14,879 --> 00:02:18,400
and uh also as in the last atf we going

54
00:02:18,400 --> 00:02:20,239
to dedicate most of the session to

55
00:02:20,239 --> 00:02:23,440
presenting and discussing new materials

56
00:02:23,440 --> 00:02:27,680
so is there any comment on the agenda

57
00:02:34,640 --> 00:02:37,519
okay so if there are no comments then

58
00:02:37,519 --> 00:02:38,640
let's

59
00:02:38,640 --> 00:02:41,120
proceed to the next slide

60
00:02:41,120 --> 00:02:43,920
so regarding the working group documents

61
00:02:43,920 --> 00:02:44,959
status

62
00:02:44,959 --> 00:02:47,360
we have one document in the rfc editor

63
00:02:47,360 --> 00:02:49,360
queue that's the ipv6 measure with

64
00:02:49,360 --> 00:02:51,120
ble-links

65
00:02:51,120 --> 00:02:52,959
then we have two documents that have

66
00:02:52,959 --> 00:02:55,599
been evaluated by the isd

67
00:02:55,599 --> 00:02:59,200
the first is ipv6 over nfc

68
00:02:59,200 --> 00:03:02,560
and this document was elevated

69
00:03:02,560 --> 00:03:03,760
the first time

70
00:03:03,760 --> 00:03:06,000
by the asg a couple of years ago then it

71
00:03:06,000 --> 00:03:06,800
was

72
00:03:06,800 --> 00:03:09,519
updated uh after some time

73
00:03:09,519 --> 00:03:11,200
and in the last eight years there was

74
00:03:11,200 --> 00:03:12,239
some

75
00:03:12,239 --> 00:03:14,239
some conversation

76
00:03:14,239 --> 00:03:15,760
about whether

77
00:03:15,760 --> 00:03:18,239
the nfc specification would be available

78
00:03:18,239 --> 00:03:21,040
to all the intended participants so i

79
00:03:21,040 --> 00:03:24,080
don't know if perhaps eric klein or adi

80
00:03:24,080 --> 00:03:26,319
would it be possible for you to give

81
00:03:26,319 --> 00:03:28,879
some update or some suggestion about the

82
00:03:28,879 --> 00:03:32,760
next steps for this document

83
00:03:33,440 --> 00:03:36,959
uh yeah i received um the nfc

84
00:03:36,959 --> 00:03:40,640
uh specification i think uh

85
00:03:40,640 --> 00:03:42,480
i haven't had a chance to go through it

86
00:03:42,480 --> 00:03:43,840
i went through some stuff that was

87
00:03:43,840 --> 00:03:45,519
publicly available but i think the

88
00:03:45,519 --> 00:03:47,200
broader concern that

89
00:03:47,200 --> 00:03:48,799
the isg chair

90
00:03:48,799 --> 00:03:52,239
had was basically how do we

91
00:03:52,239 --> 00:03:54,480
communicate that

92
00:03:54,480 --> 00:03:56,560
uh everybody who needed to read the

93
00:03:56,560 --> 00:03:58,159
details of the spec was able to read the

94
00:03:58,159 --> 00:03:59,519
details of the spec

95
00:03:59,519 --> 00:04:01,360
when the working group was was uh

96
00:04:01,360 --> 00:04:03,120
drafting the

97
00:04:03,120 --> 00:04:06,480
document uh or what it was in last call

98
00:04:06,480 --> 00:04:07,360
um

99
00:04:07,360 --> 00:04:10,799
i it might suffice to just

100
00:04:11,200 --> 00:04:13,599
have a reference to bcp 97 or best or

101
00:04:13,599 --> 00:04:16,319
something in in

102
00:04:16,639 --> 00:04:18,639
the shepherd write-up

103
00:04:18,639 --> 00:04:20,238
or

104
00:04:20,238 --> 00:04:21,839
i don't uh

105
00:04:21,839 --> 00:04:23,840
i don't know i need it's on me to uh to

106
00:04:23,840 --> 00:04:27,119
close on that issue with lars

107
00:04:27,199 --> 00:04:29,520
so okay

108
00:04:29,520 --> 00:04:32,160
okay thank you

109
00:04:32,160 --> 00:04:33,120
then

110
00:04:33,120 --> 00:04:35,520
the next document that has been emulated

111
00:04:35,520 --> 00:04:37,520
by the isd more recently

112
00:04:37,520 --> 00:04:40,080
is ibvc adobe plc

113
00:04:40,080 --> 00:04:42,000
so there are at the moment three

114
00:04:42,000 --> 00:04:43,840
outstanding discuss ballots and there

115
00:04:43,840 --> 00:04:45,600
were several comments

116
00:04:45,600 --> 00:04:48,720
the authors have a plan to submit the

117
00:04:48,720 --> 00:04:50,320
revised version

118
00:04:50,320 --> 00:04:52,800
of the draft in roughly two weeks and at

119
00:04:52,800 --> 00:04:55,120
the moment have already replied to most

120
00:04:55,120 --> 00:04:57,680
of the comments

121
00:04:57,680 --> 00:04:58,639
then

122
00:04:58,639 --> 00:05:01,120
the next document is six low use cases

123
00:05:01,120 --> 00:05:03,280
draft which passed the second working

124
00:05:03,280 --> 00:05:05,199
group last call so the next step will be

125
00:05:05,199 --> 00:05:07,199
getting the shepherd write up

126
00:05:07,199 --> 00:05:08,080
and

127
00:05:08,080 --> 00:05:09,840
finally we have a new working group

128
00:05:09,840 --> 00:05:10,880
document

129
00:05:10,880 --> 00:05:13,600
entitled ipv6 multicast address this is

130
00:05:13,600 --> 00:05:15,840
a registration which was adopted very

131
00:05:15,840 --> 00:05:16,960
recently

132
00:05:16,960 --> 00:05:20,880
and which uh had pretty good support

133
00:05:20,880 --> 00:05:23,039
and by the way this will be presented

134
00:05:23,039 --> 00:05:24,560
later today

135
00:05:24,560 --> 00:05:26,320
so is there any other comment or

136
00:05:26,320 --> 00:05:28,639
question

137
00:05:33,919 --> 00:05:37,840
okay so if there is no comments then i

138
00:05:37,840 --> 00:05:39,680
guess we can proceed to the

139
00:05:39,680 --> 00:05:43,039
presentations by pascal

140
00:05:46,560 --> 00:05:49,199
do you wish to share yes that's nice

141
00:05:49,199 --> 00:05:50,479
um

142
00:05:50,479 --> 00:05:53,280
are you going to to move the slides or

143
00:05:53,280 --> 00:05:55,120
can i do it myself i don't know that i

144
00:05:55,120 --> 00:05:58,720
can do it but maybe i can

145
00:06:01,440 --> 00:06:02,960
you will be the one advancing the slides

146
00:06:02,960 --> 00:06:04,639
for me i i'll never get this right

147
00:06:04,639 --> 00:06:05,520
slides

148
00:06:05,520 --> 00:06:07,520
okay please

149
00:06:07,520 --> 00:06:11,759
okay so please let's let's start

150
00:06:11,759 --> 00:06:14,479
next slide please

151
00:06:16,560 --> 00:06:18,960
okay this is this is a generic intro for

152
00:06:18,960 --> 00:06:22,000
both documents that we'll present today

153
00:06:22,000 --> 00:06:24,639
so um as you know we now have a family

154
00:06:24,639 --> 00:06:27,840
of documents around six lopez nd

155
00:06:27,840 --> 00:06:30,880
and it's getting proposed and used in

156
00:06:30,880 --> 00:06:32,960
environments which are way beyond the

157
00:06:32,960 --> 00:06:35,120
iot right now

158
00:06:35,120 --> 00:06:37,919
initially the the focus was on wireless

159
00:06:37,919 --> 00:06:40,880
so it at some point we called it wind

160
00:06:40,880 --> 00:06:43,600
for wireless nd but now we are proposing

161
00:06:43,600 --> 00:06:45,919
it for rift we are proposing it for a

162
00:06:45,919 --> 00:06:47,120
vpn

163
00:06:47,120 --> 00:06:49,280
so it's it's way beyond wireless and

164
00:06:49,280 --> 00:06:51,199
wireless does not and wireless in the

165
00:06:51,199 --> 00:06:53,360
title does not really help understand

166
00:06:53,360 --> 00:06:56,000
what this is so um

167
00:06:56,000 --> 00:06:57,919
recently it's been proposed to to call

168
00:06:57,919 --> 00:07:00,560
this family of protocols ipv6 stateful

169
00:07:00,560 --> 00:07:02,880
address the configuration as opposed to

170
00:07:02,880 --> 00:07:06,000
ipv6 stateless address the configuration

171
00:07:06,000 --> 00:07:08,000
that that we know very well

172
00:07:08,000 --> 00:07:11,280
so the family starts with 6775

173
00:07:11,280 --> 00:07:14,639
which was extended updated by 8545 more

174
00:07:14,639 --> 00:07:16,800
recently we published uh address

175
00:07:16,800 --> 00:07:18,800
protection for it meaning that the

176
00:07:18,800 --> 00:07:21,039
address that is advertised by 855 can

177
00:07:21,039 --> 00:07:22,000
now be

178
00:07:22,000 --> 00:07:24,639
protect against address theft

179
00:07:24,639 --> 00:07:26,960
and impersonation attacks

180
00:07:26,960 --> 00:07:28,080
and

181
00:07:28,080 --> 00:07:30,080
we have eight nine to nine which

182
00:07:30,080 --> 00:07:31,280
basically

183
00:07:31,280 --> 00:07:32,319
um

184
00:07:32,319 --> 00:07:34,479
specifies how to proxy neighbor

185
00:07:34,479 --> 00:07:37,520
discovery when you have a network where

186
00:07:37,520 --> 00:07:39,840
you have legacy and d a and eight five

187
00:07:39,840 --> 00:07:41,840
four five which coexist

188
00:07:41,840 --> 00:07:43,120
and the most

189
00:07:43,120 --> 00:07:45,520
classical example being uh

190
00:07:45,520 --> 00:07:47,280
eight five four five on the wireless and

191
00:07:47,280 --> 00:07:49,599
eight nine to nine on the wire but it

192
00:07:49,599 --> 00:07:51,840
can be any other

193
00:07:51,840 --> 00:07:53,759
composition of network

194
00:07:53,759 --> 00:07:55,039
and now we have we have two new

195
00:07:55,039 --> 00:07:56,800
documents which are being proposed to

196
00:07:56,800 --> 00:07:58,400
this group one is still personal

197
00:07:58,400 --> 00:08:00,720
submission i will discuss it next

198
00:08:00,720 --> 00:08:03,120
and the one that we are talking about

199
00:08:03,120 --> 00:08:05,840
now is is the multicast registration so

200
00:08:05,840 --> 00:08:07,360
as you know um

201
00:08:07,360 --> 00:08:13,039
h505 was about unicast ipv6 addresses

202
00:08:13,039 --> 00:08:15,120
and so you could not register uh

203
00:08:15,120 --> 00:08:17,680
multicast and if you did register any

204
00:08:17,680 --> 00:08:20,160
cash there was no signaling to say hey

205
00:08:20,160 --> 00:08:22,639
uh i may i might not be the only one who

206
00:08:22,639 --> 00:08:25,199
wants this address and this could create

207
00:08:25,199 --> 00:08:28,080
confusion in the routing and

208
00:08:28,080 --> 00:08:30,960
only one node could possibly

209
00:08:30,960 --> 00:08:31,919
win

210
00:08:31,919 --> 00:08:32,958
and

211
00:08:32,958 --> 00:08:35,279
that prevents the use of any cast

212
00:08:35,279 --> 00:08:37,679
followed balancing purpose for instance

213
00:08:37,679 --> 00:08:40,000
so we have this new draft next slide

214
00:08:40,000 --> 00:08:42,240
please

215
00:08:42,719 --> 00:08:44,880
which is the draft atf6 load multicast

216
00:08:44,880 --> 00:08:48,480
registration where we enable 855

217
00:08:48,480 --> 00:08:51,440
for not only unicast ipv6 addresses but

218
00:08:51,440 --> 00:08:52,240
now

219
00:08:52,240 --> 00:08:55,279
anycast and multicast addresses as well

220
00:08:55,279 --> 00:08:57,040
and if you consider the position of an

221
00:08:57,040 --> 00:09:01,440
iot device uh in an lln device a 6lb

222
00:09:01,440 --> 00:09:04,000
being able to register the that is a

223
00:09:04,000 --> 00:09:06,560
listener for a multicast address saves

224
00:09:06,560 --> 00:09:09,120
the need to implement mld

225
00:09:09,120 --> 00:09:12,000
and as you know mld is expensive in

226
00:09:12,000 --> 00:09:14,080
terms of of energy and wireless

227
00:09:14,080 --> 00:09:16,640
resources because it's it's based on

228
00:09:16,640 --> 00:09:19,440
broadcast but the same reason why we we

229
00:09:19,440 --> 00:09:21,519
designed the syslop and nd in the first

230
00:09:21,519 --> 00:09:23,519
place to avoid broadcast

231
00:09:23,519 --> 00:09:25,680
is also the reason why we want to avoid

232
00:09:25,680 --> 00:09:29,839
mrd and and use x8545

233
00:09:29,839 --> 00:09:32,880
for multicast and anycast as well

234
00:09:32,880 --> 00:09:36,560
the benefit is that the 6lm goes mostly

235
00:09:36,560 --> 00:09:39,279
unmodified i mean all it needs to know

236
00:09:39,279 --> 00:09:42,000
is yes i will accept packets

237
00:09:42,000 --> 00:09:43,839
for those anycast and multicast

238
00:09:43,839 --> 00:09:46,320
addresses as i would accept packets for

239
00:09:46,320 --> 00:09:48,240
my anycast addresses

240
00:09:48,240 --> 00:09:50,640
and i won't use them as source

241
00:09:50,640 --> 00:09:52,720
that's pretty much you know all it needs

242
00:09:52,720 --> 00:09:53,839
to know

243
00:09:53,839 --> 00:09:55,920
and um

244
00:09:55,920 --> 00:09:57,839
we we validate that it knows that

245
00:09:57,839 --> 00:09:59,920
because when it registers a multicast on

246
00:09:59,920 --> 00:10:02,079
any cast address now there's a new flag

247
00:10:02,079 --> 00:10:05,519
associated in the ero and

248
00:10:05,519 --> 00:10:08,240
actually in the idaho message as well to

249
00:10:08,240 --> 00:10:11,279
to to signal the addresses uh unique

250
00:10:11,279 --> 00:10:14,480
unicast any cast or multicast

251
00:10:14,480 --> 00:10:16,880
um there's more work on the 6lr side

252
00:10:16,880 --> 00:10:18,959
because now it will accept more than one

253
00:10:18,959 --> 00:10:21,040
registration for the same address

254
00:10:21,040 --> 00:10:22,959
and so for any cast and multicast

255
00:10:22,959 --> 00:10:24,880
address the

256
00:10:24,880 --> 00:10:28,240
index for the registration becomes

257
00:10:28,240 --> 00:10:30,240
the combination of of the address as

258
00:10:30,240 --> 00:10:32,959
before and the rover field

259
00:10:32,959 --> 00:10:34,720
which is the

260
00:10:34,720 --> 00:10:36,640
basically the the information which is

261
00:10:36,640 --> 00:10:39,440
used to uniquely identify and validate

262
00:10:39,440 --> 00:10:43,040
the ownership of the address

263
00:10:43,760 --> 00:10:45,600
you'll find when you read the draft if

264
00:10:45,600 --> 00:10:49,200
you have not done so yet that we also

265
00:10:49,200 --> 00:10:50,240
um

266
00:10:50,240 --> 00:10:52,720
do some ripple related work in this

267
00:10:52,720 --> 00:10:55,120
specification we did not want to do

268
00:10:55,120 --> 00:10:58,839
uh like eight five four five and a

269
00:10:58,839 --> 00:11:00,399
1910

270
00:11:00,399 --> 00:11:02,240
uh two separate documents because that

271
00:11:02,240 --> 00:11:04,000
would take too much effort to just make

272
00:11:04,000 --> 00:11:06,079
sure they are synchronized

273
00:11:06,079 --> 00:11:09,200
and you know in terms of content and uh

274
00:11:09,200 --> 00:11:12,079
take them separately through

275
00:11:12,079 --> 00:11:14,079
all the asg process so we kind of

276
00:11:14,079 --> 00:11:15,680
decided to make a

277
00:11:15,680 --> 00:11:18,399
a unique consistent operation between

278
00:11:18,399 --> 00:11:22,079
what six lapel does on on the 6ln to 6lr

279
00:11:22,079 --> 00:11:24,399
hub and what triple will do on the rest

280
00:11:24,399 --> 00:11:26,240
of the network so we also specify the

281
00:11:26,240 --> 00:11:27,519
ripple piece

282
00:11:27,519 --> 00:11:31,040
and for that we extend rfc 6550

283
00:11:31,040 --> 00:11:32,959
in particular with a new map mode of

284
00:11:32,959 --> 00:11:35,680
operations for for those familiar with

285
00:11:35,680 --> 00:11:38,079
ripple a ripple has number of modes of

286
00:11:38,079 --> 00:11:39,440
operation

287
00:11:39,440 --> 00:11:41,839
one of them is just a tree where you can

288
00:11:41,839 --> 00:11:44,640
report data but not get data back

289
00:11:44,640 --> 00:11:47,120
the collection tree that then you have a

290
00:11:47,120 --> 00:11:50,000
non-storing mode which in case of iot is

291
00:11:50,000 --> 00:11:51,440
the more most

292
00:11:51,440 --> 00:11:52,720
currently

293
00:11:52,720 --> 00:11:55,760
uh deployed and whereby the route the

294
00:11:55,760 --> 00:11:58,399
source routing uh down the geodac to the

295
00:11:58,399 --> 00:12:00,480
devices we have a storing mode the

296
00:12:00,480 --> 00:12:02,240
storing mode with multicast and more

297
00:12:02,240 --> 00:12:05,760
recently we have um introduced

298
00:12:05,760 --> 00:12:07,120
aodv

299
00:12:07,120 --> 00:12:10,399
so which could be

300
00:12:12,000 --> 00:12:13,279
actually i'm sorry

301
00:12:13,279 --> 00:12:14,880
uh mob five

302
00:12:14,880 --> 00:12:17,360
oh well not for our map five we hope is

303
00:12:17,360 --> 00:12:19,839
mark four because mob4 was just uh an

304
00:12:19,839 --> 00:12:22,399
experimental rfc so far and if that's

305
00:12:22,399 --> 00:12:24,399
more for that means that we frame up

306
00:12:24,399 --> 00:12:25,200
five

307
00:12:25,200 --> 00:12:28,000
for for uh the new non-storing multicast

308
00:12:28,000 --> 00:12:29,360
mode that this specification is

309
00:12:29,360 --> 00:12:31,120
introducing

310
00:12:31,120 --> 00:12:32,800
and for any cast there was strictly

311
00:12:32,800 --> 00:12:35,440
nothing all we set for any cast is if

312
00:12:35,440 --> 00:12:36,800
you inject the same addresses at

313
00:12:36,800 --> 00:12:38,560
multiple places network you should use

314
00:12:38,560 --> 00:12:40,320
the same sequence counter

315
00:12:40,320 --> 00:12:42,959
now we are giving explicit information

316
00:12:42,959 --> 00:12:44,880
about how you do any cast in the

317
00:12:44,880 --> 00:12:46,240
existing maps

318
00:12:46,240 --> 00:12:47,200
and

319
00:12:47,200 --> 00:12:48,560
including the new map that we are

320
00:12:48,560 --> 00:12:53,000
defining here next slide please

321
00:12:54,560 --> 00:12:56,959
so this this tells you a little bit more

322
00:12:56,959 --> 00:13:00,079
on the new ripple map we'll discuss more

323
00:13:00,079 --> 00:13:02,399
the the the ripple side at the roll

324
00:13:02,399 --> 00:13:03,920
meeting so if you're interested in this

325
00:13:03,920 --> 00:13:06,320
document and this multicast operation

326
00:13:06,320 --> 00:13:09,519
for lln uh i invite you to also attend

327
00:13:09,519 --> 00:13:11,360
the role discussion

328
00:13:11,360 --> 00:13:13,600
uh later on this week i think it's

329
00:13:13,600 --> 00:13:15,440
wednesday

330
00:13:15,440 --> 00:13:16,480
um

331
00:13:16,480 --> 00:13:19,040
so the six sellers as i said earlier

332
00:13:19,040 --> 00:13:21,040
they they have a little bit more to do

333
00:13:21,040 --> 00:13:22,720
first they need to accept more than one

334
00:13:22,720 --> 00:13:24,079
registration

335
00:13:24,079 --> 00:13:26,240
uh with different rovers and they they

336
00:13:26,240 --> 00:13:29,360
will not consider them as duplicate

337
00:13:29,360 --> 00:13:32,000
uh they have to pass the new flags

338
00:13:32,000 --> 00:13:33,680
saying unicast

339
00:13:33,680 --> 00:13:34,959
multicast

340
00:13:34,959 --> 00:13:37,279
versus anycast in in the

341
00:13:37,279 --> 00:13:40,720
arrow and turn that into dao

342
00:13:40,720 --> 00:13:42,720
in the the ripple target option now we

343
00:13:42,720 --> 00:13:45,680
have uh the same flags for any caster

344
00:13:45,680 --> 00:13:47,600
multicast which which has to have to be

345
00:13:47,600 --> 00:13:48,480
set

346
00:13:48,480 --> 00:13:51,199
and uh as the 6lr injects that into

347
00:13:51,199 --> 00:13:53,440
ripple

348
00:13:53,440 --> 00:13:56,560
uh in with the new uh

349
00:13:56,560 --> 00:13:59,680
mode of operation the dow from the 6lr

350
00:13:59,680 --> 00:14:02,320
flows all the way to the root just as if

351
00:14:02,320 --> 00:14:04,079
it was an external destination a ripple

352
00:14:04,079 --> 00:14:05,440
and a wildlife

353
00:14:05,440 --> 00:14:07,440
and so the multicast or any gas packet

354
00:14:07,440 --> 00:14:10,399
back can be tunneled to the 6lr

355
00:14:10,399 --> 00:14:12,399
uh with exactly the same tunnel as if it

356
00:14:12,399 --> 00:14:13,600
was a

357
00:14:13,600 --> 00:14:16,480
unicast packet to ripple a neural leaf

358
00:14:16,480 --> 00:14:18,079
the the six large encapsulates that

359
00:14:18,079 --> 00:14:20,959
packet and instead of a unicast ip

360
00:14:20,959 --> 00:14:22,880
packet it will find

361
00:14:22,880 --> 00:14:25,120
any cast on multicast then it will

362
00:14:25,120 --> 00:14:27,959
rot them appropriately to the

363
00:14:27,959 --> 00:14:31,040
600 um

364
00:14:31,040 --> 00:14:32,959
packets which are generated inside the

365
00:14:32,959 --> 00:14:35,839
deardag uh since the only route uh the

366
00:14:35,839 --> 00:14:37,120
the only route

367
00:14:37,120 --> 00:14:39,600
in the the diode is default towards the

368
00:14:39,600 --> 00:14:42,480
route they will just follow the path

369
00:14:42,480 --> 00:14:45,199
to the route and it's the root which

370
00:14:45,199 --> 00:14:47,120
will effectively uh

371
00:14:47,120 --> 00:14:49,120
find that it's multicast or any cast and

372
00:14:49,120 --> 00:14:52,639
and do the appropriate processing

373
00:14:52,720 --> 00:14:55,120
if it is multicast it will uh perform

374
00:14:55,120 --> 00:14:56,959
ingress replication meaning that it will

375
00:14:56,959 --> 00:14:58,480
make one copy

376
00:14:58,480 --> 00:15:02,399
per 6lr which has listener uh at least

377
00:15:02,399 --> 00:15:03,680
one listener

378
00:15:03,680 --> 00:15:05,519
for for that multicast so a number of

379
00:15:05,519 --> 00:15:09,519
the six lr's will will get a packet over

380
00:15:09,519 --> 00:15:10,959
their tunnel

381
00:15:10,959 --> 00:15:12,959
and encapsulate and forward to their six

382
00:15:12,959 --> 00:15:14,079
senates

383
00:15:14,079 --> 00:15:16,320
each 6lr registers only once i mean it

384
00:15:16,320 --> 00:15:18,959
just injects one in in ripple meaning

385
00:15:18,959 --> 00:15:20,399
that um

386
00:15:20,399 --> 00:15:22,000
the root will will have to distribute

387
00:15:22,000 --> 00:15:24,720
one packet per 6lr and it's the sixth

388
00:15:24,720 --> 00:15:27,440
error role to distribute multiple copies

389
00:15:27,440 --> 00:15:30,399
to the six elements

390
00:15:30,639 --> 00:15:32,639
um

391
00:15:32,639 --> 00:15:34,639
for any cast instead of passing the

392
00:15:34,639 --> 00:15:37,199
packet to all the six errors it will

393
00:15:37,199 --> 00:15:39,199
pass it to a select one and we don't

394
00:15:39,199 --> 00:15:40,560
effectively

395
00:15:40,560 --> 00:15:44,240
uh say in this specification which xlr i

396
00:15:44,240 --> 00:15:46,880
mean the policy in the root may depend

397
00:15:46,880 --> 00:15:49,040
on the number of things like load

398
00:15:49,040 --> 00:15:51,120
and this specification does not enter

399
00:15:51,120 --> 00:15:52,720
this configuration just says the root

400
00:15:52,720 --> 00:15:54,639
can select one and

401
00:15:54,639 --> 00:15:56,320
further specification or implementation

402
00:15:56,320 --> 00:15:58,800
will decide which one

403
00:15:58,800 --> 00:16:01,519
next slide please

404
00:16:03,199 --> 00:16:04,240
um

405
00:16:04,240 --> 00:16:06,880
so as i said the six error is is

406
00:16:06,880 --> 00:16:10,800
modified more than one uh 6ln will will

407
00:16:10,800 --> 00:16:12,480
register

408
00:16:12,480 --> 00:16:16,160
um actually the 6lbr is modified in the

409
00:16:16,160 --> 00:16:17,759
exact same fashion

410
00:16:17,759 --> 00:16:21,120
and as we extend the arrow to add the a

411
00:16:21,120 --> 00:16:23,600
for any cast and m for multicast flags

412
00:16:23,600 --> 00:16:27,199
we also uh change the idah message

413
00:16:27,199 --> 00:16:30,160
to to carry those flags and by the way

414
00:16:30,160 --> 00:16:33,199
uh we do that using the status

415
00:16:33,199 --> 00:16:34,880
field which is the only field that was

416
00:16:34,880 --> 00:16:36,480
still free

417
00:16:36,480 --> 00:16:38,399
in the other message and which was used

418
00:16:38,399 --> 00:16:40,560
for the edac the confirm but not for the

419
00:16:40,560 --> 00:16:43,279
idaho request so now for the ida request

420
00:16:43,279 --> 00:16:45,600
we set the flags in the same byte

421
00:16:45,600 --> 00:16:46,959
actually that will be used for the

422
00:16:46,959 --> 00:16:50,240
status on the way back

423
00:16:50,240 --> 00:16:53,519
uh so six eleven six lvr must retain all

424
00:16:53,519 --> 00:16:56,079
registrations and index them by top or

425
00:16:56,079 --> 00:16:58,000
register the trust rover

426
00:16:58,000 --> 00:17:00,320
um

427
00:17:00,320 --> 00:17:02,160
they as i said they will inject the

428
00:17:02,160 --> 00:17:05,039
addresses in repo that can be any of the

429
00:17:05,039 --> 00:17:07,439
existing modes including and and that

430
00:17:07,439 --> 00:17:10,880
can be the new mode if it was a mod 3

431
00:17:10,880 --> 00:17:14,079
which is storing mode with a

432
00:17:14,079 --> 00:17:17,679
multicast support we actually

433
00:17:17,679 --> 00:17:20,480
in indicate extend that mode to to say

434
00:17:20,480 --> 00:17:21,439
that

435
00:17:21,439 --> 00:17:23,439
um the flag uh

436
00:17:23,439 --> 00:17:24,959
must be set for multicast if it's

437
00:17:24,959 --> 00:17:27,839
multicast or any gas if it's any cast

438
00:17:27,839 --> 00:17:30,400
and for any case we we specifically

439
00:17:30,400 --> 00:17:32,480
indicate what the new behavior is which

440
00:17:32,480 --> 00:17:34,160
is you select one of those children and

441
00:17:34,160 --> 00:17:35,520
only one

442
00:17:35,520 --> 00:17:37,280
for multicast you basically make a copy

443
00:17:37,280 --> 00:17:38,400
per child

444
00:17:38,400 --> 00:17:41,120
in storing mode

445
00:17:42,160 --> 00:17:44,240
on the way back when the the packet is

446
00:17:44,240 --> 00:17:45,440
received

447
00:17:45,440 --> 00:17:47,520
from from the parent in storing mode and

448
00:17:47,520 --> 00:17:49,760
from the root in non-storing mode

449
00:17:49,760 --> 00:17:52,960
uh the 6r the capsulative tunnel

450
00:17:52,960 --> 00:17:54,960
looks at the packet and now it can be

451
00:17:54,960 --> 00:17:57,120
any cast on multicast so it will find

452
00:17:57,120 --> 00:17:59,440
possibly more than one registration

453
00:17:59,440 --> 00:18:01,679
if it's any cast it will select one

454
00:18:01,679 --> 00:18:03,360
again we don't say

455
00:18:03,360 --> 00:18:05,679
by which logic which policy

456
00:18:05,679 --> 00:18:08,320
and um the only thing is

457
00:18:08,320 --> 00:18:09,120
if

458
00:18:09,120 --> 00:18:10,960
the the back if it doesn't

459
00:18:10,960 --> 00:18:13,440
manage to send that packet to that

460
00:18:13,440 --> 00:18:15,600
selected 6ln he still has the

461
00:18:15,600 --> 00:18:18,640
opportunity to select another 6ln which

462
00:18:18,640 --> 00:18:21,039
listens to the same anycast address and

463
00:18:21,039 --> 00:18:23,679
after some retries uh retry to this

464
00:18:23,679 --> 00:18:25,360
other six element

465
00:18:25,360 --> 00:18:27,919
for multicast the goal is to deliver one

466
00:18:27,919 --> 00:18:29,679
copy to each child

467
00:18:29,679 --> 00:18:32,320
and in radio networks radio lens

468
00:18:32,320 --> 00:18:35,120
typically it's it is more reliable to

469
00:18:35,120 --> 00:18:37,600
do a unicast replication that means send

470
00:18:37,600 --> 00:18:40,880
a unicast layer 2 packet layer to frame

471
00:18:40,880 --> 00:18:43,840
containing the multicast packet to each

472
00:18:43,840 --> 00:18:46,400
of the six elements one by one

473
00:18:46,400 --> 00:18:49,120
next slide please

474
00:18:50,320 --> 00:18:52,080
so there's a lot of consideration about

475
00:18:52,080 --> 00:18:54,480
backward compatibility this document

476
00:18:54,480 --> 00:18:57,360
this specification was done uh by the

477
00:18:57,360 --> 00:19:00,640
explicit request of ysan which is

478
00:19:00,640 --> 00:19:04,400
uh one of the alliance which uh used six

479
00:19:04,400 --> 00:19:05,679
six law

480
00:19:05,679 --> 00:19:07,520
uh specifications

481
00:19:07,520 --> 00:19:10,000
and uh they were effectively in need of

482
00:19:10,000 --> 00:19:12,640
having a support for multicast and they

483
00:19:12,640 --> 00:19:14,640
needed the spec from the iatf to cover

484
00:19:14,640 --> 00:19:17,120
it uh they were you know very pleased

485
00:19:17,120 --> 00:19:19,039
that we propose something that does not

486
00:19:19,039 --> 00:19:21,440
entail uh supporting mld

487
00:19:21,440 --> 00:19:25,039
and so as is the fact the case with h505

488
00:19:25,039 --> 00:19:27,919
uh even for multicast now the device can

489
00:19:27,919 --> 00:19:30,720
live without any mld at all

490
00:19:30,720 --> 00:19:32,000
um

491
00:19:32,000 --> 00:19:33,120
but but

492
00:19:33,120 --> 00:19:34,880
there is a lot of of brownfield there's

493
00:19:34,880 --> 00:19:38,000
a lot of deployments uh of this alien

494
00:19:38,000 --> 00:19:39,440
specification

495
00:19:39,440 --> 00:19:41,440
that will need to be

496
00:19:41,440 --> 00:19:43,600
incrementally uh

497
00:19:43,600 --> 00:19:46,559
improved by with the part of multicast

498
00:19:46,559 --> 00:19:48,400
so there needs to be compatibility and

499
00:19:48,400 --> 00:19:50,160
deployment considerations

500
00:19:50,160 --> 00:19:52,240
regarding mode of operation one in

501
00:19:52,240 --> 00:19:54,080
particular which which is deployed

502
00:19:54,080 --> 00:19:55,280
throughout

503
00:19:55,280 --> 00:19:57,760
so basically what we say is yes you can

504
00:19:57,760 --> 00:19:59,280
deploy this specification in a

505
00:19:59,280 --> 00:20:01,280
brownfield with map1

506
00:20:01,280 --> 00:20:04,000
but the devices will have to know

507
00:20:04,000 --> 00:20:06,159
whether a cxlr supports this

508
00:20:06,159 --> 00:20:08,799
specification or not and only uh

509
00:20:08,799 --> 00:20:11,760
send multicast registration to cxlrs

510
00:20:11,760 --> 00:20:13,280
which do understand it

511
00:20:13,280 --> 00:20:14,960
so we we

512
00:20:14,960 --> 00:20:17,520
we added a flag in the six cclu the

513
00:20:17,520 --> 00:20:18,960
capability option

514
00:20:18,960 --> 00:20:21,039
to indicate that the cxlr supports this

515
00:20:21,039 --> 00:20:23,200
specification effectively and there is

516
00:20:23,200 --> 00:20:25,840
also some text in case the 6lbr does not

517
00:20:25,840 --> 00:20:28,480
support it so we can still operate if

518
00:20:28,480 --> 00:20:31,679
the 6lbr does not support multicast

519
00:20:31,679 --> 00:20:32,880
which which

520
00:20:32,880 --> 00:20:35,919
is seen by the fact that when

521
00:20:35,919 --> 00:20:37,840
we register multiple multicast address

522
00:20:37,840 --> 00:20:40,000
or multiple any guest address multiple

523
00:20:40,000 --> 00:20:42,240
times the same any cast address um the

524
00:20:42,240 --> 00:20:44,159
six lbr would say duplicate duplicative

525
00:20:44,159 --> 00:20:46,480
and even though we signal uh it's any

526
00:20:46,480 --> 00:20:49,120
cast so in that case it it really means

527
00:20:49,120 --> 00:20:50,799
that the 6mbr does not understand the

528
00:20:50,799 --> 00:20:53,120
signaling of any cast and multicast and

529
00:20:53,120 --> 00:20:54,960
so that's that's how the 6lr can know

530
00:20:54,960 --> 00:20:57,520
that the 6br there's no point in in

531
00:20:57,520 --> 00:21:00,159
doing the idac with with the 6lbr

532
00:21:00,159 --> 00:21:02,559
because it will not understand it

533
00:21:02,559 --> 00:21:06,720
um so at that point it can stop doing it

534
00:21:06,720 --> 00:21:08,799
and we also describe the incremental

535
00:21:08,799 --> 00:21:12,320
operation uh with maps of three

536
00:21:12,320 --> 00:21:15,799
next slide please

537
00:21:16,720 --> 00:21:18,880
um actually there's one last thing i did

538
00:21:18,880 --> 00:21:21,120
not write in there is uh the routing

539
00:21:21,120 --> 00:21:22,640
doesn't have to be a ripple right that

540
00:21:22,640 --> 00:21:24,559
can be uh all those routing protocols we

541
00:21:24,559 --> 00:21:26,880
already support and

542
00:21:26,880 --> 00:21:29,520
um as i said we are already working on

543
00:21:29,520 --> 00:21:32,960
on using signal pannendi in evpn at the

544
00:21:32,960 --> 00:21:34,720
best working group they will be

545
00:21:34,720 --> 00:21:37,039
presenting at best about that

546
00:21:37,039 --> 00:21:38,960
and so um

547
00:21:38,960 --> 00:21:39,760
we

548
00:21:39,760 --> 00:21:41,280
basically

549
00:21:41,280 --> 00:21:43,200
want to to

550
00:21:43,200 --> 00:21:47,200
ensure that what we are the the the uni

551
00:21:47,200 --> 00:21:48,960
interface that we are defining defining

552
00:21:48,960 --> 00:21:51,360
between the the node and the router can

553
00:21:51,360 --> 00:21:54,080
be used for any routing protocol

554
00:21:54,080 --> 00:21:57,679
um including bgp in the case of evpn and

555
00:21:57,679 --> 00:21:59,200
so

556
00:21:59,200 --> 00:22:01,360
we we in the one hand we'll be uh

557
00:22:01,360 --> 00:22:03,280
extending um

558
00:22:03,280 --> 00:22:06,000
those those other uh drafts to support

559
00:22:06,000 --> 00:22:07,200
multicast

560
00:22:07,200 --> 00:22:10,400
and as well we are also providing

561
00:22:10,400 --> 00:22:13,440
already some other um

562
00:22:13,440 --> 00:22:15,919
integrations in in this specification

563
00:22:15,919 --> 00:22:17,440
and we discussed in particular the use

564
00:22:17,440 --> 00:22:19,679
of meeple which is also

565
00:22:19,679 --> 00:22:21,360
quite used in lln

566
00:22:21,360 --> 00:22:24,240
so um we basically say hey you can use

567
00:22:24,240 --> 00:22:27,520
the new mod of operation for non-storing

568
00:22:27,520 --> 00:22:30,320
multicast even if the the routing for

569
00:22:30,320 --> 00:22:32,320
multicast is not triple it's not

570
00:22:32,320 --> 00:22:34,080
disingress replication by the root

571
00:22:34,080 --> 00:22:35,280
instead of doing this ingress

572
00:22:35,280 --> 00:22:37,520
replication you can for instance

573
00:22:37,520 --> 00:22:39,840
use meepo to to us you know it's a

574
00:22:39,840 --> 00:22:41,600
flooding mechanism to flood the

575
00:22:41,600 --> 00:22:44,559
multicast message and then the 6lrs will

576
00:22:44,559 --> 00:22:46,799
get their copy and they will do as if it

577
00:22:46,799 --> 00:22:50,158
was received out of the tunnel

578
00:22:50,480 --> 00:22:54,159
voila so um yeah this is a very recent

579
00:22:54,159 --> 00:22:56,159
document we are actually trying to work

580
00:22:56,159 --> 00:22:58,480
very very swiftly on this one because of

581
00:22:58,480 --> 00:23:00,799
this external alliance which which needs

582
00:23:00,799 --> 00:23:03,039
it you know as soon as we can deliver it

583
00:23:03,039 --> 00:23:05,280
so we are proving actually that the itf

584
00:23:05,280 --> 00:23:09,360
can deliver respect uh in in a fast uh

585
00:23:09,360 --> 00:23:10,799
space

586
00:23:10,799 --> 00:23:12,400
when that's really needed by by our

587
00:23:12,400 --> 00:23:15,280
partners so so far we are doing good and

588
00:23:15,280 --> 00:23:17,520
i hope that that will get some uh

589
00:23:17,520 --> 00:23:19,520
reviews soon so we can progress the

590
00:23:19,520 --> 00:23:20,640
document

591
00:23:20,640 --> 00:23:24,320
so reviews are welcome and and please

592
00:23:24,320 --> 00:23:26,159
think about doing them quickly because

593
00:23:26,159 --> 00:23:27,840
we want to have a very fast turnaround

594
00:23:27,840 --> 00:23:30,320
on this one

595
00:23:30,720 --> 00:23:34,120
question feedback

596
00:23:38,320 --> 00:23:41,840
i'm not saying questions

597
00:23:42,080 --> 00:23:45,440
yeah perhaps one comment would be that

598
00:23:45,440 --> 00:23:47,200
well it would be good to if we could

599
00:23:47,200 --> 00:23:50,080
have a couple of volunteers to review

600
00:23:50,080 --> 00:23:51,919
the draft there was already some

601
00:23:51,919 --> 00:23:54,159
discussion on the first versions of the

602
00:23:54,159 --> 00:23:57,600
document but anyway it will be good if

603
00:23:57,600 --> 00:23:59,840
we have a couple of reviewers

604
00:23:59,840 --> 00:24:03,200
so if anyone wants to volunteer please

605
00:24:03,200 --> 00:24:05,840
let us know

606
00:24:07,039 --> 00:24:09,760
and implementations as well i may say i

607
00:24:09,760 --> 00:24:12,480
see adnan for instance in in the list

608
00:24:12,480 --> 00:24:16,080
uh yeah if somebody could look at

609
00:24:16,080 --> 00:24:18,159
trying this on on one of the open source

610
00:24:18,159 --> 00:24:20,559
implementation of six law that would be

611
00:24:20,559 --> 00:24:22,240
really really nice because we could get

612
00:24:22,240 --> 00:24:26,240
you know first-hand letters feedback

613
00:24:26,720 --> 00:24:28,640
pascal one other question do we have to

614
00:24:28,640 --> 00:24:31,120
share this with other work groups who

615
00:24:31,120 --> 00:24:33,919
might have feedback on this as well

616
00:24:33,919 --> 00:24:36,080
there will be definitely a sharing with

617
00:24:36,080 --> 00:24:38,159
raw because i'm presenting at role and

618
00:24:38,159 --> 00:24:41,200
at some point we will have to ask our id

619
00:24:41,200 --> 00:24:42,240
to

620
00:24:42,240 --> 00:24:44,640
to synchronize with

621
00:24:44,640 --> 00:24:48,159
alvaro retina with the routing id

622
00:24:48,159 --> 00:24:50,240
in charge of of raw

623
00:24:50,240 --> 00:24:52,559
to to figure out how we progress this

624
00:24:52,559 --> 00:24:55,200
document the the idea was so far that we

625
00:24:55,200 --> 00:24:58,880
we progressed at six low and but we must

626
00:24:58,880 --> 00:25:00,720
have reviews by wrong

627
00:25:00,720 --> 00:25:02,559
and so at some point i guess there will

628
00:25:02,559 --> 00:25:04,880
be maybe a last call or something at all

629
00:25:04,880 --> 00:25:05,840
as well

630
00:25:05,840 --> 00:25:07,919
you know something to ensure that role

631
00:25:07,919 --> 00:25:10,240
is is fine with this document because we

632
00:25:10,240 --> 00:25:11,919
are defining a new mode of operation for

633
00:25:11,919 --> 00:25:14,159
repo in this specification so it cannot

634
00:25:14,159 --> 00:25:15,679
be done without you know wrong

635
00:25:15,679 --> 00:25:18,320
contribution

636
00:25:18,400 --> 00:25:20,559
i was chatting with uh margaret and i

637
00:25:20,559 --> 00:25:22,559
think he said him might also be

638
00:25:22,559 --> 00:25:24,480
interested in this so he requested that

639
00:25:24,480 --> 00:25:26,559
him get notified

640
00:25:26,559 --> 00:25:28,960
kim ah okay neat

641
00:25:28,960 --> 00:25:31,039
i didn't think about it but yes uh

642
00:25:31,039 --> 00:25:33,279
ripple builds a tree for multicast which

643
00:25:33,279 --> 00:25:36,240
is ripple story mode which is very very

644
00:25:36,240 --> 00:25:37,760
akin to a pm

645
00:25:37,760 --> 00:25:38,960
pm3

646
00:25:38,960 --> 00:25:42,240
very good

647
00:25:42,240 --> 00:25:44,640
uh for the ingress replication that we

648
00:25:44,640 --> 00:25:47,200
are introducing here it's more like what

649
00:25:47,200 --> 00:25:50,400
tvpn does actually

650
00:25:53,360 --> 00:25:55,520
any any others

651
00:25:55,520 --> 00:25:57,279
okay let's let's move to the other spec

652
00:25:57,279 --> 00:25:59,600
interest of time so um next slide please

653
00:25:59,600 --> 00:26:01,840
shut up

654
00:26:01,840 --> 00:26:05,120
so this this now is is a a quite ancient

655
00:26:05,120 --> 00:26:07,679
document that we tried long long ago

656
00:26:07,679 --> 00:26:10,000
story goes that when we did eight nine

657
00:26:10,000 --> 00:26:10,960
to nine

658
00:26:10,960 --> 00:26:14,400
uh we realized that now there is uh on

659
00:26:14,400 --> 00:26:15,919
the ethernet side there is this

660
00:26:15,919 --> 00:26:17,039
knowledge

661
00:26:17,039 --> 00:26:19,919
of at least the partial knowledge of the

662
00:26:19,919 --> 00:26:23,600
address mapping uh for at least

663
00:26:23,600 --> 00:26:25,360
some of the addresses

664
00:26:25,360 --> 00:26:28,080
mapping of mac and ip address which can

665
00:26:28,080 --> 00:26:31,600
be used to reply to an ns lookup

666
00:26:31,600 --> 00:26:33,120
for all the addresses which are

667
00:26:33,120 --> 00:26:36,799
registered to the 6 lbr the 6lbr could

668
00:26:36,799 --> 00:26:40,159
definitely answer as a unicast

669
00:26:40,159 --> 00:26:42,880
request response exchange to an address

670
00:26:42,880 --> 00:26:45,919
lookup as opposed to doing the um

671
00:26:45,919 --> 00:26:47,840
the multicast ns lookup that you all

672
00:26:47,840 --> 00:26:49,440
know ends up as a broadcast on your

673
00:26:49,440 --> 00:26:50,480
system

674
00:26:50,480 --> 00:26:53,600
so uh yes it only works if the address

675
00:26:53,600 --> 00:26:55,279
is registered otherwise you know

676
00:26:55,279 --> 00:26:57,200
basically the 6lbr

677
00:26:57,200 --> 00:26:59,120
uh needs to say hey i don't have this

678
00:26:59,120 --> 00:27:00,799
registration so if you have any other

679
00:27:00,799 --> 00:27:03,679
way but at least it can be tried as a

680
00:27:03,679 --> 00:27:08,159
quick uh first try before the um the

681
00:27:08,159 --> 00:27:10,320
lookup the actual lookup is done

682
00:27:10,320 --> 00:27:13,760
you might realize that the 6lbr is is

683
00:27:13,760 --> 00:27:16,880
really abstract it can be implemented

684
00:27:16,880 --> 00:27:17,760
as

685
00:27:17,760 --> 00:27:18,480
a

686
00:27:18,480 --> 00:27:20,000
bgp

687
00:27:20,000 --> 00:27:22,000
evpn network for instance in the case of

688
00:27:22,000 --> 00:27:23,760
the vpn draft you realize that the whole

689
00:27:23,760 --> 00:27:27,520
bgp database is effectively the six lbr

690
00:27:27,520 --> 00:27:29,360
so it's completely distributed on the

691
00:27:29,360 --> 00:27:31,440
other hand it can be implemented as a

692
00:27:31,440 --> 00:27:35,840
lisp map server map requester msmr uh in

693
00:27:35,840 --> 00:27:37,919
which case it's you know it appears as

694
00:27:37,919 --> 00:27:40,640
centralized even if just like dns it can

695
00:27:40,640 --> 00:27:42,799
be something complex in the back end so

696
00:27:42,799 --> 00:27:45,600
the 6lbr is really a conceptual object

697
00:27:45,600 --> 00:27:47,520
what we do with those rfcs is we just

698
00:27:47,520 --> 00:27:49,520
provide a

699
00:27:49,520 --> 00:27:50,960
handy

700
00:27:50,960 --> 00:27:55,039
type of messaging to talk to the 6mbr

701
00:27:55,039 --> 00:27:58,480
and so far it was used mostly to to

702
00:27:58,480 --> 00:28:00,399
provide duplicate address detection that

703
00:28:00,399 --> 00:28:03,760
was the goal in the original rfc 6775

704
00:28:03,760 --> 00:28:06,320
of a whiteboard well we can write all

705
00:28:06,320 --> 00:28:08,080
the existing addresses so if there is a

706
00:28:08,080 --> 00:28:09,600
duplication we can see it from that

707
00:28:09,600 --> 00:28:11,600
board without doing broadcast

708
00:28:11,600 --> 00:28:13,919
well with the draft that we are talking

709
00:28:13,919 --> 00:28:18,240
about now we are also enhancing the 6lbr

710
00:28:18,240 --> 00:28:21,520
as being the uh a registrar that you can

711
00:28:21,520 --> 00:28:22,480
query

712
00:28:22,480 --> 00:28:24,240
for address lookup

713
00:28:24,240 --> 00:28:27,039
and when that works well you have a very

714
00:28:27,039 --> 00:28:28,960
fast and

715
00:28:28,960 --> 00:28:32,240
uh unicast let's read the value unicast

716
00:28:32,240 --> 00:28:34,399
exchange to get your address

717
00:28:34,399 --> 00:28:37,200
uh sorted out your mapping sorted out

718
00:28:37,200 --> 00:28:39,520
and as you know that's pretty much what

719
00:28:39,520 --> 00:28:42,799
happens in a modern fabric right now

720
00:28:42,799 --> 00:28:46,720
when you you go to a lisp msmr and and

721
00:28:46,720 --> 00:28:48,559
request your mapping and that's what

722
00:28:48,559 --> 00:28:50,799
happens as well uh but proactively when

723
00:28:50,799 --> 00:28:53,520
when evp and vgp uh exchange the wrought

724
00:28:53,520 --> 00:28:55,440
tap five well you can actually have this

725
00:28:55,440 --> 00:28:56,880
mapping as well

726
00:28:56,880 --> 00:28:59,440
so so basically asking to your six lbr

727
00:28:59,440 --> 00:29:00,960
what's the mapping

728
00:29:00,960 --> 00:29:02,559
is pretty much

729
00:29:02,559 --> 00:29:04,960
asking your router which does the vpn

730
00:29:04,960 --> 00:29:06,720
what's the mapping because he has that

731
00:29:06,720 --> 00:29:08,480
information

732
00:29:08,480 --> 00:29:10,960
in the in the case of vpn it will the

733
00:29:10,960 --> 00:29:12,640
router will use it itself to encapsulate

734
00:29:12,640 --> 00:29:14,720
in the vxlan but actually you could

735
00:29:14,720 --> 00:29:16,640
consider a very same fabric while you

736
00:29:16,640 --> 00:29:18,320
don't effectively encapsulate you just

737
00:29:18,320 --> 00:29:20,399
ask the router hey give me this mapping

738
00:29:20,399 --> 00:29:21,840
i will use it right away on the flat

739
00:29:21,840 --> 00:29:23,279
fabric

740
00:29:23,279 --> 00:29:26,760
next slide please

741
00:29:27,279 --> 00:29:29,440
so this is like i said a very old draft

742
00:29:29,440 --> 00:29:31,840
which was published you know when we we

743
00:29:31,840 --> 00:29:32,880
kind of

744
00:29:32,880 --> 00:29:34,960
were finishing uh the background router

745
00:29:34,960 --> 00:29:37,360
document and we just realized hey uh

746
00:29:37,360 --> 00:29:40,720
instead of having six lbrs uh all across

747
00:29:40,720 --> 00:29:42,640
the networks in for instance within the

748
00:29:42,640 --> 00:29:44,880
wi-fi access points you could actually

749
00:29:44,880 --> 00:29:47,279
uh consider it as more abstract and

750
00:29:47,279 --> 00:29:48,480
centralized

751
00:29:48,480 --> 00:29:52,000
uh on somewhere on the backbone

752
00:29:52,000 --> 00:29:53,520
and if you do that

753
00:29:53,520 --> 00:29:55,679
uh then then anybody can query it and

754
00:29:55,679 --> 00:29:57,440
that's pretty much what this document is

755
00:29:57,440 --> 00:30:00,240
doing um to be able to query it we

756
00:30:00,240 --> 00:30:03,200
needed the uh sla option

757
00:30:03,200 --> 00:30:05,039
in the edit message because that's

758
00:30:05,039 --> 00:30:06,960
usually how the cxlr which would be all

759
00:30:06,960 --> 00:30:09,200
the access points uh are talking to the

760
00:30:09,200 --> 00:30:10,880
six lvr which is which is now

761
00:30:10,880 --> 00:30:12,000
centralized

762
00:30:12,000 --> 00:30:13,520
virtually centralized

763
00:30:13,520 --> 00:30:16,559
um and and that that that addition was

764
00:30:16,559 --> 00:30:18,399
already done with eight nine to nine so

765
00:30:18,399 --> 00:30:20,559
we don't even need to specify it um

766
00:30:20,559 --> 00:30:22,640
eight nine two nine already said hey you

767
00:30:22,640 --> 00:30:25,279
can transport your uh nd options in the

768
00:30:25,279 --> 00:30:26,559
other message

769
00:30:26,559 --> 00:30:28,480
so now we are we we are actually

770
00:30:28,480 --> 00:30:30,480
leveraging that because the through the

771
00:30:30,480 --> 00:30:33,520
diary dac or through the nsna exchange

772
00:30:33,520 --> 00:30:37,440
the 6lbr will be aware of the mapping

773
00:30:37,440 --> 00:30:39,440
and you can query it

774
00:30:39,440 --> 00:30:41,760
uh either on the local link using an sna

775
00:30:41,760 --> 00:30:44,320
or even from remote using either idac to

776
00:30:44,320 --> 00:30:47,039
to get the address mappings

777
00:30:47,039 --> 00:30:48,640
so we we

778
00:30:48,640 --> 00:30:50,880
started the draft at sixth low two years

779
00:30:50,880 --> 00:30:51,840
ago

780
00:30:51,840 --> 00:30:54,240
there was this comment that it's uh it's

781
00:30:54,240 --> 00:30:56,080
mostly for the ethernet side so maybe

782
00:30:56,080 --> 00:30:59,279
you could try six man so one to six men

783
00:30:59,279 --> 00:31:02,320
uh tried and failed to to raise interest

784
00:31:02,320 --> 00:31:03,919
and that that can be explained by the

785
00:31:03,919 --> 00:31:05,360
fact that we are not maintaining an

786
00:31:05,360 --> 00:31:06,720
existing protocol which is really the

787
00:31:06,720 --> 00:31:08,720
specialty or that group but we are

788
00:31:08,720 --> 00:31:10,320
creating really something new which is

789
00:31:10,320 --> 00:31:12,480
based on work which was done elsewhere

790
00:31:12,480 --> 00:31:14,320
and so i mean

791
00:31:14,320 --> 00:31:16,640
we never really caught up at six men

792
00:31:16,640 --> 00:31:18,880
with any of this work and so it's not

793
00:31:18,880 --> 00:31:20,559
big surprise that after two years we can

794
00:31:20,559 --> 00:31:23,600
say hey we tried but you know what

795
00:31:23,600 --> 00:31:26,240
we didn't raise interest so so let's

796
00:31:26,240 --> 00:31:28,960
come back to the route and do the work

797
00:31:28,960 --> 00:31:30,320
at six low that's pretty much the

798
00:31:30,320 --> 00:31:32,399
proposal

799
00:31:32,399 --> 00:31:34,559
um i think you have next slide

800
00:31:34,559 --> 00:31:37,039
twitter

801
00:31:37,679 --> 00:31:39,919
yeah so it's basically what i said uh

802
00:31:39,919 --> 00:31:42,480
just summary of the exp of the operation

803
00:31:42,480 --> 00:31:45,279
so now you can think that the 6lbr is

804
00:31:45,279 --> 00:31:47,200
virtually centralized on the backbone

805
00:31:47,200 --> 00:31:48,960
and every information that is available

806
00:31:48,960 --> 00:31:51,120
to him which is all the address mapping

807
00:31:51,120 --> 00:31:53,200
that we are registered i can also be

808
00:31:53,200 --> 00:31:55,360
queried by anybody on the backbone or

809
00:31:55,360 --> 00:31:57,840
even further than that

810
00:31:57,840 --> 00:32:00,320
and for that we leverage the sla

811
00:32:00,320 --> 00:32:02,799
option not only in the nsl uh

812
00:32:02,799 --> 00:32:06,559
but also in the other dac exchange

813
00:32:07,679 --> 00:32:09,760
and by the way we we

814
00:32:09,760 --> 00:32:11,600
we provide this new message which is

815
00:32:11,600 --> 00:32:14,480
similar to a dac but the code the the

816
00:32:14,480 --> 00:32:16,559
the type is the same as in the redac but

817
00:32:16,559 --> 00:32:18,080
the code is is

818
00:32:18,080 --> 00:32:20,799
incriminate to say uh instead of saying

819
00:32:20,799 --> 00:32:23,440
address duplication remember redac is is

820
00:32:23,440 --> 00:32:26,399
duplication bad basically

821
00:32:26,399 --> 00:32:28,320
this becomes address mapping so it's

822
00:32:28,320 --> 00:32:30,080
it's got one instance of godzilla called

823
00:32:30,080 --> 00:32:32,480
prefix one and it really means address

824
00:32:32,480 --> 00:32:34,159
mapping so you can use it to query and

825
00:32:34,159 --> 00:32:38,159
address mapping and get a response back

826
00:32:38,159 --> 00:32:40,080
and that's it this time shredder thank

827
00:32:40,080 --> 00:32:40,960
you

828
00:32:40,960 --> 00:32:42,720
don't think i have it next time oh yeah

829
00:32:42,720 --> 00:32:45,360
so yeah there we go

830
00:32:45,360 --> 00:32:47,600
so

831
00:32:48,720 --> 00:32:51,360
yeah i can i can improve it a little bit

832
00:32:51,360 --> 00:32:52,720
um

833
00:32:52,720 --> 00:32:54,480
then i would like to see if we get

834
00:32:54,480 --> 00:32:56,320
support in this group to continue this

835
00:32:56,320 --> 00:32:58,559
work

836
00:32:59,519 --> 00:33:00,799
thank you

837
00:33:00,799 --> 00:33:01,919
i don't think we have time for

838
00:33:01,919 --> 00:33:03,360
discussion maybe we should take it on

839
00:33:03,360 --> 00:33:04,559
the mirror

840
00:33:04,559 --> 00:33:06,720
um

841
00:33:06,720 --> 00:33:10,159
we should move on to the next

842
00:33:10,159 --> 00:33:14,640
presentation which will be carlos

843
00:33:20,799 --> 00:33:23,200
okay

844
00:33:23,679 --> 00:33:25,840
so hello again i'm going to present the

845
00:33:25,840 --> 00:33:28,000
updated version of the draft and title

846
00:33:28,000 --> 00:33:29,840
transmission of compressed packets

847
00:33:29,840 --> 00:33:32,880
over 15.4 networks my co-author is an

848
00:33:32,880 --> 00:33:37,799
amira buddha from maglio next please

849
00:33:39,840 --> 00:33:42,000
so first of all as a quick reminder of

850
00:33:42,000 --> 00:33:44,080
the motivation for this draft as the

851
00:33:44,080 --> 00:33:46,960
working group knows rfc62a2

852
00:33:46,960 --> 00:33:48,159
has been the basis for header

853
00:33:48,159 --> 00:33:49,840
compression in six low pan and also in

854
00:33:49,840 --> 00:33:53,120
six law it was designed for 15.4 the

855
00:33:53,120 --> 00:33:55,760
target technology below ipv6

856
00:33:55,760 --> 00:33:57,679
and it has been adapted or reused

857
00:33:57,679 --> 00:33:59,519
several times for

858
00:33:59,519 --> 00:34:00,240
the

859
00:34:00,240 --> 00:34:02,960
relatively similar iot technologies for

860
00:34:02,960 --> 00:34:06,640
which ipv6 support has been enabled

861
00:34:06,640 --> 00:34:08,399
and well last year there was the

862
00:34:08,399 --> 00:34:11,918
publication of rfc 8724 also known as

863
00:34:11,918 --> 00:34:13,679
chic which is a product of the lp1

864
00:34:13,679 --> 00:34:15,760
working group she defines adaptation

865
00:34:15,760 --> 00:34:17,918
layer functionality and it includes a

866
00:34:17,918 --> 00:34:21,199
header compression component so

867
00:34:21,199 --> 00:34:22,879
she has been designed for even more

868
00:34:22,879 --> 00:34:25,359
constrained technologies which are such

869
00:34:25,359 --> 00:34:27,199
as lp1 technologies

870
00:34:27,199 --> 00:34:29,040
and

871
00:34:29,040 --> 00:34:31,599
for that the header compression in chic

872
00:34:31,599 --> 00:34:34,079
is more aggressive than the one in

873
00:34:34,079 --> 00:34:36,480
insecure pan the trick is using static

874
00:34:36,480 --> 00:34:38,879
context based on a priori knowledge of

875
00:34:38,879 --> 00:34:40,879
head field values

876
00:34:40,879 --> 00:34:41,679
so

877
00:34:41,679 --> 00:34:44,320
next please

878
00:34:46,079 --> 00:34:48,639
so we can give some numbers on

879
00:34:48,639 --> 00:34:51,040
the performance that we can get

880
00:34:51,040 --> 00:34:54,079
and we may compress the headers of ipv6

881
00:34:54,079 --> 00:34:56,000
udp and co-op

882
00:34:56,000 --> 00:34:57,839
down to 11 bytes by using the

883
00:34:57,839 --> 00:35:00,800
traditional 6lowpan or 6low compression

884
00:35:00,800 --> 00:35:03,680
whereas we could reduce those headers

885
00:35:03,680 --> 00:35:06,160
down to a size of only two bytes with

886
00:35:06,160 --> 00:35:07,040
chic

887
00:35:07,040 --> 00:35:09,280
this is for both mechanisms assuming the

888
00:35:09,280 --> 00:35:11,440
best case global addresses and no co-op

889
00:35:11,440 --> 00:35:13,119
header options

890
00:35:13,119 --> 00:35:14,400
so

891
00:35:14,400 --> 00:35:16,720
for battery-enabled devices this may

892
00:35:16,720 --> 00:35:19,200
represent some theoretical battery

893
00:35:19,200 --> 00:35:20,800
lifetime improvement

894
00:35:20,800 --> 00:35:23,760
when those packets ascend over 15.4 by

895
00:35:23,760 --> 00:35:26,240
up to roughly 40

896
00:35:26,240 --> 00:35:29,040
even if we include an additional third

897
00:35:29,040 --> 00:35:31,680
byte which would be the shift dispatch

898
00:35:31,680 --> 00:35:33,599
as will be shown later

899
00:35:33,599 --> 00:35:35,680
although a disclaimer here is that the

900
00:35:35,680 --> 00:35:37,280
actual improvement will be lower

901
00:35:37,280 --> 00:35:39,119
depending on various parameters and

902
00:35:39,119 --> 00:35:41,680
features such as the device hardware

903
00:35:41,680 --> 00:35:44,160
including the sleep state current

904
00:35:44,160 --> 00:35:46,480
consumption mac layer and application

905
00:35:46,480 --> 00:35:49,520
layer settings payload size and so on

906
00:35:49,520 --> 00:35:52,000
next piece

907
00:35:52,320 --> 00:35:53,040
so

908
00:35:53,040 --> 00:35:55,119
this document is related with a previous

909
00:35:55,119 --> 00:35:58,320
document that tried to define a six

910
00:35:58,320 --> 00:36:01,520
lowpan dispatch type for chic

911
00:36:01,520 --> 00:36:03,440
sorry however this document has a

912
00:36:03,440 --> 00:36:05,200
greater scope it tries to provide all

913
00:36:05,200 --> 00:36:07,440
the details needed to enable the

914
00:36:07,440 --> 00:36:09,920
transmission of compressed packets over

915
00:36:09,920 --> 00:36:11,680
15.4 networks

916
00:36:11,680 --> 00:36:13,280
so today i'm presenting revision zero

917
00:36:13,280 --> 00:36:15,520
one which provides some new content an

918
00:36:15,520 --> 00:36:17,440
improved structure and it aims to

919
00:36:17,440 --> 00:36:18,960
incorporate the feedback from the last

920
00:36:18,960 --> 00:36:20,160
idf

921
00:36:20,160 --> 00:36:22,720
next please

922
00:36:24,000 --> 00:36:26,480
so on the updates in zero one

923
00:36:26,480 --> 00:36:28,960
uh here you can see a div of the table

924
00:36:28,960 --> 00:36:31,599
of contents so you can see how

925
00:36:31,599 --> 00:36:33,839
the two main sections in the draft

926
00:36:33,839 --> 00:36:35,599
section four frame format and section

927
00:36:35,599 --> 00:36:38,079
five sheet compression for ipv6 udp and

928
00:36:38,079 --> 00:36:39,280
corp headers

929
00:36:39,280 --> 00:36:42,720
now are more detailed and more complete

930
00:36:42,720 --> 00:36:45,279
next please

931
00:36:46,880 --> 00:36:48,960
so in section 4

932
00:36:48,960 --> 00:36:51,440
we define the frame format what you can

933
00:36:51,440 --> 00:36:54,079
see the figure on the slide corresponds

934
00:36:54,079 --> 00:36:56,800
to the 15.4 frame payload when a sheet

935
00:36:56,800 --> 00:36:58,480
packet is carried

936
00:36:58,480 --> 00:37:00,720
and the leftmost field is the sheet

937
00:37:00,720 --> 00:37:02,000
dispatch

938
00:37:02,000 --> 00:37:03,040
so

939
00:37:03,040 --> 00:37:05,920
in this version of the draft we would

940
00:37:05,920 --> 00:37:09,440
use a one byte pattern from page zero

941
00:37:09,440 --> 00:37:11,920
the one that's suggested is

942
00:37:11,920 --> 00:37:13,839
the one written here to be confirmed by

943
00:37:13,839 --> 00:37:15,119
ayanna

944
00:37:15,119 --> 00:37:16,079
and

945
00:37:16,079 --> 00:37:17,200
this is

946
00:37:17,200 --> 00:37:19,599
better than the previous approach where

947
00:37:19,599 --> 00:37:22,240
we attempted to allocate a whole page

948
00:37:22,240 --> 00:37:23,520
for shik

949
00:37:23,520 --> 00:37:26,560
so this is better in terms of making a

950
00:37:26,560 --> 00:37:28,800
more efficient use of the existing six

951
00:37:28,800 --> 00:37:31,839
loop and dispatch type space

952
00:37:31,839 --> 00:37:34,079
so this byte here is one of the not

953
00:37:34,079 --> 00:37:36,560
allocated ones currently

954
00:37:36,560 --> 00:37:38,880
okay so the ship dispatch signals that

955
00:37:38,880 --> 00:37:40,880
what comes next is a compressed ship

956
00:37:40,880 --> 00:37:41,760
packet

957
00:37:41,760 --> 00:37:43,680
and the next field is the chic header

958
00:37:43,680 --> 00:37:46,000
which comprises a rule id

959
00:37:46,000 --> 00:37:49,359
and if any a compression residue

960
00:37:49,359 --> 00:37:51,680
uh in this version of the draft we state

961
00:37:51,680 --> 00:37:54,240
that the ruling this size is 8 bytes 8

962
00:37:54,240 --> 00:37:55,920
sorry 8 bits

963
00:37:55,920 --> 00:37:58,400
next piece

964
00:38:00,480 --> 00:38:04,079
then in section 5.1 we specify how ipv6

965
00:38:04,079 --> 00:38:06,320
gdp header compression is performed

966
00:38:06,320 --> 00:38:08,720
we state that it must be performed as

967
00:38:08,720 --> 00:38:12,720
per section 10 of rfc8724

968
00:38:12,720 --> 00:38:16,079
except for one thing which concerns ipv6

969
00:38:16,079 --> 00:38:19,280
addresses and udp ports

970
00:38:19,280 --> 00:38:23,040
in the base sheet specification rca 724

971
00:38:23,040 --> 00:38:25,359
there are two terms

972
00:38:25,359 --> 00:38:27,280
which are related with the

973
00:38:27,280 --> 00:38:29,760
underlying architecture that's assumed

974
00:38:29,760 --> 00:38:32,000
where there will be devices like for

975
00:38:32,000 --> 00:38:34,240
example sensors here abbreviated as

976
00:38:34,240 --> 00:38:35,119
depth

977
00:38:35,119 --> 00:38:37,119
and some application

978
00:38:37,119 --> 00:38:40,160
which might correspond to some entity uh

979
00:38:40,160 --> 00:38:41,760
in charge of centralizing data

980
00:38:41,760 --> 00:38:43,520
collection on the network side here

981
00:38:43,520 --> 00:38:45,440
abbreviated as app

982
00:38:45,440 --> 00:38:48,160
these two terms allow to use a single

983
00:38:48,160 --> 00:38:48,960
rule

984
00:38:48,960 --> 00:38:51,119
in both directions so there's no need to

985
00:38:51,119 --> 00:38:53,599
have one rule for compressing when we

986
00:38:53,599 --> 00:38:55,520
send in one direction another rule for

987
00:38:55,520 --> 00:38:57,119
the other direction

988
00:38:57,119 --> 00:38:58,320
however

989
00:38:58,320 --> 00:39:00,960
the problem here is that in 15.4

990
00:39:00,960 --> 00:39:03,520
networks these two concepts do not

991
00:39:03,520 --> 00:39:04,960
always apply for example when the two

992
00:39:04,960 --> 00:39:07,359
endpoints that are communicating are in

993
00:39:07,359 --> 00:39:09,920
a mesh network and are in the same

994
00:39:09,920 --> 00:39:11,200
category

995
00:39:11,200 --> 00:39:12,000
so

996
00:39:12,000 --> 00:39:15,040
for this reason we stated one that if an

997
00:39:15,040 --> 00:39:17,760
iid is based on layer 2 header fields

998
00:39:17,760 --> 00:39:20,000
then we don't use the compression

999
00:39:20,000 --> 00:39:22,800
decompression actions called the iid and

1000
00:39:22,800 --> 00:39:24,320
app iad

1001
00:39:24,320 --> 00:39:26,960
instead we use compute iid

1002
00:39:26,960 --> 00:39:28,480
and then there's another consequence

1003
00:39:28,480 --> 00:39:29,920
which is that in the base chic

1004
00:39:29,920 --> 00:39:31,280
specification

1005
00:39:31,280 --> 00:39:33,680
the terms uplink and downlink are

1006
00:39:33,680 --> 00:39:36,800
defined by using that an app

1007
00:39:36,800 --> 00:39:39,119
so if devenup do not always apply the

1008
00:39:39,119 --> 00:39:41,280
same happens with applying and downlink

1009
00:39:41,280 --> 00:39:44,000
so perhaps we may want to use new terms

1010
00:39:44,000 --> 00:39:46,400
the list in some cases which could be

1011
00:39:46,400 --> 00:39:48,960
transmit and receive as is in version

1012
00:39:48,960 --> 00:39:51,520
zero one in this document

1013
00:39:51,520 --> 00:39:54,000
next please

1014
00:39:55,359 --> 00:39:57,440
so we also have some initial content in

1015
00:39:57,440 --> 00:39:59,839
the security consideration section

1016
00:39:59,839 --> 00:40:02,480
uh because the document does not define

1017
00:40:02,480 --> 00:40:04,160
header compression functionality beyond

1018
00:40:04,160 --> 00:40:07,119
the one in fc 8724 we state that the

1019
00:40:07,119 --> 00:40:09,520
security considerations of the

1020
00:40:09,520 --> 00:40:12,560
corresponding section 12.1 from the base

1021
00:40:12,560 --> 00:40:14,319
specification apply

1022
00:40:14,319 --> 00:40:17,119
and also we add that as a safety measure

1023
00:40:17,119 --> 00:40:18,560
a shift decompressor must not

1024
00:40:18,560 --> 00:40:20,960
reconstruct a packet larger than 1500

1025
00:40:20,960 --> 00:40:23,359
bytes to avoid some type of attack which

1026
00:40:23,359 --> 00:40:26,160
might want to overload the resources of

1027
00:40:26,160 --> 00:40:28,720
the receiver the compressor

1028
00:40:28,720 --> 00:40:31,598
okay next please

1029
00:40:32,079 --> 00:40:34,400
so that was everything from my side i

1030
00:40:34,400 --> 00:40:35,599
don't know if there's any comment or

1031
00:40:35,599 --> 00:40:38,599
question

1032
00:40:40,240 --> 00:40:42,640
yeah uh dominique

1033
00:40:42,640 --> 00:40:44,000
yeah um

1034
00:40:44,000 --> 00:40:45,520
thank you for the presentation i have

1035
00:40:45,520 --> 00:40:48,720
one question uh what's the reason for

1036
00:40:48,720 --> 00:40:50,800
choosing that the rule ids will be one

1037
00:40:50,800 --> 00:40:53,200
byte why why do you need to

1038
00:40:53,200 --> 00:40:56,480
specify the rule id length and

1039
00:40:56,480 --> 00:40:59,520
is one byte enough

1040
00:41:00,160 --> 00:41:02,399
well

1041
00:41:02,480 --> 00:41:04,960
admittedly this is a bit tentative

1042
00:41:04,960 --> 00:41:07,520
um so

1043
00:41:07,520 --> 00:41:08,319
yeah

1044
00:41:08,319 --> 00:41:09,920
it seems like

1045
00:41:09,920 --> 00:41:11,920
at least for the use cases that we were

1046
00:41:11,920 --> 00:41:15,280
considering it bit seemed to be suitable

1047
00:41:15,280 --> 00:41:17,040
seem to be enough

1048
00:41:17,040 --> 00:41:20,720
um although this is actually open to

1049
00:41:20,720 --> 00:41:23,440
to discussion so if

1050
00:41:23,440 --> 00:41:25,760
there is feedback on these or some

1051
00:41:25,760 --> 00:41:28,480
alternative ideas we are open to to

1052
00:41:28,480 --> 00:41:31,040
discuss this

1053
00:41:31,040 --> 00:41:33,520
and the first person of the question was

1054
00:41:33,520 --> 00:41:35,760
why do you need to specify the rule id

1055
00:41:35,760 --> 00:41:37,280
length here

1056
00:41:37,280 --> 00:41:40,800
why can't you leave it open

1057
00:41:41,680 --> 00:41:42,720
yeah

1058
00:41:42,720 --> 00:41:46,160
that's another another point

1059
00:41:47,280 --> 00:41:49,359
yeah it seemed for the moment it seemed

1060
00:41:49,359 --> 00:41:50,160
like

1061
00:41:50,160 --> 00:41:52,880
specifying this uh might make maybe

1062
00:41:52,880 --> 00:41:54,880
implementations more simple

1063
00:41:54,880 --> 00:41:56,560
uh

1064
00:41:56,560 --> 00:41:59,200
perhaps it would be enough but yeah

1065
00:41:59,200 --> 00:42:01,359
maybe we we may want to have some

1066
00:42:01,359 --> 00:42:03,839
additional thoughts about

1067
00:42:03,839 --> 00:42:06,720
whether we might want to have some maybe

1068
00:42:06,720 --> 00:42:10,640
unspecified size for the rule id

1069
00:42:15,599 --> 00:42:18,800
okay uh pascal

1070
00:42:20,079 --> 00:42:24,560
yes uh uh i was wondering um

1071
00:42:24,560 --> 00:42:26,400
yes this this uh

1072
00:42:26,400 --> 00:42:28,640
point that you made about uh device two

1073
00:42:28,640 --> 00:42:31,440
device basically when you i mean i'm a

1074
00:42:31,440 --> 00:42:34,800
bit anxious about this deriving from iid

1075
00:42:34,800 --> 00:42:38,720
and and it doesn't seem too fair to to

1076
00:42:38,720 --> 00:42:41,280
find out that you need to to operate

1077
00:42:41,280 --> 00:42:43,200
uh in in a mode symmetrical or

1078
00:42:43,200 --> 00:42:44,800
non-symmetrical based on the trust i'm

1079
00:42:44,800 --> 00:42:46,319
still a bit confused by that i hope we

1080
00:42:46,319 --> 00:42:48,400
can discuss and find something a bit

1081
00:42:48,400 --> 00:42:50,960
different um but the the core of my

1082
00:42:50,960 --> 00:42:52,240
question is is

1083
00:42:52,240 --> 00:42:54,880
the lp1 architecture we are writing in

1084
00:42:54,880 --> 00:42:56,480
this architecture that

1085
00:42:56,480 --> 00:42:58,400
you have both cases effectively as you

1086
00:42:58,400 --> 00:43:00,880
described the the asymmetrical and the

1087
00:43:00,880 --> 00:43:03,280
symmetrical kind of modes

1088
00:43:03,280 --> 00:43:05,119
and i just wanted to make sure that that

1089
00:43:05,119 --> 00:43:07,359
what you are presenting here

1090
00:43:07,359 --> 00:43:09,200
is completely covered by the

1091
00:43:09,200 --> 00:43:11,119
architecture otherwise we probably need

1092
00:43:11,119 --> 00:43:12,880
to to adapt the architecture to make

1093
00:43:12,880 --> 00:43:14,640
sure that what you

1094
00:43:14,640 --> 00:43:16,640
describe what you need is is also there

1095
00:43:16,640 --> 00:43:18,960
so so yes basically i was asking hey can

1096
00:43:18,960 --> 00:43:20,560
we sync this document and the

1097
00:43:20,560 --> 00:43:22,079
architecture make sure

1098
00:43:22,079 --> 00:43:24,800
we have the full story

1099
00:43:24,800 --> 00:43:28,000
and this story of iid doesn't look

1100
00:43:28,000 --> 00:43:30,400
fair

1101
00:43:30,800 --> 00:43:33,040
okay okay

1102
00:43:33,040 --> 00:43:34,079
yeah

1103
00:43:34,079 --> 00:43:35,760
i mean if if you were talking about

1104
00:43:35,760 --> 00:43:37,680
bluetooth we could say hey kind of easy

1105
00:43:37,680 --> 00:43:40,560
right uh if you talk to to the central

1106
00:43:40,560 --> 00:43:41,839
device then

1107
00:43:41,839 --> 00:43:43,520
probably you can be asymmetric or if you

1108
00:43:43,520 --> 00:43:44,720
talk device to device you would be

1109
00:43:44,720 --> 00:43:46,160
symmetrical

1110
00:43:46,160 --> 00:43:47,280
um

1111
00:43:47,280 --> 00:43:48,560
because you know who is your central

1112
00:43:48,560 --> 00:43:51,119
device but in 154 you don't know who

1113
00:43:51,119 --> 00:43:54,720
would that be

1114
00:43:54,720 --> 00:43:56,240
maybe we could just say symmetrical by

1115
00:43:56,240 --> 00:43:57,760
default do we really need this

1116
00:43:57,760 --> 00:44:01,599
optimization of being asymmetrical

1117
00:44:03,040 --> 00:44:05,359
okay yeah so we'll

1118
00:44:05,359 --> 00:44:07,119
discuss this and consider it for the

1119
00:44:07,119 --> 00:44:11,800
next update thank you thanks a lot

1120
00:44:22,720 --> 00:44:24,160
i think any further questions we can

1121
00:44:24,160 --> 00:44:27,040
take it in the chat and on the mailer

1122
00:44:27,040 --> 00:44:28,560
moving on to

1123
00:44:28,560 --> 00:44:31,839
luigi's presentation

1124
00:44:34,319 --> 00:44:37,319
yep

1125
00:44:38,960 --> 00:44:40,319
okay

1126
00:44:40,319 --> 00:44:43,119
um thank you uh i'm gonna present in the

1127
00:44:43,119 --> 00:44:45,359
next two minutes also an update about

1128
00:44:45,359 --> 00:44:47,040
the

1129
00:44:47,040 --> 00:44:48,640
native short address

1130
00:44:48,640 --> 00:44:52,319
draft so slide

1131
00:44:52,319 --> 00:44:55,839
next yeah thank you also there are a

1132
00:44:55,839 --> 00:44:58,319
few things that are new in this document

1133
00:44:58,319 --> 00:45:01,280
including me as a co-author i'm not the

1134
00:45:01,280 --> 00:45:02,720
only one that

1135
00:45:02,720 --> 00:45:05,839
joined the the effort that is also david

1136
00:45:05,839 --> 00:45:08,079
pegley of china mobile

1137
00:45:08,079 --> 00:45:10,480
uh one important thing is the fact that

1138
00:45:10,480 --> 00:45:11,760
actually the

1139
00:45:11,760 --> 00:45:14,240
the document changed name so this is a

1140
00:45:14,240 --> 00:45:18,560
revision actually but still numbered 0-0

1141
00:45:18,560 --> 00:45:20,720
the the title is now native sure

1142
00:45:20,720 --> 00:45:22,560
addressing for low power and lossy

1143
00:45:22,560 --> 00:45:24,560
network expansion

1144
00:45:24,560 --> 00:45:28,720
just to be clearer from the title of

1145
00:45:28,720 --> 00:45:31,280
the scenario to which this

1146
00:45:31,280 --> 00:45:33,119
document applies

1147
00:45:33,119 --> 00:45:34,160
okay

1148
00:45:34,160 --> 00:45:35,440
and

1149
00:45:35,440 --> 00:45:38,319
we we also spent some quite some effort

1150
00:45:38,319 --> 00:45:40,160
in try to

1151
00:45:40,160 --> 00:45:43,280
detail uh the scope of the document

1152
00:45:43,280 --> 00:45:44,800
because

1153
00:45:44,800 --> 00:45:48,720
this is as i said is about uh lln but

1154
00:45:48,720 --> 00:45:52,720
with um fixed geolocations so

1155
00:45:52,720 --> 00:45:54,880
the the kind of mobility that we can

1156
00:45:54,880 --> 00:45:57,280
have in this kind of networks is mostly

1157
00:45:57,280 --> 00:46:00,319
related to radio connectivity not

1158
00:46:00,319 --> 00:46:02,880
physical mobility okay

1159
00:46:02,880 --> 00:46:05,280
next

1160
00:46:07,280 --> 00:46:08,160
okay

1161
00:46:08,160 --> 00:46:09,440
uh

1162
00:46:09,440 --> 00:46:11,599
for those who knows the the content of

1163
00:46:11,599 --> 00:46:13,599
the the previous version there is one

1164
00:46:13,599 --> 00:46:16,079
section which is the nsa allocation so

1165
00:46:16,079 --> 00:46:17,280
basically

1166
00:46:17,280 --> 00:46:20,560
how we create the addressing of the

1167
00:46:20,560 --> 00:46:21,920
different nodes

1168
00:46:21,920 --> 00:46:25,359
so the the allocation function that does

1169
00:46:25,359 --> 00:46:27,440
that specific action has been better

1170
00:46:27,440 --> 00:46:29,040
formalized so that is a little bit

1171
00:46:29,040 --> 00:46:30,960
clearer to understand

1172
00:46:30,960 --> 00:46:33,599
and most importantly we added a

1173
00:46:33,599 --> 00:46:36,800
step-by-step example so that we really

1174
00:46:36,800 --> 00:46:39,760
can see how to build the addressing and

1175
00:46:39,760 --> 00:46:41,200
how it works

1176
00:46:41,200 --> 00:46:43,119
yet at the same time

1177
00:46:43,119 --> 00:46:44,960
the allocation function

1178
00:46:44,960 --> 00:46:49,599
is open to be modified if someone

1179
00:46:49,599 --> 00:46:54,240
wants to okay if by any reason

1180
00:46:54,720 --> 00:46:57,119
it finds uh

1181
00:46:57,119 --> 00:46:59,680
something that allows you to improve one

1182
00:46:59,680 --> 00:47:02,240
aspect of the other the the specs now

1183
00:47:02,240 --> 00:47:03,599
allowed to

1184
00:47:03,599 --> 00:47:06,160
let's say upgrade the allocation uh

1185
00:47:06,160 --> 00:47:09,440
function and we also

1186
00:47:09,440 --> 00:47:12,400
added further clarification about

1187
00:47:12,400 --> 00:47:14,800
the nsa addresses itself how they

1188
00:47:14,800 --> 00:47:17,760
interact with ipv6 and

1189
00:47:17,760 --> 00:47:18,800
how the

1190
00:47:18,800 --> 00:47:20,319
what happened

1191
00:47:20,319 --> 00:47:22,079
what happens with the whis of the

1192
00:47:22,079 --> 00:47:24,640
routing tree depending on the topology

1193
00:47:24,640 --> 00:47:25,520
that

1194
00:47:25,520 --> 00:47:27,280
we have

1195
00:47:27,280 --> 00:47:29,760
slide

1196
00:47:33,760 --> 00:47:36,400
we refined also the description of the

1197
00:47:36,400 --> 00:47:38,880
erotic mechanism because depending on

1198
00:47:38,880 --> 00:47:40,240
how the

1199
00:47:40,240 --> 00:47:42,319
how the the

1200
00:47:42,319 --> 00:47:44,480
addressing allocation is done then we

1201
00:47:44,480 --> 00:47:46,640
have actually a very simple

1202
00:47:46,640 --> 00:47:48,800
way to do the forwarding because we

1203
00:47:48,800 --> 00:47:50,240
basically look

1204
00:47:50,240 --> 00:47:51,760
uh at the length

1205
00:47:51,760 --> 00:47:54,800
of the address and we take a decision so

1206
00:47:54,800 --> 00:47:58,079
if the the address is shorter it means i

1207
00:47:58,079 --> 00:47:59,440
i have to

1208
00:47:59,440 --> 00:48:01,839
send it up in in the

1209
00:48:01,839 --> 00:48:04,559
in the hierarchy of the tree that we we

1210
00:48:04,559 --> 00:48:07,359
are building if it is the same length i

1211
00:48:07,359 --> 00:48:09,520
ask i'm the destination yes or not if

1212
00:48:09,520 --> 00:48:12,720
not i send upwards of if it that the

1213
00:48:12,720 --> 00:48:14,640
destination has a longer

1214
00:48:14,640 --> 00:48:17,200
uh addresses and this in the prefix of a

1215
00:48:17,200 --> 00:48:20,160
certain node he sends it downwards let's

1216
00:48:20,160 --> 00:48:23,520
say so we we better clarified everything

1217
00:48:23,520 --> 00:48:26,559
every step and we added a flowchart that

1218
00:48:26,559 --> 00:48:28,240
hopefully

1219
00:48:28,240 --> 00:48:32,839
helps in understanding what all these

1220
00:48:32,839 --> 00:48:36,160
operations next

1221
00:48:38,800 --> 00:48:40,000
um

1222
00:48:40,000 --> 00:48:41,359
we revised a little bit the

1223
00:48:41,359 --> 00:48:43,760
communication with an external nodes so

1224
00:48:43,760 --> 00:48:44,960
when we go

1225
00:48:44,960 --> 00:48:47,359
beyond the root of the

1226
00:48:47,359 --> 00:48:49,839
nsa is building and we want to

1227
00:48:49,839 --> 00:48:52,079
communicate with the

1228
00:48:52,079 --> 00:48:54,559
ipv6 destination basically

1229
00:48:54,559 --> 00:48:56,240
so

1230
00:48:56,240 --> 00:48:58,000
there is an important distinction to be

1231
00:48:58,000 --> 00:49:00,079
done one is when

1232
00:49:00,079 --> 00:49:02,960
someone external wants to

1233
00:49:02,960 --> 00:49:05,040
contact a certain node

1234
00:49:05,040 --> 00:49:07,280
so but by

1235
00:49:07,280 --> 00:49:12,160
in that case it is easy to to

1236
00:49:12,480 --> 00:49:14,240
set up the communication because at the

1237
00:49:14,240 --> 00:49:16,480
very end is the route that decides a

1238
00:49:16,480 --> 00:49:19,280
mapping between the external ipv6

1239
00:49:19,280 --> 00:49:20,160
address

1240
00:49:20,160 --> 00:49:21,440
and

1241
00:49:21,440 --> 00:49:22,559
a

1242
00:49:22,559 --> 00:49:25,280
an artificial nsa address that is used

1243
00:49:25,280 --> 00:49:27,599
to map with the externa

1244
00:49:27,599 --> 00:49:29,599
the other way around

1245
00:49:29,599 --> 00:49:32,960
needs more work in the sense that

1246
00:49:32,960 --> 00:49:36,319
if an internal road wants to to

1247
00:49:36,319 --> 00:49:39,680
contact an external ipv6 address

1248
00:49:39,680 --> 00:49:41,839
this decision is made locally by the

1249
00:49:41,839 --> 00:49:43,440
node right

1250
00:49:43,440 --> 00:49:45,520
and but the the

1251
00:49:45,520 --> 00:49:48,559
it the muppet nsa address of this

1252
00:49:48,559 --> 00:49:50,800
external node has to be decided by the

1253
00:49:50,800 --> 00:49:51,760
root

1254
00:49:51,760 --> 00:49:53,200
so what we do is we send the first

1255
00:49:53,200 --> 00:49:56,160
packet with a full ipv6 address the root

1256
00:49:56,160 --> 00:49:57,920
takes a decision and sends back a

1257
00:49:57,920 --> 00:50:01,280
message and specifically a nice cmp

1258
00:50:01,280 --> 00:50:03,599
v6 message in order to

1259
00:50:03,599 --> 00:50:06,800
tell the node this for for next packets

1260
00:50:06,800 --> 00:50:09,040
to be exchanged you can use this short

1261
00:50:09,040 --> 00:50:10,079
address

1262
00:50:10,079 --> 00:50:10,960
okay

1263
00:50:10,960 --> 00:50:13,839
next

1264
00:50:15,200 --> 00:50:17,119
um

1265
00:50:17,119 --> 00:50:19,440
the usual stuff in a certain way when

1266
00:50:19,440 --> 00:50:22,319
you revise a document is to

1267
00:50:22,319 --> 00:50:24,559
polish the text

1268
00:50:24,559 --> 00:50:28,400
we try to polish also or simplify the

1269
00:50:28,400 --> 00:50:30,800
the various figures that are there

1270
00:50:30,800 --> 00:50:33,440
and i better highlight the benefits that

1271
00:50:33,440 --> 00:50:36,400
the nsa format

1272
00:50:36,400 --> 00:50:38,319
introduces

1273
00:50:38,319 --> 00:50:40,480
the ayanna section has been

1274
00:50:40,480 --> 00:50:43,839
completely uh revised i mean this is in

1275
00:50:43,839 --> 00:50:47,040
line with how the the ayanna

1276
00:50:47,040 --> 00:50:49,200
consideration section should be

1277
00:50:49,200 --> 00:50:52,640
written so we are asking for the some

1278
00:50:52,640 --> 00:50:55,200
registry and we start to populate the

1279
00:50:55,200 --> 00:50:58,078
content of those

1280
00:50:59,200 --> 00:51:02,799
registries next

1281
00:51:04,000 --> 00:51:05,040
so

1282
00:51:05,040 --> 00:51:08,319
this is the result obviously of us the

1283
00:51:08,319 --> 00:51:10,640
co-authors but with the help of uh

1284
00:51:10,640 --> 00:51:13,520
different people with which we had

1285
00:51:13,520 --> 00:51:16,319
interaction and we we wanted to to thank

1286
00:51:16,319 --> 00:51:19,280
them all for helping us to

1287
00:51:19,280 --> 00:51:21,119
improve the document and

1288
00:51:21,119 --> 00:51:24,640
pinpoint some issues that we we try to

1289
00:51:24,640 --> 00:51:25,760
to address

1290
00:51:25,760 --> 00:51:28,960
okay and so

1291
00:51:28,960 --> 00:51:30,480
thank you

1292
00:51:30,480 --> 00:51:33,839
but further feedback is always uh

1293
00:51:33,839 --> 00:51:36,400
welcome obviously

1294
00:51:36,400 --> 00:51:38,800
next

1295
00:51:39,040 --> 00:51:41,920
so this is the the final slide um

1296
00:51:41,920 --> 00:51:47,280
we we did quite a thorough work and

1297
00:51:47,520 --> 00:51:49,520
we are going forward so the last slide

1298
00:51:49,520 --> 00:51:52,240
was about we the authors think that the

1299
00:51:52,240 --> 00:51:53,520
the the

1300
00:51:53,520 --> 00:51:55,280
the document is

1301
00:51:55,280 --> 00:51:56,880
uh stable

1302
00:51:56,880 --> 00:51:59,200
and maybe it could be considered to be

1303
00:51:59,200 --> 00:52:01,599
adopted as a working group item yes to

1304
00:52:01,599 --> 00:52:02,800
be discussed

1305
00:52:02,800 --> 00:52:05,040
i don't know if we have time now but

1306
00:52:05,040 --> 00:52:06,800
certainly maybe later on the mailing

1307
00:52:06,800 --> 00:52:08,000
list

1308
00:52:08,000 --> 00:52:09,200
thank you

1309
00:52:09,200 --> 00:52:09,920
i

1310
00:52:09,920 --> 00:52:15,559
open for question if times allows

1311
00:52:21,440 --> 00:52:23,440
yeah so perhaps there's not much time

1312
00:52:23,440 --> 00:52:25,599
but uh there was one

1313
00:52:25,599 --> 00:52:27,359
point that raised some concerns in the

1314
00:52:27,359 --> 00:52:30,000
previous presentation in the last idea

1315
00:52:30,000 --> 00:52:31,599
about

1316
00:52:31,599 --> 00:52:34,800
the renumbering and so on when there was

1317
00:52:34,800 --> 00:52:38,079
this dynamic in the network with links

1318
00:52:38,079 --> 00:52:40,079
uh changing and so on

1319
00:52:40,079 --> 00:52:43,200
so it would be good to to see whether

1320
00:52:43,200 --> 00:52:46,079
the people who had concerns on this uh

1321
00:52:46,079 --> 00:52:48,079
may have any comments

1322
00:52:48,079 --> 00:52:50,319
so yeah perhaps it will be good to have

1323
00:52:50,319 --> 00:52:51,680
some discussion on the mailing list

1324
00:52:51,680 --> 00:52:54,079
about whether the updates address those

1325
00:52:54,079 --> 00:52:56,559
concerns

1326
00:52:56,559 --> 00:53:00,319
uh yeah we proposed a solution we

1327
00:53:00,319 --> 00:53:01,760
certainly can discuss more on the

1328
00:53:01,760 --> 00:53:02,960
mailing list

1329
00:53:02,960 --> 00:53:06,000
knowing that we we consider a rather

1330
00:53:06,000 --> 00:53:08,880
static scenario but but anyway uh

1331
00:53:08,880 --> 00:53:10,559
absolutely

1332
00:53:10,559 --> 00:53:13,920
uh discussing on the mailing list to to

1333
00:53:13,920 --> 00:53:16,800
to check whether the issue is considered

1334
00:53:16,800 --> 00:53:17,760
solved

1335
00:53:17,760 --> 00:53:19,599
with the current television

1336
00:53:19,599 --> 00:53:22,960
is something that can be done

1337
00:53:23,920 --> 00:53:25,599
and i guess pascal

1338
00:53:25,599 --> 00:53:29,839
is asking to comment on that

1339
00:53:33,839 --> 00:53:36,319
i'm not being told that i can speak but

1340
00:53:36,319 --> 00:53:38,800
since nobody's speaking yeah

1341
00:53:38,800 --> 00:53:41,440
if you tell me okay the applicability is

1342
00:53:41,440 --> 00:53:43,839
uh all the network is built on

1343
00:53:43,839 --> 00:53:47,040
eight port switches you know ethernet

1344
00:53:47,040 --> 00:53:48,960
and you know exactly how many parts you

1345
00:53:48,960 --> 00:53:51,520
have and and the wires will prevent you

1346
00:53:51,520 --> 00:53:53,680
from trying anything stupid

1347
00:53:53,680 --> 00:53:56,880
so yeah that will work uh

1348
00:53:56,880 --> 00:53:59,040
so so if you give us an applicability

1349
00:53:59,040 --> 00:54:01,920
statement this is for exactly this

1350
00:54:01,920 --> 00:54:03,040
network

1351
00:54:03,040 --> 00:54:04,720
where none of the issues and there are

1352
00:54:04,720 --> 00:54:07,520
multiple ones which killed 80 to the 155

1353
00:54:07,520 --> 00:54:09,040
and other stuff

1354
00:54:09,040 --> 00:54:10,960
apply then

1355
00:54:10,960 --> 00:54:12,559
yeah why not

1356
00:54:12,559 --> 00:54:15,599
but um you need to be very very specific

1357
00:54:15,599 --> 00:54:18,160
on you know where it applies because

1358
00:54:18,160 --> 00:54:19,760
generally speaking

1359
00:54:19,760 --> 00:54:21,760
it won't work just the same way 155

1360
00:54:21,760 --> 00:54:22,960
didn't work

1361
00:54:22,960 --> 00:54:24,400
and so

1362
00:54:24,400 --> 00:54:26,079
you have to you have to provide that i

1363
00:54:26,079 --> 00:54:28,000
mean yes if you say eight part switches

1364
00:54:28,000 --> 00:54:28,960
only

1365
00:54:28,960 --> 00:54:32,079
i'm okay i'm done

1366
00:54:32,880 --> 00:54:36,480
okay i i mean we we did provide text uh

1367
00:54:36,480 --> 00:54:40,240
to specify the the scenario but um

1368
00:54:40,240 --> 00:54:42,640
we can certainly have uh

1369
00:54:42,640 --> 00:54:45,200
more interaction through the mailing

1370
00:54:45,200 --> 00:54:47,359
list

1371
00:54:47,359 --> 00:54:49,599
and see if this is

1372
00:54:49,599 --> 00:54:52,480
sharp enough or should be

1373
00:54:52,480 --> 00:54:55,680
improved um yeah

1374
00:54:55,680 --> 00:54:58,000
that at the end of the day this was our

1375
00:54:58,000 --> 00:55:01,599
intent uh to clearly shape where

1376
00:55:01,599 --> 00:55:05,880
this solution can be applied

1377
00:55:14,240 --> 00:55:16,079
okay thanks so

1378
00:55:16,079 --> 00:55:17,520
thank you very much

1379
00:55:17,520 --> 00:55:20,160
thank you so we are a bit running out of

1380
00:55:20,160 --> 00:55:22,000
time so we may need to proceed to the

1381
00:55:22,000 --> 00:55:24,160
last presentation

1382
00:55:24,160 --> 00:55:26,640
and continue the discussion uh on the

1383
00:55:26,640 --> 00:55:29,599
mailing list so yeah now we proceed to

1384
00:55:29,599 --> 00:55:32,640
the presentation about my how you song

1385
00:55:32,640 --> 00:55:36,000
hello uh can you hear me

1386
00:55:36,000 --> 00:55:38,960
yes hello yes okay um this is houston

1387
00:55:38,960 --> 00:55:41,599
from future technologies and today uh

1388
00:55:41,599 --> 00:55:44,559
i'm going to going to talk about our new

1389
00:55:44,559 --> 00:55:46,000
dropped on the

1390
00:55:46,000 --> 00:55:48,400
using short hierarchical ip address and

1391
00:55:48,400 --> 00:55:50,720
edge networks

1392
00:55:50,720 --> 00:55:53,680
next slides please

1393
00:55:56,240 --> 00:55:58,720
okay so uh we all know in the iot

1394
00:55:58,720 --> 00:56:01,599
networks uh the entity communication are

1395
00:56:01,599 --> 00:56:04,799
highly sensitive to overhead and energy

1396
00:56:04,799 --> 00:56:07,359
but on the other hand

1397
00:56:07,359 --> 00:56:10,799
uh we know uh uh the ip this

1398
00:56:10,799 --> 00:56:14,079
overhead is uh you know uh

1399
00:56:14,079 --> 00:56:17,760
uh due to patent is due to the heavy um

1400
00:56:17,760 --> 00:56:20,880
ipv6 uh or header overhead due to the

1401
00:56:20,880 --> 00:56:23,839
long uh source and destiny addresses

1402
00:56:23,839 --> 00:56:26,240
um but meanwhile uh most of the

1403
00:56:26,240 --> 00:56:28,079
communication happened in the edge

1404
00:56:28,079 --> 00:56:30,480
network actually between adjacent and

1405
00:56:30,480 --> 00:56:32,319
related entities

1406
00:56:32,319 --> 00:56:35,760
and these share the same ipv6 prefix so

1407
00:56:35,760 --> 00:56:38,079
the key observation is why should the

1408
00:56:38,079 --> 00:56:40,640
entity know the prefix

1409
00:56:40,640 --> 00:56:45,839
at first place next next slide please

1410
00:56:47,680 --> 00:56:50,160
so uh if we observe the address we can

1411
00:56:50,160 --> 00:56:52,720
see uh the entity in the iot network

1412
00:56:52,720 --> 00:56:57,040
will share a common ipv6 subnet prefix

1413
00:56:57,040 --> 00:56:59,280
and below that if we further partition

1414
00:56:59,280 --> 00:57:01,839
the network into multiple levels then

1415
00:57:01,839 --> 00:57:04,240
each level will own its own

1416
00:57:04,240 --> 00:57:05,680
network id

1417
00:57:05,680 --> 00:57:07,040
and finally

1418
00:57:07,040 --> 00:57:09,839
the entity id is only part of the suffix

1419
00:57:09,839 --> 00:57:13,680
of the ipv6 address so therefore all key

1420
00:57:13,680 --> 00:57:16,960
ideas lets the entity only know and use

1421
00:57:16,960 --> 00:57:21,119
its own entity id and while we delegate

1422
00:57:21,119 --> 00:57:23,440
all the network id and the prefix

1423
00:57:23,440 --> 00:57:26,000
matinees and operation to the gateway

1424
00:57:26,000 --> 00:57:28,000
routers

1425
00:57:28,000 --> 00:57:30,559
next slides

1426
00:57:31,920 --> 00:57:33,119
so therefore

1427
00:57:33,119 --> 00:57:35,280
for the address part of the packet

1428
00:57:35,280 --> 00:57:37,599
header we can only maintain the length

1429
00:57:37,599 --> 00:57:39,440
of the source address and the

1430
00:57:39,440 --> 00:57:42,319
destination address followed by the two

1431
00:57:42,319 --> 00:57:44,319
variable lines the source address and

1432
00:57:44,319 --> 00:57:46,640
the destination address in this way we

1433
00:57:46,640 --> 00:57:49,520
can really compress the address part of

1434
00:57:49,520 --> 00:57:52,240
the header and for the network and cache

1435
00:57:52,240 --> 00:57:54,880
architecture you can see we will have

1436
00:57:54,880 --> 00:57:58,079
multiple levels of the sub networks and

1437
00:57:58,079 --> 00:58:00,079
each level will have a

1438
00:58:00,079 --> 00:58:02,960
one more gateway routers we call them

1439
00:58:02,960 --> 00:58:06,240
level gateway routers so the the network

1440
00:58:06,240 --> 00:58:07,520
prefix

1441
00:58:07,520 --> 00:58:09,760
for this level of networks only

1442
00:58:09,760 --> 00:58:12,640
maintained by this gateway router

1443
00:58:12,640 --> 00:58:14,880
while other entities in the network will

1444
00:58:14,880 --> 00:58:17,920
only know its own network

1445
00:58:17,920 --> 00:58:19,599
it's a node id

1446
00:58:19,599 --> 00:58:22,319
and there are some other type of routers

1447
00:58:22,319 --> 00:58:24,559
called intra-level routers which are

1448
00:58:24,559 --> 00:58:27,200
responsible for packed forwarding within

1449
00:58:27,200 --> 00:58:30,319
the level network uh those those routers

1450
00:58:30,319 --> 00:58:32,319
are you know they don't

1451
00:58:32,319 --> 00:58:34,799
maintain any prefix with them within

1452
00:58:34,799 --> 00:58:35,680
them

1453
00:58:35,680 --> 00:58:38,720
next slides please

1454
00:58:39,760 --> 00:58:43,280
so here is example of a network you can

1455
00:58:43,280 --> 00:58:45,200
see the external networks i've in the

1456
00:58:45,200 --> 00:58:47,680
ipv6 that mean it uh

1457
00:58:47,680 --> 00:58:50,960
allocate um you know 96 prefix bit

1458
00:58:50,960 --> 00:58:54,160
prefix to this edge network and within

1459
00:58:54,160 --> 00:58:57,760
this edge network it owns a 32 32-bit

1460
00:58:57,760 --> 00:59:00,880
address space we can further partition

1461
00:59:00,880 --> 00:59:03,680
this network into multiple levels on the

1462
00:59:03,680 --> 00:59:05,520
left side you can see there are three

1463
00:59:05,520 --> 00:59:07,440
levels of network on the right side

1464
00:59:07,440 --> 00:59:10,240
there are two levels of network

1465
00:59:10,240 --> 00:59:12,400
so in this network

1466
00:59:12,400 --> 00:59:13,520
if

1467
00:59:13,520 --> 00:59:16,799
in the first case if a node x i want to

1468
00:59:16,799 --> 00:59:19,839
talk to node y since they are both in

1469
00:59:19,839 --> 00:59:23,119
the same level of network so you can see

1470
00:59:23,119 --> 00:59:25,280
uh their source address and destination

1471
00:59:25,280 --> 00:59:28,400
address are of the same lens and there

1472
00:59:28,400 --> 00:59:30,559
there's no need to go outside of the

1473
00:59:30,559 --> 00:59:33,359
level networks they can directly talk

1474
00:59:33,359 --> 00:59:35,040
with each other with their own short

1475
00:59:35,040 --> 00:59:36,160
address

1476
00:59:36,160 --> 00:59:37,839
in another case

1477
00:59:37,839 --> 00:59:42,000
if node x want to talk to node in

1478
00:59:42,000 --> 00:59:45,520
so they are they are in a different

1479
00:59:45,520 --> 00:59:47,599
sub networks and

1480
00:59:47,599 --> 00:59:50,559
but their common level network is a

1481
00:59:50,559 --> 00:59:52,160
level one network

1482
00:59:52,160 --> 00:59:55,760
so in this case the node s need first go

1483
00:59:55,760 --> 00:59:57,760
out of is a

1484
00:59:57,760 --> 00:59:59,760
local level two network

1485
00:59:59,760 --> 01:00:03,040
you can see uh first it will go out uh

1486
01:00:03,040 --> 01:00:06,480
go through the lg rb a level gateway

1487
01:00:06,480 --> 01:00:07,680
router b

1488
01:00:07,680 --> 01:00:10,319
so level gateway router b will keep its

1489
01:00:10,319 --> 01:00:13,680
own network uh prefix is which is a 16

1490
01:00:13,680 --> 01:00:14,559
bit

1491
01:00:14,559 --> 01:00:16,480
uh bit long

1492
01:00:16,480 --> 01:00:19,040
so as this router it will

1493
01:00:19,040 --> 01:00:20,960
augment the source address with this

1494
01:00:20,960 --> 01:00:22,400
prefix

1495
01:00:22,400 --> 01:00:24,079
so uh

1496
01:00:24,079 --> 01:00:25,359
on the left side

1497
01:00:25,359 --> 01:00:27,280
you can see the example here the source

1498
01:00:27,280 --> 01:00:29,520
address changed then

1499
01:00:29,520 --> 01:00:30,880
now the source address and the

1500
01:00:30,880 --> 01:00:33,440
destination address have the same same

1501
01:00:33,440 --> 01:00:35,680
length then it came forward in the same

1502
01:00:35,680 --> 01:00:38,240
level of network and eventually it will

1503
01:00:38,240 --> 01:00:41,280
reach the level gateway router e

1504
01:00:41,280 --> 01:00:44,000
and that node because the destination

1505
01:00:44,000 --> 01:00:46,960
prefix is is no longer needed then it

1506
01:00:46,960 --> 01:00:49,760
stripped off the this prefix

1507
01:00:49,760 --> 01:00:51,599
then only leave the

1508
01:00:51,599 --> 01:00:53,680
node id of

1509
01:00:53,680 --> 01:00:54,880
the node n

1510
01:00:54,880 --> 01:00:57,680
and forward into this this is this lower

1511
01:00:57,680 --> 01:01:00,960
level network and finally um node n

1512
01:01:00,960 --> 01:01:02,880
receives this package

1513
01:01:02,880 --> 01:01:05,760
and with only the necessary part of the

1514
01:01:05,760 --> 01:01:07,680
address

1515
01:01:07,680 --> 01:01:08,839
next

1516
01:01:08,839 --> 01:01:12,559
slides okay just quickly uh well we are

1517
01:01:12,559 --> 01:01:13,760
already

1518
01:01:13,760 --> 01:01:15,920
behind well the official time for the

1519
01:01:15,920 --> 01:01:17,119
session has

1520
01:01:17,119 --> 01:01:20,480
finished so if you can quickly recap

1521
01:01:20,480 --> 01:01:24,400
yeah okay um that then next slice and

1522
01:01:24,400 --> 01:01:25,680
so

1523
01:01:25,680 --> 01:01:27,040
you can

1524
01:01:27,040 --> 01:01:30,240
so so yeah so basically this is a uh

1525
01:01:30,240 --> 01:01:33,359
address scheme uh to um how we can

1526
01:01:33,359 --> 01:01:35,920
truncate or the the you use only the

1527
01:01:35,920 --> 01:01:37,839
necessary part of the

1528
01:01:37,839 --> 01:01:40,880
ip address and we have a way to

1529
01:01:40,880 --> 01:01:43,599
incrementally deploy it in the

1530
01:01:43,599 --> 01:01:44,559
current

1531
01:01:44,559 --> 01:01:48,160
ipv6 bit network because it only affects

1532
01:01:48,160 --> 01:01:51,280
part of the edge network and

1533
01:01:51,280 --> 01:01:54,160
in the following slides i also show uh

1534
01:01:54,160 --> 01:01:55,359
that it's a

1535
01:01:55,359 --> 01:01:58,319
relationship with a current existing um

1536
01:01:58,319 --> 01:02:00,480
header compression schemes

1537
01:02:00,480 --> 01:02:02,880
so basically it's orthogonal to those

1538
01:02:02,880 --> 01:02:05,440
schemes uh those skin can still apply

1539
01:02:05,440 --> 01:02:08,559
but this scheme alone is a stateless and

1540
01:02:08,559 --> 01:02:11,839
is applicable to all kinds of

1541
01:02:11,839 --> 01:02:13,119
networks

1542
01:02:13,119 --> 01:02:15,200
so so so um

1543
01:02:15,200 --> 01:02:17,920
the so can you go to the last slides i

1544
01:02:17,920 --> 01:02:21,440
just want to uh show

1545
01:02:21,440 --> 01:02:22,799
um

1546
01:02:22,799 --> 01:02:25,760
yeah yeah so we we are looking for

1547
01:02:25,760 --> 01:02:27,839
maybe next slides let's just skip this

1548
01:02:27,839 --> 01:02:29,680
one

1549
01:02:29,680 --> 01:02:31,920
yeah looking for a collaboration and

1550
01:02:31,920 --> 01:02:34,880
also future workstations and

1551
01:02:34,880 --> 01:02:37,520
also we'd like to find the best place to

1552
01:02:37,520 --> 01:02:40,640
adopt this work and also see if uh um

1553
01:02:40,640 --> 01:02:43,520
sixth low uh is uh uh interested

1554
01:02:43,520 --> 01:02:49,000
interesting to this work thank you

1555
01:02:54,240 --> 01:02:56,720
okay so a quick comment from my site

1556
01:02:56,720 --> 01:03:00,559
would be that it would be good to check

1557
01:03:00,559 --> 01:03:03,599
how does your mechanism compare

1558
01:03:03,599 --> 01:03:06,559
uh against other mechanisms like six

1559
01:03:06,559 --> 01:03:08,160
lopen header compression or even cheek

1560
01:03:08,160 --> 01:03:10,160
header compression for example in terms

1561
01:03:10,160 --> 01:03:12,640
of which would be the resulting header

1562
01:03:12,640 --> 01:03:14,799
size after compression

1563
01:03:14,799 --> 01:03:16,640
so that that would be good to know to

1564
01:03:16,640 --> 01:03:19,279
better assess

1565
01:03:19,760 --> 01:03:22,319
yeah in previous slides actually have

1566
01:03:22,319 --> 01:03:24,720
some uh a brief summary

1567
01:03:24,720 --> 01:03:27,920
uh to for the comparison uh you can look

1568
01:03:27,920 --> 01:03:29,440
at that but

1569
01:03:29,440 --> 01:03:32,480
also i can give some other solid number

1570
01:03:32,480 --> 01:03:35,839
on the actual saving of the overhead

1571
01:03:35,839 --> 01:03:39,359
so the point would be to see if uh

1572
01:03:39,359 --> 01:03:41,359
your mechanism would be able to

1573
01:03:41,359 --> 01:03:42,640
outperform

1574
01:03:42,640 --> 01:03:45,359
the existing mechanisms or do something

1575
01:03:45,359 --> 01:03:47,200
or has some particular benefit that the

1576
01:03:47,200 --> 01:03:49,680
existing mechanisms don't have i think

1577
01:03:49,680 --> 01:03:52,160
it would be good yeah i think some yeah

1578
01:03:52,160 --> 01:03:54,640
yeah many uh benefits some it's

1579
01:03:54,640 --> 01:03:57,440
applicable to and many different network

1580
01:03:57,440 --> 01:04:00,559
uh environments us and also have some

1581
01:04:00,559 --> 01:04:04,319
other benefits right but in terms of uh

1582
01:04:04,319 --> 01:04:06,960
overhead saving uh i i don't think it's

1583
01:04:06,960 --> 01:04:10,160
a uh it can compete with those other

1584
01:04:10,160 --> 01:04:12,400
compression schemes because those

1585
01:04:12,400 --> 01:04:15,920
schemes are based on the context

1586
01:04:15,920 --> 01:04:18,720
based header you know

1587
01:04:18,720 --> 01:04:22,160
reduction compression techniques

1588
01:04:22,160 --> 01:04:23,039
we

1589
01:04:23,039 --> 01:04:26,000
here we only concern the part of the

1590
01:04:26,000 --> 01:04:29,200
address and also we can apply the

1591
01:04:29,200 --> 01:04:32,640
similar techniques to reduce the size of

1592
01:04:32,640 --> 01:04:35,200
the other part of the header

1593
01:04:35,200 --> 01:04:38,720
but this is note may

1594
01:04:38,960 --> 01:04:41,839
concern of this draft here we

1595
01:04:41,839 --> 01:04:45,280
we care only about address and also show

1596
01:04:45,280 --> 01:04:47,760
is a benefits to

1597
01:04:47,760 --> 01:04:51,599
to be applied in many other environments

1598
01:04:53,359 --> 01:04:55,920
okay at some point the room will get

1599
01:04:55,920 --> 01:04:58,160
closed so i don't know there's time for

1600
01:04:58,160 --> 01:05:01,119
any very quick question or comment

1601
01:05:01,119 --> 01:05:03,039
otherwise we can continue the discussion

1602
01:05:03,039 --> 01:05:05,280
on the mailing list

1603
01:05:05,280 --> 01:05:07,760
so all right thank you if there's no

1604
01:05:07,760 --> 01:05:10,079
further comment or question

1605
01:05:10,079 --> 01:05:12,799
then let's end the session here

1606
01:05:12,799 --> 01:05:15,359
so thanks a lot to everyone for

1607
01:05:15,359 --> 01:05:17,359
attending and contributing and making

1608
01:05:17,359 --> 01:05:19,280
comments and presentations

1609
01:05:19,280 --> 01:05:21,280
thanks a lot and see you in the next

1610
01:05:21,280 --> 01:05:25,640
meeting and on the mailing list

1611
01:05:45,039 --> 01:05:47,119
you

