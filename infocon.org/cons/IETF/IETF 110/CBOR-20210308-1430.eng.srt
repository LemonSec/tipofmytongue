1
00:00:04,880 --> 00:00:06,720
go to the link in the chat and help out

2
00:00:06,720 --> 00:00:09,520
marco witness

3
00:00:12,400 --> 00:00:15,679
and that also brings us to the official

4
00:00:15,679 --> 00:00:17,760
start of this meeting

5
00:00:17,760 --> 00:00:20,240
with people having come in um welcome to

6
00:00:20,240 --> 00:00:21,600
the zebra meeting of the

7
00:00:21,600 --> 00:00:24,640
online itf 110

8
00:00:24,640 --> 00:00:26,480
this is an itf meeting that means that

9
00:00:26,480 --> 00:00:28,320
the node well applies both here and

10
00:00:28,320 --> 00:00:31,119
in the accompanying venues um if there's

11
00:00:31,119 --> 00:00:32,558
anything unclear about this

12
00:00:32,558 --> 00:00:35,600
um please uh please ask about it or just

13
00:00:35,600 --> 00:00:36,079
re

14
00:00:36,079 --> 00:00:38,320
read through it and especially with ipr

15
00:00:38,320 --> 00:00:39,760
con stuff

16
00:00:39,760 --> 00:00:42,160
um just ask about it before we get into

17
00:00:42,160 --> 00:00:43,440
a situation that might otherwise be

18
00:00:43,440 --> 00:00:45,039
difficult

19
00:00:45,039 --> 00:00:50,320
um that being said next slide please

20
00:00:53,440 --> 00:00:55,280
yeah this be this meeting will be

21
00:00:55,280 --> 00:00:57,120
recorded we have the

22
00:00:57,120 --> 00:01:01,280
jabber session on on your left side um

23
00:01:01,280 --> 00:01:03,680
we will use a queue so if you have

24
00:01:03,680 --> 00:01:05,199
something to comment on

25
00:01:05,199 --> 00:01:07,760
just please um use the hand button um it

26
00:01:07,760 --> 00:01:08,400
would be

27
00:01:08,400 --> 00:01:12,560
two slides further along i think um and

28
00:01:12,560 --> 00:01:14,640
if we when when later we are in the

29
00:01:14,640 --> 00:01:16,560
discussion part um please feel free to

30
00:01:16,560 --> 00:01:18,640
just um unmute your audio

31
00:01:18,640 --> 00:01:20,880
um if you're jumping back and forth

32
00:01:20,880 --> 00:01:23,759
between discussion points

33
00:01:23,759 --> 00:01:28,159
um one slide back please um

34
00:01:28,159 --> 00:01:31,600
as as as for today uh we have

35
00:01:31,600 --> 00:01:35,680
i'm confusing myself sorry um

36
00:01:35,680 --> 00:01:38,640
as for today um this is the last meeting

37
00:01:38,640 --> 00:01:40,479
where francesca is joining us

38
00:01:40,479 --> 00:01:44,000
as a working group chair um given that

39
00:01:44,000 --> 00:01:44,320
she

40
00:01:44,320 --> 00:01:45,840
is now taking on the role of the area

41
00:01:45,840 --> 00:01:47,600
director um thanks for working with me

42
00:01:47,600 --> 00:01:48,320
and

43
00:01:48,320 --> 00:01:52,079
congratulations on the ad role

44
00:01:52,079 --> 00:01:54,320
and thanks for staying with us in that

45
00:01:54,320 --> 00:01:56,320
same role um speaking of staying with us

46
00:01:56,320 --> 00:01:57,600
uh she's taking the pres

47
00:01:57,600 --> 00:02:01,119
um she's taking the position from barry

48
00:02:01,119 --> 00:02:02,960
um thank you for working as an area

49
00:02:02,960 --> 00:02:04,560
director and thanks for

50
00:02:04,560 --> 00:02:06,159
coming back as a working group chair for

51
00:02:06,159 --> 00:02:08,959
the upcoming meetings

52
00:02:08,959 --> 00:02:13,599
happy too glad to join you guys bye

53
00:02:16,239 --> 00:02:19,599
on the agenda for today we have several

54
00:02:19,599 --> 00:02:20,959
active working group documents

55
00:02:20,959 --> 00:02:23,360
are the first of which i'll just talk

56
00:02:23,360 --> 00:02:25,200
about briefly because it's not really

57
00:02:25,200 --> 00:02:26,480
our

58
00:02:26,480 --> 00:02:28,480
working group a topic of our working

59
00:02:28,480 --> 00:02:29,599
group anymore but has been

60
00:02:29,599 --> 00:02:32,959
recently passed on to the asg we'll then

61
00:02:32,959 --> 00:02:35,200
go through the additional operators

62
00:02:35,200 --> 00:02:38,640
the packed seabor plans and the two new

63
00:02:38,640 --> 00:02:40,319
working group documents that michael has

64
00:02:40,319 --> 00:02:41,200
brought in

65
00:02:41,200 --> 00:02:43,440
on file magic file recognition and

66
00:02:43,440 --> 00:02:45,920
network addresses

67
00:02:45,920 --> 00:02:47,920
and from there we'll continue we'll

68
00:02:47,920 --> 00:02:50,160
continue with

69
00:02:50,160 --> 00:02:52,239
so far an individual document that is

70
00:02:52,239 --> 00:02:53,360
the time

71
00:02:53,360 --> 00:02:55,680
duration time duration period time

72
00:02:55,680 --> 00:02:56,800
period

73
00:02:56,800 --> 00:02:59,760
from carson um then keo will tell us

74
00:02:59,760 --> 00:03:00,400
about

75
00:03:00,400 --> 00:03:04,480
few things about how we might do um

76
00:03:04,480 --> 00:03:07,599
ordered magnc maps in sieber and

77
00:03:07,599 --> 00:03:10,080
discuss we can discuss especially the

78
00:03:10,080 --> 00:03:11,519
topic of the

79
00:03:11,519 --> 00:03:14,959
relevant tech lengths and that will

80
00:03:14,959 --> 00:03:17,599
also be the introduction point to the to

81
00:03:17,599 --> 00:03:18,000
other

82
00:03:18,000 --> 00:03:20,239
notable texts that custom will talk

83
00:03:20,239 --> 00:03:21,760
about briefly

84
00:03:21,760 --> 00:03:23,519
if then time allows we can still look

85
00:03:23,519 --> 00:03:25,599
into other any other business especially

86
00:03:25,599 --> 00:03:25,920
the

87
00:03:25,920 --> 00:03:29,680
sibo freezer comments on the agenda

88
00:03:29,680 --> 00:03:33,760
points that we still should take up

89
00:03:33,760 --> 00:03:35,840
i have two more slides that i can show

90
00:03:35,840 --> 00:03:38,000
after the freezer

91
00:03:38,000 --> 00:03:41,200
that's the 28 ai 28 thing

92
00:03:41,200 --> 00:03:44,720
i suppose yep um

93
00:03:44,720 --> 00:03:47,120
it's already on the extended agenda yep

94
00:03:47,120 --> 00:03:49,440
thank you

95
00:03:54,560 --> 00:03:57,439
um so um if there's no more no more

96
00:03:57,439 --> 00:03:58,480
comments i'll jump

97
00:03:58,480 --> 00:04:02,480
right into the topic of oid

98
00:04:02,480 --> 00:04:04,239
this document has recently passed the

99
00:04:04,239 --> 00:04:05,599
working group last call

100
00:04:05,599 --> 00:04:07,840
and i've completed the shepherd write-up

101
00:04:07,840 --> 00:04:09,920
that francesca has been as kind as to

102
00:04:09,920 --> 00:04:13,439
largely prepare as the working group

103
00:04:13,439 --> 00:04:15,920
blast call completed without any

104
00:04:15,920 --> 00:04:18,160
any objections and with good support and

105
00:04:18,160 --> 00:04:19,199
reviews

106
00:04:19,199 --> 00:04:22,079
this is now in the hands of the isg and

107
00:04:22,079 --> 00:04:25,840
commands there are already coming in

108
00:04:26,080 --> 00:04:28,240
there is one potential um issue that

109
00:04:28,240 --> 00:04:30,160
we'll we're still looking out at that is

110
00:04:30,160 --> 00:04:31,199
that john lennon

111
00:04:31,199 --> 00:04:34,400
hasn't um replied to the ipr um question

112
00:04:34,400 --> 00:04:35,120
yet

113
00:04:35,120 --> 00:04:37,600
um but there's still ample time until

114
00:04:37,600 --> 00:04:38,320
this

115
00:04:38,320 --> 00:04:41,280
really needs to be done completely and

116
00:04:41,280 --> 00:04:42,240
until then

117
00:04:42,240 --> 00:04:44,320
i mean and in general i don't expect

118
00:04:44,320 --> 00:04:45,360
that there will be

119
00:04:45,360 --> 00:04:47,759
large complications it's more uh his

120
00:04:47,759 --> 00:04:50,880
more procedural matters

121
00:04:51,680 --> 00:04:54,320
yeah by now any submarines that he might

122
00:04:54,320 --> 00:04:55,440
have

123
00:04:55,440 --> 00:04:58,639
will have surfaced so i don't think we

124
00:04:58,639 --> 00:05:01,520
have a problem there

125
00:05:06,400 --> 00:05:08,240
if there is no other question if there's

126
00:05:08,240 --> 00:05:09,919
no other points on that

127
00:05:09,919 --> 00:05:12,880
francesca please

128
00:05:12,960 --> 00:05:16,160
please um go to carson's slide and we

129
00:05:16,160 --> 00:05:16,880
can start

130
00:05:16,880 --> 00:05:21,440
with the topic of cgi control carson

131
00:05:21,440 --> 00:05:25,840
thank you next slide please

132
00:05:28,960 --> 00:05:33,280
so um yeah this is an

133
00:05:33,280 --> 00:05:36,080
old acquaintance which has been around

134
00:05:36,080 --> 00:05:37,440
uh for a while

135
00:05:37,440 --> 00:05:40,479
um it does three things it

136
00:05:40,479 --> 00:05:43,039
defines some some computed literals

137
00:05:43,039 --> 00:05:45,280
using dot cat and dot plus

138
00:05:45,280 --> 00:05:49,600
it defines how to use abn f in a cdl

139
00:05:49,600 --> 00:05:52,800
uh model and that defines that feature

140
00:05:52,800 --> 00:05:54,000
and we were kind of

141
00:05:54,000 --> 00:05:58,560
done with this but we hadn't

142
00:05:58,720 --> 00:06:00,800
got any feedback from implementation

143
00:06:00,800 --> 00:06:01,919
experience so

144
00:06:01,919 --> 00:06:05,039
so i finally broke down and

145
00:06:05,039 --> 00:06:09,280
actually generated an implementation

146
00:06:09,280 --> 00:06:12,319
so we can now play with that and the

147
00:06:12,319 --> 00:06:13,120
main reason

148
00:06:13,120 --> 00:06:14,639
why you want to have an implementation

149
00:06:14,639 --> 00:06:16,960
is that you will encounter surprises and

150
00:06:16,960 --> 00:06:20,560
that's exactly what happened here

151
00:06:21,039 --> 00:06:22,960
most of us have completely forget

152
00:06:22,960 --> 00:06:24,160
forgotten

153
00:06:24,160 --> 00:06:27,280
that abnf is is indentation

154
00:06:27,280 --> 00:06:30,240
hostile i put the word sensitive on the

155
00:06:30,240 --> 00:06:31,840
slide but

156
00:06:31,840 --> 00:06:35,440
it's really indentation hostile and

157
00:06:35,440 --> 00:06:38,240
you really want to use indentation in

158
00:06:38,240 --> 00:06:40,560
your cdl specification

159
00:06:40,560 --> 00:06:44,080
so you you understand the difference

160
00:06:44,080 --> 00:06:45,360
between the

161
00:06:45,360 --> 00:06:48,639
cdda rules and the and f rules because

162
00:06:48,639 --> 00:06:51,120
cdl has been modeled after abn f and

163
00:06:51,120 --> 00:06:53,919
it's really easy to confuse the two

164
00:06:53,919 --> 00:06:57,360
if you don't have some some visual clue

165
00:06:57,360 --> 00:07:00,240
so the the indentation you might put

166
00:07:00,240 --> 00:07:00,720
into

167
00:07:00,720 --> 00:07:03,759
some some string literals

168
00:07:03,759 --> 00:07:07,039
to to feed to the abnf operator that

169
00:07:07,039 --> 00:07:09,199
gets in the way because abnf doesn't

170
00:07:09,199 --> 00:07:11,440
allow you to have any indentation except

171
00:07:11,440 --> 00:07:14,720
on continuation lines and

172
00:07:14,720 --> 00:07:17,199
we had a brief discussion whether abnf

173
00:07:17,199 --> 00:07:18,479
maybe can be

174
00:07:18,479 --> 00:07:21,199
fixed because implementations are

175
00:07:21,199 --> 00:07:22,560
essentially

176
00:07:22,560 --> 00:07:26,400
all including some mechanisms to get rid

177
00:07:26,400 --> 00:07:27,440
of

178
00:07:27,440 --> 00:07:30,880
such indentation but um

179
00:07:30,880 --> 00:07:33,440
yeah we decided maybe it will take too

180
00:07:33,440 --> 00:07:34,000
long to

181
00:07:34,000 --> 00:07:36,720
to update this internet standard uh so

182
00:07:36,720 --> 00:07:38,960
we decided to instead put something

183
00:07:38,960 --> 00:07:43,199
into the uh control operator

184
00:07:43,199 --> 00:07:47,440
draft and now we have beside the cat

185
00:07:47,440 --> 00:07:50,639
a denting cat which was

186
00:07:50,639 --> 00:07:53,919
briefly called badge but then it was

187
00:07:53,919 --> 00:07:55,440
called dead cat

188
00:07:55,440 --> 00:07:57,599
and then people said they they would

189
00:07:57,599 --> 00:08:00,000
prefer a vegetarian option here

190
00:08:00,000 --> 00:08:03,520
um so we didn't use dead cat but

191
00:08:03,520 --> 00:08:07,120
um abbreviated this 2.

192
00:08:07,120 --> 00:08:10,240
which by the way is is a comic figure

193
00:08:10,240 --> 00:08:12,240
that people of my age are

194
00:08:12,240 --> 00:08:16,080
rather familiar in in germany anyway so

195
00:08:16,080 --> 00:08:18,400
with this little edition it's it's

196
00:08:18,400 --> 00:08:20,240
actually possible to

197
00:08:20,240 --> 00:08:23,919
to write um the

198
00:08:23,919 --> 00:08:26,080
live cat yeah that's still not

199
00:08:26,080 --> 00:08:28,240
vegetarian so i know

200
00:08:28,240 --> 00:08:30,720
um so with that it's actually possible

201
00:08:30,720 --> 00:08:33,279
to have the examples that that have been

202
00:08:33,279 --> 00:08:34,640
in the

203
00:08:34,640 --> 00:08:37,839
document before but didn't compile with

204
00:08:37,839 --> 00:08:39,440
the implementation

205
00:08:39,440 --> 00:08:42,559
and i think we are essentially done next

206
00:08:42,559 --> 00:08:45,119
slide please

207
00:08:46,880 --> 00:08:49,200
so the the implementation status as i

208
00:08:49,200 --> 00:08:50,320
said is

209
00:08:50,320 --> 00:08:52,320
the entire draft is implemented in the

210
00:08:52,320 --> 00:08:54,160
cdl tool

211
00:08:54,160 --> 00:08:57,519
about half of it is implemented in the

212
00:08:57,519 --> 00:09:01,519
uh tool from andrew weiss

213
00:09:01,519 --> 00:09:03,760
but i think he hasn't had much time to

214
00:09:03,760 --> 00:09:05,440
actually

215
00:09:05,440 --> 00:09:07,920
follow through on his promise to to put

216
00:09:07,920 --> 00:09:09,680
in a bnf there

217
00:09:09,680 --> 00:09:12,800
as well and um i

218
00:09:12,800 --> 00:09:16,480
took the the that proposal and generated

219
00:09:16,480 --> 00:09:18,480
a dash of three before we

220
00:09:18,480 --> 00:09:20,800
got a lot of discussion in the group so

221
00:09:20,800 --> 00:09:22,480
we can back this

222
00:09:22,480 --> 00:09:24,320
out if we don't like that but i think

223
00:09:24,320 --> 00:09:25,920
it's good to have one document that

224
00:09:25,920 --> 00:09:27,200
looks like

225
00:09:27,200 --> 00:09:30,160
what what we would actually send to the

226
00:09:30,160 --> 00:09:31,360
isg

227
00:09:31,360 --> 00:09:35,040
so the the next step

228
00:09:35,040 --> 00:09:38,800
is uh either to to get pre-working blast

229
00:09:38,800 --> 00:09:40,480
call reviews

230
00:09:40,480 --> 00:09:44,399
or to do a working last call

231
00:09:44,399 --> 00:09:48,000
to to finish this document

232
00:09:48,000 --> 00:09:50,240
so sometimes it's better to have

233
00:09:50,240 --> 00:09:52,560
pre-reviews sometimes it's easier to get

234
00:09:52,560 --> 00:09:54,000
them when you actually issue a working

235
00:09:54,000 --> 00:09:55,040
plus call

236
00:09:55,040 --> 00:09:57,760
there is no substantive difference here

237
00:09:57,760 --> 00:09:58,640
it just

238
00:09:58,640 --> 00:10:00,800
potentially means we will have a second

239
00:10:00,800 --> 00:10:05,839
working rest call

240
00:10:13,200 --> 00:10:15,519
just to get a general feeling um how

241
00:10:15,519 --> 00:10:16,240
many here

242
00:10:16,240 --> 00:10:19,440
have read have read and

243
00:10:19,440 --> 00:10:22,720
read or implemented the um

244
00:10:22,720 --> 00:10:24,880
the an earlier version of this document

245
00:10:24,880 --> 00:10:26,480
given that dash o3 israel

246
00:10:26,480 --> 00:10:29,120
is quite new

247
00:10:29,760 --> 00:10:31,839
kind of showing showing hands briefly

248
00:10:31,839 --> 00:10:34,240
will help

249
00:10:45,360 --> 00:10:47,839
think

250
00:11:00,160 --> 00:11:03,199
okay that's um

251
00:11:08,560 --> 00:11:11,199
it's two

252
00:11:11,839 --> 00:11:14,560
people how do we show hands i think you

253
00:11:14,560 --> 00:11:15,600
can just

254
00:11:15,600 --> 00:11:18,720
uh join the queue oh yeah

255
00:11:18,720 --> 00:11:21,920
yeah we don't need the whole uh tool

256
00:11:21,920 --> 00:11:26,240
yeah um

257
00:11:26,240 --> 00:11:29,120
okay um i'd like to have a bit more uh

258
00:11:29,120 --> 00:11:30,640
feedback on the mailing list as well

259
00:11:30,640 --> 00:11:34,000
on this because that's so far so far

260
00:11:34,000 --> 00:11:36,160
that's not terribly many people

261
00:11:36,160 --> 00:11:39,519
um but generally the i don't i don't

262
00:11:39,519 --> 00:11:40,399
hear any

263
00:11:40,399 --> 00:11:43,600
loud complaints either so

264
00:11:43,600 --> 00:11:45,200
um unless something comes up on the

265
00:11:45,200 --> 00:11:47,120
mailing list i think that this is a

266
00:11:47,120 --> 00:11:48,800
what you propose sounds like a way we

267
00:11:48,800 --> 00:11:51,920
can we can continue on

268
00:11:52,880 --> 00:11:56,880
so do we solicit glass core reviews or

269
00:11:56,880 --> 00:11:58,720
do we

270
00:11:58,720 --> 00:12:00,639
hear from a few people and then go into

271
00:12:00,639 --> 00:12:03,920
working last call right away

272
00:12:05,200 --> 00:12:08,399
i think we don't get

273
00:12:09,600 --> 00:12:11,200
we we don't get feedback in the mini

274
00:12:11,200 --> 00:12:13,279
list that we can solicit reviews by

275
00:12:13,279 --> 00:12:15,920
starting the working group last call

276
00:12:15,920 --> 00:12:19,920
and then we'll expect more reviews then

277
00:12:19,920 --> 00:12:25,839
what do you think christian yep

278
00:12:36,079 --> 00:12:37,680
which then brings us to the next topic

279
00:12:37,680 --> 00:12:39,120
which is carsten again

280
00:12:39,120 --> 00:12:44,399
on packed sibo yes next slide please

281
00:12:44,399 --> 00:12:48,079
um so we we had a couple of discussions

282
00:12:48,079 --> 00:12:50,079
in interims that

283
00:12:50,079 --> 00:12:53,760
led us to add suffix packing

284
00:12:53,760 --> 00:12:58,000
so far we only had prefix packing and

285
00:12:58,000 --> 00:13:01,120
full shared item packing and

286
00:13:01,120 --> 00:13:04,279
we added an example the example from

287
00:13:04,279 --> 00:13:07,200
2017 when this actually

288
00:13:07,200 --> 00:13:11,920
uh was written up for the first time

289
00:13:11,920 --> 00:13:15,200
and uh what's missing right now is

290
00:13:15,200 --> 00:13:19,440
the small details on the setup side

291
00:13:19,440 --> 00:13:22,800
so we know how to decompress or

292
00:13:22,800 --> 00:13:26,560
unpack a packed zebra

293
00:13:26,560 --> 00:13:31,040
data item if we have set up tables but

294
00:13:31,040 --> 00:13:32,480
we don't have

295
00:13:32,480 --> 00:13:35,279
the whole gamut of possible approaches

296
00:13:35,279 --> 00:13:37,040
for table setup

297
00:13:37,040 --> 00:13:40,560
um yet so the basic idea was to

298
00:13:40,560 --> 00:13:44,720
to do a basic version of that

299
00:13:44,720 --> 00:13:47,920
and provide extensibility points so

300
00:13:47,920 --> 00:13:49,279
people can

301
00:13:49,279 --> 00:13:53,120
add their way of doing this

302
00:13:53,120 --> 00:13:56,480
if needed so one question that came up

303
00:13:56,480 --> 00:13:56,959
is

304
00:13:56,959 --> 00:13:58,639
do we actually want to have something

305
00:13:58,639 --> 00:14:01,199
that could be called circumfix

306
00:14:01,199 --> 00:14:04,800
packing and actually i had a an older

307
00:14:04,800 --> 00:14:05,680
draft

308
00:14:05,680 --> 00:14:09,680
which i wrote for lp when that

309
00:14:09,680 --> 00:14:13,199
has this in in some

310
00:14:13,199 --> 00:14:16,800
form so right now i'm i'm

311
00:14:16,800 --> 00:14:20,079
i don't really have a very crisp uh use

312
00:14:20,079 --> 00:14:21,440
case

313
00:14:21,440 --> 00:14:24,560
uh but we we certainly could add

314
00:14:24,560 --> 00:14:28,720
uh tags like that uh later

315
00:14:28,720 --> 00:14:31,199
so right now the the unpacking part of

316
00:14:31,199 --> 00:14:32,079
of zebra pack

317
00:14:32,079 --> 00:14:34,959
really is essentially a few tag

318
00:14:34,959 --> 00:14:36,320
allocations and a few

319
00:14:36,320 --> 00:14:40,720
simple item allocations

320
00:14:40,720 --> 00:14:42,800
um so we are now in the familiar

321
00:14:42,800 --> 00:14:44,000
position that

322
00:14:44,000 --> 00:14:47,519
we we have a draft that already mostly

323
00:14:47,519 --> 00:14:49,279
works maybe needs a little bit more

324
00:14:49,279 --> 00:14:51,440
details on the table setup

325
00:14:51,440 --> 00:14:55,360
but we need to get more experience with

326
00:14:55,360 --> 00:14:58,720
using it i have an implementation from

327
00:14:58,720 --> 00:15:00,560
the 2017

328
00:15:00,560 --> 00:15:02,880
uh sprint but that really needs to be

329
00:15:02,880 --> 00:15:03,920
adapted to

330
00:15:03,920 --> 00:15:07,279
what we have uh now and

331
00:15:07,279 --> 00:15:09,120
probably need some some further

332
00:15:09,120 --> 00:15:10,639
implementation work so we

333
00:15:10,639 --> 00:15:13,199
we are in the same position we were with

334
00:15:13,199 --> 00:15:14,880
the control draft

335
00:15:14,880 --> 00:15:18,480
months ago and also

336
00:15:18,480 --> 00:15:22,320
today it became in the dispatch group

337
00:15:22,320 --> 00:15:25,920
it became obvious to me that we have to

338
00:15:25,920 --> 00:15:27,360
have some

339
00:15:27,360 --> 00:15:31,360
um additions for streaming

340
00:15:31,360 --> 00:15:35,120
uh packing so how do you run a

341
00:15:35,120 --> 00:15:38,560
streaming uh application where

342
00:15:38,560 --> 00:15:41,680
while you are streaming a sibo data item

343
00:15:41,680 --> 00:15:43,759
you notice that there is something that

344
00:15:43,759 --> 00:15:46,720
comes up repeatedly and would need a

345
00:15:46,720 --> 00:15:48,240
table entry

346
00:15:48,240 --> 00:15:52,720
um i think that can be added later

347
00:15:52,720 --> 00:15:55,120
but uh that's certainly something to

348
00:15:55,120 --> 00:15:55,920
look at in

349
00:15:55,920 --> 00:16:00,240
on the implementation uh side

350
00:16:00,240 --> 00:16:02,720
so that's where we are at the moment it

351
00:16:02,720 --> 00:16:04,240
would be really gate to

352
00:16:04,240 --> 00:16:05,440
really great to get another

353
00:16:05,440 --> 00:16:07,759
implementation

354
00:16:07,759 --> 00:16:11,040
apart from mine

355
00:16:11,040 --> 00:16:12,720
it's it's very easy to write the

356
00:16:12,720 --> 00:16:14,959
unpacker

357
00:16:14,959 --> 00:16:18,079
but the the packer is

358
00:16:18,079 --> 00:16:20,959
essentially an unbounded complexity

359
00:16:20,959 --> 00:16:22,000
problem you can

360
00:16:22,000 --> 00:16:24,639
always come up with a solution that's

361
00:16:24,639 --> 00:16:26,560
slightly better than what you have

362
00:16:26,560 --> 00:16:29,279
so you need to put some put in some

363
00:16:29,279 --> 00:16:30,720
restraint

364
00:16:30,720 --> 00:16:36,720
when implementing this so that would be

365
00:16:36,720 --> 00:16:38,560
a good thing and of course playing with

366
00:16:38,560 --> 00:16:40,240
the implementations we have would be

367
00:16:40,240 --> 00:16:43,839
good once once they are out there

368
00:16:45,120 --> 00:16:48,240
a brief procedural question other than

369
00:16:48,240 --> 00:16:51,199
um other than suit who have done

370
00:16:51,199 --> 00:16:51,759
something

371
00:16:51,759 --> 00:16:54,639
different now anyway is there anything

372
00:16:54,639 --> 00:16:56,000
that puts the timeline

373
00:16:56,000 --> 00:17:05,839
on this document

374
00:17:12,000 --> 00:17:14,000
my point of view is that there are a lot

375
00:17:14,000 --> 00:17:16,319
of json

376
00:17:16,319 --> 00:17:18,240
based protocols that could easily

377
00:17:18,240 --> 00:17:19,919
convert it to

378
00:17:19,919 --> 00:17:24,480
uh sieber and and uh get significant

379
00:17:24,480 --> 00:17:27,119
improvements from that uh if we had

380
00:17:27,119 --> 00:17:27,839
something like

381
00:17:27,839 --> 00:17:32,160
packed out there so to me it's really

382
00:17:32,160 --> 00:17:35,200
as soon as possible and not wait for a

383
00:17:35,200 --> 00:17:36,559
really strong

384
00:17:36,559 --> 00:17:39,600
use case to come up

385
00:17:43,120 --> 00:17:46,799
i think yeah this is now not only a show

386
00:17:46,799 --> 00:17:48,940
of hands

387
00:17:48,940 --> 00:17:52,799
[Music]

388
00:17:52,799 --> 00:17:55,200
yeah that's true so especially coming

389
00:17:55,200 --> 00:17:56,160
was working on

390
00:17:56,160 --> 00:17:59,679
sebor based protocols and some

391
00:17:59,679 --> 00:18:02,720
emerging ones um that would be a

392
00:18:02,720 --> 00:18:05,600
that is the benefit here i think uh uh

393
00:18:05,600 --> 00:18:05,919
the

394
00:18:05,919 --> 00:18:07,840
the story we can tell is when someone is

395
00:18:07,840 --> 00:18:09,520
coming from a

396
00:18:09,520 --> 00:18:12,880
string latin protocol and these strings

397
00:18:12,880 --> 00:18:14,080
tend to be repetitive

398
00:18:14,080 --> 00:18:16,880
to some extent uh this this the

399
00:18:16,880 --> 00:18:18,080
procedures here in fact

400
00:18:18,080 --> 00:18:20,400
are basically the solution to then

401
00:18:20,400 --> 00:18:21,200
really make

402
00:18:21,200 --> 00:18:24,080
use not only in the scaffolding of sibo

403
00:18:24,080 --> 00:18:27,360
that is more concise but also the values

404
00:18:27,360 --> 00:18:29,840
that you inherit uh from the old world

405
00:18:29,840 --> 00:18:31,840
and i think that that's that's really

406
00:18:31,840 --> 00:18:33,360
really addressing this issue here so

407
00:18:33,360 --> 00:18:35,039
that's why i think carson

408
00:18:35,039 --> 00:18:38,080
is right uh with saying we don't need a

409
00:18:38,080 --> 00:18:39,760
lot of proof this this makes a lot of

410
00:18:39,760 --> 00:18:43,840
sense by itself

411
00:18:45,440 --> 00:18:48,720
um christian with my chair head off

412
00:18:48,720 --> 00:18:51,840
if we look in to make

413
00:18:51,840 --> 00:18:55,039
making this useful for for js for

414
00:18:55,039 --> 00:18:58,240
documents coming from jason i think that

415
00:18:58,240 --> 00:19:00,400
there will be a case where

416
00:19:00,400 --> 00:19:02,480
where there's a temptation to recreate

417
00:19:02,480 --> 00:19:04,080
the original json

418
00:19:04,080 --> 00:19:06,640
um by making kind of by default

419
00:19:06,640 --> 00:19:08,000
deferring things to the

420
00:19:08,000 --> 00:19:11,280
seaboard packing which is to keep string

421
00:19:11,280 --> 00:19:12,799
identifiers where we would

422
00:19:12,799 --> 00:19:15,760
regularly use integer identifiers and

423
00:19:15,760 --> 00:19:16,240
then

424
00:19:16,240 --> 00:19:19,280
let the zebra packing

425
00:19:19,520 --> 00:19:23,280
do its do its magic i don't have a clear

426
00:19:23,280 --> 00:19:24,480
opinion on on

427
00:19:24,480 --> 00:19:26,240
whether that's a good thing or a bad

428
00:19:26,240 --> 00:19:28,240
thing or we should encourage this or not

429
00:19:28,240 --> 00:19:31,600
um but we should be aware of this

430
00:19:36,960 --> 00:19:39,840
brandon go ahead

431
00:19:42,160 --> 00:19:44,080
i know that uh suit has always been

432
00:19:44,080 --> 00:19:45,200
already been referenced

433
00:19:45,200 --> 00:19:47,840
as uh having done something different um

434
00:19:47,840 --> 00:19:49,600
but i i just want to say again

435
00:19:49,600 --> 00:19:51,039
i really wish that this had been

436
00:19:51,039 --> 00:19:53,679
available uh when suit was drafted

437
00:19:53,679 --> 00:19:56,400
because it would have made life much

438
00:19:56,400 --> 00:19:57,679
easier

439
00:19:57,679 --> 00:20:00,320
so my vote is as soon as possible

440
00:20:00,320 --> 00:20:01,039
because

441
00:20:01,039 --> 00:20:02,960
you know if we get to the next version

442
00:20:02,960 --> 00:20:04,240
of suit for example

443
00:20:04,240 --> 00:20:08,080
i'd like this to be round and stable

444
00:20:10,400 --> 00:20:12,799
thank you

445
00:20:14,240 --> 00:20:17,520
cast anything to add to this

446
00:20:17,520 --> 00:20:20,960
yeah i'm aware of this this little

447
00:20:20,960 --> 00:20:24,640
danger of people using their

448
00:20:24,640 --> 00:20:27,760
uh json based protocols unchanged

449
00:20:27,760 --> 00:20:29,039
instead of

450
00:20:29,039 --> 00:20:31,120
adapting them to sibo but on the other

451
00:20:31,120 --> 00:20:32,880
end maybe that's exactly what we want

452
00:20:32,880 --> 00:20:33,600
them

453
00:20:33,600 --> 00:20:36,960
to be able to do um so

454
00:20:36,960 --> 00:20:40,000
it really depends on on

455
00:20:40,000 --> 00:20:41,760
whether your working environment is

456
00:20:41,760 --> 00:20:44,880
really so so constrained that you

457
00:20:44,880 --> 00:20:47,120
uh you you need to take out the last

458
00:20:47,120 --> 00:20:49,360
byte then probably you want to have

459
00:20:49,360 --> 00:20:52,720
integer labels um but if what

460
00:20:52,720 --> 00:20:55,039
zebra pack can do for you is is good

461
00:20:55,039 --> 00:20:56,080
enough

462
00:20:56,080 --> 00:20:59,840
uh why why do another data model when

463
00:20:59,840 --> 00:21:02,559
instead you can just have the the

464
00:21:02,559 --> 00:21:06,000
packing engine do the work

465
00:21:10,159 --> 00:21:13,120
right thank you

466
00:21:14,559 --> 00:21:17,120
any more comments in on the topic of

467
00:21:17,120 --> 00:21:18,960
packing

468
00:21:18,960 --> 00:21:23,679
well this would be go ahead

469
00:21:23,679 --> 00:21:25,440
this would be a good time to ask who's

470
00:21:25,440 --> 00:21:28,400
going to implement this and and

471
00:21:28,400 --> 00:21:31,840
who's going to provide reviews

472
00:21:32,559 --> 00:21:34,799
fair point thanks for uh thank you uh

473
00:21:34,799 --> 00:21:36,480
who is going to implement this

474
00:21:36,480 --> 00:21:45,840
who could write a review

475
00:21:47,120 --> 00:21:50,080
thank you michael for offering to review

476
00:21:50,080 --> 00:21:50,400
and

477
00:21:50,400 --> 00:21:53,120
help you as well

478
00:21:54,159 --> 00:21:57,120
and russ housely

479
00:21:57,520 --> 00:22:01,360
excellent and brandon

480
00:22:01,360 --> 00:22:04,960
great um

481
00:22:04,960 --> 00:22:06,640
anybody who is planning to implement

482
00:22:06,640 --> 00:22:08,880
this

483
00:22:11,520 --> 00:22:14,400
well i i am

484
00:22:14,720 --> 00:22:18,159
yes additionally to you

485
00:22:18,159 --> 00:22:21,520
you already mentioned that you have

486
00:22:21,520 --> 00:22:26,799
and alexa also will review

487
00:22:26,799 --> 00:22:31,200
the the nagging we can provide and q2

488
00:22:31,200 --> 00:22:32,850
this is great

489
00:22:32,850 --> 00:22:36,080
[Music]

490
00:22:36,080 --> 00:22:37,760
with with that many reviews i'm also

491
00:22:37,760 --> 00:22:39,679
positive that at least someone will be

492
00:22:39,679 --> 00:22:41,679
tempted to just use it

493
00:22:41,679 --> 00:22:44,080
from from the point of having reviewed

494
00:22:44,080 --> 00:22:46,559
it already

495
00:22:46,670 --> 00:22:48,080
[Music]

496
00:22:48,080 --> 00:22:51,600
and great we have this all for the

497
00:22:52,840 --> 00:22:55,840
minutes

498
00:22:55,919 --> 00:22:58,960
with that we are pretty much pretty much

499
00:22:58,960 --> 00:22:59,679
on time

500
00:22:59,679 --> 00:23:01,840
to proceed on to the documents that are

501
00:23:01,840 --> 00:23:03,600
new to the working group

502
00:23:03,600 --> 00:23:07,600
uh or newly adopted being file magic

503
00:23:07,600 --> 00:23:11,600
um michael please go ahead

504
00:23:12,320 --> 00:23:14,640
hi i'm michael richardson so i these

505
00:23:14,640 --> 00:23:16,400
were adopted last week i guess

506
00:23:16,400 --> 00:23:20,320
after a presentation um in

507
00:23:20,320 --> 00:23:22,640
one of the virtual interims in february

508
00:23:22,640 --> 00:23:24,640
um i came across this as a

509
00:23:24,640 --> 00:23:27,679
as a need um as i was current converting

510
00:23:27,679 --> 00:23:29,520
a bespoke protocol well next slide

511
00:23:29,520 --> 00:23:32,240
please actually it's all on the slide

512
00:23:32,240 --> 00:23:35,679
um so i was converting um some

513
00:23:35,679 --> 00:23:38,320
bespoke protocol that involves passing c

514
00:23:38,320 --> 00:23:39,919
structures across a thing

515
00:23:39,919 --> 00:23:42,480
uh across an ipc and also storing them

516
00:23:42,480 --> 00:23:43,679
on disk

517
00:23:43,679 --> 00:23:47,279
um as part of a unit test case system

518
00:23:47,279 --> 00:23:49,120
and i'm converting it to cbore

519
00:23:49,120 --> 00:23:51,919
and i kind of really wanted to know what

520
00:23:51,919 --> 00:23:53,600
they were

521
00:23:53,600 --> 00:23:55,279
and it also came out of the discussion

522
00:23:55,279 --> 00:23:56,720
that we were having in cosi

523
00:23:56,720 --> 00:23:59,520
about the various different kind of

524
00:23:59,520 --> 00:24:01,120
containers for

525
00:24:01,120 --> 00:24:04,080
crl like things or public keys or

526
00:24:04,080 --> 00:24:05,440
private keys

527
00:24:05,440 --> 00:24:08,320
and my observation is not the peak space

528
00:24:08,320 --> 00:24:09,919
it's a bit of a no one's quite sure

529
00:24:09,919 --> 00:24:13,039
what extensions to use for what files

530
00:24:13,039 --> 00:24:15,919
and a lot of the time you don't

531
00:24:15,919 --> 00:24:18,080
necessarily get a clear idea of what's

532
00:24:18,080 --> 00:24:19,440
going on

533
00:24:19,440 --> 00:24:20,960
and you don't necessarily want to leave

534
00:24:20,960 --> 00:24:23,039
your your private keys

535
00:24:23,039 --> 00:24:25,120
uh world readable so you can find out

536
00:24:25,120 --> 00:24:27,520
that they are in fact the private keys

537
00:24:27,520 --> 00:24:30,799
um so um this is where it came out of

538
00:24:30,799 --> 00:24:33,840
next slide please

539
00:24:33,840 --> 00:24:36,000
um and actually the other other part of

540
00:24:36,000 --> 00:24:38,400
this was that i realized that

541
00:24:38,400 --> 00:24:41,200
um as you have pieces that you are

542
00:24:41,200 --> 00:24:42,400
constructing

543
00:24:42,400 --> 00:24:44,480
and a source code tree and you may be

544
00:24:44,480 --> 00:24:46,720
incorporating a zip or into your source

545
00:24:46,720 --> 00:24:47,440
code

546
00:24:47,440 --> 00:24:49,200
um as an object that you're going to

547
00:24:49,200 --> 00:24:50,799
send that you may also like to

548
00:24:50,799 --> 00:24:54,480
know in your source code um what is what

549
00:24:54,480 --> 00:24:57,279
um without actually necessarily wanting

550
00:24:57,279 --> 00:24:59,039
to transmit it and so this was

551
00:24:59,039 --> 00:25:02,000
was was uh evolved um there's a

552
00:25:02,000 --> 00:25:03,360
discussion on the list

553
00:25:03,360 --> 00:25:06,400
um about this and a seabor sequence was

554
00:25:06,400 --> 00:25:09,840
was suggested next slide please

555
00:25:10,320 --> 00:25:12,720
um and so i wrote the first version with

556
00:25:12,720 --> 00:25:14,640
a seabor sequence the discussion

557
00:25:14,640 --> 00:25:16,640
uh subsequent during the adoption call

558
00:25:16,640 --> 00:25:18,159
was that we would like to have a zebra

559
00:25:18,159 --> 00:25:18,880
sequence and

560
00:25:18,880 --> 00:25:21,919
a straight c board tag and so the

561
00:25:21,919 --> 00:25:24,159
document now does that

562
00:25:24,159 --> 00:25:28,320
next slide please

563
00:25:28,320 --> 00:25:31,039
so um in the case where you have a

564
00:25:31,039 --> 00:25:31,760
keyboard

565
00:25:31,760 --> 00:25:34,159
tag and you wrap your object then you

566
00:25:34,159 --> 00:25:36,960
start with the keyboard tag 55799 which

567
00:25:36,960 --> 00:25:37,360
uh

568
00:25:37,360 --> 00:25:40,559
magic our file already knows as cbore

569
00:25:40,559 --> 00:25:44,080
and then you allocate an a

570
00:25:44,080 --> 00:25:46,960
four byte uh tag number from the first

571
00:25:46,960 --> 00:25:49,039
come first served area and you put that

572
00:25:49,039 --> 00:25:50,480
afterwards and then you wrap your

573
00:25:50,480 --> 00:25:51,440
seaboard

574
00:25:51,440 --> 00:25:54,720
um and so this one this here is the one

575
00:25:54,720 --> 00:25:56,400
that i allocated to uh

576
00:25:56,400 --> 00:25:59,039
my project which was uh open swan so if

577
00:25:59,039 --> 00:26:00,000
you decode this

578
00:26:00,000 --> 00:26:03,840
is in the file it says opsn

579
00:26:03,840 --> 00:26:08,879
in in the file um next slide please

580
00:26:08,960 --> 00:26:11,600
um so the other version of this is that

581
00:26:11,600 --> 00:26:13,520
you have a seabor sequence

582
00:26:13,520 --> 00:26:15,919
and so we need a new tag the proposal is

583
00:26:15,919 --> 00:26:16,640
five five

584
00:26:16,640 --> 00:26:19,520
eight zero zero uh so that's one above

585
00:26:19,520 --> 00:26:19,919
the

586
00:26:19,919 --> 00:26:21,840
previous one and it would seem to have

587
00:26:21,840 --> 00:26:23,919
all the properties uh that we needed to

588
00:26:23,919 --> 00:26:26,159
have or suspect to unicode

589
00:26:26,159 --> 00:26:29,200
utf-8 utf 16

590
00:26:29,200 --> 00:26:32,159
type things and in this case with your

591
00:26:32,159 --> 00:26:33,360
cbor sequence

592
00:26:33,360 --> 00:26:35,200
you need to wrap the tags around

593
00:26:35,200 --> 00:26:38,000
something and so you wrap it around the

594
00:26:38,000 --> 00:26:41,679
um byte string bor

595
00:26:41,679 --> 00:26:44,080
which happens to have three characters

596
00:26:44,080 --> 00:26:46,640
long which happens to encode as a c

597
00:26:46,640 --> 00:26:50,480
and so the um bytes

598
00:26:50,480 --> 00:26:54,320
9 through 12 or i guess

599
00:26:54,320 --> 00:26:56,880
8 through 11 of your file counting from

600
00:26:56,880 --> 00:26:57,679
0

601
00:26:57,679 --> 00:27:00,640
are actually the letter c b o r so if

602
00:27:00,640 --> 00:27:01,120
you

603
00:27:01,120 --> 00:27:02,720
dump the file you will see the word

604
00:27:02,720 --> 00:27:04,480
seabor in it which may suggest to you

605
00:27:04,480 --> 00:27:05,440
that

606
00:27:05,440 --> 00:27:06,960
if you have some unknown thing that

607
00:27:06,960 --> 00:27:09,120
maybe applying a seaboard decoder would

608
00:27:09,120 --> 00:27:10,559
be a good idea

609
00:27:10,559 --> 00:27:13,039
um this is a seabor sequence and it's 12

610
00:27:13,039 --> 00:27:13,919
bytes long

611
00:27:13,919 --> 00:27:16,080
and so if you don't wish to transmit

612
00:27:16,080 --> 00:27:17,279
this over your

613
00:27:17,279 --> 00:27:19,840
network protocol after having read it

614
00:27:19,840 --> 00:27:21,279
from the file

615
00:27:21,279 --> 00:27:23,760
then you advance 12 bytes it's always 12

616
00:27:23,760 --> 00:27:26,320
bytes you can mem compare it if you want

617
00:27:26,320 --> 00:27:28,000
um and then you start there and then you

618
00:27:28,000 --> 00:27:29,919
have your object as it is

619
00:27:29,919 --> 00:27:31,200
so this is the two different versions

620
00:27:31,200 --> 00:27:34,159
next slide please

621
00:27:34,159 --> 00:27:37,120
um so you get what you want um i created

622
00:27:37,120 --> 00:27:37,760
for my

623
00:27:37,760 --> 00:27:40,799
thing a uh file uh file

624
00:27:40,799 --> 00:27:44,159
output that did the right thing um and

625
00:27:44,159 --> 00:27:47,679
uh it worked great um i actually delved

626
00:27:47,679 --> 00:27:48,320
into

627
00:27:48,320 --> 00:27:51,679
the uh file programs seaboard decoding

628
00:27:51,679 --> 00:27:53,279
logic and it's a little more complicated

629
00:27:53,279 --> 00:27:55,520
than i think it ought to be but um

630
00:27:55,520 --> 00:27:58,640
i don't really not really our concern

631
00:27:58,640 --> 00:28:00,880
um next slide i think that's the last

632
00:28:00,880 --> 00:28:02,480
slide yeah

633
00:28:02,480 --> 00:28:04,880
so i guess the one of the questions uh

634
00:28:04,880 --> 00:28:05,600
is

635
00:28:05,600 --> 00:28:08,120
whether or not we should allocate this

636
00:28:08,120 --> 00:28:09,279
55800

637
00:28:09,279 --> 00:28:12,640
as a working group early allocation

638
00:28:12,640 --> 00:28:16,399
um or whether i should simply i ask the

639
00:28:16,399 --> 00:28:17,039
iana

640
00:28:17,039 --> 00:28:19,120
to pointing at this document to please

641
00:28:19,120 --> 00:28:20,559
go through the right review and

642
00:28:20,559 --> 00:28:22,880
allocate it um since it's in a space

643
00:28:22,880 --> 00:28:24,320
that could go either way

644
00:28:24,320 --> 00:28:25,679
i think it would be cleaner it was an

645
00:28:25,679 --> 00:28:27,440
early working group earlier

646
00:28:27,440 --> 00:28:29,760
allocation but it could go any either

647
00:28:29,760 --> 00:28:32,559
way it doesn't matter

648
00:28:35,760 --> 00:28:38,320
um working group earlier location sounds

649
00:28:38,320 --> 00:28:39,919
like something that

650
00:28:39,919 --> 00:28:42,320
in my opinion we should do it more often

651
00:28:42,320 --> 00:28:43,039
anyway

652
00:28:43,039 --> 00:28:46,000
so that would be a good starting point

653
00:28:46,000 --> 00:28:48,880
comments from carson please

654
00:28:48,880 --> 00:28:50,640
yeah we cannot do early allocation here

655
00:28:50,640 --> 00:28:52,960
because you only can do earlier location

656
00:28:52,960 --> 00:28:55,039
on things that would

657
00:28:55,039 --> 00:28:58,240
ietf would need ietf review

658
00:28:58,240 --> 00:29:01,520
uh to to be allocated but in this case

659
00:29:01,520 --> 00:29:01,840
it's

660
00:29:01,840 --> 00:29:06,320
an fcfs base so we just just go ahead

661
00:29:06,320 --> 00:29:09,120
and request that allocation for this

662
00:29:09,120 --> 00:29:10,000
draft

663
00:29:10,000 --> 00:29:13,200
like today yeah okay i'll do that at the

664
00:29:13,200 --> 00:29:15,279
end of the working group

665
00:29:15,279 --> 00:29:18,480
so let me add that um

666
00:29:18,480 --> 00:29:22,080
i didn't think much of of this uh

667
00:29:22,080 --> 00:29:25,120
the idea of generating this draft but

668
00:29:25,120 --> 00:29:27,520
i i really like what we have now and i

669
00:29:27,520 --> 00:29:28,720
think that that's just

670
00:29:28,720 --> 00:29:32,000
a very very small piece

671
00:29:32,000 --> 00:29:36,240
of really best current practice

672
00:29:36,240 --> 00:29:38,799
that we could use in all of our little

673
00:29:38,799 --> 00:29:41,840
sibo protocols

674
00:29:46,000 --> 00:29:54,080
thanks carson

675
00:29:54,080 --> 00:29:56,559
we continue on more document no other

676
00:29:56,559 --> 00:29:57,600
questions

677
00:29:57,600 --> 00:30:00,799
if there's no um one i

678
00:30:00,799 --> 00:30:03,120
i do have one one question that i that i

679
00:30:03,120 --> 00:30:03,919
maybe didn't

680
00:30:03,919 --> 00:30:05,279
just get precisely from your

681
00:30:05,279 --> 00:30:08,080
presentation is there anything to be

682
00:30:08,080 --> 00:30:09,840
really decided between the proposed

683
00:30:09,840 --> 00:30:11,279
hybrid solutions

684
00:30:11,279 --> 00:30:13,760
or is this is this just both are

685
00:30:13,760 --> 00:30:15,520
possible

686
00:30:15,520 --> 00:30:17,120
yeah both are proposed that was the

687
00:30:17,120 --> 00:30:18,880
discussion during the adoption

688
00:30:18,880 --> 00:30:20,640
was that people felt they wanted both

689
00:30:20,640 --> 00:30:22,000
they were like well why are you using a

690
00:30:22,000 --> 00:30:24,480
sequence when i when i just want to tag

691
00:30:24,480 --> 00:30:27,120
and my my content is what fought what

692
00:30:27,120 --> 00:30:27,840
originally

693
00:30:27,840 --> 00:30:29,600
for why i thought that was a good

694
00:30:29,600 --> 00:30:31,360
solution that was proposed in earlier

695
00:30:31,360 --> 00:30:32,640
discussion

696
00:30:32,640 --> 00:30:36,480
was that it allows you to

697
00:30:36,480 --> 00:30:40,159
tag it sanely in the file um

698
00:30:40,159 --> 00:30:43,520
without actually uh making it mandatory

699
00:30:43,520 --> 00:30:44,000
that

700
00:30:44,000 --> 00:30:47,120
you are uh transmitting it across the

701
00:30:47,120 --> 00:30:50,240
wire um so while removing you know uh

702
00:30:50,240 --> 00:30:51,840
eight bytes of tag

703
00:30:51,840 --> 00:30:55,039
uh is easy to do if you speak seabore

704
00:30:55,039 --> 00:30:58,880
um if actually what you're doing is

705
00:30:58,880 --> 00:31:02,000
um you have a uh somewhat cbor ignorant

706
00:31:02,000 --> 00:31:03,600
program who's simply loading something

707
00:31:03,600 --> 00:31:06,159
and transmitting it because it's uh

708
00:31:06,159 --> 00:31:07,919
let's call it a cbor certificate or

709
00:31:07,919 --> 00:31:09,200
something else that goes in another

710
00:31:09,200 --> 00:31:10,159
protocol

711
00:31:10,159 --> 00:31:13,279
or is being converted into a byte string

712
00:31:13,279 --> 00:31:16,240
uh for another sieber protocol then

713
00:31:16,240 --> 00:31:17,760
maybe you don't actually want to open

714
00:31:17,760 --> 00:31:18,080
that

715
00:31:18,080 --> 00:31:21,120
up um maybe there are also signature

716
00:31:21,120 --> 00:31:21,760
issues

717
00:31:21,760 --> 00:31:23,600
about what you're what you've signed

718
00:31:23,600 --> 00:31:26,159
there and so

719
00:31:26,159 --> 00:31:27,840
the reasonable thing would be that the

720
00:31:27,840 --> 00:31:29,519
seabor sequence would be something

721
00:31:29,519 --> 00:31:31,039
that's easy to cleave off

722
00:31:31,039 --> 00:31:32,640
you just take off 12 bytes and you know

723
00:31:32,640 --> 00:31:34,799
exactly what they are

724
00:31:34,799 --> 00:31:36,320
and if they don't match then it's the

725
00:31:36,320 --> 00:31:38,799
wrong file

726
00:31:39,760 --> 00:31:43,840
thanks and as no one else has raised

727
00:31:43,840 --> 00:31:45,760
their hand in between yes please go

728
00:31:45,760 --> 00:31:50,000
ahead with the ipv6 and for address

729
00:31:58,640 --> 00:32:01,840
i lost green cherry so screen sharing so

730
00:32:01,840 --> 00:32:04,799
just give me a second

731
00:32:06,000 --> 00:32:10,880
just crashed oh no

732
00:32:11,279 --> 00:32:14,960
that should be back

733
00:32:14,960 --> 00:32:17,120
okay so the other document again while

734
00:32:17,120 --> 00:32:19,360
converting things i needed to have ip

735
00:32:19,360 --> 00:32:19,919
addresses

736
00:32:19,919 --> 00:32:23,440
in my uh process and i support v4 and v6

737
00:32:23,440 --> 00:32:25,519
and i thought well i should have a tag

738
00:32:25,519 --> 00:32:26,480
for that

739
00:32:26,480 --> 00:32:29,519
um in uh the grass protocol which is

740
00:32:29,519 --> 00:32:32,559
not yet an rfc but any hour now

741
00:32:32,559 --> 00:32:34,720
um had the same problem and it was too

742
00:32:34,720 --> 00:32:36,320
bad we didn't do that think of doing

743
00:32:36,320 --> 00:32:37,840
that at the time

744
00:32:37,840 --> 00:32:40,880
um there so next slide thank you so tag

745
00:32:40,880 --> 00:32:44,240
260 and 261 is in the iana registry

746
00:32:44,240 --> 00:32:45,679
and i thought oh there must be something

747
00:32:45,679 --> 00:32:47,679
there and i looked at this

748
00:32:47,679 --> 00:32:50,080
and i was kind of dissatisfied with this

749
00:32:50,080 --> 00:32:51,679
um for a couple of reasons

750
00:32:51,679 --> 00:32:55,279
um i didn't like that it also supported

751
00:32:55,279 --> 00:32:57,360
ethernet that it implied

752
00:32:57,360 --> 00:33:01,600
um the version number by the size of the

753
00:33:01,600 --> 00:33:03,120
the thing which i thought was

754
00:33:03,120 --> 00:33:05,360
potentially quite wasteful if you are

755
00:33:05,360 --> 00:33:08,559
you know transmitting slash 32 prefixes

756
00:33:08,559 --> 00:33:11,200
or something like this

757
00:33:11,200 --> 00:33:14,159
and and then i read the 261 and i didn't

758
00:33:14,159 --> 00:33:15,760
understand the description at all as to

759
00:33:15,760 --> 00:33:17,840
how to make this into a prefix

760
00:33:17,840 --> 00:33:20,080
at all um so both of these were

761
00:33:20,080 --> 00:33:22,080
allocated by

762
00:33:22,080 --> 00:33:25,200
i guess document required and the

763
00:33:25,200 --> 00:33:26,480
document is a

764
00:33:26,480 --> 00:33:30,000
is a wikipedia a a wiki entry in

765
00:33:30,000 --> 00:33:33,519
github um so i just

766
00:33:33,519 --> 00:33:34,559
thought it wasn't well enough to

767
00:33:34,559 --> 00:33:37,279
document a 261 i i didn't like it and so

768
00:33:37,279 --> 00:33:39,360
i needed prefixes as well as stuff so i

769
00:33:39,360 --> 00:33:40,640
said i bet i'm going to have to

770
00:33:40,640 --> 00:33:42,559
do something one or the other next slide

771
00:33:42,559 --> 00:33:44,879
please

772
00:33:45,200 --> 00:33:48,799
um so these are essentially the proposal

773
00:33:48,799 --> 00:33:49,360
um

774
00:33:49,360 --> 00:33:51,519
that's there there will be two tags one

775
00:33:51,519 --> 00:33:54,000
for v6 and one for v4

776
00:33:54,000 --> 00:33:57,679
um and the one for v6 has

777
00:33:57,679 --> 00:34:00,720
a byte string array and the prefix has

778
00:34:00,720 --> 00:34:01,519
an array

779
00:34:01,519 --> 00:34:02,880
containing an integer which is the

780
00:34:02,880 --> 00:34:05,039
prefix length and then a byte string

781
00:34:05,039 --> 00:34:06,000
with the

782
00:34:06,000 --> 00:34:08,800
the with the as much as many bytes as

783
00:34:08,800 --> 00:34:09,918
the prefix as you

784
00:34:09,918 --> 00:34:12,879
uh care about um in both cases trailing

785
00:34:12,879 --> 00:34:14,639
zeros may be omitted

786
00:34:14,639 --> 00:34:17,760
so uh you may omit as many zeros on the

787
00:34:17,760 --> 00:34:19,040
right as you like

788
00:34:19,040 --> 00:34:21,520
and for prefixes this is typically many

789
00:34:21,520 --> 00:34:23,199
so often

790
00:34:23,199 --> 00:34:26,560
for a 64-bit prefix um you will

791
00:34:26,560 --> 00:34:28,560
omit at least eight bytes to the right

792
00:34:28,560 --> 00:34:30,159
because they're considered zero

793
00:34:30,159 --> 00:34:31,839
and if you look at this one you realize

794
00:34:31,839 --> 00:34:33,440
that there's only 48 bits

795
00:34:33,440 --> 00:34:36,480
present in this 64 bit long prefix

796
00:34:36,480 --> 00:34:37,359
because the next

797
00:34:37,359 --> 00:34:40,719
uh 16 bits are zero um so they're

798
00:34:40,719 --> 00:34:42,399
omitted so that's good so next slide

799
00:34:42,399 --> 00:34:44,719
please

800
00:34:45,199 --> 00:34:48,560
and so the same thing for ipv4 if anyone

801
00:34:48,560 --> 00:34:50,239
still uses that stuff

802
00:34:50,239 --> 00:34:53,199
with a different tag and again you omit

803
00:34:53,199 --> 00:34:55,040
trailing prefixes

804
00:34:55,040 --> 00:34:57,599
next slide

805
00:34:58,320 --> 00:35:00,720
so i thought about you know is do we

806
00:35:00,720 --> 00:35:03,520
want to actually um

807
00:35:03,520 --> 00:35:05,119
uh you know do we want to be able to

808
00:35:05,119 --> 00:35:06,800
apply this to raise of

809
00:35:06,800 --> 00:35:10,079
addresses or prefixes i i

810
00:35:10,079 --> 00:35:12,160
don't personally have a great need for

811
00:35:12,160 --> 00:35:13,760
that i don't need to pack

812
00:35:13,760 --> 00:35:16,480
thousands of prefixes into a network

813
00:35:16,480 --> 00:35:18,079
kind of thing

814
00:35:18,079 --> 00:35:21,920
and do something with them um i would be

815
00:35:21,920 --> 00:35:24,000
happy with just putting the tag on each

816
00:35:24,000 --> 00:35:25,520
one particularly if it's not

817
00:35:25,520 --> 00:35:29,520
too long but if someone else has that

818
00:35:29,520 --> 00:35:30,400
need

819
00:35:30,400 --> 00:35:33,040
what i would see is that this could be

820
00:35:33,040 --> 00:35:35,119
accommodated within the same tag by just

821
00:35:35,119 --> 00:35:37,040
saying oh look it's an array

822
00:35:37,040 --> 00:35:40,160
uh and then you're you could do that

823
00:35:40,160 --> 00:35:42,640
um but i'm not personally interested so

824
00:35:42,640 --> 00:35:44,640
you if you want to do this then i

825
00:35:44,640 --> 00:35:46,960
would expect someone to kind of stick

826
00:35:46,960 --> 00:35:49,839
handle it a little bit

827
00:35:51,280 --> 00:35:54,240
and i would like to do an early

828
00:35:54,240 --> 00:35:55,680
allocation

829
00:35:55,680 --> 00:35:58,480
is a oneplus one tag justified for this

830
00:35:58,480 --> 00:36:00,400
so that would be a two byte tag

831
00:36:00,400 --> 00:36:04,000
uh 260 and 261 are in that space

832
00:36:04,000 --> 00:36:06,640
um and if so i'd like to allocate as

833
00:36:06,640 --> 00:36:07,839
soon as possible

834
00:36:07,839 --> 00:36:12,160
next slide i think that's it yeah um and

835
00:36:12,160 --> 00:36:13,839
then there's a notable tag document

836
00:36:13,839 --> 00:36:14,400
which

837
00:36:14,400 --> 00:36:16,079
it was mentioned that this we could

838
00:36:16,079 --> 00:36:17,599
merge together but

839
00:36:17,599 --> 00:36:20,000
well i one way the other i don't care as

840
00:36:20,000 --> 00:36:22,880
long as the early allocation happens

841
00:36:22,880 --> 00:36:25,760
uh already because i don't want to wait

842
00:36:25,760 --> 00:36:28,240
questions

843
00:36:38,839 --> 00:36:41,839
custom

844
00:36:47,680 --> 00:36:49,919
okay

845
00:36:52,839 --> 00:36:55,839
okay

846
00:37:09,200 --> 00:37:11,440
okay i will send the request to iana

847
00:37:11,440 --> 00:37:23,839
send the request to us

848
00:38:05,440 --> 00:38:08,000
okay so in my code um the prefix

849
00:38:08,000 --> 00:38:08,720
consists of

850
00:38:08,720 --> 00:38:10,560
an array a number and then reading

851
00:38:10,560 --> 00:38:11,760
address with

852
00:38:11,760 --> 00:38:14,880
uh with trailing pres uh zeros and

853
00:38:14,880 --> 00:38:16,839
noting what the prefix length is

854
00:38:16,839 --> 00:38:18,000
expected

855
00:38:18,000 --> 00:38:23,200
so to me it's common code so it's free

856
00:38:23,280 --> 00:38:26,320
secondly i think that decoders

857
00:38:26,320 --> 00:38:29,839
um need to have some instructions as to

858
00:38:29,839 --> 00:38:30,880
what to do

859
00:38:30,880 --> 00:38:34,400
if there are bytes missing um

860
00:38:34,400 --> 00:38:37,440
and if that's drop that's okay

861
00:38:37,440 --> 00:38:39,280
but one way or the other they need to be

862
00:38:39,280 --> 00:38:40,560
told what to do if there's

863
00:38:40,560 --> 00:38:44,960
if there's if that's happening um so

864
00:38:44,960 --> 00:38:48,320
i think implementing the trailing zeros

865
00:38:48,320 --> 00:38:49,359
on the receiver

866
00:38:49,359 --> 00:38:53,920
is um not so terrible and if encoders

867
00:38:53,920 --> 00:38:54,560
don't

868
00:38:54,560 --> 00:38:58,000
drop them that's okay it's okay to not

869
00:38:58,000 --> 00:39:01,760
drop the trailing zeros

870
00:39:01,760 --> 00:39:05,359
i don't feel strongly about this by the

871
00:39:12,839 --> 00:39:15,839
way

872
00:39:26,839 --> 00:39:29,839
this

873
00:39:54,839 --> 00:39:57,839
so

874
00:40:08,839 --> 00:40:11,839
okay

875
00:40:12,319 --> 00:40:14,319
a brief question from me again with

876
00:40:14,319 --> 00:40:16,000
chair head off

877
00:40:16,000 --> 00:40:20,079
um on the topic of the existing um

878
00:40:20,079 --> 00:40:23,119
existing tech 260 um

879
00:40:23,119 --> 00:40:26,560
do you intend to add some compatibility

880
00:40:26,560 --> 00:40:28,960
statement that will semantically equate

881
00:40:28,960 --> 00:40:32,560
the newly created tag uh with a portion

882
00:40:32,560 --> 00:40:34,800
of that 260 tag

883
00:40:34,800 --> 00:40:36,800
or would those be really up to the

884
00:40:36,800 --> 00:40:38,079
application to support

885
00:40:38,079 --> 00:40:43,040
either one both or or none of them

886
00:40:46,400 --> 00:40:48,240
i would think that anyone defining a

887
00:40:48,240 --> 00:40:49,839
seabor protocol

888
00:40:49,839 --> 00:40:53,440
based on this would say and you will use

889
00:40:53,440 --> 00:40:54,880
new tag or

890
00:40:54,880 --> 00:40:57,200
you will use old tag and i don't think

891
00:40:57,200 --> 00:41:00,160
they're interchangeable

892
00:41:02,319 --> 00:41:06,079
thanks custom yeah so that's really the

893
00:41:06,079 --> 00:41:08,400
the job of the notable text document

894
00:41:08,400 --> 00:41:10,480
we'll get to in a couple of

895
00:41:10,480 --> 00:41:13,760
minutes to to generate and to hold

896
00:41:13,760 --> 00:41:14,960
explanations on

897
00:41:14,960 --> 00:41:18,839
on how these tags actually

898
00:41:18,839 --> 00:41:22,000
um work together or in this case don't

899
00:41:22,000 --> 00:41:22,880
work

900
00:41:22,880 --> 00:41:25,839
uh together because we don't expect them

901
00:41:25,839 --> 00:41:26,160
to

902
00:41:26,160 --> 00:41:28,640
to turn up in the same environment i

903
00:41:28,640 --> 00:41:29,359
would

904
00:41:29,359 --> 00:41:32,240
prefer to keep the the actual tag

905
00:41:32,240 --> 00:41:33,440
definitions

906
00:41:33,440 --> 00:41:36,640
very crisp so implementers

907
00:41:36,640 --> 00:41:39,119
only get that information they need to

908
00:41:39,119 --> 00:41:40,400
implement this

909
00:41:40,400 --> 00:41:44,800
and if they actually need a tour guide

910
00:41:44,800 --> 00:41:45,520
through the

911
00:41:45,520 --> 00:41:48,400
world of tags that's what the notable

912
00:41:48,400 --> 00:41:49,680
tags document

913
00:41:49,680 --> 00:41:52,960
could add to this

914
00:41:54,960 --> 00:41:58,800
sounds good to me in terms of document

915
00:41:58,800 --> 00:42:00,480
reviewing which is something that will

916
00:42:00,480 --> 00:42:02,960
come up um

917
00:42:02,960 --> 00:42:05,280
who has plans to implement or review

918
00:42:05,280 --> 00:42:07,520
this

919
00:42:08,800 --> 00:42:12,079
um i see carson i take this as a

920
00:42:12,079 --> 00:42:17,839
show of hands

921
00:42:22,319 --> 00:42:25,440
okay that will we'll have

922
00:42:25,440 --> 00:42:26,880
we'll have to get a bit more active

923
00:42:26,880 --> 00:42:29,200
participation also on the

924
00:42:29,200 --> 00:42:32,640
um to to to finalize this eventually

925
00:42:32,640 --> 00:42:36,480
um but with i think we can at least

926
00:42:36,480 --> 00:42:38,160
we can have a good way to continue from

927
00:42:38,160 --> 00:42:40,319
here alexa also in the chat

928
00:42:40,319 --> 00:42:45,839
for in a minute thank you

929
00:42:48,640 --> 00:42:52,240
okay thank you michael

930
00:42:54,400 --> 00:42:56,720
i'd just like to hand back to carsten

931
00:42:56,720 --> 00:43:00,078
for the topic of time forward

932
00:43:08,800 --> 00:43:13,839
sorry i lost the screen again

933
00:43:22,720 --> 00:43:24,839
carsten if you're speaking we can't hear

934
00:43:24,839 --> 00:43:27,839
you

935
00:43:29,599 --> 00:43:32,480
so this is another old acquaintance next

936
00:43:32,480 --> 00:43:34,240
slide please

937
00:43:34,240 --> 00:43:37,280
um so this has been around for a while

938
00:43:37,280 --> 00:43:40,160
and actually it's an active use so since

939
00:43:40,160 --> 00:43:40,720
this is

940
00:43:40,720 --> 00:43:43,520
a tag from the from what used to be the

941
00:43:43,520 --> 00:43:44,319
fcfs

942
00:43:44,319 --> 00:43:47,599
space it no longer is fcf space but at

943
00:43:47,599 --> 00:43:50,000
the time it was fcfs

944
00:43:50,000 --> 00:43:53,280
it's allocated and and people are

945
00:43:53,280 --> 00:43:56,400
using that but now we have some some

946
00:43:56,400 --> 00:43:58,640
additional requirements so one thing

947
00:43:58,640 --> 00:43:59,599
that

948
00:43:59,599 --> 00:44:02,640
we added was a time scale indication

949
00:44:02,640 --> 00:44:05,359
the draft already hinted that this is

950
00:44:05,359 --> 00:44:06,800
about to happen but

951
00:44:06,800 --> 00:44:08,560
i think we now understand what we want

952
00:44:08,560 --> 00:44:09,839
to have there

953
00:44:09,839 --> 00:44:12,240
one can boil the ocean there but we came

954
00:44:12,240 --> 00:44:14,160
up with a pretty simple

955
00:44:14,160 --> 00:44:15,760
thing that's probably proficient for

956
00:44:15,760 --> 00:44:17,599
most applications

957
00:44:17,599 --> 00:44:20,880
and we added clock quality

958
00:44:20,880 --> 00:44:25,119
uncertainty and guarantees

959
00:44:25,119 --> 00:44:28,240
to to address specific

960
00:44:28,240 --> 00:44:32,160
use cases so this is about the time tag

961
00:44:32,160 --> 00:44:33,280
itself

962
00:44:33,280 --> 00:44:35,920
and the the other thing that that was

963
00:44:35,920 --> 00:44:38,079
open in the previous versions

964
00:44:38,079 --> 00:44:40,240
was actually defining a representation

965
00:44:40,240 --> 00:44:41,280
for duration

966
00:44:41,280 --> 00:44:44,720
and period but duration is a time delta

967
00:44:44,720 --> 00:44:46,640
like like five seconds

968
00:44:46,640 --> 00:44:50,000
and the period is an interval so

969
00:44:50,000 --> 00:44:53,359
it's like the start of the meeting

970
00:44:53,359 --> 00:44:56,480
uh up to five minutes into the meeting

971
00:44:56,480 --> 00:44:59,119
that would be a time period

972
00:44:59,119 --> 00:45:02,319
so those are now defined

973
00:45:02,319 --> 00:45:04,560
actually the the time period looks a

974
00:45:04,560 --> 00:45:06,160
little bit different than it

975
00:45:06,160 --> 00:45:09,920
used to uh so um we will need to ask

976
00:45:09,920 --> 00:45:11,599
ayanna to actually update the

977
00:45:11,599 --> 00:45:14,400
the registration for that with respect

978
00:45:14,400 --> 00:45:14,800
to

979
00:45:14,800 --> 00:45:18,640
the the data type assumed but i think

980
00:45:18,640 --> 00:45:20,240
that's a worthwhile

981
00:45:20,240 --> 00:45:24,000
uh change to make

982
00:45:24,000 --> 00:45:26,400
so there is no implementation experience

983
00:45:26,400 --> 00:45:28,960
with duration and period

984
00:45:28,960 --> 00:45:32,079
yes but yet but it's written up so

985
00:45:32,079 --> 00:45:35,119
people can uh start uh

986
00:45:35,119 --> 00:45:38,960
using it uh so at this point

987
00:45:38,960 --> 00:45:42,960
uh i i'm not in a particular rush

988
00:45:42,960 --> 00:45:45,280
uh moving this forward on the other hand

989
00:45:45,280 --> 00:45:47,200
there are protocols

990
00:45:47,200 --> 00:45:50,720
over there in in the reds context

991
00:45:50,720 --> 00:45:52,720
that that could use a slightly more

992
00:45:52,720 --> 00:45:54,240
powerful

993
00:45:54,240 --> 00:45:57,520
time tag so if

994
00:45:57,520 --> 00:46:01,680
if there is if we

995
00:46:01,680 --> 00:46:04,480
see that uh documents that could use

996
00:46:04,480 --> 00:46:05,680
this

997
00:46:05,680 --> 00:46:09,040
become ready for approval

998
00:46:09,040 --> 00:46:11,839
we might want to to finish or at least

999
00:46:11,839 --> 00:46:12,720
snapshot this

1000
00:46:12,720 --> 00:46:16,880
this document as well so that that's my

1001
00:46:16,880 --> 00:46:29,760
status and i'm waiting for input

1002
00:46:29,760 --> 00:46:32,480
comments on on on the document or

1003
00:46:32,480 --> 00:46:34,240
questions that could be answered right

1004
00:46:34,240 --> 00:46:36,479
now

1005
00:46:39,200 --> 00:46:43,680
so there's been quite a bit of ang

1006
00:46:43,920 --> 00:46:46,400
yeah maybe only the obvious things here

1007
00:46:46,400 --> 00:46:47,599
hi this is saying sorry

1008
00:46:47,599 --> 00:46:52,400
um so yeah i'm

1009
00:46:53,280 --> 00:46:56,319
working of course on items that

1010
00:46:56,319 --> 00:46:59,200
direly need this but i think for example

1011
00:46:59,200 --> 00:47:00,480
we have uh

1012
00:47:00,480 --> 00:47:05,359
protocols here in the itf already that

1013
00:47:05,839 --> 00:47:08,319
go beyond the typical annotation that

1014
00:47:08,319 --> 00:47:10,400
this is a posix timestamp

1015
00:47:10,400 --> 00:47:13,760
or that this is the standard um spring

1016
00:47:13,760 --> 00:47:16,560
time and so so they think that's that's

1017
00:47:16,560 --> 00:47:16,960
these

1018
00:47:16,960 --> 00:47:21,760
uh the the uh um attributes carson is

1019
00:47:21,760 --> 00:47:25,520
optional but they really really help in

1020
00:47:25,520 --> 00:47:26,880
practice when you

1021
00:47:26,880 --> 00:47:28,960
want more information about your time

1022
00:47:28,960 --> 00:47:30,960
and every everybody is coming back to

1023
00:47:30,960 --> 00:47:34,000
to not only me but sometimes me and is

1024
00:47:34,000 --> 00:47:34,559
asking

1025
00:47:34,559 --> 00:47:36,640
how do i phrase my timestamp if i need

1026
00:47:36,640 --> 00:47:38,240
this additional information and discuss

1027
00:47:38,240 --> 00:47:39,280
over and over again

1028
00:47:39,280 --> 00:47:41,359
so this is just a just a speaking from

1029
00:47:41,359 --> 00:47:42,480
experience uh

1030
00:47:42,480 --> 00:47:44,800
and this is a side comment uh that this

1031
00:47:44,800 --> 00:47:46,160
is really useful

1032
00:47:46,160 --> 00:47:49,119
when you can cherry pick your your uh

1033
00:47:49,119 --> 00:47:49,760
kind of

1034
00:47:49,760 --> 00:47:51,599
fraction your resolution and other

1035
00:47:51,599 --> 00:47:53,040
attributes you you want to

1036
00:47:53,040 --> 00:47:56,559
attach to your time value and so that's

1037
00:47:56,559 --> 00:47:59,440
successful comment

1038
00:48:00,079 --> 00:48:02,480
thank you

1039
00:48:05,280 --> 00:48:09,440
um more comments

1040
00:48:10,960 --> 00:48:12,400
so there's been quite a bit of

1041
00:48:12,400 --> 00:48:14,240
discussion in in early in

1042
00:48:14,240 --> 00:48:16,880
uh on earlier versions of this on the

1043
00:48:16,880 --> 00:48:18,079
mailing list

1044
00:48:18,079 --> 00:48:20,960
um so given that uh this was announced

1045
00:48:20,960 --> 00:48:21,599
and i

1046
00:48:21,599 --> 00:48:23,680
still think this is a good idea i'd like

1047
00:48:23,680 --> 00:48:25,280
to ask you for a hum

1048
00:48:25,280 --> 00:48:27,920
in uh for um for the adoption of this

1049
00:48:27,920 --> 00:48:28,640
document

1050
00:48:28,640 --> 00:48:31,680
into the sibo working group

1051
00:48:31,680 --> 00:48:34,720
um you sure that you should have see the

1052
00:48:34,720 --> 00:48:38,399
raise hand now

1053
00:48:44,880 --> 00:48:47,760
um please um please use the the tool

1054
00:48:47,760 --> 00:48:48,079
here

1055
00:48:48,079 --> 00:48:50,480
not the not the queue unless you want to

1056
00:48:50,480 --> 00:48:52,559
say something really

1057
00:48:52,559 --> 00:48:56,079
yes it's in the top um

1058
00:48:56,079 --> 00:48:59,839
there's a yellow thing in the top

1059
00:49:00,160 --> 00:49:02,558
but i'm

1060
00:49:03,359 --> 00:49:06,240
okay thank you so i'm seeing 11 11 hands

1061
00:49:06,240 --> 00:49:07,520
from the

1062
00:49:07,520 --> 00:49:10,800
um raised here which is given that we're

1063
00:49:10,800 --> 00:49:13,280
only 30 participants um

1064
00:49:13,280 --> 00:49:16,720
quite a bit

1065
00:49:16,720 --> 00:49:18,960
um just to check uh for the for the

1066
00:49:18,960 --> 00:49:19,839
opposite question

1067
00:49:19,839 --> 00:49:22,720
um any any uh any opposition to you

1068
00:49:22,720 --> 00:49:31,839
having this in the working group

1069
00:49:34,319 --> 00:49:36,800
okay hence hands are demonstratively

1070
00:49:36,800 --> 00:49:38,640
staying down thank you

1071
00:49:38,640 --> 00:49:41,040
um so there will be there will be

1072
00:49:41,040 --> 00:49:42,400
another mail on that topic on the

1073
00:49:42,400 --> 00:49:43,359
mailing list but

1074
00:49:43,359 --> 00:49:46,319
this looks pretty good towards becoming

1075
00:49:46,319 --> 00:49:49,200
a working group document thank you

1076
00:49:49,200 --> 00:49:51,680
um before we go to notable tags which

1077
00:49:51,680 --> 00:49:53,119
are in the sequence of

1078
00:49:53,119 --> 00:49:55,920
slides pretty much the next one um i'd

1079
00:49:55,920 --> 00:49:56,559
like uh

1080
00:49:56,559 --> 00:49:59,280
keo to give to tell us about the topic

1081
00:49:59,280 --> 00:50:00,640
of

1082
00:50:00,640 --> 00:50:02,640
ordered maps which is something that has

1083
00:50:02,640 --> 00:50:04,559
not really been

1084
00:50:04,559 --> 00:50:07,680
an itf activity but he has been kind

1085
00:50:07,680 --> 00:50:08,800
enough to

1086
00:50:08,800 --> 00:50:11,200
come here and present the work that is

1087
00:50:11,200 --> 00:50:12,000
so far

1088
00:50:12,000 --> 00:50:14,079
a document that would just register in

1089
00:50:14,079 --> 00:50:16,720
the specification requirement

1090
00:50:16,720 --> 00:50:20,079
section but would um

1091
00:50:20,079 --> 00:50:21,599
could still profit from the discussion

1092
00:50:21,599 --> 00:50:24,079
here uh thank you for coming here q

1093
00:50:24,079 --> 00:50:28,319
floor is yours okay um thanks very much

1094
00:50:28,319 --> 00:50:32,000
um yeah uh so i'm kia smallwood if if

1095
00:50:32,000 --> 00:50:32,800
you skip to

1096
00:50:32,800 --> 00:50:36,079
the uh second slide um

1097
00:50:36,079 --> 00:50:39,599
so i'm um maintainer of the

1098
00:50:39,599 --> 00:50:42,480
seaboard 2 python library uh originally

1099
00:50:42,480 --> 00:50:44,480
written by alex gronholm

1100
00:50:44,480 --> 00:50:48,240
um in in finland um and i submitted

1101
00:50:48,240 --> 00:50:51,680
a giant patch uh that implemented the

1102
00:50:51,680 --> 00:50:54,400
deterministic encoding

1103
00:50:54,400 --> 00:50:57,440
back when it was um

1104
00:50:57,440 --> 00:51:00,480
when it was called canonical

1105
00:51:00,480 --> 00:51:04,880
and he asked if i wanted to

1106
00:51:04,880 --> 00:51:09,520
maintain the library so i accept it

1107
00:51:09,520 --> 00:51:12,640
it now has like a c back end and other

1108
00:51:12,640 --> 00:51:13,599
nice

1109
00:51:13,599 --> 00:51:19,040
features um next slide please

1110
00:51:20,160 --> 00:51:23,680
um so what we're talking about here

1111
00:51:23,680 --> 00:51:27,040
is um like a

1112
00:51:27,040 --> 00:51:30,640
seabor map um but

1113
00:51:30,640 --> 00:51:34,240
in um in python

1114
00:51:34,240 --> 00:51:37,920
uh there is um

1115
00:51:37,920 --> 00:51:41,520
something called an ordered map which

1116
00:51:41,520 --> 00:51:45,839
is a key to value mapping uh it

1117
00:51:45,839 --> 00:51:48,720
behaves just like a hash table or an

1118
00:51:48,720 --> 00:51:50,240
associative array

1119
00:51:50,240 --> 00:51:53,599
um but the insertion order is important

1120
00:51:53,599 --> 00:51:57,200
um the benefit of this is that

1121
00:51:57,200 --> 00:52:00,400
uh it's gives you efficient iteration

1122
00:52:00,400 --> 00:52:01,760
over all items

1123
00:52:01,760 --> 00:52:05,920
um and uh

1124
00:52:05,920 --> 00:52:08,400
in python at least it's fairly uh fairly

1125
00:52:08,400 --> 00:52:09,440
compact

1126
00:52:09,440 --> 00:52:12,480
uh next slide please

1127
00:52:14,880 --> 00:52:17,280
um so yeah like i said in python it's

1128
00:52:17,280 --> 00:52:18,000
the ordered

1129
00:52:18,000 --> 00:52:21,680
dict class an implementation

1130
00:52:21,680 --> 00:52:23,680
implementation detail of python's

1131
00:52:23,680 --> 00:52:25,040
built-in dict

1132
00:52:25,040 --> 00:52:27,200
is that it it shares the same underlying

1133
00:52:27,200 --> 00:52:29,359
data structures

1134
00:52:29,359 --> 00:52:32,240
originally that was purely coincidence

1135
00:52:32,240 --> 00:52:32,960
but since

1136
00:52:32,960 --> 00:52:36,800
i think python 3.8 that has been

1137
00:52:36,800 --> 00:52:40,480
documented behavior in that the built-in

1138
00:52:40,480 --> 00:52:40,960
dict

1139
00:52:40,960 --> 00:52:44,559
preserves insertion order

1140
00:52:45,040 --> 00:52:47,520
but the difference that order dict has

1141
00:52:47,520 --> 00:52:49,680
is that it's got some extra methods

1142
00:52:49,680 --> 00:52:53,359
that allow you to move things around um

1143
00:52:53,359 --> 00:52:56,319
and also when you're comparing for

1144
00:52:56,319 --> 00:52:58,720
equality the order is important

1145
00:52:58,720 --> 00:53:01,599
whereas for the original dict uh it's

1146
00:53:01,599 --> 00:53:03,599
not important

1147
00:53:03,599 --> 00:53:06,720
uh next slide please

1148
00:53:07,040 --> 00:53:10,319
uh similarly in in javascript

1149
00:53:10,319 --> 00:53:14,800
uh there is a uh a map

1150
00:53:14,800 --> 00:53:17,119
type

1151
00:53:17,130 --> 00:53:18,559
[Music]

1152
00:53:18,559 --> 00:53:23,270
which allows extended key types

1153
00:53:23,270 --> 00:53:24,640
[Music]

1154
00:53:24,640 --> 00:53:27,760
similar to how you can use like a

1155
00:53:27,760 --> 00:53:30,880
python tuple as a as a key um

1156
00:53:30,880 --> 00:53:33,599
you can do a similar thing with a

1157
00:53:33,599 --> 00:53:35,440
javascript's map

1158
00:53:35,440 --> 00:53:37,520
allows better iteration over the keys

1159
00:53:37,520 --> 00:53:39,599
than the built-in object

1160
00:53:39,599 --> 00:53:43,040
um i

1161
00:53:43,040 --> 00:53:46,160
didn't know this um before i

1162
00:53:46,160 --> 00:53:48,400
wrote this presentation but the it's

1163
00:53:48,400 --> 00:53:49,520
possible to get

1164
00:53:49,520 --> 00:53:52,800
key collisions with um object the

1165
00:53:52,800 --> 00:53:55,200
object's prototype

1166
00:53:55,200 --> 00:53:58,640
um next slide please

1167
00:54:01,359 --> 00:54:05,440
um so in ruby um

1168
00:54:05,440 --> 00:54:08,319
the hash is actually ordered by default

1169
00:54:08,319 --> 00:54:08,720
since

1170
00:54:08,720 --> 00:54:11,920
uh 1.9 um

1171
00:54:11,920 --> 00:54:13,839
but it's not used for equality

1172
00:54:13,839 --> 00:54:14,960
comparisons

1173
00:54:14,960 --> 00:54:18,000
um so

1174
00:54:18,000 --> 00:54:21,359
if you were using this in in ruby uh

1175
00:54:21,359 --> 00:54:23,440
it would be up to the author whether you

1176
00:54:23,440 --> 00:54:24,640
felt that the

1177
00:54:24,640 --> 00:54:28,319
um the order of of your hash map

1178
00:54:28,319 --> 00:54:31,599
was important

1179
00:54:31,599 --> 00:54:35,040
um next slide please

1180
00:54:36,160 --> 00:54:38,960
so this originally came to my attention

1181
00:54:38,960 --> 00:54:40,000
when a user

1182
00:54:40,000 --> 00:54:43,280
of uh our library um

1183
00:54:43,280 --> 00:54:46,480
opened an issue saying hey when i

1184
00:54:46,480 --> 00:54:48,559
serialize

1185
00:54:48,559 --> 00:54:51,680
uh ordered

1186
00:54:51,680 --> 00:54:55,040
um they just get serialized as as type

1187
00:54:55,040 --> 00:54:58,480
5 um which is

1188
00:54:58,480 --> 00:55:01,599
um which is just a plain map

1189
00:55:01,599 --> 00:55:05,119
um and

1190
00:55:05,119 --> 00:55:07,599
if you're using a deterministic encoding

1191
00:55:07,599 --> 00:55:09,599
then it reorders those keys

1192
00:55:09,599 --> 00:55:12,720
so the original information is lost

1193
00:55:12,720 --> 00:55:16,720
um it also means that that when decoding

1194
00:55:16,720 --> 00:55:20,240
it becomes a plain dict uh

1195
00:55:20,240 --> 00:55:25,200
when when instantiating the object

1196
00:55:25,200 --> 00:55:28,960
um and so he requested

1197
00:55:28,960 --> 00:55:32,240
you know a way to always decode maps as

1198
00:55:32,240 --> 00:55:35,760
as order dicts but

1199
00:55:35,760 --> 00:55:39,599
i suggested that we use a tag for it

1200
00:55:39,599 --> 00:55:42,000
instead so that we could communicate to

1201
00:55:42,000 --> 00:55:43,680
others that the order of this is

1202
00:55:43,680 --> 00:55:45,520
important

1203
00:55:45,520 --> 00:55:49,040
next slide please

1204
00:55:49,040 --> 00:55:53,200
um so for uh for us to consider

1205
00:55:53,200 --> 00:55:57,280
is um you know how often will this be

1206
00:55:57,280 --> 00:55:58,319
used

1207
00:55:58,319 --> 00:56:01,359
um currently we're proposing

1208
00:56:01,359 --> 00:56:04,720
tag 279 which is a

1209
00:56:04,720 --> 00:56:08,160
as a oneplus 2 um

1210
00:56:08,160 --> 00:56:11,440
and i wrote a spec for it um under my

1211
00:56:11,440 --> 00:56:12,559
github handle

1212
00:56:12,559 --> 00:56:16,960
uh sikhenrae which you can view there

1213
00:56:16,960 --> 00:56:20,319
um i also want to mention um

1214
00:56:20,319 --> 00:56:23,040
this is generally a feature of

1215
00:56:23,040 --> 00:56:24,160
interpreted

1216
00:56:24,160 --> 00:56:28,399
uh you know high-level languages

1217
00:56:28,839 --> 00:56:31,440
um i think

1218
00:56:31,440 --> 00:56:33,839
uh the only compiled language that i've

1219
00:56:33,839 --> 00:56:35,599
seen that that has this thing

1220
00:56:35,599 --> 00:56:38,960
is maybe c plus plus and perhaps nim

1221
00:56:38,960 --> 00:56:42,400
as well um this was also

1222
00:56:42,400 --> 00:56:45,200
merged with a similar proposal from joe

1223
00:56:45,200 --> 00:56:47,760
hildebrand

1224
00:56:47,760 --> 00:56:51,920
to handle javascript maps with

1225
00:56:51,920 --> 00:56:55,839
non-string types and where order was

1226
00:56:55,839 --> 00:56:56,799
important

1227
00:56:56,799 --> 00:57:00,240
so it to kind of improve on

1228
00:57:00,240 --> 00:57:05,759
tag 259 which has already been accepted

1229
00:57:06,480 --> 00:57:12,480
and i think that's it

1230
00:57:12,480 --> 00:57:15,119
thank you um questions comments

1231
00:57:15,119 --> 00:57:16,640
especially as to the

1232
00:57:16,640 --> 00:57:19,040
as to the to the tag length that would

1233
00:57:19,040 --> 00:57:21,599
make sense here and to use cases

1234
00:57:21,599 --> 00:57:27,839
in the in the constrained area

1235
00:57:29,520 --> 00:57:31,520
i see a question in the chat about

1236
00:57:31,520 --> 00:57:32,799
duplicate keys

1237
00:57:32,799 --> 00:57:34,720
and duplicate keys are not supported

1238
00:57:34,720 --> 00:57:36,240
this has it the same

1239
00:57:36,240 --> 00:57:41,839
otherwise the same semantics as a map

1240
00:57:43,599 --> 00:57:45,760
another comment says michael oneplus one

1241
00:57:45,760 --> 00:57:48,640
seems fine uh carson

1242
00:57:48,640 --> 00:57:52,400
yeah so we we have had in the last seven

1243
00:57:52,400 --> 00:57:55,839
years we have had uh various uh requests

1244
00:57:55,839 --> 00:57:58,240
both for ordered maps and for other

1245
00:57:58,240 --> 00:58:01,359
uh multi-maps and and we never followed

1246
00:58:01,359 --> 00:58:02,240
through

1247
00:58:02,240 --> 00:58:05,599
on these and and maybe it's uh time to

1248
00:58:05,599 --> 00:58:08,720
finally uh do this and i actually think

1249
00:58:08,720 --> 00:58:10,000
we need both

1250
00:58:10,000 --> 00:58:13,200
all that multi-maps are really

1251
00:58:13,200 --> 00:58:16,799
needed when you have a traditional tlv

1252
00:58:16,799 --> 00:58:20,319
uh structure and you are trying to to

1253
00:58:20,319 --> 00:58:23,520
represent represent this in in a

1254
00:58:23,520 --> 00:58:26,960
um zebra world in in uh unchanged in an

1255
00:58:26,960 --> 00:58:28,000
unchanged

1256
00:58:28,000 --> 00:58:31,839
uh way because uh tlvs are usually

1257
00:58:31,839 --> 00:58:34,079
allowed to be repeated and then then you

1258
00:58:34,079 --> 00:58:35,680
have the

1259
00:58:35,680 --> 00:58:39,359
multi-map case and other maps

1260
00:58:39,359 --> 00:58:42,160
are useful in a lot of environments

1261
00:58:42,160 --> 00:58:43,119
where

1262
00:58:43,119 --> 00:58:47,680
you actually want to have deterministic

1263
00:58:48,799 --> 00:58:52,720
results but not necessarily in the way

1264
00:58:52,720 --> 00:58:56,079
that the reordering uh done by

1265
00:58:56,079 --> 00:58:59,200
by sibo's deterministic encoding um

1266
00:58:59,200 --> 00:59:02,400
is is providing um

1267
00:59:02,400 --> 00:59:05,839
so for instance in in sdf

1268
00:59:05,839 --> 00:59:08,880
we have definitions of

1269
00:59:08,880 --> 00:59:12,240
of properties and these properties

1270
00:59:12,240 --> 00:59:15,520
are very often in a

1271
00:59:15,520 --> 00:59:18,079
specification that you look at that is

1272
00:59:18,079 --> 00:59:20,079
manually generated

1273
00:59:20,079 --> 00:59:24,000
uh ordered from from most important

1274
00:59:24,000 --> 00:59:27,359
to ancillary or in some way and

1275
00:59:27,359 --> 00:59:30,720
right now there is no way to to actually

1276
00:59:30,720 --> 00:59:32,240
preserve that so that's

1277
00:59:32,240 --> 00:59:34,640
uh one example where where other maps

1278
00:59:34,640 --> 00:59:35,680
come in

1279
00:59:35,680 --> 00:59:38,559
so i i vacate my slot here so jeffrey

1280
00:59:38,559 --> 00:59:41,520
can say something

1281
00:59:43,520 --> 00:59:47,119
okay thanks kirsten uh

1282
00:59:47,119 --> 00:59:49,839
can you hear me

1283
00:59:50,319 --> 00:59:53,440
um this

1284
00:59:53,440 --> 00:59:55,200
seems like it would fit in certain

1285
00:59:55,200 --> 00:59:57,280
places in the web packaging spec

1286
00:59:57,280 --> 00:59:59,040
i'm not sure that we would actually

1287
00:59:59,040 --> 01:00:01,200
switch to it because we're currently

1288
01:00:01,200 --> 01:00:03,040
using ordered maps and and making that

1289
01:00:03,040 --> 01:00:04,640
work but but

1290
01:00:04,640 --> 01:00:07,119
it seems like a useful thing to have had

1291
01:00:07,119 --> 01:00:09,839
to have around

1292
01:00:12,720 --> 01:00:16,960
thank you um comments on anything on the

1293
01:00:16,960 --> 01:00:18,960
on the tag length that would seem

1294
01:00:18,960 --> 01:00:29,839
meaningful to you

1295
01:00:30,799 --> 01:00:32,799
um we are we're running out of time

1296
01:00:32,799 --> 01:00:34,880
right now um

1297
01:00:34,880 --> 01:00:38,400
but i see one more plus one for

1298
01:00:38,400 --> 01:00:42,079
uh for one plus one tags um we had on

1299
01:00:42,079 --> 01:00:44,240
the agenda originally the notable tags

1300
01:00:44,240 --> 01:00:44,640
as well

1301
01:00:44,640 --> 01:00:47,839
and that would need to move um on to an

1302
01:00:47,839 --> 01:00:49,839
interim

1303
01:00:49,839 --> 01:00:52,559
um but we will reinstate interims after

1304
01:00:52,559 --> 01:00:52,960
the

1305
01:00:52,960 --> 01:00:55,359
after this itf so i'm i'm looking

1306
01:00:55,359 --> 01:00:57,119
forward to the discussion there

1307
01:00:57,119 --> 01:01:00,319
francesca handing over to you yes

1308
01:01:00,319 --> 01:01:02,319
just wanted to remind everybody that we

1309
01:01:02,319 --> 01:01:04,160
have scheduled interims

1310
01:01:04,160 --> 01:01:06,960
and i wanted to say thank you to

1311
01:01:06,960 --> 01:01:08,480
everybody who participated

1312
01:01:08,480 --> 01:01:10,880
i really enjoyed working with you all

1313
01:01:10,880 --> 01:01:12,720
and i will still be around

1314
01:01:12,720 --> 01:01:16,160
as a responsible director but yeah

1315
01:01:16,160 --> 01:01:18,400
it's really nice so i just wanted to say

1316
01:01:18,400 --> 01:01:20,330
thank you everybody

1317
01:01:20,330 --> 01:01:22,079
[Music]

1318
01:01:22,079 --> 01:01:26,400
thank you and we're done

1319
01:01:26,400 --> 01:01:28,559
thank you for joining today thank you

1320
01:01:28,559 --> 01:01:30,240
christian and thank you michael for the

1321
01:01:30,240 --> 01:01:32,160
minute

1322
01:01:32,160 --> 01:01:34,880
and see you all back at the gather pet

1323
01:01:34,880 --> 01:01:37,119
back in gather time

1324
01:01:37,119 --> 01:01:39,440
what

1325
01:01:45,880 --> 01:01:48,880
okay

