1
00:00:13,120 --> 00:00:15,280
good morning good afternoon

2
00:00:15,280 --> 00:00:18,480
good evening everyone the

3
00:00:18,480 --> 00:00:22,480
grow meeting starts in one hour

4
00:00:22,480 --> 00:00:25,439
the grow meeting has been postponed for

5
00:00:25,439 --> 00:00:26,160
one hour

6
00:00:26,160 --> 00:00:28,640
to accommodate a scheduling conflict for

7
00:00:28,640 --> 00:00:30,400
one of the presenters

8
00:00:30,400 --> 00:00:33,600
and because to grow agenda allows

9
00:00:33,600 --> 00:00:36,880
to be shorter than two hours so

10
00:00:36,880 --> 00:00:39,440
feel free to get coffee tea all at your

11
00:00:39,440 --> 00:00:40,719
own cost

12
00:00:40,719 --> 00:00:44,000
we start at 2 pm

13
00:00:44,000 --> 00:00:48,800
central europe european time in about 58

14
00:00:56,840 --> 00:00:59,840
minutes

15
00:02:57,920 --> 00:03:01,839
hey job are you gonna start soon

16
00:03:02,480 --> 00:03:05,360
hey jared the grow meeting has been

17
00:03:05,360 --> 00:03:06,879
delayed by one hour

18
00:03:06,879 --> 00:03:09,440
it will start in 56 minutes because of a

19
00:03:09,440 --> 00:03:11,280
scheduling conflict with one of the

20
00:03:11,280 --> 00:03:12,720
presenters

21
00:03:12,720 --> 00:03:14,959
and the fact that the grow agenda was

22
00:03:14,959 --> 00:03:16,400
shorter than the two hour block

23
00:03:16,400 --> 00:03:18,400
allocated to it

24
00:03:18,400 --> 00:03:21,440
so get some water get some tea some

25
00:03:21,440 --> 00:03:23,920
cereal

26
00:03:24,400 --> 00:03:26,480
i'm gonna put up a slide that indicates

27
00:03:26,480 --> 00:03:28,159
that we're starting a little bit later

28
00:03:28,159 --> 00:03:31,519
apologies oh okay got it

29
00:03:31,519 --> 00:03:47,840
all right i'm going back to spring

30
00:55:07,280 --> 00:55:10,480
hi everyone we are going to start in

31
00:55:10,480 --> 00:55:10,880
about

32
00:55:10,880 --> 00:55:14,559
four minutes so this is last call on

33
00:55:14,559 --> 00:55:15,760
coffee

34
00:55:15,760 --> 00:55:21,839
four minutes then we'll start

35
00:55:22,640 --> 00:55:26,319
good morning microphone check

36
00:55:29,119 --> 00:55:32,079
jeffrey i can hear you loud and clear

37
00:55:32,079 --> 00:55:35,839
okay thank you

38
00:58:06,839 --> 00:58:09,839
test

39
00:59:26,960 --> 00:59:30,000
hello everyone welcome to

40
00:59:30,000 --> 00:59:32,319
the global routing operations working

41
00:59:32,319 --> 00:59:34,319
group meeting at ietf

42
00:59:34,319 --> 00:59:37,279
110

43
00:59:40,160 --> 00:59:43,200
i think today's meeting was originally

44
00:59:43,200 --> 00:59:45,200
envisioned to take place in prague but

45
00:59:45,200 --> 00:59:46,640
unfortunately all of us

46
00:59:46,640 --> 00:59:49,760
are gathering in our houses wherever

47
00:59:49,760 --> 00:59:52,079
that is on this planet

48
00:59:52,079 --> 00:59:54,640
that will not take away from the joy of

49
00:59:54,640 --> 00:59:56,319
this meeting

50
00:59:56,319 --> 00:59:58,880
but before we start i would like to draw

51
00:59:58,880 --> 01:00:00,880
attention to the itf

52
01:00:00,880 --> 01:00:04,240
note well this is a reminder of itf

53
01:00:04,240 --> 01:00:05,520
policies that are

54
01:00:05,520 --> 01:00:08,000
in effect on various topics such as

55
01:00:08,000 --> 01:00:08,720
patents

56
01:00:08,720 --> 01:00:11,839
or code of conduct

57
01:00:11,839 --> 01:00:13,839
if you're not familiar with the itf note

58
01:00:13,839 --> 01:00:15,760
well please review

59
01:00:15,760 --> 01:00:18,160
the reference documents at a later point

60
01:00:18,160 --> 01:00:20,640
in time

61
01:00:22,720 --> 01:00:25,680
as mentioned before we started one hour

62
01:00:25,680 --> 01:00:26,319
later

63
01:00:26,319 --> 01:00:28,400
this was because there was a scheduling

64
01:00:28,400 --> 01:00:29,839
conflict uh

65
01:00:29,839 --> 01:00:32,079
that we could not resolve at the last

66
01:00:32,079 --> 01:00:34,000
minute but it appeared to

67
01:00:34,000 --> 01:00:36,079
be a simpler solution to just start this

68
01:00:36,079 --> 01:00:38,559
meeting one hour later

69
01:00:38,559 --> 01:00:42,200
in today's meeting we're gonna cover the

70
01:00:42,200 --> 01:00:45,359
administrativia some bmp

71
01:00:45,359 --> 01:00:47,680
and young related reports from the

72
01:00:47,680 --> 01:00:49,280
hackathon

73
01:00:49,280 --> 01:00:51,839
a new initiative called bmp seamless

74
01:00:51,839 --> 01:00:52,880
session

75
01:00:52,880 --> 01:00:57,440
and a update on the internet draft

76
01:00:57,440 --> 01:01:01,040
about as path prepending

77
01:01:01,040 --> 01:01:04,400
if you have questions please

78
01:01:04,400 --> 01:01:08,839
drop them in the chat or raise your

79
01:01:08,839 --> 01:01:11,839
hands

80
01:01:12,319 --> 01:01:16,558
in terms of staff completeness

81
01:01:16,640 --> 01:01:19,680
christopher are you around

82
01:01:19,680 --> 01:01:25,520
yes you are

83
01:01:25,520 --> 01:01:28,160
uh so for the administrative side of

84
01:01:28,160 --> 01:01:28,640
things

85
01:01:28,640 --> 01:01:32,000
we need a minute taker is there a

86
01:01:32,000 --> 01:01:32,880
volunteer

87
01:01:32,880 --> 01:01:36,000
who wants to contribute a

88
01:01:36,000 --> 01:01:38,079
summary of what is being discussed on

89
01:01:38,079 --> 01:01:53,839
the ether path

90
01:01:54,319 --> 01:01:56,799
i think i can probably do some etherpad

91
01:01:56,799 --> 01:01:59,680
i just need to find it

92
01:02:02,319 --> 01:02:04,720
it's really easy you go to itf.org you

93
01:02:04,720 --> 01:02:06,000
don't click the live

94
01:02:06,000 --> 01:02:08,880
but you click itf 110 online and then

95
01:02:08,880 --> 01:02:10,640
you don't click agenda

96
01:02:10,640 --> 01:02:14,000
but click agenda html and from there you

97
01:02:14,000 --> 01:02:14,480
can

98
01:02:14,480 --> 01:02:21,839
easily go to

99
01:02:24,480 --> 01:02:28,559
you forgot where you raise your left

100
01:02:32,839 --> 01:02:34,880
foot

101
01:02:34,880 --> 01:02:37,440
all right so we got a minute taker in

102
01:02:37,440 --> 01:02:39,839
the shape of christopher morrow

103
01:02:39,839 --> 01:02:43,200
uh and then i will volunteer to monitor

104
01:02:43,200 --> 01:02:48,880
the jabber room um

105
01:02:48,880 --> 01:02:52,079
oh an update about the charter

106
01:02:52,079 --> 01:02:55,359
uh at last at the last meeting we

107
01:02:55,359 --> 01:02:58,319
uh discussed that a charter refresh was

108
01:02:58,319 --> 01:03:00,000
requested by the area

109
01:03:00,000 --> 01:03:03,359
area director and we uh

110
01:03:03,359 --> 01:03:06,000
faithfully labored to produce an update

111
01:03:06,000 --> 01:03:06,480
to

112
01:03:06,480 --> 01:03:08,640
hopefully align the work of this working

113
01:03:08,640 --> 01:03:10,880
group more with what was described

114
01:03:10,880 --> 01:03:14,799
in the system and this um

115
01:03:14,799 --> 01:03:16,960
charter update was discussed in the

116
01:03:16,960 --> 01:03:18,319
working group and

117
01:03:18,319 --> 01:03:19,760
to me it appeared that most in the

118
01:03:19,760 --> 01:03:21,359
working group had

119
01:03:21,359 --> 01:03:24,079
an idea of what the update meant and

120
01:03:24,079 --> 01:03:25,760
what this working group does

121
01:03:25,760 --> 01:03:27,839
but when it was brought forward to the

122
01:03:27,839 --> 01:03:30,559
iasg refuse stage

123
01:03:30,559 --> 01:03:33,599
a lot of questions came back where

124
01:03:33,599 --> 01:03:36,079
apparently

125
01:03:36,559 --> 01:03:40,319
there is still some work to be done to

126
01:03:40,319 --> 01:03:43,359
make this charter understandable not

127
01:03:43,359 --> 01:03:45,200
just by the working group participants

128
01:03:45,200 --> 01:03:46,720
but also by

129
01:03:46,720 --> 01:03:49,520
people who review our output so i have

130
01:03:49,520 --> 01:03:51,599
it on my to-do list to go over

131
01:03:51,599 --> 01:03:54,559
the feedback from the ist review round

132
01:03:54,559 --> 01:03:56,480
and incorporate that feedback

133
01:03:56,480 --> 01:03:59,760
into a revised charter proposal

134
01:03:59,760 --> 01:04:02,160
which i'll then share with the working

135
01:04:02,160 --> 01:04:03,440
group mailing list

136
01:04:03,440 --> 01:04:06,400
and if people feel that that is a good

137
01:04:06,400 --> 01:04:07,680
update then we'll

138
01:04:07,680 --> 01:04:10,880
try again with ist so

139
01:04:10,880 --> 01:04:13,280
the report the update is that the

140
01:04:13,280 --> 01:04:14,400
charter update

141
01:04:14,400 --> 01:04:17,039
is an ongoing process and might take a

142
01:04:17,039 --> 01:04:19,760
few more months

143
01:04:20,640 --> 01:04:24,480
other administrative things we need to

144
01:04:24,839 --> 01:04:27,839
discuss

145
01:04:28,160 --> 01:04:30,799
i think that's it for now um i'm gonna

146
01:04:30,799 --> 01:04:33,520
hand over the microphone to thomas graff

147
01:04:33,520 --> 01:04:36,960
who is gonna share with us an update um

148
01:04:36,960 --> 01:04:41,839
the bmp yang hackathon

149
01:04:49,119 --> 01:04:53,280
ok can you see and hear me

150
01:04:53,280 --> 01:04:57,440
we can see and hear you take it away and

151
01:04:57,440 --> 01:05:00,720
how about the screen sharing

152
01:05:05,280 --> 01:05:08,480
i think i requested you just need to

153
01:05:08,480 --> 01:05:11,119
grant and then it should work

154
01:05:11,119 --> 01:05:14,400
yes excellent

155
01:05:20,240 --> 01:05:23,839
okay can you see the screen

156
01:05:26,240 --> 01:05:29,280
yes we can thank you oh excellent then i

157
01:05:29,280 --> 01:05:30,400
will start with

158
01:05:30,400 --> 01:05:33,200
the first slide deck on blastrix itf

159
01:05:33,200 --> 01:05:37,200
1010 hackathon so i'm representing here

160
01:05:37,200 --> 01:05:37,920
the bmp

161
01:05:37,920 --> 01:05:41,200
and the young group so

162
01:05:41,200 --> 01:05:45,440
in the hackathon on the bmp part

163
01:05:45,440 --> 01:05:48,319
we were focusing this time solely on

164
01:05:48,319 --> 01:05:49,119
performance

165
01:05:49,119 --> 01:05:51,920
and not on functionality so here our

166
01:05:51,920 --> 01:05:54,720
interest was basically we want to see

167
01:05:54,720 --> 01:05:57,839
how bmp adjacency in

168
01:05:57,839 --> 01:06:02,799
out locally including path working tlb

169
01:06:02,799 --> 01:06:05,119
is affecting the the cpn memory

170
01:06:05,119 --> 01:06:06,640
consumption

171
01:06:06,640 --> 01:06:09,680
but also uh when

172
01:06:09,680 --> 01:06:11,920
congestion on the network is happening

173
01:06:11,920 --> 01:06:12,880
so uh

174
01:06:12,880 --> 01:06:15,680
bgp start sending a lot of updates and

175
01:06:15,680 --> 01:06:17,039
withdrawals

176
01:06:17,039 --> 01:06:20,079
back and forth if on such

177
01:06:20,079 --> 01:06:23,440
circumstances we can ensure that the hip

178
01:06:23,440 --> 01:06:25,359
which is collected through bmp route

179
01:06:25,359 --> 01:06:26,799
monitoring

180
01:06:26,799 --> 01:06:29,760
uh is always like the mirror drip is

181
01:06:29,760 --> 01:06:30,240
always

182
01:06:30,240 --> 01:06:33,760
representing the same state as we have

183
01:06:33,760 --> 01:06:36,880
on the network and last but not least we

184
01:06:36,880 --> 01:06:38,640
also want to understand

185
01:06:38,640 --> 01:06:42,480
if uh router in transit

186
01:06:42,480 --> 01:06:45,920
if pmp is enabled or not uh what the

187
01:06:45,920 --> 01:06:47,920
difference is in terms of bgp

188
01:06:47,920 --> 01:06:51,599
without propagation delay so that's from

189
01:06:51,599 --> 01:06:52,000
the

190
01:06:52,000 --> 01:06:55,760
bmp part where on young push

191
01:06:55,760 --> 01:06:58,240
briefly we are focusing on an open

192
01:06:58,240 --> 01:07:00,079
source implementation

193
01:07:00,079 --> 01:07:03,680
on these two drafts here and

194
01:07:03,680 --> 01:07:07,359
focusing there also on performance tests

195
01:07:07,359 --> 01:07:09,599
this was the software we've been using

196
01:07:09,599 --> 01:07:10,880
throughout the

197
01:07:10,880 --> 01:07:14,640
hackathon that's the the network

198
01:07:14,640 --> 01:07:16,960
so on the very left hand side we had

199
01:07:16,960 --> 01:07:17,920
extra v2p

200
01:07:17,920 --> 01:07:20,720
generating the the bgp updates and

201
01:07:20,720 --> 01:07:21,839
withdrawals

202
01:07:21,839 --> 01:07:25,280
we had here 61 router being a route

203
01:07:25,280 --> 01:07:27,680
reflector

204
01:07:27,680 --> 01:07:30,799
another round reflector and 62 basically

205
01:07:30,799 --> 01:07:32,079
a provided edge

206
01:07:32,079 --> 01:07:35,200
router receiving and installing the

207
01:07:35,200 --> 01:07:35,760
rounds

208
01:07:35,760 --> 01:07:39,440
and basically here in orange at various

209
01:07:39,440 --> 01:07:40,000
points

210
01:07:40,000 --> 01:07:43,039
we were enabling bmp

211
01:07:43,039 --> 01:07:46,640
either adjacency out or in pre-post

212
01:07:46,640 --> 01:07:47,440
policy

213
01:07:47,440 --> 01:07:51,039
or also local hip coverage and

214
01:07:51,039 --> 01:07:56,240
and basically doing the described tests

215
01:07:56,240 --> 01:07:59,359
so what we achieved was this time uh

216
01:07:59,359 --> 01:08:01,359
on the lab environment that we have now

217
01:08:01,359 --> 01:08:03,440
a fully automated test setup

218
01:08:03,440 --> 01:08:07,760
in terms of generating the sequenced pgp

219
01:08:07,760 --> 01:08:10,960
updates and also initializing the vmp

220
01:08:10,960 --> 01:08:12,880
the right way how you want to do it

221
01:08:12,880 --> 01:08:17,198
and then basically collect bmp metrics

222
01:08:17,198 --> 01:08:19,600
from the network and through young push

223
01:08:19,600 --> 01:08:20,640
the cpu

224
01:08:20,640 --> 01:08:25,839
and memory bgp process usage

225
01:08:26,158 --> 01:08:29,839
so we can monitor basically prefix loss

226
01:08:29,839 --> 01:08:33,120
as a metric loss in bmp

227
01:08:33,120 --> 01:08:35,759
and cpu memory usage we can go down to

228
01:08:35,759 --> 01:08:36,839
bgb process

229
01:08:36,839 --> 01:08:39,920
level uh as a next step for the next

230
01:08:39,920 --> 01:08:41,040
hackathon

231
01:08:41,040 --> 01:08:43,120
we defined that we want to do the same

232
01:08:43,120 --> 01:08:45,279
tests also in a multi-vendor environment

233
01:08:45,279 --> 01:08:46,238
and

234
01:08:46,238 --> 01:08:49,439
cover different operating systems

235
01:08:49,439 --> 01:08:52,080
and also we want to work on some

236
01:08:52,080 --> 01:08:55,439
timestamping approval

237
01:08:56,158 --> 01:08:59,198
this is uh basically what we did on the

238
01:08:59,198 --> 01:09:00,319
udp notif

239
01:09:00,319 --> 01:09:03,520
side uh here mainly the focus was

240
01:09:03,520 --> 01:09:04,640
implementing

241
01:09:04,640 --> 01:09:07,759
a data collection library

242
01:09:07,759 --> 01:09:10,880
which was written in c and also a mockup

243
01:09:10,880 --> 01:09:12,560
producer

244
01:09:12,560 --> 01:09:16,319
both supporting segmentation in udp

245
01:09:16,319 --> 01:09:18,839
and it has been integrated into the

246
01:09:18,839 --> 01:09:20,158
pmact

247
01:09:20,158 --> 01:09:24,560
open source network data collection

248
01:09:24,560 --> 01:09:26,799
that was a test message we generated

249
01:09:26,799 --> 01:09:28,319
into apache kafka

250
01:09:28,319 --> 01:09:32,799
for young push and this was a test

251
01:09:32,799 --> 01:09:35,279
performance setup we did with the young

252
01:09:35,279 --> 01:09:37,600
push

253
01:09:37,759 --> 01:09:40,238
very impressive the throughput we

254
01:09:40,238 --> 01:09:41,679
achieved

255
01:09:41,679 --> 01:09:44,080
with young push i think this is one of

256
01:09:44,080 --> 01:09:46,640
the most fastest implementation

257
01:09:46,640 --> 01:09:50,080
currently available so on one core

258
01:09:50,080 --> 01:09:53,198
with 500 000 messages

259
01:09:53,198 --> 01:09:57,600
we were achieving up to 10 11 gigabits

260
01:09:57,600 --> 01:10:02,159
per second with the jumbo frames

261
01:10:02,159 --> 01:10:06,640
uh so here basically the test setup

262
01:10:06,640 --> 01:10:09,760
from the network side so uh as i

263
01:10:09,760 --> 01:10:12,000
mentioned we enable bmp at various

264
01:10:12,000 --> 01:10:13,040
points and we're

265
01:10:13,040 --> 01:10:16,159
measuring the effect of the bmp what was

266
01:10:16,159 --> 01:10:16,560
really

267
01:10:16,560 --> 01:10:19,520
impressive was that even though we had

268
01:10:19,520 --> 01:10:20,480
congestion

269
01:10:20,480 --> 01:10:23,040
so a lot of uh we were generating up to

270
01:10:23,040 --> 01:10:25,440
one million rounds on the network

271
01:10:25,440 --> 01:10:28,159
that under no circumstance we had loss

272
01:10:28,159 --> 01:10:29,040
of metrics

273
01:10:29,040 --> 01:10:32,719
so in all cases basically the hip state

274
01:10:32,719 --> 01:10:36,159
could be achieved that's

275
01:10:36,159 --> 01:10:39,199
uh one good notice here

276
01:10:39,199 --> 01:10:41,360
the other one is in regarding php

277
01:10:41,360 --> 01:10:43,280
propagation delay we

278
01:10:43,280 --> 01:10:46,000
discovered that the accuracy of the

279
01:10:46,000 --> 01:10:47,040
timestamp being

280
01:10:47,040 --> 01:10:51,600
was not accurate enough so therefore we

281
01:10:51,600 --> 01:10:52,239
could not

282
01:10:52,239 --> 01:10:56,159
draw final conclusions how much

283
01:10:56,159 --> 01:10:59,199
impact bmp brings to the bgp propagation

284
01:10:59,199 --> 01:11:00,080
delay

285
01:11:00,080 --> 01:11:02,080
so there we're going to improve the time

286
01:11:02,080 --> 01:11:04,560
stamping a currency and we will gonna do

287
01:11:04,560 --> 01:11:05,280
the

288
01:11:05,280 --> 01:11:09,920
tests in the next itf hackathon

289
01:11:10,560 --> 01:11:13,679
here are some examples on

290
01:11:13,679 --> 01:11:16,960
uh on the tests we did so the test setup

291
01:11:16,960 --> 01:11:19,600
generated 1 million bgp vpn before

292
01:11:19,600 --> 01:11:21,360
unicast passed

293
01:11:21,360 --> 01:11:23,440
and it was advertising it as fast as

294
01:11:23,440 --> 01:11:24,480
possible

295
01:11:24,480 --> 01:11:28,320
to 10 piers and as you can see

296
01:11:28,320 --> 01:11:31,520
here on the very left hand side the cpu

297
01:11:31,520 --> 01:11:32,640
usage

298
01:11:32,640 --> 01:11:36,239
uh basically during the bgp propagation

299
01:11:36,239 --> 01:11:37,040
period

300
01:11:37,040 --> 01:11:40,080
whenever bmp was off or on did not

301
01:11:40,080 --> 01:11:41,280
change

302
01:11:41,280 --> 01:11:44,400
but later on basically when the

303
01:11:44,400 --> 01:11:47,520
propagation was through and then the

304
01:11:47,520 --> 01:11:50,640
basically the cpu usage back

305
01:11:50,640 --> 01:11:54,480
back down to to normal the the export

306
01:11:54,480 --> 01:11:57,679
started uh to do to perform

307
01:11:57,679 --> 01:11:59,840
and during the export period we

308
01:11:59,840 --> 01:12:00,960
basically

309
01:12:00,960 --> 01:12:04,719
had uh the same uh amount of peak

310
01:12:04,719 --> 01:12:07,920
that we had during the pgp propagation

311
01:12:07,920 --> 01:12:10,000
period of time

312
01:12:10,000 --> 01:12:13,040
in regards of memory consumption we can

313
01:12:13,040 --> 01:12:13,440
see

314
01:12:13,440 --> 01:12:16,640
that once the prefixes are being

315
01:12:16,640 --> 01:12:20,640
propagated uh initially we are consuming

316
01:12:20,640 --> 01:12:21,679
more

317
01:12:21,679 --> 01:12:25,120
memory on the pgp process but throughout

318
01:12:25,120 --> 01:12:29,440
the test cycle that did not change

319
01:12:30,000 --> 01:12:33,360
that was on the route reflector and

320
01:12:33,360 --> 01:12:36,239
the same we got experience also on the

321
01:12:36,239 --> 01:12:37,199
provider

322
01:12:37,199 --> 01:12:40,239
edge router with the same

323
01:12:40,239 --> 01:12:43,360
hips enabled so

324
01:12:43,360 --> 01:12:46,320
no change in there

325
01:12:47,280 --> 01:12:50,800
then we did another test uh basically on

326
01:12:50,800 --> 01:12:52,480
the heart reflected verb

327
01:12:52,480 --> 01:12:55,920
while propagating the the b2p prefixes

328
01:12:55,920 --> 01:12:58,560
we were flapping the vmp

329
01:12:58,560 --> 01:13:02,080
and here uh basically we could saw

330
01:13:02,080 --> 01:13:06,000
that uh there are no impact in memory

331
01:13:06,000 --> 01:13:09,199
nor in cpu usage when the mp session is

332
01:13:09,199 --> 01:13:11,759
flapping

333
01:13:13,360 --> 01:13:15,840
so what we learned this time in the

334
01:13:15,840 --> 01:13:17,520
hackathon

335
01:13:17,520 --> 01:13:19,600
it's basically since it's the five fifth

336
01:13:19,600 --> 01:13:21,600
time we were

337
01:13:21,600 --> 01:13:24,159
more prepared than we were before uh

338
01:13:24,159 --> 01:13:25,280
testosterone

339
01:13:25,280 --> 01:13:27,679
test automation was very important and

340
01:13:27,679 --> 01:13:28,400
also

341
01:13:28,400 --> 01:13:31,040
um being connected throughout the

342
01:13:31,040 --> 01:13:33,760
hackathon with slack and damage teams

343
01:13:33,760 --> 01:13:36,480
and of course since it's all virtual we

344
01:13:36,480 --> 01:13:40,000
all miss beers and cocktails afterwards

345
01:13:40,000 --> 01:13:43,760
many thanks to all the participants

346
01:13:43,760 --> 01:13:47,840
any questions on the test results

347
01:13:50,410 --> 01:13:53,680
[Music]

348
01:13:54,880 --> 01:13:58,640
i see jeffrey stepped forward to

349
01:13:58,640 --> 01:14:02,239
the queue sure has jeffrey

350
01:14:02,239 --> 01:14:04,719
thank you thomas uh first a question

351
01:14:04,719 --> 01:14:06,159
about the

352
01:14:06,159 --> 01:14:08,719
test methodology for the reflector on

353
01:14:08,719 --> 01:14:10,480
the slide there you're showing that

354
01:14:10,480 --> 01:14:13,280
bmp is kicking in much later than the

355
01:14:13,280 --> 01:14:14,960
bgp convergence

356
01:14:14,960 --> 01:14:18,320
is that because bmp is being enabled

357
01:14:18,320 --> 01:14:20,159
after the fact or is there actually a

358
01:14:20,159 --> 01:14:20,880
gap there

359
01:14:20,880 --> 01:14:23,520
where the system's converging in some

360
01:14:23,520 --> 01:14:24,719
fashion

361
01:14:24,719 --> 01:14:28,080
uh actually the the implementation

362
01:14:28,080 --> 01:14:31,440
looks at the cpu usage and at that point

363
01:14:31,440 --> 01:14:32,159
in time

364
01:14:32,159 --> 01:14:34,880
when the congestion is is happening on

365
01:14:34,880 --> 01:14:36,719
bgp

366
01:14:36,719 --> 01:14:40,400
the cpu level is is higher than normal

367
01:14:40,400 --> 01:14:42,239
and therefore the export is being

368
01:14:42,239 --> 01:14:44,718
delayed

369
01:14:45,520 --> 01:14:47,360
okay so the implementation in question

370
01:14:47,360 --> 01:14:48,960
is choosing the weight

371
01:14:48,960 --> 01:14:53,440
and defers advertising bmp exactly

372
01:14:53,440 --> 01:14:56,320
okay thank you and my second thing is an

373
01:14:56,320 --> 01:14:58,640
observation about the time stamping

374
01:14:58,640 --> 01:15:00,239
i certainly cannot speak for other

375
01:15:00,239 --> 01:15:01,840
people's implementations

376
01:15:01,840 --> 01:15:05,199
uh no junos has second level granularity

377
01:15:05,199 --> 01:15:06,880
for its timestamps it does not

378
01:15:06,880 --> 01:15:08,320
waste the extra space to keep know

379
01:15:08,320 --> 01:15:10,719
something no less than that

380
01:15:10,719 --> 01:15:13,440
we put in effectively a increasing

381
01:15:13,440 --> 01:15:14,640
counter in the

382
01:15:14,640 --> 01:15:17,280
uh additional field to make sure that if

383
01:15:17,280 --> 01:15:18,640
we have more than one event within the

384
01:15:18,640 --> 01:15:19,360
same second

385
01:15:19,360 --> 01:15:21,360
that you get something of no use you

386
01:15:21,360 --> 01:15:23,360
know the sequencing

387
01:15:23,360 --> 01:15:27,040
but so the the two observations are that

388
01:15:27,040 --> 01:15:28,320
the timestamp

389
01:15:28,320 --> 01:15:29,679
will be closer to second level

390
01:15:29,679 --> 01:15:31,280
granularity for at least one

391
01:15:31,280 --> 01:15:32,719
implementation and the second

392
01:15:32,719 --> 01:15:34,480
observation is that

393
01:15:34,480 --> 01:15:37,280
the time stamping is going to be

394
01:15:37,280 --> 01:15:39,760
somewhat separated from the bgp events

395
01:15:39,760 --> 01:15:42,080
in some cases based on pipelining so if

396
01:15:42,080 --> 01:15:43,120
you just think about

397
01:15:43,120 --> 01:15:45,040
the time it takes for a packet to be

398
01:15:45,040 --> 01:15:47,440
placed on the wire by a transmitter

399
01:15:47,440 --> 01:15:50,320
and maybe tcp delays before it's

400
01:15:50,320 --> 01:15:52,719
processed in the queue uh potentially

401
01:15:52,719 --> 01:15:55,920
with some additional uh wiggle room

402
01:15:55,920 --> 01:15:58,400
you know within a second granularity as

403
01:15:58,400 --> 01:15:59,040
is being run

404
01:15:59,040 --> 01:16:02,400
through the pgp pipeline

405
01:16:02,880 --> 01:16:05,760
okay thanks thank you very much for the

406
01:16:05,760 --> 01:16:06,480
input we

407
01:16:06,480 --> 01:16:08,480
take that as a notice for the next

408
01:16:08,480 --> 01:16:10,959
tested

409
01:16:16,239 --> 01:16:18,640
and we do saw different vendor

410
01:16:18,640 --> 01:16:20,480
implementations have

411
01:16:20,480 --> 01:16:23,920
different implementations on on

412
01:16:23,920 --> 01:16:27,360
time stamping and we noticed that the

413
01:16:27,360 --> 01:16:30,159
juniper juno has does both seconds and

414
01:16:30,159 --> 01:16:32,879
milliseconds

415
01:16:37,600 --> 01:16:48,400
great any more questions or remarks

416
01:16:48,400 --> 01:16:50,239
if there are no additional questions at

417
01:16:50,239 --> 01:16:51,440
this point in time

418
01:16:51,440 --> 01:16:54,719
i would like to invite you to

419
01:16:54,719 --> 01:16:57,440
uh continue with the bmp seamless

420
01:16:57,440 --> 01:16:58,080
session

421
01:16:58,080 --> 01:17:01,920
uh presentation sure then i will live

422
01:17:01,920 --> 01:17:06,159
over to the second slide deck in here

423
01:17:06,400 --> 01:17:09,520
can you see the slides

424
01:17:09,520 --> 01:17:13,600
yes we can perfect so

425
01:17:13,600 --> 01:17:17,440
i will start since i'm representing here

426
01:17:17,440 --> 01:17:18,560
swiss comma give a

427
01:17:18,560 --> 01:17:20,640
short overview where we stand currently

428
01:17:20,640 --> 01:17:22,560
on network telemetry

429
01:17:22,560 --> 01:17:25,760
data collection i think probably the

430
01:17:25,760 --> 01:17:27,040
easiest is to look

431
01:17:27,040 --> 01:17:29,360
on the very right hand side the three

432
01:17:29,360 --> 01:17:30,800
graphs

433
01:17:30,800 --> 01:17:33,280
uh basically the first one shows how

434
01:17:33,280 --> 01:17:33,920
much

435
01:17:33,920 --> 01:17:36,640
how many messages per second we are

436
01:17:36,640 --> 01:17:38,480
producing in terms of ip

437
01:17:38,480 --> 01:17:42,000
fix the second one in yang push

438
01:17:42,000 --> 01:17:46,080
and the third one into uh bmp

439
01:17:46,080 --> 01:17:49,120
and as you observe that bmp is quite

440
01:17:49,120 --> 01:17:51,760
bursty and if you look at the count

441
01:17:51,760 --> 01:17:52,640
basically

442
01:17:52,640 --> 01:17:55,760
uh if you have a burst

443
01:17:55,760 --> 01:17:58,640
that you can easily have been higher

444
01:17:58,640 --> 01:17:58,960
than

445
01:17:58,960 --> 01:18:02,000
the highly fixed data collection

446
01:18:02,000 --> 01:18:04,800
so from an evolution point of view i can

447
01:18:04,800 --> 01:18:05,199
say

448
01:18:05,199 --> 01:18:08,320
that as the end of last year we were

449
01:18:08,320 --> 01:18:10,159
collecting roughly two and a half

450
01:18:10,159 --> 01:18:12,480
thousand uh from two and a half thousand

451
01:18:12,480 --> 01:18:13,840
devices

452
01:18:13,840 --> 01:18:16,239
uh network telemetry delta with bmpi

453
01:18:16,239 --> 01:18:17,760
prefix and yank push

454
01:18:17,760 --> 01:18:21,199
and we had up to one million uh messages

455
01:18:21,199 --> 01:18:21,920
per second

456
01:18:21,920 --> 01:18:24,840
in peak and we are considering uh

457
01:18:24,840 --> 01:18:26,159
onboarding

458
01:18:26,159 --> 01:18:29,199
up to 40 000 devices this year

459
01:18:29,199 --> 01:18:32,000
and then with up to 10 million message

460
01:18:32,000 --> 01:18:33,199
per seconds

461
01:18:33,199 --> 01:18:36,400
and from this 40 000 most of them

462
01:18:36,400 --> 01:18:40,400
38 000 we will have bmp enabled

463
01:18:40,400 --> 01:18:44,800
so if we look at

464
01:18:44,800 --> 01:18:46,560
from this two and a half thousand

465
01:18:46,560 --> 01:18:47,920
devices only

466
01:18:47,920 --> 01:18:51,600
300 currently have bmp enabled and those

467
01:18:51,600 --> 01:18:54,800
300 devices contribute basically

468
01:18:54,800 --> 01:18:58,400
in peak to 600 thousands messages per

469
01:18:58,400 --> 01:19:00,000
second but in average

470
01:19:00,000 --> 01:19:02,560
very low 8 000 messages per second so

471
01:19:02,560 --> 01:19:03,360
that

472
01:19:03,360 --> 01:19:06,480
gives you more or less a picture uh

473
01:19:06,480 --> 01:19:09,520
how much data is being exposed from

474
01:19:09,520 --> 01:19:12,239
from the network and the burstiness of

475
01:19:12,239 --> 01:19:12,960
bmp

476
01:19:12,960 --> 01:19:17,440
especially with the adjacent silicon

477
01:19:17,440 --> 01:19:20,159
and this is the point which we tried to

478
01:19:20,159 --> 01:19:22,880
address in this draft and or

479
01:19:22,880 --> 01:19:26,159
basically to optimize so uh

480
01:19:26,159 --> 01:19:29,280
one angle is we wouldn't we want to try

481
01:19:29,280 --> 01:19:33,440
to avoid data duplication and

482
01:19:33,440 --> 01:19:36,400
uh the reason why we want to avoid data

483
01:19:36,400 --> 01:19:38,480
duplication is because

484
01:19:38,480 --> 01:19:42,159
in the b2p network basically the amount

485
01:19:42,159 --> 01:19:44,800
of pgp pass or in a service provider

486
01:19:44,800 --> 01:19:46,719
steadily increasing

487
01:19:46,719 --> 01:19:50,000
but also on the other hand thanks to the

488
01:19:50,000 --> 01:19:53,120
new support of emp now results

489
01:19:53,120 --> 01:19:56,640
are json series in adjacency out also

490
01:19:56,640 --> 01:19:57,360
locally

491
01:19:57,360 --> 01:20:00,080
has been it's been supported so

492
01:20:00,080 --> 01:20:01,199
therefore

493
01:20:01,199 --> 01:20:04,400
uh basically more and more matrix

494
01:20:04,400 --> 01:20:07,360
are exposed and those matrix thanks to

495
01:20:07,360 --> 01:20:08,960
the tlvs

496
01:20:08,960 --> 01:20:11,199
contain more and more additional

497
01:20:11,199 --> 01:20:12,239
information so

498
01:20:12,239 --> 01:20:15,040
overall basically the amount of matrix

499
01:20:15,040 --> 01:20:18,000
from the routers is steadily increasing

500
01:20:18,000 --> 01:20:21,280
so duplication needs to be prevented and

501
01:20:21,280 --> 01:20:22,320
we see

502
01:20:22,320 --> 01:20:25,760
that those duplications happening

503
01:20:25,760 --> 01:20:28,400
most of the time when the bmp session is

504
01:20:28,400 --> 01:20:30,560
re-established and we

505
01:20:30,560 --> 01:20:33,199
see basically there are two main

506
01:20:33,199 --> 01:20:35,040
contribution factors why

507
01:20:35,040 --> 01:20:38,080
this bmp session is reestablished one

508
01:20:38,080 --> 01:20:40,560
is a grief loss of connectivity between

509
01:20:40,560 --> 01:20:41,760
bmp client

510
01:20:41,760 --> 01:20:44,800
and server and the other one because the

511
01:20:44,800 --> 01:20:46,480
bmp server

512
01:20:46,480 --> 01:20:49,440
is taken in maintenance being restarted

513
01:20:49,440 --> 01:20:51,040
and then the bm precision is

514
01:20:51,040 --> 01:20:53,920
reestablished

515
01:20:55,760 --> 01:20:59,199
so if we look a bit more closely

516
01:20:59,199 --> 01:21:02,480
into the bmp session handling so section

517
01:21:02,480 --> 01:21:07,440
3.3 in rfc 78 54 describes basically

518
01:21:07,440 --> 01:21:08,239
that

519
01:21:08,239 --> 01:21:11,600
if the tcp session towards the the bmp

520
01:21:11,600 --> 01:21:13,360
server is established

521
01:21:13,360 --> 01:21:16,560
or closed then also the bmp session is

522
01:21:16,560 --> 01:21:18,800
established and closed

523
01:21:18,800 --> 01:21:22,560
and in section five uh basically

524
01:21:22,560 --> 01:21:25,360
uh that it is described that once the

525
01:21:25,360 --> 01:21:28,239
bmp session is established the initial

526
01:21:28,239 --> 01:21:30,880
rip dump withdrawal monitoring messages

527
01:21:30,880 --> 01:21:32,159
is performed

528
01:21:32,159 --> 01:21:33,920
and this rib dump is performed

529
01:21:33,920 --> 01:21:36,480
regardless if a bmp session is

530
01:21:36,480 --> 01:21:37,600
established

531
01:21:37,600 --> 01:21:42,400
or re-established

532
01:21:42,400 --> 01:21:48,800
uh tcp fast open is defined in rfc 7413

533
01:21:48,800 --> 01:21:52,480
and uh basically it gives us the unique

534
01:21:52,480 --> 01:21:54,560
capability that we can distinguish

535
01:21:54,560 --> 01:21:56,000
between a niche

536
01:21:56,000 --> 01:21:59,040
initial tcp establishment or a

537
01:21:59,040 --> 01:22:02,639
re-establishment of the tcp session

538
01:22:02,639 --> 01:22:05,520
and this draft is not only suggesting to

539
01:22:05,520 --> 01:22:06,880
use tcp fast

540
01:22:06,880 --> 01:22:11,280
open for the bmp session but also

541
01:22:11,280 --> 01:22:14,480
on the bmp application on the bmp client

542
01:22:14,480 --> 01:22:18,560
extending the bmp session life cycle

543
01:22:18,560 --> 01:22:22,719
so the bmp session should not be closed

544
01:22:22,719 --> 01:22:24,880
immediately when the tcp session is

545
01:22:24,880 --> 01:22:25,840
closed

546
01:22:25,840 --> 01:22:27,920
there should be a configurable timeout

547
01:22:27,920 --> 01:22:28,960
value

548
01:22:28,960 --> 01:22:32,320
and if within this timeout the tcp

549
01:22:32,320 --> 01:22:33,239
session is

550
01:22:33,239 --> 01:22:36,239
reestablished then basically the bmp

551
01:22:36,239 --> 01:22:37,600
session is considered

552
01:22:37,600 --> 01:22:42,400
still up another

553
01:22:42,400 --> 01:22:45,679
angle is that with that the

554
01:22:45,679 --> 01:22:48,239
client needs to buffer messages between

555
01:22:48,239 --> 01:22:50,840
the tcp

556
01:22:50,840 --> 01:22:53,920
re-establishment and the bmp session is

557
01:22:53,920 --> 01:22:56,239
declared terminated when either the

558
01:22:56,239 --> 01:22:57,600
buffer is full

559
01:22:57,600 --> 01:23:00,080
or the timeout is reached of the bmp

560
01:23:00,080 --> 01:23:02,960
session closure

561
01:23:05,600 --> 01:23:08,239
what we want to wanted to preserve in

562
01:23:08,239 --> 01:23:11,199
this draft is the key principle of pmp

563
01:23:11,199 --> 01:23:14,159
that is it is still a unidirectional uh

564
01:23:14,159 --> 01:23:16,320
collection protocol

565
01:23:16,320 --> 01:23:20,480
uh the suggested the

566
01:23:20,480 --> 01:23:24,080
extensions are optional so either

567
01:23:24,080 --> 01:23:27,840
the tcp fast open tcp session is

568
01:23:27,840 --> 01:23:28,560
supported

569
01:23:28,560 --> 01:23:32,800
or not and as described

570
01:23:32,800 --> 01:23:36,480
in already in rfc 7854

571
01:23:36,480 --> 01:23:40,000
uh that a buffering on the

572
01:23:40,000 --> 01:23:43,440
router can happen uh

573
01:23:43,440 --> 01:23:45,679
and in most implementations today we've

574
01:23:45,679 --> 01:23:46,560
seen that it

575
01:23:46,560 --> 01:23:49,520
it is happen and this draft is making me

576
01:23:49,520 --> 01:23:52,400
makes basically use of such a bmp buffer

577
01:23:52,400 --> 01:23:55,440
so the message can be preserved

578
01:23:55,440 --> 01:24:00,080
between the tcp establishments

579
01:24:00,880 --> 01:24:03,440
so this is zero zero version we are

580
01:24:03,440 --> 01:24:05,440
looking very much feedback from the

581
01:24:05,440 --> 01:24:08,480
go mailing a mailing list we would

582
01:24:08,480 --> 01:24:10,960
love to hear your comments and feedbacks

583
01:24:10,960 --> 01:24:12,159
and also

584
01:24:12,159 --> 01:24:15,840
if this draft has married or not

585
01:24:15,840 --> 01:24:18,320
and whatever you think about tcp fast

586
01:24:18,320 --> 01:24:18,960
open

587
01:24:18,960 --> 01:24:22,400
or whatever you would prefer to have an

588
01:24:22,400 --> 01:24:25,760
implementation be done within the

589
01:24:25,760 --> 01:24:29,120
bmp application but keep in mind

590
01:24:29,120 --> 01:24:31,840
if the implementation needs to be done

591
01:24:31,840 --> 01:24:32,400
in the

592
01:24:32,400 --> 01:24:35,520
bmp application we cannot preserve

593
01:24:35,520 --> 01:24:38,120
the main principle of bmp that is a

594
01:24:38,120 --> 01:24:39,360
unidirectional

595
01:24:39,360 --> 01:24:41,920
protocol

596
01:24:43,040 --> 01:24:45,679
that's all from my side any questions

597
01:24:45,679 --> 01:24:48,719
remarks feedback

598
01:24:51,760 --> 01:24:53,440
speaking as just working group

599
01:24:53,440 --> 01:24:55,840
participants i

600
01:24:55,840 --> 01:24:58,560
would encourage you to continue this

601
01:24:58,560 --> 01:24:59,199
work

602
01:24:59,199 --> 01:25:02,080
i i think that the effects on real life

603
01:25:02,080 --> 01:25:03,840
networks of

604
01:25:03,840 --> 01:25:06,320
session flapping and the consequences

605
01:25:06,320 --> 01:25:07,199
for

606
01:25:07,199 --> 01:25:10,239
subordinate downstream systems should

607
01:25:10,239 --> 01:25:12,960
not be overlooked

608
01:25:12,960 --> 01:25:17,360
i see an analogy to the session id

609
01:25:17,360 --> 01:25:20,639
uh in rrdp and how sessions are

610
01:25:20,639 --> 01:25:21,679
resumable in

611
01:25:21,679 --> 01:25:25,679
rtr uh similar to how tcp fast open

612
01:25:25,679 --> 01:25:26,639
cookies

613
01:25:26,639 --> 01:25:29,520
are handled and i think uh mechanisms

614
01:25:29,520 --> 01:25:30,080
like this

615
01:25:30,080 --> 01:25:32,960
are are useful and arguably help

616
01:25:32,960 --> 01:25:33,679
conserve

617
01:25:33,679 --> 01:25:36,960
resources so i would encourage you to

618
01:25:36,960 --> 01:25:41,840
pursue this work thank you very much

619
01:25:44,320 --> 01:25:47,440
i see a question on the chat

620
01:25:47,440 --> 01:25:51,120
lars pen asks how much down time would

621
01:25:51,120 --> 01:25:53,520
currently deployed buffer sizes allow

622
01:25:53,520 --> 01:25:54,560
for

623
01:25:54,560 --> 01:25:58,400
if you are not currently in a burst

624
01:25:58,560 --> 01:26:01,440
uh we were thinking about that and in

625
01:26:01,440 --> 01:26:04,000
the draft we were specifying a default

626
01:26:04,000 --> 01:26:04,800
value

627
01:26:04,800 --> 01:26:08,400
of 60 seconds so the main goal is

628
01:26:08,400 --> 01:26:09,440
basically

629
01:26:09,440 --> 01:26:11,440
if you have a small interruption in

630
01:26:11,440 --> 01:26:14,159
connectivity between client and server

631
01:26:14,159 --> 01:26:16,800
or you just want to restart the pmp

632
01:26:16,800 --> 01:26:17,760
server

633
01:26:17,760 --> 01:26:20,719
that within that period of time the

634
01:26:20,719 --> 01:26:22,000
router should be able

635
01:26:22,000 --> 01:26:25,280
to do to buffer the matrix but of course

636
01:26:25,280 --> 01:26:28,960
um memory is limited on the bmp client

637
01:26:28,960 --> 01:26:31,040
and therefore you cannot buffer for

638
01:26:31,040 --> 01:26:33,360
unlimited time so

639
01:26:33,360 --> 01:26:36,000
if the time would be longer or the

640
01:26:36,000 --> 01:26:36,719
buffer

641
01:26:36,719 --> 01:26:38,800
would be filled then you basically fall

642
01:26:38,800 --> 01:26:39,840
back to the

643
01:26:39,840 --> 01:26:43,280
previous principle that the bmp session

644
01:26:43,280 --> 01:26:43,600
is

645
01:26:43,600 --> 01:26:51,120
normally established again

646
01:26:51,120 --> 01:26:54,000
answer your question

647
01:26:55,440 --> 01:26:58,560
large types thanks cool

648
01:26:58,560 --> 01:27:05,840
thanks any other questions

649
01:27:15,040 --> 01:27:18,560
i see that there are some

650
01:27:18,560 --> 01:27:21,199
implementers in the room and i was

651
01:27:21,199 --> 01:27:23,280
wondering if

652
01:27:23,280 --> 01:27:25,520
maybe the juniper people or cisco people

653
01:27:25,520 --> 01:27:27,679
have previous experience with tcp

654
01:27:27,679 --> 01:27:32,639
fast open would this be an entirely new

655
01:27:32,639 --> 01:27:35,520
feature or is it something that where

656
01:27:35,520 --> 01:27:37,600
existing frameworks can be leveraged in

657
01:27:37,600 --> 01:27:40,560
the operating system

658
01:27:44,840 --> 01:27:48,000
jeffrey so i i don't know if we actually

659
01:27:48,000 --> 01:27:48,560
support

660
01:27:48,560 --> 01:27:50,400
tcp fast open in either of our bit two

661
01:27:50,400 --> 01:27:51,760
big stacks

662
01:27:51,760 --> 01:27:54,159
uh i'm vaguely familiar with the feature

663
01:27:54,159 --> 01:27:55,840
uh the thing i would i guess comment to

664
01:27:55,840 --> 01:27:57,199
thomas is that

665
01:27:57,199 --> 01:27:59,440
uh the amount of state that needs to be

666
01:27:59,440 --> 01:28:00,639
sort of kept

667
01:28:00,639 --> 01:28:02,800
in flight is stuff that the colonel

668
01:28:02,800 --> 01:28:04,400
would have already owned anyway from the

669
01:28:04,400 --> 01:28:04,960
tcp

670
01:28:04,960 --> 01:28:07,679
portion of things and you know maybe

671
01:28:07,679 --> 01:28:08,320
some

672
01:28:08,320 --> 01:28:10,880
state that bmp had serialized at that

673
01:28:10,880 --> 01:28:12,239
point

674
01:28:12,239 --> 01:28:14,639
but anything that's not in that category

675
01:28:14,639 --> 01:28:16,560
is basically

676
01:28:16,560 --> 01:28:18,960
uh unserious state that's still in the

677
01:28:18,960 --> 01:28:19,840
state machine

678
01:28:19,840 --> 01:28:21,760
and you know that shouldn't cost any

679
01:28:21,760 --> 01:28:23,199
additional memory

680
01:28:23,199 --> 01:28:25,199
so the main considerations from my

681
01:28:25,199 --> 01:28:27,040
perspective without having

682
01:28:27,040 --> 01:28:30,000
read the rfc in detail for some time is

683
01:28:30,000 --> 01:28:30,400
that

684
01:28:30,400 --> 01:28:32,800
really as long as your colonel can hide

685
01:28:32,800 --> 01:28:34,480
the details about the session

686
01:28:34,480 --> 01:28:36,560
being lost from the application to some

687
01:28:36,560 --> 01:28:37,600
extent

688
01:28:37,600 --> 01:28:39,360
i don't expect there to be much

689
01:28:39,360 --> 01:28:41,040
difficulty in implementing this so i

690
01:28:41,040 --> 01:28:42,400
think that this would probably be a

691
01:28:42,400 --> 01:28:44,159
good mechanism as you know if the rfc

692
01:28:44,159 --> 01:28:46,320
covers the necessary things

693
01:28:46,320 --> 01:28:50,080
if there's any chance for any lost state

694
01:28:50,080 --> 01:28:52,239
the problem we have here is that there's

695
01:28:52,239 --> 01:28:54,080
really no way to easily recover this

696
01:28:54,080 --> 01:28:56,480
sort of thing because we don't have

697
01:28:56,480 --> 01:29:00,800
sequencing present in the bmp protocol

698
01:29:00,800 --> 01:29:04,719
so those sorts of losses are problematic

699
01:29:04,719 --> 01:29:07,679
but if that's not the case this is not a

700
01:29:07,679 --> 01:29:08,719
bad thing

701
01:29:08,719 --> 01:29:11,280
i think the major challenge for most

702
01:29:11,280 --> 01:29:13,440
vendors for real routers rather than

703
01:29:13,440 --> 01:29:17,280
you know easy to host stacks is that

704
01:29:17,280 --> 01:29:20,719
non-stop routing tcp extensions

705
01:29:20,719 --> 01:29:22,960
are very messy and complicated as it

706
01:29:22,960 --> 01:29:24,000
already is

707
01:29:24,000 --> 01:29:26,480
and to some extent well i think that the

708
01:29:26,480 --> 01:29:28,239
fast open stuff has uh

709
01:29:28,239 --> 01:29:31,440
some good balances with those features

710
01:29:31,440 --> 01:29:33,040
the interactions are already very

711
01:29:33,040 --> 01:29:35,760
complicated

712
01:29:35,760 --> 01:29:38,800
i see very useful thank you for your

713
01:29:38,800 --> 01:29:41,280
feedback

714
01:29:44,400 --> 01:29:46,080
this this working group should realize

715
01:29:46,080 --> 01:29:48,639
that the seamlessness can be solved

716
01:29:48,639 --> 01:29:50,880
at multiple layers of the stack so the

717
01:29:50,880 --> 01:29:52,080
current proposal

718
01:29:52,080 --> 01:29:55,120
is to leverage existing work in for

719
01:29:55,120 --> 01:29:58,159
instance the linux tcp kernel stack to

720
01:29:58,159 --> 01:30:01,199
allow to to resume a session but it's

721
01:30:01,199 --> 01:30:03,199
not the only path we can also

722
01:30:03,199 --> 01:30:05,600
resume the session within the bmp

723
01:30:05,600 --> 01:30:07,600
protocol itself

724
01:30:07,600 --> 01:30:09,199
and there's pros and cons to both

725
01:30:09,199 --> 01:30:11,040
approaches but both approaches

726
01:30:11,040 --> 01:30:14,320
will will give us the same result namely

727
01:30:14,320 --> 01:30:17,440
avoiding duplicating uh

728
01:30:17,440 --> 01:30:20,880
avoiding resending information that was

729
01:30:20,880 --> 01:30:23,360
sent previously and is still in the

730
01:30:23,360 --> 01:30:25,440
buffers of the client

731
01:30:25,440 --> 01:30:29,040
but with this in mind

732
01:30:29,040 --> 01:30:32,080
let's just explore one path and if if we

733
01:30:32,080 --> 01:30:32,719
somehow

734
01:30:32,719 --> 01:30:34,719
encounter an issue or if there are

735
01:30:34,719 --> 01:30:36,320
negative interactions with

736
01:30:36,320 --> 01:30:39,520
uh graceful restart or

737
01:30:39,520 --> 01:30:42,400
who knows what what crazy things uh

738
01:30:42,400 --> 01:30:43,840
exist in the wild

739
01:30:43,840 --> 01:30:47,120
then we can can revisit it and

740
01:30:47,120 --> 01:30:49,199
the resumption mechanism can be put at a

741
01:30:49,199 --> 01:30:51,759
different layer

742
01:30:57,280 --> 01:30:59,440
jeffrey has comments graceful restart

743
01:30:59,440 --> 01:31:00,560
should not be an issue

744
01:31:00,560 --> 01:31:03,679
i hope so

745
01:31:03,679 --> 01:31:06,800
good then thank you very much

746
01:31:06,800 --> 01:31:10,080
thank you for your time thomas

747
01:31:10,639 --> 01:31:14,000
and with that i'm looking into the room

748
01:31:14,000 --> 01:31:17,520
to find michael mcbride to give

749
01:31:17,520 --> 01:31:20,800
us an update on

750
01:31:21,920 --> 01:31:25,280
aspar prepending

751
01:31:27,040 --> 01:31:30,960
the floor is yours

752
01:31:30,960 --> 01:31:35,360
i can see you but not hear you yes

753
01:31:40,320 --> 01:31:43,199
yes we have audio i just took off

754
01:31:43,199 --> 01:31:45,679
bluetooth yeah okay good

755
01:31:45,679 --> 01:31:48,719
do you want to share your screen yeah

756
01:31:48,719 --> 01:31:58,800
let me do that

757
01:31:58,800 --> 01:32:02,320
we did you see that

758
01:32:02,960 --> 01:32:04,560
let's give it another second on my

759
01:32:04,560 --> 01:32:06,960
screen it says a screen share

760
01:32:06,960 --> 01:32:10,000
is being started

761
01:32:10,960 --> 01:32:27,840
so i'm not seeing the slides yet

762
01:32:34,800 --> 01:32:36,880
i'm seeing your desktop if you go full

763
01:32:36,880 --> 01:32:37,840
screen i think

764
01:32:37,840 --> 01:32:39,840
yeah perfect all right i'm going to mute

765
01:32:39,840 --> 01:32:42,320
myself take it away

766
01:32:42,320 --> 01:32:44,800
all right very good so i thought it'd be

767
01:32:44,800 --> 01:32:46,080
a good idea to just to give a

768
01:32:46,080 --> 01:32:48,639
brief update we did present this draft

769
01:32:48,639 --> 01:32:49,679
last itf

770
01:32:49,679 --> 01:32:51,679
we've received many comments thank you

771
01:32:51,679 --> 01:32:54,480
so much we've incorporated all of them

772
01:32:54,480 --> 01:32:56,800
we just received one this morning from

773
01:32:56,800 --> 01:32:58,639
thomas thank you very much we'll

774
01:32:58,639 --> 01:33:02,000
incorporate that comment in the memory

775
01:33:02,000 --> 01:33:04,880
section of this draft

776
01:33:04,880 --> 01:33:08,400
in the next rev that that comment was

777
01:33:08,400 --> 01:33:09,199
regarding

778
01:33:09,199 --> 01:33:12,719
um bgp's impact on ipfix

779
01:33:12,719 --> 01:33:16,080
uh netflow and so

780
01:33:16,080 --> 01:33:18,639
jacob uh wrote that section and we'll

781
01:33:18,639 --> 01:33:19,520
make sure we get

782
01:33:19,520 --> 01:33:23,840
that section updated so thank you thomas

783
01:33:24,239 --> 01:33:26,239
and we've had some we've also had

784
01:33:26,239 --> 01:33:27,520
several people uh

785
01:33:27,520 --> 01:33:29,360
several authors changing affiliations so

786
01:33:29,360 --> 01:33:31,760
we updated that as well

787
01:33:31,760 --> 01:33:33,600
so the background just real briefly is

788
01:33:33,600 --> 01:33:35,440
that doug midori

789
01:33:35,440 --> 01:33:38,239
he did present as path prepending at a

790
01:33:38,239 --> 01:33:38,960
nanog

791
01:33:38,960 --> 01:33:41,040
and there was participants asked if

792
01:33:41,040 --> 01:33:43,360
there was any sort of a pcp

793
01:33:43,360 --> 01:33:45,600
coming out of ietf or any other sdo and

794
01:33:45,600 --> 01:33:47,840
there was uh the answer is no and so we

795
01:33:47,840 --> 01:33:49,600
thought it'd probably be a good idea

796
01:33:49,600 --> 01:33:52,800
in this working group to have a opinion

797
01:33:52,800 --> 01:33:56,480
on es path prepending the problem is

798
01:33:56,480 --> 01:33:56,800
that

799
01:33:56,800 --> 01:33:59,840
excess of aspartame has caused

800
01:33:59,840 --> 01:34:03,840
routing issues on the internet and so we

801
01:34:03,840 --> 01:34:05,520
intend in this document to provide some

802
01:34:05,520 --> 01:34:08,639
guidance with how best to utilize the

803
01:34:08,639 --> 01:34:11,840
as path prepending in order to avoid

804
01:34:11,840 --> 01:34:14,880
negatively affecting the internet and to

805
01:34:14,880 --> 01:34:16,800
also offer some alternatives

806
01:34:16,800 --> 01:34:19,040
we've also per the working groups

807
01:34:19,040 --> 01:34:21,520
requests anonymized

808
01:34:21,520 --> 01:34:24,800
the real world examples

809
01:34:24,800 --> 01:34:26,960
and we've used documentation prefixes

810
01:34:26,960 --> 01:34:29,360
and asses

811
01:34:29,360 --> 01:34:32,000
we've included a variety of use cases

812
01:34:32,000 --> 01:34:32,719
where it's

813
01:34:32,719 --> 01:34:35,679
as path pre-painting is in use today

814
01:34:35,679 --> 01:34:37,040
including preferring one

815
01:34:37,040 --> 01:34:40,159
isp over another isp preferring one asbr

816
01:34:40,159 --> 01:34:43,119
over another asbr

817
01:34:43,119 --> 01:34:45,520
utilizing one path exclusively and

818
01:34:45,520 --> 01:34:46,159
another

819
01:34:46,159 --> 01:34:50,080
solely as backup to signal to indicate

820
01:34:50,080 --> 01:34:51,360
one path may have a different

821
01:34:51,360 --> 01:34:54,880
amount of capacity than another

822
01:34:56,719 --> 01:34:59,520
and then isp doesn't accept traffic

823
01:34:59,520 --> 01:35:00,800
engineering news and bgb

824
01:35:00,800 --> 01:35:03,679
communities so pre-panning is the only

825
01:35:03,679 --> 01:35:05,840
option

826
01:35:05,840 --> 01:35:09,040
so some of the examples of the problems

827
01:35:09,040 --> 01:35:12,000
um again you can look at the draft but

828
01:35:12,000 --> 01:35:13,119
um

829
01:35:13,119 --> 01:35:14,320
you know you could have an attacker

830
01:35:14,320 --> 01:35:16,080
wanting to intercept or manipulate

831
01:35:16,080 --> 01:35:17,760
traffic to a prefix and it enlists a

832
01:35:17,760 --> 01:35:18,800
data center to

833
01:35:18,800 --> 01:35:21,520
allow announcements of that same prefix

834
01:35:21,520 --> 01:35:23,119
with a fabricated shorter

835
01:35:23,119 --> 01:35:25,600
as path and that malicious route would

836
01:35:25,600 --> 01:35:27,600
be preferred due to the shortened ps

837
01:35:27,600 --> 01:35:29,600
path and that

838
01:35:29,600 --> 01:35:32,719
has happened um and then there's also

839
01:35:32,719 --> 01:35:33,280
been some

840
01:35:33,280 --> 01:35:36,159
routing leaks from one country that are

841
01:35:36,159 --> 01:35:38,480
being preferred over another country

842
01:35:38,480 --> 01:35:43,040
because of excessively prepended aspas

843
01:35:43,040 --> 01:35:45,360
and in that case illegitimate routes are

844
01:35:45,360 --> 01:35:46,239
preferred

845
01:35:46,239 --> 01:35:49,600
can be preferred over legitimate routes

846
01:35:49,600 --> 01:35:52,960
um and as was mentioned and this is the

847
01:35:52,960 --> 01:35:54,080
comment that

848
01:35:54,080 --> 01:35:56,480
thomas made was long as fast can cause

849
01:35:56,480 --> 01:35:58,239
an increase in memory usage among pgp

850
01:35:58,239 --> 01:36:00,718
speakers

851
01:36:01,840 --> 01:36:03,440
there are alternatives to aes path

852
01:36:03,440 --> 01:36:05,360
prepend you can use predefined

853
01:36:05,360 --> 01:36:06,639
communities that are mapped to a

854
01:36:06,639 --> 01:36:08,080
particular behavior

855
01:36:08,080 --> 01:36:10,800
when propagated you can announce more

856
01:36:10,800 --> 01:36:12,880
specific routes on the preferred

857
01:36:12,880 --> 01:36:15,920
path um robert

858
01:36:15,920 --> 01:36:19,360
is a fan of using igp

859
01:36:19,360 --> 01:36:22,400
or egp origin which

860
01:36:22,400 --> 01:36:24,800
takes precedence over an incomplete

861
01:36:24,800 --> 01:36:27,840
origin code and keeping the

862
01:36:27,840 --> 01:36:30,320
path lengths the same and so we include

863
01:36:30,320 --> 01:36:32,480
that in the draft

864
01:36:32,480 --> 01:36:35,119
there may be others but i think probably

865
01:36:35,119 --> 01:36:36,320
that's all important but i think

866
01:36:36,320 --> 01:36:38,239
probably the most important is the best

867
01:36:38,239 --> 01:36:40,719
practices

868
01:36:40,719 --> 01:36:43,040
and in bold here is what we've added

869
01:36:43,040 --> 01:36:45,040
since the last

870
01:36:45,040 --> 01:36:48,400
rev jeff houston offered these

871
01:36:48,400 --> 01:36:52,880
suggestions and so we included those

872
01:36:52,880 --> 01:36:54,880
um so let me just go over them real

873
01:36:54,880 --> 01:36:56,480
quickly so network operators should

874
01:36:56,480 --> 01:36:58,000
should ensure pre-painting is absolutely

875
01:36:58,000 --> 01:37:01,199
necessary as many networks

876
01:37:01,199 --> 01:37:03,679
have excessive prepending and it is best

877
01:37:03,679 --> 01:37:05,840
to enumerate when the routing policies

878
01:37:05,840 --> 01:37:08,320
are intended to achieve

879
01:37:08,320 --> 01:37:09,920
what the routing policies are intended

880
01:37:09,920 --> 01:37:11,360
to achieve before concluding that

881
01:37:11,360 --> 01:37:14,400
prepending is a solution

882
01:37:14,400 --> 01:37:15,760
and he also pointed out that the

883
01:37:15,760 --> 01:37:17,600
neighbor you are preparing may have an

884
01:37:17,600 --> 01:37:19,040
unconditional preference for customer

885
01:37:19,040 --> 01:37:20,560
routes and pre-pending doesn't work and

886
01:37:20,560 --> 01:37:22,080
so it's helpful to check with neighbors

887
01:37:22,080 --> 01:37:23,679
to see if they'll honor

888
01:37:23,679 --> 01:37:25,679
their pre-pinned and so that was a good

889
01:37:25,679 --> 01:37:28,639
point that we included

890
01:37:28,880 --> 01:37:33,040
we based upon analysis that doug

891
01:37:33,040 --> 01:37:35,679
had done that he presented at maddog and

892
01:37:35,679 --> 01:37:37,040
we included the draft that there's

893
01:37:37,040 --> 01:37:39,119
no need to prevent more than the then

894
01:37:39,119 --> 01:37:40,639
five asses

895
01:37:40,639 --> 01:37:43,679
and we include a diagram that shows that

896
01:37:43,679 --> 01:37:46,400
um ninety percent of as path lengths are

897
01:37:46,400 --> 01:37:48,000
five as

898
01:37:48,000 --> 01:37:51,679
passes or fewer in length don't prevent

899
01:37:51,679 --> 01:37:55,119
prepend asn that you don't own

900
01:37:55,119 --> 01:37:58,159
and prepending to all is

901
01:37:58,159 --> 01:38:02,000
is needless

902
01:38:02,000 --> 01:38:05,040
so we welcome more comments um

903
01:38:05,040 --> 01:38:08,719
including right now if anybody has any

904
01:38:12,800 --> 01:38:14,719
uh in the chat i see a comment from

905
01:38:14,719 --> 01:38:16,400
jeffrey haase

906
01:38:16,400 --> 01:38:19,119
for aspaf pre-pending communities are

907
01:38:19,119 --> 01:38:20,320
effectively scoped

908
01:38:20,320 --> 01:38:22,800
one as over which doesn't help stop

909
01:38:22,800 --> 01:38:24,560
asens

910
01:38:24,560 --> 01:38:30,560
in many cases

911
01:38:30,560 --> 01:38:35,360
jeffrey perhaps uh elaborates

912
01:38:36,800 --> 01:38:39,360
uh sure

913
01:38:41,360 --> 01:38:43,040
presentations in this working group as

914
01:38:43,040 --> 01:38:45,360
an example people talk about their

915
01:38:45,360 --> 01:38:49,679
community policies people are very

916
01:38:49,679 --> 01:38:51,440
strong about how they actually do their

917
01:38:51,440 --> 01:38:52,800
filtering on stuff

918
01:38:52,800 --> 01:38:54,639
you know the chair as an example is part

919
01:38:54,639 --> 01:38:56,159
of an organization that you know very

920
01:38:56,159 --> 01:38:57,520
strictly scrubs the communities that

921
01:38:57,520 --> 01:38:59,360
pass through their system

922
01:38:59,360 --> 01:39:02,400
so the the problem with the uh

923
01:39:02,400 --> 01:39:04,320
with using communities to shape traffic

924
01:39:04,320 --> 01:39:06,320
is that if you can't

925
01:39:06,320 --> 01:39:08,560
get your behavior that you desire using

926
01:39:08,560 --> 01:39:09,840
some sort of

927
01:39:09,840 --> 01:39:13,760
community addressed to your adjacent isp

928
01:39:13,760 --> 01:39:15,520
there's probably not anything you can do

929
01:39:15,520 --> 01:39:17,440
about the next hop over

930
01:39:17,440 --> 01:39:20,800
so for traffic control for you know as

931
01:39:20,800 --> 01:39:23,440
single hop communities can be very very

932
01:39:23,440 --> 01:39:24,000
helpful

933
01:39:24,000 --> 01:39:26,239
especially if you're doing things like

934
01:39:26,239 --> 01:39:30,159
selectively leaking more specifics

935
01:39:30,239 --> 01:39:32,719
but once you get past that point the

936
01:39:32,719 --> 01:39:34,719
practice that has held up over the years

937
01:39:34,719 --> 01:39:36,080
you know for more than one hop

938
01:39:36,080 --> 01:39:38,480
unfortunately has been pre-pending

939
01:39:38,480 --> 01:39:39,600
and while i generally agree that the

940
01:39:39,600 --> 01:39:41,920
number five is probably uh

941
01:39:41,920 --> 01:39:44,960
fairly reasonable the sort of challenge

942
01:39:44,960 --> 01:39:45,679
that you

943
01:39:45,679 --> 01:39:47,679
end up running into which jeff houston

944
01:39:47,679 --> 01:39:50,080
would recognize as a bjp wedgie

945
01:39:50,080 --> 01:39:52,080
uh from the rfc that he put out on the

946
01:39:52,080 --> 01:39:53,199
topic

947
01:39:53,199 --> 01:39:56,080
is that uh if you don't have something

948
01:39:56,080 --> 01:39:58,800
that is strongly prepended sometimes

949
01:39:58,800 --> 01:40:00,480
near the beginning you know it's like

950
01:40:00,480 --> 01:40:01,920
maybe if you think you only need string

951
01:40:01,920 --> 01:40:04,000
maybe two asses away

952
01:40:04,000 --> 01:40:05,679
if you only add an additional two asses

953
01:40:05,679 --> 01:40:07,040
into the path there's a

954
01:40:07,040 --> 01:40:08,320
there's a chance that route selection

955
01:40:08,320 --> 01:40:10,239
may cause something the wedge a little

956
01:40:10,239 --> 01:40:11,199
bit earlier

957
01:40:11,199 --> 01:40:14,480
one or two asses closer to things

958
01:40:14,480 --> 01:40:16,400
and unfortunately a lot of these

959
01:40:16,400 --> 01:40:17,760
headaches just have to do with the

960
01:40:17,760 --> 01:40:19,520
topology of the internet

961
01:40:19,520 --> 01:40:22,560
we've gone very much closer to

962
01:40:22,560 --> 01:40:25,679
hub and spoke uh the core has now

963
01:40:25,679 --> 01:40:27,679
continued to condense over the years

964
01:40:27,679 --> 01:40:30,400
but if you happen to be a stub as that

965
01:40:30,400 --> 01:40:33,119
was purchasing multiple streams of uh

966
01:40:33,119 --> 01:40:34,400
you know service from different

967
01:40:34,400 --> 01:40:37,040
providers sometimes if you're

968
01:40:37,040 --> 01:40:38,639
not close enough to the core your

969
01:40:38,639 --> 01:40:40,480
traffic forwarding is not as you expect

970
01:40:40,480 --> 01:40:40,960
and

971
01:40:40,960 --> 01:40:42,880
especially as a smaller provider your

972
01:40:42,880 --> 01:40:44,880
circuit costs can be wildly different in

973
01:40:44,880 --> 01:40:45,760
terms of

974
01:40:45,760 --> 01:40:51,840
how much you pay for such things

975
01:40:53,040 --> 01:41:04,639
okay next up in the cube ben madison

976
01:41:04,639 --> 01:41:09,119
can you hear me okay perfect go ahead

977
01:41:09,119 --> 01:41:12,719
um so i just want to um make a point

978
01:41:12,719 --> 01:41:13,600
about what

979
01:41:13,600 --> 01:41:16,080
jeff was talking about about the scope

980
01:41:16,080 --> 01:41:17,040
of communities

981
01:41:17,040 --> 01:41:20,400
um i'm not sure that that

982
01:41:20,400 --> 01:41:23,920
one hop radius is true in general

983
01:41:23,920 --> 01:41:27,440
um certainly for us we scrub

984
01:41:27,440 --> 01:41:30,239
anything that's um in the well-known

985
01:41:30,239 --> 01:41:32,400
space or starts with a you know

986
01:41:32,400 --> 01:41:34,719
starts with a private as and we're very

987
01:41:34,719 --> 01:41:35,920
strict about

988
01:41:35,920 --> 01:41:39,280
what we accept in our name space

989
01:41:39,280 --> 01:41:42,000
um but everything other than that we

990
01:41:42,000 --> 01:41:42,400
leave

991
01:41:42,400 --> 01:41:45,280
untouched so for example one of our

992
01:41:45,280 --> 01:41:46,400
customers

993
01:41:46,400 --> 01:41:49,280
can send a community in one of our

994
01:41:49,280 --> 01:41:50,239
transits name

995
01:41:50,239 --> 01:41:53,440
space and expect that to be honored

996
01:41:53,440 --> 01:41:56,800
at our transits boundary um

997
01:41:56,800 --> 01:42:00,719
and i know of customers that do use that

998
01:42:00,800 --> 01:42:04,480
i think the limitation is that if your

999
01:42:04,480 --> 01:42:07,920
transit happens to be a

1000
01:42:07,920 --> 01:42:10,320
happens to be a you know inverted commas

1001
01:42:10,320 --> 01:42:11,119
tier one

1002
01:42:11,119 --> 01:42:14,159
or a transit free network the next hop

1003
01:42:14,159 --> 01:42:16,080
over is going to be a parent

1004
01:42:16,080 --> 01:42:19,760
or another customer and then unlikely to

1005
01:42:19,760 --> 01:42:21,679
honor traffic engineering communities of

1006
01:42:21,679 --> 01:42:22,880
any sort

1007
01:42:22,880 --> 01:42:25,840
um but i don't think that the i don't

1008
01:42:25,840 --> 01:42:27,840
think that the scope is limited by

1009
01:42:27,840 --> 01:42:28,639
virtue

1010
01:42:28,639 --> 01:42:31,040
of any scrubbing that necessarily

1011
01:42:31,040 --> 01:42:31,920
happens

1012
01:42:31,920 --> 01:42:35,679
at the your immediate upstream's edge

1013
01:42:35,679 --> 01:42:39,760
um whether or not that's worth including

1014
01:42:39,760 --> 01:42:41,520
in the draft or not i'm not sure but it

1015
01:42:41,520 --> 01:42:42,239
certainly does

1016
01:42:42,239 --> 01:42:44,159
mean that whether you've got

1017
01:42:44,159 --> 01:42:46,320
alternatives gets complicated

1018
01:42:46,320 --> 01:42:50,080
um i think that i think the additional

1019
01:42:50,080 --> 01:42:51,520
text that you've

1020
01:42:51,520 --> 01:42:54,800
you've added about the fact that people

1021
01:42:54,800 --> 01:42:56,159
will typically

1022
01:42:56,159 --> 01:42:58,400
use local prep to prefer customer routes

1023
01:42:58,400 --> 01:43:00,320
is important

1024
01:43:00,320 --> 01:43:02,400
and i think you can probably go a bit

1025
01:43:02,400 --> 01:43:05,040
further than it sounds like you've gone

1026
01:43:05,040 --> 01:43:07,920
and point out the you know save

1027
01:43:07,920 --> 01:43:10,000
resorting to very very aggressive

1028
01:43:10,000 --> 01:43:12,800
aggressive de-aggregation you may find

1029
01:43:12,800 --> 01:43:14,719
that there are scenarios where you just

1030
01:43:14,719 --> 01:43:16,400
can't make the traffic come in the

1031
01:43:16,400 --> 01:43:17,920
direction you want it to and you've got

1032
01:43:17,920 --> 01:43:19,280
to make peace with that or change

1033
01:43:19,280 --> 01:43:20,880
provider

1034
01:43:20,880 --> 01:43:23,840
there isn't always a way of making it

1035
01:43:23,840 --> 01:43:24,719
come in

1036
01:43:24,719 --> 01:43:26,159
the way that you want it to because

1037
01:43:26,159 --> 01:43:27,920
we're talking about destination

1038
01:43:27,920 --> 01:43:31,600
forwarding oriented protocol

1039
01:43:35,280 --> 01:43:36,400
thank you so those are more good

1040
01:43:36,400 --> 01:43:38,719
comments

1041
01:43:44,800 --> 01:43:46,960
something along the lines of you may be

1042
01:43:46,960 --> 01:43:48,400
up against a brick wall you should

1043
01:43:48,400 --> 01:43:51,119
probably stop banging your head on it

1044
01:43:51,119 --> 01:43:53,920
sure okay

1045
01:44:01,760 --> 01:44:04,080
a challenge with documents of this type

1046
01:44:04,080 --> 01:44:05,280
is that there is

1047
01:44:05,280 --> 01:44:08,560
a multitude of

1048
01:44:08,560 --> 01:44:12,000
um audiences

1049
01:44:12,000 --> 01:44:14,080
that that have to interpret this

1050
01:44:14,080 --> 01:44:15,040
recommendation

1051
01:44:15,040 --> 01:44:17,600
and apply it to their local situation

1052
01:44:17,600 --> 01:44:19,280
and on the one hand there's the group of

1053
01:44:19,280 --> 01:44:21,600
people who

1054
01:44:21,600 --> 01:44:24,080
self-inflict harm by needlessly

1055
01:44:24,080 --> 01:44:25,760
prepending themselves

1056
01:44:25,760 --> 01:44:28,960
which negates the efforts of say origin

1057
01:44:28,960 --> 01:44:31,040
validation

1058
01:44:31,040 --> 01:44:33,119
but on the other hand there is of course

1059
01:44:33,119 --> 01:44:35,199
legitimate use cases of traffic

1060
01:44:35,199 --> 01:44:36,000
engineering

1061
01:44:36,000 --> 01:44:39,360
or traffic engineering use cases that

1062
01:44:39,360 --> 01:44:41,199
applied in the past but conflicts did

1063
01:44:41,199 --> 01:44:42,560
not get updated

1064
01:44:42,560 --> 01:44:47,360
so it's a bit tricky how to navigate the

1065
01:44:47,360 --> 01:44:49,760
what what it is we want to teach the

1066
01:44:49,760 --> 01:44:50,719
reader

1067
01:44:50,719 --> 01:44:54,000
um and i i feel that the number five

1068
01:44:54,000 --> 01:44:57,520
appears uh almost arbitrary

1069
01:44:57,520 --> 01:44:59,360
but on the other hand some

1070
01:44:59,360 --> 01:45:04,239
recommendation is perhaps better than

1071
01:45:04,239 --> 01:45:06,159
fake hand waving keep it as short as

1072
01:45:06,159 --> 01:45:07,760
possible

1073
01:45:07,760 --> 01:45:10,320
but these are commons uh with just my

1074
01:45:10,320 --> 01:45:12,480
working group participant haddon

1075
01:45:12,480 --> 01:45:14,800
i see that rudiger joins the queue

1076
01:45:14,800 --> 01:45:30,000
rudicar the floor is yours

1077
01:45:30,000 --> 01:45:45,840
ridiculous i cannot hear you

1078
01:45:49,840 --> 01:45:51,760
there seems to be some kind of

1079
01:45:51,760 --> 01:45:54,639
connection issue

1080
01:45:57,040 --> 01:45:58,480
some there's been some good comments on

1081
01:45:58,480 --> 01:46:01,199
the uh chat as well that will uh

1082
01:46:01,199 --> 01:46:04,400
yeah let's roll up to those yeah see if

1083
01:46:04,400 --> 01:46:05,119
we can uh

1084
01:46:05,119 --> 01:46:06,960
just we we should be able to add some of

1085
01:46:06,960 --> 01:46:09,199
your comments jeffrey and others

1086
01:46:09,199 --> 01:46:13,040
into the draft as well as useful

1087
01:46:13,040 --> 01:46:16,159
so large print says can you explain why

1088
01:46:16,159 --> 01:46:18,080
the average as path length

1089
01:46:18,080 --> 01:46:21,040
affects the number of used prepend sizes

1090
01:46:21,040 --> 01:46:22,639
if i want to differentiate between the

1091
01:46:22,639 --> 01:46:23,679
preference of

1092
01:46:23,679 --> 01:46:26,800
n peers i need up to n minus 1 different

1093
01:46:26,800 --> 01:46:28,239
prepending sizes

1094
01:46:28,239 --> 01:46:30,080
from my own experience the average

1095
01:46:30,080 --> 01:46:32,000
internet path length should just limit

1096
01:46:32,000 --> 01:46:33,920
the maximum useful difference between

1097
01:46:33,920 --> 01:46:35,760
any two of those and minus one

1098
01:46:35,760 --> 01:46:40,400
sizes yeah so the thought there was that

1099
01:46:40,400 --> 01:46:41,280
you know if there's

1100
01:46:41,280 --> 01:46:44,639
maximum or if there's an average of five

1101
01:46:44,639 --> 01:46:47,760
a.s paths in their net then

1102
01:46:47,760 --> 01:46:49,840
pre-pending ten times doesn't do you any

1103
01:46:49,840 --> 01:46:52,719
good that's the general

1104
01:46:52,719 --> 01:46:56,880
reasoning behind us putting in there um

1105
01:46:56,880 --> 01:47:00,719
and to another comment on you know if if

1106
01:47:00,719 --> 01:47:04,000
five is arbitrary it i don't

1107
01:47:04,000 --> 01:47:06,000
i'm not sure how arbitrary that is and i

1108
01:47:06,000 --> 01:47:07,679
think i think the draft is trying to

1109
01:47:07,679 --> 01:47:09,520
show that it's not that arbitrary

1110
01:47:09,520 --> 01:47:10,320
because that's

1111
01:47:10,320 --> 01:47:13,440
you know ninety percent of the as path

1112
01:47:13,440 --> 01:47:14,000
lengths

1113
01:47:14,000 --> 01:47:18,719
in the internet um are five as

1114
01:47:18,719 --> 01:47:22,080
uh paths or less so um

1115
01:47:22,080 --> 01:47:25,600
that's why we put that number in there

1116
01:47:25,600 --> 01:47:28,480
if that's if you think that's not a wise

1117
01:47:28,480 --> 01:47:29,440
thing then

1118
01:47:29,440 --> 01:47:32,000
um we can avoid doing so but like you

1119
01:47:32,000 --> 01:47:33,440
said i think we should

1120
01:47:33,440 --> 01:47:37,839
have some recommendation in there

1121
01:47:38,719 --> 01:47:42,560
yeah i i see friction here between

1122
01:47:42,560 --> 01:47:44,159
having a recommendation that

1123
01:47:44,159 --> 01:47:47,520
currently 2021 is sensible

1124
01:47:47,520 --> 01:47:50,000
but on the other hand it is hard coding

1125
01:47:50,000 --> 01:47:50,800
a constant

1126
01:47:50,800 --> 01:47:54,080
and this is always an internet drafts a

1127
01:47:54,080 --> 01:47:57,040
and a balance must be struck what what

1128
01:47:57,040 --> 01:47:57,440
is

1129
01:47:57,440 --> 01:48:00,480
uh useful in this this context

1130
01:48:00,480 --> 01:48:03,520
um i think largest comments

1131
01:48:03,520 --> 01:48:06,320
another approach might be to say that

1132
01:48:06,320 --> 01:48:07,679
you should not prepend

1133
01:48:07,679 --> 01:48:10,480
more times than you have ebgp neighbors

1134
01:48:10,480 --> 01:48:12,719
that might apply to some

1135
01:48:12,719 --> 01:48:15,679
smaller isps as a useful rule of thumb

1136
01:48:15,679 --> 01:48:18,480
or perhaps there are other mechanisms to

1137
01:48:18,480 --> 01:48:22,000
arrive at the number five but not

1138
01:48:22,000 --> 01:48:25,199
prescribe it as five as the magic number

1139
01:48:25,199 --> 01:48:26,880
but i'm doing a lot of talking uh let's

1140
01:48:26,880 --> 01:48:28,400
go back to the queue i saw

1141
01:48:28,400 --> 01:48:30,639
alexander and then randy bush so we'll

1142
01:48:30,639 --> 01:48:32,400
go through it in in that order

1143
01:48:32,400 --> 01:48:36,719
alexander it's your turn

1144
01:48:37,920 --> 01:48:42,239
do you i can hear you

1145
01:48:42,239 --> 01:48:44,800
great well paul is good to hear me too

1146
01:48:44,800 --> 01:48:46,480
so

1147
01:48:46,480 --> 01:48:48,800
speaking about this draft is not

1148
01:48:48,800 --> 01:48:51,840
limiting to this draft

1149
01:48:51,920 --> 01:48:55,119
as far as i as i understand the

1150
01:48:55,119 --> 01:48:58,320
idea is to limit

1151
01:48:58,320 --> 01:49:01,840
the propagation of the leaked roots

1152
01:49:01,840 --> 01:49:05,199
by uh making the

1153
01:49:05,199 --> 01:49:08,400
length of ice path of the village roots

1154
01:49:08,400 --> 01:49:11,760
uh less or just

1155
01:49:11,760 --> 01:49:15,520
preventing it from uh being

1156
01:49:15,520 --> 01:49:18,480
meaningful meaningless uh big so it's

1157
01:49:18,480 --> 01:49:19,440
easy so

1158
01:49:19,440 --> 01:49:21,119
the idea that you should not prepare

1159
01:49:21,119 --> 01:49:24,000
more than two or three times or whatever

1160
01:49:24,000 --> 01:49:27,360
it's uh very clear and there is another

1161
01:49:27,360 --> 01:49:30,159
side of the middle and maybe it's a good

1162
01:49:30,159 --> 01:49:30,639
uh

1163
01:49:30,639 --> 01:49:32,960
opportunity to cite it in one of the

1164
01:49:32,960 --> 01:49:34,080
documents

1165
01:49:34,080 --> 01:49:37,599
that if if you uh here you are speaking

1166
01:49:37,599 --> 01:49:40,159
about from the perspective of

1167
01:49:40,159 --> 01:49:44,080
the victim of the source of the uh

1168
01:49:44,080 --> 01:49:46,480
route of the prefix of the other space

1169
01:49:46,480 --> 01:49:47,199
uh

1170
01:49:47,199 --> 01:49:49,520
whose traffic is uh redirected by the

1171
01:49:49,520 --> 01:49:50,960
route leg

1172
01:49:50,960 --> 01:49:54,560
this is another side the sender

1173
01:49:54,560 --> 01:49:58,320
the receiver of the route league

1174
01:49:58,320 --> 01:50:00,800
who sends the traffic you know into a

1175
01:50:00,800 --> 01:50:01,840
black hole

1176
01:50:01,840 --> 01:50:05,599
or in them in the middle uh it

1177
01:50:05,599 --> 01:50:08,719
doesn't really matter and

1178
01:50:08,719 --> 01:50:12,480
there is another simple stupid idea here

1179
01:50:12,480 --> 01:50:16,880
that if you have a flat policy

1180
01:50:16,880 --> 01:50:19,360
i mean that uh for example if you are a

1181
01:50:19,360 --> 01:50:21,360
content provider if you have

1182
01:50:21,360 --> 01:50:24,080
just same local preference values for

1183
01:50:24,080 --> 01:50:25,920
all your peers

1184
01:50:25,920 --> 01:50:28,080
you are getting really good protected

1185
01:50:28,080 --> 01:50:30,800
again against rotlicks

1186
01:50:30,800 --> 01:50:34,400
because the route league will have a

1187
01:50:34,400 --> 01:50:37,599
bigger ice path and

1188
01:50:37,599 --> 01:50:40,639
you know it will be

1189
01:50:40,639 --> 01:50:43,679
it will not become a best route for you

1190
01:50:43,679 --> 01:50:47,280
so maybe a suggestion that

1191
01:50:47,280 --> 01:50:50,719
do not use multiple uh layers

1192
01:50:50,719 --> 01:50:53,599
of our local preference for example

1193
01:50:53,599 --> 01:50:54,560
making

1194
01:50:54,560 --> 01:50:57,520
one layer for i access another layer for

1195
01:50:57,520 --> 01:50:58,239
the

1196
01:50:58,239 --> 01:51:01,280
uh private peers it's

1197
01:51:01,280 --> 01:51:03,840
really not that's useful and can become

1198
01:51:03,840 --> 01:51:04,960
harmful

1199
01:51:04,960 --> 01:51:07,040
i'm not sure it's if it should be part

1200
01:51:07,040 --> 01:51:08,400
of this document

1201
01:51:08,400 --> 01:51:12,239
but maybe it's a good idea to be cited

1202
01:51:12,239 --> 01:51:16,718
yeah maybe so thanks we'll think about

1203
01:51:18,840 --> 01:51:21,840
that

1204
01:51:28,239 --> 01:51:31,760
comments questions i

1205
01:51:31,760 --> 01:51:33,679
took my hand down because my elbow got

1206
01:51:33,679 --> 01:51:35,040
tired

1207
01:51:35,040 --> 01:51:38,800
um the floor is yours if we can't

1208
01:51:38,800 --> 01:51:42,719
describe a clear and simple algorithm

1209
01:51:42,719 --> 01:51:45,119
for the recommendation of how many to

1210
01:51:45,119 --> 01:51:46,960
prepend to whom

1211
01:51:46,960 --> 01:51:49,920
then we shouldn't be talking about it at

1212
01:51:49,920 --> 01:51:52,159
all

1213
01:51:52,880 --> 01:51:56,480
right then we're blowing smoke

1214
01:51:56,480 --> 01:51:59,679
so i think we should be discussing

1215
01:51:59,679 --> 01:52:02,719
a clear and simple algorithm

1216
01:52:02,719 --> 01:52:06,480
for how many prepends

1217
01:52:15,040 --> 01:52:18,639
speaking as participants i think i agree

1218
01:52:18,639 --> 01:52:22,800
that a draft merely stipulating

1219
01:52:22,800 --> 01:52:25,679
too much is harmful without us being

1220
01:52:25,679 --> 01:52:28,000
able to quantify what too much

1221
01:52:28,000 --> 01:52:31,199
means in a various number of

1222
01:52:31,199 --> 01:52:34,719
scenarios is indeed not productive but

1223
01:52:34,719 --> 01:52:36,719
i hope this working group will be able

1224
01:52:36,719 --> 01:52:38,080
to come up with

1225
01:52:38,080 --> 01:52:41,520
a recommendation because

1226
01:52:41,520 --> 01:52:46,080
there are measurable effects to people

1227
01:52:46,159 --> 01:52:48,960
pre-pending more than is good for their

1228
01:52:48,960 --> 01:52:51,760
own environment

1229
01:52:52,320 --> 01:52:56,880
then medicine the microphone is yours

1230
01:52:57,599 --> 01:53:00,000
so i agree that it in a perfect world

1231
01:53:00,000 --> 01:53:02,239
would be able to set out exactly

1232
01:53:02,239 --> 01:53:04,320
how the reader can arrive at the magic

1233
01:53:04,320 --> 01:53:05,520
number

1234
01:53:05,520 --> 01:53:09,119
but i don't think that there is

1235
01:53:09,119 --> 01:53:12,159
necessarily a one-size-fits-all way of

1236
01:53:12,159 --> 01:53:14,000
determining that because it's

1237
01:53:14,000 --> 01:53:15,920
dependent partly on where in the

1238
01:53:15,920 --> 01:53:17,679
internet you're performing

1239
01:53:17,679 --> 01:53:21,360
the calculation um i don't

1240
01:53:21,360 --> 01:53:22,960
think that there's anything wrong with

1241
01:53:22,960 --> 01:53:26,000
saying in the draft that in 2021 that

1242
01:53:26,000 --> 01:53:28,880
number appears to be approximately five

1243
01:53:28,880 --> 01:53:30,639
but if you're reading this in ten years

1244
01:53:30,639 --> 01:53:33,280
time your mileage may vary

1245
01:53:33,280 --> 01:53:35,360
um i think that's a reasonable

1246
01:53:35,360 --> 01:53:36,880
compromise between

1247
01:53:36,880 --> 01:53:39,920
additional complication and making it

1248
01:53:39,920 --> 01:53:41,679
relatively useful

1249
01:53:41,679 --> 01:53:45,040
um just quickly another point that i

1250
01:53:45,040 --> 01:53:46,239
forgot to make when i was

1251
01:53:46,239 --> 01:53:48,880
talking last i think that the the stuff

1252
01:53:48,880 --> 01:53:49,920
around the origin

1253
01:53:49,920 --> 01:53:53,679
code um is a little silly

1254
01:53:53,679 --> 01:53:56,800
um i think mostly the reason that it's

1255
01:53:56,800 --> 01:53:58,000
effective

1256
01:53:58,000 --> 01:54:01,119
is because most receivers tend to just

1257
01:54:01,119 --> 01:54:03,360
ignore it because it doesn't actually

1258
01:54:03,360 --> 01:54:06,400
change their path selection process

1259
01:54:06,400 --> 01:54:08,639
meaningfully and i think that if people

1260
01:54:08,639 --> 01:54:11,360
started actively using it at scale to do

1261
01:54:11,360 --> 01:54:12,800
traffic engineering

1262
01:54:12,800 --> 01:54:15,119
you'd find that people just reset it on

1263
01:54:15,119 --> 01:54:17,520
their borders and the effect goes away

1264
01:54:17,520 --> 01:54:18,960
i don't think that's a recommendation

1265
01:54:18,960 --> 01:54:22,480
that we should be making to people

1266
01:54:22,480 --> 01:54:24,718
okay

1267
01:54:28,080 --> 01:54:31,519
next up jared march

1268
01:54:32,159 --> 01:54:35,040
uh yeah i find myself agreeing with uh

1269
01:54:35,040 --> 01:54:35,520
with

1270
01:54:35,520 --> 01:54:38,880
randy and ben to some extent of

1271
01:54:38,880 --> 01:54:40,880
the shape of the internet has changed

1272
01:54:40,880 --> 01:54:42,320
significantly over the

1273
01:54:42,320 --> 01:54:45,360
past you know 25 years or so that i've

1274
01:54:45,360 --> 01:54:48,239
been meddling with it

1275
01:54:48,840 --> 01:54:52,080
and the

1276
01:54:52,080 --> 01:54:54,320
question of what the diameter is and

1277
01:54:54,320 --> 01:54:56,639
what service providers support

1278
01:54:56,639 --> 01:55:00,800
what and have what capability i think is

1279
01:55:00,800 --> 01:55:03,199
is something that lends itself to how

1280
01:55:03,199 --> 01:55:04,800
how do we measure this

1281
01:55:04,800 --> 01:55:08,239
how can we describe what is harmful

1282
01:55:08,239 --> 01:55:11,119
and then how can you know we've been

1283
01:55:11,119 --> 01:55:11,920
damaged

1284
01:55:11,920 --> 01:55:13,599
uh in the past with prior

1285
01:55:13,599 --> 01:55:15,440
implementations and so we have

1286
01:55:15,440 --> 01:55:18,560
uh asp limitations implemented

1287
01:55:18,560 --> 01:55:21,920
in the 20940 network

1288
01:55:21,920 --> 01:55:26,000
that limited limit as paths to 128

1289
01:55:26,000 --> 01:55:29,119
which is probably a safe protectionist

1290
01:55:29,119 --> 01:55:31,520
number but is also driven by prior

1291
01:55:31,520 --> 01:55:33,599
software defects

1292
01:55:33,599 --> 01:55:37,679
and so identifying a number that is

1293
01:55:37,679 --> 01:55:40,239
that is appropriate and based upon what

1294
01:55:40,239 --> 01:55:42,400
service providers have what capabilities

1295
01:55:42,400 --> 01:55:45,520
i think is uh

1296
01:55:45,520 --> 01:55:47,199
and and coming back to that with a way

1297
01:55:47,199 --> 01:55:48,719
to describe that to protocol

1298
01:55:48,719 --> 01:55:49,760
implementers

1299
01:55:49,760 --> 01:55:51,760
to say this this number is okay and this

1300
01:55:51,760 --> 01:55:54,400
number is not i think is

1301
01:55:54,400 --> 01:55:57,119
is going to be really difficult for this

1302
01:55:57,119 --> 01:55:57,760
group to

1303
01:55:57,760 --> 01:56:01,040
undertake just based on

1304
01:56:01,040 --> 01:56:02,719
you know the role and position the

1305
01:56:02,719 --> 01:56:05,440
apology of the internet

1306
01:56:05,440 --> 01:56:07,839
that's it

1307
01:56:10,400 --> 01:56:14,080
thanks uh

1308
01:56:14,080 --> 01:56:16,560
two people are in the queue randy and

1309
01:56:16,560 --> 01:56:17,119
jeffrey

1310
01:56:17,119 --> 01:56:20,239
we'll start with randy and then there's

1311
01:56:20,239 --> 01:56:22,239
an opportunity for mike to answer

1312
01:56:22,239 --> 01:56:24,719
if there is an answer and then it's up

1313
01:56:24,719 --> 01:56:26,400
to jeffrey

1314
01:56:26,400 --> 01:56:29,599
randy go ahead

1315
01:56:29,599 --> 01:56:32,800
uh ben if where

1316
01:56:32,800 --> 01:56:36,480
i am in the topology is part of

1317
01:56:36,480 --> 01:56:40,639
the consideration for how i prepend

1318
01:56:40,639 --> 01:56:43,199
then that's fine i didn't say the

1319
01:56:43,199 --> 01:56:45,679
algorithm is based strictly on how many

1320
01:56:45,679 --> 01:56:48,080
peers i have or what color wednesday

1321
01:56:48,080 --> 01:56:52,719
is but if we can't give

1322
01:56:52,719 --> 01:56:56,000
solid guidance then

1323
01:56:56,000 --> 01:56:58,719
this isn't going to last and saying this

1324
01:56:58,719 --> 01:57:01,920
worked well in 2021 but

1325
01:57:01,920 --> 01:57:05,360
you know take a flier in 2023

1326
01:57:05,360 --> 01:57:08,960
that's not really reasonable i think

1327
01:57:08,960 --> 01:57:12,719
if we can't give guidance here then we

1328
01:57:12,719 --> 01:57:16,800
really don't know what we're talking

1329
01:57:22,840 --> 01:57:25,840
about

1330
01:57:36,840 --> 01:57:38,239
jeffrey

1331
01:57:38,239 --> 01:57:40,639
uh so the the one thing i will follow up

1332
01:57:40,639 --> 01:57:41,360
on from

1333
01:57:41,360 --> 01:57:44,239
the jared invention that might be worth

1334
01:57:44,239 --> 01:57:46,480
discussing in the document

1335
01:57:46,480 --> 01:57:48,239
is the bugs that have happened from

1336
01:57:48,239 --> 01:57:50,080
pre-bending

1337
01:57:50,080 --> 01:57:52,159
and the uh the single biggest one is

1338
01:57:52,159 --> 01:57:53,119
just simply

1339
01:57:53,119 --> 01:57:54,960
you know segment overflow and the as

1340
01:57:54,960 --> 01:57:56,719
path as path basically

1341
01:57:56,719 --> 01:57:58,800
says here's the number of ass for this

1342
01:57:58,800 --> 01:58:00,080
segment type

1343
01:58:00,080 --> 01:58:01,920
there could be at most 255 in a given

1344
01:58:01,920 --> 01:58:04,560
segment if you want to go to

1345
01:58:04,560 --> 01:58:07,119
you know no two segments in a row that

1346
01:58:07,119 --> 01:58:08,400
are the same type

1347
01:58:08,400 --> 01:58:10,800
you have to add a new segment and an

1348
01:58:10,800 --> 01:58:12,480
awful lot of people had bugs

1349
01:58:12,480 --> 01:58:13,679
you know for a number of years that

1350
01:58:13,679 --> 01:58:15,360
didn't get exercised until people like

1351
01:58:15,360 --> 01:58:16,800
ripest are playing around with these

1352
01:58:16,800 --> 01:58:19,040
things experimentally

1353
01:58:19,040 --> 01:58:20,960
which people found to their horror when

1354
01:58:20,960 --> 01:58:23,920
the internet started crashing

1355
01:58:23,920 --> 01:58:25,920
so it might be worthwhile mentioning

1356
01:58:25,920 --> 01:58:27,360
that uh

1357
01:58:27,360 --> 01:58:29,199
this is one of the possible contributors

1358
01:58:29,199 --> 01:58:30,400
towards long

1359
01:58:30,400 --> 01:58:32,560
paths being bad not necessarily that

1360
01:58:32,560 --> 01:58:34,400
it's broken in bgp but

1361
01:58:34,400 --> 01:58:36,480
implementations often are broken in this

1362
01:58:36,480 --> 01:58:40,320
respect and something to watch out for

1363
01:58:40,320 --> 01:58:42,320
i agree we'll add that and it looks like

1364
01:58:42,320 --> 01:58:43,760
there's different opinions on using

1365
01:58:43,760 --> 01:58:45,840
origin code so we'll have to

1366
01:58:45,840 --> 01:58:49,840
work that out as a working group

1367
01:58:55,280 --> 01:58:58,080
the difference in opinion on origin code

1368
01:58:58,080 --> 01:59:00,000
what i understood from razor's

1369
01:59:00,000 --> 01:59:02,880
contribution is that he merely posted it

1370
01:59:02,880 --> 01:59:03,280
that

1371
01:59:03,280 --> 01:59:06,320
it is possible to it may be possible to

1372
01:59:06,320 --> 01:59:08,000
use the origin code

1373
01:59:08,000 --> 01:59:09,840
as an alternative mechanism to

1374
01:59:09,840 --> 01:59:11,280
accomplish the same

1375
01:59:11,280 --> 01:59:13,679
as what was set out to accomplish with

1376
01:59:13,679 --> 01:59:14,800
the pre-pending

1377
01:59:14,800 --> 01:59:18,000
not that origin code is a

1378
01:59:18,000 --> 01:59:20,239
better practice than prepending just

1379
01:59:20,239 --> 01:59:21,440
that it's

1380
01:59:21,440 --> 01:59:24,960
it was enumerating was my

1381
01:59:24,960 --> 01:59:27,840
understanding of it

1382
01:59:28,800 --> 01:59:31,199
but yes origin codes is not a reliable

1383
01:59:31,199 --> 01:59:32,080
mechanism

1384
01:59:32,080 --> 01:59:34,880
uh just as as path length also is not a

1385
01:59:34,880 --> 01:59:36,560
reliable mechanism for traffic

1386
01:59:36,560 --> 01:59:39,760
engineering in the wild wild

1387
01:59:42,840 --> 01:59:45,840
incidents

1388
01:59:46,800 --> 01:59:49,840
so since we're deprecating uh as sets

1389
01:59:49,840 --> 01:59:52,719
from the as path attribute does the

1390
01:59:52,719 --> 01:59:54,400
group feel that that frees up

1391
01:59:54,400 --> 01:59:57,520
for longer as paths no i'm calling

1392
01:59:57,520 --> 01:59:59,840
joking

1393
02:00:01,920 --> 02:00:05,920
um mike

1394
02:00:05,920 --> 02:00:09,119
my summary of of uh the feedback

1395
02:00:09,119 --> 02:00:12,719
on this presentation appears to be that

1396
02:00:12,719 --> 02:00:15,199
the effort should be focused on seeing

1397
02:00:15,199 --> 02:00:16,400
if

1398
02:00:16,400 --> 02:00:18,960
nobody's questioning whether 5 is an

1399
02:00:18,960 --> 02:00:20,000
appropriate number

1400
02:00:20,000 --> 02:00:23,119
today based on the data it was derived

1401
02:00:23,119 --> 02:00:24,080
from

1402
02:00:24,080 --> 02:00:26,320
but to make the document more future

1403
02:00:26,320 --> 02:00:28,000
proof it would be good to

1404
02:00:28,000 --> 02:00:31,520
set out to see if the number five can be

1405
02:00:31,520 --> 02:00:34,320
constructed from different data sources

1406
02:00:34,320 --> 02:00:36,320
uh that perhaps are more applicable to

1407
02:00:36,320 --> 02:00:37,440
the local environment

1408
02:00:37,440 --> 02:00:40,639
in which operator recites reading the

1409
02:00:40,639 --> 02:00:43,520
future bcp

1410
02:00:44,080 --> 02:00:47,360
the chairs are available if you

1411
02:00:47,360 --> 02:00:50,320
want additional help in this regards or

1412
02:00:50,320 --> 02:00:52,400
maybe

1413
02:00:52,400 --> 02:00:54,639
you have goals and plans but i look

1414
02:00:54,639 --> 02:00:56,800
forward to continued updates on this

1415
02:00:56,800 --> 02:00:59,199
draft

1416
02:00:59,440 --> 02:01:00,719
great thanks yeah this has been very

1417
02:01:00,719 --> 02:01:02,560
helpful

1418
02:01:02,560 --> 02:01:05,599
thank you for your time mike

1419
02:01:05,679 --> 02:01:09,360
um with that we have arrived at the

1420
02:01:09,360 --> 02:01:13,040
top of the hour and i would like to

1421
02:01:13,040 --> 02:01:16,320
conclude this grow session

1422
02:01:16,320 --> 02:01:19,840
the next itf session will be or will not

1423
02:01:19,840 --> 02:01:20,239
be

1424
02:01:20,239 --> 02:01:23,119
in san francisco but it will be numbered

1425
02:01:23,119 --> 02:01:25,840
itf 101

1426
02:01:25,840 --> 02:01:29,040
and we hope to see everybody there again

1427
02:01:29,040 --> 02:01:30,719
thank you for your time today thank you

1428
02:01:30,719 --> 02:01:32,960
for your contributions in chat

1429
02:01:32,960 --> 02:01:36,480
and at the microphone and i wish you

1430
02:01:36,480 --> 02:01:51,839
a pleasant day

1431
02:01:52,159 --> 02:01:55,759
the chats are saved yes

1432
02:01:57,679 --> 02:02:00,800
so how do we end a meeting

1433
02:02:00,800 --> 02:02:02,800
it's going to be a long while because we

1434
02:02:02,800 --> 02:02:05,599
need wraparound to get to 101 in san

1435
02:02:05,599 --> 02:02:07,840
francisco

1436
02:02:07,840 --> 02:02:10,719
sorry can you repeat

1437
02:02:11,040 --> 02:02:15,040
san francisco will be 111 not 101.

1438
02:02:15,040 --> 02:02:19,679
oh did i mispronounce

1439
02:02:19,679 --> 02:02:22,320
rudiger i could hear you for a brief

1440
02:02:22,320 --> 02:02:24,400
second

1441
02:02:24,400 --> 02:02:27,679
uh leaving the meeting i guess

1442
02:02:27,679 --> 02:02:32,639
the uh the chair just leaves the room

1443
02:02:32,639 --> 02:02:35,760
i will try that

1444
02:02:36,880 --> 02:02:39,360
we can hang out here close your brush

1445
02:02:39,360 --> 02:02:42,159
yes we watch it

1446
02:02:42,159 --> 02:02:47,760
okay no it did not work

1447
02:02:47,760 --> 02:02:51,280
but well okay that's that's not really a

1448
02:02:51,280 --> 02:02:53,040
hard problem

1449
02:02:53,040 --> 02:02:56,320
by the way are you enough you said five

1450
02:02:56,320 --> 02:02:57,119
was

1451
02:02:57,119 --> 02:03:00,080
the right number right now please write

1452
02:03:00,080 --> 02:03:00,719
down

1453
02:03:00,719 --> 02:03:02,920
the justification for that

1454
02:03:02,920 --> 02:03:05,920
algorithmically

1455
02:03:07,040 --> 02:03:13,599
and i am closing my browser ciao

