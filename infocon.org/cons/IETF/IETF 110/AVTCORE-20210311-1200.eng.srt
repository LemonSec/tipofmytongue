1
00:00:10,880 --> 00:00:12,160
good morning everybody

2
00:00:12,160 --> 00:00:13,519
i think we'll give it a few more minutes

3
00:00:13,519 --> 00:00:15,759
for people to continue to trickle in

4
00:00:15,759 --> 00:00:17,039
especially

5
00:00:17,039 --> 00:00:31,840
those poor souls on the west coast

6
00:00:32,399 --> 00:00:35,440
yeah alex the guard is uh volunteered to

7
00:00:35,440 --> 00:00:36,800
take notes

8
00:00:36,800 --> 00:00:38,399
i'm sure that he would appreciate if

9
00:00:38,399 --> 00:00:41,040
anybody else wanted to join him in the

10
00:00:41,040 --> 00:00:45,120
um cody md

11
00:00:52,480 --> 00:00:55,600
from the agenda page the detector gender

12
00:00:55,600 --> 00:00:57,680
page

13
00:00:57,680 --> 00:00:59,840
especially because i believe i'll

14
00:00:59,840 --> 00:01:01,199
actually are you

15
00:01:01,199 --> 00:01:02,320
you're one of the presenters on that

16
00:01:02,320 --> 00:01:05,760
frame right so i need somebody else to

17
00:01:05,760 --> 00:01:08,640
take notes for the period while you are

18
00:01:08,640 --> 00:01:10,840
um

19
00:01:10,840 --> 00:01:13,840
presenting

20
00:01:17,040 --> 00:01:21,520
uh okay good and bernard seems to be

21
00:01:21,520 --> 00:01:23,040
bouncing on and off so maybe he's having

22
00:01:23,040 --> 00:01:24,240
network issues maybe we should wait

23
00:01:24,240 --> 00:01:27,759
until he's ready

24
00:01:27,759 --> 00:01:30,479
and this is very it will be your stand

25
00:01:30,479 --> 00:01:31,119
in a.d

26
00:01:31,119 --> 00:01:33,920
for uh for this session i think uh it's

27
00:01:33,920 --> 00:01:35,920
4am from murray so nope here

28
00:01:35,920 --> 00:01:38,840
mary's murray just came on all right

29
00:01:38,840 --> 00:01:41,840
great

30
00:02:06,840 --> 00:02:09,840
but

31
00:02:20,840 --> 00:02:22,959
much bernard a few more minutes

32
00:02:22,959 --> 00:02:26,160
hopefully i'll be back soon

33
00:02:29,040 --> 00:02:31,920
i'd rather not run it entirely by myself

34
00:02:31,920 --> 00:02:37,839
but i will if i have to

35
00:04:12,840 --> 00:04:15,840
so

36
00:04:26,840 --> 00:04:29,840
foreign

37
00:04:32,080 --> 00:04:33,199
all right i guess i'll get started

38
00:04:33,199 --> 00:04:35,759
hopefully bernard will be able to join

39
00:04:35,759 --> 00:04:39,120
soon i'm not quite sure what's up there

40
00:04:39,120 --> 00:04:41,199
he was briefly here but then tone

41
00:04:41,199 --> 00:04:42,880
disconnected so maybe it's having

42
00:04:42,880 --> 00:04:46,320
network issues so anyway welcome to

43
00:04:46,320 --> 00:04:50,800
uh avt core at the virtual idf

44
00:04:50,800 --> 00:04:54,320
um i'm your chair bernard is your

45
00:04:54,320 --> 00:04:56,160
hopefully your other chair soon

46
00:04:56,160 --> 00:04:58,800
uh alex guyard is taking notes on cody

47
00:04:58,800 --> 00:04:59,600
md

48
00:04:59,600 --> 00:05:01,360
if anybody else wants to help out there

49
00:05:01,360 --> 00:05:03,520
i'm sure he'd appreciate it

50
00:05:03,520 --> 00:05:06,960
uh let's see meeting tips

51
00:05:06,960 --> 00:05:09,759
um hopefully if you're already

52
00:05:09,759 --> 00:05:11,520
successfully here

53
00:05:11,520 --> 00:05:15,840
you know most of these things um

54
00:05:15,840 --> 00:05:17,520
please use your headphones when speaking

55
00:05:17,520 --> 00:05:19,600
if possible to avoid echo

56
00:05:19,600 --> 00:05:22,880
um other things

57
00:05:22,880 --> 00:05:26,800
let's see and let's see this

58
00:05:27,680 --> 00:05:29,360
um andrew you can enter the cube by

59
00:05:29,360 --> 00:05:31,360
using the raise hand tool

60
00:05:31,360 --> 00:05:34,720
um you'll need to unmute magnet yourself

61
00:05:34,720 --> 00:05:35,759
manually

62
00:05:35,759 --> 00:05:37,680
uh video is separate and audio video is

63
00:05:37,680 --> 00:05:39,520
appreciated if you want but remember you

64
00:05:39,520 --> 00:05:40,400
have to

65
00:05:40,400 --> 00:05:44,159
unmute audio also separately

66
00:05:44,560 --> 00:05:47,600
uh no well that well applies hopefully

67
00:05:47,600 --> 00:05:49,280
everybody is familiar with this if not

68
00:05:49,280 --> 00:05:51,280
you can follow the links

69
00:05:51,280 --> 00:05:54,320
on this slide here

70
00:05:54,560 --> 00:05:56,800
or go to many other places on the ietf

71
00:05:56,800 --> 00:05:58,080
website

72
00:05:58,080 --> 00:05:59,360
it's hard to miss it if you go to the

73
00:05:59,360 --> 00:06:01,759
idf

74
00:06:03,440 --> 00:06:05,600
this here are the links to various

75
00:06:05,600 --> 00:06:06,960
things

76
00:06:06,960 --> 00:06:11,039
um the jabber room is uh

77
00:06:11,039 --> 00:06:14,720
bridged here in the web uh

78
00:06:14,720 --> 00:06:19,360
in the midico so if you don't need to

79
00:06:19,360 --> 00:06:21,120
uh do anything special for that it's

80
00:06:21,120 --> 00:06:22,479
just there in the

81
00:06:22,479 --> 00:06:25,520
dialogue balloon tab and

82
00:06:25,520 --> 00:06:28,720
uh if

83
00:06:28,720 --> 00:06:31,840
anybody actually um does anybody if

84
00:06:31,840 --> 00:06:32,319
anybody

85
00:06:32,319 --> 00:06:33,680
is not able to talk out loud for

86
00:06:33,680 --> 00:06:34,880
whatever reason maybe your family's

87
00:06:34,880 --> 00:06:35,680
asleep

88
00:06:35,680 --> 00:06:37,520
um we can say mike at the room if we

89
00:06:37,520 --> 00:06:38,880
could have a volunteer

90
00:06:38,880 --> 00:06:40,720
to relay anybody want to relay from the

91
00:06:40,720 --> 00:06:42,319
chat

92
00:06:42,319 --> 00:06:44,479
uh if not i'll try to keep an eye on the

93
00:06:44,479 --> 00:06:46,560
chat that'll be hard with

94
00:06:46,560 --> 00:06:51,840
if i'm to steal the chair here um

95
00:06:53,199 --> 00:06:54,639
but i know you have some i'm doing this

96
00:06:54,639 --> 00:06:57,520
and also dr uh alex

97
00:06:57,520 --> 00:07:00,639
yes uh jonathan i'll keep an eye on the

98
00:07:00,639 --> 00:07:01,280
chat

99
00:07:01,280 --> 00:07:04,159
wow great thank you

100
00:07:07,759 --> 00:07:11,360
okay here's our agenda

101
00:07:11,360 --> 00:07:14,400
we've had a few tweaks

102
00:07:14,720 --> 00:07:19,360
for things uh

103
00:07:19,360 --> 00:07:21,199
so if anybody has any comments let me

104
00:07:21,199 --> 00:07:24,240
know we've got a few

105
00:07:24,240 --> 00:07:28,960
um uh work working group items that are

106
00:07:28,960 --> 00:07:30,880
going to deal with relatively quickly

107
00:07:30,880 --> 00:07:32,319
and then spend most of the time on

108
00:07:32,319 --> 00:07:35,360
asp encapsulation

109
00:07:35,360 --> 00:07:38,639
any comments on that

110
00:07:39,440 --> 00:07:45,199
good all right uh we've had

111
00:07:45,199 --> 00:07:46,879
a number of drafts published in the last

112
00:07:46,879 --> 00:07:48,800
idea so that's very exciting

113
00:07:48,800 --> 00:07:51,280
many of those were cluster 238 so that's

114
00:07:51,280 --> 00:07:53,199
even more exciting

115
00:07:53,199 --> 00:07:56,800
uh so uh good work keep

116
00:07:56,800 --> 00:08:01,280
doing teamwork uh we've done pub wrecks

117
00:08:01,280 --> 00:08:05,440
on the party rdt mix

118
00:08:05,440 --> 00:08:08,800
we've had a few working class calls

119
00:08:08,800 --> 00:08:11,360
which many of which will have commentary

120
00:08:11,360 --> 00:08:12,639
on

121
00:08:12,639 --> 00:08:14,000
we have one expired draft we're going to

122
00:08:14,000 --> 00:08:15,759
mention in a moment

123
00:08:15,759 --> 00:08:21,039
and we adopted three day work items

124
00:08:22,319 --> 00:08:25,120
frame marking we had an interim meeting

125
00:08:25,120 --> 00:08:26,160
and

126
00:08:26,160 --> 00:08:29,120
had a consensus

127
00:08:29,360 --> 00:08:32,800
on this that we're planning to

128
00:08:34,399 --> 00:08:37,279
help move into experimental because of

129
00:08:37,279 --> 00:08:40,880
this limitation status um

130
00:08:40,880 --> 00:08:42,719
and we're going and we're removing the

131
00:08:42,719 --> 00:08:46,240
dependency of vp9 on it

132
00:08:46,959 --> 00:08:50,399
this was the discussion on the list

133
00:08:53,200 --> 00:08:56,320
so there's still a few items to resolve

134
00:08:56,320 --> 00:08:56,959
but i

135
00:08:56,959 --> 00:09:00,240
think uh we're going pretty well there

136
00:09:00,240 --> 00:09:02,080
i don't think we have this on the agenda

137
00:09:02,080 --> 00:09:04,640
but i don't remember

138
00:09:06,839 --> 00:09:09,839
um

139
00:09:10,160 --> 00:09:13,120
yes i did just publish uh uh an update

140
00:09:13,120 --> 00:09:13,440
that

141
00:09:13,440 --> 00:09:15,600
watches all of the uh the benign

142
00:09:15,600 --> 00:09:16,560
information

143
00:09:16,560 --> 00:09:21,120
the things um and i try to dig into the

144
00:09:21,120 --> 00:09:23,200
the issues that the implementer reported

145
00:09:23,200 --> 00:09:24,959
about

146
00:09:24,959 --> 00:09:26,959
i think we need to drill uh down to a

147
00:09:26,959 --> 00:09:28,320
little bit more because from what i can

148
00:09:28,320 --> 00:09:29,200
tell

149
00:09:29,200 --> 00:09:31,360
it's nothing to do with vpa it's it's

150
00:09:31,360 --> 00:09:33,680
it's in both vpa and vp9

151
00:09:33,680 --> 00:09:35,519
and it's really a non-issue i don't i

152
00:09:35,519 --> 00:09:37,440
don't see anything that mandates

153
00:09:37,440 --> 00:09:40,720
uh sfp rewriting of anything um

154
00:09:40,720 --> 00:09:44,800
or requirement for incrementing by one

155
00:09:44,800 --> 00:09:47,600
so maybe we need to you know follow up

156
00:09:47,600 --> 00:09:48,880
on the list and figure out

157
00:09:48,880 --> 00:09:50,480
what really needs to happen there if

158
00:09:50,480 --> 00:09:52,800
anything

159
00:09:53,200 --> 00:09:54,880
all right yeah so probably uh let's

160
00:09:54,880 --> 00:09:57,360
raise that on the list

161
00:09:57,360 --> 00:09:59,360
yeah i i opened a thread this morning on

162
00:09:59,360 --> 00:10:01,040
it sounds good

163
00:10:01,040 --> 00:10:02,480
yeah so if anybody has any comments on

164
00:10:02,480 --> 00:10:05,839
that please respond on the list

165
00:10:06,959 --> 00:10:10,560
uh the tetra draft um

166
00:10:10,560 --> 00:10:12,720
we aim the chairs emailed the draft it's

167
00:10:12,720 --> 00:10:14,800
expired more than a year ago

168
00:10:14,800 --> 00:10:16,079
uh the chairs emailed the draft to

169
00:10:16,079 --> 00:10:18,000
authors and no response so our proposal

170
00:10:18,000 --> 00:10:21,440
is to drop this milestone and work item

171
00:10:21,440 --> 00:10:22,079
for now

172
00:10:22,079 --> 00:10:25,760
and if uh interest returns in this

173
00:10:25,760 --> 00:10:28,000
always obviously be adopted does anybody

174
00:10:28,000 --> 00:10:33,839
have any objection to this

175
00:10:34,640 --> 00:10:37,680
um i'll mention this on the list also

176
00:10:37,680 --> 00:10:40,880
um but sounds like there's no objection

177
00:10:40,880 --> 00:10:43,360
so that's good

178
00:10:44,839 --> 00:10:47,600
uh so um

179
00:10:47,600 --> 00:10:49,680
that's it for the chair items now i'm

180
00:10:49,680 --> 00:10:50,640
the first

181
00:10:50,640 --> 00:10:52,240
person on the agenda should have to be

182
00:10:52,240 --> 00:10:53,920
relatively quick

183
00:10:53,920 --> 00:10:56,640
um and so unless there's anything else

184
00:10:56,640 --> 00:10:57,600
on the chair items so

185
00:10:57,600 --> 00:11:01,839
about that

186
00:11:02,720 --> 00:11:06,560
so uh status of this uh we published

187
00:11:06,560 --> 00:11:07,120
after

188
00:11:07,120 --> 00:11:10,160
eleven all the authors of um infinite

189
00:11:10,160 --> 00:11:12,839
effort working for class call

190
00:11:12,839 --> 00:11:16,000
um all the authors i'll

191
00:11:16,000 --> 00:11:18,079
uh acknowledge their bcp 7879

192
00:11:18,079 --> 00:11:19,920
obligations

193
00:11:19,920 --> 00:11:23,680
um we have uh

194
00:11:23,680 --> 00:11:26,160
christopher raised a few issues uh

195
00:11:26,160 --> 00:11:27,680
entering working class call which will

196
00:11:27,680 --> 00:11:28,959
be on a

197
00:11:28,959 --> 00:11:31,279
slide in a minute uh there are some ipr

198
00:11:31,279 --> 00:11:32,320
disclosures

199
00:11:32,320 --> 00:11:35,279
which i'll also mention and our proposal

200
00:11:35,279 --> 00:11:37,200
is to send to pub wreck

201
00:11:37,200 --> 00:11:40,959
after 12. um

202
00:11:40,959 --> 00:11:56,000
now there's any objection to that

203
00:11:56,000 --> 00:11:59,040
a list about uh what looks like an

204
00:11:59,040 --> 00:12:01,360
omission in the vp9 draft i don't know

205
00:12:01,360 --> 00:12:02,720
if it was intentional or not but

206
00:12:02,720 --> 00:12:04,720
something that was in vp8

207
00:12:04,720 --> 00:12:09,279
was uh emitted in vp9 and um

208
00:12:09,279 --> 00:12:11,440
it it impacts on marking and i think

209
00:12:11,440 --> 00:12:12,720
it'll impact any

210
00:12:12,720 --> 00:12:15,120
anything similar to frame marking like

211
00:12:15,120 --> 00:12:16,079
uh 81

212
00:12:16,079 --> 00:12:19,200
dependency descriptor or anyone that

213
00:12:19,200 --> 00:12:19,839
wants to do

214
00:12:19,839 --> 00:12:22,720
any kind of intelligent marking or

215
00:12:22,720 --> 00:12:23,600
analysis

216
00:12:23,600 --> 00:12:26,160
of the vp9 streams without having to go

217
00:12:26,160 --> 00:12:27,519
really deep into the

218
00:12:27,519 --> 00:12:30,320
bitstream um basically it's difficult to

219
00:12:30,320 --> 00:12:31,839
identify whether something is a

220
00:12:31,839 --> 00:12:35,040
reference frame or not uh just my proper

221
00:12:35,040 --> 00:12:38,240
inspection of the headers

222
00:12:38,240 --> 00:12:41,360
to figure it out and i'm guessing that

223
00:12:41,360 --> 00:12:43,760
may be an omission or an oversight

224
00:12:43,760 --> 00:12:47,120
because it was their vp8 um

225
00:12:47,120 --> 00:12:50,560
and maybe just uh you know

226
00:12:50,560 --> 00:12:53,680
fell off the table yeah i think

227
00:12:53,680 --> 00:12:55,040
par part of that is you know whether

228
00:12:55,040 --> 00:12:57,519
it's um it's a somewhat of a complicated

229
00:12:57,519 --> 00:12:58,000
question

230
00:12:58,000 --> 00:12:59,760
if something is uh once you have

231
00:12:59,760 --> 00:13:03,200
temporal scalability i mean

232
00:13:03,680 --> 00:13:06,079
because you know are you going to want

233
00:13:06,079 --> 00:13:06,720
people to

234
00:13:06,720 --> 00:13:09,600
rewrite as a dependency for this for the

235
00:13:09,600 --> 00:13:12,000
layers that are actually being forwarded

236
00:13:12,000 --> 00:13:14,079
but um i'll take a look at that uh in

237
00:13:14,079 --> 00:13:15,360
more detail

238
00:13:15,360 --> 00:13:17,600
um i mean i don't think we want to try

239
00:13:17,600 --> 00:13:19,200
to actually change

240
00:13:19,200 --> 00:13:20,639
the bits of the wire at this point given

241
00:13:20,639 --> 00:13:22,720
how much vp9

242
00:13:22,720 --> 00:13:24,399
deployment there is but i'll try to take

243
00:13:24,399 --> 00:13:27,120
a look and see if i can

244
00:13:27,120 --> 00:13:28,959
figure that out i mean it may be maybe

245
00:13:28,959 --> 00:13:30,480
that you do need to dig into the actual

246
00:13:30,480 --> 00:13:31,839
vp9 bitstream

247
00:13:31,839 --> 00:13:33,200
which i agree would possibly be

248
00:13:33,200 --> 00:13:36,480
unfortunate but um

249
00:13:36,639 --> 00:13:40,079
i'd rather not change the uh like i said

250
00:13:40,079 --> 00:13:41,120
we've got a

251
00:13:41,120 --> 00:13:42,720
very wide deployment of ep9 at this

252
00:13:42,720 --> 00:13:44,320
point uh so

253
00:13:44,320 --> 00:13:45,760
i'd rather not change the bits of the

254
00:13:45,760 --> 00:13:49,040
wire if possible but um

255
00:13:49,040 --> 00:13:50,480
i think the biggest thing is to figure

256
00:13:50,480 --> 00:13:51,920
out the biggest thing is to figure out

257
00:13:51,920 --> 00:13:52,959
whether it was a conscious

258
00:13:52,959 --> 00:13:55,279
decision to omit it from vp9 whether it

259
00:13:55,279 --> 00:13:56,240
was a mistake

260
00:13:56,240 --> 00:13:58,240
i think that that would that would be

261
00:13:58,240 --> 00:13:59,920
the first yeah i mean

262
00:13:59,920 --> 00:14:02,399
i guess my questions are people actually

263
00:14:02,399 --> 00:14:04,560
i i think

264
00:14:04,560 --> 00:14:07,839
it was you know the people who were just

265
00:14:07,839 --> 00:14:09,839
those of us who were designing the

266
00:14:09,839 --> 00:14:12,800
excuse me uh the vp9

267
00:14:12,800 --> 00:14:14,639
this stream weren't they didn't have any

268
00:14:14,639 --> 00:14:16,480
use for that flag so

269
00:14:16,480 --> 00:14:18,240
you know we we didn't see i think we

270
00:14:18,240 --> 00:14:19,600
didn't i mean

271
00:14:19,600 --> 00:14:20,880
we didn't think of it when we designed

272
00:14:20,880 --> 00:14:22,880
it because we weren't using it so

273
00:14:22,880 --> 00:14:25,760
um i guess the question is is there are

274
00:14:25,760 --> 00:14:28,160
people using that flag

275
00:14:28,160 --> 00:14:31,279
from vp8 um rather than using temporal

276
00:14:31,279 --> 00:14:33,760
scalability which serves

277
00:14:33,760 --> 00:14:35,920
i'd say much the same purpose to a

278
00:14:35,920 --> 00:14:38,639
somewhat uh

279
00:14:39,600 --> 00:14:43,120
with somewhat more flexibility but um

280
00:14:43,120 --> 00:14:44,240
might be better to answer this on the

281
00:14:44,240 --> 00:14:47,519
list when i'm more awake

282
00:14:48,959 --> 00:14:51,199
uh sam bernard i see you now are you

283
00:14:51,199 --> 00:14:52,399
actually here at alberta because that

284
00:14:52,399 --> 00:14:55,199
would be awesome if you were

285
00:14:55,920 --> 00:14:59,440
uh yes oh excellent good

286
00:14:59,440 --> 00:15:00,880
i saw you were bouncing in and out

287
00:15:00,880 --> 00:15:04,720
before so hopefully you're stapled now

288
00:15:07,120 --> 00:15:10,240
all right so um next week we do have

289
00:15:10,240 --> 00:15:12,560
some ipr disclosures

290
00:15:12,560 --> 00:15:16,639
on uh the vp9 draft

291
00:15:16,639 --> 00:15:20,160
yeah i had sent those to the list

292
00:15:20,160 --> 00:15:23,600
earlier and they have

293
00:15:23,600 --> 00:15:26,240
been posted as they came in to the list

294
00:15:26,240 --> 00:15:27,040
that

295
00:15:27,040 --> 00:15:30,320
they related to um so the question for

296
00:15:30,320 --> 00:15:31,040
the group is

297
00:15:31,040 --> 00:15:33,120
is there anything that thinks we should

298
00:15:33,120 --> 00:15:34,320
do about this

299
00:15:34,320 --> 00:15:36,320
we did not hear anything uh any

300
00:15:36,320 --> 00:15:38,160
suggestions on the list

301
00:15:38,160 --> 00:15:41,360
uh or should we uh just

302
00:15:41,360 --> 00:15:43,680
ahead

303
00:15:45,360 --> 00:15:47,680
so is there anyone uh let me put it this

304
00:15:47,680 --> 00:15:49,440
way is there anyone who objects to

305
00:15:49,440 --> 00:15:50,320
moving

306
00:15:50,320 --> 00:15:52,959
forward with vp9 uh given the

307
00:15:52,959 --> 00:15:54,160
disclosures that

308
00:15:54,160 --> 00:15:56,959
uh we've seen

309
00:16:03,040 --> 00:16:04,560
anyone uh put up their hand i don't

310
00:16:04,560 --> 00:16:06,079
think so

311
00:16:06,079 --> 00:16:08,959
i don't see anybody there anything in

312
00:16:08,959 --> 00:16:11,680
the jabber room

313
00:16:12,560 --> 00:16:18,479
nope okay i think we have our answer

314
00:16:19,839 --> 00:16:22,320
and finally we have so crystal raised

315
00:16:22,320 --> 00:16:23,680
some

316
00:16:23,680 --> 00:16:26,959
questions on the stp uh issues

317
00:16:26,959 --> 00:16:29,519
um as a meta issue he sort of raised

318
00:16:29,519 --> 00:16:30,720
that we probably should be sending these

319
00:16:30,720 --> 00:16:32,720
things to the stp directorate but

320
00:16:32,720 --> 00:16:34,240
we didn't so we'll try to do that more

321
00:16:34,240 --> 00:16:36,160
of that going forward but

322
00:16:36,160 --> 00:16:38,720
um specifically on this he raised some

323
00:16:38,720 --> 00:16:40,720
issues on the sap negotiation

324
00:16:40,720 --> 00:16:44,480
um my proposal there are

325
00:16:44,480 --> 00:16:47,519
three parameters on vp9 profile id max

326
00:16:47,519 --> 00:16:50,079
frame rate and max frame size my

327
00:16:50,079 --> 00:16:52,160
proposal is the profile id

328
00:16:52,160 --> 00:16:54,079
it needs to stay unchanged and answers

329
00:16:54,079 --> 00:16:55,759
updated offers

330
00:16:55,759 --> 00:16:57,440
um if you want to do profile id use you

331
00:16:57,440 --> 00:16:59,680
know negotiate a new payload type number

332
00:16:59,680 --> 00:17:01,600
whereas max frame rate and max frame

333
00:17:01,600 --> 00:17:04,160
size are declarative

334
00:17:04,160 --> 00:17:07,119
either side can add it or change that in

335
00:17:07,119 --> 00:17:09,520
either an answer or an updated offer

336
00:17:09,520 --> 00:17:13,119
um and then relatedly we don't actually

337
00:17:13,119 --> 00:17:14,400
say

338
00:17:14,400 --> 00:17:15,280
christopher also pointed out there

339
00:17:15,280 --> 00:17:18,400
wasn't any language saying what um

340
00:17:18,400 --> 00:17:21,119
you know somebody who receives an stp

341
00:17:21,119 --> 00:17:21,439
and

342
00:17:21,439 --> 00:17:24,720
this is a media sender um actually it

343
00:17:24,720 --> 00:17:26,720
has to do in response to these

344
00:17:26,720 --> 00:17:29,919
and uh the important question there

345
00:17:29,919 --> 00:17:34,080
is whether max frame rate and max

346
00:17:34,080 --> 00:17:36,799
size you should not or must not exceed

347
00:17:36,799 --> 00:17:38,480
them

348
00:17:38,480 --> 00:17:41,600
excuse me so

349
00:17:41,600 --> 00:17:46,400
i'd say there my inclination is to say

350
00:17:46,400 --> 00:17:49,520
would be to say should not um but

351
00:17:49,520 --> 00:17:51,360
i see justin in the queue so he can get

352
00:17:51,360 --> 00:17:54,320
some in the bands

353
00:17:58,840 --> 00:18:01,840
kristen

354
00:18:04,160 --> 00:18:06,320
should is probably appropriate here

355
00:18:06,320 --> 00:18:08,400
simply because of the fact that

356
00:18:08,400 --> 00:18:11,600
uh you know primarily it's a pixel rate

357
00:18:11,600 --> 00:18:14,480
you know limitation if one exists and

358
00:18:14,480 --> 00:18:15,919
like for a screen chair or something

359
00:18:15,919 --> 00:18:17,760
like that you may find yourself

360
00:18:17,760 --> 00:18:20,160
exceeding like one of these dimensions

361
00:18:20,160 --> 00:18:21,200
um

362
00:18:21,200 --> 00:18:22,640
i think it just looks like a pretty

363
00:18:22,640 --> 00:18:24,320
heavy hammer you know given that this is

364
00:18:24,320 --> 00:18:26,960
marginally advisory

365
00:18:26,960 --> 00:18:29,039
all right that was my inclination too so

366
00:18:29,039 --> 00:18:30,000
um

367
00:18:30,000 --> 00:18:31,600
i guess like i said the important the

368
00:18:31,600 --> 00:18:33,280
other important question is

369
00:18:33,280 --> 00:18:35,360
do you know before both of these things

370
00:18:35,360 --> 00:18:37,600
do browsers will any

371
00:18:37,600 --> 00:18:39,120
existing browser applications choke or

372
00:18:39,120 --> 00:18:40,799
will they just they just read this as

373
00:18:40,799 --> 00:18:42,000
advisory and we'll try to decode

374
00:18:42,000 --> 00:18:43,360
everything i mean my suspicion is i try

375
00:18:43,360 --> 00:18:45,360
to decode everything but i just wanted

376
00:18:45,360 --> 00:18:48,320
to make sure that was the case

377
00:18:52,000 --> 00:18:55,200
um are you still in the queue for

378
00:18:55,200 --> 00:18:56,559
uh justin or i don't know i need to

379
00:18:56,559 --> 00:18:58,480
remove you all right

380
00:18:58,480 --> 00:19:00,320
all right um so yeah so it sounds like

381
00:19:00,320 --> 00:19:01,600
that we

382
00:19:01,600 --> 00:19:04,640
i'll make that it should um i'll just

383
00:19:04,640 --> 00:19:05,039
and

384
00:19:05,039 --> 00:19:07,200
make do the rest of these i'll just say

385
00:19:07,200 --> 00:19:08,559
one more

386
00:19:08,559 --> 00:19:11,600
uh comment there and i'll publish

387
00:19:11,600 --> 00:19:14,880
a draft 12 and then um our

388
00:19:14,880 --> 00:19:17,520
belief is that we don't need to do

389
00:19:17,520 --> 00:19:18,559
anything further

390
00:19:18,559 --> 00:19:20,320
uh we don't need to do any update work

391
00:19:20,320 --> 00:19:21,280
with less call because these are

392
00:19:21,280 --> 00:19:22,240
basically just the

393
00:19:22,240 --> 00:19:23,600
verses for the issues if i'm working the

394
00:19:23,600 --> 00:19:25,280
last call so we'll do a public once all

395
00:19:25,280 --> 00:19:28,320
the 12 is out uh well i guess

396
00:19:28,320 --> 00:19:31,360
once we also do address the

397
00:19:31,360 --> 00:19:35,199
uh issue that pedal raised

398
00:19:36,720 --> 00:19:38,640
all right so that's it for that and next

399
00:19:38,640 --> 00:19:42,400
we have uh jpeg access

400
00:19:43,760 --> 00:19:46,960
everybody i hope you can hear me well

401
00:19:46,960 --> 00:19:50,799
yes so this is about the rtp input spec

402
00:19:50,799 --> 00:19:51,520
for a

403
00:19:51,520 --> 00:19:54,639
jpeg's content

404
00:19:57,840 --> 00:20:00,880
so the wglc

405
00:20:00,880 --> 00:20:03,919
announcement is concluded on

406
00:20:03,919 --> 00:20:07,039
february 23 3rd and there were five

407
00:20:07,039 --> 00:20:09,440
responses three positive and no

408
00:20:09,440 --> 00:20:10,720
objections and there were two

409
00:20:10,720 --> 00:20:13,440
uh questions most of the questions came

410
00:20:13,440 --> 00:20:14,640
from christos

411
00:20:14,640 --> 00:20:17,520
regarding the sdp and one came from

412
00:20:17,520 --> 00:20:18,480
india

413
00:20:18,480 --> 00:20:22,159
also regarding svp uh so next slide

414
00:20:22,159 --> 00:20:24,480
please

415
00:20:25,760 --> 00:20:29,360
thank you uh so uh the sdp questions

416
00:20:29,360 --> 00:20:29,760
from

417
00:20:29,760 --> 00:20:32,640
uh christopher uh were about uh the

418
00:20:32,640 --> 00:20:33,520
section six

419
00:20:33,520 --> 00:20:37,120
to four in our uh rtp payload spec

420
00:20:37,120 --> 00:20:39,520
which basically contained just a single

421
00:20:39,520 --> 00:20:41,280
uh sentence saying that all

422
00:20:41,280 --> 00:20:44,240
uh parameters are declarative uh but we

423
00:20:44,240 --> 00:20:45,280
wrote it

424
00:20:45,280 --> 00:20:48,559
to be more uh correct and and more

425
00:20:48,559 --> 00:20:50,720
information more contain more

426
00:20:50,720 --> 00:20:52,559
information to describe what we actually

427
00:20:52,559 --> 00:20:54,159
uh want

428
00:20:54,159 --> 00:20:57,520
um so so that's that's a

429
00:20:57,520 --> 00:20:59,840
rewrite and it's a full paragraph that

430
00:20:59,840 --> 00:21:02,080
was added to the to the document

431
00:21:02,080 --> 00:21:04,640
and then there was a question on

432
00:21:04,640 --> 00:21:06,880
optional versus mandatory parameters

433
00:21:06,880 --> 00:21:10,080
but uh we believe that this was already

434
00:21:10,080 --> 00:21:11,360
clear in the text because

435
00:21:11,360 --> 00:21:15,039
we really have one uh part where it says

436
00:21:15,039 --> 00:21:15,440
like

437
00:21:15,440 --> 00:21:18,559
uh mandatory parameters and and then uh

438
00:21:18,559 --> 00:21:20,159
another part it says like optional

439
00:21:20,159 --> 00:21:22,240
parameters so i don't

440
00:21:22,240 --> 00:21:24,640
think this was really an issue unless we

441
00:21:24,640 --> 00:21:26,960
um misunderstood the question

442
00:21:26,960 --> 00:21:29,200
uh so to be clear all parameters are

443
00:21:29,200 --> 00:21:30,720
optional except for

444
00:21:30,720 --> 00:21:33,039
the rate parameter and the transmode

445
00:21:33,039 --> 00:21:34,400
parameter

446
00:21:34,400 --> 00:21:37,440
and then we used wrong

447
00:21:37,440 --> 00:21:39,919
terminology in the text so we replaced

448
00:21:39,919 --> 00:21:42,720
the wording of sdp object everywhere

449
00:21:42,720 --> 00:21:46,080
with the sdp media description i think

450
00:21:46,080 --> 00:21:46,960
that's correct

451
00:21:46,960 --> 00:21:49,520
unless somebody tells me if it's not

452
00:21:49,520 --> 00:21:50,000
please

453
00:21:50,000 --> 00:21:52,960
let me know if it's not correct still

454
00:21:52,960 --> 00:21:53,440
and then

455
00:21:53,440 --> 00:21:56,080
from india there was a remark basically

456
00:21:56,080 --> 00:21:57,919
one of the optional parameters the

457
00:21:57,919 --> 00:21:59,520
interlaced parameter

458
00:21:59,520 --> 00:22:01,840
was accidentally spell corrected to

459
00:22:01,840 --> 00:22:03,919
become interlaced

460
00:22:03,919 --> 00:22:07,440
in revision 7 of our draft so i

461
00:22:07,440 --> 00:22:09,360
changed this back to to be to be

462
00:22:09,360 --> 00:22:10,799
interlaced again as

463
00:22:10,799 --> 00:22:13,840
is intended and this uh reflects with

464
00:22:13,840 --> 00:22:14,799
the other rtp

465
00:22:14,799 --> 00:22:19,200
uh standards and also with the 70 2110

466
00:22:19,200 --> 00:22:21,919
specification so so it should be

467
00:22:21,919 --> 00:22:24,320
interlaced that was a good

468
00:22:24,320 --> 00:22:28,000
fix and then we also had a small

469
00:22:28,000 --> 00:22:29,919
side question on the clock rates so

470
00:22:29,919 --> 00:22:32,080
indeed we specified originally that the

471
00:22:32,080 --> 00:22:34,559
clock rate should be 90 kilohertz but

472
00:22:34,559 --> 00:22:37,919
uh this is this this

473
00:22:37,919 --> 00:22:40,880
took like a an extra liberty and i think

474
00:22:40,880 --> 00:22:42,480
indeed the comment was correct that it's

475
00:22:42,480 --> 00:22:43,280
better to say

476
00:22:43,280 --> 00:22:46,000
it it must be 90 kilohertz so we changed

477
00:22:46,000 --> 00:22:46,960
that

478
00:22:46,960 --> 00:22:50,159
and made it a mandatory uh setting and i

479
00:22:50,159 --> 00:22:53,600
submitted draft 09 which addresses all

480
00:22:53,600 --> 00:22:54,000
the

481
00:22:54,000 --> 00:22:58,159
the questions and remarks uh normally uh

482
00:22:58,159 --> 00:23:01,840
uh so i think uh yeah the text is done

483
00:23:01,840 --> 00:23:04,320
uh and uh i would like people to review

484
00:23:04,320 --> 00:23:05,440
it maybe again

485
00:23:05,440 --> 00:23:08,559
or uh or to move it forward

486
00:23:08,559 --> 00:23:11,280
in the in the pipeline so that's it

487
00:23:11,280 --> 00:23:13,678
thank you

488
00:23:16,559 --> 00:23:19,360
i yeah i just want to add i i don't know

489
00:23:19,360 --> 00:23:21,200
what the next step would be so that's a

490
00:23:21,200 --> 00:23:22,000
question to the

491
00:23:22,000 --> 00:23:25,200
chairs so if they if they could

492
00:23:25,200 --> 00:23:28,720
point us in the right direction be very

493
00:23:28,720 --> 00:23:32,240
very helpful and appreciated

494
00:23:33,200 --> 00:23:37,280
uh well i how about submitting a draft

495
00:23:37,280 --> 00:23:41,679
with the sdp changes you described here

496
00:23:41,679 --> 00:23:45,440
the draft online so i i did that

497
00:23:45,440 --> 00:23:48,559
okay yes all right so then

498
00:23:48,559 --> 00:23:51,440
uh the next step i guess would be uh

499
00:23:51,440 --> 00:23:53,840
chair review and publication request

500
00:23:53,840 --> 00:23:58,080
yes if that if that's possible yes

501
00:24:02,080 --> 00:24:05,760
yep that sounds um

502
00:24:05,760 --> 00:24:08,320
go ahead please uh put that in the

503
00:24:08,320 --> 00:24:09,919
minutes

504
00:24:09,919 --> 00:24:11,279
so we know what the next step is on

505
00:24:11,279 --> 00:24:13,039
everything thank you

506
00:24:13,039 --> 00:24:16,159
okay yeah and if any questions pop up uh

507
00:24:16,159 --> 00:24:16,720
i'm

508
00:24:16,720 --> 00:24:20,080
available uh at your disposal so

509
00:24:20,080 --> 00:24:23,120
let me know thank you

510
00:24:28,559 --> 00:24:31,679
so yeah so well uh chairs will do our

511
00:24:31,679 --> 00:24:33,120
chair review make sure everything's

512
00:24:33,120 --> 00:24:34,640
reviewed and then we'll go with

513
00:24:34,640 --> 00:24:36,320
publication requests and we'll

514
00:24:36,320 --> 00:24:37,520
figure out whether bernard and i are

515
00:24:37,520 --> 00:24:40,158
driving that one

516
00:24:44,400 --> 00:24:48,159
all right next is cryptex and justin

517
00:24:52,159 --> 00:24:54,720
uh okay so you published the new version

518
00:24:54,720 --> 00:24:56,640
of the draft just the other day

519
00:24:56,640 --> 00:25:00,080
um one version of the draft or the oo

520
00:25:00,080 --> 00:25:03,120
is a working group document um

521
00:25:03,120 --> 00:25:06,159
01 basically changes the name of the

522
00:25:06,159 --> 00:25:08,320
parameter used to negotiate support for

523
00:25:08,320 --> 00:25:10,960
cryptex and stp

524
00:25:10,960 --> 00:25:13,120
we had a discussion on the list a month

525
00:25:13,120 --> 00:25:14,159
or two ago and

526
00:25:14,159 --> 00:25:16,559
a equals cryptex or came out as like the

527
00:25:16,559 --> 00:25:17,919
prevailing option

528
00:25:17,919 --> 00:25:20,480
that's been incorporated into zero one

529
00:25:20,480 --> 00:25:23,440
and there's some other editorial cleanup

530
00:25:23,440 --> 00:25:28,400
next slide

531
00:25:28,400 --> 00:25:30,640
up yeah so the things that the one thing

532
00:25:30,640 --> 00:25:32,320
remaining right now is inclusion of the

533
00:25:32,320 --> 00:25:33,279
test vectors

534
00:25:33,279 --> 00:25:35,120
um you know to demonstrate proper

535
00:25:35,120 --> 00:25:37,120
encryption using cryptex into the

536
00:25:37,120 --> 00:25:38,000
document

537
00:25:38,000 --> 00:25:39,440
uh once we have that i think we should

538
00:25:39,440 --> 00:25:41,279
be ready for for last call

539
00:25:41,279 --> 00:25:43,039
uh sergio is currently working on those

540
00:25:43,039 --> 00:25:44,320
test vectors

541
00:25:44,320 --> 00:25:46,480
um so i think you know for last call we

542
00:25:46,480 --> 00:25:47,760
should be looking at

543
00:25:47,760 --> 00:25:50,240
it's probably like this period between

544
00:25:50,240 --> 00:25:51,600
now and the next itf will probably be a

545
00:25:51,600 --> 00:25:54,799
good time to start that

546
00:25:54,880 --> 00:25:57,840
that's everything

547
00:26:02,240 --> 00:26:05,600
cool anybody else have any comments

548
00:26:05,600 --> 00:26:07,200
if not uh hopefully they'll be able to

549
00:26:07,200 --> 00:26:10,559
get that done soon

550
00:26:10,559 --> 00:26:12,320
justin do you think we should be ready

551
00:26:12,320 --> 00:26:13,760
for uh

552
00:26:13,760 --> 00:26:17,360
implementation very very soon

553
00:26:17,840 --> 00:26:21,279
for implementation yeah

554
00:26:21,279 --> 00:26:25,039
yeah um i i don't know the time frame

555
00:26:25,039 --> 00:26:28,320
of uh you know when when that would be

556
00:26:28,320 --> 00:26:29,679
actually implemented within chrome or

557
00:26:29,679 --> 00:26:30,240
whatever

558
00:26:30,240 --> 00:26:33,760
uh no longer my exact sort of remit now

559
00:26:33,760 --> 00:26:36,000
but um

560
00:26:36,000 --> 00:26:37,679
i've discussed it with the team here and

561
00:26:37,679 --> 00:26:39,120
you know you know probably something

562
00:26:39,120 --> 00:26:39,520
that

563
00:26:39,520 --> 00:26:41,679
people start to look at uh you know in

564
00:26:41,679 --> 00:26:44,320
the coming months

565
00:26:46,000 --> 00:26:50,840
i see sergio just point out that

566
00:26:50,840 --> 00:26:53,120
uh for performtp

567
00:26:53,120 --> 00:26:55,919
including cryptex with the test vector

568
00:26:55,919 --> 00:26:57,600
that are used in the in the spec

569
00:26:57,600 --> 00:26:59,679
and also by jonathan in his

570
00:26:59,679 --> 00:27:01,200
implementation

571
00:27:01,200 --> 00:27:04,080
um so it should be just a matter of

572
00:27:04,080 --> 00:27:07,199
complaint of putting

573
00:27:15,039 --> 00:27:16,880
yeah as sergio said i have an

574
00:27:16,880 --> 00:27:18,880
implementation for the jetsea srtp

575
00:27:18,880 --> 00:27:20,320
library also though it's not wired up in

576
00:27:20,320 --> 00:27:23,279
the rest of the system yet

577
00:27:27,039 --> 00:27:29,600
it's good to hear

578
00:27:33,360 --> 00:27:49,840
all right uh that's it next is evc

579
00:27:49,919 --> 00:27:51,440
all right ready to check can you guys

580
00:27:51,440 --> 00:27:53,840
hear me

581
00:27:54,960 --> 00:27:57,360
hello

582
00:27:58,480 --> 00:28:02,480
yes oh that's great okay

583
00:28:02,480 --> 00:28:06,799
all right morning uh cup of coffee

584
00:28:06,799 --> 00:28:08,640
so this is gonna be a quick update for

585
00:28:08,640 --> 00:28:09,919
ubc draft

586
00:28:09,919 --> 00:28:13,760
uh thank you already um so just kind of

587
00:28:13,760 --> 00:28:15,120
quick recap whatever you

588
00:28:15,120 --> 00:28:17,039
have decided for you is a draft a couple

589
00:28:17,039 --> 00:28:18,159
of millions back

590
00:28:18,159 --> 00:28:21,279
which is no purse parky and also no

591
00:28:21,279 --> 00:28:22,559
support of a multi

592
00:28:22,559 --> 00:28:24,559
uh rtp stream is mixed with multiple

593
00:28:24,559 --> 00:28:25,760
transport and all

594
00:28:25,760 --> 00:28:28,960
also no download basis signaling forever

595
00:28:28,960 --> 00:28:31,520
uh for regional support so that is all

596
00:28:31,520 --> 00:28:32,880
have been great for um

597
00:28:32,880 --> 00:28:35,279
i think i believe it's two minutes back

598
00:28:35,279 --> 00:28:36,880
and the last two items no support or

599
00:28:36,880 --> 00:28:37,600
framework

600
00:28:37,600 --> 00:28:39,679
um that's really the decision co-author

601
00:28:39,679 --> 00:28:41,520
made things the last intermediate

602
00:28:41,520 --> 00:28:44,880
um agreement defense free market removal

603
00:28:44,880 --> 00:28:46,559
to experimental

604
00:28:46,559 --> 00:28:48,880
um so that doesn't make any sense for us

605
00:28:48,880 --> 00:28:51,200
to support it anymore and

606
00:28:51,200 --> 00:28:54,159
then also we remove the slice

607
00:28:54,159 --> 00:28:55,039
authentication

608
00:28:55,039 --> 00:28:58,320
and also the psr support that's also

609
00:28:58,320 --> 00:28:59,360
basically trying to

610
00:28:59,360 --> 00:29:02,399
align with the bbc um

611
00:29:02,399 --> 00:29:07,039
bbc draft next slides please

612
00:29:08,960 --> 00:29:13,120
next up so uh ubc driver was adopted as

613
00:29:13,120 --> 00:29:14,320
a working group drop since

614
00:29:14,320 --> 00:29:17,600
108. um we recently

615
00:29:17,600 --> 00:29:21,039
um uh very honored to have a young quest

616
00:29:21,039 --> 00:29:22,480
from samsung

617
00:29:22,480 --> 00:29:25,279
uh as co-author i'm not sure if you want

618
00:29:25,279 --> 00:29:26,399
to save your word

619
00:29:26,399 --> 00:29:29,520
after that so i will leave it to him um

620
00:29:29,520 --> 00:29:30,559
the recent

621
00:29:30,559 --> 00:29:32,399
revision which is the zero one working

622
00:29:32,399 --> 00:29:33,840
group draft

623
00:29:33,840 --> 00:29:37,520
uh we mostly focus on the uh ubc codex

624
00:29:37,520 --> 00:29:38,559
specifications

625
00:29:38,559 --> 00:29:40,720
uh i think everything is getting there

626
00:29:40,720 --> 00:29:42,880
um there's only a few

627
00:29:42,880 --> 00:29:45,919
uh there's only a few edited notes left

628
00:29:45,919 --> 00:29:48,320
um but i think we're going to get it

629
00:29:48,320 --> 00:29:49,440
down

630
00:29:49,440 --> 00:29:52,840
on this uh codex specification part very

631
00:29:52,840 --> 00:29:54,399
soon

632
00:29:54,399 --> 00:29:57,840
uh next slide please

633
00:29:59,520 --> 00:30:02,480
uh you actually skipped one yeah there

634
00:30:02,480 --> 00:30:03,679
you go

635
00:30:03,679 --> 00:30:07,039
um so there are still uh a few

636
00:30:07,039 --> 00:30:08,159
placeholders

637
00:30:08,159 --> 00:30:10,720
we're trying to address in in the draft

638
00:30:10,720 --> 00:30:12,399
and the major thing we have left

639
00:30:12,399 --> 00:30:15,679
which is a section 7 the optional

640
00:30:15,679 --> 00:30:17,760
parameters for the stpe

641
00:30:17,760 --> 00:30:20,640
um we believe we have agreed that the

642
00:30:20,640 --> 00:30:21,520
ubc

643
00:30:21,520 --> 00:30:23,760
pillow draft will be following bbc and

644
00:30:23,760 --> 00:30:25,279
we bc draft

645
00:30:25,279 --> 00:30:28,480
is almost getting there we we have a new

646
00:30:28,480 --> 00:30:29,600
version which is going to talk about

647
00:30:29,600 --> 00:30:30,559
later um

648
00:30:30,559 --> 00:30:33,600
has mostly parameters down so we

649
00:30:33,600 --> 00:30:34,559
actually gonna start

650
00:30:34,559 --> 00:30:37,840
to fill up this blanks in the ubc draft

651
00:30:37,840 --> 00:30:40,240
um let's we will be probably gonna

652
00:30:40,240 --> 00:30:40,960
follow

653
00:30:40,960 --> 00:30:44,080
closer look with the bbvc draft um

654
00:30:44,080 --> 00:30:46,799
so it's really i i think it's reasonable

655
00:30:46,799 --> 00:30:48,399
for us to target working group law

656
00:30:48,399 --> 00:30:49,200
school around

657
00:30:49,200 --> 00:30:52,240
summer 2020. uh

658
00:30:52,240 --> 00:30:54,880
you know uh at that time i think bbc

659
00:30:54,880 --> 00:30:56,480
should be done already

660
00:30:56,480 --> 00:31:00,159
i mean working with glasgow hopefully um

661
00:31:00,159 --> 00:31:01,840
yeah that's a pretty much we only have

662
00:31:01,840 --> 00:31:04,640
our two divisions since 109 and that's

663
00:31:04,640 --> 00:31:07,840
all the updates i have

664
00:31:10,960 --> 00:31:13,519
any questions oh you okay i'm not sure

665
00:31:13,519 --> 00:31:19,840
you want to say a few words up to him

666
00:31:21,760 --> 00:31:23,519
thanks for having me as an author of

667
00:31:23,519 --> 00:31:25,440
this uh

668
00:31:25,440 --> 00:31:28,799
you know uh internet prep um personally

669
00:31:28,799 --> 00:31:29,279
i've been

670
00:31:29,279 --> 00:31:32,880
involved you know for

671
00:31:42,880 --> 00:31:45,519
i will do my best to particularly

672
00:31:45,519 --> 00:31:46,000
progress

673
00:31:46,000 --> 00:31:48,000
this one in the right direction thank

674
00:31:48,000 --> 00:31:50,080
you

675
00:31:50,080 --> 00:31:51,919
thank you okay we're very happy to have

676
00:31:51,919 --> 00:32:01,840
you here

677
00:32:02,399 --> 00:32:04,399
well i think that's so that's all for uh

678
00:32:04,399 --> 00:32:06,240
ubc uh

679
00:32:06,240 --> 00:32:09,120
it's all seems very reasonable to me um

680
00:32:09,120 --> 00:32:09,600
so

681
00:32:09,600 --> 00:32:11,840
i mean hopefully you know we'll make

682
00:32:11,840 --> 00:32:13,440
good progress thank you

683
00:32:13,440 --> 00:32:14,960
yeah i think either welcome basically

684
00:32:14,960 --> 00:32:16,559
run summer uh it's really

685
00:32:16,559 --> 00:32:19,519
reasonable for us without stressing too

686
00:32:19,519 --> 00:32:21,919
much of that lines

687
00:32:21,919 --> 00:32:24,960
sounds good thank you

688
00:32:24,960 --> 00:32:27,039
all right still me again and good

689
00:32:27,039 --> 00:32:29,519
morning here's the update for the bbc

690
00:32:29,519 --> 00:32:34,799
um and next slide please

691
00:32:35,519 --> 00:32:39,120
so we did a three revision since 109 and

692
00:32:39,120 --> 00:32:42,480
most trying to uh there's lots of

693
00:32:42,480 --> 00:32:45,120
echoes all right so most trying to

694
00:32:45,120 --> 00:32:47,600
address the

695
00:32:47,600 --> 00:32:49,919
editor notes as we promised since the

696
00:32:49,919 --> 00:32:50,640
last meeting

697
00:32:50,640 --> 00:32:53,840
um there were 24 of them so lots of them

698
00:32:53,840 --> 00:32:55,760
but we're getting pretty good progress

699
00:32:55,760 --> 00:32:58,480
uh only i think four or five laptops

700
00:32:58,480 --> 00:33:02,720
at this moment uh revision08

701
00:33:02,720 --> 00:33:04,720
is actually a submission just couple

702
00:33:04,720 --> 00:33:06,880
days ago so i doubt anybody has time to

703
00:33:06,880 --> 00:33:08,320
review it

704
00:33:08,320 --> 00:33:11,360
um so uh uh in this slide actually

705
00:33:11,360 --> 00:33:13,200
summarize what have changed from

706
00:33:13,200 --> 00:33:14,880
zero seven zero eight and mostly zero

707
00:33:14,880 --> 00:33:17,120
eight um because the summary changes on

708
00:33:17,120 --> 00:33:19,519
zero seven has been set up by email

709
00:33:19,519 --> 00:33:23,279
um that was a kind of a while ago

710
00:33:23,279 --> 00:33:26,320
uh i think uh uh next

711
00:33:26,320 --> 00:33:29,120
next slide please

712
00:33:30,240 --> 00:33:32,080
uh this is kind of quick look at what

713
00:33:32,080 --> 00:33:33,679
happened to your seven as i mentioned

714
00:33:33,679 --> 00:33:35,120
that we have a new one zero eight

715
00:33:35,120 --> 00:33:37,279
and that was zero sum is the first batch

716
00:33:37,279 --> 00:33:39,279
edit nodes so we're trying to resolve

717
00:33:39,279 --> 00:33:41,039
basically the opi assume has to be

718
00:33:41,039 --> 00:33:42,720
perimeters um

719
00:33:42,720 --> 00:33:45,039
a stefan west center i sent out a really

720
00:33:45,039 --> 00:33:46,399
detailed rationale why

721
00:33:46,399 --> 00:33:48,559
we want to do that so i don't want to

722
00:33:48,559 --> 00:33:49,919
just kind of repeat it whatever he said

723
00:33:49,919 --> 00:33:50,960
already um

724
00:33:50,960 --> 00:33:54,000
so if you do kind of forget that email

725
00:33:54,000 --> 00:33:56,480
somehow uh missed it please just go back

726
00:33:56,480 --> 00:33:57,840
to

727
00:33:57,840 --> 00:34:00,000
that email and if you have any comments

728
00:34:00,000 --> 00:34:00,880
we do um

729
00:34:00,880 --> 00:34:04,240
love to hear that uh so since there's a

730
00:34:04,240 --> 00:34:05,600
little comment to received

731
00:34:05,600 --> 00:34:08,639
during the period reactors implement

732
00:34:08,639 --> 00:34:09,520
whatever you were

733
00:34:09,520 --> 00:34:12,000
whatever we have proposed during uh from

734
00:34:12,000 --> 00:34:15,119
the immediate discussion

735
00:34:16,079 --> 00:34:18,320
uh

736
00:34:19,119 --> 00:34:22,239
yep uh yeah right here yeah right here

737
00:34:22,239 --> 00:34:24,480
okay um as i mentioned earlier it was a

738
00:34:24,480 --> 00:34:26,079
little submission so um

739
00:34:26,079 --> 00:34:29,679
please go ahead review them um we did a

740
00:34:29,679 --> 00:34:33,599
more than dozen updates and

741
00:34:33,599 --> 00:34:34,800
i probably don't have enough time to go

742
00:34:34,800 --> 00:34:36,399
through each of them but uh here i'm

743
00:34:36,399 --> 00:34:37,679
just going to kind of bring up some

744
00:34:37,679 --> 00:34:40,079
things that we think is very important

745
00:34:40,079 --> 00:34:43,119
uh but we uh we i will do

746
00:34:43,119 --> 00:34:45,679
uh sent uh the updating from the media

747
00:34:45,679 --> 00:34:46,159
list

748
00:34:46,159 --> 00:34:49,359
um looking for the comments so three

749
00:34:49,359 --> 00:34:50,960
things i want to mess up here so

750
00:34:50,960 --> 00:34:54,000
um so bbc draft is already in the final

751
00:34:54,000 --> 00:34:54,800
publication

752
00:34:54,800 --> 00:34:58,079
uh stage and we pretty much finalized

753
00:34:58,079 --> 00:34:59,599
the baby security information

754
00:34:59,599 --> 00:35:02,640
and in section one i think it's great

755
00:35:02,640 --> 00:35:04,880
progress and we also made the same

756
00:35:04,880 --> 00:35:06,160
decision

757
00:35:06,160 --> 00:35:08,880
uh no to supporting free marking i think

758
00:35:08,880 --> 00:35:10,800
it's also reasonable

759
00:35:10,800 --> 00:35:13,359
and um we actually from last two

760
00:35:13,359 --> 00:35:14,640
meetings we'll be asking

761
00:35:14,640 --> 00:35:16,240
a pin at working group opinions

762
00:35:16,240 --> 00:35:18,320
regarding if we should remove

763
00:35:18,320 --> 00:35:21,920
the slri and rpsi

764
00:35:21,920 --> 00:35:24,720
rtsp feedback mode and no support so

765
00:35:24,720 --> 00:35:26,079
from our

766
00:35:26,079 --> 00:35:28,320
point we don't see the usage of that and

767
00:35:28,320 --> 00:35:30,960
we simply remove that

768
00:35:30,960 --> 00:35:33,040
um the one last thing i want to mention

769
00:35:33,040 --> 00:35:34,720
in this meeting is really um

770
00:35:34,720 --> 00:35:37,280
the reserved arbit in the fragmentation

771
00:35:37,280 --> 00:35:38,160
unit

772
00:35:38,160 --> 00:35:40,560
uh header that's also something we

773
00:35:40,560 --> 00:35:41,839
brought up a couple of minutes back

774
00:35:41,839 --> 00:35:42,880
already um

775
00:35:42,880 --> 00:35:45,280
but we never propose anything so in this

776
00:35:45,280 --> 00:35:46,400
minivac i have a

777
00:35:46,400 --> 00:35:49,599
slide to to discuss the things that we

778
00:35:49,599 --> 00:35:52,000
propose for the rpg

779
00:35:52,000 --> 00:35:54,720
uh we can talk more in next couple

780
00:35:54,720 --> 00:35:55,520
slides

781
00:35:55,520 --> 00:35:59,839
next slide please

782
00:36:00,240 --> 00:36:02,960
next slide yeah right here uh one of the

783
00:36:02,960 --> 00:36:04,880
things we actually removed is one of the

784
00:36:04,880 --> 00:36:08,640
informative notes under the market bit

785
00:36:08,640 --> 00:36:11,760
for the http header the similar content

786
00:36:11,760 --> 00:36:12,000
which

787
00:36:12,000 --> 00:36:14,480
is because we copy paste from hevc and

788
00:36:14,480 --> 00:36:15,119
then

789
00:36:15,119 --> 00:36:17,440
um make a line with bbc but the

790
00:36:17,440 --> 00:36:18,960
co-author just found

791
00:36:18,960 --> 00:36:20,960
the confusion is about it is actually a

792
00:36:20,960 --> 00:36:23,440
bit of the benefit

793
00:36:23,440 --> 00:36:24,960
therefore we decided to remove it to

794
00:36:24,960 --> 00:36:27,839
make this much cleaner

795
00:36:27,920 --> 00:36:30,240
but let us know if you think you have a

796
00:36:30,240 --> 00:36:31,680
different opinions and then we can

797
00:36:31,680 --> 00:36:34,320
discuss that through the main list

798
00:36:34,320 --> 00:36:37,680
we also removed a few

799
00:36:38,400 --> 00:36:41,280
stp parameters inherited from hevc and

800
00:36:41,280 --> 00:36:41,920
things like

801
00:36:41,920 --> 00:36:44,880
maximum video bitrate and picture size

802
00:36:44,880 --> 00:36:46,960
perfect size and etcetera

803
00:36:46,960 --> 00:36:49,839
uh just from our experience and and the

804
00:36:49,839 --> 00:36:51,520
co-author i think there's

805
00:36:51,520 --> 00:36:54,000
less usage of practically no usage at

806
00:36:54,000 --> 00:36:56,000
all from the hevc

807
00:36:56,000 --> 00:36:59,359
so we decide not to support it

808
00:36:59,359 --> 00:37:01,119
again if you have any different opinions

809
00:37:01,119 --> 00:37:02,640
that we do want to hear that

810
00:37:02,640 --> 00:37:04,960
maybe we missed anything so we don't

811
00:37:04,960 --> 00:37:06,800
want to do that

812
00:37:06,800 --> 00:37:09,839
next slide please

813
00:37:13,520 --> 00:37:16,960
next next

814
00:37:16,960 --> 00:37:20,400
here we go so here's the uh reserved rb

815
00:37:20,400 --> 00:37:21,760
that we talked about in the fragment

816
00:37:21,760 --> 00:37:22,880
unit header

817
00:37:22,880 --> 00:37:26,560
um so we brought this up um

818
00:37:26,560 --> 00:37:30,400
uh things zoom 107.

819
00:37:30,400 --> 00:37:32,960
uh so we the proposed text in the

820
00:37:32,960 --> 00:37:33,680
following is

821
00:37:33,680 --> 00:37:36,880
really from our uh production team they

822
00:37:36,880 --> 00:37:38,720
have their usage

823
00:37:38,720 --> 00:37:41,520
um so what is this what we proposed here

824
00:37:41,520 --> 00:37:42,320
is really

825
00:37:42,320 --> 00:37:46,160
we're trying to say use the orbit to

826
00:37:46,160 --> 00:37:49,359
identify the signal if the last are not

827
00:37:49,359 --> 00:37:51,119
the last and not unit in the fragment

828
00:37:51,119 --> 00:37:52,800
unit header

829
00:37:52,800 --> 00:37:54,800
uh when it says when i said it's one the

830
00:37:54,800 --> 00:37:56,000
rbd

831
00:37:56,000 --> 00:37:59,599
simply said is the last non-unit

832
00:37:59,599 --> 00:38:02,000
for the fragment unit header or you

833
00:38:02,000 --> 00:38:02,640
could still

834
00:38:02,640 --> 00:38:04,800
equals to zero which is not the last

835
00:38:04,800 --> 00:38:07,040
line here um

836
00:38:07,040 --> 00:38:09,680
it's it's a similar i would say the

837
00:38:09,680 --> 00:38:11,280
concept wise is similar like

838
00:38:11,280 --> 00:38:13,760
the ambit the market building the rtp

839
00:38:13,760 --> 00:38:16,000
header unit

840
00:38:16,000 --> 00:38:18,320
but we don't see much of usage for

841
00:38:18,320 --> 00:38:19,119
marker

842
00:38:19,119 --> 00:38:21,839
bits for the video site maybe we missed

843
00:38:21,839 --> 00:38:22,560
anything

844
00:38:22,560 --> 00:38:25,040
but that's the current conclusion we had

845
00:38:25,040 --> 00:38:26,320
and we think that's a pretty

846
00:38:26,320 --> 00:38:29,040
good usage for the rpg otherwise just

847
00:38:29,040 --> 00:38:29,839
leave it blank

848
00:38:29,839 --> 00:38:33,280
as we call it reserved again

849
00:38:33,280 --> 00:38:36,560
sorry we don't send this early

850
00:38:36,560 --> 00:38:38,320
do provide your comment in the middle

851
00:38:38,320 --> 00:38:41,920
list and see if you did anything

852
00:38:41,920 --> 00:38:46,800
which is a right usage or not

853
00:38:46,800 --> 00:38:50,320
and last the next

854
00:38:50,320 --> 00:38:52,960
slide

855
00:38:56,800 --> 00:38:59,760
that's going to be the last one so um we

856
00:38:59,760 --> 00:39:00,800
only have four

857
00:39:00,800 --> 00:39:04,560
edit notes left uh down from 24

858
00:39:04,560 --> 00:39:07,839
which is great progress and we only have

859
00:39:07,839 --> 00:39:10,480
one large section which is the sdp

860
00:39:10,480 --> 00:39:11,440
offering answer

861
00:39:11,440 --> 00:39:14,880
sections uh which is uh um

862
00:39:14,880 --> 00:39:16,320
not going to be very difficult things

863
00:39:16,320 --> 00:39:18,560
that we have all the stp congress

864
00:39:18,560 --> 00:39:19,839
already

865
00:39:19,839 --> 00:39:22,560
and we are targeting the rocket glasgow

866
00:39:22,560 --> 00:39:23,040
around

867
00:39:23,040 --> 00:39:27,040
june 2020 first

868
00:39:27,040 --> 00:39:29,119
i think i think probably earlier than

869
00:39:29,119 --> 00:39:30,079
that but i think

870
00:39:30,079 --> 00:39:34,960
um june should be a a good time

871
00:39:35,520 --> 00:39:39,680
and that's all for bbc

872
00:39:40,720 --> 00:39:42,480
yeah i wanted to thank you by the way

873
00:39:42,480 --> 00:39:44,400
for making good progress removing things

874
00:39:44,400 --> 00:39:46,320
that weren't required

875
00:39:46,320 --> 00:39:48,240
uh that's actually uh makes suspect much

876
00:39:48,240 --> 00:39:49,920
more readable now

877
00:39:49,920 --> 00:39:51,520
i think that's the design philosophy we

878
00:39:51,520 --> 00:39:53,119
agree the first meeting to try to

879
00:39:53,119 --> 00:39:55,359
simplify the process so i think we are

880
00:39:55,359 --> 00:39:56,000
doing that

881
00:39:56,000 --> 00:39:58,320
thank you

882
00:40:04,480 --> 00:40:08,400
all right uh should it be offline right

883
00:40:08,400 --> 00:40:11,599
uh yeah all right i just i just had one

884
00:40:11,599 --> 00:40:13,040
comment i mean i'll probably better

885
00:40:13,040 --> 00:40:15,359
erase this on the list but on the r bit

886
00:40:15,359 --> 00:40:17,200
i just um

887
00:40:17,200 --> 00:40:18,800
i'm curious how your use of the art that

888
00:40:18,800 --> 00:40:20,400
interacts with the spatial stimulus

889
00:40:20,400 --> 00:40:22,000
facial scalability

890
00:40:22,000 --> 00:40:24,079
i'm curious how whether that's last bit

891
00:40:24,079 --> 00:40:25,440
of the

892
00:40:25,440 --> 00:40:26,960
whole picture or last bit of us the

893
00:40:26,960 --> 00:40:29,200
spatial layer would last fragments

894
00:40:29,200 --> 00:40:30,640
if we want to if we go back we're going

895
00:40:30,640 --> 00:40:33,920
to go back to one last slide

896
00:40:34,319 --> 00:40:36,560
up

897
00:40:37,440 --> 00:40:38,880
yeah so it's actually for the whole

898
00:40:38,880 --> 00:40:40,480
picture instead of the code of the

899
00:40:40,480 --> 00:40:43,839
picture it's gonna be a whole picture

900
00:40:44,800 --> 00:40:48,000
all right yeah so um all right well we

901
00:40:48,000 --> 00:40:48,960
can just cut that on the list

902
00:40:48,960 --> 00:40:51,920
oh yeah yeah yeah okay appreciate that

903
00:40:51,920 --> 00:40:54,560
okay thank you

904
00:40:56,960 --> 00:41:00,400
any other comments on this search

905
00:41:03,440 --> 00:41:06,880
let's go all right now

906
00:41:06,880 --> 00:41:09,839
the big topic for here we're a little

907
00:41:09,839 --> 00:41:11,040
bit ahead of time so that's good because

908
00:41:11,040 --> 00:41:12,720
i think this will probably

909
00:41:12,720 --> 00:41:15,680
take a fair bit of time

910
00:41:17,359 --> 00:41:20,560
so oops sorry i keep

911
00:41:20,560 --> 00:41:23,920
like i said my my slides tab seems a

912
00:41:23,920 --> 00:41:25,520
little jumpy so i apologize if i'm

913
00:41:25,520 --> 00:41:26,400
suddenly on the wrong

914
00:41:26,400 --> 00:41:31,040
wrong slide so who's presenting first

915
00:41:32,640 --> 00:41:34,720
i start a little bit and they will take

916
00:41:34,720 --> 00:41:36,079
over or okay yeah

917
00:41:36,079 --> 00:41:39,920
sure okay um so

918
00:41:39,920 --> 00:41:42,560
i'd like to present a few slides and up

919
00:41:42,560 --> 00:41:43,119
to

920
00:41:43,119 --> 00:41:46,480
getting to a set of requirements that

921
00:41:46,480 --> 00:41:49,680
with sergio and alex we we gathered and

922
00:41:49,680 --> 00:41:50,640
maybe from there

923
00:41:50,640 --> 00:41:54,079
take take questions so

924
00:41:54,079 --> 00:41:56,560
uh yeah so we'll we'll hold the queue

925
00:41:56,560 --> 00:41:58,560
until the u.n has

926
00:41:58,560 --> 00:42:00,640
finished or u.n and sergio have gone

927
00:42:00,640 --> 00:42:02,400
through these slides

928
00:42:02,400 --> 00:42:06,240
yeah five slides i think also

929
00:42:06,240 --> 00:42:08,959
next slide

930
00:42:12,720 --> 00:42:15,040
so yeah the question why could a

931
00:42:15,040 --> 00:42:16,160
packetizer

932
00:42:16,160 --> 00:42:18,720
why should we try to evolve the current

933
00:42:18,720 --> 00:42:20,079
architecture

934
00:42:20,079 --> 00:42:23,200
um so there are products

935
00:42:23,200 --> 00:42:27,040
like google duo or gtc that are

936
00:42:27,040 --> 00:42:29,440
inserting a transform step between

937
00:42:29,440 --> 00:42:31,280
encoder and backetizer

938
00:42:31,280 --> 00:42:34,400
and they do so for a good reason which

939
00:42:34,400 --> 00:42:35,440
is to

940
00:42:35,440 --> 00:42:38,079
achieve and create encryption and i'm

941
00:42:38,079 --> 00:42:39,040
sure we're

942
00:42:39,040 --> 00:42:43,599
we're all excited about that feature

943
00:42:43,680 --> 00:42:46,640
that said uh they they do that currently

944
00:42:46,640 --> 00:42:48,480
in a very adult way

945
00:42:48,480 --> 00:42:52,079
and um that's true we can say it relies

946
00:42:52,079 --> 00:42:55,359
on a few hacks as presented

947
00:42:55,359 --> 00:42:58,960
as the link is showing and what was

948
00:42:58,960 --> 00:43:03,520
discussed in ietf 109. so

949
00:43:03,520 --> 00:43:06,079
we think it would be good to uh

950
00:43:06,079 --> 00:43:08,400
rationalize what is being done

951
00:43:08,400 --> 00:43:11,599
by these products make sure it stays

952
00:43:11,599 --> 00:43:14,720
as consistent as possible with the rtp

953
00:43:14,720 --> 00:43:15,599
ecosystem

954
00:43:15,599 --> 00:43:18,640
and at the end of the provide either

955
00:43:18,640 --> 00:43:19,839
technical solutions

956
00:43:19,839 --> 00:43:22,040
or guidelines

957
00:43:22,040 --> 00:43:24,839
[Music]

958
00:43:24,839 --> 00:43:27,599
so with sergio analex we

959
00:43:27,599 --> 00:43:31,040
we looked at that and uh we we thought

960
00:43:31,040 --> 00:43:31,520
that

961
00:43:31,520 --> 00:43:34,880
um the current architecture like the rtp

962
00:43:34,880 --> 00:43:37,520
media pipeline we we can probably

963
00:43:37,520 --> 00:43:40,720
adapt it to allow these products to do

964
00:43:40,720 --> 00:43:42,400
what they want to do without too much

965
00:43:42,400 --> 00:43:43,440
changes

966
00:43:43,440 --> 00:43:46,880
and that's why it's relying on this idea

967
00:43:46,880 --> 00:43:47,359
of a

968
00:43:47,359 --> 00:43:50,480
codec agnostic packetizer and

969
00:43:50,480 --> 00:43:52,800
the proposal we are trying to explain

970
00:43:52,800 --> 00:43:53,599
now

971
00:43:53,599 --> 00:43:56,800
um so at last avt core meeting and

972
00:43:56,800 --> 00:43:59,680
also on tuesdays spring meetings there

973
00:43:59,680 --> 00:44:01,359
were a lot of questions

974
00:44:01,359 --> 00:44:04,319
uh on this speculizer and how it would

975
00:44:04,319 --> 00:44:05,040
deal with

976
00:44:05,040 --> 00:44:08,400
avc or redundancy mechanisms so we have

977
00:44:08,400 --> 00:44:09,280
slides

978
00:44:09,280 --> 00:44:12,640
that are explaining that

979
00:44:12,640 --> 00:44:15,520
and i will present some of them now next

980
00:44:15,520 --> 00:44:17,839
slide

981
00:44:20,160 --> 00:44:23,200
so first how is it working with

982
00:44:23,200 --> 00:44:26,960
like the simplest example h264 or vp8

983
00:44:26,960 --> 00:44:30,079
so we have a typical start with

984
00:44:30,079 --> 00:44:33,359
you take a row frame you encode it

985
00:44:33,359 --> 00:44:36,000
and then the encoder is producing two

986
00:44:36,000 --> 00:44:36,640
things

987
00:44:36,640 --> 00:44:39,200
first it's producing the content itself

988
00:44:39,200 --> 00:44:40,079
the frame

989
00:44:40,079 --> 00:44:42,400
the encoded frame and it's also

990
00:44:42,400 --> 00:44:43,280
generating

991
00:44:43,280 --> 00:44:47,119
metadata then in a browser like

992
00:44:47,119 --> 00:44:50,319
chrome there will be a transform which

993
00:44:50,319 --> 00:44:50,720
is

994
00:44:50,720 --> 00:44:53,599
implemented in javascript where the

995
00:44:53,599 --> 00:44:54,880
encoded frame

996
00:44:54,880 --> 00:44:57,599
and the metadata will be exposed and the

997
00:44:57,599 --> 00:44:58,480
transform

998
00:44:58,480 --> 00:45:01,599
using javascript will typically encrypt

999
00:45:01,599 --> 00:45:03,680
the frame

1000
00:45:03,680 --> 00:45:07,440
with a current api design the metadata

1001
00:45:07,440 --> 00:45:10,640
is read-only so you cannot change it and

1002
00:45:10,640 --> 00:45:11,520
that's

1003
00:45:11,520 --> 00:45:15,440
that makes sense so after the transform

1004
00:45:15,440 --> 00:45:18,880
uh now we have some transform data so in

1005
00:45:18,880 --> 00:45:19,920
in the

1006
00:45:19,920 --> 00:45:22,400
slide it's in red and we keep the same

1007
00:45:22,400 --> 00:45:24,480
metadata

1008
00:45:24,480 --> 00:45:27,760
and the transform data there is no

1009
00:45:27,760 --> 00:45:28,720
longer

1010
00:45:28,720 --> 00:45:32,240
uh valid https for valid vp8 content

1011
00:45:32,240 --> 00:45:35,440
but the metadata is still applicable to

1012
00:45:35,440 --> 00:45:38,880
what was the underlying content so

1013
00:45:38,880 --> 00:45:42,000
the idea for the packetizer there would

1014
00:45:42,000 --> 00:45:42,319
be

1015
00:45:42,319 --> 00:45:46,480
to use metadata to

1016
00:45:46,480 --> 00:45:49,839
generate precisely vrtp headers via

1017
00:45:49,839 --> 00:45:51,520
extensions and so on

1018
00:45:51,520 --> 00:45:54,960
and for the payload to split the

1019
00:45:54,960 --> 00:45:56,319
transform data

1020
00:45:56,319 --> 00:45:59,119
using a heuristic and the current

1021
00:45:59,119 --> 00:46:00,480
heuristic is

1022
00:46:00,480 --> 00:46:03,680
to use vmtu to produce

1023
00:46:03,680 --> 00:46:06,560
as little as possible a number of

1024
00:46:06,560 --> 00:46:08,960
packets

1025
00:46:11,040 --> 00:46:14,720
so i just want to point out also

1026
00:46:14,720 --> 00:46:16,960
that uh the metadata it can be also

1027
00:46:16,960 --> 00:46:17,920
audio

1028
00:46:17,920 --> 00:46:20,800
so for instance uh the voice flag that

1029
00:46:20,800 --> 00:46:21,520
you can

1030
00:46:21,520 --> 00:46:24,319
find in some rtp head extensions is

1031
00:46:24,319 --> 00:46:25,599
typically

1032
00:46:25,599 --> 00:46:28,720
produced by by the encoder and you you

1033
00:46:28,720 --> 00:46:29,680
cannot

1034
00:46:29,680 --> 00:46:32,800
use the transform data to try to

1035
00:46:32,800 --> 00:46:35,359
generate ltp it extensions like the

1036
00:46:35,359 --> 00:46:37,440
voice flag or what or any kind of

1037
00:46:37,440 --> 00:46:39,520
ltp head extensions because it's

1038
00:46:39,520 --> 00:46:41,040
encrypted basically

1039
00:46:41,040 --> 00:46:45,040
and that mirrors well what any

1040
00:46:45,040 --> 00:46:48,079
um proxy

1041
00:46:48,079 --> 00:46:51,200
will we will also have to

1042
00:46:51,200 --> 00:46:53,200
to deal with meaning a payload that is

1043
00:46:53,200 --> 00:46:55,680
encrypted and just use vrt header data

1044
00:46:55,680 --> 00:46:58,640
to do its processing

1045
00:46:59,040 --> 00:47:02,720
next slide which might be

1046
00:47:02,720 --> 00:47:06,000
a bit more interesting is

1047
00:47:06,000 --> 00:47:10,800
what about vp9 hvc so there it's very

1048
00:47:10,800 --> 00:47:11,119
very

1049
00:47:11,119 --> 00:47:14,880
very similar um we have a row frame

1050
00:47:14,880 --> 00:47:17,760
and the encoder will produce uh like in

1051
00:47:17,760 --> 00:47:18,960
this example

1052
00:47:18,960 --> 00:47:22,800
three subframes so probably a base frame

1053
00:47:22,800 --> 00:47:25,599
and then two dependency frames and each

1054
00:47:25,599 --> 00:47:26,800
subframe

1055
00:47:26,800 --> 00:47:29,839
is uh related to some metadata so you

1056
00:47:29,839 --> 00:47:31,599
have sub frame one separate to do so

1057
00:47:31,599 --> 00:47:32,960
frame three and each one has

1058
00:47:32,960 --> 00:47:35,359
meta data and then there will be a

1059
00:47:35,359 --> 00:47:36,240
transform

1060
00:47:36,240 --> 00:47:38,319
and again the transform will be applied

1061
00:47:38,319 --> 00:47:39,839
separately to

1062
00:47:39,839 --> 00:47:42,960
each subframe and so you will have

1063
00:47:42,960 --> 00:47:44,640
transform one transform two

1064
00:47:44,640 --> 00:47:48,720
transform three and and so on

1065
00:47:48,720 --> 00:47:52,079
um after the transform the packetizer

1066
00:47:52,079 --> 00:47:55,200
will first deal with transform one plus

1067
00:47:55,200 --> 00:47:56,960
metadata one

1068
00:47:56,960 --> 00:47:58,800
and it will produce a first set of

1069
00:47:58,800 --> 00:48:00,880
packets uh

1070
00:48:00,880 --> 00:48:04,160
again it's the same strategy payload is

1071
00:48:04,160 --> 00:48:07,200
done you like you you practice with mtu

1072
00:48:07,200 --> 00:48:09,520
and you only rely on metadata one

1073
00:48:09,520 --> 00:48:12,559
uh to generate headers and you

1074
00:48:12,559 --> 00:48:16,960
first transmit uh the base layer

1075
00:48:16,960 --> 00:48:19,680
related packets then the dependency

1076
00:48:19,680 --> 00:48:20,559
transform two

1077
00:48:20,559 --> 00:48:23,680
then transform three and in

1078
00:48:23,680 --> 00:48:25,599
in a typical case they will all share

1079
00:48:25,599 --> 00:48:26,880
the same timestamp

1080
00:48:26,880 --> 00:48:30,400
um like in a

1081
00:48:30,400 --> 00:48:33,599
single stream single transport case

1082
00:48:33,599 --> 00:48:36,880
so in the drive we do not have any

1083
00:48:36,880 --> 00:48:38,000
notion of subframe

1084
00:48:38,000 --> 00:48:40,800
we just call them all and coded frame

1085
00:48:40,800 --> 00:48:43,040
and it's really the role of the encoder

1086
00:48:43,040 --> 00:48:46,160
to output individual

1087
00:48:46,160 --> 00:48:50,160
independent frames that can be

1088
00:48:50,160 --> 00:48:53,440
transformed individually

1089
00:48:53,440 --> 00:48:57,280
next slide um

1090
00:48:57,280 --> 00:48:59,119
second i asked i put my hand up to ask a

1091
00:48:59,119 --> 00:49:01,440
question about two slides ago

1092
00:49:01,440 --> 00:49:04,640
is it all right to ask a question uh

1093
00:49:04,640 --> 00:49:07,200
i would prefer to to go to the

1094
00:49:07,200 --> 00:49:08,800
requirements so that there's only two

1095
00:49:08,800 --> 00:49:09,359
slides

1096
00:49:09,359 --> 00:49:12,240
and then we can take you if that's okay

1097
00:49:12,240 --> 00:49:12,800
okay

1098
00:49:12,800 --> 00:49:16,160
thanks um so getting back to

1099
00:49:16,160 --> 00:49:19,040
the point of uh colon in uh last meeting

1100
00:49:19,040 --> 00:49:21,040
in tuesday at frame meeting where

1101
00:49:21,040 --> 00:49:24,079
um we we do not remove

1102
00:49:24,079 --> 00:49:27,599
any like there are two places

1103
00:49:27,599 --> 00:49:28,960
two different processing there's a codex

1104
00:49:28,960 --> 00:49:31,119
specific processing which happens

1105
00:49:31,119 --> 00:49:33,119
before the transform and a codec

1106
00:49:33,119 --> 00:49:34,880
agnostic processing that happens

1107
00:49:34,880 --> 00:49:37,520
after the transform the transform itself

1108
00:49:37,520 --> 00:49:38,960
can be codec specific

1109
00:49:38,960 --> 00:49:40,800
or in the case of s-prime we hope it

1110
00:49:40,800 --> 00:49:42,559
will it will stay

1111
00:49:42,559 --> 00:49:45,119
categoristic because that's simpler but

1112
00:49:45,119 --> 00:49:46,079
clearly

1113
00:49:46,079 --> 00:49:49,200
uh the the rtp media pipeline is codec

1114
00:49:49,200 --> 00:49:50,000
specific

1115
00:49:50,000 --> 00:49:53,119
and uh the code specific processing

1116
00:49:53,119 --> 00:49:55,680
can even be application specific in the

1117
00:49:55,680 --> 00:49:56,880
sense that

1118
00:49:56,880 --> 00:50:00,480
um there we are saying vp9 will

1119
00:50:00,480 --> 00:50:03,520
produce three different uh subframes you

1120
00:50:03,520 --> 00:50:04,160
could say

1121
00:50:04,160 --> 00:50:06,559
an application will tell its https one

1122
00:50:06,559 --> 00:50:08,000
encoder to produce

1123
00:50:08,000 --> 00:50:10,720
two subframes as well in whatever

1124
00:50:10,720 --> 00:50:12,240
heuristic they want and then the

1125
00:50:12,240 --> 00:50:13,760
proceeding pipeline should be

1126
00:50:13,760 --> 00:50:18,079
roughly the same um

1127
00:50:18,079 --> 00:50:20,559
and last slide before taking questions

1128
00:50:20,559 --> 00:50:21,119
um

1129
00:50:21,119 --> 00:50:23,520
so we with sergio and alex we gathered

1130
00:50:23,520 --> 00:50:24,880
some requirements

1131
00:50:24,880 --> 00:50:29,680
um and we listed them and

1132
00:50:29,680 --> 00:50:32,800
we hope the current proposal and the

1133
00:50:32,800 --> 00:50:33,520
current

1134
00:50:33,520 --> 00:50:36,079
small changes in the architecture are

1135
00:50:36,079 --> 00:50:38,079
actually

1136
00:50:38,079 --> 00:50:40,960
fulfilling these requirements uh the

1137
00:50:40,960 --> 00:50:41,680
first thing

1138
00:50:41,680 --> 00:50:43,920
is that we do not want to disrupt

1139
00:50:43,920 --> 00:50:45,760
existing mechanisms like the mapping to

1140
00:50:45,760 --> 00:50:46,960
have tp streams

1141
00:50:46,960 --> 00:50:50,400
uh redundancy mechanisms or existing

1142
00:50:50,400 --> 00:50:53,839
feedback mechanisms as well all of that

1143
00:50:53,839 --> 00:50:54,640
should

1144
00:50:54,640 --> 00:50:57,440
work well and maybe they could be

1145
00:50:57,440 --> 00:50:59,119
optimized later on but that's fine they

1146
00:50:59,119 --> 00:51:00,559
could they should

1147
00:51:00,559 --> 00:51:04,000
still be uh usable out of box

1148
00:51:04,000 --> 00:51:07,359
and in terms of applicability we

1149
00:51:07,359 --> 00:51:10,960
really want it to be able to apply it to

1150
00:51:10,960 --> 00:51:12,319
simulcast

1151
00:51:12,319 --> 00:51:15,760
to support single attribute string on a

1152
00:51:15,760 --> 00:51:18,079
single media transport

1153
00:51:18,079 --> 00:51:21,359
for svc we also think

1154
00:51:21,359 --> 00:51:23,280
we we need to do negotiation there to

1155
00:51:23,280 --> 00:51:24,640
negotiate that uh

1156
00:51:24,640 --> 00:51:27,680
that payload format and we also think

1157
00:51:27,680 --> 00:51:28,400
that

1158
00:51:28,400 --> 00:51:31,200
to succeed

1159
00:51:31,520 --> 00:51:33,760
this payload format should be

1160
00:51:33,760 --> 00:51:34,960
complemented with

1161
00:51:34,960 --> 00:51:38,319
whatever side channel information like

1162
00:51:38,319 --> 00:51:39,440
rtb head extension

1163
00:51:39,440 --> 00:51:41,440
that will allow the sfu to perform layer

1164
00:51:41,440 --> 00:51:43,680
selection and packet forwarding

1165
00:51:43,680 --> 00:51:46,400
precisely on the rtp extensions and not

1166
00:51:46,400 --> 00:51:50,000
on the payload um

1167
00:51:50,000 --> 00:51:54,079
so killen since you're in the queue

1168
00:52:01,359 --> 00:52:03,040
sorry just took hitting unmute a couple

1169
00:52:03,040 --> 00:52:04,559
times to get it to work

1170
00:52:04,559 --> 00:52:07,920
um okay so let can you go back a couple

1171
00:52:07,920 --> 00:52:08,640
slides

1172
00:52:08,640 --> 00:52:11,118
anyway

1173
00:52:13,520 --> 00:52:15,119
let me forward one slide this one might

1174
00:52:15,119 --> 00:52:17,599
be easier

1175
00:52:17,760 --> 00:52:21,359
um so my so

1176
00:52:21,359 --> 00:52:23,119
first of all the describing the

1177
00:52:23,119 --> 00:52:24,960
packetizer as being after

1178
00:52:24,960 --> 00:52:26,880
isn't isn't really accurate this is sort

1179
00:52:26,880 --> 00:52:28,079
of wrong i mean

1180
00:52:28,079 --> 00:52:30,720
the the encoder the what came out of the

1181
00:52:30,720 --> 00:52:32,720
encoder had to be packetized

1182
00:52:32,720 --> 00:52:34,800
before it was at some level of

1183
00:52:34,800 --> 00:52:36,319
packetization

1184
00:52:36,319 --> 00:52:38,559
before it got passed into the transform

1185
00:52:38,559 --> 00:52:40,720
okay there may be further packetization

1186
00:52:40,720 --> 00:52:42,400
later of a different type but it was

1187
00:52:42,400 --> 00:52:44,800
packetized up there

1188
00:52:44,800 --> 00:52:48,480
and my concern is around having

1189
00:52:48,480 --> 00:52:51,359
in two places to put information so like

1190
00:52:51,359 --> 00:52:52,960
the whole idea of some sort of generic

1191
00:52:52,960 --> 00:52:53,680
type i

1192
00:52:53,680 --> 00:52:55,760
you know i in for information content

1193
00:52:55,760 --> 00:52:58,319
for for a generic for codex like i

1194
00:52:58,319 --> 00:52:59,839
at some level i don't think we'll ever

1195
00:52:59,839 --> 00:53:01,760
achieve it there will always be things

1196
00:53:01,760 --> 00:53:02,240
that come up

1197
00:53:02,240 --> 00:53:04,160
new like when we move to holographic

1198
00:53:04,160 --> 00:53:05,359
content when we move

1199
00:53:05,359 --> 00:53:08,960
to um even even the 360 degree stuff

1200
00:53:08,960 --> 00:53:10,240
probably would need some metadata that

1201
00:53:10,240 --> 00:53:11,440
isn't covered by the current draft so

1202
00:53:11,440 --> 00:53:13,359
there always will be extensions to it

1203
00:53:13,359 --> 00:53:15,359
but i i do like the idea of like

1204
00:53:15,359 --> 00:53:17,359
particularly for you know flat 2d codecs

1205
00:53:17,359 --> 00:53:18,480
we should be at the point of getting

1206
00:53:18,480 --> 00:53:20,079
pretty good at this so like i support

1207
00:53:20,079 --> 00:53:21,440
the general idea

1208
00:53:21,440 --> 00:53:24,319
but the question is about does it go in

1209
00:53:24,319 --> 00:53:25,920
the payload section or the header

1210
00:53:25,920 --> 00:53:26,720
section

1211
00:53:26,720 --> 00:53:28,640
and you know the rtp architecture we've

1212
00:53:28,640 --> 00:53:30,319
really gone down that this goes

1213
00:53:30,319 --> 00:53:33,200
is a header is the header is where we um

1214
00:53:33,200 --> 00:53:34,640
put this information

1215
00:53:34,640 --> 00:53:36,240
and i don't see that as being very

1216
00:53:36,240 --> 00:53:37,839
incompatible with this information

1217
00:53:37,839 --> 00:53:40,800
i just think that here basically you've

1218
00:53:40,800 --> 00:53:42,559
already packetized at the encoding at

1219
00:53:42,559 --> 00:53:44,240
least partially privatized

1220
00:53:44,240 --> 00:53:47,440
you're passing into a transform and as

1221
00:53:47,440 --> 00:53:49,359
long as the transform can modify

1222
00:53:49,359 --> 00:53:50,960
the header that's going to end up in the

1223
00:53:50,960 --> 00:53:53,200
rtp as well as the data that's going to

1224
00:53:53,200 --> 00:53:54,640
end up in the

1225
00:53:54,640 --> 00:53:56,240
thing that's just like an implementation

1226
00:53:56,240 --> 00:53:58,079
detail of your specific implementation

1227
00:53:58,079 --> 00:53:59,359
it's not like something we should drive

1228
00:53:59,359 --> 00:54:01,040
the whole standard by

1229
00:54:01,040 --> 00:54:03,760
um and you should just do that and then

1230
00:54:03,760 --> 00:54:05,440
the transformation you know then we can

1231
00:54:05,440 --> 00:54:06,960
have this metadata

1232
00:54:06,960 --> 00:54:08,480
sitting in the header data where we

1233
00:54:08,480 --> 00:54:10,319
already have like you know

1234
00:54:10,319 --> 00:54:12,079
a whole bunch of stuff to do it and the

1235
00:54:12,079 --> 00:54:14,160
reason i like that better is i'm really

1236
00:54:14,160 --> 00:54:16,079
worried about the case of having

1237
00:54:16,079 --> 00:54:18,960
the data two places and not matching and

1238
00:54:18,960 --> 00:54:20,720
that will inevitably happen and i think

1239
00:54:20,720 --> 00:54:21,200
that that's

1240
00:54:21,200 --> 00:54:23,440
you know this is just trying to flip the

1241
00:54:23,440 --> 00:54:25,280
architecture of rtp of where we put this

1242
00:54:25,280 --> 00:54:26,480
information to be

1243
00:54:26,480 --> 00:54:28,720
completely wrong um and you don't need

1244
00:54:28,720 --> 00:54:29,920
that for any reason you can just put it

1245
00:54:29,920 --> 00:54:31,280
in the right place and have the same

1246
00:54:31,280 --> 00:54:33,040
information you have right now

1247
00:54:33,040 --> 00:54:35,119
um and and that that's that that's no

1248
00:54:35,119 --> 00:54:36,640
big deal so could i mean could you talk

1249
00:54:36,640 --> 00:54:38,000
a little bit about

1250
00:54:38,000 --> 00:54:39,520
where i'm going wrong on that whole sort

1251
00:54:39,520 --> 00:54:42,000
of set of assumptions

1252
00:54:42,000 --> 00:54:44,559
um so so first thing you're saying

1253
00:54:44,559 --> 00:54:45,280
there's a

1254
00:54:45,280 --> 00:54:48,640
first step of packetization um

1255
00:54:48,640 --> 00:54:51,920
so a packetizer is generating an rtp

1256
00:54:51,920 --> 00:54:52,640
packet

1257
00:54:52,640 --> 00:54:54,640
and that's the difference you know

1258
00:54:54,640 --> 00:54:56,079
advertising seriously

1259
00:54:56,079 --> 00:54:59,119
a stream of data out of a codec into a

1260
00:54:59,119 --> 00:55:02,480
such set of chunks of data yeah so

1261
00:55:02,480 --> 00:55:04,880
but i agree uh it's it's chunking the

1262
00:55:04,880 --> 00:55:06,319
data and the encoder

1263
00:55:06,319 --> 00:55:08,400
either the encoder of the application is

1264
00:55:08,400 --> 00:55:09,440
doing that

1265
00:55:09,440 --> 00:55:12,079
and what what we're seeing is that the

1266
00:55:12,079 --> 00:55:12,960
chunking

1267
00:55:12,960 --> 00:55:16,720
is really application specific right and

1268
00:55:16,720 --> 00:55:19,280
uh as part of the challenging

1269
00:55:19,280 --> 00:55:21,119
application specific or kodak specific

1270
00:55:21,119 --> 00:55:22,319
that's a big difference there those are

1271
00:55:22,319 --> 00:55:24,720
two very different things

1272
00:55:24,720 --> 00:55:28,240
um so

1273
00:55:28,240 --> 00:55:30,319
to me in our use cases it's codec

1274
00:55:30,319 --> 00:55:31,440
specific but

1275
00:55:31,440 --> 00:55:34,160
i don't see why some applications will

1276
00:55:34,160 --> 00:55:36,400
not be able to specify

1277
00:55:36,400 --> 00:55:39,440
like yeah i want to use h264 in a

1278
00:55:39,440 --> 00:55:42,079
specific way so that this style there

1279
00:55:42,079 --> 00:55:45,280
it's its own subframe and i will output

1280
00:55:45,280 --> 00:55:46,880
it separately

1281
00:55:46,880 --> 00:55:49,599
but that's fine as well um i don't want

1282
00:55:49,599 --> 00:55:51,839
to preclude it i don't want to define it

1283
00:55:51,839 --> 00:55:55,760
yeah right um

1284
00:55:55,760 --> 00:55:58,960
so about the data

1285
00:55:58,960 --> 00:56:02,000
being somehow redundant

1286
00:56:02,000 --> 00:56:04,880
if you look at frame marking information

1287
00:56:04,880 --> 00:56:05,440
like

1288
00:56:05,440 --> 00:56:09,040
uh or dependency descriptor

1289
00:56:09,440 --> 00:56:11,920
you will have it like easy to reframe or

1290
00:56:11,920 --> 00:56:13,920
not it can be articulated

1291
00:56:13,920 --> 00:56:17,119
it's also in the payload at some point

1292
00:56:17,119 --> 00:56:20,720
uh and so there's always redundant data

1293
00:56:20,720 --> 00:56:21,680
there

1294
00:56:21,680 --> 00:56:25,119
and that's fine one of these redundant

1295
00:56:25,119 --> 00:56:27,599
data is for the sfu

1296
00:56:27,599 --> 00:56:31,280
and the other one is for vm recipient

1297
00:56:31,280 --> 00:56:34,559
and we need to extract some of the

1298
00:56:34,559 --> 00:56:37,200
information from the user the encoder to

1299
00:56:37,200 --> 00:56:38,319
the sfu

1300
00:56:38,319 --> 00:56:41,520
and this extraction

1301
00:56:41,520 --> 00:56:43,359
should be carefully studied because it

1302
00:56:43,359 --> 00:56:45,680
has privacy implications

1303
00:56:45,680 --> 00:56:48,319
and i would like us to provide

1304
00:56:48,319 --> 00:56:50,079
guidelines there so that we say

1305
00:56:50,079 --> 00:56:53,119
okay this particular information

1306
00:56:53,119 --> 00:56:55,359
is not privacy sensitive it's useful for

1307
00:56:55,359 --> 00:56:56,319
the sfu

1308
00:56:56,319 --> 00:57:00,160
so yeah let's allow it or let's say that

1309
00:57:00,160 --> 00:57:03,119
yeah you you can use it it's safe and

1310
00:57:03,119 --> 00:57:04,799
this information uh maybe not

1311
00:57:04,799 --> 00:57:07,040
you know like audio level maybe maybe

1312
00:57:07,040 --> 00:57:09,520
not things like that you know

1313
00:57:09,520 --> 00:57:11,280
look i agree with you that i'm i think

1314
00:57:11,280 --> 00:57:13,200
that my question is about

1315
00:57:13,200 --> 00:57:16,400
why that data needs to somehow now

1316
00:57:16,400 --> 00:57:18,079
though the rtp architecture is to stick

1317
00:57:18,079 --> 00:57:19,680
that in the header why it now needs to

1318
00:57:19,680 --> 00:57:21,119
be somehow stuck in the payload that's

1319
00:57:21,119 --> 00:57:22,000
that's my question

1320
00:57:22,000 --> 00:57:23,280
like why don't you do the same thing but

1321
00:57:23,280 --> 00:57:25,359
stick it in the header no but

1322
00:57:25,359 --> 00:57:28,079
we are we are putting it in the head

1323
00:57:28,079 --> 00:57:29,599
yeah

1324
00:57:29,599 --> 00:57:32,880
and uh if you look at uh

1325
00:57:32,880 --> 00:57:36,240
the vp9 packetization somehow you you

1326
00:57:36,240 --> 00:57:38,319
you have the information in the payload

1327
00:57:38,319 --> 00:57:39,520
but it's uh that

1328
00:57:39,520 --> 00:57:42,079
it's a keyframe and it's also in vrt

1329
00:57:42,079 --> 00:57:42,960
header

1330
00:57:42,960 --> 00:57:44,640
and what we're saying is that since the

1331
00:57:44,640 --> 00:57:46,640
payload now is encrypted

1332
00:57:46,640 --> 00:57:48,720
we don't care whether it's there or not

1333
00:57:48,720 --> 00:57:49,680
we will not

1334
00:57:49,680 --> 00:57:51,680
use the payload information and we

1335
00:57:51,680 --> 00:57:54,000
really need to put this information that

1336
00:57:54,000 --> 00:57:57,680
is really crucial in the headers

1337
00:58:00,400 --> 00:58:02,960
so i'm not sure i'm clear but i think we

1338
00:58:02,960 --> 00:58:05,280
agree

1339
00:58:06,839 --> 00:58:09,839
um

1340
00:58:10,079 --> 00:58:11,599
okay well there's a bunch of people

1341
00:58:11,599 --> 00:58:14,960
lying behind me let me go here

1342
00:58:20,480 --> 00:58:23,200
bernad you want to say something so yeah

1343
00:58:23,200 --> 00:58:24,559
i would like to follow up

1344
00:58:24,559 --> 00:58:27,839
uh on what cullen just asked

1345
00:58:27,839 --> 00:58:29,920
and uh here's here's my framework for

1346
00:58:29,920 --> 00:58:31,680
asking these questions

1347
00:58:31,680 --> 00:58:33,680
they're actually i think your

1348
00:58:33,680 --> 00:58:35,599
architecture maybe is a little bit too

1349
00:58:35,599 --> 00:58:36,240
tied

1350
00:58:36,240 --> 00:58:40,160
to the insertable streams architecture

1351
00:58:40,160 --> 00:58:42,000
but even within if we're just talking

1352
00:58:42,000 --> 00:58:43,440
about the chromium codebase right

1353
00:58:43,440 --> 00:58:44,880
there's more than one architecture

1354
00:58:44,880 --> 00:58:46,640
because you can also do this with web

1355
00:58:46,640 --> 00:58:50,000
codecs where you actually get access to

1356
00:58:50,000 --> 00:58:53,520
each of the uh encoded chunks you can

1357
00:58:53,520 --> 00:58:55,920
call them encoded frames

1358
00:58:55,920 --> 00:58:57,839
and you have the ability to build your

1359
00:58:57,839 --> 00:58:59,599
own uh rtp

1360
00:58:59,599 --> 00:59:02,319
header as well as getting access you

1361
00:59:02,319 --> 00:59:04,400
know potentially to the payload

1362
00:59:04,400 --> 00:59:08,160
so um and the reason i'm asking this

1363
00:59:08,160 --> 00:59:10,480
is that and following up on codex

1364
00:59:10,480 --> 00:59:11,440
question uh

1365
00:59:11,440 --> 00:59:13,119
colin's question about application

1366
00:59:13,119 --> 00:59:15,200
versus codec specific

1367
00:59:15,200 --> 00:59:17,119
is we've just heard for example that

1368
00:59:17,119 --> 00:59:19,040
some of the codex

1369
00:59:19,040 --> 00:59:22,240
will not use frame marking and

1370
00:59:22,240 --> 00:59:24,880
the the issue i think that comes up when

1371
00:59:24,880 --> 00:59:27,440
we discuss this is the metadata

1372
00:59:27,440 --> 00:59:30,480
isn't necessarily going to be encoded in

1373
00:59:30,480 --> 00:59:32,559
the rtp header the same way for every

1374
00:59:32,559 --> 00:59:33,680
codec

1375
00:59:33,680 --> 00:59:36,960
for example for something like h264

1376
00:59:36,960 --> 00:59:38,880
avc with temporal scalability you might

1377
00:59:38,880 --> 00:59:40,960
find frame marking is fine

1378
00:59:40,960 --> 00:59:43,680
right but what we're saying here is the

1379
00:59:43,680 --> 00:59:44,960
i think there's an issue if you're

1380
00:59:44,960 --> 00:59:46,799
saying that every codec

1381
00:59:46,799 --> 00:59:49,359
will have its metadata encoded the same

1382
00:59:49,359 --> 00:59:49,839
way

1383
00:59:49,839 --> 00:59:53,040
in uh the rtp header

1384
00:59:53,040 --> 00:59:54,960
um you're going to get you're going to

1385
00:59:54,960 --> 00:59:57,119
get into issues there

1386
00:59:57,119 --> 00:59:59,040
whereas in the web codec kind of a

1387
00:59:59,040 --> 01:00:01,200
framework right you get this

1388
01:00:01,200 --> 01:00:03,359
you can get the metadata the metadata

1389
01:00:03,359 --> 01:00:05,280
actually comes as part of the

1390
01:00:05,280 --> 01:00:07,520
encoded frame but then you can do with

1391
01:00:07,520 --> 01:00:09,119
it whatever you want you could decide

1392
01:00:09,119 --> 01:00:10,720
i'm going to take this metadata and

1393
01:00:10,720 --> 01:00:12,079
output frameworking

1394
01:00:12,079 --> 01:00:14,079
or i'm going to i'm gonna i want to put

1395
01:00:14,079 --> 01:00:15,680
uh instead

1396
01:00:15,680 --> 01:00:17,440
dependency descriptor in the header or

1397
01:00:17,440 --> 01:00:19,440
anything else that the itf or anyone

1398
01:00:19,440 --> 01:00:21,200
anyone else might come up with

1399
01:00:21,200 --> 01:00:23,200
so that that yields a different

1400
01:00:23,200 --> 01:00:24,559
conception here

1401
01:00:24,559 --> 01:00:27,920
so i would just ask you to to try to be

1402
01:00:27,920 --> 01:00:29,119
clear about what

1403
01:00:29,119 --> 01:00:32,400
codec agnostic means exactly

1404
01:00:32,400 --> 01:00:34,720
um does it really mean that everything

1405
01:00:34,720 --> 01:00:36,799
is the same for every codec i think that

1406
01:00:36,799 --> 01:00:37,280
that

1407
01:00:37,280 --> 01:00:39,839
that kind of uh is a promise that might

1408
01:00:39,839 --> 01:00:41,359
be difficult to fulfill over

1409
01:00:41,359 --> 01:00:44,000
over time or does it mean that just the

1410
01:00:44,000 --> 01:00:45,040
generic

1411
01:00:45,040 --> 01:00:46,799
process is somehow the same for every

1412
01:00:46,799 --> 01:00:48,160
code but

1413
01:00:48,160 --> 01:00:50,240
codex might handle it differently i just

1414
01:00:50,240 --> 01:00:51,280
i just think

1415
01:00:51,280 --> 01:00:53,119
not asking for an answer right now but

1416
01:00:53,119 --> 01:00:55,359
just to think this through

1417
01:00:55,359 --> 01:00:57,839
can i can i can provide a temporary

1418
01:00:57,839 --> 01:00:58,799
answer

1419
01:00:58,799 --> 01:01:01,760
um and that's maybe something we are

1420
01:01:01,760 --> 01:01:03,119
discussing with sergio and

1421
01:01:03,119 --> 01:01:05,520
we do not align precisely but i i think

1422
01:01:05,520 --> 01:01:07,280
i think it's a very good question

1423
01:01:07,280 --> 01:01:10,640
um my understanding is that

1424
01:01:10,640 --> 01:01:13,680
the general uh processing like the

1425
01:01:13,680 --> 01:01:15,359
processing that we're seeing there

1426
01:01:15,359 --> 01:01:18,000
could be applied to any any codec the

1427
01:01:18,000 --> 01:01:19,599
packetizer itself

1428
01:01:19,599 --> 01:01:22,240
like the construction of the payload

1429
01:01:22,240 --> 01:01:23,359
using ntu

1430
01:01:23,359 --> 01:01:26,880
can be uh codec specific now the fact

1431
01:01:26,880 --> 01:01:30,640
that you use one ltp extension

1432
01:01:30,640 --> 01:01:33,040
for one codec and another rtp header

1433
01:01:33,040 --> 01:01:34,079
extension

1434
01:01:34,079 --> 01:01:38,160
to pro to transmit the media data for

1435
01:01:38,160 --> 01:01:39,520
another codec

1436
01:01:39,520 --> 01:01:43,760
um i i'm i'm thinking that currently

1437
01:01:43,760 --> 01:01:46,480
we we should not close the door to

1438
01:01:46,480 --> 01:01:47,599
anything

1439
01:01:47,599 --> 01:01:50,720
it would be ideal if we could just have

1440
01:01:50,720 --> 01:01:54,000
the one rtp extension that would fulfill

1441
01:01:54,000 --> 01:01:55,359
all cortex

1442
01:01:55,359 --> 01:01:57,280
my understanding is that it's very

1443
01:01:57,280 --> 01:01:58,640
difficult

1444
01:01:58,640 --> 01:02:01,680
and and that's fine and i'm not sure

1445
01:02:01,680 --> 01:02:04,799
that existing implementations uh

1446
01:02:04,799 --> 01:02:07,280
currently needed for instance

1447
01:02:07,280 --> 01:02:09,200
implementations using h.264

1448
01:02:09,200 --> 01:02:12,799
or vp8 might stick with a frame marking

1449
01:02:12,799 --> 01:02:16,480
and as vp9 or av1 they will use the

1450
01:02:16,480 --> 01:02:18,319
dependency descriptor

1451
01:02:18,319 --> 01:02:21,839
if we have a good proof in the future

1452
01:02:21,839 --> 01:02:24,400
that the dependency descriptor is a good

1453
01:02:24,400 --> 01:02:26,799
fit as well for h264 p9

1454
01:02:26,799 --> 01:02:31,280
then it's even better um i don't think

1455
01:02:31,280 --> 01:02:34,480
that decision

1456
01:02:34,480 --> 01:02:37,599
impacts how we uh define the packetizer

1457
01:02:37,599 --> 01:02:38,160
and the

1458
01:02:38,160 --> 01:02:40,559
payload format because we have an

1459
01:02:40,559 --> 01:02:41,440
extension point

1460
01:02:41,440 --> 01:02:43,839
which is rtp head extensions and we can

1461
01:02:43,839 --> 01:02:44,640
combine

1462
01:02:44,640 --> 01:02:47,200
the payload format with various rtp head

1463
01:02:47,200 --> 01:02:48,079
extensions

1464
01:02:48,079 --> 01:02:50,400
and basically it's the application

1465
01:02:50,400 --> 01:02:51,920
designer but we'll do that at the end of

1466
01:02:51,920 --> 01:03:03,839
the day

1467
01:03:05,200 --> 01:03:07,039
jonathan all right i'm next in the queue

1468
01:03:07,039 --> 01:03:08,480
as an individual

1469
01:03:08,480 --> 01:03:11,599
so um i feel like

1470
01:03:11,599 --> 01:03:14,240
um you are making life too easy for

1471
01:03:14,240 --> 01:03:16,160
yourself by showing the encoder half of

1472
01:03:16,160 --> 01:03:17,599
this picture

1473
01:03:17,599 --> 01:03:20,160
um i feel like if you showed the decoder

1474
01:03:20,160 --> 01:03:21,440
half

1475
01:03:21,440 --> 01:03:24,079
then a lot more of the complexities

1476
01:03:24,079 --> 01:03:25,680
would be apparent

1477
01:03:25,680 --> 01:03:28,160
in particular because basically the the

1478
01:03:28,160 --> 01:03:30,480
decoder process which is to say

1479
01:03:30,480 --> 01:03:32,480
the depacketizer i mean the d transport

1480
01:03:32,480 --> 01:03:34,400
hopefully is obvious but the

1481
01:03:34,400 --> 01:03:37,039
you know the reassembly in particular

1482
01:03:37,039 --> 01:03:37,520
and then

1483
01:03:37,520 --> 01:03:40,160
um before the decoder proper is where a

1484
01:03:40,160 --> 01:03:41,520
lot of the complexity

1485
01:03:41,520 --> 01:03:44,400
arises which you need to worry about um

1486
01:03:44,400 --> 01:03:45,839
so

1487
01:03:45,839 --> 01:03:48,319
uh in particular the thing that you you

1488
01:03:48,319 --> 01:03:50,319
need to be able to do

1489
01:03:50,319 --> 01:03:52,640
is to be able to tell as a you know

1490
01:03:52,640 --> 01:03:54,319
receiving pipeline

1491
01:03:54,319 --> 01:03:56,880
do i have all the you know have i

1492
01:03:56,880 --> 01:03:57,440
received

1493
01:03:57,440 --> 01:03:59,440
you know have the packets i've received

1494
01:03:59,440 --> 01:04:01,359
the packets i've received contain

1495
01:04:01,359 --> 01:04:02,480
enough information for me to

1496
01:04:02,480 --> 01:04:04,720
successfully decode a video frame

1497
01:04:04,720 --> 01:04:06,240
or do i need to knock something and wait

1498
01:04:06,240 --> 01:04:07,839
for it to come in before i actually feed

1499
01:04:07,839 --> 01:04:08,960
things to my

1500
01:04:08,960 --> 01:04:12,240
uh codec um and

1501
01:04:12,240 --> 01:04:14,160
so you know in the process of arbitrary

1502
01:04:14,160 --> 01:04:16,400
packet loss and packet reordering and

1503
01:04:16,400 --> 01:04:19,760
so on and so forth and so that's where i

1504
01:04:19,760 --> 01:04:22,319
think a lot of the trickiness is going

1505
01:04:22,319 --> 01:04:24,079
to arise now if you say

1506
01:04:24,079 --> 01:04:25,760
you always have something like av1

1507
01:04:25,760 --> 01:04:27,119
decoder description that's probably

1508
01:04:27,119 --> 01:04:28,160
sufficient

1509
01:04:28,160 --> 01:04:30,640
if you don't then i think you need to

1510
01:04:30,640 --> 01:04:32,400
figure out how that works

1511
01:04:32,400 --> 01:04:34,319
and that's where a lot of you know

1512
01:04:34,319 --> 01:04:36,880
especially in the start guide

1513
01:04:36,880 --> 01:04:39,680
yeah um so that's true and i thought

1514
01:04:39,680 --> 01:04:41,599
about adding slides for the decoder but

1515
01:04:41,599 --> 01:04:43,839
i was maybe too lazy

1516
01:04:43,839 --> 01:04:45,839
and it's true that the encoder is a good

1517
01:04:45,839 --> 01:04:47,359
example so that we can

1518
01:04:47,359 --> 01:04:50,640
uh start uh precising all these issues

1519
01:04:50,640 --> 01:04:53,760
so um yeah i can go ahead with uh

1520
01:04:53,760 --> 01:04:55,760
providing information for the decoder

1521
01:04:55,760 --> 01:04:58,799
uh you're right about um the packet

1522
01:04:58,799 --> 01:04:59,920
reassembly

1523
01:04:59,920 --> 01:05:04,319
um so in the vp9 avc case maybe sergio

1524
01:05:04,319 --> 01:05:05,920
can correct me if i'm wrong

1525
01:05:05,920 --> 01:05:09,119
but you will set the mark a bit uh

1526
01:05:09,119 --> 01:05:10,880
that will tell you okay you got

1527
01:05:10,880 --> 01:05:12,400
transform one

1528
01:05:12,400 --> 01:05:13,920
uh you should not expect to receive

1529
01:05:13,920 --> 01:05:16,000
transform two and

1530
01:05:16,000 --> 01:05:18,240
and then and then you're good and yeah

1531
01:05:18,240 --> 01:05:20,160
that's how you would do things

1532
01:05:20,160 --> 01:05:22,559
yeah that part is relatively go ahead

1533
01:05:22,559 --> 01:05:24,079
yeah that that first is

1534
01:05:24,079 --> 01:05:26,000
that the current graph at least we plan

1535
01:05:26,000 --> 01:05:27,920
to use the ab1 dependency descriptor

1536
01:05:27,920 --> 01:05:29,839
that provides us information

1537
01:05:29,839 --> 01:05:33,119
but anyway um

1538
01:05:33,119 --> 01:05:36,240
i think that it makes

1539
01:05:36,240 --> 01:05:39,760
is probably just well we are using

1540
01:05:39,760 --> 01:05:41,760
ab1 independence industry that should be

1541
01:05:41,760 --> 01:05:44,160
able to cover that

1542
01:05:44,160 --> 01:05:46,720
right yeah so i mean i think you know

1543
01:05:46,720 --> 01:05:48,960
reassembly within a frame is relatively

1544
01:05:48,960 --> 01:05:50,480
easy it's across frames as you know

1545
01:05:50,480 --> 01:05:51,359
you've had a

1546
01:05:51,359 --> 01:05:54,160
burst loss you don't know what would

1547
01:05:54,160 --> 01:05:54,880
know what you

1548
01:05:54,880 --> 01:05:57,440
don't know whether those packets you

1549
01:05:57,440 --> 01:05:58,480
lost

1550
01:05:58,480 --> 01:06:01,520
uh contain um contain a reference frame

1551
01:06:01,520 --> 01:06:02,839
or not

1552
01:06:02,839 --> 01:06:05,839
well

1553
01:06:11,039 --> 01:06:12,720
yeah because that's exactly what the

1554
01:06:12,720 --> 01:06:14,720
dependency the research tried to

1555
01:06:14,720 --> 01:06:17,200
try to provide is to know sally if you

1556
01:06:17,200 --> 01:06:18,480
have received a frame it

1557
01:06:18,480 --> 01:06:21,200
that frame or sub framing and special

1558
01:06:21,200 --> 01:06:21,680
yeah

1559
01:06:21,680 --> 01:06:24,640
and this calibrity codec is decodable or

1560
01:06:24,640 --> 01:06:26,160
not without having to

1561
01:06:26,160 --> 01:06:28,799
check any further data right so yeah if

1562
01:06:28,799 --> 01:06:33,760
you assume you always have dd then

1563
01:06:33,760 --> 01:06:36,559
but hold on one minute john right you

1564
01:06:36,559 --> 01:06:38,160
may have the dd info

1565
01:06:38,160 --> 01:06:41,599
at the in on the on the sending side

1566
01:06:41,599 --> 01:06:42,640
here right

1567
01:06:42,640 --> 01:06:45,039
because you could decide to encode that

1568
01:06:45,039 --> 01:06:46,319
metadata with dg

1569
01:06:46,319 --> 01:06:48,480
and send it but you might not right if

1570
01:06:48,480 --> 01:06:50,160
you if you're doing frame marking

1571
01:06:50,160 --> 01:06:52,799
instead and on the sender you got the dd

1572
01:06:52,799 --> 01:06:53,920
info but decided

1573
01:06:53,920 --> 01:06:55,520
not to use it all and just do frame

1574
01:06:55,520 --> 01:06:57,520
marking then you might not have it on

1575
01:06:57,520 --> 01:06:58,880
the decoder side so i think your

1576
01:06:58,880 --> 01:06:59,680
question is

1577
01:06:59,680 --> 01:07:02,079
valid still yeah i think so so we need

1578
01:07:02,079 --> 01:07:03,599
to figure out if there needs to be

1579
01:07:03,599 --> 01:07:06,799
at least some minimal information at the

1580
01:07:06,799 --> 01:07:09,839
um in the

1581
01:07:10,480 --> 01:07:12,799
in this itself and then relatedly as you

1582
01:07:12,799 --> 01:07:13,599
mentioned

1583
01:07:13,599 --> 01:07:15,280
if you're you know your question of

1584
01:07:15,280 --> 01:07:17,440
whether how things are

1585
01:07:17,440 --> 01:07:21,200
chunked into the stream are you know

1586
01:07:21,200 --> 01:07:24,160
you seem to be saying well you know the

1587
01:07:24,160 --> 01:07:25,680
question of whether it's codec

1588
01:07:25,680 --> 01:07:28,799
specific or application specific if if

1589
01:07:28,799 --> 01:07:30,960
it's an encoder choice how

1590
01:07:30,960 --> 01:07:34,559
the raw media stream is trunked

1591
01:07:34,559 --> 01:07:38,400
into the pre-transformed frames then

1592
01:07:38,400 --> 01:07:41,039
you need to figure out how much of that

1593
01:07:41,039 --> 01:07:42,160
decision does the

1594
01:07:42,160 --> 01:07:46,480
um the the reassembly product line

1595
01:07:46,480 --> 01:07:48,960
need to know can it just you know does

1596
01:07:48,960 --> 01:07:50,480
it need to be prepared for any chunking

1597
01:07:50,480 --> 01:07:51,920
decision whatsoever that the encoder

1598
01:07:51,920 --> 01:07:53,280
might have felt like doing

1599
01:07:53,280 --> 01:07:55,359
or do we need constraints in the spec of

1600
01:07:55,359 --> 01:07:56,319
what the

1601
01:07:56,319 --> 01:07:59,759
what encoders are allowed to do

1602
01:08:03,440 --> 01:08:07,200
yep uh all right so yeah i think those

1603
01:08:07,200 --> 01:08:07,599
are the

1604
01:08:07,599 --> 01:08:10,799
big things and i think

1605
01:08:12,480 --> 01:08:15,680
hi yeah um so

1606
01:08:15,680 --> 01:08:19,198
i am a little concerned that for

1607
01:08:19,198 --> 01:08:21,679
something which is supposed to be codec

1608
01:08:21,679 --> 01:08:22,799
agnostic

1609
01:08:22,799 --> 01:08:25,359
uh all the discussion we are hearing is

1610
01:08:25,359 --> 01:08:26,238
of a very

1611
01:08:26,238 --> 01:08:29,759
small number of currently popular codecs

1612
01:08:29,759 --> 01:08:33,279
for interactive video applications

1613
01:08:33,279 --> 01:08:36,880
and rtp is used for a lot more

1614
01:08:36,880 --> 01:08:39,198
applications and in a lot more different

1615
01:08:39,198 --> 01:08:40,799
scenarios and with a lot more different

1616
01:08:40,799 --> 01:08:41,920
types of codec

1617
01:08:41,920 --> 01:08:45,279
than we are just currently hearing about

1618
01:08:45,279 --> 01:08:48,080
and um we hope it will continue to be

1619
01:08:48,080 --> 01:08:48,880
used

1620
01:08:48,880 --> 01:08:52,960
in a bunch more scenarios in the future

1621
01:08:52,960 --> 01:08:54,960
and i think i'm not seeing something

1622
01:08:54,960 --> 01:08:56,960
which is really code kegnostic

1623
01:08:56,960 --> 01:08:58,719
i'm seeing something which might work

1624
01:08:58,719 --> 01:09:00,640
for a small subset of current video

1625
01:09:00,640 --> 01:09:02,399
codecs

1626
01:09:02,399 --> 01:09:07,040
um yes so if you take the previous slide

1627
01:09:07,040 --> 01:09:10,560
and replace h64 vp8 by

1628
01:09:10,560 --> 01:09:14,000
uh opus it's working fine

1629
01:09:14,000 --> 01:09:16,880
and for instance audio is less of an

1630
01:09:16,880 --> 01:09:17,600
issue there

1631
01:09:17,600 --> 01:09:20,640
just less of metadata to provide to to

1632
01:09:20,640 --> 01:09:21,920
make it work to make

1633
01:09:21,920 --> 01:09:25,920
and to an encryption work and uh

1634
01:09:25,920 --> 01:09:29,359
we we want to have it in scope so

1635
01:09:29,359 --> 01:09:31,040
we definitely want to have audio and

1636
01:09:31,040 --> 01:09:33,279
video um

1637
01:09:33,279 --> 01:09:36,880
as of over kind of metadata

1638
01:09:36,880 --> 01:09:40,399
uh maybe maybe you we could think of

1639
01:09:40,399 --> 01:09:43,920
subtitles time text for instance

1640
01:09:43,920 --> 01:09:47,600
um so currently my understanding is that

1641
01:09:47,600 --> 01:09:51,600
it's more sent as part of a data channel

1642
01:09:51,600 --> 01:09:52,479
in webrtc

1643
01:09:52,479 --> 01:09:56,480
environments we could definitely see it

1644
01:09:56,480 --> 01:09:59,199
being used there in the same manner but

1645
01:09:59,199 --> 01:10:02,000
not every application that uses rtp

1646
01:10:02,000 --> 01:10:05,360
uses webrtc

1647
01:10:05,440 --> 01:10:08,719
yeah but anyway that but i mean this is

1648
01:10:08,719 --> 01:10:12,320
not meant to be a replacement for rtp

1649
01:10:12,320 --> 01:10:15,120
a packet is it i think that in fact if

1650
01:10:15,120 --> 01:10:15,440
you

1651
01:10:15,440 --> 01:10:18,960
if we talk about in later in the in the

1652
01:10:18,960 --> 01:10:22,239
spec we are only

1653
01:10:22,239 --> 01:10:25,520
going to we are going to

1654
01:10:25,520 --> 01:10:28,480
to make the the the the negotiation of

1655
01:10:28,480 --> 01:10:28,880
the

1656
01:10:28,880 --> 01:10:31,920
canonistic packetizer the to

1657
01:10:31,920 --> 01:10:34,960
to be done within or together with the

1658
01:10:34,960 --> 01:10:37,199
with the normal packetization so

1659
01:10:37,199 --> 01:10:40,080
it is this is not precluding or

1660
01:10:40,080 --> 01:10:40,880
preventing

1661
01:10:40,880 --> 01:10:44,800
to to use any other

1662
01:10:44,800 --> 01:10:46,880
any other codec or packetizing

1663
01:10:46,880 --> 01:10:49,280
packetization that it is already

1664
01:10:49,280 --> 01:10:52,320
available or featurely implemented but

1665
01:10:52,320 --> 01:10:53,280
it is only be

1666
01:10:53,280 --> 01:10:56,640
meant to be used when you are

1667
01:10:56,640 --> 01:10:59,120
using this frame or other transformation

1668
01:10:59,120 --> 01:11:00,400
that may include the

1669
01:11:00,400 --> 01:11:03,440
the content so that you cannot use the

1670
01:11:03,440 --> 01:11:07,040
the standard rtp packetization

1671
01:11:07,040 --> 01:11:10,159
but in fact i would also say frame like

1672
01:11:10,159 --> 01:11:13,120
frame marking either rtp head extension

1673
01:11:13,120 --> 01:11:13,840
that you

1674
01:11:13,840 --> 01:11:15,920
may want to use or you may not want to

1675
01:11:15,920 --> 01:11:17,760
use in your application

1676
01:11:17,760 --> 01:11:21,040
frame marking does not make any sense uh

1677
01:11:21,040 --> 01:11:24,239
outside of a given scope and the payload

1678
01:11:24,239 --> 01:11:26,880
these packetizers there would make sense

1679
01:11:26,880 --> 01:11:28,080
for some applications

1680
01:11:28,080 --> 01:11:29,600
and for some of the applications it's

1681
01:11:29,600 --> 01:11:31,600
not really applicable and that's fine

1682
01:11:31,600 --> 01:11:32,239
but

1683
01:11:32,239 --> 01:11:35,280
it no i don't think it is fine because

1684
01:11:35,280 --> 01:11:36,719
if you're trying to define a pillow

1685
01:11:36,719 --> 01:11:37,760
diagnostic

1686
01:11:37,760 --> 01:11:39,920
your codec agnostic format it has to be

1687
01:11:39,920 --> 01:11:41,920
codec agnostic and it has to work for

1688
01:11:41,920 --> 01:11:44,719
for all codecs um because rtp is a

1689
01:11:44,719 --> 01:11:46,800
generic framework

1690
01:11:46,800 --> 01:11:50,000
um some given definitions of

1691
01:11:50,000 --> 01:11:54,080
encoders and decoders yes yeah but just

1692
01:11:54,080 --> 01:11:56,480
no longer codec agnostic it works for a

1693
01:11:56,480 --> 01:11:59,199
particular subset of codex

1694
01:11:59,199 --> 01:12:03,600
uh yeah for example thinking of

1695
01:12:03,600 --> 01:12:06,159
of real-time texts and since other stuff

1696
01:12:06,159 --> 01:12:09,520
that it is not audi audio

1697
01:12:09,520 --> 01:12:11,520
um i'm not even convinced it works for

1698
01:12:11,520 --> 01:12:14,239
all audio and video codecs

1699
01:12:14,239 --> 01:12:16,320
we're hoping to have it work for audio

1700
01:12:16,320 --> 01:12:17,440
and video codecs

1701
01:12:17,440 --> 01:12:20,719
at least the ones that are in use

1702
01:12:20,719 --> 01:12:23,920
will be yeah i think that i think that

1703
01:12:23,920 --> 01:12:24,719
this should be

1704
01:12:24,719 --> 01:12:28,239
i mean i would like to to the idea is to

1705
01:12:28,239 --> 01:12:30,159
be able to to work with all the audio

1706
01:12:30,159 --> 01:12:31,520
and video codecs

1707
01:12:31,520 --> 01:12:34,560
not real-time tests for example uh so

1708
01:12:34,560 --> 01:12:37,760
that's uh a reduction in the scope of of

1709
01:12:37,760 --> 01:12:40,560
this has not been only for the video but

1710
01:12:40,560 --> 01:12:41,840
i would like to know if

1711
01:12:41,840 --> 01:12:43,520
do you have any concrete example in mind

1712
01:12:43,520 --> 01:12:45,360
that we will have to

1713
01:12:45,360 --> 01:12:48,239
check just just one question from from

1714
01:12:48,239 --> 01:12:49,040
the chair

1715
01:12:49,040 --> 01:12:50,640
i think we've had at least three

1716
01:12:50,640 --> 01:12:52,560
questions about the meaning of the term

1717
01:12:52,560 --> 01:12:54,320
codec agnostic

1718
01:12:54,320 --> 01:12:56,080
uh and i think i would suggest that that

1719
01:12:56,080 --> 01:12:57,360
needs to be

1720
01:12:57,360 --> 01:12:59,679
clarified in the draft because for

1721
01:12:59,679 --> 01:13:01,040
something that

1722
01:13:01,040 --> 01:13:03,280
just the meaning of that term i think

1723
01:13:03,280 --> 01:13:04,719
colin had that question we've had at

1724
01:13:04,719 --> 01:13:06,960
least three questions about that so

1725
01:13:06,960 --> 01:13:08,800
um especially when you start talking

1726
01:13:08,800 --> 01:13:10,320
about differences between codec

1727
01:13:10,320 --> 01:13:12,719
and and use the term codec agnostic it's

1728
01:13:12,719 --> 01:13:13,760
a bit confusing

1729
01:13:13,760 --> 01:13:17,040
thank you yeah i mean it also seems that

1730
01:13:17,040 --> 01:13:20,239
um in order to decode this

1731
01:13:20,239 --> 01:13:22,080
and in order to packetize the media

1732
01:13:22,080 --> 01:13:24,320
sensibly you need to know

1733
01:13:24,320 --> 01:13:27,679
what the what is the underlying codec

1734
01:13:27,679 --> 01:13:31,040
and you need to know um how um

1735
01:13:31,040 --> 01:13:32,640
you know whatever the equivalent of a

1736
01:13:32,640 --> 01:13:34,880
null unit in in this particular codec or

1737
01:13:34,880 --> 01:13:35,760
a frame or

1738
01:13:35,760 --> 01:13:39,120
a an independently decodable

1739
01:13:39,120 --> 01:13:41,840
piece of the codec output is and all

1740
01:13:41,840 --> 01:13:42,320
this is

1741
01:13:42,320 --> 01:13:44,640
is payload format specific it's all

1742
01:13:44,640 --> 01:13:46,320
codec specific

1743
01:13:46,320 --> 01:13:48,880
um and so unless you're just arbitrarily

1744
01:13:48,880 --> 01:13:49,520
chopping

1745
01:13:49,520 --> 01:13:52,880
uh according to the mtu which is a of

1746
01:13:52,880 --> 01:13:55,440
course a very bad idea for performance

1747
01:13:55,440 --> 01:13:57,840
you need to know the underlying payload

1748
01:13:57,840 --> 01:13:59,120
type

1749
01:13:59,120 --> 01:14:02,080
and the signaling for rtp is also based

1750
01:14:02,080 --> 01:14:02,560
uh

1751
01:14:02,560 --> 01:14:04,880
fundamentally on the idea of knowing the

1752
01:14:04,880 --> 01:14:06,640
payload type

1753
01:14:06,640 --> 01:14:09,840
now i think the idea of it of enter and

1754
01:14:09,840 --> 01:14:10,960
encryption of the

1755
01:14:10,960 --> 01:14:13,840
payload is a perfectly reasonable one

1756
01:14:13,840 --> 01:14:14,320
and

1757
01:14:14,320 --> 01:14:17,280
we've seen a number of examples of um

1758
01:14:17,280 --> 01:14:18,560
different applications

1759
01:14:18,560 --> 01:14:21,199
and different uh organizations defining

1760
01:14:21,199 --> 01:14:22,960
ways of doing that

1761
01:14:22,960 --> 01:14:25,199
um but this seems like something which

1762
01:14:25,199 --> 01:14:27,280
can be done within the existing

1763
01:14:27,280 --> 01:14:29,920
rtp model of payload formats which

1764
01:14:29,920 --> 01:14:30,880
identify

1765
01:14:30,880 --> 01:14:35,360
a codec by defining a

1766
01:14:35,360 --> 01:14:38,159
a common way of encrypting the output of

1767
01:14:38,159 --> 01:14:39,840
particular codecs

1768
01:14:39,840 --> 01:14:41,679
and it would seem that that can be made

1769
01:14:41,679 --> 01:14:44,480
to work with these middle boxes

1770
01:14:44,480 --> 01:14:46,400
and these selective forwarding units in

1771
01:14:46,400 --> 01:14:48,000
a way which is compatible with the

1772
01:14:48,000 --> 01:14:49,760
architecture

1773
01:14:49,760 --> 01:14:52,640
um so i i think before throwing out the

1774
01:14:52,640 --> 01:14:56,320
entirety of the way rtp has defined

1775
01:14:56,320 --> 01:14:58,400
media handling and the entirety of the

1776
01:14:58,400 --> 01:14:59,440
way rtp

1777
01:14:59,440 --> 01:15:01,679
and the associated signaling specifies

1778
01:15:01,679 --> 01:15:02,560
codex

1779
01:15:02,560 --> 01:15:04,239
it will be useful to see if we can make

1780
01:15:04,239 --> 01:15:05,600
this work within the existing

1781
01:15:05,600 --> 01:15:06,719
architecture

1782
01:15:06,719 --> 01:15:09,920
and i see no reason why we can't do that

1783
01:15:09,920 --> 01:15:10,560
um

1784
01:15:10,560 --> 01:15:12,480
so i think rather than just diving

1785
01:15:12,480 --> 01:15:14,000
straight into throwing away the the

1786
01:15:14,000 --> 01:15:16,400
entirety of the last 25 years of work

1787
01:15:16,400 --> 01:15:17,120
here

1788
01:15:17,120 --> 01:15:19,199
uh in in defining payload formats we

1789
01:15:19,199 --> 01:15:20,640
should think about

1790
01:15:20,640 --> 01:15:22,159
what are the actual requirements and is

1791
01:15:22,159 --> 01:15:23,760
there a solution which is compatible

1792
01:15:23,760 --> 01:15:26,000
with the existing architecture

1793
01:15:26,000 --> 01:15:28,800
so from what i understand uh what you're

1794
01:15:28,800 --> 01:15:30,159
asking for

1795
01:15:30,159 --> 01:15:34,080
is saying so you propose something

1796
01:15:34,080 --> 01:15:38,000
is it efficient and can we compare

1797
01:15:38,000 --> 01:15:41,360
it with uh another way of doing things

1798
01:15:41,360 --> 01:15:43,679
that would be code specific

1799
01:15:43,679 --> 01:15:46,560
let's compare it apples to apples and

1800
01:15:46,560 --> 01:15:47,280
then

1801
01:15:47,280 --> 01:15:49,600
if there are some advantages on one side

1802
01:15:49,600 --> 01:15:50,880
yeah let's look for it and if there are

1803
01:15:50,880 --> 01:15:51,679
advantages

1804
01:15:51,679 --> 01:15:54,080
on the other side yeah why not also

1805
01:15:54,080 --> 01:15:54,719
specify

1806
01:15:54,719 --> 01:15:57,920
it is that correct uh i

1807
01:15:57,920 --> 01:16:00,320
i'm saying that that the rtp

1808
01:16:00,320 --> 01:16:01,920
architecture

1809
01:16:01,920 --> 01:16:04,000
fundamentally relies on knowing the

1810
01:16:04,000 --> 01:16:05,600
codec and fund

1811
01:16:05,600 --> 01:16:07,440
fundamentally relies on things being

1812
01:16:07,440 --> 01:16:09,199
codec specific

1813
01:16:09,199 --> 01:16:11,600
and i think you can achieve your goals

1814
01:16:11,600 --> 01:16:12,239
uh

1815
01:16:12,239 --> 01:16:15,120
in a way which is generic and works with

1816
01:16:15,120 --> 01:16:16,640
the middle boxes

1817
01:16:16,640 --> 01:16:18,719
and it allows you to do the same sorts

1818
01:16:18,719 --> 01:16:20,719
of transformations whilst doing it in a

1819
01:16:20,719 --> 01:16:23,360
way which fits with the architecture

1820
01:16:23,360 --> 01:16:25,520
if if you try to design the system that

1821
01:16:25,520 --> 01:16:26,960
way

1822
01:16:26,960 --> 01:16:28,880
rather than making the assumption that

1823
01:16:28,880 --> 01:16:34,400
you throw away the existing architecture

1824
01:16:34,400 --> 01:16:36,560
yeah i think as colin just said right

1825
01:16:36,560 --> 01:16:38,080
something like srtp

1826
01:16:38,080 --> 01:16:41,199
would be considered codec agnostic but

1827
01:16:41,199 --> 01:16:43,600
that doesn't mean everything in the srtb

1828
01:16:43,600 --> 01:16:45,679
architecture throws away the knowledge

1829
01:16:45,679 --> 01:16:49,679
of codex

1830
01:16:49,679 --> 01:16:51,440
right i think it would also be possible

1831
01:16:51,440 --> 01:16:53,600
to define a a

1832
01:16:53,600 --> 01:16:56,239
a common way of transforming a payload

1833
01:16:56,239 --> 01:16:57,280
and sigma

1834
01:16:57,280 --> 01:17:00,080
and signaling that um such a transform

1835
01:17:00,080 --> 01:17:02,000
has been done and using a different

1836
01:17:02,000 --> 01:17:04,480
payload type to indicate that and that

1837
01:17:04,480 --> 01:17:05,040
would also

1838
01:17:05,040 --> 01:17:07,440
let you know let the decoder know how to

1839
01:17:07,440 --> 01:17:08,239
decode it

1840
01:17:08,239 --> 01:17:10,480
um

1841
01:17:11,600 --> 01:17:14,320
so to be clear that's what you just said

1842
01:17:14,320 --> 01:17:16,080
colin that's the thing that is codec

1843
01:17:16,080 --> 01:17:18,400
agnostic

1844
01:17:18,400 --> 01:17:21,199
the rest of it is and that's somehow

1845
01:17:21,199 --> 01:17:22,960
yeah one option that it is quite in the

1846
01:17:22,960 --> 01:17:24,080
draft

1847
01:17:24,080 --> 01:17:26,159
no but but i think that what colleen is

1848
01:17:26,159 --> 01:17:27,360
saying is something different i mean

1849
01:17:27,360 --> 01:17:29,199
what i think that is what he's asking is

1850
01:17:29,199 --> 01:17:31,840
to is for his friend to not work on a

1851
01:17:31,840 --> 01:17:34,000
framed level but work on a per packet

1852
01:17:34,000 --> 01:17:34,560
level

1853
01:17:34,560 --> 01:17:38,000
so i think that it is reasonable but um

1854
01:17:38,000 --> 01:17:40,880
i think that this frame must change to

1855
01:17:40,880 --> 01:17:41,520
the order

1856
01:17:41,520 --> 01:17:45,840
be able to be able to implement this

1857
01:17:46,320 --> 01:17:48,880
and that that's why i was asking about

1858
01:17:48,880 --> 01:17:50,080
efficiency because

1859
01:17:50,080 --> 01:17:53,120
we we can we can do this approach where

1860
01:17:53,120 --> 01:17:54,239
it's per packet

1861
01:17:54,239 --> 01:17:57,199
uh as fermentation or perfect

1862
01:17:57,199 --> 01:17:58,560
fertilization and

1863
01:17:58,560 --> 01:18:00,640
we will see there will be differences in

1864
01:18:00,640 --> 01:18:02,640
terms of efficiency as well

1865
01:18:02,640 --> 01:18:06,560
and that's something that people might

1866
01:18:06,560 --> 01:18:09,840
i'm not i'm not sure that's necessarily

1867
01:18:09,840 --> 01:18:10,400
true

1868
01:18:10,400 --> 01:18:11,600
i think it would that would be an

1869
01:18:11,600 --> 01:18:13,600
implementation you know that depend how

1870
01:18:13,600 --> 01:18:27,840
you implemented it

1871
01:18:33,199 --> 01:18:35,040
i think here that the question is is

1872
01:18:35,040 --> 01:18:36,880
going back to the fundamental issue is

1873
01:18:36,880 --> 01:18:40,080
if we do a frame encoding a

1874
01:18:40,080 --> 01:18:43,120
sorry upper frame encryption we need to

1875
01:18:43,120 --> 01:18:45,360
have something that it is

1876
01:18:45,360 --> 01:18:47,600
agnostic because the packetizer is going

1877
01:18:47,600 --> 01:18:49,040
to be handling

1878
01:18:49,040 --> 01:18:52,239
uh encrypting the data encrypted the

1879
01:18:52,239 --> 01:18:54,879
media data

1880
01:18:59,760 --> 01:19:03,920
i don't agree that that is true

1881
01:19:05,679 --> 01:19:08,239
i think you can split thing you know i i

1882
01:19:08,239 --> 01:19:10,000
think this can be done

1883
01:19:10,000 --> 01:19:13,679
in an agnostic you know i think you can

1884
01:19:13,679 --> 01:19:18,080
you can encrypt a frame at a time and

1885
01:19:18,080 --> 01:19:21,520
split the resulting uh encrypted frame

1886
01:19:21,520 --> 01:19:23,679
up in a way which is consistent with the

1887
01:19:23,679 --> 01:19:25,840
rtp architecture and signal it in a way

1888
01:19:25,840 --> 01:19:27,360
that's consistent with the rtp

1889
01:19:27,360 --> 01:19:29,920
architecture but for example would you

1890
01:19:29,920 --> 01:19:31,040
be willing to help

1891
01:19:31,040 --> 01:19:34,159
in defining that no no but

1892
01:19:34,159 --> 01:19:36,800
i mean we have i i have studied that and

1893
01:19:36,800 --> 01:19:38,000
it is

1894
01:19:38,000 --> 01:19:40,800
difficult to do it i mean for example in

1895
01:19:40,800 --> 01:19:43,040
a 264 you have to increase each of the

1896
01:19:43,040 --> 01:19:44,320
null independently

1897
01:19:44,320 --> 01:19:47,600
in bp8 you will have to

1898
01:19:47,600 --> 01:19:50,960
leave the first bytes of the

1899
01:19:50,960 --> 01:19:53,920
of the payloading so it is a very huge

1900
01:19:53,920 --> 01:19:55,760
effort i mean if we want to go there it

1901
01:19:55,760 --> 01:19:56,159
was

1902
01:19:56,159 --> 01:19:58,960
also the first slide and when we

1903
01:19:58,960 --> 01:19:59,440
explained

1904
01:19:59,440 --> 01:20:02,400
why the current packetization does not

1905
01:20:02,400 --> 01:20:03,520
work with the

1906
01:20:03,520 --> 01:20:06,400
with the current codex and also i don't

1907
01:20:06,400 --> 01:20:08,480
think it is a good thing that

1908
01:20:08,480 --> 01:20:11,120
you are saying that you are going um

1909
01:20:11,120 --> 01:20:12,800
that you are sending normal for example

1910
01:20:12,800 --> 01:20:14,080
excuses for

1911
01:20:14,080 --> 01:20:16,480
and data when you are just sending

1912
01:20:16,480 --> 01:20:18,480
encrypted data

1913
01:20:18,480 --> 01:20:21,600
because nobody suggested that what what

1914
01:20:21,600 --> 01:20:22,800
i am suggesting is

1915
01:20:22,800 --> 01:20:25,199
is that you send a payload format you

1916
01:20:25,199 --> 01:20:26,800
know a payload type that indicates that

1917
01:20:26,800 --> 01:20:27,440
this is an

1918
01:20:27,440 --> 01:20:30,480
encrypted h.264 data rather than a

1919
01:20:30,480 --> 01:20:31,120
payload

1920
01:20:31,120 --> 01:20:33,199
type that indicates that this exact you

1921
01:20:33,199 --> 01:20:34,480
know a generic

1922
01:20:34,480 --> 01:20:37,520
encrypted data and that way

1923
01:20:37,520 --> 01:20:39,760
that's what we are that's that's what we

1924
01:20:39,760 --> 01:20:41,040
are doing

1925
01:20:41,040 --> 01:20:44,560
yep but we are not defined we have not

1926
01:20:44,560 --> 01:20:45,120
yet

1927
01:20:45,120 --> 01:20:46,719
been able to present that but we are

1928
01:20:46,719 --> 01:20:48,159
doing that we are saying that we are

1929
01:20:48,159 --> 01:20:48,480
saying

1930
01:20:48,480 --> 01:20:51,199
estrus is for encrypted data it's in the

1931
01:20:51,199 --> 01:20:51,679
draft

1932
01:20:51,679 --> 01:20:56,639
yeah but then it can't be coded agnostic

1933
01:20:56,639 --> 01:20:58,080
that that's what i think there's some

1934
01:20:58,080 --> 01:21:00,239
bits that are

1935
01:21:00,239 --> 01:21:02,320
if this is codec specific then it is a

1936
01:21:02,320 --> 01:21:04,000
payload format and it's defined in the

1937
01:21:04,000 --> 01:21:05,120
usual way

1938
01:21:05,120 --> 01:21:06,800
and if it's codec agnostic then it's

1939
01:21:06,800 --> 01:21:09,040
throwing out all that architecture

1940
01:21:09,040 --> 01:21:11,920
so what we're saying is that we we do

1941
01:21:11,920 --> 01:21:13,360
not plan to have like

1942
01:21:13,360 --> 01:21:16,239
to define an h.264 encrypted payload

1943
01:21:16,239 --> 01:21:17,760
format

1944
01:21:17,760 --> 01:21:20,880
but we definitely want the

1945
01:21:20,880 --> 01:21:24,719
uh stream to acknowledge two things

1946
01:21:24,719 --> 01:21:27,600
first it's encrypted using a frame

1947
01:21:27,600 --> 01:21:28,000
second

1948
01:21:28,000 --> 01:21:30,960
it's h64

1949
01:21:33,440 --> 01:21:35,840
i i i am really struggling to see how

1950
01:21:35,840 --> 01:21:37,600
this works with the signaling and

1951
01:21:37,600 --> 01:21:43,040
with the architecture if we can get to

1952
01:21:52,400 --> 01:21:54,840
drain and then let sergio go on with the

1953
01:21:54,840 --> 01:21:56,000
presentation

1954
01:21:56,000 --> 01:21:58,719
yeah sounds good

1955
01:22:08,840 --> 01:22:11,840
stefan

1956
01:22:15,040 --> 01:22:25,840
no i cannot hear you

1957
01:22:25,920 --> 01:22:30,000
can you hear me now yes

1958
01:22:35,120 --> 01:22:39,600
i cannot hear you again

1959
01:22:39,600 --> 01:22:42,080
the danger of implementation driven

1960
01:22:42,080 --> 01:22:45,280
standards work really

1961
01:22:45,760 --> 01:22:49,120
as as nice as this may be normally here

1962
01:22:49,120 --> 01:22:52,000
there's just too many oversights so on

1963
01:22:52,000 --> 01:22:54,080
on the terminology front i think we have

1964
01:22:54,080 --> 01:22:56,000
something like a semi-codec agnostic

1965
01:22:56,000 --> 01:22:58,480
it's agnostic for certain codex but

1966
01:22:58,480 --> 01:23:00,480
agnostic to certain codecs but not to

1967
01:23:00,480 --> 01:23:01,840
other codex

1968
01:23:01,840 --> 01:23:04,400
so the the applicability here of this

1969
01:23:04,400 --> 01:23:06,639
technology is limited

1970
01:23:06,639 --> 01:23:10,320
to a number of codecs and what they want

1971
01:23:10,320 --> 01:23:10,960
to do

1972
01:23:10,960 --> 01:23:13,210
is to

1973
01:23:13,210 --> 01:23:14,880
[Music]

1974
01:23:14,880 --> 01:23:18,719
to create a mechanism that would work

1975
01:23:18,719 --> 01:23:21,440
with all the codex they had in mind when

1976
01:23:21,440 --> 01:23:22,000
they were

1977
01:23:22,000 --> 01:23:27,120
doing this thing but hopefully without

1978
01:23:27,120 --> 01:23:30,239
assuming or without hoping against hope

1979
01:23:30,239 --> 01:23:31,760
in my opinion

1980
01:23:31,760 --> 01:23:33,920
that it will apply to all future codex

1981
01:23:33,920 --> 01:23:35,440
and we have already had an example so

1982
01:23:35,440 --> 01:23:37,199
the the example here

1983
01:23:37,199 --> 01:23:39,840
why it wouldn't work with future codex

1984
01:23:39,840 --> 01:23:40,320
is

1985
01:23:40,320 --> 01:23:43,280
for everyone i just heard from the from

1986
01:23:43,280 --> 01:23:45,280
the thing that jonathan pointed out

1987
01:23:45,280 --> 01:23:48,560
that you need the dd um in order to make

1988
01:23:48,560 --> 01:23:49,120
sense

1989
01:23:49,120 --> 01:23:51,040
of this type of stuff in the decoder

1990
01:23:51,040 --> 01:23:52,560
when you have scalability

1991
01:23:52,560 --> 01:23:57,440
there are tons of tons of um

1992
01:23:58,980 --> 01:24:01,040
[Music]

1993
01:24:01,040 --> 01:24:04,320
uh video codecs which do not necessarily

1994
01:24:04,320 --> 01:24:04,960
have

1995
01:24:04,960 --> 01:24:09,040
the same uh the same concept

1996
01:24:09,040 --> 01:24:13,040
for temporal scalability at least

1997
01:24:13,199 --> 01:24:18,159
as the dd right shvc doesn't have a dd

1998
01:24:18,159 --> 01:24:20,159
the video parameter set doesn't express

1999
01:24:20,159 --> 01:24:22,639
everything the dd expresses

2000
01:24:22,639 --> 01:24:25,679
the vbc doesn't do that evc doesn't do

2001
01:24:25,679 --> 01:24:26,560
that

2002
01:24:26,560 --> 01:24:28,960
so don't tell me that your generic

2003
01:24:28,960 --> 01:24:30,320
architecture would work with these

2004
01:24:30,320 --> 01:24:31,600
codecs when

2005
01:24:31,600 --> 01:24:34,719
when during a brainstorming session

2006
01:24:34,719 --> 01:24:38,239
for of of a few minutes it came already

2007
01:24:38,239 --> 01:24:41,120
out that it would not do it no but but i

2008
01:24:41,120 --> 01:24:43,040
also understand that you will want to

2009
01:24:43,040 --> 01:24:44,480
express that

2010
01:24:44,480 --> 01:24:47,520
and that a middle box that's

2011
01:24:47,520 --> 01:24:51,120
making use of this can cope with a

2012
01:24:51,120 --> 01:24:52,000
limited set

2013
01:24:52,000 --> 01:24:54,719
of codecs and not only with h.264 or

2014
01:24:54,719 --> 01:24:56,000
h.265 and

2015
01:24:56,000 --> 01:24:59,120
or or vp8 and bp9 and you also want to

2016
01:24:59,120 --> 01:25:00,000
express

2017
01:25:00,000 --> 01:25:01,840
and you also don't want to replicate the

2018
01:25:01,840 --> 01:25:04,800
same thing in in multiple

2019
01:25:04,800 --> 01:25:08,560
documents specific to say h.264 and h265

2020
01:25:08,560 --> 01:25:11,440
so okay um the way to do this would be

2021
01:25:11,440 --> 01:25:12,880
don't call it generic

2022
01:25:12,880 --> 01:25:16,480
call it um or make an applicability

2023
01:25:16,480 --> 01:25:17,920
statement this

2024
01:25:17,920 --> 01:25:20,480
this specification is intended to and

2025
01:25:20,480 --> 01:25:21,840
believed to work

2026
01:25:21,840 --> 01:25:23,440
with the following codex and then comes

2027
01:25:23,440 --> 01:25:24,960
a list

2028
01:25:24,960 --> 01:25:28,800
and uh in the title tone it down a

2029
01:25:28,800 --> 01:25:29,360
little bit

2030
01:25:29,360 --> 01:25:31,280
and then go for it that's how i would

2031
01:25:31,280 --> 01:25:34,000
approach this generic versus non-generic

2032
01:25:34,000 --> 01:25:37,280
problem thank you i have one other

2033
01:25:37,280 --> 01:25:37,760
comment

2034
01:25:37,760 --> 01:25:41,520
and that is

2035
01:25:43,760 --> 01:25:47,120
the let's not forget

2036
01:25:47,120 --> 01:25:49,520
that the vast majority of bits that are

2037
01:25:49,520 --> 01:25:52,159
going over rtp in this world today

2038
01:25:52,159 --> 01:25:55,679
are not webrtc bits and

2039
01:25:55,679 --> 01:25:58,560
i know webrtc is the itf technology and

2040
01:25:58,560 --> 01:26:00,159
blah blah blah but

2041
01:26:00,159 --> 01:26:01,920
but let's not forget that the vast

2042
01:26:01,920 --> 01:26:03,520
majority

2043
01:26:03,520 --> 01:26:06,800
of of uh

2044
01:26:06,800 --> 01:26:09,679
interactive video today is not using

2045
01:26:09,679 --> 01:26:11,199
webrtc

2046
01:26:11,199 --> 01:26:16,000
and i would not want to uh

2047
01:26:16,000 --> 01:26:19,199
um use this uh

2048
01:26:19,199 --> 01:26:22,719
type of drafts as an i would not like to

2049
01:26:22,719 --> 01:26:25,199
see others to use this type of drafts

2050
01:26:25,199 --> 01:26:29,520
as a pusher for uh for itf technology

2051
01:26:29,520 --> 01:26:33,120
uh for no other merits as being a push

2052
01:26:33,120 --> 01:26:36,719
thank you um so

2053
01:26:36,719 --> 01:26:38,810
i agree with you that um

2054
01:26:38,810 --> 01:26:40,560
[Music]

2055
01:26:40,560 --> 01:26:43,199
it will be very difficult to come up

2056
01:26:43,199 --> 01:26:43,679
with

2057
01:26:43,679 --> 01:26:46,560
uh sfus that could be implemented in a

2058
01:26:46,560 --> 01:26:47,679
fully codec

2059
01:26:47,679 --> 01:26:50,800
agnostic way and uh we're not trying to

2060
01:26:50,800 --> 01:26:51,920
solve that

2061
01:26:51,920 --> 01:26:55,360
what we are trying to do is to

2062
01:26:55,360 --> 01:26:57,760
migrate the information that might be

2063
01:26:57,760 --> 01:26:59,040
codec specific

2064
01:26:59,040 --> 01:27:01,280
from the payload to the rtp head

2065
01:27:01,280 --> 01:27:02,840
extensions

2066
01:27:02,840 --> 01:27:06,480
and um you you you took the example

2067
01:27:06,480 --> 01:27:09,760
that uh the dd descriptor will be good

2068
01:27:09,760 --> 01:27:10,880
for ev1

2069
01:27:10,880 --> 01:27:13,600
and we think so we are not saying that

2070
01:27:13,600 --> 01:27:16,320
the dd will be good for all codecs

2071
01:27:16,320 --> 01:27:19,679
it's then up to the application to use

2072
01:27:19,679 --> 01:27:22,400
what we're proposing and select the

2073
01:27:22,400 --> 01:27:24,239
right rtp head extension

2074
01:27:24,239 --> 01:27:27,679
that will cover uh the cases

2075
01:27:27,679 --> 01:27:32,400
and hopefully

2076
01:27:32,400 --> 01:27:34,639
the header extensions that we that we

2077
01:27:34,639 --> 01:27:36,480
are planning to use will be

2078
01:27:36,480 --> 01:27:39,360
supporting enough codecs uh enough video

2079
01:27:39,360 --> 01:27:41,360
codecs enough audio codecs

2080
01:27:41,360 --> 01:27:44,400
that there will not be a huge

2081
01:27:44,400 --> 01:27:47,760
replication effort but certainly it will

2082
01:27:47,760 --> 01:27:50,080
evolve

2083
01:27:59,440 --> 01:28:01,520
so i will also agree that we should

2084
01:28:01,520 --> 01:28:03,600
remove the name agnostic

2085
01:28:03,600 --> 01:28:06,560
it's definitely

2086
01:28:06,800 --> 01:28:15,840
a term that is not specific enough

2087
01:28:19,920 --> 01:28:22,400
also i would be interested in knowing um

2088
01:28:22,400 --> 01:28:23,840
the specific details about

2089
01:28:23,840 --> 01:28:27,360
a bbc and and how this codec does not

2090
01:28:27,360 --> 01:28:28,800
work with the dependence and distributor

2091
01:28:28,800 --> 01:28:29,280
i mean

2092
01:28:29,280 --> 01:28:31,120
because i i think it's interesting so if

2093
01:28:31,120 --> 01:28:32,400
you can provide

2094
01:28:32,400 --> 01:28:34,960
in the list how the independence

2095
01:28:34,960 --> 01:28:36,239
industry

2096
01:28:36,239 --> 01:28:39,920
wi-fi may fail to do to include the data

2097
01:28:39,920 --> 01:28:40,719
from

2098
01:28:40,719 --> 01:28:44,719
from bbc it will be right

2099
01:28:44,719 --> 01:28:47,760
it should it should not

2100
01:28:47,760 --> 01:28:50,800
be particularly hard to come up with

2101
01:28:50,800 --> 01:28:53,679
examples why the technology is currently

2102
01:28:53,679 --> 01:28:57,840
specified would not work

2103
01:28:58,000 --> 01:29:01,040
could you provide that please i will i

2104
01:29:01,040 --> 01:29:02,239
will try

2105
01:29:02,239 --> 01:29:06,879
uh i'll try um i'm

2106
01:29:07,040 --> 01:29:11,120
so that said uh

2107
01:29:11,120 --> 01:29:14,400
you know you can't i think if you are

2108
01:29:14,400 --> 01:29:16,560
going in the direction of

2109
01:29:16,560 --> 01:29:20,159
of of trying to create

2110
01:29:20,159 --> 01:29:23,600
um of trying to

2111
01:29:23,600 --> 01:29:25,280
resurrect your dream of creating

2112
01:29:25,280 --> 01:29:28,239
something generic at least to the known

2113
01:29:28,239 --> 01:29:31,199
codex as of this day

2114
01:29:31,199 --> 01:29:35,520
then i will try to do some work there

2115
01:29:35,520 --> 01:29:39,440
but don't expect me to specifically

2116
01:29:39,440 --> 01:29:42,480
argue with you about whether this is

2117
01:29:42,480 --> 01:29:43,440
true or that

2118
01:29:43,440 --> 01:29:47,440
is true um if it is if this were

2119
01:29:47,440 --> 01:29:50,239
uh if you are if you were continuing to

2120
01:29:50,239 --> 01:29:51,120
exist that this

2121
01:29:51,120 --> 01:29:53,840
is an agnostic thing then it's your

2122
01:29:53,840 --> 01:29:55,520
burden of proof to show that it is

2123
01:29:55,520 --> 01:29:56,400
agnostic

2124
01:29:56,400 --> 01:29:58,400
and not by my burden of proof that it is

2125
01:29:58,400 --> 01:30:00,719
not agnostic you you see my point

2126
01:30:00,719 --> 01:30:02,960
yeah so i'm helping on best effort basis

2127
01:30:02,960 --> 01:30:03,760
but not

2128
01:30:03,760 --> 01:30:08,480
uh on a you know on an obligation basis

2129
01:30:08,480 --> 01:30:10,799
thank you

2130
01:30:18,840 --> 01:30:21,840
justin

2131
01:30:22,800 --> 01:30:26,000
yeah so i i think it should be fairly

2132
01:30:26,000 --> 01:30:28,560
clear that the compactization is it's

2133
01:30:28,560 --> 01:30:29,280
possible to

2134
01:30:29,280 --> 01:30:32,560
to be you know generic you know the the

2135
01:30:32,560 --> 01:30:33,679
packetization is strongly

2136
01:30:33,679 --> 01:30:35,040
straightforward

2137
01:30:35,040 --> 01:30:36,880
uh you know in terms of basically how it

2138
01:30:36,880 --> 01:30:38,639
breaks up packets to fit within

2139
01:30:38,639 --> 01:30:40,960
mtu and like i think it can be argued

2140
01:30:40,960 --> 01:30:42,560
fairly easily that like

2141
01:30:42,560 --> 01:30:44,719
you know things that produce you know

2142
01:30:44,719 --> 01:30:46,080
essentially datagrams

2143
01:30:46,080 --> 01:30:49,360
can be you know generically packetized

2144
01:30:49,360 --> 01:30:51,280
the you know the only other sort of

2145
01:30:51,280 --> 01:30:52,960
requirement that's been placed here is

2146
01:30:52,960 --> 01:30:55,360
that there can be some way of splitting

2147
01:30:55,360 --> 01:30:58,719
the metadata in the the payload

2148
01:30:58,719 --> 01:31:00,880
and assuming that can be done for a

2149
01:31:00,880 --> 01:31:02,639
given codec format

2150
01:31:02,639 --> 01:31:04,560
then the actual payload can then be

2151
01:31:04,560 --> 01:31:07,199
packetized using this generic packetizer

2152
01:31:07,199 --> 01:31:10,159
so the question that then remains is can

2153
01:31:10,159 --> 01:31:12,560
the metadata be described in a generic

2154
01:31:12,560 --> 01:31:13,520
way

2155
01:31:13,520 --> 01:31:15,040
and i think that's what a lot of people

2156
01:31:15,040 --> 01:31:16,960
are sort of latching onto here

2157
01:31:16,960 --> 01:31:19,120
like can this packation be generic or

2158
01:31:19,120 --> 01:31:20,800
not because like

2159
01:31:20,800 --> 01:31:22,880
it definitely is a complicated problem

2160
01:31:22,880 --> 01:31:24,320
as to whether or not

2161
01:31:24,320 --> 01:31:26,080
the metadata for all codecs can be

2162
01:31:26,080 --> 01:31:28,159
described in like a generic way

2163
01:31:28,159 --> 01:31:30,000
like i i think that's a totally

2164
01:31:30,000 --> 01:31:31,920
reasonable thing that people can

2165
01:31:31,920 --> 01:31:34,719
can differ on the thing is though i

2166
01:31:34,719 --> 01:31:36,080
don't think that that is really

2167
01:31:36,080 --> 01:31:37,360
fundamental

2168
01:31:37,360 --> 01:31:39,760
to the this document here it's like if

2169
01:31:39,760 --> 01:31:42,560
you have a generic format for metadata

2170
01:31:42,560 --> 01:31:45,199
then it makes the sfu's life easier

2171
01:31:45,199 --> 01:31:46,880
because it has a single way to look at

2172
01:31:46,880 --> 01:31:47,679
what's coming in

2173
01:31:47,679 --> 01:31:48,960
and they can then act on that

2174
01:31:48,960 --> 01:31:51,520
accordingly but even without

2175
01:31:51,520 --> 01:31:54,639
a generic metadata that you know codex

2176
01:31:54,639 --> 01:31:55,199
could still

2177
01:31:55,199 --> 01:31:56,880
you know sfps could still sort of work

2178
01:31:56,880 --> 01:31:58,400
in the way they do today

2179
01:31:58,400 --> 01:32:00,080
without end-to-end encryption where

2180
01:32:00,080 --> 01:32:01,840
they're forced to look at these pieces

2181
01:32:01,840 --> 01:32:02,880
individually

2182
01:32:02,880 --> 01:32:04,880
on a codex specific uh you know in a

2183
01:32:04,880 --> 01:32:05,920
kind of specific way

2184
01:32:05,920 --> 01:32:07,360
to determine what their behavior should

2185
01:32:07,360 --> 01:32:09,040
be and there

2186
01:32:09,040 --> 01:32:11,679
uh you know even if we you know still

2187
01:32:11,679 --> 01:32:13,360
had things that did not fit the generic

2188
01:32:13,360 --> 01:32:16,159
uh packages or generics or metadata you

2189
01:32:16,159 --> 01:32:18,320
know sfus could continue to do that

2190
01:32:18,320 --> 01:32:20,480
so what i would want to do is just sort

2191
01:32:20,480 --> 01:32:21,840
of say okay

2192
01:32:21,840 --> 01:32:24,639
take that off the table yesterday can

2193
01:32:24,639 --> 01:32:26,560
still be useful you know even if it

2194
01:32:26,560 --> 01:32:28,000
doesn't have a completely generic

2195
01:32:28,000 --> 01:32:28,800
metadata

2196
01:32:28,800 --> 01:32:30,480
because it still allows like the

2197
01:32:30,480 --> 01:32:32,159
transmission of the end encryption

2198
01:32:32,159 --> 01:32:33,120
formats

2199
01:32:33,120 --> 01:32:35,440
uh and the separation of metadata and

2200
01:32:35,440 --> 01:32:36,960
payload which is the main things that

2201
01:32:36,960 --> 01:32:41,840
is required to actually work

2202
01:32:41,840 --> 01:32:43,600
yeah i completely agree with you also

2203
01:32:43,600 --> 01:32:45,440
just one thing that the metadata the

2204
01:32:45,440 --> 01:32:47,040
metadata that it is needed

2205
01:32:47,040 --> 01:32:49,520
is only the one that the svu is

2206
01:32:49,520 --> 01:32:51,040
requiring for work i mean we are not

2207
01:32:51,040 --> 01:32:52,800
trying to provide all the metadata in

2208
01:32:52,800 --> 01:32:53,520
the world

2209
01:32:53,520 --> 01:32:56,560
to inaccurately work only the ones

2210
01:32:56,560 --> 01:32:58,880
only that the specific data that is

2211
01:32:58,880 --> 01:32:59,840
required

2212
01:32:59,840 --> 01:33:03,520
for the svu to work

2213
01:33:03,520 --> 01:33:07,040
exactly yeah now whether that can be

2214
01:33:07,040 --> 01:33:09,040
fully generic is still an open question

2215
01:33:09,040 --> 01:33:11,440
uh but i think that we have a good set

2216
01:33:11,440 --> 01:33:12,719
that seems to work for

2217
01:33:12,719 --> 01:33:14,000
well you know critics that are known

2218
01:33:14,000 --> 01:33:15,840
today and even if there are ones that

2219
01:33:15,840 --> 01:33:17,840
kind of go beyond that tomorrow

2220
01:33:17,840 --> 01:33:19,920
uh you know like i said it's not really

2221
01:33:19,920 --> 01:33:21,840
a critical issue sfus can deal with this

2222
01:33:21,840 --> 01:33:23,199
custom metadata

2223
01:33:23,199 --> 01:33:25,360
uh the only in critical piece is that

2224
01:33:25,360 --> 01:33:26,960
you have things that produce packets

2225
01:33:26,960 --> 01:33:28,880
and then those packets have their you

2226
01:33:28,880 --> 01:33:31,280
know uh metadata and actual payload

2227
01:33:31,280 --> 01:33:32,080
separated

2228
01:33:32,080 --> 01:33:33,360
and i think that you know all the codecs

2229
01:33:33,360 --> 01:33:37,839
that we're talking about can do that

2230
01:33:45,520 --> 01:33:51,840
can i just respond to that very quickly

2231
01:33:56,560 --> 01:33:57,920
call them please go ahead and respond to

2232
01:33:57,920 --> 01:34:00,239
that and then i'll go back to that so

2233
01:34:00,239 --> 01:34:03,760
i'm not sure i agree with justin's

2234
01:34:03,760 --> 01:34:06,639
statement that we can build a generic

2235
01:34:06,639 --> 01:34:08,320
format

2236
01:34:08,320 --> 01:34:11,520
i think at the minimum you need to know

2237
01:34:11,520 --> 01:34:15,040
where the um the independently decodable

2238
01:34:15,040 --> 01:34:15,760
units

2239
01:34:15,760 --> 01:34:17,520
uh you know the null units or whatever

2240
01:34:17,520 --> 01:34:19,280
it is for that codec um

2241
01:34:19,280 --> 01:34:22,159
start and finish so you can packetize it

2242
01:34:22,159 --> 01:34:24,000
in a way that you don't split these

2243
01:34:24,000 --> 01:34:26,960
units across packets

2244
01:34:26,960 --> 01:34:30,480
and that's that makes it specific

2245
01:34:30,480 --> 01:34:33,040
you need to identify the codec so you so

2246
01:34:33,040 --> 01:34:34,880
you know how to decode it

2247
01:34:34,880 --> 01:34:38,639
how to decode it and as justin said you

2248
01:34:38,639 --> 01:34:39,360
need to

2249
01:34:39,360 --> 01:34:40,960
to separate out the headers and the

2250
01:34:40,960 --> 01:34:43,280
metadata information from the payload

2251
01:34:43,280 --> 01:34:46,239
uh and from the encrypted content and

2252
01:34:46,239 --> 01:34:48,480
this is fundamentally what rtp payload

2253
01:34:48,480 --> 01:34:50,000
formats do

2254
01:34:50,000 --> 01:34:53,119
and this is the fundamental point of the

2255
01:34:53,119 --> 01:34:55,520
the payload format concept is just even

2256
01:34:55,520 --> 01:34:57,199
if all you're specifying is how you

2257
01:34:57,199 --> 01:34:58,560
split this thing up into

2258
01:34:58,560 --> 01:35:00,800
into pieces how you label them and how

2259
01:35:00,800 --> 01:35:01,840
you separate out

2260
01:35:01,840 --> 01:35:04,639
the the contents from the the headers

2261
01:35:04,639 --> 01:35:06,239
that's what a payload format does it

2262
01:35:06,239 --> 01:35:08,080
doesn't have to be more complicated than

2263
01:35:08,080 --> 01:35:09,040
that

2264
01:35:09,040 --> 01:35:11,199
so i think what you're just describing

2265
01:35:11,199 --> 01:35:13,199
an rtp payload format

2266
01:35:13,199 --> 01:35:15,600
uh and i think rather than fight against

2267
01:35:15,600 --> 01:35:17,679
that architecture

2268
01:35:17,679 --> 01:35:19,520
you know just accept that what you are

2269
01:35:19,520 --> 01:35:21,360
describing fits within the architecture

2270
01:35:21,360 --> 01:35:23,040
and work with the architecture rather

2271
01:35:23,040 --> 01:35:28,159
than trying to throw it away

2272
01:35:28,159 --> 01:35:31,600
can i just respond to that giggling

2273
01:35:31,600 --> 01:35:35,280
yep i mean i i think that

2274
01:35:35,280 --> 01:35:36,639
you mean those things that you sort of

2275
01:35:36,639 --> 01:35:39,040
mentioned of yes we do need to

2276
01:35:39,040 --> 01:35:42,320
identify the individual units uh

2277
01:35:42,320 --> 01:35:45,119
but really every um you know every

2278
01:35:45,119 --> 01:35:47,360
payload format is doing this

2279
01:35:47,360 --> 01:35:49,520
uh and it does seem kind of strange that

2280
01:35:49,520 --> 01:35:51,199
you know every time we have a new format

2281
01:35:51,199 --> 01:35:53,040
we have to go define really the exact

2282
01:35:53,040 --> 01:35:54,560
same transforms

2283
01:35:54,560 --> 01:35:57,280
uh you know for that particular format

2284
01:35:57,280 --> 01:35:57,760
when

2285
01:35:57,760 --> 01:36:00,080
like if we got a structured sort of

2286
01:36:00,080 --> 01:36:02,480
input from the encoder that sort of said

2287
01:36:02,480 --> 01:36:04,880
here are the frames and independently to

2288
01:36:04,880 --> 01:36:06,159
credible units

2289
01:36:06,159 --> 01:36:08,639
uh then like you could have a fairly

2290
01:36:08,639 --> 01:36:10,400
generic way of describing that on the

2291
01:36:10,400 --> 01:36:11,600
wire

2292
01:36:11,600 --> 01:36:13,760
and i think that's really all that's

2293
01:36:13,760 --> 01:36:15,679
trying to be done here

2294
01:36:15,679 --> 01:36:17,679
uh that you know if you have this you

2295
01:36:17,679 --> 01:36:19,199
know meta information that describes

2296
01:36:19,199 --> 01:36:20,159
like what it is you're trying to

2297
01:36:20,159 --> 01:36:20,960
packetize

2298
01:36:20,960 --> 01:36:22,159
you could then have a single

2299
01:36:22,159 --> 01:36:23,920
packetization format to basically fit

2300
01:36:23,920 --> 01:36:26,080
this into rtv packets and you know empty

2301
01:36:26,080 --> 01:36:26,800
use

2302
01:36:26,800 --> 01:36:29,040
uh accordingly and then you know

2303
01:36:29,040 --> 01:36:30,239
separate out the

2304
01:36:30,239 --> 01:36:32,400
uh you know the meta information so that

2305
01:36:32,400 --> 01:36:33,679
that stuff is not

2306
01:36:33,679 --> 01:36:36,320
encrypted you know for for the sfu

2307
01:36:36,320 --> 01:36:38,239
that's really all it is and i don't

2308
01:36:38,239 --> 01:36:38,880
really feel

2309
01:36:38,880 --> 01:36:41,520
we're throwing away rtp here we're just

2310
01:36:41,520 --> 01:36:42,320
basically saying

2311
01:36:42,320 --> 01:36:44,080
here's the same thing we're doing every

2312
01:36:44,080 --> 01:36:45,679
single time with a new payload format

2313
01:36:45,679 --> 01:36:47,199
and trying to come up with one way we

2314
01:36:47,199 --> 01:36:48,800
don't have to redo this

2315
01:36:48,800 --> 01:36:51,520
uh all over again for every single

2316
01:36:51,520 --> 01:36:52,239
encrypted

2317
01:36:52,239 --> 01:36:55,599
slash format tuple

2318
01:36:55,760 --> 01:36:58,480
so so define a stand a common way of

2319
01:36:58,480 --> 01:37:00,159
doing that that fits with the existing

2320
01:37:00,159 --> 01:37:02,960
set of payload type names

2321
01:37:02,960 --> 01:37:04,800
and the existing mechanisms for signal

2322
01:37:04,800 --> 01:37:07,199
signaling

2323
01:37:11,280 --> 01:37:13,520
i mean well that's what we have here uh

2324
01:37:13,520 --> 01:37:14,800
you know first of all

2325
01:37:14,800 --> 01:37:16,719
justin let me break this i don't think

2326
01:37:16,719 --> 01:37:18,000
that is what you have here at all here

2327
01:37:18,000 --> 01:37:19,440
so let me let me try and give some very

2328
01:37:19,440 --> 01:37:20,080
pragmatic

2329
01:37:20,080 --> 01:37:22,480
suggestions to get to what you're saying

2330
01:37:22,480 --> 01:37:24,159
um and i i think this this gets the

2331
01:37:24,159 --> 01:37:25,520
heart of my comments

2332
01:37:25,520 --> 01:37:27,920
one i think that we mean very different

2333
01:37:27,920 --> 01:37:29,199
thing than packetizer

2334
01:37:29,199 --> 01:37:31,199
i think that what most people here mean

2335
01:37:31,199 --> 01:37:32,639
by pack and this is just terminology

2336
01:37:32,639 --> 01:37:34,000
what's important is we line up what we

2337
01:37:34,000 --> 01:37:34,880
mean okay

2338
01:37:34,880 --> 01:37:37,679
but taking the stream of bits out of the

2339
01:37:37,679 --> 01:37:39,920
encoder and figuring out the logical

2340
01:37:39,920 --> 01:37:41,920
places to break them based

2341
01:37:41,920 --> 01:37:44,000
on things you'd want to lose so breaking

2342
01:37:44,000 --> 01:37:45,679
the mcnally units or whatever the moral

2343
01:37:45,679 --> 01:37:47,760
equivalent of that is in your codec

2344
01:37:47,760 --> 01:37:50,000
is something that's happening on the top

2345
01:37:50,000 --> 01:37:51,199
half of the slide that's currently

2346
01:37:51,199 --> 01:37:52,560
displayed it's happened before the

2347
01:37:52,560 --> 01:37:53,360
transform

2348
01:37:53,360 --> 01:37:55,360
okay and that is what most people think

2349
01:37:55,360 --> 01:37:56,480
of packetization

2350
01:37:56,480 --> 01:37:58,320
i understand there is also a point where

2351
01:37:58,320 --> 01:37:59,840
we take things that were larger than the

2352
01:37:59,840 --> 01:38:01,840
mtu and split them to be smaller than

2353
01:38:01,840 --> 01:38:03,280
the mtu

2354
01:38:03,280 --> 01:38:04,560
i understand that's how you're using the

2355
01:38:04,560 --> 01:38:07,199
word privatization but i i think that

2356
01:38:07,199 --> 01:38:08,960
i think we should i think we should get

2357
01:38:08,960 --> 01:38:10,320
a different word for that second

2358
01:38:10,320 --> 01:38:11,360
transform

2359
01:38:11,360 --> 01:38:13,679
where we slice them smaller um because i

2360
01:38:13,679 --> 01:38:14,719
think that's causing some of the

2361
01:38:14,719 --> 01:38:15,520
confusion

2362
01:38:15,520 --> 01:38:18,880
in in the discussion and then look no

2363
01:38:18,880 --> 01:38:19,360
one

2364
01:38:19,360 --> 01:38:21,840
like the i like we all sort of have like

2365
01:38:21,840 --> 01:38:22,719
as far as

2366
01:38:22,719 --> 01:38:25,360
so one thing's about packetization and

2367
01:38:25,360 --> 01:38:26,719
then i'm going to talk about metadata

2368
01:38:26,719 --> 01:38:28,000
for a second and then esprit

2369
01:38:28,000 --> 01:38:29,840
so packetization i think with some

2370
01:38:29,840 --> 01:38:32,080
confusing terminology which is

2371
01:38:32,080 --> 01:38:33,679
really not helping the conversation here

2372
01:38:33,679 --> 01:38:35,600
in a huge way then

2373
01:38:35,600 --> 01:38:37,679
because packetization is inherently

2374
01:38:37,679 --> 01:38:39,280
codec specific there's no way for

2375
01:38:39,280 --> 01:38:41,600
packetization to not be codec specific

2376
01:38:41,600 --> 01:38:44,000
right in the way i define packetization

2377
01:38:44,000 --> 01:38:45,840
obviously splitting up things on his new

2378
01:38:45,840 --> 01:38:48,159
size is by definite guaranteed to be

2379
01:38:48,159 --> 01:38:48,960
codec

2380
01:38:48,960 --> 01:38:51,760
agnostic right totally agree right so

2381
01:38:51,760 --> 01:38:52,639
that's part of the

2382
01:38:52,639 --> 01:38:55,280
terminology confusion then we have the

2383
01:38:55,280 --> 01:38:56,239
metadata

2384
01:38:56,239 --> 01:38:58,880
so look like audio levels is already a

2385
01:38:58,880 --> 01:39:00,080
great example of

2386
01:39:00,080 --> 01:39:03,040
four audio types a fairly generic works

2387
01:39:03,040 --> 01:39:04,080
with

2388
01:39:04,080 --> 01:39:06,080
you know most things i can imagine of

2389
01:39:06,080 --> 01:39:07,760
type audio media

2390
01:39:07,760 --> 01:39:10,400
way of sending that up to the sfu that's

2391
01:39:10,400 --> 01:39:12,480
great i mean i don't think anyone would

2392
01:39:12,480 --> 01:39:14,719
like let's do some of those for video as

2393
01:39:14,719 --> 01:39:16,480
well whichever ones make sense

2394
01:39:16,480 --> 01:39:18,159
we don't have to claim that they work

2395
01:39:18,159 --> 01:39:19,920
for every video type ever

2396
01:39:19,920 --> 01:39:21,679
we could say like look here are some

2397
01:39:21,679 --> 01:39:23,440
ones we believe these ones work for the

2398
01:39:23,440 --> 01:39:24,159
list

2399
01:39:24,159 --> 01:39:25,679
you know here's a hammer up here's a

2400
01:39:25,679 --> 01:39:27,600
definition of some metadata

2401
01:39:27,600 --> 01:39:30,400
and we believe it works for at least

2402
01:39:30,400 --> 01:39:31,119
these

2403
01:39:31,119 --> 01:39:34,400
common webrtc video codecs and we

2404
01:39:34,400 --> 01:39:36,159
suspect it'll probably work for some 2d

2405
01:39:36,159 --> 01:39:37,760
video codecs in the future

2406
01:39:37,760 --> 01:39:40,080
uh you know and video codex could figure

2407
01:39:40,080 --> 01:39:41,440
it out we don't have to

2408
01:39:41,440 --> 01:39:43,280
to pretend that it will work for all

2409
01:39:43,280 --> 01:39:44,800
video codecs that haven't been defined

2410
01:39:44,800 --> 01:39:45,600
yet or not

2411
01:39:45,600 --> 01:39:47,840
we don't have to pretend that future

2412
01:39:47,840 --> 01:39:49,119
video codecs might not

2413
01:39:49,119 --> 01:39:51,920
need additional metadata for the sfu for

2414
01:39:51,920 --> 01:39:53,280
some reason right

2415
01:39:53,280 --> 01:39:55,440
and we get what we want here on the

2416
01:39:55,440 --> 01:39:56,719
metadata

2417
01:39:56,719 --> 01:40:00,320
and then the third thing is with s frame

2418
01:40:00,320 --> 01:40:02,800
um i think that part of what's causing

2419
01:40:02,800 --> 01:40:03,760
confusion here

2420
01:40:03,760 --> 01:40:06,480
is in is we're sort of overreaching on a

2421
01:40:06,480 --> 01:40:08,080
generic transform here well i think

2422
01:40:08,080 --> 01:40:10,400
that what i see we need to do here is be

2423
01:40:10,400 --> 01:40:11,920
able to indicate

2424
01:40:11,920 --> 01:40:14,080
um in the sdp in some sort of

2425
01:40:14,080 --> 01:40:15,280
negotiation way or whatever

2426
01:40:15,280 --> 01:40:18,639
you know that like look this this

2427
01:40:18,639 --> 01:40:22,400
vp9 was was s was s frame encoded

2428
01:40:22,400 --> 01:40:25,040
um and let's just step back a little bit

2429
01:40:25,040 --> 01:40:26,480
to think about like

2430
01:40:26,480 --> 01:40:27,920
what would be the way if that's all we

2431
01:40:27,920 --> 01:40:29,679
wanted to indicate um

2432
01:40:29,679 --> 01:40:31,520
and we wanted to be able to do that for

2433
01:40:31,520 --> 01:40:32,880
a bunch of the major

2434
01:40:32,880 --> 01:40:35,600
video and audio codecs how we would do

2435
01:40:35,600 --> 01:40:36,719
that in the sdp

2436
01:40:36,719 --> 01:40:39,920
the indicated s frame now i think

2437
01:40:39,920 --> 01:40:43,119
the other thing here is you know

2438
01:40:43,119 --> 01:40:46,159
is the unit of encryption

2439
01:40:46,159 --> 01:40:49,280
span multiple rtp packets or do we do it

2440
01:40:49,280 --> 01:40:52,080
per rtp packet okay sort of the frame

2441
01:40:52,080 --> 01:40:53,119
versus the

2442
01:40:53,119 --> 01:40:56,480
the the the other issue and i keep

2443
01:40:56,480 --> 01:40:58,639
hearing the efficiency issue here

2444
01:40:58,639 --> 01:41:01,040
but for the the the where the overhead's

2445
01:41:01,040 --> 01:41:02,000
high

2446
01:41:02,000 --> 01:41:04,159
um is actually the audio packets because

2447
01:41:04,159 --> 01:41:05,280
they're small right

2448
01:41:05,280 --> 01:41:07,119
and actually it makes no difference it's

2449
01:41:07,119 --> 01:41:08,960
exactly the same whether you do it per

2450
01:41:08,960 --> 01:41:10,239
because it's small because the audio

2451
01:41:10,239 --> 01:41:12,639
packets are always smaller than an mtu

2452
01:41:12,639 --> 01:41:14,480
um it makes there is no efficiency

2453
01:41:14,480 --> 01:41:15,920
difference between doing it for every

2454
01:41:15,920 --> 01:41:18,080
rtp packet and for every frame

2455
01:41:18,080 --> 01:41:20,480
for the video packets i mean when you're

2456
01:41:20,480 --> 01:41:21,440
talking about

2457
01:41:21,440 --> 01:41:23,360
i mean we're talking about adding one

2458
01:41:23,360 --> 01:41:25,520
extra iv vector or something maybe i

2459
01:41:25,520 --> 01:41:27,199
mean it's a very small amount of bytes

2460
01:41:27,199 --> 01:41:28,159
that we're adding as

2461
01:41:28,159 --> 01:41:31,040
overhead and i maybe you gave me the

2462
01:41:31,040 --> 01:41:32,000
estimate the other day when

2463
01:41:32,000 --> 01:41:34,159
we'd add one or two percent bandwidth if

2464
01:41:34,159 --> 01:41:35,119
we

2465
01:41:35,119 --> 01:41:38,159
encrypt for the large video packets if

2466
01:41:38,159 --> 01:41:38,719
we

2467
01:41:38,719 --> 01:41:43,119
if we did it per rtp versus uh per frame

2468
01:41:43,119 --> 01:41:46,000
i think we should really seriously

2469
01:41:46,000 --> 01:41:47,280
reconsider that

2470
01:41:47,280 --> 01:41:48,800
decision and think about if it would

2471
01:41:48,800 --> 01:41:50,480
make more sense to just have

2472
01:41:50,480 --> 01:41:54,239
the s frame applied on per rtp packet

2473
01:41:54,239 --> 01:41:56,480
versus per frame

2474
01:41:56,480 --> 01:41:59,280
and but to collins point regardless of

2475
01:41:59,280 --> 01:42:00,080
how we come across

2476
01:42:00,080 --> 01:42:01,440
on that decision i think that we can

2477
01:42:01,440 --> 01:42:03,840
easily find a solution that continues to

2478
01:42:03,840 --> 01:42:04,719
work

2479
01:42:04,719 --> 01:42:08,000
um so you know and part of the reason i

2480
01:42:08,000 --> 01:42:09,920
like about that is it makes the losses

2481
01:42:09,920 --> 01:42:11,760
of the packets

2482
01:42:11,760 --> 01:42:16,000
more um decoupled from each other

2483
01:42:16,000 --> 01:42:17,920
uh so that it makes some of the

2484
01:42:17,920 --> 01:42:19,280
recoveries and other things easier to

2485
01:42:19,280 --> 01:42:20,000
deal with but

2486
01:42:20,000 --> 01:42:21,280
you know anyway there's pros and cons to

2487
01:42:21,280 --> 01:42:23,280
that but the saving one or two percent

2488
01:42:23,280 --> 01:42:25,520
bandwidth on large video flows is just

2489
01:42:25,520 --> 01:42:26,800
totally irrelevant like

2490
01:42:26,800 --> 01:42:29,520
i see no no gain in that whatsoever so

2491
01:42:29,520 --> 01:42:30,239
let me

2492
01:42:30,239 --> 01:42:31,760
let me just let you respond to that sort

2493
01:42:31,760 --> 01:42:33,440
of stuff the authors respond to that try

2494
01:42:33,440 --> 01:42:34,880
and clarify things but that's how i'd

2495
01:42:34,880 --> 01:42:35,920
like to think about

2496
01:42:35,920 --> 01:42:37,360
how we could really make good progress

2497
01:42:37,360 --> 01:42:43,440
moving forward on this

2498
01:42:43,440 --> 01:42:47,199
yeah okay uh i mean i i think that was

2499
01:42:47,199 --> 01:42:48,960
i i agree with a lot of what was just

2500
01:42:48,960 --> 01:42:50,400
said uh

2501
01:42:50,400 --> 01:42:52,159
you sort of just jump ahead to that i

2502
01:42:52,159 --> 01:42:53,600
mean i i think that

2503
01:42:53,600 --> 01:42:55,840
we should agree on what is meant by

2504
01:42:55,840 --> 01:42:57,360
packetization

2505
01:42:57,360 --> 01:42:59,840
um i i the authors and and i've been

2506
01:42:59,840 --> 01:43:01,280
using the term of basically taking

2507
01:43:01,280 --> 01:43:02,560
something that's already been

2508
01:43:02,560 --> 01:43:04,639
broken up into you know now use with

2509
01:43:04,639 --> 01:43:06,480
equipment and then how do you put that

2510
01:43:06,480 --> 01:43:08,639
in the wire and i think most of us agree

2511
01:43:08,639 --> 01:43:10,080
that you know once you have now used

2512
01:43:10,080 --> 01:43:11,760
putting that in the wire it's fairly

2513
01:43:11,760 --> 01:43:12,880
straightforward

2514
01:43:12,880 --> 01:43:16,239
uh i like i like colin's representation

2515
01:43:16,239 --> 01:43:18,080
of like the audio levels as the same

2516
01:43:18,080 --> 01:43:19,280
type of thing we're trying to create

2517
01:43:19,280 --> 01:43:20,320
here for video

2518
01:43:20,320 --> 01:43:22,080
i think that's a really good analogy and

2519
01:43:22,080 --> 01:43:23,600
i i think that you know it's something

2520
01:43:23,600 --> 01:43:24,320
that is

2521
01:43:24,320 --> 01:43:29,199
worthwhile to pursue um as a relates to

2522
01:43:29,199 --> 01:43:30,719
you know the the actual sort of

2523
01:43:30,719 --> 01:43:32,560
encryption and the overheads

2524
01:43:32,560 --> 01:43:35,199
uh i i would you know still disagree

2525
01:43:35,199 --> 01:43:37,119
that one to two percent you know savings

2526
01:43:37,119 --> 01:43:38,000
is uh

2527
01:43:38,000 --> 01:43:39,760
you know worthless uh you know there are

2528
01:43:39,760 --> 01:43:41,679
people who work on transforms for codex

2529
01:43:41,679 --> 01:43:43,199
and spend like you know big parts of

2530
01:43:43,199 --> 01:43:45,280
their careers to save one to two percent

2531
01:43:45,280 --> 01:43:48,800
but i agree it's not the driving factor

2532
01:43:48,800 --> 01:43:51,199
you know here it's an additional bonus

2533
01:43:51,199 --> 01:43:53,760
uh and i i think that the chief benefit

2534
01:43:53,760 --> 01:43:56,800
of processing things as frames rather

2535
01:43:56,800 --> 01:43:57,280
than

2536
01:43:57,280 --> 01:44:00,400
as rtp packets is largely just the

2537
01:44:00,400 --> 01:44:02,320
logical separation

2538
01:44:02,320 --> 01:44:04,639
that if you can split it across multiple

2539
01:44:04,639 --> 01:44:06,000
frames like you're not forced

2540
01:44:06,000 --> 01:44:08,400
to you could break everything into

2541
01:44:08,400 --> 01:44:09,199
slices

2542
01:44:09,199 --> 01:44:10,480
so you have better independent

2543
01:44:10,480 --> 01:44:13,280
recoverability but if you want to send

2544
01:44:13,280 --> 01:44:14,159
it as an entire

2545
01:44:14,159 --> 01:44:17,440
large iframe then you can amortize this

2546
01:44:17,440 --> 01:44:18,560
encryption overhead

2547
01:44:18,560 --> 01:44:20,480
and i think that's an entirely nice

2548
01:44:20,480 --> 01:44:22,320
because then it separates the encrypting

2549
01:44:22,320 --> 01:44:23,040
the

2550
01:44:23,040 --> 01:44:24,639
video frame versus encrypting the

2551
01:44:24,639 --> 01:44:26,080
packets

2552
01:44:26,080 --> 01:44:27,760
as two different things because they're

2553
01:44:27,760 --> 01:44:29,679
in two different layers

2554
01:44:29,679 --> 01:44:31,679
which is an actual correct description

2555
01:44:31,679 --> 01:44:33,440
of the situation

2556
01:44:33,440 --> 01:44:35,520
anyway you know i think we talked about

2557
01:44:35,520 --> 01:44:37,600
that

2558
01:44:37,600 --> 01:44:41,040
yeah i think that it's complicated yeah

2559
01:44:41,040 --> 01:44:42,159
anyway i think i'd like to move on to

2560
01:44:42,159 --> 01:44:43,760
see the rest of the prisons in agreement

2561
01:44:43,760 --> 01:44:44,639
here so i'm gonna

2562
01:44:44,639 --> 01:44:46,719
move on uh but i think there's something

2563
01:44:46,719 --> 01:44:48,800
we can work from here

2564
01:44:48,800 --> 01:44:51,679
okay so uh as jonathan said we'll let uh

2565
01:44:51,679 --> 01:44:53,199
sergio and yuan finish their

2566
01:44:53,199 --> 01:44:55,759
presentation

2567
01:44:56,639 --> 01:44:59,280
so here do you want to take over from

2568
01:44:59,280 --> 01:45:01,119
from now

2569
01:45:01,119 --> 01:45:04,320
yep let's go quickly in the rest of the

2570
01:45:04,320 --> 01:45:06,639
presentation

2571
01:45:06,639 --> 01:45:10,080
so a couple of next slides i think

2572
01:45:10,080 --> 01:45:16,880
two or three more

2573
01:45:16,880 --> 01:45:19,840
okay that's a slide

2574
01:45:20,719 --> 01:45:23,840
okay so this is what we were speaking

2575
01:45:23,840 --> 01:45:24,639
about

2576
01:45:24,639 --> 01:45:26,719
my packet decision we are where no well

2577
01:45:26,719 --> 01:45:31,840
one before that

2578
01:45:34,639 --> 01:45:38,639
so uh the idea is that the

2579
01:45:38,639 --> 01:45:40,880
what we will get from foreign for the

2580
01:45:40,880 --> 01:45:42,480
transform is uh

2581
01:45:42,480 --> 01:45:45,360
is a blob it's a binary blob that we

2582
01:45:45,360 --> 01:45:46,560
don't have

2583
01:45:46,560 --> 01:45:49,040
as it is we are talking about this frame

2584
01:45:49,040 --> 01:45:50,560
it is going to be encrypted so we don't

2585
01:45:50,560 --> 01:45:52,560
know what are the boundaries of

2586
01:45:52,560 --> 01:45:56,320
any underlying codec uh obus or null

2587
01:45:56,320 --> 01:45:57,679
units or whatever

2588
01:45:57,679 --> 01:45:59,360
so what the packet decision is going to

2589
01:45:59,360 --> 01:46:02,000
do is to split this uh

2590
01:46:02,000 --> 01:46:05,119
this this blob

2591
01:46:05,119 --> 01:46:08,719
these bytes of the of the frame

2592
01:46:08,719 --> 01:46:11,360
into several rtp packets and as we don't

2593
01:46:11,360 --> 01:46:12,960
have any boundary

2594
01:46:12,960 --> 01:46:16,560
that we have to preserve because if you

2595
01:46:16,560 --> 01:46:17,840
lose one

2596
01:46:17,840 --> 01:46:20,080
um you need all the packets in order to

2597
01:46:20,080 --> 01:46:21,840
be able to decrypt the

2598
01:46:21,840 --> 01:46:24,960
the the original frame

2599
01:46:24,960 --> 01:46:26,719
and the with the packet decision will

2600
01:46:26,719 --> 01:46:28,320
just split them into several

2601
01:46:28,320 --> 01:46:31,119
rtp packets just ensure that they don't

2602
01:46:31,119 --> 01:46:33,440
exceed the mtu

2603
01:46:33,440 --> 01:46:37,440
and the last one will be set

2604
01:46:37,440 --> 01:46:40,480
the market bid will be set according to

2605
01:46:40,480 --> 01:46:45,239
us the same as it is specified in

2606
01:46:45,239 --> 01:46:46,960
rfcc3551

2607
01:46:46,960 --> 01:46:49,119
and in case of the video codec is

2608
01:46:49,119 --> 01:46:50,960
supporting a special scalability

2609
01:46:50,960 --> 01:46:54,719
in each of the spatial frames

2610
01:46:54,719 --> 01:46:56,880
the whatever the call is in in in the in

2611
01:46:56,880 --> 01:46:58,159
the specific codec

2612
01:46:58,159 --> 01:47:00,080
because there are different names for

2613
01:47:00,080 --> 01:47:01,280
each vp9

2614
01:47:01,280 --> 01:47:03,440
maybe one and things like that it will

2615
01:47:03,440 --> 01:47:05,760
be sent with um

2616
01:47:05,760 --> 01:47:08,000
in order this the special layer will be

2617
01:47:08,000 --> 01:47:09,440
answered in order

2618
01:47:09,440 --> 01:47:11,199
and the last one with the same rtp

2619
01:47:11,199 --> 01:47:12,800
timestamp and the last one in the

2620
01:47:12,800 --> 01:47:15,280
rtp packet and we'll have the market bit

2621
01:47:15,280 --> 01:47:17,840
set to one

2622
01:47:19,440 --> 01:47:23,839
yeah next please

2623
01:47:25,360 --> 01:47:29,119
so the idea is to then that

2624
01:47:29,119 --> 01:47:32,560
as as schoolnet was

2625
01:47:32,560 --> 01:47:35,280
as colleen was was saying that we are

2626
01:47:35,280 --> 01:47:35,840
not

2627
01:47:35,840 --> 01:47:38,880
going to to to just negotiate in

2628
01:47:38,880 --> 01:47:42,000
this in this new packet decision format

2629
01:47:42,000 --> 01:47:44,239
on its own it will be always relying on

2630
01:47:44,239 --> 01:47:45,040
the

2631
01:47:45,040 --> 01:47:47,679
on the new session on the standard one

2632
01:47:47,679 --> 01:47:48,719
and in order to

2633
01:47:48,719 --> 01:47:51,520
try to reduce the amount of payload

2634
01:47:51,520 --> 01:47:53,679
types that we are having the sdp because

2635
01:47:53,679 --> 01:47:54,320
we have

2636
01:47:54,320 --> 01:47:57,520
already in webrtc at least

2637
01:47:57,520 --> 01:48:01,440
we are already using the payload types

2638
01:48:01,440 --> 01:48:04,639
for in the 35 frames and things like

2639
01:48:04,639 --> 01:48:06,000
that

2640
01:48:06,000 --> 01:48:08,719
so we are going to use a single um a

2641
01:48:08,719 --> 01:48:11,679
single payload type for this generic

2642
01:48:11,679 --> 01:48:14,639
packet decision format and then it will

2643
01:48:14,639 --> 01:48:15,760
be needed to

2644
01:48:15,760 --> 01:48:19,280
um to multiplex the codex

2645
01:48:19,280 --> 01:48:23,119
inside this this pilot type

2646
01:48:23,520 --> 01:48:27,199
and also this we are doing that by

2647
01:48:27,199 --> 01:48:28,000
sending the

2648
01:48:28,000 --> 01:48:32,000
original or the associated pilot type

2649
01:48:32,560 --> 01:48:35,840
that will cause a minor network overhead

2650
01:48:35,840 --> 01:48:38,000
and also it requires to negotiate

2651
01:48:38,000 --> 01:48:39,199
different and

2652
01:48:39,199 --> 01:48:41,520
the generic value types for audio is one

2653
01:48:41,520 --> 01:48:42,320
for a different

2654
01:48:42,320 --> 01:48:46,400
a clock rate effort

2655
01:48:46,400 --> 01:48:49,679
so next slide please

2656
01:48:50,239 --> 01:48:52,480
before we go on to the next slide i i'm

2657
01:48:52,480 --> 01:48:53,280
a little

2658
01:48:53,280 --> 01:48:56,080
confused here because the payload type

2659
01:48:56,080 --> 01:48:57,679
is the way

2660
01:48:57,679 --> 01:49:00,480
uh rtp identifies these things so why

2661
01:49:00,480 --> 01:49:02,400
introduce another level of multiplexing

2662
01:49:02,400 --> 01:49:04,080
when we've already got an identifier

2663
01:49:04,080 --> 01:49:04,800
here

2664
01:49:04,800 --> 01:49:07,199
because it's not we will have to

2665
01:49:07,199 --> 01:49:08,880
duplicate or replicate the number of

2666
01:49:08,880 --> 01:49:10,880
pallet types and i think the webrtc

2667
01:49:10,880 --> 01:49:11,679
where

2668
01:49:11,679 --> 01:49:14,800
we may exceed the maximum limit i mean

2669
01:49:14,800 --> 01:49:17,840
it's just if i have to say i have i

2670
01:49:17,840 --> 01:49:19,280
think in webrtc we have

2671
01:49:19,280 --> 01:49:22,400
20 or 30 already period types

2672
01:49:22,400 --> 01:49:26,400
so going to 60 is is a no-go

2673
01:49:26,400 --> 01:49:28,400
because at some moment in time we will

2674
01:49:28,400 --> 01:49:29,679
reach the

2675
01:49:29,679 --> 01:49:32,239
the the point that we cannot we don't

2676
01:49:32,239 --> 01:49:33,199
have any free

2677
01:49:33,199 --> 01:49:35,840
pilot type to use so that's what we have

2678
01:49:35,840 --> 01:49:37,119
decided to use

2679
01:49:37,119 --> 01:49:40,400
a single one and just um

2680
01:49:40,400 --> 01:49:43,440
have to include the original uh

2681
01:49:43,440 --> 01:49:46,719
pilot type within it just to mention

2682
01:49:46,719 --> 01:49:50,560
that the draft is exposing various ways

2683
01:49:50,560 --> 01:49:53,920
of doing the same thing uh some of which

2684
01:49:53,920 --> 01:49:55,920
would require more parallel time being

2685
01:49:55,920 --> 01:49:57,599
consumed some of which

2686
01:49:57,599 --> 01:50:01,119
would require less and

2687
01:50:01,119 --> 01:50:03,040
we are certainly interested in getting

2688
01:50:03,040 --> 01:50:04,560
feedback there

2689
01:50:04,560 --> 01:50:06,960
in what would be best appropriate so

2690
01:50:06,960 --> 01:50:08,719
representing this approach which we

2691
01:50:08,719 --> 01:50:09,360
think

2692
01:50:09,360 --> 01:50:11,520
is fine we know it has some drawbacks

2693
01:50:11,520 --> 01:50:13,119
but we think it's

2694
01:50:13,119 --> 01:50:16,480
it's fine as well and uh we welcome uh

2695
01:50:16,480 --> 01:50:19,520
reviews of the current draft for

2696
01:50:19,520 --> 01:50:22,560
the other uh alternatives

2697
01:50:22,560 --> 01:50:24,800
i mean i think a lot of the problem here

2698
01:50:24,800 --> 01:50:26,159
is that the payload

2699
01:50:26,159 --> 01:50:28,639
types in rtp are defined to be media

2700
01:50:28,639 --> 01:50:30,159
types and i'm not sure that

2701
01:50:30,159 --> 01:50:31,920
you know i mean essentially you're

2702
01:50:31,920 --> 01:50:33,599
signaling applications flash architect

2703
01:50:33,599 --> 01:50:35,280
stream and then multiplexing everything

2704
01:50:35,280 --> 01:50:35,920
inside it

2705
01:50:35,920 --> 01:50:40,320
and yeah

2706
01:50:40,320 --> 01:50:42,880
i i think we should let you in and

2707
01:50:42,880 --> 01:50:44,800
sergio finish

2708
01:50:44,800 --> 01:50:48,320
and then open the queue again

2709
01:50:48,960 --> 01:50:52,000
so just very quickly so we can take

2710
01:50:52,000 --> 01:50:56,080
questions again i mean um

2711
01:50:57,040 --> 01:51:00,320
yes so we are using a single uh instead

2712
01:51:00,320 --> 01:51:01,599
of for example doing like

2713
01:51:01,599 --> 01:51:04,840
what we do in rtx that win rtx we have

2714
01:51:04,840 --> 01:51:06,080
uh

2715
01:51:06,080 --> 01:51:09,440
one payload type for rtx

2716
01:51:09,440 --> 01:51:12,239
for each of the media types and other

2717
01:51:12,239 --> 01:51:13,679
codec media types

2718
01:51:13,679 --> 01:51:16,159
that is causing the payload ties to to

2719
01:51:16,159 --> 01:51:17,199
be double

2720
01:51:17,199 --> 01:51:21,760
if we use the same approach with in this

2721
01:51:21,760 --> 01:51:25,360
general mode generic packet decision we

2722
01:51:25,360 --> 01:51:26,480
will have to triple the

2723
01:51:26,480 --> 01:51:29,440
payload types and again this is we in

2724
01:51:29,440 --> 01:51:30,560
webrtc when

2725
01:51:30,560 --> 01:51:34,159
with all the h264 profiles pp9 profile

2726
01:51:34,159 --> 01:51:35,440
vp8 profiles

2727
01:51:35,440 --> 01:51:37,360
we are reaching the limit when we cannot

2728
01:51:37,360 --> 01:51:39,599
do have any free payload types anymore

2729
01:51:39,599 --> 01:51:42,239
so that's what we have decided to do a

2730
01:51:42,239 --> 01:51:44,480
payload type multiplexing

2731
01:51:44,480 --> 01:51:48,000
yeah we can just use one

2732
01:51:48,000 --> 01:51:50,639
one pillow type per codec but then we

2733
01:51:50,639 --> 01:51:51,119
may

2734
01:51:51,119 --> 01:51:52,320
have the problem that it is not

2735
01:51:52,320 --> 01:51:54,400
implementable

2736
01:51:54,400 --> 01:51:58,639
so the this this value what it indicates

2737
01:51:58,639 --> 01:51:59,679
is

2738
01:51:59,679 --> 01:52:02,000
what is the original format of the of

2739
01:52:02,000 --> 01:52:03,280
the

2740
01:52:03,280 --> 01:52:05,280
of the generic packetization if it was

2741
01:52:05,280 --> 01:52:08,400
x264 it was say bp9 profile 2 or

2742
01:52:08,400 --> 01:52:09,920
whatever

2743
01:52:09,920 --> 01:52:16,320
so next slide

2744
01:52:16,320 --> 01:52:18,239
so it just be recovered in a header

2745
01:52:18,239 --> 01:52:20,400
extension just say

2746
01:52:20,400 --> 01:52:23,760
and as we have one extra byte

2747
01:52:23,760 --> 01:52:25,840
we are going to use that byte to

2748
01:52:25,840 --> 01:52:26,960
indicate

2749
01:52:26,960 --> 01:52:30,239
and for audio is

2750
01:52:30,239 --> 01:52:32,960
is not really useful but we can avoid

2751
01:52:32,960 --> 01:52:33,760
having

2752
01:52:33,760 --> 01:52:35,920
uh to send more information in a

2753
01:52:35,920 --> 01:52:36,960
metadata

2754
01:52:36,960 --> 01:52:39,679
a header extension for the svu in case

2755
01:52:39,679 --> 01:52:40,800
that it is not

2756
01:52:40,800 --> 01:52:43,360
a scalable video stream so you what we

2757
01:52:43,360 --> 01:52:44,480
have tried to use is

2758
01:52:44,480 --> 01:52:48,639
this extra by to indicate when the

2759
01:52:48,639 --> 01:52:51,040
when the specifically if it is on an

2760
01:52:51,040 --> 01:52:52,639
iframe so the sv you can

2761
01:52:52,639 --> 01:52:55,920
start forwarding and this specifically

2762
01:52:55,920 --> 01:52:57,679
the the video packets from from these

2763
01:52:57,679 --> 01:52:59,760
packets and on

2764
01:52:59,760 --> 01:53:03,119
so next slide

2765
01:53:05,920 --> 01:53:08,159
so regarding the frame metadata what we

2766
01:53:08,159 --> 01:53:10,560
have discussed before i mean what we are

2767
01:53:10,560 --> 01:53:13,119
focusing is what is the the potential

2768
01:53:13,119 --> 01:53:14,880
metadata that we

2769
01:53:14,880 --> 01:53:17,920
uh that we need specifically i think

2770
01:53:17,920 --> 01:53:20,480
that we should focus in the

2771
01:53:20,480 --> 01:53:23,440
in the ones that help the svu to do the

2772
01:53:23,440 --> 01:53:25,440
larger forwarding and selection

2773
01:53:25,440 --> 01:53:28,000
and the ones that helps the the recovery

2774
01:53:28,000 --> 01:53:29,679
mechanism to

2775
01:53:29,679 --> 01:53:32,560
to work in case of of loss and meaning

2776
01:53:32,560 --> 01:53:34,560
for example if deciding if a package

2777
01:53:34,560 --> 01:53:35,920
that has been loaned

2778
01:53:35,920 --> 01:53:38,800
has been lost it was actually required

2779
01:53:38,800 --> 01:53:39,599
for the coding

2780
01:53:39,599 --> 01:53:42,719
the full frame or and we have to to take

2781
01:53:42,719 --> 01:53:44,800
some actions about rtx or

2782
01:53:44,800 --> 01:53:47,520
even request a picture load indication

2783
01:53:47,520 --> 01:53:48,000
or

2784
01:53:48,000 --> 01:53:51,760
a larger refresh request and

2785
01:53:51,760 --> 01:53:54,719
this is mostly for for for video and for

2786
01:53:54,719 --> 01:53:56,239
audio maybe

2787
01:53:56,239 --> 01:53:58,560
the one method that could be used is the

2788
01:53:58,560 --> 01:53:59,280
output stock

2789
01:53:59,280 --> 01:54:00,800
to know the frame length that could be

2790
01:54:00,800 --> 01:54:03,119
used in recording scenarios

2791
01:54:03,119 --> 01:54:05,119
uh there are several solutions that

2792
01:54:05,119 --> 01:54:06,239
could be

2793
01:54:06,239 --> 01:54:08,800
that could be used like for example

2794
01:54:08,800 --> 01:54:09,840
trying to

2795
01:54:09,840 --> 01:54:13,040
get back pre-marking and study somehow

2796
01:54:13,040 --> 01:54:15,440
uh you say b1 dependency descriptor that

2797
01:54:15,440 --> 01:54:16,880
it is the one that it is currently

2798
01:54:16,880 --> 01:54:18,880
proposed in the in the draft and we

2799
01:54:18,880 --> 01:54:21,920
think that it fits with with which it

2800
01:54:21,920 --> 01:54:22,560
will

2801
01:54:22,560 --> 01:54:25,119
it has been required and i would like to

2802
01:54:25,119 --> 01:54:26,400
to here if

2803
01:54:26,400 --> 01:54:28,480
there is some scenario that you think

2804
01:54:28,480 --> 01:54:30,080
that it would not be covered

2805
01:54:30,080 --> 01:54:32,560
or we can try to design a new rtb header

2806
01:54:32,560 --> 01:54:35,040
extension

2807
01:54:35,040 --> 01:54:37,040
for things that are not covered by the

2808
01:54:37,040 --> 01:54:39,920
iv1 dependency descriptor

2809
01:54:39,920 --> 01:54:43,199
so next slide

2810
01:54:47,520 --> 01:54:51,360
so there is regarding redundancy

2811
01:54:51,360 --> 01:54:54,400
this does not require an exchange to rtx

2812
01:54:54,400 --> 01:54:56,719
it will just keep working with knack and

2813
01:54:56,719 --> 01:54:57,440
rtx as

2814
01:54:57,440 --> 01:55:00,480
it is working today effect both ulp

2815
01:55:00,480 --> 01:55:02,960
effects and flashback will also work

2816
01:55:02,960 --> 01:55:05,360
the only thing without any change the

2817
01:55:05,360 --> 01:55:07,360
only thing is that

2818
01:55:07,360 --> 01:55:09,679
now the heuristic that it is done by the

2819
01:55:09,679 --> 01:55:10,719
application

2820
01:55:10,719 --> 01:55:14,960
to which package should be a should be

2821
01:55:14,960 --> 01:55:18,080
more protected or not is has to be

2822
01:55:18,080 --> 01:55:20,639
changed a bit in order to reflect that

2823
01:55:20,639 --> 01:55:23,360
and that the payload is encrypted and if

2824
01:55:23,360 --> 01:55:25,760
you lose one packet you will not be

2825
01:55:25,760 --> 01:55:28,719
um able to recover then the full phrase

2826
01:55:28,719 --> 01:55:29,920
anyway

2827
01:55:29,920 --> 01:55:32,159
so we have some some consequences but it

2828
01:55:32,159 --> 01:55:33,040
is how

2829
01:55:33,040 --> 01:55:36,239
the applications decide

2830
01:55:36,239 --> 01:55:38,719
how the effect everything are applied

2831
01:55:38,719 --> 01:55:40,960
and next one

2832
01:55:40,960 --> 01:55:43,760
that it is the last

2833
01:55:44,560 --> 01:55:47,760
is just too red can still be used

2834
01:55:47,760 --> 01:55:51,440
the only thing is that that and

2835
01:55:51,440 --> 01:55:54,080
the redundant primary data will be the

2836
01:55:54,080 --> 01:55:56,480
content that

2837
01:55:56,480 --> 01:55:59,119
has been encrypted so inbred will not

2838
01:55:59,119 --> 01:56:00,800
the encryption will not be applied to

2839
01:56:00,800 --> 01:56:01,440
the full

2840
01:56:01,440 --> 01:56:04,480
red packet but to the to the resumed and

2841
01:56:04,480 --> 01:56:08,239
data parts and there is uh

2842
01:56:08,239 --> 01:56:10,800
overhead in this and applied by the

2843
01:56:10,800 --> 01:56:12,719
transformation because

2844
01:56:12,719 --> 01:56:15,199
you will have the overhead and this

2845
01:56:15,199 --> 01:56:17,119
frame headers for the redundant data and

2846
01:56:17,119 --> 01:56:19,280
the primary data so we'll be

2847
01:56:19,280 --> 01:56:21,679
so basically you are sending the data

2848
01:56:21,679 --> 01:56:22,560
twice

2849
01:56:22,560 --> 01:56:24,960
and there is here there is a small

2850
01:56:24,960 --> 01:56:26,560
limitation that we have

2851
01:56:26,560 --> 01:56:29,599
when using the what we call the

2852
01:56:29,599 --> 01:56:31,280
association paleo type used for

2853
01:56:31,280 --> 01:56:33,840
multiplexing in an rtp header

2854
01:56:33,840 --> 01:56:36,719
thus red only has allowed us to have one

2855
01:56:36,719 --> 01:56:37,840
header so

2856
01:56:37,840 --> 01:56:40,239
this header and this the value has to be

2857
01:56:40,239 --> 01:56:41,040
applied for

2858
01:56:41,040 --> 01:56:44,159
both and for both the

2859
01:56:44,159 --> 01:56:46,639
data data blocks so it makes that you

2860
01:56:46,639 --> 01:56:47,679
cannot send

2861
01:56:47,679 --> 01:56:50,000
a one block that it is supposed to one

2862
01:56:50,000 --> 01:56:51,920
block that it is

2863
01:56:51,920 --> 01:56:54,960
i don't know so it has to be both of the

2864
01:56:54,960 --> 01:56:56,800
same codec

2865
01:56:56,800 --> 01:57:00,000
that it is only in this

2866
01:57:00,000 --> 01:57:01,760
it's the only limitation that we have

2867
01:57:01,760 --> 01:57:04,400
not if we think that it is

2868
01:57:04,400 --> 01:57:06,719
important to to solve we can't move the

2869
01:57:06,719 --> 01:57:07,440
payload

2870
01:57:07,440 --> 01:57:09,119
and then the payload type for

2871
01:57:09,119 --> 01:57:11,199
multiplexing into the payload and

2872
01:57:11,199 --> 01:57:14,000
it will also work

2873
01:57:14,400 --> 01:57:17,119
so at this point sergio i think we're

2874
01:57:17,119 --> 01:57:17,520
almost

2875
01:57:17,520 --> 01:57:19,040
out of time we only have two minutes

2876
01:57:19,040 --> 01:57:21,199
left so what i'd like to do is just try

2877
01:57:21,199 --> 01:57:23,520
to understand from the working group

2878
01:57:23,520 --> 01:57:26,400
how we move forward but one way since we

2879
01:57:26,400 --> 01:57:26,960
are

2880
01:57:26,960 --> 01:57:30,080
exhausted even more than the hour uh

2881
01:57:30,080 --> 01:57:32,320
here should we be thinking about an

2882
01:57:32,320 --> 01:57:33,760
interim

2883
01:57:33,760 --> 01:57:36,400
um to get into this to allow some more

2884
01:57:36,400 --> 01:57:38,080
time to get into this

2885
01:57:38,080 --> 01:57:41,440
um say like sometime during late may

2886
01:57:41,440 --> 01:57:42,639
does that make sense i don't know

2887
01:57:42,639 --> 01:57:45,920
jonathan if you have an opinion

2888
01:57:46,320 --> 01:57:49,440
before our time runs out

2889
01:57:51,199 --> 01:57:52,639
uh yeah i do think that you know some

2890
01:57:52,639 --> 01:57:55,199
sort of interim would probably use

2891
01:57:55,199 --> 01:57:58,239
into um discussion of this um there's a

2892
01:57:58,239 --> 01:57:59,040
lot of interest

2893
01:57:59,040 --> 01:58:01,199
and not a lot of convergence which

2894
01:58:01,199 --> 01:58:02,960
sounds like sort of the

2895
01:58:02,960 --> 01:58:04,840
sort of area where interim is sort of

2896
01:58:04,840 --> 01:58:06,880
ideal um

2897
01:58:06,880 --> 01:58:08,480
i mean we can work out the timing on the

2898
01:58:08,480 --> 01:58:11,520
list if we do various uh

2899
01:58:11,520 --> 01:58:14,639
um whatever

2900
01:58:14,639 --> 01:58:17,199
it is in the meantime i i would

2901
01:58:17,199 --> 01:58:19,280
encourage

2902
01:58:19,280 --> 01:58:21,920
for people to to read the draft and also

2903
01:58:21,920 --> 01:58:22,560
start

2904
01:58:22,560 --> 01:58:25,040
uh sending emails on the mailing list

2905
01:58:25,040 --> 01:58:25,920
issues

2906
01:58:25,920 --> 01:58:27,679
to the current working draft so that we

2907
01:58:27,679 --> 01:58:29,440
can uh continue

2908
01:58:29,440 --> 01:58:32,159
in the media list not work for the

2909
01:58:32,159 --> 01:58:33,520
intern

2910
01:58:33,520 --> 01:58:35,840
okay

2911
01:58:37,520 --> 01:58:40,159
okay uh i think we're just about to be

2912
01:58:40,159 --> 01:58:41,119
out of time

2913
01:58:41,119 --> 01:58:44,480
for this session so uh

2914
01:58:44,480 --> 01:58:46,400
maybe you know jonathan do you want to

2915
01:58:46,400 --> 01:58:48,159
take maybe one question

2916
01:58:48,159 --> 01:58:50,239
one final question and then we can call

2917
01:58:50,239 --> 01:58:51,520
it a day

2918
01:58:51,520 --> 01:58:53,920
um yeah i mean if either call in your

2919
01:58:53,920 --> 01:58:55,520
first and q so if you have something

2920
01:58:55,520 --> 01:58:57,119
that can be handled in one minute but i

2921
01:58:57,119 --> 01:58:58,560
know i guess he dropped himself out no

2922
01:58:58,560 --> 01:59:02,239
i guess if you have something quick

2923
01:59:02,239 --> 01:59:06,159
or yeah just something quick um

2924
01:59:06,159 --> 01:59:09,840
i i think uh we're all uh

2925
01:59:09,840 --> 01:59:12,480
probably more concerned about the same

2926
01:59:12,480 --> 01:59:14,159
things than we realize

2927
01:59:14,159 --> 01:59:16,400
um a lot of the stuff that colin was was

2928
01:59:16,400 --> 01:59:17,520
mentioning

2929
01:59:17,520 --> 01:59:20,639
um it really is mostly applicable to the

2930
01:59:20,639 --> 01:59:21,440
new codec

2931
01:59:21,440 --> 01:59:24,960
that i that i presume the the the people

2932
01:59:24,960 --> 01:59:26,639
that presented this care about which is

2933
01:59:26,639 --> 01:59:28,000
81.

2934
01:59:28,000 --> 01:59:29,440
i think maybe people don't realize that

2935
01:59:29,440 --> 01:59:32,639
81 is basically identical to h.265

2936
01:59:32,639 --> 01:59:35,280
as far as high-level syntax um you know

2937
01:59:35,280 --> 01:59:36,400
it has the same

2938
01:59:36,400 --> 01:59:38,239
value structure and it has the same

2939
01:59:38,239 --> 01:59:39,440
subframes

2940
01:59:39,440 --> 01:59:42,400
that h.265 has there's tile groups you

2941
01:59:42,400 --> 01:59:44,159
could split a picture into into

2942
01:59:44,159 --> 01:59:46,159
tiles and slices and things like that so

2943
01:59:46,159 --> 01:59:47,760
i think we need to

2944
01:59:47,760 --> 01:59:49,040
you know all agree that we're on the

2945
01:59:49,040 --> 01:59:51,840
same page about the richness of

2946
01:59:51,840 --> 01:59:54,320
of the new codex that we do care about

2947
01:59:54,320 --> 01:59:55,679
and figure out

2948
01:59:55,679 --> 01:59:58,159
did rtp make a mistake in providing

2949
01:59:58,159 --> 02:00:00,239
packetization for that richness

2950
02:00:00,239 --> 02:00:02,560
and we really don't need it or is there

2951
02:00:02,560 --> 02:00:03,920
value in that richness

2952
02:00:03,920 --> 02:00:07,280
and we need to somehow preserve it

2953
02:00:07,280 --> 02:00:10,080
crypto happening

2954
02:00:11,119 --> 02:00:12,159
and i think the people that want to

2955
02:00:12,159 --> 02:00:14,080
deploy 81 should take a good hard look

2956
02:00:14,080 --> 02:00:16,159
at the 81 packetization to figure out

2957
02:00:16,159 --> 02:00:18,320
do they care about any of those things

2958
02:00:18,320 --> 02:00:20,159
uh or are they willing to forego them

2959
02:00:20,159 --> 02:00:27,839
in end-to-end situations

2960
02:00:28,239 --> 02:00:30,159
thank you very much mo and i think on

2961
02:00:30,159 --> 02:00:32,400
that note uh we will declare the

2962
02:00:32,400 --> 02:00:36,960
session that itf went over thank you

2963
02:00:38,840 --> 02:00:41,840
everybody

2964
02:01:20,840 --> 02:01:23,840
so

2965
02:01:34,840 --> 02:01:37,840
so

2966
02:02:02,840 --> 02:02:05,840
it's

2967
02:02:44,840 --> 02:02:47,840
hmm

2968
02:02:58,840 --> 02:03:01,840
hey

2969
02:03:12,840 --> 02:03:15,840
so

2970
02:03:26,840 --> 02:03:29,840
so

2971
02:03:40,840 --> 02:03:43,840
uh

