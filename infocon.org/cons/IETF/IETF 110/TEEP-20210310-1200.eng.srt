1
00:00:11,280 --> 00:00:12,160
did you want to

2
00:00:12,160 --> 00:00:17,920
share the slides and get us started yes

3
00:00:29,599 --> 00:00:34,719
okay can you see the slides yes

4
00:00:34,719 --> 00:00:39,760
okay i think it's time

5
00:00:40,000 --> 00:00:42,960
hello everyone welcome to the working

6
00:00:42,960 --> 00:00:44,640
through position at idf 1

7
00:00:44,640 --> 00:00:48,719
110 um so do we have a note taker

8
00:00:48,719 --> 00:00:54,000
on nancy we do not

9
00:00:54,000 --> 00:00:59,840
oh so any volunteers

10
00:01:00,480 --> 00:01:03,599
other than the presenters

11
00:01:08,560 --> 00:01:12,240
we need at least one note taker um

12
00:01:12,240 --> 00:01:15,520
the cody and d is up and going

13
00:01:15,520 --> 00:01:17,280
we can't really get the session going

14
00:01:17,280 --> 00:01:18,799
unless we have one

15
00:01:18,799 --> 00:01:22,320
one volunteer i know it's robin here i

16
00:01:22,320 --> 00:01:24,000
volunteer

17
00:01:24,000 --> 00:01:27,280
right perfect thank you

18
00:01:27,600 --> 00:01:30,079
uh so no till applies for this working

19
00:01:30,079 --> 00:01:31,680
group session as well

20
00:01:31,680 --> 00:01:34,560
and uh that's the agenda we have a very

21
00:01:34,560 --> 00:01:36,159
straightforward agenda for this

22
00:01:36,159 --> 00:01:39,439
that uh we will go over the architecture

23
00:01:39,439 --> 00:01:40,880
and transport protocol

24
00:01:40,880 --> 00:01:42,960
for first ten minutes then the hackathon

25
00:01:42,960 --> 00:01:44,079
report

26
00:01:44,079 --> 00:01:46,399
and the rest of the session is for uh

27
00:01:46,399 --> 00:01:48,720
day two for 30 protocol changes

28
00:01:48,720 --> 00:01:52,560
and i think the protocol has seen it

29
00:01:52,560 --> 00:01:55,360
really coming to a great length in the

30
00:01:55,360 --> 00:01:56,960
next revision and uh

31
00:01:56,960 --> 00:02:01,759
seems like we are very close

32
00:02:01,759 --> 00:02:05,119
uh any any agenda

33
00:02:05,119 --> 00:02:07,680
that needs to be discussed uh are you

34
00:02:07,680 --> 00:02:09,440
guys okay with this agenda do you have

35
00:02:09,440 --> 00:02:10,160
any

36
00:02:10,160 --> 00:02:12,720
suggestions

37
00:02:14,080 --> 00:02:16,720
the only question that i have is uh

38
00:02:16,720 --> 00:02:17,120
since

39
00:02:17,120 --> 00:02:19,520
i'm not talking about the two suit

40
00:02:19,520 --> 00:02:21,200
issues okay so akira says he's gonna

41
00:02:21,200 --> 00:02:22,080
cover it in hackathon

42
00:02:22,080 --> 00:02:26,160
all right great thanks okay

43
00:02:26,160 --> 00:02:28,640
okay i guess then we can go over the

44
00:02:28,640 --> 00:02:30,560
first agenda which is the artichoke one

45
00:02:30,560 --> 00:02:37,360
so dave

46
00:02:37,360 --> 00:02:39,280
so these first two should be pretty

47
00:02:39,280 --> 00:02:40,800
quick uh

48
00:02:40,800 --> 00:02:43,760
i'll be talking about the draft

49
00:02:43,760 --> 00:02:44,959
architecture

50
00:02:44,959 --> 00:02:48,319
14 next slide

51
00:02:49,760 --> 00:02:52,160
all right so just as a recap of where we

52
00:02:52,160 --> 00:02:54,080
are we went through a working group last

53
00:02:54,080 --> 00:02:54,959
call

54
00:02:54,959 --> 00:02:58,159
at ietf 109 we discussed any of the

55
00:02:58,159 --> 00:02:59,120
issues uh

56
00:02:59,120 --> 00:03:00,800
raised or the last of the issues raised

57
00:03:00,800 --> 00:03:02,319
i should say because we discussed them

58
00:03:02,319 --> 00:03:02,560
at

59
00:03:02,560 --> 00:03:05,680
uh most of them at previous ietfs

60
00:03:05,680 --> 00:03:08,640
so at ietf number 109 i'm getting some

61
00:03:08,640 --> 00:03:10,080
blinking on my screen i don't know if

62
00:03:10,080 --> 00:03:11,120
other people are

63
00:03:11,120 --> 00:03:15,040
uh from heroes it's blinking on and off

64
00:03:15,040 --> 00:03:18,480
weird anyway draft 14

65
00:03:18,480 --> 00:03:21,599
posted the resolutions from the ietf 109

66
00:03:21,599 --> 00:03:23,200
meeting and so in particular the three

67
00:03:23,200 --> 00:03:25,120
things that we discussed at ihf 109

68
00:03:25,120 --> 00:03:26,400
that's fixed in there

69
00:03:26,400 --> 00:03:29,280
is we had a discussion about how you uh

70
00:03:29,280 --> 00:03:31,440
indicate that you are that you no longer

71
00:03:31,440 --> 00:03:34,080
need ata and so we added that on request

72
00:03:34,080 --> 00:03:35,920
ta conceptual api that we discussed at

73
00:03:35,920 --> 00:03:37,280
109.

74
00:03:37,280 --> 00:03:40,159
uh there was a paragraph implicitly

75
00:03:40,159 --> 00:03:41,840
talking about secure domains that we

76
00:03:41,840 --> 00:03:43,200
talked about removing and then we

77
00:03:43,200 --> 00:03:44,159
removed that

78
00:03:44,159 --> 00:03:45,519
and then finally there was some

79
00:03:45,519 --> 00:03:48,080
discussion about applicability text

80
00:03:48,080 --> 00:03:51,200
and so if you remember at 109 we had uh

81
00:03:51,200 --> 00:03:53,840
a sort of a rush session because we only

82
00:03:53,840 --> 00:03:55,599
met for an hour and then we had a

83
00:03:55,599 --> 00:03:57,920
side meeting also and so some of these

84
00:03:57,920 --> 00:04:00,239
were discussed in a side meeting

85
00:04:00,239 --> 00:04:02,239
but i'm not sure that any of those were

86
00:04:02,239 --> 00:04:03,360
contentious but

87
00:04:03,360 --> 00:04:05,599
uh feel free to check but i think most

88
00:04:05,599 --> 00:04:06,720
of the people that cared were actually

89
00:04:06,720 --> 00:04:08,799
at that side meeting so

90
00:04:08,799 --> 00:04:10,560
and then it's been on the list and so i

91
00:04:10,560 --> 00:04:12,640
hope we're good there

92
00:04:12,640 --> 00:04:14,720
there was a open pull request i think

93
00:04:14,720 --> 00:04:15,680
it's been merged now

94
00:04:15,680 --> 00:04:18,560
as trivial editorial um there was a typo

95
00:04:18,560 --> 00:04:19,519
and in particular the

96
00:04:19,519 --> 00:04:21,918
uh the glossary one entry in the

97
00:04:21,918 --> 00:04:23,199
glossary was out of order and so that

98
00:04:23,199 --> 00:04:24,400
just fixes that

99
00:04:24,400 --> 00:04:26,880
and so my belief is that the doc is

100
00:04:26,880 --> 00:04:28,639
ready to go to the iesg whatever the

101
00:04:28,639 --> 00:04:30,240
shepherd directs

102
00:04:30,240 --> 00:04:31,759
in particular we would need to post a

103
00:04:31,759 --> 00:04:33,600
draft 15 because there's been a request

104
00:04:33,600 --> 00:04:35,040
or two that one right there that's been

105
00:04:35,040 --> 00:04:36,320
merged

106
00:04:36,320 --> 00:04:37,680
and so i don't know if the document

107
00:04:37,680 --> 00:04:40,800
shepard if has any other changes

108
00:04:40,800 --> 00:04:42,639
so i guess my question is to the chairs

109
00:04:42,639 --> 00:04:45,120
is have we done a doc shepard review yet

110
00:04:45,120 --> 00:04:47,199
and uh whether we're expecting to have

111
00:04:47,199 --> 00:04:48,560
any other changes come in from doc

112
00:04:48,560 --> 00:04:51,280
shepard review

113
00:04:52,000 --> 00:04:55,040
uh so dave i just reviewed the tip

114
00:04:55,040 --> 00:04:56,639
between the previous version and this

115
00:04:56,639 --> 00:04:57,280
version i

116
00:04:57,280 --> 00:04:59,440
i would like to do a one complete review

117
00:04:59,440 --> 00:05:00,880
of the draft once

118
00:05:00,880 --> 00:05:02,880
and uh probably in the next one or two

119
00:05:02,880 --> 00:05:03,919
weeks i will uh

120
00:05:03,919 --> 00:05:05,280
do the shepherd write up i'll post my

121
00:05:05,280 --> 00:05:06,479
comments first and then do a shepherd

122
00:05:06,479 --> 00:05:07,600
right okay

123
00:05:07,600 --> 00:05:10,080
gotcha so i will uh wait to post draft

124
00:05:10,080 --> 00:05:10,720
15

125
00:05:10,720 --> 00:05:12,720
until after you've done the review that

126
00:05:12,720 --> 00:05:14,479
way if you find anything

127
00:05:14,479 --> 00:05:16,560
um then i will put that in a draft 15

128
00:05:16,560 --> 00:05:18,960
along with that pull request 2019 but

129
00:05:18,960 --> 00:05:20,320
since that one is just

130
00:05:20,320 --> 00:05:21,680
ordering it doesn't actually change the

131
00:05:21,680 --> 00:05:23,199
text or then fixing a typo that

132
00:05:23,199 --> 00:05:25,280
shouldn't affect your doctor

133
00:05:25,280 --> 00:05:28,880
yep okay um

134
00:05:28,880 --> 00:05:30,000
next i don't know if i have any other

135
00:05:30,000 --> 00:05:31,600
slides on this one i think that might be

136
00:05:31,600 --> 00:05:32,880
the only one

137
00:05:32,880 --> 00:05:34,240
yeah i think they're good with respect

138
00:05:34,240 --> 00:05:36,400
to this one yeah all right so now we're

139
00:05:36,400 --> 00:05:36,960
going

140
00:05:36,960 --> 00:05:38,320
by the way just the last thing on that

141
00:05:38,320 --> 00:05:40,560
one um as i think a cure we'll talk

142
00:05:40,560 --> 00:05:42,160
about we think that the

143
00:05:42,160 --> 00:05:45,199
protocol spec is uh now stable enough

144
00:05:45,199 --> 00:05:47,520
that we don't think that there will be

145
00:05:47,520 --> 00:05:49,520
any future changes needed to the

146
00:05:49,520 --> 00:05:51,199
architecture document because now that

147
00:05:51,199 --> 00:05:51,680
we have

148
00:05:51,680 --> 00:05:53,919
we have fairly complete ish

149
00:05:53,919 --> 00:05:55,520
implementation of the protocol

150
00:05:55,520 --> 00:05:57,199
we think we've got all the stuff covered

151
00:05:57,199 --> 00:05:58,720
in the architecture so that needs to be

152
00:05:58,720 --> 00:06:00,000
the architecture and everything else can

153
00:06:00,000 --> 00:06:02,080
just be in protocol

154
00:06:02,080 --> 00:06:04,160
as any changes happen all right so now

155
00:06:04,160 --> 00:06:05,680
we're going to move on to the transport

156
00:06:05,680 --> 00:06:07,919
which is the layer underneath the t

157
00:06:07,919 --> 00:06:10,160
protocol how you bind the t protocol to

158
00:06:10,160 --> 00:06:11,199
hdp

159
00:06:11,199 --> 00:06:14,319
in the case where where the uh agent

160
00:06:14,319 --> 00:06:15,840
connects to the tam

161
00:06:15,840 --> 00:06:17,759
so here the timeline we also had a

162
00:06:17,759 --> 00:06:19,520
working group last call early last year

163
00:06:19,520 --> 00:06:21,280
which had some reviews we solicited

164
00:06:21,280 --> 00:06:23,280
additional reviews after that that then

165
00:06:23,280 --> 00:06:26,400
we discussed that ietf108 uh

166
00:06:26,400 --> 00:06:28,560
and then ivf 109 we had the last issue

167
00:06:28,560 --> 00:06:30,240
that was discussed which had to do with

168
00:06:30,240 --> 00:06:31,360
that adding the

169
00:06:31,360 --> 00:06:33,680
unrequest ta that affected all the

170
00:06:33,680 --> 00:06:35,120
documents and so

171
00:06:35,120 --> 00:06:37,360
the changes in draft 10 here is we added

172
00:06:37,360 --> 00:06:38,880
the unrequest ta

173
00:06:38,880 --> 00:06:40,639
for consistency with both the other

174
00:06:40,639 --> 00:06:42,400
documents being added

175
00:06:42,400 --> 00:06:44,880
and then uh finally there was an issue

176
00:06:44,880 --> 00:06:46,800
that i will talk about on the next slide

177
00:06:46,800 --> 00:06:48,479
so let's just go on to the next slide so

178
00:06:48,479 --> 00:06:50,400
this is already in draft 10.

179
00:06:50,400 --> 00:06:53,919
go ahead all right so here is the issue

180
00:06:53,919 --> 00:06:55,919
the architecture document explains that

181
00:06:55,919 --> 00:06:57,440
a type agent may need to talk to

182
00:06:57,440 --> 00:06:58,400
multiple tabs

183
00:06:58,400 --> 00:07:00,319
right one example use case is talked

184
00:07:00,319 --> 00:07:02,400
about in the architecture document

185
00:07:02,400 --> 00:07:05,280
is where the ta is on one tam and the

186
00:07:05,280 --> 00:07:06,639
personalization data

187
00:07:06,639 --> 00:07:08,800
needed for that ta is on a different ham

188
00:07:08,800 --> 00:07:09,759
okay that's

189
00:07:09,759 --> 00:07:12,800
one of many cases right and so the

190
00:07:12,800 --> 00:07:13,440
problem

191
00:07:13,440 --> 00:07:15,520
was the transport spec had language

192
00:07:15,520 --> 00:07:16,800
shown there

193
00:07:16,800 --> 00:07:19,599
that previously implied that the agent

194
00:07:19,599 --> 00:07:20,800
only had one tam

195
00:07:20,800 --> 00:07:22,479
right because it says when it you know

196
00:07:22,479 --> 00:07:24,400
periodically you you call this request

197
00:07:24,400 --> 00:07:25,919
policy check to see if something has

198
00:07:25,919 --> 00:07:27,919
changed in the tams policy

199
00:07:27,919 --> 00:07:30,160
and when that happens you call into the

200
00:07:30,160 --> 00:07:32,400
uh into the agent from the broker and

201
00:07:32,400 --> 00:07:33,599
the agent either returns

202
00:07:33,599 --> 00:07:37,280
a tam uri to connect to or passes back

203
00:07:37,280 --> 00:07:41,120
a message intent uri so the a

204
00:07:41,120 --> 00:07:43,120
implied that well of course that only

205
00:07:43,120 --> 00:07:44,319
means one time so how do you support

206
00:07:44,319 --> 00:07:45,840
multiple tams how does that work so that

207
00:07:45,840 --> 00:07:47,440
was the issue okay

208
00:07:47,440 --> 00:07:49,759
so the resolution was the text at the

209
00:07:49,759 --> 00:07:51,280
bottom was then added

210
00:07:51,280 --> 00:07:52,639
which explains that you can talk to

211
00:07:52,639 --> 00:07:55,120
multiple tams and the way that happens

212
00:07:55,120 --> 00:07:58,479
is that the broker keeps calling it

213
00:07:58,479 --> 00:07:59,280
request

214
00:07:59,280 --> 00:08:02,400
policy check one by one until the agent

215
00:08:02,400 --> 00:08:05,840
says nothing to do okay so each call

216
00:08:05,840 --> 00:08:08,960
and passes back another tam uri to do

217
00:08:08,960 --> 00:08:10,319
well the intent that the broker will

218
00:08:10,319 --> 00:08:12,000
then call a request policy check again

219
00:08:12,000 --> 00:08:14,400
so it iterates through these whether it

220
00:08:14,400 --> 00:08:16,240
does those in series or whether it does

221
00:08:16,240 --> 00:08:17,280
those in parallel is up to

222
00:08:17,280 --> 00:08:19,199
implementation the point is

223
00:08:19,199 --> 00:08:21,039
if you pass back one it means please

224
00:08:21,039 --> 00:08:22,639
call again so

225
00:08:22,639 --> 00:08:24,639
that was the resolution and that same

226
00:08:24,639 --> 00:08:26,000
change was made in the

227
00:08:26,000 --> 00:08:27,599
in the protocol document so that

228
00:08:27,599 --> 00:08:29,440
explains that the previous text

229
00:08:29,440 --> 00:08:31,199
was in fact correct it just needed more

230
00:08:31,199 --> 00:08:33,039
elaboration to explain how it actually

231
00:08:33,039 --> 00:08:34,559
worked and so

232
00:08:34,559 --> 00:08:38,079
that's the resolution on this one

233
00:08:38,320 --> 00:08:41,279
um i believe that's it for this document

234
00:08:41,279 --> 00:08:42,958
unless there's any questions

235
00:08:42,958 --> 00:08:44,480
here just confirm that is yeah that's

236
00:08:44,480 --> 00:08:46,000
the last slide so yeah that's a lot of

237
00:08:46,000 --> 00:08:46,399
strange

238
00:08:46,399 --> 00:08:49,839
questions okay

239
00:08:50,560 --> 00:08:52,399
so that was the only technical change

240
00:08:52,399 --> 00:08:55,040
which was a clarification

241
00:08:55,040 --> 00:08:56,720
that was necessary in both this document

242
00:08:56,720 --> 00:08:59,920
and the protocol document so

243
00:09:01,200 --> 00:09:04,160
and that one was a result of uh running

244
00:09:04,160 --> 00:09:05,519
into an implementation

245
00:09:05,519 --> 00:09:07,040
of the teat protocol when trying to

246
00:09:07,040 --> 00:09:10,640
implement multiple tabs so

247
00:09:13,200 --> 00:09:14,320
all right so i think that's it for these

248
00:09:14,320 --> 00:09:17,200
unless there's any questions

249
00:09:20,160 --> 00:09:23,839
any comments

250
00:09:24,320 --> 00:09:26,000
i think this document is almost ready

251
00:09:26,000 --> 00:09:27,519
but i think we'll wait for the protocol

252
00:09:27,519 --> 00:09:31,120
draft to progress along with this

253
00:09:31,760 --> 00:09:35,440
uh sure it uh might be useful to get a

254
00:09:35,440 --> 00:09:37,839
doc shepard review on this one too

255
00:09:37,839 --> 00:09:39,839
um okay just in case you see the issue

256
00:09:39,839 --> 00:09:41,440
that doctor that uh whether you are

257
00:09:41,440 --> 00:09:44,320
nancy or doc shepard or somebody else

258
00:09:44,320 --> 00:09:45,839
sure we'll figure that out yeah let's

259
00:09:45,839 --> 00:09:47,680
first get the architecture out and then

260
00:09:47,680 --> 00:09:48,080
we'll

261
00:09:48,080 --> 00:09:51,839
we'll work on this one yeah

262
00:09:52,560 --> 00:09:57,040
uh akira here up next

263
00:09:58,330 --> 00:09:59,920
[Music]

264
00:09:59,920 --> 00:10:05,200
will you hear me yes i think thank you

265
00:10:05,200 --> 00:10:08,000
no not this

266
00:10:13,120 --> 00:10:16,959
yes um i'm going to talk about hackathon

267
00:10:16,959 --> 00:10:20,160
and the when i made the title it's

268
00:10:20,160 --> 00:10:22,079
i wrote it as a deep hackathon but it's

269
00:10:22,079 --> 00:10:24,000
more becoming

270
00:10:24,000 --> 00:10:27,040
uh more becoming similar to typing

271
00:10:27,040 --> 00:10:29,600
deep in suit hackathon which i will

272
00:10:29,600 --> 00:10:32,320
explain later in the slide yes

273
00:10:32,320 --> 00:10:35,519
and next please and uh i i should have

274
00:10:35,519 --> 00:10:35,839
been

275
00:10:35,839 --> 00:10:39,040
announcing what timing we will

276
00:10:39,040 --> 00:10:42,160
get together at together but

277
00:10:42,160 --> 00:10:45,200
yes it was in japan time from 10

278
00:10:45,200 --> 00:10:49,600
am to 3 pm and we were sitting at the

279
00:10:49,600 --> 00:10:54,000
table e a comfortable chair

280
00:10:54,560 --> 00:11:01,839
and yeah okay and next page please

281
00:11:03,600 --> 00:11:07,360
and this is the objective was bombarding

282
00:11:07,360 --> 00:11:11,440
all the pieces inside the tip protocol

283
00:11:11,440 --> 00:11:14,320
draft and also it's we are implementing

284
00:11:14,320 --> 00:11:15,440
on top of the over

285
00:11:15,440 --> 00:11:18,640
http draft so go through all the

286
00:11:18,640 --> 00:11:22,399
cases inside the draft and

287
00:11:22,399 --> 00:11:25,040
anything it's uh well we just went was

288
00:11:25,040 --> 00:11:26,959
trying to purify the documentation

289
00:11:26,959 --> 00:11:29,839
and spec from the implementation

290
00:11:29,839 --> 00:11:32,000
perspective

291
00:11:32,000 --> 00:11:35,519
and implementation was from

292
00:11:35,519 --> 00:11:39,760
um two-time um one from time koto by

293
00:11:39,760 --> 00:11:41,920
implementation from second it's open

294
00:11:41,920 --> 00:11:43,200
source on github

295
00:11:43,200 --> 00:11:46,320
tam on tampos by dave in his

296
00:11:46,320 --> 00:11:50,000
github from microsoft and type device

297
00:11:50,000 --> 00:11:53,680
is uh it's in in our project we call it

298
00:11:53,680 --> 00:11:55,279
deep device but um

299
00:11:55,279 --> 00:11:58,240
it's steep client wait it's not an open

300
00:11:58,240 --> 00:12:00,079
source but we're using this for

301
00:12:00,079 --> 00:12:02,959
testing the draft right now uh and the

302
00:12:02,959 --> 00:12:04,079
tip agent

303
00:12:04,079 --> 00:12:07,839
from t page and ta from microsoft

304
00:12:07,839 --> 00:12:10,880
and deep library it's

305
00:12:10,880 --> 00:12:13,920
uh it's also it's implemented by second

306
00:12:13,920 --> 00:12:14,720
it's

307
00:12:14,720 --> 00:12:18,399
more like a helper library for

308
00:12:18,399 --> 00:12:21,120
implementing tip agent and tip broker

309
00:12:21,120 --> 00:12:24,240
and it's called libsy deep

310
00:12:24,240 --> 00:12:27,360
and that's page four

311
00:12:27,360 --> 00:12:32,720
and could just skip the page um pen

312
00:12:33,680 --> 00:12:36,479
yes page then

313
00:12:37,360 --> 00:12:40,000
page 10 is a summary i'm i just wanted

314
00:12:40,000 --> 00:12:42,240
to explain the summary first to

315
00:12:42,240 --> 00:12:44,160
make it easier to understand what we

316
00:12:44,160 --> 00:12:46,480
were doing

317
00:12:46,480 --> 00:12:49,680
and after yes we

318
00:12:49,680 --> 00:12:53,200
after the hackathon we um i'm not sure

319
00:12:53,200 --> 00:12:53,600
about

320
00:12:53,600 --> 00:12:57,040
everybody but we pretty much feel it's

321
00:12:57,040 --> 00:13:00,160
the draft of the tv protocol

322
00:13:00,160 --> 00:13:03,279
and tip over http protocol is pretty

323
00:13:03,279 --> 00:13:04,240
much

324
00:13:04,240 --> 00:13:07,519
reasonable and um i'm not saying it's

325
00:13:07,519 --> 00:13:09,279
it's perfect it's not i'm not saying

326
00:13:09,279 --> 00:13:10,720
it's optimal or

327
00:13:10,720 --> 00:13:14,880
best or but it's a reasonable

328
00:13:14,880 --> 00:13:18,079
it works okay yes

329
00:13:18,079 --> 00:13:21,440
and and it doesn't mean it's

330
00:13:21,440 --> 00:13:23,760
it's uh it's fit it's okay to

331
00:13:23,760 --> 00:13:25,279
implementing deep

332
00:13:25,279 --> 00:13:28,639
uh and it will work it's we don't have

333
00:13:28,639 --> 00:13:30,480
anything else it's perfectly working we

334
00:13:30,480 --> 00:13:31,920
still need to work on

335
00:13:31,920 --> 00:13:34,680
it's it's right here it's until from

336
00:13:34,680 --> 00:13:37,279
itaf110 to 111

337
00:13:37,279 --> 00:13:40,560
on one one one 11. probably

338
00:13:40,560 --> 00:13:44,000
you have to they have to uh

339
00:13:44,000 --> 00:13:48,320
test suit manifest in the implementation

340
00:13:48,320 --> 00:13:51,199
and also we only have tried mostly on

341
00:13:51,199 --> 00:13:53,199
the seaboard implementation without the

342
00:13:53,199 --> 00:13:56,240
encryption and decryption and um and

343
00:13:56,240 --> 00:13:57,040
signature

344
00:13:57,040 --> 00:14:01,839
verification so we we need to try coset

345
00:14:01,839 --> 00:14:03,680
and also we need to start integrating

346
00:14:03,680 --> 00:14:05,120
red stuff

347
00:14:05,120 --> 00:14:07,120
and it's it's probably it's going to be

348
00:14:07,120 --> 00:14:09,600
in the davis slide today

349
00:14:09,600 --> 00:14:12,720
okay so could you go back to uh

350
00:14:12,720 --> 00:14:17,839
page seven

351
00:14:18,399 --> 00:14:22,160
yeah thanks so first thing we

352
00:14:22,160 --> 00:14:25,120
were trying to do in the test and the

353
00:14:25,120 --> 00:14:26,720
verify in the

354
00:14:26,720 --> 00:14:30,160
hackathon was token the type was changed

355
00:14:30,160 --> 00:14:31,519
in the c board

356
00:14:31,519 --> 00:14:34,800
expression from type of u into b

357
00:14:34,800 --> 00:14:38,240
b string or binary string the reason is

358
00:14:38,240 --> 00:14:41,360
uh trying to set use the same

359
00:14:41,360 --> 00:14:44,800
bytes which is from between eight to 16

360
00:14:44,800 --> 00:14:48,720
or 64 bytes as the same and the eat

361
00:14:48,720 --> 00:14:52,160
rats eat documentation um so i have to

362
00:14:52,160 --> 00:14:53,600
and then that requires the

363
00:14:53,600 --> 00:14:55,680
implementation changes and it was

364
00:14:55,680 --> 00:14:58,240
it worked fine didn't have any much

365
00:14:58,240 --> 00:14:59,440
problem

366
00:14:59,440 --> 00:15:02,560
um and

367
00:15:02,560 --> 00:15:05,360
and one thing we we couldn't really

368
00:15:05,360 --> 00:15:06,480
finish it in the

369
00:15:06,480 --> 00:15:09,199
hackathon was uh creating the suit

370
00:15:09,199 --> 00:15:10,480
manifest

371
00:15:10,480 --> 00:15:13,920
we we initially was using pre-made

372
00:15:13,920 --> 00:15:17,279
suit manifest uh which is uploaded on

373
00:15:17,279 --> 00:15:19,519
suit github

374
00:15:19,519 --> 00:15:23,600
and we didn't generate it we never

375
00:15:23,600 --> 00:15:25,920
generated by ourselves so we were trying

376
00:15:25,920 --> 00:15:28,160
to make it generating the suit manifest

377
00:15:28,160 --> 00:15:30,880
and then upload it to the time server

378
00:15:30,880 --> 00:15:31,519
and then

379
00:15:31,519 --> 00:15:34,959
using it from time to client um yes

380
00:15:34,959 --> 00:15:37,120
that's we couldn't finish it but it's

381
00:15:37,120 --> 00:15:38,560
okay it's uh

382
00:15:38,560 --> 00:15:40,959
we got it we got it we it was we got

383
00:15:40,959 --> 00:15:42,800
most of the other stuff done with the

384
00:15:42,800 --> 00:15:43,360
predi

385
00:15:43,360 --> 00:15:46,560
a pre-created suit manifest

386
00:15:46,560 --> 00:15:49,600
and the next was

387
00:15:49,600 --> 00:15:52,839
unneeded tc list was added at i

388
00:15:52,839 --> 00:15:56,000
df-109 and we never finished

389
00:15:56,000 --> 00:15:59,839
entire uh procedure from downloading

390
00:15:59,839 --> 00:16:02,480
pc that has a trusted component which

391
00:16:02,480 --> 00:16:04,720
used to be called trusted application

392
00:16:04,720 --> 00:16:08,079
and install it and run it and delete it

393
00:16:08,079 --> 00:16:11,839
and to all one one one path

394
00:16:11,839 --> 00:16:14,959
so and for that for that purpose a

395
00:16:14,959 --> 00:16:16,880
needed tc list was added

396
00:16:16,880 --> 00:16:21,120
however uh yes and and we were able to

397
00:16:21,120 --> 00:16:24,320
finally verify if it's working or

398
00:16:24,320 --> 00:16:27,680
um or implementation just

399
00:16:27,680 --> 00:16:30,480
uh just the minor thing is yeah i needed

400
00:16:30,480 --> 00:16:31,120
to see this

401
00:16:31,120 --> 00:16:32,959
speak the features became already

402
00:16:32,959 --> 00:16:35,040
obsolete in the

403
00:16:35,040 --> 00:16:38,160
latest draft it's it's uh

404
00:16:38,160 --> 00:16:40,000
the feature of unneeded t-series for

405
00:16:40,000 --> 00:16:42,320
deleting specifying deleting tc

406
00:16:42,320 --> 00:16:45,279
is moved to specify in the latest

407
00:16:45,279 --> 00:16:46,480
traffic

408
00:16:46,480 --> 00:16:49,680
moves to specifying inside the manifest

409
00:16:49,680 --> 00:16:52,959
and which is reasonable

410
00:16:53,360 --> 00:16:56,800
and yes and the last thing is

411
00:16:56,800 --> 00:17:00,480
there's this all the steep message

412
00:17:00,480 --> 00:17:03,279
is in suit manifests too is it's written

413
00:17:03,279 --> 00:17:03,519
in

414
00:17:03,519 --> 00:17:06,720
c board and every entry it should

415
00:17:06,720 --> 00:17:10,000
um verify

416
00:17:10,000 --> 00:17:13,439
um the h each entry

417
00:17:13,439 --> 00:17:17,039
in the um c board entry however we

418
00:17:17,039 --> 00:17:19,359
really didn't we couldn't yes it's not

419
00:17:19,359 --> 00:17:20,799
it's not easy to

420
00:17:20,799 --> 00:17:23,039
make adding all the checking inside but

421
00:17:23,039 --> 00:17:24,880
um well yeah we will try

422
00:17:24,880 --> 00:17:27,919
uh um

423
00:17:27,919 --> 00:17:31,440
as a step by step yes

424
00:17:31,440 --> 00:17:35,520
and next page please

425
00:17:37,840 --> 00:17:40,540
yes and uh

426
00:17:40,540 --> 00:17:42,799
[Music]

427
00:17:42,799 --> 00:17:46,320
yes this is a some of the

428
00:17:46,320 --> 00:17:50,320
activity we note um during the day

429
00:17:50,320 --> 00:17:53,200
we made on the github the pull request

430
00:17:53,200 --> 00:17:53,600
and

431
00:17:53,600 --> 00:17:56,720
um uh adding the issues it's

432
00:17:56,720 --> 00:17:58,720
it's not an issue it's more like a

433
00:17:58,720 --> 00:18:00,080
asking question or

434
00:18:00,080 --> 00:18:03,120
asking a comment github it's only the

435
00:18:03,120 --> 00:18:04,880
way it's called this issue so

436
00:18:04,880 --> 00:18:07,919
that's that's listed here

437
00:18:07,919 --> 00:18:11,120
so first two is uh it's not really

438
00:18:11,120 --> 00:18:15,840
uh big big changes

439
00:18:16,240 --> 00:18:18,160
to make the implementation easier we

440
00:18:18,160 --> 00:18:19,440
have a cdl

441
00:18:19,440 --> 00:18:22,559
example of the sabor expression

442
00:18:22,559 --> 00:18:26,000
and also see binary expression

443
00:18:26,000 --> 00:18:29,360
representation inside the tip draft and

444
00:18:29,360 --> 00:18:32,559
some of the example was using

445
00:18:32,559 --> 00:18:35,039
eight bytes and some of them some of the

446
00:18:35,039 --> 00:18:36,000
uh id

447
00:18:36,000 --> 00:18:38,960
component id was using 15 byte because

448
00:18:38,960 --> 00:18:40,559
of my old typo

449
00:18:40,559 --> 00:18:44,080
and so we you know we finally can um

450
00:18:44,080 --> 00:18:47,120
use the size which is reasonable

451
00:18:47,120 --> 00:18:50,240
change it to you reasonable and a little

452
00:18:50,240 --> 00:18:52,720
bit of a typo fixing

453
00:18:52,720 --> 00:18:57,120
and yes while we were reading the uh

454
00:18:57,120 --> 00:18:59,520
the documentation implementing the on

455
00:18:59,520 --> 00:19:01,039
during the hackathon yes

456
00:19:01,039 --> 00:19:03,919
i realized that the word was in the deep

457
00:19:03,919 --> 00:19:04,720
draft was t

458
00:19:04,720 --> 00:19:07,679
it was ta signer and and the

459
00:19:07,679 --> 00:19:09,120
architecture direct was tc

460
00:19:09,120 --> 00:19:12,720
signer so yes i just wrote that in the

461
00:19:12,720 --> 00:19:16,720
um github and

462
00:19:17,039 --> 00:19:20,240
yes and this is next one is going to be

463
00:19:20,240 --> 00:19:23,039
talk in the dave sliders you talk about

464
00:19:23,039 --> 00:19:24,240
the token

465
00:19:24,240 --> 00:19:27,679
um should we initially it was we only

466
00:19:27,679 --> 00:19:29,520
had token and the tip message

467
00:19:29,520 --> 00:19:33,120
protocol and but it's

468
00:19:33,120 --> 00:19:35,919
how we're going to use it between token

469
00:19:35,919 --> 00:19:36,559
and

470
00:19:36,559 --> 00:19:40,160
it claims claims it and

471
00:19:40,160 --> 00:19:44,760
also another discussion was

472
00:19:44,760 --> 00:19:47,760
expiration time or and those discussion

473
00:19:47,760 --> 00:19:49,840
will be brought in the date

474
00:19:49,840 --> 00:19:54,959
dave talk and next is

475
00:19:55,440 --> 00:19:59,200
yes um

476
00:19:59,200 --> 00:20:02,240
yeah issue 120 is not

477
00:20:02,240 --> 00:20:05,440
real the draft or any

478
00:20:05,440 --> 00:20:08,960
uh protocol issue it's it's

479
00:20:08,960 --> 00:20:12,320
we were using pre-generated suit uh

480
00:20:12,320 --> 00:20:16,720
fire suit manifest and there is a tool

481
00:20:16,720 --> 00:20:21,840
um yeah so to manifest generator

482
00:20:21,840 --> 00:20:23,840
but um we didn't we couldn't come up

483
00:20:23,840 --> 00:20:25,200
with how did uh

484
00:20:25,200 --> 00:20:27,600
make a generating a suit manifest for

485
00:20:27,600 --> 00:20:29,120
deleting so that's

486
00:20:29,120 --> 00:20:32,559
yeah we wanted to have a um example then

487
00:20:32,559 --> 00:20:34,480
we could put it in whether

488
00:20:34,480 --> 00:20:35,919
i'm not sure what it's going to be it

489
00:20:35,919 --> 00:20:37,600
should be in the deep draft or suit

490
00:20:37,600 --> 00:20:38,240
draft

491
00:20:38,240 --> 00:20:40,480
but um yes and we would like to have the

492
00:20:40,480 --> 00:20:41,840
cddo exp

493
00:20:41,840 --> 00:20:44,000
expression example and binary

494
00:20:44,000 --> 00:20:45,120
presentation

495
00:20:45,120 --> 00:20:47,840
so it will make it easier for the people

496
00:20:47,840 --> 00:20:49,039
who's going to

497
00:20:49,039 --> 00:20:53,440
implement this from this draft and

498
00:20:53,440 --> 00:20:56,799
yes and this is next era queer request

499
00:20:56,799 --> 00:20:57,440
is

500
00:20:57,440 --> 00:21:00,320
this is from dave

501
00:21:01,440 --> 00:21:05,919
and um

502
00:21:07,520 --> 00:21:12,480
yeah um so

503
00:21:12,960 --> 00:21:16,400
when we one of the one of the discussion

504
00:21:16,400 --> 00:21:19,039
during the hackathon was i never write

505
00:21:19,039 --> 00:21:22,080
i didn't have a time to

506
00:21:22,400 --> 00:21:24,720
add it in the github is there's a

507
00:21:24,720 --> 00:21:25,679
sequence number

508
00:21:25,679 --> 00:21:28,240
and a suit manifest and there's a

509
00:21:28,240 --> 00:21:29,280
version number

510
00:21:29,280 --> 00:21:33,679
of the uh trusted component

511
00:21:33,679 --> 00:21:36,240
inside the suit manifest and how to

512
00:21:36,240 --> 00:21:36,880
handle

513
00:21:36,880 --> 00:21:40,480
um rollback and we didn't get to the

514
00:21:40,480 --> 00:21:41,679
conclusion so

515
00:21:41,679 --> 00:21:44,000
if we get to have a little bit more idea

516
00:21:44,000 --> 00:21:44,880
we will i will

517
00:21:44,880 --> 00:21:48,159
put it in the github and on another

518
00:21:48,159 --> 00:21:51,840
and the next one is

519
00:21:53,440 --> 00:21:57,440
page nine two issue related to

520
00:21:57,440 --> 00:22:00,640
specifying uri for the

521
00:22:00,640 --> 00:22:03,760
suit manifest binary and i would like i

522
00:22:03,760 --> 00:22:04,960
will i add that

523
00:22:04,960 --> 00:22:07,760
into the last slide so did you go to

524
00:22:07,760 --> 00:22:13,840
page 11.

525
00:22:14,720 --> 00:22:17,799
[Music]

526
00:22:17,919 --> 00:22:20,240
okay

527
00:22:21,679 --> 00:22:25,440
so first first question is it's not a

528
00:22:25,440 --> 00:22:27,840
question but

529
00:22:29,200 --> 00:22:33,360
one of the um

530
00:22:33,600 --> 00:22:36,960
it's you usage of the

531
00:22:36,960 --> 00:22:40,400
suit manifest binary inside the tip is

532
00:22:40,400 --> 00:22:44,960
there's a t there's a tc designer who is

533
00:22:44,960 --> 00:22:46,400
developing a tc

534
00:22:46,400 --> 00:22:50,480
tc which is include application or the

535
00:22:50,480 --> 00:22:51,520
personal data

536
00:22:51,520 --> 00:22:54,720
or a serial number or license

537
00:22:54,720 --> 00:22:57,440
license key and and that will be

538
00:22:57,440 --> 00:23:00,080
encapsulated in the suit manifest binary

539
00:23:00,080 --> 00:23:02,320
and then it will be encapsulated in the

540
00:23:02,320 --> 00:23:04,400
to keep message

541
00:23:04,400 --> 00:23:08,000
and and and that will be hand over to

542
00:23:08,000 --> 00:23:08,559
the tam

543
00:23:08,559 --> 00:23:11,840
server tab vendor it's very

544
00:23:11,840 --> 00:23:15,440
likely to have some of the pc signer

545
00:23:15,440 --> 00:23:18,080
is independently developing the pc

546
00:23:18,080 --> 00:23:18,799
binary

547
00:23:18,799 --> 00:23:20,960
and handle handing over to the tam

548
00:23:20,960 --> 00:23:22,080
vendor which is

549
00:23:22,080 --> 00:23:26,880
something like app store or uh

550
00:23:26,880 --> 00:23:30,400
or uh time server hosted by

551
00:23:30,400 --> 00:23:33,280
security company or insurance company or

552
00:23:33,280 --> 00:23:34,799
any other company

553
00:23:34,799 --> 00:23:37,200
and they would like to host the binary

554
00:23:37,200 --> 00:23:37,840
by their

555
00:23:37,840 --> 00:23:41,200
uh their uh self then we

556
00:23:41,200 --> 00:23:44,080
there's there then we need to override

557
00:23:44,080 --> 00:23:44,640
or

558
00:23:44,640 --> 00:23:47,600
specify externally uh the uri

559
00:23:47,600 --> 00:23:51,520
information where the times um

560
00:23:51,600 --> 00:23:55,679
dc binary is the downward and

561
00:23:55,679 --> 00:23:58,320
one thing one of the idea is that the

562
00:23:58,320 --> 00:23:58,799
valid

563
00:23:58,799 --> 00:24:02,799
use cases and it's um it was the 104

564
00:24:02,799 --> 00:24:05,039
is the question asking the questions one

565
00:24:05,039 --> 00:24:08,400
or four and 105 is how to

566
00:24:08,400 --> 00:24:12,000
describe that in suit manifest and i

567
00:24:12,000 --> 00:24:14,799
think i need the expert from suit

568
00:24:14,799 --> 00:24:16,400
joining today

569
00:24:16,400 --> 00:24:19,919
um should we should we should we

570
00:24:19,919 --> 00:24:23,120
ex we um add your

571
00:24:23,120 --> 00:24:26,559
eye section override section externally

572
00:24:26,559 --> 00:24:27,039
from the

573
00:24:27,039 --> 00:24:31,200
word section of the signed by tc signer

574
00:24:31,200 --> 00:24:35,840
or if we should we make a encapsulated

575
00:24:35,840 --> 00:24:38,880
suit in um i forgot

576
00:24:38,880 --> 00:24:41,080
envelope i forgot the word thing but i'm

577
00:24:41,080 --> 00:24:42,559
encapsulating

578
00:24:42,559 --> 00:24:46,000
portion which is written by uh signed by

579
00:24:46,000 --> 00:24:49,840
tc signer and then adding a uri

580
00:24:49,840 --> 00:24:51,679
information with override and

581
00:24:51,679 --> 00:24:53,679
encapsulating again with the time

582
00:24:53,679 --> 00:24:57,039
um vendor um we didn't yeah we just

583
00:24:57,039 --> 00:24:59,520
we just want to have the let's which

584
00:24:59,520 --> 00:25:01,520
which way is this

585
00:25:01,520 --> 00:25:04,799
prefer way with the suit and we would

586
00:25:04,799 --> 00:25:06,559
like to have the

587
00:25:06,559 --> 00:25:10,000
uh relaxed added to the cdd expression

588
00:25:10,000 --> 00:25:12,240
and binary representation

589
00:25:12,240 --> 00:25:16,000
in the draft um

590
00:25:16,000 --> 00:25:19,200
and brandon do you do my

591
00:25:19,200 --> 00:25:22,159
comment uh absolutely i was abiding my

592
00:25:22,159 --> 00:25:22,960
time

593
00:25:22,960 --> 00:25:26,240
um so uh

594
00:25:26,240 --> 00:25:28,640
the first question that you've got here

595
00:25:28,640 --> 00:25:29,440
i think that

596
00:25:29,440 --> 00:25:32,559
all of the questions that um you asked

597
00:25:32,559 --> 00:25:34,480
no there's one in addition to the three

598
00:25:34,480 --> 00:25:36,240
on this page so i'll start with the one

599
00:25:36,240 --> 00:25:37,600
that's not on the page

600
00:25:37,600 --> 00:25:40,159
um you asked about uh rollback

601
00:25:40,159 --> 00:25:41,120
specifically

602
00:25:41,120 --> 00:25:44,000
so when you have a component with a

603
00:25:44,000 --> 00:25:44,720
version

604
00:25:44,720 --> 00:25:47,039
number test that's embedded in the

605
00:25:47,039 --> 00:25:47,919
manifest

606
00:25:47,919 --> 00:25:50,480
and you also have a sequence number the

607
00:25:50,480 --> 00:25:51,360
version number

608
00:25:51,360 --> 00:25:53,919
tests that you apply should apply

609
00:25:53,919 --> 00:25:55,120
regardless

610
00:25:55,120 --> 00:25:57,120
of what version you're installing the

611
00:25:57,120 --> 00:25:59,279
manifest was not intended to assert

612
00:25:59,279 --> 00:26:00,320
version numbers

613
00:26:00,320 --> 00:26:03,279
it was intended to determine whether or

614
00:26:03,279 --> 00:26:03,679
not

615
00:26:03,679 --> 00:26:06,960
a component is installable so the idea

616
00:26:06,960 --> 00:26:07,360
here

617
00:26:07,360 --> 00:26:09,600
is that if you want to install an older

618
00:26:09,600 --> 00:26:11,279
version on purpose

619
00:26:11,279 --> 00:26:14,080
what you need is a more advanced

620
00:26:14,080 --> 00:26:15,440
sequence number

621
00:26:15,440 --> 00:26:18,320
in the manifest and then the uh the

622
00:26:18,320 --> 00:26:19,039
system will

623
00:26:19,039 --> 00:26:21,039
still verify all of the checks that you

624
00:26:21,039 --> 00:26:22,159
put in your manifest

625
00:26:22,159 --> 00:26:25,440
but the idea here is that using

626
00:26:25,440 --> 00:26:29,279
a more uh sorry a larger sequence number

627
00:26:29,279 --> 00:26:32,640
shows the intent to install an

628
00:26:32,640 --> 00:26:35,360
older payload and it's about

629
00:26:35,360 --> 00:26:36,159
communicating

630
00:26:36,159 --> 00:26:39,520
the intent accurately so that that's the

631
00:26:39,520 --> 00:26:42,559
the idea there okay okay then we should

632
00:26:42,559 --> 00:26:46,000
follow uh yes so then uh we should

633
00:26:46,000 --> 00:26:48,480
put uh use the sequence number for the

634
00:26:48,480 --> 00:26:49,039
uh

635
00:26:49,039 --> 00:26:52,480
display list which roll back or whatever

636
00:26:52,480 --> 00:26:53,120
it's

637
00:26:53,120 --> 00:26:57,678
we should override with the existing um

638
00:26:58,559 --> 00:27:00,960
binary yeah that's right so if you want

639
00:27:00,960 --> 00:27:02,480
to force a downgrade

640
00:27:02,480 --> 00:27:05,600
then uh resigning a manifest that's

641
00:27:05,600 --> 00:27:07,520
identical except for having its

642
00:27:07,520 --> 00:27:09,679
uh version or it's a sequence number

643
00:27:09,679 --> 00:27:10,640
incremented

644
00:27:10,640 --> 00:27:14,400
is the right answer okay very good

645
00:27:14,400 --> 00:27:17,679
um okay uh so the next one uh

646
00:27:17,679 --> 00:27:20,480
there is a mechanism in suit to deliver

647
00:27:20,480 --> 00:27:20,799
an

648
00:27:20,799 --> 00:27:24,720
overridden uri so that absolutely is

649
00:27:24,720 --> 00:27:28,000
a valid use case

650
00:27:28,000 --> 00:27:30,559
the way that you do it is you make a

651
00:27:30,559 --> 00:27:32,240
secondary manifest

652
00:27:32,240 --> 00:27:34,960
that links the first one as a dependency

653
00:27:34,960 --> 00:27:35,440
and

654
00:27:35,440 --> 00:27:38,799
it asserts one thing and that is a uri

655
00:27:38,799 --> 00:27:42,000
the rest of its uh operations are simply

656
00:27:42,000 --> 00:27:43,840
uh pass-throughs to the existing

657
00:27:43,840 --> 00:27:46,399
manifest mm-hmm

658
00:27:46,399 --> 00:27:49,760
okay um yes and that

659
00:27:49,760 --> 00:27:52,240
in that case is it it's the construct

660
00:27:52,240 --> 00:27:54,960
construction of the suit manifest binary

661
00:27:54,960 --> 00:27:55,679
is it

662
00:27:55,679 --> 00:27:58,960
uh is it going to be

663
00:27:58,960 --> 00:28:02,640
encapsulate um yeah yeah encapsulating

664
00:28:02,640 --> 00:28:05,919
this the existing suit manifest with

665
00:28:05,919 --> 00:28:09,440
additional uri manifest and then

666
00:28:09,440 --> 00:28:12,960
signing signed by t times vendor

667
00:28:12,960 --> 00:28:15,360
uh so the intent was that these could

668
00:28:15,360 --> 00:28:17,600
have a separation of responsibility

669
00:28:17,600 --> 00:28:20,960
so that one could be signed by the tam

670
00:28:20,960 --> 00:28:24,159
uh the tams authority

671
00:28:24,159 --> 00:28:27,360
and the second could be signed by

672
00:28:27,360 --> 00:28:30,880
even local independent infrastructure

673
00:28:30,880 --> 00:28:33,120
the idea there is that it still should

674
00:28:33,120 --> 00:28:36,000
be something that the device trusts

675
00:28:36,000 --> 00:28:39,440
but it doesn't have to be the town

676
00:28:40,720 --> 00:28:44,720
then the manifest construction will be

677
00:28:44,720 --> 00:28:47,919
having side by side signed by different

678
00:28:47,919 --> 00:28:51,679
um signer that's correct uh you do also

679
00:28:51,679 --> 00:28:53,120
have the option of embedding one

680
00:28:53,120 --> 00:28:53,840
manifest

681
00:28:53,840 --> 00:28:56,320
inside another one and particularly if

682
00:28:56,320 --> 00:28:56,960
you want

683
00:28:56,960 --> 00:29:00,480
to encrypt a manifest

684
00:29:00,480 --> 00:29:01,919
there's some discussion about encrypted

685
00:29:01,919 --> 00:29:03,679
manifests going on in the chat

686
00:29:03,679 --> 00:29:07,120
uh then this becomes relevant uh because

687
00:29:07,120 --> 00:29:10,240
embedding it in um

688
00:29:10,240 --> 00:29:11,919
the cleanest way of dealing with the

689
00:29:11,919 --> 00:29:13,679
encrypted manifest is to take

690
00:29:13,679 --> 00:29:15,760
a manifest that contains nothing but the

691
00:29:15,760 --> 00:29:17,120
encryption information

692
00:29:17,120 --> 00:29:19,520
and potentially an overridden uri and

693
00:29:19,520 --> 00:29:21,279
then reference a manifest that's

694
00:29:21,279 --> 00:29:22,159
encrypted

695
00:29:22,159 --> 00:29:25,600
um that is also contained in the uh

696
00:29:25,600 --> 00:29:27,679
in the external metadata of that first

697
00:29:27,679 --> 00:29:29,760
manifest

698
00:29:29,760 --> 00:29:31,760
yeah so that's an option as well all

699
00:29:31,760 --> 00:29:33,760
right um

700
00:29:33,760 --> 00:29:36,559
thank you then the last one uh

701
00:29:36,559 --> 00:29:38,399
generating a manifest for delete

702
00:29:38,399 --> 00:29:41,520
that's a hot topic and uh we are

703
00:29:41,520 --> 00:29:44,480
figuring that one out um the the best

704
00:29:44,480 --> 00:29:46,240
answer i've been able to come up with so

705
00:29:46,240 --> 00:29:47,039
far

706
00:29:47,039 --> 00:29:49,440
is that delete is probably not what we

707
00:29:49,440 --> 00:29:51,120
want because it's going to

708
00:29:51,120 --> 00:29:54,000
introduce a situation where if you have

709
00:29:54,000 --> 00:29:54,559
two

710
00:29:54,559 --> 00:29:57,840
uh two components that both depend

711
00:29:57,840 --> 00:30:00,159
on a tertiary component and one of them

712
00:30:00,159 --> 00:30:02,000
has a manifest that says delete that

713
00:30:02,000 --> 00:30:03,200
tertiary component

714
00:30:03,200 --> 00:30:04,880
then you end up breaking the dependency

715
00:30:04,880 --> 00:30:07,120
chain of another tc

716
00:30:07,120 --> 00:30:09,360
so you probably don't actually want

717
00:30:09,360 --> 00:30:10,480
delete

718
00:30:10,480 --> 00:30:14,240
so my my suggestion is that we

719
00:30:14,240 --> 00:30:16,399
use an unlink or a garbage collect

720
00:30:16,399 --> 00:30:17,279
semantic

721
00:30:17,279 --> 00:30:19,600
so that you effectively decrease the

722
00:30:19,600 --> 00:30:20,799
reference count

723
00:30:20,799 --> 00:30:23,760
of the uh of the component that you're

724
00:30:23,760 --> 00:30:24,799
trying to delete

725
00:30:24,799 --> 00:30:26,880
and if it's reference count hits zero

726
00:30:26,880 --> 00:30:29,679
then you delete it

727
00:30:31,679 --> 00:30:34,960
yeah um okay

728
00:30:34,960 --> 00:30:38,559
yeah thank you um yeah

729
00:30:38,559 --> 00:30:41,919
either is not easy but um yeah okay

730
00:30:41,919 --> 00:30:44,960
yes okay and can i ask the additional

731
00:30:44,960 --> 00:30:45,840
question for the

732
00:30:45,840 --> 00:30:49,039
first rollback uh question

733
00:30:49,039 --> 00:30:52,960
yes it's a um

734
00:30:54,159 --> 00:30:57,760
we were thinking when we're trying to

735
00:30:58,799 --> 00:31:03,120
handle sequence number in the tip agent

736
00:31:03,120 --> 00:31:06,240
it might we might it might have the two

737
00:31:06,240 --> 00:31:09,440
two's suit manifest binary one from one

738
00:31:09,440 --> 00:31:10,559
is for

739
00:31:10,559 --> 00:31:14,080
uh one for tca tca is

740
00:31:14,080 --> 00:31:17,200
updating current uh installed

741
00:31:17,200 --> 00:31:20,720
tc a inside device

742
00:31:20,720 --> 00:31:24,799
and another um suit manifest menu

743
00:31:24,799 --> 00:31:25,960
containing

744
00:31:25,960 --> 00:31:28,960
tcb which is not installed

745
00:31:28,960 --> 00:31:32,240
already and both will pro

746
00:31:32,240 --> 00:31:35,279
and the suit manifest it says uh to

747
00:31:35,279 --> 00:31:39,039
handle based uh first with the certain

748
00:31:39,039 --> 00:31:40,080
um

749
00:31:40,080 --> 00:31:43,760
sequence number before uh handling

750
00:31:43,760 --> 00:31:48,159
anything inside and how to bind

751
00:31:48,159 --> 00:31:51,600
how to is do we need to care the which

752
00:31:51,600 --> 00:31:54,240
sequence the sickest number should be

753
00:31:54,240 --> 00:31:55,279
binded to which

754
00:31:55,279 --> 00:31:59,039
tc um and the implementation

755
00:31:59,039 --> 00:32:02,159
was the yes

756
00:32:02,159 --> 00:32:05,200
something additional question came up

757
00:32:05,200 --> 00:32:08,399
i think you do have to care and and

758
00:32:08,399 --> 00:32:12,320
the problem is one of authority

759
00:32:12,320 --> 00:32:14,640
so we don't want an authority inversion

760
00:32:14,640 --> 00:32:15,840
if you have three

761
00:32:15,840 --> 00:32:19,679
uh three tcs in a dependency tree

762
00:32:19,679 --> 00:32:20,960
and they're each signed by different

763
00:32:20,960 --> 00:32:23,039
authorities then

764
00:32:23,039 --> 00:32:26,000
you don't want to use the top level uh

765
00:32:26,000 --> 00:32:27,679
sequence number as the sequence number

766
00:32:27,679 --> 00:32:28,000
for

767
00:32:28,000 --> 00:32:30,480
all of them and the reason that this is

768
00:32:30,480 --> 00:32:31,519
such an important

769
00:32:31,519 --> 00:32:34,399
consideration is because that would

770
00:32:34,399 --> 00:32:35,360
effectively

771
00:32:35,360 --> 00:32:38,799
give the uh the top level uh

772
00:32:38,799 --> 00:32:41,760
authority re roll back authority over

773
00:32:41,760 --> 00:32:42,080
all

774
00:32:42,080 --> 00:32:44,000
components that were referenced in its

775
00:32:44,000 --> 00:32:45,360
dependency tree

776
00:32:45,360 --> 00:32:48,640
and if you expand that in a in a um

777
00:32:48,640 --> 00:32:50,640
a system that allows components in

778
00:32:50,640 --> 00:32:52,240
general like this

779
00:32:52,240 --> 00:32:54,159
then that could be expanded even further

780
00:32:54,159 --> 00:32:55,760
to say that you end up

781
00:32:55,760 --> 00:32:58,960
with all uh you end up with

782
00:32:58,960 --> 00:33:01,440
rollback authority over any component

783
00:33:01,440 --> 00:33:02,880
because all you have to do is link it as

784
00:33:02,880 --> 00:33:04,320
a dependency and then set a different

785
00:33:04,320 --> 00:33:06,720
sequence number

786
00:33:06,720 --> 00:33:09,760
so and yes then um

787
00:33:09,760 --> 00:33:12,880
and then um what would be good way in

788
00:33:12,880 --> 00:33:13,760
the

789
00:33:13,760 --> 00:33:16,960
in the tip agent binding between the

790
00:33:16,960 --> 00:33:21,519
uh different tc binary with the

791
00:33:21,519 --> 00:33:24,159
sequence number with it because the

792
00:33:24,159 --> 00:33:24,880
component

793
00:33:24,880 --> 00:33:28,880
id is inside the manifest and

794
00:33:28,880 --> 00:33:32,880
manifest body so or should we

795
00:33:32,880 --> 00:33:36,399
use keep agent use some

796
00:33:36,399 --> 00:33:39,679
kind of id for the different

797
00:33:39,679 --> 00:33:42,399
sequence number uh the sequence number

798
00:33:42,399 --> 00:33:43,919
is also inside

799
00:33:43,919 --> 00:33:47,279
the manifest body uh-huh

800
00:33:47,279 --> 00:33:50,559
i'll see so the second element

801
00:33:50,559 --> 00:33:54,159
i see so then then it's okay to matching

802
00:33:54,159 --> 00:33:58,399
uh i mean binding the component id with

803
00:33:58,399 --> 00:34:00,480
the sequence number inside the manifest

804
00:34:00,480 --> 00:34:01,679
body

805
00:34:01,679 --> 00:34:04,399
yes and use this as a and using that as

806
00:34:04,399 --> 00:34:04,720
the

807
00:34:04,720 --> 00:34:08,079
iso okay uh yes

808
00:34:08,079 --> 00:34:11,119
okay let's i probably for the next hack

809
00:34:11,119 --> 00:34:13,040
before the next hackathon is we will try

810
00:34:13,040 --> 00:34:14,159
with the uh

811
00:34:14,159 --> 00:34:17,199
that is uh implementation yes

812
00:34:17,199 --> 00:34:21,359
okay yeah thank you thank you

813
00:34:21,359 --> 00:34:24,399
and i think that's all in the most

814
00:34:24,399 --> 00:34:28,719
important topics in the slide yes

815
00:34:28,719 --> 00:34:32,839
that's great uh akira thanks

816
00:34:32,839 --> 00:34:35,839
um

817
00:34:36,719 --> 00:34:40,079
uh dave you're upset

818
00:34:40,079 --> 00:34:42,159
yeah so let let's take a pause here for

819
00:34:42,159 --> 00:34:43,119
a couple minutes

820
00:34:43,119 --> 00:34:46,480
um so there's some questions

821
00:34:46,480 --> 00:34:50,879
in the chat um with respect to

822
00:34:50,879 --> 00:34:52,719
the discussions that have just been

823
00:34:52,719 --> 00:34:54,480
happening with respect to suit

824
00:34:54,480 --> 00:34:57,599
between akira and um

825
00:34:57,599 --> 00:34:59,680
brendan but hannes also raised the

826
00:34:59,680 --> 00:35:01,599
question as to

827
00:35:01,599 --> 00:35:06,640
whether these discussion topics um

828
00:35:07,440 --> 00:35:09,040
some of those clarifications and

829
00:35:09,040 --> 00:35:10,960
descriptions whether they belong in

830
00:35:10,960 --> 00:35:14,720
teep or suit or both um

831
00:35:14,720 --> 00:35:17,280
so hannes i don't know or dave i don't

832
00:35:17,280 --> 00:35:19,040
know if you wanted to

833
00:35:19,040 --> 00:35:21,440
to more publicly express that here we've

834
00:35:21,440 --> 00:35:23,839
got a few minutes

835
00:35:23,839 --> 00:35:28,160
um okay um

836
00:35:28,160 --> 00:35:31,599
yeah so the issues uh

837
00:35:31,599 --> 00:35:35,280
104 and 105 being uh the ones that

838
00:35:35,280 --> 00:35:36,720
i think were on that last slide that

839
00:35:36,720 --> 00:35:38,640
we're just talking about i think are

840
00:35:38,640 --> 00:35:40,480
actually questions about you know how do

841
00:35:40,480 --> 00:35:40,720
i

842
00:35:40,720 --> 00:35:43,280
use the suit manifest and so those are

843
00:35:43,280 --> 00:35:45,200
ones that in the actual issues i'd

844
00:35:45,200 --> 00:35:46,640
commented saying

845
00:35:46,640 --> 00:35:49,119
i think these are just uh questions for

846
00:35:49,119 --> 00:35:49,839
suit not

847
00:35:49,839 --> 00:35:52,160
about teep and so i don't think that

848
00:35:52,160 --> 00:35:53,040
there's anything

849
00:35:53,040 --> 00:35:55,359
that i saw yet anyway that necessitated

850
00:35:55,359 --> 00:35:56,839
a change in the teep

851
00:35:56,839 --> 00:36:00,160
document and that's why the discussion

852
00:36:00,160 --> 00:36:00,960
with brendan

853
00:36:00,960 --> 00:36:02,640
as long as brendan says it's already

854
00:36:02,640 --> 00:36:04,240
covered or whatever

855
00:36:04,240 --> 00:36:07,760
then we either close them or at most

856
00:36:07,760 --> 00:36:08,880
there might be some place in the

857
00:36:08,880 --> 00:36:10,720
document we can add a deep reference

858
00:36:10,720 --> 00:36:12,000
into a particular section

859
00:36:12,000 --> 00:36:14,480
of the suit manifest spec if there's

860
00:36:14,480 --> 00:36:15,040
some place

861
00:36:15,040 --> 00:36:18,240
that would be appropriate um but i

862
00:36:18,240 --> 00:36:19,359
in other words i'm answering your

863
00:36:19,359 --> 00:36:20,480
questions saying i think there are suit

864
00:36:20,480 --> 00:36:22,079
topics but i think there's two topics

865
00:36:22,079 --> 00:36:22,400
that

866
00:36:22,400 --> 00:36:24,000
uh my understanding is brendan has

867
00:36:24,000 --> 00:36:25,599
answered them by saying you're not work

868
00:36:25,599 --> 00:36:26,320
for a suit

869
00:36:26,320 --> 00:36:27,599
there are things that suit has already

870
00:36:27,599 --> 00:36:29,119
done and it's just making sure that

871
00:36:29,119 --> 00:36:30,320
there's

872
00:36:30,320 --> 00:36:33,280
understanding and links into the correct

873
00:36:33,280 --> 00:36:34,240
sections

874
00:36:34,240 --> 00:36:37,359
if that's appropriate so

875
00:36:39,040 --> 00:36:41,359
yeah so 104 and 105 there that's what

876
00:36:41,359 --> 00:36:43,760
was on uh that last slide that we were

877
00:36:43,760 --> 00:36:44,320
uh

878
00:36:44,320 --> 00:36:46,000
talking through slide i don't know 11 or

879
00:36:46,000 --> 00:36:47,520
whatever and akira's

880
00:36:47,520 --> 00:36:50,640
uh dave um robin here just

881
00:36:50,640 --> 00:36:52,480
just for the for the notes for clarity

882
00:36:52,480 --> 00:36:53,680
um so

883
00:36:53,680 --> 00:36:56,480
do you think that these those um

884
00:36:56,480 --> 00:36:58,079
clarifications

885
00:36:58,079 --> 00:37:00,480
should be reflected in any of the teap

886
00:37:00,480 --> 00:37:02,480
documents

887
00:37:02,480 --> 00:37:06,240
um i am open to others opinion on that

888
00:37:06,240 --> 00:37:07,200
but uh

889
00:37:07,200 --> 00:37:08,960
so far i'm not sure that i've seen

890
00:37:08,960 --> 00:37:11,280
anything that needs a change to the teep

891
00:37:11,280 --> 00:37:13,440
document

892
00:37:13,440 --> 00:37:15,520
but you know akira is also an editor in

893
00:37:15,520 --> 00:37:17,440
the tea protocol document if akira says

894
00:37:17,440 --> 00:37:18,079
hey

895
00:37:18,079 --> 00:37:20,320
there's a particular place in the

896
00:37:20,320 --> 00:37:21,920
protocol document that would make sense

897
00:37:21,920 --> 00:37:23,599
to have a deep reference link to a

898
00:37:23,599 --> 00:37:24,160
specific

899
00:37:24,160 --> 00:37:26,320
section of that that would be fine but

900
00:37:26,320 --> 00:37:28,000
i'm not aware of anything right now but

901
00:37:28,000 --> 00:37:29,200
i would be open to that if somebody else

902
00:37:29,200 --> 00:37:30,400
generates a pull request

903
00:37:30,400 --> 00:37:33,520
great thank you um my thought is uh

904
00:37:33,520 --> 00:37:36,079
it i don't think it's anything related

905
00:37:36,079 --> 00:37:37,040
in

906
00:37:37,040 --> 00:37:40,160
in the tip protocol draft it's just

907
00:37:40,160 --> 00:37:43,599
uh initially the reason i opened

908
00:37:43,599 --> 00:37:46,160
a file the issue in the t protocol

909
00:37:46,160 --> 00:37:46,800
github

910
00:37:46,800 --> 00:37:50,720
is um i thought it would be a good

911
00:37:50,720 --> 00:37:53,599
way to add the suit manifest example in

912
00:37:53,599 --> 00:37:54,400
the exam

913
00:37:54,400 --> 00:37:57,839
binary representation cdo example

914
00:37:57,839 --> 00:38:00,560
section in the teeth draft um that's all

915
00:38:00,560 --> 00:38:00,960
and

916
00:38:00,960 --> 00:38:03,920
moving this closing this in the tip

917
00:38:03,920 --> 00:38:04,560
github

918
00:38:04,560 --> 00:38:08,160
and then and and moving to the suit

919
00:38:08,160 --> 00:38:13,520
github is is absolutely no problem

920
00:38:13,520 --> 00:38:15,119
yeah i think the only one of these three

921
00:38:15,119 --> 00:38:17,119
issues here that

922
00:38:17,119 --> 00:38:19,760
we that there might be able to be a deep

923
00:38:19,760 --> 00:38:21,040
reference is the bottom one

924
00:38:21,040 --> 00:38:24,240
so for example where in the

925
00:38:24,240 --> 00:38:27,040
uh query response right that's when you

926
00:38:27,040 --> 00:38:28,240
have the list of uh

927
00:38:28,240 --> 00:38:31,359
unneeded uh tas

928
00:38:31,359 --> 00:38:33,520
and then of course the actual action

929
00:38:33,520 --> 00:38:35,119
happens in the update message inside the

930
00:38:35,119 --> 00:38:36,000
suit manifest

931
00:38:36,000 --> 00:38:38,960
and then so in the field description of

932
00:38:38,960 --> 00:38:40,960
unneeded tas in the career response or

933
00:38:40,960 --> 00:38:42,880
the processing rules for that

934
00:38:42,880 --> 00:38:45,760
uh that it might be possible if it's not

935
00:38:45,760 --> 00:38:47,040
in there already to have a deep

936
00:38:47,040 --> 00:38:48,960
reference into the suit manifest spec

937
00:38:48,960 --> 00:38:50,720
section that talks about the delete or

938
00:38:50,720 --> 00:38:52,320
the unlink command whatever it gets

939
00:38:52,320 --> 00:38:53,119
called so

940
00:38:53,119 --> 00:38:55,280
so that's an example of where in 128 at

941
00:38:55,280 --> 00:38:56,880
the bottom we might have a deep

942
00:38:56,880 --> 00:38:57,440
reference

943
00:38:57,440 --> 00:38:59,920
there but for 104 and 105 i can't think

944
00:38:59,920 --> 00:39:01,680
of a case so

945
00:39:01,680 --> 00:39:04,960
that's fair um tom

946
00:39:04,960 --> 00:39:09,440
you're in the queue hi can you hear me

947
00:39:09,440 --> 00:39:12,880
yes right so um i had a couple of

948
00:39:12,880 --> 00:39:14,480
questions for here about this hackathon

949
00:39:14,480 --> 00:39:15,680
presentation

950
00:39:15,680 --> 00:39:17,520
uh but i know i don't know if it's you

951
00:39:17,520 --> 00:39:19,119
know the right time now or

952
00:39:19,119 --> 00:39:24,079
just wanted to postpone those is it okay

953
00:39:24,079 --> 00:39:25,680
now's the right time because we're ready

954
00:39:25,680 --> 00:39:28,560
to move on okay so uh this is from a

955
00:39:28,560 --> 00:39:29,119
rats

956
00:39:29,119 --> 00:39:31,280
slash implementer angle and so the

957
00:39:31,280 --> 00:39:32,640
questions are

958
00:39:32,640 --> 00:39:35,760
um are any of the implementation that

959
00:39:35,760 --> 00:39:37,760
you referenced in the in the slides open

960
00:39:37,760 --> 00:39:38,560
source

961
00:39:38,560 --> 00:39:42,000
and um and if so would it be possible to

962
00:39:42,000 --> 00:39:44,320
to have links to the source code or i

963
00:39:44,320 --> 00:39:46,079
don't know if it's in github

964
00:39:46,079 --> 00:39:49,280
or whatever and

965
00:39:49,280 --> 00:39:52,560
okay so they're all open source

966
00:39:52,560 --> 00:39:55,599
not all okay

967
00:39:55,599 --> 00:40:00,079
could you do you mind going to the first

968
00:40:00,079 --> 00:40:03,440
uh phase four

969
00:40:08,640 --> 00:40:12,560
so yes i should add the link here um

970
00:40:12,560 --> 00:40:15,040
the one only it's not open source is the

971
00:40:15,040 --> 00:40:16,079
or type device

972
00:40:16,079 --> 00:40:18,800
the third one but first one second and

973
00:40:18,800 --> 00:40:19,680
fourth and

974
00:40:19,680 --> 00:40:22,079
fifth it's uh there's a link to the

975
00:40:22,079 --> 00:40:23,280
github

976
00:40:23,280 --> 00:40:26,720
okay excellent so i go and

977
00:40:26,720 --> 00:40:29,760
see this and does does any of these

978
00:40:29,760 --> 00:40:32,160
implements the the deep evidence

979
00:40:32,160 --> 00:40:35,119
and if so which one i'm asking because i

980
00:40:35,119 --> 00:40:36,720
would like to provide a verifier for

981
00:40:36,720 --> 00:40:37,440
that

982
00:40:37,440 --> 00:40:39,440
and and would like to do some interrupt

983
00:40:39,440 --> 00:40:40,960
as well in fact it'd be

984
00:40:40,960 --> 00:40:43,520
uh it'd be super nice if we could

985
00:40:43,520 --> 00:40:44,400
organize something

986
00:40:44,400 --> 00:40:46,640
together at next sacrament around that

987
00:40:46,640 --> 00:40:48,879
um

988
00:40:49,599 --> 00:40:52,400
first one and yeah in our influence we

989
00:40:52,400 --> 00:40:53,920
haven't got to that point

990
00:40:53,920 --> 00:40:57,920
um okay is it is does it have it in your

991
00:40:57,920 --> 00:41:00,720
implementation

992
00:41:07,760 --> 00:41:11,200
mine includes the uh evidence fields but

993
00:41:11,200 --> 00:41:12,000
i have not

994
00:41:12,000 --> 00:41:15,680
implemented the eat stuff yet and so

995
00:41:15,680 --> 00:41:17,440
it's basically i have stubs that's there

996
00:41:17,440 --> 00:41:19,680
for plugging it in and so that's why

997
00:41:19,680 --> 00:41:21,839
on your slide akira you mentioned that

998
00:41:21,839 --> 00:41:22,960
uh you know

999
00:41:22,960 --> 00:41:25,280
next hackathon or whatever we want to

1000
00:41:25,280 --> 00:41:26,240
play around with

1001
00:41:26,240 --> 00:41:28,880
uh implementing and integrating the rat

1002
00:41:28,880 --> 00:41:30,000
stuff and so

1003
00:41:30,000 --> 00:41:33,359
um that's accurate for me as well uh so

1004
00:41:33,359 --> 00:41:35,119
i've done that before just because the

1005
00:41:35,119 --> 00:41:37,280
eat spec was undergoing various changes

1006
00:41:37,280 --> 00:41:38,640
in things and so that's why we're

1007
00:41:38,640 --> 00:41:39,599
concentrating on the

1008
00:41:39,599 --> 00:41:42,560
suit integration first because that was

1009
00:41:42,560 --> 00:41:44,160
the spec was more stable than the eat

1010
00:41:44,160 --> 00:41:44,960
spec so

1011
00:41:44,960 --> 00:41:48,240
it's just a sequencing okay excellent

1012
00:41:48,240 --> 00:41:50,400
good news though so i'll see you at the

1013
00:41:50,400 --> 00:41:53,280
next hackathon then

1014
00:41:53,280 --> 00:41:55,280
you can play akira maybe you can post

1015
00:41:55,280 --> 00:41:57,440
the uh github links on

1016
00:41:57,440 --> 00:42:00,800
the mailing list for developments

1017
00:42:00,800 --> 00:42:05,200
as thank you

1018
00:42:08,720 --> 00:42:11,680
excellent okay i think we can move on

1019
00:42:11,680 --> 00:42:13,919
then

1020
00:42:14,839 --> 00:42:17,440
okay

1021
00:42:17,440 --> 00:42:20,960
i saw in chat that um hana said that you

1022
00:42:20,960 --> 00:42:21,920
had uh

1023
00:42:21,920 --> 00:42:24,880
he had slides on his hackathon stuff and

1024
00:42:24,880 --> 00:42:25,200
so

1025
00:42:25,200 --> 00:42:27,920
i'm wondering if uh the chairs would

1026
00:42:27,920 --> 00:42:28,800
want to allow

1027
00:42:28,800 --> 00:42:31,280
uh hanus to come in to complete the

1028
00:42:31,280 --> 00:42:33,200
hackathon discussion

1029
00:42:33,200 --> 00:42:35,280
before me oh i didn't notice that on the

1030
00:42:35,280 --> 00:42:37,520
chat kohei also just posted the

1031
00:42:37,520 --> 00:42:40,800
github yeah so earlier hannah

1032
00:42:40,800 --> 00:42:44,079
you'd posted a url to a hackathon slides

1033
00:42:44,079 --> 00:42:45,119
from you

1034
00:42:45,119 --> 00:42:47,599
yeah um but i think it's also fine to

1035
00:42:47,599 --> 00:42:49,040
cover this during the suit

1036
00:42:49,040 --> 00:42:51,440
uh meeting if there is time because uh i

1037
00:42:51,440 --> 00:42:52,240
would like because

1038
00:42:52,240 --> 00:42:54,560
it only has an hour and he passed two

1039
00:42:54,560 --> 00:42:56,160
hours and so we actually have far more

1040
00:42:56,160 --> 00:42:57,359
time in this meeting than the suit

1041
00:42:57,359 --> 00:42:59,440
meeting i say as a suit chair oh okay

1042
00:42:59,440 --> 00:43:03,200
um yeah why not so the the only question

1043
00:43:03,200 --> 00:43:03,599
is

1044
00:43:03,599 --> 00:43:07,280
um you really

1045
00:43:07,280 --> 00:43:10,720
will okay uh so hannes

1046
00:43:10,720 --> 00:43:14,560
maybe five ten minutes at the most

1047
00:43:14,560 --> 00:43:19,119
okay but we don't have your slides

1048
00:43:19,119 --> 00:43:22,640
unless you do you you saw that i can

1049
00:43:22,640 --> 00:43:26,000
help you in this light so uh uh i think

1050
00:43:26,000 --> 00:43:27,440
hans can share the screen and present

1051
00:43:27,440 --> 00:43:28,880
the slides if it's okay with him

1052
00:43:28,880 --> 00:43:31,280
yeah of course at least the link is in

1053
00:43:31,280 --> 00:43:33,119
the chat so everybody else that's out

1054
00:43:33,119 --> 00:43:34,160
there could download the slides

1055
00:43:34,160 --> 00:43:35,119
themselves without looking at the

1056
00:43:35,119 --> 00:43:36,560
proceedings

1057
00:43:36,560 --> 00:43:38,640
well we should put it in the proceedings

1058
00:43:38,640 --> 00:43:40,640
too but i'm not seeing

1059
00:43:40,640 --> 00:43:45,359
in the chat uh

1060
00:43:45,359 --> 00:43:48,240
honest posted them you gotta scroll up

1061
00:43:48,240 --> 00:43:48,800
to

1062
00:43:48,800 --> 00:43:52,079
uh four fourteen oh four ninja

1063
00:43:52,079 --> 00:43:55,839
all right thanks

1064
00:44:02,960 --> 00:44:05,599
but i um i can just present them

1065
00:44:05,599 --> 00:44:07,200
requested

1066
00:44:07,200 --> 00:44:10,560
the presentation rights

1067
00:44:11,680 --> 00:44:16,000
yup oh but i think

1068
00:44:16,000 --> 00:44:17,680
you guys need to i'm just giving that

1069
00:44:17,680 --> 00:44:19,760
yeah it's gonna take some time but yeah

1070
00:44:19,760 --> 00:44:23,839
i've given you the permission

1071
00:44:28,160 --> 00:44:31,118
not seeing anything

1072
00:44:32,079 --> 00:44:34,319
maybe i should stop screening the screen

1073
00:44:34,319 --> 00:44:37,839
okay now check

1074
00:44:37,839 --> 00:44:40,799
let me try it again

1075
00:44:41,200 --> 00:44:42,480
yeah you're the only one with the

1076
00:44:42,480 --> 00:44:44,960
permission

1077
00:44:48,839 --> 00:44:51,200
okay

1078
00:44:51,200 --> 00:44:54,400
um and i think i should get a

1079
00:44:54,400 --> 00:44:57,520
a pop-up that says hey can i

1080
00:44:57,520 --> 00:45:01,400
yes yes you should get a pop-up

1081
00:45:01,400 --> 00:45:05,839
yeah unfortunately

1082
00:45:10,400 --> 00:45:13,520
yeah maybe you can show the slide ah

1083
00:45:13,520 --> 00:45:19,839
yes now i know it's you okay

1084
00:45:23,440 --> 00:45:27,200
i hope you can see yes okay i tried to

1085
00:45:27,200 --> 00:45:27,839
hurry up

1086
00:45:27,839 --> 00:45:32,640
uh yeah so um i was specifically

1087
00:45:32,640 --> 00:45:33,680
focusing on

1088
00:45:33,680 --> 00:45:36,640
the encryption functionality because

1089
00:45:36,640 --> 00:45:37,920
that was one topic

1090
00:45:37,920 --> 00:45:41,680
that was initially in odrb

1091
00:45:41,680 --> 00:45:44,240
um because of this personalization data

1092
00:45:44,240 --> 00:45:45,680
that was encrypted

1093
00:45:45,680 --> 00:45:47,760
and then uh in suit we also had the

1094
00:45:47,760 --> 00:45:50,160
requirement to encrypt firmware

1095
00:45:50,160 --> 00:45:53,280
uh images themselves and uh

1096
00:45:53,280 --> 00:45:55,920
the spec uh the suit spec points to

1097
00:45:55,920 --> 00:45:57,680
cause end and of course the deep spec

1098
00:45:57,680 --> 00:45:58,880
points to do

1099
00:45:58,880 --> 00:46:02,240
for that matter and uh but we don't

1100
00:46:02,240 --> 00:46:04,000
we don't have any examples in there and

1101
00:46:04,000 --> 00:46:06,400
so i wanted to as part of this exercise

1102
00:46:06,400 --> 00:46:07,520
to just create a few

1103
00:46:07,520 --> 00:46:12,839
uh real examples um and so

1104
00:46:12,839 --> 00:46:16,000
i i used um

1105
00:46:16,000 --> 00:46:18,800
lawrence's presentation uh qc board all

1106
00:46:18,800 --> 00:46:20,160
the person did all the

1107
00:46:20,160 --> 00:46:21,599
sibo implementations a little bit

1108
00:46:21,599 --> 00:46:22,960
different so it's not so easy to

1109
00:46:22,960 --> 00:46:24,640
interchange them you basically have to

1110
00:46:24,640 --> 00:46:26,319
do a rewrite

1111
00:46:26,319 --> 00:46:29,599
and also for the crypto i've um

1112
00:46:29,599 --> 00:46:32,319
used the bsa crypto api which i i linked

1113
00:46:32,319 --> 00:46:33,520
in the slide deck

1114
00:46:33,520 --> 00:46:34,960
but unfortunately it doesn't implement

1115
00:46:34,960 --> 00:46:37,520
the key wrap um which is needed

1116
00:46:37,520 --> 00:46:40,800
by the cozy spec so i had to also fold

1117
00:46:40,800 --> 00:46:43,599
in embed dls

1118
00:46:43,599 --> 00:46:46,319
so there was uh maybe more code than i

1119
00:46:46,319 --> 00:46:46,720
had

1120
00:46:46,720 --> 00:46:49,839
hoped um

1121
00:46:49,839 --> 00:46:52,880
and the my

1122
00:46:52,880 --> 00:46:54,480
and i wanted to integrate it ultimately

1123
00:46:54,480 --> 00:46:56,880
in mcu booth with the lipsu

1124
00:46:56,880 --> 00:47:00,079
lip c suit that was mentioned earlier as

1125
00:47:00,079 --> 00:47:01,599
an implementation so

1126
00:47:01,599 --> 00:47:04,319
i think the important part um what i

1127
00:47:04,319 --> 00:47:06,000
learned from doing this besides getting

1128
00:47:06,000 --> 00:47:06,720
examples

1129
00:47:06,720 --> 00:47:09,839
is is that i believe the

1130
00:47:09,839 --> 00:47:12,960
suit manifest specification um

1131
00:47:12,960 --> 00:47:15,280
needs some extra details to make it

1132
00:47:15,280 --> 00:47:16,960
easier for developers

1133
00:47:16,960 --> 00:47:19,760
and also to restrict the number of

1134
00:47:19,760 --> 00:47:21,119
options

1135
00:47:21,119 --> 00:47:23,280
because we have paid a lot of attention

1136
00:47:23,280 --> 00:47:26,160
to keep the manifest size very small

1137
00:47:26,160 --> 00:47:30,160
but by just referencing a cozy spec

1138
00:47:30,160 --> 00:47:34,640
for this functionality you basically

1139
00:47:34,640 --> 00:47:38,240
blow out all the benefits of this

1140
00:47:38,240 --> 00:47:40,480
optimization out of the window

1141
00:47:40,480 --> 00:47:42,800
because the cosy spec has so many

1142
00:47:42,800 --> 00:47:44,960
options it's unbelievable

1143
00:47:44,960 --> 00:47:48,480
um and some of them

1144
00:47:48,480 --> 00:47:50,880
in my opinion don't make a lot of sense

1145
00:47:50,880 --> 00:47:52,720
for our use cases and

1146
00:47:52,720 --> 00:47:55,280
maybe there's in the future there's

1147
00:47:55,280 --> 00:47:57,839
other kind of profiles um for other use

1148
00:47:57,839 --> 00:48:00,079
cases that we haven't envisioned

1149
00:48:00,079 --> 00:48:03,680
um so i focused on two features

1150
00:48:03,680 --> 00:48:07,839
uh one was a classical uh

1151
00:48:07,839 --> 00:48:11,280
aes uh key wrap with a symmetric key

1152
00:48:11,280 --> 00:48:13,760
so what it uh essentially does is and i

1153
00:48:13,760 --> 00:48:15,520
i should have included uh

1154
00:48:15,520 --> 00:48:17,760
example keyboard diagnostic format in

1155
00:48:17,760 --> 00:48:19,200
into the slide deck as well

1156
00:48:19,200 --> 00:48:22,480
but i will post it to the mailing list

1157
00:48:22,480 --> 00:48:25,280
what it does is it create a content

1158
00:48:25,280 --> 00:48:26,400
encryption key

1159
00:48:26,400 --> 00:48:29,359
a random content encryption key and

1160
00:48:29,359 --> 00:48:30,319
includes this

1161
00:48:30,319 --> 00:48:34,319
content encryption key with um with the

1162
00:48:34,319 --> 00:48:36,640
long-term symmetric key

1163
00:48:36,640 --> 00:48:41,359
that is available and um

1164
00:48:41,359 --> 00:48:45,359
and then the spec the suit spec

1165
00:48:45,359 --> 00:48:48,880
uses it in a in a detached mode or the

1166
00:48:48,880 --> 00:48:50,640
encrypted firmware is not included in

1167
00:48:50,640 --> 00:48:52,559
the cosi

1168
00:48:52,559 --> 00:48:55,920
uh in the in the cosy structure

1169
00:48:55,920 --> 00:48:58,480
so it's separate um so i think that's

1170
00:48:58,480 --> 00:48:59,599
also

1171
00:48:59,599 --> 00:49:02,800
one aspect and yeah so that was um for

1172
00:49:02,800 --> 00:49:03,680
the

1173
00:49:03,680 --> 00:49:05,920
for the key rap and and the example is

1174
00:49:05,920 --> 00:49:08,160
uh can be then quite uh

1175
00:49:08,160 --> 00:49:11,200
sort of simple or small

1176
00:49:11,200 --> 00:49:12,240
and then the other the other

1177
00:49:12,240 --> 00:49:13,920
functionality i implemented which is a

1178
00:49:13,920 --> 00:49:15,440
little bit more complicated but it's

1179
00:49:15,440 --> 00:49:18,079
essentially the public key based version

1180
00:49:18,079 --> 00:49:20,720
um that and there are also many options

1181
00:49:20,720 --> 00:49:22,400
in the cosy spec

1182
00:49:22,400 --> 00:49:24,800
and the one that i picked after looking

1183
00:49:24,800 --> 00:49:26,240
into

1184
00:49:26,240 --> 00:49:29,280
into the mcu boot was um

1185
00:49:29,280 --> 00:49:34,640
i used um the elliptic curve tv hellman

1186
00:49:34,640 --> 00:49:37,920
ephemeral static mode with the hkdf

1187
00:49:37,920 --> 00:49:42,240
which also used the aes keywrap

1188
00:49:42,240 --> 00:49:46,079
and and so in in essence um

1189
00:49:46,079 --> 00:49:48,640
the entity that creates the firmware

1190
00:49:48,640 --> 00:49:49,200
image

1191
00:49:49,200 --> 00:49:52,480
again in a detached um sort of as a

1192
00:49:52,480 --> 00:49:53,359
standalone

1193
00:49:53,359 --> 00:49:56,800
then creates the manifest uh which then

1194
00:49:56,800 --> 00:49:59,920
uh where the this party then creates an

1195
00:49:59,920 --> 00:50:00,720
ephemeral

1196
00:50:00,720 --> 00:50:03,280
keypair and it includes the public key

1197
00:50:03,280 --> 00:50:05,040
into the manifest

1198
00:50:05,040 --> 00:50:08,480
and then uses them akita the hkdf

1199
00:50:08,480 --> 00:50:12,079
key derivation function to derive

1200
00:50:12,240 --> 00:50:13,680
the key that is used to encrypt the

1201
00:50:13,680 --> 00:50:15,599
content encryption key like we had

1202
00:50:15,599 --> 00:50:16,800
before and that is the

1203
00:50:16,800 --> 00:50:18,160
that is then used to encrypt the

1204
00:50:18,160 --> 00:50:20,800
firmware image in detached mode

1205
00:50:20,800 --> 00:50:23,119
so it's a little bit convoluted um but

1206
00:50:23,119 --> 00:50:25,280
but i think with the

1207
00:50:25,280 --> 00:50:28,160
um this is the description with the

1208
00:50:28,160 --> 00:50:29,200
added description

1209
00:50:29,200 --> 00:50:31,760
and i'm going to prepare br on how that

1210
00:50:31,760 --> 00:50:33,839
text would look like

1211
00:50:33,839 --> 00:50:37,280
for the meeting for the student meeting

1212
00:50:37,280 --> 00:50:40,400
so i think that will help to make it

1213
00:50:40,400 --> 00:50:42,480
um to have the examples in there and

1214
00:50:42,480 --> 00:50:44,400
have the text in there so that the

1215
00:50:44,400 --> 00:50:46,960
implementers get those two modes right

1216
00:50:46,960 --> 00:50:50,400
and if someone wants some other modes um

1217
00:50:50,400 --> 00:50:52,839
of course uh feel free to suggest some

1218
00:50:52,839 --> 00:50:54,640
others

1219
00:50:54,640 --> 00:50:58,319
um and uh yeah i would

1220
00:50:58,319 --> 00:51:01,040
i would also like to thank uh russ um

1221
00:51:01,040 --> 00:51:02,319
who helped me with some of the

1222
00:51:02,319 --> 00:51:05,520
with the key rap stuff uh

1223
00:51:05,520 --> 00:51:08,800
um and then i had a chat with ken about

1224
00:51:08,800 --> 00:51:09,520
his uh

1225
00:51:09,520 --> 00:51:11,520
lip suit and and brandon on the cozy

1226
00:51:11,520 --> 00:51:13,839
stuff um i totally forgot again that we

1227
00:51:13,839 --> 00:51:14,800
use the

1228
00:51:14,800 --> 00:51:17,920
e-dutch mode and i reached out to the

1229
00:51:17,920 --> 00:51:20,720
mcu boot guys about their capabilities

1230
00:51:20,720 --> 00:51:23,599
there because ultimately i wanted to

1231
00:51:23,599 --> 00:51:26,000
in in this case i wanted to add the suit

1232
00:51:26,000 --> 00:51:28,000
to the mcu boot

1233
00:51:28,000 --> 00:51:30,160
um to have sort of equivalent

1234
00:51:30,160 --> 00:51:31,920
functionality

1235
00:51:31,920 --> 00:51:34,800
just um which allowed me to constrain

1236
00:51:34,800 --> 00:51:36,000
constrained

1237
00:51:36,000 --> 00:51:37,760
the number of options to something that

1238
00:51:37,760 --> 00:51:39,280
is uh

1239
00:51:39,280 --> 00:51:43,040
usable also in the mcu boot case

1240
00:51:43,040 --> 00:51:45,359
that's all i have i will send examples

1241
00:51:45,359 --> 00:51:47,920
to the list

1242
00:51:48,480 --> 00:51:52,079
sounds great um dave you're in the queue

1243
00:51:52,079 --> 00:51:54,000
i asked since honest on slide four you

1244
00:51:54,000 --> 00:51:55,440
mentioned that you think clarifications

1245
00:51:55,440 --> 00:51:57,520
are needed to the suit manifest document

1246
00:51:57,520 --> 00:51:59,520
i just want to explicitly ask are there

1247
00:51:59,520 --> 00:52:00,640
anything that you think that should

1248
00:52:00,640 --> 00:52:02,480
change in any of this in any of the teep

1249
00:52:02,480 --> 00:52:04,079
documents obviously this use case is

1250
00:52:04,079 --> 00:52:05,520
important because we talk about the

1251
00:52:05,520 --> 00:52:07,040
requirements in this use case

1252
00:52:07,040 --> 00:52:10,400
in the architecture document right now

1253
00:52:10,400 --> 00:52:11,839
but is there anything that you think

1254
00:52:11,839 --> 00:52:13,760
would need to be added into

1255
00:52:13,760 --> 00:52:15,520
whether it's an example or anything else

1256
00:52:15,520 --> 00:52:17,280
in the teat documents or do you think

1257
00:52:17,280 --> 00:52:19,599
that it would only be in suit documents

1258
00:52:19,599 --> 00:52:21,359
as far as any text changes you think

1259
00:52:21,359 --> 00:52:22,960
might come in from your stuff so

1260
00:52:22,960 --> 00:52:25,520
yeah so previously there was this um a

1261
00:52:25,520 --> 00:52:27,280
comment about adding examples

1262
00:52:27,280 --> 00:52:30,319
also to the deep document and

1263
00:52:30,319 --> 00:52:32,319
i guess if we add an example sort of a

1264
00:52:32,319 --> 00:52:34,240
more complete example with the

1265
00:52:34,240 --> 00:52:36,720
suit manifest in there i think it makes

1266
00:52:36,720 --> 00:52:38,079
also sense to

1267
00:52:38,079 --> 00:52:42,160
maybe include one that also um

1268
00:52:42,160 --> 00:52:44,480
the encryption capability since it was

1269
00:52:44,480 --> 00:52:45,359
in otrb

1270
00:52:45,359 --> 00:52:48,400
i think that would make sense okay

1271
00:52:48,400 --> 00:52:51,599
um got it all right so thank you because

1272
00:52:51,599 --> 00:52:53,520
as i'll i don't remember if i mentioned

1273
00:52:53,520 --> 00:52:55,280
this in the next presentation or not but

1274
00:52:55,280 --> 00:52:55,760
the

1275
00:52:55,760 --> 00:52:58,720
the the t protocol document now does

1276
00:52:58,720 --> 00:52:59,119
have

1277
00:52:59,119 --> 00:53:01,920
in the appendix a minimal suit manifest

1278
00:53:01,920 --> 00:53:03,359
in the example

1279
00:53:03,359 --> 00:53:05,680
um and so it could be augmented there so

1280
00:53:05,680 --> 00:53:08,000
all right gotcha thank you

1281
00:53:08,000 --> 00:53:12,000
okay thanks guys

1282
00:53:12,000 --> 00:53:16,319
and hannes i'll upload your uh slides

1283
00:53:16,319 --> 00:53:20,640
to the teeth materials too

1284
00:53:22,160 --> 00:53:24,800
okay i know i think i'm up next right

1285
00:53:24,800 --> 00:53:26,559
there's one comment uh

1286
00:53:26,559 --> 00:53:31,280
on the static dp helmet uh yeah um

1287
00:53:31,280 --> 00:53:33,359
yeah i saw that too and that's why i was

1288
00:53:33,359 --> 00:53:34,640
confused about what

1289
00:53:34,640 --> 00:53:38,000
uh that dls presentation really did um

1290
00:53:38,000 --> 00:53:40,319
but it that presentation if i really

1291
00:53:40,319 --> 00:53:41,599
understood it correctly was

1292
00:53:41,599 --> 00:53:45,920
more concerned about specific uses

1293
00:53:45,920 --> 00:53:49,520
of the cypher suite um and not so much

1294
00:53:49,520 --> 00:53:53,440
about these one-shot messages

1295
00:53:53,440 --> 00:53:55,359
because there is there is no possibility

1296
00:53:55,359 --> 00:53:57,040
to do a

1297
00:53:57,040 --> 00:54:02,000
um like uh the key encryption

1298
00:54:02,000 --> 00:54:04,720
without actually having one party a

1299
00:54:04,720 --> 00:54:06,720
one-shot key encryption with uh

1300
00:54:06,720 --> 00:54:10,319
elliptic tiffy helmet without

1301
00:54:10,319 --> 00:54:12,079
without a static component in the app

1302
00:54:12,079 --> 00:54:14,319
right

1303
00:54:17,920 --> 00:54:25,839
i hope that makes sense

1304
00:54:33,520 --> 00:54:37,599
okay all right so i think yep

1305
00:54:37,599 --> 00:54:39,280
all right so i'll talk about the changes

1306
00:54:39,280 --> 00:54:41,119
since 009 this is the actual protocol

1307
00:54:41,119 --> 00:54:42,640
spec and so this will be probably the

1308
00:54:42,640 --> 00:54:44,000
rest of the meeting

1309
00:54:44,000 --> 00:54:47,359
or until church call time so um

1310
00:54:47,359 --> 00:54:48,880
all right there are things that we

1311
00:54:48,880 --> 00:54:50,480
discussed at 109

1312
00:54:50,480 --> 00:54:52,960
um and so a bunch of the changes were

1313
00:54:52,960 --> 00:54:54,799
things we discussed at 109. so

1314
00:54:54,799 --> 00:54:56,160
here's the list of things we discussed

1315
00:54:56,160 --> 00:54:59,119
109 that are now done in the specs so

1316
00:54:59,119 --> 00:55:00,960
we combined the install and delete

1317
00:55:00,960 --> 00:55:03,359
message into one common update message

1318
00:55:03,359 --> 00:55:05,359
so you can do both installs and deletes

1319
00:55:05,359 --> 00:55:06,720
in the same message

1320
00:55:06,720 --> 00:55:10,240
uh even in the same suit manifest

1321
00:55:10,240 --> 00:55:13,839
that we made the token be absent when

1322
00:55:13,839 --> 00:55:15,680
it's redundant so for example if you're

1323
00:55:15,680 --> 00:55:17,200
using attestation

1324
00:55:17,200 --> 00:55:20,079
and you uh are getting all of the uh

1325
00:55:20,079 --> 00:55:22,079
matching and you know nonsense stuff and

1326
00:55:22,079 --> 00:55:23,440
the evidence then you don't need it

1327
00:55:23,440 --> 00:55:25,280
outside the evidence in the

1328
00:55:25,280 --> 00:55:27,359
response so now the token is only

1329
00:55:27,359 --> 00:55:28,880
present when it's not already

1330
00:55:28,880 --> 00:55:32,160
uh redundant with something else

1331
00:55:32,160 --> 00:55:35,760
um the cipher suites we talked about are

1332
00:55:35,760 --> 00:55:36,319
now

1333
00:55:36,319 --> 00:55:38,160
both of them are mandatory to implement

1334
00:55:38,160 --> 00:55:39,440
on the tam and both

1335
00:55:39,440 --> 00:55:42,640
are optional on the agent and

1336
00:55:42,640 --> 00:55:44,720
we use the suit component identifier as

1337
00:55:44,720 --> 00:55:46,480
the trusted component id so all those

1338
00:55:46,480 --> 00:55:46,880
things

1339
00:55:46,880 --> 00:55:49,680
are things that we resolve at 109 in the

1340
00:55:49,680 --> 00:55:50,559
meeting discussion

1341
00:55:50,559 --> 00:55:52,079
people can go back to the minutes and

1342
00:55:52,079 --> 00:55:53,839
recordings and stuff there but those are

1343
00:55:53,839 --> 00:55:54,160
all

1344
00:55:54,160 --> 00:55:57,119
accomplished as we discussed them we

1345
00:55:57,119 --> 00:55:58,559
then discussed something

1346
00:55:58,559 --> 00:56:00,880
that was kind of open going into 109

1347
00:56:00,880 --> 00:56:02,000
which was

1348
00:56:02,000 --> 00:56:03,760
it's been a cure referred to which is

1349
00:56:03,760 --> 00:56:05,280
the suit manifest it's now used to

1350
00:56:05,280 --> 00:56:07,119
delete components and so that's what

1351
00:56:07,119 --> 00:56:10,000
akira was mentioning that we removed the

1352
00:56:10,000 --> 00:56:12,240
ability in the update message to

1353
00:56:12,240 --> 00:56:14,400
explicitly specify component ids to

1354
00:56:14,400 --> 00:56:15,839
delete because that's now inside the

1355
00:56:15,839 --> 00:56:18,160
suit manifest so that was also done

1356
00:56:18,160 --> 00:56:23,359
in uh this draft so next slide

1357
00:56:25,119 --> 00:56:26,480
all right and then some things that

1358
00:56:26,480 --> 00:56:28,480
we'll talk about in later slides here

1359
00:56:28,480 --> 00:56:30,079
one two and three that i'll drill down

1360
00:56:30,079 --> 00:56:32,559
into uh but four five and six i'll just

1361
00:56:32,559 --> 00:56:33,920
cover here so

1362
00:56:33,920 --> 00:56:38,000
um akira proposed and we accepted

1363
00:56:38,000 --> 00:56:40,480
um adding maximum sizes to various

1364
00:56:40,480 --> 00:56:42,720
integer fields to make it easier for

1365
00:56:42,720 --> 00:56:44,559
uh constrained implementations to know

1366
00:56:44,559 --> 00:56:46,079
how big of a of a

1367
00:56:46,079 --> 00:56:49,119
buffer to use or to to have for

1368
00:56:49,119 --> 00:56:52,240
say integer fields and things uh integer

1369
00:56:52,240 --> 00:56:53,839
fields and even you know token and so on

1370
00:56:53,839 --> 00:56:56,960
have a maximum size there

1371
00:56:57,040 --> 00:56:59,200
prior to this version of the spec a

1372
00:56:59,200 --> 00:57:00,960
bunch of the things were showed up in

1373
00:57:00,960 --> 00:57:01,839
messages

1374
00:57:01,839 --> 00:57:03,839
but did not have any specific text that

1375
00:57:03,839 --> 00:57:05,599
said what the processing rules those

1376
00:57:05,599 --> 00:57:06,160
messages

1377
00:57:06,160 --> 00:57:07,839
are and that's not explicit in there you

1378
00:57:07,839 --> 00:57:09,599
can kind of read into it from the

1379
00:57:09,599 --> 00:57:11,680
from the syntax before but now it's

1380
00:57:11,680 --> 00:57:13,520
explicit that we now have a place to do

1381
00:57:13,520 --> 00:57:14,640
that and we filled in a bunch of that

1382
00:57:14,640 --> 00:57:15,520
information

1383
00:57:15,520 --> 00:57:16,799
and then a bunch of editorial

1384
00:57:16,799 --> 00:57:18,960
clarifications that are worth presenting

1385
00:57:18,960 --> 00:57:20,400
because they're all editorial

1386
00:57:20,400 --> 00:57:22,480
uh but the top three are ones that we

1387
00:57:22,480 --> 00:57:24,400
need to discuss and so i got slides on

1388
00:57:24,400 --> 00:57:25,760
those three so let's talk about talk to

1389
00:57:25,760 --> 00:57:29,599
those one at a time first so next slide

1390
00:57:29,599 --> 00:57:32,880
okay so the issue number 49

1391
00:57:32,880 --> 00:57:35,040
was you know the architecture document

1392
00:57:35,040 --> 00:57:36,079
says that

1393
00:57:36,079 --> 00:57:38,799
in for the tpu's cases that the evidence

1394
00:57:38,799 --> 00:57:39,599
has to have

1395
00:57:39,599 --> 00:57:40,960
at least a bunch of the following

1396
00:57:40,960 --> 00:57:42,559
information in it or at least capable of

1397
00:57:42,559 --> 00:57:44,319
having the following information in it

1398
00:57:44,319 --> 00:57:45,760
it's up to the implementation whether it

1399
00:57:45,760 --> 00:57:47,760
actually has a specific piece but

1400
00:57:47,760 --> 00:57:50,319
across the use cases this is the set of

1401
00:57:50,319 --> 00:57:52,319
things that uh are needed for the union

1402
00:57:52,319 --> 00:57:54,720
of them or the they

1403
00:57:54,720 --> 00:57:56,480
and so that's the list on the left side

1404
00:57:56,480 --> 00:57:58,640
which is the items listed in the teep

1405
00:57:58,640 --> 00:58:00,400
architecture document

1406
00:58:00,400 --> 00:58:01,760
which of course has been through last

1407
00:58:01,760 --> 00:58:03,440
call so we already have consensus

1408
00:58:03,440 --> 00:58:06,480
on the leftmost column

1409
00:58:06,480 --> 00:58:09,520
uh the right most column you can see the

1410
00:58:09,520 --> 00:58:10,720
ones that

1411
00:58:10,720 --> 00:58:13,760
mentioned draft ietf rs eat are the ones

1412
00:58:13,760 --> 00:58:14,480
that uh

1413
00:58:14,480 --> 00:58:16,400
we agreed are already covered in the

1414
00:58:16,400 --> 00:58:18,960
existing eats eat specification

1415
00:58:18,960 --> 00:58:21,200
uh the the first two that have eat in

1416
00:58:21,200 --> 00:58:22,240
them are kind of interesting because

1417
00:58:22,240 --> 00:58:23,520
there's two of the type requirements

1418
00:58:23,520 --> 00:58:24,880
that are actually in the same plane

1419
00:58:24,880 --> 00:58:25,599
right the chip

1420
00:58:25,599 --> 00:58:28,079
version and scheme has multiple things

1421
00:58:28,079 --> 00:58:28,880
in it that i've

1422
00:58:28,880 --> 00:58:30,400
are like hyphen separated or something

1423
00:58:30,400 --> 00:58:32,160
like that so that one needs both

1424
00:58:32,160 --> 00:58:34,240
required that meet both requirements

1425
00:58:34,240 --> 00:58:36,400
but then all the other ones besides the

1426
00:58:36,400 --> 00:58:38,880
three that say draft itf rats eat

1427
00:58:38,880 --> 00:58:41,040
were not met in the eat document and so

1428
00:58:41,040 --> 00:58:43,680
this is a discussion we had last iatf

1429
00:58:43,680 --> 00:58:47,119
um i think in like rat's discussion um

1430
00:58:47,119 --> 00:58:50,160
where hank and we had a email discussion

1431
00:58:50,160 --> 00:58:52,000
right before last iatf that we discussed

1432
00:58:52,000 --> 00:58:52,319
at

1433
00:58:52,319 --> 00:58:53,520
ietf but i don't think it was in the

1434
00:58:53,520 --> 00:58:54,799
team meetings that's why i'm reporting

1435
00:58:54,799 --> 00:58:55,920
stuff out here

1436
00:58:55,920 --> 00:58:58,240
so after last iatf hank then went and

1437
00:58:58,240 --> 00:58:59,680
wrote a document

1438
00:58:59,680 --> 00:59:01,920
that uh actually did what was discussed

1439
00:59:01,920 --> 00:59:02,880
on that cross

1440
00:59:02,880 --> 00:59:05,760
rat slash e sorry grab slash cheap

1441
00:59:05,760 --> 00:59:07,440
milling uh list discussion

1442
00:59:07,440 --> 00:59:09,359
and that's draft burkhall's rats suit

1443
00:59:09,359 --> 00:59:10,960
claims which was

1444
00:59:10,960 --> 00:59:13,680
uh also presented briefly in the rats

1445
00:59:13,680 --> 00:59:16,000
working group yesterday

1446
00:59:16,000 --> 00:59:18,160
and so the claims there in the middle

1447
00:59:18,160 --> 00:59:19,599
are the ones that show up

1448
00:59:19,599 --> 00:59:22,720
in the draft berkeley rats suit claims

1449
00:59:22,720 --> 00:59:24,079
in those sections

1450
00:59:24,079 --> 00:59:25,440
that were added to meet the teep

1451
00:59:25,440 --> 00:59:27,200
requirements in a way that is actually

1452
00:59:27,200 --> 00:59:27,599
not

1453
00:59:27,599 --> 00:59:29,200
team specific so you can see that's a

1454
00:59:29,200 --> 00:59:30,640
rat's document

1455
00:59:30,640 --> 00:59:32,400
because the conclusion of that thread

1456
00:59:32,400 --> 00:59:33,920
and the discussion since then

1457
00:59:33,920 --> 00:59:36,240
is that everything that teep wants here

1458
00:59:36,240 --> 00:59:38,720
all those requirements on the left side

1459
00:59:38,720 --> 00:59:40,640
are things that can be done in ways that

1460
00:59:40,640 --> 00:59:41,839
are not teach specific

1461
00:59:41,839 --> 00:59:43,119
and so that's why there's actually no

1462
00:59:43,119 --> 00:59:45,520
teep document here but what we did

1463
00:59:45,520 --> 00:59:47,520
in the t protocol document was we added

1464
00:59:47,520 --> 00:59:49,040
basically this table

1465
00:59:49,040 --> 00:59:51,359
that says here's the requirements here

1466
00:59:51,359 --> 00:59:53,280
is the various claims and here is the

1467
00:59:53,280 --> 00:59:54,240
document that

1468
00:59:54,240 --> 00:59:56,240
you can find them in so if you look in

1469
00:59:56,240 --> 00:59:58,079
the teat protocol spec you can see

1470
00:59:58,079 --> 01:00:00,160
how to meet the requirements in the tea

1471
01:00:00,160 --> 01:00:01,280
architecture

1472
01:00:01,280 --> 01:00:04,720
by reference to the two rats documents

1473
01:00:04,720 --> 01:00:06,559
and so in rats yesterday there was a

1474
01:00:06,559 --> 01:00:08,079
discussion about whether the burke

1475
01:00:08,079 --> 01:00:09,680
hall's document should be combined

1476
01:00:09,680 --> 01:00:13,040
into the eat document or what and i

1477
01:00:13,040 --> 01:00:14,480
think eat is on

1478
01:00:14,480 --> 01:00:17,200
the agenda for rats uh in the meeting

1479
01:00:17,200 --> 01:00:18,720
slot later today

1480
01:00:18,720 --> 01:00:20,799
uh but the point is we added this table

1481
01:00:20,799 --> 01:00:21,920
into here and we'll update the

1482
01:00:21,920 --> 01:00:23,680
references as the references

1483
01:00:23,680 --> 01:00:26,160
uh need to be updated but we believe the

1484
01:00:26,160 --> 01:00:28,720
list of claims is now there

1485
01:00:28,720 --> 01:00:31,839
all requirements now appear to be met um

1486
01:00:31,839 --> 01:00:33,280
and of course since there's a normative

1487
01:00:33,280 --> 01:00:34,480
dependence well there's a normative

1488
01:00:34,480 --> 01:00:35,280
dependency

1489
01:00:35,280 --> 01:00:36,799
that's actually incorrect i look back at

1490
01:00:36,799 --> 01:00:38,960
the document it's informative

1491
01:00:38,960 --> 01:00:42,160
um actually it could go either way

1492
01:00:42,160 --> 01:00:44,480
so let me just leave that open right now

1493
01:00:44,480 --> 01:00:45,760
um

1494
01:00:45,760 --> 01:00:48,400
uh so i don't know if unless there's any

1495
01:00:48,400 --> 01:00:49,520
questions i don't think there's anything

1496
01:00:49,520 --> 01:00:50,960
else here to talk about because we'll

1497
01:00:50,960 --> 01:00:52,720
just track the the issue for

1498
01:00:52,720 --> 01:00:55,599
uh the rats document is the draft burp

1499
01:00:55,599 --> 01:00:57,280
does not actually have the

1500
01:00:57,280 --> 01:00:59,599
labels and so it's actually not

1501
01:00:59,599 --> 01:01:00,880
implemented yet

1502
01:01:00,880 --> 01:01:02,319
uh because you can't have you know

1503
01:01:02,319 --> 01:01:04,000
what's this what's the seaborn numbers

1504
01:01:04,000 --> 01:01:04,640
to use

1505
01:01:04,640 --> 01:01:07,119
to for those claim things so the table

1506
01:01:07,119 --> 01:01:08,319
is in there but you can't actually

1507
01:01:08,319 --> 01:01:09,920
implement it yet and we would like to be

1508
01:01:09,920 --> 01:01:12,400
able to get to that before next ietf

1509
01:01:12,400 --> 01:01:14,000
and so to answer the question that was

1510
01:01:14,000 --> 01:01:15,440
asked early in this meeting

1511
01:01:15,440 --> 01:01:17,119
where any of the uh hackathon

1512
01:01:17,119 --> 01:01:18,480
implementations doing each

1513
01:01:18,480 --> 01:01:20,559
answer no and this is one of the reason

1514
01:01:20,559 --> 01:01:22,160
why is we need those numbers that are in

1515
01:01:22,160 --> 01:01:23,599
the draft bar calls one before you can

1516
01:01:23,599 --> 01:01:24,880
actually do an implementation

1517
01:01:24,880 --> 01:01:26,799
so that that's why it's pushed the next

1518
01:01:26,799 --> 01:01:28,079
ipf

1519
01:01:28,079 --> 01:01:29,599
um all right unless there's any other

1520
01:01:29,599 --> 01:01:31,200
questions i don't know if there's

1521
01:01:31,200 --> 01:01:32,400
anything in the chat no all right let's

1522
01:01:32,400 --> 01:01:34,160
go to the next slide then

1523
01:01:34,160 --> 01:01:35,440
but feel free to jump in the queue if

1524
01:01:35,440 --> 01:01:36,559
you have questions about rats

1525
01:01:36,559 --> 01:01:38,480
interaction okay here's the example

1526
01:01:38,480 --> 01:01:43,359
uh oh yeah this is i think

1527
01:01:43,839 --> 01:01:47,119
all right go ahead thomas i sorry um

1528
01:01:47,119 --> 01:01:50,799
uh my my audio

1529
01:01:50,799 --> 01:01:52,880
at the critical moment i'm i'm not sure

1530
01:01:52,880 --> 01:01:54,319
you said whether

1531
01:01:54,319 --> 01:01:58,000
the hardware identifiers claim

1532
01:01:58,000 --> 01:02:02,240
uh need pre-registration or not

1533
01:02:02,240 --> 01:02:04,079
that i believe is a question for the

1534
01:02:04,079 --> 01:02:05,839
rats working group rather than the cheap

1535
01:02:05,839 --> 01:02:06,559
working group

1536
01:02:06,559 --> 01:02:09,920
and so um i think we will uh

1537
01:02:09,920 --> 01:02:13,119
use whatever rats does um

1538
01:02:13,119 --> 01:02:15,280
i don't know if there is i don't i'm not

1539
01:02:15,280 --> 01:02:17,119
aware of any requirement that we have in

1540
01:02:17,119 --> 01:02:19,440
either direction from teep

1541
01:02:19,440 --> 01:02:22,079
okay okay so it's not critical for you

1542
01:02:22,079 --> 01:02:23,760
to have pre-registered

1543
01:02:23,760 --> 01:02:25,440
uh clients i think it's critical that we

1544
01:02:25,440 --> 01:02:27,520
have a way to meet our use case and

1545
01:02:27,520 --> 01:02:30,960
exactly how i think at least

1546
01:02:30,960 --> 01:02:32,480
right now my opinion is we leave that up

1547
01:02:32,480 --> 01:02:34,160
to the rats working group

1548
01:02:34,160 --> 01:02:37,119
okay cool requirements right in the

1549
01:02:37,119 --> 01:02:38,160
architecture document and the

1550
01:02:38,160 --> 01:02:39,839
architecture document you can read it

1551
01:02:39,839 --> 01:02:41,440
as not having any requirement in that

1552
01:02:41,440 --> 01:02:42,480
respect and so that's why i'm just

1553
01:02:42,480 --> 01:02:43,200
echoing out

1554
01:02:43,200 --> 01:02:45,440
so far our consensus we've not had any

1555
01:02:45,440 --> 01:02:46,880
consensus that there is any requirement

1556
01:02:46,880 --> 01:02:47,520
there so

1557
01:02:47,520 --> 01:02:49,520
i need the directions though right

1558
01:02:49,520 --> 01:02:50,559
thanks

1559
01:02:50,559 --> 01:02:54,480
okay all right so uh next slide

1560
01:02:54,480 --> 01:02:56,640
um so 67 is closely related still

1561
01:02:56,640 --> 01:02:58,799
related to

1562
01:02:58,799 --> 01:03:01,680
rats here this one was could we add a

1563
01:03:01,680 --> 01:03:02,640
sample eat

1564
01:03:02,640 --> 01:03:04,319
into the document because we talked

1565
01:03:04,319 --> 01:03:06,079
about sample messages and it says well

1566
01:03:06,079 --> 01:03:07,440
it carries

1567
01:03:07,440 --> 01:03:09,760
but of course it's the content is elided

1568
01:03:09,760 --> 01:03:11,520
so can we fill in the content as an

1569
01:03:11,520 --> 01:03:12,720
example right and

1570
01:03:12,720 --> 01:03:14,880
this is the appendix for examples so we

1571
01:03:14,880 --> 01:03:15,920
did that

1572
01:03:15,920 --> 01:03:18,880
and so this is a sample eat that uh

1573
01:03:18,880 --> 01:03:20,559
actually appears in the appendix right

1574
01:03:20,559 --> 01:03:22,240
now and you can see the tbd's in there

1575
01:03:22,240 --> 01:03:23,039
which is how

1576
01:03:23,039 --> 01:03:24,880
they're labeled in the draft perk holes

1577
01:03:24,880 --> 01:03:26,880
document and so that's why you can't

1578
01:03:26,880 --> 01:03:28,400
implement it yet because you can't

1579
01:03:28,400 --> 01:03:31,039
implement the bottom half of this

1580
01:03:31,039 --> 01:03:33,599
and so this is a complete this is a

1581
01:03:33,599 --> 01:03:35,039
made-up example

1582
01:03:35,039 --> 01:03:37,599
um that doesn't match to any real tees

1583
01:03:37,599 --> 01:03:39,039
that's why you can see the chip version

1584
01:03:39,039 --> 01:03:41,440
scheme is my tee

1585
01:03:41,440 --> 01:03:43,920
just you can fill in a a dummy good for

1586
01:03:43,920 --> 01:03:45,359
a device and vendor

1587
01:03:45,359 --> 01:03:47,440
and class and so on so this is not a

1588
01:03:47,440 --> 01:03:48,559
realistic one this is just a

1589
01:03:48,559 --> 01:03:50,640
hypothetical one with a uh

1590
01:03:50,640 --> 01:03:54,000
with a uh made up te just a hat show how

1591
01:03:54,000 --> 01:03:55,680
the claims can actually fit in

1592
01:03:55,680 --> 01:03:59,760
and and work together so um

1593
01:03:59,760 --> 01:04:01,920
if we after implementation then we might

1594
01:04:01,920 --> 01:04:03,119
update this example

1595
01:04:03,119 --> 01:04:04,799
we could maybe have a real one if we

1596
01:04:04,799 --> 01:04:06,240
wanted to uh

1597
01:04:06,240 --> 01:04:08,000
but uh right now we just want to show

1598
01:04:08,000 --> 01:04:09,599
that all the claims are met and how it

1599
01:04:09,599 --> 01:04:11,200
fits into the team message so that was

1600
01:04:11,200 --> 01:04:13,920
issue 67 which is resolved

1601
01:04:13,920 --> 01:04:17,200
other than filling in the tbds so

1602
01:04:17,200 --> 01:04:19,119
which we depend on rats for and again

1603
01:04:19,119 --> 01:04:21,039
all those tvs are the ones that would be

1604
01:04:21,039 --> 01:04:22,480
out of the draft burke hall's document

1605
01:04:22,480 --> 01:04:23,440
currently

1606
01:04:23,440 --> 01:04:26,000
if they got merged into eat that's fine

1607
01:04:26,000 --> 01:04:27,839
but we just need those tbgs and so in

1608
01:04:27,839 --> 01:04:28,720
the rats meeting

1609
01:04:28,720 --> 01:04:30,880
yesterday i mentioned early ayanna

1610
01:04:30,880 --> 01:04:32,480
assignment of those numbers would be

1611
01:04:32,480 --> 01:04:34,240
helpful to unblock the hackathon for

1612
01:04:34,240 --> 01:04:36,799
teeps so

1613
01:04:37,839 --> 01:04:39,200
all right let's use any questions on

1614
01:04:39,200 --> 01:04:40,799
that we can go on to the next slide all

1615
01:04:40,799 --> 01:04:41,599
right

1616
01:04:41,599 --> 01:04:44,960
so um this one is one that

1617
01:04:44,960 --> 01:04:48,640
um i ran into and i uh i

1618
01:04:48,640 --> 01:04:50,640
proactively merged it but i do not claim

1619
01:04:50,640 --> 01:04:52,160
that there is consensus on it yes that's

1620
01:04:52,160 --> 01:04:54,079
why this system is open

1621
01:04:54,079 --> 01:04:55,920
and i would like to either uh confirm

1622
01:04:55,920 --> 01:04:57,440
that i did the right thing that i have

1623
01:04:57,440 --> 01:04:58,319
support for this

1624
01:04:58,319 --> 01:05:00,000
otherwise we have to like revert it or

1625
01:05:00,000 --> 01:05:01,760
do something else which is okay because

1626
01:05:01,760 --> 01:05:05,039
this is still open okay so the issue is

1627
01:05:05,039 --> 01:05:07,280
as follows the error messages

1628
01:05:07,280 --> 01:05:09,760
have an integer error code and they have

1629
01:05:09,760 --> 01:05:11,440
an optional text message right this has

1630
01:05:11,440 --> 01:05:12,799
always been the case since the draft

1631
01:05:12,799 --> 01:05:14,400
zero

1632
01:05:14,400 --> 01:05:16,640
draft004 had a bunch of error codes and

1633
01:05:16,640 --> 01:05:17,920
had an eye on our registry for the error

1634
01:05:17,920 --> 01:05:19,039
codes

1635
01:05:19,039 --> 01:05:20,640
draft of five makes the following

1636
01:05:20,640 --> 01:05:22,960
proposal okay

1637
01:05:22,960 --> 01:05:24,400
new error codes i'm just going to read

1638
01:05:24,400 --> 01:05:26,000
this because this is the important part

1639
01:05:26,000 --> 01:05:27,599
here because the these bullets here are

1640
01:05:27,599 --> 01:05:28,079
actually

1641
01:05:28,079 --> 01:05:29,760
quotes out of the actual draft all five

1642
01:05:29,760 --> 01:05:30,880
new error codes should be added

1643
01:05:30,880 --> 01:05:32,720
sparingly not for every implementation

1644
01:05:32,720 --> 01:05:33,200
error

1645
01:05:33,200 --> 01:05:35,200
error that's the intent of the error

1646
01:05:35,200 --> 01:05:37,200
message field that's that text message

1647
01:05:37,200 --> 01:05:38,640
which can be used to provide details

1648
01:05:38,640 --> 01:05:40,400
meaningful to humans right so it's

1649
01:05:40,400 --> 01:05:40,960
saying

1650
01:05:40,960 --> 01:05:42,799
don't add a new error code just because

1651
01:05:42,799 --> 01:05:44,319
you have a different text message right

1652
01:05:44,319 --> 01:05:45,599
just because you have something new that

1653
01:05:45,599 --> 01:05:47,039
is meant for a human

1654
01:05:47,039 --> 01:05:48,880
um the use of integers you don't add new

1655
01:05:48,880 --> 01:05:50,559
integers just for humans right

1656
01:05:50,559 --> 01:05:52,720
new error code should be only added

1657
01:05:52,720 --> 01:05:54,960
should only be added if the tam

1658
01:05:54,960 --> 01:05:57,359
is expected to do something behaviorally

1659
01:05:57,359 --> 01:05:58,640
different upon receipt of the error

1660
01:05:58,640 --> 01:05:59,520
message

1661
01:05:59,520 --> 01:06:02,799
rather than just logging the event hence

1662
01:06:02,799 --> 01:06:04,559
each error code is responsible for

1663
01:06:04,559 --> 01:06:06,160
saying what the behavioral

1664
01:06:06,160 --> 01:06:09,280
difference is expected to be okay in

1665
01:06:09,280 --> 01:06:10,160
other words

1666
01:06:10,160 --> 01:06:13,200
the proposal is use integers if you're

1667
01:06:13,200 --> 01:06:14,880
at if you actually expect them to show

1668
01:06:14,880 --> 01:06:16,960
up in a switch statement on the tam

1669
01:06:16,960 --> 01:06:19,440
or equivalent right or jump table or

1670
01:06:19,440 --> 01:06:21,520
whatever right

1671
01:06:21,520 --> 01:06:24,079
and use error messages if you want have

1672
01:06:24,079 --> 01:06:25,359
things that are meant to be different

1673
01:06:25,359 --> 01:06:27,680
for humans so you can overload the same

1674
01:06:27,680 --> 01:06:30,240
error number if you get the same

1675
01:06:30,240 --> 01:06:32,160
behavior and i just have different text

1676
01:06:32,160 --> 01:06:33,440
messages that's fine right you don't

1677
01:06:33,440 --> 01:06:34,160
need to do

1678
01:06:34,160 --> 01:06:36,160
error code number unless you'd have a

1679
01:06:36,160 --> 01:06:37,440
different entry in a

1680
01:06:37,440 --> 01:06:40,640
switch or a jump table right and as a

1681
01:06:40,640 --> 01:06:42,160
result each error code that would be

1682
01:06:42,160 --> 01:06:43,920
added would be responsible for saying an

1683
01:06:43,920 --> 01:06:45,039
example of what the behavioral

1684
01:06:45,039 --> 01:06:46,319
difference is expected to be i got an

1685
01:06:46,319 --> 01:06:48,319
example on the next slide so

1686
01:06:48,319 --> 01:06:51,920
um so that's the that's the new text

1687
01:06:51,920 --> 01:06:54,000
that appears in draft 0.5 whether people

1688
01:06:54,000 --> 01:06:56,559
like it or not we can update it

1689
01:06:56,559 --> 01:06:58,960
now the result of this the implication

1690
01:06:58,960 --> 01:07:00,400
is that since

1691
01:07:00,400 --> 01:07:03,119
adding an error code implies adding

1692
01:07:03,119 --> 01:07:06,400
statements about behavioral difference

1693
01:07:06,400 --> 01:07:08,720
and the protocol behavior is protocol

1694
01:07:08,720 --> 01:07:09,839
spec

1695
01:07:09,839 --> 01:07:13,359
then the inregistry text is removed

1696
01:07:13,359 --> 01:07:15,680
okay that's the potentially more

1697
01:07:15,680 --> 01:07:17,039
contentious thing that i want to call

1698
01:07:17,039 --> 01:07:18,319
out says that's why

1699
01:07:18,319 --> 01:07:21,200
it's because the rule proposed is that

1700
01:07:21,200 --> 01:07:22,960
in order to add one

1701
01:07:22,960 --> 01:07:24,559
that you got to say what the behavioral

1702
01:07:24,559 --> 01:07:26,160
difference would be and therefore that

1703
01:07:26,160 --> 01:07:27,039
would be

1704
01:07:27,039 --> 01:07:29,839
more like an rfc required rather than an

1705
01:07:29,839 --> 01:07:31,280
ionic request

1706
01:07:31,280 --> 01:07:34,079
okay and so as a result that rule also

1707
01:07:34,079 --> 01:07:35,520
resulted in reducing the number of error

1708
01:07:35,520 --> 01:07:37,359
codes because a couple of them collapsed

1709
01:07:37,359 --> 01:07:38,960
because the behavior would have been

1710
01:07:38,960 --> 01:07:41,039
approximately the same or would be the

1711
01:07:41,039 --> 01:07:42,079
same

1712
01:07:42,079 --> 01:07:43,440
and we had example behavioral

1713
01:07:43,440 --> 01:07:44,720
differences so let's look at the next

1714
01:07:44,720 --> 01:07:46,240
slide so that's what you can use to

1715
01:07:46,240 --> 01:07:47,599
actually evaluate

1716
01:07:47,599 --> 01:07:51,039
go to the next slide all right

1717
01:07:51,039 --> 01:07:53,599
so this is trying to make it fit on one

1718
01:07:53,599 --> 01:07:55,839
slide so i've removed redundant words by

1719
01:07:55,839 --> 01:07:56,880
putting up at the top

1720
01:07:56,880 --> 01:07:58,799
and say so tim receiving this error

1721
01:07:58,799 --> 01:08:00,640
might right this is informative not

1722
01:08:00,640 --> 01:08:01,920
normative

1723
01:08:01,920 --> 01:08:03,760
to show an example because the actual

1724
01:08:03,760 --> 01:08:05,440
implementation behavior is up to the

1725
01:08:05,440 --> 01:08:06,720
implementation

1726
01:08:06,720 --> 01:08:09,359
but to motivate why two things are

1727
01:08:09,359 --> 01:08:10,319
different

1728
01:08:10,319 --> 01:08:12,240
right then there's different example

1729
01:08:12,240 --> 01:08:14,000
behaviors you can look at and says well

1730
01:08:14,000 --> 01:08:15,359
yeah i guess it is a pretty different

1731
01:08:15,359 --> 01:08:16,880
behavior than the other ones and so yeah

1732
01:08:16,880 --> 01:08:18,238
i mean i think that makes sense to have

1733
01:08:18,238 --> 01:08:19,520
that many different things because that

1734
01:08:19,520 --> 01:08:21,439
many possible behaviors and so

1735
01:08:21,439 --> 01:08:24,000
here's some examples right stop trying

1736
01:08:24,000 --> 01:08:26,880
for some long time right for example uh

1737
01:08:26,880 --> 01:08:28,560
you know you don't support a common

1738
01:08:28,560 --> 01:08:30,158
version or something like that so you

1739
01:08:30,158 --> 01:08:31,279
know it doesn't matter if i'm going to

1740
01:08:31,279 --> 01:08:32,158
resend

1741
01:08:32,158 --> 01:08:34,399
unless the other side has been updated

1742
01:08:34,399 --> 01:08:35,679
then there's no point we're not going to

1743
01:08:35,679 --> 01:08:36,880
communicate that would be example of

1744
01:08:36,880 --> 01:08:38,960
permanent error

1745
01:08:38,960 --> 01:08:40,880
retry without using extensions if you

1746
01:08:40,880 --> 01:08:42,158
find that there's a

1747
01:08:42,158 --> 01:08:44,799
unsupported extension retry using a

1748
01:08:44,799 --> 01:08:46,719
different version if there's a mismatch

1749
01:08:46,719 --> 01:08:48,319
in the message version

1750
01:08:48,319 --> 01:08:50,560
um retry using a different crypto

1751
01:08:50,560 --> 01:08:52,479
algorithm if the

1752
01:08:52,479 --> 01:08:53,920
if you get a crypto algorithm not

1753
01:08:53,920 --> 01:08:55,759
supported because you have multiple of

1754
01:08:55,759 --> 01:08:57,120
them that you can support you just try

1755
01:08:57,120 --> 01:08:58,399
it with a different one

1756
01:08:58,399 --> 01:09:00,238
uh bad certificate if you got multiple

1757
01:09:00,238 --> 01:09:01,439
certificates you can try a different

1758
01:09:01,439 --> 01:09:02,719
certificate

1759
01:09:02,719 --> 01:09:04,479
certificate expired well you might kick

1760
01:09:04,479 --> 01:09:06,000
off a procedure to do a renewal or

1761
01:09:06,000 --> 01:09:07,600
something before using it again thinking

1762
01:09:07,600 --> 01:09:08,158
well

1763
01:09:08,158 --> 01:09:10,479
okay maybe your times aren't quite in

1764
01:09:10,479 --> 01:09:12,799
sync and he thinks it expires you know

1765
01:09:12,799 --> 01:09:14,719
five minutes before me and oh look it's

1766
01:09:14,719 --> 01:09:15,839
getting close to when i would normally

1767
01:09:15,839 --> 01:09:16,880
renew it i don't know something like

1768
01:09:16,880 --> 01:09:18,158
that so

1769
01:09:18,158 --> 01:09:20,238
uh temporary error might be something

1770
01:09:20,238 --> 01:09:21,679
like out of memory

1771
01:09:21,679 --> 01:09:23,839
and so i might want to retry after some

1772
01:09:23,839 --> 01:09:25,679
short time because just because he hit

1773
01:09:25,679 --> 01:09:26,880
error now doesn't mean he's going to hit

1774
01:09:26,880 --> 01:09:29,600
an error next time

1775
01:09:29,600 --> 01:09:31,520
and then the last one is manifest

1776
01:09:31,520 --> 01:09:33,520
processing failed so something was bad

1777
01:09:33,520 --> 01:09:35,679
inside a particular suit manifest like

1778
01:09:35,679 --> 01:09:37,520
it couldn't do some command or trying to

1779
01:09:37,520 --> 01:09:38,799
do that command hit some error or

1780
01:09:38,799 --> 01:09:39,920
something else

1781
01:09:39,920 --> 01:09:41,279
but that might not prevent me from

1782
01:09:41,279 --> 01:09:43,520
trying to install or update other

1783
01:09:43,520 --> 01:09:45,520
components with other suit manifests

1784
01:09:45,520 --> 01:09:46,960
right so all those are distinctly

1785
01:09:46,960 --> 01:09:48,319
different behaviors

1786
01:09:48,319 --> 01:09:50,158
and solos make perfect sense as having a

1787
01:09:50,158 --> 01:09:52,238
distinctly different error code

1788
01:09:52,238 --> 01:09:53,439
because you could easily imagine an

1789
01:09:53,439 --> 01:09:54,640
implementation that has a switch

1790
01:09:54,640 --> 01:09:56,080
statement or jump table that has

1791
01:09:56,080 --> 01:09:57,760
different handlers for each of those and

1792
01:09:57,760 --> 01:10:00,000
triggers a particular action in code

1793
01:10:00,000 --> 01:10:02,239
in the tam okay now maybe there's some

1794
01:10:02,239 --> 01:10:03,760
other ones you can think of but

1795
01:10:03,760 --> 01:10:06,880
um there was a longer set in draft 04

1796
01:10:06,880 --> 01:10:08,960
that i collapsed into exactly this list

1797
01:10:08,960 --> 01:10:10,239
so there's a couple things that were

1798
01:10:10,239 --> 01:10:11,600
collapsed into permanent error and a

1799
01:10:11,600 --> 01:10:12,800
couple things that were collapsed into

1800
01:10:12,800 --> 01:10:15,840
temporary error for example

1801
01:10:15,840 --> 01:10:17,280
but if there's other ones that would be

1802
01:10:17,280 --> 01:10:19,120
happy to add them but i want people to

1803
01:10:19,120 --> 01:10:21,199
understand this is the proposed rule for

1804
01:10:21,199 --> 01:10:22,080
how to do that

1805
01:10:22,080 --> 01:10:25,440
and to use um uh text error messages for

1806
01:10:25,440 --> 01:10:27,280
things that are only differences for

1807
01:10:27,280 --> 01:10:28,880
humans or for logs

1808
01:10:28,880 --> 01:10:30,400
and so that's the one that i wanted to

1809
01:10:30,400 --> 01:10:32,080
actually verify we have we're going in

1810
01:10:32,080 --> 01:10:33,440
the right direction in the document

1811
01:10:33,440 --> 01:10:34,800
right now since we didn't talk about

1812
01:10:34,800 --> 01:10:36,239
this before it was just in a github

1813
01:10:36,239 --> 01:10:38,560
issue so

1814
01:10:38,560 --> 01:10:40,239
i will pause in case anybody wants to

1815
01:10:40,239 --> 01:10:42,000
jump into the queue but otherwise

1816
01:10:42,000 --> 01:10:43,920
if i don't see my jumping into q i will

1817
01:10:43,920 --> 01:10:46,400
continue

1818
01:10:46,560 --> 01:10:48,239
all right i see robin wilton jumping in

1819
01:10:48,239 --> 01:10:50,080
the queue

1820
01:10:50,080 --> 01:10:52,560
hi dave yes robin um and i have to say

1821
01:10:52,560 --> 01:10:54,719
i'm from isoc but not speaking for ice

1822
01:10:54,719 --> 01:10:56,840
hock

1823
01:10:56,840 --> 01:10:58,880
um um

1824
01:10:58,880 --> 01:11:00,960
uh yeah so are you going to give

1825
01:11:00,960 --> 01:11:02,400
corresponding examples

1826
01:11:02,400 --> 01:11:05,840
of an error code that might have um

1827
01:11:05,840 --> 01:11:09,360
that that um sorry

1828
01:11:09,360 --> 01:11:13,600
an error code that does not justify

1829
01:11:13,600 --> 01:11:15,520
sufficiently different protocol behavior

1830
01:11:15,520 --> 01:11:16,960
and therefore is only distinguishable

1831
01:11:16,960 --> 01:11:18,000
through the human

1832
01:11:18,000 --> 01:11:19,520
message in other words you know the

1833
01:11:19,520 --> 01:11:21,440
other half um

1834
01:11:21,440 --> 01:11:24,960
i was not okay but if you want one the

1835
01:11:24,960 --> 01:11:26,000
easiest way to get

1836
01:11:26,000 --> 01:11:29,040
that um maybe one of the other

1837
01:11:29,040 --> 01:11:33,360
uh t protocol editors can look in

1838
01:11:33,360 --> 01:11:37,120
a github issue 51 or sorry

1839
01:11:37,120 --> 01:11:38,719
and go to the pull request and look at

1840
01:11:38,719 --> 01:11:40,480
the pull request and see because i can't

1841
01:11:40,480 --> 01:11:41,920
remember which ones were deleted like i

1842
01:11:41,920 --> 01:11:42,480
said the

1843
01:11:42,480 --> 01:11:44,239
easiest ways i think there was uh at

1844
01:11:44,239 --> 01:11:45,520
least two that were combined into

1845
01:11:45,520 --> 01:11:46,560
permanent error and at least two that

1846
01:11:46,560 --> 01:11:48,320
were combined in a temporary error

1847
01:11:48,320 --> 01:11:49,600
and i can't remember that looking back

1848
01:11:49,600 --> 01:11:51,360
at the github pull request

1849
01:11:51,360 --> 01:11:53,199
no problem yeah no it wasn't it wasn't

1850
01:11:53,199 --> 01:11:54,880
so much for me it was for anyone

1851
01:11:54,880 --> 01:11:56,560
reading the document to have an example

1852
01:11:56,560 --> 01:11:58,640
of oh okay i see

1853
01:11:58,640 --> 01:11:59,760
i understand your question you weren't

1854
01:11:59,760 --> 01:12:01,280
asking about in the slides you're asking

1855
01:12:01,280 --> 01:12:03,600
right in the dark

1856
01:12:03,600 --> 01:12:06,800
ah okay um you know if if you're gonna

1857
01:12:06,800 --> 01:12:08,159
give examples of one

1858
01:12:08,159 --> 01:12:09,520
friendly to give example the other i

1859
01:12:09,520 --> 01:12:11,760
guess

1860
01:12:11,920 --> 01:12:15,040
yeah yeah so temporary and permanent

1861
01:12:15,040 --> 01:12:16,159
error

1862
01:12:16,159 --> 01:12:18,000
are ones that are the easiest to say and

1863
01:12:18,000 --> 01:12:19,440
here's a couple of cases that might

1864
01:12:19,440 --> 01:12:21,040
result in this yeah

1865
01:12:21,040 --> 01:12:23,920
cool great thank you um so i'd say maybe

1866
01:12:23,920 --> 01:12:26,880
temporary error i can think of

1867
01:12:26,880 --> 01:12:29,840
two cases maybe um right off the top of

1868
01:12:29,840 --> 01:12:31,199
my head now

1869
01:12:31,199 --> 01:12:33,199
one case is where there was a memory

1870
01:12:33,199 --> 01:12:34,320
allocation failure

1871
01:12:34,320 --> 01:12:37,360
and so the agent fills in you know

1872
01:12:37,360 --> 01:12:39,040
temporary error

1873
01:12:39,040 --> 01:12:42,000
and another case might be where there's

1874
01:12:42,000 --> 01:12:43,199
some component

1875
01:12:43,199 --> 01:12:46,400
that the uh some resource other than

1876
01:12:46,400 --> 01:12:47,280
memory

1877
01:12:47,280 --> 01:12:50,480
maybe it's a disk space um where

1878
01:12:50,480 --> 01:12:53,120
the agent needs access to disk space or

1879
01:12:53,120 --> 01:12:53,520
you know

1880
01:12:53,520 --> 01:12:55,920
uh secure storage or something like that

1881
01:12:55,920 --> 01:12:57,360
and can't get it or it's not currently

1882
01:12:57,360 --> 01:12:58,719
available so there's two different

1883
01:12:58,719 --> 01:13:00,400
resources that it needs between

1884
01:13:00,400 --> 01:13:03,280
memory and storage and it can't get one

1885
01:13:03,280 --> 01:13:04,880
or the other and both of those resolve

1886
01:13:04,880 --> 01:13:06,719
to temporary error

1887
01:13:06,719 --> 01:13:09,520
right so you add a third resource that

1888
01:13:09,520 --> 01:13:11,520
you depend on and that one might have

1889
01:13:11,520 --> 01:13:13,199
you know temporary unavailability and so

1890
01:13:13,199 --> 01:13:15,440
you reuse the same error

1891
01:13:15,440 --> 01:13:17,520
fantastic thanks dave now all i have to

1892
01:13:17,520 --> 01:13:19,199
do is resolve the challenge of note

1893
01:13:19,199 --> 01:13:20,080
taking

1894
01:13:20,080 --> 01:13:21,920
and asking questions that'll teach me

1895
01:13:21,920 --> 01:13:25,440
not to ask questions when note-taking

1896
01:13:26,080 --> 01:13:29,360
but we want you to do both robin

1897
01:13:29,360 --> 01:13:32,000
so don't stop taking notes don't stop

1898
01:13:32,000 --> 01:13:34,719
asking questions

1899
01:13:35,280 --> 01:13:37,840
all right next slide then unless there's

1900
01:13:37,840 --> 01:13:40,159
anybody else

1901
01:13:40,159 --> 01:13:41,520
all right now i'm watching the cue thing

1902
01:13:41,520 --> 01:13:43,360
not the chat thing sorry so chairs will

1903
01:13:43,360 --> 01:13:44,320
have to interrupt me if there's anything

1904
01:13:44,320 --> 01:13:46,560
in chat for me so all right so the next

1905
01:13:46,560 --> 01:13:47,520
issue

1906
01:13:47,520 --> 01:13:49,280
and this one now we're getting into ones

1907
01:13:49,280 --> 01:13:50,880
that are not in the current draft

1908
01:13:50,880 --> 01:13:54,880
these are in um github but not uh

1909
01:13:54,880 --> 01:13:56,640
any text that's been put into the

1910
01:13:56,640 --> 01:13:58,000
document yet

1911
01:13:58,000 --> 01:14:00,719
so uh this is one that we ran into uh

1912
01:14:00,719 --> 01:14:02,719
during hackathon implementation

1913
01:14:02,719 --> 01:14:04,239
and trying to figure out what to do

1914
01:14:04,239 --> 01:14:05,840
about it and so currently i have

1915
01:14:05,840 --> 01:14:07,600
implemented what the draft says which is

1916
01:14:07,600 --> 01:14:08,960
not great

1917
01:14:08,960 --> 01:14:11,360
so uh the issue comes up when you have

1918
01:14:11,360 --> 01:14:13,280
errors processing the query request

1919
01:14:13,280 --> 01:14:15,679
and so if i if you go if you think about

1920
01:14:15,679 --> 01:14:16,800
the things we just talked about

1921
01:14:16,800 --> 01:14:18,239
unsupported message version

1922
01:14:18,239 --> 01:14:20,880
unsupported crypto algorithm and so on

1923
01:14:20,880 --> 01:14:22,480
so let's talk about unsupported message

1924
01:14:22,480 --> 01:14:23,360
version okay

1925
01:14:23,360 --> 01:14:24,960
this is kind of interesting because the

1926
01:14:24,960 --> 01:14:27,280
document has had this error code in it

1927
01:14:27,280 --> 01:14:28,239
since the beginning

1928
01:14:28,239 --> 01:14:29,600
so you think about when would you hit

1929
01:14:29,600 --> 01:14:32,800
this error okay well

1930
01:14:32,800 --> 01:14:35,040
you'd hit it certainly in processing a

1931
01:14:35,040 --> 01:14:36,159
query request

1932
01:14:36,159 --> 01:14:38,239
okay you can hit it in processing an

1933
01:14:38,239 --> 01:14:39,679
update message

1934
01:14:39,679 --> 01:14:41,760
and previously the document says that

1935
01:14:41,760 --> 01:14:43,440
you can only ever send an error message

1936
01:14:43,440 --> 01:14:45,440
in response to an update message

1937
01:14:45,440 --> 01:14:47,520
okay so that means this error code could

1938
01:14:47,520 --> 01:14:48,800
only be sent in

1939
01:14:48,800 --> 01:14:51,120
if you hit this in the error message

1940
01:14:51,120 --> 01:14:52,239
okay if you hit this in the update

1941
01:14:52,239 --> 01:14:53,120
message

1942
01:14:53,120 --> 01:14:54,480
but when you get an update message you

1943
01:14:54,480 --> 01:14:55,840
get an update message after sending a

1944
01:14:55,840 --> 01:14:57,120
query response

1945
01:14:57,120 --> 01:14:58,560
how do you send a query response by

1946
01:14:58,560 --> 01:15:00,400
processing a query request

1947
01:15:00,400 --> 01:15:01,840
how do you process the courier request

1948
01:15:01,840 --> 01:15:04,080
answer you can't so that means this is

1949
01:15:04,080 --> 01:15:05,440
basically an error code that there's no

1950
01:15:05,440 --> 01:15:06,880
way to possibly hit a normal

1951
01:15:06,880 --> 01:15:07,600
implementation

1952
01:15:07,600 --> 01:15:09,360
in the current spec that's the issue

1953
01:15:09,360 --> 01:15:11,520
okay and so what do you do

1954
01:15:11,520 --> 01:15:13,199
when you process when you hit an error

1955
01:15:13,199 --> 01:15:14,960
like unsupported message in the query

1956
01:15:14,960 --> 01:15:17,040
request what the document says right now

1957
01:15:17,040 --> 01:15:18,159
is you drop it

1958
01:15:18,159 --> 01:15:19,840
you do nothing so there's no way to send

1959
01:15:19,840 --> 01:15:21,280
an error message there's no way to

1960
01:15:21,280 --> 01:15:22,800
communicate that you have an unsupported

1961
01:15:22,800 --> 01:15:24,719
message version that's the issue that's

1962
01:15:24,719 --> 01:15:25,840
in the document right now so the

1963
01:15:25,840 --> 01:15:27,280
question is what do we do about that

1964
01:15:27,280 --> 01:15:31,600
okay so a couple of options we could do

1965
01:15:31,600 --> 01:15:33,440
number one we could allow an error to be

1966
01:15:33,440 --> 01:15:35,040
sent in response to a career request

1967
01:15:35,040 --> 01:15:35,760
right that would be

1968
01:15:35,760 --> 01:15:38,159
my preference number two we could do

1969
01:15:38,159 --> 01:15:39,600
what the draft says right now which is

1970
01:15:39,600 --> 01:15:41,440
to silently drop the query request in

1971
01:15:41,440 --> 01:15:42,159
other words

1972
01:15:42,159 --> 01:15:43,760
the tim never gets any feedback

1973
01:15:43,760 --> 01:15:45,440
whatsoever that the that there's a

1974
01:15:45,440 --> 01:15:47,360
message version mismatch and that makes

1975
01:15:47,360 --> 01:15:49,040
it really hard to debug things and so

1976
01:15:49,040 --> 01:15:50,320
for us as

1977
01:15:50,320 --> 01:15:53,040
hackathon developers i would prefer not

1978
01:15:53,040 --> 01:15:54,480
that one

1979
01:15:54,480 --> 01:15:56,480
which is what the graph says right now

1980
01:15:56,480 --> 01:15:59,040
number three is well we could copy

1981
01:15:59,040 --> 01:16:00,719
it into the query response it says you

1982
01:16:00,719 --> 01:16:02,719
send the query response but you'd have

1983
01:16:02,719 --> 01:16:04,480
uh the extra error fields in there

1984
01:16:04,480 --> 01:16:06,400
we could do that one that just seems

1985
01:16:06,400 --> 01:16:08,239
like it's extra duplication for no real

1986
01:16:08,239 --> 01:16:09,760
benefit and so that's why

1987
01:16:09,760 --> 01:16:11,920
my proposal is we go with number one

1988
01:16:11,920 --> 01:16:14,000
which is we change the spec to allow the

1989
01:16:14,000 --> 01:16:16,400
existing error message that's right the

1990
01:16:16,400 --> 01:16:18,080
existing error message to be sent in

1991
01:16:18,080 --> 01:16:20,080
response to a curry request

1992
01:16:20,080 --> 01:16:22,239
now one thing to keep in mind though is

1993
01:16:22,239 --> 01:16:23,920
if it is in particular the unsupported

1994
01:16:23,920 --> 01:16:24,960
message version

1995
01:16:24,960 --> 01:16:26,640
you might be sending an older error

1996
01:16:26,640 --> 01:16:28,800
message version to the tam

1997
01:16:28,800 --> 01:16:30,000
and we just have to be able to deal with

1998
01:16:30,000 --> 01:16:31,840
that but that i think is the preferable

1999
01:16:31,840 --> 01:16:33,520
option out of these three and i couldn't

2000
01:16:33,520 --> 01:16:35,920
think of a fourth option so

2001
01:16:35,920 --> 01:16:38,880
my proposal is uh to go forward with

2002
01:16:38,880 --> 01:16:39,600
option one

2003
01:16:39,600 --> 01:16:41,199
in the next version of the document and

2004
01:16:41,199 --> 01:16:43,040
i would update that in my implementation

2005
01:16:43,040 --> 01:16:43,760
which would be

2006
01:16:43,760 --> 01:16:45,920
very easy to do but i am open to

2007
01:16:45,920 --> 01:16:47,280
feedback if people think that's the

2008
01:16:47,280 --> 01:16:49,840
wrong direction

2009
01:16:51,600 --> 01:16:53,199
pausing in case anybody wants to jump

2010
01:16:53,199 --> 01:16:55,759
into the queue

2011
01:16:56,239 --> 01:16:58,239
uh yeah certainly from other hackathon

2012
01:16:58,239 --> 01:16:59,600
people did you run into this

2013
01:16:59,600 --> 01:17:00,800
and what do you do with your

2014
01:17:00,800 --> 01:17:02,640
implementation so i see a curious

2015
01:17:02,640 --> 01:17:04,880
inquiry

2016
01:17:04,880 --> 01:17:08,719
yeah i'm fine either one or three

2017
01:17:08,719 --> 01:17:11,600
if it's not second but not two right

2018
01:17:11,600 --> 01:17:12,800
yeah not two

2019
01:17:12,800 --> 01:17:17,360
not two okay yeah

2020
01:17:17,360 --> 01:17:20,239
okay good again my preference for one is

2021
01:17:20,239 --> 01:17:21,040
because there's far

2022
01:17:21,040 --> 01:17:23,440
less spec work and less duplication in

2023
01:17:23,440 --> 01:17:24,719
code right

2024
01:17:24,719 --> 01:17:28,159
because now my uh message composer

2025
01:17:28,159 --> 01:17:30,159
on the agent side and message parsers on

2026
01:17:30,159 --> 01:17:32,000
the tam side only to look for error

2027
01:17:32,000 --> 01:17:34,000
codes in one place and not two and

2028
01:17:34,000 --> 01:17:37,520
that's why one is simpler to implement

2029
01:17:38,960 --> 01:17:41,840
all right hearing no objections i will

2030
01:17:41,840 --> 01:17:42,640
claim that

2031
01:17:42,640 --> 01:17:44,000
that people would be okay with us

2032
01:17:44,000 --> 01:17:46,000
putting option one into the next version

2033
01:17:46,000 --> 01:17:46,800
of the draft so

2034
01:17:46,800 --> 01:17:51,840
great let's go on next slide

2035
01:17:52,080 --> 01:17:54,480
all right um russ housely center review

2036
01:17:54,480 --> 01:17:55,840
about uh

2037
01:17:55,840 --> 01:17:58,880
cipher suites and so the top half of the

2038
01:17:58,880 --> 01:18:00,400
slide is what's in the document right

2039
01:18:00,400 --> 01:18:01,920
now there's two cipher suites you can

2040
01:18:01,920 --> 01:18:03,040
call you can see

2041
01:18:03,040 --> 01:18:04,880
those two there those are the two that

2042
01:18:04,880 --> 01:18:06,640
are both mandatory to implement on the

2043
01:18:06,640 --> 01:18:07,199
tam

2044
01:18:07,199 --> 01:18:10,480
and you can pick or choose on the agent

2045
01:18:10,480 --> 01:18:13,520
and uh right above that not shown here

2046
01:18:13,520 --> 01:18:15,440
um is the direction that says you know

2047
01:18:15,440 --> 01:18:16,560
here's the table or

2048
01:18:16,560 --> 01:18:18,719
and uh an algorithm is required that has

2049
01:18:18,719 --> 01:18:19,840
an hmac

2050
01:18:19,840 --> 01:18:22,239
and uh he says i think future cipher

2051
01:18:22,239 --> 01:18:23,840
suite should allow mac algorithms other

2052
01:18:23,840 --> 01:18:26,000
than h mac such as gmax so just

2053
01:18:26,000 --> 01:18:28,159
change hmac to mac and there he's not

2054
01:18:28,159 --> 01:18:29,199
talking about the table he's talking

2055
01:18:29,199 --> 01:18:30,480
about that text that's right above the

2056
01:18:30,480 --> 01:18:31,840
table that says the algorithms need a

2057
01:18:31,840 --> 01:18:33,040
mac algorithm

2058
01:18:33,040 --> 01:18:35,760
and so i've done that in a pull request

2059
01:18:35,760 --> 01:18:37,199
but it's not in the document to just

2060
01:18:37,199 --> 01:18:37,760
make that

2061
01:18:37,760 --> 01:18:39,840
change that says future ones need a mac

2062
01:18:39,840 --> 01:18:41,600
it doesn't have to specifically say that

2063
01:18:41,600 --> 01:18:43,360
the future ones would need an hmac

2064
01:18:43,360 --> 01:18:46,320
in particular so um but the open

2065
01:18:46,320 --> 01:18:47,679
question here that i would like the

2066
01:18:47,679 --> 01:18:49,120
feedback on that it's not in any

2067
01:18:49,120 --> 01:18:50,640
request now that we just need a decision

2068
01:18:50,640 --> 01:18:53,199
on so i know what to put in the text so

2069
01:18:53,199 --> 01:18:54,800
in section 9 which is the under

2070
01:18:54,800 --> 01:18:56,480
consideration section

2071
01:18:56,480 --> 01:18:58,480
please say whether future registrations

2072
01:18:58,480 --> 01:19:00,719
or other additions to this table

2073
01:19:00,719 --> 01:19:02,280
should allow integrity without

2074
01:19:02,280 --> 01:19:04,480
confidentiality in cypher suites

2075
01:19:04,480 --> 01:19:06,000
and so we should just pick one now and i

2076
01:19:06,000 --> 01:19:07,760
see russ is in queue so we can elaborate

2077
01:19:07,760 --> 01:19:08,000
so

2078
01:19:08,000 --> 01:19:10,640
go ahead russ

2079
01:19:12,640 --> 01:19:15,440
so uh we've seen in other working groups

2080
01:19:15,440 --> 01:19:17,120
that

2081
01:19:17,120 --> 01:19:20,320
if we don't say

2082
01:19:20,320 --> 01:19:23,360
what the rules are up front then the

2083
01:19:23,360 --> 01:19:25,600
iana expert

2084
01:19:25,600 --> 01:19:28,719
has to decide what was meant

2085
01:19:28,719 --> 01:19:30,719
whereas if we put it in the document

2086
01:19:30,719 --> 01:19:31,760
whether

2087
01:19:31,760 --> 01:19:34,840
we can have integrity without

2088
01:19:34,840 --> 01:19:36,880
confidentiality or not

2089
01:19:36,880 --> 01:19:39,920
now then we're then the iana expert can

2090
01:19:39,920 --> 01:19:40,719
enforce

2091
01:19:40,719 --> 01:19:43,600
the working group's consensus and not

2092
01:19:43,600 --> 01:19:45,040
have a big ios

2093
01:19:45,040 --> 01:19:47,920
head scratch moment so i would just like

2094
01:19:47,920 --> 01:19:50,000
to sort it out now so we don't end

2095
01:19:50,000 --> 01:19:55,600
up in in this position uh going forward

2096
01:19:55,600 --> 01:19:57,280
yep and i put it on my slides here

2097
01:19:57,280 --> 01:19:58,239
because i want whatever the

2098
01:19:58,239 --> 01:19:59,520
recommendation is for the working group

2099
01:19:59,520 --> 01:19:59,920
to be

2100
01:19:59,920 --> 01:20:03,840
minuted so

2101
01:20:03,840 --> 01:20:07,199
uh since uh i don't know

2102
01:20:07,199 --> 01:20:09,360
what does somebody else have a proposal

2103
01:20:09,360 --> 01:20:10,480
for which one

2104
01:20:10,480 --> 01:20:14,080
which direction would be the answer so

2105
01:20:14,080 --> 01:20:15,360
whether integrity without

2106
01:20:15,360 --> 01:20:17,280
confidentiality should be allowed or

2107
01:20:17,280 --> 01:20:19,840
disallowed

2108
01:20:27,600 --> 01:20:30,960
um i don't know it's ming on here uh

2109
01:20:30,960 --> 01:20:33,040
if you have any i guess ming isn't on

2110
01:20:33,040 --> 01:20:34,480
here so

2111
01:20:34,480 --> 01:20:38,000
uh honest do you have any opinion

2112
01:20:40,560 --> 01:20:47,440
uh no i no i don't right now no

2113
01:20:47,440 --> 01:20:51,199
um hey dave i have a comment

2114
01:20:51,199 --> 01:20:53,679
i i see a lot the messages being

2115
01:20:53,679 --> 01:20:55,199
exchanged with the

2116
01:20:55,199 --> 01:20:57,199
uh the time and deep agent carry a lot

2117
01:20:57,199 --> 01:20:58,239
of pai data

2118
01:20:58,239 --> 01:21:00,639
like the device identifier the kind of

2119
01:21:00,639 --> 01:21:02,320
uh trusted applications that get

2120
01:21:02,320 --> 01:21:05,040
installed and it has a big serious

2121
01:21:05,040 --> 01:21:06,960
privacy impact if it's sent in clear

2122
01:21:06,960 --> 01:21:08,080
text so

2123
01:21:08,080 --> 01:21:10,480
unless there's a justification how that

2124
01:21:10,480 --> 01:21:12,159
is not going to identify a specific

2125
01:21:12,159 --> 01:21:13,520
user's device or

2126
01:21:13,520 --> 01:21:15,280
it's not going to hamper someone's

2127
01:21:15,280 --> 01:21:17,280
privacy uh sure we can code with

2128
01:21:17,280 --> 01:21:19,360
integrity but i see a lot of

2129
01:21:19,360 --> 01:21:22,080
sensitive data being exchanged and i i

2130
01:21:22,080 --> 01:21:24,159
don't see a reason why we should

2131
01:21:24,159 --> 01:21:27,440
uh degrade someone's privacy by uh

2132
01:21:27,440 --> 01:21:29,199
not allowing confidentiality at this

2133
01:21:29,199 --> 01:21:31,360
time

2134
01:21:32,880 --> 01:21:35,600
just to be clear i'm not advocating that

2135
01:21:35,600 --> 01:21:36,320
we don't

2136
01:21:36,320 --> 01:21:39,280
allow confidentiality i'm advocating

2137
01:21:39,280 --> 01:21:40,560
whether we

2138
01:21:40,560 --> 01:21:43,600
mandate confidentiality

2139
01:21:43,600 --> 01:21:45,520
yeah i see a question in chat from

2140
01:21:45,520 --> 01:21:47,440
jonathan hamill which is a reasonable

2141
01:21:47,440 --> 01:21:47,920
question

2142
01:21:47,920 --> 01:21:50,639
about uh you know implying i don't know

2143
01:21:50,639 --> 01:21:51,840
i don't have a preference until i know

2144
01:21:51,840 --> 01:21:53,440
what the mech is used for so

2145
01:21:53,440 --> 01:21:56,560
i'm wondering um uh honest can you

2146
01:21:56,560 --> 01:21:57,600
summarize what the mac

2147
01:21:57,600 --> 01:21:59,840
is used for for that you can probably do

2148
01:21:59,840 --> 01:22:00,800
it more

2149
01:22:00,800 --> 01:22:03,760
succinctly than i can

2150
01:22:05,920 --> 01:22:11,679
um that's a good question

2151
01:22:11,679 --> 01:22:15,120
actually at the moment i don't think

2152
01:22:15,120 --> 01:22:18,639
we used the mac

2153
01:22:18,639 --> 01:22:21,360
for anything

2154
01:22:22,000 --> 01:22:24,880
actually that's not true um so we have

2155
01:22:24,880 --> 01:22:27,120
the

2156
01:22:28,000 --> 01:22:30,719
we have uh in for example with so it

2157
01:22:30,719 --> 01:22:32,000
depends on what the

2158
01:22:32,000 --> 01:22:34,639
this is used for the method right yeah

2159
01:22:34,639 --> 01:22:35,280
now

2160
01:22:35,280 --> 01:22:37,760
remember this is the question is not

2161
01:22:37,760 --> 01:22:39,120
about whether to lost something without

2162
01:22:39,120 --> 01:22:40,480
a mag the question is whether it allows

2163
01:22:40,480 --> 01:22:41,679
something without um

2164
01:22:41,679 --> 01:22:43,600
encryption so jonathan i'm just

2165
01:22:43,600 --> 01:22:44,880
extrapolating from jonathan's questions

2166
01:22:44,880 --> 01:22:46,800
what's the mac used for let me rephrase

2167
01:22:46,800 --> 01:22:48,960
can you summarize what the cipher suite

2168
01:22:48,960 --> 01:22:50,320
is used for

2169
01:22:50,320 --> 01:22:53,040
right this is for you know encryption or

2170
01:22:53,040 --> 01:22:54,239
it's just used for a message

2171
01:22:54,239 --> 01:22:55,520
authentication i just want if you can

2172
01:22:55,520 --> 01:22:56,560
give us that answer

2173
01:22:56,560 --> 01:22:57,679
otherwise i can try if you don't want to

2174
01:22:57,679 --> 01:23:00,719
do so go go ahead

2175
01:23:00,719 --> 01:23:03,920
um so i think there's uh one

2176
01:23:03,920 --> 01:23:06,639
layer that is used to keep track of the

2177
01:23:06,639 --> 01:23:10,000
integrity of the teep message

2178
01:23:10,000 --> 01:23:13,440
and so separately

2179
01:23:13,440 --> 01:23:16,480
is the integrity or confidentiality of

2180
01:23:16,480 --> 01:23:19,040
the component being delivered via teep

2181
01:23:19,040 --> 01:23:20,080
right that is done

2182
01:23:20,080 --> 01:23:22,239
by stuff that's inside the suit manifest

2183
01:23:22,239 --> 01:23:24,400
okay that's not what this one is about

2184
01:23:24,400 --> 01:23:25,280
this is about the t

2185
01:23:25,280 --> 01:23:27,040
messages themselves so honest please

2186
01:23:27,040 --> 01:23:29,600
correct me if i say something wrong

2187
01:23:29,600 --> 01:23:31,760
right so not about the payload so let's

2188
01:23:31,760 --> 01:23:32,800
pretend that you've already got

2189
01:23:32,800 --> 01:23:34,159
confidentiality of the payload

2190
01:23:34,159 --> 01:23:35,760
okay this is about whether the cheap

2191
01:23:35,760 --> 01:23:37,520
messages themselves

2192
01:23:37,520 --> 01:23:41,040
have integrity which they do or the teat

2193
01:23:41,040 --> 01:23:43,760
messages themselves have confidentiality

2194
01:23:43,760 --> 01:23:45,440
and so i think this is equivalent to

2195
01:23:45,440 --> 01:23:47,679
saying can the t messages

2196
01:23:47,679 --> 01:23:50,400
have not confidentiality at the teep

2197
01:23:50,400 --> 01:23:51,600
message layer

2198
01:23:51,600 --> 01:23:53,040
you still have confidentiality at the

2199
01:23:53,040 --> 01:23:55,520
payload layer and in theory you have

2200
01:23:55,520 --> 01:23:57,360
some confidentiality at the transport

2201
01:23:57,360 --> 01:23:58,800
layer although that confidentially

2202
01:23:58,800 --> 01:24:01,199
terminates outside the tee so it's not

2203
01:24:01,199 --> 01:24:03,840
end to end in the true protocol sense

2204
01:24:03,840 --> 01:24:05,440
and so the met that's heap message would

2205
01:24:05,440 --> 01:24:06,400
be if you need

2206
01:24:06,400 --> 01:24:09,760
to protect the confidentiality of say

2207
01:24:09,760 --> 01:24:12,239
which component ids that you are

2208
01:24:12,239 --> 01:24:14,080
installing and uninstalling would that

2209
01:24:14,080 --> 01:24:16,000
be confidential information

2210
01:24:16,000 --> 01:24:18,080
and in some use cases the answer is

2211
01:24:18,080 --> 01:24:19,040
absolutely

2212
01:24:19,040 --> 01:24:21,760
some of the workloads or tas that you're

2213
01:24:21,760 --> 01:24:22,960
installing

2214
01:24:22,960 --> 01:24:25,280
might be uh personally identifiable

2215
01:24:25,280 --> 01:24:26,719
information right if you're installing

2216
01:24:26,719 --> 01:24:27,440
you know

2217
01:24:27,440 --> 01:24:28,800
health things like you know blood

2218
01:24:28,800 --> 01:24:30,719
pressure monitor things onto a device or

2219
01:24:30,719 --> 01:24:31,920
whatever then that can be

2220
01:24:31,920 --> 01:24:35,120
um confidentiality um you know

2221
01:24:35,120 --> 01:24:37,679
sensitive i guess the question is would

2222
01:24:37,679 --> 01:24:38,639
we want to allow t

2223
01:24:38,639 --> 01:24:41,840
messages in cases where

2224
01:24:41,840 --> 01:24:45,120
the components being installed and

2225
01:24:45,120 --> 01:24:46,880
uninstalled and updated

2226
01:24:46,880 --> 01:24:49,920
uh that the i that the categories of

2227
01:24:49,920 --> 01:24:50,800
them

2228
01:24:50,800 --> 01:24:52,800
are things that need to have that that

2229
01:24:52,800 --> 01:24:54,800
do not need confidentiality protection

2230
01:24:54,800 --> 01:24:56,639
and it would be fine to just use a

2231
01:24:56,639 --> 01:24:58,000
cypher suite for the

2232
01:24:58,000 --> 01:25:00,560
uh t messages that does not provide

2233
01:25:00,560 --> 01:25:03,040
confidentiality of the t-petters

2234
01:25:03,040 --> 01:25:06,159
i think that's the question

2235
01:25:06,639 --> 01:25:09,920
yes that's the question yeah but i think

2236
01:25:09,920 --> 01:25:12,880
you also have to say whether the things

2237
01:25:12,880 --> 01:25:17,760
that eat might expose would be

2238
01:25:17,760 --> 01:25:20,000
protected separately as you already

2239
01:25:20,000 --> 01:25:22,000
explained the payload is protected by

2240
01:25:22,000 --> 01:25:23,520
suit

2241
01:25:23,520 --> 01:25:26,239
that is a great point i think right now

2242
01:25:26,239 --> 01:25:27,040
in

2243
01:25:27,040 --> 01:25:30,480
actually some uh who can speak

2244
01:25:30,480 --> 01:25:31,920
authoritatively to that my

2245
01:25:31,920 --> 01:25:35,920
recollection is that um

2246
01:25:36,000 --> 01:25:38,320
eat is a json web token or cbor web

2247
01:25:38,320 --> 01:25:40,560
token and so it turns the same answer as

2248
01:25:40,560 --> 01:25:43,120
json web tokens and seaboard web tokens

2249
01:25:43,120 --> 01:25:43,920
and so

2250
01:25:43,920 --> 01:25:46,239
my belief is yes i think they can use

2251
01:25:46,239 --> 01:25:47,199
cose and

2252
01:25:47,199 --> 01:25:50,159
jose for the jwts and cwts but somebody

2253
01:25:50,159 --> 01:25:54,560
else can correct me if i said that wrong

2254
01:25:54,560 --> 01:25:56,560
i think that's true but i think it's

2255
01:25:56,560 --> 01:25:58,719
optional i think they can be integrity

2256
01:25:58,719 --> 01:25:59,840
only

2257
01:25:59,840 --> 01:26:02,000
and that's why this layer it does i

2258
01:26:02,000 --> 01:26:04,560
think matter

2259
01:26:06,960 --> 01:26:09,199
so if we don't know any better so i

2260
01:26:09,199 --> 01:26:10,560
guess here i don't know if you had a

2261
01:26:10,560 --> 01:26:11,360
specific preference

2262
01:26:11,360 --> 01:26:13,120
thank you ben for for confirming that we

2263
01:26:13,120 --> 01:26:15,360
said it correctly um

2264
01:26:15,360 --> 01:26:18,159
so since if it's true that it's optional

2265
01:26:18,159 --> 01:26:20,000
and eat then it might make sense to not

2266
01:26:20,000 --> 01:26:21,520
constrain it here to say if there's some

2267
01:26:21,520 --> 01:26:22,320
use case

2268
01:26:22,320 --> 01:26:23,440
where you don't care about

2269
01:26:23,440 --> 01:26:25,040
confidentiality and you want to design a

2270
01:26:25,040 --> 01:26:26,159
 cipher suite for that you have a

2271
01:26:26,159 --> 01:26:27,920
good enough reason then

2272
01:26:27,920 --> 01:26:29,679
giving that freedom to the iona expert

2273
01:26:29,679 --> 01:26:32,960
to allow it might be okay

2274
01:26:32,960 --> 01:26:36,159
to so we could uh

2275
01:26:36,159 --> 01:26:37,679
because right now we don't constrain it

2276
01:26:37,679 --> 01:26:39,199
and we'd be explicit about us not

2277
01:26:39,199 --> 01:26:40,400
constraining it

2278
01:26:40,400 --> 01:26:42,719
um unless there's some reason to say

2279
01:26:42,719 --> 01:26:43,600
nope sorry

2280
01:26:43,600 --> 01:26:45,440
in a confidentiality only right now and

2281
01:26:45,440 --> 01:26:47,600
that's really the question

2282
01:26:47,600 --> 01:26:51,199
yeah so i i didn't realize i was unmute

2283
01:26:51,199 --> 01:26:53,679
um so speaking from the rat's

2284
01:26:53,679 --> 01:26:55,520
perspective

2285
01:26:55,520 --> 01:26:58,800
uh the we recall that there is a draft

2286
01:26:58,800 --> 01:27:02,800
that speaks to the use cases in which

2287
01:27:02,800 --> 01:27:06,480
no confidentiality is needed

2288
01:27:06,480 --> 01:27:09,040
it's the u

2289
01:27:10,480 --> 01:27:14,718
yes the uccs draft right

2290
01:27:15,040 --> 01:27:18,239
so this is to say i think the intent of

2291
01:27:18,239 --> 01:27:21,360
eat is that you would use and

2292
01:27:21,360 --> 01:27:24,960
and that's where jim shad was providing

2293
01:27:24,960 --> 01:27:25,840
the feedback

2294
01:27:25,840 --> 01:27:28,800
with the understanding that eat whether

2295
01:27:28,800 --> 01:27:30,239
you were using

2296
01:27:30,239 --> 01:27:33,199
the cwts or the jwts that you would be

2297
01:27:33,199 --> 01:27:34,679
using

2298
01:27:34,679 --> 01:27:37,840
confidentiality um in those tokens which

2299
01:27:37,840 --> 01:27:41,120
is why the uccs draft

2300
01:27:41,120 --> 01:27:45,120
was presented okay so i see a comment

2301
01:27:45,120 --> 01:27:46,960
from brendan that i agree with and so

2302
01:27:46,960 --> 01:27:47,920
i'm going to

2303
01:27:47,920 --> 01:27:50,800
channel you with the mic here brendan um

2304
01:27:50,800 --> 01:27:52,080
if you allow integrity without

2305
01:27:52,080 --> 01:27:53,360
confidentiality

2306
01:27:53,360 --> 01:27:56,880
um then there's a security consideration

2307
01:27:56,880 --> 01:27:59,600
in doing that about you know talking

2308
01:27:59,600 --> 01:28:01,199
about how much it exposes personal

2309
01:28:01,199 --> 01:28:02,480
information and so

2310
01:28:02,480 --> 01:28:05,280
if we go the approach that says we're

2311
01:28:05,280 --> 01:28:05,920
going to

2312
01:28:05,920 --> 01:28:07,760
potentially allow this in the future

2313
01:28:07,760 --> 01:28:09,440
then we could introduce a constraint

2314
01:28:09,440 --> 01:28:11,199
saying any registration that would

2315
01:28:11,199 --> 01:28:11,679
actually

2316
01:28:11,679 --> 01:28:14,719
propose that is responsible for uh

2317
01:28:14,719 --> 01:28:17,600
you know must discuss uh the whole pii

2318
01:28:17,600 --> 01:28:18,239
issue

2319
01:28:18,239 --> 01:28:21,520
and what uh fields are legal to be

2320
01:28:21,520 --> 01:28:22,719
expressed in that

2321
01:28:22,719 --> 01:28:25,840
t in the teep message or whatever

2322
01:28:25,840 --> 01:28:29,199
for example is it only possible when you

2323
01:28:29,199 --> 01:28:29,679
have

2324
01:28:29,679 --> 01:28:31,600
eats that does that do have encryption

2325
01:28:31,600 --> 01:28:33,360
inside them that type of stuff and so we

2326
01:28:33,360 --> 01:28:35,199
could have that type of a constraint

2327
01:28:35,199 --> 01:28:36,719
that we put into our document that's

2328
01:28:36,719 --> 01:28:38,080
actually requirements for those

2329
01:28:38,080 --> 01:28:40,239
proposing an integrity.company lg cipher

2330
01:28:40,239 --> 01:28:41,280
suite

2331
01:28:41,280 --> 01:28:42,560
i don't know if that answers your your

2332
01:28:42,560 --> 01:28:43,920
point brendan but yeah i agree with your

2333
01:28:43,920 --> 01:28:46,400
point so

2334
01:28:52,000 --> 01:28:53,679
okay plus one thanks brandon for

2335
01:28:53,679 --> 01:28:55,360
confirming all right so

2336
01:28:55,360 --> 01:28:58,560
uh and i guess

2337
01:28:58,560 --> 01:29:00,320
make forward progress let me just make a

2338
01:29:00,320 --> 01:29:01,840
proposal here and see if there's

2339
01:29:01,840 --> 01:29:02,880
objections to it

2340
01:29:02,880 --> 01:29:04,400
i guess the proposal is that we'll go

2341
01:29:04,400 --> 01:29:05,920
ahead and do that in the next version is

2342
01:29:05,920 --> 01:29:06,880
that we will

2343
01:29:06,880 --> 01:29:10,080
um allow potentially allow

2344
01:29:10,080 --> 01:29:12,159
future integrity without confidentiality

2345
01:29:12,159 --> 01:29:13,840
should there be requests for it

2346
01:29:13,840 --> 01:29:16,320
but introduce a constr a requirement for

2347
01:29:16,320 --> 01:29:17,600
anybody doing that

2348
01:29:17,600 --> 01:29:19,199
to uh talk about the security

2349
01:29:19,199 --> 01:29:21,120
considerations um

2350
01:29:21,120 --> 01:29:23,120
and how it protects things or perhaps

2351
01:29:23,120 --> 01:29:25,440
disallows the use in certain cases so

2352
01:29:25,440 --> 01:29:26,880
we'll try to take a shot at proposing

2353
01:29:26,880 --> 01:29:29,520
some text like that for folks review so

2354
01:29:29,520 --> 01:29:31,600
all right unless there's any objections

2355
01:29:31,600 --> 01:29:33,120
then i'll take that as a direction and

2356
01:29:33,120 --> 01:29:34,639
then we can review it as it appears in

2357
01:29:34,639 --> 01:29:36,080
the next document not gonna be version

2358
01:29:36,080 --> 01:29:37,280
so

2359
01:29:37,280 --> 01:29:40,159
all right let's move on

2360
01:29:42,159 --> 01:29:45,679
all right so um suit manifest

2361
01:29:45,679 --> 01:29:48,960
examples uh there's a there's been an

2362
01:29:48,960 --> 01:29:50,480
open issue that says can we add a suit

2363
01:29:50,480 --> 01:29:52,960
manifest example i think we had a

2364
01:29:52,960 --> 01:29:54,239
simple one in the document this is what

2365
01:29:54,239 --> 01:29:56,080
we were talking about earlier in the

2366
01:29:56,080 --> 01:29:57,199
suit discussion

2367
01:29:57,199 --> 01:29:58,560
the suit the relationship discussion

2368
01:29:58,560 --> 01:30:00,800
from academy so the real question is

2369
01:30:00,800 --> 01:30:02,480
whether the suit manifest examples for

2370
01:30:02,480 --> 01:30:02,880
teep

2371
01:30:02,880 --> 01:30:05,280
should be in the protocol spec or a suit

2372
01:30:05,280 --> 01:30:07,280
manifest spec

2373
01:30:07,280 --> 01:30:09,280
and so this is not the first time this

2374
01:30:09,280 --> 01:30:10,800
has been on the agenda but i hope it's

2375
01:30:10,800 --> 01:30:12,719
the last time that it's on the agenda

2376
01:30:12,719 --> 01:30:16,239
um for an ietf movie so uh just a recap

2377
01:30:16,239 --> 01:30:17,679
as to where we're at right now the suit

2378
01:30:17,679 --> 01:30:18,960
manifest spec has

2379
01:30:18,960 --> 01:30:22,480
six other examples in an appendix okay

2380
01:30:22,480 --> 01:30:25,280
but it's close to being done okay that

2381
01:30:25,280 --> 01:30:26,480
we don't want to keep the suit manifest

2382
01:30:26,480 --> 01:30:26,880
spec

2383
01:30:26,880 --> 01:30:29,840
you know open for much longer the suit

2384
01:30:29,840 --> 01:30:31,520
meeting is coming up i think tomorrow

2385
01:30:31,520 --> 01:30:32,320
right

2386
01:30:32,320 --> 01:30:34,400
but uh the suit reports were pulled out

2387
01:30:34,400 --> 01:30:36,320
into a different spec

2388
01:30:36,320 --> 01:30:39,520
and the suit manifest examples it's

2389
01:30:39,520 --> 01:30:40,400
useful to have

2390
01:30:40,400 --> 01:30:43,360
both the suit manifest examples and suit

2391
01:30:43,360 --> 01:30:43,920
report

2392
01:30:43,920 --> 01:30:45,840
examples so we talked about like error

2393
01:30:45,840 --> 01:30:47,760
messages if the suit manifest fails than

2394
01:30:47,760 --> 01:30:49,120
to say how you report that or how you

2395
01:30:49,120 --> 01:30:51,600
report success in that example okay

2396
01:30:51,600 --> 01:30:55,040
and so my proposal here is to put the

2397
01:30:55,040 --> 01:30:56,239
examples of both

2398
01:30:56,239 --> 01:31:00,960
manifest and report into the teep spec

2399
01:31:00,960 --> 01:31:02,320
and that's because the suit report

2400
01:31:02,320 --> 01:31:04,560
document is not done we could put stuff

2401
01:31:04,560 --> 01:31:05,840
in the suit report

2402
01:31:05,840 --> 01:31:07,760
but we'd have to bake it into the suit

2403
01:31:07,760 --> 01:31:09,440
manifest and we want them to match

2404
01:31:09,440 --> 01:31:11,280
between suit manifest and suit report

2405
01:31:11,280 --> 01:31:12,880
and those two things are not going to

2406
01:31:12,880 --> 01:31:15,120
go into rsc at the same time whereas if

2407
01:31:15,120 --> 01:31:16,719
we put them into the feet protocol spec

2408
01:31:16,719 --> 01:31:18,400
we can guarantee that the vert that all

2409
01:31:18,400 --> 01:31:18,800
the

2410
01:31:18,800 --> 01:31:20,239
the latest stuff will be an exact that

2411
01:31:20,239 --> 01:31:21,760
they'll kind of match in terms of what's

2412
01:31:21,760 --> 01:31:24,000
the latest or second example

2413
01:31:24,000 --> 01:31:25,840
so here's some things that we would want

2414
01:31:25,840 --> 01:31:28,960
in potential examples maybe two of each

2415
01:31:28,960 --> 01:31:31,040
one is to install a ta that needs

2416
01:31:31,040 --> 01:31:32,960
personalization data from another cam

2417
01:31:32,960 --> 01:31:34,880
so we can show a dependency it would put

2418
01:31:34,880 --> 01:31:36,719
two with two tams related

2419
01:31:36,719 --> 01:31:38,880
and the report an example might be

2420
01:31:38,880 --> 01:31:40,800
partial success say where

2421
01:31:40,800 --> 01:31:43,040
one of those succeeded another one

2422
01:31:43,040 --> 01:31:44,480
failed

2423
01:31:44,480 --> 01:31:46,560
another example would be a manifest that

2424
01:31:46,560 --> 01:31:47,920
removes or unlinks

2425
01:31:47,920 --> 01:31:50,719
to to brennan's point removing a ta and

2426
01:31:50,719 --> 01:31:52,080
its dependency

2427
01:31:52,080 --> 01:31:54,000
and the report might show full success

2428
01:31:54,000 --> 01:31:55,280
and so

2429
01:31:55,280 --> 01:31:58,480
my uh proposal is we take uh those two

2430
01:31:58,480 --> 01:31:59,360
examples

2431
01:31:59,360 --> 01:32:01,280
with uh those two success and failure

2432
01:32:01,280 --> 01:32:02,800
cases and add them into the teak

2433
01:32:02,800 --> 01:32:04,080
protocol spec

2434
01:32:04,080 --> 01:32:05,520
and we leave them out of suit and we

2435
01:32:05,520 --> 01:32:08,239
just ask suit to review them

2436
01:32:08,239 --> 01:32:10,840
so that's my proposal any objection to

2437
01:32:10,840 --> 01:32:13,040
that

2438
01:32:13,040 --> 01:32:14,400
uh and i'm specifically looking at

2439
01:32:14,400 --> 01:32:17,120
people like brendan and hannes and russ

2440
01:32:17,120 --> 01:32:18,960
and if i hear no objections we'll

2441
01:32:18,960 --> 01:32:22,400
do that in the next version so

2442
01:32:23,199 --> 01:32:25,040
all right not seeing anybody jumping in

2443
01:32:25,040 --> 01:32:26,560
a queue

2444
01:32:26,560 --> 01:32:28,639
so let's go ahead and move on yeah it

2445
01:32:28,639 --> 01:32:30,719
makes sense to me thank you honest

2446
01:32:30,719 --> 01:32:32,800
all right now we're getting into a

2447
01:32:32,800 --> 01:32:34,480
section for a couple of related issues

2448
01:32:34,480 --> 01:32:36,480
it's about use of tokens in teep there

2449
01:32:36,480 --> 01:32:38,639
are interrelated issues around freshness

2450
01:32:38,639 --> 01:32:40,480
and state matching and so on so we

2451
01:32:40,480 --> 01:32:42,239
talked about this last iatf

2452
01:32:42,239 --> 01:32:45,679
a lot in the side meeting not in the uh

2453
01:32:45,679 --> 01:32:47,360
consensus-based meeting so this is my

2454
01:32:47,360 --> 01:32:49,440
report back out that summarizes some of

2455
01:32:49,440 --> 01:32:50,880
the

2456
01:32:50,880 --> 01:32:54,000
side meeting discussion uh issues in the

2457
01:32:54,000 --> 01:32:55,199
spec

2458
01:32:55,199 --> 01:32:57,440
and issues and implementation all rolled

2459
01:32:57,440 --> 01:32:58,960
into one section here so

2460
01:32:58,960 --> 01:33:00,800
all right and thank you sir and i see a

2461
01:33:00,800 --> 01:33:02,960
plus one all right next slide

2462
01:33:02,960 --> 01:33:04,400
so let's get into this couple related

2463
01:33:04,400 --> 01:33:06,159
issues so first let's recap rats

2464
01:33:06,159 --> 01:33:07,040
relationship

2465
01:33:07,040 --> 01:33:09,520
okay so we understand the context of

2466
01:33:09,520 --> 01:33:11,440
some of these so this is a

2467
01:33:11,440 --> 01:33:13,040
slide that we've seen before in both

2468
01:33:13,040 --> 01:33:15,520
keep and rats and so the relationship

2469
01:33:15,520 --> 01:33:17,760
between keeping rats is that the t

2470
01:33:17,760 --> 01:33:20,960
agent is in a tester the tam

2471
01:33:20,960 --> 01:33:24,159
is a relying party and you might have a

2472
01:33:24,159 --> 01:33:25,120
verifier

2473
01:33:25,120 --> 01:33:28,080
that the tam uses on the back end and so

2474
01:33:28,080 --> 01:33:28,400
the

2475
01:33:28,400 --> 01:33:30,960
evidence appears in a query response

2476
01:33:30,960 --> 01:33:32,239
message

2477
01:33:32,239 --> 01:33:35,040
and then any remediation steps appear in

2478
01:33:35,040 --> 01:33:36,000
the shoot manifest

2479
01:33:36,000 --> 01:33:38,400
which is in an update message okay so

2480
01:33:38,400 --> 01:33:40,719
everybody's got the context here

2481
01:33:40,719 --> 01:33:41,920
let's go ahead and so we're talking

2482
01:33:41,920 --> 01:33:43,440
about the t message here which is that

2483
01:33:43,440 --> 01:33:44,719
the horizontal line

2484
01:33:44,719 --> 01:33:46,000
in the next couple slots we're talking

2485
01:33:46,000 --> 01:33:48,639
about evidence here and remediation sets

2486
01:33:48,639 --> 01:33:50,000
in update message all right so next

2487
01:33:50,000 --> 01:33:52,400
slide

2488
01:33:56,000 --> 01:34:00,080
okay so in rats architecture

2489
01:34:00,080 --> 01:34:02,639
rats cares about freshness and replay

2490
01:34:02,639 --> 01:34:03,520
protection so

2491
01:34:03,520 --> 01:34:06,639
freshness means how recent were the

2492
01:34:06,639 --> 01:34:08,400
values generated how recent is that

2493
01:34:08,400 --> 01:34:09,360
message generated

2494
01:34:09,360 --> 01:34:11,840
replay protection is to replay an older

2495
01:34:11,840 --> 01:34:12,560
one

2496
01:34:12,560 --> 01:34:15,040
even if it's within a very close period

2497
01:34:15,040 --> 01:34:16,000
okay

2498
01:34:16,000 --> 01:34:18,960
and so the verifier versus the tam the

2499
01:34:18,960 --> 01:34:20,960
tam is the relying parties the verifier

2500
01:34:20,960 --> 01:34:22,239
that the thing that might be

2501
01:34:22,239 --> 01:34:24,159
separated from the tam used on the back

2502
01:34:24,159 --> 01:34:26,719
end um cares about two things it cares

2503
01:34:26,719 --> 01:34:28,960
about was the evidence

2504
01:34:28,960 --> 01:34:31,040
recently signed by the attester right

2505
01:34:31,040 --> 01:34:32,639
that's the cheap agent was the evidence

2506
01:34:32,639 --> 01:34:34,000
recently signed by the tam

2507
01:34:34,000 --> 01:34:37,040
by the teep agent not an older replay of

2508
01:34:37,040 --> 01:34:37,600
evidence

2509
01:34:37,600 --> 01:34:39,040
from before something changed like

2510
01:34:39,040 --> 01:34:41,119
before it got the last um update message

2511
01:34:41,119 --> 01:34:42,800
even if it was only five seconds ago it

2512
01:34:42,800 --> 01:34:44,080
might have been before the last

2513
01:34:44,080 --> 01:34:46,719
uh update message um and so is the

2514
01:34:46,719 --> 01:34:48,320
evidence recently signed

2515
01:34:48,320 --> 01:34:50,480
the second one is the claims in the

2516
01:34:50,480 --> 01:34:52,239
evidence have some values in them

2517
01:34:52,239 --> 01:34:53,920
are the values in the claims and the

2518
01:34:53,920 --> 01:34:56,400
evidence are they recent values and not

2519
01:34:56,400 --> 01:34:58,400
obsolete values that were included in

2520
01:34:58,400 --> 01:35:00,080
the in recently signed evidence

2521
01:35:00,080 --> 01:35:01,199
right so those are the things that the

2522
01:35:01,199 --> 01:35:04,000
verifier cares about the relying party

2523
01:35:04,000 --> 01:35:05,360
which is the tam

2524
01:35:05,360 --> 01:35:08,400
the tam cares about was the attestation

2525
01:35:08,400 --> 01:35:10,400
result recently signed by the verifier

2526
01:35:10,400 --> 01:35:12,000
not an overreplay right that's outside

2527
01:35:12,000 --> 01:35:13,679
the scope of the team protocol itself

2528
01:35:13,679 --> 01:35:14,960
right because that's that

2529
01:35:14,960 --> 01:35:17,600
vertical line and are any values of

2530
01:35:17,600 --> 01:35:18,719
claims recent not

2531
01:35:18,719 --> 01:35:20,800
obsolete values and recent results now

2532
01:35:20,800 --> 01:35:22,080
some of the claim values in the

2533
01:35:22,080 --> 01:35:23,520
attestation result

2534
01:35:23,520 --> 01:35:27,119
might have come copied or derived from

2535
01:35:27,119 --> 01:35:29,360
values and the evidence and so that why

2536
01:35:29,360 --> 01:35:31,119
it's indirectly dependent on

2537
01:35:31,119 --> 01:35:34,239
the the what the verifier cares about

2538
01:35:34,239 --> 01:35:37,360
and so how recent things are is really

2539
01:35:37,360 --> 01:35:39,679
up to policy right so the owner

2540
01:35:39,679 --> 01:35:42,400
or the configurer of the verifier and

2541
01:35:42,400 --> 01:35:43,280
the tam

2542
01:35:43,280 --> 01:35:46,719
get to decide what recent means okay

2543
01:35:46,719 --> 01:35:49,119
and of course the details of how it uh

2544
01:35:49,119 --> 01:35:51,040
passes that information protocols

2545
01:35:51,040 --> 01:35:53,360
are how things are recent right what it

2546
01:35:53,360 --> 01:35:55,040
uses to make that determination

2547
01:35:55,040 --> 01:35:56,880
are up to the protocol well there's

2548
01:35:56,880 --> 01:35:58,800
three common ways and we have a protocol

2549
01:35:58,800 --> 01:36:00,560
where rats doesn't and so it's up to us

2550
01:36:00,560 --> 01:36:01,280
to decide

2551
01:36:01,280 --> 01:36:03,520
which of the three common ways we want

2552
01:36:03,520 --> 01:36:04,560
to allow so

2553
01:36:04,560 --> 01:36:07,600
next so i'm going to walk through the

2554
01:36:07,600 --> 01:36:09,119
three common ways in the rats

2555
01:36:09,119 --> 01:36:10,560
architecture so this is

2556
01:36:10,560 --> 01:36:13,600
rat's architecture uh summary for

2557
01:36:13,600 --> 01:36:16,719
cheap folks because anybody designing a

2558
01:36:16,719 --> 01:36:17,520
protocol

2559
01:36:17,520 --> 01:36:19,040
needs to have a way of accomplishing

2560
01:36:19,040 --> 01:36:20,639
those and we have a protocol

2561
01:36:20,639 --> 01:36:23,199
so we are the customer here of rats so

2562
01:36:23,199 --> 01:36:23,760
all right

2563
01:36:23,760 --> 01:36:26,239
so the first mechanism we can use and by

2564
01:36:26,239 --> 01:36:28,239
the way uh just as a uh

2565
01:36:28,239 --> 01:36:32,159
uh as to jump to a conclusion we're

2566
01:36:32,159 --> 01:36:33,280
currently using method two

2567
01:36:33,280 --> 01:36:35,440
just to be clear i'll do three methods

2568
01:36:35,440 --> 01:36:36,719
uh method number but

2569
01:36:36,719 --> 01:36:38,080
the question is whether we want to stick

2570
01:36:38,080 --> 01:36:39,440
with that or open it up for a lot more

2571
01:36:39,440 --> 01:36:40,480
than one right that's where i'm going

2572
01:36:40,480 --> 01:36:41,360
with this okay

2573
01:36:41,360 --> 01:36:43,360
so method number one is time stamps and

2574
01:36:43,360 --> 01:36:44,880
so we could

2575
01:36:44,880 --> 01:36:47,280
allow evidence and attestation results

2576
01:36:47,280 --> 01:36:48,800
right not cheap messages but evidence

2577
01:36:48,800 --> 01:36:50,400
manifestation results that include time

2578
01:36:50,400 --> 01:36:52,880
stamps okay if you do that

2579
01:36:52,880 --> 01:36:54,639
this would be appropriate for cases

2580
01:36:54,639 --> 01:36:57,119
where the tam and the heat agent have

2581
01:36:57,119 --> 01:36:58,719
synchronized clocks or at least roughly

2582
01:36:58,719 --> 01:37:00,800
synchronized clocks

2583
01:37:00,800 --> 01:37:03,440
this requires that the teep agent have a

2584
01:37:03,440 --> 01:37:05,280
trusted source of time

2585
01:37:05,280 --> 01:37:07,119
okay that source of time might be a

2586
01:37:07,119 --> 01:37:08,480
trusted clock internally

2587
01:37:08,480 --> 01:37:10,480
or on demand being able to look it up

2588
01:37:10,480 --> 01:37:12,639
from an external trusted server

2589
01:37:12,639 --> 01:37:15,040
require some protocol that's secured to

2590
01:37:15,040 --> 01:37:17,040
be able to acquire

2591
01:37:17,040 --> 01:37:19,280
that time synchronization so it might be

2592
01:37:19,280 --> 01:37:21,199
say an implementation of ntp seconds out

2593
01:37:21,199 --> 01:37:23,679
of a tee for the cheap agent

2594
01:37:23,679 --> 01:37:26,480
whatever it is it also requires having

2595
01:37:26,480 --> 01:37:27,920
claims in the evidence about the

2596
01:37:27,920 --> 01:37:30,000
signer's time sync mechanism

2597
01:37:30,000 --> 01:37:32,880
such as what's your time sink source and

2598
01:37:32,880 --> 01:37:34,239
is that something the verifier is going

2599
01:37:34,239 --> 01:37:36,800
to claim is is correct and trusted

2600
01:37:36,800 --> 01:37:38,639
um but it doesn't require any additional

2601
01:37:38,639 --> 01:37:40,480
messages or stated attestation time so

2602
01:37:40,480 --> 01:37:41,840
in particular it does not

2603
01:37:41,840 --> 01:37:44,880
require asking the ten having the agent

2604
01:37:44,880 --> 01:37:45,920
asked to tam

2605
01:37:45,920 --> 01:37:48,239
for a nonce or a challenge for the for

2606
01:37:48,239 --> 01:37:50,159
the attestation for the evidence right

2607
01:37:50,159 --> 01:37:51,440
so you can get rid of an extra round

2608
01:37:51,440 --> 01:37:53,280
trip here which is why a lot of things

2609
01:37:53,280 --> 01:37:54,719
you're interested in doing timestamp

2610
01:37:54,719 --> 01:37:55,199
stuff

2611
01:37:55,199 --> 01:37:56,560
but it's only applicable to cases that

2612
01:37:56,560 --> 01:37:58,400
you have something like a secure clock

2613
01:37:58,400 --> 01:38:00,080
uh on the on the agent so it's not for

2614
01:38:00,080 --> 01:38:01,920
everybody but it can be a lot more

2615
01:38:01,920 --> 01:38:03,360
efficient for cases we already have this

2616
01:38:03,360 --> 01:38:04,560
for some reason so that's method number

2617
01:38:04,560 --> 01:38:07,679
one is time stamps so next slide

2618
01:38:07,679 --> 01:38:09,440
method number two is the one that we're

2619
01:38:09,440 --> 01:38:11,520
using now which is nonces

2620
01:38:11,520 --> 01:38:12,880
are the ones that we already allow right

2621
01:38:12,880 --> 01:38:15,520
now which is the receiver

2622
01:38:15,520 --> 01:38:17,600
which in this case the receiver of the t

2623
01:38:17,600 --> 01:38:18,960
message would be the tam

2624
01:38:18,960 --> 01:38:20,960
right requires the sender being the

2625
01:38:20,960 --> 01:38:22,800
agent has to include announce and

2626
01:38:22,800 --> 01:38:24,239
assigned evidence

2627
01:38:24,239 --> 01:38:26,320
and so the agent doesn't have to have

2628
01:38:26,320 --> 01:38:28,000
any time sync he doesn't have to have a

2629
01:38:28,000 --> 01:38:30,960
secure clock in the tee

2630
01:38:30,960 --> 01:38:32,960
but it does means that tam has to keep

2631
01:38:32,960 --> 01:38:34,880
state whenever it generates a nonce

2632
01:38:34,880 --> 01:38:37,840
or a token right it has to remember that

2633
01:38:37,840 --> 01:38:38,560
state

2634
01:38:38,560 --> 01:38:41,040
and so if you have a very large number

2635
01:38:41,040 --> 01:38:41,840
of ten

2636
01:38:41,840 --> 01:38:44,159
of agents per tam it can become a

2637
01:38:44,159 --> 01:38:45,679
scalability issue that says how many

2638
01:38:45,679 --> 01:38:47,920
agents can you support simultaneously

2639
01:38:47,920 --> 01:38:49,520
doing messages messaging changes with

2640
01:38:49,520 --> 01:38:51,199
because you have to keep not state

2641
01:38:51,199 --> 01:38:54,639
for every single one of them

2642
01:38:54,639 --> 01:38:56,080
um at least in the classic

2643
01:38:56,080 --> 01:38:58,239
implementation analysis okay

2644
01:38:58,239 --> 01:39:00,639
uh and the tam also needs a clock to

2645
01:39:00,639 --> 01:39:02,560
know when to expire the nonces although

2646
01:39:02,560 --> 01:39:03,840
for most times that's not really a big

2647
01:39:03,840 --> 01:39:04,719
deal

2648
01:39:04,719 --> 01:39:06,159
uh and it doesn't have to be synced with

2649
01:39:06,159 --> 01:39:07,679
anybody it's just a local clock right

2650
01:39:07,679 --> 01:39:09,199
tell me how much time since luke that's

2651
01:39:09,199 --> 01:39:10,960
fine so that part for teep is not a big

2652
01:39:10,960 --> 01:39:13,119
deal

2653
01:39:13,119 --> 01:39:15,199
and then finally this one only addresses

2654
01:39:15,199 --> 01:39:16,960
freshness of the evidence so how

2655
01:39:16,960 --> 01:39:18,960
how recently was it signed it was signed

2656
01:39:18,960 --> 01:39:20,560
since i sent you the nonce

2657
01:39:20,560 --> 01:39:22,639
this one does not address in any way

2658
01:39:22,639 --> 01:39:24,719
knowing whether the values in the claims

2659
01:39:24,719 --> 01:39:26,000
are recent with a time

2660
01:39:26,000 --> 01:39:27,840
stamps you could include a time stamp

2661
01:39:27,840 --> 01:39:29,760
inside the claim itself

2662
01:39:29,760 --> 01:39:31,360
you can't do that with nonsense not

2663
01:39:31,360 --> 01:39:33,360
without introducing a hybrid which uses

2664
01:39:33,360 --> 01:39:35,280
nonsense and time stamps together so

2665
01:39:35,280 --> 01:39:36,880
nonsense alone

2666
01:39:36,880 --> 01:39:39,600
only saw freshness of the evidence it

2667
01:39:39,600 --> 01:39:40,080
did not

2668
01:39:40,080 --> 01:39:42,000
solve the ability to know whether the

2669
01:39:42,000 --> 01:39:43,600
claim value itself was there

2670
01:39:43,600 --> 01:39:45,360
the rats architecture does talk about

2671
01:39:45,360 --> 01:39:48,080
ways to deal with that in the non's case

2672
01:39:48,080 --> 01:39:51,360
uh example you could include how much

2673
01:39:51,360 --> 01:39:54,239
if you have a non-synchronized clock

2674
01:39:54,239 --> 01:39:55,199
that is secure

2675
01:39:55,199 --> 01:39:58,159
in the teat agent you could include time

2676
01:39:58,159 --> 01:39:58,800
uh

2677
01:39:58,800 --> 01:40:01,360
delta inside the evidence and that can

2678
01:40:01,360 --> 01:40:03,440
be used in a secure way

2679
01:40:03,440 --> 01:40:04,560
and you don't have to compare it with

2680
01:40:04,560 --> 01:40:06,400
any time stamp but just time sense and

2681
01:40:06,400 --> 01:40:07,679
if you can trust that

2682
01:40:07,679 --> 01:40:10,080
but that requires at least a clock not

2683
01:40:10,080 --> 01:40:11,440
necessarily a synchronized clock

2684
01:40:11,440 --> 01:40:13,280
and so that might not be applicable so

2685
01:40:13,280 --> 01:40:15,040
this is a is a partial solution with

2686
01:40:15,040 --> 01:40:16,960
balances this is what we do now

2687
01:40:16,960 --> 01:40:22,000
next slide the third method

2688
01:40:22,000 --> 01:40:24,320
yeah right that's to michael that's

2689
01:40:24,320 --> 01:40:26,960
exactly what i'm getting to is yes so

2690
01:40:26,960 --> 01:40:29,199
hold it i'll get there all right um the

2691
01:40:29,199 --> 01:40:30,000
third method

2692
01:40:30,000 --> 01:40:33,040
is uh epic handles uh potentially we'll

2693
01:40:33,040 --> 01:40:34,880
call these epic ids this is a discussion

2694
01:40:34,880 --> 01:40:36,400
in rats epic

2695
01:40:36,400 --> 01:40:40,719
psks these are um unpredictable values

2696
01:40:40,719 --> 01:40:44,159
that uh the agent and the teep both get

2697
01:40:44,159 --> 01:40:46,159
periodically from potentially a third

2698
01:40:46,159 --> 01:40:48,560
party it's unpredictable so you can't

2699
01:40:48,560 --> 01:40:49,840
so that's how you know it's recent

2700
01:40:49,840 --> 01:40:50,800
because you couldn't predict it in

2701
01:40:50,800 --> 01:40:52,320
advance they both get it from a trusted

2702
01:40:52,320 --> 01:40:53,040
source

2703
01:40:53,040 --> 01:40:54,719
and it's just an id that lasts during

2704
01:40:54,719 --> 01:40:56,560
that epic and so you can

2705
01:40:56,560 --> 01:40:59,360
include this in lieu of a nonce and so

2706
01:40:59,360 --> 01:41:01,119
you can do comparison that says does it

2707
01:41:01,119 --> 01:41:03,280
match the same one that i have so this

2708
01:41:03,280 --> 01:41:05,679
is much more scalable than a nonce in

2709
01:41:05,679 --> 01:41:07,119
the sense of the tam

2710
01:41:07,119 --> 01:41:09,199
only has you know say two of these the

2711
01:41:09,199 --> 01:41:11,280
current one plus the previous one

2712
01:41:11,280 --> 01:41:13,600
and all of the agents are using the same

2713
01:41:13,600 --> 01:41:14,880
value during the same

2714
01:41:14,880 --> 01:41:17,440
period so let's say your epic lasts i

2715
01:41:17,440 --> 01:41:19,360
don't know 15 minutes or something

2716
01:41:19,360 --> 01:41:21,440
every message sent within 15 minutes

2717
01:41:21,440 --> 01:41:23,199
period can be using exactly the same

2718
01:41:23,199 --> 01:41:24,239
epic id

2719
01:41:24,239 --> 01:41:26,719
so that's why it's a lot more scalable

2720
01:41:26,719 --> 01:41:28,560
of course you get a lot less resolution

2721
01:41:28,560 --> 01:41:29,840
in how recent things are

2722
01:41:29,840 --> 01:41:31,360
because you can only say if something is

2723
01:41:31,360 --> 01:41:34,080
recent based on the entire epic and so

2724
01:41:34,080 --> 01:41:37,040
if your epic id if your epic period was

2725
01:41:37,040 --> 01:41:37,760
say

2726
01:41:37,760 --> 01:41:40,560
24 hours then you can only make a

2727
01:41:40,560 --> 01:41:41,440
determination

2728
01:41:41,440 --> 01:41:43,040
that the thing was sent sometime in the

2729
01:41:43,040 --> 01:41:44,639
last 24 hours right

2730
01:41:44,639 --> 01:41:46,960
so yeah you're up to the frequency of

2731
01:41:46,960 --> 01:41:48,080
whatever the uh

2732
01:41:48,080 --> 01:41:50,400
epic id distributor is and so that's the

2733
01:41:50,400 --> 01:41:51,760
only disadvantage here is you lose some

2734
01:41:51,760 --> 01:41:52,880
granularity

2735
01:41:52,880 --> 01:41:56,239
but what you gain is you gain the uh

2736
01:41:56,239 --> 01:41:58,159
a lot less state and you still don't

2737
01:41:58,159 --> 01:41:59,840
have an extra round trip to require the

2738
01:41:59,840 --> 01:42:01,119
knots and so

2739
01:42:01,119 --> 01:42:02,960
the point of these is that all three of

2740
01:42:02,960 --> 01:42:04,400
these are

2741
01:42:04,400 --> 01:42:06,560
that no single one of these is strictly

2742
01:42:06,560 --> 01:42:07,679
better than the others

2743
01:42:07,679 --> 01:42:09,679
right there's always some metric in

2744
01:42:09,679 --> 01:42:12,080
which one of the other methods is better

2745
01:42:12,080 --> 01:42:15,199
right and so um

2746
01:42:15,199 --> 01:42:17,760
what that means is that uh if we make a

2747
01:42:17,760 --> 01:42:19,920
choice we have to choose to either

2748
01:42:19,920 --> 01:42:22,159
pick one which is what we do right now

2749
01:42:22,159 --> 01:42:24,000
right now we pick method two

2750
01:42:24,000 --> 01:42:25,520
or we have to say we're going to

2751
01:42:25,520 --> 01:42:28,080
potentially allow more than one choice

2752
01:42:28,080 --> 01:42:29,520
in different implementations so like

2753
01:42:29,520 --> 01:42:31,360
what we did for crypto suites right we

2754
01:42:31,360 --> 01:42:32,239
said

2755
01:42:32,239 --> 01:42:35,040
you can have uh two of them that are

2756
01:42:35,040 --> 01:42:36,639
mandatory to implement on the tam and

2757
01:42:36,639 --> 01:42:38,080
the agent gets to pick

2758
01:42:38,080 --> 01:42:40,080
okay and so that's really the question

2759
01:42:40,080 --> 01:42:41,360
if you go to that on the next slide

2760
01:42:41,360 --> 01:42:43,839
please

2761
01:42:45,199 --> 01:42:48,560
is uh no okay i stay on the previous one

2762
01:42:48,560 --> 01:42:50,159
um because i guess that this is a

2763
01:42:50,159 --> 01:42:52,000
different issue so let me just ask this

2764
01:42:52,000 --> 01:42:52,400
how

2765
01:42:52,400 --> 01:42:55,520
okay uh you go back to slide 16.

2766
01:42:55,520 --> 01:42:58,480
um so the question is do we continue to

2767
01:42:58,480 --> 01:43:00,320
stick with a nonce only approach

2768
01:43:00,320 --> 01:43:02,080
okay which does have the extra round

2769
01:43:02,080 --> 01:43:04,080
trip and makes the tam

2770
01:43:04,080 --> 01:43:06,159
have to require a bunch of state and

2771
01:43:06,159 --> 01:43:07,840
have scalability potential issues in

2772
01:43:07,840 --> 01:43:09,280
some use cases

2773
01:43:09,280 --> 01:43:11,280
or do we want to be more flexible and

2774
01:43:11,280 --> 01:43:12,800
say that our protocol

2775
01:43:12,800 --> 01:43:15,119
is capable of using multiple of these in

2776
01:43:15,119 --> 01:43:16,719
which case we might make a decision like

2777
01:43:16,719 --> 01:43:19,360
we did for cypher suites it says

2778
01:43:19,360 --> 01:43:21,360
one or more of these are mandatory on

2779
01:43:21,360 --> 01:43:22,560
the tam

2780
01:43:22,560 --> 01:43:25,600
and uh and and you know

2781
01:43:25,600 --> 01:43:28,239
the agent can pick or vice versa or

2782
01:43:28,239 --> 01:43:29,280
whatever

2783
01:43:29,280 --> 01:43:32,400
so again in the hackathons uh we've

2784
01:43:32,400 --> 01:43:33,440
started to run into

2785
01:43:33,440 --> 01:43:35,440
gosh it sure would be nice if the tam

2786
01:43:35,440 --> 01:43:37,840
was a lot less stateful than it is now

2787
01:43:37,840 --> 01:43:39,360
and you'll see that in comments from

2788
01:43:39,360 --> 01:43:42,719
ming and me and folks where uh the nonce

2789
01:43:42,719 --> 01:43:43,440
approach

2790
01:43:43,440 --> 01:43:45,119
by the way when we say nons and t but

2791
01:43:45,119 --> 01:43:46,719
also applies to tokens right so that's

2792
01:43:46,719 --> 01:43:47,760
that's the issue here

2793
01:43:47,760 --> 01:43:49,760
and whether it's non if attestation is

2794
01:43:49,760 --> 01:43:51,679
used or token of attestation is not used

2795
01:43:51,679 --> 01:43:54,080
same thing

2796
01:43:54,639 --> 01:43:58,080
all right so i guess my personal

2797
01:43:58,080 --> 01:44:00,000
preference as an implementer

2798
01:44:00,000 --> 01:44:03,119
is i would love to use uh

2799
01:44:03,119 --> 01:44:06,960
maybe method number three as allowed

2800
01:44:06,960 --> 01:44:08,400
and of course you'd have to have some

2801
01:44:08,400 --> 01:44:10,560
way of doing capability negotiation

2802
01:44:10,560 --> 01:44:12,400
like you do for cypher suites to say how

2803
01:44:12,400 --> 01:44:13,440
you make sure that you're picking the

2804
01:44:13,440 --> 01:44:14,800
same approach

2805
01:44:14,800 --> 01:44:17,280
but uh gosh something like method number

2806
01:44:17,280 --> 01:44:18,000
three would be

2807
01:44:18,000 --> 01:44:20,400
would still allow use with constrained

2808
01:44:20,400 --> 01:44:22,400
keep agents that might not have secure

2809
01:44:22,400 --> 01:44:23,360
clocks

2810
01:44:23,360 --> 01:44:26,560
um but uh still allow scalability and so

2811
01:44:26,560 --> 01:44:27,040
if you

2812
01:44:27,040 --> 01:44:28,960
said if you were to allow both two and

2813
01:44:28,960 --> 01:44:30,719
three for example

2814
01:44:30,719 --> 01:44:34,960
um then the tam um

2815
01:44:34,960 --> 01:44:38,639
can uh use uh epic handles

2816
01:44:38,639 --> 01:44:40,480
for everybody that's you know it for

2817
01:44:40,480 --> 01:44:42,080
cases that you don't care about

2818
01:44:42,080 --> 01:44:46,320
strict um uh

2819
01:44:46,320 --> 01:44:50,320
you know um recency requirements more

2820
01:44:50,320 --> 01:44:51,840
more strict than the handle distributor

2821
01:44:51,840 --> 01:44:53,760
uses um

2822
01:44:53,760 --> 01:44:55,600
and be able to fall back to nonsense or

2823
01:44:55,600 --> 01:44:57,600
something like that so i guess i'm i'm

2824
01:44:57,600 --> 01:44:59,119
wondering if we want to open things up

2825
01:44:59,119 --> 01:45:00,320
more than we are right now

2826
01:45:00,320 --> 01:45:03,360
to make implementations better so that's

2827
01:45:03,360 --> 01:45:05,040
my question i hope i hope i just

2828
01:45:05,040 --> 01:45:06,320
answered your question michael about

2829
01:45:06,320 --> 01:45:07,760
where i was going with this is to should

2830
01:45:07,760 --> 01:45:09,520
we change the peak protocol to support a

2831
01:45:09,520 --> 01:45:11,119
method other than two

2832
01:45:11,119 --> 01:45:13,199
um even if we retain also keeping method

2833
01:45:13,199 --> 01:45:17,679
number two is allowed so

2834
01:45:17,679 --> 01:45:18,800
i'm especially interested in hearing

2835
01:45:18,800 --> 01:45:21,199
from other implementers as to

2836
01:45:21,199 --> 01:45:23,760
uh what they think because you know in

2837
01:45:23,760 --> 01:45:24,719
the

2838
01:45:24,719 --> 01:45:26,960
in the cipher suite analogy right we

2839
01:45:26,960 --> 01:45:29,440
tried to keep the agent simple

2840
01:45:29,440 --> 01:45:31,040
and putting the complexity on the tam

2841
01:45:31,040 --> 01:45:33,679
side by saying the agent gets to pick

2842
01:45:33,679 --> 01:45:35,360
whichever one is the best for it

2843
01:45:35,360 --> 01:45:36,400
and the tam had to do with the

2844
01:45:36,400 --> 01:45:37,520
complexity of dealing with multiple

2845
01:45:37,520 --> 01:45:39,679
choices so

2846
01:45:39,679 --> 01:45:42,159
uh and thomas said it could make it a

2847
01:45:42,159 --> 01:45:44,239
verifier problem we're up in tams

2848
01:45:44,239 --> 01:45:47,520
um so let me respond to thomas um if we

2849
01:45:47,520 --> 01:45:48,639
go back to that first

2850
01:45:48,639 --> 01:45:51,199
diagram the terror about the that had

2851
01:45:51,199 --> 01:45:52,400
the the

2852
01:45:52,400 --> 01:45:55,440
uh relationship between the the picture

2853
01:45:55,440 --> 01:45:59,040
um it actually applies to to uh both

2854
01:45:59,040 --> 01:46:00,880
uh make it a verifier problem rather

2855
01:46:00,880 --> 01:46:02,239
than the tams

2856
01:46:02,239 --> 01:46:05,679
um for the evidence you are right thomas

2857
01:46:05,679 --> 01:46:07,760
for the attestation results the tan

2858
01:46:07,760 --> 01:46:09,440
still has scalability issues there on

2859
01:46:09,440 --> 01:46:11,440
the attestation results so

2860
01:46:11,440 --> 01:46:13,440
you're right you could do something like

2861
01:46:13,440 --> 01:46:15,600
um make it the verifiers

2862
01:46:15,600 --> 01:46:18,480
issue for scaling the tester for

2863
01:46:18,480 --> 01:46:19,840
skilling the evidence

2864
01:46:19,840 --> 01:46:21,440
and use a different approach in the

2865
01:46:21,440 --> 01:46:22,800
attestation results you could do

2866
01:46:22,800 --> 01:46:24,639
something like that

2867
01:46:24,639 --> 01:46:28,400
but um there's also

2868
01:46:37,840 --> 01:46:39,760
the same server or even the same

2869
01:46:39,760 --> 01:46:41,280
influencer implementation

2870
01:46:41,280 --> 01:46:42,719
and so it doesn't really solve the

2871
01:46:42,719 --> 01:46:46,400
problem thomas um

2872
01:46:46,960 --> 01:46:48,560
of scalability issues right where

2873
01:46:48,560 --> 01:46:50,639
handles and timestamps both solve

2874
01:46:50,639 --> 01:46:52,159
scalability issues

2875
01:46:52,159 --> 01:46:55,040
at the expense of of you know requiring

2876
01:46:55,040 --> 01:46:56,400
either synchronized clocks or

2877
01:46:56,400 --> 01:47:00,320
less granularity uh

2878
01:47:00,320 --> 01:47:02,320
uh isobusan asks and can work as a

2879
01:47:02,320 --> 01:47:04,239
handle distributor absolutely

2880
01:47:04,239 --> 01:47:06,159
uh and again where i'm going to try to

2881
01:47:06,159 --> 01:47:08,320
stop using the word handle because the t

2882
01:47:08,320 --> 01:47:09,600
the rat's working group said we're not

2883
01:47:09,600 --> 01:47:10,639
gonna use the word handle they're gonna

2884
01:47:10,639 --> 01:47:12,480
rename it so i'm gonna use epic id

2885
01:47:12,480 --> 01:47:14,480
uh i don't know what the rats is gonna

2886
01:47:14,480 --> 01:47:16,320
use but that was one of like four terms

2887
01:47:16,320 --> 01:47:17,520
that were thrown out there and since

2888
01:47:17,520 --> 01:47:18,880
here i say epic handles i'll call it

2889
01:47:18,880 --> 01:47:19,600
epic id

2890
01:47:19,600 --> 01:47:21,920
just for people understand yeah probably

2891
01:47:21,920 --> 01:47:23,760
epic identifier thanks michael

2892
01:47:23,760 --> 01:47:27,280
um so contam work is a handle id

2893
01:47:27,280 --> 01:47:29,199
distributor absolutely so all of their

2894
01:47:29,199 --> 01:47:30,800
roles in the rats architecture could be

2895
01:47:30,800 --> 01:47:32,159
combined with other roles they're

2896
01:47:32,159 --> 01:47:34,080
they're conceptually separate

2897
01:47:34,080 --> 01:47:36,320
the handle the the epic id distributor

2898
01:47:36,320 --> 01:47:38,000
could be the same as the tam it could be

2899
01:47:38,000 --> 01:47:39,520
the same as the verifier it could be a

2900
01:47:39,520 --> 01:47:40,480
separate entity

2901
01:47:40,480 --> 01:47:42,960
just like your time sync source right

2902
01:47:42,960 --> 01:47:44,880
you're if you're using ntp sec your ntp

2903
01:47:44,880 --> 01:47:45,600
server

2904
01:47:45,600 --> 01:47:48,800
could be the same as your uh

2905
01:47:48,800 --> 01:47:50,719
tam or could be the same as your

2906
01:47:50,719 --> 01:47:52,719
verifier you know combined in theories

2907
01:47:52,719 --> 01:47:54,480
but it says conceptually separate

2908
01:47:54,480 --> 01:47:56,320
implementation even if it's

2909
01:47:56,320 --> 01:47:57,920
even if it's combined into the same uh

2910
01:47:57,920 --> 01:48:00,800
server your service

2911
01:48:03,199 --> 01:48:06,800
okay uh any comments preferences here

2912
01:48:06,800 --> 01:48:07,760
because this one

2913
01:48:07,760 --> 01:48:09,760
affects a lot of other stuff as to

2914
01:48:09,760 --> 01:48:13,119
whether we allow more than just nonsense

2915
01:48:13,119 --> 01:48:15,600
and again when we say nonsense not slash

2916
01:48:15,600 --> 01:48:17,040
token in the teeps but in the

2917
01:48:17,040 --> 01:48:20,159
spec a token is a nonce um

2918
01:48:20,159 --> 01:48:21,199
not just for just for the

2919
01:48:21,199 --> 01:48:22,800
non-attestation case but all the same

2920
01:48:22,800 --> 01:48:25,600
constraints of life

2921
01:48:25,920 --> 01:48:27,520
and these three approaches could be used

2922
01:48:27,520 --> 01:48:29,119
without attestations three approaches

2923
01:48:29,119 --> 01:48:30,239
here could be used

2924
01:48:30,239 --> 01:48:34,000
if in lieu of uh tokens uh we could use

2925
01:48:34,000 --> 01:48:36,719
epic ids in lieu of tokens in in the

2926
01:48:36,719 --> 01:48:38,639
team messages in theory so

2927
01:48:38,639 --> 01:48:40,560
um so not seeing anybody jump into queue

2928
01:48:40,560 --> 01:48:41,920
it sounds like nobody has a strong

2929
01:48:41,920 --> 01:48:43,920
opinion at this point so

2930
01:48:43,920 --> 01:48:45,920
um yeah the dance was added in the tea

2931
01:48:45,920 --> 01:48:48,320
protocol to support the riots case right

2932
01:48:48,320 --> 01:48:51,440
um i have an opinion because i would

2933
01:48:51,440 --> 01:48:53,119
love to get to a point to not have to do

2934
01:48:53,119 --> 01:48:55,440
uh tokens in the first place um for the

2935
01:48:55,440 --> 01:48:57,920
main use cases that i care about so

2936
01:48:57,920 --> 01:48:59,040
khano says i think we should use

2937
01:48:59,040 --> 01:49:00,400
whatever rats does well

2938
01:49:00,400 --> 01:49:01,840
rats is not going to make this choice

2939
01:49:01,840 --> 01:49:03,199
and the reason for that is rats is not

2940
01:49:03,199 --> 01:49:04,480
charted through a protocol and this is a

2941
01:49:04,480 --> 01:49:05,760
protocol choice

2942
01:49:05,760 --> 01:49:07,199
the reps architecture has to support

2943
01:49:07,199 --> 01:49:09,119
multiple protocols the rats architecture

2944
01:49:09,119 --> 01:49:10,639
has to explain how it could work with

2945
01:49:10,639 --> 01:49:12,800
protocols to do any of these three

2946
01:49:12,800 --> 01:49:14,159
and that's what it does right now so ras

2947
01:49:14,159 --> 01:49:15,440
doesn't get to make this choice because

2948
01:49:15,440 --> 01:49:16,400
rats is chartered

2949
01:49:16,400 --> 01:49:17,920
it's disallowed by charter from the

2950
01:49:17,920 --> 01:49:20,480
doing protocol

2951
01:49:21,840 --> 01:49:22,880
so they're not going to solve this

2952
01:49:22,880 --> 01:49:23,920
sephora they're not going to answer this

2953
01:49:23,920 --> 01:49:28,000
for us

2954
01:49:28,000 --> 01:49:31,599
um all right so

2955
01:49:31,599 --> 01:49:33,119
uh daniel asks which is the one that i

2956
01:49:33,119 --> 01:49:36,159
prefer um

2957
01:49:36,159 --> 01:49:38,480
right now from talking to the people at

2958
01:49:38,480 --> 01:49:40,560
so i'm now going to put on a microsoft

2959
01:49:40,560 --> 01:49:42,000
hat not as a document editor

2960
01:49:42,000 --> 01:49:44,320
hat because you're asking about uh which

2961
01:49:44,320 --> 01:49:45,360
one i prefer

2962
01:49:45,360 --> 01:49:47,040
as a documentary i prefer that one of

2963
01:49:47,040 --> 01:49:48,960
the implementations prefer

2964
01:49:48,960 --> 01:49:50,880
and uh if different implementations

2965
01:49:50,880 --> 01:49:52,159
prefer different ones then i prefer

2966
01:49:52,159 --> 01:49:53,520
supporting multiple of them

2967
01:49:53,520 --> 01:49:55,599
okay now if you ask me as an implementer

2968
01:49:55,599 --> 01:49:57,199
or somebody representing an implementer

2969
01:49:57,199 --> 01:49:58,639
which one i prefer

2970
01:49:58,639 --> 01:50:00,320
i think when i chatted with people that

2971
01:50:00,320 --> 01:50:02,159
own various microsoft services

2972
01:50:02,159 --> 01:50:03,840
they kind of like the id since they had

2973
01:50:03,840 --> 01:50:05,599
not implemented the rat stuff yet

2974
01:50:05,599 --> 01:50:09,199
um uh the feedback was the method number

2975
01:50:09,199 --> 01:50:09,760
three

2976
01:50:09,760 --> 01:50:12,320
is actually quite attractive they said

2977
01:50:12,320 --> 01:50:14,400
for cases related to teep

2978
01:50:14,400 --> 01:50:16,560
um and the reason for that is it does

2979
01:50:16,560 --> 01:50:18,560
not have any strict requirements on

2980
01:50:18,560 --> 01:50:20,320
having secure clocks

2981
01:50:20,320 --> 01:50:22,159
and it has the least state requirement

2982
01:50:22,159 --> 01:50:23,679
given the lack of

2983
01:50:23,679 --> 01:50:25,199
a secure clock requirements so number

2984
01:50:25,199 --> 01:50:26,960
one requires a secure clock

2985
01:50:26,960 --> 01:50:29,440
number two um require has a state

2986
01:50:29,440 --> 01:50:31,199
requirement this one has neither

2987
01:50:31,199 --> 01:50:34,159
and so method number three the epic ids

2988
01:50:34,159 --> 01:50:35,760
they said was the most attractive given

2989
01:50:35,760 --> 01:50:36,960
that they have not implemented it yet

2990
01:50:36,960 --> 01:50:38,800
and so that's not a

2991
01:50:38,800 --> 01:50:41,119
decision that was a ah that one looks

2992
01:50:41,119 --> 01:50:42,880
pretty cool we might consider doing that

2993
01:50:42,880 --> 01:50:44,800
one so

2994
01:50:44,800 --> 01:50:46,719
i see seren says the same thing i prefer

2995
01:50:46,719 --> 01:50:48,320
the epic so

2996
01:50:48,320 --> 01:50:52,159
um so i'd say between two epics sorry

2997
01:50:52,159 --> 01:50:54,719
between two implementers

2998
01:50:54,719 --> 01:50:57,440
that like the epic handle approach that

2999
01:50:57,440 --> 01:50:59,520
that might be a consensus to at least

3000
01:50:59,520 --> 01:51:03,760
allow epic ids whether we switch to that

3001
01:51:03,760 --> 01:51:06,320
only i guess is a different question but

3002
01:51:06,320 --> 01:51:07,520
at least to allow it

3003
01:51:07,520 --> 01:51:11,199
okay um

3004
01:51:11,599 --> 01:51:13,280
all right so i guess we can continue

3005
01:51:13,280 --> 01:51:15,040
discussion on the list but this one does

3006
01:51:15,040 --> 01:51:16,880
affect a lot of other stuff and so i see

3007
01:51:16,880 --> 01:51:18,480
we got like nine minutes left but i

3008
01:51:18,480 --> 01:51:20,080
think if we could get a direction on

3009
01:51:20,080 --> 01:51:21,199
this one

3010
01:51:21,199 --> 01:51:23,520
this would make a lot of other stuff be

3011
01:51:23,520 --> 01:51:24,639
uh

3012
01:51:24,639 --> 01:51:26,000
more straightforward because otherwise

3013
01:51:26,000 --> 01:51:27,520
leaving this one open it will leave a

3014
01:51:27,520 --> 01:51:35,840
bunch of other open issues open too

3015
01:51:37,119 --> 01:51:39,599
yes correct that brennan is correct um

3016
01:51:39,599 --> 01:51:40,960
so the i'm just going to echo that at

3017
01:51:40,960 --> 01:51:42,400
the mic here

3018
01:51:42,400 --> 01:51:45,760
one of the issues so the epic ids

3019
01:51:45,760 --> 01:51:48,480
is not necessarily better than the other

3020
01:51:48,480 --> 01:51:50,400
ones in all metrics one was how

3021
01:51:50,400 --> 01:51:53,280
um how much granularity you get in terms

3022
01:51:53,280 --> 01:51:54,320
of recency

3023
01:51:54,320 --> 01:51:56,560
because you know your policy is limited

3024
01:51:56,560 --> 01:51:58,480
by how frequently the epic ids are

3025
01:51:58,480 --> 01:51:59,920
distributed

3026
01:51:59,920 --> 01:52:01,679
but the other one is called out in the

3027
01:52:01,679 --> 01:52:03,119
rats architecture document right now

3028
01:52:03,119 --> 01:52:04,719
that brennan does point out here which

3029
01:52:04,719 --> 01:52:06,480
is there's an attack

3030
01:52:06,480 --> 01:52:09,920
that if you can cause the epic ids to be

3031
01:52:09,920 --> 01:52:11,679
delayed in the network

3032
01:52:11,679 --> 01:52:13,280
okay so in other words if i can somehow

3033
01:52:13,280 --> 01:52:15,520
say dos the epic id distributor

3034
01:52:15,520 --> 01:52:17,360
such that the epic ids get distributed

3035
01:52:17,360 --> 01:52:19,199
to the agent and the tam

3036
01:52:19,199 --> 01:52:22,400
uh that you that they can't be the new

3037
01:52:22,400 --> 01:52:24,960
ones can't be distributed for 24 hours

3038
01:52:24,960 --> 01:52:26,880
then both the tam and the agent continue

3039
01:52:26,880 --> 01:52:28,719
to use the one that's 24 hours old

3040
01:52:28,719 --> 01:52:32,159
and so i can increase that replay window

3041
01:52:32,159 --> 01:52:35,280
um for the for as much as i can delay

3042
01:52:35,280 --> 01:52:37,520
okay and so that's the delay attack that

3043
01:52:37,520 --> 01:52:39,360
it's susceptible to

3044
01:52:39,360 --> 01:52:40,880
and so but that requires me basically

3045
01:52:40,880 --> 01:52:42,400
delaying it on both sides because

3046
01:52:42,400 --> 01:52:43,520
otherwise you can detect the

3047
01:52:43,520 --> 01:52:45,360
attack and and mitigate it but as long

3048
01:52:45,360 --> 01:52:48,080
as you can delay it say by dosing at

3049
01:52:48,080 --> 01:52:51,360
the epic id distributor um then you can

3050
01:52:51,360 --> 01:52:53,280
open that window to the attackers you

3051
01:52:53,280 --> 01:52:55,520
know wins so

3052
01:52:55,520 --> 01:52:57,599
so that's the downside here that's why

3053
01:52:57,599 --> 01:52:59,040
saying well let's just switch and only

3054
01:52:59,040 --> 01:53:00,639
support epic ids

3055
01:53:00,639 --> 01:53:02,320
some use cases might say i don't want

3056
01:53:02,320 --> 01:53:04,000
that and if we want teep to be used in

3057
01:53:04,000 --> 01:53:05,599
all use cases

3058
01:53:05,599 --> 01:53:08,000
then maybe one might consider supporting

3059
01:53:08,000 --> 01:53:09,520
you know two or even all three of these

3060
01:53:09,520 --> 01:53:10,239
methods in t

3061
01:53:10,239 --> 01:53:11,920
but that's more protocol complexity so

3062
01:53:11,920 --> 01:53:14,719
that's the trade-off

3063
01:53:15,119 --> 01:53:18,480
yeah so right so method number three is

3064
01:53:18,480 --> 01:53:20,400
not the best one from a security

3065
01:53:20,400 --> 01:53:21,920
perspective because you lose some

3066
01:53:21,920 --> 01:53:22,639
security

3067
01:53:22,639 --> 01:53:24,080
protections and granularity that you're

3068
01:53:24,080 --> 01:53:26,800
getting out of the other two

3069
01:53:26,800 --> 01:53:28,719
but you're again it's all trade-offs

3070
01:53:28,719 --> 01:53:30,400
right there's no single one size fits

3071
01:53:30,400 --> 01:53:31,520
all and that's why this one's a tough

3072
01:53:31,520 --> 01:53:32,560
choice so

3073
01:53:32,560 --> 01:53:35,119
that's why if it's me as a spec writer i

3074
01:53:35,119 --> 01:53:36,239
might be inclined to i'll

3075
01:53:36,239 --> 01:53:38,320
have the spec support multiple methods

3076
01:53:38,320 --> 01:53:40,000
for different use cases

3077
01:53:40,000 --> 01:53:42,159
and let one side pick one so that you

3078
01:53:42,159 --> 01:53:43,199
can keep

3079
01:53:43,199 --> 01:53:46,638
supporting constrained nodes

3080
01:53:48,719 --> 01:53:51,520
all right so i guess let's keep having

3081
01:53:51,520 --> 01:53:51,840
the

3082
01:53:51,840 --> 01:53:53,840
discussion on the in the chat and on the

3083
01:53:53,840 --> 01:53:54,960
list because it sounds like we're not

3084
01:53:54,960 --> 01:53:56,159
going to be able to close this as this

3085
01:53:56,159 --> 01:53:56,639
meeting

3086
01:53:56,639 --> 01:53:59,679
although i do see some support so

3087
01:53:59,679 --> 01:54:03,280
let's keep going yeah so dave time check

3088
01:54:03,280 --> 01:54:04,719
there's seven minutes left

3089
01:54:04,719 --> 01:54:08,400
oh okay quran just went off the queue so

3090
01:54:08,400 --> 01:54:10,239
all right gotcha all right so let's keep

3091
01:54:10,239 --> 01:54:12,080
going let's take it to the list then

3092
01:54:12,080 --> 01:54:14,000
nancy is that right

3093
01:54:14,000 --> 01:54:16,320
yeah i think we should all right so

3094
01:54:16,320 --> 01:54:17,520
we'll keep this one open but you'll see

3095
01:54:17,520 --> 01:54:18,719
that one will affect the next couple of

3096
01:54:18,719 --> 01:54:19,920
issues too

3097
01:54:19,920 --> 01:54:21,920
um and so let's see what else we can at

3098
01:54:21,920 --> 01:54:23,199
least get out there to be part of that

3099
01:54:23,199 --> 01:54:24,400
same discussion so

3100
01:54:24,400 --> 01:54:27,199
go on the next slide

3101
01:54:29,599 --> 01:54:32,960
okay um

3102
01:54:34,080 --> 01:54:36,560
there when the attestation bit is set so

3103
01:54:36,560 --> 01:54:38,320
the query request comes in there's an

3104
01:54:38,320 --> 01:54:40,159
attestation bit that says hey can you

3105
01:54:40,159 --> 01:54:41,760
please include evidence in

3106
01:54:41,760 --> 01:54:44,800
the uh in the query response okay

3107
01:54:44,800 --> 01:54:47,440
um there's also a challenge field this

3108
01:54:47,440 --> 01:54:49,520
is optional that's in the query request

3109
01:54:49,520 --> 01:54:52,159
okay and so since it's listed as

3110
01:54:52,159 --> 01:54:53,599
optional

3111
01:54:53,599 --> 01:54:56,000
um you can see the text says when a

3112
01:54:56,000 --> 01:54:58,400
challenge is provided

3113
01:54:58,400 --> 01:54:59,599
and the challenge the challenge and the

3114
01:54:59,599 --> 01:55:01,599
request must be copied into the nonce

3115
01:55:01,599 --> 01:55:03,280
claim found in the eat okay

3116
01:55:03,280 --> 01:55:05,440
so that leaves open so is it legal or

3117
01:55:05,440 --> 01:55:07,599
illegal to send a query request which

3118
01:55:07,599 --> 01:55:09,119
has attestation bit on

3119
01:55:09,119 --> 01:55:11,440
and the challenge field absent okay is

3120
01:55:11,440 --> 01:55:13,199
that legal or illegal that's the open

3121
01:55:13,199 --> 01:55:14,800
question here

3122
01:55:14,800 --> 01:55:18,000
and so the first question well does teep

3123
01:55:18,000 --> 01:55:19,679
require the nonce approach or is any of

3124
01:55:19,679 --> 01:55:21,440
those approaches okay

3125
01:55:21,440 --> 01:55:24,239
um well that was the question this issue

3126
01:55:24,239 --> 01:55:26,480
that i think akira filed and this one

3127
01:55:26,480 --> 01:55:28,880
any is okay the intent of the text in

3128
01:55:28,880 --> 01:55:30,320
the document right now

3129
01:55:30,320 --> 01:55:32,320
is that the attestation bit was allowed

3130
01:55:32,320 --> 01:55:34,080
to be set with the challenge absent

3131
01:55:34,080 --> 01:55:35,679
okay that was the intent we're writing

3132
01:55:35,679 --> 01:55:37,199
that text okay now whether that's the

3133
01:55:37,199 --> 01:55:38,800
right thing or not that was the intent

3134
01:55:38,800 --> 01:55:39,520
so

3135
01:55:39,520 --> 01:55:41,280
but then the question is how do you how

3136
01:55:41,280 --> 01:55:42,560
do you negotiate

3137
01:55:42,560 --> 01:55:44,880
which freshness approach to use i'm

3138
01:55:44,880 --> 01:55:48,000
getting the blinking back again now so

3139
01:55:48,000 --> 01:55:51,119
uh all right so the evidence

3140
01:55:51,119 --> 01:55:52,960
already carries the approach specific

3141
01:55:52,960 --> 01:55:54,239
claims so if you use

3142
01:55:54,239 --> 01:55:56,080
nonsense or time stamps or maybe epic

3143
01:55:56,080 --> 01:55:57,599
ids in the future you can tell that by

3144
01:55:57,599 --> 01:55:58,880
looking in the evidence but you can't

3145
01:55:58,880 --> 01:55:59,760
tell what's

3146
01:55:59,760 --> 01:56:02,239
what's what's supported in the message

3147
01:56:02,239 --> 01:56:03,280
and so

3148
01:56:03,280 --> 01:56:05,040
uh what we were just talking about it

3149
01:56:05,040 --> 01:56:06,239
should be forced this is the

3150
01:56:06,239 --> 01:56:08,080
relationship of the previous issue right

3151
01:56:08,080 --> 01:56:09,360
should we force the use of a single

3152
01:56:09,360 --> 01:56:11,599
approach should we force the agent to

3153
01:56:11,599 --> 01:56:13,440
support all no probably not

3154
01:56:13,440 --> 01:56:15,119
should we add a field into the query

3155
01:56:15,119 --> 01:56:16,880
request like we did for supported cipher

3156
01:56:16,880 --> 01:56:18,320
suites right this is if we support

3157
01:56:18,320 --> 01:56:19,440
multiple of them

3158
01:56:19,440 --> 01:56:20,960
that's bolded because that's the one

3159
01:56:20,960 --> 01:56:23,360
that's my personal preference

3160
01:56:23,360 --> 01:56:25,599
um or we can overload the challenge

3161
01:56:25,599 --> 01:56:27,040
field and make the challenge field

3162
01:56:27,040 --> 01:56:28,239
mandatory

3163
01:56:28,239 --> 01:56:29,920
by putting the stuff in there and then

3164
01:56:29,920 --> 01:56:30,960
the challenge field would become

3165
01:56:30,960 --> 01:56:32,560
mandatory but i don't like overloading

3166
01:56:32,560 --> 01:56:33,840
fields that's why i don't like that one

3167
01:56:33,840 --> 01:56:34,719
so

3168
01:56:34,719 --> 01:56:37,199
um so if we support multiple ways of

3169
01:56:37,199 --> 01:56:38,080
doing it

3170
01:56:38,080 --> 01:56:40,719
then my preference is that the challenge

3171
01:56:40,719 --> 01:56:42,400
field would be optional

3172
01:56:42,400 --> 01:56:45,440
for example if you have the timestamp

3173
01:56:45,440 --> 01:56:46,400
approach

3174
01:56:46,400 --> 01:56:48,400
or the epic id approach then you would

3175
01:56:48,400 --> 01:56:50,239
not necessarily need the challenge

3176
01:56:50,239 --> 01:56:51,599
present and that would be a case where

3177
01:56:51,599 --> 01:56:53,840
attestation be set and challenge absent

3178
01:56:53,840 --> 01:56:56,880
okay and so this one's very closely

3179
01:56:56,880 --> 01:56:58,639
the previous one that if we go with one

3180
01:56:58,639 --> 01:57:00,880
of those then i think that the

3181
01:57:00,880 --> 01:57:02,960
clarification is likely to be

3182
01:57:02,960 --> 01:57:05,760
um challenge it can be absent and that

3183
01:57:05,760 --> 01:57:07,280
was the original intent

3184
01:57:07,280 --> 01:57:09,199
um even though we required nonsense

3185
01:57:09,199 --> 01:57:10,480
before so

3186
01:57:10,480 --> 01:57:13,119
all right carry on unless i see someone

3187
01:57:13,119 --> 01:57:15,119
jump into the queue

3188
01:57:15,119 --> 01:57:18,800
next slide but hopefully people can see

3189
01:57:18,800 --> 01:57:19,840
why the other issue

3190
01:57:19,840 --> 01:57:22,840
this one depends on so let's go to slide

3191
01:57:22,840 --> 01:57:24,639
18.

3192
01:57:24,639 --> 01:57:26,719
and nancy just call time i i don't know

3193
01:57:26,719 --> 01:57:27,760
if we'll get to the last one or not but

3194
01:57:27,760 --> 01:57:29,199
you can feel free to call time

3195
01:57:29,199 --> 01:57:32,400
no i i think this depending on how

3196
01:57:32,400 --> 01:57:33,440
quickly you had

3197
01:57:33,440 --> 01:57:36,880
two and a half minutes left okay great

3198
01:57:36,880 --> 01:57:39,520
um use of a token versus a challenge and

3199
01:57:39,520 --> 01:57:41,520
so this one there was a response i think

3200
01:57:41,520 --> 01:57:42,560
already on the list

3201
01:57:42,560 --> 01:57:44,960
um or maybe in the chat here and so you

3202
01:57:44,960 --> 01:57:46,320
can see we have a token field and we

3203
01:57:46,320 --> 01:57:47,840
have a challenge field

3204
01:57:47,840 --> 01:57:50,320
um now at the time that this was written

3205
01:57:50,320 --> 01:57:51,440
the

3206
01:57:51,440 --> 01:57:52,880
the token and the challenge are both

3207
01:57:52,880 --> 01:57:54,639
exactly the same syntax um

3208
01:57:54,639 --> 01:57:56,000
i think that has now been fixed because

3209
01:57:56,000 --> 01:57:58,080
i think the challenge has now increased

3210
01:57:58,080 --> 01:58:00,000
to 512 bytes in order to work with that

3211
01:58:00,000 --> 01:58:01,920
sgx thing that akira mentioned in the

3212
01:58:01,920 --> 01:58:04,639
hackathon report um some point both both

3213
01:58:04,639 --> 01:58:06,639
of them are beasters and so the intent

3214
01:58:06,639 --> 01:58:08,719
was the token is present if and only if

3215
01:58:08,719 --> 01:58:10,400
the attestation that is clear

3216
01:58:10,400 --> 01:58:12,320
and the challenge is allowed but not

3217
01:58:12,320 --> 01:58:13,599
required at the attachment

3218
01:58:13,599 --> 01:58:15,760
to set so you could never have token and

3219
01:58:15,760 --> 01:58:17,679
challenge be present at the same time

3220
01:58:17,679 --> 01:58:18,800
so given they could not be present at

3221
01:58:18,800 --> 01:58:20,159
the same time they currently have

3222
01:58:20,159 --> 01:58:21,440
separate label values and should we

3223
01:58:21,440 --> 01:58:23,199
combine them into one label

3224
01:58:23,199 --> 01:58:24,400
and i think there was a response from

3225
01:58:24,400 --> 01:58:25,760
someone in the list i don't remember who

3226
01:58:25,760 --> 01:58:26,480
maybe ben

3227
01:58:26,480 --> 01:58:29,040
who said uh better to keep them as

3228
01:58:29,040 --> 01:58:30,480
separate because they're semantically

3229
01:58:30,480 --> 01:58:31,040
different

3230
01:58:31,040 --> 01:58:34,000
and so i think that is the proposed um

3231
01:58:34,000 --> 01:58:36,080
resolution to 127

3232
01:58:36,080 --> 01:58:38,480
which is to just clarify just leave them

3233
01:58:38,480 --> 01:58:39,440
as separate things

3234
01:58:39,440 --> 01:58:42,560
and make sure that it is clarified so

3235
01:58:42,560 --> 01:58:44,239
unless anybody has objections to that

3236
01:58:44,239 --> 01:58:45,679
we'll leave them as separate

3237
01:58:45,679 --> 01:58:47,199
things even even if they have the same

3238
01:58:47,199 --> 01:58:48,960
syntax which they currently don't so

3239
01:58:48,960 --> 01:58:51,520
that one should be easy i guess we can

3240
01:58:51,520 --> 01:58:52,880
go to the next slide maybe we can get

3241
01:58:52,880 --> 01:58:55,199
one more in two minutes so

3242
01:58:55,199 --> 01:58:57,840
all right last one is related to that

3243
01:58:57,840 --> 01:58:58,320
question

3244
01:58:58,320 --> 01:59:00,719
about uh you know epic ids and what the

3245
01:59:00,719 --> 01:59:02,639
challenge is required so

3246
01:59:02,639 --> 01:59:04,400
this one has been open forever and i'm

3247
01:59:04,400 --> 01:59:06,000
coming back to it now because we're now

3248
01:59:06,000 --> 01:59:07,119
getting to the

3249
01:59:07,119 --> 01:59:08,800
tailing of things and so i want to kick

3250
01:59:08,800 --> 01:59:10,480
this into that same discussion we take

3251
01:59:10,480 --> 01:59:11,679
the list so i'll just tee it off right

3252
01:59:11,679 --> 01:59:13,440
now and ask people to comment

3253
01:59:13,440 --> 01:59:15,199
in their in the list discussion of the

3254
01:59:15,199 --> 01:59:18,000
other one of the epic id related one

3255
01:59:18,000 --> 01:59:20,800
unsolicited query response okay well if

3256
01:59:20,800 --> 01:59:22,080
you're using attestation with time

3257
01:59:22,080 --> 01:59:23,920
stamps or epic ids then you don't need

3258
01:59:23,920 --> 01:59:25,199
any per request token

3259
01:59:25,199 --> 01:59:27,840
or nots right you're actually not you're

3260
01:59:27,840 --> 01:59:28,239
not

3261
01:59:28,239 --> 01:59:29,440
saying you're not keeping any state

3262
01:59:29,440 --> 01:59:30,960
because that was the point of keeping

3263
01:59:30,960 --> 01:59:32,960
making sure there's no state in the town

3264
01:59:32,960 --> 01:59:36,000
um in order to generate the stuff you

3265
01:59:36,000 --> 01:59:37,760
don't need to get a challenge

3266
01:59:37,760 --> 01:59:38,960
there's actually no reason to get an

3267
01:59:38,960 --> 01:59:39,920
extra round trip because there's no

3268
01:59:39,920 --> 01:59:41,280
state to match right you're trying to

3269
01:59:41,280 --> 01:59:42,880
not have state right

3270
01:59:42,880 --> 01:59:46,639
and so the proposed optimization is that

3271
01:59:46,639 --> 01:59:49,280
if a query request contains no token or

3272
01:59:49,280 --> 01:59:51,040
challenge

3273
01:59:51,040 --> 01:59:54,560
then the agent may cash the information

3274
01:59:54,560 --> 01:59:55,840
that career request

3275
01:59:55,840 --> 01:59:59,119
and send any unsolicited query responses

3276
01:59:59,119 --> 02:00:02,239
in the future to that same tam uri

3277
02:00:02,239 --> 02:00:04,400
whenever it's handling a request ca or

3278
02:00:04,400 --> 02:00:05,599
unrequest ta

3279
02:00:05,599 --> 02:00:09,360
api call from the broker but

3280
02:00:09,360 --> 02:00:11,119
anytime you know periodically so the

3281
02:00:11,119 --> 02:00:12,960
request policy check api

3282
02:00:12,960 --> 02:00:15,440
is the periodic one from the broker that

3283
02:00:15,440 --> 02:00:16,080
one shall

3284
02:00:16,080 --> 02:00:18,480
always generate a query request and

3285
02:00:18,480 --> 02:00:19,280
that's the detect

3286
02:00:19,280 --> 02:00:21,119
changes the tam so you're cashing the

3287
02:00:21,119 --> 02:00:22,639
stuff but your cash is refreshed the

3288
02:00:22,639 --> 02:00:24,000
periodic rate

3289
02:00:24,000 --> 02:00:26,000
but it doesn't recur an extra round trip

3290
02:00:26,000 --> 02:00:27,760
on demand right when you want to install

3291
02:00:27,760 --> 02:00:29,440
something that happens offline in the

3292
02:00:29,440 --> 02:00:30,239
background

3293
02:00:30,239 --> 02:00:32,639
at the request policy check interval so

3294
02:00:32,639 --> 02:00:34,560
that i believe gives the ability to

3295
02:00:34,560 --> 02:00:36,960
respond to changes on both sides

3296
02:00:36,960 --> 02:00:38,960
uh while providing uh well reducing the

3297
02:00:38,960 --> 02:00:40,480
extra round trip so

3298
02:00:40,480 --> 02:00:41,920
if we go that approach that is my

3299
02:00:41,920 --> 02:00:44,239
proposal here and we're out of time now

3300
02:00:44,239 --> 02:00:45,679
so if you object to that you have to

3301
02:00:45,679 --> 02:00:47,040
take it to the list

3302
02:00:47,040 --> 02:00:48,960
but that i would like comments on the

3303
02:00:48,960 --> 02:00:50,800
list is that proposed optimization which

3304
02:00:50,800 --> 02:00:51,119
i

3305
02:00:51,119 --> 02:00:53,840
think works fine and gives the best

3306
02:00:53,840 --> 02:00:54,639
behavior so

3307
02:00:54,639 --> 02:00:55,760
there you go that's what i would like to

3308
02:00:55,760 --> 02:00:58,320
do in an implementation

3309
02:00:58,320 --> 02:01:01,920
perfect okay

3310
02:01:01,920 --> 02:01:05,920
thanks nancy yep yep so i think we're

3311
02:01:05,920 --> 02:01:08,800
we're out of time um dave you only had

3312
02:01:08,800 --> 02:01:09,599
one left

3313
02:01:09,599 --> 02:01:11,679
so my suggestion since we are out of

3314
02:01:11,679 --> 02:01:13,199
time is to put

3315
02:01:13,199 --> 02:01:15,920
these last two the previous one and this

3316
02:01:15,920 --> 02:01:17,440
one on the list

3317
02:01:17,440 --> 02:01:19,920
yeah and we should be able to close them

3318
02:01:19,920 --> 02:01:21,040
down

3319
02:01:21,040 --> 02:01:24,719
sure all right all right

3320
02:01:24,719 --> 02:01:28,000
good progress thank you everyone

3321
02:01:28,000 --> 02:01:30,080
and uh we'll continue the discussion

3322
02:01:30,080 --> 02:01:31,199
especially on

3323
02:01:31,199 --> 02:01:34,880
on the different methods for keeping

3324
02:01:34,880 --> 02:01:35,760
freshness

3325
02:01:35,760 --> 02:01:38,800
on the list as well all right thank you

3326
02:01:38,800 --> 02:01:40,880
everyone

3327
02:01:40,880 --> 02:01:51,840
bye everyone bye

3328
02:02:00,960 --> 02:02:03,040
you

