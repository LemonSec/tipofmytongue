1
00:00:05,040 --> 00:00:06,480
five at the beginning

2
00:00:06,480 --> 00:00:10,080
sounds good so all right without further

3
00:00:10,080 --> 00:00:10,719
ado

4
00:00:10,719 --> 00:00:12,719
let's get to it i think uh everybody

5
00:00:12,719 --> 00:00:14,880
that's going to present might be here

6
00:00:14,880 --> 00:00:18,080
uh we have uh well welcome to um

7
00:00:18,080 --> 00:00:22,240
itf 110. um

8
00:00:22,480 --> 00:00:24,800
uh note the well um this is the first

9
00:00:24,800 --> 00:00:26,320
session maybe some of you were at this

10
00:00:26,320 --> 00:00:27,039
week so

11
00:00:27,039 --> 00:00:30,480
make sure that uh you read all this good

12
00:00:30,480 --> 00:00:31,279
stuff about

13
00:00:31,279 --> 00:00:33,040
uh understanding that we're recording

14
00:00:33,040 --> 00:00:34,399
this video anything you say at the

15
00:00:34,399 --> 00:00:36,000
microphone can it will be used against

16
00:00:36,000 --> 00:00:36,640
you

17
00:00:36,640 --> 00:00:39,040
um a lot of it comes down to having to

18
00:00:39,040 --> 00:00:40,399
deal with ipr if you know about

19
00:00:40,399 --> 00:00:41,760
something and you contribute you need to

20
00:00:41,760 --> 00:00:43,280
make sure you disclose that

21
00:00:43,280 --> 00:00:45,280
accordingly if you have any questions

22
00:00:45,280 --> 00:00:46,879
about any of this please feel free to

23
00:00:46,879 --> 00:00:48,160
ask maker myself

24
00:00:48,160 --> 00:00:49,760
or any of the other people that you see

25
00:00:49,760 --> 00:00:51,600
floating around a lot of the ietf

26
00:00:51,600 --> 00:00:53,360
will be gladly willing to answer your

27
00:00:53,360 --> 00:00:55,760
questions

28
00:00:57,760 --> 00:01:00,800
and that's nick and myself

29
00:01:01,359 --> 00:01:04,320
i see nick is there too

30
00:01:06,720 --> 00:01:10,720
hello um so basically we're gonna go

31
00:01:10,720 --> 00:01:12,240
through some administrivia then we're

32
00:01:12,240 --> 00:01:13,280
going to um

33
00:01:13,280 --> 00:01:15,439
give richard the majority of the talk

34
00:01:15,439 --> 00:01:16,880
here the time

35
00:01:16,880 --> 00:01:18,320
um i wasn't sure if rafael was going to

36
00:01:18,320 --> 00:01:20,400
present as well because oftentimes you

37
00:01:20,400 --> 00:01:21,520
guys tag team it

38
00:01:21,520 --> 00:01:23,439
um then we're going to go on to do some

39
00:01:23,439 --> 00:01:25,200
architecture discussions

40
00:01:25,200 --> 00:01:27,040
and then have some time to talk about

41
00:01:27,040 --> 00:01:28,880
deniability if we run out of time to

42
00:01:28,880 --> 00:01:30,320
talk about deniability

43
00:01:30,320 --> 00:01:31,759
we are going to make sure that we have

44
00:01:31,759 --> 00:01:33,360
an interim that will address

45
00:01:33,360 --> 00:01:34,720
this topic because it's been brought up

46
00:01:34,720 --> 00:01:37,119
a bunch of times and uh

47
00:01:37,119 --> 00:01:38,840
we need to make sure we kind of get to

48
00:01:38,840 --> 00:01:41,680
it

49
00:01:41,680 --> 00:01:44,079
um the blue sheets are automatic so if

50
00:01:44,079 --> 00:01:45,360
you're here you've already been noted so

51
00:01:45,360 --> 00:01:46,079
that's really nice

52
00:01:46,079 --> 00:01:48,720
we have a note taker that is awesome um

53
00:01:48,720 --> 00:01:50,320
i don't know if anybody actually goes in

54
00:01:50,320 --> 00:01:52,000
the jabber room in this

55
00:01:52,000 --> 00:01:53,759
particular session but if there is

56
00:01:53,759 --> 00:01:55,280
somebody in the jabber

57
00:01:55,280 --> 00:01:58,479
um room uh that's there and is also here

58
00:01:58,479 --> 00:02:00,000
if you could just channel if there's any

59
00:02:00,000 --> 00:02:01,600
questions that come up um

60
00:02:01,600 --> 00:02:03,119
actually i think maybe the meat echo

61
00:02:03,119 --> 00:02:05,520
thing is plugged into this as well

62
00:02:05,520 --> 00:02:07,280
so all right without further ado let's

63
00:02:07,280 --> 00:02:09,440
go to the status slide

64
00:02:09,440 --> 00:02:12,080
uh basically the uh we were awaiting a

65
00:02:12,080 --> 00:02:14,319
new draft in the architecture uh thing

66
00:02:14,319 --> 00:02:14,720
till

67
00:02:14,720 --> 00:02:16,959
about an hour ago and it popped up so

68
00:02:16,959 --> 00:02:18,560
thank you very much benjamin

69
00:02:18,560 --> 00:02:20,239
um the mls protocol i'll get to in a

70
00:02:20,239 --> 00:02:22,080
second and the mls federation draft

71
00:02:22,080 --> 00:02:23,040
expired

72
00:02:23,040 --> 00:02:25,840
um i think we had some uh swapping of

73
00:02:25,840 --> 00:02:27,440
chairs of where people work so we'll try

74
00:02:27,440 --> 00:02:29,200
to get that reinvigorated

75
00:02:29,200 --> 00:02:30,720
um but where most people are really

76
00:02:30,720 --> 00:02:32,480
interested is about the timeline for

77
00:02:32,480 --> 00:02:35,519
for uh the most protocol so at the last

78
00:02:35,519 --> 00:02:37,440
meeting we basically i showed this slide

79
00:02:37,440 --> 00:02:38,879
the only thing really i did was move the

80
00:02:38,879 --> 00:02:40,640
bullets as we are here

81
00:02:40,640 --> 00:02:42,319
so the idea is that we're in this this

82
00:02:42,319 --> 00:02:43,840
uh feature freeze

83
00:02:43,840 --> 00:02:46,560
um to allow for interop um as well as

84
00:02:46,560 --> 00:02:47,680
security analysis

85
00:02:47,680 --> 00:02:49,200
and so then at the end of all this we're

86
00:02:49,200 --> 00:02:51,040
basically going to have how do we do

87
00:02:51,040 --> 00:02:52,560
with interop could they get interop

88
00:02:52,560 --> 00:02:55,599
and security input from people to make

89
00:02:55,599 --> 00:02:57,440
sure that if we blew anything

90
00:02:57,440 --> 00:02:59,440
that we needed to fix it this is kind of

91
00:02:59,440 --> 00:03:01,599
the agreement we have with the security

92
00:03:01,599 --> 00:03:02,560
researchers

93
00:03:02,560 --> 00:03:05,120
we're trying to get them to help us and

94
00:03:05,120 --> 00:03:06,480
we get to make them famous

95
00:03:06,480 --> 00:03:08,400
by looking at our protocol before we

96
00:03:08,400 --> 00:03:09,920
publish it we need to make sure we

97
00:03:09,920 --> 00:03:11,680
actually listen to what they say

98
00:03:11,680 --> 00:03:14,000
before we publish it so that's really

99
00:03:14,000 --> 00:03:15,200
about it the plan is

100
00:03:15,200 --> 00:03:17,200
that anything that we've changed as a

101
00:03:17,200 --> 00:03:18,400
result of interop or anything else

102
00:03:18,400 --> 00:03:19,920
that's come up we'll end up having to

103
00:03:19,920 --> 00:03:20,720
put the

104
00:03:20,720 --> 00:03:22,800
put a new draft out and then spin a new

105
00:03:22,800 --> 00:03:24,319
version for working group last call

106
00:03:24,319 --> 00:03:24,879
again

107
00:03:24,879 --> 00:03:26,480
and then we kind of like start to

108
00:03:26,480 --> 00:03:30,080
recycle down for draft 13 and others

109
00:03:30,080 --> 00:03:33,840
any questions

110
00:03:37,680 --> 00:03:41,280
great let's get to it let me see now if

111
00:03:41,280 --> 00:03:42,560
i can actually share

112
00:03:42,560 --> 00:03:44,840
richard slides without blowing anything

113
00:03:44,840 --> 00:03:46,159
up

114
00:03:46,159 --> 00:03:49,200
uh stop screen sharing now

115
00:03:49,200 --> 00:03:52,000
enable it again

116
00:03:52,319 --> 00:03:55,599
yes i change my mind

117
00:03:58,159 --> 00:04:01,760
and then go full screen

118
00:04:01,760 --> 00:04:04,480
david shanazi for making you want to do

119
00:04:04,480 --> 00:04:05,439
this all right cool

120
00:04:05,439 --> 00:04:08,799
um i'll hit stop all right so the first

121
00:04:08,799 --> 00:04:10,720
slide i've already screwed up it's the

122
00:04:10,720 --> 00:04:14,159
wrong draft

123
00:04:14,159 --> 00:04:16,160
i'll get the chairs an updated deck so

124
00:04:16,160 --> 00:04:17,279
um at like uh

125
00:04:17,279 --> 00:04:21,120
like sean said we are um in our feature

126
00:04:21,120 --> 00:04:22,720
freeze and analysis period so we issued

127
00:04:22,720 --> 00:04:23,759
draft 11

128
00:04:23,759 --> 00:04:26,240
after um working group last call and

129
00:04:26,240 --> 00:04:28,160
some issue resolutions at the last ietf

130
00:04:28,160 --> 00:04:29,199
meeting

131
00:04:29,199 --> 00:04:31,440
and since then over the holidays and in

132
00:04:31,440 --> 00:04:32,800
q1 here we've been

133
00:04:32,800 --> 00:04:35,199
in a future phrase and implementation

134
00:04:35,199 --> 00:04:36,960
timeline we have at least

135
00:04:36,960 --> 00:04:39,199
two implementations going uh based on

136
00:04:39,199 --> 00:04:40,880
draft 11 that we have begun

137
00:04:40,880 --> 00:04:42,560
interop testing i'll have some more

138
00:04:42,560 --> 00:04:44,160
comments on that a minute

139
00:04:44,160 --> 00:04:46,960
so today our focus is going to be a few

140
00:04:46,960 --> 00:04:48,639
issues and pr's that have come up

141
00:04:48,639 --> 00:04:51,600
um during that feature freeze um mainly

142
00:04:51,600 --> 00:04:52,160
around

143
00:04:52,160 --> 00:04:54,080
pretty minor stuff clarification some

144
00:04:54,080 --> 00:04:56,880
some bugs people found um

145
00:04:56,880 --> 00:04:58,560
and so we'll talk that'll be most of our

146
00:04:58,560 --> 00:05:02,240
time today so next slide please

147
00:05:03,759 --> 00:05:06,960
sean next slide please

148
00:05:08,639 --> 00:05:11,039
there we go yeah keep going past that

149
00:05:11,039 --> 00:05:12,400
one yeah

150
00:05:12,400 --> 00:05:16,880
so we're on interop testing oh

151
00:05:17,280 --> 00:05:20,400
so we have kind of a cool test interrupt

152
00:05:20,400 --> 00:05:21,360
testing framework

153
00:05:21,360 --> 00:05:24,800
um right so we want to test various

154
00:05:24,800 --> 00:05:28,160
mls libraries um and assemble those

155
00:05:28,160 --> 00:05:29,520
tests in kind of a

156
00:05:29,520 --> 00:05:30,960
you know and be able to test out various

157
00:05:30,960 --> 00:05:32,479
scenarios it's not it's a little bit

158
00:05:32,479 --> 00:05:34,320
more complicated than something like tls

159
00:05:34,320 --> 00:05:35,919
where you have a straightforward

160
00:05:35,919 --> 00:05:39,199
set up a connection scenario that you

161
00:05:39,199 --> 00:05:40,479
want to test and maybe test it in

162
00:05:40,479 --> 00:05:41,840
various configurations but it's always

163
00:05:41,840 --> 00:05:42,320
just like

164
00:05:42,320 --> 00:05:43,840
set up a connection from a client to a

165
00:05:43,840 --> 00:05:46,960
server um with mls you want to do things

166
00:05:46,960 --> 00:05:47,840
like have

167
00:05:47,840 --> 00:05:49,600
people join a group do updates to

168
00:05:49,600 --> 00:05:51,600
removes do external joins things like

169
00:05:51,600 --> 00:05:53,039
that so we needed a little bit more

170
00:05:53,039 --> 00:05:55,199
flexibility so we set up this um

171
00:05:55,199 --> 00:05:58,000
framework based on grpc where the stacks

172
00:05:58,000 --> 00:06:00,240
under test can be uh grpc servers which

173
00:06:00,240 --> 00:06:00,720
means they

174
00:06:00,720 --> 00:06:02,560
accept rpcs and we can have a test

175
00:06:02,560 --> 00:06:05,120
runners that can send rpcs off to these

176
00:06:05,120 --> 00:06:06,400
clients to make them do

177
00:06:06,400 --> 00:06:08,720
mls stuff um so we've got two types of

178
00:06:08,720 --> 00:06:10,160
tests going here test vectors and

179
00:06:10,160 --> 00:06:11,919
scenarios the test vectors test

180
00:06:11,919 --> 00:06:14,400
kind of simple subsystems within mls and

181
00:06:14,400 --> 00:06:15,520
then the scenarios get

182
00:06:15,520 --> 00:06:19,120
the actual whole protocol

183
00:06:19,120 --> 00:06:20,960
and the test runner is set up so it

184
00:06:20,960 --> 00:06:22,400
automatically generates all these tests

185
00:06:22,400 --> 00:06:23,600
so

186
00:06:23,600 --> 00:06:25,600
that kind of gets us some thorough test

187
00:06:25,600 --> 00:06:27,520
coverage of the protocol once we have um

188
00:06:27,520 --> 00:06:30,240
a stack wired up into this harness next

189
00:06:30,240 --> 00:06:34,960
slide please

190
00:06:34,960 --> 00:06:37,600
um so we have some very uh during the

191
00:06:37,600 --> 00:06:39,440
the kind of code sprint uh or um

192
00:06:39,440 --> 00:06:40,880
hackathon week last week

193
00:06:40,880 --> 00:06:44,400
um mls vp and openmls teams got together

194
00:06:44,400 --> 00:06:46,400
and started doing some um

195
00:06:46,400 --> 00:06:49,520
interop we got a couple steps along this

196
00:06:49,520 --> 00:06:50,080
so there's

197
00:06:50,080 --> 00:06:51,840
there's five levels of test vectors

198
00:06:51,840 --> 00:06:53,520
we've got and then some scenarios we got

199
00:06:53,520 --> 00:06:54,080
through

200
00:06:54,080 --> 00:06:56,720
the tree math test vectors and just the

201
00:06:56,720 --> 00:06:58,639
beginning of the key schedule we have

202
00:06:58,639 --> 00:07:00,240
very basic integral we verified that our

203
00:07:00,240 --> 00:07:02,400
derived secret implementations match

204
00:07:02,400 --> 00:07:04,880
but then when we get to um some more

205
00:07:04,880 --> 00:07:05,599
advanced

206
00:07:05,599 --> 00:07:08,560
cases we um we start failing because

207
00:07:08,560 --> 00:07:09,840
we're still working out the bugs there

208
00:07:09,840 --> 00:07:12,638
next slide please

209
00:07:14,720 --> 00:07:16,639
just to show off what what interop looks

210
00:07:16,639 --> 00:07:18,800
like um this is um

211
00:07:18,800 --> 00:07:20,639
you know the output from our our test

212
00:07:20,639 --> 00:07:22,800
runner um and this the important line is

213
00:07:22,800 --> 00:07:24,319
that second one there so the

214
00:07:24,319 --> 00:07:26,720
top and bottom lines um are just the

215
00:07:26,720 --> 00:07:28,080
stacks interoperating with themselves

216
00:07:28,080 --> 00:07:29,440
but the second line is

217
00:07:29,440 --> 00:07:31,759
you know first record of interop between

218
00:07:31,759 --> 00:07:32,960
mls stacks

219
00:07:32,960 --> 00:07:36,080
um mlsp generated some test vectors for

220
00:07:36,080 --> 00:07:37,199
tree math and

221
00:07:37,199 --> 00:07:39,680
mls successfully consumed them um this

222
00:07:39,680 --> 00:07:41,360
is also incidentally our first interrupt

223
00:07:41,360 --> 00:07:42,240
failure

224
00:07:42,240 --> 00:07:44,720
where openmls didn't enter it didn't

225
00:07:44,720 --> 00:07:46,960
generate quite uh as many cases as mls

226
00:07:46,960 --> 00:07:48,400
vp was expecting

227
00:07:48,400 --> 00:07:50,720
and so uh mls vp rejected that but i

228
00:07:50,720 --> 00:07:52,080
think that's since been fixed over the

229
00:07:52,080 --> 00:07:52,960
weekend and now we're

230
00:07:52,960 --> 00:07:55,039
interoperating at that level yeah sean

231
00:07:55,039 --> 00:07:56,639
hey richard are we gonna save this so we

232
00:07:56,639 --> 00:07:57,840
can sell it for two million dollars

233
00:07:57,840 --> 00:08:00,159
later

234
00:08:00,240 --> 00:08:02,800
sorry uh as long as yeah we can use the

235
00:08:02,800 --> 00:08:04,080
nft to fund uh

236
00:08:04,080 --> 00:08:07,440
from the ietf um this

237
00:08:07,440 --> 00:08:09,440
will be in the in the archives so you

238
00:08:09,440 --> 00:08:11,599
can choose to monetize it as you will

239
00:08:11,599 --> 00:08:14,479
the next slide please

240
00:08:17,039 --> 00:08:19,919
so the usual mo with interrupt testing

241
00:08:19,919 --> 00:08:20,720
is you find

242
00:08:20,720 --> 00:08:22,080
bugs in the implementations where they

243
00:08:22,080 --> 00:08:23,360
don't align with the spec and then you

244
00:08:23,360 --> 00:08:25,120
find spec bugs where the spec is unclear

245
00:08:25,120 --> 00:08:26,160
and so far

246
00:08:26,160 --> 00:08:28,000
all the bugs we found have been of the

247
00:08:28,000 --> 00:08:29,440
former category um

248
00:08:29,440 --> 00:08:31,440
where the implementations were not

249
00:08:31,440 --> 00:08:32,719
agreeing with the

250
00:08:32,719 --> 00:08:35,919
spec and once we fixed the

251
00:08:35,919 --> 00:08:37,200
the implementations and align them with

252
00:08:37,200 --> 00:08:39,760
the spec then things worked a lot better

253
00:08:39,760 --> 00:08:41,200
so one of the implementations had the

254
00:08:41,200 --> 00:08:43,760
order of the inputs to hkdf extract and

255
00:08:43,760 --> 00:08:44,720
the key schedule

256
00:08:44,720 --> 00:08:46,720
swaps and once they unswapped everything

257
00:08:46,720 --> 00:08:49,120
worked fine

258
00:08:49,120 --> 00:08:51,040
we had this odd case where it's two

259
00:08:51,040 --> 00:08:52,800
stacks were interoperating on

260
00:08:52,800 --> 00:08:54,560
two cipher suites but not the third and

261
00:08:54,560 --> 00:08:56,000
turns out uh

262
00:08:56,000 --> 00:08:58,000
the one of them had the wrong set of

263
00:08:58,000 --> 00:08:59,279
algorithms associated with that cipher

264
00:08:59,279 --> 00:09:00,320
screen was generating like

265
00:09:00,320 --> 00:09:03,200
giant um you know sha 512 hashes instead

266
00:09:03,200 --> 00:09:04,880
of sha-256 hashes

267
00:09:04,880 --> 00:09:06,399
so once you fix that again things things

268
00:09:06,399 --> 00:09:08,399
started to work better so i haven't come

269
00:09:08,399 --> 00:09:10,320
up with any spec bugs yet so but um you

270
00:09:10,320 --> 00:09:11,360
know obviously we're going to be doing

271
00:09:11,360 --> 00:09:13,040
some more of this covering more of the

272
00:09:13,040 --> 00:09:15,200
the surface of the protocol and

273
00:09:15,200 --> 00:09:16,959
undoubtedly there will be some more bugs

274
00:09:16,959 --> 00:09:22,080
to be found next

275
00:09:22,080 --> 00:09:25,200
that's that's the interop report um

276
00:09:25,200 --> 00:09:26,480
pause here in case anyone has any

277
00:09:26,480 --> 00:09:29,120
discussion of that

278
00:09:31,200 --> 00:09:33,839
all right other than oh yeah sean how

279
00:09:33,839 --> 00:09:34,399
many

280
00:09:34,399 --> 00:09:36,160
how many uh implementations were we

281
00:09:36,160 --> 00:09:37,519
talking about that god actually got

282
00:09:37,519 --> 00:09:40,560
interrupted was it two or was it

283
00:09:40,560 --> 00:09:43,600
yeah we started with those two um

284
00:09:43,600 --> 00:09:47,279
we have um i think chris wood has

285
00:09:47,279 --> 00:09:48,560
expressed some interest in

286
00:09:48,560 --> 00:09:50,240
dusting off the go implementation that

287
00:09:50,240 --> 00:09:52,000
we did earlier on um

288
00:09:52,000 --> 00:09:55,040
that needs some updating but we have an

289
00:09:55,040 --> 00:09:56,320
easy way to plug it into the test

290
00:09:56,320 --> 00:09:57,120
harness so as

291
00:09:57,120 --> 00:09:59,440
as that comes up we should be able to um

292
00:09:59,440 --> 00:10:00,320
to

293
00:10:00,320 --> 00:10:03,200
interrupt it pretty quickly we have if

294
00:10:03,200 --> 00:10:04,000
if folks have

295
00:10:04,000 --> 00:10:07,839
stacks we we have example um

296
00:10:07,839 --> 00:10:10,000
grpc input integrations in c pulse plus

297
00:10:10,000 --> 00:10:11,519
go and rust

298
00:10:11,519 --> 00:10:14,079
um so it should be easy to take your

299
00:10:14,079 --> 00:10:16,320
implementation and plug it into the uh

300
00:10:16,320 --> 00:10:18,320
the grpc based test harness and do

301
00:10:18,320 --> 00:10:20,560
interrupt testing as soon as um

302
00:10:20,560 --> 00:10:22,079
uh it's as you as soon as you get that

303
00:10:22,079 --> 00:10:23,760
hooked up um

304
00:10:23,760 --> 00:10:25,680
so well we welcome you know more people

305
00:10:25,680 --> 00:10:27,279
coming along i think the easiest thing

306
00:10:27,279 --> 00:10:28,880
to do is probably show up in the mls

307
00:10:28,880 --> 00:10:32,160
implementations wirespace and

308
00:10:32,160 --> 00:10:33,279
mention that you're working on stuff

309
00:10:33,279 --> 00:10:35,519
there

310
00:10:36,560 --> 00:10:37,920
so yeah glad glad to have more i think

311
00:10:37,920 --> 00:10:39,440
we had a couple folks that were looking

312
00:10:39,440 --> 00:10:40,720
at this earlier on and

313
00:10:40,720 --> 00:10:42,640
might need to dust off a few and update

314
00:10:42,640 --> 00:10:44,399
things to draft eleven but hopefully we

315
00:10:44,399 --> 00:10:44,720
can

316
00:10:44,720 --> 00:10:47,680
get a few more stacks here all right so

317
00:10:47,680 --> 00:10:49,600
this is just the um

318
00:10:49,600 --> 00:10:52,880
list of changes that are in github um or

319
00:10:52,880 --> 00:10:54,880
expected to be on github that have

320
00:10:54,880 --> 00:10:56,079
protocol impact so there are some

321
00:10:56,079 --> 00:10:57,839
editorial things that i have not listed

322
00:10:57,839 --> 00:10:58,480
here

323
00:10:58,480 --> 00:11:00,399
but here we could go ahead and have some

324
00:11:00,399 --> 00:11:01,519
discussion and maybe come to some

325
00:11:01,519 --> 00:11:02,240
resolutions

326
00:11:02,240 --> 00:11:05,200
on uh these changes that results in

327
00:11:05,200 --> 00:11:07,040
substantive changes to the protocol

328
00:11:07,040 --> 00:11:09,040
um like i said above these are all

329
00:11:09,040 --> 00:11:10,720
pretty straightforward they're

330
00:11:10,720 --> 00:11:13,279
pretty minor uh impacts on on the

331
00:11:13,279 --> 00:11:13,920
protocol

332
00:11:13,920 --> 00:11:16,240
so i think they're you know they're

333
00:11:16,240 --> 00:11:17,600
appropriate for the for the future

334
00:11:17,600 --> 00:11:18,880
freeze and appropriate for

335
00:11:18,880 --> 00:11:21,600
kind of fixing and and tweaks uh after

336
00:11:21,600 --> 00:11:22,959
after that last call

337
00:11:22,959 --> 00:11:29,839
um so let's dive in next slide please

338
00:11:31,440 --> 00:11:33,360
right so this is just one thing that got

339
00:11:33,360 --> 00:11:35,680
lost

340
00:11:35,680 --> 00:11:39,279
in draft 07 when we removed someone if

341
00:11:39,279 --> 00:11:40,640
they were the right most member in the

342
00:11:40,640 --> 00:11:41,120
tree

343
00:11:41,120 --> 00:11:43,440
we would truncate the trees so that we

344
00:11:43,440 --> 00:11:44,320
didn't have a bunch of

345
00:11:44,320 --> 00:11:47,519
unnecessary blank nodes hanging around

346
00:11:47,519 --> 00:11:49,360
so the illustration just shows that if

347
00:11:49,360 --> 00:11:50,959
we had three people in the group and you

348
00:11:50,959 --> 00:11:52,480
know two of them were at the far left of

349
00:11:52,480 --> 00:11:53,760
the tree and one was all the way out at

350
00:11:53,760 --> 00:11:54,720
the right

351
00:11:54,720 --> 00:11:56,240
when we remove that right most

352
00:11:56,240 --> 00:11:58,560
participant we should also get rid of

353
00:11:58,560 --> 00:12:01,920
all of those unnecessary nodes

354
00:12:01,920 --> 00:12:04,720
that the the two remaining participants

355
00:12:04,720 --> 00:12:06,800
on the left aren't going to use

356
00:12:06,800 --> 00:12:10,160
um that was specified in draft of seven

357
00:12:10,160 --> 00:12:12,480
um when we did the proposal commit thing

358
00:12:12,480 --> 00:12:13,600
in draft 08

359
00:12:13,600 --> 00:12:16,720
uh we lost it um and it has it is still

360
00:12:16,720 --> 00:12:20,320
um missing um which i discovered when we

361
00:12:20,320 --> 00:12:22,720
uh we had a bug in mls on the sp with

362
00:12:22,720 --> 00:12:24,320
how we did truncation i went to see what

363
00:12:24,320 --> 00:12:25,839
the spec said about it and it turned out

364
00:12:25,839 --> 00:12:26,959
it wasn't there

365
00:12:26,959 --> 00:12:29,680
um so the proposal is here we have a pr

366
00:12:29,680 --> 00:12:30,320
i think that's

367
00:12:30,320 --> 00:12:33,680
461 so to just re-add this

368
00:12:33,680 --> 00:12:37,920
i'm hoping this is not controversial um

369
00:12:37,920 --> 00:12:39,600
unless someone stands up right now and

370
00:12:39,600 --> 00:12:40,800
complains i think we're just going to

371
00:12:40,800 --> 00:12:43,359
merge this

372
00:12:50,839 --> 00:12:52,000
tkg

373
00:12:52,000 --> 00:12:54,079
uh i was just raising the questions in

374
00:12:54,079 --> 00:12:55,440
the chat about why

375
00:12:55,440 --> 00:12:58,480
rightmost only what what what's the

376
00:12:58,480 --> 00:13:01,200
um like why not symmetric raphael seems

377
00:13:01,200 --> 00:13:02,480
to be answering there but i'm not sure i

378
00:13:02,480 --> 00:13:04,320
understand but that may be just my own

379
00:13:04,320 --> 00:13:07,200
gaps and understanding yeah the

380
00:13:07,200 --> 00:13:08,800
basically we have a constrained tree

381
00:13:08,800 --> 00:13:09,760
geometry here

382
00:13:09,760 --> 00:13:12,240
um just to make talking about it simpler

383
00:13:12,240 --> 00:13:14,320
it's the same tree geometries and ct

384
00:13:14,320 --> 00:13:16,560
coincidentally um but it's a left

385
00:13:16,560 --> 00:13:18,000
balanced tree and so the tree always

386
00:13:18,000 --> 00:13:21,839
grows and shrinks to the right

387
00:13:32,800 --> 00:13:33,920
all right i think we can move to the

388
00:13:33,920 --> 00:13:36,000
next one consider this one

389
00:13:36,000 --> 00:13:39,040
approved and ready to go

390
00:13:39,600 --> 00:13:41,519
uh this is an issue raphael race he

391
00:13:41,519 --> 00:13:42,800
observed that we have this

392
00:13:42,800 --> 00:13:45,360
uh pre-shared keys in group secrets so

393
00:13:45,360 --> 00:13:46,639
when you're when you're adding someone

394
00:13:46,639 --> 00:13:47,760
in the group you send them the group

395
00:13:47,760 --> 00:13:49,040
secrets

396
00:13:49,040 --> 00:13:50,639
and one of the things you do is indicate

397
00:13:50,639 --> 00:13:52,240
which psks

398
00:13:52,240 --> 00:13:54,000
they should add when they are joining

399
00:13:54,000 --> 00:13:55,920
the group

400
00:13:55,920 --> 00:13:58,320
now because psks are optional we made

401
00:13:58,320 --> 00:13:59,839
them optional in the group secrets but

402
00:13:59,839 --> 00:14:00,399
raphael

403
00:14:00,399 --> 00:14:02,320
noted that this pre-shared keys is an

404
00:14:02,320 --> 00:14:03,839
array or vector

405
00:14:03,839 --> 00:14:06,480
and can also be empty and so you have

406
00:14:06,480 --> 00:14:08,079
this ambiguous case where the

407
00:14:08,079 --> 00:14:11,279
psk vector is present but empty and so

408
00:14:11,279 --> 00:14:12,959
the proposal here is just to simplify

409
00:14:12,959 --> 00:14:15,360
that syntax out so that

410
00:14:15,360 --> 00:14:16,720
the way you indicate that there are no

411
00:14:16,720 --> 00:14:19,120
psks to be used is you just send an

412
00:14:19,120 --> 00:14:22,639
empty vector of psks

413
00:14:24,079 --> 00:14:26,000
so this is again is another pretty

414
00:14:26,000 --> 00:14:27,440
simple one i think probably just merge

415
00:14:27,440 --> 00:14:31,839
this if people have no objections here

416
00:14:36,160 --> 00:14:40,160
all right hearing none unanimous consent

417
00:14:40,480 --> 00:14:42,079
where's my parliamentarian to keep me on

418
00:14:42,079 --> 00:14:44,320
track here um

419
00:14:44,320 --> 00:14:45,920
so this one is we've had a little bit of

420
00:14:45,920 --> 00:14:47,440
discussion today on

421
00:14:47,440 --> 00:14:49,920
in github um i i needed a little

422
00:14:49,920 --> 00:14:51,839
education from the proposer um

423
00:14:51,839 --> 00:14:53,920
this is from eric cronelson i'm

424
00:14:53,920 --> 00:14:55,839
proposing to add the group context into

425
00:14:55,839 --> 00:14:57,440
the key schedule a bit earlier than it

426
00:14:57,440 --> 00:14:58,000
is right

427
00:14:58,000 --> 00:15:00,399
now so right now the group context gets

428
00:15:00,399 --> 00:15:02,240
added into the epoch secret which is

429
00:15:02,240 --> 00:15:04,320
kind of below the bottom of this slide

430
00:15:04,320 --> 00:15:06,000
in the key schedule

431
00:15:06,000 --> 00:15:08,240
um the idea of this adding the group

432
00:15:08,240 --> 00:15:10,399
context in here a bit earlier

433
00:15:10,399 --> 00:15:13,120
is to um you know ensure that the key

434
00:15:13,120 --> 00:15:15,040
schedules diverge faster

435
00:15:15,040 --> 00:15:18,240
in the case that um the parties don't

436
00:15:18,240 --> 00:15:18,639
agree

437
00:15:18,639 --> 00:15:21,839
on the group context um that that's

438
00:15:21,839 --> 00:15:24,320
my inelegant way of saying that there's

439
00:15:24,320 --> 00:15:25,440
probably a clear way

440
00:15:25,440 --> 00:15:27,519
um there's some some discussion in the

441
00:15:27,519 --> 00:15:28,720
in the pull requests that

442
00:15:28,720 --> 00:15:30,959
make it clear but the idea here is to

443
00:15:30,959 --> 00:15:33,040
get get more context folded into the key

444
00:15:33,040 --> 00:15:35,519
schedule faster

445
00:15:35,519 --> 00:15:37,120
i think this had a couple of approvals

446
00:15:37,120 --> 00:15:38,800
in github um i was

447
00:15:38,800 --> 00:15:40,880
uncertain about it but it seemed

448
00:15:40,880 --> 00:15:42,160
innocuous to me

449
00:15:42,160 --> 00:15:43,600
so again i think we'll just go ahead and

450
00:15:43,600 --> 00:15:45,680
merge this

451
00:15:45,680 --> 00:15:49,120
unless folks have further concerns with

452
00:15:52,839 --> 00:15:54,639
it

453
00:15:54,639 --> 00:15:57,680
active crowd this morning

454
00:15:59,759 --> 00:16:00,959
all right this one might might need some

455
00:16:00,959 --> 00:16:03,120
more discussion i'm hoping conrad is on

456
00:16:03,120 --> 00:16:04,480
to

457
00:16:04,480 --> 00:16:07,920
to uh contribute here um i don't see him

458
00:16:07,920 --> 00:16:08,560
so i'm gonna

459
00:16:08,560 --> 00:16:12,639
rely on raphael who i think is um

460
00:16:12,639 --> 00:16:15,600
uh familiar with this so right now right

461
00:16:15,600 --> 00:16:15,920
in

462
00:16:15,920 --> 00:16:17,759
in the mls group we have a tree it has a

463
00:16:17,759 --> 00:16:19,759
bunch of uh key packages the leaves of

464
00:16:19,759 --> 00:16:20,639
that tree

465
00:16:20,639 --> 00:16:22,160
that and each of those key packages

466
00:16:22,160 --> 00:16:24,800
represents a credential with an identity

467
00:16:24,800 --> 00:16:26,880
and a signature public key

468
00:16:26,880 --> 00:16:28,959
for the participant right now we have no

469
00:16:28,959 --> 00:16:30,639
constraints on

470
00:16:30,639 --> 00:16:33,360
those on the uniqueness of those

471
00:16:33,360 --> 00:16:35,360
identities or public keys so

472
00:16:35,360 --> 00:16:37,360
you can in principle have a group where

473
00:16:37,360 --> 00:16:39,360
every leaf of the tree

474
00:16:39,360 --> 00:16:41,600
represents effectively the same same

475
00:16:41,600 --> 00:16:43,040
user has the same credential same

476
00:16:43,040 --> 00:16:43,680
identity

477
00:16:43,680 --> 00:16:46,560
same public key

478
00:16:46,720 --> 00:16:47,680
don't know why you would have that in

479
00:16:47,680 --> 00:16:49,519
practice and that's kind of why this

480
00:16:49,519 --> 00:16:50,079
this

481
00:16:50,079 --> 00:16:52,639
comes up um so the proposal in this pull

482
00:16:52,639 --> 00:16:55,360
request is to have some

483
00:16:55,360 --> 00:16:57,360
uh uniqueness constraints on the leaves

484
00:16:57,360 --> 00:16:59,600
of the trees so to say if

485
00:16:59,600 --> 00:17:03,040
you see an ad and it's an ad for uh

486
00:17:03,040 --> 00:17:06,079
an identity or a public key that's

487
00:17:06,079 --> 00:17:07,760
already in the tree then you must reject

488
00:17:07,760 --> 00:17:09,520
that ad

489
00:17:09,520 --> 00:17:12,880
so that we have a tree where every key

490
00:17:12,880 --> 00:17:13,919
has a distinct

491
00:17:13,919 --> 00:17:16,400
or every leaf of the tree has a distinct

492
00:17:16,400 --> 00:17:17,119
identity

493
00:17:17,119 --> 00:17:21,678
and a distinct signing public key

494
00:17:22,079 --> 00:17:24,240
now i think that's totally implementable

495
00:17:24,240 --> 00:17:25,679
in the way i just said you just reject

496
00:17:25,679 --> 00:17:28,000
ads that would introduce duplicate

497
00:17:28,000 --> 00:17:31,600
duplicates i think my concern here is

498
00:17:31,600 --> 00:17:34,640
with their constraint on identities

499
00:17:34,640 --> 00:17:37,440
it seems in you given multi-device it

500
00:17:37,440 --> 00:17:38,480
seems

501
00:17:38,480 --> 00:17:40,000
plausible that you would have multiple

502
00:17:40,000 --> 00:17:41,840
appearances of a single identity

503
00:17:41,840 --> 00:17:45,200
with different public keys so i would

504
00:17:45,200 --> 00:17:46,960
probably want to relax

505
00:17:46,960 --> 00:17:48,400
um the uniqueness constraint on

506
00:17:48,400 --> 00:17:50,000
identities but i

507
00:17:50,000 --> 00:17:51,440
i could definitely live with a

508
00:17:51,440 --> 00:17:53,520
uniqueness constraint on public keys

509
00:17:53,520 --> 00:17:56,880
or on identity public key pairs

510
00:17:56,880 --> 00:17:58,320
raphael is does that how does that

511
00:17:58,320 --> 00:18:00,240
strike you

512
00:18:00,240 --> 00:18:02,160
or jonathan i think see you got some

513
00:18:02,160 --> 00:18:04,960
comments in jabber

514
00:18:08,559 --> 00:18:11,360
yeah i think the uh do you had around

515
00:18:11,360 --> 00:18:12,480
that was that the

516
00:18:12,480 --> 00:18:14,640
the identity in specifically in the

517
00:18:14,640 --> 00:18:16,320
multi-device scenario

518
00:18:16,320 --> 00:18:18,240
it could simply be extended with some

519
00:18:18,240 --> 00:18:20,080
device identifiers so that you end up

520
00:18:20,080 --> 00:18:21,280
having

521
00:18:21,280 --> 00:18:24,160
a unique identity that the application

522
00:18:24,160 --> 00:18:25,039
can

523
00:18:25,039 --> 00:18:27,039
recompose and see that that belongs to

524
00:18:27,039 --> 00:18:28,240
one user

525
00:18:28,240 --> 00:18:30,000
but that at the protocol level we can

526
00:18:30,000 --> 00:18:31,919
absolutely distinguish

527
00:18:31,919 --> 00:18:34,799
the identity there

528
00:18:37,360 --> 00:18:42,160
yeah i have a bit of a challenge um

529
00:18:42,160 --> 00:18:43,360
how we might turn that into a hard

530
00:18:43,360 --> 00:18:46,160
requirement concretely because

531
00:18:46,160 --> 00:18:48,400
um

532
00:18:49,840 --> 00:18:51,360
the obvious way to write a requirement

533
00:18:51,360 --> 00:18:53,360
is a requirement on credentials

534
00:18:53,360 --> 00:18:56,559
um and you you might imagine putting a

535
00:18:56,559 --> 00:18:58,240
device identifier in somewhere outside

536
00:18:58,240 --> 00:18:59,360
the credentials so if you had

537
00:18:59,360 --> 00:19:01,280
say certificates which have a very

538
00:19:01,280 --> 00:19:03,520
structured constrained format

539
00:19:03,520 --> 00:19:05,840
you might put a device identifier in say

540
00:19:05,840 --> 00:19:07,760
a key package extension

541
00:19:07,760 --> 00:19:11,200
um right as you know a a

542
00:19:11,200 --> 00:19:12,640
field where you can have more control

543
00:19:12,640 --> 00:19:14,240
it's not as constrained

544
00:19:14,240 --> 00:19:17,360
um so if you were going to have a must

545
00:19:17,360 --> 00:19:17,840
here

546
00:19:17,840 --> 00:19:19,520
um and i see this it says should in the

547
00:19:19,520 --> 00:19:20,960
title slide so

548
00:19:20,960 --> 00:19:24,559
maybe we can leave it should um and the

549
00:19:24,559 --> 00:19:25,600
advisory but if you're going to have a

550
00:19:25,600 --> 00:19:28,400
harder constraint here you would have to

551
00:19:28,400 --> 00:19:29,919
find some way to cover both the

552
00:19:29,919 --> 00:19:31,440
credential case and the

553
00:19:31,440 --> 00:19:34,160
um you know device identity being

554
00:19:34,160 --> 00:19:39,840
elsewhere case

555
00:19:47,440 --> 00:19:52,080
well i think you know the uh

556
00:19:52,080 --> 00:19:55,840
sorry go ahead yeah sorry go ahead

557
00:19:55,840 --> 00:19:57,840
so you'd be fine with having unique

558
00:19:57,840 --> 00:20:00,480
signing keys

559
00:20:00,559 --> 00:20:06,159
yeah for sure

560
00:20:06,159 --> 00:20:09,120
i guess maybe i'm next in the queue i've

561
00:20:09,120 --> 00:20:10,720
been kaydak

562
00:20:10,720 --> 00:20:13,280
so i think one thing to think about

563
00:20:13,280 --> 00:20:13,840
would be

564
00:20:13,840 --> 00:20:16,400
in terms of what are the uniqueness

565
00:20:16,400 --> 00:20:17,600
requirements for

566
00:20:17,600 --> 00:20:19,440
if you have one thing and you need to go

567
00:20:19,440 --> 00:20:22,559
to the other for identities versus keys

568
00:20:22,559 --> 00:20:25,919
and it seems intuitive at least

569
00:20:25,919 --> 00:20:28,720
though i haven't done the analysis that

570
00:20:28,720 --> 00:20:30,240
you know you've got the key is going to

571
00:20:30,240 --> 00:20:31,360
be signing

572
00:20:31,360 --> 00:20:33,760
a message or something like that and so

573
00:20:33,760 --> 00:20:36,000
you probably do want the mapping from

574
00:20:36,000 --> 00:20:40,000
key to identity to be

575
00:20:40,000 --> 00:20:42,960
unique uh so that you can say you know

576
00:20:42,960 --> 00:20:44,960
this particular key corresponds to this

577
00:20:44,960 --> 00:20:46,080
identity who is

578
00:20:46,080 --> 00:20:49,200
what did whatever action it's not

579
00:20:49,200 --> 00:20:50,720
intuitively clear to me that you need

580
00:20:50,720 --> 00:20:53,039
the uniqueness the other way

581
00:20:53,039 --> 00:20:55,760
um but i think there's probably some

582
00:20:55,760 --> 00:20:57,200
pretty strong reasons

583
00:20:57,200 --> 00:21:03,360
to want unique keys at least

584
00:21:03,360 --> 00:21:04,799
yeah thanks ben that's an interesting

585
00:21:04,799 --> 00:21:07,280
thing about it

586
00:21:14,840 --> 00:21:16,880
martin

587
00:21:16,880 --> 00:21:20,000
uh the shoot is interesting

588
00:21:20,000 --> 00:21:22,320
um what's the interoperability

589
00:21:22,320 --> 00:21:23,200
consequence

590
00:21:23,200 --> 00:21:26,559
of violating the should and

591
00:21:26,559 --> 00:21:29,280
if someone were to enforce a policy that

592
00:21:29,280 --> 00:21:32,159
said that the keys have to be unique

593
00:21:32,159 --> 00:21:34,559
um and that was not a universal policy

594
00:21:34,559 --> 00:21:36,720
how would someone

595
00:21:36,720 --> 00:21:39,039
adding people to this group know that

596
00:21:39,039 --> 00:21:40,640
that this is something that they would

597
00:21:40,640 --> 00:21:43,600
be constrained by i think that applies

598
00:21:43,600 --> 00:21:45,039
more to the identities than it does to

599
00:21:45,039 --> 00:21:46,640
the keys i think

600
00:21:46,640 --> 00:21:48,320
i'm coming to the conclusion here from

601
00:21:48,320 --> 00:21:50,080
the discussion that the keys need to be

602
00:21:50,080 --> 00:21:52,000
unique no matter what but the

603
00:21:52,000 --> 00:21:55,360
identities might not be

604
00:21:57,360 --> 00:21:58,960
yeah that's a good point i i think the

605
00:21:58,960 --> 00:22:00,159
interoperability is a real challenge

606
00:22:00,159 --> 00:22:01,440
here i think

607
00:22:01,440 --> 00:22:02,799
we could we should we could probably

608
00:22:02,799 --> 00:22:05,039
have and it sounds like there's

609
00:22:05,039 --> 00:22:06,400
some agreement that we should probably

610
00:22:06,400 --> 00:22:08,400
have a hard requirement must that you

611
00:22:08,400 --> 00:22:09,840
should must have

612
00:22:09,840 --> 00:22:14,320
unique signing keys per leaf

613
00:22:14,960 --> 00:22:16,960
but that maybe the constraint around

614
00:22:16,960 --> 00:22:18,720
identity could be softer

615
00:22:18,720 --> 00:22:23,679
you should have unique identities

616
00:22:23,840 --> 00:22:25,200
in which case you wouldn't be able to

617
00:22:25,200 --> 00:22:27,600
enforce uniqueness in any way

618
00:22:27,600 --> 00:22:29,039
the expectation would be that that would

619
00:22:29,039 --> 00:22:31,840
just be something that people do

620
00:22:31,840 --> 00:22:33,679
or it will be up to the application to

621
00:22:33,679 --> 00:22:37,440
decide what what it means by uniqueness

622
00:22:38,000 --> 00:22:39,600
and everyone would have to then tolerate

623
00:22:39,600 --> 00:22:41,440
the fact that there could be two

624
00:22:41,440 --> 00:22:43,919
nodes in the tree with the same identity

625
00:22:43,919 --> 00:22:45,360
yeah

626
00:22:45,360 --> 00:22:46,799
it would be something for example your

627
00:22:46,799 --> 00:22:48,720
mls stack wouldn't enforce for you

628
00:22:48,720 --> 00:22:55,840
um to think about it that way right

629
00:23:03,200 --> 00:23:05,679
um so dkg to your question java the

630
00:23:05,679 --> 00:23:07,280
identities right now are

631
00:23:07,280 --> 00:23:09,360
arbitrary byte strings um they're

632
00:23:09,360 --> 00:23:10,880
represented by credentials

633
00:23:10,880 --> 00:23:13,200
which i'll have extensible types there's

634
00:23:13,200 --> 00:23:15,200
a basic type which just carries a byte

635
00:23:15,200 --> 00:23:16,159
string you can also

636
00:23:16,159 --> 00:23:18,240
put a credential uh an x59 certificate

637
00:23:18,240 --> 00:23:19,360
in that slot in which case you get a

638
00:23:19,360 --> 00:23:23,280
more structured identity

639
00:23:23,280 --> 00:23:24,559
so it sounds like they're based on the

640
00:23:24,559 --> 00:23:25,520
chat there might be a little bit more

641
00:23:25,520 --> 00:23:26,960
discussion of this but it sounds

642
00:23:26,960 --> 00:23:28,640
the conclusion i'm kind of hearing here

643
00:23:28,640 --> 00:23:30,960
is that we can have a must

644
00:23:30,960 --> 00:23:35,600
on uniqueness of signing public keys

645
00:23:35,600 --> 00:23:37,200
and then probably some recommendations

646
00:23:37,200 --> 00:23:39,039
and should level requirements around

647
00:23:39,039 --> 00:23:42,159
uniqueness of identities does that sound

648
00:23:42,159 --> 00:23:45,200
about right so folks

649
00:23:47,440 --> 00:23:49,919
all right thanks for the discussion i'll

650
00:23:49,919 --> 00:23:51,919
um provide that feedback back to the

651
00:23:51,919 --> 00:23:54,159
pr author so on this particular point i

652
00:23:54,159 --> 00:23:55,360
think it's probably important to make

653
00:23:55,360 --> 00:23:57,120
sure we get the security considerations

654
00:23:57,120 --> 00:23:59,720
right on what this means

655
00:23:59,720 --> 00:24:05,840
yep okay

656
00:24:06,799 --> 00:24:09,120
all right so this this is one uh this is

657
00:24:09,120 --> 00:24:10,080
an issue

658
00:24:10,080 --> 00:24:11,760
that i believe um francisco's file

659
00:24:11,760 --> 00:24:13,520
tonight there's a corresponding pr that

660
00:24:13,520 --> 00:24:14,480
joel provided

661
00:24:14,480 --> 00:24:18,240
um there's a kind of obvious problem and

662
00:24:18,240 --> 00:24:18,799
a

663
00:24:18,799 --> 00:24:20,960
broader suggestion um the obvious

664
00:24:20,960 --> 00:24:22,320
problem is just a missing word

665
00:24:22,320 --> 00:24:26,320
um which joel's pr reads um that fixes a

666
00:24:26,320 --> 00:24:27,440
uh

667
00:24:27,440 --> 00:24:29,200
you know an issue with the parent hash

668
00:24:29,200 --> 00:24:30,960
verification algorithm

669
00:24:30,960 --> 00:24:34,080
um there's also the

670
00:24:34,080 --> 00:24:35,679
this request for a more formal

671
00:24:35,679 --> 00:24:37,200
description of the the

672
00:24:37,200 --> 00:24:39,520
the algorithms uh in the spec to reduce

673
00:24:39,520 --> 00:24:41,840
ambiguity um

674
00:24:41,840 --> 00:24:43,279
i don't know if franciscus is on the

675
00:24:43,279 --> 00:24:45,039
call

676
00:24:45,039 --> 00:24:46,640
or if joelle um

677
00:24:46,640 --> 00:24:48,559
[Music]

678
00:24:48,559 --> 00:24:51,919
has talked to franciscus about this

679
00:24:51,919 --> 00:24:53,440
um knows what kind of what the objective

680
00:24:53,440 --> 00:24:55,760
is here but um

681
00:24:55,760 --> 00:24:58,880
yeah i'm kind of unclear on what to do

682
00:24:58,880 --> 00:24:59,279
with this

683
00:24:59,279 --> 00:25:03,200
without further details martin

684
00:25:12,480 --> 00:25:15,440
last time i didn't take myself out sorry

685
00:25:15,440 --> 00:25:17,919
ah okay

686
00:25:25,600 --> 00:25:28,000
hello raphael have you either talked

687
00:25:28,000 --> 00:25:29,840
with franciscus about this to have any

688
00:25:29,840 --> 00:25:30,400
idea what

689
00:25:30,400 --> 00:25:32,480
what what he's looking for more

690
00:25:32,480 --> 00:25:35,039
concretely

691
00:25:38,000 --> 00:25:40,240
in the meantime but i think what you

692
00:25:40,240 --> 00:25:41,200
quoted there is

693
00:25:41,200 --> 00:25:44,320
uh the gist of it we we need to be

694
00:25:44,320 --> 00:25:45,039
employed

695
00:25:45,039 --> 00:25:47,520
absolutely sure that this algorithm

696
00:25:47,520 --> 00:25:50,320
works as such

697
00:25:51,600 --> 00:25:56,080
yeah i think what i might do is um

698
00:25:56,080 --> 00:25:58,720
maybe we could kind of put this on hold

699
00:25:58,720 --> 00:25:59,840
until we

700
00:25:59,840 --> 00:26:04,000
um get some interoperability going on

701
00:26:04,000 --> 00:26:07,279
tree chem and parent hash validation and

702
00:26:07,279 --> 00:26:08,480
see if we run into

703
00:26:08,480 --> 00:26:10,880
any interop issues as we're doing that

704
00:26:10,880 --> 00:26:13,039
that would benefit from clarification

705
00:26:13,039 --> 00:26:15,760
um kind of empirically test whether this

706
00:26:15,760 --> 00:26:17,120
is uh clear enough

707
00:26:17,120 --> 00:26:18,640
to get implementations that work

708
00:26:18,640 --> 00:26:20,159
together

709
00:26:20,159 --> 00:26:22,159
so kind of mark this one i'll merge the

710
00:26:22,159 --> 00:26:24,720
the typo fix

711
00:26:24,720 --> 00:26:27,279
and then keep the issue open pending

712
00:26:27,279 --> 00:26:30,159
interop issues

713
00:26:32,960 --> 00:26:37,760
sound good without objection

714
00:26:37,760 --> 00:26:40,559
well you can proceed

715
00:26:44,720 --> 00:26:47,919
next one there we go

716
00:26:47,919 --> 00:26:51,279
okay so this one is a little complex

717
00:26:51,279 --> 00:26:53,440
this is an issue that brita filed i

718
00:26:53,440 --> 00:26:54,480
don't know if she's on it's a bit

719
00:26:54,480 --> 00:26:57,360
earlier times in

720
00:26:58,159 --> 00:26:59,919
so when we introduced external commit

721
00:26:59,919 --> 00:27:01,520
that was one of the last big changes we

722
00:27:01,520 --> 00:27:02,159
made to

723
00:27:02,159 --> 00:27:05,520
let people join from outside external

724
00:27:05,520 --> 00:27:07,440
commit you can add multiple proposals in

725
00:27:07,440 --> 00:27:08,080
there so

726
00:27:08,080 --> 00:27:09,840
you know the major application of it is

727
00:27:09,840 --> 00:27:11,279
to add yourself

728
00:27:11,279 --> 00:27:12,720
but you can also do things like adding

729
00:27:12,720 --> 00:27:14,320
other people or removing members of the

730
00:27:14,320 --> 00:27:15,679
group when you do that at the same time

731
00:27:15,679 --> 00:27:17,039
as long as people are willing to let you

732
00:27:17,039 --> 00:27:19,120
do that

733
00:27:19,120 --> 00:27:20,640
in particular one of the things you can

734
00:27:20,640 --> 00:27:22,799
do is construct a resync operation out

735
00:27:22,799 --> 00:27:23,360
of this

736
00:27:23,360 --> 00:27:25,520
where you delete your old the old

737
00:27:25,520 --> 00:27:27,919
version of yourself out of the tree

738
00:27:27,919 --> 00:27:29,760
and in the same commit you add your new

739
00:27:29,760 --> 00:27:31,440
a new representation of yourself in the

740
00:27:31,440 --> 00:27:31,760
same

741
00:27:31,760 --> 00:27:35,840
external commit

742
00:27:35,919 --> 00:27:37,679
in the in the issue i think raphael

743
00:27:37,679 --> 00:27:39,360
noted that if we have this

744
00:27:39,360 --> 00:27:41,120
uniqueness criterion you can recognize

745
00:27:41,120 --> 00:27:43,039
this case now right because the old self

746
00:27:43,039 --> 00:27:44,320
and the new self will have the same

747
00:27:44,320 --> 00:27:46,159
identity presumably

748
00:27:46,159 --> 00:27:47,600
at the top level but maybe different

749
00:27:47,600 --> 00:27:49,440
device identifiers or and

750
00:27:49,440 --> 00:27:51,679
certainly different public keys um so

751
00:27:51,679 --> 00:27:52,480
you can

752
00:27:52,480 --> 00:27:54,799
recognize when um you are doing this

753
00:27:54,799 --> 00:27:56,720
recent operation

754
00:27:56,720 --> 00:27:59,039
um what brita notes is that this is not

755
00:27:59,039 --> 00:28:02,880
quite as tight as it could be

756
00:28:02,880 --> 00:28:04,559
by default this the the new

757
00:28:04,559 --> 00:28:06,720
representation the the entity doing this

758
00:28:06,720 --> 00:28:08,559
external commit re-add

759
00:28:08,559 --> 00:28:10,559
resync doesn't have to prove that they

760
00:28:10,559 --> 00:28:11,840
were ever a member of the group in the

761
00:28:11,840 --> 00:28:12,880
past

762
00:28:12,880 --> 00:28:16,960
um you can you could if um

763
00:28:16,960 --> 00:28:18,559
if you had access to someone signing key

764
00:28:18,559 --> 00:28:20,480
you could do one of these operations

765
00:28:20,480 --> 00:28:23,679
i'm not having access to any past

766
00:28:23,679 --> 00:28:25,039
history of the group

767
00:28:25,039 --> 00:28:28,399
um though the obvious way to do this is

768
00:28:28,399 --> 00:28:29,279
to to

769
00:28:29,279 --> 00:28:31,279
to take a psk that was derived from some

770
00:28:31,279 --> 00:28:32,880
earlier epoch i think we've

771
00:28:32,880 --> 00:28:35,360
got a resumption psk that might be um

772
00:28:35,360 --> 00:28:36,240
usable for this

773
00:28:36,240 --> 00:28:38,080
um and you would inject that in your

774
00:28:38,080 --> 00:28:40,000
into the new epoch on using a psk

775
00:28:40,000 --> 00:28:42,480
proposal in the external commit

776
00:28:42,480 --> 00:28:44,480
um and so i think the question here is

777
00:28:44,480 --> 00:28:45,760
um should we

778
00:28:45,760 --> 00:28:48,320
recommend or require that that you have

779
00:28:48,320 --> 00:28:50,000
this proof of past membership

780
00:28:50,000 --> 00:28:52,320
in this uh resync scenario it would

781
00:28:52,320 --> 00:28:54,399
require a bit more formality for

782
00:28:54,399 --> 00:28:55,960
kind of formalizing this resync

783
00:28:55,960 --> 00:28:58,320
operation um

784
00:28:58,320 --> 00:29:00,080
but i think we kind of have the tools to

785
00:29:00,080 --> 00:29:02,399
do it between identity uniqueness being

786
00:29:02,399 --> 00:29:04,080
making the situation recognizable and

787
00:29:04,080 --> 00:29:06,080
the resumption psk so

788
00:29:06,080 --> 00:29:07,760
mainly be a recommendation you know

789
00:29:07,760 --> 00:29:09,080
formalizing the situation and

790
00:29:09,080 --> 00:29:10,240
recommending

791
00:29:10,240 --> 00:29:14,320
um what you do in that situation um

792
00:29:14,320 --> 00:29:15,600
personally i don't i don't have a strong

793
00:29:15,600 --> 00:29:18,000
feeling about this um

794
00:29:18,000 --> 00:29:22,000
i open the floor if anyone else does

795
00:29:22,159 --> 00:29:23,840
oh while while people come to the queue

796
00:29:23,840 --> 00:29:26,240
i'll note that the bottom bullet here

797
00:29:26,240 --> 00:29:28,240
this does make a bit of an odd

798
00:29:28,240 --> 00:29:30,480
assumption about

799
00:29:30,480 --> 00:29:32,559
state loss right the point of reset is

800
00:29:32,559 --> 00:29:34,080
that you've lost your state associated

801
00:29:34,080 --> 00:29:35,120
with the group

802
00:29:35,120 --> 00:29:36,799
you've desync with the group and you

803
00:29:36,799 --> 00:29:40,559
need to reinitialize from from no state

804
00:29:40,559 --> 00:29:42,640
but if we require that you have a psk

805
00:29:42,640 --> 00:29:43,760
from earlier epoch

806
00:29:43,760 --> 00:29:46,559
then you can't resync if you've lost

807
00:29:46,559 --> 00:29:48,000
that state

808
00:29:48,000 --> 00:29:51,360
so we would kind of reduce the utility

809
00:29:51,360 --> 00:29:52,000
the

810
00:29:52,000 --> 00:29:54,080
applicability of this resync operations

811
00:29:54,080 --> 00:29:55,600
cases where you've lost

812
00:29:55,600 --> 00:29:57,520
most of your state but you still have

813
00:29:57,520 --> 00:29:59,120
your psks around somewhere

814
00:29:59,120 --> 00:30:01,840
um i think given that operation little

815
00:30:01,840 --> 00:30:03,200
thing i think i might tilt

816
00:30:03,200 --> 00:30:05,760
slightly away from making this a

817
00:30:05,760 --> 00:30:06,799
requirement just

818
00:30:06,799 --> 00:30:08,640
to make the recent operation a little

819
00:30:08,640 --> 00:30:10,240
bit more general that does have the

820
00:30:10,240 --> 00:30:11,600
you know there's a there's a trade-off

821
00:30:11,600 --> 00:30:13,919
here between applicability and requiring

822
00:30:13,919 --> 00:30:15,279
that you keep state around you still

823
00:30:15,279 --> 00:30:16,320
have state around not

824
00:30:16,320 --> 00:30:18,960
desync that state versus um you know

825
00:30:18,960 --> 00:30:19,600
allowing

826
00:30:19,600 --> 00:30:20,799
folks who don't have that state to

827
00:30:20,799 --> 00:30:23,440
rejoin but um

828
00:30:23,440 --> 00:30:25,520
yeah again open to feedback on where

829
00:30:25,520 --> 00:30:28,879
where folks think we should land on this

830
00:30:33,919 --> 00:30:37,279
yeah this reference speaking um so

831
00:30:37,279 --> 00:30:39,279
yeah to that point i think there is a

832
00:30:39,279 --> 00:30:41,360
valid case though where

833
00:30:41,360 --> 00:30:43,679
um your state could get corrupted over

834
00:30:43,679 --> 00:30:45,279
time because that simply happens in

835
00:30:45,279 --> 00:30:46,559
reality

836
00:30:46,559 --> 00:30:49,600
um and if if you just flip one bit

837
00:30:49,600 --> 00:30:51,360
then you're not able to participate in a

838
00:30:51,360 --> 00:30:52,720
group anymore

839
00:30:52,720 --> 00:30:54,880
while your resumption secrets might

840
00:30:54,880 --> 00:30:57,679
still be perfectly valid

841
00:30:57,679 --> 00:31:00,080
so that would actually still work the

842
00:31:00,080 --> 00:31:02,159
other question here is

843
00:31:02,159 --> 00:31:04,559
in reality on a device how well are the

844
00:31:04,559 --> 00:31:05,919
resumption secrets

845
00:31:05,919 --> 00:31:08,720
protected versus the signing key because

846
00:31:08,720 --> 00:31:10,480
if anything i'd assume that the signing

847
00:31:10,480 --> 00:31:12,240
key is usually better protected than

848
00:31:12,240 --> 00:31:14,080
resumption secrets

849
00:31:14,080 --> 00:31:17,440
um so the question is what what kind of

850
00:31:17,440 --> 00:31:20,000
threat model is it exactly where an

851
00:31:20,000 --> 00:31:22,080
attacker compromises the device

852
00:31:22,080 --> 00:31:24,240
i would assume that that attacker would

853
00:31:24,240 --> 00:31:26,080
get their hands on both the resumption

854
00:31:26,080 --> 00:31:28,399
secrets and the signing key

855
00:31:28,399 --> 00:31:31,519
in that sense but i mean

856
00:31:31,519 --> 00:31:32,960
i don't want to dismiss this i think

857
00:31:32,960 --> 00:31:34,640
it's very uh

858
00:31:34,640 --> 00:31:37,760
important thing to look into

859
00:31:40,960 --> 00:31:43,519
i saw conrad pop up briefly but conrad

860
00:31:43,519 --> 00:31:47,840
you want to have a comment here

861
00:31:49,440 --> 00:31:53,600
yeah uh can anyone hear me yes yeah

862
00:31:53,600 --> 00:31:56,640
uh yeah i mean it depends i guess the

863
00:31:56,640 --> 00:31:58,159
presumption secret would be less likely

864
00:31:58,159 --> 00:31:59,840
to be in multiple devices whereas you

865
00:31:59,840 --> 00:32:01,120
might use the sign-in key across

866
00:32:01,120 --> 00:32:02,640
multiple devices which

867
00:32:02,640 --> 00:32:05,039
would extend the attack surface there so

868
00:32:05,039 --> 00:32:05,679
and also

869
00:32:05,679 --> 00:32:08,159
depending on the updating regime you

870
00:32:08,159 --> 00:32:09,039
might be

871
00:32:09,039 --> 00:32:11,360
cycling between epochs and keeping your

872
00:32:11,360 --> 00:32:12,640
group states

873
00:32:12,640 --> 00:32:14,000
and your resumption key is fresh but

874
00:32:14,000 --> 00:32:16,640
you're depending on

875
00:32:16,640 --> 00:32:18,240
the authentication that you use you

876
00:32:18,240 --> 00:32:20,159
might not cycle your signing key all

877
00:32:20,159 --> 00:32:22,399
that much

878
00:32:22,399 --> 00:32:24,159
so the signing key might not get

879
00:32:24,159 --> 00:32:25,760
regenerated so if someone compromises

880
00:32:25,760 --> 00:32:26,960
you they might have the signing key and

881
00:32:26,960 --> 00:32:28,399
the signing key might keep be the same

882
00:32:28,399 --> 00:32:29,039
for

883
00:32:29,039 --> 00:32:31,279
forevermore and then your assumption

884
00:32:31,279 --> 00:32:43,840
secrets might change over time

885
00:32:46,480 --> 00:32:49,840
so i'm not hearing a real strong

886
00:32:49,840 --> 00:32:51,279
movement one way or another i think we

887
00:32:51,279 --> 00:32:53,679
could certainly have a recommendation

888
00:32:53,679 --> 00:32:54,480
around this

889
00:32:54,480 --> 00:32:56,240
um say in security considerations or

890
00:32:56,240 --> 00:32:58,080
operational considerations

891
00:32:58,080 --> 00:32:59,440
that if you're doing one of these

892
00:32:59,440 --> 00:33:01,440
research resync operations

893
00:33:01,440 --> 00:33:06,320
then you should include a resumption psk

894
00:33:06,320 --> 00:33:08,960
and i think you could also recommend

895
00:33:08,960 --> 00:33:10,159
that applications

896
00:33:10,159 --> 00:33:12,720
enforce this criterion that if uh they

897
00:33:12,720 --> 00:33:14,320
allow resync in this way then they

898
00:33:14,320 --> 00:33:15,360
should

899
00:33:15,360 --> 00:33:18,799
also enforce um that a recent

900
00:33:18,799 --> 00:33:22,480
psk must be present

901
00:33:22,480 --> 00:33:23,840
but this sounds like it's kind of that

902
00:33:23,840 --> 00:33:25,519
recommendation level and not a hard

903
00:33:25,519 --> 00:33:28,159
requirement

904
00:33:28,880 --> 00:33:30,399
so that would kind of be my proposal for

905
00:33:30,399 --> 00:33:31,919
addressing this if there's if

906
00:33:31,919 --> 00:33:33,600
folks don't think there's a need for a

907
00:33:33,600 --> 00:33:39,840
hard requirement

908
00:33:47,600 --> 00:33:49,760
all right nobody's stomping on the

909
00:33:49,760 --> 00:33:52,559
ground to have a hard requirement here

910
00:33:52,559 --> 00:33:54,240
we'll obviously have some discussion on

911
00:33:54,240 --> 00:33:56,320
on github as we uh get this get some

912
00:33:56,320 --> 00:33:58,080
concrete text here

913
00:33:58,080 --> 00:33:59,360
that sounds like a pretty clear

914
00:33:59,360 --> 00:34:01,760
direction

915
00:34:01,919 --> 00:34:03,600
all right this is the last of the issues

916
00:34:03,600 --> 00:34:05,039
i think

917
00:34:05,039 --> 00:34:08,560
um hubert chatty from

918
00:34:08,560 --> 00:34:11,119
matrix.org uh raised this um on the

919
00:34:11,119 --> 00:34:11,918
mailing list

920
00:34:11,918 --> 00:34:14,320
that there is some ambiguity around what

921
00:34:14,320 --> 00:34:17,760
group context you use where

922
00:34:18,480 --> 00:34:20,239
with proposal commit we basically

923
00:34:20,239 --> 00:34:23,119
isolated all of our complexity into one

924
00:34:23,119 --> 00:34:25,520
function call or two generating commits

925
00:34:25,520 --> 00:34:27,119
and handling them

926
00:34:27,119 --> 00:34:31,199
um in the process of generating or

927
00:34:31,199 --> 00:34:32,480
handling a commit

928
00:34:32,480 --> 00:34:34,719
it turns out that you need to use three

929
00:34:34,719 --> 00:34:36,239
different group contexts for different

930
00:34:36,239 --> 00:34:37,760
operations

931
00:34:37,760 --> 00:34:40,159
when you create or process an update

932
00:34:40,159 --> 00:34:42,239
path

933
00:34:42,239 --> 00:34:45,520
you need to use the

934
00:34:45,599 --> 00:34:48,159
group context that represents the tree

935
00:34:48,159 --> 00:34:48,719
as

936
00:34:48,719 --> 00:34:51,440
a plot you know as you're using it to

937
00:34:51,440 --> 00:34:54,239
create or process that update path

938
00:34:54,239 --> 00:34:55,760
which means you've taken the old group

939
00:34:55,760 --> 00:34:57,520
context and you've applied the proposals

940
00:34:57,520 --> 00:34:58,400
but you haven't

941
00:34:58,400 --> 00:35:00,480
moved forward the transcript yet so it's

942
00:35:00,480 --> 00:35:03,520
this kind of intermediate group contexts

943
00:35:03,520 --> 00:35:05,119
when you update the key schedule a

944
00:35:05,119 --> 00:35:06,320
little later on to generate the

945
00:35:06,320 --> 00:35:08,079
confirmation tag

946
00:35:08,079 --> 00:35:09,760
you use the group context for the new

947
00:35:09,760 --> 00:35:11,599
epoch um you know using with

948
00:35:11,599 --> 00:35:13,040
with the transcript updated and

949
00:35:13,040 --> 00:35:14,320
everything representing the new app

950
00:35:14,320 --> 00:35:15,280
pocket

951
00:35:15,280 --> 00:35:17,280
and finally when you go to sign the mls

952
00:35:17,280 --> 00:35:18,480
plaintext at the end

953
00:35:18,480 --> 00:35:21,599
that needs to be verifiable by someone

954
00:35:21,599 --> 00:35:23,680
who's in the last epoch and so you need

955
00:35:23,680 --> 00:35:25,359
to use the group context for the last

956
00:35:25,359 --> 00:35:28,160
last epoch so this is something that you

957
00:35:28,160 --> 00:35:29,920
know it took me a while to explain here

958
00:35:29,920 --> 00:35:31,440
you can tell this could be confusing to

959
00:35:31,440 --> 00:35:32,720
an implementer

960
00:35:32,720 --> 00:35:35,119
um and it's not super clear in the spec

961
00:35:35,119 --> 00:35:36,720
um laid out how this works

962
00:35:36,720 --> 00:35:39,200
um so the proposal here is just to align

963
00:35:39,200 --> 00:35:40,000
you know create some

964
00:35:40,000 --> 00:35:42,240
taxonomy um that describes what each of

965
00:35:42,240 --> 00:35:43,520
these contexts is

966
00:35:43,520 --> 00:35:45,599
and be real clear in those instructions

967
00:35:45,599 --> 00:35:47,680
where they get where you use which one

968
00:35:47,680 --> 00:35:50,720
um so basically have all you and

969
00:35:50,720 --> 00:35:52,640
we have a specific group context per

970
00:35:52,640 --> 00:35:53,839
epoch

971
00:35:53,839 --> 00:35:56,720
old new depending on on which one you're

972
00:35:56,720 --> 00:35:57,599
pointing to

973
00:35:57,599 --> 00:35:59,760
in the context of a commit and then

974
00:35:59,760 --> 00:36:01,440
we'll have this notion of a provisional

975
00:36:01,440 --> 00:36:03,119
one where the proposal has been applied

976
00:36:03,119 --> 00:36:03,440
but

977
00:36:03,440 --> 00:36:07,760
otherwise hasn't been updated um

978
00:36:07,760 --> 00:36:10,880
this you know hopefully is just a

979
00:36:10,880 --> 00:36:12,800
clarification hopefully aligns with what

980
00:36:12,800 --> 00:36:14,160
people how people are understanding the

981
00:36:14,160 --> 00:36:15,280
spec already

982
00:36:15,280 --> 00:36:16,960
i wanted to put it up here in case folks

983
00:36:16,960 --> 00:36:19,359
had comments or concerns and this didn't

984
00:36:19,359 --> 00:36:20,560
align with what people were already

985
00:36:20,560 --> 00:36:22,880
thinking

986
00:36:25,680 --> 00:36:27,440
rafael conrad you guys have been uh

987
00:36:27,440 --> 00:36:30,079
implementing

988
00:36:33,520 --> 00:36:34,480
i think this is mainly just a

989
00:36:34,480 --> 00:36:35,760
clarification so we'll we'll get some

990
00:36:35,760 --> 00:36:36,640
text

991
00:36:36,640 --> 00:36:38,480
um put together don't think this will

992
00:36:38,480 --> 00:36:41,040
really affect interrupt

993
00:36:41,040 --> 00:36:43,599
yep that's great all right and then i

994
00:36:43,599 --> 00:36:44,960
think it's the last slide

995
00:36:44,960 --> 00:36:48,400
that is the last one i just wanted to

996
00:36:48,400 --> 00:36:51,599
talk quickly about the next few steps

997
00:36:51,599 --> 00:36:53,599
um so i think we've got some interrupt

998
00:36:53,599 --> 00:36:55,200
testing going we would love to have more

999
00:36:55,200 --> 00:36:56,880
implementations

1000
00:36:56,880 --> 00:37:00,079
um seems like we're we're on track to

1001
00:37:00,079 --> 00:37:00,960
kind of get that done

1002
00:37:00,960 --> 00:37:03,520
in the next the rest of this month april

1003
00:37:03,520 --> 00:37:04,400
is a generous

1004
00:37:04,400 --> 00:37:07,920
eta on getting interrupt testing done

1005
00:37:07,920 --> 00:37:10,240
at the end of that um i think we'll

1006
00:37:10,240 --> 00:37:12,320
continue to target draft 11.

1007
00:37:12,320 --> 00:37:14,640
um maybe we may let in say the

1008
00:37:14,640 --> 00:37:17,599
truncation thing or something like that

1009
00:37:17,599 --> 00:37:19,119
maybe not but continue to target draft

1010
00:37:19,119 --> 00:37:21,040
11 for interrupt testing

1011
00:37:21,040 --> 00:37:23,520
um then once we get to the you know we

1012
00:37:23,520 --> 00:37:24,240
once we have

1013
00:37:24,240 --> 00:37:26,720
things interoperating um and have some

1014
00:37:26,720 --> 00:37:27,920
some good signs

1015
00:37:27,920 --> 00:37:31,680
um you know land all the last prs

1016
00:37:31,680 --> 00:37:36,480
issue draft 12 um um and kind of do that

1017
00:37:36,480 --> 00:37:37,680
as soon as we have uh

1018
00:37:37,680 --> 00:37:40,160
interop on draft 11. um that means the

1019
00:37:40,160 --> 00:37:41,760
interrupt time is also your time to get

1020
00:37:41,760 --> 00:37:42,480
any

1021
00:37:42,480 --> 00:37:44,400
last issues in that you would like done

1022
00:37:44,400 --> 00:37:46,160
in the last round of interrupt testing

1023
00:37:46,160 --> 00:37:47,440
but i think before we issue the last

1024
00:37:47,440 --> 00:37:49,200
call we should probably take

1025
00:37:49,200 --> 00:37:52,160
these these last changes which are you

1026
00:37:52,160 --> 00:37:53,520
know

1027
00:37:53,520 --> 00:37:55,200
fairly straightforward so the updates

1028
00:37:55,200 --> 00:37:56,640
the implementation should be um

1029
00:37:56,640 --> 00:37:59,599
fairly small so i propose that before we

1030
00:37:59,599 --> 00:38:00,880
issue last call we should

1031
00:38:00,880 --> 00:38:03,119
update implementations revalidating her

1032
00:38:03,119 --> 00:38:04,000
up

1033
00:38:04,000 --> 00:38:07,280
um and then head on to the last call so

1034
00:38:07,280 --> 00:38:07,839
that's kind of

1035
00:38:07,839 --> 00:38:11,440
the maps completion love to get folks

1036
00:38:11,440 --> 00:38:12,720
into that

1037
00:38:12,720 --> 00:38:14,400
is that essentially the idea that you'll

1038
00:38:14,400 --> 00:38:16,839
work to an editor's copy on the github

1039
00:38:16,839 --> 00:38:18,720
repo before

1040
00:38:18,720 --> 00:38:20,240
submitting it is that kind of the idea

1041
00:38:20,240 --> 00:38:22,399
for

1042
00:38:22,480 --> 00:38:24,880
well i think for interop i would like to

1043
00:38:24,880 --> 00:38:26,800
say we'll we'll point to a stable

1044
00:38:26,800 --> 00:38:29,119
reference so i'll point to draft 11 and

1045
00:38:29,119 --> 00:38:31,680
then once draft 12 is out

1046
00:38:31,680 --> 00:38:33,920
we'll implement that and do that and

1047
00:38:33,920 --> 00:38:35,119
make whatever

1048
00:38:35,119 --> 00:38:38,000
minor changes we need to make but the

1049
00:38:38,000 --> 00:38:39,359
the editor so the editor's copy on

1050
00:38:39,359 --> 00:38:39,839
github

1051
00:38:39,839 --> 00:38:41,920
as we merge prs will will be in advance

1052
00:38:41,920 --> 00:38:47,839
of what we're testing for interrupt

1053
00:38:49,359 --> 00:38:51,040
but yeah i think that now that we have a

1054
00:38:51,040 --> 00:38:52,640
realistic um

1055
00:38:52,640 --> 00:38:55,359
track to um getting this out of the

1056
00:38:55,359 --> 00:38:56,240
working group

1057
00:38:56,240 --> 00:38:59,680
by the summertime so my only caveat here

1058
00:38:59,680 --> 00:39:00,800
is that we have to make sure that

1059
00:39:00,800 --> 00:39:01,680
whatever

1060
00:39:01,680 --> 00:39:03,599
security research we get back from the

1061
00:39:03,599 --> 00:39:05,760
community um gets reflected i know

1062
00:39:05,760 --> 00:39:07,200
you're plugged in pretty closely with

1063
00:39:07,200 --> 00:39:07,839
them

1064
00:39:07,839 --> 00:39:09,440
so there shouldn't be any surprises but

1065
00:39:09,440 --> 00:39:11,440
i'm hoping that at some point we can

1066
00:39:11,440 --> 00:39:12,800
have some kind of like

1067
00:39:12,800 --> 00:39:14,480
hey these six people looked at it these

1068
00:39:14,480 --> 00:39:16,079
guys used tamara and these guys used pro

1069
00:39:16,079 --> 00:39:16,880
verify

1070
00:39:16,880 --> 00:39:18,400
these guys did it by hand we're

1071
00:39:18,400 --> 00:39:20,400
basically good with you know these 20

1072
00:39:20,400 --> 00:39:21,680
different caveats

1073
00:39:21,680 --> 00:39:23,920
um to go from there because i think that

1074
00:39:23,920 --> 00:39:25,520
if we're gonna you know make this deal

1075
00:39:25,520 --> 00:39:26,480
with the devil

1076
00:39:26,480 --> 00:39:28,400
um to have the researchers look at our

1077
00:39:28,400 --> 00:39:30,079
protocol before we publish them we have

1078
00:39:30,079 --> 00:39:31,359
to make sure that we explicitly

1079
00:39:31,359 --> 00:39:32,720
acknowledge that we actually look and

1080
00:39:32,720 --> 00:39:34,000
took their input in

1081
00:39:34,000 --> 00:39:35,599
um and that may require having another

1082
00:39:35,599 --> 00:39:36,960
interim or something just to like

1083
00:39:36,960 --> 00:39:38,160
formally go through that

1084
00:39:38,160 --> 00:39:40,000
to give people a chance to say something

1085
00:39:40,000 --> 00:39:42,320
or try to understand it

1086
00:39:42,320 --> 00:39:44,320
yeah absolutely happy to address those

1087
00:39:44,320 --> 00:39:45,440
and um i think

1088
00:39:45,440 --> 00:39:46,960
uh joelle was maybe talking to some

1089
00:39:46,960 --> 00:39:48,400
researchers to try and calibrate um

1090
00:39:48,400 --> 00:39:49,280
who's doing what

1091
00:39:49,280 --> 00:39:52,079
and when we expect to see some results

1092
00:39:52,079 --> 00:39:53,200
um

1093
00:39:53,200 --> 00:39:55,119
speaking of interims i think there's

1094
00:39:55,119 --> 00:39:57,920
already uh um

1095
00:39:57,920 --> 00:39:59,200
brendan raised an issue on the mailing

1096
00:39:59,200 --> 00:40:00,800
list this morning that probably merits

1097
00:40:00,800 --> 00:40:02,320
anyone to talk about um

1098
00:40:02,320 --> 00:40:03,760
so we should probably have a couple

1099
00:40:03,760 --> 00:40:05,520
calls sort out any last

1100
00:40:05,520 --> 00:40:10,240
issues as we get through this

1101
00:40:10,240 --> 00:40:12,800
all right i think i'm done all right i

1102
00:40:12,800 --> 00:40:14,240
will switch over to

1103
00:40:14,240 --> 00:40:18,160
the architecture draft

1104
00:40:18,160 --> 00:40:20,079
hopefully i can do that without blowing

1105
00:40:20,079 --> 00:40:22,839
them up share

1106
00:40:22,839 --> 00:40:25,839
this

1107
00:40:39,680 --> 00:40:42,560
so benjamin produced these slides uh

1108
00:40:42,560 --> 00:40:43,280
somewhere

1109
00:40:43,280 --> 00:40:46,640
um uh

1110
00:40:46,640 --> 00:40:48,560
like 20 minutes ago so i just got him i

1111
00:40:48,560 --> 00:40:49,920
just uploaded him it's one of the things

1112
00:40:49,920 --> 00:40:51,119
i was doing in the background he

1113
00:40:51,119 --> 00:40:52,000
unfortunately couldn't make

1114
00:40:52,000 --> 00:40:53,520
it so i'm going to go ahead and give the

1115
00:40:53,520 --> 00:40:55,040
one slide this should give plenty of

1116
00:40:55,040 --> 00:40:56,240
time for

1117
00:40:56,240 --> 00:40:59,280
sophia um the o6 draft

1118
00:40:59,280 --> 00:41:02,000
version was released today um not

1119
00:41:02,000 --> 00:41:03,839
surprising i think to me but there was a

1120
00:41:03,839 --> 00:41:05,280
whole lot more work involved

1121
00:41:05,280 --> 00:41:07,280
i think than what he really thought we

1122
00:41:07,280 --> 00:41:08,640
were kind of planning for this draft to

1123
00:41:08,640 --> 00:41:09,680
drop in january

1124
00:41:09,680 --> 00:41:11,839
and it kind of got pushed out um and

1125
00:41:11,839 --> 00:41:13,680
there's still a lot left to do

1126
00:41:13,680 --> 00:41:15,680
um we got a whole lot more security and

1127
00:41:15,680 --> 00:41:17,920
privacy considerations of the document

1128
00:41:17,920 --> 00:41:19,440
and some restructuring of the functional

1129
00:41:19,440 --> 00:41:21,040
requirements as well

1130
00:41:21,040 --> 00:41:24,160
um a lot of the changes really were just

1131
00:41:24,160 --> 00:41:25,599
editorial and didn't really affect any

1132
00:41:25,599 --> 00:41:27,520
previous decisions which is good

1133
00:41:27,520 --> 00:41:30,079
um and it's going to take some time to

1134
00:41:30,079 --> 00:41:31,119
actually sync these

1135
00:41:31,119 --> 00:41:33,839
uh sync these two drafts and the reason

1136
00:41:33,839 --> 00:41:35,280
why i think that is important

1137
00:41:35,280 --> 00:41:37,520
uh basically is because i don't think

1138
00:41:37,520 --> 00:41:39,599
that we could drop the protocol draft in

1139
00:41:39,599 --> 00:41:40,880
front of the isg

1140
00:41:40,880 --> 00:41:43,200
without the architecture draft so if we

1141
00:41:43,200 --> 00:41:45,440
need to speed up the architecture draft

1142
00:41:45,440 --> 00:41:46,880
to get in line with the protocol

1143
00:41:46,880 --> 00:41:49,040
document people need to kind of start

1144
00:41:49,040 --> 00:41:50,640
focusing and spending their attention on

1145
00:41:50,640 --> 00:41:53,359
that so the next step for the document

1146
00:41:53,359 --> 00:41:55,680
this is this is again the only slide to

1147
00:41:55,680 --> 00:41:56,880
determine what's missing

1148
00:41:56,880 --> 00:42:00,160
um should be moved or removed

1149
00:42:00,160 --> 00:42:02,880
and the way to do that really is to kind

1150
00:42:02,880 --> 00:42:04,000
of uh

1151
00:42:04,000 --> 00:42:06,720
you know kick stuff up on on the mailing

1152
00:42:06,720 --> 00:42:07,280
list

1153
00:42:07,280 --> 00:42:09,839
and the repo um please sync with the

1154
00:42:09,839 --> 00:42:10,880
authors

1155
00:42:10,880 --> 00:42:13,359
um to make sure we can contribute

1156
00:42:13,359 --> 00:42:14,000
everything all

1157
00:42:14,000 --> 00:42:16,560
all in a row and a good thing um if you

1158
00:42:16,560 --> 00:42:18,160
have any security considerations i think

1159
00:42:18,160 --> 00:42:20,480
conrad's being thrown under the bus here

1160
00:42:20,480 --> 00:42:22,560
um so he's gonna try to make sure that

1161
00:42:22,560 --> 00:42:24,880
it's clear and makes sense to everybody

1162
00:42:24,880 --> 00:42:27,040
um and also i guess there's uh some use

1163
00:42:27,040 --> 00:42:28,400
case there's a use case section that

1164
00:42:28,400 --> 00:42:30,000
brendan has been looking at

1165
00:42:30,000 --> 00:42:31,280
we want to make sure that you reach out

1166
00:42:31,280 --> 00:42:34,000
to him as well and uh this is a nod to

1167
00:42:34,000 --> 00:42:35,359
our other server assist

1168
00:42:35,359 --> 00:42:38,560
document that we discussed um adopting

1169
00:42:38,560 --> 00:42:41,920
last january in 2021 um that's with

1170
00:42:41,920 --> 00:42:43,040
raphael

1171
00:42:43,040 --> 00:42:45,119
and hopefully we'll eventually we'll get

1172
00:42:45,119 --> 00:42:46,240
a draft out of that

1173
00:42:46,240 --> 00:42:48,079
and maybe even adopt it in the working

1174
00:42:48,079 --> 00:42:50,240
group

1175
00:42:50,800 --> 00:42:53,520
i'm kind of pinching here so basically

1176
00:42:53,520 --> 00:42:55,119
it's open season now on the document so

1177
00:42:55,119 --> 00:42:56,800
let's go to it

1178
00:42:56,800 --> 00:42:58,000
and try to make sure we can get the two

1179
00:42:58,000 --> 00:43:00,640
of them synced

1180
00:43:01,440 --> 00:43:04,079
any questions

1181
00:43:08,400 --> 00:43:11,119
uh yeah i have a question i guess for

1182
00:43:11,119 --> 00:43:13,119
you as the chair

1183
00:43:13,119 --> 00:43:15,040
is this the sort of thing where we could

1184
00:43:15,040 --> 00:43:17,200
be listening volunteers to

1185
00:43:17,200 --> 00:43:18,960
look at specific parts of it or do we

1186
00:43:18,960 --> 00:43:21,440
really just need a holistic review

1187
00:43:21,440 --> 00:43:25,599
by as many people as we can get um

1188
00:43:25,599 --> 00:43:28,800
i think it's probably

1189
00:43:28,800 --> 00:43:30,480
i'm hoping for the latter where it can

1190
00:43:30,480 --> 00:43:31,839
kind of happen organically

1191
00:43:31,839 --> 00:43:33,520
that if conrad is kind of you know

1192
00:43:33,520 --> 00:43:35,440
corralling security consideration stuff

1193
00:43:35,440 --> 00:43:36,560
that he'll be looking at

1194
00:43:36,560 --> 00:43:38,400
like what else is also missing and the

1195
00:43:38,400 --> 00:43:39,760
same with brendan looking at the use

1196
00:43:39,760 --> 00:43:40,560
cases

1197
00:43:40,560 --> 00:43:42,319
but yeah i get your point at some point

1198
00:43:42,319 --> 00:43:43,760
we have to be like all right raise your

1199
00:43:43,760 --> 00:43:45,440
hand you're gonna go look at this

1200
00:43:45,440 --> 00:43:47,760
um please look at these sections um and

1201
00:43:47,760 --> 00:43:48,800
maybe we can get that

1202
00:43:48,800 --> 00:43:50,240
going for the next interim which i hope

1203
00:43:50,240 --> 00:43:52,240
to have it sometime in early april

1204
00:43:52,240 --> 00:43:54,160
and we can actually start to pin people

1205
00:43:54,160 --> 00:43:55,760
down

1206
00:43:55,760 --> 00:43:59,280
sounds good thanks and yeah if anybody

1207
00:43:59,280 --> 00:44:00,880
feels like volunteering feel free to get

1208
00:44:00,880 --> 00:44:02,160
in front of a

1209
00:44:02,160 --> 00:44:04,879
speeding bullet

1210
00:44:05,680 --> 00:44:10,880
all right going once going twice

1211
00:44:10,880 --> 00:44:13,680
so all right sophia you're up i'll drive

1212
00:44:13,680 --> 00:44:16,240
the slides

1213
00:44:17,680 --> 00:44:20,319
okay thank you um i'll wait for the

1214
00:44:20,319 --> 00:44:21,359
slides

1215
00:44:21,359 --> 00:44:23,839
okay

1216
00:44:29,280 --> 00:44:31,599
okay

1217
00:44:35,440 --> 00:44:37,680
yeah okay so thank you very much for

1218
00:44:37,680 --> 00:44:39,119
allowing me to talk today

1219
00:44:39,119 --> 00:44:40,960
my name is sophia from cloudflare and

1220
00:44:40,960 --> 00:44:42,560
today i'm going to be talking about the

1221
00:44:42,560 --> 00:44:44,079
nobility in mls

1222
00:44:44,079 --> 00:44:47,280
it's an exercise please

1223
00:44:47,760 --> 00:44:49,920
um yes and a little bit of the context

1224
00:44:49,920 --> 00:44:51,119
of why we want this

1225
00:44:51,119 --> 00:44:53,200
um there has been a sean said at the

1226
00:44:53,200 --> 00:44:54,720
beginning there has been already some

1227
00:44:54,720 --> 00:44:56,480
talks of having the nobility

1228
00:44:56,480 --> 00:44:58,400
so finally the idea was to sit down

1229
00:44:58,400 --> 00:45:00,800
together and write something around it

1230
00:45:00,800 --> 00:45:02,240
and the idea to actually have the

1231
00:45:02,240 --> 00:45:03,760
nobility is because it has been

1232
00:45:03,760 --> 00:45:05,599
considered a disciple of privacy

1233
00:45:05,599 --> 00:45:06,400
property

1234
00:45:06,400 --> 00:45:08,960
and is currently supported by most of

1235
00:45:08,960 --> 00:45:10,960
the other secure end-to-end

1236
00:45:10,960 --> 00:45:14,160
messaging protocols and on the past

1237
00:45:14,160 --> 00:45:15,200
weeks

1238
00:45:15,200 --> 00:45:16,800
past months i'll say there has been an

1239
00:45:16,800 --> 00:45:18,800
increase of deniability in terms of

1240
00:45:18,800 --> 00:45:21,359
um because sometimes the messages that

1241
00:45:21,359 --> 00:45:23,040
we're sending through emails or to child

1242
00:45:23,040 --> 00:45:24,079
applications

1243
00:45:24,079 --> 00:45:25,920
are strongly authenticated which creates

1244
00:45:25,920 --> 00:45:28,079
a strong proof of authentication

1245
00:45:28,079 --> 00:45:29,520
which can be later used for other

1246
00:45:29,520 --> 00:45:31,440
purposes so the idea is always to put an

1247
00:45:31,440 --> 00:45:32,000
ability

1248
00:45:32,000 --> 00:45:34,160
on top of authentication there are other

1249
00:45:34,160 --> 00:45:36,000
flavors of deniability that i will not

1250
00:45:36,000 --> 00:45:38,319
be talking here because i will be

1251
00:45:38,319 --> 00:45:40,720
only talking about enable authentication

1252
00:45:40,720 --> 00:45:42,640
and just to refresh anyone

1253
00:45:42,640 --> 00:45:44,240
the novel authentication is this

1254
00:45:44,240 --> 00:45:46,000
property by which it cannot be proven

1255
00:45:46,000 --> 00:45:47,440
that a message has been authored by

1256
00:45:47,440 --> 00:45:49,280
anyone in a conversation as

1257
00:45:49,280 --> 00:45:50,960
anybody could have potentially authored

1258
00:45:50,960 --> 00:45:53,040
that message it doesn't go against

1259
00:45:53,040 --> 00:45:55,040
authentication it's actually put on top

1260
00:45:55,040 --> 00:45:56,640
of authentication

1261
00:45:56,640 --> 00:46:01,839
it's just like please

1262
00:46:02,240 --> 00:46:04,319
okay so sophia if i could inject a quick

1263
00:46:04,319 --> 00:46:05,520
question in the last slide

1264
00:46:05,520 --> 00:46:09,119
yes um i would like to distinguish

1265
00:46:09,119 --> 00:46:09,760
between

1266
00:46:09,760 --> 00:46:13,520
two deniability notions one um

1267
00:46:13,520 --> 00:46:15,920
where the set of people who could have

1268
00:46:15,920 --> 00:46:16,880
generated a message

1269
00:46:16,880 --> 00:46:19,119
is the set of people in a participant in

1270
00:46:19,119 --> 00:46:20,800
a conversation

1271
00:46:20,800 --> 00:46:23,920
versus anybody in the universe

1272
00:46:23,920 --> 00:46:25,280
so they seem like pretty two pretty

1273
00:46:25,280 --> 00:46:26,720
designations are you targeting one or

1274
00:46:26,720 --> 00:46:28,240
the other of those

1275
00:46:28,240 --> 00:46:29,920
yeah that's precisely what i'm going to

1276
00:46:29,920 --> 00:46:31,359
talk in this slide

1277
00:46:31,359 --> 00:46:33,920
um precisely because mls is providing

1278
00:46:33,920 --> 00:46:35,680
two forms of authentication and the

1279
00:46:35,680 --> 00:46:37,440
first one is this authentication in

1280
00:46:37,440 --> 00:46:39,520
which you know that someone in the group

1281
00:46:39,520 --> 00:46:41,680
sent a message but you cannot pinpoint

1282
00:46:41,680 --> 00:46:44,000
exactly who sent this message in this

1283
00:46:44,000 --> 00:46:46,000
in this group but it's also providing a

1284
00:46:46,000 --> 00:46:47,280
second form of the

1285
00:46:47,280 --> 00:46:49,200
authentication and a stronger notion of

1286
00:46:49,200 --> 00:46:51,280
authentication because you can indeed

1287
00:46:51,280 --> 00:46:52,880
pinpoint who sent this message in this

1288
00:46:52,880 --> 00:46:54,880
conversation by the uses of digital

1289
00:46:54,880 --> 00:46:56,960
signatures so in the first case of

1290
00:46:56,960 --> 00:46:58,480
authentication in which you know that

1291
00:46:58,480 --> 00:47:00,800
someone in the groups and this message

1292
00:47:00,800 --> 00:47:02,800
we already achieved some certain form of

1293
00:47:02,800 --> 00:47:04,000
deniability

1294
00:47:04,000 --> 00:47:06,079
um because you don't know exactly you

1295
00:47:06,079 --> 00:47:08,079
cannot pinpoint exactly so who's

1296
00:47:08,079 --> 00:47:09,359
who author are messaging that

1297
00:47:09,359 --> 00:47:11,599
conversation but the idea of this that

1298
00:47:11,599 --> 00:47:12,720
i'm going to propose is

1299
00:47:12,720 --> 00:47:14,720
mostly go to the second form of

1300
00:47:14,720 --> 00:47:15,839
authentication

1301
00:47:15,839 --> 00:47:17,839
in which you're using digital signatures

1302
00:47:17,839 --> 00:47:20,240
and try to come up with a proposal to

1303
00:47:20,240 --> 00:47:23,280
have a deniable weight for these

1304
00:47:23,280 --> 00:47:25,760
stronger notion of authentication i

1305
00:47:25,760 --> 00:47:27,040
don't know if that answer the questions

1306
00:47:27,040 --> 00:47:28,000
i can go

1307
00:47:28,000 --> 00:47:32,400
more detail in the next slide actually

1308
00:47:32,400 --> 00:47:35,359
that's great thanks okay yes and as i

1309
00:47:35,359 --> 00:47:36,160
said um

1310
00:47:36,160 --> 00:47:38,240
in the first in the first form of

1311
00:47:38,240 --> 00:47:40,160
authentication that mls has

1312
00:47:40,160 --> 00:47:41,839
we already have a form of wikidine

1313
00:47:41,839 --> 00:47:44,240
ability because no one can actually

1314
00:47:44,240 --> 00:47:46,480
pinpoint who exactly send the message on

1315
00:47:46,480 --> 00:47:47,760
the com on the group

1316
00:47:47,760 --> 00:47:49,599
we can say that someone in the group uh

1317
00:47:49,599 --> 00:47:51,440
send a message but we cannot say who

1318
00:47:51,440 --> 00:47:52,400
exactly

1319
00:47:52,400 --> 00:47:54,400
the second notion is much and the second

1320
00:47:54,400 --> 00:47:56,160
notion of authentication is a little bit

1321
00:47:56,160 --> 00:47:58,240
more difficult to achieve than ability

1322
00:47:58,240 --> 00:48:00,720
because as he has been pointed out um

1323
00:48:00,720 --> 00:48:02,800
digital signatures actually provide a

1324
00:48:02,800 --> 00:48:04,800
stronger notion of authentication

1325
00:48:04,800 --> 00:48:07,520
because anyone can publicly verify that

1326
00:48:07,520 --> 00:48:08,000
a

1327
00:48:08,000 --> 00:48:11,280
signature is authored by someone in this

1328
00:48:11,280 --> 00:48:13,119
case the proposal that we came up with

1329
00:48:13,119 --> 00:48:15,359
is to actually expire the signature uh

1330
00:48:15,359 --> 00:48:16,319
the private

1331
00:48:16,319 --> 00:48:18,160
key corresponding to the public key of

1332
00:48:18,160 --> 00:48:19,680
the signature

1333
00:48:19,680 --> 00:48:23,280
so then the the the the

1334
00:48:23,280 --> 00:48:25,359
you can expand to say like indeed

1335
00:48:25,359 --> 00:48:27,200
anybody who has access to this private

1336
00:48:27,200 --> 00:48:28,319
key who has been

1337
00:48:28,319 --> 00:48:30,160
revoked who has been revealed can

1338
00:48:30,160 --> 00:48:32,319
actually could have potentially offered

1339
00:48:32,319 --> 00:48:34,559
the message as well

1340
00:48:34,559 --> 00:48:37,760
okay so next is like

1341
00:48:39,680 --> 00:48:44,319
oh okay i will wait a little bit okay so

1342
00:48:44,319 --> 00:48:45,680
what's the problems with this the

1343
00:48:45,680 --> 00:48:47,520
problem of this is when to exactly

1344
00:48:47,520 --> 00:48:48,720
reveal the key

1345
00:48:48,720 --> 00:48:50,800
one of the problems that for example oti

1346
00:48:50,800 --> 00:48:51,839
in the bathroom too

1347
00:48:51,839 --> 00:48:55,280
had is that it was um it was um trying

1348
00:48:55,280 --> 00:48:57,760
it was allowing people to reveal the key

1349
00:48:57,760 --> 00:48:59,599
as a sender or as a receiver and the

1350
00:48:59,599 --> 00:49:01,359
problem with this is that if you reveal

1351
00:49:01,359 --> 00:49:02,720
a key as a sender

1352
00:49:02,720 --> 00:49:04,960
then the authentication gets diminished

1353
00:49:04,960 --> 00:49:06,480
um because

1354
00:49:06,480 --> 00:49:08,319
the receiver of that message will not

1355
00:49:08,319 --> 00:49:09,760
have um

1356
00:49:09,760 --> 00:49:11,359
will not have the insurance that it did

1357
00:49:11,359 --> 00:49:12,960
this message was offered by

1358
00:49:12,960 --> 00:49:14,800
the participant who was intended to be

1359
00:49:14,800 --> 00:49:17,040
other but it could have been uh authored

1360
00:49:17,040 --> 00:49:18,160
by anyone else

1361
00:49:18,160 --> 00:49:20,319
so at the end for example oti inspection

1362
00:49:20,319 --> 00:49:22,480
2 decided that only the receivers who

1363
00:49:22,480 --> 00:49:23,359
should reveal

1364
00:49:23,359 --> 00:49:25,680
the appropriate key the problem with

1365
00:49:25,680 --> 00:49:27,200
this is that of course in a group chat

1366
00:49:27,200 --> 00:49:28,640
setting you cannot

1367
00:49:28,640 --> 00:49:30,800
reveal the keys of the participants

1368
00:49:30,800 --> 00:49:32,400
receiving it because you are never

1369
00:49:32,400 --> 00:49:34,319
sure when indeed the message has been

1370
00:49:34,319 --> 00:49:35,839
received because it could have been

1371
00:49:35,839 --> 00:49:36,400
received

1372
00:49:36,400 --> 00:49:38,880
by a participant at x amount of time and

1373
00:49:38,880 --> 00:49:40,880
then by the other participant an x plus

1374
00:49:40,880 --> 00:49:42,079
one amount of time

1375
00:49:42,079 --> 00:49:44,079
so you will never be sure when indeed

1376
00:49:44,079 --> 00:49:45,359
the message has been

1377
00:49:45,359 --> 00:49:48,000
uh received by them all um so that is

1378
00:49:48,000 --> 00:49:48,720
like a no

1379
00:49:48,720 --> 00:49:50,880
um so the idea that we came up with is

1380
00:49:50,880 --> 00:49:52,880
to actually reveal the signature keys by

1381
00:49:52,880 --> 00:49:54,559
something that is already stated in the

1382
00:49:54,559 --> 00:49:55,839
protocol itself

1383
00:49:55,839 --> 00:49:57,359
so one of the things that is already

1384
00:49:57,359 --> 00:49:59,440
stated is that the signature keys

1385
00:49:59,440 --> 00:50:03,200
um are exposed are as shown to the

1386
00:50:03,200 --> 00:50:04,640
messages of the group because they

1387
00:50:04,640 --> 00:50:06,640
belong to the keypad

1388
00:50:06,640 --> 00:50:08,160
the credential belongs to the key

1389
00:50:08,160 --> 00:50:10,880
package object in the leaf of the tree

1390
00:50:10,880 --> 00:50:12,720
and they can be expired because they

1391
00:50:12,720 --> 00:50:14,160
have a lifetime valid

1392
00:50:14,160 --> 00:50:16,400
extension and because they also

1393
00:50:16,400 --> 00:50:17,920
sometimes you can revoke them because

1394
00:50:17,920 --> 00:50:19,760
you change the signature algorithm or

1395
00:50:19,760 --> 00:50:21,440
because the keys get compromised

1396
00:50:21,440 --> 00:50:23,119
so the idea is to use the same

1397
00:50:23,119 --> 00:50:25,599
capability of the key packages to be

1398
00:50:25,599 --> 00:50:26,880
expired or to be

1399
00:50:26,880 --> 00:50:29,599
revoked or to be renewed to have also

1400
00:50:29,599 --> 00:50:30,640
this extension of the

1401
00:50:30,640 --> 00:50:32,960
ability that every time frame that

1402
00:50:32,960 --> 00:50:33,760
extension

1403
00:50:33,760 --> 00:50:36,880
uh decides those signature keys will be

1404
00:50:36,880 --> 00:50:38,800
rotated and the appropriate privacy

1405
00:50:38,800 --> 00:50:40,640
corresponding to the signature keys will

1406
00:50:40,640 --> 00:50:42,720
be revealed

1407
00:50:42,720 --> 00:50:44,559
something to think about more forward is

1408
00:50:44,559 --> 00:50:46,480
also which kind of the nobility this is

1409
00:50:46,480 --> 00:50:48,400
this is not a traditional deniability

1410
00:50:48,400 --> 00:50:49,599
because you are not achieving the

1411
00:50:49,599 --> 00:50:51,440
nobility every time that you receive a

1412
00:50:51,440 --> 00:50:52,000
message

1413
00:50:52,000 --> 00:50:53,839
but rather something that you after you

1414
00:50:53,839 --> 00:50:55,920
receive x amount of messages and after

1415
00:50:55,920 --> 00:50:57,440
the application say hey

1416
00:50:57,440 --> 00:50:59,359
it's time to revoke this message then

1417
00:50:59,359 --> 00:51:00,800
you actually reveal the key

1418
00:51:00,800 --> 00:51:02,720
so i'm somewhat more similar to what

1419
00:51:02,720 --> 00:51:04,559
post-compromise security is this is

1420
00:51:04,559 --> 00:51:06,880
something like post-compromising ability

1421
00:51:06,880 --> 00:51:08,880
and there's still missing uh the details

1422
00:51:08,880 --> 00:51:12,079
to correctly define this property

1423
00:51:12,079 --> 00:51:13,760
also what happens to messages that

1424
00:51:13,760 --> 00:51:15,359
arrive um

1425
00:51:15,359 --> 00:51:17,200
there are way out of time when they

1426
00:51:17,200 --> 00:51:19,920
arrive that arrive really delayed

1427
00:51:19,920 --> 00:51:21,839
in this case those messages will not be

1428
00:51:21,839 --> 00:51:23,760
strongly authenticated anymore because

1429
00:51:23,760 --> 00:51:25,520
the key has already been revealed

1430
00:51:25,520 --> 00:51:27,119
but this is the same case of what

1431
00:51:27,119 --> 00:51:28,960
happens if for example you rotate the

1432
00:51:28,960 --> 00:51:30,960
key and you lose the access to the

1433
00:51:30,960 --> 00:51:32,800
corresponding private key or you change

1434
00:51:32,800 --> 00:51:34,160
the signature algorithm

1435
00:51:34,160 --> 00:51:36,000
and you update after that so it's the

1436
00:51:36,000 --> 00:51:37,440
same case

1437
00:51:37,440 --> 00:51:39,520
this is somewhere related also to what

1438
00:51:39,520 --> 00:51:41,040
richard was already talking at the

1439
00:51:41,040 --> 00:51:41,599
beginning

1440
00:51:41,599 --> 00:51:44,240
about signature keys being the device or

1441
00:51:44,240 --> 00:51:45,119
being unique

1442
00:51:45,119 --> 00:51:46,720
in this case it would be better if they

1443
00:51:46,720 --> 00:51:48,480
are unique to device because it's much

1444
00:51:48,480 --> 00:51:50,960
more easier to rebuild a key per device

1445
00:51:50,960 --> 00:51:53,280
rather to coordinate between devices to

1446
00:51:53,280 --> 00:51:54,800
say to all of them please review your

1447
00:51:54,800 --> 00:51:56,079
keys at the same time

1448
00:51:56,079 --> 00:51:58,400
so it's much more easier uh to do it per

1449
00:51:58,400 --> 00:51:59,839
device as well

1450
00:51:59,839 --> 00:52:01,119
and if you want to look at the draft

1451
00:52:01,119 --> 00:52:03,280
location and ideas it is here

1452
00:52:03,280 --> 00:52:05,040
um please send the issue so discuss

1453
00:52:05,040 --> 00:52:06,319
further if you want

1454
00:52:06,319 --> 00:52:08,240
there or in the mailing list or here

1455
00:52:08,240 --> 00:52:11,598
with that thank you very much

1456
00:52:16,839 --> 00:52:20,319
oh i think i left myself in the queue

1457
00:52:20,319 --> 00:52:21,920
from before but i'll i also have a

1458
00:52:21,920 --> 00:52:23,200
question here so i'll go ahead and ask

1459
00:52:23,200 --> 00:52:23,760
it

1460
00:52:23,760 --> 00:52:27,680
um so does this draft so so i i

1461
00:52:27,680 --> 00:52:29,119
admit i haven't dived into this draft

1462
00:52:29,119 --> 00:52:32,240
real deeply but i think

1463
00:52:32,240 --> 00:52:33,920
we can debate like whether this you know

1464
00:52:33,920 --> 00:52:35,440
what what deniability we're getting what

1465
00:52:35,440 --> 00:52:36,640
the operational challenges are

1466
00:52:36,640 --> 00:52:38,880
what i what i'd like to ask instead is

1467
00:52:38,880 --> 00:52:40,800
um you know regardless of

1468
00:52:40,800 --> 00:52:42,319
um what we're doing here do you need

1469
00:52:42,319 --> 00:52:44,319
does this draft require changes in the

1470
00:52:44,319 --> 00:52:46,000
base protocol or is it just about how

1471
00:52:46,000 --> 00:52:48,400
you use the mechanisms in that protocol

1472
00:52:48,400 --> 00:52:50,079
no it doesn't require changes to the

1473
00:52:50,079 --> 00:52:51,760
main protocol that was one of the

1474
00:52:51,760 --> 00:52:53,520
of the ideas also that it shouldn't

1475
00:52:53,520 --> 00:52:55,520
change the main protocol that much it

1476
00:52:55,520 --> 00:52:55,920
will be

1477
00:52:55,920 --> 00:52:58,000
added as an extension so anyone who has

1478
00:52:58,000 --> 00:53:00,000
this as an extension then the keys will

1479
00:53:00,000 --> 00:53:02,640
be get revealed by the authentication

1480
00:53:02,640 --> 00:53:04,319
service or what any kind of other

1481
00:53:04,319 --> 00:53:06,000
application but it's not changing the

1482
00:53:06,000 --> 00:53:07,520
main draft itself

1483
00:53:07,520 --> 00:53:10,000
great thanks

1484
00:53:11,040 --> 00:53:12,800
okay so we've been talking about

1485
00:53:12,800 --> 00:53:14,640
deniability on and off for the

1486
00:53:14,640 --> 00:53:16,319
for i guess since the beginning of this

1487
00:53:16,319 --> 00:53:18,559
working group so what i'd like to do is

1488
00:53:18,559 --> 00:53:22,160
try to um get a sense um

1489
00:53:22,160 --> 00:53:23,440
i'm going to try to do a poll can i do

1490
00:53:23,440 --> 00:53:26,240
that real quick where do i do that but

1491
00:53:26,240 --> 00:53:28,880
no where i can't remember i did that

1492
00:53:28,880 --> 00:53:30,000
anyways um

1493
00:53:30,000 --> 00:53:31,680
let's um i'm gonna basically try to take

1494
00:53:31,680 --> 00:53:33,839
this to the list um because it looks

1495
00:53:33,839 --> 00:53:35,119
like this is something that we should be

1496
00:53:35,119 --> 00:53:36,880
looking at um and we just have to make

1497
00:53:36,880 --> 00:53:38,000
sure that we

1498
00:53:38,000 --> 00:53:39,839
uh document any security considerations

1499
00:53:39,839 --> 00:53:42,000
as you've got going there so um knowing

1500
00:53:42,000 --> 00:53:42,400
that's

1501
00:53:42,400 --> 00:53:44,240
one of your focus of your jobs that'll

1502
00:53:44,240 --> 00:53:45,839
be great um

1503
00:53:45,839 --> 00:53:46,880
all right so i think we're going to

1504
00:53:46,880 --> 00:53:49,520
switch uh switch uh drafts here we had a

1505
00:53:49,520 --> 00:53:51,440
late breaking draft to talk about the

1506
00:53:51,440 --> 00:53:54,079
crypto analysis of mls so if everybody

1507
00:53:54,079 --> 00:53:55,599
can stay tuned for the next couple of

1508
00:53:55,599 --> 00:54:11,839
minutes i got a presentation from joel

1509
00:54:15,200 --> 00:54:18,319
all right joel you're up

1510
00:54:22,839 --> 00:54:25,839
oops

1511
00:54:31,200 --> 00:54:34,160
all right off you go

1512
00:54:34,480 --> 00:54:39,680
if you're talking we can't hear you all

1513
00:54:39,680 --> 00:54:42,880
right can i hear you now

1514
00:54:42,880 --> 00:54:47,280
yes yep hallelujah

1515
00:54:47,280 --> 00:54:50,319
okay i was getting nervous

1516
00:54:50,319 --> 00:54:52,319
um then i start clicking random buttons

1517
00:54:52,319 --> 00:54:53,760
and it gets worse

1518
00:54:53,760 --> 00:54:56,880
so all right um

1519
00:54:56,880 --> 00:54:58,799
yeah i'm gonna try and summarize a bit

1520
00:54:58,799 --> 00:55:00,480
the um

1521
00:55:00,480 --> 00:55:03,520
the the state of cryptographic analysis

1522
00:55:03,520 --> 00:55:06,720
of mls um

1523
00:55:06,720 --> 00:55:08,960
and let me start by saying you know a

1524
00:55:08,960 --> 00:55:11,040
real in-depth analysis of this is

1525
00:55:11,040 --> 00:55:13,359
kind of out of the scope here and so i'm

1526
00:55:13,359 --> 00:55:14,720
just gonna try and give you the high

1527
00:55:14,720 --> 00:55:16,240
level and and

1528
00:55:16,240 --> 00:55:18,880
you know ask ask whatever questions so

1529
00:55:18,880 --> 00:55:21,839
can we go to the next slide

1530
00:55:22,960 --> 00:55:25,440
all right so yeah so i'll start with a

1531
00:55:25,440 --> 00:55:27,280
very high level sort of the executive

1532
00:55:27,280 --> 00:55:28,720
summary kind of thing

1533
00:55:28,720 --> 00:55:30,960
and then i'll get into a little bit more

1534
00:55:30,960 --> 00:55:32,400
i think i probably switched the order of

1535
00:55:32,400 --> 00:55:34,160
these things but anyway let's uh

1536
00:55:34,160 --> 00:55:38,000
let's let's start out um next slide

1537
00:55:38,000 --> 00:55:41,119
all right so if nothing else

1538
00:55:41,119 --> 00:55:42,880
right then this slide is kind of the

1539
00:55:42,880 --> 00:55:44,480
takeaway i think

1540
00:55:44,480 --> 00:55:48,000
uh that this is sort of my summary

1541
00:55:48,000 --> 00:55:50,640
of the state of all the different

1542
00:55:50,640 --> 00:55:51,920
research projects there's been

1543
00:55:51,920 --> 00:55:54,400
a fair bit of work on this and this is

1544
00:55:54,400 --> 00:55:55,920
kind of my takeaway right now

1545
00:55:55,920 --> 00:55:59,280
of where we stand um i

1546
00:55:59,280 --> 00:56:00,960
you know this is not a precise thing

1547
00:56:00,960 --> 00:56:03,200
this is about confidence levels

1548
00:56:03,200 --> 00:56:05,280
but i would say we can we have strong

1549
00:56:05,280 --> 00:56:07,200
confidence at this point

1550
00:56:07,200 --> 00:56:10,160
in uh from a cryptographic perspective

1551
00:56:10,160 --> 00:56:11,839
in the design of the protocol

1552
00:56:11,839 --> 00:56:14,559
the following properties of the protocol

1553
00:56:14,559 --> 00:56:16,559
first and foremost i'd say privacy of

1554
00:56:16,559 --> 00:56:17,680
content

1555
00:56:17,680 --> 00:56:21,280
okay so this is like the application

1556
00:56:21,280 --> 00:56:22,000
messages

1557
00:56:22,000 --> 00:56:24,079
okay those things they're private that's

1558
00:56:24,079 --> 00:56:27,119
sort of goal number one that's been

1559
00:56:27,119 --> 00:56:30,319
really analyzed here um then we have

1560
00:56:30,319 --> 00:56:33,119
authenticity of content so that means if

1561
00:56:33,119 --> 00:56:34,640
if your client says this message came

1562
00:56:34,640 --> 00:56:35,280
from bob

1563
00:56:35,280 --> 00:56:38,160
it came from bob um transcript

1564
00:56:38,160 --> 00:56:39,760
consistency is another property we've

1565
00:56:39,760 --> 00:56:40,640
been analyzing

1566
00:56:40,640 --> 00:56:42,559
in various guises that means if alice

1567
00:56:42,559 --> 00:56:44,640
and bob can talk

1568
00:56:44,640 --> 00:56:46,960
that means well if alice receives a

1569
00:56:46,960 --> 00:56:48,799
message from bob and her client shows

1570
00:56:48,799 --> 00:56:50,160
this message

1571
00:56:50,160 --> 00:56:52,640
she can she is now assured of the fact

1572
00:56:52,640 --> 00:56:54,480
that bob and alice have

1573
00:56:54,480 --> 00:56:57,839
the same view of the history of this

1574
00:56:57,839 --> 00:56:59,119
conversation since

1575
00:56:59,119 --> 00:57:00,720
their transcripts of the conversation

1576
00:57:00,720 --> 00:57:02,240
are consistent

1577
00:57:02,240 --> 00:57:05,440
um consistency of group management is

1578
00:57:05,440 --> 00:57:06,720
another one so

1579
00:57:06,720 --> 00:57:08,640
alice and bob if they're talking to each

1580
00:57:08,640 --> 00:57:09,760
other can be

1581
00:57:09,760 --> 00:57:12,319
assured that they have the same view of

1582
00:57:12,319 --> 00:57:13,680
the state of the group

1583
00:57:13,680 --> 00:57:15,359
if alice thinks charlie's in the group

1584
00:57:15,359 --> 00:57:16,880
bob thinks charlie's in the group

1585
00:57:16,880 --> 00:57:19,040
and same for if alice thinks dave is not

1586
00:57:19,040 --> 00:57:20,000
in the group then

1587
00:57:20,000 --> 00:57:22,480
bob also thinks dave is not in the group

1588
00:57:22,480 --> 00:57:23,839
um and

1589
00:57:23,839 --> 00:57:26,720
and dave can also not read messages so

1590
00:57:26,720 --> 00:57:28,400
these are kind of the four

1591
00:57:28,400 --> 00:57:31,520
intuitive properties uh that i'd say

1592
00:57:31,520 --> 00:57:33,200
we've really analyzed quite thoroughly

1593
00:57:33,200 --> 00:57:35,040
at this point

1594
00:57:35,040 --> 00:57:36,720
the the other part of that equation

1595
00:57:36,720 --> 00:57:38,000
though is it's not just what you're

1596
00:57:38,000 --> 00:57:39,359
getting it's against what kind of

1597
00:57:39,359 --> 00:57:40,000
attacker you're

1598
00:57:40,000 --> 00:57:43,040
getting in right so uh

1599
00:57:43,040 --> 00:57:45,680
sort of the type of attacker that you

1600
00:57:45,680 --> 00:57:47,040
know more or less

1601
00:57:47,040 --> 00:57:48,480
we've been looking at you can think of

1602
00:57:48,480 --> 00:57:50,480
them well they're extremely powerful on

1603
00:57:50,480 --> 00:57:52,079
the network side of things

1604
00:57:52,079 --> 00:57:53,839
okay so they're they're man in the

1605
00:57:53,839 --> 00:57:55,920
middling all traffic here they basically

1606
00:57:55,920 --> 00:57:57,599
own the delivery server there is no

1607
00:57:57,599 --> 00:57:58,880
distinction

1608
00:57:58,880 --> 00:58:00,160
between the delivery server and the

1609
00:58:00,160 --> 00:58:02,400
attacker here um they can

1610
00:58:02,400 --> 00:58:04,319
schedule packets at will they can drop

1611
00:58:04,319 --> 00:58:06,400
packets modify packets

1612
00:58:06,400 --> 00:58:10,000
right so network side super powerful

1613
00:58:10,000 --> 00:58:12,160
um in some of the most advanced security

1614
00:58:12,160 --> 00:58:13,760
models but they've been considered

1615
00:58:13,760 --> 00:58:15,599
we're also looking at insiders okay so

1616
00:58:15,599 --> 00:58:16,960
these are these are

1617
00:58:16,960 --> 00:58:19,920
participants in legitimate so legitimate

1618
00:58:19,920 --> 00:58:21,440
participants in groups

1619
00:58:21,440 --> 00:58:24,000
who are trying to use their view of this

1620
00:58:24,000 --> 00:58:25,280
group state

1621
00:58:25,280 --> 00:58:28,319
to do bad things like break privacy of

1622
00:58:28,319 --> 00:58:30,000
content in some other group or even an

1623
00:58:30,000 --> 00:58:31,839
artificial group that they created

1624
00:58:31,839 --> 00:58:34,319
and then invite people to right this is

1625
00:58:34,319 --> 00:58:36,319
the insider side of things this is why

1626
00:58:36,319 --> 00:58:38,079
mls does blanking for example it's

1627
00:58:38,079 --> 00:58:40,319
because we're worried about insiders

1628
00:58:40,319 --> 00:58:43,680
um then we uh another thing the

1629
00:58:43,680 --> 00:58:45,920
these type of attackers can do is uh we

1630
00:58:45,920 --> 00:58:48,160
give them the ability to compromise

1631
00:58:48,160 --> 00:58:51,520
group members which means specifically

1632
00:58:51,520 --> 00:58:52,880
means they can say

1633
00:58:52,880 --> 00:58:55,119
okay alice's cell phone i want to know

1634
00:58:55,119 --> 00:58:57,839
everything that's on alice's cell phone

1635
00:58:57,839 --> 00:58:59,200
and of course you know there are limits

1636
00:58:59,200 --> 00:59:01,520
then to the security we get because

1637
00:59:01,520 --> 00:59:03,040
you can't ask for privacy the moment

1638
00:59:03,040 --> 00:59:04,640
they compromise alice's cell phone

1639
00:59:04,640 --> 00:59:07,040
but we show that the pcs part of mls

1640
00:59:07,040 --> 00:59:08,000
works well

1641
00:59:08,000 --> 00:59:09,280
and then in other words even though

1642
00:59:09,280 --> 00:59:11,280
they're compromising first alice and

1643
00:59:11,280 --> 00:59:13,280
this then that then this

1644
00:59:13,280 --> 00:59:15,359
the the protocol is constantly healing

1645
00:59:15,359 --> 00:59:17,119
itself and we show that this mechanism

1646
00:59:17,119 --> 00:59:18,079
works quite well

1647
00:59:18,079 --> 00:59:22,640
it really does heal itself quite well um

1648
00:59:22,640 --> 00:59:24,319
and another thing that another

1649
00:59:24,319 --> 00:59:25,920
capability of the adversary that we've

1650
00:59:25,920 --> 00:59:26,640
been looking at

1651
00:59:26,640 --> 00:59:28,000
is what happens if the adversary can

1652
00:59:28,000 --> 00:59:29,680
start registering keys

1653
00:59:29,680 --> 00:59:32,960
in the pki right so um on the one hand

1654
00:59:32,960 --> 00:59:35,040
there's the the signing keys

1655
00:59:35,040 --> 00:59:37,119
and then there's also these key packages

1656
00:59:37,119 --> 00:59:38,319
so we've sort of been

1657
00:59:38,319 --> 00:59:40,799
looking at well let's give the ability

1658
00:59:40,799 --> 00:59:42,640
to the adversary maybe to compromise you

1659
00:59:42,640 --> 00:59:44,319
know working certificate in concert

1660
00:59:44,319 --> 00:59:47,920
with these key servers um what security

1661
00:59:47,920 --> 00:59:49,280
properties do we still get if the

1662
00:59:49,280 --> 00:59:51,520
adversary can do these things

1663
00:59:51,520 --> 00:59:53,200
and remember there's this this notion of

1664
00:59:53,200 --> 00:59:54,960
certificate right so

1665
00:59:54,960 --> 00:59:56,480
if if the adversary doesn't have the

1666
00:59:56,480 --> 00:59:58,400
ability to compromise a certificate make

1667
00:59:58,400 --> 01:00:00,079
a fake certificate for some key it

1668
01:00:00,079 --> 01:00:02,000
registered

1669
01:00:02,000 --> 01:00:03,359
doesn't necessarily matter that much

1670
01:00:03,359 --> 01:00:04,720
that the adversary can register these

1671
01:00:04,720 --> 01:00:06,160
things because all honest clients want

1672
01:00:06,160 --> 01:00:07,760
to be checking certificates

1673
01:00:07,760 --> 01:00:10,079
so that's kind of our route of trust is

1674
01:00:10,079 --> 01:00:10,960
the certificate

1675
01:00:10,960 --> 01:00:13,680
not the key server itself and that's

1676
01:00:13,680 --> 01:00:15,119
great because this is in line with this

1677
01:00:15,119 --> 01:00:16,240
end-to-end

1678
01:00:16,240 --> 01:00:19,119
mentality here and the crypto has

1679
01:00:19,119 --> 01:00:20,400
reflected this

1680
01:00:20,400 --> 01:00:21,520
and showed that as long as your

1681
01:00:21,520 --> 01:00:23,280
certificates are secure the key server

1682
01:00:23,280 --> 01:00:25,200
we're not really relying on them

1683
01:00:25,200 --> 01:00:26,480
they're just basically another

1684
01:00:26,480 --> 01:00:28,160
distribution channel it's but it's the

1685
01:00:28,160 --> 01:00:29,760
certificates that matter

1686
01:00:29,760 --> 01:00:31,200
which is good because that's kind of the

1687
01:00:31,200 --> 01:00:33,920
intuition i think i at least had

1688
01:00:33,920 --> 01:00:36,640
um and i think that's born played out in

1689
01:00:36,640 --> 01:00:38,400
the crypto analysis

1690
01:00:38,400 --> 01:00:40,400
hey joel how's the fact though yeah so

1691
01:00:40,400 --> 01:00:42,000
that's good i'm just gonna say i think

1692
01:00:42,000 --> 01:00:42,559
we're like

1693
01:00:42,559 --> 01:00:44,400
we're at the end here basically so um

1694
01:00:44,400 --> 01:00:45,839
fortunately this worked out

1695
01:00:45,839 --> 01:00:49,119
real quick so go real quick all right

1696
01:00:49,119 --> 01:00:50,000
well then

1697
01:00:50,000 --> 01:00:54,839
yeah so skip this you can skip this

1698
01:00:54,839 --> 01:00:56,240
slide

1699
01:00:56,240 --> 01:00:58,799
yeah so then uh one of the things to

1700
01:00:58,799 --> 01:00:59,920
keep an eye out for

1701
01:00:59,920 --> 01:01:02,960
is that because mls is so complicated

1702
01:01:02,960 --> 01:01:05,440
these analysis a lot oftentimes focus on

1703
01:01:05,440 --> 01:01:06,240
special on

1704
01:01:06,240 --> 01:01:09,680
subsets of this whole protocol stack um

1705
01:01:09,680 --> 01:01:10,960
so that's that's one thing that

1706
01:01:10,960 --> 01:01:12,960
differentiates some of the research

1707
01:01:12,960 --> 01:01:16,079
you can go to the next slide

1708
01:01:18,960 --> 01:01:22,079
one of the main focuses has been this

1709
01:01:22,079 --> 01:01:23,040
thing that

1710
01:01:23,040 --> 01:01:24,880
you know people are calling a continuous

1711
01:01:24,880 --> 01:01:26,160
group key agreement

1712
01:01:26,160 --> 01:01:28,799
which kind of encapsulates treechem but

1713
01:01:28,799 --> 01:01:30,720
also the stuff around treecamp that

1714
01:01:30,720 --> 01:01:32,240
makes it more authentic that

1715
01:01:32,240 --> 01:01:34,079
you know authentication mechanisms like

1716
01:01:34,079 --> 01:01:35,599
the confirmation tag

1717
01:01:35,599 --> 01:01:38,400
uh the max that kind of stuff and we

1718
01:01:38,400 --> 01:01:40,160
bundle that all up into its protocol

1719
01:01:40,160 --> 01:01:40,720
that's

1720
01:01:40,720 --> 01:01:43,280
it's inside mls it's called continuous

1721
01:01:43,280 --> 01:01:44,160
group key agreement

1722
01:01:44,160 --> 01:01:47,680
and the functionality it provides is

1723
01:01:47,680 --> 01:01:49,520
you essentially manage your group so you

1724
01:01:49,520 --> 01:01:51,760
can add people remove people update

1725
01:01:51,760 --> 01:01:53,200
but you don't you don't get all the way

1726
01:01:53,200 --> 01:01:55,200
up the application the key schedule it's

1727
01:01:55,200 --> 01:01:57,920
just every epoch you get a symmetric key

1728
01:01:57,920 --> 01:01:59,599
and this symmetric key is only known to

1729
01:01:59,599 --> 01:02:01,760
group members and you want pcfs

1730
01:02:01,760 --> 01:02:03,839
for this and so this has like been a lot

1731
01:02:03,839 --> 01:02:05,520
of the focus has been on this

1732
01:02:05,520 --> 01:02:08,240
because kind of to once you've got that

1733
01:02:08,240 --> 01:02:09,680
going all the way to secure group

1734
01:02:09,680 --> 01:02:10,799
messaging is

1735
01:02:10,799 --> 01:02:12,319
not that much more complicated you

1736
01:02:12,319 --> 01:02:14,480
basically need a smart it's not trivial

1737
01:02:14,480 --> 01:02:16,000
but you you really just need this

1738
01:02:16,000 --> 01:02:18,000
symmetric key schedule which is lots of

1739
01:02:18,000 --> 01:02:20,480
hkdf-ing and then an aead

1740
01:02:20,480 --> 01:02:22,240
so a lot of the analysis is focused just

1741
01:02:22,240 --> 01:02:23,760
on the cgka part because it kind of

1742
01:02:23,760 --> 01:02:24,400
captures

1743
01:02:24,400 --> 01:02:29,119
the core of what's hard next slide

1744
01:02:30,400 --> 01:02:32,240
some of the work though has actually

1745
01:02:32,240 --> 01:02:33,839
focused on trying to really do full

1746
01:02:33,839 --> 01:02:35,280
stack mls

1747
01:02:35,280 --> 01:02:38,319
um some that's going to come out um

1748
01:02:38,319 --> 01:02:41,680
karthik benjamin and uh i'm not sure

1749
01:02:41,680 --> 01:02:43,280
sorry meldrum i don't know his first

1750
01:02:43,280 --> 01:02:46,000
name have done

1751
01:02:46,000 --> 01:02:47,920
also really interesting they did full

1752
01:02:47,920 --> 01:02:49,520
stack for but the version

1753
01:02:49,520 --> 01:02:50,799
seven they're just in the works of

1754
01:02:50,799 --> 01:02:53,119
updating that to the current version

1755
01:02:53,119 --> 01:02:55,039
and one thing i really like about their

1756
01:02:55,039 --> 01:02:57,680
work is it uses automated proof tools

1757
01:02:57,680 --> 01:02:58,960
right so that's quite different than

1758
01:02:58,960 --> 01:03:00,160
most of the other work which has been

1759
01:03:00,160 --> 01:03:03,039
pen and paper proofs and so i really

1760
01:03:03,039 --> 01:03:04,960
like that we're doing both

1761
01:03:04,960 --> 01:03:06,559
because the automated like really gives

1762
01:03:06,559 --> 01:03:08,000
us this like high level of

1763
01:03:08,000 --> 01:03:10,319
assurance in the quality of this proof

1764
01:03:10,319 --> 01:03:12,079
and the pen and paper is really good at

1765
01:03:12,079 --> 01:03:14,480
explaining why things are secure

1766
01:03:14,480 --> 01:03:16,400
what is it about the mls protocol that

1767
01:03:16,400 --> 01:03:18,079
gives us this property or that property

1768
01:03:18,079 --> 01:03:18,799
rather than

1769
01:03:18,799 --> 01:03:20,559
just certifying that it does give the

1770
01:03:20,559 --> 01:03:22,319
property and that's good if we want to

1771
01:03:22,319 --> 01:03:23,599
start understanding how we've modified

1772
01:03:23,599 --> 01:03:24,319
so

1773
01:03:24,319 --> 01:03:27,760
they're quite complimentary um yeah

1774
01:03:27,760 --> 01:03:29,119
so that's another aspect of how the

1775
01:03:29,119 --> 01:03:32,880
research has been going next slide

1776
01:03:36,000 --> 01:03:37,359
uh yeah so these are kind of the

1777
01:03:37,359 --> 01:03:38,799
combinations i think are these two

1778
01:03:38,799 --> 01:03:39,599
papers

1779
01:03:39,599 --> 01:03:41,839
uh that sort of look at the strongest

1780
01:03:41,839 --> 01:03:42,640
models

1781
01:03:42,640 --> 01:03:44,960
uh next slide and really they're focused

1782
01:03:44,960 --> 01:03:47,359
on malicious insiders

1783
01:03:47,359 --> 01:03:51,440
and um so

1784
01:03:51,440 --> 01:03:54,160
yep so for insiders i did i did have

1785
01:03:54,160 --> 01:03:55,280
this slide here i don't know how we are

1786
01:03:55,280 --> 01:03:56,960
in time but i wanted to like

1787
01:03:56,960 --> 01:03:58,240
get a little more into what these

1788
01:03:58,240 --> 01:03:59,920
capabilities are because really that's

1789
01:03:59,920 --> 01:04:01,440
kind of the goal that the crypto has

1790
01:04:01,440 --> 01:04:02,000
been

1791
01:04:02,000 --> 01:04:04,400
mainly focused on is so we want to

1792
01:04:04,400 --> 01:04:06,400
understand what is an insider attacker

1793
01:04:06,400 --> 01:04:08,400
and i guess most of the things i've said

1794
01:04:08,400 --> 01:04:10,720
already network full control

1795
01:04:10,720 --> 01:04:13,039
insider participating in legit groups

1796
01:04:13,039 --> 01:04:13,839
pki

1797
01:04:13,839 --> 01:04:16,960
can register keys at will but

1798
01:04:16,960 --> 01:04:18,559
like so there's no assumption about

1799
01:04:18,559 --> 01:04:20,160
proof of knowing your secret key that's

1800
01:04:20,160 --> 01:04:22,319
a common thing pki sort of assumes

1801
01:04:22,319 --> 01:04:23,920
we don't need any of that he can

1802
01:04:23,920 --> 01:04:26,000
register your public key as his own if

1803
01:04:26,000 --> 01:04:27,359
he wants even if he doesn't know your

1804
01:04:27,359 --> 01:04:29,359
secret key so that's really good

1805
01:04:29,359 --> 01:04:31,440
means very weak assumptions about our

1806
01:04:31,440 --> 01:04:33,520
keys key distribution stuff

1807
01:04:33,520 --> 01:04:35,520
fully adaptive can make all his attack

1808
01:04:35,520 --> 01:04:37,039
decisions on the fly

1809
01:04:37,039 --> 01:04:38,559
that makes things very difficult often

1810
01:04:38,559 --> 01:04:40,720
to prove in crypto but that's that's how

1811
01:04:40,720 --> 01:04:42,480
things have been done drives the

1812
01:04:42,480 --> 01:04:44,480
execution so the adversary in these

1813
01:04:44,480 --> 01:04:45,760
models gets to say

1814
01:04:45,760 --> 01:04:47,440
he gets to drive says alice you need to

1815
01:04:47,440 --> 01:04:48,880
add bob to group x

1816
01:04:48,880 --> 01:04:52,960
charlie you need to remove yourself um

1817
01:04:52,960 --> 01:04:55,359
so uh that's also good because it shows

1818
01:04:55,359 --> 01:04:56,960
that even if the attacker gets to have

1819
01:04:56,960 --> 01:04:57,359
like

1820
01:04:57,359 --> 01:04:59,200
the lucky execution which basically he's

1821
01:04:59,200 --> 01:05:01,520
driving it's not going to help him here

1822
01:05:01,520 --> 01:05:04,000
uh gets to corrupt users and one other

1823
01:05:04,000 --> 01:05:05,039
thing we've looked at

1824
01:05:05,039 --> 01:05:08,079
is um rngs susceptibility of mls

1825
01:05:08,079 --> 01:05:11,359
to bad rngs leaking of random coins

1826
01:05:11,359 --> 01:05:13,039
even all going all the way to the point

1827
01:05:13,039 --> 01:05:14,799
where the adversary gets to decide okay

1828
01:05:14,799 --> 01:05:15,599
alice

1829
01:05:15,599 --> 01:05:17,359
your rng is going to output this string

1830
01:05:17,359 --> 01:05:19,760
next so we've also been looking at how

1831
01:05:19,760 --> 01:05:21,119
mls behaves against that there's

1832
01:05:21,119 --> 01:05:21,839
actually a pr

1833
01:05:21,839 --> 01:05:24,880
coming up um that might strengthen

1834
01:05:24,880 --> 01:05:26,079
things a little bit

1835
01:05:26,079 --> 01:05:28,559
um as and that's a result of this this

1836
01:05:28,559 --> 01:05:30,400
hardening against bad rngs

1837
01:05:30,400 --> 01:05:32,720
but of course there's limits and that's

1838
01:05:32,720 --> 01:05:34,240
this is where the model says well these

1839
01:05:34,240 --> 01:05:35,520
are your trust assumptions you got to

1840
01:05:35,520 --> 01:05:36,799
make sure this stuff is

1841
01:05:36,799 --> 01:05:38,960
holes the adversary cannot make fake

1842
01:05:38,960 --> 01:05:40,400
certificates

1843
01:05:40,400 --> 01:05:42,319
the crypto cipher suite you're using is

1844
01:05:42,319 --> 01:05:44,079
secure

1845
01:05:44,079 --> 01:05:47,520
and you know we do assume things like

1846
01:05:47,520 --> 01:05:49,280
this is crypto not security so we're not

1847
01:05:49,280 --> 01:05:50,799
doing things like okay the adversary

1848
01:05:50,799 --> 01:05:52,240
can't exploit vulnerable

1849
01:05:52,240 --> 01:05:53,839
like whatever a buffer overflow in your

1850
01:05:53,839 --> 01:05:55,280
stack or something like you know

1851
01:05:55,280 --> 01:05:56,799
that's not that's out of scope for the

1852
01:05:56,799 --> 01:05:59,520
crypto analysis timing attacks is also

1853
01:05:59,520 --> 01:06:01,039
something we haven't looked at yet

1854
01:06:01,039 --> 01:06:02,720
as far as i know no one's looked at so

1855
01:06:02,720 --> 01:06:04,000
those are the limits of what's been

1856
01:06:04,000 --> 01:06:05,119
looked at

1857
01:06:05,119 --> 01:06:07,680
next slide

1858
01:06:10,319 --> 01:06:12,720
so this is the last slide this is my

1859
01:06:12,720 --> 01:06:14,400
musings on

1860
01:06:14,400 --> 01:06:16,720
where to go what other like crypto

1861
01:06:16,720 --> 01:06:19,440
research we would be nice to have

1862
01:06:19,440 --> 01:06:22,799
um yeah um so

1863
01:06:22,799 --> 01:06:25,119
metadata security as far as i know no

1864
01:06:25,119 --> 01:06:26,160
one's really looked at that

1865
01:06:26,160 --> 01:06:28,640
mls clearly considers it otherwise why

1866
01:06:28,640 --> 01:06:30,559
do we have mls cypher suite why is not

1867
01:06:30,559 --> 01:06:31,359
everything being

1868
01:06:31,359 --> 01:06:32,960
you know why is our wire format not just

1869
01:06:32,960 --> 01:06:35,119
mls plain text well because

1870
01:06:35,119 --> 01:06:37,200
we might very well care about metadata

1871
01:06:37,200 --> 01:06:38,640
security encrypting headers

1872
01:06:38,640 --> 01:06:41,039
i don't know any analysis about that at

1873
01:06:41,039 --> 01:06:42,240
the crypto level

1874
01:06:42,240 --> 01:06:45,440
um the automated analysis uh from

1875
01:06:45,440 --> 01:06:46,160
benjamin

1876
01:06:46,160 --> 01:06:47,839
carthage those guys that's lagging a

1877
01:06:47,839 --> 01:06:49,599
little we you know that's going to be

1878
01:06:49,599 --> 01:06:51,440
updated to mls version 11.

1879
01:06:51,440 --> 01:06:53,039
really looking forward to that post

1880
01:06:53,039 --> 01:06:54,559
quantum analysis

1881
01:06:54,559 --> 01:06:56,240
further out on the roadmap we've said we

1882
01:06:56,240 --> 01:06:58,000
want to support post quantum

1883
01:06:58,000 --> 01:07:01,760
we have um we have a uh

1884
01:07:01,760 --> 01:07:04,319
pq cipher suite you know that option is

1885
01:07:04,319 --> 01:07:06,319
there but there's no analysis yet right

1886
01:07:06,319 --> 01:07:07,440
there's no

1887
01:07:07,440 --> 01:07:09,119
quantum random oracle security analysis

1888
01:07:09,119 --> 01:07:10,640
what if you plug in a post quantum

1889
01:07:10,640 --> 01:07:11,839
secure cipher suite

1890
01:07:11,839 --> 01:07:14,319
do you really get post quantum security

1891
01:07:14,319 --> 01:07:15,839
we don't know right

1892
01:07:15,839 --> 01:07:17,359
probably yes but we haven't done no

1893
01:07:17,359 --> 01:07:19,119
one's done the analysis

1894
01:07:19,119 --> 01:07:20,319
and of course analyzing the more

1895
01:07:20,319 --> 01:07:22,319
advanced features of mls right

1896
01:07:22,319 --> 01:07:24,640
we got these psks that we can mix in

1897
01:07:24,640 --> 01:07:26,160
external commits

1898
01:07:26,160 --> 01:07:28,400
um we want to maybe upgrade cypher suite

1899
01:07:28,400 --> 01:07:30,240
or protocol version mid session

1900
01:07:30,240 --> 01:07:32,720
these kind of things as far as i know

1901
01:07:32,720 --> 01:07:34,480
have not really been analyzed in some

1902
01:07:34,480 --> 01:07:36,480
crypto sense so

1903
01:07:36,480 --> 01:07:39,839
to do so yeah

1904
01:07:39,839 --> 01:07:42,160
that's that's all i have to say about

1905
01:07:42,160 --> 01:07:43,200
that

1906
01:07:43,200 --> 01:07:45,119
no i mean i thank thanks again for this

1907
01:07:45,119 --> 01:07:46,799
and i guess um having gone through the

1908
01:07:46,799 --> 01:07:47,520
tls

1909
01:07:47,520 --> 01:07:49,520
um reviews there's a bunch of caveats

1910
01:07:49,520 --> 01:07:50,640
that always happen

1911
01:07:50,640 --> 01:07:52,559
um and we we appreciate any work that

1912
01:07:52,559 --> 01:07:54,559
you and your compatriots uh

1913
01:07:54,559 --> 01:07:56,240
do before before the ending of the

1914
01:07:56,240 --> 01:07:57,760
protocol and again like i said i think

1915
01:07:57,760 --> 01:07:59,359
we need to make sure that we

1916
01:07:59,359 --> 01:08:01,839
um uh understand the input that's

1917
01:08:01,839 --> 01:08:02,720
provided so

1918
01:08:02,720 --> 01:08:04,400
we make any changes to try to mitigate

1919
01:08:04,400 --> 01:08:06,079
anything because otherwise there's kind

1920
01:08:06,079 --> 01:08:07,119
of no point and

1921
01:08:07,119 --> 01:08:11,839
you guys can show up early so thanks

1922
01:08:12,160 --> 01:08:14,880
and that wraps us up um like i said

1923
01:08:14,880 --> 01:08:16,640
we'll probably try to have an interim pr

1924
01:08:16,640 --> 01:08:18,719
i'm going to shoot for early april to

1925
01:08:18,719 --> 01:08:20,238
try to address i know brenda's got some

1926
01:08:20,238 --> 01:08:21,839
issues we should probably

1927
01:08:21,839 --> 01:08:24,960
go maybe more in depth on this

1928
01:08:24,960 --> 01:08:27,198
security analysis stuff and any uh any

1929
01:08:27,198 --> 01:08:28,560
additional changes on the protocol and

1930
01:08:28,560 --> 01:08:29,920
architecture draft

1931
01:08:29,920 --> 01:08:32,000
so stay tuned and let's move it to the

1932
01:08:32,000 --> 01:08:39,839
list thank you very much

1933
01:08:44,880 --> 01:08:46,960
you

