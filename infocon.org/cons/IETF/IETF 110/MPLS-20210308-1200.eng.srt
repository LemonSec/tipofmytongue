1
00:00:09,040 --> 00:00:09,679
okay

2
00:00:09,679 --> 00:00:13,040
i will go ahead and get started um

3
00:00:13,040 --> 00:00:15,599
i presume you're still hearing me yep i

4
00:00:15,599 --> 00:00:17,840
think my mic is still on

5
00:00:17,840 --> 00:00:20,480
uh thanks everyone for joining today

6
00:00:20,480 --> 00:00:21,600
this is

7
00:00:21,600 --> 00:00:25,760
mpls working group session in ietf 110

8
00:00:25,760 --> 00:00:28,960
it is a virtual online meeting we are

9
00:00:28,960 --> 00:00:30,080
meeting today

10
00:00:30,080 --> 00:00:33,920
uh for two hours um uh myself my name

11
00:00:33,920 --> 00:00:36,960
is tarek saad um

12
00:00:36,960 --> 00:00:40,239
lowa anderson and nick layman are the

13
00:00:40,239 --> 00:00:42,239
working group chairs

14
00:00:42,239 --> 00:00:44,879
for the for this working group and we

15
00:00:44,879 --> 00:00:45,600
have mac

16
00:00:45,600 --> 00:00:48,480
uh chen as our working group secretary

17
00:00:48,480 --> 00:00:49,280
um

18
00:00:49,280 --> 00:00:51,600
there is another session it's a joint

19
00:00:51,600 --> 00:00:53,760
session with pals.net spring

20
00:00:53,760 --> 00:00:57,760
working group on friday session

21
00:00:57,760 --> 00:01:01,440
and it's dedicated the discussion

22
00:01:01,440 --> 00:01:05,840
uh about certain aspects of mpls

23
00:01:05,840 --> 00:01:06,799
architecture

24
00:01:06,799 --> 00:01:11,360
as well as the related working groups

25
00:01:11,360 --> 00:01:14,000
i encourage you to attend that meeting

26
00:01:14,000 --> 00:01:16,479
as well

27
00:01:22,000 --> 00:01:25,119
this is the note well

28
00:01:25,119 --> 00:01:27,600
it it governs the contributions and

29
00:01:27,600 --> 00:01:30,079
participation in ietf for people who are

30
00:01:30,079 --> 00:01:32,560
new to idfi we encourage them to

31
00:01:32,560 --> 00:01:34,400
go through this note well and get

32
00:01:34,400 --> 00:01:41,040
acquainted with it

33
00:01:41,040 --> 00:01:44,079
some administrative pointers uh

34
00:01:44,079 --> 00:01:46,079
blue sheets you're you're not going to

35
00:01:46,079 --> 00:01:47,680
have to sign

36
00:01:47,680 --> 00:01:50,880
your name as usual um

37
00:01:50,880 --> 00:01:54,640
the rest is pointers to helpful material

38
00:01:54,640 --> 00:01:57,520
about this session

39
00:01:59,200 --> 00:02:03,280
agenda bashing we have 10 items on the

40
00:02:03,280 --> 00:02:06,079
agenda today

41
00:02:06,719 --> 00:02:09,520
some of the items that we'll pre that

42
00:02:09,520 --> 00:02:11,360
will be presented today are also

43
00:02:11,360 --> 00:02:14,080
presented on friday joint session

44
00:02:14,080 --> 00:02:16,800
uh we we're asking the chairs are asking

45
00:02:16,800 --> 00:02:18,000
the presenters

46
00:02:18,000 --> 00:02:20,400
that are presenting on friday to

47
00:02:20,400 --> 00:02:21,520
restrict today's

48
00:02:21,520 --> 00:02:24,080
the presentation and discussion to the

49
00:02:24,080 --> 00:02:25,440
solution

50
00:02:25,440 --> 00:02:28,720
and um take uh further uh

51
00:02:28,720 --> 00:02:32,400
architectural discussions or um

52
00:02:32,400 --> 00:02:34,319
relation with other proposals or

53
00:02:34,319 --> 00:02:35,599
solutions

54
00:02:35,599 --> 00:02:39,359
to the friday session

55
00:02:43,360 --> 00:02:45,760
other than that we ask the presenters to

56
00:02:45,760 --> 00:02:47,519
stick to stick to the time

57
00:02:47,519 --> 00:02:50,640
allotted to the slot and leave some

58
00:02:50,640 --> 00:02:54,000
room for the questions and answers

59
00:02:54,000 --> 00:02:58,000
anyone has any feedback on the agenda

60
00:02:58,000 --> 00:03:00,800
please speak up

61
00:03:01,440 --> 00:03:04,879
i'm going to have to count on on unik

62
00:03:04,879 --> 00:03:07,360
or loa to let me know if there's anyone

63
00:03:07,360 --> 00:03:09,280
on the mic

64
00:03:09,280 --> 00:03:12,480
otherwise i have to keep flipping to the

65
00:03:12,480 --> 00:03:15,360
to the shared window to the original

66
00:03:15,360 --> 00:03:16,840
home

67
00:03:16,840 --> 00:03:19,200
window

68
00:03:19,200 --> 00:03:23,200
so again yeah

69
00:03:23,200 --> 00:03:28,959
we have 10 items on the agenda today

70
00:03:31,599 --> 00:03:35,920
okay there's no one in the queue yes

71
00:03:35,920 --> 00:03:39,040
all right in terms of errata we have

72
00:03:39,040 --> 00:03:42,319
we have one errata that was reported

73
00:03:42,319 --> 00:03:46,159
since last itf 109.

74
00:03:46,159 --> 00:03:50,480
this is an editorial errata

75
00:03:50,480 --> 00:03:53,360
it's a pointer to a section that doesn't

76
00:03:53,360 --> 00:03:55,840
exist

77
00:03:57,920 --> 00:04:01,839
i think it will get accepted

78
00:04:04,799 --> 00:04:07,120
in terms of liaisons we didn't have

79
00:04:07,120 --> 00:04:08,720
anything since last time

80
00:04:08,720 --> 00:04:11,200
we met

81
00:04:13,840 --> 00:04:17,279
uh in terms of the document update

82
00:04:17,279 --> 00:04:20,720
since last time we have two new rfcs

83
00:04:20,720 --> 00:04:23,440
that were published

84
00:04:23,440 --> 00:04:26,560
and we have uh two two

85
00:04:26,560 --> 00:04:28,560
documents that are in the rc editor

86
00:04:28,560 --> 00:04:29,840
queue

87
00:04:29,840 --> 00:04:32,880
um and

88
00:04:32,880 --> 00:04:37,520
another two in the iesg review

89
00:04:37,759 --> 00:04:39,600
there were two new new working groups

90
00:04:39,600 --> 00:04:43,840
that were adopted since last time

91
00:04:44,560 --> 00:04:47,680
i'm going to go quicker than usual

92
00:04:47,680 --> 00:04:51,280
this time over the update to leave room

93
00:04:51,280 --> 00:04:52,080
for the

94
00:04:52,080 --> 00:04:54,720
other discussions and presentation but

95
00:04:54,720 --> 00:04:56,479
please let me know if there's anything

96
00:04:56,479 --> 00:04:56,880
we

97
00:04:56,880 --> 00:05:01,840
you know you expect we elaborate on

98
00:05:04,800 --> 00:05:07,360
uh again we're showing the documents

99
00:05:07,360 --> 00:05:09,840
that were updated

100
00:05:09,840 --> 00:05:12,320
the working group documents here some of

101
00:05:12,320 --> 00:05:14,880
the documents were expired

102
00:05:14,880 --> 00:05:17,520
we'll have to follow up if these will be

103
00:05:17,520 --> 00:05:24,479
revived again

104
00:05:24,479 --> 00:05:27,520
uh the the documents listed in blue

105
00:05:27,520 --> 00:05:28,000
color

106
00:05:28,000 --> 00:05:30,160
are on the agenda so these are

107
00:05:30,160 --> 00:05:31,120
individual

108
00:05:31,120 --> 00:05:33,680
drafts

109
00:05:37,759 --> 00:05:41,680
and with this uh i'm gonna

110
00:05:41,680 --> 00:05:44,880
stop and ask if there's any

111
00:05:44,880 --> 00:05:48,160
um comments or feedback um any

112
00:05:48,160 --> 00:05:51,600
individual wants to comment before we

113
00:05:51,600 --> 00:05:53,120
start

114
00:05:53,120 --> 00:05:56,000
with the presenters

115
00:06:04,840 --> 00:06:07,840
okay

116
00:06:08,160 --> 00:06:11,919
all right uh we're going to

117
00:06:11,919 --> 00:06:17,120
start next up is the mpls

118
00:06:17,199 --> 00:06:21,840
msd yang model with yinchen

119
00:06:25,120 --> 00:06:28,560
yingshan can you hear me yes

120
00:06:28,560 --> 00:06:31,919
hi hi um

121
00:06:31,919 --> 00:06:34,639
hello everyone this is yunjin from

122
00:06:34,639 --> 00:06:35,840
futuray

123
00:06:35,840 --> 00:06:38,000
i'm going to present a young data model

124
00:06:38,000 --> 00:06:39,520
for mprs

125
00:06:39,520 --> 00:06:48,160
msd next slide please

126
00:06:48,160 --> 00:06:52,479
uh let's start from what is msd and

127
00:06:52,479 --> 00:06:56,000
why did we write this module

128
00:06:56,000 --> 00:06:59,039
so msd stands for maximum c

129
00:06:59,039 --> 00:07:02,560
depth it is the number of seeds

130
00:07:02,560 --> 00:07:06,639
that a node or a link can

131
00:07:06,639 --> 00:07:11,400
support it's defined in rfc

132
00:07:11,400 --> 00:07:14,840
8476 and rfc

133
00:07:14,840 --> 00:07:18,240
8491 so you may have noticed

134
00:07:18,240 --> 00:07:20,639
that the authors of this draft are the

135
00:07:20,639 --> 00:07:22,560
authors from

136
00:07:22,560 --> 00:07:26,400
segmented routing young model

137
00:07:26,880 --> 00:07:30,160
we originally had part of the msd young

138
00:07:30,160 --> 00:07:30,960
defined

139
00:07:30,960 --> 00:07:36,000
in the segment gelatin mprs young module

140
00:07:36,000 --> 00:07:39,120
and it was decided during iesc

141
00:07:39,120 --> 00:07:42,240
last call that msd

142
00:07:42,240 --> 00:07:46,000
is small a characteristic of mprs

143
00:07:46,000 --> 00:07:49,120
rather than sr specific

144
00:07:49,120 --> 00:07:52,000
so we decided to put this into a

145
00:07:52,000 --> 00:07:54,080
separate module

146
00:07:54,080 --> 00:07:57,360
which augments the mprs

147
00:07:57,360 --> 00:08:00,680
base year module defined in rfc

148
00:08:00,680 --> 00:08:06,080
8960 next slide please

149
00:08:09,280 --> 00:08:13,280
so this slide shows the tree diagram of

150
00:08:13,280 --> 00:08:15,199
this module

151
00:08:15,199 --> 00:08:18,240
basically it has the

152
00:08:18,240 --> 00:08:22,639
at node level it has a list of msds

153
00:08:22,639 --> 00:08:25,199
with different types and at the

154
00:08:25,199 --> 00:08:26,639
interface level

155
00:08:26,639 --> 00:08:29,840
each interface has a list of msds with

156
00:08:29,840 --> 00:08:32,720
different types

157
00:08:33,200 --> 00:08:36,880
it's a very simple small straightforward

158
00:08:36,880 --> 00:08:37,599
module

159
00:08:37,599 --> 00:08:40,640
so at this moment we have everything as

160
00:08:40,640 --> 00:08:43,200
read only because we consider ms

161
00:08:43,200 --> 00:08:47,040
msd is a from the hardware

162
00:08:47,040 --> 00:08:49,920
it's a character from hardware it's not

163
00:08:49,920 --> 00:08:51,680
configurable

164
00:08:51,680 --> 00:08:55,760
if any implementation that supports

165
00:08:55,760 --> 00:08:59,279
configurable msd please let the authors

166
00:08:59,279 --> 00:09:00,320
know and

167
00:09:00,320 --> 00:09:03,600
we may make it configurable

168
00:09:03,600 --> 00:09:08,880
next slide please

169
00:09:08,880 --> 00:09:12,000
in the module we also defined a grouping

170
00:09:12,000 --> 00:09:12,880
that can be

171
00:09:12,880 --> 00:09:15,920
used by other modules

172
00:09:15,920 --> 00:09:20,000
if they want to support msd

173
00:09:21,680 --> 00:09:24,719
next slide please

174
00:09:26,320 --> 00:09:29,839
so next steps

175
00:09:29,839 --> 00:09:33,920
um we'd like to click and address commas

176
00:09:33,920 --> 00:09:37,120
and since it's a very small

177
00:09:37,120 --> 00:09:39,040
straightforward

178
00:09:39,040 --> 00:09:42,320
module we like to request working group

179
00:09:42,320 --> 00:09:44,880
adoption

180
00:09:46,240 --> 00:09:50,160
and that's all

181
00:09:50,160 --> 00:09:53,279
thank you any questions i i i think i

182
00:09:53,279 --> 00:09:54,480
have a question i'll

183
00:09:54,480 --> 00:09:56,560
get into the queue if there's no one

184
00:09:56,560 --> 00:09:58,719
else

185
00:09:58,880 --> 00:10:01,760
okay i think uh there is no one but me

186
00:10:01,760 --> 00:10:03,200
um

187
00:10:03,200 --> 00:10:06,320
um my question is um

188
00:10:06,320 --> 00:10:10,160
i saw there was msd type i'm not clear

189
00:10:10,160 --> 00:10:13,760
is it the type uh data plane type or

190
00:10:13,760 --> 00:10:17,760
um what is it

191
00:10:17,760 --> 00:10:20,959
really msd type so right now there are

192
00:10:20,959 --> 00:10:21,760
two types

193
00:10:21,760 --> 00:10:26,079
defined um if you

194
00:10:26,079 --> 00:10:29,120
there is actually an icp registry for

195
00:10:29,120 --> 00:10:29,440
the

196
00:10:29,440 --> 00:10:33,200
type uh the current two type defined as

197
00:10:33,200 --> 00:10:36,480
identity in the model one is the i think

198
00:10:36,480 --> 00:10:36,800
it's

199
00:10:36,800 --> 00:10:40,079
just the basic msd type

200
00:10:40,079 --> 00:10:43,680
it is the number of uh labels

201
00:10:43,680 --> 00:10:46,320
a node or link can read and the second

202
00:10:46,320 --> 00:10:47,519
one is

203
00:10:47,519 --> 00:10:51,120
entropy erld entropy readable label

204
00:10:51,120 --> 00:10:53,040
depth

205
00:10:53,040 --> 00:10:56,000
as defined in a different draft we have

206
00:10:56,000 --> 00:10:58,000
reference pointers in the draft

207
00:10:58,000 --> 00:11:01,440
if you want to

208
00:11:01,440 --> 00:11:04,480
i see the details yeah okay okay thank

209
00:11:04,480 --> 00:11:06,640
you

210
00:11:07,440 --> 00:11:11,120
any other questions

211
00:11:11,680 --> 00:11:14,560
but we will transition to the next

212
00:11:14,560 --> 00:11:16,399
presenter

213
00:11:16,399 --> 00:11:20,560
okay thank you thank you thank you

214
00:11:21,040 --> 00:11:24,320
next up we have deepti uh on the egress

215
00:11:24,320 --> 00:11:25,360
tlv

216
00:11:25,360 --> 00:11:29,839
tlv for nilfek

217
00:11:36,079 --> 00:11:39,839
okay are you able to hear me

218
00:11:39,839 --> 00:11:43,200
yes okay hi everyone

219
00:11:43,200 --> 00:11:46,079
i'll be presenting egress tlv for nail

220
00:11:46,079 --> 00:11:46,800
fit

221
00:11:46,800 --> 00:11:49,680
uh the uh the first document uh draft we

222
00:11:49,680 --> 00:11:52,240
have presented in ietf

223
00:11:52,240 --> 00:11:56,000
1 109 and this is a follow-up draft

224
00:11:56,000 --> 00:11:59,680
with uh co-authors uh from cisco

225
00:11:59,680 --> 00:12:03,200
uh zafar ali and nagin

226
00:12:03,200 --> 00:12:06,079
next slide please

227
00:12:07,680 --> 00:12:11,279
so uh in this so as a

228
00:12:11,279 --> 00:12:12,880
presentation i will be discussing the

229
00:12:12,880 --> 00:12:15,040
update updates on

230
00:12:15,040 --> 00:12:17,200
the draft the review comments which were

231
00:12:17,200 --> 00:12:18,320
given uh

232
00:12:18,320 --> 00:12:21,440
from the last ietf and the next steps

233
00:12:21,440 --> 00:12:24,580
next slide please

234
00:12:24,580 --> 00:12:25,839
[Music]

235
00:12:25,839 --> 00:12:28,079
so there was a confusion in the

236
00:12:28,079 --> 00:12:29,760
introduction and abstraction

237
00:12:29,760 --> 00:12:32,240
key it was taken as a only spring tea

238
00:12:32,240 --> 00:12:33,760
extension but

239
00:12:33,760 --> 00:12:35,760
the draft is an extension to the nail

240
00:12:35,760 --> 00:12:37,360
file so

241
00:12:37,360 --> 00:12:39,200
many times it is not possible to have

242
00:12:39,200 --> 00:12:40,800
the effect validation

243
00:12:40,800 --> 00:12:44,079
uh due to some of the effect not

244
00:12:44,079 --> 00:12:45,839
supported on some of the routers like

245
00:12:45,839 --> 00:12:47,360
routers are not upgraded

246
00:12:47,360 --> 00:12:49,440
or the fact is not present like for

247
00:12:49,440 --> 00:12:51,440
binding said or the static label

248
00:12:51,440 --> 00:12:53,279
so in that case we cannot go for the

249
00:12:53,279 --> 00:12:55,600
fake validation to overcome these things

250
00:12:55,600 --> 00:12:57,120
we went for the neil feck

251
00:12:57,120 --> 00:13:00,240
now neil fake has different problem so

252
00:13:00,240 --> 00:13:03,519
which is like a misforwarding can occur

253
00:13:03,519 --> 00:13:05,680
and

254
00:13:05,680 --> 00:13:08,639
oh and there is no egress validation

255
00:13:08,639 --> 00:13:09,680
even if the

256
00:13:09,680 --> 00:13:13,200
uh trace route and the ping is

257
00:13:13,200 --> 00:13:14,160
successful

258
00:13:14,160 --> 00:13:17,519
so to overcome nilfek standard

259
00:13:17,519 --> 00:13:20,639
and make it possible to

260
00:13:20,639 --> 00:13:23,360
trace any path irrespective of which

261
00:13:23,360 --> 00:13:24,880
protocol it used

262
00:13:24,880 --> 00:13:28,639
uh we came up with the egress tlv

263
00:13:28,639 --> 00:13:30,959
so egress tlv is the extension to neil

264
00:13:30,959 --> 00:13:32,959
feck the kneel fact processing there is

265
00:13:32,959 --> 00:13:34,000
no change

266
00:13:34,000 --> 00:13:37,760
it is just added as uh this dlv is added

267
00:13:37,760 --> 00:13:39,279
as a

268
00:13:39,279 --> 00:13:41,920
to validate the egress of the complete

269
00:13:41,920 --> 00:13:43,120
path

270
00:13:43,120 --> 00:13:48,720
next slide please

271
00:13:48,720 --> 00:13:51,040
ah in process procedure depending on the

272
00:13:51,040 --> 00:13:52,639
inputs from

273
00:13:52,639 --> 00:13:55,920
other vendors and

274
00:13:56,959 --> 00:14:00,720
the explanation is updated using the

275
00:14:00,720 --> 00:14:01,600
diagram

276
00:14:01,600 --> 00:14:04,240
and the procedure is made more

277
00:14:04,240 --> 00:14:05,920
explanatory

278
00:14:05,920 --> 00:14:09,519
next play next site please

279
00:14:10,880 --> 00:14:12,720
ah these were the review comments so the

280
00:14:12,720 --> 00:14:14,079
first review comment was

281
00:14:14,079 --> 00:14:17,279
why the draft generic said draft and

282
00:14:17,279 --> 00:14:19,519
this graph cannot be merged so after

283
00:14:19,519 --> 00:14:21,360
speaking with the author of the generic

284
00:14:21,360 --> 00:14:22,320
set draft

285
00:14:22,320 --> 00:14:24,639
we came into the conclusion that both

286
00:14:24,639 --> 00:14:25,839
drafts are for

287
00:14:25,839 --> 00:14:28,399
different purpose so the validation

288
00:14:28,399 --> 00:14:30,480
level for both drafts are different

289
00:14:30,480 --> 00:14:33,120
on eagles really the validation happen

290
00:14:33,120 --> 00:14:35,120
minimum validation happen

291
00:14:35,120 --> 00:14:38,560
on the data plane with only egress

292
00:14:38,560 --> 00:14:41,120
ip is validated whereas the set level

293
00:14:41,120 --> 00:14:43,040
you are actually evaluating the

294
00:14:43,040 --> 00:14:46,160
associated sid on every path the second

295
00:14:46,160 --> 00:14:49,760
is uh for egress tlv your transit router

296
00:14:49,760 --> 00:14:51,519
if supporting the nilfek you don't need

297
00:14:51,519 --> 00:14:53,120
to upgrade the transit router

298
00:14:53,120 --> 00:14:55,120
only ingress and egress need to be

299
00:14:55,120 --> 00:14:57,440
updated that is not the case with the

300
00:14:57,440 --> 00:14:59,920
ah generic set for general said we need

301
00:14:59,920 --> 00:15:01,600
to upgrade all the routers

302
00:15:01,600 --> 00:15:06,399
so after discussion with the authors

303
00:15:06,399 --> 00:15:09,519
we decided to have both those drafts

304
00:15:09,519 --> 00:15:10,320
separately

305
00:15:10,320 --> 00:15:13,760
as two different standard since they are

306
00:15:13,760 --> 00:15:18,639
on different level next slide please

307
00:15:19,030 --> 00:15:21,519
[Music]

308
00:15:21,519 --> 00:15:24,720
one of the review comment was key

309
00:15:24,720 --> 00:15:28,240
the number of labels and effect and fake

310
00:15:28,240 --> 00:15:30,720
in the respective stack should be same

311
00:15:30,720 --> 00:15:35,279
so yeah rfc80029 doesn't say it should

312
00:15:35,279 --> 00:15:36,000
be always

313
00:15:36,000 --> 00:15:39,199
same uh the section uh given here

314
00:15:39,199 --> 00:15:41,680
are the one which actually tells how the

315
00:15:41,680 --> 00:15:43,759
meal effect is processing

316
00:15:43,759 --> 00:15:46,959
so since we are not changing any uh

317
00:15:46,959 --> 00:15:49,360
any meal effect processing in this draft

318
00:15:49,360 --> 00:15:51,839
it is just uh egress tlv is added

319
00:15:51,839 --> 00:15:55,279
to validate the egress of the path

320
00:15:55,279 --> 00:15:57,600
i think we should be okay with this

321
00:15:57,600 --> 00:15:59,920
coming

322
00:16:01,600 --> 00:16:08,079
so next slide please

323
00:16:08,079 --> 00:16:10,480
uh one of the question was key how the

324
00:16:10,480 --> 00:16:12,160
eagles tlv prefix is

325
00:16:12,160 --> 00:16:15,360
derived so uh if it is the agency said

326
00:16:15,360 --> 00:16:17,600
label set or any kind of cell

327
00:16:17,600 --> 00:16:20,880
the egress tlv prefix is not decided on

328
00:16:20,880 --> 00:16:23,120
the based of the label used in the path

329
00:16:23,120 --> 00:16:25,440
or the lsp used in the path it is the

330
00:16:25,440 --> 00:16:27,279
egress of the complete path

331
00:16:27,279 --> 00:16:29,519
so where the path ends that will be the

332
00:16:29,519 --> 00:16:31,920
prefix for the egress tlv

333
00:16:31,920 --> 00:16:35,040
so irrespective of any set you used

334
00:16:35,040 --> 00:16:38,079
in the label stack or label will the

335
00:16:38,079 --> 00:16:38,720
egress

336
00:16:38,720 --> 00:16:41,440
tlv prefix will be the end of the path

337
00:16:41,440 --> 00:16:50,160
next slide please

338
00:16:50,160 --> 00:16:53,839
uh your comments

339
00:16:53,839 --> 00:16:56,160
suggestions are all welcome and greatly

340
00:16:56,160 --> 00:16:57,440
appreciated

341
00:16:57,440 --> 00:17:00,959
so uh it is

342
00:17:00,959 --> 00:17:03,040
since it is a very simple extension to

343
00:17:03,040 --> 00:17:04,160
nilfig

344
00:17:04,160 --> 00:17:06,559
and we got a request from the operators

345
00:17:06,559 --> 00:17:09,280
to take it as a standard as

346
00:17:09,280 --> 00:17:12,160
as early as possible we request for

347
00:17:12,160 --> 00:17:14,400
early code points and request adoption

348
00:17:14,400 --> 00:17:19,839
as early as possible

349
00:17:22,640 --> 00:17:27,039
thank you any comments

350
00:17:27,199 --> 00:17:33,840
let me see if that's

351
00:17:42,960 --> 00:17:45,360
so thank you your request for adoption

352
00:17:45,360 --> 00:17:46,720
will be recorded

353
00:17:46,720 --> 00:17:49,760
and the chairs will discuss it and take

354
00:17:49,760 --> 00:17:51,039
it forward

355
00:17:51,039 --> 00:17:55,360
thanks deepti thank you

356
00:17:56,640 --> 00:18:00,880
okay next up we have shraddha and

357
00:18:00,880 --> 00:18:03,600
team on the inter domain oem for sr

358
00:18:03,600 --> 00:18:06,080
networks

359
00:18:07,070 --> 00:18:10,080
[Music]

360
00:18:10,080 --> 00:18:12,840
hi hi tariq are you able to hear me is

361
00:18:12,840 --> 00:18:14,080
couple

362
00:18:14,080 --> 00:18:17,600
hi kapil yes i can hear it hi everyone

363
00:18:17,600 --> 00:18:20,160
i'm kapil from juniper networks

364
00:18:20,160 --> 00:18:23,120
um so i'll give an update of this draft

365
00:18:23,120 --> 00:18:24,480
from the

366
00:18:24,480 --> 00:18:28,080
previous itf drafts psitf draft

367
00:18:28,080 --> 00:18:30,879
next site please

368
00:18:34,400 --> 00:18:36,799
yeah so agenda is update from the last

369
00:18:36,799 --> 00:18:37,679
version

370
00:18:37,679 --> 00:18:39,679
we have got few comments about uh

371
00:18:39,679 --> 00:18:41,360
segments of tlv and

372
00:18:41,360 --> 00:18:44,960
sit type structures and asking for

373
00:18:44,960 --> 00:18:49,120
an update i know allocations

374
00:18:49,200 --> 00:18:52,080
next slide please

375
00:18:55,679 --> 00:18:59,120
just to set the context for everyone so

376
00:18:59,120 --> 00:18:59,520
this

377
00:18:59,520 --> 00:19:02,240
this graph was added for to support

378
00:19:02,240 --> 00:19:04,080
inter domain ping and traced out

379
00:19:04,080 --> 00:19:05,760
the response response for ping and

380
00:19:05,760 --> 00:19:07,600
traced out comes via ip

381
00:19:07,600 --> 00:19:09,600
in the inter domain case egress will not

382
00:19:09,600 --> 00:19:11,840
have ip connectivity to ingress

383
00:19:11,840 --> 00:19:15,520
so so so ingress can add a reverse path

384
00:19:15,520 --> 00:19:16,480
segment

385
00:19:16,480 --> 00:19:19,520
tlb which which will

386
00:19:19,520 --> 00:19:23,039
give us the mpls header for the

387
00:19:23,039 --> 00:19:25,600
reply to come back from egress to

388
00:19:25,600 --> 00:19:27,919
english so few points uh

389
00:19:27,919 --> 00:19:30,000
this is optional tlb comes an echo

390
00:19:30,000 --> 00:19:31,840
request

391
00:19:31,840 --> 00:19:33,600
it can appear in any order before or

392
00:19:33,600 --> 00:19:34,880
after target facts still

393
00:19:34,880 --> 00:19:36,240
fix tag tailw there should be no

394
00:19:36,240 --> 00:19:38,000
assumption that will be

395
00:19:38,000 --> 00:19:41,600
it will follow any tlv it may appear in

396
00:19:41,600 --> 00:19:42,880
echo reply message

397
00:19:42,880 --> 00:19:45,760
in the case we are doing trace route and

398
00:19:45,760 --> 00:19:47,200
building tlv

399
00:19:47,200 --> 00:19:51,120
building it as we go and as we go as we

400
00:19:51,120 --> 00:19:53,360
go and trace the network it can be built

401
00:19:53,360 --> 00:19:55,120
dynamically also

402
00:19:55,120 --> 00:19:57,360
so yeah this was just to set the context

403
00:19:57,360 --> 00:19:58,720
we'll come to the changes

404
00:19:58,720 --> 00:20:06,720
uh in the next slide next slide please

405
00:20:06,720 --> 00:20:09,360
yeah so so initial subtle there is no

406
00:20:09,360 --> 00:20:11,280
change in the subtle v's logic but the

407
00:20:11,280 --> 00:20:13,600
initial sub tlps was referring to

408
00:20:13,600 --> 00:20:16,320
idr segment routing policy draft we got

409
00:20:16,320 --> 00:20:18,799
a comment that

410
00:20:18,799 --> 00:20:20,799
we should define specifically in the in

411
00:20:20,799 --> 00:20:22,400
this draft and it should be in the

412
00:20:22,400 --> 00:20:23,200
format of

413
00:20:23,200 --> 00:20:27,120
uh uh that the tlv is using the mpls om

414
00:20:27,120 --> 00:20:27,840
i think the

415
00:20:27,840 --> 00:20:31,760
type and length had a different uh

416
00:20:31,760 --> 00:20:34,000
diff i mean different size in the

417
00:20:34,000 --> 00:20:35,600
segment routing policy graph we have

418
00:20:35,600 --> 00:20:37,360
specifically defined

419
00:20:37,360 --> 00:20:40,640
the subtleties in this draft but it is

420
00:20:40,640 --> 00:20:42,240
still mapped to the same

421
00:20:42,240 --> 00:20:45,520
tlb types same types in idr segment

422
00:20:45,520 --> 00:20:48,080
as as idea segment routing policy draft

423
00:20:48,080 --> 00:20:49,200
this type 1

424
00:20:49,200 --> 00:20:52,960
sub tlv where you can specify the label

425
00:20:52,960 --> 00:20:56,159
which label to use to come back

426
00:20:56,159 --> 00:21:03,520
from egress to ingress next slide please

427
00:21:03,520 --> 00:21:05,520
so after type one if you notice is type

428
00:21:05,520 --> 00:21:07,360
three type two is

429
00:21:07,360 --> 00:21:10,799
srv6 uh sub tlv and this draft and a

430
00:21:10,799 --> 00:21:13,200
service is out of scope for this draft

431
00:21:13,200 --> 00:21:16,240
so this is that's in separate effort and

432
00:21:16,240 --> 00:21:18,799
it will be taken up separately so again

433
00:21:18,799 --> 00:21:19,840
this sub tlv

434
00:21:19,840 --> 00:21:22,640
gives a node address and a state

435
00:21:22,640 --> 00:21:23,760
optional

436
00:21:23,760 --> 00:21:27,280
so the so the egress can use

437
00:21:27,280 --> 00:21:29,760
this to calculate the path come back i

438
00:21:29,760 --> 00:21:30,640
mean to come back

439
00:21:30,640 --> 00:21:33,520
to ingress this is for ipv4 in next

440
00:21:33,520 --> 00:21:36,080
slide please

441
00:21:38,400 --> 00:21:42,000
type 4 is for ipv6 the same tlb

442
00:21:42,000 --> 00:21:47,760
for ipv6 next slide please

443
00:21:48,880 --> 00:21:51,360
yeah and this is a request for ini

444
00:21:51,360 --> 00:21:52,400
location

445
00:21:52,400 --> 00:21:55,840
for the same for

446
00:21:55,840 --> 00:21:59,200
all these subtleties for mpls label ipv4

447
00:21:59,200 --> 00:22:00,960
node address and ipv6 node address

448
00:22:00,960 --> 00:22:03,440
subtle

449
00:22:03,440 --> 00:22:06,159
next state please

450
00:22:08,559 --> 00:22:10,480
so this is pretty simple and stable

451
00:22:10,480 --> 00:22:11,760
draft we haven't done

452
00:22:11,760 --> 00:22:14,159
much changes other than specifically

453
00:22:14,159 --> 00:22:16,000
moving the tlvs from

454
00:22:16,000 --> 00:22:18,960
uh idea to and reference from of the tlb

455
00:22:18,960 --> 00:22:19,760
from idea

456
00:22:19,760 --> 00:22:22,320
and specifically defining here a request

457
00:22:22,320 --> 00:22:24,799
and adoption

458
00:22:24,799 --> 00:22:28,880
for this draft and that's all

459
00:22:28,880 --> 00:22:30,960
i think if there are any comments or

460
00:22:30,960 --> 00:22:41,360
questions i can take it up

461
00:22:41,360 --> 00:22:44,720
uh i see there are yeah two people in

462
00:22:44,720 --> 00:22:46,000
the queue and one remark

463
00:22:46,000 --> 00:22:48,480
uh laura has problems with audio so i am

464
00:22:48,480 --> 00:22:49,120
currently

465
00:22:49,120 --> 00:22:51,440
debugging his audio settings just let

466
00:22:51,440 --> 00:22:53,360
you know

467
00:22:53,360 --> 00:22:56,799
okay so so this is my i

468
00:22:56,799 --> 00:23:00,640
have another question okay

469
00:23:00,640 --> 00:23:03,919
so i think there's a rfc called um

470
00:23:03,919 --> 00:23:07,679
rfc 70 uh 7110

471
00:23:07,679 --> 00:23:10,000
uh reply parts here that is used to

472
00:23:10,000 --> 00:23:12,159
specify the written parts of

473
00:23:12,159 --> 00:23:15,200
lsb pin i think uh

474
00:23:15,200 --> 00:23:17,039
i think the use case for this drop is is

475
00:23:17,039 --> 00:23:18,559
valid but i think

476
00:23:18,559 --> 00:23:20,840
maybe it's better to use that clearly to

477
00:23:20,840 --> 00:23:22,159
defend

478
00:23:22,159 --> 00:23:23,919
extensions based on that tier v

479
00:23:23,919 --> 00:23:26,400
different relevant extensions

480
00:23:26,400 --> 00:23:29,520
so is this the same tlb i mean

481
00:23:29,520 --> 00:23:31,440
this is this i'm not check the rfc

482
00:23:31,440 --> 00:23:33,120
probably i can check it and

483
00:23:33,120 --> 00:23:36,320
we can discuss on the email chain

484
00:23:36,320 --> 00:23:38,000
okay so you are saying about some

485
00:23:38,000 --> 00:23:39,919
specifically i mean i i have not seen

486
00:23:39,919 --> 00:23:40,880
the rfc

487
00:23:40,880 --> 00:23:44,720
which arabs it's a general theory that

488
00:23:44,720 --> 00:23:46,400
is used to carry the

489
00:23:46,400 --> 00:23:48,880
written path information how to specify

490
00:23:48,880 --> 00:23:50,720
the written parts it can be

491
00:23:50,720 --> 00:23:53,200
there it's these are already different

492
00:23:53,200 --> 00:23:53,760
several

493
00:23:53,760 --> 00:23:57,120
written parts several okay so basically

494
00:23:57,120 --> 00:23:59,120
this is specific to nsi

495
00:23:59,120 --> 00:24:00,960
this is basically specific to sr

496
00:24:00,960 --> 00:24:02,799
networks because

497
00:24:02,799 --> 00:24:05,279
we have different srgb and things like

498
00:24:05,279 --> 00:24:06,880
that

499
00:24:06,880 --> 00:24:10,400
that's why we have given a choice to the

500
00:24:10,400 --> 00:24:14,000
responder to responder to

501
00:24:14,000 --> 00:24:16,000
to select them and to come up with a

502
00:24:16,000 --> 00:24:18,559
label in in one of the shaped subtle

503
00:24:18,559 --> 00:24:20,400
if the same srgb is the choice for the

504
00:24:20,400 --> 00:24:22,400
label other than that

505
00:24:22,400 --> 00:24:25,039
there are cases where if there are two

506
00:24:25,039 --> 00:24:26,960
interac networks connected by

507
00:24:26,960 --> 00:24:30,480
epe so if you go with the

508
00:24:30,480 --> 00:24:34,480
go over the draft it it explains how to

509
00:24:34,480 --> 00:24:37,440
how to learn it i mean how to uh build

510
00:24:37,440 --> 00:24:38,480
it dynamically

511
00:24:38,480 --> 00:24:42,720
when as soon as as traceroute goes on

512
00:24:43,840 --> 00:24:46,240
okay i think we can discuss offline yeah

513
00:24:46,240 --> 00:24:47,840
sure sure

514
00:24:47,840 --> 00:24:50,080
okay

515
00:24:51,039 --> 00:24:55,440
okay regret is next

516
00:24:55,440 --> 00:24:59,360
greg um

517
00:24:59,360 --> 00:25:02,480
i have a question about uh your type one

518
00:25:02,480 --> 00:25:05,919
uh tlv uh have you looked at

519
00:25:05,919 --> 00:25:10,880
a spring um bfd document

520
00:25:10,880 --> 00:25:15,039
uh spring bfd document introduces

521
00:25:15,039 --> 00:25:20,480
uh nonfact tlv to define the return path

522
00:25:20,480 --> 00:25:24,480
for the reverse path for the bfd session

523
00:25:24,480 --> 00:25:27,600
and uh non-fact tlv it does include the

524
00:25:27,600 --> 00:25:28,159
stack

525
00:25:28,159 --> 00:25:31,200
of um labels

526
00:25:31,200 --> 00:25:34,400
and it's specifically for uh

527
00:25:34,400 --> 00:25:38,559
sr mpls use case

528
00:25:38,640 --> 00:25:41,679
okay so i think greg i think you bought

529
00:25:41,679 --> 00:25:44,720
it up earlier in i think an earlier

530
00:25:44,720 --> 00:25:48,159
earlier itf also and i remember we spoke

531
00:25:48,159 --> 00:25:48,720
about

532
00:25:48,720 --> 00:25:51,919
i think your the defined

533
00:25:51,919 --> 00:25:56,320
tlv in bfd was specific only only had

534
00:25:56,320 --> 00:25:58,159
only had equivalent to equivalent to

535
00:25:58,159 --> 00:26:00,480
type one right

536
00:26:00,480 --> 00:26:02,799
yes well because everything else is

537
00:26:02,799 --> 00:26:04,480
already as mac pointed out

538
00:26:04,480 --> 00:26:07,760
covered by uh rfc 71

539
00:26:07,760 --> 00:26:11,360
um 10.

540
00:26:11,360 --> 00:26:14,559
so the propos the combination

541
00:26:14,559 --> 00:26:17,919
of uh rfc 7110 and

542
00:26:17,919 --> 00:26:21,360
uh spring bfd draft working group draft

543
00:26:21,360 --> 00:26:23,600
uh covers all the cases that you present

544
00:26:23,600 --> 00:26:25,440
here in my opinion

545
00:26:25,440 --> 00:26:28,559
i think it it also it also covers how to

546
00:26:28,559 --> 00:26:30,159
dynamically build the

547
00:26:30,159 --> 00:26:34,159
stack when it is on

548
00:26:34,159 --> 00:26:35,840
yes but that's probably would be

549
00:26:35,840 --> 00:26:37,840
informational not

550
00:26:37,840 --> 00:26:40,240
really standard thread but that's my

551
00:26:40,240 --> 00:26:40,880
opinion

552
00:26:40,880 --> 00:26:44,320
uh let's take it to the list

553
00:26:45,520 --> 00:26:47,919
okay i mean yeah we can uh discuss in

554
00:26:47,919 --> 00:26:49,520
the email chain

555
00:26:49,520 --> 00:26:53,039
okay thank you

556
00:26:53,039 --> 00:26:56,320
all right thank you greg anyone else in

557
00:26:56,320 --> 00:26:58,320
the queue

558
00:26:58,320 --> 00:27:01,600
no it's empty no okay all right thank

559
00:27:01,600 --> 00:27:02,400
you kapil

560
00:27:02,400 --> 00:27:05,520
um we will take it to the list like uh

561
00:27:05,520 --> 00:27:07,679
was suggested and

562
00:27:07,679 --> 00:27:11,120
i guess you're asking uh

563
00:27:11,120 --> 00:27:14,159
for adoption of this document uh

564
00:27:14,159 --> 00:27:17,840
yes so we will uh we will monitor the

565
00:27:17,840 --> 00:27:18,720
discussion and

566
00:27:18,720 --> 00:27:21,600
the chairs will we will record your

567
00:27:21,600 --> 00:27:23,279
request and discuss it

568
00:27:23,279 --> 00:27:26,240
among the chair chairs thank you derek

569
00:27:26,240 --> 00:27:28,559
thank you

570
00:27:29,039 --> 00:27:32,840
okay next up we have

571
00:27:32,840 --> 00:27:35,679
nagendra on supporting flexible

572
00:27:35,679 --> 00:27:37,120
algorithms

573
00:27:37,120 --> 00:27:48,559
prefix sets in lsb ping trace route

574
00:27:48,559 --> 00:27:51,600
is it nagendra that's presenting or i

575
00:27:51,600 --> 00:28:02,320
can double check

576
00:28:02,320 --> 00:28:05,440
yes is nagendra

577
00:28:05,440 --> 00:28:08,080
on the call

578
00:28:10,720 --> 00:28:14,559
yeah okay all right i can see you and i

579
00:28:14,559 --> 00:28:17,600
can hear you

580
00:28:17,600 --> 00:28:20,320
take it away

581
00:28:29,440 --> 00:28:32,640
hi nagendra can you

582
00:28:32,640 --> 00:28:35,679
can you still uh are you still in the

583
00:28:35,679 --> 00:28:36,720
meeting

584
00:28:36,720 --> 00:28:44,320
i guess

585
00:28:44,320 --> 00:28:47,678
i can no longer hear you

586
00:28:48,880 --> 00:28:52,880
okay now how about now yes yes

587
00:28:52,880 --> 00:28:56,159
finally thank you uh hello everyone i'm

588
00:28:56,159 --> 00:28:57,120
nagindra from

589
00:28:57,120 --> 00:28:59,520
cisco i'll be presenting this draft on

590
00:28:59,520 --> 00:29:01,760
behalf of my co-authors

591
00:29:01,760 --> 00:29:05,200
um next slide

592
00:29:07,360 --> 00:29:10,720
so uh this draft basically identifies a

593
00:29:10,720 --> 00:29:11,440
gap

594
00:29:11,440 --> 00:29:14,640
in the existing definition and tried

595
00:29:14,640 --> 00:29:15,919
addressing the same

596
00:29:15,919 --> 00:29:17,679
so the problem is the problem statement

597
00:29:17,679 --> 00:29:19,919
here is uh rfc 8287

598
00:29:19,919 --> 00:29:23,520
defines the um you know the ls3 prints

599
00:29:23,520 --> 00:29:26,159
targeted fcc stack and the semantics for

600
00:29:26,159 --> 00:29:28,799
initiator and the responder for uh to

601
00:29:28,799 --> 00:29:29,440
validate

602
00:29:29,440 --> 00:29:31,679
the lsp paths in a segment routing

603
00:29:31,679 --> 00:29:33,760
network with mpls data plane

604
00:29:33,760 --> 00:29:36,640
now this is an example of one of the the

605
00:29:36,640 --> 00:29:38,000
prefix set

606
00:29:38,000 --> 00:29:40,640
as you could see you know uh the the

607
00:29:40,640 --> 00:29:42,480
targeted fcc stack is currently defined

608
00:29:42,480 --> 00:29:44,240
in a way that we defined the prefix or

609
00:29:44,240 --> 00:29:46,240
we include the prefix and the length

610
00:29:46,240 --> 00:29:48,480
along with the protocol that is used to

611
00:29:48,480 --> 00:29:49,440
advertise the

612
00:29:49,440 --> 00:29:52,080
the mapping the the sit and the prefix

613
00:29:52,080 --> 00:29:53,039
mapping

614
00:29:53,039 --> 00:29:54,880
so this information that we carry

615
00:29:54,880 --> 00:29:56,240
currently with the uh

616
00:29:56,240 --> 00:29:57,520
the targeted efficiency stack is

617
00:29:57,520 --> 00:30:00,720
sufficient to validate a single topology

618
00:30:00,720 --> 00:30:03,600
or the default flex algo scenarios but

619
00:30:03,600 --> 00:30:04,000
uh

620
00:30:04,000 --> 00:30:06,480
when we uh uh you know apply this in

621
00:30:06,480 --> 00:30:08,240
multi topology or

622
00:30:08,240 --> 00:30:11,200
you know scenarios involving uh flex

623
00:30:11,200 --> 00:30:12,000
algo the

624
00:30:12,000 --> 00:30:14,240
the non-default flex algo this

625
00:30:14,240 --> 00:30:16,240
information may not be sufficient to

626
00:30:16,240 --> 00:30:22,480
perform the validation next slide

627
00:30:22,480 --> 00:30:24,640
so we have it explained with uh one of

628
00:30:24,640 --> 00:30:26,480
the uh the example topology that

629
00:30:26,480 --> 00:30:28,720
involves multiple flexible algorithm

630
00:30:28,720 --> 00:30:30,880
so um uh as you could see in this

631
00:30:30,880 --> 00:30:32,960
topology node nine is advertising uh

632
00:30:32,960 --> 00:30:35,039
prefix 1.1.1.9

633
00:30:35,039 --> 00:30:36,880
by associating it with three different

634
00:30:36,880 --> 00:30:39,600
flex algos so as you might be aware for

635
00:30:39,600 --> 00:30:41,919
each i know flex algo will be having

636
00:30:41,919 --> 00:30:42,720
unique

637
00:30:42,720 --> 00:30:46,240
uh perfect sense so um

638
00:30:46,240 --> 00:30:50,000
the prefix said 16009 is advertised

639
00:30:50,000 --> 00:30:53,200
uh for flex algo 0 or the default flex

640
00:30:53,200 --> 00:30:54,000
algo and

641
00:30:54,000 --> 00:30:57,200
16809 is advertised for uh algo 128

642
00:30:57,200 --> 00:30:59,720
and 16 909 is advertised for flex

643
00:30:59,720 --> 00:31:00,960
algo129

644
00:31:00,960 --> 00:31:02,880
now let's imagine a scenario where node

645
00:31:02,880 --> 00:31:04,080
0 would like to

646
00:31:04,080 --> 00:31:07,120
perform the validation uh for a specific

647
00:31:07,120 --> 00:31:08,720
you know flex algo in this case uh you

648
00:31:08,720 --> 00:31:10,320
know 16809

649
00:31:10,320 --> 00:31:14,000
for algo128 so when the probe is

650
00:31:14,000 --> 00:31:16,159
generated from node 0 and when

651
00:31:16,159 --> 00:31:18,080
node 9 receives the packet it may not

652
00:31:18,080 --> 00:31:19,679
have sufficient information because we

653
00:31:19,679 --> 00:31:20,880
just included

654
00:31:20,880 --> 00:31:23,360
the the prefix which is 1.1.1.9 and the

655
00:31:23,360 --> 00:31:25,279
respective uh you know subnet mask along

656
00:31:25,279 --> 00:31:26,480
with the protocol that is used to

657
00:31:26,480 --> 00:31:27,200
advertise

658
00:31:27,200 --> 00:31:29,440
so now node 9 may not have the the

659
00:31:29,440 --> 00:31:31,519
relevant information to validate if it

660
00:31:31,519 --> 00:31:32,000
is

661
00:31:32,000 --> 00:31:33,760
if it needs to be validated against you

662
00:31:33,760 --> 00:31:36,720
know flex algo 0 or 128 or 129

663
00:31:36,720 --> 00:31:38,640
now based on the scenario based on the

664
00:31:38,640 --> 00:31:39,760
implementation

665
00:31:39,760 --> 00:31:42,080
on how the prefix is you know associated

666
00:31:42,080 --> 00:31:43,279
in the respective table

667
00:31:43,279 --> 00:31:46,240
it may even end up sending a a false

668
00:31:46,240 --> 00:31:47,519
negative saying you know there is a

669
00:31:47,519 --> 00:31:49,519
label mismatch

670
00:31:49,519 --> 00:31:53,360
so this draft is proposed to tackle this

671
00:31:53,360 --> 00:32:00,720
you know problem next slide

672
00:32:00,720 --> 00:32:03,200
so uh uh this draft basically does two

673
00:32:03,200 --> 00:32:04,480
things one is to

674
00:32:04,480 --> 00:32:07,279
extend the existing targeted fcc stacks

675
00:32:07,279 --> 00:32:09,919
of plp defined for ipv4 and ipv6 prefix

676
00:32:09,919 --> 00:32:10,559
said

677
00:32:10,559 --> 00:32:13,519
and uh the next one is by proposing uh

678
00:32:13,519 --> 00:32:15,360
you know new targeted fcc stack for

679
00:32:15,360 --> 00:32:16,960
multi topology so let's now

680
00:32:16,960 --> 00:32:20,159
first look into the uh the extension of

681
00:32:20,159 --> 00:32:23,840
the existing one so uh the ipv4 and ipv6

682
00:32:23,840 --> 00:32:25,600
prefix segment id which are defined by

683
00:32:25,600 --> 00:32:27,760
rfc 8287

684
00:32:27,760 --> 00:32:30,640
have a field of 16 bit which is reserved

685
00:32:30,640 --> 00:32:31,120
so

686
00:32:31,120 --> 00:32:33,760
this draft split that 16 bit reserve

687
00:32:33,760 --> 00:32:35,519
field into two different fields

688
00:32:35,519 --> 00:32:38,080
and the eight bit the first eight bit

689
00:32:38,080 --> 00:32:39,360
field is used as

690
00:32:39,360 --> 00:32:41,679
the algorithm field so this is backward

691
00:32:41,679 --> 00:32:42,799
compatible because

692
00:32:42,799 --> 00:32:45,440
uh you know if it is the default flex

693
00:32:45,440 --> 00:32:47,360
algo then the value will be zero

694
00:32:47,360 --> 00:32:49,360
and so all the 16 bits will be set to

695
00:32:49,360 --> 00:32:51,120
zero so this is backward compatible to

696
00:32:51,120 --> 00:32:52,640
the existing implementation and if the

697
00:32:52,640 --> 00:32:53,919
validation needs to be done

698
00:32:53,919 --> 00:32:56,960
for a non uh default flex algo

699
00:32:56,960 --> 00:32:58,480
the respective algo field will be

700
00:32:58,480 --> 00:33:01,039
included in this new field

701
00:33:01,039 --> 00:33:03,519
next slide

702
00:33:05,039 --> 00:33:07,440
so the next one is uh defining new uh

703
00:33:07,440 --> 00:33:08,840
you know targeted fcc stack for

704
00:33:08,840 --> 00:33:10,000
multitopology

705
00:33:10,000 --> 00:33:11,840
um so in addition to the previous one

706
00:33:11,840 --> 00:33:13,919
which is prefix uh the length protocol

707
00:33:13,919 --> 00:33:14,720
and the algo

708
00:33:14,720 --> 00:33:17,360
the multi-topology uh extension is

709
00:33:17,360 --> 00:33:19,200
included so this is a new targeted

710
00:33:19,200 --> 00:33:20,559
efficiency stacks up dlp

711
00:33:20,559 --> 00:33:23,360
um you know being requested to the ina

712
00:33:23,360 --> 00:33:25,519
so uh uh the multi-topology id

713
00:33:25,519 --> 00:33:28,159
uh is appended uh to this uh so uh you

714
00:33:28,159 --> 00:33:29,919
know this will be used to identify which

715
00:33:29,919 --> 00:33:32,080
topology that we are trying to validate

716
00:33:32,080 --> 00:33:34,399
and uh um this draft proposes uh you

717
00:33:34,399 --> 00:33:36,240
know this extension for our new targeted

718
00:33:36,240 --> 00:33:38,640
fcc stacks of tlb for both ipv4

719
00:33:38,640 --> 00:33:43,279
and ipv6 next time

720
00:33:46,720 --> 00:33:49,039
so the same uh example that we saw in

721
00:33:49,039 --> 00:33:50,080
the problem statement

722
00:33:50,080 --> 00:33:52,080
has been explained with the the flex

723
00:33:52,080 --> 00:33:53,600
algo example here

724
00:33:53,600 --> 00:33:55,919
so again this is applicable for

725
00:33:55,919 --> 00:33:57,200
multi-topology as well

726
00:33:57,200 --> 00:34:00,399
so um going back to the same topology uh

727
00:34:00,399 --> 00:34:01,919
now with the introduction of this new

728
00:34:01,919 --> 00:34:04,000
fields like for example the algo field

729
00:34:04,000 --> 00:34:06,000
in the targeted fcc stack

730
00:34:06,000 --> 00:34:08,000
when node zero would like to validate

731
00:34:08,000 --> 00:34:09,918
the uh the lsp path

732
00:34:09,918 --> 00:34:13,040
uh towards prefix 1.1.1.9

733
00:34:13,040 --> 00:34:16,800
over um the algo128 it can include the

734
00:34:16,800 --> 00:34:18,560
relevant algorithm id

735
00:34:18,560 --> 00:34:21,040
in the targeted fcc stack that could be

736
00:34:21,040 --> 00:34:23,359
used by node 9 to perform the validation

737
00:34:23,359 --> 00:34:25,280
against the right control plane entry

738
00:34:25,280 --> 00:34:27,599
and it can send the relevant you know

739
00:34:27,599 --> 00:34:30,800
response to the initiator

740
00:34:32,839 --> 00:34:35,839
next

741
00:34:35,918 --> 00:34:38,079
so the constraint that this draft was

742
00:34:38,079 --> 00:34:40,000
inactive for some time and i know

743
00:34:40,000 --> 00:34:42,239
uh we have resurrected the draft and we

744
00:34:42,239 --> 00:34:43,119
have new uh

745
00:34:43,119 --> 00:34:46,719
authors joined us uh from juniper um

746
00:34:46,719 --> 00:34:49,199
so um you know we uh as a next step we

747
00:34:49,199 --> 00:34:50,320
are seeking uh the

748
00:34:50,320 --> 00:34:52,480
word groups feedback so uh please feel

749
00:34:52,480 --> 00:34:53,440
free to read and

750
00:34:53,440 --> 00:34:57,280
share your comments thank you

751
00:34:59,119 --> 00:35:03,040
any questions uh thank

752
00:35:07,599 --> 00:35:10,720
sure okay i think i'm

753
00:35:10,720 --> 00:35:13,760
uh only one um my question is about

754
00:35:13,760 --> 00:35:17,280
flexible algorithm um

755
00:35:17,280 --> 00:35:19,760
the term flexible was for uh if if i'm

756
00:35:19,760 --> 00:35:22,320
not mistaken was for the user defined

757
00:35:22,320 --> 00:35:25,359
uh range from 1 28 and

758
00:35:25,359 --> 00:35:28,640
on and onwards

759
00:35:28,640 --> 00:35:30,880
does it cover these standard algos as

760
00:35:30,880 --> 00:35:32,400
well uh is it the correct

761
00:35:32,400 --> 00:35:35,680
term that you want to use uh yeah so

762
00:35:35,680 --> 00:35:38,400
uh i mean uh uh it includes the uh the

763
00:35:38,400 --> 00:35:41,119
standard algorithms as well

764
00:35:41,119 --> 00:35:45,040
so yeah that's a good comment

765
00:35:47,760 --> 00:35:51,200
algo covers the whole algorithm space or

766
00:35:51,200 --> 00:35:53,680
just the user defined one

767
00:35:53,680 --> 00:35:57,839
yeah the terminology

768
00:35:57,839 --> 00:36:00,560
okay thank you

769
00:36:03,040 --> 00:36:05,279
okay

770
00:36:06,160 --> 00:36:09,599
i guess nobody is on the mic uh

771
00:36:09,599 --> 00:36:13,040
thank you nagendra we'll move on to the

772
00:36:13,040 --> 00:36:13,680
next

773
00:36:13,680 --> 00:36:16,960
presenter and we have yao or greg

774
00:36:16,960 --> 00:36:19,920
on the mpls-based service function path

775
00:36:19,920 --> 00:36:27,359
consistency and verification

776
00:36:27,359 --> 00:36:31,760
hi can you hear me yes

777
00:36:31,760 --> 00:36:34,800
yeah hi i can hear you hey

778
00:36:34,800 --> 00:36:37,839
hey uh hi i'm yael from zte my

779
00:36:37,839 --> 00:36:40,960
presentation today is about mpls based

780
00:36:40,960 --> 00:36:43,119
on service function path consistency

781
00:36:43,119 --> 00:36:44,320
verification

782
00:36:44,320 --> 00:36:47,119
next slide please

783
00:36:49,119 --> 00:36:52,320
the requirement is to renovate mpls and

784
00:36:52,320 --> 00:36:55,599
pin to support verification between the

785
00:36:55,599 --> 00:36:57,760
control plane and the data plan

786
00:36:57,760 --> 00:37:00,800
for mpos places the response in part in

787
00:37:00,800 --> 00:37:01,599
this draft

788
00:37:01,599 --> 00:37:04,640
mpls based sfd includes

789
00:37:04,640 --> 00:37:08,400
npos fc in ifc8595

790
00:37:08,400 --> 00:37:11,280
and srsfc industrial service program

791
00:37:11,280 --> 00:37:12,320
product

792
00:37:12,320 --> 00:37:15,440
for mpls at con this job

793
00:37:15,440 --> 00:37:17,839
proposes that service functions for

794
00:37:17,839 --> 00:37:20,400
waters are responsible to process the

795
00:37:20,400 --> 00:37:22,400
mpis have a request

796
00:37:22,400 --> 00:37:25,359
and expand the usage of the generic

797
00:37:25,359 --> 00:37:26,960
associated china label

798
00:37:26,960 --> 00:37:30,480
to identify the sfpom packet

799
00:37:30,480 --> 00:37:32,960
and new sub tvs are introduced for the

800
00:37:32,960 --> 00:37:33,680
fvc

801
00:37:33,680 --> 00:37:37,119
of the nprs basic unit ytfc

802
00:37:37,119 --> 00:37:41,359
as for srs fcom it is based on lsvp

803
00:37:41,359 --> 00:37:50,320
osr mpls next part please

804
00:37:50,320 --> 00:37:53,119
uh this draft has been presented on last

805
00:37:53,119 --> 00:37:54,640
meeting and here are the

806
00:37:54,640 --> 00:37:58,560
updates since then first nprs says that

807
00:37:58,560 --> 00:37:59,359
coam

808
00:37:59,359 --> 00:38:03,119
and sr sfcon are separated and discussed

809
00:38:03,119 --> 00:38:05,359
as two independent products

810
00:38:05,359 --> 00:38:08,160
second the solution is modified to be

811
00:38:08,160 --> 00:38:10,000
more consistent with the

812
00:38:10,000 --> 00:38:14,720
rsp rsvp mechanism sfc violation to vm

813
00:38:14,720 --> 00:38:17,200
is its subjects defined in the previous

814
00:38:17,200 --> 00:38:18,960
version i deleted

815
00:38:18,960 --> 00:38:22,400
and sfc basic unit near sub-tree

816
00:38:22,400 --> 00:38:24,640
is defined in this version its usage

817
00:38:24,640 --> 00:38:25,839
will be described

818
00:38:25,839 --> 00:38:28,880
in the following slides we also add a

819
00:38:28,880 --> 00:38:29,760
reason about

820
00:38:29,760 --> 00:38:33,280
why nprs sfc service functions for

821
00:38:33,280 --> 00:38:34,400
worders

822
00:38:34,400 --> 00:38:37,040
are responsible for mpls as a request

823
00:38:37,040 --> 00:38:38,160
process

824
00:38:38,160 --> 00:38:41,680
that is in mpls sfc the path forwarding

825
00:38:41,680 --> 00:38:42,560
decision is

826
00:38:42,560 --> 00:38:44,960
made by service function for waters

827
00:38:44,960 --> 00:38:46,000
based on the basic

828
00:38:46,000 --> 00:38:49,040
unit so these functions may not be aware

829
00:38:49,040 --> 00:38:50,079
of that you see

830
00:38:50,079 --> 00:38:53,440
the level stack and note that that

831
00:38:53,440 --> 00:38:56,880
the graph updates 5c and a595

832
00:38:56,880 --> 00:39:01,359
is added and the paragraph in ic8595

833
00:39:01,359 --> 00:39:03,280
that this draft want to update has

834
00:39:03,280 --> 00:39:04,960
changed the

835
00:39:04,960 --> 00:39:07,280
terminology section is updated for

836
00:39:07,280 --> 00:39:08,400
better understanding

837
00:39:08,400 --> 00:39:10,480
and there are also various entire

838
00:39:10,480 --> 00:39:11,520
changes

839
00:39:11,520 --> 00:39:15,839
next slide please

840
00:39:18,000 --> 00:39:21,119
and these two sub tvs are defined only

841
00:39:21,119 --> 00:39:21,440
for

842
00:39:21,440 --> 00:39:25,599
sfc and os packet forwarding sfc and

843
00:39:25,599 --> 00:39:28,880
s is based on the basic unit for sfc

844
00:39:28,880 --> 00:39:32,320
which is two labels so the sfc basic

845
00:39:32,320 --> 00:39:33,440
units of trv

846
00:39:33,440 --> 00:39:36,000
is used to carry the corresponding fcc

847
00:39:36,000 --> 00:39:36,720
input

848
00:39:36,720 --> 00:39:40,160
of the basic unit the rd and sf type

849
00:39:40,160 --> 00:39:42,720
fields are taken from its control plane

850
00:39:42,720 --> 00:39:43,680
draft

851
00:39:43,680 --> 00:39:47,119
in sfc and prson since one's

852
00:39:47,119 --> 00:39:50,640
basic unit is related to only one fec

853
00:39:50,640 --> 00:39:53,280
to ensure that the proper validation can

854
00:39:53,280 --> 00:39:54,800
still be performed

855
00:39:54,800 --> 00:39:58,079
the sfc basic unit new sub-tier v is

856
00:39:58,079 --> 00:40:00,720
introduced it is a bit similar to new

857
00:40:00,720 --> 00:40:01,839
rfqc

858
00:40:01,839 --> 00:40:05,119
when a dual mvc ventilation and service

859
00:40:05,119 --> 00:40:07,440
function forwarder should skip the new

860
00:40:07,440 --> 00:40:10,480
sub tlv and use the sfc basic

861
00:40:10,480 --> 00:40:13,599
units of tlv to validate the fvc with

862
00:40:13,599 --> 00:40:15,200
the preset unit

863
00:40:15,200 --> 00:40:18,000
next like this

864
00:40:21,280 --> 00:40:24,160
and this page summarized summarizes the

865
00:40:24,160 --> 00:40:24,880
theory of

866
00:40:24,880 --> 00:40:27,680
operation when sending an nprs hacker

867
00:40:27,680 --> 00:40:29,119
request

868
00:40:29,119 --> 00:40:32,880
in the in sfc and tis the aqua request

869
00:40:32,880 --> 00:40:33,440
is sent

870
00:40:33,440 --> 00:40:35,920
with a new label stack corresponding to

871
00:40:35,920 --> 00:40:39,839
the sfp being tested

872
00:40:50,079 --> 00:40:53,839
you're breaking up for me

873
00:40:55,680 --> 00:40:58,720
is it just me or everybody's getting

874
00:40:58,720 --> 00:41:02,880
a voice same here so it's not only you

875
00:41:02,880 --> 00:41:06,480
okay yeah you may want to repeat the

876
00:41:06,480 --> 00:41:07,760
last sentence

877
00:41:07,760 --> 00:41:11,200
uh we could not hear you well

878
00:41:11,839 --> 00:41:16,319
can you hear me now yes i can hear you

879
00:41:16,319 --> 00:41:20,400
okay okay and network condition you know

880
00:41:20,400 --> 00:41:23,760
it's not so well so so i'll continue

881
00:41:23,760 --> 00:41:28,480
okay so also a downstream detailed

882
00:41:28,480 --> 00:41:31,680
mapping tv will be maybe included and

883
00:41:31,680 --> 00:41:32,720
operators should

884
00:41:32,720 --> 00:41:35,440
manage the ttl field of the sf label

885
00:41:35,440 --> 00:41:36,400
properly

886
00:41:36,400 --> 00:41:38,800
to trace and service function parts the

887
00:41:38,800 --> 00:41:41,599
next five piece

888
00:41:46,960 --> 00:41:50,880
and here are uh here gives two examples

889
00:41:50,880 --> 00:41:54,000
of sending the mpls a request

890
00:41:54,000 --> 00:41:56,640
the left is an service function path

891
00:41:56,640 --> 00:41:58,720
based on the swiping mode

892
00:41:58,720 --> 00:42:01,440
the mpls docker request is sent with one

893
00:42:01,440 --> 00:42:02,720
basic unit

894
00:42:02,720 --> 00:42:05,760
and one gl in the package the ttl

895
00:42:05,760 --> 00:42:08,800
of the sf label is set successfully to

896
00:42:08,800 --> 00:42:11,280
one two three and so on and the right

897
00:42:11,280 --> 00:42:12,160
side is an

898
00:42:12,160 --> 00:42:15,520
sfp based on microsoft if the operator

899
00:42:15,520 --> 00:42:17,440
wants to validate the fvc

900
00:42:17,440 --> 00:42:21,599
for sf2 which is connected to sff2

901
00:42:21,599 --> 00:42:24,720
the gl is putting two basic units into

902
00:42:24,720 --> 00:42:27,920
accurate class because when the packet

903
00:42:27,920 --> 00:42:31,280
leaves sf leaves as f1 the first basic

904
00:42:31,280 --> 00:42:31,760
unit

905
00:42:31,760 --> 00:42:34,560
and the gl in it will destroy it in the

906
00:42:34,560 --> 00:42:35,920
fec step

907
00:42:35,920 --> 00:42:39,040
the basic unit nearsighted vo basically

908
00:42:39,040 --> 00:42:42,079
3 may be carried it is to

909
00:42:42,079 --> 00:42:44,800
in order to ensure that the number of

910
00:42:44,800 --> 00:42:46,960
labels in downstream tlp

911
00:42:46,960 --> 00:42:49,280
correspond to the number of npcs in the

912
00:42:49,280 --> 00:42:50,560
fcc stack

913
00:42:50,560 --> 00:42:55,200
so as f2 so can enter the fec validation

914
00:42:55,200 --> 00:42:56,079
procedure

915
00:42:56,079 --> 00:42:59,440
as an intermediate note

916
00:43:02,079 --> 00:43:06,640
and this is the next like this

917
00:43:09,359 --> 00:43:13,280
okay this is the packet assessing code

918
00:43:13,280 --> 00:43:15,359
this is package processing flow of the

919
00:43:15,359 --> 00:43:16,960
service function for order

920
00:43:16,960 --> 00:43:19,680
after receiving an echo request as

921
00:43:19,680 --> 00:43:20,960
introduced before

922
00:43:20,960 --> 00:43:23,599
if the sfc contacts label is followed by

923
00:43:23,599 --> 00:43:25,200
a special purpose label

924
00:43:25,200 --> 00:43:28,240
gl it is recognized as an sp

925
00:43:28,240 --> 00:43:32,240
spf sfv on package then the

926
00:43:32,240 --> 00:43:35,760
uh sff will decrease the ttl

927
00:43:35,760 --> 00:43:38,880
in sf label if the ttl after decrease

928
00:43:38,880 --> 00:43:41,200
is not zero the one package is processed

929
00:43:41,200 --> 00:43:43,000
as introducing

930
00:43:43,000 --> 00:43:46,960
fc8595 if ttr is decremented decrements

931
00:43:46,960 --> 00:43:50,000
to zero the om packet is set to the

932
00:43:50,000 --> 00:43:51,520
local control plane

933
00:43:51,520 --> 00:43:55,839
next slide is

934
00:43:59,119 --> 00:44:02,720
and rfc8595

935
00:44:02,720 --> 00:44:05,440
specifies the processing rule of the ttl

936
00:44:05,440 --> 00:44:08,800
field of the ssf label one of them for

937
00:44:08,800 --> 00:44:10,240
the swapping model is

938
00:44:10,240 --> 00:44:13,599
if it defends sff decrements

939
00:44:13,599 --> 00:44:16,079
the tail to zero it must not send the

940
00:44:16,079 --> 00:44:17,200
package message

941
00:44:17,200 --> 00:44:21,680
just start packing

942
00:44:28,079 --> 00:44:30,720
maybe send a control plan how given

943
00:44:30,720 --> 00:44:31,599
download

944
00:44:31,599 --> 00:44:34,319
exceed the configured rate intended to

945
00:44:34,319 --> 00:44:35,920
protect the system from the

946
00:44:35,920 --> 00:44:38,240
possibilities attack

947
00:44:38,240 --> 00:44:41,040
next like this

948
00:44:44,720 --> 00:44:47,599
and welcome feedbacks and comments and

949
00:44:47,599 --> 00:44:48,560
because

950
00:44:48,560 --> 00:44:52,560
sfc and pos oem and srsfcom are

951
00:44:52,560 --> 00:44:53,680
separated

952
00:44:53,680 --> 00:44:56,640
we plan to split the draft and only the

953
00:44:56,640 --> 00:44:57,359
sfc

954
00:44:57,359 --> 00:44:59,680
and pos are in part be kept in the

955
00:44:59,680 --> 00:45:00,560
drought

956
00:45:00,560 --> 00:45:02,319
and with the larger working group to

957
00:45:02,319 --> 00:45:05,920
consider adoption of sfc and kls

958
00:45:05,920 --> 00:45:08,960
and that's all thank you

959
00:45:10,480 --> 00:45:14,319
thank you yo let's check if there are

960
00:45:14,319 --> 00:45:14,960
anybody

961
00:45:14,960 --> 00:45:19,839
on in the queue for questions

962
00:45:20,400 --> 00:45:24,960
just see some yeah remember

963
00:45:25,760 --> 00:45:29,280
okay yeah um thank you so uh yeah

964
00:45:29,280 --> 00:45:30,880
i was looking into the the theory of

965
00:45:30,880 --> 00:45:32,319
operation that you defined and i

966
00:45:32,319 --> 00:45:33,440
understand that

967
00:45:33,440 --> 00:45:35,920
this draft is targeting both uh you know

968
00:45:35,920 --> 00:45:37,920
the legacy and pls and also

969
00:45:37,920 --> 00:45:41,440
the segment routing uh mpls for sfc

970
00:45:41,440 --> 00:45:44,560
um i mean uh the uh the sr

971
00:45:44,560 --> 00:45:46,800
uh based sfc is going to be a stack of

972
00:45:46,800 --> 00:45:48,079
segments

973
00:45:48,079 --> 00:45:50,240
that will steer the traffic um you know

974
00:45:50,240 --> 00:45:51,680
be defining the relevant

975
00:45:51,680 --> 00:45:53,280
service functions so i'm trying to

976
00:45:53,280 --> 00:45:55,200
understand how this theory of operation

977
00:45:55,200 --> 00:45:57,119
is sufficient for

978
00:45:57,119 --> 00:46:00,240
sr uh sfc because it simply says vikram

979
00:46:00,240 --> 00:46:02,319
and the ttm and sf label which

980
00:46:02,319 --> 00:46:03,680
which may not be the case and if you

981
00:46:03,680 --> 00:46:05,760
were to directly pop and uh you know

982
00:46:05,760 --> 00:46:07,520
straight to the next

983
00:46:07,520 --> 00:46:10,079
service function without any additional

984
00:46:10,079 --> 00:46:10,880
check on

985
00:46:10,880 --> 00:46:14,480
the the transit sffs then uh

986
00:46:14,480 --> 00:46:16,720
um i'm worried that we are not actually

987
00:46:16,720 --> 00:46:18,720
doing the actual validation we are

988
00:46:18,720 --> 00:46:20,319
it's more like you know forwarding it

989
00:46:20,319 --> 00:46:21,920
towards the next service function

990
00:46:21,920 --> 00:46:23,280
forwarders

991
00:46:23,280 --> 00:46:26,160
any thoughts on that

992
00:46:27,119 --> 00:46:30,560
i'm sorry that the network didn't work

993
00:46:30,560 --> 00:46:31,359
right so i

994
00:46:31,359 --> 00:46:35,200
i only feel part of the question

995
00:46:35,200 --> 00:46:38,319
because this so first uh if i

996
00:46:38,319 --> 00:46:40,800
if i don't understand understanding

997
00:46:40,800 --> 00:46:42,079
right you can correct me

998
00:46:42,079 --> 00:46:45,359
and if the

999
00:46:45,359 --> 00:46:49,119
in this trap we will we will in the next

1000
00:46:49,119 --> 00:46:49,599
version

1001
00:46:49,599 --> 00:46:52,720
we are only going to discuss about

1002
00:46:52,720 --> 00:46:57,040
the mplsfc sfc defining ifc8595

1003
00:46:57,040 --> 00:47:00,079
and you will leave the assignment lsfc

1004
00:47:00,079 --> 00:47:03,599
to another job so is it

1005
00:47:03,599 --> 00:47:11,040
is your question based on this

1006
00:47:11,040 --> 00:47:14,400
yes um uh it's more on the sr uh sfc uh

1007
00:47:14,400 --> 00:47:16,240
because i understand the legacy uh

1008
00:47:16,240 --> 00:47:20,319
uh mpls uh validation but srsfc to me it

1009
00:47:20,319 --> 00:47:20,880
looks like

1010
00:47:20,880 --> 00:47:22,319
you know the theory of operation may not

1011
00:47:22,319 --> 00:47:23,920
be sufficient so we just want to get

1012
00:47:23,920 --> 00:47:27,119
some clarification on that

1013
00:47:31,520 --> 00:47:34,640
if i may um this is greg

1014
00:47:34,640 --> 00:47:38,160
sorry to interject because uh

1015
00:47:38,160 --> 00:47:42,000
of yao network condition so

1016
00:47:42,000 --> 00:47:45,040
currently the draft covers only

1017
00:47:45,040 --> 00:47:48,640
mpls sfc case

1018
00:47:49,680 --> 00:47:51,920
so it's not applicable to legacy it's

1019
00:47:51,920 --> 00:47:53,119
not applicable to

1020
00:47:53,119 --> 00:47:56,319
srsfc it's uh

1021
00:47:56,319 --> 00:48:02,558
specifically for rfc 8595

1022
00:48:03,920 --> 00:48:07,200
does it as does it answer your question

1023
00:48:07,200 --> 00:48:10,000
yeah because i i remember saying um

1024
00:48:10,000 --> 00:48:11,440
something around i know this

1025
00:48:11,440 --> 00:48:14,960
this draft covers both uh uh sr sfc

1026
00:48:14,960 --> 00:48:18,559
so just want to get it well that's

1027
00:48:18,559 --> 00:48:21,119
okay that that's something that we're

1028
00:48:21,119 --> 00:48:22,640
still discussing we are open

1029
00:48:22,640 --> 00:48:25,520
for and we appreciate the comments uh

1030
00:48:25,520 --> 00:48:27,680
from you in the working group

1031
00:48:27,680 --> 00:48:30,559
because we realize that these use cases

1032
00:48:30,559 --> 00:48:31,839
are different

1033
00:48:31,839 --> 00:48:34,880
and uh they either require different

1034
00:48:34,880 --> 00:48:38,079
uh instruments or might be just a

1035
00:48:38,079 --> 00:48:41,760
separate draft but current solution

1036
00:48:41,760 --> 00:48:45,680
current solution applicable only to um

1037
00:48:45,680 --> 00:48:50,160
mpls sfc covered by 85.95

1038
00:48:50,160 --> 00:48:52,879
okay thanks

1039
00:48:55,680 --> 00:49:03,599
so then lua is next

1040
00:49:03,599 --> 00:49:08,720
there man yeah okay

1041
00:49:08,720 --> 00:49:12,480
and i had a bad echo

1042
00:49:12,480 --> 00:49:16,880
can you go back to the slide that talks

1043
00:49:16,880 --> 00:49:21,280
about sub-tlb

1044
00:49:28,839 --> 00:49:31,839
16-21

1045
00:49:33,839 --> 00:49:35,920
you need to help me on which slide

1046
00:49:35,920 --> 00:49:39,280
exactly you want me to go back

1047
00:49:42,839 --> 00:49:45,200
okay this is good

1048
00:49:45,200 --> 00:49:48,720
okay yeah so all our

1049
00:49:48,720 --> 00:49:52,640
other sub things are defined for

1050
00:49:52,640 --> 00:49:57,200
uh tili 1 and 21.

1051
00:49:57,200 --> 00:50:13,839
is that true this case also

1052
00:50:24,000 --> 00:50:29,200
i see now the text on the slide this is

1053
00:50:29,200 --> 00:50:31,919
confusing

1054
00:50:32,240 --> 00:50:36,879
so i i will draw the

1055
00:50:37,599 --> 00:50:41,440
oh okay

1056
00:50:41,440 --> 00:50:44,800
okay so you're clear uh uh lower

1057
00:50:44,800 --> 00:50:48,079
can we move on to the next

1058
00:50:50,400 --> 00:50:53,839
the turret you are next okay good um uh

1059
00:50:53,839 --> 00:50:56,480
my question is uh

1060
00:50:56,480 --> 00:50:59,040
my question is about the uh presence of

1061
00:50:59,040 --> 00:51:00,960
multiple gals in the

1062
00:51:00,960 --> 00:51:04,559
in the stack uh um

1063
00:51:04,559 --> 00:51:07,280
if i remember correctly the gal uh when

1064
00:51:07,280 --> 00:51:09,520
it was proposed it was to be at the

1065
00:51:09,520 --> 00:51:12,079
bottom of the stack

1066
00:51:12,079 --> 00:51:15,920
and the gash follows it

1067
00:51:15,920 --> 00:51:20,839
are you updating in the rc that mentions

1068
00:51:20,839 --> 00:51:23,040
this

1069
00:51:23,040 --> 00:51:26,880
oh yes uh what

1070
00:51:26,880 --> 00:51:30,079
uh because uh uh we because the service

1071
00:51:30,079 --> 00:51:31,760
function for weather will

1072
00:51:31,760 --> 00:51:35,119
identify that package oem package in

1073
00:51:35,119 --> 00:51:36,000
some ways

1074
00:51:36,000 --> 00:51:38,559
we think it's appropriate to use special

1075
00:51:38,559 --> 00:51:39,359
properly

1076
00:51:39,359 --> 00:51:42,400
special purpose label to indicate that

1077
00:51:42,400 --> 00:51:44,800
among the existing special purpose

1078
00:51:44,800 --> 00:51:45,599
labels

1079
00:51:45,599 --> 00:51:50,000
and the jail is maybe a suitable choice

1080
00:51:50,000 --> 00:51:53,200
to i didn't identify the package that

1081
00:51:53,200 --> 00:51:55,839
this is our own package yeah i'm aware

1082
00:51:55,839 --> 00:51:56,559
that

1083
00:51:56,559 --> 00:51:59,920
in that i've seen now yeah maybe there's

1084
00:51:59,920 --> 00:52:02,960
only must not be

1085
00:52:02,960 --> 00:52:05,440
more than one year in the package so

1086
00:52:05,440 --> 00:52:06,880
good

1087
00:52:06,880 --> 00:52:10,720
but if after discussion and all people

1088
00:52:10,720 --> 00:52:11,599
think that

1089
00:52:11,599 --> 00:52:14,319
doing the existing special operations

1090
00:52:14,319 --> 00:52:15,440
not

1091
00:52:15,440 --> 00:52:18,880
simple we can consider to use

1092
00:52:18,880 --> 00:52:22,960
a new special performance label

1093
00:52:22,960 --> 00:52:26,400
but i think uh

1094
00:52:26,480 --> 00:52:28,559
yeah we can we can discuss more about

1095
00:52:28,559 --> 00:52:30,000
that

1096
00:52:30,000 --> 00:52:33,119
okay uh yeah just uh you know follow up

1097
00:52:33,119 --> 00:52:34,079
on my question

1098
00:52:34,079 --> 00:52:37,839
uh some hardware will assume that

1099
00:52:37,839 --> 00:52:41,119
when once they see the girl the the next

1100
00:52:41,119 --> 00:52:43,359
is the gash and there is specific

1101
00:52:43,359 --> 00:52:46,960
bits that should follow uh

1102
00:52:46,960 --> 00:52:50,160
for the uh gash header

1103
00:52:50,160 --> 00:52:52,559
at least the first nibble fourth four

1104
00:52:52,559 --> 00:52:53,520
bits

1105
00:52:53,520 --> 00:52:56,319
and i i see here you're assuming an sf

1106
00:52:56,319 --> 00:52:59,040
label without without any regard to the

1107
00:52:59,040 --> 00:53:01,680
first nibble so we we can take it to the

1108
00:53:01,680 --> 00:53:02,319
list but

1109
00:53:02,319 --> 00:53:05,440
i think uh this has to be

1110
00:53:05,440 --> 00:53:08,880
uh thought of more

1111
00:53:09,280 --> 00:53:13,119
okay we can discuss more about it

1112
00:53:13,119 --> 00:53:16,240
okay thank you

1113
00:53:16,240 --> 00:53:19,359
uh anyone else with you

1114
00:53:19,359 --> 00:53:22,720
no okay thank you yao

1115
00:53:22,720 --> 00:53:25,119
uh we'll move on to the next uh

1116
00:53:25,119 --> 00:53:26,800
presentation

1117
00:53:26,800 --> 00:53:29,920
uh we have rakesh on the mpls data plane

1118
00:53:29,920 --> 00:53:31,119
capsulation for

1119
00:53:31,119 --> 00:53:34,079
in c2 oem

1120
00:53:35,920 --> 00:53:39,200
hi everyone my name is rakesh gandhi

1121
00:53:39,200 --> 00:53:43,040
presenting this draft on behalf of the

1122
00:53:43,040 --> 00:53:46,400
authors listed next slide

1123
00:53:46,400 --> 00:53:49,200
please synthetic

1124
00:53:51,520 --> 00:53:53,440
so the agenda is uh we look at the

1125
00:53:53,440 --> 00:53:56,160
requirements and scope of the draft uh

1126
00:53:56,160 --> 00:53:57,200
the summary of

1127
00:53:57,200 --> 00:53:59,200
uh the procedures uh there is some

1128
00:53:59,200 --> 00:54:02,000
discussions uh happening

1129
00:54:02,000 --> 00:54:04,240
uh in this session as well as we have a

1130
00:54:04,240 --> 00:54:05,520
joint pulse

1131
00:54:05,520 --> 00:54:08,240
spring mpls uh working obsession on

1132
00:54:08,240 --> 00:54:10,000
friday

1133
00:54:10,000 --> 00:54:15,680
and discuss next steps next slide please

1134
00:54:17,119 --> 00:54:19,200
so the the requirement the scope of this

1135
00:54:19,200 --> 00:54:20,319
draft is uh

1136
00:54:20,319 --> 00:54:23,599
this is about the nc2 oem uh

1137
00:54:23,599 --> 00:54:26,480
the work is being done in the ippm

1138
00:54:26,480 --> 00:54:28,240
working group

1139
00:54:28,240 --> 00:54:30,720
where the data fields are defined and

1140
00:54:30,720 --> 00:54:32,559
the scope is to carry

1141
00:54:32,559 --> 00:54:36,079
that with mpls and cap for both the h2

1142
00:54:36,079 --> 00:54:37,359
edge keys as well as

1143
00:54:37,359 --> 00:54:41,119
a hub by hop iom case

1144
00:54:41,119 --> 00:54:44,000
next slide please

1145
00:54:47,599 --> 00:54:50,720
so uh we had the mplsrt expert

1146
00:54:50,720 --> 00:54:54,880
review done many thanks to the reviewers

1147
00:54:54,880 --> 00:54:58,079
we have defined the new iom

1148
00:54:58,079 --> 00:55:03,280
gsch header with a new type for iom

1149
00:55:03,280 --> 00:55:05,680
there were some requests to elaborate on

1150
00:55:05,680 --> 00:55:08,079
iom procedures so we have done that as

1151
00:55:08,079 --> 00:55:09,359
well

1152
00:55:09,359 --> 00:55:12,400
we clarified that label usage with

1153
00:55:12,400 --> 00:55:14,160
respect to the iom

1154
00:55:14,160 --> 00:55:17,760
option types there is

1155
00:55:17,760 --> 00:55:19,920
some discussions happening for multiple

1156
00:55:19,920 --> 00:55:22,240
gsh and control word handling

1157
00:55:22,240 --> 00:55:25,200
draft does talk about that and probably

1158
00:55:25,200 --> 00:55:27,359
there might be some more discussions

1159
00:55:27,359 --> 00:55:30,400
in this area some editorial changes

1160
00:55:30,400 --> 00:55:31,839
about

1161
00:55:31,839 --> 00:55:34,079
not scope is not just sr but it's

1162
00:55:34,079 --> 00:55:35,200
generic

1163
00:55:35,200 --> 00:55:38,480
mpls encapsulation so uh editorial

1164
00:55:38,480 --> 00:55:41,839
changes were made for that

1165
00:55:41,839 --> 00:55:44,000
and then open item is to discuss the

1166
00:55:44,000 --> 00:55:47,359
multiple gsch controller headers

1167
00:55:47,359 --> 00:55:50,319
the next slide please

1168
00:55:53,359 --> 00:55:55,920
next slide

1169
00:55:57,599 --> 00:56:00,839
so a draft defines the

1170
00:56:00,839 --> 00:56:04,480
gsh header for iom

1171
00:56:04,480 --> 00:56:07,920
with a type for it this

1172
00:56:07,920 --> 00:56:09,570
allows to

1173
00:56:09,570 --> 00:56:11,440
[Music]

1174
00:56:11,440 --> 00:56:14,640
handle the ecmp related

1175
00:56:14,640 --> 00:56:17,119
issues with because it starts with zero

1176
00:56:17,119 --> 00:56:18,480
zero zero what

1177
00:56:18,480 --> 00:56:22,640
uh bits and it's followed by

1178
00:56:22,640 --> 00:56:25,920
iom options um that's defined in the

1179
00:56:25,920 --> 00:56:27,359
ippm

1180
00:56:27,359 --> 00:56:30,640
working group documents the next slide

1181
00:56:30,640 --> 00:56:32,879
please

1182
00:56:36,079 --> 00:56:38,400
yeah so we just mentioned the the header

1183
00:56:38,400 --> 00:56:41,839
so we can go to the next slide

1184
00:56:42,839 --> 00:56:45,760
please

1185
00:56:45,760 --> 00:56:48,480
uh the second extension uh being used

1186
00:56:48,480 --> 00:56:50,400
are the indicator labels

1187
00:56:50,400 --> 00:56:52,079
uh they are indicate they are used to

1188
00:56:52,079 --> 00:56:54,079
indicate the presence of the iom data

1189
00:56:54,079 --> 00:56:54,559
fields

1190
00:56:54,559 --> 00:56:57,520
after end of stack the separate labels

1191
00:56:57,520 --> 00:56:58,000
are used

1192
00:56:58,000 --> 00:57:01,920
for a h2h case and up by hop case

1193
00:57:01,920 --> 00:57:05,119
um idea is to optimize their uh

1194
00:57:05,119 --> 00:57:08,160
processing on every hop uh it's a heavy

1195
00:57:08,160 --> 00:57:08,880
processing

1196
00:57:08,880 --> 00:57:13,040
and um trying to avoid

1197
00:57:13,040 --> 00:57:16,640
the the processing on all the mid notes

1198
00:57:16,640 --> 00:57:21,359
and in case of uh hop by hop case uh the

1199
00:57:21,359 --> 00:57:23,520
trace options are processed on

1200
00:57:23,520 --> 00:57:26,079
each hop but as well as the edge nodes

1201
00:57:26,079 --> 00:57:28,559
whereas in s2h case it's only processed

1202
00:57:28,559 --> 00:57:30,799
on the edge nodes

1203
00:57:30,799 --> 00:57:33,759
and next slide please

1204
00:57:35,119 --> 00:57:37,920
the next slide

1205
00:57:39,040 --> 00:57:42,559
so this is a packet uh for a header

1206
00:57:42,559 --> 00:57:46,799
uh there is an indicator label with um

1207
00:57:46,799 --> 00:57:49,040
end of stack bit set for edge to edge

1208
00:57:49,040 --> 00:57:49,839
case uh

1209
00:57:49,839 --> 00:57:53,119
followed by the iom

1210
00:57:53,119 --> 00:57:57,920
gach and it's followed by the iom

1211
00:57:57,920 --> 00:58:02,000
option types and then the payload

1212
00:58:02,000 --> 00:58:05,599
so this is a an example of

1213
00:58:05,599 --> 00:58:09,280
h2h mpls iom

1214
00:58:09,280 --> 00:58:14,319
packet header and next slide please

1215
00:58:18,160 --> 00:58:22,240
so uh there are three methods for the

1216
00:58:22,240 --> 00:58:26,480
edge-to-edge indicator label allocations

1217
00:58:26,480 --> 00:58:30,799
uh one method is to define standard

1218
00:58:30,799 --> 00:58:33,119
extended special purpose label which is

1219
00:58:33,119 --> 00:58:36,480
used along with the extension label 15.

1220
00:58:36,480 --> 00:58:39,520
second method is to have a global

1221
00:58:39,520 --> 00:58:41,920
label which is can be allocated by a

1222
00:58:41,920 --> 00:58:42,880
controller

1223
00:58:42,880 --> 00:58:46,319
in which case you only have one label

1224
00:58:46,319 --> 00:58:47,839
in case of number one you have two

1225
00:58:47,839 --> 00:58:50,720
labels and there is a third case where

1226
00:58:50,720 --> 00:58:53,839
the label is signaled by the decap node

1227
00:58:53,839 --> 00:58:56,960
uh this also helps with uh making sure

1228
00:58:56,960 --> 00:58:57,440
that

1229
00:58:57,440 --> 00:58:59,839
the cap node is capable of processing

1230
00:58:59,839 --> 00:59:00,960
the

1231
00:59:00,960 --> 00:59:03,920
iom because it will advertise it will

1232
00:59:03,920 --> 00:59:05,359
advertise the

1233
00:59:05,359 --> 00:59:09,520
the label and in all three cases the

1234
00:59:09,520 --> 00:59:10,240
label

1235
00:59:10,240 --> 00:59:12,079
is carried at the bottom of the label

1236
00:59:12,079 --> 00:59:14,400
stack

1237
00:59:15,040 --> 00:59:19,839
next slide please

1238
00:59:20,880 --> 00:59:23,440
so this is a comparison table for the

1239
00:59:23,440 --> 00:59:24,880
three methods um

1240
00:59:24,880 --> 00:59:27,520
what is the impact the labels text size

1241
00:59:27,520 --> 00:59:28,480
and where does

1242
00:59:28,480 --> 00:59:32,559
the indicator label uh added on the

1243
00:59:32,559 --> 00:59:34,240
label stack

1244
00:59:34,240 --> 00:59:38,640
um so the espl there are two

1245
00:59:38,640 --> 00:59:40,799
two labels as mentioned whereas in

1246
00:59:40,799 --> 00:59:41,839
method two and three

1247
00:59:41,839 --> 00:59:45,040
it's only one extra label and it carried

1248
00:59:45,040 --> 00:59:48,400
at the bottom in all cases the next

1249
00:59:48,400 --> 00:59:51,040
slide piece

1250
00:59:54,480 --> 00:59:57,680
so uh the procedure is uh the on end cap

1251
00:59:57,680 --> 01:00:02,559
node uh the mpls header is added

1252
01:00:02,559 --> 01:00:05,119
as well as the indicator label and the

1253
01:00:05,119 --> 01:00:06,400
trace options

1254
01:00:06,400 --> 01:00:09,520
uh for h2h case um and

1255
01:00:09,520 --> 01:00:12,720
midpoints uh do not process uh they will

1256
01:00:12,720 --> 01:00:13,839
not find

1257
01:00:13,839 --> 01:00:16,960
any indicator label that they uh

1258
01:00:16,960 --> 01:00:18,960
they need to process so they will skip

1259
01:00:18,960 --> 01:00:20,720
it the cap node

1260
01:00:20,720 --> 01:00:23,200
uh will process uh will find the

1261
01:00:23,200 --> 01:00:27,119
indicator labels it will process the iom

1262
01:00:27,119 --> 01:00:30,880
and it will decap remove the

1263
01:00:30,880 --> 01:00:35,200
iom data and it may take a copy of the

1264
01:00:35,200 --> 01:00:38,079
packet along with the iom data for

1265
01:00:38,079 --> 01:00:39,839
further processing

1266
01:00:39,839 --> 01:00:41,680
which could include telemetry for

1267
01:00:41,680 --> 01:00:43,599
example

1268
01:00:43,599 --> 01:00:47,040
and after the cap removing the iom

1269
01:00:47,040 --> 01:00:49,760
label as well as data fills it will

1270
01:00:49,760 --> 01:00:50,480
forward the

1271
01:00:50,480 --> 01:00:54,839
packet just like any data packet it

1272
01:00:54,839 --> 01:00:56,720
processes

1273
01:00:56,720 --> 01:00:59,520
next slide please

1274
01:01:02,960 --> 01:01:06,640
so in case of srm pls there is a label

1275
01:01:06,640 --> 01:01:07,839
stack

1276
01:01:07,839 --> 01:01:11,040
this was to answer a question where does

1277
01:01:11,040 --> 01:01:12,240
the path segment

1278
01:01:12,240 --> 01:01:15,599
go in this case so path segment would be

1279
01:01:15,599 --> 01:01:18,640
added just before the iom

1280
01:01:18,640 --> 01:01:21,280
indicator label values

1281
01:01:21,280 --> 01:01:23,040
[Music]

1282
01:01:23,040 --> 01:01:25,119
to write the path segment can identify

1283
01:01:25,119 --> 01:01:27,359
the path but it can still be used along

1284
01:01:27,359 --> 01:01:28,160
with

1285
01:01:28,160 --> 01:01:32,000
iom headers

1286
01:01:32,000 --> 01:01:34,960
and next slide please

1287
01:01:37,359 --> 01:01:40,160
and next slide

1288
01:01:41,599 --> 01:01:45,280
so the hub by hop iom uh again um

1289
01:01:45,280 --> 01:01:48,240
there are uh three methods uh this one

1290
01:01:48,240 --> 01:01:49,359
shows an example

1291
01:01:49,359 --> 01:01:52,720
of uh using um one

1292
01:01:52,720 --> 01:01:56,480
case with iom fec label

1293
01:01:56,480 --> 01:01:58,640
this would be the top label on the

1294
01:01:58,640 --> 01:02:00,480
incoming packet

1295
01:02:00,480 --> 01:02:03,440
this is one example and we will see

1296
01:02:03,440 --> 01:02:04,880
there are three methods as well

1297
01:02:04,880 --> 01:02:07,839
in the next slide please

1298
01:02:11,839 --> 01:02:14,480
so uh in the just like the edge to edge

1299
01:02:14,480 --> 01:02:15,680
case uh there are three

1300
01:02:15,680 --> 01:02:18,160
allocation methods uh one is being uh

1301
01:02:18,160 --> 01:02:18,960
the standard

1302
01:02:18,960 --> 01:02:22,400
um extended special purpose label using

1303
01:02:22,400 --> 01:02:25,520
with extension label 15

1304
01:02:25,520 --> 01:02:28,400
there can be a global label allocated by

1305
01:02:28,400 --> 01:02:29,599
a controller

1306
01:02:29,599 --> 01:02:33,920
or an fec label iom label

1307
01:02:33,920 --> 01:02:36,799
advertised by the intermediate and decap

1308
01:02:36,799 --> 01:02:37,920
nodes

1309
01:02:37,920 --> 01:02:39,760
in this case the label is carried at the

1310
01:02:39,760 --> 01:02:41,359
top of the label stack

1311
01:02:41,359 --> 01:02:43,839
whereas in the the previous uh the other

1312
01:02:43,839 --> 01:02:44,640
two methods

1313
01:02:44,640 --> 01:02:47,839
they are at the bottom of it next slide

1314
01:02:47,839 --> 01:02:50,078
please

1315
01:02:51,520 --> 01:02:53,599
this is a comparison of the three

1316
01:02:53,599 --> 01:02:56,160
methods uh pros and cons

1317
01:02:56,160 --> 01:02:59,440
um in case of number one

1318
01:02:59,440 --> 01:03:01,359
the special label you have two extra

1319
01:03:01,359 --> 01:03:04,079
labels the global label would be one

1320
01:03:04,079 --> 01:03:07,440
and in case of uh the fec label

1321
01:03:07,440 --> 01:03:10,880
uh it's just the regular label

1322
01:03:10,880 --> 01:03:14,839
with iom enabled so no extra

1323
01:03:14,839 --> 01:03:17,839
label on the stack

1324
01:03:17,839 --> 01:03:19,599
in case of number one and two they are

1325
01:03:19,599 --> 01:03:22,960
at the bottom number three is at the top

1326
01:03:22,960 --> 01:03:26,799
um the just the one one uh

1327
01:03:26,799 --> 01:03:28,880
selling point about number three is that

1328
01:03:28,880 --> 01:03:30,480
um

1329
01:03:30,480 --> 01:03:32,880
you if you have a different traffic one

1330
01:03:32,880 --> 01:03:35,280
with iom enabled one without

1331
01:03:35,280 --> 01:03:38,960
uh you may have different free entry um

1332
01:03:38,960 --> 01:03:44,000
that that needs to be processed

1333
01:03:44,000 --> 01:03:46,960
and next slide please

1334
01:03:51,839 --> 01:03:54,319
now we will skip this there is no iom

1335
01:03:54,319 --> 01:03:55,760
processing at the

1336
01:03:55,760 --> 01:03:58,079
sorry there is extra iom processing on

1337
01:03:58,079 --> 01:04:00,559
the mid notes

1338
01:04:00,559 --> 01:04:02,640
but this is only different next slide

1339
01:04:02,640 --> 01:04:04,960
please

1340
01:04:08,799 --> 01:04:12,000
next slide we

1341
01:04:12,000 --> 01:04:13,359
can go to the next slide with the

1342
01:04:13,359 --> 01:04:15,759
picture

1343
01:04:16,240 --> 01:04:19,119
so uh in case of uh so this is uh being

1344
01:04:19,119 --> 01:04:20,079
discussed uh

1345
01:04:20,079 --> 01:04:23,359
and uh so there are some um

1346
01:04:23,359 --> 01:04:26,960
other proposals for this

1347
01:04:27,280 --> 01:04:31,200
issue as well so in the in the draft

1348
01:04:31,200 --> 01:04:35,919
there is a case with a pseudo-wire label

1349
01:04:36,079 --> 01:04:39,039
packet that exists today for example how

1350
01:04:39,039 --> 01:04:40,880
would iom would be carried

1351
01:04:40,880 --> 01:04:42,400
so it would be carried between the

1352
01:04:42,400 --> 01:04:45,280
pseudo-wire label and the

1353
01:04:45,280 --> 01:04:48,559
control word the iom label would be at

1354
01:04:48,559 --> 01:04:50,000
the bottom

1355
01:04:50,000 --> 01:04:53,599
so this way any

1356
01:04:53,599 --> 01:04:57,119
intermediate node can easily find the

1357
01:04:57,119 --> 01:04:59,920
indicator label at the bottom with eos 1

1358
01:04:59,920 --> 01:05:01,520
and do the

1359
01:05:01,520 --> 01:05:04,640
the processing for iom

1360
01:05:04,640 --> 01:05:07,440
iom processing can be have heavy it can

1361
01:05:07,440 --> 01:05:09,119
be on every node

1362
01:05:09,119 --> 01:05:13,200
uh so it's it's a well-known location um

1363
01:05:13,200 --> 01:05:14,960
but it does get removed so once you

1364
01:05:14,960 --> 01:05:17,440
remove iom indicator label and the data

1365
01:05:17,440 --> 01:05:18,240
fills

1366
01:05:18,240 --> 01:05:20,720
on the dcap node and then you have your

1367
01:05:20,720 --> 01:05:23,039
sudo wire label and control word

1368
01:05:23,039 --> 01:05:25,359
in the packet and then you continue uh

1369
01:05:25,359 --> 01:05:27,440
the regular processing

1370
01:05:27,440 --> 01:05:30,880
the labels stay where the labels

1371
01:05:30,880 --> 01:05:33,839
are today in the mpls header and the

1372
01:05:33,839 --> 01:05:35,520
metadata stay together

1373
01:05:35,520 --> 01:05:38,720
where the metadatas are there today

1374
01:05:38,720 --> 01:05:40,960
so there is no change in the

1375
01:05:40,960 --> 01:05:42,799
architecture for mpls

1376
01:05:42,799 --> 01:05:46,400
this should not break any

1377
01:05:46,400 --> 01:05:47,920
[Music]

1378
01:05:47,920 --> 01:05:52,720
any network uh assuming that iom is

1379
01:05:52,720 --> 01:05:53,920
supported and enabled

1380
01:05:53,920 --> 01:05:59,039
on the node next slide please

1381
01:06:02,880 --> 01:06:05,920
this is an example with um

1382
01:06:05,920 --> 01:06:09,839
another control word sorry another

1383
01:06:09,839 --> 01:06:13,200
gsch type

1384
01:06:13,280 --> 01:06:16,319
in this case is the same idea we have

1385
01:06:16,319 --> 01:06:16,880
also the

1386
01:06:16,880 --> 01:06:19,440
label or indicator label at the bottom

1387
01:06:19,440 --> 01:06:20,079
you process

1388
01:06:20,079 --> 01:06:23,839
iom um and then remove it from the stack

1389
01:06:23,839 --> 01:06:24,960
and

1390
01:06:24,960 --> 01:06:28,240
what you have is another

1391
01:06:28,240 --> 01:06:31,680
gsch channel these are metadata can be

1392
01:06:31,680 --> 01:06:32,079
seen

1393
01:06:32,079 --> 01:06:35,440
like tlvs so you know uh the type you

1394
01:06:35,440 --> 01:06:37,280
know the land for it and you can just

1395
01:06:37,280 --> 01:06:39,119
find the next metadata

1396
01:06:39,119 --> 01:06:42,160
uh and uh there is one to one mapping

1397
01:06:42,160 --> 01:06:43,119
between the label

1398
01:06:43,119 --> 01:06:46,720
and the metadata anyway so there is no

1399
01:06:46,720 --> 01:06:49,359
ambiguity

1400
01:06:50,559 --> 01:06:53,359
next slide please

1401
01:06:55,839 --> 01:06:58,480
welcome your comments and suggestions um

1402
01:06:58,480 --> 01:07:01,520
we will have some more discussions um

1403
01:07:01,520 --> 01:07:04,480
uh on friday as well on the last topic

1404
01:07:04,480 --> 01:07:05,119
uh

1405
01:07:05,119 --> 01:07:08,160
with multiple uh uh

1406
01:07:08,160 --> 01:07:11,440
gsch and control word um and

1407
01:07:11,440 --> 01:07:13,599
we are requesting working adoption for

1408
01:07:13,599 --> 01:07:14,720
this

1409
01:07:14,720 --> 01:07:18,640
document thank you

1410
01:07:18,640 --> 01:07:21,440
thank you rakesh nick anyone in the

1411
01:07:21,440 --> 01:07:22,799
queue

1412
01:07:22,799 --> 01:07:25,680
let me add myself as well yeah it is in

1413
01:07:25,680 --> 01:07:29,039
the queue

1414
01:07:29,039 --> 01:07:33,520
okay go ahead uh you can hear me

1415
01:07:33,520 --> 01:07:38,400
yeah yeah i just wanted a quick um

1416
01:07:38,400 --> 01:07:41,359
pointer forward to the draft i have

1417
01:07:41,359 --> 01:07:42,880
below

1418
01:07:42,880 --> 01:07:45,680
regarding the special purpose labels

1419
01:07:45,680 --> 01:07:47,520
being used in this draft actually it

1420
01:07:47,520 --> 01:07:49,440
applies to a few other

1421
01:07:49,440 --> 01:07:52,720
drafts that have been presented today so

1422
01:07:52,720 --> 01:07:56,559
i would ask people to wait for those

1423
01:07:56,559 --> 01:07:58,079
slides and

1424
01:07:58,079 --> 01:08:01,039
and understand what the proposal is and

1425
01:08:01,039 --> 01:08:02,799
how that changes their requests

1426
01:08:02,799 --> 01:08:06,319
for special purpose labels

1427
01:08:06,319 --> 01:08:12,319
thanks thank you thanks again

1428
01:08:15,599 --> 01:08:18,319
my question rakesh is about the uh edge

1429
01:08:18,319 --> 01:08:18,960
to edge

1430
01:08:18,960 --> 01:08:22,319
uh special purpose label

1431
01:08:22,319 --> 01:08:26,000
since you're going to um assign a new

1432
01:08:26,000 --> 01:08:27,040
gash type

1433
01:08:27,040 --> 01:08:30,399
for uh for this iom

1434
01:08:30,399 --> 01:08:33,520
metadata um why not use

1435
01:08:33,520 --> 01:08:36,719
gal the es

1436
01:08:36,719 --> 01:08:39,759
the already allocated special purpose

1437
01:08:39,759 --> 01:08:40,719
label

1438
01:08:40,719 --> 01:08:44,560
uh it it it is the one that indicates

1439
01:08:44,560 --> 01:08:45,359
there's a

1440
01:08:45,359 --> 01:08:48,560
a gash following um

1441
01:08:48,560 --> 01:08:52,158
so um the way it's uh the

1442
01:08:52,158 --> 01:08:55,359
gal on the d-cap

1443
01:08:55,359 --> 01:08:58,880
node will punt the packet

1444
01:08:58,880 --> 01:09:01,520
and in this case we are forwarding the

1445
01:09:01,520 --> 01:09:02,640
packet

1446
01:09:02,640 --> 01:09:05,198
this is carried by data packet so

1447
01:09:05,198 --> 01:09:07,520
packets get forwarded downstream

1448
01:09:07,520 --> 01:09:10,319
whereas in case of gal which is uh used

1449
01:09:10,319 --> 01:09:10,880
for

1450
01:09:10,880 --> 01:09:13,759
oem packets they get terminated on the

1451
01:09:13,759 --> 01:09:14,479
node

1452
01:09:14,479 --> 01:09:17,679
so that's how the gal is defined but

1453
01:09:17,679 --> 01:09:21,040
definitely if

1454
01:09:21,040 --> 01:09:22,560
i mean there is existing network with

1455
01:09:22,560 --> 01:09:24,560
that behavior uh

1456
01:09:24,560 --> 01:09:27,279
we could change update the rfc but there

1457
01:09:27,279 --> 01:09:28,880
is an implication on the existing

1458
01:09:28,880 --> 01:09:30,479
network

1459
01:09:30,479 --> 01:09:34,640
okay okay thank you um

1460
01:09:34,640 --> 01:09:36,960
i guess you are going to consider the

1461
01:09:36,960 --> 01:09:38,799
case or you already considered the case

1462
01:09:38,799 --> 01:09:39,279
of

1463
01:09:39,279 --> 01:09:42,640
presence of a of a gal uh

1464
01:09:42,640 --> 01:09:46,479
within the stack and uh

1465
01:09:46,479 --> 01:09:48,960
is there any order you're dictating and

1466
01:09:48,960 --> 01:09:50,799
processing the

1467
01:09:50,799 --> 01:09:54,080
the payload of mpls

1468
01:09:54,080 --> 01:09:57,840
normally then follows the gal

1469
01:09:57,840 --> 01:10:00,400
immediately

1470
01:10:02,400 --> 01:10:04,880
yeah i presume you are going to shuffle

1471
01:10:04,880 --> 01:10:07,520
around things

1472
01:10:07,920 --> 01:10:09,920
you need to uh need to understand the

1473
01:10:09,920 --> 01:10:12,480
requirement because the

1474
01:10:12,480 --> 01:10:16,000
iom is carried by the data traffic

1475
01:10:16,000 --> 01:10:19,199
and gal is carried by the oem

1476
01:10:19,199 --> 01:10:22,400
packets so you don't have um at least

1477
01:10:22,400 --> 01:10:24,000
typically you don't have a case where

1478
01:10:24,000 --> 01:10:25,199
you have both

1479
01:10:25,199 --> 01:10:28,640
oem and data there's a different uh

1480
01:10:28,640 --> 01:10:31,120
traffic right so you don't have that

1481
01:10:31,120 --> 01:10:32,560
case but if there is

1482
01:10:32,560 --> 01:10:34,880
something some scenario uh we can talk

1483
01:10:34,880 --> 01:10:37,280
about it

1484
01:10:38,560 --> 01:10:41,840
okay i don't have a case yet but uh

1485
01:10:41,840 --> 01:10:45,199
i i don't think we can just uh assume it

1486
01:10:45,199 --> 01:10:46,320
will never happen

1487
01:10:46,320 --> 01:10:49,280
unless uh you you state that in your

1488
01:10:49,280 --> 01:10:50,960
proposal

1489
01:10:50,960 --> 01:10:55,360
explicitly state it should not must not

1490
01:10:55,360 --> 01:10:58,719
yeah we can we can say must not and

1491
01:10:58,719 --> 01:11:01,920
because it's gal is meant for oem

1492
01:11:01,920 --> 01:11:05,199
and this is meant for a data packet so

1493
01:11:05,199 --> 01:11:07,360
we can

1494
01:11:07,360 --> 01:11:12,640
we can definitely state that

1495
01:11:12,640 --> 01:11:15,280
okay thank you uh rakesh we'll follow up

1496
01:11:15,280 --> 01:11:17,440
on the list

1497
01:11:17,440 --> 01:11:20,080
thanks tonic

1498
01:11:21,920 --> 01:11:26,000
uh there's no one else in the queue

1499
01:11:26,000 --> 01:11:29,280
we'll move on to the next presentation

1500
01:11:29,280 --> 01:11:34,080
thank you rakesh next we have

1501
01:11:34,880 --> 01:11:40,320
g dong for kvm vtm id and mpls

1502
01:11:40,320 --> 01:11:42,640
yeah hi derek hi everyone can you hear

1503
01:11:42,640 --> 01:11:43,679
me

1504
01:11:43,679 --> 01:11:47,840
yeah yeah okay okay

1505
01:11:47,840 --> 01:11:50,480
this is jaedong and i'm going to present

1506
01:11:50,480 --> 01:11:51,199
this

1507
01:11:51,199 --> 01:11:54,560
topic uh kareem carrying waiting id in

1508
01:11:54,560 --> 01:11:56,560
the npr's package

1509
01:11:56,560 --> 01:11:59,520
okay next slide please

1510
01:12:01,280 --> 01:12:03,520
here are some background about this work

1511
01:12:03,520 --> 01:12:04,800
um

1512
01:12:04,800 --> 01:12:07,760
the term vtn was introduced in the

1513
01:12:07,760 --> 01:12:09,920
enhanced living draft in the t smoking

1514
01:12:09,920 --> 01:12:10,719
group

1515
01:12:10,719 --> 01:12:13,120
which is uh basically a virtual

1516
01:12:13,120 --> 01:12:14,000
underlayment

1517
01:12:14,000 --> 01:12:17,120
network with customized topology and a

1518
01:12:17,120 --> 01:12:18,000
set of

1519
01:12:18,000 --> 01:12:21,040
dedicated or shared network resources

1520
01:12:21,040 --> 01:12:24,560
and obtained can be used as the underlay

1521
01:12:24,560 --> 01:12:28,320
for one or group vpn services as shown

1522
01:12:28,320 --> 01:12:31,520
in the picture in the right side we can

1523
01:12:31,520 --> 01:12:32,239
build

1524
01:12:32,239 --> 01:12:34,960
multiple vtns based on a shared physical

1525
01:12:34,960 --> 01:12:36,239
network and

1526
01:12:36,239 --> 01:12:39,199
hvtn can be used to carry one or a group

1527
01:12:39,199 --> 01:12:41,120
of vpn overlay services

1528
01:12:41,120 --> 01:12:44,880
and overlay vpn and together with vpns

1529
01:12:44,880 --> 01:12:47,120
you provide vpn services to the

1530
01:12:47,120 --> 01:12:48,840
customers

1531
01:12:48,840 --> 01:12:51,679
and in order to uh

1532
01:12:51,679 --> 01:12:54,239
guide the package to be steered uh to

1533
01:12:54,239 --> 01:12:56,080
the set of network resources

1534
01:12:56,080 --> 01:12:58,800
allocated to the specific vtn the

1535
01:12:58,800 --> 01:13:01,040
information of the associated vtn needs

1536
01:13:01,040 --> 01:13:02,159
to be carried in

1537
01:13:02,159 --> 01:13:05,199
the packet header and the vte

1538
01:13:05,199 --> 01:13:07,040
information needs to be processed

1539
01:13:07,040 --> 01:13:09,360
along the path on each hub to ensure

1540
01:13:09,360 --> 01:13:11,199
that the consistency

1541
01:13:11,199 --> 01:13:13,600
consistent packet forwarding uh with the

1542
01:13:13,600 --> 01:13:14,880
median context can be

1543
01:13:14,880 --> 01:13:18,000
assured so in this document uh

1544
01:13:18,000 --> 01:13:20,080
we propose a mechanism to carry the

1545
01:13:20,080 --> 01:13:21,679
waiting identifier and

1546
01:13:21,679 --> 01:13:23,360
that is related information in the

1547
01:13:23,360 --> 01:13:24,960
ampers package

1548
01:13:24,960 --> 01:13:28,159
this mechanism is applicable to both sr

1549
01:13:28,159 --> 01:13:28,800
mpls

1550
01:13:28,800 --> 01:13:32,080
and the traditional ampers networks

1551
01:13:32,080 --> 01:13:34,800
next slide please

1552
01:13:39,520 --> 01:13:42,239
okay this page we summarize the

1553
01:13:42,239 --> 01:13:44,480
mechanism in this document

1554
01:13:44,480 --> 01:13:46,800
basically a new header called waiting

1555
01:13:46,800 --> 01:13:47,920
header is

1556
01:13:47,920 --> 01:13:50,320
introduced to carry the waiting id and

1557
01:13:50,320 --> 01:13:52,320
the related information

1558
01:13:52,320 --> 01:13:54,719
uh this this header follows the ampere's

1559
01:13:54,719 --> 01:13:55,520
label stack

1560
01:13:55,520 --> 01:13:57,840
and precise header and pillows of the

1561
01:13:57,840 --> 01:14:00,159
upper layers

1562
01:14:00,159 --> 01:14:02,719
the existence of this vdn header is

1563
01:14:02,719 --> 01:14:03,679
identified by

1564
01:14:03,679 --> 01:14:06,880
a special purpose label called a vhi

1565
01:14:06,880 --> 01:14:09,840
within header indicator and the format

1566
01:14:09,840 --> 01:14:10,800
of this

1567
01:14:10,800 --> 01:14:14,000
vtn header is shown in this picture we

1568
01:14:14,000 --> 01:14:14,719
need a

1569
01:14:14,719 --> 01:14:17,760
nibble with the value 01 ohm

1570
01:14:17,760 --> 01:14:20,080
to ensure that it is not interpreted as

1571
01:14:20,080 --> 01:14:23,360
an ip header or ach or control world

1572
01:14:23,360 --> 01:14:26,000
the lens field is used to identify the

1573
01:14:26,000 --> 01:14:27,040
length of the header

1574
01:14:27,040 --> 01:14:31,679
in 32 base words and then we have this

1575
01:14:31,679 --> 01:14:34,480
flux and reserved fields after that we

1576
01:14:34,480 --> 01:14:37,199
have the within i had a vtn identifier

1577
01:14:37,199 --> 01:14:38,640
which is a for octet

1578
01:14:38,640 --> 01:14:42,000
identifier we may also carry some

1579
01:14:42,000 --> 01:14:45,040
optional information about the services

1580
01:14:45,040 --> 01:14:46,800
carried by this region

1581
01:14:46,800 --> 01:14:49,840
this lens can be variable for example in

1582
01:14:49,840 --> 01:14:52,239
the context of 5g network slicing this

1583
01:14:52,239 --> 01:14:54,840
can be the

1584
01:14:54,840 --> 01:14:59,199
ssa the 5g network slices

1585
01:14:59,199 --> 01:15:02,080
okay next slide

1586
01:15:05,679 --> 01:15:07,920
here are the procedures of this waiting

1587
01:15:07,920 --> 01:15:08,840
header

1588
01:15:08,840 --> 01:15:13,040
processing on the ingress node

1589
01:15:13,040 --> 01:15:15,920
it can encapsulate the written header

1590
01:15:15,920 --> 01:15:18,000
together with mps label stack

1591
01:15:18,000 --> 01:15:20,000
according to the traffic classification

1592
01:15:20,000 --> 01:15:21,760
or mapping policy

1593
01:15:21,760 --> 01:15:24,960
and the transit nodes and each node

1594
01:15:24,960 --> 01:15:27,280
which can support this vtn

1595
01:15:27,280 --> 01:15:29,920
processing will look for the vhl in the

1596
01:15:29,920 --> 01:15:30,880
label stack

1597
01:15:30,880 --> 01:15:34,400
and if there's a vhl it's forwarding it

1598
01:15:34,400 --> 01:15:36,560
will be based on both the top label and

1599
01:15:36,560 --> 01:15:38,880
the vtn header

1600
01:15:38,880 --> 01:15:41,040
the top ampere's label will be used for

1601
01:15:41,040 --> 01:15:42,880
to determine the next hop

1602
01:15:42,880 --> 01:15:45,440
and rating identifier will be used to

1603
01:15:45,440 --> 01:15:47,520
identify the local set of resources

1604
01:15:47,520 --> 01:15:49,040
allocated to the median for

1605
01:15:49,040 --> 01:15:52,080
processing this packet and a service

1606
01:15:52,080 --> 01:15:53,920
differentiator may be used

1607
01:15:53,920 --> 01:15:55,920
to provide some fine grained

1608
01:15:55,920 --> 01:15:58,719
differentiation and processing

1609
01:15:58,719 --> 01:16:02,320
on the egress node the vh15 header and

1610
01:16:02,320 --> 01:16:02,640
the

1611
01:16:02,640 --> 01:16:07,199
vhl should be popped and to avoid this

1612
01:16:07,199 --> 01:16:09,040
information link to the

1613
01:16:09,040 --> 01:16:14,080
another domain okay next slide

1614
01:16:18,080 --> 01:16:20,560
some considerations about the capability

1615
01:16:20,560 --> 01:16:24,239
advertisement and the negotiation

1616
01:16:24,239 --> 01:16:26,080
before inserting this header into the

1617
01:16:26,080 --> 01:16:27,840
package the ingress node needs some

1618
01:16:27,840 --> 01:16:28,560
information

1619
01:16:28,560 --> 01:16:31,840
about whether the nodes including the

1620
01:16:31,840 --> 01:16:33,600
egress node and the transient nodes

1621
01:16:33,600 --> 01:16:34,560
along this path

1622
01:16:34,560 --> 01:16:36,080
can process this with the header

1623
01:16:36,080 --> 01:16:38,400
properly

1624
01:16:38,400 --> 01:16:40,400
so this can we need some capability

1625
01:16:40,400 --> 01:16:42,080
advertisement and the negotiation

1626
01:16:42,080 --> 01:16:43,199
mechanism

1627
01:16:43,199 --> 01:16:46,840
but this will be provided in the future

1628
01:16:46,840 --> 01:16:48,480
version

1629
01:16:48,480 --> 01:16:51,040
next page

1630
01:16:53,360 --> 01:16:56,400
okay i think this is a straightforward

1631
01:16:56,400 --> 01:16:58,960
extension

1632
01:16:59,280 --> 01:17:00,800
we would appreciate comments and

1633
01:17:00,800 --> 01:17:03,280
feedbacks from the working group

1634
01:17:03,280 --> 01:17:07,440
thank you thank you g

1635
01:17:07,440 --> 01:17:10,000
so in the queue uh first tarik and then

1636
01:17:10,000 --> 01:17:11,120
stewart

1637
01:17:11,120 --> 01:17:13,679
oh okay i'm still in the queue um i do

1638
01:17:13,679 --> 01:17:14,800
have a question but i

1639
01:17:14,800 --> 01:17:19,440
i it wasn't meant that i am in the queue

1640
01:17:19,440 --> 01:17:22,560
i'll take advantage of that

1641
01:17:22,560 --> 01:17:25,600
my question is related to the presence

1642
01:17:25,600 --> 01:17:29,199
after the end of stack the the vtn id

1643
01:17:29,199 --> 01:17:33,199
what if the the transit node

1644
01:17:33,199 --> 01:17:38,639
cannot read beyond the end of stack

1645
01:17:39,360 --> 01:17:42,840
did you any considerations about this

1646
01:17:42,840 --> 01:17:44,159
problem

1647
01:17:44,159 --> 01:17:47,520
yeah i i think that belongs to the

1648
01:17:47,520 --> 01:17:49,840
capability advertisement

1649
01:17:49,840 --> 01:17:52,880
which each node need to

1650
01:17:52,880 --> 01:17:54,960
advertise whether it has this capability

1651
01:17:54,960 --> 01:17:56,000
to process this

1652
01:17:56,000 --> 01:17:58,880
uh uh making a header after the label

1653
01:17:58,880 --> 01:18:00,800
stack

1654
01:18:00,800 --> 01:18:04,159
of that what do you mean no i mean if um

1655
01:18:04,159 --> 01:18:05,760
you know there's something called

1656
01:18:05,760 --> 01:18:08,000
readable depth

1657
01:18:08,000 --> 01:18:11,440
and and if i cannot read beyond

1658
01:18:11,440 --> 01:18:13,840
the readable depth i cannot reach the

1659
01:18:13,840 --> 01:18:15,440
vtn id

1660
01:18:15,440 --> 01:18:18,960
then there are other proposals g

1661
01:18:18,960 --> 01:18:22,320
where the you know the id that this this

1662
01:18:22,320 --> 01:18:25,600
slice id or vtn id slice aggregate id we

1663
01:18:25,600 --> 01:18:26,320
call it

1664
01:18:26,320 --> 01:18:29,679
is uh is within the label stack

1665
01:18:29,679 --> 01:18:33,440
not after the end of labor stack so

1666
01:18:33,440 --> 01:18:35,440
yeah i guess you know maybe we should

1667
01:18:35,440 --> 01:18:37,440
think more about the presence where do

1668
01:18:37,440 --> 01:18:38,640
you want to put this

1669
01:18:38,640 --> 01:18:41,679
this identifier is it in the stack or

1670
01:18:41,679 --> 01:18:43,199
after the end of stack

1671
01:18:43,199 --> 01:18:44,880
and what are the implications in both

1672
01:18:44,880 --> 01:18:47,040
cases

1673
01:18:47,040 --> 01:18:49,920
yeah i agree there are several candidate

1674
01:18:49,920 --> 01:18:51,520
positions to

1675
01:18:51,520 --> 01:18:54,320
put this information in the packet and

1676
01:18:54,320 --> 01:18:54,960
actually

1677
01:18:54,960 --> 01:18:58,159
there uh each has its pros and cons

1678
01:18:58,159 --> 01:19:01,360
such as if we use an exten like a header

1679
01:19:01,360 --> 01:19:03,679
after the label stack we have more

1680
01:19:03,679 --> 01:19:05,040
flexibility

1681
01:19:05,040 --> 01:19:08,000
to define format and the lens and maybe

1682
01:19:08,000 --> 01:19:09,840
it can be also variable lens

1683
01:19:09,840 --> 01:19:13,360
this is some benefit of this also

1684
01:19:13,360 --> 01:19:16,400
as you mentioned there's some cost we

1685
01:19:16,400 --> 01:19:17,040
need to

1686
01:19:17,040 --> 01:19:21,760
consider so each one we may need some

1687
01:19:21,760 --> 01:19:23,360
more discussion about all these

1688
01:19:23,360 --> 01:19:25,040
candidates

1689
01:19:25,040 --> 01:19:27,440
okay

1690
01:19:28,800 --> 01:19:32,000
anyone else nick in the queue yes

1691
01:19:32,000 --> 01:19:32,560
stewart

1692
01:19:32,560 --> 01:19:37,040
and then jeff

1693
01:19:37,040 --> 01:19:40,239
okay i'll remove myself then uh

1694
01:19:40,239 --> 01:19:45,519
okay stephen please go ahead

1695
01:19:49,520 --> 01:19:52,960
we can't hear you stewart

1696
01:19:59,360 --> 01:20:01,360
i'll type it in the oh it's working this

1697
01:20:01,360 --> 01:20:02,960
time isn't it i can

1698
01:20:02,960 --> 01:20:05,120
i can hear you now thank you sorry about

1699
01:20:05,120 --> 01:20:06,320
that right

1700
01:20:06,320 --> 01:20:08,960
um so we need to add this to the long

1701
01:20:08,960 --> 01:20:09,520
list

1702
01:20:09,520 --> 01:20:12,960
of um metadata

1703
01:20:12,960 --> 01:20:16,239
after the stack uh which

1704
01:20:16,239 --> 01:20:18,719
of which there seems to be every time i

1705
01:20:18,719 --> 01:20:20,719
look in the mpns area there seems to be

1706
01:20:20,719 --> 01:20:22,320
another one so we need to add that to

1707
01:20:22,320 --> 01:20:23,679
the list to decide what we're going to

1708
01:20:23,679 --> 01:20:25,280
do as a

1709
01:20:25,280 --> 01:20:27,199
as a community about this and that's

1710
01:20:27,199 --> 01:20:28,480
part of the reason for the friday

1711
01:20:28,480 --> 01:20:29,600
discussion

1712
01:20:29,600 --> 01:20:31,920
but i would add another point which is

1713
01:20:31,920 --> 01:20:33,120
um

1714
01:20:33,120 --> 01:20:36,880
this this sequesters um zero zero one

1715
01:20:36,880 --> 01:20:37,440
zero

1716
01:20:37,440 --> 01:20:40,560
after the uh after the stack

1717
01:20:40,560 --> 01:20:43,600
now many years ago uh

1718
01:20:43,600 --> 01:20:45,520
i would remind people that this aliases

1719
01:20:45,520 --> 01:20:47,520
with the ipversion space

1720
01:20:47,520 --> 01:20:50,480
and many years ago i strike as uh

1721
01:20:50,480 --> 01:20:53,120
powell's chair or suit pwe3 chair

1722
01:20:53,120 --> 01:20:55,120
i struck an agreement with the internet

1723
01:20:55,120 --> 01:20:57,440
area that we we were taking two of them

1724
01:20:57,440 --> 01:20:59,360
zero and one and we wouldn't take any

1725
01:20:59,360 --> 01:21:01,199
more i see that

1726
01:21:01,199 --> 01:21:03,520
i think beer has taken another one i

1727
01:21:03,520 --> 01:21:05,600
really think we need a discussion within

1728
01:21:05,600 --> 01:21:09,120
about um which of these we can safely

1729
01:21:09,120 --> 01:21:12,320
take in order not to

1730
01:21:12,320 --> 01:21:17,759
clip the wings of the ip designers

1731
01:21:18,639 --> 01:21:22,000
yeah thank you stuart for your useful

1732
01:21:22,000 --> 01:21:23,520
information i didn't

1733
01:21:23,520 --> 01:21:28,960
realize that kind of conversation before

1734
01:21:28,960 --> 01:21:32,000
it was many many years ago and it is

1735
01:21:32,000 --> 01:21:35,679
because um that that zero zero

1736
01:21:35,679 --> 01:21:38,639
uh the four zeros and four zeros ones

1737
01:21:38,639 --> 01:21:38,960
are

1738
01:21:38,960 --> 01:21:41,440
ip versions in the original definition

1739
01:21:41,440 --> 01:21:42,080
of

1740
01:21:42,080 --> 01:21:44,639
mpls so we have to be careful not to

1741
01:21:44,639 --> 01:21:46,639
take any more of them than we absolutely

1742
01:21:46,639 --> 01:21:48,880
need

1743
01:21:49,120 --> 01:21:56,080
okay yeah understood

1744
01:21:56,080 --> 01:21:59,520
jeff you are next hey uh

1745
01:21:59,520 --> 01:22:01,280
i would like to re-emphasize the

1746
01:22:01,280 --> 01:22:02,719
importance of

1747
01:22:02,719 --> 01:22:06,320
considering boss and url uld is supposed

1748
01:22:06,320 --> 01:22:07,040
to be

1749
01:22:07,040 --> 01:22:09,280
used within label stock there's a number

1750
01:22:09,280 --> 01:22:10,800
of implementations who would look at

1751
01:22:10,800 --> 01:22:12,239
buzz beat

1752
01:22:12,239 --> 01:22:15,760
and skip processing right so

1753
01:22:15,760 --> 01:22:18,639
if your header is beyond your ld might

1754
01:22:18,639 --> 01:22:22,000
not represent what it is

1755
01:22:22,960 --> 01:22:25,360
yeah that need to be taken into

1756
01:22:25,360 --> 01:22:26,960
consideration yeah i

1757
01:22:26,960 --> 01:22:29,360
understand this thank you especially

1758
01:22:29,360 --> 01:22:31,280
given existing implementation

1759
01:22:31,280 --> 01:22:39,840
i mean i'll look for both yes yes

1760
01:22:41,520 --> 01:22:45,120
anyone else nick in the queue

1761
01:22:45,199 --> 01:22:49,120
no queue is empty okay thank you g

1762
01:22:49,120 --> 01:22:51,440
we will move on to the next presentation

1763
01:22:51,440 --> 01:22:52,719
then

1764
01:22:52,719 --> 01:22:56,639
uh in the next one uh i think we have

1765
01:22:56,639 --> 01:23:00,880
uh julian presenting using entropy label

1766
01:23:00,880 --> 01:23:04,880
for slice item hello everyone

1767
01:23:04,880 --> 01:23:07,199
i can hear you julian go ahead fly away

1768
01:23:07,199 --> 01:23:08,080
okay

1769
01:23:08,080 --> 01:23:11,600
thank you tarek so i'm julia mariek

1770
01:23:11,600 --> 01:23:14,080
proxing here for my colleague willow the

1771
01:23:14,080 --> 01:23:15,520
crane on

1772
01:23:15,520 --> 01:23:17,840
presenting this draft on behalf of the

1773
01:23:17,840 --> 01:23:20,639
set of coursers that you can

1774
01:23:20,639 --> 01:23:23,920
see here in the first slide so

1775
01:23:23,920 --> 01:23:27,679
can you move to the next slide please

1776
01:23:28,320 --> 01:23:31,920
okay so the idea here is to carry

1777
01:23:31,920 --> 01:23:35,760
new information within the mpls stack

1778
01:23:35,760 --> 01:23:38,880
and especially the

1779
01:23:38,880 --> 01:23:41,280
identifier that we could use for a slice

1780
01:23:41,280 --> 01:23:42,560
for

1781
01:23:42,560 --> 01:23:45,120
a configuration where we require some

1782
01:23:45,120 --> 01:23:46,840
network

1783
01:23:46,840 --> 01:23:49,520
slicing information

1784
01:23:49,520 --> 01:23:53,520
and this may look like a conflicting

1785
01:23:53,520 --> 01:23:56,719
purpose with the idea of limiting

1786
01:23:56,719 --> 01:23:59,679
the side steps of the mpls header the

1787
01:23:59,679 --> 01:24:01,120
number of

1788
01:24:01,120 --> 01:24:02,960
shim header that we use on a stack

1789
01:24:02,960 --> 01:24:04,400
especially in the context

1790
01:24:04,400 --> 01:24:07,520
of the second routing mpls

1791
01:24:07,520 --> 01:24:09,920
where we know that the number of labels

1792
01:24:09,920 --> 01:24:10,880
that we carry

1793
01:24:10,880 --> 01:24:13,679
on a given packet is a scarce resource

1794
01:24:13,679 --> 01:24:14,719
so

1795
01:24:14,719 --> 01:24:17,600
we'd like to balance between those both

1796
01:24:17,600 --> 01:24:18,639
principles

1797
01:24:18,639 --> 01:24:21,199
next please

1798
01:24:22,880 --> 01:24:28,239
so the idea here is to consider existing

1799
01:24:28,239 --> 01:24:30,639
fields that we already carry within the

1800
01:24:30,639 --> 01:24:32,320
impellers

1801
01:24:32,320 --> 01:24:35,520
header stack so

1802
01:24:35,520 --> 01:24:38,159
brief reminder on the entropy label

1803
01:24:38,159 --> 01:24:39,199
principle

1804
01:24:39,199 --> 01:24:43,199
it uses two label stack

1805
01:24:43,199 --> 01:24:45,360
the first one is the entropy label

1806
01:24:45,360 --> 01:24:47,520
indicator to mention there is something

1807
01:24:47,520 --> 01:24:51,199
special following and then the entropy

1808
01:24:51,199 --> 01:24:53,360
label itself carrying the

1809
01:24:53,360 --> 01:24:58,719
value to be hashed for uh balancing the

1810
01:24:58,719 --> 01:24:59,840
the traffic

1811
01:24:59,840 --> 01:25:02,560
of all the the network over multiple

1812
01:25:02,560 --> 01:25:03,840
paths

1813
01:25:03,840 --> 01:25:08,239
so we see in this

1814
01:25:08,239 --> 01:25:10,239
drawing that there are some fields here

1815
01:25:10,239 --> 01:25:12,080
especially the traffic class

1816
01:25:12,080 --> 01:25:15,199
on the ttl of the entropy label that may

1817
01:25:15,199 --> 01:25:17,360
be

1818
01:25:17,440 --> 01:25:21,679
useless until we associated some

1819
01:25:21,679 --> 01:25:27,840
semantics to those next place

1820
01:25:28,159 --> 01:25:31,120
so the idea of the draft is that we keep

1821
01:25:31,120 --> 01:25:31,520
the

1822
01:25:31,520 --> 01:25:35,679
ua usage associated to the entropy label

1823
01:25:35,679 --> 01:25:40,480
on the semantic of the entropy field

1824
01:25:40,480 --> 01:25:43,920
to support load balancing and hashing

1825
01:25:43,920 --> 01:25:45,920
over the network and transit

1826
01:25:45,920 --> 01:25:49,520
lsr over the network we still allocate

1827
01:25:49,520 --> 01:25:50,719
the entropy level

1828
01:25:50,719 --> 01:25:54,000
value from the ingress rsr and

1829
01:25:54,000 --> 01:25:57,360
push that label within the stack

1830
01:25:57,360 --> 01:26:01,120
and the idea here is to make use

1831
01:26:01,120 --> 01:26:04,480
of the bits from the entropy label

1832
01:26:04,480 --> 01:26:08,639
ttl which currently are defined as

1833
01:26:08,639 --> 01:26:12,639
a reserved field for future future uses

1834
01:26:12,639 --> 01:26:16,320
on the futures is now

1835
01:26:16,320 --> 01:26:20,239
and we propose to allocate some of those

1836
01:26:20,239 --> 01:26:23,360
ttl use bits to use use them

1837
01:26:23,360 --> 01:26:26,480
as flags and enable

1838
01:26:26,480 --> 01:26:28,159
different features depending on the

1839
01:26:28,159 --> 01:26:30,880
semantics we associate to those flats

1840
01:26:30,880 --> 01:26:33,520
next please

1841
01:26:35,040 --> 01:26:38,800
so to specify the first

1842
01:26:38,800 --> 01:26:42,960
proposal from this draft is that we

1843
01:26:42,960 --> 01:26:46,800
define the entropy labels dtl field

1844
01:26:46,800 --> 01:26:49,600
as a new entropy label control field

1845
01:26:49,600 --> 01:26:50,880
which is no more

1846
01:26:50,880 --> 01:26:55,210
just zeros but some flags

1847
01:26:55,210 --> 01:26:57,120
[Music]

1848
01:26:57,120 --> 01:27:00,239
eight flags it's byte actually so

1849
01:27:00,239 --> 01:27:03,440
on those flags maybe

1850
01:27:03,440 --> 01:27:06,239
user defined to be associated to some

1851
01:27:06,239 --> 01:27:08,000
specific

1852
01:27:08,000 --> 01:27:13,520
feature so the idea is to maximize the

1853
01:27:13,520 --> 01:27:16,880
reusability of those bits to

1854
01:27:16,880 --> 01:27:18,800
various purposes not necessarily

1855
01:27:18,800 --> 01:27:21,280
associate a fixed flag to a fixed

1856
01:27:21,280 --> 01:27:22,800
feature but

1857
01:27:22,800 --> 01:27:25,760
make it configurable to make sure that

1858
01:27:25,760 --> 01:27:26,880
we can

1859
01:27:26,880 --> 01:27:30,000
consistently configure various lsrs over

1860
01:27:30,000 --> 01:27:31,120
the network on

1861
01:27:31,120 --> 01:27:34,159
in most cases consider

1862
01:27:34,159 --> 01:27:37,199
the consistent configuration between the

1863
01:27:37,199 --> 01:27:38,400
ingress lsr

1864
01:27:38,400 --> 01:27:42,719
on the egress lsr on the

1865
01:27:42,719 --> 01:27:45,280
associate a given flag to a given

1866
01:27:45,280 --> 01:27:46,400
application

1867
01:27:46,400 --> 01:27:49,120
beside various implementations next

1868
01:27:49,120 --> 01:27:51,440
please

1869
01:27:54,960 --> 01:27:58,719
the second proposal that this draft is

1870
01:27:58,719 --> 01:28:00,960
suggesting is to make use of the the

1871
01:28:00,960 --> 01:28:02,560
previous

1872
01:28:02,560 --> 01:28:05,920
flag set and

1873
01:28:06,560 --> 01:28:09,600
define the first use case of those flags

1874
01:28:09,600 --> 01:28:12,560
which is a society to carry a slash

1875
01:28:12,560 --> 01:28:13,520
identifier

1876
01:28:13,520 --> 01:28:17,040
within the entropy label

1877
01:28:17,040 --> 01:28:20,159
field so the idea is to set

1878
01:28:20,159 --> 01:28:22,639
a given flag consistently between the

1879
01:28:22,639 --> 01:28:24,320
ingress and the egress

1880
01:28:24,320 --> 01:28:26,960
and allocate a value within the entropy

1881
01:28:26,960 --> 01:28:27,520
label

1882
01:28:27,520 --> 01:28:31,840
field that carries

1883
01:28:31,840 --> 01:28:35,360
the slash id in the the most significant

1884
01:28:35,360 --> 01:28:38,719
bit set and we use the remainder of the

1885
01:28:38,719 --> 01:28:42,000
entropy level field bits as a

1886
01:28:42,000 --> 01:28:44,800
usual value that is uh allocated by the

1887
01:28:44,800 --> 01:28:45,840
ingress node

1888
01:28:45,840 --> 01:28:48,800
the ingress lsr to enable the load

1889
01:28:48,800 --> 01:28:49,760
balancing

1890
01:28:49,760 --> 01:28:53,280
on hash feature so the idea here

1891
01:28:53,280 --> 01:28:56,400
is that it's

1892
01:28:56,400 --> 01:28:58,719
backward compatible with fixing

1893
01:28:58,719 --> 01:28:59,440
processing

1894
01:28:59,440 --> 01:29:02,880
of the entropy label

1895
01:29:02,880 --> 01:29:05,280
header so it doesn't break anything you

1896
01:29:05,280 --> 01:29:06,159
just make use of

1897
01:29:06,159 --> 01:29:10,639
unused unused bits

1898
01:29:10,639 --> 01:29:13,679
oh i lost the screen next please

1899
01:29:13,679 --> 01:29:15,920
okay

1900
01:29:20,320 --> 01:29:23,920
so a bit more detail of the processing

1901
01:29:23,920 --> 01:29:26,800
by the ingress lsr

1902
01:29:26,800 --> 01:29:29,360
the typical use case of the entropy

1903
01:29:29,360 --> 01:29:31,280
label is that the lsr

1904
01:29:31,280 --> 01:29:34,719
adding rest of the lsp or the pass

1905
01:29:34,719 --> 01:29:36,880
is in charge of allocating the value

1906
01:29:36,880 --> 01:29:38,880
within the entropy label

1907
01:29:38,880 --> 01:29:41,199
so here we just split the split the

1908
01:29:41,199 --> 01:29:42,159
field

1909
01:29:42,159 --> 01:29:45,920
and give a different semantic to the

1910
01:29:47,360 --> 01:29:49,920
most significant bits on lowest

1911
01:29:49,920 --> 01:29:52,800
significant bits of the entropy labels

1912
01:29:52,800 --> 01:29:53,760
filled

1913
01:29:53,760 --> 01:29:56,320
and we split it with two different

1914
01:29:56,320 --> 01:29:57,360
semantics but

1915
01:29:57,360 --> 01:30:00,560
globally it remains based on ingress

1916
01:30:00,560 --> 01:30:01,920
allocation

1917
01:30:01,920 --> 01:30:04,840
and we use one of the fields from the

1918
01:30:04,840 --> 01:30:06,639
former

1919
01:30:06,639 --> 01:30:10,080
unused ttl field as a

1920
01:30:10,080 --> 01:30:13,280
flag set to mark that

1921
01:30:13,280 --> 01:30:16,480
we are making use of the

1922
01:30:16,480 --> 01:30:20,080
slide id feature

1923
01:30:20,080 --> 01:30:22,639
next please

1924
01:30:25,679 --> 01:30:29,040
so uh for any transit lsr

1925
01:30:29,040 --> 01:30:30,639
one of the main advantages of this

1926
01:30:30,639 --> 01:30:32,960
proposal is that is that it doesn't

1927
01:30:32,960 --> 01:30:34,159
change anything

1928
01:30:34,159 --> 01:30:37,120
uh from the the processing of the field

1929
01:30:37,120 --> 01:30:38,000
uh

1930
01:30:38,000 --> 01:30:41,120
the entropy label is just treated as

1931
01:30:41,120 --> 01:30:44,080
an opaque field on which the harsh

1932
01:30:44,080 --> 01:30:45,840
feature may be performed

1933
01:30:45,840 --> 01:30:49,600
so whether the most significant mixed

1934
01:30:49,600 --> 01:30:54,239
carry a specific value or not it remains

1935
01:30:54,239 --> 01:30:57,199
fully similar to the initial definition

1936
01:30:57,199 --> 01:30:58,080
of the

1937
01:30:58,080 --> 01:31:02,080
entropy label and

1938
01:31:02,080 --> 01:31:06,159
in case the flag associated to

1939
01:31:06,159 --> 01:31:08,960
the side is set the supporting

1940
01:31:08,960 --> 01:31:10,000
implementations

1941
01:31:10,000 --> 01:31:12,400
over the past along the path will be

1942
01:31:12,400 --> 01:31:13,520
able to do

1943
01:31:13,520 --> 01:31:15,679
specific processing associated to the

1944
01:31:15,679 --> 01:31:18,480
pair slicing

1945
01:31:18,719 --> 01:31:21,760
behavior in case something is ready to

1946
01:31:21,760 --> 01:31:25,040
personalize processing along the pass

1947
01:31:25,040 --> 01:31:30,080
next please

1948
01:31:30,080 --> 01:31:32,320
so to summarize the main benefits

1949
01:31:32,320 --> 01:31:34,080
associated to this proposal

1950
01:31:34,080 --> 01:31:36,880
is that it remains compatible with

1951
01:31:36,880 --> 01:31:37,520
routers

1952
01:31:37,520 --> 01:31:40,719
already supporting entropy label

1953
01:31:40,719 --> 01:31:44,560
on the new feature only make use of

1954
01:31:44,560 --> 01:31:47,360
unused bits within the existing shim

1955
01:31:47,360 --> 01:31:48,239
header

1956
01:31:48,239 --> 01:31:51,360
so no new fields to carry no

1957
01:31:51,360 --> 01:31:55,120
new resource to consume

1958
01:31:55,120 --> 01:31:57,840
it just enable a particular processing

1959
01:31:57,840 --> 01:32:00,400
associated to a new definition

1960
01:32:00,400 --> 01:32:05,360
of unused beast bits so far

1961
01:32:05,360 --> 01:32:09,199
it reduces the entropy level signaling

1962
01:32:09,199 --> 01:32:12,239
capability on the

1963
01:32:12,239 --> 01:32:15,679
maximum size depths that we already have

1964
01:32:15,679 --> 01:32:18,960
progressing in parallel and it's

1965
01:32:18,960 --> 01:32:21,040
enabled incremental deployments over

1966
01:32:21,040 --> 01:32:23,199
operational fields because

1967
01:32:23,199 --> 01:32:26,400
thanks to the pacquiao compatible

1968
01:32:26,400 --> 01:32:28,480
advantages it doesn't break anything and

1969
01:32:28,480 --> 01:32:29,520
can be

1970
01:32:29,520 --> 01:32:33,679
deployed in a step-by-step basis

1971
01:32:33,679 --> 01:32:37,280
so next that's it i see people

1972
01:32:37,280 --> 01:32:40,639
queueing already

1973
01:32:40,639 --> 01:32:45,760
yeah stuart g and jeff

1974
01:32:48,560 --> 01:32:52,880
yes sir so i was looking at rfc

1975
01:32:52,880 --> 01:32:56,400
6790 uh section 4.2

1976
01:32:56,400 --> 01:33:01,040
ingress lsr 0.4 the ttl for the el

1977
01:33:01,040 --> 01:33:04,159
must be zero to ensure that it is not

1978
01:33:04,159 --> 01:33:06,000
used inadvertently for forwarding

1979
01:33:06,000 --> 01:33:07,120
there was quite a lot of discussion

1980
01:33:07,120 --> 01:33:09,120
about this at the time um

1981
01:33:09,120 --> 01:33:10,960
so whilst you have an interesting idea

1982
01:33:10,960 --> 01:33:12,960
we do need to make sure

1983
01:33:12,960 --> 01:33:15,600
that we aren't derogating any security

1984
01:33:15,600 --> 01:33:19,120
promises that we made in the past

1985
01:33:19,120 --> 01:33:22,080
yes i see your point i think it's

1986
01:33:22,080 --> 01:33:23,679
relevant to make sure that it doesn't

1987
01:33:23,679 --> 01:33:24,239
break

1988
01:33:24,239 --> 01:33:27,440
anything uh so far i don't see it as

1989
01:33:27,440 --> 01:33:28,080
different

1990
01:33:28,080 --> 01:33:30,960
from any field that remain reserved for

1991
01:33:30,960 --> 01:33:31,440
future

1992
01:33:31,440 --> 01:33:34,239
no but if if there are some specific

1993
01:33:34,239 --> 01:33:35,760
issues that were

1994
01:33:35,760 --> 01:33:38,000
identified at that time it's worth

1995
01:33:38,000 --> 01:33:39,040
looking at them you're right

1996
01:33:39,040 --> 01:33:42,320
right so this was about making sure that

1997
01:33:42,320 --> 01:33:43,920
we didn't get rogue packets in the

1998
01:33:43,920 --> 01:33:46,320
network

1999
01:33:46,719 --> 01:33:49,199
that's why it was done and so this is

2000
01:33:49,199 --> 01:33:50,560
about sure

2001
01:33:50,560 --> 01:33:52,080
whether one of these packets could ever

2002
01:33:52,080 --> 01:33:54,320
get loose in the network with a high ttl

2003
01:33:54,320 --> 01:33:55,040
and

2004
01:33:55,040 --> 01:33:56,560
go somewhere strange that's why we did

2005
01:33:56,560 --> 01:33:59,520
it and um

2006
01:33:59,520 --> 01:34:02,800
i think it needs a much bigger consensus

2007
01:34:02,800 --> 01:34:05,520
that it is safe to remove that safety

2008
01:34:05,520 --> 01:34:07,840
feature

2009
01:34:08,719 --> 01:34:11,040
okay so that's an open issue they need

2010
01:34:11,040 --> 01:34:12,400
to be tackled

2011
01:34:12,400 --> 01:34:16,480
i see thanks stevert

2012
01:34:16,480 --> 01:34:19,280
if anyone has a view on that that's

2013
01:34:19,280 --> 01:34:21,199
probably an interesting thread to start

2014
01:34:21,199 --> 01:34:23,919
on the mailing list

2015
01:34:31,280 --> 01:34:34,719
uh it's a good point i think we need to

2016
01:34:34,719 --> 01:34:35,600
follow up on that

2017
01:34:35,600 --> 01:34:46,239
sure g do you want to go next can hear

2018
01:34:46,239 --> 01:34:48,400
me

2019
01:34:48,719 --> 01:34:52,159
okay yeah i see uh this document

2020
01:34:52,159 --> 01:34:55,360
is proposed another candidate approach

2021
01:34:55,360 --> 01:34:55,679
for

2022
01:34:55,679 --> 01:34:59,440
carrying the nether slicing information

2023
01:34:59,440 --> 01:35:02,719
npr's packet header yeah this is a

2024
01:35:02,719 --> 01:35:06,159
like it mentioned it reuse some existing

2025
01:35:06,159 --> 01:35:09,040
special purpose labels is the existing

2026
01:35:09,040 --> 01:35:11,119
amperage label

2027
01:35:11,119 --> 01:35:14,719
it can make the label stack more compact

2028
01:35:14,719 --> 01:35:17,119
well it may also have some impact to the

2029
01:35:17,119 --> 01:35:19,040
existing function

2030
01:35:19,040 --> 01:35:22,239
and then may introduce some limitation

2031
01:35:22,239 --> 01:35:24,559
to the

2032
01:35:24,639 --> 01:35:27,040
new function like the size of the id you

2033
01:35:27,040 --> 01:35:28,560
can carry in this

2034
01:35:28,560 --> 01:35:33,040
existing label may be limited

2035
01:35:33,119 --> 01:35:36,320
another thing is if someone knows in

2036
01:35:36,320 --> 01:35:38,560
as transient node can or cannot support

2037
01:35:38,560 --> 01:35:39,600
this

2038
01:35:39,600 --> 01:35:42,159
functionality do we need some capability

2039
01:35:42,159 --> 01:35:42,960
advertisement

2040
01:35:42,960 --> 01:35:45,760
for it

2041
01:35:49,199 --> 01:35:53,599
i'm sorry i didn't catch your question

2042
01:35:54,880 --> 01:35:58,080
okay uh let me start

2043
01:35:58,080 --> 01:35:59,600
with your first part with the the

2044
01:35:59,600 --> 01:36:01,679
summary is okay but the last

2045
01:36:01,679 --> 01:36:04,560
piece with your question uh just a

2046
01:36:04,560 --> 01:36:05,840
glitch

2047
01:36:05,840 --> 01:36:09,040
yeah the last part okay

2048
01:36:09,040 --> 01:36:12,719
what i mean is um if you

2049
01:36:12,719 --> 01:36:15,040
basically this may change it will change

2050
01:36:15,040 --> 01:36:16,639
the behavior of the

2051
01:36:16,639 --> 01:36:18,960
transit nodes right when they process

2052
01:36:18,960 --> 01:36:19,679
this

2053
01:36:19,679 --> 01:36:22,639
entropy label do you think some

2054
01:36:22,639 --> 01:36:24,480
capability advertisement

2055
01:36:24,480 --> 01:36:28,320
will be needed to indicate which node

2056
01:36:28,320 --> 01:36:31,040
can do that kind of processing which not

2057
01:36:31,040 --> 01:36:31,679
will

2058
01:36:31,679 --> 01:36:35,600
not uh

2059
01:36:35,600 --> 01:36:38,639
that's an interesting question that

2060
01:36:38,639 --> 01:36:40,960
could be considered so far there is no

2061
01:36:40,960 --> 01:36:42,639
requirement to

2062
01:36:42,639 --> 01:36:46,000
to advertise this capability because

2063
01:36:46,000 --> 01:36:50,840
processing the the proposal on the

2064
01:36:50,840 --> 01:36:52,800
proposed

2065
01:36:52,800 --> 01:36:56,320
way or the proposal coding there in the

2066
01:36:56,320 --> 01:37:00,239
legacy behavior would be completely

2067
01:37:00,239 --> 01:37:02,880
transparent and wouldn't break anything

2068
01:37:02,880 --> 01:37:03,840
so it's not

2069
01:37:03,840 --> 01:37:07,040
absolutely required to advertise it

2070
01:37:07,040 --> 01:37:09,760
but maybe as an announcement that could

2071
01:37:09,760 --> 01:37:12,560
be considered

2072
01:37:12,880 --> 01:37:16,880
but since there is this flag proposal to

2073
01:37:16,880 --> 01:37:18,000
make sure that

2074
01:37:18,000 --> 01:37:21,199
the processing is consistent

2075
01:37:21,199 --> 01:37:25,519
it's not necessarily required

2076
01:37:26,480 --> 01:37:29,360
okay for the entropy label processing

2077
01:37:29,360 --> 01:37:30,560
maybe it's uh like

2078
01:37:30,560 --> 01:37:33,119
you mentioned it's transparent well if

2079
01:37:33,119 --> 01:37:35,280
we want to ensure that

2080
01:37:35,280 --> 01:37:38,480
the whole path can do the slice-based

2081
01:37:38,480 --> 01:37:39,280
processing

2082
01:37:39,280 --> 01:37:41,679
this can you may need some information

2083
01:37:41,679 --> 01:37:43,040
about the capability

2084
01:37:43,040 --> 01:37:46,239
on the transient node also yes fast

2085
01:37:46,239 --> 01:37:48,239
selection time when you want to do

2086
01:37:48,239 --> 01:37:52,320
a very accurate

2087
01:37:52,320 --> 01:37:55,280
path yes that could be a useful

2088
01:37:55,280 --> 01:37:57,360
parameter to take into account

2089
01:37:57,360 --> 01:38:01,760
that selection time yeah yes

2090
01:38:01,760 --> 01:38:04,239
yeah my last comment is about the

2091
01:38:04,239 --> 01:38:05,520
terminology as

2092
01:38:05,520 --> 01:38:08,400
you can see we have the meeting ids

2093
01:38:08,400 --> 01:38:09,440
slice id

2094
01:38:09,440 --> 01:38:12,719
and perhaps a slice aggregate id

2095
01:38:12,719 --> 01:38:15,040
referring to maybe the same thing

2096
01:38:15,040 --> 01:38:16,080
perhaps we need to

2097
01:38:16,080 --> 01:38:19,840
converge on a consistent

2098
01:38:19,840 --> 01:38:22,960
description or terminology right clearly

2099
01:38:22,960 --> 01:38:23,360
yes

2100
01:38:23,360 --> 01:38:25,119
this is something that would be valuable

2101
01:38:25,119 --> 01:38:26,400
to the working group at all

2102
01:38:26,400 --> 01:38:30,320
i agree okay thank you

2103
01:38:30,320 --> 01:38:32,799
you're welcome

2104
01:38:35,440 --> 01:38:38,560
hi julia thank you uh and next i i

2105
01:38:38,560 --> 01:38:39,360
thought i saw

2106
01:38:39,360 --> 01:38:42,639
jeff okay hi jeff

2107
01:38:42,639 --> 01:38:45,520
hey so uh if you're going to use entropy

2108
01:38:45,520 --> 01:38:46,880
label for forwarding

2109
01:38:46,880 --> 01:38:48,800
then you change fundamental symmetric

2110
01:38:48,800 --> 01:38:50,080
enterprise labels right

2111
01:38:50,080 --> 01:38:52,560
it's optional for load sharing because

2112
01:38:52,560 --> 01:38:53,119
you just

2113
01:38:53,119 --> 01:38:56,080
increase entropy if you don't read it

2114
01:38:56,080 --> 01:38:57,840
you can steal for the traffic you don't

2115
01:38:57,840 --> 01:38:59,360
load charge is good

2116
01:38:59,360 --> 01:39:02,239
now if it's used for forwarding it's

2117
01:39:02,239 --> 01:39:04,719
mandatory to be read

2118
01:39:04,719 --> 01:39:07,760
so in segment routine

2119
01:39:07,760 --> 01:39:10,560
your elephant can be inserted any depth

2120
01:39:10,560 --> 01:39:11,679
right

2121
01:39:11,679 --> 01:39:15,119
so we've got two constraints how deep

2122
01:39:15,119 --> 01:39:16,400
you can insert it

2123
01:39:16,400 --> 01:39:18,880
how many pairs which is an ingress node

2124
01:39:18,880 --> 01:39:22,080
and then url d which is some transit

2125
01:39:22,080 --> 01:39:24,400
and they become mandatory since they're

2126
01:39:24,400 --> 01:39:25,520
used for

2127
01:39:25,520 --> 01:39:28,320
forwarding as well as on pc computation

2128
01:39:28,320 --> 01:39:30,159
you need to impose label stack

2129
01:39:30,159 --> 01:39:32,639
that is readable across every transit

2130
01:39:32,639 --> 01:39:33,360
node

2131
01:39:33,360 --> 01:39:35,360
i would like to see these points

2132
01:39:35,360 --> 01:39:37,280
addressed in the draft

2133
01:39:37,280 --> 01:39:41,679
thank you okay so

2134
01:39:41,679 --> 01:39:44,639
i'll share it with the the authors and

2135
01:39:44,639 --> 01:39:45,600
some of them are

2136
01:39:45,600 --> 01:39:48,719
attending it there so yes

2137
01:39:48,719 --> 01:39:51,679
i i want to comment uh just uh you know

2138
01:39:51,679 --> 01:39:52,239
jeff

2139
01:39:52,239 --> 01:39:54,400
to clarify that i don't think we're

2140
01:39:54,400 --> 01:39:56,080
stating that the slice id

2141
01:39:56,080 --> 01:40:00,159
is used for forwarding but for

2142
01:40:00,159 --> 01:40:04,159
slice aggregate or slice identification

2143
01:40:04,159 --> 01:40:07,360
the forwarding labels are in the stack

2144
01:40:07,360 --> 01:40:10,400
uh so this is just uh you know an

2145
01:40:10,400 --> 01:40:13,360
id that's embedded inside the uh it

2146
01:40:13,360 --> 01:40:15,679
happens that this is in the entropy

2147
01:40:15,679 --> 01:40:19,760
but um i it will dictate that the packet

2148
01:40:19,760 --> 01:40:22,480
is uh part of this slice and nothing

2149
01:40:22,480 --> 01:40:23,119
else

2150
01:40:23,119 --> 01:40:25,440
it's not dictating that forwarding

2151
01:40:25,440 --> 01:40:28,080
changing the forwarding behavior

2152
01:40:28,080 --> 01:40:31,840
at least this is my understanding of

2153
01:40:32,880 --> 01:40:36,320
um i i don't think that that's on data

2154
01:40:36,320 --> 01:40:38,000
plane right

2155
01:40:38,000 --> 01:40:40,480
uh repeat that please it is for

2156
01:40:40,480 --> 01:40:43,678
reasonable data plane

2157
01:40:44,239 --> 01:40:47,280
it's for a slice identification

2158
01:40:47,280 --> 01:40:49,440
so you determine the packet belongs to

2159
01:40:49,440 --> 01:40:50,320
this slice

2160
01:40:50,320 --> 01:40:53,280
or slice aggregate or and that that's

2161
01:40:53,280 --> 01:40:55,840
what it means

2162
01:40:55,840 --> 01:40:57,840
it needs to be imposed it needs to be

2163
01:40:57,840 --> 01:40:59,360
read by someone

2164
01:40:59,360 --> 01:41:01,840
indeed useless correct that is

2165
01:41:01,840 --> 01:41:02,800
information

2166
01:41:02,800 --> 01:41:06,000
that it is impossible and readable oh

2167
01:41:06,000 --> 01:41:06,480
yeah yeah

2168
01:41:06,480 --> 01:41:10,080
i i totally agree that uh a transit node

2169
01:41:10,080 --> 01:41:12,480
should be able to read it and it should

2170
01:41:12,480 --> 01:41:14,159
be within the readable depth

2171
01:41:14,159 --> 01:41:18,000
i agree with you that's good 8662 goes

2172
01:41:18,000 --> 01:41:21,440
in great details how to compute labels

2173
01:41:21,440 --> 01:41:23,679
where to insert it and it would be great

2174
01:41:23,679 --> 01:41:25,760
to see it addressed in the draft

2175
01:41:25,760 --> 01:41:32,800
yes i agree thank you jeff

2176
01:41:32,800 --> 01:41:37,440
it says stewart and then greg

2177
01:41:37,440 --> 01:41:39,600
let me speak yeah um so first of all i

2178
01:41:39,600 --> 01:41:40,480
agree with

2179
01:41:40,480 --> 01:41:42,320
the points that uh both of sets of

2180
01:41:42,320 --> 01:41:43,679
points that were just uh

2181
01:41:43,679 --> 01:41:45,600
made it seems to mean being no point in

2182
01:41:45,600 --> 01:41:47,040
putting this thing in

2183
01:41:47,040 --> 01:41:48,800
a critical part of the forwarding layer

2184
01:41:48,800 --> 01:41:50,000
if you're not actually going to use it

2185
01:41:50,000 --> 01:41:51,600
as part of the forwarding decision

2186
01:41:51,600 --> 01:41:54,960
and that means that you need to have

2187
01:41:54,960 --> 01:41:58,480
um capability advertisement

2188
01:41:58,480 --> 01:42:01,360
and the path needs to verify that um the

2189
01:42:01,360 --> 01:42:01,840
path

2190
01:42:01,840 --> 01:42:03,840
the the all the p notes got this

2191
01:42:03,840 --> 01:42:05,920
capability so that's the first thing

2192
01:42:05,920 --> 01:42:08,000
second thing is that it seems to me that

2193
01:42:08,000 --> 01:42:09,520
when you get to

2194
01:42:09,520 --> 01:42:12,440
um slicing you you also get into more

2195
01:42:12,440 --> 01:42:14,719
sophisticated

2196
01:42:14,719 --> 01:42:17,760
sla in slo and

2197
01:42:17,760 --> 01:42:21,280
the technique that was presented earlier

2198
01:42:21,280 --> 01:42:23,840
where you put the information

2199
01:42:23,840 --> 01:42:26,480
under the label stack if it can be made

2200
01:42:26,480 --> 01:42:27,440
to work

2201
01:42:27,440 --> 01:42:29,920
does allow you to put more sophisticated

2202
01:42:29,920 --> 01:42:30,639
um

2203
01:42:30,639 --> 01:42:33,760
sla information down there for example

2204
01:42:33,760 --> 01:42:37,600
latest time of arrival in terms of real

2205
01:42:37,600 --> 01:42:38,239
time

2206
01:42:38,239 --> 01:42:41,520
as opposed to hop count and stuff

2207
01:42:41,520 --> 01:42:44,239
so we need to understand what more

2208
01:42:44,239 --> 01:42:45,360
sophisticated

2209
01:42:45,360 --> 01:42:48,159
things slicers are going to want uh

2210
01:42:48,159 --> 01:42:50,000
before we decide how to do

2211
01:42:50,000 --> 01:42:52,719
slice identification uh because

2212
01:42:52,719 --> 01:42:54,239
otherwise we'll end up just doing this

2213
01:42:54,239 --> 01:42:56,239
thing twice and we'll have

2214
01:42:56,239 --> 01:42:59,679
all the corresponding issues of

2215
01:42:59,679 --> 01:43:01,840
inter-working between multiple

2216
01:43:01,840 --> 01:43:05,360
techniques trying to do the same thing

2217
01:43:07,119 --> 01:43:10,639
yeah i see your point steward and it's

2218
01:43:10,639 --> 01:43:11,040
true

2219
01:43:11,040 --> 01:43:14,320
it doesn't address all requirements

2220
01:43:14,320 --> 01:43:15,119
associated to

2221
01:43:15,119 --> 01:43:19,679
any given slas but for simple cases

2222
01:43:19,679 --> 01:43:23,360
this proposal has the benefit of being

2223
01:43:23,360 --> 01:43:26,400
easy to uh to implement with respect to

2224
01:43:26,400 --> 01:43:27,679
existing

2225
01:43:27,679 --> 01:43:30,400
specified features so it's trade-off

2226
01:43:30,400 --> 01:43:31,280
between

2227
01:43:31,280 --> 01:43:34,639
what we need to achieve and what will be

2228
01:43:34,639 --> 01:43:37,119
needed in implementation but don't

2229
01:43:37,119 --> 01:43:39,520
forget acting haste repentant leisure is

2230
01:43:39,520 --> 01:43:42,000
the concern

2231
01:43:44,800 --> 01:43:47,040
thank you

2232
01:43:48,800 --> 01:43:52,639
there was uh another person in the queue

2233
01:43:52,639 --> 01:43:55,920
are we managing time uh yeah

2234
01:43:55,920 --> 01:43:58,639
yes thank you for the reminder greg uh

2235
01:43:58,639 --> 01:44:00,719
can you please make it quick uh

2236
01:44:00,719 --> 01:44:04,000
yes i i just want one to point that

2237
01:44:04,000 --> 01:44:07,040
it appears that the wording in

2238
01:44:07,040 --> 01:44:11,119
ttl for their entropy label

2239
01:44:11,119 --> 01:44:14,239
is not equivalent

2240
01:44:14,239 --> 01:44:17,360
to reserved because it says

2241
01:44:17,360 --> 01:44:20,400
that ttl must be zero and it doesn't say

2242
01:44:20,400 --> 01:44:20,800
it

2243
01:44:20,800 --> 01:44:24,880
ignored on receipt so uh reuse of this

2244
01:44:24,880 --> 01:44:25,920
field

2245
01:44:25,920 --> 01:44:28,880
is risky and i agree so it's a new

2246
01:44:28,880 --> 01:44:31,199
capability that needs to be recognized

2247
01:44:31,199 --> 01:44:32,480
and advertised

2248
01:44:32,480 --> 01:44:35,920
and matched otherwise it will be

2249
01:44:35,920 --> 01:44:38,639
unpredictable results and entropy label

2250
01:44:38,639 --> 01:44:41,840
will be used for forwarding

2251
01:44:41,840 --> 01:44:44,960
i think it fully uh matches stewart's

2252
01:44:44,960 --> 01:44:47,280
initial comment and

2253
01:44:47,280 --> 01:44:50,960
i guess that terex agrees to

2254
01:44:50,960 --> 01:44:54,000
start to follow up on this issue so it's

2255
01:44:54,000 --> 01:44:55,119
probably just the

2256
01:44:55,119 --> 01:44:58,400
the start of uh the resolution of this

2257
01:44:58,400 --> 01:44:59,520
uh issue

2258
01:44:59,520 --> 01:45:03,280
point okay thank you i totally agree

2259
01:45:03,280 --> 01:45:05,840
let's follow up on the list on this uh

2260
01:45:05,840 --> 01:45:07,679
that's an interesting point and

2261
01:45:07,679 --> 01:45:10,560
um i want to move on to the next uh slot

2262
01:45:10,560 --> 01:45:13,040
thank you julian for representing the

2263
01:45:13,040 --> 01:45:15,360
the office and much thanks for that by

2264
01:45:15,360 --> 01:45:16,320
the way

2265
01:45:16,320 --> 01:45:20,239
um all right uh i'll i'll move on to the

2266
01:45:20,239 --> 01:45:21,040
next uh

2267
01:45:21,040 --> 01:45:24,239
presentation by kiriti uh please uh

2268
01:45:24,239 --> 01:45:27,360
go ahead hi um thanks

2269
01:45:27,360 --> 01:45:30,080
yeah um before before i start i want to

2270
01:45:30,080 --> 01:45:30,800
say that

2271
01:45:30,800 --> 01:45:33,119
we need to do a better job of time

2272
01:45:33,119 --> 01:45:35,600
management in the nprs working group

2273
01:45:35,600 --> 01:45:38,000
i also think we need to do a better job

2274
01:45:38,000 --> 01:45:38,719
of

2275
01:45:38,719 --> 01:45:42,639
organizing i know that people have

2276
01:45:42,639 --> 01:45:46,400
put in their requests for slots

2277
01:45:46,400 --> 01:45:49,440
and we pro i don't know what the order

2278
01:45:49,440 --> 01:45:50,239
in which we

2279
01:45:50,239 --> 01:45:54,880
do that but um i think that needs to be

2280
01:45:54,880 --> 01:45:58,080
a long hard look thank you

2281
01:45:58,080 --> 01:46:01,600
anyway i'm here yeah um i'm here i've

2282
01:46:01,600 --> 01:46:02,080
got

2283
01:46:02,080 --> 01:46:03,840
10 minutes but that means the next

2284
01:46:03,840 --> 01:46:05,679
person after me doesn't have

2285
01:46:05,679 --> 01:46:09,280
much time um if julian's presentation

2286
01:46:09,280 --> 01:46:10,960
had a lot of comments this will have

2287
01:46:10,960 --> 01:46:12,880
even more so

2288
01:46:12,880 --> 01:46:14,880
i'm not sure how we're going to handle

2289
01:46:14,880 --> 01:46:16,639
that but i think this is a pretty

2290
01:46:16,639 --> 01:46:18,480
important presentation and that's

2291
01:46:18,480 --> 01:46:22,159
um why um anyway

2292
01:46:22,159 --> 01:46:24,159
i'll stop talking about time and start

2293
01:46:24,159 --> 01:46:25,520
talking about my slides

2294
01:46:25,520 --> 01:46:28,719
so next slide please thank you

2295
01:46:28,719 --> 01:46:30,880
i should mention that um you know

2296
01:46:30,880 --> 01:46:31,920
there's a

2297
01:46:31,920 --> 01:46:34,960
decent set of uh people who are on this

2298
01:46:34,960 --> 01:46:38,840
including israel um malik from

2299
01:46:38,840 --> 01:46:41,679
broadcom so we've done a little bit of

2300
01:46:41,679 --> 01:46:45,119
a polling of um how different powering

2301
01:46:45,119 --> 01:46:46,719
engines use this and they'll come in

2302
01:46:46,719 --> 01:46:47,600
useful

2303
01:46:47,600 --> 01:46:50,239
so anyway the the basic motivation here

2304
01:46:50,239 --> 01:46:50,800
is

2305
01:46:50,800 --> 01:46:52,270
there are lots and lots of

2306
01:46:52,270 --> 01:46:53,920
[Music]

2307
01:46:53,920 --> 01:46:56,719
requests for special purpose labels and

2308
01:46:56,719 --> 01:46:58,719
typically these special purpose labels

2309
01:46:58,719 --> 01:47:01,600
ask the forwarding plane to do something

2310
01:47:01,600 --> 01:47:02,320
and so

2311
01:47:02,320 --> 01:47:04,639
for example there's the no further fast

2312
01:47:04,639 --> 01:47:07,840
readout which effectively says

2313
01:47:07,840 --> 01:47:09,600
if you see this and you're trying to do

2314
01:47:09,600 --> 01:47:11,199
fast readout don't

2315
01:47:11,199 --> 01:47:13,520
just drop the packet but then there are

2316
01:47:13,520 --> 01:47:15,840
others that say

2317
01:47:15,840 --> 01:47:17,920
if you see the special purpose label the

2318
01:47:17,920 --> 01:47:19,119
following label

2319
01:47:19,119 --> 01:47:21,520
is the slice aggregate and that tells

2320
01:47:21,520 --> 01:47:22,239
you how to

2321
01:47:22,239 --> 01:47:25,520
treat the packet it's a slice identifier

2322
01:47:25,520 --> 01:47:28,880
there's a path or flow id that says

2323
01:47:28,880 --> 01:47:31,119
if you if you see this special purpose

2324
01:47:31,119 --> 01:47:32,080
label

2325
01:47:32,080 --> 01:47:35,280
what comes after it is this flow id

2326
01:47:35,280 --> 01:47:38,639
and then you can use that for identify

2327
01:47:38,639 --> 01:47:39,119
for

2328
01:47:39,119 --> 01:47:40,800
accounting and stuff but they also want

2329
01:47:40,800 --> 01:47:42,159
to use it for

2330
01:47:42,159 --> 01:47:45,760
this uh two-phase marking um

2331
01:47:45,760 --> 01:47:47,280
and there's a there's a draft that

2332
01:47:47,280 --> 01:47:49,360
describes that there's

2333
01:47:49,360 --> 01:47:52,239
generic delivery functions there's om

2334
01:47:52,239 --> 01:47:52,880
data

2335
01:47:52,880 --> 01:47:55,040
uh possibly in the stack or beyond the

2336
01:47:55,040 --> 01:47:56,159
stack

2337
01:47:56,159 --> 01:47:57,920
and so there could be a whole bunch of

2338
01:47:57,920 --> 01:47:59,679
these and um

2339
01:47:59,679 --> 01:48:02,000
of course um hopefully people are aware

2340
01:48:02,000 --> 01:48:03,840
that we've already used up half the

2341
01:48:03,840 --> 01:48:04,639
space

2342
01:48:04,639 --> 01:48:06,960
and all the existing requests for

2343
01:48:06,960 --> 01:48:08,960
special purpose labels

2344
01:48:08,960 --> 01:48:12,159
cannot be satisfied with at least the

2345
01:48:12,159 --> 01:48:13,840
base special purpose labels so you'd

2346
01:48:13,840 --> 01:48:16,080
have to then go to advanced

2347
01:48:16,080 --> 01:48:18,639
enhanced or extended special purpose

2348
01:48:18,639 --> 01:48:20,560
labels

2349
01:48:20,560 --> 01:48:23,840
so so given this background we

2350
01:48:23,840 --> 01:48:25,840
we took a big step back and said how can

2351
01:48:25,840 --> 01:48:27,440
we accommodate this

2352
01:48:27,440 --> 01:48:33,600
and so next slide please

2353
01:48:33,600 --> 01:48:37,119
so the the key insight uh is that

2354
01:48:37,119 --> 01:48:40,960
the critical thing that forwarding

2355
01:48:40,960 --> 01:48:43,520
engines look at when they're processing

2356
01:48:43,520 --> 01:48:44,719
a given

2357
01:48:44,719 --> 01:48:47,600
label so if you look at the top of stack

2358
01:48:47,600 --> 01:48:49,040
you have to look at the label field to

2359
01:48:49,040 --> 01:48:50,560
say what do i do with this

2360
01:48:50,560 --> 01:48:52,800
you have to look at the tc as part of

2361
01:48:52,800 --> 01:48:54,400
how you treat the packet

2362
01:48:54,400 --> 01:48:56,080
you have to look at the ttl whether to

2363
01:48:56,080 --> 01:48:57,440
drop it or forward it

2364
01:48:57,440 --> 01:49:00,880
and you're going to change the ttl

2365
01:49:00,880 --> 01:49:02,239
and then you of course have to look at

2366
01:49:02,239 --> 01:49:04,159
the end of stack pitch and you

2367
01:49:04,159 --> 01:49:05,679
the primary reason for looking at the

2368
01:49:05,679 --> 01:49:07,760
end of stack bit is to say what else in

2369
01:49:07,760 --> 01:49:10,000
the label stack am i going to process

2370
01:49:10,000 --> 01:49:11,520
so we've been talking about readable

2371
01:49:11,520 --> 01:49:13,920
label depth but uh in principle if you

2372
01:49:13,920 --> 01:49:14,639
can

2373
01:49:14,639 --> 01:49:16,320
uh you you would like to go through the

2374
01:49:16,320 --> 01:49:18,159
whole stack and maybe get to the end of

2375
01:49:18,159 --> 01:49:19,280
stack and

2376
01:49:19,280 --> 01:49:21,040
uh look at things there from the point

2377
01:49:21,040 --> 01:49:22,560
of view of processing

2378
01:49:22,560 --> 01:49:24,960
a an ip header and getting a better

2379
01:49:24,960 --> 01:49:26,800
sense of how to forward the packet how

2380
01:49:26,800 --> 01:49:29,040
to load balance the packet

2381
01:49:29,040 --> 01:49:31,520
so if you do want to do anything beyond

2382
01:49:31,520 --> 01:49:32,400
the first

2383
01:49:32,400 --> 01:49:34,719
and the top label you have to be keeping

2384
01:49:34,719 --> 01:49:37,119
a close eye on the end of stack width

2385
01:49:37,119 --> 01:49:38,560
because you need to know when the stack

2386
01:49:38,560 --> 01:49:40,560
ends um

2387
01:49:40,560 --> 01:49:42,639
there are uh powering engines that look

2388
01:49:42,639 --> 01:49:43,920
at the label values

2389
01:49:43,920 --> 01:49:47,599
and they look for things like uh spls

2390
01:49:47,599 --> 01:49:50,480
special purpose labels so uh they look

2391
01:49:50,480 --> 01:49:51,040
for

2392
01:49:51,040 --> 01:49:53,119
you know they they feed them all into

2393
01:49:53,119 --> 01:49:55,840
their entropy engine if they're

2394
01:49:55,840 --> 01:49:59,599
so inclined um and and so on

2395
01:49:59,599 --> 01:50:00,960
so you're looking at the end of stack

2396
01:50:00,960 --> 01:50:02,480
bits you're looking at the 20 bits of

2397
01:50:02,480 --> 01:50:03,760
label value

2398
01:50:03,760 --> 01:50:06,639
but the tc bits and the ttl bits are not

2399
01:50:06,639 --> 01:50:08,400
acted upon

2400
01:50:08,400 --> 01:50:12,719
so so then the i mean given that insight

2401
01:50:12,719 --> 01:50:16,159
um the question is

2402
01:50:16,159 --> 01:50:18,320
if it is a special purpose label and if

2403
01:50:18,320 --> 01:50:20,080
you guarantee that that doesn't reach

2404
01:50:20,080 --> 01:50:21,040
the top of stack

2405
01:50:21,040 --> 01:50:23,280
and if it does reach this double stack

2406
01:50:23,280 --> 01:50:25,199
it is an error

2407
01:50:25,199 --> 01:50:28,400
um what do we do with

2408
01:50:28,400 --> 01:50:32,080
um how can we use these

2409
01:50:32,080 --> 01:50:35,440
these bits that are kind of being wasted

2410
01:50:35,440 --> 01:50:38,159
so uh of course if if we're going down

2411
01:50:38,159 --> 01:50:39,599
that path and we're going to look at the

2412
01:50:39,599 --> 01:50:41,920
tc bits and the ttl bits

2413
01:50:41,920 --> 01:50:44,800
we have to be very careful very sure

2414
01:50:44,800 --> 01:50:46,560
that these labels do not reach the top

2415
01:50:46,560 --> 01:50:48,159
of stack

2416
01:50:48,159 --> 01:50:53,839
next slide piece

2417
01:50:54,880 --> 01:50:57,840
so defining a new special purpose label

2418
01:50:57,840 --> 01:50:59,679
or even an extended special purpose

2419
01:50:59,679 --> 01:51:00,560
label for every

2420
01:51:00,560 --> 01:51:03,679
new feature is not a great idea

2421
01:51:03,679 --> 01:51:05,920
i mean first of all we're running out of

2422
01:51:05,920 --> 01:51:08,719
special regular special purpose labels

2423
01:51:08,719 --> 01:51:12,400
and this whole approach is

2424
01:51:12,400 --> 01:51:15,440
expensive typically means that you have

2425
01:51:15,440 --> 01:51:17,599
to do a hardware respin or a microcode

2426
01:51:17,599 --> 01:51:19,520
change

2427
01:51:19,520 --> 01:51:24,239
so the proposal is to use a single uh

2428
01:51:24,239 --> 01:51:26,320
based special purpose label to compactly

2429
01:51:26,320 --> 01:51:28,560
encode multiple forwarding actions in

2430
01:51:28,560 --> 01:51:31,920
an ampers label so you could

2431
01:51:31,920 --> 01:51:35,199
for example view this single new special

2432
01:51:35,199 --> 01:51:36,560
purpose label which you are calling a

2433
01:51:36,560 --> 01:51:37,520
forwarding actions

2434
01:51:37,520 --> 01:51:40,080
indicator as the special purpose label

2435
01:51:40,080 --> 01:51:40,560
for

2436
01:51:40,560 --> 01:51:43,599
entropy for the guess which is

2437
01:51:43,599 --> 01:51:46,320
a slice identifier whether or not you

2438
01:51:46,320 --> 01:51:48,159
should do fast without

2439
01:51:48,159 --> 01:51:50,159
whether or not there's om in the packet

2440
01:51:50,159 --> 01:51:51,840
whether or not there's a path identifier

2441
01:51:51,840 --> 01:51:53,119
in the package

2442
01:51:53,119 --> 01:51:56,480
um whether or not the generator delivery

2443
01:51:56,480 --> 01:51:58,320
functions

2444
01:51:58,320 --> 01:52:01,040
the el already has an eli but all these

2445
01:52:01,040 --> 01:52:01,599
others

2446
01:52:01,599 --> 01:52:04,480
are active requests for uh special

2447
01:52:04,480 --> 01:52:06,320
purpose labels and some of them want

2448
01:52:06,320 --> 01:52:10,880
uh two or more special purpose labels

2449
01:52:10,880 --> 01:52:14,080
so uh so we're proposing a special

2450
01:52:14,080 --> 01:52:15,360
purpose label called the

2451
01:52:15,360 --> 01:52:17,440
forwarding actions indicator that uses

2452
01:52:17,440 --> 01:52:22,320
the tc and ttl bits to encode more data

2453
01:52:22,719 --> 01:52:25,119
and this special purpose label can be

2454
01:52:25,119 --> 01:52:27,599
accompanied by forwarding actions

2455
01:52:27,599 --> 01:52:31,280
which are also compactly encoded

2456
01:52:31,280 --> 01:52:34,239
and i think this and the reason why i

2457
01:52:34,239 --> 01:52:35,599
think this is important i know that

2458
01:52:35,599 --> 01:52:37,520
there's going to be all kinds of people

2459
01:52:37,520 --> 01:52:39,679
lined up i'm surprised it's just to it

2460
01:52:39,679 --> 01:52:42,239
for now but

2461
01:52:42,320 --> 01:52:46,239
if we do find a way to make this work

2462
01:52:46,239 --> 01:52:49,280
that means that every code point for a

2463
01:52:49,280 --> 01:52:51,280
special purpose label can actually do

2464
01:52:51,280 --> 01:52:53,760
lots of things and if uh that code point

2465
01:52:53,760 --> 01:52:55,040
can do lots of things we

2466
01:52:55,040 --> 01:52:58,320
should in fact maybe think about um

2467
01:52:58,320 --> 01:53:00,960
if we define new special purpose labels

2468
01:53:00,960 --> 01:53:01,760
how can we do

2469
01:53:01,760 --> 01:53:03,920
how can we make them do multiple things

2470
01:53:03,920 --> 01:53:06,080
and also maybe go back to all special

2471
01:53:06,080 --> 01:53:07,599
purpose levels and say

2472
01:53:07,599 --> 01:53:10,400
how do we make them um more more

2473
01:53:10,400 --> 01:53:11,599
effective

2474
01:53:11,599 --> 01:53:14,960
so that yes we have only 15 of them

2475
01:53:14,960 --> 01:53:18,320
that we can use but the 16th one being

2476
01:53:18,320 --> 01:53:19,599
the el

2477
01:53:19,599 --> 01:53:23,360
extension label so leave that aside

2478
01:53:23,360 --> 01:53:26,719
but can we get a lot more uh efficient

2479
01:53:26,719 --> 01:53:27,280
with them

2480
01:53:27,280 --> 01:53:30,400
and actually even with those 15 do

2481
01:53:30,400 --> 01:53:33,599
lots lots more things um the the trigger

2482
01:53:33,599 --> 01:53:35,040
for this was the global

2483
01:53:35,040 --> 01:53:37,840
identifier was flight selector the uh

2484
01:53:37,840 --> 01:53:39,599
the guess

2485
01:53:39,599 --> 01:53:42,480
field and this enables mpls based

2486
01:53:42,480 --> 01:53:44,560
transport network slices so you can look

2487
01:53:44,560 --> 01:53:45,840
at the draft

2488
01:53:45,840 --> 01:53:48,880
but um but we're generalizing from that

2489
01:53:48,880 --> 01:53:54,159
so next slide please

2490
01:53:54,159 --> 01:53:57,199
so here's a theory of operation um you

2491
01:53:57,199 --> 01:53:58,400
have an existing

2492
01:53:58,400 --> 01:54:00,239
uh forwarding label that you're looking

2493
01:54:00,239 --> 01:54:02,320
at um

2494
01:54:02,320 --> 01:54:04,960
so you have uh you know it's got a tc

2495
01:54:04,960 --> 01:54:06,960
bit it's got this end of stack bit with

2496
01:54:06,960 --> 01:54:08,639
hopefully zero because there's more

2497
01:54:08,639 --> 01:54:09,599
coming up

2498
01:54:09,599 --> 01:54:12,719
and some ttl fields um but

2499
01:54:12,719 --> 01:54:14,800
below that you have this multipurpose

2500
01:54:14,800 --> 01:54:16,800
special purpose label

2501
01:54:16,800 --> 01:54:20,960
um and the bits that i have here are

2502
01:54:20,960 --> 01:54:21,679
slightly

2503
01:54:21,679 --> 01:54:23,599
different from the bits that i have uh

2504
01:54:23,599 --> 01:54:24,800
later in the

2505
01:54:24,800 --> 01:54:27,840
slide which i was going to present to

2506
01:54:27,840 --> 01:54:31,119
to pals but the idea is that

2507
01:54:31,119 --> 01:54:34,239
you have a bit that says

2508
01:54:34,239 --> 01:54:36,400
uh there is something beyond the end of

2509
01:54:36,400 --> 01:54:38,800
stack and maybe there's a bit that says

2510
01:54:38,800 --> 01:54:40,080
there is something beyond the end of

2511
01:54:40,080 --> 01:54:42,239
stack but you don't need to worry about

2512
01:54:42,239 --> 01:54:42,960
it now

2513
01:54:42,960 --> 01:54:45,520
uh this is only for the end to end thing

2514
01:54:45,520 --> 01:54:46,719
and there's a bit that says there's

2515
01:54:46,719 --> 01:54:48,480
something beyond the end of stack

2516
01:54:48,480 --> 01:54:50,560
uh but it might be interesting to you on

2517
01:54:50,560 --> 01:54:52,639
a hop by hop basis

2518
01:54:52,639 --> 01:54:55,679
so though those two uh potential bits

2519
01:54:55,679 --> 01:54:57,920
are there um there's a bit called the

2520
01:54:57,920 --> 01:54:59,679
header uh that says

2521
01:54:59,679 --> 01:55:02,560
i've got an extended header so the next

2522
01:55:02,560 --> 01:55:03,119
word

2523
01:55:03,119 --> 01:55:07,199
the next label field is actually not a

2524
01:55:07,199 --> 01:55:08,080
label

2525
01:55:08,080 --> 01:55:11,119
but an extended special purpose

2526
01:55:11,119 --> 01:55:13,520
sorry more bits for the this

2527
01:55:13,520 --> 01:55:16,840
multi-purpose special purpose label

2528
01:55:16,840 --> 01:55:19,520
um 8 45

2529
01:55:19,520 --> 01:55:23,360
now it's 8 55. uh it's at the 10 minutes

2530
01:55:23,360 --> 01:55:24,239
uh

2531
01:55:24,239 --> 01:55:28,080
mark um um please uh you know

2532
01:55:28,080 --> 01:55:29,520
yeah i know that you asked for 10

2533
01:55:29,520 --> 01:55:31,679
minutes slot i'm just reminding you that

2534
01:55:31,679 --> 01:55:34,239
you're across the 10 minutes uh i will

2535
01:55:34,239 --> 01:55:35,199
try to give

2536
01:55:35,199 --> 01:55:37,679
free i'll be fair with i mean with the

2537
01:55:37,679 --> 01:55:38,719
approval of the

2538
01:55:38,719 --> 01:55:42,080
co-chairs and the the audience

2539
01:55:42,080 --> 01:55:45,280
um you know maybe we can go beyond uh uh

2540
01:55:45,280 --> 01:55:46,880
five minutes five minutes more

2541
01:55:46,880 --> 01:55:49,760
uh but please uh try to wrap up uh yeah

2542
01:55:49,760 --> 01:55:51,280
okay if you

2543
01:55:51,280 --> 01:55:53,920
thanks interesting that uh i'm the one

2544
01:55:53,920 --> 01:55:54,719
that gets

2545
01:55:54,719 --> 01:55:57,040
my time check and everyone else gets uh

2546
01:55:57,040 --> 01:55:57,760
whatever but

2547
01:55:57,760 --> 01:56:02,320
fine um because you complained

2548
01:56:02,320 --> 01:56:05,199
exactly yeah right um that's that's what

2549
01:56:05,199 --> 01:56:06,480
happens

2550
01:56:06,480 --> 01:56:09,280
so the the idea then is to encode in the

2551
01:56:09,280 --> 01:56:11,360
action bits that you see here

2552
01:56:11,360 --> 01:56:13,360
um the different types of special

2553
01:56:13,360 --> 01:56:15,440
purpose labels and based on those action

2554
01:56:15,440 --> 01:56:16,159
bits

2555
01:56:16,159 --> 01:56:18,080
they may be associated with data so if

2556
01:56:18,080 --> 01:56:20,000
the action bait is no further faster out

2557
01:56:20,000 --> 01:56:22,080
there isn't any associated data

2558
01:56:22,080 --> 01:56:24,719
but if that action bit says uh i'm an

2559
01:56:24,719 --> 01:56:25,599
entrepreneur

2560
01:56:25,599 --> 01:56:28,639
i carry entropy then the associated data

2561
01:56:28,639 --> 01:56:29,760
would be entropy

2562
01:56:29,760 --> 01:56:31,119
the other thing that's important to

2563
01:56:31,119 --> 01:56:33,440
realize is that associated data

2564
01:56:33,440 --> 01:56:36,480
could be all 31 bits

2565
01:56:36,480 --> 01:56:40,159
again subject to this whole question of

2566
01:56:40,159 --> 01:56:42,320
being able to reuse the tc and ttl

2567
01:56:42,320 --> 01:56:43,280
fields

2568
01:56:43,280 --> 01:56:45,840
so if you if you think about using a

2569
01:56:45,840 --> 01:56:48,080
single word for both uh

2570
01:56:48,080 --> 01:56:51,520
entropy label um i don't know if

2571
01:56:51,520 --> 01:56:52,960
everyone's seeing this but i'm seeing

2572
01:56:52,960 --> 01:56:54,800
something funky uh

2573
01:56:54,800 --> 01:56:58,239
so if you see uh entropy label and

2574
01:56:58,239 --> 01:57:01,119
uh slice id uh instead of trying to

2575
01:57:01,119 --> 01:57:02,239
squeeze everything into

2576
01:57:02,239 --> 01:57:04,560
20 bits you actually have 31 bits and i

2577
01:57:04,560 --> 01:57:05,920
think that

2578
01:57:05,920 --> 01:57:08,239
entropy of less than 16 bits i think is

2579
01:57:08,239 --> 01:57:09,679
pretty much useless

2580
01:57:09,679 --> 01:57:13,040
and a slice idea of less than uh 10 bits

2581
01:57:13,040 --> 01:57:15,840
i i i think 10 bits is already too small

2582
01:57:15,840 --> 01:57:17,520
so the idea that you have 15 bits of

2583
01:57:17,520 --> 01:57:18,400
slice and

2584
01:57:18,400 --> 01:57:21,679
16 bits of entropy i think is

2585
01:57:21,679 --> 01:57:23,679
reasonable but if that's not enough we

2586
01:57:23,679 --> 01:57:26,719
have an option where you can do more

2587
01:57:26,719 --> 01:57:30,000
the the high order bit of all this is

2588
01:57:30,000 --> 01:57:31,760
i think this is something that the mpls

2589
01:57:31,760 --> 01:57:33,119
working group has to look at

2590
01:57:33,119 --> 01:57:36,159
and say does this really work uh

2591
01:57:36,159 --> 01:57:39,199
and can we actually reuse the tc and ttl

2592
01:57:39,199 --> 01:57:39,599
bits

2593
01:57:39,599 --> 01:57:42,560
if you're not at the top of stack and if

2594
01:57:42,560 --> 01:57:43,199
you can

2595
01:57:43,199 --> 01:57:46,719
that really opens up two two

2596
01:57:46,719 --> 01:57:49,360
ideas one is that a special purpose

2597
01:57:49,360 --> 01:57:51,760
label can have multiple purposes

2598
01:57:51,760 --> 01:57:54,080
and so now each code point can actually

2599
01:57:54,080 --> 01:57:55,520
be much more effective

2600
01:57:55,520 --> 01:57:58,400
and the second is any associated data

2601
01:57:58,400 --> 01:57:59,520
can have a lot more

2602
01:57:59,520 --> 01:58:01,920
interesting data so it's not limited to

2603
01:58:01,920 --> 01:58:06,639
20 bits of data field it can be 31 bits

2604
01:58:06,639 --> 01:58:10,639
and so i'm going to leave it at that and

2605
01:58:10,639 --> 01:58:13,119
i'll let the chairs decide how they want

2606
01:58:13,119 --> 01:58:15,598
to proceed

2607
01:58:18,159 --> 01:58:21,199
we do we do want to take uh

2608
01:58:21,199 --> 01:58:24,480
a question uh at least or in fact uh let

2609
01:58:24,480 --> 01:58:26,480
me ask the co-chairs what what's their

2610
01:58:26,480 --> 01:58:29,679
perspective on this uh luanik

2611
01:58:29,679 --> 01:58:32,719
uh are you okay to you know we take uh

2612
01:58:32,719 --> 01:58:36,400
extra 10 minutes beyond the session

2613
01:58:36,400 --> 01:58:40,400
today or it's okay for me as long as the

2614
01:58:40,400 --> 01:58:43,199
session runs at long not sure about meet

2615
01:58:43,199 --> 01:58:45,519
echo

2616
01:58:45,760 --> 01:58:49,280
okay so what i've heard from previous

2617
01:58:49,280 --> 01:58:51,040
sessions is that meet echo doesn't

2618
01:58:51,040 --> 01:58:51,760
actually

2619
01:58:51,760 --> 01:58:53,920
end the session but i mean people may

2620
01:58:53,920 --> 01:58:54,880
want to go to

2621
01:58:54,880 --> 01:58:58,159
gather catholic town or something so

2622
01:58:58,159 --> 01:59:02,480
um i don't know they've changed policies

2623
01:59:02,480 --> 01:59:04,320
another alternative is to take the

2624
01:59:04,320 --> 01:59:06,159
questions uh after jeffrey

2625
01:59:06,159 --> 01:59:10,400
uh gives uh his talk um

2626
01:59:10,400 --> 01:59:12,480
actually i uh if people have a question

2627
01:59:12,480 --> 01:59:13,520
for greatly i think

2628
01:59:13,520 --> 01:59:15,679
it's better for for credit to proceed

2629
01:59:15,679 --> 01:59:17,199
first

2630
01:59:17,199 --> 01:59:18,560
thank you jeffrey thanks for

2631
01:59:18,560 --> 01:59:21,040
volunteering that stewart go ahead

2632
01:59:21,040 --> 01:59:22,800
you're i see you in the queue and you're

2633
01:59:22,800 --> 01:59:24,960
at the top of the queue

2634
01:59:24,960 --> 01:59:28,000
uh right so first off um

2635
01:59:28,000 --> 01:59:29,679
i'm a bit worried that we're you tending

2636
01:59:29,679 --> 01:59:31,679
to put things in the special purpose

2637
01:59:31,679 --> 01:59:32,800
labels set

2638
01:59:32,800 --> 01:59:35,199
when we're we should be putting them

2639
01:59:35,199 --> 01:59:36,400
actually in the fact

2640
01:59:36,400 --> 01:59:39,280
so for example uh you get you quoted the

2641
01:59:39,280 --> 01:59:41,280
case of do not fast reroute

2642
01:59:41,280 --> 01:59:44,159
the obvious way of dealing with that

2643
01:59:44,159 --> 01:59:44,719
would be

2644
01:59:44,719 --> 01:59:47,360
to send the original packet on effect

2645
01:59:47,360 --> 01:59:48,560
that had the property

2646
01:59:48,560 --> 01:59:51,280
that it was not to be fast re-routed and

2647
01:59:51,280 --> 01:59:52,639
that would be consistent with the

2648
01:59:52,639 --> 01:59:54,719
existing mpls architecture and not need

2649
01:59:54,719 --> 01:59:56,639
an extension

2650
01:59:56,639 --> 01:59:59,040
second uh you said that these special

2651
01:59:59,040 --> 02:00:00,239
purpose labels

2652
02:00:00,239 --> 02:00:02,480
mustn't be at the top of stack there are

2653
02:00:02,480 --> 02:00:03,440
some that

2654
02:00:03,440 --> 02:00:05,760
do go at the top stack at the moment gal

2655
02:00:05,760 --> 02:00:06,800
is a good example

2656
02:00:06,800 --> 02:00:10,000
in a php lsp so

2657
02:00:10,000 --> 02:00:12,000
we do need to be careful about backwards

2658
02:00:12,000 --> 02:00:13,119
compatibility

2659
02:00:13,119 --> 02:00:15,360
although perhaps you meant the new ones

2660
02:00:15,360 --> 02:00:17,760
must not be at the top of stack

2661
02:00:17,760 --> 02:00:21,040
um and thirdly about using putting other

2662
02:00:21,040 --> 02:00:23,520
bits and data in the stack

2663
02:00:23,520 --> 02:00:26,320
the itu wanted to do this some years ago

2664
02:00:26,320 --> 02:00:26,880
and we

2665
02:00:26,880 --> 02:00:30,239
gave the quite a sort of sharp reprimand

2666
02:00:30,239 --> 02:00:33,040
for uh suggesting this part of the basis

2667
02:00:33,040 --> 02:00:34,880
for that was that there was hardware in

2668
02:00:34,880 --> 02:00:36,400
that was deployed at the time that would

2669
02:00:36,400 --> 02:00:38,239
actually fall over if you tried

2670
02:00:38,239 --> 02:00:40,320
um to do it but we do need to be

2671
02:00:40,320 --> 02:00:41,760
consistent with

2672
02:00:41,760 --> 02:00:44,159
ourselves or at least be prepared to

2673
02:00:44,159 --> 02:00:47,199
justify why we have changed our minds

2674
02:00:47,199 --> 02:00:50,000
given the rather difficult conversations

2675
02:00:50,000 --> 02:00:51,440
we had on this very

2676
02:00:51,440 --> 02:00:55,839
topic not that many years ago thank you

2677
02:00:56,320 --> 02:00:58,960
um if i can respond to that thank you um

2678
02:00:58,960 --> 02:01:00,000
stuart

2679
02:01:00,000 --> 02:01:03,599
um i definitely agree that you know

2680
02:01:03,599 --> 02:01:05,599
decisions that we've made in the past

2681
02:01:05,599 --> 02:01:08,080
have to be refunded

2682
02:01:08,080 --> 02:01:10,719
and you know telling the itu what we

2683
02:01:10,719 --> 02:01:12,320
said at the time

2684
02:01:12,320 --> 02:01:14,400
we've changed a lot of things in the

2685
02:01:14,400 --> 02:01:15,520
forwarding path

2686
02:01:15,520 --> 02:01:17,760
so this idea that we have deep stacks

2687
02:01:17,760 --> 02:01:19,119
the idea that we

2688
02:01:19,119 --> 02:01:22,639
actually look well beyond the stack uh

2689
02:01:22,639 --> 02:01:25,360
i mean well beyond the top label uh and

2690
02:01:25,360 --> 02:01:26,000
in fact

2691
02:01:26,000 --> 02:01:28,000
uh even hunt for the end of stack and do

2692
02:01:28,000 --> 02:01:29,040
stuff with it

2693
02:01:29,040 --> 02:01:31,520
was something that was uh very difficult

2694
02:01:31,520 --> 02:01:32,719
to do

2695
02:01:32,719 --> 02:01:36,159
and sometimes uh you know

2696
02:01:36,159 --> 02:01:39,199
we we didn't want to force that decision

2697
02:01:39,199 --> 02:01:41,199
but we've already gone down that path so

2698
02:01:41,199 --> 02:01:43,599
we do say that for example

2699
02:01:43,599 --> 02:01:45,920
look at the labels and gather them for

2700
02:01:45,920 --> 02:01:48,000
doing better entropy

2701
02:01:48,000 --> 02:01:49,840
even if you don't have an entropy level

2702
02:01:49,840 --> 02:01:51,119
indicator

2703
02:01:51,119 --> 02:01:54,320
um yes to your question about uh the

2704
02:01:54,320 --> 02:01:57,440
uh the the

2705
02:01:57,440 --> 02:02:01,920
my suggestion was not that the

2706
02:02:01,920 --> 02:02:03,920
special purpose levels never appear on

2707
02:02:03,920 --> 02:02:05,520
top of stack but the special purpose

2708
02:02:05,520 --> 02:02:06,639
labels that

2709
02:02:06,639 --> 02:02:09,679
do twiddle with the tc and ttl bits

2710
02:02:09,679 --> 02:02:11,840
should not appear on the top of stand

2711
02:02:11,840 --> 02:02:14,560
so for example in many cases you do if

2712
02:02:14,560 --> 02:02:16,480
you do php but the

2713
02:02:16,480 --> 02:02:18,800
ultimate hop wants to see a label you

2714
02:02:18,800 --> 02:02:20,880
push uh level zero on that

2715
02:02:20,880 --> 02:02:23,599
uh so you're you i mean that's the case

2716
02:02:23,599 --> 02:02:25,679
where a special purpose level is on top

2717
02:02:25,679 --> 02:02:26,880
of stack

2718
02:02:26,880 --> 02:02:30,080
um so there is a slide which we haven't

2719
02:02:30,080 --> 02:02:32,080
gotten to which uh talks about next

2720
02:02:32,080 --> 02:02:33,360
steps

2721
02:02:33,360 --> 02:02:36,480
that basically says people who have

2722
02:02:36,480 --> 02:02:40,239
forwarding engines um yeah thank you

2723
02:02:40,239 --> 02:02:44,320
um you were just there um oh sorry

2724
02:02:44,320 --> 02:02:48,320
about this one back no uh it says on top

2725
02:02:48,320 --> 02:02:52,239
uh next steps so

2726
02:02:52,239 --> 02:02:54,800
yeah here proposed next step so the last

2727
02:02:54,800 --> 02:02:55,760
uh

2728
02:02:55,760 --> 02:02:59,119
slide last bullet basically says asic

2729
02:02:59,119 --> 02:03:01,119
vendors please look at this proposal and

2730
02:03:01,119 --> 02:03:03,199
send the author's feedback

2731
02:03:03,199 --> 02:03:07,040
um so the idea is that uh you know we've

2732
02:03:07,040 --> 02:03:08,159
talked with broadcom

2733
02:03:08,159 --> 02:03:10,880
uh on a couple of their chipsets we've

2734
02:03:10,880 --> 02:03:14,719
talked with our own asic uh

2735
02:03:14,719 --> 02:03:19,040
designers definitely that has to be done

2736
02:03:19,040 --> 02:03:21,599
and to some extent you know being

2737
02:03:21,599 --> 02:03:22,719
backward compatible

2738
02:03:22,719 --> 02:03:26,080
is important and you know

2739
02:03:26,080 --> 02:03:27,920
there are things in the field that will

2740
02:03:27,920 --> 02:03:29,679
remain in the field for a long time

2741
02:03:29,679 --> 02:03:32,880
and the question is can we not do damage

2742
02:03:32,880 --> 02:03:34,320
with with them

2743
02:03:34,320 --> 02:03:36,639
but at the same time you know the

2744
02:03:36,639 --> 02:03:37,920
position that we're in

2745
02:03:37,920 --> 02:03:40,480
where we've already overflowed the

2746
02:03:40,480 --> 02:03:43,760
number of base special purpose labels

2747
02:03:43,760 --> 02:03:45,199
and the fact that we're using these

2748
02:03:45,199 --> 02:03:47,119
special purpose labels you know in this

2749
02:03:47,119 --> 02:03:49,199
very single purpose way

2750
02:03:49,199 --> 02:03:51,920
uh is is not the ideal way of going

2751
02:03:51,920 --> 02:03:53,040
forward

2752
02:03:53,040 --> 02:03:55,920
so i think it it behooves us to look at

2753
02:03:55,920 --> 02:03:56,400
this

2754
02:03:56,400 --> 02:03:59,520
i'm not saying that it's a slam dunk and

2755
02:03:59,520 --> 02:04:00,639
and see

2756
02:04:00,639 --> 02:04:03,199
is it possible or not and uh how can we

2757
02:04:03,199 --> 02:04:03,760
make it

2758
02:04:03,760 --> 02:04:06,480
uh safe

2759
02:04:09,440 --> 02:04:14,000
okay um yeah

2760
02:04:14,000 --> 02:04:17,280
go ahead uh boy

2761
02:04:17,280 --> 02:04:20,560
are you a song hello uh

2762
02:04:20,560 --> 02:04:23,760
yeah i've just commented and uh

2763
02:04:23,760 --> 02:04:26,560
i find this the idea here and the

2764
02:04:26,560 --> 02:04:29,360
concept here is a very similar to a

2765
02:04:29,360 --> 02:04:31,119
draft to be submitted two and a half

2766
02:04:31,119 --> 02:04:33,119
years ago it's about

2767
02:04:33,119 --> 02:04:36,000
uh proposing an extension header for

2768
02:04:36,000 --> 02:04:37,040
mpos

2769
02:04:37,040 --> 02:04:40,480
to support a stack of network functions

2770
02:04:40,480 --> 02:04:44,079
um i think in my opinion our proposal is

2771
02:04:44,079 --> 02:04:44,639
actually

2772
02:04:44,639 --> 02:04:48,639
simpler and provide more features

2773
02:04:48,639 --> 02:04:51,440
allow us to you know quickly access any

2774
02:04:51,440 --> 02:04:52,880
extension headers

2775
02:04:52,880 --> 02:04:56,079
after the ips label stack so

2776
02:04:56,079 --> 02:04:59,040
if this idea is used interesting i urge

2777
02:04:59,040 --> 02:05:00,960
the working group to re-examine

2778
02:05:00,960 --> 02:05:04,960
our proposal as well thank you

2779
02:05:04,960 --> 02:05:07,760
thank you uh do you want to add to that

2780
02:05:07,760 --> 02:05:10,239
greeting

2781
02:05:10,719 --> 02:05:14,079
so um i'm sorry i missed that uh um

2782
02:05:14,079 --> 02:05:17,360
that draft i will go go and find it and

2783
02:05:17,360 --> 02:05:18,079
look at it

2784
02:05:18,079 --> 02:05:21,599
but the idea here is that um there

2785
02:05:21,599 --> 02:05:24,719
is special purpose labels

2786
02:05:24,719 --> 02:05:27,119
with data in the stack and then there's

2787
02:05:27,119 --> 02:05:27,920
uh data

2788
02:05:27,920 --> 02:05:30,639
beyond the stack and for the data beyond

2789
02:05:30,639 --> 02:05:31,440
the stack

2790
02:05:31,440 --> 02:05:34,800
the idea is just to have a bit or two

2791
02:05:34,800 --> 02:05:38,159
uh the reason for two bits is um from

2792
02:05:38,159 --> 02:05:38,560
the

2793
02:05:38,560 --> 02:05:41,920
uh iom proposal so you can have a bit

2794
02:05:41,920 --> 02:05:43,520
saying there's data beyond the end of

2795
02:05:43,520 --> 02:05:43,920
stack

2796
02:05:43,920 --> 02:05:46,159
uh but you don't need to see it until

2797
02:05:46,159 --> 02:05:46,960
you're there

2798
02:05:46,960 --> 02:05:49,440
uh egress and there's another that says

2799
02:05:49,440 --> 02:05:51,040
there's data be on the inner stack and

2800
02:05:51,040 --> 02:05:52,639
you might be interested in seeing it

2801
02:05:52,639 --> 02:05:55,360
even if you're a hop i hop uh you know a

2802
02:05:55,360 --> 02:05:57,040
transit router

2803
02:05:57,040 --> 02:05:59,199
um but we're basically assuming that

2804
02:05:59,199 --> 02:06:01,119
what comes beyond the end of stack

2805
02:06:01,119 --> 02:06:04,239
is self uh identifying so it's in a tlb

2806
02:06:04,239 --> 02:06:06,159
format and and you know how much there

2807
02:06:06,159 --> 02:06:07,920
is so we don't have to do a lot of stuff

2808
02:06:07,920 --> 02:06:08,800
there

2809
02:06:08,800 --> 02:06:11,040
uh the other part of this the bits that

2810
02:06:11,040 --> 02:06:11,920
we didn't get to

2811
02:06:11,920 --> 02:06:14,960
on the action bits essentially say that

2812
02:06:14,960 --> 02:06:16,079
the labels below

2813
02:06:16,079 --> 02:06:19,199
the fai label are actually

2814
02:06:19,199 --> 02:06:22,320
uh not labels but powering action

2815
02:06:22,320 --> 02:06:25,520
data and so you're encoding within the

2816
02:06:25,520 --> 02:06:26,400
label stack

2817
02:06:26,400 --> 02:06:27,920
stuff that might be interesting for

2818
02:06:27,920 --> 02:06:30,320
example if you look at the eli

2819
02:06:30,320 --> 02:06:32,719
uh the eli basically said the next level

2820
02:06:32,719 --> 02:06:34,239
is an entropy label

2821
02:06:34,239 --> 02:06:37,360
uh it it only had 20 bits of use but

2822
02:06:37,360 --> 02:06:40,000
i mean that same idea is being extended

2823
02:06:40,000 --> 02:06:41,280
here

2824
02:06:41,280 --> 02:06:44,239
and so the action bits would say i've

2825
02:06:44,239 --> 02:06:44,719
got

2826
02:06:44,719 --> 02:06:47,679
you know 31 bits in the next uh word and

2827
02:06:47,679 --> 02:06:49,679
31 bits in the word after that and so i

2828
02:06:49,679 --> 02:06:50,560
could have

2829
02:06:50,560 --> 02:06:53,440
the 31 bit entropy header and entropy

2830
02:06:53,440 --> 02:06:55,119
level and the 31 bit uh

2831
02:06:55,119 --> 02:06:59,360
yes class indicator and so on so

2832
02:06:59,360 --> 02:07:02,400
so the idea of the action bits is within

2833
02:07:02,400 --> 02:07:04,400
the label stack here's what's going on

2834
02:07:04,400 --> 02:07:06,400
and then there's just this extra bit or

2835
02:07:06,400 --> 02:07:08,400
two bits depending on how the

2836
02:07:08,400 --> 02:07:11,520
mpls group wants to go saying there is

2837
02:07:11,520 --> 02:07:13,440
data beyond the end of the stack

2838
02:07:13,440 --> 02:07:17,280
which you can now look at uh and parse

2839
02:07:17,280 --> 02:07:20,560
uh so so it's it's really about

2840
02:07:20,560 --> 02:07:27,840
trying to get stuff in the label size

2841
02:07:28,159 --> 02:07:31,280
yeah okay

2842
02:07:31,280 --> 02:07:34,880
um i i i don't think we can take

2843
02:07:34,880 --> 02:07:37,920
more questions uh jeffrey

2844
02:07:37,920 --> 02:07:41,360
do you think you can uh thank you kiriti

2845
02:07:41,360 --> 02:07:42,239
thanks a lot

2846
02:07:42,239 --> 02:07:44,719
uh i think we can follow up on this on

2847
02:07:44,719 --> 02:07:46,239
the list as well

2848
02:07:46,239 --> 02:07:48,639
um jeffrey do you think you can you can

2849
02:07:48,639 --> 02:07:50,320
wrap up in

2850
02:07:50,320 --> 02:07:52,079
10 minutes or i mean you can you can

2851
02:07:52,079 --> 02:07:53,599
present in 10 minutes is that

2852
02:07:53,599 --> 02:07:56,800
something doable on your side i'll do 30

2853
02:07:56,800 --> 02:07:58,719
seconds

2854
02:07:58,719 --> 02:08:02,239
uh i'll leave it up to you given

2855
02:08:02,239 --> 02:08:04,800
constraints go ahead yeah i just i just

2856
02:08:04,800 --> 02:08:06,719
do 30 seconds um

2857
02:08:06,719 --> 02:08:10,400
so um this is uh an update to a

2858
02:08:10,400 --> 02:08:13,599
presentation i did last time

2859
02:08:13,599 --> 02:08:16,800
um but this time we wanted to have more

2860
02:08:16,800 --> 02:08:19,920
nprs specific uh discussions in the mqs

2861
02:08:19,920 --> 02:08:20,800
group

2862
02:08:20,800 --> 02:08:23,520
um we didn't have time to do that but

2863
02:08:23,520 --> 02:08:24,159
there is

2864
02:08:24,159 --> 02:08:27,760
a presentation on the same topic

2865
02:08:27,760 --> 02:08:30,800
in the joint session with uh

2866
02:08:30,800 --> 02:08:34,400
with pow on friday

2867
02:08:34,400 --> 02:08:37,599
i would encourage people to attend to

2868
02:08:37,599 --> 02:08:40,880
that session um because

2869
02:08:40,880 --> 02:08:44,079
um while generic live function is

2870
02:08:44,079 --> 02:08:47,280
intended to be applicable to any layer

2871
02:08:47,280 --> 02:08:50,639
including mpos there are many mqs

2872
02:08:50,639 --> 02:08:54,320
religious aspects that we want to have a

2873
02:08:54,320 --> 02:08:58,000
discussion within mqs group um

2874
02:08:58,000 --> 02:09:00,880
listening to today's uh presentations i

2875
02:09:00,880 --> 02:09:03,440
realized that

2876
02:09:03,440 --> 02:09:06,480
this new idea of vtn

2877
02:09:06,480 --> 02:09:08,480
if we are going through uh forward with

2878
02:09:08,480 --> 02:09:09,760
that proposal

2879
02:09:09,760 --> 02:09:12,639
that we may also consider uh doing that

2880
02:09:12,639 --> 02:09:14,719
in the context of a generic delivery

2881
02:09:14,719 --> 02:09:15,440
function

2882
02:09:15,440 --> 02:09:19,119
so that it is not only used for mpos but

2883
02:09:19,119 --> 02:09:19,760
also

2884
02:09:19,760 --> 02:09:22,800
used for other forwarding plane as well

2885
02:09:22,800 --> 02:09:26,000
so um i really want to encourage people

2886
02:09:26,000 --> 02:09:27,599
to read the draft and then join the

2887
02:09:27,599 --> 02:09:33,760
discussion on friday

2888
02:09:33,760 --> 02:09:37,440
i think that's that's it for me

2889
02:09:37,920 --> 02:09:41,440
okay thank you jeffrey um

2890
02:09:41,440 --> 02:09:44,320
thank you for me too for giving me time

2891
02:09:44,320 --> 02:09:45,920
no problem thanks greeting and thanks

2892
02:09:45,920 --> 02:09:48,159
everybody for attending this session

2893
02:09:48,159 --> 02:09:51,520
um it was a a pleasure

2894
02:09:51,520 --> 02:09:55,199
um seeing you again uh we will see you

2895
02:09:55,199 --> 02:09:56,960
next time we meet and hopefully

2896
02:09:56,960 --> 02:09:58,840
remember there is a joint session on

2897
02:09:58,840 --> 02:10:02,719
friday we do hope to see you all there

2898
02:10:02,719 --> 02:10:05,520
any last words from you the loan nick

2899
02:10:05,520 --> 02:10:08,239
please go ahead

2900
02:10:08,560 --> 02:10:10,719
no nothing from my side thank you

2901
02:10:10,719 --> 02:10:12,320
everyone

2902
02:10:12,320 --> 02:10:15,760
all right hello i guess uh

2903
02:10:15,760 --> 02:10:18,079
you were having problems with the mic

2904
02:10:18,079 --> 02:10:20,719
yes audio problems so

2905
02:10:20,719 --> 02:10:22,960
okay

2906
02:10:24,560 --> 02:10:27,440
all right thank you so much see you uh

2907
02:10:27,440 --> 02:10:28,400
on friday

2908
02:10:28,400 --> 02:10:43,839
and during the week

2909
02:10:46,560 --> 02:10:48,639
you

