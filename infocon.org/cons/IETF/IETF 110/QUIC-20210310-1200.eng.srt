1
00:00:18,160 --> 00:00:19,600
i should give it another minute just to

2
00:00:19,600 --> 00:00:20,560
let some people

3
00:00:20,560 --> 00:00:24,320
um wake up and arrive

4
00:00:24,560 --> 00:00:31,840
yeah that sounds good

5
00:00:47,280 --> 00:00:49,600
when i'm unmuted can you guys hear my

6
00:00:49,600 --> 00:00:52,320
crazily blowing laptop fan

7
00:00:52,320 --> 00:00:59,840
or is it okay

8
00:01:00,320 --> 00:01:03,840
it sounds like you're like next to the

9
00:01:03,840 --> 00:01:12,000
equipment room of a hotel swimming pool

10
00:01:12,000 --> 00:01:13,200
i hope that gives you a nice mental

11
00:01:13,200 --> 00:01:15,760
image then

12
00:01:18,400 --> 00:01:19,520
yeah i don't know what it is i'm not

13
00:01:19,520 --> 00:01:21,200
running anything but firefox is really

14
00:01:21,200 --> 00:01:22,560
sort of

15
00:01:22,560 --> 00:01:24,400
not liking me decor very much i'm like

16
00:01:24,400 --> 00:01:26,240
at 8

17
00:01:26,240 --> 00:01:29,520
cpu on one car

18
00:01:31,840 --> 00:01:34,720
bitcoin mining

19
00:01:35,600 --> 00:01:40,240
um should we should we get started then

20
00:01:40,240 --> 00:01:42,960
okay um hello all welcome to the quick

21
00:01:42,960 --> 00:01:44,079
working group

22
00:01:44,079 --> 00:01:47,280
meeting session for itf 110 if you're

23
00:01:47,280 --> 00:01:48,640
not meant to be in this session

24
00:01:48,640 --> 00:01:50,640
please leave the room now while you have

25
00:01:50,640 --> 00:01:52,079
the opportunity

26
00:01:52,079 --> 00:01:54,960
um this is a virtual session we have

27
00:01:54,960 --> 00:01:55,439
today

28
00:01:55,439 --> 00:01:57,840
three chairs um just to help lift the

29
00:01:57,840 --> 00:01:58,880
load so

30
00:01:58,880 --> 00:02:02,159
um matt is uh

31
00:02:02,159 --> 00:02:05,360
our new chair um to come on board and

32
00:02:05,360 --> 00:02:05,759
help

33
00:02:05,759 --> 00:02:08,639
take over from lars as he transitions

34
00:02:08,639 --> 00:02:10,399
away i'll let lars maybe speak

35
00:02:10,399 --> 00:02:12,959
to some of that in a bit more um but

36
00:02:12,959 --> 00:02:15,120
yeah we've got a quite busy agenda today

37
00:02:15,120 --> 00:02:17,520
lots of presentations of adopted items

38
00:02:17,520 --> 00:02:18,400
with a few

39
00:02:18,400 --> 00:02:21,920
um you know as time permits stuff which

40
00:02:21,920 --> 00:02:23,680
we can come on to in the agenda bashing

41
00:02:23,680 --> 00:02:24,640
in a moment

42
00:02:24,640 --> 00:02:28,319
uh but yes the uh

43
00:02:28,319 --> 00:02:30,560
where are we the this is what we're

44
00:02:30,560 --> 00:02:31,840
looking like

45
00:02:31,840 --> 00:02:34,400
for now uh we did have some hackathon

46
00:02:34,400 --> 00:02:35,120
activity

47
00:02:35,120 --> 00:02:36,400
during the last week and lars is going

48
00:02:36,400 --> 00:02:38,560
to give an update of that

49
00:02:38,560 --> 00:02:41,040
i think um should probably try and open

50
00:02:41,040 --> 00:02:42,640
up the slides ready for this

51
00:02:42,640 --> 00:02:45,519
um and in terms of administrator we

52
00:02:45,519 --> 00:02:47,760
don't need to do blue sheets today

53
00:02:47,760 --> 00:02:50,959
because meet echo will do it for us

54
00:02:50,959 --> 00:02:52,959
we have a scribe in robin marks but if

55
00:02:52,959 --> 00:02:54,800
anyone would like to dive into cody md

56
00:02:54,800 --> 00:02:55,840
and help him out

57
00:02:55,840 --> 00:03:00,239
that would be fantastic um

58
00:03:00,239 --> 00:03:01,599
we should bring up the note well just in

59
00:03:01,599 --> 00:03:03,519
case you're not familiar with it

60
00:03:03,519 --> 00:03:06,400
we are

61
00:03:06,560 --> 00:03:08,480
part way through the week now um so you

62
00:03:08,480 --> 00:03:10,319
should be probably familiar with this

63
00:03:10,319 --> 00:03:11,920
but this details

64
00:03:11,920 --> 00:03:14,239
uh was a good entry point into detailing

65
00:03:14,239 --> 00:03:15,360
how you contribute

66
00:03:15,360 --> 00:03:19,200
to the itf um including you know

67
00:03:19,200 --> 00:03:21,599
lots of stuff around pattern policies or

68
00:03:21,599 --> 00:03:23,280
importantly our code of conduct

69
00:03:23,280 --> 00:03:25,360
and how you interact with the group um

70
00:03:25,360 --> 00:03:26,480
and participate

71
00:03:26,480 --> 00:03:28,720
so if you're not familiar please go away

72
00:03:28,720 --> 00:03:30,319
and look at the note well

73
00:03:30,319 --> 00:03:32,400
get yourself familiar with it and

74
00:03:32,400 --> 00:03:33,760
understand that

75
00:03:33,760 --> 00:03:36,319
this is how the itf and the quick

76
00:03:36,319 --> 00:03:37,920
working group in the itf

77
00:03:37,920 --> 00:03:40,319
like to do things so go back to the

78
00:03:40,319 --> 00:03:41,360
agenda

79
00:03:41,360 --> 00:03:46,159
uh hurry um

80
00:03:46,159 --> 00:03:47,200
chairs do we have any other

81
00:03:47,200 --> 00:03:49,120
administrative items that you would like

82
00:03:49,120 --> 00:03:51,760
to talk about

83
00:03:55,519 --> 00:04:01,840
no not really okay

84
00:04:03,519 --> 00:04:06,239
agenda i guess oh that's a good point so

85
00:04:06,239 --> 00:04:06,720
let me

86
00:04:06,720 --> 00:04:09,760
let me scroll down a bit um just to to

87
00:04:09,760 --> 00:04:12,000
give the full view of the agenda

88
00:04:12,000 --> 00:04:13,760
so to go through them in just a little

89
00:04:13,760 --> 00:04:15,360
bit more detail for people

90
00:04:15,360 --> 00:04:17,918
uh we'll we've got equal balance of time

91
00:04:17,918 --> 00:04:18,639
for

92
00:04:18,639 --> 00:04:20,238
uh presentations from the different

93
00:04:20,238 --> 00:04:22,040
adopted items so the ops drafts

94
00:04:22,040 --> 00:04:24,560
manageability and applicability slides

95
00:04:24,560 --> 00:04:26,320
um then we have tommy talking about the

96
00:04:26,320 --> 00:04:28,240
datagram slides

97
00:04:28,240 --> 00:04:30,479
sorry the data grammar extension then

98
00:04:30,479 --> 00:04:32,160
david talking about vision negotiation

99
00:04:32,160 --> 00:04:33,280
and finally martin

100
00:04:33,280 --> 00:04:36,560
with the quick lb um stuff we we think

101
00:04:36,560 --> 00:04:38,160
the quick lb might be a little heavier

102
00:04:38,160 --> 00:04:39,600
than the others which is why we put it

103
00:04:39,600 --> 00:04:40,800
at the end but

104
00:04:40,800 --> 00:04:43,040
um yeah we'll we'll try and get through

105
00:04:43,040 --> 00:04:44,160
those things

106
00:04:44,160 --> 00:04:45,759
and then we've got possible

107
00:04:45,759 --> 00:04:47,520
presentations from martin or jonah

108
00:04:47,520 --> 00:04:49,759
about their possible things we might

109
00:04:49,759 --> 00:04:51,440
want to adopt before moving on to some

110
00:04:51,440 --> 00:04:53,520
planning and wrap up so

111
00:04:53,520 --> 00:04:55,440
the question is to people does anyone

112
00:04:55,440 --> 00:04:58,560
want to bash that agenda

113
00:05:03,280 --> 00:05:08,400
so stepping in here magnus westland

114
00:05:09,120 --> 00:05:12,400
the re-charter did you have that on

115
00:05:12,400 --> 00:05:14,880
agenda

116
00:05:16,960 --> 00:05:20,240
no we don't because um

117
00:05:20,240 --> 00:05:22,000
there's nothing really to to do for us

118
00:05:22,000 --> 00:05:24,160
at the mall but we have a we have a

119
00:05:24,160 --> 00:05:26,400
charter proposal out i've seen one

120
00:05:26,400 --> 00:05:27,919
suggestion so far come in

121
00:05:27,919 --> 00:05:30,479
um that was like an editorial change

122
00:05:30,479 --> 00:05:32,000
that is easy to make

123
00:05:32,000 --> 00:05:35,199
um and i guess the call for feedback

124
00:05:35,199 --> 00:05:37,280
from the communities you know better

125
00:05:37,280 --> 00:05:39,680
than i might was another couple days

126
00:05:39,680 --> 00:05:42,160
yeah you have until the 18th to provide

127
00:05:42,160 --> 00:05:42,960
feedback

128
00:05:42,960 --> 00:05:44,720
so that's i guess is for general

129
00:05:44,720 --> 00:05:46,000
knowledge that if you

130
00:05:46,000 --> 00:05:48,960
please review the external if you the

131
00:05:48,960 --> 00:05:50,800
latest short text version and if you

132
00:05:50,800 --> 00:05:53,520
have any feedback provided by the 18th

133
00:05:53,520 --> 00:05:55,600
yeah and maybe it's sort of in just the

134
00:05:55,600 --> 00:05:57,280
summary is that the quick working group

135
00:05:57,280 --> 00:05:57,759
changes

136
00:05:57,759 --> 00:05:59,360
it's its format a little bit it's sort

137
00:05:59,360 --> 00:06:01,600
of now that we've we've

138
00:06:01,600 --> 00:06:03,919
finished version one of the documents or

139
00:06:03,919 --> 00:06:04,960
the base drafts we

140
00:06:04,960 --> 00:06:08,720
sort of changing changing gear and

141
00:06:08,720 --> 00:06:11,520
um the hdp part qpeg and http we're

142
00:06:11,520 --> 00:06:13,440
handing over to the hdbis working group

143
00:06:13,440 --> 00:06:14,720
for maintenance

144
00:06:14,720 --> 00:06:17,120
we are continuing to maintain the other

145
00:06:17,120 --> 00:06:18,960
documents that we have

146
00:06:18,960 --> 00:06:21,360
or we will soon publish we're also going

147
00:06:21,360 --> 00:06:22,000
to maintain

148
00:06:22,000 --> 00:06:24,560
operability and manageability uh

149
00:06:24,560 --> 00:06:26,319
documents and related ones

150
00:06:26,319 --> 00:06:28,479
we are going to maintain the extensions

151
00:06:28,479 --> 00:06:30,160
that we're gonna uh

152
00:06:30,160 --> 00:06:32,560
we have worked on already we're gonna do

153
00:06:32,560 --> 00:06:34,800
new extensions um

154
00:06:34,800 --> 00:06:38,639
those may uh or may not be in support of

155
00:06:38,639 --> 00:06:41,120
um higher layer protocol bindings too

156
00:06:41,120 --> 00:06:42,080
quick

157
00:06:42,080 --> 00:06:44,639
um i guess the sort of um the thinking

158
00:06:44,639 --> 00:06:45,360
is that

159
00:06:45,360 --> 00:06:47,120
if you want to layer a protocol on top

160
00:06:47,120 --> 00:06:48,479
of quick

161
00:06:48,479 --> 00:06:50,720
and you require a complicated extension

162
00:06:50,720 --> 00:06:52,000
to do that

163
00:06:52,000 --> 00:06:53,599
that extension we probably would want to

164
00:06:53,599 --> 00:06:55,199
do inside the quick working group

165
00:06:55,199 --> 00:06:56,400
if you need something very

166
00:06:56,400 --> 00:06:58,639
straightforward you know you can do that

167
00:06:58,639 --> 00:07:00,319
elsewhere in the itf together with your

168
00:07:00,319 --> 00:07:03,440
binding or even outside the itf

169
00:07:03,440 --> 00:07:05,199
so this is sort of a summary of what's

170
00:07:05,199 --> 00:07:06,400
written down in the charter in more

171
00:07:06,400 --> 00:07:08,319
detail if any of this is surprising to

172
00:07:08,319 --> 00:07:09,520
you you definitely want to read the

173
00:07:09,520 --> 00:07:10,479
charter text

174
00:07:10,479 --> 00:07:17,840
and comment on it

175
00:07:19,440 --> 00:07:23,360
thanks for that i think we can move on

176
00:07:23,919 --> 00:07:25,759
uh the other thing i'd like to add in

177
00:07:25,759 --> 00:07:26,960
case anyone's missed it

178
00:07:26,960 --> 00:07:29,919
is that the um the core transport

179
00:07:29,919 --> 00:07:31,680
documents have been

180
00:07:31,680 --> 00:07:35,599
um pushed through the iesg

181
00:07:35,599 --> 00:07:38,319
thanks to magnus um and all the efforts

182
00:07:38,319 --> 00:07:39,039
of everyone

183
00:07:39,039 --> 00:07:41,360
involved in the review process and uh

184
00:07:41,360 --> 00:07:42,479
addressing the feedback

185
00:07:42,479 --> 00:07:44,479
so if anyone's looking at this agenda

186
00:07:44,479 --> 00:07:45,599
and wondering why we're not talking

187
00:07:45,599 --> 00:07:46,000
about

188
00:07:46,000 --> 00:07:47,759
any issues on those documents it's

189
00:07:47,759 --> 00:07:49,520
because effectively they're

190
00:07:49,520 --> 00:07:51,440
they're done there's still some work to

191
00:07:51,440 --> 00:07:52,800
do in terms of

192
00:07:52,800 --> 00:07:55,840
all 48 etc kind of changes but

193
00:07:55,840 --> 00:07:57,680
yeah we've updated some of the guidance

194
00:07:57,680 --> 00:08:00,240
on the base dress repo just to say

195
00:08:00,240 --> 00:08:02,319
like we're not we're not accepting

196
00:08:02,319 --> 00:08:03,360
anything now

197
00:08:03,360 --> 00:08:06,000
um we're done here we're ready to ship

198
00:08:06,000 --> 00:08:07,440
we need to go through the process but

199
00:08:07,440 --> 00:08:09,039
please don't come along and open issues

200
00:08:09,039 --> 00:08:11,039
about it would be nice to have this or

201
00:08:11,039 --> 00:08:11,680
that

202
00:08:11,680 --> 00:08:13,759
if there's there's fundamental problems

203
00:08:13,759 --> 00:08:14,800
with the protocol

204
00:08:14,800 --> 00:08:17,840
security issues or major editorials we

205
00:08:17,840 --> 00:08:18,560
need to

206
00:08:18,560 --> 00:08:20,800
involve uh the whole community in the

207
00:08:20,800 --> 00:08:23,120
itf not just this working group

208
00:08:23,120 --> 00:08:25,360
and together with our responsible ad

209
00:08:25,360 --> 00:08:27,039
we'll be able to do that but

210
00:08:27,039 --> 00:08:28,879
yeah please please take this seriously

211
00:08:28,879 --> 00:08:30,240
because uh

212
00:08:30,240 --> 00:08:33,200
the ship is is going it's it's almost

213
00:08:33,200 --> 00:08:34,320
over the horizon

214
00:08:34,320 --> 00:08:37,839
so we can be very grateful but

215
00:08:37,839 --> 00:08:41,200
i'll uh i'll be quiet for now yeah one

216
00:08:41,200 --> 00:08:42,719
quick addition i talked to the rfc

217
00:08:42,719 --> 00:08:44,000
editor um

218
00:08:44,000 --> 00:08:46,160
the other day and the expectation is

219
00:08:46,160 --> 00:08:47,040
that we will see

220
00:08:47,040 --> 00:08:49,760
um the first batch of these documents

221
00:08:49,760 --> 00:08:50,320
pop out

222
00:08:50,320 --> 00:08:52,959
into auth 48 in in a time that sort of

223
00:08:52,959 --> 00:08:54,480
measured in weeks and not months

224
00:08:54,480 --> 00:08:56,720
so it's it's going to be reasonable soon

225
00:08:56,720 --> 00:08:57,600
since the queue

226
00:08:57,600 --> 00:09:00,000
over there is pretty short as you guys

227
00:09:00,000 --> 00:09:00,640
probably know

228
00:09:00,640 --> 00:09:04,080
the http related documents http and qpac

229
00:09:04,080 --> 00:09:07,200
um are waiting for some work in the http

230
00:09:07,200 --> 00:09:08,800
this working group will complete so

231
00:09:08,800 --> 00:09:10,959
those two won't be part of this initial

232
00:09:10,959 --> 00:09:12,399
batch that comes out but all the other

233
00:09:12,399 --> 00:09:13,440
documents

234
00:09:13,440 --> 00:09:14,959
which are let's see if we figured out

235
00:09:14,959 --> 00:09:17,200
invariants transport tls and recovery

236
00:09:17,200 --> 00:09:18,160
those four

237
00:09:18,160 --> 00:09:23,839
should come out in a matter of weeks

238
00:09:27,279 --> 00:09:28,880
um i mean the next item here is the

239
00:09:28,880 --> 00:09:30,399
hackathon report

240
00:09:30,399 --> 00:09:33,519
i don't know if you want to take that up

241
00:09:33,519 --> 00:09:36,640
plus yeah so the hackathons have become

242
00:09:36,640 --> 00:09:38,560
quite a bit not that they're virtual

243
00:09:38,560 --> 00:09:40,080
they have become quite

244
00:09:40,080 --> 00:09:42,560
a bit less busy than they used to be um

245
00:09:42,560 --> 00:09:44,160
and and maybe that's because i'm sort of

246
00:09:44,160 --> 00:09:45,760
in a time zone that's not where most

247
00:09:45,760 --> 00:09:46,959
everybody else is

248
00:09:46,959 --> 00:09:49,279
uh but also the spreadsheet uh looks

249
00:09:49,279 --> 00:09:50,720
pretty empty at the moment part of that

250
00:09:50,720 --> 00:09:51,920
is because we are sort of just

251
00:09:51,920 --> 00:09:55,519
switched over to using version one

252
00:09:55,519 --> 00:09:57,279
and not all stacks have sort of made

253
00:09:57,279 --> 00:09:59,120
that change yet

254
00:09:59,120 --> 00:10:01,600
and also a lot of the interrupt testing

255
00:10:01,600 --> 00:10:02,720
is now actually happen

256
00:10:02,720 --> 00:10:04,480
in an automated fashion all the time

257
00:10:04,480 --> 00:10:06,480
thanks to martin seaman

258
00:10:06,480 --> 00:10:09,200
and this interrupt runner and so there

259
00:10:09,200 --> 00:10:10,720
you have a bit more

260
00:10:10,720 --> 00:10:13,040
green which means implementations that

261
00:10:13,040 --> 00:10:14,160
already support

262
00:10:14,160 --> 00:10:16,480
zero x1 as a version wherever you see

263
00:10:16,480 --> 00:10:18,160
only red that means basically that

264
00:10:18,160 --> 00:10:19,680
implementation hasn't updated their

265
00:10:19,680 --> 00:10:20,320
image yet

266
00:10:20,320 --> 00:10:23,040
to speak version version one and i

267
00:10:23,040 --> 00:10:23,680
expect that

268
00:10:23,680 --> 00:10:26,959
that will become more green uh over time

269
00:10:26,959 --> 00:10:28,640
we have a question in the queue once we

270
00:10:28,640 --> 00:10:30,320
speak about that

271
00:10:30,320 --> 00:10:33,839
go ahead

272
00:10:38,000 --> 00:10:40,320
yes last one thing that did happen

273
00:10:40,320 --> 00:10:42,079
during the hackathon

274
00:10:42,079 --> 00:10:45,279
is the perf interrupt which you want to

275
00:10:45,279 --> 00:10:47,839
mention

276
00:10:48,560 --> 00:10:50,399
part of that so if you were please

277
00:10:50,399 --> 00:10:52,880
mention it

278
00:10:54,079 --> 00:10:55,600
i did not participate in the perth

279
00:10:55,600 --> 00:10:57,760
interrupt uh so if if there's anything

280
00:10:57,760 --> 00:10:58,560
to mention

281
00:10:58,560 --> 00:11:01,839
if you did please mention it yeah i mean

282
00:11:01,839 --> 00:11:02,800
basically

283
00:11:02,800 --> 00:11:08,160
about five uh five implementation

284
00:11:08,160 --> 00:11:10,800
did a performance interrupt that was

285
00:11:10,800 --> 00:11:12,160
driven

286
00:11:12,160 --> 00:11:15,680
by the the ms quick team at microsoft

287
00:11:15,680 --> 00:11:17,839
and did measurement of performance of

288
00:11:17,839 --> 00:11:19,200
quick

289
00:11:19,200 --> 00:11:22,320
uh basically in a variety of scenarios

290
00:11:22,320 --> 00:11:22,640
um

291
00:11:22,640 --> 00:11:25,839
but mostly download and upload

292
00:11:25,839 --> 00:11:28,480
and the great news is that all those

293
00:11:28,480 --> 00:11:30,079
implementation

294
00:11:30,079 --> 00:11:32,640
achieve speeds between uh one gigabit

295
00:11:32,640 --> 00:11:35,760
per second and five gigabit per second

296
00:11:35,760 --> 00:11:37,440
that is with just software

297
00:11:37,440 --> 00:11:40,480
implementations no hardware assist

298
00:11:40,480 --> 00:11:44,480
and and the um the interesting news is

299
00:11:44,480 --> 00:11:44,880
that

300
00:11:44,880 --> 00:11:47,360
the same implementation achieved

301
00:11:47,360 --> 00:11:49,200
performance between one big one gigabit

302
00:11:49,200 --> 00:11:50,800
per second and five gig per seconds

303
00:11:50,800 --> 00:11:52,800
depending on circumstances

304
00:11:52,800 --> 00:11:54,839
which mean that we still have work to do

305
00:11:54,839 --> 00:11:57,440
there but

306
00:11:57,440 --> 00:11:59,440
that's quite interesting it shows two

307
00:11:59,440 --> 00:12:02,160
things as you said i mean

308
00:12:02,160 --> 00:12:05,760
the academy is moving from basic stuff

309
00:12:05,760 --> 00:12:07,600
like a very thing that everybody can do

310
00:12:07,600 --> 00:12:09,519
zero rtt

311
00:12:09,519 --> 00:12:12,720
to uh performance like verifying that

312
00:12:12,720 --> 00:12:14,480
everybody can hit several gigabits of

313
00:12:14,480 --> 00:12:15,440
performance

314
00:12:15,440 --> 00:12:18,480
that's one part so it's maturity

315
00:12:18,480 --> 00:12:21,279
and the other thing which is interesting

316
00:12:21,279 --> 00:12:21,839
is that

317
00:12:21,839 --> 00:12:25,040
this shows that the work done by the

318
00:12:25,040 --> 00:12:27,600
various operating systems to make udp

319
00:12:27,600 --> 00:12:28,399
work better

320
00:12:28,399 --> 00:12:31,680
is starting to pay off i mean

321
00:12:31,680 --> 00:12:33,440
a year ago those performance would have

322
00:12:33,440 --> 00:12:35,920
been about 500 to 600 megabits

323
00:12:35,920 --> 00:12:38,959
instead of one to five gigabits

324
00:12:38,959 --> 00:12:41,600
and so the difference is because i mean

325
00:12:41,600 --> 00:12:42,959
they've been worked on

326
00:12:42,959 --> 00:12:46,320
in linux and in windows to make a udp

327
00:12:46,320 --> 00:12:47,920
faster with things like

328
00:12:47,920 --> 00:12:51,040
udp gso and

329
00:12:51,040 --> 00:12:53,040
that that is paying off that means that

330
00:12:53,040 --> 00:12:55,200
the the operating systems are in fact

331
00:12:55,200 --> 00:12:56,399
adapting too quick

332
00:12:56,399 --> 00:12:57,680
and that's good news for the working

333
00:12:57,680 --> 00:12:59,920
group

334
00:13:04,839 --> 00:13:07,839
overall

335
00:13:12,560 --> 00:13:15,760
i think we're ready to move on to our

336
00:13:15,760 --> 00:13:19,600
main gender items so uh miria would you

337
00:13:19,600 --> 00:13:20,240
like to

338
00:13:20,240 --> 00:13:21,760
join the queue and i can pull up your

339
00:13:21,760 --> 00:13:24,000
slides

340
00:13:24,000 --> 00:13:27,360
yeah actually brian is is presenting us

341
00:13:27,360 --> 00:13:29,839
i apologize i just i think because

342
00:13:29,839 --> 00:13:31,120
you've been doing all the work maria

343
00:13:31,120 --> 00:13:34,079
that you would be presenting

344
00:13:34,079 --> 00:13:35,360
it's me doing all the work in brian

345
00:13:35,360 --> 00:13:37,120
presenting um also

346
00:13:37,120 --> 00:13:39,360
you just did misspelled my last name in

347
00:13:39,360 --> 00:13:40,639
the agenda but

348
00:13:40,639 --> 00:13:43,120
no worries

349
00:13:44,880 --> 00:13:49,600
apologies a fixed fee

350
00:13:50,079 --> 00:13:52,399
so i guess um i can go ahead and i don't

351
00:13:52,399 --> 00:13:53,680
really actually need to be in the queue

352
00:13:53,680 --> 00:13:54,959
i can just go ahead and start sending

353
00:13:54,959 --> 00:13:55,600
apparently

354
00:13:55,600 --> 00:13:59,680
um hi uh i am not iriegnt uh and i will

355
00:13:59,680 --> 00:14:01,120
be talking about the

356
00:14:01,120 --> 00:14:02,480
operations drafts applicability

357
00:14:02,480 --> 00:14:05,519
manageability uh next slide uh this tl

358
00:14:05,519 --> 00:14:07,360
dr is mainly for people

359
00:14:07,360 --> 00:14:10,880
um who are not here today uh so they can

360
00:14:10,880 --> 00:14:12,079
tell whether they need to look at the

361
00:14:12,079 --> 00:14:13,279
slide deck or not

362
00:14:13,279 --> 00:14:16,079
um mainly thank you all very much for um

363
00:14:16,079 --> 00:14:16,720
uh

364
00:14:16,720 --> 00:14:18,000
participating in the working group last

365
00:14:18,000 --> 00:14:19,760
call it turns out that the working

366
00:14:19,760 --> 00:14:21,760
class call does in fact get people to

367
00:14:21,760 --> 00:14:23,360
read and re-read documents

368
00:14:23,360 --> 00:14:24,639
um so thank you for participating in

369
00:14:24,639 --> 00:14:27,199
that experiment um

370
00:14:27,199 --> 00:14:28,720
the tlbr is we think that we're good to

371
00:14:28,720 --> 00:14:30,480
go with applicability with some changes

372
00:14:30,480 --> 00:14:31,600
that we're going to be discussing

373
00:14:31,600 --> 00:14:33,680
discussing the day and making soon we

374
00:14:33,680 --> 00:14:34,720
might need to do another

375
00:14:34,720 --> 00:14:36,720
um uh working group class call on

376
00:14:36,720 --> 00:14:38,240
manageability after all the changes are

377
00:14:38,240 --> 00:14:39,279
merged

378
00:14:39,279 --> 00:14:41,279
um so we're going to talk about uh you

379
00:14:41,279 --> 00:14:42,720
know a couple of open issues with input

380
00:14:42,720 --> 00:14:43,920
a couple of things might need text we're

381
00:14:43,920 --> 00:14:45,519
going to talk about those right now

382
00:14:45,519 --> 00:14:48,639
so next slide um

383
00:14:48,639 --> 00:14:51,920
a recap uh updates in version

384
00:14:51,920 --> 00:14:54,720
revision 10 a bunch of editorial changes

385
00:14:54,720 --> 00:14:56,399
in both documents thank you everybody

386
00:14:56,399 --> 00:14:58,399
for all the reviews um

387
00:14:58,399 --> 00:15:02,160
a few um uh

388
00:15:02,160 --> 00:15:04,079
content changes that are primarily

389
00:15:04,079 --> 00:15:05,440
editorial or slightly more than

390
00:15:05,440 --> 00:15:06,560
editorial

391
00:15:06,560 --> 00:15:09,600
um the the big one here i think is a new

392
00:15:09,600 --> 00:15:11,680
section on icmp handling so if you have

393
00:15:11,680 --> 00:15:12,480
not

394
00:15:12,480 --> 00:15:14,480
uh it's this is number 249 in the

395
00:15:14,480 --> 00:15:16,160
manageability draft so if you have not

396
00:15:16,160 --> 00:15:18,399
had a look at revision 10

397
00:15:18,399 --> 00:15:20,399
these were mainly editorial mainly sort

398
00:15:20,399 --> 00:15:21,839
of like small um

399
00:15:21,839 --> 00:15:23,920
fixes before this meeting however there

400
00:15:23,920 --> 00:15:26,160
is some uh there are some changes to the

401
00:15:26,160 --> 00:15:26,560
uh

402
00:15:26,560 --> 00:15:28,399
to the the content so please do go have

403
00:15:28,399 --> 00:15:31,600
a look at those next slide

404
00:15:31,600 --> 00:15:35,920
um so we've got some open issues with

405
00:15:35,920 --> 00:15:37,279
proposed prs

406
00:15:37,279 --> 00:15:39,839
um a couple of things creating short

407
00:15:39,839 --> 00:15:40,959
sections that we did want to bring to

408
00:15:40,959 --> 00:15:42,079
the attention of the working group and

409
00:15:42,079 --> 00:15:42,560
get some

410
00:15:42,560 --> 00:15:45,600
some discussion on uh one uh

411
00:15:45,600 --> 00:15:47,680
adding some text on datagrams this is

412
00:15:47,680 --> 00:15:48,720
number 273

413
00:15:48,720 --> 00:15:51,920
addressing 269. um

414
00:15:51,920 --> 00:15:53,120
the main reason we want to bring this to

415
00:15:53,120 --> 00:15:54,560
people's attention is that it changes

416
00:15:54,560 --> 00:15:56,000
the reference structure of this document

417
00:15:56,000 --> 00:15:56,720
right like so

418
00:15:56,720 --> 00:15:58,800
it's a pr discussion extension it's the

419
00:15:58,800 --> 00:16:00,399
first time we would discuss

420
00:16:00,399 --> 00:16:02,959
an extension in these operations drafts

421
00:16:02,959 --> 00:16:04,800
um however since this is now a milestone

422
00:16:04,800 --> 00:16:06,240
of the working group it seems like it's

423
00:16:06,240 --> 00:16:10,320
it's a reasonable thing to point to um

424
00:16:10,320 --> 00:16:13,440
there is a recommendation on uh acting

425
00:16:13,440 --> 00:16:14,480
and reducing the

426
00:16:14,480 --> 00:16:17,120
um act rate on constrained links which

427
00:16:17,120 --> 00:16:18,800
we believe is ready to merge

428
00:16:18,800 --> 00:16:20,959
um please do go have a look at number

429
00:16:20,959 --> 00:16:22,480
233

430
00:16:22,480 --> 00:16:25,519
um if uh you have opinions on accra

431
00:16:25,519 --> 00:16:26,240
constraint

432
00:16:26,240 --> 00:16:28,240
uh we'd like a couple more eyeballs on

433
00:16:28,240 --> 00:16:30,000
this we will be intend to merge that one

434
00:16:30,000 --> 00:16:32,480
relatively soon so speak now

435
00:16:32,480 --> 00:16:36,480
um there's an open issue uh

436
00:16:36,480 --> 00:16:38,959
so we've basically talked uh about

437
00:16:38,959 --> 00:16:40,320
there's been some text going back and

438
00:16:40,320 --> 00:16:40,800
forth

439
00:16:40,800 --> 00:16:43,839
on um the use of probing packets in

440
00:16:43,839 --> 00:16:45,199
order to actually start getting

441
00:16:45,199 --> 00:16:47,040
information into a congestion controller

442
00:16:47,040 --> 00:16:48,880
about the capacity of a link

443
00:16:48,880 --> 00:16:51,600
um this is i i think we we had a

444
00:16:51,600 --> 00:16:53,040
different term for this at one point

445
00:16:53,040 --> 00:16:54,880
it's currently being called in this pr

446
00:16:54,880 --> 00:16:56,560
priming the cc there are questions as to

447
00:16:56,560 --> 00:16:58,240
what what is priming the cc i think we

448
00:16:58,240 --> 00:17:00,160
call that preheating at one point

449
00:17:00,160 --> 00:17:01,680
um there seems to be some going back and

450
00:17:01,680 --> 00:17:03,440
forth in the terminology here

451
00:17:03,440 --> 00:17:05,839
um we'd like some input here on whether

452
00:17:05,839 --> 00:17:06,480
we should

453
00:17:06,480 --> 00:17:08,480
change the wording or whether it's even

454
00:17:08,480 --> 00:17:10,319
important to say this we believe it is

455
00:17:10,319 --> 00:17:13,439
as the editors um but if we can't find a

456
00:17:13,439 --> 00:17:14,319
term that is

457
00:17:14,319 --> 00:17:17,439
is you know clear to people um then we

458
00:17:17,439 --> 00:17:18,160
could consider

459
00:17:18,160 --> 00:17:24,079
uh removing entirely um next slide

460
00:17:24,240 --> 00:17:28,000
moving to manageability um we have glory

461
00:17:28,000 --> 00:17:30,480
in the queue

462
00:17:30,840 --> 00:17:33,840
gorygo

463
00:17:34,720 --> 00:17:37,840
give the audio works but maybe it does

464
00:17:37,840 --> 00:17:40,960
cool and i'm not sure

465
00:17:40,960 --> 00:17:44,240
we need this text which is my main

466
00:17:44,240 --> 00:17:45,280
comment on that

467
00:17:45,280 --> 00:17:48,400
issue with the primer cc and

468
00:17:48,400 --> 00:17:51,039
if we don't say it we can still do it

469
00:17:51,039 --> 00:17:53,840
and in future we can specify it

470
00:17:53,840 --> 00:17:56,640
if we say here i think we really need to

471
00:17:56,640 --> 00:17:57,840
be careful

472
00:17:57,840 --> 00:18:00,799
we explain what prime means that

473
00:18:00,799 --> 00:18:02,080
somebody has looked at the cc

474
00:18:02,080 --> 00:18:04,559
implications of doing this badly

475
00:18:04,559 --> 00:18:06,799
and that we give appropriate advice and

476
00:18:06,799 --> 00:18:08,320
i'm not sure we're in the position to

477
00:18:08,320 --> 00:18:15,840
those last two

478
00:18:24,000 --> 00:18:25,600
happy to listen to other people if they

479
00:18:25,600 --> 00:18:29,840
think there is advice on those

480
00:18:34,080 --> 00:18:36,240
here we are yeah let me yeah let me

481
00:18:36,240 --> 00:18:37,120
reply to that

482
00:18:37,120 --> 00:18:39,679
so um the intention here really was just

483
00:18:39,679 --> 00:18:41,200
like to mention

484
00:18:41,200 --> 00:18:43,360
what pro packets can be used for this is

485
00:18:43,360 --> 00:18:44,960
a kind of a list of things and this is

486
00:18:44,960 --> 00:18:47,520
like one potential use of pro pack it's

487
00:18:47,520 --> 00:18:48,720
i don't think we're at the position

488
00:18:48,720 --> 00:18:50,160
where you want to like recommend a

489
00:18:50,160 --> 00:18:50,799
specific

490
00:18:50,799 --> 00:18:52,480
um algorithm or whatever because we

491
00:18:52,480 --> 00:18:55,039
don't have one um but i think it's still

492
00:18:55,039 --> 00:18:56,799
a good use it's still something that

493
00:18:56,799 --> 00:18:59,600
um can be very valuable in future um and

494
00:18:59,600 --> 00:19:01,280
i would like to have it in here i would

495
00:19:01,280 --> 00:19:03,200
just like to keep it mentioning as it is

496
00:19:03,200 --> 00:19:04,559
without like having a detailed

497
00:19:04,559 --> 00:19:06,160
explanation how to do it

498
00:19:06,160 --> 00:19:08,320
but if it's not clear what it means it

499
00:19:08,320 --> 00:19:10,320
doesn't doesn't help right so

500
00:19:10,320 --> 00:19:12,400
i guess not only we might not only want

501
00:19:12,400 --> 00:19:13,840
to find a different word but maybe add

502
00:19:13,840 --> 00:19:17,120
another sentence if we keep it

503
00:19:19,679 --> 00:19:22,000
christian

504
00:19:23,440 --> 00:19:26,960
i mean uh i i think that this is not

505
00:19:26,960 --> 00:19:29,919
really ready for prime time this uh

506
00:19:29,919 --> 00:19:33,200
priming uh i don't think that we have a

507
00:19:33,200 --> 00:19:34,080
whole lot of

508
00:19:34,080 --> 00:19:37,360
implementation experience with that so

509
00:19:37,360 --> 00:19:40,160
at that point that is speculative and i

510
00:19:40,160 --> 00:19:42,240
would rather not have speculative text

511
00:19:42,240 --> 00:19:43,760
in something that we are going to

512
00:19:43,760 --> 00:19:46,240
publish

513
00:19:50,840 --> 00:19:53,840
sorry

514
00:19:55,200 --> 00:19:58,000
a a a kind of making it more bland like

515
00:19:58,000 --> 00:19:58,480
say

516
00:19:58,480 --> 00:20:00,960
assist in determining the congestion

517
00:20:00,960 --> 00:20:03,200
controlled state for a new path

518
00:20:03,200 --> 00:20:06,720
or helping and

519
00:20:06,720 --> 00:20:08,320
just not hint at what the mechanism

520
00:20:08,320 --> 00:20:09,760
might be and then we're open to do

521
00:20:09,760 --> 00:20:11,440
whatever work we want to in the future

522
00:20:11,440 --> 00:20:20,559
as another possibility out of this

523
00:20:20,559 --> 00:20:22,240
yeah i guess we could uh we could

524
00:20:22,240 --> 00:20:23,600
actually just say that like

525
00:20:23,600 --> 00:20:26,960
um probing packets um can actually be

526
00:20:26,960 --> 00:20:30,000
padded with padding data and therefore

527
00:20:30,000 --> 00:20:31,440
also increase the congestion window

528
00:20:31,440 --> 00:20:35,840
without saying much more

529
00:20:36,640 --> 00:20:38,159
right i think that's the reason we do

530
00:20:38,159 --> 00:20:39,760
want to have something here

531
00:20:39,760 --> 00:20:42,799
is to sort of like provide a hint um you

532
00:20:42,799 --> 00:20:43,840
know so people don't have to

533
00:20:43,840 --> 00:20:45,840
independently reinvent this as they're

534
00:20:45,840 --> 00:20:47,039
they're trying to get data into the

535
00:20:47,039 --> 00:20:50,400
congestion controller so

536
00:20:52,400 --> 00:20:53,840
yeah and there was a comment in the chat

537
00:20:53,840 --> 00:20:55,679
saying this this is kind of internal and

538
00:20:55,679 --> 00:20:57,039
not really something that the

539
00:20:57,039 --> 00:20:58,880
application can impact but i think the

540
00:20:58,880 --> 00:21:00,240
reason why we mentioned it here because

541
00:21:00,240 --> 00:21:01,039
is because

542
00:21:01,039 --> 00:21:03,120
some of the applications might want to

543
00:21:03,120 --> 00:21:04,640
actually impact that so you might want

544
00:21:04,640 --> 00:21:06,240
to consider if you can provide any kind

545
00:21:06,240 --> 00:21:08,240
of interface for it

546
00:21:08,240 --> 00:21:10,720
um because it might be more important

547
00:21:10,720 --> 00:21:14,240
for for some applications than others

548
00:21:14,799 --> 00:21:16,640
it sounds like we've got enough input on

549
00:21:16,640 --> 00:21:19,200
this property

550
00:21:20,000 --> 00:21:21,520
that was what i was going to say so now

551
00:21:21,520 --> 00:21:24,320
i'm moving on to manageability

552
00:21:24,320 --> 00:21:27,440
um so uh

553
00:21:27,440 --> 00:21:29,280
we've got uh we've had some discussion

554
00:21:29,280 --> 00:21:31,120
on the text on udp timeouts

555
00:21:31,120 --> 00:21:33,600
um previously the document was uh citing

556
00:21:33,600 --> 00:21:35,520
i think some work that lars did about 15

557
00:21:35,520 --> 00:21:36,640
years ago

558
00:21:36,640 --> 00:21:38,960
on um the distribution of udp timeouts

559
00:21:38,960 --> 00:21:40,240
in the in the internet

560
00:21:40,240 --> 00:21:42,000
um saying we want to be longer than that

561
00:21:42,000 --> 00:21:43,840
30 seconds which is everywhere now we

562
00:21:43,840 --> 00:21:44,960
have

563
00:21:44,960 --> 00:21:47,760
um uh we're pointing to recommendations

564
00:21:47,760 --> 00:21:50,559
in rfc 4787 that says you know not less

565
00:21:50,559 --> 00:21:52,400
than two minutes for most udp traffic

566
00:21:52,400 --> 00:21:54,000
and please go above that

567
00:21:54,000 --> 00:21:56,000
we believe that this is the right most

568
00:21:56,000 --> 00:21:59,679
recent um uh

569
00:21:59,679 --> 00:22:01,120
advice that we want to give you know we

570
00:22:01,120 --> 00:22:02,559
also understand that like there's you

571
00:22:02,559 --> 00:22:03,919
know two minutes is what we're saying in

572
00:22:03,919 --> 00:22:04,880
terms of

573
00:22:04,880 --> 00:22:07,360
of of timeouts on the endpoints there's

574
00:22:07,360 --> 00:22:09,200
30 seconds in the network so

575
00:22:09,200 --> 00:22:12,240
there's a little bit of of um

576
00:22:12,240 --> 00:22:15,280
uh a difference between the advice and

577
00:22:15,280 --> 00:22:17,280
what's widely deployed right now

578
00:22:17,280 --> 00:22:20,559
uh but we do think that 4787 is the uh

579
00:22:20,559 --> 00:22:23,840
right recommendation so if um people

580
00:22:23,840 --> 00:22:25,520
have other input on that

581
00:22:25,520 --> 00:22:29,280
please jump on to pr222 before we merge

582
00:22:29,280 --> 00:22:30,400
it

583
00:22:30,400 --> 00:22:33,280
um we've also added the proposed section

584
00:22:33,280 --> 00:22:33,760
on

585
00:22:33,760 --> 00:22:38,400
um so guidance for path mtu uh

586
00:22:38,400 --> 00:22:39,919
so this is guidance that essentially

587
00:22:39,919 --> 00:22:42,000
says you know please drop a large quick

588
00:22:42,000 --> 00:22:43,760
packet rather than fragmenting it so

589
00:22:43,760 --> 00:22:44,400
that um

590
00:22:44,400 --> 00:22:46,000
quick gets the feedback that it needs to

591
00:22:46,000 --> 00:22:47,679
adjust its mtu

592
00:22:47,679 --> 00:22:49,200
um we've got a lot of review and

593
00:22:49,200 --> 00:22:50,799
wordsmithing already on this one we

594
00:22:50,799 --> 00:22:51,440
believe it's

595
00:22:51,440 --> 00:22:54,080
it's pretty close to ready to merge um

596
00:22:54,080 --> 00:22:55,840
if you are not aware of this pr and have

597
00:22:55,840 --> 00:22:58,320
opinions about um mtu probing uh

598
00:22:58,320 --> 00:22:59,760
with respect to the network treatment

599
00:22:59,760 --> 00:23:01,679
there um please jump on

600
00:23:01,679 --> 00:23:04,799
to 12. um the

601
00:23:04,799 --> 00:23:08,000
nat section has been rewritten um to uh

602
00:23:08,000 --> 00:23:09,360
minimize text there was some

603
00:23:09,360 --> 00:23:11,360
there was some redundancy in there it

604
00:23:11,360 --> 00:23:12,960
hadn't actually been

605
00:23:12,960 --> 00:23:15,360
um had a very fine editorial comb on it

606
00:23:15,360 --> 00:23:16,559
now it has

607
00:23:16,559 --> 00:23:18,320
it is an editorial or at least the

608
00:23:18,320 --> 00:23:19,919
intention is that it's editorial but

609
00:23:19,919 --> 00:23:21,360
it's huge

610
00:23:21,360 --> 00:23:23,280
so more eyeballs on that one before we

611
00:23:23,280 --> 00:23:26,640
merge it would be would be good

612
00:23:26,640 --> 00:23:29,679
um so on to the next slide we have a few

613
00:23:29,679 --> 00:23:32,799
uh minor issues on um keep or remove

614
00:23:32,799 --> 00:23:33,679
that we wanted to raise

615
00:23:33,679 --> 00:23:36,480
attention to um there's currently a line

616
00:23:36,480 --> 00:23:38,080
about the fact that um

617
00:23:38,080 --> 00:23:41,520
ff was used as a prefix for ietf draft

618
00:23:41,520 --> 00:23:43,039
versions

619
00:23:43,039 --> 00:23:45,440
which references previous text in the

620
00:23:45,440 --> 00:23:47,360
transport draft i i think about that

621
00:23:47,360 --> 00:23:48,720
which has now been removed from

622
00:23:48,720 --> 00:23:49,600
transport

623
00:23:49,600 --> 00:23:51,039
there's a question is we want to whether

624
00:23:51,039 --> 00:23:53,520
we want to keep this around as

625
00:23:53,520 --> 00:23:56,080
a pointer to sort of a historical state

626
00:23:56,080 --> 00:23:57,840
of there are implementations out there

627
00:23:57,840 --> 00:23:59,440
that that might still use this

628
00:23:59,440 --> 00:24:01,679
um this convention and here's what they

629
00:24:01,679 --> 00:24:03,039
mean

630
00:24:03,039 --> 00:24:07,520
um so there's an algorithm

631
00:24:07,520 --> 00:24:11,360
uh in 244

632
00:24:11,360 --> 00:24:14,080
uh for basically figuring out which

633
00:24:14,080 --> 00:24:15,440
quick version you're dealing with this

634
00:24:15,440 --> 00:24:15,919
was

635
00:24:15,919 --> 00:24:19,279
um uh there's stuff in

636
00:24:19,279 --> 00:24:20,640
section nine talks about the algorithm

637
00:24:20,640 --> 00:24:21,440
and then there's like you know

638
00:24:21,440 --> 00:24:22,880
pseudocode in the appendix

639
00:24:22,880 --> 00:24:25,600
uh that goes into more detail uh there's

640
00:24:25,600 --> 00:24:27,679
a request in this issue to remove the

641
00:24:27,679 --> 00:24:29,440
the text in the appendix however it

642
00:24:29,440 --> 00:24:30,880
might be helpful for the community so

643
00:24:30,880 --> 00:24:32,000
we'd like more input

644
00:24:32,000 --> 00:24:35,760
on that as well again please in the uh

645
00:24:35,760 --> 00:24:38,880
uh in the bug that's number 244 just

646
00:24:38,880 --> 00:24:39,840
like what

647
00:24:39,840 --> 00:24:41,360
section 9 is the appendix with the

648
00:24:41,360 --> 00:24:45,760
algorithm oh did we not fix

649
00:24:45,760 --> 00:24:47,200
i i i thought we actually merged the

650
00:24:47,200 --> 00:24:48,559
thing where that is now actually

651
00:24:48,559 --> 00:24:49,360
appendix a

652
00:24:49,360 --> 00:24:52,080
but okay so it is the appendix okay but

653
00:24:52,080 --> 00:24:53,679
the issue was there before

654
00:24:53,679 --> 00:24:56,320
right got it so yeah do we want to keep

655
00:24:56,320 --> 00:24:57,360
this or not

656
00:24:57,360 --> 00:24:59,840
um magnus wanted to say something yeah i

657
00:24:59,840 --> 00:25:01,919
have a comment on 279

658
00:25:01,919 --> 00:25:04,960
on the oh okay yeah i

659
00:25:04,960 --> 00:25:07,679
think it might be simpler if we actually

660
00:25:07,679 --> 00:25:09,440
get the

661
00:25:09,440 --> 00:25:11,760
previously used draft versions into the

662
00:25:11,760 --> 00:25:13,600
registry

663
00:25:13,600 --> 00:25:15,840
the official registry and then we can

664
00:25:15,840 --> 00:25:17,760
actually point to that

665
00:25:17,760 --> 00:25:20,480
uh that these were draft versions those

666
00:25:20,480 --> 00:25:22,880
that were actually used

667
00:25:22,880 --> 00:25:25,039
so those are those are fcfs right like

668
00:25:25,039 --> 00:25:26,640
so we can basically just send an email

669
00:25:26,640 --> 00:25:28,640
to lyanna and it's done

670
00:25:28,640 --> 00:25:32,000
yeah okay um

671
00:25:32,000 --> 00:25:33,760
yeah that also that would be wasn't

672
00:25:33,760 --> 00:25:35,039
there a discussion that people don't

673
00:25:35,039 --> 00:25:43,840
want to do that i'm not sure

674
00:25:45,440 --> 00:25:47,120
there has been some discussions back and

675
00:25:47,120 --> 00:25:49,200
forth and i don't know so that's maybe

676
00:25:49,200 --> 00:25:53,200
horrible to have feedback on this but

677
00:25:54,840 --> 00:25:57,840
it's

678
00:26:02,559 --> 00:26:06,720
so getting all the versions we know

679
00:26:06,720 --> 00:26:07,120
about

680
00:26:07,120 --> 00:26:08,880
into the registry should be relatively

681
00:26:08,880 --> 00:26:10,720
straightforward we can just do a quick

682
00:26:10,720 --> 00:26:13,919
poll we can scrub the um the wiki that

683
00:26:13,919 --> 00:26:15,120
we have

684
00:26:15,120 --> 00:26:17,279
and um i think we're in the process of

685
00:26:17,279 --> 00:26:19,360
appointing experts for those re

686
00:26:19,360 --> 00:26:21,600
for those registries now so we're not

687
00:26:21,600 --> 00:26:23,520
quite at the point where we can

688
00:26:23,520 --> 00:26:26,320
uh where we can take those things but we

689
00:26:26,320 --> 00:26:27,279
should be able to have that

690
00:26:27,279 --> 00:26:28,720
in time for this document to be

691
00:26:28,720 --> 00:26:30,559
published okay

692
00:26:30,559 --> 00:26:32,080
okay perfect now we can just plug in

693
00:26:32,080 --> 00:26:33,360
that sounds like that sounds like it

694
00:26:33,360 --> 00:26:34,480
sounds like that one's resolved

695
00:26:34,480 --> 00:26:36,320
yay thank you magnus for stopping me

696
00:26:36,320 --> 00:26:38,640
through my race through this document

697
00:26:38,640 --> 00:26:41,919
um and then a

698
00:26:41,919 --> 00:26:45,919
a third uh a bit on

699
00:26:45,919 --> 00:26:48,240
connection id requirements uh i believe

700
00:26:48,240 --> 00:26:50,080
that this was originally

701
00:26:50,080 --> 00:26:51,919
before these were tightened up this is

702
00:26:51,919 --> 00:26:53,520
older text i believe uh before these

703
00:26:53,520 --> 00:26:54,320
were tightened up

704
00:26:54,320 --> 00:26:57,840
in the um uh transport document we

705
00:26:57,840 --> 00:26:59,440
wanted to have some text here and now it

706
00:26:59,440 --> 00:27:01,440
essentially just repeats what's in the

707
00:27:01,440 --> 00:27:04,080
the transport document so is there a

708
00:27:04,080 --> 00:27:06,000
need to repeat

709
00:27:06,000 --> 00:27:09,770
um the

710
00:27:09,770 --> 00:27:10,960
[Music]

711
00:27:10,960 --> 00:27:13,120
requirements to obscure any encoding uh

712
00:27:13,120 --> 00:27:14,320
that are already in the transport

713
00:27:14,320 --> 00:27:17,760
document so that's a keeper remove

714
00:27:17,760 --> 00:27:19,520
um if you have an opinion there please

715
00:27:19,520 --> 00:27:21,600
go talk to us on 243.

716
00:27:21,600 --> 00:27:23,679
um i got one more slide and then we'll

717
00:27:23,679 --> 00:27:25,279
use balance of time to talk about go

718
00:27:25,279 --> 00:27:26,799
back and talk about any other

719
00:27:26,799 --> 00:27:28,960
uh questions we do have two open issues

720
00:27:28,960 --> 00:27:30,640
for which we would really really really

721
00:27:30,640 --> 00:27:31,679
like to have some help

722
00:27:31,679 --> 00:27:35,520
from authors um so endpoint cooperation

723
00:27:35,520 --> 00:27:37,039
on dos mitigation

724
00:27:37,039 --> 00:27:40,399
uh so basically you know how uh like

725
00:27:40,399 --> 00:27:43,520
talking about how a um

726
00:27:43,520 --> 00:27:46,720
uh a like dos

727
00:27:46,720 --> 00:27:48,960
classification could be done with um

728
00:27:48,960 --> 00:27:50,799
knowledge that comes from the server on

729
00:27:50,799 --> 00:27:52,000
your endpoint

730
00:27:52,000 --> 00:27:53,760
about at least connection id links if

731
00:27:53,760 --> 00:27:55,279
not connection id data

732
00:27:55,279 --> 00:27:57,919
uh so that would need uh we would need

733
00:27:57,919 --> 00:27:59,200
text on that

734
00:27:59,200 --> 00:28:00,880
uh if there are authors who would like

735
00:28:00,880 --> 00:28:03,120
to help us please jump into 240

736
00:28:03,120 --> 00:28:06,799
or just assign it to yourself um

737
00:28:06,799 --> 00:28:09,039
same with respect to our uh

738
00:28:09,039 --> 00:28:11,120
recommendation to tell metal boxes to

739
00:28:11,120 --> 00:28:15,520
uh ignore the version um

740
00:28:15,520 --> 00:28:18,320
so uh there's a request to basically you

741
00:28:18,320 --> 00:28:18,799
know

742
00:28:18,799 --> 00:28:21,600
take this text and and and put more

743
00:28:21,600 --> 00:28:23,120
information about why we'd want to do

744
00:28:23,120 --> 00:28:24,480
this right like a motivation for

745
00:28:24,480 --> 00:28:26,320
allowing upgrade as opposed to

746
00:28:26,320 --> 00:28:29,600
thou shalt um so

747
00:28:29,600 --> 00:28:32,559
that's on 178 also seeking authors for

748
00:28:32,559 --> 00:28:33,919
that one

749
00:28:33,919 --> 00:28:37,279
um yeah i think on on 178 it's really

750
00:28:37,279 --> 00:28:38,960
also about what's the recommendation we

751
00:28:38,960 --> 00:28:41,120
actually want to give here like the

752
00:28:41,120 --> 00:28:42,640
current recommendation is stated here

753
00:28:42,640 --> 00:28:44,559
but the the issue was also about is that

754
00:28:44,559 --> 00:28:45,520
the right

755
00:28:45,520 --> 00:28:47,840
recommendation do we need to change this

756
00:28:47,840 --> 00:28:49,120
and then like what would be the new

757
00:28:49,120 --> 00:28:50,080
recommendation so

758
00:28:50,080 --> 00:28:51,279
this would be helpful if more people

759
00:28:51,279 --> 00:28:54,720
could look at this and comment on this

760
00:28:55,919 --> 00:28:58,720
so um to the last oh go ahead corey has

761
00:28:58,720 --> 00:29:01,360
a comment on this

762
00:29:02,480 --> 00:29:04,880
yeah i may have been a part in both of

763
00:29:04,880 --> 00:29:05,760
these perhaps

764
00:29:05,760 --> 00:29:07,200
and i'm still interested in finding the

765
00:29:07,200 --> 00:29:09,039
right answers here because

766
00:29:09,039 --> 00:29:10,559
these are these are actually two tricky

767
00:29:10,559 --> 00:29:12,720
ones from where i was

768
00:29:12,720 --> 00:29:15,039
the last one might be more to do with

769
00:29:15,039 --> 00:29:18,000
the um

770
00:29:18,080 --> 00:29:19,600
whether it's a constrained environment

771
00:29:19,600 --> 00:29:21,600
or an enterprise or a different

772
00:29:21,600 --> 00:29:23,760
deployment context to which many people

773
00:29:23,760 --> 00:29:24,640
are thinking about

774
00:29:24,640 --> 00:29:28,080
quick so that if we think about them in

775
00:29:28,080 --> 00:29:30,000
that context maybe we get a bit more

776
00:29:30,000 --> 00:29:32,320
view if anyone is willing to try and

777
00:29:32,320 --> 00:29:34,240
provide text i was certainly willing to

778
00:29:34,240 --> 00:29:37,039
help contribute

779
00:29:38,720 --> 00:29:41,760
okay cool

780
00:29:41,760 --> 00:29:43,919
you were talking about 240 or 178 or

781
00:29:43,919 --> 00:29:46,159
both

782
00:29:46,559 --> 00:29:48,159
they're talking more about 240 correct

783
00:29:48,159 --> 00:29:49,760
the the endpoint cooperation on dos

784
00:29:49,760 --> 00:29:51,279
mitigation

785
00:29:51,279 --> 00:29:53,760
yeah but but maybe also it's one seven

786
00:29:53,760 --> 00:29:54,399
eight

787
00:29:54,399 --> 00:29:56,559
the the situation where you control

788
00:29:56,559 --> 00:29:57,919
those boxes

789
00:29:57,919 --> 00:30:00,000
may be very different for an enterprise

790
00:30:00,000 --> 00:30:02,080
right in the way they think about this

791
00:30:02,080 --> 00:30:04,799
so mainly 240 but now i see also it's

792
00:30:04,799 --> 00:30:06,640
perhaps the same for 178.

793
00:30:06,640 --> 00:30:08,240
cool miria let's assign both of these to

794
00:30:08,240 --> 00:30:10,799
gory yeah

795
00:30:11,600 --> 00:30:14,000
seriously i mean if you if you could

796
00:30:14,000 --> 00:30:14,720
just like

797
00:30:14,720 --> 00:30:16,399
try to write something down because i

798
00:30:16,399 --> 00:30:17,600
think if you write something down that

799
00:30:17,600 --> 00:30:19,840
people disagree with that would like

800
00:30:19,840 --> 00:30:21,440
bring the people on the table and

801
00:30:21,440 --> 00:30:23,279
actually say something

802
00:30:23,279 --> 00:30:24,720
so having some text is better than

803
00:30:24,720 --> 00:30:27,200
having no text

804
00:30:27,200 --> 00:30:28,880
sure the reason we're talking about it

805
00:30:28,880 --> 00:30:30,480
here is because we will need eyes on

806
00:30:30,480 --> 00:30:31,760
this because this is something we need

807
00:30:31,760 --> 00:30:32,799
consensus on

808
00:30:32,799 --> 00:30:36,159
not one opinion right

809
00:30:36,159 --> 00:30:39,120
okay we'll do something cool so gloria

810
00:30:39,120 --> 00:30:40,240
we can sign you up to

811
00:30:40,240 --> 00:30:41,760
to get us started on that excellent

812
00:30:41,760 --> 00:30:43,360
thanks so much so that

813
00:30:43,360 --> 00:30:45,919
brings us to the end um you can go and

814
00:30:45,919 --> 00:30:47,120
look at the last slide but it's

815
00:30:47,120 --> 00:30:48,559
basically you know

816
00:30:48,559 --> 00:30:51,279
uh step one merge pr step two question

817
00:30:51,279 --> 00:30:52,799
mark step three publish

818
00:30:52,799 --> 00:30:56,000
um so uh again i think

819
00:30:56,000 --> 00:30:58,559
uh i haven't heard anything here that

820
00:30:58,559 --> 00:30:59,519
changes

821
00:30:59,519 --> 00:31:03,840
um uh our estimation that we are

822
00:31:03,840 --> 00:31:05,760
definitely ready sort of after we we

823
00:31:05,760 --> 00:31:07,600
close the last issues

824
00:31:07,600 --> 00:31:10,960
um on uh applicability but well

825
00:31:10,960 --> 00:31:13,039
ready like post wglc we're ready to send

826
00:31:13,039 --> 00:31:15,200
it up we'll have to look at what comes

827
00:31:15,200 --> 00:31:18,480
out of the resolution to the uh

828
00:31:18,480 --> 00:31:20,320
the issues on manageability to see if

829
00:31:20,320 --> 00:31:21,679
there are enough changes to ask for

830
00:31:21,679 --> 00:31:25,200
another working group last call or not

831
00:31:26,399 --> 00:31:28,080
yes how much more time do we have to

832
00:31:28,080 --> 00:31:30,480
discuss this like any other

833
00:31:30,480 --> 00:31:33,039
comments questions on these or or do we

834
00:31:33,039 --> 00:31:34,240
need to move on

835
00:31:34,240 --> 00:31:37,120
if there's something really important um

836
00:31:37,120 --> 00:31:38,000
you might have like

837
00:31:38,000 --> 00:31:40,640
a minute but beyond that i think i think

838
00:31:40,640 --> 00:31:42,080
this gives a good picture of where we're

839
00:31:42,080 --> 00:31:42,399
at

840
00:31:42,399 --> 00:31:45,120
and we've got some people signed up to

841
00:31:45,120 --> 00:31:45,519
help

842
00:31:45,519 --> 00:31:48,640
guys keep cranking that handle so um

843
00:31:48,640 --> 00:31:50,480
there's other editorial issues on that

844
00:31:50,480 --> 00:31:51,919
because

845
00:31:51,919 --> 00:31:54,960
so if people feel inspired please check

846
00:31:54,960 --> 00:31:58,880
it out and get involved i would say

847
00:31:59,039 --> 00:32:00,960
all right thank you very much thank you

848
00:32:00,960 --> 00:32:03,200
brian um let's move on to the next slide

849
00:32:03,200 --> 00:32:15,120
which is datagram

850
00:32:15,120 --> 00:32:17,600
all right good morning and afternoon

851
00:32:17,600 --> 00:32:18,240
everyone

852
00:32:18,240 --> 00:32:21,279
um all of you people in europe are

853
00:32:21,279 --> 00:32:24,799
making me feel more tired i feel

854
00:32:24,960 --> 00:32:27,679
okay so um we'll be talking about

855
00:32:27,679 --> 00:32:28,720
datagram here

856
00:32:28,720 --> 00:32:31,360
um this is one of the adopted extensions

857
00:32:31,360 --> 00:32:33,120
we have

858
00:32:33,120 --> 00:32:36,240
and i'll be presenting on behalf of our

859
00:32:36,240 --> 00:32:37,519
co-editors

860
00:32:37,519 --> 00:32:42,799
next slide please

861
00:32:42,799 --> 00:32:46,480
all right so the status here is

862
00:32:46,480 --> 00:32:48,480
i think we're in pretty good shape we

863
00:32:48,480 --> 00:32:50,320
have

864
00:32:50,320 --> 00:32:51,679
looking through the issues list i would

865
00:32:51,679 --> 00:32:53,600
say four substantive

866
00:32:53,600 --> 00:32:55,360
open issues that's the ones that we want

867
00:32:55,360 --> 00:32:56,960
to discuss today

868
00:32:56,960 --> 00:32:58,320
there are a couple other editorial

869
00:32:58,320 --> 00:33:00,320
issues that you can go and look at

870
00:33:00,320 --> 00:33:03,440
on the github and i want to highlight

871
00:33:03,440 --> 00:33:04,960
that this

872
00:33:04,960 --> 00:33:08,799
work is actively the basis for what's

873
00:33:08,799 --> 00:33:10,480
going on in the mask

874
00:33:10,480 --> 00:33:13,679
and web transport working groups

875
00:33:13,679 --> 00:33:16,080
so please you know if you're really

876
00:33:16,080 --> 00:33:17,440
interested in this stuff

877
00:33:17,440 --> 00:33:19,120
if you go there you'll have all the time

878
00:33:19,120 --> 00:33:21,200
you want to argue about the details of

879
00:33:21,200 --> 00:33:23,360
how you use datagrams

880
00:33:23,360 --> 00:33:25,120
and those are very active and i want to

881
00:33:25,120 --> 00:33:27,120
highlight also that

882
00:33:27,120 --> 00:33:29,919
mask has been doing interop testing it

883
00:33:29,919 --> 00:33:31,919
did that last week during hackathon so

884
00:33:31,919 --> 00:33:33,519
we have

885
00:33:33,519 --> 00:33:36,840
you know four or five plus different

886
00:33:36,840 --> 00:33:38,799
implementations doing interop

887
00:33:38,799 --> 00:33:41,039
with datagrams and application work on

888
00:33:41,039 --> 00:33:42,159
top of datagrams

889
00:33:42,159 --> 00:33:45,440
so um i think we now have a pretty good

890
00:33:45,440 --> 00:33:46,240
experience

891
00:33:46,240 --> 00:33:48,880
using this and we're in a place where we

892
00:33:48,880 --> 00:33:49,519
can

893
00:33:49,519 --> 00:33:52,720
hopefully close out the issues and make

894
00:33:52,720 --> 00:33:55,440
good decisions about them and our

895
00:33:55,440 --> 00:33:57,679
milestone currently

896
00:33:57,679 --> 00:34:00,880
is to have this shipped off to the isg

897
00:34:00,880 --> 00:34:04,240
by july so i think we can do it

898
00:34:04,240 --> 00:34:06,159
let's just try to converge on these

899
00:34:06,159 --> 00:34:08,159
issues and get it shipped

900
00:34:08,159 --> 00:34:10,960
so next slide

901
00:34:12,159 --> 00:34:15,199
all right so jumping right in thank you

902
00:34:15,199 --> 00:34:17,599
for resizing

903
00:34:17,599 --> 00:34:21,040
so i'm gonna go in interest of time

904
00:34:21,040 --> 00:34:22,560
through the four issues hopefully in

905
00:34:22,560 --> 00:34:25,679
order of uh

906
00:34:25,679 --> 00:34:29,520
least to say to most to say and discuss

907
00:34:29,520 --> 00:34:32,639
we do have one of our open issues is

908
00:34:32,639 --> 00:34:35,119
a eternal topic that keeps coming back

909
00:34:35,119 --> 00:34:35,760
um

910
00:34:35,760 --> 00:34:38,560
and this is the current iteration of it

911
00:34:38,560 --> 00:34:39,520
issue six

912
00:34:39,520 --> 00:34:42,399
talking about you know why don't we have

913
00:34:42,399 --> 00:34:43,918
any flow ids

914
00:34:43,918 --> 00:34:46,719
um at the quick transport layer and this

915
00:34:46,719 --> 00:34:48,560
has been something that's been discussed

916
00:34:48,560 --> 00:34:50,639
since you know before this was adopted

917
00:34:50,639 --> 00:34:52,239
since the very earliest discussions

918
00:34:52,239 --> 00:34:53,839
we've had versions with the fluidity

919
00:34:53,839 --> 00:34:57,520
versions without we currently do not um

920
00:34:57,520 --> 00:35:00,480
i think every time we come back to this

921
00:35:00,480 --> 00:35:02,000
eventually we get to the point where

922
00:35:02,000 --> 00:35:05,920
we say that you know that there is no

923
00:35:05,920 --> 00:35:08,640
transport level function of a flow

924
00:35:08,640 --> 00:35:10,560
identifier of a datagram if it does not

925
00:35:10,560 --> 00:35:12,400
influence any

926
00:35:12,400 --> 00:35:14,400
flow control any behavior like that at

927
00:35:14,400 --> 00:35:16,480
the transport layer itself

928
00:35:16,480 --> 00:35:19,359
currently the text in section 5 does

929
00:35:19,359 --> 00:35:22,079
explain that applications

930
00:35:22,079 --> 00:35:25,200
can define their own demuxing

931
00:35:25,200 --> 00:35:28,320
it kind of gives the example of how http

932
00:35:28,320 --> 00:35:29,839
3 is doing that

933
00:35:29,839 --> 00:35:33,359
with a flow identifier currently

934
00:35:33,359 --> 00:35:37,440
um the question keeps coming up

935
00:35:37,440 --> 00:35:40,880
um i do believe that

936
00:35:40,880 --> 00:35:43,520
overall the discussion has consensus

937
00:35:43,520 --> 00:35:45,280
that we are doing the right thing

938
00:35:45,280 --> 00:35:49,119
but it seems to me from the issue that

939
00:35:49,119 --> 00:35:51,920
what we want to do is kind of end up

940
00:35:51,920 --> 00:35:53,680
with an editorial change to just

941
00:35:53,680 --> 00:35:58,960
really highlight and make clear

942
00:35:58,960 --> 00:36:00,400
what you should do if you need to do

943
00:36:00,400 --> 00:36:03,040
demoxing one of the suggestions was

944
00:36:03,040 --> 00:36:04,400
essentially just to pull the current

945
00:36:04,400 --> 00:36:06,240
text in section 5 into its own

946
00:36:06,240 --> 00:36:07,680
subheading so it shows up in the table

947
00:36:07,680 --> 00:36:08,800
of contents it's its own

948
00:36:08,800 --> 00:36:12,800
section 5.1 that explains um

949
00:36:12,800 --> 00:36:16,079
that you know if you need identifiers

950
00:36:16,079 --> 00:36:18,400
you can define them in this way and it's

951
00:36:18,400 --> 00:36:20,000
purely application semantics at that

952
00:36:20,000 --> 00:36:22,000
point

953
00:36:22,000 --> 00:36:24,079
um so what do people think about this

954
00:36:24,079 --> 00:36:27,599
see erica

955
00:36:27,599 --> 00:36:30,160
so i mean i just want to like i'm not

956
00:36:30,160 --> 00:36:31,680
advocating for one thing in particular

957
00:36:31,680 --> 00:36:32,800
but i think it'd be supposed to lay out

958
00:36:32,800 --> 00:36:34,079
what the cost of this position

959
00:36:34,079 --> 00:36:36,160
are and the benefits the benefits

960
00:36:36,160 --> 00:36:38,320
position is not to carry any machinery

961
00:36:38,320 --> 00:36:40,960
in in this draft or in your datagram

962
00:36:40,960 --> 00:36:42,880
quotation if you don't need full ids

963
00:36:42,880 --> 00:36:45,520
the cost of this position are one sort

964
00:36:45,520 --> 00:36:47,040
of document mechanics which is if you

965
00:36:47,040 --> 00:36:47,520
want full

966
00:36:47,520 --> 00:36:50,000
ids you have like um you know if like

967
00:36:50,000 --> 00:36:51,680
just like have a document which

968
00:36:51,680 --> 00:36:54,079
largely probably means h3 you know it's

969
00:36:54,079 --> 00:36:54,960
380 gram

970
00:36:54,960 --> 00:36:56,560
so you have like an extra like little

971
00:36:56,560 --> 00:36:58,960
little document shim in between like

972
00:36:58,960 --> 00:37:00,640
in between between your document

973
00:37:00,640 --> 00:37:02,240
datagram which is not a big deal if

974
00:37:02,240 --> 00:37:03,200
you're using h3

975
00:37:03,200 --> 00:37:05,040
and then if you're not using h3 then you

976
00:37:05,040 --> 00:37:06,480
have to like make a new

977
00:37:06,480 --> 00:37:08,480
make a new thing almost like a three

978
00:37:08,480 --> 00:37:10,480
datagram like maybe a copy http when

979
00:37:10,480 --> 00:37:11,920
crossing out h3 everywhere right

980
00:37:11,920 --> 00:37:13,280
and those are the cost and benefits

981
00:37:13,280 --> 00:37:15,440
these two positions correct

982
00:37:15,440 --> 00:37:18,960
yeah and you know just to highlight

983
00:37:18,960 --> 00:37:20,320
some of the conversations we're having

984
00:37:20,320 --> 00:37:22,240
in mask where we're working on

985
00:37:22,240 --> 00:37:25,440
h3's use of datagram

986
00:37:25,440 --> 00:37:27,760
we're still trying to converge there

987
00:37:27,760 --> 00:37:29,599
about you know what does this identifier

988
00:37:29,599 --> 00:37:30,960
mean and i think you know we're even

989
00:37:30,960 --> 00:37:32,079
calling into question

990
00:37:32,079 --> 00:37:33,920
is it really a flow identifier is it

991
00:37:33,920 --> 00:37:36,400
more of just like an application

992
00:37:36,400 --> 00:37:39,839
label on a set of messages so

993
00:37:39,839 --> 00:37:42,640
i i think yes there is it puts a bit of

994
00:37:42,640 --> 00:37:43,280
burden

995
00:37:43,280 --> 00:37:44,640
on the application but it also gives the

996
00:37:44,640 --> 00:37:48,079
application a lot of freedom to define

997
00:37:48,079 --> 00:37:49,760
what it wants to put is this identifier

998
00:37:49,760 --> 00:37:51,440
and it may even be that http

999
00:37:51,440 --> 00:37:54,880
3 won't strictly use it as a flow

1000
00:37:54,880 --> 00:37:55,760
identifier

1001
00:37:55,760 --> 00:37:57,680
that it may be thought of something more

1002
00:37:57,680 --> 00:37:58,960
broad than that i think that's one of

1003
00:37:58,960 --> 00:38:01,040
the reasons really not to put it here

1004
00:38:01,040 --> 00:38:03,760
sure yeah i i'm not objecting that um i

1005
00:38:03,760 --> 00:38:04,560
think i mean

1006
00:38:04,560 --> 00:38:06,640
the perhaps one way to resolve this

1007
00:38:06,640 --> 00:38:07,760
issue um

1008
00:38:07,760 --> 00:38:09,680
would be as well as making the sort of

1009
00:38:09,680 --> 00:38:10,880
changes you make

1010
00:38:10,880 --> 00:38:14,400
um to uh make a

1011
00:38:14,400 --> 00:38:17,680
um what let's say i put this um

1012
00:38:17,680 --> 00:38:20,160
to like have like a section that

1013
00:38:20,160 --> 00:38:21,200
explains this a little

1014
00:38:21,200 --> 00:38:22,640
i mean i guess you already have one um

1015
00:38:22,640 --> 00:38:24,560
but so point to age three and basically

1016
00:38:24,560 --> 00:38:25,040
say

1017
00:38:25,040 --> 00:38:26,800
if you know if in future to determine

1018
00:38:26,800 --> 00:38:29,040
that like essentially like a zillion use

1019
00:38:29,040 --> 00:38:30,560
of datagram something

1020
00:38:30,560 --> 00:38:32,000
from my perspective if everyone uses

1021
00:38:32,000 --> 00:38:33,280
these three this will like a total non

1022
00:38:33,280 --> 00:38:34,800
problem right and everyone uses h3 they

1023
00:38:34,800 --> 00:38:36,160
usually they can just point to hpd

1024
00:38:36,160 --> 00:38:38,640
hd datagram and that has a flow id and

1025
00:38:38,640 --> 00:38:39,839
some machine accomplished and i like to

1026
00:38:39,839 --> 00:38:41,200
do is like have two more two slices out

1027
00:38:41,200 --> 00:38:41,760
of one

1028
00:38:41,760 --> 00:38:43,359
and if they're turned out to have a lot

1029
00:38:43,359 --> 00:38:44,960
of applications you want to datagram

1030
00:38:44,960 --> 00:38:46,960
and want flow ids and don't do h3 then

1031
00:38:46,960 --> 00:38:48,800
all we need to do is like clone a tree

1032
00:38:48,800 --> 00:38:50,560
datagram cross settings three and do

1033
00:38:50,560 --> 00:38:51,839
draft and they can point to that and

1034
00:38:51,839 --> 00:38:52,960
it'll be the same it'll be the same sort

1035
00:38:52,960 --> 00:38:54,000
of notional like

1036
00:38:54,000 --> 00:38:56,079
stack of documents and problems also go

1037
00:38:56,079 --> 00:38:57,760
away so i think maybe if we try to put

1038
00:38:57,760 --> 00:38:59,520
like and so really the cost will really

1039
00:38:59,520 --> 00:39:00,800
be like one new

1040
00:39:00,800 --> 00:39:04,079
like extension right um yeah and what we

1041
00:39:04,079 --> 00:39:05,760
can do is highlight that you know

1042
00:39:05,760 --> 00:39:09,119
looks like h3 will use a via vli

1043
00:39:09,119 --> 00:39:11,680
here as the first field that's a

1044
00:39:11,680 --> 00:39:13,119
convenient thing to do if you want to do

1045
00:39:13,119 --> 00:39:14,720
your own extension but it's up to you to

1046
00:39:14,720 --> 00:39:16,400
negotiate what that means

1047
00:39:16,400 --> 00:39:18,320
yeah exactly so i i guess i guess i'm

1048
00:39:18,320 --> 00:39:19,520
just like i think

1049
00:39:19,520 --> 00:39:21,520
that what i'm suggesting is that if we

1050
00:39:21,520 --> 00:39:23,040
if we give people a slight road map

1051
00:39:23,040 --> 00:39:24,240
perhaps would look at the future if we

1052
00:39:24,240 --> 00:39:25,440
had to solve this problem then maybe

1053
00:39:25,440 --> 00:39:26,400
that maybe the attention is all the

1054
00:39:26,400 --> 00:39:28,960
problem will actually

1055
00:39:40,160 --> 00:39:43,839
well okay david i guess

1056
00:39:45,440 --> 00:39:49,359
yes um no i just wanted to say that

1057
00:39:49,359 --> 00:39:51,200
most of the arguments we've heard from

1058
00:39:51,200 --> 00:39:54,079
folks uh about wanting flow ids

1059
00:39:54,079 --> 00:39:56,240
sounded like they wanted to multiplex

1060
00:39:56,240 --> 00:39:58,240
multiple applications over

1061
00:39:58,240 --> 00:40:02,079
quick and that was intentional well that

1062
00:40:02,079 --> 00:40:03,040
was discussed

1063
00:40:03,040 --> 00:40:06,640
in this working group and intentionally

1064
00:40:06,640 --> 00:40:10,319
rolled out of scope for quickv1 and so

1065
00:40:10,319 --> 00:40:11,599
like right now you only have one

1066
00:40:11,599 --> 00:40:13,440
application and it's identified by your

1067
00:40:13,440 --> 00:40:14,720
alpn

1068
00:40:14,720 --> 00:40:17,280
uh and so like once i think folks

1069
00:40:17,280 --> 00:40:18,000
realize that

1070
00:40:18,000 --> 00:40:21,200
they like wanting this at the up at the

1071
00:40:21,200 --> 00:40:22,800
transport layer became

1072
00:40:22,800 --> 00:40:24,319
less useful whereas having it at your

1073
00:40:24,319 --> 00:40:26,480
application makes total sense

1074
00:40:26,480 --> 00:40:28,720
on the topic of folks who wanting to use

1075
00:40:28,720 --> 00:40:29,680
this

1076
00:40:29,680 --> 00:40:33,359
the h3 datagram document has about

1077
00:40:33,359 --> 00:40:36,160
like one paragraph which is hey the

1078
00:40:36,160 --> 00:40:36,880
datagram

1079
00:40:36,880 --> 00:40:38,800
starts with a flow id and then the

1080
00:40:38,800 --> 00:40:41,280
entire rest of the document

1081
00:40:41,280 --> 00:40:43,040
is about how you integrate this with

1082
00:40:43,040 --> 00:40:44,800
http 3.

1083
00:40:44,800 --> 00:40:46,800
it's about the setting it's about how

1084
00:40:46,800 --> 00:40:49,599
you negotiate it in a very http specific

1085
00:40:49,599 --> 00:40:50,640
manner

1086
00:40:50,640 --> 00:40:52,560
right now for example it uses an http

1087
00:40:52,560 --> 00:40:53,839
header uh

1088
00:40:53,839 --> 00:40:56,960
if another application wants to use this

1089
00:40:56,960 --> 00:40:59,520
we don't need to like clone or split off

1090
00:40:59,520 --> 00:41:00,720
a document

1091
00:41:00,720 --> 00:41:03,520
they can just write a sentence like us

1092
00:41:03,520 --> 00:41:04,160
which is

1093
00:41:04,160 --> 00:41:05,920
the datagram starts with a flow id and

1094
00:41:05,920 --> 00:41:07,359
here's what a floyd means in our

1095
00:41:07,359 --> 00:41:09,119
application and here's how we negotiate

1096
00:41:09,119 --> 00:41:09,599
it

1097
00:41:09,599 --> 00:41:13,280
so like the like um i don't really see

1098
00:41:13,280 --> 00:41:15,280
the value in centralizing this

1099
00:41:15,280 --> 00:41:17,440
all that this is is the the payload

1100
00:41:17,440 --> 00:41:18,640
starts with a flow id

1101
00:41:18,640 --> 00:41:21,040
and having each implementation say my

1102
00:41:21,040 --> 00:41:22,560
payload also starts with a flow id

1103
00:41:22,560 --> 00:41:24,720
sounds really simple and easy so i'm

1104
00:41:24,720 --> 00:41:27,599
i would argue to like keep the flow id

1105
00:41:27,599 --> 00:41:29,200
at the application layer as opposed to

1106
00:41:29,200 --> 00:41:31,919
adjustable layer

1107
00:41:32,400 --> 00:41:33,839
but i think just spelling that out like

1108
00:41:33,839 --> 00:41:37,359
eckhart was saying it's fine

1109
00:41:37,680 --> 00:41:40,879
oh mary did you have something

1110
00:41:44,560 --> 00:41:46,720
pretty much has summarized what i had to

1111
00:41:46,720 --> 00:41:48,000
say

1112
00:41:48,000 --> 00:41:50,240
one thing to add is that if at some

1113
00:41:50,240 --> 00:41:52,960
point in the future there will be more

1114
00:41:52,960 --> 00:41:57,680
identifiers then a new rfc can emerge

1115
00:41:57,680 --> 00:42:02,000
to to provide best practices but

1116
00:42:02,000 --> 00:42:04,640
if for now the best practice is put what

1117
00:42:04,640 --> 00:42:06,560
integer then

1118
00:42:06,560 --> 00:42:09,040
that's it

1119
00:42:09,920 --> 00:42:12,400
sounds good thank you okay so i think we

1120
00:42:12,400 --> 00:42:15,040
have a direction there we'll make a pr

1121
00:42:15,040 --> 00:42:18,000
for this and um we can send that out to

1122
00:42:18,000 --> 00:42:18,720
the list and

1123
00:42:18,720 --> 00:42:21,440
make sure there's eyes on it all right

1124
00:42:21,440 --> 00:42:23,839
next slide please

1125
00:42:23,839 --> 00:42:28,240
i think this one should be very easy um

1126
00:42:28,480 --> 00:42:31,119
uh so in this issue it was pointed out

1127
00:42:31,119 --> 00:42:32,400
that

1128
00:42:32,400 --> 00:42:35,520
we could do well to

1129
00:42:35,520 --> 00:42:37,839
clarify a datagram's relationship with

1130
00:42:37,839 --> 00:42:39,760
loss recovery

1131
00:42:39,760 --> 00:42:42,480
it doesn't specifically say um what to

1132
00:42:42,480 --> 00:42:42,880
do

1133
00:42:42,880 --> 00:42:45,920
if there is suspected loss of a packet

1134
00:42:45,920 --> 00:42:48,640
that only contains datagram frames

1135
00:42:48,640 --> 00:42:50,960
and

1136
00:42:51,760 --> 00:42:54,319
technically you know that that is

1137
00:42:54,319 --> 00:42:55,760
something that

1138
00:42:55,760 --> 00:42:57,520
is just there is already a default

1139
00:42:57,520 --> 00:43:00,240
behavior but we would do well

1140
00:43:00,240 --> 00:43:02,720
to specifically say that and so the

1141
00:43:02,720 --> 00:43:04,560
consensus on the issue seems to be like

1142
00:43:04,560 --> 00:43:05,760
everyone agrees

1143
00:43:05,760 --> 00:43:09,280
that a packet with only datagram frames

1144
00:43:09,280 --> 00:43:11,760
should be treated like any other packet

1145
00:43:11,760 --> 00:43:15,359
and so if a implementation

1146
00:43:15,359 --> 00:43:18,720
detects loss or

1147
00:43:18,720 --> 00:43:22,079
has the pto then it should send a ping

1148
00:43:22,079 --> 00:43:24,240
frame

1149
00:43:24,240 --> 00:43:27,680
in order to um kind of kick things off

1150
00:43:27,680 --> 00:43:28,880
again

1151
00:43:28,880 --> 00:43:30,880
does anyone have any issues with that or

1152
00:43:30,880 --> 00:43:33,520
should we just

1153
00:43:33,680 --> 00:43:35,520
go ahead and add a little bit of text

1154
00:43:35,520 --> 00:43:38,240
martin marks

1155
00:43:39,520 --> 00:43:42,800
a it bit why do you think that the pto

1156
00:43:42,800 --> 00:43:46,000
is necessary in this case

1157
00:43:47,359 --> 00:43:49,920
sorry um i missed the beginning of that

1158
00:43:49,920 --> 00:43:50,400
oh

1159
00:43:50,400 --> 00:43:52,400
can you can you explain a little bit why

1160
00:43:52,400 --> 00:43:53,760
you think

1161
00:43:53,760 --> 00:43:56,880
a pto is necessary in this case

1162
00:43:56,880 --> 00:44:01,040
i think i understand why but is there a

1163
00:44:01,359 --> 00:44:05,359
a succinct explanation you can provide

1164
00:44:06,839 --> 00:44:09,839
um

1165
00:44:10,079 --> 00:44:13,520
let me do some of the people who are on

1166
00:44:13,520 --> 00:44:14,000
that

1167
00:44:14,000 --> 00:44:17,359
issue want to chime in gianna i see some

1168
00:44:17,359 --> 00:44:17,760
more

1169
00:44:17,760 --> 00:44:21,280
hungry people yeah

1170
00:44:21,280 --> 00:44:22,800
did you just call me did you just call

1171
00:44:22,800 --> 00:44:25,359
me a recovery person martin

1172
00:44:25,359 --> 00:44:26,880
you brought the editor with the draft

1173
00:44:26,880 --> 00:44:30,079
dude does it understand

1174
00:44:30,079 --> 00:44:31,920
anymore it makes you a quick person

1175
00:44:31,920 --> 00:44:34,240
anyhow um

1176
00:44:34,240 --> 00:44:37,119
this is uh not that pto is required it's

1177
00:44:37,119 --> 00:44:39,920
about what to do if a pto is triggered

1178
00:44:39,920 --> 00:44:41,040
so the point here is that you know

1179
00:44:41,040 --> 00:44:42,880
datagram packet is lost no acts are

1180
00:44:42,880 --> 00:44:43,440
received

1181
00:44:43,440 --> 00:44:44,960
you're not going to retransmit anything

1182
00:44:44,960 --> 00:44:46,240
we've seen this problem before in

1183
00:44:46,240 --> 00:44:47,680
transport and that's kind of the point

1184
00:44:47,680 --> 00:44:48,960
is that you know just deal with the same

1185
00:44:48,960 --> 00:44:50,079
way we do it

1186
00:44:50,079 --> 00:44:52,960
for packets that we typically quick do

1187
00:44:52,960 --> 00:44:54,079
not retransmit

1188
00:44:54,079 --> 00:44:56,800
that's really the point here and if you

1189
00:44:56,800 --> 00:44:58,240
don't have anything enqueued

1190
00:44:58,240 --> 00:45:00,319
if you want to evoke an act from the

1191
00:45:00,319 --> 00:45:01,280
other side

1192
00:45:01,280 --> 00:45:04,720
then you send a pink

1193
00:45:04,720 --> 00:45:06,400
right so this is this is what the

1194
00:45:06,400 --> 00:45:08,880
recovery draft specifies but

1195
00:45:08,880 --> 00:45:11,040
what benefit does that provide so say

1196
00:45:11,040 --> 00:45:13,200
you've only ever been sending

1197
00:45:13,200 --> 00:45:16,319
datagrams that you don't care what

1198
00:45:16,319 --> 00:45:18,880
possible value is there to that is it

1199
00:45:18,880 --> 00:45:20,319
it's probably related to the

1200
00:45:20,319 --> 00:45:23,040
uh bytes in flight and all of the other

1201
00:45:23,040 --> 00:45:23,920
loss recovery

1202
00:45:23,920 --> 00:45:26,000
machinery right it's it's a cleanup

1203
00:45:26,000 --> 00:45:27,200
stuff i mean

1204
00:45:27,200 --> 00:45:28,960
we've gone back and forth on this and

1205
00:45:28,960 --> 00:45:30,960
honestly i'm trying to

1206
00:45:30,960 --> 00:45:32,240
page in some of this because the

1207
00:45:32,240 --> 00:45:34,000
discussion happened here almost a year

1208
00:45:34,000 --> 00:45:34,640
ago

1209
00:45:34,640 --> 00:45:37,680
on this particular issue but um

1210
00:45:37,680 --> 00:45:39,200
i think that the the two the two

1211
00:45:39,200 --> 00:45:40,880
positions you can you can take uh

1212
00:45:40,880 --> 00:45:43,040
we won't do anything if uh there's

1213
00:45:43,040 --> 00:45:44,400
nothing to send

1214
00:45:44,400 --> 00:45:45,920
basically what what happens is if i

1215
00:45:45,920 --> 00:45:47,440
don't have an ack but i

1216
00:45:47,440 --> 00:45:48,800
have nothing to send then i can't

1217
00:45:48,800 --> 00:45:50,800
receive an act back from the peer

1218
00:45:50,800 --> 00:45:52,960
i just have to take conservative steps

1219
00:45:52,960 --> 00:45:54,880
and say that maybe there was loss i'll

1220
00:45:54,880 --> 00:45:56,319
cut back the constitution window after a

1221
00:45:56,319 --> 00:45:58,079
certain period of time has elapsed

1222
00:45:58,079 --> 00:46:00,319
and do all of that those shenanigans or

1223
00:46:00,319 --> 00:46:01,680
you say

1224
00:46:01,680 --> 00:46:03,680
you probably should just end up paying

1225
00:46:03,680 --> 00:46:04,800
the work and act

1226
00:46:04,800 --> 00:46:08,079
and and and do your your uh your math

1227
00:46:08,079 --> 00:46:09,920
here based on accurate data that you

1228
00:46:09,920 --> 00:46:11,920
receive from the peer

1229
00:46:11,920 --> 00:46:14,079
um i would say the easiest thing to do

1230
00:46:14,079 --> 00:46:15,280
is to send a ping

1231
00:46:15,280 --> 00:46:16,960
that just tends to be in in most

1232
00:46:16,960 --> 00:46:18,480
implementations that tends to also be

1233
00:46:18,480 --> 00:46:20,160
the easiest path forward

1234
00:46:20,160 --> 00:46:23,839
if somebody wants to walk

1235
00:46:26,319 --> 00:46:28,880
we lost your audio you lost your audio

1236
00:46:28,880 --> 00:46:31,680
it's your headphones

1237
00:46:33,839 --> 00:46:36,880
it's me deco ah

1238
00:46:36,880 --> 00:46:39,920
can you hear me now yes

1239
00:46:39,920 --> 00:46:41,599
uh thankfully informed me that my audio

1240
00:46:41,599 --> 00:46:44,560
was disconnected uh for some people

1241
00:46:44,560 --> 00:46:46,319
but they reconnected again so i'm

1242
00:46:46,319 --> 00:46:48,880
grateful um

1243
00:46:48,880 --> 00:46:50,319
so yeah i mean that those are the two

1244
00:46:50,319 --> 00:46:52,400
options as we uh as they've been in

1245
00:46:52,400 --> 00:46:54,079
transport we've taken the

1246
00:46:54,079 --> 00:46:55,920
general stance of saying please send a

1247
00:46:55,920 --> 00:46:57,359
ping so that you can do your math

1248
00:46:57,359 --> 00:46:58,400
correctly

1249
00:46:58,400 --> 00:47:00,319
um unless there's a reason to do it

1250
00:47:00,319 --> 00:47:01,680
differently here i would just

1251
00:47:01,680 --> 00:47:04,640
stick with the same that sort of okay so

1252
00:47:04,640 --> 00:47:06,079
that makes complete sense

1253
00:47:06,079 --> 00:47:09,200
the this frame this slide make it made

1254
00:47:09,200 --> 00:47:10,240
it look like this was

1255
00:47:10,240 --> 00:47:13,200
special new behavior that was involved

1256
00:47:13,200 --> 00:47:14,000
and i think

1257
00:47:14,000 --> 00:47:17,280
specifically the the idea is

1258
00:47:17,280 --> 00:47:18,800
do not try to make a special rule

1259
00:47:18,800 --> 00:47:20,400
because

1260
00:47:20,400 --> 00:47:21,680
it doesn't seem to be clear that there

1261
00:47:21,680 --> 00:47:24,720
would be particular benefit

1262
00:47:24,720 --> 00:47:27,839
from going out of your way not to

1263
00:47:27,839 --> 00:47:30,800
pain yeah so some explanatory text there

1264
00:47:30,800 --> 00:47:31,359
would help

1265
00:47:31,359 --> 00:47:34,720
thanks thank you ian did you want to add

1266
00:47:34,720 --> 00:47:35,599
any more color

1267
00:47:35,599 --> 00:47:38,960
as a i was going to suggest that if it's

1268
00:47:38,960 --> 00:47:40,240
not already referenced i would probably

1269
00:47:40,240 --> 00:47:41,520
just reference the appropriate section

1270
00:47:41,520 --> 00:47:42,559
on recovery and say

1271
00:47:42,559 --> 00:47:45,359
like datagram does like what recovery

1272
00:47:45,359 --> 00:47:46,800
already recommends

1273
00:47:46,800 --> 00:47:52,480
here is yeah

1274
00:47:52,480 --> 00:47:55,040
alrighty good ten left for this

1275
00:47:55,040 --> 00:47:55,920
presentation

1276
00:47:55,920 --> 00:47:58,160
so um unless people got any more points

1277
00:47:58,160 --> 00:48:00,000
on this topic i think we could move on

1278
00:48:00,000 --> 00:48:01,920
and then um try and keep any further

1279
00:48:01,920 --> 00:48:03,839
comments briefs just so we've got time

1280
00:48:03,839 --> 00:48:07,359
to get through both of these issues

1281
00:48:07,359 --> 00:48:10,160
all right so next one is a bit more fun

1282
00:48:10,160 --> 00:48:11,680
um

1283
00:48:11,680 --> 00:48:13,200
the issue around you know how do we

1284
00:48:13,200 --> 00:48:15,040
actually negotiate the support

1285
00:48:15,040 --> 00:48:16,559
for the datagram frame currently there

1286
00:48:16,559 --> 00:48:18,480
is a transport parameter

1287
00:48:18,480 --> 00:48:22,319
and it is a max datagram frame size

1288
00:48:22,319 --> 00:48:26,079
and so this is specifically

1289
00:48:26,079 --> 00:48:29,280
the size of the entire frame here um

1290
00:48:29,280 --> 00:48:31,280
there's a proposal and a pr to switch

1291
00:48:31,280 --> 00:48:33,359
this from a max datagram frame size to a

1292
00:48:33,359 --> 00:48:36,160
max datagram payload size

1293
00:48:36,160 --> 00:48:38,400
such that you're only talking about the

1294
00:48:38,400 --> 00:48:39,680
actual

1295
00:48:39,680 --> 00:48:41,520
data that's contained within the frame

1296
00:48:41,520 --> 00:48:42,960
and not

1297
00:48:42,960 --> 00:48:46,839
any of the length

1298
00:48:46,839 --> 00:48:50,960
fields um the length or type field here

1299
00:48:50,960 --> 00:48:52,880
it's effectively the same just you don't

1300
00:48:52,880 --> 00:48:54,000
have to

1301
00:48:54,000 --> 00:48:55,359
it's whether or not you take into

1302
00:48:55,359 --> 00:48:57,760
account the variable length integer

1303
00:48:57,760 --> 00:49:00,319
at the front

1304
00:49:01,200 --> 00:49:04,720
um currently

1305
00:49:04,720 --> 00:49:08,079
if you have a zero set in your

1306
00:49:08,079 --> 00:49:11,040
max datagram frame size that means that

1307
00:49:11,040 --> 00:49:13,200
you do not support

1308
00:49:13,200 --> 00:49:16,400
the datagram frames at all um

1309
00:49:16,400 --> 00:49:18,960
we do i think want to be able to support

1310
00:49:18,960 --> 00:49:20,160
sending

1311
00:49:20,160 --> 00:49:22,400
zero length datagram frames so if we

1312
00:49:22,400 --> 00:49:25,200
switch to datagram payload size

1313
00:49:25,200 --> 00:49:29,200
then zero would presumably still be a

1314
00:49:29,200 --> 00:49:30,559
valid

1315
00:49:30,559 --> 00:49:33,200
uh datagram support and you would only

1316
00:49:33,200 --> 00:49:34,720
be able to send empty datagrams which is

1317
00:49:34,720 --> 00:49:36,000
a bit weird but

1318
00:49:36,000 --> 00:49:39,040
sure on the issue there's also

1319
00:49:39,040 --> 00:49:40,480
discussion of do we actually need

1320
00:49:40,480 --> 00:49:43,280
any limit can we just say i support

1321
00:49:43,280 --> 00:49:44,640
datagrams

1322
00:49:44,640 --> 00:49:47,359
um personally i can point out like in

1323
00:49:47,359 --> 00:49:49,839
our testing and usage of it

1324
00:49:49,839 --> 00:49:53,119
we just set the value up to

1325
00:49:53,119 --> 00:49:56,000
a very very high value such that it's

1326
00:49:56,000 --> 00:49:57,839
always larger than what could even fit

1327
00:49:57,839 --> 00:50:00,319
in a

1328
00:50:00,480 --> 00:50:04,079
udp payload to begin with

1329
00:50:04,079 --> 00:50:06,880
so yeah i think this is a fairly open

1330
00:50:06,880 --> 00:50:07,359
one

1331
00:50:07,359 --> 00:50:13,839
and ecker is in queue

1332
00:50:19,520 --> 00:50:22,079
thank you um uh i was trying to figure

1333
00:50:22,079 --> 00:50:22,640
out like

1334
00:50:22,640 --> 00:50:26,000
i mean why would you want to say i only

1335
00:50:26,000 --> 00:50:29,440
support um datagrams

1336
00:50:29,440 --> 00:50:32,559
of size zero um

1337
00:50:32,559 --> 00:50:34,640
yeah i don't know i mean i mean remind

1338
00:50:34,640 --> 00:50:36,000
me isn't there another indicator that

1339
00:50:36,000 --> 00:50:39,040
says i support datagrams

1340
00:50:39,119 --> 00:50:40,960
no no this this is it this is it so this

1341
00:50:40,960 --> 00:50:42,319
is it okay

1342
00:50:42,319 --> 00:50:44,800
so you can just switch it to be i

1343
00:50:44,800 --> 00:50:46,240
support datagrams and it's just a

1344
00:50:46,240 --> 00:50:47,680
boolean

1345
00:50:47,680 --> 00:50:50,160
the question is right right right like i

1346
00:50:50,160 --> 00:50:51,280
guess what i'm saying is like

1347
00:50:51,280 --> 00:50:54,880
that we're um i mean so so

1348
00:50:54,880 --> 00:50:56,079
right so you can say i don't support

1349
00:50:56,079 --> 00:50:57,359
datagrams by not saying this at all

1350
00:50:57,359 --> 00:50:57,920
right

1351
00:50:57,920 --> 00:51:01,440
and exactly and so

1352
00:51:01,440 --> 00:51:03,839
um and there's no and and the way you

1353
00:51:03,839 --> 00:51:05,920
say like i don't care about size as i

1354
00:51:05,920 --> 00:51:07,200
assume to offer like

1355
00:51:07,200 --> 00:51:10,000
ffff or something right um yeah it's

1356
00:51:10,000 --> 00:51:11,359
like do not normally

1357
00:51:11,359 --> 00:51:13,920
large number right and so i mean i guess

1358
00:51:13,920 --> 00:51:14,480
the

1359
00:51:14,480 --> 00:51:15,839
question is is it is there a reasonable

1360
00:51:15,839 --> 00:51:17,119
is there a reason why you might wish to

1361
00:51:17,119 --> 00:51:18,319
say

1362
00:51:18,319 --> 00:51:20,400
like so i guess like this the crew

1363
00:51:20,400 --> 00:51:21,440
questions are the reason why i was to

1364
00:51:21,440 --> 00:51:23,440
say i support only zero length grams

1365
00:51:23,440 --> 00:51:25,440
and there's a reason and and there's a

1366
00:51:25,440 --> 00:51:27,440
reason not to let you say that

1367
00:51:27,440 --> 00:51:31,200
well i think it's fine if we say that

1368
00:51:31,200 --> 00:51:32,880
you know the only way you say i don't

1369
00:51:32,880 --> 00:51:34,319
support it is just to leave off the

1370
00:51:34,319 --> 00:51:36,720
transport parameter and

1371
00:51:36,720 --> 00:51:40,800
all values are then valid um

1372
00:51:40,800 --> 00:51:42,960
i think part of the question is does

1373
00:51:42,960 --> 00:51:46,559
does anyone actually intend to use

1374
00:51:46,720 --> 00:51:50,880
a limited datagram size um

1375
00:51:50,880 --> 00:51:54,319
i think for h3 the use cases currently

1376
00:51:54,319 --> 00:51:57,520
may not require that but

1377
00:51:57,520 --> 00:52:00,480
um it could be useful

1378
00:52:01,599 --> 00:52:05,680
david david

1379
00:52:05,680 --> 00:52:08,800
um just to explain the reason that uh

1380
00:52:08,800 --> 00:52:11,839
right now zero means not allowed it's

1381
00:52:11,839 --> 00:52:15,599
uh to make implementations easier

1382
00:52:15,599 --> 00:52:18,720
uh and in general all of the

1383
00:52:18,720 --> 00:52:22,160
other well all of the core spec var and

1384
00:52:22,160 --> 00:52:24,640
transport parameters in quick have a

1385
00:52:24,640 --> 00:52:26,240
default value

1386
00:52:26,240 --> 00:52:29,760
and so making a default value of zero

1387
00:52:29,760 --> 00:52:31,760
here it makes it easier to implement

1388
00:52:31,760 --> 00:52:33,280
that way you say oh if i don't receive

1389
00:52:33,280 --> 00:52:33,599
it

1390
00:52:33,599 --> 00:52:35,839
i set it to zero and or if i receive it

1391
00:52:35,839 --> 00:52:37,359
with zero it means the same thing

1392
00:52:37,359 --> 00:52:38,880
and that's why they're like this in the

1393
00:52:38,880 --> 00:52:41,040
spec i totally agree that we could

1394
00:52:41,040 --> 00:52:41,680
change that

1395
00:52:41,680 --> 00:52:44,640
to uh mean different things it's just

1396
00:52:44,640 --> 00:52:46,000
that makes it more of a pain to

1397
00:52:46,000 --> 00:52:46,559
implement

1398
00:52:46,559 --> 00:52:49,920
because now you need uh un-64 and a bool

1399
00:52:49,920 --> 00:52:50,880
or you know

1400
00:52:50,880 --> 00:52:53,839
a sentinel value yadda yadda again not

1401
00:52:53,839 --> 00:52:55,040
complicated but just this

1402
00:52:55,040 --> 00:52:57,920
is just easier um and then on the topic

1403
00:52:57,920 --> 00:52:59,359
of

1404
00:52:59,359 --> 00:53:01,440
go ahead derek but now i'm confused

1405
00:53:01,440 --> 00:53:02,559
because it seems to me

1406
00:53:02,559 --> 00:53:05,119
that now zero and not present have

1407
00:53:05,119 --> 00:53:06,160
different semantics

1408
00:53:06,160 --> 00:53:07,920
because zero means i always support

1409
00:53:07,920 --> 00:53:09,680
empty datagrams and

1410
00:53:09,680 --> 00:53:11,760
and and not present and and they're not

1411
00:53:11,760 --> 00:53:13,280
present as crazy semantics because like

1412
00:53:13,280 --> 00:53:14,240
um

1413
00:53:14,240 --> 00:53:15,760
i'm i mean like if you don't send this

1414
00:53:15,760 --> 00:53:17,040
again we all agree if you don't send the

1415
00:53:17,040 --> 00:53:18,480
extension you can't send datagrams right

1416
00:53:18,480 --> 00:53:20,160
i mean like that's like that has to be

1417
00:53:20,160 --> 00:53:22,000
the case right yes

1418
00:53:22,000 --> 00:53:24,160
well yes and right now sending zero

1419
00:53:24,160 --> 00:53:26,240
means the same thing is not sending it

1420
00:53:26,240 --> 00:53:28,559
uh that's like the first dash in the

1421
00:53:28,559 --> 00:53:31,200
slide right now

1422
00:53:32,160 --> 00:53:34,400
because like it's not like having a zero

1423
00:53:34,400 --> 00:53:35,920
frame size means you don't

1424
00:53:35,920 --> 00:53:38,559
have a frame right but i guess but right

1425
00:53:38,559 --> 00:53:39,680
but i guess but

1426
00:53:39,680 --> 00:53:40,960
i understand as i understand what you're

1427
00:53:40,960 --> 00:53:43,200
saying is that if we make this apply

1428
00:53:43,200 --> 00:53:44,720
only to the payload

1429
00:53:44,720 --> 00:53:46,480
then those demands would be lost and now

1430
00:53:46,480 --> 00:53:47,520
we have a problem isn't that what you're

1431
00:53:47,520 --> 00:53:48,480
saying

1432
00:53:48,480 --> 00:53:51,599
yes um that or or

1433
00:53:51,599 --> 00:53:54,800
we disallow or we say zero is a special

1434
00:53:54,800 --> 00:53:56,160
case that the

1435
00:53:56,160 --> 00:53:59,520
zero doesn't mean you can uh send empty

1436
00:53:59,520 --> 00:54:01,200
frames zero means you can't send

1437
00:54:01,200 --> 00:54:01,760
anything

1438
00:54:01,760 --> 00:54:07,119
um it but yeah that becomes kind of ugly

1439
00:54:09,359 --> 00:54:12,800
well i'm excited i guess i i certainly

1440
00:54:12,800 --> 00:54:15,280
don't think that like

1441
00:54:15,280 --> 00:54:17,200
like i i mean i just ignore it and it

1442
00:54:17,200 --> 00:54:18,559
seems like there are two kind of

1443
00:54:18,559 --> 00:54:20,960
like annoying issues here right one is

1444
00:54:20,960 --> 00:54:22,559
like it's annoying to have to like take

1445
00:54:22,559 --> 00:54:23,440
into account

1446
00:54:23,440 --> 00:54:26,000
the different size when you figure out

1447
00:54:26,000 --> 00:54:27,040
what you're allowed to send

1448
00:54:27,040 --> 00:54:28,319
um and so like that seems like

1449
00:54:28,319 --> 00:54:29,760
motivation that's tommy says that's

1450
00:54:29,760 --> 00:54:31,119
motivation for making this change

1451
00:54:31,119 --> 00:54:32,160
and then that just comes with this

1452
00:54:32,160 --> 00:54:33,599
annoying implementation issue that you

1453
00:54:33,599 --> 00:54:35,200
indicated which is now

1454
00:54:35,200 --> 00:54:36,640
like it's anointed with the extension

1455
00:54:36,640 --> 00:54:38,319
right um

1456
00:54:38,319 --> 00:54:41,119
um not i mean i guess i i'm le i think

1457
00:54:41,119 --> 00:54:42,799
i'm a little less persuaded by the like

1458
00:54:42,799 --> 00:54:45,119
but by like the default like default

1459
00:54:45,119 --> 00:54:46,480
versus default value argument

1460
00:54:46,480 --> 00:54:50,000
than others maybe but um um

1461
00:54:50,000 --> 00:54:52,079
um so i guess you know if i if i if i

1462
00:54:52,079 --> 00:54:53,440
have to pick i guess i would say

1463
00:54:53,440 --> 00:54:57,119
like you know fine like you know

1464
00:54:57,119 --> 00:54:59,359
zero zero means the the stupid thing

1465
00:54:59,359 --> 00:55:00,400
which is you can only send zero length

1466
00:55:00,400 --> 00:55:01,599
datagrams

1467
00:55:01,599 --> 00:55:05,119
and um um i think we could also require

1468
00:55:05,119 --> 00:55:06,079
we could also forbid

1469
00:55:06,079 --> 00:55:07,280
do we have anything else that has a

1470
00:55:07,280 --> 00:55:09,280
minimum as if i thought we had things

1471
00:55:09,280 --> 00:55:11,680
that had forbidden minimum values too

1472
00:55:11,680 --> 00:55:14,720
uh we do like the um uh max

1473
00:55:14,720 --> 00:55:17,920
udp payload size uh transfer parameter

1474
00:55:17,920 --> 00:55:19,680
k is not allowed to be under 1200 for

1475
00:55:19,680 --> 00:55:21,440
example right so

1476
00:55:21,440 --> 00:55:25,200
so right um so so so that would also

1477
00:55:25,200 --> 00:55:25,839
allow you to

1478
00:55:25,839 --> 00:55:27,359
sort of allow you to resolve the the

1479
00:55:27,359 --> 00:55:28,960
default value the issue that you

1480
00:55:28,960 --> 00:55:30,079
indicated david you'd say

1481
00:55:30,079 --> 00:55:32,720
say you know one if the minimum value is

1482
00:55:32,720 --> 00:55:33,200
one

1483
00:55:33,200 --> 00:55:35,119
but but the default is zero or something

1484
00:55:35,119 --> 00:55:36,640
right

1485
00:55:36,640 --> 00:55:40,000
uh yeah i mean my

1486
00:55:40,000 --> 00:55:43,680
my code has like for each thing a

1487
00:55:43,680 --> 00:55:45,440
minimum default and maximum but the

1488
00:55:45,440 --> 00:55:47,359
default has to be within the bounds

1489
00:55:47,359 --> 00:55:50,960
of minimum and maximum i'm not sure

1490
00:55:50,960 --> 00:55:52,880
since for time let's say we have nick in

1491
00:55:52,880 --> 00:55:55,440
the queue go hear him and then

1492
00:55:55,440 --> 00:55:57,599
move on to that yeah that's probably it

1493
00:55:57,599 --> 00:55:59,440
for this one yeah and the last 10 second

1494
00:55:59,440 --> 00:56:00,400
thing i'll say is

1495
00:56:00,400 --> 00:56:02,319
because this is kind of deployed in

1496
00:56:02,319 --> 00:56:04,960
running code in a bunch of places

1497
00:56:04,960 --> 00:56:07,520
i would be inclined to keep it as is

1498
00:56:07,520 --> 00:56:08,319
because

1499
00:56:08,319 --> 00:56:10,960
uh if we change it we'd have to renumber

1500
00:56:10,960 --> 00:56:12,400
the transport parameter and we have

1501
00:56:12,400 --> 00:56:14,799
already have a nice one byte value that

1502
00:56:14,799 --> 00:56:16,960
would be nice to keep

1503
00:56:16,960 --> 00:56:19,680
yeah and it's also i think it's since

1504
00:56:19,680 --> 00:56:20,960
we've done a lot of interrupt it's not

1505
00:56:20,960 --> 00:56:22,319
that painful to do

1506
00:56:22,319 --> 00:56:26,240
nick can i have a quick word

1507
00:56:26,400 --> 00:56:28,880
yeah i just wanted to go back to what

1508
00:56:28,880 --> 00:56:30,079
you were saying about

1509
00:56:30,079 --> 00:56:32,880
do we really have a reason to limit the

1510
00:56:32,880 --> 00:56:33,440
size

1511
00:56:33,440 --> 00:56:35,839
beyond the packet size already i there

1512
00:56:35,839 --> 00:56:37,520
was some discussion on the issue

1513
00:56:37,520 --> 00:56:39,359
and i never saw a good reason to

1514
00:56:39,359 --> 00:56:40,559
actually have

1515
00:56:40,559 --> 00:56:43,760
the limit at all all right so i my

1516
00:56:43,760 --> 00:56:45,280
personal preference would just be to

1517
00:56:45,280 --> 00:56:46,160
have a

1518
00:56:46,160 --> 00:56:49,440
enable disable uh the feature transport

1519
00:56:49,440 --> 00:56:50,240
parameter and

1520
00:56:50,240 --> 00:56:53,359
leave it at that yeah okay

1521
00:56:53,359 --> 00:56:58,000
that's that's good to know um

1522
00:56:58,000 --> 00:56:59,359
i think then i would kind of lean

1523
00:56:59,359 --> 00:57:01,200
towards saying we either

1524
00:57:01,200 --> 00:57:03,839
leave it as is essentially as an escape

1525
00:57:03,839 --> 00:57:04,480
hatch

1526
00:57:04,480 --> 00:57:06,640
for future applications to limit the

1527
00:57:06,640 --> 00:57:07,920
size if they want to

1528
00:57:07,920 --> 00:57:10,880
or we switch it to uh a boolean

1529
00:57:10,880 --> 00:57:12,480
essentially so we'll continue that on

1530
00:57:12,480 --> 00:57:13,839
the issue but this has been very useful

1531
00:57:13,839 --> 00:57:14,640
thank you

1532
00:57:14,640 --> 00:57:18,078
next slide very quickly

1533
00:57:20,880 --> 00:57:23,359
last one was a conversation around

1534
00:57:23,359 --> 00:57:24,480
application

1535
00:57:24,480 --> 00:57:27,920
events the current text says that

1536
00:57:27,920 --> 00:57:29,599
the quick implementation may notify the

1537
00:57:29,599 --> 00:57:32,720
application when a datagram is act

1538
00:57:32,720 --> 00:57:36,720
as a convenience the issue is opened

1539
00:57:36,720 --> 00:57:38,079
about asking what happens if the

1540
00:57:38,079 --> 00:57:42,000
receiver drops act frames

1541
00:57:42,000 --> 00:57:47,040
before actually delivering them

1542
00:57:47,119 --> 00:57:49,599
and this essentially raised the

1543
00:57:49,599 --> 00:57:51,680
conversation around

1544
00:57:51,680 --> 00:57:53,680
who effectively owns the buffer of

1545
00:57:53,680 --> 00:57:54,960
incoming datagrams

1546
00:57:54,960 --> 00:57:58,720
um quicker the application and

1547
00:57:58,720 --> 00:58:00,720
the suggestion in the issue and i think

1548
00:58:00,720 --> 00:58:02,960
my preference would be

1549
00:58:02,960 --> 00:58:06,400
to say that you know conceptually

1550
00:58:06,400 --> 00:58:08,799
once you have received a datagram you've

1551
00:58:08,799 --> 00:58:09,760
enacted it

1552
00:58:09,760 --> 00:58:12,319
it is kind of between that quick

1553
00:58:12,319 --> 00:58:13,280
implementation

1554
00:58:13,280 --> 00:58:16,319
and the application to ensure that the

1555
00:58:16,319 --> 00:58:17,520
application doesn't

1556
00:58:17,520 --> 00:58:19,440
unknowingly drop it so either you

1557
00:58:19,440 --> 00:58:21,359
immediately deliver it up

1558
00:58:21,359 --> 00:58:23,119
to the application and the application

1559
00:58:23,119 --> 00:58:24,799
owns the queue of datagrams and if it

1560
00:58:24,799 --> 00:58:27,359
runs out of space it can drop them

1561
00:58:27,359 --> 00:58:29,440
or if quick is doing that for you it has

1562
00:58:29,440 --> 00:58:31,280
to let the application know that it

1563
00:58:31,280 --> 00:58:32,640
ended up dropping some packets because

1564
00:58:32,640 --> 00:58:34,640
they ran out of room so there's no case

1565
00:58:34,640 --> 00:58:35,440
in which you

1566
00:58:35,440 --> 00:58:37,200
silently are losing datagrams but

1567
00:58:37,200 --> 00:58:38,480
telling the other side that you have

1568
00:58:38,480 --> 00:58:40,319
processed them

1569
00:58:40,319 --> 00:58:42,720
david

1570
00:58:44,240 --> 00:58:46,480
i just added some just wanted to add

1571
00:58:46,480 --> 00:58:50,640
some implementation experience here um

1572
00:58:50,640 --> 00:58:53,920
so in web transport we

1573
00:58:53,920 --> 00:58:56,960
use datagrams and in particular in the

1574
00:58:56,960 --> 00:58:58,799
implementation

1575
00:58:58,799 --> 00:59:02,079
the quick stack and the javascript that

1576
00:59:02,079 --> 00:59:03,359
consumes the

1577
00:59:03,359 --> 00:59:05,280
web transport datagrams are not in the

1578
00:59:05,280 --> 00:59:06,400
same process

1579
00:59:06,400 --> 00:59:09,599
in chrome and so the

1580
00:59:09,599 --> 00:59:12,960
application and the transport here are

1581
00:59:12,960 --> 00:59:14,880
running in separate processes and there

1582
00:59:14,880 --> 00:59:16,880
is no synchronous interface between them

1583
00:59:16,880 --> 00:59:18,880
everything is asynchronous

1584
00:59:18,880 --> 00:59:22,319
and so the there is no possibility

1585
00:59:22,319 --> 00:59:26,000
of like the the quick stack is not going

1586
00:59:26,000 --> 00:59:26,319
to

1587
00:59:26,319 --> 00:59:28,559
wait for an asynchronous quality

1588
00:59:28,559 --> 00:59:30,160
application in back before it can

1589
00:59:30,160 --> 00:59:32,720
act the datagram that would be a huge

1590
00:59:32,720 --> 00:59:34,480
implementation complexity that really we

1591
00:59:34,480 --> 00:59:35,440
don't want to

1592
00:59:35,440 --> 00:59:39,520
add uh but then your proposed resolution

1593
00:59:39,520 --> 00:59:39,839
of

1594
00:59:39,839 --> 00:59:42,960
it must tell the application

1595
00:59:42,960 --> 00:59:46,000
if it drops so the the

1596
00:59:46,000 --> 00:59:48,079
thing is like with datagrams you don't

1597
00:59:48,079 --> 00:59:50,000
want infinite buffers

1598
00:59:50,000 --> 00:59:52,960
and if your application is like busy or

1599
00:59:52,960 --> 00:59:53,839
for some reason

1600
00:59:53,839 --> 00:59:55,760
not like there's going to be a cue

1601
00:59:55,760 --> 00:59:57,839
between the transport in the application

1602
00:59:57,839 --> 00:59:59,680
and if the application isn't pulling

1603
00:59:59,680 --> 01:00:01,200
fast enough like we don't want that

1604
01:00:01,200 --> 01:00:02,799
queue to grow unboundedly

1605
01:00:02,799 --> 01:00:05,440
so that queue can have loss um but

1606
01:00:05,440 --> 01:00:06,079
saying

1607
01:00:06,079 --> 01:00:07,599
you must tell the application that

1608
01:00:07,599 --> 01:00:09,280
something was lost

1609
01:00:09,280 --> 01:00:12,880
how is that useful because if if i drop

1610
01:00:12,880 --> 01:00:14,079
it it's to save memory

1611
01:00:14,079 --> 01:00:16,079
i'm not gonna oh i was gonna drop it

1612
01:00:16,079 --> 01:00:18,000
let's let me save it here in the list of

1613
01:00:18,000 --> 01:00:18,559
dropped

1614
01:00:18,559 --> 01:00:20,799
things so you would just flip a bit and

1615
01:00:20,799 --> 01:00:22,640
say oh by the way i lost something like

1616
01:00:22,640 --> 01:00:23,920
what is the application going to do with

1617
01:00:23,920 --> 01:00:26,079
that that's not useful right

1618
01:00:26,079 --> 01:00:29,839
i think if the conversation in the

1619
01:00:29,839 --> 01:00:32,720
issue was saying that if you have at

1620
01:00:32,720 --> 01:00:33,040
least

1621
01:00:33,040 --> 01:00:34,720
at least a way to query like did you

1622
01:00:34,720 --> 01:00:36,799
drop any packets for me like just as

1623
01:00:36,799 --> 01:00:37,839
metadata here

1624
01:00:37,839 --> 01:00:39,680
that would allow the application level

1625
01:00:39,680 --> 01:00:41,760
if it needs to do any application level

1626
01:00:41,760 --> 01:00:43,680
signaling depending on

1627
01:00:43,680 --> 01:00:45,440
what you know let's say it's doing video

1628
01:00:45,440 --> 01:00:46,799
frames or something and it

1629
01:00:46,799 --> 01:00:48,319
wants to do a reset because it realized

1630
01:00:48,319 --> 01:00:50,079
it had a big loss event and lost a ton

1631
01:00:50,079 --> 01:00:51,200
of frames or it

1632
01:00:51,200 --> 01:00:54,160
is missing something that it can do

1633
01:00:54,160 --> 01:00:55,839
application level signaling back to the

1634
01:00:55,839 --> 01:00:56,480
other side

1635
01:00:56,480 --> 01:00:59,680
to request a retransmission

1636
01:00:59,680 --> 01:01:03,200
so thanks

1637
01:01:03,200 --> 01:01:06,000
we're at time so i see nick in the queue

1638
01:01:06,000 --> 01:01:07,359
if he has something very short after

1639
01:01:07,359 --> 01:01:09,359
david that's okay but the queue is cut

1640
01:01:09,359 --> 01:01:12,720
and we we do need to move on

1641
01:01:13,680 --> 01:01:16,720
yeah i'll keep it very short i'm my

1642
01:01:16,720 --> 01:01:18,880
opinion here is that i'm we already have

1643
01:01:18,880 --> 01:01:19,839
all the ack

1644
01:01:19,839 --> 01:01:22,079
mechanism at the transport and it was

1645
01:01:22,079 --> 01:01:22,880
very

1646
01:01:22,880 --> 01:01:25,040
sad to hear that we really couldn't

1647
01:01:25,040 --> 01:01:26,079
leverage that that

1648
01:01:26,079 --> 01:01:27,920
an application has to build their own

1649
01:01:27,920 --> 01:01:29,359
act their own

1650
01:01:29,359 --> 01:01:32,319
acknowledgement path on top of it it

1651
01:01:32,319 --> 01:01:33,920
makes sense that for implementations

1652
01:01:33,920 --> 01:01:34,480
that do

1653
01:01:34,480 --> 01:01:36,880
cue that's practically going to be

1654
01:01:36,880 --> 01:01:38,079
required

1655
01:01:38,079 --> 01:01:40,799
um but that's also an assumption like

1656
01:01:40,799 --> 01:01:41,359
for instance

1657
01:01:41,359 --> 01:01:43,599
ms quick does not cue it's an inline

1658
01:01:43,599 --> 01:01:44,880
indication so

1659
01:01:44,880 --> 01:01:48,000
hey um it for us it was

1660
01:01:48,000 --> 01:01:51,359
easy to support this but um i was sad to

1661
01:01:51,359 --> 01:01:52,960
hear that other implement

1662
01:01:52,960 --> 01:01:56,480
implementations it was not

1663
01:01:56,960 --> 01:01:59,520
yep same page all right thank you

1664
01:01:59,520 --> 01:02:01,680
everyone um

1665
01:02:01,680 --> 01:02:02,880
i think the next step for us is just

1666
01:02:02,880 --> 01:02:04,960
we'll send out prs for all these things

1667
01:02:04,960 --> 01:02:07,520
and then get input on them thank you

1668
01:02:07,520 --> 01:02:21,839
thanks dummy next up david

1669
01:02:22,720 --> 01:02:25,280
all right good morning afternoon evening

1670
01:02:25,280 --> 01:02:26,160
middle of the night

1671
01:02:26,160 --> 01:02:29,200
everyone uh my name is david kanazi

1672
01:02:29,200 --> 01:02:31,200
and i'm going to be talking about quick

1673
01:02:31,200 --> 01:02:33,280
version negotiation

1674
01:02:33,280 --> 01:02:35,839
next slide please

1675
01:02:36,880 --> 01:02:40,079
uh so just a very brief uh

1676
01:02:40,079 --> 01:02:42,079
trip down memory lane here to explain

1677
01:02:42,079 --> 01:02:43,520
how we got here

1678
01:02:43,520 --> 01:02:47,680
uh so google quick added versioning

1679
01:02:47,680 --> 01:02:49,760
pretty early on in its history and a

1680
01:02:49,760 --> 01:02:51,280
little bit later because

1681
01:02:51,280 --> 01:02:54,799
to avoid uh to avoid downgrade attacks

1682
01:02:54,799 --> 01:02:56,640
well sorry because they had multiple

1683
01:02:56,640 --> 01:02:58,000
versions then it needed version

1684
01:02:58,000 --> 01:02:58,960
negotiation

1685
01:02:58,960 --> 01:03:00,319
and then to avoid downgraded attacks it

1686
01:03:00,319 --> 01:03:02,079
eventually added downgrade protection

1687
01:03:02,079 --> 01:03:05,280
so all this happened like around 2013

1688
01:03:05,280 --> 01:03:06,880
which you know in quick is ancient

1689
01:03:06,880 --> 01:03:08,000
history

1690
01:03:08,000 --> 01:03:11,440
um and the original um

1691
01:03:11,440 --> 01:03:14,720
itf quick drafts because they were

1692
01:03:14,720 --> 01:03:16,640
pretty much like trying to explain how

1693
01:03:16,640 --> 01:03:18,480
google quick worked at the time

1694
01:03:18,480 --> 01:03:21,440
uh they initially had that feature um

1695
01:03:21,440 --> 01:03:22,400
and

1696
01:03:22,400 --> 01:03:25,359
uh the

1697
01:03:25,440 --> 01:03:30,559
nice lucas um the um

1698
01:03:30,559 --> 01:03:33,920
issue there is that this was

1699
01:03:33,920 --> 01:03:35,440
like designed in a way that worked for

1700
01:03:35,440 --> 01:03:37,359
google's deployment but that

1701
01:03:37,359 --> 01:03:39,359
not everyone deploys software the same

1702
01:03:39,359 --> 01:03:40,880
way that google does

1703
01:03:40,880 --> 01:03:44,160
and so uh in issue 1810

1704
01:03:44,160 --> 01:03:46,640
which if i recall correctly um was

1705
01:03:46,640 --> 01:03:48,079
followed by kazuho

1706
01:03:48,079 --> 01:03:50,799
uh he identified that if you have a

1707
01:03:50,799 --> 01:03:52,079
server deployment

1708
01:03:52,079 --> 01:03:54,880
where you have different versions

1709
01:03:54,880 --> 01:03:57,119
rolling out at different times

1710
01:03:57,119 --> 01:04:00,079
uh or like a multi-cdn scenario where

1711
01:04:00,079 --> 01:04:00,960
you could have

1712
01:04:00,960 --> 01:04:02,960
some of your fleet support some versions

1713
01:04:02,960 --> 01:04:04,079
and the other ones support other

1714
01:04:04,079 --> 01:04:05,119
versions because they're

1715
01:04:05,119 --> 01:04:07,920
like maintained by another vendor uh

1716
01:04:07,920 --> 01:04:08,319
this

1717
01:04:08,319 --> 01:04:10,240
downgrade protection feature could

1718
01:04:10,240 --> 01:04:11,760
actually fail connections that should

1719
01:04:11,760 --> 01:04:12,960
have been valid

1720
01:04:12,960 --> 01:04:15,440
if you end up like hitting one side

1721
01:04:15,440 --> 01:04:16,880
getting a version negotiation

1722
01:04:16,880 --> 01:04:18,640
hitting the other and then getting

1723
01:04:18,640 --> 01:04:20,000
confused because

1724
01:04:20,000 --> 01:04:21,520
the other doesn't support the same ones

1725
01:04:21,520 --> 01:04:23,920
as the first one so

1726
01:04:23,920 --> 01:04:26,240
at the time because we really wanted to

1727
01:04:26,240 --> 01:04:27,200
make progress

1728
01:04:27,200 --> 01:04:30,240
on the quick core documents and not

1729
01:04:30,240 --> 01:04:32,559
get blocked by these design issues the

1730
01:04:32,559 --> 01:04:34,640
decision of the working group was to

1731
01:04:34,640 --> 01:04:36,400
remove version negotiation from the core

1732
01:04:36,400 --> 01:04:38,799
documents and say that this would be

1733
01:04:38,799 --> 01:04:40,720
handled by an extension

1734
01:04:40,720 --> 01:04:43,920
and so um ecker and i

1735
01:04:43,920 --> 01:04:46,799
in early 2019 then published this as an

1736
01:04:46,799 --> 01:04:48,640
individual draft which then

1737
01:04:48,640 --> 01:04:51,680
uh early 2020 was adopted

1738
01:04:51,680 --> 01:04:56,558
and here we are um so next slide please

1739
01:05:02,240 --> 01:05:04,720
all right so the as we were saying the

1740
01:05:04,720 --> 01:05:06,319
core documents are

1741
01:05:06,319 --> 01:05:09,520
out the door almost uh what do we have

1742
01:05:09,520 --> 01:05:10,160
right now

1743
01:05:10,160 --> 01:05:13,440
in the spec so in quick v1 and in the

1744
01:05:13,440 --> 01:05:15,839
environs we define the format of a vm

1745
01:05:15,839 --> 01:05:17,680
packet which is a server to client

1746
01:05:17,680 --> 01:05:19,280
packet saying

1747
01:05:19,280 --> 01:05:22,559
hero versions i support um

1748
01:05:22,559 --> 01:05:24,559
and in the core spec it says if you

1749
01:05:24,559 --> 01:05:26,960
receive this during the handshake

1750
01:05:26,960 --> 01:05:28,640
you abort your connection because it

1751
01:05:28,640 --> 01:05:29,839
means that the server doesn't support

1752
01:05:29,839 --> 01:05:31,280
your version but you

1753
01:05:31,280 --> 01:05:33,039
don't retry with another version because

1754
01:05:33,039 --> 01:05:34,839
there's no downgrade prevention

1755
01:05:34,839 --> 01:05:38,640
system um if your implementation only

1756
01:05:38,640 --> 01:05:40,079
supports quickview one

1757
01:05:40,079 --> 01:05:43,520
that's fine because if the server you're

1758
01:05:43,520 --> 01:05:45,440
uh talking to doesn't or the you know

1759
01:05:45,440 --> 01:05:46,559
the peer you're talking to doesn't

1760
01:05:46,559 --> 01:05:48,480
support v1 while you're done

1761
01:05:48,480 --> 01:05:51,039
but as we're moving forward like people

1762
01:05:51,039 --> 01:05:52,480
are going to want to work on different

1763
01:05:52,480 --> 01:05:53,920
versions of quick so

1764
01:05:53,920 --> 01:05:56,480
we might need something in particular

1765
01:05:56,480 --> 01:05:58,160
one of the reasons this isn't too bad is

1766
01:05:58,160 --> 01:05:58,559
that

1767
01:05:58,559 --> 01:06:01,839
for http 3 this doesn't matter because

1768
01:06:01,839 --> 01:06:02,960
http has

1769
01:06:02,960 --> 01:06:08,000
alt service and you don't use

1770
01:06:08,000 --> 01:06:10,960
quick unless you've gotten all service

1771
01:06:10,960 --> 01:06:12,400
and that's already told you what quick

1772
01:06:12,400 --> 01:06:14,400
version your server supports

1773
01:06:14,400 --> 01:06:16,240
so you're gonna use that version and

1774
01:06:16,240 --> 01:06:17,839
it's gonna work

1775
01:06:17,839 --> 01:06:21,200
in asterisk in most cases

1776
01:06:21,200 --> 01:06:22,880
but you know quick is a general purpose

1777
01:06:22,880 --> 01:06:24,240
transfer protocol and

1778
01:06:24,240 --> 01:06:26,880
not every application is http 3 so we do

1779
01:06:26,880 --> 01:06:28,400
need a robust for a negotiation

1780
01:06:28,400 --> 01:06:29,200
mechanism

1781
01:06:29,200 --> 01:06:32,480
going forward and

1782
01:06:32,480 --> 01:06:34,799
another requirement that got tacked onto

1783
01:06:34,799 --> 01:06:36,079
this uh draft

1784
01:06:36,079 --> 01:06:39,520
is the idea that um spending an entire

1785
01:06:39,520 --> 01:06:41,440
round trip to negotiate the version

1786
01:06:41,440 --> 01:06:44,799
is a lot of wasted time and

1787
01:06:44,799 --> 01:06:46,640
it would be nice if we didn't have to do

1788
01:06:46,640 --> 01:06:48,160
that in most cases

1789
01:06:48,160 --> 01:06:50,559
so this is what this draft does uh next

1790
01:06:50,559 --> 01:06:53,039
slide please

1791
01:06:56,960 --> 01:07:00,480
so the draft introduces two types of

1792
01:07:00,480 --> 01:07:01,760
version negotiation

1793
01:07:01,760 --> 01:07:04,160
incompatible and compatible so the

1794
01:07:04,160 --> 01:07:06,799
incompatible one is the simplest

1795
01:07:06,799 --> 01:07:08,799
the client sends its first flight the

1796
01:07:08,799 --> 01:07:10,079
server doesn't support it

1797
01:07:10,079 --> 01:07:11,839
it can't parse it it just sends a

1798
01:07:11,839 --> 01:07:14,319
version negotiation packet uh

1799
01:07:14,319 --> 01:07:16,160
and the client restarts with a new

1800
01:07:16,160 --> 01:07:17,760
version

1801
01:07:17,760 --> 01:07:20,480
next slide please

1802
01:07:22,960 --> 01:07:25,039
and the other mechanism which we call

1803
01:07:25,039 --> 01:07:27,039
compatible version negotiation is the

1804
01:07:27,039 --> 01:07:29,440
one that doesn't cost a roundtrip

1805
01:07:29,440 --> 01:07:33,200
and that requires um some properties on

1806
01:07:33,200 --> 01:07:34,160
the versions

1807
01:07:34,160 --> 01:07:35,680
but it allows the client to send its

1808
01:07:35,680 --> 01:07:37,280
first flight and the server to

1809
01:07:37,280 --> 01:07:38,160
seamlessly

1810
01:07:38,160 --> 01:07:40,799
upgrade to a different version and so

1811
01:07:40,799 --> 01:07:42,240
the idea there

1812
01:07:42,240 --> 01:07:45,920
is that um if let's say for example

1813
01:07:45,920 --> 01:07:47,680
the client supports quickview one quick

1814
01:07:47,680 --> 01:07:49,200
v2 um

1815
01:07:49,200 --> 01:07:51,039
but it doesn't know what the server

1816
01:07:51,039 --> 01:07:52,720
supports and like quick

1817
01:07:52,720 --> 01:07:56,640
v2 just shipped and we know that

1818
01:07:56,640 --> 01:07:58,160
way more people support quick voicemail

1819
01:07:58,160 --> 01:08:01,200
quickv2 it'll start with quickv1

1820
01:08:01,200 --> 01:08:02,960
and then the server based on the initial

1821
01:08:02,960 --> 01:08:04,319
can say oh actually

1822
01:08:04,319 --> 01:08:06,880
quickv2 is better let me seamlessly

1823
01:08:06,880 --> 01:08:08,799
reply with quickv2 because i still

1824
01:08:08,799 --> 01:08:10,640
understand quick view one

1825
01:08:10,640 --> 01:08:13,680
and can transfer that to quick v2 and

1826
01:08:13,680 --> 01:08:17,359
um in particular one of the neat things

1827
01:08:17,359 --> 01:08:19,439
is if we look way way down the road you

1828
01:08:19,439 --> 01:08:20,000
can

1829
01:08:20,000 --> 01:08:21,520
reach a point where the server doesn't

1830
01:08:21,520 --> 01:08:23,040
necessarily need to fully implement

1831
01:08:23,040 --> 01:08:24,640
quick if you want anymore

1832
01:08:24,640 --> 01:08:26,158
this still works if the server the

1833
01:08:26,158 --> 01:08:28,000
server just needs to be able to parse

1834
01:08:28,000 --> 01:08:31,839
uh quickview one um well the

1835
01:08:31,839 --> 01:08:33,839
the initial the first flight from

1836
01:08:33,839 --> 01:08:36,238
quickv1 which is initial packets

1837
01:08:36,238 --> 01:08:40,238
um next slide please

1838
01:08:41,920 --> 01:08:44,080
but like so what is the property that we

1839
01:08:44,080 --> 01:08:45,279
need here between

1840
01:08:45,279 --> 01:08:47,198
uh the two versions if we want this

1841
01:08:47,198 --> 01:08:48,960
compatibility to work

1842
01:08:48,960 --> 01:08:51,920
so we define in the document a concept

1843
01:08:51,920 --> 01:08:54,399
the concept of a compatible version

1844
01:08:54,399 --> 01:08:57,040
and what that means is as you saw from

1845
01:08:57,040 --> 01:08:58,719
the previous slide is that you can take

1846
01:08:58,719 --> 01:09:00,799
the first flight from a version

1847
01:09:00,799 --> 01:09:02,799
and transform it into a first flight

1848
01:09:02,799 --> 01:09:03,839
from the second version

1849
01:09:03,839 --> 01:09:06,799
so like in that example quick view one

1850
01:09:06,799 --> 01:09:08,799
is compatible with quick v2

1851
01:09:08,799 --> 01:09:11,040
if the server can take a quick v1 first

1852
01:09:11,040 --> 01:09:12,479
flight and say

1853
01:09:12,479 --> 01:09:15,040
oh let me flip a couple bits and this is

1854
01:09:15,040 --> 01:09:16,399
now a quick view i'm going to parse this

1855
01:09:16,399 --> 01:09:17,600
as a quick v2

1856
01:09:17,600 --> 01:09:19,600
first flight and just respond as if i

1857
01:09:19,600 --> 01:09:21,279
had received that

1858
01:09:21,279 --> 01:09:23,839
so the the conceptual thing is you apply

1859
01:09:23,839 --> 01:09:25,759
a transformation

1860
01:09:25,759 --> 01:09:29,279
from one um first flight to another

1861
01:09:29,279 --> 01:09:31,600
uh in practice that transformation might

1862
01:09:31,600 --> 01:09:32,640
be as trivial

1863
01:09:32,640 --> 01:09:35,679
as simply saying oh well imagine that

1864
01:09:35,679 --> 01:09:37,439
the version long header was the other

1865
01:09:37,439 --> 01:09:38,799
uh version because the first flight

1866
01:09:38,799 --> 01:09:41,120
format is the same but we kind of left

1867
01:09:41,120 --> 01:09:42,640
that open-ended

1868
01:09:42,640 --> 01:09:46,000
uh because it'll it allows let's say if

1869
01:09:46,000 --> 01:09:49,198
for for example quick v2 wants to

1870
01:09:49,198 --> 01:09:52,000
change the identi the format of the

1871
01:09:52,000 --> 01:09:53,279
crypto frame

1872
01:09:53,279 --> 01:09:55,840
um you could say well i received a quick

1873
01:09:55,840 --> 01:09:56,719
v1

1874
01:09:56,719 --> 01:10:00,320
initial but i'm gonna prob it

1875
01:10:00,320 --> 01:10:02,480
and modify it so here's how it looked

1876
01:10:02,480 --> 01:10:03,920
with the new format of crypto frames

1877
01:10:03,920 --> 01:10:05,199
from quickbeat

1878
01:10:05,199 --> 01:10:08,400
uh a note is that this

1879
01:10:08,400 --> 01:10:10,560
uh compatibility relationship between

1880
01:10:10,560 --> 01:10:12,560
version is not bijective

1881
01:10:12,560 --> 01:10:15,520
so it's possible that version a is

1882
01:10:15,520 --> 01:10:16,000
compatible

1883
01:10:16,000 --> 01:10:17,600
with version b but not the other way

1884
01:10:17,600 --> 01:10:19,040
around because let's say

1885
01:10:19,040 --> 01:10:21,600
if a version is a superset of another

1886
01:10:21,600 --> 01:10:22,560
you can

1887
01:10:22,560 --> 01:10:25,120
uh transform in one direction but maybe

1888
01:10:25,120 --> 01:10:27,840
not in the other

1889
01:10:28,159 --> 01:10:32,080
another point is that it

1890
01:10:32,080 --> 01:10:33,679
then we define in the document the

1891
01:10:33,679 --> 01:10:36,080
concept of compatible first flight

1892
01:10:36,080 --> 01:10:39,600
because if version 8 is compatible with

1893
01:10:39,600 --> 01:10:41,920
version b maybe some first flights are

1894
01:10:41,920 --> 01:10:43,520
compatible and some are not so an

1895
01:10:43,520 --> 01:10:44,000
example

1896
01:10:44,000 --> 01:10:47,360
is let's say you add a new frame

1897
01:10:47,360 --> 01:10:51,199
whose contents are absolutely critical

1898
01:10:51,199 --> 01:10:54,159
but don't exist in the other version you

1899
01:10:54,159 --> 01:10:55,360
could say well

1900
01:10:55,360 --> 01:10:57,520
if if you send a first flight without

1901
01:10:57,520 --> 01:10:59,360
that frame then it's compatible you can

1902
01:10:59,360 --> 01:11:00,080
switch it

1903
01:11:00,080 --> 01:11:03,199
but if it has it then it it's not and so

1904
01:11:03,199 --> 01:11:05,920
then you can on the client say oh well

1905
01:11:05,920 --> 01:11:08,080
i'm hoping for compatibility from the

1906
01:11:08,080 --> 01:11:08,880
server

1907
01:11:08,880 --> 01:11:11,360
i'm not going to use this new frame and

1908
01:11:11,360 --> 01:11:12,719
therefore because i didn't

1909
01:11:12,719 --> 01:11:15,840
use this new frame i'm gonna be able to

1910
01:11:15,840 --> 01:11:18,960
to ask for compatibility from the server

1911
01:11:18,960 --> 01:11:21,040
and now how do you ask for this what

1912
01:11:21,040 --> 01:11:27,840
does that mean uh next slide please

1913
01:11:28,000 --> 01:11:31,520
so what um and one of

1914
01:11:31,520 --> 01:11:34,239
uh oh something i did forget to mention

1915
01:11:34,239 --> 01:11:34,719
is

1916
01:11:34,719 --> 01:11:38,320
uh between uh like last month or so

1917
01:11:38,320 --> 01:11:40,719
we completely rewrote the document it

1918
01:11:40,719 --> 01:11:41,679
didn't actually

1919
01:11:41,679 --> 01:11:44,400
change the wire format or the mechanism

1920
01:11:44,400 --> 01:11:46,000
in any way but it tried to

1921
01:11:46,000 --> 01:11:48,400
explain things better and in particular

1922
01:11:48,400 --> 01:11:50,159
the the mindset of the document

1923
01:11:50,159 --> 01:11:52,800
is now to have something that speaks to

1924
01:11:52,800 --> 01:11:54,719
the quick invariants

1925
01:11:54,719 --> 01:11:56,480
and then as an example tells you how it

1926
01:11:56,480 --> 01:11:58,159
would work in quickview one

1927
01:11:58,159 --> 01:12:00,480
but the idea would be that if uh quickv2

1928
01:12:00,480 --> 01:12:02,400
is very different from quickview one

1929
01:12:02,400 --> 01:12:04,080
but it'll obviously still follow the

1930
01:12:04,080 --> 01:12:05,760
invariants like this document still

1931
01:12:05,760 --> 01:12:06,560
makes sense

1932
01:12:06,560 --> 01:12:08,320
so we have something that we call

1933
01:12:08,320 --> 01:12:10,719
handshake version information

1934
01:12:10,719 --> 01:12:13,679
and both endpoints send this during the

1935
01:12:13,679 --> 01:12:14,640
handshake

1936
01:12:14,640 --> 01:12:16,880
uh in practice in quickview one this is

1937
01:12:16,880 --> 01:12:18,640
a transform parameter

1938
01:12:18,640 --> 01:12:21,520
uh the reason for that is is that is our

1939
01:12:21,520 --> 01:12:23,440
best extension point for the handshake

1940
01:12:23,440 --> 01:12:24,320
in quick

1941
01:12:24,320 --> 01:12:27,360
and additionally it is authenticated

1942
01:12:27,360 --> 01:12:29,760
because it ends up in the tls transcript

1943
01:12:29,760 --> 01:12:30,960
uh and so that is

1944
01:12:30,960 --> 01:12:33,760
one key required property for uh

1945
01:12:33,760 --> 01:12:35,520
downgrade attacks is that the

1946
01:12:35,520 --> 01:12:37,679
for future versions they need to make

1947
01:12:37,679 --> 01:12:38,719
sure that the handshake version

1948
01:12:38,719 --> 01:12:40,800
information is authenticated

1949
01:12:40,800 --> 01:12:45,040
um and so how does it work what does the

1950
01:12:45,040 --> 01:12:46,320
client send

1951
01:12:46,320 --> 01:12:49,440
so it sends the

1952
01:12:49,440 --> 01:12:52,640
uh so the currently attempted version it

1953
01:12:52,640 --> 01:12:54,400
is just a mirror of what's on the log

1954
01:12:54,400 --> 01:12:56,719
header so that doesn't provide any

1955
01:12:56,719 --> 01:12:58,719
useful information but what it does is

1956
01:12:58,719 --> 01:13:00,320
it forces the value in the long header

1957
01:13:00,320 --> 01:13:02,320
to show up in the tls transcript

1958
01:13:02,320 --> 01:13:04,239
to prevent an attacker from messing with

1959
01:13:04,239 --> 01:13:06,239
it uh then the previous

1960
01:13:06,239 --> 01:13:08,960
previously attempted version is in the

1961
01:13:08,960 --> 01:13:09,760
case of an

1962
01:13:09,760 --> 01:13:11,520
incompatible version negotiation so

1963
01:13:11,520 --> 01:13:12,800
you're sending

1964
01:13:12,800 --> 01:13:14,800
a first flight after you've received

1965
01:13:14,800 --> 01:13:16,800
over a negotiation packet you say oh by

1966
01:13:16,800 --> 01:13:17,440
the way

1967
01:13:17,440 --> 01:13:19,040
i initially tried that version and you

1968
01:13:19,040 --> 01:13:20,560
told me it didn't work

1969
01:13:20,560 --> 01:13:23,600
again this is to prevent um

1970
01:13:23,600 --> 01:13:27,120
downgrade attacks and then it

1971
01:13:27,120 --> 01:13:30,239
it also has the uh

1972
01:13:30,239 --> 01:13:33,280
it copies the contents of the version

1973
01:13:33,280 --> 01:13:34,960
negotiation packet it receives

1974
01:13:34,960 --> 01:13:36,800
which is like the received negotiation

1975
01:13:36,800 --> 01:13:39,520
version and uh the idea there

1976
01:13:39,520 --> 01:13:41,920
is again to put that entire payload of

1977
01:13:41,920 --> 01:13:42,960
the vm packet

1978
01:13:42,960 --> 01:13:46,000
into the tls transcript in order to make

1979
01:13:46,000 --> 01:13:47,679
sure it is authenticated so

1980
01:13:47,679 --> 01:13:49,679
an attacker cannot mess with a single

1981
01:13:49,679 --> 01:13:50,719
bit of it

1982
01:13:50,719 --> 01:13:52,800
uh some folks have said on issues that

1983
01:13:52,800 --> 01:13:54,080
it's kind of overkill

1984
01:13:54,080 --> 01:13:56,320
and it is i think we could probably get

1985
01:13:56,320 --> 01:13:57,440
the security properties

1986
01:13:57,440 --> 01:14:00,880
with a little less information but in

1987
01:14:00,880 --> 01:14:04,080
my personal opinion is getting these

1988
01:14:04,080 --> 01:14:06,560
things right is always tricky so

1989
01:14:06,560 --> 01:14:09,120
going with the let's just authenticate

1990
01:14:09,120 --> 01:14:10,000
everything

1991
01:14:10,000 --> 01:14:12,800
makes it uh safer because it means we

1992
01:14:12,800 --> 01:14:14,239
it's harder for us to get it wrong

1993
01:14:14,239 --> 01:14:16,080
like they're we can't have confusion

1994
01:14:16,080 --> 01:14:17,199
attack because there is something we

1995
01:14:17,199 --> 01:14:19,280
forgot to authenticate

1996
01:14:19,280 --> 01:14:20,640
and then finally the last thing the

1997
01:14:20,640 --> 01:14:22,640
client sends is the list of compatible

1998
01:14:22,640 --> 01:14:23,520
versions

1999
01:14:23,520 --> 01:14:26,239
so in my example earlier when the client

2000
01:14:26,239 --> 01:14:26,880
says it's

2001
01:14:26,880 --> 01:14:28,640
quick if you won first flight it would

2002
01:14:28,640 --> 01:14:30,480
say oh and by the way

2003
01:14:30,480 --> 01:14:33,920
um i can uh i can seamlessly upgrade to

2004
01:14:33,920 --> 01:14:35,199
quick v2 if i

2005
01:14:35,199 --> 01:14:37,360
if you want to do that as well so like

2006
01:14:37,360 --> 01:14:39,120
this first flight is compatible

2007
01:14:39,120 --> 01:14:42,400
with quick v2 um

2008
01:14:42,400 --> 01:14:43,840
then what does the server say in

2009
01:14:43,840 --> 01:14:45,600
response uh

2010
01:14:45,600 --> 01:14:49,120
the server will so the negotiated

2011
01:14:49,120 --> 01:14:49,840
version is

2012
01:14:49,840 --> 01:14:52,880
again echoing the um

2013
01:14:52,880 --> 01:14:54,560
what it's sending on the long header

2014
01:14:54,560 --> 01:14:57,120
similarly to make sure it lands in the

2015
01:14:57,120 --> 01:15:00,960
in the transcript and um

2016
01:15:00,960 --> 01:15:04,400
then it also says and by the way here

2017
01:15:04,400 --> 01:15:06,159
are all the versions i support

2018
01:15:06,159 --> 01:15:08,880
so the idea there is if there are

2019
01:15:08,880 --> 01:15:10,719
versions that are not compatible so

2020
01:15:10,719 --> 01:15:12,159
let's say the server also

2021
01:15:12,159 --> 01:15:15,199
supports quick version 42 and that is so

2022
01:15:15,199 --> 01:15:17,120
different from quickview one that it's

2023
01:15:17,120 --> 01:15:18,560
not compatible

2024
01:15:18,560 --> 01:15:20,640
that it can tell the client and the

2025
01:15:20,640 --> 01:15:22,640
client can save in a cache somewhere

2026
01:15:22,640 --> 01:15:25,920
oh this server speaks quickv42 next time

2027
01:15:25,920 --> 01:15:26,640
i connect i'm

2028
01:15:26,640 --> 01:15:28,719
maybe going to try that so like if your

2029
01:15:28,719 --> 01:15:30,480
client already has an all service cache

2030
01:15:30,480 --> 01:15:31,520
for example that's

2031
01:15:31,520 --> 01:15:32,960
you know kind of the same conceptual

2032
01:15:32,960 --> 01:15:34,960
thing where i would put this so the next

2033
01:15:34,960 --> 01:15:36,880
time you want to talk to the server

2034
01:15:36,880 --> 01:15:38,400
instead of saying oh let's just use

2035
01:15:38,400 --> 01:15:39,920
quickv1 because i know most people

2036
01:15:39,920 --> 01:15:41,280
support this it's like we can use

2037
01:15:41,280 --> 01:15:44,800
quickv42 which is amazing

2038
01:15:44,800 --> 01:15:49,040
and the way downgrade prevention works

2039
01:15:49,040 --> 01:15:52,640
is by is on the

2040
01:15:52,640 --> 01:15:55,840
server and that was this is a different

2041
01:15:55,840 --> 01:15:56,320
from

2042
01:15:56,320 --> 01:15:57,920
a difference from what google quick did

2043
01:15:57,920 --> 01:16:00,000
and what the original igf specification

2044
01:16:00,000 --> 01:16:00,719
did

2045
01:16:00,719 --> 01:16:03,760
but it allows for multi-cdn or gradual

2046
01:16:03,760 --> 01:16:04,480
deployment

2047
01:16:04,480 --> 01:16:07,920
in servers where let's say you have a

2048
01:16:07,920 --> 01:16:09,840
server fleet where you support a set of

2049
01:16:09,840 --> 01:16:10,719
versions

2050
01:16:10,719 --> 01:16:13,280
and you're going to change that to a new

2051
01:16:13,280 --> 01:16:14,000
one

2052
01:16:14,000 --> 01:16:15,760
what you do is first you roll out a

2053
01:16:15,760 --> 01:16:18,320
change to your entire fleet to say

2054
01:16:18,320 --> 01:16:20,400
as part of your downgrade prevention

2055
01:16:20,400 --> 01:16:22,560
except these two sets of versions like

2056
01:16:22,560 --> 01:16:24,960
either the old one and the new one

2057
01:16:24,960 --> 01:16:27,360
then you gradually go from the old one

2058
01:16:27,360 --> 01:16:28,800
to the new one

2059
01:16:28,800 --> 01:16:30,400
and then you can switch the for

2060
01:16:30,400 --> 01:16:32,080
downgrade prevention okay all my servers

2061
01:16:32,080 --> 01:16:33,040
are supposed to support

2062
01:16:33,040 --> 01:16:35,760
this and if something doesn't match that

2063
01:16:35,760 --> 01:16:36,719
then i declare

2064
01:16:36,719 --> 01:16:39,520
um the downgrade attack or similarly if

2065
01:16:39,520 --> 01:16:41,920
you have multi-cdn you can say

2066
01:16:41,920 --> 01:16:45,040
i support this and the rest of the fleet

2067
01:16:45,040 --> 01:16:46,320
can also support that

2068
01:16:46,320 --> 01:16:49,760
so you can put that in your um

2069
01:16:49,760 --> 01:16:51,040
in the state so that puts that

2070
01:16:51,040 --> 01:16:53,040
responsibility on the server because

2071
01:16:53,040 --> 01:16:54,560
it's the server's job to know

2072
01:16:54,560 --> 01:16:56,480
what its fleet situation is the client

2073
01:16:56,480 --> 01:16:57,760
has no idea

2074
01:16:57,760 --> 01:17:01,600
um the the one downside here is the

2075
01:17:01,600 --> 01:17:02,080
client

2076
01:17:02,080 --> 01:17:04,400
can't perform as much validation as

2077
01:17:04,400 --> 01:17:05,199
before

2078
01:17:05,199 --> 01:17:06,719
and we're relying on the server to do

2079
01:17:06,719 --> 01:17:08,480
their job correctly but

2080
01:17:08,480 --> 01:17:10,400
i think that's been a reasonable design

2081
01:17:10,400 --> 01:17:12,320
choice uh

2082
01:17:12,320 --> 01:17:17,840
and next slide please

2083
01:17:19,679 --> 01:17:23,120
so this is the one point that kind of

2084
01:17:23,120 --> 01:17:25,520
sparked some of the design and i wanted

2085
01:17:25,520 --> 01:17:27,600
to make sure we had it uh discussed and

2086
01:17:27,600 --> 01:17:28,800
like

2087
01:17:28,800 --> 01:17:31,679
a good or you know ideally lan reach

2088
01:17:31,679 --> 01:17:33,120
consensus on a given design

2089
01:17:33,120 --> 01:17:36,400
because that way we can uh if we're

2090
01:17:36,400 --> 01:17:37,840
going to change that design decision we

2091
01:17:37,840 --> 01:17:39,679
need to revisit some design choices

2092
01:17:39,679 --> 01:17:43,199
so the question is where

2093
01:17:43,199 --> 01:17:47,040
can compatibility be defined uh so

2094
01:17:47,040 --> 01:17:50,400
right now one of the features of the

2095
01:17:50,400 --> 01:17:51,360
current draft

2096
01:17:51,360 --> 01:17:53,360
is that compatibility can be defined

2097
01:17:53,360 --> 01:17:55,520
anywhere so let's say

2098
01:17:55,520 --> 01:17:58,560
uh quick version foo and quick version

2099
01:17:58,560 --> 01:18:00,560
bar are defined by two independent

2100
01:18:00,560 --> 01:18:02,080
groups of people at the same time and

2101
01:18:02,080 --> 01:18:03,760
they don't know about each other and

2102
01:18:03,760 --> 01:18:06,159
those versions come into existence

2103
01:18:06,159 --> 01:18:09,040
it's possible for like a year later

2104
01:18:09,040 --> 01:18:10,719
someone to write a document to say oh

2105
01:18:10,719 --> 01:18:12,320
actually phu and bar are

2106
01:18:12,320 --> 01:18:14,400
who is compatible with bar and here is

2107
01:18:14,400 --> 01:18:16,000
how you do the transformation of a first

2108
01:18:16,000 --> 01:18:16,719
flight from

2109
01:18:16,719 --> 01:18:20,080
food to a first flight from bar uh

2110
01:18:20,080 --> 01:18:23,679
that isn't necessarily a

2111
01:18:23,679 --> 01:18:25,679
critical feature because in practice i

2112
01:18:25,679 --> 01:18:26,960
think uh

2113
01:18:26,960 --> 01:18:29,120
most like one quick v2 comes out for

2114
01:18:29,120 --> 01:18:30,159
example

2115
01:18:30,159 --> 01:18:32,000
uh probably as part of that work we'll

2116
01:18:32,000 --> 01:18:33,840
say one and quick v2 is compatible with

2117
01:18:33,840 --> 01:18:34,560
quickview or

2118
01:18:34,560 --> 01:18:36,800
quickv1 is compatible with quickv2 and

2119
01:18:36,800 --> 01:18:38,320
vice versa and here's how you do the

2120
01:18:38,320 --> 01:18:41,360
transformation in both directions um

2121
01:18:41,360 --> 01:18:44,000
but that might not always be the case

2122
01:18:44,000 --> 01:18:46,159
but what does that mean

2123
01:18:46,159 --> 01:18:48,480
uh in terms of like the impact on the

2124
01:18:48,480 --> 01:18:50,560
draft after the assigned decision

2125
01:18:50,560 --> 01:18:52,560
it means that the client and the server

2126
01:18:52,560 --> 01:18:53,760
can disagree

2127
01:18:53,760 --> 01:18:55,760
on whether two versions are compatible

2128
01:18:55,760 --> 01:18:57,840
because if the document got written

2129
01:18:57,840 --> 01:18:58,640
later

2130
01:18:58,640 --> 01:19:00,080
it's possible that the client knows

2131
01:19:00,080 --> 01:19:01,760
about it and implemented it

2132
01:19:01,760 --> 01:19:04,480
but the server doesn't so it's possible

2133
01:19:04,480 --> 01:19:06,320
for the client to say hey

2134
01:19:06,320 --> 01:19:09,120
here's an initial version foo and also

2135
01:19:09,120 --> 01:19:10,560
i'm compatible with version bar and for

2136
01:19:10,560 --> 01:19:11,920
the server to say

2137
01:19:11,920 --> 01:19:14,640
oh no no i'm not compatible i don't

2138
01:19:14,640 --> 01:19:16,640
think foo is compatible with bar

2139
01:19:16,640 --> 01:19:20,159
so what happens if they disagree uh

2140
01:19:20,159 --> 01:19:25,040
if the uh if the

2141
01:19:25,040 --> 01:19:28,080
client doesn't think it's compatible and

2142
01:19:28,080 --> 01:19:29,920
the server thinks it's compatible that's

2143
01:19:29,920 --> 01:19:31,840
the trivial case because the client just

2144
01:19:31,840 --> 01:19:33,280
doesn't add that to the compatible

2145
01:19:33,280 --> 01:19:34,159
versions

2146
01:19:34,159 --> 01:19:35,840
and the server will just treat it

2147
01:19:35,840 --> 01:19:37,520
normally of okay you think this is

2148
01:19:37,520 --> 01:19:38,960
compatible with this list do i have

2149
01:19:38,960 --> 01:19:40,080
anything in there

2150
01:19:40,080 --> 01:19:42,640
yes no so that case is easy the case

2151
01:19:42,640 --> 01:19:43,360
that is

2152
01:19:43,360 --> 01:19:46,400
also slightly trickier is if the client

2153
01:19:46,400 --> 01:19:47,840
thinks it's compatible but the server

2154
01:19:47,840 --> 01:19:48,880
doesn't

2155
01:19:48,880 --> 01:19:51,280
um the solution is not that it's not

2156
01:19:51,280 --> 01:19:53,360
hard if the server

2157
01:19:53,360 --> 01:19:54,880
in that case it kind of goes back to the

2158
01:19:54,880 --> 01:19:56,480
incompatible mode so if the server

2159
01:19:56,480 --> 01:19:58,320
understands the original version foo

2160
01:19:58,320 --> 01:19:59,840
then it just negotiates foo and you're

2161
01:19:59,840 --> 01:20:02,159
done and if it doesn't then it sends a

2162
01:20:02,159 --> 01:20:04,400
version negotiation packet

2163
01:20:04,400 --> 01:20:06,960
so all in all i think that the impact on

2164
01:20:06,960 --> 01:20:08,880
the design isn't too big

2165
01:20:08,880 --> 01:20:12,000
and that this isn't too complex but i

2166
01:20:12,000 --> 01:20:14,560
wanted to ask people um what they

2167
01:20:14,560 --> 01:20:15,360
thought uh

2168
01:20:15,360 --> 01:20:18,639
here and given that this is my uh

2169
01:20:18,639 --> 01:20:22,159
last slide uh next slide please

2170
01:20:25,280 --> 01:20:28,960
all right and that's kind of it um we

2171
01:20:28,960 --> 01:20:32,239
think the uh yes uh ecker

2172
01:20:32,239 --> 01:20:35,520
uh or i guess just before um

2173
01:20:35,520 --> 01:20:38,560
we we think the document is getting to

2174
01:20:38,560 --> 01:20:39,600
be in good shape

2175
01:20:39,600 --> 01:20:42,080
but we wanna hear feedback from folks uh

2176
01:20:42,080 --> 01:20:43,920
and also we're gonna need more

2177
01:20:43,920 --> 01:20:46,000
implementation deployment experience uh

2178
01:20:46,000 --> 01:20:47,520
we haven't implemented this in google

2179
01:20:47,520 --> 01:20:49,280
stack yet and that's my fault so we're

2180
01:20:49,280 --> 01:20:49,920
gonna

2181
01:20:49,920 --> 01:20:51,440
try to get to that pretty soon we don't

2182
01:20:51,440 --> 01:20:52,880
want to ship this without implementing

2183
01:20:52,880 --> 01:20:53,760
it first

2184
01:20:53,760 --> 01:20:55,679
but i would love to open the floor to

2185
01:20:55,679 --> 01:20:57,520
anyone please send you know questions

2186
01:20:57,520 --> 01:20:58,159
comments

2187
01:20:58,159 --> 01:20:59,520
do you think this draft is getting close

2188
01:20:59,520 --> 01:21:01,600
to ready uh or not

2189
01:21:01,600 --> 01:21:05,120
um martin just just before we get to the

2190
01:21:05,120 --> 01:21:06,719
queue we've got some some people in the

2191
01:21:06,719 --> 01:21:07,520
queue we've got

2192
01:21:07,520 --> 01:21:10,400
about six minutes for any discussion on

2193
01:21:10,400 --> 01:21:12,320
this document so i encourage people to

2194
01:21:12,320 --> 01:21:14,000
get in the queue now and we'll we'll

2195
01:21:14,000 --> 01:21:17,520
run the timer down so

2196
01:21:20,719 --> 01:21:22,880
get in chat and you know this i think

2197
01:21:22,880 --> 01:21:23,920
this is the wrong

2198
01:21:23,920 --> 01:21:26,840
uh design so i don't think this is

2199
01:21:26,840 --> 01:21:28,719
already um

2200
01:21:28,719 --> 01:21:30,960
i i think we need a a much simpler

2201
01:21:30,960 --> 01:21:33,199
design than what he presented here

2202
01:21:33,199 --> 01:21:35,920
i realized this is the maximal design

2203
01:21:35,920 --> 01:21:36,639
and

2204
01:21:36,639 --> 01:21:38,639
um you expressed your willingness to

2205
01:21:38,639 --> 01:21:40,719
look for

2206
01:21:40,719 --> 01:21:42,080
something that's a little more more

2207
01:21:42,080 --> 01:21:43,760
manageable i think there is a more

2208
01:21:43,760 --> 01:21:45,440
manageable thing here that uh

2209
01:21:45,440 --> 01:21:48,960
doesn't require probably about half of

2210
01:21:48,960 --> 01:21:50,960
the fields that you have here

2211
01:21:50,960 --> 01:21:54,080
and um i i'd like to

2212
01:21:54,080 --> 01:21:55,760
to explore whether but whether that's

2213
01:21:55,760 --> 01:21:58,000
possible here i also think that there's

2214
01:21:58,000 --> 01:21:59,840
a there's a lot of work to be done

2215
01:21:59,840 --> 01:22:02,560
on getting them that the transformation

2216
01:22:02,560 --> 01:22:05,120
between two versions working properly

2217
01:22:05,120 --> 01:22:07,199
uh at least at a theoretical level so

2218
01:22:07,199 --> 01:22:08,800
that we can understand what's going on

2219
01:22:08,800 --> 01:22:11,440
because what actually has to happen in

2220
01:22:11,440 --> 01:22:13,840
practice in a lot of cases might be that

2221
01:22:13,840 --> 01:22:16,320
the version two thing that offers a

2222
01:22:16,320 --> 01:22:17,520
version one

2223
01:22:17,520 --> 01:22:20,800
first flight we'll have to

2224
01:22:20,800 --> 01:22:22,400
apply some of the constraints that apply

2225
01:22:22,400 --> 01:22:25,280
to two to its version one flight such

2226
01:22:25,280 --> 01:22:27,120
that it can be transformed

2227
01:22:27,120 --> 01:22:28,239
and i don't think there's a there's

2228
01:22:28,239 --> 01:22:29,600
anything in the in the draft that

2229
01:22:29,600 --> 01:22:30,719
currently addresses that

2230
01:22:30,719 --> 01:22:34,480
particular concern so

2231
01:22:34,480 --> 01:22:38,159
uh thanks empty before you go um

2232
01:22:38,159 --> 01:22:40,639
when you say you you want a simpler

2233
01:22:40,639 --> 01:22:42,960
design do you have something in mind

2234
01:22:42,960 --> 01:22:47,440
um like because i i'm totally game for

2235
01:22:47,440 --> 01:22:48,639
simplifying things

2236
01:22:48,639 --> 01:22:51,600
but uh i would love to see a proposal

2237
01:22:51,600 --> 01:22:52,159
like are

2238
01:22:52,159 --> 01:22:54,480
there specific simplifications that you

2239
01:22:54,480 --> 01:22:55,199
can think of

2240
01:22:55,199 --> 01:22:57,040
without any without losing features so

2241
01:22:57,040 --> 01:22:58,400
those we would definitely get

2242
01:22:58,400 --> 01:23:00,880
or do you have features that you want to

2243
01:23:00,880 --> 01:23:02,719
drop that might allow us to simplify the

2244
01:23:02,719 --> 01:23:04,239
design in which case which features are

2245
01:23:04,239 --> 01:23:05,679
those

2246
01:23:05,679 --> 01:23:08,480
so just just very briefly um when it

2247
01:23:08,480 --> 01:23:09,199
comes to

2248
01:23:09,199 --> 01:23:10,960
version upgrade the principle that we've

2249
01:23:10,960 --> 01:23:12,480
always applied is that the client offers

2250
01:23:12,480 --> 01:23:14,159
a list and the server chooses

2251
01:23:14,159 --> 01:23:16,639
and that that can work here um and when

2252
01:23:16,639 --> 01:23:18,400
it comes to incompatible version upgrade

2253
01:23:18,400 --> 01:23:18,880
you just

2254
01:23:18,880 --> 01:23:21,280
invert that which is that the server

2255
01:23:21,280 --> 01:23:22,239
offers a list

2256
01:23:22,239 --> 01:23:24,639
and the client chooses and i think that

2257
01:23:24,639 --> 01:23:25,760
gets us

2258
01:23:25,760 --> 01:23:29,280
90 of the way to having a functional

2259
01:23:29,280 --> 01:23:32,159
and secure uh upgrade system and you've

2260
01:23:32,159 --> 01:23:33,280
got a bunch of

2261
01:23:33,280 --> 01:23:36,560
stuff in here i think probably from

2262
01:23:36,560 --> 01:23:38,960
uh the basis of an abundance of caution

2263
01:23:38,960 --> 01:23:39,840
which is

2264
01:23:39,840 --> 01:23:42,560
probably fine but uh i think we can

2265
01:23:42,560 --> 01:23:44,159
probably do a little bit of paperwork

2266
01:23:44,159 --> 01:23:47,360
and and reassure ourselves that that

2267
01:23:47,360 --> 01:23:48,560
a lot of those fields aren't really

2268
01:23:48,560 --> 01:23:51,040
necessary

2269
01:23:52,000 --> 01:23:56,400
okay thanks uh chris

2270
01:23:58,080 --> 01:24:00,639
uh yeah um you mentioned a couple times

2271
01:24:00,639 --> 01:24:01,920
that this is perhaps uh

2272
01:24:01,920 --> 01:24:04,000
somewhat complicated and i was wondering

2273
01:24:04,000 --> 01:24:05,360
um i'm not going to weigh in on the

2274
01:24:05,360 --> 01:24:06,639
complexity point right now but i was

2275
01:24:06,639 --> 01:24:07,840
wondering to what extent this has been

2276
01:24:07,840 --> 01:24:08,560
analyzed

2277
01:24:08,560 --> 01:24:11,679
um uh i was sort of triggered um

2278
01:24:11,679 --> 01:24:14,159
with my ech hat on uh in terms when you

2279
01:24:14,159 --> 01:24:15,600
mentioned things like downgrade attacks

2280
01:24:15,600 --> 01:24:16,560
and um

2281
01:24:16,560 --> 01:24:21,679
and whatnot and can you speak to that

2282
01:24:21,679 --> 01:24:25,600
oh absolutely uh there has been exactly

2283
01:24:25,600 --> 01:24:29,120
zero analysis of this apart from uh me

2284
01:24:29,120 --> 01:24:30,639
looking at it and being like this seems

2285
01:24:30,639 --> 01:24:31,120
fine

2286
01:24:31,120 --> 01:24:33,840
and so therefore it must totally be fine

2287
01:24:33,840 --> 01:24:34,239
right

2288
01:24:34,239 --> 01:24:37,679
um disclaimer i'm not a security expert

2289
01:24:37,679 --> 01:24:40,880
uh so yes we would before shipping

2290
01:24:40,880 --> 01:24:44,320
definitely want to um

2291
01:24:44,320 --> 01:24:46,080
have folks look at this and in

2292
01:24:46,080 --> 01:24:48,560
particular one of the reasons for adding

2293
01:24:48,560 --> 01:24:49,199
the like

2294
01:24:49,199 --> 01:24:51,199
version from the long header in here did

2295
01:24:51,199 --> 01:24:53,280
come out of security research

2296
01:24:53,280 --> 01:24:56,000
folks who were saying um oh here are

2297
01:24:56,000 --> 01:24:58,080
some fields that enticer might muck with

2298
01:24:58,080 --> 01:24:59,600
and so it quit in the quick core

2299
01:24:59,600 --> 01:25:00,880
documents for example that's why we

2300
01:25:00,880 --> 01:25:02,880
added the connection ids uh to transport

2301
01:25:02,880 --> 01:25:04,239
parameters to

2302
01:25:04,239 --> 01:25:07,360
put them in the tls sanchez transcript

2303
01:25:07,360 --> 01:25:09,199
uh we need to do the analysis here to

2304
01:25:09,199 --> 01:25:11,040
make sure that it does its job

2305
01:25:11,040 --> 01:25:13,520
i from reasoning about it i think it's

2306
01:25:13,520 --> 01:25:14,080
fine but

2307
01:25:14,080 --> 01:25:16,000
again like i was saying i didn't do any

2308
01:25:16,000 --> 01:25:17,360
kind of formal analysis and it would be

2309
01:25:17,360 --> 01:25:18,560
nice for someone to do that

2310
01:25:18,560 --> 01:25:20,480
i just don't have the expertise nothing

2311
01:25:20,480 --> 01:25:22,000
is um seems obviously wrong

2312
01:25:22,000 --> 01:25:24,000
um we can probably assist with that so

2313
01:25:24,000 --> 01:25:26,400
we'll follow up offline awesome thank

2314
01:25:26,400 --> 01:25:27,280
you

2315
01:25:27,280 --> 01:25:29,760
we're at two minutes so cut the queue

2316
01:25:29,760 --> 01:25:31,920
after done

2317
01:25:31,920 --> 01:25:35,360
all right hi uh

2318
01:25:35,360 --> 01:25:38,239
um erica scrolla um i i don't know what

2319
01:25:38,239 --> 01:25:41,120
the authors of this draft were thinking

2320
01:25:41,120 --> 01:25:42,880
sorry i'm an author of this draft so um

2321
01:25:42,880 --> 01:25:44,639
that was not intended to knock on david

2322
01:25:44,639 --> 01:25:47,920
um um yeah i mean i think uh um you know

2323
01:25:47,920 --> 01:25:48,960
dave and i talked a bit about this

2324
01:25:48,960 --> 01:25:51,040
separately um i think

2325
01:25:51,040 --> 01:25:52,800
you know there may be three issues here

2326
01:25:52,800 --> 01:25:54,639
um one issue is

2327
01:25:54,639 --> 01:25:56,000
um do we actually need all the

2328
01:25:56,000 --> 01:25:58,080
functionality that this draft provides

2329
01:25:58,080 --> 01:25:59,360
and we do we need both compatible and

2330
01:25:59,360 --> 01:26:01,840
compatible um um i think my opinion is

2331
01:26:01,840 --> 01:26:02,639
why they know that we don't need

2332
01:26:02,639 --> 01:26:03,920
incompatible or we could define it later

2333
01:26:03,920 --> 01:26:04,880
if we absolutely had to

2334
01:26:04,880 --> 01:26:06,400
um which after all the posture we took

2335
01:26:06,400 --> 01:26:08,000
with quickv1 um

2336
01:26:08,000 --> 01:26:11,120
the um uh the the second question is

2337
01:26:11,120 --> 01:26:13,360
um is this the right interpretation of

2338
01:26:13,360 --> 01:26:14,719
compatible um

2339
01:26:14,719 --> 01:26:18,000
namely uh transl transformable versus

2340
01:26:18,000 --> 01:26:20,480
uh valid um so in other protocols i'm

2341
01:26:20,480 --> 01:26:21,199
familiar with

2342
01:26:21,199 --> 01:26:22,719
the definition of compatible is mostly

2343
01:26:22,719 --> 01:26:24,400
valid so like when you send

2344
01:26:24,400 --> 01:26:26,880
so as a concrete example um you know in

2345
01:26:26,880 --> 01:26:28,159
tls and tls

2346
01:26:28,159 --> 01:26:30,480
you know the tls 1.3 client hello is a

2347
01:26:30,480 --> 01:26:32,480
valid tls one client hello

2348
01:26:32,480 --> 01:26:34,000
um you know assuming of course you offer

2349
01:26:34,000 --> 01:26:36,719
tls1 as a version um and um

2350
01:26:36,719 --> 01:26:39,040
so that's a simpler kind of concept um i

2351
01:26:39,040 --> 01:26:40,480
think we should quite get away with but

2352
01:26:40,480 --> 01:26:41,280
we could discuss

2353
01:26:41,280 --> 01:26:43,520
and the third question i think is given

2354
01:26:43,520 --> 01:26:44,480
all these

2355
01:26:44,480 --> 01:26:46,239
given these sort of functional

2356
01:26:46,239 --> 01:26:48,080
constraints that this draft adopts

2357
01:26:48,080 --> 01:26:50,639
is this the simplest design that um

2358
01:26:50,639 --> 01:26:52,080
provides the security value

2359
01:26:52,080 --> 01:26:54,320
that um you'd like to have um or and and

2360
01:26:54,320 --> 01:26:55,360
the functionalization

2361
01:26:55,360 --> 01:26:58,880
as well um and um so

2362
01:26:58,880 --> 01:27:00,320
uh um and i think that's the part but i

2363
01:27:00,320 --> 01:27:01,920
think i i guess i'm a little unclear

2364
01:27:01,920 --> 01:27:03,360
when martin's challenging just this last

2365
01:27:03,360 --> 01:27:04,560
point are they challenging a number of

2366
01:27:04,560 --> 01:27:05,120
other points

2367
01:27:05,120 --> 01:27:06,320
so i'd probably helpful to draw that on

2368
01:27:06,320 --> 01:27:08,080
later but i agree this is like extremely

2369
01:27:08,080 --> 01:27:09,040
complicated design

2370
01:27:09,040 --> 01:27:11,600
and so um both it's worth asking is the

2371
01:27:11,600 --> 01:27:12,880
right functional requirements and b's

2372
01:27:12,880 --> 01:27:15,920
this is the simplest way to get them

2373
01:27:16,320 --> 01:27:18,560
to totally agree uh that that makes

2374
01:27:18,560 --> 01:27:19,600
total sense

2375
01:27:19,600 --> 01:27:23,679
and uh i encourage and anyone who thinks

2376
01:27:23,679 --> 01:27:25,440
this is too complicated which

2377
01:27:25,440 --> 01:27:27,760
i don't disagree with uh to propose

2378
01:27:27,760 --> 01:27:28,560
alternate designs

2379
01:27:28,560 --> 01:27:30,639
i think that would help inform uh the

2380
01:27:30,639 --> 01:27:32,480
the work here to

2381
01:27:32,480 --> 01:27:36,320
come up with something better uh mike

2382
01:27:40,159 --> 01:27:43,199
um so i think this basically comes down

2383
01:27:43,199 --> 01:27:45,040
to

2384
01:27:45,040 --> 01:27:48,800
what restrictions we intend to place

2385
01:27:48,800 --> 01:27:52,400
on future versions of quick and

2386
01:27:52,400 --> 01:27:55,280
if we intend to put more restrictions on

2387
01:27:55,280 --> 01:27:56,639
them than we have

2388
01:27:56,639 --> 01:27:58,239
we'd better do it in a hurry because

2389
01:27:58,239 --> 01:28:00,000
we've already sent invariant to

2390
01:28:00,000 --> 01:28:04,000
the rfc editor

2391
01:28:04,960 --> 01:28:08,080
the the trouble here is

2392
01:28:08,080 --> 01:28:11,120
we've defined the invariance to say

2393
01:28:11,120 --> 01:28:13,360
once you get to the version field that

2394
01:28:13,360 --> 01:28:14,159
defines

2395
01:28:14,159 --> 01:28:17,120
everything else that is in the packet it

2396
01:28:17,120 --> 01:28:19,120
might or might not use tls

2397
01:28:19,120 --> 01:28:20,719
you might or might not have heard of it

2398
01:28:20,719 --> 01:28:22,800
you can send a greased version

2399
01:28:22,800 --> 01:28:26,639
with completely incomprehensible payload

2400
01:28:26,639 --> 01:28:28,480
and all of that is legal per the

2401
01:28:28,480 --> 01:28:31,760
invariants and stuff we've already said

2402
01:28:31,760 --> 01:28:34,320
i don't think we have the choice to go

2403
01:28:34,320 --> 01:28:35,520
back on that now

2404
01:28:35,520 --> 01:28:39,120
and to me that that means we can't

2405
01:28:39,120 --> 01:28:39,920
really toss

2406
01:28:39,920 --> 01:28:43,679
incompatible version negotiation out

2407
01:28:43,679 --> 01:28:46,560
and i think that probably is the was the

2408
01:28:46,560 --> 01:28:48,719
right design

2409
01:28:48,719 --> 01:28:52,800
now does that make this complicated yes

2410
01:28:52,800 --> 01:28:54,480
are there things we can simplify about

2411
01:28:54,480 --> 01:28:56,639
this i'm not sure

2412
01:28:56,639 --> 01:29:00,000
it'd be nice but i don't think the path

2413
01:29:00,000 --> 01:29:01,199
to simplification

2414
01:29:01,199 --> 01:29:03,679
is retroactively changing the invariance

2415
01:29:03,679 --> 01:29:04,880
to

2416
01:29:04,880 --> 01:29:06,320
you always have to know about all

2417
01:29:06,320 --> 01:29:08,880
previous versions versions are linear

2418
01:29:08,880 --> 01:29:11,920
versions use tls

2419
01:29:13,440 --> 01:29:15,280
thanks no i totally agree with you and

2420
01:29:15,280 --> 01:29:16,800
you know even just saying all versions

2421
01:29:16,800 --> 01:29:17,600
use tls

2422
01:29:17,600 --> 01:29:20,000
is like a non-starter we still have

2423
01:29:20,000 --> 01:29:21,280
google quick with

2424
01:29:21,280 --> 01:29:24,320
quick crypto uh in in production and

2425
01:29:24,320 --> 01:29:27,360
that is a real version and

2426
01:29:27,360 --> 01:29:30,320
we do have a mechanic like we will at

2427
01:29:30,320 --> 01:29:31,840
some point you know deprecate

2428
01:29:31,840 --> 01:29:33,360
and remove this version from google

2429
01:29:33,360 --> 01:29:35,040
servers and

2430
01:29:35,040 --> 01:29:36,719
we need a way to like send a version

2431
01:29:36,719 --> 01:29:38,639
negotiation packet to the client and for

2432
01:29:38,639 --> 01:29:39,120
half

2433
01:29:39,120 --> 01:29:41,280
that to fall back gracefully without a

2434
01:29:41,280 --> 01:29:42,880
downgrade being possible so totally

2435
01:29:42,880 --> 01:29:44,239
agree with you there is absolutely a

2436
01:29:44,239 --> 01:29:45,679
need for incompatible

2437
01:29:45,679 --> 01:29:48,000
one thought that comes to mind is we

2438
01:29:48,000 --> 01:29:49,760
could end up splitting this into

2439
01:29:49,760 --> 01:29:53,520
two drafts one being how do you

2440
01:29:53,520 --> 01:29:56,080
secure incompatible version negotiation

2441
01:29:56,080 --> 01:29:56,960
and one is

2442
01:29:56,960 --> 01:29:58,880
how do you do compatible which is

2443
01:29:58,880 --> 01:30:00,800
trickier and more complex uh

2444
01:30:00,800 --> 01:30:04,400
that might be a way to simplify this

2445
01:30:04,400 --> 01:30:08,000
this corpus of work um

2446
01:30:08,000 --> 01:30:12,320
dkg actually christian i think

2447
01:30:12,320 --> 01:30:13,760
yep i'm just holding placing the queue

2448
01:30:13,760 --> 01:30:15,360
for christian

2449
01:30:15,360 --> 01:30:18,400
thank thanks dan i mean dan did go in

2450
01:30:18,400 --> 01:30:20,000
the queue because i mean the tool will

2451
01:30:20,000 --> 01:30:22,719
not let me in the queue for some reason

2452
01:30:22,719 --> 01:30:25,520
uh let's have a strong voice for

2453
01:30:25,520 --> 01:30:26,880
simplification

2454
01:30:26,880 --> 01:30:29,520
um basically i don't see how i would

2455
01:30:29,520 --> 01:30:31,120
implement the current draft

2456
01:30:31,120 --> 01:30:35,280
until it is simplified so in my mind

2457
01:30:35,280 --> 01:30:38,400
version lego shipment first

2458
01:30:38,400 --> 01:30:40,239
this is a security feature and there is

2459
01:30:40,239 --> 01:30:41,840
no such thing as very complicated

2460
01:30:41,840 --> 01:30:44,320
security features

2461
01:30:44,320 --> 01:30:47,040
and and the other thing is i mean it was

2462
01:30:47,040 --> 01:30:48,320
to be simple i mean

2463
01:30:48,320 --> 01:30:51,360
the client is going to say hey i propose

2464
01:30:51,360 --> 01:30:51,920
this

2465
01:30:51,920 --> 01:30:55,120
i would also accept that that and that

2466
01:30:55,120 --> 01:30:58,000
and the cell might just pick one and if

2467
01:30:58,000 --> 01:30:59,840
it is more complicated than that then we

2468
01:30:59,840 --> 01:31:02,320
have lost

2469
01:31:02,320 --> 01:31:03,920
and i understand the fact that the

2470
01:31:03,920 --> 01:31:05,840
sermon i want to say oh

2471
01:31:05,840 --> 01:31:07,920
you did not tell me about version 42 but

2472
01:31:07,920 --> 01:31:09,920
i also support version 42 if you want to

2473
01:31:09,920 --> 01:31:11,280
use that next time

2474
01:31:11,280 --> 01:31:12,960
but that's something different that's

2475
01:31:12,960 --> 01:31:14,639
something that comes in a different kind

2476
01:31:14,639 --> 01:31:15,120
of

2477
01:31:15,120 --> 01:31:17,280
parameter it's not negotiation it's

2478
01:31:17,280 --> 01:31:19,440
information

2479
01:31:19,440 --> 01:31:21,920
uh absolutely yeah i did i kind of

2480
01:31:21,920 --> 01:31:23,600
shoved that in there because i could but

2481
01:31:23,600 --> 01:31:24,320
i

2482
01:31:24,320 --> 01:31:25,920
i agree with you that that could be

2483
01:31:25,920 --> 01:31:27,440
removed and

2484
01:31:27,440 --> 01:31:30,400
put as uh completely separate um draft

2485
01:31:30,400 --> 01:31:32,559
yeah

2486
01:31:33,280 --> 01:31:35,600
so i think there's thanks clear

2487
01:31:35,600 --> 01:31:37,440
consensus at least that there's a lot of

2488
01:31:37,440 --> 01:31:39,440
desire for a simpler thing and as david

2489
01:31:39,440 --> 01:31:40,560
said if you have

2490
01:31:40,560 --> 01:31:42,719
simpler ideas please propose them

2491
01:31:42,719 --> 01:31:44,159
because they will not arise

2492
01:31:44,159 --> 01:31:45,760
a simpler design will not arise from the

2493
01:31:45,760 --> 01:31:48,000
vacuum

2494
01:31:48,000 --> 01:31:50,239
yes and then i really want to insist on

2495
01:31:50,239 --> 01:31:51,760
that um

2496
01:31:51,760 --> 01:31:55,760
i like failed to come up with something

2497
01:31:55,760 --> 01:31:59,360
like much simpler and without dropping

2498
01:31:59,360 --> 01:32:00,159
features

2499
01:32:00,159 --> 01:32:02,560
and i totally understand but like pl

2500
01:32:02,560 --> 01:32:03,440
please come and let's have the

2501
01:32:03,440 --> 01:32:05,360
discussion on the list or on the issues

2502
01:32:05,360 --> 01:32:07,040
about which features you think aren't

2503
01:32:07,040 --> 01:32:08,000
useful

2504
01:32:08,000 --> 01:32:09,520
and we can you know remove to simplify

2505
01:32:09,520 --> 01:32:12,000
the design and which design proposals

2506
01:32:12,000 --> 01:32:13,840
you have that also make things simpler

2507
01:32:13,840 --> 01:32:17,280
uh would love more participation

2508
01:32:17,280 --> 01:32:20,639
all right thanks everyone for your time

2509
01:32:20,639 --> 01:32:27,840
thanks david martin duke please step up

2510
01:32:29,840 --> 01:32:33,040
today everybody um i'm here to talk

2511
01:32:33,040 --> 01:32:34,159
about cricobee today

2512
01:32:34,159 --> 01:32:38,960
and uh just to tldr here is that uh

2513
01:32:38,960 --> 01:32:41,199
you know we spent a long time thinking

2514
01:32:41,199 --> 01:32:42,880
about use cases

2515
01:32:42,880 --> 01:32:44,800
sort of brainstorming came up with lots

2516
01:32:44,800 --> 01:32:46,159
of different options of different pros

2517
01:32:46,159 --> 01:32:46,800
and cons

2518
01:32:46,800 --> 01:32:49,280
and that's kind of reaching uh the

2519
01:32:49,280 --> 01:32:50,080
limits of that

2520
01:32:50,080 --> 01:32:52,480
and um in some sense that means we're

2521
01:32:52,480 --> 01:32:54,000
ready for working class call but in

2522
01:32:54,000 --> 01:32:55,280
another sense there's some sort of high

2523
01:32:55,280 --> 01:32:56,639
level meta questions that we should

2524
01:32:56,639 --> 01:32:59,440
address next slide

2525
01:32:59,600 --> 01:33:00,800
so i'm going to spend a little time

2526
01:33:00,800 --> 01:33:04,000
today uh maybe

2527
01:33:04,320 --> 01:33:05,520
giving a little bit of a primer to

2528
01:33:05,520 --> 01:33:06,560
people who have not been paying

2529
01:33:06,560 --> 01:33:08,239
attention up to now

2530
01:33:08,239 --> 01:33:11,679
um so uh you know obviously quick is

2531
01:33:11,679 --> 01:33:12,960
very opaque to

2532
01:33:12,960 --> 01:33:14,960
middle boxes including middle boxes that

2533
01:33:14,960 --> 01:33:16,159
you

2534
01:33:16,159 --> 01:33:18,000
want to have help you like load

2535
01:33:18,000 --> 01:33:19,600
balancers um

2536
01:33:19,600 --> 01:33:22,080
and so there's there's a few uh there's

2537
01:33:22,080 --> 01:33:23,120
basically two

2538
01:33:23,120 --> 01:33:25,360
main things here one is how to encode

2539
01:33:25,360 --> 01:33:27,600
stuff in cids for the use of those

2540
01:33:27,600 --> 01:33:29,600
of those friendly middle boxes and the

2541
01:33:29,600 --> 01:33:31,040
other thing is how to encode stuff and

2542
01:33:31,040 --> 01:33:33,120
retry tokens if you have some sort of

2543
01:33:33,120 --> 01:33:35,679
um the quick equivalent of sim cookie

2544
01:33:35,679 --> 01:33:36,960
offload

2545
01:33:36,960 --> 01:33:39,920
um because uh you know obviously the

2546
01:33:39,920 --> 01:33:41,920
retry token the retries

2547
01:33:41,920 --> 01:33:44,480
packet design is resistant to just

2548
01:33:44,480 --> 01:33:46,320
injection retry packets um

2549
01:33:46,320 --> 01:33:48,239
and you just need to have stuff to allow

2550
01:33:48,239 --> 01:33:50,880
that validation to work correctly

2551
01:33:50,880 --> 01:33:53,360
next slide

2552
01:33:57,120 --> 01:33:59,120
okay so uh let me start with retry

2553
01:33:59,120 --> 01:34:00,320
services this is a little more

2554
01:34:00,320 --> 01:34:01,040
straightforward so

2555
01:34:01,040 --> 01:34:03,920
they're basically two modes here one is

2556
01:34:03,920 --> 01:34:05,920
that uh one is a non-shared state one

2557
01:34:05,920 --> 01:34:06,800
which is what it

2558
01:34:06,800 --> 01:34:08,719
implies that other than the fact that

2559
01:34:08,719 --> 01:34:10,639
the retry service exists the server

2560
01:34:10,639 --> 01:34:11,440
doesn't need to

2561
01:34:11,440 --> 01:34:13,440
know anything about how what's happening

2562
01:34:13,440 --> 01:34:16,159
there and the idea here is that um

2563
01:34:16,159 --> 01:34:18,080
servers will not generate retried

2564
01:34:18,080 --> 01:34:20,400
packets under any circumstances

2565
01:34:20,400 --> 01:34:23,360
um and and the service is fully

2566
01:34:23,360 --> 01:34:24,880
responsible for generating those

2567
01:34:24,880 --> 01:34:27,199
those packets and also authenticating

2568
01:34:27,199 --> 01:34:28,320
them on on the

2569
01:34:28,320 --> 01:34:31,600
uh on the ingress uh the shared state uh

2570
01:34:31,600 --> 01:34:34,560
is a has more flexibility in its in its

2571
01:34:34,560 --> 01:34:36,239
use model where um

2572
01:34:36,239 --> 01:34:38,320
in theory uh retry packs will be

2573
01:34:38,320 --> 01:34:40,080
generated by either the server

2574
01:34:40,080 --> 01:34:42,960
or the uh retry service and there's some

2575
01:34:42,960 --> 01:34:44,560
more shared state there we have this

2576
01:34:44,560 --> 01:34:47,679
you know uh distribute keys and so on

2577
01:34:47,679 --> 01:34:52,320
um since the last uh since ietf 109

2578
01:34:52,320 --> 01:34:54,239
um this has been pretty substantially

2579
01:34:54,239 --> 01:34:55,600
revised thanks to christian to improve

2580
01:34:55,600 --> 01:34:57,840
the security properties of that token

2581
01:34:57,840 --> 01:35:00,560
um the other the stuff in green there is

2582
01:35:00,560 --> 01:35:02,159
relatively newish the other thing is we

2583
01:35:02,159 --> 01:35:03,679
clarified a little bit the handling of

2584
01:35:03,679 --> 01:35:05,119
unsupported versions

2585
01:35:05,119 --> 01:35:07,040
the retry service decks used to say that

2586
01:35:07,040 --> 01:35:08,800
recharge services must admit

2587
01:35:08,800 --> 01:35:11,679
all unknown versions which um obviously

2588
01:35:11,679 --> 01:35:13,920
is good from extensibility perspective

2589
01:35:13,920 --> 01:35:14,639
um

2590
01:35:14,639 --> 01:35:16,639
not necessarily something would really

2591
01:35:16,639 --> 01:35:18,159
happen in the real world

2592
01:35:18,159 --> 01:35:19,520
so in an effort to be a little more

2593
01:35:19,520 --> 01:35:21,520
realistic um we've

2594
01:35:21,520 --> 01:35:23,600
we've suggested that servers should be

2595
01:35:23,600 --> 01:35:25,360
able to control the

2596
01:35:25,360 --> 01:35:27,600
allow or deny list of versions so if

2597
01:35:27,600 --> 01:35:29,679
they um are deploying say version two

2598
01:35:29,679 --> 01:35:31,199
and then retry service which might be in

2599
01:35:31,199 --> 01:35:32,639
hardware does not support version two

2600
01:35:32,639 --> 01:35:34,400
they could say no let in version two

2601
01:35:34,400 --> 01:35:37,280
but you can drop anything else uh which

2602
01:35:37,280 --> 01:35:38,400
hopefully is a little more

2603
01:35:38,400 --> 01:35:42,000
um economically realistic

2604
01:35:42,000 --> 01:35:44,560
next slide

2605
01:35:46,480 --> 01:35:48,480
okay cid encoding so this is kind of the

2606
01:35:48,480 --> 01:35:50,239
heart of the document um

2607
01:35:50,239 --> 01:35:51,520
there are a bunch of different things

2608
01:35:51,520 --> 01:35:53,520
here one is link software coding which

2609
01:35:53,520 --> 01:35:54,080
is

2610
01:35:54,080 --> 01:35:57,600
mainly meant to to assist um

2611
01:35:57,600 --> 01:36:00,000
hardware offload of crypto uh because

2612
01:36:00,000 --> 01:36:01,920
cid look up without knowing

2613
01:36:01,920 --> 01:36:04,080
the cid link is is kind of hard

2614
01:36:04,080 --> 01:36:05,440
according to the hardware people i

2615
01:36:05,440 --> 01:36:07,360
talked to

2616
01:36:07,360 --> 01:36:10,880
excuse me um there's some management of

2617
01:36:10,880 --> 01:36:12,080
key rotation and

2618
01:36:12,080 --> 01:36:14,239
config changes and there's a fairly

2619
01:36:14,239 --> 01:36:15,920
stable design for that where the first

2620
01:36:15,920 --> 01:36:17,920
two bits of the cid indicate

2621
01:36:17,920 --> 01:36:20,880
the corresponding configuration um and

2622
01:36:20,880 --> 01:36:21,440
so

2623
01:36:21,440 --> 01:36:22,960
uh you know when you're when you're

2624
01:36:22,960 --> 01:36:24,400
rolling when you're rolling out a new

2625
01:36:24,400 --> 01:36:25,280
config

2626
01:36:25,280 --> 01:36:27,040
the load balancer is for a while

2627
01:36:27,040 --> 01:36:29,119
speaking two configs and then obviously

2628
01:36:29,119 --> 01:36:31,360
the servers will be speaking one

2629
01:36:31,360 --> 01:36:34,639
one one of those two and the um

2630
01:36:34,639 --> 01:36:36,560
the load balancer is able to decode both

2631
01:36:36,560 --> 01:36:38,480
of them so there's kind of

2632
01:36:38,480 --> 01:36:40,800
six possibilities here uh we talked

2633
01:36:40,800 --> 01:36:42,239
about handling lots of use cases and

2634
01:36:42,239 --> 01:36:43,679
brainstorming and so on so there's six

2635
01:36:43,679 --> 01:36:45,840
possibilities there's three algorithms

2636
01:36:45,840 --> 01:36:48,800
uh one is one is just simply taking the

2637
01:36:48,800 --> 01:36:49,679
server id

2638
01:36:49,679 --> 01:36:51,600
and just putting that in some known

2639
01:36:51,600 --> 01:36:53,199
bytes in the

2640
01:36:53,199 --> 01:36:56,480
in the um connection id and then there

2641
01:36:56,480 --> 01:36:56,960
are two

2642
01:36:56,960 --> 01:36:58,400
encrypted versions that obviously

2643
01:36:58,400 --> 01:37:00,480
provide more privacy more privacy

2644
01:37:00,480 --> 01:37:02,800
more security of the server id mapping

2645
01:37:02,800 --> 01:37:04,480
and uh

2646
01:37:04,480 --> 01:37:06,159
many times before i've given a talk on

2647
01:37:06,159 --> 01:37:08,080
why it's maybe okay

2648
01:37:08,080 --> 01:37:10,960
to um not have perfect security here

2649
01:37:10,960 --> 01:37:12,080
because there's no such thing as perfect

2650
01:37:12,080 --> 01:37:13,360
security when it comes to sobriety

2651
01:37:13,360 --> 01:37:15,360
mapping i didn't repeat the slides

2652
01:37:15,360 --> 01:37:16,639
in the order of time but if we want to

2653
01:37:16,639 --> 01:37:19,199
talk about that we can but we've reached

2654
01:37:19,199 --> 01:37:22,480
fairly um certainly in the past we've

2655
01:37:22,480 --> 01:37:23,760
had a lot of discussions of these three

2656
01:37:23,760 --> 01:37:24,880
algorithms and i think there's been

2657
01:37:24,880 --> 01:37:26,719
general agreement that those are correct

2658
01:37:26,719 --> 01:37:30,000
what's new is um is the server id

2659
01:37:30,000 --> 01:37:32,320
allocation mechanism so up to now

2660
01:37:32,320 --> 01:37:35,600
up to ietf 109 um you would manually

2661
01:37:35,600 --> 01:37:37,679
configure a mapping of server id to

2662
01:37:37,679 --> 01:37:38,560
server

2663
01:37:38,560 --> 01:37:40,639
uh and obviously all the servers would

2664
01:37:40,639 --> 01:37:42,159
have to be issued their bespoke server

2665
01:37:42,159 --> 01:37:43,840
ids now that is that is somewhat

2666
01:37:43,840 --> 01:37:44,960
laborious

2667
01:37:44,960 --> 01:37:47,040
and ian sweat proposed a different way

2668
01:37:47,040 --> 01:37:48,320
of doing this which

2669
01:37:48,320 --> 01:37:51,440
um which i call dynamic allocation where

2670
01:37:51,440 --> 01:37:53,199
essentially

2671
01:37:53,199 --> 01:37:56,159
new packets come in from clients with

2672
01:37:56,159 --> 01:37:57,840
client generated cids

2673
01:37:57,840 --> 01:37:59,360
and the loot balancer does whatever it

2674
01:37:59,360 --> 01:38:01,760
wants to get that to a server

2675
01:38:01,760 --> 01:38:03,920
and then both the load balancer and the

2676
01:38:03,920 --> 01:38:05,840
server infer a server id

2677
01:38:05,840 --> 01:38:07,199
from that packet and we'll talk about

2678
01:38:07,199 --> 01:38:09,360
this more with another slide and then

2679
01:38:09,360 --> 01:38:11,360
for for some time after that becomes an

2680
01:38:11,360 --> 01:38:13,760
allocated server id for that server

2681
01:38:13,760 --> 01:38:15,360
so the idea is that you do not configure

2682
01:38:15,360 --> 01:38:16,880
server ids

2683
01:38:16,880 --> 01:38:18,960
um a priori you just kind of learn them

2684
01:38:18,960 --> 01:38:20,719
over the course of operation

2685
01:38:20,719 --> 01:38:23,199
and that has some drawbacks and some

2686
01:38:23,199 --> 01:38:26,719
some advantages to it next slide

2687
01:38:26,880 --> 01:38:28,639
and so that mechanism could be used with

2688
01:38:28,639 --> 01:38:30,239
either with any of the algorithms

2689
01:38:30,239 --> 01:38:32,480
give you kind of six permutations of cid

2690
01:38:32,480 --> 01:38:33,520
encoding

2691
01:38:33,520 --> 01:38:35,840
okay so this is the uh this is maybe

2692
01:38:35,840 --> 01:38:37,840
talking to the server id case more so we

2693
01:38:37,840 --> 01:38:40,239
have a situation here where the

2694
01:38:40,239 --> 01:38:43,440
uh load balancer starts with

2695
01:38:43,440 --> 01:38:44,880
knowing that there are two servers out

2696
01:38:44,880 --> 01:38:47,440
there but has no server ids in its table

2697
01:38:47,440 --> 01:38:49,760
similarly the um the servers have no

2698
01:38:49,760 --> 01:38:51,520
server ids in their list of

2699
01:38:51,520 --> 01:38:56,480
of authorized server ids uh next slide

2700
01:38:56,480 --> 01:38:58,080
so the reason not to do this of course

2701
01:38:58,080 --> 01:38:59,840
is that static config is the reason to

2702
01:38:59,840 --> 01:39:01,199
do this is that static config of

2703
01:39:01,199 --> 01:39:02,639
individual server is can be sort of a

2704
01:39:02,639 --> 01:39:03,360
pain

2705
01:39:03,360 --> 01:39:04,960
but um this does create a little more

2706
01:39:04,960 --> 01:39:06,560
state as you'll see and it has an

2707
01:39:06,560 --> 01:39:08,080
unfortunate corner case which is not

2708
01:39:08,080 --> 01:39:09,440
catastrophic but i'll

2709
01:39:09,440 --> 01:39:10,960
i'll show it here in a minute so let's

2710
01:39:10,960 --> 01:39:12,560
say that we have a

2711
01:39:12,560 --> 01:39:14,719
a packet that comes in and again so

2712
01:39:14,719 --> 01:39:16,320
everyone's on config zero

2713
01:39:16,320 --> 01:39:18,880
uh of you know of since they're a bunch

2714
01:39:18,880 --> 01:39:19,360
of code

2715
01:39:19,360 --> 01:39:21,520
they're two bits to configure these

2716
01:39:21,520 --> 01:39:23,520
these configuration code points so

2717
01:39:23,520 --> 01:39:25,440
a packet comes in with config zero and

2718
01:39:25,440 --> 01:39:27,119
it's and it like if you decode it it

2719
01:39:27,119 --> 01:39:28,480
comes out with the server id

2720
01:39:28,480 --> 01:39:30,400
and so the next slide and so the load

2721
01:39:30,400 --> 01:39:31,600
balancer will just sort of make an

2722
01:39:31,600 --> 01:39:33,760
arbitrary routing decision with this one

2723
01:39:33,760 --> 01:39:37,199
and send it to abcd so now um

2724
01:39:37,199 --> 01:39:39,679
both the load balancer and the server by

2725
01:39:39,679 --> 01:39:41,040
extracting the server id

2726
01:39:41,040 --> 01:39:44,800
will recognize that 3fa1 is now

2727
01:39:44,800 --> 01:39:48,960
allocated to abcd next slide

2728
01:39:49,760 --> 01:39:53,040
so then some other time another

2729
01:39:53,040 --> 01:39:55,119
another initial packet comes in and has

2730
01:39:55,119 --> 01:39:56,639
it in has a

2731
01:39:56,639 --> 01:39:57,760
and when you need to code it the server

2732
01:39:57,760 --> 01:39:59,840
id conduct to be 2b0

2733
01:39:59,840 --> 01:40:01,840
and again there's an arbitrary choice

2734
01:40:01,840 --> 01:40:03,600
and it goes to abcd so now there are now

2735
01:40:03,600 --> 01:40:04,800
two entries

2736
01:40:04,800 --> 01:40:07,360
in the table and abcd you can use either

2737
01:40:07,360 --> 01:40:08,639
server id to generate

2738
01:40:08,639 --> 01:40:12,639
its own connection ids next slide

2739
01:40:14,159 --> 01:40:18,560
okay so one problem we run into is if it

2740
01:40:18,560 --> 01:40:21,199
is if we get since the the client

2741
01:40:21,199 --> 01:40:22,239
connection ids

2742
01:40:22,239 --> 01:40:24,080
the client generated destination

2743
01:40:24,080 --> 01:40:25,679
connection ids are

2744
01:40:25,679 --> 01:40:28,000
essentially random uh it could

2745
01:40:28,000 --> 01:40:30,159
correspond to config code point

2746
01:40:30,159 --> 01:40:32,320
that um that is that doesn't exist in

2747
01:40:32,320 --> 01:40:33,920
the actual infrastructure

2748
01:40:33,920 --> 01:40:37,920
and um i thought a lot about cute ways

2749
01:40:37,920 --> 01:40:38,480
to do this

2750
01:40:38,480 --> 01:40:39,600
and and i don't think there's a way to

2751
01:40:39,600 --> 01:40:43,600
resolve the ambiguities here next slide

2752
01:40:43,600 --> 01:40:45,040
so what's going to happen is this going

2753
01:40:45,040 --> 01:40:46,800
if this is going to be rounded say this

2754
01:40:46,800 --> 01:40:48,719
will be routed to efgh

2755
01:40:48,719 --> 01:40:50,560
and there's no way to extract a server

2756
01:40:50,560 --> 01:40:52,400
id for this one

2757
01:40:52,400 --> 01:40:55,760
so um really all one of those four

2758
01:40:55,760 --> 01:40:57,199
config rotation code points

2759
01:40:57,199 --> 01:41:00,000
is is is reserved for for temple routing

2760
01:41:00,000 --> 01:41:01,280
just in case everything sort of falls

2761
01:41:01,280 --> 01:41:02,639
apart there's just something you can do

2762
01:41:02,639 --> 01:41:03,280
there

2763
01:41:03,280 --> 01:41:06,639
so um really in this case efgh because

2764
01:41:06,639 --> 01:41:08,400
we just started up we have no allocated

2765
01:41:08,400 --> 01:41:10,239
server ids there's really no way to

2766
01:41:10,239 --> 01:41:11,760
proceed except to

2767
01:41:11,760 --> 01:41:14,639
uh use the configure id config the

2768
01:41:14,639 --> 01:41:16,320
connection id that tells the load

2769
01:41:16,320 --> 01:41:17,199
balancer

2770
01:41:17,199 --> 01:41:19,679
to just to use to use for couple routing

2771
01:41:19,679 --> 01:41:20,719
for that one so

2772
01:41:20,719 --> 01:41:23,119
this is a fairly transient state once uh

2773
01:41:23,119 --> 01:41:26,000
something comes in next slide

2774
01:41:26,000 --> 01:41:27,920
when something comes in with config 0

2775
01:41:27,920 --> 01:41:30,840
that happens to get routed efgh next

2776
01:41:30,840 --> 01:41:33,119
slide

2777
01:41:33,119 --> 01:41:34,880
then then there will be something in the

2778
01:41:34,880 --> 01:41:36,560
table and then the circle will be able

2779
01:41:36,560 --> 01:41:37,040
to

2780
01:41:37,040 --> 01:41:40,560
um replace all its cids so

2781
01:41:40,560 --> 01:41:43,520
given like a decent amount of volume

2782
01:41:43,520 --> 01:41:45,440
once you have you know on the order of

2783
01:41:45,440 --> 01:41:48,480
four initial packets come in uh after

2784
01:41:48,480 --> 01:41:50,800
you know restart or whatever a server

2785
01:41:50,800 --> 01:41:52,480
should have a server id allocation it

2786
01:41:52,480 --> 01:41:53,199
can use

2787
01:41:53,199 --> 01:41:54,960
so this is probably not a real practical

2788
01:41:54,960 --> 01:41:56,560
issue but there is a weird corner case

2789
01:41:56,560 --> 01:41:57,440
here

2790
01:41:57,440 --> 01:41:59,679
so you'll note the the state issue that

2791
01:41:59,679 --> 01:42:00,560
instead of having

2792
01:42:00,560 --> 01:42:02,400
approximately order of the number of

2793
01:42:02,400 --> 01:42:04,719
servers entries in the server id mapping

2794
01:42:04,719 --> 01:42:06,800
the load balancer has

2795
01:42:06,800 --> 01:42:09,760
uh over time essentially you know two to

2796
01:42:09,760 --> 01:42:11,920
the number of bits in the server id

2797
01:42:11,920 --> 01:42:15,040
uh that's storing in a table now um ian

2798
01:42:15,040 --> 01:42:16,560
says that google does something like

2799
01:42:16,560 --> 01:42:18,560
this in their current deployment

2800
01:42:18,560 --> 01:42:19,920
and uh that the state there is

2801
01:42:19,920 --> 01:42:22,000
manageable um so there's some

2802
01:42:22,000 --> 01:42:23,760
implementation experience that indicates

2803
01:42:23,760 --> 01:42:24,480
that this is

2804
01:42:24,480 --> 01:42:29,839
this is a manageable load next slide

2805
01:42:33,040 --> 01:42:36,320
so um that has so

2806
01:42:36,320 --> 01:42:39,360
the the dynamic um the dynamic

2807
01:42:39,360 --> 01:42:41,119
allocation method is currently in the

2808
01:42:41,119 --> 01:42:42,560
editor's draft

2809
01:42:42,560 --> 01:42:44,400
um which i thought was easier to talk

2810
01:42:44,400 --> 01:42:45,840
about that way but um

2811
01:42:45,840 --> 01:42:47,040
you know i think that's something we

2812
01:42:47,040 --> 01:42:49,119
should still open for discussion we can

2813
01:42:49,119 --> 01:42:50,719
talk about if that's

2814
01:42:50,719 --> 01:42:53,119
um something we're supporting if we want

2815
01:42:53,119 --> 01:42:54,560
to support both methods we want to just

2816
01:42:54,560 --> 01:42:56,719
go to dynamics nobody likes static

2817
01:42:56,719 --> 01:43:00,080
uh something to discuss um the other

2818
01:43:00,080 --> 01:43:00,880
open issue

2819
01:43:00,880 --> 01:43:02,639
uh that needed some discussion was

2820
01:43:02,639 --> 01:43:04,719
another one of ian's suggestions and uh

2821
01:43:04,719 --> 01:43:06,560
today server id length is

2822
01:43:06,560 --> 01:43:09,360
this is arguably a bike shed but um

2823
01:43:09,360 --> 01:43:10,719
server id links are currently expressed

2824
01:43:10,719 --> 01:43:11,920
in octets

2825
01:43:11,920 --> 01:43:13,840
uh we could express it number of bits

2826
01:43:13,840 --> 01:43:15,360
which would allow you know

2827
01:43:15,360 --> 01:43:18,239
bytes to be some bytes to be dedicated

2828
01:43:18,239 --> 01:43:19,760
to server id and so

2829
01:43:19,760 --> 01:43:23,119
not um there are certainly cases where

2830
01:43:23,119 --> 01:43:24,159
you only need a certain amount of

2831
01:43:24,159 --> 01:43:25,760
entropy and server id and you might kind

2832
01:43:25,760 --> 01:43:27,760
of bite off the cid length which is

2833
01:43:27,760 --> 01:43:29,360
kind of nice but it's yet more

2834
01:43:29,360 --> 01:43:31,760
complexity um

2835
01:43:31,760 --> 01:43:33,600
you know big boundaries versus by

2836
01:43:33,600 --> 01:43:36,080
boundaries

2837
01:43:36,800 --> 01:43:38,159
having tried to implement some of the

2838
01:43:38,159 --> 01:43:39,440
stuff it seems like that would be the

2839
01:43:39,440 --> 01:43:40,960
pain that's around but if people really

2840
01:43:40,960 --> 01:43:41,600
like this

2841
01:43:41,600 --> 01:43:45,199
we can do it next slide

2842
01:43:47,119 --> 01:43:49,040
all right so i would like to stop here

2843
01:43:49,040 --> 01:43:50,320
and and um

2844
01:43:50,320 --> 01:43:51,600
just take some discussion on these

2845
01:43:51,600 --> 01:43:53,119
points the other thing i'll add is a

2846
01:43:53,119 --> 01:43:53,920
i've actually

2847
01:43:53,920 --> 01:43:55,920
attempted to implement both static and

2848
01:43:55,920 --> 01:43:57,119
dynamic

2849
01:43:57,119 --> 01:43:59,520
um and well static's been around for a

2850
01:43:59,520 --> 01:44:00,960
while i know how to do that

2851
01:44:00,960 --> 01:44:02,880
uh the dynamic one does add some

2852
01:44:02,880 --> 01:44:05,280
complexity because to preserve

2853
01:44:05,280 --> 01:44:07,840
the ability of new servers to get server

2854
01:44:07,840 --> 01:44:09,440
ids

2855
01:44:09,440 --> 01:44:11,199
what what i've added to the design from

2856
01:44:11,199 --> 01:44:13,119
what ian initially submitted was some

2857
01:44:13,119 --> 01:44:14,719
sort of timeout where eventually if the

2858
01:44:14,719 --> 01:44:15,520
server

2859
01:44:15,520 --> 01:44:17,520
has a server id has not been used for a

2860
01:44:17,520 --> 01:44:19,520
while kind of goes back into the pool

2861
01:44:19,520 --> 01:44:22,320
for reallocation and that raises some

2862
01:44:22,320 --> 01:44:23,920
complexity where like you really have to

2863
01:44:23,920 --> 01:44:25,600
look at packets and

2864
01:44:25,600 --> 01:44:26,880
once you've already sort of made a load

2865
01:44:26,880 --> 01:44:28,320
balancing decision you have to look at

2866
01:44:28,320 --> 01:44:29,520
packets and see if like

2867
01:44:29,520 --> 01:44:31,280
the survivor's been used and update the

2868
01:44:31,280 --> 01:44:33,440
the time you last saw it and so on

2869
01:44:33,440 --> 01:44:35,600
and um the implementation i did was

2870
01:44:35,600 --> 01:44:38,000
based on nginx where once you do the

2871
01:44:38,000 --> 01:44:39,840
allocation like it remembers the fourth

2872
01:44:39,840 --> 01:44:41,040
tuple and so

2873
01:44:41,040 --> 01:44:42,320
you're having to wake up for every

2874
01:44:42,320 --> 01:44:44,639
packet instead of um really only when

2875
01:44:44,639 --> 01:44:46,159
the four couple changes

2876
01:44:46,159 --> 01:44:48,880
which is a bit of a bummer um but not

2877
01:44:48,880 --> 01:44:50,159
insurmountable

2878
01:44:50,159 --> 01:44:53,040
so uh is there anyone in the queue that

2879
01:44:53,040 --> 01:44:56,000
has comments at any of this

2880
01:44:56,000 --> 01:44:58,560
i guess not

2881
01:45:01,119 --> 01:45:04,880
if your ray's hand button is broken

2882
01:45:08,400 --> 01:45:11,280
i'm sorry lucas

2883
01:45:12,159 --> 01:45:17,520
ignore me just carry on uh

2884
01:45:17,520 --> 01:45:21,440
so i i

2885
01:45:21,440 --> 01:45:23,360
i worry that there are too many options

2886
01:45:23,360 --> 01:45:24,960
here uh i wonder

2887
01:45:24,960 --> 01:45:28,159
if it would be wiser to

2888
01:45:28,159 --> 01:45:31,280
pick one that we really think is the

2889
01:45:31,280 --> 01:45:35,040
the safest option and in each of our

2890
01:45:35,040 --> 01:45:36,560
different categories here and

2891
01:45:36,560 --> 01:45:38,239
and recommend those get some

2892
01:45:38,239 --> 01:45:40,000
implementation experience

2893
01:45:40,000 --> 01:45:42,880
and see if the other ones are really

2894
01:45:42,880 --> 01:45:45,119
needed or see if the problems that arise

2895
01:45:45,119 --> 01:45:46,880
are the ones that we expect maybe maybe

2896
01:45:46,880 --> 01:45:47,520
there'll be

2897
01:45:47,520 --> 01:45:50,320
unexpected problems in steps yeah lucas

2898
01:45:50,320 --> 01:45:51,600
can you go to the next slide

2899
01:45:51,600 --> 01:45:53,119
um you're kind of just leaning right

2900
01:45:53,119 --> 01:45:58,080
into the next thing i wanted to discuss

2901
01:45:58,080 --> 01:46:02,000
so this is um so as i said these drafts

2902
01:46:02,000 --> 01:46:03,360
have really gotten to the point where

2903
01:46:03,360 --> 01:46:05,040
we've reached the limits of just sort of

2904
01:46:05,040 --> 01:46:06,320
brainstorming about

2905
01:46:06,320 --> 01:46:09,360
use cases and different requirements um

2906
01:46:09,360 --> 01:46:12,560
and really to me the real obstacle now

2907
01:46:12,560 --> 01:46:13,840
is implementation

2908
01:46:13,840 --> 01:46:15,199
and and i would hope that that would

2909
01:46:15,199 --> 01:46:16,880
provide some insight into what

2910
01:46:16,880 --> 01:46:18,480
ben is saying is that like what do we

2911
01:46:18,480 --> 01:46:20,320
really need here so

2912
01:46:20,320 --> 01:46:23,119
these are the known implementations um

2913
01:46:23,119 --> 01:46:24,880
two of them are mine one is just a

2914
01:46:24,880 --> 01:46:26,000
library to allow you

2915
01:46:26,000 --> 01:46:29,600
to like encode and decode uh server ids

2916
01:46:29,600 --> 01:46:33,280
and i just lost the slides um

2917
01:46:33,280 --> 01:46:35,440
another one is again an nginx based

2918
01:46:35,440 --> 01:46:37,280
implementation of the load balancer

2919
01:46:37,280 --> 01:46:40,960
slash retry server side of this and um

2920
01:46:40,960 --> 01:46:42,639
i did a bunch of work on this last week

2921
01:46:42,639 --> 01:46:43,920
so the slide is a little outdated the

2922
01:46:43,920 --> 01:46:45,600
only thing that is missing that is that

2923
01:46:45,600 --> 01:46:47,199
is currently in the draft

2924
01:46:47,199 --> 01:46:50,159
is the shared state retry service um

2925
01:46:50,159 --> 01:46:52,080
which i was going to try to tackle after

2926
01:46:52,080 --> 01:46:55,760
110. um also alipay did some work on

2927
01:46:55,760 --> 01:46:56,159
this

2928
01:46:56,159 --> 01:46:59,280
uh it's a little obsolete um

2929
01:46:59,280 --> 01:47:01,040
what has the plaintext load balancer

2930
01:47:01,040 --> 01:47:02,960
which is fine and then it has an

2931
01:47:02,960 --> 01:47:04,239
obsolete version of the shirts that

2932
01:47:04,239 --> 01:47:05,920
retry service that's the only real

2933
01:47:05,920 --> 01:47:07,679
interest i've had in people putting this

2934
01:47:07,679 --> 01:47:09,280
to code

2935
01:47:09,280 --> 01:47:12,719
um i focus on the load balancer because

2936
01:47:12,719 --> 01:47:14,159
you know load balancer community is not

2937
01:47:14,159 --> 01:47:16,480
really here and the server community is

2938
01:47:16,480 --> 01:47:18,320
so what we could really really use is

2939
01:47:18,320 --> 01:47:20,400
somebody with a server that supports

2940
01:47:20,400 --> 01:47:21,199
mobility

2941
01:47:21,199 --> 01:47:23,119
to implement the server side of this and

2942
01:47:23,119 --> 01:47:24,239
do some interop

2943
01:47:24,239 --> 01:47:25,920
and if there was a lot of this it might

2944
01:47:25,920 --> 01:47:27,280
make clear what people actually care

2945
01:47:27,280 --> 01:47:28,159
about and what

2946
01:47:28,159 --> 01:47:31,520
is not a useful use case um and i would

2947
01:47:31,520 --> 01:47:32,320
really

2948
01:47:32,320 --> 01:47:33,600
that's really kind of where we're at

2949
01:47:33,600 --> 01:47:34,960
where i don't know that we can make a

2950
01:47:34,960 --> 01:47:36,480
lot more progress

2951
01:47:36,480 --> 01:47:38,480
on this document without this and i

2952
01:47:38,480 --> 01:47:40,320
stand ready to to interrupt

2953
01:47:40,320 --> 01:47:44,639
with people that want to test this out

2954
01:47:44,639 --> 01:47:48,159
thanks i also want to

2955
01:47:48,159 --> 01:47:51,760
highlight that i have some privacy

2956
01:47:51,760 --> 01:47:53,520
concerns here

2957
01:47:53,520 --> 01:47:56,800
i think that some of these some of these

2958
01:47:56,800 --> 01:47:58,320
approaches have excellent privacy

2959
01:47:58,320 --> 01:47:59,119
properties

2960
01:47:59,119 --> 01:48:00,719
and some of them have really poor

2961
01:48:00,719 --> 01:48:02,480
privacy properties that essentially

2962
01:48:02,480 --> 01:48:02,960
break

2963
01:48:02,960 --> 01:48:05,679
guarantees that quick has previously

2964
01:48:05,679 --> 01:48:07,040
made

2965
01:48:07,040 --> 01:48:09,040
i think that we should be very cautious

2966
01:48:09,040 --> 01:48:10,239
about

2967
01:48:10,239 --> 01:48:12,719
making recommendations in standards

2968
01:48:12,719 --> 01:48:13,360
track

2969
01:48:13,360 --> 01:48:17,119
documents that violate the

2970
01:48:17,119 --> 01:48:19,119
security and privacy properties that

2971
01:48:19,119 --> 01:48:20,960
we've promised in other standards track

2972
01:48:20,960 --> 01:48:21,840
documents

2973
01:48:21,840 --> 01:48:24,239
especially because the load balancer and

2974
01:48:24,239 --> 01:48:25,520
server are

2975
01:48:25,520 --> 01:48:28,159
usually relatively closely coordinating

2976
01:48:28,159 --> 01:48:29,119
entities

2977
01:48:29,119 --> 01:48:31,760
and so they require less standards

2978
01:48:31,760 --> 01:48:33,520
guidance if they really want to go off

2979
01:48:33,520 --> 01:48:35,040
and do something

2980
01:48:35,040 --> 01:48:38,159
on their own i think that in general we

2981
01:48:38,159 --> 01:48:39,199
should

2982
01:48:39,199 --> 01:48:42,560
try to stick to the safest options and

2983
01:48:42,560 --> 01:48:44,639
if people want to do something unsafe

2984
01:48:44,639 --> 01:48:47,679
they can probably manage it on their own

2985
01:48:47,679 --> 01:48:49,199
are you referring specifically to the

2986
01:48:49,199 --> 01:48:51,520
plain text uh cid algorithm are there

2987
01:48:51,520 --> 01:48:53,360
other ones that you have concerns about

2988
01:48:53,360 --> 01:48:54,880
the the plain text algorithm is

2989
01:48:54,880 --> 01:48:56,400
definitely the thing i'm most

2990
01:48:56,400 --> 01:48:58,719
concerned about on that front but i also

2991
01:48:58,719 --> 01:48:59,679
would like to see

2992
01:48:59,679 --> 01:49:02,800
some thought put here into

2993
01:49:02,800 --> 01:49:06,080
how this interacts with ech

2994
01:49:06,080 --> 01:49:09,600
uh there's it seems to me that

2995
01:49:09,600 --> 01:49:11,360
that there is a a non-trivial

2996
01:49:11,360 --> 01:49:14,480
interaction between quick ld and

2997
01:49:14,480 --> 01:49:17,679
and ech in general for an ech

2998
01:49:17,679 --> 01:49:21,280
quick implementation um with

2999
01:49:21,280 --> 01:49:23,040
the split mode architecture it seems

3000
01:49:23,040 --> 01:49:24,960
like ech processing

3001
01:49:24,960 --> 01:49:26,880
is something that has to be somewhat

3002
01:49:26,880 --> 01:49:28,800
coupled to

3003
01:49:28,800 --> 01:49:32,159
the quick lb handling and it seems like

3004
01:49:32,159 --> 01:49:33,040
it would be

3005
01:49:33,040 --> 01:49:36,159
relatively easy to break the guarantees

3006
01:49:36,159 --> 01:49:37,520
of ech

3007
01:49:37,520 --> 01:49:42,560
in the process of implementing quick lb

3008
01:49:42,560 --> 01:49:45,360
hmm i i would be uh really i i i'm not

3009
01:49:45,360 --> 01:49:46,480
gonna be able to reason about that in

3010
01:49:46,480 --> 01:49:47,679
real time but i would

3011
01:49:47,679 --> 01:49:49,599
welcome a discussion i feel like hover

3012
01:49:49,599 --> 01:49:51,520
the list of that to try to explore that

3013
01:49:51,520 --> 01:49:52,960
a little further because i certainly

3014
01:49:52,960 --> 01:49:56,400
would not want to break ech um

3015
01:49:56,400 --> 01:49:58,320
uh speaking about the plain text thing i

3016
01:49:58,320 --> 01:49:59,920
mean i think that's a reasonable

3017
01:49:59,920 --> 01:50:03,199
uh concern that's been um

3018
01:50:03,199 --> 01:50:05,440
kind of floating around from the

3019
01:50:05,440 --> 01:50:06,480
beginning because

3020
01:50:06,480 --> 01:50:08,159
this design has existed for the

3021
01:50:08,159 --> 01:50:10,239
beginning um

3022
01:50:10,239 --> 01:50:11,599
i think there's been a lot of interest

3023
01:50:11,599 --> 01:50:13,440
in supporting it from you know the quick

3024
01:50:13,440 --> 01:50:14,800
community which is generally very

3025
01:50:14,800 --> 01:50:16,880
sensitive to these privacy issues

3026
01:50:16,880 --> 01:50:19,440
and uh one of the things one of the

3027
01:50:19,440 --> 01:50:20,639
things is that

3028
01:50:20,639 --> 01:50:22,719
uh depending on exactly what the

3029
01:50:22,719 --> 01:50:24,639
statistics are of how many clients are

3030
01:50:24,639 --> 01:50:26,400
and how many servers there are

3031
01:50:26,400 --> 01:50:28,159
it is not there's no way to guarantee

3032
01:50:28,159 --> 01:50:29,840
that the server mapping does not become

3033
01:50:29,840 --> 01:50:31,760
evident and so people have tended to

3034
01:50:31,760 --> 01:50:34,320
view this as a more of a continuum of

3035
01:50:34,320 --> 01:50:36,159
privacy rather than a

3036
01:50:36,159 --> 01:50:39,280
a like private not private um uh

3037
01:50:39,280 --> 01:50:43,840
you know uh duality so um

3038
01:50:43,840 --> 01:50:45,520
uh nevertheless that's a good comment

3039
01:50:45,520 --> 01:50:47,119
and i think it's absolutely worth

3040
01:50:47,119 --> 01:50:48,800
discussing if we still have consensus

3041
01:50:48,800 --> 01:50:50,400
that the plaintext cid algorithm should

3042
01:50:50,400 --> 01:50:53,839
be in there

3043
01:50:55,760 --> 01:50:58,400
other comments

3044
01:51:01,360 --> 01:51:03,920
okay so i i i just again i'd like to

3045
01:51:03,920 --> 01:51:05,360
sort of say that i think this document

3046
01:51:05,360 --> 01:51:05,760
is stuck

3047
01:51:05,760 --> 01:51:07,920
until until we get some maybe some more

3048
01:51:07,920 --> 01:51:08,960
reviews and

3049
01:51:08,960 --> 01:51:10,080
and particularly some more

3050
01:51:10,080 --> 01:51:12,719
implementations to go forward i i don't

3051
01:51:12,719 --> 01:51:13,199
feel

3052
01:51:13,199 --> 01:51:14,480
really comfortable going to the last

3053
01:51:14,480 --> 01:51:15,440
call and then with the current

3054
01:51:15,440 --> 01:51:17,199
implementation state of this document

3055
01:51:17,199 --> 01:51:21,839
so thanks

3056
01:51:33,040 --> 01:51:36,239
uh thanks martin um i think that

3057
01:51:36,239 --> 01:51:39,440
brings us to the end of uh main agenda

3058
01:51:39,440 --> 01:51:41,520
items with

3059
01:51:41,520 --> 01:51:44,080
um about nine minutes to go until the

3060
01:51:44,080 --> 01:51:44,960
end of the session

3061
01:51:44,960 --> 01:51:47,440
we we have some wrap up we need to do um

3062
01:51:47,440 --> 01:51:48,080
i don't know

3063
01:51:48,080 --> 01:51:51,360
if there's any time to

3064
01:51:51,360 --> 01:51:54,560
talk about either of these documents

3065
01:51:54,560 --> 01:51:58,000
what what what laura suggested and what

3066
01:51:58,000 --> 01:52:00,800
i think is worth doing what what for

3067
01:52:00,800 --> 01:52:02,239
people that are familiar with these

3068
01:52:02,239 --> 01:52:04,000
documents this is the

3069
01:52:04,000 --> 01:52:07,679
uh quick bit greasing and both the

3070
01:52:07,679 --> 01:52:08,480
delayed act

3071
01:52:08,480 --> 01:52:11,280
we're going to run two polls to say

3072
01:52:11,280 --> 01:52:12,560
we're not going to officially say

3073
01:52:12,560 --> 01:52:13,280
whether you want

3074
01:52:13,280 --> 01:52:16,560
we want to adopt these

3075
01:52:16,560 --> 01:52:18,639
so given given that we we can't actually

3076
01:52:18,639 --> 01:52:19,920
formally adopt anything

3077
01:52:19,920 --> 01:52:21,520
at the moment anyway because we are not

3078
01:52:21,520 --> 01:52:23,679
recharged yet i think i think wasting

3079
01:52:23,679 --> 01:52:25,119
time on running the polls doesn't make

3080
01:52:25,119 --> 01:52:26,159
sense i think we should

3081
01:52:26,159 --> 01:52:27,679
just tell people that you know these

3082
01:52:27,679 --> 01:52:30,000
documents to many that have expressed

3083
01:52:30,000 --> 01:52:31,360
an opinion in the past seem like

3084
01:52:31,360 --> 01:52:33,199
no-brainers for adoption

3085
01:52:33,199 --> 01:52:35,119
uh they're both sort of reasonably

3086
01:52:35,119 --> 01:52:36,800
widely implemented already

3087
01:52:36,800 --> 01:52:37,920
and they have seen quite a bit of

3088
01:52:37,920 --> 01:52:39,920
discussion so we we plan to hold it up

3089
01:52:39,920 --> 01:52:41,920
adoption calls for those

3090
01:52:41,920 --> 01:52:44,560
in the near future after each other and

3091
01:52:44,560 --> 01:52:46,239
so you can prepare yourselves for that

3092
01:52:46,239 --> 01:52:48,560
call by already giving them a read

3093
01:52:48,560 --> 01:52:51,840
um and i would sort of unless uh

3094
01:52:51,840 --> 01:52:53,920
martin or jonah want to quickly talk

3095
01:52:53,920 --> 01:52:56,159
about each of their documents

3096
01:52:56,159 --> 01:52:57,520
i would maybe go to the planning and

3097
01:52:57,520 --> 01:53:01,199
wrap up uh now already

3098
01:53:02,000 --> 01:53:04,480
or mike makes a good point in in java so

3099
01:53:04,480 --> 01:53:05,440
if people

3100
01:53:05,440 --> 01:53:07,360
disagree that either of these documents

3101
01:53:07,360 --> 01:53:08,880
are sort of ready for adoption

3102
01:53:08,880 --> 01:53:11,040
now it would be a good time to raise

3103
01:53:11,040 --> 01:53:14,719
those objections or concerns

3104
01:53:15,520 --> 01:53:17,119
i'm just popping up here for no good

3105
01:53:17,119 --> 01:53:18,880
reason except to

3106
01:53:18,880 --> 01:53:26,239
respond to questions

3107
01:53:26,239 --> 01:53:27,199
christine we're not talking about the

3108
01:53:27,199 --> 01:53:29,199
time stamp draft christian says what

3109
01:53:29,199 --> 01:53:30,320
about the timestamp draft

3110
01:53:30,320 --> 01:53:32,400
um because you want to talk about how

3111
01:53:32,400 --> 01:53:34,400
widely implemented it is i

3112
01:53:34,400 --> 01:53:35,760
think it's in a different class than the

3113
01:53:35,760 --> 01:53:37,840
other two

3114
01:53:37,840 --> 01:53:40,159
yeah it's it's less implemented there

3115
01:53:40,159 --> 01:53:42,000
are fewer implementations than for the

3116
01:53:42,000 --> 01:53:44,239
other two that's clear

3117
01:53:44,239 --> 01:53:46,239
on the other hand i mean it's it's quite

3118
01:53:46,239 --> 01:53:47,760
useful

3119
01:53:47,760 --> 01:53:51,199
and it's very simple i know of at least

3120
01:53:51,199 --> 01:53:53,280
two implementations

3121
01:53:53,280 --> 01:53:56,719
so it'd be nice that we had

3122
01:53:56,719 --> 01:53:58,719
some visibility of that some higher

3123
01:53:58,719 --> 01:54:02,400
visibility of that in the working group

3124
01:54:04,320 --> 01:54:06,719
fair point um let's then put that on the

3125
01:54:06,719 --> 01:54:08,000
agenda either for an interim

3126
01:54:08,000 --> 01:54:12,080
or for 111

3127
01:54:12,080 --> 01:54:14,480
but these two particularly looked looked

3128
01:54:14,480 --> 01:54:16,000
quite uncontroversial which is why we

3129
01:54:16,000 --> 01:54:18,960
had listed in here

3130
01:54:21,280 --> 01:54:23,679
so i don't see anybody coming up to the

3131
01:54:23,679 --> 01:54:24,320
queue to

3132
01:54:24,320 --> 01:54:25,599
to disagree that we should run an

3133
01:54:25,599 --> 01:54:26,880
adoption call for those when we're

3134
01:54:26,880 --> 01:54:28,639
recharged so i guess the plan is to do

3135
01:54:28,639 --> 01:54:29,360
that

3136
01:54:29,360 --> 01:54:32,080
um the other thing we sort of discussed

3137
01:54:32,080 --> 01:54:33,199
in the back channel here between the

3138
01:54:33,199 --> 01:54:36,239
chairs is that um version negotiation uh

3139
01:54:36,239 --> 01:54:38,159
seems like it might need more face time

3140
01:54:38,159 --> 01:54:38,719
and so one

3141
01:54:38,719 --> 01:54:40,239
one way forward would be to see if we

3142
01:54:40,239 --> 01:54:42,320
can do an interim on version negotiation

3143
01:54:42,320 --> 01:54:44,239
between now and 11

3144
01:54:44,239 --> 01:54:46,960
um in order to give people some some

3145
01:54:46,960 --> 01:54:49,360
more time to discuss this

3146
01:54:49,360 --> 01:54:52,639
um is that something we should plan

3147
01:54:52,639 --> 01:54:58,239
audrey david says it sounds great

3148
01:54:58,639 --> 01:55:05,199
they went besides david

3149
01:55:05,199 --> 01:55:07,280
nick says yes okay so it looks like sort

3150
01:55:07,280 --> 01:55:08,560
of there there are people that

3151
01:55:08,560 --> 01:55:10,239
that want to go forward with that so we

3152
01:55:10,239 --> 01:55:11,760
probably do

3153
01:55:11,760 --> 01:55:16,080
a doodle poll for a slot and uh

3154
01:55:16,080 --> 01:55:18,400
see when we can when we can have it that

3155
01:55:18,400 --> 01:55:19,280
will sort of work from

3156
01:55:19,280 --> 01:55:22,480
people in different time zones

3157
01:55:26,560 --> 01:55:28,960
right

3158
01:55:30,000 --> 01:55:31,599
mata lucas is there anything else that

3159
01:55:31,599 --> 01:55:33,360
you guys want to discuss

3160
01:55:33,360 --> 01:55:35,840
as part of the wrapper future meetings i

3161
01:55:35,840 --> 01:55:36,560
guess uh

3162
01:55:36,560 --> 01:55:38,480
we will continue to read at itfs and

3163
01:55:38,480 --> 01:55:39,920
we'll continue to do interims when we

3164
01:55:39,920 --> 01:55:41,040
need them

3165
01:55:41,040 --> 01:55:43,760
um implementation drafts we are on the

3166
01:55:43,760 --> 01:55:45,760
final one hopefully for a while which is

3167
01:55:45,760 --> 01:55:46,239
the one

3168
01:55:46,239 --> 01:55:51,839
on version one um and that's the etc

3169
01:55:55,280 --> 01:55:58,639
in this in this session

3170
01:55:58,639 --> 01:56:01,119
so this is a draft that we are

3171
01:56:01,119 --> 01:56:03,199
considering adoption of based on the

3172
01:56:03,199 --> 01:56:05,360
rechartering activity so

3173
01:56:05,360 --> 01:56:07,280
it's it's there it's in holding

3174
01:56:07,280 --> 01:56:08,560
effectively until

3175
01:56:08,560 --> 01:56:11,360
rechartering completes but in case you

3176
01:56:11,360 --> 01:56:12,719
haven't yet seen any of the

3177
01:56:12,719 --> 01:56:14,560
presentations robin's done

3178
01:56:14,560 --> 01:56:16,000
throughout the various other sessions at

3179
01:56:16,000 --> 01:56:17,840
the itf um he

3180
01:56:17,840 --> 01:56:19,599
he's given some overviews to other

3181
01:56:19,599 --> 01:56:21,760
groups that might be interested

3182
01:56:21,760 --> 01:56:24,400
and and you might remember that there's

3183
01:56:24,400 --> 01:56:26,400
the concept of a main schema and then a

3184
01:56:26,400 --> 01:56:28,480
quick and h3 profile over

3185
01:56:28,480 --> 01:56:31,199
over that um but in the first instance

3186
01:56:31,199 --> 01:56:33,520
we'd probably be looking at doing

3187
01:56:33,520 --> 01:56:36,639
q log in this group um and i'm working

3188
01:56:36,639 --> 01:56:37,760
with some others

3189
01:56:37,760 --> 01:56:40,639
to understand their needs that that then

3190
01:56:40,639 --> 01:56:42,719
the whole thing could be kind of

3191
01:56:42,719 --> 01:56:45,440
generalized and worked on elsewhere if

3192
01:56:45,440 --> 01:56:46,960
people would be interested in the far

3193
01:56:46,960 --> 01:56:49,280
future

3194
01:56:54,880 --> 01:56:56,320
yeah it's surprising that uh this is the

3195
01:56:56,320 --> 01:56:58,400
one session where robin didn't present

3196
01:56:58,400 --> 01:56:58,960
um

3197
01:56:58,960 --> 01:57:01,040
but if you look at the charter proposal

3198
01:57:01,040 --> 01:57:02,080
text right sort of

3199
01:57:02,080 --> 01:57:05,599
um it talks about a logging uh format

3200
01:57:05,599 --> 01:57:08,480
um which we lumped in with the operation

3201
01:57:08,480 --> 01:57:10,480
operability and manageability

3202
01:57:10,480 --> 01:57:12,880
uh topics because it sort of belongs

3203
01:57:12,880 --> 01:57:13,520
there

3204
01:57:13,520 --> 01:57:15,440
and and that text is there because we

3205
01:57:15,440 --> 01:57:17,040
all we as luca said

3206
01:57:17,040 --> 01:57:19,119
we assume we're gonna adopt uh part of

3207
01:57:19,119 --> 01:57:20,400
the q log work here

3208
01:57:20,400 --> 01:57:22,840
specifically the one that's related to

3209
01:57:22,840 --> 01:57:25,840
quick

3210
01:57:28,400 --> 01:57:30,000
so we have three minutes uh i need to

3211
01:57:30,000 --> 01:57:31,599
think quick that anybody else wanna

3212
01:57:31,599 --> 01:57:34,159
bring up otherwise we'll go to gather

3213
01:57:34,159 --> 01:57:39,839
town early

3214
01:57:43,199 --> 01:57:44,800
the only thing i'd like to do is to

3215
01:57:44,800 --> 01:57:46,239
thank our notetaker

3216
01:57:46,239 --> 01:57:48,880
or takers um for helping out for the

3217
01:57:48,880 --> 01:57:51,199
session

3218
01:57:51,360 --> 01:57:52,960
yeah and thanks for for the healthy

3219
01:57:52,960 --> 01:57:55,920
discussion as always

3220
01:57:58,800 --> 01:58:07,840
talk to you guys later bye

3221
01:58:12,639 --> 01:58:14,719
you

