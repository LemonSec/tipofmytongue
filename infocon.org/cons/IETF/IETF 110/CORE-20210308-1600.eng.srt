1
00:00:29,599 --> 00:00:30,160
okay

2
00:00:30,160 --> 00:00:33,920
we are on the clock shall we start

3
00:00:36,160 --> 00:00:39,600
okay uh welcome everybody to this first

4
00:00:39,600 --> 00:00:42,480
uh co-working group session at the itf

5
00:00:42,480 --> 00:00:44,239
110 meeting uh

6
00:00:44,239 --> 00:00:46,559
charizard marco tilocami and jaime

7
00:00:46,559 --> 00:00:47,360
jimenez

8
00:00:47,360 --> 00:00:50,239
who couldn't be here for this meeting

9
00:00:50,239 --> 00:00:50,719
and

10
00:00:50,719 --> 00:00:54,480
we have the next slide to give a hint

11
00:00:54,480 --> 00:00:59,839
why next please

12
00:01:01,840 --> 00:01:04,879
so jaime is happily busy again

13
00:01:04,879 --> 00:01:07,760
uh with his newborn son and as we like

14
00:01:07,760 --> 00:01:09,520
to think training future working group

15
00:01:09,520 --> 00:01:10,880
chairs

16
00:01:10,880 --> 00:01:13,200
and this place we haven't standing chair

17
00:01:13,200 --> 00:01:14,240
for this meeting

18
00:01:14,240 --> 00:01:16,479
uh carson bormann thank you very much

19
00:01:16,479 --> 00:01:17,280
for uh

20
00:01:17,280 --> 00:01:19,840
kindly being supportive in in this

21
00:01:19,840 --> 00:01:22,159
occasion and congratulations again

22
00:01:22,159 --> 00:01:27,840
to jaime next please

23
00:01:27,840 --> 00:01:30,000
um yeah a bit of practicalities of

24
00:01:30,000 --> 00:01:31,439
course as usual we assume

25
00:01:31,439 --> 00:01:33,360
uh people attending the session to have

26
00:01:33,360 --> 00:01:34,560
read the documents

27
00:01:34,560 --> 00:01:37,200
uh discussed today uh we are trying to

28
00:01:37,200 --> 00:01:38,720
make good use of the time during this

29
00:01:38,720 --> 00:01:39,200
meeting

30
00:01:39,200 --> 00:01:41,840
to solve open issues especially the note

31
00:01:41,840 --> 00:01:43,200
well applies

32
00:01:43,200 --> 00:01:45,520
more on that on the next slide and as a

33
00:01:45,520 --> 00:01:47,439
reminder blue sheets are automatically

34
00:01:47,439 --> 00:01:49,360
compiled

35
00:01:49,360 --> 00:01:53,439
in this myth echo mythical meetings uh

36
00:01:53,439 --> 00:01:56,240
i will be jabra scribe for this session

37
00:01:56,240 --> 00:01:57,600
and i understand we have

38
00:01:57,600 --> 00:02:01,840
michael richardson as minion taker

39
00:02:01,840 --> 00:02:04,799
confirmed michael

40
00:02:05,040 --> 00:02:08,318
well he's typing

41
00:02:08,318 --> 00:02:11,920
all good thanks thank you very much i'll

42
00:02:11,920 --> 00:02:13,200
also help

43
00:02:13,200 --> 00:02:15,599
otherwise uh not well apply as usual

44
00:02:15,599 --> 00:02:16,879
please get familiar with us

45
00:02:16,879 --> 00:02:18,959
uh if you're not already it's not only

46
00:02:18,959 --> 00:02:20,959
about uh ipr and payments

47
00:02:20,959 --> 00:02:22,640
it's just it's also about a code of

48
00:02:22,640 --> 00:02:24,800
contact so be polite and nice with each

49
00:02:24,800 --> 00:02:26,720
other

50
00:02:26,720 --> 00:02:29,520
next slide please

51
00:02:29,760 --> 00:02:33,040
uh okay uh please use the key request

52
00:02:33,040 --> 00:02:34,400
feature on miteiko to

53
00:02:34,400 --> 00:02:37,040
enter and leave the queue the hand on

54
00:02:37,040 --> 00:02:38,879
the top left of the window

55
00:02:38,879 --> 00:02:41,200
uh you can just jog there i'll be

56
00:02:41,200 --> 00:02:42,959
described i can relay your comments or

57
00:02:42,959 --> 00:02:44,080
questions

58
00:02:44,080 --> 00:02:46,400
and this meeting is recorded and again

59
00:02:46,400 --> 00:02:47,280
no need to fill

60
00:02:47,280 --> 00:02:51,519
any attendance list explicitly

61
00:02:51,519 --> 00:02:54,080
next please

62
00:02:54,560 --> 00:02:57,680
all right and more nice news for today

63
00:02:57,680 --> 00:03:00,959
uh we are again changing

64
00:03:00,959 --> 00:03:04,480
aed uh the leaving aid uh very labor

65
00:03:04,480 --> 00:03:06,080
right now and during the week there will

66
00:03:06,080 --> 00:03:06,879
be the

67
00:03:06,879 --> 00:03:09,200
uh the formal end of to uh francesca

68
00:03:09,200 --> 00:03:10,400
palumbini's new id

69
00:03:10,400 --> 00:03:12,640
in the earth area and responsible um

70
00:03:12,640 --> 00:03:14,319
especially for core

71
00:03:14,319 --> 00:03:17,360
uh so thanks to barry again uh and

72
00:03:17,360 --> 00:03:19,920
welcome francesca and if you two want to

73
00:03:19,920 --> 00:03:22,958
say something please do

74
00:03:31,120 --> 00:03:33,440
okay i hesitated i saw francesca try to

75
00:03:33,440 --> 00:03:34,159
jump in hi

76
00:03:34,159 --> 00:03:36,080
everybody thanks thanks for the support

77
00:03:36,080 --> 00:03:38,239
you guys have given me over the time

78
00:03:38,239 --> 00:03:39,920
and uh thanks for being an easy working

79
00:03:39,920 --> 00:03:41,440
group to manage

80
00:03:41,440 --> 00:03:43,920
uh and getting a lot of work done so um

81
00:03:43,920 --> 00:03:47,839
you'll still see me around

82
00:03:48,720 --> 00:03:50,959
yeah just want to say thank you marco

83
00:03:50,959 --> 00:03:53,439
looking forward to working with you

84
00:03:53,439 --> 00:03:56,159
and everybody

85
00:03:56,720 --> 00:04:02,159
thank you both of you next slide please

86
00:04:02,400 --> 00:04:05,120
right this is the agenda uh for today

87
00:04:05,120 --> 00:04:06,959
which is essentially including

88
00:04:06,959 --> 00:04:10,319
uh all the security related works uh

89
00:04:10,319 --> 00:04:12,319
also to avoid a collision with the

90
00:04:12,319 --> 00:04:13,599
danish buff

91
00:04:13,599 --> 00:04:16,079
on friday and we start with group

92
00:04:16,079 --> 00:04:17,358
communication documents

93
00:04:17,358 --> 00:04:20,000
continuing on other security works and

94
00:04:20,000 --> 00:04:21,759
cachable score and combining

95
00:04:21,759 --> 00:04:25,360
oscar with edoc and the recently work on

96
00:04:25,360 --> 00:04:28,240
cypher limits especially apply to the

97
00:04:28,240 --> 00:04:30,560
oscore protocol

98
00:04:30,560 --> 00:04:34,479
next slide please yeah anticipating the

99
00:04:34,479 --> 00:04:35,199
agenda for

100
00:04:35,199 --> 00:04:38,320
friday we'll discuss something points um

101
00:04:38,320 --> 00:04:40,320
on one of the core comp documents

102
00:04:40,320 --> 00:04:42,160
currently under shepard write up

103
00:04:42,160 --> 00:04:45,280
and look at the advanced uh twos and ml

104
00:04:45,280 --> 00:04:47,680
documents now active

105
00:04:47,680 --> 00:04:49,600
same for new block and dialing these are

106
00:04:49,600 --> 00:04:51,040
all working group documents

107
00:04:51,040 --> 00:04:54,400
and we conclude another two documents on

108
00:04:54,400 --> 00:04:56,479
resource directory extensions and

109
00:04:56,479 --> 00:04:58,320
a new proposal on data centric

110
00:04:58,320 --> 00:05:01,599
deployment for co-op

111
00:05:01,919 --> 00:05:04,880
so before we move on any agenda bashing

112
00:05:04,880 --> 00:05:05,360
or

113
00:05:05,360 --> 00:05:11,199
comments on the agenda anyone

114
00:05:11,199 --> 00:05:15,039
okay next slide please

115
00:05:16,720 --> 00:05:19,919
just done that so next

116
00:05:19,919 --> 00:05:23,360
and next so uh

117
00:05:23,360 --> 00:05:26,960
i think in january uh 8974

118
00:05:26,960 --> 00:05:30,000
uh was published as an rfc used to be

119
00:05:30,000 --> 00:05:32,800
the core stateless document uh thank you

120
00:05:32,800 --> 00:05:33,840
very much to

121
00:05:33,840 --> 00:05:36,000
klaus and michael especially in the

122
00:05:36,000 --> 00:05:37,199
final stages

123
00:05:37,199 --> 00:05:39,199
and to the whole working group for this

124
00:05:39,199 --> 00:05:41,360
achievement

125
00:05:41,360 --> 00:05:44,160
next slide please

126
00:05:45,440 --> 00:05:48,800
and then we have a bunch of almost there

127
00:05:48,800 --> 00:05:52,160
documents uh dave urn is already in the

128
00:05:52,160 --> 00:05:53,120
editor queue

129
00:05:53,120 --> 00:05:56,240
and for the resource directory uh we

130
00:05:56,240 --> 00:05:57,600
could finally see that day

131
00:05:57,600 --> 00:05:59,520
yesterday when it was uh formally

132
00:05:59,520 --> 00:06:01,759
approved and there are other

133
00:06:01,759 --> 00:06:03,680
working groups and documents that have

134
00:06:03,680 --> 00:06:05,600
uh as many reasons

135
00:06:05,600 --> 00:06:08,160
to celebrate about this uh like

136
00:06:08,160 --> 00:06:08,800
especially

137
00:06:08,800 --> 00:06:12,000
one document in in l week uh

138
00:06:12,000 --> 00:06:14,560
echo request tag uh also requires some

139
00:06:14,560 --> 00:06:15,280
uh

140
00:06:15,280 --> 00:06:17,199
final editing from christian if i

141
00:06:17,199 --> 00:06:18,639
remember correctly to address

142
00:06:18,639 --> 00:06:22,960
comments from from ben and roman

143
00:06:22,960 --> 00:06:25,120
otherwise it's also very close to to

144
00:06:25,120 --> 00:06:26,080
take the final

145
00:06:26,080 --> 00:06:28,720
the final step thanks a lot for all this

146
00:06:28,720 --> 00:06:30,880
work

147
00:06:30,880 --> 00:06:34,160
next slide please

148
00:06:34,160 --> 00:06:37,199
uh right uh we have two of the four

149
00:06:37,199 --> 00:06:40,080
uh core conf documents uh meaning young

150
00:06:40,080 --> 00:06:41,360
sieber and seed

151
00:06:41,360 --> 00:06:43,919
that are right now in las colon till uh

152
00:06:43,919 --> 00:06:45,360
mid next week

153
00:06:45,360 --> 00:06:47,840
and as francesca suggested we also

154
00:06:47,840 --> 00:06:48,720
requested

155
00:06:48,720 --> 00:06:50,880
for both of them a review an additional

156
00:06:50,880 --> 00:06:51,759
review from

157
00:06:51,759 --> 00:06:54,800
from young doctors

158
00:06:54,800 --> 00:06:57,680
next slide please

159
00:06:59,599 --> 00:07:02,000
right as to the other two qr code

160
00:07:02,000 --> 00:07:03,759
documents uh they are under shepard

161
00:07:03,759 --> 00:07:04,400
right up

162
00:07:04,400 --> 00:07:07,440
young library uh seems to be essentially

163
00:07:07,440 --> 00:07:07,919
done

164
00:07:07,919 --> 00:07:09,840
while there have been new open points

165
00:07:09,840 --> 00:07:11,520
raised during the write-up

166
00:07:11,520 --> 00:07:13,840
for the comic document and they will be

167
00:07:13,840 --> 00:07:15,039
discussed also

168
00:07:15,039 --> 00:07:18,639
with eva law in the friday session

169
00:07:18,639 --> 00:07:20,960
otherwise we have a three document

170
00:07:20,960 --> 00:07:22,479
post-working group plus goal

171
00:07:22,479 --> 00:07:25,759
one is a group of score for which a new

172
00:07:25,759 --> 00:07:27,440
revision was recently submitted and we

173
00:07:27,440 --> 00:07:28,880
have especially two

174
00:07:28,880 --> 00:07:31,440
more open points to work on uh

175
00:07:31,440 --> 00:07:32,720
sentimental data ct

176
00:07:32,720 --> 00:07:34,720
has just incorporated working groups

177
00:07:34,720 --> 00:07:36,000
called comments and

178
00:07:36,000 --> 00:07:37,919
with a little synchronization about the

179
00:07:37,919 --> 00:07:39,280
content of

180
00:07:39,280 --> 00:07:41,120
another document that was also discussed

181
00:07:41,120 --> 00:07:42,639
in dispatch today

182
00:07:42,639 --> 00:07:46,240
uh is possibly ready to move forward and

183
00:07:46,240 --> 00:07:49,440
and same for the new block uh draft that

184
00:07:49,440 --> 00:07:50,720
has also incorporated working

185
00:07:50,720 --> 00:07:53,199
plus comments and is also in the agenda

186
00:07:53,199 --> 00:07:56,240
for the friday session

187
00:07:56,879 --> 00:07:58,560
next slide please though i think that

188
00:07:58,560 --> 00:08:00,319
was all for the summary

189
00:08:00,319 --> 00:08:03,919
yeah uh so i think we can

190
00:08:03,919 --> 00:08:07,280
take as next step the uh the set of

191
00:08:07,280 --> 00:08:09,360
group communication documents and and

192
00:08:09,360 --> 00:08:11,599
the first one in the list is

193
00:08:11,599 --> 00:08:16,479
group combis with esco presenting

194
00:08:16,960 --> 00:08:19,440
yeah i'm just checking the audio it

195
00:08:19,440 --> 00:08:21,599
works we can hear you well

196
00:08:21,599 --> 00:08:23,520
okay in that case i'll turn on the video

197
00:08:23,520 --> 00:08:26,400
as well we can see you too hi esco

198
00:08:26,400 --> 00:08:30,160
hi and you you can do the slides i think

199
00:08:30,160 --> 00:08:32,400
right

200
00:08:33,360 --> 00:08:36,000
cars then we handle them no question

201
00:08:36,000 --> 00:08:41,839
yeah thanks

202
00:08:45,040 --> 00:08:55,839
so it's still being started

203
00:09:04,800 --> 00:09:08,000
no screen yet not talking my

204
00:09:08,000 --> 00:09:10,560
usual way of showing slides in chrome

205
00:09:10,560 --> 00:09:11,519
doesn't work

206
00:09:11,519 --> 00:09:14,880
so i'm using a different uh thing and

207
00:09:14,880 --> 00:09:16,720
that of course doesn't always

208
00:09:16,720 --> 00:09:22,320
work either so just go ahead and talk

209
00:09:22,320 --> 00:09:25,360
oh yeah okay i'll open the slides here

210
00:09:25,360 --> 00:09:27,600
then

211
00:09:32,080 --> 00:09:34,640
so i'll present the group communication

212
00:09:34,640 --> 00:09:36,880
for the constraints application protocol

213
00:09:36,880 --> 00:09:40,000
draft group convis

214
00:09:40,959 --> 00:09:43,440
and just as a reminder of the goal so

215
00:09:43,440 --> 00:09:45,519
this is intended to describe

216
00:09:45,519 --> 00:09:48,000
co-op group communication as a successor

217
00:09:48,000 --> 00:09:50,440
of the experimental rfc

218
00:09:50,440 --> 00:09:53,120
7390 now we

219
00:09:53,120 --> 00:09:57,200
aiming for standards track documents

220
00:10:01,279 --> 00:10:04,240
meanwhile the slides are visible great

221
00:10:04,240 --> 00:10:04,880
so we'll

222
00:10:04,880 --> 00:10:07,360
skip this one because we've presented it

223
00:10:07,360 --> 00:10:09,120
a number of times it's just a reminder

224
00:10:09,120 --> 00:10:09,920
of the scope

225
00:10:09,920 --> 00:10:13,279
of the document so currently focused on

226
00:10:13,279 --> 00:10:15,600
any

227
00:10:15,680 --> 00:10:18,320
udp multicast based group communication

228
00:10:18,320 --> 00:10:20,959
for co-op

229
00:10:21,040 --> 00:10:23,519
so the general updates i will now go

230
00:10:23,519 --> 00:10:24,160
through them

231
00:10:24,160 --> 00:10:28,399
so we have uh adapted the text to allow

232
00:10:28,399 --> 00:10:31,279
this thing basically so one server

233
00:10:31,279 --> 00:10:32,480
that's

234
00:10:32,480 --> 00:10:35,200
responding to a group quest can give

235
00:10:35,200 --> 00:10:35,600
back

236
00:10:35,600 --> 00:10:39,600
multiple responses in principle

237
00:10:39,680 --> 00:10:41,519
although normally it should give back

238
00:10:41,519 --> 00:10:43,120
one response

239
00:10:43,120 --> 00:10:45,600
but still due to circumstances you could

240
00:10:45,600 --> 00:10:47,040
get multiple and now

241
00:10:47,040 --> 00:10:50,480
question was how to handle this

242
00:10:51,360 --> 00:10:54,560
um so if the yeah in this case the proxy

243
00:10:54,560 --> 00:10:55,279
is

244
00:10:55,279 --> 00:10:57,760
proxying a group request the idea is now

245
00:10:57,760 --> 00:10:59,120
to

246
00:10:59,120 --> 00:11:02,079
based on inter experience state that the

247
00:11:02,079 --> 00:11:03,519
the proxy will just forward

248
00:11:03,519 --> 00:11:05,440
all the responses and then the

249
00:11:05,440 --> 00:11:07,040
application layer the client

250
00:11:07,040 --> 00:11:09,920
needs to handle it

251
00:11:11,120 --> 00:11:13,920
so that's also visualized in figure so

252
00:11:13,920 --> 00:11:14,399
we can

253
00:11:14,399 --> 00:11:17,360
go to the next slide

254
00:11:20,240 --> 00:11:23,600
so what we do did is we had already

255
00:11:23,600 --> 00:11:26,560
guidelized on forward proxies were

256
00:11:26,560 --> 00:11:27,519
revised

257
00:11:27,519 --> 00:11:29,839
now also some more information or

258
00:11:29,839 --> 00:11:31,279
reverse proxies is

259
00:11:31,279 --> 00:11:35,120
added um

260
00:11:35,120 --> 00:11:38,320
let's see yeah so the

261
00:11:38,320 --> 00:11:39,970
reverse proxy can basically

262
00:11:39,970 --> 00:11:41,360
[Music]

263
00:11:41,360 --> 00:11:45,680
do the group request so the client will

264
00:11:45,680 --> 00:11:47,519
do a unicast request to the proxy the

265
00:11:47,519 --> 00:11:49,360
proxy will do a group request

266
00:11:49,360 --> 00:11:52,320
the proxy can also handle following

267
00:11:52,320 --> 00:11:54,880
unicast requests

268
00:11:54,880 --> 00:11:57,839
so um

269
00:11:58,480 --> 00:12:00,880
yeah that's basically a reverse proxy

270
00:12:00,880 --> 00:12:03,360
and it's made to look like

271
00:12:03,360 --> 00:12:07,279
a normal server basically

272
00:12:07,519 --> 00:12:10,399
and we now also reference specifically a

273
00:12:10,399 --> 00:12:11,680
signaling protocol

274
00:12:11,680 --> 00:12:14,399
for proxy so as we listed before a

275
00:12:14,399 --> 00:12:16,240
number of issues for

276
00:12:16,240 --> 00:12:19,120
forward proxies and reverse proxies we

277
00:12:19,120 --> 00:12:21,519
now have this reference to drafty loca

278
00:12:21,519 --> 00:12:24,639
core group proxy that's

279
00:12:24,639 --> 00:12:27,360
authored by marco and me and it also has

280
00:12:27,360 --> 00:12:28,639
a signaling protocol

281
00:12:28,639 --> 00:12:31,040
as will be explained later to address

282
00:12:31,040 --> 00:12:33,680
these issues

283
00:12:35,440 --> 00:12:39,839
okay let's go to the next slide

284
00:12:40,160 --> 00:12:42,240
now one major addition is the caching

285
00:12:42,240 --> 00:12:43,360
model

286
00:12:43,360 --> 00:12:45,920
so we already have the clash caching at

287
00:12:45,920 --> 00:12:47,440
the client side of course

288
00:12:47,440 --> 00:12:51,040
responses and now we basically

289
00:12:51,040 --> 00:12:55,440
add the caching in the proxy as well

290
00:12:55,440 --> 00:12:58,639
um so for proxy's caching uh

291
00:12:58,639 --> 00:13:00,639
we did at least marco did a quite

292
00:13:00,639 --> 00:13:02,560
thorough analysis on that and it turns

293
00:13:02,560 --> 00:13:04,079
out you have to work with two types of

294
00:13:04,079 --> 00:13:06,720
cache entries so one is the individual

295
00:13:06,720 --> 00:13:09,040
cache entry for a single response from a

296
00:13:09,040 --> 00:13:10,560
single server

297
00:13:10,560 --> 00:13:12,720
the other type is an aggregated cache

298
00:13:12,720 --> 00:13:13,760
entry so

299
00:13:13,760 --> 00:13:16,000
that's basically one cache entry that

300
00:13:16,000 --> 00:13:18,000
represents an entire

301
00:13:18,000 --> 00:13:20,320
group of responses that corresponds to a

302
00:13:20,320 --> 00:13:23,360
single group request

303
00:13:23,440 --> 00:13:26,480
so we have both types and in the draft

304
00:13:26,480 --> 00:13:27,519
we will

305
00:13:27,519 --> 00:13:31,120
basically explain some rules

306
00:13:31,120 --> 00:13:33,120
how to handle handle the cache entries

307
00:13:33,120 --> 00:13:36,399
for for both types

308
00:13:38,480 --> 00:13:42,079
okay go to the next slides

309
00:13:43,839 --> 00:13:47,279
yeah so the caching model is as follows

310
00:13:47,279 --> 00:13:50,480
so a proxy can receive a group quest and

311
00:13:50,480 --> 00:13:52,399
then get responses from the

312
00:13:52,399 --> 00:13:56,000
origin servers back as shown on the

313
00:13:56,000 --> 00:13:56,959
picture

314
00:13:56,959 --> 00:13:59,760
so what it does it is it forwards each

315
00:13:59,760 --> 00:14:00,560
response

316
00:14:00,560 --> 00:14:03,680
back to the client and

317
00:14:03,680 --> 00:14:06,240
also adds an individual cache entry for

318
00:14:06,240 --> 00:14:08,160
each response

319
00:14:08,160 --> 00:14:10,720
also the responses get added to a list l

320
00:14:10,720 --> 00:14:11,680
and that list l

321
00:14:11,680 --> 00:14:15,199
will basically later be used to make an

322
00:14:15,199 --> 00:14:18,079
aggregated cache entry that collects all

323
00:14:18,079 --> 00:14:19,680
the responses for that particular

324
00:14:19,680 --> 00:14:21,680
request

325
00:14:21,680 --> 00:14:23,600
and at the bottom of the slide you can

326
00:14:23,600 --> 00:14:25,199
see there's some

327
00:14:25,199 --> 00:14:27,600
lifetime handling also to be done for

328
00:14:27,600 --> 00:14:29,600
the cache entry so it looks at the

329
00:14:29,600 --> 00:14:32,639
max age of all the responses to

330
00:14:32,639 --> 00:14:36,399
compute combined max h or the aggregated

331
00:14:36,399 --> 00:14:39,120
cache entry

332
00:14:42,000 --> 00:14:45,839
ok next slide please

333
00:14:47,360 --> 00:14:50,639
yeah the caching model continues so uh

334
00:14:50,639 --> 00:14:52,720
basically your unicast request can also

335
00:14:52,720 --> 00:14:54,560
be sent

336
00:14:54,560 --> 00:14:56,639
to the proxy and then it can receive a

337
00:14:56,639 --> 00:14:58,959
response from the server to that

338
00:14:58,959 --> 00:15:00,959
so the response is forwarded and then it

339
00:15:00,959 --> 00:15:02,160
creates an individual

340
00:15:02,160 --> 00:15:04,480
cache entries or updates the existing

341
00:15:04,480 --> 00:15:06,079
one

342
00:15:06,079 --> 00:15:10,320
and it also will look in the aggregated

343
00:15:10,320 --> 00:15:13,839
cache entries basically

344
00:15:14,639 --> 00:15:20,240
let's see what it does then which ones

345
00:15:21,199 --> 00:15:23,120
yeah it can also basically update the

346
00:15:23,120 --> 00:15:25,120
aggregated cache entry with an

347
00:15:25,120 --> 00:15:26,880
individual response

348
00:15:26,880 --> 00:15:30,079
and also that

349
00:15:30,079 --> 00:15:33,279
may influence the lifetime so

350
00:15:33,279 --> 00:15:35,360
we'll basically scan all the entries

351
00:15:35,360 --> 00:15:36,800
again and correct

352
00:15:36,800 --> 00:15:38,959
yeah the lifetime so the lifetime of an

353
00:15:38,959 --> 00:15:40,639
aggregated entry is always the

354
00:15:40,639 --> 00:15:43,680
minimum of the lifetimes of all the

355
00:15:43,680 --> 00:15:46,800
entries that are in there

356
00:15:49,279 --> 00:15:54,480
okay let's go to the next slide

357
00:15:54,480 --> 00:15:56,240
so also the validation model is a

358
00:15:56,240 --> 00:15:57,600
separate section uh

359
00:15:57,600 --> 00:16:00,080
from caching um

360
00:16:00,080 --> 00:16:01,519
[Music]

361
00:16:01,519 --> 00:16:04,000
yeah so in the code rfc this was not

362
00:16:04,000 --> 00:16:05,920
addressed in detail now we try to do

363
00:16:05,920 --> 00:16:07,600
that

364
00:16:07,600 --> 00:16:10,560
so the validation works between client

365
00:16:10,560 --> 00:16:11,839
and servers and for that

366
00:16:11,839 --> 00:16:14,880
we introduce a new option the multi etac

367
00:16:14,880 --> 00:16:18,240
option and this can only be used for

368
00:16:18,240 --> 00:16:22,880
group requests so it will basically uh

369
00:16:22,880 --> 00:16:25,759
yeah be like an e-tag only that's in the

370
00:16:25,759 --> 00:16:26,560
e-tag

371
00:16:26,560 --> 00:16:28,720
it also encodes an identity of the

372
00:16:28,720 --> 00:16:29,920
server

373
00:16:29,920 --> 00:16:32,800
so that it can basically direct the

374
00:16:32,800 --> 00:16:35,040
e-tec option to one particular

375
00:16:35,040 --> 00:16:37,839
server

376
00:16:38,160 --> 00:16:40,000
and the nice thing of this is that at

377
00:16:40,000 --> 00:16:41,199
the server side the

378
00:16:41,199 --> 00:16:43,600
the server doesn't have to think about

379
00:16:43,600 --> 00:16:44,560
okay what kind of

380
00:16:44,560 --> 00:16:47,680
e-tech should i generate so that

381
00:16:47,680 --> 00:16:50,239
clients can

382
00:16:50,720 --> 00:16:52,560
can distinguish between all the possible

383
00:16:52,560 --> 00:16:55,120
servers but it just generates an etag as

384
00:16:55,120 --> 00:16:58,480
usual and the client can use this option

385
00:16:58,480 --> 00:17:00,079
to

386
00:17:00,079 --> 00:17:04,160
basically pick big responses that it has

387
00:17:04,160 --> 00:17:07,280
cached and to validate if they are still

388
00:17:07,280 --> 00:17:09,439
correct

389
00:17:09,439 --> 00:17:12,000
so the proposal is in detail in the

390
00:17:12,000 --> 00:17:13,679
draft so we have

391
00:17:13,679 --> 00:17:17,199
some addressing information added

392
00:17:17,199 --> 00:17:18,880
encoded yeah in the same way as in the

393
00:17:18,880 --> 00:17:22,240
group from proxy draft

394
00:17:23,280 --> 00:17:25,760
okay let's go to the next one there are

395
00:17:25,760 --> 00:17:28,799
no questions at least

396
00:17:29,679 --> 00:17:31,919
there's also between the client and

397
00:17:31,919 --> 00:17:32,799
proxy

398
00:17:32,799 --> 00:17:35,360
validation possible yeah another quick

399
00:17:35,360 --> 00:17:36,400
question if i may

400
00:17:36,400 --> 00:17:39,440
this show this shows an x

401
00:17:39,440 --> 00:17:47,200
in the r column yeah this is repeatable

402
00:17:47,200 --> 00:17:51,120
here yeah but it's also a simple

403
00:17:51,120 --> 00:17:53,600
sequence

404
00:17:55,360 --> 00:18:00,320
so that's right

405
00:18:00,320 --> 00:18:02,400
how do i know whether i start a new

406
00:18:02,400 --> 00:18:03,760
sequence in a new option

407
00:18:03,760 --> 00:18:06,799
or continue the sequence in the existing

408
00:18:06,799 --> 00:18:08,240
option

409
00:18:08,240 --> 00:18:10,880
yeah the existing option is to target

410
00:18:10,880 --> 00:18:11,440
one

411
00:18:11,440 --> 00:18:14,559
particular server in the group

412
00:18:14,559 --> 00:18:18,640
and it has an basically a sequence of

413
00:18:18,640 --> 00:18:21,200
etag elements in there so that's for

414
00:18:21,200 --> 00:18:23,440
this particular server if you wanna

415
00:18:23,440 --> 00:18:27,280
address multiple servers so you say

416
00:18:27,280 --> 00:18:30,000
tag one on server one and tag three on

417
00:18:30,000 --> 00:18:31,440
server two for example

418
00:18:31,440 --> 00:18:35,520
then you need two of these options

419
00:18:35,520 --> 00:18:37,520
so that does not fit in one option in

420
00:18:37,520 --> 00:18:39,840
the current definition

421
00:18:39,840 --> 00:18:43,840
okay thank you yeah

422
00:18:45,840 --> 00:18:48,080
okay yeah so this was between client and

423
00:18:48,080 --> 00:18:50,400
proxy so that's basically

424
00:18:50,400 --> 00:18:52,240
only meant to address these aggregated

425
00:18:52,240 --> 00:18:54,960
cache entries that are newly introduced

426
00:18:54,960 --> 00:18:57,919
so you can basically validate an entire

427
00:18:57,919 --> 00:18:58,640
group

428
00:18:58,640 --> 00:19:02,000
response as a client

429
00:19:02,320 --> 00:19:06,240
and in case yeah in case that is still

430
00:19:06,240 --> 00:19:07,679
fresh you can basically get the

431
00:19:07,679 --> 00:19:09,840
validation confirmation from the cache

432
00:19:09,840 --> 00:19:11,840
like okay this is still

433
00:19:11,840 --> 00:19:14,320
a fresh group response you can use the

434
00:19:14,320 --> 00:19:16,160
entire thing

435
00:19:16,160 --> 00:19:18,400
and there's no need to do a new group

436
00:19:18,400 --> 00:19:21,360
request in this case

437
00:19:21,600 --> 00:19:24,240
but it can be used in get and fetch

438
00:19:24,240 --> 00:19:27,039
group requests

439
00:19:27,760 --> 00:19:29,440
and yeah it works quite for the rest

440
00:19:29,440 --> 00:19:31,440
quite similar to

441
00:19:31,440 --> 00:19:34,559
the normal co-op validation so using the

442
00:19:34,559 --> 00:19:34,960
group

443
00:19:34,960 --> 00:19:38,960
e-tec option

444
00:19:38,960 --> 00:19:43,360
um yeah okay let's go to the next one

445
00:19:43,360 --> 00:19:46,640
taking the time there's also the

446
00:19:46,640 --> 00:19:48,080
security question of course what we have

447
00:19:48,080 --> 00:19:50,720
discussed so far is without

448
00:19:50,720 --> 00:19:53,200
security or at least without end-to-end

449
00:19:53,200 --> 00:19:55,120
security

450
00:19:55,120 --> 00:19:57,600
we also consider it what can we do uh

451
00:19:57,600 --> 00:19:59,120
going through a proxy

452
00:19:59,120 --> 00:20:02,000
with end-to-end security can we still

453
00:20:02,000 --> 00:20:02,799
cash

454
00:20:02,799 --> 00:20:05,039
well it turns out it's not that

455
00:20:05,039 --> 00:20:06,720
straightforward but it's possible

456
00:20:06,720 --> 00:20:09,440
by using the deterministic requests that

457
00:20:09,440 --> 00:20:10,400
are

458
00:20:10,400 --> 00:20:13,200
introduced in this draft ralph hamsu's

459
00:20:13,200 --> 00:20:13,679
core

460
00:20:13,679 --> 00:20:16,640
cacheable score

461
00:20:16,720 --> 00:20:19,520
and it's limited to restful safe

462
00:20:19,520 --> 00:20:20,080
requests

463
00:20:20,080 --> 00:20:22,480
that have no no side effects on the

464
00:20:22,480 --> 00:20:23,120
resource

465
00:20:23,120 --> 00:20:26,000
at the server as like a guest and a

466
00:20:26,000 --> 00:20:28,880
fetch for example

467
00:20:30,159 --> 00:20:31,840
so the client has to prepare this

468
00:20:31,840 --> 00:20:33,679
specific deterministic request

469
00:20:33,679 --> 00:20:37,360
to be able to do this and response

470
00:20:37,360 --> 00:20:39,200
revalidation

471
00:20:39,200 --> 00:20:42,159
that's not not possible in all cases so

472
00:20:42,159 --> 00:20:43,600
we have listed

473
00:20:43,600 --> 00:20:46,799
a couple of cases below

474
00:20:46,799 --> 00:20:49,039
it is possible between origin client and

475
00:20:49,039 --> 00:20:50,159
origin servers

476
00:20:50,159 --> 00:20:53,840
using the multi-etag option

477
00:20:54,080 --> 00:20:56,960
but there are some complications when

478
00:20:56,960 --> 00:20:58,880
doing data so if you change the request

479
00:20:58,880 --> 00:20:59,440
only a

480
00:20:59,440 --> 00:21:01,280
little bit then it means oh i have to

481
00:21:01,280 --> 00:21:04,559
use a different deterministic request

482
00:21:04,559 --> 00:21:06,720
so it's gets into quite a lot of

483
00:21:06,720 --> 00:21:09,440
complexity uh

484
00:21:09,440 --> 00:21:12,559
to do this so that's what we

485
00:21:12,559 --> 00:21:14,320
basically yeah try to provide an

486
00:21:14,320 --> 00:21:16,080
overview of what you can do and what you

487
00:21:16,080 --> 00:21:18,400
cannot do

488
00:21:18,400 --> 00:21:21,919
okay next slide please

489
00:21:23,919 --> 00:21:27,120
so we have an open point one of several

490
00:21:27,120 --> 00:21:28,480
actually in

491
00:21:28,480 --> 00:21:31,120
github i think that's uh the question

492
00:21:31,120 --> 00:21:32,799
what is the most appropriate

493
00:21:32,799 --> 00:21:35,120
place for these new items that we

494
00:21:35,120 --> 00:21:37,039
introduced

495
00:21:37,039 --> 00:21:40,240
so one number one is the general rules

496
00:21:40,240 --> 00:21:41,679
of cash ability

497
00:21:41,679 --> 00:21:45,919
of responses at proxy and proxies

498
00:21:45,919 --> 00:21:48,320
so this looks appropriate to be in this

499
00:21:48,320 --> 00:21:49,120
document

500
00:21:49,120 --> 00:21:51,280
but on the other hand we could also move

501
00:21:51,280 --> 00:21:52,400
it to the group

502
00:21:52,400 --> 00:21:55,440
proxy document

503
00:21:55,440 --> 00:21:58,799
to clearly separate that

504
00:21:58,799 --> 00:22:01,120
the other thing was the multi-etec

505
00:22:01,120 --> 00:22:03,840
option that we introduced

506
00:22:03,840 --> 00:22:06,880
so that's basically for a client to be

507
00:22:06,880 --> 00:22:08,480
able to validate individual

508
00:22:08,480 --> 00:22:12,559
responses from a group of servers

509
00:22:12,559 --> 00:22:14,960
that looks like it could also be yeah in

510
00:22:14,960 --> 00:22:16,799
separate dedicated documents

511
00:22:16,799 --> 00:22:19,919
because it's really a new new thing here

512
00:22:19,919 --> 00:22:22,480
and not yeah not something existing in

513
00:22:22,480 --> 00:22:24,159
co-op that we want to

514
00:22:24,159 --> 00:22:25,919
explain in the group communication

515
00:22:25,919 --> 00:22:27,440
context but it's really a new

516
00:22:27,440 --> 00:22:30,080
new feature

517
00:22:31,360 --> 00:22:33,600
personally i think we could also add

518
00:22:33,600 --> 00:22:35,200
maybe how the normal e-tec

519
00:22:35,200 --> 00:22:36,400
option can be used in group

520
00:22:36,400 --> 00:22:38,240
communication scenarios because that's

521
00:22:38,240 --> 00:22:39,760
also still possible

522
00:22:39,760 --> 00:22:43,200
with some limitations of course and then

523
00:22:43,200 --> 00:22:44,320
number three

524
00:22:44,320 --> 00:22:46,000
is the group etec option so that's

525
00:22:46,000 --> 00:22:47,760
basically specifically

526
00:22:47,760 --> 00:22:49,840
validating a group of responses at the

527
00:22:49,840 --> 00:22:51,440
proxy

528
00:22:51,440 --> 00:22:53,840
that could go typically also in the

529
00:22:53,840 --> 00:22:54,559
group com

530
00:22:54,559 --> 00:22:58,000
proxy document that's what it's about

531
00:22:58,000 --> 00:23:00,799
or maybe it can stay in group combis

532
00:23:00,799 --> 00:23:02,240
there's a bit of discussion points you

533
00:23:02,240 --> 00:23:03,679
have

534
00:23:03,679 --> 00:23:08,240
so where where does the content go

535
00:23:08,240 --> 00:23:11,440
okay then the next slide please uh there

536
00:23:11,440 --> 00:23:11,840
is

537
00:23:11,840 --> 00:23:16,158
yarn in the queue uh please go ahead

538
00:23:16,320 --> 00:23:19,120
yeah um uh hi esco yes just a few

539
00:23:19,120 --> 00:23:19,760
questions

540
00:23:19,760 --> 00:23:23,120
on this um and

541
00:23:23,120 --> 00:23:25,200
i'm trying to understand the multi e tag

542
00:23:25,200 --> 00:23:26,400
and the group beta do you have do you

543
00:23:26,400 --> 00:23:28,159
have any simple examples for when i

544
00:23:28,159 --> 00:23:29,440
would like to use

545
00:23:29,440 --> 00:23:33,760
one or the other option here

546
00:23:33,760 --> 00:23:36,159
why would i want to validate the number

547
00:23:36,159 --> 00:23:37,200
of group

548
00:23:37,200 --> 00:23:40,400
the number of requests for example

549
00:23:40,400 --> 00:23:41,919
or sorry number of responses in the

550
00:23:41,919 --> 00:23:44,000
group b tag

551
00:23:44,000 --> 00:23:47,039
yeah so that's yeah i don't have any

552
00:23:47,039 --> 00:23:49,120
real concrete example but you could say

553
00:23:49,120 --> 00:23:50,559
that

554
00:23:50,559 --> 00:23:52,400
suppose you're reading status

555
00:23:52,400 --> 00:23:54,400
information of a group of

556
00:23:54,400 --> 00:23:57,120
devices and yeah like one of these

557
00:23:57,120 --> 00:23:59,679
devices for example has a particular

558
00:23:59,679 --> 00:24:03,279
large status report that i

559
00:24:03,279 --> 00:24:05,679
already got last time and i maybe don't

560
00:24:05,679 --> 00:24:07,440
want to get it

561
00:24:07,440 --> 00:24:10,880
next time so you can basically

562
00:24:10,880 --> 00:24:14,240
put it multi-etec in

563
00:24:14,240 --> 00:24:15,919
yeah just stating okay i have this

564
00:24:15,919 --> 00:24:19,279
version of your status report um

565
00:24:19,279 --> 00:24:22,480
yeah don't yeah don't send it if that's

566
00:24:22,480 --> 00:24:25,279
still the same basically

567
00:24:25,279 --> 00:24:27,919
right and that that you could say yeah

568
00:24:27,919 --> 00:24:28,880
and that you could

569
00:24:28,880 --> 00:24:31,440
that's basically that you could you

570
00:24:31,440 --> 00:24:33,360
could have multiple of those

571
00:24:33,360 --> 00:24:35,360
uh yeah and it can be multiple different

572
00:24:35,360 --> 00:24:36,799
servers yeah um

573
00:24:36,799 --> 00:24:40,159
okay and the security for that there was

574
00:24:40,159 --> 00:24:41,840
some part of the antenna security was

575
00:24:41,840 --> 00:24:43,279
not possible i mean that that's

576
00:24:43,279 --> 00:24:45,039
definitely proxy to

577
00:24:45,039 --> 00:24:46,799
origin server so that that's not an

578
00:24:46,799 --> 00:24:49,120
end-to-end security

579
00:24:49,120 --> 00:24:52,799
uh secured option right

580
00:24:53,039 --> 00:24:56,880
um yeah the detail for the details of

581
00:24:56,880 --> 00:24:58,000
the option itself

582
00:24:58,000 --> 00:24:59,840
maybe marco can answer that i think it's

583
00:24:59,840 --> 00:25:02,879
in the previous slide

584
00:25:04,320 --> 00:25:07,120
oh sorry sorry for stopping the

585
00:25:07,120 --> 00:25:09,520
presentation i just was curious how

586
00:25:09,520 --> 00:25:11,760
but yeah as you said you're in the the

587
00:25:11,760 --> 00:25:12,880
group yeah here

588
00:25:12,880 --> 00:25:14,720
the the groupie tag option would

589
00:25:14,720 --> 00:25:17,520
essentially not be possible to use

590
00:25:17,520 --> 00:25:20,720
if you haven't on security and the multi

591
00:25:20,720 --> 00:25:22,720
tag option would not be possible

592
00:25:22,720 --> 00:25:25,919
for the proxy to use acting as client

593
00:25:25,919 --> 00:25:29,919
to the original servers yeah

594
00:25:29,919 --> 00:25:31,600
okay but is that a problem i mean that

595
00:25:31,600 --> 00:25:34,960
this could be an outer option right

596
00:25:34,960 --> 00:25:37,679
right now this is mimicking uh the etag

597
00:25:37,679 --> 00:25:38,159
option

598
00:25:38,159 --> 00:25:40,000
in tesma properties so you'd be

599
00:25:40,000 --> 00:25:42,400
processed in the same way and this would

600
00:25:42,400 --> 00:25:45,120
be the result

601
00:25:45,440 --> 00:25:48,720
okay but it was basically yeah

602
00:25:48,720 --> 00:25:51,600
it seemed like this amazing go ahead no

603
00:25:51,600 --> 00:25:53,360
no go ahead

604
00:25:53,360 --> 00:25:55,200
what really remains possible is for sure

605
00:25:55,200 --> 00:25:56,480
end-to-end between the client and the

606
00:25:56,480 --> 00:25:58,320
servers

607
00:25:58,320 --> 00:26:01,360
right okay

608
00:26:01,360 --> 00:26:03,279
good well yeah i can think more of it we

609
00:26:03,279 --> 00:26:04,960
don't need to stop uh stop the

610
00:26:04,960 --> 00:26:06,320
presentation now please

611
00:26:06,320 --> 00:26:09,760
thank you yeah it opens up many

612
00:26:09,760 --> 00:26:11,600
things possible things you can do and a

613
00:26:11,600 --> 00:26:14,399
lot of questions

614
00:26:15,840 --> 00:26:19,918
okay then let's move to the next slide

615
00:26:20,799 --> 00:26:23,200
oh there's already next steps yeah i

616
00:26:23,200 --> 00:26:25,279
think we're

617
00:26:25,279 --> 00:26:27,279
very quiet uh so the next steps for this

618
00:26:27,279 --> 00:26:29,360
draft we have uh review comments

619
00:26:29,360 --> 00:26:30,320
received from

620
00:26:30,320 --> 00:26:32,799
john still to be addressed i think

621
00:26:32,799 --> 00:26:33,600
there's quite some

622
00:26:33,600 --> 00:26:36,840
good comments including uh okay can we

623
00:26:36,840 --> 00:26:38,080
uh

624
00:26:38,080 --> 00:26:39,679
yeah i think that was one of the

625
00:26:39,679 --> 00:26:42,000
questions too to make it more generic as

626
00:26:42,000 --> 00:26:43,120
or not only

627
00:26:43,120 --> 00:26:46,080
target co-op group communication over

628
00:26:46,080 --> 00:26:48,240
udp multicast but also

629
00:26:48,240 --> 00:26:50,000
consider which which part could be

630
00:26:50,000 --> 00:26:51,520
applicable to

631
00:26:51,520 --> 00:26:54,799
yeah another transport layer like a

632
00:26:54,799 --> 00:26:58,720
ip group cast for co-op

633
00:26:58,720 --> 00:27:00,640
and more reviews would always be good of

634
00:27:00,640 --> 00:27:02,640
course we have quite some new content

635
00:27:02,640 --> 00:27:04,400
added so that

636
00:27:04,400 --> 00:27:05,600
there's really something there to be

637
00:27:05,600 --> 00:27:07,600
reviewed

638
00:27:07,600 --> 00:27:09,120
we want to address the open points

639
00:27:09,120 --> 00:27:11,039
introduced today

640
00:27:11,039 --> 00:27:12,720
and that's what's the issue 11 about

641
00:27:12,720 --> 00:27:14,640
where what goes where

642
00:27:14,640 --> 00:27:16,640
and of course there are other github

643
00:27:16,640 --> 00:27:19,360
issues open

644
00:27:19,360 --> 00:27:21,120
and yeah doing some more testing and

645
00:27:21,120 --> 00:27:22,960
implementations it would

646
00:27:22,960 --> 00:27:26,799
also be nice so i think this concludes

647
00:27:26,799 --> 00:27:29,840
the presentation more or less

648
00:27:29,840 --> 00:27:35,840
if there are any questions let me know

649
00:27:39,600 --> 00:27:42,879
nothing on jabber either

650
00:27:46,640 --> 00:27:49,679
christian please um

651
00:27:49,679 --> 00:27:52,480
from from the levels of maturity between

652
00:27:52,480 --> 00:27:52,880
the

653
00:27:52,880 --> 00:27:56,159
the e-tags and the um

654
00:27:56,159 --> 00:27:58,960
the e-pads that and the rest of the of

655
00:27:58,960 --> 00:27:59,440
the

656
00:27:59,440 --> 00:28:02,960
group compass and i think it

657
00:28:02,960 --> 00:28:05,039
might be a good idea to to treat the

658
00:28:05,039 --> 00:28:06,559
etag into

659
00:28:06,559 --> 00:28:07,919
more in something like the proxy

660
00:28:07,919 --> 00:28:10,080
document that doesn't

661
00:28:10,080 --> 00:28:12,399
that has no ambitions to progress in the

662
00:28:12,399 --> 00:28:13,520
same pace

663
00:28:13,520 --> 00:28:16,159
as the group of other the group

664
00:28:16,159 --> 00:28:17,760
companies because i think that

665
00:28:17,760 --> 00:28:20,399
the the group com is get getting good

666
00:28:20,399 --> 00:28:21,760
compass

667
00:28:21,760 --> 00:28:25,279
out is valuable and the and the e-text

668
00:28:25,279 --> 00:28:25,760
thinks

669
00:28:25,760 --> 00:28:27,440
things are valuable but they will need

670
00:28:27,440 --> 00:28:30,720
time to to hammer out the details

671
00:28:30,720 --> 00:28:32,720
yeah maybe some implementation work as

672
00:28:32,720 --> 00:28:34,640
well for the

673
00:28:34,640 --> 00:28:39,520
group etag for example multi-etec yeah

674
00:28:41,440 --> 00:28:44,799
and the plus one from carsten on jabra

675
00:28:44,799 --> 00:28:47,840
okay yeah no that sounds sounds

676
00:28:47,840 --> 00:28:50,480
reasonable all

677
00:28:53,279 --> 00:28:55,600
yeah then for the milt the group ejac

678
00:28:55,600 --> 00:28:57,360
can certainly go into proxy documents

679
00:28:57,360 --> 00:28:59,360
for a multi-etag

680
00:28:59,360 --> 00:29:02,640
it's not really proxy related so

681
00:29:02,640 --> 00:29:04,320
do you think it could be a completely

682
00:29:04,320 --> 00:29:07,840
separate document in that case

683
00:29:09,760 --> 00:29:12,240
it's not proxy related but it's related

684
00:29:12,240 --> 00:29:13,279
to the

685
00:29:13,279 --> 00:29:16,640
to the um transport address

686
00:29:16,640 --> 00:29:18,799
stuff that up in the proxy document so

687
00:29:18,799 --> 00:29:19,919
maybe it could still

688
00:29:19,919 --> 00:29:22,720
look there because it has commonalities

689
00:29:22,720 --> 00:29:24,840
there

690
00:29:24,840 --> 00:29:28,000
yeah now that sound yeah that sounds

691
00:29:28,000 --> 00:29:30,799
like a good observation indeed

692
00:29:30,799 --> 00:29:32,480
so it could be combined is what you're

693
00:29:32,480 --> 00:29:34,960
saying uh

694
00:29:34,960 --> 00:29:41,840
because of that

695
00:29:42,640 --> 00:29:45,360
all right thank you esko and all for the

696
00:29:45,360 --> 00:29:47,200
feedback

697
00:29:47,200 --> 00:29:49,760
we can switch to the next presentation

698
00:29:49,760 --> 00:29:50,559
which is the

699
00:29:50,559 --> 00:29:54,000
group score document

700
00:29:54,000 --> 00:30:08,480
and i take that one

701
00:30:08,480 --> 00:30:10,480
right yeah this is an update on the

702
00:30:10,480 --> 00:30:11,600
group of score draft

703
00:30:11,600 --> 00:30:13,600
now revision 11 was submitted by the

704
00:30:13,600 --> 00:30:14,799
cutoff

705
00:30:14,799 --> 00:30:17,600
next slide please

706
00:30:18,640 --> 00:30:21,440
all right uh this latest version was

707
00:30:21,440 --> 00:30:22,960
mostly about addressing

708
00:30:22,960 --> 00:30:25,440
a very good and useful review that we

709
00:30:25,440 --> 00:30:26,799
got from christian on

710
00:30:26,799 --> 00:30:29,520
version 10 thank you very much for that

711
00:30:29,520 --> 00:30:31,760
and a number of other points we

712
00:30:31,760 --> 00:30:34,240
discussed and agreed on at the november

713
00:30:34,240 --> 00:30:35,039
meeting uh

714
00:30:35,039 --> 00:30:38,000
last year following that uh we think we

715
00:30:38,000 --> 00:30:38,640
have still

716
00:30:38,640 --> 00:30:41,200
two open points that i will overview

717
00:30:41,200 --> 00:30:42,399
shortly later

718
00:30:42,399 --> 00:30:44,000
uh one discussed with christian during

719
00:30:44,000 --> 00:30:46,080
the hackathon about admitting

720
00:30:46,080 --> 00:30:48,960
uh the recycling of group ids in the

721
00:30:48,960 --> 00:30:50,159
same group

722
00:30:50,159 --> 00:30:52,559
and one related to a comment we got from

723
00:30:52,559 --> 00:30:54,399
ben cadoc on the list about the current

724
00:30:54,399 --> 00:30:55,200
usage of

725
00:30:55,200 --> 00:30:57,360
identity keys for both signing and

726
00:30:57,360 --> 00:30:58,559
diffie-hellman

727
00:30:58,559 --> 00:31:04,480
operations next slide please

728
00:31:04,480 --> 00:31:06,559
right first of all we eventually

729
00:31:06,559 --> 00:31:08,000
converge to a

730
00:31:08,000 --> 00:31:10,880
single and simpler format of external

731
00:31:10,880 --> 00:31:11,760
led

732
00:31:11,760 --> 00:31:14,080
to be used both for the encrypting and

733
00:31:14,080 --> 00:31:15,840
designing operations

734
00:31:15,840 --> 00:31:18,640
and in simplifying it we remove the used

735
00:31:18,640 --> 00:31:19,120
to be

736
00:31:19,120 --> 00:31:22,320
par counter sign key

737
00:31:22,320 --> 00:31:25,519
as inner inner element describing the

738
00:31:25,519 --> 00:31:26,559
algorithms

739
00:31:26,559 --> 00:31:28,159
uh used in the group or actually the

740
00:31:28,159 --> 00:31:29,840
property of the key type

741
00:31:29,840 --> 00:31:31,919
and this is also a much more consistent

742
00:31:31,919 --> 00:31:34,320
and aligned with the common context

743
00:31:34,320 --> 00:31:36,480
we also clarified why we are introducing

744
00:31:36,480 --> 00:31:37,840
the last two

745
00:31:37,840 --> 00:31:40,880
elements of the array in the first place

746
00:31:40,880 --> 00:31:42,960
so this is what the document body says

747
00:31:42,960 --> 00:31:44,720
and it works right away with all the

748
00:31:44,720 --> 00:31:46,320
algorithms we have registered

749
00:31:46,320 --> 00:31:49,360
in cozy today but also based on the

750
00:31:49,360 --> 00:31:51,440
discussion at the november meeting

751
00:31:51,440 --> 00:31:54,559
we added a new appendix providing a

752
00:31:54,559 --> 00:31:55,600
general

753
00:31:55,600 --> 00:31:58,640
template to follow to build the par

754
00:31:58,640 --> 00:32:00,320
counter sign parameter

755
00:32:00,320 --> 00:32:02,320
in the external led and the

756
00:32:02,320 --> 00:32:04,320
corresponding parameter

757
00:32:04,320 --> 00:32:07,519
in the common context uh for the future

758
00:32:07,519 --> 00:32:09,840
case when possibly more cosy algorithms

759
00:32:09,840 --> 00:32:11,600
will be registered

760
00:32:11,600 --> 00:32:15,279
with zero or more than one capabilities

761
00:32:15,279 --> 00:32:17,120
so it's essentially just a future

762
00:32:17,120 --> 00:32:18,960
friendly to be followed and

763
00:32:18,960 --> 00:32:20,880
if you take it and use it today with the

764
00:32:20,880 --> 00:32:22,880
algorithms registered today

765
00:32:22,880 --> 00:32:24,640
you end up with the main definitions

766
00:32:24,640 --> 00:32:28,720
that are already in the document body

767
00:32:28,720 --> 00:32:31,519
next slide please

768
00:32:32,000 --> 00:32:34,320
okay then we also realized that it was

769
00:32:34,320 --> 00:32:35,519
possible to

770
00:32:35,519 --> 00:32:38,720
optimize a little bit response messages

771
00:32:38,720 --> 00:32:42,240
uh by not necessarily including uh

772
00:32:42,240 --> 00:32:45,600
the kid in the oscar option uh of such

773
00:32:45,600 --> 00:32:46,399
messages

774
00:32:46,399 --> 00:32:49,120
the kd must still be included in the

775
00:32:49,120 --> 00:32:49,840
response

776
00:32:49,840 --> 00:32:52,640
uh if the respond is intended to a

777
00:32:52,640 --> 00:32:53,679
request

778
00:32:53,679 --> 00:32:55,840
that was protected in group mode because

779
00:32:55,840 --> 00:32:57,760
the responder could be any of the server

780
00:32:57,760 --> 00:32:59,200
in the group

781
00:32:59,200 --> 00:33:01,519
uh but otherwise the exact mode used to

782
00:33:01,519 --> 00:33:03,279
protect the response

783
00:33:03,279 --> 00:33:06,240
doesn't really matter and that

784
00:33:06,240 --> 00:33:07,039
especially

785
00:33:07,039 --> 00:33:09,519
when the pairwise mod is used allows the

786
00:33:09,519 --> 00:33:10,399
save

787
00:33:10,399 --> 00:33:13,440
uh pretty much buys on the wire

788
00:33:13,440 --> 00:33:16,080
and we also relaxed the rules uh that

789
00:33:16,080 --> 00:33:16,480
were

790
00:33:16,480 --> 00:33:18,320
previously preventing recycling center

791
00:33:18,320 --> 00:33:20,240
ids all together in the group

792
00:33:20,240 --> 00:33:23,360
uh well now it's forbidden only uh under

793
00:33:23,360 --> 00:33:24,240
the same

794
00:33:24,240 --> 00:33:26,640
group id if that changes because of the

795
00:33:26,640 --> 00:33:28,080
group ranking

796
00:33:28,080 --> 00:33:30,960
uh it's possible to reuse sender ids

797
00:33:30,960 --> 00:33:31,360
under

798
00:33:31,360 --> 00:33:34,000
the new group id and according to all

799
00:33:34,000 --> 00:33:35,760
the changes i mentioned so far we have

800
00:33:35,760 --> 00:33:36,240
also

801
00:33:36,240 --> 00:33:38,720
of course updated the uh examples of

802
00:33:38,720 --> 00:33:42,240
protected messages in the draft

803
00:33:42,240 --> 00:33:45,840
next please uh

804
00:33:45,840 --> 00:33:48,159
right this is very much following

805
00:33:48,159 --> 00:33:50,640
christian's comment

806
00:33:50,640 --> 00:33:54,080
we we try to improve also um

807
00:33:54,080 --> 00:33:56,240
the reasons why there there may be a

808
00:33:56,240 --> 00:33:57,679
loss uh

809
00:33:57,679 --> 00:34:01,039
even if partially of a security context

810
00:34:01,039 --> 00:34:02,880
in case due to memory limitation

811
00:34:02,880 --> 00:34:05,679
eventually um

812
00:34:05,679 --> 00:34:07,440
a node in the group which is the maximum

813
00:34:07,440 --> 00:34:09,679
amount of recipient contexts that it can

814
00:34:09,679 --> 00:34:10,239
have

815
00:34:10,239 --> 00:34:12,960
so if one more has to be created it has

816
00:34:12,960 --> 00:34:13,679
to

817
00:34:13,679 --> 00:34:16,239
to delete an old one to to leave room

818
00:34:16,239 --> 00:34:17,760
for the new one

819
00:34:17,760 --> 00:34:20,399
but the moment this happens uh from now

820
00:34:20,399 --> 00:34:20,960
on

821
00:34:20,960 --> 00:34:23,760
any newly created recipient context will

822
00:34:23,760 --> 00:34:25,599
be created with an invalid

823
00:34:25,599 --> 00:34:28,560
replay window that has to be fixed

824
00:34:28,560 --> 00:34:29,839
assuming uh

825
00:34:29,839 --> 00:34:31,599
replay checks are still important and

826
00:34:31,599 --> 00:34:33,119
they are

827
00:34:33,119 --> 00:34:35,918
and in order to do that well uh either

828
00:34:35,918 --> 00:34:38,320
uh the node in question participates to

829
00:34:38,320 --> 00:34:41,199
a group for king uh which of course

830
00:34:41,199 --> 00:34:43,199
results in changing its sender id

831
00:34:43,199 --> 00:34:46,320
uh sorry is sequence number reset or it

832
00:34:46,320 --> 00:34:48,079
has to run a proper uh

833
00:34:48,079 --> 00:34:50,079
exchange like with the echo option as

834
00:34:50,079 --> 00:34:51,918
with defining appendix e

835
00:34:51,918 --> 00:34:53,918
and as a positive side effect you also

836
00:34:53,918 --> 00:34:55,839
get a freshness of

837
00:34:55,839 --> 00:34:57,839
the just received request that that was

838
00:34:57,839 --> 00:34:59,520
resulting into

839
00:34:59,520 --> 00:35:02,720
the university and context this was also

840
00:35:02,720 --> 00:35:04,640
an opportunity to make it even clearer

841
00:35:04,640 --> 00:35:06,720
that

842
00:35:06,720 --> 00:35:09,119
remaining able or becoming again able to

843
00:35:09,119 --> 00:35:11,040
enforce anti-replay

844
00:35:11,040 --> 00:35:13,119
and achieving freshness are a few

845
00:35:13,119 --> 00:35:14,560
different things

846
00:35:14,560 --> 00:35:18,720
and freshness is the one

847
00:35:18,720 --> 00:35:20,320
related to achieving synchronizations

848
00:35:20,320 --> 00:35:21,760
with the sequence number of clients

849
00:35:21,760 --> 00:35:23,200
which can be achieved

850
00:35:23,200 --> 00:35:25,520
uh using for instance the the echo

851
00:35:25,520 --> 00:35:27,760
exchange

852
00:35:27,760 --> 00:35:31,359
next slide please

853
00:35:31,359 --> 00:35:34,720
uh right some editorial changes

854
00:35:34,720 --> 00:35:37,200
is still pretty major i'll say we

855
00:35:37,200 --> 00:35:39,280
reorganized a lot the section uh

856
00:35:39,280 --> 00:35:40,640
discussing in fact

857
00:35:40,640 --> 00:35:44,400
uh the loss or partial loss of security

858
00:35:44,400 --> 00:35:45,920
context trying to

859
00:35:45,920 --> 00:35:47,760
uh to express in a much clearer way the

860
00:35:47,760 --> 00:35:48,960
pattern uh

861
00:35:48,960 --> 00:35:52,800
cause effect uh causes can in fact be a

862
00:35:52,800 --> 00:35:54,720
loss of mutable security context because

863
00:35:54,720 --> 00:35:55,520
for instance of

864
00:35:55,520 --> 00:35:58,560
rebooting because the

865
00:35:58,560 --> 00:36:00,400
the maximum number of recipient contacts

866
00:36:00,400 --> 00:36:02,480
have been reached or the exception or

867
00:36:02,480 --> 00:36:04,240
send the sequence number

868
00:36:04,240 --> 00:36:07,599
and the effect would be of course to uh

869
00:36:07,599 --> 00:36:10,560
request new uh key material for from the

870
00:36:10,560 --> 00:36:12,400
group manager that can just be end up in

871
00:36:12,400 --> 00:36:14,800
getting a new sender id

872
00:36:14,800 --> 00:36:17,119
uh but in a way or another this node

873
00:36:17,119 --> 00:36:17,920
will reset

874
00:36:17,920 --> 00:36:20,320
its sender sequence number anything will

875
00:36:20,320 --> 00:36:22,640
be adjusted again

876
00:36:22,640 --> 00:36:25,520
uh section nine defining the pairwise

877
00:36:25,520 --> 00:36:26,240
mod was

878
00:36:26,240 --> 00:36:28,480
essentially rewritten of course to keep

879
00:36:28,480 --> 00:36:30,079
the same mechanics

880
00:36:30,079 --> 00:36:31,839
but now it's written as a delta from the

881
00:36:31,839 --> 00:36:33,440
oscar rfc

882
00:36:33,440 --> 00:36:37,359
as christian also requested adding also

883
00:36:37,359 --> 00:36:39,599
a small number of things picked up from

884
00:36:39,599 --> 00:36:40,800
this document again

885
00:36:40,800 --> 00:36:42,880
and it's group mode especially when it's

886
00:36:42,880 --> 00:36:44,960
about support for

887
00:36:44,960 --> 00:36:48,640
observe and for synchronization and

888
00:36:48,640 --> 00:36:49,839
achieving freshness

889
00:36:49,839 --> 00:36:52,880
now we have only the echo exchange

890
00:36:52,880 --> 00:36:54,160
approach

891
00:36:54,160 --> 00:36:56,560
as appendix c while we just removed the

892
00:36:56,560 --> 00:36:57,599
other previously

893
00:36:57,599 --> 00:36:59,520
included approaches as they simply

894
00:36:59,520 --> 00:37:01,760
became when thinking more

895
00:37:01,760 --> 00:37:04,480
more about them

896
00:37:04,800 --> 00:37:09,200
next please all right uh the first of

897
00:37:09,200 --> 00:37:09,680
the two

898
00:37:09,680 --> 00:37:12,880
open points uh first of all as related

899
00:37:12,880 --> 00:37:14,960
uh we realized uh something we

900
00:37:14,960 --> 00:37:16,800
intended all along is not explicitly

901
00:37:16,800 --> 00:37:18,960
mentioned and it should

902
00:37:18,960 --> 00:37:22,240
um even odd rejoins the group and

903
00:37:22,240 --> 00:37:23,839
when doing so of course it gets a new

904
00:37:23,839 --> 00:37:26,960
sender id it must explicitly terminate

905
00:37:26,960 --> 00:37:27,920
all the

906
00:37:27,920 --> 00:37:30,960
observations it has ongoing and

907
00:37:30,960 --> 00:37:33,119
just as a reminder in fact observations

908
00:37:33,119 --> 00:37:34,400
are supposed to survive

909
00:37:34,400 --> 00:37:37,839
a change a change of

910
00:37:37,839 --> 00:37:41,119
group id you for instance to to a king

911
00:37:41,119 --> 00:37:42,640
in the group

912
00:37:42,640 --> 00:37:44,720
so so far we were forbidding the

913
00:37:44,720 --> 00:37:46,400
recycling of group ids

914
00:37:46,400 --> 00:37:48,000
all together in a group meaning that

915
00:37:48,000 --> 00:37:50,400
groups cannot live forever

916
00:37:50,400 --> 00:37:52,960
and that was forbid the forbidden

917
00:37:52,960 --> 00:37:54,640
especially to avoid a possible problem

918
00:37:54,640 --> 00:37:55,040
with

919
00:37:55,040 --> 00:37:58,079
uh long-living observations in fact

920
00:37:58,079 --> 00:38:00,240
so for instance you can have a a client

921
00:38:00,240 --> 00:38:02,240
see one that starts an observation

922
00:38:02,240 --> 00:38:05,760
with that tuple current gid kid of the

923
00:38:05,760 --> 00:38:06,720
client

924
00:38:06,720 --> 00:38:10,000
uh partially one so to say uh later on

925
00:38:10,000 --> 00:38:12,160
for some reason that same client gets

926
00:38:12,160 --> 00:38:15,839
a new kid totally fine the observation

927
00:38:15,839 --> 00:38:16,720
continues with

928
00:38:16,720 --> 00:38:19,200
the same original tuple then the group

929
00:38:19,200 --> 00:38:20,079
is rekeyed

930
00:38:20,079 --> 00:38:22,800
several times the gid changes because of

931
00:38:22,800 --> 00:38:23,359
that and

932
00:38:23,359 --> 00:38:26,400
eventually the gid drops and gets back

933
00:38:26,400 --> 00:38:26,720
to

934
00:38:26,720 --> 00:38:30,720
gd1 still fine problem is if a new

935
00:38:30,720 --> 00:38:31,520
client

936
00:38:31,520 --> 00:38:34,800
gets accidentally the same kid that

937
00:38:34,800 --> 00:38:37,760
c1 had when he started the observation

938
00:38:37,760 --> 00:38:38,480
and by

939
00:38:38,480 --> 00:38:41,119
really bad luck uh that second client

940
00:38:41,119 --> 00:38:42,079
starts

941
00:38:42,079 --> 00:38:44,079
totally legitimately any observation

942
00:38:44,079 --> 00:38:45,440
with the same tuple

943
00:38:45,440 --> 00:38:46,720
and now you have troubles because you

944
00:38:46,720 --> 00:38:49,200
can have one notification that matches

945
00:38:49,200 --> 00:38:52,480
either observation which is bad

946
00:38:52,480 --> 00:38:54,560
so we had to solve this problem uh to

947
00:38:54,560 --> 00:38:57,440
admit recycling of group ids

948
00:38:57,440 --> 00:39:01,440
and next slide please we discussed about

949
00:39:01,440 --> 00:39:02,800
this during the acaton

950
00:39:02,800 --> 00:39:05,760
and we found a way to to fix this it's

951
00:39:05,760 --> 00:39:07,839
sufficient to introduce a little more

952
00:39:07,839 --> 00:39:08,640
logic

953
00:39:08,640 --> 00:39:11,920
on the group manager uh basically when a

954
00:39:11,920 --> 00:39:12,320
node

955
00:39:12,320 --> 00:39:14,160
joins and gets back from the group

956
00:39:14,160 --> 00:39:16,320
manager the group id to consider in the

957
00:39:16,320 --> 00:39:16,640
group

958
00:39:16,640 --> 00:39:20,240
at that moment the group manager

959
00:39:20,240 --> 00:39:24,000
stores for long term that group id as

960
00:39:24,000 --> 00:39:27,520
the perth gid of that node

961
00:39:27,520 --> 00:39:30,000
and same for other journey nodes so say

962
00:39:30,000 --> 00:39:31,359
at some point the group manager for

963
00:39:31,359 --> 00:39:33,440
whatever reason has to rekey the group

964
00:39:33,440 --> 00:39:36,560
and distribute a new gid the group

965
00:39:36,560 --> 00:39:37,760
manager checks

966
00:39:37,760 --> 00:39:40,800
uh if any current group member has as

967
00:39:40,800 --> 00:39:42,560
its birth g id

968
00:39:42,560 --> 00:39:45,040
the new gid to be assigned to the group

969
00:39:45,040 --> 00:39:46,880
uh if that's the case well

970
00:39:46,880 --> 00:39:48,640
uh the group rakhine that the group

971
00:39:48,640 --> 00:39:50,320
manager is going to perform will take

972
00:39:50,320 --> 00:39:52,240
that into account and it will rekey the

973
00:39:52,240 --> 00:39:53,440
group in a way that

974
00:39:53,440 --> 00:39:56,560
those nodes are excluded logically

975
00:39:56,560 --> 00:39:58,880
so they are locked out they will start

976
00:39:58,880 --> 00:40:00,880
not being able to decrypt any further

977
00:40:00,880 --> 00:40:01,599
message

978
00:40:01,599 --> 00:40:03,839
eventually they will just get back to

979
00:40:03,839 --> 00:40:05,520
the group manager to ask for

980
00:40:05,520 --> 00:40:07,760
a current key material and they will get

981
00:40:07,760 --> 00:40:09,599
back error responses because they are

982
00:40:09,599 --> 00:40:12,079
not members anymore

983
00:40:12,079 --> 00:40:14,880
eventually they will rejoin and if they

984
00:40:14,880 --> 00:40:16,319
do so

985
00:40:16,319 --> 00:40:18,880
they get a new sender id and they reset

986
00:40:18,880 --> 00:40:20,240
their certain sequence number

987
00:40:20,240 --> 00:40:22,160
and they have to kill their ongoing

988
00:40:22,160 --> 00:40:23,359
observations

989
00:40:23,359 --> 00:40:26,400
and the original problem that

990
00:40:26,400 --> 00:40:28,560
forced us to forbid group id recycling

991
00:40:28,560 --> 00:40:30,079
would be gone

992
00:40:30,079 --> 00:40:32,400
and bottom line then with this little

993
00:40:32,400 --> 00:40:33,760
addition

994
00:40:33,760 --> 00:40:36,560
on the group manager groups can live

995
00:40:36,560 --> 00:40:37,599
forever

996
00:40:37,599 --> 00:40:41,920
if we didn't miss any detail here

997
00:40:41,920 --> 00:40:45,040
so there be any objection in introducing

998
00:40:45,040 --> 00:40:53,839
this update to admit long live

999
00:41:00,560 --> 00:41:01,680
what are you saying is that you actually

1000
00:41:01,680 --> 00:41:05,200
keeping track of group members

1001
00:41:05,200 --> 00:41:07,599
uh for the purpose i mean in in terms of

1002
00:41:07,599 --> 00:41:08,319
the birth

1003
00:41:08,319 --> 00:41:11,359
gid then for the for the purpose when

1004
00:41:11,359 --> 00:41:11,680
they

1005
00:41:11,680 --> 00:41:13,920
later rejoin if they are if there are

1006
00:41:13,920 --> 00:41:14,720
conflicts

1007
00:41:14,720 --> 00:41:16,560
so you you can handle those later or

1008
00:41:16,560 --> 00:41:18,480
what or how does this solve

1009
00:41:18,480 --> 00:41:20,640
you check the conflict the moment you

1010
00:41:20,640 --> 00:41:21,680
want to rekey

1011
00:41:21,680 --> 00:41:24,720
anyway for whatever reason and you see

1012
00:41:24,720 --> 00:41:26,480
if the new group id you are going to

1013
00:41:26,480 --> 00:41:27,200
give

1014
00:41:27,200 --> 00:41:29,359
is the birth jetty of any of the current

1015
00:41:29,359 --> 00:41:30,720
group members

1016
00:41:30,720 --> 00:41:32,640
then you have a problem and you need to

1017
00:41:32,640 --> 00:41:35,839
exclude those members

1018
00:41:36,160 --> 00:41:39,599
yeah okay but they will rejoin

1019
00:41:39,599 --> 00:41:43,040
and then the problem will be gone

1020
00:41:43,040 --> 00:41:47,040
yes okay so you push the problem to the

1021
00:41:47,040 --> 00:41:48,800
group manager

1022
00:41:48,800 --> 00:41:51,200
essentially and by the way this applies

1023
00:41:51,200 --> 00:41:52,800
to group members that are in the group

1024
00:41:52,800 --> 00:41:54,800
for a very very

1025
00:41:54,800 --> 00:41:57,359
long while to be witness of a round of

1026
00:41:57,359 --> 00:41:59,920
group id

1027
00:42:00,480 --> 00:42:01,599
yeah yeah i understand it's according

1028
00:42:01,599 --> 00:42:03,680
case but still

1029
00:42:03,680 --> 00:42:07,598
okay thanks thank you

1030
00:42:08,560 --> 00:42:13,279
okay uh next slide please

1031
00:42:14,400 --> 00:42:17,280
second and last uh open point uh not at

1032
00:42:17,280 --> 00:42:19,440
all less important uh this was raised by

1033
00:42:19,440 --> 00:42:20,240
ben keduck

1034
00:42:20,240 --> 00:42:23,680
uh on the list um supporting the

1035
00:42:23,680 --> 00:42:24,720
pairwise mode

1036
00:42:24,720 --> 00:42:26,640
uh here we are essentially using the

1037
00:42:26,640 --> 00:42:28,319
same identity key

1038
00:42:28,319 --> 00:42:31,760
for two uh for two possible usages

1039
00:42:31,760 --> 00:42:33,920
uh one is well signing messages in group

1040
00:42:33,920 --> 00:42:36,240
mode and one is deriving a different man

1041
00:42:36,240 --> 00:42:37,920
secret to be used to generate

1042
00:42:37,920 --> 00:42:41,440
the pairwise keys and overall uh

1043
00:42:41,440 --> 00:42:43,359
it's all about the same single policy

1044
00:42:43,359 --> 00:42:45,280
protected communication in the group

1045
00:42:45,280 --> 00:42:48,079
uh with the value security context but

1046
00:42:48,079 --> 00:42:49,920
still this this double use is not

1047
00:42:49,920 --> 00:42:50,880
exactly

1048
00:42:50,880 --> 00:42:52,960
a common best practice so if you go for

1049
00:42:52,960 --> 00:42:54,160
it you really need to

1050
00:42:54,160 --> 00:42:56,160
to to prove that what you are doing is

1051
00:42:56,160 --> 00:42:57,280
secure

1052
00:42:57,280 --> 00:43:00,240
and there is in fact ongoing uh work to

1053
00:43:00,240 --> 00:43:01,040
prove that

1054
00:43:01,040 --> 00:43:04,240
uh possibly with some minor uh minor

1055
00:43:04,240 --> 00:43:05,119
addition in

1056
00:43:05,119 --> 00:43:07,760
in the exact derivation step uh this is

1057
00:43:07,760 --> 00:43:08,720
in fact secure

1058
00:43:08,720 --> 00:43:12,079
at least for group of score and the

1059
00:43:12,079 --> 00:43:13,920
the ongoing proof is uh trying to be

1060
00:43:13,920 --> 00:43:15,520
built on the paper we're already

1061
00:43:15,520 --> 00:43:17,520
referring that

1062
00:43:17,520 --> 00:43:20,400
was focusing on the ecis settings

1063
00:43:20,400 --> 00:43:22,560
although it was not limited to that so

1064
00:43:22,560 --> 00:43:25,200
that proof can in principle be readapted

1065
00:43:25,200 --> 00:43:28,400
uh to be valid for for a group of score

1066
00:43:28,400 --> 00:43:30,960
and just as a note the the pairwise mod

1067
00:43:30,960 --> 00:43:32,400
per se is actually um

1068
00:43:32,400 --> 00:43:35,200
all fine uh the the comment here is on

1069
00:43:35,200 --> 00:43:36,319
the actual

1070
00:43:36,319 --> 00:43:39,359
uh double use of the same key

1071
00:43:39,359 --> 00:43:43,280
in the process of key derivation so um

1072
00:43:43,280 --> 00:43:45,280
just to be on the safe side uh there

1073
00:43:45,280 --> 00:43:47,040
would be an alternative although

1074
00:43:47,040 --> 00:43:49,119
uh inconvenient to make this a key

1075
00:43:49,119 --> 00:43:51,200
provisioning problem and just go for

1076
00:43:51,200 --> 00:43:53,680
two separate keys one for signing and

1077
00:43:53,680 --> 00:43:54,880
one for defeatment

1078
00:43:54,880 --> 00:43:57,200
but they would be just inconvenient and

1079
00:43:57,200 --> 00:43:59,599
the last resort because you'd mean

1080
00:43:59,599 --> 00:44:01,119
more provisioning and more storage

1081
00:44:01,119 --> 00:44:03,119
overhead with the provisioning most

1082
00:44:03,119 --> 00:44:04,240
likely to happen

1083
00:44:04,240 --> 00:44:07,359
in the ace document defining

1084
00:44:07,359 --> 00:44:08,960
the joining and the key provisioning

1085
00:44:08,960 --> 00:44:10,720
with the group manager

1086
00:44:10,720 --> 00:44:13,839
so there is work ongoing on this and we

1087
00:44:13,839 --> 00:44:14,480
should be

1088
00:44:14,480 --> 00:44:16,480
able to come back on that in the coming

1089
00:44:16,480 --> 00:44:18,800
months

1090
00:44:20,720 --> 00:44:22,960
okay next slide please we should really

1091
00:44:22,960 --> 00:44:25,440
be the rope up

1092
00:44:25,440 --> 00:44:28,560
yeah next steps are addressing both two

1093
00:44:28,560 --> 00:44:29,440
open points

1094
00:44:29,440 --> 00:44:32,800
uh in version 12 submitted hopefully

1095
00:44:32,800 --> 00:44:35,760
having addressed both of them in a good

1096
00:44:35,760 --> 00:44:36,640
enough way

1097
00:44:36,640 --> 00:44:39,839
and most likely that version would be a

1098
00:44:39,839 --> 00:44:42,079
candidate to be considered to be stable

1099
00:44:42,079 --> 00:44:51,839
to move on

1100
00:45:02,839 --> 00:45:04,400
please you're

1101
00:45:04,400 --> 00:45:07,359
probably muted yeah yeah i was talking

1102
00:45:07,359 --> 00:45:07,839
um

1103
00:45:07,839 --> 00:45:10,319
so how is how is this draft aligned with

1104
00:45:10,319 --> 00:45:11,520
the co-op

1105
00:45:11,520 --> 00:45:14,800
group com is there any reason to to move

1106
00:45:14,800 --> 00:45:15,520
this

1107
00:45:15,520 --> 00:45:18,160
before the sort of co-op group

1108
00:45:18,160 --> 00:45:20,160
commission the same

1109
00:45:20,160 --> 00:45:22,960
they are actually referring each other

1110
00:45:22,960 --> 00:45:24,160
normatively so

1111
00:45:24,160 --> 00:45:27,759
they really have to go together

1112
00:45:28,319 --> 00:45:31,520
more or less so it will be this draft

1113
00:45:31,520 --> 00:45:32,560
will sit and wait

1114
00:45:32,560 --> 00:45:35,920
in in in the working group before uh

1115
00:45:35,920 --> 00:45:39,760
until the other draft is is ready

1116
00:45:39,839 --> 00:45:42,079
uh yeah the same can can be true for the

1117
00:45:42,079 --> 00:45:43,920
other one depending on which one is

1118
00:45:43,920 --> 00:45:46,160
finished first

1119
00:45:46,160 --> 00:45:48,000
okay so what do you mean by ready to

1120
00:45:48,000 --> 00:45:52,079
move on uh what is the meaning of that

1121
00:45:52,160 --> 00:45:55,760
okay but will you do that before the um

1122
00:45:55,760 --> 00:45:57,280
before the group come is in the same

1123
00:45:57,280 --> 00:45:59,920
state the original idea was to request

1124
00:45:59,920 --> 00:46:03,040
publication for both of them together

1125
00:46:03,040 --> 00:46:06,079
yeah cause after all yes

1126
00:46:06,079 --> 00:46:09,200
okay good then i know thank you thank

1127
00:46:09,200 --> 00:46:10,880
you

1128
00:46:10,880 --> 00:46:14,000
esko yeah i just question

1129
00:46:14,000 --> 00:46:17,440
you you mentioned doing the the proof

1130
00:46:17,440 --> 00:46:20,720
uh for this uh usage of the key for two

1131
00:46:20,720 --> 00:46:22,640
purposes

1132
00:46:22,640 --> 00:46:26,079
are you going to wait basically until uh

1133
00:46:26,079 --> 00:46:28,319
that paper is for example accepted and

1134
00:46:28,319 --> 00:46:30,160
reviewed

1135
00:46:30,160 --> 00:46:32,880
uh before moving on this draft or is it

1136
00:46:32,880 --> 00:46:35,440
kind of independent

1137
00:46:35,440 --> 00:46:38,720
uh it's in between uh it's an ongoing

1138
00:46:38,720 --> 00:46:39,680
research effort

1139
00:46:39,680 --> 00:46:42,079
and ericsson actually so probably euron

1140
00:46:42,079 --> 00:46:45,200
can give more details

1141
00:46:46,560 --> 00:46:49,839
so there is already a

1142
00:46:49,839 --> 00:46:53,280
a draft of a paper which

1143
00:46:53,280 --> 00:46:56,560
is intended to be a pre-print this is

1144
00:46:56,560 --> 00:46:58,000
a colleague of mine who's been working

1145
00:46:58,000 --> 00:47:00,480
on that and

1146
00:47:00,480 --> 00:47:03,040
whether that's going to be a published

1147
00:47:03,040 --> 00:47:03,520
paper

1148
00:47:03,520 --> 00:47:05,440
or just a sort of a preprint it's it's

1149
00:47:05,440 --> 00:47:06,720
basically

1150
00:47:06,720 --> 00:47:08,640
building on other papers and putting

1151
00:47:08,640 --> 00:47:11,119
things together so so it's

1152
00:47:11,119 --> 00:47:13,520
that i mean this particular researcher

1153
00:47:13,520 --> 00:47:14,240
asked if

1154
00:47:14,240 --> 00:47:16,960
is this uh do we really need to publish

1155
00:47:16,960 --> 00:47:18,480
this or is it just do we

1156
00:47:18,480 --> 00:47:20,400
could we have this as a as a note

1157
00:47:20,400 --> 00:47:22,800
basically but it's obviously good

1158
00:47:22,800 --> 00:47:26,079
if we get some some review on that uh

1159
00:47:26,079 --> 00:47:28,880
on that proof um so i think that's that

1160
00:47:28,880 --> 00:47:30,160
should be an ambition but i don't think

1161
00:47:30,160 --> 00:47:31,440
the working group

1162
00:47:31,440 --> 00:47:33,440
i mean it's sufficient probably that

1163
00:47:33,440 --> 00:47:34,559
someone

1164
00:47:34,559 --> 00:47:36,640
from from the itf community reviews that

1165
00:47:36,640 --> 00:47:38,000
it doesn't have to be a

1166
00:47:38,000 --> 00:47:41,119
sort of a presented paper at least not

1167
00:47:41,119 --> 00:47:43,760
i don't think that's necessary for for

1168
00:47:43,760 --> 00:47:46,400
progressing

1169
00:47:47,520 --> 00:47:52,720
this draft

1170
00:47:52,720 --> 00:47:55,040
thanks

1171
00:47:57,040 --> 00:48:00,240
thank you so if there are no other

1172
00:48:00,240 --> 00:48:01,920
comments we can move on

1173
00:48:01,920 --> 00:48:05,359
to the next document we should be

1174
00:48:05,359 --> 00:48:07,520
your score discovery with christian

1175
00:48:07,520 --> 00:48:09,119
presenting

1176
00:48:09,119 --> 00:48:11,520
just as a time check we are plus eight

1177
00:48:11,520 --> 00:48:13,760
minutes but we have ten minutes of flex

1178
00:48:13,760 --> 00:48:15,599
time so overall we are still

1179
00:48:15,599 --> 00:48:20,160
fine i'll try to keep it crisp

1180
00:48:20,160 --> 00:48:23,440
so this is about how can uh how can

1181
00:48:23,440 --> 00:48:25,280
a device that is supposed to be in a

1182
00:48:25,280 --> 00:48:26,960
group discover all the details that it

1183
00:48:26,960 --> 00:48:28,640
needs to join the group

1184
00:48:28,640 --> 00:48:30,720
um just next slide please giving a brief

1185
00:48:30,720 --> 00:48:32,640
recap um the device

1186
00:48:32,640 --> 00:48:36,160
may only know the the key material or

1187
00:48:36,160 --> 00:48:37,359
may not only know

1188
00:48:37,359 --> 00:48:38,800
something about the group manager but

1189
00:48:38,800 --> 00:48:40,480
not the full joining resource and the

1190
00:48:40,480 --> 00:48:42,640
group manager may not even be here yet

1191
00:48:42,640 --> 00:48:48,319
so this is using um the regular um

1192
00:48:48,319 --> 00:48:50,400
mechanisms we have in co-op with a focus

1193
00:48:50,400 --> 00:48:52,640
on the resource directory that

1194
00:48:52,640 --> 00:48:56,079
makes the whole process more efficient

1195
00:48:56,079 --> 00:48:58,240
throughout research lookup it receives

1196
00:48:58,240 --> 00:48:59,839
where the where the particular

1197
00:48:59,839 --> 00:49:02,400
joint joint joining node is on the group

1198
00:49:02,400 --> 00:49:02,960
manager

1199
00:49:02,960 --> 00:49:06,160
to join that to join that um to join

1200
00:49:06,160 --> 00:49:06,960
that group

1201
00:49:06,960 --> 00:49:09,839
next slide please we've updated the

1202
00:49:09,839 --> 00:49:11,280
document recently

1203
00:49:11,280 --> 00:49:14,079
to reflect to lastly reflect changes in

1204
00:49:14,079 --> 00:49:16,319
in other parts of the ecosystem

1205
00:49:16,319 --> 00:49:20,079
it's now well aligned with with all

1206
00:49:20,079 --> 00:49:21,200
most of the documents that it's

1207
00:49:21,200 --> 00:49:23,359
referring to the um

1208
00:49:23,359 --> 00:49:25,119
there are a few new target attributes

1209
00:49:25,119 --> 00:49:27,760
that are that allow the

1210
00:49:27,760 --> 00:49:30,720
joining node to identify in advance the

1211
00:49:30,720 --> 00:49:32,559
possible groups that it could join

1212
00:49:32,559 --> 00:49:34,800
and to see how it would join them so

1213
00:49:34,800 --> 00:49:36,400
making the drawing processing itself

1214
00:49:36,400 --> 00:49:38,640
more efficient

1215
00:49:38,640 --> 00:49:41,839
um there is now a document format

1216
00:49:41,839 --> 00:49:44,559
and we have additional text that says

1217
00:49:44,559 --> 00:49:45,200
that

1218
00:49:45,200 --> 00:49:48,720
there are um parties looking this up

1219
00:49:48,720 --> 00:49:50,800
may not necessarily be joining in full

1220
00:49:50,800 --> 00:49:52,640
but they could also be gateways just to

1221
00:49:52,640 --> 00:49:54,000
cover the use cases a bit more

1222
00:49:54,000 --> 00:49:55,040
completely

1223
00:49:55,040 --> 00:49:59,359
next slide please

1224
00:49:59,359 --> 00:50:01,599
um our examples are now up to date with

1225
00:50:01,599 --> 00:50:04,000
both the link format and with coral

1226
00:50:04,000 --> 00:50:06,240
and during the um before and during the

1227
00:50:06,240 --> 00:50:08,240
hackathon we've had this running

1228
00:50:08,240 --> 00:50:10,559
on an off-the-shelf resource directory

1229
00:50:10,559 --> 00:50:12,880
and michael performed basically all the

1230
00:50:12,880 --> 00:50:16,160
single steps that are involved in this

1231
00:50:16,160 --> 00:50:18,559
in this process um against the

1232
00:50:18,559 --> 00:50:20,720
resurrectory and i could in parallel

1233
00:50:20,720 --> 00:50:23,119
see how things work from there so it's

1234
00:50:23,119 --> 00:50:24,960
tested and it's tested to an extent

1235
00:50:24,960 --> 00:50:25,839
although not

1236
00:50:25,839 --> 00:50:28,559
from interoperability between one group

1237
00:50:28,559 --> 00:50:30,160
manager from here and another part from

1238
00:50:30,160 --> 00:50:30,720
there

1239
00:50:30,720 --> 00:50:34,240
next slide please the points that we are

1240
00:50:34,240 --> 00:50:35,440
currently working on

1241
00:50:35,440 --> 00:50:37,440
are mainly security considerations most

1242
00:50:37,440 --> 00:50:38,480
of which really

1243
00:50:38,480 --> 00:50:40,000
are inherited from the resource

1244
00:50:40,000 --> 00:50:42,000
directory so of course a

1245
00:50:42,000 --> 00:50:44,480
resource tractor that is um that is not

1246
00:50:44,480 --> 00:50:45,680
fully trusted

1247
00:50:45,680 --> 00:50:47,760
can do all basically can all do all

1248
00:50:47,760 --> 00:50:49,680
those things that it can do that is it

1249
00:50:49,680 --> 00:50:52,480
can hide the presence of a group it can

1250
00:50:52,480 --> 00:50:54,400
give wrong addresses because everything

1251
00:50:54,400 --> 00:50:56,000
that's happening on

1252
00:50:56,000 --> 00:50:58,880
on the on the oscore side is agnostic of

1253
00:50:58,880 --> 00:50:59,440
the

1254
00:50:59,440 --> 00:51:01,040
of the addresses so traffic could be

1255
00:51:01,040 --> 00:51:02,559
redirected even though

1256
00:51:02,559 --> 00:51:06,480
the um the encryption itself would not

1257
00:51:06,480 --> 00:51:07,040
be

1258
00:51:07,040 --> 00:51:09,760
endangered and that's probably the worst

1259
00:51:09,760 --> 00:51:10,559
of those and

1260
00:51:10,559 --> 00:51:12,319
we are still looking into how this is

1261
00:51:12,319 --> 00:51:14,079
best addressed and which attributes this

1262
00:51:14,079 --> 00:51:15,599
needs to be addressed

1263
00:51:15,599 --> 00:51:18,960
um false information obtained by the

1264
00:51:18,960 --> 00:51:20,079
client could lead

1265
00:51:20,079 --> 00:51:22,800
to it using a non-preferred cypher suit

1266
00:51:22,800 --> 00:51:24,000
and this definitely needs to be

1267
00:51:24,000 --> 00:51:25,839
addressed more clearly

1268
00:51:25,839 --> 00:51:28,558
let's start please

1269
00:51:29,200 --> 00:51:31,440
other than that it needs a bit of a bit

1270
00:51:31,440 --> 00:51:32,240
of updates

1271
00:51:32,240 --> 00:51:34,960
referring with respect to the examples

1272
00:51:34,960 --> 00:51:36,240
with the latest resource directory

1273
00:51:36,240 --> 00:51:37,680
changes

1274
00:51:37,680 --> 00:51:40,720
um but most of those are really on

1275
00:51:40,720 --> 00:51:43,440
tasks that can be done in in the course

1276
00:51:43,440 --> 00:51:44,079
of time

1277
00:51:44,079 --> 00:51:47,680
so for us it's really

1278
00:51:47,680 --> 00:51:49,520
really the next step would be to get a

1279
00:51:49,520 --> 00:51:51,920
bit more comments from the working group

1280
00:51:51,920 --> 00:51:53,920
as to is this now something that the

1281
00:51:53,920 --> 00:51:55,599
working group could see

1282
00:51:55,599 --> 00:51:58,480
um could could see is useful to to have

1283
00:51:58,480 --> 00:51:59,920
inside the working group

1284
00:51:59,920 --> 00:52:02,800
or what do we what kind of comments do

1285
00:52:02,800 --> 00:52:04,640
we need to expect when when this is

1286
00:52:04,640 --> 00:52:07,680
moving forward in general next slide

1287
00:52:07,680 --> 00:52:09,280
please

1288
00:52:09,280 --> 00:52:11,599
so that's it from my side thank you

1289
00:52:11,599 --> 00:52:19,839
questions comments

1290
00:52:24,400 --> 00:52:28,720
and nothing on jabber either so

1291
00:52:28,720 --> 00:52:31,440
we can move to the next one um on

1292
00:52:31,440 --> 00:52:34,800
multicast notifications

1293
00:52:36,880 --> 00:52:40,559
which um which like the like the q

1294
00:52:40,559 --> 00:52:42,000
group communication is something that

1295
00:52:42,000 --> 00:52:43,920
i've repeatedly presented here so i'll

1296
00:52:43,920 --> 00:52:47,839
cut the recap short again use case

1297
00:52:47,839 --> 00:52:51,359
so the group communication documents

1298
00:52:51,359 --> 00:52:52,800
we've talked about so far

1299
00:52:52,800 --> 00:52:55,040
are all about the case where request

1300
00:52:55,040 --> 00:52:56,319
goes out to multicast

1301
00:52:56,319 --> 00:52:58,880
and the responses have so far always

1302
00:52:58,880 --> 00:52:59,440
been

1303
00:52:59,440 --> 00:53:02,640
unicast only with this we describe next

1304
00:53:02,640 --> 00:53:03,760
slide please

1305
00:53:03,760 --> 00:53:06,000
how responses can be multicast and where

1306
00:53:06,000 --> 00:53:07,200
this could be useful

1307
00:53:07,200 --> 00:53:10,079
uh which is primarily when a lot of

1308
00:53:10,079 --> 00:53:10,720
parties

1309
00:53:10,720 --> 00:53:12,480
regularly request something and want

1310
00:53:12,480 --> 00:53:13,920
this to have this new

1311
00:53:13,920 --> 00:53:18,000
in an observation um

1312
00:53:18,000 --> 00:53:19,599
where they can all share the data and

1313
00:53:19,599 --> 00:53:21,440
don't have to re to

1314
00:53:21,440 --> 00:53:25,119
register separately next slide please

1315
00:53:25,359 --> 00:53:28,400
um mechanically this happens by having a

1316
00:53:28,400 --> 00:53:28,720
took

1317
00:53:28,720 --> 00:53:31,760
having a token that the server

1318
00:53:31,760 --> 00:53:34,480
that they agree on and the point and the

1319
00:53:34,480 --> 00:53:35,119
and the

1320
00:53:35,119 --> 00:53:37,280
party that makes the final decision is

1321
00:53:37,280 --> 00:53:39,200
the server because it's the

1322
00:53:39,200 --> 00:53:42,800
best point we can come up with

1323
00:53:42,800 --> 00:53:46,000
um with all score this also means that

1324
00:53:46,000 --> 00:53:46,640
they have

1325
00:53:46,640 --> 00:53:49,200
to have a particular request that they

1326
00:53:49,200 --> 00:53:50,640
all refer to because otherwise the

1327
00:53:50,640 --> 00:53:51,839
unprotection

1328
00:53:51,839 --> 00:53:54,839
um would simply not work next slide

1329
00:53:54,839 --> 00:53:56,640
please

1330
00:53:56,640 --> 00:53:58,559
this is all these details are all

1331
00:53:58,559 --> 00:53:59,839
communicated

1332
00:53:59,839 --> 00:54:03,440
in an error response which contain which

1333
00:54:03,440 --> 00:54:05,680
tells the client that i won't answer

1334
00:54:05,680 --> 00:54:07,280
this particular request

1335
00:54:07,280 --> 00:54:10,000
but you can if you had sent if you were

1336
00:54:10,000 --> 00:54:11,520
sending this request

1337
00:54:11,520 --> 00:54:14,640
then you could be observing you could

1338
00:54:14,640 --> 00:54:16,319
receive the notifications on this

1339
00:54:16,319 --> 00:54:18,400
particular token sent to that particular

1340
00:54:18,400 --> 00:54:19,760
multicast address

1341
00:54:19,760 --> 00:54:22,640
and in the protected case with this

1342
00:54:22,640 --> 00:54:25,280
particular external aad

1343
00:54:25,280 --> 00:54:28,000
next slide please

1344
00:54:28,480 --> 00:54:31,599
so what changed in uh since dash of five

1345
00:54:31,599 --> 00:54:32,800
uh since dash

1346
00:54:32,800 --> 00:54:36,160
o5 well not so since before uh

1347
00:54:36,160 --> 00:54:38,559
in the latest revisions is that the

1348
00:54:38,559 --> 00:54:39,520
format we have

1349
00:54:39,520 --> 00:54:42,319
is now a bit more well defined and also

1350
00:54:42,319 --> 00:54:43,680
aligned with the other work

1351
00:54:43,680 --> 00:54:46,799
we've talked about earlier with

1352
00:54:46,799 --> 00:54:49,920
about transport addresses as they would

1353
00:54:49,920 --> 00:54:51,599
be used in proxies for group

1354
00:54:51,599 --> 00:54:53,119
communication which is

1355
00:54:53,119 --> 00:54:55,920
which really need parts of the same data

1356
00:54:55,920 --> 00:54:56,880
so

1357
00:54:56,880 --> 00:54:58,480
aligning this makes it easier for

1358
00:54:58,480 --> 00:55:00,000
implementers to

1359
00:55:00,000 --> 00:55:03,119
to use code here

1360
00:55:03,200 --> 00:55:05,680
um so what it contains is the

1361
00:55:05,680 --> 00:55:07,359
information the the ad the server

1362
00:55:07,359 --> 00:55:08,000
address the

1363
00:55:08,000 --> 00:55:11,040
the group address the token and then

1364
00:55:11,040 --> 00:55:13,040
a request that would the client would

1365
00:55:13,040 --> 00:55:14,160
have needed to send

1366
00:55:14,160 --> 00:55:16,799
and possibly a response so if that last

1367
00:55:16,799 --> 00:55:18,480
notification is not present

1368
00:55:18,480 --> 00:55:21,200
this behaves like in regular co-op an

1369
00:55:21,200 --> 00:55:22,000
observation

1370
00:55:22,000 --> 00:55:25,359
with an empty act yes i heard you

1371
00:55:25,359 --> 00:55:26,960
the observation is fine i just don't

1372
00:55:26,960 --> 00:55:28,960
have data for you if there is data in

1373
00:55:28,960 --> 00:55:29,440
there

1374
00:55:29,440 --> 00:55:32,480
that can be expressed just as well next

1375
00:55:32,480 --> 00:55:35,839
slide please

1376
00:55:35,920 --> 00:55:39,280
um that array is just like in the

1377
00:55:39,280 --> 00:55:42,079
processing case also extensible so if

1378
00:55:42,079 --> 00:55:42,559
the

1379
00:55:42,559 --> 00:55:44,079
currently there is only one transport

1380
00:55:44,079 --> 00:55:46,240
that can handle multicast that is code

1381
00:55:46,240 --> 00:55:47,599
over udp

1382
00:55:47,599 --> 00:55:49,280
which is something that involves a

1383
00:55:49,280 --> 00:55:51,359
server host a server port a client host

1384
00:55:51,359 --> 00:55:53,680
a client port and a token

1385
00:55:53,680 --> 00:55:56,240
if we ever have any other transports

1386
00:55:56,240 --> 00:55:57,200
that

1387
00:55:57,200 --> 00:55:59,440
behave completely differently we have

1388
00:55:59,440 --> 00:56:01,119
the extension point there to say

1389
00:56:01,119 --> 00:56:04,319
protocol say two is or probably some

1390
00:56:04,319 --> 00:56:05,839
higher number because

1391
00:56:05,839 --> 00:56:08,720
proxying would might take um might take

1392
00:56:08,720 --> 00:56:09,200
different

1393
00:56:09,200 --> 00:56:12,000
use different numbers as well that

1394
00:56:12,000 --> 00:56:14,720
number is co-op over

1395
00:56:14,720 --> 00:56:16,400
what's i'm not playing laura i don't

1396
00:56:16,400 --> 00:56:18,160
know

1397
00:56:18,160 --> 00:56:22,160
slightly we are now more explicit

1398
00:56:22,160 --> 00:56:24,880
in that we do not negotiate for this

1399
00:56:24,880 --> 00:56:26,160
feature

1400
00:56:26,160 --> 00:56:27,839
this is something we had in very very

1401
00:56:27,839 --> 00:56:31,200
early drafts um but removed it because

1402
00:56:31,200 --> 00:56:33,680
the use cases that we see are the ones

1403
00:56:33,680 --> 00:56:36,079
where it's not feasible to

1404
00:56:36,079 --> 00:56:39,119
cater for an individual client's request

1405
00:56:39,119 --> 00:56:42,319
so if you do have use k if you do

1406
00:56:42,319 --> 00:56:44,880
see use cases where some clients might

1407
00:56:44,880 --> 00:56:45,920
be

1408
00:56:45,920 --> 00:56:48,000
observing resources individually and

1409
00:56:48,000 --> 00:56:49,760
others might just switch to the large

1410
00:56:49,760 --> 00:56:51,359
pool of multicast recipients

1411
00:56:51,359 --> 00:56:53,920
um please tell us let's talk about it

1412
00:56:53,920 --> 00:56:55,440
and then we can figure out whether this

1413
00:56:55,440 --> 00:56:56,559
is something just

1414
00:56:56,559 --> 00:56:59,440
specify right here or whether this is

1415
00:56:59,440 --> 00:57:01,680
something that still can be addressed in

1416
00:57:01,680 --> 00:57:01,920
a

1417
00:57:01,920 --> 00:57:05,280
in an add-on document uh either way

1418
00:57:05,280 --> 00:57:07,760
the server can announce its support for

1419
00:57:07,760 --> 00:57:10,160
these group observations

1420
00:57:10,160 --> 00:57:12,400
within within with the target attribute

1421
00:57:12,400 --> 00:57:13,440
that we now

1422
00:57:13,440 --> 00:57:16,960
describe other than that we've

1423
00:57:16,960 --> 00:57:20,480
updated um all the examples to

1424
00:57:20,480 --> 00:57:22,640
work correctly with the text that we

1425
00:57:22,640 --> 00:57:26,720
have next slide please

1426
00:57:26,720 --> 00:57:30,400
and also cover

1427
00:57:30,400 --> 00:57:32,640
how this could still be improved by

1428
00:57:32,640 --> 00:57:34,319
using a deterministic request as a

1429
00:57:34,319 --> 00:57:36,000
phantom request

1430
00:57:36,000 --> 00:57:39,119
um thing is um thinking back to the to

1431
00:57:39,119 --> 00:57:40,319
the examples

1432
00:57:40,319 --> 00:57:42,400
uh when you compare them it's like such

1433
00:57:42,400 --> 00:57:44,880
a such an exchange for the unprotected

1434
00:57:44,880 --> 00:57:45,520
case

1435
00:57:45,520 --> 00:57:47,920
and such an exchange for the protected

1436
00:57:47,920 --> 00:57:49,040
case

1437
00:57:49,040 --> 00:57:50,880
this really doesn't go well with the

1438
00:57:50,880 --> 00:57:52,400
story that

1439
00:57:52,400 --> 00:57:54,319
we'd like us to have all score as

1440
00:57:54,319 --> 00:57:55,760
something that you can just

1441
00:57:55,760 --> 00:57:58,319
tag on to co-op and then with a minimal

1442
00:57:58,319 --> 00:57:59,839
overhead that's cryptographically

1443
00:57:59,839 --> 00:58:00,799
feasible

1444
00:58:00,799 --> 00:58:03,440
um do all your exchanges but do them in

1445
00:58:03,440 --> 00:58:05,839
in a protected way

1446
00:58:05,839 --> 00:58:08,000
um by using deterministic requests we

1447
00:58:08,000 --> 00:58:10,480
can get this whole litany of exchanges

1448
00:58:10,480 --> 00:58:12,880
uh down to the complex form that we have

1449
00:58:12,880 --> 00:58:13,680
in the

1450
00:58:13,680 --> 00:58:17,359
unprotected case and

1451
00:58:17,359 --> 00:58:20,319
um just not to forget the point um

1452
00:58:20,319 --> 00:58:22,000
another update we did was

1453
00:58:22,000 --> 00:58:25,359
we now describe better how a group meant

1454
00:58:25,359 --> 00:58:27,280
how a device can act as its own group

1455
00:58:27,280 --> 00:58:29,520
manager for those very simple cases

1456
00:58:29,520 --> 00:58:30,880
where there is no pre-existing

1457
00:58:30,880 --> 00:58:33,760
infrastructure around

1458
00:58:34,240 --> 00:58:37,599
next slide please

1459
00:58:37,599 --> 00:58:41,680
so there's still a bit um work to do in

1460
00:58:41,680 --> 00:58:43,839
giving concrete examples for these

1461
00:58:43,839 --> 00:58:45,119
deterministic cases

1462
00:58:45,119 --> 00:58:48,480
and in exploring a bit further

1463
00:58:48,480 --> 00:58:51,280
how that would work in in a reverse

1464
00:58:51,280 --> 00:58:52,319
proxy case which

1465
00:58:52,319 --> 00:58:55,599
might to some extent also relate to the

1466
00:58:55,599 --> 00:58:58,319
to the reverse proxying work ongoing in

1467
00:58:58,319 --> 00:58:59,839
the

1468
00:58:59,839 --> 00:59:03,040
um with the prop with the general co-op

1469
00:59:03,040 --> 00:59:06,160
multicast proxying document

1470
00:59:06,160 --> 00:59:08,960
um but as with the other document we are

1471
00:59:08,960 --> 00:59:10,559
at a point where we can

1472
00:59:10,559 --> 00:59:14,400
we can still improve things but

1473
00:59:14,400 --> 00:59:17,119
we would be improving those parts can we

1474
00:59:17,119 --> 00:59:18,960
start improving on details

1475
00:59:18,960 --> 00:59:21,440
where i think this can profit this could

1476
00:59:21,440 --> 00:59:22,880
profit a lot from

1477
00:59:22,880 --> 00:59:24,319
more interaction with the working group

1478
00:59:24,319 --> 00:59:26,160
and for people reviews

1479
00:59:26,160 --> 00:59:27,599
possibly in the in the course of a

1480
00:59:27,599 --> 00:59:29,839
working group adoption

1481
00:59:29,839 --> 00:59:33,839
um yeah next slide please so

1482
00:59:34,319 --> 00:59:36,720
this this summarizes what changed here

1483
00:59:36,720 --> 00:59:38,000
and also how we could

1484
00:59:38,000 --> 00:59:40,640
um how we would like to have more input

1485
00:59:40,640 --> 00:59:41,200
from you

1486
00:59:41,200 --> 00:59:43,598
thank you

1487
00:59:44,880 --> 00:59:48,240
please let's go yeah just the question

1488
00:59:48,240 --> 00:59:49,119
um

1489
00:59:49,119 --> 00:59:50,960
on the appendices so there seem to be

1490
00:59:50,960 --> 00:59:52,799
quite quite some appendices

1491
00:59:52,799 --> 00:59:56,319
now uh are these then intended to be

1492
00:59:56,319 --> 00:59:59,200
just examples or clarifications or also

1493
00:59:59,200 --> 01:00:02,319
something normative

1494
01:00:02,319 --> 01:00:05,760
um let me just go through them in

1495
01:00:05,760 --> 01:00:09,839
so most of them are currently examples

1496
01:00:09,839 --> 01:00:13,040
um the the part about the

1497
01:00:13,040 --> 01:00:15,839
uh the deterministic requests is really

1498
01:00:15,839 --> 01:00:16,720
just

1499
01:00:16,720 --> 01:00:19,119
um illustrating how those things

1500
01:00:19,119 --> 01:00:21,119
interact so that there is no

1501
01:00:21,119 --> 01:00:23,200
need for normative inter for any

1502
01:00:23,200 --> 01:00:24,799
normative additions

1503
01:00:24,799 --> 01:00:27,760
but more like more explanation and

1504
01:00:27,760 --> 01:00:29,359
implementation guidance

1505
01:00:29,359 --> 01:00:31,200
especially with deterministic requests

1506
01:00:31,200 --> 01:00:33,200
it helps a lot to

1507
01:00:33,200 --> 01:00:34,720
if you if you're in the right mindset

1508
01:00:34,720 --> 01:00:36,319
then you understand why this

1509
01:00:36,319 --> 01:00:38,480
all works if you if you're viewing it

1510
01:00:38,480 --> 01:00:39,760
from the wrong angle

1511
01:00:39,760 --> 01:00:42,400
then it sounds awfully complicated and

1512
01:00:42,400 --> 01:00:43,520
this is more to

1513
01:00:43,520 --> 01:00:46,799
more to get you on the right track okay

1514
01:00:46,799 --> 01:00:50,319
appendix c is something that would

1515
01:00:50,319 --> 01:00:53,280
probably have normative content but not

1516
01:00:53,280 --> 01:00:54,960
interfering with the

1517
01:00:54,960 --> 01:00:56,880
with the rest of the document but more

1518
01:00:56,880 --> 01:00:58,400
specifying

1519
01:00:58,400 --> 01:01:00,400
registering additional attributes and

1520
01:01:00,400 --> 01:01:02,480
specifying a method

1521
01:01:02,480 --> 01:01:04,720
basically specifying a very simple way

1522
01:01:04,720 --> 01:01:10,079
of managing a group

1523
01:01:10,079 --> 01:01:12,400
thanks

1524
01:01:21,359 --> 01:01:25,839
any more questions

1525
01:01:31,680 --> 01:01:34,799
so what are the main things

1526
01:01:34,799 --> 01:01:37,440
you think are missing here except from i

1527
01:01:37,440 --> 01:01:38,480
mean

1528
01:01:38,480 --> 01:01:40,880
reviewing and and testing this scenario

1529
01:01:40,880 --> 01:01:41,920
what what

1530
01:01:41,920 --> 01:01:44,240
is that is this uh are all the

1531
01:01:44,240 --> 01:01:46,400
components in place now do you think

1532
01:01:46,400 --> 01:01:49,520
the components are in place yes and

1533
01:01:49,520 --> 01:01:52,960
only the details on on exactly how they

1534
01:01:52,960 --> 01:01:54,720
how there are a few details to hammer

1535
01:01:54,720 --> 01:01:56,000
out and

1536
01:01:56,000 --> 01:01:58,960
on on kind of coming back to the part of

1537
01:01:58,960 --> 01:01:59,920
the on the on

1538
01:01:59,920 --> 01:02:02,880
is everything in place like many group

1539
01:02:02,880 --> 01:02:04,559
communication documents this is all

1540
01:02:04,559 --> 01:02:06,880
assuming that the groups are set up and

1541
01:02:06,880 --> 01:02:08,799
that we are starting in this from a

1542
01:02:08,799 --> 01:02:09,760
situation

1543
01:02:09,760 --> 01:02:11,920
where everyone knows which group to be

1544
01:02:11,920 --> 01:02:13,520
in etc etc

1545
01:02:13,520 --> 01:02:16,000
um so possibly there could be

1546
01:02:16,000 --> 01:02:17,520
enhancements there

1547
01:02:17,520 --> 01:02:20,960
um frankly i don't know all the

1548
01:02:20,960 --> 01:02:23,039
documents that are in progress around

1549
01:02:23,039 --> 01:02:24,640
that well enough to

1550
01:02:24,640 --> 01:02:27,039
see whether there are maybe things

1551
01:02:27,039 --> 01:02:28,319
already there that we could just

1552
01:02:28,319 --> 01:02:30,799
reference

1553
01:02:31,839 --> 01:02:34,319
okay so i mean so looking at this from

1554
01:02:34,319 --> 01:02:37,039
this particular piece

1555
01:02:37,039 --> 01:02:40,160
of handling handling the the multicast

1556
01:02:40,160 --> 01:02:42,480
notifications then that this is

1557
01:02:42,480 --> 01:02:46,720
um this is fairly complete in your view

1558
01:02:46,720 --> 01:02:49,280
except for for details and and reviewing

1559
01:02:49,280 --> 01:02:50,160
and testing okay

1560
01:02:50,160 --> 01:02:52,480
thank you

1561
01:02:59,680 --> 01:03:02,799
yeah there was a point on on possible

1562
01:03:02,799 --> 01:03:05,359
adoption in the last slide carson you

1563
01:03:05,359 --> 01:03:16,559
want to take over on that

1564
01:03:16,559 --> 01:03:19,520
yes um

1565
01:03:20,799 --> 01:03:23,760
it takes considerable energy to jug this

1566
01:03:23,760 --> 01:03:26,720
environment i'm sorry

1567
01:03:28,839 --> 01:03:31,839
um

1568
01:03:32,880 --> 01:03:36,240
yeah so we this is a document that is

1569
01:03:36,240 --> 01:03:39,280
uh in version 08

1570
01:03:39,280 --> 01:03:41,680
um sorry for already putting up the next

1571
01:03:41,680 --> 01:03:42,960
set of slides

1572
01:03:42,960 --> 01:03:46,160
um and uh

1573
01:03:46,160 --> 01:03:48,960
there is uh

1574
01:03:49,280 --> 01:03:50,720
sorry carson just to be sure it's the

1575
01:03:50,720 --> 01:03:52,400
right document should be really version

1576
01:03:52,400 --> 01:03:53,359
five

1577
01:03:53,359 --> 01:03:59,760
yes sorry okay i'm very confused here

1578
01:03:59,760 --> 01:04:02,079
yeah so the the multicast notifications

1579
01:04:02,079 --> 01:04:03,119
has been

1580
01:04:03,119 --> 01:04:06,400
discussed uh for a while and

1581
01:04:06,400 --> 01:04:09,599
it's it's a version of five and

1582
01:04:09,599 --> 01:04:13,599
uh what we have to decide as a working

1583
01:04:13,599 --> 01:04:14,000
group

1584
01:04:14,000 --> 01:04:16,240
is is that something that we want to

1585
01:04:16,240 --> 01:04:18,319
work on

1586
01:04:18,319 --> 01:04:22,559
and uh is is the the draft actually

1587
01:04:22,559 --> 01:04:25,440
doing the the right going into the right

1588
01:04:25,440 --> 01:04:26,079
direction

1589
01:04:26,079 --> 01:04:30,079
not is everything already exactly

1590
01:04:30,079 --> 01:04:34,400
like it needs to uh be

1591
01:04:34,400 --> 01:04:37,839
so i'm going to start a poll

1592
01:04:37,839 --> 01:04:55,839
on that

1593
01:04:57,039 --> 01:04:59,440
so please go to the yellow thing at the

1594
01:04:59,440 --> 01:05:01,119
top of your

1595
01:05:01,119 --> 01:05:03,920
window and

1596
01:05:05,680 --> 01:05:08,160
raise hands if you think we should adopt

1597
01:05:08,160 --> 01:05:10,319
it

1598
01:05:20,319 --> 01:05:24,240
okay the numbers still increasing

1599
01:05:30,640 --> 01:05:33,680
okay i think we have reached our

1600
01:05:33,680 --> 01:05:37,760
final count here so we have

1601
01:05:37,760 --> 01:05:42,720
13 people who think we should adopt it

1602
01:05:42,720 --> 01:05:48,480
and now let me ask the

1603
01:05:49,200 --> 01:05:52,559
opposite question so he who would oppose

1604
01:05:52,559 --> 01:05:56,000
adopting this document

1605
01:06:01,119 --> 01:06:03,680
a lot of people make sure it's known

1606
01:06:03,680 --> 01:06:19,839
that they do not oppose it

1607
01:06:24,160 --> 01:06:32,079
okay so the number is still increasing

1608
01:06:32,079 --> 01:06:35,680
okay so um that looks like a pretty good

1609
01:06:35,680 --> 01:06:38,400
in-room consensus and of course the the

1610
01:06:38,400 --> 01:06:39,599
question is

1611
01:06:39,599 --> 01:06:43,920
uh who's going to uh provide

1612
01:06:43,920 --> 01:06:48,000
uh reviews of this

1613
01:06:48,000 --> 01:06:50,799
document can you just use the the shower

1614
01:06:50,799 --> 01:06:51,200
fan

1615
01:06:51,200 --> 01:06:55,200
q thing to indicate if you are

1616
01:06:55,200 --> 01:06:58,839
interested in providing reviews

1617
01:06:58,839 --> 01:07:01,839
esco

1618
01:07:12,839 --> 01:07:15,839
yuan

1619
01:07:16,480 --> 01:07:18,400
okay and let me ask you about the

1620
01:07:18,400 --> 01:07:20,000
implementation

1621
01:07:20,000 --> 01:07:23,599
status who has implemented a version of

1622
01:07:23,599 --> 01:07:25,839
this

1623
01:07:26,960 --> 01:07:31,440
euron no uranus going away

1624
01:07:32,160 --> 01:07:35,839
so who is planning to implement this

1625
01:07:35,839 --> 01:07:38,480
christian

1626
01:07:40,839 --> 01:07:43,839
molecule

1627
01:07:46,640 --> 01:07:49,200
yeah would be nice to have a non-author

1628
01:07:49,200 --> 01:07:50,880
implementer to

1629
01:07:50,880 --> 01:07:52,960
make sure that that this is actually

1630
01:07:52,960 --> 01:07:54,240
implemented for

1631
01:07:54,240 --> 01:07:56,880
implementable for people who haven't

1632
01:07:56,880 --> 01:07:59,520
invented it

1633
01:08:06,720 --> 01:08:08,319
he said do you want to say something or

1634
01:08:08,319 --> 01:08:10,400
are you still in the

1635
01:08:10,400 --> 01:08:12,960
showing hand with you no i just didn't

1636
01:08:12,960 --> 01:08:15,599
get my hand down on time while tapping

1637
01:08:15,599 --> 01:08:18,640
okay thank you

1638
01:08:19,920 --> 01:08:22,560
yeah okay but uh that's not a

1639
01:08:22,560 --> 01:08:23,679
prerequisite to

1640
01:08:23,679 --> 01:08:26,158
to adopting uh the document so we do

1641
01:08:26,158 --> 01:08:27,679
have energy

1642
01:08:27,679 --> 01:08:29,600
implementing this but again it would be

1643
01:08:29,600 --> 01:08:31,040
nice to have

1644
01:08:31,040 --> 01:08:33,520
uh implementers outside the the author

1645
01:08:33,520 --> 01:08:34,238
group

1646
01:08:34,238 --> 01:08:36,880
but then one one problem we often have

1647
01:08:36,880 --> 01:08:38,238
is that

1648
01:08:38,238 --> 01:08:41,279
people to who implement something uh

1649
01:08:41,279 --> 01:08:44,560
are being uh sucked in

1650
01:08:44,560 --> 01:08:48,799
as authors and so

1651
01:08:48,799 --> 01:08:52,080
we we never get somebody who is not an

1652
01:08:52,080 --> 01:08:54,319
author as an implementer

1653
01:08:54,319 --> 01:08:58,000
um okay so we need to

1654
01:08:58,000 --> 01:09:00,880
validate this consensus on the mailing

1655
01:09:00,880 --> 01:09:03,920
list but this looks like a pretty strong

1656
01:09:03,920 --> 01:09:05,920
result for in-room consensus for

1657
01:09:05,920 --> 01:09:08,399
adoption

1658
01:09:13,520 --> 01:09:17,920
okay with that i'll hand

1659
01:09:18,000 --> 01:09:21,279
over to esco

1660
01:09:21,279 --> 01:09:25,120
just time check we are plus nine

1661
01:09:25,120 --> 01:09:27,520
so well uh the examples i think because

1662
01:09:27,520 --> 01:09:28,319
that takes some

1663
01:09:28,319 --> 01:09:31,759
quite some time to go through okay now

1664
01:09:31,759 --> 01:09:32,479
about the

1665
01:09:32,479 --> 01:09:35,040
proxy operations for gore group

1666
01:09:35,040 --> 01:09:36,640
communication

1667
01:09:36,640 --> 01:09:39,759
in the next slide please

1668
01:09:40,158 --> 01:09:42,640
so as an overview uh well we have of

1669
01:09:42,640 --> 01:09:45,359
course group communication and co-op

1670
01:09:45,359 --> 01:09:47,679
and this document contributes basically

1671
01:09:47,679 --> 01:09:48,319
what

1672
01:09:48,319 --> 01:09:49,759
[Music]

1673
01:09:49,759 --> 01:09:51,600
a proxy could mean in doing group

1674
01:09:51,600 --> 01:09:53,198
communication facilitating group

1675
01:09:53,198 --> 01:09:54,719
communication

1676
01:09:54,719 --> 01:09:56,400
and its aim is to also address the

1677
01:09:56,400 --> 01:09:59,360
issues that were found

1678
01:09:59,360 --> 01:10:01,440
well already a couple of years back and

1679
01:10:01,440 --> 01:10:03,120
now also written up again

1680
01:10:03,120 --> 01:10:06,480
in the group combis document

1681
01:10:06,480 --> 01:10:08,719
so these are addressed by providing a

1682
01:10:08,719 --> 01:10:09,920
signaling protocol

1683
01:10:09,920 --> 01:10:12,080
between the client and the proxy using

1684
01:10:12,080 --> 01:10:14,480
co-op options

1685
01:10:14,480 --> 01:10:16,960
and responses are individually forwarded

1686
01:10:16,960 --> 01:10:18,640
back to the clients in this case so

1687
01:10:18,640 --> 01:10:19,199
that's the

1688
01:10:19,199 --> 01:10:21,839
basic idea

1689
01:10:22,719 --> 01:10:26,000
okay next slide please

1690
01:10:27,679 --> 01:10:29,679
so we can take a look at the picture to

1691
01:10:29,679 --> 01:10:31,040
see how it works

1692
01:10:31,040 --> 01:10:34,159
so the client sends a new cast request

1693
01:10:34,159 --> 01:10:35,840
to the proxy

1694
01:10:35,840 --> 01:10:38,000
and basically should indicate there in

1695
01:10:38,000 --> 01:10:38,880
an option

1696
01:10:38,880 --> 01:10:42,239
that it's interested in handling

1697
01:10:42,239 --> 01:10:43,360
multiple responses

1698
01:10:43,360 --> 01:10:45,840
coming back from a group request also it

1699
01:10:45,840 --> 01:10:47,280
should indicate how long

1700
01:10:47,280 --> 01:10:49,440
this proxy should collect and forward

1701
01:10:49,440 --> 01:10:50,880
responses

1702
01:10:50,880 --> 01:10:54,080
so we assume here a proxy might be a

1703
01:10:54,080 --> 01:10:56,239
generic one that doesn't know

1704
01:10:56,239 --> 01:10:58,640
how long the client wishes to collect

1705
01:10:58,640 --> 01:11:00,320
responses so it can basically signal

1706
01:11:00,320 --> 01:11:03,440
that using multicast signal link

1707
01:11:03,440 --> 01:11:05,600
the proxy will remove this option and

1708
01:11:05,600 --> 01:11:07,360
then send out a normal

1709
01:11:07,360 --> 01:11:09,760
group communication multicast request to

1710
01:11:09,760 --> 01:11:12,560
the servers and

1711
01:11:12,560 --> 01:11:14,480
when the responses come back in the

1712
01:11:14,480 --> 01:11:15,679
proxy can

1713
01:11:15,679 --> 01:11:18,080
basically see from what server the

1714
01:11:18,080 --> 01:11:19,520
responses are coming

1715
01:11:19,520 --> 01:11:21,920
and it can add this information in a new

1716
01:11:21,920 --> 01:11:23,360
option so this is the response

1717
01:11:23,360 --> 01:11:25,040
forwarding option

1718
01:11:25,040 --> 01:11:27,040
so this helps the client to distinguish

1719
01:11:27,040 --> 01:11:29,040
the multiple responses and also

1720
01:11:29,040 --> 01:11:31,760
different servers where these are coming

1721
01:11:31,760 --> 01:11:34,000
from

1722
01:11:35,040 --> 01:11:37,040
security can also be supported here so

1723
01:11:37,040 --> 01:11:38,640
end to end for example

1724
01:11:38,640 --> 01:11:40,640
between client and servers using group

1725
01:11:40,640 --> 01:11:42,159
au scores

1726
01:11:42,159 --> 01:11:45,600
and in addition also normal score can be

1727
01:11:45,600 --> 01:11:46,080
used

1728
01:11:46,080 --> 01:11:48,159
between the client and the proxy as

1729
01:11:48,159 --> 01:11:49,679
shown in an appendix

1730
01:11:49,679 --> 01:11:52,840
or it can use dtls for that unicast

1731
01:11:52,840 --> 01:11:54,159
connection

1732
01:11:54,159 --> 01:11:57,199
okay next slide please

1733
01:11:58,320 --> 01:12:02,480
so the updates that we did

1734
01:12:02,800 --> 01:12:05,840
yeah so we have now a new

1735
01:12:05,840 --> 01:12:08,000
yeah i think a new format format change

1736
01:12:08,000 --> 01:12:08,960
for response

1737
01:12:08,960 --> 01:12:12,239
forwarding option so uh

1738
01:12:12,239 --> 01:12:15,360
yeah we basically uh have this

1739
01:12:15,360 --> 01:12:17,760
uh alignment in the format that

1740
01:12:17,760 --> 01:12:20,000
christian also showed before

1741
01:12:20,000 --> 01:12:22,960
sort of a specific transport information

1742
01:12:22,960 --> 01:12:25,120
encoding where we use the value one

1743
01:12:25,120 --> 01:12:28,480
for example to denote udp stands for

1744
01:12:28,480 --> 01:12:29,679
protocol

1745
01:12:29,679 --> 01:12:31,760
and also the iep address where the

1746
01:12:31,760 --> 01:12:33,199
server

1747
01:12:33,199 --> 01:12:36,239
was located and optionally also port if

1748
01:12:36,239 --> 01:12:38,000
needed

1749
01:12:38,000 --> 01:12:40,159
so that yeah information is then

1750
01:12:40,159 --> 01:12:41,920
communicated back to the client

1751
01:12:41,920 --> 01:12:44,719
so it can if needed also contact the

1752
01:12:44,719 --> 01:12:46,480
server directly

1753
01:12:46,480 --> 01:12:51,839
or via proxy using unicast

1754
01:12:52,080 --> 01:12:55,519
yeah okay next slide please

1755
01:12:59,280 --> 01:13:02,719
so also there is this registry that is

1756
01:13:02,719 --> 01:13:04,159
being used so

1757
01:13:04,159 --> 01:13:07,440
i already explained the value 1 being

1758
01:13:07,440 --> 01:13:11,360
udp there can also be other

1759
01:13:11,360 --> 01:13:13,679
values there so that are encoded here in

1760
01:13:13,679 --> 01:13:14,640
the table

1761
01:13:14,640 --> 01:13:16,640
so that's what we want to add to this

1762
01:13:16,640 --> 01:13:18,480
transport information registry so you

1763
01:13:18,480 --> 01:13:19,920
can have things like

1764
01:13:19,920 --> 01:13:24,560
udp dtls secured co-op co-op over tcp

1765
01:13:24,560 --> 01:13:27,679
co-op over tls web sockets

1766
01:13:27,679 --> 01:13:33,840
and then also web sockets with tls

1767
01:13:34,000 --> 01:13:36,640
um yeah this can normally you could say

1768
01:13:36,640 --> 01:13:38,400
the value is always one there because

1769
01:13:38,400 --> 01:13:39,760
the

1770
01:13:39,760 --> 01:13:43,199
yeah the server responds back in

1771
01:13:43,199 --> 01:13:46,640
udp unicast so that would be the

1772
01:13:46,640 --> 01:13:47,120
transfer

1773
01:13:47,120 --> 01:13:48,960
protocol one but there are some specific

1774
01:13:48,960 --> 01:13:50,159
cases uh

1775
01:13:50,159 --> 01:13:52,640
for example with re reverse proxies in

1776
01:13:52,640 --> 01:13:53,440
which other

1777
01:13:53,440 --> 01:13:56,719
transport protocols could be defined

1778
01:13:56,719 --> 01:13:58,000
also

1779
01:13:58,000 --> 01:14:01,520
for the responses okay let's go to the

1780
01:14:01,520 --> 01:14:04,239
next slide

1781
01:14:04,880 --> 01:14:07,120
yeah one new thing is that now uh also

1782
01:14:07,120 --> 01:14:09,520
reverse proxies are considered before we

1783
01:14:09,520 --> 01:14:10,080
had

1784
01:14:10,080 --> 01:14:12,960
explicitly only the forward proxy scope

1785
01:14:12,960 --> 01:14:14,960
but since many things apply also to

1786
01:14:14,960 --> 01:14:16,480
reverse properties we can

1787
01:14:16,480 --> 01:14:19,440
take that in i think

1788
01:14:20,159 --> 01:14:23,120
yeah there's one item here that i added

1789
01:14:23,120 --> 01:14:23,920
a note that

1790
01:14:23,920 --> 01:14:27,120
could still be on the discussion so the

1791
01:14:27,120 --> 01:14:30,640
initial idea we have is that the client

1792
01:14:30,640 --> 01:14:34,159
basically must be aware of that the

1793
01:14:34,159 --> 01:14:35,679
server it's contacting which is the

1794
01:14:35,679 --> 01:14:36,640
proxy in fact

1795
01:14:36,640 --> 01:14:39,280
that it is reverse proxy and it also

1796
01:14:39,280 --> 01:14:42,480
must use the multicast signaling option

1797
01:14:42,480 --> 01:14:46,080
to signal that yeah i think there are

1798
01:14:46,080 --> 01:14:48,000
some cases where it can also not use

1799
01:14:48,000 --> 01:14:50,330
that option and the whole

1800
01:14:50,330 --> 01:14:51,920
[Music]

1801
01:14:51,920 --> 01:14:55,920
proxy can still work as a reverse proxy

1802
01:14:55,920 --> 01:14:58,159
this case the proxy then picks the

1803
01:14:58,159 --> 01:15:00,400
the time basically how long to collect

1804
01:15:00,400 --> 01:15:02,400
the responses based on its application

1805
01:15:02,400 --> 01:15:04,799
knowledge

1806
01:15:05,040 --> 01:15:07,120
furthermore for the rest for the reverse

1807
01:15:07,120 --> 01:15:08,320
proxy uh

1808
01:15:08,320 --> 01:15:10,719
the client x acts similar to the case of

1809
01:15:10,719 --> 01:15:12,560
the forward proxy

1810
01:15:12,560 --> 01:15:14,000
it's only that the encoding of the

1811
01:15:14,000 --> 01:15:17,360
request is a little bit different

1812
01:15:18,400 --> 01:15:20,320
we also added in obviously that option

1813
01:15:20,320 --> 01:15:22,880
that the proxy can

1814
01:15:22,880 --> 01:15:24,719
basically it looks initially like a

1815
01:15:24,719 --> 01:15:26,640
normal server but it can reveal

1816
01:15:26,640 --> 01:15:29,520
itself as being a reverse proxy by

1817
01:15:29,520 --> 01:15:30,800
sending back this

1818
01:15:30,800 --> 01:15:33,520
multicast signaling option with an empty

1819
01:15:33,520 --> 01:15:36,000
payload

1820
01:15:36,080 --> 01:15:39,199
okay that's new go to the next one see

1821
01:15:39,199 --> 01:15:40,159
we have some more

1822
01:15:40,159 --> 01:15:42,960
updates oh this is the example so i

1823
01:15:42,960 --> 01:15:43,600
would like to

1824
01:15:43,600 --> 01:15:45,920
uh just go over that because i think it

1825
01:15:45,920 --> 01:15:47,840
takes quite some time but you can read

1826
01:15:47,840 --> 01:15:48,560
it in a

1827
01:15:48,560 --> 01:15:51,679
slight material it shows basically what

1828
01:15:51,679 --> 01:15:54,000
is added there and also what the values

1829
01:15:54,000 --> 01:15:56,320
are in this example case

1830
01:15:56,320 --> 01:15:58,159
there's a forward proxy and a reverse

1831
01:15:58,159 --> 01:16:00,800
proxy example

1832
01:16:00,800 --> 01:16:02,640
i actually would like to also add in the

1833
01:16:02,640 --> 01:16:03,840
future an additional

1834
01:16:03,840 --> 01:16:06,400
reverse proxy example so that shows a

1835
01:16:06,400 --> 01:16:07,520
bit of a different

1836
01:16:07,520 --> 01:16:10,640
different way in which it could work so

1837
01:16:10,640 --> 01:16:12,320
it's i think there's quite a

1838
01:16:12,320 --> 01:16:15,280
broad spectrum of reverse proxies and

1839
01:16:15,280 --> 01:16:17,360
how they can operate

1840
01:16:17,360 --> 01:16:19,280
and we'd like to show some examples of

1841
01:16:19,280 --> 01:16:21,440
that

1842
01:16:21,440 --> 01:16:24,159
so now for the security uh of course we

1843
01:16:24,159 --> 01:16:24,719
again

1844
01:16:24,719 --> 01:16:27,520
depend on oscore group communication

1845
01:16:27,520 --> 01:16:29,600
security

1846
01:16:29,600 --> 01:16:32,640
um yeah so we can have

1847
01:16:32,640 --> 01:16:35,600
score between client and proxy

1848
01:16:35,600 --> 01:16:37,440
co-existing as i said in the beginning

1849
01:16:37,440 --> 01:16:38,239
with

1850
01:16:38,239 --> 01:16:40,480
group cost oscar end-to-end between

1851
01:16:40,480 --> 01:16:42,400
client and servers

1852
01:16:42,400 --> 01:16:44,560
and then there are some well intricate

1853
01:16:44,560 --> 01:16:45,440
things about

1854
01:16:45,440 --> 01:16:49,520
the options class u and class e

1855
01:16:49,520 --> 01:16:51,360
so the proxy will have to treat some

1856
01:16:51,360 --> 01:16:53,120
class u options

1857
01:16:53,120 --> 01:16:56,000
as if it was class e to make that all

1858
01:16:56,000 --> 01:16:57,920
work

1859
01:16:57,920 --> 01:17:01,360
um of course yeah there the point is

1860
01:17:01,360 --> 01:17:02,080
what about

1861
01:17:02,080 --> 01:17:04,320
future options that that will come in

1862
01:17:04,320 --> 01:17:06,800
co-op um so do we already know how the

1863
01:17:06,800 --> 01:17:07,600
proxy should

1864
01:17:07,600 --> 01:17:10,880
treat those so for that we have a

1865
01:17:10,880 --> 01:17:14,800
more general rule added

1866
01:17:14,800 --> 01:17:17,360
still a question if this this rule is uh

1867
01:17:17,360 --> 01:17:18,880
yeah

1868
01:17:18,880 --> 01:17:23,520
accurate or simple enough to understand

1869
01:17:26,159 --> 01:17:29,600
um yeah i think it's also written there

1870
01:17:29,600 --> 01:17:31,520
in text so what is the

1871
01:17:31,520 --> 01:17:34,800
general rule for that not your marker

1872
01:17:34,800 --> 01:17:35,280
that you

1873
01:17:35,280 --> 01:17:38,320
want to discuss that now or take it at

1874
01:17:38,320 --> 01:17:40,239
the end maybe

1875
01:17:40,239 --> 01:17:42,719
this was mostly echoing an input we got

1876
01:17:42,719 --> 01:17:44,719
from kristen about this

1877
01:17:44,719 --> 01:17:47,199
to simplify the text more or less this

1878
01:17:47,199 --> 01:17:49,840
way i hope

1879
01:17:49,840 --> 01:17:51,520
otherwise the bigger open point is the

1880
01:17:51,520 --> 01:17:53,600
next one i think

1881
01:17:53,600 --> 01:17:56,880
okay well then maybe move to the next

1882
01:17:56,880 --> 01:17:59,360
one just

1883
01:17:59,360 --> 01:18:02,080
to see that

1884
01:18:04,400 --> 01:18:07,600
yeah this is about the nested oscora so

1885
01:18:07,600 --> 01:18:10,960
the idea is to have end to end or score

1886
01:18:10,960 --> 01:18:12,400
to the servers and also

1887
01:18:12,400 --> 01:18:14,880
was scored between client and proxy

1888
01:18:14,880 --> 01:18:17,280
independent from that

1889
01:18:17,280 --> 01:18:20,400
um so before

1890
01:18:20,400 --> 01:18:22,719
it was actually forbidden to do that so

1891
01:18:22,719 --> 01:18:23,679
because there was no

1892
01:18:23,679 --> 01:18:27,120
no use case and it seemed complex so

1893
01:18:27,120 --> 01:18:30,000
yeah that's why it's not supported at

1894
01:18:30,000 --> 01:18:30,640
the moment

1895
01:18:30,640 --> 01:18:34,000
in oscorp but now we have a use case

1896
01:18:34,000 --> 01:18:34,719
basically

1897
01:18:34,719 --> 01:18:38,400
so at least we see that can work

1898
01:18:38,400 --> 01:18:41,839
work well in principle

1899
01:18:43,280 --> 01:18:45,520
yeah then the question is of course what

1900
01:18:45,520 --> 01:18:47,360
what to do with this as a next step

1901
01:18:47,360 --> 01:18:49,230
so now we have it in an appendix

1902
01:18:49,230 --> 01:18:50,400
[Music]

1903
01:18:50,400 --> 01:18:52,400
and it takes quite some explaining i

1904
01:18:52,400 --> 01:18:54,000
think to to

1905
01:18:54,000 --> 01:18:55,920
to get it right how how everything works

1906
01:18:55,920 --> 01:18:57,600
with nested or score

1907
01:18:57,600 --> 01:19:00,400
so i think the question is should it be

1908
01:19:00,400 --> 01:19:03,120
maybe going to a separate document

1909
01:19:03,120 --> 01:19:06,840
that explains this like an update to the

1910
01:19:06,840 --> 01:19:09,840
rc

1911
01:19:16,320 --> 01:19:19,040
please jordan

1912
01:19:20,400 --> 01:19:22,320
yeah yeah i think this makes sense as

1913
01:19:22,320 --> 01:19:23,600
you said this the reason why

1914
01:19:23,600 --> 01:19:26,400
this was not defined was we didn't have

1915
01:19:26,400 --> 01:19:27,520
a good use case

1916
01:19:27,520 --> 01:19:31,199
and and that all these

1917
01:19:31,199 --> 01:19:34,400
considerations around up the

1918
01:19:34,400 --> 01:19:36,880
class human class e options whether how

1919
01:19:36,880 --> 01:19:39,280
that changes when when you

1920
01:19:39,280 --> 01:19:42,080
when you designate certain information

1921
01:19:42,080 --> 01:19:43,520
for the proxy i had one

1922
01:19:43,520 --> 01:19:47,280
question though about what is um

1923
01:19:47,280 --> 01:19:48,800
so so i mean there is also always the

1924
01:19:48,800 --> 01:19:50,159
option that you can have a separate

1925
01:19:50,159 --> 01:19:51,760
communication with the proxy

1926
01:19:51,760 --> 01:19:54,719
sort of one or score communication with

1927
01:19:54,719 --> 01:19:55,520
the proxy one

1928
01:19:55,520 --> 01:19:58,800
one with the um with the other endpoint

1929
01:19:58,800 --> 01:20:01,920
so what what is the information carried

1930
01:20:01,920 --> 01:20:03,199
in the

1931
01:20:03,199 --> 01:20:05,440
that needs to be that needs to go the

1932
01:20:05,440 --> 01:20:06,480
same

1933
01:20:06,480 --> 01:20:09,280
in the same message

1934
01:20:10,480 --> 01:20:12,239
so i mean the question is why why do you

1935
01:20:12,239 --> 01:20:14,719
need to have two separate

1936
01:20:14,719 --> 01:20:16,800
but we need to have one one connection

1937
01:20:16,800 --> 01:20:18,159
instead of two separate

1938
01:20:18,159 --> 01:20:20,638
connections

1939
01:20:22,080 --> 01:20:24,560
the idea was that you want to reach the

1940
01:20:24,560 --> 01:20:26,159
the outer servers

1941
01:20:26,159 --> 01:20:28,080
or server in the first place through the

1942
01:20:28,080 --> 01:20:30,000
proxy for different reasons

1943
01:20:30,000 --> 01:20:32,400
and you want to protect and to end but

1944
01:20:32,400 --> 01:20:33,920
still the proxy has to

1945
01:20:33,920 --> 01:20:37,199
identify uh the client in order to

1946
01:20:37,199 --> 01:20:38,639
proceed with the forwarding in the first

1947
01:20:38,639 --> 01:20:39,280
place

1948
01:20:39,280 --> 01:20:41,280
right okay so there is a good reason why

1949
01:20:41,280 --> 01:20:42,800
you want to do this yeah

1950
01:20:42,800 --> 01:20:46,719
in one message yeah okay yes yeah

1951
01:20:46,719 --> 01:20:48,960
authentication of the clients yeah also

1952
01:20:48,960 --> 01:20:51,040
at the proxy side yeah

1953
01:20:51,040 --> 01:20:54,800
okay i i think this should be defined

1954
01:20:54,800 --> 01:20:55,920
separately

1955
01:20:55,920 --> 01:21:00,480
uh rather than uh built into this

1956
01:21:00,480 --> 01:21:04,000
this document um and and the analysis of

1957
01:21:04,000 --> 01:21:04,960
the

1958
01:21:04,960 --> 01:21:08,000
of the the different uh

1959
01:21:08,000 --> 01:21:10,080
values of the options should should then

1960
01:21:10,080 --> 01:21:12,480
go into that document

1961
01:21:12,480 --> 01:21:14,239
i think that uh that makes sense there

1962
01:21:14,239 --> 01:21:15,840
also the question is is this something

1963
01:21:15,840 --> 01:21:17,760
we should define

1964
01:21:17,760 --> 01:21:21,040
uh as i mean how

1965
01:21:21,040 --> 01:21:22,880
should this be recursive so you could

1966
01:21:22,880 --> 01:21:24,800
have

1967
01:21:24,800 --> 01:21:28,000
a lot of proxies along the way

1968
01:21:28,000 --> 01:21:30,320
and you protect for each in turn or

1969
01:21:30,320 --> 01:21:32,560
should we have a limit to that

1970
01:21:32,560 --> 01:21:34,719
we need to think about message expansion

1971
01:21:34,719 --> 01:21:35,600
uh if you add

1972
01:21:35,600 --> 01:21:38,320
if each proxy or each for each proxy you

1973
01:21:38,320 --> 01:21:41,280
add a tag for example and

1974
01:21:41,280 --> 01:21:43,760
the message grows so there are a number

1975
01:21:43,760 --> 01:21:44,639
of things to think about

1976
01:21:44,639 --> 01:21:46,159
and i think a separate document would be

1977
01:21:46,159 --> 01:21:49,040
the right place to

1978
01:21:49,040 --> 01:21:51,920
elaborate on that

1979
01:21:52,480 --> 01:21:56,800
thank you john go ahead

1980
01:21:56,800 --> 01:21:59,920
yeah yes i think one

1981
01:21:59,920 --> 01:22:01,920
problem that we discussed when we wrote

1982
01:22:01,920 --> 01:22:03,360
the oscar document was

1983
01:22:03,360 --> 01:22:06,480
collision of recipient ids and sender

1984
01:22:06,480 --> 01:22:07,360
ids

1985
01:22:07,360 --> 01:22:10,000
you need to have you need to basically

1986
01:22:10,000 --> 01:22:12,080
divide it between the different layers

1987
01:22:12,080 --> 01:22:14,159
of proxies and

1988
01:22:14,159 --> 01:22:16,480
end points nothing that can be solved

1989
01:22:16,480 --> 01:22:18,718
but

1990
01:22:19,679 --> 01:22:23,280
thank you and christian

1991
01:22:23,280 --> 01:22:25,360
i think this collision issue will turn

1992
01:22:25,360 --> 01:22:26,480
out to be much

1993
01:22:26,480 --> 01:22:29,360
less of an issue than it seems because

1994
01:22:29,360 --> 01:22:30,560
the messages

1995
01:22:30,560 --> 01:22:33,520
in which the the messages that are sent

1996
01:22:33,520 --> 01:22:35,360
all have their routing information to

1997
01:22:35,360 --> 01:22:39,120
wind up at the right device and

1998
01:22:39,120 --> 01:22:41,199
information that that targets different

1999
01:22:41,199 --> 01:22:43,280
device will only be forwarded from there

2000
01:22:43,280 --> 01:22:44,560
and not arrive there

2001
01:22:44,560 --> 01:22:46,080
we'll see when implementing but i'm

2002
01:22:46,080 --> 01:22:47,840
pretty confident this is not

2003
01:22:47,840 --> 01:22:50,880
really an issue

2004
01:22:51,280 --> 01:22:53,199
and you are also supporting a separate

2005
01:22:53,199 --> 01:22:56,239
document on jabber

2006
01:22:56,239 --> 01:22:58,959
for the minutes

2007
01:23:00,800 --> 01:23:04,239
great okay thank you

2008
01:23:05,040 --> 01:23:08,239
right and maybe let's move to the next

2009
01:23:08,239 --> 01:23:12,718
steps if no more views on that

2010
01:23:13,920 --> 01:23:16,560
so in summary we have uh yeah defined

2011
01:23:16,560 --> 01:23:18,320
proxy operations for

2012
01:23:18,320 --> 01:23:20,320
communication with an explicit signaling

2013
01:23:20,320 --> 01:23:21,600
protocol

2014
01:23:21,600 --> 01:23:24,960
using these two new co-op options

2015
01:23:24,960 --> 01:23:29,040
and yeah as a next step

2016
01:23:29,040 --> 01:23:32,000
what we thought about was also to take

2017
01:23:32,000 --> 01:23:33,440
http

2018
01:23:33,440 --> 01:23:36,480
in the uh yeah in the content basically

2019
01:23:36,480 --> 01:23:38,000
so we could could you imagine that the

2020
01:23:38,000 --> 01:23:41,280
proxy can be accessed via http

2021
01:23:41,280 --> 01:23:44,000
um so then the client can talk to a

2022
01:23:44,000 --> 01:23:47,199
co-op group in that way

2023
01:23:47,360 --> 01:23:50,080
so that can actually build on the

2024
01:23:50,080 --> 01:23:52,320
previous work of the http to co-op

2025
01:23:52,320 --> 01:23:56,639
mapping proxy that's already in rfc

2026
01:23:56,639 --> 01:23:59,360
and there's also a couple of other

2027
01:23:59,360 --> 01:23:59,920
issues

2028
01:23:59,920 --> 01:24:03,520
listed on the gitlab so

2029
01:24:03,520 --> 01:24:07,520
we also need to continue with that

2030
01:24:08,320 --> 01:24:10,560
i think more reviews that's the standard

2031
01:24:10,560 --> 01:24:12,400
end line for these

2032
01:24:12,400 --> 01:24:16,719
type of resolutions

2033
01:24:16,719 --> 01:24:19,120
i see okay there's two promised already

2034
01:24:19,120 --> 01:24:22,719
okay that that sounds promising

2035
01:24:23,280 --> 01:24:30,000
christina's carson

2036
01:24:30,000 --> 01:24:35,199
great thank you thank you oscar

2037
01:24:36,400 --> 01:24:39,760
okay next in the list is

2038
01:24:39,760 --> 01:24:42,880
christian again with casual law score

2039
01:24:42,880 --> 01:24:44,960
um just to set my pace how are we on

2040
01:24:44,960 --> 01:24:46,480
time because i didn't find that

2041
01:24:46,480 --> 01:24:49,679
we are plus 14

2042
01:24:49,679 --> 01:24:52,239
okay then i'll try try again to make it

2043
01:24:52,239 --> 01:24:53,199
sure

2044
01:24:53,199 --> 01:24:56,560
um topic of the topic of this is

2045
01:24:56,560 --> 01:24:58,719
kashuk is deterministic requests as a

2046
01:24:58,719 --> 01:25:00,880
means to obtain cash and loss core next

2047
01:25:00,880 --> 01:25:02,239
slide please

2048
01:25:02,239 --> 01:25:05,280
stop um what um thing is

2049
01:25:05,280 --> 01:25:07,679
um so why do we want caching basically

2050
01:25:07,679 --> 01:25:09,199
for the same reasons we wanted

2051
01:25:09,199 --> 01:25:11,920
in general in particular here firmware

2052
01:25:11,920 --> 01:25:13,840
updates are something where we can

2053
01:25:13,840 --> 01:25:15,840
reduce the amount of traffic we can also

2054
01:25:15,840 --> 01:25:17,360
hide how many devices are behind the

2055
01:25:17,360 --> 01:25:18,400
proxy if they just

2056
01:25:18,400 --> 01:25:22,239
um produce cache hits and we've in

2057
01:25:22,239 --> 01:25:24,400
research work shown that kind of this

2058
01:25:24,400 --> 01:25:25,840
greatly increases

2059
01:25:25,840 --> 01:25:29,199
the reliability and latency as is to be

2060
01:25:29,199 --> 01:25:30,159
expected

2061
01:25:30,159 --> 01:25:32,880
and last but not least this greatly

2062
01:25:32,880 --> 01:25:33,600
enhances

2063
01:25:33,600 --> 01:25:35,760
um multicast notification next slide

2064
01:25:35,760 --> 01:25:37,280
please

2065
01:25:37,280 --> 01:25:39,760
the reason this is not trivial is for

2066
01:25:39,760 --> 01:25:40,560
one

2067
01:25:40,560 --> 01:25:42,400
oscar requests are designed not to be

2068
01:25:42,400 --> 01:25:45,120
cachable because generally they can't be

2069
01:25:45,120 --> 01:25:48,400
um they can be useful to uh to another

2070
01:25:48,400 --> 01:25:51,600
uh client and even if we could magically

2071
01:25:51,600 --> 01:25:52,880
produce a cash hit

2072
01:25:52,880 --> 01:25:55,120
the client would still need to know some

2073
01:25:55,120 --> 01:25:56,719
data of the original request like the

2074
01:25:56,719 --> 01:25:58,239
kid the partial of e

2075
01:25:58,239 --> 01:25:59,679
and even if it knew that it couldn't

2076
01:25:59,679 --> 01:26:02,159
verify that the original

2077
01:26:02,159 --> 01:26:03,840
client really sent that request and it

2078
01:26:03,840 --> 01:26:05,679
was and it's not handing you

2079
01:26:05,679 --> 01:26:08,480
another request just hand so that you

2080
01:26:08,480 --> 01:26:10,320
interpret the server as a good response

2081
01:26:10,320 --> 01:26:11,199
to that

2082
01:26:11,199 --> 01:26:14,320
so that's the the rough setup set

2083
01:26:14,320 --> 01:26:16,880
the rough um problem area where this is

2084
01:26:16,880 --> 01:26:18,000
coming from

2085
01:26:18,000 --> 01:26:21,120
next slide please uh the mechanism

2086
01:26:21,120 --> 01:26:22,560
that's proposed and i'm

2087
01:26:22,560 --> 01:26:25,199
including parts of the upcoming o2

2088
01:26:25,199 --> 01:26:26,080
because

2089
01:26:26,080 --> 01:26:29,040
those things just became apparent in the

2090
01:26:29,040 --> 01:26:30,560
in the plug test and

2091
01:26:30,560 --> 01:26:32,960
i think now this is the best way to go

2092
01:26:32,960 --> 01:26:34,080
um but lastly

2093
01:26:34,080 --> 01:26:36,400
is unchanged is there is a deterministic

2094
01:26:36,400 --> 01:26:37,120
client

2095
01:26:37,120 --> 01:26:39,520
that's a role inside the group we define

2096
01:26:39,520 --> 01:26:40,400
that's not

2097
01:26:40,400 --> 01:26:42,639
pertaining to a particular host but

2098
01:26:42,639 --> 01:26:44,159
every group member can

2099
01:26:44,159 --> 01:26:46,719
take that role and generate requests

2100
01:26:46,719 --> 01:26:48,560
from there

2101
01:26:48,560 --> 01:26:51,760
to make sure that these requests are not

2102
01:26:51,760 --> 01:26:53,920
do not collide on anything accidentally

2103
01:26:53,920 --> 01:26:56,320
and thus commit nones reviews and thus

2104
01:26:56,320 --> 01:26:59,440
make all the crypto stuff go boom um

2105
01:26:59,440 --> 01:27:01,679
we introduce the request hash which is

2106
01:27:01,679 --> 01:27:03,360
which is the hash of the send

2107
01:27:03,360 --> 01:27:05,360
the sender key the external aad and the

2108
01:27:05,360 --> 01:27:06,560
plain text

2109
01:27:06,560 --> 01:27:08,960
that is everything that goes into the

2110
01:27:08,960 --> 01:27:10,800
encryption mechanism so provided that we

2111
01:27:10,800 --> 01:27:12,159
have a deterministic

2112
01:27:12,159 --> 01:27:14,400
encryption algorithm which all of the

2113
01:27:14,400 --> 01:27:16,880
current algorithms are

2114
01:27:16,880 --> 01:27:18,960
we don't really commit nonce reduce

2115
01:27:18,960 --> 01:27:20,480
because we're using the same nouns to

2116
01:27:20,480 --> 01:27:22,320
encrypt the very same thing and thus bit

2117
01:27:22,320 --> 01:27:23,040
by bit

2118
01:27:23,040 --> 01:27:26,800
produce the same request um

2119
01:27:26,800 --> 01:27:28,639
this hash is then fed into a key

2120
01:27:28,639 --> 01:27:30,560
derivation mechanism that is very

2121
01:27:30,560 --> 01:27:32,320
similar to the one that we use for

2122
01:27:32,320 --> 01:27:33,920
pairwise and generally the mechanism is

2123
01:27:33,920 --> 01:27:34,560
very light

2124
01:27:34,560 --> 01:27:36,560
very much like a pairwise request sent

2125
01:27:36,560 --> 01:27:38,800
from the deterministic client

2126
01:27:38,800 --> 01:27:42,880
to the to the respective server

2127
01:27:42,880 --> 01:27:44,800
how this is done in particular is still

2128
01:27:44,800 --> 01:27:46,560
open to discussion because you haven't

2129
01:27:46,560 --> 01:27:48,480
already gave very good feedback on

2130
01:27:48,480 --> 01:27:50,320
this and this just needs to be evaluated

2131
01:27:50,320 --> 01:27:52,719
and made into complete

2132
01:27:52,719 --> 01:27:54,719
concrete steps the server then

2133
01:27:54,719 --> 01:27:56,159
recognizes the

2134
01:27:56,159 --> 01:27:59,280
sender key id obtains the key material

2135
01:27:59,280 --> 01:28:00,639
and latest there notices

2136
01:28:00,639 --> 01:28:02,560
oh that's not a regular client that's

2137
01:28:02,560 --> 01:28:04,719
the deterministic client

2138
01:28:04,719 --> 01:28:07,440
it can use that hash that is sent along

2139
01:28:07,440 --> 01:28:08,719
with that message

2140
01:28:08,719 --> 01:28:11,040
uh to reconstruct the key material

2141
01:28:11,040 --> 01:28:12,639
verify that it's

2142
01:28:12,639 --> 01:28:15,120
it's a correct that the authenticated

2143
01:28:15,120 --> 01:28:16,719
decrypt encryption um

2144
01:28:16,719 --> 01:28:19,440
works out and verify that this hash

2145
01:28:19,440 --> 01:28:20,880
really matches the

2146
01:28:20,880 --> 01:28:24,239
sender key aad and plain text that it

2147
01:28:24,239 --> 01:28:25,840
that it finds so we have additional

2148
01:28:25,840 --> 01:28:27,760
protection against all those

2149
01:28:27,760 --> 01:28:29,280
things that we'll hear about in 10

2150
01:28:29,280 --> 01:28:33,040
minutes next slide please

2151
01:28:33,040 --> 01:28:35,040
that leaves open the question of how

2152
01:28:35,040 --> 01:28:36,719
does the client when receiving the

2153
01:28:36,719 --> 01:28:38,000
response

2154
01:28:38,000 --> 01:28:39,600
verifies that the response is good

2155
01:28:39,600 --> 01:28:41,520
because so we can't we can't have

2156
01:28:41,520 --> 01:28:43,199
pairwise responses we have to have the

2157
01:28:43,199 --> 01:28:46,400
response from the signed by the server

2158
01:28:46,400 --> 01:28:49,120
so that every client that receives the

2159
01:28:49,120 --> 01:28:50,239
cash request

2160
01:28:50,239 --> 01:28:52,159
cash response can be sure that it is

2161
01:28:52,159 --> 01:28:53,600
really from the server and not just from

2162
01:28:53,600 --> 01:28:56,880
someone else who is member of the group

2163
01:28:56,880 --> 01:29:00,320
for that the current way to go is to

2164
01:29:00,320 --> 01:29:02,080
have a class i option that includes a

2165
01:29:02,080 --> 01:29:04,400
request hash this does not necessarily

2166
01:29:04,400 --> 01:29:05,920
need to be sent on the wire

2167
01:29:05,920 --> 01:29:07,360
in fact it's recommended not to send

2168
01:29:07,360 --> 01:29:09,440
this because it's redundant

2169
01:29:09,440 --> 01:29:12,480
but it's placed in the co-op message

2170
01:29:12,480 --> 01:29:13,280
before it's get

2171
01:29:13,280 --> 01:29:16,320
it gets handed to us core and thus

2172
01:29:16,320 --> 01:29:18,239
we get this strong message the binding

2173
01:29:18,239 --> 01:29:20,000
between the request and the response

2174
01:29:20,000 --> 01:29:21,679
and the client that produced the request

2175
01:29:21,679 --> 01:29:23,120
can be sure that

2176
01:29:23,120 --> 01:29:24,719
the response it gets is for that

2177
01:29:24,719 --> 01:29:27,120
response and by verifying the signature

2178
01:29:27,120 --> 01:29:27,679
that is

2179
01:29:27,679 --> 01:29:31,360
coming from the server next slide please

2180
01:29:31,360 --> 01:29:33,199
there are a few limitations on this of

2181
01:29:33,199 --> 01:29:34,560
course

2182
01:29:34,560 --> 01:29:36,960
thing is we are trading this for that so

2183
01:29:36,960 --> 01:29:39,520
um no new features without giving up

2184
01:29:39,520 --> 01:29:40,239
something

2185
01:29:40,239 --> 01:29:44,080
um this only works for safe requests

2186
01:29:44,080 --> 01:29:45,760
kind of i mean it's it needs to be

2187
01:29:45,760 --> 01:29:47,760
casual so it can't just be

2188
01:29:47,760 --> 01:29:50,320
you know process blah and then the

2189
01:29:50,320 --> 01:29:53,520
result is different every time

2190
01:29:53,520 --> 01:29:56,800
it only works for things that don't have

2191
01:29:56,800 --> 01:29:58,480
additional access control based on

2192
01:29:58,480 --> 01:29:59,679
social authentication

2193
01:29:59,679 --> 01:30:02,000
because we lose source authentication

2194
01:30:02,000 --> 01:30:03,760
deliberately

2195
01:30:03,760 --> 01:30:05,520
we're limiting the set of algorithms a

2196
01:30:05,520 --> 01:30:07,600
bit we lose the

2197
01:30:07,600 --> 01:30:10,000
chronological seek the the basically the

2198
01:30:10,000 --> 01:30:11,440
freshness guarantees that usually you

2199
01:30:11,440 --> 01:30:12,719
know score request gives you

2200
01:30:12,719 --> 01:30:14,800
because we want to get responses that

2201
01:30:14,800 --> 01:30:16,000
were created before

2202
01:30:16,000 --> 01:30:17,840
the particular client even created the

2203
01:30:17,840 --> 01:30:19,280
request

2204
01:30:19,280 --> 01:30:22,000
we lose on request confidentiality

2205
01:30:22,000 --> 01:30:24,080
because we want a proxy to be able to

2206
01:30:24,080 --> 01:30:24,639
collate

2207
01:30:24,639 --> 01:30:27,760
different requests for the same

2208
01:30:27,760 --> 01:30:30,159
for the very same answer into the same

2209
01:30:30,159 --> 01:30:31,760
bucket

2210
01:30:31,760 --> 01:30:35,840
and we do lose replay protection because

2211
01:30:36,480 --> 01:30:39,760
that um which is which is

2212
01:30:39,760 --> 01:30:41,520
which is okay because we're only talking

2213
01:30:41,520 --> 01:30:44,000
about safe requests

2214
01:30:44,000 --> 01:30:46,400
next slide please so during the

2215
01:30:46,400 --> 01:30:47,679
hackathon last week

2216
01:30:47,679 --> 01:30:49,679
marco and i interoperated to the point

2217
01:30:49,679 --> 01:30:51,120
where we could

2218
01:30:51,120 --> 01:30:53,280
um decrypt each other's deterministic

2219
01:30:53,280 --> 01:30:54,639
requests

2220
01:30:54,639 --> 01:30:57,280
and if we do a few more steps i'm very

2221
01:30:57,280 --> 01:30:59,120
confident that we can even

2222
01:30:59,120 --> 01:31:02,560
pass the response for that um

2223
01:31:02,560 --> 01:31:04,719
we have comments already from yarn that

2224
01:31:04,719 --> 01:31:05,600
we are still

2225
01:31:05,600 --> 01:31:08,159
reviewing but once uh that we are still

2226
01:31:08,159 --> 01:31:09,760
incorporating into the document but once

2227
01:31:09,760 --> 01:31:10,560
they're done

2228
01:31:10,560 --> 01:31:13,360
it would be really good to get get a get

2229
01:31:13,360 --> 01:31:13,920
a

2230
01:31:13,920 --> 01:31:16,719
review from this in kind of in the sense

2231
01:31:16,719 --> 01:31:17,280
that

2232
01:31:17,280 --> 01:31:19,280
people who are not who did not come up

2233
01:31:19,280 --> 01:31:20,880
with this

2234
01:31:20,880 --> 01:31:23,679
go through the claims and verify that we

2235
01:31:23,679 --> 01:31:24,800
are indeed

2236
01:31:24,800 --> 01:31:26,800
preserving all the properties that of

2237
01:31:26,800 --> 01:31:29,440
course claiming

2238
01:31:29,440 --> 01:31:30,960
in parallel of course we'd like to

2239
01:31:30,960 --> 01:31:32,800
continue our interoperability tests and

2240
01:31:32,800 --> 01:31:34,639
just give this a bit of a more practical

2241
01:31:34,639 --> 01:31:37,040
testing

2242
01:31:37,040 --> 01:31:39,840
uh yeah thanks for listening uh that's

2243
01:31:39,840 --> 01:31:42,239
it from my side and

2244
01:31:42,239 --> 01:31:46,159
comments questions esko

2245
01:31:47,280 --> 01:31:50,320
uh yeah just question uh so for the

2246
01:31:50,320 --> 01:31:53,280
details deterministic request basically

2247
01:31:53,280 --> 01:31:53,760
uh

2248
01:31:53,760 --> 01:31:56,960
you cannot really determine the order

2249
01:31:56,960 --> 01:32:01,440
right in which request for sends or

2250
01:32:02,000 --> 01:32:05,120
yes you cannot prove this one was sent

2251
01:32:05,120 --> 01:32:07,120
later than the other one

2252
01:32:07,120 --> 01:32:10,400
yes because any any cl any other client

2253
01:32:10,400 --> 01:32:11,760
in the group could have come up with

2254
01:32:11,760 --> 01:32:12,000
that

2255
01:32:12,000 --> 01:32:15,040
request earlier already or could produce

2256
01:32:15,040 --> 01:32:16,560
the same request later

2257
01:32:16,560 --> 01:32:18,719
they are not ordered but you can

2258
01:32:18,719 --> 01:32:20,880
actually for the server responses

2259
01:32:20,880 --> 01:32:23,520
that you can probably order uh easily

2260
01:32:23,520 --> 01:32:23,920
yes

2261
01:32:23,920 --> 01:32:26,960
so i'm not sure that's um

2262
01:32:26,960 --> 01:32:29,040
the the ordering of the server responses

2263
01:32:29,040 --> 01:32:30,800
is still good and thus you can still use

2264
01:32:30,800 --> 01:32:32,080
it for observations and

2265
01:32:32,080 --> 01:32:35,280
see what the latest is but you cannot

2266
01:32:35,280 --> 01:32:37,440
know that the response you're getting on

2267
01:32:37,440 --> 01:32:38,560
that observation

2268
01:32:38,560 --> 01:32:40,800
is really later than the request that

2269
01:32:40,800 --> 01:32:42,159
you just said

2270
01:32:42,159 --> 01:32:45,360
yeah and then not exactly which request

2271
01:32:45,360 --> 01:32:46,159
it was

2272
01:32:46,159 --> 01:32:50,719
linked linking to but yeah yeah no okay

2273
01:32:52,840 --> 01:32:55,840
thanks

2274
01:32:58,400 --> 01:33:01,679
okay thank you very much

2275
01:33:01,679 --> 01:33:05,440
uh next in the list is ricard

2276
01:33:05,440 --> 01:33:08,639
presenting a combination of adult

2277
01:33:08,639 --> 01:33:11,360
and oscar

2278
01:33:13,440 --> 01:33:16,960
yes hello

2279
01:33:16,960 --> 01:33:19,440
hello

2280
01:33:20,159 --> 01:33:22,239
yeah so we're just waiting for the

2281
01:33:22,239 --> 01:33:24,000
screen sharing but as marco said

2282
01:33:24,000 --> 01:33:26,159
yes i'll be presenting a work that's

2283
01:33:26,159 --> 01:33:27,440
ongoing about how

2284
01:33:27,440 --> 01:33:31,678
oscor and adult can be combined

2285
01:33:34,159 --> 01:33:38,080
yes yeah next slide please

2286
01:33:41,520 --> 01:33:44,960
yes so just to recap what this work is

2287
01:33:44,960 --> 01:33:45,920
about it's about

2288
01:33:45,920 --> 01:33:48,880
an optimization for combining ad hoc

2289
01:33:48,880 --> 01:33:49,679
over co-op

2290
01:33:49,679 --> 01:33:52,800
with oscore and this means that

2291
01:33:52,800 --> 01:33:56,320
you want to combine the edward message 3

2292
01:33:56,320 --> 01:33:59,440
and the first subsequent oscar request

2293
01:33:59,440 --> 01:34:02,239
in a single co-op request transporting

2294
01:34:02,239 --> 01:34:03,440
both

2295
01:34:03,440 --> 01:34:05,440
and the basically the point of doing

2296
01:34:05,440 --> 01:34:06,880
this that uh

2297
01:34:06,880 --> 01:34:09,120
it reduces number of round-trips

2298
01:34:09,120 --> 01:34:09,920
round-trips

2299
01:34:09,920 --> 01:34:13,600
uh required to set up telescope context

2300
01:34:13,600 --> 01:34:15,840
and also to complete the first score

2301
01:34:15,840 --> 01:34:18,080
transaction with that context

2302
01:34:18,080 --> 01:34:22,000
and the point is that

2303
01:34:22,000 --> 01:34:26,000
after a client has received the

2304
01:34:26,000 --> 01:34:28,159
end of message two it's already in a

2305
01:34:28,159 --> 01:34:29,280
position to

2306
01:34:29,280 --> 01:34:31,040
derive the actual score context so that

2307
01:34:31,040 --> 01:34:32,719
point the client can send

2308
01:34:32,719 --> 01:34:34,719
an oscar request and we want to combine

2309
01:34:34,719 --> 01:34:36,800
that with the ad doc message 3 from the

2310
01:34:36,800 --> 01:34:38,159
client

2311
01:34:38,159 --> 01:34:40,400
and the exact contribution that we

2312
01:34:40,400 --> 01:34:41,840
propose is

2313
01:34:41,840 --> 01:34:44,000
first of all how to signal that what

2314
01:34:44,000 --> 01:34:45,280
you're getting here is a combined

2315
01:34:45,280 --> 01:34:46,000
request

2316
01:34:46,000 --> 01:34:48,880
a combined message uh also the format

2317
01:34:48,880 --> 01:34:50,639
and the processing of the edoc

2318
01:34:50,639 --> 01:34:53,440
cluster request and we also show an

2319
01:34:53,440 --> 01:34:55,360
example of

2320
01:34:55,360 --> 01:34:56,960
the data here there they can also

2321
01:34:56,960 --> 01:34:59,119
request encode and how that would

2322
01:34:59,119 --> 01:35:00,159
actually look

2323
01:35:00,159 --> 01:35:02,560
how that combination would look uh next

2324
01:35:02,560 --> 01:35:05,119
slide please

2325
01:35:08,080 --> 01:35:09,520
right so basically this is the original

2326
01:35:09,520 --> 01:35:11,360
way if you would do enough

2327
01:35:11,360 --> 01:35:13,600
first end of message one end of messages

2328
01:35:13,600 --> 01:35:15,199
two doc message three

2329
01:35:15,199 --> 01:35:17,360
and then you derive those core security

2330
01:35:17,360 --> 01:35:19,360
context and then you do the actual score

2331
01:35:19,360 --> 01:35:21,360
request and response right

2332
01:35:21,360 --> 01:35:23,360
so that's that's the original way

2333
01:35:23,360 --> 01:35:26,320
without this optimization we propose

2334
01:35:26,320 --> 01:35:29,840
um next slide please

2335
01:35:31,040 --> 01:35:32,639
and then you can see here the the

2336
01:35:32,639 --> 01:35:34,960
optimized way so basically

2337
01:35:34,960 --> 01:35:37,040
the client sends setup message one and

2338
01:35:37,040 --> 01:35:38,639
gets adopt message two

2339
01:35:38,639 --> 01:35:40,400
but at that point it can already derive

2340
01:35:40,400 --> 01:35:42,320
those core security context

2341
01:35:42,320 --> 01:35:45,040
uh on its side and at the same time it

2342
01:35:45,040 --> 01:35:45,520
can improve

2343
01:35:45,520 --> 01:35:47,679
it can produce add-on message three

2344
01:35:47,679 --> 01:35:48,639
which it does

2345
01:35:48,639 --> 01:35:50,480
so then it would send one single request

2346
01:35:50,480 --> 01:35:52,400
here combining add-on message three and

2347
01:35:52,400 --> 01:35:54,000
that oscar request

2348
01:35:54,000 --> 01:35:56,000
and then when the server receives that

2349
01:35:56,000 --> 01:35:57,040
um

2350
01:35:57,040 --> 01:35:58,960
it can you know take care of message

2351
01:35:58,960 --> 01:36:00,960
three and derive the score security

2352
01:36:00,960 --> 01:36:01,920
context

2353
01:36:01,920 --> 01:36:05,840
and then actually um let's say decrypt

2354
01:36:05,840 --> 01:36:07,520
the old score request and then provide

2355
01:36:07,520 --> 01:36:09,520
an oscar response

2356
01:36:09,520 --> 01:36:13,840
um yeah next slide please

2357
01:36:14,880 --> 01:36:17,440
so basically the updates now to this

2358
01:36:17,440 --> 01:36:19,840
latest version is that we decided on

2359
01:36:19,840 --> 01:36:22,719
a single method for how to signal the

2360
01:36:22,719 --> 01:36:24,239
combined message

2361
01:36:24,239 --> 01:36:26,560
and that method is basically using an

2362
01:36:26,560 --> 01:36:28,560
option a new option which is a serial

2363
01:36:28,560 --> 01:36:29,440
length option

2364
01:36:29,440 --> 01:36:33,040
class u for score and its intended

2365
01:36:33,040 --> 01:36:35,199
use is only for this end of class oscar

2366
01:36:35,199 --> 01:36:36,159
request

2367
01:36:36,159 --> 01:36:38,159
so when you get such a request you can

2368
01:36:38,159 --> 01:36:39,520
you can understand that okay this is a

2369
01:36:39,520 --> 01:36:40,000
com

2370
01:36:40,000 --> 01:36:42,480
combined erdogan oscar request by the

2371
01:36:42,480 --> 01:36:44,159
presence of that option

2372
01:36:44,159 --> 01:36:47,119
and the reason we chose this is uh

2373
01:36:47,119 --> 01:36:48,080
partly because

2374
01:36:48,080 --> 01:36:50,960
of preference expressed during the itf

2375
01:36:50,960 --> 01:36:52,800
109 meeting

2376
01:36:52,800 --> 01:36:55,600
but also feedback from implementers

2377
01:36:55,600 --> 01:36:56,159
because we have

2378
01:36:56,159 --> 01:36:57,760
we also have an implementation of this

2379
01:36:57,760 --> 01:36:59,920
and got some feedback from

2380
01:36:59,920 --> 01:37:02,800
the person implementing that and we also

2381
01:37:02,800 --> 01:37:05,040
propose in in the draft as suitable

2382
01:37:05,040 --> 01:37:06,880
option number 13

2383
01:37:06,880 --> 01:37:10,159
because we want to keep the size of the

2384
01:37:10,159 --> 01:37:11,199
option

2385
01:37:11,199 --> 01:37:14,400
to be one byte right and the idea is

2386
01:37:14,400 --> 01:37:16,080
that like i said the

2387
01:37:16,080 --> 01:37:19,199
is a zero length option and we assume in

2388
01:37:19,199 --> 01:37:20,800
in this combined request the oscar

2389
01:37:20,800 --> 01:37:22,560
option will always be there

2390
01:37:22,560 --> 01:37:24,719
uh so we know that you know if we pick

2391
01:37:24,719 --> 01:37:27,119
option number 13 the delta here for that

2392
01:37:27,119 --> 01:37:29,600
option will be less than 12 and in such

2393
01:37:29,600 --> 01:37:30,159
case

2394
01:37:30,159 --> 01:37:34,639
um it will be a one byte option and

2395
01:37:34,639 --> 01:37:37,679
as a note option number 21 would be

2396
01:37:37,679 --> 01:37:38,880
another

2397
01:37:38,880 --> 01:37:42,400
suitable value that could be taken

2398
01:37:42,400 --> 01:37:45,119
next slide please

2399
01:37:46,480 --> 01:37:48,880
so here is basically an example of this

2400
01:37:48,880 --> 01:37:51,119
combined edu class oscar request

2401
01:37:51,119 --> 01:37:54,080
and where you can see in the top box the

2402
01:37:54,080 --> 01:37:54,800
blue box

2403
01:37:54,800 --> 01:37:56,560
yes kind of the structure how it would

2404
01:37:56,560 --> 01:37:58,080
look so you have the

2405
01:37:58,080 --> 01:38:00,159
normal header there with the oscar dummy

2406
01:38:00,159 --> 01:38:01,920
method you have on

2407
01:38:01,920 --> 01:38:03,760
the oscar option which is with its

2408
01:38:03,760 --> 01:38:05,679
normal content then you have this zero

2409
01:38:05,679 --> 01:38:06,080
byte

2410
01:38:06,080 --> 01:38:09,119
add-on option and following that you get

2411
01:38:09,119 --> 01:38:10,000
the actual add-on

2412
01:38:10,000 --> 01:38:13,679
payload and then also the

2413
01:38:13,679 --> 01:38:16,800
oscor ciphertext so you combine the in

2414
01:38:16,800 --> 01:38:18,480
the payload of message three and also

2415
01:38:18,480 --> 01:38:19,840
ciphertext essentially

2416
01:38:19,840 --> 01:38:21,600
and in the lower part you can see kind

2417
01:38:21,600 --> 01:38:22,880
of the message overview

2418
01:38:22,880 --> 01:38:24,159
so you have those corruption and that

2419
01:38:24,159 --> 01:38:25,920
lock option and of course any other

2420
01:38:25,920 --> 01:38:26,639
options

2421
01:38:26,639 --> 01:38:29,440
if there would be any yes next slide

2422
01:38:29,440 --> 01:38:31,839
please

2423
01:38:33,280 --> 01:38:35,600
and yeah further updates within we have

2424
01:38:35,600 --> 01:38:36,320
done

2425
01:38:36,320 --> 01:38:38,800
so just overall section restructuring

2426
01:38:38,800 --> 01:38:40,480
editorial improvements

2427
01:38:40,480 --> 01:38:43,280
and since now we decided on a single

2428
01:38:43,280 --> 01:38:44,880
method for signaling

2429
01:38:44,880 --> 01:38:48,960
we restructured text to suit that better

2430
01:38:48,960 --> 01:38:51,040
we also have a better step-by-step

2431
01:38:51,040 --> 01:38:53,199
description of the message processing

2432
01:38:53,199 --> 01:38:54,800
where you can see detailed steps on

2433
01:38:54,800 --> 01:38:56,239
exactly what to do on the client and

2434
01:38:56,239 --> 01:38:57,440
server side

2435
01:38:57,440 --> 01:38:59,440
so as a kind of an overview what you

2436
01:38:59,440 --> 01:39:01,119
would do on the client side

2437
01:39:01,119 --> 01:39:04,480
um when you are the initiator and you

2438
01:39:04,480 --> 01:39:06,719
would prepare end of message three

2439
01:39:06,719 --> 01:39:09,840
and an also request combine those two

2440
01:39:09,840 --> 01:39:11,840
as shown earlier and send that to the

2441
01:39:11,840 --> 01:39:13,040
server side

2442
01:39:13,040 --> 01:39:15,199
and on the server side you receive this

2443
01:39:15,199 --> 01:39:16,719
combined request

2444
01:39:16,719 --> 01:39:18,800
you can extract and process edit message

2445
01:39:18,800 --> 01:39:19,760
three

2446
01:39:19,760 --> 01:39:21,440
and that allows you to derive those core

2447
01:39:21,440 --> 01:39:22,960
security context

2448
01:39:22,960 --> 01:39:24,560
and then that allows you to process the

2449
01:39:24,560 --> 01:39:26,560
actual oscar request which is also a

2450
01:39:26,560 --> 01:39:27,520
part of this

2451
01:39:27,520 --> 01:39:32,880
combined message next slide please

2452
01:39:34,800 --> 01:39:38,239
and we did also another optimization

2453
01:39:38,239 --> 01:39:40,719
because there was some redundant data as

2454
01:39:40,719 --> 01:39:41,360
things

2455
01:39:41,360 --> 01:39:43,440
were in the previous version and the

2456
01:39:43,440 --> 01:39:45,920
redundancy is due to the fact that

2457
01:39:45,920 --> 01:39:48,960
the uh the sender id of the client is

2458
01:39:48,960 --> 01:39:50,880
actually present in two places in this

2459
01:39:50,880 --> 01:39:51,840
combined message

2460
01:39:51,840 --> 01:39:54,719
as things were it's it was both presence

2461
01:39:54,719 --> 01:39:55,199
in

2462
01:39:55,199 --> 01:39:57,920
present in the cr in the end of message

2463
01:39:57,920 --> 01:39:58,719
three

2464
01:39:58,719 --> 01:40:01,440
and in the kid field of the oscar option

2465
01:40:01,440 --> 01:40:03,280
because those are basically the

2466
01:40:03,280 --> 01:40:04,800
yeah the sender id of the client

2467
01:40:04,800 --> 01:40:06,800
essentially the same value there

2468
01:40:06,800 --> 01:40:09,199
so we thought that um yeah we could

2469
01:40:09,199 --> 01:40:11,679
avoid this redundancy

2470
01:40:11,679 --> 01:40:14,719
in a clever way so the basically the the

2471
01:40:14,719 --> 01:40:16,159
combined record we

2472
01:40:16,159 --> 01:40:19,119
request we send only has a porsche badok

2473
01:40:19,119 --> 01:40:20,159
message three

2474
01:40:20,159 --> 01:40:23,119
that does not include the cr but only

2475
01:40:23,119 --> 01:40:25,119
the ciphertext three as a silver buy

2476
01:40:25,119 --> 01:40:25,920
stream

2477
01:40:25,920 --> 01:40:27,840
and this optimization can actually save

2478
01:40:27,840 --> 01:40:28,960
uh

2479
01:40:28,960 --> 01:40:32,159
two to four bytes on the wire um so

2480
01:40:32,159 --> 01:40:33,520
the point is that when the server then

2481
01:40:33,520 --> 01:40:35,840
gets this request since the

2482
01:40:35,840 --> 01:40:36,560
endometriosis

2483
01:40:36,560 --> 01:40:39,520
doesn't include cr it needs to get that

2484
01:40:39,520 --> 01:40:40,800
value from somewhere

2485
01:40:40,800 --> 01:40:43,040
but that same value exists in the oscar

2486
01:40:43,040 --> 01:40:44,960
option in the kid field so it can simply

2487
01:40:44,960 --> 01:40:46,320
take it from there

2488
01:40:46,320 --> 01:40:49,119
encode it as a bisting identifier and

2489
01:40:49,119 --> 01:40:50,159
revealed

2490
01:40:50,159 --> 01:40:53,440
the full edoc message tree as it would

2491
01:40:53,440 --> 01:40:54,639
have initially been created on the

2492
01:40:54,639 --> 01:40:55,920
client side

2493
01:40:55,920 --> 01:40:58,400
and then we can process that as a normal

2494
01:40:58,400 --> 01:41:01,280
end of message three

2495
01:41:01,360 --> 01:41:05,839
yes next slide please

2496
01:41:09,280 --> 01:41:11,840
right and and for the updates we

2497
01:41:11,840 --> 01:41:13,040
improved the error handling

2498
01:41:13,040 --> 01:41:15,520
uh on our points on the server side so

2499
01:41:15,520 --> 01:41:16,239
basically we

2500
01:41:16,239 --> 01:41:18,800
detailed exactly what should happen when

2501
01:41:18,800 --> 01:41:21,360
the ad doc part of the processing fails

2502
01:41:21,360 --> 01:41:24,320
and this included um suggestions for

2503
01:41:24,320 --> 01:41:25,280
what error code

2504
01:41:25,280 --> 01:41:27,679
to respond with and the fact that the

2505
01:41:27,679 --> 01:41:29,760
error should have a content format

2506
01:41:29,760 --> 01:41:31,760
to help because you have to disambiguate

2507
01:41:31,760 --> 01:41:33,040
in a sense between

2508
01:41:33,040 --> 01:41:35,040
the failure on an oscar processing and

2509
01:41:35,040 --> 01:41:36,960
failure on an end of processing

2510
01:41:36,960 --> 01:41:38,960
so we added some some considerations on

2511
01:41:38,960 --> 01:41:41,280
that can be made easier

2512
01:41:41,280 --> 01:41:43,760
um so in the case of end of processing

2513
01:41:43,760 --> 01:41:44,960
failure

2514
01:41:44,960 --> 01:41:48,639
you return an add-on error message and

2515
01:41:48,639 --> 01:41:50,800
this is a non-protected response right

2516
01:41:50,800 --> 01:41:53,679
to an actual oscar protected request

2517
01:41:53,679 --> 01:41:56,080
um so here to be consistent with those

2518
01:41:56,080 --> 01:41:57,199
correct see

2519
01:41:57,199 --> 01:41:59,679
uh you should use cop error codes like

2520
01:41:59,679 --> 01:42:01,520
for sale zero five zero zero for

2521
01:42:01,520 --> 01:42:02,560
instance

2522
01:42:02,560 --> 01:42:04,239
um and it should also have the content

2523
01:42:04,239 --> 01:42:05,920
format application adapt like i said to

2524
01:42:05,920 --> 01:42:07,920
distinguish it from all score errors

2525
01:42:07,920 --> 01:42:10,000
and but as far as oscar processing is

2526
01:42:10,000 --> 01:42:11,119
exactly as in

2527
01:42:11,119 --> 01:42:14,800
the oscar rc 8613

2528
01:42:14,800 --> 01:42:17,600
next slide please

2529
01:42:18,560 --> 01:42:20,800
and yeah next steps we have planned so

2530
01:42:20,800 --> 01:42:22,320
the first one is basically to keep in

2531
01:42:22,320 --> 01:42:24,000
sync with the main add-on document

2532
01:42:24,000 --> 01:42:27,040
there was some discussions on what

2533
01:42:27,040 --> 01:42:28,719
points fit better in the end doc

2534
01:42:28,719 --> 01:42:30,719
document and what points fit better in

2535
01:42:30,719 --> 01:42:31,360
this

2536
01:42:31,360 --> 01:42:33,280
edit combined with oscar document for

2537
01:42:33,280 --> 01:42:34,960
instance some things

2538
01:42:34,960 --> 01:42:38,080
specifically about co-op anal score may

2539
01:42:38,080 --> 01:42:40,880
fit better in in this draft here rather

2540
01:42:40,880 --> 01:42:42,480
than the main add-on documents

2541
01:42:42,480 --> 01:42:44,960
so we should think a bit with with the

2542
01:42:44,960 --> 01:42:47,119
work on the main add-on document

2543
01:42:47,119 --> 01:42:50,000
and of course any further feedback is

2544
01:42:50,000 --> 01:42:51,199
welcome

2545
01:42:51,199 --> 01:42:54,159
um that they want anyone wants to

2546
01:42:54,159 --> 01:42:55,280
provide

2547
01:42:55,280 --> 01:42:58,800
and as the last point uh yeah we got

2548
01:42:58,800 --> 01:42:59,760
good feedback

2549
01:42:59,760 --> 01:43:01,760
i think from the from the last meeting

2550
01:43:01,760 --> 01:43:04,400
and also good feedback from implementers

2551
01:43:04,400 --> 01:43:06,960
so yeah from our point of view it's it's

2552
01:43:06,960 --> 01:43:07,760
uh

2553
01:43:07,760 --> 01:43:10,080
it should be ready for uh working group

2554
01:43:10,080 --> 01:43:13,119
adoption at this point

2555
01:43:13,920 --> 01:43:16,800
yeah next slide please

2556
01:43:18,000 --> 01:43:20,000
yeah thank you that was the last thing

2557
01:43:20,000 --> 01:43:21,920
you can see the link there to the right

2558
01:43:21,920 --> 01:43:25,840
where this work is ongoing

2559
01:43:36,880 --> 01:43:40,639
is yeah um just uh

2560
01:43:40,639 --> 01:43:42,960
quickly maybe you could recap so what's

2561
01:43:42,960 --> 01:43:43,920
the

2562
01:43:43,920 --> 01:43:47,199
yeah the purpose of ad talk

2563
01:43:47,199 --> 01:43:49,440
about because maybe not everyone knows

2564
01:43:49,440 --> 01:43:50,880
on this call what

2565
01:43:50,880 --> 01:43:53,679
what it's doing and what it's for and

2566
01:43:53,679 --> 01:43:55,920
the combination

2567
01:43:55,920 --> 01:43:57,280
yeah i mean the purpose of that look is

2568
01:43:57,280 --> 01:44:00,080
basically establishing keys

2569
01:44:00,080 --> 01:44:03,199
for oscore in in a

2570
01:44:03,199 --> 01:44:05,199
secure way and the point of this

2571
01:44:05,199 --> 01:44:07,199
optimization is just

2572
01:44:07,199 --> 01:44:09,600
to reduce the round-trip times and

2573
01:44:09,600 --> 01:44:11,199
because you you have an opportunity to

2574
01:44:11,199 --> 01:44:12,239
combine

2575
01:44:12,239 --> 01:44:14,000
uh the last basically out of message

2576
01:44:14,000 --> 01:44:16,000
three with an actual first oscar request

2577
01:44:16,000 --> 01:44:18,560
so you reduce the round-trip times

2578
01:44:18,560 --> 01:44:20,639
rather than doing ad doc and then all

2579
01:44:20,639 --> 01:44:22,400
score you do adult

2580
01:44:22,400 --> 01:44:24,239
and you combine one of the messages with

2581
01:44:24,239 --> 01:44:25,440
those core and

2582
01:44:25,440 --> 01:44:27,760
um you basically you can yeah you can

2583
01:44:27,760 --> 01:44:29,199
more quickly establish

2584
01:44:29,199 --> 01:44:31,600
communication with oscar in this way so

2585
01:44:31,600 --> 01:44:32,800
that's the main point

2586
01:44:32,800 --> 01:44:36,159
yeah thanks okay

2587
01:44:41,280 --> 01:44:45,119
yeah any other questions

2588
01:44:47,040 --> 01:44:49,840
uh there is also plus one for adoption

2589
01:44:49,840 --> 01:44:50,880
on jabber from

2590
01:44:50,880 --> 01:44:54,639
john and from christian

2591
01:44:55,040 --> 01:44:57,360
okay

2592
01:44:58,880 --> 01:45:00,320
so i don't know carson if you want to

2593
01:45:00,320 --> 01:45:03,760
take it over again on this

2594
01:45:03,760 --> 01:45:06,880
yeah i think we we need to do a formal

2595
01:45:06,880 --> 01:45:10,080
poll here uh again

2596
01:45:10,080 --> 01:45:13,840
um so first of all a quick sanity check

2597
01:45:13,840 --> 01:45:16,480
yes i think we can do this in the car

2598
01:45:16,480 --> 01:45:18,159
working group because it's

2599
01:45:18,159 --> 01:45:20,400
not actually changing the security

2600
01:45:20,400 --> 01:45:21,760
content of

2601
01:45:21,760 --> 01:45:25,360
uh ad hoc it's just transporting the

2602
01:45:25,360 --> 01:45:26,880
attack

2603
01:45:26,880 --> 01:45:29,040
message in a corrupt message and that's

2604
01:45:29,040 --> 01:45:30,639
within our

2605
01:45:30,639 --> 01:45:32,400
purview so i think that that's an

2606
01:45:32,400 --> 01:45:33,679
important

2607
01:45:33,679 --> 01:45:37,760
um observation and

2608
01:45:37,760 --> 01:45:41,520
so i asked the

2609
01:45:41,520 --> 01:45:46,159
question should we adopt

2610
01:45:46,159 --> 01:45:59,839
what's called adhoc

2611
01:46:04,080 --> 01:46:07,360
so i assume that all the people who have

2612
01:46:07,360 --> 01:46:10,880
plus one in in the jabber will raise the

2613
01:46:10,880 --> 01:46:13,840
hand here as well

2614
01:46:15,840 --> 01:46:19,280
okay so we we have one

2615
01:46:19,280 --> 01:46:23,340
do not raise hand so that would be

2616
01:46:23,340 --> 01:46:24,840
[Music]

2617
01:46:24,840 --> 01:46:26,320
interesting

2618
01:46:26,320 --> 01:46:29,840
to find out why let's

2619
01:46:29,840 --> 01:46:33,600
finish this i can maybe uh explain that

2620
01:46:33,600 --> 01:46:35,040
uh

2621
01:46:35,040 --> 01:46:37,760
so i thought um yeah there should also

2622
01:46:37,760 --> 01:46:39,600
be someone

2623
01:46:39,600 --> 01:46:42,080
not not raising their hands basically

2624
01:46:42,080 --> 01:46:42,880
yeah that's

2625
01:46:42,880 --> 01:46:46,080
uh because i wasn't quite sure

2626
01:46:46,080 --> 01:46:48,159
so it's not against but it's just not

2627
01:46:48,159 --> 01:46:50,560
not raising the hand

2628
01:46:50,560 --> 01:46:53,600
yeah so i i do the real

2629
01:46:53,600 --> 01:46:56,880
oppose question so

2630
01:46:56,880 --> 01:46:58,719
to really oppose it you can raise your

2631
01:46:58,719 --> 01:47:01,199
hand here

2632
01:47:01,280 --> 01:47:09,840
yeah i know that's not the case

2633
01:47:23,280 --> 01:47:25,760
okay so we seem to have a strong

2634
01:47:25,760 --> 01:47:27,440
non-opposition

2635
01:47:27,440 --> 01:47:31,920
to uh adopting this so again this is

2636
01:47:31,920 --> 01:47:34,000
in room consensus and we need to take

2637
01:47:34,000 --> 01:47:35,040
this

2638
01:47:35,040 --> 01:47:39,440
uh to the list thank you so we are

2639
01:47:39,440 --> 01:47:42,639
seven minutes late so i'm not going to

2640
01:47:42,639 --> 01:47:44,800
ask about implementation this time but

2641
01:47:44,800 --> 01:47:45,679
please

2642
01:47:45,679 --> 01:47:48,560
if you are working on this send a

2643
01:47:48,560 --> 01:47:50,960
message to the list

2644
01:47:50,960 --> 01:47:54,480
so we can gauge this

2645
01:47:55,280 --> 01:47:59,040
so regard your next

2646
01:47:59,040 --> 01:48:04,719
as well yes indeed yes

2647
01:48:04,719 --> 01:48:08,560
yeah we have 13 minutes to go so

2648
01:48:08,560 --> 01:48:10,560
please try to compress your presentation

2649
01:48:10,560 --> 01:48:12,000
if possible

2650
01:48:12,000 --> 01:48:18,639
yeah i can try to keep it brief yes

2651
01:48:18,639 --> 01:48:21,760
start talking oh yeah there we go yes

2652
01:48:21,760 --> 01:48:24,000
so again record again so i'll be

2653
01:48:24,000 --> 01:48:25,520
presenting here uh

2654
01:48:25,520 --> 01:48:28,560
i work on aad key usage limits you know

2655
01:48:28,560 --> 01:48:29,840
score

2656
01:48:29,840 --> 01:48:33,840
next time please

2657
01:48:34,560 --> 01:48:37,360
so basically this work started uh or

2658
01:48:37,360 --> 01:48:38,880
discussions about this started in

2659
01:48:38,880 --> 01:48:39,920
earlier

2660
01:48:39,920 --> 01:48:43,280
meetings like ifta itf109 also related

2661
01:48:43,280 --> 01:48:44,560
to lake

2662
01:48:44,560 --> 01:48:47,280
and basically the overview here is that

2663
01:48:47,280 --> 01:48:49,600
the oscar uses aad algorithms to provide

2664
01:48:49,600 --> 01:48:51,440
security properties

2665
01:48:51,440 --> 01:48:54,480
uh but there is this forgery attacks

2666
01:48:54,480 --> 01:48:55,600
against a

2667
01:48:55,600 --> 01:48:57,920
aea the algorithms that have been

2668
01:48:57,920 --> 01:48:59,520
described

2669
01:48:59,520 --> 01:49:02,480
for instance in this cfrg draft that you

2670
01:49:02,480 --> 01:49:03,679
can see there

2671
01:49:03,679 --> 01:49:06,000
and the point is that adversaries may

2672
01:49:06,000 --> 01:49:08,080
break under certain circumstances the

2673
01:49:08,080 --> 01:49:10,239
security properties of the aed

2674
01:49:10,239 --> 01:49:14,000
algorithm and there's a need

2675
01:49:14,000 --> 01:49:16,400
uh in the case of boscore to consider

2676
01:49:16,400 --> 01:49:17,360
how this

2677
01:49:17,360 --> 01:49:20,639
attack uh you know impacts the score

2678
01:49:20,639 --> 01:49:22,320
basically how does this fourier attack

2679
01:49:22,320 --> 01:49:24,400
and the limits a factor score

2680
01:49:24,400 --> 01:49:26,239
and what steps should you take during

2681
01:49:26,239 --> 01:49:28,800
message processing to consider these

2682
01:49:28,800 --> 01:49:32,639
findings next slide please

2683
01:49:34,560 --> 01:49:37,119
so essentially to avoid this or to

2684
01:49:37,119 --> 01:49:38,480
protect yourself against this you need

2685
01:49:38,480 --> 01:49:40,239
to count certain things

2686
01:49:40,239 --> 01:49:42,560
so you need to count this q value and

2687
01:49:42,560 --> 01:49:43,760
the q value is

2688
01:49:43,760 --> 01:49:45,760
the number of messages protected with a

2689
01:49:45,760 --> 01:49:47,280
specific key

2690
01:49:47,280 --> 01:49:50,480
um and you also need to count the

2691
01:49:50,480 --> 01:49:53,119
v value which is the number of 4g

2692
01:49:53,119 --> 01:49:54,880
attempts that have been made against a

2693
01:49:54,880 --> 01:49:56,000
specific key

2694
01:49:56,000 --> 01:49:57,520
which means the amount of failed

2695
01:49:57,520 --> 01:49:59,119
decryptions done with this

2696
01:49:59,119 --> 01:50:03,760
key and for all score there will be

2697
01:50:03,760 --> 01:50:05,920
essentially two relevant counters the

2698
01:50:05,920 --> 01:50:07,760
number of times you use your sender key

2699
01:50:07,760 --> 01:50:08,719
for encryption

2700
01:50:08,719 --> 01:50:10,080
and the number of times you use your

2701
01:50:10,080 --> 01:50:13,119
recipient key for decryption

2702
01:50:13,119 --> 01:50:15,839
next slide please

2703
01:50:18,080 --> 01:50:20,560
and this is a an overview of how you

2704
01:50:20,560 --> 01:50:22,320
could calculate these limits

2705
01:50:22,320 --> 01:50:26,560
for aes ecm 1664 128 algorithm

2706
01:50:26,560 --> 01:50:28,560
and some of these depends on what

2707
01:50:28,560 --> 01:50:30,800
probability values you chose

2708
01:50:30,800 --> 01:50:34,080
and we chose the same as in the uh dtls

2709
01:50:34,080 --> 01:50:35,360
1.3

2710
01:50:35,360 --> 01:50:38,480
document you see linked there and by

2711
01:50:38,480 --> 01:50:40,080
applying these formulas and inputting

2712
01:50:40,080 --> 01:50:41,280
certain probabilities

2713
01:50:41,280 --> 01:50:44,000
it will give you a cap like a limit on

2714
01:50:44,000 --> 01:50:45,520
the q and b values

2715
01:50:45,520 --> 01:50:47,199
and essentially what it's saying is if

2716
01:50:47,199 --> 01:50:48,800
your q counter

2717
01:50:48,800 --> 01:50:52,159
encryptions reach your q limit

2718
01:50:52,159 --> 01:50:54,320
you should stop using this key and at

2719
01:50:54,320 --> 01:50:55,280
the same time

2720
01:50:55,280 --> 01:50:58,320
if your v counter reaches the v value

2721
01:50:58,320 --> 01:51:00,080
you should stop using this key so it's

2722
01:51:00,080 --> 01:51:01,760
like limits on when you shoot when it's

2723
01:51:01,760 --> 01:51:04,000
not safe to use these keys anymore

2724
01:51:04,000 --> 01:51:06,080
see orange raising his hand yeah i just

2725
01:51:06,080 --> 01:51:07,760
want to say that john is coming back to

2726
01:51:07,760 --> 01:51:09,440
these limits you don't need to go into

2727
01:51:09,440 --> 01:51:11,599
depth of those yeah next slide listen

2728
01:51:11,599 --> 01:51:14,000
yes we can proceed

2729
01:51:14,000 --> 01:51:15,920
so this is just overview what you should

2730
01:51:15,920 --> 01:51:18,320
introduce in those core security context

2731
01:51:18,320 --> 01:51:20,400
like i said you need basically a counter

2732
01:51:20,400 --> 01:51:21,360
for q

2733
01:51:21,360 --> 01:51:24,239
and a counter for v and associated limit

2734
01:51:24,239 --> 01:51:24,880
for q

2735
01:51:24,880 --> 01:51:27,920
and associated limit for v and if these

2736
01:51:27,920 --> 01:51:29,679
limits are reached

2737
01:51:29,679 --> 01:51:31,199
you must stop using that security

2738
01:51:31,199 --> 01:51:33,040
context and you must rekey

2739
01:51:33,040 --> 01:51:35,840
so and also by the way this updates rfc

2740
01:51:35,840 --> 01:51:38,320
8613 del score rfc because he introduces

2741
01:51:38,320 --> 01:51:39,920
these new things in those core security

2742
01:51:39,920 --> 01:51:41,199
context

2743
01:51:41,199 --> 01:51:43,919
next slide please

2744
01:51:46,239 --> 01:51:48,239
okay and also the draft goes over

2745
01:51:48,239 --> 01:51:50,239
existing methods for a keying of score

2746
01:51:50,239 --> 01:51:51,840
and presently you basically have four

2747
01:51:51,840 --> 01:51:54,159
methods which is the appendix p2 of

2748
01:51:54,159 --> 01:51:56,400
score you have the oscar profile of ace

2749
01:51:56,400 --> 01:51:58,080
you have the end of protocol

2750
01:51:58,080 --> 01:52:00,000
and you also have manual reconfiguration

2751
01:52:00,000 --> 01:52:02,080
of the nodes which is not practical

2752
01:52:02,080 --> 01:52:03,360
and in the draft there is a brief

2753
01:52:03,360 --> 01:52:05,119
description of each of these methods and

2754
01:52:05,119 --> 01:52:07,599
what benefits they bring

2755
01:52:07,599 --> 01:52:10,320
next slide please

2756
01:52:10,880 --> 01:52:14,719
open points one point is if we now

2757
01:52:14,719 --> 01:52:16,320
produce more limits for further

2758
01:52:16,320 --> 01:52:18,800
algorithms which our intent is

2759
01:52:18,800 --> 01:52:21,520
um what's the best location to add this

2760
01:52:21,520 --> 01:52:23,920
is it in this document or is it in

2761
01:52:23,920 --> 01:52:25,760
even some higher level document because

2762
01:52:25,760 --> 01:52:26,960
this could be general per

2763
01:52:26,960 --> 01:52:29,440
algorithm or it could possibly also be a

2764
01:52:29,440 --> 01:52:30,560
per use case like

2765
01:52:30,560 --> 01:52:33,440
specifically for you know second point

2766
01:52:33,440 --> 01:52:35,199
is what about these probabilities we

2767
01:52:35,199 --> 01:52:35,920
assume

2768
01:52:35,920 --> 01:52:37,679
would they be different in the case of a

2769
01:52:37,679 --> 01:52:39,280
score as

2770
01:52:39,280 --> 01:52:42,239
you know what etls 1.3 will define and

2771
01:52:42,239 --> 01:52:43,599
the third point is

2772
01:52:43,599 --> 01:52:46,480
is there a value in adding an expiration

2773
01:52:46,480 --> 01:52:48,719
time to the oscore security context

2774
01:52:48,719 --> 01:52:52,080
meaning an actual time limit saying that

2775
01:52:52,080 --> 01:52:55,280
when this many seconds has elapsed this

2776
01:52:55,280 --> 01:52:57,280
security context is no longer valid to

2777
01:52:57,280 --> 01:52:58,560
use

2778
01:52:58,560 --> 01:53:00,639
the similar to the exercise parameter in

2779
01:53:00,639 --> 01:53:02,880
ace and by the way grouposcore

2780
01:53:02,880 --> 01:53:04,880
also does something similar to this when

2781
01:53:04,880 --> 01:53:06,000
you join a group

2782
01:53:06,000 --> 01:53:08,239
you can get an expiration for the for

2783
01:53:08,239 --> 01:53:09,040
the

2784
01:53:09,040 --> 01:53:10,960
group security context material so that

2785
01:53:10,960 --> 01:53:12,159
it basically expires

2786
01:53:12,159 --> 01:53:14,960
at a set moment in time so an open point

2787
01:53:14,960 --> 01:53:15,440
is

2788
01:53:15,440 --> 01:53:17,280
if there are value doing this from a

2789
01:53:17,280 --> 01:53:20,000
security perspective

2790
01:53:20,000 --> 01:53:22,800
next slide please

2791
01:53:24,639 --> 01:53:26,560
yeah and this is our plan next step so

2792
01:53:26,560 --> 01:53:27,760
basically the summaries

2793
01:53:27,760 --> 01:53:29,679
we're introducing counting of q and b

2794
01:53:29,679 --> 01:53:30,960
values cross score

2795
01:53:30,960 --> 01:53:32,719
you have to stop breaking if the limits

2796
01:53:32,719 --> 01:53:34,560
are reached and we provide an overview

2797
01:53:34,560 --> 01:53:36,560
of current your keying methods

2798
01:53:36,560 --> 01:53:39,280
next steps need to cover more aad

2799
01:53:39,280 --> 01:53:41,280
algorithms we only cover one which is

2800
01:53:41,280 --> 01:53:43,040
the default and mandatory to implement

2801
01:53:43,040 --> 01:53:44,960
now so we focused on that

2802
01:53:44,960 --> 01:53:47,119
and it also has a short text so we felt

2803
01:53:47,119 --> 01:53:48,800
it was more relevant

2804
01:53:48,800 --> 01:53:50,719
secondly yeah synchronized with other

2805
01:53:50,719 --> 01:53:53,040
online work like edokin lake and

2806
01:53:53,040 --> 01:53:54,480
now the presentation upcoming from

2807
01:53:54,480 --> 01:53:56,880
beyond also and finally we plan

2808
01:53:56,880 --> 01:53:58,719
optimizations for constrained devices

2809
01:53:58,719 --> 01:54:01,119
and further implementation guidelines

2810
01:54:01,119 --> 01:54:03,920
next slide please

2811
01:54:06,400 --> 01:54:08,239
yeah thank you that's it and here you

2812
01:54:08,239 --> 01:54:11,519
see the link for the record

2813
01:54:13,119 --> 01:54:15,920
thanks rickard

2814
01:54:19,119 --> 01:54:21,679
so next is john taking this problem from

2815
01:54:21,679 --> 01:54:25,040
a broader perspective even

2816
01:54:30,159 --> 01:54:32,400
yeah let's see if i can summarize this

2817
01:54:32,400 --> 01:54:33,280
in

2818
01:54:33,280 --> 01:54:36,800
five minutes so this is more uh

2819
01:54:36,800 --> 01:54:39,520
review of the process that was used for

2820
01:54:39,520 --> 01:54:40,480
dtls

2821
01:54:40,480 --> 01:54:43,440
tls and quick and the findings based on

2822
01:54:43,440 --> 01:54:43,760
that

2823
01:54:43,760 --> 01:54:46,800
especially how it relates to oscore and

2824
01:54:46,800 --> 01:54:51,040
next slide

2825
01:54:51,040 --> 01:54:53,840
so i think that has been summarized but

2826
01:54:53,840 --> 01:54:55,280
rickying also have a lot of

2827
01:54:55,280 --> 01:54:57,920
other benefits so i think you should

2828
01:54:57,920 --> 01:54:58,880
always do

2829
01:54:58,880 --> 01:55:01,360
breaking with forward secrecy if you can

2830
01:55:01,360 --> 01:55:04,719
next slide so

2831
01:55:04,719 --> 01:55:08,639
basically this a80 work in tls

2832
01:55:08,639 --> 01:55:11,840
and c4d and quick has four parts you can

2833
01:55:11,840 --> 01:55:12,239
see

2834
01:55:12,239 --> 01:55:15,119
it starts with inequalities and these

2835
01:55:15,119 --> 01:55:17,119
are inequalities they're not

2836
01:55:17,119 --> 01:55:19,920
tight it's they illustrate the worst

2837
01:55:19,920 --> 01:55:20,960
case

2838
01:55:20,960 --> 01:55:24,480
then you have a process and some

2839
01:55:24,480 --> 01:55:27,920
limits and these are these are not

2840
01:55:27,920 --> 01:55:30,320
objective mathematical objects differ

2841
01:55:30,320 --> 01:55:31,360
these are very

2842
01:55:31,360 --> 01:55:34,960
subjective as we will see they have

2843
01:55:34,960 --> 01:55:37,760
they can be improved a lot especially

2844
01:55:37,760 --> 01:55:39,440
for ccm8

2845
01:55:39,440 --> 01:55:42,320
then you come to aad limits and then you

2846
01:55:42,320 --> 01:55:44,560
use them in the protocol as we can

2847
01:55:44,560 --> 01:55:47,840
and i think the 80 limits for tls and

2848
01:55:47,840 --> 01:55:48,719
dtls are

2849
01:55:48,719 --> 01:55:51,920
mostly nice until they started to do

2850
01:55:51,920 --> 01:55:54,800
dtls limits for ccm8 then you start to

2851
01:55:54,800 --> 01:55:56,480
see the

2852
01:55:56,480 --> 01:56:02,320
limits of these process the next slide

2853
01:56:02,880 --> 01:56:06,320
uh first i think this is just

2854
01:56:06,320 --> 01:56:09,920
they are aes is basically assumed to be

2855
01:56:09,920 --> 01:56:12,239
perfect a perfect fermentation in all

2856
01:56:12,239 --> 01:56:15,520
these inequalities but

2857
01:56:15,520 --> 01:56:18,719
cha cha 20 is given a horrible limit

2858
01:56:18,719 --> 01:56:21,119
in fact in the paper it's assumed to be

2859
01:56:21,119 --> 01:56:22,000
a perfect

2860
01:56:22,000 --> 01:56:25,440
set of random functions so i think

2861
01:56:25,440 --> 01:56:28,880
it will be more reasonable to set ca

2862
01:56:28,880 --> 01:56:32,080
equals to zero for that

2863
01:56:32,080 --> 01:56:34,320
the doesn't really matter you can move

2864
01:56:34,320 --> 01:56:36,480
on

2865
01:56:41,199 --> 01:56:44,400
then analysis of the

2866
01:56:44,400 --> 01:56:47,520
step um this

2867
01:56:47,520 --> 01:56:51,040
the process yesterday used in etls leads

2868
01:56:51,040 --> 01:56:51,840
to a lot

2869
01:56:51,840 --> 01:56:55,440
of strange things

2870
01:56:55,440 --> 01:56:58,800
for example that you should re-key the

2871
01:56:58,800 --> 01:56:59,440
ideal

2872
01:56:59,440 --> 01:57:02,000
mac like the perfect mac which doesn't

2873
01:57:02,000 --> 01:57:03,360
make sense

2874
01:57:03,360 --> 01:57:07,440
uh it also gives the

2875
01:57:07,520 --> 01:57:09,840
image that you can with frequent

2876
01:57:09,840 --> 01:57:11,440
re-keying you can reach

2877
01:57:11,440 --> 01:57:14,639
arbitrary high security which is

2878
01:57:14,639 --> 01:57:17,760
not at all the case in fact some of

2879
01:57:17,760 --> 01:57:19,360
these inequalities

2880
01:57:19,360 --> 01:57:22,880
does it doesn't benefit to re-key at all

2881
01:57:22,880 --> 01:57:25,840
next slide

2882
01:57:27,760 --> 01:57:31,679
and you can basically see that very easy

2883
01:57:31,679 --> 01:57:32,800
from there

2884
01:57:32,800 --> 01:57:35,440
from the inequality of its benefits to

2885
01:57:35,440 --> 01:57:37,440
reiki if it's

2886
01:57:37,440 --> 01:57:40,480
linear then there is no benefit

2887
01:57:40,480 --> 01:57:44,480
to re-key you can press down the

2888
01:57:44,480 --> 01:57:46,400
advantage per key but that doesn't

2889
01:57:46,400 --> 01:57:48,639
really matter it's the wrong thing to

2890
01:57:48,639 --> 01:57:49,599
measure

2891
01:57:49,599 --> 01:57:52,400
if you have quadratic or super linear

2892
01:57:52,400 --> 01:57:54,719
inequalities in general

2893
01:57:54,719 --> 01:57:57,760
then there is a benefit to

2894
01:57:57,760 --> 01:58:06,080
reiki next slide

2895
01:58:06,080 --> 01:58:09,440
so and also notice some other things

2896
01:58:09,440 --> 01:58:10,000
with the

2897
01:58:10,000 --> 01:58:15,040
the values in dtls q equals 2 to 23

2898
01:58:15,040 --> 01:58:18,130
and 2 to the power 10

2899
01:58:18,130 --> 01:58:19,280
[Music]

2900
01:58:19,280 --> 01:58:23,360
uh are a bit high this leads to that ccm

2901
01:58:23,360 --> 01:58:27,119
deviates more perfect mac for low v

2902
01:58:27,119 --> 01:58:29,440
just lowering these numbers a little bit

2903
01:58:29,440 --> 01:58:34,000
fixes this

2904
01:58:34,000 --> 01:58:37,520
and yeah i we think a

2905
01:58:37,520 --> 01:58:40,880
better solution but we don't

2906
01:58:40,880 --> 01:58:42,800
argue that that's the optimal solution

2907
01:58:42,800 --> 01:58:44,560
but a better thing to do than the

2908
01:58:44,560 --> 01:58:45,119
process

2909
01:58:45,119 --> 01:58:48,560
in dtls seem to be to

2910
01:58:48,560 --> 01:58:50,639
either just look at the inequalities the

2911
01:58:50,639 --> 01:58:51,599
graph from them

2912
01:58:51,599 --> 01:58:55,040
or to calculate security levels

2913
01:58:55,040 --> 01:58:57,599
based on these inequalities and the

2914
01:58:57,599 --> 01:58:59,199
easiest approach seems to be to

2915
01:58:59,199 --> 01:59:01,280
calculate security levels

2916
01:59:01,280 --> 01:59:05,599
and that is next slide

2917
01:59:06,159 --> 01:59:10,000
these have the benefit that they

2918
01:59:10,000 --> 01:59:13,599
yeah so here are

2919
01:59:13,599 --> 01:59:16,880
some graphs in general and you can see

2920
01:59:16,880 --> 01:59:19,599
security level the security level you

2921
01:59:19,599 --> 01:59:20,719
need to

2922
01:59:20,719 --> 01:59:24,000
re-key before these graphs

2923
01:59:24,000 --> 01:59:27,360
drop down to too low security level

2924
01:59:27,360 --> 01:59:29,599
but in general the security level is the

2925
01:59:29,599 --> 01:59:30,480
minimum

2926
01:59:30,480 --> 01:59:35,360
of all the allowed values on the x

2927
01:59:35,360 --> 01:59:38,639
axis and the different colors here

2928
01:59:38,639 --> 01:59:41,920
blue is the dtls values

2929
01:59:41,920 --> 01:59:45,440
and purple here above is if you

2930
01:59:45,440 --> 01:59:48,800
reduce these numbers a bit so for

2931
01:59:48,800 --> 01:59:49,599
example to

2932
01:59:49,599 --> 01:59:53,520
q equals 2 to the power of 20 and l

2933
01:59:53,520 --> 01:59:56,800
equals 2 to the power of 8.

2934
01:59:56,800 --> 01:59:58,400
and notice that all these are

2935
01:59:58,400 --> 02:00:00,320
inequalities the security

2936
02:00:00,320 --> 02:00:03,280
level is between these curves and the

2937
02:00:03,280 --> 02:00:04,000
green

2938
02:00:04,000 --> 02:00:08,080
line up there and next slide and i think

2939
02:00:08,080 --> 02:00:13,840
we're running out of time

2940
02:00:15,280 --> 02:00:18,480
what do the shares want to do

2941
02:00:18,480 --> 02:00:21,440
yeah we're just on the clock uh in case

2942
02:00:21,440 --> 02:00:22,960
considered to skip to the conclusive

2943
02:00:22,960 --> 02:00:24,400
slide

2944
02:00:24,400 --> 02:00:26,320
we'll go back to this during interim

2945
02:00:26,320 --> 02:00:29,199
meetings for sure

2946
02:00:35,040 --> 02:00:38,560
yeah basically but i haven't

2947
02:00:38,560 --> 02:00:41,119
conclude i think we need to go back to

2948
02:00:41,119 --> 02:00:42,880
the slide somewhere but basically there

2949
02:00:42,880 --> 02:00:43,199
is

2950
02:00:43,199 --> 02:00:46,159
perfectly fine to use ccm8 it can be

2951
02:00:46,159 --> 02:00:47,440
used for a

2952
02:00:47,440 --> 02:00:49,119
long long time without re-keying and

2953
02:00:49,119 --> 02:00:54,880
re-keying doesn't really help at all

2954
02:00:54,880 --> 02:00:56,960
perhaps we can continue five minutes is

2955
02:00:56,960 --> 02:00:59,040
that okay with with

2956
02:00:59,040 --> 02:01:00,560
i mean those who can stay couldn't we

2957
02:01:00,560 --> 02:01:03,679
stay uh it's mostly me takeo that can

2958
02:01:03,679 --> 02:01:05,520
close the session in a few minutes but

2959
02:01:05,520 --> 02:01:06,880
as long as we can stay

2960
02:01:06,880 --> 02:01:09,840
sure

2961
02:01:09,920 --> 02:01:13,520
then i let's go back

2962
02:01:13,520 --> 02:01:17,520
uh two slides

2963
02:01:19,199 --> 02:01:21,679
here you see how to calculate actual

2964
02:01:21,679 --> 02:01:22,719
security

2965
02:01:22,719 --> 02:01:26,560
limits the security limits are not where

2966
02:01:26,560 --> 02:01:30,400
this horizontal line

2967
02:01:30,400 --> 02:01:33,760
crosses the curves but it's the

2968
02:01:33,760 --> 02:01:37,679
minimum of everything to the left

2969
02:01:37,679 --> 02:01:40,239
then we can go to the next slide this is

2970
02:01:40,239 --> 02:01:40,880
maybe

2971
02:01:40,880 --> 02:01:44,159
now the two more interesting slides for

2972
02:01:44,159 --> 02:01:48,480
for core so this is ccm8

2973
02:01:48,480 --> 02:01:51,599
and to the left you see the security

2974
02:01:51,599 --> 02:01:55,520
level using the dtls values

2975
02:01:55,520 --> 02:01:58,800
you can see that ccm8 deviates a bit

2976
02:01:58,800 --> 02:02:01,840
for low values of v that's for your

2977
02:02:01,840 --> 02:02:03,199
attempts and also for

2978
02:02:03,199 --> 02:02:06,880
high values but in the middle it

2979
02:02:06,880 --> 02:02:10,159
it works like a perfect 64 bit tag it

2980
02:02:10,159 --> 02:02:11,440
couldn't be

2981
02:02:11,440 --> 02:02:13,919
better

2982
02:02:15,599 --> 02:02:19,520
and to the right you can see

2983
02:02:19,520 --> 02:02:22,960
that changing these

2984
02:02:22,960 --> 02:02:25,599
values a little bit so you have a little

2985
02:02:25,599 --> 02:02:26,320
bit lower

2986
02:02:26,320 --> 02:02:29,119
shorter messages and a little bit lower

2987
02:02:29,119 --> 02:02:29,920
q

2988
02:02:29,920 --> 02:02:34,400
than ccm 8 or 8

2989
02:02:34,400 --> 02:02:38,960
byte ccm behaves extremely close to a

2990
02:02:38,960 --> 02:02:40,480
perfect

2991
02:02:40,480 --> 02:02:43,679
mac all the way until

2992
02:02:43,679 --> 02:02:48,800
2 to the power of 35 forgery attempts

2993
02:02:48,800 --> 02:02:51,440
and re-keying here doesn't really

2994
02:02:51,440 --> 02:02:52,719
improve the security at

2995
02:02:52,719 --> 02:02:57,280
all so we can't my conclusions are

2996
02:02:57,280 --> 02:03:01,360
the opposite as the dtls values

2997
02:03:01,360 --> 02:03:04,560
ccm8 is as long as you can accept

2998
02:03:04,560 --> 02:03:08,080
64 bit tags then ccm8 is basically

2999
02:03:08,080 --> 02:03:15,280
perfect so next slide

3000
02:03:15,280 --> 02:03:18,560
so conclusions what rich child proposes

3001
02:03:18,560 --> 02:03:20,320
is definitely necessary you need these

3002
02:03:20,320 --> 02:03:22,639
counters you need re-keying

3003
02:03:22,639 --> 02:03:25,760
uh reeking is also good for other things

3004
02:03:25,760 --> 02:03:29,280
uh ccm8 is

3005
02:03:29,280 --> 02:03:31,920
perfect as long as you can accept 64-bit

3006
02:03:31,920 --> 02:03:33,119
tags

3007
02:03:33,119 --> 02:03:36,480
and 64-bit tags should then can be

3008
02:03:36,480 --> 02:03:37,440
accepted

3009
02:03:37,440 --> 02:03:41,199
basically especially for constrained iot

3010
02:03:41,199 --> 02:03:43,199
to produce a signal for you you

3011
02:03:43,199 --> 02:03:45,520
basically need to send 4.3 billion

3012
02:03:45,520 --> 02:03:47,520
messages per second for

3013
02:03:47,520 --> 02:03:50,960
68 years and this is very infeasible in

3014
02:03:50,960 --> 02:03:55,760
constrained radio i think

3015
02:03:55,840 --> 02:03:58,320
should consider using some smaller

3016
02:03:58,320 --> 02:03:59,440
values for q

3017
02:03:59,440 --> 02:04:03,199
and l then you get the then ccm8 starts

3018
02:04:03,199 --> 02:04:04,480
behaving

3019
02:04:04,480 --> 02:04:08,320
for a long long time has the perfect

3020
02:04:08,320 --> 02:04:12,480
mac and then last down on this slide

3021
02:04:12,480 --> 02:04:15,599
some some suggestions

3022
02:04:15,599 --> 02:04:19,119
either to do a little bit

3023
02:04:19,119 --> 02:04:20,639
different values for the different

3024
02:04:20,639 --> 02:04:23,040
algorithms for example 2 to the power of

3025
02:04:23,040 --> 02:04:24,560
20 for gcm

3026
02:04:24,560 --> 02:04:27,920
ca and asccm

3027
02:04:27,920 --> 02:04:32,000
but you could allow v equals 30 for csm8

3028
02:04:32,000 --> 02:04:32,719
without

3029
02:04:32,719 --> 02:04:36,800
problem at all even a bit higher or

3030
02:04:36,800 --> 02:04:38,880
should oscar do something simple and

3031
02:04:38,880 --> 02:04:40,159
some simply say

3032
02:04:40,159 --> 02:04:43,599
q and v is 2 to the power of 20 for

3033
02:04:43,599 --> 02:04:46,719
all algorithms and then also i think

3034
02:04:46,719 --> 02:04:48,960
the message sizes should be lowered a

3035
02:04:48,960 --> 02:04:49,760
bit

3036
02:04:49,760 --> 02:04:53,599
maybe to l 2 to the power of 8 which is

3037
02:04:53,599 --> 02:04:58,320
4k which would be instead of the 16

3038
02:04:58,320 --> 02:05:06,960
k in dtls

3039
02:05:06,960 --> 02:05:10,000
comments questions

3040
02:05:17,679 --> 02:05:21,119
everything is perfectly clear

3041
02:05:21,119 --> 02:05:23,440
great

3042
02:05:27,360 --> 02:05:30,159
there is iron in the queue yeah we

3043
02:05:30,159 --> 02:05:31,360
probably don't have time to

3044
02:05:31,360 --> 02:05:34,000
to discuss details here but uh i think

3045
02:05:34,000 --> 02:05:36,079
we need to think about where

3046
02:05:36,079 --> 02:05:39,520
so what what uh what work goes where and

3047
02:05:39,520 --> 02:05:41,360
and

3048
02:05:41,360 --> 02:05:45,760
where we would put this type of um

3049
02:05:45,760 --> 02:05:49,040
if this would analyze some separate

3050
02:05:49,040 --> 02:05:51,440
uh documents do you have any idea john

3051
02:05:51,440 --> 02:05:52,719
on where this work

3052
02:05:52,719 --> 02:05:54,800
would be published and how it would be

3053
02:05:54,800 --> 02:05:56,400
published

3054
02:05:56,400 --> 02:05:59,599
which working group and so on i'm

3055
02:05:59,599 --> 02:06:02,800
not sure it should be need to be

3056
02:06:02,800 --> 02:06:05,360
published

3057
02:06:05,599 --> 02:06:07,920
here is to give input to how oscar

3058
02:06:07,920 --> 02:06:09,679
chooses it

3059
02:06:09,679 --> 02:06:13,280
its limits and also i think one

3060
02:06:13,280 --> 02:06:15,920
conclusion is that i don't think the

3061
02:06:15,920 --> 02:06:17,040
dtls

3062
02:06:17,040 --> 02:06:19,920
process should be published by cf

3063
02:06:19,920 --> 02:06:20,800
audience

3064
02:06:20,800 --> 02:06:23,840
recommendation i think it's quite flawed

3065
02:06:23,840 --> 02:06:27,119
and the actual values that are used in

3066
02:06:27,119 --> 02:06:29,599
gtls and tls on the other hand are are

3067
02:06:29,599 --> 02:06:30,400
quite

3068
02:06:30,400 --> 02:06:32,480
good and improved security except for

3069
02:06:32,480 --> 02:06:34,719
ccm8 where where i think

3070
02:06:34,719 --> 02:06:38,320
the process starts to have limits

3071
02:06:38,480 --> 02:06:41,040
but the actual process updating is not

3072
02:06:41,040 --> 02:06:42,560
really something for

3073
02:06:42,560 --> 02:06:44,960
uh the documentary card presented right

3074
02:06:44,960 --> 02:06:46,000
something for

3075
02:06:46,000 --> 02:06:49,360
somewhere else i guess yeah i'm not sure

3076
02:06:49,360 --> 02:06:50,960
it needs to be

3077
02:06:50,960 --> 02:06:54,159
published at all i think this is

3078
02:06:54,159 --> 02:06:56,239
recommendation how rick edge document

3079
02:06:56,239 --> 02:06:56,719
should

3080
02:06:56,719 --> 02:07:01,110
choose the limits for q and d

3081
02:07:01,110 --> 02:07:02,239
[Music]

3082
02:07:02,239 --> 02:07:04,320
maybe it should document shortly how it

3083
02:07:04,320 --> 02:07:06,880
did it but

3084
02:07:08,320 --> 02:07:13,840
not in any long text

3085
02:07:14,000 --> 02:07:17,119
thank you any other

3086
02:07:17,119 --> 02:07:21,199
quick input for john

3087
02:07:22,400 --> 02:07:25,520
no okay then with seven minutes over

3088
02:07:25,520 --> 02:07:26,159
time

3089
02:07:26,159 --> 02:07:28,800
i i think we can adjourn the meeting uh

3090
02:07:28,800 --> 02:07:30,639
thank you everyone for attending today

3091
02:07:30,639 --> 02:07:31,840
and the discussion

3092
02:07:31,840 --> 02:07:35,520
we have a concession on friday at 12

3093
02:07:35,520 --> 02:07:40,159
utc enjoy the rest of the week thank you

3094
02:07:40,159 --> 02:07:41,920
everyone

3095
02:07:41,920 --> 02:07:53,199
thank you thank you bye-bye

