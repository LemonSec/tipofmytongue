1
00:08:10,840 --> 00:08:13,840
b

2
00:08:36,719 --> 00:08:38,719
okay we'll start in a couple of minutes

3
00:08:38,719 --> 00:08:40,880
i still see people joining so

4
00:08:40,880 --> 00:08:44,240
give a couple of minutes for people to

5
00:08:52,839 --> 00:08:55,839
join

6
00:09:19,760 --> 00:09:23,839
sound check is that better

7
00:10:49,839 --> 00:10:52,560
all right so i make it uh about five

8
00:10:52,560 --> 00:10:53,120
past

9
00:10:53,120 --> 00:10:55,920
uh and people seem to be joining slower

10
00:10:55,920 --> 00:10:56,470
so

11
00:10:56,470 --> 00:10:57,519
[Music]

12
00:10:57,519 --> 00:11:00,560
i guess i guess we'll get started so

13
00:11:00,560 --> 00:11:03,920
um welcome uh everybody to

14
00:11:03,920 --> 00:11:06,959
i etf 110 uh

15
00:11:06,959 --> 00:11:10,560
and um we're online again uh raveling in

16
00:11:10,560 --> 00:11:11,200
prague

17
00:11:11,200 --> 00:11:14,399
uh that's uh i guess we're getting used

18
00:11:14,399 --> 00:11:15,839
to this

19
00:11:15,839 --> 00:11:18,800
so this is the irtf open meeting um my

20
00:11:18,800 --> 00:11:20,240
name is colin perkins

21
00:11:20,240 --> 00:11:24,000
uh i'm the irtf chair

22
00:11:25,519 --> 00:11:28,560
so um for perhaps the the first time uh

23
00:11:28,560 --> 00:11:29,200
this week

24
00:11:29,200 --> 00:11:33,040
uh a reminder that the irtf

25
00:11:33,040 --> 00:11:36,399
uh follows the iatf uh intellectual

26
00:11:36,399 --> 00:11:37,120
property

27
00:11:37,120 --> 00:11:39,279
disclosure rules and that by

28
00:11:39,279 --> 00:11:41,519
participating in the irtf

29
00:11:41,519 --> 00:11:44,560
meetings and and the ietf meetings you

30
00:11:44,560 --> 00:11:46,000
you agree to follow the intellectual

31
00:11:46,000 --> 00:11:47,920
property disclosure procedures

32
00:11:47,920 --> 00:11:50,720
uh and that if you make a contribution

33
00:11:50,720 --> 00:11:52,079
to the meeting then you

34
00:11:52,079 --> 00:11:54,880
uh you must disclose if there's a patent

35
00:11:54,880 --> 00:11:58,079
or a peasant's application

36
00:11:58,079 --> 00:12:01,600
relating to that contribution

37
00:12:01,600 --> 00:12:03,680
uh and uh if you need the details please

38
00:12:03,680 --> 00:12:05,440
follow the link on the slide

39
00:12:05,440 --> 00:12:09,360
and look at the the rfc's listed

40
00:12:09,680 --> 00:12:13,200
in addition um a reminder that

41
00:12:13,200 --> 00:12:17,440
um we we may be taking uh audio or video

42
00:12:17,440 --> 00:12:19,839
or photographic records of the meetings

43
00:12:19,839 --> 00:12:21,600
uh and suddenly this session is being

44
00:12:21,600 --> 00:12:23,680
recorded and is going out

45
00:12:23,680 --> 00:12:26,800
live on youtube uh as well as being

46
00:12:26,800 --> 00:12:28,079
recorded for the

47
00:12:28,079 --> 00:12:30,720
proceedings and will be available on the

48
00:12:30,720 --> 00:12:33,760
itf websites afterwards

49
00:12:33,760 --> 00:12:36,880
uh and uh in addition um please remember

50
00:12:36,880 --> 00:12:38,160
that uh we we

51
00:12:38,160 --> 00:12:39,760
uh we encourage people to work

52
00:12:39,760 --> 00:12:41,760
respectfully with the other participants

53
00:12:41,760 --> 00:12:43,519
uh and if you have any uh

54
00:12:43,519 --> 00:12:46,079
questions or concerns about the behavior

55
00:12:46,079 --> 00:12:47,760
of participants in the itf

56
00:12:47,760 --> 00:12:50,720
uh we have the ombuds team uh who will

57
00:12:50,720 --> 00:12:51,200
help

58
00:12:51,200 --> 00:12:53,360
deal with that or please talk to me if

59
00:12:53,360 --> 00:12:55,440
you have any concerns

60
00:12:55,440 --> 00:12:57,600
and the uh the itf code of conduct and

61
00:12:57,600 --> 00:12:59,680
the anti-harassment procedures

62
00:12:59,680 --> 00:13:04,638
also applied to the irtf and the irtf

63
00:13:04,839 --> 00:13:07,680
meetings

64
00:13:07,680 --> 00:13:11,600
so the uh goals of the irtf

65
00:13:11,600 --> 00:13:15,279
the the irtf is a parallel organization

66
00:13:15,279 --> 00:13:16,720
to the ietf

67
00:13:16,720 --> 00:13:19,360
which focuses on some longer-term

68
00:13:19,360 --> 00:13:21,279
research issues uh relating to the

69
00:13:21,279 --> 00:13:23,360
internet as a whole

70
00:13:23,360 --> 00:13:26,079
while the ietf does engineering and uh

71
00:13:26,079 --> 00:13:28,399
standards making

72
00:13:28,399 --> 00:13:31,519
the irtf is a research organization uh

73
00:13:31,519 --> 00:13:32,399
it's not a

74
00:13:32,399 --> 00:13:35,200
standards development uh organization

75
00:13:35,200 --> 00:13:35,600
and

76
00:13:35,600 --> 00:13:39,360
while the irtf co

77
00:13:39,360 --> 00:13:42,399
excuse me um while many of the irtf

78
00:13:42,399 --> 00:13:44,480
research groups co-locate with the ietf

79
00:13:44,480 --> 00:13:45,680
meetings

80
00:13:45,680 --> 00:13:47,760
to encourage discussion and cross

81
00:13:47,760 --> 00:13:49,120
fertilizer

82
00:13:49,120 --> 00:13:51,040
cross fertilization between the two

83
00:13:51,040 --> 00:13:53,279
communities the irtf is

84
00:13:53,279 --> 00:13:54,639
is not a standards development

85
00:13:54,639 --> 00:13:57,120
organization

86
00:13:57,120 --> 00:13:59,440
and while the irtf can publish

87
00:13:59,440 --> 00:14:02,480
informational or experimental rfcs

88
00:14:02,480 --> 00:14:04,160
the primary goal is to promote

89
00:14:04,160 --> 00:14:06,480
collaboration and teamwork

90
00:14:06,480 --> 00:14:08,160
and to explore some of the research

91
00:14:08,160 --> 00:14:09,519
issues relating to the internet

92
00:14:09,519 --> 00:14:10,240
protocols

93
00:14:10,240 --> 00:14:11,920
applications architectures and

94
00:14:11,920 --> 00:14:14,480
technologies

95
00:14:14,480 --> 00:14:18,000
rfc 7418 is an irtf

96
00:14:18,000 --> 00:14:21,040
primer for ietf participants which

97
00:14:21,040 --> 00:14:23,279
may be useful to those of you who are

98
00:14:23,279 --> 00:14:24,560
not so familiar with the

99
00:14:24,560 --> 00:14:30,959
the way the irtf works

100
00:14:30,959 --> 00:14:33,279
we have a number of ways you can stay

101
00:14:33,279 --> 00:14:35,760
informed about the the work the irtf is

102
00:14:35,760 --> 00:14:36,320
doing

103
00:14:36,320 --> 00:14:39,120
uh we have the the irtf announce mailing

104
00:14:39,120 --> 00:14:39,600
list

105
00:14:39,600 --> 00:14:41,519
uh and you can see that the url for

106
00:14:41,519 --> 00:14:42,639
joining uh

107
00:14:42,639 --> 00:14:45,040
at the bottom of the slide here uh which

108
00:14:45,040 --> 00:14:46,399
is a low volume up

109
00:14:46,399 --> 00:14:48,639
list for announcements uh we also have

110
00:14:48,639 --> 00:14:50,720
the irtf discuss list uh

111
00:14:50,720 --> 00:14:53,199
for discussion about internet research

112
00:14:53,199 --> 00:14:56,160
related topics

113
00:14:56,720 --> 00:15:00,000
we have the uh the main irtf.org website

114
00:15:00,000 --> 00:15:01,600
um which has information about the

115
00:15:01,600 --> 00:15:03,680
organization links to all the research

116
00:15:03,680 --> 00:15:04,240
groups

117
00:15:04,240 --> 00:15:07,360
um the the prize-winning talks um the

118
00:15:07,360 --> 00:15:09,279
workshops we organize

119
00:15:09,279 --> 00:15:11,920
uh we're also on social media we're on

120
00:15:11,920 --> 00:15:12,800
twitter

121
00:15:12,800 --> 00:15:15,839
we're on facebook we we have a linkedin

122
00:15:15,839 --> 00:15:18,240
page which unfortunately isn't linked

123
00:15:18,240 --> 00:15:19,519
from the slide

124
00:15:19,519 --> 00:15:22,800
uh and we have um

125
00:15:22,800 --> 00:15:25,360
we have presence on the the sitcoms

126
00:15:25,360 --> 00:15:26,880
slack channel as well

127
00:15:26,880 --> 00:15:28,720
so to look out for us on the various

128
00:15:28,720 --> 00:15:31,920
social media forums

129
00:15:36,240 --> 00:15:39,519
the irtf is is organized as a set of

130
00:15:39,519 --> 00:15:40,000
research

131
00:15:40,000 --> 00:15:43,279
groups um and there are

132
00:15:43,279 --> 00:15:46,320
uh 14 uh research

133
00:15:46,320 --> 00:15:49,600
uh groups currently uh and of which 13

134
00:15:49,600 --> 00:15:50,079
of them

135
00:15:50,079 --> 00:15:52,000
are all of the research groups apart

136
00:15:52,000 --> 00:15:54,480
from the decentralized infrastructure

137
00:15:54,480 --> 00:15:57,680
group uh a meeting later this week uh so

138
00:15:57,680 --> 00:15:58,240
please do

139
00:15:58,240 --> 00:15:59,519
look out for those sessions in the

140
00:15:59,519 --> 00:16:02,480
agenda uh i i believe the next one

141
00:16:02,480 --> 00:16:04,560
is the the measurement and analysis for

142
00:16:04,560 --> 00:16:05,680
protocols group

143
00:16:05,680 --> 00:16:07,120
which will be meeting in the slot

144
00:16:07,120 --> 00:16:10,800
immediately after this one

145
00:16:13,360 --> 00:16:16,399
and we as i said the itf also publishes

146
00:16:16,399 --> 00:16:17,279
rfcs

147
00:16:17,279 --> 00:16:20,079
um the only rfc published in in this

148
00:16:20,079 --> 00:16:20,880
cycle from the

149
00:16:20,880 --> 00:16:24,079
on the irtf stream is rfc 8975

150
00:16:24,079 --> 00:16:25,600
which talks about network coding for

151
00:16:25,600 --> 00:16:27,360
satellite systems

152
00:16:27,360 --> 00:16:29,199
uh which came out of the network coding

153
00:16:29,199 --> 00:16:31,120
uh research group

154
00:16:31,120 --> 00:16:33,279
uh but uh i expect there'll be a number

155
00:16:33,279 --> 00:16:36,399
of rfcs from the

156
00:16:36,399 --> 00:16:38,000
the crypto forum group from the

157
00:16:38,000 --> 00:16:39,920
information centric network group uh

158
00:16:39,920 --> 00:16:41,680
which will be published

159
00:16:41,680 --> 00:16:43,440
in the relatively near future there's a

160
00:16:43,440 --> 00:16:44,800
number of them getting close to

161
00:16:44,800 --> 00:16:51,839
the publication

162
00:16:52,079 --> 00:16:54,880
and uh in addition to the the ongoing

163
00:16:54,880 --> 00:16:56,000
research groups

164
00:16:56,000 --> 00:16:59,199
uh we also uh run uh

165
00:16:59,199 --> 00:17:00,959
in conjunction with the internet society

166
00:17:00,959 --> 00:17:03,040
we run uh what's known as the applied

167
00:17:03,040 --> 00:17:04,079
networking research

168
00:17:04,079 --> 00:17:06,400
price and this is going to be the the

169
00:17:06,400 --> 00:17:10,319
main focus of the session today

170
00:17:10,319 --> 00:17:13,520
the applied networking research prize is

171
00:17:13,520 --> 00:17:16,559
awarded um to recognize that the best

172
00:17:16,559 --> 00:17:18,319
recent results in

173
00:17:18,319 --> 00:17:20,799
applied networking research and it's

174
00:17:20,799 --> 00:17:22,640
awarded to recognize interesting

175
00:17:22,640 --> 00:17:24,640
new research ideas uh that are

176
00:17:24,640 --> 00:17:26,240
potentially of relevance to the internet

177
00:17:26,240 --> 00:17:27,760
standards community

178
00:17:27,760 --> 00:17:29,520
and to recognize upcoming people that

179
00:17:29,520 --> 00:17:31,280
are likely to have an impact on internet

180
00:17:31,280 --> 00:17:34,000
standards and technologies

181
00:17:34,000 --> 00:17:36,080
in particular we're trying to bring in

182
00:17:36,080 --> 00:17:38,000
uh people who would not otherwise engage

183
00:17:38,000 --> 00:17:38,960
with the itf

184
00:17:38,960 --> 00:17:41,919
uh and with the ietf community uh and

185
00:17:41,919 --> 00:17:44,160
try and get give exposure to ideas or

186
00:17:44,160 --> 00:17:45,039
people that

187
00:17:45,039 --> 00:17:47,039
would not not otherwise get exposure or

188
00:17:47,039 --> 00:17:48,400
would not otherwise be able to

189
00:17:48,400 --> 00:17:51,840
participate in the discussion

190
00:17:53,200 --> 00:17:56,240
the details of the the praise uh we can

191
00:17:56,240 --> 00:17:57,280
see that the url

192
00:17:57,280 --> 00:18:01,280
uh the rtf.org a and you can find

193
00:18:01,280 --> 00:18:03,919
links to all the the past prize winning

194
00:18:03,919 --> 00:18:04,320
uh

195
00:18:04,320 --> 00:18:09,200
talks there um we we award uh six prizes

196
00:18:09,200 --> 00:18:11,600
each year uh two for each meeting

197
00:18:11,600 --> 00:18:12,840
typically

198
00:18:12,840 --> 00:18:16,080
um and uh we we we always get a large

199
00:18:16,080 --> 00:18:17,919
number of nominations i think there were

200
00:18:17,919 --> 00:18:21,039
70 uh about 17 nominations for the

201
00:18:21,039 --> 00:18:23,440
prices this time now so this is recently

202
00:18:23,440 --> 00:18:25,120
selective uh and we've got some

203
00:18:25,120 --> 00:18:27,039
some really nice talks coming up and

204
00:18:27,039 --> 00:18:28,880
some really people doing some really

205
00:18:28,880 --> 00:18:31,440
nice work

206
00:18:32,480 --> 00:18:35,840
the uh talks for today the the

207
00:18:35,840 --> 00:18:37,440
prize-winning talks for today

208
00:18:37,440 --> 00:18:40,080
uh i'm very pleased to announce uh from

209
00:18:40,080 --> 00:18:41,200
uh francis

210
00:18:41,200 --> 00:18:43,679
uh yan uh who will talk about his work

211
00:18:43,679 --> 00:18:46,000
on uh machine learning for video bitrate

212
00:18:46,000 --> 00:18:46,880
adaptation

213
00:18:46,880 --> 00:18:49,360
uh first of all uh and that will be

214
00:18:49,360 --> 00:18:49,919
followed

215
00:18:49,919 --> 00:18:51,840
uh later in this meeting by talk from

216
00:18:51,840 --> 00:18:53,760
audrey randall uh we'll be talking about

217
00:18:53,760 --> 00:18:54,000
the

218
00:18:54,000 --> 00:18:57,600
dns caching and privacy um

219
00:18:57,600 --> 00:19:00,880
and and uh using dns snooping to detect

220
00:19:00,880 --> 00:19:02,720
malware

221
00:19:02,720 --> 00:19:04,480
and let's say we've got two these two

222
00:19:04,480 --> 00:19:06,240
really nice talks coming up later

223
00:19:06,240 --> 00:19:08,960
uh and uh they're also archived on the

224
00:19:08,960 --> 00:19:12,799
website and you see the url on the slide

225
00:19:12,799 --> 00:19:15,280
and uh we'd like to thank the the

226
00:19:15,280 --> 00:19:16,720
internet society

227
00:19:16,720 --> 00:19:19,520
and comcast and nbc universal for

228
00:19:19,520 --> 00:19:22,320
helping organize and for sponsoring this

229
00:19:22,320 --> 00:19:26,559
for sponsoring these these these prices

230
00:19:28,480 --> 00:19:31,280
and uh in addition to the applied

231
00:19:31,280 --> 00:19:33,440
networking research process we also run

232
00:19:33,440 --> 00:19:38,080
the applied networking research workshop

233
00:19:38,080 --> 00:19:39,520
and this is organized in conjunction

234
00:19:39,520 --> 00:19:41,200
with acm sidcom

235
00:19:41,200 --> 00:19:42,720
and is an academic workshop that

236
00:19:42,720 --> 00:19:44,240
co-locates with the

237
00:19:44,240 --> 00:19:48,160
the itf meeting in july each year

238
00:19:48,160 --> 00:19:49,760
and i'm pleased to announce that the the

239
00:19:49,760 --> 00:19:51,200
a rw this year

240
00:19:51,200 --> 00:19:54,160
uh will be chaired by uh the the the

241
00:19:54,160 --> 00:19:55,919
program chairs will be andrew lutu

242
00:19:55,919 --> 00:19:59,039
and uh nick feenster uh and uh it will

243
00:19:59,039 --> 00:19:59,600
be uh

244
00:19:59,600 --> 00:20:01,840
happening in conjunction with the itf

245
00:20:01,840 --> 00:20:04,480
111 uh in july this year

246
00:20:04,480 --> 00:20:06,640
uh and the the the cough papers uh

247
00:20:06,640 --> 00:20:08,720
should appear uh later this week uh the

248
00:20:08,720 --> 00:20:10,559
paper submission deadline will be the

249
00:20:10,559 --> 00:20:14,000
21st of april uh and uh you know this

250
00:20:14,000 --> 00:20:14,640
this is a

251
00:20:14,640 --> 00:20:16,640
again a forum for applied networking

252
00:20:16,640 --> 00:20:18,159
research a forum

253
00:20:18,159 --> 00:20:21,039
uh for uh the internet research

254
00:20:21,039 --> 00:20:21,919
community

255
00:20:21,919 --> 00:20:24,480
um network operators and the standards

256
00:20:24,480 --> 00:20:26,159
community to come together and

257
00:20:26,159 --> 00:20:29,600
discuss um recent uh results uh emerging

258
00:20:29,600 --> 00:20:32,720
ideas in applied networking research

259
00:20:32,720 --> 00:20:34,559
so if you're doing uh networking

260
00:20:34,559 --> 00:20:36,720
research uh please do consider

261
00:20:36,720 --> 00:20:38,880
uh submitting your your research to this

262
00:20:38,880 --> 00:20:40,640
conference and we're looking for both

263
00:20:40,640 --> 00:20:42,559
uh academic and industry related

264
00:20:42,559 --> 00:20:44,159
research uh

265
00:20:44,159 --> 00:20:45,840
and the broad spectrum of applied

266
00:20:45,840 --> 00:20:48,000
networking research

267
00:20:48,000 --> 00:20:51,840
so so please do consider submitting

268
00:20:54,000 --> 00:20:56,000
and that's about all i have to say uh

269
00:20:56,000 --> 00:20:57,520
the um

270
00:20:57,520 --> 00:20:59,760
that the remainder of this meeting um we

271
00:20:59,760 --> 00:21:01,440
have the the two

272
00:21:01,440 --> 00:21:03,200
applied networking research prize

273
00:21:03,200 --> 00:21:04,640
winning talks uh

274
00:21:04,640 --> 00:21:07,440
starting with uh francis yan who will be

275
00:21:07,440 --> 00:21:10,400
uh presenting the learning in situ

276
00:21:10,400 --> 00:21:11,760
uh and then audrey who will be

277
00:21:11,760 --> 00:21:14,960
presenting on truffle hunter

278
00:21:14,960 --> 00:21:16,720
uh but be before we get to that i just

279
00:21:16,720 --> 00:21:18,559
want to to pass over to

280
00:21:18,559 --> 00:21:20,960
uh matt ford uh from the internet

281
00:21:20,960 --> 00:21:21,760
society

282
00:21:21,760 --> 00:21:24,240
um who who sponsored the the applied

283
00:21:24,240 --> 00:21:25,679
networking research prize

284
00:21:25,679 --> 00:21:28,960
to say a few few words

285
00:21:28,960 --> 00:21:32,000
matt's over to you

286
00:21:32,320 --> 00:21:35,440
thanks very much colin um

287
00:21:35,440 --> 00:21:37,840
uh as colin mentioned most of today's

288
00:21:37,840 --> 00:21:40,480
meeting is taken up with the

289
00:21:40,480 --> 00:21:41,840
talks from the applied networking

290
00:21:41,840 --> 00:21:44,000
research prize winners and i want to say

291
00:21:44,000 --> 00:21:45,280
that it's an honor for the internet

292
00:21:45,280 --> 00:21:48,320
society to be able to support the irtf

293
00:21:48,320 --> 00:21:51,600
in delivering the anrp and in this its

294
00:21:51,600 --> 00:21:53,679
10th anniversary year i had to go back

295
00:21:53,679 --> 00:21:54,240
through the

296
00:21:54,240 --> 00:21:56,080
website and look at the past prize

297
00:21:56,080 --> 00:21:58,000
winners and realized that this

298
00:21:58,000 --> 00:22:00,320
is in fact 10 years since we started

299
00:22:00,320 --> 00:22:01,360
this initiative

300
00:22:01,360 --> 00:22:04,159
and i think the talks the anrp

301
00:22:04,159 --> 00:22:05,679
prize-winning talks remain

302
00:22:05,679 --> 00:22:08,960
a highlight of the ietf week um

303
00:22:08,960 --> 00:22:11,440
whether that's in person or virtually as

304
00:22:11,440 --> 00:22:12,080
it is

305
00:22:12,080 --> 00:22:15,200
now um as colin mentioned we've

306
00:22:15,200 --> 00:22:18,000
received sponsorship from comcast and

307
00:22:18,000 --> 00:22:19,520
nbc universal

308
00:22:19,520 --> 00:22:22,159
they are long-standing supporters of the

309
00:22:22,159 --> 00:22:23,840
anrp

310
00:22:23,840 --> 00:22:27,120
if you know of or think of

311
00:22:27,120 --> 00:22:29,919
another potential sponsor for this do

312
00:22:29,919 --> 00:22:31,200
please get in touch with me

313
00:22:31,200 --> 00:22:33,039
my email address is pretty easy to find

314
00:22:33,039 --> 00:22:35,200
it's ford icesoc.org

315
00:22:35,200 --> 00:22:37,360
i'd be very keen to add to that list of

316
00:22:37,360 --> 00:22:41,600
sponsors for the anrp if at all possible

317
00:22:41,600 --> 00:22:43,520
um so congratulations to francis and

318
00:22:43,520 --> 00:22:45,360
audrey and

319
00:22:45,360 --> 00:22:47,039
i look forward to listening to your

320
00:22:47,039 --> 00:22:49,679
talks today thanks

321
00:22:49,679 --> 00:22:52,640
okay thanks matt

322
00:22:53,280 --> 00:22:55,200
so uh with that we we should get started

323
00:22:55,200 --> 00:22:56,400
with the talks uh

324
00:22:56,400 --> 00:22:59,440
the first of the two talks today is by

325
00:22:59,440 --> 00:23:02,559
uh francis yan uh francis

326
00:23:02,559 --> 00:23:04,720
is a senior researcher at microsoft

327
00:23:04,720 --> 00:23:07,200
research and as ufo operators

328
00:23:07,200 --> 00:23:10,480
office of the cto his research

329
00:23:10,480 --> 00:23:12,720
seeks to improve network systems by

330
00:23:12,720 --> 00:23:13,520
creating

331
00:23:13,520 --> 00:23:15,440
learning-based algorithms that can prep

332
00:23:15,440 --> 00:23:16,720
that can be practically

333
00:23:16,720 --> 00:23:20,559
deployed and he completed his phd

334
00:23:20,559 --> 00:23:22,080
in computer science at stanford

335
00:23:22,080 --> 00:23:24,960
university recently

336
00:23:24,960 --> 00:23:26,880
uh he's received the nsdi community

337
00:23:26,880 --> 00:23:29,760
award and the atc best paper award

338
00:23:29,760 --> 00:23:33,840
and uh for his phd research

339
00:23:33,840 --> 00:23:36,720
and before his phd he graduated from

340
00:23:36,720 --> 00:23:37,280
chiang mai

341
00:23:37,280 --> 00:23:39,520
university where he received a bs in

342
00:23:39,520 --> 00:23:40,960
computer science and a

343
00:23:40,960 --> 00:23:44,000
ba in economics

344
00:23:44,000 --> 00:23:46,159
and he's going to talk to us today about

345
00:23:46,159 --> 00:23:47,440
learning in situ

346
00:23:47,440 --> 00:23:49,440
a randomized experiment in video

347
00:23:49,440 --> 00:23:51,120
streaming

348
00:23:51,120 --> 00:23:53,360
and the the talks are pre-recorded uh

349
00:23:53,360 --> 00:23:54,480
francis uh

350
00:23:54,480 --> 00:23:56,400
is on the chat uh if you have questions

351
00:23:56,400 --> 00:23:58,320
during the talk uh

352
00:23:58,320 --> 00:24:00,159
otherwise we'll have plenty of time for

353
00:24:00,159 --> 00:24:03,200
discussion after the talk

354
00:24:03,200 --> 00:24:19,840
okay if we can play the video

355
00:24:22,880 --> 00:24:24,880
platform will be able to run a

356
00:24:24,880 --> 00:24:26,320
randomized experiment

357
00:24:26,320 --> 00:24:30,320
on real users and a learning

358
00:24:30,320 --> 00:24:32,559
hello everyone i'm francis from

359
00:24:32,559 --> 00:24:34,559
microsoft research

360
00:24:34,559 --> 00:24:36,799
my research has focused on practical

361
00:24:36,799 --> 00:24:38,240
machine learning algorithms

362
00:24:38,240 --> 00:24:41,279
for network systems it's my pleasure

363
00:24:41,279 --> 00:24:41,760
today

364
00:24:41,760 --> 00:24:44,559
to talk about puffer a video streaming

365
00:24:44,559 --> 00:24:45,440
platform

366
00:24:45,440 --> 00:24:48,000
we built to run a randomized experiment

367
00:24:48,000 --> 00:24:49,440
on real users

368
00:24:49,440 --> 00:24:51,679
and a learning based adaptive bitrate

369
00:24:51,679 --> 00:24:52,559
algorithm

370
00:24:52,559 --> 00:24:55,679
that works on the wild internet this

371
00:24:55,679 --> 00:24:56,080
work

372
00:24:56,080 --> 00:24:58,799
was completed back at stanford advised

373
00:24:58,799 --> 00:25:00,080
by my former phd

374
00:25:00,080 --> 00:25:03,520
advisors keith weinstein and phil lavis

375
00:25:03,520 --> 00:25:06,639
now let's get started

376
00:25:07,120 --> 00:25:09,760
the problem we're tackling here is

377
00:25:09,760 --> 00:25:11,679
adaptive bit rate streaming or

378
00:25:11,679 --> 00:25:14,799
abr which is a critical algorithm

379
00:25:14,799 --> 00:25:17,360
used to carry a large portion of the

380
00:25:17,360 --> 00:25:18,480
video traffic

381
00:25:18,480 --> 00:25:22,080
on today's internet at a high level

382
00:25:22,080 --> 00:25:25,600
abr aims to improve the user's quality

383
00:25:25,600 --> 00:25:26,799
of experience

384
00:25:26,799 --> 00:25:30,480
or qe that basically consists of

385
00:25:30,480 --> 00:25:34,159
two primary goals higher video quality

386
00:25:34,159 --> 00:25:37,200
and fewer rebuffering events

387
00:25:37,200 --> 00:25:39,520
although it seems to have been well

388
00:25:39,520 --> 00:25:41,279
studied in the past

389
00:25:41,279 --> 00:25:44,240
abr still remains a challenge because

390
00:25:44,240 --> 00:25:46,080
its two primary goals

391
00:25:46,080 --> 00:25:49,760
naturally conflict with each other

392
00:25:49,760 --> 00:25:53,279
let me show you how apr works

393
00:25:53,279 --> 00:25:55,760
an abr server divides the video into

394
00:25:55,760 --> 00:25:57,039
chunks

395
00:25:57,039 --> 00:26:02,080
each chunk is usually 2 to 6 seconds

396
00:26:02,080 --> 00:26:05,360
then each of those chunks is pre-encoded

397
00:26:05,360 --> 00:26:08,400
into a couple of compressed versions

398
00:26:08,400 --> 00:26:10,240
at the different sizes and video

399
00:26:10,240 --> 00:26:12,720
qualities

400
00:26:12,880 --> 00:26:16,400
the objective of abr is to react to

401
00:26:16,400 --> 00:26:19,360
the varying network conditions over time

402
00:26:19,360 --> 00:26:20,400
and decide

403
00:26:20,400 --> 00:26:23,039
which version of each chunk to send so

404
00:26:23,039 --> 00:26:24,000
as to optimize

405
00:26:24,000 --> 00:26:27,679
the total qe of the client

406
00:26:27,679 --> 00:26:30,159
this problem is non-trivial because

407
00:26:30,159 --> 00:26:30,960
let's say

408
00:26:30,960 --> 00:26:34,000
avr believes it's okay to send 1080p

409
00:26:34,000 --> 00:26:36,880
all the time which gives the highest

410
00:26:36,880 --> 00:26:38,480
video quality

411
00:26:38,480 --> 00:26:40,640
but what if the network capacity

412
00:26:40,640 --> 00:26:42,400
suddenly drops to a level

413
00:26:42,400 --> 00:26:46,400
that's unable to deliver 1080p anymore

414
00:26:46,400 --> 00:26:49,200
from that moment on the playback buffer

415
00:26:49,200 --> 00:26:50,880
in a client's player

416
00:26:50,880 --> 00:26:53,360
will be drained slowly eventually

417
00:26:53,360 --> 00:26:56,959
resulting in video phrases

418
00:26:57,600 --> 00:27:00,960
this talk will be in three parts first

419
00:27:00,960 --> 00:27:03,600
i'll describe puffer a live streaming

420
00:27:03,600 --> 00:27:04,320
platform

421
00:27:04,320 --> 00:27:07,840
for video streaming research then i'll

422
00:27:07,840 --> 00:27:09,679
show a surprising finding

423
00:27:09,679 --> 00:27:11,520
from a randomized experiment we

424
00:27:11,520 --> 00:27:13,679
performed on puffer

425
00:27:13,679 --> 00:27:16,159
that is the confidence intervals on the

426
00:27:16,159 --> 00:27:17,039
performance

427
00:27:17,039 --> 00:27:20,240
of avr algorithms are much bigger

428
00:27:20,240 --> 00:27:23,919
than we realized lastly i'll introduce

429
00:27:23,919 --> 00:27:25,039
fugu

430
00:27:25,039 --> 00:27:28,480
a machine learning based abr algorithm

431
00:27:28,480 --> 00:27:31,600
that was learned in situ meaning in

432
00:27:31,600 --> 00:27:32,240
place

433
00:27:32,240 --> 00:27:34,320
on the actual deployment environment

434
00:27:34,320 --> 00:27:36,720
buffer

435
00:27:37,120 --> 00:27:40,879
ok let's move on to power

436
00:27:41,360 --> 00:27:44,399
to study video streaming and test apr

437
00:27:44,399 --> 00:27:45,760
schemes in real life

438
00:27:45,760 --> 00:27:48,799
ideally on real users we built our own

439
00:27:48,799 --> 00:27:50,320
video streaming platform

440
00:27:50,320 --> 00:27:53,840
called puffer it's a live tv streaming

441
00:27:53,840 --> 00:27:54,559
website

442
00:27:54,559 --> 00:27:57,919
open to public in late 2018

443
00:27:57,919 --> 00:28:00,399
allowing users to watch six tv channels

444
00:28:00,399 --> 00:28:02,159
for free

445
00:28:02,159 --> 00:28:05,120
our goal was to create a realistic

446
00:28:05,120 --> 00:28:06,000
testbed

447
00:28:06,000 --> 00:28:07,600
and a learning environment for the

448
00:28:07,600 --> 00:28:09,679
community to investigate

449
00:28:09,679 --> 00:28:12,880
video streaming algorithms and we

450
00:28:12,880 --> 00:28:14,399
operate puffer

451
00:28:14,399 --> 00:28:17,840
also as a randomized experiment of abr

452
00:28:17,840 --> 00:28:19,520
schemes

453
00:28:19,520 --> 00:28:23,000
so each time you visit our website

454
00:28:23,000 --> 00:28:24,640
puffer.stanford.edu

455
00:28:24,640 --> 00:28:27,279
you'll be randomly assigned to one of

456
00:28:27,279 --> 00:28:29,679
the abr schemes being tested

457
00:28:29,679 --> 00:28:31,919
including those in the prior work and

458
00:28:31,919 --> 00:28:33,360
our own algorithm

459
00:28:33,360 --> 00:28:36,640
that i'm gonna introduce later

460
00:28:36,640 --> 00:28:38,480
but you won't be aware of this

461
00:28:38,480 --> 00:28:40,960
assignment

462
00:28:41,039 --> 00:28:43,520
while you're watching tv on buffer our

463
00:28:43,520 --> 00:28:44,240
server

464
00:28:44,240 --> 00:28:47,600
will record which apr algorithm is used

465
00:28:47,600 --> 00:28:50,000
along with some other client telemetry

466
00:28:50,000 --> 00:28:51,520
on video quality

467
00:28:51,520 --> 00:28:53,760
and playback buffer for analysis

468
00:28:53,760 --> 00:28:56,240
purposes

469
00:28:56,559 --> 00:28:59,679
to recruit users we purchased ads

470
00:28:59,679 --> 00:29:02,159
on google and reddit for keywords like

471
00:29:02,159 --> 00:29:03,919
live tv

472
00:29:03,919 --> 00:29:06,320
the other users we attracted came from

473
00:29:06,320 --> 00:29:07,760
the press articles

474
00:29:07,760 --> 00:29:10,960
covering puffer for example

475
00:29:10,960 --> 00:29:13,600
new york times recommended puffer to

476
00:29:13,600 --> 00:29:15,520
those who need free tv to watch

477
00:29:15,520 --> 00:29:18,640
at home during the pandemic

478
00:29:18,640 --> 00:29:22,159
as of today we've had more than 130 000

479
00:29:22,159 --> 00:29:23,200
real users

480
00:29:23,200 --> 00:29:27,200
across the us

481
00:29:27,200 --> 00:29:29,919
puffer's web page may look simple but

482
00:29:29,919 --> 00:29:30,960
you can think of it

483
00:29:30,960 --> 00:29:34,559
as a small youtube tv built from scratch

484
00:29:34,559 --> 00:29:36,720
it's actually a lot more challenging to

485
00:29:36,720 --> 00:29:38,480
support 130

486
00:29:38,480 --> 00:29:41,440
000 users then building a research

487
00:29:41,440 --> 00:29:43,279
prototype

488
00:29:43,279 --> 00:29:47,279
this picture shows puffer's architecture

489
00:29:47,279 --> 00:29:50,880
we receive tv signals with an antenna

490
00:29:50,880 --> 00:29:53,840
at stanford decode the signals and

491
00:29:53,840 --> 00:29:56,720
encode video into multiple versions

492
00:29:56,720 --> 00:29:59,120
and then serve them using different avr

493
00:29:59,120 --> 00:30:02,080
algorithms to our users

494
00:30:02,080 --> 00:30:04,720
we've also built a monitoring system to

495
00:30:04,720 --> 00:30:06,559
monitor the system state

496
00:30:06,559 --> 00:30:09,039
and send an alert to my phone if

497
00:30:09,039 --> 00:30:11,919
anything goes wrong

498
00:30:12,320 --> 00:30:15,039
we wrote more than 30 000 lines of code

499
00:30:15,039 --> 00:30:16,159
for puffer

500
00:30:16,159 --> 00:30:19,360
and have used it to stream 60 years of

501
00:30:19,360 --> 00:30:20,000
video

502
00:30:20,000 --> 00:30:24,240
to 130 000 real users

503
00:30:25,520 --> 00:30:28,320
not only our results in the paper are

504
00:30:28,320 --> 00:30:29,840
reproducible

505
00:30:29,840 --> 00:30:32,799
all the user data collected on buffer is

506
00:30:32,799 --> 00:30:34,720
being automatically posted

507
00:30:34,720 --> 00:30:37,039
to the website every day after

508
00:30:37,039 --> 00:30:39,120
anonymization

509
00:30:39,120 --> 00:30:42,320
you could select any data and view the

510
00:30:42,320 --> 00:30:43,679
algorithm performance

511
00:30:43,679 --> 00:30:46,480
we plotted in figures but you could also

512
00:30:46,480 --> 00:30:47,600
download the data

513
00:30:47,600 --> 00:30:49,919
and do the analysis using our scripts by

514
00:30:49,919 --> 00:30:52,159
yourself

515
00:30:52,159 --> 00:30:54,480
additionally we're opening buffer to the

516
00:30:54,480 --> 00:30:55,600
research community

517
00:30:55,600 --> 00:30:59,200
to train and test novel abr algorithms

518
00:30:59,200 --> 00:31:02,159
and more generally speaking also

519
00:31:02,159 --> 00:31:03,679
congestion control

520
00:31:03,679 --> 00:31:07,519
and bandwidth prediction algorithms

521
00:31:09,120 --> 00:31:12,240
and after building buffer we then run

522
00:31:12,240 --> 00:31:14,720
a long randomized experiment on video

523
00:31:14,720 --> 00:31:15,440
streaming

524
00:31:15,440 --> 00:31:19,840
in real life unreal users

525
00:31:19,919 --> 00:31:22,960
it's worth noting that the existing apr

526
00:31:22,960 --> 00:31:23,919
algorithms

527
00:31:23,919 --> 00:31:27,039
did real experiments as well but those

528
00:31:27,039 --> 00:31:27,919
experiments

529
00:31:27,919 --> 00:31:30,960
often run between a few network nodes

530
00:31:30,960 --> 00:31:35,279
and lasted for only hours or days

531
00:31:35,279 --> 00:31:38,559
what we have found is measuring abr

532
00:31:38,559 --> 00:31:40,720
performance on the wild internet

533
00:31:40,720 --> 00:31:44,799
is much harder than we realized before

534
00:31:44,799 --> 00:31:47,440
you may need two years of data per

535
00:31:47,440 --> 00:31:48,159
scheme

536
00:31:48,159 --> 00:31:51,679
to reliably measure a difference like 20

537
00:31:51,679 --> 00:31:54,240
i'll demonstrate the surprising finding

538
00:31:54,240 --> 00:31:54,960
using

539
00:31:54,960 --> 00:31:57,440
the experimental results comparing five

540
00:31:57,440 --> 00:32:01,519
avr algorithms

541
00:32:01,519 --> 00:32:03,600
this figure shows the algorithm

542
00:32:03,600 --> 00:32:06,000
performance using the data collected on

543
00:32:06,000 --> 00:32:06,880
a single day

544
00:32:06,880 --> 00:32:09,919
in january 2019

545
00:32:09,919 --> 00:32:12,240
puffer streamed more than 17 days of

546
00:32:12,240 --> 00:32:13,600
video to about

547
00:32:13,600 --> 00:32:18,559
600 users watching tv on that day

548
00:32:18,559 --> 00:32:20,799
since i'm going to present this type of

549
00:32:20,799 --> 00:32:22,480
figure several times

550
00:32:22,480 --> 00:32:25,840
let's take a closer look first

551
00:32:25,840 --> 00:32:29,360
on the y-axis it shows the video quality

552
00:32:29,360 --> 00:32:32,559
measured by a standard metric as same

553
00:32:32,559 --> 00:32:36,640
higher is better on the x-axis

554
00:32:36,640 --> 00:32:39,679
it displays the re-buffering ratio

555
00:32:39,679 --> 00:32:43,279
but we have reversed the axis so

556
00:32:43,279 --> 00:32:46,559
the better is to the right overall

557
00:32:46,559 --> 00:32:50,960
the better qe is up and to the right

558
00:32:50,960 --> 00:32:53,440
for now let's ignore the individual

559
00:32:53,440 --> 00:32:55,360
performance of each scheme

560
00:32:55,360 --> 00:32:58,640
and focus on those 95 percent confidence

561
00:32:58,640 --> 00:33:01,679
intervals around each point

562
00:33:01,679 --> 00:33:04,559
you see even after streaming 17 days of

563
00:33:04,559 --> 00:33:05,600
video

564
00:33:05,600 --> 00:33:08,240
the confidence intervals are still huge

565
00:33:08,240 --> 00:33:11,279
and overlapping with each other

566
00:33:11,279 --> 00:33:14,240
as a result most schemes are still

567
00:33:14,240 --> 00:33:17,919
indistinguishable from each other

568
00:33:18,080 --> 00:33:20,880
this tells us if you perform an

569
00:33:20,880 --> 00:33:21,840
experiment

570
00:33:21,840 --> 00:33:25,519
that only streams 17 days of video

571
00:33:25,519 --> 00:33:27,840
you can't really measure any benefits

572
00:33:27,840 --> 00:33:29,760
reliably

573
00:33:29,760 --> 00:33:32,720
any improvements you found could just be

574
00:33:32,720 --> 00:33:34,240
statistical noise

575
00:33:34,240 --> 00:33:36,320
if you don't collect enough data or

576
00:33:36,320 --> 00:33:38,000
consider the confidence

577
00:33:38,000 --> 00:33:41,519
intervals so

578
00:33:41,519 --> 00:33:43,519
we left the experiment running for a

579
00:33:43,519 --> 00:33:45,039
week and collected

580
00:33:45,039 --> 00:33:48,880
42 days of video now the confidence

581
00:33:48,880 --> 00:33:49,919
intervals became

582
00:33:49,919 --> 00:33:53,440
smaller but not actually enough

583
00:33:53,440 --> 00:33:55,880
for instance let's look at the scheme

584
00:33:55,880 --> 00:33:58,480
mpchm

585
00:33:58,480 --> 00:34:02,159
its mean style ratio is about 0.4

586
00:34:02,159 --> 00:34:03,519
percent

587
00:34:03,519 --> 00:34:06,559
but the confidence interval ranges from

588
00:34:06,559 --> 00:34:06,960
point

589
00:34:06,960 --> 00:34:10,159
one percent to point nine percent

590
00:34:10,159 --> 00:34:14,720
twice as large as the mean value

591
00:34:15,119 --> 00:34:18,480
so we continue the experiment after a

592
00:34:18,480 --> 00:34:19,280
month

593
00:34:19,280 --> 00:34:22,159
about half a year of video were streamed

594
00:34:22,159 --> 00:34:24,159
and now the confidence intervals

595
00:34:24,159 --> 00:34:27,520
became much smaller however

596
00:34:27,520 --> 00:34:29,599
we're still unable to distinguish some

597
00:34:29,599 --> 00:34:30,719
schemes

598
00:34:30,719 --> 00:34:34,320
for example mpchm and

599
00:34:34,320 --> 00:34:38,960
bba have almost identical performance

600
00:34:38,960 --> 00:34:43,119
but is that a reliable result

601
00:34:43,679 --> 00:34:45,760
after running the experiment for eight

602
00:34:45,760 --> 00:34:46,960
months

603
00:34:46,960 --> 00:34:50,239
we ended up streaming more than 13 years

604
00:34:50,239 --> 00:34:50,879
of video

605
00:34:50,879 --> 00:34:55,520
to about 55 000 user ips

606
00:34:55,520 --> 00:34:59,920
and finally let's zoom in on this figure

607
00:34:59,920 --> 00:35:02,880
we are now able to narrow the confidence

608
00:35:02,880 --> 00:35:03,520
intervals

609
00:35:03,520 --> 00:35:06,560
down to 20 of the mean value

610
00:35:06,560 --> 00:35:09,839
but remember this is only possible after

611
00:35:09,839 --> 00:35:10,480
streaming

612
00:35:10,480 --> 00:35:14,560
at least two years of video per scheme

613
00:35:14,560 --> 00:35:17,680
the reason for such large uncertainty

614
00:35:17,680 --> 00:35:20,640
is because the internet is way more

615
00:35:20,640 --> 00:35:21,200
noisy

616
00:35:21,200 --> 00:35:24,640
and heavy-tailed than without

617
00:35:24,640 --> 00:35:27,599
among the six hundred thousand streams

618
00:35:27,599 --> 00:35:28,720
only four percent

619
00:35:28,720 --> 00:35:32,480
of them had any stalls meaning the other

620
00:35:32,480 --> 00:35:33,920
96 percent

621
00:35:33,920 --> 00:35:37,680
never stopped stock events are so

622
00:35:37,680 --> 00:35:40,720
rare in practice which is why you need a

623
00:35:40,720 --> 00:35:45,200
huge amount of data to measure them

624
00:35:45,200 --> 00:35:47,359
additionally we have results in the

625
00:35:47,359 --> 00:35:49,119
paper to show that

626
00:35:49,119 --> 00:35:51,680
the distributions of watch time and

627
00:35:51,680 --> 00:35:52,400
throughput

628
00:35:52,400 --> 00:35:58,079
are also super skilled

629
00:35:58,079 --> 00:36:01,040
in the final part i'll describe how we

630
00:36:01,040 --> 00:36:02,480
leverage machine learning

631
00:36:02,480 --> 00:36:05,359
to train an avr algorithm in situ

632
00:36:05,359 --> 00:36:06,160
meaning

633
00:36:06,160 --> 00:36:09,520
in place on buffer

634
00:36:10,079 --> 00:36:12,640
the first step we took was to understand

635
00:36:12,640 --> 00:36:15,200
the system dynamics better

636
00:36:15,200 --> 00:36:17,760
we can plot how the playback buffer

637
00:36:17,760 --> 00:36:19,440
changes over time

638
00:36:19,440 --> 00:36:23,119
for instance it drains one second

639
00:36:23,119 --> 00:36:25,440
per second while waiting for the next

640
00:36:25,440 --> 00:36:26,480
chunk

641
00:36:26,480 --> 00:36:28,880
and once the chunk is received and

642
00:36:28,880 --> 00:36:30,560
appended to the buffer

643
00:36:30,560 --> 00:36:33,599
its buffer size increases by the chunk

644
00:36:33,599 --> 00:36:35,599
length

645
00:36:35,599 --> 00:36:39,040
you'll see the only uncertainty in abr

646
00:36:39,040 --> 00:36:41,680
is the transmission time of a video

647
00:36:41,680 --> 00:36:43,040
chunk

648
00:36:43,040 --> 00:36:45,680
that is simply how long it takes for a

649
00:36:45,680 --> 00:36:47,920
client to receive a bid chunk

650
00:36:47,920 --> 00:36:52,000
since the chunk leaves the sender

651
00:36:52,800 --> 00:36:56,320
the algorithm we proposed is called fuku

652
00:36:56,320 --> 00:36:59,520
at its core it uses a neural network

653
00:36:59,520 --> 00:37:02,160
to predict the transmission time of each

654
00:37:02,160 --> 00:37:04,320
chunk

655
00:37:04,320 --> 00:37:07,119
the transmission time predictor ttp

656
00:37:07,119 --> 00:37:08,320
takes as input

657
00:37:08,320 --> 00:37:11,520
the sizes and transmission times of past

658
00:37:11,520 --> 00:37:12,880
chunks

659
00:37:12,880 --> 00:37:16,960
and also the size of the chunk 2 cent

660
00:37:16,960 --> 00:37:19,040
i'd like to emphasize that we don't

661
00:37:19,040 --> 00:37:20,480
predict throughput

662
00:37:20,480 --> 00:37:23,280
because a throughput predictor wouldn't

663
00:37:23,280 --> 00:37:23,920
consider

664
00:37:23,920 --> 00:37:26,720
the size of the chunk to send and would

665
00:37:26,720 --> 00:37:27,760
have ignored

666
00:37:27,760 --> 00:37:30,720
a well-known fact in networking that the

667
00:37:30,720 --> 00:37:32,240
observed throughput

668
00:37:32,240 --> 00:37:35,040
actually varies with the file size to

669
00:37:35,040 --> 00:37:37,520
send

670
00:37:37,520 --> 00:37:41,359
another uncommon feature of the input

671
00:37:41,359 --> 00:37:44,000
is low level tcp statistics from the

672
00:37:44,000 --> 00:37:45,200
kernel

673
00:37:45,200 --> 00:37:49,359
such as rtt and congestion window size

674
00:37:49,359 --> 00:37:52,480
this is weekly crossing layers with

675
00:37:52,480 --> 00:37:54,800
information flowing from transport layer

676
00:37:54,800 --> 00:37:57,920
to application layer

677
00:37:58,800 --> 00:38:02,880
the output of ttp is unusual too

678
00:38:02,880 --> 00:38:06,240
instead of a point estimate it outputs

679
00:38:06,240 --> 00:38:08,320
a probability distribution over

680
00:38:08,320 --> 00:38:10,079
transmission times

681
00:38:10,079 --> 00:38:12,960
and we found it to be useful when

682
00:38:12,960 --> 00:38:16,880
maximizing the expected qe

683
00:38:16,960 --> 00:38:20,880
in sum ttp has several uncommon features

684
00:38:20,880 --> 00:38:22,160
in the design

685
00:38:22,160 --> 00:38:24,960
and our ablation study found each of

686
00:38:24,960 --> 00:38:25,920
these features

687
00:38:25,920 --> 00:38:32,160
to be necessary to fubu's performance

688
00:38:32,160 --> 00:38:35,200
ttp's design enables it to be trained in

689
00:38:35,200 --> 00:38:36,480
situ

690
00:38:36,480 --> 00:38:39,200
meaning in place on real data from the

691
00:38:39,200 --> 00:38:39,920
deployment

692
00:38:39,920 --> 00:38:43,599
environment buffer the training data are

693
00:38:43,599 --> 00:38:44,240
sampled

694
00:38:44,240 --> 00:38:47,440
and fed into tdp as individual user

695
00:38:47,440 --> 00:38:48,800
streams

696
00:38:48,800 --> 00:38:51,280
each user stream contains a chunk by

697
00:38:51,280 --> 00:38:53,119
chunk series

698
00:38:53,119 --> 00:38:55,119
including the size and actual

699
00:38:55,119 --> 00:38:56,400
transmission time

700
00:38:56,400 --> 00:39:00,000
of each chunk and the required tcp

701
00:39:00,000 --> 00:39:03,280
statistics on the server

702
00:39:03,280 --> 00:39:06,079
we use standard supervised learning to

703
00:39:06,079 --> 00:39:07,440
train ttp

704
00:39:07,440 --> 00:39:10,000
to minimize the difference between its

705
00:39:10,000 --> 00:39:11,200
predictions

706
00:39:11,200 --> 00:39:13,680
and the actual transmission times of

707
00:39:13,680 --> 00:39:16,078
chunks

708
00:39:16,800 --> 00:39:19,520
note that learning in situ does not

709
00:39:19,520 --> 00:39:20,560
require

710
00:39:20,560 --> 00:39:23,599
any network simulators or replay any

711
00:39:23,599 --> 00:39:24,720
recorded

712
00:39:24,720 --> 00:39:27,760
throughput traces because if an

713
00:39:27,760 --> 00:39:28,560
algorithm

714
00:39:28,560 --> 00:39:31,440
is learned in simulation and evaluated

715
00:39:31,440 --> 00:39:32,800
in the real world

716
00:39:32,800 --> 00:39:35,839
the gap between simulation and reality

717
00:39:35,839 --> 00:39:38,880
may cause generalization issues

718
00:39:38,880 --> 00:39:43,839
which we'd like to avoid

719
00:39:44,560 --> 00:39:47,040
once the only system uncertainty is

720
00:39:47,040 --> 00:39:49,359
approximated by ttp

721
00:39:49,359 --> 00:39:52,079
the remaining question is how to

722
00:39:52,079 --> 00:39:53,680
actually select the version

723
00:39:53,680 --> 00:39:57,839
for each video chunk what foogo does

724
00:39:57,839 --> 00:40:00,640
is to look five chunks ahead and

725
00:40:00,640 --> 00:40:01,440
optimize

726
00:40:01,440 --> 00:40:06,079
the total qe in a look ahead horizon

727
00:40:06,079 --> 00:40:08,880
roughly speaking the qe function

728
00:40:08,880 --> 00:40:11,359
includes higher video quality

729
00:40:11,359 --> 00:40:13,839
lower quality variation and less

730
00:40:13,839 --> 00:40:16,720
rebuffering time

731
00:40:17,520 --> 00:40:21,040
given ttp this optimization

732
00:40:21,040 --> 00:40:24,240
problem of maximizing qe can be solved

733
00:40:24,240 --> 00:40:26,319
with the well-known technique

734
00:40:26,319 --> 00:40:29,520
in markov decision process called value

735
00:40:29,520 --> 00:40:31,440
iteration

736
00:40:31,440 --> 00:40:33,359
we don't need to look into the formula

737
00:40:33,359 --> 00:40:35,200
because it's basically dynamic

738
00:40:35,200 --> 00:40:36,480
programming

739
00:40:36,480 --> 00:40:40,240
which can be computed in real time

740
00:40:40,240 --> 00:40:42,800
this behavior is also interpretable

741
00:40:42,800 --> 00:40:47,280
because we know exactly what's going on

742
00:40:48,720 --> 00:40:52,880
after the optimal plan is computed

743
00:40:52,880 --> 00:40:56,240
fugu only takes the first step and then

744
00:40:56,240 --> 00:41:00,240
re-plans for the next five chunks

745
00:41:00,240 --> 00:41:02,400
this is also a classical technique in

746
00:41:02,400 --> 00:41:03,680
control theory

747
00:41:03,680 --> 00:41:06,640
called model predictive control which

748
00:41:06,640 --> 00:41:08,400
proves to mitigate the

749
00:41:08,400 --> 00:41:11,599
accumulation of errors

750
00:41:12,880 --> 00:41:16,000
putting everything together including

751
00:41:16,000 --> 00:41:19,680
the buffer video server the model based

752
00:41:19,680 --> 00:41:20,800
controller

753
00:41:20,800 --> 00:41:25,359
and ttp fugu falls into a class of

754
00:41:25,359 --> 00:41:28,480
reinforcement learning or rl algorithms

755
00:41:28,480 --> 00:41:31,839
called model based rl

756
00:41:31,839 --> 00:41:34,800
we first deploy a version of fugu on

757
00:41:34,800 --> 00:41:36,800
puffer's video server

758
00:41:36,800 --> 00:41:39,839
and focus model based controller will

759
00:41:39,839 --> 00:41:40,800
plan ahead

760
00:41:40,800 --> 00:41:43,359
and select the bit grid when it receives

761
00:41:43,359 --> 00:41:45,040
necessary information

762
00:41:45,040 --> 00:41:48,800
from the video server the optimal plan

763
00:41:48,800 --> 00:41:50,160
of chunk qualities

764
00:41:50,160 --> 00:41:52,960
is computed in real time with dynamic

765
00:41:52,960 --> 00:41:53,760
programming

766
00:41:53,760 --> 00:41:56,800
during which tdp is queried to predict

767
00:41:56,800 --> 00:41:58,319
transmission times

768
00:41:58,319 --> 00:42:00,839
repeatedly for the chance of our

769
00:42:00,839 --> 00:42:02,640
interest

770
00:42:02,640 --> 00:42:05,200
after new data is collected and

771
00:42:05,200 --> 00:42:06,319
aggregated

772
00:42:06,319 --> 00:42:09,599
we retrain tdp offline using supervised

773
00:42:09,599 --> 00:42:12,720
learning and deploy the new version of

774
00:42:12,720 --> 00:42:13,359
fugu

775
00:42:13,359 --> 00:42:17,040
on the next day this paradigm i just

776
00:42:17,040 --> 00:42:18,079
described

777
00:42:18,079 --> 00:42:21,200
is model-based reinforcement learning

778
00:42:21,200 --> 00:42:24,720
but its core component is really the ttp

779
00:42:24,720 --> 00:42:30,400
which is learned in situ

780
00:42:30,400 --> 00:42:32,560
once again let's come back to this

781
00:42:32,560 --> 00:42:33,599
figure

782
00:42:33,599 --> 00:42:36,640
that shows average video quality

783
00:42:36,640 --> 00:42:40,319
on the y-axis and style ratio

784
00:42:40,319 --> 00:42:44,079
on the reverse x-axis the better qe

785
00:42:44,079 --> 00:42:47,119
is up and to the right

786
00:42:47,119 --> 00:42:50,160
these results are obtained by analyzing

787
00:42:50,160 --> 00:42:53,440
13 years of video data sent in more than

788
00:42:53,440 --> 00:42:58,079
600 000 video streams from puffer

789
00:42:58,079 --> 00:43:00,560
here are four state-of-the-art avr

790
00:43:00,560 --> 00:43:02,079
algorithms

791
00:43:02,079 --> 00:43:04,800
bba is a simple buffer-based avr

792
00:43:04,800 --> 00:43:05,760
algorithms

793
00:43:05,760 --> 00:43:10,319
algorithm published at sitcom 2014.

794
00:43:10,319 --> 00:43:13,040
it selects video bit rate based only on

795
00:43:13,040 --> 00:43:13,760
users

796
00:43:13,760 --> 00:43:17,000
playback buffer level

797
00:43:17,000 --> 00:43:20,720
mpchm and the robust mpc hm

798
00:43:20,720 --> 00:43:24,079
are two variants of an abr scheme

799
00:43:24,079 --> 00:43:27,200
from sitcom 2015. it

800
00:43:27,200 --> 00:43:30,160
leverages the classical model predictive

801
00:43:30,160 --> 00:43:31,040
model

802
00:43:31,040 --> 00:43:34,160
same as in fugu's model predictive

803
00:43:34,160 --> 00:43:37,599
model based controller however it tries

804
00:43:37,599 --> 00:43:39,440
to predict the future throughput

805
00:43:39,440 --> 00:43:42,480
using the harmonic mean of some past

806
00:43:42,480 --> 00:43:45,440
throughput measurements

807
00:43:46,000 --> 00:43:49,359
the last abr in this figure is pensive

808
00:43:49,359 --> 00:43:53,599
from sitcom 2017 which is also based on

809
00:43:53,599 --> 00:43:56,240
reinforcement learning

810
00:43:56,240 --> 00:43:59,119
different from learning in situ nc

811
00:43:59,119 --> 00:44:02,880
requires training in network simulators

812
00:44:02,880 --> 00:44:05,200
although their paper reports near

813
00:44:05,200 --> 00:44:07,680
optimal performance in simulation

814
00:44:07,680 --> 00:44:10,240
unfortunately its performance did not

815
00:44:10,240 --> 00:44:12,160
generalize from simulation

816
00:44:12,160 --> 00:44:15,839
to the real internet for instance

817
00:44:15,839 --> 00:44:19,280
although its rebuffering ratio

818
00:44:19,280 --> 00:44:23,359
is lower than bba and npc hm

819
00:44:23,359 --> 00:44:26,960
its average video quality is worse than

820
00:44:26,960 --> 00:44:29,280
them

821
00:44:30,079 --> 00:44:33,440
in this figure fugu is here it

822
00:44:33,440 --> 00:44:37,040
achieved the highest video quality

823
00:44:37,040 --> 00:44:40,240
and the lowest star issue except robust

824
00:44:40,240 --> 00:44:41,200
mpc

825
00:44:41,200 --> 00:44:44,160
has a lower star ratio than fugu but

826
00:44:44,160 --> 00:44:44,640
that

827
00:44:44,640 --> 00:44:51,839
comes at a great cost of video quality

828
00:44:52,400 --> 00:44:54,880
this table contains the raw performance

829
00:44:54,880 --> 00:44:55,599
numbers

830
00:44:55,599 --> 00:44:58,720
of the same experiment where

831
00:44:58,720 --> 00:45:02,800
the first row is fugu we can see

832
00:45:02,800 --> 00:45:05,839
fugu's mean star ratio in the first

833
00:45:05,839 --> 00:45:06,560
column

834
00:45:06,560 --> 00:45:09,680
is only 0.01 percent

835
00:45:09,680 --> 00:45:13,040
higher than the lowest scheme

836
00:45:13,040 --> 00:45:15,760
and fugu is the best on the other

837
00:45:15,760 --> 00:45:17,040
dimensions

838
00:45:17,040 --> 00:45:20,000
including the mean as sm we saw in in

839
00:45:20,000 --> 00:45:20,480
the last

840
00:45:20,480 --> 00:45:23,680
slide in a third column

841
00:45:23,680 --> 00:45:26,640
we see fugu's quality variation is also

842
00:45:26,640 --> 00:45:28,240
the lowest

843
00:45:28,240 --> 00:45:31,359
meaning that the video delivered by fugu

844
00:45:31,359 --> 00:45:35,680
is more smooth than the other schemes

845
00:45:36,160 --> 00:45:38,720
the last column shows an interesting

846
00:45:38,720 --> 00:45:40,160
performance metric

847
00:45:40,160 --> 00:45:44,160
time on site or session durations

848
00:45:44,160 --> 00:45:47,440
recall that power users are blinded to

849
00:45:47,440 --> 00:45:50,800
the assignment of apr algorithms

850
00:45:50,800 --> 00:45:54,079
under this randomized setting users

851
00:45:54,079 --> 00:45:57,920
whose sessions were assigned to fuku

852
00:45:57,920 --> 00:46:00,160
chose to remain on the powerful video

853
00:46:00,160 --> 00:46:01,599
player about

854
00:46:01,599 --> 00:46:04,800
one to three minutes longer than on

855
00:46:04,800 --> 00:46:05,599
average

856
00:46:05,599 --> 00:46:10,240
than those assigned to other schemes

857
00:46:12,880 --> 00:46:15,599
let's now move on to their code start

858
00:46:15,599 --> 00:46:17,119
performance

859
00:46:17,119 --> 00:46:20,240
that is how well they perform

860
00:46:20,240 --> 00:46:22,319
in new sessions which they hadn't

861
00:46:22,319 --> 00:46:25,520
streamed any video to

862
00:46:25,760 --> 00:46:29,280
we plot the average video quality

863
00:46:29,280 --> 00:46:32,240
of the first chunk served in such new

864
00:46:32,240 --> 00:46:33,040
sessions

865
00:46:33,040 --> 00:46:36,880
on the y-axis and the startup delay

866
00:46:36,880 --> 00:46:40,560
on the reversed x-axis

867
00:46:40,560 --> 00:46:43,680
on a cold start to a new session

868
00:46:43,680 --> 00:46:46,000
firework argues that since the abr

869
00:46:46,000 --> 00:46:46,880
algorithm

870
00:46:46,880 --> 00:46:48,720
knows nothing about the network

871
00:46:48,720 --> 00:46:51,359
conditions of the new session

872
00:46:51,359 --> 00:46:54,079
it needs some session clustering

873
00:46:54,079 --> 00:46:54,880
algorithm

874
00:46:54,880 --> 00:46:57,680
to determine the nature chunk quality

875
00:46:57,680 --> 00:47:00,160
based on other similar sessions

876
00:47:00,160 --> 00:47:03,680
otherwise apr algorithms will have to

877
00:47:03,680 --> 00:47:05,200
choose the first chunk

878
00:47:05,200 --> 00:47:08,240
blindly which could be too conservative

879
00:47:08,240 --> 00:47:12,560
or aggressive we don't know by contrast

880
00:47:12,560 --> 00:47:16,400
fugu provides an alternative option

881
00:47:16,400 --> 00:47:18,800
recall that one of the input features of

882
00:47:18,800 --> 00:47:19,920
fugu

883
00:47:19,920 --> 00:47:24,400
focus ttp is tcp statistics such as

884
00:47:24,400 --> 00:47:27,359
rtt measurements which are actually

885
00:47:27,359 --> 00:47:28,319
available

886
00:47:28,319 --> 00:47:31,680
as soon as the underlying http

887
00:47:31,680 --> 00:47:37,040
or tls or tcp connection is established

888
00:47:37,040 --> 00:47:39,760
and knowing this information turns out

889
00:47:39,760 --> 00:47:41,040
to allow fugu

890
00:47:41,040 --> 00:47:44,319
to begin safely at a higher first chunk

891
00:47:44,319 --> 00:47:45,760
quality

892
00:47:45,760 --> 00:47:49,200
than the other schemes while maintaining

893
00:47:49,200 --> 00:47:53,839
roughly the same level of startup delay

894
00:47:56,319 --> 00:47:59,119
to conclude today's presentation i

895
00:47:59,119 --> 00:48:00,960
introduced the puffer

896
00:48:00,960 --> 00:48:03,520
a video streaming platform that we built

897
00:48:03,520 --> 00:48:05,200
for the research community

898
00:48:05,200 --> 00:48:08,880
to train and test novel algorithms

899
00:48:08,880 --> 00:48:12,240
it has 130 000 real users now

900
00:48:12,240 --> 00:48:14,559
and has streamed more than 60 years of

901
00:48:14,559 --> 00:48:16,880
video

902
00:48:16,880 --> 00:48:18,960
using the data we had a surprising

903
00:48:18,960 --> 00:48:20,240
finding that

904
00:48:20,240 --> 00:48:23,040
the internet is way more noisy than

905
00:48:23,040 --> 00:48:25,119
expected

906
00:48:25,119 --> 00:48:27,599
you may need as much as two years of

907
00:48:27,599 --> 00:48:28,800
data per scheme

908
00:48:28,800 --> 00:48:34,480
to reliably measure a 20 precision

909
00:48:34,480 --> 00:48:37,520
we outperformed existing abr algorithms

910
00:48:37,520 --> 00:48:40,079
consistently in the real world through

911
00:48:40,079 --> 00:48:41,119
the design of

912
00:48:41,119 --> 00:48:44,640
fugu and fugu's core component

913
00:48:44,640 --> 00:48:47,599
is a neural network ttp that predicts

914
00:48:47,599 --> 00:48:49,200
the transmission time

915
00:48:49,200 --> 00:48:52,640
of each chunk tdp

916
00:48:52,640 --> 00:48:56,480
is trained in situ meaning unreal data

917
00:48:56,480 --> 00:49:00,480
from the deployment environment buffer

918
00:49:00,480 --> 00:49:02,960
that's all for today and i'm happy to

919
00:49:02,960 --> 00:49:04,559
take questions

920
00:49:04,559 --> 00:49:06,880
thank you

921
00:49:12,240 --> 00:49:15,520
okay thank you excellent talk uh

922
00:49:15,520 --> 00:49:19,040
from francis um francis if you uh

923
00:49:19,040 --> 00:49:22,240
if you want to turn on your video um

924
00:49:22,240 --> 00:49:25,599
i see we we have a a whole bunch of

925
00:49:25,599 --> 00:49:29,760
uh uh questions and conversation in the

926
00:49:29,760 --> 00:49:30,240
chat

927
00:49:30,240 --> 00:49:33,280
uh i hope not everyone has uh

928
00:49:33,280 --> 00:49:34,880
spent their whole time asking questions

929
00:49:34,880 --> 00:49:36,640
in the chat and then there are some left

930
00:49:36,640 --> 00:49:39,839
for francis uh so if anyone has any

931
00:49:39,839 --> 00:49:42,240
any questions uh for francis uh but

932
00:49:42,240 --> 00:49:45,280
please uh please join the queue

933
00:49:45,280 --> 00:49:48,319
yeah thanks thanks

934
00:49:48,319 --> 00:49:50,400
uh

935
00:49:51,760 --> 00:49:54,960
um okay so regarding the watch time

936
00:49:54,960 --> 00:49:56,960
uh so time outside is definitely a

937
00:49:56,960 --> 00:49:58,319
useful metric for

938
00:49:58,319 --> 00:50:01,200
for the industry but the observation we

939
00:50:01,200 --> 00:50:01,680
had

940
00:50:01,680 --> 00:50:05,599
is that users chose to just watch fugu

941
00:50:05,599 --> 00:50:07,200
longer than the other algorithms

942
00:50:07,200 --> 00:50:10,240
and there's a cdf graph in our paper

943
00:50:10,240 --> 00:50:13,599
and typically uh for

944
00:50:13,599 --> 00:50:16,640
sessions longer than five minutes um

945
00:50:16,640 --> 00:50:20,000
users tend to uh stay with

946
00:50:20,000 --> 00:50:21,520
but other than that we really don't

947
00:50:21,520 --> 00:50:24,000
understand the reasons

948
00:50:24,000 --> 00:50:27,119
and what other factors there might be uh

949
00:50:27,119 --> 00:50:28,319
affecting

950
00:50:28,319 --> 00:50:31,520
that user behavior and

951
00:50:31,520 --> 00:50:34,640
other question is um can fugu predict

952
00:50:34,640 --> 00:50:37,280
whether having a lower base quality in

953
00:50:37,280 --> 00:50:38,160
the manifest

954
00:50:38,160 --> 00:50:40,800
of encoded qualities will they eliminate

955
00:50:40,800 --> 00:50:41,920
more stalls

956
00:50:41,920 --> 00:50:45,119
okay yeah that's a good point uh

957
00:50:45,119 --> 00:50:48,240
thanks david for the question uh

958
00:50:48,240 --> 00:50:51,520
we already have a more fine green

959
00:50:51,520 --> 00:50:54,400
bit ready lighter compared with i

960
00:50:54,400 --> 00:50:54,880
believe

961
00:50:54,880 --> 00:50:58,559
most of the industrial players

962
00:50:58,559 --> 00:51:01,599
we have 10 versions for each video track

963
00:51:01,599 --> 00:51:04,880
including four resolutions

964
00:51:04,880 --> 00:51:08,480
with different crf encoding parameters

965
00:51:08,480 --> 00:51:11,520
and we uh spread out you know

966
00:51:11,520 --> 00:51:14,720
the uh the bit rates we

967
00:51:14,720 --> 00:51:16,880
we have a monit we have a dashboard to

968
00:51:16,880 --> 00:51:17,760
monitor

969
00:51:17,760 --> 00:51:20,640
whether the 10 bit rates are evenly

970
00:51:20,640 --> 00:51:21,599
spread out

971
00:51:21,599 --> 00:51:24,640
in terms of the the their

972
00:51:24,640 --> 00:51:27,839
bit rates the sizes and their ascent

973
00:51:27,839 --> 00:51:28,800
values

974
00:51:28,800 --> 00:51:32,319
so we picked 10 levels

975
00:51:32,319 --> 00:51:35,760
and uh it's

976
00:51:35,760 --> 00:51:39,440
the lowest base quality i believe

977
00:51:39,440 --> 00:51:42,480
our base quality is already

978
00:51:42,480 --> 00:51:45,760
low enough for for users

979
00:51:45,760 --> 00:51:48,960
yeah okay

980
00:51:48,960 --> 00:51:50,960
okay if anyone wants to jump into the

981
00:51:50,960 --> 00:51:52,800
audio to ask questions as well

982
00:51:52,800 --> 00:51:56,079
then we have that let's see

983
00:51:56,079 --> 00:51:59,839
slide 29 give me a second

984
00:51:59,839 --> 00:52:03,200
okay when calculating the median

985
00:52:03,200 --> 00:52:06,240
versus the mean shows similar spreads

986
00:52:06,240 --> 00:52:09,118
in quality

987
00:52:14,000 --> 00:52:17,200
we we didn't calculate the median

988
00:52:17,200 --> 00:52:20,319
values but i would suppose i would

989
00:52:20,319 --> 00:52:21,680
assume

990
00:52:21,680 --> 00:52:25,440
they showed similar results

991
00:52:28,480 --> 00:52:33,839
did i miss any other questions

992
00:52:34,559 --> 00:52:37,119
it seems everyone's jumping into the the

993
00:52:37,119 --> 00:52:38,480
chats there

994
00:52:38,480 --> 00:52:42,079
um area um

995
00:52:43,040 --> 00:52:46,319
do i need to press something to

996
00:52:46,319 --> 00:52:49,839
yes let me see how that works yes i can

997
00:52:49,839 --> 00:52:50,640
hear you

998
00:52:50,640 --> 00:52:54,559
perfect um so i'm i'm not a specialist

999
00:52:54,559 --> 00:52:55,520
on

1000
00:52:55,520 --> 00:52:58,000
video coders um but you have a couple of

1001
00:52:58,000 --> 00:53:00,000
other there that you compared with

1002
00:53:00,000 --> 00:53:02,640
and are these used in practice or do you

1003
00:53:02,640 --> 00:53:04,240
have any knowledge about what the big

1004
00:53:04,240 --> 00:53:06,160
video platforms are using and how

1005
00:53:06,160 --> 00:53:09,760
this would compare oh

1006
00:53:09,760 --> 00:53:12,319
your question is about bit rate or the

1007
00:53:12,319 --> 00:53:14,720
other abr algorithms the other api

1008
00:53:14,720 --> 00:53:15,760
algorithms

1009
00:53:15,760 --> 00:53:19,200
the other api algorithms um so

1010
00:53:19,200 --> 00:53:23,359
the bba so i i would say

1011
00:53:23,359 --> 00:53:25,760
the all the other four api algorithms

1012
00:53:25,760 --> 00:53:28,720
are research algorithms

1013
00:53:28,720 --> 00:53:32,319
and in terms of industry adoption

1014
00:53:32,319 --> 00:53:36,240
i think probably bba a variant of bba

1015
00:53:36,240 --> 00:53:39,680
is used by netflix because it was

1016
00:53:39,680 --> 00:53:40,559
proposed

1017
00:53:40,559 --> 00:53:44,079
by one of my friends uh actually my

1018
00:53:44,079 --> 00:53:44,640
colleagues

1019
00:53:44,640 --> 00:53:48,000
uh at netflix

1020
00:53:48,000 --> 00:53:51,520
so it's a heuristic based algorithm

1021
00:53:51,520 --> 00:53:53,760
simple algorithm based on only the

1022
00:53:53,760 --> 00:53:55,440
buffer size

1023
00:53:55,440 --> 00:53:59,119
and for mpc and the robust mpc they were

1024
00:53:59,119 --> 00:54:00,559
proposed in

1025
00:54:00,559 --> 00:54:04,000
sitcom 2015

1026
00:54:04,000 --> 00:54:07,040
and pensive was proposed in sitcom 2017.

1027
00:54:07,040 --> 00:54:09,760
they are both research algorithms

1028
00:54:09,760 --> 00:54:12,319
so that's why we uh compared with them

1029
00:54:12,319 --> 00:54:14,319
but i'm not sure if any

1030
00:54:14,319 --> 00:54:18,640
real video service providers are using

1031
00:54:18,640 --> 00:54:20,400
them

1032
00:54:20,400 --> 00:54:22,400
yeah i mean i read some papers where

1033
00:54:22,400 --> 00:54:24,319
they try to kind of understand

1034
00:54:24,319 --> 00:54:26,400
how these algorithms unders work and

1035
00:54:26,400 --> 00:54:28,079
it's usually kind of a black box thing

1036
00:54:28,079 --> 00:54:29,440
but the one thing i

1037
00:54:29,440 --> 00:54:30,720
kind of got from is that these

1038
00:54:30,720 --> 00:54:32,400
algorithms also kind of change very

1039
00:54:32,400 --> 00:54:33,839
frequently so it's probably

1040
00:54:33,839 --> 00:54:35,920
interesting to to find out more there

1041
00:54:35,920 --> 00:54:37,119
but also hard

1042
00:54:37,119 --> 00:54:40,319
as a researcher thank you yeah

1043
00:54:40,319 --> 00:54:43,200
no problem and actually i would say um

1044
00:54:43,200 --> 00:54:45,119
they're not as black box

1045
00:54:45,119 --> 00:54:49,520
as uh as we thought so for instance bba

1046
00:54:49,520 --> 00:54:52,880
is pretty simple so below

1047
00:54:52,880 --> 00:54:55,520
a threshold of the playback buffer size

1048
00:54:55,520 --> 00:54:56,240
maybe three

1049
00:54:56,240 --> 00:54:59,680
seconds we uh we ask the video

1050
00:54:59,680 --> 00:55:02,160
server to send the lowest quality and

1051
00:55:02,160 --> 00:55:04,640
above maybe 12 seconds

1052
00:55:04,640 --> 00:55:07,920
we send the highest quality and between

1053
00:55:07,920 --> 00:55:11,200
three seconds and 12 seconds they use a

1054
00:55:11,200 --> 00:55:12,240
linear

1055
00:55:12,240 --> 00:55:15,440
you know relation linear interpolation

1056
00:55:15,440 --> 00:55:18,480
between different bit rates

1057
00:55:18,480 --> 00:55:22,720
so that's uh pretty interpretable

1058
00:55:24,880 --> 00:55:27,599
uh thanks ali for yeah yeah thanks and

1059
00:55:27,599 --> 00:55:28,880
ali in the chat

1060
00:55:28,880 --> 00:55:31,040
netflix never confirmed or denied using

1061
00:55:31,040 --> 00:55:32,960
pva or anything else

1062
00:55:32,960 --> 00:55:36,720
um i think when we gave a talk so bba

1063
00:55:36,720 --> 00:55:38,079
was proposed by

1064
00:55:38,079 --> 00:55:41,200
uh you know t y huang uh when

1065
00:55:41,200 --> 00:55:44,240
she studied at stanford with with the

1066
00:55:44,240 --> 00:55:45,040
advice by

1067
00:55:45,040 --> 00:55:48,640
by nick and then um

1068
00:55:48,640 --> 00:55:51,680
i believe uh yes but that was

1069
00:55:51,680 --> 00:55:54,720
a decade ago so it's uh i'm sure netflix

1070
00:55:54,720 --> 00:55:55,599
has advanced

1071
00:55:55,599 --> 00:55:58,960
since then yeah and when we

1072
00:55:58,960 --> 00:56:01,359
give a talk uh the puffer talk at

1073
00:56:01,359 --> 00:56:02,160
netflix

1074
00:56:02,160 --> 00:56:04,240
yes uh they didn't review any

1075
00:56:04,240 --> 00:56:06,400
confidential information so i'm i'm not

1076
00:56:06,400 --> 00:56:09,760
saying anything uh not a lot um

1077
00:56:09,760 --> 00:56:12,079
but but you are right so maybe they have

1078
00:56:12,079 --> 00:56:13,280
deployed or

1079
00:56:13,280 --> 00:56:16,799
are using a variant of vba or maybe not

1080
00:56:16,799 --> 00:56:17,280
well

1081
00:56:17,280 --> 00:56:20,400
i i don't really know actually has there

1082
00:56:20,400 --> 00:56:22,400
been similar work on video conferencing

1083
00:56:22,400 --> 00:56:23,839
systems

1084
00:56:23,839 --> 00:56:27,119
zoom gc mi echo uh yes

1085
00:56:27,119 --> 00:56:30,960
so abr's corresponding work

1086
00:56:30,960 --> 00:56:33,119
in video conferencing is bandwidth

1087
00:56:33,119 --> 00:56:34,960
estimation or

1088
00:56:34,960 --> 00:56:37,280
broadly speaking also congestion control

1089
00:56:37,280 --> 00:56:38,079
for

1090
00:56:38,079 --> 00:56:41,440
uh real-time video and um

1091
00:56:41,440 --> 00:56:44,160
it also adapts to different like varying

1092
00:56:44,160 --> 00:56:46,079
network conditions by

1093
00:56:46,079 --> 00:56:49,119
uh changing the sending bit rate of

1094
00:56:49,119 --> 00:56:52,240
of the video encoder and actually i'm

1095
00:56:52,240 --> 00:56:53,040
working with

1096
00:56:53,040 --> 00:56:56,000
ali so we're hosting microsoft is

1097
00:56:56,000 --> 00:56:57,200
organizing

1098
00:56:57,200 --> 00:56:59,440
a grand challenge on bandwidth

1099
00:56:59,440 --> 00:57:00,400
estimation

1100
00:57:00,400 --> 00:57:02,400
for real-time communications we're

1101
00:57:02,400 --> 00:57:04,160
hosting it as a grant challenge

1102
00:57:04,160 --> 00:57:07,440
at mmcis this year and ali

1103
00:57:07,440 --> 00:57:10,960
has been kindly helping us

1104
00:57:10,960 --> 00:57:13,920
putting things together sort things out

1105
00:57:13,920 --> 00:57:14,480
yeah

1106
00:57:14,480 --> 00:57:17,520
thanks for sending the link so uh

1107
00:57:17,520 --> 00:57:20,960
jonathan had a question i think

1108
00:57:20,960 --> 00:57:24,400
hi can you hear me yes yes um

1109
00:57:24,400 --> 00:57:26,319
did you did you have a chance to look at

1110
00:57:26,319 --> 00:57:27,440
the the

1111
00:57:27,440 --> 00:57:30,720
the p99 or the p99.9 performance

1112
00:57:30,720 --> 00:57:33,599
so the performance of the very tail uh

1113
00:57:33,599 --> 00:57:35,920
of the

1114
00:57:36,640 --> 00:57:40,480
yeah that's a good question um

1115
00:57:40,480 --> 00:57:42,480
uh let me see i i don't think we

1116
00:57:42,480 --> 00:57:43,920
reported any

1117
00:57:43,920 --> 00:57:46,880
uh percentile or tail performance in the

1118
00:57:46,880 --> 00:57:47,680
paper but

1119
00:57:47,680 --> 00:57:51,760
we did look at them and uh especially in

1120
00:57:51,760 --> 00:57:54,480
those figures we have included the

1121
00:57:54,480 --> 00:57:56,240
confidence in your intervals

1122
00:57:56,240 --> 00:57:59,599
so we're confident that that interval

1123
00:57:59,599 --> 00:58:06,240
has the mean value the p99 p95

1124
00:58:06,480 --> 00:58:08,720
honestly i i don't have the answer but i

1125
00:58:08,720 --> 00:58:10,160
believed we checked before

1126
00:58:10,160 --> 00:58:14,559
yeah i agree that tail performance is

1127
00:58:14,559 --> 00:58:17,040
critical

1128
00:58:17,839 --> 00:58:22,240
thanks thanks for

1129
00:58:22,240 --> 00:58:25,599
um so can you can you maybe say

1130
00:58:25,599 --> 00:58:26,319
something about

1131
00:58:26,319 --> 00:58:28,400
uh some of the difficulties or

1132
00:58:28,400 --> 00:58:29,520
challenges in

1133
00:58:29,520 --> 00:58:32,000
running uh uh and uh sort of research

1134
00:58:32,000 --> 00:58:33,440
experiments as

1135
00:58:33,440 --> 00:58:36,799
a grad student at this sort of scale

1136
00:58:36,799 --> 00:58:38,160
essentially one of the larger

1137
00:58:38,160 --> 00:58:40,400
experiments in the space

1138
00:58:40,400 --> 00:58:45,760
yeah so um in my experience

1139
00:58:45,760 --> 00:58:49,040
having real users is

1140
00:58:49,040 --> 00:58:52,160
is like having real impact on the world

1141
00:58:52,160 --> 00:58:55,359
and that's super exciting to me but

1142
00:58:55,359 --> 00:58:57,520
uh the availability i would say that's

1143
00:58:57,520 --> 00:58:59,520
the the biggest challenge

1144
00:58:59,520 --> 00:59:04,160
uh usually when we uh write some code

1145
00:59:04,160 --> 00:59:07,200
it can work 99 of time but

1146
00:59:07,200 --> 00:59:09,680
if real users are watching it all the

1147
00:59:09,680 --> 00:59:10,480
time

1148
00:59:10,480 --> 00:59:13,680
then um that the system

1149
00:59:13,680 --> 00:59:16,799
should should never go down like

1150
00:59:16,799 --> 00:59:20,000
too frequently and as soon as um

1151
00:59:20,000 --> 00:59:22,720
buffer stops working i would receive

1152
00:59:22,720 --> 00:59:24,000
user complaints

1153
00:59:24,000 --> 00:59:27,680
in emails so i i'm essentially on call

1154
00:59:27,680 --> 00:59:28,799
24 7.

1155
00:59:28,799 --> 00:59:31,440
i have a so that's why we built a

1156
00:59:31,440 --> 00:59:32,000
monitoring

1157
00:59:32,000 --> 00:59:35,200
system so anytime there's a bug making

1158
00:59:35,200 --> 00:59:37,200
the the service crash

1159
00:59:37,200 --> 00:59:39,920
i would receive a receiver alert so

1160
00:59:39,920 --> 00:59:40,559
ahead of

1161
00:59:40,559 --> 00:59:43,920
our user emails thanks our users for

1162
00:59:43,920 --> 00:59:47,119
letting us know of course um so i

1163
00:59:47,119 --> 00:59:49,520
i will always try to maybe i'm in the

1164
00:59:49,520 --> 00:59:51,040
middle of nine i would

1165
00:59:51,040 --> 00:59:53,839
still get up and fix the the bug

1166
00:59:53,839 --> 00:59:54,720
immediately

1167
00:59:54,720 --> 00:59:56,240
so that's the biggest challenge

1168
00:59:56,240 --> 00:59:57,839
availability and

1169
00:59:57,839 --> 01:00:00,880
especially for me the

1170
01:00:00,880 --> 01:00:04,079
almost the only engineer working on

1171
01:00:04,079 --> 01:00:07,520
developing the the platform um

1172
01:00:07,520 --> 01:00:11,119
it's it's really hard to maintain it

1173
01:00:11,839 --> 01:00:15,040
i i'd like to add one more thing yeah so

1174
01:00:15,040 --> 01:00:17,760
we are testing research schemes so

1175
01:00:17,760 --> 01:00:19,200
research code

1176
01:00:19,200 --> 01:00:22,559
is i i i i'm

1177
01:00:22,559 --> 01:00:24,160
yeah i don't want to say this but recent

1178
01:00:24,160 --> 01:00:25,839
code tends to be

1179
01:00:25,839 --> 01:00:30,558
messy so even though our code is

1180
01:00:30,960 --> 01:00:34,319
of relatively high quality but when we

1181
01:00:34,319 --> 01:00:36,160
run other algorithms

1182
01:00:36,160 --> 01:00:39,040
they use their research code on the

1183
01:00:39,040 --> 01:00:40,839
production system

1184
01:00:40,839 --> 01:00:43,839
and it it also crashes

1185
01:00:43,839 --> 01:00:48,160
uh many times so that's that's a pain

1186
01:00:48,160 --> 01:00:49,920
yeah it's it's a challenge it's a

1187
01:00:49,920 --> 01:00:51,920
challenge um

1188
01:00:51,920 --> 01:00:55,280
my other question um you to talk to what

1189
01:00:55,280 --> 01:00:56,720
extent is

1190
01:00:56,720 --> 01:00:58,559
i mean yeah obviously the specific

1191
01:00:58,559 --> 01:01:00,160
results you've got uh uh

1192
01:01:00,160 --> 01:01:03,280
uh relating to video uh but to what

1193
01:01:03,280 --> 01:01:04,960
extent do you do you think the

1194
01:01:04,960 --> 01:01:07,200
the types of issues you're running into

1195
01:01:07,200 --> 01:01:08,640
um with needing to do very

1196
01:01:08,640 --> 01:01:10,240
large scale very long-running

1197
01:01:10,240 --> 01:01:11,760
measurement studies uh

1198
01:01:11,760 --> 01:01:13,200
applied to other types of network

1199
01:01:13,200 --> 01:01:14,799
measurement research

1200
01:01:14,799 --> 01:01:16,000
and do you think you'd find the same

1201
01:01:16,000 --> 01:01:18,640
issues of confidence intervals and so on

1202
01:01:18,640 --> 01:01:19,440
if you

1203
01:01:19,440 --> 01:01:21,119
repeated other types of network

1204
01:01:21,119 --> 01:01:24,000
measurement experiments

1205
01:01:24,000 --> 01:01:27,599
yes i would expect

1206
01:01:27,599 --> 01:01:30,640
the um the findings to generalize to

1207
01:01:30,640 --> 01:01:35,040
other network measurements because

1208
01:01:35,040 --> 01:01:38,640
so we did see heavy-tailed

1209
01:01:38,640 --> 01:01:42,880
user behavior but we believe

1210
01:01:42,880 --> 01:01:46,319
most of the okay

1211
01:01:46,319 --> 01:01:49,200
part of the reason why we observe the

1212
01:01:49,200 --> 01:01:50,160
noisy

1213
01:01:50,160 --> 01:01:53,119
sliver of the internet was because of

1214
01:01:53,119 --> 01:01:54,000
the network

1215
01:01:54,000 --> 01:01:56,960
the network per se the inherent inherent

1216
01:01:56,960 --> 01:01:58,240
issues

1217
01:01:58,240 --> 01:02:01,119
um and heavy-tailed nature of the

1218
01:02:01,119 --> 01:02:02,480
network

1219
01:02:02,480 --> 01:02:05,599
and my past research has studied

1220
01:02:05,599 --> 01:02:10,079
congestion control and we observed also

1221
01:02:10,079 --> 01:02:12,160
very different findings from those

1222
01:02:12,160 --> 01:02:13,200
reported

1223
01:02:13,200 --> 01:02:16,880
in previous research papers

1224
01:02:16,880 --> 01:02:19,760
because when you measure congestion

1225
01:02:19,760 --> 01:02:20,559
control

1226
01:02:20,559 --> 01:02:23,599
or larger real-world test bed

1227
01:02:23,599 --> 01:02:26,640
and over many times many times

1228
01:02:26,640 --> 01:02:30,000
we tend to see different and

1229
01:02:30,000 --> 01:02:34,000
different results and noisy results

1230
01:02:34,000 --> 01:02:37,440
okay okay thank you all right

1231
01:02:37,440 --> 01:02:40,160
does anyone else have any questions for

1232
01:02:40,160 --> 01:02:42,720
francis

1233
01:02:44,640 --> 01:02:46,960
jonathan wonders if it's a question of

1234
01:02:46,960 --> 01:02:49,440
code optimization

1235
01:02:49,440 --> 01:02:52,000
so are you talking about the research

1236
01:02:52,000 --> 01:02:52,640
code

1237
01:02:52,640 --> 01:02:56,160
or anything else

1238
01:02:56,160 --> 01:02:59,279
yeah okay

1239
01:03:00,960 --> 01:03:04,319
i i'm not sure how to solve this issue

1240
01:03:04,319 --> 01:03:06,240
like writing research code on a

1241
01:03:06,240 --> 01:03:07,920
production system

1242
01:03:07,920 --> 01:03:09,920
i think typically people will just

1243
01:03:09,920 --> 01:03:11,920
reproduce where

1244
01:03:11,920 --> 01:03:14,880
fixed potential issues um potential

1245
01:03:14,880 --> 01:03:15,440
about

1246
01:03:15,440 --> 01:03:17,839
in the research code but in our case we

1247
01:03:17,839 --> 01:03:18,960
just we want to

1248
01:03:18,960 --> 01:03:22,799
faithfully compare with other algorithms

1249
01:03:22,799 --> 01:03:24,720
and report and evaluate their

1250
01:03:24,720 --> 01:03:26,000
performance

1251
01:03:26,000 --> 01:03:29,039
so i think it's challenging to

1252
01:03:29,039 --> 01:03:31,760
consider both that could you like both

1253
01:03:31,760 --> 01:03:34,240
aspects

1254
01:03:35,119 --> 01:03:36,960
compare server compute time for the

1255
01:03:36,960 --> 01:03:39,359
algorithms yeah that's a good question

1256
01:03:39,359 --> 01:03:42,640
um for our algorithm uh

1257
01:03:42,640 --> 01:03:45,119
and another deeper in first learning

1258
01:03:45,119 --> 01:03:46,799
based algorithm

1259
01:03:46,799 --> 01:03:50,160
yes we have to take into account the

1260
01:03:50,160 --> 01:03:51,359
compute time

1261
01:03:51,359 --> 01:03:54,319
and the compute resources required but

1262
01:03:54,319 --> 01:03:55,760
uh fortunately

1263
01:03:55,760 --> 01:03:58,799
uh none of the algorithms

1264
01:03:58,799 --> 01:04:01,200
consumes too much computer resource and

1265
01:04:01,200 --> 01:04:02,240
it takes just

1266
01:04:02,240 --> 01:04:06,160
uh typically several milliseconds

1267
01:04:06,160 --> 01:04:09,839
to uh to compute the decisions apr

1268
01:04:09,839 --> 01:04:11,119
decisions online

1269
01:04:11,119 --> 01:04:14,480
so that's not a bottleneck

1270
01:04:16,400 --> 01:04:19,520
so we did look at the computer time

1271
01:04:19,520 --> 01:04:21,520
but we didn't report it in the paper

1272
01:04:21,520 --> 01:04:23,359
because it was not about the mic

1273
01:04:23,359 --> 01:04:26,880
just to be clear sure

1274
01:04:26,880 --> 01:04:28,559
what information was included in the

1275
01:04:28,559 --> 01:04:30,240
state updates to

1276
01:04:30,240 --> 01:04:34,078
the mpc controller

1277
01:04:36,880 --> 01:04:40,160
i think you're asking about uh

1278
01:04:40,160 --> 01:04:43,839
fugu's model based controller right

1279
01:04:43,839 --> 01:04:46,880
so the information includes

1280
01:04:46,880 --> 01:04:50,079
the past eight chunks at their

1281
01:04:50,079 --> 01:04:52,559
transmission times and the sizes and

1282
01:04:52,559 --> 01:04:53,359
also the

1283
01:04:53,359 --> 01:04:56,880
size of the chunk two cents

1284
01:04:56,880 --> 01:05:00,559
and also low level tcp statistics

1285
01:05:00,559 --> 01:05:04,240
so those are the uh input features

1286
01:05:04,240 --> 01:05:06,400
as the states and they're also the

1287
01:05:06,400 --> 01:05:08,079
updates provided

1288
01:05:08,079 --> 01:05:12,160
to the controller sorry

1289
01:05:12,160 --> 01:05:15,920
so those are the inputs to uh to ttp

1290
01:05:15,920 --> 01:05:17,920
to the transmission time predictor and

1291
01:05:17,920 --> 01:05:18,960
for the model

1292
01:05:18,960 --> 01:05:22,880
based controller um

1293
01:05:22,880 --> 01:05:26,160
the input is

1294
01:05:26,160 --> 01:05:29,200
the current playback buffer level

1295
01:05:29,200 --> 01:05:31,599
and all the necessary chunk sizes

1296
01:05:31,599 --> 01:05:33,440
because it needs to

1297
01:05:33,440 --> 01:05:36,880
run this dynamic programming also known

1298
01:05:36,880 --> 01:05:37,119
as

1299
01:05:37,119 --> 01:05:41,119
value iteration algorithm online so

1300
01:05:41,119 --> 01:05:44,319
that's all it means

1301
01:05:48,319 --> 01:05:51,200
all right so last question from yeah

1302
01:05:51,200 --> 01:05:53,520
that's great

1303
01:05:53,520 --> 01:05:56,640
so does it leave a slow start often

1304
01:05:56,640 --> 01:05:59,760
uh so first of all um

1305
01:05:59,760 --> 01:06:03,119
the pensive paper in sitcom

1306
01:06:03,119 --> 01:06:06,160
2017 if i remember correctly they

1307
01:06:06,160 --> 01:06:07,280
disabled

1308
01:06:07,280 --> 01:06:10,880
this uh the free like the timeout the

1309
01:06:10,880 --> 01:06:11,680
tcp time

1310
01:06:11,680 --> 01:06:15,119
timeout such that it never or

1311
01:06:15,119 --> 01:06:18,160
it hardly leaves the slow start

1312
01:06:18,160 --> 01:06:19,920
sorry it hardly leaves the congestion

1313
01:06:19,920 --> 01:06:21,359
avoidance phase

1314
01:06:21,359 --> 01:06:24,640
so it doesn't return to the slow start

1315
01:06:24,640 --> 01:06:27,920
phase because um

1316
01:06:27,920 --> 01:06:30,799
when when you send a video chunk every

1317
01:06:30,799 --> 01:06:31,280
two

1318
01:06:31,280 --> 01:06:34,079
to four seconds we don't want to we

1319
01:06:34,079 --> 01:06:36,559
don't want congestion control to run pop

1320
01:06:36,559 --> 01:06:39,119
every time starting from the slow start

1321
01:06:39,119 --> 01:06:40,240
phase

1322
01:06:40,240 --> 01:06:42,880
so we can definitely disable it but in

1323
01:06:42,880 --> 01:06:44,559
our case

1324
01:06:44,559 --> 01:06:47,599
uh i believe we also disabled it so

1325
01:06:47,599 --> 01:06:50,640
uh it shouldn't a should

1326
01:06:50,640 --> 01:06:52,880
shouldn't go to uh or stay and still

1327
01:06:52,880 --> 01:06:55,599
start better off

1328
01:06:56,720 --> 01:07:00,480
all right so uh thank you francis uh

1329
01:07:00,480 --> 01:07:02,319
really nice talk uh some really good

1330
01:07:02,319 --> 01:07:03,680
discussion there

1331
01:07:03,680 --> 01:07:06,079
uh i i would normally say that uh uh

1332
01:07:06,079 --> 01:07:07,520
francis will be around for the rest of

1333
01:07:07,520 --> 01:07:09,359
the week uh and you should uh grab him

1334
01:07:09,359 --> 01:07:11,039
in the break if you have any questions

1335
01:07:11,039 --> 01:07:13,039
uh clearly this is a little bit

1336
01:07:13,039 --> 01:07:15,200
difficult but hopefully francis uh will

1337
01:07:15,200 --> 01:07:17,039
be able to join that the gather town

1338
01:07:17,039 --> 01:07:20,000
uh in some of the breaks uh or drop him

1339
01:07:20,000 --> 01:07:20,559
an email

1340
01:07:20,559 --> 01:07:22,559
or on the chat if you want to talk

1341
01:07:22,559 --> 01:07:23,920
further about this uh

1342
01:07:23,920 --> 01:07:27,440
this work so thank you again francis

1343
01:07:27,440 --> 01:07:30,240
excellent talk thanks for having me

1344
01:07:30,240 --> 01:07:31,839
thank you

1345
01:07:31,839 --> 01:07:34,000
all right so uh at this point we will

1346
01:07:34,000 --> 01:07:35,520
move on to the the second

1347
01:07:35,520 --> 01:07:39,280
of the uh prize winning talks uh today

1348
01:07:39,280 --> 01:07:43,200
uh which is uh by audrey randall

1349
01:07:43,200 --> 01:07:46,480
audrey is a third year phd student

1350
01:07:46,480 --> 01:07:48,240
studying internet measurement and

1351
01:07:48,240 --> 01:07:50,319
security at the university of california

1352
01:07:50,319 --> 01:07:52,079
san diego

1353
01:07:52,079 --> 01:07:54,240
her research interests center around

1354
01:07:54,240 --> 01:07:55,680
measuring and understanding

1355
01:07:55,680 --> 01:07:58,079
harmful behavior on the internet from

1356
01:07:58,079 --> 01:08:00,640
underground crime to stock aware to dns

1357
01:08:00,640 --> 01:08:02,400
hijacking

1358
01:08:02,400 --> 01:08:04,640
she received her bachelor's degree in

1359
01:08:04,640 --> 01:08:06,400
computer science from the university

1360
01:08:06,400 --> 01:08:10,079
of colorado boulder in 2018

1361
01:08:10,079 --> 01:08:12,720
and her talk today is uh on cash

1362
01:08:12,720 --> 01:08:13,680
snooping

1363
01:08:13,680 --> 01:08:15,680
red domains at large public dns

1364
01:08:15,680 --> 01:08:16,719
resolvers

1365
01:08:16,719 --> 01:08:20,158
to detect malware so if we can uh

1366
01:08:20,158 --> 01:08:22,799
play the video

1367
01:08:23,839 --> 01:08:26,479
hey everyone my name is audrey randall i

1368
01:08:26,479 --> 01:08:28,479
am a phd student at the university of

1369
01:08:28,479 --> 01:08:30,238
california san diego

1370
01:08:30,238 --> 01:08:32,000
and i'd like to talk to you today about

1371
01:08:32,000 --> 01:08:33,439
our paper truffle hunter

1372
01:08:33,439 --> 01:08:35,520
cash snooping rare domains at large

1373
01:08:35,520 --> 01:08:39,439
public dns resolvers

1374
01:08:39,439 --> 01:08:41,359
when you think about abusive behavior on

1375
01:08:41,359 --> 01:08:43,279
the internet today you might first think

1376
01:08:43,279 --> 01:08:45,439
about the more common types such as spam

1377
01:08:45,439 --> 01:08:46,640
emails or

1378
01:08:46,640 --> 01:08:48,960
botnets or malware all that stuff is

1379
01:08:48,960 --> 01:08:50,000
everywhere

1380
01:08:50,000 --> 01:08:52,158
and the thing about it is it's easy to

1381
01:08:52,158 --> 01:08:53,279
find in the wild

1382
01:08:53,279 --> 01:08:55,839
simply because it is so common but

1383
01:08:55,839 --> 01:08:57,759
there's another type of abuse which

1384
01:08:57,759 --> 01:09:00,158
is much harder to find because of its

1385
01:09:00,158 --> 01:09:00,880
rarity

1386
01:09:00,880 --> 01:09:02,479
and that includes things like typo

1387
01:09:02,479 --> 01:09:04,640
squatting hack for hire services

1388
01:09:04,640 --> 01:09:07,198
stock aware services where we really

1389
01:09:07,198 --> 01:09:08,960
don't know how many people are affected

1390
01:09:08,960 --> 01:09:09,600
by it

1391
01:09:09,600 --> 01:09:11,040
because it's hard to find in the wild

1392
01:09:11,040 --> 01:09:12,960
for whatever reason

1393
01:09:12,960 --> 01:09:14,719
so that's the type of abuse that we are

1394
01:09:14,719 --> 01:09:16,880
really interested in studying

1395
01:09:16,880 --> 01:09:19,439
and we've made the observation that all

1396
01:09:19,439 --> 01:09:20,560
these types of

1397
01:09:20,560 --> 01:09:22,399
rare harmful behavior have something in

1398
01:09:22,399 --> 01:09:24,640
common which is that they all need to

1399
01:09:24,640 --> 01:09:24,960
make

1400
01:09:24,960 --> 01:09:27,359
dns requests to the servers they require

1401
01:09:27,359 --> 01:09:29,839
to function

1402
01:09:29,839 --> 01:09:32,880
if you could observe enough dns requests

1403
01:09:32,880 --> 01:09:34,560
you could presumably study these types

1404
01:09:34,560 --> 01:09:36,238
of harm in more detail you could figure

1405
01:09:36,238 --> 01:09:37,679
out how prevalent they are

1406
01:09:37,679 --> 01:09:39,679
where they occur how frequently they

1407
01:09:39,679 --> 01:09:41,040
occur

1408
01:09:41,040 --> 01:09:43,759
but to do that you're going to need to

1409
01:09:43,759 --> 01:09:45,679
observe a lot of dns requests

1410
01:09:45,679 --> 01:09:47,120
because you're looking for the needle in

1411
01:09:47,120 --> 01:09:48,719
the haystack you're looking for a very

1412
01:09:48,719 --> 01:09:50,158
small amount of signal in the large

1413
01:09:50,158 --> 01:09:52,158
amount of noise

1414
01:09:52,158 --> 01:09:54,158
fortunately we're kind of entering this

1415
01:09:54,158 --> 01:09:56,239
new era in dns right now

1416
01:09:56,239 --> 01:09:58,239
and that's because these public dns

1417
01:09:58,239 --> 01:09:59,760
resolvers are starting to gain more

1418
01:09:59,760 --> 01:10:01,199
popularity

1419
01:10:01,199 --> 01:10:03,199
it used to be that it was only power

1420
01:10:03,199 --> 01:10:05,040
users and people who were really tech

1421
01:10:05,040 --> 01:10:06,560
savvy who would be using public

1422
01:10:06,560 --> 01:10:08,560
resolvers but we're starting to see them

1423
01:10:08,560 --> 01:10:08,880
get

1424
01:10:08,880 --> 01:10:12,159
hard-coded by default for example google

1425
01:10:12,159 --> 01:10:13,520
home routers all use

1426
01:10:13,520 --> 01:10:16,159
google's quad 8 service by default and

1427
01:10:16,159 --> 01:10:18,239
firefox routes all their dns queries to

1428
01:10:18,239 --> 01:10:19,520
cloudflare

1429
01:10:19,520 --> 01:10:21,760
we even see that new york city's entire

1430
01:10:21,760 --> 01:10:25,120
public wi-fi network now uses quad 9.

1431
01:10:25,120 --> 01:10:26,800
so of course we are not google we are

1432
01:10:26,800 --> 01:10:29,199
not quad 9 we are not cloudflare

1433
01:10:29,199 --> 01:10:32,560
but can we as third-party observers

1434
01:10:32,560 --> 01:10:34,800
still use these services to observe the

1435
01:10:34,800 --> 01:10:38,800
kind of rare behavior we want to study

1436
01:10:39,280 --> 01:10:41,440
well of course the answer is yes there

1437
01:10:41,440 --> 01:10:43,040
is a well-known technique that's been

1438
01:10:43,040 --> 01:10:45,360
around since at least 2004 called dns

1439
01:10:45,360 --> 01:10:46,719
cash snooping

1440
01:10:46,719 --> 01:10:48,880
but in the past it's been presented as

1441
01:10:48,880 --> 01:10:50,800
an attack and it's considered a privacy

1442
01:10:50,800 --> 01:10:52,400
threat and for good reason

1443
01:10:52,400 --> 01:10:54,080
most of the time what researchers were

1444
01:10:54,080 --> 01:10:55,760
doing when they did cash snooping

1445
01:10:55,760 --> 01:10:57,600
was they would scan the whole internet

1446
01:10:57,600 --> 01:10:59,120
and they would try and see

1447
01:10:59,120 --> 01:11:02,560
which devices would answer a dns request

1448
01:11:02,560 --> 01:11:05,120
the problem was most of those devices

1449
01:11:05,120 --> 01:11:06,880
were misconfigured home routers so

1450
01:11:06,880 --> 01:11:09,040
they've only got a few users behind them

1451
01:11:09,040 --> 01:11:11,520
and if you find some domain on them that

1452
01:11:11,520 --> 01:11:13,679
might be

1453
01:11:13,679 --> 01:11:15,520
invasive of privacy it's not too

1454
01:11:15,520 --> 01:11:17,199
difficult to figure out which actual

1455
01:11:17,199 --> 01:11:19,600
user put it there

1456
01:11:19,600 --> 01:11:21,920
public dns resolvers on the other hand

1457
01:11:21,920 --> 01:11:22,960
allow you to preserve

1458
01:11:22,960 --> 01:11:25,840
privacy because so many people use them

1459
01:11:25,840 --> 01:11:27,760
it's almost impossible to de-anonymize

1460
01:11:27,760 --> 01:11:29,520
them it's almost impossible to figure

1461
01:11:29,520 --> 01:11:29,920
out

1462
01:11:29,920 --> 01:11:31,760
just based on the fact that a domain is

1463
01:11:31,760 --> 01:11:35,040
in cash who put it there

1464
01:11:35,040 --> 01:11:37,440
so that's great we can use cash swooping

1465
01:11:37,440 --> 01:11:38,960
as a measurement technique instead of a

1466
01:11:38,960 --> 01:11:40,000
privacy threat

1467
01:11:40,000 --> 01:11:43,120
on public resolvers but public resolvers

1468
01:11:43,120 --> 01:11:44,480
are also more challenging

1469
01:11:44,480 --> 01:11:46,239
because they've got complicated caching

1470
01:11:46,239 --> 01:11:47,600
strategies and that's why they're of

1471
01:11:47,600 --> 01:11:49,199
interest to the ietf

1472
01:11:49,199 --> 01:11:52,840
because this does lead to some protocol

1473
01:11:52,840 --> 01:11:54,239
non-compliance

1474
01:11:54,239 --> 01:11:55,840
so for the remainder of this talk i'm

1475
01:11:55,840 --> 01:11:57,280
first going to go over some brief

1476
01:11:57,280 --> 01:11:58,960
background on cash snooping for anyone

1477
01:11:58,960 --> 01:12:01,120
who hasn't seen the details in a while

1478
01:12:01,120 --> 01:12:03,120
and then i'm going to talk about how to

1479
01:12:03,120 --> 01:12:04,880
do it on public resolvers

1480
01:12:04,880 --> 01:12:07,120
to do that you need to understand their

1481
01:12:07,120 --> 01:12:09,360
caching strategies so we as researchers

1482
01:12:09,360 --> 01:12:10,960
had to reverse engineer the caching

1483
01:12:10,960 --> 01:12:12,560
strategies of four large public

1484
01:12:12,560 --> 01:12:14,159
resolvers

1485
01:12:14,159 --> 01:12:15,760
next i'm going to talk about our tool

1486
01:12:15,760 --> 01:12:17,440
which is called truffle hunter

1487
01:12:17,440 --> 01:12:19,440
and how we used it to measure certain

1488
01:12:19,440 --> 01:12:21,760
case studies

1489
01:12:21,760 --> 01:12:23,280
and learn a little bit more about these

1490
01:12:23,280 --> 01:12:24,560
types of rare abuse that we're

1491
01:12:24,560 --> 01:12:27,520
interested in measuring

1492
01:12:27,679 --> 01:12:29,600
so i'll get started on background of

1493
01:12:29,600 --> 01:12:32,239
cash snooping

1494
01:12:32,239 --> 01:12:35,679
so if somebody were to make a request

1495
01:12:35,679 --> 01:12:36,000
for

1496
01:12:36,000 --> 01:12:39,120
example.com to their local dns resolver

1497
01:12:39,120 --> 01:12:41,280
that resolver would have to look in its

1498
01:12:41,280 --> 01:12:43,199
cache and say all right is example.com

1499
01:12:43,199 --> 01:12:43,840
present

1500
01:12:43,840 --> 01:12:45,440
if so they can return the response

1501
01:12:45,440 --> 01:12:47,120
quickly to the user if not

1502
01:12:47,120 --> 01:12:48,560
they have to go to the authoritative

1503
01:12:48,560 --> 01:12:50,960
name server

1504
01:12:50,960 --> 01:12:54,000
what you can do if you are a snooper is

1505
01:12:54,000 --> 01:12:56,640
make a request for example.com but set a

1506
01:12:56,640 --> 01:12:58,480
flag that tells the resolver it is not

1507
01:12:58,480 --> 01:13:00,159
allowed to check the authoritative name

1508
01:13:00,159 --> 01:13:01,520
server

1509
01:13:01,520 --> 01:13:03,920
that way if you get a valid response

1510
01:13:03,920 --> 01:13:04,640
back with

1511
01:13:04,640 --> 01:13:07,120
a valid ip and a valid ttl or time to

1512
01:13:07,120 --> 01:13:08,080
live value

1513
01:13:08,080 --> 01:13:10,560
then you know that the domain was cached

1514
01:13:10,560 --> 01:13:12,159
i should note that all of the resolvers

1515
01:13:12,159 --> 01:13:14,000
we've been using this on do respect the

1516
01:13:14,000 --> 01:13:15,440
recursion desired flag

1517
01:13:15,440 --> 01:13:17,360
with one slight exception which i'll get

1518
01:13:17,360 --> 01:13:19,839
into later

1519
01:13:20,640 --> 01:13:22,239
but the thing about cash snooping as a

1520
01:13:22,239 --> 01:13:24,320
measurement technique is that it only

1521
01:13:24,320 --> 01:13:26,320
provides a lower bound on the number of

1522
01:13:26,320 --> 01:13:28,719
users that are accessing a domain

1523
01:13:28,719 --> 01:13:31,440
so if multiple users have hit the same

1524
01:13:31,440 --> 01:13:33,520
cache for the same domain before that

1525
01:13:33,520 --> 01:13:35,520
ttl expires and the record is removed

1526
01:13:35,520 --> 01:13:36,239
from cache

1527
01:13:36,239 --> 01:13:37,920
you won't be able to observe them you

1528
01:13:37,920 --> 01:13:40,159
can observe a maximum of one user per

1529
01:13:40,159 --> 01:13:42,719
cash per ttl

1530
01:13:42,719 --> 01:13:45,199
but that's okay for our purposes because

1531
01:13:45,199 --> 01:13:47,120
we're looking for the types of phenomena

1532
01:13:47,120 --> 01:13:47,679
where

1533
01:13:47,679 --> 01:13:50,320
nobody knows how frequent they are how

1534
01:13:50,320 --> 01:13:52,080
frequently they occur in the wild

1535
01:13:52,080 --> 01:13:54,400
and it's valuable even just to get that

1536
01:13:54,400 --> 01:13:55,600
lower bound because

1537
01:13:55,600 --> 01:13:57,199
seeing any of them is actually really

1538
01:13:57,199 --> 01:13:59,679
bad news

1539
01:13:59,679 --> 01:14:02,400
but cash snooping on a single resolver

1540
01:14:02,400 --> 01:14:04,719
is actually reasonably straightforward

1541
01:14:04,719 --> 01:14:06,560
in order to do it on a public resolver

1542
01:14:06,560 --> 01:14:07,840
things get significantly more

1543
01:14:07,840 --> 01:14:09,679
complicated so let me talk next about

1544
01:14:09,679 --> 01:14:11,840
how public resolvers work in broad terms

1545
01:14:11,840 --> 01:14:13,600
and then how they work in

1546
01:14:13,600 --> 01:14:16,640
more specific terms

1547
01:14:17,040 --> 01:14:20,239
when a user wants to send a request to a

1548
01:14:20,239 --> 01:14:22,640
public resolver that query is first

1549
01:14:22,640 --> 01:14:25,199
routed using ip anycast to the first

1550
01:14:25,199 --> 01:14:27,360
available or the closest point of

1551
01:14:27,360 --> 01:14:29,199
presence or pop

1552
01:14:29,199 --> 01:14:31,199
once there it can be routed to one of

1553
01:14:31,199 --> 01:14:33,120
any number of front-end caches there are

1554
01:14:33,120 --> 01:14:34,320
a lot of these

1555
01:14:34,320 --> 01:14:36,080
and if it misses in those front-end

1556
01:14:36,080 --> 01:14:37,679
caches it will be sent to

1557
01:14:37,679 --> 01:14:39,520
one of usually several back-end

1558
01:14:39,520 --> 01:14:41,280
resolvers

1559
01:14:41,280 --> 01:14:43,120
so that's good for us in some ways

1560
01:14:43,120 --> 01:14:45,280
because each of those caches represents

1561
01:14:45,280 --> 01:14:47,520
another possibility of observing a user

1562
01:14:47,520 --> 01:14:49,040
in the wild

1563
01:14:49,040 --> 01:14:50,880
but of course these complicated caching

1564
01:14:50,880 --> 01:14:52,400
techniques make our job a little bit

1565
01:14:52,400 --> 01:14:53,040
harder

1566
01:14:53,040 --> 01:14:55,520
because we need to be able to count how

1567
01:14:55,520 --> 01:14:57,520
many caches our queries have hit

1568
01:14:57,520 --> 01:14:59,120
and we need to be able to differentiate

1569
01:14:59,120 --> 01:15:00,560
between them so that we don't double

1570
01:15:00,560 --> 01:15:03,040
count full caches

1571
01:15:03,040 --> 01:15:05,040
this challenge is exacerbated by the

1572
01:15:05,040 --> 01:15:07,199
fact that each of these public resolvers

1573
01:15:07,199 --> 01:15:09,440
implements their caching differently

1574
01:15:09,440 --> 01:15:11,760
and we have found that inconsistency

1575
01:15:11,760 --> 01:15:14,239
could cause potential problems

1576
01:15:14,239 --> 01:15:15,840
while some of the resolvers we've looked

1577
01:15:15,840 --> 01:15:18,080
at always do seem to serve records with

1578
01:15:18,080 --> 01:15:19,679
correct ttls

1579
01:15:19,679 --> 01:15:21,920
we have found some that can either serve

1580
01:15:21,920 --> 01:15:24,400
records with incorrect ttls or will

1581
01:15:24,400 --> 01:15:26,640
serve records after the ttl should have

1582
01:15:26,640 --> 01:15:27,840
expired

1583
01:15:27,840 --> 01:15:29,520
so in a few slides i'll go into more

1584
01:15:29,520 --> 01:15:31,600
details on that

1585
01:15:31,600 --> 01:15:33,679
i've mentioned that in order to do our

1586
01:15:33,679 --> 01:15:34,640
measurement study

1587
01:15:34,640 --> 01:15:36,640
we need to count how many caches have

1588
01:15:36,640 --> 01:15:38,080
been filled with a domain

1589
01:15:38,080 --> 01:15:39,840
and that means we need to be able to

1590
01:15:39,840 --> 01:15:42,080
identify which caches our queries have

1591
01:15:42,080 --> 01:15:43,199
hit

1592
01:15:43,199 --> 01:15:45,440
so we had to understand the caching

1593
01:15:45,440 --> 01:15:47,040
strategy of each of these

1594
01:15:47,040 --> 01:15:50,080
four public resolvers to do that

1595
01:15:50,080 --> 01:15:52,560
we only have access to the ttl and the

1596
01:15:52,560 --> 01:15:54,480
timestamp of the dns queries that we

1597
01:15:54,480 --> 01:15:55,280
were sending

1598
01:15:55,280 --> 01:15:56,880
which made reverse engineering these

1599
01:15:56,880 --> 01:15:58,560
things kind of challenging

1600
01:15:58,560 --> 01:16:02,560
so i'll go over now how we did that

1601
01:16:04,000 --> 01:16:06,239
we ran an experiment where from a single

1602
01:16:06,239 --> 01:16:07,280
central location

1603
01:16:07,280 --> 01:16:09,199
we would repeatedly query a resolver and

1604
01:16:09,199 --> 01:16:11,360
try and fill its caches

1605
01:16:11,360 --> 01:16:13,280
then we looked at the query responses

1606
01:16:13,280 --> 01:16:14,719
that came back and we looked at their

1607
01:16:14,719 --> 01:16:16,719
ttls and their time stamps to try and

1608
01:16:16,719 --> 01:16:19,199
figure out how the caches worked

1609
01:16:19,199 --> 01:16:20,800
at this point i have to introduce the

1610
01:16:20,800 --> 01:16:23,280
concept of a ttl line which is just our

1611
01:16:23,280 --> 01:16:26,239
model of how a ttl decreases in a cache

1612
01:16:26,239 --> 01:16:28,800
a ttl and a cache ought to decrease by

1613
01:16:28,800 --> 01:16:30,640
about one second per second

1614
01:16:30,640 --> 01:16:32,719
so if you plot a bunch of measurements

1615
01:16:32,719 --> 01:16:34,480
that have all hit the same cache

1616
01:16:34,480 --> 01:16:36,480
you ought to see if you plot their

1617
01:16:36,480 --> 01:16:38,960
timestamp against their ttls

1618
01:16:38,960 --> 01:16:41,040
that that decreases by one second per

1619
01:16:41,040 --> 01:16:42,719
second and that's this green line in the

1620
01:16:42,719 --> 01:16:44,320
figure here that's our model of what the

1621
01:16:44,320 --> 01:16:49,440
ttl should be doing in the cache

1622
01:16:49,440 --> 01:16:51,360
when we do that against real resolvers

1623
01:16:51,360 --> 01:16:53,920
in this case open dns and quad 9 we get

1624
01:16:53,920 --> 01:16:55,440
something like this

1625
01:16:55,440 --> 01:16:56,880
it looks like about what you would

1626
01:16:56,880 --> 01:16:59,760
expect now note that this plot is zoomed

1627
01:16:59,760 --> 01:17:01,360
in on the first 50 seconds

1628
01:17:01,360 --> 01:17:03,600
just to show detail so the ttl lines

1629
01:17:03,600 --> 01:17:05,120
aren't shown going all the way to zero

1630
01:17:05,120 --> 01:17:05,760
but of course

1631
01:17:05,760 --> 01:17:09,120
we expect them to do that eventually

1632
01:17:09,120 --> 01:17:10,880
the first thing that you might notice is

1633
01:17:10,880 --> 01:17:13,679
this row of measurements across the top

1634
01:17:13,679 --> 01:17:15,840
which came back with the maximum ttl

1635
01:17:15,840 --> 01:17:17,520
value for the domain we used they're

1636
01:17:17,520 --> 01:17:19,280
circled in red

1637
01:17:19,280 --> 01:17:20,719
we assume that each of these

1638
01:17:20,719 --> 01:17:22,640
measurements filled a new cache because

1639
01:17:22,640 --> 01:17:24,320
they came back with the maximum ttl

1640
01:17:24,320 --> 01:17:25,280
value

1641
01:17:25,280 --> 01:17:27,440
and we were able to confirm this because

1642
01:17:27,440 --> 01:17:29,360
we controlled the authoritative name

1643
01:17:29,360 --> 01:17:30,719
server for the domain that we were

1644
01:17:30,719 --> 01:17:31,679
querying

1645
01:17:31,679 --> 01:17:33,920
so we confirmed that every time our

1646
01:17:33,920 --> 01:17:35,760
authoritative name server got a new

1647
01:17:35,760 --> 01:17:36,800
request

1648
01:17:36,800 --> 01:17:38,719
we got a measurement back at our

1649
01:17:38,719 --> 01:17:39,920
measurement source

1650
01:17:39,920 --> 01:17:43,679
with a maximum ttl value

1651
01:17:43,679 --> 01:17:45,600
you'll also notice that all of the

1652
01:17:45,600 --> 01:17:47,679
measurements that are not one of the top

1653
01:17:47,679 --> 01:17:49,679
row of circle dots

1654
01:17:49,679 --> 01:17:51,760
lie on one of the ttl lines so they look

1655
01:17:51,760 --> 01:17:53,440
like they came from one of the caches

1656
01:17:53,440 --> 01:17:56,000
that we observed to be filled

1657
01:17:56,000 --> 01:17:59,040
so that's great that means that open dns

1658
01:17:59,040 --> 01:18:00,880
and quadmine's caching architecture is

1659
01:18:00,880 --> 01:18:02,640
reasonably straightforward

1660
01:18:02,640 --> 01:18:04,320
requests can hit any of several

1661
01:18:04,320 --> 01:18:06,000
independent front-end caches

1662
01:18:06,000 --> 01:18:08,080
and if they miss they're sent to a group

1663
01:18:08,080 --> 01:18:10,400
of independent back-end caches

1664
01:18:10,400 --> 01:18:12,400
and we can just count the ttl lines that

1665
01:18:12,400 --> 01:18:14,159
we see and assume that that's the number

1666
01:18:14,159 --> 01:18:17,120
of filled caches

1667
01:18:17,520 --> 01:18:18,960
when we ran this experiment on

1668
01:18:18,960 --> 01:18:20,560
cloudflare we got a very different

1669
01:18:20,560 --> 01:18:22,080
looking graph

1670
01:18:22,080 --> 01:18:25,440
so we do get a a first measurement which

1671
01:18:25,440 --> 01:18:27,600
came back with the maximum ttl

1672
01:18:27,600 --> 01:18:29,360
but all of the measurements after that

1673
01:18:29,360 --> 01:18:31,520
look like they came from the same cache

1674
01:18:31,520 --> 01:18:32,560
which we would have thought would be

1675
01:18:32,560 --> 01:18:34,400
unusual in a resolver of cloudflare's

1676
01:18:34,400 --> 01:18:35,920
size

1677
01:18:35,920 --> 01:18:38,480
you can also see that for a while the

1678
01:18:38,480 --> 01:18:39,760
measurements look like they're exactly

1679
01:18:39,760 --> 01:18:41,679
on the ttl line but then they start to

1680
01:18:41,679 --> 01:18:43,600
drift over time and we notice that they

1681
01:18:43,600 --> 01:18:44,560
would always drift

1682
01:18:44,560 --> 01:18:47,679
upward so what we think is happening is

1683
01:18:47,679 --> 01:18:50,000
that cloudflare has a shared front-end

1684
01:18:50,000 --> 01:18:51,920
cache shared and distributed

1685
01:18:51,920 --> 01:18:53,760
as soon as a measurement arrives in one

1686
01:18:53,760 --> 01:18:55,280
cache it is shared with all of the

1687
01:18:55,280 --> 01:18:56,480
others

1688
01:18:56,480 --> 01:18:58,159
so that's a little bit disappointing for

1689
01:18:58,159 --> 01:18:59,520
our purposes because

1690
01:18:59,520 --> 01:19:01,679
at the whole pop we can only see one

1691
01:19:01,679 --> 01:19:03,360
cache get filled

1692
01:19:03,360 --> 01:19:05,600
so we can only measure one user per pop

1693
01:19:05,600 --> 01:19:09,520
on cloudflare

1694
01:19:09,520 --> 01:19:11,120
there is a question with cloudflare

1695
01:19:11,120 --> 01:19:13,040
strategy of whether or not

1696
01:19:13,040 --> 01:19:15,920
it is completely compliant with the dns

1697
01:19:15,920 --> 01:19:18,239
rfc for ttls

1698
01:19:18,239 --> 01:19:21,440
the maximum drift that we saw of

1699
01:19:21,440 --> 01:19:24,480
away from the true ttl value was about

1700
01:19:24,480 --> 01:19:25,600
80 seconds

1701
01:19:25,600 --> 01:19:28,480
so we were using a domain at the time

1702
01:19:28,480 --> 01:19:30,560
with a ttl of about three hours

1703
01:19:30,560 --> 01:19:32,880
and we saw that there were still

1704
01:19:32,880 --> 01:19:35,040
measurements in cash whose ttls hadn't

1705
01:19:35,040 --> 01:19:37,280
yet expired for about 80 seconds after

1706
01:19:37,280 --> 01:19:39,199
they should have expired

1707
01:19:39,199 --> 01:19:41,440
now it's important to note that the

1708
01:19:41,440 --> 01:19:44,159
drift scales with the maximum ttl

1709
01:19:44,159 --> 01:19:46,480
so probably even if you have a 60 second

1710
01:19:46,480 --> 01:19:47,520
ttl

1711
01:19:47,520 --> 01:19:48,960
you're only going to have a drift of a

1712
01:19:48,960 --> 01:19:51,040
few seconds and that's probably not

1713
01:19:51,040 --> 01:19:52,800
going to be an issue for you even if you

1714
01:19:52,800 --> 01:19:54,560
have such a short ttl and if you have a

1715
01:19:54,560 --> 01:19:55,520
long ttl

1716
01:19:55,520 --> 01:19:57,760
you're probably tolerant of more drift

1717
01:19:57,760 --> 01:19:59,760
so we concluded that the actual problems

1718
01:19:59,760 --> 01:20:04,960
here are likely to be very small

1719
01:20:04,960 --> 01:20:07,360
and then finally we looked at google dns

1720
01:20:07,360 --> 01:20:08,080
which is

1721
01:20:08,080 --> 01:20:09,920
the resolver where the cache is filled

1722
01:20:09,920 --> 01:20:11,440
themselves

1723
01:20:11,440 --> 01:20:13,440
this actually isn't just our observation

1724
01:20:13,440 --> 01:20:14,800
there has been prior work that has

1725
01:20:14,800 --> 01:20:16,639
observed this as well

1726
01:20:16,639 --> 01:20:19,520
uh champet all found that they could

1727
01:20:19,520 --> 01:20:20,480
make requests

1728
01:20:20,480 --> 01:20:23,679
and and get a accurate ttl

1729
01:20:23,679 --> 01:20:26,239
back on the original requests but then

1730
01:20:26,239 --> 01:20:27,760
they would keep making requests and they

1731
01:20:27,760 --> 01:20:30,000
would find subsequent ttls to be wrong

1732
01:20:30,000 --> 01:20:31,679
because it looked like those ttls were

1733
01:20:31,679 --> 01:20:33,199
coming from caches that had never been

1734
01:20:33,199 --> 01:20:34,320
filled

1735
01:20:34,320 --> 01:20:37,360
and then reprimando at all uh noticed

1736
01:20:37,360 --> 01:20:38,400
the same effect and

1737
01:20:38,400 --> 01:20:40,639
called these mystery caches ghost caches

1738
01:20:40,639 --> 01:20:42,080
which we thought was a great name for

1739
01:20:42,080 --> 01:20:42,960
them

1740
01:20:42,960 --> 01:20:45,920
so why on earth are these caches getting

1741
01:20:45,920 --> 01:20:48,320
filled without being queried

1742
01:20:48,320 --> 01:20:50,560
i'll show you what we mean here if you

1743
01:20:50,560 --> 01:20:51,679
look at all of these

1744
01:20:51,679 --> 01:20:54,000
blue lines you will notice that there is

1745
01:20:54,000 --> 01:20:54,880
no measurement

1746
01:20:54,880 --> 01:20:57,520
at the start of these blue ttl lines

1747
01:20:57,520 --> 01:21:00,400
these mystery caches

1748
01:21:00,400 --> 01:21:02,159
according to our theory every filled

1749
01:21:02,159 --> 01:21:04,320
cache should correspond to two things

1750
01:21:04,320 --> 01:21:06,000
a a measurement that we made with a

1751
01:21:06,000 --> 01:21:08,080
maximum ttl at its start

1752
01:21:08,080 --> 01:21:10,000
and b a request to our authoritative

1753
01:21:10,000 --> 01:21:12,080
name server and we didn't see either of

1754
01:21:12,080 --> 01:21:14,719
those here

1755
01:21:14,719 --> 01:21:16,960
what we eventually noticed is that every

1756
01:21:16,960 --> 01:21:18,080
light blue cache

1757
01:21:18,080 --> 01:21:19,920
does appear to get filled at the same

1758
01:21:19,920 --> 01:21:22,639
time as one of our measurements was made

1759
01:21:22,639 --> 01:21:24,320
you can see that the dotted lines that

1760
01:21:24,320 --> 01:21:26,000
descend from the start of each cache

1761
01:21:26,000 --> 01:21:27,120
line each pass

1762
01:21:27,120 --> 01:21:30,400
through a measurement so what we think

1763
01:21:30,400 --> 01:21:32,159
is happening is this

1764
01:21:32,159 --> 01:21:34,480
google is using what we call a dynamic

1765
01:21:34,480 --> 01:21:36,159
caching strategy

1766
01:21:36,159 --> 01:21:38,400
when a request comes into google and it

1767
01:21:38,400 --> 01:21:40,159
misses in a front-end cache that's its

1768
01:21:40,159 --> 01:21:40,639
light

1769
01:21:40,639 --> 01:21:43,760
this light blue cache here then it's

1770
01:21:43,760 --> 01:21:45,199
going to get forwarded to a back end

1771
01:21:45,199 --> 01:21:46,400
cache and let's assume that that

1772
01:21:46,400 --> 01:21:48,159
back-end cache is already full and it

1773
01:21:48,159 --> 01:21:49,120
has a ttl

1774
01:21:49,120 --> 01:21:52,559
less than the maximum value

1775
01:21:52,719 --> 01:21:55,840
the first time that ttl less than the

1776
01:21:55,840 --> 01:21:58,560
maximum value let's say 550 seconds

1777
01:21:58,560 --> 01:22:01,440
is going to get sent back to the user

1778
01:22:01,440 --> 01:22:01,840
but

1779
01:22:01,840 --> 01:22:04,400
at the same time the front end cache is

1780
01:22:04,400 --> 01:22:06,000
going to store the record

1781
01:22:06,000 --> 01:22:08,239
and it's going to store the maximum ttl

1782
01:22:08,239 --> 01:22:10,000
which in this case let's say it's 600

1783
01:22:10,000 --> 01:22:14,080
seconds so you can think of it like this

1784
01:22:14,080 --> 01:22:17,040
every request that comes into google dns

1785
01:22:17,040 --> 01:22:19,440
has a chance to spawn a new cache that

1786
01:22:19,440 --> 01:22:21,440
is visible to cash snipping

1787
01:22:21,440 --> 01:22:23,040
so that's great news for us as

1788
01:22:23,040 --> 01:22:25,040
researchers running a measurement study

1789
01:22:25,040 --> 01:22:27,199
because we will see a much greater

1790
01:22:27,199 --> 01:22:29,040
percentage of unique queries on google

1791
01:22:29,040 --> 01:22:29,600
than we will

1792
01:22:29,600 --> 01:22:32,239
anywhere else

1793
01:22:34,320 --> 01:22:36,400
but you do have the question of whether

1794
01:22:36,400 --> 01:22:38,000
this strategy is going to lead to

1795
01:22:38,000 --> 01:22:41,760
inaccurate ttls now we did observe

1796
01:22:41,760 --> 01:22:44,320
that if we queried a domain that we had

1797
01:22:44,320 --> 01:22:46,159
placed in cache and we queried it all

1798
01:22:46,159 --> 01:22:48,480
the way until it's ttl expired

1799
01:22:48,480 --> 01:22:50,480
these ghost caches or these front-end

1800
01:22:50,480 --> 01:22:53,120
caches that we filled ourselves

1801
01:22:53,120 --> 01:22:56,320
they did expire even if the ttl had not

1802
01:22:56,320 --> 01:22:57,679
reached zero yet

1803
01:22:57,679 --> 01:23:00,320
when the original back-end cache expired

1804
01:23:00,320 --> 01:23:01,679
so that's good

1805
01:23:01,679 --> 01:23:04,000
but we noticed that a user could make a

1806
01:23:04,000 --> 01:23:04,960
request

1807
01:23:04,960 --> 01:23:07,199
just before the ttl of the backend cache

1808
01:23:07,199 --> 01:23:08,239
expires

1809
01:23:08,239 --> 01:23:11,600
and get a cache that had just been

1810
01:23:11,600 --> 01:23:14,000
filled and that could lead to extending

1811
01:23:14,000 --> 01:23:17,840
the ttl to twice as long as it should be

1812
01:23:17,840 --> 01:23:19,840
so the maximum drift is just twice as

1813
01:23:19,840 --> 01:23:21,600
long as whatever the maximum ttl

1814
01:23:21,600 --> 01:23:25,199
is whether or not this is actually a

1815
01:23:25,199 --> 01:23:25,840
problem

1816
01:23:25,840 --> 01:23:28,080
is not up for us to decide we couldn't

1817
01:23:28,080 --> 01:23:30,000
think of a use case where it would be

1818
01:23:30,000 --> 01:23:32,400
super problematic but we do have a

1819
01:23:32,400 --> 01:23:33,679
question of

1820
01:23:33,679 --> 01:23:35,920
why would why would this be a useful

1821
01:23:35,920 --> 01:23:38,320
strategy why store the maximum ttl in

1822
01:23:38,320 --> 01:23:40,000
the front end caches rather than just

1823
01:23:40,000 --> 01:23:42,960
copying the ttl from the back end caches

1824
01:23:42,960 --> 01:23:44,560
now it's great that google did this from

1825
01:23:44,560 --> 01:23:45,840
our point of view because it really

1826
01:23:45,840 --> 01:23:47,520
enabled our measurement study

1827
01:23:47,520 --> 01:23:49,120
but we couldn't come up with a reason

1828
01:23:49,120 --> 01:23:50,960
why it would be more efficient or more

1829
01:23:50,960 --> 01:23:52,400
performant to do that

1830
01:23:52,400 --> 01:23:54,159
so if anyone is here from google or if

1831
01:23:54,159 --> 01:23:55,760
anybody wants to weigh in i would love

1832
01:23:55,760 --> 01:23:57,120
to get somebody's thoughts on that when

1833
01:23:57,120 --> 01:24:00,000
i'm done with this talk

1834
01:24:00,480 --> 01:24:03,440
so to summarize open dns and quad 9

1835
01:24:03,440 --> 01:24:05,120
appear to have a pretty straightforward

1836
01:24:05,120 --> 01:24:06,560
caching strategy

1837
01:24:06,560 --> 01:24:08,480
and we don't think that that caching

1838
01:24:08,480 --> 01:24:10,480
strategy ever manipulates the ttls of

1839
01:24:10,480 --> 01:24:12,480
the responses at all

1840
01:24:12,480 --> 01:24:14,159
cloudflare has this shared and

1841
01:24:14,159 --> 01:24:16,320
distributed front-end cache and we do

1842
01:24:16,320 --> 01:24:18,000
notice that the ttls are affected

1843
01:24:18,000 --> 01:24:19,120
slightly by it

1844
01:24:19,120 --> 01:24:20,960
but we don't think that's likely to be

1845
01:24:20,960 --> 01:24:22,800
too much of an issue because the drift

1846
01:24:22,800 --> 01:24:24,800
is so small compared to the length of

1847
01:24:24,800 --> 01:24:27,120
the maximum ttl

1848
01:24:27,120 --> 01:24:29,199
and google has what we call a dynamic

1849
01:24:29,199 --> 01:24:30,719
caching strategy

1850
01:24:30,719 --> 01:24:34,159
and that can result in a ttl received by

1851
01:24:34,159 --> 01:24:35,199
the client

1852
01:24:35,199 --> 01:24:36,880
being about twice as long as it should

1853
01:24:36,880 --> 01:24:38,800
be because you could receive a maximum

1854
01:24:38,800 --> 01:24:39,440
ttl

1855
01:24:39,440 --> 01:24:41,679
right before the back end caches ttl was

1856
01:24:41,679 --> 01:24:43,280
set to expire so you should have been

1857
01:24:43,280 --> 01:24:44,960
receiving a very small ttl

1858
01:24:44,960 --> 01:24:46,400
and you receive one that's closer to the

1859
01:24:46,400 --> 01:24:48,879
maximum

1860
01:24:51,280 --> 01:24:53,520
now that we've talked about how to use

1861
01:24:53,520 --> 01:24:55,679
cash snooping on public resolvers

1862
01:24:55,679 --> 01:24:57,600
by counting the caches that your queries

1863
01:24:57,600 --> 01:24:59,840
hit let's talk about our tool which we

1864
01:24:59,840 --> 01:25:02,719
have nicknamed truffle hunter

1865
01:25:02,719 --> 01:25:04,400
it's our distributed measurement tool

1866
01:25:04,400 --> 01:25:05,920
which we've deployed on cada's

1867
01:25:05,920 --> 01:25:08,320
archipelago project that means it's on

1868
01:25:08,320 --> 01:25:10,560
46 different measurement nodes scattered

1869
01:25:10,560 --> 01:25:12,880
across the united states

1870
01:25:12,880 --> 01:25:15,280
all it does is send continuous dns

1871
01:25:15,280 --> 01:25:17,280
queries across the us for the domains

1872
01:25:17,280 --> 01:25:18,960
that we're interested in

1873
01:25:18,960 --> 01:25:20,639
when it gets the responses back it

1874
01:25:20,639 --> 01:25:22,320
interprets them according to our models

1875
01:25:22,320 --> 01:25:24,320
to try and figure out how many caches

1876
01:25:24,320 --> 01:25:25,360
were filled

1877
01:25:25,360 --> 01:25:26,960
and we go from there to estimating

1878
01:25:26,960 --> 01:25:29,840
counts of users in some cases

1879
01:25:29,840 --> 01:25:31,600
we have three months of data or did at

1880
01:25:31,600 --> 01:25:32,880
the time we wrote this paper

1881
01:25:32,880 --> 01:25:37,199
from march to may in 2020

1882
01:25:37,760 --> 01:25:39,600
truffle hunter is of course not perfect

1883
01:25:39,600 --> 01:25:41,760
and the first big question that we had

1884
01:25:41,760 --> 01:25:42,960
when we deployed it

1885
01:25:42,960 --> 01:25:45,120
was how accurate it was at estimating

1886
01:25:45,120 --> 01:25:47,280
the number of caches that were filled

1887
01:25:47,280 --> 01:25:49,040
because we know that our models of cache

1888
01:25:49,040 --> 01:25:50,960
architecture might not be 100

1889
01:25:50,960 --> 01:25:54,560
accurate so we ran an experiment where

1890
01:25:54,560 --> 01:25:57,760
from 900 different ripe atlas probes

1891
01:25:57,760 --> 01:25:59,840
we placed a domain we controlled into

1892
01:25:59,840 --> 01:26:02,159
the caches of public resolvers

1893
01:26:02,159 --> 01:26:04,960
the idea was just to put it there as if

1894
01:26:04,960 --> 01:26:06,840
people across the u.s had done it

1895
01:26:06,840 --> 01:26:08,159
naturally

1896
01:26:08,159 --> 01:26:10,080
then we used truffle hunter to try and

1897
01:26:10,080 --> 01:26:12,000
observe it in those public resolver

1898
01:26:12,000 --> 01:26:13,440
caches

1899
01:26:13,440 --> 01:26:15,440
because it's a domain we control we

1900
01:26:15,440 --> 01:26:16,960
could conclude that the number of

1901
01:26:16,960 --> 01:26:18,320
requests that came into our

1902
01:26:18,320 --> 01:26:20,080
authoritative name server

1903
01:26:20,080 --> 01:26:22,080
should be the true number of filled

1904
01:26:22,080 --> 01:26:24,159
caches except in the case of google

1905
01:26:24,159 --> 01:26:25,040
which of course

1906
01:26:25,040 --> 01:26:28,400
does its own thing we found that we

1907
01:26:28,400 --> 01:26:31,600
performed best on opendns and cloudflare

1908
01:26:31,600 --> 01:26:33,199
except in the case of one particular

1909
01:26:33,199 --> 01:26:35,120
cloudflare pop where we think there was

1910
01:26:35,120 --> 01:26:36,480
some routing going on that we didn't

1911
01:26:36,480 --> 01:26:39,919
account for during our experiment

1912
01:26:40,159 --> 01:26:42,880
on gp dns it turned out to be difficult

1913
01:26:42,880 --> 01:26:44,159
to accurately remove

1914
01:26:44,159 --> 01:26:45,760
all the front-end caches that had been

1915
01:26:45,760 --> 01:26:47,360
filled by our own probes

1916
01:26:47,360 --> 01:26:50,239
so we conservatively moved removed more

1917
01:26:50,239 --> 01:26:52,159
than we had actually created in order to

1918
01:26:52,159 --> 01:26:53,280
ensure we never over

1919
01:26:53,280 --> 01:26:55,600
counted that's consistent with our goal

1920
01:26:55,600 --> 01:26:57,360
of always providing an underestimate

1921
01:26:57,360 --> 01:26:59,360
rather than an overestimate of

1922
01:26:59,360 --> 01:27:01,120
the number of caches that have been

1923
01:27:01,120 --> 01:27:02,320
filled and therefore the number of

1924
01:27:02,320 --> 01:27:04,400
people that are filling them

1925
01:27:04,400 --> 01:27:07,040
and then quad 9 was very interesting it

1926
01:27:07,040 --> 01:27:09,679
had the same architecture as open dns

1927
01:27:09,679 --> 01:27:11,840
so you would expect it to be just as

1928
01:27:11,840 --> 01:27:13,280
easy to snoop

1929
01:27:13,280 --> 01:27:15,600
but as it turns out quad 9 runs two

1930
01:27:15,600 --> 01:27:17,360
types of software at each of their back

1931
01:27:17,360 --> 01:27:18,000
ends

1932
01:27:18,000 --> 01:27:20,159
and one of them refuses to respond to

1933
01:27:20,159 --> 01:27:22,960
non-recursive queries that's unbound

1934
01:27:22,960 --> 01:27:25,920
so if it turned out to be that unbound

1935
01:27:25,920 --> 01:27:27,520
was the software that had cached our

1936
01:27:27,520 --> 01:27:28,480
domain

1937
01:27:28,480 --> 01:27:30,639
that record essentially became invisible

1938
01:27:30,639 --> 01:27:33,040
to us so it does mean we can't observe

1939
01:27:33,040 --> 01:27:35,040
about half of the filled caches at any

1940
01:27:35,040 --> 01:27:38,000
quad 9 pop

1941
01:27:38,000 --> 01:27:40,560
the takeaways here are first we were

1942
01:27:40,560 --> 01:27:42,320
able to tune our algorithm so that we

1943
01:27:42,320 --> 01:27:44,239
almost always underestimate

1944
01:27:44,239 --> 01:27:45,920
which is good because our goal is to

1945
01:27:45,920 --> 01:27:47,760
provide these lower bounded estimates of

1946
01:27:47,760 --> 01:27:49,120
prevalence

1947
01:27:49,120 --> 01:27:51,120
and second even on the resolvers where

1948
01:27:51,120 --> 01:27:52,480
we have high error

1949
01:27:52,480 --> 01:27:54,480
we do see at least half of the filled

1950
01:27:54,480 --> 01:27:56,959
caches

1951
01:27:59,120 --> 01:28:00,880
the next limitation that truffle hunter

1952
01:28:00,880 --> 01:28:03,360
has is inherent to cash snooping as a

1953
01:28:03,360 --> 01:28:04,560
measurement technique

1954
01:28:04,560 --> 01:28:06,639
and that is that you can only observe

1955
01:28:06,639 --> 01:28:08,880
one user per cache

1956
01:28:08,880 --> 01:28:11,280
so we looked at how many caches were

1957
01:28:11,280 --> 01:28:13,440
visible on each of these resolvers at

1958
01:28:13,440 --> 01:28:15,040
any one time

1959
01:28:15,040 --> 01:28:17,679
we found that google had a great many of

1960
01:28:17,679 --> 01:28:18,400
them that were

1961
01:28:18,400 --> 01:28:20,480
visible to us because of their dynamic

1962
01:28:20,480 --> 01:28:21,679
caching strategy

1963
01:28:21,679 --> 01:28:23,520
about a hundred times more than either

1964
01:28:23,520 --> 01:28:25,600
open dns or quad9

1965
01:28:25,600 --> 01:28:27,280
cloudflare of course only has one

1966
01:28:27,280 --> 01:28:29,040
visible cache per pop so its graph is

1967
01:28:29,040 --> 01:28:30,480
omitted here

1968
01:28:30,480 --> 01:28:32,960
open dns in quad 9 you might notice that

1969
01:28:32,960 --> 01:28:35,760
some of the larger pops like nyc and iad

1970
01:28:35,760 --> 01:28:37,520
have a lot more visible caches than the

1971
01:28:37,520 --> 01:28:42,239
smaller ones

1972
01:28:42,239 --> 01:28:44,639
so that's truffle hunter in a nutshell

1973
01:28:44,639 --> 01:28:46,480
now the interesting bit is what we

1974
01:28:46,480 --> 01:28:47,440
actually use

1975
01:28:47,440 --> 01:28:49,360
truffle hunter to study and that's our

1976
01:28:49,360 --> 01:28:52,960
case studies which i'll talk about next

1977
01:28:52,960 --> 01:28:54,960
we ran four of these i'm only going to

1978
01:28:54,960 --> 01:28:56,000
talk about three of them

1979
01:28:56,000 --> 01:28:59,520
here and these were stock aware

1980
01:28:59,520 --> 01:29:02,400
contract cheating and very old typo

1981
01:29:02,400 --> 01:29:04,080
squatting domains

1982
01:29:04,080 --> 01:29:05,840
we didn't expect to see very much of any

1983
01:29:05,840 --> 01:29:08,080
of this stuff for various reasons

1984
01:29:08,080 --> 01:29:10,480
and previously all of these things were

1985
01:29:10,480 --> 01:29:12,159
kind of difficult to measure maybe type

1986
01:29:12,159 --> 01:29:13,920
of squatting not so much but certainly

1987
01:29:13,920 --> 01:29:15,520
contract cheating and stalkerware have

1988
01:29:15,520 --> 01:29:16,159
been very

1989
01:29:16,159 --> 01:29:18,560
difficult to observe in the wild and

1990
01:29:18,560 --> 01:29:20,639
nobody really had any data about

1991
01:29:20,639 --> 01:29:24,960
how prevalent they were

1992
01:29:24,960 --> 01:29:26,159
first of all let's talk about

1993
01:29:26,159 --> 01:29:28,480
stalkerware if you haven't heard the

1994
01:29:28,480 --> 01:29:30,480
term before it's kind of this emerging

1995
01:29:30,480 --> 01:29:31,840
spyware thread

1996
01:29:31,840 --> 01:29:33,679
it's this software that can be installed

1997
01:29:33,679 --> 01:29:35,760
on a target's device either a phone

1998
01:29:35,760 --> 01:29:38,239
usually a phone or a desktop computer

1999
01:29:38,239 --> 01:29:40,159
and it tracks them it can record

2000
01:29:40,159 --> 01:29:41,679
location it often has

2001
01:29:41,679 --> 01:29:44,719
key loggers to record text

2002
01:29:44,719 --> 01:29:47,600
social media browsing history things

2003
01:29:47,600 --> 01:29:48,639
like that

2004
01:29:48,639 --> 01:29:51,360
and oftentimes it can record ambient

2005
01:29:51,360 --> 01:29:52,080
sound and video

2006
01:29:52,080 --> 01:29:54,719
of the device as well and it can hide

2007
01:29:54,719 --> 01:29:56,560
its presence on the device so

2008
01:29:56,560 --> 01:29:58,320
even if you are downloading it on an

2009
01:29:58,320 --> 01:30:00,080
android phone which ought to tell you

2010
01:30:00,080 --> 01:30:01,040
how many

2011
01:30:01,040 --> 01:30:03,840
apps and what types are installed on it

2012
01:30:03,840 --> 01:30:05,440
it can hide its icon so that you can't

2013
01:30:05,440 --> 01:30:07,679
tell it's there

2014
01:30:07,679 --> 01:30:10,719
so we downloaded and profiled 24 of

2015
01:30:10,719 --> 01:30:11,520
these apps

2016
01:30:11,520 --> 01:30:13,280
to try and get their network signatures

2017
01:30:13,280 --> 01:30:15,199
so that we could figure out what dns

2018
01:30:15,199 --> 01:30:17,600
requests they were making

2019
01:30:17,600 --> 01:30:19,360
six of these apps were what previous

2020
01:30:19,360 --> 01:30:21,600
work calls dual use

2021
01:30:21,600 --> 01:30:23,520
those are apps that have a legitimate

2022
01:30:23,520 --> 01:30:25,040
purpose which is separate from their

2023
01:30:25,040 --> 01:30:26,800
ability to stalk somebody

2024
01:30:26,800 --> 01:30:30,000
but they can be repurposed to act as

2025
01:30:30,000 --> 01:30:31,679
stalker wear

2026
01:30:31,679 --> 01:30:34,000
the line between dual use and overt apps

2027
01:30:34,000 --> 01:30:36,159
is a little bit blurry but dual use apps

2028
01:30:36,159 --> 01:30:37,440
tend to be marketed for

2029
01:30:37,440 --> 01:30:39,199
parental control or employee

2030
01:30:39,199 --> 01:30:40,880
surveillance or things like finding a

2031
01:30:40,880 --> 01:30:43,040
lost phone or backing up your data

2032
01:30:43,040 --> 01:30:45,360
rather than for spying on a spouse or a

2033
01:30:45,360 --> 01:30:46,880
girlfriend

2034
01:30:46,880 --> 01:30:49,040
overt apps on the other hand are

2035
01:30:49,040 --> 01:30:50,960
marketed as undetectable

2036
01:30:50,960 --> 01:30:53,360
and marketed specifically for or at

2037
01:30:53,360 --> 01:30:54,159
least often

2038
01:30:54,159 --> 01:30:56,480
marketed specifically for spying on a

2039
01:30:56,480 --> 01:30:58,719
spouse or a girlfriend or a husband or

2040
01:30:58,719 --> 01:31:01,040
what have you so they tend to be the

2041
01:31:01,040 --> 01:31:04,080
more dangerous ones

2042
01:31:05,360 --> 01:31:08,080
the prevalence of overt stalker wear is

2043
01:31:08,080 --> 01:31:10,000
hard to estimate by any other means

2044
01:31:10,000 --> 01:31:11,840
because it's very difficult to observe

2045
01:31:11,840 --> 01:31:13,440
it in the wild

2046
01:31:13,440 --> 01:31:15,199
prior work in this space has mostly been

2047
01:31:15,199 --> 01:31:17,040
conducted in clinical settings

2048
01:31:17,040 --> 01:31:19,440
so researchers will conduct individual

2049
01:31:19,440 --> 01:31:21,679
one-on-one interviews with targets

2050
01:31:21,679 --> 01:31:23,679
and unfortunately that gives them a low

2051
01:31:23,679 --> 01:31:25,040
sample size

2052
01:31:25,040 --> 01:31:27,280
during these interviews they found few

2053
01:31:27,280 --> 01:31:30,239
to zero of these overt apps in the wild

2054
01:31:30,239 --> 01:31:32,880
but a simple google query will turn up

2055
01:31:32,880 --> 01:31:34,560
dozens of them and there are ads all

2056
01:31:34,560 --> 01:31:36,560
over the place so it really does beg the

2057
01:31:36,560 --> 01:31:38,719
question of how much of this overt stock

2058
01:31:38,719 --> 01:31:40,800
aware is out there

2059
01:31:40,800 --> 01:31:43,040
additionally by the time a target has

2060
01:31:43,040 --> 01:31:44,800
come in to talk to a professional they

2061
01:31:44,800 --> 01:31:47,280
have often already reset their devices

2062
01:31:47,280 --> 01:31:49,120
so it's difficult for a clinic to tell

2063
01:31:49,120 --> 01:31:50,719
which apps were on there before the

2064
01:31:50,719 --> 01:31:51,840
reset

2065
01:31:51,840 --> 01:31:54,719
and finally clinics often lack technical

2066
01:31:54,719 --> 01:31:55,679
expertise

2067
01:31:55,679 --> 01:31:57,520
so if they aren't working with someone

2068
01:31:57,520 --> 01:31:59,440
who does have expertise in this space it

2069
01:31:59,440 --> 01:32:01,280
can be very difficult for them to tell

2070
01:32:01,280 --> 01:32:04,800
if a device has soccerware installed

2071
01:32:04,800 --> 01:32:06,400
up until this point we've only been

2072
01:32:06,400 --> 01:32:08,880
talking about counting filled caches

2073
01:32:08,880 --> 01:32:10,560
not counting the number of devices that

2074
01:32:10,560 --> 01:32:12,080
have made the requests

2075
01:32:12,080 --> 01:32:13,520
and we haven't made any attempt to

2076
01:32:13,520 --> 01:32:15,679
differentiate between a single device

2077
01:32:15,679 --> 01:32:17,679
that is making multiple requests

2078
01:32:17,679 --> 01:32:19,360
and multiple devices that are each

2079
01:32:19,360 --> 01:32:21,679
making a single request

2080
01:32:21,679 --> 01:32:24,320
stalkerware is a really good app to use

2081
01:32:24,320 --> 01:32:26,400
really good use case to use for figuring

2082
01:32:26,400 --> 01:32:27,199
this out

2083
01:32:27,199 --> 01:32:29,600
because it's supposed to be often

2084
01:32:29,600 --> 01:32:30,560
installed without

2085
01:32:30,560 --> 01:32:33,120
the user's knowledge so it has to make

2086
01:32:33,120 --> 01:32:35,120
its dns requests automatically without

2087
01:32:35,120 --> 01:32:36,719
any user interaction

2088
01:32:36,719 --> 01:32:38,320
and that means it often makes them at

2089
01:32:38,320 --> 01:32:40,639
regular predictable intervals

2090
01:32:40,639 --> 01:32:42,480
so if you want to know how many devices

2091
01:32:42,480 --> 01:32:44,159
have stock aware installed

2092
01:32:44,159 --> 01:32:46,239
all you have to do is measure that

2093
01:32:46,239 --> 01:32:47,360
request rate

2094
01:32:47,360 --> 01:32:48,880
and then divide the number of filled

2095
01:32:48,880 --> 01:32:50,960
caches you see by the request rate of

2096
01:32:50,960 --> 01:32:53,360
the app

2097
01:32:53,520 --> 01:32:55,280
that's the technique that we use to come

2098
01:32:55,280 --> 01:32:56,880
up with this figure here

2099
01:32:56,880 --> 01:32:59,120
this graph shows the maximum targets

2100
01:32:59,120 --> 01:33:01,040
that we ever observed with stock aware

2101
01:33:01,040 --> 01:33:01,760
installed

2102
01:33:01,760 --> 01:33:04,639
at any one time across the united states

2103
01:33:04,639 --> 01:33:06,960
we found that nearly 6 000 people are

2104
01:33:06,960 --> 01:33:08,800
being targeted by overt stock aware in

2105
01:33:08,800 --> 01:33:09,280
the us

2106
01:33:09,280 --> 01:33:11,520
today and recall that that's a strict

2107
01:33:11,520 --> 01:33:12,400
lower bound

2108
01:33:12,400 --> 01:33:14,159
the number may very well be higher but

2109
01:33:14,159 --> 01:33:16,800
we suspect it's not lower

2110
01:33:16,800 --> 01:33:18,560
the two most interesting apps that we

2111
01:33:18,560 --> 01:33:20,400
found were called mobile tracker free

2112
01:33:20,400 --> 01:33:22,159
and spy to mobile those are the two most

2113
01:33:22,159 --> 01:33:23,600
frequent that you can see at the top of

2114
01:33:23,600 --> 01:33:25,040
this chart

2115
01:33:25,040 --> 01:33:27,040
mobile tracker free we suspect is so

2116
01:33:27,040 --> 01:33:29,040
popular because out of all the overt

2117
01:33:29,040 --> 01:33:31,199
apps we studied it was the only one that

2118
01:33:31,199 --> 01:33:33,360
wasn't subscription based it was free to

2119
01:33:33,360 --> 01:33:35,600
install free to use

2120
01:33:35,600 --> 01:33:38,400
and spy to mobile while not being free

2121
01:33:38,400 --> 01:33:40,400
was the only one of the overt apps that

2122
01:33:40,400 --> 01:33:40,800
was

2123
01:33:40,800 --> 01:33:42,719
available on the google play store

2124
01:33:42,719 --> 01:33:44,960
because it has a habit of

2125
01:33:44,960 --> 01:33:47,360
changing its developer name and its name

2126
01:33:47,360 --> 01:33:48,320
and

2127
01:33:48,320 --> 01:33:50,239
re-uploading itself multiple times to

2128
01:33:50,239 --> 01:33:52,000
evade google's

2129
01:33:52,000 --> 01:33:54,320
rules

2130
01:33:56,560 --> 01:33:59,679
we also looked at the dashboards for

2131
01:33:59,679 --> 01:34:02,080
stalkerware and when i say a dashboard

2132
01:34:02,080 --> 01:34:04,400
i mean the website that an attacker will

2133
01:34:04,400 --> 01:34:06,320
go to when they want to view the data

2134
01:34:06,320 --> 01:34:08,960
that have been collected by the app

2135
01:34:08,960 --> 01:34:10,880
we again see that mobile tracker free is

2136
01:34:10,880 --> 01:34:13,120
the one that was visited most frequently

2137
01:34:13,120 --> 01:34:15,040
but spike mobile has fallen down in the

2138
01:34:15,040 --> 01:34:17,040
rankings a little bit

2139
01:34:17,040 --> 01:34:18,639
so clearly it is the case that the

2140
01:34:18,639 --> 01:34:20,320
popularity of the app does not

2141
01:34:20,320 --> 01:34:22,880
necessarily correspond to how many times

2142
01:34:22,880 --> 01:34:24,239
somebody is checking the

2143
01:34:24,239 --> 01:34:26,880
dashboard we theorize that might be

2144
01:34:26,880 --> 01:34:28,719
because of differing app capabilities

2145
01:34:28,719 --> 01:34:30,400
mobile tracker free has a lot more

2146
01:34:30,400 --> 01:34:30,960
features

2147
01:34:30,960 --> 01:34:32,719
than spy to mobile spider mobile is

2148
01:34:32,719 --> 01:34:36,480
mostly good at tracking location

2149
01:34:38,639 --> 01:34:40,239
and the next case study that we looked

2150
01:34:40,239 --> 01:34:42,159
at was contract cheating which

2151
01:34:42,159 --> 01:34:43,920
is the new form of plagiarism that the

2152
01:34:43,920 --> 01:34:46,480
kids are using these days so

2153
01:34:46,480 --> 01:34:48,000
in case you haven't heard of this these

2154
01:34:48,000 --> 01:34:49,840
are services that you can buy as a

2155
01:34:49,840 --> 01:34:50,320
student

2156
01:34:50,320 --> 01:34:52,480
to complete your homework or your

2157
01:34:52,480 --> 01:34:55,119
projects or even entire classes for you

2158
01:34:55,119 --> 01:34:56,639
i've even seen a few that are offering

2159
01:34:56,639 --> 01:34:59,679
to get entire online degrees

2160
01:34:59,679 --> 01:35:00,960
it's pretty hard to detect when a

2161
01:35:00,960 --> 01:35:02,719
student is using this because

2162
01:35:02,719 --> 01:35:04,239
they're not actually plagiarizing

2163
01:35:04,239 --> 01:35:06,000
they're not copying work that exists

2164
01:35:06,000 --> 01:35:06,719
already

2165
01:35:06,719 --> 01:35:08,159
they're hiring someone to create

2166
01:35:08,159 --> 01:35:10,159
original content for them

2167
01:35:10,159 --> 01:35:11,840
of course your mileage may vary some of

2168
01:35:11,840 --> 01:35:13,600
these services are better than others

2169
01:35:13,600 --> 01:35:15,600
but there are a few that are good enough

2170
01:35:15,600 --> 01:35:17,199
to get a's in

2171
01:35:17,199 --> 01:35:19,040
most cases even including college and

2172
01:35:19,040 --> 01:35:22,400
sometimes graduate classes

2173
01:35:23,840 --> 01:35:25,520
so it's of course hard to observe in the

2174
01:35:25,520 --> 01:35:27,840
wild because students aren't going to

2175
01:35:27,840 --> 01:35:29,440
just admit that they have done cheating

2176
01:35:29,440 --> 01:35:30,960
even on anonymous surveys

2177
01:35:30,960 --> 01:35:32,480
which is how a lot of this work has been

2178
01:35:32,480 --> 01:35:34,639
done in the past so we had truffle

2179
01:35:34,639 --> 01:35:35,920
hunter look for it

2180
01:35:35,920 --> 01:35:38,719
and we observed that yes you see a lot

2181
01:35:38,719 --> 01:35:40,560
of requests per day to these contract

2182
01:35:40,560 --> 01:35:42,239
cheating websites

2183
01:35:42,239 --> 01:35:44,560
now of course a request made for the

2184
01:35:44,560 --> 01:35:46,320
website doesn't necessarily mean that a

2185
01:35:46,320 --> 01:35:47,760
student bought anything

2186
01:35:47,760 --> 01:35:49,600
but it's still an interesting number to

2187
01:35:49,600 --> 01:35:50,960
observe

2188
01:35:50,960 --> 01:35:52,960
we saw that some of these decrease some

2189
01:35:52,960 --> 01:35:54,159
of these services

2190
01:35:54,159 --> 01:35:55,840
which we measured over the last couple

2191
01:35:55,840 --> 01:35:57,280
weeks of may were

2192
01:35:57,280 --> 01:35:59,440
decreasing over time which we thought

2193
01:35:59,440 --> 01:36:00,960
was interesting it might indicate that

2194
01:36:00,960 --> 01:36:02,560
schools are letting out for summer break

2195
01:36:02,560 --> 01:36:06,320
so demand for cheating is going down

2196
01:36:07,199 --> 01:36:09,280
and then finally because we had some of

2197
01:36:09,280 --> 01:36:11,760
these domains we look for typo squatting

2198
01:36:11,760 --> 01:36:14,159
these domains are pretty old we don't

2199
01:36:14,159 --> 01:36:15,360
expect that they are

2200
01:36:15,360 --> 01:36:17,679
being used to fish anybody anymore

2201
01:36:17,679 --> 01:36:18,560
because

2202
01:36:18,560 --> 01:36:20,719
received wisdom in prior work says that

2203
01:36:20,719 --> 01:36:22,239
phishing domains and type of squatting

2204
01:36:22,239 --> 01:36:24,719
domains usually roll over very quickly

2205
01:36:24,719 --> 01:36:26,080
they get blacklisted and then the

2206
01:36:26,080 --> 01:36:29,199
miscreants move on to other domains

2207
01:36:29,199 --> 01:36:30,719
so you wouldn't expect that any of these

2208
01:36:30,719 --> 01:36:33,040
would still be receiving dns requests

2209
01:36:33,040 --> 01:36:35,119
but we saw that yes they are still

2210
01:36:35,119 --> 01:36:37,040
getting a few requests per day which is

2211
01:36:37,040 --> 01:36:39,840
interesting

2212
01:36:40,560 --> 01:36:42,639
so the takeaway from our point of view

2213
01:36:42,639 --> 01:36:44,960
is that cash snooping on public

2214
01:36:44,960 --> 01:36:45,920
resolvers

2215
01:36:45,920 --> 01:36:48,159
shouldn't actually be gotten rid of yet

2216
01:36:48,159 --> 01:36:50,159
we argue that there are minimal privacy

2217
01:36:50,159 --> 01:36:51,600
concerns when you're cash snooping on

2218
01:36:51,600 --> 01:36:53,360
public resolvers because there are too

2219
01:36:53,360 --> 01:36:55,840
many users to figure out which user put

2220
01:36:55,840 --> 01:36:56,400
a domain

2221
01:36:56,400 --> 01:36:59,600
into cash and if you allow cash snooping

2222
01:36:59,600 --> 01:37:01,119
on these resolvers then

2223
01:37:01,119 --> 01:37:02,719
you can measure types of harm that are

2224
01:37:02,719 --> 01:37:05,360
otherwise very difficult to study

2225
01:37:05,360 --> 01:37:08,080
in particular for stalker ware it's very

2226
01:37:08,080 --> 01:37:09,679
difficult to figure out how much of this

2227
01:37:09,679 --> 01:37:11,440
stuff exists in the wild and each

2228
01:37:11,440 --> 01:37:13,199
instance of stalkerware represents a

2229
01:37:13,199 --> 01:37:16,080
significant amount of harm being done

2230
01:37:16,080 --> 01:37:18,000
furthermore contract cheating is

2231
01:37:18,000 --> 01:37:19,600
difficult to study because students are

2232
01:37:19,600 --> 01:37:20,000
just not

2233
01:37:20,000 --> 01:37:21,280
honest about whether or not they've

2234
01:37:21,280 --> 01:37:23,440
bought cheating software

2235
01:37:23,440 --> 01:37:24,880
and then there's other phenomena which

2236
01:37:24,880 --> 01:37:26,560
we didn't get a chance to measure

2237
01:37:26,560 --> 01:37:28,320
very well which we would like to look

2238
01:37:28,320 --> 01:37:29,760
into more in the future

2239
01:37:29,760 --> 01:37:32,639
such as these new hack for hire services

2240
01:37:32,639 --> 01:37:33,199
and

2241
01:37:33,199 --> 01:37:35,280
phishing which by all accounts is quite

2242
01:37:35,280 --> 01:37:37,040
common but we would like to see how much

2243
01:37:37,040 --> 01:37:38,560
of it is happening in various places

2244
01:37:38,560 --> 01:37:41,280
around the world

2245
01:37:42,320 --> 01:37:45,679
to conclude we found that public dns

2246
01:37:45,679 --> 01:37:46,960
resolvers

2247
01:37:46,960 --> 01:37:48,960
enable us to use cash snooping as a

2248
01:37:48,960 --> 01:37:51,119
privacy preserving measurement technique

2249
01:37:51,119 --> 01:37:53,600
rather than an attack we think this is a

2250
01:37:53,600 --> 01:37:55,119
valuable measurement technique that

2251
01:37:55,119 --> 01:37:57,360
should not be disabled on specifically

2252
01:37:57,360 --> 01:37:59,679
public dns resolvers

2253
01:37:59,679 --> 01:38:01,920
we also found that to use cash snooping

2254
01:38:01,920 --> 01:38:03,040
on public resolvers

2255
01:38:03,040 --> 01:38:04,560
you have to understand their cash

2256
01:38:04,560 --> 01:38:06,639
architecture which is quite complex

2257
01:38:06,639 --> 01:38:08,560
so we reverse engineered four of these

2258
01:38:08,560 --> 01:38:10,239
resolver strategies

2259
01:38:10,239 --> 01:38:12,239
and we did find that cloudflare and

2260
01:38:12,239 --> 01:38:13,440
google caused some

2261
01:38:13,440 --> 01:38:16,080
minor ttl non-compliance whether that's

2262
01:38:16,080 --> 01:38:18,000
an actual issue or not is not up for us

2263
01:38:18,000 --> 01:38:19,760
to decide but we suspect it's not that

2264
01:38:19,760 --> 01:38:21,760
much of a problem

2265
01:38:21,760 --> 01:38:23,840
and then finally we used our tool to

2266
01:38:23,840 --> 01:38:25,840
find non-trivial lower bounds of the

2267
01:38:25,840 --> 01:38:27,360
prevalence of internet phenomena that

2268
01:38:27,360 --> 01:38:30,320
were previously very difficult to study

2269
01:38:30,320 --> 01:38:32,159
so travel hunter is open source if you

2270
01:38:32,159 --> 01:38:33,760
want to try it out for yourself from a

2271
01:38:33,760 --> 01:38:35,280
single location you can go to this

2272
01:38:35,280 --> 01:38:37,520
github link at the bottom of the slide

2273
01:38:37,520 --> 01:38:38,960
and i'd like to thank you for your

2274
01:38:38,960 --> 01:38:42,480
attention and take questions at this

2275
01:38:42,840 --> 01:38:45,280
time

2276
01:38:45,280 --> 01:38:48,000
okay thank you very much audrey uh

2277
01:38:48,000 --> 01:38:49,119
excellent talk

2278
01:38:49,119 --> 01:38:52,960
um i i see there's uh a bunch of

2279
01:38:52,960 --> 01:38:56,080
uh discussion in the chat there um if

2280
01:38:56,080 --> 01:38:57,440
anyone

2281
01:38:57,440 --> 01:39:00,239
uh wishes to ask questions in the audio

2282
01:39:00,239 --> 01:39:01,440
then

2283
01:39:01,440 --> 01:39:06,400
please go ahead please join the queue

2284
01:39:07,679 --> 01:39:11,040
i don't know if audrey has yes

2285
01:39:11,040 --> 01:39:15,040
you are sorry figure out figuring out

2286
01:39:15,040 --> 01:39:18,000
oh dear oh dear i i can see you and i

2287
01:39:18,000 --> 01:39:19,600
can hear you

2288
01:39:19,600 --> 01:39:21,199
i'm getting quite a bit of echo let me

2289
01:39:21,199 --> 01:39:26,600
just plug in the headphones real fast

2290
01:39:26,600 --> 01:39:28,719
[Music]

2291
01:39:28,719 --> 01:39:30,719
all right colin can you say something

2292
01:39:30,719 --> 01:39:33,280
yeah is it working better now

2293
01:39:33,280 --> 01:39:36,800
yes i believe so okay so

2294
01:39:36,800 --> 01:39:38,800
um there are a few questions in the chat

2295
01:39:38,800 --> 01:39:40,480
that i haven't had a chance to get to

2296
01:39:40,480 --> 01:39:42,480
yet

2297
01:39:42,480 --> 01:39:45,199
people in the audio queue as well all

2298
01:39:45,199 --> 01:39:45,760
right

2299
01:39:45,760 --> 01:39:48,320
so to andrew's question about um

2300
01:39:48,320 --> 01:39:50,239
resolvers offering malicious content

2301
01:39:50,239 --> 01:39:51,119
filtering

2302
01:39:51,119 --> 01:39:53,440
we were using the services that provide

2303
01:39:53,440 --> 01:39:55,040
content filtering but the thing about

2304
01:39:55,040 --> 01:39:55,840
stalker ware

2305
01:39:55,840 --> 01:39:58,080
is that it usually isn't filtered

2306
01:39:58,080 --> 01:39:59,679
because most threat feeds didn't

2307
01:39:59,679 --> 01:40:02,560
consider it a threat until very recently

2308
01:40:02,560 --> 01:40:04,639
um it's kind of an emerging threat so

2309
01:40:04,639 --> 01:40:05,760
people haven't been

2310
01:40:05,760 --> 01:40:08,560
focusing on it too much until just the

2311
01:40:08,560 --> 01:40:10,159
the last couple of years

2312
01:40:10,159 --> 01:40:12,960
and the the problem with trying to block

2313
01:40:12,960 --> 01:40:13,760
stalker ware

2314
01:40:13,760 --> 01:40:15,440
is that first of all you have the dual

2315
01:40:15,440 --> 01:40:17,119
use issue so you could be blocking a

2316
01:40:17,119 --> 01:40:19,040
legitimate app that is being used for a

2317
01:40:19,040 --> 01:40:20,480
legal purpose

2318
01:40:20,480 --> 01:40:23,840
and second um

2319
01:40:23,840 --> 01:40:25,840
if you block it then you have the risk

2320
01:40:25,840 --> 01:40:27,280
of making a stalker think

2321
01:40:27,280 --> 01:40:29,920
that the person being stalked is trying

2322
01:40:29,920 --> 01:40:30,480
to

2323
01:40:30,480 --> 01:40:32,239
leave the toxic relationship or trying

2324
01:40:32,239 --> 01:40:34,400
to take action against the stalker

2325
01:40:34,400 --> 01:40:36,800
and research suggests that that is the

2326
01:40:36,800 --> 01:40:38,000
point at which

2327
01:40:38,000 --> 01:40:41,360
um surveillance can turn violent

2328
01:40:41,360 --> 01:40:43,119
so it's it's not necessarily a good

2329
01:40:43,119 --> 01:40:44,880
thing to block this stuff so most threat

2330
01:40:44,880 --> 01:40:45,360
fees

2331
01:40:45,360 --> 01:40:49,440
don't um let's see

2332
01:40:49,440 --> 01:40:51,360
jim asked where we got the domain names

2333
01:40:51,360 --> 01:40:52,880
for contract cheating services

2334
01:40:52,880 --> 01:40:54,480
they're very easy to find if you google

2335
01:40:54,480 --> 01:40:56,480
them so what we're measuring is hits

2336
01:40:56,480 --> 01:40:58,880
on the main landing page for each of

2337
01:40:58,880 --> 01:40:59,600
these

2338
01:40:59,600 --> 01:41:01,040
services when you just get there from a

2339
01:41:01,040 --> 01:41:03,199
google search

2340
01:41:03,199 --> 01:41:05,839
um

2341
01:41:08,880 --> 01:41:10,719
let's see and then the list of typo

2342
01:41:10,719 --> 01:41:12,400
squad names came from

2343
01:41:12,400 --> 01:41:14,800
i think a couple of older papers which

2344
01:41:14,800 --> 01:41:16,400
is why we wouldn't have expected to see

2345
01:41:16,400 --> 01:41:18,000
any of them and why it was interesting

2346
01:41:18,000 --> 01:41:19,520
that some of them were still getting you

2347
01:41:19,520 --> 01:41:23,119
know up to 100 hits per day

2348
01:41:23,280 --> 01:41:24,960
i think jonathan has a question in the

2349
01:41:24,960 --> 01:41:27,360
audio

2350
01:41:30,840 --> 01:41:32,000
what

2351
01:41:32,000 --> 01:41:35,679
uh hi um the the number of

2352
01:41:35,679 --> 01:41:38,880
uh dual use uh

2353
01:41:38,880 --> 01:41:40,960
technologies seemed very low compared to

2354
01:41:40,960 --> 01:41:42,719
the amount of stock aware

2355
01:41:42,719 --> 01:41:45,520
was is that the what you actually

2356
01:41:45,520 --> 01:41:46,719
measured that

2357
01:41:46,719 --> 01:41:48,800
dual use is less common than stalker

2358
01:41:48,800 --> 01:41:50,960
wire

2359
01:41:50,960 --> 01:41:54,320
um the particular dual apps dual use

2360
01:41:54,320 --> 01:41:55,600
apps that we measured

2361
01:41:55,600 --> 01:41:58,239
did seem to be less common than the most

2362
01:41:58,239 --> 01:42:00,480
common types of overt stalker wear

2363
01:42:00,480 --> 01:42:02,400
but there could be a number of reasons

2364
01:42:02,400 --> 01:42:04,639
for that so first of all we didn't

2365
01:42:04,639 --> 01:42:05,119
measure

2366
01:42:05,119 --> 01:42:10,000
as many dual use apps by choice because

2367
01:42:10,000 --> 01:42:11,840
people know more about the dual use ones

2368
01:42:11,840 --> 01:42:13,040
about their their usage and their

2369
01:42:13,040 --> 01:42:14,400
prevalence already and what we really

2370
01:42:14,400 --> 01:42:16,960
wanted to know was the overt ones

2371
01:42:16,960 --> 01:42:18,639
so we may not have found the most

2372
01:42:18,639 --> 01:42:21,360
popular ones

2373
01:42:22,320 --> 01:42:24,639
we we do find based on previous

2374
01:42:24,639 --> 01:42:26,000
literature in this space

2375
01:42:26,000 --> 01:42:29,040
that most surveillance is actually not

2376
01:42:29,040 --> 01:42:29,440
done

2377
01:42:29,440 --> 01:42:33,360
by the um the overt apps it's done by

2378
01:42:33,360 --> 01:42:34,400
you know

2379
01:42:34,400 --> 01:42:36,080
misconfigured sharing settings or

2380
01:42:36,080 --> 01:42:38,480
whatnot um

2381
01:42:38,480 --> 01:42:40,159
so that was the the really interesting

2382
01:42:40,159 --> 01:42:41,760
thing we wanted to find out was

2383
01:42:41,760 --> 01:42:44,960
why the overt stuff was there

2384
01:42:45,360 --> 01:42:48,560
interesting thank you okay

2385
01:42:48,560 --> 01:42:50,800
jim

2386
01:42:51,600 --> 01:42:53,199
great work audrey i think this is an

2387
01:42:53,199 --> 01:42:54,800
excellent presentation

2388
01:42:54,800 --> 01:42:56,560
um could you see a little bit more about

2389
01:42:56,560 --> 01:42:58,639
the rd bit setting stuff has that had

2390
01:42:58,639 --> 01:43:00,639
any influence on your work or on the

2391
01:43:00,639 --> 01:43:02,639
behavior of the caches that you're

2392
01:43:02,639 --> 01:43:05,679
measuring um

2393
01:43:05,679 --> 01:43:08,159
um i'm sorry you cut out for just a

2394
01:43:08,159 --> 01:43:09,040
second at the end

2395
01:43:09,040 --> 01:43:10,719
sorry you mentioned earlier in the

2396
01:43:10,719 --> 01:43:12,560
presentation about the rd

2397
01:43:12,560 --> 01:43:15,760
bit setting on the queries could you say

2398
01:43:15,760 --> 01:43:17,520
a little bit more about how that's

2399
01:43:17,520 --> 01:43:19,600
influenced your work or the behavior of

2400
01:43:19,600 --> 01:43:20,560
these

2401
01:43:20,560 --> 01:43:24,000
resolver caches yes

2402
01:43:24,000 --> 01:43:26,400
so the kind of cash snooping that we're

2403
01:43:26,400 --> 01:43:28,320
doing wouldn't be possible without

2404
01:43:28,320 --> 01:43:30,320
poisoning the caches ourselves

2405
01:43:30,320 --> 01:43:32,639
without using the the recursion desired

2406
01:43:32,639 --> 01:43:33,520
bit because

2407
01:43:33,520 --> 01:43:35,760
um recursion if the recursion desired

2408
01:43:35,760 --> 01:43:37,520
bit is off of course you make the query

2409
01:43:37,520 --> 01:43:39,199
and if it isn't in cash then it won't

2410
01:43:39,199 --> 01:43:40,800
get put into cash

2411
01:43:40,800 --> 01:43:43,600
uh google was the exception to this

2412
01:43:43,600 --> 01:43:44,320
because

2413
01:43:44,320 --> 01:43:47,520
we found that if we had

2414
01:43:47,520 --> 01:43:49,600
hit a back end resolver that had the

2415
01:43:49,600 --> 01:43:51,440
query cache and then we hit a front-end

2416
01:43:51,440 --> 01:43:52,080
resolver

2417
01:43:52,080 --> 01:43:54,080
that did not have the query cache a

2418
01:43:54,080 --> 01:43:55,119
front-end cache

2419
01:43:55,119 --> 01:43:57,520
that did not have the query cached then

2420
01:43:57,520 --> 01:43:58,800
the

2421
01:43:58,800 --> 01:44:00,480
um the record would be copied from the

2422
01:44:00,480 --> 01:44:01,920
back-end resolver to the front-end

2423
01:44:01,920 --> 01:44:02,800
resolver

2424
01:44:02,800 --> 01:44:05,840
so our own probes would fill the caches

2425
01:44:05,840 --> 01:44:07,360
there and we did find that it was a

2426
01:44:07,360 --> 01:44:08,560
challenge to remove

2427
01:44:08,560 --> 01:44:11,600
the poisoning that we had done and then

2428
01:44:11,600 --> 01:44:12,880
as someone just pointed

2429
01:44:12,880 --> 01:44:15,920
out in the chat yes so unbound will

2430
01:44:15,920 --> 01:44:18,159
return a refused response

2431
01:44:18,159 --> 01:44:20,560
when you try and make a query with the

2432
01:44:20,560 --> 01:44:22,800
recursion desired flag

2433
01:44:22,800 --> 01:44:24,400
which was why we could only measure half

2434
01:44:24,400 --> 01:44:26,560
of the caches at quad9 because if they

2435
01:44:26,560 --> 01:44:28,800
had a resolver with unbound software

2436
01:44:28,800 --> 01:44:31,520
that received the original query then it

2437
01:44:31,520 --> 01:44:34,159
became invisible to truffle hunter

2438
01:44:34,159 --> 01:44:37,280
does that answer your question

2439
01:44:45,280 --> 01:44:48,639
okay yes it does sorry i didn't realize

2440
01:44:48,639 --> 01:44:51,440
you still had to make

2441
01:44:53,199 --> 01:44:56,400
so uh i see some discussion about uh

2442
01:44:56,400 --> 01:44:58,800
whether it's desirable to enable the the

2443
01:44:58,800 --> 01:45:00,800
ability to respond to rd equals zero

2444
01:45:00,800 --> 01:45:04,800
zero queries in the chats

2445
01:45:04,960 --> 01:45:08,000
um yeah

2446
01:45:08,000 --> 01:45:11,520
so i think the the issue is

2447
01:45:11,520 --> 01:45:15,280
that um sorry the the issue with whether

2448
01:45:15,280 --> 01:45:16,800
or not to enable

2449
01:45:16,800 --> 01:45:19,920
recursion desired is you want to enable

2450
01:45:19,920 --> 01:45:21,760
recursion desired if you want to enable

2451
01:45:21,760 --> 01:45:23,440
these types of measurement studies on

2452
01:45:23,440 --> 01:45:25,360
resolvers where there are

2453
01:45:25,360 --> 01:45:28,239
few to no de-anonymization risks for

2454
01:45:28,239 --> 01:45:29,040
users

2455
01:45:29,040 --> 01:45:31,520
and those are the large resolvers if you

2456
01:45:31,520 --> 01:45:32,320
are running

2457
01:45:32,320 --> 01:45:34,320
dns resolving software and you know that

2458
01:45:34,320 --> 01:45:36,239
it's going to get put on small home

2459
01:45:36,239 --> 01:45:37,840
routers which can be used

2460
01:45:37,840 --> 01:45:41,600
as you know misconfigured open resolvers

2461
01:45:41,600 --> 01:45:44,320
then i would say no you want to have

2462
01:45:44,320 --> 01:45:46,560
defenses against cash snooping and sure

2463
01:45:46,560 --> 01:45:48,239
that could include not allowing queries

2464
01:45:48,239 --> 01:45:50,639
with recursion desired on set

2465
01:45:50,639 --> 01:45:52,400
um so the question is how large the

2466
01:45:52,400 --> 01:45:58,239
resolver is

2467
01:45:58,239 --> 01:45:59,520
this may be something where it's worth

2468
01:45:59,520 --> 01:46:01,119
chatting with some of the folks in the

2469
01:46:01,119 --> 01:46:03,360
dns operations group

2470
01:46:03,360 --> 01:46:08,180
yes absolutely i would love to do that

2471
01:46:08,180 --> 01:46:10,840
[Music]

2472
01:46:10,840 --> 01:46:13,840
um

2473
01:46:18,000 --> 01:46:20,320
so there's a question about results from

2474
01:46:20,320 --> 01:46:22,239
around the world

2475
01:46:22,239 --> 01:46:26,320
yes um jonathan is saying it would be

2476
01:46:26,320 --> 01:46:28,080
sorry i'm getting some echo again did i

2477
01:46:28,080 --> 01:46:30,480
do something

2478
01:46:30,480 --> 01:46:32,639
okay um yeah jonathan was saying it

2479
01:46:32,639 --> 01:46:33,679
would be great to see results from

2480
01:46:33,679 --> 01:46:34,719
around the world

2481
01:46:34,719 --> 01:46:37,199
um yes so the measurement platform that

2482
01:46:37,199 --> 01:46:38,960
we're using which is how we get results

2483
01:46:38,960 --> 01:46:40,000
from around the united

2484
01:46:40,000 --> 01:46:42,159
states doesn't have quite as many nodes

2485
01:46:42,159 --> 01:46:43,600
around the world but yes it would be

2486
01:46:43,600 --> 01:46:44,400
great to

2487
01:46:44,400 --> 01:46:48,080
um to expand to that

2488
01:46:48,080 --> 01:46:52,159
um what what would it need to do that so

2489
01:46:52,159 --> 01:46:54,160
do you

2490
01:46:54,160 --> 01:46:55,600
[Music]

2491
01:46:55,600 --> 01:46:57,119
no it would actually probably be

2492
01:46:57,119 --> 01:46:58,639
reasonably straightforward

2493
01:46:58,639 --> 01:47:00,719
um we were keeping our experiment to the

2494
01:47:00,719 --> 01:47:02,639
united states in the first place so that

2495
01:47:02,639 --> 01:47:03,360
we wouldn't

2496
01:47:03,360 --> 01:47:06,960
add too much load on their system um

2497
01:47:06,960 --> 01:47:08,560
and then it just ended up that that was

2498
01:47:08,560 --> 01:47:10,560
the data that we had to to publish our

2499
01:47:10,560 --> 01:47:12,400
results we are at the moment working on

2500
01:47:12,400 --> 01:47:13,440
expanding

2501
01:47:13,440 --> 01:47:16,159
a similar tool to truffle hunter um but

2502
01:47:16,159 --> 01:47:17,199
instead of measuring

2503
01:47:17,199 --> 01:47:19,119
domain usage we're trying to measure dns

2504
01:47:19,119 --> 01:47:21,040
hijacking and we do want to

2505
01:47:21,040 --> 01:47:23,520
expand that to worldwide using similar

2506
01:47:23,520 --> 01:47:25,920
techniques

2507
01:47:31,679 --> 01:47:35,199
vladimir is saying that default settings

2508
01:47:35,199 --> 01:47:36,000
aren't targeted

2509
01:47:36,000 --> 01:47:38,159
for use huge instances like those

2510
01:47:38,159 --> 01:47:39,440
studied i don't know if you want to

2511
01:47:39,440 --> 01:47:42,400
elaborate a little bit more on that

2512
01:47:42,400 --> 01:47:45,760
um are we talking about

2513
01:47:45,760 --> 01:47:48,800
enabling recursion desired or not in in

2514
01:47:48,800 --> 01:47:51,840
large public resolvers

2515
01:47:54,480 --> 01:47:58,320
yes um yes i think

2516
01:47:58,320 --> 01:48:00,159
having the ability to enable it or

2517
01:48:00,159 --> 01:48:03,520
disable it based on what kind of

2518
01:48:03,520 --> 01:48:04,800
what kind of resolver you're running the

2519
01:48:04,800 --> 01:48:06,800
size of the resolver you're running is

2520
01:48:06,800 --> 01:48:10,800
is probably the the best solution

2521
01:48:17,440 --> 01:48:19,520
okay i can't tell jim i used still in

2522
01:48:19,520 --> 01:48:22,639
the queue to talk

2523
01:48:30,840 --> 01:48:33,840
buddy

2524
01:48:35,760 --> 01:48:39,119
okay uh so i had a question uh i mean

2525
01:48:39,119 --> 01:48:41,840
we're seeing uh obviously um people

2526
01:48:41,840 --> 01:48:43,280
making increasing use of

2527
01:48:43,280 --> 01:48:45,280
uh you know different types of dns

2528
01:48:45,280 --> 01:48:46,719
transports you know

2529
01:48:46,719 --> 01:48:49,920
over tls or over https uh

2530
01:48:49,920 --> 01:48:52,239
and we're seeing um new techniques like

2531
01:48:52,239 --> 01:48:52,960
oblivious

2532
01:48:52,960 --> 01:48:55,600
dns that are getting proposed um do any

2533
01:48:55,600 --> 01:48:57,360
of these make a difference to the type

2534
01:48:57,360 --> 01:48:59,520
of work you're doing

2535
01:48:59,520 --> 01:49:02,800
um dns sec and dns over

2536
01:49:02,800 --> 01:49:06,560
https or dns over tls do not affect

2537
01:49:06,560 --> 01:49:08,480
our work because the queries still get

2538
01:49:08,480 --> 01:49:10,000
cached the same way

2539
01:49:10,000 --> 01:49:11,360
you mentioned oblivious i haven't

2540
01:49:11,360 --> 01:49:14,000
actually heard of that before

2541
01:49:14,000 --> 01:49:16,560
uh yeah this is a a new thing which i

2542
01:49:16,560 --> 01:49:17,280
have to say

2543
01:49:17,280 --> 01:49:18,960
i don't know a whole lot about it seems

2544
01:49:18,960 --> 01:49:21,280
to be using uh encryption and proxy

2545
01:49:21,280 --> 01:49:23,119
resolvers to anonymize the

2546
01:49:23,119 --> 01:49:26,560
people making the queries okay

2547
01:49:26,560 --> 01:49:28,480
um i suspect that as long as those

2548
01:49:28,480 --> 01:49:30,560
queries are still arriving at public

2549
01:49:30,560 --> 01:49:32,080
resolvers then it won't interfere with

2550
01:49:32,080 --> 01:49:33,040
our technique

2551
01:49:33,040 --> 01:49:34,800
but if it provides an extra layer of

2552
01:49:34,800 --> 01:49:36,480
anonymization for the people making the

2553
01:49:36,480 --> 01:49:37,760
queries then

2554
01:49:37,760 --> 01:49:42,560
awesome presumably the um

2555
01:49:42,560 --> 01:49:44,800
that the dns over https would maybe

2556
01:49:44,800 --> 01:49:46,159
allow some of these

2557
01:49:46,159 --> 01:49:49,840
um uh some of the stockwear

2558
01:49:49,840 --> 01:49:52,000
apps to make the dns queries in a more

2559
01:49:52,000 --> 01:49:53,199
controlled way

2560
01:49:53,199 --> 01:49:56,320
so maybe avoid resolvers yes

2561
01:49:56,320 --> 01:49:58,480
it might the thing about stalkerware

2562
01:49:58,480 --> 01:49:59,760
apps is that they tend to be

2563
01:49:59,760 --> 01:50:02,239
incredibly unsophisticated they don't

2564
01:50:02,239 --> 01:50:04,080
try and obfuscate their code at all

2565
01:50:04,080 --> 01:50:06,000
half of them crash as soon as they get

2566
01:50:06,000 --> 01:50:07,599
installed on the phone at least on an

2567
01:50:07,599 --> 01:50:08,960
older device

2568
01:50:08,960 --> 01:50:11,360
um and they they seem to have a lot of

2569
01:50:11,360 --> 01:50:13,199
bugs and problems in general so

2570
01:50:13,199 --> 01:50:14,960
i would be surprised to see them

2571
01:50:14,960 --> 01:50:16,800
adopting any sophisticated techniques

2572
01:50:16,800 --> 01:50:18,239
like that in the near future

2573
01:50:18,239 --> 01:50:20,080
but there are some that are certainly

2574
01:50:20,080 --> 01:50:22,000
ahead of the game like flexispy

2575
01:50:22,000 --> 01:50:25,360
um that would be a more problem

2576
01:50:25,360 --> 01:50:28,719
more of a problem than the others

2577
01:50:29,440 --> 01:50:32,480
okay um jonathan is pointing out that

2578
01:50:32,480 --> 01:50:34,639
this might mess with our geolocation

2579
01:50:34,639 --> 01:50:38,719
yes but i think as we realize uh anycast

2580
01:50:38,719 --> 01:50:41,440
is is not a great way to do geolocation

2581
01:50:41,440 --> 01:50:42,320
in any case

2582
01:50:42,320 --> 01:50:44,800
so you know our geolocation is a little

2583
01:50:44,800 --> 01:50:46,719
bit suspect we can say that users

2584
01:50:46,719 --> 01:50:48,880
possibly in a very broad region are

2585
01:50:48,880 --> 01:50:50,400
experiencing more

2586
01:50:50,400 --> 01:50:52,960
stuck aware or whatnot then then users

2587
01:50:52,960 --> 01:50:54,400
across the country but

2588
01:50:54,400 --> 01:50:56,400
anycast is not a great way to figure out

2589
01:50:56,400 --> 01:50:57,760
where users actually

2590
01:50:57,760 --> 01:51:00,480
are to the best of my knowledge in any

2591
01:51:00,480 --> 01:51:02,718
case

2592
01:51:04,840 --> 01:51:07,840
um

2593
01:51:08,719 --> 01:51:09,920
there's some more questions about

2594
01:51:09,920 --> 01:51:12,000
oblivious which i feel like i might not

2595
01:51:12,000 --> 01:51:14,719
be able to answer

2596
01:51:15,040 --> 01:51:16,400
yeah i'm sure some of the people

2597
01:51:16,400 --> 01:51:18,719
developing oblivious uh are probably

2598
01:51:18,719 --> 01:51:20,320
here so we can we can hook you up we've

2599
01:51:20,320 --> 01:51:21,280
done that

2600
01:51:21,280 --> 01:51:22,480
yeah i would love to learn more about

2601
01:51:22,480 --> 01:51:24,718
that

2602
01:51:30,159 --> 01:51:32,719
okay um i think it would also be good if

2603
01:51:32,719 --> 01:51:34,080
any of the operators

2604
01:51:34,080 --> 01:51:37,520
of these services uh uh around uh

2605
01:51:37,520 --> 01:51:39,679
if we could try and put you in touch

2606
01:51:39,679 --> 01:51:42,159
with them as well that would be helpful

2607
01:51:42,159 --> 01:51:44,960
yeah that would be great

2608
01:51:47,679 --> 01:51:50,800
all right uh as already last questions

2609
01:51:50,800 --> 01:51:52,159
for audrey

2610
01:51:52,159 --> 01:52:02,960
before we finish up

2611
01:52:02,960 --> 01:52:05,119
no i guess that's everyone well thank

2612
01:52:05,119 --> 01:52:06,560
you uh again uh

2613
01:52:06,560 --> 01:52:09,360
to to audrey and and to francis uh the

2614
01:52:09,360 --> 01:52:11,440
two two really nice talks uh some really

2615
01:52:11,440 --> 01:52:12,239
good discussion

2616
01:52:12,239 --> 01:52:15,440
uh and i know it's a a fairly unpleasant

2617
01:52:15,440 --> 01:52:16,239
error in

2618
01:52:16,239 --> 01:52:18,159
the day for both of them so thank you

2619
01:52:18,159 --> 01:52:19,920
for getting up so early to uh

2620
01:52:19,920 --> 01:52:23,440
participate in this uh as i as i said at

2621
01:52:23,440 --> 01:52:23,679
the

2622
01:52:23,679 --> 01:52:26,000
the end of uh francis's talker i'm sure

2623
01:52:26,000 --> 01:52:28,000
both audrey and francis will be

2624
01:52:28,000 --> 01:52:29,599
around for for the rest of the week and

2625
01:52:29,599 --> 01:52:31,280
will be available if you want to chat

2626
01:52:31,280 --> 01:52:31,840
with them

2627
01:52:31,840 --> 01:52:34,239
uh so please do get in touch with them

2628
01:52:34,239 --> 01:52:35,280
if you have any

2629
01:52:35,280 --> 01:52:37,199
any questions or want to talk about any

2630
01:52:37,199 --> 01:52:39,280
of this work further

2631
01:52:39,280 --> 01:52:41,520
uh and that's uh that's all we have uh

2632
01:52:41,520 --> 01:52:42,480
for this session

2633
01:52:42,480 --> 01:52:46,239
uh today uh look out for the um

2634
01:52:46,239 --> 01:52:48,560
applied networking research workshop uh

2635
01:52:48,560 --> 01:52:49,840
call for papers uh

2636
01:52:49,840 --> 01:52:52,080
coming up uh and uh look out for the

2637
01:52:52,080 --> 01:52:54,400
rest of the the irtf sessions uh later

2638
01:52:54,400 --> 01:52:55,520
this week

2639
01:52:55,520 --> 01:52:58,159
uh and the the recordings of these talks

2640
01:52:58,159 --> 01:52:59,760
uh and the links to the papers

2641
01:52:59,760 --> 01:53:02,080
are on the irtf web page if you want to

2642
01:53:02,080 --> 01:53:05,280
look into them in more detail

2643
01:53:05,280 --> 01:53:13,840
all right thanks everybody

2644
01:53:37,840 --> 01:53:39,920
you

