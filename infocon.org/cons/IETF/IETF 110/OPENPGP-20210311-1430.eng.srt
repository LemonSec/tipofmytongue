1
00:00:21,279 --> 00:00:22,160
okay i guess we're

2
00:00:22,160 --> 00:00:25,840
at time so as dkj said a minute ago

3
00:00:25,840 --> 00:00:26,720
we're

4
00:00:26,720 --> 00:00:28,640
we have one hour today the agenda is

5
00:00:28,640 --> 00:00:30,000
relatively full so we'll try

6
00:00:30,000 --> 00:00:32,558
and scoot on through it uh my name is

7
00:00:32,558 --> 00:00:34,079
steven farrell i'm one of your coaches

8
00:00:34,079 --> 00:00:36,239
and

9
00:00:36,239 --> 00:00:37,760
and i'm daniel kahn gilmore other

10
00:00:37,760 --> 00:00:39,760
co-chair

11
00:00:39,760 --> 00:00:43,360
and okay so dkj you can talk to these

12
00:00:43,360 --> 00:00:44,960
slides and i'll show you

13
00:00:44,960 --> 00:00:47,840
sure um so this is the note well we are

14
00:00:47,840 --> 00:00:48,160
well

15
00:00:48,160 --> 00:00:50,320
into uh the itf hopefully you've seen

16
00:00:50,320 --> 00:00:51,280
this before

17
00:00:51,280 --> 00:00:54,399
this covers um rules about

18
00:00:54,399 --> 00:00:56,160
what is discussed in this meeting um

19
00:00:56,160 --> 00:00:58,000
hopefully you've already read it um i

20
00:00:58,000 --> 00:01:01,440
think we'll skip to the next slide here

21
00:01:01,440 --> 00:01:04,319
um so the agenda is tight today as

22
00:01:04,319 --> 00:01:05,280
steven mentioned

23
00:01:05,280 --> 00:01:08,640
um we are gonna have a brief

24
00:01:08,640 --> 00:01:11,119
reprise of the strategy for the working

25
00:01:11,119 --> 00:01:12,159
group how we're

26
00:01:12,159 --> 00:01:13,439
how we're working on the documents and

27
00:01:13,439 --> 00:01:15,680
then we have three presentations today

28
00:01:15,680 --> 00:01:18,560
um we have a talk about key extraction

29
00:01:18,560 --> 00:01:19,119
attacks

30
00:01:19,119 --> 00:01:21,840
through encrypted private key corruption

31
00:01:21,840 --> 00:01:23,600
a discussion about the interoperability

32
00:01:23,600 --> 00:01:24,880
test suite

33
00:01:24,880 --> 00:01:27,119
and using simple octet strings for

34
00:01:27,119 --> 00:01:29,200
elliptic curves

35
00:01:29,200 --> 00:01:32,720
and then in the remaining time we have

36
00:01:32,720 --> 00:01:35,119
opportunity for the editors of the

37
00:01:35,119 --> 00:01:36,560
crypto refresh draft

38
00:01:36,560 --> 00:01:38,720
which in particular will be paul today

39
00:01:38,720 --> 00:01:40,640
to talk through the status of the draft

40
00:01:40,640 --> 00:01:40,880
and

41
00:01:40,880 --> 00:01:43,200
any issues and hopefully by the end of

42
00:01:43,200 --> 00:01:46,079
this we will be able to discuss

43
00:01:46,079 --> 00:01:49,520
an upcoming interim um i want to give

44
00:01:49,520 --> 00:01:51,200
folks a chance to look at this agenda

45
00:01:51,200 --> 00:01:52,840
and raise concerns

46
00:01:52,840 --> 00:01:56,240
um i see a note from paul in the chat

47
00:01:56,240 --> 00:01:57,200
that says uh

48
00:01:57,200 --> 00:01:59,520
am i talking today we have a chance to

49
00:01:59,520 --> 00:02:01,119
go through open issues

50
00:02:01,119 --> 00:02:02,719
uh with the draft i think we can just

51
00:02:02,719 --> 00:02:05,119
pull up the gitlab issue tracker

52
00:02:05,119 --> 00:02:06,399
and give people a chance to talk about

53
00:02:06,399 --> 00:02:08,318
it if we have the time but

54
00:02:08,318 --> 00:02:09,679
i want to focus the presentations that

55
00:02:09,679 --> 00:02:11,680
we have are going to consume most of the

56
00:02:11,680 --> 00:02:13,599
meeting

57
00:02:13,599 --> 00:02:18,080
um so uh any other agenda

58
00:02:18,080 --> 00:02:21,200
bashing or shall we move on to

59
00:02:21,200 --> 00:02:23,760
a discussion of the overall plan just so

60
00:02:23,760 --> 00:02:27,200
we're set on the same page

61
00:02:27,920 --> 00:02:29,520
i'm not hearing anything if something

62
00:02:29,520 --> 00:02:30,800
comes up and you want to agenda bash

63
00:02:30,800 --> 00:02:33,519
later you can always just bring it up

64
00:02:33,519 --> 00:02:37,680
in in jabber so uh just a brief reminder

65
00:02:37,680 --> 00:02:39,200
about how we're working with this

66
00:02:39,200 --> 00:02:41,760
um before the group got recharted there

67
00:02:41,760 --> 00:02:43,280
was a lingering

68
00:02:43,280 --> 00:02:46,400
uh rfc 4880 bis draft

69
00:02:46,400 --> 00:02:49,599
10 that was from a previous iteration of

70
00:02:49,599 --> 00:02:51,040
the working group that failed to produce

71
00:02:51,040 --> 00:02:52,480
an rfc

72
00:02:52,480 --> 00:02:55,599
um in trying to figure out how we could

73
00:02:55,599 --> 00:02:56,720
get consensus

74
00:02:56,720 --> 00:02:59,360
uh on a new rfc that still meets the in

75
00:02:59,360 --> 00:03:00,720
charter scope for the new revision of

76
00:03:00,720 --> 00:03:02,560
the working group what we've done is we

77
00:03:02,560 --> 00:03:05,680
sort of reset to rfc 4880

78
00:03:05,680 --> 00:03:08,239
we picked a new draft name it's now uh

79
00:03:08,239 --> 00:03:11,599
draft ietf openpgp crypto refresh

80
00:03:11,599 --> 00:03:13,440
and we are trying to restore the changes

81
00:03:13,440 --> 00:03:14,800
that we're in 48

82
00:03:14,800 --> 00:03:18,080
this dash 10 topic by topic so each

83
00:03:18,080 --> 00:03:18,879
revision

84
00:03:18,879 --> 00:03:21,280
um tries to address each uh each one so

85
00:03:21,280 --> 00:03:22,640
far we've had three revisions

86
00:03:22,640 --> 00:03:24,799
zero zero is basically 4880 with some

87
00:03:24,799 --> 00:03:26,959
minor formatting changes

88
00:03:26,959 --> 00:03:29,680
uh zero one uh fixed all the uh

89
00:03:29,680 --> 00:03:31,360
published errata

90
00:03:31,360 --> 00:03:34,959
and added the camellia cipher and

91
00:03:34,959 --> 00:03:37,040
updated some terminology along with one

92
00:03:37,040 --> 00:03:38,560
change about white space that

93
00:03:38,560 --> 00:03:42,480
thanks to the list has been reverted

94
00:03:42,480 --> 00:03:45,040
o2 included elliptic curves merging in

95
00:03:45,040 --> 00:03:47,680
stuff from existing rfcs

96
00:03:47,680 --> 00:03:49,680
we change the registries to be

97
00:03:49,680 --> 00:03:51,040
specification required

98
00:03:51,040 --> 00:03:54,400
instead of ietf consensus um

99
00:03:54,400 --> 00:03:58,959
or rfc required we added sha-3

100
00:03:58,959 --> 00:04:02,799
we brought in curfew 255.19 for ecdh

101
00:04:02,799 --> 00:04:04,959
and we deprecated some of the older

102
00:04:04,959 --> 00:04:06,159
stuff that people shouldn't be using

103
00:04:06,159 --> 00:04:07,599
anyway and we reserved a bunch of code

104
00:04:07,599 --> 00:04:09,840
points for what had been in this 10.

105
00:04:09,840 --> 00:04:12,560
um in the upcoming revision i guess paul

106
00:04:12,560 --> 00:04:14,239
can maybe speak to this later but i

107
00:04:14,239 --> 00:04:16,478
think we're talking about staging

108
00:04:16,478 --> 00:04:20,478
uh ed dsa um and maybe v5 keys and v5

109
00:04:20,478 --> 00:04:22,160
fingerprints you know in the next one

110
00:04:22,160 --> 00:04:22,960
upcoming

111
00:04:22,960 --> 00:04:24,479
um and thank you to everyone who's

112
00:04:24,479 --> 00:04:26,240
reviewed on the list for these changes

113
00:04:26,240 --> 00:04:27,759
uh it has been really useful to get a

114
00:04:27,759 --> 00:04:28,960
sense of what the working group thinks

115
00:04:28,960 --> 00:04:29,680
about them

116
00:04:29,680 --> 00:04:33,759
it's pretty clear that we will um uh

117
00:04:33,759 --> 00:04:38,160
fix up some some parts of it um

118
00:04:38,160 --> 00:04:41,919
yeah i see joao's comment there but uh

119
00:04:41,919 --> 00:04:43,600
about just how legacy the stuff is that

120
00:04:43,600 --> 00:04:45,919
we are trying to

121
00:04:45,919 --> 00:04:48,960
put in here but yeah it's 20 21 let's

122
00:04:48,960 --> 00:04:52,159
get open pgp up to date

123
00:04:52,240 --> 00:04:54,000
so that's sort of the direction that the

124
00:04:54,000 --> 00:04:55,199
working group is doing on next slide

125
00:04:55,199 --> 00:04:56,160
steven

126
00:04:56,160 --> 00:04:57,840
just about the mechanisms the mechanics

127
00:04:57,840 --> 00:04:59,600
for how we're doing it

128
00:04:59,600 --> 00:05:03,919
um so the draft is being developed

129
00:05:03,919 --> 00:05:07,440
uh in git we are using a central github

130
00:05:07,440 --> 00:05:09,039
repository as a place to keep track of

131
00:05:09,039 --> 00:05:11,039
the changes we're using gitlab.com that

132
00:05:11,039 --> 00:05:13,199
is not github.com

133
00:05:13,199 --> 00:05:15,759
um in that repository you will see three

134
00:05:15,759 --> 00:05:16,720
documents

135
00:05:16,720 --> 00:05:19,400
uh in markdown form which are the source

136
00:05:19,400 --> 00:05:20,560
4080.md

137
00:05:20,560 --> 00:05:23,520
is a markdown source version of what is

138
00:05:23,520 --> 00:05:23,759
that

139
00:05:23,759 --> 00:05:27,600
the actual original 4880 4080bis.md

140
00:05:27,600 --> 00:05:31,360
is uh a markdown version of 480 bis

141
00:05:31,360 --> 00:05:33,280
dash 10 that is the previous draft from

142
00:05:33,280 --> 00:05:34,560
the previous iteration of the working

143
00:05:34,560 --> 00:05:35,199
group

144
00:05:35,199 --> 00:05:36,880
and crypto refresh is the draft that we

145
00:05:36,880 --> 00:05:38,080
are working on so there are

146
00:05:38,080 --> 00:05:39,039
opportunities to do

147
00:05:39,039 --> 00:05:40,720
sort of diffs and comparisons between

148
00:05:40,720 --> 00:05:42,479
those three documents

149
00:05:42,479 --> 00:05:44,960
as paul mentions in the chat rfc diff is

150
00:05:44,960 --> 00:05:47,199
useful for comparing these things

151
00:05:47,199 --> 00:05:50,000
um i find actually also diff given the

152
00:05:50,000 --> 00:05:51,840
markdown sources is useful for comparing

153
00:05:51,840 --> 00:05:54,240
to the different documents

154
00:05:54,240 --> 00:05:56,560
and if anybody wants to talk later

155
00:05:56,560 --> 00:05:58,400
probably not in this group but

156
00:05:58,400 --> 00:06:00,479
in a separate conversation i'm happy to

157
00:06:00,479 --> 00:06:01,600
walk you through if you're interested in

158
00:06:01,600 --> 00:06:03,440
trying to help edit or propose changes i

159
00:06:03,440 --> 00:06:04,800
can help you with some of that

160
00:06:04,800 --> 00:06:06,400
we're using the issue tracker where

161
00:06:06,400 --> 00:06:07,919
possible but of course

162
00:06:07,919 --> 00:06:09,280
all conversation goes on the mailing

163
00:06:09,280 --> 00:06:11,199
list but

164
00:06:11,199 --> 00:06:12,560
when stuff comes up on the mail list we

165
00:06:12,560 --> 00:06:14,000
do like to keep track of it in the issue

166
00:06:14,000 --> 00:06:15,360
tracker so that it doesn't get lost

167
00:06:15,360 --> 00:06:16,639
there's been a fair amount of discussion

168
00:06:16,639 --> 00:06:18,800
which is much appreciated

169
00:06:18,800 --> 00:06:21,759
i think that's it for the recap here and

170
00:06:21,759 --> 00:06:22,240
um

171
00:06:22,240 --> 00:06:23,680
if possible i'd like to go ahead and get

172
00:06:23,680 --> 00:06:24,720
started with the next presentation

173
00:06:24,720 --> 00:06:27,759
unless folks have questions

174
00:06:29,280 --> 00:06:31,520
so just on that i think there's it's

175
00:06:31,520 --> 00:06:34,240
maybe worth emphasizing since uh we

176
00:06:34,240 --> 00:06:35,600
we're likely to do a lot of the kind of

177
00:06:35,600 --> 00:06:37,919
detailed issue tracking and processing

178
00:06:37,919 --> 00:06:39,600
via a set of interim meetings

179
00:06:39,600 --> 00:06:41,440
and there's probably a slightly larger

180
00:06:41,440 --> 00:06:42,960
group here today

181
00:06:42,960 --> 00:06:44,560
uh it's probably worth emphasizing that

182
00:06:44,560 --> 00:06:46,080
we're not really in

183
00:06:46,080 --> 00:06:47,360
a position where the working group is

184
00:06:47,360 --> 00:06:50,400
open for fresh new ideas just now

185
00:06:50,400 --> 00:06:52,639
um really what we're doing is we're

186
00:06:52,639 --> 00:06:53,840
playing kind of catch up

187
00:06:53,840 --> 00:06:57,039
on the set of tips versus 4880 that we

188
00:06:57,039 --> 00:06:58,000
already

189
00:06:58,000 --> 00:06:59,680
nearly know for sure that we want to

190
00:06:59,680 --> 00:07:01,039
include but we're making sure we get

191
00:07:01,039 --> 00:07:02,000
consensus on those

192
00:07:02,000 --> 00:07:04,960
before we go forward so it's a it's a

193
00:07:04,960 --> 00:07:06,160
it's a slightly kind of

194
00:07:06,160 --> 00:07:07,919
bookkeeping exercise to some extent but

195
00:07:07,919 --> 00:07:09,280
with technical parts

196
00:07:09,280 --> 00:07:11,680
um but the main thing is if you know if

197
00:07:11,680 --> 00:07:13,199
you have a super good idea for something

198
00:07:13,199 --> 00:07:14,880
new to do with pgp

199
00:07:14,880 --> 00:07:17,680
now is not really the good time uh by

200
00:07:17,680 --> 00:07:18,800
all means you'll drop them out of the

201
00:07:18,800 --> 00:07:20,960
list but expect that we might say

202
00:07:20,960 --> 00:07:23,199
let's get to that after we've already

203
00:07:23,199 --> 00:07:24,639
got a bit of success with the current

204
00:07:24,639 --> 00:07:25,599
work

205
00:07:25,599 --> 00:07:28,560
just want that to be clear

206
00:07:29,039 --> 00:07:32,240
yep and if there's no other if there's

207
00:07:32,240 --> 00:07:35,520
no questions on the plan

208
00:07:35,680 --> 00:07:39,199
then we will move

209
00:07:39,199 --> 00:07:44,800
to key extraction

210
00:07:44,800 --> 00:07:47,759
let me just pull it up

211
00:07:54,240 --> 00:07:58,400
okay lara okay

212
00:07:58,400 --> 00:08:01,919
great um so just say next slide whenever

213
00:08:01,919 --> 00:08:04,080
you need it

214
00:08:04,080 --> 00:08:07,919
uh yeah sorry there's uh okay

215
00:08:07,919 --> 00:08:11,440
um hey i'm lara brazilini

216
00:08:11,440 --> 00:08:13,840
am a security engineer at prato male and

217
00:08:13,840 --> 00:08:15,759
as part of my master thesis

218
00:08:15,759 --> 00:08:17,840
i work with kenny patterson and daniel

219
00:08:17,840 --> 00:08:19,520
hunkens

220
00:08:19,520 --> 00:08:22,160
and we are looked into the security of

221
00:08:22,160 --> 00:08:23,360
bgp

222
00:08:23,360 --> 00:08:25,520
and one of the questions we are focused

223
00:08:25,520 --> 00:08:26,400
on

224
00:08:26,400 --> 00:08:29,599
is how far can an attacker go if

225
00:08:29,599 --> 00:08:31,680
they have access to the encrypted

226
00:08:31,680 --> 00:08:32,958
private key

227
00:08:32,958 --> 00:08:36,958
of the victim so today i'll give a

228
00:08:36,958 --> 00:08:39,200
high level overview of the attacks and

229
00:08:39,200 --> 00:08:40,159
issues

230
00:08:40,159 --> 00:08:42,559
that we have found and then i will also

231
00:08:42,559 --> 00:08:43,440
discuss

232
00:08:43,440 --> 00:08:48,880
the countermeasures um next slide please

233
00:08:49,120 --> 00:08:51,519
so in terms of the tremor that we are

234
00:08:51,519 --> 00:08:52,240
considering

235
00:08:52,240 --> 00:08:55,120
we have an attacker who um has right

236
00:08:55,120 --> 00:08:57,920
access to the encrypted key

237
00:08:57,920 --> 00:09:00,320
so this means that the attacker can

238
00:09:00,320 --> 00:09:01,120
corrupt

239
00:09:01,120 --> 00:09:03,680
the encrypted privacy of the victim and

240
00:09:03,680 --> 00:09:05,040
then the victim will

241
00:09:05,040 --> 00:09:08,320
use a key as long as they can decrypt it

242
00:09:08,320 --> 00:09:11,040
with their passphrase in practice this

243
00:09:11,040 --> 00:09:12,320
means that the victim

244
00:09:12,320 --> 00:09:14,800
will not check the key fingerprint

245
00:09:14,800 --> 00:09:15,760
before

246
00:09:15,760 --> 00:09:20,240
using the key next slide please

247
00:09:20,240 --> 00:09:22,800
so the the requirement on key decryption

248
00:09:22,800 --> 00:09:24,240
is relevant because

249
00:09:24,240 --> 00:09:28,399
um in open bgp the private key

250
00:09:28,399 --> 00:09:31,279
is not fully encrypted so here you can

251
00:09:31,279 --> 00:09:32,160
see

252
00:09:32,160 --> 00:09:36,080
the schema of an rsa key for instance

253
00:09:36,080 --> 00:09:38,399
and when you encrypt the key only the

254
00:09:38,399 --> 00:09:41,040
fields in grey

255
00:09:41,040 --> 00:09:44,080
are both encrypted and authenticated so

256
00:09:44,080 --> 00:09:47,360
those include the secret key parameters

257
00:09:47,360 --> 00:09:49,839
and if an attacker tampers with the

258
00:09:49,839 --> 00:09:51,279
encrypted data then

259
00:09:51,279 --> 00:09:54,320
the key decryption will fail

260
00:09:54,320 --> 00:09:58,000
but there are also some parameters

261
00:09:58,000 --> 00:10:01,200
that are stored in clear text

262
00:10:01,200 --> 00:10:04,240
and in case of rsa those are the

263
00:10:04,240 --> 00:10:06,720
public modulo n and the public exponent

264
00:10:06,720 --> 00:10:07,760
e

265
00:10:07,760 --> 00:10:10,000
and if the attacker corrupts those

266
00:10:10,000 --> 00:10:11,760
values then key decryption

267
00:10:11,760 --> 00:10:15,600
will work fine and

268
00:10:15,600 --> 00:10:20,160
clean rosa in 2001 already noticed this

269
00:10:20,160 --> 00:10:23,040
partial integrity check issue and they

270
00:10:23,040 --> 00:10:24,880
exploited it

271
00:10:24,880 --> 00:10:27,360
they showed how an attacker could

272
00:10:27,360 --> 00:10:28,320
corrupt

273
00:10:28,320 --> 00:10:31,680
the public parameters of a dsa key

274
00:10:31,680 --> 00:10:34,640
then they wait for the victim to sign

275
00:10:34,640 --> 00:10:36,800
using the corrupted key

276
00:10:36,800 --> 00:10:39,680
and from the faulty signature they could

277
00:10:39,680 --> 00:10:41,200
extract the dsa

278
00:10:41,200 --> 00:10:46,000
secret exponents looks like this

279
00:10:46,000 --> 00:10:49,600
um now at the time openpgp was not fixed

280
00:10:49,600 --> 00:10:52,720
to address the specific attack vector

281
00:10:52,720 --> 00:10:55,600
so what we have found is we have looked

282
00:10:55,600 --> 00:10:58,320
at the same attack idea again

283
00:10:58,320 --> 00:11:01,839
and um we have found that

284
00:11:01,839 --> 00:11:05,200
it's not just dsa keys but any

285
00:11:05,200 --> 00:11:08,079
key type is potentially vulnerable to

286
00:11:08,079 --> 00:11:10,640
this kind of key corruption attacks

287
00:11:10,640 --> 00:11:12,959
specifically when it comes to faulty

288
00:11:12,959 --> 00:11:15,600
signature attacks

289
00:11:15,600 --> 00:11:19,600
dsa eddsa and rsa keys can be directly

290
00:11:19,600 --> 00:11:22,880
compromised and the attacker

291
00:11:22,880 --> 00:11:26,240
needs to corrupt the key only

292
00:11:26,240 --> 00:11:29,440
once and then it's as little as one

293
00:11:29,440 --> 00:11:31,040
faulty signature

294
00:11:31,040 --> 00:11:35,279
to extract the secrets but also

295
00:11:35,279 --> 00:11:37,680
um any encrypted curve key as well as

296
00:11:37,680 --> 00:11:38,480
argument

297
00:11:38,480 --> 00:11:41,760
can be indirectly targeted by

298
00:11:41,760 --> 00:11:46,959
transforming the key into a dsa one

299
00:11:46,959 --> 00:11:50,000
and this kind of key transformation is

300
00:11:50,000 --> 00:11:52,160
possible without breaking key decryption

301
00:11:52,160 --> 00:11:54,719
because

302
00:11:55,360 --> 00:11:58,560
all key types except for rsa have a

303
00:11:58,560 --> 00:12:01,360
compatible format of the encrypted data

304
00:12:01,360 --> 00:12:04,160
in a private key

305
00:12:04,560 --> 00:12:07,200
now if you're not familiar with the key

306
00:12:07,200 --> 00:12:08,000
types

307
00:12:08,000 --> 00:12:10,480
i just point out that acdh keys and

308
00:12:10,480 --> 00:12:11,680
elgamal keys

309
00:12:11,680 --> 00:12:15,040
are encryption only however thanks to

310
00:12:15,040 --> 00:12:16,079
this

311
00:12:16,079 --> 00:12:18,480
key transformation they can still be

312
00:12:18,480 --> 00:12:20,560
compromised using multi-signature

313
00:12:20,560 --> 00:12:21,600
attacks

314
00:12:21,600 --> 00:12:24,000
by also converting those keys into tsa

315
00:12:24,000 --> 00:12:25,519
ones

316
00:12:25,519 --> 00:12:28,800
um so aside from these uh

317
00:12:28,800 --> 00:12:31,920
attacks that target signing we've also

318
00:12:31,920 --> 00:12:33,440
found some attacks that exploit

319
00:12:33,440 --> 00:12:35,040
decryption

320
00:12:35,040 --> 00:12:38,160
but those are a little bit more involved

321
00:12:38,160 --> 00:12:41,519
and we will be sharing

322
00:12:41,519 --> 00:12:43,760
more information about the decryption

323
00:12:43,760 --> 00:12:45,600
attacks as well as

324
00:12:45,600 --> 00:12:47,440
all the mathematical details of the

325
00:12:47,440 --> 00:12:50,240
signing attacks

326
00:12:50,240 --> 00:12:52,639
soon enough we are finishing up a paper

327
00:12:52,639 --> 00:12:53,600
and we will be

328
00:12:53,600 --> 00:12:55,680
um establishing it and sharing it with

329
00:12:55,680 --> 00:12:57,920
the community so

330
00:12:57,920 --> 00:13:00,800
next slide please

331
00:13:00,959 --> 00:13:04,560
so um just to review uh what are the

332
00:13:04,560 --> 00:13:06,320
existing protocol level

333
00:13:06,320 --> 00:13:09,600
protections in place that are relevant

334
00:13:09,600 --> 00:13:11,760
for the attack

335
00:13:11,760 --> 00:13:15,680
so as mentioned the issue is that only

336
00:13:15,680 --> 00:13:19,360
some of the parameters are authenticated

337
00:13:19,360 --> 00:13:22,959
this is either with aad or cfd

338
00:13:22,959 --> 00:13:27,600
but in both cases the public values

339
00:13:27,600 --> 00:13:30,639
can be corrupted by the attacker and

340
00:13:30,639 --> 00:13:34,959
key decryption will succeed um

341
00:13:34,959 --> 00:13:37,120
and when the attacker has control of the

342
00:13:37,120 --> 00:13:38,800
public values

343
00:13:38,800 --> 00:13:41,680
it means that the attacker is also free

344
00:13:41,680 --> 00:13:42,480
to really

345
00:13:42,480 --> 00:13:45,440
replace the sub key binding signatures

346
00:13:45,440 --> 00:13:47,120
for instance to make sure that they

347
00:13:47,120 --> 00:13:48,880
still verify with the corrupted public

348
00:13:48,880 --> 00:13:51,279
key parameters

349
00:13:51,279 --> 00:13:54,160
now what the attacker cannot do is forge

350
00:13:54,160 --> 00:13:56,720
third party certifications

351
00:13:56,720 --> 00:14:00,079
so those become invalid and also if the

352
00:14:00,079 --> 00:14:01,199
public fields

353
00:14:01,199 --> 00:14:03,839
are corrupted then the key fingerprint

354
00:14:03,839 --> 00:14:06,079
necessarily changes

355
00:14:06,079 --> 00:14:08,639
but to reiterate uh that's why in our

356
00:14:08,639 --> 00:14:10,320
threat model we really consider

357
00:14:10,320 --> 00:14:13,680
a user that is not careful enough

358
00:14:13,680 --> 00:14:17,040
and basically ends up using the key

359
00:14:17,040 --> 00:14:18,320
without inspecting

360
00:14:18,320 --> 00:14:21,360
the key fingerprint

361
00:14:21,360 --> 00:14:25,360
um next slide please

362
00:14:27,440 --> 00:14:31,279
and so currently

363
00:14:31,279 --> 00:14:34,800
if an oven pgp library wants to prevent

364
00:14:34,800 --> 00:14:37,920
uh key corruption attacks from happening

365
00:14:37,920 --> 00:14:40,399
what uh it needs to do is to perform

366
00:14:40,399 --> 00:14:42,000
some kind of key validation

367
00:14:42,000 --> 00:14:44,240
after decrypting a private key and

368
00:14:44,240 --> 00:14:46,000
before using it for

369
00:14:46,000 --> 00:14:49,120
security operations so specifically the

370
00:14:49,120 --> 00:14:52,160
idea of key validation would be that

371
00:14:52,160 --> 00:14:54,240
since you have the secret values the the

372
00:14:54,240 --> 00:14:55,519
secret parameters that aren't

373
00:14:55,519 --> 00:14:56,160
necessarily

374
00:14:56,160 --> 00:14:58,560
authenticated but you have the public

375
00:14:58,560 --> 00:14:59,199
values

376
00:14:59,199 --> 00:15:01,839
that are potentially corrupted you want

377
00:15:01,839 --> 00:15:02,959
to

378
00:15:02,959 --> 00:15:05,440
make sure that the private and public

379
00:15:05,440 --> 00:15:08,320
parameters are consistent

380
00:15:08,320 --> 00:15:11,040
and key validation is a bit of a

381
00:15:11,040 --> 00:15:12,000
delicate process

382
00:15:12,000 --> 00:15:15,519
because if you do it wrongly it's either

383
00:15:15,519 --> 00:15:17,920
ineffective or it can open up the

384
00:15:17,920 --> 00:15:18,639
possibility

385
00:15:18,639 --> 00:15:21,839
of additional attacks um

386
00:15:21,839 --> 00:15:24,639
for instance the validation method that

387
00:15:24,639 --> 00:15:26,800
does not work is

388
00:15:26,800 --> 00:15:30,399
trying to use the key for instance to

389
00:15:30,399 --> 00:15:32,000
sign and verify a message

390
00:15:32,000 --> 00:15:36,000
or encrypt and decrypt a message so

391
00:15:36,000 --> 00:15:39,199
in many depending on the key type

392
00:15:39,199 --> 00:15:42,240
even if the operation is successful you

393
00:15:42,240 --> 00:15:44,000
have no guarantee that the

394
00:15:44,000 --> 00:15:46,399
private and public parameters correspond

395
00:15:46,399 --> 00:15:48,720
or strong enough

396
00:15:48,720 --> 00:15:51,759
so instead to carry out private key

397
00:15:51,759 --> 00:15:52,639
validation

398
00:15:52,639 --> 00:15:54,480
one should really check the mathematical

399
00:15:54,480 --> 00:15:55,759
relationship between the different

400
00:15:55,759 --> 00:15:57,360
parameters

401
00:15:57,360 --> 00:15:58,959
and this means carrying out some

402
00:15:58,959 --> 00:16:02,160
algorithm specific checks

403
00:16:02,160 --> 00:16:05,440
and in case of where i say these are

404
00:16:05,440 --> 00:16:09,120
sorry forward enough but

405
00:16:09,120 --> 00:16:11,920
this is not the case with all key types

406
00:16:11,920 --> 00:16:12,399
all right

407
00:16:12,399 --> 00:16:15,199
next slide please

408
00:16:16,079 --> 00:16:18,800
in fact for instance in aligamal there

409
00:16:18,800 --> 00:16:19,199
is

410
00:16:19,199 --> 00:16:22,240
no way to fully validate the key by

411
00:16:22,240 --> 00:16:22,720
checking

412
00:16:22,720 --> 00:16:26,000
the correspondence between parameters

413
00:16:26,000 --> 00:16:28,639
so it's possible but it's not feasible

414
00:16:28,639 --> 00:16:29,279
and

415
00:16:29,279 --> 00:16:33,920
for dsa and addsa

416
00:16:33,920 --> 00:16:36,240
the operations are still expensive and

417
00:16:36,240 --> 00:16:37,680
in the case of the essay is kind of

418
00:16:37,680 --> 00:16:40,000
tricky

419
00:16:40,000 --> 00:16:41,839
and in general what we've seen in

420
00:16:41,839 --> 00:16:43,199
practice

421
00:16:43,199 --> 00:16:45,680
we have reviewed a number of popular

422
00:16:45,680 --> 00:16:47,839
open pgp libraries

423
00:16:47,839 --> 00:16:51,360
and none of them is safe

424
00:16:51,360 --> 00:16:53,279
against all of the attacks that we've

425
00:16:53,279 --> 00:16:54,880
found so even if

426
00:16:54,880 --> 00:16:57,680
uh variation is implemented it's always

427
00:16:57,680 --> 00:16:58,079
it's

428
00:16:58,079 --> 00:17:02,079
often missing some heat checks

429
00:17:02,079 --> 00:17:04,880
and uh in them in terms of end-to-end

430
00:17:04,880 --> 00:17:05,520
attacks

431
00:17:05,520 --> 00:17:08,240
we have found um two real-world

432
00:17:08,240 --> 00:17:09,280
applications that

433
00:17:09,280 --> 00:17:12,079
um are vulnerable to these key

434
00:17:12,079 --> 00:17:14,559
corruption issues

435
00:17:14,559 --> 00:17:18,319
so uh next slide please

436
00:17:18,319 --> 00:17:21,439
so a light of the well we think is the

437
00:17:21,439 --> 00:17:23,199
seriousness of the issue and the fact

438
00:17:23,199 --> 00:17:24,160
that

439
00:17:24,160 --> 00:17:27,280
it's difficult and inefficient for uh

440
00:17:27,280 --> 00:17:30,000
implementations to address the problem

441
00:17:30,000 --> 00:17:33,520
uh well we would propose is that the

442
00:17:33,520 --> 00:17:36,720
standard be changed

443
00:17:36,720 --> 00:17:40,160
so that key decryption uh fails if the

444
00:17:40,160 --> 00:17:41,039
public

445
00:17:41,039 --> 00:17:43,760
parameters are corrupted and this can be

446
00:17:43,760 --> 00:17:45,440
achieved without

447
00:17:45,440 --> 00:17:48,640
introducing any new primitive in the

448
00:17:48,640 --> 00:17:52,320
spec it can just reuse what

449
00:17:52,320 --> 00:17:54,320
libraries have already implemented

450
00:17:54,320 --> 00:17:57,600
specifically if aad encrypted keys

451
00:17:57,600 --> 00:17:59,919
are standardized then the idea for them

452
00:17:59,919 --> 00:18:00,880
would be

453
00:18:00,880 --> 00:18:04,080
to put the public parameters and the

454
00:18:04,080 --> 00:18:07,039
key type inside the associated data

455
00:18:07,039 --> 00:18:08,799
which is data that is not encrypted but

456
00:18:08,799 --> 00:18:09,280
is still

457
00:18:09,280 --> 00:18:12,720
authenticated instead if we remain with

458
00:18:12,720 --> 00:18:16,000
cfb encrypted keys then one

459
00:18:16,000 --> 00:18:19,280
possibility is to put the

460
00:18:19,280 --> 00:18:22,080
public key and now together with

461
00:18:22,080 --> 00:18:23,039
the private one

462
00:18:23,039 --> 00:18:25,760
currently in cfb keys only the private

463
00:18:25,760 --> 00:18:26,840
parameters

464
00:18:26,840 --> 00:18:30,400
are hushed it is the second

465
00:18:30,400 --> 00:18:33,039
cfd solution is the same that was

466
00:18:33,039 --> 00:18:34,080
proposed

467
00:18:34,080 --> 00:18:37,520
in 2001 when back the first dsa attack

468
00:18:37,520 --> 00:18:40,960
was published and

469
00:18:40,960 --> 00:18:42,960
so the advantage of this kind of

470
00:18:42,960 --> 00:18:44,559
protocol level solution would be

471
00:18:44,559 --> 00:18:47,120
um security wise that you don't delegate

472
00:18:47,120 --> 00:18:48,559
there

473
00:18:48,559 --> 00:18:51,840
you don't delegate anything to the

474
00:18:51,840 --> 00:18:52,799
implementations

475
00:18:52,799 --> 00:18:54,080
and you have a solution that works

476
00:18:54,080 --> 00:18:56,160
across all algorithms

477
00:18:56,160 --> 00:19:01,520
and that is really much much faster

478
00:19:01,840 --> 00:19:05,120
so that's that's all for me

479
00:19:08,000 --> 00:19:10,080
great thank you i guess we have time for

480
00:19:10,080 --> 00:19:12,080
a couple of questions uh i i'm sure one

481
00:19:12,080 --> 00:19:12,799
of them will be

482
00:19:12,799 --> 00:19:14,640
when when can we expect to see the the

483
00:19:14,640 --> 00:19:15,919
full detail or and

484
00:19:15,919 --> 00:19:19,520
where or will you just let us know

485
00:19:19,520 --> 00:19:22,480
uh we're really reviewing it later so i

486
00:19:22,480 --> 00:19:24,160
don't want to give any time

487
00:19:24,160 --> 00:19:25,760
[Music]

488
00:19:25,760 --> 00:19:29,600
predictions but it should be very soon

489
00:19:31,600 --> 00:19:34,400
okay if there are other questions then

490
00:19:34,400 --> 00:19:36,840
if people would just like to get

491
00:19:36,840 --> 00:19:38,799
themselves raise their hand

492
00:19:38,799 --> 00:19:42,480
using the meat echo tool and

493
00:19:44,240 --> 00:19:48,000
yes there's some chat in the jabber

494
00:19:48,000 --> 00:19:53,840
that kenny's been handling i guess

495
00:19:53,919 --> 00:19:56,320
kristy

496
00:19:59,760 --> 00:20:01,840
you for the presentation um you said you

497
00:20:01,840 --> 00:20:03,200
found two real world

498
00:20:03,200 --> 00:20:05,120
apps where this was vulnerable and did

499
00:20:05,120 --> 00:20:06,720
you report the vulnerability

500
00:20:06,720 --> 00:20:08,320
through their vulnerability disclosure

501
00:20:08,320 --> 00:20:10,159
program did you get in touch with the

502
00:20:10,159 --> 00:20:12,000
apps themselves

503
00:20:12,000 --> 00:20:15,360
thanks uh

504
00:20:15,360 --> 00:20:18,799
yes so both the

505
00:20:18,799 --> 00:20:20,320
libraries that we have reviewed and the

506
00:20:20,320 --> 00:20:22,640
applications have been conducted

507
00:20:22,640 --> 00:20:24,240
and the applications specifically have

508
00:20:24,240 --> 00:20:26,320
already been fixed already a few months

509
00:20:26,320 --> 00:20:35,840
ago actually

510
00:20:39,679 --> 00:20:41,919
wait so we don't think oh kenny are you

511
00:20:41,919 --> 00:20:43,919
in there

512
00:20:43,919 --> 00:20:45,840
oh just to say uh thanks we did

513
00:20:45,840 --> 00:20:47,120
responsible disclosure

514
00:20:47,120 --> 00:20:48,559
i guess is the short way of saying what

515
00:20:48,559 --> 00:20:51,440
that register and uh

516
00:20:51,440 --> 00:20:53,280
so all the affected libraries have been

517
00:20:53,280 --> 00:20:55,360
notified and have had a chance to

518
00:20:55,360 --> 00:20:58,559
uh patch and as i already said both

519
00:20:58,559 --> 00:21:03,840
of them

520
00:21:04,080 --> 00:21:06,559
so i just wanted to say uh thanks to the

521
00:21:06,559 --> 00:21:07,280
researchers

522
00:21:07,280 --> 00:21:09,600
to lara and kenny and and your and your

523
00:21:09,600 --> 00:21:10,720
colleagues who worked on this for

524
00:21:10,720 --> 00:21:11,760
bringing this to the attention of the

525
00:21:11,760 --> 00:21:12,799
working group um

526
00:21:12,799 --> 00:21:14,000
it sounds like you did a pretty good

527
00:21:14,000 --> 00:21:16,799
review of existing implementations

528
00:21:16,799 --> 00:21:17,760
but obviously there may be

529
00:21:17,760 --> 00:21:18,880
implementations that you don't know

530
00:21:18,880 --> 00:21:19,919
about so

531
00:21:19,919 --> 00:21:21,679
being able to talk about it here should

532
00:21:21,679 --> 00:21:23,280
hopefully give people a chance to have a

533
00:21:23,280 --> 00:21:24,000
heads up

534
00:21:24,000 --> 00:21:25,600
if they have an implementation that they

535
00:21:25,600 --> 00:21:27,440
haven't published we're much appreciated

536
00:21:27,440 --> 00:21:31,600
for bringing that to the group sure

537
00:21:31,600 --> 00:21:32,720
yeah indeed i think it's really good

538
00:21:32,720 --> 00:21:34,799
work thank you

539
00:21:34,799 --> 00:21:37,600
okay and and you were exactly on time so

540
00:21:37,600 --> 00:21:38,080
that's

541
00:21:38,080 --> 00:21:40,960
even better thank you for that too so i

542
00:21:40,960 --> 00:21:42,960
think if we move on to the next one it's

543
00:21:42,960 --> 00:21:45,840
justice

544
00:21:47,360 --> 00:21:50,960
hi can you hear me yeah

545
00:21:50,960 --> 00:21:54,159
yes we can hear you so just uh whenever

546
00:21:54,159 --> 00:21:55,280
you want next slide just

547
00:21:55,280 --> 00:21:56,320
just let me know and i'll click the

548
00:21:56,320 --> 00:21:59,039
welcome for you great

549
00:21:59,039 --> 00:22:01,919
so i'm just i'm here to very briefly

550
00:22:01,919 --> 00:22:02,880
talk about my

551
00:22:02,880 --> 00:22:05,280
efforts to bring interop testing into

552
00:22:05,280 --> 00:22:08,559
the openpgp community

553
00:22:08,559 --> 00:22:10,240
if you're curious you can find the

554
00:22:10,240 --> 00:22:13,600
results on tests.sequoiapgp.org

555
00:22:13,600 --> 00:22:16,080
and the presentation is both in the itf

556
00:22:16,080 --> 00:22:17,840
tool and

557
00:22:17,840 --> 00:22:20,159
will also be on our website next slide

558
00:22:20,159 --> 00:22:22,480
piece

559
00:22:23,280 --> 00:22:24,880
just if you can be a little bit louder

560
00:22:24,880 --> 00:22:26,480
that would be great okay

561
00:22:26,480 --> 00:22:31,120
i will try to make that happen

562
00:22:31,360 --> 00:22:35,360
better can you hear me better

563
00:22:35,360 --> 00:22:38,720
okay so i've been a open pgp developer

564
00:22:38,720 --> 00:22:40,720
for roughly five years

565
00:22:40,720 --> 00:22:43,679
i started working for verna on gnupg in

566
00:22:43,679 --> 00:22:45,360
2015

567
00:22:45,360 --> 00:22:47,760
and nowadays i'm employed by the pep

568
00:22:47,760 --> 00:22:49,120
foundation

569
00:22:49,120 --> 00:22:52,240
and our mandate is not only to

570
00:22:52,240 --> 00:22:54,960
write a pgp implementation although we

571
00:22:54,960 --> 00:22:55,440
did that

572
00:22:55,440 --> 00:22:58,480
our implementation is called sequoia

573
00:22:58,480 --> 00:23:00,720
our mandate is also to improve the

574
00:23:00,720 --> 00:23:03,200
ecosystem as a whole

575
00:23:03,200 --> 00:23:06,400
and writing and universally useful test

576
00:23:06,400 --> 00:23:08,000
suite has been on my mind for quite some

577
00:23:08,000 --> 00:23:11,200
time in fact i proposed to do that

578
00:23:11,200 --> 00:23:13,919
at the openptp conference in cologne in

579
00:23:13,919 --> 00:23:16,559
2016.

580
00:23:16,559 --> 00:23:19,360
next slide please

581
00:23:20,960 --> 00:23:23,760
so why why should we do that so we

582
00:23:23,760 --> 00:23:25,280
needed our

583
00:23:25,280 --> 00:23:28,960
uh a way to verify our implementation

584
00:23:28,960 --> 00:23:31,440
right and if we have to do the work

585
00:23:31,440 --> 00:23:33,039
anyway

586
00:23:33,039 --> 00:23:36,000
we can make it useful for others too and

587
00:23:36,000 --> 00:23:37,360
this is in line of

588
00:23:37,360 --> 00:23:39,280
with our mandate of improving the

589
00:23:39,280 --> 00:23:41,039
ecosystem

590
00:23:41,039 --> 00:23:42,799
and it's good for other implementations

591
00:23:42,799 --> 00:23:44,960
too because writing tests is a lot of

592
00:23:44,960 --> 00:23:46,159
work and

593
00:23:46,159 --> 00:23:50,799
they get free tests and there are

594
00:23:50,799 --> 00:23:53,760
secondary effects too so we hope that

595
00:23:53,760 --> 00:23:54,400
users

596
00:23:54,400 --> 00:23:56,880
will enjoy better software and increased

597
00:23:56,880 --> 00:23:58,880
interoperability

598
00:23:58,880 --> 00:24:01,760
and recently i've learned that this will

599
00:24:01,760 --> 00:24:03,120
also help the

600
00:24:03,120 --> 00:24:05,760
standardization effort so the working

601
00:24:05,760 --> 00:24:08,240
group can see what's implemented

602
00:24:08,240 --> 00:24:10,960
and maybe also see where the

603
00:24:10,960 --> 00:24:12,080
implementation is

604
00:24:12,080 --> 00:24:16,159
is lacking or where implementers

605
00:24:16,159 --> 00:24:20,159
would benefit from more guidance

606
00:24:20,559 --> 00:24:22,370
next slide please

607
00:24:22,370 --> 00:24:25,479
[Music]

608
00:24:27,120 --> 00:24:30,080
so the tests are black box tests and

609
00:24:30,080 --> 00:24:30,799
there are

610
00:24:30,799 --> 00:24:33,440
two kinds of tests the first one i call

611
00:24:33,440 --> 00:24:35,039
consumer tests

612
00:24:35,039 --> 00:24:37,120
where artifacts are produced by the test

613
00:24:37,120 --> 00:24:39,520
suite and then

614
00:24:39,520 --> 00:24:42,640
consumed by all the implementations

615
00:24:42,640 --> 00:24:44,840
and the other kind are producer consumer

616
00:24:44,840 --> 00:24:46,159
tests

617
00:24:46,159 --> 00:24:49,200
and here the artifacts are also produced

618
00:24:49,200 --> 00:24:50,080
by the

619
00:24:50,080 --> 00:24:52,880
implementations being tested so you get

620
00:24:52,880 --> 00:24:53,520
this nice

621
00:24:53,520 --> 00:24:55,560
interop matrix

622
00:24:55,560 --> 00:24:57,360
[Music]

623
00:24:57,360 --> 00:25:00,480
and the test suite uses an interface

624
00:25:00,480 --> 00:25:01,279
called

625
00:25:01,279 --> 00:25:05,360
sop or the stateless openpgp interface

626
00:25:05,360 --> 00:25:08,559
that has been extracted by by dkg

627
00:25:08,559 --> 00:25:11,919
and you can see some examples so

628
00:25:11,919 --> 00:25:15,120
here we generate a key then we use it to

629
00:25:15,120 --> 00:25:16,240
encrypt some data

630
00:25:16,240 --> 00:25:18,880
data is read from standard in and the

631
00:25:18,880 --> 00:25:21,760
ciphertext is produced on standard out

632
00:25:21,760 --> 00:25:24,320
and to decrypt you do the same you feed

633
00:25:24,320 --> 00:25:26,400
the

634
00:25:26,400 --> 00:25:28,559
ciphertext and send it in and get the

635
00:25:28,559 --> 00:25:31,120
plain text on standard out

636
00:25:31,120 --> 00:25:34,480
and currently the test suite just uses

637
00:25:34,480 --> 00:25:37,520
five very simple operations and

638
00:25:37,520 --> 00:25:42,000
gets out a lot of information that way

639
00:25:42,000 --> 00:25:44,380
so on the right you see an example test

640
00:25:44,380 --> 00:25:45,520
[Music]

641
00:25:45,520 --> 00:25:48,960
every test has a heading and

642
00:25:48,960 --> 00:25:51,360
it has a stable link that you can refer

643
00:25:51,360 --> 00:25:53,440
to in bug reports

644
00:25:53,440 --> 00:25:55,760
when you get a description and maybe

645
00:25:55,760 --> 00:25:57,520
additional artifacts like

646
00:25:57,520 --> 00:26:00,960
certificates and there is a little

647
00:26:00,960 --> 00:26:01,679
button

648
00:26:01,679 --> 00:26:04,400
next to artifacts and if you have the

649
00:26:04,400 --> 00:26:05,279
right font

650
00:26:05,279 --> 00:26:07,440
you also get this little magnifying

651
00:26:07,440 --> 00:26:09,279
glass in the button

652
00:26:09,279 --> 00:26:12,559
and if you click on that you get taken

653
00:26:12,559 --> 00:26:12,960
to

654
00:26:12,960 --> 00:26:17,520
a packet dumper to inspect the artifact

655
00:26:17,760 --> 00:26:20,880
if you look at the results you see check

656
00:26:20,880 --> 00:26:24,159
marks and cross marks check mark means

657
00:26:24,159 --> 00:26:26,559
the operation succeeded cross mark means

658
00:26:26,559 --> 00:26:27,440
it does not

659
00:26:27,440 --> 00:26:31,120
did not and some tests have an

660
00:26:31,120 --> 00:26:33,760
expectation so we expect an operation to

661
00:26:33,760 --> 00:26:35,120
succeed or we

662
00:26:35,120 --> 00:26:38,480
expect an operation to fail and if an

663
00:26:38,480 --> 00:26:41,919
implementation matches the expectation

664
00:26:41,919 --> 00:26:44,960
it's marked as green and has an earmark

665
00:26:44,960 --> 00:26:45,760
in the

666
00:26:45,760 --> 00:26:48,799
left top corner and if it fails to meet

667
00:26:48,799 --> 00:26:50,159
the expectations

668
00:26:50,159 --> 00:26:53,200
it's red and has a year mark in the

669
00:26:53,200 --> 00:26:53,919
right top

670
00:26:53,919 --> 00:26:57,840
corner most tests

671
00:26:57,840 --> 00:27:00,799
start with the base case so to make sure

672
00:27:00,799 --> 00:27:03,279
we are all on the same page

673
00:27:03,279 --> 00:27:04,840
and there are then there are some

674
00:27:04,840 --> 00:27:06,559
variants

675
00:27:06,559 --> 00:27:10,000
and some of the

676
00:27:10,000 --> 00:27:13,039
variants where the the interpretation or

677
00:27:13,039 --> 00:27:13,360
the

678
00:27:13,360 --> 00:27:16,559
expectation is not clear they they don't

679
00:27:16,559 --> 00:27:18,080
have any expectations so

680
00:27:18,080 --> 00:27:21,279
you get a kind of white

681
00:27:21,279 --> 00:27:26,080
row and sometimes

682
00:27:26,080 --> 00:27:28,000
mostly in producer consumer tests the

683
00:27:28,000 --> 00:27:30,240
producer fails to

684
00:27:30,240 --> 00:27:33,120
produce an artifact or the produced

685
00:27:33,120 --> 00:27:34,000
artifact does

686
00:27:34,000 --> 00:27:37,200
not meet the expectations so you can get

687
00:27:37,200 --> 00:27:38,159
a cross mark there

688
00:27:38,159 --> 00:27:41,520
too finally if you

689
00:27:41,520 --> 00:27:44,399
hover with the mouse on cross marks or

690
00:27:44,399 --> 00:27:45,919
check marks you can see

691
00:27:45,919 --> 00:27:49,360
additional output like the result of

692
00:27:49,360 --> 00:27:52,000
successful signature verifications or

693
00:27:52,000 --> 00:27:53,200
error messages

694
00:27:53,200 --> 00:27:55,279
[Music]

695
00:27:55,279 --> 00:27:56,910
next slide piece

696
00:27:56,910 --> 00:27:59,520
[Music]

697
00:27:59,520 --> 00:28:02,480
so this is an example of an signature

698
00:28:02,480 --> 00:28:03,360
very

699
00:28:03,360 --> 00:28:07,039
verification test so nipper started

700
00:28:07,039 --> 00:28:08,000
looking into

701
00:28:08,000 --> 00:28:12,240
encodings of ecc artifacts

702
00:28:12,240 --> 00:28:15,600
and to aid that i decided to write the

703
00:28:15,600 --> 00:28:17,840
test

704
00:28:17,840 --> 00:28:20,240
and the test verifies an ed dsa

705
00:28:20,240 --> 00:28:21,520
signature

706
00:28:21,520 --> 00:28:25,279
and it starts with the base case that's

707
00:28:25,279 --> 00:28:28,840
green for all implementations except for

708
00:28:28,840 --> 00:28:30,480
gpg14

709
00:28:30,480 --> 00:28:34,240
which does not do ecc and then you see a

710
00:28:34,240 --> 00:28:35,200
variant where

711
00:28:35,200 --> 00:28:37,760
the s value of the signature is zero

712
00:28:37,760 --> 00:28:39,679
padded

713
00:28:39,679 --> 00:28:42,159
and many implementations just support

714
00:28:42,159 --> 00:28:43,600
that even though it's slightly out of

715
00:28:43,600 --> 00:28:45,200
spec

716
00:28:45,200 --> 00:28:48,399
and then just for fun i decided to

717
00:28:48,399 --> 00:28:51,679
tag the r value as well and none of the

718
00:28:51,679 --> 00:28:54,880
implementations like that

719
00:28:54,960 --> 00:28:59,840
next slide please

720
00:29:02,399 --> 00:29:04,640
this is an example of a producer

721
00:29:04,640 --> 00:29:06,000
consumer test

722
00:29:06,000 --> 00:29:10,960
so or maybe we could should call it

723
00:29:10,960 --> 00:29:14,480
a scenario test and this

724
00:29:14,480 --> 00:29:17,200
models key generation encryption and

725
00:29:17,200 --> 00:29:18,480
decryption

726
00:29:18,480 --> 00:29:20,240
so you generate a key with

727
00:29:20,240 --> 00:29:21,840
implementation a

728
00:29:21,840 --> 00:29:25,279
encrypt for that key with implementation

729
00:29:25,279 --> 00:29:25,600
b

730
00:29:25,600 --> 00:29:27,360
and then decrypt it with the

731
00:29:27,360 --> 00:29:30,159
implementation a

732
00:29:30,159 --> 00:29:33,520
and you can see gpgme for example

733
00:29:33,520 --> 00:29:36,720
using gpg14 fails to

734
00:29:36,720 --> 00:29:39,039
pass the test for every implementation

735
00:29:39,039 --> 00:29:40,159
that creates an

736
00:29:40,159 --> 00:29:43,919
ecc key by default and

737
00:29:43,919 --> 00:29:47,520
dk gpg generates an

738
00:29:47,520 --> 00:29:50,159
uh dsa and ergomal encryption key and

739
00:29:50,159 --> 00:29:52,080
some implementations do not

740
00:29:52,080 --> 00:29:56,080
support erml so that fails

741
00:29:59,039 --> 00:30:02,080
finally key generation with gpg14 is not

742
00:30:02,080 --> 00:30:04,559
supported

743
00:30:04,640 --> 00:30:09,360
next slide please

744
00:30:09,360 --> 00:30:13,360
so currently we have around 80 tests

745
00:30:13,360 --> 00:30:16,080
and that amounts to around 400 test

746
00:30:16,080 --> 00:30:17,600
actors

747
00:30:17,600 --> 00:30:20,559
and i found at least 80 bucks and

748
00:30:20,559 --> 00:30:21,600
reported

749
00:30:21,600 --> 00:30:24,240
around 80 bucks across 9 different

750
00:30:24,240 --> 00:30:25,679
implementations

751
00:30:25,679 --> 00:30:30,480
so i consider that a success

752
00:30:30,480 --> 00:30:32,480
and we improved implementations across

753
00:30:32,480 --> 00:30:33,520
the board

754
00:30:33,520 --> 00:30:37,679
not only sequoia in accordance with our

755
00:30:37,679 --> 00:30:39,279
mandate

756
00:30:39,279 --> 00:30:42,080
and we also improved the the understate

757
00:30:42,080 --> 00:30:43,679
understanding of the ecosystem

758
00:30:43,679 --> 00:30:46,880
so during our implementation effort we

759
00:30:46,880 --> 00:30:48,720
ask those questions

760
00:30:48,720 --> 00:30:50,320
how implementation handling this all

761
00:30:50,320 --> 00:30:53,039
that and we just wrote the test to

762
00:30:53,039 --> 00:30:57,360
find out and

763
00:30:58,159 --> 00:30:59,760
there are some tests where the

764
00:30:59,760 --> 00:31:01,279
implementations

765
00:31:01,279 --> 00:31:05,600
uh vary wildly and this may point out

766
00:31:05,600 --> 00:31:09,600
where inflammators need more guidance

767
00:31:09,840 --> 00:31:11,350
next slide please

768
00:31:11,350 --> 00:31:13,919
[Music]

769
00:31:13,919 --> 00:31:16,159
so

770
00:31:16,960 --> 00:31:19,600
let's start with the good news algorithm

771
00:31:19,600 --> 00:31:21,440
support is excellent

772
00:31:21,440 --> 00:31:24,960
so almost all implementations

773
00:31:24,960 --> 00:31:29,919
support almost all algorithms

774
00:31:30,399 --> 00:31:32,480
and if you look at the the chart on the

775
00:31:32,480 --> 00:31:33,919
right

776
00:31:33,919 --> 00:31:37,840
uh a significant uh

777
00:31:37,840 --> 00:31:41,360
percentage of the points you see

778
00:31:41,360 --> 00:31:46,500
are the the algorithm supporters um

779
00:31:46,500 --> 00:31:48,000
[Music]

780
00:31:48,000 --> 00:31:51,919
then there are problems for example

781
00:31:51,919 --> 00:31:55,120
if you consider signature subpackets

782
00:31:55,120 --> 00:31:56,960
it's unclear what implementation should

783
00:31:56,960 --> 00:31:58,399
do if

784
00:31:58,399 --> 00:32:00,640
there are multiple maybe conflicting

785
00:32:00,640 --> 00:32:03,360
sub-packets

786
00:32:03,600 --> 00:32:06,080
there is uncertainty about what

787
00:32:06,080 --> 00:32:07,440
information you can take from

788
00:32:07,440 --> 00:32:10,320
unhatched sub-packet areas and how you

789
00:32:10,320 --> 00:32:10,799
handle

790
00:32:10,799 --> 00:32:14,559
critical sub-packets

791
00:32:14,559 --> 00:32:19,440
then timestamps are a bit of a disaster

792
00:32:19,440 --> 00:32:21,760
it's sometimes not clear how to handle

793
00:32:21,760 --> 00:32:22,960
missing sub packets

794
00:32:22,960 --> 00:32:26,240
missing timestamp subpackets

795
00:32:26,240 --> 00:32:28,080
what to do if a signature's creation

796
00:32:28,080 --> 00:32:30,799
time is in the future

797
00:32:30,799 --> 00:32:33,519
or what if the signature's creation time

798
00:32:33,519 --> 00:32:36,960
predates the signing keys creation time

799
00:32:36,960 --> 00:32:40,320
or what if

800
00:32:40,320 --> 00:32:42,480
at the time the signature was supposedly

801
00:32:42,480 --> 00:32:43,919
created

802
00:32:43,919 --> 00:32:46,799
the signature sub key was not bound or

803
00:32:46,799 --> 00:32:48,799
was revoked or the

804
00:32:48,799 --> 00:32:51,840
certificate was for some reason not not

805
00:32:51,840 --> 00:32:54,240
valid

806
00:32:54,799 --> 00:32:58,399
and there are unknown packets

807
00:32:58,399 --> 00:33:00,399
so i think unknown packets should be

808
00:33:00,399 --> 00:33:01,679
ignored as

809
00:33:01,679 --> 00:33:04,480
as much as possible to ensure forward

810
00:33:04,480 --> 00:33:06,480
compatibility

811
00:33:06,480 --> 00:33:09,279
say if verifying signatures detached

812
00:33:09,279 --> 00:33:10,559
signatures

813
00:33:10,559 --> 00:33:14,080
and there is a v4 and the v5 signature

814
00:33:14,080 --> 00:33:17,440
and you don't dig the d5 signature

815
00:33:17,440 --> 00:33:19,440
you should you should be fine with

816
00:33:19,440 --> 00:33:22,960
verifying the v4 signature

817
00:33:23,600 --> 00:33:28,399
expirations um

818
00:33:28,880 --> 00:33:31,120
implementations very widely with respect

819
00:33:31,120 --> 00:33:32,320
to

820
00:33:32,320 --> 00:33:35,679
uh the question of do signatures expire

821
00:33:35,679 --> 00:33:39,679
like in the context of

822
00:33:39,679 --> 00:33:43,760
certificate component binding signatures

823
00:33:43,840 --> 00:33:48,080
do primary key binding signatures expire

824
00:33:48,080 --> 00:33:51,679
and do search expire

825
00:33:51,679 --> 00:33:54,000
if you look at replications revocations

826
00:33:54,000 --> 00:33:56,480
are unfortunately not as reliable as we

827
00:33:56,480 --> 00:33:58,080
like

828
00:33:58,080 --> 00:34:00,159
and then there is the question of are

829
00:34:00,159 --> 00:34:02,399
there soft revocations

830
00:34:02,399 --> 00:34:05,519
as in if i revoke a user id

831
00:34:05,519 --> 00:34:08,320
but i joined the organization later on

832
00:34:08,320 --> 00:34:09,280
again

833
00:34:09,280 --> 00:34:14,079
can i rebind the user id

834
00:34:15,520 --> 00:34:18,879
there are tests looking at robustness

835
00:34:18,879 --> 00:34:22,879
so certificates are the most complex

836
00:34:22,879 --> 00:34:25,918
compound data structure in pgp

837
00:34:25,918 --> 00:34:29,440
and there is a test that explores

838
00:34:29,440 --> 00:34:32,879
how robust the certificate

839
00:34:32,879 --> 00:34:35,839
canonicalization is for example if you

840
00:34:35,839 --> 00:34:38,320
duplicate components or

841
00:34:38,320 --> 00:34:40,480
change the order of packets stuff like

842
00:34:40,480 --> 00:34:42,719
that

843
00:34:42,719 --> 00:34:45,760
finally there is some tests about ascii

844
00:34:45,760 --> 00:34:47,199
armor

845
00:34:47,199 --> 00:34:49,119
for example i explore the question

846
00:34:49,119 --> 00:34:50,320
whether

847
00:34:50,320 --> 00:34:53,440
concatenated armored certificates are

848
00:34:53,440 --> 00:34:55,918
occurring or not

849
00:34:55,918 --> 00:34:59,359
and ascii armor itself can be a

850
00:34:59,359 --> 00:35:03,040
source of brittleness for example

851
00:35:03,040 --> 00:35:05,839
you can have white space changes or your

852
00:35:05,839 --> 00:35:08,000
armor text is quoted

853
00:35:08,000 --> 00:35:11,359
or parts are missing like the footer is

854
00:35:11,359 --> 00:35:12,720
missing

855
00:35:12,720 --> 00:35:15,440
or finally you can get arbitrary

856
00:35:15,440 --> 00:35:18,320
encoding done to your

857
00:35:18,320 --> 00:35:22,240
to your armored block so

858
00:35:22,240 --> 00:35:24,640
i check how implementations deal with

859
00:35:24,640 --> 00:35:26,879
that

860
00:35:27,040 --> 00:35:29,250
finally the really bad news

861
00:35:29,250 --> 00:35:30,400
[Music]

862
00:35:30,400 --> 00:35:32,720
many implementations accept signatures

863
00:35:32,720 --> 00:35:34,800
from weak algorithms

864
00:35:34,800 --> 00:35:38,400
so a third of implementations

865
00:35:38,400 --> 00:35:40,960
accept and successfully verify md5

866
00:35:40,960 --> 00:35:42,880
signatures

867
00:35:42,880 --> 00:35:46,160
5 of nine signature implementations

868
00:35:46,160 --> 00:35:49,200
are fine with sha1 signatures

869
00:35:49,200 --> 00:35:52,160
and four of nine are happy with ripe mdm

870
00:35:52,160 --> 00:35:53,839
signatures

871
00:35:53,839 --> 00:35:57,119
and just for fun i included a test that

872
00:35:57,119 --> 00:35:59,920
takes signatures over the shattered

873
00:35:59,920 --> 00:36:01,440
collision

874
00:36:01,440 --> 00:36:04,800
and five of nine implementations are

875
00:36:04,800 --> 00:36:07,440
fine with that

876
00:36:08,480 --> 00:36:13,480
okay next slide please

877
00:36:13,480 --> 00:36:15,200
[Music]

878
00:36:15,200 --> 00:36:17,439
so

879
00:36:20,079 --> 00:36:21,920
i hope you consider interoperability

880
00:36:21,920 --> 00:36:23,520
testing important and

881
00:36:23,520 --> 00:36:26,560
want to join the effort and i

882
00:36:26,560 --> 00:36:29,920
i would like to invite you to do that so

883
00:36:29,920 --> 00:36:33,359
if you want to add tests or

884
00:36:33,359 --> 00:36:36,800
propose tests talk to me or open an

885
00:36:36,800 --> 00:36:38,720
issue

886
00:36:38,720 --> 00:36:41,040
most artifacts are generated on the fly

887
00:36:41,040 --> 00:36:42,560
using sequoia

888
00:36:42,560 --> 00:36:45,040
but some artifacts are just stored as

889
00:36:45,040 --> 00:36:46,320
test data

890
00:36:46,320 --> 00:36:48,480
and if you generate artifacts please

891
00:36:48,480 --> 00:36:50,160
please use the common

892
00:36:50,160 --> 00:36:54,400
test keys the alice and bob key

893
00:36:54,400 --> 00:36:56,240
and if you want to get your

894
00:36:56,240 --> 00:36:57,520
implementation tested

895
00:36:57,520 --> 00:36:59,760
that's really easy you just need to

896
00:36:59,760 --> 00:37:01,839
implement the stateless open pg and

897
00:37:01,839 --> 00:37:04,800
open ptp interface and then we can plug

898
00:37:04,800 --> 00:37:07,200
it into the test suite

899
00:37:07,200 --> 00:37:08,890
to do that just talk to me

900
00:37:08,890 --> 00:37:10,480
[Music]

901
00:37:10,480 --> 00:37:13,760
finally if you want to argue semantics

902
00:37:13,760 --> 00:37:15,920
you know i wrote tests and then i

903
00:37:15,920 --> 00:37:17,440
thought about what the

904
00:37:17,440 --> 00:37:20,480
most useful outcome is but

905
00:37:20,480 --> 00:37:23,599
i could be wrong right again please talk

906
00:37:23,599 --> 00:37:24,240
to me or

907
00:37:24,240 --> 00:37:26,160
open an issue or let's take the

908
00:37:26,160 --> 00:37:27,760
discussion to the

909
00:37:27,760 --> 00:37:31,760
mailing list finally if you want to

910
00:37:31,760 --> 00:37:35,280
run the test suite locally

911
00:37:35,280 --> 00:37:39,280
that should be quite easy just clone it

912
00:37:39,280 --> 00:37:41,440
look into the readme there are some

913
00:37:41,440 --> 00:37:42,960
build dependencies you might need to

914
00:37:42,960 --> 00:37:44,320
install

915
00:37:44,320 --> 00:37:46,800
then you need to install the

916
00:37:46,800 --> 00:37:49,520
implementations you want to test

917
00:37:49,520 --> 00:37:53,520
tweak your configuration and then run it

918
00:37:53,520 --> 00:37:57,359
and you can create both html output

919
00:37:57,359 --> 00:38:01,440
or a json output and

920
00:38:02,480 --> 00:38:05,520
one area where uh help would be

921
00:38:05,520 --> 00:38:07,839
greatly appreciated would be in the

922
00:38:07,839 --> 00:38:10,560
presentation of results because

923
00:38:10,560 --> 00:38:15,040
um as as we add more and more tests

924
00:38:15,040 --> 00:38:16,560
the results become more and more

925
00:38:16,560 --> 00:38:18,560
unwieldy so

926
00:38:18,560 --> 00:38:21,680
having a front end maybe that looks at

927
00:38:21,680 --> 00:38:23,520
the json data and then

928
00:38:23,520 --> 00:38:26,079
presents it in a nicer way that would be

929
00:38:26,079 --> 00:38:28,800
very helpful

930
00:38:29,440 --> 00:38:33,839
and that's it thank you

931
00:38:35,440 --> 00:38:38,480
great thanks uh

932
00:38:38,640 --> 00:38:40,880
yeah i just wanted to thank uh justice

933
00:38:40,880 --> 00:38:42,640
for the presentation and for the

934
00:38:42,640 --> 00:38:43,920
tremendous amount of work that's gone

935
00:38:43,920 --> 00:38:45,280
into this i think it's actually

936
00:38:45,280 --> 00:38:46,720
highlighted a lot of stuff and i know

937
00:38:46,720 --> 00:38:48,320
that many bugs have been fixed as a

938
00:38:48,320 --> 00:38:49,280
result

939
00:38:49,280 --> 00:38:50,720
um we have a little bit of time for

940
00:38:50,720 --> 00:38:52,720
questions um

941
00:38:52,720 --> 00:38:56,320
but uh we're a little overtime right now

942
00:38:56,320 --> 00:38:59,040
um do folks have anything they want to

943
00:38:59,040 --> 00:39:01,839
raise

944
00:39:03,839 --> 00:39:05,760
you can just put yourself in the queue

945
00:39:05,760 --> 00:39:08,000
uh by raising your hand

946
00:39:08,000 --> 00:39:10,000
i want to encourage people to take a

947
00:39:10,000 --> 00:39:11,040
look at that if you

948
00:39:11,040 --> 00:39:12,240
if you're in the working group and you

949
00:39:12,240 --> 00:39:14,320
have not looked at the interoper uh

950
00:39:14,320 --> 00:39:17,119
test suite um you're missing out this is

951
00:39:17,119 --> 00:39:18,240
something that i think

952
00:39:18,240 --> 00:39:20,720
really makes it uh useful for

953
00:39:20,720 --> 00:39:21,520
implementers

954
00:39:21,520 --> 00:39:23,599
um and for those of us who are working

955
00:39:23,599 --> 00:39:24,880
on the spec itself

956
00:39:24,880 --> 00:39:26,640
to get a sense of where things might be

957
00:39:26,640 --> 00:39:28,000
confused or confusing

958
00:39:28,000 --> 00:39:32,640
so so thank you eustis

959
00:39:34,160 --> 00:39:37,280
so our next presentation is about simple

960
00:39:37,280 --> 00:39:38,320
octet strings

961
00:39:38,320 --> 00:39:40,800
representing new elliptic curve points

962
00:39:40,800 --> 00:39:42,160
in pgp

963
00:39:42,160 --> 00:39:46,240
in ebay and kick it away

964
00:39:46,480 --> 00:39:50,400
hello hello i'm ebay

965
00:39:50,400 --> 00:39:53,920
uh i have been working

966
00:39:53,920 --> 00:39:57,520
for grpg implementations for years

967
00:39:57,520 --> 00:40:02,800
and today i'd like to

968
00:40:04,480 --> 00:40:07,920
provide an offer about

969
00:40:07,920 --> 00:40:11,040
sos simple octet screen

970
00:40:11,040 --> 00:40:13,560
the uh

971
00:40:13,560 --> 00:40:14,720
[Music]

972
00:40:14,720 --> 00:40:20,240
country or it was 2019

973
00:40:20,240 --> 00:40:23,359
i tried to implement

974
00:40:23,359 --> 00:40:27,599
uh support of eg4

975
00:40:27,599 --> 00:40:31,599
8 and x448

976
00:40:31,599 --> 00:40:34,800
and i found that

977
00:40:34,800 --> 00:40:38,800
the pg is a kind of

978
00:40:38,800 --> 00:40:42,160
messy about ecc

979
00:40:42,160 --> 00:40:45,200
especially for eddsa

980
00:40:45,200 --> 00:40:48,400
so uh

981
00:40:48,400 --> 00:40:53,680
i fixed gruner pg

982
00:40:53,680 --> 00:40:57,040
when i introduce

983
00:40:58,119 --> 00:41:01,520
ed448 and x4

984
00:41:01,520 --> 00:41:05,440
48 and it is currently

985
00:41:05,440 --> 00:41:09,359
available in gnu pg 2.3

986
00:41:09,359 --> 00:41:12,720
beta and

987
00:41:12,720 --> 00:41:16,240
this is this this presentation

988
00:41:16,240 --> 00:41:20,480
explained how i fixed

989
00:41:20,480 --> 00:41:25,839
will pg next slide please

990
00:41:30,880 --> 00:41:34,240
basically sos is a variant

991
00:41:34,240 --> 00:41:40,079
for mpi multi-precision integer

992
00:41:40,079 --> 00:41:43,359
open pcp defines multiple strong

993
00:41:43,359 --> 00:41:46,000
integers

994
00:41:46,839 --> 00:41:49,359
but

995
00:41:49,359 --> 00:41:53,599
for ecc um easy point

996
00:41:53,599 --> 00:41:57,359
is encoded into

997
00:41:57,359 --> 00:42:00,800
mpi i think that

998
00:42:00,800 --> 00:42:04,160
that that is the cause of

999
00:42:04,160 --> 00:42:08,240
many troubles and

1000
00:42:08,240 --> 00:42:11,839
for curves which

1001
00:42:11,839 --> 00:42:15,200
format is big big indian

1002
00:42:15,200 --> 00:42:18,480
it is okay but these days

1003
00:42:18,480 --> 00:42:22,560
modern ishii use

1004
00:42:22,560 --> 00:42:25,599
little indian format

1005
00:42:25,599 --> 00:42:29,280
and because of that

1006
00:42:29,280 --> 00:42:33,760
uh we have zero removable

1007
00:42:33,760 --> 00:42:37,280
problem or

1008
00:42:37,599 --> 00:42:41,280
any existing implementation which

1009
00:42:41,280 --> 00:42:42,839
support

1010
00:42:42,839 --> 00:42:46,640
ed255 have to support

1011
00:42:46,640 --> 00:42:49,760
zero likability

1012
00:42:49,760 --> 00:42:53,440
things so

1013
00:42:53,440 --> 00:42:58,079
currently the crypto

1014
00:42:58,079 --> 00:43:02,800
the flesh document will be

1015
00:43:03,760 --> 00:43:08,319
introduce edds eddsa

1016
00:43:08,319 --> 00:43:12,079
in the next step and you you will see

1017
00:43:12,079 --> 00:43:15,760
the problem on the

1018
00:43:15,760 --> 00:43:19,359
uh next slide please

1019
00:43:20,240 --> 00:43:24,839
the sos definition is simple

1020
00:43:24,839 --> 00:43:27,040
uh it just

1021
00:43:27,040 --> 00:43:30,480
changes the definition of mpi

1022
00:43:30,480 --> 00:43:32,640
and

1023
00:43:34,720 --> 00:43:37,920
and no semantics

1024
00:43:37,920 --> 00:43:42,400
but it is now opaque string

1025
00:43:42,400 --> 00:43:47,440
because there is no semantics

1026
00:43:47,440 --> 00:43:51,040
it is we

1027
00:43:51,040 --> 00:43:55,839
can avoid zero removal things

1028
00:43:56,079 --> 00:43:59,280
next slide please

1029
00:44:03,200 --> 00:44:07,200
uh classic ecc i mean

1030
00:44:07,200 --> 00:44:11,359
by the word classically you see i mean

1031
00:44:11,359 --> 00:44:14,560
uh ecc or

1032
00:44:14,560 --> 00:44:18,640
nist missed carbs or blindfold carbs

1033
00:44:18,640 --> 00:44:23,680
uh big endian ecc

1034
00:44:23,680 --> 00:44:28,160
existing specification for classic pcc

1035
00:44:28,160 --> 00:44:31,440
can just replace the word mpi

1036
00:44:31,440 --> 00:44:34,839
with sos then it is

1037
00:44:34,839 --> 00:44:39,359
compatible so

1038
00:44:39,359 --> 00:44:42,640
i think that it can be

1039
00:44:42,640 --> 00:44:47,040
cleaner definition by the using

1040
00:44:47,040 --> 00:44:51,040
sos definition

1041
00:44:51,040 --> 00:44:54,480
next slide please

1042
00:44:54,480 --> 00:44:59,400
currently in the rfc

1043
00:44:59,400 --> 00:45:02,000
6637

1044
00:45:02,000 --> 00:45:05,280
we have a definition of the

1045
00:45:05,280 --> 00:45:08,560
encode encoding into

1046
00:45:08,560 --> 00:45:11,760
mpi for for each

1047
00:45:11,760 --> 00:45:14,960
point but uh

1048
00:45:14,960 --> 00:45:18,079
using sos we can just defer

1049
00:45:18,079 --> 00:45:22,400
other specification

1050
00:45:22,400 --> 00:45:27,359
not inside open pgp specification

1051
00:45:27,359 --> 00:45:33,839
next slide is

1052
00:45:34,800 --> 00:45:39,440
uh now i use id of sos

1053
00:45:39,440 --> 00:45:44,160
to support the ed 448 and

1054
00:45:44,839 --> 00:45:46,560
x448

1055
00:45:46,560 --> 00:45:51,359
because new modern curves uses

1056
00:45:51,359 --> 00:45:55,839
little endian format sos

1057
00:45:55,839 --> 00:45:58,960
is better i

1058
00:45:58,960 --> 00:46:01,839
use the slowest to represent scholars

1059
00:46:01,839 --> 00:46:02,880
each

1060
00:46:02,880 --> 00:46:06,480
scholars and easy point

1061
00:46:09,440 --> 00:46:15,359
next slide is

1062
00:46:15,359 --> 00:46:18,640
but currently uh

1063
00:46:18,640 --> 00:46:22,319
already many implementation

1064
00:46:22,319 --> 00:46:27,280
of open pcp adopted ed25519

1065
00:46:27,280 --> 00:46:31,599
and the carb 2519

1066
00:46:31,599 --> 00:46:34,079
and the

1067
00:46:35,640 --> 00:46:39,680
ed25519 has been implemented

1068
00:46:39,680 --> 00:46:43,280
before the idea of sos

1069
00:46:43,280 --> 00:46:46,480
and it is a

1070
00:46:46,480 --> 00:46:51,200
it it's a kind of mess and uh

1071
00:46:51,200 --> 00:46:59,520
cub 25519 key on the encryption by iss

1072
00:46:59,520 --> 00:47:03,680
was introduced by me into

1073
00:47:03,680 --> 00:47:07,359
windowpg some years ago

1074
00:47:07,359 --> 00:47:10,480
and it's

1075
00:47:10,480 --> 00:47:14,040
done before the specification of

1076
00:47:14,040 --> 00:47:17,359
x259 thing and so i

1077
00:47:17,359 --> 00:47:21,359
the idea of sos so

1078
00:47:21,359 --> 00:47:25,040
for those things we need

1079
00:47:25,040 --> 00:47:29,040
special care even though

1080
00:47:29,040 --> 00:47:34,000
even if we don't use sos or even if we

1081
00:47:34,000 --> 00:47:37,440
use f sos because of existing

1082
00:47:37,440 --> 00:47:41,599
data we need here about

1083
00:47:41,920 --> 00:47:47,680
corner cases next slide please

1084
00:47:48,880 --> 00:47:52,079
here is a special

1085
00:47:52,079 --> 00:47:59,680
thanks for ed dsa with ed25925519

1086
00:48:01,200 --> 00:48:05,599
somehow we invented the prefix

1087
00:48:05,599 --> 00:48:10,559
4 0 to represent an easy point

1088
00:48:10,559 --> 00:48:13,680
the prefix has been introduced

1089
00:48:13,680 --> 00:48:17,200
to the intention was to

1090
00:48:17,200 --> 00:48:20,720
avoid zero removal problem

1091
00:48:20,720 --> 00:48:24,400
but unfortunately the

1092
00:48:24,400 --> 00:48:27,680
the pro prefix was not

1093
00:48:27,680 --> 00:48:30,960
used for the signature part of

1094
00:48:30,960 --> 00:48:34,319
r so here the

1095
00:48:34,319 --> 00:48:37,040
removable

1096
00:48:38,559 --> 00:48:42,400
problem is there yes

1097
00:48:42,400 --> 00:48:46,160
and because of that implementation

1098
00:48:46,160 --> 00:48:50,800
have to support zero recovery

1099
00:48:50,800 --> 00:48:54,559
yes so i

1100
00:48:54,559 --> 00:48:58,480
don't like that so

1101
00:48:58,480 --> 00:49:01,599
for for implementation in

1102
00:49:01,599 --> 00:49:05,520
future it's better to

1103
00:49:05,520 --> 00:49:09,200
define or improve

1104
00:49:09,200 --> 00:49:12,400
here yes

1105
00:49:12,400 --> 00:49:17,119
next slide please and the

1106
00:49:17,119 --> 00:49:20,160
another special

1107
00:49:20,319 --> 00:49:25,680
thing is a carb 2519

1108
00:49:25,760 --> 00:49:30,160
ecgh key here we also use

1109
00:49:30,160 --> 00:49:34,319
the prefix for 0.

1110
00:49:34,319 --> 00:49:37,599
but a strange thing is that

1111
00:49:37,599 --> 00:49:40,880
a secret key is

1112
00:49:40,880 --> 00:49:46,400
scala represented as big india mpi

1113
00:49:47,760 --> 00:49:49,920
and

1114
00:49:50,800 --> 00:49:54,400
that's because of the

1115
00:49:54,400 --> 00:49:58,079
when i implemented

1116
00:49:58,079 --> 00:50:01,680
each d8 with carb 2019

1117
00:50:01,680 --> 00:50:04,800
specification of x to 519

1118
00:50:04,800 --> 00:50:09,520
was not available and

1119
00:50:09,520 --> 00:50:14,359
to confirm rfc

1120
00:50:14,359 --> 00:50:15,920
6637

1121
00:50:15,920 --> 00:50:19,440
idea uh it has

1122
00:50:19,440 --> 00:50:23,200
to be big india yes

1123
00:50:23,200 --> 00:50:27,839
next slide is

1124
00:50:29,680 --> 00:50:33,760
under if i understand correctly

1125
00:50:33,760 --> 00:50:38,480
zero level removable issues

1126
00:50:38,839 --> 00:50:41,920
the causes

1127
00:50:41,920 --> 00:50:46,319
historical things the

1128
00:50:46,400 --> 00:50:51,040
the culture of es and

1129
00:50:51,040 --> 00:50:55,040
basic encoding rules

1130
00:51:05,440 --> 00:51:09,040
so those standard

1131
00:51:09,040 --> 00:51:13,040
recommend or mandate

1132
00:51:13,040 --> 00:51:16,200
generally mobile and some

1133
00:51:16,200 --> 00:51:20,559
implementation like a gun rpg

1134
00:51:20,559 --> 00:51:24,400
because of this culture

1135
00:51:25,119 --> 00:51:29,680
it removes zello

1136
00:51:34,839 --> 00:51:36,079
yes

1137
00:51:36,079 --> 00:51:40,480
and the next step please

1138
00:51:40,480 --> 00:51:43,920
and the the idea of sos

1139
00:51:43,920 --> 00:51:47,839
principle is that open pcp

1140
00:51:47,839 --> 00:51:51,760
format is to convey data of

1141
00:51:51,760 --> 00:51:55,200
underlying crypto algorithm

1142
00:51:55,200 --> 00:51:58,240
and it is underlining

1143
00:51:58,240 --> 00:52:01,839
algorithm which define

1144
00:52:01,839 --> 00:52:06,319
the data format itself

1145
00:52:07,280 --> 00:52:11,119
and the next slide please i

1146
00:52:11,119 --> 00:52:14,880
i here i

1147
00:52:14,880 --> 00:52:18,079
explain three alternatives to

1148
00:52:18,079 --> 00:52:22,640
sos at first

1149
00:52:22,640 --> 00:52:26,640
when i try to implement

1150
00:52:26,960 --> 00:52:32,119
try to implement ed 448 and

1151
00:52:32,119 --> 00:52:35,760
x448 i

1152
00:52:35,760 --> 00:52:40,400
was about to adopt easiest

1153
00:52:40,400 --> 00:52:44,240
approach uh it's basically

1154
00:52:44,240 --> 00:52:48,079
following the ed2519

1155
00:52:48,079 --> 00:52:51,520
and the carb 2019

1156
00:52:51,520 --> 00:52:54,960
but i

1157
00:52:54,960 --> 00:52:59,200
changed my mind because of these

1158
00:52:59,200 --> 00:53:02,800
pros and cons it

1159
00:53:02,800 --> 00:53:08,000
it was easiest for green rpg

1160
00:53:08,000 --> 00:53:10,160
but

1161
00:53:11,680 --> 00:53:14,720
the all problem of

1162
00:53:14,720 --> 00:53:17,839
zero removal or zero recovery things

1163
00:53:17,839 --> 00:53:20,960
have to be okay

1164
00:53:20,960 --> 00:53:24,160
have to be there

1165
00:53:24,160 --> 00:53:29,839
so the it

1166
00:53:30,720 --> 00:53:34,000
the complexity and the providing

1167
00:53:34,000 --> 00:53:38,079
vector a test vector

1168
00:53:38,079 --> 00:53:41,680
covering all the cases

1169
00:53:41,680 --> 00:53:45,920
all the cases uh quite complex

1170
00:53:45,920 --> 00:53:49,040
so we're running a little short on time

1171
00:53:49,040 --> 00:53:50,079
i apologize

1172
00:53:50,079 --> 00:53:55,520
yes yes yeah and next slide please

1173
00:53:55,520 --> 00:53:59,040
so under so

1174
00:53:59,040 --> 00:54:03,119
we will we have other approach

1175
00:54:03,119 --> 00:54:06,240
per club approach defining

1176
00:54:06,240 --> 00:54:10,480
data format per for each cards

1177
00:54:10,480 --> 00:54:14,240
uh next slide please

1178
00:54:14,240 --> 00:54:18,160
and the most the best one would be

1179
00:54:18,160 --> 00:54:23,119
just a octet sling

1180
00:54:23,119 --> 00:54:26,640
if but it would require a

1181
00:54:26,640 --> 00:54:30,319
new algo number

1182
00:54:30,720 --> 00:54:34,800
yes and next slightly so my conclusion

1183
00:54:34,800 --> 00:54:36,160
is that

1184
00:54:36,160 --> 00:54:40,720
sos is a compromise to introduce other

1185
00:54:40,720 --> 00:54:44,640
modern curves obcc without

1186
00:54:44,640 --> 00:54:50,160
dividing from standard implementations

1187
00:54:50,160 --> 00:54:53,920
it's a bit strange but uh

1188
00:54:53,920 --> 00:54:57,839
backward compatibility is good

1189
00:54:57,839 --> 00:55:02,720
and that's my presentation and

1190
00:55:02,720 --> 00:55:06,880
basically i my i

1191
00:55:06,880 --> 00:55:10,000
my point is that

1192
00:55:10,000 --> 00:55:13,680
when we try to introduce edds

1193
00:55:13,680 --> 00:55:18,079
things into the standard you will see

1194
00:55:18,079 --> 00:55:21,839
problems and uh

1195
00:55:21,839 --> 00:55:25,359
i don't have a strong opinion

1196
00:55:25,359 --> 00:55:29,920
to push sos into specification but

1197
00:55:29,920 --> 00:55:33,200
we can share the experience

1198
00:55:33,200 --> 00:55:36,960
of current eddsa

1199
00:55:36,960 --> 00:55:41,680
problems thank you

1200
00:55:42,160 --> 00:55:46,839
that's my presentation and next slide is

1201
00:55:46,839 --> 00:55:49,680
questions

1202
00:55:49,680 --> 00:55:52,720
thank you yeah i guess we have uh

1203
00:55:52,720 --> 00:55:54,559
not that much time so phil if it's quick

1204
00:55:54,559 --> 00:55:55,920
kind of under question

1205
00:55:55,920 --> 00:55:58,640
uh speed would be good thank you yeah i

1206
00:55:58,640 --> 00:56:00,160
was just going to say there is another

1207
00:56:00,160 --> 00:56:02,400
way that you can skin this cat

1208
00:56:02,400 --> 00:56:05,280
and that is the one i do in udf which i

1209
00:56:05,280 --> 00:56:07,440
dropped into the comments where

1210
00:56:07,440 --> 00:56:12,160
i use a run a random seed

1211
00:56:12,160 --> 00:56:16,000
and a per algorithm uh

1212
00:56:16,000 --> 00:56:20,200
key generation mechanism uh it's defined

1213
00:56:20,200 --> 00:56:22,400
fred25519 or whatever

1214
00:56:22,400 --> 00:56:25,359
uh they specify how to generate the key

1215
00:56:25,359 --> 00:56:27,920
from random information

1216
00:56:27,920 --> 00:56:30,960
if we adopted that as the approach

1217
00:56:30,960 --> 00:56:34,000
throughout the itf then you push the

1218
00:56:34,000 --> 00:56:37,280
uh whole onus on

1219
00:56:37,280 --> 00:56:39,920
all this part of tagging and bagging

1220
00:56:39,920 --> 00:56:41,200
onto the

1221
00:56:41,200 --> 00:56:43,200
creators of the new algorithms we don't

1222
00:56:43,200 --> 00:56:45,040
need to revisit this

1223
00:56:45,040 --> 00:56:47,440
because the only things that the

1224
00:56:47,440 --> 00:56:48,880
algorithm ever

1225
00:56:48,880 --> 00:56:51,680
the coder needs to deal with is uh the

1226
00:56:51,680 --> 00:56:53,200
seed

1227
00:56:53,200 --> 00:56:54,799
so just just a different way of looking

1228
00:56:54,799 --> 00:56:58,799
at it

1229
00:56:58,799 --> 00:57:00,160
phil that seems to me like that has

1230
00:57:00,160 --> 00:57:02,079
pretty serious interoperability issues

1231
00:57:02,079 --> 00:57:03,359
with deployed clients

1232
00:57:03,359 --> 00:57:05,040
i'm not sure how it actually applies to

1233
00:57:05,040 --> 00:57:06,400
the um

1234
00:57:06,400 --> 00:57:08,559
elliptic curve representation that the

1235
00:57:08,559 --> 00:57:10,880
bay was talking about here

1236
00:57:10,880 --> 00:57:12,640
uh yeah i mean like it doesn't solve

1237
00:57:12,640 --> 00:57:15,280
your legacy thing but it

1238
00:57:15,280 --> 00:57:17,920
means that as you try and solve this

1239
00:57:17,920 --> 00:57:19,599
problem you're not building out a new

1240
00:57:19,599 --> 00:57:21,280
problem for the next

1241
00:57:21,280 --> 00:57:24,720
uh set of curves or whatever it's a

1242
00:57:24,720 --> 00:57:27,839
permanent solution

1243
00:57:39,599 --> 00:57:42,400
so we are pretty close on time here um

1244
00:57:42,400 --> 00:57:42,799
the

1245
00:57:42,799 --> 00:57:45,280
session has i think three minutes left

1246
00:57:45,280 --> 00:57:46,079
um

1247
00:57:46,079 --> 00:57:47,920
paul i don't know whether you want to

1248
00:57:47,920 --> 00:57:49,920
talk about any of the outstanding issues

1249
00:57:49,920 --> 00:57:52,079
in the draft or about your plans for the

1250
00:57:52,079 --> 00:57:53,200
next revision

1251
00:57:53,200 --> 00:57:56,879
but nibei thank you for the presentation

1252
00:57:57,440 --> 00:58:00,079
um hi so i'm not sure if there's any

1253
00:58:00,079 --> 00:58:00,559
point in

1254
00:58:00,559 --> 00:58:03,599
rushing through this but um just a

1255
00:58:03,599 --> 00:58:05,680
a generic thing for the people who

1256
00:58:05,680 --> 00:58:08,000
haven't followed the list and who are

1257
00:58:08,000 --> 00:58:10,559
now in the working group uh meeting here

1258
00:58:10,559 --> 00:58:11,680
what we've done

1259
00:58:11,680 --> 00:58:13,599
is as daniel said in the beginning we

1260
00:58:13,599 --> 00:58:14,799
are we are pulling in

1261
00:58:14,799 --> 00:58:17,920
a lot of changes in insistable chunks

1262
00:58:17,920 --> 00:58:20,160
for people to reconfirm the consensus so

1263
00:58:20,160 --> 00:58:21,599
that we can get to a state where

1264
00:58:21,599 --> 00:58:22,559
everybody

1265
00:58:22,559 --> 00:58:25,040
agrees on the biz document uh that is

1266
00:58:25,040 --> 00:58:26,000
for instance

1267
00:58:26,000 --> 00:58:29,200
yoaf why you are seeing triple des is a

1268
00:58:29,200 --> 00:58:31,200
must algorithm because we haven't gotten

1269
00:58:31,200 --> 00:58:32,960
to the part where we're going to rewrite

1270
00:58:32,960 --> 00:58:34,319
that section again

1271
00:58:34,319 --> 00:58:36,480
um that is that is scheduled to be in

1272
00:58:36,480 --> 00:58:37,599
the next or the

1273
00:58:37,599 --> 00:58:40,480
the second next update to the draft so

1274
00:58:40,480 --> 00:58:40,880
um

1275
00:58:40,880 --> 00:58:43,440
in general i'm mostly interested in if

1276
00:58:43,440 --> 00:58:43,920
people

1277
00:58:43,920 --> 00:58:46,319
see if there's anything in the process

1278
00:58:46,319 --> 00:58:47,520
that we can improve

1279
00:58:47,520 --> 00:58:50,640
on so far so so we're basically trying

1280
00:58:50,640 --> 00:58:51,040
to

1281
00:58:51,040 --> 00:58:53,119
to present this in little chunks with

1282
00:58:53,119 --> 00:58:54,559
you know one or two weeks of time for

1283
00:58:54,559 --> 00:58:55,920
the working group to

1284
00:58:55,920 --> 00:58:57,520
give us feedback and then move on to the

1285
00:58:57,520 --> 00:58:59,680
next one in the hope that once we've

1286
00:58:59,680 --> 00:59:02,240
like you know consumed all the items

1287
00:59:02,240 --> 00:59:04,880
uh that you know you see listed here

1288
00:59:04,880 --> 00:59:07,200
that we are basically in a in a

1289
00:59:07,200 --> 00:59:08,880
similar position as the older biz

1290
00:59:08,880 --> 00:59:10,720
document but we have confirmed all the

1291
00:59:10,720 --> 00:59:11,440
consensus

1292
00:59:11,440 --> 00:59:19,200
of all these items

1293
00:59:19,200 --> 00:59:21,440
great please join by raising hands if

1294
00:59:21,440 --> 00:59:22,720
you want to speak to that

1295
00:59:22,720 --> 00:59:26,480
um but uh we can also follow up on the

1296
00:59:26,480 --> 00:59:28,160
list if folks have suggestions about

1297
00:59:28,160 --> 00:59:29,680
other ways to improve the process like

1298
00:59:29,680 --> 00:59:33,839
follow basketball

1299
00:59:34,319 --> 00:59:37,119
the previous presentation is interesting

1300
00:59:37,119 --> 00:59:38,400
in that it would have

1301
00:59:38,400 --> 00:59:40,559
if we would pull this into this abyss

1302
00:59:40,559 --> 00:59:42,960
document then we'd have to see

1303
00:59:42,960 --> 00:59:45,040
um because that would that would prevent

1304
00:59:45,040 --> 00:59:46,000
that that would

1305
00:59:46,000 --> 00:59:48,000
help us in specifying some of the older

1306
00:59:48,000 --> 00:59:49,359
the newer curves that we're about to

1307
00:59:49,359 --> 00:59:49,760
merge

1308
00:59:49,760 --> 00:59:51,280
in we would have to do that in this

1309
00:59:51,280 --> 00:59:53,760
newer way so i'm just the editor of the

1310
00:59:53,760 --> 00:59:55,200
document so i would hope that the

1311
00:59:55,200 --> 00:59:56,880
working group will at least discuss this

1312
00:59:56,880 --> 00:59:58,559
ss mechanism

1313
00:59:58,559 --> 01:00:01,119
um in the next two weeks so that we can

1314
01:00:01,119 --> 01:00:01,839
um

1315
01:00:01,839 --> 01:00:04,000
figure out how to incorporate that or

1316
01:00:04,000 --> 01:00:07,280
not in the crypto refresh

1317
01:00:08,160 --> 01:00:11,040
great thanks paul and i guess the last

1318
01:00:11,040 --> 01:00:13,440
topic we wanted to cover really was

1319
01:00:13,440 --> 01:00:15,680
our assumption was that we'd have one or

1320
01:00:15,680 --> 01:00:17,119
a couple of interim meetings

1321
01:00:17,119 --> 01:00:19,119
um depending on the cadence of

1322
01:00:19,119 --> 01:00:21,839
production of new drafts

1323
01:00:21,839 --> 01:00:24,400
um i don't think there's too much to say

1324
01:00:24,400 --> 01:00:25,760
about that here now but just wanted to

1325
01:00:25,760 --> 01:00:26,559
raise that that's

1326
01:00:26,559 --> 01:00:29,599
the plan basically on how we just how we

1327
01:00:29,599 --> 01:00:31,400
think we'd be working in between now and

1328
01:00:31,400 --> 01:00:33,040
ietf111

1329
01:00:33,040 --> 01:00:35,680
if anybody has um who wouldn't otherwise

1330
01:00:35,680 --> 01:00:36,559
be taking part once

1331
01:00:36,559 --> 01:00:40,240
they're more than welcome and

1332
01:00:40,240 --> 01:00:42,480
we'll probably do some doodles and so on

1333
01:00:42,480 --> 01:00:43,520
on the list for

1334
01:00:43,520 --> 01:00:46,079
dates and things quite shortly i i'm

1335
01:00:46,079 --> 01:00:47,359
guessing we'll aim for one or two

1336
01:00:47,359 --> 01:00:50,400
interims between now and july

1337
01:00:50,400 --> 01:00:52,319
and i think i just want to thank the

1338
01:00:52,319 --> 01:00:54,720
presenters and then i'll hand over to

1339
01:00:54,720 --> 01:00:58,078
dkg can close us out

1340
01:00:58,880 --> 01:01:02,400
um i think that that covers it i'm not

1341
01:01:02,400 --> 01:01:04,079
sure i've got too much else

1342
01:01:04,079 --> 01:01:08,240
i'm hoping that we can get

1343
01:01:08,559 --> 01:01:11,520
more people to give some uh feedback and

1344
01:01:11,520 --> 01:01:12,160
proposed

1345
01:01:12,160 --> 01:01:15,280
fixes uh on the list and hopefully the

1346
01:01:15,280 --> 01:01:17,040
uh editors will be able to drop a new

1347
01:01:17,040 --> 01:01:18,960
revision in the next uh sometime in the

1348
01:01:18,960 --> 01:01:19,520
next week

1349
01:01:19,520 --> 01:01:20,799
once you've had a chance to recover from

1350
01:01:20,799 --> 01:01:22,559
the itf

1351
01:01:22,559 --> 01:01:24,480
so thanks everyone for coming and we'll

1352
01:01:24,480 --> 01:01:27,680
see you on the mailing list

1353
01:01:29,520 --> 01:01:36,559
thank you

