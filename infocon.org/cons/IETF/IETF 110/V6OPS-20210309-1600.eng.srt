1
00:00:24,560 --> 00:00:26,480
yeah we should start

2
00:00:26,480 --> 00:00:32,000
um it's now the top of the hour and

3
00:00:34,079 --> 00:00:37,440
welcome to v6 ops so

4
00:00:37,440 --> 00:00:40,719
ron is displaying the note well and so

5
00:00:40,719 --> 00:00:42,960
if you

6
00:00:42,960 --> 00:00:46,480
if this is new to you please note well

7
00:00:46,480 --> 00:00:51,199
we have a uh a note taker that's chuping

8
00:00:51,199 --> 00:00:53,920
uh and thank you shipping for for taking

9
00:00:53,920 --> 00:00:55,120
notes for us

10
00:00:55,120 --> 00:00:57,280
we don't have a jabber scribe and i note

11
00:00:57,280 --> 00:00:59,440
that there's at least one person who's

12
00:00:59,440 --> 00:01:02,719
uh following us by jabber

13
00:01:02,719 --> 00:01:06,799
so um if somebody would please open

14
00:01:06,799 --> 00:01:10,799
jabber and and act as a jabber scribe

15
00:01:10,799 --> 00:01:12,960
i'd appreciate that but we have at least

16
00:01:12,960 --> 00:01:14,640
two on java

17
00:01:14,640 --> 00:01:18,400
okay so now moving ahead

18
00:01:18,400 --> 00:01:27,840
uh ron you want to show the agenda

19
00:01:34,479 --> 00:01:37,200
our agenda

20
00:01:38,400 --> 00:01:41,840
get in there

21
00:01:58,240 --> 00:02:03,200
okay there we go okay so we have

22
00:02:03,200 --> 00:02:06,240
um a relatively short agenda this time

23
00:02:06,240 --> 00:02:10,479
uh compared to some that we've had um

24
00:02:10,479 --> 00:02:13,599
the iatf 109 meeting was pretty well

25
00:02:13,599 --> 00:02:14,720
jammed

26
00:02:14,720 --> 00:02:18,319
um which was unfortunate but

27
00:02:18,319 --> 00:02:21,120
so ron and i have a few comments on

28
00:02:21,120 --> 00:02:21,760
chatter

29
00:02:21,760 --> 00:02:26,800
regarding ipv6 in the itf

30
00:02:26,800 --> 00:02:29,840
and then we have four talks

31
00:02:29,840 --> 00:02:31,460
the first one um

32
00:02:31,460 --> 00:02:32,879
[Music]

33
00:02:32,879 --> 00:02:35,120
relates to a hop by hop options header

34
00:02:35,120 --> 00:02:36,800
which is being discussed in six

35
00:02:36,800 --> 00:02:39,840
man the question there is basically

36
00:02:39,840 --> 00:02:40,319
whether

37
00:02:40,319 --> 00:02:43,360
uh v6 ops has any uh

38
00:02:43,360 --> 00:02:46,879
input to six man that that that might be

39
00:02:46,879 --> 00:02:47,920
useful

40
00:02:47,920 --> 00:02:51,920
um we have a talk on deployment status

41
00:02:51,920 --> 00:02:55,120
um a talk basically

42
00:02:55,120 --> 00:02:58,400
imported from tcpm they would like to

43
00:02:58,400 --> 00:03:00,879
talk about something that linux is doing

44
00:03:00,879 --> 00:03:01,599
with

45
00:03:01,599 --> 00:03:05,760
the tcpm float labels are the flow label

46
00:03:05,760 --> 00:03:10,159
ipv6 flow labels in a linux environment

47
00:03:10,159 --> 00:03:12,959
and then fernando is going to talk about

48
00:03:12,959 --> 00:03:14,080
the addressing

49
00:03:14,080 --> 00:03:17,519
considerations document that he's got up

50
00:03:17,519 --> 00:03:19,280
and which has been

51
00:03:19,280 --> 00:03:22,720
under discussion um

52
00:03:22,720 --> 00:03:27,599
so ron uh could could we look at

53
00:03:28,319 --> 00:03:33,440
the chairs comments slides

54
00:03:33,440 --> 00:03:37,040
here we go okay so ron and i were

55
00:03:37,040 --> 00:03:38,640
talking over the weekend

56
00:03:38,640 --> 00:03:42,159
and um had a few thoughts on the chatter

57
00:03:42,159 --> 00:03:47,440
about ipv6 that we hear in the ietf

58
00:03:47,440 --> 00:03:51,360
and which which is frankly

59
00:03:51,360 --> 00:03:54,799
kind of disturbing um especially

60
00:03:54,799 --> 00:03:57,920
in the context of

61
00:03:57,920 --> 00:04:01,680
deployment in the great wide world

62
00:04:01,680 --> 00:04:04,720
the world outside of uh europe

63
00:04:04,720 --> 00:04:08,879
and north america um when we

64
00:04:08,879 --> 00:04:12,159
had a talk at itf 109 from

65
00:04:12,159 --> 00:04:15,200
reliance giles or from a gentleman from

66
00:04:15,200 --> 00:04:16,798
reliance giles

67
00:04:16,798 --> 00:04:19,600
and he came back to ron and i after the

68
00:04:19,600 --> 00:04:20,399
thing was over

69
00:04:20,399 --> 00:04:23,040
and said could we please just take all

70
00:04:23,040 --> 00:04:24,960
of the class e space and

71
00:04:24,960 --> 00:04:28,400
make it available as ipv4 because i need

72
00:04:28,400 --> 00:04:29,280
it

73
00:04:29,280 --> 00:04:32,720
um that has been discussed before

74
00:04:32,720 --> 00:04:34,400
and actually there is a current

75
00:04:34,400 --> 00:04:37,040
discussion of that going on on nano

76
00:04:37,040 --> 00:04:39,280
for those of you that are on the nano

77
00:04:39,280 --> 00:04:40,840
list

78
00:04:40,840 --> 00:04:44,080
um okay

79
00:04:44,080 --> 00:04:47,680
so ron i had a slide please

80
00:04:47,680 --> 00:04:51,520
okay if we look at ipv6 demand

81
00:04:51,520 --> 00:04:54,639
um there's a lot of demand and

82
00:04:54,639 --> 00:04:58,479
we're essentially out of addresses um

83
00:04:58,479 --> 00:05:01,600
and we see proposals like the one that's

84
00:05:01,600 --> 00:05:04,320
being discussed on nanog right now

85
00:05:04,320 --> 00:05:07,280
um and also frequently frequent

86
00:05:07,280 --> 00:05:08,720
proposals to take

87
00:05:08,720 --> 00:05:12,000
space that was allocated to uh

88
00:05:12,000 --> 00:05:14,560
us military or other people in the

89
00:05:14,560 --> 00:05:15,759
distant past

90
00:05:15,759 --> 00:05:17,840
and which is not advertised on the

91
00:05:17,840 --> 00:05:19,600
internet and you know could we please

92
00:05:19,600 --> 00:05:20,720
use that

93
00:05:20,720 --> 00:05:24,160
as uh private space or

94
00:05:24,160 --> 00:05:27,600
reallocate it to somebody

95
00:05:27,680 --> 00:05:30,080
and the problem with both of those ideas

96
00:05:30,080 --> 00:05:30,720
is

97
00:05:30,720 --> 00:05:32,800
and we had this we've had this

98
00:05:32,800 --> 00:05:34,080
discussion before

99
00:05:34,080 --> 00:05:36,800
and let me just repeat it that it's a

100
00:05:36,800 --> 00:05:38,240
band-aid it

101
00:05:38,240 --> 00:05:40,880
solves the current problem in the sense

102
00:05:40,880 --> 00:05:43,280
of extending the life of ipv4

103
00:05:43,280 --> 00:05:46,720
for a week a month uh

104
00:05:46,720 --> 00:05:49,840
basically until it gets gets used up

105
00:05:49,840 --> 00:05:53,759
but it doesn't really address exhaustion

106
00:05:53,759 --> 00:05:56,720
next slide please

107
00:06:00,479 --> 00:06:04,000
okay now if i look at ipv6

108
00:06:04,000 --> 00:06:07,360
traffic and in in this i'm using a tool

109
00:06:07,360 --> 00:06:09,120
that was put up by eric bank

110
00:06:09,120 --> 00:06:11,919
and in this particular case uses google

111
00:06:11,919 --> 00:06:12,639
data

112
00:06:12,639 --> 00:06:14,720
you can also get the ap nec and akamai

113
00:06:14,720 --> 00:06:17,600
data and there's other people that

114
00:06:17,600 --> 00:06:20,400
put data about internet accesses on the

115
00:06:20,400 --> 00:06:21,520
web

116
00:06:21,520 --> 00:06:24,560
um i made this slide yesterday

117
00:06:24,560 --> 00:06:28,800
so this is as of yesterday um

118
00:06:28,800 --> 00:06:31,840
google indicates that 77 countries

119
00:06:31,840 --> 00:06:34,639
are using native ipv6 for greater than

120
00:06:34,639 --> 00:06:36,880
five percent of their accesses to

121
00:06:36,880 --> 00:06:40,080
google services um

122
00:06:40,080 --> 00:06:42,800
now obviously that means that there are

123
00:06:42,800 --> 00:06:44,639
some that are

124
00:06:44,639 --> 00:06:47,360
kind of just getting started uh there

125
00:06:47,360 --> 00:06:48,240
are a few

126
00:06:48,240 --> 00:06:51,919
that uh google actually sees more ipv6

127
00:06:51,919 --> 00:06:54,240
than it sees ipv4

128
00:06:54,240 --> 00:06:57,599
um and you know and

129
00:06:57,599 --> 00:07:03,120
and the vast number in between um

130
00:07:03,120 --> 00:07:06,160
in doing this i there's

131
00:07:06,160 --> 00:07:08,880
i don't know an interesting um

132
00:07:08,880 --> 00:07:10,080
difference between

133
00:07:10,080 --> 00:07:13,599
uh sources google and akamai

134
00:07:13,599 --> 00:07:16,000
if you ask them what they see they're

135
00:07:16,000 --> 00:07:18,400
talking primarily about accesses to

136
00:07:18,400 --> 00:07:21,199
their cdms

137
00:07:21,199 --> 00:07:24,160
if you ask ap nick you're talking about

138
00:07:24,160 --> 00:07:25,840
traffic that actually went over the

139
00:07:25,840 --> 00:07:28,240
internet backbone

140
00:07:28,240 --> 00:07:31,520
so when somebody uses ipv4

141
00:07:31,520 --> 00:07:34,240
or ipv6 to communicate what that means

142
00:07:34,240 --> 00:07:35,759
is that both they

143
00:07:35,759 --> 00:07:38,080
and the entire path of equipment in

144
00:07:38,080 --> 00:07:38,800
between

145
00:07:38,800 --> 00:07:42,160
the two endpoints are running ipv6 and

146
00:07:42,160 --> 00:07:45,280
this tells me tells me that

147
00:07:45,280 --> 00:07:48,879
we have actually pretty wide deployment

148
00:07:48,879 --> 00:07:51,759
next slide please

149
00:07:56,080 --> 00:07:58,319
now this is a slide that i pulled out of

150
00:07:58,319 --> 00:07:59,280
a deck that

151
00:07:59,280 --> 00:08:00,879
that i built two years ago so the

152
00:08:00,879 --> 00:08:03,440
numbers are a little bit out of date

153
00:08:03,440 --> 00:08:07,919
uh but a uh a central american country

154
00:08:07,919 --> 00:08:10,720
wanted to build a greenfield network

155
00:08:10,720 --> 00:08:12,720
basically as an enron

156
00:08:12,720 --> 00:08:16,000
um and they

157
00:08:16,000 --> 00:08:18,000
had a proposal they had multiple

158
00:08:18,000 --> 00:08:20,560
proposals to build it using ipv4

159
00:08:20,560 --> 00:08:23,360
and they had at least one proposal uh to

160
00:08:23,360 --> 00:08:24,080
build it

161
00:08:24,080 --> 00:08:27,520
as an ipv6 network um

162
00:08:27,520 --> 00:08:29,759
and in looking at the cost of doing

163
00:08:29,759 --> 00:08:31,360
those you know quite apart from

164
00:08:31,360 --> 00:08:34,799
equipment and software and actual

165
00:08:34,799 --> 00:08:37,200
services of running wires around or

166
00:08:37,200 --> 00:08:40,880
fiber or whatever would be involved

167
00:08:40,880 --> 00:08:43,039
looking just at the cost of the

168
00:08:43,039 --> 00:08:44,880
addresses

169
00:08:44,880 --> 00:08:47,760
[Music]

170
00:08:47,760 --> 00:08:50,320
building that network using ipv4 would

171
00:08:50,320 --> 00:08:52,399
cost them multiple tens of millions of

172
00:08:52,399 --> 00:08:53,519
dollars

173
00:08:53,519 --> 00:08:56,160
uh building it out of ipv6 cost twenty

174
00:08:56,160 --> 00:08:57,680
one hundred dollars annually

175
00:08:57,680 --> 00:08:59,920
as of two years ago it may have changed

176
00:08:59,920 --> 00:09:01,040
since then

177
00:09:01,040 --> 00:09:04,240
um and point being that uh

178
00:09:04,240 --> 00:09:07,760
you know i went whenever i'm talking

179
00:09:07,760 --> 00:09:08,000
with

180
00:09:08,000 --> 00:09:10,640
somebody about ipv sex they say what's

181
00:09:10,640 --> 00:09:12,399
the business case

182
00:09:12,399 --> 00:09:14,959
to me uh this looks amazingly like a

183
00:09:14,959 --> 00:09:16,399
business case

184
00:09:16,399 --> 00:09:19,839
uh it costs less money you can save an

185
00:09:19,839 --> 00:09:22,240
awful lot of money

186
00:09:22,240 --> 00:09:26,560
by running ipv6 next slide

187
00:09:35,200 --> 00:09:38,320
in the ietf the chatter

188
00:09:38,320 --> 00:09:42,959
isn't about uh using ipv6 in networks

189
00:09:42,959 --> 00:09:45,760
the chatter primarily seems to be about

190
00:09:45,760 --> 00:09:46,480
using it

191
00:09:46,480 --> 00:09:49,440
as an underlay technology a drop-in

192
00:09:49,440 --> 00:09:50,160
replacement

193
00:09:50,160 --> 00:09:53,439
for for mpls

194
00:09:53,839 --> 00:09:56,959
we don't hear too much in the ipv6

195
00:09:56,959 --> 00:10:02,079
about using in the ietf about using ipv6

196
00:10:02,079 --> 00:10:04,800
as an overlay technology as uh

197
00:10:04,800 --> 00:10:06,160
communication between

198
00:10:06,160 --> 00:10:10,320
endpoints um it's mentioned in internet

199
00:10:10,320 --> 00:10:13,200
drafts and in some cases under duress

200
00:10:13,200 --> 00:10:17,920
but uh the big chatter seems to be about

201
00:10:17,920 --> 00:10:18,800
source routing

202
00:10:18,800 --> 00:10:23,920
srv sex so next slide

203
00:10:29,120 --> 00:10:31,900
so ron and i have a question um

204
00:10:31,900 --> 00:10:33,200
[Music]

205
00:10:33,200 --> 00:10:36,720
kind of about ietf

206
00:10:36,720 --> 00:10:41,519
discussions and the chatter

207
00:10:42,560 --> 00:10:46,079
ipv6 in the overlay was

208
00:10:46,079 --> 00:10:49,839
uh instituted in the early 1990s

209
00:10:49,839 --> 00:10:53,360
to address address shortage in fact that

210
00:10:53,360 --> 00:10:55,200
there aren't enough addresses around in

211
00:10:55,200 --> 00:10:57,760
ipv4 to do the job

212
00:10:57,760 --> 00:11:00,880
now we see ipv6 and the overlay in

213
00:11:00,880 --> 00:11:04,000
isp residential and other networks and

214
00:11:04,000 --> 00:11:04,800
we see its

215
00:11:04,800 --> 00:11:07,920
utility in some applications like web

216
00:11:07,920 --> 00:11:09,680
browsers and such

217
00:11:09,680 --> 00:11:11,760
we don't usually see it in enterprise

218
00:11:11,760 --> 00:11:14,370
networks and

219
00:11:14,370 --> 00:11:16,000
[Music]

220
00:11:16,000 --> 00:11:21,120
it isn't universally in uh applications

221
00:11:21,120 --> 00:11:24,720
and it's not obvious how ipv6 in the

222
00:11:24,720 --> 00:11:26,160
underlay

223
00:11:26,160 --> 00:11:28,560
addresses the problem of address-based

224
00:11:28,560 --> 00:11:29,680
scarcity

225
00:11:29,680 --> 00:11:34,000
for developing countries for

226
00:11:34,000 --> 00:11:36,160
people that are looking for address

227
00:11:36,160 --> 00:11:37,279
space

228
00:11:37,279 --> 00:11:40,480
um and so the question that ron and i

229
00:11:40,480 --> 00:11:42,959
found ourselves asking ourselves is are

230
00:11:42,959 --> 00:11:45,920
we collectively doing something wrong

231
00:11:45,920 --> 00:11:49,279
um now i'm not going to throw

232
00:11:49,279 --> 00:11:52,880
open the floor to uh discussion

233
00:11:52,880 --> 00:11:55,279
primarily because i think a lot of this

234
00:11:55,279 --> 00:11:56,160
will come up

235
00:11:56,160 --> 00:11:59,200
about two talks from now uh and we can

236
00:11:59,200 --> 00:12:00,560
discuss it on the web

237
00:12:00,560 --> 00:12:04,160
on the mailing list as well um

238
00:12:04,160 --> 00:12:06,959
but something i would like us to think

239
00:12:06,959 --> 00:12:07,360
about

240
00:12:07,360 --> 00:12:11,440
is are we the ietf doing something wrong

241
00:12:11,440 --> 00:12:12,639
in our discussion

242
00:12:12,639 --> 00:12:17,279
of ipv sex and ipv6 deployment

243
00:12:19,920 --> 00:12:23,040
so so

244
00:12:23,040 --> 00:12:27,120
ron let's move to the first talk

245
00:12:32,000 --> 00:12:39,839
vector meeting materials um

246
00:12:50,720 --> 00:12:53,040
i mean what if you go to pt and then

247
00:12:53,040 --> 00:12:54,959
like if the insurance companies would

248
00:12:54,959 --> 00:13:07,839
say the pt people would never stand up

249
00:13:18,399 --> 00:13:21,120
i had to go down

250
00:13:23,780 --> 00:13:26,839
[Music]

251
00:13:32,839 --> 00:13:34,880
um

252
00:13:34,880 --> 00:13:38,160
okay and uh gyan mishra i believe you

253
00:13:38,160 --> 00:13:40,720
were going to present on this

254
00:13:40,720 --> 00:13:43,920
yes yeah hi so

255
00:13:43,920 --> 00:13:46,639
this is uh gion mishra with verizon so i

256
00:13:46,639 --> 00:13:48,000
will be presenting a

257
00:13:48,000 --> 00:13:52,240
processing of popeye hop options header

258
00:13:52,240 --> 00:14:03,360
next slide all right thank you

259
00:14:03,360 --> 00:14:06,800
so motivations so

260
00:14:06,800 --> 00:14:09,839
the hph options header is a valuable

261
00:14:09,839 --> 00:14:12,240
container facilitating new services

262
00:14:12,240 --> 00:14:15,360
um so

263
00:14:15,360 --> 00:14:17,600
the hop i have uh processing behavior is

264
00:14:17,600 --> 00:14:19,279
very it's very desirable it's something

265
00:14:19,279 --> 00:14:19,760
that's

266
00:14:19,760 --> 00:14:22,240
you know that i think overall i think in

267
00:14:22,240 --> 00:14:24,480
the industry and we're seeing a lot more

268
00:14:24,480 --> 00:14:27,600
i think new features uh such as second

269
00:14:27,600 --> 00:14:29,920
routing and others that are now starting

270
00:14:29,920 --> 00:14:32,160
you know or other i guess flavors i

271
00:14:32,160 --> 00:14:33,199
guess a web

272
00:14:33,199 --> 00:14:35,839
and others all mark pm2d that are

273
00:14:35,839 --> 00:14:37,120
wanting to

274
00:14:37,120 --> 00:14:40,399
look at using um and taking advantage of

275
00:14:40,399 --> 00:14:42,959
the extension header capabilities with a

276
00:14:42,959 --> 00:14:45,360
you know and utilizing hbh options

277
00:14:45,360 --> 00:14:47,360
um and then the power behind that with

278
00:14:47,360 --> 00:14:50,079
ipv6

279
00:14:50,079 --> 00:14:53,120
so with with that so the one big issue i

280
00:14:53,120 --> 00:14:53,600
guess

281
00:14:53,600 --> 00:14:55,680
and that's uh that's really been

282
00:14:55,680 --> 00:14:58,880
industry-wide i guess related to hbhs

283
00:14:58,880 --> 00:15:01,920
the hp options header has been rarely

284
00:15:01,920 --> 00:15:04,320
utilizing current operator networks and

285
00:15:04,320 --> 00:15:07,279
and the problem is uh operators have

286
00:15:07,279 --> 00:15:07,680
have

287
00:15:07,680 --> 00:15:09,920
been really reluctant to actually allow

288
00:15:09,920 --> 00:15:11,440
hph into the network

289
00:15:11,440 --> 00:15:15,199
and just just with with that um

290
00:15:15,199 --> 00:15:17,440
of separation of control plane and data

291
00:15:17,440 --> 00:15:19,279
plane and having

292
00:15:19,279 --> 00:15:21,440
uh traffic that should be processed in

293
00:15:21,440 --> 00:15:23,199
the forwarding path having to be punted

294
00:15:23,199 --> 00:15:24,560
to the control plane

295
00:15:24,560 --> 00:15:28,320
and that impact of of of traffic

296
00:15:28,320 --> 00:15:30,000
you know being forwarded and having to

297
00:15:30,000 --> 00:15:31,600
get rate limited or pushed down to the

298
00:15:31,600 --> 00:15:32,720
control plane

299
00:15:32,720 --> 00:15:34,720
uh possibly impacting the management

300
00:15:34,720 --> 00:15:36,480
plane so that has been a

301
00:15:36,480 --> 00:15:38,399
worry for operators you know just

302
00:15:38,399 --> 00:15:40,240
historically it had just

303
00:15:40,240 --> 00:15:41,600
been an overall really historical

304
00:15:41,600 --> 00:15:43,440
problem that's existed

305
00:15:43,440 --> 00:15:46,480
that's really prevented uh hbh options

306
00:15:46,480 --> 00:15:49,279
and even uh destination you know header

307
00:15:49,279 --> 00:15:50,800
options from really getting off the

308
00:15:50,800 --> 00:15:52,320
ground just due to that

309
00:15:52,320 --> 00:15:55,839
possible impact so the main purpose here

310
00:15:55,839 --> 00:15:58,240
is uh breaking the endless cycle

311
00:15:58,240 --> 00:16:00,079
that's resulted in the hbas you know

312
00:16:00,079 --> 00:16:01,759
really becoming a dos vector so that

313
00:16:01,759 --> 00:16:03,680
that's an area where you have

314
00:16:03,680 --> 00:16:05,759
you have h you have an hbh header you

315
00:16:05,759 --> 00:16:07,360
know valid you know

316
00:16:07,360 --> 00:16:10,320
uh options you know that are that are in

317
00:16:10,320 --> 00:16:12,639
a packet with valid hph options

318
00:16:12,639 --> 00:16:15,920
but now because the hph is is a dos

319
00:16:15,920 --> 00:16:16,720
vector

320
00:16:16,720 --> 00:16:19,519
um most operators being reluctant and

321
00:16:19,519 --> 00:16:20,480
afraid of that

322
00:16:20,480 --> 00:16:22,959
cross communication from you know

323
00:16:22,959 --> 00:16:24,240
something that should be an affordable

324
00:16:24,240 --> 00:16:25,920
plan now being put into the control

325
00:16:25,920 --> 00:16:27,839
plane and impacting the management plan

326
00:16:27,839 --> 00:16:29,920
so that that's just been a really

327
00:16:29,920 --> 00:16:31,120
historical

328
00:16:31,120 --> 00:16:33,600
uh issue and now uh being able to

329
00:16:33,600 --> 00:16:36,639
develop and being able to use the um

330
00:16:36,639 --> 00:16:39,519
uh hbh header it's really impacted that

331
00:16:39,519 --> 00:16:39,920
uh

332
00:16:39,920 --> 00:16:42,720
development um so now so now what the

333
00:16:42,720 --> 00:16:44,560
goal is enabling the hp caption center

334
00:16:44,560 --> 00:16:46,720
to be utilized in a safe and secure way

335
00:16:46,720 --> 00:16:49,199
without impacting the management plan

336
00:16:49,199 --> 00:16:51,360
ease of deployment of new hph based

337
00:16:51,360 --> 00:16:52,639
network services

338
00:16:52,639 --> 00:16:54,320
in multi-vendor operator network

339
00:16:54,320 --> 00:16:56,720
scenarios that can now be deployed

340
00:16:56,720 --> 00:17:04,240
without operational impact next slide

341
00:17:04,240 --> 00:17:08,000
so so our mod are not router

342
00:17:08,000 --> 00:17:09,280
architectures so

343
00:17:09,280 --> 00:17:12,880
um with our modern router architectures

344
00:17:12,880 --> 00:17:15,520
so they maintain a strict separation of

345
00:17:15,520 --> 00:17:16,559
control

346
00:17:16,559 --> 00:17:18,079
the control plane and the forwarding

347
00:17:18,079 --> 00:17:20,000
engine the control plane

348
00:17:20,000 --> 00:17:22,000
realizing software in historically

349
00:17:22,000 --> 00:17:23,520
general purpose processors

350
00:17:23,520 --> 00:17:26,240
vulnerable to ddos attacks the

351
00:17:26,240 --> 00:17:28,079
forwarding plane realizing hardware

352
00:17:28,079 --> 00:17:28,720
flexible

353
00:17:28,720 --> 00:17:30,840
high performance software programmable

354
00:17:30,840 --> 00:17:32,000
mpus

355
00:17:32,000 --> 00:17:34,160
capable capable of handling very high

356
00:17:34,160 --> 00:17:36,160
package rates and for performing complex

357
00:17:36,160 --> 00:17:39,600
tasks such as hpg processing

358
00:17:39,600 --> 00:17:41,520
the interface between the control plane

359
00:17:41,520 --> 00:17:42,960
and forwarding plane

360
00:17:42,960 --> 00:17:44,240
generally there's a rate limiting

361
00:17:44,240 --> 00:17:46,799
mechanism that allows the implementer to

362
00:17:46,799 --> 00:17:48,559
protect the control plane against the

363
00:17:48,559 --> 00:17:49,919
ghost attacks

364
00:17:49,919 --> 00:17:52,160
however with with that the downside of

365
00:17:52,160 --> 00:17:54,080
course causing consistent packet drops

366
00:17:54,080 --> 00:17:57,200
and impacting normal ip40

367
00:17:57,200 --> 00:18:01,840
next slide

368
00:18:05,120 --> 00:18:08,080
so common implementations so the sort of

369
00:18:08,080 --> 00:18:09,840
here the so the value of the next header

370
00:18:09,840 --> 00:18:10,400
field

371
00:18:10,400 --> 00:18:13,919
in the ipv6 header so the trigger for

372
00:18:13,919 --> 00:18:16,000
the default processing behavior

373
00:18:16,000 --> 00:18:19,039
of the hph it's a common implementation

374
00:18:19,039 --> 00:18:20,960
so once the device receives an ipv6

375
00:18:20,960 --> 00:18:21,679
packet

376
00:18:21,679 --> 00:18:23,919
with this next header field set to zero

377
00:18:23,919 --> 00:18:25,200
we'll direct it to the

378
00:18:25,200 --> 00:18:28,000
they'll be directed to the slow path so

379
00:18:28,000 --> 00:18:30,080
the option type

380
00:18:30,080 --> 00:18:32,640
so the option type of each option will

381
00:18:32,640 --> 00:18:34,160
be examined before the packet is sent to

382
00:18:34,160 --> 00:18:35,840
the slow path so in most cases such

383
00:18:35,840 --> 00:18:37,280
processing behavior as a default

384
00:18:37,280 --> 00:18:39,280
configuration can't be changed

385
00:18:39,280 --> 00:18:40,960
um so that's that's really good the

386
00:18:40,960 --> 00:18:42,559
general as soon as that

387
00:18:42,559 --> 00:18:45,200
that hbh headers is received with a type

388
00:18:45,200 --> 00:18:46,080
zero

389
00:18:46,080 --> 00:18:47,600
it's generally and this has just been a

390
00:18:47,600 --> 00:18:49,440
common behavior across

391
00:18:49,440 --> 00:18:52,799
most most asics uh fixed function assets

392
00:18:52,799 --> 00:18:54,640
where as soon as that packet's received

393
00:18:54,640 --> 00:18:55,679
got that hph

394
00:18:55,679 --> 00:18:57,679
option zero it's forwarded to the slow

395
00:18:57,679 --> 00:18:58,960
path

396
00:18:58,960 --> 00:19:01,360
historical reasons uh with the with that

397
00:19:01,360 --> 00:19:02,720
hph absence

398
00:19:02,720 --> 00:19:04,320
we're not yet well really well

399
00:19:04,320 --> 00:19:07,200
understood uh by operators as well

400
00:19:07,200 --> 00:19:08,960
um and and throughout the industry and

401
00:19:08,960 --> 00:19:11,039
flexible fixed function a6 performing

402
00:19:11,039 --> 00:19:12,559
proprietary functions

403
00:19:12,559 --> 00:19:14,799
were not so capable as they are today

404
00:19:14,799 --> 00:19:17,280
with modern software programmable mpus

405
00:19:17,280 --> 00:19:19,039
that can forward at line rate in the

406
00:19:19,039 --> 00:19:20,960
fast path and still be able to perform

407
00:19:20,960 --> 00:19:24,000
complex tasks such as hp forwarding

408
00:19:24,000 --> 00:19:25,679
options processing without having to

409
00:19:25,679 --> 00:19:27,679
punch the slow path

410
00:19:27,679 --> 00:19:30,480
consequences all packets containing hp

411
00:19:30,480 --> 00:19:30,880
pack

412
00:19:30,880 --> 00:19:33,360
each speech are dispatched to the slow

413
00:19:33,360 --> 00:19:35,280
path and then you get the result of dust

414
00:19:35,280 --> 00:19:37,120
attack on the control plane congestion

415
00:19:37,120 --> 00:19:38,799
of the slow path

416
00:19:38,799 --> 00:19:40,320
impacting critical functions rate

417
00:19:40,320 --> 00:19:41,840
limiting and impacting the overall

418
00:19:41,840 --> 00:19:43,840
management plan

419
00:19:43,840 --> 00:19:46,399
next slide

420
00:19:50,640 --> 00:19:54,480
next slide thanks

421
00:19:54,640 --> 00:19:57,360
so the desired processing behavior so

422
00:19:57,360 --> 00:19:58,880
with the control plane

423
00:19:58,880 --> 00:20:01,520
um should be protected against the

424
00:20:01,520 --> 00:20:02,880
undesirable traffic

425
00:20:02,880 --> 00:20:05,440
so with the hph options that are not

426
00:20:05,440 --> 00:20:07,440
supported to be processed by the control

427
00:20:07,440 --> 00:20:08,000
pane

428
00:20:08,000 --> 00:20:10,000
should not be sent to the control plane

429
00:20:10,000 --> 00:20:12,159
potentially causing the dos attack so

430
00:20:12,159 --> 00:20:14,480
just kind of i guess based on that i

431
00:20:14,480 --> 00:20:16,640
guess when you think about it you have

432
00:20:16,640 --> 00:20:18,559
when you look at the hph options there's

433
00:20:18,559 --> 00:20:20,640
options that that are destined for the

434
00:20:20,640 --> 00:20:21,679
control plane

435
00:20:21,679 --> 00:20:23,039
and then there's options that are

436
00:20:23,039 --> 00:20:25,039
destined for the forwarding plane

437
00:20:25,039 --> 00:20:28,400
so so the idea is behind this problem

438
00:20:28,400 --> 00:20:30,480
statement and then and then also

439
00:20:30,480 --> 00:20:34,080
a possible solution is decoupling

440
00:20:34,080 --> 00:20:36,480
options that are bound for the control

441
00:20:36,480 --> 00:20:37,200
plane

442
00:20:37,200 --> 00:20:39,440
to to remain processed by the control

443
00:20:39,440 --> 00:20:41,440
plane but options that are

444
00:20:41,440 --> 00:20:43,600
uh not destined for the forward plane it

445
00:20:43,600 --> 00:20:44,799
really should stay in the forwarding

446
00:20:44,799 --> 00:20:45,600
plane but not

447
00:20:45,600 --> 00:20:48,480
should not be processed by the control

448
00:20:48,480 --> 00:20:49,200
plane

449
00:20:49,200 --> 00:20:52,320
uh should should i should be should be

450
00:20:52,320 --> 00:20:53,200
segregated

451
00:20:53,200 --> 00:20:56,559
and actually treat it differently so

452
00:20:56,559 --> 00:20:58,480
the hph options header should not be

453
00:20:58,480 --> 00:20:59,840
should not be directed sent to the

454
00:20:59,840 --> 00:21:00,720
control plane

455
00:21:00,720 --> 00:21:03,039
but the packages from steve since these

456
00:21:03,039 --> 00:21:04,400
options may not be aimed for the

457
00:21:04,400 --> 00:21:05,760
controller and so that's that's really

458
00:21:05,760 --> 00:21:06,559
the kind of big

459
00:21:06,559 --> 00:21:09,679
big concept an idea it's really that

460
00:21:09,679 --> 00:21:10,960
separation

461
00:21:10,960 --> 00:21:14,080
decoupling options that are hph options

462
00:21:14,080 --> 00:21:16,240
that are control plane destined versus

463
00:21:16,240 --> 00:21:18,080
hbh options that are really destined for

464
00:21:18,080 --> 00:21:19,200
the forwarding plane that could be

465
00:21:19,200 --> 00:21:21,280
processed in the forwarding plane

466
00:21:21,280 --> 00:21:24,559
uh source nodes should not enable hbh

467
00:21:24,559 --> 00:21:26,080
options that exceed the maximum length

468
00:21:26,080 --> 00:21:27,880
of hph options headers to

469
00:21:27,880 --> 00:21:30,960
2048 bytes encoding the number of hbh

470
00:21:30,960 --> 00:21:32,240
options that exceed the lowest

471
00:21:32,240 --> 00:21:34,159
processing capability of nodes along the

472
00:21:34,159 --> 00:21:35,039
path

473
00:21:35,039 --> 00:21:37,440
encode the number of hbh options that

474
00:21:37,440 --> 00:21:39,280
exceed the maximum overall length of the

475
00:21:39,280 --> 00:21:41,679
extended header chain

476
00:21:41,679 --> 00:21:43,679
so the idea is basically better to

477
00:21:43,679 --> 00:21:45,520
separate the two option types

478
00:21:45,520 --> 00:21:47,120
that are supposed to be processed by the

479
00:21:47,120 --> 00:21:48,400
control plane and forwarding plane

480
00:21:48,400 --> 00:21:50,240
respectively so breaking them into two

481
00:21:50,240 --> 00:21:51,200
buckets

482
00:21:51,200 --> 00:21:53,520
uh desired processing behavior for the

483
00:21:53,520 --> 00:21:54,320
two types

484
00:21:54,320 --> 00:21:56,159
options are different and the options

485
00:21:56,159 --> 00:21:57,360
are really aimed

486
00:21:57,360 --> 00:21:58,960
for the control plan are better to be

487
00:21:58,960 --> 00:22:01,440
consumed

488
00:22:01,919 --> 00:22:03,600
we should to not consume forward and

489
00:22:03,600 --> 00:22:05,200
plain resources and that's really the

490
00:22:05,200 --> 00:22:06,240
big deal that

491
00:22:06,240 --> 00:22:08,640
why have them uh be processed by the

492
00:22:08,640 --> 00:22:09,919
forwarding plane let them

493
00:22:09,919 --> 00:22:11,600
really be processed by the control plane

494
00:22:11,600 --> 00:22:14,080
and only have anything destined for the

495
00:22:14,080 --> 00:22:15,919
forwarding plane be processed at line

496
00:22:15,919 --> 00:22:18,400
rate by the forwarded plane

497
00:22:18,400 --> 00:22:20,559
so new development should be compatible

498
00:22:20,559 --> 00:22:22,080
with existing deployment so that's

499
00:22:22,080 --> 00:22:23,440
something that we you know we want to be

500
00:22:23,440 --> 00:22:24,720
cognizant of

501
00:22:24,720 --> 00:22:27,520
of any solution that that uh we propose

502
00:22:27,520 --> 00:22:28,080
uh

503
00:22:28,080 --> 00:22:29,760
since the default configuration of some

504
00:22:29,760 --> 00:22:31,679
devices cannot be reconfigured

505
00:22:31,679 --> 00:22:33,600
the update the update of the entire

506
00:22:33,600 --> 00:22:35,200
network cannot be done you know within

507
00:22:35,200 --> 00:22:36,240
with a date so

508
00:22:36,240 --> 00:22:38,480
it would take with any solution it will

509
00:22:38,480 --> 00:22:39,600
it will take time

510
00:22:39,600 --> 00:22:42,720
to uh to to progress and that should be

511
00:22:42,720 --> 00:22:43,520
able to

512
00:22:43,520 --> 00:22:45,120
it's it is definitely like a period of

513
00:22:45,120 --> 00:22:47,520
the paradigm change so it'll take time

514
00:22:47,520 --> 00:22:50,640
even with any proposal to move from

515
00:22:50,640 --> 00:22:53,039
you know what we have today to a a new

516
00:22:53,039 --> 00:22:55,840
solution

517
00:22:58,000 --> 00:23:00,880
next next slide

518
00:23:03,120 --> 00:23:06,000
so migration strategy so in order to

519
00:23:06,000 --> 00:23:07,200
achieve the desired

520
00:23:07,200 --> 00:23:09,039
processing behavior of hph options

521
00:23:09,039 --> 00:23:11,039
headers and facilitate the ever-emerging

522
00:23:11,039 --> 00:23:11,679
new

523
00:23:11,679 --> 00:23:13,679
new services to be deployed in operator

524
00:23:13,679 --> 00:23:16,240
networks across multiple vendor devices

525
00:23:16,240 --> 00:23:18,240
that make great the migration can happen

526
00:23:18,240 --> 00:23:19,280
in three parts

527
00:23:19,280 --> 00:23:22,320
as described so first the source of the

528
00:23:22,320 --> 00:23:24,640
apg options header encapsulation the

529
00:23:24,640 --> 00:23:26,480
information shared in the hph options

530
00:23:26,480 --> 00:23:28,400
they'd be first categorized

531
00:23:28,400 --> 00:23:30,320
and encapsulated into either control

532
00:23:30,320 --> 00:23:31,840
options or forwarding options

533
00:23:31,840 --> 00:23:33,360
and then encapsulated into different

534
00:23:33,360 --> 00:23:35,120
packets that's

535
00:23:35,120 --> 00:23:36,720
first step the second is the nodes

536
00:23:36,720 --> 00:23:39,039
within the network so the nodes within

537
00:23:39,039 --> 00:23:40,400
the network updated to

538
00:23:40,400 --> 00:23:42,559
the proposed behavior introducing

539
00:23:42,559 --> 00:23:44,000
introduced in the previous section so

540
00:23:44,000 --> 00:23:45,360
that's separation

541
00:23:45,360 --> 00:23:48,720
of the processing behavior of um of

542
00:23:48,720 --> 00:23:51,360
hvh options that are destined for the

543
00:23:51,360 --> 00:23:52,480
forwarding plane

544
00:23:52,480 --> 00:23:54,640
the edge nodes on the network in this

545
00:23:54,640 --> 00:23:55,520
third step

546
00:23:55,520 --> 00:23:57,200
the edge node should check whether the

547
00:23:57,200 --> 00:23:58,960
packet contains an hph header

548
00:23:58,960 --> 00:24:01,679
with control or forwarding option

549
00:24:01,679 --> 00:24:03,440
packets with the control options

550
00:24:03,440 --> 00:24:05,200
may still be filtered and dropped while

551
00:24:05,200 --> 00:24:06,720
the taxes and the forwarding options

552
00:24:06,720 --> 00:24:07,679
should be allowed

553
00:24:07,679 --> 00:24:11,200
by the acl it is certain that there

554
00:24:11,200 --> 00:24:12,400
there is no harm that could be

555
00:24:12,400 --> 00:24:14,159
introduced by the hph options to the

556
00:24:14,159 --> 00:24:14,880
nodes

557
00:24:14,880 --> 00:24:18,080
and services that can be done that can

558
00:24:18,080 --> 00:24:20,080
also be allowed

559
00:24:20,080 --> 00:24:22,159
during the migration stage the nodes

560
00:24:22,159 --> 00:24:23,679
that they're not yet updated will stay

561
00:24:23,679 --> 00:24:25,200
with their existing configuration

562
00:24:25,200 --> 00:24:28,720
so um so so the overall idea is really

563
00:24:28,720 --> 00:24:30,480
separating into two buckets

564
00:24:30,480 --> 00:24:32,799
um anything that's using the existing

565
00:24:32,799 --> 00:24:34,400
hph option

566
00:24:34,400 --> 00:24:37,120
would would would be the control plane

567
00:24:37,120 --> 00:24:37,840
options

568
00:24:37,840 --> 00:24:41,039
and then anything that's any any uh

569
00:24:41,039 --> 00:24:43,200
options that are destined for the

570
00:24:43,200 --> 00:24:45,200
forwarding plane

571
00:24:45,200 --> 00:24:47,039
the idea is it would they would use a

572
00:24:47,039 --> 00:24:49,279
new hbh extension header

573
00:24:49,279 --> 00:24:53,679
that would be proposed next slide

574
00:24:57,120 --> 00:25:00,880
next slide sorry so we would like to

575
00:25:00,880 --> 00:25:03,840
ask for workgroup adoption we we this is

576
00:25:03,840 --> 00:25:04,240
we've

577
00:25:04,240 --> 00:25:06,720
uh proposed this uh you know on the last

578
00:25:06,720 --> 00:25:07,440
ietf

579
00:25:07,440 --> 00:25:10,640
uh uh by shipping and uh

580
00:25:10,640 --> 00:25:12,400
we would like want to get feedback and

581
00:25:12,400 --> 00:25:14,080
comment from the work group

582
00:25:14,080 --> 00:25:16,240
and you know based on this concept and

583
00:25:16,240 --> 00:25:18,640
ideas and

584
00:25:18,640 --> 00:25:22,400
and thoughts and work with adoption

585
00:25:22,960 --> 00:25:26,720
excuse me could you put me in the queue

586
00:25:26,720 --> 00:25:29,840
uh sure

587
00:25:36,559 --> 00:25:40,960
so okay um so we're going to q a now

588
00:25:40,960 --> 00:25:43,440
uh ron you're you asked to be in the

589
00:25:43,440 --> 00:25:46,080
queue you're in it

590
00:25:46,080 --> 00:25:48,880
okay uh guillen thank you for this work

591
00:25:48,880 --> 00:25:49,200
it's

592
00:25:49,200 --> 00:25:52,240
um um parts of it i think are very

593
00:25:52,240 --> 00:25:53,039
important

594
00:25:53,039 --> 00:25:54,720
but we probably need to do a little

595
00:25:54,720 --> 00:25:56,640
dissection on it because of working

596
00:25:56,640 --> 00:25:56,960
group

597
00:25:56,960 --> 00:26:01,520
charters there is part

598
00:26:01,520 --> 00:26:04,960
um and there is part of this work that

599
00:26:04,960 --> 00:26:08,240
falls within v6 ops charter that

600
00:26:08,240 --> 00:26:12,159
is that we have a hop by hop option

601
00:26:12,159 --> 00:26:14,320
we would really like to use it and we

602
00:26:14,320 --> 00:26:17,039
can't for the following reasons

603
00:26:17,039 --> 00:26:18,559
there are parts of this work that i

604
00:26:18,559 --> 00:26:21,120
think fall outside of our charter

605
00:26:21,120 --> 00:26:23,440
the proposal to create the proposal to

606
00:26:23,440 --> 00:26:24,240
divide

607
00:26:24,240 --> 00:26:27,039
options into two classes control plane

608
00:26:27,039 --> 00:26:28,559
and forwarding plane

609
00:26:28,559 --> 00:26:30,320
and i think you talked about a proposal

610
00:26:30,320 --> 00:26:31,760
to take to create

611
00:26:31,760 --> 00:26:35,120
two uh a new extension header type

612
00:26:35,120 --> 00:26:37,840
that also falls outside of icharter so

613
00:26:37,840 --> 00:26:38,559
that would

614
00:26:38,559 --> 00:26:42,000
uh that's something um you know bob

615
00:26:42,000 --> 00:26:42,720
hinden would

616
00:26:42,720 --> 00:26:44,320
might want to comment on i think he's in

617
00:26:44,320 --> 00:26:46,640
the room i understood

618
00:26:46,640 --> 00:26:49,279
we do have a draft that's in the hbh4

619
00:26:49,279 --> 00:26:50,880
hvh forwarding which is the

620
00:26:50,880 --> 00:26:54,080
new which is a six man i think there's a

621
00:26:54,080 --> 00:26:55,840
further slide i guess the next slide

622
00:26:55,840 --> 00:26:57,760
down that has the uh

623
00:26:57,760 --> 00:27:01,440
proposal which is in six man so this

624
00:27:01,440 --> 00:27:03,360
this draft is actually really it's just

625
00:27:03,360 --> 00:27:04,480
for the

626
00:27:04,480 --> 00:27:06,799
problem statement um and then the

627
00:27:06,799 --> 00:27:07,840
concept

628
00:27:07,840 --> 00:27:10,880
and then and then the um the solution is

629
00:27:10,880 --> 00:27:12,799
the solutions draft is in the um

630
00:27:12,799 --> 00:27:15,279
that's what's what six man yeah what

631
00:27:15,279 --> 00:27:16,159
happened

632
00:27:16,159 --> 00:27:19,679
statement totally devoid of solutions

633
00:27:19,679 --> 00:27:21,279
i understood understood so this problem

634
00:27:21,279 --> 00:27:22,880
is it is

635
00:27:22,880 --> 00:27:24,480
it is devoid of solution it's just

636
00:27:24,480 --> 00:27:26,000
completely problems

637
00:27:26,000 --> 00:27:28,240
yes

638
00:27:30,240 --> 00:27:35,840
okay bob uh you're in the queue

639
00:27:38,640 --> 00:27:42,480
hi um so um yeah i mean i've read the

640
00:27:42,480 --> 00:27:43,360
draft and it

641
00:27:43,360 --> 00:27:45,440
i just first i'll disagree it talks

642
00:27:45,440 --> 00:27:47,360
about two different types of options

643
00:27:47,360 --> 00:27:50,559
and that is a solution not a problem

644
00:27:50,559 --> 00:27:52,720
i'm very supportive of the problem

645
00:27:52,720 --> 00:27:54,000
statement part of this

646
00:27:54,000 --> 00:27:57,360
i agree that it would be much better if

647
00:27:57,360 --> 00:28:00,240
i hop options worked and were useful

648
00:28:00,240 --> 00:28:01,360
i've proposed

649
00:28:01,360 --> 00:28:04,640
one for path mtu discovery there could

650
00:28:04,640 --> 00:28:07,200
be others

651
00:28:07,360 --> 00:28:10,559
and i actually have a draft

652
00:28:10,559 --> 00:28:12,559
that will be discussed in six man on

653
00:28:12,559 --> 00:28:14,000
thursday

654
00:28:14,000 --> 00:28:16,000
that's a different approach than what

655
00:28:16,000 --> 00:28:19,600
this is alluding to

656
00:28:19,600 --> 00:28:24,320
i think that we need to make hopper hop

657
00:28:24,320 --> 00:28:27,760
processing simpler

658
00:28:28,080 --> 00:28:30,880
and sort of reduce and basically they

659
00:28:30,880 --> 00:28:31,600
should only

660
00:28:31,600 --> 00:28:34,880
be processed in the fast path uh

661
00:28:34,880 --> 00:28:37,919
or i forget what yeah i use slightly

662
00:28:37,919 --> 00:28:39,840
different terminology

663
00:28:39,840 --> 00:28:43,200
um and i personally think that

664
00:28:43,200 --> 00:28:48,000
creating well first of all ipv6 is in

665
00:28:48,000 --> 00:28:50,399
well since forever only has it's very

666
00:28:50,399 --> 00:28:52,000
clear there's only one type

667
00:28:52,000 --> 00:28:55,279
one set of pop-up options not

668
00:28:55,279 --> 00:28:58,240
two so that's a fairly big change but i

669
00:28:58,240 --> 00:29:00,559
think the notion of creating another

670
00:29:00,559 --> 00:29:04,159
option container with hopki hop

671
00:29:04,159 --> 00:29:05,840
is going to just make things more

672
00:29:05,840 --> 00:29:08,399
complicated and

673
00:29:08,399 --> 00:29:11,279
will not solve this problem i think it's

674
00:29:11,279 --> 00:29:12,880
going in the wrong direction

675
00:29:12,880 --> 00:29:16,159
the draft i will talk about

676
00:29:16,159 --> 00:29:19,600
tries to make it simpler with but with

677
00:29:19,600 --> 00:29:20,559
the same goal

678
00:29:20,559 --> 00:29:24,080
of making hopper hub options usable

679
00:29:24,080 --> 00:29:27,600
in the operational internet so i

680
00:29:27,600 --> 00:29:30,399
i s i'm very very much supportive of v6

681
00:29:30,399 --> 00:29:33,120
ops doing a problem statement draft

682
00:29:33,120 --> 00:29:36,480
but i as fred said it needs

683
00:29:36,480 --> 00:29:39,600
to be devoid of pointing to particular

684
00:29:39,600 --> 00:29:40,799
solutions

685
00:29:40,799 --> 00:29:44,080
that that's owned by six men understood

686
00:29:44,080 --> 00:29:47,279
understood thanks mom

687
00:29:47,279 --> 00:29:50,399
you're welcome okay shipping you're in

688
00:29:50,399 --> 00:29:55,840
the queue

689
00:29:56,080 --> 00:29:58,559
shipping

690
00:30:02,290 --> 00:30:05,869
[Music]

691
00:30:07,120 --> 00:30:10,720
okay jen um do you have something you

692
00:30:10,720 --> 00:30:13,200
want to think

693
00:30:13,200 --> 00:30:16,880
uh yeah uh hi uh i have a potentially

694
00:30:16,880 --> 00:30:17,600
very sick

695
00:30:17,600 --> 00:30:22,240
question um so i

696
00:30:22,240 --> 00:30:24,960
i assume for some reason that this

697
00:30:24,960 --> 00:30:26,000
distinction

698
00:30:26,000 --> 00:30:28,240
this separation between something

699
00:30:28,240 --> 00:30:30,559
processed and slow past and something

700
00:30:30,559 --> 00:30:31,600
protest

701
00:30:31,600 --> 00:30:35,039
in fast past it's not a property of a

702
00:30:35,039 --> 00:30:35,760
package

703
00:30:35,760 --> 00:30:37,919
i would assume it's the property of the

704
00:30:37,919 --> 00:30:40,000
router what kind of things it could

705
00:30:40,000 --> 00:30:40,720
process

706
00:30:40,720 --> 00:30:43,360
is the slow pass and what kind of

707
00:30:43,360 --> 00:30:43,919
process

708
00:30:43,919 --> 00:30:46,000
is the fast pass right and this could

709
00:30:46,000 --> 00:30:48,399
change over time

710
00:30:48,399 --> 00:30:51,760
so how can this drop do

711
00:30:51,760 --> 00:30:54,480
how does rob deal with that what's

712
00:30:54,480 --> 00:30:55,919
happening if

713
00:30:55,919 --> 00:30:58,399
in like two years now we would be able

714
00:30:58,399 --> 00:31:00,399
to process and hardware things which we

715
00:31:00,399 --> 00:31:02,840
cannot process

716
00:31:02,840 --> 00:31:04,399
now um

717
00:31:04,399 --> 00:31:06,399
yeah that's that's a that's a good good

718
00:31:06,399 --> 00:31:08,559
point i mean i think with that it would

719
00:31:08,559 --> 00:31:11,600
probably it would it would be a um

720
00:31:11,600 --> 00:31:15,279
evolving that that let's say um

721
00:31:15,279 --> 00:31:17,679
you know let's say new options come up

722
00:31:17,679 --> 00:31:18,320
that are

723
00:31:18,320 --> 00:31:21,039
um that should be processed in the in

724
00:31:21,039 --> 00:31:21,519
the uh

725
00:31:21,519 --> 00:31:23,840
slow path they would remain they would

726
00:31:23,840 --> 00:31:25,919
remain that are control plane options

727
00:31:25,919 --> 00:31:28,320
they would remain in the slow path but

728
00:31:28,320 --> 00:31:31,120
new options that do and it is i guess it

729
00:31:31,120 --> 00:31:33,200
would be a never evolving change

730
00:31:33,200 --> 00:31:36,000
that as as new ones come up because it's

731
00:31:36,000 --> 00:31:38,000
two separate buckets so that is

732
00:31:38,000 --> 00:31:40,559
that is something um that we would have

733
00:31:40,559 --> 00:31:41,279
to consider

734
00:31:41,279 --> 00:31:45,200
i mean that's a that's a good point um

735
00:31:45,200 --> 00:31:48,480
a consideration having two buckets

736
00:31:48,480 --> 00:31:50,159
that it's not gonna all sit in one

737
00:31:50,159 --> 00:31:52,000
bucket as processed

738
00:31:52,000 --> 00:31:54,640
by the um you know by the you know

739
00:31:54,640 --> 00:31:56,159
normal processing where it's

740
00:31:56,159 --> 00:31:58,000
processed by this boarding plane and

741
00:31:58,000 --> 00:31:59,840
then and then forward it to the control

742
00:31:59,840 --> 00:32:00,559
plane

743
00:32:00,559 --> 00:32:03,200
where now now it would now you would

744
00:32:03,200 --> 00:32:03,760
have um

745
00:32:03,760 --> 00:32:05,279
some that are actually in the forwarding

746
00:32:05,279 --> 00:32:07,039
plane and some some you know processed

747
00:32:07,039 --> 00:32:08,320
by the control plane

748
00:32:08,320 --> 00:32:10,159
i think the one way to look one way to

749
00:32:10,159 --> 00:32:11,440
look at it though is

750
00:32:11,440 --> 00:32:14,240
is that if you have um with these two

751
00:32:14,240 --> 00:32:15,279
buckets

752
00:32:15,279 --> 00:32:18,240
if you have um options that are let's

753
00:32:18,240 --> 00:32:19,760
say existing options

754
00:32:19,760 --> 00:32:21,840
and anything new they would stay like

755
00:32:21,840 --> 00:32:23,679
stuff they would state status quo

756
00:32:23,679 --> 00:32:26,399
that there would be no change but what

757
00:32:26,399 --> 00:32:28,000
would actually change is anything

758
00:32:28,000 --> 00:32:30,399
new that comes about that actually

759
00:32:30,399 --> 00:32:31,519
requires

760
00:32:31,519 --> 00:32:33,760
uh line rate processing and processing

761
00:32:33,760 --> 00:32:34,880
in the fast path

762
00:32:34,880 --> 00:32:37,039
and that's really the idea that keep

763
00:32:37,039 --> 00:32:38,240
status quo

764
00:32:38,240 --> 00:32:40,240
anything that requires control plane and

765
00:32:40,240 --> 00:32:42,159
that would be like legacy anything that

766
00:32:42,159 --> 00:32:44,000
exists today that's control plane

767
00:32:44,000 --> 00:32:45,840
and anything that new that comes up

768
00:32:45,840 --> 00:32:47,760
would stay as is it wouldn't change it

769
00:32:47,760 --> 00:32:49,840
would be processed by the existing

770
00:32:49,840 --> 00:32:52,799
um hba cheddar but anything new that

771
00:32:52,799 --> 00:32:54,480
comes up that requires

772
00:32:54,480 --> 00:32:56,960
the enhanced forwarding capability to be

773
00:32:56,960 --> 00:32:59,519
processed at line rate in the fast path

774
00:32:59,519 --> 00:33:01,679
um that would actually that would end up

775
00:33:01,679 --> 00:33:02,640
you know be

776
00:33:02,640 --> 00:33:05,440
decoupled and use the new new options

777
00:33:05,440 --> 00:33:07,600
better

778
00:33:07,600 --> 00:33:09,440
let me make a suggestion that i think

779
00:33:09,440 --> 00:33:11,840
would clarify this particular discussion

780
00:33:11,840 --> 00:33:15,360
and that is please ditch the words

781
00:33:15,360 --> 00:33:17,519
uh fast path and slow path because

782
00:33:17,519 --> 00:33:18,960
that's not the question

783
00:33:18,960 --> 00:33:21,760
the question is forwarding plane versus

784
00:33:21,760 --> 00:33:23,039
control plane

785
00:33:23,039 --> 00:33:25,279
and if you make that clear then this

786
00:33:25,279 --> 00:33:26,080
discussion

787
00:33:26,080 --> 00:33:29,200
becomes an awful lot simpler

788
00:33:29,200 --> 00:33:32,320
okay uh you know

789
00:33:32,320 --> 00:33:34,159
yeah that's that's i appreciate that

790
00:33:34,159 --> 00:33:36,720
that helps helps with the discussion so

791
00:33:36,720 --> 00:33:38,320
control versus forward plane

792
00:33:38,320 --> 00:33:41,519
thank you yeah

793
00:33:41,519 --> 00:33:43,679
you know as far as with this draft and

794
00:33:43,679 --> 00:33:45,200
work group adoption

795
00:33:45,200 --> 00:33:47,919
uh uh what are your what are your

796
00:33:47,919 --> 00:33:49,440
thoughts as far as the problem

797
00:33:49,440 --> 00:33:50,559
statements as

798
00:33:50,559 --> 00:33:52,640
as you had stated i think this draft

799
00:33:52,640 --> 00:33:54,480
really it should be devoid of the

800
00:33:54,480 --> 00:33:55,440
solution

801
00:33:55,440 --> 00:33:58,799
so maybe just really for this i think

802
00:33:58,799 --> 00:34:00,960
discussion really focusing really just

803
00:34:00,960 --> 00:34:02,640
on the problem statement really makes

804
00:34:02,640 --> 00:34:03,440
sense

805
00:34:03,440 --> 00:34:06,559
as as this this draft and sick and v6

806
00:34:06,559 --> 00:34:07,519
ops is really

807
00:34:07,519 --> 00:34:10,000
the problem and understanding the

808
00:34:10,000 --> 00:34:10,960
problem and

809
00:34:10,960 --> 00:34:12,879
and um consensus that this is the

810
00:34:12,879 --> 00:34:14,480
problem that we want to

811
00:34:14,480 --> 00:34:17,760
that we want to address and and move to

812
00:34:17,760 --> 00:34:18,639
be able to

813
00:34:18,639 --> 00:34:21,520
adopt this as a um with the work by the

814
00:34:21,520 --> 00:34:22,879
work

815
00:34:22,879 --> 00:34:25,918
well yeah so um

816
00:34:25,918 --> 00:34:29,040
looking at the charter as ron points out

817
00:34:29,040 --> 00:34:32,399
uh the charter allows us to uh develop

818
00:34:32,399 --> 00:34:34,239
problem statements and send them off to

819
00:34:34,239 --> 00:34:36,239
other working groups six men being

820
00:34:36,239 --> 00:34:40,399
an example and uh allows us to comment

821
00:34:40,399 --> 00:34:43,760
on things uh give an operational

822
00:34:43,760 --> 00:34:45,760
viewpoint on things that are discussed

823
00:34:45,760 --> 00:34:48,960
in other working groups and so this

824
00:34:48,960 --> 00:34:49,520
draft

825
00:34:49,520 --> 00:34:51,918
from a problem statement perspective

826
00:34:51,918 --> 00:34:53,760
does that and that's good

827
00:34:53,760 --> 00:34:56,800
um what i would suggest is

828
00:34:56,800 --> 00:35:01,119
that the the draft be reworked a bit

829
00:35:01,119 --> 00:35:05,200
and literally be a problem statement

830
00:35:05,200 --> 00:35:06,880
and then we can discuss on the list

831
00:35:06,880 --> 00:35:09,440
whether it should be adopted

832
00:35:09,440 --> 00:35:12,960
um but but with the the

833
00:35:12,960 --> 00:35:15,920
current solution stuff that's in there

834
00:35:15,920 --> 00:35:16,800
uh

835
00:35:16,800 --> 00:35:19,280
i don't think we would even we can't

836
00:35:19,280 --> 00:35:20,640
adopt it

837
00:35:20,640 --> 00:35:22,960
um

838
00:35:23,680 --> 00:35:26,240
i would agree that we do have a real

839
00:35:26,240 --> 00:35:27,440
problem

840
00:35:27,440 --> 00:35:31,440
um we have so many proposals uh

841
00:35:31,440 --> 00:35:34,480
in which we need a few more bits in the

842
00:35:34,480 --> 00:35:36,160
ipv6 header

843
00:35:36,160 --> 00:35:37,760
the right way to do that is to use the

844
00:35:37,760 --> 00:35:39,760
hop by hop extension

845
00:35:39,760 --> 00:35:42,000
but because hop by hop extension isn't a

846
00:35:42,000 --> 00:35:44,079
viable option we're finding

847
00:35:44,079 --> 00:35:46,400
you know ways to shoehorn it in the flow

848
00:35:46,400 --> 00:35:47,680
label or shoehorn it

849
00:35:47,680 --> 00:35:50,720
you know someplace else um so we do have

850
00:35:50,720 --> 00:35:53,760
a real problem we really need hph back

851
00:35:53,760 --> 00:35:55,599
well this is by the way i'm speaking as

852
00:35:55,599 --> 00:35:58,720
an individual contributor

853
00:35:58,880 --> 00:36:03,680
now speaking as a um as a chair

854
00:36:03,680 --> 00:36:07,119
to keep this draft within the scope of

855
00:36:07,119 --> 00:36:11,040
six of v6 ops we need to make sure that

856
00:36:11,040 --> 00:36:12,000
what we produce

857
00:36:12,000 --> 00:36:15,359
is a problem statement totally devoid of

858
00:36:15,359 --> 00:36:16,640
solution

859
00:36:16,640 --> 00:36:18,480
so it does need a little bit of

860
00:36:18,480 --> 00:36:19,760
scrubbing

861
00:36:19,760 --> 00:36:22,800
here understood i understood

862
00:36:22,800 --> 00:36:25,680
so well so we can do that update update

863
00:36:25,680 --> 00:36:26,960
the draft and really

864
00:36:26,960 --> 00:36:30,560
make it completely devoid of a solution

865
00:36:30,560 --> 00:36:32,400
and then and then take it to the uh

866
00:36:32,400 --> 00:36:33,920
mailing list

867
00:36:33,920 --> 00:36:37,200
to review um

868
00:36:37,200 --> 00:36:39,119
and i think that's really the focus so

869
00:36:39,119 --> 00:36:40,800
and as far as the solutions

870
00:36:40,800 --> 00:36:44,000
as you said ron and fred we can take

871
00:36:44,000 --> 00:36:46,000
that that's really on six man

872
00:36:46,000 --> 00:36:47,440
but that's really it's completely

873
00:36:47,440 --> 00:36:49,200
separate from really this

874
00:36:49,200 --> 00:36:51,760
right now really the main focus is the

875
00:36:51,760 --> 00:36:52,240
problem

876
00:36:52,240 --> 00:36:54,480
statement which is it is a definitely a

877
00:36:54,480 --> 00:36:55,839
real real problem

878
00:36:55,839 --> 00:36:57,680
and being able to really leverage the

879
00:36:57,680 --> 00:36:59,520
hph option which as i got

880
00:36:59,520 --> 00:37:01,920
operators and there's so many use cases

881
00:37:01,920 --> 00:37:03,040
that that could really

882
00:37:03,040 --> 00:37:04,880
take advantage of this so it's

883
00:37:04,880 --> 00:37:06,320
definitely a problem that

884
00:37:06,320 --> 00:37:10,880
um that needs to be solved

885
00:37:10,880 --> 00:37:14,160
so appreciate the feedback

886
00:37:14,160 --> 00:37:17,359
okay thank you um now

887
00:37:17,359 --> 00:37:20,240
shuping uh you were in the queue and i

888
00:37:20,240 --> 00:37:22,079
called on you and for some reason we

889
00:37:22,079 --> 00:37:23,440
couldn't hear you

890
00:37:23,440 --> 00:37:26,560
um hello can you can you hear me now

891
00:37:26,560 --> 00:37:30,000
i can hear you now yeah so whatever

892
00:37:30,000 --> 00:37:33,280
you wanted to say go for it yeah i i

893
00:37:33,280 --> 00:37:33,599
think

894
00:37:33,599 --> 00:37:36,800
uh what i wanted to say is uh uh

895
00:37:36,800 --> 00:37:40,160
talked about and i just want to

896
00:37:40,160 --> 00:37:43,680
confirm that we share the same goal

897
00:37:43,680 --> 00:37:46,800
as bob said we want to make the hub hub

898
00:37:46,800 --> 00:37:47,839
really usable

899
00:37:47,839 --> 00:37:50,720
for the operators and because a lot of

900
00:37:50,720 --> 00:37:51,520
new features

901
00:37:51,520 --> 00:37:53,760
really depend on it for example the past

902
00:37:53,760 --> 00:37:54,960
mtu

903
00:37:54,960 --> 00:37:57,280
and currently we have two drafts the

904
00:37:57,280 --> 00:37:59,680
winding six-man and the other in the v6

905
00:37:59,680 --> 00:38:00,160
ops

906
00:38:00,160 --> 00:38:02,800
the reason we have this draft in v6 ops

907
00:38:02,800 --> 00:38:03,520
is

908
00:38:03,520 --> 00:38:06,720
um is about we we want to

909
00:38:06,720 --> 00:38:10,720
to have this a problem statement and

910
00:38:10,720 --> 00:38:13,760
this is what we really want and to

911
00:38:13,760 --> 00:38:17,040
to uh at the end of the draft actually

912
00:38:17,040 --> 00:38:17,359
we

913
00:38:17,359 --> 00:38:21,520
revised it uh before and to this version

914
00:38:21,520 --> 00:38:25,040
and we would like to we we removed

915
00:38:25,040 --> 00:38:28,079
the solution part and we can do it

916
00:38:28,079 --> 00:38:30,240
further with the help of the working

917
00:38:30,240 --> 00:38:31,359
group

918
00:38:31,359 --> 00:38:33,839
actually the main purpose for this draft

919
00:38:33,839 --> 00:38:34,480
is to

920
00:38:34,480 --> 00:38:37,680
state the problem and and

921
00:38:37,680 --> 00:38:41,280
also we have some requirements for

922
00:38:41,280 --> 00:38:44,640
uh how to precise the the

923
00:38:44,640 --> 00:38:47,760
harbor hub would be reasonable and here

924
00:38:47,760 --> 00:38:48,800
we would like to

925
00:38:48,800 --> 00:38:51,119
get the help and the feedback from the

926
00:38:51,119 --> 00:38:52,079
working group

927
00:38:52,079 --> 00:38:54,400
thank you

928
00:38:55,599 --> 00:38:58,720
thank you thank you uh warren

929
00:38:58,720 --> 00:39:01,760
you've got your hand up um

930
00:39:01,760 --> 00:39:04,800
what do you have on your mind thank you

931
00:39:04,800 --> 00:39:06,800
yeah um i'm not sure if the mic line was

932
00:39:06,800 --> 00:39:07,920
closed if so i will

933
00:39:07,920 --> 00:39:11,599
sit back down um if not

934
00:39:11,599 --> 00:39:15,040
oh speaking with no hats um to me it

935
00:39:15,040 --> 00:39:15,599
seems that

936
00:39:15,599 --> 00:39:17,839
once all the sort of solution is removed

937
00:39:17,839 --> 00:39:20,079
from this the only thing you end up with

938
00:39:20,079 --> 00:39:22,800
basically reduces down to it sure would

939
00:39:22,800 --> 00:39:23,520
be nice if

940
00:39:23,520 --> 00:39:27,200
my hop options worked um

941
00:39:27,200 --> 00:39:30,480
and the reason that i hop options don't

942
00:39:30,480 --> 00:39:31,440
currently work

943
00:39:31,440 --> 00:39:34,000
isn't that vendors are inherently evil

944
00:39:34,000 --> 00:39:34,480
although

945
00:39:34,480 --> 00:39:37,760
some might be um it's because it's hard

946
00:39:37,760 --> 00:39:39,119
to implement a lot of this

947
00:39:39,119 --> 00:39:41,760
in hardware and you don't really know

948
00:39:41,760 --> 00:39:43,599
ahead of time what routers along the

949
00:39:43,599 --> 00:39:45,839
path might have done so

950
00:39:45,839 --> 00:39:49,280
so there's also it's really hard without

951
00:39:49,280 --> 00:39:49,839
knowing

952
00:39:49,839 --> 00:39:52,079
all of the vendor implementation details

953
00:39:52,079 --> 00:39:53,839
to be able to predict what will actually

954
00:39:53,839 --> 00:39:54,720
work correctly

955
00:39:54,720 --> 00:39:57,040
in the forwarding plane or fast path

956
00:39:57,040 --> 00:39:58,560
whatever you want to call it

957
00:39:58,560 --> 00:40:00,640
so i don't entirely understand how

958
00:40:00,640 --> 00:40:02,320
anything's going to work with this

959
00:40:02,320 --> 00:40:05,760
um other than saying this new thing

960
00:40:05,760 --> 00:40:07,920
which i'm writing i really really really

961
00:40:07,920 --> 00:40:09,440
want to work on the forwarding plane and

962
00:40:09,440 --> 00:40:11,520
i certainly hope it does

963
00:40:11,520 --> 00:40:12,880
i don't think when any of the current

964
00:40:12,880 --> 00:40:14,800
hop by hop options were created

965
00:40:14,800 --> 00:40:18,160
the desire or plan was that they don't

966
00:40:18,160 --> 00:40:19,760
work properly because they get bumped to

967
00:40:19,760 --> 00:40:21,200
the control plane

968
00:40:21,200 --> 00:40:24,000
so i don't really see how this is going

969
00:40:24,000 --> 00:40:25,520
to change anything

970
00:40:25,520 --> 00:40:29,359
um other than sort of hoping or wanting

971
00:40:29,359 --> 00:40:31,839
a pony

972
00:40:34,160 --> 00:40:36,720
thanks warren for your feedback i you

973
00:40:36,720 --> 00:40:37,520
know i think

974
00:40:37,520 --> 00:40:39,119
you know with this would be problem

975
00:40:39,119 --> 00:40:40,560
statement i think we're gonna

976
00:40:40,560 --> 00:40:42,400
you know as a shipping mentioned i think

977
00:40:42,400 --> 00:40:43,920
and and the feedback

978
00:40:43,920 --> 00:40:47,520
uh from ron and fred we'll focus on the

979
00:40:47,520 --> 00:40:49,839
problem statement and really the problem

980
00:40:49,839 --> 00:40:51,200
which is definitely a

981
00:40:51,200 --> 00:40:54,480
issue to be able to use the hbh

982
00:40:54,480 --> 00:40:56,720
option and make it make it really viable

983
00:40:56,720 --> 00:40:58,800
i think to get from like point a to

984
00:40:58,800 --> 00:40:59,280
point b

985
00:40:59,280 --> 00:41:02,000
is not easy and it's it is fairly

986
00:41:02,000 --> 00:41:03,680
complicated to get there

987
00:41:03,680 --> 00:41:07,920
um as there are the chip vendors

988
00:41:07,920 --> 00:41:10,000
and and operators and and there's a and

989
00:41:10,000 --> 00:41:12,319
there are a number of variables involved

990
00:41:12,319 --> 00:41:14,720
to be able to make hvh options really

991
00:41:14,720 --> 00:41:15,680
viable

992
00:41:15,680 --> 00:41:18,800
um so it's it's not a uh simple as

993
00:41:18,800 --> 00:41:20,560
simple as that i think the solution is

994
00:41:20,560 --> 00:41:22,160
fairly complicated

995
00:41:22,160 --> 00:41:24,640
um as there are a lot of variables but i

996
00:41:24,640 --> 00:41:25,280
think

997
00:41:25,280 --> 00:41:28,000
as far as the problem i think it's

998
00:41:28,000 --> 00:41:29,839
something that's existed for a long time

999
00:41:29,839 --> 00:41:31,200
and i think this is something that we

1000
00:41:31,200 --> 00:41:31,839
want to

1001
00:41:31,839 --> 00:41:35,280
really address and and um and

1002
00:41:35,280 --> 00:41:38,480
with this draft and so it so it's um so

1003
00:41:38,480 --> 00:41:40,640
it's made aware you know within v6 ops

1004
00:41:40,640 --> 00:41:41,520
that we you know

1005
00:41:41,520 --> 00:41:44,000
that we have that said in stone that the

1006
00:41:44,000 --> 00:41:45,599
work group and everyone agrees on the

1007
00:41:45,599 --> 00:41:46,480
problem

1008
00:41:46,480 --> 00:41:48,319
then then it's really a matter of you

1009
00:41:48,319 --> 00:41:49,680
know like as

1010
00:41:49,680 --> 00:41:52,800
bob has his his draft with uh you know

1011
00:41:52,800 --> 00:41:54,319
an idea with hbh

1012
00:41:54,319 --> 00:41:56,079
and that you know how we can make it

1013
00:41:56,079 --> 00:41:58,079
viable with just with a single hb

1014
00:41:58,079 --> 00:42:00,319
option which which is i mean you know i

1015
00:42:00,319 --> 00:42:01,680
really um

1016
00:42:01,680 --> 00:42:03,839
you know i mean it's great that bob had

1017
00:42:03,839 --> 00:42:04,800
come up with that

1018
00:42:04,800 --> 00:42:07,920
that idea and then the idea that we have

1019
00:42:07,920 --> 00:42:09,520
with the solution trap that's another

1020
00:42:09,520 --> 00:42:11,040
and i think

1021
00:42:11,040 --> 00:42:13,119
you know any one of those ideas that

1022
00:42:13,119 --> 00:42:14,560
anything that can really make

1023
00:42:14,560 --> 00:42:17,040
hvh viable i mean we're all we're all

1024
00:42:17,040 --> 00:42:18,960
for it because it is something that

1025
00:42:18,960 --> 00:42:19,839
really the

1026
00:42:19,839 --> 00:42:21,440
operators within the industry really

1027
00:42:21,440 --> 00:42:23,280
want to be able to leverage

1028
00:42:23,280 --> 00:42:26,000
and not having a path toward the

1029
00:42:26,000 --> 00:42:26,800
solution

1030
00:42:26,800 --> 00:42:29,040
i mean that that is a problem so we're

1031
00:42:29,040 --> 00:42:30,480
open to uh

1032
00:42:30,480 --> 00:42:32,880
any and all solutions that can now solve

1033
00:42:32,880 --> 00:42:33,520
the problem

1034
00:42:33,520 --> 00:42:35,760
but at this point we're really focused

1035
00:42:35,760 --> 00:42:37,760
and we'll we'll clean up the draft to um

1036
00:42:37,760 --> 00:42:45,839
get it razor focused on the problem

1037
00:42:47,200 --> 00:42:58,800
thank you

1038
00:42:58,800 --> 00:43:02,480
i think we lost fred should i go ahead

1039
00:43:02,480 --> 00:43:05,839
oh yeah go ahead i think i'm all set

1040
00:43:05,839 --> 00:43:07,200
i think if you want to move on to the

1041
00:43:07,200 --> 00:43:10,160
next one no no i had another comment

1042
00:43:10,160 --> 00:43:13,920
oh sorry sorry all right go ahead

1043
00:43:13,920 --> 00:43:16,960
yeah yeah go ahead bob yeah so i'm

1044
00:43:16,960 --> 00:43:19,200
i also i agree with a lot of things that

1045
00:43:19,200 --> 00:43:20,560
warren said

1046
00:43:20,560 --> 00:43:24,000
um and you know so i had

1047
00:43:24,000 --> 00:43:27,599
two thoughts um i mean we are going to

1048
00:43:27,599 --> 00:43:28,160
have

1049
00:43:28,160 --> 00:43:30,720
i mean if we get something that works

1050
00:43:30,720 --> 00:43:31,839
and

1051
00:43:31,839 --> 00:43:34,880
then we're going to be have to be fairly

1052
00:43:34,880 --> 00:43:36,880
careful about what we allow to be

1053
00:43:36,880 --> 00:43:38,400
defined for a

1054
00:43:38,400 --> 00:43:40,880
new for new hop by hop options i don't

1055
00:43:40,880 --> 00:43:42,880
actually know how to do that

1056
00:43:42,880 --> 00:43:45,119
so that's going to be because you can

1057
00:43:45,119 --> 00:43:46,960
obviously

1058
00:43:46,960 --> 00:43:48,720
some you know you may look at an

1059
00:43:48,720 --> 00:43:50,240
existing one and that's

1060
00:43:50,240 --> 00:43:54,400
possible to do in the forwarding path

1061
00:43:54,400 --> 00:43:57,440
yeah i'll call it the fast path but i

1062
00:43:57,440 --> 00:43:58,480
could easily imagine

1063
00:43:58,480 --> 00:44:00,880
defining new things that aren't or at

1064
00:44:00,880 --> 00:44:01,760
least not

1065
00:44:01,760 --> 00:44:05,440
currently the the other thing before

1066
00:44:05,440 --> 00:44:08,079
six man goes off and does pushes

1067
00:44:08,079 --> 00:44:10,000
something through the process

1068
00:44:10,000 --> 00:44:11,359
we're going to have to have i think a

1069
00:44:11,359 --> 00:44:13,280
lot of feedback from

1070
00:44:13,280 --> 00:44:15,440
vendors who build this stuff and

1071
00:44:15,440 --> 00:44:17,680
operators who deploy it

1072
00:44:17,680 --> 00:44:20,480
that this is something that they're

1073
00:44:20,480 --> 00:44:23,119
going to implement and then use

1074
00:44:23,119 --> 00:44:25,839
because otherwise it's fairly pointless

1075
00:44:25,839 --> 00:44:26,640
and

1076
00:44:26,640 --> 00:44:29,599
so this we should not there's going to

1077
00:44:29,599 --> 00:44:30,400
be

1078
00:44:30,400 --> 00:44:32,480
i think a need for a lot of close

1079
00:44:32,480 --> 00:44:33,760
coordination

1080
00:44:33,760 --> 00:44:36,000
we can't just write a spec standardize

1081
00:44:36,000 --> 00:44:37,280
it throw it over the wall

1082
00:44:37,280 --> 00:44:40,319
and hope for the best um so this can

1083
00:44:40,319 --> 00:44:41,280
need to be a lot of

1084
00:44:41,280 --> 00:44:44,960
i think collaboration with you know

1085
00:44:44,960 --> 00:44:48,720
people who build the the routers and the

1086
00:44:48,720 --> 00:44:50,000
chips and so forth

1087
00:44:50,000 --> 00:44:52,560
and the operators who you know who run

1088
00:44:52,560 --> 00:44:54,240
the backbone networks who would

1089
00:44:54,240 --> 00:44:58,079
um deploy this stuff thank you

1090
00:44:58,079 --> 00:45:01,440
yeah okay thank you bob thank you fred

1091
00:45:01,440 --> 00:45:04,800
may i jump in for a second sure go ahead

1092
00:45:04,800 --> 00:45:07,680
okay one quick uh last comment uh

1093
00:45:07,680 --> 00:45:10,240
arguing with warren a little bit

1094
00:45:10,240 --> 00:45:12,160
a couple years ago i would have totally

1095
00:45:12,160 --> 00:45:14,079
agreed with what you said

1096
00:45:14,079 --> 00:45:17,440
but i think things have changed um

1097
00:45:17,440 --> 00:45:20,800
two things first um asics have become

1098
00:45:20,800 --> 00:45:21,920
more capable

1099
00:45:21,920 --> 00:45:25,359
so it will be possible to process some

1100
00:45:25,359 --> 00:45:29,200
but not all of the um hop by hop options

1101
00:45:29,200 --> 00:45:30,720
we can think of

1102
00:45:30,720 --> 00:45:32,960
the other thing is we're seeing more and

1103
00:45:32,960 --> 00:45:34,000
more

1104
00:45:34,000 --> 00:45:37,119
uh requests to repurpose fields

1105
00:45:37,119 --> 00:45:39,839
in the base ipv6 header we need a few

1106
00:45:39,839 --> 00:45:41,680
more bits here and there

1107
00:45:41,680 --> 00:45:44,160
and as that happens sooner or later

1108
00:45:44,160 --> 00:45:45,359
we're going to have to break down and

1109
00:45:45,359 --> 00:45:48,480
make hph work

1110
00:45:51,280 --> 00:45:55,119
okay thank you um chopin you came back

1111
00:45:55,119 --> 00:45:56,079
into the queue

1112
00:45:56,079 --> 00:45:58,560
and let me give you the last word before

1113
00:45:58,560 --> 00:46:00,400
we go on to the deployment status

1114
00:46:00,400 --> 00:46:02,880
discussion

1115
00:46:07,760 --> 00:46:11,280
and um to warren and

1116
00:46:11,280 --> 00:46:14,880
the evo isn't the operator

1117
00:46:14,880 --> 00:46:17,200
the evil is the about the implement

1118
00:46:17,200 --> 00:46:18,160
implementation

1119
00:46:18,160 --> 00:46:20,800
but in the old times when the hardware

1120
00:46:20,800 --> 00:46:22,160
is not capable just

1121
00:46:22,160 --> 00:46:25,200
as wrong uh just a comment but

1122
00:46:25,200 --> 00:46:28,000
the problem is when the hardware becomes

1123
00:46:28,000 --> 00:46:28,640
capable

1124
00:46:28,640 --> 00:46:31,520
the implementation still stays there

1125
00:46:31,520 --> 00:46:33,440
it's not changed

1126
00:46:33,440 --> 00:46:35,359
currently there is no proper

1127
00:46:35,359 --> 00:46:38,480
specifications to get the implementation

1128
00:46:38,480 --> 00:46:41,280
and that is the missing part and i think

1129
00:46:41,280 --> 00:46:42,800
the draft

1130
00:46:42,800 --> 00:46:46,720
in the here and we want to have this uh

1131
00:46:46,720 --> 00:46:49,839
somehow it's kind of a guide to

1132
00:46:49,839 --> 00:46:53,040
to fix that uh gap to

1133
00:46:53,040 --> 00:46:56,800
to get the solution to

1134
00:46:56,800 --> 00:47:00,319
be developed in the sixth man yeah

1135
00:47:00,319 --> 00:47:03,440
thank you yeah dan thank you okay i just

1136
00:47:03,440 --> 00:47:05,599
want to make one one point before we end

1137
00:47:05,599 --> 00:47:07,839
so in the draft i think one piece that

1138
00:47:07,839 --> 00:47:09,200
we had put in there and it was

1139
00:47:09,200 --> 00:47:11,680
it was in the update and it was just

1140
00:47:11,680 --> 00:47:12,720
related to

1141
00:47:12,720 --> 00:47:14,960
i think as shipping pointed out one of

1142
00:47:14,960 --> 00:47:16,880
the really the big problem is the chip

1143
00:47:16,880 --> 00:47:18,160
manufacturers

1144
00:47:18,160 --> 00:47:20,319
but i think that they because there's

1145
00:47:20,319 --> 00:47:22,079
there's two categories there's the

1146
00:47:22,079 --> 00:47:23,920
there's a fixed function asics which are

1147
00:47:23,920 --> 00:47:25,280
not as flexible

1148
00:47:25,280 --> 00:47:27,200
and then you have your npus that are

1149
00:47:27,200 --> 00:47:29,200
software programmable that are much more

1150
00:47:29,200 --> 00:47:30,000
capable

1151
00:47:30,000 --> 00:47:33,040
but because you have these two flavors

1152
00:47:33,040 --> 00:47:35,680
and manufacturers and based on the base

1153
00:47:35,680 --> 00:47:37,440
of the cost and efficiency there's so

1154
00:47:37,440 --> 00:47:39,359
many variables that go into building the

1155
00:47:39,359 --> 00:47:40,319
chips

1156
00:47:40,319 --> 00:47:42,000
they choose to go with the fixed

1157
00:47:42,000 --> 00:47:44,000
function a6 versus

1158
00:47:44,000 --> 00:47:47,520
npus so it is an inherent industry thing

1159
00:47:47,520 --> 00:47:49,359
and it's really the chip manufacturers

1160
00:47:49,359 --> 00:47:51,040
that is the problem and they're making

1161
00:47:51,040 --> 00:47:52,400
the decisions on

1162
00:47:52,400 --> 00:47:54,480
what to use not why why and their

1163
00:47:54,480 --> 00:47:56,079
decisions on choosing

1164
00:47:56,079 --> 00:47:59,200
to use np uh and a fixed function asic

1165
00:47:59,200 --> 00:48:01,119
versus an mpu

1166
00:48:01,119 --> 00:48:02,559
i don't know how that problem would be

1167
00:48:02,559 --> 00:48:04,319
solved but that is definitely where the

1168
00:48:04,319 --> 00:48:06,000
problem lies as should be

1169
00:48:06,000 --> 00:48:09,359
mentioned thank you okay

1170
00:48:09,359 --> 00:48:12,480
uh we do need to move on um

1171
00:48:12,480 --> 00:48:17,040
so uh ron has um

1172
00:48:17,040 --> 00:48:20,960
in that next talk under display um

1173
00:48:20,960 --> 00:48:22,880
and now who's presenting this is this

1174
00:48:22,880 --> 00:48:25,440
payload

1175
00:48:26,400 --> 00:48:30,400
hello everyone so this is paulo volpato

1176
00:48:30,400 --> 00:48:31,440
i'm with the

1177
00:48:31,440 --> 00:48:33,680
huawei europe and i'm presenting on

1178
00:48:33,680 --> 00:48:35,359
behalf of the authors

1179
00:48:35,359 --> 00:48:38,960
you see listed in the slide next slide

1180
00:48:38,960 --> 00:48:41,280
please

1181
00:48:44,559 --> 00:48:48,319
okay so basically for those who are not

1182
00:48:48,319 --> 00:48:49,200
aware of

1183
00:48:49,200 --> 00:48:51,680
our draft let me just share some

1184
00:48:51,680 --> 00:48:54,079
background the information about

1185
00:48:54,079 --> 00:48:57,680
uh what we have done um so

1186
00:48:57,680 --> 00:49:00,720
the i would say that the goal of

1187
00:49:00,720 --> 00:49:04,079
this draft is twofold so

1188
00:49:04,079 --> 00:49:08,400
first is to provide an updated view

1189
00:49:08,400 --> 00:49:12,960
of the deployment of ipv6 highlighting

1190
00:49:12,960 --> 00:49:16,079
what it is still missing it you know to

1191
00:49:16,079 --> 00:49:16,400
get

1192
00:49:16,400 --> 00:49:19,760
to its full adoption on the other hand

1193
00:49:19,760 --> 00:49:22,880
i would like also to provide suggestions

1194
00:49:22,880 --> 00:49:23,280
on

1195
00:49:23,280 --> 00:49:26,880
how to improve the current ipv6

1196
00:49:26,880 --> 00:49:30,400
deployment strategies and for

1197
00:49:30,400 --> 00:49:33,680
that trying to let's say partially

1198
00:49:33,680 --> 00:49:36,160
answered to the question posed by

1199
00:49:36,160 --> 00:49:39,200
uh fred at the beginning of our session

1200
00:49:39,200 --> 00:49:42,880
um we have inserted a part in the draft

1201
00:49:42,880 --> 00:49:43,760
named

1202
00:49:43,760 --> 00:49:47,280
call for action to stimulate

1203
00:49:47,280 --> 00:49:50,400
further investigations on

1204
00:49:50,400 --> 00:49:52,720
what are still considered the open

1205
00:49:52,720 --> 00:49:53,599
points

1206
00:49:53,599 --> 00:49:57,680
related to ipv6 adoption and to suggest

1207
00:49:57,680 --> 00:50:01,680
waves to move forward ideally

1208
00:50:01,680 --> 00:50:04,559
we would like to provide an updated view

1209
00:50:04,559 --> 00:50:06,960
of the practices and the planes

1210
00:50:06,960 --> 00:50:11,440
described in rfc 6036

1211
00:50:11,440 --> 00:50:15,520
that is probably more than 10 years

1212
00:50:15,520 --> 00:50:18,640
old some incentives

1213
00:50:18,640 --> 00:50:22,160
are also discussed in our draft

1214
00:50:22,160 --> 00:50:25,200
and thanks to the feedback we got from

1215
00:50:25,200 --> 00:50:25,839
the main

1216
00:50:25,839 --> 00:50:29,040
list we have also started to consider

1217
00:50:29,040 --> 00:50:32,160
let's say adding some text

1218
00:50:32,160 --> 00:50:35,200
some considerations on ipv4

1219
00:50:35,200 --> 00:50:38,240
exhaustion so this is the current status

1220
00:50:38,240 --> 00:50:39,599
we can move to the next

1221
00:50:39,599 --> 00:50:42,400
slide please

1222
00:50:42,800 --> 00:50:45,280
where we show the differences from

1223
00:50:45,280 --> 00:50:46,240
version

1224
00:50:46,240 --> 00:50:50,319
one so we presented our draft before itf

1225
00:50:50,319 --> 00:50:54,880
109. uh since then we have to thank

1226
00:50:54,880 --> 00:50:57,520
the people that provided feedback both

1227
00:50:57,520 --> 00:51:00,000
in the main list but also

1228
00:51:00,000 --> 00:51:03,280
privately and we added i said

1229
00:51:03,280 --> 00:51:07,359
one specific section on ipv4 exhaustion

1230
00:51:07,359 --> 00:51:11,599
um we introduced some considerations for

1231
00:51:11,599 --> 00:51:12,960
the usage of

1232
00:51:12,960 --> 00:51:16,240
ipv6 in cloud service providers networks

1233
00:51:16,240 --> 00:51:17,280
and their

1234
00:51:17,280 --> 00:51:20,559
data centers infrastructure

1235
00:51:20,559 --> 00:51:23,839
we have also updated the numbers

1236
00:51:23,839 --> 00:51:27,280
on the status of ipv6 and we have

1237
00:51:27,280 --> 00:51:28,800
further developed

1238
00:51:28,800 --> 00:51:32,160
let's say the part called call for

1239
00:51:32,160 --> 00:51:37,839
action next slide please

1240
00:51:40,000 --> 00:51:43,200
okay so some updated numbers

1241
00:51:43,200 --> 00:51:46,720
on ipv6 you find all the references

1242
00:51:46,720 --> 00:51:50,480
in our draft but let me uh

1243
00:51:50,480 --> 00:51:54,720
mention ethnic because we gather a lot

1244
00:51:54,720 --> 00:51:55,520
of

1245
00:51:55,520 --> 00:51:58,800
the pieces of information that we have

1246
00:51:58,800 --> 00:51:59,440
reported

1247
00:51:59,440 --> 00:52:02,559
here in our tables so first

1248
00:52:02,559 --> 00:52:04,400
where do we stand with the adoption of

1249
00:52:04,400 --> 00:52:05,920
ipv6 the

1250
00:52:05,920 --> 00:52:10,240
number of estimated ipv6 users

1251
00:52:10,240 --> 00:52:13,920
reached 1.2 billion

1252
00:52:13,920 --> 00:52:16,559
at the end of the last year and i would

1253
00:52:16,559 --> 00:52:16,960
say

1254
00:52:16,960 --> 00:52:20,160
worth noticing is the compound

1255
00:52:20,160 --> 00:52:23,119
annual growth rate which is slightly

1256
00:52:23,119 --> 00:52:23,680
above

1257
00:52:23,680 --> 00:52:27,280
40 if we consider the period

1258
00:52:27,280 --> 00:52:30,319
from end of 2016 to

1259
00:52:30,319 --> 00:52:35,200
end of 2020. the ipv6 allocations

1260
00:52:35,200 --> 00:52:39,040
also grew the

1261
00:52:39,040 --> 00:52:41,920
so you see the different numbers related

1262
00:52:41,920 --> 00:52:42,520
to the

1263
00:52:42,520 --> 00:52:46,319
registries described in the second table

1264
00:52:46,319 --> 00:52:49,839
um and again it's interesting to note

1265
00:52:49,839 --> 00:52:50,400
that

1266
00:52:50,400 --> 00:52:53,680
despite the drop in the ripe region

1267
00:52:53,680 --> 00:52:56,400
which is uh described in the pen

1268
00:52:56,400 --> 00:52:57,040
ultimate

1269
00:52:57,040 --> 00:53:00,960
row in the second table the ipv6

1270
00:53:00,960 --> 00:53:02,000
allocations

1271
00:53:02,000 --> 00:53:04,720
have grown quite a lot and if you

1272
00:53:04,720 --> 00:53:06,720
compare the two address families

1273
00:53:06,720 --> 00:53:09,839
in the third table ipv6 has grown more

1274
00:53:09,839 --> 00:53:11,359
than ipv4

1275
00:53:11,359 --> 00:53:14,559
and this is also represented by

1276
00:53:14,559 --> 00:53:17,200
the last table where we see that the

1277
00:53:17,200 --> 00:53:18,559
total number

1278
00:53:18,559 --> 00:53:22,480
of autonomous systems capable of ipv6

1279
00:53:22,480 --> 00:53:28,400
has grown more than total worldwide

1280
00:53:28,400 --> 00:53:33,359
i think we can move to the next slide

1281
00:53:35,520 --> 00:53:39,440
so one of the sections of our draft also

1282
00:53:39,440 --> 00:53:43,040
discusses a short survey

1283
00:53:43,040 --> 00:53:46,160
that we proposed to some 50 operators in

1284
00:53:46,160 --> 00:53:49,759
europe at the end of the last year

1285
00:53:50,079 --> 00:53:52,800
again all the details are described in

1286
00:53:52,800 --> 00:53:54,240
the draft

1287
00:53:54,240 --> 00:53:57,359
we just mentioned here that

1288
00:53:57,359 --> 00:54:01,280
the majority of the operators we

1289
00:54:01,280 --> 00:54:05,440
we asked the to provide an answer to the

1290
00:54:05,440 --> 00:54:06,160
survey

1291
00:54:06,160 --> 00:54:10,160
declared we have plans to

1292
00:54:10,160 --> 00:54:13,839
move adopt or let's say deal with ipv6

1293
00:54:13,839 --> 00:54:17,760
some of them have already deployed ipv6

1294
00:54:17,760 --> 00:54:18,559
some of them

1295
00:54:18,559 --> 00:54:22,480
are in the process of moving to ipv6

1296
00:54:22,480 --> 00:54:25,760
this is represented by the first pie and

1297
00:54:25,760 --> 00:54:26,559
the bottom

1298
00:54:26,559 --> 00:54:30,079
left in the middle the other question we

1299
00:54:30,079 --> 00:54:31,599
asked

1300
00:54:31,599 --> 00:54:34,240
which is the business segment where you

1301
00:54:34,240 --> 00:54:34,720
see

1302
00:54:34,720 --> 00:54:38,480
adoption of ipv6 and you can see that

1303
00:54:38,480 --> 00:54:40,880
all of them are covered we have both

1304
00:54:40,880 --> 00:54:42,319
mobile

1305
00:54:42,319 --> 00:54:45,599
fixed and enterprise and are quite

1306
00:54:45,599 --> 00:54:49,040
equally split the third

1307
00:54:49,040 --> 00:54:52,640
pie is related to the technologies to be

1308
00:54:52,640 --> 00:54:53,440
adopted

1309
00:54:53,440 --> 00:54:55,839
in the mobile space and you see that the

1310
00:54:55,839 --> 00:54:56,480
favored

1311
00:54:56,480 --> 00:54:59,680
technologies are mainly dual sec and the

1312
00:54:59,680 --> 00:55:01,680
x-slot

1313
00:55:01,680 --> 00:55:04,799
and the reason for moving to ipv6

1314
00:55:04,799 --> 00:55:08,079
in i would say almost all the answers

1315
00:55:08,079 --> 00:55:12,480
is related to the lack of ip4 addresses

1316
00:55:12,480 --> 00:55:16,079
and i would also add probably

1317
00:55:16,079 --> 00:55:19,599
an increased attention to ipv4

1318
00:55:19,599 --> 00:55:22,640
depletion which is a good sign

1319
00:55:22,640 --> 00:55:27,279
i will say next slide please

1320
00:55:31,040 --> 00:55:34,960
okay we have also expanded in the latest

1321
00:55:34,960 --> 00:55:35,520
version

1322
00:55:35,520 --> 00:55:38,960
of the draft some considerations about

1323
00:55:38,960 --> 00:55:39,760
the adoption

1324
00:55:39,760 --> 00:55:42,960
of ipv6 in specific

1325
00:55:42,960 --> 00:55:46,720
domains apart from network operators

1326
00:55:46,720 --> 00:55:50,079
so we have added some text related to

1327
00:55:50,079 --> 00:55:52,000
the use of ipv6

1328
00:55:52,000 --> 00:55:55,280
in enterprises

1329
00:55:55,280 --> 00:55:59,920
what we can say is that in many cases

1330
00:55:59,920 --> 00:56:02,960
the decision whether to go with ipv6 or

1331
00:56:02,960 --> 00:56:03,520
not

1332
00:56:03,520 --> 00:56:06,799
is dependent on the service offered by

1333
00:56:06,799 --> 00:56:10,079
the upstream provider

1334
00:56:10,079 --> 00:56:13,520
if the connectivity provider

1335
00:56:13,520 --> 00:56:17,440
runs ipv6 then well i would say

1336
00:56:17,440 --> 00:56:20,400
this is fair enough

1337
00:56:20,640 --> 00:56:23,839
if not it's easy that enterprises

1338
00:56:23,839 --> 00:56:28,000
still remain with ipv4

1339
00:56:28,960 --> 00:56:31,359
and in doing that probably the risk that

1340
00:56:31,359 --> 00:56:32,240
they may miss

1341
00:56:32,240 --> 00:56:36,400
some specific deadlines or opportunities

1342
00:56:36,400 --> 00:56:39,680
in those markets or countries

1343
00:56:39,680 --> 00:56:43,200
that have adopted let's say

1344
00:56:43,200 --> 00:56:46,480
uh enforced policies in

1345
00:56:46,480 --> 00:56:51,359
three four of ipv6

1346
00:56:51,359 --> 00:56:53,680
most of them have already adopted ip6 in

1347
00:56:53,680 --> 00:56:55,839
their data center facilities

1348
00:56:55,839 --> 00:56:58,880
or in some cases their data centers are

1349
00:56:58,880 --> 00:57:01,760
completely based on ipv6

1350
00:57:01,760 --> 00:57:05,520
um industrial internet so we consider

1351
00:57:05,520 --> 00:57:09,040
iot industry automation verticals

1352
00:57:09,040 --> 00:57:13,119
um we see there are a lot of advantages

1353
00:57:13,119 --> 00:57:17,040
when adopting ipv6 for the connectivity

1354
00:57:17,040 --> 00:57:20,079
um mainly related to the wide address

1355
00:57:20,079 --> 00:57:21,359
space but also

1356
00:57:21,359 --> 00:57:25,200
to the let's say characteristics

1357
00:57:25,200 --> 00:57:26,960
the basic characteristics of the

1358
00:57:26,960 --> 00:57:28,319
protocol

1359
00:57:28,319 --> 00:57:31,599
mainly associated with the

1360
00:57:31,599 --> 00:57:34,000
ability to self-configuration or

1361
00:57:34,000 --> 00:57:34,799
automatic

1362
00:57:34,799 --> 00:57:40,390
configuration next slide please

1363
00:57:40,390 --> 00:57:43,549
[Music]

1364
00:57:49,680 --> 00:57:52,319
we have added a new partner dedicated to

1365
00:57:52,319 --> 00:57:52,720
the

1366
00:57:52,720 --> 00:57:56,319
exertion of ipv4

1367
00:57:56,319 --> 00:57:59,920
the data comes from the registries

1368
00:57:59,920 --> 00:58:03,280
and is also summarized in a very

1369
00:58:03,280 --> 00:58:08,720
interesting article by dr jeff houston

1370
00:58:08,720 --> 00:58:12,959
that is referenced in the slide

1371
00:58:13,680 --> 00:58:15,599
so let's start with the number of

1372
00:58:15,599 --> 00:58:17,040
available available

1373
00:58:17,040 --> 00:58:20,640
ipv4 addresses in that article

1374
00:58:20,640 --> 00:58:22,720
this is summarized which is represented

1375
00:58:22,720 --> 00:58:23,760
by the table

1376
00:58:23,760 --> 00:58:27,280
on the bottom left

1377
00:58:27,520 --> 00:58:30,079
so looking at the table we see that we

1378
00:58:30,079 --> 00:58:31,839
have probably some

1379
00:58:31,839 --> 00:58:35,119
80 million of available

1380
00:58:35,119 --> 00:58:37,920
ipv4 addresses considering both the

1381
00:58:37,920 --> 00:58:40,559
really available from the registries

1382
00:58:40,559 --> 00:58:44,960
and the reserved addresses so apparently

1383
00:58:44,960 --> 00:58:47,359
if we based our assumption on the

1384
00:58:47,359 --> 00:58:50,319
numbers represented by the table we are

1385
00:58:50,319 --> 00:58:51,680
approaching

1386
00:58:51,680 --> 00:58:55,040
the the real exhaustion of the ipv4

1387
00:58:55,040 --> 00:58:57,680
other space

1388
00:58:59,040 --> 00:59:01,920
there is one point so if you have the

1389
00:59:01,920 --> 00:59:03,359
opportunity

1390
00:59:03,359 --> 00:59:05,760
to look at the article by dr houston

1391
00:59:05,760 --> 00:59:08,079
there is also

1392
00:59:08,079 --> 00:59:10,720
another chart which is represented on

1393
00:59:10,720 --> 00:59:12,160
the right

1394
00:59:12,160 --> 00:59:15,520
which details the number

1395
00:59:15,520 --> 00:59:19,920
of unadvertised addresses

1396
00:59:19,920 --> 00:59:22,960
so looking at the numbers uh we have

1397
00:59:22,960 --> 00:59:24,160
probably around

1398
00:59:24,160 --> 00:59:28,400
50 slash 8 or 50 class a

1399
00:59:28,400 --> 00:59:31,640
available which are not

1400
00:59:31,640 --> 00:59:35,040
advertised today on the internet so

1401
00:59:35,040 --> 00:59:37,599
there is a question here uh what's the

1402
00:59:37,599 --> 00:59:39,520
reason for that

1403
00:59:39,520 --> 00:59:42,240
on the one hand that seems good for ipv6

1404
00:59:42,240 --> 00:59:43,119
probably it's

1405
00:59:43,119 --> 00:59:45,599
good or better could be explained as a

1406
00:59:45,599 --> 00:59:46,319
sign that

1407
00:59:46,319 --> 00:59:50,240
since ipv6 is used more than before

1408
00:59:50,240 --> 00:59:53,440
that has freed up more ipv4

1409
00:59:53,440 --> 00:59:56,280
addresses but look at the

1410
00:59:56,280 --> 00:59:57,520
article.houston

1411
00:59:57,520 --> 01:00:00,799
also let's say he

1412
01:00:00,799 --> 01:00:03,920
provides another possible explanation

1413
01:00:03,920 --> 01:00:06,720
which could be related to an increased

1414
01:00:06,720 --> 01:00:07,200
use

1415
01:00:07,200 --> 01:00:11,359
of network address translation so

1416
01:00:11,359 --> 01:00:14,160
if so clearly there could be an impact

1417
01:00:14,160 --> 01:00:14,720
on

1418
01:00:14,720 --> 01:00:17,440
the deployment of ipv6 that could be

1419
01:00:17,440 --> 01:00:18,400
further

1420
01:00:18,400 --> 01:00:21,280
delayed clearly more investigations are

1421
01:00:21,280 --> 01:00:21,760
needed

1422
01:00:21,760 --> 01:00:29,520
here next slide please

1423
01:00:29,520 --> 01:00:33,280
and we are approaching the

1424
01:00:33,280 --> 01:00:37,119
section named code for action

1425
01:00:37,200 --> 01:00:40,960
we we tried in version one of the draft

1426
01:00:40,960 --> 01:00:41,200
and

1427
01:00:41,200 --> 01:00:44,079
we are still trying in this edition of

1428
01:00:44,079 --> 01:00:45,359
the draft

1429
01:00:45,359 --> 01:00:49,359
to put comments and considerations

1430
01:00:49,359 --> 01:00:54,000
with the scope of providing

1431
01:00:54,160 --> 01:00:56,319
arguments or even actions to support

1432
01:00:56,319 --> 01:00:57,760
ipv6

1433
01:00:57,760 --> 01:01:01,440
um clearly

1434
01:01:01,440 --> 01:01:04,960
we could look at this section as a way

1435
01:01:04,960 --> 01:01:08,160
to try to answer to the question posed

1436
01:01:08,160 --> 01:01:09,280
by fred

1437
01:01:09,280 --> 01:01:13,760
for sure more needs to be done

1438
01:01:13,760 --> 01:01:16,799
in version zero one we touched briefly

1439
01:01:16,799 --> 01:01:18,960
at the transition choices for service

1440
01:01:18,960 --> 01:01:19,839
providers and

1441
01:01:19,839 --> 01:01:22,480
enterprises the operational aspects

1442
01:01:22,480 --> 01:01:24,559
something related to security

1443
01:01:24,559 --> 01:01:27,599
we added let's say more

1444
01:01:27,599 --> 01:01:30,559
text for cloud providers and data

1445
01:01:30,559 --> 01:01:31,839
centers

1446
01:01:31,839 --> 01:01:35,839
we have already mentioned that ipv6 is

1447
01:01:35,839 --> 01:01:40,880
widely adopted there is one point though

1448
01:01:40,880 --> 01:01:43,760
cloud providers are also active in

1449
01:01:43,760 --> 01:01:46,160
gathering ipv4 addresses

1450
01:01:46,160 --> 01:01:50,079
probably to answer their business

1451
01:01:50,079 --> 01:01:51,839
needs to provide connectivity for

1452
01:01:51,839 --> 01:01:53,760
enterprises

1453
01:01:53,760 --> 01:01:57,280
so there may be let's say an impact

1454
01:01:57,280 --> 01:02:00,400
one day the day we will approach

1455
01:02:00,400 --> 01:02:03,920
a real exhaustion of ipv4

1456
01:02:03,920 --> 01:02:07,359
addresses the use of

1457
01:02:07,359 --> 01:02:10,720
an ipv4 address for an enterprise will

1458
01:02:10,720 --> 01:02:14,799
turn into a fee to be paid

1459
01:02:15,760 --> 01:02:17,680
then we have industrial internet for

1460
01:02:17,680 --> 01:02:21,839
sure ipv6 is envisioned as a

1461
01:02:21,839 --> 01:02:25,039
key foundation for connectivity

1462
01:02:25,039 --> 01:02:28,160
probably there is work to be done to

1463
01:02:28,160 --> 01:02:31,200
make people more aware of the

1464
01:02:31,200 --> 01:02:34,400
potentiality of ipv6 mainly in the

1465
01:02:34,400 --> 01:02:38,559
application development side and

1466
01:02:38,559 --> 01:02:42,799
i will move to the next slide please

1467
01:02:43,599 --> 01:02:49,440
where we added some considerations for

1468
01:02:49,440 --> 01:02:52,160
industrial iot which is quite similar to

1469
01:02:52,160 --> 01:02:53,920
the previous one so

1470
01:02:53,920 --> 01:02:57,440
once again ipv6 could be

1471
01:02:57,440 --> 01:03:00,839
leveraged for the characteristics to

1472
01:03:00,839 --> 01:03:02,400
provide

1473
01:03:02,400 --> 01:03:04,799
automated configuration or configuration

1474
01:03:04,799 --> 01:03:06,079
less

1475
01:03:06,079 --> 01:03:09,200
say capability but once again there are

1476
01:03:09,200 --> 01:03:11,599
issues to be investigated and then we

1477
01:03:11,599 --> 01:03:12,880
have a final

1478
01:03:12,880 --> 01:03:16,319
section on government and regulators

1479
01:03:16,319 --> 01:03:19,760
and in dealing with this topic we try to

1480
01:03:19,760 --> 01:03:20,480
summarize

1481
01:03:20,480 --> 01:03:23,839
our findings with a motto stimulate if

1482
01:03:23,839 --> 01:03:24,400
you can

1483
01:03:24,400 --> 01:03:27,760
and regulate if you must uh why that

1484
01:03:27,760 --> 01:03:28,960
because we have looked at

1485
01:03:28,960 --> 01:03:33,200
some countries mainly the european

1486
01:03:33,200 --> 01:03:36,000
union area where we have some countries

1487
01:03:36,000 --> 01:03:36,720
where

1488
01:03:36,720 --> 01:03:39,599
the local authorities the local

1489
01:03:39,599 --> 01:03:42,400
regulators

1490
01:03:42,400 --> 01:03:45,440
did a good job in supporting ipv6

1491
01:03:45,440 --> 01:03:47,440
so we have examples in belgium france

1492
01:03:47,440 --> 01:03:48,559
and germany

1493
01:03:48,559 --> 01:03:50,880
which are quite ahead of the other

1494
01:03:50,880 --> 01:03:52,000
countries

1495
01:03:52,000 --> 01:03:55,359
in terms of ipv6 adoption and a good

1496
01:03:55,359 --> 01:03:57,039
example and i'm going to

1497
01:03:57,039 --> 01:04:00,319
close my presentation here um comes from

1498
01:04:00,319 --> 01:04:02,319
arsepe which is the french

1499
01:04:02,319 --> 01:04:05,359
national regulator that mandated

1500
01:04:05,359 --> 01:04:08,559
the obligation for the operators

1501
01:04:08,559 --> 01:04:12,240
awarded with a 5g license

1502
01:04:12,240 --> 01:04:14,960
the the obligation to implement to

1503
01:04:14,960 --> 01:04:15,520
support

1504
01:04:15,520 --> 01:04:18,559
ipv6 there are some reasons that rcep

1505
01:04:18,559 --> 01:04:22,079
provided to let's say

1506
01:04:22,079 --> 01:04:24,960
motivate this choice but basically they

1507
01:04:24,960 --> 01:04:26,160
pointed out that

1508
01:04:26,160 --> 01:04:28,559
this is important not only to support

1509
01:04:28,559 --> 01:04:30,000
future applications but

1510
01:04:30,000 --> 01:04:33,359
also to avoid let's say any

1511
01:04:33,359 --> 01:04:37,280
hurdle or barrier to new entrants

1512
01:04:37,280 --> 01:04:41,119
in the market so something could be also

1513
01:04:41,119 --> 01:04:43,039
taken from that just to elaborate you

1514
01:04:43,039 --> 01:04:43,599
know

1515
01:04:43,599 --> 01:04:46,880
more actions to answer to the

1516
01:04:46,880 --> 01:04:50,240
issue of further pushing ipv6

1517
01:04:50,240 --> 01:04:53,520
so that if we can move to the next

1518
01:04:53,520 --> 01:04:55,440
slide which is the last one of my

1519
01:04:55,440 --> 01:04:58,240
presentation

1520
01:05:00,160 --> 01:05:04,480
next steps so for sure we are open to

1521
01:05:04,480 --> 01:05:06,880
listen to the community if there is

1522
01:05:06,880 --> 01:05:08,000
anything missing

1523
01:05:08,000 --> 01:05:11,599
we are available to consider more topics

1524
01:05:11,599 --> 01:05:15,760
try to put more considerations in favor

1525
01:05:15,760 --> 01:05:17,520
of ipv6

1526
01:05:17,520 --> 01:05:20,640
uh for sure and i'm echoing

1527
01:05:20,640 --> 01:05:22,480
what fred suggested at the beginning of

1528
01:05:22,480 --> 01:05:23,760
the sessions

1529
01:05:23,760 --> 01:05:26,640
ipv4 exhaustion could be also debated i

1530
01:05:26,640 --> 01:05:28,160
think it's the

1531
01:05:28,160 --> 01:05:32,240
hot topic that we have to deal with

1532
01:05:32,240 --> 01:05:36,160
and i'm pretty sure that more incentives

1533
01:05:36,160 --> 01:05:39,680
could be added to the draft and more

1534
01:05:39,680 --> 01:05:41,599
could be also included in the

1535
01:05:41,599 --> 01:05:42,799
discussions

1536
01:05:42,799 --> 01:05:45,760
uh clearly we are open to contributors

1537
01:05:45,760 --> 01:05:46,480
and

1538
01:05:46,480 --> 01:05:50,240
as said we

1539
01:05:50,240 --> 01:05:52,960
welcome any comments that could be

1540
01:05:52,960 --> 01:05:54,240
provided

1541
01:05:54,240 --> 01:05:58,959
so this is all thank you

1542
01:05:59,839 --> 01:06:05,039
okay thank you um

1543
01:06:05,039 --> 01:06:09,280
let me uh do people want to

1544
01:06:09,280 --> 01:06:11,839
jump in the queue to say something we

1545
01:06:11,839 --> 01:06:12,880
have a few minutes

1546
01:06:12,880 --> 01:06:15,200
left during this session during which we

1547
01:06:15,200 --> 01:06:18,720
can have a q a

1548
01:06:18,720 --> 01:06:21,200
fred could you put me in the queue yeah

1549
01:06:21,200 --> 01:06:23,680
well go ahead

1550
01:06:23,680 --> 01:06:27,839
okay uh no hats on a couple questions

1551
01:06:27,839 --> 01:06:30,000
um a couple things that would motivate

1552
01:06:30,000 --> 01:06:32,880
the deployment of ipv6 is an increase in

1553
01:06:32,880 --> 01:06:35,839
the price of ipv4 addresses

1554
01:06:35,839 --> 01:06:38,480
and an emergence of a part of the

1555
01:06:38,480 --> 01:06:42,079
internet that is ipv6 only

1556
01:06:42,079 --> 01:06:44,000
have we seen a steady increase in the

1557
01:06:44,000 --> 01:06:45,359
price of ipv4

1558
01:06:45,359 --> 01:06:48,400
addresses and do we see any ipv6 only

1559
01:06:48,400 --> 01:06:51,760
islands of the internet yet

1560
01:06:52,079 --> 01:06:54,240
well the answer to both of those

1561
01:06:54,240 --> 01:06:55,839
questions is yes

1562
01:06:55,839 --> 01:06:58,960
uh if you go to i think it's ipv4

1563
01:06:58,960 --> 01:07:02,880
market dot com uh they are essentially a

1564
01:07:02,880 --> 01:07:04,319
um

1565
01:07:04,319 --> 01:07:08,720
a uh if addresses were real estate they

1566
01:07:08,720 --> 01:07:10,480
would be a real estate agent

1567
01:07:10,480 --> 01:07:13,839
that they connect a buyer and a seller

1568
01:07:13,839 --> 01:07:16,240
and they have an interesting graphic in

1569
01:07:16,240 --> 01:07:17,200
which they look

1570
01:07:17,200 --> 01:07:20,240
at the price of an ipv4 address

1571
01:07:20,240 --> 01:07:23,119
which when that market first started was

1572
01:07:23,119 --> 01:07:24,000
around

1573
01:07:24,000 --> 01:07:27,520
14 or maybe 12 dollars an address

1574
01:07:27,520 --> 01:07:29,920
and is now at about twenty dollars an

1575
01:07:29,920 --> 01:07:30,559
address

1576
01:07:30,559 --> 01:07:33,520
um and you know i i would suggest you

1577
01:07:33,520 --> 01:07:34,480
look at that

1578
01:07:34,480 --> 01:07:38,640
uh graphic uh we have seen an increase

1579
01:07:38,640 --> 01:07:39,599
in the price

1580
01:07:39,599 --> 01:07:43,359
of an ipv4 address

1581
01:07:43,359 --> 01:07:47,599
and you know geo

1582
01:07:47,599 --> 01:07:50,640
that spoke to us last month or

1583
01:07:50,640 --> 01:07:54,799
at the last meeting talked about

1584
01:07:54,799 --> 01:07:58,079
having a number of different services up

1585
01:07:58,079 --> 01:08:01,119
all except one were ipv6 only

1586
01:08:01,119 --> 01:08:03,920
so yes there's at least that one island

1587
01:08:03,920 --> 01:08:06,960
of ipv6 only capabilities

1588
01:08:06,960 --> 01:08:10,079
um and i believe jen might tell you

1589
01:08:10,079 --> 01:08:12,720
that uh within her company at least part

1590
01:08:12,720 --> 01:08:15,280
of it is ipv6 only that's been a big

1591
01:08:15,280 --> 01:08:18,000
project at first and she talked about it

1592
01:08:18,000 --> 01:08:21,920
uh so yes we have some islands of ipv6

1593
01:08:21,920 --> 01:08:24,880
only capability

1594
01:08:24,880 --> 01:08:26,640
so i should call my wealth advisor

1595
01:08:26,640 --> 01:08:28,719
immediately and have him invest in ipv4

1596
01:08:28,719 --> 01:08:30,960
addresses

1597
01:08:30,960 --> 01:08:33,520
just kidding

1598
01:08:36,158 --> 01:08:40,238
okay any other comments

1599
01:08:42,880 --> 01:08:47,520
failing that let's move on to um

1600
01:08:47,759 --> 01:08:50,880
the discussion of the rto dependent flow

1601
01:08:50,880 --> 01:08:52,319
label generation

1602
01:08:52,319 --> 01:08:55,839
alexander are you around

1603
01:08:57,520 --> 01:09:01,120
okay okay so

1604
01:09:01,120 --> 01:09:21,839
you're on hang on just a second yeah

1605
01:09:30,238 --> 01:09:35,839
um yes this one

1606
01:09:36,399 --> 01:09:40,960
okay great uh so

1607
01:09:40,960 --> 01:09:42,880
good evening everybody my name is

1608
01:09:42,880 --> 01:09:45,198
alexander azimov i work for yandex

1609
01:09:45,198 --> 01:09:48,560
and today i'm going to discuss with you

1610
01:09:48,560 --> 01:09:50,960
flow label as it's on this as you can

1611
01:09:50,960 --> 01:09:52,560
see it's on the slide

1612
01:09:52,560 --> 01:09:55,679
uh it's a relation to the tcp circuit

1613
01:09:55,679 --> 01:09:56,640
hash

1614
01:09:56,640 --> 01:10:00,000
and what is in the itf documents and

1615
01:10:00,000 --> 01:10:00,480
what is

1616
01:10:00,480 --> 01:10:03,840
really in the linux you know so next

1617
01:10:03,840 --> 01:10:06,480
slide please

1618
01:10:09,440 --> 01:10:12,880
so if you ask data tracker

1619
01:10:12,880 --> 01:10:15,679
about flow label it will give you this

1620
01:10:15,679 --> 01:10:16,080
kind

1621
01:10:16,080 --> 01:10:20,320
of response so these all rfcs that

1622
01:10:20,320 --> 01:10:23,520
have flow label in its naming

1623
01:10:23,520 --> 01:10:26,400
not all of these rfcs are related to

1624
01:10:26,400 --> 01:10:28,480
flow label generation

1625
01:10:28,480 --> 01:10:31,679
but some of them do

1626
01:10:31,679 --> 01:10:34,159
are related some of them even look

1627
01:10:34,159 --> 01:10:35,360
obsolete

1628
01:10:35,360 --> 01:10:38,960
and i'm going to make a quick recap

1629
01:10:38,960 --> 01:10:42,080
about uh key statements

1630
01:10:42,080 --> 01:10:46,960
in these rfcs next slide please

1631
01:10:51,280 --> 01:10:54,640
so these two documents discuss

1632
01:10:54,640 --> 01:10:57,679
application of both stateful and

1633
01:10:57,679 --> 01:10:58,320
stateless

1634
01:10:58,320 --> 01:11:01,760
use cases on the slides there are few

1635
01:11:01,760 --> 01:11:04,480
quotes that i'd like to highlight the

1636
01:11:04,480 --> 01:11:06,560
first clearly states that the flow

1637
01:11:06,560 --> 01:11:09,199
is connected but not necessarily mapped

1638
01:11:09,199 --> 01:11:10,000
one-to-one

1639
01:11:10,000 --> 01:11:14,400
to transport connection uh

1640
01:11:14,400 --> 01:11:17,679
it also states that non-zero flow label

1641
01:11:17,679 --> 01:11:21,679
uh should not be changed by metal boxes

1642
01:11:21,679 --> 01:11:24,400
and though the filter is unprotected uh

1643
01:11:24,400 --> 01:11:25,360
the flow label

1644
01:11:25,360 --> 01:11:28,159
must not be used alone in the hash

1645
01:11:28,159 --> 01:11:28,880
function

1646
01:11:28,880 --> 01:11:31,520
during loud balancing the second part of

1647
01:11:31,520 --> 01:11:32,640
this document

1648
01:11:32,640 --> 01:11:35,920
discusses the use of the flow label as a

1649
01:11:35,920 --> 01:11:39,520
kind of network function similar for

1650
01:11:39,520 --> 01:11:42,880
what we really have in mpls these days

1651
01:11:42,880 --> 01:11:44,239
so we will have in

1652
01:11:44,239 --> 01:11:47,440
uh a cycle six seven plus and

1653
01:11:47,440 --> 01:11:55,839
let's move to the next slide

1654
01:11:57,040 --> 01:12:00,880
uh this document further discusses

1655
01:12:00,880 --> 01:12:04,880
the use of flow label as

1656
01:12:04,880 --> 01:12:08,239
packet classification uh

1657
01:12:08,239 --> 01:12:11,040
this kind of use case brings a lot of

1658
01:12:11,040 --> 01:12:12,960
complications and technical

1659
01:12:12,960 --> 01:12:16,239
requirements uh it requires to keep

1660
01:12:16,239 --> 01:12:19,120
flow label stage at the routers it

1661
01:12:19,120 --> 01:12:20,320
requires

1662
01:12:20,320 --> 01:12:22,719
uh special processing of unknown flow

1663
01:12:22,719 --> 01:12:24,719
labels of course this requires a garbage

1664
01:12:24,719 --> 01:12:25,600
collector

1665
01:12:25,600 --> 01:12:28,640
and also from this document it starts

1666
01:12:28,640 --> 01:12:33,199
uh it's of course required that

1667
01:12:33,199 --> 01:12:36,320
flow label must be fixed for

1668
01:12:36,320 --> 01:12:40,400
the uh transport connection

1669
01:12:40,400 --> 01:12:42,080
so it's a slightly different in

1670
01:12:42,080 --> 01:12:43,920
statements from the previous one

1671
01:12:43,920 --> 01:12:47,120
and what is important that

1672
01:12:47,120 --> 01:12:51,040
this document is 10 years old

1673
01:12:51,040 --> 01:12:54,640
and i believe that with high

1674
01:12:54,640 --> 01:12:57,600
confidence we can

1675
01:12:58,000 --> 01:13:01,360
say that there is no this kind of

1676
01:13:01,360 --> 01:13:02,239
deployment

1677
01:13:02,239 --> 01:13:05,760
so nobody in a real network is using

1678
01:13:05,760 --> 01:13:08,800
flow label uh as uh

1679
01:13:08,800 --> 01:13:12,239
for package classification at least i'm

1680
01:13:12,239 --> 01:13:13,280
not aware of it

1681
01:13:13,280 --> 01:13:18,560
maybe i'm wrong uh next slide please

1682
01:13:18,560 --> 01:13:23,000
and finally rfc

1683
01:13:23,000 --> 01:13:26,000
6438

1684
01:13:27,360 --> 01:13:30,560
tries to put the final dot to the

1685
01:13:30,560 --> 01:13:33,760
argument about if it's good to use

1686
01:13:33,760 --> 01:13:37,600
a stateful or stateless flow label

1687
01:13:37,600 --> 01:13:40,560
and so it's clearly states that flow

1688
01:13:40,560 --> 01:13:41,199
label

1689
01:13:41,199 --> 01:13:45,199
should be used in status allowed

1690
01:13:45,199 --> 01:13:49,040
distribution and it highlights

1691
01:13:49,040 --> 01:13:52,480
that uh you cannot rely

1692
01:13:52,480 --> 01:13:56,000
for at flow label as end to end signal

1693
01:13:56,000 --> 01:13:59,199
because it may be change

1694
01:13:59,199 --> 01:14:02,880
in the path so stateful uses of

1695
01:14:02,880 --> 01:14:07,440
flow label are not recommended at least

1696
01:14:07,440 --> 01:14:10,400
and next slide please

1697
01:14:12,640 --> 01:14:15,840
the next document expands the use of

1698
01:14:15,840 --> 01:14:18,000
flow label in a stateless allowed

1699
01:14:18,000 --> 01:14:19,040
balancing uh

1700
01:14:19,040 --> 01:14:22,960
uh mainly focusing uh ipv6 tunnels such

1701
01:14:22,960 --> 01:14:24,000
as a gre

1702
01:14:24,000 --> 01:14:27,600
or ibm in ap tunnels and uh

1703
01:14:27,600 --> 01:14:31,040
in current world it's also of course

1704
01:14:31,040 --> 01:14:35,920
related to ipv exactly six

1705
01:14:36,400 --> 01:14:43,360
and next slide please

1706
01:14:43,360 --> 01:14:46,560
so this is the last rfc that is

1707
01:14:46,560 --> 01:14:49,120
related to flow label generation it and

1708
01:14:49,120 --> 01:14:50,320
it is a bit

1709
01:14:50,320 --> 01:14:54,000
uh out of the line in this document

1710
01:14:54,000 --> 01:14:57,360
it is suggested to used to use flow

1711
01:14:57,360 --> 01:14:58,159
label

1712
01:14:58,159 --> 01:15:01,360
in stateful loud balancing but not at

1713
01:15:01,360 --> 01:15:04,560
the the level of routers but at the

1714
01:15:04,560 --> 01:15:06,480
level of

1715
01:15:06,480 --> 01:15:08,840
normally we call it layer 4 loud

1716
01:15:08,840 --> 01:15:11,840
balances

1717
01:15:12,080 --> 01:15:15,199
it gets the same restrictions for the

1718
01:15:15,199 --> 01:15:16,000
flow

1719
01:15:16,000 --> 01:15:18,960
label so it's again asked to make it fix

1720
01:15:18,960 --> 01:15:20,960
it for the

1721
01:15:20,960 --> 01:15:23,760
transport connection the purpose of this

1722
01:15:23,760 --> 01:15:24,960
document is

1723
01:15:24,960 --> 01:15:28,000
it tries to address

1724
01:15:29,040 --> 01:15:32,239
fragmentation of course but

1725
01:15:32,239 --> 01:15:38,480
in reality

1726
01:15:38,480 --> 01:15:41,679
uh it again realize that flow label

1727
01:15:41,679 --> 01:15:44,080
is immutable it is not correct and it

1728
01:15:44,080 --> 01:15:46,000
was discussed in previous documents

1729
01:15:46,000 --> 01:15:49,520
and these make some questions about

1730
01:15:49,520 --> 01:15:52,880
this one and it also

1731
01:15:52,880 --> 01:15:56,080
uh creates a gap in this insecurity

1732
01:15:56,080 --> 01:15:59,280
it's gives away for uh fragment or

1733
01:15:59,280 --> 01:16:00,960
fragment floating

1734
01:16:00,960 --> 01:16:04,640
uh so and more than this

1735
01:16:04,640 --> 01:16:07,760
as we will discuss further uh if

1736
01:16:07,760 --> 01:16:10,320
anybody have deployed such a system they

1737
01:16:10,320 --> 01:16:11,760
should have experienced

1738
01:16:11,760 --> 01:16:15,520
problems with linux boxes

1739
01:16:15,520 --> 01:16:17,600
for as far as i know there is no such

1740
01:16:17,600 --> 01:16:19,440
deployments at the moment

1741
01:16:19,440 --> 01:16:23,120
so this is a very short uh

1742
01:16:23,120 --> 01:16:26,800
summarize on about what is

1743
01:16:26,800 --> 01:16:29,520
uh stated in iitf documents about flow

1744
01:16:29,520 --> 01:16:30,239
level

1745
01:16:30,239 --> 01:16:33,600
let's take a look about

1746
01:16:33,600 --> 01:16:36,400
a linear kernel deployment related to

1747
01:16:36,400 --> 01:16:37,120
flow label

1748
01:16:37,120 --> 01:16:41,440
but not limited to it next slide please

1749
01:16:44,800 --> 01:16:49,440
so it was uh 2014 when

1750
01:16:49,440 --> 01:16:52,880
the support for flow label generation uh

1751
01:16:52,880 --> 01:16:56,159
based on the tcp hash was added in the

1752
01:16:56,159 --> 01:16:59,360
linux kernel it was mainly addressing

1753
01:16:59,360 --> 01:17:03,360
the rfc 6438 so it's not about

1754
01:17:03,360 --> 01:17:06,880
flow label only it's about any kind of

1755
01:17:06,880 --> 01:17:10,080
encapsulation and we will get back to

1756
01:17:10,080 --> 01:17:11,040
this

1757
01:17:11,040 --> 01:17:17,840
a bit later next slide

1758
01:17:21,840 --> 01:17:25,040
but next year happens a very important

1759
01:17:25,040 --> 01:17:28,960
change in the logic of generation

1760
01:17:28,960 --> 01:17:32,000
uh sp hash and

1761
01:17:32,000 --> 01:17:35,760
respect of the uh flow label

1762
01:17:35,760 --> 01:17:40,480
it says that cp hash is recalculated

1763
01:17:40,480 --> 01:17:43,040
after negative routing event what is

1764
01:17:43,040 --> 01:17:44,560
negative route in your end

1765
01:17:44,560 --> 01:17:48,239
normally we we are used to

1766
01:17:48,239 --> 01:17:53,199
to know it as a rto timeout

1767
01:17:53,199 --> 01:17:56,960
and so this is very different

1768
01:17:56,960 --> 01:18:00,159
from what is in the itf documents so

1769
01:18:00,159 --> 01:18:03,440
uh this makes the tcp uh

1770
01:18:03,440 --> 01:18:06,480
hash may be changed during

1771
01:18:06,480 --> 01:18:09,440
the lifetime of tcp connection and flow

1772
01:18:09,440 --> 01:18:09,840
label

1773
01:18:09,840 --> 01:18:13,840
may also be changed next slide please

1774
01:18:18,880 --> 01:18:21,040
the next year this solution is further

1775
01:18:21,040 --> 01:18:22,080
strengthened

1776
01:18:22,080 --> 01:18:25,760
and now the hash

1777
01:18:25,760 --> 01:18:28,800
is recalculated upon each

1778
01:18:28,800 --> 01:18:32,080
scene audio or

1779
01:18:32,080 --> 01:18:34,800
any kind of or just standard rto

1780
01:18:34,800 --> 01:18:35,520
timeouts

1781
01:18:35,520 --> 01:18:39,199
so if we are losing scene packet the

1782
01:18:39,199 --> 01:18:42,560
hash value is changed if we uh

1783
01:18:42,560 --> 01:18:45,120
have rto timeout uh during lifetime of

1784
01:18:45,120 --> 01:18:46,400
tcp session

1785
01:18:46,400 --> 01:18:49,520
uh hash is changed and so respectively

1786
01:18:49,520 --> 01:18:52,560
flow label is changed why it is that

1787
01:18:52,560 --> 01:18:53,520
important

1788
01:18:53,520 --> 01:18:57,360
what is the problem that was

1789
01:18:57,360 --> 01:18:59,679
these changes were addressing next slide

1790
01:18:59,679 --> 01:19:01,920
please

1791
01:19:07,600 --> 01:19:10,800
imagine that you have two

1792
01:19:10,800 --> 01:19:13,600
hots that are trying to establish uh tcp

1793
01:19:13,600 --> 01:19:15,920
connection between between each other

1794
01:19:15,920 --> 01:19:19,120
and uh for example these hosts may be

1795
01:19:19,120 --> 01:19:22,159
in data center they may not but

1796
01:19:22,159 --> 01:19:25,280
anyway so the outage

1797
01:19:25,280 --> 01:19:28,239
happens on one of the paths that may be

1798
01:19:28,239 --> 01:19:29,040
used by

1799
01:19:29,040 --> 01:19:32,159
these hosts so in this case

1800
01:19:32,159 --> 01:19:35,520
let's say that there is an outage on the

1801
01:19:35,520 --> 01:19:39,920
device as one and then the scene packet

1802
01:19:39,920 --> 01:19:43,040
that was sent from t1 to d2

1803
01:19:43,040 --> 01:19:46,320
was lost in this case

1804
01:19:46,320 --> 01:19:50,880
according to the linux kernel uh

1805
01:19:50,880 --> 01:19:54,000
the hash will be changed and so flow

1806
01:19:54,000 --> 01:19:54,480
label

1807
01:19:54,480 --> 01:19:58,159
will be changed and to redirect

1808
01:19:58,159 --> 01:20:00,960
the second uh scene uh that will be sent

1809
01:20:00,960 --> 01:20:02,560
from the one host to another

1810
01:20:02,560 --> 01:20:06,000
to another path one need only

1811
01:20:06,000 --> 01:20:08,480
only one thing we need to enable flow

1812
01:20:08,480 --> 01:20:09,360
label hashing

1813
01:20:09,360 --> 01:20:12,480
on the in in-dress device in this case

1814
01:20:12,480 --> 01:20:13,199
it says

1815
01:20:13,199 --> 01:20:15,678
t1

1816
01:20:16,239 --> 01:20:21,199
this will uh give you a chance to uh

1817
01:20:21,440 --> 01:20:24,320
give it tcp a fantastic property so in

1818
01:20:24,320 --> 01:20:24,880
case of

1819
01:20:24,880 --> 01:20:28,000
outage on one part it will jump

1820
01:20:28,000 --> 01:20:30,080
to another the more alternative

1821
01:20:30,080 --> 01:20:31,440
alternative path

1822
01:20:31,440 --> 01:20:34,080
paths you have the high is the chance

1823
01:20:34,080 --> 01:20:34,639
that

1824
01:20:34,639 --> 01:20:38,159
your services will not

1825
01:20:38,159 --> 01:20:41,840
be affected by the network outage

1826
01:20:41,840 --> 01:20:47,840
next like this

1827
01:20:48,560 --> 01:20:51,679
so this is an experiment

1828
01:20:51,679 --> 01:20:54,880
that was run in a production network

1829
01:20:54,880 --> 01:20:58,320
of yandex uh we

1830
01:20:58,320 --> 01:21:01,600
took a top-of-rack switch which had

1831
01:21:01,600 --> 01:21:05,199
four uplinks and on one of their uplinks

1832
01:21:05,199 --> 01:21:08,560
we created a packet loss so it was

1833
01:21:08,560 --> 01:21:10,000
just dropping all the traffic that was

1834
01:21:10,000 --> 01:21:11,760
going through this

1835
01:21:11,760 --> 01:21:15,120
link and you can see

1836
01:21:15,120 --> 01:21:18,560
on the left side uh the the

1837
01:21:18,560 --> 01:21:21,760
data from our uh data plane monitoring

1838
01:21:21,760 --> 01:21:23,679
and it just says that we are losing

1839
01:21:23,679 --> 01:21:24,960
twenty

1840
01:21:24,960 --> 01:21:28,239
five percent of packets that are

1841
01:21:28,239 --> 01:21:31,360
distance to these top of rex

1842
01:21:31,360 --> 01:21:34,719
switch on the right side you can see the

1843
01:21:34,719 --> 01:21:35,760
disruption

1844
01:21:35,760 --> 01:21:37,940
that happens to

1845
01:21:37,940 --> 01:21:39,280
[Music]

1846
01:21:39,280 --> 01:21:43,360
services inside this switch and just to

1847
01:21:43,360 --> 01:21:48,880
mention it says network ipv6 only

1848
01:21:48,960 --> 01:21:56,719
next slide please

1849
01:21:56,719 --> 01:22:00,159
now we enabled a flow label

1850
01:22:00,159 --> 01:22:03,199
uh hashing on this top of rack switch

1851
01:22:03,199 --> 01:22:06,719
and reproduced our experiment

1852
01:22:06,719 --> 01:22:10,080
on the left side you can see that the

1853
01:22:10,080 --> 01:22:12,320
data plane monitoring is just the same

1854
01:22:12,320 --> 01:22:14,320
because it's not aware of tcp it just

1855
01:22:14,320 --> 01:22:15,679
sends packets and so

1856
01:22:15,679 --> 01:22:18,960
it's uh still sees

1857
01:22:18,960 --> 01:22:22,080
25 percent of packet loss but on the

1858
01:22:22,080 --> 01:22:23,679
right side

1859
01:22:23,679 --> 01:22:26,560
there is no effect so the services in

1860
01:22:26,560 --> 01:22:27,199
inside

1861
01:22:27,199 --> 01:22:30,560
this wreck were not aware that something

1862
01:22:30,560 --> 01:22:33,440
bad happened to the network of course

1863
01:22:33,440 --> 01:22:34,000
you need

1864
01:22:34,000 --> 01:22:37,920
to make some additional uh

1865
01:22:37,920 --> 01:22:39,440
configurations you need to

1866
01:22:39,440 --> 01:22:42,560
change values of rto timeouts

1867
01:22:42,560 --> 01:22:46,480
but it will not be possible without

1868
01:22:46,480 --> 01:22:49,840
these changes of a flow label during

1869
01:22:49,840 --> 01:22:52,639
anticipation lifetime

1870
01:22:52,639 --> 01:22:55,360
next slide please

1871
01:22:58,639 --> 01:23:01,280
and as we discussed it's not only flow

1872
01:23:01,280 --> 01:23:02,800
label

1873
01:23:02,800 --> 01:23:06,159
it's a tcp hash uh

1874
01:23:06,159 --> 01:23:10,880
the changes and there are dependencies

1875
01:23:10,880 --> 01:23:14,239
for for this tcp hash in a linux kernel

1876
01:23:14,239 --> 01:23:17,360
so it's flow label it's and every other

1877
01:23:17,360 --> 01:23:17,920
kind

1878
01:23:17,920 --> 01:23:21,040
of encapsulation for example uh upon

1879
01:23:21,040 --> 01:23:24,080
rto it's the key fields in

1880
01:23:24,080 --> 01:23:26,159
gerry will be changed it will change

1881
01:23:26,159 --> 01:23:28,000
also source

1882
01:23:28,000 --> 01:23:31,040
port in the edp encapsulation and if for

1883
01:23:31,040 --> 01:23:32,639
example you will use

1884
01:23:32,639 --> 01:23:35,360
any kind of ipv6 encapsulation it will

1885
01:23:35,360 --> 01:23:36,480
also affect

1886
01:23:36,480 --> 01:23:40,719
the flow label of the outer header

1887
01:23:40,719 --> 01:23:43,199
next slide

1888
01:23:46,840 --> 01:23:50,960
and by the way it's a linux default

1889
01:23:50,960 --> 01:23:54,480
so the default behavior is

1890
01:23:54,480 --> 01:23:57,679
to use this kind of uh flow label

1891
01:23:57,679 --> 01:24:01,360
generation so

1892
01:24:01,360 --> 01:24:04,480
uh at the moment we have

1893
01:24:04,480 --> 01:24:08,639
some linux kernel developers that

1894
01:24:08,639 --> 01:24:12,400
uh enriched uh tcp of

1895
01:24:12,400 --> 01:24:16,080
ipv6 it works only on on top of ipv6

1896
01:24:16,080 --> 01:24:18,239
it's not working for ipv4 of course

1897
01:24:18,239 --> 01:24:22,239
uh enriched it with self-healing

1898
01:24:22,239 --> 01:24:26,239
capability but if it was

1899
01:24:26,239 --> 01:24:29,600
all that great i would not have created

1900
01:24:29,600 --> 01:24:30,719
these slides

1901
01:24:30,719 --> 01:24:34,880
and you won't be suffering from

1902
01:24:34,880 --> 01:24:40,159
my russian accent next slide please

1903
01:24:43,679 --> 01:24:46,480
there is a side effect uh the side

1904
01:24:46,480 --> 01:24:47,040
effect

1905
01:24:47,040 --> 01:24:50,639
happens if uh

1906
01:24:50,800 --> 01:24:54,800
the user uh

1907
01:24:54,800 --> 01:24:57,920
changes the flow label and

1908
01:24:57,920 --> 01:24:59,840
on the other side if there is a state

1909
01:24:59,840 --> 01:25:02,800
for any cost without a sharing state

1910
01:25:02,800 --> 01:25:08,000
for example if we have a tcp proxy

1911
01:25:08,000 --> 01:25:11,600
and the user changes a flow label from

1912
01:25:11,600 --> 01:25:14,800
each side it may result that

1913
01:25:14,800 --> 01:25:17,760
the following packets will be delivered

1914
01:25:17,760 --> 01:25:18,800
to another device

1915
01:25:18,800 --> 01:25:21,840
that will not have uh tcp state and it

1916
01:25:21,840 --> 01:25:23,280
will respond

1917
01:25:23,280 --> 01:25:26,400
with a rst or you will not respond at

1918
01:25:26,400 --> 01:25:26,719
all

1919
01:25:26,719 --> 01:25:30,239
so the results of this kind of situation

1920
01:25:30,239 --> 01:25:31,280
will be as

1921
01:25:31,280 --> 01:25:33,840
normally session timeout uh

1922
01:25:33,840 --> 01:25:34,639
unfortunately

1923
01:25:34,639 --> 01:25:38,000
we faced this kind of scenario for our

1924
01:25:38,000 --> 01:25:38,840
users

1925
01:25:38,840 --> 01:25:41,840
and

1926
01:25:42,080 --> 01:25:45,199
as an ad hoc we had to switch

1927
01:25:45,199 --> 01:25:48,719
off flow label balancing at our board

1928
01:25:48,719 --> 01:25:50,320
routers

1929
01:25:50,320 --> 01:25:53,600
unfortunately it was helpful only

1930
01:25:53,600 --> 01:25:56,880
in a subset of cases so

1931
01:25:56,880 --> 01:25:59,600
next slide please

1932
01:26:06,560 --> 01:26:10,880
the good thing that it can be fixed

1933
01:26:10,880 --> 01:26:14,080
so uh

1934
01:26:15,199 --> 01:26:17,280
normally we have two sides of tcp

1935
01:26:17,280 --> 01:26:18,400
session we have client

1936
01:26:18,400 --> 01:26:20,320
that's unseen we have several that are

1937
01:26:20,320 --> 01:26:21,440
responsible with

1938
01:26:21,440 --> 01:26:24,560
synagogue and this kind of

1939
01:26:24,560 --> 01:26:27,600
problem can occur only

1940
01:26:27,600 --> 01:26:30,639
uh on the side of the client

1941
01:26:30,639 --> 01:26:33,920
and so we can keep the behavior

1942
01:26:33,920 --> 01:26:37,280
uh of the server

1943
01:26:37,679 --> 01:26:40,480
as it is it is now in the linux kernel

1944
01:26:40,480 --> 01:26:40,960
so

1945
01:26:40,960 --> 01:26:44,000
the server uh can

1946
01:26:44,000 --> 01:26:47,040
recalculate its tcp hash and thus change

1947
01:26:47,040 --> 01:26:47,920
flow label

1948
01:26:47,920 --> 01:26:51,360
after each rto but on the client side

1949
01:26:51,360 --> 01:26:54,480
each should be switched by default

1950
01:26:54,480 --> 01:26:58,320
there must be a knob

1951
01:26:58,320 --> 01:27:00,480
to enable it in the controlled

1952
01:27:00,480 --> 01:27:02,239
environment because for example in data

1953
01:27:02,239 --> 01:27:02,880
centers

1954
01:27:02,880 --> 01:27:05,760
where you know where is any cast and

1955
01:27:05,760 --> 01:27:08,320
where is it just a unicast addresses

1956
01:27:08,320 --> 01:27:11,679
it's safe to use it but you should know

1957
01:27:11,679 --> 01:27:14,800
where to use it properly

1958
01:27:15,040 --> 01:27:19,840
next slide please

1959
01:27:23,840 --> 01:27:26,560
and as you see it's just in my last last

1960
01:27:26,560 --> 01:27:27,040
slide

1961
01:27:27,040 --> 01:27:31,440
and uh i'll try to summarize

1962
01:27:31,440 --> 01:27:34,000
both current stagnation and deployment

1963
01:27:34,000 --> 01:27:35,440
status

1964
01:27:35,440 --> 01:27:38,560
there are multiple rfcs related to flow

1965
01:27:38,560 --> 01:27:39,760
label generation

1966
01:27:39,760 --> 01:27:42,719
though some of them look obsolete there

1967
01:27:42,719 --> 01:27:44,560
is a non-started

1968
01:27:44,560 --> 01:27:48,639
behavior in the linux kernel

1969
01:27:48,639 --> 01:27:50,719
and maybe other operation systems i'm

1970
01:27:50,719 --> 01:27:52,880
not aware about it

1971
01:27:52,880 --> 01:27:55,760
that improves tcp connection stability

1972
01:27:55,760 --> 01:27:57,440
in case of packet loss

1973
01:27:57,440 --> 01:28:00,960
on one of the parts as for now

1974
01:28:00,960 --> 01:28:03,280
it is deployed at least at three

1975
01:28:03,280 --> 01:28:04,960
hyperscale clouds

1976
01:28:04,960 --> 01:28:07,360
unfortunately it also introduced a

1977
01:28:07,360 --> 01:28:08,000
mistake

1978
01:28:08,000 --> 01:28:11,280
that may result in a tcp session timeout

1979
01:28:11,280 --> 01:28:14,000
it can be fixed and a good thing

1980
01:28:14,000 --> 01:28:15,360
according to the discussion

1981
01:28:15,360 --> 01:28:18,320
in the mailing list it will be fixed but

1982
01:28:18,320 --> 01:28:20,320
i believe it's also important to update

1983
01:28:20,320 --> 01:28:23,199
related standards to reflect what is

1984
01:28:23,199 --> 01:28:24,159
happening in the

1985
01:28:24,159 --> 01:28:27,040
real world deployments otherwise there

1986
01:28:27,040 --> 01:28:28,000
will be a growing gap

1987
01:28:28,000 --> 01:28:31,040
between what is writing in than all 10

1988
01:28:31,040 --> 01:28:31,760
years old

1989
01:28:31,760 --> 01:28:36,000
documents and real implementations

1990
01:28:36,719 --> 01:28:43,840
that's all for me any questions

1991
01:28:52,960 --> 01:28:57,520
red got disconnected

1992
01:28:57,520 --> 01:29:00,719
okay um i can't see if there's anyone in

1993
01:29:00,719 --> 01:29:01,679
the queue

1994
01:29:01,679 --> 01:29:04,719
if i if i have a question yeah

1995
01:29:04,719 --> 01:29:07,920
i don't know if you go ahead again

1996
01:29:07,920 --> 01:29:10,320
um yeah i said this was a really really

1997
01:29:10,320 --> 01:29:11,040
good uh

1998
01:29:11,040 --> 01:29:13,520
overview of uh flow labels you know i

1999
01:29:13,520 --> 01:29:14,400
wanted to uh

2000
01:29:14,400 --> 01:29:16,719
mention i think this is a i mean you

2001
01:29:16,719 --> 01:29:19,760
know comparing like ipv4 to ipv6

2002
01:29:19,760 --> 01:29:21,440
i think that first bullet that you i

2003
01:29:21,440 --> 01:29:22,800
mean second bullet

2004
01:29:22,800 --> 01:29:24,800
you know flow leg will actively use for

2005
01:29:24,800 --> 01:29:26,719
state stateless load balancing i mean i

2006
01:29:26,719 --> 01:29:27,040
think

2007
01:29:27,040 --> 01:29:30,080
overall that's that's really a real

2008
01:29:30,080 --> 01:29:31,040
massive gain

2009
01:29:31,040 --> 01:29:35,520
like going from b4 to b6 so with with v4

2010
01:29:35,520 --> 01:29:37,760
um because there is no like there's no

2011
01:29:37,760 --> 01:29:39,920
entropy built into the v4 packet

2012
01:29:39,920 --> 01:29:43,520
no flow label um you can't do uh

2013
01:29:43,520 --> 01:29:46,480
per per flow low balancing it's versus

2014
01:29:46,480 --> 01:29:48,560
flow based load balancing so

2015
01:29:48,560 --> 01:29:51,600
every flow you know each flow is hashed

2016
01:29:51,600 --> 01:29:52,960
to an individual

2017
01:29:52,960 --> 01:29:56,560
length let's say if you have an ecmp so

2018
01:29:56,560 --> 01:29:59,520
so the the really the huge gain with uh

2019
01:29:59,520 --> 01:30:00,560
really and it's really

2020
01:30:00,560 --> 01:30:03,760
overall for ipv6 deployments uh for

2021
01:30:03,760 --> 01:30:04,880
operators that

2022
01:30:04,880 --> 01:30:08,400
if you if you if you if you move towards

2023
01:30:08,400 --> 01:30:09,440
ipv6

2024
01:30:09,440 --> 01:30:11,199
being able to take advantage of that

2025
01:30:11,199 --> 01:30:12,960
stateful load that stateless load

2026
01:30:12,960 --> 01:30:15,600
balancing is a real massive gain

2027
01:30:15,600 --> 01:30:18,159
um you know with that you know in your

2028
01:30:18,159 --> 01:30:19,760
testing that you've done

2029
01:30:19,760 --> 01:30:22,080
have you tested across different like

2030
01:30:22,080 --> 01:30:23,520
vendor boxes

2031
01:30:23,520 --> 01:30:26,400
like uh our cisco jana per arista and

2032
01:30:26,400 --> 01:30:27,280
whatnot

2033
01:30:27,280 --> 01:30:29,920
that they all support stainless load

2034
01:30:29,920 --> 01:30:30,800
balancing because

2035
01:30:30,800 --> 01:30:32,960
that that uniform load balancing that

2036
01:30:32,960 --> 01:30:34,000
you can get with that

2037
01:30:34,000 --> 01:30:36,800
with the flow label it is a massive gain

2038
01:30:36,800 --> 01:30:37,280
for

2039
01:30:37,280 --> 01:30:41,120
operators uh so

2040
01:30:41,120 --> 01:30:42,560
thank you very much for this very

2041
01:30:42,560 --> 01:30:44,239
positive comment uh

2042
01:30:44,239 --> 01:30:48,239
yes we tested label balancing on

2043
01:30:48,239 --> 01:30:51,520
different uh devices uh there were

2044
01:30:51,520 --> 01:30:52,800
devices that were not

2045
01:30:52,800 --> 01:30:55,600
working properly some of them some of

2046
01:30:55,600 --> 01:30:57,120
the vendors have already

2047
01:30:57,120 --> 01:31:00,320
uh delivered us software updates and we

2048
01:31:00,320 --> 01:31:00,960
are

2049
01:31:00,960 --> 01:31:02,719
waiting for the last of threads if there

2050
01:31:02,719 --> 01:31:04,320
are updates from

2051
01:31:04,320 --> 01:31:07,360
i cannot name the vendor uh in

2052
01:31:07,360 --> 01:31:11,280
this uh q2

2053
01:31:11,840 --> 01:31:14,880
okay is anyone else in the queue

2054
01:31:14,880 --> 01:31:18,639
uh yeah michael is uh yeah so

2055
01:31:18,639 --> 01:31:21,679
you said you you prefer to disable this

2056
01:31:21,679 --> 01:31:23,600
feature per default on the client side

2057
01:31:23,600 --> 01:31:25,120
because you may reach

2058
01:31:25,120 --> 01:31:28,719
a gcp proxy a different tcp proxy

2059
01:31:28,719 --> 01:31:31,679
so my question is if you change the flow

2060
01:31:31,679 --> 01:31:32,239
label

2061
01:31:32,239 --> 01:31:34,239
of a tcp connection on the server side

2062
01:31:34,239 --> 01:31:36,000
in the middle of a connection

2063
01:31:36,000 --> 01:31:37,440
how can you ensure that you are not

2064
01:31:37,440 --> 01:31:39,520
reaching a different middle box like

2065
01:31:39,520 --> 01:31:42,639
a firewall which

2066
01:31:42,639 --> 01:31:44,480
sees the packets and has no states from

2067
01:31:44,480 --> 01:31:46,719
before

2068
01:31:46,719 --> 01:31:49,520
so uh

2069
01:31:50,719 --> 01:31:55,120
uh speaking about uh the firewalls uh

2070
01:31:55,120 --> 01:31:57,760
they are not normally in any cast so you

2071
01:31:57,760 --> 01:31:58,239
are

2072
01:31:58,239 --> 01:32:01,600
they are on path but i'm not talking

2073
01:32:01,600 --> 01:32:02,719
about it

2074
01:32:02,719 --> 01:32:04,560
if you are heavily relying that all

2075
01:32:04,560 --> 01:32:06,480
packets of the tcp connection

2076
01:32:06,480 --> 01:32:09,600
today are coming from one path uh

2077
01:32:09,600 --> 01:32:11,520
your firewall normally will not be

2078
01:32:11,520 --> 01:32:13,280
working that good as is

2079
01:32:13,280 --> 01:32:16,800
this is possible um so if you have

2080
01:32:16,800 --> 01:32:19,920
a symmetric path and you place uh

2081
01:32:19,920 --> 01:32:22,719
a 5v for example near your gateway

2082
01:32:22,719 --> 01:32:25,440
single gateway

2083
01:32:25,440 --> 01:32:29,040
everything will be perfectly fine

2084
01:32:29,040 --> 01:32:32,159
but uh so from

2085
01:32:32,159 --> 01:32:34,400
the server server side it's at least

2086
01:32:34,400 --> 01:32:35,760
safe from the

2087
01:32:35,760 --> 01:32:38,320
client side it may result in a timeout

2088
01:32:38,320 --> 01:32:39,120
if you are

2089
01:32:39,120 --> 01:32:42,320
uploading a lot of data for through such

2090
01:32:42,320 --> 01:32:44,719
stateful anycast servers it may be some

2091
01:32:44,719 --> 01:32:46,000
proxy it may be

2092
01:32:46,000 --> 01:32:49,440
a layer for balancer without

2093
01:32:49,440 --> 01:32:52,159
uh consistent caching i'm not talking

2094
01:32:52,159 --> 01:32:53,760
about any cost

2095
01:32:53,760 --> 01:32:56,560
i'm talking about a unicast service uh

2096
01:32:56,560 --> 01:32:58,719
fireworks are

2097
01:32:58,719 --> 01:33:01,679
on a path and now one side changes the

2098
01:33:01,679 --> 01:33:02,800
flow label

2099
01:33:02,800 --> 01:33:05,199
resulting in packets taking a different

2100
01:33:05,199 --> 01:33:07,120
way through the network so

2101
01:33:07,120 --> 01:33:10,239
it might not hit the firewall

2102
01:33:10,239 --> 01:33:12,960
anymore so a new firewall might be hit

2103
01:33:12,960 --> 01:33:13,520
and

2104
01:33:13,520 --> 01:33:16,320
the connection will die so may i ask you

2105
01:33:16,320 --> 01:33:17,520
a question uh

2106
01:33:17,520 --> 01:33:20,880
in the uh what happens in this scenario

2107
01:33:20,880 --> 01:33:24,960
that you have uh described uh if uh

2108
01:33:24,960 --> 01:33:28,000
the table is changing

2109
01:33:28,000 --> 01:33:31,840
and the path to the client is changing

2110
01:33:31,840 --> 01:33:34,800
does it result in immediate uh

2111
01:33:34,800 --> 01:33:37,600
disposition interruption

2112
01:33:37,600 --> 01:33:40,239
so um

2113
01:33:41,199 --> 01:33:43,679
i'm talking about the temporary problem

2114
01:33:43,679 --> 01:33:45,520
which results in a timeout

2115
01:33:45,520 --> 01:33:47,520
and you change the routing of the

2116
01:33:47,520 --> 01:33:48,800
packets

2117
01:33:48,800 --> 01:33:51,440
yeah yeah i'm i'm talking about another

2118
01:33:51,440 --> 01:33:51,920
source

2119
01:33:51,920 --> 01:33:55,120
of uh changing path from

2120
01:33:55,120 --> 01:33:57,760
uh content provider for example and the

2121
01:33:57,760 --> 01:33:58,719
end user

2122
01:33:58,719 --> 01:34:02,480
so uh if you

2123
01:34:02,719 --> 01:34:04,880
have multiple firewalls that are

2124
01:34:04,880 --> 01:34:06,080
expected to be

2125
01:34:06,080 --> 01:34:11,280
processing the uh tcp session

2126
01:34:11,520 --> 01:34:13,760
with without uh traffic redirection i

2127
01:34:13,760 --> 01:34:15,040
think it's uh

2128
01:34:15,040 --> 01:34:18,000
already broken without any flow label

2129
01:34:18,000 --> 01:34:18,480
changing

2130
01:34:18,480 --> 01:34:20,400
and by the way label is already changing

2131
01:34:20,400 --> 01:34:21,760
so it's

2132
01:34:21,760 --> 01:34:23,920
not something that i suggest to

2133
01:34:23,920 --> 01:34:27,440
introduce it's what's happening now

2134
01:34:29,679 --> 01:34:32,880
okay um now we've only got a couple of

2135
01:34:32,880 --> 01:34:34,960
minutes left for this and then we have

2136
01:34:34,960 --> 01:34:38,320
one more talk so uh luigi you wanted to

2137
01:34:38,320 --> 01:34:39,760
say something

2138
01:34:39,760 --> 01:34:42,960
uh yes um first of all thank you for the

2139
01:34:42,960 --> 01:34:44,840
presentation it's very clear and

2140
01:34:44,840 --> 01:34:48,480
interesting um i wonder with your

2141
01:34:48,480 --> 01:34:49,360
proposal of

2142
01:34:49,360 --> 01:34:52,639
on safe mode what happens if the

2143
01:34:52,639 --> 01:34:54,800
the path is asymmetric and the problem

2144
01:34:54,800 --> 01:34:56,800
is in the let's say the uplink from the

2145
01:34:56,800 --> 01:34:58,560
client to the server

2146
01:34:58,560 --> 01:35:01,199
and in that case you you you don't have

2147
01:35:01,199 --> 01:35:03,199
the simple performance you showed with

2148
01:35:03,199 --> 01:35:06,480
this experiment where you had the 75

2149
01:35:06,480 --> 01:35:07,040
percent

2150
01:35:07,040 --> 01:35:10,480
stop right this may happen

2151
01:35:10,480 --> 01:35:14,239
yeah you're correct so um did you try to

2152
01:35:14,239 --> 01:35:15,440
do uh

2153
01:35:15,440 --> 01:35:19,119
an experiment uh

2154
01:35:19,119 --> 01:35:22,800
so uh yes we are currently running a

2155
01:35:22,800 --> 01:35:23,280
couple of

2156
01:35:23,280 --> 01:35:28,159
experiments and uh from the

2157
01:35:29,679 --> 01:35:32,480
content provider that i'm working for

2158
01:35:32,480 --> 01:35:33,600
normally

2159
01:35:33,600 --> 01:35:36,159
the biggest issues happening not on the

2160
01:35:36,159 --> 01:35:37,280
ingress side but

2161
01:35:37,280 --> 01:35:40,480
on the igra side where the

2162
01:35:40,480 --> 01:35:43,360
majority of traffic is going it's not

2163
01:35:43,360 --> 01:35:44,159
through the

2164
01:35:44,159 --> 01:35:47,520
uh it's not destined to our net network

2165
01:35:47,520 --> 01:35:50,480
it goes from our network and there are

2166
01:35:50,480 --> 01:35:52,320
the places where for example

2167
01:35:52,320 --> 01:35:57,679
congestion happens and uh

2168
01:35:57,679 --> 01:35:59,840
this value of tcp to jump from one part

2169
01:35:59,840 --> 01:36:01,199
to into another path

2170
01:36:01,199 --> 01:36:03,280
because becomes that valuable but you're

2171
01:36:03,280 --> 01:36:04,960
right that for example

2172
01:36:04,960 --> 01:36:08,080
if there is a packet loss on the forward

2173
01:36:08,080 --> 01:36:08,560
pass

2174
01:36:08,560 --> 01:36:13,920
from the client to the service provider

2175
01:36:14,080 --> 01:36:16,880
if the safe mode will limit opportunity

2176
01:36:16,880 --> 01:36:18,080
of the client to jump

2177
01:36:18,080 --> 01:36:20,159
from one path to another even if it is

2178
01:36:20,159 --> 01:36:22,480
exist

2179
01:36:23,199 --> 01:36:26,800
uh there is a trade-off so just be a

2180
01:36:26,800 --> 01:36:29,840
timeout in some kind in some situations

2181
01:36:29,840 --> 01:36:33,119
or benefits in another the safe mode

2182
01:36:33,119 --> 01:36:38,159
as i say it is a an easy fix

2183
01:36:38,159 --> 01:36:40,480
after that one can think about for a

2184
01:36:40,480 --> 01:36:42,800
kind of negotiation negotiation between

2185
01:36:42,800 --> 01:36:45,600
client and server that in which the

2186
01:36:45,600 --> 01:36:46,400
server will

2187
01:36:46,400 --> 01:36:48,639
permit client to change its flow label

2188
01:36:48,639 --> 01:36:49,840
for example if the

2189
01:36:49,840 --> 01:36:51,600
server knows that everything will be

2190
01:36:51,600 --> 01:36:52,960
fine okay

2191
01:36:52,960 --> 01:36:56,080
just do it but safe mode is from my

2192
01:36:56,080 --> 01:36:56,880
standpoint

2193
01:36:56,880 --> 01:37:00,000
is something that should be deployed in

2194
01:37:00,000 --> 01:37:02,000
first place

2195
01:37:02,000 --> 01:37:04,080
thank you i have just another quick

2196
01:37:04,080 --> 01:37:07,440
question i hope the answer is also

2197
01:37:07,440 --> 01:37:09,119
quick otherwise we take it to the list

2198
01:37:09,119 --> 01:37:12,080
maybe what happens in the context of

2199
01:37:12,080 --> 01:37:15,199
mptcp if you move past these two

2200
01:37:15,199 --> 01:37:17,199
connections

2201
01:37:17,199 --> 01:37:21,199
is the same principle that that

2202
01:37:24,880 --> 01:37:28,320
uh it's not that easy question so

2203
01:37:28,320 --> 01:37:30,400
of course okay let's take it to the list

2204
01:37:30,400 --> 01:37:32,960
maybe yeah let's

2205
01:37:32,960 --> 01:37:35,280
we let's try this this one to the list

2206
01:37:35,280 --> 01:37:36,639
okay

2207
01:37:36,639 --> 01:37:39,840
um you wanted to get in and i'll give

2208
01:37:39,840 --> 01:37:41,520
you the last word

2209
01:37:41,520 --> 01:37:44,000
and then we need to move on to fernando

2210
01:37:44,000 --> 01:37:45,040
all right thanks

2211
01:37:45,040 --> 01:37:47,040
uh i added just another quick question

2212
01:37:47,040 --> 01:37:48,560
you know because you've had

2213
01:37:48,560 --> 01:37:52,320
seemed like a lot of uh erratic results

2214
01:37:52,320 --> 01:37:54,960
with uh using state you know the

2215
01:37:54,960 --> 01:37:56,239
stateful

2216
01:37:56,239 --> 01:37:59,360
marking of the flow label is is there a

2217
01:37:59,360 --> 01:38:00,800
feature i guess you know

2218
01:38:00,800 --> 01:38:02,480
probably from an operator's standpoint

2219
01:38:02,480 --> 01:38:04,239
maybe it makes sense to like you know

2220
01:38:04,239 --> 01:38:05,920
like let's say with qos

2221
01:38:05,920 --> 01:38:07,600
you can actually have trust to like

2222
01:38:07,600 --> 01:38:08,960
trust the uh

2223
01:38:08,960 --> 01:38:10,880
flow is there a way to like remark the

2224
01:38:10,880 --> 01:38:12,400
packets on a um

2225
01:38:12,400 --> 01:38:15,360
on a switch so the flow may sort of so

2226
01:38:15,360 --> 01:38:17,440
you unmarked the packets and so the flow

2227
01:38:17,440 --> 01:38:18,800
label is not set

2228
01:38:18,800 --> 01:38:21,440
you know let's say on the um a port

2229
01:38:21,440 --> 01:38:22,880
connected to a host

2230
01:38:22,880 --> 01:38:25,520
that you can um you know keep it

2231
01:38:25,520 --> 01:38:26,719
untrusted or just

2232
01:38:26,719 --> 01:38:28,800
mark it so that it does it's not used so

2233
01:38:28,800 --> 01:38:30,400
that's so that um

2234
01:38:30,400 --> 01:38:33,040
hosts don't actually try to use stateful

2235
01:38:33,040 --> 01:38:35,119
because of the erratic behavior that you

2236
01:38:35,119 --> 01:38:37,440
can see with stateful

2237
01:38:37,440 --> 01:38:41,119
thank you uh i'll try to

2238
01:38:41,119 --> 01:38:43,199
answer this question though i can't say

2239
01:38:43,199 --> 01:38:44,960
that i've followed it

2240
01:38:44,960 --> 01:38:48,239
fully but so uh

2241
01:38:48,239 --> 01:38:50,960
we never remark flow label at the top of

2242
01:38:50,960 --> 01:38:52,320
rack switches or

2243
01:38:52,320 --> 01:38:54,639
in any part of the network no part of

2244
01:38:54,639 --> 01:38:55,840
the network

2245
01:38:55,840 --> 01:38:58,320
keeps keeps the state of the flow level

2246
01:38:58,320 --> 01:38:59,199
it's just

2247
01:38:59,199 --> 01:39:02,239
in the hash function of

2248
01:39:02,239 --> 01:39:04,560
ingress devices and the ingress device

2249
01:39:04,560 --> 01:39:06,159
may be top of rack switch

2250
01:39:06,159 --> 01:39:09,520
it may be right at the entrance of

2251
01:39:09,520 --> 01:39:12,880
a mpls cloud right

2252
01:39:12,880 --> 01:39:16,400
so that's all i and i'm not aware of

2253
01:39:16,400 --> 01:39:19,199
any other stateful use cases of flow

2254
01:39:19,199 --> 01:39:19,760
label

2255
01:39:19,760 --> 01:39:21,920
there are quality of service as you said

2256
01:39:21,920 --> 01:39:23,600
there is a place for other

2257
01:39:23,600 --> 01:39:26,080
use cases so there is channeling for

2258
01:39:26,080 --> 01:39:28,080
other use cases

2259
01:39:28,080 --> 01:39:30,000
i understood but you know on this on

2260
01:39:30,000 --> 01:39:31,679
this on the top of rack like that

2261
01:39:31,679 --> 01:39:32,880
ingress point

2262
01:39:32,880 --> 01:39:34,719
could you actually just like a qos

2263
01:39:34,719 --> 01:39:36,000
packet like the dsc

2264
01:39:36,000 --> 01:39:38,719
toss field can you you know set it to

2265
01:39:38,719 --> 01:39:39,360
everything is

2266
01:39:39,360 --> 01:39:42,080
so that the um the field is not marked

2267
01:39:42,080 --> 01:39:43,760
so you don't have um

2268
01:39:43,760 --> 01:39:45,760
erratic behavior because it does seem

2269
01:39:45,760 --> 01:39:46,800
like when the host

2270
01:39:46,800 --> 01:39:49,360
sets you know and tries to use a flow

2271
01:39:49,360 --> 01:39:51,920
label for stateful operation that

2272
01:39:51,920 --> 01:39:53,760
it seems like from your testing you have

2273
01:39:53,760 --> 01:39:55,600
a lot of erratic behavior but if

2274
01:39:55,600 --> 01:39:58,239
on that top of rack if you mark it so

2275
01:39:58,239 --> 01:40:00,400
that it's not set so the flow label is

2276
01:40:00,400 --> 01:40:02,239
not set for stateful

2277
01:40:02,239 --> 01:40:05,119
signaling um i don't know if that's if

2278
01:40:05,119 --> 01:40:06,880
that's possible i mean i guess it would

2279
01:40:06,880 --> 01:40:08,000
prevent any erratic

2280
01:40:08,000 --> 01:40:09,760
behavior you know that could possibly

2281
01:40:09,760 --> 01:40:11,520
happen

2282
01:40:11,520 --> 01:40:13,520
uh unfortunately i can't the moment

2283
01:40:13,520 --> 01:40:15,280
imagine the use cases for

2284
01:40:15,280 --> 01:40:17,040
any kind of state for flow label that

2285
01:40:17,040 --> 01:40:18,560
will be really working

2286
01:40:18,560 --> 01:40:20,239
but we can move this discussion to the

2287
01:40:20,239 --> 01:40:22,800
main at least

2288
01:40:22,800 --> 01:40:26,719
see them please tell me thank you

2289
01:40:26,719 --> 01:40:30,880
okay thank you um so i need to move on

2290
01:40:30,880 --> 01:40:31,280
to

2291
01:40:31,280 --> 01:40:35,040
fernando's talk um so

2292
01:40:35,040 --> 01:40:37,440
ron you want to change the sides there

2293
01:40:37,440 --> 01:40:37,870
um

2294
01:40:37,870 --> 01:40:41,029
[Music]

2295
01:40:41,199 --> 01:40:51,839
all right

2296
01:40:52,680 --> 01:40:55,770
[Music]

2297
01:41:02,840 --> 01:41:05,840
uh

2298
01:41:19,840 --> 01:41:22,639
good can you hear me

2299
01:41:22,960 --> 01:41:26,800
yeah i can hear you okay um

2300
01:41:26,800 --> 01:41:30,400
okay um so i'm fernando and i will be

2301
01:41:30,400 --> 01:41:32,800
presenting this document on ipv6

2302
01:41:32,800 --> 01:41:34,639
addressing considerations

2303
01:41:34,639 --> 01:41:38,159
uh next slide please

2304
01:41:39,360 --> 01:41:41,119
so what's the goal of this document

2305
01:41:41,119 --> 01:41:43,520
essentially this document tries to do

2306
01:41:43,520 --> 01:41:45,840
three different things the first one is

2307
01:41:45,840 --> 01:41:48,560
to perform an architectural analysis of

2308
01:41:48,560 --> 01:41:50,159
ipv6 addresses

2309
01:41:50,159 --> 01:41:52,639
uh try to figure out what what are the

2310
01:41:52,639 --> 01:41:54,239
you know the properties that they have

2311
01:41:54,239 --> 01:41:56,400
and what are the implications of such

2312
01:41:56,400 --> 01:41:58,320
properties

2313
01:41:58,320 --> 01:42:00,239
then we try to analyze the extent to

2314
01:42:00,239 --> 01:42:02,000
which ipv6 addressing

2315
01:42:02,000 --> 01:42:05,280
is currently leveraged and finally what

2316
01:42:05,280 --> 01:42:07,280
we do is try to do a gap analysis

2317
01:42:07,280 --> 01:42:10,080
that is try to uh find out what what

2318
01:42:10,080 --> 01:42:11,119
things are missing

2319
01:42:11,119 --> 01:42:14,480
for us to be able to fully leverage ipv6

2320
01:42:14,480 --> 01:42:15,679
addressing

2321
01:42:15,679 --> 01:42:18,639
uh next slide

2322
01:42:20,239 --> 01:42:23,360
so um when analyzing uh the address

2323
01:42:23,360 --> 01:42:24,000
properties

2324
01:42:24,000 --> 01:42:25,920
we came up with a you know with a few

2325
01:42:25,920 --> 01:42:27,520
different categories

2326
01:42:27,520 --> 01:42:29,920
um the first one is that of scope which

2327
01:42:29,920 --> 01:42:30,560
is actually

2328
01:42:30,560 --> 01:42:33,440
you know formally uh defined in the ipv6

2329
01:42:33,440 --> 01:42:35,040
addressing architecture

2330
01:42:35,040 --> 01:42:37,360
essentially the scope is uh the network

2331
01:42:37,360 --> 01:42:39,040
span where another is uniquely

2332
01:42:39,040 --> 01:42:40,840
identifies a network interface

2333
01:42:40,840 --> 01:42:44,159
okay um as a consequence of of that you

2334
01:42:44,159 --> 01:42:46,400
uh can say that you know the scope has

2335
01:42:46,400 --> 01:42:48,639
an implication on reachability

2336
01:42:48,639 --> 01:42:51,040
reachability will always be smaller than

2337
01:42:51,040 --> 01:42:52,800
the scope of the address

2338
01:42:52,800 --> 01:42:55,280
and there are implications of the of the

2339
01:42:55,280 --> 01:42:56,000
scope for

2340
01:42:56,000 --> 01:42:58,800
example um you know if you were meaning

2341
01:42:58,800 --> 01:42:59,199
to

2342
01:42:59,199 --> 01:43:02,320
um offer a service only on the local

2343
01:43:02,320 --> 01:43:02,800
link

2344
01:43:02,800 --> 01:43:04,480
but instead of using link local

2345
01:43:04,480 --> 01:43:06,639
addresses you use global addresses

2346
01:43:06,639 --> 01:43:10,000
then you know that service would be um

2347
01:43:10,000 --> 01:43:12,639
you know exposed exposed to uh you know

2348
01:43:12,639 --> 01:43:14,639
a larger part of the network than than

2349
01:43:14,639 --> 01:43:16,080
necessary

2350
01:43:16,080 --> 01:43:19,280
uh it also has implications of on

2351
01:43:19,280 --> 01:43:21,760
address uh stability for example for the

2352
01:43:21,760 --> 01:43:23,199
particular case of

2353
01:43:23,199 --> 01:43:26,080
you know global addresses if you have

2354
01:43:26,080 --> 01:43:27,840
provider dependent addresses

2355
01:43:27,840 --> 01:43:30,880
uh then you know your addresses

2356
01:43:30,880 --> 01:43:33,199
might change over time for example if

2357
01:43:33,199 --> 01:43:35,520
your app stream were numbers

2358
01:43:35,520 --> 01:43:39,199
um second property that we discuss

2359
01:43:39,199 --> 01:43:41,600
in the document is that of reachability

2360
01:43:41,600 --> 01:43:42,719
which essentially

2361
01:43:42,719 --> 01:43:44,960
implies more than just the scope because

2362
01:43:44,960 --> 01:43:46,320
it also implies i mean

2363
01:43:46,320 --> 01:43:48,719
the scope does uh imply a limit on

2364
01:43:48,719 --> 01:43:50,239
reachability but there are other things

2365
01:43:50,239 --> 01:43:52,239
that affect reachability such as

2366
01:43:52,239 --> 01:43:55,360
uh for example filtering policies and

2367
01:43:55,360 --> 01:43:55,679
the

2368
01:43:55,679 --> 01:43:57,600
implications of reachability is of

2369
01:43:57,600 --> 01:43:59,360
course of course that of course

2370
01:43:59,360 --> 01:44:02,400
exposure okay uh you know another is

2371
01:44:02,400 --> 01:44:02,880
that is

2372
01:44:02,880 --> 01:44:04,560
you know reachable from everywhere of

2373
01:44:04,560 --> 01:44:06,880
course means that that know that host

2374
01:44:06,880 --> 01:44:08,880
is also reachable you know from

2375
01:44:08,880 --> 01:44:10,719
everywhere for example for attack

2376
01:44:10,719 --> 01:44:12,159
purposes

2377
01:44:12,159 --> 01:44:21,600
uh next slide

2378
01:44:21,600 --> 01:44:24,880
um other categories uh provider

2379
01:44:24,880 --> 01:44:25,679
dependency

2380
01:44:25,679 --> 01:44:28,000
this is uh you know uh provider

2381
01:44:28,000 --> 01:44:29,840
dependency is normally analyzed in the

2382
01:44:29,840 --> 01:44:30,719
context of

2383
01:44:30,719 --> 01:44:32,639
uh you know global addresses like you

2384
01:44:32,639 --> 01:44:35,040
know bi versus pa space

2385
01:44:35,040 --> 01:44:37,760
but in this case uh you know we we talk

2386
01:44:37,760 --> 01:44:38,880
about this property

2387
01:44:38,880 --> 01:44:41,679
like in a more general way uh and

2388
01:44:41,679 --> 01:44:43,600
essentially we refer to this property as

2389
01:44:43,600 --> 01:44:45,119
you know the extent to which an address

2390
01:44:45,119 --> 01:44:45,440
is

2391
01:44:45,440 --> 01:44:48,320
tied to your upstream provider upstream

2392
01:44:48,320 --> 01:44:49,840
provider could be anything could be

2393
01:44:49,840 --> 01:44:50,719
another router

2394
01:44:50,719 --> 01:44:52,480
in your same network and that router

2395
01:44:52,480 --> 01:44:54,239
might be leasing you ula

2396
01:44:54,239 --> 01:44:56,960
prefixes okay so the idea here is you

2397
01:44:56,960 --> 01:44:57,280
know

2398
01:44:57,280 --> 01:44:59,840
if the address that you're using depends

2399
01:44:59,840 --> 01:45:00,719
on the upstream

2400
01:45:00,719 --> 01:45:02,480
then it's you know dependent on the

2401
01:45:02,480 --> 01:45:04,400
provider and if not it's not

2402
01:45:04,400 --> 01:45:06,400
implications of this one of them is

2403
01:45:06,400 --> 01:45:07,520
other stability

2404
01:45:07,520 --> 01:45:09,280
like for example the work that we have

2405
01:45:09,280 --> 01:45:11,040
done in basic subs about the flash

2406
01:45:11,040 --> 01:45:12,159
remembering events

2407
01:45:12,159 --> 01:45:13,840
so if your address depends on your

2408
01:45:13,840 --> 01:45:15,280
provider then if they provide the real

2409
01:45:15,280 --> 01:45:16,239
numbers then

2410
01:45:16,239 --> 01:45:19,040
you know your addresses will change and

2411
01:45:19,040 --> 01:45:20,560
for example in the case of global

2412
01:45:20,560 --> 01:45:24,080
addresses like pei vs pa space

2413
01:45:24,080 --> 01:45:25,760
obviously it has an implication on your

2414
01:45:25,760 --> 01:45:27,360
ability to do multi-homing

2415
01:45:27,360 --> 01:45:29,840
okay the final one if i remember

2416
01:45:29,840 --> 01:45:30,400
correctly

2417
01:45:30,400 --> 01:45:32,719
is that of uh stability which as the

2418
01:45:32,719 --> 01:45:34,320
name implies has to do with the extent

2419
01:45:34,320 --> 01:45:36,880
to which an address changes over time

2420
01:45:36,880 --> 01:45:40,159
uh you know the other exchanges uh

2421
01:45:40,159 --> 01:45:41,840
are associated with at least two

2422
01:45:41,840 --> 01:45:44,000
different things uh one is the prefix

2423
01:45:44,000 --> 01:45:46,719
stability uh that means that if you're

2424
01:45:46,719 --> 01:45:48,239
upstream for a number then you may have

2425
01:45:48,239 --> 01:45:49,600
to change your addresses whether you

2426
01:45:49,600 --> 01:45:50,800
want it or not

2427
01:45:50,800 --> 01:45:53,119
and then you know the stability is also

2428
01:45:53,119 --> 01:45:54,719
related with the address type

2429
01:45:54,719 --> 01:45:57,360
like for example in two of the cases you

2430
01:45:57,360 --> 01:45:59,199
have stable addresses that are as the

2431
01:45:59,199 --> 01:46:00,080
name implies

2432
01:46:00,080 --> 01:46:02,239
expected to remain stable in the network

2433
01:46:02,239 --> 01:46:04,560
and you also have uh temporary addresses

2434
01:46:04,560 --> 01:46:04,880
which

2435
01:46:04,880 --> 01:46:06,960
by definition of course they change over

2436
01:46:06,960 --> 01:46:07,920
time

2437
01:46:07,920 --> 01:46:10,560
um stability of addresses have uh you

2438
01:46:10,560 --> 01:46:12,480
know implications on a you know

2439
01:46:12,480 --> 01:46:15,040
a large number of areas one is uh host

2440
01:46:15,040 --> 01:46:16,639
exposure you know the more

2441
01:46:16,639 --> 01:46:19,679
you use uh you know an address the more

2442
01:46:19,679 --> 01:46:22,560
that host will be exposed uh via that

2443
01:46:22,560 --> 01:46:23,600
address

2444
01:46:23,600 --> 01:46:26,080
uh it also has implications on privacy

2445
01:46:26,080 --> 01:46:28,080
because of course the more you use an

2446
01:46:28,080 --> 01:46:29,679
address you know the longer you will

2447
01:46:29,679 --> 01:46:30,480
allow for

2448
01:46:30,480 --> 01:46:33,199
uh network activity correlation based on

2449
01:46:33,199 --> 01:46:34,800
the address itself of course there are

2450
01:46:34,800 --> 01:46:36,400
many ways in which you can correlate

2451
01:46:36,400 --> 01:46:37,679
activity

2452
01:46:37,679 --> 01:46:40,560
and finally it also has implications on

2453
01:46:40,560 --> 01:46:41,440
operations

2454
01:46:41,440 --> 01:46:44,239
why because uh for example there are

2455
01:46:44,239 --> 01:46:45,040
devices

2456
01:46:45,040 --> 01:46:48,400
that might not be able to cope with uh

2457
01:46:48,400 --> 01:46:51,440
you know um systems uh employing many

2458
01:46:51,440 --> 01:46:52,320
addresses

2459
01:46:52,320 --> 01:46:54,800
or with changing addresses all the time

2460
01:46:54,800 --> 01:46:56,000
all the times in

2461
01:46:56,000 --> 01:46:58,560
some enterprise deployments they might

2462
01:46:58,560 --> 01:46:59,199
expect

2463
01:46:59,199 --> 01:47:02,080
the addresses to be stable you know for

2464
01:47:02,080 --> 01:47:03,760
correlation or login

2465
01:47:03,760 --> 01:47:07,520
purposes for acls too um there were also

2466
01:47:07,520 --> 01:47:08,480
comments on the

2467
01:47:08,480 --> 01:47:11,119
on the v6 ops mainly list uh regarding

2468
01:47:11,119 --> 01:47:13,199
acls that you might even want to

2469
01:47:13,199 --> 01:47:16,639
you know um enforce on your cpu router

2470
01:47:16,639 --> 01:47:20,480
um you know since you know if your

2471
01:47:20,480 --> 01:47:22,480
home network is employing global address

2472
01:47:22,480 --> 01:47:24,719
space it might be difficult for you to

2473
01:47:24,719 --> 01:47:25,760
configure

2474
01:47:25,760 --> 01:47:28,960
acls on your cpe because if your

2475
01:47:28,960 --> 01:47:31,920
uh you know if your isp renumbers you

2476
01:47:31,920 --> 01:47:32,560
then

2477
01:47:32,560 --> 01:47:36,080
uh you know the acls should change

2478
01:47:36,080 --> 01:47:36,880
accordingly

2479
01:47:36,880 --> 01:47:38,880
so there are a number of implications

2480
01:47:38,880 --> 01:47:40,080
associated with

2481
01:47:40,080 --> 01:47:50,560
stability uh next slide

2482
01:47:50,560 --> 01:47:53,679
okay so how are addresses currently

2483
01:47:53,679 --> 01:47:55,280
being employed well when it comes to

2484
01:47:55,280 --> 01:47:57,199
configuration it's normally one size

2485
01:47:57,199 --> 01:47:59,840
fits all like for example i use uhuntu

2486
01:47:59,840 --> 01:48:00,800
on my laptop

2487
01:48:00,800 --> 01:48:02,960
and i get the same kind of addresses no

2488
01:48:02,960 --> 01:48:04,000
matter where i connect

2489
01:48:04,000 --> 01:48:07,119
to uh for example ubuntu will

2490
01:48:07,119 --> 01:48:09,280
if addresses are being provided with

2491
01:48:09,280 --> 01:48:11,280
slack and the hcp

2492
01:48:11,280 --> 01:48:13,600
it will configure addresses with both

2493
01:48:13,600 --> 01:48:15,280
and when it comes to slack

2494
01:48:15,280 --> 01:48:17,360
it will configure both stable and

2495
01:48:17,360 --> 01:48:19,119
temporary addresses and it doesn't

2496
01:48:19,119 --> 01:48:20,800
matter what kind of network i connect to

2497
01:48:20,800 --> 01:48:24,480
i always get the uh ubuntu has the

2498
01:48:24,480 --> 01:48:26,719
uh at least as far as i know the you

2499
01:48:26,719 --> 01:48:28,320
know the same policy for

2500
01:48:28,320 --> 01:48:30,560
you know configuring addresses where you

2501
01:48:30,560 --> 01:48:32,000
might want to do something different

2502
01:48:32,000 --> 01:48:34,800
okay for example if you were to um you

2503
01:48:34,800 --> 01:48:35,119
know

2504
01:48:35,119 --> 01:48:37,119
uh connect to your home network you

2505
01:48:37,119 --> 01:48:38,400
might want to do

2506
01:48:38,400 --> 01:48:40,639
uh both stable and temporary addresses

2507
01:48:40,639 --> 01:48:42,719
but if for example you have a

2508
01:48:42,719 --> 01:48:44,560
you know a mobile device you might want

2509
01:48:44,560 --> 01:48:46,480
to use just temporary addresses

2510
01:48:46,480 --> 01:48:49,600
okay when it comes to usage it's uh the

2511
01:48:49,600 --> 01:48:50,320
same thing

2512
01:48:50,320 --> 01:48:52,080
uh so the approach that is normally

2513
01:48:52,080 --> 01:48:53,520
employed is one size

2514
01:48:53,520 --> 01:48:56,239
fits all so when it comes to clients uh

2515
01:48:56,239 --> 01:48:56,960
normally

2516
01:48:56,960 --> 01:49:00,239
uh you know uh hosts employ the uh

2517
01:49:00,239 --> 01:49:02,400
you know ipv6 defaults the default

2518
01:49:02,400 --> 01:49:03,679
address selection

2519
01:49:03,679 --> 01:49:05,760
uh you know meaning that you know you

2520
01:49:05,760 --> 01:49:06,719
pick your

2521
01:49:06,719 --> 01:49:08,480
source and destination addresses based

2522
01:49:08,480 --> 01:49:10,159
on that rfc

2523
01:49:10,159 --> 01:49:12,639
and when it comes to uh you know servers

2524
01:49:12,639 --> 01:49:14,000
or server like

2525
01:49:14,000 --> 01:49:17,199
operations um you know the normal

2526
01:49:17,199 --> 01:49:18,000
behavior

2527
01:49:18,000 --> 01:49:20,800
is that you accept uh incoming

2528
01:49:20,800 --> 01:49:21,920
connections

2529
01:49:21,920 --> 01:49:24,960
on all of the configured addresses okay

2530
01:49:24,960 --> 01:49:27,920
which is um you know at the very you

2531
01:49:27,920 --> 01:49:29,199
know at least uh sub

2532
01:49:29,199 --> 01:49:31,440
optimal because that means that for

2533
01:49:31,440 --> 01:49:33,280
example addresses that you

2534
01:49:33,280 --> 01:49:36,560
expose to the outside world by doing

2535
01:49:36,560 --> 01:49:39,760
uh client-like communications uh could

2536
01:49:39,760 --> 01:49:40,639
also be

2537
01:49:40,639 --> 01:49:44,000
uh leverage are used uh to actually

2538
01:49:44,000 --> 01:49:46,159
access services that you might be

2539
01:49:46,159 --> 01:49:47,840
providing in your local node

2540
01:49:47,840 --> 01:49:50,159
there are there is like a famous case of

2541
01:49:50,159 --> 01:49:51,360
um

2542
01:49:51,360 --> 01:49:54,320
you know of uh host systems that they

2543
01:49:54,320 --> 01:49:54,800
were

2544
01:49:54,800 --> 01:49:58,080
exposing their ipv6 addresses uh

2545
01:49:58,080 --> 01:50:00,880
when using ntp to synchronize the time

2546
01:50:00,880 --> 01:50:01,520
and then

2547
01:50:01,520 --> 01:50:04,000
you know right after you know doing ntp

2548
01:50:04,000 --> 01:50:05,520
they got poor scan

2549
01:50:05,520 --> 01:50:07,599
by using the you know the temporary

2550
01:50:07,599 --> 01:50:11,360
address that had been employed with mtp

2551
01:50:11,360 --> 01:50:13,920
next slide

2552
01:50:21,599 --> 01:50:24,080
so implications some of them i discussed

2553
01:50:24,080 --> 01:50:24,719
already

2554
01:50:24,719 --> 01:50:26,400
um when it comes to address

2555
01:50:26,400 --> 01:50:28,480
configuration i would say that

2556
01:50:28,480 --> 01:50:31,040
uh one size probably doesn't really fit

2557
01:50:31,040 --> 01:50:31,760
all

2558
01:50:31,760 --> 01:50:35,440
uh at times the host expectations are

2559
01:50:35,440 --> 01:50:38,159
different from the network expectations

2560
01:50:38,159 --> 01:50:41,440
uh for example a host might want to um

2561
01:50:41,440 --> 01:50:43,599
you know configure many addresses which

2562
01:50:43,599 --> 01:50:45,119
is actually a bcp

2563
01:50:45,119 --> 01:50:48,320
right now but uh you know the network

2564
01:50:48,320 --> 01:50:50,400
might not be willing to do that or maybe

2565
01:50:50,400 --> 01:50:52,000
the network might be willing

2566
01:50:52,000 --> 01:50:54,800
to allow for some number of addresses

2567
01:50:54,800 --> 01:50:56,159
you know per cause

2568
01:50:56,159 --> 01:50:58,560
but it's impossible for the host to know

2569
01:50:58,560 --> 01:51:00,560
what that number is what what's like a

2570
01:51:00,560 --> 01:51:02,400
you know a number of addresses that is

2571
01:51:02,400 --> 01:51:05,119
acceptable to the network so uh you have

2572
01:51:05,119 --> 01:51:06,320
a case of you know different

2573
01:51:06,320 --> 01:51:08,400
expectations from the host side and from

2574
01:51:08,400 --> 01:51:10,080
the network side

2575
01:51:10,080 --> 01:51:12,400
there is also the issue of uh slack and

2576
01:51:12,400 --> 01:51:13,199
dhcp

2577
01:51:13,199 --> 01:51:15,599
interaction uh for example that's the

2578
01:51:15,599 --> 01:51:16,639
case of my own

2579
01:51:16,639 --> 01:51:20,040
uh box i have an ubuntu box that does uh

2580
01:51:20,040 --> 01:51:21,199
7217

2581
01:51:21,199 --> 01:51:24,719
and 4941 for configuring the uh slack

2582
01:51:24,719 --> 01:51:25,599
addresses

2583
01:51:25,599 --> 01:51:27,520
that is it configures slack addresses in

2584
01:51:27,520 --> 01:51:29,119
a way that you know you take care of

2585
01:51:29,119 --> 01:51:30,800
security and privacy

2586
01:51:30,800 --> 01:51:33,920
but ubuntu by default if addresses are

2587
01:51:33,920 --> 01:51:35,920
also offered on dhcp

2588
01:51:35,920 --> 01:51:38,000
it will configure addresses with the acp

2589
01:51:38,000 --> 01:51:39,760
too and i happen to have

2590
01:51:39,760 --> 01:51:42,880
you know a cpe router that uh

2591
01:51:42,880 --> 01:51:45,599
leases ipv6 addresses using a

2592
01:51:45,599 --> 01:51:47,040
predictable algorithm

2593
01:51:47,040 --> 01:51:49,840
so my slack addresses are unpredictable

2594
01:51:49,840 --> 01:51:50,320
my

2595
01:51:50,320 --> 01:51:53,920
my dhcp addresses are um you know

2596
01:51:53,920 --> 01:51:56,080
pretty predictable and of course of

2597
01:51:56,080 --> 01:51:57,440
course the you know the the

2598
01:51:57,440 --> 01:51:59,199
you know the outcome of that is uh you

2599
01:51:59,199 --> 01:52:00,960
know at best

2600
01:52:00,960 --> 01:52:04,159
sub optimal when it comes to address

2601
01:52:04,159 --> 01:52:07,280
usage there are also implications um for

2602
01:52:07,280 --> 01:52:08,080
example

2603
01:52:08,080 --> 01:52:11,040
uh an application that expects to have a

2604
01:52:11,040 --> 01:52:11,599
long live

2605
01:52:11,599 --> 01:52:14,000
session might use temporary addresses

2606
01:52:14,000 --> 01:52:15,119
which uh

2607
01:52:15,119 --> 01:52:17,040
you know as a result of that results in

2608
01:52:17,040 --> 01:52:19,040
the sessions being torn down

2609
01:52:19,040 --> 01:52:20,560
think for example about the case where

2610
01:52:20,560 --> 01:52:22,480
you want to have a you know long live

2611
01:52:22,480 --> 01:52:25,679
ssh session but ssh employs temporary

2612
01:52:25,679 --> 01:52:26,480
addresses

2613
01:52:26,480 --> 01:52:28,080
and as a result of that you know they

2614
01:52:28,080 --> 01:52:30,000
get the the session gets you know

2615
01:52:30,000 --> 01:52:33,119
closed or down every time um

2616
01:52:33,119 --> 01:52:35,199
you could also end up using for example

2617
01:52:35,199 --> 01:52:36,320
global addresses

2618
01:52:36,320 --> 01:52:38,639
for what's meant to be a service that is

2619
01:52:38,639 --> 01:52:40,400
only provided on the local link

2620
01:52:40,400 --> 01:52:42,000
could be the case for example for

2621
01:52:42,000 --> 01:52:44,960
multicast dns if you wish

2622
01:52:44,960 --> 01:52:47,440
and there's also the case that it's what

2623
01:52:47,440 --> 01:52:49,040
happens nowadays that

2624
01:52:49,040 --> 01:52:51,679
you may be accepting um you know

2625
01:52:51,679 --> 01:52:52,880
incoming connections on

2626
01:52:52,880 --> 01:52:54,800
all addresses including temporary

2627
01:52:54,800 --> 01:52:57,360
addresses meaning that just by you know

2628
01:52:57,360 --> 01:52:59,440
exposing your temporary addresses

2629
01:52:59,440 --> 01:53:01,440
means that you're also or you might also

2630
01:53:01,440 --> 01:53:02,639
be uh

2631
01:53:02,639 --> 01:53:06,560
exposing services that uh might even be

2632
01:53:06,560 --> 01:53:08,960
meant only for uh you know the local

2633
01:53:08,960 --> 01:53:10,000
network

2634
01:53:10,000 --> 01:53:13,840
uh next slide

2635
01:53:15,440 --> 01:53:18,960
so uh let's go briefly uh through some

2636
01:53:18,960 --> 01:53:19,440
of the

2637
01:53:19,440 --> 01:53:22,960
gaps that we have one is the apis

2638
01:53:22,960 --> 01:53:24,960
essentially you know for the most part

2639
01:53:24,960 --> 01:53:26,000
uh we keep

2640
01:53:26,000 --> 01:53:29,679
using the same kind of apis that uh you

2641
01:53:29,679 --> 01:53:30,400
know

2642
01:53:30,400 --> 01:53:33,920
do not really um you know allow

2643
01:53:33,920 --> 01:53:36,400
applications uh you know to essentially

2644
01:53:36,400 --> 01:53:37,199
signal

2645
01:53:37,199 --> 01:53:40,000
what kind of properties uh they expect

2646
01:53:40,000 --> 01:53:42,239
on the underlying ipv6 addresses

2647
01:53:42,239 --> 01:53:44,800
so for example for a client application

2648
01:53:44,800 --> 01:53:46,159
uh you know the

2649
01:53:46,159 --> 01:53:47,599
application might want to you know

2650
01:53:47,599 --> 01:53:49,679
signal that it wants a temporary address

2651
01:53:49,679 --> 01:53:51,199
or for example that it wants the

2652
01:53:51,199 --> 01:53:52,960
operating system to create

2653
01:53:52,960 --> 01:53:55,840
configure a new address just to use by

2654
01:53:55,840 --> 01:53:57,119
that application

2655
01:53:57,119 --> 01:53:59,040
so there's a lot of properties that you

2656
01:53:59,040 --> 01:54:00,560
know an application

2657
01:54:00,560 --> 01:54:02,560
or abstract properties that you know an

2658
01:54:02,560 --> 01:54:04,239
application could specify

2659
01:54:04,239 --> 01:54:07,679
scope stability and so on uh

2660
01:54:07,679 --> 01:54:10,320
there's probably also room for advice on

2661
01:54:10,320 --> 01:54:11,840
ipv6 address usage

2662
01:54:11,840 --> 01:54:14,320
meaning that even if we have those apis

2663
01:54:14,320 --> 01:54:16,320
then you know we should provide advice

2664
01:54:16,320 --> 01:54:18,480
to you know applications developers

2665
01:54:18,480 --> 01:54:21,199
you know for them you know uh to to to

2666
01:54:21,199 --> 01:54:21,599
be

2667
01:54:21,599 --> 01:54:24,400
aware about both the api and what

2668
01:54:24,400 --> 01:54:25,360
supposed to be the

2669
01:54:25,360 --> 01:54:26,800
you know the best way of you know

2670
01:54:26,800 --> 01:54:29,199
leveraging ipv6 services

2671
01:54:29,199 --> 01:54:36,320
uh next slide

2672
01:54:36,320 --> 01:54:39,760
other gaps uh well this is related to um

2673
01:54:39,760 --> 01:54:42,719
you know to um to the configuration

2674
01:54:42,719 --> 01:54:44,320
issue that i mentioned before

2675
01:54:44,320 --> 01:54:46,800
it would be great for example to have uh

2676
01:54:46,800 --> 01:54:48,080
you know profile based

2677
01:54:48,080 --> 01:54:50,480
uh address configuration meaning that

2678
01:54:50,480 --> 01:54:52,400
you know if you select that uh you know

2679
01:54:52,400 --> 01:54:54,080
if you tell your system that a specific

2680
01:54:54,080 --> 01:54:54,800
network is

2681
01:54:54,800 --> 01:54:57,040
say a trusted network you configure

2682
01:54:57,040 --> 01:54:58,560
addresses of some sort

2683
01:54:58,560 --> 01:54:59,920
whereas in other cases you do a

2684
01:54:59,920 --> 01:55:01,199
different thing like you know home

2685
01:55:01,199 --> 01:55:01,920
network

2686
01:55:01,920 --> 01:55:03,520
okay for the home network configure

2687
01:55:03,520 --> 01:55:04,960
stable and privacy

2688
01:55:04,960 --> 01:55:06,880
but if i'm roaming if i connect to an

2689
01:55:06,880 --> 01:55:08,480
internet cafe for example

2690
01:55:08,480 --> 01:55:10,639
i'll then use only temporary addresses

2691
01:55:10,639 --> 01:55:12,639
there so that means that we would switch

2692
01:55:12,639 --> 01:55:14,639
from one size fits all to you know

2693
01:55:14,639 --> 01:55:18,480
specific different profiles um

2694
01:55:18,480 --> 01:55:20,560
also uh you know have improvements on

2695
01:55:20,560 --> 01:55:22,320
how to deal with many addresses this is

2696
01:55:22,320 --> 01:55:23,679
kind of like you know the result of

2697
01:55:23,679 --> 01:55:25,199
conversations that we have had in six

2698
01:55:25,199 --> 01:55:25,920
months

2699
01:55:25,920 --> 01:55:27,599
for example allow the network to convey

2700
01:55:27,599 --> 01:55:29,280
information about you know

2701
01:55:29,280 --> 01:55:31,760
their expectations of addresses so that

2702
01:55:31,760 --> 01:55:32,560
you know the

2703
01:55:32,560 --> 01:55:34,400
costs and the you know network can

2704
01:55:34,400 --> 01:55:36,000
cooperate in a better way

2705
01:55:36,000 --> 01:55:38,320
whereas uh nowadays uh the host may

2706
01:55:38,320 --> 01:55:40,080
configure many addresses but

2707
01:55:40,080 --> 01:55:41,840
it might hit a point where you know the

2708
01:55:41,840 --> 01:55:43,679
network isn't happy about that

2709
01:55:43,679 --> 01:55:45,440
uh there have been proposals this is

2710
01:55:45,440 --> 01:55:47,599
obviously work not for this exops like

2711
01:55:47,599 --> 01:55:48,000
you know

2712
01:55:48,000 --> 01:55:50,239
do work to be able to register and

2713
01:55:50,239 --> 01:55:52,080
de-register addresses

2714
01:55:52,080 --> 01:55:54,480
because you know so far uh devices that

2715
01:55:54,480 --> 01:55:56,159
maybe on the local network they have no

2716
01:55:56,159 --> 01:55:58,000
way of knowing you know if an address is

2717
01:55:58,000 --> 01:55:58,320
uh

2718
01:55:58,320 --> 01:56:01,920
still in use or not and uh last item

2719
01:56:01,920 --> 01:56:04,080
have support for prefix delegation which

2720
01:56:04,080 --> 01:56:06,239
in some cases we don't currently have

2721
01:56:06,239 --> 01:56:08,960
that might be increased support for dhcp

2722
01:56:08,960 --> 01:56:10,000
prefix

2723
01:56:10,000 --> 01:56:12,480
delegation not necessarily the whole

2724
01:56:12,480 --> 01:56:13,760
dhcp

2725
01:56:13,760 --> 01:56:16,239
version 6 thing but the specific part of

2726
01:56:16,239 --> 01:56:17,520
perfect delegation

2727
01:56:17,520 --> 01:56:20,239
or having something you know develop on

2728
01:56:20,239 --> 01:56:20,560
the

2729
01:56:20,560 --> 01:56:24,080
slack side uh next slide

2730
01:56:24,080 --> 01:56:25,760
and i think once we're done with it we

2731
01:56:25,760 --> 01:56:27,840
can switch to the discussion

2732
01:56:27,840 --> 01:56:30,159
finally there's other stuff uh one is

2733
01:56:30,159 --> 01:56:32,239
support for firewall traversal in

2734
01:56:32,239 --> 01:56:35,599
uh cpus um essentially you know when you

2735
01:56:35,599 --> 01:56:38,000
look that you have many cps that enforce

2736
01:56:38,000 --> 01:56:40,560
a policy of only allowing outgoing

2737
01:56:40,560 --> 01:56:41,840
communications that's kind of like

2738
01:56:41,840 --> 01:56:42,880
mimicking

2739
01:56:42,880 --> 01:56:45,920
what we have in ipv4 as a side effect

2740
01:56:45,920 --> 01:56:48,480
but they don't have support for uh

2741
01:56:48,480 --> 01:56:49,199
things like

2742
01:56:49,199 --> 01:56:51,360
let's say ipv6 based universal plug and

2743
01:56:51,360 --> 01:56:52,960
play or pcp

2744
01:56:52,960 --> 01:56:55,599
that means that uh in many cases you

2745
01:56:55,599 --> 01:56:56,880
might end up having

2746
01:56:56,880 --> 01:56:59,760
uh ipv6 network where your local nodes

2747
01:56:59,760 --> 01:57:01,280
employ global addresses

2748
01:57:01,280 --> 01:57:03,119
but that filtering policy of only

2749
01:57:03,119 --> 01:57:04,560
allowing outgoing connections

2750
01:57:04,560 --> 01:57:05,679
essentially

2751
01:57:05,679 --> 01:57:08,159
prevents you from offering services with

2752
01:57:08,159 --> 01:57:10,639
dhcp which is kind of like ironic

2753
01:57:10,639 --> 01:57:12,800
and last item is support for

2754
01:57:12,800 --> 01:57:14,400
multi-prefix multi-router

2755
01:57:14,400 --> 01:57:17,920
networks uh to put it bluntly uh

2756
01:57:17,920 --> 01:57:20,639
we do from my perspective we do need

2757
01:57:20,639 --> 01:57:22,239
mandatory support for

2758
01:57:22,239 --> 01:57:25,760
rfc 8028 uh for me it's virtually

2759
01:57:25,760 --> 01:57:27,520
impossible for a network to

2760
01:57:27,520 --> 01:57:30,800
uh support uh a setup where you have uh

2761
01:57:30,800 --> 01:57:32,800
you know multiple routers and multiple

2762
01:57:32,800 --> 01:57:33,840
prefixes

2763
01:57:33,840 --> 01:57:37,199
the uh requirement for at rfc 8028 right

2764
01:57:37,199 --> 01:57:38,480
now is assured

2765
01:57:38,480 --> 01:57:40,400
but from my perspective it's like should

2766
01:57:40,400 --> 01:57:42,880
be a must like you know definitely

2767
01:57:42,880 --> 01:57:45,199
a must and we also need of course

2768
01:57:45,199 --> 01:57:46,880
increased support of it because the vast

2769
01:57:46,880 --> 01:57:48,080
majority of

2770
01:57:48,080 --> 01:57:50,560
uh ipv6 implementations do not really

2771
01:57:50,560 --> 01:57:52,400
support ad28

2772
01:57:52,400 --> 01:57:55,280
uh next slide

2773
01:57:59,599 --> 01:58:02,719
so uh i guess it's time for some

2774
01:58:02,719 --> 01:58:07,840
discussion and feedback

2775
01:58:14,880 --> 01:58:17,360
okay jen you're first in the queue and

2776
01:58:17,360 --> 01:58:20,960
you want to comment

2777
01:58:20,960 --> 01:58:23,920
hi fernando thanks uh very interesting

2778
01:58:23,920 --> 01:58:24,800
documents

2779
01:58:24,800 --> 01:58:27,840
uh however i have a few comments

2780
01:58:27,840 --> 01:58:29,599
first of all i'm surprised with the

2781
01:58:29,599 --> 01:58:31,040
saying that

2782
01:58:31,040 --> 01:58:34,239
your your laptop is always configured

2783
01:58:34,239 --> 01:58:36,320
the same way i might be wrong but i

2784
01:58:36,320 --> 01:58:36,800
think

2785
01:58:36,800 --> 01:58:38,800
network manager does allow you to have

2786
01:58:38,800 --> 01:58:40,880
different profiles for different

2787
01:58:40,880 --> 01:58:44,320
process ids you can have only

2788
01:58:44,320 --> 01:58:47,599
stable address in one advisory networks

2789
01:58:47,599 --> 01:58:49,840
and private extensions on another and so

2790
01:58:49,840 --> 01:58:51,840
on i think the functionality is

2791
01:58:51,840 --> 01:58:55,520
actually already here so and i think the

2792
01:58:55,520 --> 01:58:57,280
document actually covers a lot of

2793
01:58:57,280 --> 01:58:59,119
different things because

2794
01:58:59,119 --> 01:59:02,159
i agree with definitely leading api so

2795
01:59:02,159 --> 01:59:03,920
application could get better

2796
01:59:03,920 --> 01:59:07,360
visibility to property of address

2797
01:59:07,360 --> 01:59:09,440
temporary versus stable and so on

2798
01:59:09,440 --> 01:59:11,360
however

2799
01:59:11,360 --> 01:59:13,679
concerns that some other properties are

2800
01:59:13,679 --> 01:59:15,920
not really property of an address it's a

2801
01:59:15,920 --> 01:59:18,159
property of the network topology at this

2802
01:59:18,159 --> 01:59:20,560
particular moment of time right

2803
01:59:20,560 --> 01:59:23,760
for example the particular network block

2804
01:59:23,760 --> 01:59:24,320
reuse

2805
01:59:24,320 --> 01:59:27,760
now might be provided by isp but as a

2806
01:59:27,760 --> 01:59:29,199
result of some

2807
01:59:29,199 --> 01:59:31,440
paper work done it might become a

2808
01:59:31,440 --> 01:59:33,360
property of the network so it's not pay

2809
01:59:33,360 --> 01:59:34,000
anymore

2810
01:59:34,000 --> 01:59:35,760
so i'm not sure about your suggestion

2811
01:59:35,760 --> 01:59:37,440
theory how can we

2812
01:59:37,440 --> 01:59:40,719
get that as those properties

2813
01:59:40,719 --> 01:59:45,040
communicated in programmatical way

2814
01:59:45,040 --> 01:59:47,360
well one of the options but that's just

2815
01:59:47,360 --> 01:59:48,800
scratching the surface

2816
01:59:48,800 --> 01:59:50,400
uh and to be honest i don't know the

2817
01:59:50,400 --> 01:59:52,239
extent to which that is uh you know

2818
01:59:52,239 --> 01:59:54,639
implemented at the time uh temporary

2819
01:59:54,639 --> 01:59:55,360
addresses

2820
01:59:55,360 --> 01:59:58,159
um you know were specified there was

2821
01:59:58,159 --> 01:59:59,760
there's actually an rfc

2822
01:59:59,760 --> 02:00:01,679
i don't remember the status of that rfc

2823
02:00:01,679 --> 02:00:03,199
but to have for example

2824
02:00:03,199 --> 02:00:05,360
a socket option that allows an

2825
02:00:05,360 --> 02:00:06,320
application

2826
02:00:06,320 --> 02:00:08,800
to select if you want temporary

2827
02:00:08,800 --> 02:00:09,599
addresses

2828
02:00:09,599 --> 02:00:11,520
so one of the possible ways in which

2829
02:00:11,520 --> 02:00:13,199
that could be exposed i'm not saying

2830
02:00:13,199 --> 02:00:15,040
that that's the best way i'm saying that

2831
02:00:15,040 --> 02:00:16,880
something like that has been proposed

2832
02:00:16,880 --> 02:00:18,960
could be by via for example

2833
02:00:18,960 --> 02:00:22,080
socket options uh i guess something like

2834
02:00:22,080 --> 02:00:22,639
this

2835
02:00:22,639 --> 02:00:25,520
could be uh feed to the could be fed to

2836
02:00:25,520 --> 02:00:26,320
the tops

2837
02:00:26,320 --> 02:00:28,880
working group but that's me just

2838
02:00:28,880 --> 02:00:31,679
thinking download

2839
02:00:33,280 --> 02:00:36,000
i said as a comment sorry i remember i

2840
02:00:36,000 --> 02:00:36,639
once like

2841
02:00:36,639 --> 02:00:38,320
maybe a couple of years ago i discussed

2842
02:00:38,320 --> 02:00:40,880
this a little bit in you know in tabs

2843
02:00:40,880 --> 02:00:42,639
and essentially and it made sense like

2844
02:00:42,639 --> 02:00:44,239
the false attacks

2845
02:00:44,239 --> 02:00:46,400
said you know we'd like to do something

2846
02:00:46,400 --> 02:00:47,920
you know on the topic that's what i

2847
02:00:47,920 --> 02:00:48,960
remember at least

2848
02:00:48,960 --> 02:00:51,119
but they say well we don't necessarily

2849
02:00:51,119 --> 02:00:52,239
you know have the

2850
02:00:52,239 --> 02:00:54,880
the skill set and the knowledge about

2851
02:00:54,880 --> 02:00:55,599
you know the

2852
02:00:55,599 --> 02:00:58,639
ipv6 specifics so that means that for

2853
02:00:58,639 --> 02:00:59,920
example it could be

2854
02:00:59,920 --> 02:01:02,560
um let's say tabs that you know does the

2855
02:01:02,560 --> 02:01:03,520
protocol stuff

2856
02:01:03,520 --> 02:01:05,280
to actually you know leverage the

2857
02:01:05,280 --> 02:01:08,400
addresses but it might need to be some

2858
02:01:08,400 --> 02:01:10,639
more ipv6 related working group the the

2859
02:01:10,639 --> 02:01:11,679
group that you know

2860
02:01:11,679 --> 02:01:14,480
can uh you know essentially feed the

2861
02:01:14,480 --> 02:01:22,320
ipv6 specific parts

2862
02:01:22,320 --> 02:01:25,440
okay um

2863
02:01:25,679 --> 02:01:28,800
are you suggesting there that we

2864
02:01:28,800 --> 02:01:31,599
change the chat taps charter that we

2865
02:01:31,599 --> 02:01:32,080
change

2866
02:01:32,080 --> 02:01:34,719
the taps people that are contributing to

2867
02:01:34,719 --> 02:01:35,440
it

2868
02:01:35,440 --> 02:01:38,400
that we um file a bunch of drafts with

2869
02:01:38,400 --> 02:01:40,719
caps and get them to build the expertise

2870
02:01:40,719 --> 02:01:41,840
by didn't of

2871
02:01:41,840 --> 02:01:45,360
being overloaded how would you approach

2872
02:01:45,360 --> 02:01:47,360
that

2873
02:01:47,360 --> 02:01:50,800
so from my perspective

2874
02:01:50,800 --> 02:01:53,280
i would think that uh well first of all

2875
02:01:53,280 --> 02:01:54,320
agree on the

2876
02:01:54,320 --> 02:01:57,360
problem and i would say that uh

2877
02:01:57,360 --> 02:02:00,320
you know once we we agree on the problem

2878
02:02:00,320 --> 02:02:01,599
um

2879
02:02:01,599 --> 02:02:04,320
you know one possibility is to have a

2880
02:02:04,320 --> 02:02:05,920
separate document

2881
02:02:05,920 --> 02:02:09,199
in uh you know basic shops that uh

2882
02:02:09,199 --> 02:02:11,599
talks about the the properties that you

2883
02:02:11,599 --> 02:02:12,239
know that

2884
02:02:12,239 --> 02:02:15,520
um about the ipv6 address properties

2885
02:02:15,520 --> 02:02:18,159
and you know how we think they should be

2886
02:02:18,159 --> 02:02:18,880
exposed

2887
02:02:18,880 --> 02:02:22,080
to um for example applications or

2888
02:02:22,080 --> 02:02:24,400
you know no matter where the home is

2889
02:02:24,400 --> 02:02:25,760
whether that's visible

2890
02:02:25,760 --> 02:02:28,800
b6 b6 ops or taps

2891
02:02:28,800 --> 02:02:31,040
essentially if we agree on the problem

2892
02:02:31,040 --> 02:02:33,280
we could discuss with the tops people

2893
02:02:33,280 --> 02:02:34,159
you know of

2894
02:02:34,159 --> 02:02:36,800
what what is the best way in which they

2895
02:02:36,800 --> 02:02:38,000
could eventually

2896
02:02:38,000 --> 02:02:40,080
you know act on that whether they need

2897
02:02:40,080 --> 02:02:42,560
something on basic shops

2898
02:02:42,560 --> 02:02:44,960
uh you know from where they could take

2899
02:02:44,960 --> 02:02:46,400
and you know do the

2900
02:02:46,400 --> 02:02:48,400
protocol related development that might

2901
02:02:48,400 --> 02:02:50,879
be needed

2902
02:02:50,960 --> 02:02:52,719
for example all the discussion about the

2903
02:02:52,719 --> 02:02:54,719
the other properties what properties

2904
02:02:54,719 --> 02:02:57,040
might make sense to be exposed to the

2905
02:02:57,040 --> 02:02:58,400
application and so on

2906
02:02:58,400 --> 02:03:00,719
that should certainly come from you know

2907
02:03:00,719 --> 02:03:02,480
uh you know ipv6 groups

2908
02:03:02,480 --> 02:03:04,000
because when i discussed that with the

2909
02:03:04,000 --> 02:03:05,920
taps people they say well yo that sounds

2910
02:03:05,920 --> 02:03:07,599
interesting but we don't necessarily

2911
02:03:07,599 --> 02:03:08,719
have the skill set

2912
02:03:08,719 --> 02:03:11,199
and we don't necessarily you know know

2913
02:03:11,199 --> 02:03:14,159
the you know the ipv6 details

2914
02:03:14,159 --> 02:03:16,560
so we could not really do the whole

2915
02:03:16,560 --> 02:03:18,719
thing

2916
02:03:18,719 --> 02:03:21,599
well okay so ron and i can talk with the

2917
02:03:21,599 --> 02:03:24,719
cap's chairs and

2918
02:03:24,960 --> 02:03:28,000
copy you on it and explore how

2919
02:03:28,000 --> 02:03:31,920
to go about that um

2920
02:03:33,040 --> 02:03:36,400
i guess i don't want to import caps into

2921
02:03:36,400 --> 02:03:37,679
v6 ops

2922
02:03:37,679 --> 02:03:42,320
um you know caps plugs and taps

2923
02:03:42,320 --> 02:03:45,280
um so we need to figure out the best way

2924
02:03:45,280 --> 02:03:46,639
we can help them

2925
02:03:46,639 --> 02:03:49,040
do what we want them to do something

2926
02:03:49,040 --> 02:03:50,639
that might be important

2927
02:03:50,639 --> 02:03:52,480
to them though could be a set of

2928
02:03:52,480 --> 02:03:54,480
requirements um

2929
02:03:54,480 --> 02:03:57,119
yes i was trying to figure out that

2930
02:03:57,119 --> 02:03:57,840
interface

2931
02:03:57,840 --> 02:03:59,840
i would want something from the

2932
02:03:59,840 --> 02:04:02,560
application that says gee i really wish

2933
02:04:02,560 --> 02:04:04,239
i could tell you that i wanted a

2934
02:04:04,239 --> 02:04:06,000
temporary address or

2935
02:04:06,000 --> 02:04:09,040
uh whatever um

2936
02:04:09,040 --> 02:04:12,320
and that's that's not something that i

2937
02:04:12,320 --> 02:04:14,639
would expect v6 hops to produce but

2938
02:04:14,639 --> 02:04:16,480
something from the application area

2939
02:04:16,480 --> 02:04:21,040
frankly or or transport

2940
02:04:21,040 --> 02:04:23,199
yeah one thing that you know the one one

2941
02:04:23,199 --> 02:04:24,880
one problem with that is that

2942
02:04:24,880 --> 02:04:28,079
the people that uh might benefit from

2943
02:04:28,079 --> 02:04:28,560
that

2944
02:04:28,560 --> 02:04:31,840
they don't necessarily uh you know

2945
02:04:31,840 --> 02:04:33,520
have the detailed knowledge about the

2946
02:04:33,520 --> 02:04:35,360
properties that we have

2947
02:04:35,360 --> 02:04:37,360
so is that the guys that would use it

2948
02:04:37,360 --> 02:04:38,960
maybe they are you know noah

2949
02:04:38,960 --> 02:04:40,159
they are not really aware about the

2950
02:04:40,159 --> 02:04:41,840
details that's why i think they're you

2951
02:04:41,840 --> 02:04:42,159
know

2952
02:04:42,159 --> 02:04:44,000
some sort of coordination between you

2953
02:04:44,000 --> 02:04:46,239
know the the b6 people and the

2954
02:04:46,239 --> 02:04:47,840
application people might be necessary

2955
02:04:47,840 --> 02:04:49,360
here right i don't know you know the

2956
02:04:49,360 --> 02:04:50,480
exact way of

2957
02:04:50,480 --> 02:04:52,800
of doing that and you know for sure i

2958
02:04:52,800 --> 02:04:54,159
think that you know this document is a

2959
02:04:54,159 --> 02:04:55,920
problem statement but for each of the

2960
02:04:55,920 --> 02:04:57,760
things and each of the gaps that are uh

2961
02:04:57,760 --> 02:04:58,960
you know discussed

2962
02:04:58,960 --> 02:05:00,639
there should certainly be you know at

2963
02:05:00,639 --> 02:05:02,400
the very least some spin-off document

2964
02:05:02,400 --> 02:05:03,679
that you know focuses

2965
02:05:03,679 --> 02:05:06,000
you know on that on on coming up with a

2966
02:05:06,000 --> 02:05:06,800
you know a more

2967
02:05:06,800 --> 02:05:10,800
detailed problem statement or a solution

2968
02:05:10,800 --> 02:05:14,320
well that may be um

2969
02:05:14,320 --> 02:05:16,079
you know once again that would be

2970
02:05:16,079 --> 02:05:20,000
something that i would think that uh

2971
02:05:20,000 --> 02:05:23,599
um that ron and i could talk

2972
02:05:23,599 --> 02:05:26,079
including you uh with caps chairs and

2973
02:05:26,079 --> 02:05:27,599
try to figure out

2974
02:05:27,599 --> 02:05:29,119
where where those requirements would

2975
02:05:29,119 --> 02:05:30,960
come from now

2976
02:05:30,960 --> 02:05:33,040
i don't want to we're actually five

2977
02:05:33,040 --> 02:05:34,560
minutes overtime

2978
02:05:34,560 --> 02:05:37,520
uh and we've still got luigi and bob in

2979
02:05:37,520 --> 02:05:38,480
the queue

2980
02:05:38,480 --> 02:05:42,400
so let me turn this to them uh luigi

2981
02:05:42,400 --> 02:05:45,360
what did you have to say

2982
02:05:45,840 --> 02:05:47,760
you know it's just to thank for the

2983
02:05:47,760 --> 02:05:49,119
presentation is uh

2984
02:05:49,119 --> 02:05:51,760
it's a nice document uh i i joined what

2985
02:05:51,760 --> 02:05:53,440
you said about the requirements

2986
02:05:53,440 --> 02:05:57,199
that should be written down uh i just

2987
02:05:57,199 --> 02:05:59,040
wanted to say to fernando that

2988
02:05:59,040 --> 02:06:02,960
we have something related

2989
02:06:03,440 --> 02:06:06,000
which is a challenging scenario on

2990
02:06:06,000 --> 02:06:07,280
internet addressing

2991
02:06:07,280 --> 02:06:09,840
we take a more general perspective it's

2992
02:06:09,840 --> 02:06:10,800
not like

2993
02:06:10,800 --> 02:06:14,239
centered but uh yeah maybe we can talk

2994
02:06:14,239 --> 02:06:14,719
more

2995
02:06:14,719 --> 02:06:16,800
offline on this because i think the two

2996
02:06:16,800 --> 02:06:18,079
documents are related

2997
02:06:18,079 --> 02:06:21,920
so pretty sure thank you very much

2998
02:06:21,920 --> 02:06:24,719
okay thank you uh bob did you want to

2999
02:06:24,719 --> 02:06:26,480
say something

3000
02:06:26,480 --> 02:06:29,199
uh yeah i'll be quick um yeah i think

3001
02:06:29,199 --> 02:06:30,000
there may be some

3002
02:06:30,000 --> 02:06:32,400
things in here that are worth pursuing

3003
02:06:32,400 --> 02:06:33,360
but i'm not

3004
02:06:33,360 --> 02:06:35,199
comfortable with the sort of large

3005
02:06:35,199 --> 02:06:36,719
document that covers

3006
02:06:36,719 --> 02:06:39,840
a whole bunch of stuff uh and as jen

3007
02:06:39,840 --> 02:06:42,000
said it seems to

3008
02:06:42,000 --> 02:06:44,960
um be a little confused about like what

3009
02:06:44,960 --> 02:06:46,560
the properties of an address

3010
02:06:46,560 --> 02:06:49,280
is because just because you get

3011
02:06:49,280 --> 02:06:50,960
renumbered the address is still

3012
02:06:50,960 --> 02:06:53,119
quite stable you just don't get to use

3013
02:06:53,119 --> 02:06:54,159
it anymore

3014
02:06:54,159 --> 02:06:57,440
so i think you know i i think pull

3015
02:06:57,440 --> 02:07:00,560
using this pulling this out just for

3016
02:07:00,560 --> 02:07:02,239
some specific problems

3017
02:07:02,239 --> 02:07:04,079
we were just talking would make sense

3018
02:07:04,079 --> 02:07:05,520
but i'm not

3019
02:07:05,520 --> 02:07:07,119
very comfortable with sort of the

3020
02:07:07,119 --> 02:07:08,719
umbrella document

3021
02:07:08,719 --> 02:07:10,960
that's trying to cover lots of topics

3022
02:07:10,960 --> 02:07:14,320
separately thank you

3023
02:07:14,480 --> 02:07:19,040
okay um so thanks for that

3024
02:07:19,040 --> 02:07:24,239
um before we go let me ask a question

3025
02:07:24,239 --> 02:07:27,760
for the last several meetings uh

3026
02:07:27,760 --> 02:07:31,920
ron and i have uh basically taken a week

3027
02:07:31,920 --> 02:07:35,520
and asked the working group to

3028
02:07:35,760 --> 02:07:38,400
uh to talk about a particular document

3029
02:07:38,400 --> 02:07:39,440
each week

3030
02:07:39,440 --> 02:07:44,480
have people found that to be useful um

3031
02:07:47,199 --> 02:07:49,679
let's hear i guess i should actually

3032
02:07:49,679 --> 02:07:50,719
make this a

3033
02:07:50,719 --> 02:07:55,840
hand raise kind of a thing um

3034
02:08:01,199 --> 02:08:09,839
okay show of hands tool

3035
02:08:16,159 --> 02:08:20,079
so okay i have

3036
02:08:21,040 --> 02:08:24,320
just put a question out and uh you guys

3037
02:08:24,320 --> 02:08:26,480
can either raise your hand to say yes

3038
02:08:26,480 --> 02:08:30,400
or don't raise your hand to say no

3039
02:08:30,400 --> 02:08:32,719
um

3040
02:08:34,840 --> 02:08:37,840
so uh if you're finding

3041
02:08:37,840 --> 02:08:40,800
those sessions to be useful to to kind

3042
02:08:40,800 --> 02:08:41,119
of

3043
02:08:41,119 --> 02:08:43,520
coordinate on fine let's talk about this

3044
02:08:43,520 --> 02:08:44,719
document

3045
02:08:44,719 --> 02:08:48,320
um then i want to continue with that

3046
02:08:48,320 --> 02:08:51,119
if it's not useful to you then it's

3047
02:08:51,119 --> 02:08:52,800
something i shouldn't be doing or ron

3048
02:08:52,800 --> 02:08:54,400
and i shouldn't be doing

3049
02:08:54,400 --> 02:08:59,040
um so

3050
02:09:00,159 --> 02:09:02,960
okay out of 47 participants at this

3051
02:09:02,960 --> 02:09:05,199
point i've got 11 that said yes it's

3052
02:09:05,199 --> 02:09:06,239
useful to me

3053
02:09:06,239 --> 02:09:09,119
and i guess the rest of them that didn't

3054
02:09:09,119 --> 02:09:11,199
really find it useful

3055
02:09:11,199 --> 02:09:19,839
um 12. um

3056
02:09:22,719 --> 02:09:25,520
okay i'll tell you what we're going to

3057
02:09:25,520 --> 02:09:25,920
uh

3058
02:09:25,920 --> 02:09:30,639
take these for i guess documents

3059
02:09:30,639 --> 02:09:35,760
and uh have that discussion uh

3060
02:09:36,719 --> 02:09:40,719
and uh if people find it useful they can

3061
02:09:40,719 --> 02:09:41,679
comment on it

3062
02:09:41,679 --> 02:09:45,040
and we'll see where that goes but uh

3063
02:09:45,040 --> 02:09:48,239
so a meta meta question is uh do you

3064
02:09:48,239 --> 02:09:50,879
want to do that

3065
02:09:52,960 --> 02:09:55,840
and with that we're at this point on

3066
02:09:55,840 --> 02:09:57,360
nine minutes overtime

3067
02:09:57,360 --> 02:10:00,880
and uh i tend to think we should

3068
02:10:00,880 --> 02:10:03,199
probably close the meeting

3069
02:10:03,199 --> 02:10:08,559
so uh consider this meeting adjourned

3070
02:10:09,599 --> 02:10:14,960
take care everybody

3071
02:10:14,960 --> 02:10:17,280
bye

3072
02:10:24,360 --> 02:10:27,360
bye

