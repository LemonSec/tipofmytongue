1
00:00:14,920 --> 00:00:17,920
so

2
00:00:43,040 --> 00:00:46,559
hello everyone welcome to six man

3
00:00:46,559 --> 00:00:50,800
holy and i are cheering

4
00:00:50,960 --> 00:00:53,520
um i think we have enough people to get

5
00:00:53,520 --> 00:00:55,840
going

6
00:00:56,879 --> 00:01:00,718
um next slide

7
00:01:02,160 --> 00:01:04,720
uh this is the note well you should note

8
00:01:04,720 --> 00:01:07,040
it well

9
00:01:07,040 --> 00:01:12,640
next slide

10
00:01:12,640 --> 00:01:16,400
um in this trivia chaperone you're

11
00:01:16,400 --> 00:01:19,200
obviously in the mud echo session i hope

12
00:01:19,200 --> 00:01:22,799
um barbara and suping

13
00:01:22,799 --> 00:01:26,159
are taking minutes our thanks to them

14
00:01:26,159 --> 00:01:29,360
uh minutes will be available um

15
00:01:29,360 --> 00:01:31,360
and there's the link to where the

16
00:01:31,360 --> 00:01:32,799
presentations are i think

17
00:01:32,799 --> 00:01:35,759
meat echo also has a a button that gets

18
00:01:35,759 --> 00:01:37,600
you to that

19
00:01:37,600 --> 00:01:41,759
next slide

20
00:01:41,759 --> 00:01:43,840
so um we did something a little

21
00:01:43,840 --> 00:01:45,439
different for these sessions

22
00:01:45,439 --> 00:01:50,399
we had two um 120 minute sessions

23
00:01:50,399 --> 00:01:54,960
and a variety of session requests

24
00:01:54,960 --> 00:01:59,119
so for today we're doing the

25
00:01:59,119 --> 00:02:01,759
new internet drafts and drafts that have

26
00:02:01,759 --> 00:02:03,360
had some discussion but

27
00:02:03,360 --> 00:02:04,960
there doesn't seem to be a lot of

28
00:02:04,960 --> 00:02:07,360
working group support

29
00:02:07,360 --> 00:02:10,800
the goal is to give time to the speakers

30
00:02:10,800 --> 00:02:12,720
to basically make the case for what they

31
00:02:12,720 --> 00:02:14,160
are proposing and

32
00:02:14,160 --> 00:02:17,120
see if the working group is interested

33
00:02:17,120 --> 00:02:18,400
the second session

34
00:02:18,400 --> 00:02:21,599
on thursday morning or at least thursday

35
00:02:21,599 --> 00:02:22,000
morning

36
00:02:22,000 --> 00:02:25,840
my time will include the

37
00:02:25,840 --> 00:02:28,879
usual introduction and document status

38
00:02:28,879 --> 00:02:31,040
we're getting a report from the spring

39
00:02:31,040 --> 00:02:34,640
compression design team

40
00:02:35,040 --> 00:02:38,239
and then working group and act active

41
00:02:38,239 --> 00:02:41,280
working group drafts

42
00:02:41,599 --> 00:02:44,399
next slide

43
00:02:44,959 --> 00:02:48,400
and so this is today's agenda

44
00:02:48,400 --> 00:02:52,480
um hopefully while the speakers are here

45
00:02:54,560 --> 00:02:57,280
next slide

46
00:02:57,840 --> 00:03:02,159
and this agenda for thursday

47
00:03:03,200 --> 00:03:06,239
and so any any comments on the agenda

48
00:03:06,239 --> 00:03:09,280
and gender bashing

49
00:03:12,319 --> 00:03:15,840
okay don't see any next slide

50
00:03:15,840 --> 00:03:18,000
then we are ready for our first speaker

51
00:03:18,000 --> 00:03:20,239
i believe

52
00:03:20,239 --> 00:03:25,360
let's see so linda are you here

53
00:03:25,360 --> 00:03:28,400
can you hear me we can hear you

54
00:03:28,400 --> 00:03:30,720
yeah please that's great that's great

55
00:03:30,720 --> 00:03:32,159
okay so

56
00:03:32,159 --> 00:03:36,319
so this is uh about ipv6 ipv6 solution

57
00:03:36,319 --> 00:03:39,519
for the 5g edge computing sticky service

58
00:03:39,519 --> 00:03:42,640
we presented this at ietf109

59
00:03:42,640 --> 00:03:45,200
and we got quite a few comments so we

60
00:03:45,200 --> 00:03:47,040
address those comments and come back

61
00:03:47,040 --> 00:03:48,560
with the

62
00:03:48,560 --> 00:03:52,319
update next slide please

63
00:03:52,640 --> 00:03:55,200
okay so this is just a brief update

64
00:03:55,200 --> 00:03:56,879
background of the

65
00:03:56,879 --> 00:04:00,000
5th computing project so this is

66
00:04:00,000 --> 00:04:03,599
the 3gpp tr23 for

67
00:04:03,599 --> 00:04:07,360
748 so in that project it identified

68
00:04:07,360 --> 00:04:11,519
many um mission critical use cases

69
00:04:11,519 --> 00:04:14,640
for local they call local data network

70
00:04:14,640 --> 00:04:15,519
for the 5g

71
00:04:15,519 --> 00:04:18,560
core to achieve those

72
00:04:18,560 --> 00:04:21,120
edge computing one of the requirement

73
00:04:21,120 --> 00:04:22,079
there is

74
00:04:22,079 --> 00:04:24,880
those edge computing services are

75
00:04:24,880 --> 00:04:25,840
controlled by

76
00:04:25,840 --> 00:04:28,720
their application function controller

77
00:04:28,720 --> 00:04:32,240
and they are using any cash addresses

78
00:04:32,240 --> 00:04:35,520
and you can see here

79
00:04:35,520 --> 00:04:38,960
that from battery core

80
00:04:38,960 --> 00:04:42,000
user traffic is anchored

81
00:04:42,000 --> 00:04:46,000
to pack a psa pdu

82
00:04:46,000 --> 00:04:48,160
pdu session anchor which is part of the

83
00:04:48,160 --> 00:04:49,600
function of the

84
00:04:49,600 --> 00:04:52,800
user plan function and there's always

85
00:04:52,800 --> 00:04:56,560
router to ingress router to the

86
00:04:56,560 --> 00:05:01,440
ldn local data network and those

87
00:05:01,440 --> 00:05:03,759
services edge computing services any

88
00:05:03,759 --> 00:05:04,960
kind servers

89
00:05:04,960 --> 00:05:09,039
are located in the mini data center

90
00:05:09,039 --> 00:05:12,800
in very close proximity to the

91
00:05:12,800 --> 00:05:15,919
upf function there are many of them

92
00:05:15,919 --> 00:05:20,160
to achieve the mission critical services

93
00:05:20,160 --> 00:05:23,680
so the assumption is that those servers

94
00:05:23,680 --> 00:05:24,400
are not

95
00:05:24,400 --> 00:05:27,759
directly attached and not very far

96
00:05:27,759 --> 00:05:30,960
and there are many of them there and any

97
00:05:30,960 --> 00:05:32,880
cache is used

98
00:05:32,880 --> 00:05:36,160
to address multiple servers actually

99
00:05:36,160 --> 00:05:38,880
server to up to the network perspective

100
00:05:38,880 --> 00:05:39,919
actually

101
00:05:39,919 --> 00:05:41,840
maybe the application layer load

102
00:05:41,840 --> 00:05:43,919
balancers they may have multiple load

103
00:05:43,919 --> 00:05:46,160
balancers with multiple servers behind

104
00:05:46,160 --> 00:05:46,720
them

105
00:05:46,720 --> 00:05:49,440
but from the network perspective it's

106
00:05:49,440 --> 00:05:50,560
the only the

107
00:05:50,560 --> 00:05:53,840
the load balancer be visible

108
00:05:53,840 --> 00:05:56,719
next slide please

109
00:05:58,240 --> 00:06:01,039
okay so um in that document it

110
00:06:01,039 --> 00:06:03,440
identifies many benefits of the anycast

111
00:06:03,440 --> 00:06:04,639
right basically

112
00:06:04,639 --> 00:06:07,199
leverage a network layer to provide to

113
00:06:07,199 --> 00:06:11,199
optimize the balancing among different

114
00:06:11,280 --> 00:06:14,400
load balancer and also eliminate the

115
00:06:14,400 --> 00:06:16,000
single point of failure

116
00:06:16,000 --> 00:06:19,039
at a particular load balancer

117
00:06:19,039 --> 00:06:23,199
and avoid the stealth entry in the user

118
00:06:23,199 --> 00:06:23,840
device

119
00:06:23,840 --> 00:06:26,560
because some of them don't always query

120
00:06:26,560 --> 00:06:28,639
dns when they change from one location

121
00:06:28,639 --> 00:06:31,120
to another location

122
00:06:31,120 --> 00:06:34,319
but they also introduce problems as well

123
00:06:34,319 --> 00:06:36,960
because they are so close in proximity

124
00:06:36,960 --> 00:06:37,440
and

125
00:06:37,440 --> 00:06:40,160
so that the routing distance are very

126
00:06:40,160 --> 00:06:41,680
small the differences

127
00:06:41,680 --> 00:06:44,479
to different egress routers are not very

128
00:06:44,479 --> 00:06:45,360
large

129
00:06:45,360 --> 00:06:48,639
the benefit is any of them can serve the

130
00:06:48,639 --> 00:06:49,599
service

131
00:06:49,599 --> 00:06:53,759
and but um but you need to stick to

132
00:06:53,759 --> 00:06:57,039
specific ones if you move

133
00:06:57,039 --> 00:06:58,800
and they could have unbalanced

134
00:06:58,800 --> 00:07:00,240
distribution like

135
00:07:00,240 --> 00:07:03,280
because the ue move frequently so that

136
00:07:03,280 --> 00:07:05,759
even though you plan ahead you put three

137
00:07:05,759 --> 00:07:06,800
load balancing

138
00:07:06,800 --> 00:07:10,319
attached to three routers because ue

139
00:07:10,319 --> 00:07:11,440
movement

140
00:07:11,440 --> 00:07:14,560
all um anchored towards like particular

141
00:07:14,560 --> 00:07:15,280
site

142
00:07:15,280 --> 00:07:19,039
and so causing one site to be over

143
00:07:19,039 --> 00:07:22,160
utilized others being less

144
00:07:22,160 --> 00:07:24,160
on top of that you could have other

145
00:07:24,160 --> 00:07:26,160
issues with more additional servers

146
00:07:26,160 --> 00:07:27,840
being added

147
00:07:27,840 --> 00:07:30,000
during the operation during the lifetime

148
00:07:30,000 --> 00:07:32,240
of the server

149
00:07:32,240 --> 00:07:35,199
next page please

150
00:07:36,639 --> 00:07:39,680
so the sticky service is really

151
00:07:39,680 --> 00:07:44,080
about the assumption that

152
00:07:44,080 --> 00:07:46,879
not all services need sticky service

153
00:07:46,879 --> 00:07:48,000
only the ones

154
00:07:48,000 --> 00:07:51,280
which need the network to optimize

155
00:07:51,280 --> 00:07:54,080
they register with the 3gpp and then

156
00:07:54,080 --> 00:07:55,039
switch pp

157
00:07:55,039 --> 00:07:57,440
recognize those services and then the

158
00:07:57,440 --> 00:07:58,720
network provide

159
00:07:58,720 --> 00:08:01,840
additional optimization to distribute

160
00:08:01,840 --> 00:08:04,000
among different equest routers

161
00:08:04,000 --> 00:08:07,039
so that's very important part because

162
00:08:07,039 --> 00:08:10,639
we are not doing it for everybody acls

163
00:08:10,639 --> 00:08:14,879
are used on the egress router like r1 r2

164
00:08:14,879 --> 00:08:18,160
and english router rarb so that's very

165
00:08:18,160 --> 00:08:19,599
important

166
00:08:19,599 --> 00:08:23,520
part next page please

167
00:08:24,560 --> 00:08:27,840
so next page

168
00:08:28,879 --> 00:08:32,080
so um using the tunneling to achieve

169
00:08:32,080 --> 00:08:33,360
sticky service

170
00:08:33,360 --> 00:08:37,039
what it is is one the router ingress

171
00:08:37,039 --> 00:08:38,479
router ra

172
00:08:38,479 --> 00:08:41,760
based on the running status um that is

173
00:08:41,760 --> 00:08:42,958
distributed from

174
00:08:42,958 --> 00:08:46,399
the e-waste router and create a tunnel

175
00:08:46,399 --> 00:08:50,560
and to the specific um the

176
00:08:50,560 --> 00:08:53,839
the egress router like r1 be selected

177
00:08:53,839 --> 00:08:54,240
and

178
00:08:54,240 --> 00:08:58,000
when the ue moved to

179
00:08:58,000 --> 00:09:02,240
another location the router itself

180
00:09:02,240 --> 00:09:05,680
will be able to distribute the sticky

181
00:09:05,680 --> 00:09:06,959
service id

182
00:09:06,959 --> 00:09:10,560
and flow id and sticky egress address

183
00:09:10,560 --> 00:09:13,839
to the neighboring ingress router those

184
00:09:13,839 --> 00:09:14,240
are

185
00:09:14,240 --> 00:09:16,480
statically configured each router is

186
00:09:16,480 --> 00:09:17,600
configured with

187
00:09:17,600 --> 00:09:20,080
a set of the routers which are close by

188
00:09:20,080 --> 00:09:20,720
that

189
00:09:20,720 --> 00:09:23,440
the service when they move to anchor to

190
00:09:23,440 --> 00:09:25,519
their corresponding psa

191
00:09:25,519 --> 00:09:28,720
their the user traffic should stay

192
00:09:28,720 --> 00:09:32,320
together with um to the sticky egress

193
00:09:32,320 --> 00:09:34,880
bear in mind that many of those

194
00:09:34,880 --> 00:09:36,160
applications

195
00:09:36,160 --> 00:09:39,760
are capable of handling um

196
00:09:39,760 --> 00:09:42,080
different locations it just at

197
00:09:42,080 --> 00:09:43,440
application layer

198
00:09:43,440 --> 00:09:46,399
they can actually coordinate and you

199
00:09:46,399 --> 00:09:47,920
move the session id

200
00:09:47,920 --> 00:09:50,240
at the application layer but it just

201
00:09:50,240 --> 00:09:51,200
takes time

202
00:09:51,200 --> 00:09:53,600
and for some mission critical services

203
00:09:53,600 --> 00:09:54,480
they would like

204
00:09:54,480 --> 00:09:57,040
network to help them to achieve better

205
00:09:57,040 --> 00:09:58,880
to stick to the original one

206
00:09:58,880 --> 00:10:02,560
to finish the session um

207
00:10:02,560 --> 00:10:05,839
next page please

208
00:10:06,399 --> 00:10:10,079
so um internal service

209
00:10:10,079 --> 00:10:13,839
um that the 5g core could coordinate

210
00:10:13,839 --> 00:10:15,519
with the ingress router

211
00:10:15,519 --> 00:10:19,760
so that um so that that

212
00:10:19,760 --> 00:10:22,079
um the because the session movement the

213
00:10:22,079 --> 00:10:24,399
session control in the 5gc

214
00:10:24,399 --> 00:10:27,920
5g core can know that when you e move

215
00:10:27,920 --> 00:10:28,480
from

216
00:10:28,480 --> 00:10:32,399
um side a to side b there's a session

217
00:10:32,399 --> 00:10:35,839
control that keep that grease period

218
00:10:35,839 --> 00:10:39,440
transition it knows where the next upf

219
00:10:39,440 --> 00:10:42,160
is going to a correspondingly you can

220
00:10:42,160 --> 00:10:43,040
notify

221
00:10:43,040 --> 00:10:45,360
the router telling the router ahead of

222
00:10:45,360 --> 00:10:46,399
time that

223
00:10:46,399 --> 00:10:49,440
this particular ue is moving um

224
00:10:49,440 --> 00:10:52,720
from psa1 to psa2

225
00:10:52,720 --> 00:10:55,680
the corresponding the ingress router rb

226
00:10:55,680 --> 00:10:56,800
so with this

227
00:10:56,800 --> 00:10:58,880
the router a doesn't have to send to

228
00:10:58,880 --> 00:11:00,959
multiple

229
00:11:00,959 --> 00:11:03,120
english routers anymore it only sent you

230
00:11:03,120 --> 00:11:06,000
one but needed information

231
00:11:06,000 --> 00:11:08,560
next page

232
00:11:12,320 --> 00:11:15,760
so here it is um like um

233
00:11:15,760 --> 00:11:18,959
we can either use the destination um

234
00:11:18,959 --> 00:11:22,160
extension header uh or the hubba hub

235
00:11:22,160 --> 00:11:25,760
um extension header in the tunnel so

236
00:11:25,760 --> 00:11:26,480
that

237
00:11:26,480 --> 00:11:30,000
the traffic when coming back and

238
00:11:30,000 --> 00:11:32,399
in the in the middle of the network they

239
00:11:32,399 --> 00:11:34,160
know where to send it to

240
00:11:34,160 --> 00:11:37,920
um in a tunnel um and keeping track of

241
00:11:37,920 --> 00:11:40,000
the information so that

242
00:11:40,000 --> 00:11:43,600
all the intermediate nodes is aware of

243
00:11:43,600 --> 00:11:45,839
this particular service has to be sent

244
00:11:45,839 --> 00:11:46,880
to the ingress

245
00:11:46,880 --> 00:11:52,160
r1 next page please

246
00:11:53,519 --> 00:11:57,120
and in the document we propose this um

247
00:11:57,120 --> 00:12:00,560
sub tlv which we call sticky distance

248
00:12:00,560 --> 00:12:01,760
sub tlv

249
00:12:01,760 --> 00:12:04,240
so with sticky service we have sticky

250
00:12:04,240 --> 00:12:05,040
type

251
00:12:05,040 --> 00:12:08,560
um like and the sticky type showing that

252
00:12:08,560 --> 00:12:10,240
how much

253
00:12:10,240 --> 00:12:12,079
this particular service needs to stick

254
00:12:12,079 --> 00:12:14,480
to the original egress

255
00:12:14,480 --> 00:12:18,160
some can be strongly need to be stick to

256
00:12:18,160 --> 00:12:22,560
some can be loosely sticked to

257
00:12:22,560 --> 00:12:25,279
and then there's most important

258
00:12:25,279 --> 00:12:26,079
information

259
00:12:26,079 --> 00:12:30,240
is the destination um um

260
00:12:30,240 --> 00:12:32,560
destination um basically egress

261
00:12:32,560 --> 00:12:33,680
addresses

262
00:12:33,680 --> 00:12:36,320
uh egress address uh for the sticky for

263
00:12:36,320 --> 00:12:39,200
the service to be sticked to

264
00:12:39,200 --> 00:12:42,160
next page please

265
00:12:43,040 --> 00:12:46,000
um so this is mapping to apn there's a

266
00:12:46,000 --> 00:12:48,880
big initiative on the apn

267
00:12:48,880 --> 00:12:51,519
for application aware they propose this

268
00:12:51,519 --> 00:12:52,160
application

269
00:12:52,160 --> 00:12:55,519
aware id and application aware service

270
00:12:55,519 --> 00:12:56,959
parameters of tovs

271
00:12:56,959 --> 00:12:59,440
so we just map into what they have

272
00:12:59,440 --> 00:13:00,880
proposed

273
00:13:00,880 --> 00:13:03,839
so they have a sla level um here we have

274
00:13:03,839 --> 00:13:05,040
sticky level

275
00:13:05,040 --> 00:13:07,920
mapped to the sla level they have

276
00:13:07,920 --> 00:13:09,279
application id

277
00:13:09,279 --> 00:13:11,440
here is the sticky service id mapped

278
00:13:11,440 --> 00:13:13,360
into

279
00:13:13,360 --> 00:13:15,760
that particular field another one is

280
00:13:15,760 --> 00:13:16,959
their user id

281
00:13:16,959 --> 00:13:20,639
which can be the ue information

282
00:13:20,639 --> 00:13:23,040
and then there's a flow id and then the

283
00:13:23,040 --> 00:13:25,200
sticky service sub-uv

284
00:13:25,200 --> 00:13:27,360
is mapped into the service parameter

285
00:13:27,360 --> 00:13:28,720
subtly

286
00:13:28,720 --> 00:13:32,320
they're just showing how those can be

287
00:13:32,320 --> 00:13:36,320
utilized of the apn six that document

288
00:13:36,320 --> 00:13:40,079
over there they mentioned about using um

289
00:13:40,079 --> 00:13:41,839
how by hub count to carry the

290
00:13:41,839 --> 00:13:43,440
information or

291
00:13:43,440 --> 00:13:46,839
if the local data network is the

292
00:13:46,839 --> 00:13:50,320
srv6 and how do we carry the information

293
00:13:50,320 --> 00:13:50,560
in

294
00:13:50,560 --> 00:13:53,839
srb6 header so all that are applicable

295
00:13:53,839 --> 00:13:56,800
when we map into those application aware

296
00:13:56,800 --> 00:13:58,560
id

297
00:13:58,560 --> 00:14:02,000
next page i think that's

298
00:14:02,000 --> 00:14:06,079
it and we need your feedback and

299
00:14:06,079 --> 00:14:08,639
fortunately potentially we think the

300
00:14:08,639 --> 00:14:12,959
trap is ready for working group adoption

301
00:14:15,680 --> 00:14:19,680
so where do you see i mean

302
00:14:19,680 --> 00:14:22,320
there's a clearly work going on in other

303
00:14:22,320 --> 00:14:23,880
areas here

304
00:14:23,880 --> 00:14:27,839
is six man the best home for this or

305
00:14:27,839 --> 00:14:30,880
you know could six man review

306
00:14:30,880 --> 00:14:32,800
any destination options specified

307
00:14:32,800 --> 00:14:34,160
elsewhere for example

308
00:14:34,160 --> 00:14:36,079
what are the other working groups

309
00:14:36,079 --> 00:14:37,440
working on this

310
00:14:37,440 --> 00:14:40,000
okay so we have proposed in several

311
00:14:40,000 --> 00:14:41,040
working groups

312
00:14:41,040 --> 00:14:44,160
for different aspects for six men is

313
00:14:44,160 --> 00:14:46,079
only to identify the

314
00:14:46,079 --> 00:14:48,639
the next hop option header or

315
00:14:48,639 --> 00:14:49,440
destination

316
00:14:49,440 --> 00:14:52,000
option header to carry the sticky

317
00:14:52,000 --> 00:14:53,120
information

318
00:14:53,120 --> 00:14:55,839
and that's what the work to be done at

319
00:14:55,839 --> 00:14:56,800
six men

320
00:14:56,800 --> 00:14:59,839
at idr working group is to carry the

321
00:14:59,839 --> 00:15:00,959
information

322
00:15:00,959 --> 00:15:02,800
from the egress router like equine

323
00:15:02,800 --> 00:15:04,160
swaddler um

324
00:15:04,160 --> 00:15:06,880
keep track of all those all the packets

325
00:15:06,880 --> 00:15:07,360
to

326
00:15:07,360 --> 00:15:10,639
and from those particular

327
00:15:10,639 --> 00:15:14,240
anycast servers like load balancer um

328
00:15:14,240 --> 00:15:17,360
they also have information about

329
00:15:17,360 --> 00:15:21,040
their their the site

330
00:15:21,040 --> 00:15:23,519
capacity that's because some mini data

331
00:15:23,519 --> 00:15:24,800
centers may have

332
00:15:24,800 --> 00:15:27,519
higher capacity than others and you

333
00:15:27,519 --> 00:15:27,839
could

334
00:15:27,839 --> 00:15:29,680
also carry the information about

335
00:15:29,680 --> 00:15:32,079
preference like for example one

336
00:15:32,079 --> 00:15:34,160
mini data center has higher network

337
00:15:34,160 --> 00:15:35,120
capacity

338
00:15:35,120 --> 00:15:38,399
or more preference than others so those

339
00:15:38,399 --> 00:15:39,360
information

340
00:15:39,360 --> 00:15:41,440
need to be propagated to the ingress

341
00:15:41,440 --> 00:15:42,720
router so that

342
00:15:42,720 --> 00:15:46,160
the past computation can include

343
00:15:46,160 --> 00:15:49,040
um not only the round trip delay because

344
00:15:49,040 --> 00:15:50,240
typically today

345
00:15:50,240 --> 00:15:52,480
uh networking when we have multiple

346
00:15:52,480 --> 00:15:54,079
paths to a destination

347
00:15:54,079 --> 00:15:58,000
we always use our network parameter like

348
00:15:58,000 --> 00:16:00,560
distance routing distance to determine

349
00:16:00,560 --> 00:16:02,399
which one is the optimal one

350
00:16:02,399 --> 00:16:04,880
so with those additional information the

351
00:16:04,880 --> 00:16:06,000
ingress router

352
00:16:06,000 --> 00:16:09,199
will be able to uh combine the routing

353
00:16:09,199 --> 00:16:10,160
distance

354
00:16:10,160 --> 00:16:13,920
in addition to um the the capacity

355
00:16:13,920 --> 00:16:17,759
or um of site preference added together

356
00:16:17,759 --> 00:16:20,720
apply the combined weight to choose the

357
00:16:20,720 --> 00:16:22,000
optimal path

358
00:16:22,000 --> 00:16:25,519
and there's also a proposal in the ospf

359
00:16:25,519 --> 00:16:28,880
extension that allow ospf to carry those

360
00:16:28,880 --> 00:16:32,399
information to the to the nodes which

361
00:16:32,399 --> 00:16:36,000
care about choosing the path based on

362
00:16:36,000 --> 00:16:38,720
not only the routing distance but also

363
00:16:38,720 --> 00:16:39,759
the weight

364
00:16:39,759 --> 00:16:44,399
of the egress yep okay thank you

365
00:16:45,040 --> 00:16:48,320
go ahead fred hi there um

366
00:16:48,320 --> 00:16:51,839
yeah so they have a draft in v6 ops as

367
00:16:51,839 --> 00:16:52,639
well

368
00:16:52,639 --> 00:16:55,279
um they will be asking for working group

369
00:16:55,279 --> 00:16:56,560
adoption

370
00:16:56,560 --> 00:17:00,320
today and um i don't expect it

371
00:17:00,320 --> 00:17:02,320
we discussed this in email i don't

372
00:17:02,320 --> 00:17:04,319
expect to see the working group adopt it

373
00:17:04,319 --> 00:17:06,959
unless it uh is conformance to the v6

374
00:17:06,959 --> 00:17:08,480
ops charter

375
00:17:08,480 --> 00:17:11,919
um at the moment the draft in v6 ops

376
00:17:11,919 --> 00:17:15,280
changes of ipv sex

377
00:17:15,280 --> 00:17:17,520
and you know that that's your ball not

378
00:17:17,520 --> 00:17:19,839
mine

379
00:17:21,760 --> 00:17:25,760
yes i think our well judgment so far has

380
00:17:25,760 --> 00:17:26,480
been

381
00:17:26,480 --> 00:17:29,039
that we haven't seen much discussion on

382
00:17:29,039 --> 00:17:30,400
the mailing list

383
00:17:30,400 --> 00:17:32,559
so we are you know unsure of of the

384
00:17:32,559 --> 00:17:34,160
interest in in this work

385
00:17:34,160 --> 00:17:36,480
um if there is enough insufficient

386
00:17:36,480 --> 00:17:38,240
interest in a working group

387
00:17:38,240 --> 00:17:40,960
i suppose i could use the hands to show

388
00:17:40,960 --> 00:17:43,280
hands tool and see what

389
00:17:43,280 --> 00:17:46,400
if people have i have a

390
00:17:46,400 --> 00:17:49,440
question for linda um so the work that

391
00:17:49,440 --> 00:17:49,760
this

392
00:17:49,760 --> 00:17:52,880
is related to like the apn work

393
00:17:52,880 --> 00:17:55,120
has that been adopted in another working

394
00:17:55,120 --> 00:17:56,799
group

395
00:17:56,799 --> 00:17:59,679
no no because we just propose everything

396
00:17:59,679 --> 00:18:01,919
just last it's 109.

397
00:18:01,919 --> 00:18:05,440
so the idr we've learned to ask

398
00:18:05,440 --> 00:18:08,640
my thinking is that um

399
00:18:08,640 --> 00:18:10,240
it would be more appropriate to ask six

400
00:18:10,240 --> 00:18:11,919
men to adopt this

401
00:18:11,919 --> 00:18:14,240
once it's actually a real work item

402
00:18:14,240 --> 00:18:15,679
somewhere else

403
00:18:15,679 --> 00:18:18,080
and then then it would be reasonable for

404
00:18:18,080 --> 00:18:19,360
us to evaluate

405
00:18:19,360 --> 00:18:22,720
you know the the ipv6

406
00:18:22,720 --> 00:18:26,480
extension headers you're proposing but

407
00:18:26,480 --> 00:18:28,720
i think until that happens i think it

408
00:18:28,720 --> 00:18:32,000
might be i think it's a little early

409
00:18:32,000 --> 00:18:34,160
i see that's a good good suggestion

410
00:18:34,160 --> 00:18:36,160
thank you

411
00:18:36,160 --> 00:18:38,720
i did start a race or hand session so

412
00:18:38,720 --> 00:18:39,200
you're

413
00:18:39,200 --> 00:18:43,039
um if you wanna

414
00:18:43,039 --> 00:18:46,080
raise your hand or not there is a uh

415
00:18:46,080 --> 00:18:48,160
session ongoing while we uh move on to

416
00:18:48,160 --> 00:18:49,520
the next presentation

417
00:18:49,520 --> 00:18:54,160
uh thanks a lot linda thank you

418
00:18:54,160 --> 00:18:56,559
so alexander i think you're presenting

419
00:18:56,559 --> 00:18:58,160
the uh

420
00:18:58,160 --> 00:19:00,480
the next session uh please go ahead feel

421
00:19:00,480 --> 00:19:03,039
free to enable video as well if you uh

422
00:19:03,039 --> 00:19:06,240
if you want to uh

423
00:19:06,240 --> 00:19:11,840
yes hello

424
00:19:18,880 --> 00:19:21,679
thank you for the opportunity to present

425
00:19:21,679 --> 00:19:23,360
i am going to talk about

426
00:19:23,360 --> 00:19:25,200
slack stateless address auto

427
00:19:25,200 --> 00:19:26,559
configuration

428
00:19:26,559 --> 00:19:30,160
with prefixes of arbitrary length in the

429
00:19:30,160 --> 00:19:33,760
pio we

430
00:19:33,760 --> 00:19:36,840
in discussions we talk about variable

431
00:19:36,840 --> 00:19:38,160
slack

432
00:19:38,160 --> 00:19:40,240
i am the presenter alexander patrice and

433
00:19:40,240 --> 00:19:43,039
my co-authors are listed on the slide

434
00:19:43,039 --> 00:19:47,840
this is itf 110 in march 2021. next

435
00:19:47,840 --> 00:19:50,320
slide please

436
00:19:50,320 --> 00:19:53,760
the contents of the presentation i will

437
00:19:53,760 --> 00:19:56,720
mention only two points that are

438
00:19:56,720 --> 00:19:59,520
described in this draft uh

439
00:19:59,520 --> 00:20:01,120
in the introduction a little bit of the

440
00:20:01,120 --> 00:20:02,559
problem statement

441
00:20:02,559 --> 00:20:06,240
for vislak and the

442
00:20:06,240 --> 00:20:08,159
one slide on the implementation of

443
00:20:08,159 --> 00:20:10,240
v-slot but in the draft

444
00:20:10,240 --> 00:20:13,440
there are more topics that have

445
00:20:13,440 --> 00:20:16,960
been uh given equal

446
00:20:16,960 --> 00:20:19,600
importance i'm listing them bullet by

447
00:20:19,600 --> 00:20:20,799
bullet

448
00:20:20,799 --> 00:20:22,720
the history what we understand the

449
00:20:22,720 --> 00:20:24,720
history behind the 64-bit

450
00:20:24,720 --> 00:20:28,400
fixed boundary the some statements about

451
00:20:28,400 --> 00:20:31,840
identifier and subnet length

452
00:20:31,840 --> 00:20:33,600
third bullet recommendations for

453
00:20:33,600 --> 00:20:37,039
implementations of this slack

454
00:20:37,039 --> 00:20:40,320
then recommended use cases where 64-bit

455
00:20:40,320 --> 00:20:41,200
prefixes

456
00:20:41,200 --> 00:20:44,400
not v-slug should be utilized

457
00:20:44,400 --> 00:20:48,080
a large majority of cases then

458
00:20:48,080 --> 00:20:50,159
what are the reasons for longer than

459
00:20:50,159 --> 00:20:52,559
64-bit prefix length

460
00:20:52,559 --> 00:20:56,000
and then using

461
00:20:56,000 --> 00:20:59,919
greater than 64 prefixes by isp

462
00:20:59,919 --> 00:21:02,320
is normally strictly prohibited so we

463
00:21:02,320 --> 00:21:03,600
don't have a

464
00:21:03,600 --> 00:21:06,240
race to the bottom problem a brief

465
00:21:06,240 --> 00:21:09,360
comparison between static slack dhcp v6

466
00:21:09,360 --> 00:21:10,720
and v-stack

467
00:21:10,720 --> 00:21:13,520
and then again some variable strike use

468
00:21:13,520 --> 00:21:14,159
cases

469
00:21:14,159 --> 00:21:17,919
and then i will go now to describe

470
00:21:17,919 --> 00:21:19,760
some points of the problem statement

471
00:21:19,760 --> 00:21:22,720
next slide please

472
00:21:24,960 --> 00:21:28,559
well there are very many aspects of this

473
00:21:28,559 --> 00:21:32,080
problem we selected only a few of them

474
00:21:32,080 --> 00:21:33,280
that

475
00:21:33,280 --> 00:21:35,360
i try to illustrate with a figure in the

476
00:21:35,360 --> 00:21:36,480
center of the slide

477
00:21:36,480 --> 00:21:38,720
and the bullets bullet points in the

478
00:21:38,720 --> 00:21:40,080
right part of the

479
00:21:40,080 --> 00:21:43,280
slide in the center of the slide in the

480
00:21:43,280 --> 00:21:45,200
upper part you've seen the figure the

481
00:21:45,200 --> 00:21:46,159
internet and

482
00:21:46,159 --> 00:21:50,159
a ggsn which is part of the 3gpp network

483
00:21:50,159 --> 00:21:54,000
and that advertises a 64 prefix

484
00:21:54,000 --> 00:21:58,640
to the ue which is the user equipment

485
00:21:58,640 --> 00:22:01,360
then this user equipment needs to extend

486
00:22:01,360 --> 00:22:02,400
the network

487
00:22:02,400 --> 00:22:05,600
beyond uh this

488
00:22:05,600 --> 00:22:09,120
just 164 so it could try to use to make

489
00:22:09,120 --> 00:22:11,120
a 65 prefix

490
00:22:11,120 --> 00:22:14,640
or even a 66 for the subnets

491
00:22:14,640 --> 00:22:18,240
behind the user equipment such use cases

492
00:22:18,240 --> 00:22:19,200
are for example

493
00:22:19,200 --> 00:22:22,480
a mobile hotspot a subnet

494
00:22:22,480 --> 00:22:26,640
in automobile or other mobile platforms

495
00:22:26,640 --> 00:22:28,880
now in the text part on the right hand

496
00:22:28,880 --> 00:22:30,480
side

497
00:22:30,480 --> 00:22:33,120
i list the text about what are the the

498
00:22:33,120 --> 00:22:34,720
problems in doing that

499
00:22:34,720 --> 00:22:37,600
first and foremost in the ipv6

500
00:22:37,600 --> 00:22:39,559
addressing architecture rfc

501
00:22:39,559 --> 00:22:42,960
4291 all the others is currently

502
00:22:42,960 --> 00:22:45,120
allocated which are 2000

503
00:22:45,120 --> 00:22:48,799
qualcomm stage 3 cannot have other than

504
00:22:48,799 --> 00:22:52,080
64-bit interface identifiers

505
00:22:52,080 --> 00:22:55,120
the second bullet is that all mobile

506
00:22:55,120 --> 00:22:56,320
operators

507
00:22:56,320 --> 00:23:00,400
all mobile phone operators allocate 164

508
00:23:00,400 --> 00:23:04,240
prefix for one user equipment

509
00:23:04,240 --> 00:23:06,559
third bullet says that the dhcp v6

510
00:23:06,559 --> 00:23:09,039
prefix delegation is blocked by

511
00:23:09,039 --> 00:23:12,480
a majority if not all modems of the

512
00:23:12,480 --> 00:23:15,600
mobile equipment

513
00:23:16,640 --> 00:23:18,960
it is also impossible in implementation

514
00:23:18,960 --> 00:23:21,440
to use slack with a prefix

515
00:23:21,440 --> 00:23:24,480
of length 65 in the router advertisement

516
00:23:24,480 --> 00:23:27,280
for example in linux this is uh is not

517
00:23:27,280 --> 00:23:29,039
working simply

518
00:23:29,039 --> 00:23:31,039
this makes that the problem is that it

519
00:23:31,039 --> 00:23:33,360
is impossible to extend the network to

520
00:23:33,360 --> 00:23:35,520
multiple subnets beyond the user

521
00:23:35,520 --> 00:23:36,640
equipment

522
00:23:36,640 --> 00:23:39,120
for further description of the problem

523
00:23:39,120 --> 00:23:41,200
we refer to this draft mishra

524
00:23:41,200 --> 00:23:44,400
v6 variable slack problem statement

525
00:23:44,400 --> 00:23:46,880
that is pasted at the bottom of the

526
00:23:46,880 --> 00:23:49,279
slide

527
00:23:49,440 --> 00:23:51,039
now i'm going to talk a little bit about

528
00:23:51,039 --> 00:23:53,039
the implementation that we wrote and

529
00:23:53,039 --> 00:23:54,559
that we propose

530
00:23:54,559 --> 00:23:58,240
in this draft next slide please

531
00:23:59,360 --> 00:24:03,039
um the implementation that we wrote i i

532
00:24:03,039 --> 00:24:04,159
think actually to

533
00:24:04,159 --> 00:24:07,440
meet roshiti our co-author for this uh

534
00:24:07,440 --> 00:24:10,480
writing that he took several months to

535
00:24:10,480 --> 00:24:15,039
to make it to to progress it

536
00:24:15,039 --> 00:24:18,240
in in linux it is a just a local

537
00:24:18,240 --> 00:24:19,200
parameter

538
00:24:19,200 --> 00:24:22,559
a cctl the default value of this

539
00:24:22,559 --> 00:24:24,480
parameter is zero

540
00:24:24,480 --> 00:24:27,440
which means that the slack behaves acts

541
00:24:27,440 --> 00:24:28,799
as before

542
00:24:28,799 --> 00:24:32,960
uses 64-bit ids and prefix themes

543
00:24:32,960 --> 00:24:35,600
but if an operator sets this value to 1

544
00:24:35,600 --> 00:24:38,000
it makes that prefixes of length other

545
00:24:38,000 --> 00:24:39,039
than 64

546
00:24:39,039 --> 00:24:42,000
are accepted for slack for example a

547
00:24:42,000 --> 00:24:44,400
host that receives a 63

548
00:24:44,400 --> 00:24:47,679
in an array will form an ia in interface

549
00:24:47,679 --> 00:24:49,679
id of length 65

550
00:24:49,679 --> 00:24:51,760
and subsequently an address of length

551
00:24:51,760 --> 00:24:53,679
128 bit

552
00:24:53,679 --> 00:24:56,320
this implementation is a patch freely

553
00:24:56,320 --> 00:24:57,120
available

554
00:24:57,120 --> 00:25:00,880
on github and

555
00:25:00,880 --> 00:25:03,520
we have also submitted for consideration

556
00:25:03,520 --> 00:25:04,559
to linux

557
00:25:04,559 --> 00:25:07,600
maintainers but we have some feedback

558
00:25:07,600 --> 00:25:08,240
from them

559
00:25:08,240 --> 00:25:12,559
asking uh the status of

560
00:25:12,559 --> 00:25:16,080
of this uh proposal that we have

561
00:25:16,080 --> 00:25:19,520
here at idea in open bsd we have learned

562
00:25:19,520 --> 00:25:21,640
that there is an implementation of rfc

563
00:25:21,640 --> 00:25:24,240
7217 that works okay with variable

564
00:25:24,240 --> 00:25:24,640
length

565
00:25:24,640 --> 00:25:28,000
freelance in slack and in uh

566
00:25:28,000 --> 00:25:30,000
this is not work the variable slack is

567
00:25:30,000 --> 00:25:32,960
not working only 64-bit ids are

568
00:25:32,960 --> 00:25:35,120
implemented respecting the samples and

569
00:25:35,120 --> 00:25:36,960
we have submitted what we think to be a

570
00:25:36,960 --> 00:25:37,840
bug report

571
00:25:37,840 --> 00:25:40,320
and we complain about the 64-bit

572
00:25:40,320 --> 00:25:42,960
limiting that

573
00:25:42,960 --> 00:25:44,960
so that is the implementation that i was

574
00:25:44,960 --> 00:25:46,559
trying to present and

575
00:25:46,559 --> 00:25:50,320
uh at this point um i might wonder

576
00:25:50,320 --> 00:25:52,480
if there are any comments otherwise i

577
00:25:52,480 --> 00:25:55,200
have an additional slide on the

578
00:25:55,200 --> 00:25:58,559
on what we discussed uh

579
00:25:58,559 --> 00:26:00,799
not publicly but privately with a few

580
00:26:00,799 --> 00:26:02,880
people about the potential next steps

581
00:26:02,880 --> 00:26:03,200
but

582
00:26:03,200 --> 00:26:06,480
if there are any comments here i'm i'm

583
00:26:06,480 --> 00:26:07,679
interesting to

584
00:26:07,679 --> 00:26:09,440
we are interesting we authors are

585
00:26:09,440 --> 00:26:10,799
interesting to hear these

586
00:26:10,799 --> 00:26:13,200
comments

587
00:26:14,720 --> 00:26:17,679
jen go ahead

588
00:26:20,559 --> 00:26:24,080
i'm sort of like a deja vu right i think

589
00:26:24,080 --> 00:26:26,559
we've been in the discussion a couple of

590
00:26:26,559 --> 00:26:27,840
times but i have like

591
00:26:27,840 --> 00:26:30,880
two questions first of all why are you

592
00:26:30,880 --> 00:26:31,520
calling

593
00:26:31,520 --> 00:26:35,039
the easy behavior above my understanding

594
00:26:35,039 --> 00:26:35,440
is

595
00:26:35,440 --> 00:26:38,480
we are all here to discuss how operating

596
00:26:38,480 --> 00:26:39,840
systems should behave

597
00:26:39,840 --> 00:26:42,400
and after we agree on something that

598
00:26:42,400 --> 00:26:43,760
should be implemented

599
00:26:43,760 --> 00:26:45,840
if operating system started to do

600
00:26:45,840 --> 00:26:47,120
something which is

601
00:26:47,120 --> 00:26:50,159
currently prohibited by rfcs i would not

602
00:26:50,159 --> 00:26:51,039
call it a bug

603
00:26:51,039 --> 00:26:53,760
right if they start doing this like we

604
00:26:53,760 --> 00:26:54,880
all can go home

605
00:26:54,880 --> 00:26:57,520
and just forget about making any

606
00:26:57,520 --> 00:26:59,520
standards because operating system would

607
00:26:59,520 --> 00:27:01,440
do whatever they want

608
00:27:01,440 --> 00:27:04,400
and i'm also a bit confused about the

609
00:27:04,400 --> 00:27:05,039
draft

610
00:27:05,039 --> 00:27:08,159
i read it and in the beginning of it the

611
00:27:08,159 --> 00:27:09,600
draft it said

612
00:27:09,600 --> 00:27:12,240
we want to do prefixes which are shorter

613
00:27:12,240 --> 00:27:15,279
than plus 64 and we go and explain why

614
00:27:15,279 --> 00:27:17,200
and yes we're also allowing longer

615
00:27:17,200 --> 00:27:18,320
prefixes but

616
00:27:18,320 --> 00:27:21,520
operators should not do this no and then

617
00:27:21,520 --> 00:27:23,200
the earliest cases i found in the

618
00:27:23,200 --> 00:27:25,760
document talking about longer prefixes

619
00:27:25,760 --> 00:27:28,000
and i could not find any compelling use

620
00:27:28,000 --> 00:27:29,679
case for shorter one

621
00:27:29,679 --> 00:27:32,840
so i'm not sure why we need this

622
00:27:32,840 --> 00:27:34,640
especially providing

623
00:27:34,640 --> 00:27:36,799
that i'm quite sure that operators would

624
00:27:36,799 --> 00:27:38,080
not listen right

625
00:27:38,080 --> 00:27:40,080
they're only doing 360 for now because

626
00:27:40,080 --> 00:27:41,440
they could not do longer

627
00:27:41,440 --> 00:27:43,279
as long as you allow them to do longer

628
00:27:43,279 --> 00:27:45,200
it would be the race for the bottom

629
00:27:45,200 --> 00:27:47,679
and our way you should not do this would

630
00:27:47,679 --> 00:27:48,720
not work so

631
00:27:48,720 --> 00:27:51,039
i'm still not convinced we are not

632
00:27:51,039 --> 00:27:53,120
opening the door to the race

633
00:27:53,120 --> 00:27:56,399
to the bottom by doing it

634
00:27:58,640 --> 00:28:03,840
yes if i can reply at this point

635
00:28:04,240 --> 00:28:07,360
on the calling it a bug report i think

636
00:28:07,360 --> 00:28:10,399
it is because the tool of submitting

637
00:28:10,399 --> 00:28:13,919
proposals of improvements is called a

638
00:28:13,919 --> 00:28:16,159
bug reporting too like if i remember

639
00:28:16,159 --> 00:28:18,960
correctly but okay probably buggies uh

640
00:28:18,960 --> 00:28:19,919
should not be

641
00:28:19,919 --> 00:28:22,799
used but we we could also see it as a

642
00:28:22,799 --> 00:28:23,760
suggestion for

643
00:28:23,760 --> 00:28:26,720
a new functionality that that could also

644
00:28:26,720 --> 00:28:28,399
be a

645
00:28:28,399 --> 00:28:30,640
experimental functionality if you wish

646
00:28:30,640 --> 00:28:32,799
into which some things are tried but

647
00:28:32,799 --> 00:28:36,080
uh by default they should be off

648
00:28:36,080 --> 00:28:39,279
of course then um

649
00:28:39,360 --> 00:28:41,200
with respect to the question of these

650
00:28:41,200 --> 00:28:44,000
shorter and longer prefixes okay

651
00:28:44,000 --> 00:28:48,399
now basically i agree with you that if

652
00:28:48,399 --> 00:28:51,760
this luck allows for longer prefixes

653
00:28:51,760 --> 00:28:55,120
then operators might be tempted

654
00:28:55,120 --> 00:28:58,000
to allocate longer prefixes to the end

655
00:28:58,000 --> 00:28:58,960
users

656
00:28:58,960 --> 00:29:00,720
and that could create the raise to the

657
00:29:00,720 --> 00:29:02,080
bottom problem

658
00:29:02,080 --> 00:29:03,760
and that is not good and should be

659
00:29:03,760 --> 00:29:06,000
avoided there should be something

660
00:29:06,000 --> 00:29:08,960
some tool some may can i don't know that

661
00:29:08,960 --> 00:29:10,880
should not allow for this to happen i

662
00:29:10,880 --> 00:29:12,000
don't know what

663
00:29:12,000 --> 00:29:15,039
but now for shorter than

664
00:29:15,039 --> 00:29:18,720
64 shorter than 64 prefixes

665
00:29:18,720 --> 00:29:21,120
then that is that could be a good idea

666
00:29:21,120 --> 00:29:22,880
and if the operator

667
00:29:22,880 --> 00:29:25,679
exercises advertise a day shorter than

668
00:29:25,679 --> 00:29:28,320
64 prefix to the end user

669
00:29:28,320 --> 00:29:30,960
then the end user would still need to

670
00:29:30,960 --> 00:29:31,520
form

671
00:29:31,520 --> 00:29:35,120
a 65-bit

672
00:29:35,120 --> 00:29:37,840
interface id which is the interface id

673
00:29:37,840 --> 00:29:39,760
is longer than 64.

674
00:29:39,760 --> 00:29:42,399
that is what we tried to express maybe

675
00:29:42,399 --> 00:29:44,720
we could clarify it and

676
00:29:44,720 --> 00:29:47,039
and then the third point that to answer

677
00:29:47,039 --> 00:29:48,799
this is that

678
00:29:48,799 --> 00:29:50,720
if the if this document does not

679
00:29:50,720 --> 00:29:52,240
progress or

680
00:29:52,240 --> 00:29:55,120
is outright rejected not even as

681
00:29:55,120 --> 00:29:57,200
experimental accepted or

682
00:29:57,200 --> 00:30:00,320
if if this is completely stopped then

683
00:30:00,320 --> 00:30:02,480
in the implementation i must say that i

684
00:30:02,480 --> 00:30:03,520
will be

685
00:30:03,520 --> 00:30:07,279
again tempted to use this

686
00:30:07,279 --> 00:30:10,720
66 prefixes inside the

687
00:30:10,720 --> 00:30:13,440
extended network because the operators

688
00:30:13,440 --> 00:30:15,600
will always allocate a 64

689
00:30:15,600 --> 00:30:18,720
and then the only thing one could be

690
00:30:18,720 --> 00:30:21,200
tempted to do is to create 66 out of

691
00:30:21,200 --> 00:30:21,919
this

692
00:30:21,919 --> 00:30:25,679
so that is a conditional i'm not sure i

693
00:30:25,679 --> 00:30:30,159
answer whether i

694
00:30:30,159 --> 00:30:33,039
we could discuss further about this but

695
00:30:33,039 --> 00:30:33,840
i agree with

696
00:30:33,840 --> 00:30:36,480
most points that you raise gen and the

697
00:30:36,480 --> 00:30:37,360
draft could be

698
00:30:37,360 --> 00:30:40,640
further clarified on these points

699
00:30:40,640 --> 00:30:43,120
and the slide could be improved to

700
00:30:43,120 --> 00:30:44,240
remove this bug

701
00:30:44,240 --> 00:30:51,600
world like yeah yeah

702
00:30:51,600 --> 00:30:54,799
any more comments

703
00:31:00,000 --> 00:31:02,159
do you want to show your last slide

704
00:31:02,159 --> 00:31:03,600
alexandra yeah please

705
00:31:03,600 --> 00:31:06,240
last slide please if i i think i still

706
00:31:06,240 --> 00:31:07,600
have five more minutes

707
00:31:07,600 --> 00:31:12,719
we we brainstormed with a few people

708
00:31:13,360 --> 00:31:17,519
and um i i a few suggestions were made

709
00:31:17,519 --> 00:31:18,000
but

710
00:31:18,000 --> 00:31:20,080
it's nothing private about this but i

711
00:31:20,080 --> 00:31:22,399
really try to push this forward but i

712
00:31:22,399 --> 00:31:25,440
i'm not try i'm not clear how to proceed

713
00:31:25,440 --> 00:31:26,399
and how to

714
00:31:26,399 --> 00:31:29,360
so one one of the point that was listed

715
00:31:29,360 --> 00:31:30,080
is to

716
00:31:30,080 --> 00:31:32,720
to make a liaison between ietf and 3gpp

717
00:31:32,720 --> 00:31:34,880
and maybe make the most of this work at

718
00:31:34,880 --> 00:31:36,000
3gpp

719
00:31:36,000 --> 00:31:40,080
such that make a requirement at 3gpp to

720
00:31:40,080 --> 00:31:43,440
to advertise shorter than 64 prefixes to

721
00:31:43,440 --> 00:31:44,720
the user equipment

722
00:31:44,720 --> 00:31:47,360
that's a possibility a second bullet

723
00:31:47,360 --> 00:31:49,120
says that we could link the v slack

724
00:31:49,120 --> 00:31:52,479
concept to the gdp

725
00:31:52,960 --> 00:31:55,120
generic tunnel encapsulation protocol i

726
00:31:55,120 --> 00:31:56,000
think that is a

727
00:31:56,000 --> 00:31:58,640
3gpp protocol so these two concepts

728
00:31:58,640 --> 00:32:00,159
could work together

729
00:32:00,159 --> 00:32:03,679
a third bullet suggests that maybe

730
00:32:03,679 --> 00:32:05,840
we could ask ayana for a sub-range of

731
00:32:05,840 --> 00:32:07,600
this one ffe

732
00:32:07,600 --> 00:32:09,840
slash three space all these addresses

733
00:32:09,840 --> 00:32:11,039
that start with

734
00:32:11,039 --> 00:32:14,080
zero zero zero binary which is not

735
00:32:14,080 --> 00:32:16,480
subject to the 64-bit bin

736
00:32:16,480 --> 00:32:19,679
boundary and this this could be

737
00:32:19,679 --> 00:32:23,919
performed on a experimental kind of

738
00:32:23,919 --> 00:32:26,159
activity into which not only v-slug

739
00:32:26,159 --> 00:32:27,840
would could be used but maybe other

740
00:32:27,840 --> 00:32:28,960
drafts and maybe

741
00:32:28,960 --> 00:32:32,080
a little bit of small

742
00:32:32,080 --> 00:32:35,200
longer prefixes but smaller space

743
00:32:35,200 --> 00:32:38,240
in this that could be allocated but

744
00:32:38,240 --> 00:32:38,640
again

745
00:32:38,640 --> 00:32:40,640
a fourth bullet is to make this lock on

746
00:32:40,640 --> 00:32:42,000
an experimental status

747
00:32:42,000 --> 00:32:44,399
was suggested fifth bullet is an

748
00:32:44,399 --> 00:32:46,480
activity that was started at the earlier

749
00:32:46,480 --> 00:32:47,519
iatf

750
00:32:47,519 --> 00:32:51,840
on a 64 share v2 uh cameron barn

751
00:32:51,840 --> 00:32:53,919
i think propose it but it's not an

752
00:32:53,919 --> 00:32:55,919
internet draft and maybe it could be

753
00:32:55,919 --> 00:32:57,840
possible to take that text put it in a

754
00:32:57,840 --> 00:32:59,679
real internet draft and submit it to

755
00:32:59,679 --> 00:33:01,519
ietf

756
00:33:01,519 --> 00:33:03,279
then the next bullet make a lightweight

757
00:33:03,279 --> 00:33:05,760
prefix delegation mechanism for nd

758
00:33:05,760 --> 00:33:08,880
and ndpd i'm not sure whether somebody

759
00:33:08,880 --> 00:33:10,720
has already worked and this is basically

760
00:33:10,720 --> 00:33:12,480
a question i have two people present in

761
00:33:12,480 --> 00:33:14,399
the room if somebody already work on

762
00:33:14,399 --> 00:33:14,880
this

763
00:33:14,880 --> 00:33:19,360
ndpd lightweight prefix delegation

764
00:33:22,399 --> 00:33:25,279
next bullet is to use a method like in

765
00:33:25,279 --> 00:33:26,880
draft naveen

766
00:33:26,880 --> 00:33:29,039
into which a host puts a specific

767
00:33:29,039 --> 00:33:29,919
request in

768
00:33:29,919 --> 00:33:32,240
rs return solicitation to request

769
00:33:32,240 --> 00:33:35,120
multiple 64 prefixes

770
00:33:35,120 --> 00:33:38,240
or a non 64 prefix maybe that's another

771
00:33:38,240 --> 00:33:41,360
protocol proposal

772
00:33:41,360 --> 00:33:44,320
and then i know that pascal to bear as a

773
00:33:44,320 --> 00:33:46,880
activity proposal for ipo over wireless

774
00:33:46,880 --> 00:33:47,519
and

775
00:33:47,519 --> 00:33:49,919
since this happens on a wireless link

776
00:33:49,919 --> 00:33:50,640
maybe

777
00:33:50,640 --> 00:33:54,880
bring this like there and also eduard

778
00:33:54,880 --> 00:33:57,120
proposes an activity or a sort of

779
00:33:57,120 --> 00:33:58,159
concept on

780
00:33:58,159 --> 00:34:01,600
next generation slack

781
00:34:01,600 --> 00:34:04,159
and maybe visla could be part of that

782
00:34:04,159 --> 00:34:06,399
next generation slack that's a another

783
00:34:06,399 --> 00:34:07,279
potential

784
00:34:07,279 --> 00:34:10,159
and then again somebody also proposes

785
00:34:10,159 --> 00:34:10,639
not

786
00:34:10,639 --> 00:34:12,560
is is always is there another way

787
00:34:12,560 --> 00:34:14,320
possible for this to

788
00:34:14,320 --> 00:34:16,560
to proceed is there another because the

789
00:34:16,560 --> 00:34:18,399
problem is still there all mobile

790
00:34:18,399 --> 00:34:19,359
operators

791
00:34:19,359 --> 00:34:22,480
allocate a 64 to a user equipment

792
00:34:22,480 --> 00:34:26,159
and many

793
00:34:26,159 --> 00:34:29,599
user equipments need to extend beyond

794
00:34:29,599 --> 00:34:33,280
so that's the that is

795
00:34:33,280 --> 00:34:36,480
that is my last slide uh yeah i hope i

796
00:34:36,480 --> 00:34:38,159
managed to well i'm all years now i

797
00:34:38,159 --> 00:34:39,359
listen

798
00:34:39,359 --> 00:34:41,440
you seem to be missing at least in

799
00:34:41,440 --> 00:34:43,119
homeland this was also discussed you

800
00:34:43,119 --> 00:34:43,520
know

801
00:34:43,520 --> 00:34:46,839
many years ago in the solution they

802
00:34:46,839 --> 00:34:49,679
um at least implemented was

803
00:34:49,679 --> 00:34:52,879
just to use the atp which supports

804
00:34:52,879 --> 00:34:56,800
other prefix lengths just fine

805
00:34:56,800 --> 00:34:59,920
at least there you have a solution that

806
00:34:59,920 --> 00:35:00,560
is

807
00:35:00,560 --> 00:35:02,880
widely implemented and supported in all

808
00:35:02,880 --> 00:35:05,280
equipment

809
00:35:07,839 --> 00:35:10,960
uh yes now that there is homnet probably

810
00:35:10,960 --> 00:35:11,839
others and i

811
00:35:11,839 --> 00:35:14,960
will now it would

812
00:35:14,960 --> 00:35:17,839
in

813
00:35:18,720 --> 00:35:21,440
yeah home net protocols are normally for

814
00:35:21,440 --> 00:35:23,200
home networks in-house so

815
00:35:23,200 --> 00:35:25,599
sorry i didn't i didn't i didn't at all

816
00:35:25,599 --> 00:35:26,960
suggest the home net

817
00:35:26,960 --> 00:35:29,520
protocols i suggested that they also

818
00:35:29,520 --> 00:35:30,320
discussed this

819
00:35:30,320 --> 00:35:34,160
exact same problem and the solution they

820
00:35:34,160 --> 00:35:34,800
chose was

821
00:35:34,800 --> 00:35:36,960
was a solution that has been

822
00:35:36,960 --> 00:35:37,920
standardized

823
00:35:37,920 --> 00:35:39,839
for many many years which is just to use

824
00:35:39,839 --> 00:35:42,560
dhtp for address assignment

825
00:35:42,560 --> 00:35:45,040
then you don't need to care about 64-bit

826
00:35:45,040 --> 00:35:47,200
boundaries

827
00:35:47,200 --> 00:35:49,599
you know you can make a small allocation

828
00:35:49,599 --> 00:35:50,400
links as you

829
00:35:50,400 --> 00:35:52,160
like without any changes to either

830
00:35:52,160 --> 00:35:54,880
implementation or stand-ups

831
00:35:54,880 --> 00:35:57,599
yeah yeah maybe home net protocol

832
00:35:57,599 --> 00:35:59,839
standardized homeless protocols dhcp

833
00:35:59,839 --> 00:36:03,119
maybe in home they are not blocked by

834
00:36:03,119 --> 00:36:06,400
manufacturers of chips in home

835
00:36:06,400 --> 00:36:09,680
probably you don't need to run this

836
00:36:09,680 --> 00:36:11,119
across the

837
00:36:11,119 --> 00:36:14,240
3gpp link right you this is all

838
00:36:14,240 --> 00:36:16,160
you're proposing here is inside of the

839
00:36:16,160 --> 00:36:17,760
network right so

840
00:36:17,760 --> 00:36:21,680
if you just don't use slack you can use

841
00:36:21,680 --> 00:36:23,520
the hp for address assignment instead

842
00:36:23,520 --> 00:36:25,200
inside of the site and

843
00:36:25,200 --> 00:36:28,880
this will be um will not require any

844
00:36:28,880 --> 00:36:30,560
changes

845
00:36:30,560 --> 00:36:33,520
that might be you know we have lorenzo

846
00:36:33,520 --> 00:36:40,320
in the queue why don't you go ahead

847
00:36:40,320 --> 00:36:43,359
um yeah so

848
00:36:43,359 --> 00:36:46,240
i actually had a question about the the

849
00:36:46,240 --> 00:36:46,960
modems

850
00:36:46,960 --> 00:36:50,400
the modem vendors blocking dhp pd i mean

851
00:36:50,400 --> 00:36:52,880
i think that seems like um

852
00:36:52,880 --> 00:36:54,400
you know do you have data on why they do

853
00:36:54,400 --> 00:36:55,920
this

854
00:36:55,920 --> 00:36:57,839
because i mean it's it's not so written

855
00:36:57,839 --> 00:36:59,280
in any standard that they should do this

856
00:36:59,280 --> 00:37:00,400
and in fact

857
00:37:00,400 --> 00:37:03,040
the 3gpp release 10 standards do support

858
00:37:03,040 --> 00:37:03,520
um

859
00:37:03,520 --> 00:37:04,880
release 10 and above and now we're on

860
00:37:04,880 --> 00:37:07,599
release 15 or 16 they do support

861
00:37:07,599 --> 00:37:10,720
um dhb so hppd

862
00:37:10,720 --> 00:37:13,440
it's a supported part of 3gpp so the

863
00:37:13,440 --> 00:37:14,160
other thing is

864
00:37:14,160 --> 00:37:17,599
you know given that i'm not sure that

865
00:37:17,599 --> 00:37:18,800
you know there's actually a problem

866
00:37:18,800 --> 00:37:20,800
solved here if your primary use case is

867
00:37:20,800 --> 00:37:22,000
to be able to

868
00:37:22,000 --> 00:37:24,160
assign a larger than a shorter than 64

869
00:37:24,160 --> 00:37:25,839
prefix to a mobile node

870
00:37:25,839 --> 00:37:27,599
that's already supported by this gpp

871
00:37:27,599 --> 00:37:30,079
standard this is a deployment problem

872
00:37:30,079 --> 00:37:33,280
and writing a new draft

873
00:37:33,520 --> 00:37:36,720
is unlikely to affect the the reasons

874
00:37:36,720 --> 00:37:40,240
why it is or is not deployed

875
00:37:43,119 --> 00:37:48,160
yes so with respect to

876
00:37:48,160 --> 00:37:51,839
why some or most mobile model

877
00:37:51,839 --> 00:37:53,280
manufacturers block

878
00:37:53,280 --> 00:37:56,400
dhcp v6 because that is what they block

879
00:37:56,400 --> 00:37:58,320
they don't block in particular the pd

880
00:37:58,320 --> 00:38:01,040
part of the but the http v6 blocking the

881
00:38:01,040 --> 00:38:02,720
http v6 means

882
00:38:02,720 --> 00:38:06,240
blocking the port numbers of the http v6

883
00:38:06,240 --> 00:38:09,680
and or blocking the multicast part of

884
00:38:09,680 --> 00:38:11,599
the http v6 these are the two things

885
00:38:11,599 --> 00:38:13,200
that are blocked by

886
00:38:13,200 --> 00:38:15,760
various ones now why they do that we

887
00:38:15,760 --> 00:38:19,839
have a list of reasons why they do

888
00:38:20,160 --> 00:38:22,480
i mean we speculate why they do we don't

889
00:38:22,480 --> 00:38:24,079
know exactly why

890
00:38:24,079 --> 00:38:25,839
and even some people are the modern

891
00:38:25,839 --> 00:38:27,920
manufacturers make some statements that

892
00:38:27,920 --> 00:38:30,160
are backed more or less by some so

893
00:38:30,160 --> 00:38:32,000
there are there is a list of reasons one

894
00:38:32,000 --> 00:38:34,000
of them that it might be

895
00:38:34,000 --> 00:38:37,200
a heavy operation to do dhcp

896
00:38:37,200 --> 00:38:40,640
as opposed to doing slack um the other

897
00:38:40,640 --> 00:38:41,359
is that

898
00:38:41,359 --> 00:38:44,480
uh it constitutes a any open port is a

899
00:38:44,480 --> 00:38:46,079
security hole

900
00:38:46,079 --> 00:38:48,320
and multiplied by the number of

901
00:38:48,320 --> 00:38:50,079
smartphone devices sold

902
00:38:50,079 --> 00:38:53,440
it amplifies a lot these securities

903
00:38:53,440 --> 00:38:56,079
another is that these model

904
00:38:56,079 --> 00:38:56,960
manufacturers

905
00:38:56,960 --> 00:38:59,920
have heard from itfm from others which

906
00:38:59,920 --> 00:39:00,320
is a

907
00:39:00,320 --> 00:39:03,760
old uh wisdom at idea that in ipv6

908
00:39:03,760 --> 00:39:06,480
the way to configure addresses is uh

909
00:39:06,480 --> 00:39:08,640
slack and not dhcp

910
00:39:08,640 --> 00:39:11,040
so that's all of the wisdom but it still

911
00:39:11,040 --> 00:39:12,400
persists in many

912
00:39:12,400 --> 00:39:15,760
circles and uh i think that these are

913
00:39:15,760 --> 00:39:16,320
the main

914
00:39:16,320 --> 00:39:19,040
reasons that i have heard about but that

915
00:39:19,040 --> 00:39:20,480
that is the way it is

916
00:39:20,480 --> 00:39:24,000
that that is the way it is in practice

917
00:39:24,000 --> 00:39:26,480
and probably new releases will change

918
00:39:26,480 --> 00:39:27,359
things

919
00:39:27,359 --> 00:39:29,839
but it is now several years that

920
00:39:29,839 --> 00:39:31,920
operators allocate only 64

921
00:39:31,920 --> 00:39:35,520
to end users i forgot the second

922
00:39:35,520 --> 00:39:36,160
question

923
00:39:36,160 --> 00:39:39,250
[Music]

924
00:39:40,839 --> 00:39:44,720
so um

925
00:39:44,720 --> 00:39:46,400
if this is just a deployment problem

926
00:39:46,400 --> 00:39:48,320
right if the operators wanted to want to

927
00:39:48,320 --> 00:39:49,760
use the hppd

928
00:39:49,760 --> 00:39:51,280
or anything else really that that's

929
00:39:51,280 --> 00:39:52,800
there for them to use right now

930
00:39:52,800 --> 00:39:54,560
writing another draft or another

931
00:39:54,560 --> 00:39:56,560
standard it's not gonna

932
00:39:56,560 --> 00:39:59,599
affect that right i think yeah yeah

933
00:39:59,599 --> 00:40:02,400
yeah yeah it is true it is also

934
00:40:02,400 --> 00:40:03,359
suggested to do

935
00:40:03,359 --> 00:40:07,359
to make this more of a 3gpp

936
00:40:07,359 --> 00:40:10,960
document or a requirement at 3gbp

937
00:40:10,960 --> 00:40:15,599
and my reply to that is that sometimes

938
00:40:15,599 --> 00:40:18,880
3gpp does refer to internet drafts when

939
00:40:18,880 --> 00:40:21,280
writing their own requirements and so

940
00:40:21,280 --> 00:40:22,319
that is a

941
00:40:22,319 --> 00:40:25,440
probably a possibility i mean yeah we

942
00:40:25,440 --> 00:40:25,760
could

943
00:40:25,760 --> 00:40:28,480
we could try to to do that rather than

944
00:40:28,480 --> 00:40:30,240
uh

945
00:40:30,240 --> 00:40:33,680
then uh pushing this forever at

946
00:40:33,680 --> 00:40:36,560
itf and yeah it's a good suggestion that

947
00:40:36,560 --> 00:40:38,720
we take into account

948
00:40:38,720 --> 00:40:44,319
we we will also look into that uh 3gpp

949
00:40:45,040 --> 00:40:48,800
yeah well thank you

950
00:40:48,800 --> 00:40:53,839
for your time

951
00:40:54,000 --> 00:40:56,400
thank you

952
00:40:57,599 --> 00:40:59,359
so then we have our next presentation

953
00:40:59,359 --> 00:41:02,000
associated channel or ipv6 with uh

954
00:41:02,000 --> 00:41:04,079
fan yang you are presenting right please

955
00:41:04,079 --> 00:41:06,079
go ahead um

956
00:41:06,079 --> 00:41:09,280
can you hear me we can hear you fine uh

957
00:41:09,280 --> 00:41:11,920
okay good because it shows there is some

958
00:41:11,920 --> 00:41:12,880
error there

959
00:41:12,880 --> 00:41:16,480
okay um thank you chair and and this is

960
00:41:16,480 --> 00:41:16,960
a

961
00:41:16,960 --> 00:41:19,599
a very uh new draft it's zero zero

962
00:41:19,599 --> 00:41:20,000
version

963
00:41:20,000 --> 00:41:23,119
draft and in this draft we introduce uh

964
00:41:23,119 --> 00:41:26,319
and also uh an associated channel over

965
00:41:26,319 --> 00:41:27,760
ipv6

966
00:41:27,760 --> 00:41:31,280
and this uh for short we named this

967
00:41:31,280 --> 00:41:32,480
associated channel

968
00:41:32,480 --> 00:41:36,400
as ach and the current scope is

969
00:41:36,400 --> 00:41:41,599
ipv6 networks next page please

970
00:41:41,839 --> 00:41:45,359
yeah the higher level motivation

971
00:41:45,359 --> 00:41:48,800
is we see that from uh from ipv4

972
00:41:48,800 --> 00:41:51,839
ipv6 ipv4 to mprs

973
00:41:51,839 --> 00:41:54,880
and from ampers to fpv6

974
00:41:54,880 --> 00:41:57,839
and currently nowadays the ipv6 provides

975
00:41:57,839 --> 00:42:00,079
connectivity in many

976
00:42:00,079 --> 00:42:03,760
new emerging and also the lexi net

977
00:42:03,760 --> 00:42:07,359
networks and in all these uh scenarios

978
00:42:07,359 --> 00:42:09,920
actually the ip ip services required

979
00:42:09,920 --> 00:42:12,720
higher quality of the rsa guarantee

980
00:42:12,720 --> 00:42:16,160
and rather than the best effort

981
00:42:16,160 --> 00:42:18,960
and we see the segment routing over ipv6

982
00:42:18,960 --> 00:42:20,160
provides optimized

983
00:42:20,160 --> 00:42:22,480
route for service forwarding while the

984
00:42:22,480 --> 00:42:24,240
routine programming on

985
00:42:24,240 --> 00:42:28,560
srh and we introduced this ach

986
00:42:28,560 --> 00:42:30,640
and to provide the control and

987
00:42:30,640 --> 00:42:32,400
management uh program

988
00:42:32,400 --> 00:42:35,119
programming capabilities and to the to

989
00:42:35,119 --> 00:42:37,200
the service forwarding

990
00:42:37,200 --> 00:42:40,000
and next please and later on we will

991
00:42:40,000 --> 00:42:41,359
have some examples

992
00:42:41,359 --> 00:42:44,800
um to show the uh uh

993
00:42:44,800 --> 00:42:49,280
applique applicability yes

994
00:42:49,280 --> 00:42:52,480
and the ach architecture and and the the

995
00:42:52,480 --> 00:42:53,359
cloudiness

996
00:42:53,359 --> 00:42:56,079
middle is the represent the it is ip

997
00:42:56,079 --> 00:42:56,960
network

998
00:42:56,960 --> 00:43:00,079
and then the two the there is a black

999
00:43:00,079 --> 00:43:00,480
link

1000
00:43:00,480 --> 00:43:03,359
black line between the first node and

1001
00:43:03,359 --> 00:43:04,560
the fourth node

1002
00:43:04,560 --> 00:43:08,560
and it represents the it is ip pass

1003
00:43:08,560 --> 00:43:12,000
and user data is transmitted in the

1004
00:43:12,000 --> 00:43:14,640
along the ipads in the in the yellow

1005
00:43:14,640 --> 00:43:15,599
arrow

1006
00:43:15,599 --> 00:43:18,800
and this blue arrows are the associate

1007
00:43:18,800 --> 00:43:20,640
channel created to the ip

1008
00:43:20,640 --> 00:43:24,240
ip pass and it is um

1009
00:43:24,240 --> 00:43:26,880
if you if you look at one error it is a

1010
00:43:26,880 --> 00:43:28,000
control channel

1011
00:43:28,000 --> 00:43:31,040
and it and this associate channel

1012
00:43:31,040 --> 00:43:33,760
is connected is associated to uh ip

1013
00:43:33,760 --> 00:43:34,960
forwarding pass

1014
00:43:34,960 --> 00:43:36,960
and carrying the messages of the control

1015
00:43:36,960 --> 00:43:38,640
and management protocols

1016
00:43:38,640 --> 00:43:40,319
and aiming to provide the control

1017
00:43:40,319 --> 00:43:42,880
management management functions

1018
00:43:42,880 --> 00:43:45,760
and if you see if you look at the the

1019
00:43:45,760 --> 00:43:46,720
right bottom

1020
00:43:46,720 --> 00:43:52,079
uh graph there and it shows where the sh

1021
00:43:52,079 --> 00:43:55,280
in the in one network node and the

1022
00:43:55,280 --> 00:43:56,720
control and management

1023
00:43:56,720 --> 00:43:59,040
planes can control element planes

1024
00:43:59,040 --> 00:44:00,560
generate the control and management

1025
00:44:00,560 --> 00:44:01,680
messages

1026
00:44:01,680 --> 00:44:04,720
and carried it in the associated

1027
00:44:04,720 --> 00:44:07,839
in associated channel and transmitted in

1028
00:44:07,839 --> 00:44:09,760
the data plane

1029
00:44:09,760 --> 00:44:13,040
in next page please

1030
00:44:18,720 --> 00:44:22,079
yes in the drafted we defined the ach as

1031
00:44:22,079 --> 00:44:25,599
a t as a trv format and the first type

1032
00:44:25,599 --> 00:44:26,400
specified

1033
00:44:26,400 --> 00:44:29,359
it is a control channel for one specific

1034
00:44:29,359 --> 00:44:29,839
ip

1035
00:44:29,839 --> 00:44:32,880
pass and this uh the channel type

1036
00:44:32,880 --> 00:44:35,680
specifies the type of the control or

1037
00:44:35,680 --> 00:44:36,560
management

1038
00:44:36,560 --> 00:44:39,920
protocols to identify the the ip pass

1039
00:44:39,920 --> 00:44:40,319
and

1040
00:44:40,319 --> 00:44:44,720
also associated the ip pass to the ach

1041
00:44:44,720 --> 00:44:47,280
the associated channel id is identified

1042
00:44:47,280 --> 00:44:48,079
there

1043
00:44:48,079 --> 00:44:51,280
it is defined there and

1044
00:44:51,280 --> 00:44:54,079
the control and management messages can

1045
00:44:54,079 --> 00:44:55,520
be carried in the

1046
00:44:55,520 --> 00:44:58,720
in the fixed messages in the in the

1047
00:44:58,720 --> 00:45:02,640
value field and this ach

1048
00:45:02,640 --> 00:45:06,720
flat this is uh it is a htrv so

1049
00:45:06,720 --> 00:45:09,760
this drv can be flexible encapsulated

1050
00:45:09,760 --> 00:45:12,800
in the ipv6 extension headers

1051
00:45:12,800 --> 00:45:16,160
including the doh hubbar hub or srh

1052
00:45:16,160 --> 00:45:19,280
it can also be encapsulated uh as

1053
00:45:19,280 --> 00:45:22,800
payload in in the synthetic

1054
00:45:22,800 --> 00:45:26,000
packet and i will use the following

1055
00:45:26,000 --> 00:45:27,119
examples to

1056
00:45:27,119 --> 00:45:29,680
show the application the end-to-end

1057
00:45:29,680 --> 00:45:30,640
application hub

1058
00:45:30,640 --> 00:45:36,000
help applications next page please

1059
00:45:37,920 --> 00:45:42,000
yeah we identified our

1060
00:45:42,000 --> 00:45:44,839
we give just two expand examples one is

1061
00:45:44,839 --> 00:45:46,000
the uh

1062
00:45:46,000 --> 00:45:48,960
we we call it we use it for for the

1063
00:45:48,960 --> 00:45:49,760
unified

1064
00:45:49,760 --> 00:45:53,280
oem um here we give three protocols we

1065
00:45:53,280 --> 00:45:53,599
list

1066
00:45:53,599 --> 00:45:56,720
three particles that used for the oem uh

1067
00:45:56,720 --> 00:46:00,319
functions and we also identifies these

1068
00:46:00,319 --> 00:46:03,280
several problems that these protocols

1069
00:46:03,280 --> 00:46:04,880
with this protocols

1070
00:46:04,880 --> 00:46:07,599
for example these protocols are designed

1071
00:46:07,599 --> 00:46:08,160
for

1072
00:46:08,160 --> 00:46:11,119
to perform different functions different

1073
00:46:11,119 --> 00:46:13,520
oem functions but they also have

1074
00:46:13,520 --> 00:46:15,760
overlapped functions and they use

1075
00:46:15,760 --> 00:46:18,000
different session identifiers

1076
00:46:18,000 --> 00:46:21,200
um and also deep dating capitals lead

1077
00:46:21,200 --> 00:46:24,319
in the ipip packet

1078
00:46:24,319 --> 00:46:27,680
and if if there's and and because they

1079
00:46:27,680 --> 00:46:28,960
are defined for

1080
00:46:28,960 --> 00:46:31,599
this defined as an end-to-end session so

1081
00:46:31,599 --> 00:46:33,280
the intermediate node is not

1082
00:46:33,280 --> 00:46:36,319
aware by the end and end-to-end

1083
00:46:36,319 --> 00:46:39,440
session so we try to

1084
00:46:39,440 --> 00:46:42,240
come up with a simple uh solution to

1085
00:46:42,240 --> 00:46:42,960
carry these

1086
00:46:42,960 --> 00:46:46,560
oem messages in the ach because the ach

1087
00:46:46,560 --> 00:46:49,280
is a tlb encapsulated in ip layer

1088
00:46:49,280 --> 00:46:52,319
so this so this info this all these oem

1089
00:46:52,319 --> 00:46:54,079
messages are encapsulated

1090
00:46:54,079 --> 00:46:57,520
in in pure a uh epilator and

1091
00:46:57,520 --> 00:47:00,000
it to reduce the the number of particles

1092
00:47:00,000 --> 00:47:00,800
sessions

1093
00:47:00,800 --> 00:47:03,599
and also unified the session identifiers

1094
00:47:03,599 --> 00:47:04,800
yeah the figure

1095
00:47:04,800 --> 00:47:08,240
below it shows that um there um

1096
00:47:08,240 --> 00:47:11,440
the example is that if we encapsulated

1097
00:47:11,440 --> 00:47:14,800
uh delay management measurement um

1098
00:47:14,800 --> 00:47:17,839
the ach tlv inside the

1099
00:47:17,839 --> 00:47:21,839
ipv6 um actually i actually used a doh

1100
00:47:21,839 --> 00:47:24,960
header um and this

1101
00:47:24,960 --> 00:47:28,800
and this uh ach this d s h t always is

1102
00:47:28,800 --> 00:47:31,119
encapsulated in the ip layer and

1103
00:47:31,119 --> 00:47:32,240
transmitted from

1104
00:47:32,240 --> 00:47:35,680
r1 to r4 when r4 receive it

1105
00:47:35,680 --> 00:47:40,000
and it will process the htrv as it

1106
00:47:40,000 --> 00:47:42,720
since it is the last uh it is the

1107
00:47:42,720 --> 00:47:46,078
destination of the ap pass

1108
00:47:46,319 --> 00:47:49,760
um and we will need to receive the htrv

1109
00:47:49,760 --> 00:47:52,800
uh it processed the the the tre and

1110
00:47:52,800 --> 00:47:53,440
measure the

1111
00:47:53,440 --> 00:47:58,079
delay next page please

1112
00:48:00,079 --> 00:48:03,119
yeah the second case it it

1113
00:48:03,119 --> 00:48:05,280
it is more complicated but it's very

1114
00:48:05,280 --> 00:48:06,880
easy to understand

1115
00:48:06,880 --> 00:48:09,680
um from actually there are two uh

1116
00:48:09,680 --> 00:48:11,839
associate channels used here

1117
00:48:11,839 --> 00:48:14,319
and the first one is are what we

1118
00:48:14,319 --> 00:48:15,760
generated this

1119
00:48:15,760 --> 00:48:18,880
um this fault management probe

1120
00:48:18,880 --> 00:48:22,559
and um to r4 and this

1121
00:48:22,559 --> 00:48:26,000
this is this this uh photo management

1122
00:48:26,000 --> 00:48:27,520
ach trv

1123
00:48:27,520 --> 00:48:30,559
is encapsulated in the ipv6 helper help

1124
00:48:30,559 --> 00:48:34,079
extension header so that each head

1125
00:48:34,079 --> 00:48:37,440
each note will process this trv

1126
00:48:37,440 --> 00:48:42,079
and if if for example if r3

1127
00:48:42,079 --> 00:48:44,880
detect there is a signal degradation on

1128
00:48:44,880 --> 00:48:45,200
the

1129
00:48:45,200 --> 00:48:49,440
link and it can simply uh set the flag

1130
00:48:49,440 --> 00:48:52,640
uh when it processes the trv and

1131
00:48:52,640 --> 00:48:55,760
uh indicate that indicate the the the

1132
00:48:55,760 --> 00:48:57,440
arrow to the

1133
00:48:57,440 --> 00:49:01,760
uh to the uh to the following

1134
00:49:01,760 --> 00:49:04,880
and when r4 received this indication

1135
00:49:04,880 --> 00:49:07,680
and it it generates another uh

1136
00:49:07,680 --> 00:49:09,599
protection switch request

1137
00:49:09,599 --> 00:49:15,119
um to r1 to ask ask around to switch the

1138
00:49:15,119 --> 00:49:18,319
uh the forwarding pass but this message

1139
00:49:18,319 --> 00:49:18,880
is

1140
00:49:18,880 --> 00:49:22,400
uh is using another uh this message is

1141
00:49:22,400 --> 00:49:23,520
using another

1142
00:49:23,520 --> 00:49:26,880
uh associate channel and this in on this

1143
00:49:26,880 --> 00:49:28,400
associate channel it is

1144
00:49:28,400 --> 00:49:31,839
end to end uh

1145
00:49:32,079 --> 00:49:35,359
the the t the s hdrv is encapsulated

1146
00:49:35,359 --> 00:49:38,400
in the doh header because it is

1147
00:49:38,400 --> 00:49:42,400
uh a message sent from end to end

1148
00:49:42,400 --> 00:49:45,440
to tell r1 there is not um

1149
00:49:45,440 --> 00:49:47,440
to tell i want the the request of the

1150
00:49:47,440 --> 00:49:48,720
switch and

1151
00:49:48,720 --> 00:49:50,800
you you can see they use different uh

1152
00:49:50,800 --> 00:49:52,079
associate channel and

1153
00:49:52,079 --> 00:49:55,119
with different associate channel id

1154
00:49:55,119 --> 00:49:58,160
and also specify the different channel

1155
00:49:58,160 --> 00:50:00,160
type

1156
00:50:00,160 --> 00:50:03,759
yes next please

1157
00:50:05,520 --> 00:50:08,640
and um and we yes

1158
00:50:08,640 --> 00:50:11,200
actually so far we have already received

1159
00:50:11,200 --> 00:50:13,760
a lot of comments and suggestions

1160
00:50:13,760 --> 00:50:17,119
to about this draft so we would like to

1161
00:50:17,119 --> 00:50:19,599
have more uh discussion on this topic

1162
00:50:19,599 --> 00:50:20,720
and to refine this

1163
00:50:20,720 --> 00:50:25,119
sh how it's used in ipv6 network

1164
00:50:25,119 --> 00:50:28,480
and expect maybe since ip since uh

1165
00:50:28,480 --> 00:50:31,839
segment routing srv6 is a

1166
00:50:31,839 --> 00:50:35,200
specific type of ipv6 uh we may also

1167
00:50:35,200 --> 00:50:36,480
want to specify

1168
00:50:36,480 --> 00:50:40,400
um may maybe

1169
00:50:40,400 --> 00:50:44,000
um specify the ac how ach

1170
00:50:44,000 --> 00:50:48,960
used in on how a sh used over srv6

1171
00:50:48,960 --> 00:50:52,480
maybe in another draft and we also see

1172
00:50:52,480 --> 00:50:54,480
there are different uh

1173
00:50:54,480 --> 00:50:57,920
depending on the applications that

1174
00:50:57,920 --> 00:51:00,720
the the ach can be used in different

1175
00:51:00,720 --> 00:51:01,359
ways

1176
00:51:01,359 --> 00:51:04,960
so we better would better to

1177
00:51:04,960 --> 00:51:07,200
to separate the draft to specify the

1178
00:51:07,200 --> 00:51:08,960
application used

1179
00:51:08,960 --> 00:51:12,000
in ach yeah

1180
00:51:12,000 --> 00:51:15,280
and i

1181
00:51:15,280 --> 00:51:17,760
and i also want to say that actually sh

1182
00:51:17,760 --> 00:51:18,720
is not

1183
00:51:18,720 --> 00:51:21,599
maybe i have two examples here but ash

1184
00:51:21,599 --> 00:51:22,000
is not

1185
00:51:22,000 --> 00:51:25,280
designed for only for oam um we would

1186
00:51:25,280 --> 00:51:26,720
like to have it

1187
00:51:26,720 --> 00:51:30,480
uh to to have ach to carry the

1188
00:51:30,480 --> 00:51:34,079
control management uh messages um

1189
00:51:34,079 --> 00:51:37,760
for different users applications

1190
00:51:37,760 --> 00:51:41,040
um yes and that's it

1191
00:51:41,040 --> 00:51:42,960
see if there's any questions for the

1192
00:51:42,960 --> 00:51:46,800
working group i have a few but

1193
00:51:47,119 --> 00:51:49,839
uh yeah actually i also have this uh

1194
00:51:49,839 --> 00:51:50,559
discussion

1195
00:51:50,559 --> 00:51:55,200
with um i think in other

1196
00:51:55,440 --> 00:51:58,880
i'm not maybe privately

1197
00:51:58,880 --> 00:52:04,000
i'm not sure sorry um

1198
00:52:04,000 --> 00:52:06,960
has any questions

1199
00:52:08,400 --> 00:52:12,000
yeah actually we want to present this uh

1200
00:52:12,000 --> 00:52:16,400
go ahead eric eric

1201
00:52:17,119 --> 00:52:19,200
well yeah i wanted to ask um about the

1202
00:52:19,200 --> 00:52:20,800
relationship to other

1203
00:52:20,800 --> 00:52:23,200
ioam work i know there's some stuff in

1204
00:52:23,200 --> 00:52:24,000
ippm

1205
00:52:24,000 --> 00:52:27,839
and and other things

1206
00:52:28,960 --> 00:52:32,240
yeah um actually if you if you

1207
00:52:32,240 --> 00:52:34,559
if you ask me the relation between ach

1208
00:52:34,559 --> 00:52:35,359
and l i

1209
00:52:35,359 --> 00:52:39,040
o e m i think iom was one of the case

1210
00:52:39,040 --> 00:52:42,160
that can make use of the uh can be one

1211
00:52:42,160 --> 00:52:42,720
of the

1212
00:52:42,720 --> 00:52:46,240
uh type of ach and

1213
00:52:46,240 --> 00:52:48,960
why we i think the big difference is iom

1214
00:52:48,960 --> 00:52:50,079
is only

1215
00:52:50,079 --> 00:52:53,599
only designed for the oem but

1216
00:52:53,599 --> 00:52:56,319
if you if you just look at the

1217
00:52:56,319 --> 00:52:57,760
encapsulation they are

1218
00:52:57,760 --> 00:53:01,599
maybe they are similar but the the

1219
00:53:01,599 --> 00:53:04,960
the the the design um

1220
00:53:04,960 --> 00:53:07,599
background the i mean the design behind

1221
00:53:07,599 --> 00:53:10,000
this two technology are different

1222
00:53:10,000 --> 00:53:12,720
because we see there are um there are so

1223
00:53:12,720 --> 00:53:14,240
many um

1224
00:53:14,240 --> 00:53:17,119
control and management messages there

1225
00:53:17,119 --> 00:53:19,280
are requirements to carry these control

1226
00:53:19,280 --> 00:53:20,319
and management

1227
00:53:20,319 --> 00:53:23,359
messages on the ip layer

1228
00:53:23,359 --> 00:53:26,480
if we don't have a signal routing but we

1229
00:53:26,480 --> 00:53:30,000
um but we we don't have a

1230
00:53:30,000 --> 00:53:33,280
we don't we we don't have some some of

1231
00:53:33,280 --> 00:53:35,280
them they don't have any

1232
00:53:35,280 --> 00:53:40,160
signaling protocol to carry them so

1233
00:53:41,760 --> 00:53:44,960
i mean ach is is is designed

1234
00:53:44,960 --> 00:53:48,160
it is open to to um

1235
00:53:48,160 --> 00:53:52,240
i mean it's open to any applications

1236
00:53:52,240 --> 00:53:54,800
that if you think that is it it should

1237
00:53:54,800 --> 00:53:55,280
be

1238
00:53:55,280 --> 00:53:59,280
used in in the ip layer um

1239
00:53:59,280 --> 00:54:01,920
yeah um

1240
00:54:02,960 --> 00:54:06,319
um to sum up i think iom is one

1241
00:54:06,319 --> 00:54:10,160
one of the uh type of sh um

1242
00:54:10,160 --> 00:54:12,800
currently i i i don't have it in the

1243
00:54:12,800 --> 00:54:13,680
draft but

1244
00:54:13,680 --> 00:54:16,720
i have some um i have something

1245
00:54:16,720 --> 00:54:21,119
in mind to to use it to use sh in other

1246
00:54:21,119 --> 00:54:24,319
other application but but um

1247
00:54:24,319 --> 00:54:28,240
um yeah just under the discussion so

1248
00:54:28,240 --> 00:54:31,680
maybe maybe in future that we we can

1249
00:54:31,680 --> 00:54:33,200
have more um

1250
00:54:33,200 --> 00:54:39,200
application use cases there

1251
00:54:39,200 --> 00:54:41,520
yeah so how does this relate to other

1252
00:54:41,520 --> 00:54:44,640
things like apn

1253
00:54:45,599 --> 00:54:48,960
um uh i'm i'm not sure that i i don't

1254
00:54:48,960 --> 00:54:49,599
have this

1255
00:54:49,599 --> 00:54:52,880
uh a mind so um

1256
00:54:52,880 --> 00:54:55,599
currently i mean from my site it's it's

1257
00:54:55,599 --> 00:54:58,960
not so related to apn

1258
00:54:58,960 --> 00:55:03,040
okay and and this is these are just

1259
00:55:03,040 --> 00:55:05,359
this is just traffic between routers so

1260
00:55:05,359 --> 00:55:08,319
the packets are created by the routers

1261
00:55:08,319 --> 00:55:10,880
this is not inserting this in data

1262
00:55:10,880 --> 00:55:13,200
packets

1263
00:55:13,200 --> 00:55:15,920
no i think it's limited to to the to the

1264
00:55:15,920 --> 00:55:16,480
network

1265
00:55:16,480 --> 00:55:20,640
nodes currently we don't want to

1266
00:55:20,640 --> 00:55:23,359
uh have this app capability uh from

1267
00:55:23,359 --> 00:55:25,760
between the hosts

1268
00:55:25,760 --> 00:55:28,880
okay thank you all right um

1269
00:55:28,880 --> 00:55:32,000
i think we are out of

1270
00:55:32,000 --> 00:55:35,119
about out of time so thank you

1271
00:55:35,119 --> 00:55:38,400
i guess you have another talk

1272
00:55:38,480 --> 00:55:42,160
thank you please go ahead uh yeah

1273
00:55:42,160 --> 00:55:44,640
yeah actually this word this topic

1274
00:55:44,640 --> 00:55:45,520
includes two

1275
00:55:45,520 --> 00:55:48,799
uh drafts one is the the draft

1276
00:55:48,799 --> 00:55:51,760
named uh second segment routing for

1277
00:55:51,760 --> 00:55:53,040
redundancy protection

1278
00:55:53,040 --> 00:55:55,440
in spring working group and the second

1279
00:55:55,440 --> 00:55:58,240
is the this one is the srh extension for

1280
00:55:58,240 --> 00:55:58,640
this

1281
00:55:58,640 --> 00:56:02,319
redundancy protect protection and

1282
00:56:02,319 --> 00:56:05,280
yeah i will give this uh this the

1283
00:56:05,280 --> 00:56:07,040
introduction for both of them

1284
00:56:07,040 --> 00:56:09,920
yeah next please

1285
00:56:10,640 --> 00:56:14,000
and just a short introduction uh

1286
00:56:14,000 --> 00:56:16,480
to to this redundancy protection what it

1287
00:56:16,480 --> 00:56:17,119
is

1288
00:56:17,119 --> 00:56:19,280
so actually the the service per

1289
00:56:19,280 --> 00:56:20,240
protection

1290
00:56:20,240 --> 00:56:22,079
comes from one of the three uh

1291
00:56:22,079 --> 00:56:24,240
technology technologies defined

1292
00:56:24,240 --> 00:56:25,760
techniques defined in

1293
00:56:25,760 --> 00:56:28,480
deterministic networking in the dead

1294
00:56:28,480 --> 00:56:31,119
networking group and also we see

1295
00:56:31,119 --> 00:56:32,480
there are also requirements for

1296
00:56:32,480 --> 00:56:34,559
providing strict end-to-end

1297
00:56:34,559 --> 00:56:38,240
reliability to the services so

1298
00:56:38,240 --> 00:56:40,000
here that we have this redundancy

1299
00:56:40,000 --> 00:56:42,559
protection it is one of the mechanism to

1300
00:56:42,559 --> 00:56:43,680
achieve these

1301
00:56:43,680 --> 00:56:46,240
the service protection and it follows

1302
00:56:46,240 --> 00:56:47,440
the principle of

1303
00:56:47,440 --> 00:56:50,240
prey off and that stands for the package

1304
00:56:50,240 --> 00:56:51,119
replication

1305
00:56:51,119 --> 00:56:54,559
elimination and audio function

1306
00:56:54,559 --> 00:56:56,880
that we have example scenario very

1307
00:56:56,880 --> 00:56:58,559
simple example scenarios

1308
00:56:58,559 --> 00:57:02,559
there and when when there is uh

1309
00:57:02,559 --> 00:57:05,200
when the flow arrives um and we name

1310
00:57:05,200 --> 00:57:05,839
this

1311
00:57:05,839 --> 00:57:09,440
the red radist is the redundancy node

1312
00:57:09,440 --> 00:57:12,720
and the mgr is the merging node and

1313
00:57:12,720 --> 00:57:15,520
we when there is a float comes to the

1314
00:57:15,520 --> 00:57:16,880
redundancy node

1315
00:57:16,880 --> 00:57:19,520
and the the flow is replicated to two

1316
00:57:19,520 --> 00:57:20,400
copies

1317
00:57:20,400 --> 00:57:23,520
and these two copies uh two copies uh

1318
00:57:23,520 --> 00:57:25,520
will go through different paths to the

1319
00:57:25,520 --> 00:57:26,720
merging node

1320
00:57:26,720 --> 00:57:29,839
the first one will go to the e will go

1321
00:57:29,839 --> 00:57:31,040
from

1322
00:57:31,040 --> 00:57:33,440
redundancy node to r3 to margin node and

1323
00:57:33,440 --> 00:57:34,559
the second is to

1324
00:57:34,559 --> 00:57:37,680
r4 to match node and the first received

1325
00:57:37,680 --> 00:57:38,319
packet

1326
00:57:38,319 --> 00:57:41,359
with this with the sequence number uh

1327
00:57:41,359 --> 00:57:42,240
with the

1328
00:57:42,240 --> 00:57:45,680
the same sequence number and

1329
00:57:45,680 --> 00:57:47,760
packet the first package with the same

1330
00:57:47,760 --> 00:57:48,880
sequence number

1331
00:57:48,880 --> 00:57:52,000
will be uh transmitted from merging note

1332
00:57:52,000 --> 00:57:53,040
to r2

1333
00:57:53,040 --> 00:57:55,680
and the other one the redundant package

1334
00:57:55,680 --> 00:57:57,200
will be dropped

1335
00:57:57,200 --> 00:57:59,839
so that in this way that to protect this

1336
00:57:59,839 --> 00:58:01,599
redundant

1337
00:58:01,599 --> 00:58:04,240
path to protect there is no packet loss

1338
00:58:04,240 --> 00:58:04,799
to

1339
00:58:04,799 --> 00:58:07,839
protect the the service

1340
00:58:07,839 --> 00:58:13,119
without the packet loss yes next please

1341
00:58:16,079 --> 00:58:17,839
yeah to support the the relentless

1342
00:58:17,839 --> 00:58:19,520
protection actually we defined

1343
00:58:19,520 --> 00:58:22,480
four uh information and the first first

1344
00:58:22,480 --> 00:58:23,920
is the redundant segment

1345
00:58:23,920 --> 00:58:27,040
redundancy segment uh it is uh

1346
00:58:27,040 --> 00:58:29,200
it performs the packet replication

1347
00:58:29,200 --> 00:58:31,200
function on the redemptive node

1348
00:58:31,200 --> 00:58:33,599
and it's associated with a redundancy

1349
00:58:33,599 --> 00:58:34,960
policy actually is a

1350
00:58:34,960 --> 00:58:38,079
variant of the sr policy and

1351
00:58:38,079 --> 00:58:42,240
in in and in case of the srv6 that we

1352
00:58:42,240 --> 00:58:43,520
define a new behavior

1353
00:58:43,520 --> 00:58:46,720
and are and the the second

1354
00:58:46,720 --> 00:58:49,040
piece of information the second

1355
00:58:49,040 --> 00:58:49,760
information

1356
00:58:49,760 --> 00:58:52,880
is the merging segment and is the

1357
00:58:52,880 --> 00:58:54,960
similar to the redundancy segment it

1358
00:58:54,960 --> 00:58:56,240
performs the map

1359
00:58:56,240 --> 00:58:59,599
package of amni alignment elimination

1360
00:58:59,599 --> 00:59:02,480
on the merging node and new behavior and

1361
00:59:02,480 --> 00:59:02,799
m

1362
00:59:02,799 --> 00:59:06,400
is defined and to identify the

1363
00:59:06,400 --> 00:59:09,040
unique flow and and identify the packet

1364
00:59:09,040 --> 00:59:09,760
sequence

1365
00:59:09,760 --> 00:59:12,640
with within one flow that we define the

1366
00:59:12,640 --> 00:59:14,400
flow identification the sub

1367
00:59:14,400 --> 00:59:17,119
and sequence number there and in this

1368
00:59:17,119 --> 00:59:19,520
drafted we extend the srh

1369
00:59:19,520 --> 00:59:22,079
option optional tre to encapsulate

1370
00:59:22,079 --> 00:59:24,000
encapsulate them

1371
00:59:24,000 --> 00:59:26,960
and the last uh information is that we

1372
00:59:26,960 --> 00:59:29,040
define this redundancy policy actually

1373
00:59:29,040 --> 00:59:31,200
it's a variant of sr policy

1374
00:59:31,200 --> 00:59:33,920
the difference is we have more than one

1375
00:59:33,920 --> 00:59:35,839
ordered list of segments

1376
00:59:35,839 --> 00:59:37,839
and all these other lists of segments

1377
00:59:37,839 --> 00:59:39,359
are used at the same time

1378
00:59:39,359 --> 00:59:41,520
that's the difference from uh from

1379
00:59:41,520 --> 00:59:44,160
normal as our policy

1380
00:59:44,160 --> 00:59:47,520
and the the blue uh and the test in blue

1381
00:59:47,520 --> 00:59:47,839
is

1382
00:59:47,839 --> 00:59:51,040
what we have for the in the draft uh

1383
00:59:51,040 --> 00:59:54,880
in the draft at in this working group

1384
00:59:54,880 --> 00:59:57,440
next please

1385
00:59:59,680 --> 01:00:01,920
yeah we here we take a service success

1386
01:00:01,920 --> 01:00:02,880
example to

1387
01:00:02,880 --> 01:00:04,880
show the redundancy protection uh

1388
01:00:04,880 --> 01:00:06,000
process

1389
01:00:06,000 --> 01:00:08,960
um actually here we have uh we have two

1390
01:00:08,960 --> 01:00:09,599
different

1391
01:00:09,599 --> 01:00:14,799
um uh two choices to deploy this

1392
01:00:14,799 --> 01:00:16,880
this process and the difference is

1393
01:00:16,880 --> 01:00:19,280
depending on where do you want to

1394
01:00:19,280 --> 01:00:21,119
assign the flow id and generate the

1395
01:00:21,119 --> 01:00:23,359
sequence number and the first choice is

1396
01:00:23,359 --> 01:00:24,000
to use

1397
01:00:24,000 --> 01:00:26,880
it is you assign the flow id to the to

1398
01:00:26,880 --> 01:00:28,319
the ingress note of the

1399
01:00:28,319 --> 01:00:31,680
srb6 domain and generated the sequence

1400
01:00:31,680 --> 01:00:32,559
number there

1401
01:00:32,559 --> 01:00:35,040
and the second choice is is you define

1402
01:00:35,040 --> 01:00:37,520
the assign the flow id to the redundancy

1403
01:00:37,520 --> 01:00:38,240
node

1404
01:00:38,240 --> 01:00:40,079
and also the sequence number will be

1405
01:00:40,079 --> 01:00:41,359
generated there

1406
01:00:41,359 --> 01:00:43,599
and the difference between those two

1407
01:00:43,599 --> 01:00:44,400
choices

1408
01:00:44,400 --> 01:00:47,119
is the first one that you have the flow

1409
01:00:47,119 --> 01:00:48,640
id and the sequence number

1410
01:00:48,640 --> 01:00:51,520
uh of course in the past all over the

1411
01:00:51,520 --> 01:00:52,559
the

1412
01:00:52,559 --> 01:00:56,240
the srv6 pass forwarding pass

1413
01:00:56,240 --> 01:00:58,319
and the second choice is that you have

1414
01:00:58,319 --> 01:00:59,280
this two

1415
01:00:59,280 --> 01:01:01,599
information only between the redundancy

1416
01:01:01,599 --> 01:01:04,079
node and the merging node

1417
01:01:04,079 --> 01:01:07,280
um i want to i want to explain the

1418
01:01:07,280 --> 01:01:10,400
all these headers but let's just focus

1419
01:01:10,400 --> 01:01:11,680
on the trv the

1420
01:01:11,680 --> 01:01:14,960
in the orange in the orange color

1421
01:01:14,960 --> 01:01:19,839
in orange and this is this will

1422
01:01:19,839 --> 01:01:22,400
identify the the flow identification the

1423
01:01:22,400 --> 01:01:23,599
sequence number

1424
01:01:23,599 --> 01:01:26,799
and we capsulated in the tlv that in

1425
01:01:26,799 --> 01:01:30,319
the in the ipv6 uh srh header

1426
01:01:30,319 --> 01:01:32,880
and this information is carried to the

1427
01:01:32,880 --> 01:01:33,599
um

1428
01:01:33,599 --> 01:01:35,599
to the merging node actually this

1429
01:01:35,599 --> 01:01:38,640
information is only

1430
01:01:40,160 --> 01:01:42,720
only only meaningful for the emerging

1431
01:01:42,720 --> 01:01:43,839
note when it's

1432
01:01:43,839 --> 01:01:47,040
performed the elimination and

1433
01:01:47,040 --> 01:01:49,359
and

1434
01:01:51,680 --> 01:01:55,200
yeah and also and let me think

1435
01:01:55,200 --> 01:01:58,240
if i miss that let me say anything and

1436
01:01:58,240 --> 01:02:01,280
yeah by using this information and it's

1437
01:02:01,280 --> 01:02:04,720
um it's um for what the the

1438
01:02:04,720 --> 01:02:06,640
the packet and also drop the the

1439
01:02:06,640 --> 01:02:07,920
redundancy packet

1440
01:02:07,920 --> 01:02:11,200
but that is defined that is the behavior

1441
01:02:11,200 --> 01:02:13,440
definition that defined in the merging

1442
01:02:13,440 --> 01:02:14,400
node

1443
01:02:14,400 --> 01:02:17,920
in the merging segment so um

1444
01:02:17,920 --> 01:02:20,799
yeah i think that that that is what i

1445
01:02:20,799 --> 01:02:22,880
want to explain here that there are two

1446
01:02:22,880 --> 01:02:23,680
different

1447
01:02:23,680 --> 01:02:26,720
uh choices but no matter which different

1448
01:02:26,720 --> 01:02:29,680
which choice this information will be

1449
01:02:29,680 --> 01:02:30,880
encapsulated

1450
01:02:30,880 --> 01:02:34,240
in the in the fpv6 header

1451
01:02:34,240 --> 01:02:36,799
where the merging node uh proceed

1452
01:02:36,799 --> 01:02:37,280
process

1453
01:02:37,280 --> 01:02:40,799
the the the merging segment

1454
01:02:40,799 --> 01:02:44,720
so it always in they are always

1455
01:02:44,720 --> 01:02:48,640
encapsulated together in one ipv6 header

1456
01:02:48,640 --> 01:02:53,279
yeah next please

1457
01:02:55,440 --> 01:02:58,400
uh yeah and here every a very simple tl

1458
01:02:58,400 --> 01:02:59,760
we defined to carry these two

1459
01:02:59,760 --> 01:03:00,880
information

1460
01:03:00,880 --> 01:03:04,559
and i also see there are discussions in

1461
01:03:04,559 --> 01:03:06,640
the in the mailing list to to discuss

1462
01:03:06,640 --> 01:03:07,280
that

1463
01:03:07,280 --> 01:03:10,160
uh the flow uh ipv6 flow label can be

1464
01:03:10,160 --> 01:03:10,799
used to

1465
01:03:10,799 --> 01:03:14,079
identify the flow id so i think i

1466
01:03:14,079 --> 01:03:16,079
i would like to have more discussion

1467
01:03:16,079 --> 01:03:17,280
there um

1468
01:03:17,280 --> 01:03:20,880
yeah currently i do i don't have any any

1469
01:03:20,880 --> 01:03:24,880
uh strong preference to to have it uh

1470
01:03:24,880 --> 01:03:27,920
in the in the tre or in the

1471
01:03:27,920 --> 01:03:31,039
or in the ipv6 flow identificat

1472
01:03:31,039 --> 01:03:34,640
flow label but i think it's also

1473
01:03:34,640 --> 01:03:38,000
be affected by the choice that we made

1474
01:03:38,000 --> 01:03:40,720
from last slide if we want to use it

1475
01:03:40,720 --> 01:03:42,480
only between the redundancy node and

1476
01:03:42,480 --> 01:03:43,440
merging node

1477
01:03:43,440 --> 01:03:46,640
i think that's that it's it's okay to

1478
01:03:46,640 --> 01:03:50,559
use it as the ipv5 v6 flow label

1479
01:03:50,559 --> 01:03:53,680
but if you want to use it if you want to

1480
01:03:53,680 --> 01:03:54,480
have the

1481
01:03:54,480 --> 01:03:56,720
have the flow identification from the

1482
01:03:56,720 --> 01:03:58,559
ingress of the app

1483
01:03:58,559 --> 01:04:01,920
of the srv6 domain that means that

1484
01:04:01,920 --> 01:04:04,880
you will have um yeah this this flow

1485
01:04:04,880 --> 01:04:05,920
label

1486
01:04:05,920 --> 01:04:09,280
will be used for ecmp and also used for

1487
01:04:09,280 --> 01:04:09,839
the

1488
01:04:09,839 --> 01:04:13,280
uh for this redundancy protection

1489
01:04:13,280 --> 01:04:16,319
so that would be um some conflict there

1490
01:04:16,319 --> 01:04:20,720
i think yeah next please um

1491
01:04:20,720 --> 01:04:23,839
oh never mind so is it is that the same

1492
01:04:23,839 --> 01:04:26,319
flow label as in the ipv6 header or

1493
01:04:26,319 --> 01:04:28,799
something different

1494
01:04:28,799 --> 01:04:31,839
yeah yeah i i mentioned this ipv6 header

1495
01:04:31,839 --> 01:04:32,640
uh

1496
01:04:32,640 --> 01:04:34,720
flow label yeah because people think

1497
01:04:34,720 --> 01:04:36,160
that um

1498
01:04:36,160 --> 01:04:38,079
there are there's some discussion that

1499
01:04:38,079 --> 01:04:40,000
they think the flow identification can

1500
01:04:40,000 --> 01:04:40,799
be carried

1501
01:04:40,799 --> 01:04:43,839
in the ipv6 uh flow label

1502
01:04:43,839 --> 01:04:47,200
in the ipv6 header

1503
01:04:48,000 --> 01:04:51,760
so is that a yes or no answer

1504
01:04:52,799 --> 01:04:56,079
yeah um if if

1505
01:04:56,079 --> 01:04:58,480
i have a preference i think i prefer to

1506
01:04:58,480 --> 01:04:59,119
use it

1507
01:04:59,119 --> 01:05:02,480
here in the srh optional trv

1508
01:05:02,480 --> 01:05:05,200
because i see if you use it i have

1509
01:05:05,200 --> 01:05:06,799
already mentioned

1510
01:05:06,799 --> 01:05:11,200
if you use it in in the ipv6 header

1511
01:05:11,200 --> 01:05:13,680
that will and this information is

1512
01:05:13,680 --> 01:05:15,039
encapsulated at the

1513
01:05:15,039 --> 01:05:18,880
ingress node that will that

1514
01:05:18,880 --> 01:05:21,359
i mean the ipv6 flow label can only be

1515
01:05:21,359 --> 01:05:22,720
used for this function

1516
01:05:22,720 --> 01:05:25,920
but not for the ecmp like

1517
01:05:25,920 --> 01:05:29,839
ecmp uh in other parts of the

1518
01:05:29,839 --> 01:05:33,039
the forwarding pass okay so we have two

1519
01:05:33,039 --> 01:05:34,400
people in the queue

1520
01:05:34,400 --> 01:05:36,720
eric and then darren so eric why don't

1521
01:05:36,720 --> 01:05:39,039
you go ahead

1522
01:05:39,039 --> 01:05:40,799
uh yeah i have thank you i have a

1523
01:05:40,799 --> 01:05:42,799
multi-part question uh so

1524
01:05:42,799 --> 01:05:44,640
my scan of the document is that you want

1525
01:05:44,640 --> 01:05:47,200
to allocate some new

1526
01:05:47,200 --> 01:05:49,920
um tlvs from within the the segment

1527
01:05:49,920 --> 01:05:51,760
reading header

1528
01:05:51,760 --> 01:05:54,160
yeah and the iona registry for that

1529
01:05:54,160 --> 01:05:56,480
looks like it's ietf review

1530
01:05:56,480 --> 01:05:59,760
which means uh you know it doesn't

1531
01:05:59,760 --> 01:06:00,960
which means this doesn't have to be done

1532
01:06:00,960 --> 01:06:05,280
in six man uh so this could be done by

1533
01:06:05,280 --> 01:06:07,760
spring or could be to somewhere else uh

1534
01:06:07,760 --> 01:06:08,559
i'll i

1535
01:06:08,559 --> 01:06:09,920
you know i don't know i'll leave it to

1536
01:06:09,920 --> 01:06:11,200
you and the chairs in the group to

1537
01:06:11,200 --> 01:06:13,440
decide if it belongs in six man but

1538
01:06:13,440 --> 01:06:15,839
i'll just observe that i i think it

1539
01:06:15,839 --> 01:06:17,359
doesn't have to be done here

1540
01:06:17,359 --> 01:06:21,839
in order to get your um allocation

1541
01:06:21,839 --> 01:06:25,119
so oh okay i'm not aware of this

1542
01:06:25,119 --> 01:06:28,960
so i yeah yeah i don't intentionally to

1543
01:06:28,960 --> 01:06:31,760
put it in six men i thought it should be

1544
01:06:31,760 --> 01:06:32,400
there

1545
01:06:32,400 --> 01:06:35,440
but if not that we can also move it to

1546
01:06:35,440 --> 01:06:37,680
a spring working group because we also

1547
01:06:37,680 --> 01:06:38,559
have this uh

1548
01:06:38,559 --> 01:06:41,599
mechanism defined there yeah

1549
01:06:41,599 --> 01:06:44,480
yeah yeah i think i'll leave this to the

1550
01:06:44,480 --> 01:06:45,200
to the

1551
01:06:45,200 --> 01:06:48,160
working group chairs

1552
01:06:49,839 --> 01:06:52,558
yeah darren

1553
01:06:53,280 --> 01:06:56,480
make the same comment as as eric on

1554
01:06:56,480 --> 01:06:58,880
where this could live but um but since

1555
01:06:58,880 --> 01:07:00,480
that's already made i just want to make

1556
01:07:00,480 --> 01:07:01,359
a comment on the

1557
01:07:01,359 --> 01:07:02,799
on the flow label if you do want to move

1558
01:07:02,799 --> 01:07:04,400
this flow id

1559
01:07:04,400 --> 01:07:06,720
into the flow label uh load balancing

1560
01:07:06,720 --> 01:07:08,319
nodes are supposed to take into account

1561
01:07:08,319 --> 01:07:10,079
more than just the flow label

1562
01:07:10,079 --> 01:07:12,960
uh when they when they determine uh how

1563
01:07:12,960 --> 01:07:14,160
they're going to

1564
01:07:14,160 --> 01:07:16,640
be performing ecmp or ucmp load

1565
01:07:16,640 --> 01:07:17,680
balancing

1566
01:07:17,680 --> 01:07:20,880
so if you're concerned that

1567
01:07:20,880 --> 01:07:24,559
that you may not have as much

1568
01:07:24,559 --> 01:07:27,599
variability in that flow label

1569
01:07:27,599 --> 01:07:29,599
if it's equal to what you're specifying

1570
01:07:29,599 --> 01:07:30,799
as a flow id that

1571
01:07:30,799 --> 01:07:35,038
that concern may not be all that great

1572
01:07:36,000 --> 01:07:39,119
yeah yeah i i think i agree with you

1573
01:07:39,119 --> 01:07:42,720
yeah yeah the ecm ucmps

1574
01:07:42,720 --> 01:07:45,920
it should be protected from this

1575
01:07:45,920 --> 01:07:49,599
uh it should be used it should be

1576
01:07:49,599 --> 01:07:51,760
they should have this capability to use

1577
01:07:51,760 --> 01:07:52,640
it

1578
01:07:52,640 --> 01:07:56,079
uh yeah

1579
01:07:56,079 --> 01:07:59,039
yeah so i would add that if this is to

1580
01:07:59,039 --> 01:08:02,160
the other point if this is just

1581
01:08:02,160 --> 01:08:05,440
wanting to define a tlb for srh

1582
01:08:05,440 --> 01:08:08,000
then i think having that work in the

1583
01:08:08,000 --> 01:08:09,440
spring would be

1584
01:08:09,440 --> 01:08:12,240
at least fine with me i'm not sure

1585
01:08:12,240 --> 01:08:12,640
there's

1586
01:08:12,640 --> 01:08:14,870
anything particularly ipv6

1587
01:08:14,870 --> 01:08:16,080
[Music]

1588
01:08:16,080 --> 01:08:17,920
thing that six-man i mean it might be

1589
01:08:17,920 --> 01:08:20,319
good for six men to follow it but

1590
01:08:20,319 --> 01:08:23,040
i think spring could definitely own it

1591
01:08:23,040 --> 01:08:24,080
it's more relevant

1592
01:08:24,080 --> 01:08:27,120
to the work that's being done there

1593
01:08:27,120 --> 01:08:29,839
uh stuart

1594
01:08:32,719 --> 01:08:34,479
of course all the work on pre-op is

1595
01:08:34,479 --> 01:08:36,319
happening in detnit i would have thought

1596
01:08:36,319 --> 01:08:38,000
that this belonged over there where

1597
01:08:38,000 --> 01:08:39,439
there was a large body of people

1598
01:08:39,439 --> 01:08:41,759
interested in building reliable

1599
01:08:41,759 --> 01:08:46,238
um streams yeah actually we have this

1600
01:08:46,238 --> 01:08:48,880
history that we first proposed this in

1601
01:08:48,880 --> 01:08:49,679
that that

1602
01:08:49,679 --> 01:08:52,719
and after a few meetings that they they

1603
01:08:52,719 --> 01:08:53,520
propose that

1604
01:08:53,520 --> 01:08:56,399
we should because this uh this thing the

1605
01:08:56,399 --> 01:08:57,679
implementation now

1606
01:08:57,679 --> 01:09:01,279
um the the it includes the the segment

1607
01:09:01,279 --> 01:09:02,238
definition

1608
01:09:02,238 --> 01:09:04,080
and also this how to encapsulate this

1609
01:09:04,080 --> 01:09:05,839
metadata and also

1610
01:09:05,839 --> 01:09:09,198
include the the the yeah the the the

1611
01:09:09,198 --> 01:09:12,799
the srv the sr policy definition

1612
01:09:12,799 --> 01:09:15,759
so they they they shift this worked from

1613
01:09:15,759 --> 01:09:17,600
that net to spring

1614
01:09:17,600 --> 01:09:21,520
and if if the chairs agree that we can

1615
01:09:21,520 --> 01:09:25,279
we can have this uh i and allocation in

1616
01:09:25,279 --> 01:09:26,319
spring working group

1617
01:09:26,319 --> 01:09:28,640
i think um we can just focus on the

1618
01:09:28,640 --> 01:09:30,719
screen working group and then

1619
01:09:30,719 --> 01:09:34,319
after the after it's all done and we

1620
01:09:34,319 --> 01:09:36,399
come back to then that if if it's

1621
01:09:36,399 --> 01:09:37,920
necessary

1622
01:09:37,920 --> 01:09:39,920
yeah actually this works proposed like

1623
01:09:39,920 --> 01:09:43,679
two years ago to then that first

1624
01:09:46,799 --> 01:09:48,640
making any changes to the data plane but

1625
01:09:48,640 --> 01:09:50,560
this is a function that that net needs

1626
01:09:50,560 --> 01:09:53,120
in my view

1627
01:09:53,279 --> 01:09:56,880
yeah yes yes they're not needed but they

1628
01:09:56,880 --> 01:09:57,520
need the

1629
01:09:57,520 --> 01:10:00,640
extension on srb6 so we

1630
01:10:00,640 --> 01:10:02,800
shift to the work to exile to spring

1631
01:10:02,800 --> 01:10:05,040
yeah

1632
01:10:08,640 --> 01:10:12,239
all right any other questions

1633
01:10:15,199 --> 01:10:18,080
okay good yes i think the conclusion is

1634
01:10:18,080 --> 01:10:18,560
that

1635
01:10:18,560 --> 01:10:20,400
probably six men is not the best place

1636
01:10:20,400 --> 01:10:22,320
for to own this work

1637
01:10:22,320 --> 01:10:25,520
and it could be springer net

1638
01:10:25,520 --> 01:10:29,840
or somewhere else thank

1639
01:10:29,840 --> 01:10:32,159
use the working group that has the you

1640
01:10:32,159 --> 01:10:34,560
need for it to define it and get review

1641
01:10:34,560 --> 01:10:35,920
from the other working groups

1642
01:10:35,920 --> 01:10:38,880
you know spring and perhaps even six man

1643
01:10:38,880 --> 01:10:39,840
in this case so

1644
01:10:39,840 --> 01:10:43,120
but we we can take that offline okay

1645
01:10:43,120 --> 01:10:45,440
so our next presentation uh omni

1646
01:10:45,440 --> 01:10:47,040
adaption layer

1647
01:10:47,040 --> 01:10:51,199
fred the floor is yours

1648
01:10:57,280 --> 01:11:00,480
fred templin are you there

1649
01:11:10,719 --> 01:11:14,320
hi fred you hear me okay

1650
01:11:14,320 --> 01:11:17,520
we can hear you okay okay uh this

1651
01:11:17,520 --> 01:11:19,679
presentation is on the omni adaptation

1652
01:11:19,679 --> 01:11:20,159
layer

1653
01:11:20,159 --> 01:11:23,280
go to the next chart please

1654
01:11:25,679 --> 01:11:27,440
so this is based on what's known as the

1655
01:11:27,440 --> 01:11:29,679
overlay multi-link network interface the

1656
01:11:29,679 --> 01:11:31,679
omni interface and you can see the draft

1657
01:11:31,679 --> 01:11:33,199
name there

1658
01:11:33,199 --> 01:11:35,520
what it is is an overlay interface

1659
01:11:35,520 --> 01:11:36,880
configured over multiple

1660
01:11:36,880 --> 01:11:39,600
underlying interfaces and if you look at

1661
01:11:39,600 --> 01:11:41,360
the diagram on the left

1662
01:11:41,360 --> 01:11:44,719
that's uh from rfc 5558 from back in

1663
01:11:44,719 --> 01:11:45,920
2010

1664
01:11:45,920 --> 01:11:47,440
you can see that thing called the vet

1665
01:11:47,440 --> 01:11:49,440
interface is that side looking thing

1666
01:11:49,440 --> 01:11:50,239
that

1667
01:11:50,239 --> 01:11:52,840
is got some substance over underlying

1668
01:11:52,840 --> 01:11:54,320
interfaces

1669
01:11:54,320 --> 01:11:58,400
and then later in 2016 in rse 7847

1670
01:11:58,400 --> 01:12:00,640
a better diagram was drawn and you can

1671
01:12:00,640 --> 01:12:02,640
see the omni interface there is at a

1672
01:12:02,640 --> 01:12:04,480
layer below ip

1673
01:12:04,480 --> 01:12:06,080
but above the underlying data link

1674
01:12:06,080 --> 01:12:07,600
interfaces

1675
01:12:07,600 --> 01:12:09,280
that's the diagram that we're using from

1676
01:12:09,280 --> 01:12:12,560
now on is the 7847 diagram

1677
01:12:12,560 --> 01:12:15,440
next chart please

1678
01:12:17,360 --> 01:12:19,199
so what about the omni interface

1679
01:12:19,199 --> 01:12:20,480
characteristics

1680
01:12:20,480 --> 01:12:22,800
it's an ordinary ip interface with a

1681
01:12:22,800 --> 01:12:24,800
9180 mtu

1682
01:12:24,800 --> 01:12:26,560
and what that means is that the ip layer

1683
01:12:26,560 --> 01:12:28,400
expects the interface to deliver packets

1684
01:12:28,400 --> 01:12:29,520
or fragments

1685
01:12:29,520 --> 01:12:33,199
up to 9180 bytes internally

1686
01:12:33,199 --> 01:12:36,480
the interface performs ip encapsulation

1687
01:12:36,480 --> 01:12:39,280
to convey original ip packets up to 9180

1688
01:12:39,280 --> 01:12:40,880
bytes over the diverse underlying

1689
01:12:40,880 --> 01:12:42,560
interfaces

1690
01:12:42,560 --> 01:12:44,800
well we've got some things to think

1691
01:12:44,800 --> 01:12:46,320
about though because the underlying

1692
01:12:46,320 --> 01:12:48,800
network path mtus are often much smaller

1693
01:12:48,800 --> 01:12:50,560
than 9180

1694
01:12:50,560 --> 01:12:53,280
for example the ipv6 minimum path mtu is

1695
01:12:53,280 --> 01:12:54,320
1280

1696
01:12:54,320 --> 01:12:55,520
and there's no in the network

1697
01:12:55,520 --> 01:12:58,480
fragmentation allowed in the ipv6 paths

1698
01:12:58,480 --> 01:13:02,320
ipv4 minimum path mt is only 576.

1699
01:13:02,320 --> 01:13:03,760
and the reason for that is because the

1700
01:13:03,760 --> 01:13:07,280
minimal ip4 interface mtu is 68 bytes

1701
01:13:07,280 --> 01:13:09,040
but the network can fragment and all

1702
01:13:09,040 --> 01:13:10,960
destinations are required to assemble at

1703
01:13:10,960 --> 01:13:13,280
least 576.

1704
01:13:13,280 --> 01:13:15,280
so what the omni interface needs to do

1705
01:13:15,280 --> 01:13:16,880
is to adapt

1706
01:13:16,880 --> 01:13:19,679
the omni interface mtu to the underlying

1707
01:13:19,679 --> 01:13:21,440
network problem to use

1708
01:13:21,440 --> 01:13:22,800
and for that purpose we have what's

1709
01:13:22,800 --> 01:13:24,719
known as the omni adaptation layer with

1710
01:13:24,719 --> 01:13:26,960
the oal

1711
01:13:26,960 --> 01:13:33,600
next chart please

1712
01:13:33,600 --> 01:13:36,159
so what the ola ol is is an omni

1713
01:13:36,159 --> 01:13:37,360
interface sub layer

1714
01:13:37,360 --> 01:13:40,080
below the ip layer but above the

1715
01:13:40,080 --> 01:13:42,000
underlying interfaces and it's based on

1716
01:13:42,000 --> 01:13:42,480
rsc

1717
01:13:42,480 --> 01:13:46,000
2473 encapsulation ipv6 encapsulation in

1718
01:13:46,000 --> 01:13:47,360
other words

1719
01:13:47,360 --> 01:13:50,080
uh when the ip layer delivers a packet

1720
01:13:50,080 --> 01:13:51,920
to the omni interface remember it can be

1721
01:13:51,920 --> 01:13:54,000
up to 9180 bytes

1722
01:13:54,000 --> 01:13:57,520
the ol inserts an rc 2473 encapsulation

1723
01:13:57,520 --> 01:13:58,400
header

1724
01:13:58,400 --> 01:14:00,400
and appends a two by trailing fletcher

1725
01:14:00,400 --> 01:14:01,600
checksum to the

1726
01:14:01,600 --> 01:14:04,719
form the oal packet we count the trailer

1727
01:14:04,719 --> 01:14:06,239
as part of the payload at this point

1728
01:14:06,239 --> 01:14:07,040
where we put the

1729
01:14:07,040 --> 01:14:10,480
the payload length in the oel header um

1730
01:14:10,480 --> 01:14:12,880
the oel next then uses ipv6

1731
01:14:12,880 --> 01:14:14,320
fragmentation

1732
01:14:14,320 --> 01:14:16,480
to break the oal packet into fragments

1733
01:14:16,480 --> 01:14:18,159
containing no more than the maximum

1734
01:14:18,159 --> 01:14:19,600
payload size

1735
01:14:19,600 --> 01:14:21,199
so there you see the fragments and each

1736
01:14:21,199 --> 01:14:23,520
one of them has a payload in blue

1737
01:14:23,520 --> 01:14:25,360
that is a portion of the original ip

1738
01:14:25,360 --> 01:14:28,880
packet that is no larger than the mps

1739
01:14:28,880 --> 01:14:30,719
and the final fragment has that little

1740
01:14:30,719 --> 01:14:33,840
trailing check sum attached to it

1741
01:14:33,840 --> 01:14:36,719
next chart please

1742
01:14:38,320 --> 01:14:41,360
so then what happens next is that the ol

1743
01:14:41,360 --> 01:14:44,159
source encapsulates each oil fragment in

1744
01:14:44,159 --> 01:14:45,760
underlying network headers

1745
01:14:45,760 --> 01:14:48,000
for example udpip if we're sending over

1746
01:14:48,000 --> 01:14:49,120
the internet

1747
01:14:49,120 --> 01:14:50,480
and then sends the packets over the

1748
01:14:50,480 --> 01:14:52,000
underlying interface so there you see

1749
01:14:52,000 --> 01:14:52,800
the fragments

1750
01:14:52,800 --> 01:14:55,360
from before but they have these little

1751
01:14:55,360 --> 01:14:56,320
green

1752
01:14:56,320 --> 01:14:59,280
u1 u2 u3 headers on them which is the

1753
01:14:59,280 --> 01:15:01,760
underlying network headers

1754
01:15:01,760 --> 01:15:04,320
and what's good about these things is

1755
01:15:04,320 --> 01:15:04,880
that

1756
01:15:04,880 --> 01:15:07,280
they will get across any network path

1757
01:15:07,280 --> 01:15:09,120
because we've taken care to be sure that

1758
01:15:09,120 --> 01:15:11,199
the maximum payload size

1759
01:15:11,199 --> 01:15:13,040
is going to be small enough to fit into

1760
01:15:13,040 --> 01:15:15,600
any path path mtu's regardless of what

1761
01:15:15,600 --> 01:15:18,159
interfaces there might be in the path

1762
01:15:18,159 --> 01:15:19,840
and when the the fragments get to the

1763
01:15:19,840 --> 01:15:21,679
oil destination

1764
01:15:21,679 --> 01:15:23,199
it discards the underlying network

1765
01:15:23,199 --> 01:15:26,159
headers he reassembles the aol packet

1766
01:15:26,159 --> 01:15:27,840
and verifies the checksum

1767
01:15:27,840 --> 01:15:29,600
and then discards the oal header and

1768
01:15:29,600 --> 01:15:31,040
trailer and delivers the original packet

1769
01:15:31,040 --> 01:15:31,679
to the ip

1770
01:15:31,679 --> 01:15:39,199
layer next chart please

1771
01:15:39,199 --> 01:15:41,840
so how do we find out this maximum

1772
01:15:41,840 --> 01:15:43,440
payload size

1773
01:15:43,440 --> 01:15:47,600
um so some hops in ipv6 oil destination

1774
01:15:47,600 --> 01:15:50,640
paths could be over tunnels over ipv4

1775
01:15:50,640 --> 01:15:54,400
through ipv6 over ipv4 translators etc

1776
01:15:54,400 --> 01:15:56,320
and the packets could also be asked to

1777
01:15:56,320 --> 01:15:58,159
traverse multiple concatenated inner

1778
01:15:58,159 --> 01:16:00,000
networks with diverse ip protocol

1779
01:16:00,000 --> 01:16:02,880
versions i'll talk more about that later

1780
01:16:02,880 --> 01:16:06,080
the ipv4 minimum path mtu of 576

1781
01:16:06,080 --> 01:16:08,560
is therefore assumed unless there is

1782
01:16:08,560 --> 01:16:10,320
better knowledge

1783
01:16:10,320 --> 01:16:11,679
so now let's look at some worst case

1784
01:16:11,679 --> 01:16:15,040
analysis for the ol encapsulation header

1785
01:16:15,040 --> 01:16:16,000
we have

1786
01:16:16,000 --> 01:16:19,440
40 bytes for the rfc 2473 header

1787
01:16:19,440 --> 01:16:22,719
plus 40 bytes for an ol routing header

1788
01:16:22,719 --> 01:16:25,679
uh a single routing header plus eight

1789
01:16:25,679 --> 01:16:27,440
bytes for the fragment header so 88

1790
01:16:27,440 --> 01:16:30,239
bytes for oil encapsulation

1791
01:16:30,239 --> 01:16:32,000
and then each underlying network the

1792
01:16:32,000 --> 01:16:34,000
worst case we have would be

1793
01:16:34,000 --> 01:16:37,199
a 40 byte ipv6 header or a 20 byte ipv4

1794
01:16:37,199 --> 01:16:38,159
header

1795
01:16:38,159 --> 01:16:40,400
plus 40 bytes for security encapsulation

1796
01:16:40,400 --> 01:16:41,840
such as ipv6

1797
01:16:41,840 --> 01:16:46,560
ssl tls etc plus an 8 by udp header

1798
01:16:46,560 --> 01:16:49,360
and therefore we know that the minimum

1799
01:16:49,360 --> 01:16:51,440
maximum payload size

1800
01:16:51,440 --> 01:16:54,880
is 576 minus 88 minus 88 equals 400

1801
01:16:54,880 --> 01:16:56,159
bytes

1802
01:16:56,159 --> 01:16:58,719
that means that in the worst case we can

1803
01:16:58,719 --> 01:17:00,640
expect that if we limit our payload size

1804
01:17:00,640 --> 01:17:02,080
to 400 bytes

1805
01:17:02,080 --> 01:17:03,440
these fragments will get through any

1806
01:17:03,440 --> 01:17:06,080
path anywhere in the network

1807
01:17:06,080 --> 01:17:08,400
so for an example if we had a 1500 byte

1808
01:17:08,400 --> 01:17:10,080
original ip packet that would take up

1809
01:17:10,080 --> 01:17:12,080
four aol fragments

1810
01:17:12,080 --> 01:17:14,880
three fragments with 400 by payloads and

1811
01:17:14,880 --> 01:17:17,040
the final fragment with 302 by payload

1812
01:17:17,040 --> 01:17:19,760
which includes the two octet trailer

1813
01:17:19,760 --> 01:17:23,199
but fortunately larger per path

1814
01:17:23,199 --> 01:17:25,679
maximum payload size values can often be

1815
01:17:25,679 --> 01:17:27,360
determined so that we don't have to have

1816
01:17:27,360 --> 01:17:28,840
all of this overhead and all these

1817
01:17:28,840 --> 01:17:31,040
fragments

1818
01:17:31,040 --> 01:17:33,920
that's chart please

1819
01:17:37,360 --> 01:17:40,560
so the oil source can set path

1820
01:17:40,560 --> 01:17:43,120
maximum payload size values that are

1821
01:17:43,120 --> 01:17:44,400
larger than the minimum

1822
01:17:44,400 --> 01:17:46,800
maximum payload size for specific oil

1823
01:17:46,800 --> 01:17:48,480
destinations

1824
01:17:48,480 --> 01:17:50,560
so if the ol source knows without

1825
01:17:50,560 --> 01:17:52,159
probing that the path can transit a

1826
01:17:52,159 --> 01:17:54,320
larger mps without loss

1827
01:17:54,320 --> 01:17:56,159
it can set that larger value for that

1828
01:17:56,159 --> 01:17:58,080
oil destination

1829
01:17:58,080 --> 01:18:00,320
otherwise the oil source can send probes

1830
01:18:00,320 --> 01:18:02,400
to the oal destination to discover

1831
01:18:02,400 --> 01:18:04,560
larger path mps values

1832
01:18:04,560 --> 01:18:05,920
and that probing would be in the

1833
01:18:05,920 --> 01:18:08,360
standard of rc4821 or roc

1834
01:18:08,360 --> 01:18:11,679
8899 which

1835
01:18:11,679 --> 01:18:16,000
is mtu probing um the oil encapsulation

1836
01:18:16,000 --> 01:18:16,480
need

1837
01:18:16,480 --> 01:18:17,920
is not needed when the source and

1838
01:18:17,920 --> 01:18:19,840
destination are on the same link and the

1839
01:18:19,840 --> 01:18:21,840
original ip packet fits within the link

1840
01:18:21,840 --> 01:18:23,280
mtu

1841
01:18:23,280 --> 01:18:25,840
so so the game here is you want to send

1842
01:18:25,840 --> 01:18:28,719
with as few encapsulations as possible

1843
01:18:28,719 --> 01:18:30,560
preferably with no encapsulations and

1844
01:18:30,560 --> 01:18:32,000
that's a case in which you can get away

1845
01:18:32,000 --> 01:18:33,520
without even have to have the

1846
01:18:33,520 --> 01:18:37,040
the c473 header

1847
01:18:37,040 --> 01:18:41,840
next chart please

1848
01:18:43,520 --> 01:18:46,880
okay so by again by using the minimum

1849
01:18:46,880 --> 01:18:49,120
maximum payload size we have a safe

1850
01:18:49,120 --> 01:18:51,440
assumption that works over all paths

1851
01:18:51,440 --> 01:18:53,679
and non-final oil fragments must contain

1852
01:18:53,679 --> 01:18:55,679
at least this much worth of payload

1853
01:18:55,679 --> 01:18:58,800
so we wouldn't have any tiny fragments

1854
01:18:58,800 --> 01:19:00,880
the only oil extension headers that can

1855
01:19:00,880 --> 01:19:02,719
be included are one fragment header and

1856
01:19:02,719 --> 01:19:03,920
one

1857
01:19:03,920 --> 01:19:07,679
orh but no other ipv6 extension headers

1858
01:19:07,679 --> 01:19:09,920
and that allows oil destinations to drop

1859
01:19:09,920 --> 01:19:12,239
any non-final fragments less than

1860
01:19:12,239 --> 01:19:14,640
minimum mass impaired size of payload

1861
01:19:14,640 --> 01:19:17,199
which defeats the tiny fragment attacks

1862
01:19:17,199 --> 01:19:19,520
and oil destinations drop oil fret

1863
01:19:19,520 --> 01:19:21,280
packets and fragments with oil extension

1864
01:19:21,280 --> 01:19:22,080
headers

1865
01:19:22,080 --> 01:19:23,840
other than a single fragment header and

1866
01:19:23,840 --> 01:19:25,199
a single uh

1867
01:19:25,199 --> 01:19:30,400
omni routing header nice chart

1868
01:19:33,120 --> 01:19:36,320
so since we're inserting an rc 2473

1869
01:19:36,320 --> 01:19:37,440
header we need to have

1870
01:19:37,440 --> 01:19:39,679
ipv6 source and destination addresses to

1871
01:19:39,679 --> 01:19:41,280
put inside of it

1872
01:19:41,280 --> 01:19:44,800
and for that we use rfc 4193

1873
01:19:44,800 --> 01:19:48,480
unique local addresses with the fd

1874
01:19:48,480 --> 01:19:50,718
um

1875
01:19:51,600 --> 01:19:53,440
as the source and destination to enable

1876
01:19:53,440 --> 01:19:56,560
forwarding at a layer below ip

1877
01:19:56,560 --> 01:19:59,040
so from the perspective of the ip layer

1878
01:19:59,040 --> 01:20:01,520
be it ipv6 or ipv4 or some other ip

1879
01:20:01,520 --> 01:20:02,480
version

1880
01:20:02,480 --> 01:20:04,000
the ol4 forwarding would be

1881
01:20:04,000 --> 01:20:05,679
indistinguishable from layer 2

1882
01:20:05,679 --> 01:20:08,400
bridging and that means that we can use

1883
01:20:08,400 --> 01:20:09,280
it to traverse

1884
01:20:09,280 --> 01:20:11,120
multiple independent inner networks that

1885
01:20:11,120 --> 01:20:14,800
are concatenated by bridges

1886
01:20:14,800 --> 01:20:19,199
next chart

1887
01:20:19,199 --> 01:20:21,280
so here's what it looks like in a single

1888
01:20:21,280 --> 01:20:23,199
network traversal

1889
01:20:23,199 --> 01:20:25,679
we have an original source that sends an

1890
01:20:25,679 --> 01:20:28,480
original ip packet that traverses some

1891
01:20:28,480 --> 01:20:30,320
edge network until it gets to a node

1892
01:20:30,320 --> 01:20:32,239
that has one of these omni interfaces

1893
01:20:32,239 --> 01:20:33,280
you can see the

1894
01:20:33,280 --> 01:20:35,120
diagram on the left there with the omni

1895
01:20:35,120 --> 01:20:37,600
interface and that omni interface then

1896
01:20:37,600 --> 01:20:39,199
performs

1897
01:20:39,199 --> 01:20:41,679
oil packetization and then breaks the

1898
01:20:41,679 --> 01:20:42,239
oil

1899
01:20:42,239 --> 01:20:44,480
packet into encapsulated fragments that

1900
01:20:44,480 --> 01:20:47,199
you see down by the blue cloud there

1901
01:20:47,199 --> 01:20:49,199
those fragments are guaranteed to get

1902
01:20:49,199 --> 01:20:50,719
through that blue cloud

1903
01:20:50,719 --> 01:20:53,360
and get to the old destination which

1904
01:20:53,360 --> 01:20:54,800
reassembles

1905
01:20:54,800 --> 01:20:57,040
and then removes the encapsulation

1906
01:20:57,040 --> 01:20:58,239
headers and forwards the

1907
01:20:58,239 --> 01:20:59,600
the original packet to the final

1908
01:20:59,600 --> 01:21:02,080
destination

1909
01:21:02,080 --> 01:21:04,719
next chart

1910
01:21:06,800 --> 01:21:09,360
so so what happens if we have multiple

1911
01:21:09,360 --> 01:21:10,320
networks

1912
01:21:10,320 --> 01:21:13,199
that we want to traverse we have the

1913
01:21:13,199 --> 01:21:14,400
original source

1914
01:21:14,400 --> 01:21:18,400
sends to uh the first blue network

1915
01:21:18,400 --> 01:21:20,159
and there's an intermediate node between

1916
01:21:20,159 --> 01:21:22,159
the blue and the red networks that has

1917
01:21:22,159 --> 01:21:24,000
an omni interface

1918
01:21:24,000 --> 01:21:29,840
and it performs

1919
01:21:31,920 --> 01:21:35,120
um i'm sorry is my audio visible i'm

1920
01:21:35,120 --> 01:21:36,239
getting a signal that this

1921
01:21:36,239 --> 01:21:38,800
mirrors yeah same thing happened to me

1922
01:21:38,800 --> 01:21:40,320
it seems to be back now

1923
01:21:40,320 --> 01:21:44,000
um we can hear you fred okay okay

1924
01:21:44,000 --> 01:21:46,400
so then the second intermediate node

1925
01:21:46,400 --> 01:21:47,840
concatenates the red

1926
01:21:47,840 --> 01:21:49,440
and the yellow networks together at a

1927
01:21:49,440 --> 01:21:51,440
layer below ip

1928
01:21:51,440 --> 01:21:53,199
and then the packet finally pops out to

1929
01:21:53,199 --> 01:21:54,800
the final destination where the omni

1930
01:21:54,800 --> 01:21:55,360
interface

1931
01:21:55,360 --> 01:21:58,000
nearest the final destination uh removes

1932
01:21:58,000 --> 01:21:59,440
the encapsulations and forwards the

1933
01:21:59,440 --> 01:22:00,800
original ip packet to the final

1934
01:22:00,800 --> 01:22:03,440
destination

1935
01:22:03,600 --> 01:22:06,480
next chart please

1936
01:22:07,760 --> 01:22:11,120
so this omni encapsulation lets us do

1937
01:22:11,120 --> 01:22:12,639
some interesting things

1938
01:22:12,639 --> 01:22:14,159
we can create what's called a super

1939
01:22:14,159 --> 01:22:15,679
packet and

1940
01:22:15,679 --> 01:22:17,920
on the original original ip packets that

1941
01:22:17,920 --> 01:22:20,159
are smaller than the omni interface mtu

1942
01:22:20,159 --> 01:22:22,639
and arrive in bursts can be concatenated

1943
01:22:22,639 --> 01:22:23,600
together

1944
01:22:23,600 --> 01:22:26,880
into a single packet

1945
01:22:29,520 --> 01:22:31,920
okay okay i'll try to move faster then

1946
01:22:31,920 --> 01:22:32,960
um so

1947
01:22:32,960 --> 01:22:35,199
this it may be more efficient to pack

1948
01:22:35,199 --> 01:22:36,960
multiple original packets into

1949
01:22:36,960 --> 01:22:38,800
single oil super packet as you can see

1950
01:22:38,800 --> 01:22:40,320
here we've got multiple

1951
01:22:40,320 --> 01:22:42,800
ip packets in the single oil header and

1952
01:22:42,800 --> 01:22:44,400
check some trailer

1953
01:22:44,400 --> 01:22:47,280
next chart please

1954
01:22:49,679 --> 01:22:52,480
uh oil packet size feedback although the

1955
01:22:52,480 --> 01:22:53,120
interface

1956
01:22:53,120 --> 01:22:55,600
accommodates packets up to 9180 it's not

1957
01:22:55,600 --> 01:22:57,199
always good to continuously send such

1958
01:22:57,199 --> 01:22:58,880
large packets

1959
01:22:58,880 --> 01:23:01,120
classical path mtu discovery sends back

1960
01:23:01,120 --> 01:23:03,040
a pack of two big heart errors

1961
01:23:03,040 --> 01:23:05,280
to inform the sources of packet loss due

1962
01:23:05,280 --> 01:23:06,960
to size restrictions

1963
01:23:06,960 --> 01:23:08,719
but the omni interface supports

1964
01:23:08,719 --> 01:23:10,400
continuous forwarding of packets up to

1965
01:23:10,400 --> 01:23:11,840
91.80 bytes

1966
01:23:11,840 --> 01:23:14,400
while sending packets to big soft errors

1967
01:23:14,400 --> 01:23:15,679
and what this results in

1968
01:23:15,679 --> 01:23:18,239
is lossless path mtu discovery which is

1969
01:23:18,239 --> 01:23:19,679
kind of like a holy grail thing that

1970
01:23:19,679 --> 01:23:20,719
we've been searching for

1971
01:23:20,719 --> 01:23:23,360
for for really decades and a way to do

1972
01:23:23,360 --> 01:23:24,719
this

1973
01:23:24,719 --> 01:23:26,560
uh it's a new capability for hosts to

1974
01:23:26,560 --> 01:23:28,320
dynamically tune packet sizes for

1975
01:23:28,320 --> 01:23:30,639
optimal performance without loss

1976
01:23:30,639 --> 01:23:35,840
next chart

1977
01:23:35,840 --> 01:23:39,199
uh o ol is a new ins sub layer so it has

1978
01:23:39,199 --> 01:23:41,280
to include its own integrity check

1979
01:23:41,280 --> 01:23:43,040
uh it uses fletcher because it's

1980
01:23:43,040 --> 01:23:44,719
dissimilar from the underlying inner

1981
01:23:44,719 --> 01:23:46,320
interface crc32

1982
01:23:46,320 --> 01:23:50,080
and the upper layer internet checksum um

1983
01:23:50,080 --> 01:23:52,480
underlying networks can disable udp

1984
01:23:52,480 --> 01:23:53,600
checksums if

1985
01:23:53,600 --> 01:23:55,920
if possible because we've got the oil

1986
01:23:55,920 --> 01:23:57,199
checksum

1987
01:23:57,199 --> 01:23:59,600
and the some underlying network cops

1988
01:23:59,600 --> 01:24:01,280
might not include integrity checks at

1989
01:24:01,280 --> 01:24:02,000
all

1990
01:24:02,000 --> 01:24:04,800
so in that way the oil checksum actually

1991
01:24:04,800 --> 01:24:06,639
improves the integrity of the internet

1992
01:24:06,639 --> 01:24:09,120
over the current state of affairs

1993
01:24:09,120 --> 01:24:10,960
and bob if i could very quickly jump to

1994
01:24:10,960 --> 01:24:12,239
that that

1995
01:24:12,239 --> 01:24:17,839
backup chart

1996
01:24:18,639 --> 01:24:22,080
so bridging of multiple network segments

1997
01:24:22,080 --> 01:24:24,239
the omni link consists of segments

1998
01:24:24,239 --> 01:24:25,440
joined by oil and

1999
01:24:25,440 --> 01:24:27,600
intermediate nodes acting as bridges as

2000
01:24:27,600 --> 01:24:29,520
i showed in that earlier diagram

2001
01:24:29,520 --> 01:24:31,520
some examples of what these blue red and

2002
01:24:31,520 --> 01:24:32,960
yellow networks would be in civil

2003
01:24:32,960 --> 01:24:34,320
aviation we have these

2004
01:24:34,320 --> 01:24:36,480
multiple providers including aaron ceda

2005
01:24:36,480 --> 01:24:39,040
inmarsat and others

2006
01:24:39,040 --> 01:24:40,560
another example might be bridging

2007
01:24:40,560 --> 01:24:42,239
network segments within an enterprise

2008
01:24:42,239 --> 01:24:43,360
network

2009
01:24:43,360 --> 01:24:44,800
another example might be bridging

2010
01:24:44,800 --> 01:24:46,880
multiple enterprise networks like

2011
01:24:46,880 --> 01:24:48,480
boeing airbus lockheed just to name a

2012
01:24:48,480 --> 01:24:50,800
few names there

2013
01:24:50,800 --> 01:24:52,560
but an even more relevant example to

2014
01:24:52,560 --> 01:24:54,639
this group is that this can be used to

2015
01:24:54,639 --> 01:24:56,239
bridge the ipv4

2016
01:24:56,239 --> 01:24:59,040
and ipv6 internets so we can say that

2017
01:24:59,040 --> 01:25:00,960
the ipv6 transition

2018
01:25:00,960 --> 01:25:02,960
would be satisfied by putting in omni

2019
01:25:02,960 --> 01:25:04,560
interfaces out there

2020
01:25:04,560 --> 01:25:06,400
and then we'd be able to run ipv6

2021
01:25:06,400 --> 01:25:08,080
everywhere even though the network is

2022
01:25:08,080 --> 01:25:08,960
not always

2023
01:25:08,960 --> 01:25:10,639
all transitioned to ibv4 would just

2024
01:25:10,639 --> 01:25:12,960
bridge between the ipv4 and ipv6

2025
01:25:12,960 --> 01:25:14,239
internets

2026
01:25:14,239 --> 01:25:17,280
and that's my last chart

2027
01:25:20,800 --> 01:25:27,840
okay is there any comments

2028
01:25:32,400 --> 01:25:35,760
if there are no comments then

2029
01:25:35,760 --> 01:25:37,600
i think fred i think you have some echo

2030
01:25:37,600 --> 01:25:40,000
on your side

2031
01:25:40,000 --> 01:25:42,800
i i'm i'm sorry i'm i'm not sending

2032
01:25:42,800 --> 01:25:43,840
audio right now is

2033
01:25:43,840 --> 01:25:47,120
it is it feeding back

2034
01:25:47,199 --> 01:25:49,760
so at least someone had echo don't worry

2035
01:25:49,760 --> 01:25:50,639
about it because

2036
01:25:50,639 --> 01:25:52,320
you you are on the next presentation as

2037
01:25:52,320 --> 01:25:54,239
well right um okay

2038
01:25:54,239 --> 01:25:55,840
and you can take more questions on this

2039
01:25:55,840 --> 01:25:58,080
one at the end as well right

2040
01:25:58,080 --> 01:26:02,639
okay super go ahead omni ip6 nd message

2041
01:26:02,639 --> 01:26:04,000
sizing

2042
01:26:04,000 --> 01:26:06,080
ipv's neighbor disturbing message sizing

2043
01:26:06,080 --> 01:26:08,159
and again this relates to omni next

2044
01:26:08,159 --> 01:26:10,799
chart please

2045
01:26:12,000 --> 01:26:14,400
again we see our omni interface here

2046
01:26:14,400 --> 01:26:17,040
next chart

2047
01:26:18,480 --> 01:26:22,159
so i ipv6 neighbor discovery messages

2048
01:26:22,159 --> 01:26:25,280
such as rsra nsna include

2049
01:26:25,280 --> 01:26:29,440
uh options and the ipvc neighbor sub

2050
01:26:29,440 --> 01:26:31,840
discovery message options in tlb format

2051
01:26:31,840 --> 01:26:33,920
is defined in rc4861 this

2052
01:26:33,920 --> 01:26:36,480
is an 8 bit type and an 8-bit length

2053
01:26:36,480 --> 01:26:37,760
field

2054
01:26:37,760 --> 01:26:40,880
in front of the the value next chart

2055
01:26:40,880 --> 01:26:43,199
please

2056
01:26:45,520 --> 01:26:48,400
so since ipv6 neighbor discovery message

2057
01:26:48,400 --> 01:26:50,320
option length field encodes the length

2058
01:26:50,320 --> 01:26:52,719
of the option the 8 octet units

2059
01:26:52,719 --> 01:26:54,960
that means that the maximum length ibv6

2060
01:26:54,960 --> 01:26:56,159
neighbor discovery option

2061
01:26:56,159 --> 01:26:59,920
is 20 40 octets 255 times 8 equals 20 40

2062
01:26:59,920 --> 01:27:02,480
octets

2063
01:27:02,480 --> 01:27:05,199
omni sub options that go inside of an

2064
01:27:05,199 --> 01:27:06,480
omni option

2065
01:27:06,480 --> 01:27:08,639
are also tlbs but they're expressed in

2066
01:27:08,639 --> 01:27:10,159
one octet units

2067
01:27:10,159 --> 01:27:13,199
excluding the type in the length fields

2068
01:27:13,199 --> 01:27:15,199
omni sub options may include large

2069
01:27:15,199 --> 01:27:16,239
objects like

2070
01:27:16,239 --> 01:27:19,600
ascii strains fully qualified domain

2071
01:27:19,600 --> 01:27:22,239
names protocol messages and others

2072
01:27:22,239 --> 01:27:24,239
and so the omni sub options need to be

2073
01:27:24,239 --> 01:27:25,679
made to include

2074
01:27:25,679 --> 01:27:27,920
the maximum allowed for a single omni

2075
01:27:27,920 --> 01:27:29,760
option a single ip6 neighbor discovery

2076
01:27:29,760 --> 01:27:30,960
option

2077
01:27:30,960 --> 01:27:33,040
so for that reason the draft now fixes

2078
01:27:33,040 --> 01:27:34,080
the sub option

2079
01:27:34,080 --> 01:27:36,719
tight field to five bits and length

2080
01:27:36,719 --> 01:27:38,639
field to eleven bits instead of the

2081
01:27:38,639 --> 01:27:41,120
former eight plus eight

2082
01:27:41,120 --> 01:27:46,400
nice chart please so

2083
01:27:46,400 --> 01:27:48,639
the omni option is an ipv6 neighbor

2084
01:27:48,639 --> 01:27:49,760
discovery option with

2085
01:27:49,760 --> 01:27:51,679
one or more sub options so you see the

2086
01:27:51,679 --> 01:27:53,520
omni option there on the left

2087
01:27:53,520 --> 01:27:55,600
it has essentially a blank slate that

2088
01:27:55,600 --> 01:27:57,600
you write sub options into

2089
01:27:57,600 --> 01:27:59,520
and then the sub option format is on the

2090
01:27:59,520 --> 01:28:01,280
right there where you have this 5-bit

2091
01:28:01,280 --> 01:28:02,159
subtype

2092
01:28:02,159 --> 01:28:03,679
11-bit sub-length and then the

2093
01:28:03,679 --> 01:28:06,159
sub-option data

2094
01:28:06,159 --> 01:28:08,560
sub-option types include pad 1 pad in

2095
01:28:08,560 --> 01:28:09,679
and several others they're

2096
01:28:09,679 --> 01:28:12,159
in the document now with the 11-bit

2097
01:28:12,159 --> 01:28:13,760
sub-length field that means that each

2098
01:28:13,760 --> 01:28:14,080
sub

2099
01:28:14,080 --> 01:28:17,600
option can include up to 20 48 octets

2100
01:28:17,600 --> 01:28:19,360
but if that would cause the omni option

2101
01:28:19,360 --> 01:28:21,120
to exceed its total length

2102
01:28:21,120 --> 01:28:22,800
the information already processed in the

2103
01:28:22,800 --> 01:28:24,400
omni option is accepted and the final

2104
01:28:24,400 --> 01:28:27,040
sub option is ignored

2105
01:28:27,040 --> 01:28:29,840
next chart

2106
01:28:32,239 --> 01:28:34,080
so since a single ipv6 neighbor

2107
01:28:34,080 --> 01:28:35,520
discovery message may include

2108
01:28:35,520 --> 01:28:38,239
multiple on the options all are going to

2109
01:28:38,239 --> 01:28:39,840
be processed in the order of appearance

2110
01:28:39,840 --> 01:28:42,639
and the union of information is accepted

2111
01:28:42,639 --> 01:28:44,480
large object fragmentation across

2112
01:28:44,480 --> 01:28:46,320
multiple omni options is not currently

2113
01:28:46,320 --> 01:28:46,960
supported

2114
01:28:46,960 --> 01:28:48,400
it be specified in the future if

2115
01:28:48,400 --> 01:28:50,320
necessary but at this point it doesn't

2116
01:28:50,320 --> 01:28:52,080
look like it's needed

2117
01:28:52,080 --> 01:28:54,080
but ipv6 neighbor discovery message is

2118
01:28:54,080 --> 01:28:56,400
as large as the omni interface mtu are

2119
01:28:56,400 --> 01:28:57,360
permitted

2120
01:28:57,360 --> 01:29:00,080
uh 9180 bytes for an ip6 neighbor

2121
01:29:00,080 --> 01:29:01,520
discovery message

2122
01:29:01,520 --> 01:29:04,800
uh with no ipv6 fragmentation per rsc

2123
01:29:04,800 --> 01:29:08,719
for 6980 that means that we can

2124
01:29:08,719 --> 01:29:10,960
craft a large neighbor solicitation

2125
01:29:10,960 --> 01:29:12,000
message

2126
01:29:12,000 --> 01:29:15,440
as an omni adaptation layer path maximum

2127
01:29:15,440 --> 01:29:15,840
pro

2128
01:29:15,840 --> 01:29:18,400
payload size probe if we can get it to

2129
01:29:18,400 --> 01:29:20,159
generate a small neighbor advertisement

2130
01:29:20,159 --> 01:29:22,320
reply in return

2131
01:29:22,320 --> 01:29:25,840
next chart

2132
01:29:27,199 --> 01:29:29,120
so the way it works is that the omni

2133
01:29:29,120 --> 01:29:31,440
adaptation layer can craft a large ns

2134
01:29:31,440 --> 01:29:33,360
probe by including omni options with

2135
01:29:33,360 --> 01:29:35,360
large pad ends

2136
01:29:35,360 --> 01:29:37,120
then send the probe over an underlying

2137
01:29:37,120 --> 01:29:40,080
interface without any fragmentation

2138
01:29:40,080 --> 01:29:42,400
if the oil destination gets it it

2139
01:29:42,400 --> 01:29:44,000
quickly skips over the pad ends and

2140
01:29:44,000 --> 01:29:45,840
returns a small neighbor advertisement

2141
01:29:45,840 --> 01:29:47,040
without padding

2142
01:29:47,040 --> 01:29:48,719
and that small neighbor advertisement is

2143
01:29:48,719 --> 01:29:50,239
assured to traverse all paths in the

2144
01:29:50,239 --> 01:29:52,000
reverse direction

2145
01:29:52,000 --> 01:29:54,080
this allows us to test the one-way path

2146
01:29:54,080 --> 01:29:55,679
from the oil source

2147
01:29:55,679 --> 01:29:57,520
to the oil destination across any

2148
01:29:57,520 --> 01:29:59,120
concatenated and underlying networks in

2149
01:29:59,120 --> 01:30:01,360
the path

2150
01:30:01,360 --> 01:30:02,960
individual probes are expendable they

2151
01:30:02,960 --> 01:30:05,040
don't interfere with data traffic

2152
01:30:05,040 --> 01:30:06,960
and single probe success may indicate

2153
01:30:06,960 --> 01:30:08,719
the opportunity to increase the path

2154
01:30:08,719 --> 01:30:10,800
maximum payload size

2155
01:30:10,800 --> 01:30:12,960
but we still need continuous probing to

2156
01:30:12,960 --> 01:30:15,199
detect path nps changes in case there's

2157
01:30:15,199 --> 01:30:17,280
a change in the path

2158
01:30:17,280 --> 01:30:21,199
next chart

2159
01:30:21,199 --> 01:30:24,320
and this is what it looks like so the ol

2160
01:30:24,320 --> 01:30:26,560
source sends a large ns message on the

2161
01:30:26,560 --> 01:30:28,080
left hand side

2162
01:30:28,080 --> 01:30:29,679
uh it may or may not make it to the

2163
01:30:29,679 --> 01:30:31,760
final destination if it makes it

2164
01:30:31,760 --> 01:30:34,239
the final destination sends a small

2165
01:30:34,239 --> 01:30:35,679
neighbor advertising message

2166
01:30:35,679 --> 01:30:37,760
in the reverse direction and that's

2167
01:30:37,760 --> 01:30:39,280
going to be assured to traverse all

2168
01:30:39,280 --> 01:30:41,280
paths back to the original source

2169
01:30:41,280 --> 01:30:42,719
so that's how we do the one-way probing

2170
01:30:42,719 --> 01:30:44,560
to get our maximum payload size larger

2171
01:30:44,560 --> 01:30:45,040
for

2172
01:30:45,040 --> 01:30:48,719
for the oil fragmentation

2173
01:30:48,719 --> 01:30:51,280
next chart

2174
01:30:53,840 --> 01:30:57,280
and i think that's the end for that

2175
01:30:57,360 --> 01:31:03,839
yep any questions

2176
01:31:12,880 --> 01:31:16,000
i i've made some pretty uh bold claims

2177
01:31:16,000 --> 01:31:18,480
in the original presentation at first

2178
01:31:18,480 --> 01:31:20,159
including the fact that

2179
01:31:20,159 --> 01:31:22,320
we can consider the ipv4 and ipv6

2180
01:31:22,320 --> 01:31:23,360
transition to be

2181
01:31:23,360 --> 01:31:25,440
good if we adopt omni because we're

2182
01:31:25,440 --> 01:31:28,080
already where we need to be

2183
01:31:28,080 --> 01:31:30,000
i would think some some of those things

2184
01:31:30,000 --> 01:31:33,760
might warrant some further discussion

2185
01:31:36,960 --> 01:31:45,840
any comments from the working group

2186
01:31:46,960 --> 01:31:49,679
fred i i'm sorry to admit that i i don't

2187
01:31:49,679 --> 01:31:50,719
we're having trouble

2188
01:31:50,719 --> 01:31:53,360
seeing that there being any significant

2189
01:31:53,360 --> 01:31:59,839
interest in this work here

2190
01:32:11,040 --> 01:32:12,960
well if there is no more people in the

2191
01:32:12,960 --> 01:32:14,239
queue i think

2192
01:32:14,239 --> 01:32:17,440
we'll see each other again

2193
01:32:17,440 --> 01:32:20,800
on uh on thursday

2194
01:32:20,800 --> 01:32:23,280
with the more uh regular working group

2195
01:32:23,280 --> 01:32:24,639
session

2196
01:32:24,639 --> 01:32:27,760
so it's going to be 1600 to 1800 utc

2197
01:32:27,760 --> 01:32:33,040
that's uh morning west coast us

2198
01:32:33,040 --> 01:32:36,480
um and in the meantime follow up on a

2199
01:32:36,480 --> 01:32:37,600
mailing list

2200
01:32:37,600 --> 01:32:39,440
with you know if there's any interest in

2201
01:32:39,440 --> 01:32:42,799
in these drafts that um

2202
01:32:43,360 --> 01:32:45,360
you know have a chance of you know

2203
01:32:45,360 --> 01:32:48,400
either finding other working groups

2204
01:32:48,400 --> 01:32:50,560
to continue their work or or be adopted

2205
01:32:50,560 --> 01:32:51,520
here but

2206
01:32:51,520 --> 01:32:53,440
we need to see some active interest in

2207
01:32:53,440 --> 01:32:56,159
the working group to pick any of them up

2208
01:32:56,159 --> 01:33:00,239
alexandra do you want to say something

2209
01:33:00,400 --> 01:33:04,080
um yeah i'm this is related to the polls

2210
01:33:04,080 --> 01:33:05,840
that have been run

2211
01:33:05,840 --> 01:33:07,760
and meet echo i see there are two polls

2212
01:33:07,760 --> 01:33:09,600
but i don't know what are the questions

2213
01:33:09,600 --> 01:33:12,960
i see the results in the polls but

2214
01:33:12,960 --> 01:33:16,000
yeah i didn't

2215
01:33:16,000 --> 01:33:19,520
um yeah i forgot to put a draft in the

2216
01:33:19,520 --> 01:33:21,360
in the poll the first poll was just a

2217
01:33:21,360 --> 01:33:23,280
test and the second one was for the

2218
01:33:23,280 --> 01:33:25,199
first draft we had today i didn't run

2219
01:33:25,199 --> 01:33:26,560
the polls for the

2220
01:33:26,560 --> 01:33:28,960
for the other drafts um so we'll have to

2221
01:33:28,960 --> 01:33:30,480
take that to the mailing list if there

2222
01:33:30,480 --> 01:33:31,199
is interest

2223
01:33:31,199 --> 01:33:34,239
to to continue work or in this working

2224
01:33:34,239 --> 01:33:34,719
group

2225
01:33:34,719 --> 01:33:37,760
or in other places

2226
01:33:37,760 --> 01:33:40,880
okay okay

2227
01:33:46,159 --> 01:33:48,880
well good um unless there's some other

2228
01:33:48,880 --> 01:33:53,120
topics i think we are done for today

2229
01:33:54,639 --> 01:33:56,639
so we'll give you a little more time for

2230
01:33:56,639 --> 01:33:59,120
your day

2231
01:33:59,199 --> 01:34:05,839
and see you at the next session

2232
01:34:58,840 --> 01:35:01,840
hey

2233
01:35:26,840 --> 01:35:29,840
this

