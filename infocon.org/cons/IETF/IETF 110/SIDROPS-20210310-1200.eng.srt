1
00:00:14,719 --> 00:00:17,919
i care

2
00:00:30,800 --> 00:00:33,359
thank you

3
00:00:36,480 --> 00:00:45,839
you're honorable thank you

4
00:01:18,000 --> 00:01:20,799
okay i think we have a not totally

5
00:01:20,799 --> 00:01:22,240
packed agenda so we should probably get

6
00:01:22,240 --> 00:01:24,840
started close to time which is

7
00:01:24,840 --> 00:01:28,080
now uh i'm

8
00:01:28,080 --> 00:01:31,600
chris cayer and natalie are also on

9
00:01:31,600 --> 00:01:34,560
and we have 34 other apparently oh yeah

10
00:01:34,560 --> 00:01:37,040
34 other people

11
00:01:37,040 --> 00:01:40,400
on the meeting so

12
00:01:40,400 --> 00:01:43,840
we'll have to select a notes taker

13
00:01:43,840 --> 00:01:45,280
the greater somebody could chime in in

14
00:01:45,280 --> 00:01:48,560
the chat perhaps i think i can put the

15
00:01:48,560 --> 00:01:54,079
link in here too

16
00:01:54,079 --> 00:01:57,280
the code i code imd i never get the word

17
00:01:57,280 --> 00:01:58,240
right

18
00:01:58,240 --> 00:02:09,840
to the notes

19
00:02:15,120 --> 00:02:18,959
so then the link to the notes is in

20
00:02:18,959 --> 00:02:21,599
in the chat be good if somebody could

21
00:02:21,599 --> 00:02:37,839
volunteer to do some note-taking

22
00:02:40,319 --> 00:02:42,000
someone has to sign up to take notes so

23
00:02:42,000 --> 00:02:44,640
we can't go

24
00:02:46,080 --> 00:02:51,840
oh maybe somebody did

25
00:02:52,879 --> 00:02:54,160
natalie says but she's going to need

26
00:02:54,160 --> 00:03:05,840
some help keeping track

27
00:03:06,319 --> 00:03:08,640
okay

28
00:03:10,239 --> 00:03:12,400
moving forward this is the siderops

29
00:03:12,400 --> 00:03:13,519
meeting at

30
00:03:13,519 --> 00:03:17,519
virtual itf 110 supposedly in prague

31
00:03:17,519 --> 00:03:20,640
i'm missing the indian food ah

32
00:03:20,640 --> 00:03:21,920
george says he's also going to help out

33
00:03:21,920 --> 00:03:25,119
with the notes thank you george

34
00:03:27,920 --> 00:03:31,200
whoops wrong window

35
00:03:31,519 --> 00:03:33,920
here's a note well hopefully uh the

36
00:03:33,920 --> 00:03:35,840
chair slides did just barely make it

37
00:03:35,840 --> 00:03:37,200
under the buzzer

38
00:03:37,200 --> 00:03:40,159
so if you want to follow along um

39
00:03:40,159 --> 00:03:40,959
yourself

40
00:03:40,959 --> 00:03:43,120
or on slide two you can download the

41
00:03:43,120 --> 00:03:46,159
slides from the meeting materials page

42
00:03:46,159 --> 00:03:48,959
which i think i can't actually get to

43
00:03:48,959 --> 00:03:50,959
right now anyway

44
00:03:50,959 --> 00:03:52,159
everyone's read this i'm sure if you

45
00:03:52,159 --> 00:03:53,360
haven't please take time to read it

46
00:03:53,360 --> 00:03:55,760
after the meeting is over

47
00:03:55,760 --> 00:03:59,120
we have an agenda we have seven

48
00:03:59,120 --> 00:04:03,040
presentations six presentations

49
00:04:03,040 --> 00:04:06,400
it's early morning and i can't count uh

50
00:04:06,400 --> 00:04:08,400
do we need to add anything to the agenda

51
00:04:08,400 --> 00:04:09,920
other than these

52
00:04:09,920 --> 00:04:15,839
six items

53
00:04:18,880 --> 00:04:23,199
i think we're good chris okay

54
00:04:23,199 --> 00:04:26,160
terrific then i think the first person

55
00:04:26,160 --> 00:04:26,880
to go is

56
00:04:26,880 --> 00:04:30,160
ben i believe

57
00:04:30,160 --> 00:04:33,840
i have ben's slides

58
00:04:35,759 --> 00:04:38,000
i'll do my own if it's all the same to

59
00:04:38,000 --> 00:04:38,960
you oh

60
00:04:38,960 --> 00:04:42,160
perfect even better let me stop sharing

61
00:04:42,160 --> 00:04:44,400
mine

62
00:04:45,360 --> 00:04:46,880
i always prefer when someone does their

63
00:04:46,880 --> 00:04:50,000
own all right

64
00:04:50,000 --> 00:04:52,080
yeah there's something very awkward

65
00:04:52,080 --> 00:04:53,520
about having to say next slide every

66
00:04:53,520 --> 00:04:55,440
couple seconds

67
00:04:55,440 --> 00:04:59,280
okay um i'm ben madison

68
00:04:59,280 --> 00:05:02,320
from work online communications and this

69
00:05:02,320 --> 00:05:02,800
is an

70
00:05:02,800 --> 00:05:07,039
update on the rpg rpki max length

71
00:05:07,039 --> 00:05:08,880
document um which has been around for

72
00:05:08,880 --> 00:05:10,800
quite a while but hasn't been spoken

73
00:05:10,800 --> 00:05:11,440
about

74
00:05:11,440 --> 00:05:13,440
at one of our meetings for a little

75
00:05:13,440 --> 00:05:14,800
while um

76
00:05:14,800 --> 00:05:17,840
these are my co-authors um

77
00:05:17,840 --> 00:05:19,680
a quick recap of what it's about if you

78
00:05:19,680 --> 00:05:20,800
haven't read it for a while or you

79
00:05:20,800 --> 00:05:22,240
haven't read it at all

80
00:05:22,240 --> 00:05:25,039
um it's a fairly short document it's

81
00:05:25,039 --> 00:05:25,840
targeted

82
00:05:25,840 --> 00:05:29,360
at bcp status and

83
00:05:29,360 --> 00:05:32,639
it describes a um

84
00:05:32,639 --> 00:05:35,759
a hijack attack type that

85
00:05:35,759 --> 00:05:38,880
is made easier by the presence of a

86
00:05:38,880 --> 00:05:41,120
rower that authorizes

87
00:05:41,120 --> 00:05:45,280
a prefix to exist in the

88
00:05:45,280 --> 00:05:48,560
in the routing table that is

89
00:05:48,560 --> 00:05:51,120
longer than that which is ordinarily

90
00:05:51,120 --> 00:05:53,300
announced in bgp

91
00:05:53,300 --> 00:05:55,840
[Music]

92
00:05:55,840 --> 00:05:59,360
it's been observed by a few people that

93
00:05:59,360 --> 00:06:02,560
the presence of the max length attribute

94
00:06:02,560 --> 00:06:07,039
in the rower very often gives rise to

95
00:06:07,039 --> 00:06:09,039
what we call in the draft non-minimal

96
00:06:09,039 --> 00:06:11,360
rowers which make this type of attack

97
00:06:11,360 --> 00:06:13,520
more easy

98
00:06:13,520 --> 00:06:16,880
because a rower that is issued for a

99
00:06:16,880 --> 00:06:19,199
maximum length which is the same as that

100
00:06:19,199 --> 00:06:20,319
which exists in

101
00:06:20,319 --> 00:06:24,080
bgp um a hijack will always be

102
00:06:24,080 --> 00:06:27,919
fighting um fighting for best parts

103
00:06:27,919 --> 00:06:30,000
because of its longer as path length

104
00:06:30,000 --> 00:06:33,199
um whereas a more specific hijack

105
00:06:33,199 --> 00:06:36,080
doesn't suffer from that so if it can be

106
00:06:36,080 --> 00:06:36,639
if it's

107
00:06:36,639 --> 00:06:39,199
uh authorized by the same rower then

108
00:06:39,199 --> 00:06:39,759
that

109
00:06:39,759 --> 00:06:41,440
that attack type becomes a hell of a lot

110
00:06:41,440 --> 00:06:43,039
easier um

111
00:06:43,039 --> 00:06:44,400
and there's a simple recommendation

112
00:06:44,400 --> 00:06:46,000
contained in the draft which is that you

113
00:06:46,000 --> 00:06:48,080
shouldn't do that

114
00:06:48,080 --> 00:06:51,680
and more specifically you shouldn't use

115
00:06:51,680 --> 00:06:53,680
the max length attribute unless you

116
00:06:53,680 --> 00:06:55,360
thought carefully about this attack

117
00:06:55,360 --> 00:06:57,759
vector

118
00:06:57,759 --> 00:06:59,759
most of the changes that have taken

119
00:06:59,759 --> 00:07:01,440
place to the document recently

120
00:07:01,440 --> 00:07:04,720
are editorial in nature

121
00:07:04,720 --> 00:07:07,759
the longest section section three is an

122
00:07:07,759 --> 00:07:08,720
example

123
00:07:08,720 --> 00:07:11,840
of the type of hijack that this attack

124
00:07:11,840 --> 00:07:14,479
envisages

125
00:07:15,120 --> 00:07:17,199
the content hasn't really changed much

126
00:07:17,199 --> 00:07:19,120
but it has been edited for

127
00:07:19,120 --> 00:07:21,759
readability to help make the example a

128
00:07:21,759 --> 00:07:23,280
little easier to follow

129
00:07:23,280 --> 00:07:26,479
um it now describes the type of um

130
00:07:26,479 --> 00:07:29,520
attack that we're we're discussing

131
00:07:29,520 --> 00:07:32,479
um and how that's made easier by the

132
00:07:32,479 --> 00:07:33,759
presence of what we term

133
00:07:33,759 --> 00:07:36,960
a loose rower that is a rower that has

134
00:07:36,960 --> 00:07:39,280
a max length attributes is longer than

135
00:07:39,280 --> 00:07:41,840
the the ordinary pgp announcement

136
00:07:41,840 --> 00:07:45,039
um why the um

137
00:07:45,039 --> 00:07:47,280
what a strict rower looks like in the

138
00:07:47,280 --> 00:07:48,080
context of

139
00:07:48,080 --> 00:07:51,280
of that example why the strict rower

140
00:07:51,280 --> 00:07:53,039
mitigates the attack

141
00:07:53,039 --> 00:07:56,319
and why the um why that

142
00:07:56,319 --> 00:07:58,639
it's possible to still launch a similar

143
00:07:58,639 --> 00:08:00,639
attack but it's substantially less

144
00:08:00,639 --> 00:08:02,240
likely to be effective

145
00:08:02,240 --> 00:08:04,080
in that it's less likely to attract any

146
00:08:04,080 --> 00:08:05,360
actual traffic

147
00:08:05,360 --> 00:08:09,120
um if the rower max length matches the

148
00:08:09,120 --> 00:08:09,440
uh

149
00:08:09,440 --> 00:08:12,720
the bgp announcement

150
00:08:12,720 --> 00:08:14,879
um there's a measurement section which

151
00:08:14,879 --> 00:08:15,919
describes

152
00:08:15,919 --> 00:08:18,240
some measurements that were taken a

153
00:08:18,240 --> 00:08:19,440
while back

154
00:08:19,440 --> 00:08:23,759
um that observes that this kind of

155
00:08:23,759 --> 00:08:26,879
vulnerability is very prevalent

156
00:08:26,879 --> 00:08:30,879
um in currently issued rowers

157
00:08:30,879 --> 00:08:34,080
that have the the max length attribute

158
00:08:34,080 --> 00:08:36,320
um that's been revised to make it a

159
00:08:36,320 --> 00:08:37,760
little bit longer but hopefully a little

160
00:08:37,760 --> 00:08:39,039
bit clearer

161
00:08:39,039 --> 00:08:41,760
because the first few times i read it i

162
00:08:41,760 --> 00:08:43,200
found myself going back to the beginning

163
00:08:43,200 --> 00:08:46,000
of the sentence over and over again

164
00:08:46,000 --> 00:08:49,200
there is a question that i have for the

165
00:08:49,200 --> 00:08:50,000
working group

166
00:08:50,000 --> 00:08:52,480
which is that the measurements in the

167
00:08:52,480 --> 00:08:55,040
draft are from 2017.

168
00:08:55,040 --> 00:08:58,959
um i would like to know if anyone

169
00:08:58,959 --> 00:09:01,760
is aware of any similar studies that

170
00:09:01,760 --> 00:09:03,279
have been taken that have taken place

171
00:09:03,279 --> 00:09:04,640
more recently and if

172
00:09:04,640 --> 00:09:06,560
so whether we should incorporate that

173
00:09:06,560 --> 00:09:08,320
into the um

174
00:09:08,320 --> 00:09:12,000
into the references or failing that if

175
00:09:12,000 --> 00:09:15,360
anyone has any reason to believe that

176
00:09:15,360 --> 00:09:18,560
the numbers that are discussed have

177
00:09:18,560 --> 00:09:21,200
changed significantly um from my own

178
00:09:21,200 --> 00:09:23,760
observations i don't believe that they

179
00:09:23,760 --> 00:09:26,800
they have but um my

180
00:09:26,800 --> 00:09:30,080
observations are um you know

181
00:09:30,080 --> 00:09:32,720
just that they are things that i've seen

182
00:09:32,720 --> 00:09:34,399
in the operational side of things that

183
00:09:34,399 --> 00:09:36,000
certainly wouldn't qualify as an

184
00:09:36,000 --> 00:09:38,000
academic study

185
00:09:38,000 --> 00:09:42,480
um in section five

186
00:09:42,480 --> 00:09:45,440
the the background to this draft this

187
00:09:45,440 --> 00:09:47,360
came about because of a study

188
00:09:47,360 --> 00:09:50,399
done by a couple of my co-authors where

189
00:09:50,399 --> 00:09:51,920
they observed this phenomenon in the

190
00:09:51,920 --> 00:09:53,040
wild

191
00:09:53,040 --> 00:09:55,200
and they that research was centered

192
00:09:55,200 --> 00:09:56,480
explicitly around

193
00:09:56,480 --> 00:09:58,640
the the use of of max length in the

194
00:09:58,640 --> 00:09:59,519
rower

195
00:09:59,519 --> 00:10:01,839
um which is how this this draft got its

196
00:10:01,839 --> 00:10:02,880
name

197
00:10:02,880 --> 00:10:06,079
but the intention of the draft is not to

198
00:10:06,079 --> 00:10:07,040
say that

199
00:10:07,040 --> 00:10:10,240
the max length attribute is is bad

200
00:10:10,240 --> 00:10:12,640
in and of itself or that it presents a

201
00:10:12,640 --> 00:10:15,760
vulnerability in and of itself

202
00:10:15,760 --> 00:10:18,000
what we're trying to describe is how to

203
00:10:18,000 --> 00:10:19,760
minimize the attack surface that's

204
00:10:19,760 --> 00:10:21,040
available for this type of

205
00:10:21,040 --> 00:10:25,279
uh of sub-prefix attack um and so it's

206
00:10:25,279 --> 00:10:28,720
that section has been reworded to say

207
00:10:28,720 --> 00:10:30,959
don't create or at least try not to

208
00:10:30,959 --> 00:10:32,000
create if you possibly

209
00:10:32,000 --> 00:10:35,440
can avoid it non-minimal rowers

210
00:10:35,440 --> 00:10:38,079
when you're creating rowers think

211
00:10:38,079 --> 00:10:40,320
carefully about the use of max length so

212
00:10:40,320 --> 00:10:41,760
that it doesn't result in

213
00:10:41,760 --> 00:10:45,519
non-minimal rowers and we've tried to

214
00:10:45,519 --> 00:10:47,040
clarify

215
00:10:47,040 --> 00:10:50,800
the fact that this creates a bit of a

216
00:10:50,800 --> 00:10:52,480
tension

217
00:10:52,480 --> 00:10:55,200
where there's an operational requirement

218
00:10:55,200 --> 00:10:57,680
to be able to de-aggregate fast

219
00:10:57,680 --> 00:11:00,640
um the obvious example is in the face of

220
00:11:00,640 --> 00:11:01,360
a

221
00:11:01,360 --> 00:11:04,480
ddos attack um where in order to

222
00:11:04,480 --> 00:11:07,680
um start mitigation one needs to

223
00:11:07,680 --> 00:11:08,720
de-aggregate

224
00:11:08,720 --> 00:11:12,079
and and get longer prefixes announced

225
00:11:12,079 --> 00:11:15,680
um so we're

226
00:11:15,680 --> 00:11:17,760
but we've we've clarified that there are

227
00:11:17,760 --> 00:11:19,519
other examples where you need that sort

228
00:11:19,519 --> 00:11:21,920
of an operational response and

229
00:11:21,920 --> 00:11:25,839
that not having a

230
00:11:25,839 --> 00:11:29,040
loose rower in the system already given

231
00:11:29,040 --> 00:11:29,519
that

232
00:11:29,519 --> 00:11:32,720
rpki data does not reflect in all

233
00:11:32,720 --> 00:11:34,320
corners of the world simultaneously

234
00:11:34,320 --> 00:11:36,480
after you create a new object

235
00:11:36,480 --> 00:11:38,399
there's a tension there and we call out

236
00:11:38,399 --> 00:11:40,320
some possible

237
00:11:40,320 --> 00:11:42,560
solutions to that all of which are

238
00:11:42,560 --> 00:11:44,160
pretty bad to be honest

239
00:11:44,160 --> 00:11:46,800
um none of none of them are ideal and

240
00:11:46,800 --> 00:11:48,079
they they require

241
00:11:48,079 --> 00:11:51,200
um kind of educated trade-offs to be

242
00:11:51,200 --> 00:11:52,560
made by the operator

243
00:11:52,560 --> 00:11:54,480
um but those are enumerated hopefully

244
00:11:54,480 --> 00:11:56,720
fairly systematically

245
00:11:56,720 --> 00:11:58,160
and i think i'd just like to call to the

246
00:11:58,160 --> 00:11:59,600
attention of the working group that this

247
00:11:59,600 --> 00:12:00,320
is a gap

248
00:12:00,320 --> 00:12:04,399
that we have at the moment um and

249
00:12:04,399 --> 00:12:06,560
we should probably think about potential

250
00:12:06,560 --> 00:12:08,000
solutions to it but

251
00:12:08,000 --> 00:12:09,839
this draft is not the place to document

252
00:12:09,839 --> 00:12:11,600
that

253
00:12:11,600 --> 00:12:13,920
uh

254
00:12:14,639 --> 00:12:16,639
i see alexander's in the queue i can

255
00:12:16,639 --> 00:12:18,000
take questions now if

256
00:12:18,000 --> 00:12:21,120
if if you prefer

257
00:12:23,120 --> 00:12:26,320
it's gone okay and the final section

258
00:12:26,320 --> 00:12:27,680
where there's been changes and these are

259
00:12:27,680 --> 00:12:29,360
probably the most substantial changes

260
00:12:29,360 --> 00:12:33,040
is in the the rtbh signaling section

261
00:12:33,040 --> 00:12:35,600
um it's my personal opinion the previous

262
00:12:35,600 --> 00:12:36,959
versions of the draft

263
00:12:36,959 --> 00:12:40,959
overstepped the mandate of a bcp

264
00:12:40,959 --> 00:12:44,160
document pretty spectacularly

265
00:12:44,160 --> 00:12:48,000
the old versions essentially recommended

266
00:12:48,000 --> 00:12:48,240
a

267
00:12:48,240 --> 00:12:51,440
new validation procedure which was not

268
00:12:51,440 --> 00:12:54,240
the validation procedure in 6811

269
00:12:54,240 --> 00:12:56,800
and as far as i'm aware i've never come

270
00:12:56,800 --> 00:12:59,040
across a bgp speaker implementation on

271
00:12:59,040 --> 00:13:00,480
which they could actually have been

272
00:13:00,480 --> 00:13:01,760
deployed

273
00:13:01,760 --> 00:13:05,920
um so that text has been removed

274
00:13:05,920 --> 00:13:07,600
it's not to say that the recommendation

275
00:13:07,600 --> 00:13:09,040
was necessarily wrong

276
00:13:09,040 --> 00:13:11,440
but it certainly didn't belong in a bcp

277
00:13:11,440 --> 00:13:12,800
draft

278
00:13:12,800 --> 00:13:17,120
the revised text simply

279
00:13:17,120 --> 00:13:18,880
calls out what is hopefully obvious to

280
00:13:18,880 --> 00:13:21,440
everyone which is that rtbh signaling

281
00:13:21,440 --> 00:13:24,320
and origin validation are not happy

282
00:13:24,320 --> 00:13:25,519
bedfellows

283
00:13:25,519 --> 00:13:29,279
today it specifically says that a

284
00:13:29,279 --> 00:13:31,680
solution to that fundamental problem

285
00:13:31,680 --> 00:13:33,920
is out of scope and it pumps it down the

286
00:13:33,920 --> 00:13:34,720
road

287
00:13:34,720 --> 00:13:37,519
and the only recommendation in this area

288
00:13:37,519 --> 00:13:39,279
that it explicitly makes

289
00:13:39,279 --> 00:13:42,959
is that making use of an rtbh signaling

290
00:13:42,959 --> 00:13:43,680
mechanism

291
00:13:43,680 --> 00:13:46,240
or making such a signaling mechanism

292
00:13:46,240 --> 00:13:49,199
available to your customers or peers

293
00:13:49,199 --> 00:13:52,240
is not a good enough reason to

294
00:13:52,240 --> 00:13:55,600
either create or require the creation of

295
00:13:55,600 --> 00:13:57,120
non-minimal rowers

296
00:13:57,120 --> 00:13:59,839
um and so that's hopefully that

297
00:13:59,839 --> 00:14:01,360
hopefully fixes the

298
00:14:01,360 --> 00:14:03,839
the the most fundamental problem that uh

299
00:14:03,839 --> 00:14:05,519
that existed in the previous version of

300
00:14:05,519 --> 00:14:08,000
the draft

301
00:14:08,000 --> 00:14:11,120
um as a result i think

302
00:14:11,120 --> 00:14:13,440
the authors are all on the same page in

303
00:14:13,440 --> 00:14:15,199
terms of believing that this is now

304
00:14:15,199 --> 00:14:17,839
pretty much a finished um finished piece

305
00:14:17,839 --> 00:14:18,880
of work

306
00:14:18,880 --> 00:14:23,760
um i'm happy to take questions and and

307
00:14:23,760 --> 00:14:25,440
respond to comments and you know if

308
00:14:25,440 --> 00:14:26,880
there are other changes that

309
00:14:26,880 --> 00:14:28,480
people think are necessary then we can

310
00:14:28,480 --> 00:14:30,320
we can look at incorporating them

311
00:14:30,320 --> 00:14:33,360
but failing any of that i think

312
00:14:33,360 --> 00:14:36,160
we're ready for the chairs to start a

313
00:14:36,160 --> 00:14:39,680
last call if they would be so kind

314
00:14:43,760 --> 00:14:46,160
that's all

315
00:14:46,959 --> 00:14:50,000
i think maybe alex

316
00:14:51,279 --> 00:14:55,920
sorry i was my name is

317
00:14:56,240 --> 00:14:59,279
ben thank you for the slides and

318
00:14:59,279 --> 00:15:02,240
i have a question as you may remember i

319
00:15:02,240 --> 00:15:04,880
have a different view on this drop

320
00:15:04,880 --> 00:15:08,480
very different but my question is

321
00:15:08,480 --> 00:15:11,920
by these changes what kind of high just

322
00:15:11,920 --> 00:15:14,560
hijacked you are trying to address are

323
00:15:14,560 --> 00:15:16,160
you trying to address

324
00:15:16,160 --> 00:15:18,880
malicious activity or still you are

325
00:15:18,880 --> 00:15:19,920
trying to address

326
00:15:19,920 --> 00:15:22,240
mistakes that are mostly happening in

327
00:15:22,240 --> 00:15:26,959
the milk

328
00:15:26,959 --> 00:15:30,639
um so alex i i was struggling to hear

329
00:15:30,639 --> 00:15:31,920
you a little bit but but i think your

330
00:15:31,920 --> 00:15:32,959
question is

331
00:15:32,959 --> 00:15:36,480
what type of um hijack

332
00:15:36,480 --> 00:15:39,519
attack vector this is this is aiming to

333
00:15:39,519 --> 00:15:43,279
to solve right yes correct

334
00:15:43,279 --> 00:15:45,839
so the the specific attack vector is

335
00:15:45,839 --> 00:15:47,120
where you have

336
00:15:47,120 --> 00:15:50,160
a um a rower issued

337
00:15:50,160 --> 00:15:55,360
covering length up to say a 24 for ipv4

338
00:15:55,360 --> 00:15:58,160
and but you know the the ordinary course

339
00:15:58,160 --> 00:15:59,199
of operations

340
00:15:59,199 --> 00:16:01,360
all that all that's announced in bgp is

341
00:16:01,360 --> 00:16:02,639
some aggregate that's

342
00:16:02,639 --> 00:16:06,000
that's shorter than a 24. um and

343
00:16:06,000 --> 00:16:08,240
the the attack vector that we discussed

344
00:16:08,240 --> 00:16:10,079
is that

345
00:16:10,079 --> 00:16:13,279
that makes it fairly trivially easy

346
00:16:13,279 --> 00:16:17,839
for a um a fault a hijacker to

347
00:16:17,839 --> 00:16:22,079
spoof the the as path

348
00:16:22,079 --> 00:16:25,360
um announce that upstream to their

349
00:16:25,360 --> 00:16:28,240
their peers or transits and become best

350
00:16:28,240 --> 00:16:30,240
path for that prefix

351
00:16:30,240 --> 00:16:33,680
because they are the only

352
00:16:33,680 --> 00:16:36,000
longest match for anything that exists

353
00:16:36,000 --> 00:16:37,279
in the routing table

354
00:16:37,279 --> 00:16:40,399
um and that's not that's made possible

355
00:16:40,399 --> 00:16:41,199
by the fact

356
00:16:41,199 --> 00:16:44,720
that the um the longer prefix is

357
00:16:44,720 --> 00:16:47,120
authorized for origination even though

358
00:16:47,120 --> 00:16:47,759
it's not

359
00:16:47,759 --> 00:16:50,639
ordinarily originated does that make

360
00:16:50,639 --> 00:16:51,759
sense

361
00:16:51,759 --> 00:16:53,759
uh you are speaking about intentional

362
00:16:53,759 --> 00:16:55,759
hijacks not a mystery yes but

363
00:16:55,759 --> 00:16:59,199
intentional activity and

364
00:16:59,199 --> 00:17:02,639
in this case sorry

365
00:17:02,639 --> 00:17:05,760
sorry so i i think it

366
00:17:05,760 --> 00:17:07,599
i think it's mostly about intentional

367
00:17:07,599 --> 00:17:09,280
hijacks because

368
00:17:09,280 --> 00:17:12,959
making a mistake of this kind would be

369
00:17:12,959 --> 00:17:17,039
pretty hard to do using most

370
00:17:17,039 --> 00:17:19,520
router implementations but it would you

371
00:17:19,520 --> 00:17:20,240
know

372
00:17:20,240 --> 00:17:21,760
if someone managed to make this

373
00:17:21,760 --> 00:17:23,280
particular type of mistake it would

374
00:17:23,280 --> 00:17:24,640
protect against this

375
00:17:24,640 --> 00:17:27,520
against that as well uh i do agree that

376
00:17:27,520 --> 00:17:28,640
uh

377
00:17:28,640 --> 00:17:31,280
this kind of solution can be uh can be

378
00:17:31,280 --> 00:17:32,880
helpful only in case of intentional

379
00:17:32,880 --> 00:17:33,679
hijacks

380
00:17:33,679 --> 00:17:37,679
but imagine that there are two islands

381
00:17:37,679 --> 00:17:40,720
one good island where

382
00:17:40,720 --> 00:17:43,919
there are uh isps assigning rows where

383
00:17:43,919 --> 00:17:46,960
uh uh origin validation is happening

384
00:17:46,960 --> 00:17:50,640
and bad island there is no rules no

385
00:17:50,640 --> 00:17:51,760
verification

386
00:17:51,760 --> 00:17:54,240
plus there are some hijackers living

387
00:17:54,240 --> 00:17:55,760
there

388
00:17:55,760 --> 00:17:59,120
and in your scenario if

389
00:17:59,120 --> 00:18:01,679
such hijack intentional hijack is

390
00:18:01,679 --> 00:18:02,480
happening

391
00:18:02,480 --> 00:18:04,320
in the bad island and of course there is

392
00:18:04,320 --> 00:18:05,600
some place in between

393
00:18:05,600 --> 00:18:08,399
of these islands

394
00:18:08,720 --> 00:18:12,080
there will be a more specific prefix

395
00:18:12,080 --> 00:18:16,240
uh which which will be gone to

396
00:18:16,640 --> 00:18:19,440
spread from this island to other places

397
00:18:19,440 --> 00:18:20,480
and so on

398
00:18:20,480 --> 00:18:22,960
what you are suggesting that your good

399
00:18:22,960 --> 00:18:24,400
island will be

400
00:18:24,400 --> 00:18:28,160
protected against this activity

401
00:18:28,160 --> 00:18:32,080
but all space between these islands

402
00:18:32,080 --> 00:18:34,160
will have a high chance to use the most

403
00:18:34,160 --> 00:18:35,760
specific prefix

404
00:18:35,760 --> 00:18:39,600
and and in response to this hijack

405
00:18:39,600 --> 00:18:42,720
the victim will not be able to

406
00:18:42,720 --> 00:18:47,919
advertise its own more specific because

407
00:18:48,559 --> 00:18:51,840
the role will not be permitted

408
00:18:51,840 --> 00:18:56,240
so in case of partial adoption of uh

409
00:18:56,240 --> 00:18:59,760
router region validation i believe uh

410
00:18:59,760 --> 00:19:03,200
this kind of strengthen

411
00:19:03,200 --> 00:19:06,240
uh ros or not strengthening but as a

412
00:19:06,240 --> 00:19:07,600
recommendation

413
00:19:07,600 --> 00:19:10,799
do not use max length as it's used today

414
00:19:10,799 --> 00:19:13,520
will results can result even in both

415
00:19:13,520 --> 00:19:14,320
problems

416
00:19:14,320 --> 00:19:17,840
when your outer space will be hijacked

417
00:19:17,840 --> 00:19:21,520
and you will have nothing in in response

418
00:19:21,520 --> 00:19:26,160
at the moment that's my comment

419
00:19:28,400 --> 00:19:30,480
so okay so if i'm understanding you

420
00:19:30,480 --> 00:19:32,000
correctly you're saying

421
00:19:32,000 --> 00:19:35,120
that by issuing

422
00:19:35,120 --> 00:19:38,559
only a strict rower

423
00:19:38,559 --> 00:19:42,240
you're limiting your ability to respond

424
00:19:42,240 --> 00:19:46,000
to a sub prefix hijack

425
00:19:46,000 --> 00:19:48,799
because you won't be able to you you

426
00:19:48,799 --> 00:19:49,360
won't be

427
00:19:49,360 --> 00:19:51,200
you won't you'll you'll essentially lose

428
00:19:51,200 --> 00:19:53,360
the ability to propagate

429
00:19:53,360 --> 00:19:55,840
any de-aggregation that you do past your

430
00:19:55,840 --> 00:19:56,720
immediate

431
00:19:56,720 --> 00:19:58,799
kind of your immediate neighborhood to

432
00:19:58,799 --> 00:20:01,840
get to the bad island

433
00:20:03,039 --> 00:20:06,159
and if you're for example applying even

434
00:20:06,159 --> 00:20:09,280
egress uh routable original

435
00:20:09,280 --> 00:20:12,320
uh validation on your own router

436
00:20:12,320 --> 00:20:14,880
then you will not able to pass it even

437
00:20:14,880 --> 00:20:15,360
from

438
00:20:15,360 --> 00:20:18,480
uh your own isp of course you can

439
00:20:18,480 --> 00:20:21,840
remove it but anyway

440
00:20:23,919 --> 00:20:27,200
yes that's probably a valid criticism um

441
00:20:27,200 --> 00:20:30,480
i think that it is a pretty unlikely

442
00:20:30,480 --> 00:20:31,679
scenario

443
00:20:31,679 --> 00:20:34,720
um because

444
00:20:34,720 --> 00:20:38,480
of where um origin validation

445
00:20:38,480 --> 00:20:41,840
is happening in the wild today um it is

446
00:20:41,840 --> 00:20:43,280
not the case that there

447
00:20:43,280 --> 00:20:47,520
are kind of readily distinguishable

448
00:20:47,520 --> 00:20:49,919
islands in the internet topology where

449
00:20:49,919 --> 00:20:51,280
origin validation

450
00:20:51,280 --> 00:20:53,760
is happening and where origin validation

451
00:20:53,760 --> 00:20:54,960
isn't happening

452
00:20:54,960 --> 00:20:58,400
um it's increasingly the case

453
00:20:58,400 --> 00:21:01,600
that the the large transit networks in

454
00:21:01,600 --> 00:21:03,600
the kind of topological center of the

455
00:21:03,600 --> 00:21:05,120
internet

456
00:21:05,120 --> 00:21:09,200
are doing origin validation and so

457
00:21:09,200 --> 00:21:12,480
i think that there is

458
00:21:12,480 --> 00:21:15,600
i i i think that we are better off

459
00:21:15,600 --> 00:21:17,120
optimizing

460
00:21:17,120 --> 00:21:20,720
for the case that

461
00:21:20,720 --> 00:21:22,240
we're better off optimizing the

462
00:21:22,240 --> 00:21:24,400
protection that the existence

463
00:21:24,400 --> 00:21:28,159
of validating parties creates

464
00:21:28,159 --> 00:21:31,280
rather than optimizing for the case

465
00:21:31,280 --> 00:21:34,720
where you need to propagate a defensive

466
00:21:34,720 --> 00:21:37,919
de-aggregation into a non-validating

467
00:21:37,919 --> 00:21:38,640
network

468
00:21:38,640 --> 00:21:41,679
i hope that makes sense

469
00:21:43,679 --> 00:21:46,960
i think yes mostly but i would

470
00:21:46,960 --> 00:21:49,520
i think it will be great to make this

471
00:21:49,520 --> 00:21:51,600
security consideration all society in

472
00:21:51,600 --> 00:21:52,720
the document

473
00:21:52,720 --> 00:21:56,840
that you may have some problems because

474
00:21:56,840 --> 00:21:59,840
of

475
00:22:04,240 --> 00:22:06,159
alexander i can't hear you anymore i'm

476
00:22:06,159 --> 00:22:08,000
not sure if anyone else can

477
00:22:08,000 --> 00:22:13,840
um can you hear me now

478
00:22:14,320 --> 00:22:17,679
great so my suggestion is to

479
00:22:17,679 --> 00:22:21,039
make uh this kind of scenario

480
00:22:21,039 --> 00:22:24,080
also cited in the document so that

481
00:22:24,080 --> 00:22:27,919
the implementers the network operators

482
00:22:27,919 --> 00:22:31,520
will will be aware that by issuing

483
00:22:31,520 --> 00:22:34,320
this kind of raw they're somehow

484
00:22:34,320 --> 00:22:35,280
limiting their

485
00:22:35,280 --> 00:22:41,200
response opportunities

486
00:22:41,200 --> 00:22:43,840
yeah um what would be really helpful is

487
00:22:43,840 --> 00:22:45,440
if you could send an email

488
00:22:45,440 --> 00:22:48,880
setting out the kind of um

489
00:22:48,880 --> 00:22:50,400
the the kind of problem that you

490
00:22:50,400 --> 00:22:51,760
envision so that we can make sure that

491
00:22:51,760 --> 00:22:52,720
we're on the same

492
00:22:52,720 --> 00:22:56,320
page and then we can look at how

493
00:22:56,320 --> 00:22:58,720
we go about incorporating that because i

494
00:22:58,720 --> 00:23:00,559
think that it's a valid point i just

495
00:23:00,559 --> 00:23:05,120
i struggle to see exactly how

496
00:23:05,120 --> 00:23:08,719
we articulate it

497
00:23:11,039 --> 00:23:13,520
okay okay let's try to find the solution

498
00:23:13,520 --> 00:23:14,320
together

499
00:23:14,320 --> 00:23:17,760
thanks thanks i think the next was uh

500
00:23:17,760 --> 00:23:18,720
rudiger

501
00:23:18,720 --> 00:23:20,240
and then sriram and then we got to skip

502
00:23:20,240 --> 00:23:22,240
to the next presentation

503
00:23:22,240 --> 00:23:25,520
okay i think you can hear me i when i

504
00:23:25,520 --> 00:23:26,280
talk

505
00:23:26,280 --> 00:23:29,280
unfortunately i lose the other direction

506
00:23:29,280 --> 00:23:37,440
of the audio unfortunately i haven't

507
00:23:37,440 --> 00:23:38,320
been

508
00:23:38,320 --> 00:23:42,240
reading the text for a long while

509
00:23:42,240 --> 00:23:46,640
what i wonder is uh

510
00:23:46,640 --> 00:23:49,679
do we tell and do we want to tell

511
00:23:49,679 --> 00:23:51,840
that

512
00:23:52,880 --> 00:23:57,360
issuing any roar

513
00:23:57,360 --> 00:24:01,760
for which we are not

514
00:24:02,400 --> 00:24:06,559
actually doing an valid announcement

515
00:24:06,559 --> 00:24:10,720
or intent to do it short time

516
00:24:10,720 --> 00:24:14,080
is sent can be viewed

517
00:24:14,080 --> 00:24:17,440
as an invitation to an attacker

518
00:24:17,440 --> 00:24:21,360
who can fake the af that's mentioned in

519
00:24:21,360 --> 00:24:23,039
varroa

520
00:24:23,039 --> 00:24:26,640
to take over

521
00:24:29,200 --> 00:24:33,840
the fact that the max length

522
00:24:33,840 --> 00:24:37,200
is a way of

523
00:24:37,200 --> 00:24:40,880
doing the most dangerous type

524
00:24:40,880 --> 00:24:43,200
of

525
00:24:44,640 --> 00:24:48,080
attack vector uh

526
00:24:48,080 --> 00:24:51,279
well okay kind of uh seems not

527
00:24:51,279 --> 00:24:54,880
really to be the most important thing

528
00:24:54,880 --> 00:24:58,320
uh so i switch off my

529
00:24:58,320 --> 00:25:01,039
mic and i will not hear you for a couple

530
00:25:01,039 --> 00:25:03,600
of seconds

531
00:25:07,760 --> 00:25:10,960
goodbye hopefully you can hear me now um

532
00:25:10,960 --> 00:25:13,039
chris have i got time to respond to that

533
00:25:13,039 --> 00:25:14,799
yes please

534
00:25:14,799 --> 00:25:17,279
um so that that point is pretty much

535
00:25:17,279 --> 00:25:18,960
exactly what i was driving at on

536
00:25:18,960 --> 00:25:21,039
on the slide that i've just gone back to

537
00:25:21,039 --> 00:25:22,960
um the previous wording

538
00:25:22,960 --> 00:25:25,440
seemed to suggest that max length in and

539
00:25:25,440 --> 00:25:28,000
of itself was the problem

540
00:25:28,000 --> 00:25:31,279
and we've clarified the recommendation

541
00:25:31,279 --> 00:25:34,000
section so that it's clear that the

542
00:25:34,000 --> 00:25:34,799
problem

543
00:25:34,799 --> 00:25:37,760
is whenever the problem exists whenever

544
00:25:37,760 --> 00:25:38,880
you have a rower

545
00:25:38,880 --> 00:25:42,400
in the rpki that covers a

546
00:25:42,400 --> 00:25:44,880
prefix that is not usually announced and

547
00:25:44,880 --> 00:25:46,000
in particular

548
00:25:46,000 --> 00:25:49,279
a a longer than usually announced prefix

549
00:25:49,279 --> 00:25:53,440
um and that the use of the max length

550
00:25:53,440 --> 00:25:56,240
attribute is just a very convenient

551
00:25:56,240 --> 00:25:57,200
shortcut

552
00:25:57,200 --> 00:25:58,799
for people to create those kind of

553
00:25:58,799 --> 00:26:00,960
problematic rows but yes i completely

554
00:26:00,960 --> 00:26:02,640
agree that the fundamental problem

555
00:26:02,640 --> 00:26:05,679
is the is is covering a prefix that's

556
00:26:05,679 --> 00:26:06,880
not usually announced

557
00:26:06,880 --> 00:26:09,440
and the you know the max length thing is

558
00:26:09,440 --> 00:26:11,440
just a a commonly observed symptom of

559
00:26:11,440 --> 00:26:14,000
that problem

560
00:26:16,240 --> 00:26:19,120
sriram um yeah i just want to make a

561
00:26:19,120 --> 00:26:21,279
quick quick observation which

562
00:26:21,279 --> 00:26:23,760
ben may have already mentioned but i

563
00:26:23,760 --> 00:26:24,799
want to emphasize

564
00:26:24,799 --> 00:26:28,320
in response to alexander's comment

565
00:26:28,320 --> 00:26:32,159
uh that even when a regular likes

566
00:26:32,159 --> 00:26:35,200
prefix is announced not i mean not

567
00:26:35,200 --> 00:26:38,400
hijacked and not necessarily

568
00:26:38,400 --> 00:26:41,600
maliciously uh the uh the

569
00:26:41,600 --> 00:26:44,159
owner of that prefix um which is

570
00:26:44,159 --> 00:26:45,120
hijacked

571
00:26:45,120 --> 00:26:47,919
uh somewhere in the network uh away from

572
00:26:47,919 --> 00:26:48,400
you

573
00:26:48,400 --> 00:26:50,960
uh that hijack will be dropped uh in the

574
00:26:50,960 --> 00:26:53,120
part of the internet where the

575
00:26:53,120 --> 00:26:55,679
roads are implemented and the rov

576
00:26:55,679 --> 00:26:57,360
validation is implemented

577
00:26:57,360 --> 00:27:00,000
so you are losing visibility even when

578
00:27:00,000 --> 00:27:00,799
it is a

579
00:27:00,799 --> 00:27:03,559
normal prefix that is hijacked even

580
00:27:03,559 --> 00:27:05,520
non-maliciously

581
00:27:05,520 --> 00:27:07,600
so the loss of visibility is there so

582
00:27:07,600 --> 00:27:10,480
when we discuss this further on the list

583
00:27:10,480 --> 00:27:12,640
i think i would like you to keep that in

584
00:27:12,640 --> 00:27:14,080
mind as well

585
00:27:14,080 --> 00:27:21,840
thank you

586
00:27:22,480 --> 00:27:25,520
okay thank you very much ben uh the next

587
00:27:25,520 --> 00:27:28,639
person should be tim

588
00:27:29,120 --> 00:27:34,559
whose presentation i will show i hope

589
00:27:34,559 --> 00:27:37,840
all right um i see lines moving on my

590
00:27:37,840 --> 00:27:38,960
screen so i guess

591
00:27:38,960 --> 00:27:42,320
you can hear me i

592
00:27:42,320 --> 00:27:45,120
just don't see my slides just yet yeah

593
00:27:45,120 --> 00:27:46,559
just one second while i find the right

594
00:27:46,559 --> 00:27:47,440
thing

595
00:27:47,440 --> 00:27:50,880
yeah don't worry okay right

596
00:27:50,880 --> 00:27:54,000
okay um maybe next time i'll do my own

597
00:27:54,000 --> 00:27:55,679
slides or not this time

598
00:27:55,679 --> 00:27:58,880
um let me try to be quick so

599
00:27:58,880 --> 00:28:02,799
there's an update to the deplicate rsync

600
00:28:02,799 --> 00:28:06,559
document indeed it's been re-christened

601
00:28:06,559 --> 00:28:10,960
to prefer rdp um

602
00:28:11,200 --> 00:28:14,720
i think that's well the change here

603
00:28:14,720 --> 00:28:17,840
is really one of emphasis the document

604
00:28:17,840 --> 00:28:19,840
that was there always said that we had

605
00:28:19,840 --> 00:28:21,600
to go to a place where we prefer

606
00:28:21,600 --> 00:28:23,440
rdp first before we can consider

607
00:28:23,440 --> 00:28:25,840
deprecating arsenic altogether

608
00:28:25,840 --> 00:28:28,399
um but we're trying to make this more

609
00:28:28,399 --> 00:28:29,200
explicit

610
00:28:29,200 --> 00:28:31,840
right now so the first objective would

611
00:28:31,840 --> 00:28:32,640
be

612
00:28:32,640 --> 00:28:35,360
to promote rdp to a mandatory to

613
00:28:35,360 --> 00:28:36,000
implement

614
00:28:36,000 --> 00:28:39,120
a protocol and make it preferred so that

615
00:28:39,120 --> 00:28:40,640
the operational dependence on

616
00:28:40,640 --> 00:28:43,600
our assing infrastructure is reduced and

617
00:28:43,600 --> 00:28:45,279
i think with that we will already

618
00:28:45,279 --> 00:28:46,080
achieve

619
00:28:46,080 --> 00:28:48,960
a great deal of the issues that at least

620
00:28:48,960 --> 00:28:49,679
i see

621
00:28:49,679 --> 00:28:54,159
with with arsenal next slide please

622
00:28:56,080 --> 00:28:59,600
so um there were already a couple of

623
00:28:59,600 --> 00:29:02,639
phases in the document

624
00:29:03,360 --> 00:29:06,640
the current document makes a slight

625
00:29:06,640 --> 00:29:07,279
change

626
00:29:07,279 --> 00:29:10,559
because if you remember phase 0 is

627
00:29:10,559 --> 00:29:12,320
essentially where we are today

628
00:29:12,320 --> 00:29:15,279
where rdp is optional and rsync is

629
00:29:15,279 --> 00:29:17,919
required

630
00:29:19,279 --> 00:29:21,440
what was not clear to all implementers

631
00:29:21,440 --> 00:29:23,039
before is that

632
00:29:23,039 --> 00:29:26,320
there was a strong desire that

633
00:29:26,320 --> 00:29:29,919
if rdp is unavailable a relying party

634
00:29:29,919 --> 00:29:31,279
software

635
00:29:31,279 --> 00:29:33,600
should or indeed must fall back to rsync

636
00:29:33,600 --> 00:29:35,200
because if you look at the

637
00:29:35,200 --> 00:29:38,159
current text in the rdp rfc then it

638
00:29:38,159 --> 00:29:39,120
actually says it

639
00:29:39,120 --> 00:29:42,799
could fall back in a small

640
00:29:42,799 --> 00:29:45,679
print actually so in the current

641
00:29:45,679 --> 00:29:48,880
document we suggest that

642
00:29:48,880 --> 00:29:50,399
since there is a feeling in the room

643
00:29:50,399 --> 00:29:52,320
that

644
00:29:52,320 --> 00:29:54,399
if information is available it should be

645
00:29:54,399 --> 00:29:55,440
used

646
00:29:55,440 --> 00:29:58,000
then this wording needs to be much

647
00:29:58,000 --> 00:30:00,960
stronger so perhaps it should say

648
00:30:00,960 --> 00:30:04,799
must use alternative access mechanisms

649
00:30:04,799 --> 00:30:08,559
if available um

650
00:30:08,559 --> 00:30:11,279
the other change in this document is

651
00:30:11,279 --> 00:30:12,000
that

652
00:30:12,000 --> 00:30:16,880
um the um or this revision i should say

653
00:30:16,880 --> 00:30:20,000
is that rdp already sent so 8182

654
00:30:20,000 --> 00:30:23,039
already centered

655
00:30:23,039 --> 00:30:25,360
publication servers that do rdp must

656
00:30:25,360 --> 00:30:26,240
make sure that

657
00:30:26,240 --> 00:30:29,120
all files are available but it does not

658
00:30:29,120 --> 00:30:31,760
explicitly say that things need to be

659
00:30:31,760 --> 00:30:35,120
highly available in

660
00:30:35,120 --> 00:30:37,200
64.81 because that only talks about

661
00:30:37,200 --> 00:30:38,480
rsync

662
00:30:38,480 --> 00:30:40,640
so the suggestion here is that even

663
00:30:40,640 --> 00:30:42,640
today we would say

664
00:30:42,640 --> 00:30:44,559
if you do rdp then you have to be

665
00:30:44,559 --> 00:30:46,240
serious about it then you have to make

666
00:30:46,240 --> 00:30:48,720
sure that it's available as well

667
00:30:48,720 --> 00:30:51,600
so with that combination we hope to

668
00:30:51,600 --> 00:30:54,399
avoid problems that we have been seeing

669
00:30:54,399 --> 00:30:57,760
um next up uh would be

670
00:30:57,760 --> 00:31:00,480
that repositories must all support rdp

671
00:31:00,480 --> 00:31:04,559
as a high availability service and that

672
00:31:05,519 --> 00:31:07,360
relying parties must still fall back to

673
00:31:07,360 --> 00:31:09,360
rsync

674
00:31:09,360 --> 00:31:11,120
so the only thing this changes really is

675
00:31:11,120 --> 00:31:12,559
that there's a requirement for all

676
00:31:12,559 --> 00:31:16,240
repositories for implement rdp

677
00:31:16,480 --> 00:31:18,559
and then the last phase would be that

678
00:31:18,559 --> 00:31:20,799
relying parties muscle

679
00:31:20,799 --> 00:31:24,240
support and prefer rdp if available

680
00:31:24,240 --> 00:31:29,039
um but they must still fall back um

681
00:31:29,039 --> 00:31:31,440
i think that if if we do all of this

682
00:31:31,440 --> 00:31:33,760
then

683
00:31:33,760 --> 00:31:36,320
the the practical operational dependency

684
00:31:36,320 --> 00:31:38,480
on rsync will be much reduced and at

685
00:31:38,480 --> 00:31:39,440
least

686
00:31:39,440 --> 00:31:41,600
my immediate concern with it could be

687
00:31:41,600 --> 00:31:42,799
addressed

688
00:31:42,799 --> 00:31:44,840
um doesn't mean we have to stop here

689
00:31:44,840 --> 00:31:47,279
though but first let me

690
00:31:47,279 --> 00:31:49,360
i guess read out the questions that are

691
00:31:49,360 --> 00:31:52,000
were raised

692
00:31:52,159 --> 00:31:56,080
so with regards to fall back to rsync

693
00:31:56,080 --> 00:31:58,559
currently the suggestion just says must

694
00:31:58,559 --> 00:31:59,360
use

695
00:31:59,360 --> 00:32:02,320
alternative methods it doesn't say

696
00:32:02,320 --> 00:32:04,080
anything about the strategy that

697
00:32:04,080 --> 00:32:06,640
should be used here but our concerns

698
00:32:06,640 --> 00:32:07,679
raised about

699
00:32:07,679 --> 00:32:10,080
uh if an rdp server would be unavailable

700
00:32:10,080 --> 00:32:11,840
that all relying parties in the world

701
00:32:11,840 --> 00:32:14,000
would immediately start hammering async

702
00:32:14,000 --> 00:32:15,519
servers and you would see immediate

703
00:32:15,519 --> 00:32:17,039
problems there so

704
00:32:17,039 --> 00:32:20,399
we may need to take some feedback on

705
00:32:20,399 --> 00:32:22,960
that and include some words on that

706
00:32:22,960 --> 00:32:25,440
another observation is that even in

707
00:32:25,440 --> 00:32:26,399
phase zero

708
00:32:26,399 --> 00:32:31,120
like today well if rdp is available

709
00:32:31,120 --> 00:32:33,120
then i believe it will already be good

710
00:32:33,120 --> 00:32:34,960
if relying parties who

711
00:32:34,960 --> 00:32:37,039
choose to support it today already

712
00:32:37,039 --> 00:32:39,120
prefer it and stop hammering

713
00:32:39,120 --> 00:32:42,320
rsync servers so we may want to have

714
00:32:42,320 --> 00:32:44,159
some words on that as well

715
00:32:44,159 --> 00:32:47,360
um next slide please

716
00:32:47,919 --> 00:32:50,159
um so yeah again the longer term

717
00:32:50,159 --> 00:32:52,399
objective i think it's still good if we

718
00:32:52,399 --> 00:32:54,240
would remove the operational dependency

719
00:32:54,240 --> 00:32:55,840
on rsync altogether

720
00:32:55,840 --> 00:32:58,399
because it would we allow us to simplify

721
00:32:58,399 --> 00:32:59,760
the the code

722
00:32:59,760 --> 00:33:02,559
in in reliant party software it will

723
00:33:02,559 --> 00:33:04,480
also allow us to simplify repository

724
00:33:04,480 --> 00:33:05,679
operations

725
00:33:05,679 --> 00:33:06,960
because you don't have to run these

726
00:33:06,960 --> 00:33:09,679
servers anymore but of course

727
00:33:09,679 --> 00:33:11,840
i understand that before we can get

728
00:33:11,840 --> 00:33:13,360
there we need to do a couple of things

729
00:33:13,360 --> 00:33:13,919
we need to

730
00:33:13,919 --> 00:33:16,399
get operational experience and and be

731
00:33:16,399 --> 00:33:19,200
confident that it's actually safe to do

732
00:33:19,200 --> 00:33:22,240
um and there's another question that was

733
00:33:22,240 --> 00:33:22,799
raised

734
00:33:22,799 --> 00:33:25,440
because we have rsync uris in the rpi

735
00:33:25,440 --> 00:33:27,360
all over the place and if we need to get

736
00:33:27,360 --> 00:33:28,640
rid of them then that

737
00:33:28,640 --> 00:33:32,399
actually has is not so trivial

738
00:33:32,399 --> 00:33:35,199
next slide please

739
00:33:36,480 --> 00:33:38,960
yeah because yeah we use these names as

740
00:33:38,960 --> 00:33:40,640
identifiers it's very

741
00:33:40,640 --> 00:33:44,159
um useful for debugging for talking uh

742
00:33:44,159 --> 00:33:47,039
you know um for reporting but also

743
00:33:47,039 --> 00:33:49,039
they're oftentimes used by relying party

744
00:33:49,039 --> 00:33:50,720
software to build up

745
00:33:50,720 --> 00:33:54,960
a key of things to validate um

746
00:33:54,960 --> 00:33:57,519
so you can actually build up a hierarchy

747
00:33:57,519 --> 00:33:59,679
in a different way

748
00:33:59,679 --> 00:34:02,880
but you know um it would require some

749
00:34:02,880 --> 00:34:03,440
serious

750
00:34:03,440 --> 00:34:05,360
thought if we would replace the rcd

751
00:34:05,360 --> 00:34:08,399
horizon another type of identifier then

752
00:34:08,399 --> 00:34:11,760
we need to update at least the

753
00:34:11,760 --> 00:34:14,480
certificate profile because that

754
00:34:14,480 --> 00:34:15,918
currently requires it

755
00:34:15,918 --> 00:34:19,119
and then there's all the

756
00:34:19,119 --> 00:34:21,599
interactions between cas apparently a

757
00:34:21,599 --> 00:34:22,159
child

758
00:34:22,159 --> 00:34:23,839
chelsea and publication server that

759
00:34:23,839 --> 00:34:25,199
would need to be addressed as well

760
00:34:25,199 --> 00:34:29,199
because there's restrictions there in

761
00:34:29,199 --> 00:34:31,280
the uris that are to be used like for

762
00:34:31,280 --> 00:34:33,199
example if you set yourself up

763
00:34:33,199 --> 00:34:36,399
as a publisher on a remote publication

764
00:34:36,399 --> 00:34:37,359
server

765
00:34:37,359 --> 00:34:39,119
you get a response that says this is

766
00:34:39,119 --> 00:34:41,280
your rsync jail where you're allowed to

767
00:34:41,280 --> 00:34:42,560
publish

768
00:34:42,560 --> 00:34:45,119
so those things would need to be changed

769
00:34:45,119 --> 00:34:45,760
and

770
00:34:45,760 --> 00:34:48,079
of course the certificate sign requests

771
00:34:48,079 --> 00:34:49,280
would include different kinds of

772
00:34:49,280 --> 00:34:50,480
identifiers that

773
00:34:50,480 --> 00:34:55,359
would also have to be honored so

774
00:34:55,520 --> 00:34:57,119
this is just to say there's quite a lot

775
00:34:57,119 --> 00:34:59,680
involved

776
00:34:59,760 --> 00:35:03,040
next slide please

777
00:35:03,040 --> 00:35:05,760
so yeah my proposal would then be to

778
00:35:05,760 --> 00:35:06,720
really

779
00:35:06,720 --> 00:35:09,280
focus on preferring rdp for now and

780
00:35:09,280 --> 00:35:09,839
perhaps

781
00:35:09,839 --> 00:35:12,960
actually split this document into

782
00:35:12,960 --> 00:35:16,800
into two and look at deprecating rsync

783
00:35:16,800 --> 00:35:20,640
as a later state as a separate step

784
00:35:20,640 --> 00:35:22,720
we can already start this initiative if

785
00:35:22,720 --> 00:35:23,839
people are interested

786
00:35:23,839 --> 00:35:26,320
but yeah i think it's it's a lot of work

787
00:35:26,320 --> 00:35:28,000
and i would not like it

788
00:35:28,000 --> 00:35:32,480
to block progress on on preferring rdp

789
00:35:32,480 --> 00:35:34,720
so that would be my uh my proposal to

790
00:35:34,720 --> 00:35:35,680
the group

791
00:35:35,680 --> 00:35:38,480
and i have a final slide i forgot what i

792
00:35:38,480 --> 00:35:40,240
put on it but

793
00:35:40,240 --> 00:35:43,040
i'll remember now yes yeah so the

794
00:35:43,040 --> 00:35:45,359
document currently includes a status

795
00:35:45,359 --> 00:35:46,960
overview

796
00:35:46,960 --> 00:35:49,920
which is kind of informational only

797
00:35:49,920 --> 00:35:51,599
really but it's to give an idea of where

798
00:35:51,599 --> 00:35:52,480
we are

799
00:35:52,480 --> 00:35:55,440
so rdp is already supported by by most

800
00:35:55,440 --> 00:35:57,760
repositories

801
00:35:57,760 --> 00:36:01,359
one rar is planning to deploy very soon

802
00:36:01,359 --> 00:36:03,760
um it's also supported by the allocated

803
00:36:03,760 --> 00:36:06,320
rpki software and there's one repository

804
00:36:06,320 --> 00:36:07,599
of that that's

805
00:36:07,599 --> 00:36:10,880
not doing it yet but there is software

806
00:36:10,880 --> 00:36:12,000
available that can do

807
00:36:12,000 --> 00:36:14,320
it so i think there is an option to go

808
00:36:14,320 --> 00:36:15,359
there

809
00:36:15,359 --> 00:36:18,560
uh in future um

810
00:36:18,560 --> 00:36:21,040
furthermore rdp's is also supported by

811
00:36:21,040 --> 00:36:22,640
six out of seven uh

812
00:36:22,640 --> 00:36:24,720
validation uh implementations and the

813
00:36:24,720 --> 00:36:25,680
seventh is

814
00:36:25,680 --> 00:36:28,800
developing it right now um

815
00:36:28,800 --> 00:36:32,560
of course i don't expect a a yes or no

816
00:36:32,560 --> 00:36:36,560
answer here to this question but my

817
00:36:36,560 --> 00:36:40,240
addition would be to uh

818
00:36:40,240 --> 00:36:44,400
to aim for wrapping up the preferred rdp

819
00:36:44,400 --> 00:36:46,640
work sometime this year preferably

820
00:36:46,640 --> 00:36:48,320
towards the end of it

821
00:36:48,320 --> 00:36:51,520
and where currently we have three

822
00:36:51,520 --> 00:36:52,000
different

823
00:36:52,000 --> 00:36:54,880
phases defined i'm not so sure that we

824
00:36:54,880 --> 00:36:56,640
really need to have like

825
00:36:56,640 --> 00:36:58,960
documents for each phase because in

826
00:36:58,960 --> 00:37:00,800
practical terms i think we're pretty

827
00:37:00,800 --> 00:37:02,160
much

828
00:37:02,160 --> 00:37:04,320
close to it being done by everybody

829
00:37:04,320 --> 00:37:05,200
anyway

830
00:37:05,200 --> 00:37:08,400
so we may then have this plan which is

831
00:37:08,400 --> 00:37:09,359
good

832
00:37:09,359 --> 00:37:11,119
but at the end of it produce one

833
00:37:11,119 --> 00:37:13,040
document that does the uh the updates

834
00:37:13,040 --> 00:37:14,000
that we think

835
00:37:14,000 --> 00:37:17,920
are needed to the current rfcs in one go

836
00:37:17,920 --> 00:37:20,320
and not have like three different

837
00:37:20,320 --> 00:37:22,960
published documents for that

838
00:37:22,960 --> 00:37:26,800
um with that i would like to head

839
00:37:26,800 --> 00:37:29,359
over to the queue i suppose um because

840
00:37:29,359 --> 00:37:31,760
that was all i had to say for now

841
00:37:31,760 --> 00:37:34,079
and i see opposed first and then randy

842
00:37:34,079 --> 00:37:37,839
so go ahead

843
00:37:38,960 --> 00:37:42,160
joe snyder lastly um

844
00:37:42,160 --> 00:37:46,320
i'm not entirely sure what publication

845
00:37:46,320 --> 00:37:50,320
for phase 2 end of 2021 means

846
00:37:50,320 --> 00:37:53,119
to the rpki community but i do want to

847
00:37:53,119 --> 00:37:53,760
point out

848
00:37:53,760 --> 00:37:56,400
that a relying party software

849
00:37:56,400 --> 00:37:57,359
implementation

850
00:37:57,359 --> 00:38:00,800
i contribute to supports

851
00:38:00,800 --> 00:38:04,320
previous versions up to one year and

852
00:38:04,320 --> 00:38:07,920
looking at my rdp logs i noticed that

853
00:38:07,920 --> 00:38:11,680
this industry appears to need

854
00:38:11,680 --> 00:38:14,640
almost up to one and a half years for 95

855
00:38:14,640 --> 00:38:16,880
percent of rps to

856
00:38:16,880 --> 00:38:21,200
upgrade so i think that phase two

857
00:38:21,200 --> 00:38:24,720
uh whatever publication for phase two

858
00:38:24,720 --> 00:38:27,200
means should factor into account that

859
00:38:27,200 --> 00:38:28,240
there is

860
00:38:28,240 --> 00:38:30,079
essentially a one and a half year uh

861
00:38:30,079 --> 00:38:33,839
lead time

862
00:38:34,160 --> 00:38:36,960
this was my thought right can i respond

863
00:38:36,960 --> 00:38:37,839
to that

864
00:38:37,839 --> 00:38:41,200
um yes i appreciate that

865
00:38:41,200 --> 00:38:43,920
um but i think publication for phase two

866
00:38:43,920 --> 00:38:45,440
would essentially mean that there has

867
00:38:45,440 --> 00:38:47,200
been a requirement

868
00:38:47,200 --> 00:38:50,320
for current implementations to support

869
00:38:50,320 --> 00:38:53,920
rdp it doesn't go as far as deprecating

870
00:38:53,920 --> 00:38:55,520
async yet

871
00:38:55,520 --> 00:38:59,040
so in that sense i think that nothing

872
00:38:59,040 --> 00:39:01,359
should break at that point i also

873
00:39:01,359 --> 00:39:03,280
believe that even if you publish

874
00:39:03,280 --> 00:39:07,280
a document that says that for example

875
00:39:07,280 --> 00:39:09,520
all repositories have to support rdp and

876
00:39:09,520 --> 00:39:12,160
not all of them do it just yet

877
00:39:12,160 --> 00:39:13,920
you can still publish a document that

878
00:39:13,920 --> 00:39:15,440
says that

879
00:39:15,440 --> 00:39:19,040
you really ought to do it um in my mind

880
00:39:19,040 --> 00:39:21,839
but because you still don't say to

881
00:39:21,839 --> 00:39:23,359
relying parties you don't have to do

882
00:39:23,359 --> 00:39:25,599
rsync anymore

883
00:39:25,599 --> 00:39:28,960
um so i hope that clarifies my my

884
00:39:28,960 --> 00:39:30,320
thinking on it

885
00:39:30,320 --> 00:39:33,520
um my objective definitely is to not

886
00:39:33,520 --> 00:39:34,880
break anything by uh

887
00:39:34,880 --> 00:39:38,720
by publishing anything so

888
00:39:38,720 --> 00:39:40,960
okay um randy do you want to comment

889
00:39:40,960 --> 00:39:42,079
further

890
00:39:42,079 --> 00:39:45,760
um i think this current document

891
00:39:45,760 --> 00:39:48,400
confuses two things

892
00:39:48,400 --> 00:39:51,359
which is the plan and the criteria in

893
00:39:51,359 --> 00:39:53,440
the plan et cetera et cetera

894
00:39:53,440 --> 00:39:57,119
and what the current state of

895
00:39:57,119 --> 00:40:02,320
various deployments are and i think

896
00:40:02,560 --> 00:40:05,520
my personal opinion is that the document

897
00:40:05,520 --> 00:40:07,280
should stick to the former

898
00:40:07,280 --> 00:40:10,480
and that we publish regular documents

899
00:40:10,480 --> 00:40:14,079
of the second flavor that are usually

900
00:40:14,079 --> 00:40:16,240
the custom is their implementation

901
00:40:16,240 --> 00:40:17,280
reports

902
00:40:17,280 --> 00:40:20,640
and inter-operational reports which are

903
00:40:20,640 --> 00:40:21,920
also internet drafts

904
00:40:21,920 --> 00:40:23,839
so it's not a format change it's a

905
00:40:23,839 --> 00:40:25,440
content change

906
00:40:25,440 --> 00:40:28,000
so that three months from now we're not

907
00:40:28,000 --> 00:40:30,160
looking at this document say oh what

908
00:40:30,160 --> 00:40:30,560
we've

909
00:40:30,560 --> 00:40:34,160
already a b

910
00:40:34,160 --> 00:40:37,440
and we've changed our mind on c

911
00:40:37,440 --> 00:40:39,839
and

912
00:40:43,119 --> 00:40:46,560
okay um yeah i would be

913
00:40:46,560 --> 00:40:49,280
quite happy to to take out the

914
00:40:49,280 --> 00:40:51,440
implementation status

915
00:40:51,440 --> 00:40:54,800
report and handle that separately

916
00:40:54,800 --> 00:40:58,240
i would also be happy to take out the

917
00:40:58,240 --> 00:41:01,599
words that i talk about the phases

918
00:41:01,599 --> 00:41:02,560
beyond let's say

919
00:41:02,560 --> 00:41:05,760
to really deprecate rsync and perhaps

920
00:41:05,760 --> 00:41:09,119
um launching a separate uh

921
00:41:09,119 --> 00:41:11,200
effort for that and then then i think

922
00:41:11,200 --> 00:41:14,000
the document will be focused on just

923
00:41:14,000 --> 00:41:17,200
uh the first uh well phase zero one and

924
00:41:17,200 --> 00:41:18,240
two

925
00:41:18,240 --> 00:41:21,200
um would that be in line with what you

926
00:41:21,200 --> 00:41:22,640
uh

927
00:41:22,640 --> 00:41:25,759
i'd like to go all the way

928
00:41:27,359 --> 00:41:29,680
i think deprecating our sync is the

929
00:41:29,680 --> 00:41:31,760
long-term goal

930
00:41:31,760 --> 00:41:35,839
it is

931
00:41:36,319 --> 00:41:38,640
yeah laying out the full plan and the

932
00:41:38,640 --> 00:41:40,560
criteria for moving through each step

933
00:41:40,560 --> 00:41:42,000
etcetera etcetera

934
00:41:42,000 --> 00:41:45,280
and then occasional reports on where we

935
00:41:45,280 --> 00:41:45,680
are

936
00:41:45,680 --> 00:41:48,720
and what needs to be done etc

937
00:41:48,720 --> 00:41:52,000
right but then the moment that you

938
00:41:52,000 --> 00:41:55,599
decide to make an actual update to

939
00:41:55,599 --> 00:41:57,359
existing rfcs is when you

940
00:41:57,359 --> 00:42:02,560
make a separate document that does that

941
00:42:02,560 --> 00:42:04,319
if i hear you correctly because this is

942
00:42:04,319 --> 00:42:07,280
the plan it also confuses

943
00:42:07,280 --> 00:42:09,599
being a plan with trying to update

944
00:42:09,599 --> 00:42:11,599
actual documents

945
00:42:11,599 --> 00:42:15,200
um and that's the confusion that i have

946
00:42:15,200 --> 00:42:16,960
with it

947
00:42:16,960 --> 00:42:18,400
if you see what i mean i'll have to

948
00:42:18,400 --> 00:42:20,800
pretend to think

949
00:42:20,800 --> 00:42:22,800
so what i'm trying trying to suggest is

950
00:42:22,800 --> 00:42:24,079
that currently

951
00:42:24,079 --> 00:42:28,640
we talk about a plan um which is fine

952
00:42:28,640 --> 00:42:30,240
but at some point you may want to

953
00:42:30,240 --> 00:42:31,920
execute the phase of the plan and at

954
00:42:31,920 --> 00:42:33,760
that point

955
00:42:33,760 --> 00:42:35,599
maybe what you need is not this document

956
00:42:35,599 --> 00:42:37,760
but a separate document that does that

957
00:42:37,760 --> 00:42:39,599
so a separate document that does the

958
00:42:39,599 --> 00:42:41,040
actual

959
00:42:41,040 --> 00:42:44,960
update of whatever updates we want to do

960
00:42:44,960 --> 00:42:46,640
that seems reasonable and you could

961
00:42:46,640 --> 00:42:48,240
either put it in

962
00:42:48,240 --> 00:42:51,359
the january implementation report or a

963
00:42:51,359 --> 00:42:51,920
separate

964
00:42:51,920 --> 00:42:57,599
uh you know rfc 42 bits

965
00:42:57,599 --> 00:43:01,599
yes but i want to seriously separate

966
00:43:01,599 --> 00:43:05,040
the uri problem

967
00:43:05,040 --> 00:43:09,599
because that's messy

968
00:43:10,839 --> 00:43:12,720
yes

969
00:43:12,720 --> 00:43:14,319
um there was somebody in the queue

970
00:43:14,319 --> 00:43:17,920
earlier but i missed them now

971
00:43:21,119 --> 00:43:27,839
any further comments or questions

972
00:43:27,920 --> 00:43:31,680
oh yeah really yeah

973
00:43:33,520 --> 00:43:37,200
uh annoying

974
00:43:37,200 --> 00:43:41,520
uh what's aboutism uh

975
00:43:41,520 --> 00:43:45,599
as we are writing down

976
00:43:45,599 --> 00:43:49,200
uh uh a roll over

977
00:43:49,200 --> 00:43:52,839
plan for a successive

978
00:43:52,839 --> 00:43:56,880
uh protocols

979
00:43:58,480 --> 00:44:03,520
would it make sense and help

980
00:44:03,520 --> 00:44:06,400
not only to

981
00:44:06,880 --> 00:44:10,319
increase the complexity of the stuff but

982
00:44:10,319 --> 00:44:14,000
actually for the targets protocol

983
00:44:14,000 --> 00:44:17,440
specify preference or

984
00:44:17,440 --> 00:44:21,119
make the newer

985
00:44:21,119 --> 00:44:25,280
ip protocol mandatory

986
00:44:25,280 --> 00:44:28,640
v4 v6

987
00:44:35,520 --> 00:44:40,240
right um

988
00:44:40,800 --> 00:44:42,640
so you're suggesting that we should talk

989
00:44:42,640 --> 00:44:45,520
about making ipp6 mandatory for the rpi

990
00:44:45,520 --> 00:44:47,520
repositories

991
00:44:47,520 --> 00:44:50,560
did i understand that correctly

992
00:44:50,560 --> 00:44:53,520
i think that is a fine thing to do but

993
00:44:53,520 --> 00:45:04,319
it's probably orthogonal to this

994
00:45:04,319 --> 00:45:07,119
but i may have misunderstood your

995
00:45:07,119 --> 00:45:09,760
suggestion

996
00:45:17,040 --> 00:45:19,920
okay as a as a participant i think it

997
00:45:19,920 --> 00:45:20,640
would be helpful

998
00:45:20,640 --> 00:45:24,000
randy had a lot of comment about uh

999
00:45:24,000 --> 00:45:26,319
implementation reports and maybe

1000
00:45:26,319 --> 00:45:27,839
splitting this draft into a couple

1001
00:45:27,839 --> 00:45:28,480
pieces

1002
00:45:28,480 --> 00:45:30,000
i think that conversation would be good

1003
00:45:30,000 --> 00:45:32,160
to have on the mailing list if possible

1004
00:45:32,160 --> 00:45:35,200
so i would call for randy to please

1005
00:45:35,200 --> 00:45:37,599
make an email with the concise four

1006
00:45:37,599 --> 00:45:38,880
points he had

1007
00:45:38,880 --> 00:45:42,800
or five points i think the

1008
00:45:42,800 --> 00:45:44,960
implementation report bit is actually

1009
00:45:44,960 --> 00:45:46,480
kind of useful and something that's been

1010
00:45:46,480 --> 00:45:47,599
talked about as part of

1011
00:45:47,599 --> 00:45:48,960
you know have running code that

1012
00:45:48,960 --> 00:45:51,520
implements the change draft

1013
00:45:51,520 --> 00:45:54,160
before we publish the draft uh which was

1014
00:45:54,160 --> 00:45:54,880
also on the list

1015
00:45:54,880 --> 00:45:58,319
so i think that that would be helpful

1016
00:45:58,319 --> 00:46:01,359
i actually did oh excellent

1017
00:46:01,359 --> 00:46:04,960
i don't have my email up but okay

1018
00:46:04,960 --> 00:46:08,880
uh yeah so tim was there anything that

1019
00:46:08,880 --> 00:46:10,400
you wanted to get out of this aside from

1020
00:46:10,400 --> 00:46:13,119
the uh

1021
00:46:13,359 --> 00:46:16,000
um no i think we're good uh and i'll

1022
00:46:16,000 --> 00:46:17,280
follow up on the list and

1023
00:46:17,280 --> 00:46:21,119
uh and with randy on our next steps

1024
00:46:21,119 --> 00:46:23,280
okay thank you very much i think the

1025
00:46:23,280 --> 00:46:24,240
next person up

1026
00:46:24,240 --> 00:46:27,520
is yob with two presentations

1027
00:46:27,520 --> 00:46:28,960
and i'm gonna stop sharing so he can

1028
00:46:28,960 --> 00:46:31,200
share

1029
00:46:34,560 --> 00:46:37,520
all righty

1030
00:46:38,880 --> 00:46:43,839
share screen

1031
00:46:56,319 --> 00:46:59,920
is my screen being shared i don't see

1032
00:46:59,920 --> 00:47:02,079
oh sorry i didn't click the button for

1033
00:47:02,079 --> 00:47:04,000
you ah

1034
00:47:04,000 --> 00:47:10,240
you really want to share your screen yes

1035
00:47:10,240 --> 00:47:13,760
application window there we go

1036
00:47:13,760 --> 00:47:16,560
so today i want to talk a little bit

1037
00:47:16,560 --> 00:47:17,200
about

1038
00:47:17,200 --> 00:47:20,880
a concept called rpki signed checklists

1039
00:47:20,880 --> 00:47:24,640
i also wish to make fun of our cider

1040
00:47:24,640 --> 00:47:25,359
name

1041
00:47:25,359 --> 00:47:29,279
because it has the word cider in it

1042
00:47:30,960 --> 00:47:33,440
what am i trying to solve with rpki

1043
00:47:33,440 --> 00:47:35,040
science checklists

1044
00:47:35,040 --> 00:47:38,480
it is a very similar approach

1045
00:47:38,480 --> 00:47:42,160
compared to resource tagged ad stations

1046
00:47:42,160 --> 00:47:45,040
but it has slightly different and in my

1047
00:47:45,040 --> 00:47:46,160
personal opinion

1048
00:47:46,160 --> 00:47:50,880
simpler cns object profile definition

1049
00:47:50,880 --> 00:47:52,240
i believe there is a need in the

1050
00:47:52,240 --> 00:47:54,559
internet network operator community

1051
00:47:54,559 --> 00:47:57,119
for a industry-wide understood

1052
00:47:57,119 --> 00:47:59,440
rpki-based attestation mechanism

1053
00:47:59,440 --> 00:48:02,640
to facilitate a number of use cases

1054
00:48:02,640 --> 00:48:05,920
such as for the peeringdeb.com

1055
00:48:05,920 --> 00:48:07,920
organization to associate

1056
00:48:07,920 --> 00:48:10,079
onboarding user accounts to internet

1057
00:48:10,079 --> 00:48:12,559
number resources

1058
00:48:12,559 --> 00:48:16,079
to make bring your own ip space

1059
00:48:16,079 --> 00:48:18,640
workflows a little bit easier such as

1060
00:48:18,640 --> 00:48:22,240
amazon supports in their ec2 product

1061
00:48:22,240 --> 00:48:24,960
or for example out-of-band distribution

1062
00:48:24,960 --> 00:48:25,359
of

1063
00:48:25,359 --> 00:48:30,078
ghostbuster style information

1064
00:48:31,599 --> 00:48:35,599
the differences between rta and rsc

1065
00:48:35,599 --> 00:48:39,359
are at a conceptual level

1066
00:48:39,359 --> 00:48:41,440
not so apparent but when you start

1067
00:48:41,440 --> 00:48:42,720
implementing

1068
00:48:42,720 --> 00:48:44,800
at least in my experience attempting to

1069
00:48:44,800 --> 00:48:45,920
implement rta

1070
00:48:45,920 --> 00:48:48,240
i ran into some roadblocks that i

1071
00:48:48,240 --> 00:48:51,119
believe do not exist in rsc

1072
00:48:51,119 --> 00:48:54,400
i want to emphasize that i have

1073
00:48:54,400 --> 00:48:58,480
great respect for the effort that rta

1074
00:48:58,480 --> 00:49:01,920
represents and appreciate it so much i

1075
00:49:01,920 --> 00:49:03,119
copied a lot of

1076
00:49:03,119 --> 00:49:06,880
the ideas from the rta draft

1077
00:49:06,880 --> 00:49:11,280
now rta suggests that multiple signers

1078
00:49:11,280 --> 00:49:13,599
subordinate to multiple different trust

1079
00:49:13,599 --> 00:49:14,640
anchors could

1080
00:49:14,640 --> 00:49:19,200
together composite a cms-signed object

1081
00:49:19,200 --> 00:49:22,400
a issue i perceive there is that there

1082
00:49:22,400 --> 00:49:23,680
could be

1083
00:49:23,680 --> 00:49:26,880
key identifier collisions along the

1084
00:49:26,880 --> 00:49:28,839
trust anchor

1085
00:49:28,839 --> 00:49:32,559
trees uh whether this fear is founded

1086
00:49:32,559 --> 00:49:36,319
or not is uh i guess subjective but this

1087
00:49:36,319 --> 00:49:39,599
is a roadblock i perceive

1088
00:49:39,599 --> 00:49:42,880
there are relying parties that

1089
00:49:42,880 --> 00:49:46,000
have instances per trust anchor

1090
00:49:46,000 --> 00:49:49,119
where those instances literally run in

1091
00:49:49,119 --> 00:49:52,319
separate physical address memory space

1092
00:49:52,319 --> 00:49:55,920
making it impossible to validate

1093
00:49:55,920 --> 00:49:59,839
a multiple sign or multiple ta

1094
00:49:59,839 --> 00:50:04,400
rta object and since there is no

1095
00:50:04,400 --> 00:50:06,240
industry recognized error handling for

1096
00:50:06,240 --> 00:50:08,160
cases like this

1097
00:50:08,160 --> 00:50:09,839
the conclusion in the validation

1098
00:50:09,839 --> 00:50:11,280
strategy would be

1099
00:50:11,280 --> 00:50:14,800
that the object cannot pass validation

1100
00:50:14,800 --> 00:50:18,640
if there are no common trust anchors

1101
00:50:18,640 --> 00:50:21,280
then furthermore rta suggests that the

1102
00:50:21,280 --> 00:50:22,640
intermediate cas

1103
00:50:22,640 --> 00:50:26,079
to form the validation chain upwards to

1104
00:50:26,079 --> 00:50:27,760
what is published in the publicly

1105
00:50:27,760 --> 00:50:30,000
accessible rpk

1106
00:50:30,000 --> 00:50:32,480
and associated crls can be included in

1107
00:50:32,480 --> 00:50:33,920
the rta

1108
00:50:33,920 --> 00:50:38,160
file itself and it is my

1109
00:50:38,160 --> 00:50:40,640
interpretation that that is not a

1110
00:50:40,640 --> 00:50:43,359
desirable property and that it

1111
00:50:43,359 --> 00:50:46,400
is more convenient for operators

1112
00:50:46,400 --> 00:50:50,640
to have the concept of rta or rca skim

1113
00:50:50,640 --> 00:50:52,800
as closely as possible to the

1114
00:50:52,800 --> 00:50:56,319
published rpki

1115
00:50:57,760 --> 00:51:01,119
then i think from a user

1116
00:51:01,119 --> 00:51:03,760
experience perspective but again this is

1117
00:51:03,760 --> 00:51:05,920
a subjective interpretation of

1118
00:51:05,920 --> 00:51:08,319
possible future scenarios i think the

1119
00:51:08,319 --> 00:51:09,920
rta model encourages

1120
00:51:09,920 --> 00:51:12,400
to assign things with all your resources

1121
00:51:12,400 --> 00:51:13,920
whether that's relevant to the business

1122
00:51:13,920 --> 00:51:14,720
transaction

1123
00:51:14,720 --> 00:51:18,319
at hand or not whereas the rc s

1124
00:51:18,319 --> 00:51:23,280
rsc model invites the operator to only

1125
00:51:23,280 --> 00:51:25,359
list the resources applicable to the

1126
00:51:25,359 --> 00:51:26,559
business transaction

1127
00:51:26,559 --> 00:51:29,760
at hand but

1128
00:51:29,760 --> 00:51:32,960
these are minutes

1129
00:51:33,040 --> 00:51:35,839
implementation differences i think it is

1130
00:51:35,839 --> 00:51:37,680
important for this working group to

1131
00:51:37,680 --> 00:51:41,440
to focus on what we are trying to

1132
00:51:41,440 --> 00:51:43,760
achieve what how the industry will

1133
00:51:43,760 --> 00:51:46,640
benefit from this

1134
00:51:47,040 --> 00:51:50,160
so implementation status i produced

1135
00:51:50,160 --> 00:51:53,280
a example rsc object that can be

1136
00:51:53,280 --> 00:51:54,800
retrieved from github

1137
00:51:54,800 --> 00:51:57,760
which represents a out of band means to

1138
00:51:57,760 --> 00:51:58,640
distribute

1139
00:51:58,640 --> 00:52:02,079
rsc objects the example

1140
00:52:02,079 --> 00:52:04,640
chains upwards to the right ncc operator

1141
00:52:04,640 --> 00:52:05,839
trust anchor

1142
00:52:05,839 --> 00:52:09,359
so validator implementers should be able

1143
00:52:09,359 --> 00:52:12,480
to use this object to to

1144
00:52:12,480 --> 00:52:15,760
extract the hashes

1145
00:52:15,760 --> 00:52:19,520
that are encapsulated in the e-content

1146
00:52:19,520 --> 00:52:21,760
then a second signer implementation that

1147
00:52:21,760 --> 00:52:23,680
is open source

1148
00:52:23,680 --> 00:52:25,680
was provided by ap neck and can be

1149
00:52:25,680 --> 00:52:27,280
downloaded from their

1150
00:52:27,280 --> 00:52:30,480
github account in terms of validators

1151
00:52:30,480 --> 00:52:31,040
there's

1152
00:52:31,040 --> 00:52:34,240
also two efforts on their way there's a

1153
00:52:34,240 --> 00:52:36,079
work in progress development branch

1154
00:52:36,079 --> 00:52:40,000
within the rpi client project pending

1155
00:52:40,000 --> 00:52:43,760
ayanna early allocation and ap neck

1156
00:52:43,760 --> 00:52:46,800
also provided a validator implementation

1157
00:52:46,800 --> 00:52:49,200
that can be accessed via their github

1158
00:52:49,200 --> 00:52:50,240
account

1159
00:52:50,240 --> 00:52:53,359
so what we have so far is a

1160
00:52:53,359 --> 00:52:57,440
is informal is and one formal notation

1161
00:52:57,440 --> 00:53:00,800
a description in natural language and

1162
00:53:00,800 --> 00:53:04,000
two software efforts

1163
00:53:05,760 --> 00:53:08,800
i have requested the

1164
00:53:08,800 --> 00:53:12,240
cider up chairs to start the ayana early

1165
00:53:12,240 --> 00:53:13,440
allocation

1166
00:53:13,440 --> 00:53:17,839
procedure as outlined in rc7120

1167
00:53:17,839 --> 00:53:20,960
the purpose of early allocation in this

1168
00:53:20,960 --> 00:53:22,559
specific context

1169
00:53:22,559 --> 00:53:24,880
is that it would be undesirable for my

1170
00:53:24,880 --> 00:53:25,839
personal

1171
00:53:25,839 --> 00:53:29,680
private enterprise number to be deployed

1172
00:53:29,680 --> 00:53:32,559
in the world in some capacity and to

1173
00:53:32,559 --> 00:53:34,720
further interoperability

1174
00:53:34,720 --> 00:53:37,280
with future implementations it is good

1175
00:53:37,280 --> 00:53:38,079
to

1176
00:53:38,079 --> 00:53:41,119
obtain a oid from the appropriate ayana

1177
00:53:41,119 --> 00:53:43,839
registry

1178
00:53:44,079 --> 00:53:47,599
now some have perceived problems

1179
00:53:47,599 --> 00:53:50,880
with rta and rsc

1180
00:53:50,880 --> 00:53:53,200
and there are discussions related to

1181
00:53:53,200 --> 00:53:54,240
identity

1182
00:53:54,240 --> 00:53:58,559
but i want to emphasize that the oids

1183
00:53:58,559 --> 00:54:01,440
come from a infinite code point space

1184
00:54:01,440 --> 00:54:03,520
and there is no scarcity

1185
00:54:03,520 --> 00:54:06,559
furthermore the rpki signed checklists

1186
00:54:06,559 --> 00:54:08,800
are distributed out of vent and this

1187
00:54:08,800 --> 00:54:10,880
means that their existence does not

1188
00:54:10,880 --> 00:54:11,359
place

1189
00:54:11,359 --> 00:54:16,720
any additional burden on the global rpki

1190
00:54:17,359 --> 00:54:20,640
the crl checking which is online

1191
00:54:20,640 --> 00:54:23,040
can piggyback on existing fetch

1192
00:54:23,040 --> 00:54:25,520
operations that relying parties perform

1193
00:54:25,520 --> 00:54:27,839
anyway for route origin validation

1194
00:54:27,839 --> 00:54:29,119
purposes

1195
00:54:29,119 --> 00:54:30,960
so for instance in the case of fast

1196
00:54:30,960 --> 00:54:33,200
lease deployment

1197
00:54:33,200 --> 00:54:35,920
once an hour the fetching operation

1198
00:54:35,920 --> 00:54:36,799
occurs

1199
00:54:36,799 --> 00:54:40,480
but any subsequent validation of rta or

1200
00:54:40,480 --> 00:54:41,520
rsc

1201
00:54:41,520 --> 00:54:44,880
objects can leverage the cache that

1202
00:54:44,880 --> 00:54:47,119
the validated cache that exists within

1203
00:54:47,119 --> 00:54:49,200
the fastly administrative domain

1204
00:54:49,200 --> 00:54:51,599
without having the need to reconnect to

1205
00:54:51,599 --> 00:54:54,079
the internet

1206
00:54:54,079 --> 00:54:57,760
and then lastly certificate authorities

1207
00:54:57,760 --> 00:55:01,280
are not mandated to produce

1208
00:55:01,280 --> 00:55:04,000
either rtas or rscs so this is a

1209
00:55:04,000 --> 00:55:05,920
technology that if you do not wish to

1210
00:55:05,920 --> 00:55:06,559
use it

1211
00:55:06,559 --> 00:55:10,480
by all means don't use it

1212
00:55:12,400 --> 00:55:16,079
then on the complicated topic of

1213
00:55:16,079 --> 00:55:19,599
identity versus authorization

1214
00:55:19,599 --> 00:55:22,480
it is good to keep in mind that when

1215
00:55:22,480 --> 00:55:23,200
working with

1216
00:55:23,200 --> 00:55:26,480
rta or rsc objects that

1217
00:55:26,480 --> 00:55:29,839
the trust anchor is assumed trust and

1218
00:55:29,839 --> 00:55:32,960
there is no derived trust and this means

1219
00:55:32,960 --> 00:55:33,440
that

1220
00:55:33,440 --> 00:55:35,839
if you have a rta in hand and you want

1221
00:55:35,839 --> 00:55:37,200
to validate it

1222
00:55:37,200 --> 00:55:40,559
you do not know who produced the rta

1223
00:55:40,559 --> 00:55:44,720
or rsc object but you do have a notion

1224
00:55:44,720 --> 00:55:45,599
of who

1225
00:55:45,599 --> 00:55:48,720
handed that file to you

1226
00:55:48,720 --> 00:55:51,280
this is what makes that i believe it is

1227
00:55:51,280 --> 00:55:52,319
possible

1228
00:55:52,319 --> 00:55:56,480
to use these types of objects in

1229
00:55:56,480 --> 00:56:01,359
message digest authentication procedures

1230
00:56:01,359 --> 00:56:04,079
and how i think this industry can make

1231
00:56:04,079 --> 00:56:06,079
productive use of this concept

1232
00:56:06,079 --> 00:56:08,319
even though you don't know exactly who

1233
00:56:08,319 --> 00:56:10,960
signed it you do know that somebody

1234
00:56:10,960 --> 00:56:13,119
under the trust anchor signed it and

1235
00:56:13,119 --> 00:56:14,240
that you can validate

1236
00:56:14,240 --> 00:56:17,839
up to the trust anchor

1237
00:56:18,079 --> 00:56:22,319
so how do you implement rsc it really

1238
00:56:22,319 --> 00:56:24,559
to me appeared as linking a lot of

1239
00:56:24,559 --> 00:56:26,960
existing ideas that have been

1240
00:56:26,960 --> 00:56:30,160
expressed in existing codes and that you

1241
00:56:30,160 --> 00:56:31,440
recombine those

1242
00:56:31,440 --> 00:56:34,240
individual components to produce a

1243
00:56:34,240 --> 00:56:35,599
validator that

1244
00:56:35,599 --> 00:56:39,200
supports rsc

1245
00:56:40,480 --> 00:56:43,119
this slide in part is intended to be a

1246
00:56:43,119 --> 00:56:44,880
little bit humorous

1247
00:56:44,880 --> 00:56:47,040
but what it what it boils down to is

1248
00:56:47,040 --> 00:56:48,480
that there is

1249
00:56:48,480 --> 00:56:51,839
concepts in the roa handling concepts in

1250
00:56:51,839 --> 00:56:54,319
the manifest file handling

1251
00:56:54,319 --> 00:56:57,520
and and concepts in the extension

1252
00:56:57,520 --> 00:56:59,760
handling of existing validator

1253
00:56:59,760 --> 00:57:00,960
implementations

1254
00:57:00,960 --> 00:57:03,920
that if recombined results in support

1255
00:57:03,920 --> 00:57:04,960
for

1256
00:57:04,960 --> 00:57:08,480
rsc files and this is possible because

1257
00:57:08,480 --> 00:57:10,559
the rsc specification very closely

1258
00:57:10,559 --> 00:57:11,839
follows the rc

1259
00:57:11,839 --> 00:57:14,880
6488 template meaning that the

1260
00:57:14,880 --> 00:57:17,520
initial cost of implementation and the

1261
00:57:17,520 --> 00:57:19,359
subsequent cost of maintaining the

1262
00:57:19,359 --> 00:57:20,960
validator codes

1263
00:57:20,960 --> 00:57:24,160
i believe are lower than

1264
00:57:24,160 --> 00:57:28,480
what would happen in the case of rta

1265
00:57:28,960 --> 00:57:31,520
and with that i would like to open up

1266
00:57:31,520 --> 00:57:32,400
the floor for

1267
00:57:32,400 --> 00:57:35,520
questions comments

1268
00:57:38,559 --> 00:57:41,839
anything the group has to share

1269
00:57:43,599 --> 00:57:46,799
i see tim branson's uh raise this end

1270
00:57:46,799 --> 00:57:50,640
tim go ahead i will mute myself

1271
00:57:51,760 --> 00:57:55,520
all right um yeah so first off i think

1272
00:57:55,520 --> 00:57:59,839
rsc in and by itself has a place for the

1273
00:57:59,839 --> 00:58:02,400
more simple use case which is what what

1274
00:58:02,400 --> 00:58:03,680
you want to address

1275
00:58:03,680 --> 00:58:08,559
compared to rta um

1276
00:58:08,559 --> 00:58:12,000
just the point that rta was not only

1277
00:58:12,000 --> 00:58:12,799
about having

1278
00:58:12,799 --> 00:58:17,040
multiple uh parties signing

1279
00:58:17,040 --> 00:58:19,200
the other thing it contained was the the

1280
00:58:19,200 --> 00:58:21,200
idea that you could actually include

1281
00:58:21,200 --> 00:58:24,559
the cryptic graphic material needed for

1282
00:58:24,559 --> 00:58:26,000
validation

1283
00:58:26,000 --> 00:58:28,240
inside the cms which is not allowed if

1284
00:58:28,240 --> 00:58:29,599
you follow the

1285
00:58:29,599 --> 00:58:34,880
rpi signed object draft

1286
00:58:35,119 --> 00:58:38,960
sorry rfc um

1287
00:58:38,960 --> 00:58:41,760
so i guess what i'm trying to say is

1288
00:58:41,760 --> 00:58:43,200
that there are

1289
00:58:43,200 --> 00:58:46,000
at least two other use cases that exist

1290
00:58:46,000 --> 00:58:47,520
in the world

1291
00:58:47,520 --> 00:58:49,200
you could have a situation where

1292
00:58:49,200 --> 00:58:50,559
multiple parties want to make

1293
00:58:50,559 --> 00:58:53,200
this attestation about a shared pool of

1294
00:58:53,200 --> 00:58:54,319
resources

1295
00:58:54,319 --> 00:58:56,799
you could also have models where you

1296
00:58:56,799 --> 00:58:58,720
want to give something

1297
00:58:58,720 --> 00:59:00,799
to somebody else who can then validate

1298
00:59:00,799 --> 00:59:03,520
that by itself without needing to do

1299
00:59:03,520 --> 00:59:09,440
a full rpi validation in other regards

1300
00:59:11,440 --> 00:59:14,960
that being said we need to think about

1301
00:59:14,960 --> 00:59:17,440
where we're headed with the rta

1302
00:59:17,440 --> 00:59:22,000
specification but one option might be

1303
00:59:22,000 --> 00:59:24,880
that we actually look at the rsc

1304
00:59:24,880 --> 00:59:25,839
specification

1305
00:59:25,839 --> 00:59:29,119
and see if we can wrap that in a way

1306
00:59:29,119 --> 00:59:30,880
because essentially you could just

1307
00:59:30,880 --> 00:59:32,799
include these objects

1308
00:59:32,799 --> 00:59:34,880
you could have multiple objects if that

1309
00:59:34,880 --> 00:59:35,920
makes sense for you

1310
00:59:35,920 --> 00:59:38,799
for your use case so you can present

1311
00:59:38,799 --> 00:59:40,720
them in one go

1312
00:59:40,720 --> 00:59:42,720
and if it's useful for use use case to

1313
00:59:42,720 --> 00:59:44,559
have all the

1314
00:59:44,559 --> 00:59:46,880
ca certificates and crl is readily

1315
00:59:46,880 --> 00:59:48,960
shipped with it so you can make a

1316
00:59:48,960 --> 00:59:51,200
validation quickly like is this thing

1317
00:59:51,200 --> 00:59:52,799
valid right now

1318
00:59:52,799 --> 00:59:54,559
um then that's also something you could

1319
00:59:54,559 --> 00:59:55,920
look at in a

1320
00:59:55,920 --> 00:59:59,920
in an enclosing structure let's say so

1321
00:59:59,920 --> 01:00:00,720
sorry that was

1322
01:00:00,720 --> 01:00:02,400
those were a lot of words but i'm trying

1323
01:00:02,400 --> 01:00:03,760
to say is

1324
01:00:03,760 --> 01:00:05,520
i can see the use case for the simple

1325
01:00:05,520 --> 01:00:07,839
case and i think we need to think about

1326
01:00:07,839 --> 01:00:09,520
whether the rta

1327
01:00:09,520 --> 01:00:11,680
uh keeps its current specification or

1328
01:00:11,680 --> 01:00:14,160
tries to leverage this in some way

1329
01:00:14,160 --> 01:00:16,720
in summary

1330
01:00:18,079 --> 01:00:21,280
thank you for your comments um

1331
01:00:21,280 --> 01:00:23,440
yeah i want to emphasize that from my

1332
01:00:23,440 --> 01:00:24,319
perspective

1333
01:00:24,319 --> 01:00:27,920
rsc and rta are not mutually exclusive

1334
01:00:27,920 --> 01:00:29,760
they describe

1335
01:00:29,760 --> 01:00:33,040
different semantics one allows multiple

1336
01:00:33,040 --> 01:00:35,359
signers to attest a single

1337
01:00:35,359 --> 01:00:38,480
sha256 hash whereas the other

1338
01:00:38,480 --> 01:00:41,680
has a single signer allowing at the

1339
01:00:41,680 --> 01:00:44,240
station of multiple sha256 hashes

1340
01:00:44,240 --> 01:00:47,280
and this makes the ideas

1341
01:00:47,280 --> 01:00:50,640
fundamentally different

1342
01:00:50,799 --> 01:00:53,839
but from a getting things done

1343
01:00:53,839 --> 01:00:54,640
perspective

1344
01:00:54,640 --> 01:00:57,680
i think this industry has

1345
01:00:57,680 --> 01:00:59,920
been waiting for a significant amount of

1346
01:00:59,920 --> 01:01:01,119
time for

1347
01:01:01,119 --> 01:01:03,920
the rpki community to deliver some kind

1348
01:01:03,920 --> 01:01:04,400
of

1349
01:01:04,400 --> 01:01:07,680
technology that fits into the workflows

1350
01:01:07,680 --> 01:01:10,799
we both agree on exist

1351
01:01:10,799 --> 01:01:14,319
so i would my take on it is that the

1352
01:01:14,319 --> 01:01:17,440
rsc effort should proceed so that the

1353
01:01:17,440 --> 01:01:19,520
simple case

1354
01:01:19,520 --> 01:01:22,720
is covered and separately

1355
01:01:22,720 --> 01:01:25,520
discussion can continue um what rta

1356
01:01:25,520 --> 01:01:27,440
means and whether it's feasible

1357
01:01:27,440 --> 01:01:30,640
but as i as implementer i had trouble

1358
01:01:30,640 --> 01:01:33,440
implementing rta in its current form uh

1359
01:01:33,440 --> 01:01:35,520
which is more a reflection of my limited

1360
01:01:35,520 --> 01:01:37,680
capabilities than of course the rta

1361
01:01:37,680 --> 01:01:41,200
specification in and of itself

1362
01:01:47,920 --> 01:01:51,040
if you want to respond to my verb rich

1363
01:01:51,040 --> 01:01:53,839
please go ahead

1364
01:01:57,280 --> 01:02:00,319
yeah okay no i don't have a lot to add

1365
01:02:00,319 --> 01:02:01,280
except

1366
01:02:01,280 --> 01:02:04,839
we we do have working implementations of

1367
01:02:04,839 --> 01:02:06,559
rta um

1368
01:02:06,559 --> 01:02:08,640
but of course i mean it's it's a draft

1369
01:02:08,640 --> 01:02:10,319
it's a work in progress but

1370
01:02:10,319 --> 01:02:12,640
yeah if you want a data point that it

1371
01:02:12,640 --> 01:02:14,160
can be implemented and can be

1372
01:02:14,160 --> 01:02:15,119
interoperable

1373
01:02:15,119 --> 01:02:17,440
uh we have done an implementation at the

1374
01:02:17,440 --> 01:02:18,240
nailnet labs

1375
01:02:18,240 --> 01:02:21,200
and ap have done an implementation as

1376
01:02:21,200 --> 01:02:22,000
well

1377
01:02:22,000 --> 01:02:24,640
and they they work well together so it

1378
01:02:24,640 --> 01:02:26,640
is not impossible but i agree that this

1379
01:02:26,640 --> 01:02:28,079
more complicated model

1380
01:02:28,079 --> 01:02:30,000
than what you are suggesting and i can

1381
01:02:30,000 --> 01:02:31,839
see how that also has a

1382
01:02:31,839 --> 01:02:35,839
has a place

1383
01:02:36,480 --> 01:02:39,680
reading the comments in both software

1384
01:02:39,680 --> 01:02:42,160
projects it was my interpretation that

1385
01:02:42,160 --> 01:02:45,280
the validation

1386
01:02:45,280 --> 01:02:48,480
on rta objects were intermediate

1387
01:02:48,480 --> 01:02:51,760
ca objects are present

1388
01:02:51,760 --> 01:02:54,799
has not been finished and

1389
01:02:54,799 --> 01:02:57,839
similarly the apnic

1390
01:02:57,839 --> 01:03:00,319
demo of rta with multiple signers on

1391
01:03:00,319 --> 01:03:03,520
their multiple trust anchors

1392
01:03:03,520 --> 01:03:07,119
i am i'm not confident that that is a

1393
01:03:07,119 --> 01:03:08,960
robust validation strategy

1394
01:03:08,960 --> 01:03:11,200
as it requires multiple instantiations

1395
01:03:11,200 --> 01:03:14,400
of the opensso command

1396
01:03:14,400 --> 01:03:17,359
i could be wrong um i mean arguably

1397
01:03:17,359 --> 01:03:17,920
there is

1398
01:03:17,920 --> 01:03:20,720
some code i'm i'm just not 100 sure that

1399
01:03:20,720 --> 01:03:21,200
it

1400
01:03:21,200 --> 01:03:24,000
is a perfect robust fit for what is

1401
01:03:24,000 --> 01:03:25,599
described in rta

1402
01:03:25,599 --> 01:03:28,799
but this this

1403
01:03:28,799 --> 01:03:30,480
can be attributed to my limited

1404
01:03:30,480 --> 01:03:32,640
abilities uh

1405
01:03:32,640 --> 01:03:36,880
and and the uh my hope is that in the rs

1406
01:03:36,880 --> 01:03:39,920
rsv proposal uh these complications do

1407
01:03:39,920 --> 01:03:41,599
not exist and that the

1408
01:03:41,599 --> 01:03:44,960
working group consensus arrives at that

1409
01:03:44,960 --> 01:03:47,280
point

1410
01:03:57,440 --> 01:04:00,319
see no other questions next presentation

1411
01:04:00,319 --> 01:04:02,720
please

1412
01:04:03,359 --> 01:04:13,839
okie dokie

1413
01:04:16,319 --> 01:04:19,760
uh i pressed the share screen request

1414
01:04:19,760 --> 01:04:23,520
i think you need to act at chris

1415
01:04:23,520 --> 01:04:27,839
thank you yes

1416
01:04:30,079 --> 01:04:32,640
oh there we're gonna talk about the

1417
01:04:32,640 --> 01:04:36,078
validation algorithm

1418
01:04:38,839 --> 01:04:40,000
um

1419
01:04:40,000 --> 01:04:42,319
quick recap what is the problem we're

1420
01:04:42,319 --> 01:04:43,680
solving and have been

1421
01:04:43,680 --> 01:04:47,200
harping on for multiple years almost a

1422
01:04:47,200 --> 01:04:49,200
decade now

1423
01:04:49,200 --> 01:04:51,920
when an intermediate ca shrinks any

1424
01:04:51,920 --> 01:04:52,960
subordinate

1425
01:04:52,960 --> 01:04:55,359
ca also need to shrink as soon as

1426
01:04:55,359 --> 01:04:56,319
possible

1427
01:04:56,319 --> 01:04:58,400
but there is no signaling mechanism from

1428
01:04:58,400 --> 01:05:00,000
parent to child

1429
01:05:00,000 --> 01:05:03,280
to allow for a shrink ahead of time

1430
01:05:03,280 --> 01:05:06,480
concept and following the

1431
01:05:06,480 --> 01:05:09,720
validation algorithm described in rfc

1432
01:05:09,720 --> 01:05:11,039
6487

1433
01:05:11,039 --> 01:05:14,319
which is the algorithm that all rps use

1434
01:05:14,319 --> 01:05:17,599
on all existing objects all

1435
01:05:17,599 --> 01:05:19,920
objects subordinate to an overclaiming

1436
01:05:19,920 --> 01:05:23,119
ca become invalid

1437
01:05:23,119 --> 01:05:27,599
in practice this leads to ip transfers

1438
01:05:27,599 --> 01:05:30,880
for a period of time causing

1439
01:05:30,880 --> 01:05:33,920
unrelated rpk objects to become

1440
01:05:33,920 --> 01:05:37,359
invalid and i believe this is

1441
01:05:37,359 --> 01:05:40,079
an undesirable characteristic of the

1442
01:05:40,079 --> 01:05:41,599
system

1443
01:05:41,599 --> 01:05:43,680
especially if one considers that

1444
01:05:43,680 --> 01:05:46,799
validation state

1445
01:05:47,359 --> 01:05:50,240
impacts the state of the global bhp

1446
01:05:50,240 --> 01:05:51,839
routing system

1447
01:05:51,839 --> 01:05:53,920
especially if people carry validation

1448
01:05:53,920 --> 01:05:55,680
state in bhp communities

1449
01:05:55,680 --> 01:05:59,039
so this to me appears as needless

1450
01:05:59,039 --> 01:06:00,400
brittleness

1451
01:06:00,400 --> 01:06:04,160
of the rpki technology stack

1452
01:06:04,160 --> 01:06:07,200
a real-life report on the problem

1453
01:06:07,200 --> 01:06:11,280
is available at this ripen cc hosted

1454
01:06:11,280 --> 01:06:12,400
routing working group

1455
01:06:12,400 --> 01:06:15,520
mailing list message the message and the

1456
01:06:15,520 --> 01:06:16,559
mail thread may be

1457
01:06:16,559 --> 01:06:19,280
somewhat confusing because two problems

1458
01:06:19,280 --> 01:06:20,400
are

1459
01:06:20,400 --> 01:06:22,720
being discussed in the same mill threat

1460
01:06:22,720 --> 01:06:23,839
on the one hand

1461
01:06:23,839 --> 01:06:27,119
there's a problem description of a

1462
01:06:27,119 --> 01:06:31,760
validator rejecting

1463
01:06:31,760 --> 01:06:34,480
objects because a single object listed

1464
01:06:34,480 --> 01:06:35,599
on a manifest

1465
01:06:35,599 --> 01:06:39,200
somehow did not pass

1466
01:06:39,200 --> 01:06:41,119
simple object validation in this

1467
01:06:41,119 --> 01:06:43,039
instance expiration

1468
01:06:43,039 --> 01:06:47,039
sorry overclaiming no i'm confused

1469
01:06:47,039 --> 01:06:49,200
exploration i think was the issue here

1470
01:06:49,200 --> 01:06:52,160
and then separately

1471
01:06:52,160 --> 01:06:55,280
two roas

1472
01:06:55,280 --> 01:06:58,559
related to the ca that sold off

1473
01:06:58,559 --> 01:07:00,960
or at least of or whatever happened some

1474
01:07:00,960 --> 01:07:02,240
ip space

1475
01:07:02,240 --> 01:07:04,960
became invalid so there's a ton of

1476
01:07:04,960 --> 01:07:06,079
objects

1477
01:07:06,079 --> 01:07:08,000
that became invalid but that has been

1478
01:07:08,000 --> 01:07:09,440
handled in

1479
01:07:09,440 --> 01:07:11,760
updates to the rpki validator in

1480
01:07:11,760 --> 01:07:12,880
question

1481
01:07:12,880 --> 01:07:15,520
but still there were two objects that in

1482
01:07:15,520 --> 01:07:19,759
my opinion needlessly became invalid

1483
01:07:20,400 --> 01:07:23,280
and how did we end up here because we

1484
01:07:23,280 --> 01:07:25,119
know about this problem and there's

1485
01:07:25,119 --> 01:07:28,640
a ton of ietf literature on the problem

1486
01:07:28,640 --> 01:07:31,599
and even proposed solutions but the

1487
01:07:31,599 --> 01:07:33,680
problem has not been solved is what we

1488
01:07:33,680 --> 01:07:37,280
observe in our operational reality

1489
01:07:37,280 --> 01:07:39,440
i think a challenge here is that the

1490
01:07:39,440 --> 01:07:42,119
algorithm described in

1491
01:07:42,119 --> 01:07:45,039
6487 and the algorithm

1492
01:07:45,039 --> 01:07:48,079
described in 8360 both

1493
01:07:48,079 --> 01:07:50,880
are valid algorithms in the sense that

1494
01:07:50,880 --> 01:07:51,760
both

1495
01:07:51,760 --> 01:07:56,559
given as a input produce a deterministic

1496
01:07:56,559 --> 01:07:59,680
output and which of the two algorithms

1497
01:07:59,680 --> 01:08:02,720
is better to some degree is

1498
01:08:02,720 --> 01:08:06,400
a subjective matter both arguably

1499
01:08:06,400 --> 01:08:09,760
provide a means to validate but

1500
01:08:09,760 --> 01:08:14,640
one compared to the other have different

1501
01:08:15,200 --> 01:08:19,198
behavioral characteristics in operations

1502
01:08:19,198 --> 01:08:22,399
and ben and i prefer a little bit less

1503
01:08:22,399 --> 01:08:25,120
operational brittleness as long as it

1504
01:08:25,120 --> 01:08:26,000
does not come

1505
01:08:26,000 --> 01:08:29,040
at the expense of security so from this

1506
01:08:29,040 --> 01:08:29,759
perspective

1507
01:08:29,759 --> 01:08:33,120
i think the 8360 algorithm

1508
01:08:33,120 --> 01:08:36,719
is superior to the algorithm that was

1509
01:08:36,719 --> 01:08:39,439
specified earlier on

1510
01:08:39,439 --> 01:08:40,719
and we have to keep in mind that

1511
01:08:40,719 --> 01:08:43,520
validity is in the eye of the beholder

1512
01:08:43,520 --> 01:08:46,799
cas do not control what

1513
01:08:46,799 --> 01:08:52,399
the rps are running on their servers

1514
01:08:52,399 --> 01:08:55,600
the rc 8360 algorithm does not

1515
01:08:55,600 --> 01:08:58,479
introduce weaknesses in my opinion and

1516
01:08:58,479 --> 01:08:59,120
the

1517
01:08:59,120 --> 01:09:03,359
offers of 8360 stipulated this opinion

1518
01:09:03,359 --> 01:09:07,839
in the security consideration section

1519
01:09:08,319 --> 01:09:10,480
so

1520
01:09:11,679 --> 01:09:15,839
i think that the rvrs or any other ca

1521
01:09:15,839 --> 01:09:18,960
don't need to dictate how an rpki

1522
01:09:18,960 --> 01:09:20,158
relying party

1523
01:09:20,158 --> 01:09:24,238
validates the information fetched

1524
01:09:24,238 --> 01:09:27,520
the relying parties will execute a

1525
01:09:27,520 --> 01:09:29,600
validation algorithm which may or may

1526
01:09:29,600 --> 01:09:30,960
not contain

1527
01:09:30,960 --> 01:09:34,319
defects and only the relying parties

1528
01:09:34,319 --> 01:09:36,719
are in a position to choose which

1529
01:09:36,719 --> 01:09:37,759
algorithm

1530
01:09:37,759 --> 01:09:39,679
or which software they want to use to

1531
01:09:39,679 --> 01:09:42,960
validate the rpi data

1532
01:09:42,960 --> 01:09:45,359
requiring certificate authorities to set

1533
01:09:45,359 --> 01:09:46,960
a new policy oid

1534
01:09:46,960 --> 01:09:49,439
in order for relying parties to begin

1535
01:09:49,439 --> 01:09:50,080
using an

1536
01:09:50,080 --> 01:09:54,000
improved algorithm to me appears as a

1537
01:09:54,000 --> 01:09:55,760
unnecessary step

1538
01:09:55,760 --> 01:09:58,800
because as is evident from the 8360

1539
01:09:58,800 --> 01:09:59,520
document

1540
01:09:59,520 --> 01:10:02,800
there is a ton of duplication in terms

1541
01:10:02,800 --> 01:10:04,400
of the

1542
01:10:04,400 --> 01:10:07,679
the extensions used

1543
01:10:07,679 --> 01:10:10,239
to achieve the deployment of the

1544
01:10:10,239 --> 01:10:12,640
improved algorithm

1545
01:10:12,640 --> 01:10:15,679
in other words i think that

1546
01:10:15,679 --> 01:10:18,640
the profile agility procedure described

1547
01:10:18,640 --> 01:10:19,560
in

1548
01:10:19,560 --> 01:10:22,400
rcd6487 has

1549
01:10:22,400 --> 01:10:24,719
caused a change that would be perceived

1550
01:10:24,719 --> 01:10:26,640
by many operators as backwards

1551
01:10:26,640 --> 01:10:27,760
compatible

1552
01:10:27,760 --> 01:10:30,880
to become a breaking change all for no

1553
01:10:30,880 --> 01:10:32,000
obvious

1554
01:10:32,000 --> 01:10:34,560
benefit

1555
01:10:35,040 --> 01:10:37,600
so how do we dig ourselves out of this

1556
01:10:37,600 --> 01:10:40,239
situation

1557
01:10:40,480 --> 01:10:43,840
it is in the ietf

1558
01:10:43,840 --> 01:10:46,640
process possible to perform the

1559
01:10:46,640 --> 01:10:48,560
following

1560
01:10:48,560 --> 01:10:52,000
plan a new document

1561
01:10:52,000 --> 01:10:55,840
can update the 6487

1562
01:10:55,840 --> 01:10:58,800
rfc and replace the algorithm with a

1563
01:10:58,800 --> 01:11:00,159
different algorithm

1564
01:11:00,159 --> 01:11:04,000
repurposing existing code points

1565
01:11:04,000 --> 01:11:06,080
then furthermore i would suggest that

1566
01:11:06,080 --> 01:11:07,040
the

1567
01:11:07,040 --> 01:11:10,400
profile agility section which

1568
01:11:10,400 --> 01:11:14,480
caused us to end up in a rca 360

1569
01:11:14,480 --> 01:11:18,000
undeployable scenario is removed

1570
01:11:18,000 --> 01:11:20,800
as it is not clear that this procedure

1571
01:11:20,800 --> 01:11:21,440
is

1572
01:11:21,440 --> 01:11:24,560
correct to begin with i think

1573
01:11:24,560 --> 01:11:28,640
future work will need to re-evaluate

1574
01:11:28,640 --> 01:11:32,320
whether the the agility

1575
01:11:32,320 --> 01:11:36,400
procedure is appropriate or not

1576
01:11:36,400 --> 01:11:39,600
and as a consequence

1577
01:11:39,600 --> 01:11:43,440
of updating 6487

1578
01:11:43,440 --> 01:11:47,679
there is no longer a need for rc-8360

1579
01:11:47,679 --> 01:11:52,400
therefore i think it can be deprecated

1580
01:11:52,560 --> 01:11:54,800
in all of this the rares and

1581
01:11:54,800 --> 01:11:56,239
intermediate cas

1582
01:11:56,239 --> 01:12:00,239
are not required to take any action

1583
01:12:00,560 --> 01:12:02,800
from an implementation perspective i

1584
01:12:02,800 --> 01:12:05,199
think this is very doable

1585
01:12:05,199 --> 01:12:08,640
these are three examples to achieve

1586
01:12:08,640 --> 01:12:11,440
such applying the new algorithm to

1587
01:12:11,440 --> 01:12:14,080
existing objects

1588
01:12:14,080 --> 01:12:16,880
all three examples should be fairly

1589
01:12:16,880 --> 01:12:20,640
readable and straightforward

1590
01:12:21,040 --> 01:12:24,080
and what this means to me is that only a

1591
01:12:24,080 --> 01:12:25,920
handful of people need to commit

1592
01:12:25,920 --> 01:12:29,120
changes for the improved algorithm to

1593
01:12:29,120 --> 01:12:30,159
propagate

1594
01:12:30,159 --> 01:12:33,040
throughout the ecosystem i for one would

1595
01:12:33,040 --> 01:12:34,320
be very

1596
01:12:34,320 --> 01:12:37,280
keen on getting my hands on a validator

1597
01:12:37,280 --> 01:12:39,360
that uses the new algorithm rather than

1598
01:12:39,360 --> 01:12:40,159
the old

1599
01:12:40,159 --> 01:12:43,520
algorithm so

1600
01:12:43,520 --> 01:12:46,800
what about existing work and i i do

1601
01:12:46,800 --> 01:12:48,840
think that as an rpg community we have

1602
01:12:48,840 --> 01:12:51,040
wasted an incredible amount

1603
01:12:51,040 --> 01:12:54,239
of time especially considering that some

1604
01:12:54,239 --> 01:12:58,480
already knew before rc 6487 was

1605
01:12:58,480 --> 01:12:59,360
published

1606
01:12:59,360 --> 01:13:01,120
that there would be operational issues

1607
01:13:01,120 --> 01:13:03,280
down the road

1608
01:13:03,280 --> 01:13:06,640
so the x509

1609
01:13:06,640 --> 01:13:10,159
policy extension is not wasted

1610
01:13:10,159 --> 01:13:13,360
it can be used in the future what is

1611
01:13:13,360 --> 01:13:17,480
wasted is the policy oid associated with

1612
01:13:17,480 --> 01:13:21,120
8360 but the good news is this comes

1613
01:13:21,120 --> 01:13:22,320
from a

1614
01:13:22,320 --> 01:13:26,000
infinite code point space

1615
01:13:26,000 --> 01:13:28,080
and there is no as far as i know

1616
01:13:28,080 --> 01:13:30,960
existing deployment of the code point so

1617
01:13:30,960 --> 01:13:34,800
deprecating this code point i think is

1618
01:13:34,800 --> 01:13:38,000
has no downsides and for most relying

1619
01:13:38,000 --> 01:13:40,640
party implementations it would mean that

1620
01:13:40,640 --> 01:13:43,760
a bunch of code can be deleted which

1621
01:13:43,760 --> 01:13:47,840
might help simplify the code base

1622
01:13:49,120 --> 01:13:52,719
so with all this in mind

1623
01:13:52,719 --> 01:13:54,880
and the draft itself which i do

1624
01:13:54,880 --> 01:13:55,840
encourage people

1625
01:13:55,840 --> 01:13:59,199
to to read it is a complicated draft

1626
01:13:59,199 --> 01:14:00,080
because it

1627
01:14:00,080 --> 01:14:03,120
deprecates and updates multiple

1628
01:14:03,120 --> 01:14:06,320
other documents but

1629
01:14:06,320 --> 01:14:09,920
fortunately as shown in this slide

1630
01:14:09,920 --> 01:14:11,840
if you click any of these urls you will

1631
01:14:11,840 --> 01:14:14,640
find that the changes required in code

1632
01:14:14,640 --> 01:14:17,360
are very simple compared to what is

1633
01:14:17,360 --> 01:14:18,000
required

1634
01:14:18,000 --> 01:14:22,000
in the ietf process context and i

1635
01:14:22,000 --> 01:14:25,440
want to implore on people that we are

1636
01:14:25,440 --> 01:14:28,880
running a live system this is

1637
01:14:28,880 --> 01:14:30,960
deployed in production and this means

1638
01:14:30,960 --> 01:14:32,960
that any changes

1639
01:14:32,960 --> 01:14:37,440
such as a validation algorithm change

1640
01:14:37,440 --> 01:14:39,920
need to be absolutely incrementally

1641
01:14:39,920 --> 01:14:41,120
deployable

1642
01:14:41,120 --> 01:14:44,840
without the lockstep dance that the

1643
01:14:44,840 --> 01:14:48,800
8360 rfc

1644
01:14:48,880 --> 01:14:51,679
was forced to follow so we're changing

1645
01:14:51,679 --> 01:14:53,600
the tires on a live system

1646
01:14:53,600 --> 01:14:57,840
and i do think it is possible but it is

1647
01:14:57,840 --> 01:15:00,820
a complicated dance so

1648
01:15:00,820 --> 01:15:01,920
[Music]

1649
01:15:01,920 --> 01:15:05,840
with that we have time for questions and

1650
01:15:05,840 --> 01:15:11,120
comments anybody

1651
01:15:11,120 --> 01:15:15,040
yeah i would love to hear feedback on

1652
01:15:22,840 --> 01:15:25,840
this

1653
01:15:28,880 --> 01:15:31,600
seeing no other questions uh yo your

1654
01:15:31,600 --> 01:15:32,480
request to

1655
01:15:32,480 --> 01:15:35,280
start the code point early allocation we

1656
01:15:35,280 --> 01:15:36,880
can do that

1657
01:15:36,880 --> 01:15:41,520
um shortly yes

1658
01:15:42,320 --> 01:15:45,280
the iana early code point allocation is

1659
01:15:45,280 --> 01:15:45,679
for

1660
01:15:45,679 --> 01:15:49,120
rpki signed checklists this presentation

1661
01:15:49,120 --> 01:15:52,719
is about the rpk

1662
01:15:52,719 --> 01:15:56,080
validation algorithm update and

1663
01:15:56,080 --> 01:15:58,560
this is a separate task for the chairs

1664
01:15:58,560 --> 01:15:59,520
to

1665
01:15:59,520 --> 01:16:01,600
consider starting a call for working

1666
01:16:01,600 --> 01:16:07,840
group adoption

1667
01:16:09,520 --> 01:16:12,719
okay did you

1668
01:16:12,719 --> 01:16:14,159
already email the mailing list for that

1669
01:16:14,159 --> 01:16:16,480
request i didn't look

1670
01:16:16,480 --> 01:16:18,960
i have not i will do so shortly thank

1671
01:16:18,960 --> 01:16:19,600
you

1672
01:16:19,600 --> 01:16:22,480
okay thanks

1673
01:16:29,120 --> 01:16:31,360
i think the next person up is alex

1674
01:16:31,360 --> 01:16:33,760
asimov i forgot to ask if alex wants to

1675
01:16:33,760 --> 01:16:37,120
run his own presentation or not

1676
01:16:37,280 --> 01:16:40,640
yes i need your permission perfect

1677
01:16:40,640 --> 01:16:49,840
you have it

1678
01:16:51,360 --> 01:16:54,159
hope you can see it

1679
01:16:54,560 --> 01:16:57,280
hi everyone my name is alexander azimov

1680
01:16:57,280 --> 01:16:58,400
i work for yandex

1681
01:16:58,400 --> 01:17:01,679
and here is an update on the asp

1682
01:17:01,679 --> 01:17:05,040
drafts progress

1683
01:17:10,080 --> 01:17:13,120
there were major and minor changes

1684
01:17:13,120 --> 01:17:15,360
this happened with the documents since

1685
01:17:15,360 --> 01:17:16,400
last meeting

1686
01:17:16,400 --> 01:17:18,159
i'm not going to describe all the

1687
01:17:18,159 --> 01:17:19,840
changes hope you have read

1688
01:17:19,840 --> 01:17:22,080
the document and agree that its

1689
01:17:22,080 --> 01:17:22,960
readability

1690
01:17:22,960 --> 01:17:26,480
has improved if you haven't read

1691
01:17:26,480 --> 01:17:28,719
the latest document you still have a

1692
01:17:28,719 --> 01:17:30,000
chance the next update

1693
01:17:30,000 --> 01:17:32,480
will be in a month the next three

1694
01:17:32,480 --> 01:17:34,080
bullets i'm going to discuss in more

1695
01:17:34,080 --> 01:17:36,480
detail

1696
01:17:36,640 --> 01:17:40,560
first we reach a synchronization point

1697
01:17:40,560 --> 01:17:40,960
with

1698
01:17:40,960 --> 01:17:44,480
rtr protocol specification and now rtr

1699
01:17:44,480 --> 01:17:49,040
pdu is in sync with asp profile

1700
01:17:49,040 --> 01:17:53,120
though i'm not author of 8

1701
01:17:53,120 --> 01:17:56,880
2 0 1 0 with this i'd like to highlight

1702
01:17:56,880 --> 01:18:01,199
key requirements for asp processing

1703
01:18:01,199 --> 01:18:04,080
the cache must create a union of

1704
01:18:04,080 --> 01:18:06,159
providers from all available

1705
01:18:06,159 --> 01:18:08,960
asp records in advance before it sends

1706
01:18:08,960 --> 01:18:10,000
the data

1707
01:18:10,000 --> 01:18:13,199
it must send the union of providers

1708
01:18:13,199 --> 01:18:16,239
in a single pdu and router

1709
01:18:16,239 --> 01:18:19,440
must support the auto emissivity

1710
01:18:19,440 --> 01:18:22,480
of these updates this is crucial to

1711
01:18:22,480 --> 01:18:23,679
prevent

1712
01:18:23,679 --> 01:18:27,840
race conditions

1713
01:18:28,880 --> 01:18:31,360
and another major update covers issues

1714
01:18:31,360 --> 01:18:33,040
with iss

1715
01:18:33,040 --> 01:18:36,719
the behavior of access bring ambiguity

1716
01:18:36,719 --> 01:18:40,239
to bgp routing some of them believe that

1717
01:18:40,239 --> 01:18:42,640
they are not part of routing process

1718
01:18:42,640 --> 01:18:44,800
so they don't add their autonomous

1719
01:18:44,800 --> 01:18:45,920
system number uh

1720
01:18:45,920 --> 01:18:50,239
to the path some of them put it inside

1721
01:18:50,239 --> 01:18:52,080
some of them support community with

1722
01:18:52,080 --> 01:18:53,520
prepainting their own

1723
01:18:53,520 --> 01:18:56,640
add-on system number some of them don't

1724
01:18:56,640 --> 01:19:00,560
and it makes the process of verification

1725
01:19:00,560 --> 01:19:03,920
much harder and

1726
01:19:03,920 --> 01:19:07,199
for those who forgot i love drawings and

1727
01:19:07,199 --> 01:19:09,199
there are special terms to reach these

1728
01:19:09,199 --> 01:19:10,400
drawings

1729
01:19:10,400 --> 01:19:14,000
if you circle on top of another

1730
01:19:14,000 --> 01:19:17,120
it means that the one circle on the top

1731
01:19:17,120 --> 01:19:20,560
is provider of the one at the bottom

1732
01:19:20,560 --> 01:19:22,960
if there are there are circles on the

1733
01:19:22,960 --> 01:19:24,320
same level

1734
01:19:24,320 --> 01:19:27,360
they are appearing with each other and

1735
01:19:27,360 --> 01:19:30,480
the errors most important they show the

1736
01:19:30,480 --> 01:19:33,920
direction of asp

1737
01:19:33,920 --> 01:19:36,320
verification procedure note the

1738
01:19:36,320 --> 01:19:38,960
direction of the advertisement

1739
01:19:38,960 --> 01:19:42,159
so let's move on

1740
01:19:42,560 --> 01:19:45,760
here are two scenarios on the left you

1741
01:19:45,760 --> 01:19:47,360
can see a scenario with

1742
01:19:47,360 --> 01:19:50,239
transparent eyes and on the right you

1743
01:19:50,239 --> 01:19:51,199
can see

1744
01:19:51,199 --> 01:19:54,000
ikes in the path the validation of the

1745
01:19:54,000 --> 01:19:54,960
left is simple

1746
01:19:54,960 --> 01:19:59,120
you just need to check pair one two

1747
01:19:59,120 --> 01:20:01,040
and it is the correct pair and

1748
01:20:01,040 --> 01:20:04,080
everything is valid

1749
01:20:04,080 --> 01:20:06,480
on the right side the situation is a bit

1750
01:20:06,480 --> 01:20:07,120
harder

1751
01:20:07,120 --> 01:20:10,480
because two

1752
01:20:10,480 --> 01:20:13,760
uh haven't authorized uh autonomous

1753
01:20:13,760 --> 01:20:14,400
system

1754
01:20:14,400 --> 01:20:16,000
that belongs to the internet exchange

1755
01:20:16,000 --> 01:20:18,000
point to advertise

1756
01:20:18,000 --> 01:20:20,400
it to its upstream providers or peers

1757
01:20:20,400 --> 01:20:21,120
and so on

1758
01:20:21,120 --> 01:20:23,840
so it's a very specific situation where

1759
01:20:23,840 --> 01:20:24,560
we have

1760
01:20:24,560 --> 01:20:27,760
another system in the middle which acts

1761
01:20:27,760 --> 01:20:31,360
like a provider but it's not mentioned

1762
01:20:31,360 --> 01:20:36,880
in the list of providers in the asp

1763
01:20:36,880 --> 01:20:41,520
but we can imagine that 2 is appear

1764
01:20:41,520 --> 01:20:44,560
to alex and 3

1765
01:20:44,560 --> 01:20:47,280
is its customer in this case we can

1766
01:20:47,280 --> 01:20:48,080
apply

1767
01:20:48,080 --> 01:20:52,000
a downstream verification procedure

1768
01:20:52,000 --> 01:20:55,120
and it will be fine so we will have

1769
01:20:55,120 --> 01:20:58,480
one two as a wallet two

1770
01:20:58,480 --> 01:21:02,239
hikes is as invalid but

1771
01:21:02,239 --> 01:21:04,560
if we apply downstream procedure it's

1772
01:21:04,560 --> 01:21:06,239
okay because it just highlights at the

1773
01:21:06,239 --> 01:21:07,120
end of

1774
01:21:07,120 --> 01:21:10,560
upstream uh segment and everything

1775
01:21:10,560 --> 01:21:14,159
works fine and in previous versions

1776
01:21:14,159 --> 01:21:18,000
uh of the document

1777
01:21:18,000 --> 01:21:21,040
uh we suggested that

1778
01:21:21,040 --> 01:21:24,400
to make its general policy just apply

1779
01:21:24,400 --> 01:21:27,440
uh to all routes received

1780
01:21:27,440 --> 01:21:31,679
from the route server uh downstream uh

1781
01:21:31,679 --> 01:21:34,560
verification procedure unfortunately

1782
01:21:34,560 --> 01:21:35,920
there was a

1783
01:21:35,920 --> 01:21:40,880
shot coming and here it is

1784
01:21:40,880 --> 01:21:43,280
the problem is that it was limiting the

1785
01:21:43,280 --> 01:21:44,960
opportunity of

1786
01:21:44,960 --> 01:21:48,159
ixp members to detect route legs

1787
01:21:48,159 --> 01:21:49,920
the problem occurs on the left side

1788
01:21:49,920 --> 01:21:51,199
where the

1789
01:21:51,199 --> 01:21:54,480
transparent x is presented

1790
01:21:54,480 --> 01:21:57,520
in this case if we apply a downstream

1791
01:21:57,520 --> 01:22:00,239
verification procedure we will have one

1792
01:22:00,239 --> 01:22:01,040
two

1793
01:22:01,040 --> 01:22:04,159
as invalid but it's okay well it's not

1794
01:22:04,159 --> 01:22:04,960
okay

1795
01:22:04,960 --> 01:22:07,760
so um

1796
01:22:08,080 --> 01:22:10,960
on the right side everything is fine but

1797
01:22:10,960 --> 01:22:12,080
on the left side

1798
01:22:12,080 --> 01:22:15,600
three is unable to detect a leak

1799
01:22:15,600 --> 01:22:19,600
that happens uh on the on the other side

1800
01:22:19,600 --> 01:22:20,320
of

1801
01:22:20,320 --> 01:22:24,639
transparent eyes so we decided to change

1802
01:22:24,639 --> 01:22:27,920
uh the procedure and to use the presence

1803
01:22:27,920 --> 01:22:28,400
of

1804
01:22:28,400 --> 01:22:31,600
the ix in the path as a token

1805
01:22:31,600 --> 01:22:34,880
so if uh

1806
01:22:34,880 --> 01:22:37,040
atom system that belongs to ix is

1807
01:22:37,040 --> 01:22:38,400
present in the path

1808
01:22:38,400 --> 01:22:41,199
we will apply a downstream verification

1809
01:22:41,199 --> 01:22:42,560
procedure

1810
01:22:42,560 --> 01:22:45,120
if it is received without hikes in the

1811
01:22:45,120 --> 01:22:45,760
path

1812
01:22:45,760 --> 01:22:48,880
we will apply a upstream

1813
01:22:48,880 --> 01:22:51,600
rectification procedure this way of

1814
01:22:51,600 --> 01:22:53,040
processing looks both

1815
01:22:53,040 --> 01:22:56,480
safe and efficient in terms of

1816
01:22:56,480 --> 01:22:59,840
detection so this is

1817
01:22:59,840 --> 01:23:02,239
the magic change that happened with the

1818
01:23:02,239 --> 01:23:02,880
documents

1819
01:23:02,880 --> 01:23:04,960
for from the last version and i believe

1820
01:23:04,960 --> 01:23:06,000
it's quite important

1821
01:23:06,000 --> 01:23:09,120
because the ability to distinguish

1822
01:23:09,120 --> 01:23:12,320
to detect leaks to distinguish invalid

1823
01:23:12,320 --> 01:23:13,360
parts from

1824
01:23:13,360 --> 01:23:16,639
anything else is crucial and let's

1825
01:23:16,639 --> 01:23:19,199
jump to another observation that was

1826
01:23:19,199 --> 01:23:20,639
found by

1827
01:23:20,639 --> 01:23:22,880
jakob and sriram and already discussed

1828
01:23:22,880 --> 01:23:25,040
in the mailing list

1829
01:23:25,040 --> 01:23:29,120
please look at these three scenarios

1830
01:23:29,120 --> 01:23:32,719
uh in all of these scenarios i found

1831
01:23:32,719 --> 01:23:37,199
back in this uh three is uh receiving

1832
01:23:37,199 --> 01:23:39,920
prefixes from its provider from its

1833
01:23:39,920 --> 01:23:40,639
provider with

1834
01:23:40,639 --> 01:23:44,320
with analysis number two

1835
01:23:44,639 --> 01:23:48,000
and it proves out that it doesn't really

1836
01:23:48,000 --> 01:23:50,639
matter the appearing relation between

1837
01:23:50,639 --> 01:23:51,040
one

1838
01:23:51,040 --> 01:23:53,760
and two it may be custom it may be

1839
01:23:53,760 --> 01:23:54,800
peering it may be

1840
01:23:54,800 --> 01:23:57,360
provider

1841
01:23:59,840 --> 01:24:03,280
so with any kind of p relation between

1842
01:24:03,280 --> 01:24:06,639
one and two this scenario ends up with a

1843
01:24:06,639 --> 01:24:08,400
valid

1844
01:24:08,400 --> 01:24:10,639
and the observation that was found that

1845
01:24:10,639 --> 01:24:11,600
so if

1846
01:24:11,600 --> 01:24:15,920
the relation doesn't really matter um

1847
01:24:15,920 --> 01:24:16,639
even if

1848
01:24:16,639 --> 01:24:20,480
uh one haven't created asp so the pair

1849
01:24:20,480 --> 01:24:24,000
one two is unknown we can still treat

1850
01:24:24,000 --> 01:24:27,920
this kind of paths as valid

1851
01:24:27,920 --> 01:24:32,000
so to make it clear this doesn't improve

1852
01:24:32,000 --> 01:24:35,440
leak detection though at high

1853
01:24:35,440 --> 01:24:39,199
adoption rate it can be useful by

1854
01:24:39,199 --> 01:24:41,600
improving the number of valids comparing

1855
01:24:41,600 --> 01:24:43,760
comparing to unknowns

1856
01:24:43,760 --> 01:24:45,600
there are already a couple of ways to

1857
01:24:45,600 --> 01:24:47,040
implement

1858
01:24:47,040 --> 01:24:49,840
this logic we discussed it in a small

1859
01:24:49,840 --> 01:24:52,320
group of lists

1860
01:24:52,320 --> 01:24:55,120
but the discussion about semantics that

1861
01:24:55,120 --> 01:24:55,920
represents

1862
01:24:55,920 --> 01:24:59,360
this changing logic uh looks even more

1863
01:24:59,360 --> 01:25:02,480
important at the moment

1864
01:25:02,880 --> 01:25:06,239
so here is the the plan for today uh

1865
01:25:06,239 --> 01:25:08,639
we need to finish the discussion about

1866
01:25:08,639 --> 01:25:10,800
valid states in case of

1867
01:25:10,800 --> 01:25:12,639
downstream paths or what we just

1868
01:25:12,639 --> 01:25:14,080
discussed uh

1869
01:25:14,080 --> 01:25:16,560
it may result in important awarding

1870
01:25:16,560 --> 01:25:17,280
changing

1871
01:25:17,280 --> 01:25:21,920
inside the document we need an updated

1872
01:25:21,920 --> 01:25:25,520
eight two one zero b's

1873
01:25:25,520 --> 01:25:29,040
and for some reason it's missing and

1874
01:25:29,040 --> 01:25:32,639
i think with this document in place so

1875
01:25:32,639 --> 01:25:34,960
we will be able to start working group

1876
01:25:34,960 --> 01:25:37,760
lasko for all documents that are related

1877
01:25:37,760 --> 01:25:41,679
to asp

1878
01:25:41,679 --> 01:25:45,360
i think that's all any questions

1879
01:25:49,280 --> 01:25:52,320
there's a randy in queue

1880
01:25:52,719 --> 01:25:56,320
yeah the reason you cannot find 8210

1881
01:25:56,320 --> 01:25:58,239
bits is because you're looking for a

1882
01:25:58,239 --> 01:26:00,239
ymbk document

1883
01:26:00,239 --> 01:26:03,600
and it's an ietf document

1884
01:26:03,600 --> 01:26:08,080
ah it is waiting last call

1885
01:26:08,080 --> 01:26:12,719
for you to stop changing this draft

1886
01:26:12,880 --> 01:26:15,920
okay great because for some reason i was

1887
01:26:15,920 --> 01:26:19,120
looking for this document

1888
01:26:19,120 --> 01:26:22,239
and i was finally was finding only zero

1889
01:26:22,239 --> 01:26:23,440
zero

1890
01:26:23,440 --> 01:26:26,800
with ymbk it's good

1891
01:26:26,800 --> 01:26:30,159
that i missed it but it is exist

1892
01:26:33,440 --> 01:26:37,839
any other questions

1893
01:26:45,600 --> 01:26:47,120
i don't think there's any other

1894
01:26:47,120 --> 01:26:49,440
questions in queue

1895
01:26:49,440 --> 01:26:53,360
okay so i'll pass the ball to sram he

1896
01:26:53,360 --> 01:26:55,520
will give you more details on the

1897
01:26:55,520 --> 01:27:00,080
topic that we just discussed

1898
01:27:00,800 --> 01:27:04,239
and i hope the next update uh

1899
01:27:04,239 --> 01:27:05,920
to the document will be the last one

1900
01:27:05,920 --> 01:27:09,280
before working group last call

1901
01:27:09,440 --> 01:27:12,000
okay sure you should be able to present

1902
01:27:12,000 --> 01:27:13,199
or i thought so

1903
01:27:13,199 --> 01:27:18,239
okay now you can yeah um

1904
01:27:18,239 --> 01:27:20,080
and as a short reminder we have about 30

1905
01:27:20,080 --> 01:27:21,920
minutes left so

1906
01:27:21,920 --> 01:27:23,199
if you want questions make sure to get

1907
01:27:23,199 --> 01:27:26,159
in in under the 30 minute wire

1908
01:27:26,159 --> 01:27:30,000
sure thank you um

1909
01:27:30,000 --> 01:27:33,520
you can see the my

1910
01:27:33,520 --> 01:27:36,000
pdf

1911
01:27:37,280 --> 01:27:40,639
um so uh this uh this um

1912
01:27:40,639 --> 01:27:44,840
work is done jointly with jacob

1913
01:27:44,840 --> 01:27:46,960
and yeah it's not

1914
01:27:46,960 --> 01:27:48,560
quite displayed yet i think it might be

1915
01:27:48,560 --> 01:27:50,239
asking you to

1916
01:27:50,239 --> 01:28:01,520
accept the screen share blah blah blah

1917
01:28:01,520 --> 01:28:03,840
share your screen your entire screen

1918
01:28:03,840 --> 01:28:06,239
application window

1919
01:28:06,239 --> 01:28:08,559
okay

1920
01:28:11,760 --> 01:28:14,960
is it good now perfect thank you

1921
01:28:14,960 --> 01:28:18,480
thank you um yes thank you so this is

1922
01:28:18,480 --> 01:28:19,440
sriram

1923
01:28:19,440 --> 01:28:22,480
uh this is joint work with jacob uh

1924
01:28:22,480 --> 01:28:24,400
we've been sharing these slides uh

1925
01:28:24,400 --> 01:28:26,480
for the last three weeks or so on the

1926
01:28:26,480 --> 01:28:28,080
siderocks list

1927
01:28:28,080 --> 01:28:30,719
several people have taken interest i

1928
01:28:30,719 --> 01:28:31,920
looked over the slides

1929
01:28:31,920 --> 01:28:33,920
and we got some reviews some comments

1930
01:28:33,920 --> 01:28:35,040
back uh

1931
01:28:35,040 --> 01:28:37,760
in particular uh alexander and ben

1932
01:28:37,760 --> 01:28:39,520
madison have taken

1933
01:28:39,520 --> 01:28:42,639
as well as tas uh from ripe

1934
01:28:42,639 --> 01:28:45,600
they have taken a close look at these uh

1935
01:28:45,600 --> 01:28:48,000
um

1936
01:28:48,000 --> 01:28:50,880
slides uh and um in general there is

1937
01:28:50,880 --> 01:28:52,480
agreement that yeah yes we have an

1938
01:28:52,480 --> 01:28:53,679
opportunity to

1939
01:28:53,679 --> 01:28:58,800
improve the uh asphalt validation

1940
01:28:59,600 --> 01:29:02,400
next slide

1941
01:29:06,960 --> 01:29:11,840
one moment

1942
01:29:15,600 --> 01:29:19,520
yeah that works better so

1943
01:29:19,520 --> 01:29:22,080
the key takeaways from this talk are the

1944
01:29:22,080 --> 01:29:23,040
following

1945
01:29:23,040 --> 01:29:26,159
uh the downstream aspart algorithm

1946
01:29:26,159 --> 01:29:29,040
there's an oversight in the draft as

1947
01:29:29,040 --> 01:29:30,480
alexander has already

1948
01:29:30,480 --> 01:29:33,920
mentioned and there is an opportunity to

1949
01:29:33,920 --> 01:29:36,960
to improve on that and that's

1950
01:29:36,960 --> 01:29:39,040
that's being done uh through some

1951
01:29:39,040 --> 01:29:41,280
private conversations uh between uh

1952
01:29:41,280 --> 01:29:44,800
jacob myself alexander and ben madison

1953
01:29:44,800 --> 01:29:46,960
um so that's that's going to be coming

1954
01:29:46,960 --> 01:29:48,560
forth uh soon

1955
01:29:48,560 --> 01:29:52,239
um the the connected so in this draft

1956
01:29:52,239 --> 01:29:55,360
we try to show that a correct algorithm

1957
01:29:55,360 --> 01:29:58,400
exists with exists with formal proof

1958
01:29:58,400 --> 01:30:00,960
and it classifies valid invalid and

1959
01:30:00,960 --> 01:30:02,639
unknown uh as paths

1960
01:30:02,639 --> 01:30:06,320
correctly um so it's um

1961
01:30:06,320 --> 01:30:08,320
uh we think that this i mean this

1962
01:30:08,320 --> 01:30:11,360
algorithm is also efficient because

1963
01:30:11,360 --> 01:30:14,400
um on later on when we when i present an

1964
01:30:14,400 --> 01:30:16,239
implementation procedure

1965
01:30:16,239 --> 01:30:19,440
uh there we strive to minimize the aspa

1966
01:30:19,440 --> 01:30:20,639
lookups

1967
01:30:20,639 --> 01:30:22,320
so this is an account that would be a

1968
01:30:22,320 --> 01:30:24,400
candidate way of implementing

1969
01:30:24,400 --> 01:30:27,600
uh this algorithm and as i know uh

1970
01:30:27,600 --> 01:30:30,480
uh are mentioned alexander and ben are

1971
01:30:30,480 --> 01:30:31,920
actively working

1972
01:30:31,920 --> 01:30:35,120
on versions of implementation

1973
01:30:35,120 --> 01:30:39,120
of this um

1974
01:30:39,120 --> 01:30:41,440
so to get started with uh this whole

1975
01:30:41,440 --> 01:30:43,520
idea of

1976
01:30:43,520 --> 01:30:44,880
checking i mean looking for the

1977
01:30:44,880 --> 01:30:48,400
correctness of the algorithm uh

1978
01:30:48,400 --> 01:30:51,760
it is very helpful to have a asp a hop

1979
01:30:51,760 --> 01:30:52,080
check

1980
01:30:52,080 --> 01:30:55,040
function a similar thing is also

1981
01:30:55,040 --> 01:30:56,880
mentioned in the current draft

1982
01:30:56,880 --> 01:30:59,600
but that it doesn't use like a give it a

1983
01:30:59,600 --> 01:31:00,239
name

1984
01:31:00,239 --> 01:31:02,800
here we are giving it a name uh that is

1985
01:31:02,800 --> 01:31:03,760
g

1986
01:31:03,760 --> 01:31:07,120
so g f a s i asj is p

1987
01:31:07,120 --> 01:31:10,880
if a s i it has a j as a provider

1988
01:31:10,880 --> 01:31:14,239
uh it is np if asi attests asj

1989
01:31:14,239 --> 01:31:18,080
as not a provider and n a if asi does

1990
01:31:18,080 --> 01:31:20,960
not have any spa no attestation

1991
01:31:20,960 --> 01:31:24,719
and if you have a hop from i to j

1992
01:31:24,719 --> 01:31:27,679
as in the middle and depending on

1993
01:31:27,679 --> 01:31:28,159
whether

1994
01:31:28,159 --> 01:31:31,199
i to j the g function the hawk check

1995
01:31:31,199 --> 01:31:32,400
function

1996
01:31:32,400 --> 01:31:36,000
is p or np or n a you have different

1997
01:31:36,000 --> 01:31:37,120
possibilities

1998
01:31:37,120 --> 01:31:40,159
for the for that hop so clearly if it is

1999
01:31:40,159 --> 01:31:40,800
p

2000
01:31:40,800 --> 01:31:44,000
only possibility is an up link a

2001
01:31:44,000 --> 01:31:45,840
customer to provider

2002
01:31:45,840 --> 01:31:48,560
and if it is np then it could be down or

2003
01:31:48,560 --> 01:31:49,199
lateral

2004
01:31:49,199 --> 01:31:52,400
appear to appear and if it is n a then

2005
01:31:52,400 --> 01:31:54,400
all three possibilities are

2006
01:31:54,400 --> 01:31:57,840
open up down or lateral so we'll use

2007
01:31:57,840 --> 01:31:59,120
this notation

2008
01:31:59,120 --> 01:32:03,120
in the in the discussion um

2009
01:32:03,120 --> 01:32:05,840
so this is the example that jacob

2010
01:32:05,840 --> 01:32:06,719
originally

2011
01:32:06,719 --> 01:32:10,880
uh mentioned in on the cider drops list

2012
01:32:10,880 --> 01:32:13,199
one and two have asps two and three

2013
01:32:13,199 --> 01:32:16,400
don't have asps

2014
01:32:17,199 --> 01:32:20,639
in this case clearly the path is valid

2015
01:32:20,639 --> 01:32:23,760
because one to two is a valid

2016
01:32:23,760 --> 01:32:26,159
valid customer to provider and three to

2017
01:32:26,159 --> 01:32:27,360
four is a valid

2018
01:32:27,360 --> 01:32:29,679
provider to customer in the down

2019
01:32:29,679 --> 01:32:30,719
direction

2020
01:32:30,719 --> 01:32:34,800
and the validating as is after four

2021
01:32:34,800 --> 01:32:36,880
so clearly the path is valid because it

2022
01:32:36,880 --> 01:32:38,800
doesn't matter between two and three

2023
01:32:38,800 --> 01:32:41,440
uh what uh what that link is whether it

2024
01:32:41,440 --> 01:32:43,760
is up down or l in all three cases

2025
01:32:43,760 --> 01:32:47,280
uh the uh the uh the yes path is valid

2026
01:32:47,280 --> 01:32:49,280
from the point of view of route leaks

2027
01:32:49,280 --> 01:32:51,600
from the point of view of um

2028
01:32:51,600 --> 01:32:55,120
um um of valley free

2029
01:32:55,120 --> 01:32:58,000
um so it's valid uh the current

2030
01:32:58,000 --> 01:32:58,880
algorithm

2031
01:32:58,880 --> 01:33:01,920
calls it unknown um so that's uh

2032
01:33:01,920 --> 01:33:04,159
that's something that we all agreed on

2033
01:33:04,159 --> 01:33:05,679
the next two slides

2034
01:33:05,679 --> 01:33:07,760
it's just another example where three

2035
01:33:07,760 --> 01:33:09,120
can have an aspa

2036
01:33:09,120 --> 01:33:13,280
and still the same thing happens

2037
01:33:13,280 --> 01:33:16,719
and and the third example

2038
01:33:16,719 --> 01:33:20,400
uh you can insert a number of sibling

2039
01:33:20,400 --> 01:33:22,320
relationships in the middle like three

2040
01:33:22,320 --> 01:33:23,920
to four uh

2041
01:33:23,920 --> 01:33:26,400
they are mutual transit they each have

2042
01:33:26,400 --> 01:33:28,960
asp aspa pointing to the other

2043
01:33:28,960 --> 01:33:32,159
as a as a provider so they are as a

2044
01:33:32,159 --> 01:33:33,679
result they are siblings

2045
01:33:33,679 --> 01:33:35,840
so you can insert any number of these

2046
01:33:35,840 --> 01:33:36,800
and these

2047
01:33:36,800 --> 01:33:38,639
the same thing happens as in the

2048
01:33:38,639 --> 01:33:40,400
previous two examples

2049
01:33:40,400 --> 01:33:43,600
uh the asp algorithm determines the path

2050
01:33:43,600 --> 01:33:44,639
to be unknown

2051
01:33:44,639 --> 01:33:49,280
but it is indeed valid uh in terms of

2052
01:33:49,280 --> 01:33:52,639
fixing that we make a few simple

2053
01:33:52,639 --> 01:33:56,400
uh design principles observations

2054
01:33:56,400 --> 01:33:58,480
um again we are focusing on the

2055
01:33:58,480 --> 01:33:59,920
downstream as path

2056
01:33:59,920 --> 01:34:04,400
only uh yes so here the first bullet is

2057
01:34:04,400 --> 01:34:07,600
valid if there is an up ramp of customer

2058
01:34:07,600 --> 01:34:09,440
to provider hops

2059
01:34:09,440 --> 01:34:12,000
on the left there is a down ramp of

2060
01:34:12,000 --> 01:34:14,639
provider to customer hops on the right

2061
01:34:14,639 --> 01:34:17,840
and those two hop up ramp and down ramp

2062
01:34:17,840 --> 01:34:19,360
are completely

2063
01:34:19,360 --> 01:34:22,800
verified based on aspa and in the middle

2064
01:34:22,800 --> 01:34:24,560
if you have no hops at all

2065
01:34:24,560 --> 01:34:27,280
they are a perfect inverted v these two

2066
01:34:27,280 --> 01:34:28,639
up ramp down ramp

2067
01:34:28,639 --> 01:34:30,719
or in the middle you have a single

2068
01:34:30,719 --> 01:34:32,000
lateral hop

2069
01:34:32,000 --> 01:34:34,880
that is i'm sorry a single hop that is

2070
01:34:34,880 --> 01:34:35,280
either

2071
01:34:35,280 --> 01:34:39,199
np or na in in that case the path is

2072
01:34:39,199 --> 01:34:40,239
valid

2073
01:34:40,239 --> 01:34:42,400
and the second bullet is making the same

2074
01:34:42,400 --> 01:34:44,480
observation in a slightly different

2075
01:34:44,480 --> 01:34:48,159
wording if every transit as has at least

2076
01:34:48,159 --> 01:34:51,040
one neighbor that attests it as a

2077
01:34:51,040 --> 01:34:52,239
provider

2078
01:34:52,239 --> 01:34:55,600
then the as path is valid so

2079
01:34:55,600 --> 01:34:57,760
the situation when the path is valid is

2080
01:34:57,760 --> 01:34:58,840
is absolutely

2081
01:34:58,840 --> 01:35:01,679
clear the next question is when is the

2082
01:35:01,679 --> 01:35:02,320
path

2083
01:35:02,320 --> 01:35:06,159
either invalid or unknown and

2084
01:35:06,159 --> 01:35:08,400
and the answer to that is that if you

2085
01:35:08,400 --> 01:35:10,480
have two or more hops

2086
01:35:10,480 --> 01:35:13,280
in the middle uh between the up ramp and

2087
01:35:13,280 --> 01:35:13,760
the

2088
01:35:13,760 --> 01:35:16,239
and the down ramp uh in the middle if

2089
01:35:16,239 --> 01:35:16,960
you have

2090
01:35:16,960 --> 01:35:19,760
two or more hops uh then the following

2091
01:35:19,760 --> 01:35:20,880
can be said and

2092
01:35:20,880 --> 01:35:23,360
and that helps to separate the invalid

2093
01:35:23,360 --> 01:35:24,880
from the unknown

2094
01:35:24,880 --> 01:35:28,560
uh if there are opposing values uh

2095
01:35:28,560 --> 01:35:32,080
so that is a np hop from left to right

2096
01:35:32,080 --> 01:35:35,199
and a subsequent np hop from

2097
01:35:35,199 --> 01:35:38,320
uh from right to left so one np hop from

2098
01:35:38,320 --> 01:35:40,239
left to right and another subsequent

2099
01:35:40,239 --> 01:35:43,520
np hop from

2100
01:35:43,520 --> 01:35:45,920
right to left then no matter what is in

2101
01:35:45,920 --> 01:35:46,639
between

2102
01:35:46,639 --> 01:35:49,040
uh there must be at least one valley in

2103
01:35:49,040 --> 01:35:51,920
the air's path and hence it is invalid

2104
01:35:51,920 --> 01:35:54,800
as the draft algorithm also recognizes

2105
01:35:54,800 --> 01:35:55,840
that

2106
01:35:55,840 --> 01:35:57,840
and if this is not the case then the

2107
01:35:57,840 --> 01:35:59,440
path is unknown

2108
01:35:59,440 --> 01:36:02,080
um so the key thing is this separation

2109
01:36:02,080 --> 01:36:04,000
of uh

2110
01:36:04,000 --> 01:36:07,199
of the path the the uh representation of

2111
01:36:07,199 --> 01:36:08,480
the path

2112
01:36:08,480 --> 01:36:11,520
in terms of a valid up up ramp uh up

2113
01:36:11,520 --> 01:36:12,800
ramp on the left

2114
01:36:12,800 --> 01:36:15,360
and a valid sequence of down down down

2115
01:36:15,360 --> 01:36:16,560
hops on the right

2116
01:36:16,560 --> 01:36:19,679
uh a down ramp and and at the top

2117
01:36:19,679 --> 01:36:22,239
if you have no hops at all three and

2118
01:36:22,239 --> 01:36:22,800
four

2119
01:36:22,800 --> 01:36:26,080
are are the same or you have a single

2120
01:36:26,080 --> 01:36:28,639
hop no more than one hop at the top

2121
01:36:28,639 --> 01:36:32,239
which is which is unknown or or not

2122
01:36:32,239 --> 01:36:35,520
c24 is not provided uh in either of

2123
01:36:35,520 --> 01:36:36,000
those

2124
01:36:36,000 --> 01:36:39,440
two cases uh the up uh update is

2125
01:36:39,440 --> 01:36:42,639
the path is perfectly valid

2126
01:36:42,639 --> 01:36:44,880
uh so you have either a perfect uh

2127
01:36:44,880 --> 01:36:45,760
inverted v

2128
01:36:45,760 --> 01:36:48,000
or you have an inverted v with with one

2129
01:36:48,000 --> 01:36:48,960
hop at the top

2130
01:36:48,960 --> 01:36:52,080
in both of those cases uh the the path

2131
01:36:52,080 --> 01:36:52,800
is valid

2132
01:36:52,800 --> 01:36:54,960
uh given that the up ramp and down ramp

2133
01:36:54,960 --> 01:36:56,800
have been verified to be correct

2134
01:36:56,800 --> 01:37:00,960
uh based on aspa uh so

2135
01:37:00,960 --> 01:37:03,040
moving to the next one uh this

2136
01:37:03,040 --> 01:37:05,600
representation helps in terms of

2137
01:37:05,600 --> 01:37:09,360
formulating the design problem

2138
01:37:09,360 --> 01:37:12,080
in a systematic way this is scale

2139
01:37:12,080 --> 01:37:15,360
representation of the downstream as path

2140
01:37:15,360 --> 01:37:18,840
as1 to asn is the whole as part

2141
01:37:18,840 --> 01:37:22,320
and on the left you have a series of

2142
01:37:22,320 --> 01:37:25,520
uh uh up uh up up up

2143
01:37:25,520 --> 01:37:28,560
uh pro customer to provider

2144
01:37:28,560 --> 01:37:31,040
hops uh all of them were are valid

2145
01:37:31,040 --> 01:37:32,000
according to

2146
01:37:32,000 --> 01:37:34,960
aspa on the right you have down down

2147
01:37:34,960 --> 01:37:35,920
down hops

2148
01:37:35,920 --> 01:37:38,800
l took n minus one and again all of

2149
01:37:38,800 --> 01:37:41,520
those are valid according to aspa

2150
01:37:41,520 --> 01:37:43,679
so once you have identified this valid

2151
01:37:43,679 --> 01:37:45,679
portion on the left and the valid four

2152
01:37:45,679 --> 01:37:48,480
portion on the right then uh you can

2153
01:37:48,480 --> 01:37:50,480
have peace of mind with regard to those

2154
01:37:50,480 --> 01:37:51,920
two ends

2155
01:37:51,920 --> 01:37:54,080
that allows you to focus in the middle

2156
01:37:54,080 --> 01:37:55,040
from k to

2157
01:37:55,040 --> 01:37:57,760
l and first thing we know is that the

2158
01:37:57,760 --> 01:37:59,199
very first one k 2 k

2159
01:37:59,199 --> 01:38:02,560
plus 1 is it's not a provider it is

2160
01:38:02,560 --> 01:38:05,600
it is either a nana or np

2161
01:38:05,600 --> 01:38:08,480
and likewise on the right side l to l

2162
01:38:08,480 --> 01:38:09,760
minus 1

2163
01:38:09,760 --> 01:38:12,239
again it's not a provider it is either n

2164
01:38:12,239 --> 01:38:13,040
a or lp

2165
01:38:13,040 --> 01:38:15,760
we know that for sure in the middle you

2166
01:38:15,760 --> 01:38:16,480
may have in

2167
01:38:16,480 --> 01:38:18,880
all these three possibilities provider n

2168
01:38:18,880 --> 01:38:19,520
a and b

2169
01:38:19,520 --> 01:38:22,960
doesn't matter uh so if so this is the

2170
01:38:22,960 --> 01:38:25,199
kind of representation we have to start

2171
01:38:25,199 --> 01:38:26,000
with

2172
01:38:26,000 --> 01:38:29,119
and an example of that representation

2173
01:38:29,119 --> 01:38:31,600
is this one where k is three and l is

2174
01:38:31,600 --> 01:38:32,719
six

2175
01:38:32,719 --> 01:38:37,199
and um um in this we show the asp is in

2176
01:38:37,199 --> 01:38:38,239
the middle

2177
01:38:38,239 --> 01:38:41,040
uh the three to four is either np or na

2178
01:38:41,040 --> 01:38:42,719
that is what breaks the

2179
01:38:42,719 --> 01:38:45,679
the the up ramp uh and then or

2180
01:38:45,679 --> 01:38:47,280
terminates the up ramp

2181
01:38:47,280 --> 01:38:50,800
uh six to five is uh is n a or np and

2182
01:38:50,800 --> 01:38:52,800
that is what terminates the

2183
01:38:52,800 --> 01:38:55,840
the down ramp so that is how we define k

2184
01:38:55,840 --> 01:38:59,520
and l uh case three l is six so in this

2185
01:38:59,520 --> 01:39:00,480
example

2186
01:39:00,480 --> 01:39:03,119
uh it naturally this is not going to be

2187
01:39:03,119 --> 01:39:03,679
valid

2188
01:39:03,679 --> 01:39:06,480
uh we cannot say that it is definitely

2189
01:39:06,480 --> 01:39:07,280
valid

2190
01:39:07,280 --> 01:39:09,920
uh it will either be invalid we will be

2191
01:39:09,920 --> 01:39:11,280
able to show that

2192
01:39:11,280 --> 01:39:14,639
three to six is uh has a

2193
01:39:14,639 --> 01:39:17,600
as a value-free violation or we will be

2194
01:39:17,600 --> 01:39:18,400
able to

2195
01:39:18,400 --> 01:39:21,119
show that it is a mix there are some uh

2196
01:39:21,119 --> 01:39:22,960
possible trajectories

2197
01:39:22,960 --> 01:39:25,520
between three and six that are valid and

2198
01:39:25,520 --> 01:39:26,000
there are

2199
01:39:26,000 --> 01:39:28,480
other possible trajectories between 3

2200
01:39:28,480 --> 01:39:29,360
and 6 that are

2201
01:39:29,360 --> 01:39:32,560
invalid in which case this middle

2202
01:39:32,560 --> 01:39:35,600
portion will be unknown as a result the

2203
01:39:35,600 --> 01:39:38,400
whole path will be unknown

2204
01:39:38,400 --> 01:39:41,679
so for that uh one more observation

2205
01:39:41,679 --> 01:39:43,760
before we go to the theorems

2206
01:39:43,760 --> 01:39:46,719
uh l is less than k it is perfect it is

2207
01:39:46,719 --> 01:39:48,719
possible and perfectly fine

2208
01:39:48,719 --> 01:39:50,880
uh that means that the up ramp and the

2209
01:39:50,880 --> 01:39:52,400
down ramp overlap

2210
01:39:52,400 --> 01:39:56,880
and that happens when you have a sibling

2211
01:39:56,880 --> 01:39:59,679
hops in the in the middle and so no

2212
01:39:59,679 --> 01:40:00,560
issue with that

2213
01:40:00,560 --> 01:40:04,000
and the algorithm would still be fine uh

2214
01:40:04,000 --> 01:40:06,239
so just to take a quick look at the

2215
01:40:06,239 --> 01:40:08,000
theorems based on what we have

2216
01:40:08,000 --> 01:40:11,440
discussed so far uh the theorems kind of

2217
01:40:11,440 --> 01:40:12,480
start to

2218
01:40:12,480 --> 01:40:15,360
emerge as like obvious pretty much but

2219
01:40:15,360 --> 01:40:16,080
we have

2220
01:40:16,080 --> 01:40:19,760
proof uh in the appendix in the

2221
01:40:19,760 --> 01:40:24,239
in the backup slides the proof is given

2222
01:40:24,320 --> 01:40:26,880
so the first theorem says that if you

2223
01:40:26,880 --> 01:40:28,159
have

2224
01:40:28,159 --> 01:40:31,280
l minus k less or equal to 1 then the

2225
01:40:31,280 --> 01:40:32,800
path is valid for sure

2226
01:40:32,800 --> 01:40:34,719
and that is the only if and only

2227
01:40:34,719 --> 01:40:37,280
condition under which the path is valid

2228
01:40:37,280 --> 01:40:39,920
and if l minus k is greater than 2 then

2229
01:40:39,920 --> 01:40:42,639
the path cannot be valid for sure

2230
01:40:42,639 --> 01:40:44,960
but it but it is either unknown or

2231
01:40:44,960 --> 01:40:46,400
invalid

2232
01:40:46,400 --> 01:40:49,440
theorem 2 further helps us

2233
01:40:49,440 --> 01:40:52,000
by by differentiating between the

2234
01:40:52,000 --> 01:40:54,000
unknown and the invalid

2235
01:40:54,000 --> 01:40:57,119
uh here it says that uh if you have

2236
01:40:57,119 --> 01:40:59,280
uh if you look at this middle path k to

2237
01:40:59,280 --> 01:41:01,360
l or for that matter you can look at the

2238
01:41:01,360 --> 01:41:02,960
whole as path 1 to n

2239
01:41:02,960 --> 01:41:06,639
doesn't matter if you have a hop

2240
01:41:06,639 --> 01:41:10,639
on the left that is u 2 u plus 1

2241
01:41:10,639 --> 01:41:13,679
that is not a provider and if you have a

2242
01:41:13,679 --> 01:41:16,159
hop on the right of that

2243
01:41:16,159 --> 01:41:19,600
v v plus 1 to v that is also not a

2244
01:41:19,600 --> 01:41:20,560
provider

2245
01:41:20,560 --> 01:41:23,199
then the this middle portion of the path

2246
01:41:23,199 --> 01:41:24,719
is invalid and the whole

2247
01:41:24,719 --> 01:41:27,920
uh the whole path as path is invalid

2248
01:41:27,920 --> 01:41:30,080
otherwise the partial path is unknown

2249
01:41:30,080 --> 01:41:32,080
and the whole path is unknown

2250
01:41:32,080 --> 01:41:34,480
so that's those are the theorems so just

2251
01:41:34,480 --> 01:41:35,679
a quick glimpse of

2252
01:41:35,679 --> 01:41:38,880
like the of the proof or the validity of

2253
01:41:38,880 --> 01:41:42,400
that that theorem uh we look at the case

2254
01:41:42,400 --> 01:41:42,719
when

2255
01:41:42,719 --> 01:41:46,159
l minus k equal to two uh if you have

2256
01:41:46,159 --> 01:41:46,560
two

2257
01:41:46,560 --> 01:41:49,679
nps from left to right and right to left

2258
01:41:49,679 --> 01:41:51,440
facing each other

2259
01:41:51,440 --> 01:41:54,320
then the path is invalid because you

2260
01:41:54,320 --> 01:41:56,000
will construct from this

2261
01:41:56,000 --> 01:41:58,159
you can construct the four different

2262
01:41:58,159 --> 01:41:59,360
trajectories

2263
01:41:59,360 --> 01:42:01,920
are between three and four and you will

2264
01:42:01,920 --> 01:42:04,400
see that

2265
01:42:05,040 --> 01:42:07,679
you will see that uh out of those

2266
01:42:07,679 --> 01:42:09,520
trajectories

2267
01:42:09,520 --> 01:42:12,400
all of them uh result in value free

2268
01:42:12,400 --> 01:42:14,159
violation and therefore

2269
01:42:14,159 --> 01:42:16,480
there is no there is no trajectory which

2270
01:42:16,480 --> 01:42:18,800
is valid all of them are invalid so

2271
01:42:18,800 --> 01:42:21,280
this three to four is definitely invalid

2272
01:42:21,280 --> 01:42:21,840
if they

2273
01:42:21,840 --> 01:42:25,760
if you have two mps facing each other

2274
01:42:25,760 --> 01:42:29,119
uh all other uh combinations n a

2275
01:42:29,119 --> 01:42:32,320
n p and n a n a n p n a those three

2276
01:42:32,320 --> 01:42:33,360
combinations

2277
01:42:33,360 --> 01:42:35,199
uh you can you can construct

2278
01:42:35,199 --> 01:42:37,280
trajectories between three and four some

2279
01:42:37,280 --> 01:42:39,760
would be valid some would be invalid

2280
01:42:39,760 --> 01:42:42,159
as a result uh you you'll call it

2281
01:42:42,159 --> 01:42:43,119
unknown

2282
01:42:43,119 --> 01:42:45,679
so that's the idea general idea of the

2283
01:42:45,679 --> 01:42:46,159
proof

2284
01:42:46,159 --> 01:42:49,199
and we we showed it show it for l minus

2285
01:42:49,199 --> 01:42:49,440
k

2286
01:42:49,440 --> 01:42:52,560
equal to three in the backup slides and

2287
01:42:52,560 --> 01:42:54,400
also from there you can use the method

2288
01:42:54,400 --> 01:42:56,080
of induction to to provide

2289
01:42:56,080 --> 01:42:58,960
a general proof for the theorems so with

2290
01:42:58,960 --> 01:43:00,639
the help of those theorems it's now

2291
01:43:00,639 --> 01:43:01,199
pretty

2292
01:43:01,199 --> 01:43:03,119
simple and straightforward to lay out a

2293
01:43:03,119 --> 01:43:04,560
crisp description

2294
01:43:04,560 --> 01:43:06,560
uh which you pretty much already know at

2295
01:43:06,560 --> 01:43:07,679
this point

2296
01:43:07,679 --> 01:43:10,880
uh if n if the s path length is less

2297
01:43:10,880 --> 01:43:11,280
than

2298
01:43:11,280 --> 01:43:14,159
less than or equal to two uh then the

2299
01:43:14,159 --> 01:43:14,880
path is

2300
01:43:14,880 --> 01:43:18,159
um is valid it's trivially valid and

2301
01:43:18,159 --> 01:43:21,040
um we don't need to look apply the aspa

2302
01:43:21,040 --> 01:43:21,520
at all

2303
01:43:21,520 --> 01:43:25,040
in this case uh then if the path length

2304
01:43:25,040 --> 01:43:25,440
is

2305
01:43:25,440 --> 01:43:28,159
greater than two uh then we uh when then

2306
01:43:28,159 --> 01:43:30,800
we can have the lk formulation

2307
01:43:30,800 --> 01:43:33,119
and if l minus k is less than or equal

2308
01:43:33,119 --> 01:43:35,040
to one as we said before

2309
01:43:35,040 --> 01:43:38,320
uh the path is again definitely valid

2310
01:43:38,320 --> 01:43:40,560
so now we consider l minus k greater

2311
01:43:40,560 --> 01:43:41,760
than equal to two

2312
01:43:41,760 --> 01:43:43,840
we have already said about that that if

2313
01:43:43,840 --> 01:43:44,880
you have these two

2314
01:43:44,880 --> 01:43:48,880
opposing uh not provider

2315
01:43:48,880 --> 01:43:52,000
not provider hops one on the left one on

2316
01:43:52,000 --> 01:43:52,719
the right

2317
01:43:52,719 --> 01:43:55,199
they are facing each other um like in

2318
01:43:55,199 --> 01:43:57,199
this previous slide

2319
01:43:57,199 --> 01:44:00,159
np and p are facing each other uh it's

2320
01:44:00,159 --> 01:44:00,960
going to be

2321
01:44:00,960 --> 01:44:03,040
invalid and otherwise the path is

2322
01:44:03,040 --> 01:44:04,080
unknown

2323
01:44:04,080 --> 01:44:06,159
uh so i'll not go through this my last

2324
01:44:06,159 --> 01:44:07,440
slide here uh

2325
01:44:07,440 --> 01:44:11,199
it is basically um laying out an

2326
01:44:11,199 --> 01:44:13,360
implementation procedure

2327
01:44:13,360 --> 01:44:16,400
uh we tried uh to squeeze

2328
01:44:16,400 --> 01:44:19,760
the most efficiency into it uh by

2329
01:44:19,760 --> 01:44:22,880
minimizing the number of uh aspa hob

2330
01:44:22,880 --> 01:44:23,760
checks

2331
01:44:23,760 --> 01:44:27,280
uh so people who are interested in the

2332
01:44:27,280 --> 01:44:28,400
implementation can

2333
01:44:28,400 --> 01:44:30,400
look and take a closer look at this and

2334
01:44:30,400 --> 01:44:31,440
and see

2335
01:44:31,440 --> 01:44:33,920
uh if this is something that they would

2336
01:44:33,920 --> 01:44:35,040
like to use

2337
01:44:35,040 --> 01:44:37,440
otherwise the implementation can can

2338
01:44:37,440 --> 01:44:39,199
vary depending on the

2339
01:44:39,199 --> 01:44:42,880
uh the implementer's taste and choice

2340
01:44:42,880 --> 01:44:46,320
but the basic principles remain the same

2341
01:44:46,320 --> 01:44:48,560
so with that i conclude uh if you can

2342
01:44:48,560 --> 01:44:50,480
look through the backup slides uh at

2343
01:44:50,480 --> 01:44:51,360
your leisure

2344
01:44:51,360 --> 01:44:55,040
or to to to look for like the the proofs

2345
01:44:55,040 --> 01:44:57,360
uh for the theorems uh or the foundation

2346
01:44:57,360 --> 01:44:59,520
for this type of algorithm

2347
01:44:59,520 --> 01:45:02,960
um and with that

2348
01:45:02,960 --> 01:45:07,280
i can open it up for questions

2349
01:45:10,719 --> 01:45:12,320
looks like we have about 15 minutes left

2350
01:45:12,320 --> 01:45:14,400
in the meeting for questions and

2351
01:45:14,400 --> 01:45:16,159
a quick discussion at the end hopefully

2352
01:45:16,159 --> 01:45:18,560
about the running code conversation on

2353
01:45:18,560 --> 01:45:21,199
the list so

2354
01:45:28,840 --> 01:45:31,840
questions

2355
01:45:32,400 --> 01:45:34,719
ben and alexander feel free to say

2356
01:45:34,719 --> 01:45:35,920
something if

2357
01:45:35,920 --> 01:45:38,320
you have some thoughts about your

2358
01:45:38,320 --> 01:45:40,719
implementation efforts that

2359
01:45:40,719 --> 01:45:42,840
you are putting in if you would like to

2360
01:45:42,840 --> 01:45:45,840
share

2361
01:45:52,480 --> 01:45:59,839
i said that i appreciated

2362
01:46:06,480 --> 01:46:13,199
and description

2363
01:46:13,199 --> 01:46:16,159
i think alexander your your audio was

2364
01:46:16,159 --> 01:46:19,040
extremely bad

2365
01:46:19,920 --> 01:46:24,080
i'm sorry for this that's better

2366
01:46:24,080 --> 01:46:27,679
i can try to repeat

2367
01:46:27,679 --> 01:46:31,040
the intention to tend

2368
01:46:31,040 --> 01:46:34,560
to work

2369
01:46:36,719 --> 01:46:40,960
but more

2370
01:46:44,880 --> 01:46:47,840
that it's more important to make a clean

2371
01:46:47,840 --> 01:46:48,639
description

2372
01:46:48,639 --> 01:46:52,800
because they complete rewarding

2373
01:46:53,280 --> 01:46:54,960
it's more important than computational

2374
01:46:54,960 --> 01:46:57,840
efficiency even

2375
01:46:59,600 --> 01:47:02,480
yeah sure uh i i don't mind i mean what

2376
01:47:02,480 --> 01:47:03,199
i looked at

2377
01:47:03,199 --> 01:47:05,040
what you were trying to do uh the

2378
01:47:05,040 --> 01:47:06,719
discussions we had

2379
01:47:06,719 --> 01:47:09,840
uh and i still have to dig

2380
01:47:09,840 --> 01:47:13,040
deeper into ben's uh implementation uh

2381
01:47:13,040 --> 01:47:14,560
it seems like uh

2382
01:47:14,560 --> 01:47:17,600
that that the the basic principles are

2383
01:47:17,600 --> 01:47:20,080
are similar to or same as what what is

2384
01:47:20,080 --> 01:47:22,000
described in these slides

2385
01:47:22,000 --> 01:47:25,199
uh so yes if the efficiency is not

2386
01:47:25,199 --> 01:47:28,560
uh of uh uh of topmost

2387
01:47:28,560 --> 01:47:30,960
a priority then yeah there are variants

2388
01:47:30,960 --> 01:47:32,239
that can definitely be

2389
01:47:32,239 --> 01:47:35,040
implemented but still based on the

2390
01:47:35,040 --> 01:47:38,400
principles outlined

2391
01:47:44,800 --> 01:47:48,159
ben i think just to echo that

2392
01:47:48,159 --> 01:47:52,400
um i think we have

2393
01:47:52,800 --> 01:47:56,000
three kind of um

2394
01:47:56,000 --> 01:48:00,480
algorithmic or in encode representations

2395
01:48:00,480 --> 01:48:03,280
of fundamentally the same set of ideas

2396
01:48:03,280 --> 01:48:05,520
now that are more or less equivalent to

2397
01:48:05,520 --> 01:48:06,639
each other

2398
01:48:06,639 --> 01:48:09,920
um there's

2399
01:48:09,920 --> 01:48:14,159
the version in in draft zero seven

2400
01:48:14,159 --> 01:48:18,000
um there's a version that i wrote based

2401
01:48:18,000 --> 01:48:20,480
on the email that jacob sent to the

2402
01:48:20,480 --> 01:48:21,360
mailing list

2403
01:48:21,360 --> 01:48:23,199
a couple of weeks back and there's the

2404
01:48:23,199 --> 01:48:25,440
version presented in your slides

2405
01:48:25,440 --> 01:48:27,440
and i think they pretty much all arrive

2406
01:48:27,440 --> 01:48:28,480
at the same

2407
01:48:28,480 --> 01:48:31,280
conclusions in a relatively similar way

2408
01:48:31,280 --> 01:48:32,560
under the hood

2409
01:48:32,560 --> 01:48:34,639
but i think that in terms of what we

2410
01:48:34,639 --> 01:48:35,600
select

2411
01:48:35,600 --> 01:48:38,719
up in the final document

2412
01:48:38,719 --> 01:48:41,840
the two overriding considerations for me

2413
01:48:41,840 --> 01:48:45,199
are that we should value

2414
01:48:45,199 --> 01:48:47,520
readability and understandability over

2415
01:48:47,520 --> 01:48:49,199
efficiency we don't need an

2416
01:48:49,199 --> 01:48:51,920
optimized version of this algorithm in

2417
01:48:51,920 --> 01:48:53,280
the standard that can be

2418
01:48:53,280 --> 01:48:56,800
for implementers to do and secondly

2419
01:48:56,800 --> 01:48:58,000
and i think this is the biggest

2420
01:48:58,000 --> 01:49:00,000
shortcoming of the draft

2421
01:49:00,000 --> 01:49:03,440
as it's currently written i think

2422
01:49:03,440 --> 01:49:07,678
that we need a much clearer

2423
01:49:08,159 --> 01:49:11,840
line of reasoning to go from

2424
01:49:11,840 --> 01:49:15,119
what we understand as a root leak of the

2425
01:49:15,119 --> 01:49:16,320
type that we're trying to

2426
01:49:16,320 --> 01:49:20,159
detect to what the eventual algorithm

2427
01:49:20,159 --> 01:49:22,719
ends up looking like i think that that i

2428
01:49:22,719 --> 01:49:23,840
think setting out

2429
01:49:23,840 --> 01:49:27,360
that that those logical steps

2430
01:49:27,360 --> 01:49:30,560
are really important to allow people

2431
01:49:30,560 --> 01:49:32,239
that haven't been you know reading

2432
01:49:32,239 --> 01:49:34,159
iterations of this draft for the last

2433
01:49:34,159 --> 01:49:35,760
however many years

2434
01:49:35,760 --> 01:49:38,800
to actually know what to expect in

2435
01:49:38,800 --> 01:49:40,320
practice if their server winds up

2436
01:49:40,320 --> 01:49:43,840
running on their routers

2437
01:49:46,480 --> 01:49:49,920
yeah just if you're

2438
01:49:49,920 --> 01:49:53,440
not talking you need to mute your mic

2439
01:49:53,440 --> 01:49:56,639
because otherwise there's a bunch of

2440
01:49:56,639 --> 01:49:58,159
echo that's i think why alex wasn't

2441
01:49:58,159 --> 01:49:58,560
heard

2442
01:49:58,560 --> 01:50:02,000
and why ben was cutting in and out

2443
01:50:03,840 --> 01:50:06,159
sorry about that chris uh thank you for

2444
01:50:06,159 --> 01:50:07,199
reminding uh

2445
01:50:07,199 --> 01:50:09,040
but a little bit too late for alex and

2446
01:50:09,040 --> 01:50:11,119
ben um

2447
01:50:11,119 --> 01:50:13,119
i i just want to add to what ben just

2448
01:50:13,119 --> 01:50:14,320
said uh that

2449
01:50:14,320 --> 01:50:17,599
uh yeah that's that's that's good

2450
01:50:17,599 --> 01:50:20,800
and uh one other thing that that i would

2451
01:50:20,800 --> 01:50:21,760
like to mention

2452
01:50:21,760 --> 01:50:24,400
is uh in the draft the element the g

2453
01:50:24,400 --> 01:50:25,280
function that

2454
01:50:25,280 --> 01:50:28,800
that that is defined in the

2455
01:50:28,800 --> 01:50:32,080
uh in the slides uh is quite helpful uh

2456
01:50:32,080 --> 01:50:32,719
so that

2457
01:50:32,719 --> 01:50:34,960
that it's just a matter of like in

2458
01:50:34,960 --> 01:50:36,480
section four of the draft

2459
01:50:36,480 --> 01:50:38,719
i just just call give it a name instead

2460
01:50:38,719 --> 01:50:39,599
of saying s

2461
01:50:39,599 --> 01:50:43,520
i a s j valid invalid unknown

2462
01:50:43,520 --> 01:50:46,960
just give it a name like g and maybe if

2463
01:50:46,960 --> 01:50:47,920
you like use

2464
01:50:47,920 --> 01:50:51,520
the p n p and n a

2465
01:50:51,520 --> 01:50:54,960
uh notation uh because uh if you use uh

2466
01:50:54,960 --> 01:50:55,760
like if

2467
01:50:55,760 --> 01:50:58,480
each hop check if you say it is valid

2468
01:50:58,480 --> 01:51:00,239
invalid unknown

2469
01:51:00,239 --> 01:51:02,560
um you are kind of saying that my hop is

2470
01:51:02,560 --> 01:51:03,840
invalid but the

2471
01:51:03,840 --> 01:51:06,880
path is valid

2472
01:51:06,880 --> 01:51:10,080
so that happens uh in many cases

2473
01:51:10,080 --> 01:51:13,199
so that kind of maybe confuses the

2474
01:51:13,199 --> 01:51:15,199
the reader so just to make it this

2475
01:51:15,199 --> 01:51:16,719
ambiguous

2476
01:51:16,719 --> 01:51:18,400
i would also like to recommend in

2477
01:51:18,400 --> 01:51:20,159
addition to using a

2478
01:51:20,159 --> 01:51:23,199
function like g just to make it clear

2479
01:51:23,199 --> 01:51:25,760
g is a hop check function i just give it

2480
01:51:25,760 --> 01:51:26,320
a name

2481
01:51:26,320 --> 01:51:29,360
and also use uh p and p n a type of

2482
01:51:29,360 --> 01:51:30,400
notation to

2483
01:51:30,400 --> 01:51:32,880
keep it unambiguous don't mix it up with

2484
01:51:32,880 --> 01:51:34,000
the overall path

2485
01:51:34,000 --> 01:51:38,560
validity or invalidity unknown etc

2486
01:51:38,560 --> 01:51:41,119
so those are my couple of suggestions in

2487
01:51:41,119 --> 01:51:42,639
rewriting or

2488
01:51:42,639 --> 01:51:48,080
making the text more useful

2489
01:51:48,080 --> 01:51:51,199
uh just a small response that

2490
01:51:51,199 --> 01:51:54,880
the function has already its name it's

2491
01:51:54,880 --> 01:51:57,119
called in the document pair verification

2492
01:51:57,119 --> 01:51:58,239
procedure

2493
01:51:58,239 --> 01:52:01,520
and it is in separate section from

2494
01:52:01,520 --> 01:52:04,400
all other procedures that we have in the

2495
01:52:04,400 --> 01:52:05,360
document

2496
01:52:05,360 --> 01:52:09,280
so i do think that

2497
01:52:09,280 --> 01:52:13,840
the naming of these function is not

2498
01:52:13,840 --> 01:52:19,520
a problem but it's my personal opinion

2499
01:52:20,080 --> 01:52:22,400
uh yeah alexander we can we can chat

2500
01:52:22,400 --> 01:52:23,760
about that a little bit

2501
01:52:23,760 --> 01:52:26,880
more uh between you and ben and jacob

2502
01:52:26,880 --> 01:52:28,239
and myself

2503
01:52:28,239 --> 01:52:30,400
but yeah i'm fine either way i thought i

2504
01:52:30,400 --> 01:52:32,239
would just make that suggestion

2505
01:52:32,239 --> 01:52:35,360
uh for uh for better clarity

2506
01:52:35,360 --> 01:52:37,679
uh for the for the reader just just a

2507
01:52:37,679 --> 01:52:39,760
matter of giving it a name you give it

2508
01:52:39,760 --> 01:52:42,000
some kind of a name but a symbol like g

2509
01:52:42,000 --> 01:52:42,800
might help but

2510
01:52:42,800 --> 01:52:47,199
i'm not adamant about that thank you

2511
01:52:52,639 --> 01:52:56,000
okay any other questions for sriram

2512
01:52:56,000 --> 01:52:59,840
or alex or ben i suppose

2513
01:53:03,199 --> 01:53:05,440
okay i think uh thank you very much for

2514
01:53:05,440 --> 01:53:06,719
your presentation sriram

2515
01:53:06,719 --> 01:53:09,920
and the other presenters also thanks

2516
01:53:09,920 --> 01:53:12,400
a bunch of bunch of good conversation

2517
01:53:12,400 --> 01:53:13,920
and some action items to move forward

2518
01:53:13,920 --> 01:53:15,440
with

2519
01:53:15,440 --> 01:53:16,639
the last little thing i wanted to

2520
01:53:16,639 --> 01:53:17,920
mention because i said i would mention

2521
01:53:17,920 --> 01:53:19,760
it last night when i emailed

2522
01:53:19,760 --> 01:53:21,280
and i got badgered by at least one

2523
01:53:21,280 --> 01:53:24,080
participant to say something

2524
01:53:24,080 --> 01:53:26,320
um i think there's there was a

2525
01:53:26,320 --> 01:53:27,760
relatively long conversation

2526
01:53:27,760 --> 01:53:30,800
uh six or eight uh emails about

2527
01:53:30,800 --> 01:53:32,239
you know getting some running code

2528
01:53:32,239 --> 01:53:34,719
before we push forward

2529
01:53:34,719 --> 01:53:36,920
uh drafts that have implementation

2530
01:53:36,920 --> 01:53:40,800
changes um

2531
01:53:40,800 --> 01:53:42,320
that seems totally reasonable to me and

2532
01:53:42,320 --> 01:53:44,400
i outlined this in the email

2533
01:53:44,400 --> 01:53:46,400
an email reply last night i think at the

2534
01:53:46,400 --> 01:53:48,159
very least it gives us an opportunity to

2535
01:53:48,159 --> 01:53:48,639
see how

2536
01:53:48,639 --> 01:53:50,159
the changes are going to actually work

2537
01:53:50,159 --> 01:53:51,040
how they're going to change the

2538
01:53:51,040 --> 01:53:52,239
operations of the system

2539
01:53:52,239 --> 01:53:54,159
i don't think anybody has necessarily

2540
01:53:54,159 --> 01:53:56,080
disagreed with any of that

2541
01:53:56,080 --> 01:53:57,520
and the previous amount of a bit of

2542
01:53:57,520 --> 01:53:59,920
thread so i think the chairs need to do

2543
01:53:59,920 --> 01:54:00,719
some work

2544
01:54:00,719 --> 01:54:03,280
on a little charter update and push that

2545
01:54:03,280 --> 01:54:04,639
forward through our ads in the

2546
01:54:04,639 --> 01:54:07,520
in the iesg there's any comments or

2547
01:54:07,520 --> 01:54:08,560
questions about that now would be a

2548
01:54:08,560 --> 01:54:09,920
perfect time to

2549
01:54:09,920 --> 01:54:12,320
speak up

2550
01:54:14,960 --> 01:54:17,440
rudiger

2551
01:54:21,199 --> 01:54:24,639
warren warren so yeah this is warren i'm

2552
01:54:24,639 --> 01:54:25,440
not sure that

2553
01:54:25,440 --> 01:54:27,679
he needs a charter update kind of i

2554
01:54:27,679 --> 01:54:30,000
wonder about the terms used

2555
01:54:30,000 --> 01:54:33,599
are we asking for running code

2556
01:54:33,599 --> 01:54:36,880
or for running code and actually

2557
01:54:36,880 --> 01:54:40,159
interoper a positive interoperability

2558
01:54:40,159 --> 01:54:42,480
test

2559
01:54:44,719 --> 01:54:46,639
so i'll give rudiger a second to to get

2560
01:54:46,639 --> 01:54:48,800
back to the listening side of his

2561
01:54:48,800 --> 01:54:52,719
conversation okay so rudiger um

2562
01:54:52,719 --> 01:54:56,000
i suppose in my head implementation

2563
01:54:56,000 --> 01:54:59,119
uh interoperability and running code are

2564
01:54:59,119 --> 01:55:00,639
kind of the same thing to me

2565
01:55:00,639 --> 01:55:03,040
that's a bit naive on my part i totally

2566
01:55:03,040 --> 01:55:04,080
admit

2567
01:55:04,080 --> 01:55:06,159
but conversations earlier today about

2568
01:55:06,159 --> 01:55:07,679
you know get some running code get some

2569
01:55:07,679 --> 01:55:08,960
implementation

2570
01:55:08,960 --> 01:55:10,960
uh and interoperability reports i think

2571
01:55:10,960 --> 01:55:13,679
that's all kind of the same thing to me

2572
01:55:13,679 --> 01:55:16,400
and that's that's where my headspace was

2573
01:55:16,400 --> 01:55:17,199
at least

2574
01:55:17,199 --> 01:55:19,920
so yes and warren was in the middle of

2575
01:55:19,920 --> 01:55:21,119
saying something about maybe we don't

2576
01:55:21,119 --> 01:55:22,480
need

2577
01:55:22,480 --> 01:55:24,719
yeah i mean i you can do a charter

2578
01:55:24,719 --> 01:55:26,159
update if you like that sounds like a

2579
01:55:26,159 --> 01:55:27,199
lot of faff

2580
01:55:27,199 --> 01:55:29,520
the other option is just you know update

2581
01:55:29,520 --> 01:55:31,199
the

2582
01:55:31,199 --> 01:55:34,000
ups wiki or something and have a note

2583
01:55:34,000 --> 01:55:35,360
that you're not going to progress

2584
01:55:35,360 --> 01:55:37,679
documents until you have x

2585
01:55:37,679 --> 01:55:39,840
um whatever you'd like if you want to do

2586
01:55:39,840 --> 01:55:41,440
a charter update i'm fine to push it

2587
01:55:41,440 --> 01:55:42,880
through the process it just requires

2588
01:55:42,880 --> 01:55:44,320
many buttons and

2589
01:55:44,320 --> 01:55:48,080
you know paperwork and faffy stuff

2590
01:55:50,560 --> 01:55:53,679
i think yoban then care yeah

2591
01:55:53,679 --> 01:55:55,199
i was going to jump in and say real

2592
01:55:55,199 --> 01:55:58,320
quick this is scary for marcus um

2593
01:55:58,320 --> 01:56:00,320
that you know having had an experience

2594
01:56:00,320 --> 01:56:01,520
at idr where

2595
01:56:01,520 --> 01:56:04,560
two implementations are strongly

2596
01:56:04,560 --> 01:56:05,679
required

2597
01:56:05,679 --> 01:56:09,440
whether um they are deployed or not is a

2598
01:56:09,440 --> 01:56:12,560
added plus but uh showing an

2599
01:56:12,560 --> 01:56:14,480
interoperability between multiple

2600
01:56:14,480 --> 01:56:16,800
implementations is what idr prefers i

2601
01:56:16,800 --> 01:56:17,520
think here

2602
01:56:17,520 --> 01:56:19,199
in this working group we can start with

2603
01:56:19,199 --> 01:56:20,800
one and

2604
01:56:20,800 --> 01:56:23,679
the interoperability document in some

2605
01:56:23,679 --> 01:56:24,480
cases

2606
01:56:24,480 --> 01:56:28,000
would be a a added plus but otherwise

2607
01:56:28,000 --> 01:56:29,440
we could start minimally with one

2608
01:56:29,440 --> 01:56:31,119
implementation

2609
01:56:31,119 --> 01:56:33,040
and think we need in a lot of cases an

2610
01:56:33,040 --> 01:56:36,880
interoperability document right chris

2611
01:56:38,080 --> 01:56:40,080
um yeah i don't know that a document is

2612
01:56:40,080 --> 01:56:41,520
particularly required but it certainly

2613
01:56:41,520 --> 01:56:42,800
seems like it would be helpful to at

2614
01:56:42,800 --> 01:56:43,440
least

2615
01:56:43,440 --> 01:56:45,760
review in a meeting or on the mailing

2616
01:56:45,760 --> 01:56:46,480
lists of

2617
01:56:46,480 --> 01:56:49,280
kind of formal hey we three implementers

2618
01:56:49,280 --> 01:56:50,000
got together

2619
01:56:50,000 --> 01:56:52,719
we ran the bits and pieces nothing bad

2620
01:56:52,719 --> 01:56:54,400
happened and the world didn't explode

2621
01:56:54,400 --> 01:56:56,400
right or hey this is actually pretty

2622
01:56:56,400 --> 01:56:57,679
crappy

2623
01:56:57,679 --> 01:57:01,360
a different way right

2624
01:57:06,639 --> 01:57:10,560
yep to reiterate

2625
01:57:10,560 --> 01:57:14,639
somewhat of what was already said but i

2626
01:57:14,639 --> 01:57:17,520
think we should copy a lot of the

2627
01:57:17,520 --> 01:57:18,239
working group

2628
01:57:18,239 --> 01:57:21,520
culture in this context from idr where

2629
01:57:21,520 --> 01:57:24,880
depending on the draft at hand

2630
01:57:24,880 --> 01:57:28,080
maybe merely an implementation report is

2631
01:57:28,080 --> 01:57:28,880
required

2632
01:57:28,880 --> 01:57:32,320
detailing how the normative terms in the

2633
01:57:32,320 --> 01:57:34,800
draft are handled by the software

2634
01:57:34,800 --> 01:57:37,199
and potentially depending of course on

2635
01:57:37,199 --> 01:57:39,760
the proposed idea

2636
01:57:39,760 --> 01:57:42,639
that whether it interrupts with other

2637
01:57:42,639 --> 01:57:43,760
implementations

2638
01:57:43,760 --> 01:57:47,280
not all ideas require interoperability

2639
01:57:47,280 --> 01:57:49,199
but the ones that do we should

2640
01:57:49,199 --> 01:57:50,960
definitely be testing

2641
01:57:50,960 --> 01:57:52,960
and this is not about open source versus

2642
01:57:52,960 --> 01:57:55,440
proprietary software solutions

2643
01:57:55,440 --> 01:57:58,000
uh proprietary software solutions are

2644
01:57:58,000 --> 01:57:59,920
also able to write implementation

2645
01:57:59,920 --> 01:58:02,000
reports and to perform interoperability

2646
01:58:02,000 --> 01:58:02,880
testing

2647
01:58:02,880 --> 01:58:06,000
so yeah we should be copying from how

2648
01:58:06,000 --> 01:58:08,239
idr handles this i think it would

2649
01:58:08,239 --> 01:58:09,440
positively benefit

2650
01:58:09,440 --> 01:58:11,919
this group

2651
01:58:14,639 --> 01:58:17,119
okay we have less than uh less than two

2652
01:58:17,119 --> 01:58:18,480
minutes we get kicked out so

2653
01:58:18,480 --> 01:58:20,800
the last people are quick doug warren

2654
01:58:20,800 --> 01:58:23,040
and randy

2655
01:58:23,040 --> 01:58:24,560
i was just making the point in the chat

2656
01:58:24,560 --> 01:58:26,320
right that interoperability in things

2657
01:58:26,320 --> 01:58:26,960
like

2658
01:58:26,960 --> 01:58:30,560
aspa algorithms

2659
01:58:30,639 --> 01:58:33,040
you know interoperability is only a

2660
01:58:33,040 --> 01:58:34,000
question where systems

2661
01:58:34,000 --> 01:58:35,599
interface right so that's the interface

2662
01:58:35,599 --> 01:58:37,920
to rpki and processing the data

2663
01:58:37,920 --> 01:58:39,920
i think what we're interested in is that

2664
01:58:39,920 --> 01:58:42,239
different implementations behaves

2665
01:58:42,239 --> 01:58:46,159
consistently which and

2666
01:58:46,159 --> 01:58:47,679
i guess is a broader definition of

2667
01:58:47,679 --> 01:58:50,080
interop

2668
01:58:51,920 --> 01:58:56,639
that's it thank you warren

2669
01:58:56,639 --> 01:58:58,239
it's the more i think about it the more

2670
01:58:58,239 --> 01:58:59,679
i think it would be a good idea to just

2671
01:58:59,679 --> 01:59:01,280
have a strong suggestion

2672
01:59:01,280 --> 01:59:03,679
that you have interoperability or code

2673
01:59:03,679 --> 01:59:05,440
requirements or something that way you

2674
01:59:05,440 --> 01:59:07,280
have flexibility in the future

2675
01:59:07,280 --> 01:59:08,880
so i suggest just have it somewhere not

2676
01:59:08,880 --> 01:59:10,719
naturally in a charter but we can chat

2677
01:59:10,719 --> 01:59:11,119
more

2678
01:59:11,119 --> 01:59:15,599
later okay ready

2679
01:59:15,599 --> 01:59:18,320
this is an ops group not a protocol

2680
01:59:18,320 --> 01:59:19,960
group

2681
01:59:19,960 --> 01:59:23,679
interoperability of what

2682
01:59:29,040 --> 01:59:32,239
if i can jump to queue

2683
01:59:32,320 --> 01:59:35,840
go randy for example

2684
01:59:35,840 --> 01:59:39,679
interoperability of rsc or rta

2685
01:59:39,679 --> 01:59:42,840
or other newly defined objects in the

2686
01:59:42,840 --> 01:59:44,080
rpki

2687
01:59:44,080 --> 01:59:46,800
we can confirm whether multiple

2688
01:59:46,800 --> 01:59:50,400
different implementations are able to

2689
01:59:50,400 --> 01:59:51,760
understand according to the

2690
01:59:51,760 --> 01:59:53,840
specification proposal

2691
01:59:53,840 --> 01:59:59,840
but they don't belong here

2692
02:00:01,040 --> 02:00:04,400
this is cider ops

2693
02:00:04,400 --> 02:00:08,320
not cider if you want protocol that

2694
02:00:08,320 --> 02:00:08,920
needs

2695
02:00:08,920 --> 02:00:12,000
interoperation then

2696
02:00:12,000 --> 02:00:15,040
it needs to be done somewhere else or

2697
02:00:15,040 --> 02:00:15,840
this group

2698
02:00:15,840 --> 02:00:18,400
needs to move out of ops and have a

2699
02:00:18,400 --> 02:00:27,520
massive return

2700
02:00:27,520 --> 02:00:29,760
the fact remains that currently things

2701
02:00:29,760 --> 02:00:31,520
like rtr

2702
02:00:31,520 --> 02:00:33,280
are handled by this working group and i

2703
02:00:33,280 --> 02:00:34,560
do think it is good

2704
02:00:34,560 --> 02:00:37,520
to show and demonstrate that multiple

2705
02:00:37,520 --> 02:00:38,719
systems understand

2706
02:00:38,719 --> 02:00:41,199
the specifications and i'm not opposed

2707
02:00:41,199 --> 02:00:43,520
to recharging and splitting

2708
02:00:43,520 --> 02:00:45,599
things back into cider versus cider ops

2709
02:00:45,599 --> 02:00:46,960
but

2710
02:00:46,960 --> 02:00:54,880
running code will help us

2711
02:00:54,880 --> 02:00:58,960
okay last thoughts doug or chaor

2712
02:00:58,960 --> 02:01:01,440
whoever

2713
02:01:03,520 --> 02:01:09,840
i forgot to take my hand down care

2714
02:01:19,199 --> 02:01:21,199
okay maybe cair's comment was the

2715
02:01:21,199 --> 02:01:22,719
comment in the chat about

2716
02:01:22,719 --> 02:01:25,920
this mates we'll found some

2717
02:01:29,599 --> 02:01:31,040
i think with nothing else we're about to

2718
02:01:31,040 --> 02:01:33,199
get kicked out and uh

2719
02:01:33,199 --> 02:01:35,280
thanks everybody for participating if

2720
02:01:35,280 --> 02:01:36,719
there's open questions please put them

2721
02:01:36,719 --> 02:01:40,000
on the mailing list here we go

2722
02:01:44,560 --> 02:01:48,800
no i'm good chris i'm good to go thanks

2723
02:01:48,800 --> 02:01:50,000
all right thanks see you guys in three

2724
02:01:50,000 --> 02:01:51,040
months if we need to do something

2725
02:01:51,040 --> 02:01:52,719
between now and the next meeting

2726
02:01:52,719 --> 02:01:54,000
please be vocal on the list so we can

2727
02:01:54,000 --> 02:01:57,679
schedule an interim kind of at any time

2728
02:01:57,679 --> 02:01:59,760
see you in three and a half months or

2729
02:01:59,760 --> 02:02:01,119
whatever

2730
02:02:01,119 --> 02:02:05,839
virtually probably bye

