1
00:00:58,719 --> 00:01:00,719
so we'll give militia a minute to try

2
00:01:00,719 --> 00:01:02,320
and start at his upgraded mac

3
00:01:02,320 --> 00:01:06,400
and uh it's probably started about

4
00:01:06,400 --> 00:01:13,840
two minutes past or so

5
00:01:22,000 --> 00:01:23,759
okay so can you confirm this you can see

6
00:01:23,759 --> 00:01:27,840
my screen

7
00:01:28,240 --> 00:01:32,560
looks good yeah okay

8
00:01:33,280 --> 00:01:41,840
yeah sorry about that

9
00:01:50,799 --> 00:01:54,159
so we have a note taker timothy

10
00:01:54,159 --> 00:01:57,119
will be uh taking notes would somebody

11
00:01:57,119 --> 00:01:59,439
will be willing to help him

12
00:01:59,439 --> 00:02:01,759
so christian has volunteered already and

13
00:02:01,759 --> 00:02:03,119
uh robin is going to help with

14
00:02:03,119 --> 00:02:06,320
javascribing so i think we're sorted

15
00:02:06,320 --> 00:02:08,959
okay perfect

16
00:02:17,680 --> 00:02:20,840
okay so in that case i propose we get

17
00:02:20,840 --> 00:02:23,840
started

18
00:02:24,640 --> 00:02:27,840
uh welcome everyone this is the lake

19
00:02:27,840 --> 00:02:29,360
working group meeting

20
00:02:29,360 --> 00:02:33,519
during the itf 110 my name is malicia

21
00:02:33,519 --> 00:02:34,640
and my co-chair

22
00:02:34,640 --> 00:02:38,080
is stephen farrell uh

23
00:02:38,080 --> 00:02:41,760
so i will briefly go over uh

24
00:02:41,760 --> 00:02:45,519
the agenda for today and before that uh

25
00:02:45,519 --> 00:02:49,840
as a reminder this is an itf meeting and

26
00:02:49,840 --> 00:02:53,200
the note well applies most notably

27
00:02:53,200 --> 00:02:56,640
if you are aware of any patent uh

28
00:02:56,640 --> 00:02:59,599
application to the patents that uh

29
00:02:59,599 --> 00:03:01,680
during the discussions that we have

30
00:03:01,680 --> 00:03:04,000
it is important that you disclose those

31
00:03:04,000 --> 00:03:05,280
or not participate

32
00:03:05,280 --> 00:03:09,200
in the discussion uh

33
00:03:09,200 --> 00:03:11,440
so here is the proposed agenda for the

34
00:03:11,440 --> 00:03:12,800
day

35
00:03:12,800 --> 00:03:15,680
uh we will have a short report on the

36
00:03:15,680 --> 00:03:17,440
hackathon and interrupt testing that

37
00:03:17,440 --> 00:03:18,159
happened

38
00:03:18,159 --> 00:03:22,080
uh an update on formal verification

39
00:03:22,080 --> 00:03:25,519
of one implementation of echo spec

40
00:03:25,519 --> 00:03:27,920
and then we will proceed with the

41
00:03:27,920 --> 00:03:28,879
updates

42
00:03:28,879 --> 00:03:32,239
on the ad hoc can be open issues

43
00:03:32,239 --> 00:03:37,120
does anyone want to bash this agenda

44
00:03:41,120 --> 00:03:44,799
i hear none so

45
00:03:44,799 --> 00:03:46,640
we will be going through with this

46
00:03:46,640 --> 00:03:48,080
agenda

47
00:03:48,080 --> 00:03:52,080
uh and then uh before giving the floor

48
00:03:52,080 --> 00:03:54,400
to the presenters i would just like to

49
00:03:54,400 --> 00:03:55,599
bring up one

50
00:03:55,599 --> 00:03:58,640
uh one point that was discussed with

51
00:03:58,640 --> 00:04:02,400
uh with then our id and that relates to

52
00:04:02,400 --> 00:04:02,879
the

53
00:04:02,879 --> 00:04:05,680
uh administrative side of the working

54
00:04:05,680 --> 00:04:06,319
group and

55
00:04:06,319 --> 00:04:09,439
specifically the milestone on shipping

56
00:04:09,439 --> 00:04:13,519
the uh ad hoc specification to the isg

57
00:04:13,519 --> 00:04:15,920
so currently this milestone is set for

58
00:04:15,920 --> 00:04:18,478
september 2020 which is passed

59
00:04:18,478 --> 00:04:20,720
and this was initial this was an initial

60
00:04:20,720 --> 00:04:22,800
uh estimation right at the time of the

61
00:04:22,800 --> 00:04:24,960
chartering of the working group

62
00:04:24,960 --> 00:04:27,199
so right now i would like to open the

63
00:04:27,199 --> 00:04:28,320
discussion on

64
00:04:28,320 --> 00:04:31,759
the uh best date uh

65
00:04:31,759 --> 00:04:35,040
to have uh to agree on a date

66
00:04:35,040 --> 00:04:38,080
that we we should aim for to ship

67
00:04:38,080 --> 00:04:41,280
ad hoc uh there are

68
00:04:41,280 --> 00:04:44,400
around 36 issues that are still open on

69
00:04:44,400 --> 00:04:46,400
the github issue tracker

70
00:04:46,400 --> 00:04:48,479
uh that is one data point and then

71
00:04:48,479 --> 00:04:50,720
another data point is that we want

72
00:04:50,720 --> 00:04:52,800
that we will be doing the formal

73
00:04:52,800 --> 00:04:54,560
analysis work

74
00:04:54,560 --> 00:04:57,440
so i would like to ask for feedback from

75
00:04:57,440 --> 00:04:58,400
the authors

76
00:04:58,400 --> 00:05:03,680
if maybe uh two itf meetings are enough

77
00:05:03,680 --> 00:05:07,199
uh to uh uh to

78
00:05:07,199 --> 00:05:09,120
resolve the issues and consider the

79
00:05:09,120 --> 00:05:10,639
specification as

80
00:05:10,639 --> 00:05:14,560
uh as in good shape and from

81
00:05:14,560 --> 00:05:17,840
that moment which would be we should

82
00:05:17,840 --> 00:05:21,120
count on i would say six months uh

83
00:05:21,120 --> 00:05:24,240
for on formal analysis work to complete

84
00:05:24,240 --> 00:05:28,320
before shipping the work to the isg

85
00:05:28,800 --> 00:05:31,919
so uh you're on drone yes

86
00:05:31,919 --> 00:05:34,080
so

87
00:05:36,840 --> 00:05:39,840
okay

88
00:05:45,440 --> 00:05:48,960
yes um

89
00:05:48,960 --> 00:05:51,120
yeah this is i i don't know how to

90
00:05:51,120 --> 00:05:52,320
predict this really

91
00:05:52,320 --> 00:05:54,560
maybe someone else has better experience

92
00:05:54,560 --> 00:05:55,680
and can do it but

93
00:05:55,680 --> 00:06:00,720
um perhaps

94
00:06:00,720 --> 00:06:03,360
perhaps we've fixed all the issues by by

95
00:06:03,360 --> 00:06:08,560
the end of the summer and then um

96
00:06:08,800 --> 00:06:11,280
i mean we so looking at the state of the

97
00:06:11,280 --> 00:06:12,400
protocol it hasn't

98
00:06:12,400 --> 00:06:15,520
it has hardly changed uh

99
00:06:15,520 --> 00:06:18,800
during the last 12 months so it's been

100
00:06:18,800 --> 00:06:20,560
really stable with some some really

101
00:06:20,560 --> 00:06:21,600
minor

102
00:06:21,600 --> 00:06:25,120
change in version four and

103
00:06:25,120 --> 00:06:27,840
and now for for discussion today we are

104
00:06:27,840 --> 00:06:29,039
proposing

105
00:06:29,039 --> 00:06:32,240
a a change so which is also minor change

106
00:06:32,240 --> 00:06:34,240
but still a change so

107
00:06:34,240 --> 00:06:35,840
resolving the issues doesn't need to

108
00:06:35,840 --> 00:06:37,600
change much of the protocol

109
00:06:37,600 --> 00:06:40,639
processing and and message format

110
00:06:40,639 --> 00:06:42,479
but uh but we are in we're still

111
00:06:42,479 --> 00:06:44,160
changing things right now so we can't

112
00:06:44,160 --> 00:06:45,360
say we are

113
00:06:45,360 --> 00:06:49,440
are stable in that sense

114
00:06:49,440 --> 00:06:50,960
i don't know anyone else has a better

115
00:06:50,960 --> 00:06:53,039
estimate for

116
00:06:53,039 --> 00:06:55,360
time

117
00:06:56,720 --> 00:07:02,319
malicious suggestion sounded good

118
00:07:02,319 --> 00:07:05,120
maybe a half a year to address the

119
00:07:05,120 --> 00:07:06,639
issues and

120
00:07:06,639 --> 00:07:09,759
half a year to uh for the

121
00:07:09,759 --> 00:07:12,720
formal verification maybe so maybe set

122
00:07:12,720 --> 00:07:14,840
the deadline

123
00:07:14,840 --> 00:07:17,919
um for them i don't know

124
00:07:17,919 --> 00:07:22,000
much meeting next year or something

125
00:07:22,000 --> 00:07:25,199
ish yeah this is my initial proposal

126
00:07:25,199 --> 00:07:29,280
yeah so yeah um i agree with your

127
00:07:29,280 --> 00:07:30,560
and that the current issues will

128
00:07:30,560 --> 00:07:32,560
probably be resolved

129
00:07:32,560 --> 00:07:35,120
after summer i don't see any big changes

130
00:07:35,120 --> 00:07:35,919
but

131
00:07:35,919 --> 00:07:39,120
they keep popping up small

132
00:07:39,120 --> 00:07:42,080
uh implementation things that are a bit

133
00:07:42,080 --> 00:07:44,240
confusing or could have been a little

134
00:07:44,240 --> 00:07:45,280
bit

135
00:07:45,280 --> 00:07:48,319
better so in the like corner

136
00:07:48,319 --> 00:07:50,479
cases and so on and i would not be

137
00:07:50,479 --> 00:07:51,759
surprised if there

138
00:07:51,759 --> 00:07:55,599
pops up more when during the interrupt

139
00:07:55,599 --> 00:07:56,720
testing it's great

140
00:07:56,720 --> 00:07:58,479
to have interrupt test and we need to

141
00:07:58,479 --> 00:08:00,479
wait until

142
00:08:00,479 --> 00:08:04,240
we have addressed all of this

143
00:08:06,720 --> 00:08:09,440
okay so what i hear is that we can

144
00:08:09,440 --> 00:08:11,599
proceed with resolving some issues in

145
00:08:11,599 --> 00:08:12,240
parallel

146
00:08:12,240 --> 00:08:14,400
essentially and keeping drop testing as

147
00:08:14,400 --> 00:08:16,479
we were doing so far

148
00:08:16,479 --> 00:08:19,520
so unless there are any objections then

149
00:08:19,520 --> 00:08:20,160
i would

150
00:08:20,160 --> 00:08:24,000
propose to ben to update the milestone

151
00:08:24,000 --> 00:08:24,479
to

152
00:08:24,479 --> 00:08:27,680
march 2021 as

153
00:08:27,680 --> 00:08:30,000
a rough estimate of when we would ship

154
00:08:30,000 --> 00:08:32,320
the uh the spec to irg

155
00:08:32,320 --> 00:08:35,519
that would give us uh so essentially six

156
00:08:35,519 --> 00:08:36,240
months

157
00:08:36,240 --> 00:08:38,479
to resolve the issues in six months for

158
00:08:38,479 --> 00:08:39,279
the

159
00:08:39,279 --> 00:08:42,080
glorification work that we discussed uh

160
00:08:42,080 --> 00:08:44,480
with kartik and his team

161
00:08:44,480 --> 00:08:47,920
uh with parts of these two that could

162
00:08:47,920 --> 00:08:50,560
probably overlap if there are some

163
00:08:50,560 --> 00:08:52,480
editorial issues that do not impact

164
00:08:52,480 --> 00:08:56,240
the formal analysis ben

165
00:08:56,240 --> 00:09:00,240
so that would be mark 2022 right

166
00:09:00,240 --> 00:09:04,320
oh yeah yeah sure

167
00:09:04,320 --> 00:09:07,680
yeah that's very cool

168
00:09:07,680 --> 00:09:11,200
i think there has been basically

169
00:09:11,200 --> 00:09:13,920
no changes the last time that would

170
00:09:13,920 --> 00:09:15,040
affect

171
00:09:15,040 --> 00:09:18,240
celtics formal verification and i don't

172
00:09:18,240 --> 00:09:19,279
see any future

173
00:09:19,279 --> 00:09:22,480
changes that would affect that either

174
00:09:22,480 --> 00:09:24,640
i'm not an expert in formal verification

175
00:09:24,640 --> 00:09:25,600
but

176
00:09:25,600 --> 00:09:28,800
um i think that could start or could

177
00:09:28,800 --> 00:09:30,959
have started already in parallel

178
00:09:30,959 --> 00:09:33,200
um yeah but then it changed the process

179
00:09:33,200 --> 00:09:34,480
called john woods

180
00:09:34,480 --> 00:09:37,839
would impact those right so i mean uh

181
00:09:37,839 --> 00:09:39,600
ideally we would like to freeze the

182
00:09:39,600 --> 00:09:40,880
protocol and

183
00:09:40,880 --> 00:09:43,920
the format uh once

184
00:09:43,920 --> 00:09:47,200
this work starts that's how i see it

185
00:09:47,200 --> 00:09:49,760
i i don't think so i don't think the

186
00:09:49,760 --> 00:09:53,040
kind of changes we have been doing

187
00:09:53,040 --> 00:09:56,240
lately and we'll do in the here affect

188
00:09:56,240 --> 00:10:00,560
any formal verification at all like

189
00:10:00,560 --> 00:10:02,560
for former education doesn't typically

190
00:10:02,560 --> 00:10:03,760
not

191
00:10:03,760 --> 00:10:06,320
matter if you if you encode this like

192
00:10:06,320 --> 00:10:08,320
this or if you encode it a little bit

193
00:10:08,320 --> 00:10:08,800
like

194
00:10:08,800 --> 00:10:12,160
this but yeah

195
00:10:13,120 --> 00:10:15,680
yeah so i don't think i think on the

196
00:10:15,680 --> 00:10:16,880
call so

197
00:10:16,880 --> 00:10:20,079
but we can probably ask his input but uh

198
00:10:20,079 --> 00:10:22,959
so do you propose then an earlier uh

199
00:10:22,959 --> 00:10:23,680
deadline

200
00:10:23,680 --> 00:10:26,320
for this john or you're happy with march

201
00:10:26,320 --> 00:10:27,839
2022

202
00:10:27,839 --> 00:10:31,839
i think march is then we have a deadline

203
00:10:31,839 --> 00:10:32,800
that we can

204
00:10:32,800 --> 00:10:36,240
meet i don't know we could set the

205
00:10:36,240 --> 00:10:38,320
earlier but that would probably be

206
00:10:38,320 --> 00:10:40,160
optimistic and then we would have

207
00:10:40,160 --> 00:10:42,800
we'd miss it anyway so yeah i think

208
00:10:42,800 --> 00:10:43,519
march is

209
00:10:43,519 --> 00:10:46,640
good okay uh

210
00:10:46,640 --> 00:10:49,020
any other opinions on this

211
00:10:49,020 --> 00:10:52,230
[Music]

212
00:10:53,360 --> 00:10:57,279
uh i hear none so uh ben if this is fine

213
00:10:57,279 --> 00:10:58,000
with you

214
00:10:58,000 --> 00:11:00,160
then we should update the milestone date

215
00:11:00,160 --> 00:11:03,200
for march 2022

216
00:11:03,200 --> 00:11:06,959
all right sounds good all right

217
00:11:06,959 --> 00:11:10,399
thanks so that would be all

218
00:11:10,399 --> 00:11:14,560
on the uh chair slides i

219
00:11:14,560 --> 00:11:17,040
i will give the floor now to our first

220
00:11:17,040 --> 00:11:18,640
presenter

221
00:11:18,640 --> 00:11:22,720
uh who marco yes mark is already

222
00:11:22,720 --> 00:11:26,640
on the in the presenter's queue

223
00:11:26,640 --> 00:11:29,839
hi marquez

224
00:11:36,079 --> 00:11:39,680
okay uh thanks this is a short report of

225
00:11:39,680 --> 00:11:40,959
the

226
00:11:40,959 --> 00:11:44,640
slice disappeared oh there it is

227
00:11:44,640 --> 00:11:47,920
thanks um this is a short report of the

228
00:11:47,920 --> 00:11:50,160
tests we ran uh during the hackathon

229
00:11:50,160 --> 00:11:52,639
last week and it's essentially the third

230
00:11:52,639 --> 00:11:54,800
interrupt test overall um that we had

231
00:11:54,800 --> 00:11:55,920
for dog

232
00:11:55,920 --> 00:11:58,719
next slide please

233
00:12:00,320 --> 00:12:02,639
right so we had test scatter throughout

234
00:12:02,639 --> 00:12:03,839
the the whole week

235
00:12:03,839 --> 00:12:06,079
and we considered in total uh three

236
00:12:06,079 --> 00:12:07,120
implementations

237
00:12:07,120 --> 00:12:09,920
uh mine for eclipse californium one from

238
00:12:09,920 --> 00:12:12,000
libya isi and contikien g

239
00:12:12,000 --> 00:12:15,279
and one from christian in io co-op

240
00:12:15,279 --> 00:12:18,880
rebuilding uh mostly on the pya doc

241
00:12:18,880 --> 00:12:20,320
implementation from timothy that we

242
00:12:20,320 --> 00:12:22,480
tested in past occasions

243
00:12:22,480 --> 00:12:24,240
and i think it was the first time that

244
00:12:24,240 --> 00:12:25,519
we were testing especially

245
00:12:25,519 --> 00:12:28,720
lydia's in christian's code

246
00:12:28,720 --> 00:12:31,600
and overall considering also uh well

247
00:12:31,600 --> 00:12:32,720
interested observers

248
00:12:32,720 --> 00:12:35,680
uh we gather roughly 10 people around

249
00:12:35,680 --> 00:12:36,480
this

250
00:12:36,480 --> 00:12:38,399
and it was also the opportunity to build

251
00:12:38,399 --> 00:12:39,760
a better framework to

252
00:12:39,760 --> 00:12:42,480
uh to track uh which implementation

253
00:12:42,480 --> 00:12:43,279
supports

254
00:12:43,279 --> 00:12:47,200
uh what features and what tests um

255
00:12:47,200 --> 00:12:49,680
were successful or were failing so you

256
00:12:49,680 --> 00:12:50,320
can find

257
00:12:50,320 --> 00:12:52,079
uh this kind of material together with

258
00:12:52,079 --> 00:12:53,760
detailed notes

259
00:12:53,760 --> 00:12:57,040
in that shared dry folder next slide

260
00:12:57,040 --> 00:12:59,279
please

261
00:12:59,760 --> 00:13:01,760
right so the the first pair of testers

262
00:13:01,760 --> 00:13:03,040
were

263
00:13:03,040 --> 00:13:05,760
me and lydia and notably lydia had a

264
00:13:05,760 --> 00:13:06,959
constraint set up

265
00:13:06,959 --> 00:13:09,839
uh including a soul constrained device

266
00:13:09,839 --> 00:13:12,800
as part of an ipv6 mesh network using

267
00:13:12,800 --> 00:13:16,160
rpl uh we consider server suite 2 and

268
00:13:16,160 --> 00:13:17,600
authentication method

269
00:13:17,600 --> 00:13:19,600
3 and we actually tested two different

270
00:13:19,600 --> 00:13:20,720
credential types

271
00:13:20,720 --> 00:13:23,839
uh kd and x5t and of course the female

272
00:13:23,839 --> 00:13:25,200
keys were generated

273
00:13:25,200 --> 00:13:28,320
differently at runtime um each time we

274
00:13:28,320 --> 00:13:31,120
tested both directions and and both

275
00:13:31,120 --> 00:13:32,959
combinations of roles and

276
00:13:32,959 --> 00:13:38,160
it worked fine uh next slide please

277
00:13:38,160 --> 00:13:41,199
yeah the other pair was uh chris and me

278
00:13:41,199 --> 00:13:43,519
this time we consider surface with zero

279
00:13:43,519 --> 00:13:46,560
and method zero with credential type x5t

280
00:13:46,560 --> 00:13:48,880
and we followed pretty close essentially

281
00:13:48,880 --> 00:13:51,120
the test vectors in appendix p1

282
00:13:51,120 --> 00:13:53,279
of the draft using those same identity

283
00:13:53,279 --> 00:13:54,880
keys and the same

284
00:13:54,880 --> 00:13:57,120
no real uh certificate advice that you

285
00:13:57,120 --> 00:13:58,000
have there

286
00:13:58,000 --> 00:14:00,079
and again we generated the female keys

287
00:14:00,079 --> 00:14:01,120
at runtime

288
00:14:01,120 --> 00:14:03,920
and this also worked in both direction

289
00:14:03,920 --> 00:14:06,320
and both combination of roles so

290
00:14:06,320 --> 00:14:09,279
i actually don't have any failed test to

291
00:14:09,279 --> 00:14:11,440
report

292
00:14:11,440 --> 00:14:14,320
next slide please

293
00:14:14,480 --> 00:14:16,480
yeah you learn a lot during this in fact

294
00:14:16,480 --> 00:14:18,240
we were already able to to provide some

295
00:14:18,240 --> 00:14:20,079
feedback out of this experience

296
00:14:20,079 --> 00:14:22,959
to to document authors mostly related to

297
00:14:22,959 --> 00:14:24,880
to the message format and how to handle

298
00:14:24,880 --> 00:14:25,519
possible

299
00:14:25,519 --> 00:14:28,639
uh error situations and we plan to run

300
00:14:28,639 --> 00:14:30,240
some more spontaneous

301
00:14:30,240 --> 00:14:32,320
interrupts in the coming weeks uh but

302
00:14:32,320 --> 00:14:34,000
other than that we are trying to set up

303
00:14:34,000 --> 00:14:37,600
um another actual fourth uh interop

304
00:14:37,600 --> 00:14:38,639
event

305
00:14:38,639 --> 00:14:41,440
uh about a month from now during that

306
00:14:41,440 --> 00:14:42,079
week

307
00:14:42,079 --> 00:14:45,199
uh we have a doodle for that uh so

308
00:14:45,199 --> 00:14:46,480
please cast your vote if you are

309
00:14:46,480 --> 00:14:48,160
interested to participate for actual

310
00:14:48,160 --> 00:14:48,959
testing or

311
00:14:48,959 --> 00:14:52,480
even just for uh observing

312
00:14:52,480 --> 00:14:55,600
and that should be it from my side thank

313
00:14:55,600 --> 00:14:57,519
you

314
00:14:57,519 --> 00:15:00,480
okay thanks marco it's great to see uh

315
00:15:00,480 --> 00:15:02,240
new implementers joining the

316
00:15:02,240 --> 00:15:05,279
interrupt testing uh and especially as i

317
00:15:05,279 --> 00:15:07,199
as i understand this was the constrained

318
00:15:07,199 --> 00:15:08,959
implementation of

319
00:15:08,959 --> 00:15:12,000
fba in quantity ng running in a mesh

320
00:15:12,000 --> 00:15:12,800
network so

321
00:15:12,800 --> 00:15:15,680
i mean seeing that uh think that code

322
00:15:15,680 --> 00:15:17,279
run is really great

323
00:15:17,279 --> 00:15:19,519
uh we also had uh have another

324
00:15:19,519 --> 00:15:22,720
implementation that timothy lead

325
00:15:22,720 --> 00:15:26,000
in open wsn and riot which

326
00:15:26,000 --> 00:15:29,360
was tested uh with

327
00:15:29,360 --> 00:15:31,680
the python implementation but to my

328
00:15:31,680 --> 00:15:32,639
understanding this

329
00:15:32,639 --> 00:15:34,720
timothy hasn't participated in the

330
00:15:34,720 --> 00:15:36,320
interrupt uh

331
00:15:36,320 --> 00:15:38,240
in the interrupt testing with the s

332
00:15:38,240 --> 00:15:40,399
hawks the implementation so far

333
00:15:40,399 --> 00:15:43,519
but he will give us a brief update uh

334
00:15:43,519 --> 00:15:45,440
on this implementation and the formal

335
00:15:45,440 --> 00:15:47,360
verification work that is going in

336
00:15:47,360 --> 00:15:48,480
parallel

337
00:15:48,480 --> 00:15:51,759
uh as the next presenter so in case

338
00:15:51,759 --> 00:15:53,680
anyone else has a

339
00:15:53,680 --> 00:15:56,000
question for marco i would give the

340
00:15:56,000 --> 00:15:58,320
floor to timothy

341
00:15:58,320 --> 00:16:00,560
yes

342
00:16:06,839 --> 00:16:09,920
yes hi can you uh

343
00:16:09,920 --> 00:16:13,440
can you hear me uh yes yes we

344
00:16:13,440 --> 00:16:16,160
hear you so i think that was joran was

345
00:16:16,160 --> 00:16:16,959
in the queue

346
00:16:16,959 --> 00:16:19,120
uh jordan did you want to say something

347
00:16:19,120 --> 00:16:20,240
or

348
00:16:20,240 --> 00:16:23,120
i'm just curious about how many

349
00:16:23,120 --> 00:16:25,040
independent implementations did i mean

350
00:16:25,040 --> 00:16:26,639
this this

351
00:16:26,639 --> 00:16:29,360
we look the all three interrupt tests

352
00:16:29,360 --> 00:16:31,120
now how many independent implementation

353
00:16:31,120 --> 00:16:32,079
has been involved

354
00:16:32,079 --> 00:16:34,399
marco dio can you have you counted and

355
00:16:34,399 --> 00:16:36,720
count five in total because the previous

356
00:16:36,720 --> 00:16:38,240
events we posted also

357
00:16:38,240 --> 00:16:39,680
stefans and team of these

358
00:16:39,680 --> 00:16:41,680
implementations okay

359
00:16:41,680 --> 00:16:45,120
thanks okay

360
00:16:45,120 --> 00:16:45,480
um

361
00:16:45,480 --> 00:16:48,720
[Music]

362
00:16:48,720 --> 00:16:50,560
and malaysia already said that okay we

363
00:16:50,560 --> 00:16:52,160
have a python implementation but we also

364
00:16:52,160 --> 00:16:54,399
have a c implementation that's targeting

365
00:16:54,399 --> 00:16:56,079
uh

366
00:16:56,079 --> 00:16:58,800
can you go to the next slides please

367
00:16:58,800 --> 00:16:59,120
yeah

368
00:16:59,120 --> 00:17:00,399
just give me a second folding a little

369
00:17:00,399 --> 00:17:04,959
bit slowly okay great

370
00:17:04,959 --> 00:17:08,319
um so the c implementation of ad hoc is

371
00:17:08,319 --> 00:17:10,480
targeting uh also constrained devices

372
00:17:10,480 --> 00:17:12,880
and contains constraint settings

373
00:17:12,880 --> 00:17:15,520
um so the goal is from this

374
00:17:15,520 --> 00:17:17,359
implementation is to have

375
00:17:17,359 --> 00:17:19,199
all authentication methods supported and

376
00:17:19,199 --> 00:17:20,799
at least the first

377
00:17:20,799 --> 00:17:24,160
four cypher suites um currently it's a

378
00:17:24,160 --> 00:17:25,119
standalone

379
00:17:25,119 --> 00:17:27,839
uh application that you can just build

380
00:17:27,839 --> 00:17:28,400
and

381
00:17:28,400 --> 00:17:32,160
run on linux but the final goal is to

382
00:17:32,160 --> 00:17:32,880
integrate it

383
00:17:32,880 --> 00:17:36,080
in uh riot and and open wsn and then

384
00:17:36,080 --> 00:17:38,000
openwsn will be tested over

385
00:17:38,000 --> 00:17:40,880
uh six dish so over constrained uh

386
00:17:40,880 --> 00:17:42,640
wireless sensor networks

387
00:17:42,640 --> 00:17:45,440
currently uh i've not like malicious had

388
00:17:45,440 --> 00:17:46,799
not really participated with this

389
00:17:46,799 --> 00:17:47,679
implementation

390
00:17:47,679 --> 00:17:50,799
and uh the and the interrupts but i've

391
00:17:50,799 --> 00:17:52,320
been testing it against

392
00:17:52,320 --> 00:17:54,799
the python implementation which has been

393
00:17:54,799 --> 00:17:57,280
uh participating in the end drops

394
00:17:57,280 --> 00:18:01,120
uh all previous interrupts basically

395
00:18:01,120 --> 00:18:03,760
um what is currently implemented is all

396
00:18:03,760 --> 00:18:05,600
authentication methods

397
00:18:05,600 --> 00:18:08,640
um and cypher suites zero and one

398
00:18:08,640 --> 00:18:11,039
although i've only tested signature

399
00:18:11,039 --> 00:18:13,360
paste and cypher suite zero

400
00:18:13,360 --> 00:18:16,080
um and we started uh some initial

401
00:18:16,080 --> 00:18:17,120
integration work

402
00:18:17,120 --> 00:18:20,240
uh in riots with uh francisco

403
00:18:20,240 --> 00:18:23,440
um so there's a pr ready but i think

404
00:18:23,440 --> 00:18:25,520
we're still gonna wait a little bit

405
00:18:25,520 --> 00:18:28,080
uh before we're gonna merge this into

406
00:18:28,080 --> 00:18:28,559
riot

407
00:18:28,559 --> 00:18:30,160
to make the implementation a bit more

408
00:18:30,160 --> 00:18:33,360
robust and and integration open wsn is

409
00:18:33,360 --> 00:18:33,840
also

410
00:18:33,840 --> 00:18:37,360
uh upcoming this week or next week

411
00:18:37,360 --> 00:18:40,639
um next slide please

412
00:18:41,200 --> 00:18:44,640
so uh the work with uh the right people

413
00:18:44,640 --> 00:18:47,840
is part of a bigger collaboration uh

414
00:18:47,840 --> 00:18:50,960
it's a project called write fp where we

415
00:18:50,960 --> 00:18:53,200
are trying to build a future proof

416
00:18:53,200 --> 00:18:56,240
more hardened version of riot and

417
00:18:56,240 --> 00:18:58,559
within this project we also work with

418
00:18:58,559 --> 00:19:00,240
the prosecco team

419
00:19:00,240 --> 00:19:04,240
at inria which is led by karthik and

420
00:19:04,240 --> 00:19:07,280
as a work package within write fp we

421
00:19:07,280 --> 00:19:09,039
want to formally verify

422
00:19:09,039 --> 00:19:11,919
the ad hoc implementation so the goals

423
00:19:11,919 --> 00:19:13,840
of this formal verification

424
00:19:13,840 --> 00:19:16,640
is to have an implementation that is uh

425
00:19:16,640 --> 00:19:18,400
that has memory safety that has

426
00:19:18,400 --> 00:19:20,000
mitigations against

427
00:19:20,000 --> 00:19:23,120
side channel stuff and in general which

428
00:19:23,120 --> 00:19:23,600
is just

429
00:19:23,600 --> 00:19:25,679
functionally correct uh with respect to

430
00:19:25,679 --> 00:19:26,640
the to the

431
00:19:26,640 --> 00:19:30,080
specification of ad-hoc

432
00:19:31,360 --> 00:19:34,640
next slide um so we've had

433
00:19:34,640 --> 00:19:37,760
two meetings so far with karthik the

434
00:19:37,760 --> 00:19:38,000
first

435
00:19:38,000 --> 00:19:41,760
meeting was uh basically a meeting where

436
00:19:41,760 --> 00:19:42,559
we looked at

437
00:19:42,559 --> 00:19:46,000
the ad hoc c code and we got some

438
00:19:46,000 --> 00:19:47,679
remarks from kartik on how we should

439
00:19:47,679 --> 00:19:49,280
structure the code

440
00:19:49,280 --> 00:19:52,480
so it would be easier for us to

441
00:19:52,480 --> 00:19:55,360
do the formal verification so basically

442
00:19:55,360 --> 00:19:57,440
we have a user api

443
00:19:57,440 --> 00:20:01,039
um that will be used by

444
00:20:01,039 --> 00:20:04,159
applications using the ad hoc library

445
00:20:04,159 --> 00:20:06,080
and then there are a bunch of internal

446
00:20:06,080 --> 00:20:07,360
apis um

447
00:20:07,360 --> 00:20:09,200
that can be formally verified

448
00:20:09,200 --> 00:20:11,360
individually so we'll have a message

449
00:20:11,360 --> 00:20:14,159
a processing api a formatting api a

450
00:20:14,159 --> 00:20:15,039
crypto api

451
00:20:15,039 --> 00:20:17,360
which can be mapped to a different

452
00:20:17,360 --> 00:20:18,720
backends

453
00:20:18,720 --> 00:20:21,440
so so far i've been using a wolf ssl as

454
00:20:21,440 --> 00:20:22,320
a backhand

455
00:20:22,320 --> 00:20:25,360
but there's also support for hackl

456
00:20:25,360 --> 00:20:28,720
which is a project also led by prosecco

457
00:20:28,720 --> 00:20:31,360
uh it provides a high assurance

458
00:20:31,360 --> 00:20:32,880
cryptographic library

459
00:20:32,880 --> 00:20:34,960
it's a library where all the

460
00:20:34,960 --> 00:20:36,320
cryptographic protocols

461
00:20:36,320 --> 00:20:39,280
are formally verified and there would

462
00:20:39,280 --> 00:20:43,679
also be a credential api so each api

463
00:20:43,679 --> 00:20:46,840
each api can be formally verified

464
00:20:46,840 --> 00:20:48,559
separately

465
00:20:48,559 --> 00:20:51,760
so what we'll have to do now is build

466
00:20:51,760 --> 00:20:52,880
two

467
00:20:52,880 --> 00:20:55,679
implementations so we'll have to build a

468
00:20:55,679 --> 00:20:56,480
high level

469
00:20:56,480 --> 00:20:59,679
uh obviously correct version

470
00:20:59,679 --> 00:21:02,320
which will be written in hexback this is

471
00:21:02,320 --> 00:21:03,360
a

472
00:21:03,360 --> 00:21:06,720
sub-language or subset of rust and this

473
00:21:06,720 --> 00:21:08,400
will be very short

474
00:21:08,400 --> 00:21:11,120
only a couple hundred of lines of code

475
00:21:11,120 --> 00:21:12,559
and then there will be a low-level

476
00:21:12,559 --> 00:21:13,600
implementation

477
00:21:13,600 --> 00:21:16,559
written in low star and this one will be

478
00:21:16,559 --> 00:21:18,880
a direct translation of the ad hoc c

479
00:21:18,880 --> 00:21:22,240
code combined

480
00:21:22,240 --> 00:21:24,640
so we first need to compile the hex back

481
00:21:24,640 --> 00:21:25,280
code

482
00:21:25,280 --> 00:21:28,640
into a f star code and then combining

483
00:21:28,640 --> 00:21:30,000
the f f-star code and the low

484
00:21:30,000 --> 00:21:33,120
star code we can generate a formally

485
00:21:33,120 --> 00:21:33,679
correct

486
00:21:33,679 --> 00:21:37,360
c code basically and then each different

487
00:21:37,360 --> 00:21:39,200
part of the formerly correct c code can

488
00:21:39,200 --> 00:21:39,760
be

489
00:21:39,760 --> 00:21:42,880
added to the addoxy library

490
00:21:42,880 --> 00:21:45,840
so will be interesting uh once this work

491
00:21:45,840 --> 00:21:48,080
is done to see the performance

492
00:21:48,080 --> 00:21:51,280
of this code on constrained hardware

493
00:21:51,280 --> 00:21:58,400
and see what the tradeoffs are

494
00:21:58,400 --> 00:22:00,720
okay thank you timothy uh thank you

495
00:22:00,720 --> 00:22:01,760
timothy

496
00:22:01,760 --> 00:22:05,600
so uh as a reminder in the last interim

497
00:22:05,600 --> 00:22:06,080
apart

498
00:22:06,080 --> 00:22:08,720
from discussing the uh formal

499
00:22:08,720 --> 00:22:09,520
verification

500
00:22:09,520 --> 00:22:11,840
of the implementation we also had a tick

501
00:22:11,840 --> 00:22:12,960
joining us

502
00:22:12,960 --> 00:22:15,840
uh who discussed the science of his team

503
00:22:15,840 --> 00:22:16,159
and

504
00:22:16,159 --> 00:22:18,320
also doing uh the analysis of the

505
00:22:18,320 --> 00:22:19,280
protocol

506
00:22:19,280 --> 00:22:21,679
itself and that is the activity going on

507
00:22:21,679 --> 00:22:22,559
in parallel

508
00:22:22,559 --> 00:22:25,120
uh in the in the prosecco team where we

509
00:22:25,120 --> 00:22:27,200
also expect inputs

510
00:22:27,200 --> 00:22:30,400
useful for the working group

511
00:22:30,400 --> 00:22:40,480
so do we have any questions for timothy

512
00:22:40,480 --> 00:22:44,880
uh i hear none so uh i propose that

513
00:22:44,880 --> 00:22:47,360
uh we might actually i have a quick

514
00:22:47,360 --> 00:22:48,000
questions

515
00:22:48,000 --> 00:22:51,280
um just on the uh the goals of verifying

516
00:22:51,280 --> 00:22:52,559
the implementation

517
00:22:52,559 --> 00:22:57,120
uh which do you have a pointer to

518
00:22:57,120 --> 00:22:59,840
a description of uh some other instance

519
00:22:59,840 --> 00:23:02,400
of doing this work

520
00:23:02,400 --> 00:23:05,280
uh so they have their there's a paper i

521
00:23:05,280 --> 00:23:05,679
think

522
00:23:05,679 --> 00:23:08,480
uh at least one paper on the hackle

523
00:23:08,480 --> 00:23:09,919
implementation

524
00:23:09,919 --> 00:23:12,960
where they uh do the same uh

525
00:23:12,960 --> 00:23:15,120
the same the same work so where the

526
00:23:15,120 --> 00:23:16,720
heckle implementation also

527
00:23:16,720 --> 00:23:19,919
i can maybe look it up also as memory

528
00:23:19,919 --> 00:23:21,039
save

529
00:23:21,039 --> 00:23:22,400
has some mitigations against side

530
00:23:22,400 --> 00:23:25,600
channels and support

531
00:23:26,320 --> 00:23:28,320
okay i see somebody's put a link in the

532
00:23:28,320 --> 00:23:37,840
chat as well great thanks

533
00:23:38,080 --> 00:23:41,120
okay thank you timothy so i believe the

534
00:23:41,120 --> 00:23:42,320
next speaker

535
00:23:42,320 --> 00:23:46,639
according to the agenda is iran

536
00:23:48,080 --> 00:23:51,440
and uh so here we have consolidated

537
00:23:51,440 --> 00:23:52,559
slides for

538
00:23:52,559 --> 00:23:55,600
the next two agenda items which are the

539
00:23:55,600 --> 00:23:56,400
changes

540
00:23:56,400 --> 00:23:59,440
uh in ad hoc version

541
00:23:59,440 --> 00:24:02,799
five and the open issues

542
00:24:02,799 --> 00:24:06,400
so this will say i suppose the majority

543
00:24:06,400 --> 00:24:07,600
of the meeting time

544
00:24:07,600 --> 00:24:09,919
euron uh will you be presenting the

545
00:24:09,919 --> 00:24:10,960
issues or

546
00:24:10,960 --> 00:24:14,559
uh will or john is presenting the next

547
00:24:14,559 --> 00:24:16,320
part

548
00:24:16,320 --> 00:24:19,440
so i i will i will present the

549
00:24:19,440 --> 00:24:23,279
slides but john wherever

550
00:24:23,279 --> 00:24:25,679
oh okay okay because i had john leading

551
00:24:25,679 --> 00:24:27,600
the the agenda item i thought he would

552
00:24:27,600 --> 00:24:28,799
be presenting but

553
00:24:28,799 --> 00:24:31,120
that's really minor so just let me know

554
00:24:31,120 --> 00:24:32,480
when to change the slide

555
00:24:32,480 --> 00:24:35,440
and that's what it's yours okay thanks

556
00:24:35,440 --> 00:24:37,919
next slide

557
00:24:40,480 --> 00:24:42,480
so yes as malicious said here the three

558
00:24:42,480 --> 00:24:43,919
three parts of this

559
00:24:43,919 --> 00:24:46,159
uh well there are three parts of this

560
00:24:46,159 --> 00:24:48,400
presentation there's uh the changes

561
00:24:48,400 --> 00:24:51,279
in last version uh and then the open

562
00:24:51,279 --> 00:24:52,640
issues but there's a focus

563
00:24:52,640 --> 00:24:55,840
uh on error messages which uh we hope to

564
00:24:55,840 --> 00:24:56,559
resolve

565
00:24:56,559 --> 00:24:58,000
uh this meeting and then there are some

566
00:24:58,000 --> 00:25:02,400
like selected open issues next slide

567
00:25:04,799 --> 00:25:08,000
version 5 is a minor update

568
00:25:08,000 --> 00:25:11,840
and it's

569
00:25:12,159 --> 00:25:13,679
i mean reflecting some of the comments

570
00:25:13,679 --> 00:25:15,200
from the implementers and some some

571
00:25:15,200 --> 00:25:15,679
minor

572
00:25:15,679 --> 00:25:18,720
other changes um so there are

573
00:25:18,720 --> 00:25:21,440
three main main comments that has

574
00:25:21,440 --> 00:25:22,720
resulted in changes

575
00:25:22,720 --> 00:25:26,080
in the in the specification uh

576
00:25:26,080 --> 00:25:29,360
one is regarding the um

577
00:25:29,360 --> 00:25:32,480
the optional subject name

578
00:25:32,480 --> 00:25:35,200
in credits so so for cosy key which is a

579
00:25:35,200 --> 00:25:35,679
map

580
00:25:35,679 --> 00:25:39,360
we need to define a canonical credential

581
00:25:39,360 --> 00:25:41,760
to be verified since that's not

582
00:25:41,760 --> 00:25:43,760
necessarily passed

583
00:25:43,760 --> 00:25:47,279
and in that format of the credits that's

584
00:25:47,279 --> 00:25:48,000
dependent

585
00:25:48,000 --> 00:25:51,279
uh on the

586
00:25:51,279 --> 00:25:54,880
coordinates used and that that also

587
00:25:54,880 --> 00:25:57,520
contains an optional subject name

588
00:25:57,520 --> 00:25:59,279
uh which is the uh which is the

589
00:25:59,279 --> 00:26:02,000
placeholder for an identity

590
00:26:02,000 --> 00:26:05,440
that may be used withdraw public keys

591
00:26:05,440 --> 00:26:08,480
so so that's that was uh that's missing

592
00:26:08,480 --> 00:26:10,799
and that's included now

593
00:26:10,799 --> 00:26:13,200
and there was also from that was from

594
00:26:13,200 --> 00:26:14,480
michelle by the way the first comment

595
00:26:14,480 --> 00:26:14,960
from

596
00:26:14,960 --> 00:26:17,360
peter had a comment about transport on

597
00:26:17,360 --> 00:26:18,640
certificate

598
00:26:18,640 --> 00:26:20,720
and we now put in some text referencing

599
00:26:20,720 --> 00:26:23,600
basically the code cx509

600
00:26:23,600 --> 00:26:27,440
draft and finally marco had some

601
00:26:27,440 --> 00:26:29,440
comments on

602
00:26:29,440 --> 00:26:32,400
the os core secret and salt the length

603
00:26:32,400 --> 00:26:34,159
of those were hardcoded and now we've

604
00:26:34,159 --> 00:26:35,600
introduced

605
00:26:35,600 --> 00:26:37,840
that configurable but with default

606
00:26:37,840 --> 00:26:39,120
values

607
00:26:39,120 --> 00:26:41,919
so those were the changes um that was

608
00:26:41,919 --> 00:26:43,919
proposed and then we also made another

609
00:26:43,919 --> 00:26:45,120
change

610
00:26:45,120 --> 00:26:49,039
um which was basically the end now of a

611
00:26:49,039 --> 00:26:50,960
sequence of name changes to this

612
00:26:50,960 --> 00:26:52,720
key update function so now it's simply

613
00:26:52,720 --> 00:26:55,200
called called ad hoc key update

614
00:26:55,200 --> 00:26:58,880
and it takes us a parameter announce

615
00:26:58,880 --> 00:27:01,919
and it's basically a straightforward

616
00:27:01,919 --> 00:27:05,120
application of the extract

617
00:27:05,120 --> 00:27:08,400
primitive with nonce and key so that's

618
00:27:08,400 --> 00:27:11,440
very simple now we made some

619
00:27:11,440 --> 00:27:13,440
clarifications to error messages

620
00:27:13,440 --> 00:27:15,760
and where the second example is now a

621
00:27:15,760 --> 00:27:18,320
little bit more elaborate than the just

622
00:27:18,320 --> 00:27:21,520
uh simplest case to illustrate how

623
00:27:21,520 --> 00:27:24,960
the cypher suite negotiation works

624
00:27:24,960 --> 00:27:27,760
uh security considerations were updated

625
00:27:27,760 --> 00:27:29,760
target security level was discussed in

626
00:27:29,760 --> 00:27:30,960
an interim meeting there are more

627
00:27:30,960 --> 00:27:33,200
details about that now

628
00:27:33,200 --> 00:27:36,080
um key confirmation uh is also in

629
00:27:36,080 --> 00:27:38,159
relation to message four

630
00:27:38,159 --> 00:27:40,320
we'll come back to that in the issues

631
00:27:40,320 --> 00:27:41,919
and some crypto algorithms that should

632
00:27:41,919 --> 00:27:42,320
not

633
00:27:42,320 --> 00:27:44,159
that must not be used with ad hoc is

634
00:27:44,159 --> 00:27:46,480
included

635
00:27:46,480 --> 00:27:48,720
and finally there were some updates to

636
00:27:48,720 --> 00:27:49,840
the appendices

637
00:27:49,840 --> 00:27:53,840
to appendix on test vectors which is now

638
00:27:53,840 --> 00:27:55,360
actually a test vector for the

639
00:27:55,360 --> 00:27:57,279
specification and

640
00:27:57,279 --> 00:28:00,840
uh including what was in zero four

641
00:28:00,840 --> 00:28:03,520
and now and also the updated text on

642
00:28:03,520 --> 00:28:05,440
applicability statement

643
00:28:05,440 --> 00:28:08,559
more of that later

644
00:28:08,559 --> 00:28:11,679
so these were the changes unless there

645
00:28:11,679 --> 00:28:12,240
are any

646
00:28:12,240 --> 00:28:15,120
comments on this let's move on to the

647
00:28:15,120 --> 00:28:17,840
issues

648
00:28:19,840 --> 00:28:21,840
so the first one is an error message

649
00:28:21,840 --> 00:28:24,720
next slide is thanks

650
00:28:24,720 --> 00:28:31,279
this this we discussed in idf 109 and

651
00:28:31,279 --> 00:28:34,320
basically the question is

652
00:28:34,320 --> 00:28:36,399
we have we have a format for for the

653
00:28:36,399 --> 00:28:37,360
error message what

654
00:28:37,360 --> 00:28:39,360
diagnostic messages needs to be

655
00:28:39,360 --> 00:28:41,760
standardized

656
00:28:41,760 --> 00:28:47,039
and um yeah next slide please

657
00:28:48,080 --> 00:28:50,080
so this is the work we've done since

658
00:28:50,080 --> 00:28:52,640
it's 109 and i will show a sequence of

659
00:28:52,640 --> 00:28:53,120
of

660
00:28:53,120 --> 00:28:56,240
of things we've done try to find out

661
00:28:56,240 --> 00:28:58,000
what what needs to be standardized

662
00:28:58,000 --> 00:29:00,320
and uh sort of how we come back to

663
00:29:00,320 --> 00:29:01,279
almost what we had

664
00:29:01,279 --> 00:29:03,039
in the beginning but anyway let's let's

665
00:29:03,039 --> 00:29:05,039
take the detour here around

666
00:29:05,039 --> 00:29:07,039
how we how we worked on this we we

667
00:29:07,039 --> 00:29:09,039
looked at other protocols

668
00:29:09,039 --> 00:29:12,720
um and error messages so here are tls

669
00:29:12,720 --> 00:29:17,440
error alerts and try to group them

670
00:29:17,520 --> 00:29:20,640
into these seven different

671
00:29:20,640 --> 00:29:24,080
classes and some non-applicable

672
00:29:24,080 --> 00:29:27,760
next slide please

673
00:29:27,760 --> 00:29:29,360
so that and that became sort of the

674
00:29:29,360 --> 00:29:31,039
basis for candidate

675
00:29:31,039 --> 00:29:34,559
error classes railhawk and

676
00:29:34,559 --> 00:29:39,520
it's very um simple to describe it's

677
00:29:39,520 --> 00:29:41,039
first one is related to psychosuite

678
00:29:41,039 --> 00:29:42,720
negotiation second

679
00:29:42,720 --> 00:29:45,200
about syntax and semantics third about

680
00:29:45,200 --> 00:29:46,080
credentials

681
00:29:46,080 --> 00:29:48,000
fourth about intake integrity

682
00:29:48,000 --> 00:29:49,279
verification

683
00:29:49,279 --> 00:29:52,320
fifth about extensions six about

684
00:29:52,320 --> 00:29:55,679
uh authorization but uh

685
00:29:55,679 --> 00:29:57,360
authorization and seven about internal

686
00:29:57,360 --> 00:29:59,039
errors things not related to the

687
00:29:59,039 --> 00:30:00,480
protocol

688
00:30:00,480 --> 00:30:03,360
and then we map that to the protocol

689
00:30:03,360 --> 00:30:04,480
execution

690
00:30:04,480 --> 00:30:09,279
uh processing next slide please

691
00:30:09,279 --> 00:30:11,440
so it's it's fairly simple to see how

692
00:30:11,440 --> 00:30:13,840
the various steps map to

693
00:30:13,840 --> 00:30:16,799
um to the error codes in red here for

694
00:30:16,799 --> 00:30:17,360
the

695
00:30:17,360 --> 00:30:22,799
receiving side and next slide as well

696
00:30:22,799 --> 00:30:25,120
so so that seemed i mean that was sort

697
00:30:25,120 --> 00:30:26,640
of from from the specification point of

698
00:30:26,640 --> 00:30:27,840
view seemed to be

699
00:30:27,840 --> 00:30:30,799
the right level of error codes um and

700
00:30:30,799 --> 00:30:32,240
then we asked iot

701
00:30:32,240 --> 00:30:33,919
ops which is this new working group

702
00:30:33,919 --> 00:30:36,000
working on iot operations

703
00:30:36,000 --> 00:30:37,360
what kind of error codes should we

704
00:30:37,360 --> 00:30:40,959
standardize so next slide please

705
00:30:42,159 --> 00:30:44,559
and they were very uh inspired and

706
00:30:44,559 --> 00:30:45,440
provided

707
00:30:45,440 --> 00:30:48,799
a lot of good input so

708
00:30:48,799 --> 00:30:50,880
i think so you see here there's more

709
00:30:50,880 --> 00:30:52,559
into the if you look through the thread

710
00:30:52,559 --> 00:30:53,919
starting

711
00:30:53,919 --> 00:30:55,919
with the link at the bottom but it's

712
00:30:55,919 --> 00:30:58,240
basically a lot of input saying that yes

713
00:30:58,240 --> 00:30:59,519
error codes you could encode them as

714
00:30:59,519 --> 00:31:01,360
integer values use

715
00:31:01,360 --> 00:31:03,679
a symbolic label reserve one status code

716
00:31:03,679 --> 00:31:05,519
for success

717
00:31:05,519 --> 00:31:07,279
to avoid complexity allow high level

718
00:31:07,279 --> 00:31:09,840
codes with not too much detail

719
00:31:09,840 --> 00:31:11,519
but those implementations that can

720
00:31:11,519 --> 00:31:13,679
afford more complexity can have

721
00:31:13,679 --> 00:31:17,120
detailed diagnostics can have sub codes

722
00:31:17,120 --> 00:31:18,720
these codes could also be standardized

723
00:31:18,720 --> 00:31:20,960
later on

724
00:31:20,960 --> 00:31:24,159
um and then an obvious thing about

725
00:31:24,159 --> 00:31:25,600
security that you

726
00:31:25,600 --> 00:31:27,679
too much error reporting reveals

727
00:31:27,679 --> 00:31:30,080
information for an adversary

728
00:31:30,080 --> 00:31:33,440
and an error message there was a

729
00:31:33,440 --> 00:31:35,760
comment about an error message related

730
00:31:35,760 --> 00:31:37,440
to intermediate progress

731
00:31:37,440 --> 00:31:41,919
was missing in this list of of different

732
00:31:41,919 --> 00:31:45,279
errors um comment about creating a

733
00:31:45,279 --> 00:31:46,159
registry

734
00:31:46,159 --> 00:31:47,760
it seems like a straightforward way to

735
00:31:47,760 --> 00:31:50,320
do to do the extension

736
00:31:50,320 --> 00:31:53,760
and and uh several comments stating that

737
00:31:53,760 --> 00:31:55,039
as few as possible

738
00:31:55,039 --> 00:31:58,159
different messages and the difference in

739
00:31:58,159 --> 00:31:58,480
the

740
00:31:58,480 --> 00:32:01,120
in the error messages should reflect

741
00:32:01,120 --> 00:32:03,200
actionable next steps

742
00:32:03,200 --> 00:32:06,240
uh which is fairly obvious but uh a

743
00:32:06,240 --> 00:32:08,320
little bit difficult to

744
00:32:08,320 --> 00:32:10,320
to realize what what is actually

745
00:32:10,320 --> 00:32:12,320
actually actionable next step and i come

746
00:32:12,320 --> 00:32:14,080
to counter that later

747
00:32:14,080 --> 00:32:16,000
but basically if there's no difference

748
00:32:16,000 --> 00:32:18,880
then diagnosis should be the same

749
00:32:18,880 --> 00:32:21,679
and uh best diagnostic would require

750
00:32:21,679 --> 00:32:22,320
pronational

751
00:32:22,320 --> 00:32:24,880
experience and there is currently no

752
00:32:24,880 --> 00:32:26,399
operational experience about adhoc at

753
00:32:26,399 --> 00:32:26,799
least

754
00:32:26,799 --> 00:32:30,080
but other perhaps other related

755
00:32:30,080 --> 00:32:31,760
protocols could be used and an

756
00:32:31,760 --> 00:32:33,600
interesting

757
00:32:33,600 --> 00:32:35,760
proposal for the type of error message

758
00:32:35,760 --> 00:32:37,760
it could actually be

759
00:32:37,760 --> 00:32:40,159
like the last bullet here saying uh only

760
00:32:40,159 --> 00:32:41,760
my admin can help here's your ticket

761
00:32:41,760 --> 00:32:43,679
though

762
00:32:43,679 --> 00:32:46,640
so next slide please

763
00:32:47,679 --> 00:32:50,799
so um apart from this comment about

764
00:32:50,799 --> 00:32:51,919
intermediary

765
00:32:51,919 --> 00:32:54,960
uh progress there were not many detailed

766
00:32:54,960 --> 00:32:56,640
comments about these

767
00:32:56,640 --> 00:32:59,440
particular error classes which we listed

768
00:32:59,440 --> 00:33:00,080
so

769
00:33:00,080 --> 00:33:02,320
we brought this to the implementers

770
00:33:02,320 --> 00:33:04,000
during hackathon and we had

771
00:33:04,000 --> 00:33:08,240
a couple of sessions discussing this and

772
00:33:08,240 --> 00:33:11,039
as it turns out i mean the only

773
00:33:11,039 --> 00:33:12,399
actionable

774
00:33:12,399 --> 00:33:15,200
error message from the from the point of

775
00:33:15,200 --> 00:33:15,840
view of the

776
00:33:15,840 --> 00:33:18,399
implementation is actually number one

777
00:33:18,399 --> 00:33:20,080
which we already have specified how to

778
00:33:20,080 --> 00:33:21,519
handle

779
00:33:21,519 --> 00:33:24,399
and the other messages they need some

780
00:33:24,399 --> 00:33:27,120
involvement of an administrator

781
00:33:27,120 --> 00:33:29,200
so so that that's sort of it's not

782
00:33:29,200 --> 00:33:31,120
really clear that do we really need to

783
00:33:31,120 --> 00:33:32,480
make these distinctions

784
00:33:32,480 --> 00:33:34,880
from the point of view of the product

785
00:33:34,880 --> 00:33:37,360
this this protocol

786
00:33:37,360 --> 00:33:40,000
um for example number two might not even

787
00:33:40,000 --> 00:33:41,440
be possible to

788
00:33:41,440 --> 00:33:42,960
to send at all if you have a syntax

789
00:33:42,960 --> 00:33:45,200
error you don't know who you

790
00:33:45,200 --> 00:33:48,159
what the connection identifier is uh

791
00:33:48,159 --> 00:33:48,880
number three

792
00:33:48,880 --> 00:33:52,000
might on on the one hand side too in

793
00:33:52,000 --> 00:33:53,919
specific because

794
00:33:53,919 --> 00:33:56,720
uh you can't you could confuse it with

795
00:33:56,720 --> 00:33:58,559
number four for example

796
00:33:58,559 --> 00:34:00,240
uh but on the other hand if you really

797
00:34:00,240 --> 00:34:02,080
want to to analyze this error you need

798
00:34:02,080 --> 00:34:03,600
to be even more specific so

799
00:34:03,600 --> 00:34:06,960
is this the right right level and number

800
00:34:06,960 --> 00:34:07,600
five and six

801
00:34:07,600 --> 00:34:09,918
relates to things that can only can be

802
00:34:09,918 --> 00:34:11,918
determined by an application

803
00:34:11,918 --> 00:34:13,918
and number seven while it could be good

804
00:34:13,918 --> 00:34:15,918
to have a message like

805
00:34:15,918 --> 00:34:18,639
uh an internal error it's my fault try

806
00:34:18,639 --> 00:34:19,280
again

807
00:34:19,280 --> 00:34:22,079
that type of error that could

808
00:34:22,079 --> 00:34:24,239
alternatively be handled by transport

809
00:34:24,239 --> 00:34:26,800
so it's not necessarily needed to have

810
00:34:26,800 --> 00:34:29,440
an ad hoc error for that

811
00:34:29,440 --> 00:34:35,679
so finally slide next slide please

812
00:34:35,679 --> 00:34:37,679
so that leads us back to the beginning

813
00:34:37,679 --> 00:34:39,440
what what should we specify what should

814
00:34:39,440 --> 00:34:41,199
we mandate

815
00:34:41,199 --> 00:34:43,520
uh who who should for whom should this

816
00:34:43,520 --> 00:34:45,199
be actionable

817
00:34:45,199 --> 00:34:47,440
and uh we don't want to add complexity

818
00:34:47,440 --> 00:34:48,800
if it doesn't add

819
00:34:48,800 --> 00:34:51,760
value diagnostic information should not

820
00:34:51,760 --> 00:34:53,440
simplify an attack

821
00:34:53,440 --> 00:34:57,440
um and may use transport error

822
00:34:57,440 --> 00:35:00,240
messages and diagnostics instead and

823
00:35:00,240 --> 00:35:01,200
certainly

824
00:35:01,200 --> 00:35:03,280
you know i mean rely on that in certain

825
00:35:03,280 --> 00:35:05,040
cases

826
00:35:05,040 --> 00:35:08,400
so um that talks in favor of perhaps we

827
00:35:08,400 --> 00:35:10,480
should group the non-actionable

828
00:35:10,480 --> 00:35:14,160
errors into one class and allow

829
00:35:14,160 --> 00:35:16,320
applications to define error message

830
00:35:16,320 --> 00:35:18,720
content

831
00:35:18,960 --> 00:35:21,599
and the proposal coming up of the

832
00:35:21,599 --> 00:35:23,119
hackathon discussion is

833
00:35:23,119 --> 00:35:25,440
what you can see on this slide so we

834
00:35:25,440 --> 00:35:27,200
propose a minor change to

835
00:35:27,200 --> 00:35:30,800
the error message

836
00:35:30,800 --> 00:35:32,640
where we introduce an error code which

837
00:35:32,640 --> 00:35:34,000
is an int

838
00:35:34,000 --> 00:35:37,359
and an error message content

839
00:35:37,359 --> 00:35:40,800
depending on the code

840
00:35:40,800 --> 00:35:43,599
and we propose to make an iana register

841
00:35:43,599 --> 00:35:45,200
but only mandate

842
00:35:45,200 --> 00:35:50,000
initially at least two error codes

843
00:35:50,160 --> 00:35:55,040
um one for an unspecified error

844
00:35:55,040 --> 00:35:57,280
and one which could i could build let's

845
00:35:57,280 --> 00:35:59,760
say number zero and with the diagnostic

846
00:35:59,760 --> 00:36:00,960
message

847
00:36:00,960 --> 00:36:02,800
and one for the selected cypher suite

848
00:36:02,800 --> 00:36:04,240
not supported the error which we

849
00:36:04,240 --> 00:36:05,440
described carefully

850
00:36:05,440 --> 00:36:08,960
today um which also includes the sweet

851
00:36:08,960 --> 00:36:13,599
the sweet supported by the responder

852
00:36:13,599 --> 00:36:14,720
and potentially also define an

853
00:36:14,720 --> 00:36:17,200
application dependent error

854
00:36:17,200 --> 00:36:19,760
so that's where we are today and now i i

855
00:36:19,760 --> 00:36:20,480
talked a lot

856
00:36:20,480 --> 00:36:23,359
please comment what's your view is this

857
00:36:23,359 --> 00:36:24,720
good enough

858
00:36:24,720 --> 00:36:27,839
uh do you want something else

859
00:36:41,860 --> 00:36:43,040
[Music]

860
00:36:43,040 --> 00:36:45,599
so if i'm understanding correctly you

861
00:36:45,599 --> 00:36:46,480
you would

862
00:36:46,480 --> 00:36:49,119
essentially just go for the unspecified

863
00:36:49,119 --> 00:36:49,680
class

864
00:36:49,680 --> 00:36:55,040
and divide these error messages into

865
00:36:57,750 --> 00:36:59,200
[Music]

866
00:36:59,200 --> 00:37:01,660
negotiations error message

867
00:37:01,660 --> 00:37:03,599
[Music]

868
00:37:03,599 --> 00:37:05,839
which is in terms of security in my

869
00:37:05,839 --> 00:37:06,880
understanding

870
00:37:06,880 --> 00:37:09,920
of and in terms of

871
00:37:09,920 --> 00:37:12,800
the revealing the information to the

872
00:37:12,800 --> 00:37:13,920
attacker the best

873
00:37:13,920 --> 00:37:16,560
but in terms of diagnostics and

874
00:37:16,560 --> 00:37:17,760
debugging

875
00:37:17,760 --> 00:37:20,880
uh would leave many implement

876
00:37:20,880 --> 00:37:23,520
many options to the uh implementers to

877
00:37:23,520 --> 00:37:26,240
decide what they want

878
00:37:26,240 --> 00:37:30,000
to implement this correct

879
00:37:30,000 --> 00:37:31,760
yes i think that's that's correct

880
00:37:31,760 --> 00:37:32,220
summary

881
00:37:32,220 --> 00:37:35,580
[Music]

882
00:37:40,800 --> 00:37:43,920
there's a comment by ben on the list

883
00:37:43,920 --> 00:37:46,160
saying the proposal on the slide doesn't

884
00:37:46,160 --> 00:37:48,240
seem to have the reserve and error code

885
00:37:48,240 --> 00:37:49,280
for success

886
00:37:49,280 --> 00:37:53,040
behavior suggested

887
00:37:53,119 --> 00:37:55,040
yes so we could add a code for that as

888
00:37:55,040 --> 00:37:56,160
well that's that's

889
00:37:56,160 --> 00:37:59,040
correct thank you for reminding me uh so

890
00:37:59,040 --> 00:38:00,400
that should be added

891
00:38:00,400 --> 00:38:02,560
i i don't really see i mean then again i

892
00:38:02,560 --> 00:38:05,119
don't really see

893
00:38:05,119 --> 00:38:06,800
yeah we i thought that was a good good

894
00:38:06,800 --> 00:38:09,680
comment but i didn't see the actionable

895
00:38:09,680 --> 00:38:12,240
part of that so i think that was somehow

896
00:38:12,240 --> 00:38:15,119
contradicting the actionable part

897
00:38:15,119 --> 00:38:18,800
and what what there are

898
00:38:18,800 --> 00:38:20,640
if it's success then you would use that

899
00:38:20,640 --> 00:38:21,920
for

900
00:38:21,920 --> 00:38:24,880
with a normal message i suppose go ahead

901
00:38:24,880 --> 00:38:25,520
right

902
00:38:25,520 --> 00:38:27,680
my understanding and this is of course

903
00:38:27,680 --> 00:38:29,040
second or third hand but my

904
00:38:29,040 --> 00:38:30,240
understanding was that

905
00:38:30,240 --> 00:38:34,079
it's very uh useful to be able to have

906
00:38:34,079 --> 00:38:35,599
like a single

907
00:38:35,599 --> 00:38:37,920
data structure element in your

908
00:38:37,920 --> 00:38:39,040
application

909
00:38:39,040 --> 00:38:41,839
that would hold an error message if

910
00:38:41,839 --> 00:38:43,359
there wasn't or would have would hold

911
00:38:43,359 --> 00:38:45,680
their value if there was an error

912
00:38:45,680 --> 00:38:49,119
and that you can put the success code in

913
00:38:49,119 --> 00:38:50,960
if there's not an error and so you have

914
00:38:50,960 --> 00:38:52,320
this sort of

915
00:38:52,320 --> 00:38:55,599
unified data structure that

916
00:38:55,599 --> 00:38:57,839
lets you know both if there was success

917
00:38:57,839 --> 00:38:58,960
or an error

918
00:38:58,960 --> 00:39:00,480
and if there was an error what the error

919
00:39:00,480 --> 00:39:03,280
was and so it's not

920
00:39:03,280 --> 00:39:06,400
intended to be sent over the wire but

921
00:39:06,400 --> 00:39:06,800
it's

922
00:39:06,800 --> 00:39:10,480
just to

923
00:39:10,480 --> 00:39:13,359
have a value for local use that you know

924
00:39:13,359 --> 00:39:14,320
is not going to be

925
00:39:14,320 --> 00:39:16,079
sent out on wires so it's not going to

926
00:39:16,079 --> 00:39:18,560
conflict

927
00:39:19,440 --> 00:39:22,240
if that makes sense

928
00:39:24,079 --> 00:39:27,280
yes well how would you use it then

929
00:39:27,280 --> 00:39:30,640
if it's not sent

930
00:39:33,359 --> 00:39:35,040
you would you would have it within your

931
00:39:35,040 --> 00:39:37,200
implementation and maybe in some of your

932
00:39:37,200 --> 00:39:38,240
log messages

933
00:39:38,240 --> 00:39:42,160
or something like that yeah i mean that

934
00:39:42,160 --> 00:39:44,640
certainly for logs that that that could

935
00:39:44,640 --> 00:39:46,240
definitely make sense

936
00:39:46,240 --> 00:39:48,320
so yeah we could we could specify but i

937
00:39:48,320 --> 00:39:49,680
mean yeah

938
00:39:49,680 --> 00:39:52,000
so maybe i'm stupid here but we're doing

939
00:39:52,000 --> 00:39:53,839
protocol specifications and

940
00:39:53,839 --> 00:39:56,320
this is not visible it doesn't come into

941
00:39:56,320 --> 00:39:58,720
any any calculations as far as i can see

942
00:39:58,720 --> 00:40:01,280
so yeah it's it's essentially just a

943
00:40:01,280 --> 00:40:02,960
promise from us that we will never use

944
00:40:02,960 --> 00:40:04,480
that value

945
00:40:04,480 --> 00:40:06,319
instead of it is protocol visible

946
00:40:06,319 --> 00:40:07,760
basically yeah okay

947
00:40:07,760 --> 00:40:09,920
yeah that makes sense there's no no

948
00:40:09,920 --> 00:40:13,200
issue to to define that

949
00:40:13,520 --> 00:40:15,759
thanks

950
00:40:21,839 --> 00:40:25,280
okay um yeah we've been struggling with

951
00:40:25,280 --> 00:40:26,720
this as you as you hear

952
00:40:26,720 --> 00:40:30,079
and uh i think that if

953
00:40:30,079 --> 00:40:32,720
if you're okay with this let's let's

954
00:40:32,720 --> 00:40:34,160
take this as a starting point

955
00:40:34,160 --> 00:40:37,359
and when people can provide actions sort

956
00:40:37,359 --> 00:40:39,680
of actionable

957
00:40:39,680 --> 00:40:43,119
uh action things that actions that you

958
00:40:43,119 --> 00:40:43,599
could do

959
00:40:43,599 --> 00:40:46,079
when you get when you get some some

960
00:40:46,079 --> 00:40:46,800
other error

961
00:40:46,800 --> 00:40:49,040
then we add that error to the register

962
00:40:49,040 --> 00:40:51,680
so i think it's flexible enough to

963
00:40:51,680 --> 00:40:54,160
to change and we could we could add all

964
00:40:54,160 --> 00:40:55,440
the i mean

965
00:40:55,440 --> 00:40:57,680
in this allocation we could add the

966
00:40:57,680 --> 00:40:58,480
others

967
00:40:58,480 --> 00:41:01,440
the other five sorry other six probably

968
00:41:01,440 --> 00:41:02,000
uh

969
00:41:02,000 --> 00:41:04,960
errors that we have already worked upon

970
00:41:04,960 --> 00:41:05,599
if

971
00:41:05,599 --> 00:41:08,640
they are are needed um and if not well

972
00:41:08,640 --> 00:41:10,400
then applications has to decide

973
00:41:10,400 --> 00:41:14,000
how to use it so okay

974
00:41:14,000 --> 00:41:15,440
unless there are for the comments we'll

975
00:41:15,440 --> 00:41:21,839
move on to the next part

976
00:41:26,880 --> 00:41:30,560
so yeah here are um yeah next slide

977
00:41:30,560 --> 00:41:34,240
a few of the selected a few of the

978
00:41:34,240 --> 00:41:37,680
issues we are working on

979
00:41:37,680 --> 00:41:41,760
the there is a

980
00:41:41,760 --> 00:41:43,839
dependence along among several of the

981
00:41:43,839 --> 00:41:45,440
issues

982
00:41:45,440 --> 00:41:49,760
and one thing that several depends on is

983
00:41:49,760 --> 00:41:52,800
this notion of applicability statement

984
00:41:52,800 --> 00:41:54,880
so i put this first here although that's

985
00:41:54,880 --> 00:41:56,640
perhaps not the

986
00:41:56,640 --> 00:41:59,760
most urgent um so as you

987
00:41:59,760 --> 00:42:03,760
uh recall the applicability statement is

988
00:42:03,760 --> 00:42:06,160
a list of parameters that needs to be

989
00:42:06,160 --> 00:42:08,000
agreed between initiate and responder

990
00:42:08,000 --> 00:42:10,800
for a particular use of ad hoc

991
00:42:10,800 --> 00:42:13,839
and this this could be for example how

992
00:42:13,839 --> 00:42:14,880
you detect

993
00:42:14,880 --> 00:42:18,960
an ad hoc message uh what method

994
00:42:18,960 --> 00:42:22,079
is being used what transport correlation

995
00:42:22,079 --> 00:42:24,079
which optional message fields are

996
00:42:24,079 --> 00:42:25,760
present or should be present

997
00:42:25,760 --> 00:42:29,040
in in with this application what

998
00:42:29,040 --> 00:42:32,160
type of of credits is being used what is

999
00:42:32,160 --> 00:42:32,880
the type of

1000
00:42:32,880 --> 00:42:35,680
identifier of the credential is message

1001
00:42:35,680 --> 00:42:38,800
four used and so on

1002
00:42:38,800 --> 00:42:42,560
and it seems that um so this

1003
00:42:42,560 --> 00:42:44,400
seems to be a good start but we need to

1004
00:42:44,400 --> 00:42:47,119
make further clarifications

1005
00:42:47,119 --> 00:42:50,000
and to address the case for example that

1006
00:42:50,000 --> 00:42:51,359
one endpoint support

1007
00:42:51,359 --> 00:42:54,400
different applicability statements and

1008
00:42:54,400 --> 00:42:56,319
the reason why this is

1009
00:42:56,319 --> 00:42:59,680
needed um is because the ad hoc

1010
00:42:59,680 --> 00:43:02,319
engine depends on being able to

1011
00:43:02,319 --> 00:43:03,760
associate

1012
00:43:03,760 --> 00:43:06,400
a a protocol execution to this

1013
00:43:06,400 --> 00:43:07,839
applicability statement because there

1014
00:43:07,839 --> 00:43:09,440
are a number of decisions

1015
00:43:09,440 --> 00:43:10,960
for example for example the message

1016
00:43:10,960 --> 00:43:14,000
format and other things

1017
00:43:14,000 --> 00:43:16,720
the fields of the message depend on this

1018
00:43:16,720 --> 00:43:18,960
so you need to be able to

1019
00:43:18,960 --> 00:43:23,440
to make this association and

1020
00:43:23,839 --> 00:43:25,680
for example this could be determined by

1021
00:43:25,680 --> 00:43:27,599
the transport by the

1022
00:43:27,599 --> 00:43:30,640
resource the uri used uh

1023
00:43:30,640 --> 00:43:34,000
or something else so we don't want to

1024
00:43:34,000 --> 00:43:37,280
be to restrict on this to restrict it

1025
00:43:37,280 --> 00:43:40,480
but we want to give examples and see how

1026
00:43:40,480 --> 00:43:42,400
because this at the end of the day ad

1027
00:43:42,400 --> 00:43:44,560
hoc is used for a particular purpose

1028
00:43:44,560 --> 00:43:46,319
and adult needs to know what is this

1029
00:43:46,319 --> 00:43:48,160
purpose

1030
00:43:48,160 --> 00:43:49,680
so this is just an information point

1031
00:43:49,680 --> 00:43:50,480
that we will

1032
00:43:50,480 --> 00:43:51,599
[Music]

1033
00:43:51,599 --> 00:43:53,680
try to clarify this more and the

1034
00:43:53,680 --> 00:43:55,680
comments here are welcome

1035
00:43:55,680 --> 00:43:58,480
i don't have a particular question so

1036
00:43:58,480 --> 00:44:01,119
unless there are further comments

1037
00:44:01,119 --> 00:44:04,319
let's move on to the next

1038
00:44:07,119 --> 00:44:10,079
so here's one one case where this is

1039
00:44:10,079 --> 00:44:11,040
useful

1040
00:44:11,040 --> 00:44:13,440
so assuming that we have this uh

1041
00:44:13,440 --> 00:44:16,960
applicability statement in place

1042
00:44:16,960 --> 00:44:20,640
so the question has been around what

1043
00:44:20,640 --> 00:44:23,760
how do we distinguish received messages

1044
00:44:23,760 --> 00:44:25,520
and the proposal for changing message

1045
00:44:25,520 --> 00:44:27,280
one

1046
00:44:27,280 --> 00:44:31,599
and the reason is um

1047
00:44:31,839 --> 00:44:34,720
that currently we we're as you know try

1048
00:44:34,720 --> 00:44:36,959
to

1049
00:44:37,040 --> 00:44:40,319
minimize the number of bytes sent

1050
00:44:40,319 --> 00:44:43,359
so we don't have specific fields for

1051
00:44:43,359 --> 00:44:46,640
which is the type of message

1052
00:44:46,640 --> 00:44:49,599
and that that should be able to infer

1053
00:44:49,599 --> 00:44:50,000
from

1054
00:44:50,000 --> 00:44:52,160
the from the content of the message but

1055
00:44:52,160 --> 00:44:54,480
it's it's also dependent on the expected

1056
00:44:54,480 --> 00:44:56,240
processing

1057
00:44:56,240 --> 00:44:59,359
so what we think is missing is the high

1058
00:44:59,359 --> 00:45:00,960
level processing

1059
00:45:00,960 --> 00:45:04,560
so how you get from the applicability

1060
00:45:04,560 --> 00:45:05,520
statement

1061
00:45:05,520 --> 00:45:07,520
which in turn comes from how the message

1062
00:45:07,520 --> 00:45:09,520
is transported for example

1063
00:45:09,520 --> 00:45:11,680
and that gives you what optional message

1064
00:45:11,680 --> 00:45:12,960
fields are present

1065
00:45:12,960 --> 00:45:15,280
how you find the connection identifiers

1066
00:45:15,280 --> 00:45:16,839
and from that you get the security

1067
00:45:16,839 --> 00:45:18,720
context and

1068
00:45:18,720 --> 00:45:22,160
then the expected message fields in the

1069
00:45:22,160 --> 00:45:26,880
uh in in the received message

1070
00:45:26,880 --> 00:45:29,839
and when you process that then you can

1071
00:45:29,839 --> 00:45:31,200
you process that according to the

1072
00:45:31,200 --> 00:45:32,880
security context

1073
00:45:32,880 --> 00:45:34,480
so you know which message field you

1074
00:45:34,480 --> 00:45:36,079
expect and then you get either an error

1075
00:45:36,079 --> 00:45:37,599
or you get a success

1076
00:45:37,599 --> 00:45:40,079
so that type of processing we think is

1077
00:45:40,079 --> 00:45:41,839
that is missing and we think we need to

1078
00:45:41,839 --> 00:45:42,720
be clarified

1079
00:45:42,720 --> 00:45:45,760
better and so that should lead to

1080
00:45:45,760 --> 00:45:48,599
this to more simpler ways to

1081
00:45:48,599 --> 00:45:50,400
disambiguate to distinguish the

1082
00:45:50,400 --> 00:45:52,160
different messages

1083
00:45:52,160 --> 00:45:54,640
um just to be clear here there should be

1084
00:45:54,640 --> 00:45:55,280
no need

1085
00:45:55,280 --> 00:45:57,040
to a priori restrict the connection

1086
00:45:57,040 --> 00:45:59,440
identifiers to certain spaces

1087
00:45:59,440 --> 00:46:02,000
not even if the endpoint is initiated

1088
00:46:02,000 --> 00:46:04,800
and responded in multiple connections

1089
00:46:04,800 --> 00:46:06,640
and there should not not be any need to

1090
00:46:06,640 --> 00:46:08,480
parse the entire message

1091
00:46:08,480 --> 00:46:10,000
to retrieve the context and it should

1092
00:46:10,000 --> 00:46:11,839
work for for all messages including the

1093
00:46:11,839 --> 00:46:12,960
error message

1094
00:46:12,960 --> 00:46:16,640
so next slide no next slide piece

1095
00:46:18,400 --> 00:46:22,240
so this is the result of the discussion

1096
00:46:22,240 --> 00:46:24,960
so in addition to this

1097
00:46:24,960 --> 00:46:26,880
the clarification of that you need to

1098
00:46:26,880 --> 00:46:28,319
have the applicability statement

1099
00:46:28,319 --> 00:46:31,520
available to be able to distinguish

1100
00:46:31,520 --> 00:46:33,680
to understand what what is the message

1101
00:46:33,680 --> 00:46:35,200
format for example

1102
00:46:35,200 --> 00:46:38,800
we also propose to add one byte

1103
00:46:38,800 --> 00:46:42,880
to message one and this is

1104
00:46:42,880 --> 00:46:45,680
to to simplify we can disambiguate with

1105
00:46:45,680 --> 00:46:46,000
the

1106
00:46:46,000 --> 00:46:48,079
current messages but we wanted that to

1107
00:46:48,079 --> 00:46:49,280
be more simple

1108
00:46:49,280 --> 00:46:52,000
simplified and more robust and that

1109
00:46:52,000 --> 00:46:52,640
would be

1110
00:46:52,640 --> 00:46:56,800
uh adding a null byte seaborn null

1111
00:46:56,800 --> 00:46:59,280
this is only needed for message one

1112
00:46:59,280 --> 00:47:01,680
because all the other messages have

1113
00:47:01,680 --> 00:47:03,440
a connection identifier and by the

1114
00:47:03,440 --> 00:47:04,960
applicability statement you know whether

1115
00:47:04,960 --> 00:47:07,200
it's present or not

1116
00:47:07,200 --> 00:47:08,839
so that that would be the simple

1117
00:47:08,839 --> 00:47:10,880
distinction

1118
00:47:10,880 --> 00:47:13,119
and yeah so this is a result of a long

1119
00:47:13,119 --> 00:47:14,960
discussion i don't know if this

1120
00:47:14,960 --> 00:47:16,800
uh if there are any other comments on

1121
00:47:16,800 --> 00:47:18,160
this

1122
00:47:18,160 --> 00:47:19,920
otherwise we just add it and everyone

1123
00:47:19,920 --> 00:47:21,440
all the implementer seems to be happy

1124
00:47:21,440 --> 00:47:25,839
with this change anyway

1125
00:47:26,160 --> 00:47:28,960
any other comments

1126
00:47:32,240 --> 00:47:35,759
okay next slide please

1127
00:47:37,280 --> 00:47:39,839
uh here are a couple of slides on

1128
00:47:39,839 --> 00:47:41,680
message four

1129
00:47:41,680 --> 00:47:43,520
so as you remember message four was

1130
00:47:43,520 --> 00:47:44,880
introduced for

1131
00:47:44,880 --> 00:47:46,960
uh for key confirmation in the cases

1132
00:47:46,960 --> 00:47:48,640
where the responder

1133
00:47:48,640 --> 00:47:50,960
uh where the initiator does not receive

1134
00:47:50,960 --> 00:47:53,520
any message from the responder

1135
00:47:53,520 --> 00:47:57,200
and this is basically

1136
00:47:57,200 --> 00:48:01,839
a a mac over a transaction hash

1137
00:48:01,839 --> 00:48:05,440
a transcript transcript hash sorry

1138
00:48:05,440 --> 00:48:07,680
and that now there's been a request from

1139
00:48:07,680 --> 00:48:09,839
from one of the implementers to

1140
00:48:09,839 --> 00:48:13,760
support auxiliary data message for

1141
00:48:13,760 --> 00:48:16,720
so that's uh the reason for that is they

1142
00:48:16,720 --> 00:48:18,640
had some use case where

1143
00:48:18,640 --> 00:48:20,960
they wanted to provide a response for

1144
00:48:20,960 --> 00:48:22,000
data provided in

1145
00:48:22,000 --> 00:48:25,440
in message three and initiator is

1146
00:48:25,440 --> 00:48:26,000
commonly

1147
00:48:26,000 --> 00:48:28,559
implemented as in as a client so there

1148
00:48:28,559 --> 00:48:30,880
would be a response and that

1149
00:48:30,880 --> 00:48:33,280
uh yeah so basically that sounds like a

1150
00:48:33,280 --> 00:48:34,160
reasonable request

1151
00:48:34,160 --> 00:48:36,400
and it's straightforward to implement

1152
00:48:36,400 --> 00:48:37,920
because the mac

1153
00:48:37,920 --> 00:48:41,359
today is is implemented as a course

1154
00:48:41,359 --> 00:48:43,040
encrypt with empty

1155
00:48:43,040 --> 00:48:46,400
plain text so we would just add the

1156
00:48:46,400 --> 00:48:47,520
auxiliary data

1157
00:48:47,520 --> 00:48:51,280
and then we would have a encrypted

1158
00:48:51,280 --> 00:48:54,400
serial data does anyone have a problem

1159
00:48:54,400 --> 00:48:56,800
with this

1160
00:49:00,960 --> 00:49:06,000
no problem great next slide please

1161
00:49:08,559 --> 00:49:10,550
another comment related to message four

1162
00:49:10,550 --> 00:49:12,000
[Music]

1163
00:49:12,000 --> 00:49:14,400
so what we the actual text about key

1164
00:49:14,400 --> 00:49:16,400
confirmation or it is

1165
00:49:16,400 --> 00:49:18,319
like this it says that in deployments

1166
00:49:18,319 --> 00:49:20,079
where no protected application message

1167
00:49:20,079 --> 00:49:22,400
is sent from responder to the initiator

1168
00:49:22,400 --> 00:49:25,760
the responder must send message for

1169
00:49:25,760 --> 00:49:26,960
and then there has been a number of

1170
00:49:26,960 --> 00:49:30,319
questions about what if not

1171
00:49:30,319 --> 00:49:32,240
and in this case what if message four

1172
00:49:32,240 --> 00:49:34,400
not reaches the initiator

1173
00:49:34,400 --> 00:49:38,640
for example a lost co-op non-confirmable

1174
00:49:38,640 --> 00:49:42,078
and then the lower layers

1175
00:49:42,160 --> 00:49:45,520
may in uh initiate the resending

1176
00:49:45,520 --> 00:49:47,359
and how does the responder then act to

1177
00:49:47,359 --> 00:49:49,359
another message three

1178
00:49:49,359 --> 00:49:52,559
and we could um make it simple for

1179
00:49:52,559 --> 00:49:53,839
ourselves and say that well

1180
00:49:53,839 --> 00:49:56,079
we assume that the duplication will

1181
00:49:56,079 --> 00:49:56,880
handle this

1182
00:49:56,880 --> 00:50:00,000
and this will never happen or that

1183
00:50:00,000 --> 00:50:02,160
the lower layers will i mean the lower

1184
00:50:02,160 --> 00:50:04,640
layers will take care of it

1185
00:50:04,640 --> 00:50:08,000
but it turns out that um not all

1186
00:50:08,000 --> 00:50:09,760
co-op implementations support

1187
00:50:09,760 --> 00:50:11,200
deduplication because it's

1188
00:50:11,200 --> 00:50:13,359
it's a complication for constrained

1189
00:50:13,359 --> 00:50:14,640
implementations

1190
00:50:14,640 --> 00:50:16,559
and then there is it was a newly uh

1191
00:50:16,559 --> 00:50:18,960
proposal recently a proposal

1192
00:50:18,960 --> 00:50:22,720
and that's issued 85 on stating item

1193
00:50:22,720 --> 00:50:23,760
potency

1194
00:50:23,760 --> 00:50:26,800
so a solution to this would be

1195
00:50:26,800 --> 00:50:29,839
that we we state that ad hoc should

1196
00:50:29,839 --> 00:50:32,000
behave as an either important growth

1197
00:50:32,000 --> 00:50:35,440
resource so means that it would send the

1198
00:50:35,440 --> 00:50:38,160
same resource

1199
00:50:38,839 --> 00:50:43,680
in in response to an earlier message

1200
00:50:43,680 --> 00:50:46,319
and no and obviously we don't want to

1201
00:50:46,319 --> 00:50:47,200
have any

1202
00:50:47,200 --> 00:50:48,800
new security processing of an earlier

1203
00:50:48,800 --> 00:50:51,440
message but we could think of

1204
00:50:51,440 --> 00:50:55,040
situations where responses are cached or

1205
00:50:55,040 --> 00:50:57,200
uh in case of messages for actually

1206
00:50:57,200 --> 00:50:59,200
recreated

1207
00:50:59,200 --> 00:51:00,319
so christian do you want to say

1208
00:51:00,319 --> 00:51:03,599
something about this um

1209
00:51:03,599 --> 00:51:08,640
did i represent your proposal right

1210
00:51:14,400 --> 00:51:16,160
you're breaking up for me could you try

1211
00:51:16,160 --> 00:51:18,399
again

1212
00:51:18,800 --> 00:51:23,040
um i was just saying that if problems

1213
00:51:48,839 --> 00:51:51,839
um

1214
00:51:52,960 --> 00:51:56,079
hello can you hear me yes yes we heard

1215
00:51:56,079 --> 00:51:57,680
it well oh sorry yeah

1216
00:51:57,680 --> 00:52:00,960
something was wrong on my side i

1217
00:52:00,960 --> 00:52:06,319
uh i'm echoing says christian am i still

1218
00:52:06,880 --> 00:52:09,200
we here welcome so there was an issue

1219
00:52:09,200 --> 00:52:11,119
with uh christian while he was speaking

1220
00:52:11,119 --> 00:52:12,000
it was breaking up

1221
00:52:12,000 --> 00:52:13,680
so i asked him if he could write in the

1222
00:52:13,680 --> 00:52:15,440
chat uh

1223
00:52:15,440 --> 00:52:19,839
his comment

1224
00:52:23,440 --> 00:52:25,200
and there i see there's a comment from

1225
00:52:25,200 --> 00:52:28,319
from stephen as well

1226
00:52:28,559 --> 00:52:32,000
uh okay so christian is happy with my my

1227
00:52:32,000 --> 00:52:33,440
my statement i can ask if there are

1228
00:52:33,440 --> 00:52:35,920
questions um

1229
00:52:35,920 --> 00:52:38,240
and the question from stephen why would

1230
00:52:38,240 --> 00:52:39,760
a why would

1231
00:52:39,760 --> 00:52:44,079
ad in message 4 be conflicting

1232
00:52:44,079 --> 00:52:47,839
so my what i'm wondering is if there's

1233
00:52:47,839 --> 00:52:49,440
kind of application data or additional

1234
00:52:49,440 --> 00:52:51,920
data in message four

1235
00:52:51,920 --> 00:52:55,760
you don't know that that's not important

1236
00:52:58,839 --> 00:53:00,319
right

1237
00:53:00,319 --> 00:53:02,880
so that would be a requirement on the

1238
00:53:02,880 --> 00:53:04,960
application data

1239
00:53:04,960 --> 00:53:07,680
sorry auxiliary i i i'm not clear what

1240
00:53:07,680 --> 00:53:08,960
they the

1241
00:53:08,960 --> 00:53:10,720
bounds on the use of this additional

1242
00:53:10,720 --> 00:53:12,800
data for message for it might be

1243
00:53:12,800 --> 00:53:14,240
but it you know it could turn on a light

1244
00:53:14,240 --> 00:53:17,118
switch or something right

1245
00:53:17,780 --> 00:53:21,399
[Music]

1246
00:53:24,559 --> 00:53:27,760
i think yeah auxiliary data and i said

1247
00:53:27,760 --> 00:53:28,559
four is not

1248
00:53:28,559 --> 00:53:30,880
different than auxiliary data in the

1249
00:53:30,880 --> 00:53:33,680
other messages but

1250
00:53:33,680 --> 00:53:36,720
i think formulating this

1251
00:53:36,720 --> 00:53:40,880
the correct way is this i ident potency

1252
00:53:40,880 --> 00:53:42,079
is probably

1253
00:53:42,079 --> 00:53:44,480
will take a while and probably we need

1254
00:53:44,480 --> 00:53:46,559
christian here to

1255
00:53:46,559 --> 00:53:49,599
to help to formulate what

1256
00:53:49,599 --> 00:53:52,800
is actually required here i think

1257
00:53:52,800 --> 00:53:57,079
there's no we don't intend to change any

1258
00:53:57,079 --> 00:54:00,720
security aspects at all

1259
00:54:00,720 --> 00:54:04,880
but it's to make sure that

1260
00:54:04,880 --> 00:54:08,839
it's easy to implement on constrained

1261
00:54:08,839 --> 00:54:11,839
devices

1262
00:54:15,359 --> 00:54:18,720
yeah so i mean basically i i just have a

1263
00:54:18,720 --> 00:54:19,760
concern that

1264
00:54:19,760 --> 00:54:21,760
you know if you look at the web and http

1265
00:54:21,760 --> 00:54:24,079
get it supposedly is item potent but

1266
00:54:24,079 --> 00:54:25,599
reality is different

1267
00:54:25,599 --> 00:54:28,640
um so that's just a concern that if we

1268
00:54:28,640 --> 00:54:29,119
assume

1269
00:54:29,119 --> 00:54:31,040
item potency it might not be it might

1270
00:54:31,040 --> 00:54:34,319
not match reality well

1271
00:54:35,680 --> 00:54:38,399
yeah i

1272
00:54:39,359 --> 00:54:42,480
maybe in the end we will not use the

1273
00:54:42,480 --> 00:54:43,599
word item

1274
00:54:43,599 --> 00:54:46,799
potent but write something else i think

1275
00:54:46,799 --> 00:54:49,839
whatever we write should be correct

1276
00:54:49,839 --> 00:54:52,880
um but i think we are not

1277
00:54:52,880 --> 00:54:56,160
this was suggested by christian

1278
00:54:56,160 --> 00:55:00,000
last week or this week yeah last week so

1279
00:55:00,000 --> 00:55:03,280
i don't think anybody has thought about

1280
00:55:03,280 --> 00:55:04,079
the details

1281
00:55:04,079 --> 00:55:07,839
that much maybe christian

1282
00:55:08,720 --> 00:55:11,599
so on in chat christian is saying that

1283
00:55:11,599 --> 00:55:12,480
on application

1284
00:55:12,480 --> 00:55:14,319
side there might be the need for the

1285
00:55:14,319 --> 00:55:16,079
echo part to really cache

1286
00:55:16,079 --> 00:55:18,839
the auxiliary data path from the

1287
00:55:18,839 --> 00:55:21,839
application

1288
00:55:23,040 --> 00:55:26,400
so i mean i'm not

1289
00:55:26,400 --> 00:55:28,400
i don't know if that would be sufficient

1290
00:55:28,400 --> 00:55:29,520
because if

1291
00:55:29,520 --> 00:55:31,599
if the ad hoc implementation caches that

1292
00:55:31,599 --> 00:55:33,520
and if the auxiliary data means

1293
00:55:33,520 --> 00:55:36,640
change toggle the light switch then

1294
00:55:36,640 --> 00:55:38,240
resending that message could

1295
00:55:38,240 --> 00:55:41,359
affect the state of the world

1296
00:55:41,440 --> 00:55:43,280
so i'm not saying i i'm just raising the

1297
00:55:43,280 --> 00:55:44,559
issue i don't know what the right answer

1298
00:55:44,559 --> 00:55:45,040
is

1299
00:55:45,040 --> 00:55:48,480
but i think it might be an issue

1300
00:55:48,480 --> 00:55:50,319
good point stephen what do you think

1301
00:55:50,319 --> 00:55:52,640
about that

1302
00:55:54,799 --> 00:55:57,440
so i think this is better addressed by

1303
00:55:57,440 --> 00:55:59,200
placing strict bounds on what we can

1304
00:55:59,200 --> 00:56:00,480
have in the ad

1305
00:56:00,480 --> 00:56:03,359
than by requiring that everything be

1306
00:56:03,359 --> 00:56:05,040
handled on the lower layers because

1307
00:56:05,040 --> 00:56:07,280
the lower layers we have planned for

1308
00:56:07,280 --> 00:56:08,559
this

1309
00:56:08,559 --> 00:56:12,319
typically do not cannot do this

1310
00:56:12,960 --> 00:56:14,799
cannot perform the deduplication that

1311
00:56:14,799 --> 00:56:16,319
would be needed and would thus

1312
00:56:16,319 --> 00:56:30,799
let the protocol run out of sync

1313
00:56:30,799 --> 00:56:33,680
okay so so we need to definitely specify

1314
00:56:33,680 --> 00:56:34,960
this carefully and

1315
00:56:34,960 --> 00:56:37,440
make sure that it doesn't create these

1316
00:56:37,440 --> 00:56:39,200
type of effects

1317
00:56:39,200 --> 00:56:41,359
or else we need to yeah i mean that's

1318
00:56:41,359 --> 00:56:42,640
basically we have

1319
00:56:42,640 --> 00:56:45,920
something we need to to work on any any

1320
00:56:45,920 --> 00:56:46,880
other comments

1321
00:56:46,880 --> 00:56:49,280
what this let's not call it safe yes

1322
00:56:49,280 --> 00:56:50,960
that's agreed ben

1323
00:56:50,960 --> 00:56:54,319
um anyone wants to comment on that

1324
00:56:54,319 --> 00:56:57,040
uh comment from me you're on a there's a

1325
00:56:57,040 --> 00:56:57,760
lot of talk

1326
00:56:57,760 --> 00:57:00,640
application data but i think we have

1327
00:57:00,640 --> 00:57:01,200
said that

1328
00:57:01,200 --> 00:57:04,000
80 is not application data it's

1329
00:57:04,000 --> 00:57:05,359
auxiliary

1330
00:57:05,359 --> 00:57:09,680
data um yeah i mean we

1331
00:57:09,680 --> 00:57:11,599
we changed the name at some point and we

1332
00:57:11,599 --> 00:57:13,520
but it's it's clear that

1333
00:57:13,520 --> 00:57:16,160
auxiliary data is intended for as an

1334
00:57:16,160 --> 00:57:18,160
extension

1335
00:57:18,160 --> 00:57:20,480
for the protocol for certain security

1336
00:57:20,480 --> 00:57:22,400
protocols which

1337
00:57:22,400 --> 00:57:26,400
are running in parallel with with ad hoc

1338
00:57:26,400 --> 00:57:29,839
and we have one draft example of that

1339
00:57:29,839 --> 00:57:32,640
so that also relates to what what kind

1340
00:57:32,640 --> 00:57:35,920
of data that actually is

1341
00:57:35,920 --> 00:57:41,040
is passed in the auxiliary data yeah

1342
00:57:41,040 --> 00:57:42,799
i guess the point here is that we have

1343
00:57:42,799 --> 00:57:44,559
no control over what we carry in the

1344
00:57:44,559 --> 00:57:46,799
auxiliary data and that we cannot

1345
00:57:46,799 --> 00:57:54,559
uh guarantee either possibility on it

1346
00:57:54,559 --> 00:57:56,880
john did you want to say something no

1347
00:57:56,880 --> 00:57:59,040
yeah i kind of agree i think

1348
00:57:59,040 --> 00:58:01,040
even if you say this is auxiliary data

1349
00:58:01,040 --> 00:58:02,880
somebody might put something

1350
00:58:02,880 --> 00:58:05,040
else in it and even if we said this must

1351
00:58:05,040 --> 00:58:06,480
be important

1352
00:58:06,480 --> 00:58:09,599
somebody might do something else

1353
00:58:09,599 --> 00:58:12,720
so yeah it's a good it's a good

1354
00:58:12,720 --> 00:58:15,359
it's a good comment it might not be

1355
00:58:15,359 --> 00:58:17,440
sufficient we're just saying

1356
00:58:17,440 --> 00:58:21,920
what we what we intend to use it for

1357
00:58:21,920 --> 00:58:22,799
okay

1358
00:58:22,799 --> 00:58:26,799
great uh any other comments

1359
00:58:28,079 --> 00:58:31,440
yes hi

1360
00:58:31,440 --> 00:58:34,000
um yeah i mean stephen gave the example

1361
00:58:34,000 --> 00:58:35,200
earlier that this this might be an

1362
00:58:35,200 --> 00:58:37,359
instruction to a light switch say

1363
00:58:37,359 --> 00:58:39,359
which obviously is an end point with i

1364
00:58:39,359 --> 00:58:41,520
don't know in most cases binary state

1365
00:58:41,520 --> 00:58:44,960
yeah so in potency really makes um

1366
00:58:44,960 --> 00:58:48,400
some kind of sense there but i think

1367
00:58:48,400 --> 00:58:50,079
given that you don't know whether this

1368
00:58:50,079 --> 00:58:52,240
is going to be used

1369
00:58:52,240 --> 00:58:54,640
for that kind of binary toggle or for

1370
00:58:54,640 --> 00:58:55,520
other

1371
00:58:55,520 --> 00:58:58,480
kinds of application the key thing is

1372
00:58:58,480 --> 00:58:59,040
that the

1373
00:58:59,040 --> 00:59:02,319
behavior should be predictable

1374
00:59:02,319 --> 00:59:04,880
so i you know i think that's probably it

1375
00:59:04,880 --> 00:59:07,280
it's more important to specify

1376
00:59:07,280 --> 00:59:10,079
this is how this should behave rather

1377
00:59:10,079 --> 00:59:11,280
than try to second guess the

1378
00:59:11,280 --> 00:59:12,490
implementations

1379
00:59:12,490 --> 00:59:15,200
[Music]

1380
00:59:15,200 --> 00:59:19,839
yeah good point

1381
00:59:26,799 --> 00:59:28,240
so you're on how do you propose we

1382
00:59:28,240 --> 00:59:32,480
proceed with this issue

1383
00:59:32,480 --> 00:59:35,200
um yeah i think we have a small design

1384
00:59:35,200 --> 00:59:37,760
team in mind who could uh

1385
00:59:37,760 --> 00:59:39,920
tackle the question and try to get back

1386
00:59:39,920 --> 00:59:42,000
with the proposal

1387
00:59:42,000 --> 00:59:44,400
okay yeah so that sounds like a good

1388
00:59:44,400 --> 00:59:46,000
idea get back

1389
00:59:46,000 --> 00:59:47,680
on the github or on the mailing list i

1390
00:59:47,680 --> 00:59:49,119
think that would be ideal if we have

1391
00:59:49,119 --> 00:59:49,520
more

1392
00:59:49,520 --> 00:59:52,319
technical details on this yeah we should

1393
00:59:52,319 --> 00:59:53,760
probably take it to the to the list i

1394
00:59:53,760 --> 00:59:54,640
think

1395
00:59:54,640 --> 00:59:56,960
yeah yeah that sounds like a good idea

1396
00:59:56,960 --> 00:59:57,920
okay

1397
00:59:57,920 --> 01:00:00,559
so unless there are other comments as we

1398
01:00:00,559 --> 01:00:02,960
move on

1399
01:00:05,520 --> 01:00:08,319
yes let's go ahead

1400
01:00:11,839 --> 01:00:15,359
um okay so so that was basically

1401
01:00:15,359 --> 01:00:20,319
the um that was not strictly

1402
01:00:20,319 --> 01:00:21,599
the previous slide was not strictly

1403
01:00:21,599 --> 01:00:23,520
message four but it was not initiated by

1404
01:00:23,520 --> 01:00:25,359
the message for discussion

1405
01:00:25,359 --> 01:00:30,079
uh this is also related to message four

1406
01:00:30,079 --> 01:00:32,319
but this is instead on the initiate

1407
01:00:32,319 --> 01:00:35,200
sorry on the initiator side

1408
01:00:35,200 --> 01:00:40,000
so assuming now that that

1409
01:00:40,000 --> 01:00:41,359
[Music]

1410
01:00:41,359 --> 01:00:43,599
it's the applicability statement that

1411
01:00:43,599 --> 01:00:45,280
states that we should use message four

1412
01:00:45,280 --> 01:00:46,880
or that we should get key confirmation

1413
01:00:46,880 --> 01:00:48,480
in some some other way

1414
01:00:48,480 --> 01:00:52,480
and what what should the initiator do

1415
01:00:52,480 --> 01:00:56,559
when if not receiving key confirmation

1416
01:00:56,559 --> 01:00:59,440
and that's i mean this is basically to

1417
01:00:59,440 --> 01:01:00,960
the border line of transport the

1418
01:01:00,960 --> 01:01:02,319
transport issue but it's

1419
01:01:02,319 --> 01:01:04,240
it's we still need to have a have an

1420
01:01:04,240 --> 01:01:05,839
answer

1421
01:01:05,839 --> 01:01:09,040
and we cannot in general say for i mean

1422
01:01:09,040 --> 01:01:10,319
the questions in this issue

1423
01:01:10,319 --> 01:01:12,559
are things like for how long shall it

1424
01:01:12,559 --> 01:01:13,760
retransmit

1425
01:01:13,760 --> 01:01:15,440
uh when shall it clear the security

1426
01:01:15,440 --> 01:01:16,880
context and i think

1427
01:01:16,880 --> 01:01:18,000
we should need to be clear that in

1428
01:01:18,000 --> 01:01:20,160
general edo cannot answer those

1429
01:01:20,160 --> 01:01:20,960
questions

1430
01:01:20,960 --> 01:01:25,119
this needs to be application input

1431
01:01:25,119 --> 01:01:26,960
and we have so we need we need to make

1432
01:01:26,960 --> 01:01:29,119
this clear somehow and this is sort of

1433
01:01:29,119 --> 01:01:30,960
i think the result of these issues will

1434
01:01:30,960 --> 01:01:34,640
be some additional clarifications

1435
01:01:34,640 --> 01:01:37,440
it's just one thing to note that the key

1436
01:01:37,440 --> 01:01:38,079
confirmation

1437
01:01:38,079 --> 01:01:40,640
really coincides more or less with

1438
01:01:40,640 --> 01:01:42,240
reachability here that

1439
01:01:42,240 --> 01:01:44,000
if if the initiator can verify the

1440
01:01:44,000 --> 01:01:46,880
protected message it means that

1441
01:01:46,880 --> 01:01:50,160
the message has reached

1442
01:01:50,160 --> 01:01:51,839
the other end point and the right key

1443
01:01:51,839 --> 01:01:53,680
was used by the responder so

1444
01:01:53,680 --> 01:01:56,720
and vice versa so it's essentially uh

1445
01:01:56,720 --> 01:01:59,039
as long as the message has not arrived

1446
01:01:59,039 --> 01:02:01,599
the initiative cannot really tell

1447
01:02:01,599 --> 01:02:04,720
either and the current text is then

1448
01:02:04,720 --> 01:02:07,839
saying that

1449
01:02:16,960 --> 01:02:21,119
so it seems we lost the aura

1450
01:02:21,119 --> 01:02:24,720
can you hear me now yeah yeah okay

1451
01:02:24,720 --> 01:02:27,839
so yeah i just wanted people to reflect

1452
01:02:27,839 --> 01:02:28,640
on this is this

1453
01:02:28,640 --> 01:02:31,760
sufficiently clear

1454
01:02:31,760 --> 01:02:34,799
what we are stating initiator

1455
01:02:34,799 --> 01:02:38,559
can securely protect application data

1456
01:02:38,559 --> 01:02:40,960
the initiator should not store the

1457
01:02:40,960 --> 01:02:42,640
keying material that's basically what we

1458
01:02:42,640 --> 01:02:45,680
are recommending here that

1459
01:02:46,720 --> 01:02:49,599
that yes it might be that ad hoc has has

1460
01:02:49,599 --> 01:02:51,440
completed successfully

1461
01:02:51,440 --> 01:02:55,200
um but but the initiator has not

1462
01:02:55,200 --> 01:02:55,839
received

1463
01:02:55,839 --> 01:02:58,640
the final a key confirmation what and

1464
01:02:58,640 --> 01:02:59,680
the actions

1465
01:02:59,680 --> 01:03:03,039
is basically based on

1466
01:03:03,039 --> 01:03:06,640
on on what what is expected from the

1467
01:03:06,640 --> 01:03:08,720
application

1468
01:03:08,720 --> 01:03:10,720
so that's that's the proposal here i

1469
01:03:10,720 --> 01:03:12,559
don't know if anyone has it

1470
01:03:12,559 --> 01:03:15,280
any comments

1471
01:03:15,680 --> 01:03:18,000
or or marco do you have any comments on

1472
01:03:18,000 --> 01:03:20,240
this on how

1473
01:03:20,240 --> 01:03:23,920
how we can answer these issues

1474
01:03:23,920 --> 01:03:25,760
looks good overall and i think in the

1475
01:03:25,760 --> 01:03:27,520
end it boils down to the initiator

1476
01:03:27,520 --> 01:03:29,119
having as part of the

1477
01:03:29,119 --> 01:03:31,119
applicability statement on its side for

1478
01:03:31,119 --> 01:03:32,240
how long

1479
01:03:32,240 --> 01:03:35,119
it can leave it can still live without a

1480
01:03:35,119 --> 01:03:38,400
key confirmation received

1481
01:03:38,880 --> 01:03:40,880
yeah or if that is some something

1482
01:03:40,880 --> 01:03:43,440
something more application

1483
01:03:43,440 --> 01:03:45,280
uh i don't know if that is the part of

1484
01:03:45,280 --> 01:03:46,880
the application statement

1485
01:03:46,880 --> 01:03:51,039
but that's one way of solving it

1486
01:03:51,359 --> 01:03:55,039
okay okay thanks marco

1487
01:03:55,039 --> 01:03:57,520
for the input um i just wanted to check

1488
01:03:57,520 --> 01:03:59,440
if anyone has a better idea otherwise we

1489
01:03:59,440 --> 01:04:00,319
try to

1490
01:04:00,319 --> 01:04:04,160
clarify things um

1491
01:04:04,160 --> 01:04:07,440
in the way i proposed here so please

1492
01:04:07,440 --> 01:04:12,319
move on to the next slide

1493
01:04:12,319 --> 01:04:14,160
and now it's a couple of slides on on

1494
01:04:14,160 --> 01:04:16,880
test vectors

1495
01:04:16,880 --> 01:04:18,640
so there's been requested to have test

1496
01:04:18,640 --> 01:04:20,640
vectors in json

1497
01:04:20,640 --> 01:04:24,960
and that's already used by

1498
01:04:24,960 --> 01:04:28,400
by inria

1499
01:04:28,400 --> 01:04:30,079
and i was going to ask who will be

1500
01:04:30,079 --> 01:04:32,480
involved in making a template and then

1501
01:04:32,480 --> 01:04:34,880
timothy already sent some something

1502
01:04:34,880 --> 01:04:36,240
today i haven't looked at it

1503
01:04:36,240 --> 01:04:37,280
could you please tell me what you've

1504
01:04:37,280 --> 01:04:39,440
done timothy

1505
01:04:39,440 --> 01:04:43,119
uh yes can you hear me yes

1506
01:04:43,119 --> 01:04:46,319
okay great um yeah i've just uploaded

1507
01:04:46,319 --> 01:04:49,839
uh in a comment um what i've done so far

1508
01:04:49,839 --> 01:04:50,880
so

1509
01:04:50,880 --> 01:04:54,079
i've just put all the test vectors and

1510
01:04:54,079 --> 01:04:55,920
from the test factor file and adjacent

1511
01:04:55,920 --> 01:04:57,839
format where i have

1512
01:04:57,839 --> 01:05:02,558
three keys i have an initiator key

1513
01:05:02,640 --> 01:05:04,960
a shared key and a responder key and

1514
01:05:04,960 --> 01:05:07,200
basically all the

1515
01:05:07,200 --> 01:05:09,839
all the messages or all the

1516
01:05:09,839 --> 01:05:11,839
computational values that are being

1517
01:05:11,839 --> 01:05:13,599
computed by both sides

1518
01:05:13,599 --> 01:05:17,039
are structured under the shared key and

1519
01:05:17,039 --> 01:05:18,319
the json

1520
01:05:18,319 --> 01:05:21,039
map and the inputs that are really

1521
01:05:21,039 --> 01:05:22,400
specific to the initiator or the

1522
01:05:22,400 --> 01:05:23,200
responder

1523
01:05:23,200 --> 01:05:26,240
are under those uh keys in the

1524
01:05:26,240 --> 01:05:29,359
into json um the json map but it's

1525
01:05:29,359 --> 01:05:30,079
probably

1526
01:05:30,079 --> 01:05:32,960
clear if you just have a look at the at

1527
01:05:32,960 --> 01:05:34,400
the file i've shared

1528
01:05:34,400 --> 01:05:37,839
and the in the issue then we

1529
01:05:37,839 --> 01:05:40,480
want to explain great great thanks

1530
01:05:40,480 --> 01:05:41,280
thanks very much

1531
01:05:41,280 --> 01:05:44,559
so that's very welcome so what we'll do

1532
01:05:44,559 --> 01:05:46,480
can we do this i mean does this map a

1533
01:05:46,480 --> 01:05:48,960
particular

1534
01:05:48,960 --> 01:05:50,640
cypher cypher sweeto method or can we do

1535
01:05:50,640 --> 01:05:53,200
this in general for

1536
01:05:53,200 --> 01:05:56,799
for for all the test vectors

1537
01:05:57,119 --> 01:05:59,680
um i i think it can be done for all the

1538
01:05:59,680 --> 01:06:01,760
test factors i've been

1539
01:06:01,760 --> 01:06:04,000
using this type of template for for the

1540
01:06:04,000 --> 01:06:05,200
different dust vectors that are in the

1541
01:06:05,200 --> 01:06:06,880
test vector file so i don't really see

1542
01:06:06,880 --> 01:06:08,480
any issues with the

1543
01:06:08,480 --> 01:06:10,160
different types of authentication

1544
01:06:10,160 --> 01:06:12,480
methods or different types of

1545
01:06:12,480 --> 01:06:16,960
of um of cypher suites i guess the only

1546
01:06:16,960 --> 01:06:19,200
thing we need to be clear about is the

1547
01:06:19,200 --> 01:06:20,079
name

1548
01:06:20,079 --> 01:06:22,319
of different names of the keys in the

1549
01:06:22,319 --> 01:06:23,119
json map

1550
01:06:23,119 --> 01:06:26,160
so it's easy

1551
01:06:26,160 --> 01:06:29,200
for uh people to parse it but

1552
01:06:29,200 --> 01:06:32,720
otherwise i don't see any issue good

1553
01:06:32,720 --> 01:06:35,359
thanks very much for this so so then i

1554
01:06:35,359 --> 01:06:36,000
propose

1555
01:06:36,000 --> 01:06:39,760
that we actually start using um

1556
01:06:39,760 --> 01:06:42,720
those and and uh so what we have we have

1557
01:06:42,720 --> 01:06:43,839
had a problem

1558
01:06:43,839 --> 01:06:47,039
with actually creating uh

1559
01:06:47,039 --> 01:06:50,240
we'll come to that in the next slide to

1560
01:06:50,240 --> 01:06:51,920
spend more times on test vector so we

1561
01:06:51,920 --> 01:06:53,839
are we're happy if anyone else wants to

1562
01:06:53,839 --> 01:06:54,720
be involved and

1563
01:06:54,720 --> 01:06:59,038
and this is an excellent input here

1564
01:06:59,119 --> 01:07:02,160
so we should go in this direction and uh

1565
01:07:02,160 --> 01:07:03,520
and yes thank you very much for your

1566
01:07:03,520 --> 01:07:06,640
input i think i hear someone typing its

1567
01:07:06,640 --> 01:07:09,440
probability more

1568
01:07:09,440 --> 01:07:12,160
next slide please

1569
01:07:13,520 --> 01:07:17,039
another uh slide on test vectors

1570
01:07:17,039 --> 01:07:20,319
so um as i mentioned this is

1571
01:07:20,319 --> 01:07:22,960
mainly the work done by john on on test

1572
01:07:22,960 --> 01:07:23,680
vectors

1573
01:07:23,680 --> 01:07:26,400
um started off with francesca and then

1574
01:07:26,400 --> 01:07:27,280
john

1575
01:07:27,280 --> 01:07:31,200
and we realized now that the most wanted

1576
01:07:31,200 --> 01:07:32,160
parts here is to

1577
01:07:32,160 --> 01:07:36,079
to add real certificates and also

1578
01:07:36,079 --> 01:07:39,599
new cypher suites and that is actually

1579
01:07:39,599 --> 01:07:40,000
the

1580
01:07:40,000 --> 01:07:43,599
what is also most consuming here so

1581
01:07:43,599 --> 01:07:47,119
uh again we'd like to ask if anyone is

1582
01:07:47,119 --> 01:07:50,400
interested in in helping out and

1583
01:07:50,400 --> 01:07:52,400
provide the first run of either with

1584
01:07:52,400 --> 01:07:55,680
certs or with suite two and three

1585
01:07:55,680 --> 01:07:59,280
two or three in which case

1586
01:07:59,280 --> 01:08:01,119
uh we could have that as the starting

1587
01:08:01,119 --> 01:08:02,400
point and then we can make interrupt

1588
01:08:02,400 --> 01:08:04,400
tests and then we can

1589
01:08:04,400 --> 01:08:07,119
augment them to two test vectors once

1590
01:08:07,119 --> 01:08:09,520
they have been verified

1591
01:08:09,520 --> 01:08:12,640
uh so the the easy the the three

1592
01:08:12,640 --> 01:08:15,520
sub bullets here uh at the bottom we we

1593
01:08:15,520 --> 01:08:16,960
think we can

1594
01:08:16,960 --> 01:08:19,439
provide but we'd like to have some help

1595
01:08:19,439 --> 01:08:20,799
with uh

1596
01:08:20,799 --> 01:08:25,279
with the two bullets which are still

1597
01:08:25,279 --> 01:08:28,560
unticked anyone that is interested in

1598
01:08:28,560 --> 01:08:31,120
helping out

1599
01:08:36,719 --> 01:08:40,080
so there is mark in the queue

1600
01:08:41,040 --> 01:08:43,279
yeah i think with the tests we rank with

1601
01:08:43,279 --> 01:08:44,479
lydia especially we

1602
01:08:44,479 --> 01:08:47,679
essentially cover cyphers with two so

1603
01:08:47,679 --> 01:08:49,279
the output of those tests would be

1604
01:08:49,279 --> 01:08:52,000
already a starting point

1605
01:08:52,000 --> 01:08:55,759
i believe great yeah great perfect

1606
01:08:55,759 --> 01:08:58,000
uh who did cyphers with three was that

1607
01:08:58,000 --> 01:09:01,120
michelle or or who

1608
01:09:01,120 --> 01:09:03,759
was working on

1609
01:09:05,120 --> 01:09:08,880
sorry i couldn't remember of anyone

1610
01:09:08,880 --> 01:09:11,359
by the way yeah i said yeah michelle was

1611
01:09:11,359 --> 01:09:13,040
going to do this and i said i

1612
01:09:13,040 --> 01:09:14,640
would i was also going to implement this

1613
01:09:14,640 --> 01:09:16,319
but until now i

1614
01:09:16,319 --> 01:09:18,158
really haven't had the time to do this

1615
01:09:18,158 --> 01:09:19,600
so uh

1616
01:09:19,600 --> 01:09:23,279
i don't have uh cypher c2 or three yet

1617
01:09:23,279 --> 01:09:27,520
okay good but great great input marco so

1618
01:09:27,520 --> 01:09:28,719
we'll um

1619
01:09:28,719 --> 01:09:31,679
we'll try to make use of of of the

1620
01:09:31,679 --> 01:09:32,880
results of

1621
01:09:32,880 --> 01:09:35,520
last week's hackathon and and pulled

1622
01:09:35,520 --> 01:09:37,439
this together to

1623
01:09:37,439 --> 01:09:39,839
another test suite uh what about

1624
01:09:39,839 --> 01:09:42,799
certificates is there anyone

1625
01:09:42,799 --> 01:09:45,679
uh i think that stefan made some

1626
01:09:45,679 --> 01:09:47,120
certificate

1627
01:09:47,120 --> 01:09:50,000
uh wrong he said he was interested in

1628
01:09:50,000 --> 01:09:51,198
this difficult run i don't know if

1629
01:09:51,198 --> 01:09:54,158
he is stefan rusty so he's not in the

1630
01:09:54,158 --> 01:09:54,800
meeting i

1631
01:09:54,800 --> 01:09:57,840
i don't see him here perhaps he could

1632
01:09:57,840 --> 01:10:00,640
help up with that part

1633
01:10:00,640 --> 01:10:02,320
okay this was just an open call see if

1634
01:10:02,320 --> 01:10:04,159
there are people um

1635
01:10:04,159 --> 01:10:07,840
available that wants to want to

1636
01:10:07,840 --> 01:10:12,320
to help here how do we use the json

1637
01:10:12,320 --> 01:10:15,679
format now can can we copy it over

1638
01:10:15,679 --> 01:10:18,719
directly to json

1639
01:10:19,040 --> 01:10:22,560
or is anyone interested in helping out

1640
01:10:22,560 --> 01:10:24,960
with that

1641
01:10:29,040 --> 01:10:32,719
no volunteers yeah okay uh copying

1642
01:10:32,719 --> 01:10:35,040
to the json format if we agree on the

1643
01:10:35,040 --> 01:10:36,640
format of the json file

1644
01:10:36,640 --> 01:10:38,960
oh that's excellent thank you very much

1645
01:10:38,960 --> 01:10:40,000
so so we'll

1646
01:10:40,000 --> 01:10:42,719
um what we'll do is that we'll have a

1647
01:10:42,719 --> 01:10:43,679
look at your your

1648
01:10:43,679 --> 01:10:46,640
template we have a discussion uh either

1649
01:10:46,640 --> 01:10:47,280
yeah

1650
01:10:47,280 --> 01:10:49,840
perhaps on the mailing list and then we

1651
01:10:49,840 --> 01:10:50,800
agree on that one

1652
01:10:50,800 --> 01:10:53,760
and then it's great that you could help

1653
01:10:53,760 --> 01:10:54,800
us

1654
01:10:54,800 --> 01:10:57,679
to copy over the text files and then

1655
01:10:57,679 --> 01:10:58,320
we'll

1656
01:10:58,320 --> 01:11:00,320
we'll start filling in in the json

1657
01:11:00,320 --> 01:11:02,880
format excellent thank you very much

1658
01:11:02,880 --> 01:11:05,600
next slide so i just have a clarifying

1659
01:11:05,600 --> 01:11:06,640
question on this slide

1660
01:11:06,640 --> 01:11:09,520
related to the cyber native certificate

1661
01:11:09,520 --> 01:11:11,280
uh could you update us on the

1662
01:11:11,280 --> 01:11:14,080
status of this draft is uh this is a

1663
01:11:14,080 --> 01:11:17,360
draft standardizing cozy right

1664
01:11:17,360 --> 01:11:20,239
yep maybe john wants to say a few words

1665
01:11:20,239 --> 01:11:20,800
yeah

1666
01:11:20,800 --> 01:11:24,840
yeah so that's correct it's in

1667
01:11:24,840 --> 01:11:27,840
version eight or something now there has

1668
01:11:27,840 --> 01:11:28,960
been

1669
01:11:28,960 --> 01:11:32,239
a lot of discussion in cosy so

1670
01:11:32,239 --> 01:11:34,960
this has not been working group adopted

1671
01:11:34,960 --> 01:11:37,360
yet because the charter needs to

1672
01:11:37,360 --> 01:11:40,000
change there have been several requests

1673
01:11:40,000 --> 01:11:40,880
from

1674
01:11:40,880 --> 01:11:43,679
non-authors to from several different

1675
01:11:43,679 --> 01:11:46,000
non-authors to working group adoptes

1676
01:11:46,000 --> 01:11:49,679
and several of the codes in the reams

1677
01:11:49,679 --> 01:11:52,800
have been completely

1678
01:11:52,960 --> 01:11:56,159
taken by this seaboard certificate

1679
01:11:56,159 --> 01:11:58,000
now it's finally in working group

1680
01:11:58,000 --> 01:12:00,640
adoption

1681
01:12:01,600 --> 01:12:04,719
right now um but

1682
01:12:04,719 --> 01:12:08,000
i think it's it's moving ahead quite

1683
01:12:08,000 --> 01:12:12,239
well but it's uh it's

1684
01:12:12,960 --> 01:12:16,960
probably a bit off behind ad hoc

1685
01:12:16,960 --> 01:12:20,239
in maturity yeah but it's

1686
01:12:20,239 --> 01:12:24,799
i think it's starting to be quite stable

1687
01:12:25,679 --> 01:12:29,679
just to jump in uh i i'm the ad for both

1688
01:12:29,679 --> 01:12:33,760
lake and cozy so uh cozy is currently

1689
01:12:33,760 --> 01:12:35,840
in the rechartering process so there's

1690
01:12:35,840 --> 01:12:37,040
going to be

1691
01:12:37,040 --> 01:12:40,239
two rounds of isg review

1692
01:12:40,239 --> 01:12:43,280
and there's a public last call period in

1693
01:12:43,280 --> 01:12:44,880
between the two

1694
01:12:44,880 --> 01:12:47,600
and so we're currently doing the first

1695
01:12:47,600 --> 01:12:49,120
round the internal review

1696
01:12:49,120 --> 01:12:52,159
with isg and iab for the

1697
01:12:52,159 --> 01:12:54,800
new cozy charter that will allow us to

1698
01:12:54,800 --> 01:12:56,239
work on the

1699
01:12:56,239 --> 01:12:59,120
compressed certificates but i don't know

1700
01:12:59,120 --> 01:13:00,320
of any

1701
01:13:00,320 --> 01:13:05,840
uh obstacles to us doing that

1702
01:13:05,920 --> 01:13:08,239
okay thanks man so what i gather is

1703
01:13:08,239 --> 01:13:09,280
essentially that

1704
01:13:09,280 --> 01:13:11,360
the draft is not yet adopted but there

1705
01:13:11,360 --> 01:13:13,520
is a good prospect of it being adopted

1706
01:13:13,520 --> 01:13:16,800
once jose rechargers uh

1707
01:13:16,800 --> 01:13:20,159
so if there are no

1708
01:13:20,159 --> 01:13:23,199
objections i don't see an issue with uh

1709
01:13:23,199 --> 01:13:26,400
having test factors india cox back

1710
01:13:26,400 --> 01:13:33,360
using this using this format

1711
01:13:33,360 --> 01:13:37,599
so with that i propose we move forward

1712
01:13:39,280 --> 01:13:42,400
uh just a final comment from my side um

1713
01:13:42,400 --> 01:13:44,560
on on the certificate so there was

1714
01:13:44,560 --> 01:13:45,520
actually

1715
01:13:45,520 --> 01:13:48,640
uh two implementers requesting

1716
01:13:48,640 --> 01:13:49,840
certificates

1717
01:13:49,840 --> 01:13:52,400
as i remember steve stefan requested

1718
01:13:52,400 --> 01:13:54,480
cbor certificates and peter

1719
01:13:54,480 --> 01:13:57,600
requested ordinary dar uh encoded

1720
01:13:57,600 --> 01:13:58,239
certificates

1721
01:13:58,239 --> 01:14:00,080
so there is actually a request for both

1722
01:14:00,080 --> 01:14:01,440
but we'll we'll see what

1723
01:14:01,440 --> 01:14:02,880
what people can provide here and help

1724
01:14:02,880 --> 01:14:05,679
out with but eventually we should have

1725
01:14:05,679 --> 01:14:14,000
a both okay sorry next slide

1726
01:14:14,000 --> 01:14:16,880
uh okay um how are we time-wise i think

1727
01:14:16,880 --> 01:14:18,480
there are two slides

1728
01:14:18,480 --> 01:14:22,080
left essentially of the main slide we

1729
01:14:22,080 --> 01:14:22,800
have

1730
01:14:22,800 --> 01:14:25,270
one minute so we are i mean

1731
01:14:25,270 --> 01:14:26,640
[Music]

1732
01:14:26,640 --> 01:14:30,480
we are good on time okay good

1733
01:14:30,480 --> 01:14:33,920
so here is another um pretty specific

1734
01:14:33,920 --> 01:14:35,920
issue but still still might be worth

1735
01:14:35,920 --> 01:14:37,920
having uh

1736
01:14:37,920 --> 01:14:39,520
i mean open up for a discussion if there

1737
01:14:39,520 --> 01:14:43,120
is anyone that has a uh

1738
01:14:43,280 --> 01:14:46,880
a opinion so so as you as you remember

1739
01:14:46,880 --> 01:14:47,760
there is this

1740
01:14:47,760 --> 01:14:50,960
uh by-string identifier type

1741
01:14:50,960 --> 01:14:54,400
defined in ad hoc to make a

1742
01:14:54,400 --> 01:14:57,040
compact encoding of short byte strings

1743
01:14:57,040 --> 01:14:57,920
and

1744
01:14:57,920 --> 01:15:00,960
relying on the um

1745
01:15:00,960 --> 01:15:04,239
the use of seabor ins which can be uh

1746
01:15:04,239 --> 01:15:08,159
only one byte long

1747
01:15:08,640 --> 01:15:11,360
but it needs to be mapped back to a byte

1748
01:15:11,360 --> 01:15:11,760
string

1749
01:15:11,760 --> 01:15:13,360
since this is used for connection

1750
01:15:13,360 --> 01:15:15,440
identifiers and connection identifiers

1751
01:15:15,440 --> 01:15:17,600
are used as oscar sender ids which are

1752
01:15:17,600 --> 01:15:19,600
byte strings

1753
01:15:19,600 --> 01:15:21,920
so this is a slight complication in the

1754
01:15:21,920 --> 01:15:24,000
specification but it reduces the ad hoc

1755
01:15:24,000 --> 01:15:27,199
overhead uh it's always it's a note

1756
01:15:27,199 --> 01:15:28,800
that's also used for other things than

1757
01:15:28,800 --> 01:15:30,320
connection identifiers but that's the

1758
01:15:30,320 --> 01:15:31,120
main

1759
01:15:31,120 --> 01:15:33,199
use case and then there are two ideas

1760
01:15:33,199 --> 01:15:35,040
from christian

1761
01:15:35,040 --> 01:15:38,880
in this issue one is to

1762
01:15:38,880 --> 01:15:40,719
to use the same trick for efficient

1763
01:15:40,719 --> 01:15:42,480
coding of longer byte strings

1764
01:15:42,480 --> 01:15:45,760
so not only uh one byte zebra objects

1765
01:15:45,760 --> 01:15:49,600
but uh two by zero objects as well

1766
01:15:49,600 --> 01:15:51,440
and since we anyway have a mapping step

1767
01:15:51,440 --> 01:15:53,120
that that wouldn't necessarily make this

1768
01:15:53,120 --> 01:15:55,040
more complicated

1769
01:15:55,040 --> 01:15:57,920
although this this is a origin or

1770
01:15:57,920 --> 01:16:00,239
already a complication

1771
01:16:00,239 --> 01:16:02,960
and the second idea which is kind of

1772
01:16:02,960 --> 01:16:04,320
independent i think is

1773
01:16:04,320 --> 01:16:07,199
that we would decouple the ad hoc type

1774
01:16:07,199 --> 01:16:07,679
from

1775
01:16:07,679 --> 01:16:10,719
from the oscar sender ide in the sense

1776
01:16:10,719 --> 01:16:12,239
that we would allow adult to

1777
01:16:12,239 --> 01:16:15,600
just use either in or or byte strings

1778
01:16:15,600 --> 01:16:18,239
and then make the mapping at the point

1779
01:16:18,239 --> 01:16:19,199
when

1780
01:16:19,199 --> 01:16:22,320
when we do the rest of the oscar context

1781
01:16:22,320 --> 01:16:24,560
establishment

1782
01:16:24,560 --> 01:16:27,600
which would then um be more more

1783
01:16:27,600 --> 01:16:29,199
flexible in an ad hoc

1784
01:16:29,199 --> 01:16:30,719
and and simply in the adult setting but

1785
01:16:30,719 --> 01:16:32,239
complicate things when you when you do

1786
01:16:32,239 --> 01:16:33,520
the mapping tool score

1787
01:16:33,520 --> 01:16:35,199
i mean you're just pushing the problem

1788
01:16:35,199 --> 01:16:37,360
but but they would maybe be simpler in

1789
01:16:37,360 --> 01:16:38,960
the ad hoc setting so

1790
01:16:38,960 --> 01:16:42,560
so that was um that was if i understand

1791
01:16:42,560 --> 01:16:44,719
the proposal christian do you want to

1792
01:16:44,719 --> 01:16:46,400
add something

1793
01:16:46,400 --> 01:16:48,159
well the only thing i can add here is

1794
01:16:48,159 --> 01:16:50,560
that it's primarily about coding density

1795
01:16:50,560 --> 01:16:52,560
of ad hoc for cases that are not all

1796
01:16:52,560 --> 01:16:53,920
score because all score has this

1797
01:16:53,920 --> 01:16:55,679
requirement to have this mapped in some

1798
01:16:55,679 --> 01:16:58,239
way anyway

1799
01:17:04,560 --> 01:17:08,880
right okay any opinion on this

1800
01:17:08,880 --> 01:17:16,000
should we do any of those

1801
01:17:16,000 --> 01:17:19,280
i think we should analyze and

1802
01:17:19,280 --> 01:17:21,679
discuss i think it's a bit too early to

1803
01:17:21,679 --> 01:17:24,960
say whether we should do anything

1804
01:17:26,320 --> 01:17:30,400
no spontaneous ideas here

1805
01:17:30,400 --> 01:17:31,920
so i think that's i mean it's a really

1806
01:17:31,920 --> 01:17:33,679
late late issue so i i think that's a

1807
01:17:33,679 --> 01:17:34,000
good

1808
01:17:34,000 --> 01:17:35,760
good comment we haven't really thought

1809
01:17:35,760 --> 01:17:37,360
thought through

1810
01:17:37,360 --> 01:17:39,760
um but it's a good it's a good comment

1811
01:17:39,760 --> 01:17:40,800
it's a good issue

1812
01:17:40,800 --> 01:17:44,480
so those interested please

1813
01:17:44,480 --> 01:17:46,560
join the discussion and we try to

1814
01:17:46,560 --> 01:17:49,040
progress it

1815
01:17:50,000 --> 01:17:52,480
next slide

1816
01:17:56,159 --> 01:17:59,120
this was this is the final uh slide

1817
01:17:59,120 --> 01:18:00,000
where i

1818
01:18:00,000 --> 01:18:03,600
sort of highlight issues um

1819
01:18:03,600 --> 01:18:05,840
and then there is this there is a last

1820
01:18:05,840 --> 01:18:06,880
slide on on some

1821
01:18:06,880 --> 01:18:09,199
some other open issues but this slide is

1822
01:18:09,199 --> 01:18:10,400
on the

1823
01:18:10,400 --> 01:18:12,320
mandatory mandatory to implement cypher

1824
01:18:12,320 --> 01:18:13,600
suite which we have been discussed

1825
01:18:13,600 --> 01:18:16,320
for quite some time but it's still a

1826
01:18:16,320 --> 01:18:18,239
final comment here which we i think we

1827
01:18:18,239 --> 01:18:19,040
should just

1828
01:18:19,040 --> 01:18:22,560
bring up um so if you remember the

1829
01:18:22,560 --> 01:18:24,239
outcome of the previous discussion

1830
01:18:24,239 --> 01:18:27,840
we which was basically the problem with

1831
01:18:27,840 --> 01:18:30,400
supporting both ecdsa and eddsa in

1832
01:18:30,400 --> 01:18:32,719
constrained endpoints

1833
01:18:32,719 --> 01:18:36,239
and uh the result of that discussion was

1834
01:18:36,239 --> 01:18:37,679
that we said that the constraint

1835
01:18:37,679 --> 01:18:41,040
endpoint should implement either

1836
01:18:41,280 --> 01:18:44,719
sweet 0 or sweet 2

1837
01:18:44,719 --> 01:18:47,280
corresponding to eddsa or ecdsa

1838
01:18:47,280 --> 01:18:48,800
respectively

1839
01:18:48,800 --> 01:18:50,880
whereas less constrained devices should

1840
01:18:50,880 --> 01:18:53,360
implement both

1841
01:18:53,360 --> 01:18:56,800
and uh now malicia had a comment why

1842
01:18:56,800 --> 01:18:59,280
it's sort of reiterating why again uh

1843
01:18:59,280 --> 01:19:00,960
did we not mandate

1844
01:19:00,960 --> 01:19:04,880
sweet too uh the previous considerations

1845
01:19:04,880 --> 01:19:06,880
maybe at least when it comes to

1846
01:19:06,880 --> 01:19:08,719
performance

1847
01:19:08,719 --> 01:19:12,480
were probably not not accurate

1848
01:19:12,480 --> 01:19:15,920
so processing time code footprint and

1849
01:19:15,920 --> 01:19:17,120
message overhead is

1850
01:19:17,120 --> 01:19:21,199
is not is more advantageous from from an

1851
01:19:21,199 --> 01:19:21,760
ecd

1852
01:19:21,760 --> 01:19:24,400
sa point of view according to militia

1853
01:19:24,400 --> 01:19:25,600
maybe you want to add something here

1854
01:19:25,600 --> 01:19:27,920
malisha

1855
01:19:27,920 --> 01:19:30,400
so yeah maybe just a general remark when

1856
01:19:30,400 --> 01:19:32,000
i was going through this issue

1857
01:19:32,000 --> 01:19:34,800
my feeling was that people were mostly

1858
01:19:34,800 --> 01:19:35,440
giving

1859
01:19:35,440 --> 01:19:37,920
preferences not really based on uh

1860
01:19:37,920 --> 01:19:39,520
technical arguments

1861
01:19:39,520 --> 01:19:43,360
uh behind uh their preference so

1862
01:19:43,360 --> 01:19:46,159
i was trying to steer up the discussion

1863
01:19:46,159 --> 01:19:46,640
uh

1864
01:19:46,640 --> 01:19:49,360
in the direction of really discussing

1865
01:19:49,360 --> 01:19:50,320
the details

1866
01:19:50,320 --> 01:19:53,360
of both aspects that both performance

1867
01:19:53,360 --> 01:19:57,760
and security so uh my argumentation was

1868
01:19:57,760 --> 01:19:59,679
related to these three points that you

1869
01:19:59,679 --> 01:20:01,840
can see on the slide so processing time

1870
01:20:01,840 --> 01:20:02,640
code

1871
01:20:02,640 --> 01:20:05,920
footprint where ecdsa is

1872
01:20:05,920 --> 01:20:10,719
seems to be favored over edsa

1873
01:20:10,719 --> 01:20:13,840
uh and i was asking for more input on

1874
01:20:13,840 --> 01:20:15,360
specific attacks

1875
01:20:15,360 --> 01:20:18,440
and where how do those attacks on

1876
01:20:18,440 --> 01:20:21,679
ecdsa uh reflect

1877
01:20:21,679 --> 01:20:24,960
on start on constrained devices and

1878
01:20:24,960 --> 01:20:26,880
the hardware accelerators that are

1879
01:20:26,880 --> 01:20:28,080
typically

1880
01:20:28,080 --> 01:20:33,840
present on those

1881
01:20:38,800 --> 01:20:42,320
so uh yeah yes you are

1882
01:20:42,320 --> 01:20:45,199
yes i hear you

1883
01:20:45,360 --> 01:20:49,600
so that yeah great thank you um

1884
01:20:49,600 --> 01:20:52,239
and i well i mean for my from from my

1885
01:20:52,239 --> 01:20:53,040
understanding

1886
01:20:53,040 --> 01:20:55,520
we we had a discussion about security

1887
01:20:55,520 --> 01:20:56,560
properties

1888
01:20:56,560 --> 01:21:00,880
maybe john can fill in exactly what was

1889
01:21:01,040 --> 01:21:04,400
what was the reason but but i

1890
01:21:04,400 --> 01:21:07,600
i also remember the different

1891
01:21:07,600 --> 01:21:09,040
i mean having talked to different

1892
01:21:09,040 --> 01:21:10,880
implementers and different

1893
01:21:10,880 --> 01:21:13,440
companies here and and there is a clear

1894
01:21:13,440 --> 01:21:14,400
preference

1895
01:21:14,400 --> 01:21:17,679
for eddsa in certain uh

1896
01:21:17,679 --> 01:21:20,960
settings and uh what that is based on

1897
01:21:20,960 --> 01:21:24,400
i i'm not i mean there's obviously

1898
01:21:24,400 --> 01:21:26,560
is i mean initially there was at least

1899
01:21:26,560 --> 01:21:28,000
the security and performance

1900
01:21:28,000 --> 01:21:30,080
argument i don't know exactly what what

1901
01:21:30,080 --> 01:21:31,920
is the state of matters

1902
01:21:31,920 --> 01:21:34,320
so that was precisely my point i've seen

1903
01:21:34,320 --> 01:21:35,760
preference being given

1904
01:21:35,760 --> 01:21:39,040
on the on the thread but not exactly

1905
01:21:39,040 --> 01:21:41,199
technical argumentation behind that

1906
01:21:41,199 --> 01:21:42,560
preference

1907
01:21:42,560 --> 01:21:45,679
and i would really like to understand

1908
01:21:45,679 --> 01:21:50,080
uh if these are uh i would like to avoid

1909
01:21:50,080 --> 01:21:53,120
having religious kind of preferences and

1910
01:21:53,120 --> 01:21:56,400
really focus on the technical ones and

1911
01:21:56,400 --> 01:21:59,679
uh that's the reason why i

1912
01:21:59,679 --> 01:22:01,679
uh jumped into this discussion trying to

1913
01:22:01,679 --> 01:22:03,040
steer it in this way

1914
01:22:03,040 --> 01:22:10,000
uh stephen did you want to say something

1915
01:22:10,000 --> 01:22:13,040
yes uh so i mean i think i'm not sure

1916
01:22:13,040 --> 01:22:14,480
religion is available here

1917
01:22:14,480 --> 01:22:15,840
it's not really a religion it's more

1918
01:22:15,840 --> 01:22:17,679
what tools are available but what i

1919
01:22:17,679 --> 01:22:19,199
really want johnny cube to say was i

1920
01:22:19,199 --> 01:22:20,880
think at the interim we had

1921
01:22:20,880 --> 01:22:24,239
back in january renee stroke uh raised

1922
01:22:24,239 --> 01:22:26,080
this issue again

1923
01:22:26,080 --> 01:22:28,639
and if i remember the red you know the

1924
01:22:28,639 --> 01:22:29,920
discussion was that we were going to

1925
01:22:29,920 --> 01:22:31,040
have a discussion on the mailing list

1926
01:22:31,040 --> 01:22:31,840
about this

1927
01:22:31,840 --> 01:22:33,679
i can't remember if renee was supposed

1928
01:22:33,679 --> 01:22:35,840
to start it or if we were supposed to

1929
01:22:35,840 --> 01:22:38,480
start it as chairs but we didn't have it

1930
01:22:38,480 --> 01:22:40,159
so i think we should have that

1931
01:22:40,159 --> 01:22:43,280
discussion on the list anyway

1932
01:22:45,040 --> 01:22:46,639
so yeah that's correct i mean there was

1933
01:22:46,639 --> 01:22:48,480
an action point on behalf of renee to

1934
01:22:48,480 --> 01:22:48,880
start

1935
01:22:48,880 --> 01:22:52,239
to restart the thread of pointing to the

1936
01:22:52,239 --> 01:22:55,360
best current practice on selecting on

1937
01:22:55,360 --> 01:22:57,679
selecting an mpi street

1938
01:22:57,679 --> 01:23:00,719
uh which was not

1939
01:23:00,719 --> 01:23:03,760
done in the meantime so yeah we should

1940
01:23:03,760 --> 01:23:05,520
we should get back to that on the link i

1941
01:23:05,520 --> 01:23:07,440
suppose

1942
01:23:07,440 --> 01:23:08,880
right so i guess the bet yeah probably

1943
01:23:08,880 --> 01:23:10,239
better is that we take the action as

1944
01:23:10,239 --> 01:23:11,760
chairs to kick that discussion off

1945
01:23:11,760 --> 01:23:13,840
uh maybe it was just ambiguous as to

1946
01:23:13,840 --> 01:23:15,199
whether it was renee or us who were

1947
01:23:15,199 --> 01:23:16,239
supposed to do it last time

1948
01:23:16,239 --> 01:23:17,760
so that's all that's what i wanted to

1949
01:23:17,760 --> 01:23:19,280
say we should start that

1950
01:23:19,280 --> 01:23:22,159
next week or something

1951
01:23:22,560 --> 01:23:26,960
sounds good john

1952
01:23:26,960 --> 01:23:30,719
yes following i think

1953
01:23:30,719 --> 01:23:34,320
some of the companies wanting to have

1954
01:23:34,320 --> 01:23:35,920
eddsa express that

1955
01:23:35,920 --> 01:23:39,679
offline and not on the github so

1956
01:23:39,679 --> 01:23:43,280
um but i think depending on what

1957
01:23:43,280 --> 01:23:45,520
architect you have there is definitely

1958
01:23:45,520 --> 01:23:47,199
if you have hardware acceleration for

1959
01:23:47,199 --> 01:23:49,679
easy dsa that is faster if you

1960
01:23:49,679 --> 01:23:52,639
don't have that then probably eddsa is

1961
01:23:52,639 --> 01:23:53,840
much faster in

1962
01:23:53,840 --> 01:23:56,000
at least in some implementation seems

1963
01:23:56,000 --> 01:23:57,360
quite tricky to

1964
01:23:57,360 --> 01:24:01,760
compare uh renee stating that

1965
01:24:01,760 --> 01:24:05,920
ecdsa with the random

1966
01:24:05,920 --> 01:24:09,040
random noms is much more secure and then

1967
01:24:09,040 --> 01:24:09,600
there's

1968
01:24:09,600 --> 01:24:11,679
definitely security properties with

1969
01:24:11,679 --> 01:24:12,719
eddsa

1970
01:24:12,719 --> 01:24:15,600
which is much nicer it's much harder to

1971
01:24:15,600 --> 01:24:16,400
make something

1972
01:24:16,400 --> 01:24:19,840
wrong yeah there's one more aspect that

1973
01:24:19,840 --> 01:24:21,280
has been pointed out by

1974
01:24:21,280 --> 01:24:24,159
companies wanting to use eddsa and that

1975
01:24:24,159 --> 01:24:24,719
is

1976
01:24:24,719 --> 01:24:28,480
that curve25519 can be used for

1977
01:24:28,480 --> 01:24:31,920
threshold cryptography and

1978
01:24:31,920 --> 01:24:35,120
one company wanting to use ad hoc

1979
01:24:35,120 --> 01:24:38,159
especially asked for that and

1980
01:24:38,159 --> 01:24:41,440
said that was a main

1981
01:24:41,440 --> 01:24:45,839
benefit with that curve

1982
01:24:46,560 --> 01:24:49,920
okay thank you so could i ask you to

1983
01:24:49,920 --> 01:24:53,199
uh to send an email to the mailing list

1984
01:24:53,199 --> 01:24:54,800
summarizing these arguments that you

1985
01:24:54,800 --> 01:24:57,600
just mentioned in an attempt to restart

1986
01:24:57,600 --> 01:25:00,960
this discussion to converge on it

1987
01:25:00,960 --> 01:25:05,520
yeah i can do that okay

1988
01:25:10,840 --> 01:25:13,840
thanks

1989
01:25:16,480 --> 01:25:19,280
okay so jordan do you have uh any more

1990
01:25:19,280 --> 01:25:20,560
slides

1991
01:25:20,560 --> 01:25:23,440
yeah do you think there was something

1992
01:25:23,440 --> 01:25:24,880
i'm reading the issues

1993
01:25:24,880 --> 01:25:27,520
sorry i'm reading the comments on in the

1994
01:25:27,520 --> 01:25:30,719
uh in the jabber here

1995
01:25:30,960 --> 01:25:32,400
so there's a question about the type i

1996
01:25:32,400 --> 01:25:34,000
don't know if there's a typo here

1997
01:25:34,000 --> 01:25:37,840
this i think this is um

1998
01:25:37,840 --> 01:25:39,840
and then there's a question about a used

1999
01:25:39,840 --> 01:25:40,880
for threshold

2000
01:25:40,880 --> 01:25:42,719
yes that was what i think that was what

2001
01:25:42,719 --> 01:25:44,400
john stated is there some confusion

2002
01:25:44,400 --> 01:25:46,960
about that

2003
01:25:48,239 --> 01:25:50,159
and this seems to be some confusion

2004
01:25:50,159 --> 01:25:51,440
about what

2005
01:25:51,440 --> 01:25:53,440
which actually yeah go ahead someone is

2006
01:25:53,440 --> 01:25:56,320
talking i'm just joining

2007
01:25:56,320 --> 01:25:59,280
next thank you perhaps

2008
01:26:02,000 --> 01:26:05,440
so we have michael in the queue michael

2009
01:26:05,440 --> 01:26:07,679
so i was trying to understand the change

2010
01:26:07,679 --> 01:26:09,440
mandatory ambulance cipher suite to one

2011
01:26:09,440 --> 01:26:11,199
based on ecdsa

2012
01:26:11,199 --> 01:26:13,760
has negative consequences on performance

2013
01:26:13,760 --> 01:26:14,800
security

2014
01:26:14,800 --> 01:26:17,840
so is that comment based upon

2015
01:26:17,840 --> 01:26:20,639
the well first of all i wondered if that

2016
01:26:20,639 --> 01:26:23,920
was that was a typo for edd sa

2017
01:26:23,920 --> 01:26:27,199
um so i can imagine it has a negative

2018
01:26:27,199 --> 01:26:29,280
if you go to edd sa it has negative

2019
01:26:29,280 --> 01:26:31,040
consequences and performance because

2020
01:26:31,040 --> 01:26:33,120
it's not on hardware

2021
01:26:33,120 --> 01:26:36,480
um but i can't understand ecdsa has

2022
01:26:36,480 --> 01:26:38,159
negative consequences on performance

2023
01:26:38,159 --> 01:26:40,000
since it's usually in hardware as the

2024
01:26:40,000 --> 01:26:40,719
next point

2025
01:26:40,719 --> 01:26:44,239
makes uh in la but the security people

2026
01:26:44,239 --> 01:26:44,800
have

2027
01:26:44,800 --> 01:26:47,199
suspicion about certain curves so i'm

2028
01:26:47,199 --> 01:26:49,199
i'm is that what part of that comment is

2029
01:26:49,199 --> 01:26:50,239
based on i just

2030
01:26:50,239 --> 01:26:53,280
maybe we could have some so maybe i can

2031
01:26:53,280 --> 01:26:54,080
quantify

2032
01:26:54,080 --> 01:26:56,800
uh maybe i can clarify so this was uh

2033
01:26:56,800 --> 01:26:58,639
precisely the comment

2034
01:26:58,639 --> 01:27:01,679
the first comment describing the issue

2035
01:27:01,679 --> 01:27:04,880
that i reacted to uh

2036
01:27:04,880 --> 01:27:07,360
regarding the performance of ecdsa

2037
01:27:07,360 --> 01:27:08,880
because it seemed to be like an

2038
01:27:08,880 --> 01:27:10,000
underlying argument

2039
01:27:10,000 --> 01:27:13,600
that edds safer is both performed better

2040
01:27:13,600 --> 01:27:15,760
and is more secure

2041
01:27:15,760 --> 01:27:20,800
which is i brought this up again so uh

2042
01:27:22,239 --> 01:27:25,520
edwards that's yes that

2043
01:27:25,520 --> 01:27:28,719
the adwords ed dsa that performs better

2044
01:27:28,719 --> 01:27:29,440
and has

2045
01:27:29,440 --> 01:27:32,239
has better security so in response to

2046
01:27:32,239 --> 01:27:32,719
that

2047
01:27:32,719 --> 01:27:35,840
i i restarted the thread on github uh

2048
01:27:35,840 --> 01:27:37,760
giving the arguments on performance and

2049
01:27:37,760 --> 01:27:39,280
essentially summarizing the

2050
01:27:39,280 --> 01:27:42,480
the threads uh saying that i mean

2051
01:27:42,480 --> 01:27:45,679
most summarizing that since most of the

2052
01:27:45,679 --> 01:27:48,480
devices have hardware acceleration

2053
01:27:48,480 --> 01:27:51,920
uh for ecdsa the performance

2054
01:27:51,920 --> 01:27:54,800
uh the the statement on performance does

2055
01:27:54,800 --> 01:27:55,760
not hold

2056
01:27:55,760 --> 01:27:59,120
so this is just a quote of the old uh of

2057
01:27:59,120 --> 01:28:01,520
the old uh previous consideration that

2058
01:28:01,520 --> 01:28:02,639
uh that yaran

2059
01:28:02,639 --> 01:28:05,840
uh noted and then as

2060
01:28:05,840 --> 01:28:08,719
to the security aspects my understanding

2061
01:28:08,719 --> 01:28:09,199
is that

2062
01:28:09,199 --> 01:28:12,239
i mean there are speculations on on the

2063
01:28:12,239 --> 01:28:14,080
security of the underlying curve

2064
01:28:14,080 --> 01:28:17,120
of the ecdsa the the nist curves

2065
01:28:17,120 --> 01:28:19,360
but the to my understanding these are

2066
01:28:19,360 --> 01:28:21,520
still speculation

2067
01:28:21,520 --> 01:28:25,360
uh and there are attacks

2068
01:28:25,360 --> 01:28:27,520
uh to my knowledge mostly implementation

2069
01:28:27,520 --> 01:28:30,639
attacks on the ecdsa signature algorithm

2070
01:28:30,639 --> 01:28:33,280
which we might or might not be concerned

2071
01:28:33,280 --> 01:28:33,760
with

2072
01:28:33,760 --> 01:28:36,480
so i was trying to point the the

2073
01:28:36,480 --> 01:28:37,199
discussion

2074
01:28:37,199 --> 01:28:39,840
in the direction of understanding better

2075
01:28:39,840 --> 01:28:42,639
those attacks of ecdsa

2076
01:28:42,639 --> 01:28:45,840
for the devices that we target my

2077
01:28:45,840 --> 01:28:47,360
understanding is that

2078
01:28:47,360 --> 01:28:50,880
there's some ec ec dsa hardware

2079
01:28:50,880 --> 01:28:53,600
acceleration which will accelerate ed

2080
01:28:53,600 --> 01:28:54,440
dsa

2081
01:28:54,440 --> 01:28:58,000
equally but not everybody has that

2082
01:28:58,000 --> 01:29:01,440
flexibility yes that is correct and

2083
01:29:01,440 --> 01:29:03,280
there is a draft

2084
01:29:03,280 --> 01:29:06,719
that is led by rene that explains how to

2085
01:29:06,719 --> 01:29:08,480
do it how to represent

2086
01:29:08,480 --> 01:29:12,159
uh the edwards curve in virus transform

2087
01:29:12,159 --> 01:29:13,520
if i'm not mistaken

2088
01:29:13,520 --> 01:29:16,719
and implement and accelerate it uh

2089
01:29:16,719 --> 01:29:19,280
with these genetic accelerators that

2090
01:29:19,280 --> 01:29:20,000
provide

2091
01:29:20,000 --> 01:29:22,560
genetic parameters for the for the virus

2092
01:29:22,560 --> 01:29:23,679
transform

2093
01:29:23,679 --> 01:29:27,280
but this is not widely available

2094
01:29:27,280 --> 01:29:29,840
it's not it's not unavailable it's just

2095
01:29:29,840 --> 01:29:31,360
not widely available

2096
01:29:31,360 --> 01:29:39,839
yes exactly yeah that's great

2097
01:29:41,840 --> 01:29:44,880
okay so maybe john did you want to say

2098
01:29:44,880 --> 01:29:47,199
something

2099
01:29:47,840 --> 01:29:53,840
you're still in the queue

2100
01:29:54,000 --> 01:29:57,120
okay i guess not so uh yes

2101
01:29:57,120 --> 01:30:00,320
so i propose we move uh move on

2102
01:30:00,320 --> 01:30:03,040
with this on the mailing list because uh

2103
01:30:03,040 --> 01:30:05,040
it is an important issue that we should

2104
01:30:05,040 --> 01:30:08,560
carefully discuss and having the

2105
01:30:08,560 --> 01:30:11,679
mdr in the archives uh

2106
01:30:11,679 --> 01:30:15,760
so uh as i said uh

2107
01:30:15,760 --> 01:30:20,000
the next step is for john to send the uh

2108
01:30:20,000 --> 01:30:22,320
the mail summarizing the technical

2109
01:30:22,320 --> 01:30:24,159
arguments including

2110
01:30:24,159 --> 01:30:26,880
uh the reasoning behind the preference

2111
01:30:26,880 --> 01:30:28,400
of different companies

2112
01:30:28,400 --> 01:30:31,600
wanting to have uh eb dsa

2113
01:30:31,600 --> 01:30:35,840
uh as an mpi street

2114
01:30:37,840 --> 01:30:39,760
do we have any other comments on this

2115
01:30:39,760 --> 01:30:42,000
issue

2116
01:30:46,320 --> 01:30:49,040
no i hear none uh you don't do you want

2117
01:30:49,040 --> 01:30:50,080
to move on

2118
01:30:50,080 --> 01:30:55,360
yes yes thanks for taking the lead

2119
01:30:57,679 --> 01:31:00,880
okay so yeah there are a number of other

2120
01:31:00,880 --> 01:31:01,440
issues

2121
01:31:01,440 --> 01:31:04,880
as well i don't know i mean we can we

2122
01:31:04,880 --> 01:31:05,199
can

2123
01:31:05,199 --> 01:31:08,159
briefly talk about these um if if we

2124
01:31:08,159 --> 01:31:09,280
have the time or

2125
01:31:09,280 --> 01:31:11,520
we don't have anything else we'd like to

2126
01:31:11,520 --> 01:31:12,480
bring up

2127
01:31:12,480 --> 01:31:16,719
um i think that we've gone through

2128
01:31:16,719 --> 01:31:19,679
the main issues already now so and i

2129
01:31:19,679 --> 01:31:20,719
think we have

2130
01:31:20,719 --> 01:31:23,760
good way forward for for those

2131
01:31:23,760 --> 01:31:26,719
so um yeah i'm optimistic that we can

2132
01:31:26,719 --> 01:31:28,239
close a lot of a lot of issues in the

2133
01:31:28,239 --> 01:31:30,320
next

2134
01:31:30,320 --> 01:31:32,960
period here but there are there's been

2135
01:31:32,960 --> 01:31:35,120
raised some some new ideas and new

2136
01:31:35,120 --> 01:31:37,040
issues and there is also some old ones

2137
01:31:37,040 --> 01:31:38,719
which we want to

2138
01:31:38,719 --> 01:31:42,560
fix so one is related to

2139
01:31:42,560 --> 01:31:44,880
opportunistic use case the opportunistic

2140
01:31:44,880 --> 01:31:46,400
use of

2141
01:31:46,400 --> 01:31:49,440
of ad hoc um

2142
01:31:49,440 --> 01:31:51,199
i didn't bring up the issue here do you

2143
01:31:51,199 --> 01:31:52,880
want to elaborate on that

2144
01:31:52,880 --> 01:31:55,360
christian

2145
01:31:56,480 --> 01:31:59,120
just just a few words so this would this

2146
01:31:59,120 --> 01:31:59,760
would allow

2147
01:31:59,760 --> 01:32:01,840
use in cases where there's only one

2148
01:32:01,840 --> 01:32:03,840
party that wants to authenticate the

2149
01:32:03,840 --> 01:32:04,239
other

2150
01:32:04,239 --> 01:32:05,760
and that doesn't need authentication on

2151
01:32:05,760 --> 01:32:07,920
its own i think it should be possible

2152
01:32:07,920 --> 01:32:08,719
but it's

2153
01:32:08,719 --> 01:32:12,000
just not explored currently so

2154
01:32:12,000 --> 01:32:15,280
if if if we spend a bit of time thinking

2155
01:32:15,280 --> 01:32:16,320
of

2156
01:32:16,320 --> 01:32:18,000
whether this can work this might help

2157
01:32:18,000 --> 01:32:21,679
the document on long term run

2158
01:32:25,600 --> 01:32:29,760
um i think there's been similar

2159
01:32:29,760 --> 01:32:33,679
comments offline from a company wanting

2160
01:32:33,679 --> 01:32:34,560
to use

2161
01:32:34,560 --> 01:32:38,560
ad hoc with um

2162
01:32:38,719 --> 01:32:41,199
raw public key by value so basically

2163
01:32:41,199 --> 01:32:43,120
optimistic you

2164
01:32:43,120 --> 01:32:46,159
you don't authenticate the first time

2165
01:32:46,159 --> 01:32:48,800
like ssh you send the keys first time

2166
01:32:48,800 --> 01:32:50,000
and then you

2167
01:32:50,000 --> 01:32:52,880
the second third time you and all the

2168
01:32:52,880 --> 01:32:53,440
for the

2169
01:32:53,440 --> 01:32:55,120
future times you verify that you have

2170
01:32:55,120 --> 01:32:57,600
the same talking to the same um

2171
01:32:57,600 --> 01:32:59,920
device that you talked first time so

2172
01:32:59,920 --> 01:33:01,440
there's there's

2173
01:33:01,440 --> 01:33:04,080
there's two kinds of the one is as you

2174
01:33:04,080 --> 01:33:04,560
mentioned

2175
01:33:04,560 --> 01:33:06,480
with sending the raw public key by value

2176
01:33:06,480 --> 01:33:08,080
that's what ssh would do

2177
01:33:08,080 --> 01:33:10,960
and that's that this is clearly a value

2178
01:33:10,960 --> 01:33:11,360
and

2179
01:33:11,360 --> 01:33:13,280
might and would also apply for the

2180
01:33:13,280 --> 01:33:14,960
application to resource directory

2181
01:33:14,960 --> 01:33:17,040
where devices i have this key and let me

2182
01:33:17,040 --> 01:33:19,040
in again if i can buy this team

2183
01:33:19,040 --> 01:33:20,560
um but something that a device could

2184
01:33:20,560 --> 01:33:23,360
also do is i'm nobody and don't even try

2185
01:33:23,360 --> 01:33:25,360
to remember be me because next time i'll

2186
01:33:25,360 --> 01:33:27,120
be using a different primary key and

2187
01:33:27,120 --> 01:33:28,719
won't say anything

2188
01:33:28,719 --> 01:33:30,719
and for those cases it would be more

2189
01:33:30,719 --> 01:33:32,239
interesting to not send an additional

2190
01:33:32,239 --> 01:33:33,600
raw public key at all

2191
01:33:33,600 --> 01:33:36,320
but explore whether it's my suffice to

2192
01:33:36,320 --> 01:33:36,639
just

2193
01:33:36,639 --> 01:33:40,400
use the um the ephemeral key and not use

2194
01:33:40,400 --> 01:33:42,000
anything in addition and whether that

2195
01:33:42,000 --> 01:33:43,679
fmel key that's already

2196
01:33:43,679 --> 01:33:47,040
being sent can also be used to do this

2197
01:33:47,040 --> 01:33:48,239
kind of

2198
01:33:48,239 --> 01:33:50,560
non-authentication to just say i'm this

2199
01:33:50,560 --> 01:33:52,680
entity but nothing more

2200
01:33:52,680 --> 01:33:55,799
[Music]

2201
01:33:56,320 --> 01:33:59,360
so to me this is a bit

2202
01:33:59,360 --> 01:34:03,520
extending the scope that we agreed on in

2203
01:34:03,520 --> 01:34:05,040
the requirements draft

2204
01:34:05,040 --> 01:34:08,480
where i think uh we explicitly agreed on

2205
01:34:08,480 --> 01:34:12,159
uh tackling a mutually authenticated

2206
01:34:12,159 --> 01:34:12,719
case

2207
01:34:12,719 --> 01:34:16,880
explicitly so uh i don't have anything

2208
01:34:16,880 --> 01:34:19,920
against uh extending that scope but

2209
01:34:19,920 --> 01:34:21,920
this this should be discussed in detail

2210
01:34:21,920 --> 01:34:23,280
on the list uh

2211
01:34:23,280 --> 01:34:26,159
by the working group

2212
01:34:28,639 --> 01:34:32,880
yeah with my coach and also i mean

2213
01:34:32,880 --> 01:34:35,199
would we be wise to extend the scope now

2214
01:34:35,199 --> 01:34:37,120
or would we be wiser to try and finish

2215
01:34:37,120 --> 01:34:40,159
what we're doing first

2216
01:34:42,080 --> 01:34:43,840
if if that's an outcome of that

2217
01:34:43,840 --> 01:34:45,840
discussion i'm also happy with it it's

2218
01:34:45,840 --> 01:34:46,480
just

2219
01:34:46,480 --> 01:34:48,480
it's something that should be visible

2220
01:34:48,480 --> 01:34:50,320
somewhere if the outcome is

2221
01:34:50,320 --> 01:34:54,239
um out of scope find with me too

2222
01:34:54,639 --> 01:34:56,800
i i i forget if we had exactly this

2223
01:34:56,800 --> 01:34:58,400
discussion before with my shirt can you

2224
01:34:58,400 --> 01:35:00,320
remember in the requirements discussion

2225
01:35:00,320 --> 01:35:02,000
the discussion may have been had already

2226
01:35:02,000 --> 01:35:04,159
but i'd have to check on the detail

2227
01:35:04,159 --> 01:35:06,880
so i'm not aware of the i know that we

2228
01:35:06,880 --> 01:35:07,360
have

2229
01:35:07,360 --> 01:35:10,239
a text in the requirements document

2230
01:35:10,239 --> 01:35:11,600
requiring mutual

2231
01:35:11,600 --> 01:35:16,320
authentication and not mentioning uh

2232
01:35:16,560 --> 01:35:20,000
opportunity queues so that that is what

2233
01:35:20,000 --> 01:35:20,960
i was referring to

2234
01:35:20,960 --> 01:35:23,760
yeah right and that was kind of hard one

2235
01:35:23,760 --> 01:35:25,040
now it just happens that

2236
01:35:25,040 --> 01:35:27,600
all of the people who might argue deeply

2237
01:35:27,600 --> 01:35:28,880
about that happen to be off in the

2238
01:35:28,880 --> 01:35:30,400
deprived working group now arguing

2239
01:35:30,400 --> 01:35:31,600
deeply about

2240
01:35:31,600 --> 01:35:35,119
deprived but uh again if we bring this

2241
01:35:35,119 --> 01:35:36,239
up again

2242
01:35:36,239 --> 01:35:39,360
we may uh end up with a large discussion

2243
01:35:39,360 --> 01:35:41,199
so it'd be a little bit i think about it

2244
01:35:41,199 --> 01:35:43,840
ahead of time first

2245
01:35:43,840 --> 01:35:47,440
i i don't think this was discussed in

2246
01:35:47,440 --> 01:35:50,159
detail i think it was just um suggested

2247
01:35:50,159 --> 01:35:51,600
mutual authentication

2248
01:35:51,600 --> 01:35:53,280
but i agree i think we should have the

2249
01:35:53,280 --> 01:35:55,440
discussion but this might be some

2250
01:35:55,440 --> 01:35:56,080
extension

2251
01:35:56,080 --> 01:35:59,199
work later and not

2252
01:35:59,199 --> 01:36:02,400
now and sending raw public keys by value

2253
01:36:02,400 --> 01:36:02,880
might

2254
01:36:02,880 --> 01:36:07,920
require cozy work um

2255
01:36:08,880 --> 01:36:11,920
yeah i i uh if i make uh

2256
01:36:11,920 --> 01:36:15,040
um i think uh i mean if you

2257
01:36:15,040 --> 01:36:16,800
look at the two cases that christian

2258
01:36:16,800 --> 01:36:18,320
outlined here i think the the the

2259
01:36:18,320 --> 01:36:20,239
passing

2260
01:36:20,239 --> 01:36:22,480
passing publicly by value that seems to

2261
01:36:22,480 --> 01:36:24,239
be well founded

2262
01:36:24,239 --> 01:36:29,360
and that's uh that's issue 82 actually

2263
01:36:29,360 --> 01:36:32,400
that we like to have a cozy header map

2264
01:36:32,400 --> 01:36:34,480
for public key because that's not there

2265
01:36:34,480 --> 01:36:36,159
is no no

2266
01:36:36,159 --> 01:36:38,080
there is no header map actually defined

2267
01:36:38,080 --> 01:36:40,880
uh for that

2268
01:36:41,119 --> 01:36:43,280
uh but the other case where you actually

2269
01:36:43,280 --> 01:36:44,880
you're you're not sending a key and just

2270
01:36:44,880 --> 01:36:46,400
reusing in a female

2271
01:36:46,400 --> 01:36:48,000
i mean you're using that seems a little

2272
01:36:48,000 --> 01:36:50,080
bit more speculative

2273
01:36:50,080 --> 01:36:53,840
in my mind so i i would like to keep

2274
01:36:53,840 --> 01:36:57,119
half of the uh this case here but but

2275
01:36:57,119 --> 01:37:01,840
perhaps not everything in this issue

2276
01:37:01,840 --> 01:37:07,840
okay any other comments

2277
01:37:07,920 --> 01:37:11,360
and there's some ongoing uh yeah

2278
01:37:11,360 --> 01:37:12,639
okay so that's just michael and

2279
01:37:12,639 --> 01:37:14,719
christian then next

2280
01:37:14,719 --> 01:37:18,400
um deterministic seaborn encoding john

2281
01:37:18,400 --> 01:37:19,440
do you want to say

2282
01:37:19,440 --> 01:37:22,239
something about that

2283
01:37:23,679 --> 01:37:26,960
yeah so this was brought up

2284
01:37:26,960 --> 01:37:30,639
in a discussion with a

2285
01:37:30,639 --> 01:37:32,719
company implementing this and they

2286
01:37:32,719 --> 01:37:34,560
started ask question

2287
01:37:34,560 --> 01:37:37,840
about the terminus and uh

2288
01:37:37,840 --> 01:37:40,560
we thought i opened an issue i think we

2289
01:37:40,560 --> 01:37:41,040
should

2290
01:37:41,040 --> 01:37:44,000
go through the protocol and see if there

2291
01:37:44,000 --> 01:37:45,119
are

2292
01:37:45,119 --> 01:37:47,280
any places where things are not

2293
01:37:47,280 --> 01:37:48,159
deterministic

2294
01:37:48,159 --> 01:37:51,360
i think for example the integers are

2295
01:37:51,360 --> 01:37:53,840
probably not specified currently that

2296
01:37:53,840 --> 01:37:56,560
they are encoded in the smallest

2297
01:37:56,560 --> 01:37:59,679
possible way even if that was the

2298
01:37:59,679 --> 01:38:02,719
intention when we wrote the draft

2299
01:38:02,719 --> 01:38:05,760
and i don't think sieber forces you to

2300
01:38:05,760 --> 01:38:06,560
do that by

2301
01:38:06,560 --> 01:38:10,400
default so i think we explicitly need to

2302
01:38:10,400 --> 01:38:13,040
state that but i think this is not

2303
01:38:13,040 --> 01:38:14,800
anything that would change the protocol

2304
01:38:14,800 --> 01:38:17,520
but it would be a clarification in

2305
01:38:17,520 --> 01:38:19,199
in the specification that you cannot do

2306
01:38:19,199 --> 01:38:22,239
in any other way

2307
01:38:22,719 --> 01:38:26,239
but doesn't this really belong to seabor

2308
01:38:26,239 --> 01:38:29,280
specifications and that's why

2309
01:38:29,280 --> 01:38:31,840
i

2310
01:38:35,440 --> 01:38:38,639
i don't think seabor is

2311
01:38:38,639 --> 01:38:41,280
deterministic in this way there is

2312
01:38:41,280 --> 01:38:42,080
seabor has

2313
01:38:42,080 --> 01:38:45,920
several ways to encode an int

2314
01:38:45,920 --> 01:38:48,400
there might be some part of the seaboard

2315
01:38:48,400 --> 01:38:50,320
say this is how you get the

2316
01:38:50,320 --> 01:38:53,119
deterministic and coding and then maybe

2317
01:38:53,119 --> 01:38:54,239
ad hoc should

2318
01:38:54,239 --> 01:38:56,960
refer to that part but otherwise you can

2319
01:38:56,960 --> 01:38:58,000
encode an integer

2320
01:38:58,000 --> 01:39:02,880
as a single byte or two by 16-bit 8-bit

2321
01:39:02,880 --> 01:39:06,560
32-bit i think that's up to you i don't

2322
01:39:06,560 --> 01:39:07,040
think

2323
01:39:07,040 --> 01:39:11,280
c-board forces you to use the smallest

2324
01:39:11,280 --> 01:39:15,440
but if if i'm wrong please correct me

2325
01:39:18,800 --> 01:39:20,880
yeah so i'm not aware of those details

2326
01:39:20,880 --> 01:39:21,920
it would be maybe good

2327
01:39:21,920 --> 01:39:23,760
to have someone on the uh if there's

2328
01:39:23,760 --> 01:39:25,119
someone who is

2329
01:39:25,119 --> 01:39:27,679
familiar with seaboard details uh

2330
01:39:27,679 --> 01:39:29,119
comment on this

2331
01:39:29,119 --> 01:39:32,800
uh we have michael hi michael richardson

2332
01:39:32,800 --> 01:39:34,560
so seaborg does your you're absolutely

2333
01:39:34,560 --> 01:39:36,159
right john seaboard doesn't say this it

2334
01:39:36,159 --> 01:39:37,280
actually says that

2335
01:39:37,280 --> 01:39:39,600
it's up to us as a seaboard protocol

2336
01:39:39,600 --> 01:39:41,840
that we need to specify this

2337
01:39:41,840 --> 01:39:43,840
um i guess there's two issues i think

2338
01:39:43,840 --> 01:39:45,440
with these integers one is that it's

2339
01:39:45,440 --> 01:39:47,119
stupid to take more bytes than you need

2340
01:39:47,119 --> 01:39:47,679
to

2341
01:39:47,679 --> 01:39:50,159
however that's a a that's a sender

2342
01:39:50,159 --> 01:39:51,040
stupidity

2343
01:39:51,040 --> 01:39:54,159
uh okay and if they wish to

2344
01:39:54,159 --> 01:39:55,520
shoot themselves in the foot then i

2345
01:39:55,520 --> 01:39:57,280
think that's okay

2346
01:39:57,280 --> 01:39:59,679
um but we just have the signature

2347
01:39:59,679 --> 01:40:01,520
verification issue and then

2348
01:40:01,520 --> 01:40:04,159
i think that we need to specify that you

2349
01:40:04,159 --> 01:40:05,920
you you sign and verify

2350
01:40:05,920 --> 01:40:08,400
what you what's on the wire not what you

2351
01:40:08,400 --> 01:40:09,520
reconstructed

2352
01:40:09,520 --> 01:40:11,679
so that gets rid of any canonization

2353
01:40:11,679 --> 01:40:12,560
issues

2354
01:40:12,560 --> 01:40:14,639
and and then we need to simply say what

2355
01:40:14,639 --> 01:40:15,679
you just said that

2356
01:40:15,679 --> 01:40:17,679
that integers are always encoded in the

2357
01:40:17,679 --> 01:40:19,199
shortest uh

2358
01:40:19,199 --> 01:40:21,280
uh or should be encoded in the shortest

2359
01:40:21,280 --> 01:40:22,880
value possible

2360
01:40:22,880 --> 01:40:26,159
um and and that's our business

2361
01:40:26,159 --> 01:40:28,560
our at our it's on us to do this as a

2362
01:40:28,560 --> 01:40:31,360
user of seabor

2363
01:40:31,360 --> 01:40:32,960
and any other things that we want to say

2364
01:40:32,960 --> 01:40:35,119
like you know such and such can't be a

2365
01:40:35,119 --> 01:40:36,159
map or

2366
01:40:36,159 --> 01:40:38,320
you know map keys must not be strings or

2367
01:40:38,320 --> 01:40:41,280
whatever we want to say

2368
01:40:42,239 --> 01:40:45,440
yeah i agree i think there's a

2369
01:40:45,440 --> 01:40:48,400
might be security aspects of having a

2370
01:40:48,400 --> 01:40:50,159
signal encoding

2371
01:40:50,159 --> 01:40:53,840
also i don't see any direct attack but

2372
01:40:53,840 --> 01:40:56,000
if in protocols where you have a

2373
01:40:56,000 --> 01:40:57,040
weakness

2374
01:40:57,040 --> 01:41:00,159
then it's bad if an attacker can have a

2375
01:41:00,159 --> 01:41:01,280
lot of different

2376
01:41:01,280 --> 01:41:06,080
choices how to choose things um

2377
01:41:06,320 --> 01:41:08,320
so typically you want deterministic

2378
01:41:08,320 --> 01:41:11,840
encoding and security protocols

2379
01:41:12,800 --> 01:41:14,320
yeah so i think that's a that's a good

2380
01:41:14,320 --> 01:41:16,800
point and ben commented in the chat

2381
01:41:16,800 --> 01:41:20,480
uh giving a pointer to the draft

2382
01:41:20,480 --> 01:41:24,320
that takes rules from rfc

2383
01:41:24,320 --> 01:41:33,840
189 49 which is receiver i believe

2384
01:41:37,280 --> 01:41:39,679
okay so that's i think that's a good

2385
01:41:39,679 --> 01:41:40,560
good discussion

2386
01:41:40,560 --> 01:41:43,440
and then we have the final issue do you

2387
01:41:43,440 --> 01:41:44,960
want to say something about that as well

2388
01:41:44,960 --> 01:41:47,840
john

2389
01:41:48,000 --> 01:41:51,360
status of yep uh

2390
01:41:51,360 --> 01:41:54,480
yeah so right i guess some background

2391
01:41:54,480 --> 01:41:55,360
also but

2392
01:41:55,360 --> 01:41:58,080
right now the way you can identify a

2393
01:41:58,080 --> 01:41:58,960
certificate

2394
01:41:58,960 --> 01:42:02,639
in cosi is either by sending it

2395
01:42:02,639 --> 01:42:06,639
with by value or with a uri

2396
01:42:06,639 --> 01:42:10,239
or with a hash and

2397
01:42:10,239 --> 01:42:13,440
hash takes eight bytes has been

2398
01:42:13,440 --> 01:42:15,199
suggested

2399
01:42:15,199 --> 01:42:18,880
both discussed in both lake and in cosi

2400
01:42:18,880 --> 01:42:22,000
recently that it would be good to be

2401
01:42:22,000 --> 01:42:23,840
able to identify a

2402
01:42:23,840 --> 01:42:27,360
certificate with a kid currently

2403
01:42:27,360 --> 01:42:31,119
you you

2404
01:42:31,119 --> 01:42:33,119
cosi doesn't really forbid it but it

2405
01:42:33,119 --> 01:42:34,960
doesn't specify how

2406
01:42:34,960 --> 01:42:38,000
either i would say it's you have to do

2407
01:42:38,000 --> 01:42:39,840
it yourself and assign a kid to a

2408
01:42:39,840 --> 01:42:40,800
certificate

2409
01:42:40,800 --> 01:42:43,600
and do it i think kosovo discussed this

2410
01:42:43,600 --> 01:42:45,119
recently and there seemed to be

2411
01:42:45,119 --> 01:42:48,159
agreement that this

2412
01:42:48,400 --> 01:42:52,159
might be good but not exactly how

2413
01:42:52,159 --> 01:42:54,719
how to do that i think that is

2414
01:42:54,719 --> 01:42:56,320
discussion it has

2415
01:42:56,320 --> 01:43:00,560
not been any more discussion um

2416
01:43:00,560 --> 01:43:03,679
then i think a follow-up question

2417
01:43:03,679 --> 01:43:07,600
is whether you need whether you

2418
01:43:07,600 --> 01:43:10,239
if you have a certificate by kid you

2419
01:43:10,239 --> 01:43:10,719
then

2420
01:43:10,719 --> 01:43:14,639
also need raw public keys with subject

2421
01:43:14,639 --> 01:43:18,000
name in them and the

2422
01:43:18,000 --> 01:43:22,000
key key id is a key identifier

2423
01:43:22,000 --> 01:43:24,800
it's just byte string that you have

2424
01:43:24,800 --> 01:43:25,520
agreed

2425
01:43:25,520 --> 01:43:28,960
upon to use to identify the

2426
01:43:28,960 --> 01:43:32,080
the key it's similar as the

2427
01:43:32,080 --> 01:43:36,840
psk key identifier in in

2428
01:43:36,840 --> 01:43:38,800
tls so

2429
01:43:38,800 --> 01:43:41,040
i remember having the discussion in lake

2430
01:43:41,040 --> 01:43:41,840
and i believe

2431
01:43:41,840 --> 01:43:44,960
uh the comment from michael

2432
01:43:44,960 --> 01:43:48,400
was that i mean with this with this

2433
01:43:48,400 --> 01:43:50,080
proposal essentially

2434
01:43:50,080 --> 01:43:53,040
we are we are making certificates a sort

2435
01:43:53,040 --> 01:43:54,000
of pro public

2436
01:43:54,000 --> 01:43:57,280
key and from what i recall

2437
01:43:57,280 --> 01:44:00,639
uh he did not see much value in that

2438
01:44:00,639 --> 01:44:04,080
michael maybe you can confirm if you're

2439
01:44:04,840 --> 01:44:07,040
online

2440
01:44:07,040 --> 01:44:10,719
do we have a use case where the where

2441
01:44:10,719 --> 01:44:14,960
that would what this would be useful

2442
01:44:15,920 --> 01:44:18,239
sorry i i i missed what you said that i

2443
01:44:18,239 --> 01:44:20,320
said so i'm not sure that i

2444
01:44:20,320 --> 01:44:23,360
can agree or disagree yet

2445
01:44:23,360 --> 01:44:26,960
so uh i was recalling a discussion in a

2446
01:44:26,960 --> 01:44:28,560
lake on the proposal

2447
01:44:28,560 --> 01:44:30,719
to reference a certificate with the key

2448
01:44:30,719 --> 01:44:33,040
id

2449
01:44:33,119 --> 01:44:35,520
where i remember you objecting to this

2450
01:44:35,520 --> 01:44:37,760
change essentially saying that this

2451
01:44:37,760 --> 01:44:40,239
makes the certificate a sort of federal

2452
01:44:40,239 --> 01:44:42,880
public key

2453
01:44:42,880 --> 01:44:46,840
oh yeah

2454
01:44:46,840 --> 01:44:49,840
um

2455
01:44:51,119 --> 01:44:53,199
if if the endpoint the other end can't

2456
01:44:53,199 --> 01:44:55,520
identify can't validate the certificate

2457
01:44:55,520 --> 01:44:57,119
then it's just a container for a raw

2458
01:44:57,119 --> 01:44:58,639
public key yes i would agree with that

2459
01:44:58,639 --> 01:45:00,320
statement

2460
01:45:00,320 --> 01:45:03,119
um but i think i need more context for

2461
01:45:03,119 --> 01:45:03,679
what

2462
01:45:03,679 --> 01:45:05,760
when we when we're why we are going to

2463
01:45:05,760 --> 01:45:06,960
do that

2464
01:45:06,960 --> 01:45:10,400
um but i guess i'll just repeat that

2465
01:45:10,400 --> 01:45:13,840
yeah so why send the whole certificate

2466
01:45:13,840 --> 01:45:15,440
if you can't validate it

2467
01:45:15,440 --> 01:45:18,239
i guess the point

2468
01:45:19,920 --> 01:45:22,639
so my question then to john is john do

2469
01:45:22,639 --> 01:45:26,400
we have a compelling use case for this

2470
01:45:27,360 --> 01:45:30,400
either to save bytes

2471
01:45:30,400 --> 01:45:34,560
or to not have to extend cozy key with

2472
01:45:34,560 --> 01:45:38,000
subject name to comply

2473
01:45:38,000 --> 01:45:41,520
with sigma i would say

2474
01:45:41,520 --> 01:45:44,880
use a raw public keys without identify

2475
01:45:44,880 --> 01:45:47,360
might not be 100 compliant with the

2476
01:45:47,360 --> 01:45:48,159
sigma

2477
01:45:48,159 --> 01:45:52,159
academic paper um

2478
01:45:52,159 --> 01:45:56,239
but i think that could also be done

2479
01:45:56,480 --> 01:45:59,119
after the i agree with michael that

2480
01:45:59,119 --> 01:45:59,600
there's an

2481
01:45:59,600 --> 01:46:02,639
overlap with the raw public key

2482
01:46:02,639 --> 01:46:05,760
and i think i'm not saying we should do

2483
01:46:05,760 --> 01:46:07,760
this but i think it should be discussed

2484
01:46:07,760 --> 01:46:10,239
after the late discussion this was

2485
01:46:10,239 --> 01:46:11,360
discussed in

2486
01:46:11,360 --> 01:46:14,960
cozy with several persons includes

2487
01:46:14,960 --> 01:46:17,600
it was so yes i don't remember who

2488
01:46:17,600 --> 01:46:19,199
suggested it kusi not

2489
01:46:19,199 --> 01:46:21,679
me i don't know if it was for an ad hoc

2490
01:46:21,679 --> 01:46:23,040
use case

2491
01:46:23,040 --> 01:46:25,280
at all and there were several people in

2492
01:46:25,280 --> 01:46:26,639
cosi

2493
01:46:26,639 --> 01:46:29,840
seeming positive to the idea and closely

2494
01:46:29,840 --> 01:46:30,719
discussed

2495
01:46:30,719 --> 01:46:32,719
how to do this without reaching any

2496
01:46:32,719 --> 01:46:35,199
agreement

2497
01:46:36,560 --> 01:46:40,000
waiting for kusi to do this

2498
01:46:40,000 --> 01:46:41,760
okay so i guess in the context of this

2499
01:46:41,760 --> 01:46:43,520
discussion we would uh as a working

2500
01:46:43,520 --> 01:46:45,119
group we would need a little bit more

2501
01:46:45,119 --> 01:46:47,199
context and i guess this wasn't

2502
01:46:47,199 --> 01:46:49,199
this was just a hint to what could be

2503
01:46:49,199 --> 01:46:52,080
discussed if there was time and it is

2504
01:46:52,080 --> 01:46:53,520
indeed the case

2505
01:46:53,520 --> 01:46:57,199
so i propose that we keep this issue

2506
01:46:57,199 --> 01:46:57,600
open

2507
01:46:57,600 --> 01:46:59,679
and maybe present it in more detail

2508
01:46:59,679 --> 01:47:01,600
during one of the next meetings

2509
01:47:01,600 --> 01:47:04,080
of link

2510
01:47:05,520 --> 01:47:09,840
does that work for you

2511
01:47:12,159 --> 01:47:15,320
sounds good okay okay

2512
01:47:15,320 --> 01:47:18,560
[Music]

2513
01:47:18,560 --> 01:47:21,679
so i think yep i think we reached the

2514
01:47:21,679 --> 01:47:23,920
end the list of of the

2515
01:47:23,920 --> 01:47:25,520
of the hard open issues and then there

2516
01:47:25,520 --> 01:47:28,320
are other perhaps more editorial

2517
01:47:28,320 --> 01:47:31,199
so yeah i think that's uh that's where

2518
01:47:31,199 --> 01:47:31,760
we are

2519
01:47:31,760 --> 01:47:36,560
basically in in the work

2520
01:47:36,560 --> 01:47:38,800
okay thank you thank you for presenting

2521
01:47:38,800 --> 01:47:39,920
the issues and

2522
01:47:39,920 --> 01:47:42,400
uh leading uh the development of this

2523
01:47:42,400 --> 01:47:43,679
pacquiao and tron

2524
01:47:43,679 --> 01:47:46,800
and francesca so uh

2525
01:47:46,800 --> 01:47:49,199
maybe we could i think that the next

2526
01:47:49,199 --> 01:47:51,280
item in the agenda we have the next

2527
01:47:51,280 --> 01:47:51,920
steps

2528
01:47:51,920 --> 01:47:54,960
where we have uh i mean i could

2529
01:47:54,960 --> 01:47:58,719
maybe just summarize uh what we plan on

2530
01:47:58,719 --> 01:47:59,280
doing

2531
01:47:59,280 --> 01:48:02,480
in the future period so

2532
01:48:02,480 --> 01:48:05,280
uh i recall from the first presentation

2533
01:48:05,280 --> 01:48:07,520
by marco that we will have an interrupt

2534
01:48:07,520 --> 01:48:08,080
event

2535
01:48:08,080 --> 01:48:11,360
in april uh and uh

2536
01:48:11,360 --> 01:48:13,360
where we will be testing additional

2537
01:48:13,360 --> 01:48:15,199
implement uh we'll be testing the

2538
01:48:15,199 --> 01:48:17,040
implementations

2539
01:48:17,040 --> 01:48:20,239
uh so please continue with this work and

2540
01:48:20,239 --> 01:48:22,320
also it's all great to see these reports

2541
01:48:22,320 --> 01:48:24,080
coming to the working group this is very

2542
01:48:24,080 --> 01:48:25,920
useful

2543
01:48:25,920 --> 01:48:28,960
uh on the formal verification front

2544
01:48:28,960 --> 01:48:32,159
uh timothy is leading the ad hoc c

2545
01:48:32,159 --> 01:48:34,560
implementation that and in collaboration

2546
01:48:34,560 --> 01:48:36,719
with kartik's team at indriya

2547
01:48:36,719 --> 01:48:40,159
this verification is being uh

2548
01:48:40,159 --> 01:48:43,360
formally verified for correctness so

2549
01:48:43,360 --> 01:48:46,719
that is one one direction that we are

2550
01:48:46,719 --> 01:48:49,360
headed towards and then the second one

2551
01:48:49,360 --> 01:48:49,840
is

2552
01:48:49,840 --> 01:48:53,280
on the formal analysis of the protocol

2553
01:48:53,280 --> 01:48:55,520
what kartik mentioned during the last

2554
01:48:55,520 --> 01:48:56,639
interim

2555
01:48:56,639 --> 01:48:59,600
uh where we will hopefully have some

2556
01:48:59,600 --> 01:49:00,400
updates

2557
01:49:00,400 --> 01:49:02,000
for the next meetings i will be

2558
01:49:02,000 --> 01:49:04,239
coordinating i will take an action to

2559
01:49:04,239 --> 01:49:07,119
coordinate with kartik on on this work

2560
01:49:07,119 --> 01:49:07,679
and

2561
01:49:07,679 --> 01:49:11,760
uh update the working group as needed

2562
01:49:11,760 --> 01:49:14,639
other than that do we want to organize

2563
01:49:14,639 --> 01:49:16,239
interims in the next period

2564
01:49:16,239 --> 01:49:20,239
do you have any proposals

2565
01:49:23,119 --> 01:49:26,400
so there is your own queue yes

2566
01:49:26,400 --> 01:49:28,480
yeah i think we should i mean interns

2567
01:49:28,480 --> 01:49:30,480
are good we basically

2568
01:49:30,480 --> 01:49:32,719
uh take it take the extra effort to

2569
01:49:32,719 --> 01:49:34,719
prepare for the interim meeting and that

2570
01:49:34,719 --> 01:49:36,320
we close a number of issues and so on so

2571
01:49:36,320 --> 01:49:38,400
i think that's uh that's a means of

2572
01:49:38,400 --> 01:49:40,719
progressing and it's also a good uh

2573
01:49:40,719 --> 01:49:43,199
feedback channels for

2574
01:49:43,199 --> 01:49:45,679
for people and people to comment and and

2575
01:49:45,679 --> 01:49:47,520
provide new input and so on so yes i

2576
01:49:47,520 --> 01:49:48,639
think we definitely should

2577
01:49:48,639 --> 01:49:51,679
arrange uh injury meetings

2578
01:49:51,679 --> 01:49:54,480
uh should we aim for one interim or two

2579
01:49:54,480 --> 01:49:57,599
interims before the next idea

2580
01:49:57,599 --> 01:50:00,960
maybe two

2581
01:50:00,960 --> 01:50:04,159
sounds good so let's have let's plan to

2582
01:50:04,159 --> 01:50:06,000
have one maybe

2583
01:50:06,000 --> 01:50:10,239
mid mid april and then one in mid-may

2584
01:50:10,239 --> 01:50:13,599
from or towards the end of the may that

2585
01:50:13,599 --> 01:50:16,880
does that sound okay

2586
01:50:17,360 --> 01:50:20,400
yes sounds good and there is one uh

2587
01:50:20,400 --> 01:50:21,760
the interrupt the intro yeah i think

2588
01:50:21,760 --> 01:50:22,800
mark was going to say something about

2589
01:50:22,800 --> 01:50:26,159
the interrupt sorry go ahead marco

2590
01:50:26,159 --> 01:50:28,239
yeah i think for april the second half

2591
01:50:28,239 --> 01:50:30,400
is ideal for sure after

2592
01:50:30,400 --> 01:50:33,119
uh that interop session we take at least

2593
01:50:33,119 --> 01:50:35,440
we can report about that and possibly

2594
01:50:35,440 --> 01:50:38,080
i think a bit of issues that that can

2595
01:50:38,080 --> 01:50:38,719
come up

2596
01:50:38,719 --> 01:50:40,960
after those tests so second half of

2597
01:50:40,960 --> 01:50:43,119
april round end of april will be ideal i

2598
01:50:43,119 --> 01:50:45,280
think

2599
01:50:46,080 --> 01:50:48,639
okay perfect so yeah so a sheriff will

2600
01:50:48,639 --> 01:50:50,000
take the action to

2601
01:50:50,000 --> 01:50:52,560
to schedule the next interim for after

2602
01:50:52,560 --> 01:50:53,040
the

2603
01:50:53,040 --> 01:50:56,239
uh the next interrupt event and then we

2604
01:50:56,239 --> 01:50:57,040
will just

2605
01:50:57,040 --> 01:51:00,400
uh we won't schedule the one in may

2606
01:51:00,400 --> 01:51:01,840
until after the

2607
01:51:01,840 --> 01:51:05,360
internet so

2608
01:51:05,360 --> 01:51:08,480
with that i don't know we have any other

2609
01:51:08,480 --> 01:51:11,839
business to discuss

2610
01:51:12,159 --> 01:51:14,880
does anyone want to discuss some related

2611
01:51:14,880 --> 01:51:17,280
issue

2612
01:51:18,719 --> 01:51:21,920
so there is your run yes um

2613
01:51:21,920 --> 01:51:25,360
i just wanted to say that we are really

2614
01:51:25,360 --> 01:51:27,679
fortunate about this this input process

2615
01:51:27,679 --> 01:51:29,360
from the implementers

2616
01:51:29,360 --> 01:51:31,520
uh we don't have so much input from

2617
01:51:31,520 --> 01:51:32,880
people or not implementing

2618
01:51:32,880 --> 01:51:35,040
so if someone would interest just read

2619
01:51:35,040 --> 01:51:36,000
the

2620
01:51:36,000 --> 01:51:38,880
specification uh or or have some

2621
01:51:38,880 --> 01:51:39,520
specific

2622
01:51:39,520 --> 01:51:43,199
comments that would be fantastic

2623
01:51:43,199 --> 01:51:45,119
you could either send bails directly to

2624
01:51:45,119 --> 01:51:46,320
the authors or

2625
01:51:46,320 --> 01:51:49,119
even better to the lake mailing list so

2626
01:51:49,119 --> 01:51:50,000
yeah

2627
01:51:50,000 --> 01:51:53,119
even more comments are are welcome thank

2628
01:51:53,119 --> 01:51:55,280
you

2629
01:51:56,880 --> 01:52:00,239
okay so yeah

2630
01:52:00,239 --> 01:52:02,320
so we have nine minutes left in the

2631
01:52:02,320 --> 01:52:03,440
meeting i

2632
01:52:03,440 --> 01:52:06,719
propose we call it a day here steven did

2633
01:52:06,719 --> 01:52:10,080
you did you want to add something

2634
01:52:13,119 --> 01:52:14,719
i had very little to do which is fine i

2635
01:52:14,719 --> 01:52:16,159
could just

2636
01:52:16,159 --> 01:52:18,239
put silly comments in java it was good

2637
01:52:18,239 --> 01:52:20,559
thank you

2638
01:52:23,199 --> 01:52:24,960
so for me it was cutting i didn't hear

2639
01:52:24,960 --> 01:52:26,560
what you said except

2640
01:52:26,560 --> 01:52:31,840
thank you

2641
01:52:33,119 --> 01:52:35,360
but

2642
01:52:36,159 --> 01:52:39,440
okay so i guess uh i guess that's it for

2643
01:52:39,440 --> 01:52:41,520
the late meeting thank you everyone for

2644
01:52:41,520 --> 01:52:44,719
uh for attending today and let's keep

2645
01:52:44,719 --> 01:52:46,639
the discussion going on github and on

2646
01:52:46,639 --> 01:52:59,840
the mailing list

2647
01:53:53,440 --> 01:53:55,519
you

