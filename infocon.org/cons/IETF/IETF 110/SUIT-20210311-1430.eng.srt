1
00:00:09,519 --> 00:00:11,040
all right looks like it's about time for

2
00:00:11,040 --> 00:00:13,040
us to start i don't see brendan

3
00:00:13,040 --> 00:00:31,840
on the meeting yet that's not good

4
00:00:35,760 --> 00:00:37,680
all right so let me see if i can share

5
00:00:37,680 --> 00:00:40,000
the chair slides in dave baltimore you

6
00:00:40,000 --> 00:00:42,960
want to do the intros

7
00:00:42,960 --> 00:00:45,840
when i get them up

8
00:00:46,640 --> 00:00:59,840
happy too

9
00:01:08,240 --> 00:01:11,119
all right everyone um welcome to uh the

10
00:01:11,119 --> 00:01:12,400
suit working group

11
00:01:12,400 --> 00:01:16,720
meeting at iatf 110 uh

12
00:01:16,720 --> 00:01:19,360
my name is dave waltermeier i'm joined

13
00:01:19,360 --> 00:01:19,920
with

14
00:01:19,920 --> 00:01:23,119
my co-chairs russ and russ housely dave

15
00:01:23,119 --> 00:01:25,520
fowler

16
00:01:25,600 --> 00:01:27,840
as you can see there's the notewell um

17
00:01:27,840 --> 00:01:29,520
you've probably seen this a few times so

18
00:01:29,520 --> 00:01:29,920
far

19
00:01:29,920 --> 00:01:32,799
this week um as always let us know if

20
00:01:32,799 --> 00:01:34,720
you have any questions about its

21
00:01:34,720 --> 00:01:36,159
contents

22
00:01:36,159 --> 00:01:38,960
um you also agreed to it when you signed

23
00:01:38,960 --> 00:01:41,759
up for this meeting

24
00:01:41,759 --> 00:01:43,280
uh if you could advance to the

25
00:01:43,280 --> 00:01:46,159
administrative tasks russ

26
00:01:46,159 --> 00:01:48,799
yes i grabbed the wrong slide when i

27
00:01:48,799 --> 00:01:55,840
went full screen didn't it

28
00:01:58,000 --> 00:02:02,479
sorry no worries so many slides

29
00:02:02,479 --> 00:02:04,240
i should have put them all in one file

30
00:02:04,240 --> 00:02:06,840
but i didn't

31
00:02:06,840 --> 00:02:09,840
um

32
00:02:10,080 --> 00:02:14,800
so i go here i go here

33
00:02:16,560 --> 00:02:23,440
and then i say

34
00:02:23,440 --> 00:02:26,560
full screen ah

35
00:02:26,560 --> 00:02:29,120
much better

36
00:02:29,680 --> 00:02:32,720
uh let's see so um

37
00:02:32,720 --> 00:02:35,440
so dave we have two note takers we're

38
00:02:35,440 --> 00:02:38,400
still looking for one

39
00:02:38,800 --> 00:02:40,319
yeah i think it would still be useful to

40
00:02:40,319 --> 00:02:42,400
have a second one so i am taking some

41
00:02:42,400 --> 00:02:43,599
notes and i would love to have somebody

42
00:02:43,599 --> 00:02:45,120
assist me

43
00:02:45,120 --> 00:02:48,840
uh can we get a volunteer to be a

44
00:02:48,840 --> 00:02:51,840
notetaker

45
00:02:52,000 --> 00:02:55,440
if you can respond in chat

46
00:03:00,239 --> 00:03:04,480
we'll wait

47
00:03:04,480 --> 00:03:09,040
um if i remember i do their last ietf of

48
00:03:09,040 --> 00:03:10,080
the one before

49
00:03:10,080 --> 00:03:11,680
uh akira helped out as one of our

50
00:03:11,680 --> 00:03:13,360
notetakers

51
00:03:13,360 --> 00:03:16,959
um it's good to spread the wealth but

52
00:03:16,959 --> 00:03:18,480
otherwise i'm wondering if akira could

53
00:03:18,480 --> 00:03:33,839
help me if nobody else steps up

54
00:03:40,799 --> 00:03:44,400
i will begin as soon as we have a

55
00:03:44,840 --> 00:03:47,840
notetaker

56
00:03:49,360 --> 00:03:53,200
okay uh akira says okay sure uh

57
00:03:53,200 --> 00:03:56,400
i know akira has done it once but uh so

58
00:03:56,400 --> 00:03:57,439
it'd be great to have a different

59
00:03:57,439 --> 00:03:59,439
volunteer but i appreciate thanks akira

60
00:03:59,439 --> 00:04:00,000
so i guess we

61
00:04:00,000 --> 00:04:02,720
can go on and uh i will try to keep the

62
00:04:02,720 --> 00:04:04,400
uh

63
00:04:04,400 --> 00:04:05,840
english well if you can make sure that i

64
00:04:05,840 --> 00:04:07,680
don't miss anything so

65
00:04:07,680 --> 00:04:09,439
okay thank you jessica great so we got

66
00:04:09,439 --> 00:04:11,120
jessica as well great so the three of us

67
00:04:11,120 --> 00:04:12,799
will do it

68
00:04:12,799 --> 00:04:15,840
great thank you very much

69
00:04:16,320 --> 00:04:19,839
um okay and you can follow along

70
00:04:19,839 --> 00:04:22,880
on uh the um the cody md

71
00:04:22,880 --> 00:04:25,520
um where we'll be you know actively

72
00:04:25,520 --> 00:04:27,120
taking notes so if you have anything to

73
00:04:27,120 --> 00:04:28,000
add to the notes

74
00:04:28,000 --> 00:04:31,199
are correct uh feel free to do so

75
00:04:31,199 --> 00:04:34,000
next slide please

76
00:04:34,479 --> 00:04:36,560
uh today we today we have a pretty full

77
00:04:36,560 --> 00:04:38,720
agenda

78
00:04:38,720 --> 00:04:41,120
we're going to be covering status on a

79
00:04:41,120 --> 00:04:42,320
number of drafts

80
00:04:42,320 --> 00:04:45,759
um we also have um

81
00:04:45,759 --> 00:04:49,280
an update on uh the secure reporting

82
00:04:49,280 --> 00:04:52,400
um you know which has been asked uh

83
00:04:52,400 --> 00:04:54,080
we have a call for adoption you know

84
00:04:54,080 --> 00:04:56,960
currently underway um

85
00:04:56,960 --> 00:05:00,639
we uh um also um i

86
00:05:00,639 --> 00:05:02,720
talk about um some new work and if we

87
00:05:02,720 --> 00:05:04,240
have time we'll uh

88
00:05:04,240 --> 00:05:07,120
we'll have uh open mic for any other

89
00:05:07,120 --> 00:05:11,840
business uh any agenda bashing

90
00:05:14,479 --> 00:05:18,000
all right next slide please um i i think

91
00:05:18,000 --> 00:05:19,280
there might actually be

92
00:05:19,280 --> 00:05:21,440
one minor bash it's just a point of

93
00:05:21,440 --> 00:05:24,080
order here which is that the um

94
00:05:24,080 --> 00:05:27,440
the question of recharter seems to be in

95
00:05:27,440 --> 00:05:31,039
the in section six but it strikes me

96
00:05:31,039 --> 00:05:33,600
that it probably belongs before

97
00:05:33,600 --> 00:05:38,800
we talk about secure reporting

98
00:05:38,800 --> 00:05:41,280
um okay and what's your what's your

99
00:05:41,280 --> 00:05:42,320
thoughts there

100
00:05:42,320 --> 00:05:45,120
yeah i thought we concluded last meeting

101
00:05:45,120 --> 00:05:46,800
that the suit reports

102
00:05:46,800 --> 00:05:49,680
does not require a rate charter only the

103
00:05:49,680 --> 00:05:51,520
mud does and that's why the agenda slide

104
00:05:51,520 --> 00:05:52,720
is put that way

105
00:05:52,720 --> 00:05:56,000
that's correct and that's because the

106
00:05:56,000 --> 00:05:57,759
suit reports were previously in the suit

107
00:05:57,759 --> 00:05:59,360
manifest and we can decide whether to

108
00:05:59,360 --> 00:06:00,800
split that into a separate document or

109
00:06:00,800 --> 00:06:02,080
combine them or whatever

110
00:06:02,080 --> 00:06:04,080
and i think that's what uh roman i think

111
00:06:04,080 --> 00:06:05,520
you commented that at the end of

112
00:06:05,520 --> 00:06:08,960
the suit agenda at 109. so

113
00:06:09,680 --> 00:06:11,680
yeah and speaking of the ad yeah that's

114
00:06:11,680 --> 00:06:13,120
totally fine like we talked

115
00:06:13,120 --> 00:06:15,520
last time

116
00:06:18,160 --> 00:06:19,840
excellent so we'll um we'll cover the

117
00:06:19,840 --> 00:06:21,680
recharger topic then um

118
00:06:21,680 --> 00:06:25,360
in the the last item um

119
00:06:25,360 --> 00:06:27,039
in general we've done fairly well with

120
00:06:27,039 --> 00:06:29,360
our milestone so that we're behind on

121
00:06:29,360 --> 00:06:29,840
getting

122
00:06:29,840 --> 00:06:33,440
the um yeah the manifest format uh

123
00:06:33,440 --> 00:06:35,919
um sent to the isg you know by about a

124
00:06:35,919 --> 00:06:36,880
year right now

125
00:06:36,880 --> 00:06:39,840
um we're pretty close uh so i would like

126
00:06:39,840 --> 00:06:40,639
to

127
00:06:40,639 --> 00:06:43,280
to make sure that we're talking about um

128
00:06:43,280 --> 00:06:45,120
during that segment of the meeting you

129
00:06:45,120 --> 00:06:46,080
know what um

130
00:06:46,080 --> 00:06:48,080
what last bits of work needs to be done

131
00:06:48,080 --> 00:06:50,880
to get it across the finish line

132
00:06:50,880 --> 00:06:55,120
uh next slide please that's the last one

133
00:06:55,120 --> 00:06:59,759
okay um so i think up next we have um

134
00:06:59,759 --> 00:07:02,400
we have brendan um or honest with the

135
00:07:02,400 --> 00:07:02,960
the

136
00:07:02,960 --> 00:07:06,560
architecture and information model

137
00:07:11,120 --> 00:07:13,680
i think this brenton is going to talk

138
00:07:13,680 --> 00:07:15,599
about

139
00:07:15,599 --> 00:07:18,400
i think we just we're gonna oh we're

140
00:07:18,400 --> 00:07:20,000
skipping the architecture because it's

141
00:07:20,000 --> 00:07:21,199
in the editor queue

142
00:07:21,199 --> 00:07:23,919
there's nothing to talk about so with

143
00:07:23,919 --> 00:07:25,440
the information model

144
00:07:25,440 --> 00:07:27,360
right i just wanted to make sure we said

145
00:07:27,360 --> 00:07:30,240
that for the minutes

146
00:07:30,240 --> 00:07:33,120
oh yeah okay i was looking at the

147
00:07:33,120 --> 00:07:34,720
architecture going i don't have slides

148
00:07:34,720 --> 00:07:45,840
for this

149
00:07:49,840 --> 00:07:53,280
would be nice to have the architecture

150
00:07:56,840 --> 00:07:59,840
published

151
00:08:10,840 --> 00:08:13,750
oh

152
00:08:13,750 --> 00:08:17,599
[Music]

153
00:08:17,599 --> 00:08:20,960
all right go ahead brendan all right uh

154
00:08:20,960 --> 00:08:22,720
so the information model has been

155
00:08:22,720 --> 00:08:25,440
through um iesg review now and there's a

156
00:08:25,440 --> 00:08:25,759
few

157
00:08:25,759 --> 00:08:28,800
items of feedback there were

158
00:08:28,800 --> 00:08:31,440
a number of minor relatively minor knits

159
00:08:31,440 --> 00:08:31,840
but

160
00:08:31,840 --> 00:08:35,519
i've i've brought up three uh

161
00:08:35,519 --> 00:08:37,039
points that seem like they require a

162
00:08:37,039 --> 00:08:39,279
little bit more discussion

163
00:08:39,279 --> 00:08:42,000
so the first one was uh why are we

164
00:08:42,000 --> 00:08:43,200
constraining

165
00:08:43,200 --> 00:08:47,360
um device identity matching to uuids

166
00:08:47,360 --> 00:08:50,959
and i i have a few uh reasons that i

167
00:08:50,959 --> 00:08:52,560
made this recommendation in the first

168
00:08:52,560 --> 00:08:54,800
place

169
00:08:54,800 --> 00:08:57,519
and the indeed that that we we discussed

170
00:08:57,519 --> 00:08:59,120
previously i think

171
00:08:59,120 --> 00:09:02,240
um so the the first point here is that

172
00:09:02,240 --> 00:09:06,160
um text tends to end up getting parsed

173
00:09:06,160 --> 00:09:09,360
it rarely stays as string matching

174
00:09:09,360 --> 00:09:12,480
so one reason for using uuids is

175
00:09:12,480 --> 00:09:15,040
to encourage people to do the right

176
00:09:15,040 --> 00:09:15,680
thing

177
00:09:15,680 --> 00:09:18,800
to use these for

178
00:09:18,800 --> 00:09:21,440
matching an identity rather than

179
00:09:21,440 --> 00:09:22,320
matching

180
00:09:22,320 --> 00:09:25,440
a complex sequence of

181
00:09:25,440 --> 00:09:28,480
characters the second reason is that

182
00:09:28,480 --> 00:09:30,320
they're guaranteed to be six

183
00:09:30,320 --> 00:09:33,440
16 bytes long which means that

184
00:09:33,440 --> 00:09:35,839
devices have a simpler time doing

185
00:09:35,839 --> 00:09:37,040
matching there is no

186
00:09:37,040 --> 00:09:40,000
question of variable length or what

187
00:09:40,000 --> 00:09:42,160
happens if i only match the first part

188
00:09:42,160 --> 00:09:44,720
but not the second part of a string

189
00:09:44,720 --> 00:09:46,800
if it's 16 bytes long always then this

190
00:09:46,800 --> 00:09:48,240
is guaranteed

191
00:09:48,240 --> 00:09:51,360
and then finally the the two other

192
00:09:51,360 --> 00:09:52,640
points on this are that

193
00:09:52,640 --> 00:09:55,040
the text section is what's there for

194
00:09:55,040 --> 00:09:56,240
human readable things

195
00:09:56,240 --> 00:09:57,760
so if you need something human readable

196
00:09:57,760 --> 00:09:59,360
it should be in the text section but

197
00:09:59,360 --> 00:10:01,360
devices don't really need human readable

198
00:10:01,360 --> 00:10:02,640
things so we should give them things

199
00:10:02,640 --> 00:10:03,920
that are

200
00:10:03,920 --> 00:10:07,279
easy for devices to process

201
00:10:07,519 --> 00:10:10,240
and the vendor and class id are really

202
00:10:10,240 --> 00:10:11,920
for testing applicability

203
00:10:11,920 --> 00:10:14,959
not for asserting properties and i think

204
00:10:14,959 --> 00:10:15,600
that's

205
00:10:15,600 --> 00:10:17,519
an important point that gets lost a bit

206
00:10:17,519 --> 00:10:19,200
in this uh

207
00:10:19,200 --> 00:10:22,240
in this format that the manifest

208
00:10:22,240 --> 00:10:25,440
does not assert properties it tests

209
00:10:25,440 --> 00:10:27,680
things and those are are different

210
00:10:27,680 --> 00:10:30,319
concepts

211
00:10:30,480 --> 00:10:33,440
so that's that's uh essentially my my

212
00:10:33,440 --> 00:10:35,120
feedback for the uuids

213
00:10:35,120 --> 00:10:36,880
i guess the question here to the group

214
00:10:36,880 --> 00:10:38,560
is do we need to document this more

215
00:10:38,560 --> 00:10:40,959
clearly

216
00:10:42,720 --> 00:10:45,040
um i i guess i'll just continue on here

217
00:10:45,040 --> 00:10:46,959
and we'll do some discussion at the end

218
00:10:46,959 --> 00:10:49,680
does that make sense

219
00:10:54,079 --> 00:10:56,160
that's fine um if we can do it either

220
00:10:56,160 --> 00:10:57,360
way

221
00:10:57,360 --> 00:11:00,720
i guess mainly comment on the

222
00:11:00,720 --> 00:11:03,760
uib's point is we had a similar

223
00:11:03,760 --> 00:11:04,959
but different you know constraint

224
00:11:04,959 --> 00:11:07,200
discussion the context of i think it was

225
00:11:07,200 --> 00:11:10,560
rats uh and there

226
00:11:10,560 --> 00:11:13,600
the uh discussion was rats and teeth

227
00:11:13,600 --> 00:11:14,640
basically because there it's a little

228
00:11:14,640 --> 00:11:16,079
bit different because

229
00:11:16,079 --> 00:11:19,680
uh in the other context you're trying to

230
00:11:19,680 --> 00:11:22,640
uh potentially you have a reason to say

231
00:11:22,640 --> 00:11:23,440
take a you

232
00:11:23,440 --> 00:11:25,120
take an identifier whether it's uid or

233
00:11:25,120 --> 00:11:26,959
whatever and look up some other

234
00:11:26,959 --> 00:11:28,720
information not on the device but on the

235
00:11:28,720 --> 00:11:29,839
management side like if you're going to

236
00:11:29,839 --> 00:11:30,399
look at

237
00:11:30,399 --> 00:11:32,560
an index or something but here if it's

238
00:11:32,560 --> 00:11:34,320
embedded in a suit manifest

239
00:11:34,320 --> 00:11:35,440
you have all the rest of the suit

240
00:11:35,440 --> 00:11:37,440
manifest including any

241
00:11:37,440 --> 00:11:39,519
uh you know human readable strings in

242
00:11:39,519 --> 00:11:40,800
the text section as well

243
00:11:40,800 --> 00:11:43,120
and so i think the reasons that other

244
00:11:43,120 --> 00:11:44,480
groups needed to go with something

245
00:11:44,480 --> 00:11:46,720
beyond a uid and have delegation

246
00:11:46,720 --> 00:11:48,959
my belief is those reasons don't apply

247
00:11:48,959 --> 00:11:49,920
to suit

248
00:11:49,920 --> 00:11:52,320
um but since that is a common discussion

249
00:11:52,320 --> 00:11:53,760
of their working groups it might be

250
00:11:53,760 --> 00:11:56,720
useful to say what you just said and

251
00:11:56,720 --> 00:11:58,720
to distinguish it so that because it

252
00:11:58,720 --> 00:12:00,000
seems like it's going to be a frequently

253
00:12:00,000 --> 00:12:00,800
asked question

254
00:12:00,800 --> 00:12:02,079
and if it's a frequently asked question

255
00:12:02,079 --> 00:12:03,839
it's useful to have a frequently

256
00:12:03,839 --> 00:12:04,320
answered

257
00:12:04,320 --> 00:12:08,160
one fair enough

258
00:12:09,120 --> 00:12:12,240
okay um then the next uh

259
00:12:12,240 --> 00:12:14,399
item was that the delegation mechanism

260
00:12:14,399 --> 00:12:15,600
was too vague

261
00:12:15,600 --> 00:12:17,680
so this is delegation specifically in

262
00:12:17,680 --> 00:12:18,639
the context

263
00:12:18,639 --> 00:12:22,240
of uh delegating from one signatory to

264
00:12:22,240 --> 00:12:23,360
the next

265
00:12:23,360 --> 00:12:26,560
so from a root of trust through

266
00:12:26,560 --> 00:12:30,800
multiple delegate firmware assigners

267
00:12:31,440 --> 00:12:34,160
this was deliberately left vague to

268
00:12:34,160 --> 00:12:34,560
leave

269
00:12:34,560 --> 00:12:38,800
space for detail in the uh

270
00:12:38,800 --> 00:12:41,360
in a given manifest serialization the

271
00:12:41,360 --> 00:12:42,000
idea

272
00:12:42,000 --> 00:12:44,240
in the information model was that

273
00:12:44,240 --> 00:12:46,560
delegation should be a thing that can be

274
00:12:46,560 --> 00:12:47,279
done

275
00:12:47,279 --> 00:12:49,839
and the broad strokes of how it should

276
00:12:49,839 --> 00:12:50,800
be accomplished

277
00:12:50,800 --> 00:12:53,440
are laid out there but not the specifics

278
00:12:53,440 --> 00:12:55,040
because that seemed more appropriate for

279
00:12:55,040 --> 00:12:56,399
a serialization

280
00:12:56,399 --> 00:12:58,959
and does the working group feel that we

281
00:12:58,959 --> 00:12:59,920
should move

282
00:12:59,920 --> 00:13:04,000
more of the definition of the exact

283
00:13:04,000 --> 00:13:06,079
process of delegation out of the

284
00:13:06,079 --> 00:13:07,600
manifest serialization

285
00:13:07,600 --> 00:13:11,920
and into the information model

286
00:13:19,680 --> 00:13:21,120
okay and i guess in the interests of

287
00:13:21,120 --> 00:13:22,639
time we'll let people ponder that and

288
00:13:22,639 --> 00:13:25,680
move on to the next one then

289
00:13:26,320 --> 00:13:29,279
so next slide please

290
00:13:33,279 --> 00:13:35,519
uh right uh there's a requirement on

291
00:13:35,519 --> 00:13:37,519
secure time uh specifically for the

292
00:13:37,519 --> 00:13:39,120
expiration of manifests

293
00:13:39,120 --> 00:13:42,320
um there isn't any reference

294
00:13:42,320 --> 00:13:45,360
in that description on including a

295
00:13:45,360 --> 00:13:46,720
reference time source

296
00:13:46,720 --> 00:13:49,360
the only thing that's uh defined is that

297
00:13:49,360 --> 00:13:50,079
the

298
00:13:50,079 --> 00:13:53,199
uh this so-called secure clock needs to

299
00:13:53,199 --> 00:13:55,199
be monotonically increasing

300
00:13:55,199 --> 00:13:57,920
among other things but that's the key

301
00:13:57,920 --> 00:13:58,639
requirement

302
00:13:58,639 --> 00:14:01,120
and it doesn't mention a reference time

303
00:14:01,120 --> 00:14:01,760
source

304
00:14:01,760 --> 00:14:03,760
so the question is whether we should

305
00:14:03,760 --> 00:14:05,760
define a reference time source as being

306
00:14:05,760 --> 00:14:07,120
part of having a secure

307
00:14:07,120 --> 00:14:11,120
clock or not um i think that it probably

308
00:14:11,120 --> 00:14:13,920
makes sense i guess the only argument i

309
00:14:13,920 --> 00:14:15,040
can see against

310
00:14:15,040 --> 00:14:18,399
adding that text is that you could

311
00:14:18,399 --> 00:14:21,440
quite easily have a secure relative

312
00:14:21,440 --> 00:14:22,160
clock

313
00:14:22,160 --> 00:14:25,519
as long as you express your expiration

314
00:14:25,519 --> 00:14:26,480
times

315
00:14:26,480 --> 00:14:30,000
in relative terms however the manifest

316
00:14:30,000 --> 00:14:32,720
as it stands today uses absolute time

317
00:14:32,720 --> 00:14:33,279
for

318
00:14:33,279 --> 00:14:36,480
uh expiration times so that's

319
00:14:36,480 --> 00:14:40,000
probably not um the the right answer

320
00:14:40,000 --> 00:14:42,320
so i think on that basis we probably

321
00:14:42,320 --> 00:14:43,760
should

322
00:14:43,760 --> 00:14:46,320
make a reference to having a reference

323
00:14:46,320 --> 00:14:48,880
time source

324
00:14:54,480 --> 00:14:58,079
um i just jumped in the queue

325
00:14:58,079 --> 00:15:02,079
um speaking as individual contributor um

326
00:15:02,079 --> 00:15:03,760
i mean generally secure time though is

327
00:15:03,760 --> 00:15:05,519
more than just

328
00:15:05,519 --> 00:15:08,079
providing a time source it's about um

329
00:15:08,079 --> 00:15:09,199
verifying

330
00:15:09,199 --> 00:15:12,240
um that the time came from that source

331
00:15:12,240 --> 00:15:15,040
you know using a signature

332
00:15:15,040 --> 00:15:16,399
uh yeah sorry i should have said a

333
00:15:16,399 --> 00:15:19,760
secure reference time source

334
00:15:20,800 --> 00:15:23,120
okay

335
00:15:24,160 --> 00:15:26,000
okay um well that's it for the

336
00:15:26,000 --> 00:15:27,279
information model so

337
00:15:27,279 --> 00:15:30,720
um barring any additional commentary

338
00:15:30,720 --> 00:15:32,880
i think we can move on uh hannes i guess

339
00:15:32,880 --> 00:15:35,279
is here

340
00:15:36,320 --> 00:15:38,399
i only wanted to point out that in

341
00:15:38,399 --> 00:15:40,480
addition to those three which i think

342
00:15:40,480 --> 00:15:43,600
are the the meat uh or the

343
00:15:43,600 --> 00:15:45,680
sort of the core questions that uh

344
00:15:45,680 --> 00:15:47,199
haven't been addressed in the

345
00:15:47,199 --> 00:15:49,279
with the latest draft update there are

346
00:15:49,279 --> 00:15:50,480
also a few others

347
00:15:50,480 --> 00:15:53,759
um which we need to go through and

348
00:15:53,759 --> 00:15:56,240
it didn't work out to do those uh in

349
00:15:56,240 --> 00:15:57,920
time for the deadline

350
00:15:57,920 --> 00:16:00,959
so i'm going to um do the update next

351
00:16:00,959 --> 00:16:02,079
week

352
00:16:02,079 --> 00:16:05,440
on those or um or this weekend so it's

353
00:16:05,440 --> 00:16:06,639
only

354
00:16:06,639 --> 00:16:08,399
sort of nits and things that need to be

355
00:16:08,399 --> 00:16:09,839
changed here and there

356
00:16:09,839 --> 00:16:12,959
um yeah

357
00:16:12,959 --> 00:16:14,880
but it's coming to an end i would say

358
00:16:14,880 --> 00:16:16,959
with also with the changes that

359
00:16:16,959 --> 00:16:20,839
uh or proposed changes that we just

360
00:16:20,839 --> 00:16:22,560
discussed

361
00:16:22,560 --> 00:16:25,199
uh regarding delegation i think we need

362
00:16:25,199 --> 00:16:26,639
a little more detail

363
00:16:26,639 --> 00:16:29,680
but not everything that's in manifest

364
00:16:29,680 --> 00:16:33,120
and so i'm hoping we can come up with a

365
00:16:33,120 --> 00:16:36,880
uh enough that uh

366
00:16:36,880 --> 00:16:39,040
makes it clear what's going on but at

367
00:16:39,040 --> 00:16:40,639
the same time

368
00:16:40,639 --> 00:16:43,279
um i don't think we want to dilute

369
00:16:43,279 --> 00:16:44,720
what's in the manifest

370
00:16:44,720 --> 00:16:46,480
to the point that it makes it hard for

371
00:16:46,480 --> 00:16:51,839
an implementer to find the text

372
00:16:56,480 --> 00:16:58,399
i almost hear you suggesting that we

373
00:16:58,399 --> 00:17:00,079
should add an example in the

374
00:17:00,079 --> 00:17:05,839
in a manifest document

375
00:17:06,319 --> 00:17:08,480
well i didn't go that far but that's not

376
00:17:08,480 --> 00:17:10,000
a bad idea

377
00:17:10,000 --> 00:17:12,079
but that i think that creates some work

378
00:17:12,079 --> 00:17:15,039
for uh for brendan

379
00:17:15,039 --> 00:17:16,640
well and and you have to balance the

380
00:17:16,640 --> 00:17:18,559
question of whether it makes sense to

381
00:17:18,559 --> 00:17:20,640
add more examples to this document it

382
00:17:20,640 --> 00:17:21,760
has

383
00:17:21,760 --> 00:17:26,720
exactly it is huge yeah

384
00:17:26,720 --> 00:17:30,240
um i i mean i wouldn't be against

385
00:17:30,240 --> 00:17:33,679
having a examples uh

386
00:17:33,679 --> 00:17:36,320
document that's separate um i don't

387
00:17:36,320 --> 00:17:38,160
think there's anything wrong with that

388
00:17:38,160 --> 00:17:40,160
um and the the other aspect of that is

389
00:17:40,160 --> 00:17:41,600
that we can add to it over time if

390
00:17:41,600 --> 00:17:42,160
that's

391
00:17:42,160 --> 00:17:46,160
what is helpful yes that that approach

392
00:17:46,160 --> 00:17:46,960
was taken

393
00:17:46,960 --> 00:17:50,000
for s mine uh and so

394
00:17:50,000 --> 00:17:52,559
there was both good and bad examples

395
00:17:52,559 --> 00:17:53,039
there

396
00:17:53,039 --> 00:17:54,960
so that you could say this is expected

397
00:17:54,960 --> 00:17:57,360
to fail this is expected to succeed

398
00:17:57,360 --> 00:18:00,320
we can do that if if there's somebody

399
00:18:00,320 --> 00:18:03,678
willing to put the time into it

400
00:18:06,960 --> 00:18:10,880
okay um well that that i mean

401
00:18:10,880 --> 00:18:12,400
that is probably a question that we

402
00:18:12,400 --> 00:18:13,919
should uh discuss when we get to the

403
00:18:13,919 --> 00:18:15,679
manifest

404
00:18:15,679 --> 00:18:18,559
which i think is now i could be wrong

405
00:18:18,559 --> 00:18:21,280
roman go ahead

406
00:18:21,679 --> 00:18:23,120
i just wanted to pull on the thread

407
00:18:23,120 --> 00:18:24,799
about the examples i know there's

408
00:18:24,799 --> 00:18:26,960
sometimes cultures and working groups or

409
00:18:26,960 --> 00:18:29,760
rumors that the isg doesn't support

410
00:18:29,760 --> 00:18:30,559
these

411
00:18:30,559 --> 00:18:33,039
add-on documents these add-on

412
00:18:33,039 --> 00:18:34,480
informational documents relative to

413
00:18:34,480 --> 00:18:35,360
protocol specs

414
00:18:35,360 --> 00:18:37,039
i personally find them really helpful

415
00:18:37,039 --> 00:18:39,039
for implementers especially

416
00:18:39,039 --> 00:18:40,320
you know if you're co-developing it with

417
00:18:40,320 --> 00:18:42,480
the spec or after the spec is made

418
00:18:42,480 --> 00:18:44,720
just to be very practical to show those

419
00:18:44,720 --> 00:18:45,600
so i you know

420
00:18:45,600 --> 00:18:47,520
on a from a personal perspective i think

421
00:18:47,520 --> 00:18:48,799
we should do it as an ad

422
00:18:48,799 --> 00:18:52,799
i'll happily support support such a

423
00:18:54,840 --> 00:18:57,840
document

424
00:19:18,640 --> 00:19:21,280
okay uh so there's a new version of the

425
00:19:21,280 --> 00:19:22,960
suit manifest

426
00:19:22,960 --> 00:19:26,320
up there there are very few changes

427
00:19:26,320 --> 00:19:29,520
um so there were a couple of examples

428
00:19:29,520 --> 00:19:31,440
uh changes and it's just that there were

429
00:19:31,440 --> 00:19:32,960
errors in the encoding

430
00:19:32,960 --> 00:19:36,000
um and this had to do with the

431
00:19:36,000 --> 00:19:38,640
uh cddl getting out of sync from the

432
00:19:38,640 --> 00:19:41,039
example generator so that has been fixed

433
00:19:41,039 --> 00:19:41,840
now

434
00:19:41,840 --> 00:19:45,360
and um and in terms of of editorial

435
00:19:45,360 --> 00:19:46,960
changes that's it

436
00:19:46,960 --> 00:19:48,799
there was one feature edition which is

437
00:19:48,799 --> 00:19:50,080
on the next slide

438
00:19:50,080 --> 00:19:53,120
and and that is a specific request from

439
00:19:53,120 --> 00:19:55,919
teep uh teep requested the ability to

440
00:19:55,919 --> 00:19:57,440
delete a component

441
00:19:57,440 --> 00:19:59,760
now the problem with deleting a

442
00:19:59,760 --> 00:20:00,480
component

443
00:20:00,480 --> 00:20:03,919
um as an imperative is that it can

444
00:20:03,919 --> 00:20:05,919
end up causing a lot of dependency

445
00:20:05,919 --> 00:20:08,159
problems if you're able to delete a

446
00:20:08,159 --> 00:20:10,000
specific component and that's depended

447
00:20:10,000 --> 00:20:10,880
on by

448
00:20:10,880 --> 00:20:14,480
an out of tree manifest um a

449
00:20:14,480 --> 00:20:18,400
or indeed a diamond dependency then

450
00:20:18,400 --> 00:20:20,159
you can end up with a broken system

451
00:20:20,159 --> 00:20:21,520
fairly easily

452
00:20:21,520 --> 00:20:22,960
there's also questions about who

453
00:20:22,960 --> 00:20:25,039
actually has the authority to delete

454
00:20:25,039 --> 00:20:29,440
uh trusted components um and

455
00:20:29,440 --> 00:20:32,480
then there are um right uh

456
00:20:32,480 --> 00:20:34,960
two different tas yes so the other

457
00:20:34,960 --> 00:20:36,240
question is what happens when it's

458
00:20:36,240 --> 00:20:37,919
already been deleted

459
00:20:37,919 --> 00:20:41,120
um and in terms of uh

460
00:20:41,120 --> 00:20:43,360
the atomic nature of manifests or of

461
00:20:43,360 --> 00:20:44,159
updates

462
00:20:44,159 --> 00:20:46,559
uh there's the question of what happens

463
00:20:46,559 --> 00:20:47,679
if you

464
00:20:47,679 --> 00:20:50,720
use a component part way through an

465
00:20:50,720 --> 00:20:51,600
update

466
00:20:51,600 --> 00:20:54,960
then delete it and then something fails

467
00:20:54,960 --> 00:20:57,360
afterwards you no longer have the

468
00:20:57,360 --> 00:20:59,919
component that you need to be able to

469
00:20:59,919 --> 00:21:01,440
to use it in the first part of your

470
00:21:01,440 --> 00:21:03,440
manifest when you have to try again

471
00:21:03,440 --> 00:21:06,320
and uh and so you can end up breaking

472
00:21:06,320 --> 00:21:07,520
the entire

473
00:21:07,520 --> 00:21:09,679
manifest even though it's supposed to be

474
00:21:09,679 --> 00:21:10,640
atomic

475
00:21:10,640 --> 00:21:13,280
so i think that either an unlink or a

476
00:21:13,280 --> 00:21:15,520
garbage collect type idiom would make

477
00:21:15,520 --> 00:21:16,080
more sense

478
00:21:16,080 --> 00:21:19,760
to me next slide please

479
00:21:20,559 --> 00:21:22,799
so the idea here is that you mark a

480
00:21:22,799 --> 00:21:24,480
component as unused by the current

481
00:21:24,480 --> 00:21:25,760
manifest tree

482
00:21:25,760 --> 00:21:29,200
you might also include something like

483
00:21:29,200 --> 00:21:32,320
decrementing a reference count on that

484
00:21:32,320 --> 00:21:34,640
component and the idea here is that if

485
00:21:34,640 --> 00:21:35,760
it's marked

486
00:21:35,760 --> 00:21:38,559
and its reference count is zero then at

487
00:21:38,559 --> 00:21:40,240
the end of the current section

488
00:21:40,240 --> 00:21:43,360
or or indeed here where section

489
00:21:43,360 --> 00:21:46,559
is used it may mean the the whole

490
00:21:46,559 --> 00:21:49,360
process of uh doing either a secure

491
00:21:49,360 --> 00:21:50,400
invocation or

492
00:21:50,400 --> 00:21:53,679
a um or an update and that's i think

493
00:21:53,679 --> 00:21:55,039
probably the most likely

494
00:21:55,039 --> 00:21:58,080
uh approach um when that's

495
00:21:58,080 --> 00:22:01,120
done then the manifest processor will

496
00:22:01,120 --> 00:22:02,799
check all of the marked components and

497
00:22:02,799 --> 00:22:05,280
any that have a reference count of zero

498
00:22:05,280 --> 00:22:06,960
can safely be removed

499
00:22:06,960 --> 00:22:09,600
since uh they've they've already been

500
00:22:09,600 --> 00:22:11,440
used to the degree that they

501
00:22:11,440 --> 00:22:15,039
are uh likely to and uh

502
00:22:15,039 --> 00:22:18,799
there shouldn't be any dangling

503
00:22:18,799 --> 00:22:22,320
atomicity problems so i i i would

504
00:22:22,320 --> 00:22:23,520
support the addition

505
00:22:23,520 --> 00:22:27,120
of a garbage collect or or an unlink

506
00:22:27,120 --> 00:22:30,240
uh directive and i've put one of those

507
00:22:30,240 --> 00:22:33,760
into uh version 12. um i'd be

508
00:22:33,760 --> 00:22:35,360
very interested in the working group's

509
00:22:35,360 --> 00:22:37,280
feedback on on that approach

510
00:22:37,280 --> 00:22:40,480
to explicitly removing a component

511
00:22:40,480 --> 00:22:43,440
this gives the manifest processor a bit

512
00:22:43,440 --> 00:22:44,559
more say

513
00:22:44,559 --> 00:22:47,280
over when and how that happens which i

514
00:22:47,280 --> 00:22:49,520
think is probably important

515
00:22:49,520 --> 00:22:52,840
especially when there are multiple

516
00:22:52,840 --> 00:22:54,640
non-non-interdependent

517
00:22:54,640 --> 00:22:59,039
root components so um

518
00:22:59,039 --> 00:23:02,640
after this slide my contents done and

519
00:23:02,640 --> 00:23:05,440
we'll hand over to hanas so if there are

520
00:23:05,440 --> 00:23:07,280
any questions or comments on this

521
00:23:07,280 --> 00:23:08,559
i think this would be a good time to

522
00:23:08,559 --> 00:23:11,120
break for them

523
00:23:11,919 --> 00:23:15,760
uh sure so i think i jumped in cue

524
00:23:15,760 --> 00:23:18,240
so i think from the cheap requirements

525
00:23:18,240 --> 00:23:19,039
perspective

526
00:23:19,039 --> 00:23:21,440
i think that the unlink or garbage

527
00:23:21,440 --> 00:23:22,159
collect

528
00:23:22,159 --> 00:23:24,799
would be perfectly fine so in other

529
00:23:24,799 --> 00:23:25,280
words

530
00:23:25,280 --> 00:23:26,799
i would support that proposal i think

531
00:23:26,799 --> 00:23:28,799
the only constraint to make clear

532
00:23:28,799 --> 00:23:31,840
in the text or examples or something

533
00:23:31,840 --> 00:23:34,000
that part of the teep requirement comes

534
00:23:34,000 --> 00:23:35,679
from the case where

535
00:23:35,679 --> 00:23:38,720
you may have limited capacity and you're

536
00:23:38,720 --> 00:23:40,799
trying to say remove one component in

537
00:23:40,799 --> 00:23:42,799
order to free up space to do an install

538
00:23:42,799 --> 00:23:44,000
of a different component where the first

539
00:23:44,000 --> 00:23:45,520
component is no longer needed

540
00:23:45,520 --> 00:23:46,960
so great i need to do the garbage

541
00:23:46,960 --> 00:23:49,520
collect before another install would

542
00:23:49,520 --> 00:23:50,480
succeed

543
00:23:50,480 --> 00:23:51,679
and so if i understand what you're

544
00:23:51,679 --> 00:23:53,279
saying because you say once the current

545
00:23:53,279 --> 00:23:54,480
section is complete

546
00:23:54,480 --> 00:23:56,320
right as long as you can order the

547
00:23:56,320 --> 00:23:58,640
sections such that the dependency graph

548
00:23:58,640 --> 00:23:59,679
is unaffected

549
00:23:59,679 --> 00:24:00,960
then you can clean it up at the end of

550
00:24:00,960 --> 00:24:02,400
one section and install another one

551
00:24:02,400 --> 00:24:04,640
another section is that correct

552
00:24:04,640 --> 00:24:06,320
yeah i think that you might be able to

553
00:24:06,320 --> 00:24:08,480
special case um

554
00:24:08,480 --> 00:24:10,720
again the the big concern that i've got

555
00:24:10,720 --> 00:24:12,320
here is the atomicity

556
00:24:12,320 --> 00:24:15,840
and the having something fail

557
00:24:15,840 --> 00:24:17,679
after you've removed a component that's

558
00:24:17,679 --> 00:24:19,120
required for rollback

559
00:24:19,120 --> 00:24:21,520
is going to be a big problem right so my

560
00:24:21,520 --> 00:24:22,320
point is that

561
00:24:22,320 --> 00:24:24,559
in the teep case there's two independent

562
00:24:24,559 --> 00:24:25,760
things that are happening

563
00:24:25,760 --> 00:24:29,520
right one is i no longer need component

564
00:24:29,520 --> 00:24:31,840
x it's just an app it's no longer needed

565
00:24:31,840 --> 00:24:33,200
for anything in other words it's a

566
00:24:33,200 --> 00:24:34,960
trusted app so it's not an app that the

567
00:24:34,960 --> 00:24:36,720
normal user thinks of as an app right

568
00:24:36,720 --> 00:24:37,279
it's a

569
00:24:37,279 --> 00:24:41,679
it's a binary that runs in the tee

570
00:24:41,679 --> 00:24:43,760
that is not directly user visible it's a

571
00:24:43,760 --> 00:24:45,360
library that's consumed by

572
00:24:45,360 --> 00:24:47,120
other applications that may no longer

573
00:24:47,120 --> 00:24:48,400
exist right so you can clean up some

574
00:24:48,400 --> 00:24:49,279
space there

575
00:24:49,279 --> 00:24:53,120
that's one thing separately the

576
00:24:53,120 --> 00:24:55,679
authority over the tam wants to install

577
00:24:55,679 --> 00:24:56,720
another app

578
00:24:56,720 --> 00:24:58,640
now it could do those in two completely

579
00:24:58,640 --> 00:25:00,159
separate manifests and two completely

580
00:25:00,159 --> 00:25:01,840
separate protocol exchanges

581
00:25:01,840 --> 00:25:03,120
and it's just trying to bundle them to

582
00:25:03,120 --> 00:25:05,120
do them at the same time because there's

583
00:25:05,120 --> 00:25:06,720
a strict ordering if there's a resource

584
00:25:06,720 --> 00:25:08,320
requirement that says i can't fit the

585
00:25:08,320 --> 00:25:09,840
second one in there it's going to fail

586
00:25:09,840 --> 00:25:11,440
due to out of space unless the first one

587
00:25:11,440 --> 00:25:12,159
does

588
00:25:12,159 --> 00:25:13,520
and so is there a way to bundle those

589
00:25:13,520 --> 00:25:15,279
two suit manifests into a strict

590
00:25:15,279 --> 00:25:15,919
ordering

591
00:25:15,919 --> 00:25:17,679
but there's no dependency other than the

592
00:25:17,679 --> 00:25:18,960
ordering right the first one either

593
00:25:18,960 --> 00:25:20,559
succeeds or fails the second one can

594
00:25:20,559 --> 00:25:22,480
only succeed if the first one succeeds

595
00:25:22,480 --> 00:25:23,520
right that's

596
00:25:23,520 --> 00:25:25,600
what's the right way to express that and

597
00:25:25,600 --> 00:25:27,919
i think you can do that by bundling the

598
00:25:27,919 --> 00:25:29,440
two suit manifests

599
00:25:29,440 --> 00:25:31,279
into a common manifest that just has an

600
00:25:31,279 --> 00:25:33,600
ordering in between them

601
00:25:33,600 --> 00:25:37,360
i i yes you can um i i guess the

602
00:25:37,360 --> 00:25:37,919
question

603
00:25:37,919 --> 00:25:41,279
is uh so right

604
00:25:41,279 --> 00:25:44,480
so this shouldn't be such a big problem

605
00:25:44,480 --> 00:25:46,559
because the components that you're

606
00:25:46,559 --> 00:25:47,520
talking about

607
00:25:47,520 --> 00:25:50,720
should already have before you start

608
00:25:50,720 --> 00:25:53,039
no references if you're deleting this

609
00:25:53,039 --> 00:25:53,760
thing

610
00:25:53,760 --> 00:25:55,840
there shouldn't be any references to it

611
00:25:55,840 --> 00:25:56,960
which means that

612
00:25:56,960 --> 00:25:59,360
the moment you get to uh i'm expressing

613
00:25:59,360 --> 00:26:00,960
i don't have any interest in this and

614
00:26:00,960 --> 00:26:03,600
it's already got a zero dependency

615
00:26:03,600 --> 00:26:05,840
then that's should be a reasonably safe

616
00:26:05,840 --> 00:26:07,520
thing to remove directly

617
00:26:07,520 --> 00:26:09,520
um i think the issues you're worried

618
00:26:09,520 --> 00:26:11,279
about

619
00:26:11,279 --> 00:26:12,400
yeah i think the issues that you're

620
00:26:12,400 --> 00:26:13,840
worried about and why i think that this

621
00:26:13,840 --> 00:26:15,120
solution i think is

622
00:26:15,120 --> 00:26:17,840
fine come up in the non-teep cases

623
00:26:17,840 --> 00:26:19,440
because huge is useful for other cases

624
00:26:19,440 --> 00:26:20,640
too so you have to protect it and that's

625
00:26:20,640 --> 00:26:22,159
why i think this is a better

626
00:26:22,159 --> 00:26:24,159
the unlink or garbage collect semantic

627
00:26:24,159 --> 00:26:25,440
is better in general

628
00:26:25,440 --> 00:26:27,760
i just want to make sure that um it

629
00:26:27,760 --> 00:26:28,880
actually solves

630
00:26:28,880 --> 00:26:30,559
the t case and specifically when you

631
00:26:30,559 --> 00:26:32,400
start by having no references to it

632
00:26:32,400 --> 00:26:34,320
and it is nice and efficient but it's

633
00:26:34,320 --> 00:26:36,480
also safe to use outside of teep and i

634
00:26:36,480 --> 00:26:37,679
think this proposal goes in that

635
00:26:37,679 --> 00:26:38,960
direction but that was my question about

636
00:26:38,960 --> 00:26:40,480
what you meant by once the current

637
00:26:40,480 --> 00:26:41,919
section is complete

638
00:26:41,919 --> 00:26:44,720
yeah no i actually did mean something uh

639
00:26:44,720 --> 00:26:46,240
different so i i mean when

640
00:26:46,240 --> 00:26:48,720
the update process the whole update

641
00:26:48,720 --> 00:26:50,000
process is fully complete

642
00:26:50,000 --> 00:26:51,919
that's the time to actually do the

643
00:26:51,919 --> 00:26:53,679
garbage collection but i think what we

644
00:26:53,679 --> 00:26:55,440
can have is a special case

645
00:26:55,440 --> 00:26:57,520
where there are no references to start

646
00:26:57,520 --> 00:26:58,480
with

647
00:26:58,480 --> 00:27:00,159
so rather than starting at one which

648
00:27:00,159 --> 00:27:02,240
would be the standard uh situation

649
00:27:02,240 --> 00:27:05,520
for a dependency um

650
00:27:05,520 --> 00:27:07,760
you would start at zero and since you're

651
00:27:07,760 --> 00:27:09,120
starting at zero you

652
00:27:09,120 --> 00:27:11,919
know that this is not required and that

653
00:27:11,919 --> 00:27:12,799
a failure

654
00:27:12,799 --> 00:27:16,320
later on in the process isn't going to

655
00:27:16,320 --> 00:27:19,039
render your system inoperable then it's

656
00:27:19,039 --> 00:27:20,880
safe to do a direct removal

657
00:27:20,880 --> 00:27:24,000
um right away i think that should be a

658
00:27:24,000 --> 00:27:24,880
reasonably

659
00:27:24,880 --> 00:27:28,000
safe approach okay so i see david brown

660
00:27:28,000 --> 00:27:29,440
is in queue after me but

661
00:27:29,440 --> 00:27:30,799
so i just let me just make one last

662
00:27:30,799 --> 00:27:32,480
comment and then i will see if david has

663
00:27:32,480 --> 00:27:33,360
a response

664
00:27:33,360 --> 00:27:38,158
to this discussion um there's um

665
00:27:38,320 --> 00:27:40,799
hey sorry i uh just lost my training

666
00:27:40,799 --> 00:27:42,240
yeah there's two different ways that

667
00:27:42,240 --> 00:27:42,880
teep could

668
00:27:42,880 --> 00:27:44,320
could accomplish this between teep and

669
00:27:44,320 --> 00:27:46,320
suits right we could either say

670
00:27:46,320 --> 00:27:48,320
suit's gonna do it in which case you do

671
00:27:48,320 --> 00:27:50,320
what you just summarized

672
00:27:50,320 --> 00:27:52,000
if we did not if that caused problems

673
00:27:52,000 --> 00:27:53,279
for something then the other workaround

674
00:27:53,279 --> 00:27:53,919
was that

675
00:27:53,919 --> 00:27:56,000
teep would pass two independent suit

676
00:27:56,000 --> 00:27:57,600
manifests in the same message

677
00:27:57,600 --> 00:27:59,279
and just run through the process super

678
00:27:59,279 --> 00:28:00,880
processing of those two manifests

679
00:28:00,880 --> 00:28:02,159
sequentially right

680
00:28:02,159 --> 00:28:04,240
and so that would be the workaround if

681
00:28:04,240 --> 00:28:06,399
suit can't solve it then teep could just

682
00:28:06,399 --> 00:28:07,279
more work for t

683
00:28:07,279 --> 00:28:08,640
right just which working group does it

684
00:28:08,640 --> 00:28:10,159
so that's why i prefer what you just

685
00:28:10,159 --> 00:28:11,120
described

686
00:28:11,120 --> 00:28:13,760
brendan but uh david you let me know if

687
00:28:13,760 --> 00:28:14,399
you have

688
00:28:14,399 --> 00:28:15,760
other problems with that because we have

689
00:28:15,760 --> 00:28:17,600
another possible approach we could take

690
00:28:17,600 --> 00:28:20,240
in teeps so i'll get out of you

691
00:28:20,240 --> 00:28:23,919
all right is my audio working yes

692
00:28:23,919 --> 00:28:26,559
perfect um i guess the question i would

693
00:28:26,559 --> 00:28:28,159
have is this reference count

694
00:28:28,159 --> 00:28:30,159
an ephemeral thing that's part of the

695
00:28:30,159 --> 00:28:32,080
pro the update processor is this a

696
00:28:32,080 --> 00:28:33,840
persistent piece of data

697
00:28:33,840 --> 00:28:36,320
associated with each image if it were

698
00:28:36,320 --> 00:28:37,520
persistent

699
00:28:37,520 --> 00:28:39,039
it would make sense that you would come

700
00:28:39,039 --> 00:28:40,880
in at the beginning of this process with

701
00:28:40,880 --> 00:28:42,480
a reference count already 0 and that

702
00:28:42,480 --> 00:28:44,000
would be known

703
00:28:44,000 --> 00:28:46,640
whereas you know say a previous update

704
00:28:46,640 --> 00:28:47,360
removed

705
00:28:47,360 --> 00:28:49,440
what it what depended upon it and the

706
00:28:49,440 --> 00:28:50,880
garbage collect maybe could be

707
00:28:50,880 --> 00:28:52,480
implemented so that

708
00:28:52,480 --> 00:28:54,640
when it's asked to remove the item if

709
00:28:54,640 --> 00:28:56,399
the reference count is zero

710
00:28:56,399 --> 00:28:59,360
it could remove it then otherwise later

711
00:28:59,360 --> 00:29:00,000
um

712
00:29:00,000 --> 00:29:02,000
but that does require storing this more

713
00:29:02,000 --> 00:29:05,039
persistently than just during an update

714
00:29:05,039 --> 00:29:07,039
yeah you're exactly right uh so so

715
00:29:07,039 --> 00:29:08,399
that's the intent it would have to be

716
00:29:08,399 --> 00:29:09,760
something that's persistent

717
00:29:09,760 --> 00:29:12,080
now again i i want to stress that this

718
00:29:12,080 --> 00:29:14,480
is only relevant

719
00:29:14,480 --> 00:29:18,919
when you have multiple non-uh

720
00:29:18,919 --> 00:29:21,600
non-interdependent routes so that means

721
00:29:21,600 --> 00:29:23,120
you have

722
00:29:23,120 --> 00:29:25,440
essentially you have apps if you don't

723
00:29:25,440 --> 00:29:27,200
have apps that you can install inter

724
00:29:27,200 --> 00:29:29,200
independently then this is completely

725
00:29:29,200 --> 00:29:31,120
irrelevant if you're dealing with

726
00:29:31,120 --> 00:29:33,600
system images that have dependencies

727
00:29:33,600 --> 00:29:35,840
this doesn't become relevant

728
00:29:35,840 --> 00:29:38,480
if you but when you have the ability to

729
00:29:38,480 --> 00:29:39,440
install

730
00:29:39,440 --> 00:29:42,399
individual applications and those

731
00:29:42,399 --> 00:29:44,399
applications may have dependencies

732
00:29:44,399 --> 00:29:45,840
then this reference counting thing

733
00:29:45,840 --> 00:29:49,039
starts to become a question

734
00:29:50,720 --> 00:29:52,880
okay that addresses as long as we're

735
00:29:52,880 --> 00:29:54,960
clear about that however we word it i

736
00:29:54,960 --> 00:29:57,840
think is the important part

737
00:29:57,840 --> 00:30:00,880
yeah i think the version that's in there

738
00:30:00,880 --> 00:30:01,440
right now

739
00:30:01,440 --> 00:30:03,279
doesn't go into these nuances quite as

740
00:30:03,279 --> 00:30:05,600
well as i would like

741
00:30:05,600 --> 00:30:07,200
um yeah just one other point of

742
00:30:07,200 --> 00:30:09,520
clarification when we say apps i i

743
00:30:09,520 --> 00:30:11,600
would generalize that to the real case

744
00:30:11,600 --> 00:30:13,279
is really about like shared libraries

745
00:30:13,279 --> 00:30:14,640
right it just so happens that

746
00:30:14,640 --> 00:30:17,279
in teeth and a trusted app is basically

747
00:30:17,279 --> 00:30:18,480
a shared library but if you want to

748
00:30:18,480 --> 00:30:19,360
generalize it

749
00:30:19,360 --> 00:30:20,960
the things with references are you can

750
00:30:20,960 --> 00:30:22,559
think of as just being shared libraries

751
00:30:22,559 --> 00:30:23,840
anytime that you have a

752
00:30:23,840 --> 00:30:24,960
multiple reference counts of

753
00:30:24,960 --> 00:30:26,559
dependencies on it it's basically a

754
00:30:26,559 --> 00:30:27,919
shared library so that's the case we're

755
00:30:27,919 --> 00:30:37,840
talking about

756
00:30:40,640 --> 00:30:44,000
okay i hope you can hear me um

757
00:30:44,000 --> 00:30:46,559
next slide

758
00:30:48,000 --> 00:30:50,720
so for those who have been at the deep

759
00:30:50,720 --> 00:30:51,840
meeting yesterday

760
00:30:51,840 --> 00:30:54,559
this is sort of an extended version of

761
00:30:54,559 --> 00:30:55,200
what i

762
00:30:55,200 --> 00:30:58,080
spoke about yesterday um so they have

763
00:30:58,080 --> 00:30:59,519
two

764
00:30:59,519 --> 00:31:01,600
so i looked as i mentioned i looked at

765
00:31:01,600 --> 00:31:05,120
the mcu booth as a sort of uh

766
00:31:05,120 --> 00:31:07,360
as a real world example on what is uh

767
00:31:07,360 --> 00:31:09,360
done today and also spoke to david brown

768
00:31:09,360 --> 00:31:10,399
who was on the

769
00:31:10,399 --> 00:31:12,960
on the microphone previously about uh

770
00:31:12,960 --> 00:31:15,039
what functionality

771
00:31:15,039 --> 00:31:16,880
is used and what they have implemented

772
00:31:16,880 --> 00:31:18,320
and how they did it and so on

773
00:31:18,320 --> 00:31:21,600
and looked at that code and

774
00:31:21,600 --> 00:31:24,640
there were two mechanisms um namely

775
00:31:24,640 --> 00:31:27,200
sort of a symmetric key based version of

776
00:31:27,200 --> 00:31:28,000
encryption

777
00:31:28,000 --> 00:31:31,120
as well as well i should say

778
00:31:31,120 --> 00:31:34,000
both of them use symmetric keys to

779
00:31:34,000 --> 00:31:35,679
encrypt the firmware because it's it's

780
00:31:35,679 --> 00:31:36,880
larger but

781
00:31:36,880 --> 00:31:40,320
for the key exchange

782
00:31:40,320 --> 00:31:41,919
there's the symmetric key version which

783
00:31:41,919 --> 00:31:44,320
is the um the aes keywrap

784
00:31:44,320 --> 00:31:46,000
and then there's the asymmetric key

785
00:31:46,000 --> 00:31:47,919
version which uh

786
00:31:47,919 --> 00:31:52,240
uses elliptical tiffy helmet and

787
00:31:52,240 --> 00:31:54,320
and i'm going to walk you through how

788
00:31:54,320 --> 00:31:55,279
that looks like

789
00:31:55,279 --> 00:31:59,200
um when embedded into the suit manifest

790
00:31:59,200 --> 00:32:03,519
um as a reminder so i i don't know if

791
00:32:03,519 --> 00:32:05,600
how many of you remember what the cosy

792
00:32:05,600 --> 00:32:08,000
spec says among the different options

793
00:32:08,000 --> 00:32:08,480
but

794
00:32:08,480 --> 00:32:11,760
those are two of them and so i picked

795
00:32:11,760 --> 00:32:12,240
those

796
00:32:12,240 --> 00:32:15,840
because of um because they map

797
00:32:15,840 --> 00:32:18,240
closer to what is being done already

798
00:32:18,240 --> 00:32:19,440
today

799
00:32:19,440 --> 00:32:22,640
in mcu boot and i also looked at

800
00:32:22,640 --> 00:32:26,240
um other boot loaders from nxp and sd

801
00:32:26,240 --> 00:32:28,080
microelectronics which i use something

802
00:32:28,080 --> 00:32:29,840
very similar

803
00:32:29,840 --> 00:32:32,159
obviously so the encryption is typically

804
00:32:32,159 --> 00:32:34,320
used in in two cases as

805
00:32:34,320 --> 00:32:37,600
david brown also confirmed to me one is

806
00:32:37,600 --> 00:32:40,000
when you have a firmware image stored on

807
00:32:40,000 --> 00:32:41,440
an external flash

808
00:32:41,440 --> 00:32:45,039
and then you use um obviously the

809
00:32:45,039 --> 00:32:48,480
decryption operation to uh put it on the

810
00:32:48,480 --> 00:32:49,279
internal

811
00:32:49,279 --> 00:32:52,000
flash because obviously you can only

812
00:32:52,000 --> 00:32:53,120
operate on the

813
00:32:53,120 --> 00:32:56,000
decrypted image to actually do an

814
00:32:56,000 --> 00:32:57,039
execute in place

815
00:32:57,039 --> 00:33:00,480
the other option is uh when the

816
00:33:00,480 --> 00:33:03,120
uh encrypted image gets decrypted and

817
00:33:03,120 --> 00:33:04,720
then put into

818
00:33:04,720 --> 00:33:08,880
into ram uh for execution there

819
00:33:08,880 --> 00:33:12,159
um the former being more common um

820
00:33:12,159 --> 00:33:15,760
so in the in the aes 128 key wrap case

821
00:33:15,760 --> 00:33:17,360
and i'll try to summarize

822
00:33:17,360 --> 00:33:20,399
real quick uh russ is the uh delete also

823
00:33:20,399 --> 00:33:22,240
on that um rfc

824
00:33:22,240 --> 00:33:24,480
so in essence there are two keys being

825
00:33:24,480 --> 00:33:25,360
used um

826
00:33:25,360 --> 00:33:27,519
one is the content encryption key or

827
00:33:27,519 --> 00:33:28,480
keck

828
00:33:28,480 --> 00:33:31,919
which is um used to encrypt in our case

829
00:33:31,919 --> 00:33:33,440
uh the firmware or

830
00:33:33,440 --> 00:33:36,559
software or whatever we want to encrypt

831
00:33:36,559 --> 00:33:39,679
this suit and the other one is the key

832
00:33:39,679 --> 00:33:41,360
that is used to encrypt that content

833
00:33:41,360 --> 00:33:42,320
encryption key

834
00:33:42,320 --> 00:33:45,600
um which is also pronounced keck

835
00:33:45,600 --> 00:33:49,200
but it's the key encryption key um

836
00:33:49,200 --> 00:33:52,240
and the ca key the content encryption

837
00:33:52,240 --> 00:33:52,640
key

838
00:33:52,640 --> 00:33:56,880
is uh is randomly generated and in

839
00:33:56,880 --> 00:33:59,200
um they externally provide key

840
00:33:59,200 --> 00:34:00,799
encryption keys then used to

841
00:34:00,799 --> 00:34:03,039
to protect it so that's a relatively

842
00:34:03,039 --> 00:34:05,279
simple um technique

843
00:34:05,279 --> 00:34:07,120
uh as you will see later more

844
00:34:07,120 --> 00:34:08,480
complicated though is

845
00:34:08,480 --> 00:34:12,159
the the public key uh based variant of

846
00:34:12,159 --> 00:34:13,440
it

847
00:34:13,440 --> 00:34:16,320
oh it's yeah so it's uh the course

848
00:34:16,320 --> 00:34:18,079
respect calls it elliptic curve tv

849
00:34:18,079 --> 00:34:20,079
helmet ephemeral static plus

850
00:34:20,079 --> 00:34:22,800
aes key wrap and the procedure is

851
00:34:22,800 --> 00:34:24,320
roughly as follows

852
00:34:24,320 --> 00:34:26,879
um so the sender sort of the firmware

853
00:34:26,879 --> 00:34:27,520
also

854
00:34:27,520 --> 00:34:30,639
in our case generates an ephemeral

855
00:34:30,639 --> 00:34:33,440
elliptic curve diffie-hellman keeper and

856
00:34:33,440 --> 00:34:34,000
then

857
00:34:34,000 --> 00:34:37,918
um that sender then retrieves the

858
00:34:37,918 --> 00:34:40,079
receiver's static public key which

859
00:34:40,079 --> 00:34:42,000
obviously needs to possess

860
00:34:42,000 --> 00:34:44,560
um and uses the lift curve if you have

861
00:34:44,560 --> 00:34:46,000
an operation on the

862
00:34:46,000 --> 00:34:49,440
um using its private key

863
00:34:49,440 --> 00:34:52,560
uh that the one that he just created

864
00:34:52,560 --> 00:34:55,918
in the in the previous step uh with the

865
00:34:55,918 --> 00:34:58,079
static public key of the recipient of

866
00:34:58,079 --> 00:34:59,280
the iot device

867
00:34:59,280 --> 00:35:01,760
and generates this symmetric key which i

868
00:35:01,760 --> 00:35:02,400
call it

869
00:35:02,400 --> 00:35:05,760
here ecdh shared and then

870
00:35:05,760 --> 00:35:07,920
it needs to apply an hkdf function which

871
00:35:07,920 --> 00:35:09,839
i will get into later because i think

872
00:35:09,839 --> 00:35:10,160
it's

873
00:35:10,160 --> 00:35:12,240
i'm quite relevant to the terms of types

874
00:35:12,240 --> 00:35:15,520
of profiling we are doing

875
00:35:15,599 --> 00:35:17,920
and this produces um the content

876
00:35:17,920 --> 00:35:19,359
encryption key

877
00:35:19,359 --> 00:35:22,079
and the the key encryption key um and

878
00:35:22,079 --> 00:35:22,640
then

879
00:35:22,640 --> 00:35:24,400
the same procedure with keywrap is

880
00:35:24,400 --> 00:35:26,960
supplied that i just explained

881
00:35:26,960 --> 00:35:29,040
so the reason i'm i'm pointing those out

882
00:35:29,040 --> 00:35:31,760
is because those are only two mechanisms

883
00:35:31,760 --> 00:35:34,480
out of the a range of different

884
00:35:34,480 --> 00:35:35,839
techniques that are

885
00:35:35,839 --> 00:35:39,520
made available with cosi and i really

886
00:35:39,520 --> 00:35:41,599
think that we have to nail it down to

887
00:35:41,599 --> 00:35:42,960
a few of them and describe them

888
00:35:42,960 --> 00:35:44,800
precisely so that there is some level of

889
00:35:44,800 --> 00:35:46,240
intro ability

890
00:35:46,240 --> 00:35:48,320
and also the code size is manageable

891
00:35:48,320 --> 00:35:50,880
next slide

892
00:35:51,119 --> 00:35:53,680
so um start off with the simpler one uh

893
00:35:53,680 --> 00:35:54,400
with this

894
00:35:54,400 --> 00:35:56,960
keywrap so this is um how it looks like

895
00:35:56,960 --> 00:35:57,440
in a

896
00:35:57,440 --> 00:36:00,560
as an example i shortened the um

897
00:36:00,560 --> 00:36:04,079
encrypted content encryption key here uh

898
00:36:04,079 --> 00:36:06,400
but otherwise it's it's uh this should

899
00:36:06,400 --> 00:36:08,960
be a working example if i got it right

900
00:36:08,960 --> 00:36:12,320
um so this is a cozy encrypt

901
00:36:12,320 --> 00:36:15,440
not a cozy encrypt zero so i i

902
00:36:15,440 --> 00:36:17,440
suggest only use the encrypt version

903
00:36:17,440 --> 00:36:20,160
which includes information about the key

904
00:36:20,160 --> 00:36:22,320
uh that is being used which i think is

905
00:36:22,320 --> 00:36:24,000
quite useful

906
00:36:24,000 --> 00:36:27,920
um the yellow box is

907
00:36:27,920 --> 00:36:31,359
is information used to

908
00:36:31,359 --> 00:36:34,400
encrypt their the firmware

909
00:36:34,400 --> 00:36:37,920
and and so the first the first bucket

910
00:36:37,920 --> 00:36:38,480
here is

911
00:36:38,480 --> 00:36:40,160
uh sort of the protected field which

912
00:36:40,160 --> 00:36:42,400
just encodes the algorithm being used

913
00:36:42,400 --> 00:36:43,520
here in our

914
00:36:43,520 --> 00:36:47,200
example aes gcm 128

915
00:36:47,200 --> 00:36:49,520
the second bucket is an unprotected

916
00:36:49,520 --> 00:36:50,240
field

917
00:36:50,240 --> 00:36:52,000
so called unprotected field or it's

918
00:36:52,000 --> 00:36:53,680
actually unprotected

919
00:36:53,680 --> 00:36:55,200
well actually the whole thing is

920
00:36:55,200 --> 00:36:57,520
protected but leaving that aside

921
00:36:57,520 --> 00:37:01,119
um there's the iv in there or the nons

922
00:37:01,119 --> 00:37:04,960
that we use with the aad cipher and then

923
00:37:04,960 --> 00:37:08,720
we use only a detached cipher text so

924
00:37:08,720 --> 00:37:09,920
the firmware image is

925
00:37:09,920 --> 00:37:12,480
not included in here um so that's why

926
00:37:12,480 --> 00:37:14,320
there's a null

927
00:37:14,320 --> 00:37:17,520
as the last line in this yellow box

928
00:37:17,520 --> 00:37:20,640
if we go to the blue box this is

929
00:37:20,640 --> 00:37:24,400
the information needed for the keywrap

930
00:37:24,400 --> 00:37:26,320
and it essentially says here's the

931
00:37:26,320 --> 00:37:27,839
algorithm for keywrap

932
00:37:27,839 --> 00:37:30,800
here's the key identifier for the that

933
00:37:30,800 --> 00:37:32,640
identifies the

934
00:37:32,640 --> 00:37:35,359
uh the key encryption key that is used

935
00:37:35,359 --> 00:37:36,560
then to

936
00:37:36,560 --> 00:37:39,839
encrypt this randomly generated keck

937
00:37:39,839 --> 00:37:42,000
the content encryption key which is the

938
00:37:42,000 --> 00:37:44,079
last line here this so this is then

939
00:37:44,079 --> 00:37:47,680
um and if i hope it's correct

940
00:37:47,680 --> 00:37:51,280
um but this is uh how then the example

941
00:37:51,280 --> 00:37:52,720
would look like

942
00:37:52,720 --> 00:37:55,839
and with of course uh alongside with the

943
00:37:55,839 --> 00:37:58,960
encrypted firmware image

944
00:37:59,200 --> 00:38:03,280
okay uh that's um so there's one thing

945
00:38:03,280 --> 00:38:06,880
um that didn't mean in the queue

946
00:38:06,880 --> 00:38:08,960
do you want to take his question or do

947
00:38:08,960 --> 00:38:11,040
you want to wait till the end of this

948
00:38:11,040 --> 00:38:18,079
um go ahead david

949
00:38:18,079 --> 00:38:20,560
over there okay yeah the question one is

950
00:38:20,560 --> 00:38:22,079
is actually in regards to you mentioned

951
00:38:22,079 --> 00:38:23,839
the two use cases

952
00:38:23,839 --> 00:38:25,920
for this i just wanted to point out i

953
00:38:25,920 --> 00:38:27,200
remember a third one that

954
00:38:27,200 --> 00:38:30,880
hasn't gotten implemented in mcu boot

955
00:38:30,880 --> 00:38:33,839
and there are microcontrollers that

956
00:38:33,839 --> 00:38:34,800
support

957
00:38:34,800 --> 00:38:37,599
loading a content encryption key into

958
00:38:37,599 --> 00:38:38,400
the hardware

959
00:38:38,400 --> 00:38:40,240
and are able to execute directly in

960
00:38:40,240 --> 00:38:42,880
place from an encrypted image

961
00:38:42,880 --> 00:38:44,160
so i just wanted to point out that that

962
00:38:44,160 --> 00:38:46,560
is i know of real examples they just

963
00:38:46,560 --> 00:38:48,000
didn't get upstreamed into

964
00:38:48,000 --> 00:38:50,640
the mcu boot code yeah that that's true

965
00:38:50,640 --> 00:38:51,520
um

966
00:38:51,520 --> 00:38:54,880
there's uh there's some uh it's a it's a

967
00:38:54,880 --> 00:38:55,359
rare

968
00:38:55,359 --> 00:38:58,079
case of uh microcontrollers i i forgot

969
00:38:58,079 --> 00:39:00,000
which one it is but

970
00:39:00,000 --> 00:39:04,240
it's um it basically has the hardware

971
00:39:04,240 --> 00:39:06,320
capabilities to do the

972
00:39:06,320 --> 00:39:08,960
uh decryption in hardware rather than

973
00:39:08,960 --> 00:39:10,720
doing something

974
00:39:10,720 --> 00:39:12,560
in software which would require copy

975
00:39:12,560 --> 00:39:14,320
things around

976
00:39:14,320 --> 00:39:16,720
you could also argue that another

977
00:39:16,720 --> 00:39:18,800
benefit of encryption is which i didn't

978
00:39:18,800 --> 00:39:19,760
mention is

979
00:39:19,760 --> 00:39:23,200
like you would additionally encrypt the

980
00:39:23,200 --> 00:39:24,720
binary all the way from

981
00:39:24,720 --> 00:39:29,040
the firmware also to um the

982
00:39:29,040 --> 00:39:32,400
the software that um or to mcu boot for

983
00:39:32,400 --> 00:39:34,800
example

984
00:39:35,200 --> 00:39:39,680
okay um next slide

985
00:39:39,680 --> 00:39:42,800
uh yeah so um the the aes key wrap needs

986
00:39:42,800 --> 00:39:44,640
an additional data structure

987
00:39:44,640 --> 00:39:47,760
um and and

988
00:39:47,760 --> 00:39:50,400
this uh is encoded um as shown on the

989
00:39:50,400 --> 00:39:50,960
screen

990
00:39:50,960 --> 00:39:53,760
uh which the cozy spec defines so um

991
00:39:53,760 --> 00:39:55,200
there's the

992
00:39:55,200 --> 00:39:57,599
um there's a string then there's the

993
00:39:57,599 --> 00:40:00,079
protected field and then some

994
00:40:00,079 --> 00:40:04,160
external additional data

995
00:40:04,160 --> 00:40:05,839
and my suggestion is to have the

996
00:40:05,839 --> 00:40:08,079
external additional data

997
00:40:08,079 --> 00:40:11,359
defined as null and

998
00:40:11,359 --> 00:40:14,880
and the my reading of the specification

999
00:40:14,880 --> 00:40:17,040
is that the protected field here

1000
00:40:17,040 --> 00:40:19,200
since we have two protected fields

1001
00:40:19,200 --> 00:40:20,800
refers to the

1002
00:40:20,800 --> 00:40:22,800
outer protected field so to the yellow

1003
00:40:22,800 --> 00:40:24,560
box um not to the

1004
00:40:24,560 --> 00:40:26,079
blue box i had shown on the previous

1005
00:40:26,079 --> 00:40:29,119
slide but i i would need someone else to

1006
00:40:29,119 --> 00:40:31,839
confirm that um that was my

1007
00:40:31,839 --> 00:40:33,760
understanding of the spec but uh

1008
00:40:33,760 --> 00:40:36,480
in talking to rasa i have misinterpreted

1009
00:40:36,480 --> 00:40:38,640
this spec in other places so i i'm

1010
00:40:38,640 --> 00:40:40,400
i'm trying to be a little bit cautious

1011
00:40:40,400 --> 00:40:42,240
here um

1012
00:40:42,240 --> 00:40:47,200
so there's some clarification needed

1013
00:40:47,200 --> 00:40:50,000
i don't think this um the null for the

1014
00:40:50,000 --> 00:40:51,280
external

1015
00:40:51,280 --> 00:40:54,319
aad is um controversial so i will skip

1016
00:40:54,319 --> 00:40:57,040
to the next slide

1017
00:40:57,440 --> 00:40:59,280
okay um this is the more complicated

1018
00:40:59,280 --> 00:41:00,960
technique uh but

1019
00:41:00,960 --> 00:41:03,680
security-wise better um so there's

1020
00:41:03,680 --> 00:41:04,400
another

1021
00:41:04,400 --> 00:41:07,119
as you can immediately see uh it first

1022
00:41:07,119 --> 00:41:09,280
of all it didn't fit on one screen uh

1023
00:41:09,280 --> 00:41:12,160
but so there's a second one but there's

1024
00:41:12,160 --> 00:41:13,520
also another

1025
00:41:13,520 --> 00:41:16,720
layer in here in addition to the

1026
00:41:16,720 --> 00:41:19,599
boxes i explained previously which is a

1027
00:41:19,599 --> 00:41:20,079
slightly

1028
00:41:20,079 --> 00:41:21,599
change but i will glance over those

1029
00:41:21,599 --> 00:41:24,480
aspects um

1030
00:41:24,480 --> 00:41:28,480
there is in an innermost recipient

1031
00:41:28,480 --> 00:41:31,920
box which defines

1032
00:41:31,920 --> 00:41:34,880
essentially carries the ephemeral key

1033
00:41:34,880 --> 00:41:36,079
that was created

1034
00:41:36,079 --> 00:41:39,920
obviously the public key and

1035
00:41:39,920 --> 00:41:43,040
it also includes a key id which refers

1036
00:41:43,040 --> 00:41:44,000
to

1037
00:41:44,000 --> 00:41:48,160
the key the sender so the firmware also

1038
00:41:48,160 --> 00:41:51,760
um expected the was it what it selected

1039
00:41:51,760 --> 00:41:56,560
um from this static uh public key

1040
00:41:56,560 --> 00:41:59,760
and then um otherwise

1041
00:41:59,760 --> 00:42:03,440
uh there's there's a lot of

1042
00:42:03,440 --> 00:42:06,560
uh similarity here in in terms of the

1043
00:42:06,560 --> 00:42:08,000
the structure

1044
00:42:08,000 --> 00:42:12,480
um okay uh next slide

1045
00:42:12,960 --> 00:42:15,280
there's um here for completeness there's

1046
00:42:15,280 --> 00:42:16,960
the ephemera structure which

1047
00:42:16,960 --> 00:42:19,520
um which contains this bubbly key it's a

1048
00:42:19,520 --> 00:42:21,680
cozy key structure which also has um a

1049
00:42:21,680 --> 00:42:23,119
couple of options

1050
00:42:23,119 --> 00:42:26,400
and um in in the code i've been working

1051
00:42:26,400 --> 00:42:29,119
um the y component could uh

1052
00:42:29,119 --> 00:42:31,440
be replaced by just the sign bit but i

1053
00:42:31,440 --> 00:42:32,560
include the the y

1054
00:42:32,560 --> 00:42:34,480
component of the key because i couldn't

1055
00:42:34,480 --> 00:42:36,000
figure out on how to

1056
00:42:36,000 --> 00:42:38,880
um get this to work with uh the embed

1057
00:42:38,880 --> 00:42:40,319
dls api

1058
00:42:40,319 --> 00:42:43,280
but i'm going to look into that so but

1059
00:42:43,280 --> 00:42:44,880
um i would suggest to have

1060
00:42:44,880 --> 00:42:47,920
one specific encoding rather than the

1061
00:42:47,920 --> 00:42:49,680
choices that are being offered

1062
00:42:49,680 --> 00:42:51,920
because you can have compressed points

1063
00:42:51,920 --> 00:42:53,520
and and

1064
00:42:53,520 --> 00:42:55,680
of course there's also the question

1065
00:42:55,680 --> 00:42:57,200
about what

1066
00:42:57,200 --> 00:43:00,480
curves and what algorithms should be

1067
00:43:00,480 --> 00:43:02,720
recommended in the suit specification

1068
00:43:02,720 --> 00:43:03,760
because there are

1069
00:43:03,760 --> 00:43:06,240
obviously also a lot of choices um next

1070
00:43:06,240 --> 00:43:08,560
slide

1071
00:43:08,720 --> 00:43:11,599
i didn't go into the algorithm

1072
00:43:11,599 --> 00:43:13,440
recommendation here actually

1073
00:43:13,440 --> 00:43:16,079
um so this is the complicated part which

1074
00:43:16,079 --> 00:43:17,680
i think is really important to

1075
00:43:17,680 --> 00:43:20,640
also specify the in the document is

1076
00:43:20,640 --> 00:43:21,119
because

1077
00:43:21,119 --> 00:43:25,280
um here that in the gray box you see

1078
00:43:25,280 --> 00:43:27,599
how the procedure works to generate this

1079
00:43:27,599 --> 00:43:30,160
con this key encryption key

1080
00:43:30,160 --> 00:43:33,200
it's basically using an hkdf um

1081
00:43:33,200 --> 00:43:36,880
on applied to the ecdh

1082
00:43:36,880 --> 00:43:39,040
shared key with some context and the

1083
00:43:39,040 --> 00:43:41,680
context is rather complicated

1084
00:43:41,680 --> 00:43:43,920
it's this cozy structure which needs to

1085
00:43:43,920 --> 00:43:45,920
be populated with different

1086
00:43:45,920 --> 00:43:48,880
parameters and

1087
00:43:49,040 --> 00:43:52,240
there there's the

1088
00:43:52,240 --> 00:43:54,160
identities of the two parties and i

1089
00:43:54,160 --> 00:43:55,359
assume you

1090
00:43:55,359 --> 00:43:59,280
and we in our case refer to you would be

1091
00:43:59,280 --> 00:44:02,400
uh the firmware author or the the party

1092
00:44:02,400 --> 00:44:03,040
that uh

1093
00:44:03,040 --> 00:44:05,280
generates the encryption and v is the

1094
00:44:05,280 --> 00:44:06,160
recipient

1095
00:44:06,160 --> 00:44:09,280
um so in our case the iot device

1096
00:44:09,280 --> 00:44:13,119
um and so the key id

1097
00:44:13,119 --> 00:44:15,920
would be a good fit for the um for the

1098
00:44:15,920 --> 00:44:17,760
recipient because that's something we

1099
00:44:17,760 --> 00:44:20,560
already include as i mentioned uh

1100
00:44:20,560 --> 00:44:21,760
previously for

1101
00:44:21,760 --> 00:44:25,040
selecting the right key on

1102
00:44:25,040 --> 00:44:27,520
on the iot device for the elliptic curve

1103
00:44:27,520 --> 00:44:28,560
dv helmet

1104
00:44:28,560 --> 00:44:31,359
but um for the sender i wasn't quite

1105
00:44:31,359 --> 00:44:32,079
sure

1106
00:44:32,079 --> 00:44:35,440
what what identifier to include here

1107
00:44:35,440 --> 00:44:38,880
so that's something um that needs to be

1108
00:44:38,880 --> 00:44:39,920
worked out

1109
00:44:39,920 --> 00:44:42,480
there are also nonsense in all of those

1110
00:44:42,480 --> 00:44:43,839
body infrastructures

1111
00:44:43,839 --> 00:44:48,078
which i would suggest to

1112
00:44:48,240 --> 00:44:51,520
use nil or null here um because i didn't

1113
00:44:51,520 --> 00:44:52,720
really know

1114
00:44:52,720 --> 00:44:54,640
i couldn't figure out what nonsense we

1115
00:44:54,640 --> 00:44:55,760
could use here

1116
00:44:55,760 --> 00:44:58,319
we could probably carry some additional

1117
00:44:58,319 --> 00:44:59,040
nonces in

1118
00:44:59,040 --> 00:45:02,240
in the payload um but i i wasn't sure

1119
00:45:02,240 --> 00:45:05,359
what added value those would provide

1120
00:45:05,359 --> 00:45:08,400
uh so maybe someone has some ideas and

1121
00:45:08,400 --> 00:45:08,720
has

1122
00:45:08,720 --> 00:45:10,560
different use cases that would justify

1123
00:45:10,560 --> 00:45:12,160
this um

1124
00:45:12,160 --> 00:45:14,800
and then there's also the um it's called

1125
00:45:14,800 --> 00:45:15,520
sub pub

1126
00:45:15,520 --> 00:45:19,200
info which contains um

1127
00:45:19,200 --> 00:45:20,800
the protected parameter and the

1128
00:45:20,800 --> 00:45:22,480
algorithm id the date and the

1129
00:45:22,480 --> 00:45:26,240
key lens and again here that the

1130
00:45:26,240 --> 00:45:28,480
challenge is like ideally what

1131
00:45:28,480 --> 00:45:30,079
parameters would be used

1132
00:45:30,079 --> 00:45:31,839
here would we use the algorithms that

1133
00:45:31,839 --> 00:45:33,599
are used to encrypt

1134
00:45:33,599 --> 00:45:36,720
the cac or would be used um

1135
00:45:36,720 --> 00:45:38,400
so essentially the information from the

1136
00:45:38,400 --> 00:45:40,640
yellow box or from the blue box

1137
00:45:40,640 --> 00:45:43,920
um which at least from my reading of the

1138
00:45:43,920 --> 00:45:45,440
spec of the cosy spec

1139
00:45:45,440 --> 00:45:48,800
at least um wasn't wasn't clear to me

1140
00:45:48,800 --> 00:45:50,880
and then there's some other and and some

1141
00:45:50,880 --> 00:45:53,200
additional information which i

1142
00:45:53,200 --> 00:45:56,400
um would have also suggested to um

1143
00:45:56,400 --> 00:46:00,720
to use null here or to not populate um

1144
00:46:00,720 --> 00:46:03,599
unless there's there's a good reason but

1145
00:46:03,599 --> 00:46:06,240
maybe maybe someone of you has an idea

1146
00:46:06,240 --> 00:46:09,359
russ david uh

1147
00:46:09,359 --> 00:46:12,640
so the reason for the nonce

1148
00:46:12,640 --> 00:46:15,599
is if the ephemeral key is going to get

1149
00:46:15,599 --> 00:46:16,079
used

1150
00:46:16,079 --> 00:46:19,760
more than once it is to make sure you

1151
00:46:19,760 --> 00:46:23,599
compute a different key for the

1152
00:46:23,599 --> 00:46:27,760
kek if you're sure

1153
00:46:27,760 --> 00:46:31,119
100 guaranteed positive that it will be

1154
00:46:31,119 --> 00:46:34,079
used for one and only one firmware image

1155
00:46:34,079 --> 00:46:37,200
then you can uh avoid the

1156
00:46:37,200 --> 00:46:40,480
the knobs okay so

1157
00:46:40,480 --> 00:46:43,520
so in that um so ideally like

1158
00:46:43,520 --> 00:46:46,800
um for the scheme since the uh cinders

1159
00:46:46,800 --> 00:46:49,599
uh ephemeral keeper it was supposed to

1160
00:46:49,599 --> 00:46:49,920
be

1161
00:46:49,920 --> 00:46:52,079
ephemeral as the name says uh they are

1162
00:46:52,079 --> 00:46:53,680
probably you wouldn't want to include

1163
00:46:53,680 --> 00:46:56,560
the nons but what about the static uh

1164
00:46:56,560 --> 00:46:58,640
the static key of the recipient which

1165
00:46:58,640 --> 00:47:00,560
clearly as the name suggests is

1166
00:47:00,560 --> 00:47:03,440
static would that require me to use a

1167
00:47:03,440 --> 00:47:04,319
nonce

1168
00:47:04,319 --> 00:47:07,119
no as long as one of the keys is truly

1169
00:47:07,119 --> 00:47:07,839
ephemeral

1170
00:47:07,839 --> 00:47:09,520
single use you can get away without

1171
00:47:09,520 --> 00:47:11,359
bananas okay

1172
00:47:11,359 --> 00:47:14,560
so um what would you recommend in terms

1173
00:47:14,560 --> 00:47:16,720
of like specification because ideally

1174
00:47:16,720 --> 00:47:20,000
like this is uh i would like to

1175
00:47:20,000 --> 00:47:22,960
leave as little options as possible

1176
00:47:22,960 --> 00:47:24,000
because it makes this

1177
00:47:24,000 --> 00:47:27,200
implementation simpler

1178
00:47:28,160 --> 00:47:32,880
um you say the

1179
00:47:32,880 --> 00:47:35,760
a federal key is only used to encrypt

1180
00:47:35,760 --> 00:47:36,880
one content

1181
00:47:36,880 --> 00:47:39,839
then you can get them up to that

1182
00:47:39,839 --> 00:47:40,480
position

1183
00:47:40,480 --> 00:47:44,400
or you could do the belts and suspenders

1184
00:47:44,400 --> 00:47:45,599
approach and say

1185
00:47:45,599 --> 00:47:50,000
you know the um the source must include

1186
00:47:50,000 --> 00:47:53,839
a nonce

1187
00:48:05,520 --> 00:48:07,440
go ahead david for you to respond we

1188
00:48:07,440 --> 00:48:08,640
lose you yeah

1189
00:48:08,640 --> 00:48:10,800
yes i just wanted to add um as far as

1190
00:48:10,800 --> 00:48:13,200
the nonce goes we have patches coming

1191
00:48:13,200 --> 00:48:16,559
into mcu boot to implement the nonce

1192
00:48:16,559 --> 00:48:21,760
but within mcu boot um despite

1193
00:48:21,760 --> 00:48:24,079
the applic you know all of our uses do

1194
00:48:24,079 --> 00:48:27,359
only use this to encrypt one image ever

1195
00:48:27,359 --> 00:48:31,119
um one of the users basically decided

1196
00:48:31,119 --> 00:48:33,040
through their security analysis that the

1197
00:48:33,040 --> 00:48:33,440
uh

1198
00:48:33,440 --> 00:48:36,079
the encryption had not been studied

1199
00:48:36,079 --> 00:48:37,680
without the use of a nonce

1200
00:48:37,680 --> 00:48:39,839
and they felt more comfortable having it

1201
00:48:39,839 --> 00:48:41,200
in there so

1202
00:48:41,200 --> 00:48:44,960
um within a few weeks probably mcu boot

1203
00:48:44,960 --> 00:48:48,079
itself will support announce

1204
00:48:48,079 --> 00:48:51,040
it you know uses it still works without

1205
00:48:51,040 --> 00:48:52,720
it being present in the manifest

1206
00:48:52,720 --> 00:48:55,839
but it does allow it so i don't know if

1207
00:48:55,839 --> 00:48:56,880
we want to

1208
00:48:56,880 --> 00:49:02,960
allow that in the spec or not

1209
00:49:02,960 --> 00:49:07,040
i actually have a question about that um

1210
00:49:07,040 --> 00:49:09,040
it seems like if we do this in the

1211
00:49:09,040 --> 00:49:11,280
manifest document that this is going to

1212
00:49:11,280 --> 00:49:11,839
push

1213
00:49:11,839 --> 00:49:14,160
the time that we publish the document

1214
00:49:14,160 --> 00:49:16,559
out you know quite a quite a bit

1215
00:49:16,559 --> 00:49:19,200
and you know just an observation we we

1216
00:49:19,200 --> 00:49:20,800
tend to have a pattern of

1217
00:49:20,800 --> 00:49:23,119
you know getting the manifest document

1218
00:49:23,119 --> 00:49:24,800
fairly close to done and then adding

1219
00:49:24,800 --> 00:49:25,920
features to it

1220
00:49:25,920 --> 00:49:28,079
um and you know that has been kind of

1221
00:49:28,079 --> 00:49:29,119
extending

1222
00:49:29,119 --> 00:49:30,720
you know the time that we're working on

1223
00:49:30,720 --> 00:49:33,119
it um you know

1224
00:49:33,119 --> 00:49:34,800
i'm interested in thoughts on how we

1225
00:49:34,800 --> 00:49:36,240
might be able to

1226
00:49:36,240 --> 00:49:38,960
you know split this work um in a way

1227
00:49:38,960 --> 00:49:40,079
that would allow us to

1228
00:49:40,079 --> 00:49:42,079
move forward with the manifest but still

1229
00:49:42,079 --> 00:49:43,680
address you know this

1230
00:49:43,680 --> 00:49:48,640
this problem space any any ideas on that

1231
00:49:51,440 --> 00:49:54,160
go ahead brendan

1232
00:49:56,079 --> 00:49:58,960
is essentially the same as what i'm

1233
00:49:58,960 --> 00:49:59,839
recommending

1234
00:49:59,839 --> 00:50:02,160
with the examples at the moment not

1235
00:50:02,160 --> 00:50:03,520
necessarily that we take

1236
00:50:03,520 --> 00:50:05,119
the examples that are in there and split

1237
00:50:05,119 --> 00:50:07,359
them out but that any additional ones

1238
00:50:07,359 --> 00:50:10,559
could uh get adopted into a new uh

1239
00:50:10,559 --> 00:50:13,280
examples document i think here we might

1240
00:50:13,280 --> 00:50:14,720
want to also consider

1241
00:50:14,720 --> 00:50:17,760
the possibility of defining a set of

1242
00:50:17,760 --> 00:50:19,839
profiles

1243
00:50:19,839 --> 00:50:22,319
and having those profile definitions

1244
00:50:22,319 --> 00:50:22,880
live

1245
00:50:22,880 --> 00:50:25,520
in a separate document as well i think

1246
00:50:25,520 --> 00:50:27,520
that we could make a pretty sound

1247
00:50:27,520 --> 00:50:28,160
argument

1248
00:50:28,160 --> 00:50:30,640
for saying you know a we've you know

1249
00:50:30,640 --> 00:50:31,200
this is

1250
00:50:31,200 --> 00:50:34,319
a minimum device and these are the

1251
00:50:34,319 --> 00:50:35,280
features it has

1252
00:50:35,280 --> 00:50:36,800
and this is the minimum device with

1253
00:50:36,800 --> 00:50:38,079
encryption and these are the things you

1254
00:50:38,079 --> 00:50:39,200
have to implement

1255
00:50:39,200 --> 00:50:41,280
so i think that we could probably make

1256
00:50:41,280 --> 00:50:42,880
an argument for defining profile

1257
00:50:42,880 --> 00:50:44,480
documents

1258
00:50:44,480 --> 00:50:47,359
informational ones as separate from the

1259
00:50:47,359 --> 00:50:55,839
uh the primary draft

1260
00:50:57,680 --> 00:51:00,720
profiles are inevitable uh i think when

1261
00:51:00,720 --> 00:51:01,680
we have

1262
00:51:01,680 --> 00:51:05,359
algorithm choices so um

1263
00:51:05,359 --> 00:51:07,040
i think it'll be interesting when we get

1264
00:51:07,040 --> 00:51:11,040
to what are the mandatory to implements

1265
00:51:11,040 --> 00:51:14,079
because that's what will get us you know

1266
00:51:14,079 --> 00:51:16,160
a base spec

1267
00:51:16,160 --> 00:51:20,960
but profiles that that

1268
00:51:20,960 --> 00:51:23,599
address different communities uh are

1269
00:51:23,599 --> 00:51:24,240
gonna

1270
00:51:24,240 --> 00:51:27,280
happen so let's just be realistic and

1271
00:51:27,280 --> 00:51:30,640
and set that up but uh the

1272
00:51:30,640 --> 00:51:32,960
features that are uh being discussed

1273
00:51:32,960 --> 00:51:34,800
here are already in the spec

1274
00:51:34,800 --> 00:51:37,359
we're just talking about how to use them

1275
00:51:37,359 --> 00:51:39,599
right with the with the profile with the

1276
00:51:39,599 --> 00:51:41,440
algorithms that hana started the

1277
00:51:41,440 --> 00:51:42,880
presentation with yeah

1278
00:51:42,880 --> 00:51:44,800
yeah yeah do we do that we're down to

1279
00:51:44,800 --> 00:51:47,839
nine minutes left in this meeting

1280
00:51:47,839 --> 00:51:51,200
we we are um dave dave tyler and i were

1281
00:51:51,200 --> 00:51:52,720
talking briefly about that you know

1282
00:51:52,720 --> 00:51:54,240
given that this is one of our like

1283
00:51:54,240 --> 00:51:56,240
significant work items it's probably

1284
00:51:56,240 --> 00:51:56,800
worth

1285
00:51:56,800 --> 00:51:59,839
um you know spending the time

1286
00:51:59,839 --> 00:52:03,040
to move this forward um

1287
00:52:03,040 --> 00:52:05,119
it as far as i just had one question and

1288
00:52:05,119 --> 00:52:06,880
we can move on um

1289
00:52:06,880 --> 00:52:09,440
the as far as the mtis is that something

1290
00:52:09,440 --> 00:52:11,280
that we want to do in a separate draft

1291
00:52:11,280 --> 00:52:13,599
to you know to be able to support

1292
00:52:13,599 --> 00:52:14,319
algorithm

1293
00:52:14,319 --> 00:52:17,599
agility without um having to

1294
00:52:17,599 --> 00:52:21,119
revise the base spec

1295
00:52:26,640 --> 00:52:34,559
any thoughts go ahead harness

1296
00:52:34,559 --> 00:52:37,839
i can hear me again yeah oh

1297
00:52:37,839 --> 00:52:42,880
sorry i i lost internet connectivity um

1298
00:52:43,119 --> 00:52:46,640
okay uh did you move on in the meanwhile

1299
00:52:46,640 --> 00:52:48,880
no we were just having a discussion

1300
00:52:48,880 --> 00:52:50,400
about you know how we

1301
00:52:50,400 --> 00:52:52,720
maybe split some of this work um in a

1302
00:52:52,720 --> 00:52:54,480
way that would allow us to

1303
00:52:54,480 --> 00:52:57,119
move forward with the base spec um while

1304
00:52:57,119 --> 00:52:59,040
you were gone

1305
00:52:59,040 --> 00:53:02,160
yeah um other other security protocols

1306
00:53:02,160 --> 00:53:02,880
have put

1307
00:53:02,880 --> 00:53:05,200
algorithms in a separate doc just so

1308
00:53:05,200 --> 00:53:06,079
that if

1309
00:53:06,079 --> 00:53:09,119
the base protocol were to advance

1310
00:53:09,119 --> 00:53:11,839
to uh internet standard then the

1311
00:53:11,839 --> 00:53:13,599
algorithms could still be changed

1312
00:53:13,599 --> 00:53:14,240
without

1313
00:53:14,240 --> 00:53:17,119
pulling the bass back down the back

1314
00:53:17,119 --> 00:53:18,640
right the ladder

1315
00:53:18,640 --> 00:53:21,839
yeah right that makes sense yeah

1316
00:53:21,839 --> 00:53:25,119
um yeah and would you include algorithms

1317
00:53:25,119 --> 00:53:25,440
like

1318
00:53:25,440 --> 00:53:27,520
um the key exchange algorithms are are

1319
00:53:27,520 --> 00:53:29,359
you talking mostly about

1320
00:53:29,359 --> 00:53:33,359
sort of like let's say aes gcm versus c

1321
00:53:33,359 --> 00:53:36,400
ccm or so

1322
00:53:37,440 --> 00:53:41,599
i think that's to be worked out no

1323
00:53:41,599 --> 00:53:44,720
because i think without um detailing

1324
00:53:44,720 --> 00:53:48,079
um like these parameter configurations

1325
00:53:48,079 --> 00:53:48,720
on the left

1326
00:53:48,720 --> 00:53:50,319
hand side the or the right hand side

1327
00:53:50,319 --> 00:53:51,760
these bullet list

1328
00:53:51,760 --> 00:53:54,880
i fear that there would be like with no

1329
00:53:54,880 --> 00:53:56,000
guidance um

1330
00:53:56,000 --> 00:53:57,760
chances that two implementations are

1331
00:53:57,760 --> 00:54:01,760
interoperable are close to zero

1332
00:54:03,599 --> 00:54:05,119
right and i guess the question that i

1333
00:54:05,119 --> 00:54:06,960
raised on this was you know doing this

1334
00:54:06,960 --> 00:54:08,720
work is gonna add time

1335
00:54:08,720 --> 00:54:11,040
more time to our schedule um you know

1336
00:54:11,040 --> 00:54:12,480
for getting this published

1337
00:54:12,480 --> 00:54:16,079
um and i was looking for ways to um

1338
00:54:16,079 --> 00:54:17,599
you know to move the base back forward

1339
00:54:17,599 --> 00:54:19,839
while we work on some of these things

1340
00:54:19,839 --> 00:54:22,480
yeah maybe maybe one possibility is to

1341
00:54:22,480 --> 00:54:23,680
uh just have the

1342
00:54:23,680 --> 00:54:26,240
very basic functionality in there like

1343
00:54:26,240 --> 00:54:28,400
the aes key wrap that i presented

1344
00:54:28,400 --> 00:54:30,800
at the beginning and to have the sort of

1345
00:54:30,800 --> 00:54:32,400
more sophisticated version

1346
00:54:32,400 --> 00:54:35,599
um then covered

1347
00:54:35,599 --> 00:54:38,160
separately if you for example if you

1348
00:54:38,160 --> 00:54:39,760
advance to the next slide there was

1349
00:54:39,760 --> 00:54:44,720
uh also a question um

1350
00:54:44,720 --> 00:54:49,040
well or maybe maybe even the one further

1351
00:54:49,040 --> 00:54:52,880
um this one so i i

1352
00:54:52,880 --> 00:54:56,079
i noticed um that

1353
00:54:56,079 --> 00:54:58,640
uh like there are obviously many

1354
00:54:58,640 --> 00:54:59,440
different uh

1355
00:54:59,440 --> 00:55:01,520
public key elliptical public key

1356
00:55:01,520 --> 00:55:03,440
encryption schemes

1357
00:55:03,440 --> 00:55:06,720
and um selecting one of them is is

1358
00:55:06,720 --> 00:55:10,640
like is tricky uh but luckily there's

1359
00:55:10,640 --> 00:55:12,960
there's also work um so clearly there

1360
00:55:12,960 --> 00:55:14,640
are a number of choices given by the

1361
00:55:14,640 --> 00:55:16,160
cosy spec

1362
00:55:16,160 --> 00:55:18,240
but then there's also some more recent

1363
00:55:18,240 --> 00:55:21,040
work um done in the cfrc

1364
00:55:21,040 --> 00:55:24,319
on the uh hbka

1365
00:55:24,319 --> 00:55:26,000
which is this hybrid public key

1366
00:55:26,000 --> 00:55:27,760
encryption scheme

1367
00:55:27,760 --> 00:55:31,119
um and maybe maybe that's also uh

1368
00:55:31,119 --> 00:55:32,640
sort of right at least i thought it

1369
00:55:32,640 --> 00:55:34,720
would be useful to look into this

1370
00:55:34,720 --> 00:55:35,599
because this is

1371
00:55:35,599 --> 00:55:38,240
currently being uh sort of incorporated

1372
00:55:38,240 --> 00:55:41,200
into the dls 1.3 client hello encryption

1373
00:55:41,200 --> 00:55:42,319
and also mls

1374
00:55:42,319 --> 00:55:45,440
uh uses it so maybe maybe there's a

1375
00:55:45,440 --> 00:55:48,480
possibility here for reuse as well

1376
00:55:48,480 --> 00:55:50,640
and then also the case of uh multiple

1377
00:55:50,640 --> 00:55:52,480
recipients which um

1378
00:55:52,480 --> 00:55:55,200
the mechanisms i i explained earlier

1379
00:55:55,200 --> 00:55:55,920
support

1380
00:55:55,920 --> 00:55:58,559
are supported by those two um that's

1381
00:55:58,559 --> 00:56:00,839
also something to

1382
00:56:00,839 --> 00:56:03,839
consider

1383
00:56:04,400 --> 00:56:08,559
um yeah so just trying to uh

1384
00:56:09,520 --> 00:56:11,760
get to the end of this discussion for uh

1385
00:56:11,760 --> 00:56:13,280
today because we've only got about four

1386
00:56:13,280 --> 00:56:14,480
minutes left and so

1387
00:56:14,480 --> 00:56:18,000
um uh i guess what i'm hearing so far is

1388
00:56:18,000 --> 00:56:19,359
proposals to put

1389
00:56:19,359 --> 00:56:23,119
the uh uh encrypted

1390
00:56:23,119 --> 00:56:26,160
by the the use of suit for uh you know

1391
00:56:26,160 --> 00:56:28,000
encrypted binaries and things

1392
00:56:28,000 --> 00:56:30,319
the details all into a separate document

1393
00:56:30,319 --> 00:56:32,400
um and if we do that then i guess my

1394
00:56:32,400 --> 00:56:34,480
preference would be to put as much of

1395
00:56:34,480 --> 00:56:36,160
the discussion about that

1396
00:56:36,160 --> 00:56:39,040
as possible into a separate document and

1397
00:56:39,040 --> 00:56:40,319
just make sure that the

1398
00:56:40,319 --> 00:56:44,240
base spec includes uh is easy to extend

1399
00:56:44,240 --> 00:56:45,520
in another document

1400
00:56:45,520 --> 00:56:48,319
and um say you know such and such is

1401
00:56:48,319 --> 00:56:49,920
left for a future document and that's

1402
00:56:49,920 --> 00:56:52,000
fine as long as it does not have to

1403
00:56:52,000 --> 00:56:54,400
you know update but only extend the base

1404
00:56:54,400 --> 00:56:56,160
spec then that seems to be a good

1405
00:56:56,160 --> 00:56:56,960
decoupling

1406
00:56:56,960 --> 00:56:58,960
rather than saying putting some part of

1407
00:56:58,960 --> 00:57:00,640
it in the base spec and some part of it

1408
00:57:00,640 --> 00:57:01,920
in a separate document

1409
00:57:01,920 --> 00:57:04,240
if we split it i prefer to really put

1410
00:57:04,240 --> 00:57:06,000
everything about encrypted

1411
00:57:06,000 --> 00:57:07,440
manifest or encrypted binaries and

1412
00:57:07,440 --> 00:57:10,559
things into a separate spec

1413
00:57:10,559 --> 00:57:12,559
that includes examples you know if

1414
00:57:12,559 --> 00:57:14,319
there's any new commands i don't know if

1415
00:57:14,319 --> 00:57:15,520
there's any i've not heard any yet but

1416
00:57:15,520 --> 00:57:16,880
you know all the algorithm stuff and so

1417
00:57:16,880 --> 00:57:17,599
on

1418
00:57:17,599 --> 00:57:18,960
and if we do that because roman is

1419
00:57:18,960 --> 00:57:20,799
asking you know what is the new

1420
00:57:20,799 --> 00:57:22,160
milestones we would set

1421
00:57:22,160 --> 00:57:24,079
because i think that type of approach

1422
00:57:24,079 --> 00:57:25,680
would allow us to have a

1423
00:57:25,680 --> 00:57:28,000
earlier milestone for the earlier date

1424
00:57:28,000 --> 00:57:29,359
for the base spec

1425
00:57:29,359 --> 00:57:31,280
because it's pushing more of the stuff

1426
00:57:31,280 --> 00:57:32,640
into the other spec which would have a

1427
00:57:32,640 --> 00:57:35,280
later milestone and so that would be my

1428
00:57:35,280 --> 00:57:36,880
preference and i'm looking at the other

1429
00:57:36,880 --> 00:57:38,960
chairs to see if david or russ you have

1430
00:57:38,960 --> 00:57:39,760
a preference

1431
00:57:39,760 --> 00:57:41,200
i'm just trying to get a particular

1432
00:57:41,200 --> 00:57:43,680
recommendation so that we can decide

1433
00:57:43,680 --> 00:57:46,400
when we uh turn our milestone updates

1434
00:57:46,400 --> 00:57:49,359
and stuff how we do that so

1435
00:57:49,359 --> 00:57:51,680
yeah i think that works for me but i

1436
00:57:51,680 --> 00:57:52,880
think we'll have to have an

1437
00:57:52,880 --> 00:57:56,799
interim meeting to make that happen

1438
00:57:56,799 --> 00:57:58,160
yeah i agree i was gonna suggest

1439
00:57:58,160 --> 00:58:00,319
something similar um yeah and we'll have

1440
00:58:00,319 --> 00:58:04,079
to factor this into our charter update

1441
00:58:06,839 --> 00:58:08,640
definitely

1442
00:58:08,640 --> 00:58:11,040
so with uh only two minutes left i

1443
00:58:11,040 --> 00:58:12,640
wonder if uh

1444
00:58:12,640 --> 00:58:15,760
if brenda you want to even start one of

1445
00:58:15,760 --> 00:58:17,119
these other presentations

1446
00:58:17,119 --> 00:58:19,200
or we should just push that to the

1447
00:58:19,200 --> 00:58:20,319
internal

1448
00:58:20,319 --> 00:58:22,000
oh i can talk fast but i don't think i

1449
00:58:22,000 --> 00:58:23,440
can talk that fast

1450
00:58:23,440 --> 00:58:25,839
and i guess even if i could i'm not sure

1451
00:58:25,839 --> 00:58:27,760
anyone would get anything out of it

1452
00:58:27,760 --> 00:58:28,960
is there anything you want to point

1453
00:58:28,960 --> 00:58:32,480
people to in the time remaining

1454
00:58:32,480 --> 00:58:36,240
um i i i'm not sure i think the the the

1455
00:58:36,240 --> 00:58:37,359
big question for me

1456
00:58:37,359 --> 00:58:40,480
is uh following on from uh the previous

1457
00:58:40,480 --> 00:58:43,920
discussion here um do you think that it

1458
00:58:43,920 --> 00:58:45,920
makes sense to factor out

1459
00:58:45,920 --> 00:58:48,559
all of the examples that currently live

1460
00:58:48,559 --> 00:58:48,960
in

1461
00:58:48,960 --> 00:58:51,520
the manifest document or simply say that

1462
00:58:51,520 --> 00:58:53,359
additional examples may show up

1463
00:58:53,359 --> 00:58:56,000
uh as time permits um the the

1464
00:58:56,000 --> 00:58:58,000
essentially what i'm saying here is

1465
00:58:58,000 --> 00:59:00,319
does it make sense to provide some

1466
00:59:00,319 --> 00:59:02,160
examples so that implementers know

1467
00:59:02,160 --> 00:59:03,599
how this fits together without

1468
00:59:03,599 --> 00:59:05,280
necessarily having every

1469
00:59:05,280 --> 00:59:08,559
possible example or uh should

1470
00:59:08,559 --> 00:59:12,319
we move all examples out to a new

1471
00:59:12,319 --> 00:59:19,040
um a new document so i think that's it

1472
00:59:19,280 --> 00:59:20,799
yeah i think we're gonna have to discuss

1473
00:59:20,799 --> 00:59:23,680
that on the list but um

1474
00:59:23,680 --> 00:59:26,480
there there's clearly advantages to

1475
00:59:26,480 --> 00:59:27,680
implementers to have

1476
00:59:27,680 --> 00:59:33,200
them so yep you know

1477
00:59:33,200 --> 00:59:35,680
okay but early adopters you can

1478
00:59:35,680 --> 00:59:37,440
implement from internet drafts we know

1479
00:59:37,440 --> 00:59:39,119
that

1480
00:59:39,119 --> 00:59:41,119
so i i don't think we've got enough time

1481
00:59:41,119 --> 00:59:42,720
to cover anything else

1482
00:59:42,720 --> 00:59:45,200
so i think we should probably uh leave

1483
00:59:45,200 --> 00:59:47,839
it there

1484
00:59:48,240 --> 00:59:50,720
so should we should we shoot for maybe

1485
00:59:50,720 --> 00:59:51,760
the end of

1486
00:59:51,760 --> 00:59:55,599
april for an interim are there any major

1487
00:59:55,599 --> 00:59:57,440
dates that we should avoid

1488
00:59:57,440 --> 01:00:01,839
we'll have to do a doodle right

1489
01:00:07,040 --> 01:00:10,400
all right we'll do that then um

1490
01:00:10,400 --> 01:00:12,240
so i guess with that we're out of time

1491
01:00:12,240 --> 01:00:13,520
um

1492
01:00:13,520 --> 01:00:15,599
so uh sorry brandon we weren't able to

1493
01:00:15,599 --> 01:00:16,960
get to the other

1494
01:00:16,960 --> 01:00:20,160
uh topics but uh we wanted to make sure

1495
01:00:20,160 --> 01:00:20,559
we

1496
01:00:20,559 --> 01:00:22,880
were making progress on you know the the

1497
01:00:22,880 --> 01:00:24,000
base spec here

1498
01:00:24,000 --> 01:00:27,520
um um thanks for presenting um

1499
01:00:27,520 --> 01:00:29,760
and with that i think we're gonna wrap

1500
01:00:29,760 --> 01:00:30,720
things up

1501
01:00:30,720 --> 01:00:34,559
um uh we have a few discussions that

1502
01:00:34,559 --> 01:00:36,319
we're gonna take to the list

1503
01:00:36,319 --> 01:00:38,079
uh there's some rechartering work that

1504
01:00:38,079 --> 01:00:39,440
needs to be done which

1505
01:00:39,440 --> 01:00:43,359
we'll also take to the list um

1506
01:00:43,359 --> 01:00:45,839
i guess with that thank you and uh we'll

1507
01:00:45,839 --> 01:00:47,599
we'll talk to you soon at the

1508
01:00:47,599 --> 01:00:49,599
hopefully at the virtual interim thanks

1509
01:00:49,599 --> 01:00:51,040
again

1510
01:00:51,040 --> 01:00:54,960
and thank you the other notetakers

1511
01:00:55,359 --> 01:00:57,839
indeed

