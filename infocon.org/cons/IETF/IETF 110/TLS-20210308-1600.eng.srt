1
00:00:05,120 --> 00:00:05,920
it's the

2
00:00:05,920 --> 00:00:08,720
top of the hour and time to start uh tls

3
00:00:08,720 --> 00:00:10,639
at ietf 110.

4
00:00:10,639 --> 00:00:13,440
uh first i want to thank everybody who's

5
00:00:13,440 --> 00:00:14,639
joined for

6
00:00:14,639 --> 00:00:17,440
joining this edition of our online tls

7
00:00:17,440 --> 00:00:18,580
meeting

8
00:00:18,580 --> 00:00:21,520
[Music]

9
00:00:21,520 --> 00:00:26,240
sean and chris and i are the chairs

10
00:00:26,960 --> 00:00:28,640
you're probably all familiar with the

11
00:00:28,640 --> 00:00:30,000
notewell but we'll leave it up

12
00:00:30,000 --> 00:00:33,120
here for just a minute so folks can

13
00:00:33,120 --> 00:00:34,559
review the

14
00:00:34,559 --> 00:00:44,559
ipr policies of the ieps

15
00:00:44,559 --> 00:00:48,000
okay so we have a minute takers

16
00:00:48,000 --> 00:00:50,239
um i think folks would be helpful if

17
00:00:50,239 --> 00:00:52,239
people were on uh

18
00:00:52,239 --> 00:00:55,680
jabber to see uh

19
00:00:56,559 --> 00:00:59,839
what's uh

20
00:01:00,879 --> 00:01:02,399
going on there to make sure we don't

21
00:01:02,399 --> 00:01:04,559
miss anything blue sheets are now

22
00:01:04,559 --> 00:01:06,240
automatic we don't have to pass anything

23
00:01:06,240 --> 00:01:07,119
around

24
00:01:07,119 --> 00:01:09,920
as usual uh state your name uh and your

25
00:01:09,920 --> 00:01:10,880
affiliation

26
00:01:10,880 --> 00:01:13,600
uh when talking at the mic and as always

27
00:01:13,600 --> 00:01:16,559
keep it professional

28
00:01:18,880 --> 00:01:21,839
for the agenda

29
00:01:22,000 --> 00:01:24,799
we have a short presentation on tls

30
00:01:24,799 --> 00:01:27,200
interop runner

31
00:01:27,200 --> 00:01:28,640
then we'll talk about encrypted client

32
00:01:28,640 --> 00:01:30,320
hello

33
00:01:30,320 --> 00:01:34,240
uh rfc 8446 bits deprecating uh

34
00:01:34,240 --> 00:01:37,360
ffdhe tls proof of knowledge and opaque

35
00:01:37,360 --> 00:01:38,400
tls

36
00:01:38,400 --> 00:01:41,040
are there any other additions i think

37
00:01:41,040 --> 00:01:42,320
that we'll also

38
00:01:42,320 --> 00:01:44,320
give a brief document update as well as

39
00:01:44,320 --> 00:01:45,600
part of the agenda

40
00:01:45,600 --> 00:01:47,600
um are there any other additions to the

41
00:01:47,600 --> 00:01:50,079
agenda

42
00:01:50,079 --> 00:01:54,640
or comments on the agenda

43
00:01:54,640 --> 00:01:58,320
all right great um

44
00:01:58,320 --> 00:02:01,200
so other chairs feel free to uh step in

45
00:02:01,200 --> 00:02:01,920
if i

46
00:02:01,920 --> 00:02:05,119
misspeak on this slide um

47
00:02:05,119 --> 00:02:08,878
sean did you wanna no i was gonna say go

48
00:02:08,878 --> 00:02:10,560
ahead and i'll jump in

49
00:02:10,560 --> 00:02:13,760
okay yeah so we have a couple of uh

50
00:02:13,760 --> 00:02:16,560
drafts that are in the rfc editor one rc

51
00:02:16,560 --> 00:02:18,400
editor queue which is deprecate

52
00:02:18,400 --> 00:02:21,520
old versus tls and ticket requests we

53
00:02:21,520 --> 00:02:24,000
have requested publication

54
00:02:24,000 --> 00:02:26,239
on a number of these there's a dtls one

55
00:02:26,239 --> 00:02:27,440
three

56
00:02:27,440 --> 00:02:29,360
i think that's still in the publication

57
00:02:29,360 --> 00:02:30,480
requested state um

58
00:02:30,480 --> 00:02:32,319
exporter authenticators and deprecate

59
00:02:32,319 --> 00:02:33,840
md5 and sha-1

60
00:02:33,840 --> 00:02:35,200
do you have any additional updates on

61
00:02:35,200 --> 00:02:37,440
these strong

62
00:02:37,440 --> 00:02:39,360
there are a couple of issues outstanding

63
00:02:39,360 --> 00:02:41,519
on the deprecate md5 and shot one that

64
00:02:41,519 --> 00:02:43,920
i'm working with nick to go through

65
00:02:43,920 --> 00:02:46,160
um

66
00:02:47,920 --> 00:02:50,239
okay yeah 1.3 i think literally just

67
00:02:50,239 --> 00:02:51,200
went into

68
00:02:51,200 --> 00:02:55,200
itf last call like last night right

69
00:02:55,200 --> 00:02:58,159
no i think details one three is in isg

70
00:02:58,159 --> 00:02:59,680
evaluation

71
00:02:59,680 --> 00:03:02,879
it was the dtls one two c id that went

72
00:03:02,879 --> 00:03:05,840
to last call

73
00:03:08,400 --> 00:03:10,319
yeah so i had that noted in heading to

74
00:03:10,319 --> 00:03:12,000
ietf last call or

75
00:03:12,000 --> 00:03:13,840
was heading until last night where it's

76
00:03:13,840 --> 00:03:15,879
actually in last call now which is uh

77
00:03:15,879 --> 00:03:17,440
dtlscid

78
00:03:17,440 --> 00:03:20,400
um did you have another comment then uh

79
00:03:20,400 --> 00:03:22,159
yeah you have the details one three

80
00:03:22,159 --> 00:03:24,319
listed as publication requested but i

81
00:03:24,319 --> 00:03:25,760
think that is

82
00:03:25,760 --> 00:03:28,640
past publication requested and it's the

83
00:03:28,640 --> 00:03:31,440
whole isg is looking at it now

84
00:03:31,440 --> 00:03:34,640
okay awesome uh

85
00:03:34,640 --> 00:03:37,200
waiting for write up we have external

86
00:03:37,200 --> 00:03:39,920
psk guidance and delegated credentials

87
00:03:39,920 --> 00:03:42,720
there's still a couple uh open issues i

88
00:03:42,720 --> 00:03:44,319
think with delegated credentials that we

89
00:03:44,319 --> 00:03:45,360
need to just

90
00:03:45,360 --> 00:03:47,920
tie off and i think pfk guidance may be

91
00:03:47,920 --> 00:03:49,200
the same although i think there may have

92
00:03:49,200 --> 00:03:52,879
been a new draft published recently

93
00:03:54,879 --> 00:03:56,480
delegated credentials there is one open

94
00:03:56,480 --> 00:03:59,200
issue that we need to address

95
00:03:59,200 --> 00:04:01,599
so i can i can bring that back to the

96
00:04:01,599 --> 00:04:04,480
top of people's lists

97
00:04:05,840 --> 00:04:07,840
yeah we'd like to get those uh drafts

98
00:04:07,840 --> 00:04:09,200
moving forward

99
00:04:09,200 --> 00:04:11,040
um we're looking to do a working group

100
00:04:11,040 --> 00:04:12,840
last call on flags extension

101
00:04:12,840 --> 00:04:18,000
soon and uh

102
00:04:18,079 --> 00:04:20,798
we have a number of drafts in progress

103
00:04:20,798 --> 00:04:22,240
some of which we'll be talking about

104
00:04:22,240 --> 00:04:24,080
today mainly encrypted client hello and

105
00:04:24,080 --> 00:04:28,560
rfc 8446-bits

106
00:04:28,560 --> 00:04:30,560
all right unless there are other

107
00:04:30,560 --> 00:04:35,280
comments on the document status

108
00:04:35,360 --> 00:04:39,360
we should jump into the first

109
00:04:39,360 --> 00:04:42,720
presentation which will be

110
00:04:42,720 --> 00:04:46,160
on the tls

111
00:04:46,160 --> 00:04:50,030
interop runner get there

112
00:04:50,030 --> 00:04:53,219
[Music]

113
00:04:55,040 --> 00:04:58,479
can i share my screen um i'll run the

114
00:04:58,479 --> 00:05:00,800
i'll run the slides unless you have

115
00:05:00,800 --> 00:05:02,479
updates

116
00:05:02,479 --> 00:05:06,800
if that's okay sure

117
00:05:08,320 --> 00:05:11,680
everybody can hear me right

118
00:05:11,680 --> 00:05:15,280
all right so my name is gotham tamara

119
00:05:15,280 --> 00:05:16,880
and i work for the university of

120
00:05:16,880 --> 00:05:19,520
waterloo and i'm going to talk about the

121
00:05:19,520 --> 00:05:22,800
tls in europe owner today very briefly

122
00:05:22,800 --> 00:05:25,840
um next slide

123
00:05:27,840 --> 00:05:30,800
so to begin with implementing tls is not

124
00:05:30,800 --> 00:05:31,199
easy

125
00:05:31,199 --> 00:05:32,800
and it does not get easier as new

126
00:05:32,800 --> 00:05:35,600
features and new extensions are proposed

127
00:05:35,600 --> 00:05:37,919
and in addition to the usual testing

128
00:05:37,919 --> 00:05:38,800
mechanisms

129
00:05:38,800 --> 00:05:40,960
it'd be nice to know that the different

130
00:05:40,960 --> 00:05:42,800
implementations of tls agree with each

131
00:05:42,800 --> 00:05:43,120
other

132
00:05:43,120 --> 00:05:46,000
on how the uh the protocol and how its

133
00:05:46,000 --> 00:05:48,080
extensions are supposed to work

134
00:05:48,080 --> 00:05:51,360
and the spreadsheet on the right is a

135
00:05:51,360 --> 00:05:54,080
uh basically uh concerns a future call

136
00:05:54,080 --> 00:05:56,720
known as ech or encrypted client flow

137
00:05:56,720 --> 00:05:58,880
and it maintains interoperability data

138
00:05:58,880 --> 00:06:00,080
uh for this uh

139
00:06:00,080 --> 00:06:03,280
for this feature and as you might be

140
00:06:03,280 --> 00:06:04,319
able to guess

141
00:06:04,319 --> 00:06:06,960
it is an easy uh as there are more like

142
00:06:06,960 --> 00:06:07,759
implementations

143
00:06:07,759 --> 00:06:09,680
and more tls features such as delegated

144
00:06:09,680 --> 00:06:11,199
credentials for example

145
00:06:11,199 --> 00:06:12,800
uh this becomes more error-prone and

146
00:06:12,800 --> 00:06:14,960
it's uh it's difficult to scale

147
00:06:14,960 --> 00:06:16,960
and it would be nice to automate uh

148
00:06:16,960 --> 00:06:18,560
everything about this from the actual

149
00:06:18,560 --> 00:06:19,440
testing

150
00:06:19,440 --> 00:06:21,600
to the uh to the presentation of the

151
00:06:21,600 --> 00:06:23,280
results

152
00:06:23,280 --> 00:06:25,758
next slide

153
00:06:27,199 --> 00:06:28,880
and that's basically where the tls

154
00:06:28,880 --> 00:06:31,919
interop runner comes in

155
00:06:32,000 --> 00:06:34,319
so for example at a very high level the

156
00:06:34,319 --> 00:06:35,680
way it works is uh

157
00:06:35,680 --> 00:06:39,199
if if we have like let's say a test case

158
00:06:39,199 --> 00:06:40,479
uh we want to test several

159
00:06:40,479 --> 00:06:41,680
authentication using delegated

160
00:06:41,680 --> 00:06:43,120
credentials for example

161
00:06:43,120 --> 00:06:45,120
the runner starts off by generating some

162
00:06:45,120 --> 00:06:47,039
keys and some certificates

163
00:06:47,039 --> 00:06:49,360
and it then passes them to a client and

164
00:06:49,360 --> 00:06:52,400
server which are basically docker images

165
00:06:52,400 --> 00:06:55,280
the the runner then places a simulated

166
00:06:55,280 --> 00:06:57,599
an ns3 simulated network between

167
00:06:57,599 --> 00:07:00,880
the client and the server and

168
00:07:00,880 --> 00:07:04,080
the the test is run the ns3 network uh

169
00:07:04,080 --> 00:07:05,680
captures all the packets and generates a

170
00:07:05,680 --> 00:07:07,199
packet trace and the clients and

171
00:07:07,199 --> 00:07:08,960
and the client server output their logs

172
00:07:08,960 --> 00:07:10,240
and their key log files

173
00:07:10,240 --> 00:07:11,840
and then the runner uses it decrypts a

174
00:07:11,840 --> 00:07:14,840
packet trace and then checks it to see

175
00:07:14,840 --> 00:07:17,759
if if the transcript was

176
00:07:17,759 --> 00:07:20,880
as what we'd expect of the uh for that

177
00:07:20,880 --> 00:07:22,240
particular test case

178
00:07:22,240 --> 00:07:23,759
and if we're considering the example of

179
00:07:23,759 --> 00:07:25,120
server authentication using delegated

180
00:07:25,120 --> 00:07:26,240
credentials again

181
00:07:26,240 --> 00:07:27,360
then one of the things we'd want to

182
00:07:27,360 --> 00:07:29,120
check for is that the client actually

183
00:07:29,120 --> 00:07:29,599
did

184
00:07:29,599 --> 00:07:30,880
indicate support for delegated

185
00:07:30,880 --> 00:07:33,120
credentials in its client flow

186
00:07:33,120 --> 00:07:35,039
and this sort of structure means that

187
00:07:35,039 --> 00:07:36,800
adding new endpoints in test cases

188
00:07:36,800 --> 00:07:40,479
is simple and i would be remiss if i did

189
00:07:40,479 --> 00:07:40,880
not

190
00:07:40,880 --> 00:07:42,400
if i didn't mention the fact that this

191
00:07:42,400 --> 00:07:44,479
is heavily inspired very much inspired

192
00:07:44,479 --> 00:07:47,520
by the quick intro of hunter

193
00:07:47,520 --> 00:07:50,318
um next slide

194
00:07:51,599 --> 00:07:53,680
so here's a small demo of what we have

195
00:07:53,680 --> 00:07:56,319
so far this is a work in progress

196
00:07:56,319 --> 00:07:58,879
but as you can see on the uh on the left

197
00:07:58,879 --> 00:07:59,919
hand side we have

198
00:07:59,919 --> 00:08:02,639
in like an automated ci system that

199
00:08:02,639 --> 00:08:04,240
basically builds all the endpoints and

200
00:08:04,240 --> 00:08:05,759
then pairs them

201
00:08:05,759 --> 00:08:07,280
it pairs them into client and server

202
00:08:07,280 --> 00:08:09,599
pairs and then runs all of the tests for

203
00:08:09,599 --> 00:08:11,680
each of those pairs

204
00:08:11,680 --> 00:08:14,479
um next slide

205
00:08:15,919 --> 00:08:19,120
so to basically to summarize the tlc

206
00:08:19,120 --> 00:08:20,800
route runner is an automated tls

207
00:08:20,800 --> 00:08:22,400
interoperability testing framework

208
00:08:22,400 --> 00:08:25,280
inspired by the quake interop owner we

209
00:08:25,280 --> 00:08:26,080
also plan to

210
00:08:26,080 --> 00:08:27,599
we're also working on including fuzz

211
00:08:27,599 --> 00:08:29,360
performance and regression testing using

212
00:08:29,360 --> 00:08:32,159
tools such as tls attacker

213
00:08:32,159 --> 00:08:34,559
and since we have ns3 we can also use

214
00:08:34,559 --> 00:08:35,519
that to

215
00:08:35,519 --> 00:08:37,760
uh in performance testing to like drop

216
00:08:37,760 --> 00:08:38,799
packets or to

217
00:08:38,799 --> 00:08:42,640
add additional traffic or and whatnot

218
00:08:42,640 --> 00:08:45,440
and it is it's it's a github repository

219
00:08:45,440 --> 00:08:45,760
it's

220
00:08:45,760 --> 00:08:47,440
easily available it can be cloned and

221
00:08:47,440 --> 00:08:49,120
run locally and we're working on a

222
00:08:49,120 --> 00:08:50,560
website to present the results

223
00:08:50,560 --> 00:08:53,360
and of course i should mention that yeah

224
00:08:53,360 --> 00:08:54,800
except for third party code

225
00:08:54,800 --> 00:08:56,959
it is licensed under mit and we welcome

226
00:08:56,959 --> 00:08:58,640
all sorts of pull requests comments

227
00:08:58,640 --> 00:08:59,440
issues

228
00:08:59,440 --> 00:09:02,640
feedback uh they're certainly welcome

229
00:09:02,640 --> 00:09:04,880
and that's that's it essentially thank

230
00:09:04,880 --> 00:09:07,040
you for listening

231
00:09:07,040 --> 00:09:08,800
is there any questions uh happy to take

232
00:09:08,800 --> 00:09:11,120
them now

233
00:09:17,040 --> 00:09:23,839
are there any questions

234
00:09:25,920 --> 00:09:29,200
yes i'm trying to trying to speak um

235
00:09:29,200 --> 00:09:32,480
did you document that this uh somewhere

236
00:09:32,480 --> 00:09:32,800
or

237
00:09:32,800 --> 00:09:34,839
artists hidden somewhere in some script

238
00:09:34,839 --> 00:09:37,360
also

239
00:09:37,360 --> 00:09:39,519
oh uh so right now the test there's a

240
00:09:39,519 --> 00:09:41,519
wiki on the in the github repository

241
00:09:41,519 --> 00:09:43,279
that like documents what tests we have

242
00:09:43,279 --> 00:09:44,240
so far

243
00:09:44,240 --> 00:09:45,920
right now we only have delegated

244
00:09:45,920 --> 00:09:47,440
credentials and like two

245
00:09:47,440 --> 00:09:49,040
basic tests related to encrypted client

246
00:09:49,040 --> 00:09:50,720
hello but um

247
00:09:50,720 --> 00:09:52,560
yes once we get the website up and

248
00:09:52,560 --> 00:09:54,880
running we plan to like present that all

249
00:09:54,880 --> 00:09:55,600
in a nice

250
00:09:55,600 --> 00:09:59,040
aesthetic way okay

251
00:09:59,040 --> 00:10:01,279
cool

252
00:10:03,680 --> 00:10:06,800
dkg has a question um i don't know if

253
00:10:06,800 --> 00:10:07,760
you can see the chat

254
00:10:07,760 --> 00:10:11,360
go to is it

255
00:10:11,360 --> 00:10:13,440
oh uh the process for getting an

256
00:10:13,440 --> 00:10:14,720
employee what is the process for getting

257
00:10:14,720 --> 00:10:15,279
an implement

258
00:10:15,279 --> 00:10:18,320
implementation added to this it's uh

259
00:10:18,320 --> 00:10:20,800
essentially it's adding a docker file so

260
00:10:20,800 --> 00:10:22,320
we already have like a couple

261
00:10:22,320 --> 00:10:25,040
of client server implementations that uh

262
00:10:25,040 --> 00:10:26,000
and

263
00:10:26,000 --> 00:10:28,000
it's a matter of just uh copying some of

264
00:10:28,000 --> 00:10:29,279
the conventions that they follow and

265
00:10:29,279 --> 00:10:31,200
then um

266
00:10:31,200 --> 00:10:32,880
yeah just adding a docker file to the

267
00:10:32,880 --> 00:10:35,519
repository

268
00:10:41,839 --> 00:10:44,959
cool um thanks for

269
00:10:44,959 --> 00:10:47,119
coming

270
00:10:49,120 --> 00:10:50,640
yeah sorry i just realized i didn't have

271
00:10:50,640 --> 00:10:53,120
a question uh for ech how do you

272
00:10:53,120 --> 00:10:56,160
interact with the dns

273
00:10:57,440 --> 00:11:00,720
um we have like a i'm not completely

274
00:11:00,720 --> 00:11:01,920
sure

275
00:11:01,920 --> 00:11:05,040
the like it was

276
00:11:05,040 --> 00:11:06,959
chris patton out of that uh test case

277
00:11:06,959 --> 00:11:08,880
but

278
00:11:08,880 --> 00:11:12,320
the i think so uh so if you're talking

279
00:11:12,320 --> 00:11:13,600
about like resolution

280
00:11:13,600 --> 00:11:16,480
like client server resolution uh we just

281
00:11:16,480 --> 00:11:18,079
like those are like sort of hard hard

282
00:11:18,079 --> 00:11:19,360
coded into the endpoints

283
00:11:19,360 --> 00:11:21,519
and we sort of like the endpoints there

284
00:11:21,519 --> 00:11:22,800
the client is supposed to connect to

285
00:11:22,800 --> 00:11:24,880
like example.com

286
00:11:24,880 --> 00:11:26,480
and that's that resolution is like taken

287
00:11:26,480 --> 00:11:29,839
care of by the interrupt runner

288
00:11:30,480 --> 00:11:32,720
okay i mean i'll try it out it sounds

289
00:11:32,720 --> 00:11:35,680
like a great thing thanks

290
00:11:38,560 --> 00:11:40,640
great i mean i think this will be uh

291
00:11:40,640 --> 00:11:42,320
pretty useful especially as we build out

292
00:11:42,320 --> 00:11:45,120
more test cases

293
00:11:46,000 --> 00:11:48,240
yep

294
00:11:49,920 --> 00:11:52,000
all right then i think we should move on

295
00:11:52,000 --> 00:11:54,560
to the

296
00:11:54,839 --> 00:12:11,839
next topic which i think is ech

297
00:12:13,279 --> 00:12:15,680
all right um you go to that next slide

298
00:12:15,680 --> 00:12:17,350
please

299
00:12:17,350 --> 00:12:20,240
[Music]

300
00:12:20,240 --> 00:12:21,839
right uh so there was a message that

301
00:12:21,839 --> 00:12:23,839
went out to a list a while back uh

302
00:12:23,839 --> 00:12:25,920
throws moving the interrupt target from

303
00:12:25,920 --> 00:12:27,519
draft nine to draft ten

304
00:12:27,519 --> 00:12:29,360
uh there's a pr up right now that

305
00:12:29,360 --> 00:12:30,639
includes the change log between these

306
00:12:30,639 --> 00:12:31,920
two versions and thanks to martin

307
00:12:31,920 --> 00:12:33,279
thompson for pointing out that we should

308
00:12:33,279 --> 00:12:34,880
probably be including change logs going

309
00:12:34,880 --> 00:12:35,600
forward

310
00:12:35,600 --> 00:12:37,440
especially as we now have a primary

311
00:12:37,440 --> 00:12:39,040
official interrupt target

312
00:12:39,040 --> 00:12:42,240
um given that uh draft 10

313
00:12:42,240 --> 00:12:44,399
uh or what is now the editor's copy of

314
00:12:44,399 --> 00:12:45,600
the draft uh

315
00:12:45,600 --> 00:12:49,440
uses the um the final version of hpe

316
00:12:49,440 --> 00:12:51,680
that is the version that won't change uh

317
00:12:51,680 --> 00:12:52,639
test factors again

318
00:12:52,639 --> 00:12:55,839
it won't um it won't likely unless like

319
00:12:55,839 --> 00:12:57,440
something major happens

320
00:12:57,440 --> 00:13:00,240
uh with the protocol past isrg or isrg

321
00:13:00,240 --> 00:13:01,120
review

322
00:13:01,120 --> 00:13:04,399
and uh and you know perhaps additional

323
00:13:04,399 --> 00:13:06,399
community analysis

324
00:13:06,399 --> 00:13:09,040
uh we'd like to uh i'd like to propose

325
00:13:09,040 --> 00:13:11,040
you know just getting the hpp dependency

326
00:13:11,040 --> 00:13:12,639
out of the way

327
00:13:12,639 --> 00:13:15,040
bumping uh the draft version to 10

328
00:13:15,040 --> 00:13:17,680
ideally today if it's not controversial

329
00:13:17,680 --> 00:13:19,279
um and then just moving our interrupt

330
00:13:19,279 --> 00:13:20,959
target from nine to ten

331
00:13:20,959 --> 00:13:23,920
um and there is there was some support

332
00:13:23,920 --> 00:13:24,480
for this

333
00:13:24,480 --> 00:13:27,760
uh on the mailing list but um i just i

334
00:13:27,760 --> 00:13:29,120
wanted to pose it to the group now to

335
00:13:29,120 --> 00:13:31,040
see if there's any violent objections

336
00:13:31,040 --> 00:13:33,600
um as far as i know uh most people who

337
00:13:33,600 --> 00:13:34,959
are implementing it

338
00:13:34,959 --> 00:13:38,720
are supportive of moving forward

339
00:13:38,720 --> 00:13:41,440
but just like confirmation so i'll pause

340
00:13:41,440 --> 00:13:42,480
briefly

341
00:13:42,480 --> 00:13:44,160
if there's any you know burning desire

342
00:13:44,160 --> 00:13:48,959
to not do so please let me know

343
00:13:48,959 --> 00:13:51,600
ben asks if the publish vacation process

344
00:13:51,600 --> 00:13:52,160
closed

345
00:13:52,160 --> 00:13:55,680
um do you mean the data tracker

346
00:13:56,079 --> 00:13:58,079
yeah the as i points out that the

347
00:13:58,079 --> 00:14:00,399
tracker is back open for submission so

348
00:14:00,399 --> 00:14:03,839
we can wrap the document today

349
00:14:04,399 --> 00:14:06,720
eric

350
00:14:14,320 --> 00:14:17,839
ecker do you have a question

351
00:14:17,920 --> 00:14:20,320
oh it's plus one i'm sorry plus q can't

352
00:14:20,320 --> 00:14:21,199
read okay

353
00:14:21,199 --> 00:14:23,519
uh great so um hearing no objections

354
00:14:23,519 --> 00:14:24,399
i'll do so

355
00:14:24,399 --> 00:14:27,440
um and then uh i'll follow up on the

356
00:14:27,440 --> 00:14:28,800
thread saying that the

357
00:14:28,800 --> 00:14:30,320
um are up with the pointer to the latest

358
00:14:30,320 --> 00:14:31,920
version then we can go from there

359
00:14:31,920 --> 00:14:34,880
um as a reminder there isn't uh inspired

360
00:14:34,880 --> 00:14:35,600
by quick

361
00:14:35,600 --> 00:14:38,720
there is a matrix which has um the

362
00:14:38,720 --> 00:14:40,079
various clients and servers that we'd

363
00:14:40,079 --> 00:14:42,480
like to use for tracking interop results

364
00:14:42,480 --> 00:14:44,959
um we're also trying to pull them into

365
00:14:44,959 --> 00:14:46,240
the interop runner as well so we can

366
00:14:46,240 --> 00:14:48,000
automate this thing going forward

367
00:14:48,000 --> 00:14:50,320
um but as as you start bringing up your

368
00:14:50,320 --> 00:14:51,680
implementations please feel free to

369
00:14:51,680 --> 00:14:52,240
either

370
00:14:52,240 --> 00:14:54,079
add them to the matrix uh if you don't

371
00:14:54,079 --> 00:14:55,440
have access request it or leave a

372
00:14:55,440 --> 00:14:56,839
comment or so on

373
00:14:56,839 --> 00:14:59,760
um and hopefully we can get some good

374
00:14:59,760 --> 00:15:01,040
interrupt results between now and the

375
00:15:01,040 --> 00:15:04,079
next ietf version

376
00:15:05,360 --> 00:15:08,079
next slide please

377
00:15:08,639 --> 00:15:11,920
all right um so there's there's a couple

378
00:15:11,920 --> 00:15:13,120
of small issues

379
00:15:13,120 --> 00:15:14,800
up right now um some of them have pull

380
00:15:14,800 --> 00:15:16,240
requests and up some of them don't

381
00:15:16,240 --> 00:15:19,040
and then there's one whopping issue um

382
00:15:19,040 --> 00:15:19,600
that

383
00:15:19,600 --> 00:15:22,240
doesn't yet have a pull request up uh

384
00:15:22,240 --> 00:15:23,079
that

385
00:15:23,079 --> 00:15:25,199
unfortunately it looks like we're not

386
00:15:25,199 --> 00:15:26,480
ready to talk about

387
00:15:26,480 --> 00:15:29,360
yet um so what i'd like to do now uh in

388
00:15:29,360 --> 00:15:30,800
the time that we have is try to go

389
00:15:30,800 --> 00:15:31,279
through

390
00:15:31,279 --> 00:15:33,680
uh each of these smaller issues uh just

391
00:15:33,680 --> 00:15:35,199
discuss them see what people think see

392
00:15:35,199 --> 00:15:35,920
if we can

393
00:15:35,920 --> 00:15:39,040
get towards some sort of uh you know

394
00:15:39,040 --> 00:15:40,240
shared vision of

395
00:15:40,240 --> 00:15:43,199
uh uh what we should do with them

396
00:15:43,199 --> 00:15:44,560
potentially throw up prs

397
00:15:44,560 --> 00:15:47,680
uh to accommodate them and then uh move

398
00:15:47,680 --> 00:15:48,240
forward

399
00:15:48,240 --> 00:15:50,160
uh so joe if we could just start

400
00:15:50,160 --> 00:15:51,519
marching through these issues that would

401
00:15:51,519 --> 00:15:52,839
be

402
00:15:52,839 --> 00:15:55,839
great

403
00:16:04,000 --> 00:16:08,160
right so

404
00:16:10,000 --> 00:16:12,079
i would like if it's okay to ask a

405
00:16:12,079 --> 00:16:13,519
question before we dive into those

406
00:16:13,519 --> 00:16:14,160
issues

407
00:16:14,160 --> 00:16:16,800
right yeah go ahead go for it so i said

408
00:16:16,800 --> 00:16:18,720
mail to the list i didn't create issues

409
00:16:18,720 --> 00:16:19,920
in github but i

410
00:16:19,920 --> 00:16:21,600
i i have what i think are a couple of

411
00:16:21,600 --> 00:16:22,800
additional issues that are not on that

412
00:16:22,800 --> 00:16:25,040
list

413
00:16:26,079 --> 00:16:27,279
um yeah i mean yeah if we have time to

414
00:16:27,279 --> 00:16:29,600
talk about them but then we can um

415
00:16:29,600 --> 00:16:30,959
ideally all these issues are tracked in

416
00:16:30,959 --> 00:16:32,480
github so we can have the conversation

417
00:16:32,480 --> 00:16:32,880
there

418
00:16:32,880 --> 00:16:34,560
um but yeah once once we get through

419
00:16:34,560 --> 00:16:36,480
these uh i'll turn it over to you if you

420
00:16:36,480 --> 00:16:38,480
want to just start merging through yours

421
00:16:38,480 --> 00:16:42,160
um i think we have what like uh 45

422
00:16:42,160 --> 00:16:44,880
minutes i forget how much time for this

423
00:16:44,880 --> 00:16:47,279
so so again i mean i think again if

424
00:16:47,279 --> 00:16:48,959
possible i think

425
00:16:48,959 --> 00:16:50,240
there's one of the i think that'll be

426
00:16:50,240 --> 00:16:51,920
fine for all except one of the issues i

427
00:16:51,920 --> 00:16:52,560
raised

428
00:16:52,560 --> 00:16:54,000
and one of the issues i raised is that i

429
00:16:54,000 --> 00:16:55,600
think this is all just too complex

430
00:16:55,600 --> 00:16:59,040
and likely to get more complex

431
00:16:59,600 --> 00:17:03,120
to think about that first if ever

432
00:17:03,120 --> 00:17:06,240
i so um i i think we're all under no

433
00:17:06,240 --> 00:17:07,359
illusion that this is a complicated

434
00:17:07,359 --> 00:17:08,240
thing to implement

435
00:17:08,240 --> 00:17:10,400
um and and surely we're not trying to

436
00:17:10,400 --> 00:17:11,679
make the thing more complicated than it

437
00:17:11,679 --> 00:17:12,799
needs to be

438
00:17:12,799 --> 00:17:16,160
um so uh i i think we're all trying to

439
00:17:16,160 --> 00:17:17,520
be mindful of complexity

440
00:17:17,520 --> 00:17:19,760
as we uh propose resolutions to

441
00:17:19,760 --> 00:17:21,280
particular issues and resolve

442
00:17:21,280 --> 00:17:24,480
things like hr and so on um the the the

443
00:17:24,480 --> 00:17:27,359
final slide for this particular uh

444
00:17:27,359 --> 00:17:27,839
section

445
00:17:27,839 --> 00:17:29,760
will be a proposal or talks about a

446
00:17:29,760 --> 00:17:31,440
proposal in helping to deal with

447
00:17:31,440 --> 00:17:32,880
complexity going forward so

448
00:17:32,880 --> 00:17:36,160
um i i'll note it now but

449
00:17:36,160 --> 00:17:38,640
um uh i don't think there's much we can

450
00:17:38,640 --> 00:17:39,600
do other than say

451
00:17:39,600 --> 00:17:42,960
uh you know what we'll try to

452
00:17:42,960 --> 00:17:44,320
not make things more complex than they

453
00:17:44,320 --> 00:17:46,400
need to be which i think is a like sort

454
00:17:46,400 --> 00:17:49,760
of your design goal that we all have

455
00:17:51,120 --> 00:17:53,200
okay so i'd appreciate if you can leave

456
00:17:53,200 --> 00:17:54,480
a bit of time at the end for

457
00:17:54,480 --> 00:17:56,480
i think i think all but that issue would

458
00:17:56,480 --> 00:17:58,559
be pretty quick so we could leave five

459
00:17:58,559 --> 00:18:00,320
minutes or so that'd be great

460
00:18:00,320 --> 00:18:03,919
yep sounds good um right so the the

461
00:18:03,919 --> 00:18:05,440
issue up on the screen right now uh if

462
00:18:05,440 --> 00:18:05,840
you can

463
00:18:05,840 --> 00:18:07,120
scroll up a little bit joe just so the

464
00:18:07,120 --> 00:18:09,919
title gives contacts to people um

465
00:18:09,919 --> 00:18:12,320
it's basically that uh right now there

466
00:18:12,320 --> 00:18:12,960
is a

467
00:18:12,960 --> 00:18:15,600
a sort of obvious distinguisher uh for

468
00:18:15,600 --> 00:18:18,000
ech versus non-ech in that

469
00:18:18,000 --> 00:18:20,960
um uh if you're using eca to prohibit

470
00:18:20,960 --> 00:18:21,440
you from

471
00:18:21,440 --> 00:18:24,080
attaching a psk on the outer client holo

472
00:18:24,080 --> 00:18:26,080
um for various reasons c the draft and

473
00:18:26,080 --> 00:18:26,480
the

474
00:18:26,480 --> 00:18:28,480
various attacks that we encounter with

475
00:18:28,480 --> 00:18:29,840
sort of uh

476
00:18:29,840 --> 00:18:32,240
ticket oracles and whatnot um but if

477
00:18:32,240 --> 00:18:33,520
you're using greece you're you're

478
00:18:33,520 --> 00:18:34,640
allowed to send

479
00:18:34,640 --> 00:18:38,559
a resumption psk which means if you see

480
00:18:38,559 --> 00:18:41,280
if you see a psk um you're likely to

481
00:18:41,280 --> 00:18:42,000
determine that this

482
00:18:42,000 --> 00:18:45,360
is definitely not ech um and

483
00:18:45,360 --> 00:18:47,200
and therefore it sticks out so i think

484
00:18:47,200 --> 00:18:49,120
there's a proposal down at the bottom

485
00:18:49,120 --> 00:18:52,240
um in terms of addressing this uh can

486
00:18:52,240 --> 00:18:52,799
you

487
00:18:52,799 --> 00:18:57,840
scroll down joe

488
00:18:58,000 --> 00:19:00,720
um oh

489
00:19:02,400 --> 00:19:06,000
right um so uh

490
00:19:06,000 --> 00:19:10,320
effectively what the proposal is to um

491
00:19:10,320 --> 00:19:13,600
recommend or suggest that clients may or

492
00:19:13,600 --> 00:19:15,440
or should depending on how strongly you

493
00:19:15,440 --> 00:19:18,160
feel about this send a dummy psk

494
00:19:18,160 --> 00:19:22,160
um uh if you're using ech

495
00:19:22,160 --> 00:19:25,200
and you have an inner psk as well um

496
00:19:25,200 --> 00:19:26,160
because one of the interesting edge

497
00:19:26,160 --> 00:19:28,480
cases is wherein if you have

498
00:19:28,480 --> 00:19:31,919
um a psk and the inner client hello

499
00:19:31,919 --> 00:19:33,760
and the server and its response inter

500
00:19:33,760 --> 00:19:36,480
after accepting ech replies

501
00:19:36,480 --> 00:19:38,640
with a psk extension some middle boxes

502
00:19:38,640 --> 00:19:39,840
might interpret that as

503
00:19:39,840 --> 00:19:41,280
you know compliance like there was no

504
00:19:41,280 --> 00:19:42,880
psk extension in the client hello but

505
00:19:42,880 --> 00:19:44,400
there is one in the outer client hello

506
00:19:44,400 --> 00:19:46,320
or in the server hello rather

507
00:19:46,320 --> 00:19:49,679
um so trying to deal with that um seems

508
00:19:49,679 --> 00:19:51,840
uh at least useful from a sort of

509
00:19:51,840 --> 00:19:53,360
deployability perspective

510
00:19:53,360 --> 00:19:55,840
um and that's probably the most we can

511
00:19:55,840 --> 00:19:56,799
do in terms of

512
00:19:56,799 --> 00:19:59,039
uh this particular issue anything more

513
00:19:59,039 --> 00:20:00,559
in terms of trying to like hide the fact

514
00:20:00,559 --> 00:20:02,240
that you're doing ech by like

515
00:20:02,240 --> 00:20:04,000
playing with dummy ech or not or

516
00:20:04,000 --> 00:20:06,320
hardwood case or not um

517
00:20:06,320 --> 00:20:09,760
seems complicated so um

518
00:20:09,760 --> 00:20:11,840
i i think the concrete proposal here is

519
00:20:11,840 --> 00:20:12,799
to just stick with

520
00:20:12,799 --> 00:20:15,200
um uh stick a recommendation in texas

521
00:20:15,200 --> 00:20:16,320
says you know

522
00:20:16,320 --> 00:20:18,320
if you have a psk and you're using ech

523
00:20:18,320 --> 00:20:20,320
you may also additionally um

524
00:20:20,320 --> 00:20:23,200
send a dummy one and the outer ech and

525
00:20:23,200 --> 00:20:24,480
the dummy one being like it

526
00:20:24,480 --> 00:20:26,960
it's obvious it's generated randomly you

527
00:20:26,960 --> 00:20:28,799
know length cvd and so on and we can

528
00:20:28,799 --> 00:20:32,080
bike shut on that later on but

529
00:20:32,840 --> 00:20:34,240
um

530
00:20:34,240 --> 00:20:36,159
that's that's the proposal so i'm

531
00:20:36,159 --> 00:20:39,360
curious to hear what folks think about

532
00:20:46,840 --> 00:20:49,840
this

533
00:20:52,880 --> 00:20:54,960
okay um i guess there are no objections

534
00:20:54,960 --> 00:20:56,400
we'll just go out to pr to

535
00:20:56,400 --> 00:20:57,760
propose that and move that forward and

536
00:20:57,760 --> 00:21:00,000
then we can

537
00:21:00,000 --> 00:21:01,360
discuss particulars in terms of like

538
00:21:01,360 --> 00:21:05,199
length of wpsk in the in the pr

539
00:21:05,840 --> 00:21:17,840
um can we go to the next issue

540
00:21:20,240 --> 00:21:22,400
right um so one of the changes in the

541
00:21:22,400 --> 00:21:23,520
energy distribution right now which

542
00:21:23,520 --> 00:21:24,880
would be included in draft 10

543
00:21:24,880 --> 00:21:28,400
um basically a reversal of a change that

544
00:21:28,400 --> 00:21:31,120
landed long ago

545
00:21:31,120 --> 00:21:33,280
from a client-side computer config

546
00:21:33,280 --> 00:21:34,799
identifier

547
00:21:34,799 --> 00:21:36,240
based on the hash that was negotiated

548
00:21:36,240 --> 00:21:38,159
with ech back to

549
00:21:38,159 --> 00:21:40,000
a server chosen config identifier which

550
00:21:40,000 --> 00:21:42,000
is now a variable length architect

551
00:21:42,000 --> 00:21:44,080
string um

552
00:21:44,080 --> 00:21:46,400
uh this issue is tracking the

553
00:21:46,400 --> 00:21:47,919
possibility of potential to make this

554
00:21:47,919 --> 00:21:49,360
connection identifier shorter

555
00:21:49,360 --> 00:21:51,360
um you know length tpd i think the

556
00:21:51,360 --> 00:21:52,559
proposal in the text is

557
00:21:52,559 --> 00:21:55,039
a single byte um but there's been you

558
00:21:55,039 --> 00:21:56,559
know

559
00:21:56,559 --> 00:21:58,320
you know i've also heard like four bites

560
00:21:58,320 --> 00:22:00,080
eight bites um or just like

561
00:22:00,080 --> 00:22:02,159
keeping it as is and there i think there

562
00:22:02,159 --> 00:22:04,000
are good arguments uh potentially to be

563
00:22:04,000 --> 00:22:04,720
made for both

564
00:22:04,720 --> 00:22:07,600
so um people who feel i guess strongly

565
00:22:07,600 --> 00:22:08,799
one way or the other about this

566
00:22:08,799 --> 00:22:11,520
issue um i very much like to hear um

567
00:22:11,520 --> 00:22:12,880
what you think in terms of

568
00:22:12,880 --> 00:22:16,000
uh what we should do be it

569
00:22:16,000 --> 00:22:19,200
close it um yeah

570
00:22:19,200 --> 00:22:22,080
uh ecker go ahead

571
00:22:22,640 --> 00:22:26,720
yeah i mean so i think i was

572
00:22:26,720 --> 00:22:28,240
i was the person who made both changes

573
00:22:28,240 --> 00:22:30,240
the uh the arbitrary one and then the

574
00:22:30,240 --> 00:22:32,799
freaking it down to uh um something else

575
00:22:32,799 --> 00:22:33,679
one

576
00:22:33,679 --> 00:22:36,880
um um but

577
00:22:36,880 --> 00:22:40,400
um uh i'm happy to have a fixed-length

578
00:22:40,400 --> 00:22:40,799
thing

579
00:22:40,799 --> 00:22:42,559
but i think um i think one bite is too

580
00:22:42,559 --> 00:22:43,760
short and i just think this is one of

581
00:22:43,760 --> 00:22:44,880
these things where like people think

582
00:22:44,880 --> 00:22:45,600
it's like

583
00:22:45,600 --> 00:22:46,640
you know people think it's like oh we're

584
00:22:46,640 --> 00:22:47,679
never gonna need it and then you're like

585
00:22:47,679 --> 00:22:49,120
really sorry later so um

586
00:22:49,120 --> 00:22:50,799
if you want to do like four four cuts

587
00:22:50,799 --> 00:22:52,320
i'm fine but like

588
00:22:52,320 --> 00:22:56,240
uh i'm like not cold one

589
00:23:00,240 --> 00:23:02,640
i mean four octets would be fine for me

590
00:23:02,640 --> 00:23:03,600
i guess um

591
00:23:03,600 --> 00:23:05,039
i i'm just like there there have been

592
00:23:05,039 --> 00:23:06,960
other my primary objective here is

593
00:23:06,960 --> 00:23:08,240
basically convergence with other

594
00:23:08,240 --> 00:23:08,960
potential

595
00:23:08,960 --> 00:23:11,039
uh you know structures that have the

596
00:23:11,039 --> 00:23:12,960
same uh semantic information that is

597
00:23:12,960 --> 00:23:13,440
like

598
00:23:13,440 --> 00:23:15,760
oh here's all the hpk information that

599
00:23:15,760 --> 00:23:16,559
you might need

600
00:23:16,559 --> 00:23:18,080
oblivious http is one particular

601
00:23:18,080 --> 00:23:19,520
proposal which happens to use a single

602
00:23:19,520 --> 00:23:21,200
fight right now

603
00:23:21,200 --> 00:23:22,559
but it'd be great if these things could

604
00:23:22,559 --> 00:23:24,400
share the same code because um

605
00:23:24,400 --> 00:23:25,760
there's no distinction between them

606
00:23:25,760 --> 00:23:27,760
beyond this particular length right now

607
00:23:27,760 --> 00:23:28,960
so

608
00:23:28,960 --> 00:23:31,120
one of my one bite is fine for me four

609
00:23:31,120 --> 00:23:32,400
bytes would be fine as well

610
00:23:32,400 --> 00:23:34,960
um uh i think martin pointed out

611
00:23:34,960 --> 00:23:36,559
unfortunately he's not here that

612
00:23:36,559 --> 00:23:38,960
um in a proposal to actually land this

613
00:23:38,960 --> 00:23:39,679
change that

614
00:23:39,679 --> 00:23:41,279
getting consensus on this is going to be

615
00:23:41,279 --> 00:23:42,880
quite challenging so i

616
00:23:42,880 --> 00:23:45,279
i i feel like not everyone's going to

617
00:23:45,279 --> 00:23:46,720
feel strongly about this

618
00:23:46,720 --> 00:23:51,120
uh so this is somewhat of a bike shed

619
00:23:51,120 --> 00:23:52,720
all that said i'd be happy compromising

620
00:23:52,720 --> 00:23:55,039
before

621
00:23:55,520 --> 00:23:58,799
does anyone else feel strongly

622
00:23:58,799 --> 00:24:04,880
ben are you still in the cube

623
00:24:04,880 --> 00:24:07,919
okay yeah go ahead

624
00:24:07,919 --> 00:24:12,080
hi uh yeah so variable length

625
00:24:12,080 --> 00:24:16,000
uh it concerns me because it

626
00:24:16,000 --> 00:24:20,159
the the variable length itself becomes

627
00:24:20,159 --> 00:24:22,720
uh another piece of implementation

628
00:24:22,720 --> 00:24:23,279
leakage

629
00:24:23,279 --> 00:24:27,279
that tells you um information that that

630
00:24:27,279 --> 00:24:29,279
we we don't it creates divergence

631
00:24:29,279 --> 00:24:30,640
between implementations and

632
00:24:30,640 --> 00:24:33,760
creates more more leakage about

633
00:24:33,760 --> 00:24:35,360
exactly how the client and server are

634
00:24:35,360 --> 00:24:37,039
implemented as different implementations

635
00:24:37,039 --> 00:24:37,440
choose

636
00:24:37,440 --> 00:24:41,760
different lengths and also it invites

637
00:24:41,760 --> 00:24:45,120
injection of arbitrary information

638
00:24:45,120 --> 00:24:47,760
there that could be used in all sorts of

639
00:24:47,760 --> 00:24:50,400
strange ways

640
00:24:50,960 --> 00:24:54,640
uh i uh oh and it's it's all in clear

641
00:24:54,640 --> 00:24:55,919
text on the wire right so like

642
00:24:55,919 --> 00:24:58,960
creating more clear text

643
00:24:58,960 --> 00:25:01,600
is is not really in line with i think

644
00:25:01,600 --> 00:25:04,320
the goals of tls

645
00:25:04,320 --> 00:25:07,679
uh so a fixed length is is preferable to

646
00:25:07,679 --> 00:25:09,760
me i would appreciate a reference to the

647
00:25:09,760 --> 00:25:12,799
to the hpke key identifier

648
00:25:12,799 --> 00:25:15,840
that you're talking about

649
00:25:16,000 --> 00:25:19,039
um uh you mean the oblivious http one

650
00:25:19,039 --> 00:25:20,960
no i mean you were talking you were

651
00:25:20,960 --> 00:25:22,159
talking about some kind of

652
00:25:22,159 --> 00:25:24,000
key of you were saying that in some

653
00:25:24,000 --> 00:25:25,919
other hpk context there's a one byte

654
00:25:25,919 --> 00:25:27,279
identifier i guess i was trying to

655
00:25:27,279 --> 00:25:29,360
figure out what you're referring to

656
00:25:29,360 --> 00:25:31,200
that was oblivious http i will pull up a

657
00:25:31,200 --> 00:25:32,799
reference okay okay

658
00:25:32,799 --> 00:25:36,480
thanks um so

659
00:25:36,480 --> 00:25:39,440
uh yeah i guess then i would be

660
00:25:39,440 --> 00:25:40,960
interested to know whether there are

661
00:25:40,960 --> 00:25:42,080
some sort of different design

662
00:25:42,080 --> 00:25:43,760
considerations that would mean that that

663
00:25:43,760 --> 00:25:44,960
context couldn't

664
00:25:44,960 --> 00:25:48,640
also use some other length um

665
00:25:48,640 --> 00:25:51,200
i do i do think we need to understand

666
00:25:51,200 --> 00:25:52,640
what it is that we're talking about here

667
00:25:52,640 --> 00:25:53,120
right

668
00:25:53,120 --> 00:25:55,200
to me the the fundamental discussion we

669
00:25:55,200 --> 00:25:56,480
are having here is

670
00:25:56,480 --> 00:25:59,760
is trial decryption required

671
00:25:59,760 --> 00:26:01,440
for service are servers required to

672
00:26:01,440 --> 00:26:03,039
implement trial decryption

673
00:26:03,039 --> 00:26:04,640
and we're trying to make sure that they

674
00:26:04,640 --> 00:26:06,240
actually

675
00:26:06,240 --> 00:26:10,000
do that or

676
00:26:10,000 --> 00:26:11,279
are we trying to say the trial

677
00:26:11,279 --> 00:26:14,960
description is not required

678
00:26:22,480 --> 00:26:27,279
so um i mean i i i don't see

679
00:26:30,000 --> 00:26:31,919
if we go for one bite or four bytes um a

680
00:26:31,919 --> 00:26:32,720
server's gonna have to support

681
00:26:32,720 --> 00:26:36,159
transcription nonetheless um

682
00:26:36,240 --> 00:26:40,159
most likely and i i find it i i

683
00:26:40,159 --> 00:26:41,919
i'm not seeing right now how we could

684
00:26:41,919 --> 00:26:43,360
get around um

685
00:26:43,360 --> 00:26:45,360
potentially having like just that code

686
00:26:45,360 --> 00:26:47,279
path in the stack

687
00:26:47,279 --> 00:26:50,880
um so at four bytes

688
00:26:50,880 --> 00:26:54,240
i think um trial decryption essentially

689
00:26:54,240 --> 00:26:56,000
is no longer required

690
00:26:56,000 --> 00:26:59,120
basically um

691
00:26:59,120 --> 00:27:03,279
you know as a server operator can

692
00:27:03,279 --> 00:27:07,120
can can reasonably expect to be able to

693
00:27:07,120 --> 00:27:10,000
assign every every key present in the

694
00:27:10,000 --> 00:27:10,640
fleet

695
00:27:10,640 --> 00:27:13,440
a unique id

696
00:27:14,640 --> 00:27:15,760
which means they don't need trial

697
00:27:15,760 --> 00:27:17,840
decryption anymore

698
00:27:17,840 --> 00:27:19,679
and you could make the same argument for

699
00:27:19,679 --> 00:27:22,159
a single byte

700
00:27:22,159 --> 00:27:25,760
maybe um but i interpreted the use of a

701
00:27:25,760 --> 00:27:26,880
single byte as a

702
00:27:26,880 --> 00:27:29,200
as partly as an attempt to say you know

703
00:27:29,200 --> 00:27:30,960
we're not going to let you escape from

704
00:27:30,960 --> 00:27:33,200
trial decryption

705
00:27:33,200 --> 00:27:35,760
oh no i mean um the the primary

706
00:27:35,760 --> 00:27:36,559
motivation was

707
00:27:36,559 --> 00:27:40,159
uh but we don't want uh more bids for

708
00:27:40,159 --> 00:27:40,799
tracking

709
00:27:40,799 --> 00:27:44,640
um uh it wasn't so much about um

710
00:27:44,640 --> 00:27:48,399
trial decryption but okay

711
00:27:48,399 --> 00:27:51,360
so yeah i i mean as my my overriding

712
00:27:51,360 --> 00:27:52,720
concern really is about

713
00:27:52,720 --> 00:27:55,840
um is about the impact on greece um

714
00:27:55,840 --> 00:27:59,039
because with with one bite um it's not

715
00:27:59,039 --> 00:28:00,640
easy to tell the difference between say

716
00:28:00,640 --> 00:28:01,279
sequential

717
00:28:01,279 --> 00:28:04,720
allocation of keys and random randomly

718
00:28:04,720 --> 00:28:08,000
identified keys but with four bytes

719
00:28:08,000 --> 00:28:10,320
uh it becomes pretty trivial to look at

720
00:28:10,320 --> 00:28:12,159
this and say well you know this server

721
00:28:12,159 --> 00:28:13,760
normally allocates

722
00:28:13,760 --> 00:28:16,799
its keys starting at one uh and go

723
00:28:16,799 --> 00:28:19,039
you know walking upwards and your key is

724
00:28:19,039 --> 00:28:20,480
a random four

725
00:28:20,480 --> 00:28:23,840
four byte integer so um that doesn't

726
00:28:23,840 --> 00:28:24,640
look like

727
00:28:24,640 --> 00:28:28,159
real would agree

728
00:28:28,159 --> 00:28:31,840
uh although

729
00:28:32,080 --> 00:28:33,760
it's not clear to me that that's a

730
00:28:33,760 --> 00:28:35,760
design constraint we're

731
00:28:35,760 --> 00:28:38,320
we're trying to operate under um that is

732
00:28:38,320 --> 00:28:39,200
specifically

733
00:28:39,200 --> 00:28:42,320
uh making it so that

734
00:28:42,320 --> 00:28:43,840
someone who's looking can't distinguish

735
00:28:43,840 --> 00:28:46,320
this from uh greece or non-greece for

736
00:28:46,320 --> 00:28:48,159
the purposes of

737
00:28:48,159 --> 00:28:52,559
doing nefarious things not potentially

738
00:28:53,520 --> 00:28:55,360
being an interop or a deployment issue

739
00:28:55,360 --> 00:28:59,279
or whatever um uh

740
00:28:59,279 --> 00:29:02,559
so so yes it's possible to

741
00:29:02,559 --> 00:29:04,159
you know choose your config identifiers

742
00:29:04,159 --> 00:29:05,919
and update them rotate them whatever in

743
00:29:05,919 --> 00:29:06,960
the dumb way such that

744
00:29:06,960 --> 00:29:10,840
they stick out um but also note that

745
00:29:10,840 --> 00:29:12,240
like

746
00:29:12,240 --> 00:29:14,960
it's probably also possible to see when

747
00:29:14,960 --> 00:29:16,480
a client is reusing

748
00:29:16,480 --> 00:29:20,000
um uh a config identifier um regardless

749
00:29:20,000 --> 00:29:21,760
of how the server chooses it like so for

750
00:29:21,760 --> 00:29:22,640
example

751
00:29:22,640 --> 00:29:24,480
if the if the client happens to connect

752
00:29:24,480 --> 00:29:25,919
to the same server back to back it's

753
00:29:25,919 --> 00:29:28,320
going to use the same config identifier

754
00:29:28,320 --> 00:29:30,240
whether or not it's like it looks like a

755
00:29:30,240 --> 00:29:32,000
random byte or looks like a random four

756
00:29:32,000 --> 00:29:33,279
bytes or whatever

757
00:29:33,279 --> 00:29:36,320
uh whereas if it was using greece

758
00:29:36,320 --> 00:29:38,399
each time that would be in theory

759
00:29:38,399 --> 00:29:39,919
different because it's randomly chosen

760
00:29:39,919 --> 00:29:40,720
assuming that's

761
00:29:40,720 --> 00:29:44,080
actually how you would spell it um so

762
00:29:44,080 --> 00:29:45,760
i'm not sure how we work on to be more

763
00:29:45,760 --> 00:29:47,360
concrete i think that we there are

764
00:29:47,360 --> 00:29:49,120
things we could do here that would help

765
00:29:49,120 --> 00:29:49,919
like for example

766
00:29:49,919 --> 00:29:52,720
a four or eight byte id that comes with

767
00:29:52,720 --> 00:29:53,360
a

768
00:29:53,360 --> 00:29:56,080
an instruction that says thou shalt

769
00:29:56,080 --> 00:29:57,840
generate this randomly

770
00:29:57,840 --> 00:30:00,480
um when when constructing your ech

771
00:30:00,480 --> 00:30:01,679
config

772
00:30:01,679 --> 00:30:04,799
i think would be better

773
00:30:04,799 --> 00:30:06,240
for greece on the client side i think

774
00:30:06,240 --> 00:30:08,320
instruction degrees that says you know

775
00:30:08,320 --> 00:30:10,559
maybe try to make this consistent uh

776
00:30:10,559 --> 00:30:12,080
over subsequent connections

777
00:30:12,080 --> 00:30:16,000
could be useful the the current proposal

778
00:30:16,000 --> 00:30:16,399
does

779
00:30:16,399 --> 00:30:18,080
suggest accept language so it's not just

780
00:30:18,080 --> 00:30:19,840
like you use a counter it's like you do

781
00:30:19,840 --> 00:30:21,200
rejection sampling when choosing a

782
00:30:21,200 --> 00:30:22,480
config identifier

783
00:30:22,480 --> 00:30:24,000
specifically for the reason that you say

784
00:30:24,000 --> 00:30:25,919
although we can only like require

785
00:30:25,919 --> 00:30:26,880
servers to do that

786
00:30:26,880 --> 00:30:29,760
um just ask them to do it nicely and

787
00:30:29,760 --> 00:30:30,720
there's probably something you can do in

788
00:30:30,720 --> 00:30:32,080
the client side as well it says yeah be

789
00:30:32,080 --> 00:30:33,600
smart about how you are

790
00:30:33,600 --> 00:30:36,399
you know choosing your config ids if

791
00:30:36,399 --> 00:30:37,760
you're greasing if this is something

792
00:30:37,760 --> 00:30:39,120
you're concerned about

793
00:30:39,120 --> 00:30:42,159
but uh like specifying that very clearly

794
00:30:42,159 --> 00:30:45,760
um seems uh quite difficult to do um

795
00:30:45,760 --> 00:30:49,360
and so it's not clear to me

796
00:30:49,360 --> 00:30:51,440
especially given what it reveals it's

797
00:30:51,440 --> 00:30:52,480
worth fighting off but

798
00:30:52,480 --> 00:30:55,840
but maybe it is um uh carrick's

799
00:30:55,840 --> 00:30:58,320
in the queue

800
00:31:00,640 --> 00:31:04,399
so hopefully people can hear me um

801
00:31:04,399 --> 00:31:06,000
uh it seems to me like you know because

802
00:31:06,000 --> 00:31:07,840
of the tracking vector there's a

803
00:31:07,840 --> 00:31:09,679
you have to decide like where that's no

804
00:31:09,679 --> 00:31:11,440
longer an issue and it seems to me like

805
00:31:11,440 --> 00:31:14,640
four bytes would be an issue um

806
00:31:14,640 --> 00:31:18,320
so uh if one is too little because

807
00:31:18,320 --> 00:31:19,760
you know it's just not big enough you

808
00:31:19,760 --> 00:31:21,519
might need more then

809
00:31:21,519 --> 00:31:24,880
why not two i mean i don't know how you

810
00:31:24,880 --> 00:31:26,720
can quantify like at what point

811
00:31:26,720 --> 00:31:29,440
it's no longer a concern but i don't

812
00:31:29,440 --> 00:31:30,480
know if just

813
00:31:30,480 --> 00:31:33,760
it seems like jumping to four is um

814
00:31:33,760 --> 00:31:36,640
just way too much

815
00:31:37,440 --> 00:31:39,120
that's my response to that would be what

816
00:31:39,120 --> 00:31:41,039
basically is uh what ecker has pointed

817
00:31:41,039 --> 00:31:41,679
out

818
00:31:41,679 --> 00:31:43,919
and that the the the tracking argument

819
00:31:43,919 --> 00:31:46,080
doesn't uh is not great

820
00:31:46,080 --> 00:31:47,600
in particular because we kind of already

821
00:31:47,600 --> 00:31:49,440
assume that the adversary controls dns

822
00:31:49,440 --> 00:31:50,799
and if it wanted to track

823
00:31:50,799 --> 00:31:53,039
we could just like vend out unique ip

824
00:31:53,039 --> 00:31:54,880
addresses to tag specific clients that

825
00:31:54,880 --> 00:31:55,760
way

826
00:31:55,760 --> 00:31:56,050
um

827
00:31:56,050 --> 00:31:59,129
[Music]

828
00:31:59,200 --> 00:32:02,000
so i i don't i don't know i i i don't

829
00:32:02,000 --> 00:32:03,440
feel strongly about this one way or the

830
00:32:03,440 --> 00:32:05,600
other i just i would like a resolution

831
00:32:05,600 --> 00:32:08,720
um okay i didn't where does

832
00:32:08,720 --> 00:32:10,399
i didn't see an argument saying that the

833
00:32:10,399 --> 00:32:12,080
attacker has to control dns in this

834
00:32:12,080 --> 00:32:13,279
context or in this

835
00:32:13,279 --> 00:32:16,799
situation where is that just the default

836
00:32:16,799 --> 00:32:18,320
sort of threat model for ech that the

837
00:32:18,320 --> 00:32:19,279
attacker controls

838
00:32:19,279 --> 00:32:21,760
dns

839
00:32:23,279 --> 00:32:26,080
it's one of the appendages

840
00:32:26,840 --> 00:32:29,840
okay

841
00:32:29,840 --> 00:32:32,240
ecker

842
00:32:33,039 --> 00:32:36,000
yeah okay um i think i'm somewhat

843
00:32:36,000 --> 00:32:37,760
persuaded by ben's argument but i think

844
00:32:37,760 --> 00:32:39,519
i'm mostly persuaded that like

845
00:32:39,519 --> 00:32:41,440
because this is largely that like we

846
00:32:41,440 --> 00:32:42,720
should have one bite so

847
00:32:42,720 --> 00:32:45,679
um um well i think well i think we're

848
00:32:45,679 --> 00:32:47,519
going to be sorry later

849
00:32:47,519 --> 00:32:50,320
i'm going to go there

850
00:32:55,360 --> 00:32:57,519
does anyone else want to chime in before

851
00:32:57,519 --> 00:33:00,799
we note that and move on

852
00:33:02,080 --> 00:33:05,200
uh eric and as a

853
00:33:05,200 --> 00:33:08,240
ration um i guess the alternative would

854
00:33:08,240 --> 00:33:09,120
be a

855
00:33:09,120 --> 00:33:11,039
to keep it at variable length but have a

856
00:33:11,039 --> 00:33:12,880
recommendation that you should do

857
00:33:12,880 --> 00:33:15,279
one byte or it's a concern there that

858
00:33:15,279 --> 00:33:16,399
that the

859
00:33:16,399 --> 00:33:18,559
that an attacker controlling dns could

860
00:33:18,559 --> 00:33:19,679
could inject stuff

861
00:33:19,679 --> 00:33:21,679
that they they then observe the client

862
00:33:21,679 --> 00:33:23,200
using

863
00:33:23,200 --> 00:33:25,440
because a malicious server operator has

864
00:33:25,440 --> 00:33:26,799
a bunch of other ways they could do

865
00:33:26,799 --> 00:33:29,919
they could um do things um or could just

866
00:33:29,919 --> 00:33:32,960
not enable ech

867
00:33:35,519 --> 00:33:37,519
i think that's the crux of i mean i

868
00:33:37,519 --> 00:33:38,720
don't speak for acker but i think that's

869
00:33:38,720 --> 00:33:39,679
the the

870
00:33:39,679 --> 00:33:41,120
i i interpreted that to beat of course

871
00:33:41,120 --> 00:33:43,200
at his point

872
00:33:43,200 --> 00:33:45,279
and so if like if if shortening the

873
00:33:45,279 --> 00:33:46,399
config identifier

874
00:33:46,399 --> 00:33:49,039
yields no concrete benefit then um

875
00:33:49,039 --> 00:33:50,240
perhaps i'll do it at all and allow

876
00:33:50,240 --> 00:33:53,360
servers to be flexible

877
00:33:54,000 --> 00:33:56,480
but um it does sound like more people

878
00:33:56,480 --> 00:34:00,320
were in favor of shorter than longer

879
00:34:00,399 --> 00:34:03,600
so unless there's like any other

880
00:34:03,600 --> 00:34:05,200
concrete objections that i'll just mark

881
00:34:05,200 --> 00:34:07,120
that and move on and then we can

882
00:34:07,120 --> 00:34:08,639
potentially discuss it in the pr yeah

883
00:34:08,639 --> 00:34:10,960
david

884
00:34:14,159 --> 00:34:15,839
um one minor thing on the variable

885
00:34:15,839 --> 00:34:17,359
length stuff is that it does give

886
00:34:17,359 --> 00:34:20,320
a pretty large vector for the dns to

887
00:34:20,320 --> 00:34:21,599
inject arbitrary

888
00:34:21,599 --> 00:34:23,679
contents into the like bytes the client

889
00:34:23,679 --> 00:34:25,119
sends over the wire

890
00:34:25,119 --> 00:34:26,800
which it's not like this is the only

891
00:34:26,800 --> 00:34:28,159
source of this sort of thing

892
00:34:28,159 --> 00:34:30,560
but occasionally we've had issues with

893
00:34:30,560 --> 00:34:31,520
like

894
00:34:31,520 --> 00:34:34,480
confusing one like confusing a target

895
00:34:34,480 --> 00:34:35,440
server with

896
00:34:35,440 --> 00:34:37,520
expecting another protocol or like weird

897
00:34:37,520 --> 00:34:40,159
stuff like that

898
00:34:45,520 --> 00:34:48,639
eric did you have more to say or

899
00:34:48,639 --> 00:34:53,119
are you upset oh you mean other

900
00:34:53,119 --> 00:34:55,679
oh yeah sorry

901
00:34:56,399 --> 00:35:00,160
it might be worth doing at home yeah

902
00:35:01,520 --> 00:35:05,040
just to to firmly sort of uh uh

903
00:35:05,040 --> 00:35:07,520
make it concrete joe or sean would you

904
00:35:07,520 --> 00:35:10,640
mind kicking one off

905
00:35:11,359 --> 00:35:14,000
i think the hum uh oh uh we don't have

906
00:35:14,000 --> 00:35:17,119
virtual home tool this time

907
00:35:17,119 --> 00:35:19,920
um okay uh georgetown do you know how to

908
00:35:19,920 --> 00:35:22,640
use show of hands

909
00:35:22,720 --> 00:35:26,960
uh i did at one point but is it still

910
00:35:26,960 --> 00:35:29,280
there

911
00:35:29,440 --> 00:35:32,480
they move it

912
00:35:32,640 --> 00:35:36,320
i see it up to the right

913
00:35:36,320 --> 00:35:40,240
the bar graph thing across the top

914
00:35:40,240 --> 00:35:42,799
oh okay

915
00:35:43,280 --> 00:35:46,079
all right so

916
00:35:46,560 --> 00:35:49,920
what is the decision point here is

917
00:35:49,920 --> 00:35:51,920
are you in favor of a one byte config

918
00:35:51,920 --> 00:35:53,119
identifier okay

919
00:35:53,119 --> 00:35:56,320
favor of one byte okay okay so the first

920
00:35:56,320 --> 00:35:57,040
question will be

921
00:35:57,040 --> 00:36:00,079
are you in favor of a one bite and the

922
00:36:00,079 --> 00:36:01,200
second one question

923
00:36:01,200 --> 00:36:04,720
question will be is uh are you not in

924
00:36:04,720 --> 00:36:05,839
favor of

925
00:36:05,839 --> 00:36:13,119
one bite

926
00:36:13,119 --> 00:36:18,720
okay so i am going to start that

927
00:36:24,839 --> 00:36:27,839
now

928
00:36:52,839 --> 00:36:55,839
uh

929
00:36:58,000 --> 00:37:01,359
all right it looks like the numbers are

930
00:37:01,359 --> 00:37:03,440
starting to give it a couple more uh

931
00:37:03,440 --> 00:37:08,640
seconds here so people can find the

932
00:37:08,640 --> 00:37:11,118
function

933
00:37:18,160 --> 00:37:23,200
all right so we have uh

934
00:37:23,200 --> 00:37:25,440
most people in favor well we have a

935
00:37:25,440 --> 00:37:26,320
night

936
00:37:26,320 --> 00:37:30,560
21 in favor and 16 did not

937
00:37:30,560 --> 00:37:32,720
raise hand i'm not sure how to interpret

938
00:37:32,720 --> 00:37:35,040
that i think we're gonna do

939
00:37:35,040 --> 00:37:38,400
should we do another question

940
00:37:40,960 --> 00:37:45,520
i think so just negate it okay

941
00:37:45,520 --> 00:37:48,839
okay now this is uh not in favor of one

942
00:37:48,839 --> 00:37:51,839
fight

943
00:37:53,760 --> 00:38:05,839
i'm going to start the session now

944
00:38:51,839 --> 00:38:53,839
okay i think we're stabilizing on our

945
00:38:53,839 --> 00:38:55,040
results now

946
00:38:55,040 --> 00:38:59,119
so it looks like to me for

947
00:38:59,119 --> 00:39:02,320
not in favor of one bite we had 10 in

948
00:39:02,320 --> 00:39:05,040
favor of one bite we had 21

949
00:39:05,040 --> 00:39:08,079
so there's a a pretty

950
00:39:08,079 --> 00:39:11,839
strong leaning towards

951
00:39:11,839 --> 00:39:15,119
the one bite um

952
00:39:15,119 --> 00:39:16,400
but there are still some folks who are

953
00:39:16,400 --> 00:39:19,280
uncomfortable with that

954
00:39:21,200 --> 00:39:23,359
it's not surprising this is um this is

955
00:39:23,359 --> 00:39:25,839
sort of an epic bike show in a way

956
00:39:25,839 --> 00:39:29,520
yeah i will i will note the

957
00:39:29,520 --> 00:39:32,079
results of the poll in the issue um and

958
00:39:32,079 --> 00:39:35,920
i will drop to pr accordingly

959
00:39:38,720 --> 00:39:41,200
okay do i want to move on to the next

960
00:39:41,200 --> 00:39:42,320
one

961
00:39:42,320 --> 00:39:57,839
yes please

962
00:40:04,720 --> 00:40:06,720
okay i think i have the let me know if

963
00:40:06,720 --> 00:40:11,119
this is what you expect

964
00:40:11,119 --> 00:40:13,440
uh yes sorry um so i filed this issue a

965
00:40:13,440 --> 00:40:14,160
while back

966
00:40:14,160 --> 00:40:17,760
um uh this is this is sort of also a

967
00:40:17,760 --> 00:40:18,480
bike chat but

968
00:40:18,480 --> 00:40:21,119
um again when we're trying to uh reduce

969
00:40:21,119 --> 00:40:22,640
complexity of things there is

970
00:40:22,640 --> 00:40:25,359
um the way we're using hp key right now

971
00:40:25,359 --> 00:40:26,960
in the config identifier is

972
00:40:26,960 --> 00:40:29,599
um currently wrapping the public keys

973
00:40:29,599 --> 00:40:30,880
that we get in configs

974
00:40:30,880 --> 00:40:34,079
uh with um basically a length prefix

975
00:40:34,079 --> 00:40:36,079
uh hp was specifically designed such

976
00:40:36,079 --> 00:40:37,520
that that is not necessary

977
00:40:37,520 --> 00:40:39,920
although the encoded public keys have a

978
00:40:39,920 --> 00:40:41,920
fixed length

979
00:40:41,920 --> 00:40:45,119
so this proposal is to basically make

980
00:40:45,119 --> 00:40:48,720
fixed length fields fixed length

981
00:40:49,760 --> 00:40:53,119
the currently it only applies to config

982
00:40:53,119 --> 00:40:56,400
or the proposal was only config contents

983
00:40:56,400 --> 00:40:57,280
but if you scroll down

984
00:40:57,280 --> 00:41:00,000
a little bit joe

985
00:41:04,839 --> 00:41:06,160
um

986
00:41:06,160 --> 00:41:09,200
the um

987
00:41:09,599 --> 00:41:12,560
the the similar encapsulated key that is

988
00:41:12,560 --> 00:41:13,839
carried inside the client hello

989
00:41:13,839 --> 00:41:14,560
extension

990
00:41:14,560 --> 00:41:18,079
um is also in practice fixed length um

991
00:41:18,079 --> 00:41:20,240
but making this fixed length could

992
00:41:20,240 --> 00:41:22,000
complicate trial decryption

993
00:41:22,000 --> 00:41:25,200
um so i'm not sure where people feel

994
00:41:25,200 --> 00:41:26,800
about this i'm perfectly happy to close

995
00:41:26,800 --> 00:41:27,119
it

996
00:41:27,119 --> 00:41:29,520
um but just noting this is a potential

997
00:41:29,520 --> 00:41:30,560
optimization

998
00:41:30,560 --> 00:41:33,599
um that we might do uh

999
00:41:33,599 --> 00:41:36,319
david go ahead

1000
00:41:37,920 --> 00:41:39,359
i don't feel very strongly about this

1001
00:41:39,359 --> 00:41:40,560
either way but i think one thing we

1002
00:41:40,560 --> 00:41:42,319
should probably keep in mind is that

1003
00:41:42,319 --> 00:41:44,800
if we do fix length then if you don't

1004
00:41:44,800 --> 00:41:45,359
know

1005
00:41:45,359 --> 00:41:48,400
that if you see an unrecognized chemid

1006
00:41:48,400 --> 00:41:49,760
you don't you aren't able to parse the

1007
00:41:49,760 --> 00:41:51,440
message anymore um

1008
00:41:51,440 --> 00:41:53,839
so i think it's fine in that like for an

1009
00:41:53,839 --> 00:41:55,440
ecconfig context if you don't recognize

1010
00:41:55,440 --> 00:41:55,680
the

1011
00:41:55,680 --> 00:41:57,440
chemid you may as well drop it on the

1012
00:41:57,440 --> 00:41:59,760
floor and likewise with the client ech

1013
00:41:59,760 --> 00:42:00,560
structure

1014
00:42:00,560 --> 00:42:02,480
um but this would be introducing a new

1015
00:42:02,480 --> 00:42:04,480
place for this whereas previously

1016
00:42:04,480 --> 00:42:06,960
uh we said that uh well if you don't

1017
00:42:06,960 --> 00:42:08,240
understand the version you can drop it

1018
00:42:08,240 --> 00:42:09,520
on the floor but everything else you can

1019
00:42:09,520 --> 00:42:12,000
at least expect to parse it

1020
00:42:12,000 --> 00:42:13,119
i don't know if we said it but it is

1021
00:42:13,119 --> 00:42:16,079
currently the case effective

1022
00:42:16,079 --> 00:42:17,760
that's that was the thinking for the

1023
00:42:17,760 --> 00:42:19,040
config contents where if you don't

1024
00:42:19,040 --> 00:42:20,480
recognize the id you just skip the rest

1025
00:42:20,480 --> 00:42:21,359
of the thing

1026
00:42:21,359 --> 00:42:23,440
um so yeah that is that is the trade-off

1027
00:42:23,440 --> 00:42:25,359
you have you must know

1028
00:42:25,359 --> 00:42:26,880
how you must understand the

1029
00:42:26,880 --> 00:42:28,640
corresponding cam in order to actually

1030
00:42:28,640 --> 00:42:31,839
parse the field

1031
00:42:33,920 --> 00:42:37,839
uh watson watson live cloudflare i

1032
00:42:37,839 --> 00:42:40,160
can't remember but i thought there's

1033
00:42:40,160 --> 00:42:41,760
something where

1034
00:42:41,760 --> 00:42:45,040
you don't necessarily have a length for

1035
00:42:45,040 --> 00:42:45,359
a

1036
00:42:45,359 --> 00:42:48,960
struct if you just

1037
00:42:48,960 --> 00:42:51,119
if if all the fields are fixed but maybe

1038
00:42:51,119 --> 00:42:52,560
that's not the case

1039
00:42:52,560 --> 00:42:54,880
and i worry that when you have this

1040
00:42:54,880 --> 00:42:55,680
thing we need to look

1041
00:42:55,680 --> 00:42:57,359
inside to see the length of the whole

1042
00:42:57,359 --> 00:42:59,119
thing and that might

1043
00:42:59,119 --> 00:43:01,520
be a problem for the tls wrapping by i

1044
00:43:01,520 --> 00:43:04,560
can't quite remember

1045
00:43:07,760 --> 00:43:12,880
i'm not sure but maybe eckerd knows um

1046
00:43:12,880 --> 00:43:14,800
yeah and i think this one is actually

1047
00:43:14,800 --> 00:43:17,119
okay in that respect because

1048
00:43:17,119 --> 00:43:18,880
as far if i'm reading this this language

1049
00:43:18,880 --> 00:43:21,599
correctly the ech config has exactly

1050
00:43:21,599 --> 00:43:25,200
one hp hpk config and

1051
00:43:25,200 --> 00:43:27,359
and the ech config itself has length

1052
00:43:27,359 --> 00:43:28,400
version so you can skip

1053
00:43:28,400 --> 00:43:32,560
past the ech config um like

1054
00:43:32,560 --> 00:43:35,040
well i'm i'm sort of like the on this

1055
00:43:35,040 --> 00:43:36,319
either way i mean i think like i

1056
00:43:36,319 --> 00:43:38,000
understand why people want to do it but

1057
00:43:38,000 --> 00:43:38,480
um

1058
00:43:38,480 --> 00:43:41,760
it's honestly actually harder to like um

1059
00:43:41,760 --> 00:43:43,520
it's it's actually like like for like

1060
00:43:43,520 --> 00:43:45,119
the like the parser like for a lot of

1061
00:43:45,119 --> 00:43:46,480
parts is actually harder to do it this

1062
00:43:46,480 --> 00:43:46,960
way

1063
00:43:46,960 --> 00:43:49,040
because because because it means that

1064
00:43:49,040 --> 00:43:50,720
you can't have like a generic parser for

1065
00:43:50,720 --> 00:43:51,920
the structure but rather you have to

1066
00:43:51,920 --> 00:43:53,119
like call out to like the

1067
00:43:53,119 --> 00:43:55,920
chem table so like i'm not i i

1068
00:43:55,920 --> 00:43:57,200
understand why women think it increases

1069
00:43:57,200 --> 00:43:58,240
simplicity but i think

1070
00:43:58,240 --> 00:44:00,480
it actually like increases modularity at

1071
00:44:00,480 --> 00:44:02,000
a cost at a cost of like notional

1072
00:44:02,000 --> 00:44:03,599
simplicity so i think i'm like generally

1073
00:44:03,599 --> 00:44:05,200
against this but like not one to lie

1074
00:44:05,200 --> 00:44:07,119
down on the road

1075
00:44:07,119 --> 00:44:09,040
yeah in terms of a time check too we got

1076
00:44:09,040 --> 00:44:10,319
about 10 more minutes before we got to

1077
00:44:10,319 --> 00:44:11,920
move on to the next presentation so as

1078
00:44:11,920 --> 00:44:12,400
usual

1079
00:44:12,400 --> 00:44:14,720
this uh sucking up the air out of the

1080
00:44:14,720 --> 00:44:15,760
room

1081
00:44:15,760 --> 00:44:18,560
thanks sean um yeah i i'm perfectly fine

1082
00:44:18,560 --> 00:44:19,680
with that uh why don't we just close

1083
00:44:19,680 --> 00:44:21,359
this and move on then um

1084
00:44:21,359 --> 00:44:24,079
and implementing this elsewhere um that

1085
00:44:24,079 --> 00:44:25,920
you know that chem table dependency was

1086
00:44:25,920 --> 00:44:28,400
kind of annoying um so if folks want to

1087
00:44:28,400 --> 00:44:29,760
use general purpose parsers to

1088
00:44:29,760 --> 00:44:31,440
you know parse these configs that's

1089
00:44:31,440 --> 00:44:32,800
that's reasonable so

1090
00:44:32,800 --> 00:44:37,839
i'll note this and close the issue

1091
00:44:45,440 --> 00:44:48,560
um right so uh

1092
00:44:48,560 --> 00:44:50,079
david i don't want to speak for you but

1093
00:44:50,079 --> 00:44:51,920
uh we filed this issue to just

1094
00:44:51,920 --> 00:44:53,280
sort of now we're using it to track all

1095
00:44:53,280 --> 00:44:55,119
sorts of interesting um

1096
00:44:55,119 --> 00:44:57,200
dos factors and processing uh client

1097
00:44:57,200 --> 00:44:59,520
hellos and outer extensions and whatnot

1098
00:44:59,520 --> 00:45:02,160
um we did land some texts to uh address

1099
00:45:02,160 --> 00:45:04,240
one of the particular mitigations um

1100
00:45:04,240 --> 00:45:05,760
and that mistakenly closed the issue but

1101
00:45:05,760 --> 00:45:07,280
we opened it back up

1102
00:45:07,280 --> 00:45:11,359
um i guess uh the question for the group

1103
00:45:11,359 --> 00:45:11,839
here is

1104
00:45:11,839 --> 00:45:14,880
to what extent do we want to either

1105
00:45:14,880 --> 00:45:17,119
uh maybe this sort of you know carries

1106
00:45:17,119 --> 00:45:18,480
over into steven's point

1107
00:45:18,480 --> 00:45:21,200
um to an extent do we want to note that

1108
00:45:21,200 --> 00:45:21,599
these

1109
00:45:21,599 --> 00:45:24,560
potential uh factors exist versus like

1110
00:45:24,560 --> 00:45:25,200
modify

1111
00:45:25,200 --> 00:45:28,000
how the the compression mechanism thing

1112
00:45:28,000 --> 00:45:29,359
works entirely uh

1113
00:45:29,359 --> 00:45:32,400
to to avoid them all together so um

1114
00:45:32,400 --> 00:45:33,839
oh thank you so long so i'll just turn

1115
00:45:33,839 --> 00:45:36,319
over to the cube

1116
00:45:36,880 --> 00:45:39,680
yes i think we reopened it in part

1117
00:45:39,680 --> 00:45:41,359
because there there was a second dos

1118
00:45:41,359 --> 00:45:43,200
vector that we forgot to document

1119
00:45:43,200 --> 00:45:45,760
um but yeah the uh the current

1120
00:45:45,760 --> 00:45:47,200
decompression thing is a little bit

1121
00:45:47,200 --> 00:45:48,160
fussy it is

1122
00:45:48,160 --> 00:45:49,520
possible to implement it without

1123
00:45:49,520 --> 00:45:51,680
problems but i think we should probably

1124
00:45:51,680 --> 00:45:54,880
like like my feeling is that

1125
00:45:54,880 --> 00:45:56,319
if we can come up with a simpler thing

1126
00:45:56,319 --> 00:45:58,160
that still meets our goals then

1127
00:45:58,160 --> 00:46:00,720
we should switch to that and but until

1128
00:46:00,720 --> 00:46:01,760
we do that we should

1129
00:46:01,760 --> 00:46:04,800
go and document the the couple of um

1130
00:46:04,800 --> 00:46:06,560
tricky points uh and i think we

1131
00:46:06,560 --> 00:46:07,920
documented one of them and then we

1132
00:46:07,920 --> 00:46:09,680
realized there was a second one so

1133
00:46:09,680 --> 00:46:14,480
uh hopefully we can go document that too

1134
00:46:14,480 --> 00:46:18,960
that's my impression as well uh stephen

1135
00:46:19,119 --> 00:46:21,839
yeah i mean i guess there's uh in

1136
00:46:21,839 --> 00:46:22,800
addition to what

1137
00:46:22,800 --> 00:46:24,880
was said i think this also creates quite

1138
00:46:24,880 --> 00:46:26,560
a testing burden if it's done

1139
00:46:26,560 --> 00:46:28,880
as anywhere near as is with that level

1140
00:46:28,880 --> 00:46:30,240
of generality

1141
00:46:30,240 --> 00:46:32,240
i don't really see a huge benefit or any

1142
00:46:32,240 --> 00:46:33,359
benefit to be honest

1143
00:46:33,359 --> 00:46:36,800
and i think that

1144
00:46:36,800 --> 00:46:38,960
there's no sensible way to choose these

1145
00:46:38,960 --> 00:46:40,400
things and it's going to make it

1146
00:46:40,400 --> 00:46:41,760
impossible to ever do

1147
00:46:41,760 --> 00:46:43,200
or ever know you have something that's

1148
00:46:43,200 --> 00:46:45,599
going to be fixed a constant time around

1149
00:46:45,599 --> 00:46:46,960
near it

1150
00:46:46,960 --> 00:46:48,800
and i think the only real use of this is

1151
00:46:48,800 --> 00:46:50,480
if there's pq

1152
00:46:50,480 --> 00:46:52,400
cams that have very large keys that we

1153
00:46:52,400 --> 00:46:54,319
don't have yet that we could figure out

1154
00:46:54,319 --> 00:46:55,040
later so i

1155
00:46:55,040 --> 00:46:56,960
i honestly think we'd be better off just

1156
00:46:56,960 --> 00:47:00,160
dropping this entire thing

1157
00:47:03,119 --> 00:47:06,240
that's just dropping the um

1158
00:47:06,240 --> 00:47:07,359
the outer extension compression

1159
00:47:07,359 --> 00:47:10,560
mechanism entirely yeah

1160
00:47:10,560 --> 00:47:12,960
great um i mean yeah it's a reasonable

1161
00:47:12,960 --> 00:47:14,800
proposal um i think we should just

1162
00:47:14,800 --> 00:47:16,800
uh it might be worth them to see where

1163
00:47:16,800 --> 00:47:25,839
people stand on that

1164
00:47:26,880 --> 00:47:29,280
i mean i'm sorry i was i wasn't

1165
00:47:29,280 --> 00:47:30,319
suggesting at home right now i think

1166
00:47:30,319 --> 00:47:31,599
that might be better to

1167
00:47:31,599 --> 00:47:34,400
see if the suggestion to simplify land

1168
00:47:34,400 --> 00:47:35,599
somewhere better

1169
00:47:35,599 --> 00:47:36,559
i don't think it will but i think at

1170
00:47:36,559 --> 00:47:38,720
that point it might make sense to say

1171
00:47:38,720 --> 00:47:41,520
keep it or drop it

1172
00:47:43,040 --> 00:47:46,800
thanks uh go ahead

1173
00:47:49,200 --> 00:47:52,079
if you want to discuss this now but uh

1174
00:47:52,079 --> 00:47:52,480
just

1175
00:47:52,480 --> 00:47:54,079
it doesn't seem necessary to me to just

1176
00:47:54,079 --> 00:47:55,839
throw out the outer extensions thing

1177
00:47:55,839 --> 00:47:58,319
completely

1178
00:48:00,800 --> 00:48:03,200
that's it

1179
00:48:03,839 --> 00:48:07,440
thanks um yeah i i i given the interest

1180
00:48:07,440 --> 00:48:07,920
of time

1181
00:48:07,920 --> 00:48:10,000
so yes we just take this to a list um

1182
00:48:10,000 --> 00:48:11,200
steven uh

1183
00:48:11,200 --> 00:48:12,480
would you mind just spinning up like a

1184
00:48:12,480 --> 00:48:14,000
new thread specifically for this issue

1185
00:48:14,000 --> 00:48:14,960
on

1186
00:48:14,960 --> 00:48:16,960
uh proposing dropping this just so we

1187
00:48:16,960 --> 00:48:19,280
can track that outside of the the longer

1188
00:48:19,280 --> 00:48:21,839
thread that you have

1189
00:48:27,119 --> 00:48:30,880
yeah sure excellent thanks um

1190
00:48:30,880 --> 00:48:33,520
all right uh so i guess then for this

1191
00:48:33,520 --> 00:48:34,000
particular

1192
00:48:34,000 --> 00:48:36,240
issue uh while we sort out the you know

1193
00:48:36,240 --> 00:48:37,599
whether or not this thing should exist

1194
00:48:37,599 --> 00:48:38,079
at all

1195
00:48:38,079 --> 00:48:41,440
um uh we can uh just make sure we note

1196
00:48:41,440 --> 00:48:43,599
uh the other vectors that exist um and

1197
00:48:43,599 --> 00:48:46,880
then close this one accordingly

1198
00:48:47,200 --> 00:48:50,720
uh okay um so the the last one

1199
00:48:50,720 --> 00:48:52,400
uh not for review just pinning it here

1200
00:48:52,400 --> 00:48:53,760
for people to look at um

1201
00:48:53,760 --> 00:48:57,359
this is the the whopper the hr issue um

1202
00:48:57,359 --> 00:49:00,319
we don't yet have a pr up for review um

1203
00:49:00,319 --> 00:49:02,400
but if you go forward to the next slide

1204
00:49:02,400 --> 00:49:06,240
um what i would like to do

1205
00:49:06,240 --> 00:49:09,599
uh is um start meeting

1206
00:49:09,599 --> 00:49:11,599
a bit more regularly uh with regular

1207
00:49:11,599 --> 00:49:14,079
interims specifically for ech between

1208
00:49:14,079 --> 00:49:17,760
uh now and 111 um with the uh primary

1209
00:49:17,760 --> 00:49:18,079
with

1210
00:49:18,079 --> 00:49:19,599
primarily with the the sole purpose of

1211
00:49:19,599 --> 00:49:21,280
resolving the hr issue

1212
00:49:21,280 --> 00:49:23,359
um and getting sort of the spec feature

1213
00:49:23,359 --> 00:49:24,319
complete

1214
00:49:24,319 --> 00:49:27,280
um and then potentially trying to uh you

1215
00:49:27,280 --> 00:49:27,520
know

1216
00:49:27,520 --> 00:49:29,599
get rid of any uh necessary complexity

1217
00:49:29,599 --> 00:49:31,680
if we have it

1218
00:49:31,680 --> 00:49:34,160
so i i don't have a i guess a preference

1219
00:49:34,160 --> 00:49:35,119
in terms of

1220
00:49:35,119 --> 00:49:37,200
cadence biweekly seems pretty reasonable

1221
00:49:37,200 --> 00:49:38,160
to me um

1222
00:49:38,160 --> 00:49:40,640
every other week that is so what i would

1223
00:49:40,640 --> 00:49:42,160
recommend or propose we do

1224
00:49:42,160 --> 00:49:44,319
uh just send out a dutiful to arrange a

1225
00:49:44,319 --> 00:49:46,800
time for this uh meeting to take place

1226
00:49:46,800 --> 00:49:48,160
and then people who are available and

1227
00:49:48,160 --> 00:49:51,440
interested can uh jump in and

1228
00:49:51,440 --> 00:49:52,800
we can drive these issues into the

1229
00:49:52,800 --> 00:49:54,640
ground

1230
00:49:54,640 --> 00:49:59,839
what do you folks think

1231
00:50:02,480 --> 00:50:04,640
great stephen i mean i think i think

1232
00:50:04,640 --> 00:50:05,839
it's the only way we're gonna get this

1233
00:50:05,839 --> 00:50:08,079
done so i think uh

1234
00:50:08,079 --> 00:50:12,559
um it is what it is

1235
00:50:12,559 --> 00:50:14,240
sounds good so uh let's set up the duty

1236
00:50:14,240 --> 00:50:16,160
poll then um to get that going and then

1237
00:50:16,160 --> 00:50:16,720
we can

1238
00:50:16,720 --> 00:50:19,200
um we can uh hopefully kick off the

1239
00:50:19,200 --> 00:50:22,400
first meeting uh shortly thereafter

1240
00:50:22,400 --> 00:50:27,839
um how much time do we left by the way

1241
00:50:27,920 --> 00:50:31,280
five-ish stats okay uh stephen then i'll

1242
00:50:31,280 --> 00:50:32,880
i'll just turn it over to you um if you

1243
00:50:32,880 --> 00:50:33,440
want to

1244
00:50:33,440 --> 00:50:36,800
talk about the issues great thanks

1245
00:50:36,800 --> 00:50:38,960
thanks for taking the time so i i put in

1246
00:50:38,960 --> 00:50:40,880
a in the chat room i put in a link to

1247
00:50:40,880 --> 00:50:42,319
the mail i'd sent to the list

1248
00:50:42,319 --> 00:50:45,200
and i think the best thing to do with

1249
00:50:45,200 --> 00:50:46,559
their time available is just go through

1250
00:50:46,559 --> 00:50:48,160
them in kind of reverse order from the

1251
00:50:48,160 --> 00:50:49,599
second last one because those are kind

1252
00:50:49,599 --> 00:50:51,040
of quickest towards

1253
00:50:51,040 --> 00:50:52,880
longest and hopefully we might get some

1254
00:50:52,880 --> 00:50:54,880
of the quickest so the quickest one is

1255
00:50:54,880 --> 00:50:58,000
the current text requires the outer sni

1256
00:50:58,000 --> 00:51:00,480
to be the public name and has a must

1257
00:51:00,480 --> 00:51:02,480
i don't think that's a good idea because

1258
00:51:02,480 --> 00:51:04,000
i have other use cases for

1259
00:51:04,000 --> 00:51:05,440
command line tools so i want to do

1260
00:51:05,440 --> 00:51:06,880
something else and it doesn't seem

1261
00:51:06,880 --> 00:51:07,520
necessary

1262
00:51:07,520 --> 00:51:09,839
so

1263
00:51:10,800 --> 00:51:12,640
i raised this a couple of times and i

1264
00:51:12,640 --> 00:51:14,400
don't believe it's

1265
00:51:14,400 --> 00:51:18,800
gotten discussion so

1266
00:51:21,440 --> 00:51:22,400
so if you're scrolling down to the

1267
00:51:22,400 --> 00:51:26,559
bottom of that mail it's it's uh

1268
00:51:27,839 --> 00:51:30,319
for joe

1269
00:51:32,000 --> 00:51:33,760
so i i don't have to tell you but the

1270
00:51:33,760 --> 00:51:35,280
must is there to

1271
00:51:35,280 --> 00:51:38,400
support the fallback mechanism um

1272
00:51:38,400 --> 00:51:41,839
and without the the

1273
00:51:41,839 --> 00:51:43,200
that name and the s the fallback

1274
00:51:43,200 --> 00:51:45,440
mechanism doesn't work uh

1275
00:51:45,440 --> 00:51:47,440
i think it's totally reasonable to

1276
00:51:47,440 --> 00:51:49,359
imagine there might be sort of specialty

1277
00:51:49,359 --> 00:51:50,960
specialty use cases where you don't need

1278
00:51:50,960 --> 00:51:52,640
the fallback and therefore you don't

1279
00:51:52,640 --> 00:51:56,000
aren't subject to this requirement

1280
00:51:56,160 --> 00:51:58,319
so i think we can probably come up with

1281
00:51:58,319 --> 00:52:00,160
a phrasing

1282
00:52:00,160 --> 00:52:03,440
i view this similarly to the tl at 1.3

1283
00:52:03,440 --> 00:52:06,960
yeah sni must like similarly tls 1.3

1284
00:52:06,960 --> 00:52:08,319
says you must include

1285
00:52:08,319 --> 00:52:10,480
the sni but actually there are cases

1286
00:52:10,480 --> 00:52:11,760
where it doesn't make sense so you

1287
00:52:11,760 --> 00:52:14,480
just don't do it

1288
00:52:16,839 --> 00:52:19,920
david this is a quick clarification

1289
00:52:19,920 --> 00:52:22,160
are you are are you saying are you

1290
00:52:22,160 --> 00:52:23,359
talking about the

1291
00:52:23,359 --> 00:52:25,599
client's muscle requirement include the

1292
00:52:25,599 --> 00:52:26,400
public name

1293
00:52:26,400 --> 00:52:28,240
or the ser or a server requirement to

1294
00:52:28,240 --> 00:52:29,599
check the public name

1295
00:52:29,599 --> 00:52:30,640
because it sounded like you were talking

1296
00:52:30,640 --> 00:52:32,880
about the client which does have a must

1297
00:52:32,880 --> 00:52:34,880
but the server i don't think there is

1298
00:52:34,880 --> 00:52:37,040
such a check there is such a requirement

1299
00:52:37,040 --> 00:52:39,359
right now

1300
00:52:40,319 --> 00:52:42,240
uh i'd have to go i'd have to open i'd

1301
00:52:42,240 --> 00:52:43,599
have to open this back again to look but

1302
00:52:43,599 --> 00:52:45,440
uh i i just think the restriction isn't

1303
00:52:45,440 --> 00:52:46,000
needed

1304
00:52:46,000 --> 00:52:47,839
um i don't plan on implementing it on

1305
00:52:47,839 --> 00:52:50,160
the client or the server

1306
00:52:50,160 --> 00:52:51,920
because the the the reason that i think

1307
00:52:51,920 --> 00:52:53,680
i was a little i was confused on your

1308
00:52:53,680 --> 00:52:55,040
email thread because the email seems to

1309
00:52:55,040 --> 00:53:01,839
read like it's the server side

1310
00:53:05,119 --> 00:53:08,559
okay um so

1311
00:53:08,559 --> 00:53:10,559
uh thanks to ben for reminding us why

1312
00:53:10,559 --> 00:53:11,760
the bus is there um

1313
00:53:11,760 --> 00:53:13,760
i i don't see any way to get around

1314
00:53:13,760 --> 00:53:15,040
having the mustard if you want

1315
00:53:15,040 --> 00:53:15,920
interoperability

1316
00:53:15,920 --> 00:53:18,960
um for the client to send it um

1317
00:53:18,960 --> 00:53:22,160
uh um you know uh if people if

1318
00:53:22,160 --> 00:53:25,440
steven wants to suggest um uh uh

1319
00:53:25,440 --> 00:53:26,880
you know some language that would like

1320
00:53:26,880 --> 00:53:28,240
cut out for people who have reasons not

1321
00:53:28,240 --> 00:53:29,839
to do it um i suppose one could imagine

1322
00:53:29,839 --> 00:53:30,319
doing that

1323
00:53:30,319 --> 00:53:31,599
um as long as it clears that's what the

1324
00:53:31,599 --> 00:53:33,680
consequences are um

1325
00:53:33,680 --> 00:53:36,559
you know uh sounds like nobody thinks we

1326
00:53:36,559 --> 00:53:37,680
need the must check

1327
00:53:37,680 --> 00:53:39,520
um and if people may think it's not

1328
00:53:39,520 --> 00:53:40,880
there so perhaps if it's there someone

1329
00:53:40,880 --> 00:53:42,800
could if even if you think it's the air

1330
00:53:42,800 --> 00:53:44,000
pressure you could file appear to remove

1331
00:53:44,000 --> 00:53:44,400
it

1332
00:53:44,400 --> 00:53:47,680
um uh

1333
00:53:47,680 --> 00:53:51,920
um yeah um also i i guess i i i'm not

1334
00:53:51,920 --> 00:53:53,200
particularly moved by you know quite

1335
00:53:53,200 --> 00:53:54,480
nipple that um you could be feel free to

1336
00:53:54,480 --> 00:53:57,520
be done

1337
00:53:57,520 --> 00:53:59,839
but that hence raising it i think it's

1338
00:53:59,839 --> 00:54:00,559
better if it

1339
00:54:00,559 --> 00:54:04,720
was conformed sure but i think uh

1340
00:54:04,720 --> 00:54:06,880
i understand um but there are reasons

1341
00:54:06,880 --> 00:54:10,640
for it to be there

1342
00:54:10,640 --> 00:54:12,880
in the interest of time um stephen i i

1343
00:54:12,880 --> 00:54:14,160
just did a quick look through the dock

1344
00:54:14,160 --> 00:54:15,920
and i can't find it on the server side

1345
00:54:15,920 --> 00:54:18,400
uh i can't find the server side bust um

1346
00:54:18,400 --> 00:54:19,520
but i recommend

1347
00:54:19,520 --> 00:54:22,559
is just a violent issue uh pointing to

1348
00:54:22,559 --> 00:54:23,920
the text that you think is problematic

1349
00:54:23,920 --> 00:54:25,280
and then we discuss it there

1350
00:54:25,280 --> 00:54:27,920
but that's okay

1351
00:54:29,040 --> 00:54:32,720
sure okay just to give you that

1352
00:54:32,720 --> 00:54:34,160
i think the other topic that's maybe

1353
00:54:34,160 --> 00:54:35,359
worth just spending a minute on what we

1354
00:54:35,359 --> 00:54:36,319
have everybody is

1355
00:54:36,319 --> 00:54:38,799
uh this is just too complex and i i

1356
00:54:38,799 --> 00:54:40,960
would i'd love to get us to agree that

1357
00:54:40,960 --> 00:54:43,839
our goal is to make it simpler because i

1358
00:54:43,839 --> 00:54:45,040
in in

1359
00:54:45,040 --> 00:54:46,079
what i've seen from the github

1360
00:54:46,079 --> 00:54:47,440
discussion it tends towards more

1361
00:54:47,440 --> 00:54:48,720
complexity

1362
00:54:48,720 --> 00:54:51,520
and no apparent focus on trying to make

1363
00:54:51,520 --> 00:54:52,400
it simpler

1364
00:54:52,400 --> 00:54:55,440
that may be just perception

1365
00:54:58,160 --> 00:54:59,680
uh i mean i can't speak for everyone

1366
00:54:59,680 --> 00:55:01,280
else um uh

1367
00:55:01,280 --> 00:55:03,839
but in working on this it's been a

1368
00:55:03,839 --> 00:55:05,280
distinct design goal to not make this

1369
00:55:05,280 --> 00:55:06,960
thing more complex than it needs to be

1370
00:55:06,960 --> 00:55:11,040
um so i i i don't know

1371
00:55:11,040 --> 00:55:13,280
to say much more beyond that i think

1372
00:55:13,280 --> 00:55:14,400
that's true of all the work we do in the

1373
00:55:14,400 --> 00:55:16,720
idea

1374
00:55:19,839 --> 00:55:21,200
i guess i'm the only person in the queue

1375
00:55:21,200 --> 00:55:23,200
um yes i also think it should be simpler

1376
00:55:23,200 --> 00:55:24,480
and i'm interested in concrete puzzles

1377
00:55:24,480 --> 00:55:25,520
to make it simpler

1378
00:55:25,520 --> 00:55:28,640
um uh like certainly

1379
00:55:28,640 --> 00:55:31,200
we did attempt to do so um um and i

1380
00:55:31,200 --> 00:55:32,160
recognize that things got more

1381
00:55:32,160 --> 00:55:32,960
complicated i think

1382
00:55:32,960 --> 00:55:34,960
i think in some respects the use of ech

1383
00:55:34,960 --> 00:55:36,720
rather than esli was attempt to

1384
00:55:36,720 --> 00:55:38,480
roll up a bunch of pieces of complexity

1385
00:55:38,480 --> 00:55:39,760
which it kind of crept in to make yes

1386
00:55:39,760 --> 00:55:40,559
and i work

1387
00:55:40,559 --> 00:55:43,599
um the door it needed to be ch um so uh

1388
00:55:43,599 --> 00:55:46,559
but uh but i think the highest priority

1389
00:55:46,559 --> 00:55:47,280
is at work

1390
00:55:47,280 --> 00:55:49,359
and do what it's supposed to do so um so

1391
00:55:49,359 --> 00:55:51,200
i i'll be interested in brussels if

1392
00:55:51,200 --> 00:55:52,240
it's important consistent with

1393
00:55:52,240 --> 00:55:54,319
continuing to work

1394
00:55:54,319 --> 00:55:55,920
yeah so i mean i think if you know again

1395
00:55:55,920 --> 00:55:57,520
given time we're kind of out of time but

1396
00:55:57,520 --> 00:55:58,319
if

1397
00:55:58,319 --> 00:55:59,760
if these interim meetings have a focus

1398
00:55:59,760 --> 00:56:01,760
on trying to keep it simple or make it

1399
00:56:01,760 --> 00:56:02,480
simpler

1400
00:56:02,480 --> 00:56:04,880
that i think would be good and i think

1401
00:56:04,880 --> 00:56:05,760
it's too easy to

1402
00:56:05,760 --> 00:56:07,680
with hr particularly to try and end up

1403
00:56:07,680 --> 00:56:10,879
with something that's more complex i

1404
00:56:14,839 --> 00:56:17,839
think

1405
00:56:22,880 --> 00:56:23,839
i guess if we're going to have intro

1406
00:56:23,839 --> 00:56:26,160
meetings we can i'll try and get those

1407
00:56:26,160 --> 00:56:28,640
onto those agendas rather than

1408
00:56:28,640 --> 00:56:29,760
well i don't think there's other ones

1409
00:56:29,760 --> 00:56:31,520
that will benefit from lots of people

1410
00:56:31,520 --> 00:56:32,799
that we have in the room here and

1411
00:56:32,799 --> 00:56:36,319
consume everybody's time so information

1412
00:56:36,319 --> 00:56:37,839
please file issues for these so we can

1413
00:56:37,839 --> 00:56:40,160
track the discussion there

1414
00:56:40,160 --> 00:56:41,359
please track the discussion on the

1415
00:56:41,359 --> 00:56:45,119
mailing list as well

1416
00:56:45,119 --> 00:56:46,480
but that's we don't need to talk about

1417
00:56:46,480 --> 00:56:47,680
that we're just been in the chat room

1418
00:56:47,680 --> 00:56:50,000
already

1419
00:56:57,359 --> 00:57:00,720
okay so i think uh are we

1420
00:57:00,720 --> 00:57:05,040
wrapping up uh aph now

1421
00:57:06,400 --> 00:57:09,040
uh we'll send out uh jabber or sorry not

1422
00:57:09,040 --> 00:57:09,440
java

1423
00:57:09,440 --> 00:57:12,559
definitely not a shopper um a doodle uh

1424
00:57:12,559 --> 00:57:14,240
poll so we can schedule the first

1425
00:57:14,240 --> 00:57:17,200
interrupt meeting and go from there

1426
00:57:19,520 --> 00:57:22,720
cool that sounds good all right then

1427
00:57:22,720 --> 00:57:25,119
moving on to our c8446

1428
00:57:25,119 --> 00:57:29,680
bits uh ecker you are up

1429
00:57:38,160 --> 00:57:39,200
i can't figure out how to tell how to

1430
00:57:39,200 --> 00:57:41,599
tell which camera it wants so i guess

1431
00:57:41,599 --> 00:57:42,960
you will not have a video

1432
00:57:42,960 --> 00:57:47,040
um uh okay um

1433
00:57:47,040 --> 00:57:50,319
so uh right um

1434
00:57:50,319 --> 00:57:53,760
as people know um uh a46 bits is just a

1435
00:57:53,760 --> 00:57:54,799
minor revision

1436
00:57:54,799 --> 00:57:58,319
to uh um uh j446 um

1437
00:57:58,319 --> 00:58:00,400
focused on cleaning up some ambiguity

1438
00:58:00,400 --> 00:58:02,079
and also turning towards more inclusive

1439
00:58:02,079 --> 00:58:02,880
language

1440
00:58:02,880 --> 00:58:05,760
uh next slide

1441
00:58:06,160 --> 00:58:09,520
um so i think uh i'll i'll i'll get the

1442
00:58:09,520 --> 00:58:10,640
uh

1443
00:58:10,640 --> 00:58:14,880
um i'll i'll get to the the uh

1444
00:58:14,880 --> 00:58:17,520
end of this first um so hopefully we can

1445
00:58:17,520 --> 00:58:18,799
close these issues and any other

1446
00:58:18,799 --> 00:58:19,599
editorial

1447
00:58:19,599 --> 00:58:22,799
ambiguous type stuff um then do

1448
00:58:22,799 --> 00:58:24,480
issue some kind of call for remaining

1449
00:58:24,480 --> 00:58:25,920
issues um to make sure we capture the

1450
00:58:25,920 --> 00:58:26,960
ball because i want to do

1451
00:58:26,960 --> 00:58:30,079
you know 80 40 84 46 business um

1452
00:58:30,079 --> 00:58:31,280
and then i'll issue a new draft and

1453
00:58:31,280 --> 00:58:33,359
maybe do a working class call um i i do

1454
00:58:33,359 --> 00:58:34,319
think we probably should do

1455
00:58:34,319 --> 00:58:35,760
the final call for meeting issues before

1456
00:58:35,760 --> 00:58:36,880
you do working class classes i'm sure

1457
00:58:36,880 --> 00:58:38,000
we'll flesh out a

1458
00:58:38,000 --> 00:58:41,680
a few um next slide

1459
00:58:44,480 --> 00:58:48,079
um so okay um so uh the first issue is

1460
00:58:48,079 --> 00:58:49,599
issue 1214

1461
00:58:49,599 --> 00:58:52,720
um uh for the defining one home

1462
00:58:52,720 --> 00:58:54,880
um this is about recommended versus not

1463
00:58:54,880 --> 00:58:57,119
recommended so as people may recall

1464
00:58:57,119 --> 00:58:59,599
um when we initially designed the

1465
00:58:59,599 --> 00:59:00,559
registry scheme

1466
00:59:00,559 --> 00:59:02,240
that we have for one three with the new

1467
00:59:02,240 --> 00:59:04,160
registry documents what we

1468
00:59:04,160 --> 00:59:06,400
were trying to do was deal with the fact

1469
00:59:06,400 --> 00:59:07,280
that a lot of people

1470
00:59:07,280 --> 00:59:10,559
wanted to um register cypher suites

1471
00:59:10,559 --> 00:59:13,599
that we didn't want to review

1472
00:59:13,599 --> 00:59:15,359
and that might be bad or might be good

1473
00:59:15,359 --> 00:59:16,799
and we didn't want to have the tls

1474
00:59:16,799 --> 00:59:17,839
working group have to spend a lot of

1475
00:59:17,839 --> 00:59:19,839
time or the experts reviewing the code

1476
00:59:19,839 --> 00:59:20,480
points for

1477
00:59:20,480 --> 00:59:23,520
quality so what we did was we basically

1478
00:59:23,520 --> 00:59:25,520
opened the registers way up but then had

1479
00:59:25,520 --> 00:59:26,799
a thing where you recommend we had

1480
00:59:26,799 --> 00:59:28,319
recommended in a non-recommended column

1481
00:59:28,319 --> 00:59:29,760
and recommended basically meant

1482
00:59:29,760 --> 00:59:31,280
hey this is standard track and b we

1483
00:59:31,280 --> 00:59:32,400
think it's a good idea and not

1484
00:59:32,400 --> 00:59:33,440
recommended meant

1485
00:59:33,440 --> 00:59:36,319
anything other than those and what we're

1486
00:59:36,319 --> 00:59:37,599
finding is that that actually doesn't

1487
00:59:37,599 --> 00:59:38,960
work as well as we're hoping

1488
00:59:38,960 --> 00:59:41,359
in a specific respect which is two

1489
00:59:41,359 --> 00:59:42,720
specific perspectives

1490
00:59:42,720 --> 00:59:44,880
one is that the things we actually

1491
00:59:44,880 --> 00:59:46,240
actually want to disrecommend that we

1492
00:59:46,240 --> 00:59:47,440
still want a lot of people registered

1493
00:59:47,440 --> 00:59:48,559
because we don't think that having

1494
00:59:48,559 --> 00:59:50,319
coconut registration as a gateway

1495
00:59:50,319 --> 00:59:52,160
to not doing things we don't like is a

1496
00:59:52,160 --> 00:59:54,000
good idea and the second is or sometimes

1497
00:59:54,000 --> 00:59:55,119
when those recommendations or

1498
00:59:55,119 --> 00:59:56,720
non-recommendations be nuanced

1499
00:59:56,720 --> 00:59:59,839
so for instance um uh i think people are

1500
00:59:59,839 --> 01:00:00,480
comfortable

1501
01:00:00,480 --> 01:00:03,599
with um uh

1502
01:00:03,599 --> 01:00:04,799
ben yeah i think i thought that already

1503
01:00:04,799 --> 01:00:08,240
uh yes ben that should happen um

1504
01:00:08,240 --> 01:00:12,079
so um uh

1505
01:00:12,079 --> 01:00:13,839
i i i think it already did but man i

1506
01:00:13,839 --> 01:00:15,440
forgot to write it down um

1507
01:00:15,440 --> 01:00:18,400
so uh the um and also their cases like

1508
01:00:18,400 --> 01:00:20,079
as with ccm8 where maybe it's okay in

1509
01:00:20,079 --> 01:00:21,839
some circumstances but not others

1510
01:00:21,839 --> 01:00:24,240
so um my proposal is to have four

1511
01:00:24,240 --> 01:00:25,119
categories

1512
01:00:25,119 --> 01:00:28,319
not two um there's recommended which is

1513
01:00:28,319 --> 01:00:30,559
what it currently means um conditionally

1514
01:00:30,559 --> 01:00:32,640
recommended is the same as recommended

1515
01:00:32,640 --> 01:00:34,079
um except that it's good for someone

1516
01:00:34,079 --> 01:00:35,839
almost some limited scope so

1517
01:00:35,839 --> 01:00:40,240
um so like oh you know a asgcm246 would

1518
01:00:40,240 --> 01:00:41,520
charge six would be continually

1519
01:00:41,520 --> 01:00:43,760
recommended for instance um and so like

1520
01:00:43,760 --> 01:00:45,520
ccm8 maybe will be conditionally

1521
01:00:45,520 --> 01:00:46,880
recommended that we say it's not good

1522
01:00:46,880 --> 01:00:48,160
for generally for like the web but if

1523
01:00:48,160 --> 01:00:48,960
the iot and

1524
01:00:48,960 --> 01:00:50,880
a lot of data around then it's um then

1525
01:00:50,880 --> 01:00:52,079
it's conditionally recommended and you

1526
01:00:52,079 --> 01:00:52,880
have to explain

1527
01:00:52,880 --> 01:00:56,799
in that what that meant um

1528
01:00:56,799 --> 01:00:58,000
dkg asked how it's supposed to be

1529
01:00:58,000 --> 01:00:59,119
annotated i was hoping we'd have a

1530
01:00:59,119 --> 01:01:00,480
column in the uh

1531
01:01:00,480 --> 01:01:03,680
uh in the iana registry um the um

1532
01:01:03,680 --> 01:01:06,720
not recommended we mean um uh

1533
01:01:06,720 --> 01:01:08,240
uh what it currently means and we have

1534
01:01:08,240 --> 01:01:10,480
no opinion on this um and discourage

1535
01:01:10,480 --> 01:01:12,079
your being i think it's actively bad

1536
01:01:12,079 --> 01:01:13,599
and like you shouldn't do it um but

1537
01:01:13,599 --> 01:01:14,799
we're just letting the coping register

1538
01:01:14,799 --> 01:01:16,319
an example that would be these uh

1539
01:01:16,319 --> 01:01:18,000
authentication only said for suites

1540
01:01:18,000 --> 01:01:20,799
um uh which you know don't currently

1541
01:01:20,799 --> 01:01:22,160
meet the tls

1542
01:01:22,160 --> 01:01:24,640
security guarantees um my proposal would

1543
01:01:24,640 --> 01:01:26,160
be so obviously recommending condition

1544
01:01:26,160 --> 01:01:27,440
recommended continue to require working

1545
01:01:27,440 --> 01:01:28,240
group support

1546
01:01:28,240 --> 01:01:31,359
but that we'd allow um we'd allow

1547
01:01:31,359 --> 01:01:33,119
uh the experts to decide between not

1548
01:01:33,119 --> 01:01:34,559
recommended and discouraged

1549
01:01:34,559 --> 01:01:37,680
and allow them to put the um registry uh

1550
01:01:37,680 --> 01:01:38,240
the the

1551
01:01:38,240 --> 01:01:41,839
external uh sorry i'm reading uh

1552
01:01:41,839 --> 01:01:44,000
dkg's uh comments as well i'm getting

1553
01:01:44,000 --> 01:01:45,440
confused um

1554
01:01:45,440 --> 01:01:47,520
uh we'd allow them to indicate what the

1555
01:01:47,520 --> 01:01:49,680
reason why something was discouraged was

1556
01:01:49,680 --> 01:01:53,280
um i think there's some question um

1557
01:01:53,280 --> 01:01:56,319
uh about exactly how what ayanna would

1558
01:01:56,319 --> 01:01:57,839
be willing to put in these columns

1559
01:01:57,839 --> 01:01:59,680
and what um and i'm not quite sure about

1560
01:01:59,680 --> 01:02:01,520
that but i'm sure we could sort that out

1561
01:02:01,520 --> 01:02:05,200
with um ayanna um i'm also happy by the

1562
01:02:05,200 --> 01:02:06,480
way people seem to be not not thrilled

1563
01:02:06,480 --> 01:02:07,839
about recommended perhaps that maybe we

1564
01:02:07,839 --> 01:02:09,200
want to change recommend not recommended

1565
01:02:09,200 --> 01:02:10,240
to me something else so i'm not quite

1566
01:02:10,240 --> 01:02:11,359
sure what that would mean

1567
01:02:11,359 --> 01:02:15,039
um uh no opinion maybe um anyway

1568
01:02:15,039 --> 01:02:16,720
um but i think i think these four levels

1569
01:02:16,720 --> 01:02:18,480
are probably the right four levels

1570
01:02:18,480 --> 01:02:20,480
um so maybe people can give us opinions

1571
01:02:20,480 --> 01:02:22,000
of whether those four levels are

1572
01:02:22,000 --> 01:02:23,920
are right and then we can discuss the

1573
01:02:23,920 --> 01:02:35,839
names we use for them

1574
01:02:42,319 --> 01:02:45,839
um a couple a couple points here on

1575
01:02:45,839 --> 01:02:47,280
this if you were using the chat do you

1576
01:02:47,280 --> 01:02:50,240
want to raise them verbally

1577
01:02:51,200 --> 01:02:52,559
or shall i just respond to them in the

1578
01:02:52,559 --> 01:02:55,200
chat in real time

1579
01:02:55,200 --> 01:02:57,520
no this is dkg i really in the chat

1580
01:02:57,520 --> 01:02:59,280
people are proposing no opinion i think

1581
01:02:59,280 --> 01:03:00,240
that's a mistake

1582
01:03:00,240 --> 01:03:02,160
uh this working group has at least as

1583
01:03:02,160 --> 01:03:04,480
many opinions that has speakers

1584
01:03:04,480 --> 01:03:08,160
um uh maybe even as many or more as it

1585
01:03:08,160 --> 01:03:09,599
has participants

1586
01:03:09,599 --> 01:03:12,640
and uh often you know we're gonna

1587
01:03:12,640 --> 01:03:14,319
stalemate on some of these discussions

1588
01:03:14,319 --> 01:03:14,640
and

1589
01:03:14,640 --> 01:03:17,039
and land back in that in that spot

1590
01:03:17,039 --> 01:03:19,440
saying no opinion makes it sound like

1591
01:03:19,440 --> 01:03:22,160
um whatever you can use it if you want

1592
01:03:22,160 --> 01:03:22,640
to

1593
01:03:22,640 --> 01:03:24,079
and i think we do want to really make

1594
01:03:24,079 --> 01:03:26,319
sure that recommended retains the

1595
01:03:26,319 --> 01:03:28,160
private place of saying this is fully

1596
01:03:28,160 --> 01:03:30,400
endorsed by the working group so no

1597
01:03:30,400 --> 01:03:33,119
endorsement maybe

1598
01:03:33,119 --> 01:03:44,000
i'd be fine with that

1599
01:03:44,000 --> 01:03:46,640
i jump in next then uh okay um it's

1600
01:03:46,640 --> 01:03:47,599
discouraged

1601
01:03:47,599 --> 01:03:50,319
strong enough uh a word uh for something

1602
01:03:50,319 --> 01:03:50,640
that

1603
01:03:50,640 --> 01:03:53,760
uh to read from your side uh is known

1604
01:03:53,760 --> 01:03:55,119
not to provide the

1605
01:03:55,119 --> 01:03:59,680
rated tls 1.3 security guarantees

1606
01:03:59,680 --> 01:04:01,440
i'm open to i just picked that word more

1607
01:04:01,440 --> 01:04:02,640
or less out of the air i'm totally open

1608
01:04:02,640 --> 01:04:05,279
to some other word

1609
01:04:05,520 --> 01:04:08,640
i just don't have one okay

1610
01:04:08,640 --> 01:04:10,079
but maybe something to put in the list

1611
01:04:10,079 --> 01:04:13,839
afterwards then

1612
01:04:14,160 --> 01:04:15,359
i don't know if i'm running a cure you

1613
01:04:15,359 --> 01:04:18,400
are chairs daniel

1614
01:04:22,559 --> 01:04:25,599
can you hear me yes okay

1615
01:04:25,599 --> 01:04:29,039
so uh two things um

1616
01:04:29,039 --> 01:04:31,839
the first thing is um i see that the

1617
01:04:31,839 --> 01:04:32,799
recommended

1618
01:04:32,799 --> 01:04:35,839
um term might be misleading

1619
01:04:35,839 --> 01:04:38,079
so it might be good to rethink that term

1620
01:04:38,079 --> 01:04:39,920
um i have no

1621
01:04:39,920 --> 01:04:42,880
i don't know i don't have any proposed

1622
01:04:42,880 --> 01:04:44,640
proposals for that

1623
01:04:44,640 --> 01:04:46,799
um and the second one if we had

1624
01:04:46,799 --> 01:04:48,799
different categories um

1625
01:04:48,799 --> 01:04:52,240
i i i think i am i agree with dkg saying

1626
01:04:52,240 --> 01:04:52,640
that

1627
01:04:52,640 --> 01:04:54,720
it might put the working group into a

1628
01:04:54,720 --> 01:04:56,160
position that is

1629
01:04:56,160 --> 01:05:00,000
going to put a judgment on

1630
01:05:00,000 --> 01:05:03,039
any extension or stuff assets which

1631
01:05:03,039 --> 01:05:04,079
might be

1632
01:05:04,079 --> 01:05:08,799
difficult so i'm questioning how it's

1633
01:05:08,799 --> 01:05:12,000
visible so that's my camera what we

1634
01:05:12,000 --> 01:05:13,200
already have for anything we've

1635
01:05:13,200 --> 01:05:14,400
recommended in it we already have to

1636
01:05:14,400 --> 01:05:15,520
make a judgment because we just because

1637
01:05:15,520 --> 01:05:17,200
it has to be standard track

1638
01:05:17,200 --> 01:05:19,440
and so uh i guess i figure once or

1639
01:05:19,440 --> 01:05:20,400
bother and make a standard

1640
01:05:20,400 --> 01:05:21,599
judgment we can probably decide whether

1641
01:05:21,599 --> 01:05:24,079
applicability as well

1642
01:05:24,079 --> 01:05:27,680
so to just jump in real quick as ad

1643
01:05:27,680 --> 01:05:31,200
uh the ayana experts have to be involved

1644
01:05:31,200 --> 01:05:33,760
in like any code point allocation and so

1645
01:05:33,760 --> 01:05:35,200
what we would be doing here

1646
01:05:35,200 --> 01:05:38,240
is to be writing rules about like

1647
01:05:38,240 --> 01:05:40,480
which code points the experts can

1648
01:05:40,480 --> 01:05:41,599
approve for what

1649
01:05:41,599 --> 01:05:43,119
and if there's like some state

1650
01:05:43,119 --> 01:05:46,720
transition that we would have to

1651
01:05:46,720 --> 01:05:48,640
come to the working group and do that

1652
01:05:48,640 --> 01:05:50,640
but i think we need to be able to write

1653
01:05:50,640 --> 01:05:51,200
something

1654
01:05:51,200 --> 01:05:54,160
that the experts can just do their thing

1655
01:05:54,160 --> 01:05:55,359
and we don't have to

1656
01:05:55,359 --> 01:05:57,839
put the working group in the critical

1657
01:05:57,839 --> 01:06:00,400
path for every allocation

1658
01:06:00,400 --> 01:06:03,440
but i thought that um the ian experts

1659
01:06:03,440 --> 01:06:04,480
were not involved in the working

1660
01:06:04,480 --> 01:06:06,880
development

1661
01:06:07,760 --> 01:06:11,359
uh yeah i mean if i'm coming at this

1662
01:06:11,359 --> 01:06:12,559
from the lines of things that are going

1663
01:06:12,559 --> 01:06:13,119
to get

1664
01:06:13,119 --> 01:06:16,240
like discouraged on them

1665
01:06:16,240 --> 01:06:18,799
right like so right my proposal was we

1666
01:06:18,799 --> 01:06:19,839
would give the work

1667
01:06:19,839 --> 01:06:21,599
expert some guidance we would trust them

1668
01:06:21,599 --> 01:06:22,960
and if people invite people

1669
01:06:22,960 --> 01:06:24,640
in like discouraged they could complain

1670
01:06:24,640 --> 01:06:27,759
to the working group and

1671
01:06:30,839 --> 01:06:33,839
um

1672
01:06:44,839 --> 01:06:47,839
rich

1673
01:06:47,839 --> 01:06:51,839
so yeah as one of the experts

1674
01:06:51,839 --> 01:06:55,119
um we're designated uh

1675
01:06:55,119 --> 01:06:58,319
the um i think the

1676
01:06:58,319 --> 01:07:00,880
the above the line and below the line in

1677
01:07:00,880 --> 01:07:02,319
terms of working group and non-working

1678
01:07:02,319 --> 01:07:04,559
group involvement makes a lot of sense

1679
01:07:04,559 --> 01:07:07,920
um i noticed i know that

1680
01:07:07,920 --> 01:07:10,799
generally we have deferred to cfrg when

1681
01:07:10,799 --> 01:07:11,680
we were looking for

1682
01:07:11,680 --> 01:07:14,160
algorithms so presumably the working

1683
01:07:14,160 --> 01:07:16,240
group would also want to still do that

1684
01:07:16,240 --> 01:07:19,680
um and i'm guessing that

1685
01:07:19,680 --> 01:07:22,319
the where it says at the bottom known to

1686
01:07:22,319 --> 01:07:23,359
not provide the

1687
01:07:23,359 --> 01:07:27,039
the rated tls-130 security

1688
01:07:27,039 --> 01:07:30,160
when tls 2.0 or

1689
01:07:30,160 --> 01:07:32,160
2012 whatever you call the next version

1690
01:07:32,160 --> 01:07:33,520
comes out

1691
01:07:33,520 --> 01:07:35,440
it would include a big section which

1692
01:07:35,440 --> 01:07:37,920
would move around a whole bunch of

1693
01:07:37,920 --> 01:07:39,119
ciphers

1694
01:07:39,119 --> 01:07:42,480
is that your expectation i mean i would

1695
01:07:42,480 --> 01:07:43,039
sort of hope

1696
01:07:43,039 --> 01:07:45,599
not just because i hope that like 2.0

1697
01:07:45,599 --> 01:07:46,079
will

1698
01:07:46,079 --> 01:07:48,079
be well still enough like 1-3 you don't

1699
01:07:48,079 --> 01:07:49,119
have to worry about it but that could

1700
01:07:49,119 --> 01:07:50,000
happen yeah

1701
01:07:50,000 --> 01:07:53,039
well yeah like right quantum computers

1702
01:07:53,039 --> 01:07:54,640
right

1703
01:07:54,640 --> 01:07:56,079
yeah yeah well the obviously being

1704
01:07:56,079 --> 01:07:57,200
quantum computers about like what's

1705
01:07:57,200 --> 01:07:57,839
happening

1706
01:07:57,839 --> 01:08:02,640
with all the stuff yeah okay thanks

1707
01:08:05,760 --> 01:08:11,839
sean you're up

1708
01:08:18,560 --> 01:08:20,880
sean

1709
01:08:23,439 --> 01:08:26,479
maybe robin's up hi

1710
01:08:26,479 --> 01:08:29,600
is the audio working yes okay

1711
01:08:29,600 --> 01:08:32,000
um yeah just a really quick thought and

1712
01:08:32,000 --> 01:08:33,120
probably a naive one

1713
01:08:33,120 --> 01:08:36,238
but i mean we have rfc 2119

1714
01:08:36,238 --> 01:08:39,520
um and that sets out may and should

1715
01:08:39,520 --> 01:08:41,520
are we just trying to reinvent that here

1716
01:08:41,520 --> 01:08:43,279
and how do other specifications that

1717
01:08:43,279 --> 01:08:44,158
include

1718
01:08:44,158 --> 01:08:47,198
um may and should qualify the options

1719
01:08:47,198 --> 01:08:48,158
within

1720
01:08:48,158 --> 01:08:51,439
those um those terms

1721
01:08:51,439 --> 01:08:53,439
i mean we must have run into this before

1722
01:08:53,439 --> 01:08:56,158
in other specs

1723
01:09:00,560 --> 01:09:01,600
yeah i feel like this is a somewhat

1724
01:09:01,600 --> 01:09:06,719
different case but certainly

1725
01:09:06,719 --> 01:09:08,960
hey am i back yeah so no chair head on

1726
01:09:08,960 --> 01:09:10,880
so i guess i had a question so this

1727
01:09:10,880 --> 01:09:12,960
doesn't actually apply to 8446

1728
01:09:12,960 --> 01:09:15,040
right because 8447 is the one that

1729
01:09:15,040 --> 01:09:16,880
defined this category

1730
01:09:16,880 --> 01:09:18,238
so i'm not sure if this should actually

1731
01:09:18,238 --> 01:09:20,959
go i'm

1732
01:09:23,679 --> 01:09:25,279
so i think it's not your problem but i

1733
01:09:25,279 --> 01:09:26,799
think the problem you've identified as

1734
01:09:26,799 --> 01:09:28,000
an actual problem

1735
01:09:28,000 --> 01:09:29,359
because we've had this problem where

1736
01:09:29,359 --> 01:09:31,600
basically like the discouraged use case

1737
01:09:31,600 --> 01:09:32,960
now people are claiming that like the

1738
01:09:32,960 --> 01:09:35,040
tls working group is uninviting

1739
01:09:35,040 --> 01:09:38,238
and not helpful and you know close cabal

1740
01:09:38,238 --> 01:09:40,399
etc so we have to figure out some way to

1741
01:09:40,399 --> 01:09:41,359
be able to

1742
01:09:41,359 --> 01:09:43,120
signify these things that you you can

1743
01:09:43,120 --> 01:09:44,640
run this protocol in any

1744
01:09:44,640 --> 01:09:46,960
in any way you see fear right some are

1745
01:09:46,960 --> 01:09:48,479
more secure than others and this is just

1746
01:09:48,479 --> 01:09:50,479
one way for us to kind of put a slant on

1747
01:09:50,479 --> 01:09:50,799
it

1748
01:09:50,799 --> 01:09:53,120
i don't have any problem with uh trying

1749
01:09:53,120 --> 01:09:54,800
to come up with four categories and

1750
01:09:54,800 --> 01:09:56,480
naming them or numbering them or giving

1751
01:09:56,480 --> 01:09:57,840
them colors or something

1752
01:09:57,840 --> 01:09:59,679
but uh we have to come up with some

1753
01:09:59,679 --> 01:10:00,880
better way for for

1754
01:10:00,880 --> 01:10:02,960
things to you know be categorized

1755
01:10:02,960 --> 01:10:05,440
essentially

1756
01:10:12,159 --> 01:10:15,600
you're up farrell yeah i put this in the

1757
01:10:15,600 --> 01:10:16,640
chat but just

1758
01:10:16,640 --> 01:10:18,239
there's a bunch of other people copying

1759
01:10:18,239 --> 01:10:20,159
this game

1760
01:10:20,159 --> 01:10:22,080
if we make it more complicated we better

1761
01:10:22,080 --> 01:10:23,440
be able to explain it

1762
01:10:23,440 --> 01:10:25,120
so that it won't be confused even if

1763
01:10:25,120 --> 01:10:26,480
people want to confuse themselves with

1764
01:10:26,480 --> 01:10:27,600
everything

1765
01:10:27,600 --> 01:10:30,080
so yes this is if this turns out to be

1766
01:10:30,080 --> 01:10:31,360
sean's problem then

1767
01:10:31,360 --> 01:10:34,080
it might be tricky

1768
01:10:38,400 --> 01:10:39,840
okay well i think we can conclusion that

1769
01:10:39,840 --> 01:10:41,679
we can just get past this issue and like

1770
01:10:41,679 --> 01:10:42,719
sean will have to solve this problem

1771
01:10:42,719 --> 01:10:46,320
with a new a447 this

1772
01:10:47,760 --> 01:10:50,400
get on sean

1773
01:10:51,679 --> 01:10:54,880
okay uh next issue 12 12.

1774
01:10:54,880 --> 01:10:57,520
um so i suppose that we have a sort of

1775
01:10:57,520 --> 01:10:58,320
general alert

1776
01:10:58,320 --> 01:10:59,920
which basically means something went

1777
01:10:59,920 --> 01:11:02,159
wrong um people sometimes think

1778
01:11:02,159 --> 01:11:03,440
internal error works for that that's not

1779
01:11:03,440 --> 01:11:04,880
internal errors for until errors for

1780
01:11:04,880 --> 01:11:05,360
like i

1781
01:11:05,360 --> 01:11:07,280
am screwed up as opposed to you sent me

1782
01:11:07,280 --> 01:11:08,880
something i don't like and the idea was

1783
01:11:08,880 --> 01:11:10,159
that you could just like always emit

1784
01:11:10,159 --> 01:11:11,280
like error

1785
01:11:11,280 --> 01:11:13,440
instead of uh instead of having to admit

1786
01:11:13,440 --> 01:11:14,640
the specific error

1787
01:11:14,640 --> 01:11:16,800
um there's also some opposition to this

1788
01:11:16,800 --> 01:11:18,159
from um

1789
01:11:18,159 --> 01:11:21,600
for some people um but uh my proposal is

1790
01:11:21,600 --> 01:11:22,800
that we define something at the main

1791
01:11:22,800 --> 01:11:24,320
level and say you should send something

1792
01:11:24,320 --> 01:11:26,000
more specific if you can which

1793
01:11:26,000 --> 01:11:27,679
has the you know unique benefits for the

1794
01:11:27,679 --> 01:11:30,480
difference between everybody

1795
01:11:31,679 --> 01:11:33,040
i'd also be fine we're just closing this

1796
01:11:33,040 --> 01:11:41,840
without change

1797
01:11:45,600 --> 01:11:55,840
anybody want to weigh in on this anyway

1798
01:11:57,920 --> 01:12:00,480
uh yeah banking no hats i mean i think

1799
01:12:00,480 --> 01:12:01,280
in general

1800
01:12:01,280 --> 01:12:03,280
there is some value to allowing

1801
01:12:03,280 --> 01:12:04,640
implementations to be

1802
01:12:04,640 --> 01:12:08,239
as black box as they can and just

1803
01:12:08,239 --> 01:12:10,560
always emit the single error or no error

1804
01:12:10,560 --> 01:12:12,080
signal so i think

1805
01:12:12,080 --> 01:12:15,600
there's probably enough use case here to

1806
01:12:15,600 --> 01:12:23,840
put in the general alert

1807
01:12:30,480 --> 01:12:33,040
encouraging as much specificity is good

1808
01:12:33,040 --> 01:12:34,000
i think

1809
01:12:34,000 --> 01:12:37,199
allowing a way to not be specific is

1810
01:12:37,199 --> 01:12:40,400
not good but if people really i don't

1811
01:12:40,400 --> 01:12:41,280
really see why

1812
01:12:41,280 --> 01:12:44,400
someone would need that but so

1813
01:12:44,400 --> 01:12:45,600
i would just say yeah encourage as much

1814
01:12:45,600 --> 01:12:51,840
specificity as possible

1815
01:12:54,880 --> 01:12:56,719
hearing no other real objections maybe

1816
01:12:56,719 --> 01:13:00,480
uh someone could note this in the issue

1817
01:13:01,840 --> 01:13:05,840
and next slide

1818
01:13:06,320 --> 01:13:09,040
okay um so the current texture my user

1819
01:13:09,040 --> 01:13:10,640
cancelled is pretty confusing

1820
01:13:10,640 --> 01:13:12,960
um um and actually i know david benjamin

1821
01:13:12,960 --> 01:13:14,320
is here so i'm really hoping he can help

1822
01:13:14,320 --> 01:13:16,320
just letting this i know people send

1823
01:13:16,320 --> 01:13:18,159
user cancelled um and so

1824
01:13:18,159 --> 01:13:19,520
you shouldn't be treating it as a fatal

1825
01:13:19,520 --> 01:13:21,280
alert um i think the text doesn't quite

1826
01:13:21,280 --> 01:13:22,159
say that

1827
01:13:22,159 --> 01:13:23,520
um it seems there are two not two

1828
01:13:23,520 --> 01:13:25,280
options here on the other side

1829
01:13:25,280 --> 01:13:27,199
one is to ignore it and the other is to

1830
01:13:27,199 --> 01:13:28,719
treat as different and just like it's

1831
01:13:28,719 --> 01:13:29,679
pretend it wasn't sent and they're just

1832
01:13:29,679 --> 01:13:32,239
reading the alias for close notify um

1833
01:13:32,239 --> 01:13:34,239
um like as in it's a you know this is

1834
01:13:34,239 --> 01:13:35,440
it's so what we know is some

1835
01:13:35,440 --> 01:13:36,480
implementation send

1836
01:13:36,480 --> 01:13:38,239
these are canceled and then close notify

1837
01:13:38,239 --> 01:13:40,239
um david what i don't know is do we ever

1838
01:13:40,239 --> 01:13:41,040
send

1839
01:13:41,040 --> 01:13:43,280
user cancelled and then a bunch of crap

1840
01:13:43,280 --> 01:13:44,400
and then close it on fire they just send

1841
01:13:44,400 --> 01:13:46,080
them a succession because if it's the

1842
01:13:46,080 --> 01:13:47,600
latter then probably you could just like

1843
01:13:47,600 --> 01:13:49,040
always tweet it before it was closed out

1844
01:13:49,040 --> 01:13:50,800
of five um so

1845
01:13:50,800 --> 01:13:52,400
i'm hoping the management can help us

1846
01:13:52,400 --> 01:13:54,719
out here

1847
01:13:55,760 --> 01:13:58,080
i don't believe they send anything in

1848
01:13:58,080 --> 01:13:59,600
between the two alerts

1849
01:13:59,600 --> 01:14:01,600
um but i might still suggest doing

1850
01:14:01,600 --> 01:14:03,760
ignoring uh because

1851
01:14:03,760 --> 01:14:07,040
uh if you like one of the use cases i've

1852
01:14:07,040 --> 01:14:08,880
never seen a protocol that does this but

1853
01:14:08,880 --> 01:14:10,640
closed notify is supposed to signal that

1854
01:14:10,640 --> 01:14:12,000
like nothing comes after this

1855
01:14:12,000 --> 01:14:13,600
but something does actually come after

1856
01:14:13,600 --> 01:14:15,600
it and so if you like like

1857
01:14:15,600 --> 01:14:17,679
stop speaking tls but then reuse the

1858
01:14:17,679 --> 01:14:19,199
transport for something else which i

1859
01:14:19,199 --> 01:14:20,719
think closed notify was supposed to

1860
01:14:20,719 --> 01:14:21,679
support

1861
01:14:21,679 --> 01:14:23,760
um then you might be a little bit sad if

1862
01:14:23,760 --> 01:14:24,960
we like

1863
01:14:24,960 --> 01:14:28,400
terminated slightly early

1864
01:14:28,400 --> 01:14:30,000
ignoring it also matches what i think

1865
01:14:30,000 --> 01:14:32,000
every implementation that i know of

1866
01:14:32,000 --> 01:14:34,640
so right so as i understand i i see see

1867
01:14:34,640 --> 01:14:35,280
so

1868
01:14:35,280 --> 01:14:38,080
um and user cancel does mean as i recall

1869
01:14:38,080 --> 01:14:39,440
like the handshake it failed and we're

1870
01:14:39,440 --> 01:14:40,080
not gonna

1871
01:14:40,080 --> 01:14:41,040
we're not gonna complete the handshake

1872
01:14:41,040 --> 01:14:43,040
for you yeah the implementations that

1873
01:14:43,040 --> 01:14:43,760
are sending

1874
01:14:43,760 --> 01:14:45,360
user cancelled are like entirely

1875
01:14:45,360 --> 01:14:46,960
violating the spec they're sending it

1876
01:14:46,960 --> 01:14:48,000
after

1877
01:14:48,000 --> 01:14:51,280
um the handshake fails as they like

1878
01:14:51,280 --> 01:14:53,199
uh right this came about because we got

1879
01:14:53,199 --> 01:14:54,719
rid of the we made

1880
01:14:54,719 --> 01:14:56,159
shutdown unidirectional rather than

1881
01:14:56,159 --> 01:14:57,920
bi-directional to match tcp and they're

1882
01:14:57,920 --> 01:14:59,440
using this as a like

1883
01:14:59,440 --> 01:15:01,280
funniest signal to the same orientation

1884
01:15:01,280 --> 01:15:03,040
on the other side that like oh i want

1885
01:15:03,040 --> 01:15:03,440
you to do

1886
01:15:03,440 --> 01:15:07,040
the old behavior i know i think ignore

1887
01:15:07,040 --> 01:15:08,239
it's fine can someone because someone

1888
01:15:08,239 --> 01:15:09,440
unless someone just can someone note

1889
01:15:09,440 --> 01:15:11,839
that in the issue

1890
01:15:14,560 --> 01:15:17,199
next slide

1891
01:15:19,360 --> 01:15:22,159
okay um so actually um i think we're

1892
01:15:22,159 --> 01:15:23,199
basically done with this

1893
01:15:23,199 --> 01:15:25,520
um there were some there's some question

1894
01:15:25,520 --> 01:15:27,120
out of the other unsolicited extensions

1895
01:15:27,120 --> 01:15:28,320
text is clear enough

1896
01:15:28,320 --> 01:15:29,600
for extensions that like are just

1897
01:15:29,600 --> 01:15:31,520
indications that don't have responses

1898
01:15:31,520 --> 01:15:34,320
um but um i think uh we touched budget

1899
01:15:34,320 --> 01:15:35,679
which discussion they have issue

1900
01:15:35,679 --> 01:15:38,400
and uh as far as i can tell um jonathan

1901
01:15:38,400 --> 01:15:39,760
does not think that we actually need to

1902
01:15:39,760 --> 01:15:40,560
leave this open

1903
01:15:40,560 --> 01:15:41,920
merely the test wasn't clear so i

1904
01:15:41,920 --> 01:15:43,679
submitted a pr to make the text clear

1905
01:15:43,679 --> 01:15:45,040
so unless somebody objects i'm just

1906
01:15:45,040 --> 01:15:48,000
gonna have i'm just universal pr

1907
01:15:48,000 --> 01:15:50,719
and what that pr says is like is pr

1908
01:15:50,719 --> 01:15:52,000
basically removes this

1909
01:15:52,000 --> 01:15:53,360
like basically said like stops calling

1910
01:15:53,360 --> 01:15:54,400
these indications there's just like

1911
01:15:54,400 --> 01:15:55,679
they're like requests and their requests

1912
01:15:55,679 --> 01:15:57,120
and responses

1913
01:15:57,120 --> 01:15:58,400
and so they follow the same rules on the

1914
01:15:58,400 --> 01:16:00,719
request

1915
01:16:04,400 --> 01:16:06,880
hearing no objection next slide is there

1916
01:16:06,880 --> 01:16:09,360
next slide

1917
01:16:10,800 --> 01:16:13,920
ah right um wow that was amazing

1918
01:16:13,920 --> 01:16:15,360
nice nice work on the sled deck here

1919
01:16:15,360 --> 01:16:17,040
ecker um

1920
01:16:17,040 --> 01:16:19,199
uh right so um there's still that much

1921
01:16:19,199 --> 01:16:20,400
left um so

1922
01:16:20,400 --> 01:16:22,320
uh yeah sure i think um sounds like we

1923
01:16:22,320 --> 01:16:24,000
basically have closure on every

1924
01:16:24,000 --> 01:16:25,199
outstanding issue

1925
01:16:25,199 --> 01:16:29,520
um um uh there is a few um editorial um

1926
01:16:29,520 --> 01:16:30,880
type issues that are like floating

1927
01:16:30,880 --> 01:16:31,360
around

1928
01:16:31,360 --> 01:16:33,199
like i need to fix but they're all clear

1929
01:16:33,199 --> 01:16:34,480
um so

1930
01:16:34,480 --> 01:16:37,760
um can uh um

1931
01:16:37,760 --> 01:16:40,880
i think can you guys do a call for uh uh

1932
01:16:40,880 --> 01:16:42,400
other remaining issues like

1933
01:16:42,400 --> 01:16:44,239
you know a couple weeks or something and

1934
01:16:44,239 --> 01:16:45,679
then we'll be and i'll get that cleared

1935
01:16:45,679 --> 01:16:46,560
out

1936
01:16:46,560 --> 01:16:48,239
so i guess my only question about the

1937
01:16:48,239 --> 01:16:50,080
remaining issues is the hr issue that

1938
01:16:50,080 --> 01:16:50,560
came up

1939
01:16:50,560 --> 01:16:52,640
with respect to ech is that going to be

1940
01:16:52,640 --> 01:16:55,760
addressed here or elsewhere

1941
01:16:55,760 --> 01:16:58,000
uh i'm not sure i understand it well not

1942
01:16:58,000 --> 01:16:58,719
i'm not sure i understand we're

1943
01:16:58,719 --> 01:17:01,760
referring to well enough

1944
01:17:01,760 --> 01:17:04,800
yeah i thought that there was a an hr

1945
01:17:04,800 --> 01:17:08,000
issue that came up with that that um

1946
01:17:08,000 --> 01:17:10,719
david benjamin brought up that was that

1947
01:17:10,719 --> 01:17:12,000
where there was some conflict in the

1948
01:17:12,000 --> 01:17:13,840
text and i may have gotten yeah

1949
01:17:13,840 --> 01:17:15,120
we have david benjamin so it's gonna be

1950
01:17:15,120 --> 01:17:16,880
good no great there we go i'll be quiet

1951
01:17:16,880 --> 01:17:18,080
thanks

1952
01:17:18,080 --> 01:17:19,840
um so it's not so much a conflict in the

1953
01:17:19,840 --> 01:17:22,320
text it's the um

1954
01:17:22,320 --> 01:17:24,719
uh if there's an if you don't say an

1955
01:17:24,719 --> 01:17:26,800
extension in hr then the client is

1956
01:17:26,800 --> 01:17:28,080
obligated to send it as

1957
01:17:28,080 --> 01:17:30,320
is which is kind of annoying and

1958
01:17:30,320 --> 01:17:32,159
probably was the wrong decision

1959
01:17:32,159 --> 01:17:35,679
uh at least the current thinking for eck

1960
01:17:35,679 --> 01:17:37,760
or amongst some of us has like not been

1961
01:17:37,760 --> 01:17:39,199
confirmed or anything

1962
01:17:39,199 --> 01:17:42,239
would avoid this issue um i do think

1963
01:17:42,239 --> 01:17:43,600
it seemed like from the last meeting

1964
01:17:43,600 --> 01:17:45,600
that we generally believed

1965
01:17:45,600 --> 01:17:48,320
that the current text was a mistake um i

1966
01:17:48,320 --> 01:17:49,600
don't feel strongly about whether we

1967
01:17:49,600 --> 01:17:50,719
fixed this year or not

1968
01:17:50,719 --> 01:17:52,239
either way we need to like go and

1969
01:17:52,239 --> 01:17:54,719
custodize the implementations that

1970
01:17:54,719 --> 01:17:58,239
implement the check more strictly

1971
01:17:58,239 --> 01:17:59,600
i'm not sure i'm not sure i understand

1972
01:17:59,600 --> 01:18:01,679
as well before i discuss it now um

1973
01:18:01,679 --> 01:18:03,600
dude do you mind filing a specific issue

1974
01:18:03,600 --> 01:18:05,120
on the specs so that we can talk about

1975
01:18:05,120 --> 01:18:05,679
it

1976
01:18:05,679 --> 01:18:12,159
yeah that's good i'll do that

1977
01:18:12,159 --> 01:18:16,239
daniel yeah uh i'm just wondering um

1978
01:18:16,239 --> 01:18:18,719
i remember we raised a few errors uh

1979
01:18:18,719 --> 01:18:22,000
some time and i'm wondering

1980
01:18:23,280 --> 01:18:26,400
these uh minor issues

1981
01:18:26,400 --> 01:18:29,679
yes i went through every erotum and um

1982
01:18:29,679 --> 01:18:32,239
and uh and either filed issues for all

1983
01:18:32,239 --> 01:18:33,440
of them and then either

1984
01:18:33,440 --> 01:18:36,080
addressed them or um or declined to rush

1985
01:18:36,080 --> 01:18:36,560
them

1986
01:18:36,560 --> 01:18:39,600
um you can find that in the github um

1987
01:18:39,600 --> 01:18:42,480
in the in the in the github uh uh uh

1988
01:18:42,480 --> 01:18:44,480
errata a circuit hub issue list

1989
01:18:44,480 --> 01:18:46,239
so um you know if you disagree my

1990
01:18:46,239 --> 01:18:47,600
treatment is one of their so like you

1991
01:18:47,600 --> 01:18:48,480
should be able to figure this out but if

1992
01:18:48,480 --> 01:18:49,600
you disagree with iran

1993
01:18:49,600 --> 01:18:52,960
please fly it to me okay well i don't

1994
01:18:52,960 --> 01:18:54,000
remember what i

1995
01:18:54,000 --> 01:18:56,880
raced so this was my well i mean i mean

1996
01:18:56,880 --> 01:18:57,760
there's like there's like there's like

1997
01:18:57,760 --> 01:18:58,960
30 of them so like you could just go

1998
01:18:58,960 --> 01:19:00,239
through um

1999
01:19:00,239 --> 01:19:02,640
like i said i i i i did clear these with

2000
01:19:02,640 --> 01:19:03,679
it with the chairs so

2001
01:19:03,679 --> 01:19:06,400
um uh so i our earliest chris um they're

2002
01:19:06,400 --> 01:19:06,719
working

2003
01:19:06,719 --> 01:19:08,560
together so um i think there was like no

2004
01:19:08,560 --> 01:19:10,080
one was like thoughtfully wrong um

2005
01:19:10,080 --> 01:19:11,360
anything was at all controversial i

2006
01:19:11,360 --> 01:19:12,800
tried to like i tried to i tried to jack

2007
01:19:12,800 --> 01:19:13,760
up to a

2008
01:19:13,760 --> 01:19:17,040
um to a real shitty disgust

2009
01:19:17,040 --> 01:19:22,960
okay thanks

2010
01:19:22,960 --> 01:19:25,920
hi this is ben again um i guess i have

2011
01:19:25,920 --> 01:19:26,960
two points now

2012
01:19:26,960 --> 01:19:29,440
one in response to the errata question

2013
01:19:29,440 --> 01:19:30,640
so

2014
01:19:30,640 --> 01:19:33,679
most of the errata are still in

2015
01:19:33,679 --> 01:19:36,960
the state reported and so i think

2016
01:19:36,960 --> 01:19:39,840
when the document gets sent to me for uh

2017
01:19:39,840 --> 01:19:41,679
publication requested

2018
01:19:41,679 --> 01:19:43,840
ideally we can also get a list of the

2019
01:19:43,840 --> 01:19:44,880
errata and

2020
01:19:44,880 --> 01:19:47,520
their dispositions same time so i can go

2021
01:19:47,520 --> 01:19:48,560
and process them in

2022
01:19:48,560 --> 01:19:51,280
our seater system and then the second

2023
01:19:51,280 --> 01:19:52,719
point that i want to raise which is

2024
01:19:52,719 --> 01:19:54,800
actually where i got the q4

2025
01:19:54,800 --> 01:19:56,880
is that currently in the data tracker we

2026
01:19:56,880 --> 01:19:58,000
do not list a

2027
01:19:58,000 --> 01:20:00,719
intended rfc status for this document

2028
01:20:00,719 --> 01:20:02,239
and i think there is some question about

2029
01:20:02,239 --> 01:20:03,920
should it be proposed standard or should

2030
01:20:03,920 --> 01:20:04,640
it go for

2031
01:20:04,640 --> 01:20:07,120
internet standard and i think we should

2032
01:20:07,120 --> 01:20:08,880
have an answer to that question before

2033
01:20:08,880 --> 01:20:19,280
group last call

2034
01:20:19,280 --> 01:20:22,239
for my part um i do not care very much

2035
01:20:22,239 --> 01:20:23,199
is long enough to do

2036
01:20:23,199 --> 01:20:24,560
as long as i just long enough to do very

2037
01:20:24,560 --> 01:20:26,480
much so

2038
01:20:26,480 --> 01:20:28,239
if i have to do work i definitely am in

2039
01:20:28,239 --> 01:20:29,760
favor of post standards if i don't

2040
01:20:29,760 --> 01:20:33,280
do work uh whatever yeah i mean i

2041
01:20:33,280 --> 01:20:34,719
i don't know that we really have to

2042
01:20:34,719 --> 01:20:36,880
write an implementation report given how

2043
01:20:36,880 --> 01:20:37,280
many

2044
01:20:37,280 --> 01:20:39,280
people have implemented this stuff so i

2045
01:20:39,280 --> 01:20:40,880
think we can do two things one we can

2046
01:20:40,880 --> 01:20:43,120
point to the interoperability matrix

2047
01:20:43,120 --> 01:20:45,679
um in the interoperability report that

2048
01:20:45,679 --> 01:20:47,280
the interoperability report is required

2049
01:20:47,280 --> 01:20:49,199
we can point to the interrupt matrix

2050
01:20:49,199 --> 01:20:52,239
that's not relevant oh but i mean i

2051
01:20:52,239 --> 01:20:54,080
thought you had to write something

2052
01:20:54,080 --> 01:20:55,520
and you could just you could pick your

2053
01:20:55,520 --> 01:20:56,960
pain level and that's what i'm saying is

2054
01:20:56,960 --> 01:20:58,480
like hey we did all this interop

2055
01:20:58,480 --> 01:21:02,718
it's over here thanks sure

2056
01:21:08,080 --> 01:21:09,280
all right well i'm gonna i'm gonna leave

2057
01:21:09,280 --> 01:21:11,280
this i think to that given that it

2058
01:21:11,280 --> 01:21:12,320
sounds like the chairs that didn't work

2059
01:21:12,320 --> 01:21:13,760
and i do not i mean

2060
01:21:13,760 --> 01:21:16,560
there's other people

2061
01:21:17,120 --> 01:21:19,760
um yeah so i'm happy to um uh i'm happy

2062
01:21:19,760 --> 01:21:20,880
to produce a report though about the

2063
01:21:20,880 --> 01:21:21,280
iran

2064
01:21:21,280 --> 01:21:23,600
um about how we handle each of them um i

2065
01:21:23,600 --> 01:21:24,960
can probably i can probably like force

2066
01:21:24,960 --> 01:21:26,239
github into producing some kind of

2067
01:21:26,239 --> 01:21:27,360
document which i can like

2068
01:21:27,360 --> 01:21:30,400
like set up different site work on um

2069
01:21:30,400 --> 01:21:33,520
uh um i'm actually um you know

2070
01:21:33,520 --> 01:21:35,120
i mean if i don't think i'm allowed to

2071
01:21:35,120 --> 01:21:37,120
actually do theorata myself if you want

2072
01:21:37,120 --> 01:21:38,239
so i thought i think you're gonna have

2073
01:21:38,239 --> 01:21:39,600
to do it yourself but if someone wants

2074
01:21:39,600 --> 01:21:40,960
to give me the keys i'm happy to also

2075
01:21:40,960 --> 01:21:42,400
from them

2076
01:21:42,400 --> 01:21:44,320
yeah i think i have to do it myself uh

2077
01:21:44,320 --> 01:21:46,000
and i somehow thought that there would

2078
01:21:46,000 --> 01:21:46,880
have been some

2079
01:21:46,880 --> 01:21:49,520
preliminary version of this report that

2080
01:21:49,520 --> 01:21:50,719
went by at some point

2081
01:21:50,719 --> 01:21:53,920
like months ago but uh thank you for for

2082
01:21:53,920 --> 01:21:57,600
offering to put that together

2083
01:21:57,600 --> 01:21:59,920
i think that's i know it might be i

2084
01:21:59,920 --> 01:22:00,880
might be an email

2085
01:22:00,880 --> 01:22:03,679
um i'll i'll see if i'll share it sure

2086
01:22:03,679 --> 01:22:05,920
thanks

2087
01:22:09,360 --> 01:22:12,799
i think i'm done bye-bye

2088
01:22:14,800 --> 01:22:19,360
all right then i think next we have uh

2089
01:22:19,360 --> 01:22:22,880
deprecating ffbh

2090
01:22:23,280 --> 01:22:26,159
carrick i think

2091
01:22:27,199 --> 01:22:30,880
yeah hi so i

2092
01:22:30,880 --> 01:22:33,520
i'm kirk i don't know probably most of

2093
01:22:33,520 --> 01:22:35,040
you don't know me but uh together with

2094
01:22:35,040 --> 01:22:36,159
nimrod and filippo

2095
01:22:36,159 --> 01:22:37,440
i'd like to propose a draft that

2096
01:22:37,440 --> 01:22:39,520
deprecates non-ephemeral

2097
01:22:39,520 --> 01:22:41,040
finite field diffie-hellman's cyber

2098
01:22:41,040 --> 01:22:42,960
suites and also discourages

2099
01:22:42,960 --> 01:22:46,239
the reuse of uh ephemeral

2100
01:22:46,239 --> 01:22:49,280
um ffdh cypher suites so

2101
01:22:49,280 --> 01:22:51,199
uh last september uh if you can go to

2102
01:22:51,199 --> 01:22:53,839
the next slide

2103
01:22:54,800 --> 01:22:57,040
here we go um so last september some

2104
01:22:57,040 --> 01:22:59,199
security researchers disclosed an attack

2105
01:22:59,199 --> 01:23:01,120
that they called the raccoon attack on

2106
01:23:01,120 --> 01:23:02,320
tls connections that use

2107
01:23:02,320 --> 01:23:03,920
static finite field dippy home and

2108
01:23:03,920 --> 01:23:06,560
cypher suites and also a

2109
01:23:06,560 --> 01:23:08,159
finite field difficult cipher suites if

2110
01:23:08,159 --> 01:23:10,320
the public key is reused

2111
01:23:10,320 --> 01:23:12,159
and it's a timing attack and it

2112
01:23:12,159 --> 01:23:14,320
basically uses the server as an oracle

2113
01:23:14,320 --> 01:23:17,040
to figure out the premaster secret you

2114
01:23:17,040 --> 01:23:21,840
can go to the next slide

2115
01:23:22,639 --> 01:23:25,520
so we'd like to deprecate these and

2116
01:23:25,520 --> 01:23:28,239
discourage the reuse of ephemeral keys

2117
01:23:28,239 --> 01:23:31,440
you can go to the next slide again

2118
01:23:33,360 --> 01:23:35,199
so these already aren't recommended

2119
01:23:35,199 --> 01:23:36,480
since they don't provide

2120
01:23:36,480 --> 01:23:39,199
forward secrecy so really we'd just be

2121
01:23:39,199 --> 01:23:40,080
uh

2122
01:23:40,080 --> 01:23:42,320
i guess prohibiting them um to the

2123
01:23:42,320 --> 01:23:43,840
extent that we can discourage

2124
01:23:43,840 --> 01:23:46,719
use um and they're already not

2125
01:23:46,719 --> 01:23:47,360
recommended

2126
01:23:47,360 --> 01:23:50,080
okay next slide

2127
01:23:52,000 --> 01:23:54,719
so ecbh is not vulnerable to the raccoon

2128
01:23:54,719 --> 01:23:56,239
attack

2129
01:23:56,239 --> 01:23:58,960
but they are vulnerable to other side

2130
01:23:58,960 --> 01:24:00,400
channel attacks

2131
01:24:00,400 --> 01:24:02,880
including the invalid curve attacks so

2132
01:24:02,880 --> 01:24:04,639
most attacks of this type exploit the

2133
01:24:04,639 --> 01:24:06,000
fact that the server

2134
01:24:06,000 --> 01:24:08,400
reuses a public key and don't work when

2135
01:24:08,400 --> 01:24:09,600
the keys are fully

2136
01:24:09,600 --> 01:24:10,960
ephemeral so we'd like to take this

2137
01:24:10,960 --> 01:24:12,719
opportunity to discourage

2138
01:24:12,719 --> 01:24:14,560
the use of non-ephemeral ecdh cypher

2139
01:24:14,560 --> 01:24:16,080
suites and

2140
01:24:16,080 --> 01:24:18,719
prohibit the reuse of ephemeral pcbh

2141
01:24:18,719 --> 01:24:19,440
keys

2142
01:24:19,440 --> 01:24:22,239
next side please

2143
01:24:23,600 --> 01:24:25,920
and these already aren't recommended too

2144
01:24:25,920 --> 01:24:27,040
because they don't provide forward

2145
01:24:27,040 --> 01:24:28,000
secrecy

2146
01:24:28,000 --> 01:24:31,840
next slide

2147
01:24:32,320 --> 01:24:36,880
so in summary uh deprecate ffdh

2148
01:24:36,880 --> 01:24:39,760
prohibit uh forbid the the reuse of

2149
01:24:39,760 --> 01:24:40,639
ffdhe

2150
01:24:40,639 --> 01:24:44,000
and ec uh that's a miss of their

2151
01:24:44,000 --> 01:24:47,679
uh dhe keys and then also discourage

2152
01:24:47,679 --> 01:24:52,880
ecdh that's it any questions

2153
01:24:54,639 --> 01:24:57,360
uh i guess i don't know if the chair do

2154
01:24:57,360 --> 01:24:58,159
the chairs uh

2155
01:24:58,159 --> 01:25:01,760
lead the question part should i just

2156
01:25:01,760 --> 01:25:05,199
call out people it's fine if you just

2157
01:25:05,199 --> 01:25:05,520
call

2158
01:25:05,520 --> 01:25:09,440
people okay renee go ahead

2159
01:25:09,440 --> 01:25:12,560
hello um i just have a question

2160
01:25:12,560 --> 01:25:15,120
isn't this raccoon attack uh essentially

2161
01:25:15,120 --> 01:25:15,760
an attack

2162
01:25:15,760 --> 01:25:18,639
against uh variable size representations

2163
01:25:18,639 --> 01:25:20,719
of the shared key

2164
01:25:20,719 --> 01:25:21,920
because it seems that you you're

2165
01:25:21,920 --> 01:25:24,480
confusing the attack this uh

2166
01:25:24,480 --> 01:25:28,000
the cause of the attack uh i think it's

2167
01:25:28,000 --> 01:25:28,719
due to the

2168
01:25:28,719 --> 01:25:31,360
refestation issues and not due to uh

2169
01:25:31,360 --> 01:25:35,599
ephemeral or reuse of ephemeral keys

2170
01:25:36,639 --> 01:25:38,560
i'm not totally sure what you mean i

2171
01:25:38,560 --> 01:25:40,400
mean the the attack is

2172
01:25:40,400 --> 01:25:44,719
possible only if you reuse these keys so

2173
01:25:44,719 --> 01:25:49,280
yeah but basically basically you you

2174
01:25:51,760 --> 01:25:54,000
you rule out a very large class of

2175
01:25:54,000 --> 01:25:55,360
protocols

2176
01:25:55,360 --> 01:25:58,880
whereas the attack is really caused by

2177
01:25:58,880 --> 01:26:01,600
the timing attack is due to the input of

2178
01:26:01,600 --> 01:26:02,719
the

2179
01:26:02,719 --> 01:26:07,120
hash function b of variable size right

2180
01:26:07,280 --> 01:26:10,320
it's due to stripping the leading zeroes

2181
01:26:10,320 --> 01:26:14,000
and that's in the spec and but it also

2182
01:26:14,000 --> 01:26:16,400
that's so so so what i'm kind of

2183
01:26:16,400 --> 01:26:17,440
objecting against

2184
01:26:17,440 --> 01:26:20,239
is that uh

2185
01:26:20,800 --> 01:26:23,760
you rule out uh i think it's an

2186
01:26:23,760 --> 01:26:26,239
important mechanism to be able at least

2187
01:26:26,239 --> 01:26:27,920
in some cases to reuse some

2188
01:26:27,920 --> 01:26:30,639
thermal key material you rule it out

2189
01:26:30,639 --> 01:26:31,600
because of

2190
01:26:31,600 --> 01:26:34,080
essentially an implementation or a

2191
01:26:34,080 --> 01:26:36,560
specification flaw in old versions of

2192
01:26:36,560 --> 01:26:38,080
tls

2193
01:26:38,080 --> 01:26:40,400
where uh keys are not represented in the

2194
01:26:40,400 --> 01:26:42,000
fixed way

2195
01:26:42,000 --> 01:26:44,639
uh it's only in tlst uh 1.2 and below

2196
01:26:44,639 --> 01:26:45,679
but

2197
01:26:45,679 --> 01:26:48,800
i mean yeah basically so the alternative

2198
01:26:48,800 --> 01:26:49,520
would be to

2199
01:26:49,520 --> 01:26:52,480
actually change the spec and that just

2200
01:26:52,480 --> 01:26:53,360
doesn't seem

2201
01:26:53,360 --> 01:26:55,280
really realistic and these cipher suites

2202
01:26:55,280 --> 01:26:56,480
aren't recommended anyway

2203
01:26:56,480 --> 01:27:00,080
so it doesn't seem like a

2204
01:27:00,080 --> 01:27:02,159
good idea to change the spec instead

2205
01:27:02,159 --> 01:27:04,159
well i i can see for example

2206
01:27:04,159 --> 01:27:06,880
uh all these encrypted uh client hellos

2207
01:27:06,880 --> 01:27:07,520
and so on

2208
01:27:07,520 --> 01:27:11,280
that they all use one-sided uh algomal

2209
01:27:11,280 --> 01:27:14,239
they would all be not recommended by

2210
01:27:14,239 --> 01:27:18,159
your suggestion

2211
01:27:18,159 --> 01:27:21,199
sorry i'm not sure i caught that um that

2212
01:27:21,199 --> 01:27:21,760
what would

2213
01:27:21,760 --> 01:27:24,800
be recommended so so so if you do a

2214
01:27:24,800 --> 01:27:26,000
protocol where

2215
01:27:26,000 --> 01:27:28,560
you have a client talking with a server

2216
01:27:28,560 --> 01:27:29,440
with a fixed

2217
01:27:29,440 --> 01:27:32,800
public key have various clients

2218
01:27:32,800 --> 01:27:35,360
clients doing doing this handshake if in

2219
01:27:35,360 --> 01:27:38,400
the if this is a oneplus protocol

2220
01:27:38,400 --> 01:27:42,159
uh then you could uh arguably do this

2221
01:27:42,159 --> 01:27:44,880
lagoon attack anyway if there's a

2222
01:27:44,880 --> 01:27:46,800
non-fixed representation of the shared

2223
01:27:46,800 --> 01:27:47,280
key

2224
01:27:47,280 --> 01:27:49,440
so i think you should fix the problem

2225
01:27:49,440 --> 01:27:51,840
and not come up with some kind of

2226
01:27:51,840 --> 01:27:54,880
focus recommendation that is much wider

2227
01:27:54,880 --> 01:27:55,280
than

2228
01:27:55,280 --> 01:27:59,120
fixing the problem so if i can jump in

2229
01:27:59,120 --> 01:28:02,000
renee it sounds like you are wanting to

2230
01:28:02,000 --> 01:28:03,360
get clarification

2231
01:28:03,360 --> 01:28:06,080
as to the thing being banned is

2232
01:28:06,080 --> 01:28:07,040
specifically

2233
01:28:07,040 --> 01:28:11,360
like the tls key exchange

2234
01:28:11,360 --> 01:28:13,840
part as opposed to other ways in which

2235
01:28:13,840 --> 01:28:14,880
you might use

2236
01:28:14,880 --> 01:28:18,000
uh divi helmet exchange in different

2237
01:28:18,000 --> 01:28:21,199
aspects of the protocol

2238
01:28:23,920 --> 01:28:26,400
uh sorry i i didn't i didn't catch what

2239
01:28:26,400 --> 01:28:28,000
were you saying

2240
01:28:28,000 --> 01:28:31,520
so there's the the actual like tls key

2241
01:28:31,520 --> 01:28:33,440
exchange in the handshake

2242
01:28:33,440 --> 01:28:35,840
and that's the problematic because the

2243
01:28:35,840 --> 01:28:37,600
um stripping of the leading zeros

2244
01:28:37,600 --> 01:28:41,520
is in the protocol spec and so

2245
01:28:41,520 --> 01:28:43,920
the the question that i think is what

2246
01:28:43,920 --> 01:28:45,040
you're asking

2247
01:28:45,040 --> 01:28:47,280
is should we just be prohibiting that

2248
01:28:47,280 --> 01:28:48,960
particular flawed usage

2249
01:28:48,960 --> 01:28:52,080
of uh david hillen or

2250
01:28:52,080 --> 01:28:54,560
should we be applying these prohibitions

2251
01:28:54,560 --> 01:28:55,520
to

2252
01:28:55,520 --> 01:28:56,960
all places where we might use

2253
01:28:56,960 --> 01:28:58,880
diffie-hellman in the tls context

2254
01:28:58,880 --> 01:29:02,000
regardless of the handshake key exchange

2255
01:29:02,000 --> 01:29:02,719
versus

2256
01:29:02,719 --> 01:29:05,840
other you know encrypted client hello

2257
01:29:05,840 --> 01:29:08,800
sorts of usage

2258
01:29:08,960 --> 01:29:11,280
i think we should fix the cause of the

2259
01:29:11,280 --> 01:29:12,239
problem this is

2260
01:29:12,239 --> 01:29:14,239
the representation issue and we should

2261
01:29:14,239 --> 01:29:15,440
not rule out

2262
01:29:15,440 --> 01:29:19,199
uh we can't change the system

2263
01:29:19,679 --> 01:29:21,199
we have to work within the constraints

2264
01:29:21,199 --> 01:29:22,800
of of the implementations that are

2265
01:29:22,800 --> 01:29:25,040
already written

2266
01:29:25,040 --> 01:29:28,080
yes but uh as i understand it from this

2267
01:29:28,080 --> 01:29:29,840
presentation

2268
01:29:29,840 --> 01:29:33,760
uh uh the the proposers want to rule out

2269
01:29:33,760 --> 01:29:36,960
the reuse of an ephemeral key by uh

2270
01:29:36,960 --> 01:29:41,120
uh sorry the use of one-sided uh

2271
01:29:41,120 --> 01:29:43,920
ecdh

2272
01:29:46,480 --> 01:29:48,800
i've just i've just scratched the

2273
01:29:48,800 --> 01:29:50,560
raccoon attack here on a piece of paper

2274
01:29:50,560 --> 01:29:52,800
and i commented on it in the girdle

2275
01:29:52,800 --> 01:29:56,000
review of the last call uh of the cats

2276
01:29:56,000 --> 01:30:00,719
suite last week and

2277
01:30:01,360 --> 01:30:06,239
did this this is definitely a

2278
01:30:06,239 --> 01:30:08,320
out a very large class of uh

2279
01:30:08,320 --> 01:30:11,199
applications of the difficult scheme

2280
01:30:11,199 --> 01:30:16,559
without a reason without solid reason

2281
01:30:16,639 --> 01:30:18,639
well uh maybe we should take that debate

2282
01:30:18,639 --> 01:30:20,000
to the list and

2283
01:30:20,000 --> 01:30:23,920
uh ecker do you want to go next

2284
01:30:25,199 --> 01:30:26,480
yeah i mean so are they taking a step

2285
01:30:26,480 --> 01:30:29,440
back um you know in general like

2286
01:30:29,440 --> 01:30:32,000
long-term difficulties um are like

2287
01:30:32,000 --> 01:30:32,800
harder to use

2288
01:30:32,800 --> 01:30:36,080
right um uh um you know the

2289
01:30:36,080 --> 01:30:37,679
the raccoon is there's a specific class

2290
01:30:37,679 --> 01:30:39,920
of a specific is a general class of

2291
01:30:39,920 --> 01:30:41,360
oracle type attacks on

2292
01:30:41,360 --> 01:30:44,560
on the uh on them um nevertheless you

2293
01:30:44,560 --> 01:30:45,280
know we do

2294
01:30:45,280 --> 01:30:48,080
um and of course they don't offer pfs um

2295
01:30:48,080 --> 01:30:48,560
in many

2296
01:30:48,560 --> 01:30:50,239
scenarios though not not every scenario

2297
01:30:50,239 --> 01:30:52,560
for instance opt ls um does offer uh you

2298
01:30:52,560 --> 01:30:52,880
know

2299
01:30:52,880 --> 01:30:54,400
does rpfs because it has a secondary

2300
01:30:54,400 --> 01:30:55,920
home exchange um

2301
01:30:55,920 --> 01:30:58,960
so um you know in general uh uh some

2302
01:30:58,960 --> 01:31:00,480
care has to be taken to you when you're

2303
01:31:00,480 --> 01:31:02,159
using any kind of laundry filming key

2304
01:31:02,159 --> 01:31:03,760
um with that said i think as rene is

2305
01:31:03,760 --> 01:31:05,280
pointing out um we're not going to get

2306
01:31:05,280 --> 01:31:07,120
away from like having long-term to film

2307
01:31:07,120 --> 01:31:08,800
keys um being used for encryption um

2308
01:31:08,800 --> 01:31:09,840
because we have too many things that

2309
01:31:09,840 --> 01:31:11,600
need them a lot hpke

2310
01:31:11,600 --> 01:31:14,639
or somebody's attitude and um tls um

2311
01:31:14,639 --> 01:31:16,159
so we're going to we will have to face

2312
01:31:16,159 --> 01:31:18,320
that at some point um

2313
01:31:18,320 --> 01:31:21,600
i think that the um the

2314
01:31:21,600 --> 01:31:23,440
um the the financial part of this i

2315
01:31:23,440 --> 01:31:24,960
think is good um and i think we should i

2316
01:31:24,960 --> 01:31:26,080
think we should definitely do it

2317
01:31:26,080 --> 01:31:29,280
um the um the uh um

2318
01:31:29,280 --> 01:31:31,520
i also think that the forbidding the

2319
01:31:31,520 --> 01:31:33,840
static on diffie hellman um

2320
01:31:33,840 --> 01:31:37,440
uh electrocuted home is also good um

2321
01:31:37,440 --> 01:31:40,719
um i think that the uh um i'm a little

2322
01:31:40,719 --> 01:31:42,000
less a little more iffy

2323
01:31:42,000 --> 01:31:45,520
on the um prohibiting reuse of um ecdhe

2324
01:31:45,520 --> 01:31:46,239
keys

2325
01:31:46,239 --> 01:31:50,000
um uh um

2326
01:31:50,000 --> 01:31:53,280
we uh uh um for two reasons um

2327
01:31:53,280 --> 01:31:54,400
one i know there are i know they're

2328
01:31:54,400 --> 01:31:56,560
stacks which already do this and so um

2329
01:31:56,560 --> 01:31:58,639
you should you won't be able to check it

2330
01:31:58,639 --> 01:31:59,679
on the client

2331
01:31:59,679 --> 01:32:02,719
um uh um

2332
01:32:02,719 --> 01:32:05,360
and um also just um generally so i think

2333
01:32:05,360 --> 01:32:07,120
you know this maybe should be achievable

2334
01:32:07,120 --> 01:32:10,480
obviously rather than muscle brushes

2335
01:32:11,679 --> 01:32:12,960
okay that's interesting because to me

2336
01:32:12,960 --> 01:32:15,120
the the definition of ephemeral is like

2337
01:32:15,120 --> 01:32:17,760
you only use it once so it's odd to me

2338
01:32:17,760 --> 01:32:18,800
not to

2339
01:32:18,800 --> 01:32:22,800
prohibit the reuse of them but this this

2340
01:32:22,800 --> 01:32:24,560
this this terminological question turns

2341
01:32:24,560 --> 01:32:26,480
out to be quite fraught um

2342
01:32:26,480 --> 01:32:28,719
as i recall um i'm just but i'm just

2343
01:32:28,719 --> 01:32:29,840
telling you there are stats before you

2344
01:32:29,840 --> 01:32:32,159
use them

2345
01:32:32,400 --> 01:32:40,239
okay uh watson go ahead

2346
01:32:40,239 --> 01:32:43,280
so i'm looking at the draft and it all

2347
01:32:43,280 --> 01:32:43,840
it does

2348
01:32:43,840 --> 01:32:45,840
is prohibit a certain name class of

2349
01:32:45,840 --> 01:32:48,080
cypher suites and if we were to

2350
01:32:48,080 --> 01:32:50,080
fix the cipher suites we would have to

2351
01:32:50,080 --> 01:32:51,679
introduce new numbers

2352
01:32:51,679 --> 01:32:52,639
because otherwise we have an

2353
01:32:52,639 --> 01:32:55,040
interoperability issue so

2354
01:32:55,040 --> 01:32:58,080
i think that we don't have that there's

2355
01:32:58,080 --> 01:33:00,000
no way to get around this we have to ban

2356
01:33:00,000 --> 01:33:00,800
these

2357
01:33:00,800 --> 01:33:04,400
um with regards to the reuse of ecdhe

2358
01:33:04,400 --> 01:33:08,000
keys i don't think there's a much of a

2359
01:33:08,000 --> 01:33:10,800
problem with re you know using the same

2360
01:33:10,800 --> 01:33:12,880
key again for an ephemeral exchange over

2361
01:33:12,880 --> 01:33:14,960
the course of say a minute

2362
01:33:14,960 --> 01:33:16,719
or an hour which is what the

2363
01:33:16,719 --> 01:33:18,400
implementations that are doing this

2364
01:33:18,400 --> 01:33:19,840
reuse to avoid

2365
01:33:19,840 --> 01:33:21,760
having to do two exponentiations for

2366
01:33:21,760 --> 01:33:23,760
every handshake are doing

2367
01:33:23,760 --> 01:33:25,520
i also think that there's no reason to

2368
01:33:25,520 --> 01:33:27,440
use finite field diffie-hellman

2369
01:33:27,440 --> 01:33:29,520
the keys are incredibly big it's

2370
01:33:29,520 --> 01:33:30,800
incredibly slow

2371
01:33:30,800 --> 01:33:34,480
we should just ban it entirely

2372
01:33:35,760 --> 01:33:38,239
sounds good

2373
01:33:41,679 --> 01:33:44,400
any other question

2374
01:33:49,440 --> 01:33:52,880
okay uh looks like we'll continue

2375
01:33:52,880 --> 01:33:53,920
discussing this

2376
01:33:53,920 --> 01:33:58,080
and i'll hand it back to the chairs

2377
01:34:02,840 --> 01:34:05,760
okay thanks kirk um

2378
01:34:05,760 --> 01:34:09,360
let's move on to i think our next was

2379
01:34:09,360 --> 01:34:14,159
uh p-o-s-p-o-k

2380
01:34:14,560 --> 01:34:19,840
so owen or dan

2381
01:34:22,480 --> 01:34:24,560
hey uh joe i think this is the the later

2382
01:34:24,560 --> 01:34:25,840
version of the slide director john

2383
01:34:25,840 --> 01:34:28,239
uploaded

2384
01:34:28,239 --> 01:34:33,360
yeah yeah i uploaded it

2385
01:34:33,360 --> 01:34:36,639
is that gonna be one

2386
01:34:37,199 --> 01:34:47,839
is that the right one okay

2387
01:34:48,239 --> 01:34:51,678
okay excuse some context here

2388
01:34:51,840 --> 01:34:54,960
um so this this is presented at immune

2389
01:34:54,960 --> 01:34:58,840
109 um and the goal here is to

2390
01:34:58,840 --> 01:35:01,199
reuse some of the mechanisms that are

2391
01:35:01,199 --> 01:35:02,880
used by the wi-fi alliance device

2392
01:35:02,880 --> 01:35:04,639
provisioning profile

2393
01:35:04,639 --> 01:35:07,840
and then use them for a wired

2394
01:35:07,840 --> 01:35:11,360
for a wired device to go onto the next

2395
01:35:12,840 --> 01:35:15,840
slide

2396
01:35:16,239 --> 01:35:18,880
some context wi-fi alliance tpp protocol

2397
01:35:18,880 --> 01:35:20,400
defines how a supplement

2398
01:35:20,400 --> 01:35:22,159
bootstrap keypair can be used to boost

2399
01:35:22,159 --> 01:35:25,119
traffic against wi-fi network

2400
01:35:25,119 --> 01:35:28,960
um it gives a guarantee to the

2401
01:35:28,960 --> 01:35:30,800
to the subsequent through the device

2402
01:35:30,800 --> 01:35:32,239
that um it's connecting to a network

2403
01:35:32,239 --> 01:35:34,080
that knows boosts your public key

2404
01:35:34,080 --> 01:35:36,080
and it gives a guarantee to the network

2405
01:35:36,080 --> 01:35:38,159
that uh the device that's connecting

2406
01:35:38,159 --> 01:35:40,159
um is the whole draft associated private

2407
01:35:40,159 --> 01:35:41,360
key

2408
01:35:41,360 --> 01:35:44,639
um dpp defines a format for the booster

2409
01:35:44,639 --> 01:35:45,360
public key

2410
01:35:45,360 --> 01:35:48,480
it's encoded using an asn1 sequence from

2411
01:35:48,480 --> 01:35:52,239
rfc 5280 um

2412
01:35:52,239 --> 01:35:53,920
it's a rocky pair doesn't necessarily

2413
01:35:53,920 --> 01:35:55,760
have to be part of a

2414
01:35:55,760 --> 01:35:58,480
and it may be static and embedded in the

2415
01:35:58,480 --> 01:35:59,199
supplicant

2416
01:35:59,199 --> 01:36:00,719
it may be printed on the qr label or

2417
01:36:00,719 --> 01:36:02,239
including the bom equator or could be

2418
01:36:02,239 --> 01:36:03,440
generally again written if the

2419
01:36:03,440 --> 01:36:05,119
supplicant has a mechanism for um

2420
01:36:05,119 --> 01:36:06,719
generating and displaying

2421
01:36:06,719 --> 01:36:08,800
a bootstrap key so the boost repeats a

2422
01:36:08,800 --> 01:36:10,560
public private key pair

2423
01:36:10,560 --> 01:36:14,000
um and the public keys is um provisioned

2424
01:36:14,000 --> 01:36:16,320
on the network

2425
01:36:16,320 --> 01:36:18,000
and so we want to reuse the same

2426
01:36:18,000 --> 01:36:19,440
bootstrap public private

2427
01:36:19,440 --> 01:36:21,199
key pair mechanism to enable the device

2428
01:36:21,199 --> 01:36:22,719
to secure the bootstrap against a wired

2429
01:36:22,719 --> 01:36:24,560
network using etls

2430
01:36:24,560 --> 01:36:27,280
by tls extension and we want to reuse

2431
01:36:27,280 --> 01:36:27,679
the

2432
01:36:27,679 --> 01:36:32,320
same dpp and bootstrap key format

2433
01:36:32,320 --> 01:36:36,239
which means that if a device has a

2434
01:36:36,239 --> 01:36:39,920
dpp key um a bootstrap key

2435
01:36:39,920 --> 01:36:43,600
provisioned and available on a qr code

2436
01:36:43,600 --> 01:36:44,639
on a bomb or

2437
01:36:44,639 --> 01:36:48,400
whatever um the same exact same booster

2438
01:36:48,400 --> 01:36:50,400
key can be used robot wired and a

2439
01:36:50,400 --> 01:36:55,280
wi-fi bootstrap next slide

2440
01:36:57,119 --> 01:37:00,719
so outline the dpp um

2441
01:37:01,360 --> 01:37:03,199
the public booster keys provision the

2442
01:37:03,199 --> 01:37:04,639
dpp configurator

2443
01:37:04,639 --> 01:37:06,480
and the configurator it's typically a

2444
01:37:06,480 --> 01:37:08,239
mobile app for the dpp use case but it

2445
01:37:08,239 --> 01:37:09,920
could also be embedded in a wi-fi access

2446
01:37:09,920 --> 01:37:11,280
point

2447
01:37:11,280 --> 01:37:15,280
um proof of knowledge takes place by

2448
01:37:15,280 --> 01:37:16,800
tiffy helmand using the booster

2449
01:37:16,800 --> 01:37:19,600
key and the configurators ephemeral key

2450
01:37:19,600 --> 01:37:20,239
and

2451
01:37:20,239 --> 01:37:22,320
so the subsequent proves that it knows

2452
01:37:22,320 --> 01:37:23,920
the private key it boosts your key pair

2453
01:37:23,920 --> 01:37:25,440
and the configurator proves it knows to

2454
01:37:25,440 --> 01:37:25,920
publicly

2455
01:37:25,920 --> 01:37:29,600
boost your key pair and a secure channel

2456
01:37:29,600 --> 01:37:31,600
is established based on tv hellmann

2457
01:37:31,600 --> 01:37:33,119
and then network information can be a

2458
01:37:33,119 --> 01:37:34,719
security exchange which allows the

2459
01:37:34,719 --> 01:37:36,320
supplicants to securely connect to the

2460
01:37:36,320 --> 01:37:38,639
network

2461
01:37:40,159 --> 01:37:42,719
next slide

2462
01:37:45,280 --> 01:37:47,360
so what we want to do is reuse the dpp

2463
01:37:47,360 --> 01:37:50,080
booster keypad for wired lan use cases

2464
01:37:50,080 --> 01:37:53,440
um so the public key

2465
01:37:53,440 --> 01:37:54,960
of the booster key is scanned into

2466
01:37:54,960 --> 01:37:57,119
network unknown to the aaa server

2467
01:37:57,119 --> 01:38:00,480
or the tls server and the

2468
01:38:00,480 --> 01:38:01,840
the mutual proof that needs to take

2469
01:38:01,840 --> 01:38:03,679
place is the device wants to network to

2470
01:38:03,679 --> 01:38:05,360
prove that it knows it boots your public

2471
01:38:05,360 --> 01:38:06,080
key

2472
01:38:06,080 --> 01:38:07,520
and the network wants the device to

2473
01:38:07,520 --> 01:38:09,199
prove that it knows the associated

2474
01:38:09,199 --> 01:38:12,159
um private key and that's pretty easy to

2475
01:38:12,159 --> 01:38:12,639
achieve

2476
01:38:12,639 --> 01:38:15,119
by um exchanging two sets of different

2477
01:38:15,119 --> 01:38:17,119
keys in the client close server law

2478
01:38:17,119 --> 01:38:19,440
so the standard key chair which both

2479
01:38:19,440 --> 01:38:20,239
sides

2480
01:38:20,239 --> 01:38:23,199
generate thermal key pairs and then what

2481
01:38:23,199 --> 01:38:24,880
we were defining in this draft is a

2482
01:38:24,880 --> 01:38:26,400
bootstrap extension

2483
01:38:26,400 --> 01:38:28,880
where the client sends a one-way hash if

2484
01:38:28,880 --> 01:38:30,400
it's uh

2485
01:38:30,400 --> 01:38:32,560
publicly to the server the server can

2486
01:38:32,560 --> 01:38:33,600
use that to

2487
01:38:33,600 --> 01:38:36,480
look up the full public key and then the

2488
01:38:36,480 --> 01:38:37,679
server will um

2489
01:38:37,679 --> 01:38:39,520
generate a second firmware key and

2490
01:38:39,520 --> 01:38:42,800
exchange at a framework unit server law

2491
01:38:42,800 --> 01:38:44,480
so both if you haven't calculations are

2492
01:38:44,480 --> 01:38:46,159
injected into the key schedule number of

2493
01:38:46,159 --> 01:38:47,600
browsing we're just peeking back on top

2494
01:38:47,600 --> 01:38:48,480
of the

2495
01:38:48,480 --> 01:38:50,960
the highland mechanism for extended key

2496
01:38:50,960 --> 01:38:52,320
schedule

2497
01:38:52,320 --> 01:38:54,880
next slide

2498
01:38:57,040 --> 01:38:58,480
and so this is just taken straight from

2499
01:38:58,480 --> 01:39:01,360
the draft it it shows the tls extensions

2500
01:39:01,360 --> 01:39:02,560
that we're defining

2501
01:39:02,560 --> 01:39:05,679
so the bootstrap key um

2502
01:39:05,679 --> 01:39:08,880
extension in decline to load what

2503
01:39:08,880 --> 01:39:10,719
happens is the client sends a hash of

2504
01:39:10,719 --> 01:39:11,679
its public key

2505
01:39:11,679 --> 01:39:13,440
to the server the server use that to

2506
01:39:13,440 --> 01:39:15,760
look up then the server will respond

2507
01:39:15,760 --> 01:39:16,400
with it

2508
01:39:16,400 --> 01:39:19,360
with a ephemeral key exchange in the

2509
01:39:19,360 --> 01:39:20,800
response

2510
01:39:20,800 --> 01:39:23,840
so then in the in the

2511
01:39:23,840 --> 01:39:25,199
in the client below you can see the

2512
01:39:25,199 --> 01:39:26,880
booster key share been sent

2513
01:39:26,880 --> 01:39:29,199
and that would include just the the

2514
01:39:29,199 --> 01:39:31,040
booster key identifier which is the hash

2515
01:39:31,040 --> 01:39:32,560
and then the server low response to

2516
01:39:32,560 --> 01:39:33,199
server

2517
01:39:33,199 --> 01:39:35,440
will respond with two ephemeral diffie

2518
01:39:35,440 --> 01:39:36,800
helmets one in the key share one of the

2519
01:39:36,800 --> 01:39:38,960
booster keyshare

2520
01:39:38,960 --> 01:39:40,239
and you can see in the right hand side

2521
01:39:40,239 --> 01:39:41,920
there we're just injecting the booster

2522
01:39:41,920 --> 01:39:43,679
key input which is

2523
01:39:43,679 --> 01:39:45,280
the diffie element as a result of that

2524
01:39:45,280 --> 01:39:47,520
semi semi-static if we have an exchange

2525
01:39:47,520 --> 01:39:48,159
into the

2526
01:39:48,159 --> 01:39:50,400
into the key schedule using the highland

2527
01:39:50,400 --> 01:39:52,400
draft

2528
01:39:52,400 --> 01:39:55,839
an extra next slide

2529
01:39:57,840 --> 01:40:00,560
so what that means is that um if you

2530
01:40:00,560 --> 01:40:02,159
have a supplicant that has a booster

2531
01:40:02,159 --> 01:40:03,920
public key

2532
01:40:03,920 --> 01:40:07,040
either statically embedded in it or

2533
01:40:07,040 --> 01:40:09,280
dynamically generated if the subsequent

2534
01:40:09,280 --> 01:40:11,040
has an output device

2535
01:40:11,040 --> 01:40:14,960
then that booster key can be used for

2536
01:40:14,960 --> 01:40:16,639
onboarding the device against about a

2537
01:40:16,639 --> 01:40:18,639
wi-fi network using dpp

2538
01:40:18,639 --> 01:40:20,880
and against a wired network using this

2539
01:40:20,880 --> 01:40:22,639
tls proof of knowledge extension on top

2540
01:40:22,639 --> 01:40:24,960
of eep

2541
01:40:25,040 --> 01:40:27,600
next slide

2542
01:40:29,199 --> 01:40:30,560
so the security considerations it

2543
01:40:30,560 --> 01:40:32,480
leverages the tls handshake with no

2544
01:40:32,480 --> 01:40:33,679
esoteric cryptography

2545
01:40:33,679 --> 01:40:35,280
the existing tls security approves

2546
01:40:35,280 --> 01:40:37,760
should be applicable

2547
01:40:37,760 --> 01:40:40,320
um we're proposing just piggybacking on

2548
01:40:40,320 --> 01:40:41,280
top of the holland

2549
01:40:41,280 --> 01:40:44,639
key extend the key schedule draft

2550
01:40:44,639 --> 01:40:47,520
and for booster key security the tls

2551
01:40:47,520 --> 01:40:48,880
proof of knowledge has exact same

2552
01:40:48,880 --> 01:40:50,560
security stance as dpp would respect

2553
01:40:50,560 --> 01:40:52,080
your bootstraps

2554
01:40:52,080 --> 01:40:55,040
and with dpp if an attacker knows the

2555
01:40:55,040 --> 01:40:56,800
bootstrap public key of the device

2556
01:40:56,800 --> 01:40:58,480
you're trying to bootstrap that attacker

2557
01:40:58,480 --> 01:41:00,080
can then bootstrap that device against

2558
01:41:00,080 --> 01:41:01,040
their network

2559
01:41:01,040 --> 01:41:03,280
the same holds true for this retailer's

2560
01:41:03,280 --> 01:41:04,159
proof of knowledge

2561
01:41:04,159 --> 01:41:05,920
if you know the booster public key you

2562
01:41:05,920 --> 01:41:07,360
can claim the device

2563
01:41:07,360 --> 01:41:10,880
so it's exactly the same posture as dpp

2564
01:41:10,880 --> 01:41:13,440
next slide

2565
01:41:14,880 --> 01:41:17,360
so there is working code and built on

2566
01:41:17,360 --> 01:41:18,239
top of the

2567
01:41:18,239 --> 01:41:21,280
the go line mint stack

2568
01:41:21,280 --> 01:41:23,759
next slide

2569
01:41:26,400 --> 01:41:29,040
so we presented this is emu 109 and

2570
01:41:29,040 --> 01:41:30,159
those general

2571
01:41:30,159 --> 01:41:33,920
and consensus to progress this work um

2572
01:41:33,920 --> 01:41:36,000
the street general work areas there's

2573
01:41:36,000 --> 01:41:37,840
some trivial fearless extensions to

2574
01:41:37,840 --> 01:41:39,840
transport the booster key identifier and

2575
01:41:39,840 --> 01:41:42,159
the extra diffie-hellman key pair

2576
01:41:42,159 --> 01:41:45,040
um the key schedule enhancements the

2577
01:41:45,040 --> 01:41:47,199
highlands rapture took care of that

2578
01:41:47,199 --> 01:41:48,800
and then there will be some eep and deep

2579
01:41:48,800 --> 01:41:50,400
extensions

2580
01:41:50,400 --> 01:41:53,040
required to leverage a new tls proof and

2581
01:41:53,040 --> 01:41:54,639
knowledge handshake

2582
01:41:54,639 --> 01:41:56,960
and the open questions we have is how

2583
01:41:56,960 --> 01:41:59,360
many documents do we need to

2584
01:41:59,360 --> 01:42:01,840
to close his work off with the holland

2585
01:42:01,840 --> 01:42:04,000
draft for the extended key schedule

2586
01:42:04,000 --> 01:42:05,679
and but for the work we want to define

2587
01:42:05,679 --> 01:42:07,199
this there's two major pieces of work

2588
01:42:07,199 --> 01:42:09,199
left one is uh

2589
01:42:09,199 --> 01:42:11,920
defining the tls extensions and two is

2590
01:42:11,920 --> 01:42:13,760
defining exactly how you leverage those

2591
01:42:13,760 --> 01:42:16,800
tls extensions inside in an eep exchange

2592
01:42:16,800 --> 01:42:19,280
and so should that be one document that

2593
01:42:19,280 --> 01:42:20,960
falls under emu

2594
01:42:20,960 --> 01:42:22,800
should it be a short tls working group

2595
01:42:22,800 --> 01:42:24,320
draft that justifies with this

2596
01:42:24,320 --> 01:42:25,840
extensions

2597
01:42:25,840 --> 01:42:29,040
um and those those are the open

2598
01:42:29,040 --> 01:42:30,080
questions we have

2599
01:42:30,080 --> 01:42:32,080
uh and when we discussed this emu the

2600
01:42:32,080 --> 01:42:33,920
recommendation was presented tls and get

2601
01:42:33,920 --> 01:42:36,239
some feedback from here

2602
01:42:36,239 --> 01:42:42,719
i think that's the last slide

2603
01:42:42,719 --> 01:42:46,000
watson were you in the queue still

2604
01:42:46,000 --> 01:42:49,440
so i i rejoined for this draft um okay

2605
01:42:49,440 --> 01:42:52,080
go ahead you're first all right uh

2606
01:42:52,080 --> 01:42:53,920
watson live cloudflare in case anybody

2607
01:42:53,920 --> 01:42:55,119
didn't

2608
01:42:55,119 --> 01:42:58,320
here all right um so one i

2609
01:42:58,320 --> 01:43:02,400
do not think this draft actually

2610
01:43:02,400 --> 01:43:05,040
uses the security properties of tls and

2611
01:43:05,040 --> 01:43:06,400
the reason i think that

2612
01:43:06,400 --> 01:43:09,440
is tls was designed assuming the public

2613
01:43:09,440 --> 01:43:10,880
key is public

2614
01:43:10,880 --> 01:43:13,440
if you were to do this with ecdsa and

2615
01:43:13,440 --> 01:43:14,320
and um

2616
01:43:14,320 --> 01:43:16,960
raw public keys instead of this funny dh

2617
01:43:16,960 --> 01:43:18,400
pre-handshake thing

2618
01:43:18,400 --> 01:43:20,080
it would be totally broken because any

2619
01:43:20,080 --> 01:43:21,600
attacker could look at the

2620
01:43:21,600 --> 01:43:24,239
at the east at the easy dsa signature

2621
01:43:24,239 --> 01:43:26,000
recompute the public key

2622
01:43:26,000 --> 01:43:28,560
so clearly it doesn't compose that way

2623
01:43:28,560 --> 01:43:29,040
and so

2624
01:43:29,040 --> 01:43:30,320
now you have to answer a security

2625
01:43:30,320 --> 01:43:32,719
question okay well did what how do you

2626
01:43:32,719 --> 01:43:35,119
preserve that property when you're

2627
01:43:35,119 --> 01:43:36,880
composing it with tls which wasn't

2628
01:43:36,880 --> 01:43:38,880
designed to have this property

2629
01:43:38,880 --> 01:43:40,239
i feel like there's a whole bunch of

2630
01:43:40,239 --> 01:43:42,400
changes to tls

2631
01:43:42,400 --> 01:43:45,600
versus potentially defining a new

2632
01:43:45,600 --> 01:43:47,520
handshake that uses

2633
01:43:47,520 --> 01:43:50,880
asymmetric asymmetric secret keys

2634
01:43:50,880 --> 01:43:53,760
and then as as just another sort of

2635
01:43:53,760 --> 01:43:56,159
authentication

2636
01:43:56,159 --> 01:43:58,159
and another sort of authentication

2637
01:43:58,159 --> 01:43:59,490
mechanism

2638
01:43:59,490 --> 01:44:02,580
[Music]

2639
01:44:04,840 --> 01:44:07,840
inside

2640
01:44:10,159 --> 01:44:14,879
hmm okay i need to think about that um

2641
01:44:15,040 --> 01:44:18,800
because well we're just trying to mimic

2642
01:44:18,800 --> 01:44:20,080
exactly what dpp does

2643
01:44:20,080 --> 01:44:23,280
which is um the

2644
01:44:23,280 --> 01:44:25,679
network proves to the server sorry the

2645
01:44:25,679 --> 01:44:26,800
network proves the device

2646
01:44:26,800 --> 01:44:28,480
that knows the public key to boost your

2647
01:44:28,480 --> 01:44:30,000
public key without them

2648
01:44:30,000 --> 01:44:31,679
to boost your public key transmitting

2649
01:44:31,679 --> 01:44:34,000
clear text over the over the wire from

2650
01:44:34,000 --> 01:44:35,440
the client to the server

2651
01:44:35,440 --> 01:44:37,760
we're not really trying to use digital

2652
01:44:37,760 --> 01:44:38,960
signatures

2653
01:44:38,960 --> 01:44:42,080
over that public key at all and this is

2654
01:44:42,080 --> 01:44:42,639
kind of

2655
01:44:42,639 --> 01:44:49,840
independent of um independent of

2656
01:44:52,400 --> 01:44:54,080
it's dependent of that the client

2657
01:44:54,080 --> 01:44:55,520
knowing the

2658
01:44:55,520 --> 01:44:57,119
the server certificate you could still

2659
01:44:57,119 --> 01:44:58,400
potentially do certificate-based

2660
01:44:58,400 --> 01:45:00,400
authentication on top of this as well

2661
01:45:00,400 --> 01:45:01,920
it's kind of a second authentication

2662
01:45:01,920 --> 01:45:05,440
mechanism that you would use

2663
01:45:10,080 --> 01:45:12,960
okay hurry up

2664
01:45:14,080 --> 01:45:16,480
so i'm not like persuaded that this has

2665
01:45:16,480 --> 01:45:18,239
the same security properties as tls at

2666
01:45:18,239 --> 01:45:18,800
all

2667
01:45:18,800 --> 01:45:20,239
um in particular those tls always i

2668
01:45:20,239 --> 01:45:21,440
think is the server and the fact that

2669
01:45:21,440 --> 01:45:22,320
you're not authentic in the server

2670
01:45:22,320 --> 01:45:23,520
strategy is having some

2671
01:45:23,520 --> 01:45:25,440
like like i'm not sure how to reason

2672
01:45:25,440 --> 01:45:26,639
about that at all and

2673
01:45:26,639 --> 01:45:29,760
as watson suggests um you know this also

2674
01:45:29,760 --> 01:45:30,000
is

2675
01:45:30,000 --> 01:45:33,119
is weirdly not uh um not generically

2676
01:45:33,119 --> 01:45:33,840
impossible

2677
01:45:33,840 --> 01:45:36,480
um so i guess i'd like to unders i i

2678
01:45:36,480 --> 01:45:36,960
bend

2679
01:45:36,960 --> 01:45:40,080
beneath says you know um uh you know we

2680
01:45:40,080 --> 01:45:40,400
don't

2681
01:45:40,400 --> 01:45:42,000
in the chat about like we don't really

2682
01:45:42,000 --> 01:45:44,239
haven't haven't analyzed dpp either um

2683
01:45:44,239 --> 01:45:45,119
so i'd like to understand the

2684
01:45:45,119 --> 01:45:47,920
requirements but um uh in particular

2685
01:45:47,920 --> 01:45:50,320
um do you have to use exactly the same

2686
01:45:50,320 --> 01:45:52,159
keying material which you're

2687
01:45:52,159 --> 01:45:53,760
personally using or can we have a

2688
01:45:53,760 --> 01:45:55,360
different set of key material so

2689
01:45:55,360 --> 01:45:57,199
um in email i suggested for instance

2690
01:45:57,199 --> 01:45:59,040
having a separate pre-shared key

2691
01:45:59,040 --> 01:46:02,400
and um as well as the um

2692
01:46:02,400 --> 01:46:04,560
the the clients keeper um is that

2693
01:46:04,560 --> 01:46:07,040
imperative

2694
01:46:08,719 --> 01:46:10,560
so well what we're trying to do is reuse

2695
01:46:10,560 --> 01:46:12,080
exactly the same key pair that's on the

2696
01:46:12,080 --> 01:46:14,159
dpp that's defined for dpp and

2697
01:46:14,159 --> 01:46:16,080
could be printed on the label of the

2698
01:46:16,080 --> 01:46:17,679
supplement

2699
01:46:17,679 --> 01:46:19,040
so we're trying to use we're trying to

2700
01:46:19,040 --> 01:46:20,719
pick you back on top of exactly what

2701
01:46:20,719 --> 01:46:21,440
dpps

2702
01:46:21,440 --> 01:46:23,520
has defined for the subsequent bootstrap

2703
01:46:23,520 --> 01:46:25,760
against the wi-fi

2704
01:46:25,760 --> 01:46:28,880
oh okay um uh is uh

2705
01:46:28,880 --> 01:46:30,480
do you care which direction which do you

2706
01:46:30,480 --> 01:46:33,839
care who is the client who's the server

2707
01:46:35,600 --> 01:46:39,199
so this so dpp

2708
01:46:39,199 --> 01:46:41,840
gpp um allows the proof to happen in

2709
01:46:41,840 --> 01:46:43,119
both directions but

2710
01:46:43,119 --> 01:46:46,560
this draft is just it's the the

2711
01:46:46,560 --> 01:46:51,040
um the the client is just trying to

2712
01:46:51,040 --> 01:46:54,080
satisfy sorry do you care

2713
01:47:00,320 --> 01:47:03,440
the supplicant is the tls client

2714
01:47:03,440 --> 01:47:06,320
does it have to be if that's

2715
01:47:07,040 --> 01:47:09,760
for for this to work i think the

2716
01:47:09,760 --> 01:47:10,960
supplement would have to be a

2717
01:47:10,960 --> 01:47:14,880
those clients yes why

2718
01:47:17,440 --> 01:47:20,239
because you're perfect

2719
01:47:20,880 --> 01:47:22,960
i mean that the the the core the core

2720
01:47:22,960 --> 01:47:24,480
design of this mechanism

2721
01:47:24,480 --> 01:47:27,440
is that this the cord is uh the tls is

2722
01:47:27,440 --> 01:47:27,920
designed

2723
01:47:27,920 --> 01:47:30,159
to have um mandatory server

2724
01:47:30,159 --> 01:47:31,360
authentication optional client

2725
01:47:31,360 --> 01:47:32,080
authentication

2726
01:47:32,080 --> 01:47:33,199
and you're inverting that you're

2727
01:47:33,199 --> 01:47:34,719
inverting those invariants and you're

2728
01:47:34,719 --> 01:47:35,760
creating

2729
01:47:35,760 --> 01:47:37,040
you're and you're creating mandatory

2730
01:47:37,040 --> 01:47:38,320
client authentication optional server

2731
01:47:38,320 --> 01:47:39,199
authentication

2732
01:47:39,199 --> 01:47:41,280
and that is the and that is the course

2733
01:47:41,280 --> 01:47:42,480
of the source of the disruption in the

2734
01:47:42,480 --> 01:47:44,000
requested distilled state machine

2735
01:47:44,000 --> 01:47:46,880
and so so the question i'm asking is

2736
01:47:46,880 --> 01:47:47,280
okay

2737
01:47:47,280 --> 01:47:48,719
if you if you invert that if you invert

2738
01:47:48,719 --> 01:47:50,639
those and have the person who is

2739
01:47:50,639 --> 01:47:53,360
the person authenticating be be the

2740
01:47:53,360 --> 01:47:54,480
supplicant

2741
01:47:54,480 --> 01:47:57,679
um then uh that then it will

2742
01:47:57,679 --> 01:47:58,719
work much better than the tail state

2743
01:47:58,719 --> 01:47:59,920
machine and the other and their branch

2744
01:47:59,920 --> 01:48:02,560
is all the problem

2745
01:48:03,520 --> 01:48:05,040
okay well then we need to think about

2746
01:48:05,040 --> 01:48:08,000
how that

2747
01:48:09,440 --> 01:48:11,199
well that well okay so that seems kind

2748
01:48:11,199 --> 01:48:12,719
of that seems kind of strange as well

2749
01:48:12,719 --> 01:48:13,760
though in that the

2750
01:48:13,760 --> 01:48:15,119
the um the client who's trying to

2751
01:48:15,119 --> 01:48:16,800
connect to the network is going to turn

2752
01:48:16,800 --> 01:48:18,159
around to be the server for the purpose

2753
01:48:18,159 --> 01:48:19,920
of this exchange

2754
01:48:19,920 --> 01:48:21,520
and the client will advertise something

2755
01:48:21,520 --> 01:48:23,520
to the network and then the network will

2756
01:48:23,520 --> 01:48:25,360
turn around and initiate a tls

2757
01:48:25,360 --> 01:48:28,880
handshake with the client

2758
01:48:29,840 --> 01:48:31,119
so i mean there's a bunch of the pad

2759
01:48:31,119 --> 01:48:33,040
about exactly what's happening in the

2760
01:48:33,040 --> 01:48:36,400
in the chat but like um but like the

2761
01:48:36,400 --> 01:48:40,080
the core design of tls is that the

2762
01:48:40,080 --> 01:48:41,920
public keys publicly authentication is

2763
01:48:41,920 --> 01:48:44,320
done by the um

2764
01:48:44,320 --> 01:48:46,000
is done by the server and not

2765
01:48:46,000 --> 01:48:47,679
necessarily about the client and so

2766
01:48:47,679 --> 01:48:48,960
you're not authenticating the server you

2767
01:48:48,960 --> 01:48:50,080
know the server is like if

2768
01:48:50,080 --> 01:48:51,040
you look at your handshake the server

2769
01:48:51,040 --> 01:48:53,199
like isn't signing um so it's just like

2770
01:48:53,199 --> 01:48:53,679
this doesn't

2771
01:48:53,679 --> 01:48:54,960
it's not really like exactly the same

2772
01:48:54,960 --> 01:48:56,480
number errors is tls but it's not kill

2773
01:48:56,480 --> 01:48:57,199
us at all

2774
01:48:57,199 --> 01:48:58,639
um any case like we're probably not

2775
01:48:58,639 --> 01:48:59,920
going to resolve this here so let me

2776
01:48:59,920 --> 01:49:01,119
just take a step back

2777
01:49:01,119 --> 01:49:03,040
which is like this is nowhere near ready

2778
01:49:03,040 --> 01:49:04,800
for adoption um what we need

2779
01:49:04,800 --> 01:49:06,639
is a clear description of the actual

2780
01:49:06,639 --> 01:49:07,760
requirements so we can actually try to

2781
01:49:07,760 --> 01:49:08,480
design something

2782
01:49:08,480 --> 01:49:10,719
that like works with tls um and doesn't

2783
01:49:10,719 --> 01:49:11,679
like just like

2784
01:49:11,679 --> 01:49:14,560
like close date machine um so not

2785
01:49:26,960 --> 01:49:28,480
the queue needs available be really

2786
01:49:28,480 --> 01:49:30,239
quick because we're basically we had

2787
01:49:30,239 --> 01:49:33,520
about two minutes left on this topic so

2788
01:49:33,520 --> 01:49:35,760
thanks

2789
01:49:40,800 --> 01:49:44,239
i assume i'm next thank you

2790
01:49:44,400 --> 01:49:47,040
um just with respect to the security

2791
01:49:47,040 --> 01:49:47,920
properties i

2792
01:49:47,920 --> 01:49:50,239
i actually agree with ecker's analysis

2793
01:49:50,239 --> 01:49:51,040
that uh

2794
01:49:51,040 --> 01:49:54,239
watson's that uh the secret public key

2795
01:49:54,239 --> 01:49:58,400
changes things but the the purpose of

2796
01:49:58,400 --> 01:50:01,599
the draft this is based on is such that

2797
01:50:01,599 --> 01:50:02,880
it shouldn't

2798
01:50:02,880 --> 01:50:05,679
be possible to weaken the tls guarantees

2799
01:50:05,679 --> 01:50:07,840
no matter what you stick in there

2800
01:50:07,840 --> 01:50:11,040
um and so uh

2801
01:50:11,040 --> 01:50:13,280
this should avoid the need for as much

2802
01:50:13,280 --> 01:50:16,960
analysis as you might otherwise think

2803
01:50:20,080 --> 01:50:23,360
okay uh this is uh scott fleur uh

2804
01:50:23,360 --> 01:50:25,520
basically one of the things is to note

2805
01:50:25,520 --> 01:50:27,280
is that this is not

2806
01:50:27,280 --> 01:50:30,159
this is uh this is a different use of

2807
01:50:30,159 --> 01:50:32,400
cryptography and it really needs to

2808
01:50:32,400 --> 01:50:33,040
undergo

2809
01:50:33,040 --> 01:50:39,840
some cfrg analysis

2810
01:50:44,239 --> 01:50:46,800
okay so i'll take all that okay this

2811
01:50:46,800 --> 01:50:48,560
sounds a lot more work

2812
01:50:48,560 --> 01:50:52,239
uh hi this is a um a quick comment

2813
01:50:52,239 --> 01:50:55,360
so i while it's not ready for

2814
01:50:55,360 --> 01:50:58,400
working group last call yet um

2815
01:50:58,400 --> 01:51:01,520
i think this is uh useful work

2816
01:51:01,520 --> 01:51:03,679
and should be done in the idf and dls

2817
01:51:03,679 --> 01:51:04,639
working group

2818
01:51:04,639 --> 01:51:07,760
in particular because um after reading

2819
01:51:07,760 --> 01:51:11,440
the dbp specification i realized that

2820
01:51:11,440 --> 01:51:14,320
it it basically replicates a lot of the

2821
01:51:14,320 --> 01:51:15,360
the

2822
01:51:15,360 --> 01:51:19,199
things in your dls handshake for no

2823
01:51:19,199 --> 01:51:22,480
good reason and all these devices then

2824
01:51:22,480 --> 01:51:23,040
have to

2825
01:51:23,040 --> 01:51:26,000
for onboarding have to then implement

2826
01:51:26,000 --> 01:51:28,159
all sorts of different protocols

2827
01:51:28,159 --> 01:51:30,960
which make it very difficult on on lower

2828
01:51:30,960 --> 01:51:35,840
end devices

2829
01:51:44,880 --> 01:51:47,760
uh thanks for the presentation owen i

2830
01:51:47,760 --> 01:51:48,000
think

2831
01:51:48,000 --> 01:51:50,000
there's more to discuss on this

2832
01:51:50,000 --> 01:51:51,599
particular topic which we'll have to

2833
01:51:51,599 --> 01:51:52,560
take to the list

2834
01:51:52,560 --> 01:51:56,239
so next up we'll have uh opaque and tls

2835
01:51:56,239 --> 01:51:59,920
one three is sophia on yes

2836
01:51:59,920 --> 01:52:01,679
so thank you very much joseph i'm

2837
01:52:01,679 --> 01:52:03,840
foreign allowing me to speak here

2838
01:52:03,840 --> 01:52:06,000
so today on behalf of the authors which

2839
01:52:06,000 --> 01:52:07,840
are nick sullivan and christopher wood

2840
01:52:07,840 --> 01:52:09,360
i'm going to present a draft that

2841
01:52:09,360 --> 01:52:11,199
basically aims at integrating opaque

2842
01:52:11,199 --> 01:52:13,360
with tls 1.3 my name is sophia and i'm

2843
01:52:13,360 --> 01:52:14,320
from clavler

2844
01:52:14,320 --> 01:52:17,840
that's the slide please

2845
01:52:20,480 --> 01:52:23,440
is it working okay oh yes okay thank you

2846
01:52:23,440 --> 01:52:24,960
um so just to give a little bit of

2847
01:52:24,960 --> 01:52:26,960
context so it is opaque opaque is a new

2848
01:52:26,960 --> 01:52:28,639
mutual authentication method that is

2849
01:52:28,639 --> 01:52:30,080
currently being standardized by

2850
01:52:30,080 --> 01:52:32,880
cfrg and you can find it in the draft

2851
01:52:32,880 --> 01:52:34,320
that i have listed here

2852
01:52:34,320 --> 01:52:35,520
and as i said it's a mutual

2853
01:52:35,520 --> 01:52:37,119
authentication method that enables

2854
01:52:37,119 --> 01:52:38,239
establishment of

2855
01:52:38,239 --> 01:52:41,599
of an an authenticated cryptographic key

2856
01:52:41,599 --> 01:52:43,280
between a client and a server

2857
01:52:43,280 --> 01:52:45,199
based on a user's password without ever

2858
01:52:45,199 --> 01:52:46,960
revealing the password to servers or

2859
01:52:46,960 --> 01:52:48,639
other entities other than the client

2860
01:52:48,639 --> 01:52:50,719
machine and the idea opportunities is

2861
01:52:50,719 --> 01:52:52,080
basically trying to solve

2862
01:52:52,080 --> 01:52:53,599
the problem that most of the time

2863
01:52:53,599 --> 01:52:55,440
passwords are stored in servers

2864
01:52:55,440 --> 01:52:57,040
and when the server gets compromised and

2865
01:52:57,040 --> 01:52:59,520
the passwords get compromised as well

2866
01:52:59,520 --> 01:53:01,599
um as it is written right now opaque

2867
01:53:01,599 --> 01:53:03,040
consists in two phases

2868
01:53:03,040 --> 01:53:05,040
uh the first one is a registration phase

2869
01:53:05,040 --> 01:53:07,199
in which obviously a user is

2870
01:53:07,199 --> 01:53:10,000
registering the password but not the

2871
01:53:10,000 --> 01:53:11,840
password server rather

2872
01:53:11,840 --> 01:53:13,920
something generated around it and this

2873
01:53:13,920 --> 01:53:15,599
is stored in the server as encrypted

2874
01:53:15,599 --> 01:53:16,400
credential

2875
01:53:16,400 --> 01:53:18,719
the results of this mechanism also

2876
01:53:18,719 --> 01:53:20,560
generate a key pair for the client and

2877
01:53:20,560 --> 01:53:21,760
for the server as well

2878
01:53:21,760 --> 01:53:23,599
which is important because it's an

2879
01:53:23,599 --> 01:53:24,800
important part

2880
01:53:24,800 --> 01:53:26,880
that is going to be put into the second

2881
01:53:26,880 --> 01:53:28,239
phase of the protocol

2882
01:53:28,239 --> 01:53:29,840
the second phase of the protocol is the

2883
01:53:29,840 --> 01:53:31,920
authentication preface which is the one

2884
01:53:31,920 --> 01:53:32,159
that

2885
01:53:32,159 --> 01:53:35,280
we are interested uh in it today and

2886
01:53:35,280 --> 01:53:36,719
basically the idea is that

2887
01:53:36,719 --> 01:53:40,080
in the authentication phase the client

2888
01:53:40,080 --> 01:53:41,760
proves the knowledge of the password to

2889
01:53:41,760 --> 01:53:43,199
the server and both client and the

2890
01:53:43,199 --> 01:53:44,480
servers agree on a mutually

2891
01:53:44,480 --> 01:53:46,719
authenticated shared secret

2892
01:53:46,719 --> 01:53:48,639
so the goal of the draft presented then

2893
01:53:48,639 --> 01:53:50,000
presenting today is to combine

2894
01:53:50,000 --> 01:53:51,520
password-based authentication with

2895
01:53:51,520 --> 01:53:54,159
traditional pki-based authentication

2896
01:53:54,159 --> 01:53:57,119
next slide please

2897
01:53:57,360 --> 01:53:59,679
okay so one of the ideas has already

2898
01:53:59,679 --> 01:54:00,960
defined a little bit what the

2899
01:54:00,960 --> 01:54:01,760
authentication

2900
01:54:01,760 --> 01:54:04,320
phase is but it basically consists on a

2901
01:54:04,320 --> 01:54:05,840
concurrent oprf

2902
01:54:05,840 --> 01:54:08,480
mechanism and a key exchange flow and as

2903
01:54:08,480 --> 01:54:09,840
i said one of the results of the

2904
01:54:09,840 --> 01:54:11,360
registration phase is that you were

2905
01:54:11,360 --> 01:54:13,040
going to have a key pair for the client

2906
01:54:13,040 --> 01:54:14,000
and the server

2907
01:54:14,000 --> 01:54:17,760
so they didn't in order to to achieve um

2908
01:54:17,760 --> 01:54:20,960
to achieve the proving of the knowledge

2909
01:54:20,960 --> 01:54:22,719
of the password by the client and the

2910
01:54:22,719 --> 01:54:24,239
both of the client and the server agree

2911
01:54:24,239 --> 01:54:25,760
on a mutually authenticated shared

2912
01:54:25,760 --> 01:54:27,760
secret is to use tls for that

2913
01:54:27,760 --> 01:54:29,760
and how we combine this in tls is by

2914
01:54:29,760 --> 01:54:31,520
less than two mechanisms the first one

2915
01:54:31,520 --> 01:54:32,639
called opec sign

2916
01:54:32,639 --> 01:54:34,719
and the second one called opaque x in

2917
01:54:34,719 --> 01:54:36,560
opex sign basically the idea is to have

2918
01:54:36,560 --> 01:54:38,639
it as part of the handshake itself

2919
01:54:38,639 --> 01:54:40,560
and the keypads that we've generated for

2920
01:54:40,560 --> 01:54:41,920
the client and for the server

2921
01:54:41,920 --> 01:54:44,159
act as sign-in keys and they are going

2922
01:54:44,159 --> 01:54:45,920
to be used for the authentication in the

2923
01:54:45,920 --> 01:54:47,360
tls handshake

2924
01:54:47,360 --> 01:54:49,040
this mechanism cannot be used in

2925
01:54:49,040 --> 01:54:50,560
conjunction with certificate-based

2926
01:54:50,560 --> 01:54:51,520
authentication

2927
01:54:51,520 --> 01:54:53,440
if it's needed to be used with in

2928
01:54:53,440 --> 01:54:55,199
conjunction to with certificate-based

2929
01:54:55,199 --> 01:54:57,199
authentication then it can be used as a

2930
01:54:57,199 --> 01:54:58,719
post-handshake mechanism

2931
01:54:58,719 --> 01:55:00,320
in which you first you will have a tls

2932
01:55:00,320 --> 01:55:02,639
handshaking which you authenticated with

2933
01:55:02,639 --> 01:55:05,199
a certificate with a certificate

2934
01:55:05,199 --> 01:55:07,840
and after that uh you can use exported

2935
01:55:07,840 --> 01:55:09,360
authenticators to

2936
01:55:09,360 --> 01:55:12,000
uh authenticate it with the password the

2937
01:55:12,000 --> 01:55:13,040
second mechanism

2938
01:55:13,040 --> 01:55:15,199
is called pickaxe and in this one is

2939
01:55:15,199 --> 01:55:16,880
also part of the handshake but

2940
01:55:16,880 --> 01:55:19,040
uh the keepers that were generated for

2941
01:55:19,040 --> 01:55:20,639
the client and for the server will not

2942
01:55:20,639 --> 01:55:21,840
be used for signing

2943
01:55:21,840 --> 01:55:24,320
but rather they will be divi monkeys and

2944
01:55:24,320 --> 01:55:24,960
the idea

2945
01:55:24,960 --> 01:55:28,080
is to generate a shared secret the

2946
01:55:28,080 --> 01:55:30,080
secret is fed into the key schedule for

2947
01:55:30,080 --> 01:55:31,840
the handshake which uses the certificate

2948
01:55:31,840 --> 01:55:33,119
based authentication and

2949
01:55:33,119 --> 01:55:34,639
establishes the share key using

2950
01:55:34,639 --> 01:55:36,639
difficult in this case there's no

2951
01:55:36,639 --> 01:55:38,800
unilateral authentication because mutual

2952
01:55:38,800 --> 01:55:40,480
authentication is only achieved

2953
01:55:40,480 --> 01:55:42,960
after explicitly processing the finished

2954
01:55:42,960 --> 01:55:45,119
messages

2955
01:55:45,119 --> 01:55:47,520
and these two uh mechanisms are an

2956
01:55:47,520 --> 01:55:49,280
extension that gets advertised in the

2957
01:55:49,280 --> 01:55:50,080
clan hello and

2958
01:55:50,080 --> 01:55:54,960
all the uh messages next slide please

2959
01:55:55,440 --> 01:55:57,760
okay and just to finalize there's still

2960
01:55:57,760 --> 01:55:59,199
some need to actually look into the

2961
01:55:59,199 --> 01:56:01,199
security privacy considerations that

2962
01:56:01,199 --> 01:56:03,280
this extension will actually have

2963
01:56:03,280 --> 01:56:05,440
one of the pr one of the considerations

2964
01:56:05,440 --> 01:56:07,119
what we're thinking about in the privacy

2965
01:56:07,119 --> 01:56:07,920
perspective

2966
01:56:07,920 --> 01:56:10,239
is that of course with this mechanism uh

2967
01:56:10,239 --> 01:56:12,159
the identity of the client is not hidden

2968
01:56:12,159 --> 01:56:13,520
because you send the identity of the

2969
01:56:13,520 --> 01:56:14,159
client

2970
01:56:14,159 --> 01:56:16,159
as part of the extension in the client

2971
01:56:16,159 --> 01:56:17,360
hello message

2972
01:56:17,360 --> 01:56:19,520
and this could be a problem um if you're

2973
01:56:19,520 --> 01:56:21,360
using this mechanism with exported

2974
01:56:21,360 --> 01:56:22,719
authenticators you don't have this

2975
01:56:22,719 --> 01:56:24,239
problem because at the beginning you

2976
01:56:24,239 --> 01:56:25,280
already have

2977
01:56:25,280 --> 01:56:27,599
a tls connection when when you're using

2978
01:56:27,599 --> 01:56:28,719
this mechanism

2979
01:56:28,719 --> 01:56:30,000
you can further use something like

2980
01:56:30,000 --> 01:56:32,159
encrypted client hello uh to hide the

2981
01:56:32,159 --> 01:56:32,960
identity

2982
01:56:32,960 --> 01:56:34,239
and if you want to look at the drop

2983
01:56:34,239 --> 01:56:36,400
location it is found here

2984
01:56:36,400 --> 01:56:38,080
with that thank you very much and take

2985
01:56:38,080 --> 01:56:39,840
any questions or discussions

2986
01:56:39,840 --> 01:56:43,840
comments if there are any thank you

2987
01:56:48,719 --> 01:56:50,239
and i'm supposed to be calling them yeah

2988
01:56:50,239 --> 01:56:53,919
okay so you go then jeffy

2989
01:56:54,080 --> 01:56:56,560
hi this has been i had typed this into

2990
01:56:56,560 --> 01:56:57,520
the chat but

2991
01:56:57,520 --> 01:57:00,320
uh if you could go back to slide three

2992
01:57:00,320 --> 01:57:01,199
um

2993
01:57:01,199 --> 01:57:04,320
i'm not sure i quite understood whether

2994
01:57:04,320 --> 01:57:06,000
or not so

2995
01:57:06,000 --> 01:57:08,960
it seems to be saying well i guess my

2996
01:57:08,960 --> 01:57:10,000
real question is can i

2997
01:57:10,000 --> 01:57:13,119
use opaque to authenticate

2998
01:57:13,119 --> 01:57:15,199
the client using the password but then

2999
01:57:15,199 --> 01:57:16,400
use the

3000
01:57:16,400 --> 01:57:18,400
certificate to authenticate the server

3001
01:57:18,400 --> 01:57:21,199
in the same handshake

3002
01:57:21,199 --> 01:57:23,599
ah no well you will have is that you

3003
01:57:23,599 --> 01:57:25,280
will have a certificate-based

3004
01:57:25,280 --> 01:57:26,480
authentication

3005
01:57:26,480 --> 01:57:29,599
and then you can use um opaque for the

3006
01:57:29,599 --> 01:57:32,080
post-handshake process to authenticate

3007
01:57:32,080 --> 01:57:33,440
it could be mutual

3008
01:57:33,440 --> 01:57:38,880
but yeah okay

3009
01:57:38,880 --> 01:57:40,560
so i like to get a sense of how many

3010
01:57:40,560 --> 01:57:42,480
people have uh read this draft so i'm

3011
01:57:42,480 --> 01:57:44,719
going to do a show of hands poll here

3012
01:57:44,719 --> 01:57:45,840
because i think i figured out how to do

3013
01:57:45,840 --> 01:57:53,599
it so let's do that

3014
01:57:53,599 --> 01:57:55,119
keep asking questions but just to let

3015
01:57:55,119 --> 01:57:56,480
you know what's it it's in the it's

3016
01:57:56,480 --> 01:57:57,440
going

3017
01:57:57,440 --> 01:57:58,800
because we've talked about this a couple

3018
01:57:58,800 --> 01:58:07,840
times before

3019
01:58:08,560 --> 01:58:20,080
uh victor go ahead nope

3020
01:58:20,080 --> 01:58:21,040
all right so i think that's probably

3021
01:58:21,040 --> 01:58:22,480
good we had about seven people raise

3022
01:58:22,480 --> 01:58:23,520
their hand that they did read it and

3023
01:58:23,520 --> 01:58:24,480
about 23

3024
01:58:24,480 --> 01:58:27,679
didn't out of 94. um

3025
01:58:27,679 --> 01:58:29,520
uh i guess what i want to do is because

3026
01:58:29,520 --> 01:58:30,880
we've talked about this a couple times

3027
01:58:30,880 --> 01:58:32,719
is make sure that people start to review

3028
01:58:32,719 --> 01:58:33,679
this and that we

3029
01:58:33,679 --> 01:58:35,599
see whether or not the working group is

3030
01:58:35,599 --> 01:58:37,440
going to be interested in adopting this

3031
01:58:37,440 --> 01:58:49,839
on the list

3032
01:58:57,840 --> 01:59:02,480
i believe if there's no other um

3033
01:59:02,480 --> 01:59:04,080
nobody else wants to say anything that's

3034
01:59:04,080 --> 01:59:06,880
it for our session

3035
01:59:10,800 --> 01:59:17,119
i think that's it thank you everybody

3036
01:59:17,119 --> 01:59:31,839
next one

3037
01:59:37,599 --> 01:59:39,679
and

