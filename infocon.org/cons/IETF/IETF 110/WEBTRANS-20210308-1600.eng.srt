1
00:00:27,840 --> 00:00:29,039
but we can

2
00:00:29,039 --> 00:00:31,199
hold on for a few more minutes to give

3
00:00:31,199 --> 00:00:32,960
people time to trickle in and then we'll

4
00:00:32,960 --> 00:00:35,920
get started shortly

5
00:00:38,480 --> 00:00:42,160
is my volume all right

6
00:00:43,200 --> 00:00:44,800
volume is all right but you're cutting

7
00:00:44,800 --> 00:00:47,038
out

8
00:00:48,480 --> 00:00:51,680
is this better yes so

9
00:00:51,680 --> 00:00:53,680
so far so good say a few more words

10
00:00:53,680 --> 00:00:55,280
victor just in case

11
00:00:55,280 --> 00:00:58,719
one two three four five six seven

12
00:00:58,719 --> 00:01:03,920
all right okay thank you

13
00:01:10,080 --> 00:01:12,560
if our other presenters wanna just say

14
00:01:12,560 --> 00:01:14,000
hi to test their microphones that's

15
00:01:14,000 --> 00:01:16,960
probably a good idea as well

16
00:01:20,000 --> 00:01:21,680
hey this is will law good morning how's

17
00:01:21,680 --> 00:01:27,840
this microphone

18
00:01:38,880 --> 00:01:40,960
they're showing up as unmuted but i

19
00:01:40,960 --> 00:01:43,600
didn't hear anything

20
00:01:43,600 --> 00:01:46,560
likely because i didn't say that much oh

21
00:01:46,560 --> 00:01:47,840
okay now we can hear you

22
00:01:47,840 --> 00:01:55,840
cool thanks

23
00:02:02,960 --> 00:02:04,799
by the way for everyone speaking it

24
00:02:04,799 --> 00:02:08,080
sounds like uh miraco still has this bug

25
00:02:08,080 --> 00:02:09,679
where it requests the microphone only

26
00:02:09,679 --> 00:02:11,280
when you unmute which means that it

27
00:02:11,280 --> 00:02:11,760
takes

28
00:02:11,760 --> 00:02:15,200
a few seconds for the microphone to

29
00:02:15,200 --> 00:02:15,840
start

30
00:02:15,840 --> 00:02:17,760
opening so once you click just wait for

31
00:02:17,760 --> 00:02:19,360
a bit and then start talking otherwise

32
00:02:19,360 --> 00:02:23,840
the beginning will be clipped down

33
00:02:40,800 --> 00:02:42,640
david this is willow repeating my mic

34
00:02:42,640 --> 00:02:44,560
test i was pretty sure it was too short

35
00:02:44,560 --> 00:02:45,120
last time

36
00:02:45,120 --> 00:02:51,840
can you just confirm this is okay yeah

37
00:03:02,840 --> 00:03:05,840
okay

38
00:03:06,800 --> 00:03:09,120
are we still waiting or do we want to

39
00:03:09,120 --> 00:03:11,599
get started

40
00:03:12,080 --> 00:03:15,519
probably good to get started

41
00:03:16,840 --> 00:03:19,360
okay sure

42
00:03:19,360 --> 00:03:22,000
this is the web trans working group

43
00:03:22,000 --> 00:03:25,519
meeting at ietf 110

44
00:03:26,560 --> 00:03:29,599
a few meeting tips this session is being

45
00:03:29,599 --> 00:03:31,760
recorded

46
00:03:31,760 --> 00:03:34,000
you need a data tracker login to attend

47
00:03:34,000 --> 00:03:35,920
but it's automatic so you don't need to

48
00:03:35,920 --> 00:03:36,560
fill in

49
00:03:36,560 --> 00:03:38,959
the blue sheets you can join the session

50
00:03:38,959 --> 00:03:40,959
jabra via the data tracker meeting

51
00:03:40,959 --> 00:03:43,280
agenda just click on that

52
00:03:43,280 --> 00:03:45,599
please use headphones or an echo

53
00:03:45,599 --> 00:03:47,280
canceling speakerphone to avoid

54
00:03:47,280 --> 00:03:50,080
echo and state your full name before

55
00:03:50,080 --> 00:03:53,439
speaking so we can get it in the minutes

56
00:03:53,439 --> 00:03:56,080
uh just a few little tips on meet echo

57
00:03:56,080 --> 00:03:57,920
you enter the queue by

58
00:03:57,920 --> 00:04:00,560
pressing the hand raise your hand button

59
00:04:00,560 --> 00:04:01,120
and you

60
00:04:01,120 --> 00:04:04,000
leave by pressing it again when you call

61
00:04:04,000 --> 00:04:05,439
on you enable

62
00:04:05,439 --> 00:04:07,519
your audio to be heard and as david said

63
00:04:07,519 --> 00:04:10,080
it may take a few seconds to actually

64
00:04:10,080 --> 00:04:12,560
turn it on

65
00:04:12,560 --> 00:04:15,200
and you enable it by unmuting and

66
00:04:15,200 --> 00:04:17,120
disable by muting

67
00:04:17,120 --> 00:04:19,120
you can also enable view video it's

68
00:04:19,120 --> 00:04:20,478
separate from audio and

69
00:04:20,478 --> 00:04:23,280
not required

70
00:04:23,520 --> 00:04:25,280
so here's the note rel which is a

71
00:04:25,280 --> 00:04:28,639
reminder of itf policies

72
00:04:28,639 --> 00:04:31,680
and that's in bcp

73
00:04:31,680 --> 00:04:35,360
79 please read it and there's definitive

74
00:04:35,360 --> 00:04:37,120
information listed in the documents

75
00:04:37,120 --> 00:04:37,919
below

76
00:04:37,919 --> 00:04:39,440
if you want advice you can talk to the

77
00:04:39,440 --> 00:04:42,479
chairs or read these

78
00:04:42,479 --> 00:04:45,600
a little bit about this meeting yeah uh

79
00:04:45,600 --> 00:04:47,360
sorry uh on the previous slide i just

80
00:04:47,360 --> 00:04:50,320
also as usual want to uh highlight the

81
00:04:50,320 --> 00:04:51,759
atf world of conduct

82
00:04:51,759 --> 00:04:54,639
which this meeting is operating under er

83
00:04:54,639 --> 00:04:55,120
we've

84
00:04:55,120 --> 00:04:56,800
never had any issues in the web

85
00:04:56,800 --> 00:04:58,160
trans-working group in the past

86
00:04:58,160 --> 00:05:00,720
but let's keep it this way always be

87
00:05:00,720 --> 00:05:01,919
nice and polite

88
00:05:01,919 --> 00:05:04,880
and need to listen to other perspectives

89
00:05:04,880 --> 00:05:05,440
great

90
00:05:05,440 --> 00:05:08,800
thanks thank you um

91
00:05:08,800 --> 00:05:12,000
so uh the agenda is up there is

92
00:05:12,000 --> 00:05:15,840
a uh ether pad which we'd like people to

93
00:05:15,840 --> 00:05:16,639
take notes

94
00:05:16,639 --> 00:05:20,240
in uh and the jabber room

95
00:05:20,240 --> 00:05:22,840
um i believe we have a volunteer for

96
00:05:22,840 --> 00:05:24,400
javascribe

97
00:05:24,400 --> 00:05:29,198
that right and no takers is that true

98
00:05:29,840 --> 00:05:32,240
i don't remember if anyone has already

99
00:05:32,240 --> 00:05:34,000
volunteered please speak up now all

100
00:05:34,000 --> 00:05:34,400
right

101
00:05:34,400 --> 00:05:36,720
ellen friendel is uh in the jabber as

102
00:05:36,720 --> 00:05:38,560
jabra jobscribe alright thanks alan

103
00:05:38,560 --> 00:05:41,600
uh we do need minutes though could we

104
00:05:41,600 --> 00:05:42,400
have

105
00:05:42,400 --> 00:05:46,000
uh one or two volunteers please

106
00:05:50,160 --> 00:05:52,560
all right so our canary will uh will do

107
00:05:52,560 --> 00:05:53,919
some note-taking but he's also

108
00:05:53,919 --> 00:05:54,639
presenting

109
00:05:54,639 --> 00:05:57,759
could someone be back up and uh

110
00:05:57,759 --> 00:05:59,280
that way it's always easier when there

111
00:05:59,280 --> 00:06:07,840
are two people especially

112
00:06:16,319 --> 00:06:19,199
we are waiting to have a volunteer

113
00:06:19,199 --> 00:06:20,639
otherwise we're not going to start the

114
00:06:20,639 --> 00:06:21,919
session

115
00:06:21,919 --> 00:06:24,560
i know we all know to do people but come

116
00:06:24,560 --> 00:06:25,759
on please

117
00:06:25,759 --> 00:06:29,280
this is how we do business

118
00:06:31,520 --> 00:06:34,639
wanna draft somebody david uh lucas just

119
00:06:34,639 --> 00:06:36,479
volunteered thank you so much

120
00:06:36,479 --> 00:06:38,800
thank you very much you're a gentleman

121
00:06:38,800 --> 00:06:40,560
and a scholar

122
00:06:40,560 --> 00:06:43,360
all right so here's the agenda we've

123
00:06:43,360 --> 00:06:44,000
gone through

124
00:06:44,000 --> 00:06:46,240
most of the preliminaries from the chair

125
00:06:46,240 --> 00:06:49,360
uh we'll have a w3c update from will

126
00:06:49,360 --> 00:06:51,120
and victor will talk about web transfer

127
00:06:51,120 --> 00:06:52,560
of http 3.

128
00:06:52,560 --> 00:06:55,599
uh eric will cover http 2 um

129
00:06:55,599 --> 00:06:59,120
and then the chairs will wrap it up

130
00:06:59,120 --> 00:07:03,840
so over to will

131
00:07:04,639 --> 00:07:06,479
okay thank you good morning this is will

132
00:07:06,479 --> 00:07:08,479
law from akamai i'm also joined by

133
00:07:08,479 --> 00:07:11,440
dub 3c uh co-chair yanuvara brewery from

134
00:07:11,440 --> 00:07:14,080
mozilla so you can all read faster than

135
00:07:14,080 --> 00:07:15,599
i can talk but i'll go through these

136
00:07:15,599 --> 00:07:17,199
bullet points we just have two slides

137
00:07:17,199 --> 00:07:18,639
here on a quick update

138
00:07:18,639 --> 00:07:20,479
a couple of key decisions in prs

139
00:07:20,479 --> 00:07:22,479
following the last iet update on

140
00:07:22,479 --> 00:07:23,919
november 16th

141
00:07:23,919 --> 00:07:25,520
so at that point there was the ietf

142
00:07:25,520 --> 00:07:27,440
single transport decision so we've

143
00:07:27,440 --> 00:07:29,199
echoed the ramifications of that through

144
00:07:29,199 --> 00:07:30,000
the w3c

145
00:07:30,000 --> 00:07:32,000
removal of quick dash transport as an

146
00:07:32,000 --> 00:07:33,599
option while also

147
00:07:33,599 --> 00:07:35,120
while maintaining the web transport

148
00:07:35,120 --> 00:07:36,800
constructor

149
00:07:36,800 --> 00:07:38,800
the removal of mixins to concentrate on

150
00:07:38,800 --> 00:07:40,560
a more concrete api

151
00:07:40,560 --> 00:07:44,560
around http3 mapping of web transport

152
00:07:44,560 --> 00:07:47,440
methods to quick protocol actions

153
00:07:47,440 --> 00:07:49,440
datagrams are now at duplex stream in

154
00:07:49,440 --> 00:07:51,440
other words they have a readable and

155
00:07:51,440 --> 00:07:54,400
uh writable interface considering making

156
00:07:54,400 --> 00:07:56,240
a similar change on the bi-directional

157
00:07:56,240 --> 00:07:57,840
uni

158
00:07:57,840 --> 00:08:00,240
uh streams put so that their symmetry

159
00:08:00,240 --> 00:08:02,160
and so that we can support a stream of

160
00:08:02,160 --> 00:08:04,479
streams functionality

161
00:08:04,479 --> 00:08:07,759
back pressure available on datagrams now

162
00:08:07,759 --> 00:08:09,520
the app can set a time window which it

163
00:08:09,520 --> 00:08:11,440
flushes stale data from the underlying

164
00:08:11,440 --> 00:08:12,879
queue

165
00:08:12,879 --> 00:08:14,960
the web transport example has been

166
00:08:14,960 --> 00:08:17,039
updated to use more modern javascript

167
00:08:17,039 --> 00:08:20,000
using 408 methods and piping it's for a

168
00:08:20,000 --> 00:08:20,960
pretty clean

169
00:08:20,960 --> 00:08:23,039
data flow through the system and then

170
00:08:23,039 --> 00:08:24,879
there's been much smaller housekeeping

171
00:08:24,879 --> 00:08:28,000
fix some races algorithm updates etc

172
00:08:28,000 --> 00:08:29,759
i'll pause at this point do you have

173
00:08:29,759 --> 00:08:31,840
questions on any one of these

174
00:08:31,840 --> 00:08:34,478
bullet points

175
00:08:38,320 --> 00:08:39,839
okay i hear no questions next slide

176
00:08:39,839 --> 00:08:43,120
please bernard or david

177
00:08:44,240 --> 00:08:45,760
so we have some issues currently

178
00:08:45,760 --> 00:08:47,600
debatable we don't have resolution on

179
00:08:47,600 --> 00:08:49,200
these but to give you some flavor of

180
00:08:49,200 --> 00:08:50,720
what's being discussed

181
00:08:50,720 --> 00:08:52,080
first is to make sense stream and

182
00:08:52,080 --> 00:08:54,000
receive stream a subclass

183
00:08:54,000 --> 00:08:56,399
of writable stream and readable stream

184
00:08:56,399 --> 00:08:59,200
there's arguments for and against this

185
00:08:59,200 --> 00:09:01,920
in terms of pooling um there's a request

186
00:09:01,920 --> 00:09:03,519
for a constructor argument to web

187
00:09:03,519 --> 00:09:04,959
transport so you can decide if your

188
00:09:04,959 --> 00:09:07,040
connection is going to be dedicated

189
00:09:07,040 --> 00:09:11,200
uh or shared with other http 3 flows

190
00:09:11,200 --> 00:09:13,120
and there's complications around that

191
00:09:13,120 --> 00:09:14,160
obviously because even though the

192
00:09:14,160 --> 00:09:15,920
application might want it

193
00:09:15,920 --> 00:09:18,560
both the the operating system on both

194
00:09:18,560 --> 00:09:20,160
the client and the server also have to

195
00:09:20,160 --> 00:09:21,680
support that

196
00:09:21,680 --> 00:09:23,200
and how to get that information back to

197
00:09:23,200 --> 00:09:26,160
the app some debate about which stats we

198
00:09:26,160 --> 00:09:27,680
can provide and which stats

199
00:09:27,680 --> 00:09:30,480
we should provide especially in the face

200
00:09:30,480 --> 00:09:33,120
of pooled connections

201
00:09:33,120 --> 00:09:35,839
work around defining error codes and

202
00:09:35,839 --> 00:09:36,640
also work

203
00:09:36,640 --> 00:09:38,959
around some generic interface names and

204
00:09:38,959 --> 00:09:40,640
if we're we're hogging

205
00:09:40,640 --> 00:09:42,080
generic interface names and we should

206
00:09:42,080 --> 00:09:44,560
make them more specific

207
00:09:44,560 --> 00:09:47,279
and then lastly a request from the w3

208
00:09:47,279 --> 00:09:47,839
side

209
00:09:47,839 --> 00:09:50,720
to the ietf can the scheme to be used

210
00:09:50,720 --> 00:09:52,320
for web transport connection be

211
00:09:52,320 --> 00:09:53,760
finalized

212
00:09:53,760 --> 00:09:55,760
we had a work group call our last one on

213
00:09:55,760 --> 00:09:57,519
march 2nd we didn't have a call for

214
00:09:57,519 --> 00:09:59,600
consensus on this but i can report that

215
00:09:59,600 --> 00:10:01,440
those president bernard david victor

216
00:10:01,440 --> 00:10:02,560
yatakan martin

217
00:10:02,560 --> 00:10:04,800
who i think are on today's call as well

218
00:10:04,800 --> 00:10:08,000
have expressed a preference for https

219
00:10:08,000 --> 00:10:10,720
uh no more input from our side than that

220
00:10:10,720 --> 00:10:12,079
but we do request

221
00:10:12,079 --> 00:10:13,760
uh if possible that the scheme be

222
00:10:13,760 --> 00:10:15,200
finalized so we can

223
00:10:15,200 --> 00:10:19,120
proceed with the api

224
00:10:19,120 --> 00:10:21,279
thank you questions on the slide or any

225
00:10:21,279 --> 00:10:25,120
other questions for the w3c team

226
00:10:31,680 --> 00:10:33,839
okay david back to you then thank you

227
00:10:33,839 --> 00:10:35,519
thank you

228
00:10:35,519 --> 00:10:37,120
all right so we're going to turn it over

229
00:10:37,120 --> 00:10:39,279
to victor

230
00:10:39,279 --> 00:10:47,040
for web transport over http 3.

231
00:10:47,040 --> 00:10:50,640
uh good morning everyone i'm victor

232
00:10:50,640 --> 00:10:51,760
vasiliev i

233
00:10:51,760 --> 00:10:55,120
work for google and i'm the editor for

234
00:10:55,120 --> 00:10:57,440
web transport http draft which

235
00:10:57,440 --> 00:11:01,120
we adopted in the time between

236
00:11:01,120 --> 00:11:04,399
the last interim and this meeting so

237
00:11:04,399 --> 00:11:07,600
now that we adopted the draft there are

238
00:11:07,600 --> 00:11:10,320
lots of issues we need to solve and all

239
00:11:10,320 --> 00:11:12,880
of those issues are on github

240
00:11:12,880 --> 00:11:16,399
and if you haven't you're welcome to

241
00:11:16,399 --> 00:11:20,560
you're encouraged to go to this link and

242
00:11:20,560 --> 00:11:22,560
comment and because there are lots of

243
00:11:22,560 --> 00:11:24,880
issue open issues

244
00:11:24,880 --> 00:11:28,720
uh so my goal for this meeting

245
00:11:28,720 --> 00:11:32,720
is to get us to the state where we

246
00:11:32,720 --> 00:11:35,680
figure out the most important issues

247
00:11:35,680 --> 00:11:36,560
that prevent

248
00:11:36,560 --> 00:11:38,959
us from shipping an interoperable

249
00:11:38,959 --> 00:11:40,240
version of

250
00:11:40,240 --> 00:11:43,600
web transport over http free uh

251
00:11:43,600 --> 00:11:46,800
and the primary reason for that is

252
00:11:46,800 --> 00:11:50,160
chrome is currently shipping uh web

253
00:11:50,160 --> 00:11:51,519
transport over quick

254
00:11:51,519 --> 00:11:54,399
as an origin trial and we're basically

255
00:11:54,399 --> 00:11:56,639
under incentive to unship that

256
00:11:56,639 --> 00:11:59,680
as fast as possible uh so

257
00:11:59,680 --> 00:12:02,720
that we no longer use something that is

258
00:12:02,720 --> 00:12:06,240
uh deprecated uh

259
00:12:06,240 --> 00:12:09,360
so let's go over issues

260
00:12:09,360 --> 00:12:12,560
the next slide

261
00:12:12,560 --> 00:12:16,560
so the first issue is uh

262
00:12:16,560 --> 00:12:19,360
the syntax for server initiated by

263
00:12:19,360 --> 00:12:21,600
directional strings

264
00:12:21,600 --> 00:12:24,160
the current syntax is roughly whenever

265
00:12:24,160 --> 00:12:24,959
you open

266
00:12:24,959 --> 00:12:28,120
a stream which is server initiated and

267
00:12:28,120 --> 00:12:30,160
bi-directional

268
00:12:30,160 --> 00:12:33,680
you just assume that the stream belongs

269
00:12:33,680 --> 00:12:36,399
to a web transport session

270
00:12:36,399 --> 00:12:39,519
you put the session id

271
00:12:39,519 --> 00:12:42,079
in the front of the stream and then you

272
00:12:42,079 --> 00:12:45,200
put application payload on both sides

273
00:12:45,200 --> 00:12:48,240
uh and

274
00:12:49,120 --> 00:12:52,399
we do that because http free does not

275
00:12:52,399 --> 00:12:53,200
define

276
00:12:53,200 --> 00:12:56,320
any specific semantics for

277
00:12:56,320 --> 00:12:58,480
what were initiated by directional

278
00:12:58,480 --> 00:13:01,360
streams in fact it explicitly pencils

279
00:13:01,360 --> 00:13:04,639
uh and we allow those so there is an

280
00:13:04,639 --> 00:13:06,000
observation that if we

281
00:13:06,000 --> 00:13:09,040
just find them this way we will not be

282
00:13:09,040 --> 00:13:11,839
able to use them for anything else

283
00:13:11,839 --> 00:13:15,120
uh so the proposal

284
00:13:15,120 --> 00:13:18,639
is to make them use essentially the same

285
00:13:18,639 --> 00:13:20,399
syntax as client-initiated

286
00:13:20,399 --> 00:13:23,440
bi-directional streams which is

287
00:13:23,440 --> 00:13:26,880
a sequence of frames so

288
00:13:26,880 --> 00:13:31,839
i wonder if do people have any

289
00:13:32,839 --> 00:13:35,839
opinions

290
00:13:41,120 --> 00:13:43,040
hey there alan from dell from facebook

291
00:13:43,040 --> 00:13:44,800
so uh

292
00:13:44,800 --> 00:13:46,959
aren't client initiated bi-directional

293
00:13:46,959 --> 00:13:48,800
streams identified

294
00:13:48,800 --> 00:13:53,600
by them being a connect request

295
00:13:53,600 --> 00:13:56,560
uh they already they have they have a

296
00:13:56,560 --> 00:14:03,839
frame jab i'm sorry i'm forgetting

297
00:14:08,480 --> 00:14:16,000
you're in the queue go ahead

298
00:14:16,000 --> 00:14:19,199
i mean this is okay so um

299
00:14:19,199 --> 00:14:21,680
it looks like the client originated once

300
00:14:21,680 --> 00:14:23,120
look like they have a frame type but

301
00:14:23,120 --> 00:14:23,680
they

302
00:14:23,680 --> 00:14:25,760
don't technically have a frame type you

303
00:14:25,760 --> 00:14:27,600
just have a frame

304
00:14:27,600 --> 00:14:30,160
type and then it just it's the rest of

305
00:14:30,160 --> 00:14:32,079
the string and the same would apply here

306
00:14:32,079 --> 00:14:35,279
is that right uh yeah so

307
00:14:35,279 --> 00:14:38,560
like i would separate the that's a

308
00:14:38,560 --> 00:14:40,480
separate questions as a separate issue

309
00:14:40,480 --> 00:14:40,959
that

310
00:14:40,959 --> 00:14:44,399
i actually think is next slide but the

311
00:14:44,399 --> 00:14:46,160
what's the proposal here is that we

312
00:14:46,160 --> 00:14:47,839
should make the client initiated and

313
00:14:47,839 --> 00:14:49,279
server initiated

314
00:14:49,279 --> 00:14:52,560
behaves the same sure

315
00:14:52,560 --> 00:14:54,320
i think that's reasonable as long as

316
00:14:54,320 --> 00:14:57,120
they're distinguishable

317
00:14:57,120 --> 00:14:59,199
from up from other types of streams for

318
00:14:59,199 --> 00:15:13,040
the client side

319
00:15:13,040 --> 00:15:17,519
ellen yeah so

320
00:15:17,519 --> 00:15:19,920
do we want or need and maybe this is not

321
00:15:19,920 --> 00:15:21,600
a question for web transport

322
00:15:21,600 --> 00:15:24,959
but do does there need to be sort of a

323
00:15:24,959 --> 00:15:27,279
datagrams falls under this as well which

324
00:15:27,279 --> 00:15:28,800
is that like everybody who wants to

325
00:15:28,800 --> 00:15:30,160
extend

326
00:15:30,160 --> 00:15:32,320
uh server initiated bi-directional

327
00:15:32,320 --> 00:15:33,519
streams

328
00:15:33,519 --> 00:15:36,639
uh in http will

329
00:15:36,639 --> 00:15:39,120
also face the same decision right and if

330
00:15:39,120 --> 00:15:41,040
we want to encourage all extensions to

331
00:15:41,040 --> 00:15:42,639
sort of follow the same thing so

332
00:15:42,639 --> 00:15:44,399
different extensions can be

333
00:15:44,399 --> 00:15:46,800
de-multiplexed in the same kind of way

334
00:15:46,800 --> 00:15:47,920
so i don't know if

335
00:15:47,920 --> 00:15:49,759
there should be you know sort of general

336
00:15:49,759 --> 00:15:51,759
guidance for extension riders

337
00:15:51,759 --> 00:15:54,880
so that um that

338
00:15:54,880 --> 00:15:56,639
we don't have to keep redoing this in

339
00:15:56,639 --> 00:15:59,759
every http extension

340
00:16:02,959 --> 00:16:09,839
uh david

341
00:16:12,560 --> 00:16:14,399
are you speaking victor because we're

342
00:16:14,399 --> 00:16:15,839
not hearing anything

343
00:16:15,839 --> 00:16:18,560
no uh i i'm asking if you're the next

344
00:16:18,560 --> 00:16:20,240
person kid

345
00:16:20,240 --> 00:16:22,639
oh yeah no i ended myself so not

346
00:16:22,639 --> 00:16:24,560
speaking as an individual

347
00:16:24,560 --> 00:16:27,920
i think it makes sense that like similar

348
00:16:27,920 --> 00:16:29,839
to datagrams where we have a draft that

349
00:16:29,839 --> 00:16:30,639
is just

350
00:16:30,639 --> 00:16:33,120
how do you use datagrams of http 3

351
00:16:33,120 --> 00:16:34,320
because the original http 3

352
00:16:34,320 --> 00:16:35,440
specification doesn't

353
00:16:35,440 --> 00:16:38,720
have semantics for them maybe what

354
00:16:38,720 --> 00:16:40,240
one thing we might need here is an

355
00:16:40,240 --> 00:16:42,320
incredibly short draft which is

356
00:16:42,320 --> 00:16:44,079
how do you use server initiated

357
00:16:44,079 --> 00:16:46,560
bidirectional streams with http 3

358
00:16:46,560 --> 00:16:48,560
and it carries the setting because all

359
00:16:48,560 --> 00:16:50,160
of these things need one

360
00:16:50,160 --> 00:16:53,040
and then it's you use h names and that's

361
00:16:53,040 --> 00:16:55,600
it and then we reference that from um

362
00:16:55,600 --> 00:16:59,040
from this document would that make sense

363
00:16:59,040 --> 00:17:02,560
uh yeah that would make sense i

364
00:17:02,560 --> 00:17:04,959
not completely sure separate draft is

365
00:17:04,959 --> 00:17:06,880
required as long as

366
00:17:06,880 --> 00:17:10,000
we pick an approach that is compatible

367
00:17:10,000 --> 00:17:11,119
with

368
00:17:11,119 --> 00:17:16,879
what is with further extensibility

369
00:17:16,959 --> 00:17:19,039
that's true that's reasonable as as long

370
00:17:19,039 --> 00:17:20,640
as uh we

371
00:17:20,640 --> 00:17:22,959
maybe we have we tie it to a different

372
00:17:22,959 --> 00:17:25,119
setting from the web transport setting

373
00:17:25,119 --> 00:17:27,520
so it's possible for any other extension

374
00:17:27,520 --> 00:17:29,679
to http 3 to do this without having to

375
00:17:29,679 --> 00:17:31,120
have a dependency on web transport

376
00:17:31,120 --> 00:17:33,280
itself

377
00:17:33,280 --> 00:17:36,400
yeah i'm not even sure it's that it's

378
00:17:36,400 --> 00:17:37,440
like

379
00:17:37,440 --> 00:17:40,160
as long as the two extensions do exactly

380
00:17:40,160 --> 00:17:43,200
the same thing which is use frames

381
00:17:43,200 --> 00:17:47,840
sequence of http frames you're fine

382
00:17:48,559 --> 00:17:50,400
they are but i'm saying like in terms of

383
00:17:50,400 --> 00:17:52,320
dependency on what settings the other

384
00:17:52,320 --> 00:17:55,360
extension needs to send

385
00:17:55,679 --> 00:18:01,200
all right ian sweat is next in the queue

386
00:18:01,200 --> 00:18:04,240
hey um i'm not completely sure you even

387
00:18:04,240 --> 00:18:05,120
need to talk about

388
00:18:05,120 --> 00:18:08,000
settings in all circumstances it seems

389
00:18:08,000 --> 00:18:10,320
like this is more a case of

390
00:18:10,320 --> 00:18:13,440
uh you know how how does one extend http

391
00:18:13,440 --> 00:18:14,480
3 and i think if we

392
00:18:14,480 --> 00:18:16,000
make this decision which is totally

393
00:18:16,000 --> 00:18:17,760
sensible um

394
00:18:17,760 --> 00:18:20,400
other people are probably going to want

395
00:18:20,400 --> 00:18:21,039
to

396
00:18:21,039 --> 00:18:22,640
make a similar decision book because

397
00:18:22,640 --> 00:18:24,799
it's also sensible and because it's

398
00:18:24,799 --> 00:18:27,679
compatible with this um i mean we could

399
00:18:27,679 --> 00:18:29,120
write a separate document but given

400
00:18:29,120 --> 00:18:29,520
their

401
00:18:29,520 --> 00:18:31,360
wide variety of use cases out out there

402
00:18:31,360 --> 00:18:34,160
this is this is more a case of like

403
00:18:34,160 --> 00:18:38,320
it's best practice not to hog all the um

404
00:18:38,320 --> 00:18:40,400
server initiated bidirectional streams

405
00:18:40,400 --> 00:18:42,320
right i mean and this is this is the

406
00:18:42,320 --> 00:18:44,640
obvious way to do so that's

407
00:18:44,640 --> 00:18:48,160
um that i can see so i don't know i mean

408
00:18:48,160 --> 00:18:50,559
if this already existed and hp3 wasn't

409
00:18:50,559 --> 00:18:52,559
so far along i would say we could

410
00:18:52,559 --> 00:18:54,160
show this in the existing section that's

411
00:18:54,160 --> 00:18:56,160
already there but at this point

412
00:18:56,160 --> 00:18:58,240
yeah i don't know maybe martin has the

413
00:18:58,240 --> 00:19:00,400
thought on where'd she go

414
00:19:00,400 --> 00:19:02,640
but i i should say i don't think it

415
00:19:02,640 --> 00:19:03,919
really matters i think either way we

416
00:19:03,919 --> 00:19:05,280
should move forward with

417
00:19:05,280 --> 00:19:08,880
um a consistent design here just matter

418
00:19:08,880 --> 00:19:11,039
do we need to also stick that decision

419
00:19:11,039 --> 00:19:13,600
somewhere else

420
00:19:19,360 --> 00:19:22,559
i had martial i was

421
00:19:22,559 --> 00:19:23,919
i was going to say exactly what ellen

422
00:19:23,919 --> 00:19:26,000
just put in the chat which is um

423
00:19:26,000 --> 00:19:29,520
we don't really own http 3

424
00:19:29,520 --> 00:19:31,280
and we'd have to talk to the people who

425
00:19:31,280 --> 00:19:33,200
do in order to get that to happen

426
00:19:33,200 --> 00:19:36,160
i think it's probably best if um the

427
00:19:36,160 --> 00:19:38,240
http is working group

428
00:19:38,240 --> 00:19:41,280
defines a doc a generic

429
00:19:41,280 --> 00:19:43,919
document the document should probably

430
00:19:43,919 --> 00:19:44,799
also

431
00:19:44,799 --> 00:19:46,960
describe what it is to use a

432
00:19:46,960 --> 00:19:50,840
client-initiated bidirectional stream as

433
00:19:50,840 --> 00:19:53,840
well

434
00:19:54,720 --> 00:19:58,240
i mean the i think the core http 3

435
00:19:58,240 --> 00:20:00,000
document specifies how

436
00:20:00,000 --> 00:20:02,480
um client initiated streams work that

437
00:20:02,480 --> 00:20:03,679
they have they carry

438
00:20:03,679 --> 00:20:05,840
frames and then that's left to

439
00:20:05,840 --> 00:20:07,760
extensions to do different frames

440
00:20:07,760 --> 00:20:10,799
isn't it i think it says that they carry

441
00:20:10,799 --> 00:20:13,120
requests

442
00:20:13,120 --> 00:20:15,200
which are comprised of frames right so

443
00:20:15,200 --> 00:20:16,480
that that sort of level of

444
00:20:16,480 --> 00:20:18,799
generic use is probably something that

445
00:20:18,799 --> 00:20:20,559
it's sensibly done there

446
00:20:20,559 --> 00:20:23,840
obviously with people from this working

447
00:20:23,840 --> 00:20:24,240
group

448
00:20:24,240 --> 00:20:28,320
going over there to do the work but yeah

449
00:20:28,320 --> 00:20:31,039
that makes sense okay as as chairs i can

450
00:20:31,039 --> 00:20:32,080
take an action item

451
00:20:32,080 --> 00:20:35,520
to reach out to the uh

452
00:20:35,520 --> 00:20:37,840
http working group chairs to see how

453
00:20:37,840 --> 00:20:38,799
they feel about this

454
00:20:38,799 --> 00:20:41,679
and what we should uh do about this work

455
00:20:41,679 --> 00:20:43,200
because it sounds like our options

456
00:20:43,200 --> 00:20:43,760
include

457
00:20:43,760 --> 00:20:45,679
having this part of this document having

458
00:20:45,679 --> 00:20:47,280
this part of a separate document that's

459
00:20:47,280 --> 00:20:48,559
in web trans or having

460
00:20:48,559 --> 00:20:51,200
this part of a separate document that's

461
00:20:51,200 --> 00:20:52,159
in http

462
00:20:52,159 --> 00:20:54,880
um because similarly the datagram

463
00:20:54,880 --> 00:20:55,679
document

464
00:20:55,679 --> 00:20:58,640
uh ended up in mask not in http at the

465
00:20:58,640 --> 00:21:00,799
request of the http chairs so this

466
00:21:00,799 --> 00:21:03,600
i could see that happening as like this

467
00:21:03,600 --> 00:21:05,039
document being in web trans as a

468
00:21:05,039 --> 00:21:06,240
potential option at the end of the day

469
00:21:06,240 --> 00:21:07,600
these documents are pretty short and

470
00:21:07,600 --> 00:21:08,159
simple

471
00:21:08,159 --> 00:21:10,240
um as long as we get them done i don't

472
00:21:10,240 --> 00:21:11,440
have a strong opinion for where they

473
00:21:11,440 --> 00:21:12,799
live

474
00:21:12,799 --> 00:21:17,039
uh allen is next in cube

475
00:21:17,039 --> 00:21:20,320
yeah there's one more uh point that i

476
00:21:20,320 --> 00:21:22,159
raised on issue 23

477
00:21:22,159 --> 00:21:25,039
which is not totally related to how

478
00:21:25,039 --> 00:21:25,760
bi-directional

479
00:21:25,760 --> 00:21:27,360
streams work exactly it has to do with

480
00:21:27,360 --> 00:21:30,640
the fact that unidirectional streams

481
00:21:30,640 --> 00:21:33,679
are identified by a stream type and

482
00:21:33,679 --> 00:21:35,200
bidirectional streams are identified by

483
00:21:35,200 --> 00:21:37,440
a frame type

484
00:21:37,440 --> 00:21:39,840
but other than if you ignore that those

485
00:21:39,840 --> 00:21:40,880
two things are

486
00:21:40,880 --> 00:21:44,400
different kinds of types they otherwise

487
00:21:44,400 --> 00:21:45,919
look the same at the beginning of the

488
00:21:45,919 --> 00:21:46,640
stream

489
00:21:46,640 --> 00:21:48,559
and you know i have an implementation of

490
00:21:48,559 --> 00:21:49,919
the current draft

491
00:21:49,919 --> 00:21:51,520
and i end up taking advantage of the

492
00:21:51,520 --> 00:21:53,679
fact that they look the same

493
00:21:53,679 --> 00:21:55,760
but if anyone ever actually added a

494
00:21:55,760 --> 00:21:56,799
frame type

495
00:21:56,799 --> 00:21:58,799
with the same identifier as the

496
00:21:58,799 --> 00:22:00,240
unidirectional stream type

497
00:22:00,240 --> 00:22:01,919
then my beautiful symmetric

498
00:22:01,919 --> 00:22:03,679
implementation would break

499
00:22:03,679 --> 00:22:06,320
and so and i think this is a little bit

500
00:22:06,320 --> 00:22:06,880
of a

501
00:22:06,880 --> 00:22:09,440
weirdness that came out of how http 3

502
00:22:09,440 --> 00:22:10,559
decided that

503
00:22:10,559 --> 00:22:12,960
there are stream types and frame types

504
00:22:12,960 --> 00:22:14,240
and we you know

505
00:22:14,240 --> 00:22:16,640
those decisions have been made uh but it

506
00:22:16,640 --> 00:22:18,080
might be

507
00:22:18,080 --> 00:22:20,880
nice to reserve the unidirectional

508
00:22:20,880 --> 00:22:21,440
stream

509
00:22:21,440 --> 00:22:24,840
type number in the frame type space

510
00:22:24,840 --> 00:22:27,280
uh i can maybe maybe we can put that on

511
00:22:27,280 --> 00:22:28,880
a separate issue if it's not directly

512
00:22:28,880 --> 00:22:31,440
related here

513
00:22:34,559 --> 00:22:37,679
uh thanks ella i think uh

514
00:22:37,679 --> 00:22:39,679
let's have bernard and i circle back

515
00:22:39,679 --> 00:22:41,520
with other chairs to see where we want

516
00:22:41,520 --> 00:22:43,919
this particular work to land and i think

517
00:22:43,919 --> 00:22:45,840
that'll be a great issue for that

518
00:22:45,840 --> 00:22:47,360
document whenever

519
00:22:47,360 --> 00:22:55,840
it shows up

520
00:23:00,159 --> 00:23:04,480
okay so the next issue is

521
00:23:04,480 --> 00:23:07,120
the use of type value frames and how

522
00:23:07,120 --> 00:23:11,120
exactly are they are defined

523
00:23:11,200 --> 00:23:14,880
so the way we are currently defining a

524
00:23:14,880 --> 00:23:19,520
frame that converts a

525
00:23:19,520 --> 00:23:22,720
http request stream into web transport

526
00:23:22,720 --> 00:23:23,360
stream

527
00:23:23,360 --> 00:23:26,799
is by introducing a

528
00:23:26,799 --> 00:23:29,520
type value frame where you have type and

529
00:23:29,520 --> 00:23:32,559
then you don't have any length because

530
00:23:32,559 --> 00:23:35,440
the entirety of the rest of the stream's

531
00:23:35,440 --> 00:23:36,000
body

532
00:23:36,000 --> 00:23:39,200
is assumed to be the value

533
00:23:39,200 --> 00:23:42,320
and we

534
00:23:42,320 --> 00:23:45,840
and so currently all defined http free

535
00:23:45,840 --> 00:23:46,400
frames

536
00:23:46,400 --> 00:23:49,440
have a tag length type

537
00:23:49,440 --> 00:23:52,559
length and value but

538
00:23:52,559 --> 00:23:56,640
we in when we talked about this in quick

539
00:23:56,640 --> 00:23:57,840
working group

540
00:23:57,840 --> 00:23:59,840
we agreed that extensions could

541
00:23:59,840 --> 00:24:01,760
potentially

542
00:24:01,760 --> 00:24:05,200
define type value without

543
00:24:05,200 --> 00:24:10,080
length uh and the original intent was to

544
00:24:10,080 --> 00:24:11,440
make a data frame

545
00:24:11,440 --> 00:24:13,600
that would go to the end of the stream

546
00:24:13,600 --> 00:24:14,640
so you would

547
00:24:14,640 --> 00:24:17,039
need to so you could avoid extra level

548
00:24:17,039 --> 00:24:19,840
of framing

549
00:24:20,480 --> 00:24:24,559
and on the issue discussion

550
00:24:24,559 --> 00:24:28,640
it was not clear whether people believe

551
00:24:28,640 --> 00:24:32,400
that land can be admitted or whether the

552
00:24:32,400 --> 00:24:33,120
length

553
00:24:33,120 --> 00:24:36,159
is always has to be there but you can

554
00:24:36,159 --> 00:24:37,360
set it to zero

555
00:24:37,360 --> 00:24:40,640
and ignore it for those kinds of frames

556
00:24:40,640 --> 00:24:44,400
uh and the question here is should we

557
00:24:44,400 --> 00:24:46,400
we currently don't have land should we

558
00:24:46,400 --> 00:24:48,799
edit

559
00:24:54,240 --> 00:24:57,440
david uh so

560
00:24:57,440 --> 00:25:00,720
speaking as a as an individual here i

561
00:25:00,720 --> 00:25:03,279
i personally think that this would be a

562
00:25:03,279 --> 00:25:05,279
useful feature that's like generically

563
00:25:05,279 --> 00:25:06,080
in h3

564
00:25:06,080 --> 00:25:09,039
uh that we had talked about which was uh

565
00:25:09,039 --> 00:25:10,880
if the frame length is zero

566
00:25:10,880 --> 00:25:12,840
the the frame goes to the end of the

567
00:25:12,840 --> 00:25:14,320
stream uh

568
00:25:14,320 --> 00:25:16,480
we there was discussion of adding that

569
00:25:16,480 --> 00:25:18,240
uh into

570
00:25:18,240 --> 00:25:21,679
uh issue b3 but that got to turn down at

571
00:25:21,679 --> 00:25:22,320
some point

572
00:25:22,320 --> 00:25:25,360
um maybe this is something

573
00:25:25,360 --> 00:25:27,200
we could do generically but that would

574
00:25:27,200 --> 00:25:28,720
have to see if people are okay with that

575
00:25:28,720 --> 00:25:30,240
http or if we want to do something

576
00:25:30,240 --> 00:25:30,960
that's just

577
00:25:30,960 --> 00:25:34,880
specific for the web transport frame

578
00:25:40,840 --> 00:25:42,400
type

579
00:25:42,400 --> 00:25:47,760
yes so do people have other opinions

580
00:25:48,640 --> 00:25:52,240
uh in

581
00:25:52,559 --> 00:25:54,559
uh yeah i i don't have that strong

582
00:25:54,559 --> 00:25:56,320
opinion on this although i did have a

583
00:25:56,320 --> 00:25:58,559
mental model that this was

584
00:25:58,559 --> 00:26:00,159
what we were going to do for extensions

585
00:26:00,159 --> 00:26:01,840
like this to use type value without an

586
00:26:01,840 --> 00:26:03,919
explicit length or a length of zero

587
00:26:03,919 --> 00:26:06,799
um but this is another thing where if

588
00:26:06,799 --> 00:26:07,840
there was some

589
00:26:07,840 --> 00:26:10,320
magical document that the hp working

590
00:26:10,320 --> 00:26:12,640
group produced about hp3 and

591
00:26:12,640 --> 00:26:14,720
how you should do extensions uh we it'd

592
00:26:14,720 --> 00:26:16,000
be kind of nice to show

593
00:26:16,000 --> 00:26:17,520
what we think is the best practice into

594
00:26:17,520 --> 00:26:20,000
that document um

595
00:26:20,000 --> 00:26:22,559
i'm fine for this to go either way at

596
00:26:22,559 --> 00:26:24,159
the moment i don't think it

597
00:26:24,159 --> 00:26:25,679
either way this is like kind of a weird

598
00:26:25,679 --> 00:26:28,240
special case um because in one case you

599
00:26:28,240 --> 00:26:29,919
don't have a

600
00:26:29,919 --> 00:26:33,679
um a length or

601
00:26:33,679 --> 00:26:35,200
in the other case you have a length of

602
00:26:35,200 --> 00:26:37,600
zero and in both cases if you don't

603
00:26:37,600 --> 00:26:38,240
understand

604
00:26:38,240 --> 00:26:40,720
what the type is uh your parser will

605
00:26:40,720 --> 00:26:42,080
immediately fail

606
00:26:42,080 --> 00:26:45,679
so um you know the these these frames

607
00:26:45,679 --> 00:26:47,120
that we're talking about are special in

608
00:26:47,120 --> 00:26:48,080
some sense

609
00:26:48,080 --> 00:26:50,960
they are not standard uh hp uh three

610
00:26:50,960 --> 00:26:53,679
frames that that exist elsewhere so

611
00:26:53,679 --> 00:26:55,279
that's kind of why in practice i think

612
00:26:55,279 --> 00:26:58,159
either can work

613
00:27:05,600 --> 00:27:08,240
uh alan

614
00:27:09,039 --> 00:27:12,320
uh yeah i mean i think just

615
00:27:12,320 --> 00:27:15,440
recognizing that either you know either

616
00:27:15,440 --> 00:27:16,880
as possible again like i

617
00:27:16,880 --> 00:27:18,799
do have an implementation and so i had

618
00:27:18,799 --> 00:27:20,480
to go and write special code to handle

619
00:27:20,480 --> 00:27:22,640
frames that have no length so but it was

620
00:27:22,640 --> 00:27:24,159
like you know three lines of code or

621
00:27:24,159 --> 00:27:25,679
something it was not ridiculous and

622
00:27:25,679 --> 00:27:29,039
i i do view them as mostly equivalent

623
00:27:29,039 --> 00:27:32,880
um you know and even if we wanted to say

624
00:27:32,880 --> 00:27:34,480
have an extension to the extension frame

625
00:27:34,480 --> 00:27:36,799
that had other things in it

626
00:27:36,799 --> 00:27:38,240
besides you know then you would have to

627
00:27:38,240 --> 00:27:40,399
add a length there so there's maybe

628
00:27:40,399 --> 00:27:42,000
a reason why you could just start it

629
00:27:42,000 --> 00:27:44,000
with length 0 but then

630
00:27:44,000 --> 00:27:45,360
even if there was an extension to it it

631
00:27:45,360 --> 00:27:46,960
would probably have to be another frame

632
00:27:46,960 --> 00:27:48,159
type anyway so

633
00:27:48,159 --> 00:27:50,240
i don't think that really matters either

634
00:27:50,240 --> 00:27:51,840
so i don't know we can just

635
00:27:51,840 --> 00:27:55,600
pick one or decide what best practices

636
00:27:58,320 --> 00:28:02,799
oh lucas hello can you hear me

637
00:28:02,799 --> 00:28:05,760
yes okay uh lucas party from cloudflare

638
00:28:05,760 --> 00:28:06,080
um

639
00:28:06,080 --> 00:28:08,559
i'm kind of confused by this because my

640
00:28:08,559 --> 00:28:10,080
implementation

641
00:28:10,080 --> 00:28:12,320
if it saw an extension frame with a code

642
00:28:12,320 --> 00:28:14,240
point it didn't understand would wanna

643
00:28:14,240 --> 00:28:16,159
like just ignore it and then move on to

644
00:28:16,159 --> 00:28:17,520
the next frame but

645
00:28:17,520 --> 00:28:19,760
i don't know how long the frame is to

646
00:28:19,760 --> 00:28:20,559
ignore

647
00:28:20,559 --> 00:28:22,960
so maybe i'm just missing something here

648
00:28:22,960 --> 00:28:25,120
but i don't see how i can

649
00:28:25,120 --> 00:28:26,960
ignore a thing that i don't know what it

650
00:28:26,960 --> 00:28:30,960
is but it doesn't have a length

651
00:28:30,960 --> 00:28:34,159
uh i think my answer

652
00:28:34,159 --> 00:28:37,039
is this in general this is like why we

653
00:28:37,039 --> 00:28:38,799
define a setting

654
00:28:38,799 --> 00:28:40,799
and you don't send that frame without a

655
00:28:40,799 --> 00:28:42,880
setting so if you set a setting you

656
00:28:42,880 --> 00:28:44,399
promise that you will not ignore web

657
00:28:44,399 --> 00:28:47,120
transport frame

658
00:28:47,360 --> 00:28:49,039
but if i don't set the setting and you

659
00:28:49,039 --> 00:28:50,720
send me one then

660
00:28:50,720 --> 00:28:53,039
you've broken my connection i i don't

661
00:28:53,039 --> 00:28:54,080
know

662
00:28:54,080 --> 00:28:57,120
yes that's why you're you're not

663
00:28:57,120 --> 00:28:58,720
supposed to send it if it's not

664
00:28:58,720 --> 00:28:59,760
negotiated

665
00:28:59,760 --> 00:29:03,919
uh sure but but the current hp 3

666
00:29:03,919 --> 00:29:06,559
extension story is that we just ignore

667
00:29:06,559 --> 00:29:07,760
unknown frames

668
00:29:07,760 --> 00:29:11,120
so um yeah yeah we in a in a perfect

669
00:29:11,120 --> 00:29:12,320
world this shouldn't happen

670
00:29:12,320 --> 00:29:14,720
but i can't detect that from a generic

671
00:29:14,720 --> 00:29:16,880
hp 3 implementation because i don't

672
00:29:16,880 --> 00:29:18,320
implement web transport

673
00:29:18,320 --> 00:29:27,840
so i don't know what you're doing

674
00:29:30,240 --> 00:29:33,200
yeah i i mean i guess my answer is it's

675
00:29:33,200 --> 00:29:33,520
like

676
00:29:33,520 --> 00:29:37,279
it will be a fatal error for to

677
00:29:37,279 --> 00:29:39,840
sense that frame when you're both

678
00:29:39,840 --> 00:29:41,520
parties have not negotiated web

679
00:29:41,520 --> 00:29:42,880
transport

680
00:29:42,880 --> 00:29:45,679
and i think the text explicitly pro

681
00:29:45,679 --> 00:29:48,640
tells you to not do that

682
00:29:48,640 --> 00:29:52,240
uh anyways martin oh i think

683
00:29:52,240 --> 00:29:53,679
yeah i was just going to answer lucas

684
00:29:53,679 --> 00:29:56,080
here that there's general provision in

685
00:29:56,080 --> 00:29:57,440
h2 and h3

686
00:29:57,440 --> 00:29:59,679
for settings that change the way the

687
00:29:59,679 --> 00:30:01,360
protocol behaves completely

688
00:30:01,360 --> 00:30:03,360
so in this case you would have a setting

689
00:30:03,360 --> 00:30:05,600
that says i understand that frame

690
00:30:05,600 --> 00:30:08,640
x means whatever it means whether

691
00:30:08,640 --> 00:30:10,399
whether it's a zero length and then

692
00:30:10,399 --> 00:30:11,840
everything after that

693
00:30:11,840 --> 00:30:15,760
frame is uh something other than frames

694
00:30:15,760 --> 00:30:18,960
or whether it's just the frame type and

695
00:30:18,960 --> 00:30:21,039
it doesn't have a length

696
00:30:21,039 --> 00:30:23,600
whatever we decide you can have that

697
00:30:23,600 --> 00:30:24,320
meaning

698
00:30:24,320 --> 00:30:27,440
baked into a setting and so if you saw

699
00:30:27,440 --> 00:30:30,080
that frame type without the setting it

700
00:30:30,080 --> 00:30:32,159
would just be a regular frame at that

701
00:30:32,159 --> 00:30:32,880
point that

702
00:30:32,880 --> 00:30:34,559
should be ignored and it's probably

703
00:30:34,559 --> 00:30:36,080
going to be treated like an error

704
00:30:36,080 --> 00:30:38,080
by anyone who actually understands the

705
00:30:38,080 --> 00:30:39,360
frame type

706
00:30:39,360 --> 00:30:42,399
but um the idea would be that you use

707
00:30:42,399 --> 00:30:43,200
the setting to

708
00:30:43,200 --> 00:30:45,840
to ensure that you don't cause bad

709
00:30:45,840 --> 00:30:48,000
effects on the on the other side

710
00:30:48,000 --> 00:30:50,000
i think that's completely workable you

711
00:30:50,000 --> 00:30:51,200
just get to pick

712
00:30:51,200 --> 00:30:53,200
which outcome you want what i did want

713
00:30:53,200 --> 00:30:54,640
to say though was that

714
00:30:54,640 --> 00:30:57,519
um alan's point about stream types and

715
00:30:57,519 --> 00:30:59,279
frame types is kind of relevant

716
00:30:59,279 --> 00:31:02,000
here because the bi-directional streams

717
00:31:02,000 --> 00:31:03,039
are going to be

718
00:31:03,039 --> 00:31:06,080
just stream types more than frame types

719
00:31:06,080 --> 00:31:08,000
and we can potentially exploit that

720
00:31:08,000 --> 00:31:10,399
somewhat

721
00:31:12,000 --> 00:31:15,519
and i i assume that means that slight

722
00:31:15,519 --> 00:31:17,679
speaks in favor of not using the length

723
00:31:17,679 --> 00:31:19,840
here

724
00:31:20,640 --> 00:31:22,320
yeah i don't think it i don't think

725
00:31:22,320 --> 00:31:23,679
length gives you anything

726
00:31:23,679 --> 00:31:27,279
at this point because a length of zero

727
00:31:27,279 --> 00:31:29,519
doesn't help because what the generic

728
00:31:29,519 --> 00:31:31,120
parser that lucas has

729
00:31:31,120 --> 00:31:33,200
will do at that point is try to read the

730
00:31:33,200 --> 00:31:34,559
next byte as if it were

731
00:31:34,559 --> 00:31:37,279
framed and maybe that'll work and maybe

732
00:31:37,279 --> 00:31:38,480
that won't

733
00:31:38,480 --> 00:31:41,919
and the result is undefined probably

734
00:31:41,919 --> 00:31:44,840
so we we have to rely on the setting

735
00:31:44,840 --> 00:31:47,840
here

736
00:31:51,440 --> 00:31:56,480
all right thank you eric kinnear

737
00:31:56,799 --> 00:31:58,880
i think not having a length is a

738
00:31:58,880 --> 00:32:00,000
reasonable thing to do

739
00:32:00,000 --> 00:32:02,480
and i especially like the the framing of

740
00:32:02,480 --> 00:32:03,039
it

741
00:32:03,039 --> 00:32:06,880
that martin said which is essentially

742
00:32:06,880 --> 00:32:08,880
you know everything after this is is no

743
00:32:08,880 --> 00:32:10,240
longer frames

744
00:32:10,240 --> 00:32:13,600
um but it is worth noting that as you're

745
00:32:13,600 --> 00:32:14,000
trying

746
00:32:14,000 --> 00:32:17,120
to move this data around in the past

747
00:32:17,120 --> 00:32:17,919
with

748
00:32:17,919 --> 00:32:20,960
earlier versions of http and http one

749
00:32:20,960 --> 00:32:23,679
etc uh having something that extends

750
00:32:23,679 --> 00:32:25,279
until finished

751
00:32:25,279 --> 00:32:27,360
is a little bit more annoying than

752
00:32:27,360 --> 00:32:29,360
knowing hey i've got about this much

753
00:32:29,360 --> 00:32:30,320
more coming

754
00:32:30,320 --> 00:32:32,720
and i should make provision for that in

755
00:32:32,720 --> 00:32:34,640
my protocol stack as i'm trying to

756
00:32:34,640 --> 00:32:36,080
figure out how much to allocate or how

757
00:32:36,080 --> 00:32:37,519
much space is going to happen

758
00:32:37,519 --> 00:32:39,760
so if we're in a place like i think we

759
00:32:39,760 --> 00:32:42,320
are here where what's coming next

760
00:32:42,320 --> 00:32:44,080
is going to have its own structure

761
00:32:44,080 --> 00:32:45,679
potentially or could be otherwise

762
00:32:45,679 --> 00:32:47,679
defined then that's not such a big deal

763
00:32:47,679 --> 00:32:48,960
but if we're talking about making this a

764
00:32:48,960 --> 00:32:51,200
super generic thing uh having something

765
00:32:51,200 --> 00:32:51,919
that just

766
00:32:51,919 --> 00:32:54,080
extends until it doesn't is kind of

767
00:32:54,080 --> 00:32:57,840
annoying in some ways

768
00:33:04,320 --> 00:33:07,600
uh allen

769
00:33:08,480 --> 00:33:10,240
yeah just thinking about it and

770
00:33:10,240 --> 00:33:12,880
listening i i i think i'm in favor of

771
00:33:12,880 --> 00:33:14,320
not having the length

772
00:33:14,320 --> 00:33:16,559
being the signal to say everything else

773
00:33:16,559 --> 00:33:17,600
on this stream

774
00:33:17,600 --> 00:33:20,399
is unframed and i think maybe the the

775
00:33:20,399 --> 00:33:21,919
reason that makes the most sense to me

776
00:33:21,919 --> 00:33:22,399
is that

777
00:33:22,399 --> 00:33:24,960
there are frames already defined in h3

778
00:33:24,960 --> 00:33:25,440
for which

779
00:33:25,440 --> 00:33:28,399
zero length is valid both data and i

780
00:33:28,399 --> 00:33:28,880
think

781
00:33:28,880 --> 00:33:33,360
settings can be blank um

782
00:33:33,360 --> 00:33:36,640
so um i'm not saying that it that not

783
00:33:36,640 --> 00:33:38,320
having length is a signal but i guess i

784
00:33:38,320 --> 00:33:39,440
like the idea

785
00:33:39,440 --> 00:33:41,279
of this is sort of defined as a

786
00:33:41,279 --> 00:33:42,559
different thing

787
00:33:42,559 --> 00:33:45,840
and not assigning a zero length for this

788
00:33:45,840 --> 00:33:47,120
frame to mean something

789
00:33:47,120 --> 00:33:48,799
much different than zero length for

790
00:33:48,799 --> 00:33:53,840
other frames means

791
00:33:56,799 --> 00:34:00,159
uh david i think you're next yeah

792
00:34:00,159 --> 00:34:02,159
yeah i just wanted to say that like my

793
00:34:02,159 --> 00:34:03,360
earlier comment about

794
00:34:03,360 --> 00:34:05,360
trying to do something generic clearly

795
00:34:05,360 --> 00:34:07,440
doesn't work based on this conversation

796
00:34:07,440 --> 00:34:09,599
so i completely take that back i think

797
00:34:09,599 --> 00:34:11,040
having something that's

798
00:34:11,040 --> 00:34:13,440
specific to a web transport frame with

799
00:34:13,440 --> 00:34:15,119
without the length and that is keyed on

800
00:34:15,119 --> 00:34:16,719
a web check for a specific setting seems

801
00:34:16,719 --> 00:34:21,440
like the best way to go in my opinion

802
00:34:21,440 --> 00:34:26,240
uh martin

803
00:34:28,000 --> 00:34:31,040
get the trigger word i don't think

804
00:34:31,040 --> 00:34:34,320
that it's something that we can avoid

805
00:34:34,320 --> 00:34:36,800
in terms of generic stuff for the

806
00:34:36,800 --> 00:34:38,399
bi-directional streams

807
00:34:38,399 --> 00:34:39,599
i think we're going to need to have

808
00:34:39,599 --> 00:34:41,520
something generic

809
00:34:41,520 --> 00:34:44,560
for for that purpose exactly but

810
00:34:44,560 --> 00:34:48,159
um aside from that yes the the frame

811
00:34:48,159 --> 00:34:51,199
stuff yeah it's going to be

812
00:34:51,199 --> 00:34:52,320
you're going to need to know that when

813
00:34:52,320 --> 00:34:55,440
you see this frame type you stop

814
00:34:55,440 --> 00:34:57,440
processing frames and that's going to be

815
00:34:57,440 --> 00:35:03,839
on a per frame type basis

816
00:35:09,440 --> 00:35:12,560
uh all right it sounds like we have some

817
00:35:12,560 --> 00:35:14,880
form of agreement that

818
00:35:14,880 --> 00:35:18,800
at least the length is not helpful here

819
00:35:18,800 --> 00:35:23,440
uh so we can move on to the next issue

820
00:35:24,960 --> 00:35:28,640
next oh yeah so your eyes came so

821
00:35:28,640 --> 00:35:31,920
uh basically we have roughly two

822
00:35:31,920 --> 00:35:35,359
options use https or and

823
00:35:35,359 --> 00:35:38,480
use the new define

824
00:35:38,480 --> 00:35:41,200
completely new uri scheme for web

825
00:35:41,200 --> 00:35:42,400
transport

826
00:35:42,400 --> 00:35:44,640
and that could be uri scheme for web

827
00:35:44,640 --> 00:35:46,160
transport over http

828
00:35:46,160 --> 00:35:50,960
or uh web transport

829
00:35:50,960 --> 00:35:54,079
sp in general

830
00:35:54,079 --> 00:35:57,200
uh and so

831
00:35:57,200 --> 00:35:59,440
as will mentioned earlier we had a

832
00:35:59,440 --> 00:36:00,320
conversation

833
00:36:00,320 --> 00:36:04,079
in w3c and basically

834
00:36:04,079 --> 00:36:05,920
there were many things said but the

835
00:36:05,920 --> 00:36:08,160
short reason is that there's

836
00:36:08,160 --> 00:36:11,359
no particular reason to define a new

837
00:36:11,359 --> 00:36:15,119
uri scheme because as far

838
00:36:15,119 --> 00:36:18,720
as we can tell web transport

839
00:36:18,720 --> 00:36:21,440
resources are just http resources they

840
00:36:21,440 --> 00:36:23,599
do require custom syntax

841
00:36:23,599 --> 00:36:26,640
and they do require you to use

842
00:36:26,640 --> 00:36:30,320
uh a very specific http method but

843
00:36:30,320 --> 00:36:33,760
that is not new to http oris

844
00:36:33,760 --> 00:36:37,920
says so we should just use https

845
00:36:37,920 --> 00:36:41,200
and uh that would

846
00:36:41,200 --> 00:36:44,880
make it work well with the rest of the

847
00:36:44,880 --> 00:36:46,079
stack

848
00:36:46,079 --> 00:36:50,400
uh the main objection was there were

849
00:36:50,400 --> 00:36:52,560
subtle differences in which web

850
00:36:52,560 --> 00:36:53,760
transport

851
00:36:53,760 --> 00:36:56,960
behaves in gtp in terms of how it

852
00:36:56,960 --> 00:36:58,160
handles things like

853
00:36:58,160 --> 00:37:01,599
cookies and http off and namely

854
00:37:01,599 --> 00:37:04,400
it currently does not and at least in

855
00:37:04,400 --> 00:37:05,920
double ifrities draft we

856
00:37:05,920 --> 00:37:09,359
it creates that it would not send either

857
00:37:09,359 --> 00:37:12,400
uh but i saying overall that is

858
00:37:12,400 --> 00:37:15,680
a different concern from

859
00:37:15,680 --> 00:37:18,880
uh uh

860
00:37:18,880 --> 00:37:21,359
the fact from the question of how those

861
00:37:21,359 --> 00:37:24,960
resources are identified

862
00:37:29,599 --> 00:37:33,680
does anyone have any questions for the

863
00:37:34,839 --> 00:37:37,839
micro

864
00:37:41,920 --> 00:37:44,320
martin

865
00:37:45,520 --> 00:37:47,520
got in the mic line to give you support

866
00:37:47,520 --> 00:37:49,119
uh this seems

867
00:37:49,119 --> 00:37:52,400
pretty reasonable what to do um

868
00:37:52,400 --> 00:37:55,200
uh i think notice jonathan lennox asked

869
00:37:55,200 --> 00:37:57,520
you know why was the websocket scheme

870
00:37:57,520 --> 00:38:01,760
um uh is a separate scheme and

871
00:38:01,760 --> 00:38:04,640
uh the history there is basically you

872
00:38:04,640 --> 00:38:04,880
know

873
00:38:04,880 --> 00:38:08,160
ws and wss are examples of what not to

874
00:38:08,160 --> 00:38:08,560
do

875
00:38:08,560 --> 00:38:12,800
more than what to do in this case and so

876
00:38:12,800 --> 00:38:16,240
yeah we should probably just treat it as

877
00:38:16,240 --> 00:38:16,800
a different

878
00:38:16,800 --> 00:38:19,680
different method on the same https

879
00:38:19,680 --> 00:38:21,040
resource that we

880
00:38:21,040 --> 00:38:23,760
have thought about previously it would

881
00:38:23,760 --> 00:38:25,200
be different if we're talking about

882
00:38:25,200 --> 00:38:26,640
quick transport i think

883
00:38:26,640 --> 00:38:29,119
but now that we're taking this path this

884
00:38:29,119 --> 00:38:33,839
is a much easier decision in my mind

885
00:38:34,880 --> 00:38:37,839
all right does anyone else have anything

886
00:38:37,839 --> 00:38:40,560
else to say

887
00:38:44,240 --> 00:38:47,520
as just jumping in as chair i'm

888
00:38:47,520 --> 00:38:49,440
not seeing any opposition to going with

889
00:38:49,440 --> 00:38:50,720
https here

890
00:38:50,720 --> 00:38:54,079
so um well and haven't seen any on the

891
00:38:54,079 --> 00:38:54,800
issue

892
00:38:54,800 --> 00:38:57,839
so unless someone wants to speak up now

893
00:38:57,839 --> 00:39:01,040
or on the list i think we can assume

894
00:39:01,040 --> 00:39:02,560
consensus on this one and move forward

895
00:39:02,560 --> 00:39:05,599
with https for now

896
00:39:10,640 --> 00:39:14,000
well it does not look like we have

897
00:39:14,000 --> 00:39:16,640
any opposition to this so let's move to

898
00:39:16,640 --> 00:39:19,520
the next issue

899
00:39:23,359 --> 00:39:26,880
oh that's so this is now so the previous

900
00:39:26,880 --> 00:39:29,040
three issues were very important for

901
00:39:29,040 --> 00:39:30,960
interrupts those are

902
00:39:30,960 --> 00:39:33,839
less critical but still important so the

903
00:39:33,839 --> 00:39:34,480
first

904
00:39:34,480 --> 00:39:38,359
the issue 10 is mostly

905
00:39:38,359 --> 00:39:43,200
reconfirming uh what we already have

906
00:39:43,200 --> 00:39:46,960
uh which is we made at some point

907
00:39:46,960 --> 00:39:48,240
decisions that

908
00:39:48,240 --> 00:39:51,119
web transport would not expose stream

909
00:39:51,119 --> 00:39:53,599
ids

910
00:39:54,000 --> 00:39:56,720
and this was originally in quick

911
00:39:56,720 --> 00:39:57,440
transport

912
00:39:57,440 --> 00:40:00,480
that idea made the completes

913
00:40:00,480 --> 00:40:02,400
in web transport over quick that idea

914
00:40:02,400 --> 00:40:03,599
made

915
00:40:03,599 --> 00:40:05,520
some sense because the ids are

916
00:40:05,520 --> 00:40:08,640
consistent but when you add http

917
00:40:08,640 --> 00:40:12,000
and you add proxies in the middle this

918
00:40:12,000 --> 00:40:15,280
makes no sense whatsoever

919
00:40:15,280 --> 00:40:19,119
so uh i just wanted to reconfirm

920
00:40:19,119 --> 00:40:22,400
that we are not going to expose stream

921
00:40:22,400 --> 00:40:24,240
ideas as a part of the protocol

922
00:40:24,240 --> 00:40:27,839
or application surface

923
00:40:28,720 --> 00:40:38,560
does anyone object to that

924
00:40:38,560 --> 00:40:41,279
oh look

925
00:40:44,240 --> 00:40:46,480
oh hello um so i made the original

926
00:40:46,480 --> 00:40:47,359
ticket or at least

927
00:40:47,359 --> 00:40:49,760
nikhil uh works to make her make that uh

928
00:40:49,760 --> 00:40:50,480
original

929
00:40:50,480 --> 00:40:53,280
try to expose them um for some context

930
00:40:53,280 --> 00:40:53,599
we

931
00:40:53,599 --> 00:40:56,240
wanted to know the um the ordering

932
00:40:56,240 --> 00:40:57,680
between different streams so we wanted

933
00:40:57,680 --> 00:40:59,680
just a way of knowing the creation date

934
00:40:59,680 --> 00:41:03,520
more or less um and possibly

935
00:41:03,520 --> 00:41:05,119
and that that's the main thing that we

936
00:41:05,119 --> 00:41:07,200
wanted um that's not

937
00:41:07,200 --> 00:41:10,960
necessarily possible now with um uh hp3

938
00:41:10,960 --> 00:41:11,680
transport

939
00:41:11,680 --> 00:41:14,640
uh with pooling specifically so it's one

940
00:41:14,640 --> 00:41:16,000
of those things that we'll just have to

941
00:41:16,000 --> 00:41:16,720
drop or

942
00:41:16,720 --> 00:41:19,440
add us a custom way of doing that within

943
00:41:19,440 --> 00:41:22,240
web transport

944
00:41:22,880 --> 00:41:26,400
uh yeah so i was thinking whether it is

945
00:41:26,400 --> 00:41:27,839
possible to preserve

946
00:41:27,839 --> 00:41:30,960
some way in some way to preserve

947
00:41:30,960 --> 00:41:34,079
ordering without necessarily preserving

948
00:41:34,079 --> 00:41:38,640
uh the idea of uh

949
00:41:38,720 --> 00:41:42,000
the exact stream ideas like

950
00:41:42,000 --> 00:41:44,400
without making them referenceable and

951
00:41:44,400 --> 00:41:45,440
one question

952
00:41:45,440 --> 00:41:48,560
i have when you're interested

953
00:41:48,560 --> 00:41:51,839
about ordering do you care about

954
00:41:51,839 --> 00:41:54,560
relative ordering or does this ordering

955
00:41:54,560 --> 00:41:57,680
need to have no gaps

956
00:41:57,680 --> 00:41:59,599
well initially we did the thing with

957
00:41:59,599 --> 00:42:00,800
every odd and even

958
00:42:00,800 --> 00:42:02,880
one was a different type of stream just

959
00:42:02,880 --> 00:42:04,800
as a way of you know saving bytes right

960
00:42:04,800 --> 00:42:06,560
like instead of having an explicit

961
00:42:06,560 --> 00:42:10,160
header um and we were abusing the fact

962
00:42:10,160 --> 00:42:12,000
that quick streams are monotonically

963
00:42:12,000 --> 00:42:13,599
increasing like it just plus four

964
00:42:13,599 --> 00:42:17,599
every uh of the same stream type um

965
00:42:17,599 --> 00:42:19,839
again that's not possible because now if

966
00:42:19,839 --> 00:42:20,800
there's a gap

967
00:42:20,800 --> 00:42:22,240
with web transport you don't know which

968
00:42:22,240 --> 00:42:23,359
protocol you don't know if it was an

969
00:42:23,359 --> 00:42:25,200
http request or you don't know if it was

970
00:42:25,200 --> 00:42:26,480
for a different

971
00:42:26,480 --> 00:42:29,839
web transport session um so at least

972
00:42:29,839 --> 00:42:31,280
that use case doesn't work

973
00:42:31,280 --> 00:42:33,040
um and yeah there's no way of knowing

974
00:42:33,040 --> 00:42:35,839
how many streams may have been created

975
00:42:35,839 --> 00:42:38,240
before your stream uh if there's packet

976
00:42:38,240 --> 00:42:39,920
loss or whatever

977
00:42:39,920 --> 00:42:43,040
um our solution is just to add a header

978
00:42:43,040 --> 00:42:45,280
on top of every stream and that may

979
00:42:45,280 --> 00:42:46,640
actually just be acceptable

980
00:42:46,640 --> 00:42:49,200
just tell applications to define their

981
00:42:49,200 --> 00:42:50,000
own

982
00:42:50,000 --> 00:42:53,040
stream ids okay

983
00:42:53,040 --> 00:42:56,400
uh yeah never

984
00:42:57,599 --> 00:42:59,839
uh

985
00:43:03,599 --> 00:43:06,960
hi can you hear me yes hi this is uh

986
00:43:06,960 --> 00:43:07,760
janine robert

987
00:43:07,760 --> 00:43:10,960
mozilla um i just wanted to make sure

988
00:43:10,960 --> 00:43:11,359
that

989
00:43:11,359 --> 00:43:14,480
i understood that

990
00:43:14,640 --> 00:43:17,200
we can still i think ordering is going

991
00:43:17,200 --> 00:43:17,920
to be

992
00:43:17,920 --> 00:43:20,640
important in the api because uh message

993
00:43:20,640 --> 00:43:22,079
framing is going to be

994
00:43:22,079 --> 00:43:23,680
typically hard to do for javascript

995
00:43:23,680 --> 00:43:26,400
developers and get it right

996
00:43:26,400 --> 00:43:30,319
uh for instance uh i i've experimented

997
00:43:30,319 --> 00:43:31,839
with two different ways to

998
00:43:31,839 --> 00:43:34,319
um wrap something we get asked a lot is

999
00:43:34,319 --> 00:43:36,160
how to wrap a sort of a

1000
00:43:36,160 --> 00:43:38,640
web socket like api on top of web

1001
00:43:38,640 --> 00:43:39,440
transport

1002
00:43:39,440 --> 00:43:41,440
and i pretty much see two ways to do it

1003
00:43:41,440 --> 00:43:43,040
one is to map it to a bi-directional

1004
00:43:43,040 --> 00:43:45,280
stream if you want header line blocking

1005
00:43:45,280 --> 00:43:48,560
and the other one is to wrap it

1006
00:43:48,560 --> 00:43:50,640
on the transport itself where you're

1007
00:43:50,640 --> 00:43:52,880
sending text messages

1008
00:43:52,880 --> 00:43:55,760
as individual streams and then then if

1009
00:43:55,760 --> 00:43:56,560
you then

1010
00:43:56,560 --> 00:43:59,839
send for instance like a large data blob

1011
00:43:59,839 --> 00:44:01,680
you would send that as a separate stream

1012
00:44:01,680 --> 00:44:04,319
as well so in those cases it seems that

1013
00:44:04,319 --> 00:44:05,839
preserving the ordering

1014
00:44:05,839 --> 00:44:08,319
of sending on the receiver side is

1015
00:44:08,319 --> 00:44:08,880
critical

1016
00:44:08,880 --> 00:44:10,800
and i heard some things that sounded

1017
00:44:10,800 --> 00:44:12,000
like

1018
00:44:12,000 --> 00:44:13,920
uh i just want to clarify if we're still

1019
00:44:13,920 --> 00:44:16,480
able to guarantee that order or is there

1020
00:44:16,480 --> 00:44:17,920
something in http 3 that

1021
00:44:17,920 --> 00:44:20,839
prevents that i think if you send an

1022
00:44:20,839 --> 00:44:22,960
explicit different streams you're

1023
00:44:22,960 --> 00:44:24,640
explicitly

1024
00:44:24,640 --> 00:44:26,800
guaranteed that order will not be

1025
00:44:26,800 --> 00:44:29,119
preserved in which you reserve

1026
00:44:29,119 --> 00:44:31,760
because uh otherwise you would just have

1027
00:44:31,760 --> 00:44:33,359
had offline blocking

1028
00:44:33,359 --> 00:44:36,480
if you wanted to preserve order i i'm

1029
00:44:36,480 --> 00:44:37,599
that's you're talking about the data

1030
00:44:37,599 --> 00:44:38,960
within the streams but i mean the

1031
00:44:38,960 --> 00:44:40,800
creation order of the streams i was very

1032
00:44:40,800 --> 00:44:41,680
happy to

1033
00:44:41,680 --> 00:44:43,520
find in the quick spec it says that

1034
00:44:43,520 --> 00:44:45,040
successive streams of each

1035
00:44:45,040 --> 00:44:47,440
type are created with numerically

1036
00:44:47,440 --> 00:44:49,119
increasing stream ids

1037
00:44:49,119 --> 00:44:50,880
and a stream id that is used out of

1038
00:44:50,880 --> 00:44:53,119
order results in all streams of that

1039
00:44:53,119 --> 00:44:55,040
type with lower numbered stream ids also

1040
00:44:55,040 --> 00:44:56,640
being opened

1041
00:44:56,640 --> 00:44:58,960
and the way i interpreted that was if

1042
00:44:58,960 --> 00:45:01,520
that's true then

1043
00:45:01,520 --> 00:45:03,520
if we can carry that forward to the api

1044
00:45:03,520 --> 00:45:04,640
if you do 408

1045
00:45:04,640 --> 00:45:07,839
on transport.incoming streams you're

1046
00:45:07,839 --> 00:45:09,280
guaranteed

1047
00:45:09,280 --> 00:45:10,960
as long as you don't wait for completion

1048
00:45:10,960 --> 00:45:12,319
of these streams at least their

1049
00:45:12,319 --> 00:45:14,079
appearance on the api should be in the

1050
00:45:14,079 --> 00:45:14,960
order they were sent

1051
00:45:14,960 --> 00:45:18,240
is that not true i don't believe this is

1052
00:45:18,240 --> 00:45:20,079
true because

1053
00:45:20,079 --> 00:45:22,880
one since this is multiplexed you don't

1054
00:45:22,880 --> 00:45:24,880
know if the streams in the middle are

1055
00:45:24,880 --> 00:45:27,920
even your streams

1056
00:45:28,400 --> 00:45:32,800
uh and two this is a steelhead of line

1057
00:45:32,800 --> 00:45:34,079
blocking because

1058
00:45:34,079 --> 00:45:37,440
if it was imagine you're doing http

1059
00:45:37,440 --> 00:45:39,760
you would be able to receive an entirety

1060
00:45:39,760 --> 00:45:40,640
of http

1061
00:45:40,640 --> 00:45:42,720
request with higher stream id and

1062
00:45:42,720 --> 00:45:45,359
process it and send response

1063
00:45:45,359 --> 00:45:48,079
before the previous stream if like only

1064
00:45:48,079 --> 00:45:50,240
the previous stream was lost

1065
00:45:50,240 --> 00:45:52,880
so from that standpoint it doesn't

1066
00:45:52,880 --> 00:45:55,839
really make sense

1067
00:45:56,000 --> 00:45:57,920
well but you can solve it it won't be

1068
00:45:57,920 --> 00:45:59,040
blocking because

1069
00:45:59,040 --> 00:46:00,560
all you have to do if you get a stream

1070
00:46:00,560 --> 00:46:02,400
idea that is

1071
00:46:02,400 --> 00:46:04,240
that skips that's newer than you

1072
00:46:04,240 --> 00:46:06,000
expected yeah

1073
00:46:06,000 --> 00:46:08,560
the receiver can then create the

1074
00:46:08,560 --> 00:46:09,760
underlying

1075
00:46:09,760 --> 00:46:12,880
streams for the missing numbers and if

1076
00:46:12,880 --> 00:46:14,240
they come in later

1077
00:46:14,240 --> 00:46:17,920
provide data sure but you don't have

1078
00:46:17,920 --> 00:46:20,160
as i said the first reason is you don't

1079
00:46:20,160 --> 00:46:21,599
have guarantees that those are web

1080
00:46:21,599 --> 00:46:28,079
transport streams

1081
00:46:28,079 --> 00:46:31,119
but all right yeah i don't know the

1082
00:46:31,119 --> 00:46:32,640
networking stack that well so

1083
00:46:32,640 --> 00:46:35,040
apologies but uh if someone else could

1084
00:46:35,040 --> 00:46:35,760
clarify that

1085
00:46:35,760 --> 00:46:38,880
that'd be good uh yeah

1086
00:46:38,880 --> 00:46:42,640
i i can attempt to clarify perhaps

1087
00:46:42,640 --> 00:46:45,920
um so the the the important property

1088
00:46:45,920 --> 00:46:49,200
here is so in quick the uh

1089
00:46:49,200 --> 00:46:52,319
when the an endpoint decides to create

1090
00:46:52,319 --> 00:46:53,520
new streams

1091
00:46:53,520 --> 00:46:56,720
every like subsequent call to i want a

1092
00:46:56,720 --> 00:46:59,359
new stream we'll give it a higher id

1093
00:46:59,359 --> 00:47:02,400
um but if i'm sending let's say

1094
00:47:02,400 --> 00:47:04,000
let's say for bidirectional streams as

1095
00:47:04,000 --> 00:47:06,240
the client i get like stream id12 and

1096
00:47:06,240 --> 00:47:06,800
through my

1097
00:47:06,800 --> 00:47:09,839
id 16 i can open stream id 12 and put

1098
00:47:09,839 --> 00:47:11,599
some data in a packet and then in the

1099
00:47:11,599 --> 00:47:13,359
next pack it sends 16

1100
00:47:13,359 --> 00:47:15,760
but the packet with 12 can get lost so

1101
00:47:15,760 --> 00:47:17,440
the fact that i send them in a

1102
00:47:17,440 --> 00:47:19,040
given order doesn't mean that they'll be

1103
00:47:19,040 --> 00:47:20,800
received in the same order on the other

1104
00:47:20,800 --> 00:47:21,760
side

1105
00:47:21,760 --> 00:47:24,720
and so from a web transfer perspective

1106
00:47:24,720 --> 00:47:25,359
um

1107
00:47:25,359 --> 00:47:28,640
i think if what you're you want is for

1108
00:47:28,640 --> 00:47:28,880
the

1109
00:47:28,880 --> 00:47:31,440
api to enforce this ordering as in you

1110
00:47:31,440 --> 00:47:33,359
know give me the next stream

1111
00:47:33,359 --> 00:47:36,319
will let's say and you receive 16 but

1112
00:47:36,319 --> 00:47:37,839
not 12 and then you say well i'm going

1113
00:47:37,839 --> 00:47:39,040
to wait for 12.

1114
00:47:39,040 --> 00:47:40,720
i think that would really diminish the

1115
00:47:40,720 --> 00:47:42,800
benefits of quick because the point of

1116
00:47:42,800 --> 00:47:44,400
using multiple streams is that

1117
00:47:44,400 --> 00:47:46,240
a loss on one stream doesn't mess up

1118
00:47:46,240 --> 00:47:47,440
another stream

1119
00:47:47,440 --> 00:47:48,800
so i would like speaking as an

1120
00:47:48,800 --> 00:47:50,480
individual here be

1121
00:47:50,480 --> 00:47:53,920
pretty much against having that uh be a

1122
00:47:53,920 --> 00:47:55,920
blocking relationship in the api

1123
00:47:55,920 --> 00:47:57,200
because i'm sure that there are

1124
00:47:57,200 --> 00:47:58,559
applications who absolutely don't want

1125
00:47:58,559 --> 00:48:00,000
that they prefer to get the data for

1126
00:48:00,000 --> 00:48:01,440
stream 16

1127
00:48:01,440 --> 00:48:03,599
even if 12 is on the way and might come

1128
00:48:03,599 --> 00:48:04,960
in a bit later

1129
00:48:04,960 --> 00:48:08,400
uh okay and then if sorry go ahead

1130
00:48:08,400 --> 00:48:10,400
okay but we're talking about api now and

1131
00:48:10,400 --> 00:48:11,760
i think the api

1132
00:48:11,760 --> 00:48:13,760
doesn't force the application to choose

1133
00:48:13,760 --> 00:48:15,440
because you can you can for a weight

1134
00:48:15,440 --> 00:48:17,280
over the incoming streams

1135
00:48:17,280 --> 00:48:18,800
and you can decide at the apple level

1136
00:48:18,800 --> 00:48:20,559
whether you want to

1137
00:48:20,559 --> 00:48:22,800
download each file to completion before

1138
00:48:22,800 --> 00:48:24,000
beginning the next one

1139
00:48:24,000 --> 00:48:25,599
or you can download them all in parallel

1140
00:48:25,599 --> 00:48:27,440
so the the

1141
00:48:27,440 --> 00:48:28,960
the point at which you expose these

1142
00:48:28,960 --> 00:48:30,720
things since you mentioned the numbers

1143
00:48:30,720 --> 00:48:34,480
uh if you if you received 16

1144
00:48:34,480 --> 00:48:38,240
you can create a sort of dummy 12

1145
00:48:38,240 --> 00:48:39,920
uh that if you were to wait for actual

1146
00:48:39,920 --> 00:48:42,480
data on it it might never arrive

1147
00:48:42,480 --> 00:48:45,119
and then you can start you create both

1148
00:48:45,119 --> 00:48:46,720
12 and 16 and you'll start receiving

1149
00:48:46,720 --> 00:48:48,160
data on 16.

1150
00:48:48,160 --> 00:48:49,839
and it becomes an app problem if it

1151
00:48:49,839 --> 00:48:52,400
wants to wait for 12.

1152
00:48:52,400 --> 00:48:55,040
so you you could do that what i would

1153
00:48:55,040 --> 00:48:55,760
say is

1154
00:48:55,760 --> 00:48:58,000
uh like so there's a bit more details by

1155
00:48:58,000 --> 00:48:59,119
victor on the issue

1156
00:48:59,119 --> 00:49:02,000
but given that we're now over http 3

1157
00:49:02,000 --> 00:49:02,800
which is a

1158
00:49:02,800 --> 00:49:04,720
multiplexed protocol and some of these

1159
00:49:04,720 --> 00:49:05,839
streams might be

1160
00:49:05,839 --> 00:49:07,599
non-web transport we're going to need a

1161
00:49:07,599 --> 00:49:08,960
new namespace

1162
00:49:08,960 --> 00:49:10,400
because we're not going to want to

1163
00:49:10,400 --> 00:49:12,000
expose the number 16

1164
00:49:12,000 --> 00:49:13,760
to the web transfer application because

1165
00:49:13,760 --> 00:49:15,200
that could leak some information about

1166
00:49:15,200 --> 00:49:16,319
the other things that are happening

1167
00:49:16,319 --> 00:49:18,160
under the canal on the connection

1168
00:49:18,160 --> 00:49:20,480
and so then the question becomes if

1169
00:49:20,480 --> 00:49:21,680
we're all in agreement that we don't

1170
00:49:21,680 --> 00:49:24,240
want a blocking relationship in the api

1171
00:49:24,240 --> 00:49:27,920
then the question becomes do we

1172
00:49:27,920 --> 00:49:30,640
add this new numbering inside

1173
00:49:30,640 --> 00:49:33,040
webtransport or would we just do

1174
00:49:33,040 --> 00:49:35,760
what luke was saying which is we don't

1175
00:49:35,760 --> 00:49:36,319
offer this

1176
00:49:36,319 --> 00:49:38,160
and applications are free to at the

1177
00:49:38,160 --> 00:49:39,760
start of their stream just add a number

1178
00:49:39,760 --> 00:49:40,319
in there

1179
00:49:40,319 --> 00:49:42,720
and that way they can know the ordering

1180
00:49:42,720 --> 00:49:44,559
at that level

1181
00:49:44,559 --> 00:49:47,040
i would be inclined to given that this

1182
00:49:47,040 --> 00:49:48,960
is pretty simple to do to push this on

1183
00:49:48,960 --> 00:49:50,079
to applications

1184
00:49:50,079 --> 00:49:51,839
uh because not everyone might need it

1185
00:49:51,839 --> 00:49:53,359
but that's just my personal

1186
00:49:53,359 --> 00:49:58,240
two cents

1187
00:49:58,240 --> 00:50:00,079
and i see martin is behind me in the

1188
00:50:00,079 --> 00:50:02,319
queue

1189
00:50:03,520 --> 00:50:05,839
yeah so um i think you covered off most

1190
00:50:05,839 --> 00:50:07,920
of that uh

1191
00:50:07,920 --> 00:50:10,079
unless you want to make the application

1192
00:50:10,079 --> 00:50:12,079
aware of the existence of things that

1193
00:50:12,079 --> 00:50:13,599
are not for it

1194
00:50:13,599 --> 00:50:15,760
then you you have to accept the fact

1195
00:50:15,760 --> 00:50:18,000
that when you get the 16 you

1196
00:50:18,000 --> 00:50:20,240
you know that 12 exists but you don't

1197
00:50:20,240 --> 00:50:22,079
know what

1198
00:50:22,079 --> 00:50:24,400
and so you can't signal that because it

1199
00:50:24,400 --> 00:50:25,680
might be for something that you don't

1200
00:50:25,680 --> 00:50:26,160
want

1201
00:50:26,160 --> 00:50:28,079
the application even existed in the

1202
00:50:28,079 --> 00:50:29,680
first place so you can imagine

1203
00:50:29,680 --> 00:50:31,040
you have it you have your stream of

1204
00:50:31,040 --> 00:50:32,800
streams and you can have some some sort

1205
00:50:32,800 --> 00:50:34,319
of tombstones

1206
00:50:34,319 --> 00:50:36,720
where all of the the streams that that

1207
00:50:36,720 --> 00:50:38,400
existed but won't for you

1208
00:50:38,400 --> 00:50:41,119
exist but then you're still leaking to

1209
00:50:41,119 --> 00:50:42,240
the application that they

1210
00:50:42,240 --> 00:50:43,680
they did exist and i don't think that's

1211
00:50:43,680 --> 00:50:46,079
appropriate at all um based on

1212
00:50:46,079 --> 00:50:48,960
what we've discussed um the other way to

1213
00:50:48,960 --> 00:50:49,680
get around

1214
00:50:49,680 --> 00:50:52,319
this one is potentially the notion of a

1215
00:50:52,319 --> 00:50:53,680
dedicated connection

1216
00:50:53,680 --> 00:50:56,720
for the purposes of a given application

1217
00:50:56,720 --> 00:50:58,160
and at that point you can start to

1218
00:50:58,160 --> 00:51:00,480
expose these things

1219
00:51:00,480 --> 00:51:02,240
because that dedicated application knows

1220
00:51:02,240 --> 00:51:04,160
that every single stream is for

1221
00:51:04,160 --> 00:51:08,640
it you can make that stream

1222
00:51:08,640 --> 00:51:11,040
available to the application even though

1223
00:51:11,040 --> 00:51:12,480
you haven't seen any of the contents of

1224
00:51:12,480 --> 00:51:13,599
that stream yet

1225
00:51:13,599 --> 00:51:16,720
so the problem that we have with with

1226
00:51:16,720 --> 00:51:19,119
this particular case where you have

1227
00:51:19,119 --> 00:51:21,520
multiple users of the same connection

1228
00:51:21,520 --> 00:51:24,960
is that you don't know whether this

1229
00:51:24,960 --> 00:51:26,800
particular stream is for this particular

1230
00:51:26,800 --> 00:51:28,480
application until you've seen the

1231
00:51:28,480 --> 00:51:29,599
contents of it

1232
00:51:29,599 --> 00:51:31,599
and you know it exists but you don't

1233
00:51:31,599 --> 00:51:34,720
know anything of the contents yet and so

1234
00:51:34,720 --> 00:51:38,000
that's where you end up i i think at

1235
00:51:38,000 --> 00:51:39,520
this point

1236
00:51:39,520 --> 00:51:42,640
yeah like like david said just

1237
00:51:42,640 --> 00:51:44,079
let's just make it the application

1238
00:51:44,079 --> 00:51:46,480
developers lives harder

1239
00:51:46,480 --> 00:51:49,280
it's kind of a cop out but it's you know

1240
00:51:49,280 --> 00:51:50,559
that's where it's at

1241
00:51:50,559 --> 00:51:51,839
unless we want to go to dedicated

1242
00:51:51,839 --> 00:52:04,319
streams that is

1243
00:52:04,319 --> 00:52:07,520
bernard you're next in queue yeah

1244
00:52:07,520 --> 00:52:10,640
um just just to say i think it's worth

1245
00:52:10,640 --> 00:52:11,920
having an issue because there are a

1246
00:52:11,920 --> 00:52:14,000
number of cases where uh

1247
00:52:14,000 --> 00:52:15,599
really it is the application's

1248
00:52:15,599 --> 00:52:18,079
responsibility and this is one of them

1249
00:52:18,079 --> 00:52:19,839
it's not always clear like people seem

1250
00:52:19,839 --> 00:52:22,160
to be in some cases relying on things

1251
00:52:22,160 --> 00:52:24,079
that they really need to do in the app

1252
00:52:24,079 --> 00:52:26,480
you know an example of that also is in

1253
00:52:26,480 --> 00:52:28,079
the api at least we're arguing about

1254
00:52:28,079 --> 00:52:28,800
whether to make

1255
00:52:28,800 --> 00:52:31,599
acts visible or not and we decided not

1256
00:52:31,599 --> 00:52:33,520
to because it's really up to the app to

1257
00:52:33,520 --> 00:52:35,599
handle datagram reliability

1258
00:52:35,599 --> 00:52:37,520
uh but not everybody's been clear about

1259
00:52:37,520 --> 00:52:38,800
that

1260
00:52:38,800 --> 00:52:41,440
so uh jani vartanzi your question if

1261
00:52:41,440 --> 00:52:41,920
you're

1262
00:52:41,920 --> 00:52:44,319
if each stream is a message you really

1263
00:52:44,319 --> 00:52:45,440
are asking

1264
00:52:45,440 --> 00:52:48,160
for quick to give you an unordered

1265
00:52:48,160 --> 00:52:50,160
reliable service

1266
00:52:50,160 --> 00:52:52,559
and that means you do have to as an app

1267
00:52:52,559 --> 00:52:54,319
uh have to take care of

1268
00:52:54,319 --> 00:52:57,119
ordering yourself is the best friend on

1269
00:52:57,119 --> 00:52:58,839
our

1270
00:52:58,839 --> 00:53:01,839
servers

1271
00:53:07,200 --> 00:53:10,400
uh that makes sense uh who should take

1272
00:53:10,400 --> 00:53:10,720
the

1273
00:53:10,720 --> 00:53:12,720
action item to follow an issue here i

1274
00:53:12,720 --> 00:53:14,559
think even if we don't change the

1275
00:53:14,559 --> 00:53:16,079
protocol we should have text in the

1276
00:53:16,079 --> 00:53:18,160
document that specifies which properties

1277
00:53:18,160 --> 00:53:20,480
we're getting such as or which ones were

1278
00:53:20,480 --> 00:53:22,559
were not for example the fact that

1279
00:53:22,559 --> 00:53:29,839
streams can arrive out of order

1280
00:53:30,400 --> 00:53:34,720
just uh victor since he's the editor

1281
00:53:35,280 --> 00:53:36,960
victor can you take the action item to

1282
00:53:36,960 --> 00:53:40,000
uh to follow that issue please

1283
00:53:40,000 --> 00:53:43,040
isn't this essentially like just this

1284
00:53:43,040 --> 00:53:46,640
issue but uh so you're you're super weak

1285
00:53:46,640 --> 00:53:47,119
right now

1286
00:53:47,119 --> 00:53:48,640
yes this is essentially this issue but

1287
00:53:48,640 --> 00:53:50,800
this issue is in w3c we

1288
00:53:50,800 --> 00:53:54,000
probably want one in uh

1289
00:53:54,000 --> 00:53:57,119
an itf as well no i ever filed it as a

1290
00:53:57,119 --> 00:54:00,240
atf issue you should attend

1291
00:54:00,240 --> 00:54:03,680
oh my bad uh yes sorry all right then

1292
00:54:03,680 --> 00:54:11,839
we're good thank you

1293
00:54:17,680 --> 00:54:21,118
uh genovar

1294
00:54:22,160 --> 00:54:23,839
uh yeah so i just want to get

1295
00:54:23,839 --> 00:54:25,920
clarification i think um

1296
00:54:25,920 --> 00:54:27,359
we're happy to work on the api part of

1297
00:54:27,359 --> 00:54:30,079
it but the

1298
00:54:30,079 --> 00:54:32,480
uh i just want to understand that the

1299
00:54:32,480 --> 00:54:36,079
language i found in the quick spec then

1300
00:54:36,079 --> 00:54:39,520
that the under streams of lower numbers

1301
00:54:39,520 --> 00:54:41,040
than the ones i received are not

1302
00:54:41,040 --> 00:54:44,400
opened in http 3. is that

1303
00:54:44,400 --> 00:54:47,440
not a property anymore

1304
00:54:49,440 --> 00:54:52,720
they are opened but before we receive

1305
00:54:52,720 --> 00:54:55,680
data we do not know which web transports

1306
00:54:55,680 --> 00:54:57,920
they belong to

1307
00:54:57,920 --> 00:55:02,480
ah it's the same issue actually next

1308
00:55:02,480 --> 00:55:06,319
issue is very similar in nature i think

1309
00:55:06,319 --> 00:55:07,599
of course

1310
00:55:07,599 --> 00:55:10,799
yeah but then

1311
00:55:10,799 --> 00:55:15,280
um but once once you receive data

1312
00:55:15,280 --> 00:55:16,799
and then you know which web transport it

1313
00:55:16,799 --> 00:55:20,400
is at that point an api could decide

1314
00:55:20,400 --> 00:55:24,000
to open lower number uh

1315
00:55:24,000 --> 00:55:26,559
streams for web transport at this point

1316
00:55:26,559 --> 00:55:27,599
here introduce

1317
00:55:27,599 --> 00:55:29,440
point of fly head of line blocking

1318
00:55:29,440 --> 00:55:31,440
because if you

1319
00:55:31,440 --> 00:55:33,599
don't have stream 12 but you have stream

1320
00:55:33,599 --> 00:55:34,640
16

1321
00:55:34,640 --> 00:55:37,520
you know that stream 12 exists but you

1322
00:55:37,520 --> 00:55:38,480
if you require

1323
00:55:38,480 --> 00:55:41,119
data from stream 12 now you're ahead of

1324
00:55:41,119 --> 00:55:43,200
line blocking

1325
00:55:43,200 --> 00:55:44,880
but only the application would require

1326
00:55:44,880 --> 00:55:46,960
data

1327
00:55:46,960 --> 00:55:50,079
no http stack needs data to know how to

1328
00:55:50,079 --> 00:55:50,799
write

1329
00:55:50,799 --> 00:55:54,240
a signal but if

1330
00:55:54,240 --> 00:55:56,480
that never arrives then what part of web

1331
00:55:56,480 --> 00:55:58,880
transport is blocked

1332
00:55:58,880 --> 00:56:02,880
uh if

1333
00:56:02,880 --> 00:56:05,680
right now nothing if we require streams

1334
00:56:05,680 --> 00:56:06,160
to go

1335
00:56:06,160 --> 00:56:09,280
in order then all of the future streams

1336
00:56:09,280 --> 00:56:10,799
would be blocked because we would have

1337
00:56:10,799 --> 00:56:13,760
to wait for every stream

1338
00:56:13,760 --> 00:56:16,880
to order them

1339
00:56:16,880 --> 00:56:19,200
if i might jump in with a clarification

1340
00:56:19,200 --> 00:56:20,240
here sure

1341
00:56:20,240 --> 00:56:22,799
um so genevar it sounds like the feature

1342
00:56:22,799 --> 00:56:23,839
you're asking for

1343
00:56:23,839 --> 00:56:27,040
is hey i received this client initiated

1344
00:56:27,040 --> 00:56:28,799
stream and i'm happy with it

1345
00:56:28,799 --> 00:56:30,960
but it told me that there is some other

1346
00:56:30,960 --> 00:56:32,960
stream that i haven't received yet

1347
00:56:32,960 --> 00:56:36,319
that i want to send something on

1348
00:56:36,319 --> 00:56:40,079
if as the server you want to send

1349
00:56:40,079 --> 00:56:42,880
data on a stream before you've received

1350
00:56:42,880 --> 00:56:44,720
anything on it then why not just use a

1351
00:56:44,720 --> 00:56:46,799
server initiated stream

1352
00:56:46,799 --> 00:56:49,200
like the whole point of in quick in the

1353
00:56:49,200 --> 00:56:51,040
quick mindset of client initiated stream

1354
00:56:51,040 --> 00:56:52,640
is that they're the kind of stream where

1355
00:56:52,640 --> 00:56:54,559
the client's going to speak first so in

1356
00:56:54,559 --> 00:56:57,440
http that's a request for example

1357
00:56:57,440 --> 00:57:01,359
um and uh since web transport offers

1358
00:57:01,359 --> 00:57:03,760
also unidirectional streams

1359
00:57:03,760 --> 00:57:06,799
um i think we have enough arrows in our

1360
00:57:06,799 --> 00:57:07,599
quiver here

1361
00:57:07,599 --> 00:57:10,480
to not require this specific feature of

1362
00:57:10,480 --> 00:57:12,480
i want to send first in the other

1363
00:57:12,480 --> 00:57:14,079
direction of a

1364
00:57:14,079 --> 00:57:17,599
stream initiated by my peer

1365
00:57:18,799 --> 00:57:22,640
well i i think the model here is that uh

1366
00:57:22,640 --> 00:57:24,799
when you create a stream every all the

1367
00:57:24,799 --> 00:57:26,079
data inside it

1368
00:57:26,079 --> 00:57:29,119
is um order guaranteed

1369
00:57:29,119 --> 00:57:32,079
right so but if i have data and i want

1370
00:57:32,079 --> 00:57:34,720
to split it up into two streams

1371
00:57:34,720 --> 00:57:38,000
then i'm not lo i'm no longer guaranteed

1372
00:57:38,000 --> 00:57:39,599
the order of delivery

1373
00:57:39,599 --> 00:57:41,839
of that data because i could send a few

1374
00:57:41,839 --> 00:57:43,200
bytes followed by

1375
00:57:43,200 --> 00:57:44,480
i could send a lot of bytes followed by

1376
00:57:44,480 --> 00:57:47,760
a few bytes but the surfacing of those

1377
00:57:47,760 --> 00:57:50,000
two on the client side it would be

1378
00:57:50,000 --> 00:57:51,839
beneficial if we could surface them

1379
00:57:51,839 --> 00:57:54,799
in the creation order and i don't see

1380
00:57:54,799 --> 00:57:56,720
that we cannot and i don't also don't

1381
00:57:56,720 --> 00:57:58,000
see why that would

1382
00:57:58,000 --> 00:58:01,520
lock anything and the goal here would be

1383
00:58:01,520 --> 00:58:03,280
to provide because framing is hard in

1384
00:58:03,280 --> 00:58:06,240
javascript and

1385
00:58:06,240 --> 00:58:07,599
streams as far as i understand that

1386
00:58:07,599 --> 00:58:09,280
stream ids is

1387
00:58:09,280 --> 00:58:11,280
an implement an implementation of

1388
00:58:11,280 --> 00:58:12,799
framing that

1389
00:58:12,799 --> 00:58:14,960
applications could benefit from where we

1390
00:58:14,960 --> 00:58:17,200
could give them these guarantees

1391
00:58:17,200 --> 00:58:20,240
and i don't i would like

1392
00:58:20,240 --> 00:58:22,880
i'll work on clarifying why i don't

1393
00:58:22,880 --> 00:58:24,480
consider that head of line blocking but

1394
00:58:24,480 --> 00:58:26,319
if there's something in web transport

1395
00:58:26,319 --> 00:58:29,520
that would block from that uh i guess we

1396
00:58:29,520 --> 00:58:30,720
can look at that

1397
00:58:30,720 --> 00:58:33,839
and future issues okay thanks i

1398
00:58:33,839 --> 00:58:36,400
i think if you could write up an example

1399
00:58:36,400 --> 00:58:37,520
of like

1400
00:58:37,520 --> 00:58:39,280
how the application does this and maybe

1401
00:58:39,280 --> 00:58:40,480
we can take it offline because this

1402
00:58:40,480 --> 00:58:41,440
sounds interesting

1403
00:58:41,440 --> 00:58:44,079
but um it's maybe it deserves its own

1404
00:58:44,079 --> 00:58:45,599
conversation that might take a bit

1405
00:58:45,599 --> 00:58:47,280
longer

1406
00:58:47,280 --> 00:58:49,440
right i have a fiddle actually of i'm

1407
00:58:49,440 --> 00:58:50,559
mapping a web

1408
00:58:50,559 --> 00:58:53,599
socket api to e to

1409
00:58:53,599 --> 00:58:56,559
uh web transport i can post in chat for

1410
00:58:56,559 --> 00:58:58,480
people who are interested

1411
00:58:58,480 --> 00:59:01,119
cool yeah but please do and but if you

1412
00:59:01,119 --> 00:59:01,520
can add

1413
00:59:01,520 --> 00:59:03,440
as much detail as possible on the on the

1414
00:59:03,440 --> 00:59:04,640
issue i think this will

1415
00:59:04,640 --> 00:59:06,480
be uh we can keep the conversation going

1416
00:59:06,480 --> 00:59:08,480
there to make sure we we understand what

1417
00:59:08,480 --> 00:59:10,000
you're trying to accomplish and

1418
00:59:10,000 --> 00:59:12,319
see if there's a need for a change here

1419
00:59:12,319 --> 00:59:14,720
at webtrends or not

1420
00:59:14,720 --> 00:59:19,839
great thanks all right thank you uh luke

1421
00:59:21,359 --> 00:59:24,880
hello uh so i think at a higher level

1422
00:59:24,880 --> 00:59:26,400
this also applies this uh

1423
00:59:26,400 --> 00:59:27,920
next issue we're gonna cover reset

1424
00:59:27,920 --> 00:59:30,480
stream uh is a in my use case

1425
00:59:30,480 --> 00:59:33,520
um we're using quick for uh mobile uh

1426
00:59:33,520 --> 00:59:34,480
platforms

1427
00:59:34,480 --> 00:59:36,960
or at least we have uh so android app

1428
00:59:36,960 --> 00:59:38,400
ios app whatever

1429
00:59:38,400 --> 00:59:40,880
uh and then for web transport we want to

1430
00:59:40,880 --> 00:59:42,240
i mean for web support we need to use

1431
00:59:42,240 --> 00:59:43,440
web transport

1432
00:59:43,440 --> 00:59:45,520
uh there's just a few quick features

1433
00:59:45,520 --> 00:59:46,720
that we

1434
00:59:46,720 --> 00:59:48,799
want to use or have been using that just

1435
00:59:48,799 --> 00:59:50,160
don't map nicely

1436
00:59:50,160 --> 00:59:52,160
to web transport stream id is one of

1437
00:59:52,160 --> 00:59:53,599
them uh where

1438
00:59:53,599 --> 00:59:55,440
on native platforms we could use the

1439
00:59:55,440 --> 00:59:56,960
quick stream id

1440
00:59:56,960 --> 00:59:58,720
because it is exposed the application if

1441
00:59:58,720 --> 01:00:01,200
we're using raw quick

1442
01:00:01,200 --> 01:00:03,760
and reset and some other other things

1443
01:00:03,760 --> 01:00:04,400
that are

1444
01:00:04,400 --> 01:00:06,480
more connection oriented so that's maybe

1445
01:00:06,480 --> 01:00:07,920
just a higher level question is

1446
01:00:07,920 --> 01:00:10,559
web transport trying to expose uh the

1447
01:00:10,559 --> 01:00:12,400
quick api or is it trying to expose a

1448
01:00:12,400 --> 01:00:14,559
subset of it

1449
01:00:14,559 --> 01:00:16,559
and if we're trying to have a subset of

1450
01:00:16,559 --> 01:00:18,400
it then a lot of these discussions can

1451
01:00:18,400 --> 01:00:19,200
be

1452
01:00:19,200 --> 01:00:22,240
you know what subset

1453
01:00:22,799 --> 01:00:26,240
uh my intuition is that

1454
01:00:26,240 --> 01:00:29,839
it definitely has to be a subset because

1455
01:00:29,839 --> 01:00:33,359
i don't think we can implement like 100

1456
01:00:33,359 --> 01:00:35,920
percent one-to-one perfect mapping

1457
01:00:35,920 --> 01:00:38,400
or i mean we could but some of the

1458
01:00:38,400 --> 01:00:40,480
things would have to do

1459
01:00:40,480 --> 01:00:44,400
uh i'm not completely sure are 100

1460
01:00:44,400 --> 01:00:47,440
worth it uh because quick has a lot of

1461
01:00:47,440 --> 01:00:50,000
semantics and some of the semantics

1462
01:00:50,000 --> 01:00:52,880
are entirely dictated by the fact that

1463
01:00:52,880 --> 01:00:53,280
quick

1464
01:00:53,280 --> 01:00:56,960
is a transport protocol uh that

1465
01:00:56,960 --> 01:00:58,880
has to handle all of the transport

1466
01:00:58,880 --> 01:01:00,799
issues uh

1467
01:01:00,799 --> 01:01:04,880
and but our goal is in general to

1468
01:01:04,880 --> 01:01:08,559
implement as much of it as possible

1469
01:01:08,559 --> 01:01:12,720
and expose as much of the

1470
01:01:12,720 --> 01:01:15,520
semantics of quick especially semantics

1471
01:01:15,520 --> 01:01:17,839
relating to

1472
01:01:17,839 --> 01:01:19,640
ability to have things that are

1473
01:01:19,640 --> 01:01:20,880
unreliable

1474
01:01:20,880 --> 01:01:23,520
and avoiding head-of-line blocking as

1475
01:01:23,520 --> 01:01:24,880
possible

1476
01:01:24,880 --> 01:01:28,799
uh that's that's my general view

1477
01:01:28,799 --> 01:01:32,960
so i think the question is definitely on

1478
01:01:32,960 --> 01:01:34,000
what's upset

1479
01:01:34,000 --> 01:01:38,000
and the general answer is as much as

1480
01:01:38,000 --> 01:01:39,760
possible but we might have to

1481
01:01:39,760 --> 01:01:43,599
make some compromises here and there

1482
01:01:44,160 --> 01:01:47,119
uh it is worth mentioning for example

1483
01:01:47,119 --> 01:01:49,280
that http 3 does use stream id

1484
01:01:49,280 --> 01:01:51,359
so if you wanted to build http 3 on top

1485
01:01:51,359 --> 01:01:52,799
of web transport

1486
01:01:52,799 --> 01:01:54,799
wouldn't be possible again i don't know

1487
01:01:54,799 --> 01:01:56,079
if that's a an issue

1488
01:01:56,079 --> 01:01:58,079
it's just a lot of these little things

1489
01:01:58,079 --> 01:02:01,599
that you're limiting the application to

1490
01:02:04,480 --> 01:02:08,640
yeah so i i guess and this

1491
01:02:08,640 --> 01:02:12,960
does leave us with general question

1492
01:02:12,960 --> 01:02:15,440
do we want applications to emulate that

1493
01:02:15,440 --> 01:02:16,400
or do we want

1494
01:02:16,400 --> 01:02:21,839
to emulate that for by ourselves

1495
01:02:22,880 --> 01:02:27,839
and for stream ideas specifically

1496
01:02:27,839 --> 01:02:30,480
i feel like it is much easier to leave

1497
01:02:30,480 --> 01:02:33,280
it up to the application

1498
01:02:33,280 --> 01:02:36,160
with the general philosophical uh

1499
01:02:36,160 --> 01:02:38,319
principles that some application would

1500
01:02:38,319 --> 01:02:40,559
not needed and if they don't need it

1501
01:02:40,559 --> 01:02:42,720
you're just wasting bites

1502
01:02:42,720 --> 01:02:45,280
uh and if they need it it is not that

1503
01:02:45,280 --> 01:02:47,280
hard to build a system that does that

1504
01:02:47,280 --> 01:02:49,039
as as you said you just said the header

1505
01:02:49,039 --> 01:02:50,880
in front

1506
01:02:50,880 --> 01:02:55,280
so that's at least my perspective

1507
01:02:59,520 --> 01:03:04,640
uh is there anyone else thank you alan

1508
01:03:05,119 --> 01:03:06,559
yeah i'll go quick cause i know we spent

1509
01:03:06,559 --> 01:03:08,480
a lot of time on this issue i i just

1510
01:03:08,480 --> 01:03:11,920
i i feel like that maybe there's

1511
01:03:11,920 --> 01:03:14,319
an opportunity where you know we're

1512
01:03:14,319 --> 01:03:15,680
hearing potentially from people who are

1513
01:03:15,680 --> 01:03:16,000
using

1514
01:03:16,000 --> 01:03:18,000
apps or written applications and they're

1515
01:03:18,000 --> 01:03:19,839
telling us what they want

1516
01:03:19,839 --> 01:03:22,720
from the transport and we are maybe

1517
01:03:22,720 --> 01:03:23,599
ignoring

1518
01:03:23,599 --> 01:03:25,520
them because we want to build sort of

1519
01:03:25,520 --> 01:03:26,640
the simplest thing

1520
01:03:26,640 --> 01:03:28,160
sort of the batteries not included

1521
01:03:28,160 --> 01:03:30,079
version and and apps end up

1522
01:03:30,079 --> 01:03:32,559
implementing a lot of stuff on top and

1523
01:03:32,559 --> 01:03:33,359
um

1524
01:03:33,359 --> 01:03:35,760
i just want to encourage listen to the

1525
01:03:35,760 --> 01:03:37,520
use cases and consider

1526
01:03:37,520 --> 01:03:39,599
maybe adding some things in the

1527
01:03:39,599 --> 01:03:41,039
transport layer i don't want to add tons

1528
01:03:41,039 --> 01:03:42,319
of complexity but

1529
01:03:42,319 --> 01:03:44,400
you know if this is one like i don't

1530
01:03:44,400 --> 01:03:45,920
think you're wasting a ton of bytes if

1531
01:03:45,920 --> 01:03:46,960
applications are like

1532
01:03:46,960 --> 01:03:48,960
so much more is possible if you can tell

1533
01:03:48,960 --> 01:03:50,400
us about the order

1534
01:03:50,400 --> 01:03:53,200
of the streams in my session then you

1535
01:03:53,200 --> 01:03:53,920
know

1536
01:03:53,920 --> 01:03:55,760
i would not be opposed to building that

1537
01:03:55,760 --> 01:03:57,280
potentially into the protocol

1538
01:03:57,280 --> 01:04:00,400
and then you know people will use it if

1539
01:04:00,400 --> 01:04:02,079
they need it or not you know anyway it's

1540
01:04:02,079 --> 01:04:03,039
just

1541
01:04:03,039 --> 01:04:04,640
we should be listening to what the users

1542
01:04:04,640 --> 01:04:06,160
are asking so they don't

1543
01:04:06,160 --> 01:04:07,599
every app doesn't have to implement it

1544
01:04:07,599 --> 01:04:13,839
over and over again

1545
01:04:18,160 --> 01:04:21,359
all right thanks alan tim uh if it's

1546
01:04:21,359 --> 01:04:23,200
about this issue let's keep it

1547
01:04:23,200 --> 01:04:25,760
short and we're cutting the um the

1548
01:04:25,760 --> 01:04:26,799
microphone after

1549
01:04:26,799 --> 01:04:28,480
tim here so we can move on to the next

1550
01:04:28,480 --> 01:04:30,079
issue but go ahead tim

1551
01:04:30,079 --> 01:04:32,720
sure yeah it is about this issue but um

1552
01:04:32,720 --> 01:04:34,720
i just wanted to say in the

1553
01:04:34,720 --> 01:04:36,720
in the webrtc world we came across the

1554
01:04:36,720 --> 01:04:38,720
same problem with uh and we ended up

1555
01:04:38,720 --> 01:04:40,000
solving it with a

1556
01:04:40,000 --> 01:04:42,079
very lightweight protocol that like

1557
01:04:42,079 --> 01:04:44,160
which just slots in the header

1558
01:04:44,160 --> 01:04:45,920
uh in your the beginning of a stream and

1559
01:04:45,920 --> 01:04:47,359
just like puts a

1560
01:04:47,359 --> 01:04:49,359
couple of things in that lets the api

1561
01:04:49,359 --> 01:04:52,160
label a stream so it can actually manage

1562
01:04:52,160 --> 01:04:55,440
um that kind of behavior and i it

1563
01:04:55,440 --> 01:04:56,960
turned out to be really really useful

1564
01:04:56,960 --> 01:04:59,200
for the things i'm doing so i kind of

1565
01:04:59,200 --> 01:05:01,359
if something like that was possible

1566
01:05:01,359 --> 01:05:02,960
without having too big an overhead i'd

1567
01:05:02,960 --> 01:05:09,839
go for it

1568
01:05:10,480 --> 01:05:13,839
uh thank you so

1569
01:05:13,839 --> 01:05:17,359
i don't think we have arrived

1570
01:05:17,359 --> 01:05:20,400
at the definitive agreement because

1571
01:05:20,400 --> 01:05:22,559
well there is definitely agreement that

1572
01:05:22,559 --> 01:05:25,440
we cannot expose a quick stream id

1573
01:05:25,440 --> 01:05:28,319
but as a question now becomes do we want

1574
01:05:28,319 --> 01:05:29,760
to

1575
01:05:29,760 --> 01:05:33,280
sorry uh do we want to simulate uh

1576
01:05:33,280 --> 01:05:35,599
something like quick uh stream ideas and

1577
01:05:35,599 --> 01:05:36,720
i think that's

1578
01:05:36,720 --> 01:05:38,880
uh probably worth discussing more but

1579
01:05:38,880 --> 01:05:40,880
probably at a later date

1580
01:05:40,880 --> 01:05:44,000
uh and probably not for the

1581
01:05:44,000 --> 01:05:46,960
most immediate interrupt interrupt draft

1582
01:05:46,960 --> 01:05:47,280
uh

1583
01:05:47,280 --> 01:05:50,960
issue 31 is very similar

1584
01:05:50,960 --> 01:05:54,160
in its root cause is if

1585
01:05:54,160 --> 01:05:57,200
so we currently expose reset stream

1586
01:05:57,200 --> 01:06:00,319
to the application

1587
01:06:00,480 --> 01:06:03,599
uh and we expose the reset stream error

1588
01:06:03,599 --> 01:06:05,039
code

1589
01:06:05,039 --> 01:06:07,680
and the problem is you can receive and

1590
01:06:07,680 --> 01:06:09,920
process reset stream before you receive

1591
01:06:09,920 --> 01:06:11,680
the data on the stream that

1592
01:06:11,680 --> 01:06:13,599
associates the stream with a web

1593
01:06:13,599 --> 01:06:15,920
transport session

1594
01:06:15,920 --> 01:06:20,000
and the question is well first of all

1595
01:06:20,000 --> 01:06:23,039
do we want to expose recent stream

1596
01:06:23,039 --> 01:06:25,680
and make it reliable and the second of

1597
01:06:25,680 --> 01:06:26,400
all

1598
01:06:26,400 --> 01:06:33,839
if we do that uh how do we do that

1599
01:06:39,760 --> 01:06:42,960
and i was wondering if do

1600
01:06:42,960 --> 01:06:47,839
people have opinions on

1601
01:06:48,799 --> 01:06:51,520
this issue

1602
01:06:55,119 --> 01:06:56,880
uh oh i should mention since there are

1603
01:06:56,880 --> 01:06:58,319
actually three

1604
01:06:58,319 --> 01:07:01,359
options there is do not guarantee

1605
01:07:01,359 --> 01:07:02,480
reliability

1606
01:07:02,480 --> 01:07:05,920
or actually no you you have to expose

1607
01:07:05,920 --> 01:07:07,920
the fact that the stream was reset but

1608
01:07:07,920 --> 01:07:10,079
uh

1609
01:07:10,960 --> 01:07:13,200
anyone has anything to say for the

1610
01:07:13,200 --> 01:07:15,839
microphone

1611
01:07:23,359 --> 01:07:26,640
martin not just for you victor

1612
01:07:26,640 --> 01:07:29,280
i'm going to argue for the the first

1613
01:07:29,280 --> 01:07:30,079
option

1614
01:07:30,079 --> 01:07:33,839
because that's far less complicated it's

1615
01:07:33,839 --> 01:07:36,880
exactly in the spirit of reset stream

1616
01:07:36,880 --> 01:07:39,920
and the only problem here is that

1617
01:07:39,920 --> 01:07:43,119
if someone is mixing web transport

1618
01:07:43,119 --> 01:07:45,440
streams and request streams

1619
01:07:45,440 --> 01:07:48,160
and one of those gets reset and the

1620
01:07:48,160 --> 01:07:49,920
header doesn't get through

1621
01:07:49,920 --> 01:07:52,640
the header that allows the the server in

1622
01:07:52,640 --> 01:07:53,200
this case

1623
01:07:53,200 --> 01:07:56,400
to identify this as a web transport

1624
01:07:56,400 --> 01:07:58,000
stream for this particular

1625
01:07:58,000 --> 01:08:00,079
web transport or a request or what have

1626
01:08:00,079 --> 01:08:01,599
you then it doesn't

1627
01:08:01,599 --> 01:08:03,359
get to do anything with that stream it's

1628
01:08:03,359 --> 01:08:04,880
just a stream that appeared and

1629
01:08:04,880 --> 01:08:08,960
and had to go away again and that's fine

1630
01:08:08,960 --> 01:08:12,000
it just means that in those cases where

1631
01:08:12,000 --> 01:08:14,960
the sender or the the endpoint that

1632
01:08:14,960 --> 01:08:16,319
creates streams

1633
01:08:16,319 --> 01:08:19,359
uh creates a stream

1634
01:08:19,359 --> 01:08:22,399
and then resets it too fast then the

1635
01:08:22,399 --> 01:08:23,120
other side

1636
01:08:23,120 --> 01:08:25,120
never hears about that stream and and

1637
01:08:25,120 --> 01:08:26,399
that's okay

1638
01:08:26,399 --> 01:08:29,358
that's perfectly fine

1639
01:08:30,880 --> 01:08:34,319
uh right uh thank you

1640
01:08:34,319 --> 01:08:39,040
luke so um from an application

1641
01:08:39,040 --> 01:08:41,920
level uh if i'm using web transport i

1642
01:08:41,920 --> 01:08:42,799
create a stream

1643
01:08:42,799 --> 01:08:44,960
i could write i don't know a megabyte of

1644
01:08:44,960 --> 01:08:46,560
data and then

1645
01:08:46,560 --> 01:08:49,279
uh use the the web transport api and and

1646
01:08:49,279 --> 01:08:51,439
close it with error code five

1647
01:08:51,439 --> 01:08:54,640
um i i think

1648
01:08:54,640 --> 01:08:56,799
it's it's a reasonable expectation for a

1649
01:08:56,799 --> 01:08:58,719
developer that that error code five is

1650
01:08:58,719 --> 01:09:00,479
going to make it to the other side

1651
01:09:00,479 --> 01:09:03,679
um especially if you've written data to

1652
01:09:03,679 --> 01:09:04,719
it but

1653
01:09:04,719 --> 01:09:06,238
what really happens is if there's any

1654
01:09:06,238 --> 01:09:07,839
packet loss um

1655
01:09:07,839 --> 01:09:10,158
that code could be dropped uh the reset

1656
01:09:10,158 --> 01:09:11,520
stream could win

1657
01:09:11,520 --> 01:09:14,399
the reset stream frame could win and

1658
01:09:14,399 --> 01:09:15,198
because

1659
01:09:15,198 --> 01:09:16,479
none of the data was received on the

1660
01:09:16,479 --> 01:09:18,319
stream uh

1661
01:09:18,319 --> 01:09:20,640
actually more specifically the first

1662
01:09:20,640 --> 01:09:22,640
data frame wasn't received on

1663
01:09:22,640 --> 01:09:25,839
the stream um you'll just that

1664
01:09:25,839 --> 01:09:27,279
it'll just be dropped completely so it

1665
01:09:27,279 --> 01:09:30,238
seems like a a poor

1666
01:09:30,238 --> 01:09:32,799
maybe not a poor api but maybe something

1667
01:09:32,799 --> 01:09:34,238
that could lead to problems where

1668
01:09:34,238 --> 01:09:36,080
application developers just expect these

1669
01:09:36,080 --> 01:09:38,319
codes to be reliable

1670
01:09:38,319 --> 01:09:40,238
but just due to packet loss they might

1671
01:09:40,238 --> 01:09:42,399
not be and i don't think that's an api

1672
01:09:42,399 --> 01:09:48,640
we want to expose

1673
01:09:48,640 --> 01:09:51,920
is it specifically about the reset

1674
01:09:51,920 --> 01:09:57,199
code error code being reliable

1675
01:09:57,280 --> 01:09:58,640
yeah i think it's just the code being

1676
01:09:58,640 --> 01:10:00,640
reliable i think the

1677
01:10:00,640 --> 01:10:03,120
well and the fact that a stream existed

1678
01:10:03,120 --> 01:10:04,080
um

1679
01:10:04,080 --> 01:10:05,840
i guess this goes to the id question as

1680
01:10:05,840 --> 01:10:07,920
well like does the receiver need to know

1681
01:10:07,920 --> 01:10:09,280
that a stream even ever

1682
01:10:09,280 --> 01:10:13,199
existed um because if you reset a stream

1683
01:10:13,199 --> 01:10:14,080
and

1684
01:10:14,080 --> 01:10:15,679
if you receive a reset stream and you

1685
01:10:15,679 --> 01:10:17,199
never receive data for it

1686
01:10:17,199 --> 01:10:18,480
you wouldn't know what protocol it was

1687
01:10:18,480 --> 01:10:19,840
for as you would never know it would

1688
01:10:19,840 --> 01:10:22,159
exist

1689
01:10:26,560 --> 01:10:31,840
under third martin

1690
01:10:32,719 --> 01:10:35,920
but one because this is physics

1691
01:10:35,920 --> 01:10:40,159
right and so physics states that uh if

1692
01:10:40,159 --> 01:10:40,400
you

1693
01:10:40,400 --> 01:10:43,360
if you use reset stream for this purpose

1694
01:10:43,360 --> 01:10:45,120
you don't get to learn about the code

1695
01:10:45,120 --> 01:10:47,280
sometimes

1696
01:10:47,280 --> 01:10:50,000
and that's just how it works and so the

1697
01:10:50,000 --> 01:10:51,360
question is whether we

1698
01:10:51,360 --> 01:10:53,760
we build an additional facility into the

1699
01:10:53,760 --> 01:10:54,480
protocol

1700
01:10:54,480 --> 01:10:58,320
in order to carry these messages or we

1701
01:10:58,320 --> 01:11:00,640
consider the option for those people who

1702
01:11:00,640 --> 01:11:01,760
absolutely

1703
01:11:01,760 --> 01:11:04,159
absolutely need this to have a dedicated

1704
01:11:04,159 --> 01:11:04,880
connection

1705
01:11:04,880 --> 01:11:06,560
and get these messages because that's

1706
01:11:06,560 --> 01:11:08,800
the only way that i can see of getting

1707
01:11:08,800 --> 01:11:11,520
these these messages through reliably

1708
01:11:11,520 --> 01:11:12,000
and yes

1709
01:11:12,000 --> 01:11:13,199
you're going to lose your error codes

1710
01:11:13,199 --> 01:11:15,199
occasionally

1711
01:11:15,199 --> 01:11:20,159
too bad can you hear me

1712
01:11:20,159 --> 01:11:23,679
yeah okay uh because for some reason

1713
01:11:23,679 --> 01:11:25,920
saying that my id is gone

1714
01:11:25,920 --> 01:11:28,960
my question

1715
01:11:29,040 --> 01:11:33,679
it i would say that it is possible to

1716
01:11:33,679 --> 01:11:37,840
just make it so racist dream miracles

1717
01:11:37,840 --> 01:11:39,600
always arrive if you're not

1718
01:11:39,600 --> 01:11:43,120
pulling your connections and

1719
01:11:43,120 --> 01:11:47,199
to some extent that's a solution

1720
01:11:52,480 --> 01:11:54,480
i was going to say there is an option

1721
01:11:54,480 --> 01:11:56,560
here that that does work

1722
01:11:56,560 --> 01:11:59,760
potentially and that is to reserve

1723
01:11:59,760 --> 01:12:02,880
uh reset stream error codes

1724
01:12:02,880 --> 01:12:06,400
for web transport uh it gives you

1725
01:12:06,400 --> 01:12:09,840
some ambiguity if you have

1726
01:12:09,840 --> 01:12:12,719
two tabs in the browser sharing the same

1727
01:12:12,719 --> 01:12:14,320
transport

1728
01:12:14,320 --> 01:12:17,519
and you get

1729
01:12:17,840 --> 01:12:20,000
two different web transports to each of

1730
01:12:20,000 --> 01:12:21,280
those different tabs

1731
01:12:21,280 --> 01:12:23,920
on that same connection then a reset

1732
01:12:23,920 --> 01:12:25,120
stream

1733
01:12:25,120 --> 01:12:28,159
will propagate to

1734
01:12:28,159 --> 01:12:31,360
neither tab because you can't allow

1735
01:12:31,360 --> 01:12:31,760
cross

1736
01:12:31,760 --> 01:12:34,320
tab communication like that that's the

1737
01:12:34,320 --> 01:12:35,440
only case i can

1738
01:12:35,440 --> 01:12:39,040
imagine being a problem yes

1739
01:12:39,040 --> 01:12:41,520
but that's against the built case

1740
01:12:41,520 --> 01:12:42,080
because

1741
01:12:42,080 --> 01:12:44,640
if you have only one connection or yours

1742
01:12:44,640 --> 01:12:45,199
yeah that

1743
01:12:45,199 --> 01:12:49,040
doesn't i feel like we should regardless

1744
01:12:49,040 --> 01:12:52,000
reserve some space for web transport

1745
01:12:52,000 --> 01:12:53,679
error codes

1746
01:12:53,679 --> 01:12:56,320
uh and the reason for that is so that we

1747
01:12:56,320 --> 01:12:58,239
can distinguish web transport error

1748
01:12:58,239 --> 01:12:58,880
codes

1749
01:12:58,880 --> 01:13:02,880
from http error codes regardless

1750
01:13:02,880 --> 01:13:05,840
of what we're doing

1751
01:13:12,000 --> 01:13:19,760
yeah never

1752
01:13:19,760 --> 01:13:22,000
all right sorry my audio is back here

1753
01:13:22,000 --> 01:13:23,440
yeah i just want to echo the

1754
01:13:23,440 --> 01:13:25,600
um i think we're going to have to find

1755
01:13:25,600 --> 01:13:27,760
some way to

1756
01:13:27,760 --> 01:13:30,840
make these apis based on this

1757
01:13:30,840 --> 01:13:34,880
um a little more predictable and

1758
01:13:34,880 --> 01:13:36,560
i'm hopeful that we might be able to do

1759
01:13:36,560 --> 01:13:38,800
so

1760
01:13:39,920 --> 01:13:43,040
at the ipi level but it seems like this

1761
01:13:43,040 --> 01:13:44,159
particular one

1762
01:13:44,159 --> 01:13:48,640
it would uh if there's a way to

1763
01:13:48,640 --> 01:13:53,440
i guess if once you get a newer stream

1764
01:13:53,440 --> 01:13:56,000
you might know that there was one an

1765
01:13:56,000 --> 01:13:57,280
earlier one

1766
01:13:57,280 --> 01:13:59,040
that could have been reset for example

1767
01:13:59,040 --> 01:14:00,480
that never existed

1768
01:14:00,480 --> 01:14:04,480
and but the semantics here bother me a

1769
01:14:04,480 --> 01:14:05,040
little bit

1770
01:14:05,040 --> 01:14:07,440
and it sounds like they're embedded in a

1771
01:14:07,440 --> 01:14:09,520
protocol that

1772
01:14:09,520 --> 01:14:12,320
you can reset something you can initiate

1773
01:14:12,320 --> 01:14:13,120
something and then

1774
01:14:13,120 --> 01:14:16,080
pull it back without the recipient ever

1775
01:14:16,080 --> 01:14:17,280
knowing about it and that's going to

1776
01:14:17,280 --> 01:14:18,560
cause a jump in

1777
01:14:18,560 --> 01:14:23,360
sequence numbers or is it too late to

1778
01:14:23,360 --> 01:14:25,520
is that true or is or can the read

1779
01:14:25,520 --> 01:14:26,480
sequence number

1780
01:14:26,480 --> 01:14:28,800
be reused in this case where it was

1781
01:14:28,800 --> 01:14:29,840
reset before

1782
01:14:29,840 --> 01:14:32,640
sending any bytes

1783
01:14:33,120 --> 01:14:36,320
uh no but

1784
01:14:36,320 --> 01:14:39,520
as as we mentioned before reset

1785
01:14:39,520 --> 01:14:44,000
takes it out of a stream

1786
01:14:44,000 --> 01:14:48,159
space for hd underlying http connection

1787
01:14:48,159 --> 01:14:51,679
but it doesn't but that space doesn't

1788
01:14:51,679 --> 01:14:56,239
really exist for individual

1789
01:15:08,840 --> 01:15:11,840
session

1790
01:15:16,320 --> 01:15:19,120
all right uh and and just to add because

1791
01:15:19,120 --> 01:15:20,080
i

1792
01:15:20,080 --> 01:15:22,560
saw this in in the in the chat in one of

1793
01:15:22,560 --> 01:15:23,280
the chats

1794
01:15:23,280 --> 01:15:26,560
um i think just conceptually and

1795
01:15:26,560 --> 01:15:28,159
fundamentally

1796
01:15:28,159 --> 01:15:30,960
quick streams are not ordered uh the

1797
01:15:30,960 --> 01:15:33,600
fact that in quick they have a stream id

1798
01:15:33,600 --> 01:15:34,960
that is sequential

1799
01:15:34,960 --> 01:15:38,560
is an implementation detail of quick

1800
01:15:38,560 --> 01:15:40,000
maybe at the end of the day we just need

1801
01:15:40,000 --> 01:15:42,080
to accept the fact that they are not

1802
01:15:42,080 --> 01:15:42,719
ordered

1803
01:15:42,719 --> 01:15:45,440
and that is like quick does not provide

1804
01:15:45,440 --> 01:15:47,040
this property to upper layers and web

1805
01:15:47,040 --> 01:15:48,880
transport does not provide this property

1806
01:15:48,880 --> 01:15:49,840
to our

1807
01:15:49,840 --> 01:15:52,640
higher layers um i think at this point

1808
01:15:52,640 --> 01:15:52,960
and

1809
01:15:52,960 --> 01:15:54,719
let's move on i don't want to spend too

1810
01:15:54,719 --> 01:15:57,520
much time on this specific topic

1811
01:15:57,520 --> 01:16:00,560
um but if there is a need for this i

1812
01:16:00,560 --> 01:16:01,040
think

1813
01:16:01,040 --> 01:16:02,719
uh it would be nice for someone to

1814
01:16:02,719 --> 01:16:04,640
articulate what the use cases that would

1815
01:16:04,640 --> 01:16:05,840
clearly benefit from this

1816
01:16:05,840 --> 01:16:08,480
because since quick doesn't offer this

1817
01:16:08,480 --> 01:16:09,120
property

1818
01:16:09,120 --> 01:16:11,280
for us to add this property into web

1819
01:16:11,280 --> 01:16:13,199
transfer would be non-trivial

1820
01:16:13,199 --> 01:16:15,360
and as with most things we don't want to

1821
01:16:15,360 --> 01:16:21,839
add complexity unless we have to

1822
01:16:35,760 --> 01:16:38,560
can we move on to the next issue victor

1823
01:16:38,560 --> 01:16:39,040
you want to

1824
01:16:39,040 --> 01:16:42,560
keep going uh one second

1825
01:16:42,560 --> 01:16:45,520
yeah i i think we're yeah i think we

1826
01:16:45,520 --> 01:16:46,719
should

1827
01:16:46,719 --> 01:16:49,120
move the rest conversation to mailing

1828
01:16:49,120 --> 01:16:50,719
lists and github

1829
01:16:50,719 --> 01:16:54,000
uh so this is uh so

1830
01:16:54,000 --> 01:16:58,239
there isn't uh issues 28 and 29

1831
01:16:58,239 --> 01:17:00,320
are roughly the same issue but from

1832
01:17:00,320 --> 01:17:02,159
different perspective

1833
01:17:02,159 --> 01:17:06,800
uh basically the observation is if we

1834
01:17:06,800 --> 01:17:09,920
is the question do we require

1835
01:17:09,920 --> 01:17:13,600
client and server to buffer

1836
01:17:13,600 --> 01:17:16,400
incoming streams if they come they're

1837
01:17:16,400 --> 01:17:17,600
associated with

1838
01:17:17,600 --> 01:17:20,320
a web transport session that is not yet

1839
01:17:20,320 --> 01:17:21,840
known

1840
01:17:21,840 --> 01:17:26,080
uh and the ants the basically

1841
01:17:26,080 --> 01:17:29,120
if we answer yes we can

1842
01:17:29,120 --> 01:17:32,880
let the client open streams in parallel

1843
01:17:32,880 --> 01:17:35,679
with making establishing web transport

1844
01:17:35,679 --> 01:17:36,560
session

1845
01:17:36,560 --> 01:17:39,520
which would cut down on latency and

1846
01:17:39,520 --> 01:17:40,640
similarly

1847
01:17:40,640 --> 01:17:44,159
uh this it is unclear

1848
01:17:44,159 --> 01:17:47,440
how to make server streams

1849
01:17:47,440 --> 01:17:50,480
work without doing that so i think we

1850
01:17:50,480 --> 01:17:51,360
should buffer

1851
01:17:51,360 --> 01:17:54,800
in both directions uh but

1852
01:17:54,800 --> 01:17:57,520
i was wondering if people have opinions

1853
01:17:57,520 --> 01:18:00,080
or anything to scientists better

1854
01:18:00,080 --> 01:18:03,760
uh bernard yeah i i agree

1855
01:18:03,760 --> 01:18:05,679
um we've encountered this in other

1856
01:18:05,679 --> 01:18:07,600
things such as weber dc and buffering is

1857
01:18:07,600 --> 01:18:08,800
a good idea

1858
01:18:08,800 --> 01:18:10,400
the only thing to keep in mind is you

1859
01:18:10,400 --> 01:18:12,080
might want to have limits on the buffer

1860
01:18:12,080 --> 01:18:15,199
that's that's about it yeah that's i

1861
01:18:15,199 --> 01:18:17,520
assume like as long as you don't read

1862
01:18:17,520 --> 01:18:19,440
past the beginning of the streams

1863
01:18:19,440 --> 01:18:21,520
you would get flow control blocked on

1864
01:18:21,520 --> 01:18:26,640
all of those streams

1865
01:18:26,640 --> 01:18:29,440
uh does anyone else have anything else

1866
01:18:29,440 --> 01:18:31,759
to say

1867
01:18:38,840 --> 01:18:40,000
uh

1868
01:18:40,000 --> 01:18:42,560
yes we might want to limit number of

1869
01:18:42,560 --> 01:18:43,600
streams

1870
01:18:43,600 --> 01:18:45,600
this is a different issue which i think

1871
01:18:45,600 --> 01:18:46,719
is currently

1872
01:18:46,719 --> 01:18:50,960
not uh uh

1873
01:18:50,960 --> 01:18:54,320
here uh yes that's true

1874
01:18:54,320 --> 01:18:57,440
uh the there is a separate issue for

1875
01:18:57,440 --> 01:18:59,360
in general how do we limit the number of

1876
01:18:59,360 --> 01:19:02,639
streams uh

1877
01:19:02,880 --> 01:19:06,000
so next slide

1878
01:19:07,360 --> 01:19:11,520
uh oh this one is an interesting one and

1879
01:19:11,520 --> 01:19:13,920
it comes from proxy so

1880
01:19:13,920 --> 01:19:17,040
uh assume uh that like you

1881
01:19:17,040 --> 01:19:19,840
are connected to a reverse proxy and the

1882
01:19:19,840 --> 01:19:22,159
traverse proxy is connected to a back

1883
01:19:22,159 --> 01:19:23,120
end

1884
01:19:23,120 --> 01:19:25,920
and you receive a go away from a back

1885
01:19:25,920 --> 01:19:28,320
end

1886
01:19:28,560 --> 01:19:31,600
meaning that roughly you want

1887
01:19:31,600 --> 01:19:35,040
to indicate somehow to the application

1888
01:19:35,040 --> 01:19:39,120
and now somehow your reverse proxy

1889
01:19:39,120 --> 01:19:43,440
should indicate to the application

1890
01:19:43,440 --> 01:19:46,880
that the to to the clients that

1891
01:19:46,880 --> 01:19:49,040
the session is being trained and it will

1892
01:19:49,040 --> 01:19:50,800
go away soon

1893
01:19:50,800 --> 01:19:53,760
the question is how do we do this and do

1894
01:19:53,760 --> 01:19:54,640
we want to

1895
01:19:54,640 --> 01:19:58,000
support this in protocol

1896
01:20:00,960 --> 01:20:05,840
do people have any thoughts on that

1897
01:20:09,520 --> 01:20:13,440
alan i'm trying to i'm gonna say

1898
01:20:13,440 --> 01:20:14,880
something that martin can't disagree

1899
01:20:14,880 --> 01:20:15,360
with i

1900
01:20:15,360 --> 01:20:19,280
i don't know um

1901
01:20:19,280 --> 01:20:21,199
so i just want to say that this is a

1902
01:20:21,199 --> 01:20:23,360
very it's very important that we find a

1903
01:20:23,360 --> 01:20:24,800
solution to this

1904
01:20:24,800 --> 01:20:28,719
problem uh because we have

1905
01:20:28,719 --> 01:20:30,400
essentially something very similar to

1906
01:20:30,400 --> 01:20:32,320
web transport running today

1907
01:20:32,320 --> 01:20:35,520
uh and the application that uses it

1908
01:20:35,520 --> 01:20:37,600
you know they have a sequence of streams

1909
01:20:37,600 --> 01:20:39,440
that we do this over h2 today

1910
01:20:39,440 --> 01:20:41,199
they have a sequence of streams that

1911
01:20:41,199 --> 01:20:43,120
belong sort of as a transaction and they

1912
01:20:43,120 --> 01:20:43,840
need to

1913
01:20:43,840 --> 01:20:45,360
await like when they're back-end or one

1914
01:20:45,360 --> 01:20:47,440
of the interview meeting proxies

1915
01:20:47,440 --> 01:20:50,880
starts draining they need a way to

1916
01:20:50,880 --> 01:20:52,480
we need we need to a signal like please

1917
01:20:52,480 --> 01:20:54,639
don't start any more new work here

1918
01:20:54,639 --> 01:20:56,320
but and wrap up what you're doing but

1919
01:20:56,320 --> 01:20:58,000
don't prevent the creation of new

1920
01:20:58,000 --> 01:20:58,960
streams

1921
01:20:58,960 --> 01:21:00,880
that were needed in order to complete

1922
01:21:00,880 --> 01:21:02,400
sort of the transaction that were

1923
01:21:02,400 --> 01:21:05,760
associated with that session so uh i

1924
01:21:05,760 --> 01:21:07,679
i don't have a concrete proposal here

1925
01:21:07,679 --> 01:21:10,159
but i foresee

1926
01:21:10,159 --> 01:21:12,960
i think you know sending something like

1927
01:21:12,960 --> 01:21:14,000
a go away type

1928
01:21:14,000 --> 01:21:16,639
frame on the connect stream of the web

1929
01:21:16,639 --> 01:21:17,920
transport session

1930
01:21:17,920 --> 01:21:20,239
being an adequate solution but i'm

1931
01:21:20,239 --> 01:21:21,760
hoping to hear other ideas but i

1932
01:21:21,760 --> 01:21:22,800
just want to highlight i think it's an

1933
01:21:22,800 --> 01:21:25,120
important issue

1934
01:21:25,120 --> 01:21:28,960
all right uh martin i think i'm going to

1935
01:21:28,960 --> 01:21:32,800
agree with alan here um it's

1936
01:21:32,800 --> 01:21:35,760
the way that we've been conceptually our

1937
01:21:35,760 --> 01:21:36,400
way

1938
01:21:36,400 --> 01:21:40,080
is that new requests stop

1939
01:21:40,080 --> 01:21:42,400
but this is not your requests because

1940
01:21:42,400 --> 01:21:43,679
we're talking about something that is

1941
01:21:43,679 --> 01:21:46,400
it's it's like the next level down and

1942
01:21:46,400 --> 01:21:47,199
so

1943
01:21:47,199 --> 01:21:49,920
um when the way that i would imagine

1944
01:21:49,920 --> 01:21:51,520
this working

1945
01:21:51,520 --> 01:21:53,679
similar to how alan's proposed it i

1946
01:21:53,679 --> 01:21:55,440
think would be that the

1947
01:21:55,440 --> 01:21:58,719
go away at the h3 layer says no more

1948
01:21:58,719 --> 01:22:00,800
requests please

1949
01:22:00,800 --> 01:22:02,639
but you can continue to create web

1950
01:22:02,639 --> 01:22:04,320
transport streams associated with

1951
01:22:04,320 --> 01:22:04,880
existing

1952
01:22:04,880 --> 01:22:08,639
web transport sessions

1953
01:22:08,639 --> 01:22:10,800
within the sessions however you're going

1954
01:22:10,800 --> 01:22:12,000
to need a way to say

1955
01:22:12,000 --> 01:22:15,120
stop making new streams and so then

1956
01:22:15,120 --> 01:22:16,880
there might be a need to have some sort

1957
01:22:16,880 --> 01:22:17,199
of

1958
01:22:17,199 --> 01:22:20,239
uh thing like allen said on the connect

1959
01:22:20,239 --> 01:22:20,880
stream

1960
01:22:20,880 --> 01:22:23,760
saying stop making new streams and that

1961
01:22:23,760 --> 01:22:25,679
might that might be the way to solve it

1962
01:22:25,679 --> 01:22:28,400
i don't actually know if that makes

1963
01:22:28,400 --> 01:22:29,120
sense

1964
01:22:29,120 --> 01:22:31,120
as opposed to just giving the

1965
01:22:31,120 --> 01:22:32,880
application some ability to

1966
01:22:32,880 --> 01:22:36,840
to build that that capability itself

1967
01:22:36,840 --> 01:22:38,000
though

1968
01:22:38,000 --> 01:22:41,040
not enough detail yet

1969
01:22:51,040 --> 01:22:54,320
uh does any so it sounds like we in

1970
01:22:54,320 --> 01:22:56,239
general agree that we should solve this

1971
01:22:56,239 --> 01:22:58,239
problem somehow

1972
01:22:58,239 --> 01:23:02,000
uh but

1973
01:23:02,000 --> 01:23:04,560
we need to decide on specific solution

1974
01:23:04,560 --> 01:23:06,080
and we should probably do that

1975
01:23:06,080 --> 01:23:10,559
offline next slide

1976
01:23:18,840 --> 01:23:21,840
uh

1977
01:23:23,120 --> 01:23:26,800
yeah so this is uh so issue 33

1978
01:23:26,800 --> 01:23:29,920
is roughly currently

1979
01:23:29,920 --> 01:23:34,400
we when we have a connect stream

1980
01:23:34,400 --> 01:23:38,159
when it gets closed or reset uh

1981
01:23:38,159 --> 01:23:40,080
this indicates that the web transport

1982
01:23:40,080 --> 01:23:41,920
session is completely gone

1983
01:23:41,920 --> 01:23:44,320
and all of the streams belonging to it

1984
01:23:44,320 --> 01:23:46,239
must be reset

1985
01:23:46,239 --> 01:23:48,639
and the question is whether we should

1986
01:23:48,639 --> 01:23:51,199
keep that semantics or whether we should

1987
01:23:51,199 --> 01:23:55,120
uh remove it or relax it so the streams

1988
01:23:55,120 --> 01:23:55,600
can

1989
01:23:55,600 --> 01:23:58,960
continue to drain even after it's closed

1990
01:23:58,960 --> 01:24:02,000
and from my perspective i think

1991
01:24:02,000 --> 01:24:05,280
that semantics of everything completely

1992
01:24:05,280 --> 01:24:06,080
going away

1993
01:24:06,080 --> 01:24:09,520
is useful because in particular imagine

1994
01:24:09,520 --> 01:24:10,000
you're

1995
01:24:10,000 --> 01:24:13,199
a web application and

1996
01:24:13,199 --> 01:24:15,360
you have a browser tab and you have an

1997
01:24:15,360 --> 01:24:17,760
object that's a client object

1998
01:24:17,760 --> 01:24:21,520
uh if you you want to be able to hard

1999
01:24:21,520 --> 01:24:23,760
close the entire web transport session

2000
01:24:23,760 --> 01:24:24,639
because

2001
01:24:24,639 --> 01:24:27,440
if you close the entire tab there is no

2002
01:24:27,440 --> 01:24:28,800
more data to flow

2003
01:24:28,800 --> 01:24:31,520
like everything is gone so you should be

2004
01:24:31,520 --> 01:24:32,639
able to throw out

2005
01:24:32,639 --> 01:24:35,679
entire web transport session uh

2006
01:24:35,679 --> 01:24:38,880
without uh needing to

2007
01:24:38,880 --> 01:24:42,080
do anything like a train uh but

2008
01:24:42,080 --> 01:24:46,080
i do one understand that

2009
01:24:46,080 --> 01:24:47,840
people might have different opinions on

2010
01:24:47,840 --> 01:24:49,360
this uh and

2011
01:24:49,360 --> 01:24:52,719
if you have different opinions uh please

2012
01:24:52,719 --> 01:24:56,320
uh uh go please

2013
01:24:56,320 --> 01:25:00,080
say talk as to mike yeah alan

2014
01:25:00,639 --> 01:25:03,360
yeah so i'm i raised this issue after i

2015
01:25:03,360 --> 01:25:04,400
implemented

2016
01:25:04,400 --> 01:25:07,360
or mostly implemented last week and i

2017
01:25:07,360 --> 01:25:08,400
found i did not

2018
01:25:08,400 --> 01:25:12,239
need in my implementation to track

2019
01:25:12,239 --> 01:25:14,000
all the streams that belong which

2020
01:25:14,000 --> 01:25:15,760
streams belong to which session

2021
01:25:15,760 --> 01:25:18,239
sort of inside the kind of transport

2022
01:25:18,239 --> 01:25:19,120
stack

2023
01:25:19,120 --> 01:25:22,880
for any reason other than this reason uh

2024
01:25:22,880 --> 01:25:26,480
so you know but because i

2025
01:25:26,480 --> 01:25:27,679
need to reset them when the connect

2026
01:25:27,679 --> 01:25:29,280
stream goes away at sort of the library

2027
01:25:29,280 --> 01:25:30,080
level

2028
01:25:30,080 --> 01:25:32,880
uh i would have to like keep an extra

2029
01:25:32,880 --> 01:25:34,480
list of things which i'm

2030
01:25:34,480 --> 01:25:37,600
and maybe sort of offer that

2031
01:25:37,600 --> 01:25:40,639
the higher level would probably already

2032
01:25:40,639 --> 01:25:41,440
have that and

2033
01:25:41,440 --> 01:25:43,120
if the browser tab is going away it can

2034
01:25:43,120 --> 01:25:45,440
also reset those streams

2035
01:25:45,440 --> 01:25:48,000
um so i mean i mean i see the advantage

2036
01:25:48,000 --> 01:25:49,280
of just like yes it's tied to the

2037
01:25:49,280 --> 01:25:50,719
lifetime of connect and i can just nuke

2038
01:25:50,719 --> 01:25:52,239
this one thing and everything else goes

2039
01:25:52,239 --> 01:25:52,960
away but

2040
01:25:52,960 --> 01:25:54,159
i don't know sort of just pushing

2041
01:25:54,159 --> 01:25:56,480
somebody has to track that and

2042
01:25:56,480 --> 01:25:58,239
and where where do you push it and i

2043
01:25:58,239 --> 01:25:59,520
don't know i i

2044
01:25:59,520 --> 01:26:01,679
i never know if bringing this up is an

2045
01:26:01,679 --> 01:26:03,280
argument for or against but

2046
01:26:03,280 --> 01:26:05,679
if you liken this at all to the way that

2047
01:26:05,679 --> 01:26:07,040
push works

2048
01:26:07,040 --> 01:26:09,679
uh you know sort of the the independent

2049
01:26:09,679 --> 01:26:11,040
stream can go away

2050
01:26:11,040 --> 01:26:13,920
and the life of the dependent stream is

2051
01:26:13,920 --> 01:26:16,159
not tied to it it was in speedy and in

2052
01:26:16,159 --> 01:26:17,760
early drafts of h2 but then that

2053
01:26:17,760 --> 01:26:19,280
requirement was removed

2054
01:26:19,280 --> 01:26:22,560
and so you're allowed to sort of destroy

2055
01:26:22,560 --> 01:26:25,040
the the parent thing and then the the

2056
01:26:25,040 --> 01:26:25,600
child

2057
01:26:25,600 --> 01:26:29,440
things continue with their own life

2058
01:26:33,280 --> 01:26:37,040
i can kind of see this argument

2059
01:26:37,040 --> 01:26:40,719
i guess the question is so i definitely

2060
01:26:40,719 --> 01:26:43,840
think that the browser should close

2061
01:26:43,840 --> 01:26:46,880
uh reset the connect stream uh

2062
01:26:46,880 --> 01:26:50,000
it is not clear to me

2063
01:26:50,000 --> 01:26:53,120
whether all implement we we could relax

2064
01:26:53,120 --> 01:26:54,719
that

2065
01:26:54,719 --> 01:26:56,719
requirement on non-browser

2066
01:26:56,719 --> 01:26:58,159
implementations because

2067
01:26:58,159 --> 01:27:01,280
as you mentioned

2068
01:27:02,960 --> 01:27:05,040
for the reasons you've described because

2069
01:27:05,040 --> 01:27:06,639
now i'm thinking about

2070
01:27:06,639 --> 01:27:10,480
uh uh

2071
01:27:10,480 --> 01:27:12,719
how it would work in our implementation

2072
01:27:12,719 --> 01:27:14,159
and uh like i

2073
01:27:14,159 --> 01:27:19,600
i can see the similar thing uh look

2074
01:27:19,600 --> 01:27:21,120
i just want to bring up similar to a

2075
01:27:21,120 --> 01:27:23,199
previous issue that only the creator of

2076
01:27:23,199 --> 01:27:23,840
the stream

2077
01:27:23,840 --> 01:27:25,199
knows that it's associated with a

2078
01:27:25,199 --> 01:27:27,520
connection um

2079
01:27:27,520 --> 01:27:29,760
so it seems like whoever created the

2080
01:27:29,760 --> 01:27:30,719
stream should

2081
01:27:30,719 --> 01:27:32,560
close it whenever the connect stream is

2082
01:27:32,560 --> 01:27:34,480
closed uh otherwise you're left in this

2083
01:27:34,480 --> 01:27:36,000
case there might be a dangling stream

2084
01:27:36,000 --> 01:27:36,400
that

2085
01:27:36,400 --> 01:27:38,400
you know the other side doesn't know

2086
01:27:38,400 --> 01:27:40,080
it's supposed to be associated with this

2087
01:27:40,080 --> 01:27:43,120
now defunct session

2088
01:27:44,080 --> 01:27:47,120
yeah i agree and especially given that

2089
01:27:47,120 --> 01:27:49,760
we consider things like buffering

2090
01:27:49,760 --> 01:27:51,679
uh you might end up in this weird

2091
01:27:51,679 --> 01:27:52,800
situation where

2092
01:27:52,800 --> 01:27:55,520
the connect stream is entirely created

2093
01:27:55,520 --> 01:27:57,040
and destroyed

2094
01:27:57,040 --> 01:27:59,600
and now there is this like web transport

2095
01:27:59,600 --> 01:28:03,040
stream that is buffered

2096
01:28:03,440 --> 01:28:05,600
and does not belong to everything and

2097
01:28:05,600 --> 01:28:07,840
like

2098
01:28:12,840 --> 01:28:15,840
uh

2099
01:28:16,400 --> 01:28:19,360
yeah lucas makes a good observation that

2100
01:28:19,360 --> 01:28:20,080
if we

2101
01:28:20,080 --> 01:28:23,199
allow uh

2102
01:28:23,199 --> 01:28:26,239
staying streams

2103
01:28:26,239 --> 01:28:29,360
past uh

2104
01:28:29,360 --> 01:28:32,480
destruction of connectstream uh that

2105
01:28:32,480 --> 01:28:36,000
makes us less able to rely on

2106
01:28:36,000 --> 01:28:39,120
extending connectstream for like

2107
01:28:39,120 --> 01:28:41,360
random control semantics like sending

2108
01:28:41,360 --> 01:28:43,360
girl ways

2109
01:28:43,360 --> 01:28:46,719
uh which is one thing we discussed uh

2110
01:28:46,719 --> 01:28:49,280
so is anyone actually in the queue right

2111
01:28:49,280 --> 01:28:49,840
now

2112
01:28:49,840 --> 01:28:52,719
because i

2113
01:28:53,040 --> 01:28:56,239
if you're not in the cupless yeah

2114
01:28:56,239 --> 01:29:00,320
uh so i think for now we should keep it

2115
01:29:00,320 --> 01:29:00,719
as

2116
01:29:00,719 --> 01:29:03,920
is uh and

2117
01:29:03,920 --> 01:29:06,719
i don't want to strictly close this

2118
01:29:06,719 --> 01:29:07,920
issue because

2119
01:29:07,920 --> 01:29:11,199
uh i won't to

2120
01:29:11,199 --> 01:29:13,600
see how i will feel about it after i

2121
01:29:13,600 --> 01:29:15,679
actually implement it

2122
01:29:15,679 --> 01:29:17,760
uh but for now let's keep the

2123
01:29:17,760 --> 01:29:18,800
requirement that

2124
01:29:18,800 --> 01:29:21,520
everything gets reset once the connect

2125
01:29:21,520 --> 01:29:24,560
stream is closed

2126
01:29:36,840 --> 01:29:39,120
available

2127
01:29:39,120 --> 01:29:42,159
uh the question is how do we

2128
01:29:42,159 --> 01:29:45,040
talk about pooling and support

2129
01:29:45,040 --> 01:29:46,000
negotiation

2130
01:29:46,000 --> 01:29:49,199
for http web transport over http free

2131
01:29:49,199 --> 01:29:50,960
pulling

2132
01:29:50,960 --> 01:29:55,360
and we have at least three proposals

2133
01:29:55,360 --> 01:29:59,199
uh option one is i think what uh

2134
01:29:59,199 --> 01:30:02,239
is currently in straft uh which is

2135
01:30:02,239 --> 01:30:04,639
roughly

2136
01:30:04,639 --> 01:30:07,920
we defer this entire problem to the

2137
01:30:07,920 --> 01:30:09,520
clients

2138
01:30:09,520 --> 01:30:12,560
and if you're a client uh

2139
01:30:12,560 --> 01:30:14,400
you should know whether the server

2140
01:30:14,400 --> 01:30:15,760
supports bullying

2141
01:30:15,760 --> 01:30:17,679
uh and if the server does not support

2142
01:30:17,679 --> 01:30:19,040
bullying it will turn your

2143
01:30:19,040 --> 01:30:23,360
request away and this is a fairly simple

2144
01:30:23,360 --> 01:30:24,800
model but the problem

2145
01:30:24,800 --> 01:30:28,000
is that it puts burden on all clients to

2146
01:30:28,000 --> 01:30:29,760
know whether support server supports

2147
01:30:29,760 --> 01:30:31,120
cooling or not

2148
01:30:31,120 --> 01:30:34,639
and the failures in non-support

2149
01:30:34,639 --> 01:30:38,560
pulling it's fairly uh of

2150
01:30:38,560 --> 01:30:41,280
is basically almost fatal well it's not

2151
01:30:41,280 --> 01:30:45,040
fatal you can handle it but uh

2152
01:30:45,600 --> 01:30:49,000
there is option two which is a settings

2153
01:30:49,000 --> 01:30:50,480
negotiation

2154
01:30:50,480 --> 01:30:53,600
uh in which both server and client agree

2155
01:30:53,600 --> 01:30:57,280
on whether connection is a connection

2156
01:30:57,280 --> 01:30:59,679
entirely dedicated to one web transport

2157
01:30:59,679 --> 01:31:00,639
session

2158
01:31:00,639 --> 01:31:03,520
if it's a regular http connection that

2159
01:31:03,520 --> 01:31:05,199
supports web transport

2160
01:31:05,199 --> 01:31:07,280
or if it doesn't support web transport

2161
01:31:07,280 --> 01:31:11,120
at all and that is described in pr25

2162
01:31:11,120 --> 01:31:15,199
uh and there is also proposing to have a

2163
01:31:15,199 --> 01:31:16,080
limit on

2164
01:31:16,080 --> 01:31:18,159
max web transport sessions and you can

2165
01:31:18,159 --> 01:31:20,239
just set it to one if you want dedicate

2166
01:31:20,239 --> 01:31:20,960
it

2167
01:31:20,960 --> 01:31:25,040
uh and i don't think this actually

2168
01:31:25,040 --> 01:31:28,159
entirely does anything because while it

2169
01:31:28,159 --> 01:31:29,520
prevents you from pulling cloud

2170
01:31:29,520 --> 01:31:31,440
transport with other web transport it

2171
01:31:31,440 --> 01:31:33,360
does not tell you anything about

2172
01:31:33,360 --> 01:31:36,239
pooling web transport with regular http

2173
01:31:36,239 --> 01:31:37,520
requests

2174
01:31:37,520 --> 01:31:39,280
but that's another option that was

2175
01:31:39,280 --> 01:31:40,800
discussed on the

2176
01:31:40,800 --> 01:31:44,239
issue uh and so

2177
01:31:44,239 --> 01:31:47,600
uh i am personally uh

2178
01:31:47,600 --> 01:31:51,280
somewhere i i was originally

2179
01:31:51,280 --> 01:31:54,719
wrote pr25 and then i was convinced that

2180
01:31:54,719 --> 01:31:58,480
option one uh is probably

2181
01:31:58,480 --> 01:32:01,360
is much easier but now that people have

2182
01:32:01,360 --> 01:32:03,520
brought up that the client

2183
01:32:03,520 --> 01:32:05,600
might not necessarily know what it's

2184
01:32:05,600 --> 01:32:06,719
doing i

2185
01:32:06,719 --> 01:32:10,320
am more inclined to do

2186
01:32:10,320 --> 01:32:13,760
option two again uh but i do wanna know

2187
01:32:13,760 --> 01:32:17,760
what people's opinions are on this issue

2188
01:32:18,080 --> 01:32:22,960
uh let's go into the queue alan

2189
01:32:23,760 --> 01:32:25,760
yeah so i will i was the one who wrote

2190
01:32:25,760 --> 01:32:27,840
the max web transport session

2191
01:32:27,840 --> 01:32:30,080
thing and the issue and i think i've

2192
01:32:30,080 --> 01:32:31,199
since retracted it i

2193
01:32:31,199 --> 01:32:34,320
think it's a good idea so um but i

2194
01:32:34,320 --> 01:32:36,159
i don't think one is either i think we

2195
01:32:36,159 --> 01:32:37,679
need something like two

2196
01:32:37,679 --> 01:32:41,040
where uh the server can sort of declare

2197
01:32:41,040 --> 01:32:42,000
what it's going

2198
01:32:42,000 --> 01:32:46,560
to support um i think pr25 is

2199
01:32:46,560 --> 01:32:49,280
it's sort of weird i'm not sure that the

2200
01:32:49,280 --> 01:32:50,880
client

2201
01:32:50,880 --> 01:32:53,199
needs to be as involved and sort of like

2202
01:32:53,199 --> 01:32:54,719
agreeing on what to do right like

2203
01:32:54,719 --> 01:32:58,800
the server either can handle http

2204
01:32:58,800 --> 01:33:00,719
and web transport at the same time or it

2205
01:33:00,719 --> 01:33:02,560
can handle only web one web transport

2206
01:33:02,560 --> 01:33:04,080
thing or it can handle multiple web

2207
01:33:04,080 --> 01:33:05,760
transport things

2208
01:33:05,760 --> 01:33:10,080
um but it seems like that if the client

2209
01:33:10,080 --> 01:33:11,120
you know the client's going to make a

2210
01:33:11,120 --> 01:33:13,679
decision about doesn't even want to try

2211
01:33:13,679 --> 01:33:14,320
to pool

2212
01:33:14,320 --> 01:33:16,239
and then it can look at the setting it

2213
01:33:16,239 --> 01:33:18,400
got from the server and decide

2214
01:33:18,400 --> 01:33:20,719
if the server doesn't allow pooling then

2215
01:33:20,719 --> 01:33:22,560
the choice choices made for it

2216
01:33:22,560 --> 01:33:24,639
so i'm just not sure that the design 25

2217
01:33:24,639 --> 01:33:25,840
it might need some more massaging there

2218
01:33:25,840 --> 01:33:27,520
but i think i'm more in favor of option

2219
01:33:27,520 --> 01:33:29,760
two

2220
01:33:30,239 --> 01:33:34,159
so to explain the reason 25 requires

2221
01:33:34,159 --> 01:33:37,840
a client to signal intent is

2222
01:33:37,840 --> 01:33:40,239
you want to avoid a situation where the

2223
01:33:40,239 --> 01:33:42,320
client connects to a server

2224
01:33:42,320 --> 01:33:45,520
and the server is basically ion supports

2225
01:33:45,520 --> 01:33:47,120
only one

2226
01:33:47,120 --> 01:33:50,239
web transport protocol and nothing else

2227
01:33:50,239 --> 01:33:52,239
but the client expects to be able to

2228
01:33:52,239 --> 01:33:55,120
send regular http streams

2229
01:33:55,120 --> 01:33:57,920
uh and from that standpoint you want to

2230
01:33:57,920 --> 01:33:59,199
avoid that

2231
01:33:59,199 --> 01:34:01,920
uh you want to know the client that it

2232
01:34:01,920 --> 01:34:04,080
can't use a connection for that

2233
01:34:04,080 --> 01:34:07,199
uh but yeah i understand that uh

2234
01:34:07,199 --> 01:34:10,719
bernard yeah i also would like to speak

2235
01:34:10,719 --> 01:34:12,639
for option two

2236
01:34:12,639 --> 01:34:15,040
i think option one would be just uh

2237
01:34:15,040 --> 01:34:16,560
particularly if it's linked to other

2238
01:34:16,560 --> 01:34:17,760
things in the api

2239
01:34:17,760 --> 01:34:19,840
like what stats you get i just think it

2240
01:34:19,840 --> 01:34:21,520
would be very awkward and i think option

2241
01:34:21,520 --> 01:34:24,239
two is a lot cleaner

2242
01:34:24,239 --> 01:34:27,440
uh you're third uh thank you

2243
01:34:27,440 --> 01:34:30,480
uh yotaka

2244
01:34:33,520 --> 01:34:36,719
uh uh could you repeat this again

2245
01:34:36,719 --> 01:34:40,639
can you hear me okay now we can hear you

2246
01:34:40,639 --> 01:34:44,400
uh yeah i i don't understand

2247
01:34:44,400 --> 01:34:49,040
why the client need to

2248
01:34:49,199 --> 01:34:52,080
uh send their intention to the server

2249
01:34:52,080 --> 01:34:53,600
because the

2250
01:34:53,600 --> 01:34:57,600
the client in any case need to wait for

2251
01:34:57,600 --> 01:35:00,960
the first settings frame

2252
01:35:00,960 --> 01:35:04,639
so that the client can do a decision

2253
01:35:04,639 --> 01:35:05,440
making

2254
01:35:05,440 --> 01:35:08,800
with the server support and

2255
01:35:08,800 --> 01:35:11,280
we have developers in the intention or

2256
01:35:11,280 --> 01:35:12,400
client's intention

2257
01:35:12,400 --> 01:35:16,080
so that i don't i don't know

2258
01:35:16,080 --> 01:35:19,920
if the the the

2259
01:35:19,920 --> 01:35:22,480
we need to have our settings from that

2260
01:35:22,480 --> 01:35:23,360
client to

2261
01:35:23,360 --> 01:35:27,040
the server uh i think

2262
01:35:27,040 --> 01:35:30,400
i i think i agree with you

2263
01:35:30,400 --> 01:35:34,239
i that is a detail we will need

2264
01:35:34,239 --> 01:35:37,520
to think through more but yeah we

2265
01:35:37,520 --> 01:35:40,960
might be able to get rid of the client

2266
01:35:40,960 --> 01:35:43,119
signal and reduce client to only support

2267
01:35:43,119 --> 01:35:45,040
does not support web transport

2268
01:35:45,040 --> 01:35:47,760
and then the server can have both pulled

2269
01:35:47,760 --> 01:35:48,080
and

2270
01:35:48,080 --> 01:35:53,040
allow pulling and dedicated mode uh

2271
01:35:53,280 --> 01:35:56,480
thank you uh anyone else have any any

2272
01:35:56,480 --> 01:35:59,839
opinions for the microphone

2273
01:36:05,280 --> 01:36:11,840
uh dragana

2274
01:36:14,639 --> 01:36:18,000
ah it works do you hear me yeah

2275
01:36:18,000 --> 01:36:22,880
yes yeah you will need a client

2276
01:36:22,880 --> 01:36:25,520
indication if he wants to to use that

2277
01:36:25,520 --> 01:36:27,520
transfer or not if you want to separate

2278
01:36:27,520 --> 01:36:29,920
http 3 connections and transport

2279
01:36:29,920 --> 01:36:31,119
connections

2280
01:36:31,119 --> 01:36:34,960
to the same origin so if you want

2281
01:36:34,960 --> 01:36:38,560
to um if you if you don't dedicate from

2282
01:36:38,560 --> 01:36:38,880
a

2283
01:36:38,880 --> 01:36:40,480
application that you want a separate

2284
01:36:40,480 --> 01:36:41,920
connection for hd uh

2285
01:36:41,920 --> 01:36:44,400
for http 3 and transport then you

2286
01:36:44,400 --> 01:36:45,840
basically can pull them

2287
01:36:45,840 --> 01:36:51,119
on the same one you cannot um

2288
01:36:51,199 --> 01:36:53,280
and a server only wants to support one

2289
01:36:53,280 --> 01:36:55,520
of them uh it's it's complicated i i'm

2290
01:36:55,520 --> 01:36:56,960
not really sure

2291
01:36:56,960 --> 01:36:59,199
uh if you want to have a server that uh

2292
01:36:59,199 --> 01:37:00,560
listen to the same port and have the

2293
01:37:00,560 --> 01:37:01,280
same origin

2294
01:37:01,280 --> 01:37:03,360
and actually want a separate connection

2295
01:37:03,360 --> 01:37:04,639
for transport

2296
01:37:04,639 --> 01:37:08,480
and http 3 and builds the application

2297
01:37:08,480 --> 01:37:08,880
that

2298
01:37:08,880 --> 01:37:11,760
doesn't uh that allow polling that will

2299
01:37:11,760 --> 01:37:13,040
be the case

2300
01:37:13,040 --> 01:37:15,920
if you understand me

2301
01:37:17,199 --> 01:37:20,320
probably not

2302
01:37:20,320 --> 01:37:23,920
i yeah so the reason i

2303
01:37:23,920 --> 01:37:26,159
want to add dedicated mode for the

2304
01:37:26,159 --> 01:37:27,119
server

2305
01:37:27,119 --> 01:37:29,840
is that there are web applications there

2306
01:37:29,840 --> 01:37:30,560
are

2307
01:37:30,560 --> 01:37:33,600
developers who want to run only one

2308
01:37:33,600 --> 01:37:37,040
exactly one application on their server

2309
01:37:37,040 --> 01:37:41,040
so it's kind of like you cannot send

2310
01:37:41,040 --> 01:37:42,960
regular http traffic to the same

2311
01:37:42,960 --> 01:37:43,920
connection

2312
01:37:43,920 --> 01:37:47,280
but but you want to have the connection

2313
01:37:47,280 --> 01:37:49,679
to the same origin with the same port

2314
01:37:49,679 --> 01:37:52,880
uh on the http 3 and only transport

2315
01:37:52,880 --> 01:37:56,159
web transport yes

2316
01:37:56,159 --> 01:37:58,639
and in that case if application is not

2317
01:37:58,639 --> 01:37:59,600
built to

2318
01:37:59,600 --> 01:38:01,920
disallow pooling uh you will need to

2319
01:38:01,920 --> 01:38:03,760
indicate i want to open this connection

2320
01:38:03,760 --> 01:38:04,960
only for http 3

2321
01:38:04,960 --> 01:38:06,639
and i often want to open this connection

2322
01:38:06,639 --> 01:38:08,000
only for web transport

2323
01:38:08,000 --> 01:38:10,719
otherwise the browser don't know where

2324
01:38:10,719 --> 01:38:11,360
to

2325
01:38:11,360 --> 01:38:14,400
send the data yeah that

2326
01:38:14,400 --> 01:38:17,840
doesn't matter yeah we can i can try to

2327
01:38:17,840 --> 01:38:19,040
explain that in a

2328
01:38:19,040 --> 01:38:22,320
little issue uh

2329
01:38:22,320 --> 01:38:26,080
sure uh yeah uh the issue has

2330
01:38:26,080 --> 01:38:28,639
much more discussion by the way i think

2331
01:38:28,639 --> 01:38:31,920
it does that's

2332
01:38:31,920 --> 01:38:34,800
did there is a lot of discussion on the

2333
01:38:34,800 --> 01:38:36,960
pull request about whether we need that

2334
01:38:36,960 --> 01:38:45,360
uh so oh everyone is welcome to check in

2335
01:38:45,360 --> 01:38:49,760
thank you oh martin

2336
01:38:49,760 --> 01:38:53,119
you're next i'm i'm gonna come out

2337
01:38:53,119 --> 01:38:54,480
pretty firmly

2338
01:38:54,480 --> 01:38:56,719
uh against having having an explicit

2339
01:38:56,719 --> 01:38:59,600
dedicated flag

2340
01:38:59,600 --> 01:39:03,360
this decision to to use http 3

2341
01:39:03,360 --> 01:39:04,880
means that when you make a connection

2342
01:39:04,880 --> 01:39:07,360
you're making an http connection

2343
01:39:07,360 --> 01:39:10,400
and there are numerous other options

2344
01:39:10,400 --> 01:39:12,080
available for the server to

2345
01:39:12,080 --> 01:39:15,600
not say accept http requests or not

2346
01:39:15,600 --> 01:39:19,199
accept other web transport sessions on

2347
01:39:19,199 --> 01:39:21,119
the same connection now i think

2348
01:39:21,119 --> 01:39:24,159
probably option three is okay

2349
01:39:24,159 --> 01:39:28,000
in that sense but um simply saying

2350
01:39:28,000 --> 01:39:30,639
uh i'm not going to accept http request

2351
01:39:30,639 --> 01:39:31,920
is

2352
01:39:31,920 --> 01:39:33,360
kind of not really in the spirit of

2353
01:39:33,360 --> 01:39:35,600
actually of using http

2354
01:39:35,600 --> 01:39:38,800
and so we have 421

2355
01:39:38,800 --> 01:39:41,760
and that will allow a server to do

2356
01:39:41,760 --> 01:39:42,639
things like

2357
01:39:42,639 --> 01:39:44,560
uh say i've got a certificate for this

2358
01:39:44,560 --> 01:39:46,239
thing but i'm not willing just to speak

2359
01:39:46,239 --> 01:39:47,600
for it

2360
01:39:47,600 --> 01:39:50,080
and you have the option of putting your

2361
01:39:50,080 --> 01:39:51,920
web transport endpoints on

2362
01:39:51,920 --> 01:39:53,840
a different origin and i don't think

2363
01:39:53,840 --> 01:39:55,199
that there's any

2364
01:39:55,199 --> 01:39:57,360
reason why that would not work for

2365
01:39:57,360 --> 01:39:59,199
anyone because of the

2366
01:39:59,199 --> 01:40:00,719
way that this is going to integrate into

2367
01:40:00,719 --> 01:40:02,080
the security model i don't think there's

2368
01:40:02,080 --> 01:40:03,600
any reason why

2369
01:40:03,600 --> 01:40:07,119
you need to have the same ostensible

2370
01:40:07,119 --> 01:40:08,320
origin for the

2371
01:40:08,320 --> 01:40:10,880
the the web pages the the web transport

2372
01:40:10,880 --> 01:40:11,440
connection

2373
01:40:11,440 --> 01:40:14,639
so i'm sort of struggling to to

2374
01:40:14,639 --> 01:40:17,199
justify even having a dedicated thing

2375
01:40:17,199 --> 01:40:18,560
from the server indication

2376
01:40:18,560 --> 01:40:22,000
and i support utaka's point about

2377
01:40:22,000 --> 01:40:24,880
the the use of web transport from the

2378
01:40:24,880 --> 01:40:27,520
client side

2379
01:40:28,080 --> 01:40:30,559
yes so

2380
01:40:31,600 --> 01:40:34,080
i can see the argument for like not

2381
01:40:34,080 --> 01:40:37,199
needing to make it dedicated to http

2382
01:40:37,199 --> 01:40:40,639
for not needing a separate feature

2383
01:40:40,639 --> 01:40:43,040
to reject http requests when you can

2384
01:40:43,040 --> 01:40:44,880
send four to one because

2385
01:40:44,880 --> 01:40:47,600
if you're sending http requests you

2386
01:40:47,600 --> 01:40:49,119
already are

2387
01:40:49,119 --> 01:40:52,560
where you're sending them uh

2388
01:40:52,560 --> 01:40:55,360
the question is yes it's more

2389
01:40:55,360 --> 01:40:56,880
interesting the question of

2390
01:40:56,880 --> 01:41:00,159
uh uh whether you allow pulling web

2391
01:41:00,159 --> 01:41:00,960
transports

2392
01:41:00,960 --> 01:41:04,080
and uh whether the server should be able

2393
01:41:04,080 --> 01:41:06,400
to indicate that it wants to do that or

2394
01:41:06,400 --> 01:41:07,760
not because

2395
01:41:07,760 --> 01:41:11,360
the client currently can and it is not

2396
01:41:11,360 --> 01:41:12,239
clear

2397
01:41:12,239 --> 01:41:15,440
whether the server needs to be able to

2398
01:41:15,440 --> 01:41:18,880
signal that or not yeah so i think that

2399
01:41:18,880 --> 01:41:19,520
the key

2400
01:41:19,520 --> 01:41:22,800
point here is um resource management

2401
01:41:22,800 --> 01:41:24,320
from the server perspective

2402
01:41:24,320 --> 01:41:26,159
and so having a maximum number of

2403
01:41:26,159 --> 01:41:27,920
sessions and potentially having things

2404
01:41:27,920 --> 01:41:30,320
like the maximum number of streams

2405
01:41:30,320 --> 01:41:32,239
for each session would be would be

2406
01:41:32,239 --> 01:41:34,719
useful controls to have here

2407
01:41:34,719 --> 01:41:37,440
but having the the level of dedicated

2408
01:41:37,440 --> 01:41:38,560
not dedicated

2409
01:41:38,560 --> 01:41:41,840
with http without http it

2410
01:41:41,840 --> 01:41:43,600
is not really consistent with any of the

2411
01:41:43,600 --> 01:41:45,360
other design decisions that we've made

2412
01:41:45,360 --> 01:41:45,760
and

2413
01:41:45,760 --> 01:41:49,280
probably unnecessary as well

2414
01:41:49,840 --> 01:41:54,960
uh i agree so

2415
01:41:54,960 --> 01:41:58,400
i feel like uh oh uh

2416
01:41:58,400 --> 01:42:01,840
eric kinnear uh eric

2417
01:42:01,840 --> 01:42:05,280
eric conanza well i i just i just wanted

2418
01:42:05,280 --> 01:42:05,600
to

2419
01:42:05,600 --> 01:42:08,400
to i i think the idea of having you know

2420
01:42:08,400 --> 01:42:09,920
mac sessions and maybe max streams in

2421
01:42:09,920 --> 01:42:11,520
session and stuff will make sense i just

2422
01:42:11,520 --> 01:42:13,040
wanted to clarify my understanding of

2423
01:42:13,040 --> 01:42:14,159
what you're saying which is

2424
01:42:14,159 --> 01:42:16,560
it's not even so much that this is about

2425
01:42:16,560 --> 01:42:17,440
being

2426
01:42:17,440 --> 01:42:19,440
quick versus http but rather we're

2427
01:42:19,440 --> 01:42:21,360
saying someone who controls the

2428
01:42:21,360 --> 01:42:23,199
endpoints for this

2429
01:42:23,199 --> 01:42:26,000
is able to set up endpoints that will

2430
01:42:26,000 --> 01:42:26,719
respond

2431
01:42:26,719 --> 01:42:30,159
to requests for web transport sessions

2432
01:42:30,159 --> 01:42:34,080
or for http resources as they choose

2433
01:42:34,080 --> 01:42:35,760
and that doesn't need additional

2434
01:42:35,760 --> 01:42:37,119
explicit signaling

2435
01:42:37,119 --> 01:42:39,440
in web transport the protocol because if

2436
01:42:39,440 --> 01:42:40,960
you wanted it to go

2437
01:42:40,960 --> 01:42:43,199
if you wanted to say i only will answer

2438
01:42:43,199 --> 01:42:44,480
things like this then

2439
01:42:44,480 --> 01:42:46,320
only answer things like that is that

2440
01:42:46,320 --> 01:42:47,920
kind of what you're saying

2441
01:42:47,920 --> 01:42:50,400
yeah i mean if you if you wanted to make

2442
01:42:50,400 --> 01:42:52,239
sure that you only ever got

2443
01:42:52,239 --> 01:42:55,440
web transport uh request to a particular

2444
01:42:55,440 --> 01:42:59,520
server then

2445
01:42:59,520 --> 01:43:02,320
only provide web transport links as it

2446
01:43:02,320 --> 01:43:03,040
were

2447
01:43:03,040 --> 01:43:04,880
to that server and then there's a good

2448
01:43:04,880 --> 01:43:06,639
chance that that's all you'll get

2449
01:43:06,639 --> 01:43:08,800
and if you do happen to get an http

2450
01:43:08,800 --> 01:43:10,320
request you can send

2451
01:43:10,320 --> 01:43:14,239
back what is it the 406

2452
01:43:14,239 --> 01:43:16,560
method not not supported or what have

2453
01:43:16,560 --> 01:43:18,639
you

2454
01:43:18,639 --> 01:43:23,960
yeah thanks

2455
01:43:23,960 --> 01:43:27,109
[Music]

2456
01:43:30,000 --> 01:43:33,440
uh it looks like we don't have anyone

2457
01:43:33,440 --> 01:43:35,679
else in the queue

2458
01:43:35,679 --> 01:43:38,960
uh it sounds like we should continue

2459
01:43:38,960 --> 01:43:39,760
discussion

2460
01:43:39,760 --> 01:43:42,800
on the issue everyone is

2461
01:43:42,800 --> 01:43:46,080
very much welcome to comment uh

2462
01:43:46,080 --> 01:43:48,880
and i would say strongly encouraged if

2463
01:43:48,880 --> 01:43:49,280
you

2464
01:43:49,280 --> 01:43:54,320
have an opinion please do it's issue 34

2465
01:43:54,320 --> 01:43:57,679
on github uh so

2466
01:43:57,679 --> 01:44:00,000
and this is the final issue we're not

2467
01:44:00,000 --> 01:44:01,920
going to discuss here

2468
01:44:01,920 --> 01:44:05,040
is uh datagram flows uh

2469
01:44:05,040 --> 01:44:07,280
and specifically the syntax to encode

2470
01:44:07,280 --> 01:44:09,199
them and the reason where

2471
01:44:09,199 --> 01:44:11,199
and this is very similar to server

2472
01:44:11,199 --> 01:44:13,119
initiated stream ids

2473
01:44:13,119 --> 01:44:14,960
but fortunately there is already a

2474
01:44:14,960 --> 01:44:17,199
dedicated draft in which we can discuss

2475
01:44:17,199 --> 01:44:17,600
that

2476
01:44:17,600 --> 01:44:20,400
and the draft is a musk working group

2477
01:44:20,400 --> 01:44:22,400
which meets at the same time as this

2478
01:44:22,400 --> 01:44:24,400
working group except tomorrow instead of

2479
01:44:24,400 --> 01:44:25,199
today

2480
01:44:25,199 --> 01:44:27,199
so if you have opinions on that matter

2481
01:44:27,199 --> 01:44:30,480
you're strongly encouraged to come there

2482
01:44:30,480 --> 01:44:34,080
to to go to attend admitting knitting

2483
01:44:34,080 --> 01:44:37,360
and i think that's

2484
01:44:37,360 --> 01:44:40,639
it for web transport over http 3

2485
01:44:40,639 --> 01:44:43,040
uh there are some issues related to

2486
01:44:43,040 --> 01:44:45,040
pulling which i did not go

2487
01:44:45,040 --> 01:44:48,000
over because uh i think at this very

2488
01:44:48,000 --> 01:44:49,440
point in time we should

2489
01:44:49,440 --> 01:44:52,560
get version without pulling uh

2490
01:44:52,560 --> 01:44:54,880
sort out the easier issues before we

2491
01:44:54,880 --> 01:44:55,920
talk about

2492
01:44:55,920 --> 01:44:58,159
how we do things like research

2493
01:44:58,159 --> 01:44:59,119
management

2494
01:44:59,119 --> 01:45:02,960
in pooled web transport sessions

2495
01:45:02,960 --> 01:45:05,440
and with that by hand it back to the

2496
01:45:05,440 --> 01:45:07,679
chairs

2497
01:45:07,679 --> 01:45:17,840
yeah so eric europe

2498
01:45:18,320 --> 01:45:20,880
all right we have what appears to be

2499
01:45:20,880 --> 01:45:23,760
functioning audio

2500
01:45:24,159 --> 01:45:31,520
can we go to the next slide

2501
01:45:31,520 --> 01:45:32,960
all right so we'll make this pretty

2502
01:45:32,960 --> 01:45:34,960
quick one of the main goals here is to

2503
01:45:34,960 --> 01:45:36,880
mirror what we're doing for h3 so

2504
01:45:36,880 --> 01:45:39,440
everything that we just talked about and

2505
01:45:39,440 --> 01:45:41,199
decided upon or make progress on

2506
01:45:41,199 --> 01:45:44,159
hopefully we can inherit here one of the

2507
01:45:44,159 --> 01:45:44,719
things

2508
01:45:44,719 --> 01:45:47,760
that we'd brought up in the past as a do

2509
01:45:47,760 --> 01:45:49,360
we need this how much do we need

2510
01:45:49,360 --> 01:45:50,719
different fallbacks

2511
01:45:50,719 --> 01:45:53,440
that sort of thing uh was what happens

2512
01:45:53,440 --> 01:45:53,920
when

2513
01:45:53,920 --> 01:45:56,719
quick or really udp is probably the more

2514
01:45:56,719 --> 01:45:58,400
likely thing to struggle with firewalls

2515
01:45:58,400 --> 01:45:59,360
initially

2516
01:45:59,360 --> 01:46:01,280
um is blocked and so we know that

2517
01:46:01,280 --> 01:46:02,719
there's going to be some networks

2518
01:46:02,719 --> 01:46:06,159
where quick doesn't work and that may be

2519
01:46:06,159 --> 01:46:08,159
because of a misconfiguration that may

2520
01:46:08,159 --> 01:46:09,440
be because

2521
01:46:09,440 --> 01:46:11,679
nobody really expected udp traffic to do

2522
01:46:11,679 --> 01:46:12,639
anything

2523
01:46:12,639 --> 01:46:14,000
um that may be somebody who's

2524
01:46:14,000 --> 01:46:15,520
deliberately trying to say quick does

2525
01:46:15,520 --> 01:46:17,040
not work here because i don't want it

2526
01:46:17,040 --> 01:46:19,679
because of x principled stand

2527
01:46:19,679 --> 01:46:20,639
but we know that there's going to be

2528
01:46:20,639 --> 01:46:22,800
some places where quick is blocked

2529
01:46:22,800 --> 01:46:26,080
and our use of quick for http traffic

2530
01:46:26,080 --> 01:46:30,320
for requesting resources in general

2531
01:46:30,320 --> 01:46:32,480
falls back to http 2 and does that over

2532
01:46:32,480 --> 01:46:33,360
tls

2533
01:46:33,360 --> 01:46:37,360
and tcp and so the question becomes

2534
01:46:37,360 --> 01:46:39,920
we can deploy quick and have this

2535
01:46:39,920 --> 01:46:41,760
fallback plan

2536
01:46:41,760 --> 01:46:45,760
for http and web browsing what do we do

2537
01:46:45,760 --> 01:46:48,480
for web transport when this situation

2538
01:46:48,480 --> 01:46:49,040
occurs

2539
01:46:49,040 --> 01:46:54,880
next slide please

2540
01:46:54,880 --> 01:46:57,040
so we have a couple of different choices

2541
01:46:57,040 --> 01:46:58,800
um one choice is

2542
01:46:58,800 --> 01:47:01,600
just have it fail if you try to connect

2543
01:47:01,600 --> 01:47:02,239
and

2544
01:47:02,239 --> 01:47:04,960
quick is not a thing then you don't get

2545
01:47:04,960 --> 01:47:06,880
web transport

2546
01:47:06,880 --> 01:47:08,159
another option that's been brought up

2547
01:47:08,159 --> 01:47:10,480
and discussed a bit is to require you to

2548
01:47:10,480 --> 01:47:11,840
bring your own callback

2549
01:47:11,840 --> 01:47:15,040
so that means something like websockets

2550
01:47:15,040 --> 01:47:17,520
would we want to implement web transport

2551
01:47:17,520 --> 01:47:19,119
on top of websockets

2552
01:47:19,119 --> 01:47:21,280
uh we've already been talking in this

2553
01:47:21,280 --> 01:47:22,480
meeting about doing

2554
01:47:22,480 --> 01:47:24,080
websockets over web transport so we

2555
01:47:24,080 --> 01:47:25,440
could maybe do websockets over web

2556
01:47:25,440 --> 01:47:28,560
transport over websockets

2557
01:47:28,560 --> 01:47:29,679
there's all sorts of interesting

2558
01:47:29,679 --> 01:47:31,679
layering that happens there it seems as

2559
01:47:31,679 --> 01:47:33,199
though there's also a bit of an aversion

2560
01:47:33,199 --> 01:47:34,880
to

2561
01:47:34,880 --> 01:47:36,719
trying to map web transport on top of

2562
01:47:36,719 --> 01:47:38,000
websockets

2563
01:47:38,000 --> 01:47:40,560
um which i think is is probably

2564
01:47:40,560 --> 01:47:42,400
well-founded

2565
01:47:42,400 --> 01:47:44,719
and the third option is to fall back to

2566
01:47:44,719 --> 01:47:45,440
running

2567
01:47:45,440 --> 01:47:47,280
something like web transport but over

2568
01:47:47,280 --> 01:47:48,480
hdb2

2569
01:47:48,480 --> 01:47:51,839
uh next slide please

2570
01:47:55,199 --> 01:47:59,040
so in looking more practically at how we

2571
01:47:59,040 --> 01:48:01,199
would actually do that and is it even

2572
01:48:01,199 --> 01:48:04,400
worth doing web transport the framework

2573
01:48:04,400 --> 01:48:06,320
uh which is that kind of first document

2574
01:48:06,320 --> 01:48:08,080
that isn't the mapping over h3

2575
01:48:08,080 --> 01:48:09,920
defines a set of capabilities some of

2576
01:48:09,920 --> 01:48:11,360
which are required and some of which are

2577
01:48:11,360 --> 01:48:12,400
optional

2578
01:48:12,400 --> 01:48:16,560
um the kind of design philosophy behind

2579
01:48:16,560 --> 01:48:19,119
trying to bring web transport to hb2 is

2580
01:48:19,119 --> 01:48:20,639
make sure that we can still do all of

2581
01:48:20,639 --> 01:48:21,920
the required things

2582
01:48:21,920 --> 01:48:24,000
and as many of the optional things as

2583
01:48:24,000 --> 01:48:24,960
possible

2584
01:48:24,960 --> 01:48:28,159
um but over h2 and obviously the the big

2585
01:48:28,159 --> 01:48:29,840
difference here is that brings with it

2586
01:48:29,840 --> 01:48:31,520
tls and tcp

2587
01:48:31,520 --> 01:48:32,960
that removes the ability to be

2588
01:48:32,960 --> 01:48:35,280
unreliable that brings in some ordering

2589
01:48:35,280 --> 01:48:37,040
guarantees which previously we

2590
01:48:37,040 --> 01:48:41,600
did not rely on and likely should not

2591
01:48:41,600 --> 01:48:44,800
the end result of this is everything

2592
01:48:44,800 --> 01:48:46,000
that's required is still

2593
01:48:46,000 --> 01:48:50,560
there those optional ones aren't um

2594
01:48:50,560 --> 01:48:54,159
the question becomes is that useful and

2595
01:48:54,159 --> 01:48:55,360
is that something that's worth spending

2596
01:48:55,360 --> 01:48:56,320
time on

2597
01:48:56,320 --> 01:49:01,840
so to the next slide

2598
01:49:04,000 --> 01:49:07,280
the next couple of slides talk about a

2599
01:49:07,280 --> 01:49:08,320
couple of

2600
01:49:08,320 --> 01:49:10,480
key design approaches that i think would

2601
01:49:10,480 --> 01:49:11,760
be worth taking

2602
01:49:11,760 --> 01:49:13,280
um and and this is something where i

2603
01:49:13,280 --> 01:49:15,040
think we're looking for feedback of are

2604
01:49:15,040 --> 01:49:16,080
these the right

2605
01:49:16,080 --> 01:49:18,239
uh statements to make are these

2606
01:49:18,239 --> 01:49:19,599
something that we want to do as a

2607
01:49:19,599 --> 01:49:20,480
working group

2608
01:49:20,480 --> 01:49:23,360
or not uh the first one is if you

2609
01:49:23,360 --> 01:49:25,119
require an optional feature to make your

2610
01:49:25,119 --> 01:49:26,800
use case successful

2611
01:49:26,800 --> 01:49:29,920
that's totally fine so if you say

2612
01:49:29,920 --> 01:49:31,840
i'm really interested in web transport

2613
01:49:31,840 --> 01:49:33,679
because i want

2614
01:49:33,679 --> 01:49:37,280
unreliable datagram based um

2615
01:49:37,280 --> 01:49:40,159
you know not unordered packets where i

2616
01:49:40,159 --> 01:49:42,080
want to send this from point a to point

2617
01:49:42,080 --> 01:49:42,960
b

2618
01:49:42,960 --> 01:49:46,880
and i need that and i absolutely i will

2619
01:49:46,880 --> 01:49:48,719
take my toys and go home if i can't have

2620
01:49:48,719 --> 01:49:49,520
it

2621
01:49:49,520 --> 01:49:51,040
then that's totally fine and you should

2622
01:49:51,040 --> 01:49:52,400
be able to express that when you go to

2623
01:49:52,400 --> 01:49:53,599
create your web transport session you

2624
01:49:53,599 --> 01:49:54,320
should say

2625
01:49:54,320 --> 01:49:56,400
these are the web transport features

2626
01:49:56,400 --> 01:49:57,679
that i require

2627
01:49:57,679 --> 01:49:59,119
um even if they're optional in the

2628
01:49:59,119 --> 01:50:01,599
framework i'm uninterested in having a

2629
01:50:01,599 --> 01:50:03,199
web transport connection if i can't have

2630
01:50:03,199 --> 01:50:03,920
this

2631
01:50:03,920 --> 01:50:06,159
um it's worth noting that because we

2632
01:50:06,159 --> 01:50:07,119
think that

2633
01:50:07,119 --> 01:50:09,040
quick and and or udp is going to be

2634
01:50:09,040 --> 01:50:11,440
blocked in some percentage of situations

2635
01:50:11,440 --> 01:50:13,360
for some percentage of users

2636
01:50:13,360 --> 01:50:16,480
you are likely leaving them uh

2637
01:50:16,480 --> 01:50:18,159
kind of high and dry and so you might

2638
01:50:18,159 --> 01:50:20,320
want to provide if you say i have some

2639
01:50:20,320 --> 01:50:21,920
other alternative i can fall back to

2640
01:50:21,920 --> 01:50:22,560
some

2641
01:50:22,560 --> 01:50:24,719
existing thing then that's totally fine

2642
01:50:24,719 --> 01:50:26,400
you should be able to do that

2643
01:50:26,400 --> 01:50:28,960
next slide

2644
01:50:33,679 --> 01:50:36,080
the next step of that is is say you're

2645
01:50:36,080 --> 01:50:38,719
really interested in this unreliability

2646
01:50:38,719 --> 01:50:42,320
um but you

2647
01:50:42,320 --> 01:50:43,840
you're not willing to say i don't want

2648
01:50:43,840 --> 01:50:45,599
it at all if it can't be unreliable i'd

2649
01:50:45,599 --> 01:50:47,360
rather have something that works okay

2650
01:50:47,360 --> 01:50:50,080
even if it's not my preferred option um

2651
01:50:50,080 --> 01:50:51,440
and so the second principle here is you

2652
01:50:51,440 --> 01:50:53,040
should always know what you got

2653
01:50:53,040 --> 01:50:56,400
so generally we're saying this is better

2654
01:50:56,400 --> 01:50:57,840
than not having anything

2655
01:50:57,840 --> 01:50:59,599
but you still want to know maybe i'm

2656
01:50:59,599 --> 01:51:01,119
going to make a different decision about

2657
01:51:01,119 --> 01:51:02,880
how much i'm willing to send

2658
01:51:02,880 --> 01:51:04,960
i'm i'm worried about kind of over

2659
01:51:04,960 --> 01:51:06,000
committing if i'm

2660
01:51:06,000 --> 01:51:09,360
if i'm unsure that that you know i might

2661
01:51:09,360 --> 01:51:09,840
create

2662
01:51:09,840 --> 01:51:12,400
excessive amounts of buffering so you

2663
01:51:12,400 --> 01:51:13,679
may want to adjust your behavior

2664
01:51:13,679 --> 01:51:14,400
slightly

2665
01:51:14,400 --> 01:51:17,679
uh based on what's available but

2666
01:51:17,679 --> 01:51:20,880
beyond that um you know if if you'd

2667
01:51:20,880 --> 01:51:22,320
rather have it and it's and it's better

2668
01:51:22,320 --> 01:51:23,199
than nothing

2669
01:51:23,199 --> 01:51:24,639
then you should know that you're in that

2670
01:51:24,639 --> 01:51:25,760
situation and be able to adjust your

2671
01:51:25,760 --> 01:51:27,119
behavior accordingly

2672
01:51:27,119 --> 01:51:29,920
next slide please

2673
01:51:33,520 --> 01:51:36,480
the third and last principle here is

2674
01:51:36,480 --> 01:51:38,639
that web transport over h2 should look

2675
01:51:38,639 --> 01:51:41,840
very very similar to web transport over

2676
01:51:41,840 --> 01:51:46,320
h3 and so we'd like you to be able to

2677
01:51:46,320 --> 01:51:48,000
have a single api to interact with

2678
01:51:48,000 --> 01:51:49,360
us we'd like to solve a lot of the

2679
01:51:49,360 --> 01:51:50,880
issues that we just spent a significant

2680
01:51:50,880 --> 01:51:52,400
chunk of time talking about

2681
01:51:52,400 --> 01:51:55,520
to wherever possible map there uh map

2682
01:51:55,520 --> 01:51:58,000
their resolutions on to this

2683
01:51:58,000 --> 01:52:00,800
so this is not a a proposal to make web

2684
01:52:00,800 --> 01:52:02,080
transport

2685
01:52:02,080 --> 01:52:05,280
be done all over again for h2 uh

2686
01:52:05,280 --> 01:52:07,679
simply the the deltas that are required

2687
01:52:07,679 --> 01:52:09,840
in order to make it work as a fallback

2688
01:52:09,840 --> 01:52:12,719
um for h2 so as part of that now that

2689
01:52:12,719 --> 01:52:13,760
we've

2690
01:52:13,760 --> 01:52:16,480
tried to leave the great transport zoo

2691
01:52:16,480 --> 01:52:17,440
we've rewritten

2692
01:52:17,440 --> 01:52:20,560
the previous dock to match pretty much

2693
01:52:20,560 --> 01:52:22,320
exactly what's in h3

2694
01:52:22,320 --> 01:52:25,360
so next slide please

2695
01:52:28,719 --> 01:52:32,400
so in order to do that um we've

2696
01:52:32,400 --> 01:52:35,040
pretty much lifted most of what's in h3

2697
01:52:35,040 --> 01:52:36,560
uh it brings over

2698
01:52:36,560 --> 01:52:38,080
web transport datagrams and web

2699
01:52:38,080 --> 01:52:40,000
transport stream um

2700
01:52:40,000 --> 01:52:42,400
and there's the header block that had

2701
01:52:42,400 --> 01:52:44,000
been in the streams is is

2702
01:52:44,000 --> 01:52:46,239
no longer present for now we can discuss

2703
01:52:46,239 --> 01:52:48,080
that as needed if there's use cases that

2704
01:52:48,080 --> 01:52:49,280
need it

2705
01:52:49,280 --> 01:52:51,040
but fundamentally it's trying to match

2706
01:52:51,040 --> 01:52:52,560
what's there

2707
01:52:52,560 --> 01:52:59,199
so next slide please

2708
01:52:59,199 --> 01:53:01,199
and i think the the the real question

2709
01:53:01,199 --> 01:53:03,360
here is it seems as though

2710
01:53:03,360 --> 01:53:07,040
there's data that shows um

2711
01:53:07,040 --> 01:53:10,239
some significant percentage of networks

2712
01:53:10,239 --> 01:53:11,520
we're going to see

2713
01:53:11,520 --> 01:53:13,440
issues when when using quick and we'd

2714
01:53:13,440 --> 01:53:14,880
want to be able to

2715
01:53:14,880 --> 01:53:16,880
to fall back to something doing it over

2716
01:53:16,880 --> 01:53:18,560
h2 seems like a

2717
01:53:18,560 --> 01:53:20,880
you know not necessarily preferred but

2718
01:53:20,880 --> 01:53:22,400
strictly better than having nothing at

2719
01:53:22,400 --> 01:53:23,840
all

2720
01:53:23,840 --> 01:53:25,679
the current shape of how it is is

2721
01:53:25,679 --> 01:53:27,280
something that we're clearly flexible on

2722
01:53:27,280 --> 01:53:29,520
having adjusted it several times to

2723
01:53:29,520 --> 01:53:32,000
to match what the current needs are um

2724
01:53:32,000 --> 01:53:34,159
so i think the the main question

2725
01:53:34,159 --> 01:53:35,679
that we'd like to ask the working group

2726
01:53:35,679 --> 01:53:38,000
is is this something that's that's worth

2727
01:53:38,000 --> 01:53:38,800
doing

2728
01:53:38,800 --> 01:53:41,360
do we agree that applications that you

2729
01:53:41,360 --> 01:53:41,840
know

2730
01:53:41,840 --> 01:53:43,760
can't can't live without the things that

2731
01:53:43,760 --> 01:53:45,040
they get from having quick underneath

2732
01:53:45,040 --> 01:53:46,000
should be able to express

2733
01:53:46,000 --> 01:53:48,159
the things they can't live without um

2734
01:53:48,159 --> 01:53:49,280
and similarly

2735
01:53:49,280 --> 01:53:52,320
are we uh in agreement that

2736
01:53:52,320 --> 01:53:54,480
that modeling it after web transport

2737
01:53:54,480 --> 01:53:56,719
over h3 with you know kind of a minimal

2738
01:53:56,719 --> 01:53:58,159
delta if possible

2739
01:53:58,159 --> 01:54:09,839
is a reasonable strategy to take

2740
01:54:10,719 --> 01:54:16,080
go ahead bernard yeah um

2741
01:54:16,080 --> 01:54:18,400
since the interim meeting i think i've

2742
01:54:18,400 --> 01:54:20,000
i've gotten some information which leads

2743
01:54:20,000 --> 01:54:20,960
me to believe that

2744
01:54:20,960 --> 01:54:24,560
web transport of http 2 is a good idea

2745
01:54:24,560 --> 01:54:27,040
just speaking for myself one thing i

2746
01:54:27,040 --> 01:54:27,840
learned

2747
01:54:27,840 --> 01:54:29,280
previously if you'd asked me what the

2748
01:54:29,280 --> 01:54:31,119
fallback strategy was i

2749
01:54:31,119 --> 01:54:33,599
might have said that websocket stream

2750
01:54:33,599 --> 01:54:35,440
api might have been part of that

2751
01:54:35,440 --> 01:54:38,639
and basically that was a what wg streams

2752
01:54:38,639 --> 01:54:39,280
api

2753
01:54:39,280 --> 01:54:42,000
on top of websockets and so i would have

2754
01:54:42,000 --> 01:54:43,679
advised developers hey you can create a

2755
01:54:43,679 --> 01:54:45,199
wrapper make it look like

2756
01:54:45,199 --> 01:54:47,599
web transport but use web sockets my

2757
01:54:47,599 --> 01:54:49,280
understanding is that work on that is

2758
01:54:49,280 --> 01:54:50,800
not continuing

2759
01:54:50,800 --> 01:54:52,480
and so that the implication for

2760
01:54:52,480 --> 01:54:54,000
developers is they'd have to

2761
01:54:54,000 --> 01:54:56,239
potentially write their apps twice

2762
01:54:56,239 --> 01:54:58,239
without web transport of http once

2763
01:54:58,239 --> 01:54:59,360
they'd write it to the

2764
01:54:59,360 --> 01:55:01,760
web sockets api with messages and once

2765
01:55:01,760 --> 01:55:03,119
they'd write it to web transport and

2766
01:55:03,119 --> 01:55:03,520
that's

2767
01:55:03,520 --> 01:55:06,960
very very painful so i know

2768
01:55:06,960 --> 01:55:09,280
also development experience with the

2769
01:55:09,280 --> 01:55:11,440
messaging api of websockets has not been

2770
01:55:11,440 --> 01:55:12,480
all like great

2771
01:55:12,480 --> 01:55:15,280
lack of back pressure so my sense is the

2772
01:55:15,280 --> 01:55:16,960
developers i talk to they want web

2773
01:55:16,960 --> 01:55:18,080
transport and they would

2774
01:55:18,080 --> 01:55:20,800
prefer one api to having to write two

2775
01:55:20,800 --> 01:55:21,280
different

2776
01:55:21,280 --> 01:55:33,280
very two very different apis

2777
01:55:33,280 --> 01:55:36,080
go ahead martin

2778
01:55:39,520 --> 01:55:41,520
i'm trying to read the chat isn't it

2779
01:55:41,520 --> 01:55:42,639
wonderful

2780
01:55:42,639 --> 01:55:45,520
so um i think that your requirements are

2781
01:55:45,520 --> 01:55:46,000
absolutely

2782
01:55:46,000 --> 01:55:48,560
spot on yeah i and i think that

2783
01:55:48,560 --> 01:55:50,400
bernard's point here is exactly

2784
01:55:50,400 --> 01:55:52,800
the the point that's been made by myself

2785
01:55:52,800 --> 01:55:54,000
and my colleague

2786
01:55:54,000 --> 01:55:56,960
for a while now which is that if we're

2787
01:55:56,960 --> 01:55:58,000
going to build this thing we're going to

2788
01:55:58,000 --> 01:55:59,679
build a tcp thing or it's not going to

2789
01:55:59,679 --> 01:56:00,400
be any

2790
01:56:00,400 --> 01:56:03,520
any good so from from that perspective i

2791
01:56:03,520 --> 01:56:04,159
think this is

2792
01:56:04,159 --> 01:56:06,480
this is great work from the perspective

2793
01:56:06,480 --> 01:56:08,800
of the technical

2794
01:56:08,800 --> 01:56:11,760
aspects of the draft design i threw a

2795
01:56:11,760 --> 01:56:13,679
few things in chat

2796
01:56:13,679 --> 01:56:15,760
i have serious reservations about the

2797
01:56:15,760 --> 01:56:17,840
approach that you're taking here

2798
01:56:17,840 --> 01:56:20,400
um and it may just be that it's 5am in

2799
01:56:20,400 --> 01:56:21,840
the morning and i haven't slept

2800
01:56:21,840 --> 01:56:25,040
for a very long time but i think that we

2801
01:56:25,040 --> 01:56:27,520
can probably

2802
01:56:27,520 --> 01:56:31,119
simplify this maybe it might not be a

2803
01:56:31,119 --> 01:56:34,159
strict simplification but having all of

2804
01:56:34,159 --> 01:56:35,760
the

2805
01:56:35,760 --> 01:56:38,080
uh web transport associated streams and

2806
01:56:38,080 --> 01:56:38,800
datagrams

2807
01:56:38,800 --> 01:56:41,199
all packed into the one stream might be

2808
01:56:41,199 --> 01:56:42,400
a better design

2809
01:56:42,400 --> 01:56:44,000
because trying to integrate this with

2810
01:56:44,000 --> 01:56:46,320
the h2 stream state machine

2811
01:56:46,320 --> 01:56:49,440
and manage the impedance mismatch

2812
01:56:49,440 --> 01:56:50,080
between

2813
01:56:50,080 --> 01:56:53,119
the h2 states

2814
01:56:53,119 --> 01:56:55,360
and the quick state you're trying to

2815
01:56:55,360 --> 01:56:56,960
replicate

2816
01:56:56,960 --> 01:56:59,760
probably not going to work very well uh

2817
01:56:59,760 --> 01:57:00,239
just

2818
01:57:00,239 --> 01:57:02,880
as an example reset reset stream doesn't

2819
01:57:02,880 --> 01:57:04,880
work the same way in both protocols

2820
01:57:04,880 --> 01:57:06,960
and so you can end up with some problems

2821
01:57:06,960 --> 01:57:07,920
so

2822
01:57:07,920 --> 01:57:11,440
i'm not really all that comfortable with

2823
01:57:11,440 --> 01:57:13,440
the idea of adoption at this point

2824
01:57:13,440 --> 01:57:15,840
but at the same time it's absolutely the

2825
01:57:15,840 --> 01:57:18,480
right work to be doing and i have no

2826
01:57:18,480 --> 01:57:20,800
problems with the people doing the work

2827
01:57:20,800 --> 01:57:21,520
i

2828
01:57:21,520 --> 01:57:24,560
have every expectation this is going to

2829
01:57:24,560 --> 01:57:25,280
be good but

2830
01:57:25,280 --> 01:57:27,520
i'd like to see it just go and have some

2831
01:57:27,520 --> 01:57:29,040
more discussion about the technical side

2832
01:57:29,040 --> 01:57:30,159
of things before we go

2833
01:57:30,159 --> 01:57:33,598
any further thanks

2834
01:57:33,679 --> 01:57:37,360
thanks martin um i'm all well i put

2835
01:57:37,360 --> 01:57:39,280
myself in the queue but also so jumping

2836
01:57:39,280 --> 01:57:39,840
in us

2837
01:57:39,840 --> 01:57:43,840
chair we have three minutes left um

2838
01:57:43,840 --> 01:57:45,679
i'm getting a sense from the comments so

2839
01:57:45,679 --> 01:57:48,639
far and what also i've seen from the w3c

2840
01:57:48,639 --> 01:57:52,080
that um there's interest in this work

2841
01:57:52,080 --> 01:57:55,199
uh so our our main question for the

2842
01:57:55,199 --> 01:57:56,719
working group today

2843
01:57:56,719 --> 01:57:59,280
is um so what we chose to do for this

2844
01:57:59,280 --> 01:58:00,080
session is

2845
01:58:00,080 --> 01:58:01,599
take as much time as we wanted for

2846
01:58:01,599 --> 01:58:04,000
should be we're transport of http 3

2847
01:58:04,000 --> 01:58:06,239
and then as time permits if we have

2848
01:58:06,239 --> 01:58:07,280
spare time at the end

2849
01:58:07,280 --> 01:58:10,080
leave some for http 2. we think that

2850
01:58:10,080 --> 01:58:11,280
that might be a good

2851
01:58:11,280 --> 01:58:12,880
mechanism going forward where we keep

2852
01:58:12,880 --> 01:58:15,599
doing that and that might lead to

2853
01:58:15,599 --> 01:58:18,159
like us adopting this document or

2854
01:58:18,159 --> 01:58:20,320
another document for this same um

2855
01:58:20,320 --> 01:58:22,719
question so we want to ask the group

2856
01:58:22,719 --> 01:58:24,320
does that seem reasonable to people are

2857
01:58:24,320 --> 01:58:25,679
we okay with

2858
01:58:25,679 --> 01:58:27,840
uh discussing the idea of doing web

2859
01:58:27,840 --> 01:58:30,159
transport over something that's over tcp

2860
01:58:30,159 --> 01:58:32,159
as long as it doesn't get in the way of

2861
01:58:32,159 --> 01:58:34,239
where transformer http 3.

2862
01:58:34,239 --> 01:58:36,480
uh so if if you have a problem with that

2863
01:58:36,480 --> 01:58:38,719
please like join the queue now and

2864
01:58:38,719 --> 01:58:40,880
tell us what you think um we're going to

2865
01:58:40,880 --> 01:58:42,560
keep going through the queue but

2866
01:58:42,560 --> 01:58:45,840
if you have technical questions

2867
01:58:45,840 --> 01:58:48,880
about um eric's proposal please take

2868
01:58:48,880 --> 01:58:50,400
those to the list we're going to focus

2869
01:58:50,400 --> 01:58:50,719
on

2870
01:58:50,719 --> 01:58:52,400
whether we want to be discussing this in

2871
01:58:52,400 --> 01:58:54,080
the working group and if whether or not

2872
01:58:54,080 --> 01:58:56,320
people are interested in working on a

2873
01:58:56,320 --> 01:58:58,159
variant over tcp

2874
01:58:58,159 --> 01:59:03,839
so i'm not no utah please go ahead

2875
01:59:04,239 --> 01:59:08,080
comment on the bananas comment so that

2876
01:59:08,080 --> 01:59:09,760
we are still working on with socket

2877
01:59:09,760 --> 01:59:11,280
stream

2878
01:59:11,280 --> 01:59:14,400
that's all okay

2879
01:59:14,400 --> 01:59:18,400
thank you uh jonathan

2880
01:59:20,639 --> 01:59:24,400
um yeah so um i was commenting on that

2881
01:59:24,400 --> 01:59:27,280
here too my uh i'm a little concerned

2882
01:59:27,280 --> 01:59:28,080
that

2883
01:59:28,080 --> 01:59:30,880
um how much you know yes there's a

2884
01:59:30,880 --> 01:59:31,760
percentage of

2885
01:59:31,760 --> 01:59:34,320
endpoints that don't support uh won't

2886
01:59:34,320 --> 01:59:35,599
have quick working but it's not a large

2887
01:59:35,599 --> 01:59:36,480
percentage

2888
01:59:36,480 --> 01:59:37,840
so i'm a little concerned how much the

2889
01:59:37,840 --> 01:59:39,199
code that implements this won't get

2890
01:59:39,199 --> 01:59:40,480
exercised

2891
01:59:40,480 --> 01:59:44,080
um so you're which is um you know hdb2

2892
01:59:44,080 --> 01:59:46,080
is you know well deployed and you know

2893
01:59:46,080 --> 01:59:47,199
that's that

2894
01:59:47,199 --> 01:59:49,520
you know all exists in this but whereas

2895
01:59:49,520 --> 01:59:52,159
this is new code in a multi-click world

2896
01:59:52,159 --> 01:59:54,639
um so that's which might leave a

2897
01:59:54,639 --> 01:59:56,840
possibility for lingering bugs including

2898
01:59:56,840 --> 01:59:59,840
vulnerabilities

2899
02:00:01,520 --> 02:00:03,520
so maybe this is actually a comment to

2900
02:00:03,520 --> 02:00:05,280
the w3c and it needs to be you know at

2901
02:00:05,280 --> 02:00:06,560
the very least uh

2902
02:00:06,560 --> 02:00:08,560
javascript api that says i don't care if

2903
02:00:08,560 --> 02:00:10,880
i do quick i need for testing purposes

2904
02:00:10,880 --> 02:00:12,480
i need to run this and then pretending

2905
02:00:12,480 --> 02:00:14,480
that i only think i can do is

2906
02:00:14,480 --> 02:00:17,199
um wave sockets over hd web

2907
02:00:17,199 --> 02:00:18,400
transportation would be two

2908
02:00:18,400 --> 02:00:19,920
but i just i think this is something

2909
02:00:19,920 --> 02:00:21,840
that we need to keep an eye on

2910
02:00:21,840 --> 02:00:24,840
to make sure that this code can get well

2911
02:00:24,840 --> 02:00:26,400
exercised

2912
02:00:26,400 --> 02:00:29,119
so thanks totally agree uh one point

2913
02:00:29,119 --> 02:00:31,280
i'll just say in response is that

2914
02:00:31,280 --> 02:00:33,040
my understanding of where this would be

2915
02:00:33,040 --> 02:00:34,639
needed is

2916
02:00:34,639 --> 02:00:37,920
not for um cases where

2917
02:00:37,920 --> 02:00:39,599
the endpoints don't support web

2918
02:00:39,599 --> 02:00:40,960
transport because i expect that anyone

2919
02:00:40,960 --> 02:00:42,480
who is interested in web transport will

2920
02:00:42,480 --> 02:00:44,320
support over http 3 but it's for

2921
02:00:44,320 --> 02:00:45,679
networks that block udp

2922
02:00:45,679 --> 02:00:48,320
as eric was saying from chrome we're

2923
02:00:48,320 --> 02:00:49,760
seeing like

2924
02:00:49,760 --> 02:00:52,800
somewhere between 5 and 10 of networks

2925
02:00:52,800 --> 02:00:56,480
that completely block qdp and if

2926
02:00:56,480 --> 02:00:59,679
we're saying that we have close to even

2927
02:00:59,679 --> 02:01:00,560
five percent

2928
02:01:00,560 --> 02:01:02,880
of um web transport traffic that goes

2929
02:01:02,880 --> 02:01:05,199
over tcp as opposed to quick that should

2930
02:01:05,199 --> 02:01:08,239
um uh handle that code path testing

2931
02:01:08,239 --> 02:01:08,880
right that's

2932
02:01:08,880 --> 02:01:11,119
that's true but i mean i guess my the

2933
02:01:11,119 --> 02:01:13,119
problem is that the um

2934
02:01:13,119 --> 02:01:16,000
that that that 10 doesn't include the

2935
02:01:16,000 --> 02:01:17,520
web developers talking to their own web

2936
02:01:17,520 --> 02:01:18,320
servers

2937
02:01:18,320 --> 02:01:20,320
so when they develop their applications

2938
02:01:20,320 --> 02:01:22,239
using web transport they're not going to

2939
02:01:22,239 --> 02:01:23,679
exercise that path

2940
02:01:23,679 --> 02:01:26,000
and might suddenly get surprising things

2941
02:01:26,000 --> 02:01:28,000
happening to them once they deploy and

2942
02:01:28,000 --> 02:01:29,679
that 10 of people start accessing their

2943
02:01:29,679 --> 02:01:30,960
website so there needs to be some way

2944
02:01:30,960 --> 02:01:31,760
that

2945
02:01:31,760 --> 02:01:34,320
they could make sure that works that

2946
02:01:34,320 --> 02:01:34,960
makes sense

2947
02:01:34,960 --> 02:01:36,800
thank you david uh the five to ten

2948
02:01:36,800 --> 02:01:38,159
percent is weighted towards enterprise

2949
02:01:38,159 --> 02:01:39,599
so it's actually much

2950
02:01:39,599 --> 02:01:41,280
higher if you're an enterprise app it's

2951
02:01:41,280 --> 02:01:43,520
more like 15 is what we're seeing 15 to

2952
02:01:43,520 --> 02:01:45,599
20.

2953
02:01:45,599 --> 02:01:48,000
cool all right so we're we're at time

2954
02:01:48,000 --> 02:01:48,719
folks

2955
02:01:48,719 --> 02:01:51,840
um specifically for this discussion

2956
02:01:51,840 --> 02:01:54,080
it clearly sounds that there's interest

2957
02:01:54,080 --> 02:01:55,040
in discussing this

2958
02:01:55,040 --> 02:01:57,199
i'm not seeing any opposition to

2959
02:01:57,199 --> 02:01:58,400
discussing this

2960
02:01:58,400 --> 02:02:00,800
but it sounds like adoption it might be

2961
02:02:00,800 --> 02:02:02,239
too early to discuss

2962
02:02:02,239 --> 02:02:04,800
adoption so what we're gonna say is

2963
02:02:04,800 --> 02:02:06,880
let's keep discussing this on the list

2964
02:02:06,880 --> 02:02:09,280
uh let's uh folks please follow issues

2965
02:02:09,280 --> 02:02:10,320
on uh

2966
02:02:10,320 --> 02:02:13,360
so the individual draft is on github so

2967
02:02:13,360 --> 02:02:14,880
please follow issues there

2968
02:02:14,880 --> 02:02:17,440
and we'll keep uh seeing how this goes

2969
02:02:17,440 --> 02:02:18,400
and

2970
02:02:18,400 --> 02:02:20,719
we're gonna say that it's in scope to be

2971
02:02:20,719 --> 02:02:21,679
discussing this i mean

2972
02:02:21,679 --> 02:02:24,080
after all it is in our charter and we'll

2973
02:02:24,080 --> 02:02:24,800
keep

2974
02:02:24,800 --> 02:02:27,199
allocating as time permits time in our

2975
02:02:27,199 --> 02:02:28,639
upcoming interims

2976
02:02:28,639 --> 02:02:32,560
and uh itf sessions uh but we'll

2977
02:02:32,560 --> 02:02:33,840
we'll kick the can down the road a

2978
02:02:33,840 --> 02:02:36,080
little bit for adoption

2979
02:02:36,080 --> 02:02:38,719
and bernard unless you have some parting

2980
02:02:38,719 --> 02:02:39,440
words i

2981
02:02:39,440 --> 02:02:41,920
think that's all folks thanks everyone

2982
02:02:41,920 --> 02:02:42,880
for coming

2983
02:02:42,880 --> 02:02:44,960
and see y'all will probably have an

2984
02:02:44,960 --> 02:02:47,280
interim session

2985
02:02:47,280 --> 02:02:48,960
before the next atf we'll figure out

2986
02:02:48,960 --> 02:02:50,800
details on the list

2987
02:02:50,800 --> 02:02:56,880
okay all right thank you bye everyone

2988
02:02:58,840 --> 02:03:01,840
cheers

2989
02:03:02,000 --> 02:03:04,080
you

