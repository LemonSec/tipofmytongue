1
00:00:05,440 --> 00:00:08,000
confirm

2
00:00:11,840 --> 00:00:15,920
okay thanks so welcome we will start um

3
00:00:15,920 --> 00:00:17,199
on time because we have

4
00:00:17,199 --> 00:00:19,680
a quite packed agenda and um i would

5
00:00:19,680 --> 00:00:20,480
like to give as

6
00:00:20,480 --> 00:00:22,160
much as possible time to all the

7
00:00:22,160 --> 00:00:23,519
presenters to um

8
00:00:23,519 --> 00:00:26,720
to deliver the representations so this

9
00:00:26,720 --> 00:00:28,400
will be a general mark for everyone

10
00:00:28,400 --> 00:00:31,679
both prisoners and the participants to

11
00:00:31,679 --> 00:00:33,840
try to really stick to the timing

12
00:00:33,840 --> 00:00:36,640
uh please be careful with the time when

13
00:00:36,640 --> 00:00:38,079
presenting and if you have

14
00:00:38,079 --> 00:00:40,399
questions or comments please raise them

15
00:00:40,399 --> 00:00:41,840
via the chat

16
00:00:41,840 --> 00:00:44,719
and i will try to to address um as many

17
00:00:44,719 --> 00:00:46,320
questions as we can during the meeting

18
00:00:46,320 --> 00:00:47,360
otherwise we will

19
00:00:47,360 --> 00:00:49,440
bring that offline to the mailing list

20
00:00:49,440 --> 00:00:52,239
okay thank you so this is the

21
00:00:52,239 --> 00:00:55,120
16th an emergency meeting as part of the

22
00:00:55,120 --> 00:00:56,000
iatf

23
00:00:56,000 --> 00:00:58,399
110 meeting which will be running online

24
00:00:58,399 --> 00:00:59,440
this week

25
00:00:59,440 --> 00:01:02,960
so welcome everyone i am laurence avalia

26
00:01:02,960 --> 00:01:04,959
co-chair of energy and i think jerome is

27
00:01:04,959 --> 00:01:08,479
also online my other culture

28
00:01:08,799 --> 00:01:13,840
say hello

29
00:01:17,920 --> 00:01:22,240
okay so to everyone yes we have a few uh

30
00:01:22,240 --> 00:01:24,400
formal announcements to make so we have

31
00:01:24,400 --> 00:01:26,320
a couple of slides on noteworth

32
00:01:26,320 --> 00:01:28,080
concerning intellectual property and

33
00:01:28,080 --> 00:01:29,040
participation to

34
00:01:29,040 --> 00:01:32,000
irtf so this is a reminder of iatf and

35
00:01:32,000 --> 00:01:33,759
rtf policies in effect

36
00:01:33,759 --> 00:01:35,920
on various topics such as patents code

37
00:01:35,920 --> 00:01:36,880
of conduct

38
00:01:36,880 --> 00:01:38,799
and it is only meant to point you in the

39
00:01:38,799 --> 00:01:40,479
right directions there are

40
00:01:40,479 --> 00:01:42,960
different um rfcs and best current

41
00:01:42,960 --> 00:01:44,079
practices that

42
00:01:44,079 --> 00:01:45,600
you can look into if you want to have

43
00:01:45,600 --> 00:01:47,920
more information but the main

44
00:01:47,920 --> 00:01:50,799
aspect is that the iotf follows the iatf

45
00:01:50,799 --> 00:01:52,720
intellectual property rights disclosure

46
00:01:52,720 --> 00:01:53,680
rules

47
00:01:53,680 --> 00:01:56,079
so by participating in the iitf you

48
00:01:56,079 --> 00:01:59,280
agree to follow rtf process and policies

49
00:01:59,280 --> 00:02:01,119
in particular if you are aware of any

50
00:02:01,119 --> 00:02:04,880
rtf contributions covered by patents

51
00:02:04,880 --> 00:02:08,160
you should declare that the ihf expects

52
00:02:08,160 --> 00:02:10,000
that you file such ibr the closer in the

53
00:02:10,000 --> 00:02:11,920
timely manner

54
00:02:11,920 --> 00:02:14,239
for the rfc documents that the irtf

55
00:02:14,239 --> 00:02:15,599
publishes

56
00:02:15,599 --> 00:02:18,080
rtf prefers the most liberal licensing

57
00:02:18,080 --> 00:02:20,000
terms possible

58
00:02:20,000 --> 00:02:23,120
and so yeah further references um for

59
00:02:23,120 --> 00:02:24,879
patterns and participation

60
00:02:24,879 --> 00:02:26,610
in the following links

61
00:02:26,610 --> 00:02:28,319
[Music]

62
00:02:28,319 --> 00:02:30,080
uh concerning privacy and code of

63
00:02:30,080 --> 00:02:32,000
conduct so as a participant

64
00:02:32,000 --> 00:02:34,640
in or attendee to any irtf activity you

65
00:02:34,640 --> 00:02:36,080
acknowledge that written

66
00:02:36,080 --> 00:02:38,400
audio video and photographic records of

67
00:02:38,400 --> 00:02:40,560
meetings may be made public

68
00:02:40,560 --> 00:02:42,480
and for your information this meeting is

69
00:02:42,480 --> 00:02:44,560
being recorded and will be

70
00:02:44,560 --> 00:02:47,519
later on made available on the ietf

71
00:02:47,519 --> 00:02:49,360
youtube channel

72
00:02:49,360 --> 00:02:50,959
personal information that you provide to

73
00:02:50,959 --> 00:02:52,879
iotf will be handled in accordance with

74
00:02:52,879 --> 00:02:54,080
the privacy policy

75
00:02:54,080 --> 00:02:56,319
that you can find at the following link

76
00:02:56,319 --> 00:02:57,840
and as participants on attendee you

77
00:02:57,840 --> 00:02:59,360
agree to work respectfully with other

78
00:02:59,360 --> 00:03:00,480
participants

79
00:03:00,480 --> 00:03:03,200
and if you see any issue you can contact

80
00:03:03,200 --> 00:03:06,399
us to cheers but also

81
00:03:08,640 --> 00:03:12,559
that is available if you have questions

82
00:03:15,200 --> 00:03:18,159
management research school of the rtf

83
00:03:18,159 --> 00:03:18,959
internet

84
00:03:18,959 --> 00:03:21,680
research task force the rtf conducts

85
00:03:21,680 --> 00:03:22,319
research

86
00:03:22,319 --> 00:03:24,000
it is not a standards development

87
00:03:24,000 --> 00:03:26,000
organization

88
00:03:26,000 --> 00:03:28,560
the irtf focuses on longer-term research

89
00:03:28,560 --> 00:03:30,560
issues related to the internet

90
00:03:30,560 --> 00:03:33,360
while the parallel organization the ietf

91
00:03:33,360 --> 00:03:35,440
focuses on shorter term issues of

92
00:03:35,440 --> 00:03:37,599
engineering and standards making

93
00:03:37,599 --> 00:03:39,440
so while the irtf can publish

94
00:03:39,440 --> 00:03:41,200
informational and experimental

95
00:03:41,200 --> 00:03:44,159
documents in the rfc series its primary

96
00:03:44,159 --> 00:03:45,920
goal is to promote the development

97
00:03:45,920 --> 00:03:48,080
of research collaboration and teamwork

98
00:03:48,080 --> 00:03:50,640
in exploring research issues related to

99
00:03:50,640 --> 00:03:52,319
internet protocols applications

100
00:03:52,319 --> 00:03:54,080
architecture and technology

101
00:03:54,080 --> 00:03:55,599
and if you want to add more information

102
00:03:55,599 --> 00:03:58,000
about how iotf works

103
00:03:58,000 --> 00:04:02,560
you have a nice rfc that you need

104
00:04:02,560 --> 00:04:05,840
a quick also um practical information

105
00:04:05,840 --> 00:04:06,239
for the

106
00:04:06,239 --> 00:04:08,319
for this meeting so the screen is being

107
00:04:08,319 --> 00:04:10,319
recorded there will be an automatic

108
00:04:10,319 --> 00:04:12,239
registration of participants

109
00:04:12,239 --> 00:04:14,159
uh once you are logging into this

110
00:04:14,159 --> 00:04:15,680
session um

111
00:04:15,680 --> 00:04:17,759
if you're not presenting or commenting

112
00:04:17,759 --> 00:04:19,440
please keep your audio muted

113
00:04:19,440 --> 00:04:21,440
and potentially the video off this helps

114
00:04:21,440 --> 00:04:23,360
also for the bandwidth management

115
00:04:23,360 --> 00:04:26,080
uh when speaking please state your name

116
00:04:26,080 --> 00:04:27,919
and any affiliation you would like to to

117
00:04:27,919 --> 00:04:29,680
disclose this is useful also for the

118
00:04:29,680 --> 00:04:30,880
minute takers

119
00:04:30,880 --> 00:04:32,800
and you have a set of useful links and i

120
00:04:32,800 --> 00:04:34,639
hope that if you are here connected you

121
00:04:34,639 --> 00:04:35,440
already have

122
00:04:35,440 --> 00:04:39,199
those information readily available

123
00:04:39,680 --> 00:04:42,000
if you want to i mean say extend the

124
00:04:42,000 --> 00:04:44,800
experience beyond this energy session

125
00:04:44,800 --> 00:04:46,560
please be informed that there is also a

126
00:04:46,560 --> 00:04:48,080
gather

127
00:04:48,080 --> 00:04:50,320
social platform that is made available

128
00:04:50,320 --> 00:04:51,360
by ietf

129
00:04:51,360 --> 00:04:54,400
for the whole ietf meeting quick

130
00:04:54,400 --> 00:04:56,240
and you can have uh some nice

131
00:04:56,240 --> 00:04:57,919
interactions uh i mean

132
00:04:57,919 --> 00:05:00,160
before and after the sessions uh with

133
00:05:00,160 --> 00:05:01,840
some avatars and um

134
00:05:01,840 --> 00:05:04,240
so it's a nice platform you may try to

135
00:05:04,240 --> 00:05:06,080
to test it it's it's very uh very

136
00:05:06,080 --> 00:05:08,000
interesting

137
00:05:08,000 --> 00:05:09,840
and sometimes also the chairs rip their

138
00:05:09,840 --> 00:05:11,680
own um

139
00:05:11,680 --> 00:05:13,600
just finishing with that and we switch

140
00:05:13,600 --> 00:05:15,280
to the next agenda item

141
00:05:15,280 --> 00:05:17,919
but future meetings uh we plan to have

142
00:05:17,919 --> 00:05:18,320
um

143
00:05:18,320 --> 00:05:21,680
potentially some online interim meeting

144
00:05:21,680 --> 00:05:22,840
in april

145
00:05:22,840 --> 00:05:26,080
um that actively also in may collocated

146
00:05:26,080 --> 00:05:27,360
with the i am ultra

147
00:05:27,360 --> 00:05:29,680
im conference uh we still have to to

148
00:05:29,680 --> 00:05:30,880
figure this out with the

149
00:05:30,880 --> 00:05:33,280
the organizer of the conference another

150
00:05:33,280 --> 00:05:34,240
interim

151
00:05:34,240 --> 00:05:37,199
in june and the next planner meeting

152
00:05:37,199 --> 00:05:38,479
should potentially be with

153
00:05:38,479 --> 00:05:42,720
iatf 111 and we don't know yet exactly

154
00:05:42,720 --> 00:05:43,440
if it will be

155
00:05:43,440 --> 00:05:45,280
on site in san francisco or it will be

156
00:05:45,280 --> 00:05:47,039
online and the decision will be made in

157
00:05:47,039 --> 00:05:47,600
april

158
00:05:47,600 --> 00:05:51,039
16th so that's it for the

159
00:05:51,039 --> 00:05:52,800
quick news about the working group there

160
00:05:52,800 --> 00:05:55,360
is a research group sorry

161
00:05:55,360 --> 00:05:58,639
um quick overlook at the agenda so we'll

162
00:05:58,639 --> 00:06:00,000
start with uh

163
00:06:00,000 --> 00:06:03,120
some updates quick updates on

164
00:06:03,120 --> 00:06:04,800
some of the active documents of the

165
00:06:04,800 --> 00:06:06,319
research group

166
00:06:06,319 --> 00:06:08,319
they're not all the documents are here

167
00:06:08,319 --> 00:06:10,479
for some of the documents we

168
00:06:10,479 --> 00:06:12,240
invite you to exchange first on the

169
00:06:12,240 --> 00:06:13,840
mailing list

170
00:06:13,840 --> 00:06:15,120
and then we have two sessions of

171
00:06:15,120 --> 00:06:16,800
technical talks one on intent-based

172
00:06:16,800 --> 00:06:18,080
networking

173
00:06:18,080 --> 00:06:19,919
and the second one on ai for network

174
00:06:19,919 --> 00:06:21,360
management with a focus

175
00:06:21,360 --> 00:06:23,600
on some of the challenges of the ai

176
00:06:23,600 --> 00:06:25,520
research challenges document

177
00:06:25,520 --> 00:06:27,919
so as you see it's quite packed so we'll

178
00:06:27,919 --> 00:06:29,199
start right away

179
00:06:29,199 --> 00:06:32,319
uh with um shane and i will

180
00:06:32,319 --> 00:06:35,840
present the slides for you

181
00:06:56,639 --> 00:06:58,880
yes

182
00:06:59,759 --> 00:07:03,840
hello can you hear me

183
00:07:04,880 --> 00:07:08,240
okay thank you yeah so uh

184
00:07:08,240 --> 00:07:10,000
good evening good morning everyone my

185
00:07:10,000 --> 00:07:11,919
name is chu i'm here to

186
00:07:11,919 --> 00:07:14,479
we have all the authors to present this

187
00:07:14,479 --> 00:07:15,199
draft

188
00:07:15,199 --> 00:07:18,080
digital twin nano concept so name will

189
00:07:18,080 --> 00:07:20,080
list here are also this job that we

190
00:07:20,080 --> 00:07:21,440
actually introduce

191
00:07:21,440 --> 00:07:23,680
three new also include me and muhammad

192
00:07:23,680 --> 00:07:26,319
and christian

193
00:07:28,840 --> 00:07:31,840
next

194
00:07:32,960 --> 00:07:36,000
so document status so this is a not a

195
00:07:36,000 --> 00:07:36,400
new

196
00:07:36,400 --> 00:07:38,720
uh draft we already present twice

197
00:07:38,720 --> 00:07:40,800
actually this is our third time

198
00:07:40,800 --> 00:07:42,720
and digital chain actually is not a new

199
00:07:42,720 --> 00:07:44,479
uh idea it has to be

200
00:07:44,479 --> 00:07:47,039
wide adopted in the industry field so

201
00:07:47,039 --> 00:07:49,039
one of the examples like uh

202
00:07:49,039 --> 00:07:52,240
3d printing and computing and

203
00:07:52,240 --> 00:07:55,520
design actually so here we really want

204
00:07:55,520 --> 00:07:57,680
to you know apply this digital twin

205
00:07:57,680 --> 00:08:00,080
concept into the network field so the

206
00:08:00,080 --> 00:08:02,479
goal actually is we really want to build

207
00:08:02,479 --> 00:08:04,879
the digital twin platform for more

208
00:08:04,879 --> 00:08:07,120
efficient and intelligent management

209
00:08:07,120 --> 00:08:09,759
and also we really want to use leverage

210
00:08:09,759 --> 00:08:11,840
these to drive the innovation with a

211
00:08:11,840 --> 00:08:15,840
more optimized life service life cycle

212
00:08:15,840 --> 00:08:18,319
so technical contribution uh from the

213
00:08:18,319 --> 00:08:20,000
author actually the first days we

214
00:08:20,000 --> 00:08:20,479
sketched

215
00:08:20,479 --> 00:08:23,520
a base reference architecture based the

216
00:08:23,520 --> 00:08:26,479
key elements we identified in the

217
00:08:26,479 --> 00:08:27,520
digital twin

218
00:08:27,520 --> 00:08:31,039
concept and

219
00:08:32,399 --> 00:08:40,640
hello no slides now

220
00:08:40,640 --> 00:08:43,199
can you hear me

221
00:08:48,480 --> 00:08:53,440
hello hello hello i don't know if you

222
00:08:59,519 --> 00:09:02,480
okay let me

223
00:09:03,440 --> 00:09:04,720
maybe you don't have the problem let me

224
00:09:04,720 --> 00:09:06,959
just maybe take your slide and sure

225
00:09:06,959 --> 00:09:10,560
bill you want the slice three sorry

226
00:09:10,560 --> 00:09:13,040
connected

227
00:09:16,800 --> 00:09:18,800
yeah like sorry actually i cannot see

228
00:09:18,800 --> 00:09:19,839
the slides

229
00:09:19,839 --> 00:09:22,320
can you can you share slides to me you

230
00:09:22,320 --> 00:09:24,880
cannot see the slide anymore

231
00:09:24,880 --> 00:09:37,839
brother for me

232
00:09:49,200 --> 00:09:52,240
okay okay yeah yeah

233
00:09:52,240 --> 00:09:56,720
we can start from this one actually four

234
00:09:56,720 --> 00:10:01,360
sorry actually i can compare my echo

235
00:10:03,120 --> 00:10:04,880
yeah so for digital twin network

236
00:10:04,880 --> 00:10:06,480
composition actually uh

237
00:10:06,480 --> 00:10:09,519
we identify five key elements number one

238
00:10:09,519 --> 00:10:12,720
uh interface actually we uh identify two

239
00:10:12,720 --> 00:10:14,399
type of interface one is a service

240
00:10:14,399 --> 00:10:15,120
interface

241
00:10:15,120 --> 00:10:18,480
which will be used uh between the

242
00:10:18,480 --> 00:10:20,959
application and a digital uh network

243
00:10:20,959 --> 00:10:22,160
platform

244
00:10:22,160 --> 00:10:24,640
and which can be used to get access the

245
00:10:24,640 --> 00:10:26,240
data and build the application

246
00:10:26,240 --> 00:10:29,120
and invoke the capability the second is

247
00:10:29,120 --> 00:10:30,320
telemetry interface

248
00:10:30,320 --> 00:10:32,560
that will be defined in the interface

249
00:10:32,560 --> 00:10:33,680
between the digital

250
00:10:33,680 --> 00:10:35,839
uh twin platform and the physical

251
00:10:35,839 --> 00:10:36,800
network

252
00:10:36,800 --> 00:10:38,720
that can be used to populate the data

253
00:10:38,720 --> 00:10:40,240
and catch the data

254
00:10:40,240 --> 00:10:43,519
for further data processing so number

255
00:10:43,519 --> 00:10:44,839
two

256
00:10:44,839 --> 00:10:47,040
um data actually

257
00:10:47,040 --> 00:10:50,000
uh the the data actually we actually we

258
00:10:50,000 --> 00:10:50,560
can connect

259
00:10:50,560 --> 00:10:52,800
from the underlying physical network to

260
00:10:52,800 --> 00:10:54,079
use to uh

261
00:10:54,079 --> 00:10:56,079
represent and understand the state and

262
00:10:56,079 --> 00:10:57,680
behavior of the real world

263
00:10:57,680 --> 00:11:00,959
thing number three models actually this

264
00:11:00,959 --> 00:11:01,760
model

265
00:11:01,760 --> 00:11:04,160
uh actually uh based on the physical

266
00:11:04,160 --> 00:11:05,760
network simulation

267
00:11:05,760 --> 00:11:08,240
and not only you can understand the

268
00:11:08,240 --> 00:11:09,760
state and behavior of the

269
00:11:09,760 --> 00:11:12,480
real world team but also you can use it

270
00:11:12,480 --> 00:11:13,440
to predict

271
00:11:13,440 --> 00:11:16,000
the behavior of the real-world twins and

272
00:11:16,000 --> 00:11:17,040
the data we can

273
00:11:17,040 --> 00:11:20,480
include such as uh statics data uh nano

274
00:11:20,480 --> 00:11:21,519
topology data

275
00:11:21,519 --> 00:11:23,839
performance metric data inventory data

276
00:11:23,839 --> 00:11:25,360
and not data

277
00:11:25,360 --> 00:11:29,040
and so number three mapping

278
00:11:29,040 --> 00:11:31,600
actually we are establishing mapping uh

279
00:11:31,600 --> 00:11:32,320
between

280
00:11:32,320 --> 00:11:34,000
uh the physical network and the virtual

281
00:11:34,000 --> 00:11:35,839
twin network also we

282
00:11:35,839 --> 00:11:38,959
will establish the mapping between

283
00:11:38,959 --> 00:11:42,000
any two virtual between network info and

284
00:11:42,000 --> 00:11:45,120
into any virtual train network can be

285
00:11:45,120 --> 00:11:46,720
derived from the physical

286
00:11:46,720 --> 00:11:49,839
network number five orchestration

287
00:11:49,839 --> 00:11:52,240
actually this provides life cycle

288
00:11:52,240 --> 00:11:53,200
management of

289
00:11:53,200 --> 00:11:57,839
all the components next

290
00:12:02,000 --> 00:12:04,880
so sample application scenario actually

291
00:12:04,880 --> 00:12:05,519
uh

292
00:12:05,519 --> 00:12:08,800
so for digital twin uh network

293
00:12:08,800 --> 00:12:11,279
that use uh digital trains that are used

294
00:12:11,279 --> 00:12:12,959
in the industry actually we use a

295
00:12:12,959 --> 00:12:14,240
network as a

296
00:12:14,240 --> 00:12:17,200
tools but uh for digital twin networks

297
00:12:17,200 --> 00:12:19,519
that are used in the nano field actually

298
00:12:19,519 --> 00:12:22,320
we use the network as uh as a source a

299
00:12:22,320 --> 00:12:23,279
data source

300
00:12:23,279 --> 00:12:26,959
so we give a four typical example

301
00:12:26,959 --> 00:12:29,120
the first one network maintenance

302
00:12:29,120 --> 00:12:31,040
engineer training actually

303
00:12:31,040 --> 00:12:34,399
uh usually for network management we may

304
00:12:34,399 --> 00:12:35,120
involve

305
00:12:35,120 --> 00:12:37,680
the human to uh to do the nano

306
00:12:37,680 --> 00:12:39,600
maintenance actually for

307
00:12:39,600 --> 00:12:43,120
uh some of the uh uh tasks

308
00:12:43,120 --> 00:12:46,639
actually you may really require some

309
00:12:46,639 --> 00:12:48,240
expertise and

310
00:12:48,240 --> 00:12:51,200
and to get these expertise actually you

311
00:12:51,200 --> 00:12:51,680
really

312
00:12:51,680 --> 00:12:54,639
want to you know take time to to learn

313
00:12:54,639 --> 00:12:56,800
from it and uh

314
00:12:56,800 --> 00:13:00,160
to make sure you can reach the level

315
00:13:00,160 --> 00:13:01,600
that expected and

316
00:13:01,600 --> 00:13:04,320
with digital team platform we really can

317
00:13:04,320 --> 00:13:05,360
help you train

318
00:13:05,360 --> 00:13:09,200
this network maintenance engineer to

319
00:13:09,200 --> 00:13:11,519
make sure they can meet some criteria

320
00:13:11,519 --> 00:13:13,839
and reach the level we expect for

321
00:13:13,839 --> 00:13:17,279
specific expertise so the second is

322
00:13:17,279 --> 00:13:19,680
machine learning training so

323
00:13:19,680 --> 00:13:20,880
traditionally

324
00:13:20,880 --> 00:13:23,440
when we do the machine learning training

325
00:13:23,440 --> 00:13:25,360
we'll get the data center

326
00:13:25,360 --> 00:13:27,040
and we change this machine learning

327
00:13:27,040 --> 00:13:28,399
algorithm in the

328
00:13:28,399 --> 00:13:30,480
lab and then we can move to the

329
00:13:30,480 --> 00:13:31,839
production stage

330
00:13:31,839 --> 00:13:35,120
so it is also not automatic and maybe

331
00:13:35,120 --> 00:13:35,519
back

332
00:13:35,519 --> 00:13:38,720
and forth when uh do the lab data

333
00:13:38,720 --> 00:13:39,519
training

334
00:13:39,519 --> 00:13:43,680
has some uh bag and so with digital twin

335
00:13:43,680 --> 00:13:44,800
platform we

336
00:13:44,800 --> 00:13:48,480
really can automate this process and

337
00:13:48,480 --> 00:13:50,880
help to uh to provide a more efficient

338
00:13:50,880 --> 00:13:52,079
network management

339
00:13:52,079 --> 00:13:54,880
uh uh more more efficient than machine

340
00:13:54,880 --> 00:13:56,000
learning

341
00:13:56,000 --> 00:13:58,399
so third scenario is we call the dev

342
00:13:58,399 --> 00:13:59,440
orbs orange

343
00:13:59,440 --> 00:14:02,720
certification usually develops actually

344
00:14:02,720 --> 00:14:05,199
will provide life cycle of software

345
00:14:05,199 --> 00:14:06,079
software

346
00:14:06,079 --> 00:14:08,880
uh development including planning

347
00:14:08,880 --> 00:14:09,360
building

348
00:14:09,360 --> 00:14:12,240
testing deep deploy and what is missing

349
00:14:12,240 --> 00:14:14,079
is uh

350
00:14:14,079 --> 00:14:17,199
verification um so for some of the

351
00:14:17,199 --> 00:14:18,959
configuration changes you

352
00:14:18,959 --> 00:14:20,959
uh need to make sure whether these

353
00:14:20,959 --> 00:14:22,639
configuration changes can be applied

354
00:14:22,639 --> 00:14:23,519
actually

355
00:14:23,519 --> 00:14:26,639
so deborah also actually lacks

356
00:14:26,639 --> 00:14:29,760
verification uh in this life cycle

357
00:14:29,760 --> 00:14:30,560
management

358
00:14:30,560 --> 00:14:34,720
so so with the digital team platform we

359
00:14:34,720 --> 00:14:36,399
really can you know leverage this

360
00:14:36,399 --> 00:14:38,639
platform to verify this

361
00:14:38,639 --> 00:14:41,760
configuration to make sure uh all the

362
00:14:41,760 --> 00:14:42,480
valid

363
00:14:42,480 --> 00:14:45,360
all the validated update can be applied

364
00:14:45,360 --> 00:14:46,880
and

365
00:14:46,880 --> 00:14:49,440
so the last one we call the network

366
00:14:49,440 --> 00:14:50,320
fusion when you

367
00:14:50,320 --> 00:14:53,680
introduce some new network api or

368
00:14:53,680 --> 00:14:56,079
we introduced some new protocol stacker

369
00:14:56,079 --> 00:14:56,720
you

370
00:14:56,720 --> 00:14:58,639
before they move to the production stage

371
00:14:58,639 --> 00:15:00,079
you really need to

372
00:15:00,079 --> 00:15:03,519
uh do the test and uh to

373
00:15:03,519 --> 00:15:07,279
do the back fix uh backfix actually uh

374
00:15:07,279 --> 00:15:10,720
we can leverage the digital platform um

375
00:15:10,720 --> 00:15:13,839
to automate this process and

376
00:15:13,839 --> 00:15:17,360
um can can provide a more efficient uh

377
00:15:17,360 --> 00:15:21,120
this network uh

378
00:15:21,120 --> 00:15:27,839
backfixing next

379
00:15:29,279 --> 00:15:32,560
so uh when we uh uh

380
00:15:32,560 --> 00:15:34,720
look at this job actually we uh we

381
00:15:34,720 --> 00:15:36,000
discussed this uh

382
00:15:36,000 --> 00:15:39,120
we we think this is a very useful uh

383
00:15:39,120 --> 00:15:41,199
work actually but we identify several

384
00:15:41,199 --> 00:15:42,959
issues we need to reach agreement

385
00:15:42,959 --> 00:15:43,360
between

386
00:15:43,360 --> 00:15:45,759
also also we want to solve solicit

387
00:15:45,759 --> 00:15:47,199
feedback from

388
00:15:47,199 --> 00:15:50,480
the mit community the so first is

389
00:15:50,480 --> 00:15:54,480
issue one how how data is different from

390
00:15:54,480 --> 00:15:55,839
the model actually

391
00:15:55,839 --> 00:15:58,560
as we know the in the digital twin

392
00:15:58,560 --> 00:16:00,959
network composition we actually identify

393
00:16:00,959 --> 00:16:04,560
five key elements so in industry digital

394
00:16:04,560 --> 00:16:05,120
between

395
00:16:05,120 --> 00:16:08,160
entities actually data and model are

396
00:16:08,160 --> 00:16:10,480
actually apparently two common and

397
00:16:10,480 --> 00:16:12,399
separated components

398
00:16:12,399 --> 00:16:14,399
for example in the smart manufacturers

399
00:16:14,399 --> 00:16:15,680
in a smart

400
00:16:15,680 --> 00:16:19,440
factory actually we can define the data

401
00:16:19,440 --> 00:16:20,720
and model separately

402
00:16:20,720 --> 00:16:23,680
and of course actually data and the

403
00:16:23,680 --> 00:16:25,120
model actually they

404
00:16:25,120 --> 00:16:28,079
need to be used together actually data

405
00:16:28,079 --> 00:16:28,560
can be

406
00:16:28,560 --> 00:16:31,040
structured to follow a set of well-known

407
00:16:31,040 --> 00:16:32,480
data model requirements

408
00:16:32,480 --> 00:16:35,759
and so in a digital twin network we're

409
00:16:35,759 --> 00:16:37,680
proposing this draft and

410
00:16:37,680 --> 00:16:41,040
data model we we think also the

411
00:16:41,040 --> 00:16:42,320
first let's take a look at their

412
00:16:42,320 --> 00:16:44,560
definition for data actually

413
00:16:44,560 --> 00:16:47,759
it is uh digital twin uh

414
00:16:47,759 --> 00:16:50,720
data actually they can use to uh

415
00:16:50,720 --> 00:16:51,680
represent

416
00:16:51,680 --> 00:16:53,199
uh to understand the state and the

417
00:16:53,199 --> 00:16:55,360
behavior of the real-world thing

418
00:16:55,360 --> 00:16:57,519
and for model actually we identified two

419
00:16:57,519 --> 00:16:58,720
kind of models the first

420
00:16:58,720 --> 00:17:01,600
is computation and analytics model and

421
00:17:01,600 --> 00:17:02,800
that can be described

422
00:17:02,800 --> 00:17:05,599
not only describe understand between

423
00:17:05,599 --> 00:17:07,439
operation state and behavior but also

424
00:17:07,439 --> 00:17:08,400
can predict

425
00:17:08,400 --> 00:17:10,720
the twins operations data the second

426
00:17:10,720 --> 00:17:11,919
model we identify

427
00:17:11,919 --> 00:17:14,799
is used to prescribe the action based on

428
00:17:14,799 --> 00:17:15,919
service logic

429
00:17:15,919 --> 00:17:18,160
one of the typical example is a policy

430
00:17:18,160 --> 00:17:19,520
related model or

431
00:17:19,520 --> 00:17:21,599
like a event condition action model

432
00:17:21,599 --> 00:17:23,039
actually they can

433
00:17:23,039 --> 00:17:25,919
uh provide uh prescribe this kind of

434
00:17:25,919 --> 00:17:26,959
action

435
00:17:26,959 --> 00:17:30,000
and so based on this uh

436
00:17:30,000 --> 00:17:33,120
definition analysis we think actually uh

437
00:17:33,120 --> 00:17:35,520
data and model should be separated and

438
00:17:35,520 --> 00:17:37,440
data is a colostrum

439
00:17:37,440 --> 00:17:39,840
called colorstone for constructed

440
00:17:39,840 --> 00:17:41,120
digital twin

441
00:17:41,120 --> 00:17:44,160
system for model actually this uh

442
00:17:44,160 --> 00:17:46,240
can be seen as a source to analyze the

443
00:17:46,240 --> 00:17:47,360
diagonals immune

444
00:17:47,360 --> 00:17:50,720
and control the physical network

445
00:17:50,720 --> 00:17:53,039
next

446
00:17:55,760 --> 00:17:59,520
so for second issue is in the

447
00:17:59,520 --> 00:18:01,919
5k elements orchestration is one of

448
00:18:01,919 --> 00:18:03,760
important key elements

449
00:18:03,760 --> 00:18:05,600
actually basically oxygen component

450
00:18:05,600 --> 00:18:08,160
actually used to control and management

451
00:18:08,160 --> 00:18:11,360
between entities and with the

452
00:18:11,360 --> 00:18:13,840
application facing interface it can help

453
00:18:13,840 --> 00:18:16,080
to provide integrated service to various

454
00:18:16,080 --> 00:18:19,200
applications so we

455
00:18:19,200 --> 00:18:22,480
try to figure out how this auction

456
00:18:22,480 --> 00:18:26,000
is different from the other key elements

457
00:18:26,000 --> 00:18:28,000
for the model actually one

458
00:18:28,000 --> 00:18:31,360
uh model role is you know to prescribe

459
00:18:31,360 --> 00:18:32,160
that action

460
00:18:32,160 --> 00:18:35,360
based on service logic so now we can

461
00:18:35,360 --> 00:18:37,280
see actually for orchestration they also

462
00:18:37,280 --> 00:18:39,600
can be broken down into two rows the

463
00:18:39,600 --> 00:18:41,760
first row is they can control digital to

464
00:18:41,760 --> 00:18:43,120
nano environment

465
00:18:43,120 --> 00:18:45,360
and its components to derive required

466
00:18:45,360 --> 00:18:46,320
behavior

467
00:18:46,320 --> 00:18:49,120
the second is it's a main role for the

468
00:18:49,120 --> 00:18:49,760
aux tray

469
00:18:49,760 --> 00:18:52,480
uh component actually they will provide

470
00:18:52,480 --> 00:18:53,760
life cycle management

471
00:18:53,760 --> 00:18:56,320
for all these components and it can

472
00:18:56,320 --> 00:18:56,880
provide

473
00:18:56,880 --> 00:18:59,720
repetitive and it can provide uh

474
00:18:59,720 --> 00:19:01,280
reproductivity

475
00:19:01,280 --> 00:19:04,880
and based on the definition we will give

476
00:19:04,880 --> 00:19:05,919
here and

477
00:19:05,919 --> 00:19:09,120
so since there's some over uh laughing

478
00:19:09,120 --> 00:19:10,480
with the model

479
00:19:10,480 --> 00:19:12,480
role we mentioned in the previous slides

480
00:19:12,480 --> 00:19:13,520
that we need to figure out

481
00:19:13,520 --> 00:19:16,480
how to address this kind of overlapping

482
00:19:16,480 --> 00:19:18,000
sorry to interrupt

483
00:19:18,000 --> 00:19:20,240
we need to ask you to finish in two

484
00:19:20,240 --> 00:19:22,240
minutes the presentation to keep

485
00:19:22,240 --> 00:19:25,280
with the schedule sorry oh okay

486
00:19:25,280 --> 00:19:29,120
okay so let me uh try to be quick

487
00:19:29,120 --> 00:19:29,840
actually

488
00:19:29,840 --> 00:19:33,919
uh we'll move to the next one

489
00:19:33,919 --> 00:19:37,760
so we also have three other issue and

490
00:19:37,760 --> 00:19:40,240
we already discussed with the ulcer and

491
00:19:40,240 --> 00:19:41,520
we

492
00:19:41,520 --> 00:19:43,679
actually like to solve this feedback for

493
00:19:43,679 --> 00:19:44,720
one of these

494
00:19:44,720 --> 00:19:47,200
how uh should the interface should be

495
00:19:47,200 --> 00:19:47,760
defined

496
00:19:47,760 --> 00:19:50,960
we identify uh open standalone phase and

497
00:19:50,960 --> 00:19:52,799
internal interface so our conclusion is

498
00:19:52,799 --> 00:19:54,880
we can start from this open and standard

499
00:19:54,880 --> 00:19:55,520
interface

500
00:19:55,520 --> 00:19:57,760
and later on we can you know revisit

501
00:19:57,760 --> 00:19:58,720
this

502
00:19:58,720 --> 00:20:06,400
internal interface next

503
00:20:06,400 --> 00:20:09,600
so the next issue is uh uh for one of

504
00:20:09,600 --> 00:20:10,080
the

505
00:20:10,080 --> 00:20:12,000
elements actually who responds for the

506
00:20:12,000 --> 00:20:14,080
checking difference actually we think

507
00:20:14,080 --> 00:20:15,919
it's a mapping and then we support two

508
00:20:15,919 --> 00:20:17,840
kind of mapping one is one two one

509
00:20:17,840 --> 00:20:18,320
mapping

510
00:20:18,320 --> 00:20:20,480
the second one too many mapping the key

511
00:20:20,480 --> 00:20:21,360
difference the

512
00:20:21,360 --> 00:20:23,520
actually for one two one mapping is

513
00:20:23,520 --> 00:20:24,960
between physical network and digital

514
00:20:24,960 --> 00:20:26,320
twin they require

515
00:20:26,320 --> 00:20:29,440
uh continuous flow uh data uh

516
00:20:29,440 --> 00:20:31,039
exchange actually this is huge model

517
00:20:31,039 --> 00:20:32,480
data exchange but for

518
00:20:32,480 --> 00:20:35,039
one too many mapping actually the just

519
00:20:35,039 --> 00:20:37,039
you know occasional data exchange

520
00:20:37,039 --> 00:20:40,799
uh between the two digital twin network

521
00:20:40,799 --> 00:20:43,360
yeah next

522
00:20:47,280 --> 00:20:49,039
so last one is the continuous

523
00:20:49,039 --> 00:20:50,400
verification is

524
00:20:50,400 --> 00:20:52,720
we propose in this chapter how this is

525
00:20:52,720 --> 00:20:54,960
different from ci cd actually as we know

526
00:20:54,960 --> 00:20:56,159
there also

527
00:20:56,159 --> 00:20:59,120
you know uh provide the whole life cycle

528
00:20:59,120 --> 00:21:00,080
management include

529
00:21:00,080 --> 00:21:03,200
ci cd and we give the example now based

530
00:21:03,200 --> 00:21:05,120
on our evaluation we think cv is

531
00:21:05,120 --> 00:21:07,840
extension of david also ci cd

532
00:21:07,840 --> 00:21:09,919
uh one of the example we give actually

533
00:21:09,919 --> 00:21:11,360
you know relate to the

534
00:21:11,360 --> 00:21:13,919
developer oriented uh certification

535
00:21:13,919 --> 00:21:15,200
actually

536
00:21:15,200 --> 00:21:17,600
because it lacks a continuous

537
00:21:17,600 --> 00:21:18,559
verification

538
00:21:18,559 --> 00:21:22,000
it will end up increase the risk to

539
00:21:22,000 --> 00:21:24,720
deploy no valid data update but with

540
00:21:24,720 --> 00:21:26,400
continuous verification we can address

541
00:21:26,400 --> 00:21:27,520
this issue

542
00:21:27,520 --> 00:21:30,480
so we will reflect the summer changing

543
00:21:30,480 --> 00:21:31,360
in the in the

544
00:21:31,360 --> 00:21:33,120
in the next version so next step

545
00:21:33,120 --> 00:21:34,480
actually we will

546
00:21:34,480 --> 00:21:36,640
keep on investigating related digital

547
00:21:36,640 --> 00:21:38,880
twin worker not only in the idea but

548
00:21:38,880 --> 00:21:39,600
also in

549
00:21:39,600 --> 00:21:42,799
in other sdo and identify their

550
00:21:42,799 --> 00:21:44,480
difference and commonality

551
00:21:44,480 --> 00:21:47,760
try to you know make it solid

552
00:21:47,760 --> 00:21:49,919
in in in the introduction and an

553
00:21:49,919 --> 00:21:50,880
abstract

554
00:21:50,880 --> 00:21:54,000
and also we will uh further articulate

555
00:21:54,000 --> 00:21:55,679
the relation between the data

556
00:21:55,679 --> 00:21:58,880
model mapping and

557
00:21:58,880 --> 00:22:01,360
also we analyze the requirements from

558
00:22:01,360 --> 00:22:03,760
the ping and application interface

559
00:22:03,760 --> 00:22:07,840
and so we like to hear

560
00:22:07,840 --> 00:22:10,559
uh your feedback and will address any

561
00:22:10,559 --> 00:22:12,240
issues in the meeting

562
00:22:12,240 --> 00:22:16,240
thank you for listening

563
00:22:18,480 --> 00:22:22,240
get back to you lauren sharon

564
00:22:22,240 --> 00:22:23,760
unfortunately we have no time for

565
00:22:23,760 --> 00:22:25,760
questions and comments now so that that

566
00:22:25,760 --> 00:22:26,400
would be

567
00:22:26,400 --> 00:22:29,039
take to be taken offline in the mailing

568
00:22:29,039 --> 00:22:29,760
list or

569
00:22:29,760 --> 00:22:32,400
after in the gather tone we can also

570
00:22:32,400 --> 00:22:34,000
discuss okay we're going to take take it

571
00:22:34,000 --> 00:22:35,120
to the next day yeah so

572
00:22:35,120 --> 00:22:38,559
sorry we have to keep time sorry

573
00:22:38,559 --> 00:22:41,840
okay okay

574
00:22:45,679 --> 00:22:54,880
next speaker i think is olga

575
00:22:54,880 --> 00:22:59,440
okay thanks lauren my name is

576
00:22:59,440 --> 00:23:02,320
and i'm from huawei and i will be

577
00:23:02,320 --> 00:23:04,880
presenting

578
00:23:04,880 --> 00:23:08,159
the draft for intent classification

579
00:23:08,159 --> 00:23:12,559
today next

580
00:23:14,880 --> 00:23:16,559
so i just want to refresh and why

581
00:23:16,559 --> 00:23:17,840
because last time there were a lot of

582
00:23:17,840 --> 00:23:20,480
questions around it so i just wanted to

583
00:23:20,480 --> 00:23:23,600
repeat uh very high level what the goals

584
00:23:23,600 --> 00:23:25,679
overall for the nmrg and what was

585
00:23:25,679 --> 00:23:26,720
proposed

586
00:23:26,720 --> 00:23:30,000
so uh the enemy goals were to agree on

587
00:23:30,000 --> 00:23:31,919
intent related terminology

588
00:23:31,919 --> 00:23:34,000
and classification and provide a

589
00:23:34,000 --> 00:23:35,280
foundation uh

590
00:23:35,280 --> 00:23:37,840
for future discussions related to the

591
00:23:37,840 --> 00:23:39,120
intent top

592
00:23:39,120 --> 00:23:42,400
intent and where all participants have

593
00:23:42,400 --> 00:23:43,279
the common

594
00:23:43,279 --> 00:23:45,840
understanding so it is really about the

595
00:23:45,840 --> 00:23:48,400
sharing of terminology and the concepts

596
00:23:48,400 --> 00:23:50,799
so originally the two nmrg drafts were

597
00:23:50,799 --> 00:23:52,960
proposed to address this goal

598
00:23:52,960 --> 00:23:54,799
the first one is not the one we are

599
00:23:54,799 --> 00:23:56,559
talking about here it's the concept

600
00:23:56,559 --> 00:23:58,799
definitions to clarify the concept of

601
00:23:58,799 --> 00:23:59,520
intent

602
00:23:59,520 --> 00:24:01,520
and they also provided the overview of

603
00:24:01,520 --> 00:24:02,799
the functionality

604
00:24:02,799 --> 00:24:05,200
and this draft today that i'm presenting

605
00:24:05,200 --> 00:24:06,400
is to provide

606
00:24:06,400 --> 00:24:08,400
is the classification draft to provide

607
00:24:08,400 --> 00:24:10,960
intent classification and develop

608
00:24:10,960 --> 00:24:14,000
a taxonomy for the intent based

609
00:24:14,000 --> 00:24:16,840
networking or intend-driven networking

610
00:24:16,840 --> 00:24:19,840
next

611
00:24:20,559 --> 00:24:23,679
so the scope of this draft there was no

612
00:24:23,679 --> 00:24:24,320
clarity

613
00:24:24,320 --> 00:24:27,039
originally about what intent represents

614
00:24:27,039 --> 00:24:28,960
for different stakeholders so so we had

615
00:24:28,960 --> 00:24:30,559
the concepts graphed

616
00:24:30,559 --> 00:24:32,240
that gave some high level concept

617
00:24:32,240 --> 00:24:33,760
definition of the intent

618
00:24:33,760 --> 00:24:36,880
and it also presented the overview of uh

619
00:24:36,880 --> 00:24:39,440
intent uh functionality intent

620
00:24:39,440 --> 00:24:41,279
networking functionality but that's not

621
00:24:41,279 --> 00:24:43,440
enough we needed really to give

622
00:24:43,440 --> 00:24:46,320
more information and uh to to do some

623
00:24:46,320 --> 00:24:48,240
classifications of different intent

624
00:24:48,240 --> 00:24:50,400
types in order to understand what intent

625
00:24:50,400 --> 00:24:52,480
represents to different stakeholders

626
00:24:52,480 --> 00:24:54,559
and those stoic holders could be network

627
00:24:54,559 --> 00:24:55,520
operators

628
00:24:55,520 --> 00:24:59,520
administrators end users customers etc

629
00:24:59,520 --> 00:25:01,360
there was also no common understanding

630
00:25:01,360 --> 00:25:03,360
how to classify intents and what types

631
00:25:03,360 --> 00:25:04,480
of intents exist

632
00:25:04,480 --> 00:25:06,080
there were different types of intents

633
00:25:06,080 --> 00:25:08,640
being used in different scenarios

634
00:25:08,640 --> 00:25:11,600
and there was no kind of com common

635
00:25:11,600 --> 00:25:12,880
taxonomy there

636
00:25:12,880 --> 00:25:15,120
so this draft addresses these issues by

637
00:25:15,120 --> 00:25:17,120
proposing intent taxonomy and

638
00:25:17,120 --> 00:25:18,960
methodology

639
00:25:18,960 --> 00:25:21,279
next

640
00:25:24,000 --> 00:25:25,279
so as you know we propose the

641
00:25:25,279 --> 00:25:27,200
methodology that could be used to

642
00:25:27,200 --> 00:25:28,159
deliver

643
00:25:28,159 --> 00:25:31,200
this uh to

644
00:25:31,360 --> 00:25:33,600
to generate this intent taxonomy and

645
00:25:33,600 --> 00:25:36,400
also to extend it and customize it

646
00:25:36,400 --> 00:25:38,240
so we explained this many times

647
00:25:38,240 --> 00:25:40,320
previously and there's a lot of comments

648
00:25:40,320 --> 00:25:41,840
uh

649
00:25:41,840 --> 00:25:45,440
to add an example and therefore we added

650
00:25:45,440 --> 00:25:48,720
an example which was the itf-108 poc

651
00:25:48,720 --> 00:25:52,400
a multi-layer approach for ibm

652
00:25:52,559 --> 00:25:54,960
barbara walter and the others and it's

653
00:25:54,960 --> 00:25:56,000
it's been used

654
00:25:56,000 --> 00:25:58,720
as an example for uh kind of how the

655
00:25:58,720 --> 00:26:01,200
classification methodology could be used

656
00:26:01,200 --> 00:26:03,360
so for those who are familiar with this

657
00:26:03,360 --> 00:26:05,360
book they have uh

658
00:26:05,360 --> 00:26:08,400
two types of intents they have a slice

659
00:26:08,400 --> 00:26:08,960
intent

660
00:26:08,960 --> 00:26:11,120
and they have service chain intent and

661
00:26:11,120 --> 00:26:13,039
after discussion with them we determined

662
00:26:13,039 --> 00:26:14,880
yes this their poc could be used for

663
00:26:14,880 --> 00:26:15,600
carrier but

664
00:26:15,600 --> 00:26:18,000
also for data center so then we

665
00:26:18,000 --> 00:26:19,279
identified

666
00:26:19,279 --> 00:26:22,400
uh what uh type of solutions or

667
00:26:22,400 --> 00:26:24,880
scenarios what type of

668
00:26:24,880 --> 00:26:27,440
intent user types what type of intent

669
00:26:27,440 --> 00:26:28,000
types

670
00:26:28,000 --> 00:26:30,559
what's the scope of the intent uh what's

671
00:26:30,559 --> 00:26:32,880
the network scope for the intents

672
00:26:32,880 --> 00:26:34,720
how they're abstracted are they

673
00:26:34,720 --> 00:26:36,400
technical non-technical

674
00:26:36,400 --> 00:26:38,400
are they persistent are they not

675
00:26:38,400 --> 00:26:40,240
transient so

676
00:26:40,240 --> 00:26:42,960
we used this methodology and taxonomy

677
00:26:42,960 --> 00:26:43,279
and

678
00:26:43,279 --> 00:26:45,039
there was no need even to extend it

679
00:26:45,039 --> 00:26:46,720
because we were able to

680
00:26:46,720 --> 00:26:49,360
to fit and classified their use case

681
00:26:49,360 --> 00:26:51,200
according to the taxonomy

682
00:26:51,200 --> 00:26:54,640
so you can see here uh for carrier

683
00:26:54,640 --> 00:26:57,520
we use the kind of different symbols

684
00:26:57,520 --> 00:26:59,360
different colors for carry and data

685
00:26:59,360 --> 00:27:00,159
center

686
00:27:00,159 --> 00:27:02,400
and where these intents fit into the

687
00:27:02,400 --> 00:27:08,159
overall taxonomy and classification next

688
00:27:08,159 --> 00:27:10,240
so we really want to acknowledge uh

689
00:27:10,240 --> 00:27:12,320
everyone who reviewed suggested

690
00:27:12,320 --> 00:27:13,520
commented

691
00:27:13,520 --> 00:27:16,159
you know proposed text for this draft

692
00:27:16,159 --> 00:27:17,840
there were many people who

693
00:27:17,840 --> 00:27:21,279
helped and who gave their input uh mahdi

694
00:27:21,279 --> 00:27:23,919
ibrahim lawrence alexander yahya

695
00:27:23,919 --> 00:27:27,279
jeremy pedro daniel branislav

696
00:27:27,279 --> 00:27:31,039
here again jerelyn jeff we also thank

697
00:27:31,039 --> 00:27:32,640
barbara voldemort

698
00:27:32,640 --> 00:27:34,559
david for the contribution and for

699
00:27:34,559 --> 00:27:37,520
providing the multi-level approach poc

700
00:27:37,520 --> 00:27:40,240
which he used as a use case for intent

701
00:27:40,240 --> 00:27:41,520
classification as

702
00:27:41,520 --> 00:27:43,360
a sample for the use case intent

703
00:27:43,360 --> 00:27:44,559
classification

704
00:27:44,559 --> 00:27:47,360
since we shared the the last the the

705
00:27:47,360 --> 00:27:49,360
version of this draft version two

706
00:27:49,360 --> 00:27:52,720
we also got review comments from

707
00:27:52,720 --> 00:27:56,240
uh mauka david uh and benoit thank you

708
00:27:56,240 --> 00:27:56,559
all

709
00:27:56,559 --> 00:27:58,559
sorry this was written before when i

710
00:27:58,559 --> 00:28:00,840
contributed so i will add him to the

711
00:28:00,840 --> 00:28:02,159
acknowledgements

712
00:28:02,159 --> 00:28:05,440
next so the following

713
00:28:05,440 --> 00:28:07,760
are the issues that we resolved in this

714
00:28:07,760 --> 00:28:08,880
draft

715
00:28:08,880 --> 00:28:11,679
uh so we sharpened our drafts position

716
00:28:11,679 --> 00:28:13,679
there were 38 comments in total

717
00:28:13,679 --> 00:28:15,360
but this is just kind of regrouped them

718
00:28:15,360 --> 00:28:16,880
into eight

719
00:28:16,880 --> 00:28:19,440
high level categories just to explain

720
00:28:19,440 --> 00:28:20,480
what we did

721
00:28:20,480 --> 00:28:23,360
in the version zero two so we sharpened

722
00:28:23,360 --> 00:28:25,360
our draft's position in relation

723
00:28:25,360 --> 00:28:28,240
to the concepts draft then we provided

724
00:28:28,240 --> 00:28:30,159
detailed description of the

725
00:28:30,159 --> 00:28:32,640
intent classification workflow and how

726
00:28:32,640 --> 00:28:35,600
we can use the methodology to extend

727
00:28:35,600 --> 00:28:38,559
the taxonomy classification then we

728
00:28:38,559 --> 00:28:40,480
integrate it as i mentioned

729
00:28:40,480 --> 00:28:43,039
the epoch into the draft and use it as

730
00:28:43,039 --> 00:28:45,440
an example for our classification

731
00:28:45,440 --> 00:28:48,080
there was some requirement to clarify

732
00:28:48,080 --> 00:28:49,440
further

733
00:28:49,440 --> 00:28:51,360
requirements for different intent types

734
00:28:51,360 --> 00:28:52,880
based on the context

735
00:28:52,880 --> 00:28:55,840
we added that we addressed the benefits

736
00:28:55,840 --> 00:28:56,880
of intents

737
00:28:56,880 --> 00:28:59,919
to different network requirements

738
00:28:59,919 --> 00:29:02,159
we added the scope section so we moved

739
00:29:02,159 --> 00:29:05,200
some text there and we kind of

740
00:29:05,200 --> 00:29:07,919
identified the scope and priorities for

741
00:29:07,919 --> 00:29:08,559
the project

742
00:29:08,559 --> 00:29:10,960
and included definition section

743
00:29:10,960 --> 00:29:12,080
introducing different

744
00:29:12,080 --> 00:29:14,399
terms related to ibn id and with

745
00:29:14,399 --> 00:29:16,960
reference to ibm concepts and overview

746
00:29:16,960 --> 00:29:19,760
and then we had the various readability

747
00:29:19,760 --> 00:29:20,640
improvements

748
00:29:20,640 --> 00:29:23,120
but we did receive some further comments

749
00:29:23,120 --> 00:29:24,159
that we would address

750
00:29:24,159 --> 00:29:28,799
uh in next few days next

751
00:29:29,840 --> 00:29:33,200
so uh then we asked for drg last call

752
00:29:33,200 --> 00:29:35,919
and then uh shepherd has been assigned

753
00:29:35,919 --> 00:29:37,840
since the last itf meeting

754
00:29:37,840 --> 00:29:40,720
laurent from has been assigned as

755
00:29:40,720 --> 00:29:41,279
shepherd

756
00:29:41,279 --> 00:29:43,200
and the three-week rg last call was

757
00:29:43,200 --> 00:29:46,000
initiated on 23rd of february

758
00:29:46,000 --> 00:29:48,000
so we are now collecting the comments

759
00:29:48,000 --> 00:29:50,159
and i already mentioned that we received

760
00:29:50,159 --> 00:29:52,480
some comments and we'll be receiving

761
00:29:52,480 --> 00:29:53,760
them until 15th

762
00:29:53,760 --> 00:29:57,200
of march next

763
00:29:59,200 --> 00:30:01,440
so this is just a document timeline for

764
00:30:01,440 --> 00:30:03,679
those of you who are not maybe familiar

765
00:30:03,679 --> 00:30:05,440
but you can see that we have

766
00:30:05,440 --> 00:30:07,520
many versions of the documents many

767
00:30:07,520 --> 00:30:10,240
revisions a lot of the comments

768
00:30:10,240 --> 00:30:12,720
the draft has been revised many times we

769
00:30:12,720 --> 00:30:13,919
addressed all of the

770
00:30:13,919 --> 00:30:17,279
comments from the community

771
00:30:17,279 --> 00:30:20,640
we we believe this this document is very

772
00:30:20,640 --> 00:30:23,520
stable and it's ready for rssg review

773
00:30:23,520 --> 00:30:26,159
we spent a lot of time on this document

774
00:30:26,159 --> 00:30:27,279
and we really think

775
00:30:27,279 --> 00:30:30,240
it is ready now

776
00:30:30,480 --> 00:30:32,799
so you can see the timeline for rg so

777
00:30:32,799 --> 00:30:35,039
next steps we believe that

778
00:30:35,039 --> 00:30:37,279
the authors quarters believe all

779
00:30:37,279 --> 00:30:39,120
reported issues are resolved

780
00:30:39,120 --> 00:30:41,200
at this stage we will continue

781
00:30:41,200 --> 00:30:42,559
collecting comments

782
00:30:42,559 --> 00:30:45,039
from the group by from the research

783
00:30:45,039 --> 00:30:47,039
group by 15th of march

784
00:30:47,039 --> 00:30:49,520
we will make one final revision of this

785
00:30:49,520 --> 00:30:50,480
document

786
00:30:50,480 --> 00:30:53,279
that would address these comments and

787
00:30:53,279 --> 00:30:55,200
then there would be shepard evaluation

788
00:30:55,200 --> 00:30:58,880
and hopefully finally iris is sg review

789
00:30:58,880 --> 00:31:02,159
so these are the next steps

790
00:31:03,679 --> 00:31:07,200
thank you if you have any comments i

791
00:31:07,200 --> 00:31:08,640
don't know if there is any time

792
00:31:08,640 --> 00:31:11,039
learned

793
00:31:13,360 --> 00:31:19,840
can you hear me

794
00:31:24,799 --> 00:31:33,840
yeah i can't hear you lauren

795
00:31:34,559 --> 00:31:37,279
hello hello

796
00:31:39,279 --> 00:31:47,840
okay sorry yeah um

797
00:31:50,799 --> 00:31:52,480
going into the queue but just for the

798
00:31:52,480 --> 00:31:54,159
sake of the other presentation

799
00:31:54,159 --> 00:31:55,679
and this is a anyway research group

800
00:31:55,679 --> 00:31:57,679
document that is under uh research for

801
00:31:57,679 --> 00:31:58,640
classical so

802
00:31:58,640 --> 00:32:01,120
please and enter those comments offline

803
00:32:01,120 --> 00:32:03,360
please

804
00:32:08,880 --> 00:32:15,840
thank you very much thanks bye

805
00:32:21,200 --> 00:32:24,960
and young you will be the next speaker

806
00:32:26,840 --> 00:32:29,840
please

807
00:32:44,000 --> 00:32:47,120
okay this is daniel from china mobile

808
00:32:47,120 --> 00:32:50,320
and this time topic is

809
00:32:50,320 --> 00:32:52,399
about the updates of the network

810
00:32:52,399 --> 00:32:53,679
environment engine

811
00:32:53,679 --> 00:32:57,519
and the next slide paste

812
00:33:01,039 --> 00:33:03,440
hello

813
00:33:08,399 --> 00:33:11,840
okay and the updates are

814
00:33:11,840 --> 00:33:15,120
the main updates uh includes two points

815
00:33:15,120 --> 00:33:16,480
one is the update

816
00:33:16,480 --> 00:33:19,279
of the overview of network environment

817
00:33:19,279 --> 00:33:20,880
intent process

818
00:33:20,880 --> 00:33:23,600
and the other one is taking network

819
00:33:23,600 --> 00:33:24,960
environment intent

820
00:33:24,960 --> 00:33:28,640
in sla as a concrete example

821
00:33:28,640 --> 00:33:32,240
and next slide please

822
00:33:37,679 --> 00:33:41,360
so for simplicity we will use an mi

823
00:33:41,360 --> 00:33:44,640
uh instead of network measurement intent

824
00:33:44,640 --> 00:33:48,320
and the major components concludes

825
00:33:48,320 --> 00:33:52,080
the the the third part

826
00:33:52,080 --> 00:33:55,039
and the sequential relationship between

827
00:33:55,039 --> 00:33:56,000
the components

828
00:33:56,000 --> 00:33:59,039
is shown as a red figure and

829
00:33:59,039 --> 00:34:07,840
next slide please

830
00:34:11,199 --> 00:34:14,320
and the functions of each component are

831
00:34:14,320 --> 00:34:15,839
as follows

832
00:34:15,839 --> 00:34:19,359
in nmi recognition and acquisition

833
00:34:19,359 --> 00:34:22,560
an mi will be recognized by in guesting

834
00:34:22,560 --> 00:34:23,359
users or

835
00:34:23,359 --> 00:34:27,280
network operators management intent

836
00:34:27,280 --> 00:34:30,159
they have the ability to identify the

837
00:34:30,159 --> 00:34:33,359
nmi of a certain network performance

838
00:34:33,359 --> 00:34:36,480
that users want to measure such as

839
00:34:36,480 --> 00:34:40,000
delay jitter and so on at the same time

840
00:34:40,000 --> 00:34:43,119
allow users to express the nmi

841
00:34:43,119 --> 00:34:46,159
of network performance in a variety of

842
00:34:46,159 --> 00:34:49,599
interactive ways to ensure the accuracy

843
00:34:49,599 --> 00:34:53,359
of the identification of the nama and

844
00:34:53,359 --> 00:34:56,399
in nmi translation

845
00:34:56,399 --> 00:34:59,920
an mi needs to be translated into

846
00:34:59,920 --> 00:35:03,440
actions and requires taken against the

847
00:35:03,440 --> 00:35:07,599
network so determine and determine the

848
00:35:07,599 --> 00:35:11,280
content to be measured and according to

849
00:35:11,280 --> 00:35:13,440
the

850
00:35:13,440 --> 00:35:16,720
proverbs and my translation step

851
00:35:16,720 --> 00:35:19,079
the nmi orchestration and

852
00:35:19,079 --> 00:35:21,119
pre-verification determines

853
00:35:21,119 --> 00:35:24,480
the environment scheme according to the

854
00:35:24,480 --> 00:35:25,920
required

855
00:35:25,920 --> 00:35:28,880
maintenance content and equipment to

856
00:35:28,880 --> 00:35:30,240
sports degree

857
00:35:30,240 --> 00:35:33,280
and pre-verifies whether the environment

858
00:35:33,280 --> 00:35:36,160
scheme is facebook and the next slide

859
00:35:36,160 --> 00:35:38,480
piece

860
00:35:43,359 --> 00:35:46,400
uh so in nmi uh data collection

861
00:35:46,400 --> 00:35:48,800
and analysis should be based on the

862
00:35:48,800 --> 00:35:50,160
selected environment

863
00:35:50,160 --> 00:35:53,200
scheme and the content to be married

864
00:35:53,200 --> 00:35:54,640
that's determined

865
00:35:54,640 --> 00:35:57,839
in the previous steps

866
00:35:57,839 --> 00:36:00,640
automatically realize the collection on

867
00:36:00,640 --> 00:36:01,599
the mind

868
00:36:01,599 --> 00:36:04,640
and generate corresponding data analysis

869
00:36:04,640 --> 00:36:05,680
results

870
00:36:05,680 --> 00:36:08,720
so at the end an mi compliance

871
00:36:08,720 --> 00:36:11,359
assessment verifies whether the results

872
00:36:11,359 --> 00:36:11,760
meet

873
00:36:11,760 --> 00:36:14,560
the requirements and whether the nmr is

874
00:36:14,560 --> 00:36:16,079
satisfied

875
00:36:16,079 --> 00:36:19,280
so if either of the two conditions

876
00:36:19,280 --> 00:36:22,320
is not satisfied the nmi

877
00:36:22,320 --> 00:36:25,520
should be modified and re-enter the nmi

878
00:36:25,520 --> 00:36:27,880
orchestration and prevent

879
00:36:27,880 --> 00:36:29,599
pre-verification

880
00:36:29,599 --> 00:36:32,880
and if it meets the requirements

881
00:36:32,880 --> 00:36:37,680
it will put out the environment results

882
00:36:37,680 --> 00:36:41,839
our next threat piece

883
00:36:44,560 --> 00:36:49,359
and we will give our concrete examples

884
00:36:49,359 --> 00:36:52,320
at present a variety of network

885
00:36:52,320 --> 00:36:52,960
environment

886
00:36:52,960 --> 00:36:56,160
techniques have been developed such as

887
00:36:56,160 --> 00:36:58,720
the active environment and the passive

888
00:36:58,720 --> 00:36:59,839
environment

889
00:36:59,839 --> 00:37:01,680
but no matter which measurement

890
00:37:01,680 --> 00:37:02,880
technology

891
00:37:02,880 --> 00:37:05,760
will occupy the network resources for

892
00:37:05,760 --> 00:37:07,040
example

893
00:37:07,040 --> 00:37:10,240
if the transmission frequency of active

894
00:37:10,240 --> 00:37:11,599
environment message

895
00:37:11,599 --> 00:37:14,800
is too fast it will occupy too

896
00:37:14,800 --> 00:37:18,160
much fine wise resources and

897
00:37:18,160 --> 00:37:21,200
affect the normal operation of actual

898
00:37:21,200 --> 00:37:23,200
business

899
00:37:23,200 --> 00:37:25,680
well if the transmission frequency is

900
00:37:25,680 --> 00:37:27,040
too slow some

901
00:37:27,040 --> 00:37:29,839
instantaneous network anomalies will be

902
00:37:29,839 --> 00:37:30,400
missed

903
00:37:30,400 --> 00:37:33,200
and the network status cannot be

904
00:37:33,200 --> 00:37:34,240
accurately

905
00:37:34,240 --> 00:37:37,520
reflected so in order to accurately

906
00:37:37,520 --> 00:37:41,119
measure the network the network stage

907
00:37:41,119 --> 00:37:43,680
and especially the abnormal network

908
00:37:43,680 --> 00:37:45,520
affecting the business

909
00:37:45,520 --> 00:37:48,640
we are occupying the network bindwest

910
00:37:48,640 --> 00:37:51,599
as little as possible and taking into

911
00:37:51,599 --> 00:37:53,280
account

912
00:37:53,280 --> 00:37:56,320
the low processing capacity of the

913
00:37:56,320 --> 00:38:00,240
data analysis system we will

914
00:38:00,240 --> 00:38:02,960
we take the delay measurement scheme in

915
00:38:02,960 --> 00:38:05,200
sla

916
00:38:05,200 --> 00:38:08,320
as a service level agreement performance

917
00:38:08,320 --> 00:38:09,119
environment

918
00:38:09,119 --> 00:38:12,720
as an example to illustrate

919
00:38:12,720 --> 00:38:15,280
first of all we will set different

920
00:38:15,280 --> 00:38:17,839
thresholds

921
00:38:17,839 --> 00:38:21,280
a running volume and a large value for

922
00:38:21,280 --> 00:38:23,599
network delay in advance

923
00:38:23,599 --> 00:38:25,520
the network delay between different

924
00:38:25,520 --> 00:38:27,839
thresholds represents the different

925
00:38:27,839 --> 00:38:31,440
status of the network and the business

926
00:38:31,440 --> 00:38:34,000
when delay when the delay value is

927
00:38:34,000 --> 00:38:34,960
blowing

928
00:38:34,960 --> 00:38:37,839
warning the network and the business are

929
00:38:37,839 --> 00:38:39,200
both normal

930
00:38:39,200 --> 00:38:42,160
and when the delay is between warning

931
00:38:42,160 --> 00:38:44,240
and alert

932
00:38:44,240 --> 00:38:47,119
it represents that the network is normal

933
00:38:47,119 --> 00:38:48,320
but

934
00:38:48,320 --> 00:38:51,599
the uh business is

935
00:38:51,599 --> 00:38:54,160
that it represents the network

936
00:38:54,160 --> 00:38:56,160
fluctuation is abnormal

937
00:38:56,160 --> 00:38:59,200
but the business is normal and

938
00:38:59,200 --> 00:39:02,240
when the delay exceeds the large value

939
00:39:02,240 --> 00:39:04,720
both the network and business are

940
00:39:04,720 --> 00:39:06,160
abnormal

941
00:39:06,160 --> 00:39:10,320
so we should adopt different environment

942
00:39:10,320 --> 00:39:14,640
schemes in different uh

943
00:39:15,520 --> 00:39:19,839
in different when the network delay in

944
00:39:19,839 --> 00:39:20,480
different

945
00:39:20,480 --> 00:39:28,160
values so next slide piece

946
00:39:28,160 --> 00:39:32,000
so for so when the network delay

947
00:39:32,000 --> 00:39:34,960
exceeds the large volume or when the

948
00:39:34,960 --> 00:39:36,480
historical datum

949
00:39:36,480 --> 00:39:39,200
predicts that the delay will exceed the

950
00:39:39,200 --> 00:39:40,960
large volume

951
00:39:40,960 --> 00:39:44,079
when we adopt a passive environment it

952
00:39:44,079 --> 00:39:44,960
requires

953
00:39:44,960 --> 00:39:48,000
100 percent the sampling of business

954
00:39:48,000 --> 00:39:51,200
data and the transmission frequency of

955
00:39:51,200 --> 00:39:53,599
active environment is modeled to the

956
00:39:53,599 --> 00:39:54,960
maximum

957
00:39:54,960 --> 00:39:58,000
at the same time the log of

958
00:39:58,000 --> 00:40:01,119
and alarm data of the whole network

959
00:40:01,119 --> 00:40:02,320
equipment

960
00:40:02,320 --> 00:40:04,800
are collected to realize the most

961
00:40:04,800 --> 00:40:05,839
fine-grained

962
00:40:05,839 --> 00:40:09,280
environment of the network

963
00:40:09,280 --> 00:40:13,040
and then to locate the root cause of the

964
00:40:13,040 --> 00:40:13,680
problem

965
00:40:13,680 --> 00:40:17,119
and repair the network in time but when

966
00:40:17,119 --> 00:40:18,400
the network delay

967
00:40:18,400 --> 00:40:21,359
exists warning value but is lower than

968
00:40:21,359 --> 00:40:21,680
the

969
00:40:21,680 --> 00:40:24,560
alert volume passive environment samples

970
00:40:24,560 --> 00:40:25,839
60 percent

971
00:40:25,839 --> 00:40:28,640
of business data and the transmission

972
00:40:28,640 --> 00:40:29,280
message

973
00:40:29,280 --> 00:40:32,400
frequency of the active environment

974
00:40:32,400 --> 00:40:35,119
is adjusted to the median value and the

975
00:40:35,119 --> 00:40:36,839
running stage stage

976
00:40:36,839 --> 00:40:40,240
of some key devices in the network is

977
00:40:40,240 --> 00:40:42,880
collectives

978
00:40:42,880 --> 00:40:45,680
and when the network delay is less than

979
00:40:45,680 --> 00:40:47,440
warning volume passive environment

980
00:40:47,440 --> 00:40:50,800
data is sampled at 20 percent

981
00:40:50,800 --> 00:40:52,960
and the active environment message

982
00:40:52,960 --> 00:40:54,560
frequency is adjusted

983
00:40:54,560 --> 00:40:57,280
to the lower lowest and the network

984
00:40:57,280 --> 00:40:57,920
equipment

985
00:40:57,920 --> 00:41:00,160
running stage of keynotes can be

986
00:41:00,160 --> 00:41:01,119
collected

987
00:41:01,119 --> 00:41:04,640
as needed so this this steps

988
00:41:04,640 --> 00:41:08,000
are all pre

989
00:41:08,000 --> 00:41:11,280
predefined and

990
00:41:11,280 --> 00:41:14,319
we will adopt different

991
00:41:14,319 --> 00:41:17,839
strat strategies in different situations

992
00:41:17,839 --> 00:41:21,359
and next slide piece

993
00:41:23,440 --> 00:41:25,440
so after defining the measurement

994
00:41:25,440 --> 00:41:27,040
strategies at different

995
00:41:27,040 --> 00:41:30,000
thresholds the following steps are

996
00:41:30,000 --> 00:41:30,880
performed

997
00:41:30,880 --> 00:41:34,560
for each network environment instant

998
00:41:34,560 --> 00:41:35,760
component

999
00:41:35,760 --> 00:41:38,000
uh

1000
00:41:39,359 --> 00:41:41,280
sorry to interrupt we have to ask you

1001
00:41:41,280 --> 00:41:45,119
also to finish in one minute now

1002
00:41:45,119 --> 00:41:49,359
okay thank you and this is the sla

1003
00:41:49,359 --> 00:41:50,800
performance

1004
00:41:50,800 --> 00:41:54,400
with the environment with the nmi

1005
00:41:54,400 --> 00:41:57,680
uh concrete times and

1006
00:41:57,680 --> 00:41:59,919
it's

1007
00:42:00,960 --> 00:42:04,480
and the next slide please

1008
00:42:08,319 --> 00:42:11,599
so next steps we will discover

1009
00:42:11,599 --> 00:42:14,800
more concrete examples of the network

1010
00:42:14,800 --> 00:42:17,440
management intent and we want to

1011
00:42:17,440 --> 00:42:18,160
incorporate

1012
00:42:18,160 --> 00:42:22,240
this case into the ibm use case

1013
00:42:22,240 --> 00:42:25,359
and uh looking forward to

1014
00:42:25,359 --> 00:42:29,680
your components suggestions thank you

1015
00:42:29,680 --> 00:42:32,000
as for the other presentation on the uh

1016
00:42:32,000 --> 00:42:33,839
research group documents we will ask you

1017
00:42:33,839 --> 00:42:34,800
to handle

1018
00:42:34,800 --> 00:42:37,280
any comments or questions on the mailing

1019
00:42:37,280 --> 00:42:38,000
list or

1020
00:42:38,000 --> 00:42:40,960
with the authors please so we will

1021
00:42:40,960 --> 00:42:42,720
switch now to the

1022
00:42:42,720 --> 00:42:45,200
technical talks on intern based

1023
00:42:45,200 --> 00:42:46,480
networking

1024
00:42:46,480 --> 00:42:49,599
and our first speaker will be kazuki

1025
00:42:49,599 --> 00:42:52,319
tanabe from

1026
00:42:56,839 --> 00:42:59,839
nec

1027
00:43:06,480 --> 00:43:10,160
yes we can hear you you just

1028
00:43:11,280 --> 00:43:15,359
check the slides quickly

1029
00:43:24,839 --> 00:43:27,839
okay

1030
00:43:30,720 --> 00:43:34,319
okay yes can you go this is one

1031
00:43:39,200 --> 00:43:43,040
okay hello everyone i'm kazuki tanabe

1032
00:43:43,040 --> 00:43:45,280
from nec corporation and thank you

1033
00:43:45,280 --> 00:43:47,839
lauren and jerome for inviting me to the

1034
00:43:47,839 --> 00:43:49,359
nmrs meeting

1035
00:43:49,359 --> 00:43:52,640
i'm very glad to present our work here

1036
00:43:52,640 --> 00:43:55,359
today i'll talk about our work published

1037
00:43:55,359 --> 00:43:57,680
in cnsm 2020

1038
00:43:57,680 --> 00:44:00,640
titled automated performance evaluation

1039
00:44:00,640 --> 00:44:03,920
of intent-based virtual network systems

1040
00:44:03,920 --> 00:44:09,440
next please

1041
00:44:09,440 --> 00:44:12,079
next please

1042
00:44:12,480 --> 00:44:14,960
first i'll explain the background and

1043
00:44:14,960 --> 00:44:16,960
purpose of this study

1044
00:44:16,960 --> 00:44:20,640
next please recently the growth in

1045
00:44:20,640 --> 00:44:22,640
virtualization technologies

1046
00:44:22,640 --> 00:44:25,359
enables easy and rapid deployment of

1047
00:44:25,359 --> 00:44:28,079
various scales of infrastructures

1048
00:44:28,079 --> 00:44:30,640
and then automation technologies are

1049
00:44:30,640 --> 00:44:31,760
highly demanded

1050
00:44:31,760 --> 00:44:34,720
in the field of ict system integration

1051
00:44:34,720 --> 00:44:35,599
to speed up

1052
00:44:35,599 --> 00:44:38,960
each process and reduce engineers burden

1053
00:44:38,960 --> 00:44:40,880
there have been several studies

1054
00:44:40,880 --> 00:44:42,240
including our work

1055
00:44:42,240 --> 00:44:44,880
targeted at requirement definition to

1056
00:44:44,880 --> 00:44:46,560
deployment phases

1057
00:44:46,560 --> 00:44:49,520
but the number of studies for testing

1058
00:44:49,520 --> 00:44:51,680
evaluation phase is limited

1059
00:44:51,680 --> 00:44:53,680
especially for networking level

1060
00:44:53,680 --> 00:44:55,040
evaluation

1061
00:44:55,040 --> 00:44:57,359
meanwhile as all of you may know

1062
00:44:57,359 --> 00:44:59,760
intent-based networking ibn

1063
00:44:59,760 --> 00:45:02,720
is a concept proposed by cisco in which

1064
00:45:02,720 --> 00:45:04,319
the network system is

1065
00:45:04,319 --> 00:45:07,760
managed based on user's abstract intents

1066
00:45:07,760 --> 00:45:10,800
in this study we target the automation

1067
00:45:10,800 --> 00:45:12,000
of testing phase

1068
00:45:12,000 --> 00:45:15,280
by following the concept of ibn

1069
00:45:15,280 --> 00:45:18,319
next please

1070
00:45:18,319 --> 00:45:20,960
before introducing today's topic let me

1071
00:45:20,960 --> 00:45:23,200
introduce ongoing project of our

1072
00:45:23,200 --> 00:45:24,480
research group

1073
00:45:24,480 --> 00:45:27,599
in nec we have proposed and developed

1074
00:45:27,599 --> 00:45:30,640
weaver which is an ai empowered network

1075
00:45:30,640 --> 00:45:32,160
system designer

1076
00:45:32,160 --> 00:45:35,119
weaver accepts an abstract intent as an

1077
00:45:35,119 --> 00:45:35,920
input

1078
00:45:35,920 --> 00:45:38,640
and recursively refines the abstract

1079
00:45:38,640 --> 00:45:40,079
part of the intent

1080
00:45:40,079 --> 00:45:42,240
and generates huge number of system

1081
00:45:42,240 --> 00:45:44,000
design candidates

1082
00:45:44,000 --> 00:45:48,319
we will accept an abstract intent

1083
00:45:48,560 --> 00:45:51,599
then graph ai trained by reinforcement

1084
00:45:51,599 --> 00:45:52,240
learning

1085
00:45:52,240 --> 00:45:54,720
and evaluates each candidate and chooses

1086
00:45:54,720 --> 00:45:56,720
the most appropriate candidates

1087
00:45:56,720 --> 00:45:58,880
as an output system topology and

1088
00:45:58,880 --> 00:46:00,640
configuration

1089
00:46:00,640 --> 00:46:03,119
for more details of weaver and please

1090
00:46:03,119 --> 00:46:05,040
refer to the following paper

1091
00:46:05,040 --> 00:46:09,680
in proceedings of i3 globecom 2019

1092
00:46:09,680 --> 00:46:12,000
today's topic our automation

1093
00:46:12,000 --> 00:46:14,640
technologies for performance evaluation

1094
00:46:14,640 --> 00:46:16,880
is partially related to our river

1095
00:46:16,880 --> 00:46:19,040
architecture

1096
00:46:19,040 --> 00:46:21,759
next please

1097
00:46:23,599 --> 00:46:26,960
okay let's go back to today's topic

1098
00:46:26,960 --> 00:46:29,680
as i explained now weaver defines

1099
00:46:29,680 --> 00:46:31,520
concrete system design

1100
00:46:31,520 --> 00:46:34,079
from abstract requirements for design

1101
00:46:34,079 --> 00:46:36,319
phase and deployment phase in

1102
00:46:36,319 --> 00:46:40,079
system integration for ibm based systems

1103
00:46:40,079 --> 00:46:42,400
since system requirements are composed

1104
00:46:42,400 --> 00:46:44,800
of abstract users intents

1105
00:46:44,800 --> 00:46:47,280
there are multiple methods to realize

1106
00:46:47,280 --> 00:46:48,720
the required functions

1107
00:46:48,720 --> 00:46:50,640
such as virtual or physical

1108
00:46:50,640 --> 00:46:51,839
infrastructure

1109
00:46:51,839 --> 00:46:54,640
native or middleware based applications

1110
00:46:54,640 --> 00:46:55,200
so

1111
00:46:55,200 --> 00:46:57,920
multiple candidates of system design can

1112
00:46:57,920 --> 00:46:59,599
be generated

1113
00:46:59,599 --> 00:47:02,400
next pleats

1114
00:47:04,960 --> 00:47:07,440
after these system designs are deployed

1115
00:47:07,440 --> 00:47:10,079
the satisfaction of system requirements

1116
00:47:10,079 --> 00:47:12,640
and is determined in testing phase in

1117
00:47:12,640 --> 00:47:13,520
this phase

1118
00:47:13,520 --> 00:47:16,160
engineers genera generally develop

1119
00:47:16,160 --> 00:47:17,760
evaluation programs

1120
00:47:17,760 --> 00:47:19,839
to evaluate the functionality and

1121
00:47:19,839 --> 00:47:22,480
performance of the deployed network

1122
00:47:22,480 --> 00:47:25,280
this evaluation program depends on each

1123
00:47:25,280 --> 00:47:26,400
system design

1124
00:47:26,400 --> 00:47:28,800
because available packages and commands

1125
00:47:28,800 --> 00:47:29,520
are different

1126
00:47:29,520 --> 00:47:32,559
for each os and syntax parameters of

1127
00:47:32,559 --> 00:47:33,280
scripts

1128
00:47:33,280 --> 00:47:35,040
differs according to the network

1129
00:47:35,040 --> 00:47:36,319
configuration

1130
00:47:36,319 --> 00:47:39,599
so an evaluation program developed for

1131
00:47:39,599 --> 00:47:40,720
system design

1132
00:47:40,720 --> 00:47:42,880
cannot be applied to another system

1133
00:47:42,880 --> 00:47:45,280
design which puts a heavy burden

1134
00:47:45,280 --> 00:47:52,559
for engineers next please

1135
00:47:52,559 --> 00:47:55,839
therefore our goal is to automate such

1136
00:47:55,839 --> 00:47:58,559
network level testing phase of si

1137
00:47:58,559 --> 00:48:02,000
especially for ibm based systems today

1138
00:48:02,000 --> 00:48:04,240
we propose an automated generation

1139
00:48:04,240 --> 00:48:06,160
method of

1140
00:48:06,160 --> 00:48:09,280
evaluation program our method accepts a

1141
00:48:09,280 --> 00:48:09,760
set

1142
00:48:09,760 --> 00:48:12,400
of system requirements and system design

1143
00:48:12,400 --> 00:48:13,280
derived from

1144
00:48:13,280 --> 00:48:16,079
requirements and generates a program

1145
00:48:16,079 --> 00:48:18,319
compatible for the system design

1146
00:48:18,319 --> 00:48:21,119
despite the difference of os or network

1147
00:48:21,119 --> 00:48:22,400
configuration

1148
00:48:22,400 --> 00:48:24,800
by introducing our method engineer's

1149
00:48:24,800 --> 00:48:27,440
burden will be drastically reduced and

1150
00:48:27,440 --> 00:48:30,400
ibn-based si will be dramatically

1151
00:48:30,400 --> 00:48:32,400
accelerated

1152
00:48:32,400 --> 00:48:35,839
next please

1153
00:48:35,920 --> 00:48:39,040
okay second i'll explain the detail of

1154
00:48:39,040 --> 00:48:40,880
our proposed method

1155
00:48:40,880 --> 00:48:43,599
next please

1156
00:48:44,319 --> 00:48:47,359
first let us explain the model settings

1157
00:48:47,359 --> 00:48:50,240
in this study we model both a system

1158
00:48:50,240 --> 00:48:50,800
design

1159
00:48:50,800 --> 00:48:53,280
and system requirements as directed

1160
00:48:53,280 --> 00:48:54,000
graphs

1161
00:48:54,000 --> 00:48:57,119
composed of the set of nodes and edges

1162
00:48:57,119 --> 00:48:59,520
a system design is a concrete network

1163
00:48:59,520 --> 00:49:00,640
configuration

1164
00:49:00,640 --> 00:49:03,280
and system requirements are abstract

1165
00:49:03,280 --> 00:49:04,160
expression

1166
00:49:04,160 --> 00:49:07,599
of the system design evaluation units

1167
00:49:07,599 --> 00:49:10,400
which are related to user's intents are

1168
00:49:10,400 --> 00:49:11,280
expressed as

1169
00:49:11,280 --> 00:49:14,160
abstract nodes or edges system

1170
00:49:14,160 --> 00:49:15,359
components such as

1171
00:49:15,359 --> 00:49:18,640
virtual machine os and applications are

1172
00:49:18,640 --> 00:49:19,599
expressed as

1173
00:49:19,599 --> 00:49:22,079
nodes while the relationship between

1174
00:49:22,079 --> 00:49:22,960
nodes are

1175
00:49:22,960 --> 00:49:26,319
expressed as directed edges several

1176
00:49:26,319 --> 00:49:27,119
nodes have

1177
00:49:27,119 --> 00:49:29,680
some configuration parameters are their

1178
00:49:29,680 --> 00:49:30,960
own properties

1179
00:49:30,960 --> 00:49:35,280
and each node and edge has its own type

1180
00:49:35,280 --> 00:49:38,000
next please

1181
00:49:41,280 --> 00:49:43,839
this is the outline of the proposed

1182
00:49:43,839 --> 00:49:44,880
method

1183
00:49:44,880 --> 00:49:47,359
our method accepts a set of system

1184
00:49:47,359 --> 00:49:48,240
requirements

1185
00:49:48,240 --> 00:49:51,359
and system design to generate a correct

1186
00:49:51,359 --> 00:49:52,960
evaluation program

1187
00:49:52,960 --> 00:49:55,280
parameter search on the system design

1188
00:49:55,280 --> 00:49:58,000
graph runs for each evaluation unit

1189
00:49:58,000 --> 00:50:01,200
by referring to evaluation templates

1190
00:50:01,200 --> 00:50:03,680
evaluation templates define abstract

1191
00:50:03,680 --> 00:50:05,440
commands and search methods for

1192
00:50:05,440 --> 00:50:07,760
parameters of these commands

1193
00:50:07,760 --> 00:50:10,839
acquiring parameters acquiring

1194
00:50:10,839 --> 00:50:12,319
parameters

1195
00:50:12,319 --> 00:50:15,040
abstract commands are translated into

1196
00:50:15,040 --> 00:50:16,079
executable

1197
00:50:16,079 --> 00:50:18,640
evaluation scripts by referring to

1198
00:50:18,640 --> 00:50:20,000
command templates

1199
00:50:20,000 --> 00:50:23,119
and substituting those parameters into

1200
00:50:23,119 --> 00:50:26,720
the script defined on the template

1201
00:50:26,720 --> 00:50:29,439
next please

1202
00:50:31,440 --> 00:50:33,839
next we'll explain the detail of

1203
00:50:33,839 --> 00:50:35,680
parameter search step

1204
00:50:35,680 --> 00:50:38,079
in this step the method refers to the

1205
00:50:38,079 --> 00:50:39,680
evaluation template

1206
00:50:39,680 --> 00:50:42,720
corresponding to the evaluation unit an

1207
00:50:42,720 --> 00:50:44,640
evaluation templates define

1208
00:50:44,640 --> 00:50:47,440
an abstract command and such method of

1209
00:50:47,440 --> 00:50:49,200
its syntax parameters

1210
00:50:49,200 --> 00:50:52,559
for each evaluation unit for example

1211
00:50:52,559 --> 00:50:55,599
an evaluation unit boundaries up to up

1212
00:50:55,599 --> 00:50:58,319
means a minimum requirement of

1213
00:50:58,319 --> 00:50:59,839
communication boundaries

1214
00:50:59,839 --> 00:51:03,119
between two applications this evaluation

1215
00:51:03,119 --> 00:51:04,640
template of this

1216
00:51:04,640 --> 00:51:07,359
evaluation unit contains a command which

1217
00:51:07,359 --> 00:51:08,000
contains

1218
00:51:08,000 --> 00:51:11,040
five parameters like agents

1219
00:51:11,040 --> 00:51:14,240
os types and destination idp address

1220
00:51:14,240 --> 00:51:17,440
and one constraint for bandwidth after

1221
00:51:17,440 --> 00:51:19,200
the command is obtained

1222
00:51:19,200 --> 00:51:21,599
and the parameter searches in the system

1223
00:51:21,599 --> 00:51:22,800
design graph

1224
00:51:22,800 --> 00:51:25,440
are conducted by following search method

1225
00:51:25,440 --> 00:51:26,960
for each parameter

1226
00:51:26,960 --> 00:51:29,839
and acquired parameters are substituted

1227
00:51:29,839 --> 00:51:32,079
to the syntax

1228
00:51:32,079 --> 00:51:37,839
next please

1229
00:51:38,960 --> 00:51:41,280
okay after the parameter search step

1230
00:51:41,280 --> 00:51:42,079
finished

1231
00:51:42,079 --> 00:51:44,720
the abstract commands with parameters

1232
00:51:44,720 --> 00:51:45,760
are translated

1233
00:51:45,760 --> 00:51:48,880
into the conflict evaluation scripts by

1234
00:51:48,880 --> 00:51:51,680
referring to command templates each

1235
00:51:51,680 --> 00:51:52,880
command template

1236
00:51:52,880 --> 00:51:55,359
defines mappings from an abstract

1237
00:51:55,359 --> 00:51:55,920
command

1238
00:51:55,920 --> 00:51:59,440
to order tuples of executable scripts

1239
00:51:59,440 --> 00:52:02,960
and their agents each tuple of a script

1240
00:52:02,960 --> 00:52:05,760
and an agent has conditional branches

1241
00:52:05,760 --> 00:52:08,160
based on the input parameters

1242
00:52:08,160 --> 00:52:11,599
for example if the type of client os is

1243
00:52:11,599 --> 00:52:12,720
ubuntu

1244
00:52:12,720 --> 00:52:15,119
these red scripts are chosen and

1245
00:52:15,119 --> 00:52:16,640
acquired parameters

1246
00:52:16,640 --> 00:52:20,240
are substituted to the syntax finally

1247
00:52:20,240 --> 00:52:23,040
evaluation program is generated as a

1248
00:52:23,040 --> 00:52:23,520
list

1249
00:52:23,520 --> 00:52:26,160
of evaluation scripts for all evaluation

1250
00:52:26,160 --> 00:52:27,280
units

1251
00:52:27,280 --> 00:52:30,160
each script is sequentially executed by

1252
00:52:30,160 --> 00:52:31,200
the agent

1253
00:52:31,200 --> 00:52:33,280
and some evaluation scripts for

1254
00:52:33,280 --> 00:52:34,720
performance measurement

1255
00:52:34,720 --> 00:52:37,040
compare the results from predefined

1256
00:52:37,040 --> 00:52:39,280
constraints

1257
00:52:39,280 --> 00:52:41,920
next please

1258
00:52:43,040 --> 00:52:45,280
according to these two steps an

1259
00:52:45,280 --> 00:52:46,720
evaluation program

1260
00:52:46,720 --> 00:52:51,598
is automatically generated by our method

1261
00:52:51,680 --> 00:52:54,399
next please

1262
00:52:55,760 --> 00:52:58,720
third i'll explain the details and

1263
00:52:58,720 --> 00:53:01,359
results of evaluation experiment

1264
00:53:01,359 --> 00:53:06,160
using our method next please

1265
00:53:07,119 --> 00:53:09,760
to show the effect of our method we

1266
00:53:09,760 --> 00:53:10,480
conducted

1267
00:53:10,480 --> 00:53:12,960
experiments to verify evaluation

1268
00:53:12,960 --> 00:53:13,680
programs

1269
00:53:13,680 --> 00:53:16,720
generated by proposed method in our

1270
00:53:16,720 --> 00:53:17,440
prototype

1271
00:53:17,440 --> 00:53:21,040
implementation of the method evaluation

1272
00:53:21,040 --> 00:53:23,520
programs are generated as workflow

1273
00:53:23,520 --> 00:53:25,760
of evaluation scripts which can be

1274
00:53:25,760 --> 00:53:26,880
executed by

1275
00:53:26,880 --> 00:53:30,000
ansible we deploy the system design on

1276
00:53:30,000 --> 00:53:30,240
an

1277
00:53:30,240 --> 00:53:33,599
openstack virtual environment next

1278
00:53:33,599 --> 00:53:35,920
please

1279
00:53:37,200 --> 00:53:39,760
first and the left hand side of this

1280
00:53:39,760 --> 00:53:40,400
figure

1281
00:53:40,400 --> 00:53:42,319
is the system requirements for

1282
00:53:42,319 --> 00:53:44,559
connection between applications

1283
00:53:44,559 --> 00:53:47,599
in this example an http connection

1284
00:53:47,599 --> 00:53:51,200
from f1 to f2 and minimal bandwidths

1285
00:53:51,200 --> 00:53:54,559
of 500 megabps are required

1286
00:53:54,559 --> 00:53:56,559
and the right hand side is the system

1287
00:53:56,559 --> 00:53:59,359
design derived from the requirements

1288
00:53:59,359 --> 00:54:01,440
in this system both the client

1289
00:54:01,440 --> 00:54:03,119
application app1

1290
00:54:03,119 --> 00:54:06,319
and the server application app 2 run on

1291
00:54:06,319 --> 00:54:08,400
different ubuntu os nodes

1292
00:54:08,400 --> 00:54:11,599
and ngx is used as an example

1293
00:54:11,599 --> 00:54:15,520
of app2 each ugunto node is hosted on

1294
00:54:15,520 --> 00:54:16,880
different vm node

1295
00:54:16,880 --> 00:54:19,359
and provisioned by different ansible

1296
00:54:19,359 --> 00:54:20,720
instance

1297
00:54:20,720 --> 00:54:23,359
these two vms belong to the same virtual

1298
00:54:23,359 --> 00:54:24,880
subnet vl

1299
00:54:24,880 --> 00:54:28,240
and v-router node connects between vl

1300
00:54:28,240 --> 00:54:31,359
and the internet in this setting

1301
00:54:31,359 --> 00:54:34,240
we generated an executed evaluation

1302
00:54:34,240 --> 00:54:34,880
scripts

1303
00:54:34,880 --> 00:54:38,000
for two evaluation units http

1304
00:54:38,000 --> 00:54:40,799
app job and bandwidth app to app by

1305
00:54:40,799 --> 00:54:41,839
using call

1306
00:54:41,839 --> 00:54:47,119
and hyper packages next please

1307
00:54:48,240 --> 00:54:50,799
here's the execution results of the

1308
00:54:50,799 --> 00:54:52,319
environment one

1309
00:54:52,319 --> 00:54:54,559
as you can see in the table both

1310
00:54:54,559 --> 00:54:56,960
evaluation scripts have the correct

1311
00:54:56,960 --> 00:54:59,839
program output and are determined as

1312
00:54:59,839 --> 00:55:00,720
paths

1313
00:55:00,720 --> 00:55:03,359
like this the satisfaction of system

1314
00:55:03,359 --> 00:55:04,319
requirements

1315
00:55:04,319 --> 00:55:06,559
can be automatically determined by

1316
00:55:06,559 --> 00:55:08,000
evaluation program

1317
00:55:08,000 --> 00:55:11,280
generated by our method

1318
00:55:11,280 --> 00:55:13,920
next please

1319
00:55:15,839 --> 00:55:18,799
second we added two vms to the

1320
00:55:18,799 --> 00:55:19,920
evaluation

1321
00:55:19,920 --> 00:55:22,480
environment 1 and created some

1322
00:55:22,480 --> 00:55:23,680
background traffic

1323
00:55:23,680 --> 00:55:27,280
by scp file transfers from these new vms

1324
00:55:27,280 --> 00:55:29,040
to ubuntu 2 node

1325
00:55:29,040 --> 00:55:31,839
we executed the same evaluation program

1326
00:55:31,839 --> 00:55:32,319
in this

1327
00:55:32,319 --> 00:55:36,480
environment next please

1328
00:55:38,480 --> 00:55:41,599
here's the evaluation results as you can

1329
00:55:41,599 --> 00:55:41,920
see

1330
00:55:41,920 --> 00:55:44,160
in the table and the results for

1331
00:55:44,160 --> 00:55:45,440
bandwidth update up

1332
00:55:45,440 --> 00:55:48,000
turn to fail due to the shortage of

1333
00:55:48,000 --> 00:55:49,760
bandwidth performance

1334
00:55:49,760 --> 00:55:52,240
this throughput reduction is because of

1335
00:55:52,240 --> 00:55:52,799
the

1336
00:55:52,799 --> 00:55:54,799
background traffic generated by

1337
00:55:54,799 --> 00:55:56,400
additional vms

1338
00:55:56,400 --> 00:55:58,960
and performance reduction of ubuntu 2

1339
00:55:58,960 --> 00:55:59,440
node

1340
00:55:59,440 --> 00:56:02,319
by processing file transfers this

1341
00:56:02,319 --> 00:56:03,359
results show

1342
00:56:03,359 --> 00:56:05,599
that the evaluation results can be

1343
00:56:05,599 --> 00:56:06,720
determined per

1344
00:56:06,720 --> 00:56:10,240
evaluation unit related to user's intent

1345
00:56:10,240 --> 00:56:13,200
furthermore the results help easy

1346
00:56:13,200 --> 00:56:15,599
detection for system components

1347
00:56:15,599 --> 00:56:18,000
which need improvement even though the

1348
00:56:18,000 --> 00:56:21,040
performance is not enough

1349
00:56:21,040 --> 00:56:23,759
next please

1350
00:56:24,319 --> 00:56:27,440
finally i conclude this talk

1351
00:56:27,440 --> 00:56:30,559
next please okay in this study

1352
00:56:30,559 --> 00:56:32,720
we proposed a graph search based

1353
00:56:32,720 --> 00:56:35,359
automation method to generate evaluation

1354
00:56:35,359 --> 00:56:36,160
program

1355
00:56:36,160 --> 00:56:39,760
in ibm based system integration

1356
00:56:39,760 --> 00:56:42,000
we modeled system requirements and

1357
00:56:42,000 --> 00:56:42,960
designed

1358
00:56:42,960 --> 00:56:45,680
as graph structures and the parameter

1359
00:56:45,680 --> 00:56:47,520
search algorithms

1360
00:56:47,520 --> 00:56:50,160
run in a system design graph to acquire

1361
00:56:50,160 --> 00:56:52,400
parameters of scripts

1362
00:56:52,400 --> 00:56:54,559
for future works we are planning to

1363
00:56:54,559 --> 00:56:57,200
expand our parameter search algorithm

1364
00:56:57,200 --> 00:56:59,599
so that parameter can be acquired in

1365
00:56:59,599 --> 00:57:02,880
much more complex topology

1366
00:57:02,880 --> 00:57:05,520
next please

1367
00:57:06,880 --> 00:57:13,839
that's all thank you for listening

1368
00:57:24,839 --> 00:57:26,160
so

1369
00:57:26,160 --> 00:57:28,000
hello can you hear me yes we have time

1370
00:57:28,000 --> 00:57:30,400
for one

1371
00:57:30,640 --> 00:57:32,400
uh i was saying thank you kazuki for the

1372
00:57:32,400 --> 00:57:33,839
presentation i think we have time for

1373
00:57:33,839 --> 00:57:35,680
one question sorry i have some issue

1374
00:57:35,680 --> 00:57:36,400
with uh

1375
00:57:36,400 --> 00:57:41,839
the mythical setup here apology for that

1376
00:57:55,920 --> 00:57:57,920
okay if there are no questions from the

1377
00:57:57,920 --> 00:57:59,119
room um

1378
00:57:59,119 --> 00:58:00,880
katsuki thank you for for presenting

1379
00:58:00,880 --> 00:58:04,400
your work uh from cnsm to to dnamergy

1380
00:58:04,400 --> 00:58:06,319
um we will surely come back to you i

1381
00:58:06,319 --> 00:58:08,079
mean um i have

1382
00:58:08,079 --> 00:58:10,319
in fact more than one question uh so i

1383
00:58:10,319 --> 00:58:11,760
will come back to you uh

1384
00:58:11,760 --> 00:58:14,640
offline because i think some of the the

1385
00:58:14,640 --> 00:58:16,640
aspect that you are using as techniques

1386
00:58:16,640 --> 00:58:18,400
uh could be very useful uh in the

1387
00:58:18,400 --> 00:58:20,720
context of internet-based networking and

1388
00:58:20,720 --> 00:58:23,040
i would like to hear more from you so i

1389
00:58:23,040 --> 00:58:24,480
i will follow up

1390
00:58:24,480 --> 00:58:27,359
by email thank you

1391
00:58:30,960 --> 00:58:33,599
okay so we switched to our second talk

1392
00:58:33,599 --> 00:58:34,799
in the

1393
00:58:34,799 --> 00:58:36,799
intern-based networking topic which will

1394
00:58:36,799 --> 00:58:38,160
be with shia

1395
00:58:38,160 --> 00:58:41,520
on sdn heading off

1396
00:58:48,799 --> 00:58:52,240
yes we can hear you with your ears

1397
00:58:52,240 --> 00:58:55,839
hello everyone can you hear me

1398
00:59:02,640 --> 00:59:05,760
um okay um this is shayan and mai i'm a

1399
00:59:05,760 --> 00:59:08,640
phd candidate at lancaster university

1400
00:59:08,640 --> 00:59:10,640
and in this research i would like to

1401
00:59:10,640 --> 00:59:11,839
discuss how

1402
00:59:11,839 --> 00:59:14,079
intents can be used as a communication

1403
00:59:14,079 --> 00:59:15,119
mechanism

1404
00:59:15,119 --> 00:59:17,280
between service consumers and service

1405
00:59:17,280 --> 00:59:18,160
providers

1406
00:59:18,160 --> 00:59:20,799
next please

1407
00:59:24,000 --> 00:59:27,200
so sdn is a networking paradigm that

1408
00:59:27,200 --> 00:59:29,200
overcomes the limitations of traditional

1409
00:59:29,200 --> 00:59:30,160
networks

1410
00:59:30,160 --> 00:59:32,559
but the success of sdn mainly depends on

1411
00:59:32,559 --> 00:59:33,760
the ability of

1412
00:59:33,760 --> 00:59:37,119
scn users and developers to

1413
00:59:37,119 --> 00:59:39,599
leverage these capabilities they usually

1414
00:59:39,599 --> 00:59:42,640
use the northbound interface or nbi for

1415
00:59:42,640 --> 00:59:43,200
short

1416
00:59:43,200 --> 00:59:45,359
to communicate with the network

1417
00:59:45,359 --> 00:59:47,040
therefore the nbi

1418
00:59:47,040 --> 00:59:49,599
is key enabler for the realization of

1419
00:59:49,599 --> 00:59:51,680
the ultimate sdn promise

1420
00:59:51,680 --> 00:59:53,920
now in our research we have decided to

1421
00:59:53,920 --> 00:59:56,640
focus on intent based mbis because

1422
00:59:56,640 --> 00:59:58,079
they are gaining a lot of attention

1423
00:59:58,079 --> 01:00:00,960
today both in industry and academia

1424
01:00:00,960 --> 01:00:03,599
next please

1425
01:00:05,680 --> 01:00:07,599
so here's the outline of my talk today

1426
01:00:07,599 --> 01:00:09,040
uh first i will discuss the main

1427
01:00:09,040 --> 01:00:10,640
challenges with the existing intent

1428
01:00:10,640 --> 01:00:11,599
based solutions

1429
01:00:11,599 --> 01:00:13,119
and the limitations with the related

1430
01:00:13,119 --> 01:00:15,280
work and then i will propose our intent

1431
01:00:15,280 --> 01:00:17,440
based framework and expressions

1432
01:00:17,440 --> 01:00:19,760
later i will discuss our preliminary

1433
01:00:19,760 --> 01:00:21,839
preliminary results uh in the context of

1434
01:00:21,839 --> 01:00:23,440
a cloud cdn use case

1435
01:00:23,440 --> 01:00:25,520
and intent refinement finally i will

1436
01:00:25,520 --> 01:00:27,760
conclude and discuss our future work

1437
01:00:27,760 --> 01:00:30,400
next please

1438
01:00:31,119 --> 01:00:33,119
uh before i start i think it's important

1439
01:00:33,119 --> 01:00:34,720
just to differentiate between

1440
01:00:34,720 --> 01:00:38,480
uh intents and uh policies as we see it

1441
01:00:38,480 --> 01:00:41,359
so policies are prescriptive uh rules

1442
01:00:41,359 --> 01:00:43,280
that determine what kind of actions to

1443
01:00:43,280 --> 01:00:45,760
take under different circumstances

1444
01:00:45,760 --> 01:00:47,359
and they're usually articulated by

1445
01:00:47,359 --> 01:00:50,000
system experts like network admins

1446
01:00:50,000 --> 01:00:52,000
whereas intents are declarative

1447
01:00:52,000 --> 01:00:54,400
expressions that allow users to express

1448
01:00:54,400 --> 01:00:54,960
the

1449
01:00:54,960 --> 01:00:57,920
desired outcome at a higher level so

1450
01:00:57,920 --> 01:01:00,079
they can also be used by non-technical

1451
01:01:00,079 --> 01:01:02,079
users as well

1452
01:01:02,079 --> 01:01:04,640
next piece

1453
01:01:06,799 --> 01:01:09,119
since the development of intent based

1454
01:01:09,119 --> 01:01:10,240
mbis today

1455
01:01:10,240 --> 01:01:12,559
remains in its infancy there are several

1456
01:01:12,559 --> 01:01:13,440
challenges

1457
01:01:13,440 --> 01:01:15,280
so the first challenge is that most of

1458
01:01:15,280 --> 01:01:17,280
the existing intent-based solutions are

1459
01:01:17,280 --> 01:01:18,960
designed for

1460
01:01:18,960 --> 01:01:21,520
network experts and therefore they

1461
01:01:21,520 --> 01:01:23,440
provide prescriptive

1462
01:01:23,440 --> 01:01:25,599
intent expressions rather than

1463
01:01:25,599 --> 01:01:26,880
declarative ones

1464
01:01:26,880 --> 01:01:29,040
and in our research we wanted to focus

1465
01:01:29,040 --> 01:01:30,240
on generic

1466
01:01:30,240 --> 01:01:32,160
uh service consumers who do not

1467
01:01:32,160 --> 01:01:34,319
necessarily acquire technical knowledge

1468
01:01:34,319 --> 01:01:36,720
therefore they need a generic

1469
01:01:36,720 --> 01:01:38,240
declarative expressions

1470
01:01:38,240 --> 01:01:40,640
rather than the existing prescriptive

1471
01:01:40,640 --> 01:01:41,920
ones

1472
01:01:41,920 --> 01:01:43,760
the second challenge is the translation

1473
01:01:43,760 --> 01:01:46,000
process uh between the declarative

1474
01:01:46,000 --> 01:01:47,520
intent expressions

1475
01:01:47,520 --> 01:01:50,160
and a form that is understood by the

1476
01:01:50,160 --> 01:01:52,720
underlying system but we think it's

1477
01:01:52,720 --> 01:01:54,640
important to have an intermediate level

1478
01:01:54,640 --> 01:01:56,240
of translation

1479
01:01:56,240 --> 01:01:59,039
where we break down or decompose these

1480
01:01:59,039 --> 01:02:00,960
declarative intents into a set of

1481
01:02:00,960 --> 01:02:03,520
abstract policies that are technology

1482
01:02:03,520 --> 01:02:04,960
agnostic

1483
01:02:04,960 --> 01:02:07,440
and the reason to do so is to provide of

1484
01:02:07,440 --> 01:02:10,480
course more flexibility and reusability

1485
01:02:10,480 --> 01:02:12,000
uh the third challenge is that we need

1486
01:02:12,000 --> 01:02:13,599
to have uh intent

1487
01:02:13,599 --> 01:02:15,280
uh solutions that are platform

1488
01:02:15,280 --> 01:02:17,599
independent and not tightly coupled to

1489
01:02:17,599 --> 01:02:19,359
specific sdn controllers

1490
01:02:19,359 --> 01:02:21,280
and they need to also be extensible

1491
01:02:21,280 --> 01:02:22,640
which allows creating

1492
01:02:22,640 --> 01:02:26,879
new intents next please

1493
01:02:28,400 --> 01:02:31,039
so um here are some of the limitations

1494
01:02:31,039 --> 01:02:33,359
with the existing related work so

1495
01:02:33,359 --> 01:02:35,680
most of the existing um intense

1496
01:02:35,680 --> 01:02:36,960
solutions are limited

1497
01:02:36,960 --> 01:02:38,640
uh they're ad hoc some of them are

1498
01:02:38,640 --> 01:02:40,160
vendor-specific

1499
01:02:40,160 --> 01:02:42,640
um and since most of these works mainly

1500
01:02:42,640 --> 01:02:44,240
focus on the networking and

1501
01:02:44,240 --> 01:02:47,520
nfv domains uh so the

1502
01:02:47,520 --> 01:02:49,359
intense expressions that they provide

1503
01:02:49,359 --> 01:02:51,599
are considered to be prescriptive

1504
01:02:51,599 --> 01:02:53,599
uh so in our case we need to have

1505
01:02:53,599 --> 01:02:55,920
generic and declarative uh intent

1506
01:02:55,920 --> 01:02:58,160
expressions that are beyond the network

1507
01:02:58,160 --> 01:03:00,720
uh domain uh moreover most of the

1508
01:03:00,720 --> 01:03:01,760
current works do not

1509
01:03:01,760 --> 01:03:04,319
really provide the means or the tools to

1510
01:03:04,319 --> 01:03:04,880
create

1511
01:03:04,880 --> 01:03:07,280
new intents and map them to lower level

1512
01:03:07,280 --> 01:03:08,400
policies

1513
01:03:08,400 --> 01:03:11,039
next please

1514
01:03:12,559 --> 01:03:14,640
so to address the aforementioned gap we

1515
01:03:14,640 --> 01:03:16,480
have proposed an intent-based mbi

1516
01:03:16,480 --> 01:03:18,400
framework and expressions

1517
01:03:18,400 --> 01:03:21,119
so our framework consists of three

1518
01:03:21,119 --> 01:03:21,680
layers

1519
01:03:21,680 --> 01:03:23,119
the first layer is the northbound

1520
01:03:23,119 --> 01:03:24,880
interface which connects the service

1521
01:03:24,880 --> 01:03:26,559
consumer and service provider

1522
01:03:26,559 --> 01:03:28,960
via their corresponding apis and it's

1523
01:03:28,960 --> 01:03:31,039
responsible of mapping these intents to

1524
01:03:31,039 --> 01:03:32,880
their equivalent policies

1525
01:03:32,880 --> 01:03:34,319
the second layer is the intent and

1526
01:03:34,319 --> 01:03:36,000
policy management layer which is

1527
01:03:36,000 --> 01:03:37,599
responsible of

1528
01:03:37,599 --> 01:03:39,920
calculating and updating the technical

1529
01:03:39,920 --> 01:03:41,920
requirements and operational parameters

1530
01:03:41,920 --> 01:03:42,559
of these

1531
01:03:42,559 --> 01:03:45,520
policies so it continuously monitors the

1532
01:03:45,520 --> 01:03:46,319
system

1533
01:03:46,319 --> 01:03:49,280
and monitors how far it is from

1534
01:03:49,280 --> 01:03:51,280
achieving the intent target

1535
01:03:51,280 --> 01:03:52,799
and updates these requirements

1536
01:03:52,799 --> 01:03:54,880
accordingly the third layer is the

1537
01:03:54,880 --> 01:03:56,480
service management layer which consists

1538
01:03:56,480 --> 01:03:58,319
of micro services that are managed by

1539
01:03:58,319 --> 01:03:59,920
the service orchestrator

1540
01:03:59,920 --> 01:04:03,119
which will translate these policies into

1541
01:04:03,119 --> 01:04:07,839
microservice api calls next please

1542
01:04:09,839 --> 01:04:12,880
so i'll discuss our proposed generic

1543
01:04:12,880 --> 01:04:16,079
declarative intent expression so

1544
01:04:16,079 --> 01:04:18,799
it's expressed in terms of service

1545
01:04:18,799 --> 01:04:19,760
resources

1546
01:04:19,760 --> 01:04:23,599
conjunction for readability and target

1547
01:04:23,599 --> 01:04:27,039
so this can be decomposed by the intent

1548
01:04:27,039 --> 01:04:28,880
developer or the service provider

1549
01:04:28,880 --> 01:04:31,039
into a set of prescriptive policies that

1550
01:04:31,039 --> 01:04:32,240
are connected using

1551
01:04:32,240 --> 01:04:35,680
logical operators like and and or

1552
01:04:35,680 --> 01:04:37,920
and each policy could be expressed in

1553
01:04:37,920 --> 01:04:40,559
terms of conditions actions constraints

1554
01:04:40,559 --> 01:04:42,559
and optionally priority of course we

1555
01:04:42,559 --> 01:04:44,480
need to maintain the mapping between

1556
01:04:44,480 --> 01:04:45,920
these intents and their corresponding

1557
01:04:45,920 --> 01:04:47,760
policies as you can see in the table

1558
01:04:47,760 --> 01:04:48,880
below

1559
01:04:48,880 --> 01:04:51,520
next please

1560
01:04:52,160 --> 01:04:55,200
so for demonstration purposes um uh i

1561
01:04:55,200 --> 01:04:56,880
will discuss our preliminary

1562
01:04:56,880 --> 01:04:58,880
uh preliminary results in the context of

1563
01:04:58,880 --> 01:05:00,160
a cloud cdn or

1564
01:05:00,160 --> 01:05:02,319
a content delivery network use case so

1565
01:05:02,319 --> 01:05:03,920
in this situation the

1566
01:05:03,920 --> 01:05:05,599
service consumer would be the content

1567
01:05:05,599 --> 01:05:07,119
provider who wants to cache their

1568
01:05:07,119 --> 01:05:08,640
content in a cdn

1569
01:05:08,640 --> 01:05:11,599
and the service provider would be the

1570
01:05:11,599 --> 01:05:12,880
cdn operator

1571
01:05:12,880 --> 01:05:16,240
uh who is managing the cdn so today

1572
01:05:16,240 --> 01:05:18,799
um cloud cdns do not really allow

1573
01:05:18,799 --> 01:05:20,799
content providers to express their high

1574
01:05:20,799 --> 01:05:21,760
level intents

1575
01:05:21,760 --> 01:05:24,079
so in our solution we would like to have

1576
01:05:24,079 --> 01:05:25,760
content providers expressing their

1577
01:05:25,760 --> 01:05:26,240
intent

1578
01:05:26,240 --> 01:05:28,160
so they can say something like hey i

1579
01:05:28,160 --> 01:05:30,079
want caching for content x

1580
01:05:30,079 --> 01:05:32,640
to handle 20 gigabytes per minute so in

1581
01:05:32,640 --> 01:05:34,960
this case the target in this

1582
01:05:34,960 --> 01:05:37,520
intent is to hit this specific workload

1583
01:05:37,520 --> 01:05:39,520
this has to be decomposed by the cdn

1584
01:05:39,520 --> 01:05:41,280
operator into a set of prescriptive

1585
01:05:41,280 --> 01:05:42,079
policies

1586
01:05:42,079 --> 01:05:43,839
however we also need to keep in mind

1587
01:05:43,839 --> 01:05:46,000
that these intent targets could be

1588
01:05:46,000 --> 01:05:48,559
underestimated overestimated or well

1589
01:05:48,559 --> 01:05:50,480
estimated and take the corresponding

1590
01:05:50,480 --> 01:05:51,680
actions

1591
01:05:51,680 --> 01:05:55,920
next please so in this figure here uh we

1592
01:05:55,920 --> 01:05:57,039
have shown how the

1593
01:05:57,039 --> 01:05:59,440
uh workload has been achieved throughout

1594
01:05:59,440 --> 01:06:00,559
the day

1595
01:06:00,559 --> 01:06:03,359
by varying the caches cluster size which

1596
01:06:03,359 --> 01:06:04,000
means adding

1597
01:06:04,000 --> 01:06:06,480
or removing caches uh according to the

1598
01:06:06,480 --> 01:06:07,119
demand

1599
01:06:07,119 --> 01:06:09,839
so the baseline is a traditional cloud

1600
01:06:09,839 --> 01:06:10,480
cdn

1601
01:06:10,480 --> 01:06:13,440
behavior that reactively scales the

1602
01:06:13,440 --> 01:06:14,319
cluster

1603
01:06:14,319 --> 01:06:16,079
and we have compared this against our

1604
01:06:16,079 --> 01:06:18,000
intense solution in two cases

1605
01:06:18,000 --> 01:06:20,000
the first case is an underestimated

1606
01:06:20,000 --> 01:06:21,359
intent workload

1607
01:06:21,359 --> 01:06:23,520
and the other one is a well estimated

1608
01:06:23,520 --> 01:06:24,400
intent

1609
01:06:24,400 --> 01:06:26,720
so in both intent cases we have achieved

1610
01:06:26,720 --> 01:06:28,480
better workload than the

1611
01:06:28,480 --> 01:06:30,559
the baseline uh but of course with a

1612
01:06:30,559 --> 01:06:32,160
well estimated intent we

1613
01:06:32,160 --> 01:06:34,960
can get even better uh results with the

1614
01:06:34,960 --> 01:06:36,240
workload

1615
01:06:36,240 --> 01:06:38,879
next please

1616
01:06:41,280 --> 01:06:43,119
so one of the most important features of

1617
01:06:43,119 --> 01:06:45,760
intents is their ability to honor

1618
01:06:45,760 --> 01:06:48,799
the intent target even under changing

1619
01:06:48,799 --> 01:06:50,319
circumstances

1620
01:06:50,319 --> 01:06:53,119
so intent refinement is key and by

1621
01:06:53,119 --> 01:06:54,640
refinement here we mean

1622
01:06:54,640 --> 01:06:57,440
the process of continuously updating the

1623
01:06:57,440 --> 01:06:59,200
technical requirements or operational

1624
01:06:59,200 --> 01:07:00,880
parameters of these intents

1625
01:07:00,880 --> 01:07:05,039
to meet um like the the requested target

1626
01:07:05,039 --> 01:07:07,839
so in in this case our goal was to

1627
01:07:07,839 --> 01:07:08,640
maximize

1628
01:07:08,640 --> 01:07:12,559
uh the workload so one way to do so

1629
01:07:12,559 --> 01:07:16,079
is by proactively scaling the cluster

1630
01:07:16,079 --> 01:07:18,160
so there are two approaches to take

1631
01:07:18,160 --> 01:07:20,319
either a conservative

1632
01:07:20,319 --> 01:07:23,440
or optimistic approach or a greedy

1633
01:07:23,440 --> 01:07:29,839
or pessimistic approach next please

1634
01:07:29,839 --> 01:07:33,119
yes uh so um in this figure uh we have

1635
01:07:33,119 --> 01:07:34,079
compared the

1636
01:07:34,079 --> 01:07:37,200
caches uh cluster resizing behavior

1637
01:07:37,200 --> 01:07:40,000
in these three scenarios so in a no

1638
01:07:40,000 --> 01:07:40,640
intent

1639
01:07:40,640 --> 01:07:43,200
scenario which is the baseline that does

1640
01:07:43,200 --> 01:07:44,720
reactive scaling

1641
01:07:44,720 --> 01:07:46,559
of the cluster and then we have compared

1642
01:07:46,559 --> 01:07:48,319
this against our refined

1643
01:07:48,319 --> 01:07:51,440
intents both greedy and conservative

1644
01:07:51,440 --> 01:07:55,520
of course this comes at additional cost

1645
01:07:55,520 --> 01:07:58,799
of running up time so this this has to

1646
01:07:58,799 --> 01:07:59,839
be tuned by

1647
01:07:59,839 --> 01:08:05,279
the uh cdn operator uh next please

1648
01:08:06,880 --> 01:08:09,599
so in this uh figure we have compared

1649
01:08:09,599 --> 01:08:10,000
the

1650
01:08:10,000 --> 01:08:13,359
workload in these three scenarios uh so

1651
01:08:13,359 --> 01:08:16,399
uh with the refined intents we were able

1652
01:08:16,399 --> 01:08:17,359
to achieve

1653
01:08:17,359 --> 01:08:20,399
more workload of course the greedy

1654
01:08:20,399 --> 01:08:23,600
approach was the best and then the uh

1655
01:08:23,600 --> 01:08:24,799
conservative one

1656
01:08:24,799 --> 01:08:27,120
and the last of course was the uh the

1657
01:08:27,120 --> 01:08:28,158
baseline which is

1658
01:08:28,158 --> 01:08:32,799
a no intent scenario next please

1659
01:08:33,759 --> 01:08:35,920
so uh to conclude uh we have discussed

1660
01:08:35,920 --> 01:08:37,520
the uh limitations of the current

1661
01:08:37,520 --> 01:08:39,439
intent-based solutions

1662
01:08:39,439 --> 01:08:41,279
and therefore we have proposed an

1663
01:08:41,279 --> 01:08:43,279
intent-based mbi framework

1664
01:08:43,279 --> 01:08:45,839
along with some declarative intent

1665
01:08:45,839 --> 01:08:48,399
expressions and their corresponding

1666
01:08:48,399 --> 01:08:50,880
prescriptive policies we have also

1667
01:08:50,880 --> 01:08:53,198
demonstrated a caching intent with

1668
01:08:53,198 --> 01:08:56,080
a workload target and its corresponding

1669
01:08:56,080 --> 01:08:57,040
policies

1670
01:08:57,040 --> 01:08:59,359
we've also discussed some possible

1671
01:08:59,359 --> 01:09:00,719
intent refinements

1672
01:09:00,719 --> 01:09:03,759
in a cloud cdn use case

1673
01:09:03,759 --> 01:09:07,839
next please

1674
01:09:08,479 --> 01:09:11,439
so as part of our future work uh we plan

1675
01:09:11,439 --> 01:09:11,839
to

1676
01:09:11,839 --> 01:09:14,479
extend the current static mapping

1677
01:09:14,479 --> 01:09:16,640
between intents and policies

1678
01:09:16,640 --> 01:09:19,359
to have a dynamic one based on several

1679
01:09:19,359 --> 01:09:20,399
criteria

1680
01:09:20,399 --> 01:09:24,960
and map them to existing microservices

1681
01:09:24,960 --> 01:09:26,719
we would like to also investigate

1682
01:09:26,719 --> 01:09:28,158
different intent targets

1683
01:09:28,158 --> 01:09:30,319
other than workload like probably

1684
01:09:30,319 --> 01:09:31,520
latency

1685
01:09:31,520 --> 01:09:34,719
and finally we want to implement this in

1686
01:09:34,719 --> 01:09:37,520
a real cloud-based testbed along with

1687
01:09:37,520 --> 01:09:39,040
the required apis

1688
01:09:39,040 --> 01:09:41,600
and translations thank you very much for

1689
01:09:41,600 --> 01:09:43,120
your attention and i would like to have

1690
01:09:43,120 --> 01:09:44,000
your questions

1691
01:09:44,000 --> 01:09:49,839
if we have time for that

1692
01:09:59,679 --> 01:10:02,640
you have time for one or two questions i

1693
01:10:02,640 --> 01:10:04,880
think

1694
01:10:11,440 --> 01:10:13,360
i do have a question that i like to hear

1695
01:10:13,360 --> 01:10:18,639
from the floor first you have a question

1696
01:10:28,840 --> 01:10:31,840
yes

1697
01:10:57,440 --> 01:11:00,480
the sun was not really good maybe if you

1698
01:11:00,480 --> 01:11:03,199
can just put in chat

1699
01:11:03,199 --> 01:11:06,400
yeah i'm back sorry for that um just

1700
01:11:06,400 --> 01:11:07,520
like to have uh

1701
01:11:07,520 --> 01:11:09,520
if you can expect or give us some

1702
01:11:09,520 --> 01:11:11,120
figures about the

1703
01:11:11,120 --> 01:11:16,239
uh that you have is a different approach

1704
01:11:24,840 --> 01:11:27,840
oh

1705
01:11:47,760 --> 01:11:50,080
lauren we did not hear you very well so

1706
01:11:50,080 --> 01:11:53,199
maybe yeah just put in chat if you

1707
01:11:53,199 --> 01:11:56,239
uh can yeah

1708
01:11:56,480 --> 01:11:58,000
okay i think you have some some issue

1709
01:11:58,000 --> 01:12:00,640
with this audio so um

1710
01:12:00,640 --> 01:12:03,920
i think we okay yes so maybe

1711
01:12:03,920 --> 01:12:06,719
we will send you the the question

1712
01:12:06,719 --> 01:12:08,000
offline directly because

1713
01:12:08,000 --> 01:12:12,080
i think you have some issue yeah um

1714
01:12:12,080 --> 01:12:15,760
so thank you again and uh so we will

1715
01:12:15,760 --> 01:12:18,400
now move to the um to the next speaker

1716
01:12:18,400 --> 01:12:23,679
there is no other question

1717
01:12:23,679 --> 01:12:26,800
now there is one question maybe i'm not

1718
01:12:26,800 --> 01:12:28,960
sure

1719
01:12:32,480 --> 01:12:35,040
hi it's phil here um it was a nice talk

1720
01:12:35,040 --> 01:12:37,040
thank you i was just wondering in terms

1721
01:12:37,040 --> 01:12:37,679
of your

1722
01:12:37,679 --> 01:12:41,440
example with the um cloud

1723
01:12:41,440 --> 01:12:44,800
cdn how did you

1724
01:12:44,800 --> 01:12:47,199
you know you talked about the the intent

1725
01:12:47,199 --> 01:12:48,239
there was

1726
01:12:48,239 --> 01:12:51,760
was that something you um you talk with

1727
01:12:51,760 --> 01:12:53,920
with those sorts of providers about what

1728
01:12:53,920 --> 01:12:54,960
kind of intent

1729
01:12:54,960 --> 01:12:57,600
they would like or this is just sort of

1730
01:12:57,600 --> 01:12:58,560
an example

1731
01:12:58,560 --> 01:13:01,840
a working example that you uh that you

1732
01:13:01,840 --> 01:13:02,880
kind of

1733
01:13:02,880 --> 01:13:04,640
decided what you think looks sensible

1734
01:13:04,640 --> 01:13:06,239
things to pick

1735
01:13:06,239 --> 01:13:08,239
yeah so now we haven't talked to anyone

1736
01:13:08,239 --> 01:13:10,239
really uh but we have looked at the

1737
01:13:10,239 --> 01:13:13,360
existing uh cloud cdns the popular ones

1738
01:13:13,360 --> 01:13:16,640
uh like google cloud like um aws

1739
01:13:16,640 --> 01:13:19,920
etc and you have noticed that they don't

1740
01:13:19,920 --> 01:13:21,120
really

1741
01:13:21,120 --> 01:13:22,960
provide content providers with this kind

1742
01:13:22,960 --> 01:13:24,320
of flexibility

1743
01:13:24,320 --> 01:13:26,880
um so this was one of the examples that

1744
01:13:26,880 --> 01:13:28,320
we thought about

1745
01:13:28,320 --> 01:13:31,280
actually it was inspired by one of the

1746
01:13:31,280 --> 01:13:32,960
works that we have read about

1747
01:13:32,960 --> 01:13:36,800
which was talking about futuristic cdns

1748
01:13:36,800 --> 01:13:39,040
where they would like to allow content

1749
01:13:39,040 --> 01:13:40,719
providers to

1750
01:13:40,719 --> 01:13:44,159
express higher level uh requirements

1751
01:13:44,159 --> 01:13:47,360
but that was not really uh formulated or

1752
01:13:47,360 --> 01:13:50,239
encapsulated in the form of intents and

1753
01:13:50,239 --> 01:13:51,360
therefore we

1754
01:13:51,360 --> 01:13:54,400
decided to actually uh build up

1755
01:13:54,400 --> 01:13:57,920
on that idea and uh adopt the

1756
01:13:57,920 --> 01:14:03,679
intense solution in this context

1757
01:14:10,159 --> 01:14:15,839
thank you thank you

1758
01:14:16,480 --> 01:14:20,239
okay so thank you again um

1759
01:14:20,239 --> 01:14:22,960
and uh we will now continue with the

1760
01:14:22,960 --> 01:14:25,040
next presentation

1761
01:14:25,040 --> 01:14:28,640
uh so i think it's joe

1762
01:14:28,640 --> 01:14:30,480
i don't know if lauren can can share the

1763
01:14:30,480 --> 01:14:32,320
screen i think he has some issue

1764
01:14:32,320 --> 01:14:35,440
so let me open the presentation maybe

1765
01:14:35,440 --> 01:14:38,560
hello can you hear me yes laura we can

1766
01:14:38,560 --> 01:14:39,679
hear you

1767
01:14:39,679 --> 01:14:42,960
okay so um joe will share the scream

1768
01:14:42,960 --> 01:14:44,960
itself because he has a video

1769
01:14:44,960 --> 01:14:48,080
uh demo embedded so we agree that you

1770
01:14:48,080 --> 01:14:48,719
will share

1771
01:14:48,719 --> 01:14:51,280
so joe if you can ask for sharing screen

1772
01:14:51,280 --> 01:14:53,679
we will grant you the access

1773
01:14:53,679 --> 01:14:57,120
okay sorry just bear with me you can

1774
01:14:57,120 --> 01:14:59,760
hear me okay

1775
01:15:08,840 --> 01:15:11,840
yep

1776
01:15:22,840 --> 01:15:25,840
okay

1777
01:15:51,040 --> 01:15:55,600
is this full screen on your side

1778
01:15:55,600 --> 01:15:58,640
no we can see the if you go maybe to the

1779
01:15:58,640 --> 01:16:00,480
slideshow settings

1780
01:16:00,480 --> 01:16:04,320
you may be able to switch

1781
01:16:05,679 --> 01:16:10,960
the last row maybe you can change the

1782
01:16:19,520 --> 01:16:23,920
ah okay okay it's good

1783
01:16:23,920 --> 01:16:26,400
okay so hello everybody my name is

1784
01:16:26,400 --> 01:16:28,239
joseph mcnamara i'm a

1785
01:16:28,239 --> 01:16:31,280
phd student studying under an irish

1786
01:16:31,280 --> 01:16:32,800
research council funded

1787
01:16:32,800 --> 01:16:35,280
enterprise partnership scheme with atlan

1788
01:16:35,280 --> 01:16:36,640
institute of technology

1789
01:16:36,640 --> 01:16:39,360
and ericsson i will be presenting my

1790
01:16:39,360 --> 01:16:42,000
recent work in the area of intent

1791
01:16:42,000 --> 01:16:44,560
in an adaptive policy environment along

1792
01:16:44,560 --> 01:16:45,199
with

1793
01:16:45,199 --> 01:16:49,839
a demonstration of intent in action

1794
01:16:51,920 --> 01:16:53,920
the presentation will be broken down in

1795
01:16:53,920 --> 01:16:55,280
the following way

1796
01:16:55,280 --> 01:16:57,120
first we will cover the paper

1797
01:16:57,120 --> 01:16:58,560
contribution

1798
01:16:58,560 --> 01:17:01,120
next i will describe the architecture of

1799
01:17:01,120 --> 01:17:03,600
the system along with the usage scenario

1800
01:17:03,600 --> 01:17:04,400
to be demoed

1801
01:17:04,400 --> 01:17:07,760
later in the presentation and next

1802
01:17:07,760 --> 01:17:11,760
we will describe the three primary

1803
01:17:11,760 --> 01:17:14,880
steps in how the system handles intent

1804
01:17:14,880 --> 01:17:17,440
this is performed in order of intent

1805
01:17:17,440 --> 01:17:18,640
generation

1806
01:17:18,640 --> 01:17:22,800
intent comparison and intent resolution

1807
01:17:22,800 --> 01:17:25,520
i will then present a demo a video

1808
01:17:25,520 --> 01:17:28,000
demonstration of the system in action

1809
01:17:28,000 --> 01:17:30,800
where we use intent to configure mininet

1810
01:17:30,800 --> 01:17:32,000
emulated networks

1811
01:17:32,000 --> 01:17:35,120
with parameters described through intent

1812
01:17:35,120 --> 01:17:37,840
and finally we will discuss what we have

1813
01:17:37,840 --> 01:17:38,880
learned from our work

1814
01:17:38,880 --> 01:17:41,760
and how it has directed our current

1815
01:17:41,760 --> 01:17:42,320
focus

1816
01:17:42,320 --> 01:17:45,840
and approach

1817
01:17:46,960 --> 01:17:48,719
so this work presents a three-step

1818
01:17:48,719 --> 01:17:50,960
mechanism for intent realization

1819
01:17:50,960 --> 01:17:53,920
in an adaptive policy environment intent

1820
01:17:53,920 --> 01:17:55,520
has been a topic of discussion

1821
01:17:55,520 --> 01:17:59,040
for a very long time even longer if you

1822
01:17:59,040 --> 01:18:00,960
associate it with the goal-based

1823
01:18:00,960 --> 01:18:04,000
policies from the late 1990s

1824
01:18:04,000 --> 01:18:06,880
in our work we looked at intent as a way

1825
01:18:06,880 --> 01:18:07,360
to

1826
01:18:07,360 --> 01:18:10,640
reduce network complexity and of course

1827
01:18:10,640 --> 01:18:11,199
this is

1828
01:18:11,199 --> 01:18:13,280
not a new goal and has been actively

1829
01:18:13,280 --> 01:18:15,760
pursued by the research community

1830
01:18:15,760 --> 01:18:18,880
and but we wanted to investigate

1831
01:18:18,880 --> 01:18:21,600
what does the system need to be intent

1832
01:18:21,600 --> 01:18:22,239
driven

1833
01:18:22,239 --> 01:18:25,360
and adaptive our result was a three-step

1834
01:18:25,360 --> 01:18:26,000
mechanism

1835
01:18:26,000 --> 01:18:27,840
that i will describe and demonstrate in

1836
01:18:27,840 --> 01:18:30,640
this presentation

1837
01:18:32,560 --> 01:18:34,640
in the system architecture we have

1838
01:18:34,640 --> 01:18:35,840
intent messages

1839
01:18:35,840 --> 01:18:38,719
on the left side of the diagram we have

1840
01:18:38,719 --> 01:18:40,000
an adaptive policy

1841
01:18:40,000 --> 01:18:42,800
execution engine apex shown as the

1842
01:18:42,800 --> 01:18:44,080
yellow box

1843
01:18:44,080 --> 01:18:46,640
and a network underneath to represent

1844
01:18:46,640 --> 01:18:49,679
our mininet network emulation tool

1845
01:18:49,679 --> 01:18:52,000
an intent message will arrive from the

1846
01:18:52,000 --> 01:18:53,760
left side of the diagram

1847
01:18:53,760 --> 01:18:56,320
this is received by the policy engine

1848
01:18:56,320 --> 01:18:59,440
triggering a validation cycle

1849
01:18:59,440 --> 01:19:01,760
this process checks the message that it

1850
01:19:01,760 --> 01:19:03,360
can be processed

1851
01:19:03,360 --> 01:19:06,400
and then starts comparing the new intent

1852
01:19:06,400 --> 01:19:08,400
to already existing intents stored

1853
01:19:08,400 --> 01:19:11,120
within policy context

1854
01:19:11,120 --> 01:19:13,520
if no conflicts are detected the intent

1855
01:19:13,520 --> 01:19:15,600
is added to a collection

1856
01:19:15,600 --> 01:19:18,239
if a conflict is detected the intent is

1857
01:19:18,239 --> 01:19:19,199
rejected

1858
01:19:19,199 --> 01:19:22,640
and the issuer is notified the addition

1859
01:19:22,640 --> 01:19:23,040
of

1860
01:19:23,040 --> 01:19:26,080
a new intent to the collection triggers

1861
01:19:26,080 --> 01:19:28,000
a reconfiguration of the network

1862
01:19:28,000 --> 01:19:30,400
where the intent collection defines the

1863
01:19:30,400 --> 01:19:33,840
scope for acceptable network parameters

1864
01:19:33,840 --> 01:19:35,520
in the next slide we will provide more

1865
01:19:35,520 --> 01:19:38,640
details of this process

1866
01:19:40,159 --> 01:19:41,840
in this slide we see an example of an

1867
01:19:41,840 --> 01:19:44,800
intent passed into the policy engine

1868
01:19:44,800 --> 01:19:47,600
characteristics of the intent message

1869
01:19:47,600 --> 01:19:49,199
are a recursive structure

1870
01:19:49,199 --> 01:19:51,360
which allows for intents of varying

1871
01:19:51,360 --> 01:19:52,800
levels of detail

1872
01:19:52,800 --> 01:19:54,719
while maintaining the system's ability

1873
01:19:54,719 --> 01:19:57,520
to fully navigate each message

1874
01:19:57,520 --> 01:20:00,480
a range of optional keywords who what

1875
01:20:00,480 --> 01:20:01,040
when

1876
01:20:01,040 --> 01:20:03,920
where how maintains the readability of

1877
01:20:03,920 --> 01:20:05,920
the message for both the user and the

1878
01:20:05,920 --> 01:20:07,120
policy engine

1879
01:20:07,120 --> 01:20:09,920
while complementing the varying levels

1880
01:20:09,920 --> 01:20:10,800
of detail

1881
01:20:10,800 --> 01:20:14,080
achievable within each message in this

1882
01:20:14,080 --> 01:20:14,800
example

1883
01:20:14,800 --> 01:20:17,920
who describes the user what is a generic

1884
01:20:17,920 --> 01:20:19,760
label for the intent

1885
01:20:19,760 --> 01:20:21,840
when describes a time frame for the

1886
01:20:21,840 --> 01:20:23,920
intent to be active

1887
01:20:23,920 --> 01:20:25,920
where describes a condition for the

1888
01:20:25,920 --> 01:20:28,080
intent setting bandwidth to less than

1889
01:20:28,080 --> 01:20:30,000
one megabyte per second

1890
01:20:30,000 --> 01:20:31,840
and how which is included for the

1891
01:20:31,840 --> 01:20:34,080
example but is set to null

1892
01:20:34,080 --> 01:20:35,840
as it does not play a role in the usage

1893
01:20:35,840 --> 01:20:37,920
scenario

1894
01:20:37,920 --> 01:20:40,080
the intent message is received by the

1895
01:20:40,080 --> 01:20:41,120
policy engine

1896
01:20:41,120 --> 01:20:44,840
where it is paris into an internal path

1897
01:20:44,840 --> 01:20:47,840
collection

1898
01:20:50,480 --> 01:20:52,480
in this slide we detail the intent

1899
01:20:52,480 --> 01:20:54,480
comparison step

1900
01:20:54,480 --> 01:20:56,639
the intent message has been processed by

1901
01:20:56,639 --> 01:20:58,000
the policy engine

1902
01:20:58,000 --> 01:21:01,040
into an internal path collection

1903
01:21:01,040 --> 01:21:04,400
each path through the tree can be easily

1904
01:21:04,400 --> 01:21:05,040
compared

1905
01:21:05,040 --> 01:21:08,239
to branches of different intents using

1906
01:21:08,239 --> 01:21:09,199
this approach

1907
01:21:09,199 --> 01:21:11,360
relationships are easier to identify on

1908
01:21:11,360 --> 01:21:13,679
a structural levels

1909
01:21:13,679 --> 01:21:15,840
intents with similar structures are

1910
01:21:15,840 --> 01:21:17,920
often related however

1911
01:21:17,920 --> 01:21:20,880
format alone is not enough to compare

1912
01:21:20,880 --> 01:21:21,840
intents

1913
01:21:21,840 --> 01:21:24,560
to properly compare attributes we must

1914
01:21:24,560 --> 01:21:26,080
be able to identify

1915
01:21:26,080 --> 01:21:28,239
and understand what it is we are

1916
01:21:28,239 --> 01:21:30,718
comparing

1917
01:21:33,520 --> 01:21:35,520
to compare attributes we must first know

1918
01:21:35,520 --> 01:21:37,760
what they are and how they behave

1919
01:21:37,760 --> 01:21:40,000
this resulted in the incorporation of a

1920
01:21:40,000 --> 01:21:42,639
dictionary with the policy system

1921
01:21:42,639 --> 01:21:43,920
the dictionary enables the

1922
01:21:43,920 --> 01:21:46,639
identification and predefined elements

1923
01:21:46,639 --> 01:21:49,120
sorry the dictionary enables the

1924
01:21:49,120 --> 01:21:51,600
identification of predefined elements

1925
01:21:51,600 --> 01:21:53,520
such as bandwidth

1926
01:21:53,520 --> 01:21:55,840
and provides a predefined blue pin

1927
01:21:55,840 --> 01:21:56,719
blueprint

1928
01:21:56,719 --> 01:21:59,840
for the intent element to be mapped to

1929
01:21:59,840 --> 01:22:01,600
mapping intent elements provides

1930
01:22:01,600 --> 01:22:04,239
functionality adjusting our action to

1931
01:22:04,239 --> 01:22:05,760
generate responses

1932
01:22:05,760 --> 01:22:07,679
that are aligned with all current active

1933
01:22:07,679 --> 01:22:10,000
intents in the system

1934
01:22:10,000 --> 01:22:12,080
in this case as more intents are

1935
01:22:12,080 --> 01:22:13,760
introduced to the system

1936
01:22:13,760 --> 01:22:16,080
the goals of the network change to fit

1937
01:22:16,080 --> 01:22:16,960
the shifting

1938
01:22:16,960 --> 01:22:20,239
of acceptable thresholds

1939
01:22:22,400 --> 01:22:24,320
the graph shows outputs similar to the

1940
01:22:24,320 --> 01:22:26,159
demonstration you're about to see

1941
01:22:26,159 --> 01:22:27,920
in this scenario we implement three

1942
01:22:27,920 --> 01:22:30,080
straightforward intent messages

1943
01:22:30,080 --> 01:22:32,080
the first intent message requests a

1944
01:22:32,080 --> 01:22:34,560
bandwidth of one megabyte per second

1945
01:22:34,560 --> 01:22:36,320
this is more than necessary for the

1946
01:22:36,320 --> 01:22:38,639
video we are streaming over the mini

1947
01:22:38,639 --> 01:22:41,520
network to generate traffic the second

1948
01:22:41,520 --> 01:22:43,440
intent message requests a ban

1949
01:22:43,440 --> 01:22:47,520
width of about 375 kilobytes per second

1950
01:22:47,520 --> 01:22:49,280
as this intent does not conflict with

1951
01:22:49,280 --> 01:22:50,960
the already existing intents of the

1952
01:22:50,960 --> 01:22:52,159
system

1953
01:22:52,159 --> 01:22:54,800
has been validated and has triggered a

1954
01:22:54,800 --> 01:22:56,880
reconfiguration of the network

1955
01:22:56,880 --> 01:22:58,800
the third intent message requests a

1956
01:22:58,800 --> 01:23:01,199
bandwidth of about 190 kilobytes per

1957
01:23:01,199 --> 01:23:02,000
second

1958
01:23:02,000 --> 01:23:04,000
which is compared to the two already

1959
01:23:04,000 --> 01:23:05,360
existing intents

1960
01:23:05,360 --> 01:23:07,679
and triggers a third reconfiguration of

1961
01:23:07,679 --> 01:23:10,159
the network

1962
01:23:11,040 --> 01:23:21,840
so this means i have to move

1963
01:23:26,080 --> 01:23:27,760
apologies i didn't have this ready

1964
01:23:27,760 --> 01:23:35,840
before the presentation

1965
01:23:47,840 --> 01:23:49,920
you

1966
01:24:14,840 --> 01:24:17,840
um

1967
01:24:18,719 --> 01:24:21,199
okay so the demo starts with the running

1968
01:24:21,199 --> 01:24:22,639
of the kafka cluster

1969
01:24:22,639 --> 01:24:24,960
and next we run apex inside our docker

1970
01:24:24,960 --> 01:24:26,239
container

1971
01:24:26,239 --> 01:24:28,400
then we build the policy and deploy it

1972
01:24:28,400 --> 01:24:31,839
onto our apex engine

1973
01:24:37,440 --> 01:24:40,480
now our policy is running and is

1974
01:24:40,480 --> 01:24:41,120
listening

1975
01:24:41,120 --> 01:24:45,840
for our kafka topics

1976
01:24:52,639 --> 01:24:54,960
now we run our application which sends

1977
01:24:54,960 --> 01:24:56,800
an intent message to the system

1978
01:24:56,800 --> 01:24:59,280
and receives back a response and builds

1979
01:24:59,280 --> 01:25:01,199
the network according to the specified

1980
01:25:01,199 --> 01:25:02,639
parameters

1981
01:25:02,639 --> 01:25:04,880
a video stream is started to generate

1982
01:25:04,880 --> 01:25:06,639
some traffic on the network

1983
01:25:06,639 --> 01:25:12,480
which we will step through later

1984
01:25:12,480 --> 01:25:15,360
i can skip ahead now just to save time

1985
01:25:15,360 --> 01:25:15,840
so

1986
01:25:15,840 --> 01:25:19,120
after streaming for a few seconds uh

1987
01:25:19,120 --> 01:25:21,199
we're going to introduce a new intent

1988
01:25:21,199 --> 01:25:22,560
into the system

1989
01:25:22,560 --> 01:25:24,840
reducing the bandwidth of the configured

1990
01:25:24,840 --> 01:25:27,159
network the new intent triggers a

1991
01:25:27,159 --> 01:25:28,719
reconfiguration

1992
01:25:28,719 --> 01:25:41,840
and starts another video stream

1993
01:25:44,239 --> 01:25:46,400
and after a few more seconds we

1994
01:25:46,400 --> 01:25:48,880
introduced the third intent message into

1995
01:25:48,880 --> 01:25:55,840
the system

1996
01:26:16,880 --> 01:26:20,080
okay so now i can move ahead

1997
01:26:20,080 --> 01:26:25,040
and look at what's happening in policy

1998
01:26:25,920 --> 01:26:37,840
so the intent is received

1999
01:26:40,080 --> 01:26:51,840
hello joe i cannot hear you anymore

2000
01:27:26,639 --> 01:27:28,800
joe we can't hear you we can i think you

2001
01:27:28,800 --> 01:27:33,840
still think you're doing it

2002
01:27:35,440 --> 01:27:38,000
yeah i think the issue is that he's not

2003
01:27:38,000 --> 01:27:38,639
hearing

2004
01:27:38,639 --> 01:27:44,320
us too so difficult to trigger him

2005
01:27:44,320 --> 01:27:47,840
let me see

2006
01:27:54,880 --> 01:28:01,840
trying to contact him

2007
01:28:13,520 --> 01:28:16,159
okay so maybe let's see i will revoke

2008
01:28:16,159 --> 01:28:17,679
the screen sharing for

2009
01:28:17,679 --> 01:28:20,719
for a moment just to triggering

2010
01:28:20,719 --> 01:28:26,000
um i'm not sure there is any other

2011
01:28:26,840 --> 01:28:29,840
option

2012
01:28:32,880 --> 01:28:42,560
joe can you hear us

2013
01:28:42,560 --> 01:28:44,800
joe

2014
01:28:46,639 --> 01:28:48,960
joe i hope you can hear us we are lost

2015
01:28:48,960 --> 01:28:57,840
audio on your side

2016
01:29:14,960 --> 01:29:17,760
hello joe can you try to reconnect audio

2017
01:29:17,760 --> 01:29:18,080
or

2018
01:29:18,080 --> 01:29:25,840
do something maybe on the chat

2019
01:29:29,920 --> 01:29:33,120
okay so apologies for that just for the

2020
01:29:33,120 --> 01:29:34,159
sake of the meeting

2021
01:29:34,159 --> 01:29:36,320
we will switch to the next presentation

2022
01:29:36,320 --> 01:29:38,480
and hopefully if joe recollects we will

2023
01:29:38,480 --> 01:29:40,639
just try to to give him a

2024
01:29:40,639 --> 01:29:42,400
couple of minutes to conclude his

2025
01:29:42,400 --> 01:29:45,360
presentation but let's switch to the

2026
01:29:45,360 --> 01:29:48,880
next presentation in the meantime

2027
01:29:50,840 --> 01:29:53,120
stephen

2028
01:29:53,120 --> 01:29:56,400
yes hello can you hear me yes

2029
01:29:56,400 --> 01:30:00,400
great let me just share my screen

2030
01:30:04,880 --> 01:30:07,840
you can go

2031
01:30:08,719 --> 01:30:10,960
um it's not full screen but i don't know

2032
01:30:10,960 --> 01:30:12,400
okay great

2033
01:30:12,400 --> 01:30:14,480
so yeah hello thanks again uh for

2034
01:30:14,480 --> 01:30:15,840
inviting me um

2035
01:30:15,840 --> 01:30:17,600
i'm stefan schneider from paderborn

2036
01:30:17,600 --> 01:30:20,000
university and i'd like to present our

2037
01:30:20,000 --> 01:30:22,080
work on self-driving network and service

2038
01:30:22,080 --> 01:30:23,120
coordination

2039
01:30:23,120 --> 01:30:26,080
using deep reinforcement learning so as

2040
01:30:26,080 --> 01:30:26,400
to

2041
01:30:26,400 --> 01:30:28,719
previous talks this is also based on our

2042
01:30:28,719 --> 01:30:29,920
paper at cnsm

2043
01:30:29,920 --> 01:30:32,320
last year and i'll try to give a reduced

2044
01:30:32,320 --> 01:30:34,000
version of our conference talk and in

2045
01:30:34,000 --> 01:30:34,880
the end

2046
01:30:34,880 --> 01:30:37,280
focus on challenges of applying ai for

2047
01:30:37,280 --> 01:30:39,440
network management

2048
01:30:39,440 --> 01:30:41,600
yeah so let's get started next slide

2049
01:30:41,600 --> 01:30:43,920
please

2050
01:30:46,960 --> 01:30:49,920
um so in nfv or when we talk about

2051
01:30:49,920 --> 01:30:51,920
microservices in a service mesh

2052
01:30:51,920 --> 01:30:53,920
or even machine learning functions in a

2053
01:30:53,920 --> 01:30:55,920
pipeline we often have services

2054
01:30:55,920 --> 01:30:57,920
that consist of multiple interconnected

2055
01:30:57,920 --> 01:30:59,040
components

2056
01:30:59,040 --> 01:31:01,679
and here i just call them c1 c2 or could

2057
01:31:01,679 --> 01:31:02,400
be c3

2058
01:31:02,400 --> 01:31:05,440
c4 and so on in addition to these

2059
01:31:05,440 --> 01:31:07,040
services we have our network that's

2060
01:31:07,040 --> 01:31:08,400
depicted here by the

2061
01:31:08,400 --> 01:31:11,360
clouds which consists of distributed but

2062
01:31:11,360 --> 01:31:13,280
interconnected

2063
01:31:13,280 --> 01:31:14,960
nodes where each node may have some kind

2064
01:31:14,960 --> 01:31:17,440
of compute resource

2065
01:31:17,440 --> 01:31:20,639
limited compute resource and

2066
01:31:20,639 --> 01:31:22,320
then we have our users that want to use

2067
01:31:22,320 --> 01:31:24,400
these services in order to provide these

2068
01:31:24,400 --> 01:31:25,760
services

2069
01:31:25,760 --> 01:31:28,560
to our users we need to scale the

2070
01:31:28,560 --> 01:31:30,400
service components place

2071
01:31:30,400 --> 01:31:32,239
instances of these components at the

2072
01:31:32,239 --> 01:31:33,440
different nodes

2073
01:31:33,440 --> 01:31:35,760
and then schedule the rapidly incoming

2074
01:31:35,760 --> 01:31:37,520
flows from these users to these

2075
01:31:37,520 --> 01:31:39,520
different instances

2076
01:31:39,520 --> 01:31:41,840
next

2077
01:31:43,600 --> 01:31:45,679
so for example here i've placed an

2078
01:31:45,679 --> 01:31:48,000
instance of component c1 directly at the

2079
01:31:48,000 --> 01:31:49,040
ingress node

2080
01:31:49,040 --> 01:31:51,040
and then an instance of c2 at the

2081
01:31:51,040 --> 01:31:52,159
neighboring node

2082
01:31:52,159 --> 01:31:54,719
and steered the traffic through those

2083
01:31:54,719 --> 01:31:56,880
nodes

2084
01:31:56,880 --> 01:31:59,760
if i see for example exactly if that the

2085
01:31:59,760 --> 01:32:00,560
load at

2086
01:32:00,560 --> 01:32:02,639
the ingress node is becoming too high

2087
01:32:02,639 --> 01:32:04,239
then i can scale out this

2088
01:32:04,239 --> 01:32:07,520
uh component c1 sorry

2089
01:32:07,520 --> 01:32:09,440
and place the second instance of c1 at

2090
01:32:09,440 --> 01:32:10,800
the neighboring node and then

2091
01:32:10,800 --> 01:32:13,360
schedule some part of the traffic to the

2092
01:32:13,360 --> 01:32:15,280
second instance to push the load away

2093
01:32:15,280 --> 01:32:16,800
from the ingress node to the neighboring

2094
01:32:16,800 --> 01:32:17,679
node

2095
01:32:17,679 --> 01:32:19,840
and of course in this scenario nothing

2096
01:32:19,840 --> 01:32:21,600
is static everything keeps changing all

2097
01:32:21,600 --> 01:32:23,520
the time users arrive traffic goes up

2098
01:32:23,520 --> 01:32:24,960
goes down

2099
01:32:24,960 --> 01:32:26,960
traffic arrives at new locations and so

2100
01:32:26,960 --> 01:32:28,320
we have to rapidly

2101
01:32:28,320 --> 01:32:30,560
react to these changes and adjust our

2102
01:32:30,560 --> 01:32:32,400
scaling placement and

2103
01:32:32,400 --> 01:32:37,519
scheduling here next please

2104
01:32:37,679 --> 01:32:40,159
um so this whole scenario isn't used

2105
01:32:40,159 --> 01:32:42,639
there's a lot of existing work actually

2106
01:32:42,639 --> 01:32:45,040
um but when we looked at existing work

2107
01:32:45,040 --> 01:32:46,400
we found that there are

2108
01:32:46,400 --> 01:32:48,960
um often three major limitations of

2109
01:32:48,960 --> 01:32:52,000
applying this existing work to practice

2110
01:32:52,000 --> 01:32:54,880
and the first is that of often existing

2111
01:32:54,880 --> 01:32:56,719
work focuses on mid to long-term

2112
01:32:56,719 --> 01:32:57,440
planning per

2113
01:32:57,440 --> 01:32:59,600
deployment request assuming that they

2114
01:32:59,600 --> 01:33:01,360
have some

2115
01:33:01,360 --> 01:33:04,480
some expectat expected load off or some

2116
01:33:04,480 --> 01:33:05,679
expected you know

2117
01:33:05,679 --> 01:33:07,600
load and then they run some algorithms

2118
01:33:07,600 --> 01:33:08,960
place instances

2119
01:33:08,960 --> 01:33:11,360
hardwire them to the ingress nodes and

2120
01:33:11,360 --> 01:33:13,280
um you hope that it works but the

2121
01:33:13,280 --> 01:33:15,760
problem is that operational reality

2122
01:33:15,760 --> 01:33:17,840
often diverges from such initial plans

2123
01:33:17,840 --> 01:33:18,719
if the

2124
01:33:18,719 --> 01:33:21,840
load is different for example and so we

2125
01:33:21,840 --> 01:33:23,520
really focused on the rapidly incoming

2126
01:33:23,520 --> 01:33:24,719
user flows here

2127
01:33:24,719 --> 01:33:26,639
and on scheduling these flows at real

2128
01:33:26,639 --> 01:33:29,760
time and adjusting our scaling placement

2129
01:33:29,760 --> 01:33:31,760
dynamically so it's a bit more fast

2130
01:33:31,760 --> 01:33:34,560
paced and that dynamic here the scenario

2131
01:33:34,560 --> 01:33:36,880
the second point is that existing

2132
01:33:36,880 --> 01:33:38,880
approaches often build on quite rigid

2133
01:33:38,880 --> 01:33:40,159
models

2134
01:33:40,159 --> 01:33:42,320
for example for heuristic algorithms or

2135
01:33:42,320 --> 01:33:44,639
for integer linear programs

2136
01:33:44,639 --> 01:33:46,480
that are designed by experts and

2137
01:33:46,480 --> 01:33:48,639
tailored to specific scenarios

2138
01:33:48,639 --> 01:33:50,159
and then they work really well in these

2139
01:33:50,159 --> 01:33:52,800
scenarios but if the scenarios change

2140
01:33:52,800 --> 01:33:54,639
and the underlying assumptions no longer

2141
01:33:54,639 --> 01:33:55,280
hold

2142
01:33:55,280 --> 01:33:57,120
then they easily break or at least don't

2143
01:33:57,120 --> 01:33:58,400
work as well anymore

2144
01:33:58,400 --> 01:34:00,080
and then again we need these experts to

2145
01:34:00,080 --> 01:34:01,920
sit down understand the problem and fix

2146
01:34:01,920 --> 01:34:03,040
the approaches

2147
01:34:03,040 --> 01:34:05,360
and so what we would rather have want to

2148
01:34:05,360 --> 01:34:07,040
have is an approach that

2149
01:34:07,040 --> 01:34:09,679
self-adapts to news sorry to new

2150
01:34:09,679 --> 01:34:11,760
scenarios to new objectives

2151
01:34:11,760 --> 01:34:13,120
uh and all that without human

2152
01:34:13,120 --> 01:34:15,679
intervention without expert knowledge

2153
01:34:15,679 --> 01:34:18,239
and then lastly existing approaches

2154
01:34:18,239 --> 01:34:20,159
often

2155
01:34:20,159 --> 01:34:22,719
assume global up-to-date or sometimes

2156
01:34:22,719 --> 01:34:23,600
even a priori

2157
01:34:23,600 --> 01:34:25,360
a priori knowledge of what's going on in

2158
01:34:25,360 --> 01:34:26,880
the entire network

2159
01:34:26,880 --> 01:34:29,199
and for large networks with monitoring

2160
01:34:29,199 --> 01:34:30,880
delay this is not very

2161
01:34:30,880 --> 01:34:33,440
realistic and so we really focus here on

2162
01:34:33,440 --> 01:34:35,120
partial and delayed observations that

2163
01:34:35,120 --> 01:34:36,880
could be realistically available

2164
01:34:36,880 --> 01:34:39,199
through monitoring and we do all of that

2165
01:34:39,199 --> 01:34:40,239
um with

2166
01:34:40,239 --> 01:34:42,239
a model-free deep reinforcement learning

2167
01:34:42,239 --> 01:34:43,840
approach

2168
01:34:43,840 --> 01:34:47,600
next please

2169
01:34:47,600 --> 01:34:49,760
yes um so here's an overview of that

2170
01:34:49,760 --> 01:34:51,760
approach on the left side you see the

2171
01:34:51,760 --> 01:34:52,639
network and

2172
01:34:52,639 --> 01:34:55,600
in that network every a computa compute

2173
01:34:55,600 --> 01:34:58,080
node has a scheduling table

2174
01:34:58,080 --> 01:35:00,400
and this or the scheduling tables

2175
01:35:00,400 --> 01:35:02,320
basically are rules that are applied

2176
01:35:02,320 --> 01:35:05,600
to incoming flows locally at runtime

2177
01:35:05,600 --> 01:35:07,440
and then on the top right corner you see

2178
01:35:07,440 --> 01:35:09,360
our rl agent

2179
01:35:09,360 --> 01:35:12,080
uh or reinforcement learning agent that

2180
01:35:12,080 --> 01:35:14,080
periodically monitors the network

2181
01:35:14,080 --> 01:35:16,639
gets information about what's going on

2182
01:35:16,639 --> 01:35:18,800
and then updates these rules at

2183
01:35:18,800 --> 01:35:20,639
uh inside these scheduling tables for

2184
01:35:20,639 --> 01:35:22,080
example to uh

2185
01:35:22,080 --> 01:35:24,480
change load balancing change to scaling

2186
01:35:24,480 --> 01:35:25,600
or placement

2187
01:35:25,600 --> 01:35:28,880
and this repeats iteratively and

2188
01:35:28,880 --> 01:35:30,560
yeah during training the agent also

2189
01:35:30,560 --> 01:35:32,080
receives a reward signal

2190
01:35:32,080 --> 01:35:33,679
that indicates how happy we are with the

2191
01:35:33,679 --> 01:35:35,840
current situation such that it can learn

2192
01:35:35,840 --> 01:35:38,719
from its actions

2193
01:35:40,840 --> 01:35:43,600
next

2194
01:35:43,600 --> 01:35:45,920
um so let's have a bit closer look at

2195
01:35:45,920 --> 01:35:46,800
what these

2196
01:35:46,800 --> 01:35:49,280
scheduling tables look like so i

2197
01:35:49,280 --> 01:35:50,080
mentioned

2198
01:35:50,080 --> 01:35:51,920
these tables express what to do with

2199
01:35:51,920 --> 01:35:53,679
incoming flows

2200
01:35:53,679 --> 01:35:56,080
based on which services flow requests

2201
01:35:56,080 --> 01:35:58,159
and which component within that service

2202
01:35:58,159 --> 01:35:59,760
so let's assume a flow arrives at

2203
01:35:59,760 --> 01:36:01,440
ingress node v1 then we see the

2204
01:36:01,440 --> 01:36:03,600
scheduling table here

2205
01:36:03,600 --> 01:36:05,280
and let's assume the flow requests the

2206
01:36:05,280 --> 01:36:06,880
first component s1

2207
01:36:06,880 --> 01:36:09,679
first service s1 and component c1 so the

2208
01:36:09,679 --> 01:36:10,000
first

2209
01:36:10,000 --> 01:36:12,639
row in that table then with 10 percent

2210
01:36:12,639 --> 01:36:14,239
probability that flow is

2211
01:36:14,239 --> 01:36:17,679
processed locally at node v1 with 40

2212
01:36:17,679 --> 01:36:19,760
probability sent to the neighbor and

2213
01:36:19,760 --> 01:36:21,679
processed there and with 50

2214
01:36:21,679 --> 01:36:24,560
it's sent to node b3 and process there

2215
01:36:24,560 --> 01:36:25,280
and

2216
01:36:25,280 --> 01:36:27,440
that's how we decide the scheduling or

2217
01:36:27,440 --> 01:36:28,960
yeah that's how the scheduling works

2218
01:36:28,960 --> 01:36:29,360
here

2219
01:36:29,360 --> 01:36:30,960
but we also derive the scaling and

2220
01:36:30,960 --> 01:36:32,320
placement automatically from the

2221
01:36:32,320 --> 01:36:33,520
scheduling tables

2222
01:36:33,520 --> 01:36:36,960
in one joined step by placing instances

2223
01:36:36,960 --> 01:36:38,400
at all compute nodes

2224
01:36:38,400 --> 01:36:41,440
where flows could possibly arrive

2225
01:36:41,440 --> 01:36:43,280
so in order to do this joint scaling

2226
01:36:43,280 --> 01:36:44,639
placement and scheduling

2227
01:36:44,639 --> 01:36:46,239
with reinforcement learning we need to

2228
01:36:46,239 --> 01:36:47,840
define the

2229
01:36:47,840 --> 01:36:51,040
markov decision process and yeah that's

2230
01:36:51,040 --> 01:36:52,159
on the next slide

2231
01:36:52,159 --> 01:36:54,400
please

2232
01:36:56,719 --> 01:36:58,480
so in our case the markov decision

2233
01:36:58,480 --> 01:37:00,800
process is partially observable because

2234
01:37:00,800 --> 01:37:01,119
we

2235
01:37:01,119 --> 01:37:04,320
always rely on partial and delayed

2236
01:37:04,320 --> 01:37:06,159
observations from the last monitoring

2237
01:37:06,159 --> 01:37:06,960
interval

2238
01:37:06,960 --> 01:37:08,560
and these observations contain

2239
01:37:08,560 --> 01:37:10,159
information about the

2240
01:37:10,159 --> 01:37:11,600
incoming data rate at the different

2241
01:37:11,600 --> 01:37:13,600
ingress nodes and about the resource

2242
01:37:13,600 --> 01:37:14,800
utilization at

2243
01:37:14,800 --> 01:37:17,119
all the nodes and based on these

2244
01:37:17,119 --> 01:37:18,400
observations

2245
01:37:18,400 --> 01:37:21,520
the rlh the rlhn takes an action

2246
01:37:21,520 --> 01:37:24,000
and this action defines or updates the

2247
01:37:24,000 --> 01:37:25,600
scheduling probabilities

2248
01:37:25,600 --> 01:37:27,280
in all the different scheduling tables

2249
01:37:27,280 --> 01:37:28,880
in the network so it's quite large and

2250
01:37:28,880 --> 01:37:30,639
continues this action space

2251
01:37:30,639 --> 01:37:33,199
which makes things challenging and then

2252
01:37:33,199 --> 01:37:34,320
of course we still need

2253
01:37:34,320 --> 01:37:37,119
a reward to you know give to the agent

2254
01:37:37,119 --> 01:37:38,400
during training so

2255
01:37:38,400 --> 01:37:40,800
we defined our reward function as a

2256
01:37:40,800 --> 01:37:41,840
weighted sum of

2257
01:37:41,840 --> 01:37:44,239
multiple objectives in our case we

2258
01:37:44,239 --> 01:37:46,960
focused on two objectives on the

2259
01:37:46,960 --> 01:37:49,520
maximization of successful flows versus

2260
01:37:49,520 --> 01:37:50,560
drop flows

2261
01:37:50,560 --> 01:37:53,679
and on minimizing end-to-end delay next

2262
01:37:53,679 --> 01:37:55,920
please

2263
01:38:00,159 --> 01:38:03,280
um yeah so our you know again

2264
01:38:03,280 --> 01:38:06,480
overview of our uh rl framework here on

2265
01:38:06,480 --> 01:38:07,840
on the left side again we see the

2266
01:38:07,840 --> 01:38:09,760
network that is monitored

2267
01:38:09,760 --> 01:38:11,440
in step one and the monitoring

2268
01:38:11,440 --> 01:38:14,159
information is processed by an adapter

2269
01:38:14,159 --> 01:38:15,840
um that retrieves the relevant

2270
01:38:15,840 --> 01:38:17,920
observations calculates the reward

2271
01:38:17,920 --> 01:38:19,280
and passes that to our deep

2272
01:38:19,280 --> 01:38:21,760
reinforcement learning agent in step two

2273
01:38:21,760 --> 01:38:25,440
and our drl agent is built on ddpg so

2274
01:38:25,440 --> 01:38:28,000
deep deterministic policy grading

2275
01:38:28,000 --> 01:38:30,080
which supports such large continuous

2276
01:38:30,080 --> 01:38:31,679
action spaces and which is an actor

2277
01:38:31,679 --> 01:38:32,560
critic approach

2278
01:38:32,560 --> 01:38:36,000
so in step three we retrieve the

2279
01:38:36,000 --> 01:38:38,480
next action from the actor again apply

2280
01:38:38,480 --> 01:38:40,560
that or pass that to the adapter that

2281
01:38:40,560 --> 01:38:42,960
then applies the new updated schedule

2282
01:38:42,960 --> 01:38:44,800
and placement to the network and then

2283
01:38:44,800 --> 01:38:48,000
this whole cycle repeats and it repeats

2284
01:38:48,000 --> 01:38:50,320
a lot of times during training until

2285
01:38:50,320 --> 01:38:51,679
convergence so because

2286
01:38:51,679 --> 01:38:53,600
there are so many iterations during

2287
01:38:53,600 --> 01:38:55,119
training we do do that

2288
01:38:55,119 --> 01:38:57,920
upfront offline and here we focus on

2289
01:38:57,920 --> 01:38:59,679
exploration

2290
01:38:59,679 --> 01:39:03,040
you have to you know find good actions

2291
01:39:03,040 --> 01:39:05,440
and then once the training converges

2292
01:39:05,440 --> 01:39:09,440
um we switch to online inference so

2293
01:39:09,440 --> 01:39:10,960
then we don't need to update our neural

2294
01:39:10,960 --> 01:39:13,119
network anymore and it's really fast

2295
01:39:13,119 --> 01:39:15,040
and we can do that online and then we

2296
01:39:15,040 --> 01:39:16,960
also focus on exploiting the best action

2297
01:39:16,960 --> 01:39:17,679
rather than

2298
01:39:17,679 --> 01:39:21,840
x on exploration next please

2299
01:39:23,040 --> 01:39:25,119
yeah so we evaluated this approach on

2300
01:39:25,119 --> 01:39:26,960
four real world network topologies

2301
01:39:26,960 --> 01:39:29,679
on wearing stochastic traffic patterns

2302
01:39:29,679 --> 01:39:30,880
and also on real-world

2303
01:39:30,880 --> 01:39:32,800
traffic traces and compared it against

2304
01:39:32,800 --> 01:39:34,080
three algorithms

2305
01:39:34,080 --> 01:39:36,159
and all the results are in the paper but

2306
01:39:36,159 --> 01:39:38,239
here for time reasons i just want to

2307
01:39:38,239 --> 01:39:38,880
show

2308
01:39:38,880 --> 01:39:41,360
one quite representative result on the

2309
01:39:41,360 --> 01:39:44,400
next slide please

2310
01:39:48,639 --> 01:39:50,800
so here in this plot you can see on the

2311
01:39:50,800 --> 01:39:52,719
horizontal axis the number of ingress

2312
01:39:52,719 --> 01:39:53,520
nodes

2313
01:39:53,520 --> 01:39:55,840
so more english nodes indicate higher

2314
01:39:55,840 --> 01:39:57,040
load in the network

2315
01:39:57,040 --> 01:39:59,199
and then on a vertical axis you see the

2316
01:39:59,199 --> 01:40:01,119
percent of successful flows where

2317
01:40:01,119 --> 01:40:03,679
more successful flows are clearly better

2318
01:40:03,679 --> 01:40:04,480
and

2319
01:40:04,480 --> 01:40:06,239
what you can also see is that the blue

2320
01:40:06,239 --> 01:40:08,960
line representing our drl approach

2321
01:40:08,960 --> 01:40:11,040
is significantly better than all of the

2322
01:40:11,040 --> 01:40:13,199
other algorithms which is nice

2323
01:40:13,199 --> 01:40:15,119
and so based on this result and on the

2324
01:40:15,119 --> 01:40:16,639
other results in the paper we can

2325
01:40:16,639 --> 01:40:17,360
conclude

2326
01:40:17,360 --> 01:40:19,679
that our approach does self-adapt to

2327
01:40:19,679 --> 01:40:20,960
varying different traffic loads

2328
01:40:20,960 --> 01:40:22,080
different traffic patterns

2329
01:40:22,080 --> 01:40:24,239
to different topologies and all of that

2330
01:40:24,239 --> 01:40:25,920
without human intervention without

2331
01:40:25,920 --> 01:40:27,199
expert knowledge

2332
01:40:27,199 --> 01:40:29,119
and it does that very well so it does

2333
01:40:29,119 --> 01:40:30,800
process more flow successfully

2334
01:40:30,800 --> 01:40:32,400
than all of the other algorithms that we

2335
01:40:32,400 --> 01:40:34,400
looked at

2336
01:40:34,400 --> 01:40:36,480
it also generalizes to unseen traffic

2337
01:40:36,480 --> 01:40:37,760
patterns without

2338
01:40:37,760 --> 01:40:41,280
any retraining um it supports optimizing

2339
01:40:41,280 --> 01:40:43,360
multiple different objectives so also

2340
01:40:43,360 --> 01:40:45,760
optimizing delay or something in between

2341
01:40:45,760 --> 01:40:47,600
yeah navigating this trade-off between

2342
01:40:47,600 --> 01:40:49,040
multiple objectives

2343
01:40:49,040 --> 01:40:52,400
and it scales to large networks

2344
01:40:52,400 --> 01:40:54,719
next

2345
01:40:59,360 --> 01:41:02,480
yeah so this is already my last slide

2346
01:41:02,480 --> 01:41:04,400
here

2347
01:41:04,400 --> 01:41:06,000
where i tried to list some of the

2348
01:41:06,000 --> 01:41:09,280
challenges that we faced

2349
01:41:10,400 --> 01:41:12,400
when applying i for network management

2350
01:41:12,400 --> 01:41:13,679
so

2351
01:41:13,679 --> 01:41:16,000
i listed some of the challenges that i

2352
01:41:16,000 --> 01:41:16,800
think that we

2353
01:41:16,800 --> 01:41:20,000
solved here um and also some open

2354
01:41:20,000 --> 01:41:20,639
challenges

2355
01:41:20,639 --> 01:41:24,480
at the bottom um

2356
01:41:24,480 --> 01:41:27,119
yeah i'm not sure if i should go through

2357
01:41:27,119 --> 01:41:27,600
this i

2358
01:41:27,600 --> 01:41:32,719
still have two minutes right

2359
01:41:32,719 --> 01:41:35,600
yeah i'll briefly go through this sorry

2360
01:41:35,600 --> 01:41:37,040
um

2361
01:41:37,040 --> 01:41:39,760
so when we started the this research we

2362
01:41:39,760 --> 01:41:41,600
weren't sure how to

2363
01:41:41,600 --> 01:41:44,960
um approach this uh with ai so we

2364
01:41:44,960 --> 01:41:46,239
debated whether to

2365
01:41:46,239 --> 01:41:50,719
look at typical um

2366
01:41:50,719 --> 01:41:53,920
uh sorry typical supervised ai

2367
01:41:53,920 --> 01:41:55,520
approaches but we saw that there's a

2368
01:41:55,520 --> 01:41:56,960
lack of data and

2369
01:41:56,960 --> 01:41:58,719
typical regression or classification

2370
01:41:58,719 --> 01:42:00,000
didn't seem right for our network

2371
01:42:00,000 --> 01:42:02,560
management so we decided to go with rl

2372
01:42:02,560 --> 01:42:03,520
and we still had to

2373
01:42:03,520 --> 01:42:06,159
select a suitable rl approach and we

2374
01:42:06,159 --> 01:42:08,320
went for ddpg because of the support for

2375
01:42:08,320 --> 01:42:10,320
large continuous actions

2376
01:42:10,320 --> 01:42:12,480
then we built the prototype and it did

2377
01:42:12,480 --> 01:42:14,560
not work it did not learn anything

2378
01:42:14,560 --> 01:42:17,679
and so we had to debug there a lot it

2379
01:42:17,679 --> 01:42:18,080
was

2380
01:42:18,080 --> 01:42:19,920
quite difficult to understand why it's

2381
01:42:19,920 --> 01:42:21,600
not working why it's not learning and

2382
01:42:21,600 --> 01:42:23,440
we had to do a lot of iterations here to

2383
01:42:23,440 --> 01:42:24,719
get it to work

2384
01:42:24,719 --> 01:42:26,880
and we had to be very careful in the end

2385
01:42:26,880 --> 01:42:28,560
also with defining our

2386
01:42:28,560 --> 01:42:30,719
mark of decision process particularly

2387
01:42:30,719 --> 01:42:32,239
with the reward function

2388
01:42:32,239 --> 01:42:34,000
to really make sure that this reward

2389
01:42:34,000 --> 01:42:37,199
function expresses what we want

2390
01:42:37,199 --> 01:42:39,760
rather than trying to notch the rl into

2391
01:42:39,760 --> 01:42:41,679
doing something and then it

2392
01:42:41,679 --> 01:42:44,400
learned something different but overall

2393
01:42:44,400 --> 01:42:44,719
uh

2394
01:42:44,719 --> 01:42:46,560
i think we solve these challenges and it

2395
01:42:46,560 --> 01:42:48,719
works and the approach does self-adapt

2396
01:42:48,719 --> 01:42:49,600
to different

2397
01:42:49,600 --> 01:42:52,159
scenarios it does scale it generalizes

2398
01:42:52,159 --> 01:42:54,000
so i do think it's an important step

2399
01:42:54,000 --> 01:42:56,320
towards driverless networks in practice

2400
01:42:56,320 --> 01:42:58,239
but i am also aware of the open

2401
01:42:58,239 --> 01:42:59,600
challenges that

2402
01:42:59,600 --> 01:43:01,600
are still ahead of us at least of some

2403
01:43:01,600 --> 01:43:03,920
here so i do think we need more standard

2404
01:43:03,920 --> 01:43:05,600
benchmarks to compare

2405
01:43:05,600 --> 01:43:07,520
and measure progress in the area so

2406
01:43:07,520 --> 01:43:09,440
there are benchmarks and other

2407
01:43:09,440 --> 01:43:11,360
domains for example video games there's

2408
01:43:11,360 --> 01:43:13,440
this atari benchmark for robotics with

2409
01:43:13,440 --> 01:43:14,480
machuco

2410
01:43:14,480 --> 01:43:16,639
i think we need something like that we

2411
01:43:16,639 --> 01:43:18,239
also need to think about how to bridge

2412
01:43:18,239 --> 01:43:19,840
the gap from simulation to

2413
01:43:19,840 --> 01:43:22,760
reality which is yeah non-trivial

2414
01:43:22,760 --> 01:43:24,320
non-trivializing

2415
01:43:24,320 --> 01:43:26,159
and there we need to think about safe

2416
01:43:26,159 --> 01:43:27,360
and explainable ai

2417
01:43:27,360 --> 01:43:30,719
uh about robustness and even if we get

2418
01:43:30,719 --> 01:43:32,000
that all to work in one

2419
01:43:32,000 --> 01:43:34,480
real network we still need to make sure

2420
01:43:34,480 --> 01:43:36,880
that our approach is generalized and can

2421
01:43:36,880 --> 01:43:38,880
learn online very efficiently if the

2422
01:43:38,880 --> 01:43:40,320
situations change

2423
01:43:40,320 --> 01:43:43,199
in these networks and then ultimately i

2424
01:43:43,199 --> 01:43:44,320
think

2425
01:43:44,320 --> 01:43:46,480
um in this approach we focus on model

2426
01:43:46,480 --> 01:43:47,920
free rl

2427
01:43:47,920 --> 01:43:49,440
so we don't need expert knowledge and

2428
01:43:49,440 --> 01:43:51,280
that's nice but i think it would also be

2429
01:43:51,280 --> 01:43:53,280
nice to take and leverage our existing

2430
01:43:53,280 --> 01:43:54,400
expert knowledge

2431
01:43:54,400 --> 01:43:56,480
combine it with ai to get the best

2432
01:43:56,480 --> 01:43:57,920
results here

2433
01:43:57,920 --> 01:44:00,159
um and i think here model 3 plus model

2434
01:44:00,159 --> 01:44:01,199
based could

2435
01:44:01,199 --> 01:44:04,320
work so still a lot of open challenges i

2436
01:44:04,320 --> 01:44:06,159
think it's very exciting to work

2437
01:44:06,159 --> 01:44:08,960
in this area and i'm happy to take your

2438
01:44:08,960 --> 01:44:09,600
questions

2439
01:44:09,600 --> 01:44:11,840
thanks

2440
01:44:14,960 --> 01:44:18,159
thank you stefan there is a question in

2441
01:44:18,159 --> 01:44:21,440
the chat from throughward

2442
01:44:21,440 --> 01:44:23,920
he was just mentioning causal reasoning

2443
01:44:23,920 --> 01:44:24,880
is it something that

2444
01:44:24,880 --> 01:44:27,440
is part of i mean either your

2445
01:44:27,440 --> 01:44:30,719
conclusions or future work

2446
01:44:31,199 --> 01:44:34,239
um not yet no

2447
01:44:34,239 --> 01:44:38,959
is that part of the um explainable ai

2448
01:44:40,880 --> 01:44:44,239
yeah not yet so i haven't worked or

2449
01:44:44,239 --> 01:44:45,840
thought into the direction of

2450
01:44:45,840 --> 01:44:47,360
explainable ai in any

2451
01:44:47,360 --> 01:44:50,639
detail so far but it sounds very

2452
01:44:50,639 --> 01:44:53,119
interesting

2453
01:44:59,520 --> 01:45:01,600
okay so i mean or stewart.joe you can

2454
01:45:01,600 --> 01:45:03,119
get in touch if you like either

2455
01:45:03,119 --> 01:45:04,800
through the mailing list or directly i

2456
01:45:04,800 --> 01:45:07,280
think all the contacts are available

2457
01:45:07,280 --> 01:45:10,639
jerome you had a question too uh if you

2458
01:45:10,639 --> 01:45:11,520
have time for

2459
01:45:11,520 --> 01:45:13,360
for a quick question maybe you know if

2460
01:45:13,360 --> 01:45:15,199
it's strong maybe you can take offline

2461
01:45:15,199 --> 01:45:15,760
but

2462
01:45:15,760 --> 01:45:18,320
a general question i think you thank you

2463
01:45:18,320 --> 01:45:19,840
stefan and so you

2464
01:45:19,840 --> 01:45:22,560
you pointed out one difficult you have

2465
01:45:22,560 --> 01:45:23,679
several iterations

2466
01:45:23,679 --> 01:45:25,840
in particular creating the the rewriting

2467
01:45:25,840 --> 01:45:26,880
function

2468
01:45:26,880 --> 01:45:30,239
i was wondering if there is any method

2469
01:45:30,239 --> 01:45:30,960
except

2470
01:45:30,960 --> 01:45:34,159
try try and test in order to see if the

2471
01:45:34,159 --> 01:45:36,000
real word function

2472
01:45:36,000 --> 01:45:37,520
or try to evaluate if the rewrite

2473
01:45:37,520 --> 01:45:39,199
function will really measure what you

2474
01:45:39,199 --> 01:45:41,919
want to achieve

2475
01:45:42,000 --> 01:45:44,080
of course here you try i suppose you try

2476
01:45:44,080 --> 01:45:45,360
you see the result and say oh no it's

2477
01:45:45,360 --> 01:45:46,239
not maybe the

2478
01:45:46,239 --> 01:45:48,960
right function but is there something

2479
01:45:48,960 --> 01:45:49,280
more

2480
01:45:49,280 --> 01:45:52,480
let's say methodology to define it

2481
01:45:52,480 --> 01:45:56,000
i don't know just open question

2482
01:45:56,400 --> 01:45:58,320
that's a very good question so i think

2483
01:45:58,320 --> 01:46:00,320
there are a few things you

2484
01:46:00,320 --> 01:46:03,840
or rules to look out for um

2485
01:46:03,840 --> 01:46:06,159
to make sure to include the relevant

2486
01:46:06,159 --> 01:46:07,119
metrics to

2487
01:46:07,119 --> 01:46:11,679
um make sure that the reward is given

2488
01:46:11,679 --> 01:46:14,159
regularly so to notch the rlh in

2489
01:46:14,159 --> 01:46:16,000
consistently into the right direction so

2490
01:46:16,000 --> 01:46:16,480
if

2491
01:46:16,480 --> 01:46:19,360
the reward is very very sparse so only a

2492
01:46:19,360 --> 01:46:21,679
plus one every one million time steps

2493
01:46:21,679 --> 01:46:22,719
then

2494
01:46:22,719 --> 01:46:25,679
it's hard to learn so the agent needs to

2495
01:46:25,679 --> 01:46:26,000
get

2496
01:46:26,000 --> 01:46:28,960
a positive or negative reward or some

2497
01:46:28,960 --> 01:46:30,000
meaningful reward

2498
01:46:30,000 --> 01:46:32,000
uh starting with random action so if

2499
01:46:32,000 --> 01:46:33,280
it's

2500
01:46:33,280 --> 01:46:35,760
if it never gets any relevant reward

2501
01:46:35,760 --> 01:46:37,600
based on these random actions then it

2502
01:46:37,600 --> 01:46:38,159
will never

2503
01:46:38,159 --> 01:46:40,480
learn anything so there are a few things

2504
01:46:40,480 --> 01:46:42,000
to look out for and

2505
01:46:42,000 --> 01:46:43,840
that i have learned to take into account

2506
01:46:43,840 --> 01:46:46,320
but i think there is no

2507
01:46:46,320 --> 01:46:50,080
cookbook for a great reward function yet

2508
01:46:50,080 --> 01:46:52,560
does that answer your question yeah yeah

2509
01:46:52,560 --> 01:46:54,480
perfectly thank you

2510
01:46:54,480 --> 01:46:56,879
awesome

2511
01:47:01,840 --> 01:47:04,960
you you were on the in the queue

2512
01:47:04,960 --> 01:47:07,280
i think we are really running after time

2513
01:47:07,280 --> 01:47:08,800
so if you have a question to this

2514
01:47:08,800 --> 01:47:09,920
presentation please

2515
01:47:09,920 --> 01:47:12,320
bring it offline or directly with uh

2516
01:47:12,320 --> 01:47:13,840
with stefan

2517
01:47:13,840 --> 01:47:16,239
thank you so we will switch to our last

2518
01:47:16,239 --> 01:47:18,000
presentation for for this meeting which

2519
01:47:18,000 --> 01:47:20,159
will be uh

2520
01:47:20,159 --> 01:47:23,679
handled by a student of jerome uh

2521
01:47:23,679 --> 01:47:25,760
jerome i think you have the slides do

2522
01:47:25,760 --> 01:47:27,119
you like to share i think

2523
01:47:27,119 --> 01:47:30,400
yeah matures will reach her okay you can

2524
01:47:30,400 --> 01:47:31,119
request

2525
01:47:31,119 --> 01:47:34,880
the screen sharing here

2526
01:47:34,880 --> 01:47:37,840
yep

2527
01:47:51,040 --> 01:47:54,159
uh can you see my screen

2528
01:47:54,159 --> 01:47:56,879
yes yes

2529
01:47:57,600 --> 01:48:05,840
she can start my field

2530
01:48:10,639 --> 01:48:12,800
okay great uh you can see my screen

2531
01:48:12,800 --> 01:48:13,760
right uh

2532
01:48:13,760 --> 01:48:17,199
it's all good okay uh hello

2533
01:48:17,199 --> 01:48:20,800
everybody uh i am

2534
01:48:20,800 --> 01:48:23,600
i'm a phd student at india and orange i

2535
01:48:23,600 --> 01:48:24,480
work with both

2536
01:48:24,480 --> 01:48:27,119
labs and uh today i'm going to talk

2537
01:48:27,119 --> 01:48:29,040
about

2538
01:48:29,040 --> 01:48:31,600
problems and strategies in implementing

2539
01:48:31,600 --> 01:48:34,719
ai models in network

2540
01:48:34,719 --> 01:48:38,080
with that so uh

2541
01:48:38,080 --> 01:48:40,239
what are some of the benefits of

2542
01:48:40,239 --> 01:48:42,239
in-network computation

2543
01:48:42,239 --> 01:48:46,080
uh so let's start with like what exactly

2544
01:48:46,080 --> 01:48:48,159
is a network computation it's basically

2545
01:48:48,159 --> 01:48:49,920
taking an application or service

2546
01:48:49,920 --> 01:48:53,119
and offloading uh parts of it or

2547
01:48:53,119 --> 01:48:55,760
the whole thing uh completely on the

2548
01:48:55,760 --> 01:48:57,920
network uh saw on the data plane

2549
01:48:57,920 --> 01:49:00,800
essentially uh there are a couple of

2550
01:49:00,800 --> 01:49:02,880
benefits that

2551
01:49:02,880 --> 01:49:05,760
doing doing this has a lot of benefits

2552
01:49:05,760 --> 01:49:06,159
one

2553
01:49:06,159 --> 01:49:08,560
is the latency reduction generally

2554
01:49:08,560 --> 01:49:10,560
speaking you

2555
01:49:10,560 --> 01:49:13,119
services are offered by servers that are

2556
01:49:13,119 --> 01:49:14,159
connected to the network

2557
01:49:14,159 --> 01:49:18,719
and having those services in network

2558
01:49:18,719 --> 01:49:20,159
means that

2559
01:49:20,159 --> 01:49:24,639
they you have a lower response time

2560
01:49:24,639 --> 01:49:26,719
to you know to request because they are

2561
01:49:26,719 --> 01:49:28,719
serviced in network rather than going

2562
01:49:28,719 --> 01:49:30,719
being routed uh you know between

2563
01:49:30,719 --> 01:49:33,840
different nodes and network

2564
01:49:34,400 --> 01:49:36,639
you have better throughput and

2565
01:49:36,639 --> 01:49:37,920
congestion control

2566
01:49:37,920 --> 01:49:41,040
and this can be because of multiple

2567
01:49:41,040 --> 01:49:41,520
reasons

2568
01:49:41,520 --> 01:49:43,280
one of them is because of aggregation

2569
01:49:43,280 --> 01:49:45,840
for example

2570
01:49:47,199 --> 01:49:50,159
several systems for example machine

2571
01:49:50,159 --> 01:49:50,800
learning

2572
01:49:50,800 --> 01:49:53,040
training clusters and stuff they they

2573
01:49:53,040 --> 01:49:55,199
perform aggregation

2574
01:49:55,199 --> 01:49:59,360
and if you can have aggregation perform

2575
01:49:59,360 --> 01:50:00,639
in network then

2576
01:50:00,639 --> 01:50:02,480
of course because the number of packets

2577
01:50:02,480 --> 01:50:03,920
going to the network is considered

2578
01:50:03,920 --> 01:50:07,040
reduced you can you can also

2579
01:50:07,040 --> 01:50:08,880
it also leads to like an increase in

2580
01:50:08,880 --> 01:50:10,800
throughput

2581
01:50:10,800 --> 01:50:14,000
and finally you have the power saving

2582
01:50:14,000 --> 01:50:16,560
benefits

2583
01:50:17,280 --> 01:50:21,119
network network devices

2584
01:50:21,119 --> 01:50:23,599
specifically switches are really

2585
01:50:23,599 --> 01:50:24,239
efficient

2586
01:50:24,239 --> 01:50:27,040
and they're designed to do one specific

2587
01:50:27,040 --> 01:50:28,960
thing that is to classify and route

2588
01:50:28,960 --> 01:50:29,760
traffic

2589
01:50:29,760 --> 01:50:32,880
so leveraging

2590
01:50:32,880 --> 01:50:36,639
that capability of a switch to perform

2591
01:50:36,639 --> 01:50:39,840
to perform computation will save energy

2592
01:50:39,840 --> 01:50:42,480
uh and will uh which will also save

2593
01:50:42,480 --> 01:50:43,199
energy because

2594
01:50:43,199 --> 01:50:46,480
um the end servers can uh you know

2595
01:50:46,480 --> 01:50:49,599
remain idle or uh go into a low power

2596
01:50:49,599 --> 01:50:51,040
state thereby

2597
01:50:51,040 --> 01:50:54,639
the overall energy savings are uh

2598
01:50:54,639 --> 01:50:58,880
are considerable so um

2599
01:50:58,880 --> 01:51:01,679
what are some of the applications uh uh

2600
01:51:01,679 --> 01:51:03,440
that are being pushed uh

2601
01:51:03,440 --> 01:51:06,639
in network onto the data plane

2602
01:51:06,639 --> 01:51:08,320
there are a lot of security applications

2603
01:51:08,320 --> 01:51:10,000
like ddos

2604
01:51:10,000 --> 01:51:12,800
detection algorithms anomaly anomaly

2605
01:51:12,800 --> 01:51:14,239
detection classific

2606
01:51:14,239 --> 01:51:16,880
classification algorithms that are being

2607
01:51:16,880 --> 01:51:17,920
pushed

2608
01:51:17,920 --> 01:51:21,520
so this could be uh something like a

2609
01:51:21,520 --> 01:51:23,679
logistic regression function that runs

2610
01:51:23,679 --> 01:51:25,599
on a switch

2611
01:51:25,599 --> 01:51:28,400
and checks flows to see whether they are

2612
01:51:28,400 --> 01:51:29,280
uh

2613
01:51:29,280 --> 01:51:31,679
you know whether they are anomalous or

2614
01:51:31,679 --> 01:51:32,880
not

2615
01:51:32,880 --> 01:51:36,800
you have low latency applications uh

2616
01:51:36,800 --> 01:51:41,520
this could be uh dns caches uh

2617
01:51:41,520 --> 01:51:43,679
which uh you know which rest completely

2618
01:51:43,679 --> 01:51:45,679
on the switch

2619
01:51:45,679 --> 01:51:48,320
stuff like that uh you have scheduling

2620
01:51:48,320 --> 01:51:49,199
and congestion

2621
01:51:49,199 --> 01:51:52,480
uh control algorithms uh like rcp which

2622
01:51:52,480 --> 01:51:54,400
are being completely pushed uh

2623
01:51:54,400 --> 01:51:57,440
uh in which have been uh you know

2624
01:51:57,440 --> 01:51:59,440
there have been various uh papers uh

2625
01:51:59,440 --> 01:52:02,000
related to this uh

2626
01:52:02,000 --> 01:52:05,520
then you have a network

2627
01:52:05,520 --> 01:52:08,239
aggregation

2628
01:52:08,639 --> 01:52:11,679
network aggregation use cases where this

2629
01:52:11,679 --> 01:52:13,280
mostly happens in machine learning

2630
01:52:13,280 --> 01:52:16,240
clusters and stuff like that where

2631
01:52:16,240 --> 01:52:18,480
[Music]

2632
01:52:18,480 --> 01:52:22,400
aggregation is done in network to to

2633
01:52:22,400 --> 01:52:25,920
to kind of speed up the training process

2634
01:52:25,920 --> 01:52:30,960
and then another common

2635
01:52:30,960 --> 01:52:34,080
use we see is for device recognition

2636
01:52:34,080 --> 01:52:35,920
using

2637
01:52:35,920 --> 01:52:37,760
classification algorithms like k-means

2638
01:52:37,760 --> 01:52:40,639
etc etc

2639
01:52:40,880 --> 01:52:44,639
so what are some of the

2640
01:52:44,639 --> 01:52:48,639
uh what kinds of hardware

2641
01:52:48,639 --> 01:52:51,199
is generally used for in network uh

2642
01:52:51,199 --> 01:52:52,400
computation

2643
01:52:52,400 --> 01:52:55,199
so the traditional method is using

2644
01:52:55,199 --> 01:52:56,880
middle boxes and you have

2645
01:52:56,880 --> 01:52:59,360
three types you have the the the most

2646
01:52:59,360 --> 01:53:01,520
basic dedicated custom hardware middle

2647
01:53:01,520 --> 01:53:03,440
box which is designed which is purpose

2648
01:53:03,440 --> 01:53:04,560
built to do

2649
01:53:04,560 --> 01:53:07,280
one specific task whether it's a

2650
01:53:07,280 --> 01:53:09,920
fireball or some sort of acceleration

2651
01:53:09,920 --> 01:53:13,360
etc etc and uh this is

2652
01:53:13,360 --> 01:53:16,239
uh now this this this sort of hardware

2653
01:53:16,239 --> 01:53:18,159
you cannot really change it you cannot

2654
01:53:18,159 --> 01:53:20,400
really

2655
01:53:20,639 --> 01:53:22,719
do anything else with it then you have

2656
01:53:22,719 --> 01:53:24,719
the more recent and more flexible ones

2657
01:53:24,719 --> 01:53:26,480
that are coming out which is uh

2658
01:53:26,480 --> 01:53:30,080
with the uh with the the x86 middle

2659
01:53:30,080 --> 01:53:31,679
boxes which is basically a server with a

2660
01:53:31,679 --> 01:53:32,480
really fast

2661
01:53:32,480 --> 01:53:34,800
smart nic and you have all sorts of

2662
01:53:34,800 --> 01:53:36,880
stuff like snort which is a

2663
01:53:36,880 --> 01:53:39,920
ids network ids and the more recent ones

2664
01:53:39,920 --> 01:53:40,480
like

2665
01:53:40,480 --> 01:53:44,560
nfv uh uh

2666
01:53:44,560 --> 01:53:48,159
are also uh you know becoming more

2667
01:53:48,159 --> 01:53:52,000
uh prominent uh aws has a a good

2668
01:53:52,000 --> 01:53:54,239
platform for that it's called nfv

2669
01:53:54,239 --> 01:53:57,040
mano and then you have the hardware

2670
01:53:57,040 --> 01:53:57,920
switch-based

2671
01:53:57,920 --> 01:54:01,920
uh in-network implementation this has

2672
01:54:01,920 --> 01:54:03,199
come because

2673
01:54:03,199 --> 01:54:06,800
this this

2674
01:54:06,800 --> 01:54:08,960
kind of came about because of two major

2675
01:54:08,960 --> 01:54:10,000
things one

2676
01:54:10,000 --> 01:54:13,679
because of a new kind of architecture

2677
01:54:13,679 --> 01:54:18,239
in sdn called rmt which is

2678
01:54:19,199 --> 01:54:22,400
a programmable architecture

2679
01:54:22,400 --> 01:54:25,599
and languages like p4 which allows you

2680
01:54:25,599 --> 01:54:26,639
to describe

2681
01:54:26,639 --> 01:54:30,719
uh switch behavior on

2682
01:54:31,360 --> 01:54:35,040
on switches and smart mix etc etc

2683
01:54:35,040 --> 01:54:38,239
so uh tofino is one example of

2684
01:54:38,239 --> 01:54:41,920
uh such a uh a chip an rnp chip which

2685
01:54:41,920 --> 01:54:43,119
can

2686
01:54:43,119 --> 01:54:46,320
you know be uh which can be

2687
01:54:46,320 --> 01:54:50,880
uh controlled by programmatically

2688
01:54:50,880 --> 01:54:52,960
so what are some of the drawbacks and

2689
01:54:52,960 --> 01:54:55,119
limitations middle boxes

2690
01:54:55,119 --> 01:54:57,199
generally tend to increase latency

2691
01:54:57,199 --> 01:54:58,560
because you have to go through

2692
01:54:58,560 --> 01:55:00,880
uh the the network stack of these

2693
01:55:00,880 --> 01:55:02,560
devices

2694
01:55:02,560 --> 01:55:04,560
they are generally purpose-built not

2695
01:55:04,560 --> 01:55:06,159
flexible

2696
01:55:06,159 --> 01:55:09,199
and each new service you want to add

2697
01:55:09,199 --> 01:55:11,199
generally speaking um you have to buy

2698
01:55:11,199 --> 01:55:14,159
the hardware and

2699
01:55:14,159 --> 01:55:16,000
this could this could add to additional

2700
01:55:16,000 --> 01:55:17,360
costs

2701
01:55:17,360 --> 01:55:21,360
and having many metal boxes for various

2702
01:55:21,360 --> 01:55:22,560
services could

2703
01:55:22,560 --> 01:55:25,760
easily clog up the network really fast

2704
01:55:25,760 --> 01:55:28,560
programmable switches on the other hand

2705
01:55:28,560 --> 01:55:30,560
switches in general exist in the network

2706
01:55:30,560 --> 01:55:34,159
so they're already there and

2707
01:55:34,719 --> 01:55:37,599
so that's one of its advantages but the

2708
01:55:37,599 --> 01:55:38,560
the

2709
01:55:38,560 --> 01:55:40,480
they're they're they're really

2710
01:55:40,480 --> 01:55:41,840
restrictive uh

2711
01:55:41,840 --> 01:55:45,040
devices so to speak they they don't have

2712
01:55:45,040 --> 01:55:46,000
much memory on

2713
01:55:46,000 --> 01:55:50,159
board um they

2714
01:55:50,159 --> 01:55:53,280
they don't support uh many of uh for ai

2715
01:55:53,280 --> 01:55:55,760
especially we many of the functions used

2716
01:55:55,760 --> 01:55:57,440
are real valued functions and

2717
01:55:57,440 --> 01:56:00,719
they they're not supported uh natively

2718
01:56:00,719 --> 01:56:03,119
by any of the programmable rmt or any of

2719
01:56:03,119 --> 01:56:04,800
the profiles which is out there

2720
01:56:04,800 --> 01:56:08,560
any of the models out there uh

2721
01:56:08,560 --> 01:56:12,159
most of the logic you can you can

2722
01:56:12,159 --> 01:56:15,280
deploy on a switch is relatively simple

2723
01:56:15,280 --> 01:56:16,800
so they don't support

2724
01:56:16,800 --> 01:56:20,400
complex uh uh programs

2725
01:56:20,400 --> 01:56:22,639
so speak um they have very basic

2726
01:56:22,639 --> 01:56:25,199
instruction sets uh bitwise operations

2727
01:56:25,199 --> 01:56:26,719
basic arithmetic

2728
01:56:26,719 --> 01:56:29,440
bit field editions stuff like that they

2729
01:56:29,440 --> 01:56:31,599
do not have complex instruction sets

2730
01:56:31,599 --> 01:56:31,920
like

2731
01:56:31,920 --> 01:56:35,280
uh middle boxes do and

2732
01:56:35,280 --> 01:56:37,679
generally their pipeline is linear in

2733
01:56:37,679 --> 01:56:38,719
nature

2734
01:56:38,719 --> 01:56:42,560
what that means is that it's um

2735
01:56:42,560 --> 01:56:45,760
it's forward-facing it's it's it's

2736
01:56:45,760 --> 01:56:47,440
it generally goes in one direction you

2737
01:56:47,440 --> 01:56:49,040
cannot go back a step

2738
01:56:49,040 --> 01:56:52,239
it's um uh it's linear in that

2739
01:56:52,239 --> 01:56:53,920
in that way so many of the algorithms

2740
01:56:53,920 --> 01:56:56,159
you we use for

2741
01:56:56,159 --> 01:57:00,159
real value computation etc they are

2742
01:57:00,159 --> 01:57:02,080
they have loops in them and you know

2743
01:57:02,080 --> 01:57:04,000
they have structures like that

2744
01:57:04,000 --> 01:57:06,239
and they're harder to implement because

2745
01:57:06,239 --> 01:57:08,000
of this

2746
01:57:08,000 --> 01:57:11,520
and of course um uh

2747
01:57:11,520 --> 01:57:15,040
complex feature sets uh um

2748
01:57:15,040 --> 01:57:17,920
are not available on switches as of

2749
01:57:17,920 --> 01:57:19,760
right now

2750
01:57:19,760 --> 01:57:24,480
so um so to counter some of those uh

2751
01:57:24,480 --> 01:57:27,040
drawbacks uh uh and like limitations of

2752
01:57:27,040 --> 01:57:28,080
switches

2753
01:57:28,080 --> 01:57:30,400
these are some of the current solutions

2754
01:57:30,400 --> 01:57:31,599
that are out there that have

2755
01:57:31,599 --> 01:57:34,320
you know that have been published over

2756
01:57:34,320 --> 01:57:34,880
the

2757
01:57:34,880 --> 01:57:37,679
the last few years the most common way

2758
01:57:37,679 --> 01:57:40,639
to do computation is using lookup tables

2759
01:57:40,639 --> 01:57:44,320
and luca tables are very popular because

2760
01:57:44,320 --> 01:57:46,800
essentially switches do just that they

2761
01:57:46,800 --> 01:57:47,760
look up

2762
01:57:47,760 --> 01:57:51,040
values and then they classify packets

2763
01:57:51,040 --> 01:57:53,840
based on the looked up value so

2764
01:57:53,840 --> 01:57:56,960
lookup tables are very popular and

2765
01:57:56,960 --> 01:58:00,080
several actually

2766
01:58:00,080 --> 01:58:03,440
most of them most of the research into

2767
01:58:03,440 --> 01:58:06,080
computation and such in network is on a

2768
01:58:06,080 --> 01:58:08,239
switch is using lookup tables

2769
01:58:08,239 --> 01:58:11,199
um so this is one example i've given uh

2770
01:58:11,199 --> 01:58:12,800
illusive which was

2771
01:58:12,800 --> 01:58:16,480
um yeah then

2772
01:58:16,480 --> 01:58:20,080
floating point numbers uh generally uh

2773
01:58:20,080 --> 01:58:23,280
most uh python like they also use

2774
01:58:23,280 --> 01:58:24,880
floating point numbers uh single

2775
01:58:24,880 --> 01:58:26,880
precision floating point numbers doubles

2776
01:58:26,880 --> 01:58:30,239
stuff like that uh this is considerably

2777
01:58:30,239 --> 01:58:30,719
hard

2778
01:58:30,719 --> 01:58:34,480
in a switch because of because of the

2779
01:58:34,480 --> 01:58:36,638
way

2780
01:58:37,840 --> 01:58:40,880
the data types it supports and the way

2781
01:58:40,880 --> 01:58:42,320
data is processed

2782
01:58:42,320 --> 01:58:45,280
and an alternative could be to use fixed

2783
01:58:45,280 --> 01:58:46,320
point numbers

2784
01:58:46,320 --> 01:58:49,840
which can which are much easier to

2785
01:58:49,840 --> 01:58:52,159
handle

2786
01:58:52,880 --> 01:58:56,560
some uh many many of the

2787
01:58:56,560 --> 01:58:59,040
so many of the models require complex

2788
01:58:59,040 --> 01:59:00,159
features

2789
01:59:00,159 --> 01:59:01,760
and these features are not easily

2790
01:59:01,760 --> 01:59:03,760
accessible on a switch

2791
01:59:03,760 --> 01:59:06,400
and several papers have addressed this

2792
01:59:06,400 --> 01:59:06,800
by

2793
01:59:06,800 --> 01:59:10,320
adding by taking by using other external

2794
01:59:10,320 --> 01:59:11,679
servers to

2795
01:59:11,679 --> 01:59:13,920
embed features in a header packet header

2796
01:59:13,920 --> 01:59:16,159
and then extract them on the switch for

2797
01:59:16,159 --> 01:59:19,760
for for computation uh

2798
01:59:19,760 --> 01:59:22,719
another uh strategy is to break down the

2799
01:59:22,719 --> 01:59:23,360
uh

2800
01:59:23,360 --> 01:59:25,360
a task into many sub tasks among

2801
01:59:25,360 --> 01:59:26,960
multiple switches in the network

2802
01:59:26,960 --> 01:59:28,960
and then route them through the the

2803
01:59:28,960 --> 01:59:30,159
combined

2804
01:59:30,159 --> 01:59:33,199
pipeline so to speak

2805
01:59:34,320 --> 01:59:37,280
and there have also been models where

2806
01:59:37,280 --> 01:59:38,639
for example

2807
01:59:38,639 --> 01:59:41,760
where you split uh tasks which switch

2808
01:59:41,760 --> 01:59:42,719
can do better

2809
01:59:42,719 --> 01:59:45,119
on the switch and some uh and certain

2810
01:59:45,119 --> 01:59:47,280
parts of the computation on the cpu

2811
01:59:47,280 --> 01:59:50,800
this is one uh example with uh

2812
01:59:50,800 --> 01:59:52,480
it's a system called banana split which

2813
01:59:52,480 --> 01:59:55,040
split uh which splits one a certain part

2814
01:59:55,040 --> 01:59:56,880
of a binary neural network

2815
01:59:56,880 --> 01:59:59,760
uh on the on the on a smart nic and the

2816
01:59:59,760 --> 02:00:00,560
other part

2817
02:00:00,560 --> 02:00:02,960
is done on the cpu of a general purpose

2818
02:00:02,960 --> 02:00:03,920
computer

2819
02:00:03,920 --> 02:00:07,119
so that um

2820
02:00:07,119 --> 02:00:10,480
so uh this uh some of the

2821
02:00:10,480 --> 02:00:13,040
the work i have been involved with over

2822
02:00:13,040 --> 02:00:14,560
the last

2823
02:00:14,560 --> 02:00:18,000
year is has been to enable it

2824
02:00:18,000 --> 02:00:21,679
has been to create uh pipelines

2825
02:00:21,679 --> 02:00:26,080
for programmable switches to uh

2826
02:00:26,080 --> 02:00:28,239
to to implement real value functions so

2827
02:00:28,239 --> 02:00:29,679
the idea is to take a real value

2828
02:00:29,679 --> 02:00:30,639
function

2829
02:00:30,639 --> 02:00:33,840
and then uh implement a pipeline uh

2830
02:00:33,840 --> 02:00:35,760
which will compute that real value

2831
02:00:35,760 --> 02:00:38,159
function

2832
02:00:38,320 --> 02:00:42,080
so uh the idea we want to provide a

2833
02:00:42,080 --> 02:00:43,199
platform

2834
02:00:43,199 --> 02:00:46,719
uh so that we could deploy uh all sorts

2835
02:00:46,719 --> 02:00:48,560
of models machine learning models

2836
02:00:48,560 --> 02:00:51,599
um and other kinds of models uh in

2837
02:00:51,599 --> 02:00:52,480
network

2838
02:00:52,480 --> 02:00:55,679
and we wanted a a a sort of framework

2839
02:00:55,679 --> 02:00:58,880
that could easily generate that

2840
02:00:58,880 --> 02:01:01,679
so uh how do we do this we start by it's

2841
02:01:01,679 --> 02:01:02,880
first step so i'm going to

2842
02:01:02,880 --> 02:01:05,679
briefly describe how it works we start

2843
02:01:05,679 --> 02:01:07,119
by taking a function

2844
02:01:07,119 --> 02:01:09,440
and we start by defining these

2845
02:01:09,440 --> 02:01:11,360
elementary operations like addition

2846
02:01:11,360 --> 02:01:12,719
logarithm division

2847
02:01:12,719 --> 02:01:15,520
and we implement them using the

2848
02:01:15,520 --> 02:01:17,440
mechanisms and the instruction sets that

2849
02:01:17,440 --> 02:01:18,560
are provided by the switch

2850
02:01:18,560 --> 02:01:22,080
that's the first step then uh given a

2851
02:01:22,080 --> 02:01:25,119
function so take this f of x y we break

2852
02:01:25,119 --> 02:01:27,199
it down into its elementary operations

2853
02:01:27,199 --> 02:01:27,760
and we

2854
02:01:27,760 --> 02:01:29,360
sort of create a graph a directory

2855
02:01:29,360 --> 02:01:30,960
cyclograph

2856
02:01:30,960 --> 02:01:33,199
always uh it shows all the dependencies

2857
02:01:33,199 --> 02:01:35,280
and all the operators and variables that

2858
02:01:35,280 --> 02:01:36,800
exist

2859
02:01:36,800 --> 02:01:40,000
then we constrained this graph

2860
02:01:40,000 --> 02:01:42,159
for example if x represents a port

2861
02:01:42,159 --> 02:01:43,679
number then we know that x can be

2862
02:01:43,679 --> 02:01:45,440
between 0 and

2863
02:01:45,440 --> 02:01:49,280
65 353 if it's x represents bandwidth

2864
02:01:49,280 --> 02:01:50,639
then we know the bandwidth of the port

2865
02:01:50,639 --> 02:01:51,599
so that could be

2866
02:01:51,599 --> 02:01:53,840
you know a constraint uh another

2867
02:01:53,840 --> 02:01:54,880
constraint here is

2868
02:01:54,880 --> 02:01:57,760
uh the sine node over here we know it

2869
02:01:57,760 --> 02:02:00,000
will always output something between -1

2870
02:02:00,000 --> 02:02:00,719
and 1.

2871
02:02:00,719 --> 02:02:02,560
so we know the input to log for example

2872
02:02:02,560 --> 02:02:03,760
is always going to be written

2873
02:02:03,760 --> 02:02:06,400
so we constrained we assign constraints

2874
02:02:06,400 --> 02:02:07,119
to each

2875
02:02:07,119 --> 02:02:10,320
node and and then we perform

2876
02:02:10,320 --> 02:02:14,239
aggregation since we know that the input

2877
02:02:14,239 --> 02:02:16,239
to log is always going to be between -1

2878
02:02:16,239 --> 02:02:17,520
and 1 in this case

2879
02:02:17,520 --> 02:02:20,480
we don't need to account we don't need

2880
02:02:20,480 --> 02:02:21,119
to store

2881
02:02:21,119 --> 02:02:24,560
any uh pre-computation that uh for any

2882
02:02:24,560 --> 02:02:25,280
of the other

2883
02:02:25,280 --> 02:02:28,400
uh possible values just for that so we

2884
02:02:28,400 --> 02:02:32,000
aggregate we minimize our our graph here

2885
02:02:32,000 --> 02:02:34,800
and then we substitute so back here we

2886
02:02:34,800 --> 02:02:36,800
had defined

2887
02:02:36,800 --> 02:02:39,679
a bunch of primitives for each

2888
02:02:39,679 --> 02:02:41,679
elementary operations we substitute them

2889
02:02:41,679 --> 02:02:42,159
here

2890
02:02:42,159 --> 02:02:45,199
and we we further simplify it we

2891
02:02:45,199 --> 02:02:46,320
simplify the graph

2892
02:02:46,320 --> 02:02:49,599
and and then we use a combination of

2893
02:02:49,599 --> 02:02:50,960
linear programs

2894
02:02:50,960 --> 02:02:54,239
uh linear programming to place the

2895
02:02:54,239 --> 02:02:54,880
various

2896
02:02:54,880 --> 02:02:58,080
uh compu place the various nodes of this

2897
02:02:58,080 --> 02:03:00,159
computer graph

2898
02:03:00,159 --> 02:03:03,360
on the switch pipeline and we also solve

2899
02:03:03,360 --> 02:03:04,880
something called the rectangle packing

2900
02:03:04,880 --> 02:03:07,440
problem which we've mapped to this

2901
02:03:07,440 --> 02:03:11,440
to reduce error basically

2902
02:03:11,440 --> 02:03:14,719
so in conclusion uh

2903
02:03:14,719 --> 02:03:17,440
uh in-network computing offers several

2904
02:03:17,440 --> 02:03:18,239
advantages

2905
02:03:18,239 --> 02:03:20,239
unlike increased throughput latency

2906
02:03:20,239 --> 02:03:22,000
reduction power saving

2907
02:03:22,000 --> 02:03:26,080
uh middle boxes and programs

2908
02:03:26,639 --> 02:03:29,679
the most common ways of in-network

2909
02:03:29,679 --> 02:03:31,360
computations achieved

2910
02:03:31,360 --> 02:03:34,000
uh programmable circuits uh despite

2911
02:03:34,000 --> 02:03:34,560
being fast

2912
02:03:34,560 --> 02:03:40,159
heavily resource limited are

2913
02:03:41,679 --> 02:03:43,599
are the most common way of achieving

2914
02:03:43,599 --> 02:03:44,800
this um

2915
02:03:44,800 --> 02:03:46,560
uh several workarounds have been

2916
02:03:46,560 --> 02:03:48,320
proposed um

2917
02:03:48,320 --> 02:03:51,679
uh as i mentioned before uh

2918
02:03:51,679 --> 02:03:55,199
currently uh we given the state of

2919
02:03:55,199 --> 02:03:56,000
things right now we

2920
02:03:56,000 --> 02:03:58,400
are far from having any sort of complex

2921
02:03:58,400 --> 02:03:59,440
functions

2922
02:03:59,440 --> 02:04:01,679
several limitations we can have small

2923
02:04:01,679 --> 02:04:03,119
functions but not anything

2924
02:04:03,119 --> 02:04:06,800
complex or a full network for example

2925
02:04:06,800 --> 02:04:10,000
we have managed to implement logistical

2926
02:04:10,000 --> 02:04:11,360
regression functions

2927
02:04:11,360 --> 02:04:13,440
up to four variables k-mean

2928
02:04:13,440 --> 02:04:15,360
classifications in our lab

2929
02:04:15,360 --> 02:04:17,360
and we are planning on expanding it from

2930
02:04:17,360 --> 02:04:19,280
a single switch into

2931
02:04:19,280 --> 02:04:23,520
a whole network so you you provide a

2932
02:04:23,520 --> 02:04:25,280
real value function and then it kind of

2933
02:04:25,280 --> 02:04:27,199
splits amongst multiple switches in the

2934
02:04:27,199 --> 02:04:28,800
network and then

2935
02:04:28,800 --> 02:04:30,880
you know routes traffic based on the

2936
02:04:30,880 --> 02:04:32,480
computation that needs to be performed

2937
02:04:32,480 --> 02:04:34,320
so we are currently working on that

2938
02:04:34,320 --> 02:04:37,520
yeah thank you thank you very much

2939
02:04:37,520 --> 02:04:39,119
questions

2940
02:04:39,119 --> 02:04:40,960
unfortunately we're a bit running out of

2941
02:04:40,960 --> 02:04:42,159
time and

2942
02:04:42,159 --> 02:04:44,960
we we had no time to take questions

2943
02:04:44,960 --> 02:04:46,800
online so as

2944
02:04:46,800 --> 02:04:49,440
as for the first talk i mean if you have

2945
02:04:49,440 --> 02:04:51,280
any question you can just send to the

2946
02:04:51,280 --> 02:04:52,560
mailing list

2947
02:04:52,560 --> 02:04:55,679
and yeah i'm sorry because we have

2948
02:04:55,679 --> 02:04:56,159
strict

2949
02:04:56,159 --> 02:04:59,760
strict deadline releases type sorry so

2950
02:04:59,760 --> 02:05:03,199
thank you um yes so maybe again i just

2951
02:05:03,199 --> 02:05:03,920
want to

2952
02:05:03,920 --> 02:05:06,800
thank you all the all the presenters all

2953
02:05:06,800 --> 02:05:08,639
the participants and sorry for presenter

2954
02:05:08,639 --> 02:05:09,280
to

2955
02:05:09,280 --> 02:05:12,639
to be uh to to be a bit uh like that to

2956
02:05:12,639 --> 02:05:13,199
cut the

2957
02:05:13,199 --> 02:05:15,520
the the question time and so on i will

2958
02:05:15,520 --> 02:05:16,960
try to to

2959
02:05:16,960 --> 02:05:19,280
have a meeting a bit less dance for for

2960
02:05:19,280 --> 02:05:20,400
next time

2961
02:05:20,400 --> 02:05:23,920
um yes so thank you again and

2962
02:05:23,920 --> 02:05:26,960
so as as usual we will uh you will put

2963
02:05:26,960 --> 02:05:29,040
minutes online there will be the

2964
02:05:29,040 --> 02:05:31,280
the recording available on the youtube

2965
02:05:31,280 --> 02:05:32,560
channel

2966
02:05:32,560 --> 02:05:36,159
and uh i hope to talk to you soon i'll

2967
02:05:36,159 --> 02:05:37,119
see you soon

2968
02:05:37,119 --> 02:05:40,239
uh in the close future so i don't know

2969
02:05:40,239 --> 02:05:43,440
if you want to say something else

2970
02:05:43,440 --> 02:05:46,960
no same as usual thank you for attending

2971
02:05:46,960 --> 02:05:48,960
the meeting we keep in touch

2972
02:05:48,960 --> 02:05:51,599
uh and we will send you information

2973
02:05:51,599 --> 02:05:53,520
about our next meeting

2974
02:05:53,520 --> 02:05:57,040
probably in april we can we can meet

2975
02:05:57,040 --> 02:06:03,280
in gather town now if you want people

2976
02:06:03,280 --> 02:06:07,280
okay thanks a lot for the meeting

2977
02:06:07,280 --> 02:06:12,000
goodbye everyone bye everyone thank you

2978
02:06:14,840 --> 02:06:17,840
bye

