1
00:00:28,840 --> 00:00:31,840
foreign

2
00:00:32,399 --> 00:00:33,920
so ben shall we get started i think

3
00:00:33,920 --> 00:00:36,079
we're at the hour

4
00:00:36,079 --> 00:00:38,559
yeah we are at the top of the hour so

5
00:00:38,559 --> 00:00:39,120
let's

6
00:00:39,120 --> 00:00:42,239
go ahead uh this is sag the security

7
00:00:42,239 --> 00:00:42,640
area

8
00:00:42,640 --> 00:00:45,440
advisory group i'm jeff kadek and roman

9
00:00:45,440 --> 00:00:46,000
do you know

10
00:00:46,000 --> 00:00:49,120
you uh already here talking some so we

11
00:00:49,120 --> 00:00:49,520
are the

12
00:00:49,520 --> 00:00:53,120
80s and let's get started hopefully

13
00:00:53,120 --> 00:00:56,079
everybody has seen the note well already

14
00:00:56,079 --> 00:00:56,480
the

15
00:00:56,480 --> 00:01:00,320
standard itf ipr rule supply

16
00:01:00,320 --> 00:01:02,160
uh if you have not seen the note well

17
00:01:02,160 --> 00:01:04,479
already please do take a look

18
00:01:04,479 --> 00:01:06,640
uh those are the rules that we operate

19
00:01:06,640 --> 00:01:08,560
under

20
00:01:08,560 --> 00:01:12,560
so let's keep going

21
00:01:12,560 --> 00:01:15,600
so we've got good

22
00:01:15,600 --> 00:01:17,280
oh sorry i was just gonna say i mean we

23
00:01:17,280 --> 00:01:19,280
we have the specific agenda but before

24
00:01:19,280 --> 00:01:19,600
we

25
00:01:19,600 --> 00:01:21,920
even get into the details of the agenda

26
00:01:21,920 --> 00:01:22,880
i just wanted to

27
00:01:22,880 --> 00:01:24,880
provide kind of a top-line view of what

28
00:01:24,880 --> 00:01:26,560
ben and i have been thinking

29
00:01:26,560 --> 00:01:28,560
thinking about this i mean we really we

30
00:01:28,560 --> 00:01:30,640
realized that the virtual format

31
00:01:30,640 --> 00:01:32,960
is incredibly difficult for us and i

32
00:01:32,960 --> 00:01:34,560
think we've been doing as good of a job

33
00:01:34,560 --> 00:01:35,200
as we can

34
00:01:35,200 --> 00:01:37,040
kind of with that work but one of the

35
00:01:37,040 --> 00:01:38,720
things that we're always cognizant of

36
00:01:38,720 --> 00:01:39,759
that we may have lost

37
00:01:39,759 --> 00:01:42,399
is just that informal discussion that

38
00:01:42,399 --> 00:01:44,159
leads to situational awareness about

39
00:01:44,159 --> 00:01:46,320
what's happening related to sex issues

40
00:01:46,320 --> 00:01:48,640
across the itf so one of the things that

41
00:01:48,640 --> 00:01:50,079
we're trying really hard and you see

42
00:01:50,079 --> 00:01:52,000
that reflected perhaps in the agenda

43
00:01:52,000 --> 00:01:54,000
that we're a bit more internally focused

44
00:01:54,000 --> 00:01:55,280
that we may have been

45
00:01:55,280 --> 00:01:57,920
pre-pandemic and that's an explicit

46
00:01:57,920 --> 00:01:58,880
choice what we're

47
00:01:58,880 --> 00:02:01,840
trying to do is to find topics perhaps

48
00:02:01,840 --> 00:02:02,880
across the itf

49
00:02:02,880 --> 00:02:05,600
and just bring them to sag to to provide

50
00:02:05,600 --> 00:02:06,880
that visibility

51
00:02:06,880 --> 00:02:08,560
you know one part of that is you know

52
00:02:08,560 --> 00:02:10,000
we've been harping i think a little

53
00:02:10,000 --> 00:02:11,680
harder than usual about getting working

54
00:02:11,680 --> 00:02:12,640
group summaries

55
00:02:12,640 --> 00:02:14,560
as well we think this is just really

56
00:02:14,560 --> 00:02:15,680
important to

57
00:02:15,680 --> 00:02:17,200
you know just take the time to to

58
00:02:17,200 --> 00:02:19,120
summarize what's happening across

59
00:02:19,120 --> 00:02:21,280
just sec and make that a little more

60
00:02:21,280 --> 00:02:23,440
easily accessible to everyone else

61
00:02:23,440 --> 00:02:26,640
both in sag and outside and

62
00:02:26,640 --> 00:02:28,800
the other thing you'll you'll notice is

63
00:02:28,800 --> 00:02:31,840
we have oauth at the end of the agenda

64
00:02:31,840 --> 00:02:33,280
and this is actually going to be the

65
00:02:33,280 --> 00:02:35,280
second installment of what we started

66
00:02:35,280 --> 00:02:37,040
last time with dots

67
00:02:37,040 --> 00:02:40,480
which was finding sec work that has

68
00:02:40,480 --> 00:02:43,040
made a lot of progress on on their

69
00:02:43,040 --> 00:02:44,319
deliverables and to

70
00:02:44,319 --> 00:02:46,160
just really step back from the

71
00:02:46,160 --> 00:02:47,440
individual documents

72
00:02:47,440 --> 00:02:49,519
and have the top level kind of

73
00:02:49,519 --> 00:02:51,360
introduction to what that what what that

74
00:02:51,360 --> 00:02:53,440
work is about and what it's doing and

75
00:02:53,440 --> 00:02:55,120
potentially what where it's headed in

76
00:02:55,120 --> 00:02:56,800
the marketplace and so

77
00:02:56,800 --> 00:02:58,720
it's oauth's turn to do this and we're

78
00:02:58,720 --> 00:03:00,319
going to continue choosing working

79
00:03:00,319 --> 00:03:00,720
groups

80
00:03:00,720 --> 00:03:03,440
in future meetings and the choice of

81
00:03:03,440 --> 00:03:04,239
oauth is

82
00:03:04,239 --> 00:03:05,760
quite kind of deliberate we had a couple

83
00:03:05,760 --> 00:03:08,000
of options i mean this is also a

84
00:03:08,000 --> 00:03:08,879
response to

85
00:03:08,879 --> 00:03:10,000
you know we got some questions that we

86
00:03:10,000 --> 00:03:11,760
don't understand what oauth is working

87
00:03:11,760 --> 00:03:13,280
on and what oauth is

88
00:03:13,280 --> 00:03:15,680
and so we hope to hope to address some

89
00:03:15,680 --> 00:03:18,879
of that there as well yeah and of course

90
00:03:18,879 --> 00:03:20,640
if you have a topic that you want to

91
00:03:20,640 --> 00:03:22,319
hear about please feel free to

92
00:03:22,319 --> 00:03:23,760
let us know we're always open to

93
00:03:23,760 --> 00:03:26,319
feedback yeah absolutely i mean if

94
00:03:26,319 --> 00:03:28,080
the if the group has feedback on how we

95
00:03:28,080 --> 00:03:29,280
can help with that awareness i mean

96
00:03:29,280 --> 00:03:30,400
we're all ears

97
00:03:30,400 --> 00:03:32,080
okay thanks let's let's talk through the

98
00:03:32,080 --> 00:03:34,640
the agenda

99
00:03:36,080 --> 00:03:38,239
yeah i mean i i guess it's been up on

100
00:03:38,239 --> 00:03:39,200
the on the screen

101
00:03:39,200 --> 00:03:42,239
uh if anybody has uh any

102
00:03:42,239 --> 00:03:45,120
suggested edits or changes uh you can

103
00:03:45,120 --> 00:03:47,120
join the queue but we should probably

104
00:03:47,120 --> 00:03:48,959
just keep going because we do not have

105
00:03:48,959 --> 00:03:50,239
too much time

106
00:03:50,239 --> 00:03:53,840
left in scheduling okay so i heard new

107
00:03:53,840 --> 00:03:54,959
agenda bashes

108
00:03:54,959 --> 00:03:56,560
all right did you see any sorry i don't

109
00:03:56,560 --> 00:03:58,080
have my window up i'm trying to figure

110
00:03:58,080 --> 00:03:59,599
out

111
00:03:59,599 --> 00:04:03,040
okay excellent let's move on

112
00:04:03,680 --> 00:04:06,959
so ace we have a report

113
00:04:06,959 --> 00:04:10,239
acme we had a report cosi report

114
00:04:10,239 --> 00:04:12,560
colonel did not meet but had a report

115
00:04:12,560 --> 00:04:13,360
did not meet

116
00:04:13,360 --> 00:04:16,880
had a report for dots emu has a report

117
00:04:16,880 --> 00:04:20,079
gnapp iq nsf did we want to say anything

118
00:04:20,079 --> 00:04:21,680
here i didn't see a report unless it

119
00:04:21,680 --> 00:04:24,960
just came into the last couple minutes

120
00:04:25,919 --> 00:04:27,840
yeah and you can always uh join the

121
00:04:27,840 --> 00:04:30,400
queue as we keep going we can come back

122
00:04:30,400 --> 00:04:33,040
if needed all right maybe we'll circle

123
00:04:33,040 --> 00:04:33,520
around

124
00:04:33,520 --> 00:04:35,360
at the end to see in the interest of

125
00:04:35,360 --> 00:04:36,639
moving forward

126
00:04:36,639 --> 00:04:39,759
ipsec me has a report kitten likewise

127
00:04:39,759 --> 00:04:41,040
with a report

128
00:04:41,040 --> 00:04:44,639
thank you for the report from lake lamps

129
00:04:44,639 --> 00:04:46,160
we'll maybe circle around we don't have

130
00:04:46,160 --> 00:04:48,160
a report there mls

131
00:04:48,160 --> 00:04:49,840
we just got one on the list i just

132
00:04:49,840 --> 00:04:52,560
didn't update it in time

133
00:04:52,560 --> 00:04:56,080
oauth did not meet we can circle around

134
00:04:56,080 --> 00:04:58,240
nothing for privacy pass rats we have a

135
00:04:58,240 --> 00:05:00,400
report sam likewise

136
00:05:00,400 --> 00:05:02,400
sec dispatch will meet actually after

137
00:05:02,400 --> 00:05:04,479
that this is a scheduling anomaly this

138
00:05:04,479 --> 00:05:06,880
is a little unusual for us

139
00:05:06,880 --> 00:05:09,120
sec event did not meet has a report

140
00:05:09,120 --> 00:05:10,320
nothing from suit

141
00:05:10,320 --> 00:05:12,160
we have something from teep we're

142
00:05:12,160 --> 00:05:13,759
waiting for tls

143
00:05:13,759 --> 00:05:15,680
uh to point out here i just wanted to

144
00:05:15,680 --> 00:05:17,199
stop uh we have a

145
00:05:17,199 --> 00:05:19,120
we have a report that did not get

146
00:05:19,120 --> 00:05:20,560
included but

147
00:05:20,560 --> 00:05:22,880
uh there was a call on the mailing list

148
00:05:22,880 --> 00:05:24,080
in the last two weeks

149
00:05:24,080 --> 00:05:26,160
if the chairs do want to kind of jump in

150
00:05:26,160 --> 00:05:28,080
about what additional work might be

151
00:05:28,080 --> 00:05:29,919
because we're likely to close that

152
00:05:29,919 --> 00:05:30,639
working group

153
00:05:30,639 --> 00:05:33,280
really soon

154
00:05:36,720 --> 00:05:39,680
trans has a report and this is our

155
00:05:39,680 --> 00:05:41,280
catch-all if anyone wants to come to the

156
00:05:41,280 --> 00:05:41,600
mic

157
00:05:41,600 --> 00:05:43,039
to talk about what's happening or to

158
00:05:43,039 --> 00:05:44,479
circle around for the places where we

159
00:05:44,479 --> 00:05:46,240
haven't had reports

160
00:05:46,240 --> 00:05:48,800
right so i guess my notes say that i2

161
00:05:48,800 --> 00:05:49,440
and sf

162
00:05:49,440 --> 00:05:52,479
lamps off privacy pass

163
00:05:52,479 --> 00:05:55,120
suit and tls didn't send one but the

164
00:05:55,120 --> 00:05:56,880
jabber reminds us that privacy pass

165
00:05:56,880 --> 00:05:59,680
hasn't met yet

166
00:06:01,280 --> 00:06:03,919
steven also notes out that we failed to

167
00:06:03,919 --> 00:06:06,160
add openpgp to the list i thought i had

168
00:06:06,160 --> 00:06:08,000
syncs up with the data tracker but i

169
00:06:08,000 --> 00:06:09,280
guess not

170
00:06:09,280 --> 00:06:11,919
uh sean says the tls should be coming

171
00:06:11,919 --> 00:06:14,560
shortly

172
00:06:15,759 --> 00:06:18,319
and i guess we can also note that oauth

173
00:06:18,319 --> 00:06:19,520
though they're not meeting

174
00:06:19,520 --> 00:06:21,520
this week has been doing a lot of

175
00:06:21,520 --> 00:06:22,639
regular interims

176
00:06:22,639 --> 00:06:26,000
and uh rowan you may have

177
00:06:26,000 --> 00:06:27,280
a better since than i but i think

178
00:06:27,280 --> 00:06:29,680
they've been making good progress

179
00:06:29,680 --> 00:06:30,880
yeah indeed they have i mean they've i

180
00:06:30,880 --> 00:06:32,960
think meeting we're meeting almost every

181
00:06:32,960 --> 00:06:33,759
other week

182
00:06:33,759 --> 00:06:36,080
unless something kind of cancels it and

183
00:06:36,080 --> 00:06:38,560
if no one comes up to the mic for i2nsf

184
00:06:38,560 --> 00:06:41,120
uh iqnsf is kind of at the back end of

185
00:06:41,120 --> 00:06:43,199
all their scheduled milestones so

186
00:06:43,199 --> 00:06:45,120
their documents are slowly either

187
00:06:45,120 --> 00:06:46,560
responding to

188
00:06:46,560 --> 00:06:49,039
the isg feedback for the ones that have

189
00:06:49,039 --> 00:06:50,639
been through a telechat

190
00:06:50,639 --> 00:06:53,919
or they're polishing director reviews

191
00:06:53,919 --> 00:06:55,919
from a working group last call or from

192
00:06:55,919 --> 00:06:59,039
an itf last call

193
00:06:59,599 --> 00:07:02,720
and i guess uh russ is not

194
00:07:02,720 --> 00:07:05,759
jumping up to the queue up but sean is

195
00:07:05,759 --> 00:07:08,639
i should go ahead sean

196
00:07:11,599 --> 00:07:13,599
good morning everybody um one of the

197
00:07:13,599 --> 00:07:15,039
things that came up during the

198
00:07:15,039 --> 00:07:18,080
uh 84 46 bis

199
00:07:18,080 --> 00:07:19,680
discussions which is the revision to the

200
00:07:19,680 --> 00:07:22,960
tls 1.3 spec was this kind of discussion

201
00:07:22,960 --> 00:07:24,319
that we had about adding some more

202
00:07:24,319 --> 00:07:25,759
nuance about the meaning of the

203
00:07:25,759 --> 00:07:27,120
recommended column

204
00:07:27,120 --> 00:07:28,400
just just kind of a heads up to

205
00:07:28,400 --> 00:07:29,680
everybody that we're going to start

206
00:07:29,680 --> 00:07:31,199
looking at that and it actually applies

207
00:07:31,199 --> 00:07:31,880
to

208
00:07:31,880 --> 00:07:34,160
8447 abyss so ecker is actually

209
00:07:34,160 --> 00:07:35,680
technically off the hook

210
00:07:35,680 --> 00:07:37,680
um but the idea is to try to add more

211
00:07:37,680 --> 00:07:39,360
influ a more subtle

212
00:07:39,360 --> 00:07:41,360
definition for what that is so we're

213
00:07:41,360 --> 00:07:42,560
going to kind of kick that off and i

214
00:07:42,560 --> 00:07:43,840
just wanted to highlight that because a

215
00:07:43,840 --> 00:07:45,520
lot of other working groups are kind of

216
00:07:45,520 --> 00:07:47,360
um adopting that and so we're going to

217
00:07:47,360 --> 00:07:48,800
try to figure out if there's some better

218
00:07:48,800 --> 00:07:49,360
way to

219
00:07:49,360 --> 00:07:51,840
to do this so that we can we can reflect

220
00:07:51,840 --> 00:07:53,120
the actual meaning

221
00:07:53,120 --> 00:07:56,639
of uh what we wanted it to be thanks

222
00:07:56,639 --> 00:07:57,919
yeah that's a really good point you know

223
00:07:57,919 --> 00:08:00,080
tls sort of pioneered some ground

224
00:08:00,080 --> 00:08:02,800
in making it easy for people to get code

225
00:08:02,800 --> 00:08:03,840
points but still

226
00:08:03,840 --> 00:08:06,720
having some indication of what the ietf

227
00:08:06,720 --> 00:08:08,400
thinks is a good idea and

228
00:08:08,400 --> 00:08:10,560
we're still evolving what the best way

229
00:08:10,560 --> 00:08:12,879
to express that is so it's great that we

230
00:08:12,879 --> 00:08:14,400
have

231
00:08:14,400 --> 00:08:17,039
progress there

232
00:08:19,120 --> 00:08:21,840
joe go ahead

233
00:08:23,199 --> 00:08:24,960
yeah i can just say a few things about

234
00:08:24,960 --> 00:08:27,440
privacy pass we are going to meet uh

235
00:08:27,440 --> 00:08:30,960
tomorrow session three um we'll have a

236
00:08:30,960 --> 00:08:32,399
discussion of kind of the existing

237
00:08:32,399 --> 00:08:34,159
drafts along with uh

238
00:08:34,159 --> 00:08:36,399
some deeper discussion on kind of issue

239
00:08:36,399 --> 00:08:37,839
or consolidation

240
00:08:37,839 --> 00:08:39,599
um and then there are some some new

241
00:08:39,599 --> 00:08:41,839
drafts that will be presented in privacy

242
00:08:41,839 --> 00:08:44,240
classes

243
00:08:52,839 --> 00:08:54,959
thanks

244
00:08:54,959 --> 00:08:57,360
uh honest i guess you're you're already

245
00:08:57,360 --> 00:08:59,200
up so go ahead

246
00:08:59,200 --> 00:09:01,519
yeah i uh just wanted to mention about

247
00:09:01,519 --> 00:09:02,399
oas um

248
00:09:02,399 --> 00:09:05,680
we are not meeting this week and uh but

249
00:09:05,680 --> 00:09:08,640
uh it may be worthwhile to have a look

250
00:09:08,640 --> 00:09:09,920
at the upcoming

251
00:09:09,920 --> 00:09:11,279
virtual intro meetings that we are

252
00:09:11,279 --> 00:09:13,360
planning if someone cares

253
00:09:13,360 --> 00:09:15,440
um obviously those have been discussed

254
00:09:15,440 --> 00:09:17,519
on the list

255
00:09:17,519 --> 00:09:19,839
and once those are done we can send a

256
00:09:19,839 --> 00:09:22,399
meeting report

257
00:09:22,399 --> 00:09:25,040
and we have the presentation later today

258
00:09:25,040 --> 00:09:25,680
sure yeah

259
00:09:25,680 --> 00:09:29,120
i'm happy to have the report

260
00:09:29,120 --> 00:09:32,720
uh justin yeah so

261
00:09:32,720 --> 00:09:36,399
uh just two related things uh first in

262
00:09:36,399 --> 00:09:37,440
the w3c

263
00:09:37,440 --> 00:09:40,320
the distributed identifiers or did spec

264
00:09:40,320 --> 00:09:42,480
is progressing towards uh

265
00:09:42,480 --> 00:09:45,360
community review um and that's gonna be

266
00:09:45,360 --> 00:09:46,240
of interest to

267
00:09:46,240 --> 00:09:47,600
a number of people in the security

268
00:09:47,600 --> 00:09:49,920
community so i would recommend

269
00:09:49,920 --> 00:09:53,360
people take a look at that also

270
00:09:53,360 --> 00:09:55,440
from the https working group two

271
00:09:55,440 --> 00:09:57,600
security related documents um

272
00:09:57,600 --> 00:10:00,800
are moving along making some progress

273
00:10:00,800 --> 00:10:01,360
both

274
00:10:01,360 --> 00:10:04,640
http message signatures and message body

275
00:10:04,640 --> 00:10:07,920
digest the second is abyss and so

276
00:10:07,920 --> 00:10:11,680
um yeah please uh

277
00:10:11,680 --> 00:10:14,399
we need some we need to make sure that

278
00:10:14,399 --> 00:10:15,040
we have

279
00:10:15,040 --> 00:10:17,279
enough uh you know security focused eyes

280
00:10:17,279 --> 00:10:18,640
on those drafts even though you know

281
00:10:18,640 --> 00:10:20,720
they are focused on the http semantics

282
00:10:20,720 --> 00:10:22,320
more than anything they are definitely

283
00:10:22,320 --> 00:10:23,760
security related

284
00:10:23,760 --> 00:10:28,079
uh protocols and components

285
00:10:31,120 --> 00:10:33,440
thanks for the heads up uh ontario go

286
00:10:33,440 --> 00:10:35,440
ahead

287
00:10:35,440 --> 00:10:40,000
uh uh i have some comment about ieee

288
00:10:40,000 --> 00:10:43,839
82 15 4 and 59.

289
00:10:43,839 --> 00:10:46,399
15.9 is now going through the sponsor

290
00:10:46,399 --> 00:10:47,279
bullet trying to

291
00:10:47,279 --> 00:10:49,279
make a new revision which actually moves

292
00:10:49,279 --> 00:10:50,720
it from recommended practice with

293
00:10:50,720 --> 00:10:52,000
standard

294
00:10:52,000 --> 00:10:55,040
and 59 provides the key management

295
00:10:55,040 --> 00:10:58,560
for 15 4 and it it doesn't define its

296
00:10:58,560 --> 00:11:00,480
own key management it used reuses

297
00:11:00,480 --> 00:11:02,079
existing ones and it has

298
00:11:02,079 --> 00:11:05,120
heap and like version 2 and 1x

299
00:11:05,120 --> 00:11:07,120
for example it doesn't have a tls

300
00:11:07,120 --> 00:11:09,440
because nobody has

301
00:11:09,440 --> 00:11:12,560
you know volunteer to write that but

302
00:11:12,560 --> 00:11:15,200
it's now it's going to be published

303
00:11:15,200 --> 00:11:16,959
quite soon i guess like in a couple of

304
00:11:16,959 --> 00:11:19,839
months or something like that

305
00:11:22,560 --> 00:11:25,839
thanks uh i guess the only other thing

306
00:11:25,839 --> 00:11:28,959
i wanted to note from the groups that

307
00:11:28,959 --> 00:11:30,079
were not

308
00:11:30,079 --> 00:11:31,760
that did not release in the report is

309
00:11:31,760 --> 00:11:33,120
that lamps

310
00:11:33,120 --> 00:11:37,440
is working on a new charter so

311
00:11:37,440 --> 00:11:38,959
we'll be seeing that out come out for

312
00:11:38,959 --> 00:11:42,640
review at some point

313
00:11:42,640 --> 00:11:44,320
and for those that are still i would say

314
00:11:44,320 --> 00:11:46,560
also hanging in for the full itf week we

315
00:11:46,560 --> 00:11:47,360
also have

316
00:11:47,360 --> 00:11:51,040
our security related buff tomorrow

317
00:11:54,839 --> 00:11:57,600
danish

318
00:11:57,600 --> 00:12:00,160
all right i think the queue is clear so

319
00:12:00,160 --> 00:12:03,120
we should keep moving

320
00:12:08,079 --> 00:12:10,639
so other security highlights that you

321
00:12:10,639 --> 00:12:12,240
know ladies want to call out there's

322
00:12:12,240 --> 00:12:12,720
still

323
00:12:12,720 --> 00:12:15,360
two 80 sponsored drafts uh the same two

324
00:12:15,360 --> 00:12:15,760
as

325
00:12:15,760 --> 00:12:19,200
last time the security txt you know went

326
00:12:19,200 --> 00:12:21,360
we had made it through the itf last call

327
00:12:21,360 --> 00:12:24,800
and i gave some suggestions for

328
00:12:24,800 --> 00:12:26,480
you know how we could resolve the

329
00:12:26,480 --> 00:12:28,079
feedback we got there and then went to

330
00:12:28,079 --> 00:12:29,360
the isg

331
00:12:29,360 --> 00:12:31,920
isg also had quite a bit more feedback

332
00:12:31,920 --> 00:12:32,399
for

333
00:12:32,399 --> 00:12:34,399
how we could improve that and so i

334
00:12:34,399 --> 00:12:35,760
believe the authors have

335
00:12:35,760 --> 00:12:38,399
just this week posted or are going to

336
00:12:38,399 --> 00:12:38,880
post

337
00:12:38,880 --> 00:12:42,880
an update and we can get through that

338
00:12:42,880 --> 00:12:45,839
and then the numeric ids considerations

339
00:12:45,839 --> 00:12:47,680
also went through an itf last call and

340
00:12:47,680 --> 00:12:49,440
got a lot of feedback

341
00:12:49,440 --> 00:12:53,040
i'm still sort of trying to digest all

342
00:12:53,040 --> 00:12:54,480
the feedback that we got and try and

343
00:12:54,480 --> 00:12:56,000
give some advice to the authors about

344
00:12:56,000 --> 00:12:58,560
what the best path is to go forward

345
00:12:58,560 --> 00:13:00,160
i don't have a clear picture for what

346
00:13:00,160 --> 00:13:01,839
exactly that's going to look like but i

347
00:13:01,839 --> 00:13:02,399
do think

348
00:13:02,399 --> 00:13:04,079
that it's important to get some work

349
00:13:04,079 --> 00:13:06,399
done in this space so

350
00:13:06,399 --> 00:13:08,480
we should be seeing something new on

351
00:13:08,480 --> 00:13:11,600
that in the next couple weeks

352
00:13:11,600 --> 00:13:14,079
uh we do have the danish buff as roman

353
00:13:14,079 --> 00:13:15,440
as he mentions coming up

354
00:13:15,440 --> 00:13:18,240
later this week and then the dlt gateway

355
00:13:18,240 --> 00:13:18,959
protocol

356
00:13:18,959 --> 00:13:22,079
was a proposal for this time but was not

357
00:13:22,079 --> 00:13:23,600
quite ready

358
00:13:23,600 --> 00:13:25,040
but i think the proponents are still

359
00:13:25,040 --> 00:13:26,800
planning to work on that

360
00:13:26,800 --> 00:13:28,480
and try and get some more interest in it

361
00:13:28,480 --> 00:13:29,920
if you

362
00:13:29,920 --> 00:13:32,160
want to reach out to them or us we can

363
00:13:32,160 --> 00:13:33,279
get you in contact

364
00:13:33,279 --> 00:13:36,240
if that's something you're interested in

365
00:13:36,240 --> 00:13:36,800
so

366
00:13:36,800 --> 00:13:39,439
next slide

367
00:13:40,720 --> 00:13:45,360
um and we we do have a

368
00:13:45,360 --> 00:13:46,959
call out for people who might be

369
00:13:46,959 --> 00:13:48,480
interested in being a working group

370
00:13:48,480 --> 00:13:49,199
chair

371
00:13:49,199 --> 00:13:51,839
uh there's an immediate need for acme

372
00:13:51,839 --> 00:13:52,240
and

373
00:13:52,240 --> 00:13:53,920
which is sort of always interested in

374
00:13:53,920 --> 00:13:56,000
general even if you're not

375
00:13:56,000 --> 00:13:57,199
interested in acne but might be

376
00:13:57,199 --> 00:13:58,560
interested in something else we'd like

377
00:13:58,560 --> 00:13:59,600
to know

378
00:13:59,600 --> 00:14:01,440
uh it's always good to have a sort of

379
00:14:01,440 --> 00:14:02,959
broad candidate pool

380
00:14:02,959 --> 00:14:04,399
when we do have an opening that needs to

381
00:14:04,399 --> 00:14:06,320
be filled so we can get something that's

382
00:14:06,320 --> 00:14:08,079
a good fit

383
00:14:08,079 --> 00:14:10,399
and we just did have the this uh common

384
00:14:10,399 --> 00:14:11,839
security discuss items

385
00:14:11,839 --> 00:14:14,320
on the slides last time but i think it's

386
00:14:14,320 --> 00:14:14,959
just worth

387
00:14:14,959 --> 00:14:16,720
highlighting we've tried to make a list

388
00:14:16,720 --> 00:14:18,959
of things that show up a lot

389
00:14:18,959 --> 00:14:22,320
in our reviews and we try to get some

390
00:14:22,320 --> 00:14:25,440
broader awareness and visibility into

391
00:14:25,440 --> 00:14:26,800
that these are common issues and

392
00:14:26,800 --> 00:14:29,040
hopefully we can get them resolved

393
00:14:29,040 --> 00:14:31,920
before the documents make it into igf

394
00:14:31,920 --> 00:14:32,880
last call even

395
00:14:32,880 --> 00:14:36,240
to try and improve the quality of the

396
00:14:36,240 --> 00:14:39,600
documents earlier on in the process

397
00:14:39,600 --> 00:14:42,560
uh and let's see looks like in the chat

398
00:14:42,560 --> 00:14:43,120
wes

399
00:14:43,120 --> 00:14:44,959
is asking if he should say something

400
00:14:44,959 --> 00:14:48,399
about danish which i think

401
00:14:50,959 --> 00:14:53,360
okay i was i was just typing something

402
00:14:53,360 --> 00:14:54,399
up so i'm

403
00:14:54,399 --> 00:14:56,800
uh one of the chairs of it the i don't

404
00:14:56,800 --> 00:14:58,000
know if any of the proponents are here

405
00:14:58,000 --> 00:15:01,680
but the goal of danish is to be able to

406
00:15:01,680 --> 00:15:02,399
get

407
00:15:02,399 --> 00:15:05,360
uh internet of things devices being able

408
00:15:05,360 --> 00:15:07,199
to cross-communicate a whole lot better

409
00:15:07,199 --> 00:15:08,079
so

410
00:15:08,079 --> 00:15:09,519
that includes being able to

411
00:15:09,519 --> 00:15:11,040
cross-communicate between themselves in

412
00:15:11,040 --> 00:15:12,800
the long run and it includes being able

413
00:15:12,800 --> 00:15:14,000
to

414
00:15:14,000 --> 00:15:16,639
be talk to other infrastructure besides

415
00:15:16,639 --> 00:15:18,000
just the owner of the

416
00:15:18,000 --> 00:15:20,320
iot device in question and so they want

417
00:15:20,320 --> 00:15:22,000
to be able to use dane to do that to be

418
00:15:22,000 --> 00:15:22,880
able to do

419
00:15:22,880 --> 00:15:25,920
look up both keys for other devices and

420
00:15:25,920 --> 00:15:27,440
things like that as well as to be able

421
00:15:27,440 --> 00:15:28,000
to

422
00:15:28,000 --> 00:15:30,480
look up keys for other organizations and

423
00:15:30,480 --> 00:15:31,759
things like that

424
00:15:31,759 --> 00:15:33,759
rather than just rely on the pkx

425
00:15:33,759 --> 00:15:36,880
infrastructure for doing that

426
00:15:37,279 --> 00:15:40,560
it's a discovery mechanism too

427
00:15:40,560 --> 00:15:44,079
thanks thank you you see be at the buff

428
00:15:44,079 --> 00:15:47,519
so look forward to see how it goes

429
00:15:49,600 --> 00:15:52,160
all right so i think we can go to the

430
00:15:52,160 --> 00:15:52,839
next

431
00:15:52,839 --> 00:15:55,839
slide

432
00:15:56,720 --> 00:15:59,440
and uh yes so we want to put this in we

433
00:15:59,440 --> 00:16:00,079
do have

434
00:16:00,079 --> 00:16:01,839
in the data tracker there's a very handy

435
00:16:01,839 --> 00:16:03,360
feature that shows sort of

436
00:16:03,360 --> 00:16:05,279
an 80 dashboard of where all the

437
00:16:05,279 --> 00:16:07,839
documents are that we're responsible for

438
00:16:07,839 --> 00:16:09,360
and it breaks it down by the category

439
00:16:09,360 --> 00:16:11,519
of what is in public publication

440
00:16:11,519 --> 00:16:13,199
requested where you know it's on the

441
00:16:13,199 --> 00:16:16,560
id to take the next item versus uh

442
00:16:16,560 --> 00:16:17,920
getting reviewed in various

443
00:16:17,920 --> 00:16:20,959
states and whatnot so you can always go

444
00:16:20,959 --> 00:16:22,320
and look at those it doesn't require

445
00:16:22,320 --> 00:16:24,959
authentication and track how we're doing

446
00:16:24,959 --> 00:16:27,199
i think roman did a good job this time

447
00:16:27,199 --> 00:16:28,800
and cleared his publication request

448
00:16:28,800 --> 00:16:29,360
queue i

449
00:16:29,360 --> 00:16:31,120
did not do quite so well i still have a

450
00:16:31,120 --> 00:16:33,360
couple documents in the queue but i'm

451
00:16:33,360 --> 00:16:36,160
making progress on them yeah one of the

452
00:16:36,160 --> 00:16:36,720
questions

453
00:16:36,720 --> 00:16:38,800
we've we've gotten is i've been working

454
00:16:38,800 --> 00:16:39,839
on my document

455
00:16:39,839 --> 00:16:41,680
it's in the working group it's now out

456
00:16:41,680 --> 00:16:43,360
of the working group like what happens

457
00:16:43,360 --> 00:16:43,839
next

458
00:16:43,839 --> 00:16:46,000
kind of what else what else it kind of

459
00:16:46,000 --> 00:16:47,920
is in the workflow as it relates to

460
00:16:47,920 --> 00:16:50,160
to sex so looking at these dashboards

461
00:16:50,160 --> 00:16:51,519
for either kind of better me

462
00:16:51,519 --> 00:16:53,920
gives you insight into what happened

463
00:16:53,920 --> 00:16:55,519
after it left the working group

464
00:16:55,519 --> 00:16:58,320
and what else is on deck what else is on

465
00:16:58,320 --> 00:16:59,759
deck as it progresses through

466
00:16:59,759 --> 00:17:01,680
through the different phases so this

467
00:17:01,680 --> 00:17:03,519
isn't necessarily new information you

468
00:17:03,519 --> 00:17:04,240
can see

469
00:17:04,240 --> 00:17:06,240
that information on particular documents

470
00:17:06,240 --> 00:17:07,919
as they're buried in working groups but

471
00:17:07,919 --> 00:17:09,520
if you want to get a sense for what's in

472
00:17:09,520 --> 00:17:10,000
the sec

473
00:17:10,000 --> 00:17:12,400
pipeline and how far it is in the

474
00:17:12,400 --> 00:17:14,000
progression process once it's outside

475
00:17:14,000 --> 00:17:14,799
the working group

476
00:17:14,799 --> 00:17:17,520
in an in a place aggregated uh you know

477
00:17:17,520 --> 00:17:19,199
well aggregated in two places

478
00:17:19,199 --> 00:17:20,319
because that that's how it's kind of

479
00:17:20,319 --> 00:17:22,000
split you can just look at these urls

480
00:17:22,000 --> 00:17:24,799
and kind of self-serve

481
00:17:30,840 --> 00:17:33,360
okay

482
00:17:33,360 --> 00:17:35,600
so i think uh the the next thing is just

483
00:17:35,600 --> 00:17:37,440
kind of moving through slides to keep us

484
00:17:37,440 --> 00:17:39,840
moving we wanted to just put out another

485
00:17:39,840 --> 00:17:41,440
big thank you as we always do to

486
00:17:41,440 --> 00:17:44,480
all the sector reviewers who make all

487
00:17:44,480 --> 00:17:45,440
the ietf

488
00:17:45,440 --> 00:17:48,000
documents either in last call or before

489
00:17:48,000 --> 00:17:48,880
they're published

490
00:17:48,880 --> 00:17:50,480
you know so much better because of that

491
00:17:50,480 --> 00:17:52,480
review we of course would always want

492
00:17:52,480 --> 00:17:54,320
everyone to consider security early

493
00:17:54,320 --> 00:17:56,559
but the sector reviewers primarily make

494
00:17:56,559 --> 00:17:58,400
sure that even those that don't take the

495
00:17:58,400 --> 00:18:00,320
time to think about it early we still

496
00:18:00,320 --> 00:18:01,600
think about it at some point in the

497
00:18:01,600 --> 00:18:02,240
process

498
00:18:02,240 --> 00:18:04,160
and on a personal level i mean it's just

499
00:18:04,160 --> 00:18:06,559
so helpful to benefit to have that as we

500
00:18:06,559 --> 00:18:08,000
come into the telechat

501
00:18:08,000 --> 00:18:10,240
and early pokes that this may not be

502
00:18:10,240 --> 00:18:12,240
ready really helps re-prioritize our

503
00:18:12,240 --> 00:18:12,640
time

504
00:18:12,640 --> 00:18:14,080
so to each and every one of you kind of

505
00:18:14,080 --> 00:18:15,919
thank you and you know

506
00:18:15,919 --> 00:18:17,919
a special kind of thank you to taro who

507
00:18:17,919 --> 00:18:19,280
actually manages

508
00:18:19,280 --> 00:18:21,760
the as our secretary kind of manages the

509
00:18:21,760 --> 00:18:23,360
workflow and kind of the pipeline

510
00:18:23,360 --> 00:18:25,280
with all of these reviewers and all the

511
00:18:25,280 --> 00:18:26,640
different working groups i mean it's

512
00:18:26,640 --> 00:18:28,559
really a thankless kind of job to kind

513
00:18:28,559 --> 00:18:30,400
of do it week in and week out so

514
00:18:30,400 --> 00:18:33,120
very much appreciate it yes definitely

515
00:18:33,120 --> 00:18:33,840
thanks to

516
00:18:33,840 --> 00:18:36,400
tara and to all the reviewers going

517
00:18:36,400 --> 00:18:38,080
through the list of reviews to

518
00:18:38,080 --> 00:18:40,000
to make this slide it really sunk in

519
00:18:40,000 --> 00:18:42,000
just how much work you've been doing and

520
00:18:42,000 --> 00:18:43,440
it really makes a difference

521
00:18:43,440 --> 00:18:45,760
thank you

522
00:18:48,720 --> 00:18:50,880
all right so now we're on to the the

523
00:18:50,880 --> 00:18:53,760
talks so

524
00:18:55,039 --> 00:18:58,720
robin you are up

525
00:19:06,880 --> 00:19:08,400
yup you're just gonna shout out to the

526
00:19:08,400 --> 00:19:11,280
next slide i'm happy to progress you now

527
00:19:11,280 --> 00:19:14,559
okay all right so uh

528
00:19:14,559 --> 00:19:15,760
thank you all for giving me a little bit

529
00:19:15,760 --> 00:19:17,679
of time to talk about this um

530
00:19:17,679 --> 00:19:21,520
right qlog excited um securelog stands

531
00:19:21,520 --> 00:19:22,000
for quick

532
00:19:22,000 --> 00:19:24,160
logging its project started a couple of

533
00:19:24,160 --> 00:19:26,080
years ago when we noticed that

534
00:19:26,080 --> 00:19:27,840
the quicken hp3 were becoming quite

535
00:19:27,840 --> 00:19:29,360
complex and

536
00:19:29,360 --> 00:19:30,720
you'd probably need some additional

537
00:19:30,720 --> 00:19:32,720
tooling to to help analyze their

538
00:19:32,720 --> 00:19:35,039
behaviors

539
00:19:35,039 --> 00:19:37,120
for other protocols for example tcp you

540
00:19:37,120 --> 00:19:38,080
would do that

541
00:19:38,080 --> 00:19:41,760
next slide for example by taking a

542
00:19:41,760 --> 00:19:43,919
packet capture somewhere in the network

543
00:19:43,919 --> 00:19:46,080
and then analyzing that using tools like

544
00:19:46,080 --> 00:19:47,520
like wireshark

545
00:19:47,520 --> 00:19:49,919
this is still possible for for quick but

546
00:19:49,919 --> 00:19:51,280
it's much more difficult of course

547
00:19:51,280 --> 00:19:54,080
because next

548
00:19:55,440 --> 00:19:58,480
stands to encrypt almost all of its

549
00:19:58,480 --> 00:20:00,960
transport level metadata as well next

550
00:20:00,960 --> 00:20:03,520
slide please

551
00:20:04,720 --> 00:20:06,960
so for quick if you want to do post-hoc

552
00:20:06,960 --> 00:20:08,320
analysis you would have to store the

553
00:20:08,320 --> 00:20:10,080
entire packet capture

554
00:20:10,080 --> 00:20:11,840
including the very large payload well

555
00:20:11,840 --> 00:20:13,600
for example for tcp you could get away

556
00:20:13,600 --> 00:20:15,360
with only storing up until the

557
00:20:15,360 --> 00:20:18,639
tcp headers for example

558
00:20:19,600 --> 00:20:20,799
so for quick you would have to store it

559
00:20:20,799 --> 00:20:22,960
in its entirety and also all of the tls

560
00:20:22,960 --> 00:20:25,600
secrets of course um which is quite

561
00:20:25,600 --> 00:20:26,400
terrible for

562
00:20:26,400 --> 00:20:29,120
uh for scalability and privacy when you

563
00:20:29,120 --> 00:20:31,200
try to do that at scale

564
00:20:31,200 --> 00:20:33,919
there's a secondary aspect there um what

565
00:20:33,919 --> 00:20:35,120
i want to say is that it's something

566
00:20:35,120 --> 00:20:36,880
that we've historically of course also

567
00:20:36,880 --> 00:20:37,840
seen for uh

568
00:20:37,840 --> 00:20:39,760
encrypted application layer protocols as

569
00:20:39,760 --> 00:20:42,159
well uh there's a secondary aspect there

570
00:20:42,159 --> 00:20:44,640
next slide

571
00:20:44,640 --> 00:20:46,240
which is that not all aspects of the

572
00:20:46,240 --> 00:20:47,919
protocol are always reflected on the

573
00:20:47,919 --> 00:20:48,320
wire

574
00:20:48,320 --> 00:20:49,520
of course especially things like

575
00:20:49,520 --> 00:20:51,679
congestion control which can be complex

576
00:20:51,679 --> 00:20:52,640
to debug or

577
00:20:52,640 --> 00:20:55,840
always visible so for quick we decided

578
00:20:55,840 --> 00:20:57,039
to take a new approach

579
00:20:57,039 --> 00:21:00,880
next slide which is to log the necessary

580
00:21:00,880 --> 00:21:03,440
information at the endpoints directly

581
00:21:03,440 --> 00:21:05,360
exfiltrate them from the implementations

582
00:21:05,360 --> 00:21:07,360
instead of from the network

583
00:21:07,360 --> 00:21:09,039
this is interesting because you can log

584
00:21:09,039 --> 00:21:10,640
only the things that you need and you

585
00:21:10,640 --> 00:21:11,600
can very easily

586
00:21:11,600 --> 00:21:14,400
leave out sensitive information for

587
00:21:14,400 --> 00:21:15,520
example

588
00:21:15,520 --> 00:21:18,240
this is not a radical new idea i think

589
00:21:18,240 --> 00:21:18,799
many

590
00:21:18,799 --> 00:21:20,799
implementations have some way of having

591
00:21:20,799 --> 00:21:22,799
some kind of a debug log for example

592
00:21:22,799 --> 00:21:24,799
but the idea with qlog was to have a

593
00:21:24,799 --> 00:21:27,280
single schema a single format that all

594
00:21:27,280 --> 00:21:29,679
the different implementations could use

595
00:21:29,679 --> 00:21:31,440
so that makes it easier to to build

596
00:21:31,440 --> 00:21:33,039
reusable tooling

597
00:21:33,039 --> 00:21:36,320
on top of that so next slide

598
00:21:36,320 --> 00:21:38,159
this means the q log is far from rocket

599
00:21:38,159 --> 00:21:39,360
science it's

600
00:21:39,360 --> 00:21:42,240
really really simple basically we we map

601
00:21:42,240 --> 00:21:44,400
we have a schema of different events

602
00:21:44,400 --> 00:21:44,799
that

603
00:21:44,799 --> 00:21:46,720
you can have in quick and hp3 and we map

604
00:21:46,720 --> 00:21:48,640
that to currently a json

605
00:21:48,640 --> 00:21:51,760
serialization format um listing how we

606
00:21:51,760 --> 00:21:52,799
should for example

607
00:21:52,799 --> 00:21:54,960
log a received packet or on the right

608
00:21:54,960 --> 00:21:58,159
side could just control information next

609
00:21:58,159 --> 00:21:59,679
slide

610
00:21:59,679 --> 00:22:01,520
building on top of that format you can

611
00:22:01,520 --> 00:22:03,200
then create tools

612
00:22:03,200 --> 00:22:05,200
we have created a couple of them there

613
00:22:05,200 --> 00:22:06,720
should be a screenshot on

614
00:22:06,720 --> 00:22:10,000
this slide but i'm not seeing it

615
00:22:10,000 --> 00:22:12,480
yeah so we we have we have created a

616
00:22:12,480 --> 00:22:13,440
list of tools

617
00:22:13,440 --> 00:22:16,159
it's called the q vis tool suite um

618
00:22:16,159 --> 00:22:17,840
which for example we have a

619
00:22:17,840 --> 00:22:19,600
a sequence diagram of all the packets

620
00:22:19,600 --> 00:22:22,799
going on and also next slide

621
00:22:22,799 --> 00:22:25,120
things like adjust control debugging

622
00:22:25,120 --> 00:22:27,039
mechanisms as well

623
00:22:27,039 --> 00:22:29,280
which has really helped us for example

624
00:22:29,280 --> 00:22:31,120
the previous tool has helped us to debug

625
00:22:31,120 --> 00:22:34,000
quix complex encrypted handshake

626
00:22:34,000 --> 00:22:34,799
practice

627
00:22:34,799 --> 00:22:37,360
next slide

628
00:22:39,039 --> 00:22:41,600
this combination of of the common format

629
00:22:41,600 --> 00:22:42,400
and the tooling

630
00:22:42,400 --> 00:22:44,799
has been uh relatively successful for us

631
00:22:44,799 --> 00:22:45,600
and

632
00:22:45,600 --> 00:22:46,960
this has led to most quick

633
00:22:46,960 --> 00:22:48,799
implementations supporting log in one

634
00:22:48,799 --> 00:22:50,000
form or the other

635
00:22:50,000 --> 00:22:52,320
with for example facebook using this is

636
00:22:52,320 --> 00:22:54,400
our primary way to to

637
00:22:54,400 --> 00:22:56,640
debug and monitor their their uh quick

638
00:22:56,640 --> 00:22:58,320
deployment at scale

639
00:22:58,320 --> 00:23:01,120
as well um because of this uh the fact

640
00:23:01,120 --> 00:23:02,640
that it seems to work quite well next

641
00:23:02,640 --> 00:23:03,520
slide

642
00:23:03,520 --> 00:23:05,919
uh we are now moving for adoption of the

643
00:23:05,919 --> 00:23:07,679
q log format into the quick working

644
00:23:07,679 --> 00:23:08,080
group

645
00:23:08,080 --> 00:23:10,720
proper because until now this has been

646
00:23:10,720 --> 00:23:12,320
individual drafts and kind of a

647
00:23:12,320 --> 00:23:14,720
non-standard effort

648
00:23:14,720 --> 00:23:16,880
the main goal there is to flash out

649
00:23:16,880 --> 00:23:19,520
these schemas for quicken hp3

650
00:23:19,520 --> 00:23:22,720
one of the the main events that is

651
00:23:22,720 --> 00:23:25,200
probably interested here is tls the tls

652
00:23:25,200 --> 00:23:27,120
related events are really not all that

653
00:23:27,120 --> 00:23:28,480
fleshed out yet

654
00:23:28,480 --> 00:23:30,799
and could use with a bit of extra work

655
00:23:30,799 --> 00:23:32,720
um but there are

656
00:23:32,720 --> 00:23:34,480
the secondary goal there is to not just

657
00:23:34,480 --> 00:23:36,480
keep this only for quicken hp3

658
00:23:36,480 --> 00:23:38,799
but to expand this to many other

659
00:23:38,799 --> 00:23:39,679
protocols

660
00:23:39,679 --> 00:23:42,240
as well because the general concept of

661
00:23:42,240 --> 00:23:42,799
having

662
00:23:42,799 --> 00:23:45,600
a endpoint based structured logging

663
00:23:45,600 --> 00:23:46,960
setup

664
00:23:46,960 --> 00:23:49,520
can of course be useful for much more

665
00:23:49,520 --> 00:23:50,400
than just

666
00:23:50,400 --> 00:23:53,039
just quick especially if we continue to

667
00:23:53,039 --> 00:23:54,640
move towards more and more

668
00:23:54,640 --> 00:23:57,200
encryption at all the different layers

669
00:23:57,200 --> 00:23:58,880
that we've been seeing in the ietf of

670
00:23:58,880 --> 00:24:01,120
course

671
00:24:01,200 --> 00:24:02,880
i can especially see this happening for

672
00:24:02,880 --> 00:24:04,559
application layer transports

673
00:24:04,559 --> 00:24:06,240
application layer protocols but also

674
00:24:06,240 --> 00:24:08,000
things like for example mask

675
00:24:08,000 --> 00:24:09,360
there's also been talk about doing this

676
00:24:09,360 --> 00:24:11,919
for dtls for example

677
00:24:11,919 --> 00:24:14,480
next slide

678
00:24:14,960 --> 00:24:17,600
this goal of having q log in a more

679
00:24:17,600 --> 00:24:18,080
general

680
00:24:18,080 --> 00:24:19,679
fashion is also reflected in the current

681
00:24:19,679 --> 00:24:21,840
draft so we have a separate document for

682
00:24:21,840 --> 00:24:24,400
quick and hp3 specific stuff but then we

683
00:24:24,400 --> 00:24:25,679
also have something called the main

684
00:24:25,679 --> 00:24:26,559
schema

685
00:24:26,559 --> 00:24:28,640
which kind of has the protocol agnostic

686
00:24:28,640 --> 00:24:30,240
stuff

687
00:24:30,240 --> 00:24:32,080
and the goal is there to grow this into

688
00:24:32,080 --> 00:24:33,520
a concrete set of

689
00:24:33,520 --> 00:24:36,400
best practices and guidelines that other

690
00:24:36,400 --> 00:24:38,000
working groups and other efforts can

691
00:24:38,000 --> 00:24:38,559
then use

692
00:24:38,559 --> 00:24:42,159
to to guide their definition of new

693
00:24:42,159 --> 00:24:44,840
q log events for new protocols next

694
00:24:44,840 --> 00:24:46,640
slide

695
00:24:46,640 --> 00:24:49,279
uh we foresee quite a few challenges of

696
00:24:49,279 --> 00:24:50,320
course in doing this

697
00:24:50,320 --> 00:24:51,679
and and we also think that this should

698
00:24:51,679 --> 00:24:53,760
be a like an itf wide effort which is

699
00:24:53,760 --> 00:24:54,960
why i've been doing

700
00:24:54,960 --> 00:24:56,720
this presentation at several working

701
00:24:56,720 --> 00:24:58,559
groups and areas um this week

702
00:24:58,559 --> 00:25:00,080
i just wanted to give you an example of

703
00:25:00,080 --> 00:25:01,840
three different challenges so

704
00:25:01,840 --> 00:25:03,520
just so you can have an idea of the

705
00:25:03,520 --> 00:25:04,880
things we will be discussing

706
00:25:04,880 --> 00:25:08,880
next slide so the first aspect there is

707
00:25:08,880 --> 00:25:10,159
is

708
00:25:10,159 --> 00:25:12,559
the simplest thing to do would be to

709
00:25:12,559 --> 00:25:15,039
reflect the raw wire image

710
00:25:15,039 --> 00:25:16,880
into the logging format as well which is

711
00:25:16,880 --> 00:25:18,320
what you see here on the left we have an

712
00:25:18,320 --> 00:25:19,919
acknowledgement frame

713
00:25:19,919 --> 00:25:23,039
with packet number 16 missing that's

714
00:25:23,039 --> 00:25:24,320
useful but it doesn't necessarily

715
00:25:24,320 --> 00:25:26,159
reflect what the implementation

716
00:25:26,159 --> 00:25:27,919
is actually doing with this information

717
00:25:27,919 --> 00:25:30,400
for example does it immediately mark

718
00:25:30,400 --> 00:25:33,840
packet 16 as lost or not so to know that

719
00:25:33,840 --> 00:25:34,960
kind of thing you need

720
00:25:34,960 --> 00:25:38,960
next slide a second type of event

721
00:25:38,960 --> 00:25:40,400
explicitly indicates with the

722
00:25:40,400 --> 00:25:42,320
implementation

723
00:25:42,320 --> 00:25:44,320
was doing and this is also something

724
00:25:44,320 --> 00:25:46,159
that we've seen a lot for for tls for

725
00:25:46,159 --> 00:25:47,840
example it's not because

726
00:25:47,840 --> 00:25:51,840
you get a certain tls tls records or tls

727
00:25:51,840 --> 00:25:53,760
extensions in that they're also

728
00:25:53,760 --> 00:25:57,840
correctly acted upon for example

729
00:25:58,000 --> 00:26:00,080
and so one thing to do would be to

730
00:26:00,080 --> 00:26:02,480
define the two type of events always but

731
00:26:02,480 --> 00:26:03,440
that makes it

732
00:26:03,440 --> 00:26:05,279
a lot more work and a lot more difficult

733
00:26:05,279 --> 00:26:06,480
for

734
00:26:06,480 --> 00:26:08,880
tool creators to to know which data they

735
00:26:08,880 --> 00:26:10,320
should act on if there is

736
00:26:10,320 --> 00:26:13,200
if there is an over

737
00:26:14,640 --> 00:26:18,880
tooling across protocols next slide

738
00:26:18,880 --> 00:26:20,880
because of course tcp also has the

739
00:26:20,880 --> 00:26:22,080
concept of

740
00:26:22,080 --> 00:26:23,840
select acknowledgements but there it's

741
00:26:23,840 --> 00:26:25,279
not in the frame it's in

742
00:26:25,279 --> 00:26:28,000
the packet header inside of the options

743
00:26:28,000 --> 00:26:29,360
so you have essentially the same

744
00:26:29,360 --> 00:26:31,200
semantic information but reflected in a

745
00:26:31,200 --> 00:26:32,480
different form

746
00:26:32,480 --> 00:26:34,400
uh making things more difficult so we

747
00:26:34,400 --> 00:26:36,559
hope we can somehow find a way to make

748
00:26:36,559 --> 00:26:37,679
this

749
00:26:37,679 --> 00:26:40,159
easier more consistent to work with

750
00:26:40,159 --> 00:26:41,200
second major challenge

751
00:26:41,200 --> 00:26:44,799
next slide is to go towards a decent

752
00:26:44,799 --> 00:26:46,640
format we're currently as i said using

753
00:26:46,640 --> 00:26:48,080
json

754
00:26:48,080 --> 00:26:50,240
which is nice and it's flexible it's

755
00:26:50,240 --> 00:26:52,000
also not the most performant format

756
00:26:52,000 --> 00:26:55,279
ever secondary aspect there is

757
00:26:55,279 --> 00:26:59,679
how we define the the event

758
00:27:00,960 --> 00:27:02,720
data type definition language which you

759
00:27:02,720 --> 00:27:04,480
can see on the right side

760
00:27:04,480 --> 00:27:05,919
we're hoping to align this a bit more

761
00:27:05,919 --> 00:27:08,960
with uh with standard options for that

762
00:27:08,960 --> 00:27:10,400
to make it for example easy to

763
00:27:10,400 --> 00:27:12,880
automatically generate code

764
00:27:12,880 --> 00:27:14,960
that serializes and deserializes the

765
00:27:14,960 --> 00:27:16,000
events

766
00:27:16,000 --> 00:27:20,000
to different formats next slide

767
00:27:20,000 --> 00:27:21,679
and then of course the the main things

768
00:27:21,679 --> 00:27:24,240
of why i think it was interesting to

769
00:27:24,240 --> 00:27:25,919
bring this here as well

770
00:27:25,919 --> 00:27:28,159
is that conceptually it's it's easy to

771
00:27:28,159 --> 00:27:29,760
say that because we're looking at the

772
00:27:29,760 --> 00:27:31,360
endpoints we can be very privacy

773
00:27:31,360 --> 00:27:32,399
sensitive

774
00:27:32,399 --> 00:27:33,919
you can leave out the necessary

775
00:27:33,919 --> 00:27:36,159
information however

776
00:27:36,159 --> 00:27:37,760
you can't do that for all use cases

777
00:27:37,760 --> 00:27:39,200
because sometimes you really do

778
00:27:39,200 --> 00:27:42,480
want ip addresses or the urls or

779
00:27:42,480 --> 00:27:44,159
other things in order to be able to do

780
00:27:44,159 --> 00:27:46,000
effective debugging

781
00:27:46,000 --> 00:27:48,559
so we're we're thinking about um having

782
00:27:48,559 --> 00:27:49,440
a kind of a

783
00:27:49,440 --> 00:27:51,919
sanitization level approach where you

784
00:27:51,919 --> 00:27:53,440
can say for different levels

785
00:27:53,440 --> 00:27:56,240
of um privacy sensitivity this is how

786
00:27:56,240 --> 00:27:57,760
you should

787
00:27:57,760 --> 00:28:01,200
either uh hash or or anonymize or leave

788
00:28:01,200 --> 00:28:02,159
out certain

789
00:28:02,159 --> 00:28:04,880
certain fields and certain events

790
00:28:04,880 --> 00:28:06,320
something that has also already come out

791
00:28:06,320 --> 00:28:08,480
this week is for example do we want to

792
00:28:08,480 --> 00:28:09,600
encrypt

793
00:28:09,600 --> 00:28:11,600
the logs themselves so not just the

794
00:28:11,600 --> 00:28:14,320
information contained within but also

795
00:28:14,320 --> 00:28:17,360
the logs that we store um which i've i

796
00:28:17,360 --> 00:28:19,039
i think i've seen something here about

797
00:28:19,039 --> 00:28:21,520
the core working group for for seaboard

798
00:28:21,520 --> 00:28:23,039
that might be interesting for us to to

799
00:28:23,039 --> 00:28:24,480
take a look at

800
00:28:24,480 --> 00:28:27,440
um and there's a separate aspect to that

801
00:28:27,440 --> 00:28:28,000
is that we

802
00:28:28,000 --> 00:28:29,520
we think it might be interesting to have

803
00:28:29,520 --> 00:28:31,279
a way of sharing q logs

804
00:28:31,279 --> 00:28:34,240
uh from between between organizations in

805
00:28:34,240 --> 00:28:35,520
some way to help uh

806
00:28:35,520 --> 00:28:38,000
well make make quick manageability

807
00:28:38,000 --> 00:28:40,080
better

808
00:28:40,080 --> 00:28:43,440
yeah i i'm just spitballing

809
00:28:43,440 --> 00:28:44,960
yeah yeah i mean i think because i i

810
00:28:44,960 --> 00:28:46,240
guess i i shouldn't have said that

811
00:28:46,240 --> 00:28:48,559
because i don't

812
00:28:48,559 --> 00:28:49,520
yeah and i shouldn't have said that

813
00:28:49,520 --> 00:28:50,880
because i think basic i mean it's not

814
00:28:50,880 --> 00:28:51,600
bad but um

815
00:28:51,600 --> 00:28:56,880
um i take it nobody can hear me

816
00:28:56,880 --> 00:28:58,559
uh yeah we can hear you but it's not

817
00:28:58,559 --> 00:29:02,480
clear what's what you're um

818
00:29:02,880 --> 00:29:06,640
what what what you're referring to to me

819
00:29:07,360 --> 00:29:13,600
yeah i guess maybe uh

820
00:29:13,600 --> 00:29:15,919
it's just one more slide so we can i

821
00:29:15,919 --> 00:29:17,200
kept this to the last two

822
00:29:17,200 --> 00:29:18,399
that it would be fresh and everyone's

823
00:29:18,399 --> 00:29:20,720
fine um so i'm not

824
00:29:20,720 --> 00:29:22,799
just to immediately come into that i'm

825
00:29:22,799 --> 00:29:25,120
not saying this is a good idea

826
00:29:25,120 --> 00:29:26,480
that we want to do this i'm just saying

827
00:29:26,480 --> 00:29:28,159
this is something that we've

828
00:29:28,159 --> 00:29:31,440
been talking about now

829
00:29:32,240 --> 00:29:36,000
um we can hear you sometimes and

830
00:29:36,000 --> 00:29:39,120
sometimes not hacker

831
00:29:39,200 --> 00:29:42,640
um but so to to conclude we

832
00:29:42,640 --> 00:29:44,320
we're thinking about these privacy and

833
00:29:44,320 --> 00:29:46,399
security issues uh of this

834
00:29:46,399 --> 00:29:47,840
where we can take this how we can do

835
00:29:47,840 --> 00:29:49,760
this in a secure way and that's why

836
00:29:49,760 --> 00:29:51,600
i wanted to make people in this working

837
00:29:51,600 --> 00:29:53,440
in this area aware of this

838
00:29:53,440 --> 00:29:56,960
this work that's happening so last slide

839
00:29:56,960 --> 00:29:59,760
um eventually we hope this work will go

840
00:29:59,760 --> 00:30:00,799
to its own

841
00:30:00,799 --> 00:30:03,039
working group um that will that will be

842
00:30:03,039 --> 00:30:04,320
able to do this in a more generic

843
00:30:04,320 --> 00:30:04,960
fashion

844
00:30:04,960 --> 00:30:06,799
but for practical reasons for now we're

845
00:30:06,799 --> 00:30:09,200
starting this in the quick working group

846
00:30:09,200 --> 00:30:10,640
so if you're in any way interested in

847
00:30:10,640 --> 00:30:12,799
that please please find us there

848
00:30:12,799 --> 00:30:14,559
in the coming months which should be

849
00:30:14,559 --> 00:30:15,919
part of the recharge of the working

850
00:30:15,919 --> 00:30:17,039
group

851
00:30:17,039 --> 00:30:19,039
and we're also of course on github and

852
00:30:19,039 --> 00:30:20,960
we have a separate mailing list as well

853
00:30:20,960 --> 00:30:22,320
and of course i'm more than happy to

854
00:30:22,320 --> 00:30:24,320
answer any questions or listen to

855
00:30:24,320 --> 00:30:25,679
feedback you have right now

856
00:30:25,679 --> 00:30:28,000
thanks

857
00:30:29,039 --> 00:30:32,399
thank you again robin um

858
00:30:32,399 --> 00:30:34,720
uh roman just so you know i did mute you

859
00:30:34,720 --> 00:30:36,399
at the start of the talk so

860
00:30:36,399 --> 00:30:39,760
you'll need to restart if you want to

861
00:30:39,760 --> 00:30:40,880
comment

862
00:30:40,880 --> 00:30:43,200
uh and also i apologize from it i to

863
00:30:43,200 --> 00:30:44,480
robin i

864
00:30:44,480 --> 00:30:45,760
told you i was going to give you a nice

865
00:30:45,760 --> 00:30:47,440
intro about what what the goal of the

866
00:30:47,440 --> 00:30:49,520
talk is and i totally forgot to

867
00:30:49,520 --> 00:30:52,559
so i put it in the chat but

868
00:30:52,559 --> 00:30:54,399
i think it sort of became clear that you

869
00:30:54,399 --> 00:30:56,240
know this is a thing that

870
00:30:56,240 --> 00:30:57,760
people have been using for quick and

871
00:30:57,760 --> 00:30:59,519
it's quite effective but

872
00:30:59,519 --> 00:31:01,120
there's also still some other questions

873
00:31:01,120 --> 00:31:03,360
in terms of how to make it

874
00:31:03,360 --> 00:31:06,399
broadly applicable to new and existing

875
00:31:06,399 --> 00:31:08,640
encrypted protocols in general

876
00:31:08,640 --> 00:31:11,279
um and you know so to make it uh broadly

877
00:31:11,279 --> 00:31:12,240
useful and

878
00:31:12,240 --> 00:31:14,960
sort of improve and deal with some of

879
00:31:14,960 --> 00:31:16,880
these open questions that you mentioned

880
00:31:16,880 --> 00:31:19,279
so it would be great if we can get some

881
00:31:19,279 --> 00:31:20,159
feedback from

882
00:31:20,159 --> 00:31:22,880
the people here or whether now or in the

883
00:31:22,880 --> 00:31:23,279
quick

884
00:31:23,279 --> 00:31:25,360
or the future working group where this

885
00:31:25,360 --> 00:31:28,158
gets taken up

886
00:31:28,720 --> 00:31:31,279
so uh the queue is open it looks like

887
00:31:31,279 --> 00:31:34,640
stephen you are first so go ahead

888
00:31:34,640 --> 00:31:37,200
uh yeah here's a good idea um i just

889
00:31:37,200 --> 00:31:39,120
wonder have you kind of thought about

890
00:31:39,120 --> 00:31:41,519
how this relates to pcap files and

891
00:31:41,519 --> 00:31:43,039
wireshark and the like which people are

892
00:31:43,039 --> 00:31:44,640
also used to using for

893
00:31:44,640 --> 00:31:47,919
similar purposes and the second quest

894
00:31:47,919 --> 00:31:49,519
part of that is

895
00:31:49,519 --> 00:31:52,880
the sense that you know the

896
00:31:52,880 --> 00:31:55,200
privacy uh sense of information that is

897
00:31:55,200 --> 00:31:56,320
in these files

898
00:31:56,320 --> 00:31:58,240
that problem exists for heat caps as

899
00:31:58,240 --> 00:32:00,159
well and i don't think it's been solved

900
00:32:00,159 --> 00:32:00,880
very well

901
00:32:00,880 --> 00:32:02,559
so again i think looking at that would

902
00:32:02,559 --> 00:32:04,799
be good

903
00:32:06,159 --> 00:32:07,840
yeah we've we've definitely of course

904
00:32:07,840 --> 00:32:09,200
looked at um

905
00:32:09,200 --> 00:32:10,880
at peak apps the the thing that we have

906
00:32:10,880 --> 00:32:12,720
is what i was trying to say

907
00:32:12,720 --> 00:32:14,320
and definition format is that they are

908
00:32:14,320 --> 00:32:15,840
necessarily very very much

909
00:32:15,840 --> 00:32:18,880
tied to the wire image um

910
00:32:18,880 --> 00:32:20,799
of the format and they have some ways of

911
00:32:20,799 --> 00:32:23,679
had adding metadata annotations but it's

912
00:32:23,679 --> 00:32:25,120
it's not as flexible as we'd like it to

913
00:32:25,120 --> 00:32:26,960
be

914
00:32:26,960 --> 00:32:29,440
it is definitely an uh i would say a

915
00:32:29,440 --> 00:32:30,640
complementary thing

916
00:32:30,640 --> 00:32:32,399
we currently have tools that transfer

917
00:32:32,399 --> 00:32:34,640
from p caps to q log for

918
00:32:34,640 --> 00:32:37,919
for quick for example right and

919
00:32:37,919 --> 00:32:39,760
correct me if i'm wrong but sort of some

920
00:32:39,760 --> 00:32:41,919
of the initial motivation is that the

921
00:32:41,919 --> 00:32:42,480
raw

922
00:32:42,480 --> 00:32:45,760
packet capture pcap is not very useful

923
00:32:45,760 --> 00:32:47,840
because quick quick is so heavily

924
00:32:47,840 --> 00:32:48,880
encrypted

925
00:32:48,880 --> 00:32:51,600
and so it's actually more useful to have

926
00:32:51,600 --> 00:32:53,200
the

927
00:32:53,200 --> 00:32:56,080
abstract state dump than just the wire

928
00:32:56,080 --> 00:32:58,399
image

929
00:33:00,640 --> 00:33:02,720
yeah but in theory you could you could

930
00:33:02,720 --> 00:33:04,880
just log in the pcapp format right

931
00:33:04,880 --> 00:33:06,720
you could exfiltrate pcaps from the

932
00:33:06,720 --> 00:33:08,399
implementations

933
00:33:08,399 --> 00:33:11,279
and and store unencrypted quick fire

934
00:33:11,279 --> 00:33:13,600
image

935
00:33:14,799 --> 00:33:16,159
but that's that's something we

936
00:33:16,159 --> 00:33:19,840
intentionally chose chose not to do

937
00:33:22,840 --> 00:33:25,840
earlier

938
00:33:27,919 --> 00:33:30,720
so i guess you are going to be doing

939
00:33:30,720 --> 00:33:31,600
some work for

940
00:33:31,600 --> 00:33:34,480
tls also i mean the problems i have had

941
00:33:34,480 --> 00:33:36,240
lately is to try to debug

942
00:33:36,240 --> 00:33:39,360
things in tls because it's always

943
00:33:39,360 --> 00:33:41,279
happening inside the you know library

944
00:33:41,279 --> 00:33:42,960
and the upper layer

945
00:33:42,960 --> 00:33:44,480
applications don't get any useful

946
00:33:44,480 --> 00:33:46,320
information and the wireshark doesn't

947
00:33:46,320 --> 00:33:47,039
tell you

948
00:33:47,039 --> 00:33:49,760
it's interesting information so is there

949
00:33:49,760 --> 00:33:52,399
going to be schema describing

950
00:33:52,399 --> 00:33:54,960
uh tls events or that kind of things and

951
00:33:54,960 --> 00:33:56,640
of course i don't want to have you know

952
00:33:56,640 --> 00:33:59,120
for example into storing the tls keys

953
00:33:59,120 --> 00:34:01,840
because that would be very sensitive i

954
00:34:01,840 --> 00:34:02,799
don't want to have

955
00:34:02,799 --> 00:34:04,320
those locked out but i would like to

956
00:34:04,320 --> 00:34:06,480
have for example what certificate was

957
00:34:06,480 --> 00:34:07,200
sent but

958
00:34:07,200 --> 00:34:10,560
you know apply inside out failed or that

959
00:34:10,560 --> 00:34:11,119
kind of thing

960
00:34:11,119 --> 00:34:13,520
information would be very useful to get

961
00:34:13,520 --> 00:34:14,719
out from there

962
00:34:14,719 --> 00:34:17,359
and of course it would be very useful if

963
00:34:17,359 --> 00:34:18,399
i could be

964
00:34:18,399 --> 00:34:21,839
enabling and disabling so i could

965
00:34:21,839 --> 00:34:22,480
actually

966
00:34:22,480 --> 00:34:25,918
not only all the time

967
00:34:25,918 --> 00:34:28,000
but i would want to say that okay for

968
00:34:28,000 --> 00:34:30,239
next connection coming from these iprs i

969
00:34:30,239 --> 00:34:32,399
want to have logs

970
00:34:32,399 --> 00:34:36,480
that sent them to me and don't send me

971
00:34:36,480 --> 00:34:39,119
too much stuff

972
00:34:42,719 --> 00:34:45,040
yeah i'm i'm very sorry but there's

973
00:34:45,040 --> 00:34:47,440
construction right next to me

974
00:34:47,440 --> 00:34:49,679
so i don't catch everything but the

975
00:34:49,679 --> 00:34:50,639
thing is yes

976
00:34:50,639 --> 00:34:52,960
we want to have a separate tls schema we

977
00:34:52,960 --> 00:34:54,960
have parts of tls

978
00:34:54,960 --> 00:34:57,520
that we needed for quick um but i

979
00:34:57,520 --> 00:34:59,599
intentionally put off doing full tls

980
00:34:59,599 --> 00:35:03,200
until we also can do something for tcp

981
00:35:03,200 --> 00:35:04,560
as well which is what we're doing right

982
00:35:04,560 --> 00:35:07,760
now into tls is a logical next step so

983
00:35:07,760 --> 00:35:09,599
there are people interested in defining

984
00:35:09,599 --> 00:35:11,119
a first

985
00:35:11,119 --> 00:35:12,720
version of the schema for tls that would

986
00:35:12,720 --> 00:35:17,520
be definitely welcome

987
00:35:17,520 --> 00:35:19,440
okay i think in the interest of time i

988
00:35:19,440 --> 00:35:20,800
will cut the cue here

989
00:35:20,800 --> 00:35:23,839
with robin being last but phil you are

990
00:35:23,839 --> 00:35:27,599
up first yeah i i was just going to say

991
00:35:27,599 --> 00:35:29,280
that one of the things that kept coming

992
00:35:29,280 --> 00:35:30,560
up was is this

993
00:35:30,560 --> 00:35:33,040
uh something itf should do because it's

994
00:35:33,040 --> 00:35:34,160
not uh

995
00:35:34,160 --> 00:35:36,720
protocol and it occurred to me that it

996
00:35:36,720 --> 00:35:38,480
is protocol

997
00:35:38,480 --> 00:35:41,119
in the if you have alice and bob who are

998
00:35:41,119 --> 00:35:42,160
trying

999
00:35:42,160 --> 00:35:44,079
if you've got if you call up customer

1000
00:35:44,079 --> 00:35:45,359
service

1001
00:35:45,359 --> 00:35:48,640
and you're trying to debug some you know

1002
00:35:48,640 --> 00:35:51,520
apple whatever

1003
00:35:51,839 --> 00:35:54,880
the customer service person can have one

1004
00:35:54,880 --> 00:35:58,000
browser the person who is coming up

1005
00:35:58,000 --> 00:36:00,160
can have another and you're going to

1006
00:36:00,160 --> 00:36:01,359
need to have some

1007
00:36:01,359 --> 00:36:04,000
common mode of interchange so that that

1008
00:36:04,000 --> 00:36:06,480
customer service piece

1009
00:36:06,480 --> 00:36:09,760
can be uh debugged so there is actually

1010
00:36:09,760 --> 00:36:11,040
an interoperability

1011
00:36:11,040 --> 00:36:14,079
issue here beyond the convenience of

1012
00:36:14,079 --> 00:36:16,960
everybody being able to use the whole

1013
00:36:16,960 --> 00:36:19,440
being able to use the tools when you

1014
00:36:19,440 --> 00:36:21,280
think of customer service you are going

1015
00:36:21,280 --> 00:36:23,119
to need a feature like this

1016
00:36:23,119 --> 00:36:27,839
so that you can say send me the logs

1017
00:36:28,560 --> 00:36:31,119
yeah and that's for example uh something

1018
00:36:31,119 --> 00:36:32,800
that f5

1019
00:36:32,800 --> 00:36:34,560
um i've been have been saying and

1020
00:36:34,560 --> 00:36:36,800
they've added qlog to their

1021
00:36:36,800 --> 00:36:38,320
to their products as well specifically

1022
00:36:38,320 --> 00:36:41,839
for that um

1023
00:36:42,240 --> 00:36:44,400
all right robin wilton you have a

1024
00:36:44,400 --> 00:36:45,839
question go ahead

1025
00:36:45,839 --> 00:36:49,280
hello one yeah um hi uh thanks ben

1026
00:36:49,280 --> 00:36:51,599
um this is pretty brief and it's um

1027
00:36:51,599 --> 00:36:53,680
purely about optics

1028
00:36:53,680 --> 00:36:56,480
and it's and it's driven by my current

1029
00:36:56,480 --> 00:36:57,280
um

1030
00:36:57,280 --> 00:37:00,240
paranoia because i'm trying to defend uh

1031
00:37:00,240 --> 00:37:01,280
encryption against

1032
00:37:01,280 --> 00:37:03,920
uh policies that are hostile towards it

1033
00:37:03,920 --> 00:37:04,880
um so

1034
00:37:04,880 --> 00:37:07,200
two things the first one is is there

1035
00:37:07,200 --> 00:37:08,000
anything that we can

1036
00:37:08,000 --> 00:37:11,280
say explicitly that says that although

1037
00:37:11,280 --> 00:37:11,920
this is

1038
00:37:11,920 --> 00:37:15,520
a um a debugging analysis method

1039
00:37:15,520 --> 00:37:17,440
that's intended to be used where the

1040
00:37:17,440 --> 00:37:19,040
encryption is where the data is

1041
00:37:19,040 --> 00:37:20,000
encrypted

1042
00:37:20,000 --> 00:37:22,079
um there's no sense in which it

1043
00:37:22,079 --> 00:37:23,680
represents a threat to that encrypted

1044
00:37:23,680 --> 00:37:24,240
data

1045
00:37:24,240 --> 00:37:26,640
so that's that's the optics bit and and

1046
00:37:26,640 --> 00:37:28,800
then the second one practically is

1047
00:37:28,800 --> 00:37:32,000
um does this actually compromise the

1048
00:37:32,000 --> 00:37:35,200
the um the privacy of the people

1049
00:37:35,200 --> 00:37:36,000
communicating over

1050
00:37:36,000 --> 00:37:39,440
that uh encrypted channel

1051
00:37:41,440 --> 00:37:43,119
and i think the answer that is no but

1052
00:37:43,119 --> 00:37:45,440
again it's an optics thing

1053
00:37:45,440 --> 00:37:46,880
you know if we can say something about

1054
00:37:46,880 --> 00:37:49,119
that i think it's it's helpful for those

1055
00:37:49,119 --> 00:37:51,680
looking at this from the outside

1056
00:37:51,680 --> 00:37:55,200
yep i agree

1057
00:37:58,560 --> 00:38:00,800
so i wasn't sure because we were

1058
00:38:00,800 --> 00:38:02,839
interrupted a couple of times by ecker

1059
00:38:02,839 --> 00:38:04,880
but

1060
00:38:04,880 --> 00:38:06,640
someone suggested that he might be in

1061
00:38:06,640 --> 00:38:09,599
two sessions at once

1062
00:38:09,599 --> 00:38:12,400
not the one he wanted to okay that's

1063
00:38:12,400 --> 00:38:12,800
great

1064
00:38:12,800 --> 00:38:16,640
so great thanks for the feedback uh

1065
00:38:16,640 --> 00:38:18,480
robin i hope you found it valuable of

1066
00:38:18,480 --> 00:38:21,040
course people can reach out to you

1067
00:38:21,040 --> 00:38:22,880
in the ways you indicated with more

1068
00:38:22,880 --> 00:38:24,480
thoughts and ideas and we look forward

1069
00:38:24,480 --> 00:38:25,200
to seeing

1070
00:38:25,200 --> 00:38:28,400
more of keylog in the future

1071
00:38:28,400 --> 00:38:31,520
so with that we are just on time so i

1072
00:38:31,520 --> 00:38:32,000
think

1073
00:38:32,000 --> 00:38:35,839
uh robin lee is also up next

1074
00:38:35,839 --> 00:38:38,800
with uh application aware networking

1075
00:38:38,800 --> 00:38:39,839
champion

1076
00:38:39,839 --> 00:38:42,560
can you join the or start sending your

1077
00:38:42,560 --> 00:38:44,839
audio

1078
00:38:44,839 --> 00:38:47,839
great

1079
00:38:48,960 --> 00:38:51,920
uh hello ben can you hear me yes we can

1080
00:38:51,920 --> 00:38:54,000
hear you please go ahead

1081
00:38:54,000 --> 00:38:57,119
okay uh hello everyone

1082
00:38:57,119 --> 00:39:00,720
uh this is a champion in fact

1083
00:39:00,720 --> 00:39:03,359
this is my first presentation in the

1084
00:39:03,359 --> 00:39:04,240
security

1085
00:39:04,240 --> 00:39:07,680
area yeah because i'm always have the

1086
00:39:07,680 --> 00:39:08,400
ietf

1087
00:39:08,400 --> 00:39:11,440
work in the routine area

1088
00:39:11,440 --> 00:39:14,079
yeah but because the application we are

1089
00:39:14,079 --> 00:39:14,800
not working

1090
00:39:14,800 --> 00:39:18,240
has much relation with the security and

1091
00:39:18,240 --> 00:39:19,040
the privacy

1092
00:39:19,040 --> 00:39:22,079
issue uh so we would like to take the

1093
00:39:22,079 --> 00:39:22,880
chance

1094
00:39:22,880 --> 00:39:26,079
to have your advice on this work okay

1095
00:39:26,079 --> 00:39:26,400
and

1096
00:39:26,400 --> 00:39:29,440
also thanks to the circle area

1097
00:39:29,440 --> 00:39:31,119
to give me the chance to do the

1098
00:39:31,119 --> 00:39:35,280
presentation okay next slice

1099
00:39:37,599 --> 00:39:41,280
okay first i introduce the purpose

1100
00:39:41,280 --> 00:39:44,160
of presenting the apm work in this

1101
00:39:44,160 --> 00:39:45,760
working group

1102
00:39:45,760 --> 00:39:48,960
so in fact that we proposed apm work

1103
00:39:48,960 --> 00:39:52,079
in the ietf two years ago yeah but in

1104
00:39:52,079 --> 00:39:52,880
the process

1105
00:39:52,880 --> 00:39:56,320
promoting the uh promoting the apm work

1106
00:39:56,320 --> 00:39:58,240
uh that means application we are

1107
00:39:58,240 --> 00:39:59,680
networking uh

1108
00:39:59,680 --> 00:40:02,560
there's always the security issue and

1109
00:40:02,560 --> 00:40:03,359
the properties

1110
00:40:03,359 --> 00:40:06,480
issue have been challenged by people

1111
00:40:06,480 --> 00:40:10,000
uh so we would like to take the

1112
00:40:10,000 --> 00:40:13,040
chance to get the advice

1113
00:40:13,040 --> 00:40:16,000
in this working group uh that's the

1114
00:40:16,000 --> 00:40:16,640
purpose

1115
00:40:16,640 --> 00:40:21,040
of the presenting okay next slice

1116
00:40:22,880 --> 00:40:25,680
okay so first i introduce what's the

1117
00:40:25,680 --> 00:40:27,839
application where networking

1118
00:40:27,839 --> 00:40:31,280
uh so uh this is the apn

1119
00:40:31,280 --> 00:40:33,680
uh user focused on developing a

1120
00:40:33,680 --> 00:40:34,880
framework

1121
00:40:34,880 --> 00:40:37,920
and a set of the mechanism

1122
00:40:37,920 --> 00:40:41,200
to derive convey and use attribute

1123
00:40:41,200 --> 00:40:44,800
information to allow the implementation

1124
00:40:44,800 --> 00:40:47,839
of the fine green user group

1125
00:40:47,839 --> 00:40:50,400
application group and the service level

1126
00:40:50,400 --> 00:40:51,200
requirement

1127
00:40:51,200 --> 00:40:54,400
as a network layer so from this

1128
00:40:54,400 --> 00:40:57,920
the picture we can see that's the as a

1129
00:40:57,920 --> 00:40:58,640
network

1130
00:40:58,640 --> 00:41:02,319
edge it can tag the application

1131
00:41:02,319 --> 00:41:05,119
group information or the user group

1132
00:41:05,119 --> 00:41:06,720
information

1133
00:41:06,720 --> 00:41:10,000
and this information be encapsulated

1134
00:41:10,000 --> 00:41:13,839
in the network layer so when the packet

1135
00:41:13,839 --> 00:41:17,599
is a transverse to the network domain

1136
00:41:17,599 --> 00:41:20,400
search information will be treated as a

1137
00:41:20,400 --> 00:41:21,599
object

1138
00:41:21,599 --> 00:41:25,280
so according to this object it can

1139
00:41:25,280 --> 00:41:28,400
be applied to the different policy

1140
00:41:28,400 --> 00:41:31,839
to satisfy the different requirements

1141
00:41:31,839 --> 00:41:36,079
such as the sra guarantee

1142
00:41:36,079 --> 00:41:39,359
so the apn uh

1143
00:41:39,359 --> 00:41:42,560
from this the introduction we propose

1144
00:41:42,560 --> 00:41:43,839
this is the idea

1145
00:41:43,839 --> 00:41:46,960
that means the apn works within a

1146
00:41:46,960 --> 00:41:51,119
limited trust domain so the typically

1147
00:41:51,119 --> 00:41:55,040
a apn domain is defined as a service

1148
00:41:55,040 --> 00:41:58,319
provider's limited domain in which

1149
00:41:58,319 --> 00:42:01,359
i'm charged vxlan and

1150
00:42:01,359 --> 00:42:04,800
sr tunnel technologies adopted

1151
00:42:04,800 --> 00:42:08,319
to provide a service and the apn

1152
00:42:08,319 --> 00:42:11,359
attribute is tagged and removed

1153
00:42:11,359 --> 00:42:14,319
at the edge of the limited trusted

1154
00:42:14,319 --> 00:42:15,599
domain

1155
00:42:15,599 --> 00:42:18,800
is is not

1156
00:42:18,800 --> 00:42:20,960
the case that the application

1157
00:42:20,960 --> 00:42:21,920
information

1158
00:42:21,920 --> 00:42:24,720
is being encapsulated in the host or the

1159
00:42:24,720 --> 00:42:26,160
application

1160
00:42:26,160 --> 00:42:29,280
that's the key message in this

1161
00:42:29,280 --> 00:42:33,200
picture okay next slice

1162
00:42:35,119 --> 00:42:37,280
okay so here this is the color

1163
00:42:37,280 --> 00:42:38,240
confession

1164
00:42:38,240 --> 00:42:41,359
about what vpn is not uh so

1165
00:42:41,359 --> 00:42:43,599
the first one apn is not about to

1166
00:42:43,599 --> 00:42:45,440
identify the specific

1167
00:42:45,440 --> 00:42:49,680
application or within the network

1168
00:42:49,680 --> 00:42:52,960
so the first we can say that we just

1169
00:42:52,960 --> 00:42:56,880
need a generalized classification

1170
00:42:56,880 --> 00:42:59,280
about the user group or the application

1171
00:42:59,280 --> 00:43:00,079
group

1172
00:43:00,079 --> 00:43:04,240
but the epn does not necessary to know

1173
00:43:04,240 --> 00:43:08,079
the concrete application

1174
00:43:08,079 --> 00:43:11,280
which sends the traffic to the network

1175
00:43:11,280 --> 00:43:14,319
so this is the first

1176
00:43:14,319 --> 00:43:17,359
collocation so and this is the second

1177
00:43:17,359 --> 00:43:17,760
one

1178
00:43:17,760 --> 00:43:20,079
that the apn is about telling the

1179
00:43:20,079 --> 00:43:21,200
network

1180
00:43:21,200 --> 00:43:24,480
what policy to apply to the traffic

1181
00:43:24,480 --> 00:43:28,079
so that means the application can be

1182
00:43:28,079 --> 00:43:31,359
applied to apply multiple policy

1183
00:43:31,359 --> 00:43:34,079
to different traffic flow and also

1184
00:43:34,079 --> 00:43:35,119
multiple

1185
00:43:35,119 --> 00:43:37,760
applications can ask for the same

1186
00:43:37,760 --> 00:43:39,119
policies

1187
00:43:39,119 --> 00:43:42,319
so that means that the policy

1188
00:43:42,319 --> 00:43:45,440
is used for the generalized application

1189
00:43:45,440 --> 00:43:45,839
group

1190
00:43:45,839 --> 00:43:49,200
or the user group instead of the policy

1191
00:43:49,200 --> 00:43:51,680
will be applied to a specific

1192
00:43:51,680 --> 00:43:52,560
application

1193
00:43:52,560 --> 00:43:56,160
or specific users so this is also this

1194
00:43:56,160 --> 00:43:56,720
is the

1195
00:43:56,720 --> 00:43:59,839
clarification so the third one i think

1196
00:43:59,839 --> 00:44:01,440
the apn

1197
00:44:01,440 --> 00:44:04,640
in the history there had some work

1198
00:44:04,640 --> 00:44:08,480
which sung the seminar such as sabad

1199
00:44:08,480 --> 00:44:12,000
and the plus network token and also

1200
00:44:12,000 --> 00:44:12,480
there's

1201
00:44:12,480 --> 00:44:15,839
some work and the priority for the party

1202
00:44:15,839 --> 00:44:18,640
that's the difference because that's the

1203
00:44:18,640 --> 00:44:19,359
that means

1204
00:44:19,359 --> 00:44:22,880
the application who can be aware of the

1205
00:44:22,880 --> 00:44:23,599
network

1206
00:44:23,599 --> 00:44:26,800
information but for the apn that means

1207
00:44:26,800 --> 00:44:30,240
the network can aware of the application

1208
00:44:30,240 --> 00:44:31,680
information

1209
00:44:31,680 --> 00:44:35,040
that's the different aspects uh and

1210
00:44:35,040 --> 00:44:37,119
for the sabbath and the plus at the

1211
00:44:37,119 --> 00:44:38,560
network token

1212
00:44:38,560 --> 00:44:41,920
uh the idea of this work

1213
00:44:41,920 --> 00:44:45,200
uh the similar part is that it

1214
00:44:45,200 --> 00:44:47,839
always encapsulates the application

1215
00:44:47,839 --> 00:44:50,319
information in the host

1216
00:44:50,319 --> 00:44:53,440
under the other applications so

1217
00:44:53,440 --> 00:44:56,160
this means the information will be

1218
00:44:56,160 --> 00:44:57,440
traversed

1219
00:44:57,440 --> 00:45:00,480
along the whole internet that's the

1220
00:45:00,480 --> 00:45:03,680
information to be carried under to under

1221
00:45:03,680 --> 00:45:05,520
around the internet

1222
00:45:05,520 --> 00:45:07,760
so we think that this will introduce the

1223
00:45:07,760 --> 00:45:08,960
more security

1224
00:45:08,960 --> 00:45:11,760
and privacy issues because this is

1225
00:45:11,760 --> 00:45:12,240
always

1226
00:45:12,240 --> 00:45:16,079
open to the whole internet but the apn

1227
00:45:16,079 --> 00:45:19,599
is only to only

1228
00:45:19,599 --> 00:45:23,440
be applied in the service providers

1229
00:45:23,440 --> 00:45:26,400
limited trusted domain that means the

1230
00:45:26,400 --> 00:45:28,960
application information will be tagged

1231
00:45:28,960 --> 00:45:32,880
as a network edge but when the packet

1232
00:45:32,880 --> 00:45:35,760
leaves the limited domain the

1233
00:45:35,760 --> 00:45:38,079
information will be removed

1234
00:45:38,079 --> 00:45:40,960
so we think that's the information is

1235
00:45:40,960 --> 00:45:44,640
only be applied in the limited domain

1236
00:45:44,640 --> 00:45:48,319
where there is a third one uh

1237
00:45:48,319 --> 00:45:51,599
so that's in the past two years

1238
00:45:51,599 --> 00:45:54,960
we have the two apn related set meeting

1239
00:45:54,960 --> 00:45:59,280
so that's in the ietf18 so we

1240
00:45:59,280 --> 00:46:01,920
asked the brain tremor to also introduce

1241
00:46:01,920 --> 00:46:04,160
this to the sabbath and the past work

1242
00:46:04,160 --> 00:46:06,960
and in the said meeting we clarified as

1243
00:46:06,960 --> 00:46:07,680
the

1244
00:46:07,680 --> 00:46:11,200
convey in the information uh oh sorry

1245
00:46:11,200 --> 00:46:14,079
so that's the the party and as for the

1246
00:46:14,079 --> 00:46:15,280
sabbath and the plus

1247
00:46:15,280 --> 00:46:18,880
network token there's another uh

1248
00:46:18,880 --> 00:46:22,000
common thing that's used because it is

1249
00:46:22,000 --> 00:46:24,560
encapsulated the application information

1250
00:46:24,560 --> 00:46:25,839
as a host

1251
00:46:25,839 --> 00:46:28,240
or by the applications so this

1252
00:46:28,240 --> 00:46:30,160
information can be carried

1253
00:46:30,160 --> 00:46:32,079
by the transport layer or the

1254
00:46:32,079 --> 00:46:34,079
application layer

1255
00:46:34,079 --> 00:46:37,359
but for the apn because that is always

1256
00:46:37,359 --> 00:46:39,839
the application group information and

1257
00:46:39,839 --> 00:46:40,880
the user group

1258
00:46:40,880 --> 00:46:44,000
information is encapsulated as a network

1259
00:46:44,000 --> 00:46:44,720
edge

1260
00:46:44,720 --> 00:46:48,079
so that the api from the application

1261
00:46:48,079 --> 00:46:51,359
aware information can be

1262
00:46:51,359 --> 00:46:55,359
encapsulated in the network layer so

1263
00:46:55,359 --> 00:46:58,480
in summary we try to clarify that the

1264
00:46:58,480 --> 00:47:00,960
conveyor information through the

1265
00:47:00,960 --> 00:47:03,680
transport layer application layer

1266
00:47:03,680 --> 00:47:07,599
is different from that work

1267
00:47:07,599 --> 00:47:10,319
that the information be encapsulated in

1268
00:47:10,319 --> 00:47:11,920
the network layer

1269
00:47:11,920 --> 00:47:15,280
so this is the information we would like

1270
00:47:15,280 --> 00:47:19,440
to clarify in this

1271
00:47:19,440 --> 00:47:22,880
part okay next one

1272
00:47:23,040 --> 00:47:25,520
uh so jim bin just in the interest of

1273
00:47:25,520 --> 00:47:27,680
time maybe for the next few slides we

1274
00:47:27,680 --> 00:47:28,240
can just

1275
00:47:28,240 --> 00:47:30,880
touch on the very important points and

1276
00:47:30,880 --> 00:47:32,319
then get out to the

1277
00:47:32,319 --> 00:47:35,440
q a topics okay yeah

1278
00:47:35,440 --> 00:47:38,800
thanks thanks mandy okay so here there's

1279
00:47:38,800 --> 00:47:40,079
a user give a

1280
00:47:40,079 --> 00:47:41,839
uh you're the case about this is the

1281
00:47:41,839 --> 00:47:44,160
sd-wan because it's very popular

1282
00:47:44,160 --> 00:47:47,200
yeah and also the me mef defined some of

1283
00:47:47,200 --> 00:47:48,079
the

1284
00:47:48,079 --> 00:47:51,280
standards so here let's use the refer to

1285
00:47:51,280 --> 00:47:52,319
the mtf

1286
00:47:52,319 --> 00:47:55,680
70 the standards so that means in the

1287
00:47:55,680 --> 00:47:56,480
cpe

1288
00:47:56,480 --> 00:47:59,680
so according to that the five tubes the

1289
00:47:59,680 --> 00:48:00,640
information

1290
00:48:00,640 --> 00:48:04,079
can map this the traffic flow

1291
00:48:04,079 --> 00:48:06,960
into the different one line but it will

1292
00:48:06,960 --> 00:48:08,480
enter into the one

1293
00:48:08,480 --> 00:48:11,200
uh enter into the one there's a still

1294
00:48:11,200 --> 00:48:12,800
the multiple paths

1295
00:48:12,800 --> 00:48:15,440
so in order for the different network

1296
00:48:15,440 --> 00:48:16,079
paths

1297
00:48:16,079 --> 00:48:20,440
there can be the different sre guarantee

1298
00:48:20,440 --> 00:48:23,440
characteristics so in order to satisfy

1299
00:48:23,440 --> 00:48:24,880
this requirement

1300
00:48:24,880 --> 00:48:27,200
uh we think that there's the need to

1301
00:48:27,200 --> 00:48:28,480
carry this the

1302
00:48:28,480 --> 00:48:30,800
application information when entered

1303
00:48:30,800 --> 00:48:31,839
into the one

1304
00:48:31,839 --> 00:48:34,000
so that's in the one so that according

1305
00:48:34,000 --> 00:48:35,359
to this information

1306
00:48:35,359 --> 00:48:38,000
to mapping the different network paths

1307
00:48:38,000 --> 00:48:38,559
for the

1308
00:48:38,559 --> 00:48:42,240
specific sra guarantee requirement

1309
00:48:42,240 --> 00:48:48,240
okay next one

1310
00:48:48,240 --> 00:48:51,920
okay so this is why the apm uh so now

1311
00:48:51,920 --> 00:48:52,240
let's

1312
00:48:52,240 --> 00:48:55,920
use the uh in order to uh

1313
00:48:55,920 --> 00:48:59,599
implement the uh requirement

1314
00:48:59,599 --> 00:49:02,240
uh mentioned in the about this the sdy

1315
00:49:02,240 --> 00:49:03,359
use cases

1316
00:49:03,359 --> 00:49:06,559
so we need to map to the different

1317
00:49:06,559 --> 00:49:09,359
network paths so that's we think there's

1318
00:49:09,359 --> 00:49:09,839
a

1319
00:49:09,839 --> 00:49:12,800
convenient one so this we can use this

1320
00:49:12,800 --> 00:49:13,760
the

1321
00:49:13,760 --> 00:49:17,200
information of this can convey this

1322
00:49:17,200 --> 00:49:19,440
application group information or the

1323
00:49:19,440 --> 00:49:20,319
user group

1324
00:49:20,319 --> 00:49:22,960
information to the network is the easy

1325
00:49:22,960 --> 00:49:24,000
way

1326
00:49:24,000 --> 00:49:27,119
or else if we use the five tube of this

1327
00:49:27,119 --> 00:49:30,319
the ip packet because we'll enter into

1328
00:49:30,319 --> 00:49:31,359
the one network

1329
00:49:31,359 --> 00:49:34,160
so the tunnel will be encapsulated

1330
00:49:34,160 --> 00:49:35,680
before this is the

1331
00:49:35,680 --> 00:49:38,640
ip preload so that this effective

1332
00:49:38,640 --> 00:49:39,359
information

1333
00:49:39,359 --> 00:49:42,720
is difficult to be achieved uh in the

1334
00:49:42,720 --> 00:49:43,920
network so that

1335
00:49:43,920 --> 00:49:46,559
is harder to take use of this effective

1336
00:49:46,559 --> 00:49:47,760
information

1337
00:49:47,760 --> 00:49:50,800
for the specific sre guaranteed

1338
00:49:50,800 --> 00:49:54,559
requirement okay next one

1339
00:49:57,760 --> 00:50:00,559
okay so here i will not repeat this

1340
00:50:00,559 --> 00:50:02,880
information so here is adjuster to

1341
00:50:02,880 --> 00:50:06,079
convey this information uh as a network

1342
00:50:06,079 --> 00:50:09,280
edge and to the uh and the user along

1343
00:50:09,280 --> 00:50:10,880
with this the packet

1344
00:50:10,880 --> 00:50:14,640
to transverse this network work so this

1345
00:50:14,640 --> 00:50:17,280
can get some of this the benefit so this

1346
00:50:17,280 --> 00:50:18,079
is

1347
00:50:18,079 --> 00:50:21,680
uh easy and also only the uh one

1348
00:50:21,680 --> 00:50:24,400
one fields instead of the five tube it

1349
00:50:24,400 --> 00:50:26,800
can also improve the forward forwarding

1350
00:50:26,800 --> 00:50:27,680
performance

1351
00:50:27,680 --> 00:50:30,800
it can also use the other purpose such

1352
00:50:30,800 --> 00:50:31,359
as

1353
00:50:31,359 --> 00:50:34,400
to guarantee this the uh use this the

1354
00:50:34,400 --> 00:50:36,559
information for the security

1355
00:50:36,559 --> 00:50:39,920
or for the performance environment offer

1356
00:50:39,920 --> 00:50:40,240
the

1357
00:50:40,240 --> 00:50:43,520
sr guarantee okay next right

1358
00:50:43,520 --> 00:50:46,400
yeah i think maybe can i suggest we skip

1359
00:50:46,400 --> 00:50:47,040
to the

1360
00:50:47,040 --> 00:50:49,599
frequently asked questions and then go

1361
00:50:49,599 --> 00:50:51,599
directly into the

1362
00:50:51,599 --> 00:50:54,800
specific questions for this group okay

1363
00:50:54,800 --> 00:50:57,440
so next one okay so here you are just a

1364
00:50:57,440 --> 00:50:58,079
quick this

1365
00:50:58,079 --> 00:51:00,720
is there are some this is the existing

1366
00:51:00,720 --> 00:51:02,000
uh information but

1367
00:51:02,000 --> 00:51:04,880
we think that that's the solution is not

1368
00:51:04,880 --> 00:51:06,079
generalized

1369
00:51:06,079 --> 00:51:08,960
so we think that we need a generalized

1370
00:51:08,960 --> 00:51:10,480
information to carry this

1371
00:51:10,480 --> 00:51:13,200
the application aware information okay

1372
00:51:13,200 --> 00:51:15,839
next slice

1373
00:51:16,800 --> 00:51:18,960
okay so here this is the frequently

1374
00:51:18,960 --> 00:51:20,640
asked information

1375
00:51:20,640 --> 00:51:23,839
for this one in fact that is also

1376
00:51:23,839 --> 00:51:26,400
mentioned in the presentation in the

1377
00:51:26,400 --> 00:51:27,920
dispatch working group

1378
00:51:27,920 --> 00:51:31,119
on this monday

1379
00:51:31,119 --> 00:51:33,520
so here are these summaries so this are

1380
00:51:33,520 --> 00:51:34,640
there any

1381
00:51:34,640 --> 00:51:37,040
applications that can benefit from the

1382
00:51:37,040 --> 00:51:38,000
apn

1383
00:51:38,000 --> 00:51:41,040
so in fact we think this is according to

1384
00:51:41,040 --> 00:51:43,760
the experience of the media echo

1385
00:51:43,760 --> 00:51:46,800
of the ietr meeting we can see that the

1386
00:51:46,800 --> 00:51:49,920
qoe can be improved and we think that

1387
00:51:49,920 --> 00:51:50,800
the network

1388
00:51:50,800 --> 00:51:53,839
can play a role in this one and the

1389
00:51:53,839 --> 00:51:55,359
second one is how can

1390
00:51:55,359 --> 00:51:58,960
apn help us resolve this qoe issue

1391
00:51:58,960 --> 00:52:02,559
we think that apn can help resolve this

1392
00:52:02,559 --> 00:52:06,000
qe issue through the network

1393
00:52:06,000 --> 00:52:09,520
but uh koe covered us more aspects

1394
00:52:09,520 --> 00:52:12,480
so that's used not only to solve by the

1395
00:52:12,480 --> 00:52:13,520
apn

1396
00:52:13,520 --> 00:52:16,400
and the third one who is to sell the epm

1397
00:52:16,400 --> 00:52:17,359
attribute

1398
00:52:17,359 --> 00:52:19,119
so that's user mentioned there's a

1399
00:52:19,119 --> 00:52:20,400
network edge

1400
00:52:20,400 --> 00:52:23,839
and how to set this the api attribute

1401
00:52:23,839 --> 00:52:26,000
so that we think there's the different

1402
00:52:26,000 --> 00:52:28,000
way according to the

1403
00:52:28,000 --> 00:52:30,960
existing information of the packet the

1404
00:52:30,960 --> 00:52:31,440
basic

1405
00:52:31,440 --> 00:52:35,119
way is to use this the fab tube to map

1406
00:52:35,119 --> 00:52:38,079
to the corresponding the user group or

1407
00:52:38,079 --> 00:52:39,680
the application group

1408
00:52:39,680 --> 00:52:41,839
and these are the ones that we maybe we

1409
00:52:41,839 --> 00:52:43,280
can use some of the ai

1410
00:52:43,280 --> 00:52:45,839
is the method there's also some of these

1411
00:52:45,839 --> 00:52:46,800
papers

1412
00:52:46,800 --> 00:52:49,520
for this work and last one so this is

1413
00:52:49,520 --> 00:52:50,319
how the

1414
00:52:50,319 --> 00:52:53,440
api attribute used in the network

1415
00:52:53,440 --> 00:52:56,559
so this is just in the header end to

1416
00:52:56,559 --> 00:53:00,559
uh sever uh uh to enhance to steer

1417
00:53:00,559 --> 00:53:03,520
this the traffic under the midpoint so

1418
00:53:03,520 --> 00:53:04,640
that's the

1419
00:53:04,640 --> 00:53:06,720
for the performance environment or some

1420
00:53:06,720 --> 00:53:09,280
of these the necessary process

1421
00:53:09,280 --> 00:53:12,640
in the midpoint and this is the and also

1422
00:53:12,640 --> 00:53:15,200
we have some the sfc the function

1423
00:53:15,200 --> 00:53:17,520
so that for the service function you can

1424
00:53:17,520 --> 00:53:18,400
also

1425
00:53:18,400 --> 00:53:21,520
exchange the specific this is the policy

1426
00:53:21,520 --> 00:53:23,280
according to this the application

1427
00:53:23,280 --> 00:53:26,480
information okay so

1428
00:53:26,480 --> 00:53:29,520
next last

1429
00:53:29,520 --> 00:53:32,160
okay in fact this is the last slide for

1430
00:53:32,160 --> 00:53:33,680
the presentation

1431
00:53:33,680 --> 00:53:37,440
so uh we introduce the scope and the

1432
00:53:37,440 --> 00:53:39,760
possible clarification of the epm work

1433
00:53:39,760 --> 00:53:41,760
and also introduce the

1434
00:53:41,760 --> 00:53:45,440
frequently asked the question

1435
00:53:45,440 --> 00:53:48,559
so here that we would like to get

1436
00:53:48,559 --> 00:53:50,960
more advanced especially about the

1437
00:53:50,960 --> 00:53:52,240
secularity issue and

1438
00:53:52,240 --> 00:53:54,880
the privacy issue so here are these

1439
00:53:54,880 --> 00:53:56,000
questions so we want

1440
00:53:56,000 --> 00:53:59,520
to learn this from the experts in this

1441
00:53:59,520 --> 00:54:00,240
area

1442
00:54:00,240 --> 00:54:03,359
so what are the security issue may be

1443
00:54:03,359 --> 00:54:03,920
caused

1444
00:54:03,920 --> 00:54:07,040
by the ap attribute uh

1445
00:54:07,040 --> 00:54:10,559
encapsulated in the network layer or and

1446
00:54:10,559 --> 00:54:11,119
also

1447
00:54:11,119 --> 00:54:13,839
used in the limited domain and also

1448
00:54:13,839 --> 00:54:16,079
regarding to the privacy issue

1449
00:54:16,079 --> 00:54:19,839
so we also saw this the uh

1450
00:54:19,839 --> 00:54:22,559
positive way to mitigate this issue so

1451
00:54:22,559 --> 00:54:23,680
the first that we think

1452
00:54:23,680 --> 00:54:26,160
that's you that just use the group

1453
00:54:26,160 --> 00:54:27,440
information instead

1454
00:54:27,440 --> 00:54:30,240
of the specific application or the

1455
00:54:30,240 --> 00:54:31,040
specific

1456
00:54:31,040 --> 00:54:34,640
user can head the details of this the

1457
00:54:34,640 --> 00:54:38,000
specific application of the user and uh

1458
00:54:38,000 --> 00:54:40,880
and also because this information will

1459
00:54:40,880 --> 00:54:41,200
try

1460
00:54:41,200 --> 00:54:45,520
to convey let's use the opaque value

1461
00:54:45,520 --> 00:54:48,640
and also that's the user the information

1462
00:54:48,640 --> 00:54:52,319
and also this information and used to

1463
00:54:52,319 --> 00:54:55,520
apply the different the policy

1464
00:54:55,520 --> 00:54:59,119
so that's either just the um

1465
00:54:59,119 --> 00:55:00,960
some this is the possible way to

1466
00:55:00,960 --> 00:55:03,200
mitigate the privacy issue

1467
00:55:03,200 --> 00:55:06,480
okay that's uh my the

1468
00:55:06,480 --> 00:55:09,839
introduction about this work okay

1469
00:55:09,839 --> 00:55:12,240
all right thanks jimin for setting us up

1470
00:55:12,240 --> 00:55:13,359
for the

1471
00:55:13,359 --> 00:55:14,559
important questions that you want

1472
00:55:14,559 --> 00:55:17,599
feedback on so the queue is open i see

1473
00:55:17,599 --> 00:55:21,520
several people in it already

1474
00:55:21,520 --> 00:55:26,079
so let's start with watson okay

1475
00:55:26,079 --> 00:55:29,440
cloudflare i have a question about how

1476
00:55:29,440 --> 00:55:29,839
does

1477
00:55:29,839 --> 00:55:32,640
the customer premise and equipment know

1478
00:55:32,640 --> 00:55:34,880
the application that's on the end user

1479
00:55:34,880 --> 00:55:37,359
device

1480
00:55:40,000 --> 00:55:44,000
uh uh here that's the user proposal this

1481
00:55:44,000 --> 00:55:44,400
week

1482
00:55:44,400 --> 00:55:47,200
is that we can according to this the

1483
00:55:47,200 --> 00:55:48,000
existing

1484
00:55:48,000 --> 00:55:50,880
information in the packet the basic

1485
00:55:50,880 --> 00:55:51,680
information

1486
00:55:51,680 --> 00:55:55,520
is used as the five tube information

1487
00:55:55,520 --> 00:55:58,480
uh in the package and the map the this

1488
00:55:58,480 --> 00:55:59,280
is the

1489
00:55:59,280 --> 00:56:02,880
five tube information to a specific

1490
00:56:02,880 --> 00:56:06,319
user group or the application group

1491
00:56:06,319 --> 00:56:11,279
so we need another to know this the uh

1492
00:56:11,440 --> 00:56:15,520
the concrete user and the application

1493
00:56:15,520 --> 00:56:16,799
information

1494
00:56:16,799 --> 00:56:19,599
yeah so you you assume that you already

1495
00:56:19,599 --> 00:56:21,200
know the five tuple

1496
00:56:21,200 --> 00:56:25,599
for the flowing of interest yeah

1497
00:56:25,599 --> 00:56:31,839
that's the way yeah

1498
00:56:33,119 --> 00:56:35,520
hi uh so earlier you said this is not

1499
00:56:35,520 --> 00:56:37,359
the same as footer plus and i

1500
00:56:37,359 --> 00:56:40,400
didn't understand why that's true uh

1501
00:56:40,400 --> 00:56:43,040
it seems to me that all of the many many

1502
00:56:43,040 --> 00:56:44,160
objections

1503
00:56:44,160 --> 00:56:48,319
that spud and plus also apply here

1504
00:56:48,319 --> 00:56:50,000
um and i don't see that any of those

1505
00:56:50,000 --> 00:56:52,160
objections really addressed

1506
00:56:52,160 --> 00:56:54,319
so can you say why this is different

1507
00:56:54,319 --> 00:56:56,160
from spot on plus from the point of view

1508
00:56:56,160 --> 00:56:58,079
of security and privacy objections to

1509
00:56:58,079 --> 00:57:00,720
doing either

1510
00:57:04,799 --> 00:57:07,599
so this is just my doubt about this

1511
00:57:07,599 --> 00:57:09,680
security this is the prior

1512
00:57:09,680 --> 00:57:12,799
privacy concern because

1513
00:57:12,799 --> 00:57:16,000
for us that's the this information is

1514
00:57:16,000 --> 00:57:19,599
used in the limited trusted domain

1515
00:57:19,599 --> 00:57:22,240
so i think the the security and the

1516
00:57:22,240 --> 00:57:23,839
privacy issue

1517
00:57:23,839 --> 00:57:26,880
can be under control and also we know

1518
00:57:26,880 --> 00:57:27,200
that

1519
00:57:27,200 --> 00:57:31,200
the 3gpp and the bbf there's a similar

1520
00:57:31,200 --> 00:57:31,680
way

1521
00:57:31,680 --> 00:57:34,400
to because because they need to

1522
00:57:34,400 --> 00:57:35,280
authorize

1523
00:57:35,280 --> 00:57:38,640
the user information so that they also

1524
00:57:38,640 --> 00:57:39,280
have this

1525
00:57:39,280 --> 00:57:44,079
protocol to do like this way

1526
00:57:47,839 --> 00:57:50,880
so i'm a little confused

1527
00:57:50,880 --> 00:57:53,680
about this one so this is why i'm here

1528
00:57:53,680 --> 00:57:55,119
for the clarification

1529
00:57:55,119 --> 00:57:59,359
yeah yeah i mean i think that the

1530
00:57:59,359 --> 00:58:02,000
clarification for how this is different

1531
00:58:02,000 --> 00:58:02,640
than spun

1532
00:58:02,640 --> 00:58:04,799
plus might be something we have to take

1533
00:58:04,799 --> 00:58:06,079
onto the email list

1534
00:58:06,079 --> 00:58:08,480
or out of band i don't have high hopes

1535
00:58:08,480 --> 00:58:10,240
that we would resolve it today

1536
00:58:10,240 --> 00:58:11,760
and we do have a few more people in the

1537
00:58:11,760 --> 00:58:13,520
queue so i think we should probably keep

1538
00:58:13,520 --> 00:58:13,839
going

1539
00:58:13,839 --> 00:58:18,000
okay uh stephen and jimin i hope you can

1540
00:58:18,000 --> 00:58:20,319
continue to explore this topic uh david

1541
00:58:20,319 --> 00:58:23,520
please go ahead okay

1542
00:58:23,520 --> 00:58:25,920
hi uh david schnazzy uh internet

1543
00:58:25,920 --> 00:58:27,760
architecture enthusiast

1544
00:58:27,760 --> 00:58:31,599
um i saw i i glanced over the

1545
00:58:31,599 --> 00:58:33,520
the main document and also the security

1546
00:58:33,520 --> 00:58:35,440
and privacy considerations document

1547
00:58:35,440 --> 00:58:38,559
and and i've been listening to your

1548
00:58:38,559 --> 00:58:39,839
slides and i feel like there's a

1549
00:58:39,839 --> 00:58:41,839
contradiction so maybe you can help me

1550
00:58:41,839 --> 00:58:43,280
clear this up because i'm probably

1551
00:58:43,280 --> 00:58:44,799
misunderstanding

1552
00:58:44,799 --> 00:58:48,880
so is the idea

1553
00:58:48,880 --> 00:58:52,160
that the end device so let's say

1554
00:58:52,160 --> 00:58:54,880
my phone for example okay is going to

1555
00:58:54,880 --> 00:58:57,599
add something some information

1556
00:58:57,599 --> 00:58:59,440
so you can tell that i'm running meat

1557
00:58:59,440 --> 00:59:02,400
echo as opposed to you know downloading

1558
00:59:02,400 --> 00:59:05,760
a large file or is this going to be

1559
00:59:05,760 --> 00:59:06,319
added

1560
00:59:06,319 --> 00:59:08,079
by another device like the cpu can you

1561
00:59:08,079 --> 00:59:10,240
clarify this please

1562
00:59:10,240 --> 00:59:13,040
okay there the thanks for your question

1563
00:59:13,040 --> 00:59:14,000
uh so this is

1564
00:59:14,000 --> 00:59:16,640
just the collocation this is the data as

1565
00:59:16,640 --> 00:59:18,079
to your user case

1566
00:59:18,079 --> 00:59:21,280
this information is not encapsulated

1567
00:59:21,280 --> 00:59:23,599
by your the mobile phone or by the

1568
00:59:23,599 --> 00:59:24,559
applications

1569
00:59:24,559 --> 00:59:27,359
on your mobile phone so we think this

1570
00:59:27,359 --> 00:59:28,799
information can be

1571
00:59:28,799 --> 00:59:33,119
encapsulated by the base station or the

1572
00:59:33,119 --> 00:59:35,440
e-node b and that means this is the

1573
00:59:35,440 --> 00:59:37,200
wireless network

1574
00:59:37,200 --> 00:59:40,240
uh an awareness network product

1575
00:59:40,240 --> 00:59:43,760
so uh because this is the network device

1576
00:59:43,760 --> 00:59:45,280
as a network edge

1577
00:59:45,280 --> 00:59:49,119
so you can encapsulate this information

1578
00:59:49,119 --> 00:59:52,240
so that's you this is the case yeah

1579
00:59:52,240 --> 00:59:54,000
because for this one

1580
00:59:54,000 --> 00:59:57,680
we need in order to understand this the

1581
00:59:57,680 --> 01:00:00,880
the concrete this application or this is

1582
01:00:00,880 --> 01:00:01,359
the

1583
01:00:01,359 --> 01:00:03,440
user information either just use the

1584
01:00:03,440 --> 01:00:05,599
course the application group or the user

1585
01:00:05,599 --> 01:00:06,400
group

1586
01:00:06,400 --> 01:00:08,799
they may have the different uh sra

1587
01:00:08,799 --> 01:00:09,599
requirement

1588
01:00:09,599 --> 01:00:12,480
or some of this the security requirement

1589
01:00:12,480 --> 01:00:14,720
yeah that's

1590
01:00:14,720 --> 01:00:16,720
thank you in that case if it's not being

1591
01:00:16,720 --> 01:00:18,319
added by my phone

1592
01:00:18,319 --> 01:00:19,839
if it's added by let's call it the

1593
01:00:19,839 --> 01:00:21,440
network device

1594
01:00:21,440 --> 01:00:24,960
how does the network device know to add

1595
01:00:24,960 --> 01:00:26,799
information from my meet echo flow as

1596
01:00:26,799 --> 01:00:28,799
opposed to my file download flow

1597
01:00:28,799 --> 01:00:32,640
how does it do that uh so this is the

1598
01:00:32,640 --> 01:00:35,760
first one i think that's the uh for me i

1599
01:00:35,760 --> 01:00:36,160
think

1600
01:00:36,160 --> 01:00:39,599
that's the uh i think this is why first

1601
01:00:39,599 --> 01:00:40,240
one

1602
01:00:40,240 --> 01:00:43,760
i think the because i i'm not sure about

1603
01:00:43,760 --> 01:00:44,720
this the

1604
01:00:44,720 --> 01:00:48,000
uh uh process of the meteorico but

1605
01:00:48,000 --> 01:00:50,000
i think for example because this is the

1606
01:00:50,000 --> 01:00:51,200
ip package that maybe

1607
01:00:51,200 --> 01:00:53,839
has this the destination address either

1608
01:00:53,839 --> 01:00:55,839
has some of these

1609
01:00:55,839 --> 01:00:58,079
this is the server destination according

1610
01:00:58,079 --> 01:00:59,359
to this server

1611
01:00:59,359 --> 01:01:02,640
uh this is a destination maybe we can

1612
01:01:02,640 --> 01:01:05,920
encapsulate as some this is the ism

1613
01:01:05,920 --> 01:01:09,280
is a specific application group so

1614
01:01:09,280 --> 01:01:12,480
that's you this is the the case and the

1615
01:01:12,480 --> 01:01:15,200
second one because in the 3gpp

1616
01:01:15,200 --> 01:01:18,000
because when especially for the mobile

1617
01:01:18,000 --> 01:01:18,720
in fact

1618
01:01:18,720 --> 01:01:22,640
your when you does the uh be accessed to

1619
01:01:22,640 --> 01:01:24,000
the wireless network

1620
01:01:24,000 --> 01:01:28,240
so needed to negotiate with this the

1621
01:01:28,240 --> 01:01:31,520
cloud core network so the cloud core

1622
01:01:31,520 --> 01:01:33,680
network can learn this the user

1623
01:01:33,680 --> 01:01:36,799
information and they will set up the gtp

1624
01:01:36,799 --> 01:01:39,839
tunnel so that the ttp tunnel they have

1625
01:01:39,839 --> 01:01:40,400
some of these

1626
01:01:40,400 --> 01:01:42,480
the queues the information and also has

1627
01:01:42,480 --> 01:01:43,839
the tid

1628
01:01:43,839 --> 01:01:46,960
information which can carry some of this

1629
01:01:46,960 --> 01:01:50,880
the user group this information so this

1630
01:01:50,880 --> 01:01:54,480
information can also be re-utilized

1631
01:01:54,480 --> 01:01:57,920
so that's this case so this user group

1632
01:01:57,920 --> 01:01:58,559
information

1633
01:01:58,559 --> 01:02:00,079
is that something that my phone is

1634
01:02:00,079 --> 01:02:03,119
putting on the packet then

1635
01:02:03,599 --> 01:02:05,920
uh so i mean so that when this the

1636
01:02:05,920 --> 01:02:07,200
you're the packet

1637
01:02:07,200 --> 01:02:10,400
will be encapsulated in the gtp tunnel

1638
01:02:10,400 --> 01:02:12,720
so that's the gtp tunnel when the

1639
01:02:12,720 --> 01:02:14,960
encapsulated gtp tunnel so that's

1640
01:02:14,960 --> 01:02:17,359
here this can have some this is the

1641
01:02:17,359 --> 01:02:20,079
application aware information

1642
01:02:20,079 --> 01:02:23,680
so so i am not familiar with this the

1643
01:02:23,680 --> 01:02:25,839
ttp tunnel does that start on my phone

1644
01:02:25,839 --> 01:02:26,079
or

1645
01:02:26,079 --> 01:02:27,839
does that start on the network device no

1646
01:02:27,839 --> 01:02:29,200
no no

1647
01:02:29,200 --> 01:02:32,720
ttp tunnel is either used between

1648
01:02:32,720 --> 01:02:35,440
from this the base station to the base

1649
01:02:35,440 --> 01:02:37,359
station controller

1650
01:02:37,359 --> 01:02:40,400
either yeah yeah

1651
01:02:40,400 --> 01:02:42,400
no sorry i i feel like we're going in

1652
01:02:42,400 --> 01:02:43,760
circles a little bit and i just really

1653
01:02:43,760 --> 01:02:45,440
want to understand

1654
01:02:45,440 --> 01:02:47,760
who makes the like because i suspect the

1655
01:02:47,760 --> 01:02:49,200
whole point of this is that there is

1656
01:02:49,200 --> 01:02:50,720
some traffic on my phone that's going to

1657
01:02:50,720 --> 01:02:52,319
get different treatment from other

1658
01:02:52,319 --> 01:02:53,599
traffic

1659
01:02:53,599 --> 01:02:55,119
and someone has to make the

1660
01:02:55,119 --> 01:02:57,359
determination between which traffic is

1661
01:02:57,359 --> 01:02:58,240
which

1662
01:02:58,240 --> 01:03:01,680
so then is

1663
01:03:01,680 --> 01:03:03,680
you know tunnels all that that's an

1664
01:03:03,680 --> 01:03:05,359
implementation detail someone needs to

1665
01:03:05,359 --> 01:03:07,839
be able to make this determination

1666
01:03:07,839 --> 01:03:11,920
how does that work uh

1667
01:03:11,920 --> 01:03:14,559
uh david i think that they simplify this

1668
01:03:14,559 --> 01:03:14,960
the

1669
01:03:14,960 --> 01:03:17,359
answer i think the first one i think

1670
01:03:17,359 --> 01:03:18,720
that's according to that's

1671
01:03:18,720 --> 01:03:21,119
the original this the destination

1672
01:03:21,119 --> 01:03:23,039
address or the source address

1673
01:03:23,039 --> 01:03:25,280
and it can map to some this is the

1674
01:03:25,280 --> 01:03:26,640
application group and

1675
01:03:26,640 --> 01:03:29,839
user group so this information when

1676
01:03:29,839 --> 01:03:31,920
when the when this is the package is

1677
01:03:31,920 --> 01:03:34,000
tunneled so this is the

1678
01:03:34,000 --> 01:03:36,640
information will be uh go along with

1679
01:03:36,640 --> 01:03:38,640
this the tunnel information

1680
01:03:38,640 --> 01:03:41,760
so that's when there is a process in the

1681
01:03:41,760 --> 01:03:43,760
tunnel so that's the user can be

1682
01:03:43,760 --> 01:03:47,680
applied to the different sla process

1683
01:03:47,680 --> 01:03:51,119
i see so that's yeah that helps me a lot

1684
01:03:51,119 --> 01:03:51,680
so

1685
01:03:51,680 --> 01:03:54,160
my understanding then is you're using

1686
01:03:54,160 --> 01:03:55,119
information that is

1687
01:03:55,119 --> 01:03:57,440
already in the packets let's say the ip

1688
01:03:57,440 --> 01:03:58,160
address is

1689
01:03:58,160 --> 01:04:00,000
you know the five tuple for that matter

1690
01:04:00,000 --> 01:04:01,359
to make a determination of

1691
01:04:01,359 --> 01:04:02,640
what you want to do with the packet

1692
01:04:02,640 --> 01:04:04,640
right yeah i think

1693
01:04:04,640 --> 01:04:06,799
that's the basic way and also that i

1694
01:04:06,799 --> 01:04:07,839
mentioned that the

1695
01:04:07,839 --> 01:04:11,359
mdf the sd-wan the proposed is the

1696
01:04:11,359 --> 01:04:12,960
standard

1697
01:04:12,960 --> 01:04:14,799
i see okay thank you no no that that

1698
01:04:14,799 --> 01:04:16,559
really explains things so then

1699
01:04:16,559 --> 01:04:18,960
if you can make all of the choices you

1700
01:04:18,960 --> 01:04:21,760
want from the five tuple

1701
01:04:21,760 --> 01:04:26,480
oh where'd he go

1702
01:04:26,480 --> 01:04:28,799
am i the only one who lost video and

1703
01:04:28,799 --> 01:04:29,680
audio here

1704
01:04:29,680 --> 01:04:32,880
no i'm not he also lost it i'm sure he

1705
01:04:32,880 --> 01:04:34,480
lost as well

1706
01:04:34,480 --> 01:04:36,720
um maybe let's pause here for him to

1707
01:04:36,720 --> 01:04:39,039
come back

1708
01:04:39,039 --> 01:04:41,839
right

1709
01:04:47,119 --> 01:04:49,039
his browser just dropped and reconnected

1710
01:04:49,039 --> 01:04:50,559
you can see it in the jabra logs if

1711
01:04:50,559 --> 01:04:52,400
you're looking directly via xmpp

1712
01:04:52,400 --> 01:04:55,839
it happened to me earlier

1713
01:04:56,160 --> 01:04:57,839
all right thanks all i'll pause here

1714
01:04:57,839 --> 01:04:59,520
because uh and now i'm finally

1715
01:04:59,520 --> 01:05:01,119
understanding so i have a

1716
01:05:01,119 --> 01:05:09,839
question uh final comment i guess

1717
01:05:17,839 --> 01:05:21,680
hello yes you're back okay okay sorry i

1718
01:05:21,680 --> 01:05:22,559
lost

1719
01:05:22,559 --> 01:05:25,440
okay no worries so let me back up just a

1720
01:05:25,440 --> 01:05:26,880
little bit so i was saying

1721
01:05:26,880 --> 01:05:29,119
uh thank you so much for explaining this

1722
01:05:29,119 --> 01:05:30,720
this really really helped me

1723
01:05:30,720 --> 01:05:32,319
so what since you're what you're saying

1724
01:05:32,319 --> 01:05:34,319
is that from the information that is

1725
01:05:34,319 --> 01:05:35,920
already in packets today like the five

1726
01:05:35,920 --> 01:05:36,480
tuple

1727
01:05:36,480 --> 01:05:39,039
you can make a determination on how to

1728
01:05:39,039 --> 01:05:40,960
handle these packets

1729
01:05:40,960 --> 01:05:43,920
therefore why don't you just do that why

1730
01:05:43,920 --> 01:05:44,480
don't

1731
01:05:44,480 --> 01:05:46,400
why do you need apn at all it seems like

1732
01:05:46,400 --> 01:05:47,920
you already have all the information you

1733
01:05:47,920 --> 01:05:48,720
need

1734
01:05:48,720 --> 01:05:51,760
why do we need this new protocol okay i

1735
01:05:51,760 --> 01:05:52,079
i

1736
01:05:52,079 --> 01:05:54,720
have mentioned this one in the in the

1737
01:05:54,720 --> 01:05:55,520
slides but

1738
01:05:55,520 --> 01:05:57,359
not to take much time because this is

1739
01:05:57,359 --> 01:06:00,480
the the ip package that will encapsulate

1740
01:06:00,480 --> 01:06:02,960
in some of this the tunnel such as this

1741
01:06:02,960 --> 01:06:05,119
is the mcs tunnel or some of these the

1742
01:06:05,119 --> 01:06:06,640
vxlan tunnel

1743
01:06:06,640 --> 01:06:09,440
but when this information uh used to be

1744
01:06:09,440 --> 01:06:10,799
encapsulated

1745
01:06:10,799 --> 01:06:14,400
so that the the the tunnel the packet

1746
01:06:14,400 --> 01:06:17,599
uh be transversed along this network

1747
01:06:17,599 --> 01:06:18,240
node

1748
01:06:18,240 --> 01:06:21,599
so the network node cannot uh

1749
01:06:21,599 --> 01:06:24,720
cannot learn this the effective

1750
01:06:24,720 --> 01:06:28,480
information in the ip payload so we need

1751
01:06:28,480 --> 01:06:30,799
some this is the application group

1752
01:06:30,799 --> 01:06:32,480
information and use a group of

1753
01:06:32,480 --> 01:06:33,680
information

1754
01:06:33,680 --> 01:06:37,839
that used along with this tunnel

1755
01:06:37,839 --> 01:06:40,319
why don't you just copy the five tuple

1756
01:06:40,319 --> 01:06:42,319
into the into a specific spot in your

1757
01:06:42,319 --> 01:06:44,559
tunnel and use that then

1758
01:06:44,559 --> 01:06:46,880
okay good question so i also mentioned

1759
01:06:46,880 --> 01:06:49,200
that one if we use this effective

1760
01:06:49,200 --> 01:06:51,599
information uh you there's some this is

1761
01:06:51,599 --> 01:06:52,319
a drawback

1762
01:06:52,319 --> 01:06:54,400
so the first one the fact of the

1763
01:06:54,400 --> 01:06:56,319
information so that's the use

1764
01:06:56,319 --> 01:06:58,640
the two match fields so that's the user

1765
01:06:58,640 --> 01:06:59,520
can call this

1766
01:06:59,520 --> 01:07:02,559
the forwarding performance issue so

1767
01:07:02,559 --> 01:07:04,799
because that's the process and also

1768
01:07:04,799 --> 01:07:06,880
that's is also the implementation

1769
01:07:06,880 --> 01:07:09,680
in the network so that's the scalability

1770
01:07:09,680 --> 01:07:10,000
we

1771
01:07:10,000 --> 01:07:12,000
also use a challenge because that's a

1772
01:07:12,000 --> 01:07:14,400
user match the five tube so that's the

1773
01:07:14,400 --> 01:07:15,039
user need

1774
01:07:15,039 --> 01:07:18,160
the uh complex the algorithm

1775
01:07:18,160 --> 01:07:20,559
process in the forwarding plane so

1776
01:07:20,559 --> 01:07:21,200
that's is

1777
01:07:21,200 --> 01:07:24,720
the the entry for the uh for the

1778
01:07:24,720 --> 01:07:27,599
classification and the process is kind

1779
01:07:27,599 --> 01:07:28,240
not be

1780
01:07:28,240 --> 01:07:31,680
very scalable so that is also the

1781
01:07:31,680 --> 01:07:34,720
challenge yeah okay if i can just jump

1782
01:07:34,720 --> 01:07:34,960
in

1783
01:07:34,960 --> 01:07:37,039
real quick so i guess the high level

1784
01:07:37,039 --> 01:07:38,319
summary here is that because you're

1785
01:07:38,319 --> 01:07:40,319
already encapsulating in the network

1786
01:07:40,319 --> 01:07:42,480
the five tuple is an inefficient way to

1787
01:07:42,480 --> 01:07:43,680
express the information

1788
01:07:43,680 --> 01:07:45,680
that you need and i think we're gonna

1789
01:07:45,680 --> 01:07:47,520
have to to drop that topic for now

1790
01:07:47,520 --> 01:07:48,960
because i really want to hear what ecker

1791
01:07:48,960 --> 01:07:51,440
has to say and we're already over time

1792
01:07:51,440 --> 01:07:54,240
absolutely thanks so much for your time

1793
01:07:54,240 --> 01:07:54,640
okay

1794
01:07:54,640 --> 01:07:58,400
thanks david okay next one thank you

1795
01:07:58,400 --> 01:08:00,799
um so yeah i think i guess first of all

1796
01:08:00,799 --> 01:08:02,640
like i'm finding this pretty hard to

1797
01:08:02,640 --> 01:08:03,280
follow

1798
01:08:03,280 --> 01:08:04,960
um like i've read these documents and

1799
01:08:04,960 --> 01:08:06,480
i've heard your presentation now

1800
01:08:06,480 --> 01:08:08,640
and um they seem to say different things

1801
01:08:08,640 --> 01:08:10,640
so the documents explicitly talk about

1802
01:08:10,640 --> 01:08:12,799
injecting the user identity and all this

1803
01:08:12,799 --> 01:08:14,480
information in the endpoint

1804
01:08:14,480 --> 01:08:16,960
um i'm referring in this case to draft

1805
01:08:16,960 --> 01:08:18,640
the epm framework section four point

1806
01:08:18,640 --> 01:08:19,600
number one

1807
01:08:19,600 --> 01:08:21,759
so i guess i'm a little confused like

1808
01:08:21,759 --> 01:08:22,880
are you expecting the application

1809
01:08:22,880 --> 01:08:24,319
standpoint your justice information or

1810
01:08:24,319 --> 01:08:26,560
not

1811
01:08:28,560 --> 01:08:32,399
uh uh erica i'm not sure i

1812
01:08:32,399 --> 01:08:35,600
i i not catch all your points can you

1813
01:08:35,600 --> 01:08:39,520
briefly repeat you're the last question

1814
01:08:39,520 --> 01:08:42,399
sure so if i refer to draft lee apn

1815
01:08:42,399 --> 01:08:42,960
framework

1816
01:08:42,960 --> 01:08:45,679
section four point number one

1817
01:08:45,679 --> 01:08:47,679
specifically talks

1818
01:08:47,679 --> 01:08:49,759
yes point number one where it says

1819
01:08:49,759 --> 01:08:51,520
service aware app

1820
01:08:51,520 --> 01:08:52,960
the host obtains the application

1821
01:08:52,960 --> 01:08:54,399
characteristic information of the

1822
01:08:54,399 --> 01:08:55,279
service aware app

1823
01:08:55,279 --> 01:08:56,719
and generates the package to carry the

1824
01:08:56,719 --> 01:08:58,158
application characteristic information

1825
01:08:58,158 --> 01:09:00,080
in the encapsulation

1826
01:09:00,080 --> 01:09:03,359
yeah okay so uh thanks for your this is

1827
01:09:03,359 --> 01:09:04,238
the

1828
01:09:04,238 --> 01:09:07,600
question so that's the index in the

1829
01:09:07,600 --> 01:09:10,479
original this is the uh draft so that's

1830
01:09:10,479 --> 01:09:11,279
we

1831
01:09:11,279 --> 01:09:14,238
clarified this the uh some little

1832
01:09:14,238 --> 01:09:16,238
scenario about this uh

1833
01:09:16,238 --> 01:09:18,799
avm work at the beginning so this is a

1834
01:09:18,799 --> 01:09:19,520
scope

1835
01:09:19,520 --> 01:09:23,198
so that's a uh i think that's

1836
01:09:23,198 --> 01:09:25,120
cause a confusion because some of these

1837
01:09:25,120 --> 01:09:26,880
application scenarios

1838
01:09:26,880 --> 01:09:28,719
mentioned this is the network i said

1839
01:09:28,719 --> 01:09:30,479
some mentioned there's a

1840
01:09:30,479 --> 01:09:33,679
application aware that means application

1841
01:09:33,679 --> 01:09:34,319
side

1842
01:09:34,319 --> 01:09:36,880
so now there's a clarity of kai for the

1843
01:09:36,880 --> 01:09:37,359
current

1844
01:09:37,359 --> 01:09:40,640
apn work user focus on the network side

1845
01:09:40,640 --> 01:09:42,799
so that we will remove that the user

1846
01:09:42,799 --> 01:09:46,560
keys yeah so that's our point

1847
01:09:46,560 --> 01:09:49,679
okay um so now i guess i'm okay

1848
01:09:49,679 --> 01:09:50,880
so now i'm trying to figure out which

1849
01:09:50,880 --> 01:09:52,880
information is carried so

1850
01:09:52,880 --> 01:09:55,520
you um so you referred and earlier you

1851
01:09:55,520 --> 01:09:56,800
said you weren't carrying the user an

1852
01:09:56,800 --> 01:09:58,880
application id but then later you did

1853
01:09:58,880 --> 01:10:00,159
so i'm trying to figure out which one it

1854
01:10:00,159 --> 01:10:02,000
is again this is this is in

1855
01:10:02,000 --> 01:10:04,159
the description of app info so does this

1856
01:10:04,159 --> 01:10:07,599
carry a user identifier or is it not

1857
01:10:08,960 --> 01:10:12,480
ah okay i recall so i uh

1858
01:10:12,480 --> 01:10:16,000
so maybe i uh uh this is the

1859
01:10:16,000 --> 01:10:18,080
lack this is the background about what

1860
01:10:18,080 --> 01:10:20,159
you mentioned can you forward your the

1861
01:10:20,159 --> 01:10:20,640
question

1862
01:10:20,640 --> 01:10:22,880
in the main list so i can answer

1863
01:10:22,880 --> 01:10:24,640
directly in the main list

1864
01:10:24,640 --> 01:10:27,679
is that okay okay um seems like a fairly

1865
01:10:27,679 --> 01:10:28,880
critical point

1866
01:10:28,880 --> 01:10:32,719
um okay i think more generally

1867
01:10:32,719 --> 01:10:35,679
um you know uh we've just spent like an

1868
01:10:35,679 --> 01:10:37,120
enormous amount of time

1869
01:10:37,120 --> 01:10:39,280
in working groups like quick trying to

1870
01:10:39,280 --> 01:10:40,800
remove as many signals from the network

1871
01:10:40,800 --> 01:10:42,800
about what's happening as possible

1872
01:10:42,800 --> 01:10:45,199
and um and it seems to me like what

1873
01:10:45,199 --> 01:10:46,159
you're describing

1874
01:10:46,159 --> 01:10:48,480
um at mo um that most requires a very

1875
01:10:48,480 --> 01:10:49,360
very small number of

1876
01:10:49,360 --> 01:10:52,320
prioritization bits um um given that

1877
01:10:52,320 --> 01:10:53,520
you're in for even

1878
01:10:53,520 --> 01:10:55,199
distilling it down from what you can

1879
01:10:55,199 --> 01:10:56,640
infer from the five people

1880
01:10:56,640 --> 01:11:00,000
so um to

1881
01:11:00,000 --> 01:11:01,199
have a framework we're talking about

1882
01:11:01,199 --> 01:11:02,560
having like an enormous amount of

1883
01:11:02,560 --> 01:11:03,120
labeling

1884
01:11:03,120 --> 01:11:04,640
that apparently includes the application

1885
01:11:04,640 --> 01:11:06,560
and maybe the user id um

1886
01:11:06,560 --> 01:11:09,760
and um uh um

1887
01:11:09,760 --> 01:11:10,960
and just generally a method or

1888
01:11:10,960 --> 01:11:12,800
entertaining packets in this way um does

1889
01:11:12,800 --> 01:11:13,840
not strike me as like the right

1890
01:11:13,840 --> 01:11:15,040
direction for us to go so i don't think

1891
01:11:15,040 --> 01:11:17,679
we should do this

1892
01:11:18,000 --> 01:11:21,120
okay so we tried to solve this

1893
01:11:21,120 --> 01:11:23,120
usually you mentioned i think the at the

1894
01:11:23,120 --> 01:11:24,400
beginning so the

1895
01:11:24,400 --> 01:11:26,560
when proposed this is the 18 work that's

1896
01:11:26,560 --> 01:11:27,920
is we talk about this

1897
01:11:27,920 --> 01:11:30,080
the application side and also the

1898
01:11:30,080 --> 01:11:31,040
network side

1899
01:11:31,040 --> 01:11:34,320
so as we uh align this scope we

1900
01:11:34,320 --> 01:11:38,000
and try to align this uh to update this

1901
01:11:38,000 --> 01:11:41,600
draft to align with this scope

1902
01:11:41,600 --> 01:11:43,280
i understand what you're saying but i'm

1903
01:11:43,280 --> 01:11:45,199
not in favor of this

1904
01:11:45,199 --> 01:11:48,879
thank you okay yeah okay

1905
01:11:51,440 --> 01:11:53,440
uh richard i think we were still

1906
01:11:53,440 --> 01:11:54,560
intending to

1907
01:11:54,560 --> 01:11:56,320
have you ask your question i don't know

1908
01:11:56,320 --> 01:11:59,920
if you feel it was already answered

1909
01:12:01,520 --> 01:12:04,960
i i think uh eckerd and david largely

1910
01:12:04,960 --> 01:12:05,520
covered

1911
01:12:05,520 --> 01:12:10,480
my concerns here um i think

1912
01:12:10,800 --> 01:12:14,080
the the point that david made about um

1913
01:12:14,080 --> 01:12:16,880
kind of mapping to other technologies

1914
01:12:16,880 --> 01:12:17,840
it's a degree

1915
01:12:17,840 --> 01:12:20,080
that this is something observed and

1916
01:12:20,080 --> 01:12:20,960
injected

1917
01:12:20,960 --> 01:12:24,159
by the network an observable based

1918
01:12:24,159 --> 01:12:27,360
solely on network observable properties

1919
01:12:27,360 --> 01:12:30,719
it seems like this is

1920
01:12:30,719 --> 01:12:33,040
kind of a standard tunneling problem and

1921
01:12:33,040 --> 01:12:34,000
i wonder whether the

1922
01:12:34,000 --> 01:12:36,159
one of the many tunneling technologies

1923
01:12:36,159 --> 01:12:37,920
that already exists this is appropriate

1924
01:12:37,920 --> 01:12:39,679
um and i think that's it's more of a

1925
01:12:39,679 --> 01:12:41,760
design question saving bits

1926
01:12:41,760 --> 01:12:44,000
i think it's it's really when we cross

1927
01:12:44,000 --> 01:12:45,199
the uh

1928
01:12:45,199 --> 01:12:48,560
boundary into well

1929
01:12:48,560 --> 01:12:50,239
by the same token if it's based only on

1930
01:12:50,239 --> 01:12:51,600
network observable properties

1931
01:12:51,600 --> 01:12:54,640
it doesn't um seem i i wonder what the

1932
01:12:54,640 --> 01:12:56,640
utility is um because you're not really

1933
01:12:56,640 --> 01:12:58,640
um adding anything that can already be

1934
01:12:58,640 --> 01:13:00,560
observed by the network um

1935
01:13:00,560 --> 01:13:02,400
that's i guess a benefit in that you

1936
01:13:02,400 --> 01:13:03,920
know you're not

1937
01:13:03,920 --> 01:13:05,360
creating any privacy risks because

1938
01:13:05,360 --> 01:13:06,640
there's no information there that you

1939
01:13:06,640 --> 01:13:08,239
never couldn't already observe but

1940
01:13:08,239 --> 01:13:11,280
the utility question arises um

1941
01:13:11,280 --> 01:13:14,480
so on the flip side of that if there is

1942
01:13:14,480 --> 01:13:17,040
information here if there is information

1943
01:13:17,040 --> 01:13:18,239
here that the network couldn't just

1944
01:13:18,239 --> 01:13:18,719
observe

1945
01:13:18,719 --> 01:13:20,719
then we have a big uh security and

1946
01:13:20,719 --> 01:13:21,920
privacy problem

1947
01:13:21,920 --> 01:13:23,199
uh because we need to worry about how

1948
01:13:23,199 --> 01:13:24,560
that information is protected and who

1949
01:13:24,560 --> 01:13:25,440
it's exposed to

1950
01:13:25,440 --> 01:13:27,679
so i guess i don't understand uh based

1951
01:13:27,679 --> 01:13:28,880
on what's been said here it seems like

1952
01:13:28,880 --> 01:13:30,640
there's been some things on both sides

1953
01:13:30,640 --> 01:13:31,520
of that

1954
01:13:31,520 --> 01:13:34,320
um you know kind of whether this is

1955
01:13:34,320 --> 01:13:35,440
something where we really need to worry

1956
01:13:35,440 --> 01:13:36,719
about something or that's just something

1957
01:13:36,719 --> 01:13:38,080
that is like yet another

1958
01:13:38,080 --> 01:13:39,280
tunneling protocol so i think it would

1959
01:13:39,280 --> 01:13:40,480
be really good to be chris from that

1960
01:13:40,480 --> 01:13:41,679
point so

1961
01:13:41,679 --> 01:13:43,600
let me um highlight that as one point

1962
01:13:43,600 --> 01:13:45,679
and um no need to respond here we can we

1963
01:13:45,679 --> 01:13:46,640
can follow up

1964
01:13:46,640 --> 01:13:49,760
on mailing lists afterwards um

1965
01:13:49,760 --> 01:13:51,360
the second point i'll raise is it would

1966
01:13:51,360 --> 01:13:53,120
be really helpful here to understand

1967
01:13:53,120 --> 01:13:54,640
you know security is all about cost

1968
01:13:54,640 --> 01:13:56,560
benefit analyses you know take risks to

1969
01:13:56,560 --> 01:13:57,600
get benefits

1970
01:13:57,600 --> 01:13:59,120
um so it'd be really good to be really

1971
01:13:59,120 --> 01:14:01,120
crisp here on what the benefit is to

1972
01:14:01,120 --> 01:14:02,000
applications

1973
01:14:02,000 --> 01:14:05,040
of a technology like this given the a in

1974
01:14:05,040 --> 01:14:06,239
the name

1975
01:14:06,239 --> 01:14:08,000
like you mentioned meat echo as an

1976
01:14:08,000 --> 01:14:09,679
example but um

1977
01:14:09,679 --> 01:14:11,679
if you could dive in if you could have

1978
01:14:11,679 --> 01:14:13,679
some like worked examples of

1979
01:14:13,679 --> 01:14:17,440
applications that specifically

1980
01:14:17,440 --> 01:14:18,880
applications that do benefit from this

1981
01:14:18,880 --> 01:14:20,400
and then specifically how they benefit

1982
01:14:20,400 --> 01:14:21,120
from this

1983
01:14:21,120 --> 01:14:24,400
that would help motivate um motivate the

1984
01:14:24,400 --> 01:14:25,760
utility of this mechanism

1985
01:14:25,760 --> 01:14:27,760
and highlight you know what are the

1986
01:14:27,760 --> 01:14:29,440
risks what did the application have to

1987
01:14:29,440 --> 01:14:29,920
give up

1988
01:14:29,920 --> 01:14:31,679
in order to get that benefit so it would

1989
01:14:31,679 --> 01:14:35,120
facilitate the security analysis

1990
01:14:36,320 --> 01:14:39,920
okay okay thanks thanks very much for

1991
01:14:39,920 --> 01:14:40,640
your

1992
01:14:40,640 --> 01:14:44,080
this is the information okay yeah so

1993
01:14:44,080 --> 01:14:45,920
jen i i hope you got some of the

1994
01:14:45,920 --> 01:14:47,600
feedback you were looking for i think

1995
01:14:47,600 --> 01:14:48,400
there was also

1996
01:14:48,400 --> 01:14:50,560
some discussion in the jabber room so

1997
01:14:50,560 --> 01:14:52,880
hopefully you can

1998
01:14:52,880 --> 01:14:55,120
look through that as well after the

1999
01:14:55,120 --> 01:14:56,000
session to

2000
01:14:56,000 --> 01:14:58,960
to get some more feedback uh we are

2001
01:14:58,960 --> 01:14:59,520
what's

2002
01:14:59,520 --> 01:15:02,320
over time so unless there's something

2003
01:15:02,320 --> 01:15:04,000
you really want to respond to i think we

2004
01:15:04,000 --> 01:15:04,400
should

2005
01:15:04,400 --> 01:15:08,080
move forward with the agenda okay okay

2006
01:15:08,080 --> 01:15:10,000
okay thank you thank you very much for

2007
01:15:10,000 --> 01:15:11,360
this so rich

2008
01:15:11,360 --> 01:15:15,600
information okay

2009
01:15:15,600 --> 01:15:18,560
so we are moving on to john madison with

2010
01:15:18,560 --> 01:15:18,880
the

2011
01:15:18,880 --> 01:15:21,600
aed limits it's a topic that has come up

2012
01:15:21,600 --> 01:15:23,520
in a few working groups and it seemed

2013
01:15:23,520 --> 01:15:24,960
worth

2014
01:15:24,960 --> 01:15:26,560
presenting this in front of the broader

2015
01:15:26,560 --> 01:15:28,480
audience so

2016
01:15:28,480 --> 01:15:32,880
um i think

2017
01:15:32,880 --> 01:15:35,679
you know we may have enough time to do

2018
01:15:35,679 --> 01:15:37,360
the full 20 minutes but john if you can

2019
01:15:37,360 --> 01:15:38,080
do it in

2020
01:15:38,080 --> 01:15:41,199
15 that would be good to leave some more

2021
01:15:41,199 --> 01:15:43,280
time to look back at the end

2022
01:15:43,280 --> 01:15:46,719
so i have to take it away thanks

2023
01:15:46,719 --> 01:15:50,000
so this is a presentation of

2024
01:15:50,000 --> 01:15:53,040
this was shortly presented in core early

2025
01:15:53,040 --> 01:15:54,800
this week but it needs to be presented

2026
01:15:54,800 --> 01:15:56,880
also in the security area core is not

2027
01:15:56,880 --> 01:16:00,480
a security working group there's also i

2028
01:16:00,480 --> 01:16:01,120
think there's

2029
01:16:01,120 --> 01:16:03,840
interest for the findings here for a

2030
01:16:03,840 --> 01:16:06,640
outside of core for example for

2031
01:16:06,640 --> 01:16:09,840
use of ccm8 with dtls

2032
01:16:09,840 --> 01:16:13,040
for iot or for any other idf security

2033
01:16:13,040 --> 01:16:15,199
protocol that

2034
01:16:15,199 --> 01:16:18,800
would do this work so this is analysis

2035
01:16:18,800 --> 01:16:21,600
of the work that has been done in dtls

2036
01:16:21,600 --> 01:16:24,480
working group quick working group and

2037
01:16:24,480 --> 01:16:26,080
ongoing in cfrg

2038
01:16:26,080 --> 01:16:28,640
next slide

2039
01:16:31,600 --> 01:16:34,000
there is a list of where this work has

2040
01:16:34,000 --> 01:16:34,880
been done

2041
01:16:34,880 --> 01:16:37,920
and recently core

2042
01:16:37,920 --> 01:16:41,040
has been starting to look at

2043
01:16:41,040 --> 01:16:44,400
looking at doing aad limits for

2044
01:16:44,400 --> 01:16:48,239
for oscor which i think is great

2045
01:16:48,239 --> 01:16:51,280
driven by rickard herglund just

2046
01:16:51,280 --> 01:16:53,440
short summary of the notation so it is

2047
01:16:53,440 --> 01:16:54,800
taken from the

2048
01:16:54,800 --> 01:16:57,440
cf audio document so q is the number of

2049
01:16:57,440 --> 01:16:59,199
protected messages

2050
01:16:59,199 --> 01:17:03,040
uh v is the number of four jury attempt

2051
01:17:03,040 --> 01:17:06,640
um and l is the length of

2052
01:17:06,640 --> 01:17:09,679
messages in number of blocks and the

2053
01:17:09,679 --> 01:17:10,560
enqueue

2054
01:17:10,560 --> 01:17:14,960
is per key unless i state anything else

2055
01:17:14,960 --> 01:17:18,640
and there's other reasons to re-key

2056
01:17:18,640 --> 01:17:21,920
to limit leak limit

2057
01:17:21,920 --> 01:17:23,679
the effect of key leakage that will not

2058
01:17:23,679 --> 01:17:25,520
be discussed here and also this

2059
01:17:25,520 --> 01:17:26,480
presentation has

2060
01:17:26,480 --> 01:17:30,239
only analyzed single key limits not

2061
01:17:30,239 --> 01:17:33,600
multi-key and the suggestions here are

2062
01:17:33,600 --> 01:17:34,159
not

2063
01:17:34,159 --> 01:17:36,159
intended to be general recommendations

2064
01:17:36,159 --> 01:17:37,920
they're mostly at this point

2065
01:17:37,920 --> 01:17:45,040
input to the discussion next slide

2066
01:17:45,040 --> 01:17:48,800
so summary of the

2067
01:17:48,800 --> 01:17:50,960
the limit work that has been done in tls

2068
01:17:50,960 --> 01:17:52,239
quick

2069
01:17:52,239 --> 01:17:54,800
so you start with some mathematical

2070
01:17:54,800 --> 01:17:56,000
limits

2071
01:17:56,000 --> 01:17:59,040
then you apply a process uh you end up

2072
01:17:59,040 --> 01:18:00,400
in some

2073
01:18:00,400 --> 01:18:03,520
explicit limits for b and q and then you

2074
01:18:03,520 --> 01:18:05,840
add these counters and the radium

2075
01:18:05,840 --> 01:18:08,000
mechanism to your security protocol

2076
01:18:08,000 --> 01:18:11,360
i think in general this is great um

2077
01:18:11,360 --> 01:18:14,719
and in general i think the the limits

2078
01:18:14,719 --> 01:18:17,280
that has been come up in the dtls and

2079
01:18:17,280 --> 01:18:18,400
tls and quick

2080
01:18:18,400 --> 01:18:21,280
are great and practically useful except

2081
01:18:21,280 --> 01:18:22,880
when you start to apply this

2082
01:18:22,880 --> 01:18:26,159
process to ccm8 and i think you start to

2083
01:18:26,159 --> 01:18:26,480
see

2084
01:18:26,480 --> 01:18:30,960
the flaws so i think

2085
01:18:30,960 --> 01:18:36,159
this will try to analyze this patch and

2086
01:18:36,560 --> 01:18:38,000
summarize the recommendations that i

2087
01:18:38,000 --> 01:18:40,719
have currently given to core

2088
01:18:40,719 --> 01:18:43,040
uh good to remember that the the

2089
01:18:43,040 --> 01:18:44,320
starting point here is

2090
01:18:44,320 --> 01:18:47,920
inequalities they are they are not may

2091
01:18:47,920 --> 01:18:50,560
be tight or tighter but their

2092
01:18:50,560 --> 01:18:52,239
inequalities and then

2093
01:18:52,239 --> 01:18:56,480
the process and the ca and ir limits are

2094
01:18:56,480 --> 01:18:59,600
subject to issues and there's no new

2095
01:18:59,600 --> 01:19:00,560
mathematical

2096
01:19:00,560 --> 01:19:03,679
truths behind these so this could be

2097
01:19:03,679 --> 01:19:08,800
a different next slide

2098
01:19:08,800 --> 01:19:12,159
the first observation is that

2099
01:19:12,159 --> 01:19:15,840
the ca inequality for

2100
01:19:15,840 --> 01:19:19,920
chacha 20 seems way too strict

2101
01:19:19,920 --> 01:19:22,640
and my feeling is that cha-cha is

2102
01:19:22,640 --> 01:19:24,320
treated very differently than

2103
01:19:24,320 --> 01:19:27,520
a yes in the papers as is treated as a

2104
01:19:27,520 --> 01:19:29,440
random permutation

2105
01:19:29,440 --> 01:19:32,239
most of the paper by gordon assumes that

2106
01:19:32,239 --> 01:19:33,199
cha-cha

2107
01:19:33,199 --> 01:19:37,040
is a random function that would mean

2108
01:19:37,040 --> 01:19:41,520
c a equals 0 for charge of 20.

2109
01:19:41,520 --> 01:19:44,560
in the work as i understand in tls and

2110
01:19:44,560 --> 01:19:46,159
the c authority paper

2111
01:19:46,159 --> 01:19:50,080
then the the gordon ends up in the aaa

2112
01:19:50,080 --> 01:19:51,520
de limit for cha-cha

2113
01:19:51,520 --> 01:19:54,560
and the c40 and tls work has taken that

2114
01:19:54,560 --> 01:19:58,239
and split it up back in ca and ia

2115
01:19:58,239 --> 01:20:01,679
so this limit is of course true

2116
01:20:01,679 --> 01:20:05,280
but i think the delimiter is

2117
01:20:05,280 --> 01:20:07,679
doesn't really say anything useful i

2118
01:20:07,679 --> 01:20:08,960
think it gives the right

2119
01:20:08,960 --> 01:20:11,760
the wrong impression of shacha i think

2120
01:20:11,760 --> 01:20:12,800
it should be

2121
01:20:12,800 --> 01:20:16,159
changed and then yes the observation

2122
01:20:16,159 --> 01:20:17,679
that cnia

2123
01:20:17,679 --> 01:20:20,560
is quite different one is used for

2124
01:20:20,560 --> 01:20:21,600
online attacks

2125
01:20:21,600 --> 01:20:26,320
the other for offline connect next slide

2126
01:20:26,480 --> 01:20:30,159
how many minutes have i used by the way

2127
01:20:31,280 --> 01:20:34,880
you know it's five minutes

2128
01:20:34,880 --> 01:20:38,000
but uh you should hurry up so then

2129
01:20:38,000 --> 01:20:38,880
analysis

2130
01:20:38,880 --> 01:20:41,920
of the um calculating

2131
01:20:41,920 --> 01:20:45,760
limits step this mostly lead to

2132
01:20:45,760 --> 01:20:48,560
both practically usable limits except

2133
01:20:48,560 --> 01:20:50,639
for ccm8

2134
01:20:50,639 --> 01:20:53,280
i think one strange thing that you get

2135
01:20:53,280 --> 01:20:53,840
from

2136
01:20:53,840 --> 01:20:57,120
the process used in tls and dtls is that

2137
01:20:57,120 --> 01:20:59,920
if you apply it to the ideal mac you get

2138
01:20:59,920 --> 01:21:00,880
the result that

2139
01:21:00,880 --> 01:21:03,920
your mac needs to be repeated and

2140
01:21:03,920 --> 01:21:07,120
this of course makes little

2141
01:21:07,120 --> 01:21:09,840
sense and does not increase the security

2142
01:21:09,840 --> 01:21:10,880
and

2143
01:21:10,880 --> 01:21:14,639
our finding is that ccm8 for blue q and

2144
01:21:14,639 --> 01:21:15,199
v

2145
01:21:15,199 --> 01:21:17,600
actually behaves extremely similar to

2146
01:21:17,600 --> 01:21:18,560
the

2147
01:21:18,560 --> 01:21:22,239
video mac a 64-bit idiom mac

2148
01:21:22,239 --> 01:21:26,840
and also does not need wiki

2149
01:21:26,840 --> 01:21:29,040
um then

2150
01:21:29,040 --> 01:21:32,639
yeah i think we can move on um

2151
01:21:32,639 --> 01:21:36,080
shorter time i think

2152
01:21:36,080 --> 01:21:41,040
here is a summary of the different

2153
01:21:41,120 --> 01:21:43,920
different inequalities and it's of

2154
01:21:43,920 --> 01:21:46,159
course very easy to see that

2155
01:21:46,159 --> 01:21:49,520
re re-keying lowers ca and

2156
01:21:49,520 --> 01:21:52,639
ia per key

2157
01:21:52,639 --> 01:21:56,159
but we my thinking is that

2158
01:21:56,159 --> 01:21:58,080
that's probably not the right thing to

2159
01:21:58,080 --> 01:21:59,760
do for a security protocol

2160
01:21:59,760 --> 01:22:02,320
where you can have a large number of

2161
01:22:02,320 --> 01:22:03,120
keys

2162
01:22:03,120 --> 01:22:04,880
and you can also have a large number of

2163
01:22:04,880 --> 01:22:07,199
collect connections between

2164
01:22:07,199 --> 01:22:10,800
the nodes so we're keying lowers

2165
01:22:10,800 --> 01:22:13,600
ia and ca for a specific key but might

2166
01:22:13,600 --> 01:22:15,199
not do the same for the

2167
01:22:15,199 --> 01:22:17,920
whole connection if you look at the er

2168
01:22:17,920 --> 01:22:19,040
nca

2169
01:22:19,040 --> 01:22:22,000
advantage for the connection you don't

2170
01:22:22,000 --> 01:22:22,400
need

2171
01:22:22,400 --> 01:22:26,080
to re-key the the linear equations

2172
01:22:26,080 --> 01:22:30,080
like the in integrity advantage for

2173
01:22:30,080 --> 01:22:34,400
cha-cha and gcm

2174
01:22:34,719 --> 01:22:37,360
the four jury probabilities stay stays

2175
01:22:37,360 --> 01:22:38,000
the same

2176
01:22:38,000 --> 01:22:40,480
next slide

2177
01:22:49,520 --> 01:22:53,040
yeah the summary i think

2178
01:22:53,040 --> 01:22:55,920
that might not be a perfect solution

2179
01:22:55,920 --> 01:22:57,120
either it seems

2180
01:22:57,120 --> 01:23:00,800
like a simpler

2181
01:23:00,800 --> 01:23:02,800
solution seems to be to calculate

2182
01:23:02,800 --> 01:23:04,400
security

2183
01:23:04,400 --> 01:23:06,639
levels based on the inequalities that

2184
01:23:06,639 --> 01:23:07,840
would then be

2185
01:23:07,840 --> 01:23:11,199
calculated as the minimum of

2186
01:23:11,199 --> 01:23:13,600
attack cost divided by advantage in the

2187
01:23:13,600 --> 01:23:14,560
traditional way

2188
01:23:14,560 --> 01:23:17,600
and then minimized overall attackers

2189
01:23:17,600 --> 01:23:18,880
this

2190
01:23:18,880 --> 01:23:22,000
this removes the conclusion that you

2191
01:23:22,000 --> 01:23:24,000
need to re-key the

2192
01:23:24,000 --> 01:23:27,760
the ideal mac

2193
01:23:27,760 --> 01:23:30,719
and also looking security levels have

2194
01:23:30,719 --> 01:23:32,800
the

2195
01:23:32,800 --> 01:23:34,880
benefit that if key number one has

2196
01:23:34,880 --> 01:23:36,080
security level

2197
01:23:36,080 --> 01:23:38,719
level n and key two has security level

2198
01:23:38,719 --> 01:23:40,239
and then the connection also have the

2199
01:23:40,239 --> 01:23:41,440
security level

2200
01:23:41,440 --> 01:23:46,080
m and you can go to next

2201
01:23:47,199 --> 01:23:51,679
so here are some slides um

2202
01:23:51,679 --> 01:23:54,880
graphs over the inequalities and we can

2203
01:23:54,880 --> 01:23:56,159
see that

2204
01:23:56,159 --> 01:24:00,000
lowering q and v and l limits

2205
01:24:00,000 --> 01:24:03,280
or q and l limits uh

2206
01:24:03,280 --> 01:24:05,920
raise the security level in the

2207
01:24:05,920 --> 01:24:08,000
beginning

2208
01:24:08,000 --> 01:24:11,679
and here is this and that's in the top

2209
01:24:11,679 --> 01:24:13,840
my recommendation the core will be to

2210
01:24:13,840 --> 01:24:15,360
probably lower q and b

2211
01:24:15,360 --> 01:24:18,320
l a little bit which i constrain ot can

2212
01:24:18,320 --> 01:24:19,199
do

2213
01:24:19,199 --> 01:24:22,000
and then the lower are integrity

2214
01:24:22,000 --> 01:24:23,040
advantages

2215
01:24:23,040 --> 01:24:25,199
and as you can see if you calculate

2216
01:24:25,199 --> 01:24:26,960
security level they are straight

2217
01:24:26,960 --> 01:24:31,840
lines next slide

2218
01:24:32,960 --> 01:24:37,040
here is ccm with a 16-bit mac

2219
01:24:37,040 --> 01:24:39,440
base a bit strangely so the reason why

2220
01:24:39,440 --> 01:24:40,239
they go up

2221
01:24:40,239 --> 01:24:43,520
is that in the beginning all the numbers

2222
01:24:43,520 --> 01:24:43,840
are

2223
01:24:43,840 --> 01:24:47,600
dominated by cube um

2224
01:24:47,600 --> 01:24:50,639
and i think if you look at if you

2225
01:24:50,639 --> 01:24:52,480
look at advantage for the whole

2226
01:24:52,480 --> 01:24:55,520
connection and use attacker cost

2227
01:24:55,520 --> 01:24:58,880
for your them then actually re-keying

2228
01:24:58,880 --> 01:24:59,280
can

2229
01:24:59,280 --> 01:25:02,719
increase the advantage integrity

2230
01:25:02,719 --> 01:25:05,120
advantage for the whole connection not

2231
01:25:05,120 --> 01:25:05,760
per key

2232
01:25:05,760 --> 01:25:08,880
and not security level but let's

2233
01:25:08,880 --> 01:25:12,800
you can move on to next here's maybe the

2234
01:25:12,800 --> 01:25:13,360
most

2235
01:25:13,360 --> 01:25:17,280
interesting finding this is ccm8

2236
01:25:17,280 --> 01:25:21,560
um on the left is a graph of

2237
01:25:21,560 --> 01:25:24,000
ccm84 with q and

2238
01:25:24,000 --> 01:25:27,520
l chosen as in tls dtls

2239
01:25:27,520 --> 01:25:30,560
um and you can see that except for in

2240
01:25:30,560 --> 01:25:31,920
the beginning for low

2241
01:25:31,920 --> 01:25:35,199
values of b and high values of v it

2242
01:25:35,199 --> 01:25:37,600
behaves extremely similar to ideal

2243
01:25:37,600 --> 01:25:39,440
64-bit mac

2244
01:25:39,440 --> 01:25:43,440
if you lower q and v slightly

2245
01:25:43,440 --> 01:25:46,000
which is in the right graph for example

2246
01:25:46,000 --> 01:25:47,520
l 2 to the power of

2247
01:25:47,520 --> 01:25:50,480
8 and q 2 to the power of 20 then starts

2248
01:25:50,480 --> 01:25:52,800
behaving like an idiom mac

2249
01:25:52,800 --> 01:25:56,000
already for d equals zero there's a

2250
01:25:56,000 --> 01:25:57,920
slight slight deviation that

2251
01:25:57,920 --> 01:26:00,480
is almost hard to see but it based like

2252
01:26:00,480 --> 01:26:01,360
an ideal mac

2253
01:26:01,360 --> 01:26:05,199
until v equals 2 to the power of 35

2254
01:26:05,199 --> 01:26:08,400
or something like that and this

2255
01:26:08,400 --> 01:26:10,560
is my current recommendation to core

2256
01:26:10,560 --> 01:26:12,880
that they can perfectly

2257
01:26:12,880 --> 01:26:17,040
fine with keep using ccm 8

2258
01:26:17,040 --> 01:26:19,679
next slide

2259
01:26:21,600 --> 01:26:24,239
and here are some general

2260
01:26:24,239 --> 01:26:25,280
recommendations i

2261
01:26:25,280 --> 01:26:27,840
i definitely think this the the limit

2262
01:26:27,840 --> 01:26:29,760
work done by a lot of people it's

2263
01:26:29,760 --> 01:26:33,360
great oscar should do the same um

2264
01:26:33,360 --> 01:26:36,480
i think you can use ccm8 behaves like a

2265
01:26:36,480 --> 01:26:37,840
perfect ideal max

2266
01:26:37,840 --> 01:26:41,199
as long as you're fine with 64-bit

2267
01:26:41,199 --> 01:26:44,719
forgery probability ccm8 is close to a

2268
01:26:44,719 --> 01:26:46,239
perfect algorithm for that

2269
01:26:46,239 --> 01:26:49,440
at least the integrity part and i think

2270
01:26:49,440 --> 01:26:52,400
64-bit for the probability is very

2271
01:26:52,400 --> 01:26:54,560
acceptable for constrained rt

2272
01:26:54,560 --> 01:26:56,560
basically you need to get a single

2273
01:26:56,560 --> 01:26:58,719
folder you need to send 4.3

2274
01:26:58,719 --> 01:27:02,000
billion messages for 68 years which is

2275
01:27:02,000 --> 01:27:05,040
extremely invisible in constrained by

2276
01:27:05,040 --> 01:27:05,280
you

2277
01:27:05,280 --> 01:27:08,880
some constrained iot radio

2278
01:27:08,880 --> 01:27:12,639
then i think i if you heavily use of

2279
01:27:12,639 --> 01:27:14,480
ccm8 you should probably

2280
01:27:14,480 --> 01:27:16,159
for controlling rt you should probably

2281
01:27:16,159 --> 01:27:18,480
choose a little bit lower value for lnq

2282
01:27:18,480 --> 01:27:19,520
so you get

2283
01:27:19,520 --> 01:27:22,560
the per idle mac also from low b

2284
01:27:22,560 --> 01:27:25,760
and then some further consideration for

2285
01:27:25,760 --> 01:27:27,360
core there's been some discussion in

2286
01:27:27,360 --> 01:27:30,400
court to not calculate

2287
01:27:30,400 --> 01:27:32,400
very hard bounce for different

2288
01:27:32,400 --> 01:27:34,159
algorithms but rather to choose

2289
01:27:34,159 --> 01:27:36,880
a little value and apply that for all

2290
01:27:36,880 --> 01:27:38,719
algorithms and maybe to try to make

2291
01:27:38,719 --> 01:27:41,679
q and v similar with some implementation

2292
01:27:41,679 --> 01:27:43,600
advantage of that

2293
01:27:43,600 --> 01:27:48,960
i think that's it comments questions

2294
01:27:50,719 --> 01:27:53,840
so i think the one of the questions that

2295
01:27:53,840 --> 01:27:54,400
came up

2296
01:27:54,400 --> 01:27:56,639
in the chat which i don't know if

2297
01:27:56,639 --> 01:27:58,239
someone was planning to say but it seems

2298
01:27:58,239 --> 01:27:59,360
important

2299
01:27:59,360 --> 01:28:02,080
um relates to like the document in the

2300
01:28:02,080 --> 01:28:04,239
cfrg do you think that document

2301
01:28:04,239 --> 01:28:06,880
is clear about what it does and does not

2302
01:28:06,880 --> 01:28:08,800
say or should there be changes made to

2303
01:28:08,800 --> 01:28:10,320
it

2304
01:28:10,320 --> 01:28:13,760
i think i think the tls and etls does

2305
01:28:13,760 --> 01:28:14,080
not

2306
01:28:14,080 --> 01:28:17,600
need to change except if dtls want to

2307
01:28:17,600 --> 01:28:20,080
use ccm8 but that could also be done in

2308
01:28:20,080 --> 01:28:22,639
for example the iot profile i think to

2309
01:28:22,639 --> 01:28:23,840
see if all the

2310
01:28:23,840 --> 01:28:27,440
document should probably change the ca

2311
01:28:27,440 --> 01:28:30,239
limit for charger 20

2312
01:28:30,239 --> 01:28:32,719
or at least explain it better that this

2313
01:28:32,719 --> 01:28:35,199
is not

2314
01:28:35,760 --> 01:28:39,040
not likely to be close to the

2315
01:28:39,040 --> 01:28:42,000
to the exact limit for touch attempt and

2316
01:28:42,000 --> 01:28:43,440
then i think the process

2317
01:28:43,440 --> 01:28:46,560
should change it does not give the

2318
01:28:46,560 --> 01:28:49,199
strange results so that's if your mac is

2319
01:28:49,199 --> 01:28:50,080
should be

2320
01:28:50,080 --> 01:28:53,600
re-keyed and i think the currently

2321
01:28:53,600 --> 01:28:57,040
specified process is not ready for

2322
01:28:57,040 --> 01:29:02,400
general ipf irtf recommendation

2323
01:29:04,639 --> 01:29:11,840
martin go ahead

2324
01:29:17,040 --> 01:29:18,560
part of the problem i think we're having

2325
01:29:18,560 --> 01:29:20,320
in this space is that we don't really

2326
01:29:20,320 --> 01:29:21,120
understand

2327
01:29:21,120 --> 01:29:24,400
the um the way to think about

2328
01:29:24,400 --> 01:29:27,360
these things from the perspective of of

2329
01:29:27,360 --> 01:29:28,639
uh

2330
01:29:28,639 --> 01:29:30,480
long-term security and re-keying

2331
01:29:30,480 --> 01:29:32,639
multi-user security and the various

2332
01:29:32,639 --> 01:29:33,760
aspects of this

2333
01:29:33,760 --> 01:29:37,440
the um discussions that we had

2334
01:29:37,440 --> 01:29:39,840
when we were putting the draft together

2335
01:29:39,840 --> 01:29:42,239
uh essentially concluded that

2336
01:29:42,239 --> 01:29:45,920
the the larger block size

2337
01:29:45,920 --> 01:29:49,520
and particularly the larger tag sizes

2338
01:29:49,520 --> 01:29:52,480
were such that you had to have extremely

2339
01:29:52,480 --> 01:29:54,480
large resources in order to attack

2340
01:29:54,480 --> 01:29:57,840
even in the multi-user context but the

2341
01:29:57,840 --> 01:29:59,760
the smaller tag sizes don't have those

2342
01:29:59,760 --> 01:30:01,520
same uh

2343
01:30:01,520 --> 01:30:04,639
advantages and my personal conclusion

2344
01:30:04,639 --> 01:30:06,080
was that ccm8 was

2345
01:30:06,080 --> 01:30:09,199
was really not very good for those sort

2346
01:30:09,199 --> 01:30:09,600
of

2347
01:30:09,600 --> 01:30:12,960
uh settings under those i also think

2348
01:30:12,960 --> 01:30:14,239
that the assumptions are probably a

2349
01:30:14,239 --> 01:30:15,920
little bit weak as well

2350
01:30:15,920 --> 01:30:19,199
so um it leaves us in this awkward

2351
01:30:19,199 --> 01:30:20,239
position where i

2352
01:30:20,239 --> 01:30:22,320
i really don't know how to to think

2353
01:30:22,320 --> 01:30:23,600
about ccm8

2354
01:30:23,600 --> 01:30:26,800
in in this context uh it would have been

2355
01:30:26,800 --> 01:30:28,400
better if we had a lot a larger block

2356
01:30:28,400 --> 01:30:30,159
size and applied attack size all around

2357
01:30:30,159 --> 01:30:30,880
but

2358
01:30:30,880 --> 01:30:33,600
uh i understand that constraints exist

2359
01:30:33,600 --> 01:30:34,960
so i think that

2360
01:30:34,960 --> 01:30:36,239
as far as you've gone the

2361
01:30:36,239 --> 01:30:37,840
recommendations that you have for ccm

2362
01:30:37,840 --> 01:30:38,800
are reasonable

2363
01:30:38,800 --> 01:30:43,440
um but um i

2364
01:30:43,520 --> 01:30:45,840
i really don't know if it'll be the the

2365
01:30:45,840 --> 01:30:48,480
model that applies every web

2366
01:30:48,480 --> 01:30:51,760
no i don't know that either cds more as

2367
01:30:51,760 --> 01:30:52,960
an

2368
01:30:52,960 --> 01:30:57,360
input to further discussion in cfod

2369
01:30:57,360 --> 01:31:03,839
for what to do

2370
01:31:06,239 --> 01:31:08,799
phil go ahead

2371
01:31:09,280 --> 01:31:13,600
uh hi yeah um just a couple of points

2372
01:31:13,600 --> 01:31:16,960
uh have you been considering ocd

2373
01:31:16,960 --> 01:31:20,320
uh the uh patents go backwards fire and

2374
01:31:20,320 --> 01:31:23,520
uh rugway's just put his

2375
01:31:23,520 --> 01:31:26,320
patent from the public domain so it's

2376
01:31:26,320 --> 01:31:27,679
probably worth considering

2377
01:31:27,679 --> 01:31:30,639
it because what i've never liked about

2378
01:31:30,639 --> 01:31:31,679
gcm is

2379
01:31:31,679 --> 01:31:33,600
basically turning a block type into a

2380
01:31:33,600 --> 01:31:35,840
screen cycle

2381
01:31:35,840 --> 01:31:39,840
and so mostly

2382
01:31:42,080 --> 01:31:44,159
uh the other thing kind of like

2383
01:31:44,159 --> 01:31:46,239
meta-knacker is

2384
01:31:46,239 --> 01:31:49,520
with you know aas

2385
01:31:49,520 --> 01:31:52,639
16-bit block maybe we should think about

2386
01:31:52,639 --> 01:31:54,960
a box like a competition for

2387
01:31:54,960 --> 01:31:59,840
32-bit that's two-byte

2388
01:32:01,210 --> 01:32:04,260
[Music]

2389
01:32:09,520 --> 01:32:12,400
i have not looked at ocd i don't know if

2390
01:32:12,400 --> 01:32:14,080
anybody else

2391
01:32:14,080 --> 01:32:16,239
have done that i don't know if there's

2392
01:32:16,239 --> 01:32:17,440
any

2393
01:32:17,440 --> 01:32:21,280
advantages published for ocd it would be

2394
01:32:21,280 --> 01:32:22,320
very interesting

2395
01:32:22,320 --> 01:32:25,520
to see i think for the constrained iut

2396
01:32:25,520 --> 01:32:29,199
where they are currently depending on

2397
01:32:29,199 --> 01:32:32,880
ccm 8 and i think if there's

2398
01:32:32,880 --> 01:32:35,360
no major problem with ccm8 i think the

2399
01:32:35,360 --> 01:32:38,400
iot world would like to continue to use

2400
01:32:38,400 --> 01:32:41,440
ccm8 um otherwise

2401
01:32:41,440 --> 01:32:43,920
they would need to change then i don't

2402
01:32:43,920 --> 01:32:46,880
know if ucb would be a good

2403
01:32:46,880 --> 01:32:50,000
answer for for that also we definitely

2404
01:32:50,000 --> 01:32:50,480
have it

2405
01:32:50,480 --> 01:32:55,839
advantages in general

2406
01:33:00,960 --> 01:33:04,320
okay uh thanks again for putting this

2407
01:33:04,320 --> 01:33:05,199
together and

2408
01:33:05,199 --> 01:33:07,120
thanks to martin and everyone else in

2409
01:33:07,120 --> 01:33:09,679
fact actually been working on

2410
01:33:09,679 --> 01:33:12,159
looking at the limits as obviously we

2411
01:33:12,159 --> 01:33:13,199
want to keep looking at

2412
01:33:13,199 --> 01:33:14,960
and hopefully we can make some more

2413
01:33:14,960 --> 01:33:16,800
progress

2414
01:33:16,800 --> 01:33:18,560
so thanks john for the talk and we

2415
01:33:18,560 --> 01:33:20,960
should move on to the church

2416
01:33:20,960 --> 01:33:24,719
you're in take it away

2417
01:33:24,719 --> 01:33:26,400
let's see do you need to request the

2418
01:33:26,400 --> 01:33:29,519
share okay

2419
01:33:32,560 --> 01:33:34,080
well aaron is bringing up kind of the

2420
01:33:34,080 --> 01:33:36,080
slides again it's kind of a reminder

2421
01:33:36,080 --> 01:33:38,239
after you hear oauth uh if you want to

2422
01:33:38,239 --> 01:33:40,320
give ben and me a suggestion on

2423
01:33:40,320 --> 01:33:42,080
what working group you want to hear

2424
01:33:42,080 --> 01:33:43,440
about next time we're

2425
01:33:43,440 --> 01:33:45,920
kind of happy to slot into the agenda

2426
01:33:45,920 --> 01:33:51,840
for 111.

2427
01:33:53,600 --> 01:33:56,800
great thanks

2428
01:33:57,280 --> 01:33:59,440
so yeah hi i'm aaron parkey uh coming to

2429
01:33:59,440 --> 01:34:00,560
you from the oauth

2430
01:34:00,560 --> 01:34:04,080
group the goal of this

2431
01:34:04,080 --> 01:34:05,679
presentation today is really to sort of

2432
01:34:05,679 --> 01:34:07,280
give you a sense of

2433
01:34:07,280 --> 01:34:10,320
what oauth is what problems we

2434
01:34:10,320 --> 01:34:11,840
think about sort of the way we're

2435
01:34:11,840 --> 01:34:14,000
approaching the the world

2436
01:34:14,000 --> 01:34:17,440
and um this is going to be a mostly high

2437
01:34:17,440 --> 01:34:18,239
level

2438
01:34:18,239 --> 01:34:20,800
session so mostly not a lot of on the

2439
01:34:20,800 --> 01:34:22,480
wire protocol stuff more about the high

2440
01:34:22,480 --> 01:34:23,280
level concepts

2441
01:34:23,280 --> 01:34:24,639
and architectures of the different

2442
01:34:24,639 --> 01:34:26,960
parties involved

2443
01:34:26,960 --> 01:34:29,280
um and towards the end i will catch you

2444
01:34:29,280 --> 01:34:31,360
up on some of the

2445
01:34:31,360 --> 01:34:32,960
new work being being done in the group

2446
01:34:32,960 --> 01:34:34,560
as well

2447
01:34:34,560 --> 01:34:36,960
so i want to start off by saying that

2448
01:34:36,960 --> 01:34:38,159
specs it turns out

2449
01:34:38,159 --> 01:34:39,679
are actually not a great way to learn

2450
01:34:39,679 --> 01:34:41,360
about this stuff as i'm sure you're all

2451
01:34:41,360 --> 01:34:44,400
aware um specs are

2452
01:34:44,400 --> 01:34:47,199
you know the the legal contract that we

2453
01:34:47,199 --> 01:34:48,000
are all writing

2454
01:34:48,000 --> 01:34:50,880
and in the oauth group yeah it turns out

2455
01:34:50,880 --> 01:34:51,360
that

2456
01:34:51,360 --> 01:34:53,760
the oauth core spec written now almost

2457
01:34:53,760 --> 01:34:55,199
10 years ago

2458
01:34:55,199 --> 01:34:57,520
um there's been a lot of of progress

2459
01:34:57,520 --> 01:34:58,480
made since then

2460
01:34:58,480 --> 01:35:01,040
and it is a bit of a mess it is

2461
01:35:01,040 --> 01:35:02,480
definitely a bit of a mess there's a lot

2462
01:35:02,480 --> 01:35:05,520
of different extensions there's a lot of

2463
01:35:05,520 --> 01:35:06,880
the uh there's a lot of work being done

2464
01:35:06,880 --> 01:35:08,800
in other groups as well outside of the

2465
01:35:08,800 --> 01:35:12,080
ietf as well building on this work but i

2466
01:35:12,080 --> 01:35:13,920
want to take a step back from all that

2467
01:35:13,920 --> 01:35:14,719
and

2468
01:35:14,719 --> 01:35:17,119
rewind back in time to talk about how we

2469
01:35:17,119 --> 01:35:18,320
actually got here

2470
01:35:18,320 --> 01:35:21,920
which is this very what used to be a

2471
01:35:21,920 --> 01:35:22,480
very

2472
01:35:22,480 --> 01:35:26,080
common pattern on the internet which is

2473
01:35:26,080 --> 01:35:28,639
uh when an app like yelp not to pick on

2474
01:35:28,639 --> 01:35:29,199
yelp

2475
01:35:29,199 --> 01:35:31,600
but when an app like yelp would launch

2476
01:35:31,600 --> 01:35:33,040
they would want to see if your friends

2477
01:35:33,040 --> 01:35:34,719
were already using yelp they offered you

2478
01:35:34,719 --> 01:35:36,239
to you know bootstrap your social

2479
01:35:36,239 --> 01:35:37,920
network within this new application and

2480
01:35:37,920 --> 01:35:39,280
to do that it would ask you

2481
01:35:39,280 --> 01:35:42,880
for access to your contact list

2482
01:35:42,880 --> 01:35:44,639
and where is your contact list in your

2483
01:35:44,639 --> 01:35:46,719
email so to ask you to enter the email

2484
01:35:46,719 --> 01:35:47,280
address

2485
01:35:47,280 --> 01:35:49,440
and the password to your email and this

2486
01:35:49,440 --> 01:35:50,639
was a very common thing like even

2487
01:35:50,639 --> 01:35:52,400
facebook was doing this

2488
01:35:52,400 --> 01:35:54,239
we understand that this is a terrible

2489
01:35:54,239 --> 01:35:56,320
idea now it is generally understood that

2490
01:35:56,320 --> 01:35:57,920
we should not be giving our email

2491
01:35:57,920 --> 01:36:02,480
credentials to random applications

2492
01:36:02,480 --> 01:36:04,960
right a couple of very concrete problems

2493
01:36:04,960 --> 01:36:05,840
with this

2494
01:36:05,840 --> 01:36:08,080
how do you decide that if you no longer

2495
01:36:08,080 --> 01:36:09,600
want this application to have access

2496
01:36:09,600 --> 01:36:11,920
that you can revoke that access how do

2497
01:36:11,920 --> 01:36:14,000
you actually know that that app is not

2498
01:36:14,000 --> 01:36:16,320
going to store your password for example

2499
01:36:16,320 --> 01:36:17,600
how do you actually know that it's going

2500
01:36:17,600 --> 01:36:19,920
to only do what it's saying it's going

2501
01:36:19,920 --> 01:36:21,280
to do which is reading your

2502
01:36:21,280 --> 01:36:23,520
contacts and not actually reading your

2503
01:36:23,520 --> 01:36:25,040
email

2504
01:36:25,040 --> 01:36:26,960
and you actually trust that app not to

2505
01:36:26,960 --> 01:36:28,159
do things like

2506
01:36:28,159 --> 01:36:30,080
changing your password or deleting your

2507
01:36:30,080 --> 01:36:31,199
account

2508
01:36:31,199 --> 01:36:34,480
so the the

2509
01:36:34,480 --> 01:36:36,800
the fact is that people were happily

2510
01:36:36,800 --> 01:36:38,000
putting in their email passwords

2511
01:36:38,000 --> 01:36:39,600
into these apps because they wanted what

2512
01:36:39,600 --> 01:36:41,920
the app was was promising

2513
01:36:41,920 --> 01:36:44,159
which is to find their friends so we

2514
01:36:44,159 --> 01:36:45,280
need to find a solution to this

2515
01:36:45,280 --> 01:36:46,960
otherwise people will just keep doing

2516
01:36:46,960 --> 01:36:48,480
this putting their passwords into

2517
01:36:48,480 --> 01:36:51,360
into random apps we would like to find a

2518
01:36:51,360 --> 01:36:52,320
solution that lets

2519
01:36:52,320 --> 01:36:55,199
yelp access some part of a person's

2520
01:36:55,199 --> 01:36:55,679
account

2521
01:36:55,679 --> 01:36:57,679
while not having to be able to access

2522
01:36:57,679 --> 01:36:59,199
other parts of the account

2523
01:36:59,199 --> 01:37:01,920
that sort of delegated access and this

2524
01:37:01,920 --> 01:37:03,360
is really the problem that oauth set out

2525
01:37:03,360 --> 01:37:04,639
to solve

2526
01:37:04,639 --> 01:37:06,480
a long time ago which is how do we let

2527
01:37:06,480 --> 01:37:08,159
apps access data without sharing

2528
01:37:08,159 --> 01:37:09,840
passwords with the apps

2529
01:37:09,840 --> 01:37:14,480
so what used to be the sort of

2530
01:37:14,480 --> 01:37:16,159
you you give your password to the

2531
01:37:16,159 --> 01:37:18,400
application it then

2532
01:37:18,400 --> 01:37:20,560
sends that password to the api that's

2533
01:37:20,560 --> 01:37:22,159
the pattern we're trying to avoid

2534
01:37:22,159 --> 01:37:24,320
especially because of the third-party

2535
01:37:24,320 --> 01:37:26,320
app scenario

2536
01:37:26,320 --> 01:37:27,840
what we would like to find is a solution

2537
01:37:27,840 --> 01:37:29,679
that lets us

2538
01:37:29,679 --> 01:37:31,440
avoid sharing passwords so we're going

2539
01:37:31,440 --> 01:37:33,040
to need to exchange the password for

2540
01:37:33,040 --> 01:37:34,320
some other thing

2541
01:37:34,320 --> 01:37:37,440
and then use that thing with the app to

2542
01:37:37,440 --> 01:37:40,239
go and make requests to data

2543
01:37:40,239 --> 01:37:43,600
so this is the sort of high level

2544
01:37:43,600 --> 01:37:45,119
concept of what we're trying to do and

2545
01:37:45,119 --> 01:37:46,320
to bring this into the real world i

2546
01:37:46,320 --> 01:37:48,080
actually like to use this analogy of

2547
01:37:48,080 --> 01:37:49,600
checking into a hotel which is when you

2548
01:37:49,600 --> 01:37:51,280
go to a hotel and check into the front

2549
01:37:51,280 --> 01:37:52,480
desk

2550
01:37:52,480 --> 01:37:54,320
the uh person at the front desk will

2551
01:37:54,320 --> 01:37:55,520
hand you a

2552
01:37:55,520 --> 01:37:58,159
key card that key card is what you take

2553
01:37:58,159 --> 01:37:59,280
to the door

2554
01:37:59,280 --> 01:38:01,199
and you can go and access the room on

2555
01:38:01,199 --> 01:38:02,400
your door with that key card

2556
01:38:02,400 --> 01:38:05,600
this is exactly analogous to oauth

2557
01:38:05,600 --> 01:38:06,880
where the person at the front desk is

2558
01:38:06,880 --> 01:38:08,239
the authorization server handing out

2559
01:38:08,239 --> 01:38:09,280
these key cards

2560
01:38:09,280 --> 01:38:11,840
the key card is like the oauth access

2561
01:38:11,840 --> 01:38:12,560
token

2562
01:38:12,560 --> 01:38:14,080
and then that door would be the resource

2563
01:38:14,080 --> 01:38:15,600
or the api

2564
01:38:15,600 --> 01:38:18,880
so the uh

2565
01:38:18,880 --> 01:38:20,880
there's there that key card may give you

2566
01:38:20,880 --> 01:38:22,480
access to your room it may give you

2567
01:38:22,480 --> 01:38:24,560
access to other resources in the hotel

2568
01:38:24,560 --> 01:38:27,600
and the important thing here is when you

2569
01:38:27,600 --> 01:38:29,199
are using that key card you don't need

2570
01:38:29,199 --> 01:38:30,320
to know how it works you just need to

2571
01:38:30,320 --> 01:38:31,760
know the thing that you're sending it to

2572
01:38:31,760 --> 01:38:33,119
knows how it works

2573
01:38:33,119 --> 01:38:35,840
and it doesn't even need to represent a

2574
01:38:35,840 --> 01:38:38,159
user it doesn't need to have your id

2575
01:38:38,159 --> 01:38:39,360
written on it it doesn't need to have

2576
01:38:39,360 --> 01:38:41,199
anything about you as a person it

2577
01:38:41,199 --> 01:38:43,360
represents access to data

2578
01:38:43,360 --> 01:38:46,400
and what is uh so what that means is

2579
01:38:46,400 --> 01:38:48,400
that because oauth was

2580
01:38:48,400 --> 01:38:50,880
created to solve this sort of delegated

2581
01:38:50,880 --> 01:38:51,679
access problem

2582
01:38:51,679 --> 01:38:52,800
there's actually nothing in the spec

2583
01:38:52,800 --> 01:38:54,560
that talks about users there's no user

2584
01:38:54,560 --> 01:38:55,440
identity

2585
01:38:55,440 --> 01:38:56,960
built into the oauth spec it's always

2586
01:38:56,960 --> 01:38:58,960
about accessing data

2587
01:38:58,960 --> 01:39:00,960
so oauth started with that problem and

2588
01:39:00,960 --> 01:39:02,400
then because

2589
01:39:02,400 --> 01:39:04,080
it is actually very common that

2590
01:39:04,080 --> 01:39:06,080
applications do care about who the user

2591
01:39:06,080 --> 01:39:07,119
is

2592
01:39:07,119 --> 01:39:10,159
then uh the openid openly connect group

2593
01:39:10,159 --> 01:39:12,719
built on top of the oauth spec to add

2594
01:39:12,719 --> 01:39:16,000
back in that user identity information

2595
01:39:16,000 --> 01:39:18,400
so i want to start with a bit on how

2596
01:39:18,400 --> 01:39:21,920
oauth works and then we will

2597
01:39:22,159 --> 01:39:25,440
we will touch on some of the some of the

2598
01:39:25,440 --> 01:39:27,360
user identity aspects that are

2599
01:39:27,360 --> 01:39:30,400
built in later as well so in

2600
01:39:30,400 --> 01:39:32,800
in the oauth terminology we say that the

2601
01:39:32,800 --> 01:39:34,639
goal of the client application is to get

2602
01:39:34,639 --> 01:39:36,239
an access token that's sort of the end

2603
01:39:36,239 --> 01:39:36,639
goal

2604
01:39:36,639 --> 01:39:39,520
of of the client get the access token to

2605
01:39:39,520 --> 01:39:40,000
be able

2606
01:39:40,000 --> 01:39:43,040
to make api requests and then

2607
01:39:43,040 --> 01:39:45,600
how that client is going to get the

2608
01:39:45,600 --> 01:39:46,960
access token will depend on a whole

2609
01:39:46,960 --> 01:39:48,000
bunch of different things

2610
01:39:48,000 --> 01:39:49,360
depending on what kind of app it is

2611
01:39:49,360 --> 01:39:50,239
where it's running the different

2612
01:39:50,239 --> 01:39:51,679
security properties of

2613
01:39:51,679 --> 01:39:54,800
that of that client in the oauth

2614
01:39:54,800 --> 01:39:56,560
terminology we say that

2615
01:39:56,560 --> 01:39:59,360
the client will use an oauth flow to get

2616
01:39:59,360 --> 01:40:00,800
an access token and then there's several

2617
01:40:00,800 --> 01:40:02,480
different flows defined in the spec

2618
01:40:02,480 --> 01:40:04,480
as well as some extensions and there's a

2619
01:40:04,480 --> 01:40:06,000
couple that are defined in the spec that

2620
01:40:06,000 --> 01:40:08,080
are being undefined by some

2621
01:40:08,080 --> 01:40:12,560
some new extensions and

2622
01:40:12,560 --> 01:40:16,159
the uh regardless of which flow is being

2623
01:40:16,159 --> 01:40:18,560
was used the end result is going to be

2624
01:40:18,560 --> 01:40:20,560
the same the end result is

2625
01:40:20,560 --> 01:40:22,560
the access token the app has the access

2626
01:40:22,560 --> 01:40:24,480
token it's going to then

2627
01:40:24,480 --> 01:40:26,480
put that into an http header make a

2628
01:40:26,480 --> 01:40:29,360
request to an api

2629
01:40:29,360 --> 01:40:32,639
so okay starting let's get into some

2630
01:40:32,639 --> 01:40:33,760
terminology here

2631
01:40:33,760 --> 01:40:35,679
in in the spec there's a bunch of

2632
01:40:35,679 --> 01:40:37,040
terminology defined those are the terms

2633
01:40:37,040 --> 01:40:38,480
you'll find in the bottom

2634
01:40:38,480 --> 01:40:41,920
the uh the

2635
01:40:41,920 --> 01:40:44,159
in parentheses resource owner user agent

2636
01:40:44,159 --> 01:40:46,000
those are the technically more correct

2637
01:40:46,000 --> 01:40:48,560
terms for the more conversational terms

2638
01:40:48,560 --> 01:40:49,119
you'll find

2639
01:40:49,119 --> 01:40:51,280
in bold we talk about applications oauth

2640
01:40:51,280 --> 01:40:52,800
servers apis

2641
01:40:52,800 --> 01:40:55,199
but in in this fact they're you know

2642
01:40:55,199 --> 01:40:56,719
more precisely defined for

2643
01:40:56,719 --> 01:40:58,560
for good reason but that's why this

2644
01:40:58,560 --> 01:41:00,719
stuff is confusing to people usually

2645
01:41:00,719 --> 01:41:04,719
the point with these is the um

2646
01:41:04,719 --> 01:41:06,719
these are roles that the spec defines

2647
01:41:06,719 --> 01:41:08,000
these are not necessarily always

2648
01:41:08,000 --> 01:41:08,719
discrete

2649
01:41:08,719 --> 01:41:11,920
physical components so we

2650
01:41:11,920 --> 01:41:14,320
might see this expressed differently in

2651
01:41:14,320 --> 01:41:15,920
a particular deployment for example

2652
01:41:15,920 --> 01:41:17,280
github

2653
01:41:17,280 --> 01:41:19,679
has a piece of software that is both an

2654
01:41:19,679 --> 01:41:21,440
api and an oauth server or a resource

2655
01:41:21,440 --> 01:41:23,280
server and authorization server

2656
01:41:23,280 --> 01:41:24,880
and then the client application might be

2657
01:41:24,880 --> 01:41:27,040
a third-party application accessing data

2658
01:41:27,040 --> 01:41:29,679
in that api that is going to look very

2659
01:41:29,679 --> 01:41:31,280
different from a situation like this

2660
01:41:31,280 --> 01:41:32,719
where you might be writing an iphone app

2661
01:41:32,719 --> 01:41:34,480
you might be also creating an api

2662
01:41:34,480 --> 01:41:36,639
that backs that iphone app and in the

2663
01:41:36,639 --> 01:41:38,159
middle is some sort of you know

2664
01:41:38,159 --> 01:41:38,960
third-party

2665
01:41:38,960 --> 01:41:41,679
service as your oauth server that you

2666
01:41:41,679 --> 01:41:42,880
are purchasing or it's a

2667
01:41:42,880 --> 01:41:44,639
it's a thing you spun up open source in

2668
01:41:44,639 --> 01:41:46,639
a different physical deployment

2669
01:41:46,639 --> 01:41:47,840
it doesn't matter that this actually

2670
01:41:47,840 --> 01:41:49,440
looks different in terms of the way that

2671
01:41:49,440 --> 01:41:50,800
this is architected

2672
01:41:50,800 --> 01:41:52,639
we always map it back to the roles in

2673
01:41:52,639 --> 01:41:54,560
oauth when we talk about how the flows

2674
01:41:54,560 --> 01:41:55,840
work and how the different security

2675
01:41:55,840 --> 01:41:57,760
properties work

2676
01:41:57,760 --> 01:42:01,199
so to get into the uh

2677
01:42:01,199 --> 01:42:03,119
how the authorization code flow and how

2678
01:42:03,119 --> 01:42:04,480
the sort of oauth

2679
01:42:04,480 --> 01:42:07,040
flow actually works the first thing i

2680
01:42:07,040 --> 01:42:09,679
want to do is talk about

2681
01:42:09,679 --> 01:42:12,000
a concept that we talk a lot spend a lot

2682
01:42:12,000 --> 01:42:12,960
of time talking about

2683
01:42:12,960 --> 01:42:14,320
in the oauth group which is front

2684
01:42:14,320 --> 01:42:16,000
channel and back channel

2685
01:42:16,000 --> 01:42:17,920
this is essentially the back channel is

2686
01:42:17,920 --> 01:42:19,679
the sort of like normal way of passing

2687
01:42:19,679 --> 01:42:21,199
data around it's an http

2688
01:42:21,199 --> 01:42:23,440
request from a client to a server and

2689
01:42:23,440 --> 01:42:24,800
there's a lot of security properties of

2690
01:42:24,800 --> 01:42:26,159
that that we often take for granted

2691
01:42:26,159 --> 01:42:27,040
because they're just sort of

2692
01:42:27,040 --> 01:42:30,000
baseline https you know it's encrypted

2693
01:42:30,000 --> 01:42:31,520
the request can't be tampered with the

2694
01:42:31,520 --> 01:42:32,800
response that comes back can be trusted

2695
01:42:32,800 --> 01:42:34,480
because it's part of the same connection

2696
01:42:34,480 --> 01:42:35,760
and that's kind of stuff we take for

2697
01:42:35,760 --> 01:42:38,080
granted about the back channel

2698
01:42:38,080 --> 01:42:40,000
the idea with the front channel is that

2699
01:42:40,000 --> 01:42:41,280
instead of a

2700
01:42:41,280 --> 01:42:43,360
client talking directly from itself to

2701
01:42:43,360 --> 01:42:44,960
the server we actually are sending

2702
01:42:44,960 --> 01:42:47,440
data through a browser through a

2703
01:42:47,440 --> 01:42:49,040
redirect based flow

2704
01:42:49,040 --> 01:42:50,560
and it's actually using the browser's

2705
01:42:50,560 --> 01:42:53,440
address bar to move data around

2706
01:42:53,440 --> 01:42:54,960
so i like to think of the back channel

2707
01:42:54,960 --> 01:42:56,719
as you are

2708
01:42:56,719 --> 01:42:58,080
walking up to somebody delivering a

2709
01:42:58,080 --> 01:43:00,000
message you can see who they are

2710
01:43:00,000 --> 01:43:01,520
you can see that the transaction was

2711
01:43:01,520 --> 01:43:02,800
successful you can see that nobody came

2712
01:43:02,800 --> 01:43:04,960
in and stole the data in transit

2713
01:43:04,960 --> 01:43:06,480
whereas passing data the front channel

2714
01:43:06,480 --> 01:43:08,719
is more like putting it in an envelope

2715
01:43:08,719 --> 01:43:10,400
and shipping it in the mail

2716
01:43:10,400 --> 01:43:13,520
where you kind of hope that it's going

2717
01:43:13,520 --> 01:43:14,400
to get there

2718
01:43:14,400 --> 01:43:17,520
but you don't actually know for sure if

2719
01:43:17,520 --> 01:43:18,159
it made it

2720
01:43:18,159 --> 01:43:19,840
and there's a problem on both sides of

2721
01:43:19,840 --> 01:43:21,520
the picture of sending data in the front

2722
01:43:21,520 --> 01:43:22,639
channel which is that

2723
01:43:22,639 --> 01:43:24,080
the sender doesn't know if the message

2724
01:43:24,080 --> 01:43:25,920
was received and

2725
01:43:25,920 --> 01:43:28,480
the receiver doesn't know actually who

2726
01:43:28,480 --> 01:43:29,600
sent the message

2727
01:43:29,600 --> 01:43:32,400
because it's always sent through the

2728
01:43:32,400 --> 01:43:33,040
browser

2729
01:43:33,040 --> 01:43:34,400
redirect where you're kind of handing

2730
01:43:34,400 --> 01:43:36,239
off that message and crossing your

2731
01:43:36,239 --> 01:43:37,600
fingers that it's delivered

2732
01:43:37,600 --> 01:43:39,760
so when we use the front channel we have

2733
01:43:39,760 --> 01:43:41,360
to account for the fact that one the

2734
01:43:41,360 --> 01:43:42,719
message may not get there

2735
01:43:42,719 --> 01:43:44,639
it may be intercepted or copied we

2736
01:43:44,639 --> 01:43:46,719
wouldn't know and the receiver can't

2737
01:43:46,719 --> 01:43:48,080
actually trust anything about that

2738
01:43:48,080 --> 01:43:50,840
message when it receives it

2739
01:43:50,840 --> 01:43:54,000
so let's talk about

2740
01:43:54,000 --> 01:43:57,199
the flow now the authorization code flow

2741
01:43:57,199 --> 01:44:00,239
and i'm going to also include pixi which

2742
01:44:00,239 --> 01:44:01,360
is an extension that

2743
01:44:01,360 --> 01:44:02,960
sort of solves a lot of these sort of

2744
01:44:02,960 --> 01:44:04,560
front channel problems in this because

2745
01:44:04,560 --> 01:44:07,440
this is the sort of new baseline

2746
01:44:07,440 --> 01:44:09,119
the way that the the high level of this

2747
01:44:09,119 --> 01:44:11,440
flow is the user starts off by saying

2748
01:44:11,440 --> 01:44:12,880
hey i'm trying to use this application

2749
01:44:12,880 --> 01:44:14,320
and that's them clicking the button

2750
01:44:14,320 --> 01:44:17,199
login the application says great don't

2751
01:44:17,199 --> 01:44:18,560
give me your password i don't want your

2752
01:44:18,560 --> 01:44:19,119
password

2753
01:44:19,119 --> 01:44:20,719
instead i'm going to generate a

2754
01:44:20,719 --> 01:44:22,719
temporary secret right now and calculate

2755
01:44:22,719 --> 01:44:24,239
a hash of that secret

2756
01:44:24,239 --> 01:44:26,239
we use shot 256 right now because it

2757
01:44:26,239 --> 01:44:27,280
only needs to be

2758
01:44:27,280 --> 01:44:30,320
saved for a couple of seconds

2759
01:44:30,320 --> 01:44:33,440
the app then says great go over to the

2760
01:44:33,440 --> 01:44:35,040
oauth server

2761
01:44:35,040 --> 01:44:38,080
and take this hash value with you now

2762
01:44:38,080 --> 01:44:41,199
this request is actually from the app to

2763
01:44:41,199 --> 01:44:42,639
the os server but it's going through the

2764
01:44:42,639 --> 01:44:44,159
user's browser so this is the first

2765
01:44:44,159 --> 01:44:46,000
front channel request the app is

2766
01:44:46,000 --> 01:44:47,119
actually trying to send something to the

2767
01:44:47,119 --> 01:44:48,320
oauth server but it does not send it

2768
01:44:48,320 --> 01:44:49,360
directly it sends it

2769
01:44:49,360 --> 01:44:52,080
through the browser then that means the

2770
01:44:52,080 --> 01:44:53,920
the user's browser lands at the oauth

2771
01:44:53,920 --> 01:44:55,040
server which is where they

2772
01:44:55,040 --> 01:44:56,400
log in that's where they type in their

2773
01:44:56,400 --> 01:44:58,239
password or they might be delegated to

2774
01:44:58,239 --> 01:44:58,719
some other

2775
01:44:58,719 --> 01:45:01,840
third-party sso thing at this point

2776
01:45:01,840 --> 01:45:03,040
doesn't really matter that's out of

2777
01:45:03,040 --> 01:45:04,000
scope of the spec

2778
01:45:04,000 --> 01:45:05,679
that's the business between the user and

2779
01:45:05,679 --> 01:45:07,840
the oauth server they may also then have

2780
01:45:07,840 --> 01:45:09,520
to approve this request that the os

2781
01:45:09,520 --> 01:45:10,880
server might say do you actually want

2782
01:45:10,880 --> 01:45:12,400
this application to be able to access

2783
01:45:12,400 --> 01:45:14,239
this data

2784
01:45:14,239 --> 01:45:16,320
and if the user says yes the oauth

2785
01:45:16,320 --> 01:45:18,000
server is ready to create the access

2786
01:45:18,000 --> 01:45:18,800
token

2787
01:45:18,800 --> 01:45:20,880
now instead of creating the access token

2788
01:45:20,880 --> 01:45:21,840
and sending it

2789
01:45:21,840 --> 01:45:24,400
back right now we're still in the front

2790
01:45:24,400 --> 01:45:27,440
channel so we're going to actually

2791
01:45:27,440 --> 01:45:29,440
uh we're going to actually send back

2792
01:45:29,440 --> 01:45:30,560
just a

2793
01:45:30,560 --> 01:45:32,719
temporary code a temporary authorization

2794
01:45:32,719 --> 01:45:33,920
code is what it's called

2795
01:45:33,920 --> 01:45:37,199
and this is essentially one time use and

2796
01:45:37,199 --> 01:45:40,639
short lived so this is the second

2797
01:45:40,639 --> 01:45:44,080
uh front channel message this is the

2798
01:45:44,080 --> 01:45:45,920
message that the os server is sending

2799
01:45:45,920 --> 01:45:47,520
back to the app through the user's

2800
01:45:47,520 --> 01:45:48,320
browser

2801
01:45:48,320 --> 01:45:50,400
so this is a temporary authorization

2802
01:45:50,400 --> 01:45:52,800
code now the app can go and exchange

2803
01:45:52,800 --> 01:45:54,800
that authorization code for an access

2804
01:45:54,800 --> 01:45:57,679
token this is a back channel request

2805
01:45:57,679 --> 01:46:00,080
and this is where pixi comes in this is

2806
01:46:00,080 --> 01:46:01,600
where this is where pixi solves this

2807
01:46:01,600 --> 01:46:02,080
problem

2808
01:46:02,080 --> 01:46:06,159
the problem being that when

2809
01:46:06,159 --> 01:46:09,679
the when the os server gets this first

2810
01:46:09,679 --> 01:46:10,560
message

2811
01:46:10,560 --> 01:46:12,080
this is the first time it sees anything

2812
01:46:12,080 --> 01:46:13,199
about this application that the

2813
01:46:13,199 --> 01:46:14,560
application

2814
01:46:14,560 --> 01:46:16,159
made right and it's not getting this

2815
01:46:16,159 --> 01:46:17,199
message from the app it's getting it

2816
01:46:17,199 --> 01:46:18,400
from the user

2817
01:46:18,400 --> 01:46:20,320
the second time the oauth server sees

2818
01:46:20,320 --> 01:46:21,760
the application in this flow

2819
01:46:21,760 --> 01:46:24,000
is the back channel request which it

2820
01:46:24,000 --> 01:46:25,679
which it can actually trust that it is

2821
01:46:25,679 --> 01:46:26,880
that application

2822
01:46:26,880 --> 01:46:28,480
pixie is the thing that links up those

2823
01:46:28,480 --> 01:46:30,000
two parts of the request

2824
01:46:30,000 --> 01:46:32,159
so in order for the app to make that

2825
01:46:32,159 --> 01:46:33,119
request it has to

2826
01:46:33,119 --> 01:46:35,600
it also include the secret to generate

2827
01:46:35,600 --> 01:46:37,040
at the beginning of the flow

2828
01:46:37,040 --> 01:46:38,880
which the os server can then calculate

2829
01:46:38,880 --> 01:46:40,080
the hash of itself

2830
01:46:40,080 --> 01:46:41,520
and compare the two hashes linking up

2831
01:46:41,520 --> 01:46:43,600
the front channel and the back channel

2832
01:46:43,600 --> 01:46:45,520
now we can reply back with the access

2833
01:46:45,520 --> 01:46:46,639
token in

2834
01:46:46,639 --> 01:46:49,199
the back channel and at this point the

2835
01:46:49,199 --> 01:46:50,239
flow is done and

2836
01:46:50,239 --> 01:46:52,159
the app can go and use that access token

2837
01:46:52,159 --> 01:46:53,280
to make

2838
01:46:53,280 --> 01:46:56,320
requests so this is the high level of

2839
01:46:56,320 --> 01:46:57,440
the authorization

2840
01:46:57,440 --> 01:46:59,280
code flow including the pixie bits which

2841
01:46:59,280 --> 01:47:01,040
are the bits highlighted in bold

2842
01:47:01,040 --> 01:47:03,840
pixie being the way that the os server

2843
01:47:03,840 --> 01:47:05,440
can link up the front channel back

2844
01:47:05,440 --> 01:47:07,199
channel

2845
01:47:07,199 --> 01:47:10,080
uh so that the oauth server knows that

2846
01:47:10,080 --> 01:47:11,360
the same thing that's delivering the

2847
01:47:11,360 --> 01:47:12,080
access token

2848
01:47:12,080 --> 01:47:13,920
is the same thing that started the

2849
01:47:13,920 --> 01:47:16,400
exchange

2850
01:47:16,560 --> 01:47:19,920
so that's the that's the flow

2851
01:47:19,920 --> 01:47:21,360
i want to talk about a few more oauth

2852
01:47:21,360 --> 01:47:23,600
concepts as well i'm starting with

2853
01:47:23,600 --> 01:47:25,040
refresh tokens

2854
01:47:25,040 --> 01:47:27,440
so an access token is the thing the api

2855
01:47:27,440 --> 01:47:28,719
is going to use or the application is

2856
01:47:28,719 --> 01:47:30,480
going to make api requests

2857
01:47:30,480 --> 01:47:32,239
that's great that access token might

2858
01:47:32,239 --> 01:47:33,600
expire at some point for

2859
01:47:33,600 --> 01:47:35,520
many many reasons that are basically out

2860
01:47:35,520 --> 01:47:37,119
of control of the application and

2861
01:47:37,119 --> 01:47:39,040
entirely up to the oauth server

2862
01:47:39,040 --> 01:47:41,199
refresh tokens are a way to have the

2863
01:47:41,199 --> 01:47:42,639
user stay logged in

2864
01:47:42,639 --> 01:47:45,040
or have the application work offline

2865
01:47:45,040 --> 01:47:46,880
however you want to phrase it

2866
01:47:46,880 --> 01:47:48,239
essentially those are the business

2867
01:47:48,239 --> 01:47:49,760
between the application and the

2868
01:47:49,760 --> 01:47:51,119
authorization server

2869
01:47:51,119 --> 01:47:52,960
to go and just get new access tokens

2870
01:47:52,960 --> 01:47:55,199
without involving the user again

2871
01:47:55,199 --> 01:47:58,000
so that is just a post request but the

2872
01:47:58,000 --> 01:47:59,600
important thing here is that

2873
01:47:59,600 --> 01:48:01,280
it is something that the application can

2874
01:48:01,280 --> 01:48:03,040
do in the back channel without

2875
01:48:03,040 --> 01:48:06,960
the user's involvement

2876
01:48:07,360 --> 01:48:10,480
so the very common use of this

2877
01:48:10,480 --> 01:48:14,400
is to is to streamline the flow in a

2878
01:48:14,400 --> 01:48:15,520
mobile app because

2879
01:48:15,520 --> 01:48:17,600
the mobile apps the cost the user

2880
01:48:17,600 --> 01:48:19,600
experience cost of doing an oauth flow

2881
01:48:19,600 --> 01:48:20,400
is higher

2882
01:48:20,400 --> 01:48:22,239
because it involves opening up a browser

2883
01:48:22,239 --> 01:48:24,000
within the application

2884
01:48:24,000 --> 01:48:26,960
and because of that it's it's useful to

2885
01:48:26,960 --> 01:48:28,960
use refresh tokens to smooth that over

2886
01:48:28,960 --> 01:48:30,000
so

2887
01:48:30,000 --> 01:48:33,520
you'll see that the um the application

2888
01:48:33,520 --> 01:48:34,960
will start the oauth request the user

2889
01:48:34,960 --> 01:48:37,119
will see a browser prompt log in there

2890
01:48:37,119 --> 01:48:38,480
delivering the access open the refresh

2891
01:48:38,480 --> 01:48:40,480
token to the app it can then store that

2892
01:48:40,480 --> 01:48:41,760
refresh token

2893
01:48:41,760 --> 01:48:44,239
itself so that the next time the app

2894
01:48:44,239 --> 01:48:45,199
launches

2895
01:48:45,199 --> 01:48:46,880
it says oh i've got a refresh token let

2896
01:48:46,880 --> 01:48:49,440
me go and unlock it with biometrics

2897
01:48:49,440 --> 01:48:51,199
go and use that without the user's

2898
01:48:51,199 --> 01:48:53,199
involvement and it'll get back a new

2899
01:48:53,199 --> 01:48:55,119
access token

2900
01:48:55,119 --> 01:48:57,040
so that's a way to sort of streamline

2901
01:48:57,040 --> 01:48:58,560
the user experience on

2902
01:48:58,560 --> 01:49:01,760
devices that uh that where the cost

2903
01:49:01,760 --> 01:49:03,679
of doing that flow that redirect flow is

2904
01:49:03,679 --> 01:49:05,760
higher

2905
01:49:05,760 --> 01:49:07,040
another really important concept in

2906
01:49:07,040 --> 01:49:09,360
oauth is the idea of scope this is

2907
01:49:09,360 --> 01:49:12,320
a way to have an application request

2908
01:49:12,320 --> 01:49:13,520
limited access

2909
01:49:13,520 --> 01:49:16,560
to data so without scope any

2910
01:49:16,560 --> 01:49:18,239
the access token would be able to access

2911
01:49:18,239 --> 01:49:21,760
any api endpoint within that api

2912
01:49:21,760 --> 01:49:23,760
the idea with scope is that we want to

2913
01:49:23,760 --> 01:49:25,760
say actually this application is only

2914
01:49:25,760 --> 01:49:27,199
going to get access to this

2915
01:49:27,199 --> 01:49:29,440
particular data and you might see that

2916
01:49:29,440 --> 01:49:30,960
in these consent screens

2917
01:49:30,960 --> 01:49:33,199
like this one or with fitbit where you

2918
01:49:33,199 --> 01:49:34,080
can see like

2919
01:49:34,080 --> 01:49:37,360
great we can um we can access

2920
01:49:37,360 --> 01:49:39,199
you know your sleep data food data

2921
01:49:39,199 --> 01:49:40,880
whatever or the user might uncheck

2922
01:49:40,880 --> 01:49:43,599
certain scopes the important thing here

2923
01:49:43,599 --> 01:49:45,360
is that this is a request

2924
01:49:45,360 --> 01:49:46,960
by the application the application's

2925
01:49:46,960 --> 01:49:48,800
saying i'm trying to get this data

2926
01:49:48,800 --> 01:49:50,239
and that request may or may not be

2927
01:49:50,239 --> 01:49:52,400
granted it may be it may be confirmed by

2928
01:49:52,400 --> 01:49:53,679
the user and it may also have the

2929
01:49:53,679 --> 01:49:54,880
authorization server might have its own

2930
01:49:54,880 --> 01:49:56,239
policies about

2931
01:49:56,239 --> 01:49:58,080
which applications are allowed to to

2932
01:49:58,080 --> 01:49:59,440
request certain scopes

2933
01:49:59,440 --> 01:50:00,560
things like that it's all sort of the

2934
01:50:00,560 --> 01:50:04,159
business of the authorization server

2935
01:50:04,400 --> 01:50:07,840
okay the uh i want to talk briefly about

2936
01:50:07,840 --> 01:50:10,560
access tokens since this is a

2937
01:50:10,560 --> 01:50:14,320
a pretty big aspect of oauth as well

2938
01:50:14,320 --> 01:50:17,520
access tokens are of course

2939
01:50:17,520 --> 01:50:19,119
what the application uses to get data

2940
01:50:19,119 --> 01:50:20,880
from the api they are

2941
01:50:20,880 --> 01:50:22,880
mostly considered an implementation

2942
01:50:22,880 --> 01:50:24,000
detail within

2943
01:50:24,000 --> 01:50:26,480
a particular deployment of oauth there's

2944
01:50:26,480 --> 01:50:27,199
actually

2945
01:50:27,199 --> 01:50:30,719
not a lot of of um

2946
01:50:30,719 --> 01:50:32,800
you know hard hard-coded rules about

2947
01:50:32,800 --> 01:50:34,239
what access tokens should be

2948
01:50:34,239 --> 01:50:35,920
or how they should work it's a lot of

2949
01:50:35,920 --> 01:50:38,000
decisions that the resource server

2950
01:50:38,000 --> 01:50:39,760
as well as the authorization server can

2951
01:50:39,760 --> 01:50:41,679
make so generally we consider access

2952
01:50:41,679 --> 01:50:43,280
tokens ball into two families reference

2953
01:50:43,280 --> 01:50:45,040
tokens or self-encoded tokens in both

2954
01:50:45,040 --> 01:50:47,040
cases these are considered bearer tokens

2955
01:50:47,040 --> 01:50:47,920
which means

2956
01:50:47,920 --> 01:50:49,440
if you have the string you can use it

2957
01:50:49,440 --> 01:50:51,119
that's all it takes to use it these are

2958
01:50:51,119 --> 01:50:53,440
not um key bound tokens even if there is

2959
01:50:53,440 --> 01:50:54,400
a key that was

2960
01:50:54,400 --> 01:50:57,199
created used to sign the json web token

2961
01:50:57,199 --> 01:50:58,400
once it's handed off to the client the

2962
01:50:58,400 --> 01:50:59,760
client can use it by just presenting the

2963
01:50:59,760 --> 01:51:00,400
string

2964
01:51:00,400 --> 01:51:01,840
the idea with a reference token is that

2965
01:51:01,840 --> 01:51:03,360
the token string does not mean anything

2966
01:51:03,360 --> 01:51:04,560
it is a

2967
01:51:04,560 --> 01:51:07,119
random string of letters and numbers it

2968
01:51:07,119 --> 01:51:08,639
is a pointer to a record

2969
01:51:08,639 --> 01:51:11,119
in some other database data about that

2970
01:51:11,119 --> 01:51:12,480
token would live somewhere else so the

2971
01:51:12,480 --> 01:51:14,719
expiration permissions whatever it is

2972
01:51:14,719 --> 01:51:16,320
might that would live in some other

2973
01:51:16,320 --> 01:51:18,320
database whereas a self-encoded token

2974
01:51:18,320 --> 01:51:19,440
actually takes

2975
01:51:19,440 --> 01:51:21,199
the data that is trying to be stored

2976
01:51:21,199 --> 01:51:23,520
about the token packs in some sort of

2977
01:51:23,520 --> 01:51:26,480
serialized format signed or encrypted or

2978
01:51:26,480 --> 01:51:27,599
both

2979
01:51:27,599 --> 01:51:28,880
all the same that's all a self encrypted

2980
01:51:28,880 --> 01:51:31,119
token there's many different ways to

2981
01:51:31,119 --> 01:51:32,159
implement both of these

2982
01:51:32,159 --> 01:51:35,520
families of tokens the advantage

2983
01:51:35,520 --> 01:51:38,400
that the uh that self-encoded tokens

2984
01:51:38,400 --> 01:51:40,000
give you is that you then have two

2985
01:51:40,000 --> 01:51:40,960
different ways to

2986
01:51:40,960 --> 01:51:42,880
validate them at the api the resource

2987
01:51:42,880 --> 01:51:45,199
server what we call local validation or

2988
01:51:45,199 --> 01:51:46,000
the fast way

2989
01:51:46,000 --> 01:51:48,800
is but because it's a signed token you

2990
01:51:48,800 --> 01:51:49,360
can

2991
01:51:49,360 --> 01:51:51,920
look at the token itself without going

2992
01:51:51,920 --> 01:51:52,719
externally

2993
01:51:52,719 --> 01:51:54,000
over the network and you can decide

2994
01:51:54,000 --> 01:51:56,960
whether it's valid you can also

2995
01:51:56,960 --> 01:51:59,199
use what's called strong uh remote

2996
01:51:59,199 --> 01:52:00,639
introspection or the strong way which

2997
01:52:00,639 --> 01:52:02,719
which is you do go back and call the

2998
01:52:02,719 --> 01:52:04,080
oauth server and say

2999
01:52:04,080 --> 01:52:05,760
hey is this token really still valid and

3000
01:52:05,760 --> 01:52:07,599
that lets you do things like

3001
01:52:07,599 --> 01:52:09,840
um check whether a token has been

3002
01:52:09,840 --> 01:52:11,520
revoked for some reason before it has

3003
01:52:11,520 --> 01:52:12,239
expired

3004
01:52:12,239 --> 01:52:13,840
and these are the different trade-offs

3005
01:52:13,840 --> 01:52:15,040
that you have to make in the different

3006
01:52:15,040 --> 01:52:16,480
token validation methods

3007
01:52:16,480 --> 01:52:18,320
based on whether you care about things

3008
01:52:18,320 --> 01:52:20,560
like early revocation of tokens

3009
01:52:20,560 --> 01:52:24,320
based on the timelines of the timeline

3010
01:52:24,320 --> 01:52:27,599
of the token lifetimes and things like

3011
01:52:27,599 --> 01:52:28,840
that

3012
01:52:28,840 --> 01:52:32,560
so the uh

3013
01:52:32,560 --> 01:52:34,800
the the classic example here is let's

3014
01:52:34,800 --> 01:52:36,800
say your tokens last for eight hours

3015
01:52:36,800 --> 01:52:38,000
the two different ways you validate

3016
01:52:38,000 --> 01:52:39,840
tokens will agree at first until

3017
01:52:39,840 --> 01:52:41,280
something about it changes

3018
01:52:41,280 --> 01:52:43,920
once the token's been issued that a

3019
01:52:43,920 --> 01:52:45,199
self-employed token has been issued

3020
01:52:45,199 --> 01:52:46,480
there's no way to change the token

3021
01:52:46,480 --> 01:52:48,639
itself so you can't revoke it

3022
01:52:48,639 --> 01:52:50,159
so if the user goes and revokes the

3023
01:52:50,159 --> 01:52:51,280
application or the application is

3024
01:52:51,280 --> 01:52:53,599
deleted or something about that

3025
01:52:53,599 --> 01:52:55,280
changes like the policies of the user

3026
01:52:55,280 --> 01:52:57,040
change that isn't reflected in the token

3027
01:52:57,040 --> 01:52:58,400
which means the two different validation

3028
01:52:58,400 --> 01:52:59,040
methods

3029
01:52:59,040 --> 01:53:01,679
disagree until the token expires and

3030
01:53:01,679 --> 01:53:03,040
then you have to decide

3031
01:53:03,040 --> 01:53:06,320
what is your threshold for being okay

3032
01:53:06,320 --> 01:53:07,440
with the fact that these two different

3033
01:53:07,440 --> 01:53:08,320
validation methods

3034
01:53:08,320 --> 01:53:10,639
disagree and this is something that you

3035
01:53:10,639 --> 01:53:12,159
can't really avoid this is not even a

3036
01:53:12,159 --> 01:53:13,599
unique problem to oauth this essentially

3037
01:53:13,599 --> 01:53:14,960
a caching problem

3038
01:53:14,960 --> 01:53:16,400
self-encoded tokens are basically a

3039
01:53:16,400 --> 01:53:18,000
cache of the data

3040
01:53:18,000 --> 01:53:22,320
at the point it was created so

3041
01:53:22,320 --> 01:53:24,719
okay that's what i want to talk about

3042
01:53:24,719 --> 01:53:26,480
about how things work i want to wrap up

3043
01:53:26,480 --> 01:53:27,360
just a brief

3044
01:53:27,360 --> 01:53:29,360
overview of some of the current work

3045
01:53:29,360 --> 01:53:30,480
being done in the group

3046
01:53:30,480 --> 01:53:32,560
and sort of future directions that

3047
01:53:32,560 --> 01:53:33,760
things are heading

3048
01:53:33,760 --> 01:53:37,360
you may have heard some some

3049
01:53:37,360 --> 01:53:40,719
mentions of oauth 2.1 which is

3050
01:53:40,719 --> 01:53:42,800
essentially an effort to consolidate the

3051
01:53:42,800 --> 01:53:45,599
best parts of oauth2 the things that

3052
01:53:45,599 --> 01:53:47,280
generally the industry has agreed are

3053
01:53:47,280 --> 01:53:49,440
the best practices of

3054
01:53:49,440 --> 01:53:52,000
how this stuff should work so if you

3055
01:53:52,000 --> 01:53:52,639
actually look at

3056
01:53:52,639 --> 01:53:54,320
in the in the field there is a generally

3057
01:53:54,320 --> 01:53:55,920
accepted best practice and

3058
01:53:55,920 --> 01:53:57,840
a lot of the optional bits of oauth 2

3059
01:53:57,840 --> 01:53:59,679
aren't being used things like that

3060
01:53:59,679 --> 01:54:02,880
so oauth 2 has grown into a kind of mess

3061
01:54:02,880 --> 01:54:03,280
of

3062
01:54:03,280 --> 01:54:05,440
a bunch of different specs and

3063
01:54:05,440 --> 01:54:07,920
extensions the idea is to roll those all

3064
01:54:07,920 --> 01:54:09,840
up into something that actually

3065
01:54:09,840 --> 01:54:12,239
represents what is being done but in a

3066
01:54:12,239 --> 01:54:13,440
document that is a lot smaller and

3067
01:54:13,440 --> 01:54:14,639
easier to get started with

3068
01:54:14,639 --> 01:54:16,960
so that effort is happening ongoing

3069
01:54:16,960 --> 01:54:18,560
right now

3070
01:54:18,560 --> 01:54:21,360
there's also a profile for access tokens

3071
01:54:21,360 --> 01:54:22,560
because a lot of people do implement

3072
01:54:22,560 --> 01:54:24,320
access tokens as specifically adjacent

3073
01:54:24,320 --> 01:54:25,599
web tokens

3074
01:54:25,599 --> 01:54:28,639
so that work is also uh you know being

3075
01:54:28,639 --> 01:54:30,320
worked on right now where is a

3076
01:54:30,320 --> 01:54:32,320
standardized way to use json web tokens

3077
01:54:32,320 --> 01:54:33,760
as access tokens

3078
01:54:33,760 --> 01:54:35,360
there's a couple of new features being

3079
01:54:35,360 --> 01:54:37,520
added in extensions as well

3080
01:54:37,520 --> 01:54:39,599
uh rich authorization request is a way

3081
01:54:39,599 --> 01:54:41,679
to sort of it's an extension of the idea

3082
01:54:41,679 --> 01:54:43,199
of scope where scope allows you to

3083
01:54:43,199 --> 01:54:43,920
access

3084
01:54:43,920 --> 01:54:47,280
sort of high high level buckets of types

3085
01:54:47,280 --> 01:54:48,239
of data

3086
01:54:48,239 --> 01:54:50,639
this would let you authorize specific

3087
01:54:50,639 --> 01:54:52,639
transactions for specific dollar amounts

3088
01:54:52,639 --> 01:54:53,040
or

3089
01:54:53,040 --> 01:54:54,880
between specific accounts things like

3090
01:54:54,880 --> 01:54:56,480
that

3091
01:54:56,480 --> 01:54:59,199
push authorization request is the idea

3092
01:54:59,199 --> 01:54:59,760
of

3093
01:54:59,760 --> 01:55:01,199
reducing reliance on the front channel

3094
01:55:01,199 --> 01:55:02,400
move more of the flow into the back

3095
01:55:02,400 --> 01:55:03,840
channel

3096
01:55:03,840 --> 01:55:06,320
that way we again can kind of smooth out

3097
01:55:06,320 --> 01:55:08,080
some of the security properties of the

3098
01:55:08,080 --> 01:55:10,239
flow as well

3099
01:55:10,239 --> 01:55:13,199
um there is a lot of use so oauth is

3100
01:55:13,199 --> 01:55:14,560
being used by a lot of other groups as

3101
01:55:14,560 --> 01:55:16,080
well being built on and extended in a

3102
01:55:16,080 --> 01:55:17,520
lot of different ways sometimes

3103
01:55:17,520 --> 01:55:19,920
in again different organizations so i

3104
01:55:19,920 --> 01:55:21,119
just threw a few of them up

3105
01:55:21,119 --> 01:55:23,360
on the screen here and that is where i

3106
01:55:23,360 --> 01:55:25,119
want to end um

3107
01:55:25,119 --> 01:55:26,639
thank you all very much this was a

3108
01:55:26,639 --> 01:55:28,159
whirlwind i hope this was

3109
01:55:28,159 --> 01:55:29,760
hope this was helpful helps give you an

3110
01:55:29,760 --> 01:55:32,719
idea of how we are thinking about things

3111
01:55:32,719 --> 01:55:34,480
yeah thanks a lot aaron that was a

3112
01:55:34,480 --> 01:55:36,719
really enlightening talk i think it's

3113
01:55:36,719 --> 01:55:39,679
real helpful to present it in that way

3114
01:55:39,679 --> 01:55:42,719
for this audience

3115
01:55:44,960 --> 01:55:48,719
do we have any q a or comments so people

3116
01:55:48,719 --> 01:55:49,679
feel free to

3117
01:55:49,679 --> 01:55:54,960
join the queue you have a few minutes

3118
01:55:58,840 --> 01:56:01,840
left

3119
01:56:04,159 --> 01:56:06,320
seeing some comments in the jabber

3120
01:56:06,320 --> 01:56:07,520
thanks that was a good talk

3121
01:56:07,520 --> 01:56:10,639
uh to gaijin go ahead

3122
01:56:11,920 --> 01:56:13,840
aaron thank you aaron for the

3123
01:56:13,840 --> 01:56:15,360
presentation it's i i

3124
01:56:15,360 --> 01:56:16,800
that's one of the clearest presentations

3125
01:56:16,800 --> 01:56:18,480
of oauth i've ever seen so

3126
01:56:18,480 --> 01:56:21,520
uh thanks appreciated um i didn't

3127
01:56:21,520 --> 01:56:22,560
actually understand

3128
01:56:22,560 --> 01:56:26,719
in the first flow that you showed um

3129
01:56:26,719 --> 01:56:29,760
the first front door flow where the app

3130
01:56:29,760 --> 01:56:32,400
is asking the user to get the token how

3131
01:56:32,400 --> 01:56:33,840
the user could confirm

3132
01:56:33,840 --> 01:56:36,400
that the identity of the app that they

3133
01:56:36,400 --> 01:56:38,000
were actually granting access to

3134
01:56:38,000 --> 01:56:39,280
once they're interacting with their

3135
01:56:39,280 --> 01:56:42,239
oauth server that seems like

3136
01:56:42,239 --> 01:56:43,440
i mean there's a whole separate set of

3137
01:56:43,440 --> 01:56:44,960
questions about how does the user

3138
01:56:44,960 --> 01:56:46,719
understand the scope of data that

3139
01:56:46,719 --> 01:56:47,440
they're

3140
01:56:47,440 --> 01:56:49,280
uh granting access to which are maybe

3141
01:56:49,280 --> 01:56:51,440
out of maybe we can't discuss here

3142
01:56:51,440 --> 01:56:52,960
but certainly with the parties that are

3143
01:56:52,960 --> 01:56:54,560
involved it seems critical that you

3144
01:56:54,560 --> 01:56:56,960
understand who you're getting access to

3145
01:56:56,960 --> 01:57:00,800
and if the data passed is merely a

3146
01:57:00,800 --> 01:57:02,480
blob provided by the person who's

3147
01:57:02,480 --> 01:57:04,080
requesting the data it's hard to see how

3148
01:57:04,080 --> 01:57:04,560
that

3149
01:57:04,560 --> 01:57:07,520
ties to their identity yeah i kind of

3150
01:57:07,520 --> 01:57:08,960
glossed over that um

3151
01:57:08,960 --> 01:57:11,440
in the in the flow but it is that

3152
01:57:11,440 --> 01:57:12,400
consent screen

3153
01:57:12,400 --> 01:57:14,239
of the os server prompting the user to

3154
01:57:14,239 --> 01:57:16,480
log in and then that is where they will

3155
01:57:16,480 --> 01:57:19,360
um sometimes see the request described

3156
01:57:19,360 --> 01:57:20,800
on screen like this application is

3157
01:57:20,800 --> 01:57:22,320
trying to access these parts of your

3158
01:57:22,320 --> 01:57:23,119
account

3159
01:57:23,119 --> 01:57:25,360
that's entirely encapsulated at that

3160
01:57:25,360 --> 01:57:26,480
point in the flow

3161
01:57:26,480 --> 01:57:27,760
right but where does the information

3162
01:57:27,760 --> 01:57:29,679
about about uh

3163
01:57:29,679 --> 01:57:31,760
the thing that is requesting come

3164
01:57:31,760 --> 01:57:32,719
through

3165
01:57:32,719 --> 01:57:34,400
because given that so yeah that it's a

3166
01:57:34,400 --> 01:57:35,920
front door flow it's it's

3167
01:57:35,920 --> 01:57:37,840
like uh it's all being passed through

3168
01:57:37,840 --> 01:57:40,000
the user's browser or the user's

3169
01:57:40,000 --> 01:57:42,320
the user agent which doesn't necessarily

3170
01:57:42,320 --> 01:57:44,639
know how to translate that bit

3171
01:57:44,639 --> 01:57:47,520
two parts to that so the the flow is

3172
01:57:47,520 --> 01:57:49,599
started with uh so every application

3173
01:57:49,599 --> 01:57:51,119
has to be registered at the oauth server

3174
01:57:51,119 --> 01:57:52,639
that's generally how it works there's a

3175
01:57:52,639 --> 01:57:54,639
registration step establishing

3176
01:57:54,639 --> 01:57:56,480
an identifier for the application at the

3177
01:57:56,480 --> 01:57:58,159
very least and in some cases

3178
01:57:58,159 --> 01:58:00,159
a password or a client secret so that's

3179
01:58:00,159 --> 01:58:01,599
an identifier

3180
01:58:01,599 --> 01:58:04,239
discussion that happens earlier it's

3181
01:58:04,239 --> 01:58:06,000
usually actually out of band it's like

3182
01:58:06,000 --> 01:58:07,920
the developer goes to the website and

3183
01:58:07,920 --> 01:58:09,679
registers an application

3184
01:58:09,679 --> 01:58:12,800
um there is a way to do it with an api

3185
01:58:12,800 --> 01:58:14,080
as well dynamic client registration

3186
01:58:14,080 --> 01:58:16,000
that's much less common

3187
01:58:16,000 --> 01:58:18,159
more often it's literally the developer

3188
01:58:18,159 --> 01:58:19,040
goes to the website

3189
01:58:19,040 --> 01:58:20,719
signs up as a developer goes and creates

3190
01:58:20,719 --> 01:58:22,159
an application uploads an icon and

3191
01:58:22,159 --> 01:58:23,199
things like that

3192
01:58:23,199 --> 01:58:25,760
that gives it an identifier which it can

3193
01:58:25,760 --> 01:58:26,320
use

3194
01:58:26,320 --> 01:58:28,960
in the flow and then that identifier is

3195
01:58:28,960 --> 01:58:30,400
passed in the first request from the

3196
01:58:30,400 --> 01:58:31,280
application

3197
01:58:31,280 --> 01:58:33,280
which now to get your second point how

3198
01:58:33,280 --> 01:58:35,119
do you know it's really that application

3199
01:58:35,119 --> 01:58:37,199
um if the app has a client secret a

3200
01:58:37,199 --> 01:58:39,119
password that's used

3201
01:58:39,119 --> 01:58:40,960
before the that's required in order to

3202
01:58:40,960 --> 01:58:42,159
actually get the access token

3203
01:58:42,159 --> 01:58:44,639
in the back channel and that's sort of

3204
01:58:44,639 --> 01:58:46,080
the the

3205
01:58:46,080 --> 01:58:47,599
how we can make sure that it really is

3206
01:58:47,599 --> 01:58:49,360
that application doing it

3207
01:58:49,360 --> 01:58:51,760
not all apps can use client secrets some

3208
01:58:51,760 --> 01:58:53,199
apps can't like mobile apps

3209
01:58:53,199 --> 01:58:56,320
and single page apps in which case

3210
01:58:56,320 --> 01:58:58,880
that is kind of a big you know gaping

3211
01:58:58,880 --> 01:58:59,520
hole in

3212
01:58:59,520 --> 01:59:01,199
in this and there isn't really a way

3213
01:59:01,199 --> 01:59:03,199
around it of you don't actually you

3214
01:59:03,199 --> 01:59:05,520
can't actually tell if somebody is

3215
01:59:05,520 --> 01:59:07,119
impersonating a mobile app

3216
01:59:07,119 --> 01:59:10,320
or not and that isn't something that can

3217
01:59:10,320 --> 01:59:11,599
really be fixed on the wire without

3218
01:59:11,599 --> 01:59:13,040
cooperation of for example

3219
01:59:13,040 --> 01:59:16,159
the app stores um but the

3220
01:59:16,159 --> 01:59:18,239
best we can do there is rely on the

3221
01:59:18,239 --> 01:59:20,320
redirect url of like where is the user

3222
01:59:20,320 --> 01:59:21,679
going to be sent back to

3223
01:59:21,679 --> 01:59:24,239
in their browser after after the flow is

3224
01:59:24,239 --> 01:59:26,320
complete and the redirect url acts as a

3225
01:59:26,320 --> 01:59:27,360
form of

3226
01:59:27,360 --> 01:59:31,839
confirming that applications identity

3227
01:59:32,480 --> 01:59:35,679
but if the if the if the client is

3228
01:59:35,679 --> 01:59:36,800
malicious

3229
01:59:36,800 --> 01:59:38,320
they might be happy as long as they get

3230
01:59:38,320 --> 01:59:40,400
the access they might be happy

3231
01:59:40,400 --> 01:59:43,599
to redirect back to the other one right

3232
01:59:43,599 --> 01:59:44,080
or

3233
01:59:44,080 --> 01:59:45,679
or no because they can't because the

3234
01:59:45,679 --> 01:59:47,920
redirection is what confirmed what

3235
01:59:47,920 --> 01:59:48,960
closes the loop

3236
01:59:48,960 --> 01:59:51,280
right yeah the redirection closes the

3237
01:59:51,280 --> 01:59:52,239
loop but there

3238
01:59:52,239 --> 01:59:54,480
yes there is also ways for a malicious

3239
01:59:54,480 --> 01:59:55,760
client to

3240
01:59:55,760 --> 01:59:58,080
cooperate with a user to get an access

3241
01:59:58,080 --> 01:59:59,040
token that

3242
01:59:59,040 --> 02:00:00,480
both people think or the authorization

3243
02:00:00,480 --> 02:00:01,920
server thought was issued to somebody

3244
02:00:01,920 --> 02:00:02,480
else

3245
02:00:02,480 --> 02:00:04,560
and it's there's a lot of edge cases

3246
02:00:04,560 --> 02:00:06,320
here as you can imagine of

3247
02:00:06,320 --> 02:00:08,080
uh different different aspects of this

3248
02:00:08,080 --> 02:00:09,360
and um

3249
02:00:09,360 --> 02:00:10,639
a lot of this is documented in the

3250
02:00:10,639 --> 02:00:12,480
security best current practice spec as

3251
02:00:12,480 --> 02:00:13,360
well of

3252
02:00:13,360 --> 02:00:15,199
here are the things that you can prevent

3253
02:00:15,199 --> 02:00:16,960
here are the things you can't prevent

3254
02:00:16,960 --> 02:00:19,679
um here's ways that we're addressing you

3255
02:00:19,679 --> 02:00:20,800
know you know trying to solve those are

3256
02:00:20,800 --> 02:00:24,320
ways that we know that this is a limit

3257
02:00:24,800 --> 02:00:27,840
okay thanks

3258
02:00:28,080 --> 02:00:31,040
uh thanks again aaron i was a great talk

3259
02:00:31,040 --> 02:00:31,360
uh

3260
02:00:31,360 --> 02:00:34,800
we are formally at time uh roman i guess

3261
02:00:34,800 --> 02:00:36,960
you could bring up the open mic

3262
02:00:36,960 --> 02:00:40,560
slide uh just in case

3263
02:00:40,560 --> 02:00:42,239
there is something that someone wants to

3264
02:00:42,239 --> 02:00:44,239
say but we should

3265
02:00:44,239 --> 02:00:47,760
thank all the speakers for their talks

3266
02:00:47,760 --> 02:00:52,840
and i'm just about ready to close the

3267
02:00:52,840 --> 02:00:54,960
session not going to bring up the slides

3268
02:00:54,960 --> 02:00:56,800
but folks want to open mic it's easier

3269
02:00:56,800 --> 02:00:58,400
than trying to kind of flip

3270
02:00:58,400 --> 02:01:02,480
yeah it's all good

3271
02:01:04,239 --> 02:01:07,598
but nobody shows up to them

3272
02:01:10,320 --> 02:01:12,000
yeah see you in gather town and if folks

3273
02:01:12,000 --> 02:01:13,599
want to see more something different at

3274
02:01:13,599 --> 02:01:15,360
sag to help make sure we have

3275
02:01:15,360 --> 02:01:17,679
the essay across the the itf for second

3276
02:01:17,679 --> 02:01:19,199
issues please do let us know

3277
02:01:19,199 --> 02:01:20,400
and please do let us know if you're

3278
02:01:20,400 --> 02:01:21,360
interested in being a working group

3279
02:01:21,360 --> 02:01:22,320
chair

3280
02:01:22,320 --> 02:01:26,080
thanks much thanks

3281
02:01:31,119 --> 02:01:37,839
bye everyone

3282
02:02:54,080 --> 02:02:56,159
you

