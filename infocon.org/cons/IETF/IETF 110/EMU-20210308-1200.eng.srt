1
00:00:04,880 --> 00:00:07,040
at our scheduled start time

2
00:00:07,040 --> 00:00:10,240
uh welcome to the emu

3
00:00:10,240 --> 00:00:12,719
working group meeting at ietf 110 i'm

4
00:00:12,719 --> 00:00:14,400
joe salloway and

5
00:00:14,400 --> 00:00:17,600
mohit is also here as a co-chair

6
00:00:17,600 --> 00:00:20,880
i want to thank everybody for attending

7
00:00:20,880 --> 00:00:22,800
this meeting in whatever time zone you

8
00:00:22,800 --> 00:00:23,519
happen to be

9
00:00:23,519 --> 00:00:26,640
in first thing we'll do

10
00:00:26,640 --> 00:00:30,320
we'll spend just a few short moments on

11
00:00:30,320 --> 00:00:31,359
the note well

12
00:00:31,359 --> 00:00:34,559
i think most people are probably aware

13
00:00:34,559 --> 00:00:36,719
of it but we'll leave it here so you can

14
00:00:36,719 --> 00:00:40,160
take a look at it to understand the ipr

15
00:00:40,160 --> 00:00:44,079
policies of the ietf

16
00:00:44,079 --> 00:00:46,079
um today we have a reasonably full

17
00:00:46,079 --> 00:00:47,840
agenda but i think we'll be able to get

18
00:00:47,840 --> 00:00:48,399
through

19
00:00:48,399 --> 00:00:52,480
most of it uh during this meeting

20
00:00:54,719 --> 00:00:57,520
so we do have uh some volunteers for

21
00:00:57,520 --> 00:00:58,879
minutes if people could

22
00:00:58,879 --> 00:01:04,000
also monitor the jabber uh

23
00:01:04,400 --> 00:01:07,680
room just in case uh the chairs can't uh

24
00:01:07,680 --> 00:01:09,280
get to it in time and let us know if

25
00:01:09,280 --> 00:01:11,360
somebody has a question that needs to be

26
00:01:11,360 --> 00:01:14,640
put to the mic um blue sheets since

27
00:01:14,640 --> 00:01:16,159
you've signed in

28
00:01:16,159 --> 00:01:18,960
uh through the data tracker everybody

29
00:01:18,960 --> 00:01:20,400
should be

30
00:01:20,400 --> 00:01:21,600
signed in and there shouldn't be any

31
00:01:21,600 --> 00:01:26,560
need to have any additional blue sheet

32
00:01:26,560 --> 00:01:29,600
tracking when you get to the mic please

33
00:01:29,600 --> 00:01:31,439
state your name and always keep it

34
00:01:31,439 --> 00:01:33,600
professional

35
00:01:33,600 --> 00:01:36,400
um so for the agenda today uh we'll

36
00:01:36,400 --> 00:01:37,840
start out with a

37
00:01:37,840 --> 00:01:39,840
little bit about the document status of

38
00:01:39,840 --> 00:01:41,840
our current working group documents

39
00:01:41,840 --> 00:01:45,280
then we'll have a update

40
00:01:45,280 --> 00:01:47,840
from the hackathon from allen the

41
00:01:47,840 --> 00:01:50,720
and then we'll have

42
00:01:51,880 --> 00:01:54,000
iptls 1.3

43
00:01:54,000 --> 00:01:55,759
discussion which has probably been the

44
00:01:55,759 --> 00:01:57,520
most active on the list

45
00:01:57,520 --> 00:01:59,680
another discussion on tls base eat

46
00:01:59,680 --> 00:02:01,040
methods and then

47
00:02:01,040 --> 00:02:04,719
a discussion on rfc 3748 bits

48
00:02:04,719 --> 00:02:06,960
did anybody have any other items they

49
00:02:06,960 --> 00:02:09,840
wanted to discuss

50
00:02:13,920 --> 00:02:17,040
i think roman do i need to do something

51
00:02:17,040 --> 00:02:18,080
here

52
00:02:18,080 --> 00:02:23,840
oops go ahead

53
00:02:24,879 --> 00:02:26,319
yeah if we have a little bit of time at

54
00:02:26,319 --> 00:02:27,599
the end which it looks like we will

55
00:02:27,599 --> 00:02:29,599
could we review the milestones i believe

56
00:02:29,599 --> 00:02:31,440
all of them are in the past so we can

57
00:02:31,440 --> 00:02:32,879
give a better sense to the community

58
00:02:32,879 --> 00:02:37,840
where we are with things

59
00:02:40,400 --> 00:02:43,040
i think that's a good idea i hopefully

60
00:02:43,040 --> 00:02:45,599
will have time

61
00:02:49,120 --> 00:02:52,560
all right um i think

62
00:02:52,560 --> 00:02:57,760
our next uh topic will be uh

63
00:02:58,239 --> 00:03:05,760
update from the hackathon from allen

64
00:03:05,760 --> 00:03:07,440
uh should we go through the document

65
00:03:07,440 --> 00:03:09,920
status oh documentary

66
00:03:09,920 --> 00:03:13,280
thank you good

67
00:03:13,280 --> 00:03:16,080
idea

68
00:03:17,280 --> 00:03:19,360
i think it was just on the next next

69
00:03:19,360 --> 00:03:21,440
slide uh

70
00:03:21,440 --> 00:03:32,799
yeah now i gotta get back to where i was

71
00:03:32,799 --> 00:03:37,360
sorry all right

72
00:03:40,799 --> 00:03:44,080
all right document status so we have

73
00:03:44,080 --> 00:03:46,799
in the rfc editor queue the large uh

74
00:03:46,799 --> 00:03:49,519
using epls large certificates draft

75
00:03:49,519 --> 00:03:52,080
um we have requested publication for eep

76
00:03:52,080 --> 00:03:53,360
noob

77
00:03:53,360 --> 00:03:55,840
um for eep aka prime i believe we're

78
00:03:55,840 --> 00:03:58,239
waiting on some 3gpp coordination do you

79
00:03:58,239 --> 00:03:58,720
have an

80
00:03:58,720 --> 00:04:01,840
update on that mohit

81
00:04:01,920 --> 00:04:06,559
that uh yeah for yuri

82
00:04:07,920 --> 00:04:11,599
yeah maybe i can so so some

83
00:04:11,599 --> 00:04:13,360
discussion has been going on on some

84
00:04:13,360 --> 00:04:14,959
specific issues

85
00:04:14,959 --> 00:04:16,798
if beza is on the call he might actually

86
00:04:16,798 --> 00:04:18,880
be able to give a more detailed

87
00:04:18,880 --> 00:04:21,040
summary if we want to go in the details

88
00:04:21,040 --> 00:04:21,918
but

89
00:04:21,918 --> 00:04:24,800
but the short summary is that discussion

90
00:04:24,800 --> 00:04:26,240
has been ongoing and some things have

91
00:04:26,240 --> 00:04:27,440
been

92
00:04:27,440 --> 00:04:30,880
fixed on their side and our side and

93
00:04:30,880 --> 00:04:33,520
they have also wanted to have a call to

94
00:04:33,520 --> 00:04:34,560
discuss this

95
00:04:34,560 --> 00:04:37,520
on march 17th and we can send some of

96
00:04:37,520 --> 00:04:38,320
the

97
00:04:38,320 --> 00:04:41,280
call parameters to the list after this

98
00:04:41,280 --> 00:04:43,840
call

99
00:04:44,320 --> 00:04:45,919
yeah i think that's that's roughly the

100
00:04:45,919 --> 00:04:48,160
status so hopefully this is going to be

101
00:04:48,160 --> 00:04:50,800
done soon

102
00:04:51,360 --> 00:04:54,320
great thank you

103
00:04:55,040 --> 00:04:58,320
um then the other news is eptls we've

104
00:04:58,320 --> 00:04:59,680
brought that back into the

105
00:04:59,680 --> 00:05:03,199
working group uh to finish uh discussion

106
00:05:03,199 --> 00:05:06,800
and uh finalize uh the remaining issues

107
00:05:06,800 --> 00:05:08,320
in that document

108
00:05:08,320 --> 00:05:10,880
along with that we have uh tls based eep

109
00:05:10,880 --> 00:05:12,160
types

110
00:05:12,160 --> 00:05:15,520
uh that is a ongoing very related

111
00:05:15,520 --> 00:05:16,240
document

112
00:05:16,240 --> 00:05:19,039
that's in the working group um and then

113
00:05:19,039 --> 00:05:19,840
there's also

114
00:05:19,840 --> 00:05:22,400
aka pfs which hopefully will be able to

115
00:05:22,400 --> 00:05:24,160
pick up as some of the other

116
00:05:24,160 --> 00:05:29,039
items complete

117
00:05:29,919 --> 00:05:39,840
any questions or additional comments

118
00:05:42,400 --> 00:05:46,240
all right then let's go to the

119
00:05:46,240 --> 00:05:48,720
implementation report ellen are you on

120
00:05:48,720 --> 00:05:49,440
the

121
00:05:49,440 --> 00:05:53,840
line i thought i saw you

122
00:05:58,880 --> 00:06:04,000
um okay so if we go to the next slide

123
00:06:04,840 --> 00:06:06,000
um

124
00:06:06,000 --> 00:06:09,039
officially speaking the major

125
00:06:09,039 --> 00:06:11,840
implementers are involved that being

126
00:06:11,840 --> 00:06:12,960
said

127
00:06:12,960 --> 00:06:14,800
um there's some caveats i'll get into

128
00:06:14,800 --> 00:06:16,080
later um

129
00:06:16,080 --> 00:06:18,560
testing is based on dash 13 for the

130
00:06:18,560 --> 00:06:20,479
simple reason that that's what the

131
00:06:20,479 --> 00:06:23,280
initial tests were based on

132
00:06:23,280 --> 00:06:26,479
november december

133
00:06:26,960 --> 00:06:29,600
and the desire to make sure that any new

134
00:06:29,600 --> 00:06:30,479
participants

135
00:06:30,479 --> 00:06:34,240
test existing code and we don't have

136
00:06:34,240 --> 00:06:37,600
disagreement about what's done where

137
00:06:37,600 --> 00:06:40,800
um the implementations tested at the end

138
00:06:40,800 --> 00:06:41,680
were client

139
00:06:41,680 --> 00:06:45,120
microsoft and wp supplicant and server

140
00:06:45,120 --> 00:06:48,240
free radius and host ip

141
00:06:48,240 --> 00:06:52,000
so if we go to the next slide

142
00:06:54,639 --> 00:06:59,840
we tested eeptls peep ttls

143
00:06:59,840 --> 00:07:02,960
the short summary is

144
00:07:02,960 --> 00:07:04,639
it should be pretty straightforward to

145
00:07:04,639 --> 00:07:07,120
add tls 1.3 support with minimal code

146
00:07:07,120 --> 00:07:08,400
changes

147
00:07:08,400 --> 00:07:10,319
um presuming that the tls layer is

148
00:07:10,319 --> 00:07:12,080
already abstracted out

149
00:07:12,080 --> 00:07:13,919
so for the free radio side it was no

150
00:07:13,919 --> 00:07:16,400
more than 100 line 200 lines of code

151
00:07:16,400 --> 00:07:18,400
just to tweak some things

152
00:07:18,400 --> 00:07:22,000
the main issue is eep tls is

153
00:07:22,000 --> 00:07:25,440
relatively straightforward peep and ttls

154
00:07:25,440 --> 00:07:28,639
have a lot more issues

155
00:07:29,039 --> 00:07:32,120
it is essentially

156
00:07:32,120 --> 00:07:35,520
impossible to control the open ssl

157
00:07:35,520 --> 00:07:38,400
state machine um you sort of throw

158
00:07:38,400 --> 00:07:39,599
things into it

159
00:07:39,599 --> 00:07:42,840
and stuff happens and you hope for the

160
00:07:42,840 --> 00:07:44,160
best

161
00:07:44,160 --> 00:07:47,360
it's very difficult to say this is what

162
00:07:47,360 --> 00:07:48,960
i want to have happen

163
00:07:48,960 --> 00:07:53,440
now there are some apis which are only

164
00:07:53,440 --> 00:07:55,120
available in openssl

165
00:07:55,120 --> 00:07:58,720
3 which is not yet publicly released

166
00:07:58,720 --> 00:08:01,680
and those apis would help us control the

167
00:08:01,680 --> 00:08:04,639
tls 1.3 stuff a lot more

168
00:08:04,639 --> 00:08:07,680
so things like um

169
00:08:07,680 --> 00:08:09,840
in some cases even though there's

170
00:08:09,840 --> 00:08:11,759
application data ready

171
00:08:11,759 --> 00:08:14,080
for some reason it doesn't come out of

172
00:08:14,080 --> 00:08:15,520
tls

173
00:08:15,520 --> 00:08:18,639
and then these tls handshakes go back

174
00:08:18,639 --> 00:08:20,160
and forth

175
00:08:20,160 --> 00:08:23,919
after the session has been initialized

176
00:08:23,919 --> 00:08:24,160
and

177
00:08:24,160 --> 00:08:25,759
the initialization steps have been

178
00:08:25,759 --> 00:08:28,319
finished but before the application data

179
00:08:28,319 --> 00:08:30,800
comes out and so this confuses

180
00:08:30,800 --> 00:08:32,880
the various state machines which expect

181
00:08:32,880 --> 00:08:33,839
one thing

182
00:08:33,839 --> 00:08:35,679
to lead into the other right because in

183
00:08:35,679 --> 00:08:37,440
tls 1.2

184
00:08:37,440 --> 00:08:41,200
the assumption was that once the

185
00:08:41,200 --> 00:08:44,480
tls finished message comes out that all

186
00:08:44,480 --> 00:08:46,720
the tls negotiation is done

187
00:08:46,720 --> 00:08:50,160
and this is no longer true with tls 1.3

188
00:08:50,160 --> 00:08:51,680
so i either have to update the

189
00:08:51,680 --> 00:08:53,680
implementations to

190
00:08:53,680 --> 00:08:56,959
control tls more

191
00:08:56,959 --> 00:09:00,800
or be more flexible about what's coming

192
00:09:00,800 --> 00:09:06,560
in the packets so if we go to the next

193
00:09:06,839 --> 00:09:08,720
slide

194
00:09:08,720 --> 00:09:11,839
so things like

195
00:09:11,839 --> 00:09:15,279
especially in open ssl a lot of the api

196
00:09:15,279 --> 00:09:17,680
calls are configuration allow this

197
00:09:17,680 --> 00:09:21,120
versus do it now um so you it is

198
00:09:21,120 --> 00:09:24,000
basically impossible in open ssl one

199
00:09:24,000 --> 00:09:27,360
to actually send a new session ticket

200
00:09:27,360 --> 00:09:30,399
when you want to send it you can just

201
00:09:30,399 --> 00:09:30,959
say

202
00:09:30,959 --> 00:09:34,160
allow zero one two three whatever and

203
00:09:34,160 --> 00:09:35,279
open ssl

204
00:09:35,279 --> 00:09:38,560
at some point perhaps when it decides

205
00:09:38,560 --> 00:09:42,080
we'll send those session tickets um so

206
00:09:42,080 --> 00:09:46,880
as a result um tls 1.3

207
00:09:46,880 --> 00:09:49,519
can't really be deployed with openssl 1

208
00:09:49,519 --> 00:09:50,399
right now

209
00:09:50,399 --> 00:09:52,160
unless we do a fair amount more

210
00:09:52,160 --> 00:09:54,399
interoperability testing and tweaking

211
00:09:54,399 --> 00:09:57,440
of the various apis

212
00:09:57,440 --> 00:10:00,720
it might not be possible with openssl

213
00:10:00,720 --> 00:10:04,160
1. we still have to go figure that in

214
00:10:04,160 --> 00:10:07,200
so interoperability mostly works

215
00:10:07,200 --> 00:10:09,680
but there are corner cases which are

216
00:10:09,680 --> 00:10:11,839
unpleasant and still have to be

217
00:10:11,839 --> 00:10:14,480
worked out

218
00:10:15,519 --> 00:10:18,560
next slide yeah

219
00:10:18,560 --> 00:10:22,320
um so

220
00:10:22,320 --> 00:10:24,959
for peep and ttls we see these session

221
00:10:24,959 --> 00:10:27,040
tickets coming from the server all alone

222
00:10:27,040 --> 00:10:27,680
in a packet

223
00:10:27,680 --> 00:10:30,160
after the tls finished before the

224
00:10:30,160 --> 00:10:32,480
application data

225
00:10:32,480 --> 00:10:35,600
and so the hope is to fix that my

226
00:10:35,600 --> 00:10:37,839
personal preference is

227
00:10:37,839 --> 00:10:41,279
i don't want to see the clients updated

228
00:10:41,279 --> 00:10:44,240
to allow this kind of behavior because

229
00:10:44,240 --> 00:10:45,600
it seems

230
00:10:45,600 --> 00:10:48,160
unfriendly like if application data is

231
00:10:48,160 --> 00:10:49,519
ready just

232
00:10:49,519 --> 00:10:52,560
send the application data

233
00:10:52,560 --> 00:10:55,440
but as i was saying earlier it's not

234
00:10:55,440 --> 00:10:58,839
clear that this is possible with openssl

235
00:10:58,839 --> 00:11:03,440
one so we might have to

236
00:11:03,440 --> 00:11:06,560
work on that description a bit in in the

237
00:11:06,560 --> 00:11:08,720
standards

238
00:11:08,720 --> 00:11:15,839
um next slide

239
00:11:15,839 --> 00:11:18,720
yeah the implementations currently will

240
00:11:18,720 --> 00:11:19,519
send

241
00:11:19,519 --> 00:11:23,600
and store one session ticket um it's not

242
00:11:23,600 --> 00:11:26,880
clear whether or not more than one is

243
00:11:26,880 --> 00:11:29,440
necessary or why

244
00:11:29,440 --> 00:11:33,600
and then in terms of other implementers

245
00:11:34,000 --> 00:11:36,399
i've been in touch with the apple team

246
00:11:36,399 --> 00:11:37,760
both at the

247
00:11:37,760 --> 00:11:39,839
higher layer network architecture and

248
00:11:39,839 --> 00:11:42,000
the implementation team

249
00:11:42,000 --> 00:11:45,279
um zero feedback from them

250
00:11:45,279 --> 00:11:47,360
cisco's looking at it in more detail in

251
00:11:47,360 --> 00:11:49,920
the coming weeks

252
00:11:49,920 --> 00:11:53,120
and should have more feedback so the

253
00:11:53,120 --> 00:11:57,279
the hope is before we get this published

254
00:11:57,279 --> 00:12:00,560
that more than a couple of

255
00:12:00,560 --> 00:12:04,160
implementers um look at this and sign

256
00:12:04,160 --> 00:12:05,519
off on it

257
00:12:05,519 --> 00:12:08,480
i'm not sure what tls library apple's

258
00:12:08,480 --> 00:12:08,959
using

259
00:12:08,959 --> 00:12:10,959
historically it was open ssl i think

260
00:12:10,959 --> 00:12:12,800
they swapped to their own one

261
00:12:12,800 --> 00:12:15,360
so that may come with more

262
00:12:15,360 --> 00:12:19,279
implementation issues as with cisco

263
00:12:19,279 --> 00:12:24,720
uh next slide

264
00:12:24,720 --> 00:12:27,440
so we tested both the close notify and

265
00:12:27,440 --> 00:12:28,800
one application

266
00:12:28,800 --> 00:12:31,600
octet data or one octane application

267
00:12:31,600 --> 00:12:32,480
data

268
00:12:32,480 --> 00:12:34,480
um so these are client and server

269
00:12:34,480 --> 00:12:36,639
configurable flags

270
00:12:36,639 --> 00:12:40,240
the application data is preferred

271
00:12:40,240 --> 00:12:43,279
um it generally seems to be

272
00:12:43,279 --> 00:12:46,480
not just easier to implement as

273
00:12:46,480 --> 00:12:50,320
noted here but it seems to fit the

274
00:12:50,320 --> 00:12:53,519
the state machine model better right

275
00:12:53,519 --> 00:12:57,040
overloading tls signals to mean

276
00:12:57,040 --> 00:13:01,440
eep state seems a little

277
00:13:01,440 --> 00:13:05,200
imperfect i guess and the feedback from

278
00:13:05,200 --> 00:13:08,240
the tls working group was that

279
00:13:08,240 --> 00:13:12,320
using the application data to signify

280
00:13:12,320 --> 00:13:16,720
tls state changes was also wrong

281
00:13:16,720 --> 00:13:18,160
but if we're instead using the

282
00:13:18,160 --> 00:13:20,240
application data to signal

283
00:13:20,240 --> 00:13:22,720
beep state that seems more in line with

284
00:13:22,720 --> 00:13:25,200
everyone's concerns

285
00:13:25,200 --> 00:13:29,120
so the key exporters are still dash 13

286
00:13:29,120 --> 00:13:30,959
nobody really cares what those are

287
00:13:30,959 --> 00:13:33,440
whether they're dash 13-14 or something

288
00:13:33,440 --> 00:13:34,480
else

289
00:13:34,480 --> 00:13:38,800
it's a small amount of code

290
00:13:39,519 --> 00:13:44,639
but as noted here for the close notify

291
00:13:44,639 --> 00:13:47,040
it seems difficult to convince the tls

292
00:13:47,040 --> 00:13:50,800
layer to send this closed notify

293
00:13:50,800 --> 00:13:53,440
and so there's also some spelunking to

294
00:13:53,440 --> 00:13:56,240
do in tls application interaction

295
00:13:56,240 --> 00:13:59,920
for peep and ttls

296
00:13:59,920 --> 00:14:03,839
so next slide

297
00:14:04,959 --> 00:14:07,760
i think that's it is that the last slide

298
00:14:07,760 --> 00:14:08,480
yeah

299
00:14:08,480 --> 00:14:11,760
so in in short it it mostly

300
00:14:11,760 --> 00:14:15,199
sort of works um

301
00:14:15,199 --> 00:14:18,240
i i i don't think anyone's confident

302
00:14:18,240 --> 00:14:21,760
enough in anything other than tls

303
00:14:21,760 --> 00:14:24,959
to say that it's it's production ready

304
00:14:24,959 --> 00:14:28,160
so eeptls with the application data

305
00:14:28,160 --> 00:14:31,120
um seems to be pretty robust on a

306
00:14:31,120 --> 00:14:32,000
similar note

307
00:14:32,000 --> 00:14:34,800
peat and ttls at least for resumption

308
00:14:34,800 --> 00:14:36,160
are robust

309
00:14:36,160 --> 00:14:38,720
but peep and ttls and other methods are

310
00:14:38,720 --> 00:14:40,720
a little more

311
00:14:40,720 --> 00:14:44,560
um up in the air i guess in terms of

312
00:14:44,560 --> 00:14:47,518
production status

313
00:14:52,399 --> 00:14:55,519
thanks alan

314
00:14:55,680 --> 00:14:58,880
so maybe i can ask uh

315
00:14:58,880 --> 00:15:01,360
so some questions so thanks first for

316
00:15:01,360 --> 00:15:02,079
this

317
00:15:02,079 --> 00:15:05,120
excellent summary um

318
00:15:05,120 --> 00:15:06,800
and some of these things we'll probably

319
00:15:06,800 --> 00:15:08,240
discuss again when john

320
00:15:08,240 --> 00:15:11,920
john is going through the tls 1.3

321
00:15:11,920 --> 00:15:13,199
updates

322
00:15:13,199 --> 00:15:16,000
so one thing i guess as a working group

323
00:15:16,000 --> 00:15:17,440
we need to

324
00:15:17,440 --> 00:15:20,480
i guess consider our answer is how much

325
00:15:20,480 --> 00:15:22,480
do we want to tie up

326
00:15:22,480 --> 00:15:25,600
to open ssl because i think that is

327
00:15:25,600 --> 00:15:27,839
definitely the predominant library used

328
00:15:27,839 --> 00:15:28,880
by most

329
00:15:28,880 --> 00:15:32,720
implementations out there but

330
00:15:32,720 --> 00:15:36,720
at least in some cases openssl provides

331
00:15:36,720 --> 00:15:38,800
features which other libraries currently

332
00:15:38,800 --> 00:15:40,560
don't and i'm not even sure if they are

333
00:15:40,560 --> 00:15:41,759
planning to

334
00:15:41,759 --> 00:15:44,880
add them in the future uh

335
00:15:44,880 --> 00:15:47,040
and i know like wps applicant for

336
00:15:47,040 --> 00:15:47,920
example

337
00:15:47,920 --> 00:15:52,560
provides some way of using wolf ssl ins

338
00:15:52,560 --> 00:15:55,600
instead of open ssl obviously

339
00:15:55,600 --> 00:15:58,160
it doesn't have all the features so for

340
00:15:58,160 --> 00:16:00,240
example on this

341
00:16:00,240 --> 00:16:03,839
number of session tickets uh one worry i

342
00:16:03,839 --> 00:16:04,720
have is

343
00:16:04,720 --> 00:16:07,279
i i actually agree with you that in most

344
00:16:07,279 --> 00:16:09,600
cases just issuing one ticket makes

345
00:16:09,600 --> 00:16:11,680
sense uh it's more like for the web

346
00:16:11,680 --> 00:16:13,360
scenario where you'd

347
00:16:13,360 --> 00:16:17,040
want to issue more tickets but it's it's

348
00:16:17,040 --> 00:16:18,959
something that i'm afraid some libraries

349
00:16:18,959 --> 00:16:21,199
don't even allow so at least

350
00:16:21,199 --> 00:16:23,759
on the github issue that we are

351
00:16:23,759 --> 00:16:27,759
discussing in iftls which is issue 48

352
00:16:27,759 --> 00:16:30,240
i posted a link to boring ssl for

353
00:16:30,240 --> 00:16:32,240
example where the library has

354
00:16:32,240 --> 00:16:35,600
hard-coded two tickets uh

355
00:16:35,600 --> 00:16:37,360
obviously you could change that to one

356
00:16:37,360 --> 00:16:39,360
and recompile the library

357
00:16:39,360 --> 00:16:42,399
but it takes some effort

358
00:16:42,399 --> 00:16:45,680
so and and we can come back to the exact

359
00:16:45,680 --> 00:16:49,279
uh exact wording but maybe something

360
00:16:49,279 --> 00:16:50,399
along the lines of

361
00:16:50,399 --> 00:16:54,560
should uh issue one session ticket

362
00:16:54,560 --> 00:16:57,600
or and and not going with must might

363
00:16:57,600 --> 00:16:58,160
make

364
00:16:58,160 --> 00:16:59,680
sense i don't know what's your opinion

365
00:16:59,680 --> 00:17:02,079
on that

366
00:17:02,160 --> 00:17:05,599
um sure i mean you know in the principle

367
00:17:05,599 --> 00:17:08,319
of um be conservative in what you send

368
00:17:08,319 --> 00:17:09,359
and and

369
00:17:09,359 --> 00:17:12,400
liberal in what you expect um

370
00:17:12,400 --> 00:17:15,520
it really is a hard question to

371
00:17:15,520 --> 00:17:17,919
figure out exactly where that boundary

372
00:17:17,919 --> 00:17:20,480
is between

373
00:17:20,480 --> 00:17:23,599
implementation support and theoretical

374
00:17:23,599 --> 00:17:25,439
behavior

375
00:17:25,439 --> 00:17:28,799
practically speaking openssl 3 won't be

376
00:17:28,799 --> 00:17:29,840
released for

377
00:17:29,840 --> 00:17:34,880
a while even when it is released

378
00:17:34,880 --> 00:17:38,000
i don't expect many of the

379
00:17:38,000 --> 00:17:40,320
open source operating systems to upgrade

380
00:17:40,320 --> 00:17:41,280
to it

381
00:17:41,280 --> 00:17:44,559
because it has api changes it's mostly

382
00:17:44,559 --> 00:17:45,600
compatible

383
00:17:45,600 --> 00:17:48,960
but it has api changes um

384
00:17:48,960 --> 00:17:50,960
and require requires additional

385
00:17:50,960 --> 00:17:52,320
application work so

386
00:17:52,320 --> 00:17:54,880
realistically speaking we're stuck with

387
00:17:54,880 --> 00:17:55,840
openssl

388
00:17:55,840 --> 00:17:59,440
one for the foreseeable future

389
00:17:59,440 --> 00:18:02,799
um if we can get everything working with

390
00:18:02,799 --> 00:18:05,120
openssl one that's great

391
00:18:05,120 --> 00:18:07,600
if not we're gonna have to add note

392
00:18:07,600 --> 00:18:08,240
saying

393
00:18:08,240 --> 00:18:11,919
by the way some libraries are broken and

394
00:18:11,919 --> 00:18:15,840
you just have to put up with it

395
00:18:21,200 --> 00:18:24,480
yeah i was thinking about the session

396
00:18:24,480 --> 00:18:25,440
tickers i think

397
00:18:25,440 --> 00:18:28,080
one reason why you would like to send

398
00:18:28,080 --> 00:18:29,600
several session tickets in

399
00:18:29,600 --> 00:18:32,960
epls would be to remove

400
00:18:32,960 --> 00:18:36,559
one round trip during resumption

401
00:18:36,559 --> 00:18:38,720
you could send several in the initial

402
00:18:38,720 --> 00:18:40,080
handshake and then

403
00:18:40,080 --> 00:18:43,919
skip sending tickets in the

404
00:18:43,919 --> 00:18:46,640
resumption

405
00:18:47,120 --> 00:18:49,760
not saying that you must do that but i

406
00:18:49,760 --> 00:18:50,640
think it

407
00:18:50,640 --> 00:18:56,240
might be good to allow the flexibility

408
00:18:56,240 --> 00:18:57,600
sure i mean it's one of these things

409
00:18:57,600 --> 00:18:59,440
what whatever works um

410
00:18:59,440 --> 00:19:02,480
the other question is

411
00:19:02,480 --> 00:19:05,679
um and this is more policy but is

412
00:19:05,679 --> 00:19:07,120
related

413
00:19:07,120 --> 00:19:10,720
what do you do about resumption across

414
00:19:10,720 --> 00:19:11,679
different media

415
00:19:11,679 --> 00:19:15,039
so if you have um

416
00:19:15,039 --> 00:19:19,679
wi-fi and wired both configured for eep

417
00:19:19,679 --> 00:19:22,160
should you be allowed to resume across

418
00:19:22,160 --> 00:19:22,960
that should be

419
00:19:22,960 --> 00:19:24,559
you'd be allowed to use the same session

420
00:19:24,559 --> 00:19:26,320
ticket um

421
00:19:26,320 --> 00:19:27,520
[Music]

422
00:19:27,520 --> 00:19:30,400
everything including 5216 and everything

423
00:19:30,400 --> 00:19:31,600
else in eep

424
00:19:31,600 --> 00:19:34,720
is is completely silent on this topic

425
00:19:34,720 --> 00:19:36,720
um and that is related to the number of

426
00:19:36,720 --> 00:19:38,400
session tickets if you

427
00:19:38,400 --> 00:19:41,200
do wi-fi and then presume that you will

428
00:19:41,200 --> 00:19:42,720
be resuming on wi-fi

429
00:19:42,720 --> 00:19:45,440
and perhaps also on ethernet there you

430
00:19:45,440 --> 00:19:53,840
may want two session tickets

431
00:19:54,480 --> 00:19:58,880
so i guess maybe the

432
00:19:58,880 --> 00:20:02,000
summary here is that we need to like

433
00:20:02,000 --> 00:20:04,480
say that in most cases one ticket is

434
00:20:04,480 --> 00:20:05,200
enough but

435
00:20:05,200 --> 00:20:06,960
there might be cases where you might

436
00:20:06,960 --> 00:20:09,600
send more than one session ticket

437
00:20:09,600 --> 00:20:11,280
whether it's to save the round trip

438
00:20:11,280 --> 00:20:13,440
during resumption or because of

439
00:20:13,440 --> 00:20:14,880
limitations of

440
00:20:14,880 --> 00:20:18,000
apis in some tls libraries

441
00:20:18,000 --> 00:20:21,360
uh and and then then you need to make

442
00:20:21,360 --> 00:20:23,280
appropriate provisions on the client

443
00:20:23,280 --> 00:20:26,240
side either either to ignore

444
00:20:26,240 --> 00:20:28,320
the extra that you get or then have a

445
00:20:28,320 --> 00:20:29,840
database where you can store

446
00:20:29,840 --> 00:20:33,039
several and save uh during

447
00:20:33,039 --> 00:20:35,919
resumption what would that make sure

448
00:20:35,919 --> 00:20:36,799
sure

449
00:20:36,799 --> 00:20:40,720
yeah and the the related issue

450
00:20:40,720 --> 00:20:42,640
is you know because the application is

451
00:20:42,640 --> 00:20:44,080
not really in control of when those

452
00:20:44,080 --> 00:20:46,080
session tickets get sent

453
00:20:46,080 --> 00:20:48,640
um there may be early session tickets

454
00:20:48,640 --> 00:20:49,120
sent

455
00:20:49,120 --> 00:20:51,919
before the tls finished which are then

456
00:20:51,919 --> 00:20:53,600
not usable

457
00:20:53,600 --> 00:20:56,640
and they're only implicitly not usable

458
00:20:56,640 --> 00:20:59,600
there's no explicit hey by the way the

459
00:20:59,600 --> 00:21:02,000
session ticket i sent you doesn't work

460
00:21:02,000 --> 00:21:04,320
so now you have to add more code to the

461
00:21:04,320 --> 00:21:05,280
client side

462
00:21:05,280 --> 00:21:08,480
saying oh i got a session ticket before

463
00:21:08,480 --> 00:21:10,559
the tls finished

464
00:21:10,559 --> 00:21:12,480
therefore i have to throw it away and

465
00:21:12,480 --> 00:21:14,080
only use a session ticket which came

466
00:21:14,080 --> 00:21:15,120
after that

467
00:21:15,120 --> 00:21:17,120
and it's not even clear that the client

468
00:21:17,120 --> 00:21:19,840
gets notified of this right

469
00:21:19,840 --> 00:21:22,640
because that is an ordering which is in

470
00:21:22,640 --> 00:21:24,159
the tls stream

471
00:21:24,159 --> 00:21:27,520
but not necessarily available via the

472
00:21:27,520 --> 00:21:28,240
tls

473
00:21:28,240 --> 00:21:31,840
api to the client

474
00:21:32,400 --> 00:21:35,840
i think that

475
00:21:35,840 --> 00:21:38,320
session tickets and with the finish can

476
00:21:38,320 --> 00:21:40,480
be

477
00:21:40,960 --> 00:21:45,679
valid i don't see a strict reason why

478
00:21:45,679 --> 00:21:48,400
i know i wrongly said that such tickets

479
00:21:48,400 --> 00:21:49,120
was

480
00:21:49,120 --> 00:21:51,840
not valid before on the list but that i

481
00:21:51,840 --> 00:21:52,720
think is

482
00:21:52,720 --> 00:21:56,720
wrong i think there's no direct

483
00:21:56,720 --> 00:21:59,120
reason why such tickets would be invalid

484
00:21:59,120 --> 00:22:01,520
anymore

485
00:22:02,480 --> 00:22:04,640
okay

486
00:22:08,960 --> 00:22:12,080
yeah the the main thing for me is i'm

487
00:22:12,080 --> 00:22:15,280
not a tls one three expert and

488
00:22:15,280 --> 00:22:18,480
eight four four six seems to be less

489
00:22:18,480 --> 00:22:19,360
than clear

490
00:22:19,360 --> 00:22:22,480
as to um

491
00:22:22,480 --> 00:22:25,360
when those session tickets come out um

492
00:22:25,360 --> 00:22:27,200
after the tls finished you know the

493
00:22:27,200 --> 00:22:29,679
session tickets do depend on that

494
00:22:29,679 --> 00:22:33,360
um but are there earlier ones

495
00:22:33,360 --> 00:22:36,320
possibly i don't know but this is

496
00:22:36,320 --> 00:22:37,919
something you know before we put it into

497
00:22:37,919 --> 00:22:39,600
production

498
00:22:39,600 --> 00:22:41,679
we need a definitive answer from

499
00:22:41,679 --> 00:22:42,640
somewhere

500
00:22:42,640 --> 00:22:45,840
either this state will not happen

501
00:22:45,840 --> 00:22:49,760
or um you have to be aware of this state

502
00:22:49,760 --> 00:22:50,400
and work

503
00:22:50,400 --> 00:22:55,840
around it on on the client side

504
00:22:57,200 --> 00:23:01,280
okay george george

505
00:23:02,080 --> 00:23:05,600
hi i'm the implementer from microsoft

506
00:23:05,600 --> 00:23:08,720
i think um the

507
00:23:08,720 --> 00:23:10,559
the main issue that alan is speaking

508
00:23:10,559 --> 00:23:11,919
about with

509
00:23:11,919 --> 00:23:15,120
early session tickets is

510
00:23:15,120 --> 00:23:17,919
mainly before the client certificate is

511
00:23:17,919 --> 00:23:19,840
validated by the server so

512
00:23:19,840 --> 00:23:22,000
any session tickets sent before that are

513
00:23:22,000 --> 00:23:23,120
valid

514
00:23:23,120 --> 00:23:26,960
in tls but you would not want to

515
00:23:26,960 --> 00:23:29,039
actually accept those

516
00:23:29,039 --> 00:23:32,240
if the eep negotiation is failing

517
00:23:32,240 --> 00:23:34,080
because the client certificate is

518
00:23:34,080 --> 00:23:36,080
rejected and so

519
00:23:36,080 --> 00:23:39,600
both clients and servers need to have

520
00:23:39,600 --> 00:23:43,918
some awareness that that can happen

521
00:23:44,480 --> 00:23:47,200
yeah and this was a source of issues in

522
00:23:47,200 --> 00:23:49,520
the past

523
00:23:49,520 --> 00:23:51,760
is one of these no i can't help but feel

524
00:23:51,760 --> 00:23:53,679
at least partially responsible for the

525
00:23:53,679 --> 00:23:55,039
software i wrote

526
00:23:55,039 --> 00:23:57,360
where openssl would cache these session

527
00:23:57,360 --> 00:23:59,360
tickets by default

528
00:23:59,360 --> 00:24:02,320
um send them out whenever and then it

529
00:24:02,320 --> 00:24:04,799
was possible using eeptls

530
00:24:04,799 --> 00:24:08,240
or peep for the client to

531
00:24:08,240 --> 00:24:11,200
start the tls session not send the

532
00:24:11,200 --> 00:24:12,480
password

533
00:24:12,480 --> 00:24:17,279
get the session ticket hang up and then

534
00:24:17,279 --> 00:24:19,760
resume that session because of that

535
00:24:19,760 --> 00:24:22,640
internal tls cache in openssl

536
00:24:22,640 --> 00:24:25,120
so as an application using openssl we

537
00:24:25,120 --> 00:24:27,279
have to jump through all kinds of hoops

538
00:24:27,279 --> 00:24:31,279
to say oh no no openssl don't do that

539
00:24:31,279 --> 00:24:32,799
and then there's all kinds of ordering

540
00:24:32,799 --> 00:24:34,480
issues of

541
00:24:34,480 --> 00:24:36,640
you know openssl wants to do something

542
00:24:36,640 --> 00:24:38,720
and we have to catch it and stop it

543
00:24:38,720 --> 00:24:41,840
and cash in our internal cash for later

544
00:24:41,840 --> 00:24:47,840
so yeah it's it is definitely an issue

545
00:24:48,080 --> 00:24:50,880
um i just wanted to check so we have

546
00:24:50,880 --> 00:24:51,440
seen

547
00:24:51,440 --> 00:24:54,000
implementation send session tickets

548
00:24:54,000 --> 00:24:55,039
early

549
00:24:55,039 --> 00:25:01,840
with the server finished

550
00:25:03,039 --> 00:25:07,840
is that something we've seen ellen or

551
00:25:07,919 --> 00:25:10,720
other implementations i i haven't seen

552
00:25:10,720 --> 00:25:13,120
it i'll i'll let george speak i don't

553
00:25:13,120 --> 00:25:15,760
think he's seen it either but it does

554
00:25:15,760 --> 00:25:16,640
seem to be

555
00:25:16,640 --> 00:25:19,200
at least in our our interop testing it

556
00:25:19,200 --> 00:25:21,039
does seem to be allowed

557
00:25:21,039 --> 00:25:24,080
and the um open ssl code is

558
00:25:24,080 --> 00:25:27,600
not at all clear so what openssl does

559
00:25:27,600 --> 00:25:29,279
is something that i tend to run away

560
00:25:29,279 --> 00:25:31,440
from

561
00:25:32,320 --> 00:25:35,520
george or

562
00:25:35,520 --> 00:25:38,159
george do you prefer jorge or george i

563
00:25:38,159 --> 00:25:39,919
prefer jorge but either is fine thank

564
00:25:39,919 --> 00:25:40,960
you

565
00:25:40,960 --> 00:25:44,159
um i don't think we

566
00:25:44,159 --> 00:25:47,679
we saw it with eptls but it was

567
00:25:47,679 --> 00:25:49,919
this scenario was something we we did

568
00:25:49,919 --> 00:25:53,440
see in the peep and ttls testing so

569
00:25:53,440 --> 00:25:56,559
um we had difficulty as alan was

570
00:25:56,559 --> 00:25:58,159
mentioning controlling open

571
00:25:58,159 --> 00:26:02,080
ssl's behavior uh long before peep

572
00:26:02,080 --> 00:26:04,880
was finished openness of wanting to send

573
00:26:04,880 --> 00:26:06,960
session tickets and so we were fighting

574
00:26:06,960 --> 00:26:08,159
with it too

575
00:26:08,159 --> 00:26:09,919
to prevent it from doing that or try to

576
00:26:09,919 --> 00:26:11,360
prevent it from doing that i don't think

577
00:26:11,360 --> 00:26:15,039
we saw it with with the tls

578
00:26:15,600 --> 00:26:18,480
pls was pls is rather a lot simpler and

579
00:26:18,480 --> 00:26:19,679
straightforward

580
00:26:19,679 --> 00:26:21,520
um and this is you know to reference

581
00:26:21,520 --> 00:26:23,600
rory's comments about fighting with with

582
00:26:23,600 --> 00:26:24,960
opens to sell

583
00:26:24,960 --> 00:26:27,360
um yeah it's impossible to say please

584
00:26:27,360 --> 00:26:29,200
send a session ticket now

585
00:26:29,200 --> 00:26:31,440
um you can either send zero tickets one

586
00:26:31,440 --> 00:26:33,039
tickets two three four

587
00:26:33,039 --> 00:26:35,440
but you have absolutely no control over

588
00:26:35,440 --> 00:26:36,640
when they're sent

589
00:26:36,640 --> 00:26:39,520
and you would hope that if you said hey

590
00:26:39,520 --> 00:26:41,919
please don't send any session tickets

591
00:26:41,919 --> 00:26:44,640
oh now the session is established please

592
00:26:44,640 --> 00:26:45,600
send one

593
00:26:45,600 --> 00:26:48,320
that somewhere in the open ssl state

594
00:26:48,320 --> 00:26:49,279
machine

595
00:26:49,279 --> 00:26:51,440
but realize that i could send them that

596
00:26:51,440 --> 00:26:55,279
does not appear to be the case

597
00:26:55,360 --> 00:26:58,640
so there were patches from ben

598
00:26:58,640 --> 00:27:01,840
for open ssl 3 where an application

599
00:27:01,840 --> 00:27:05,360
could say send it now

600
00:27:05,360 --> 00:27:07,279
but as i was saying earlier that is not

601
00:27:07,279 --> 00:27:09,200
in open ssl one

602
00:27:09,200 --> 00:27:11,200
which is effectively what we have to

603
00:27:11,200 --> 00:27:12,400
live with for the first

604
00:27:12,400 --> 00:27:15,120
for the foreseeable future um and to

605
00:27:15,120 --> 00:27:16,720
address john's commentary

606
00:27:16,720 --> 00:27:19,279
sorry mo he's coming to think about host

607
00:27:19,279 --> 00:27:21,440
ap yeah they have three or four

608
00:27:21,440 --> 00:27:24,960
tls implementations open ssl wolf ssl

609
00:27:24,960 --> 00:27:26,720
they have their own internal tls

610
00:27:26,720 --> 00:27:28,240
implementation

611
00:27:28,240 --> 00:27:30,559
but the functionality there is

612
00:27:30,559 --> 00:27:31,600
relatively

613
00:27:31,600 --> 00:27:34,559
limited um so again it's one of these

614
00:27:34,559 --> 00:27:35,520
we're not sure

615
00:27:35,520 --> 00:27:38,960
that the requirements we would like

616
00:27:38,960 --> 00:27:42,240
um are possible to implement without

617
00:27:42,240 --> 00:27:44,799
substantial changes

618
00:27:44,799 --> 00:27:49,840
okay watson

619
00:27:55,120 --> 00:27:57,200
oh we still we don't uh have your audio

620
00:27:57,200 --> 00:27:59,520
yet

621
00:28:00,000 --> 00:28:02,480
hello uh watson lad cloudflare all right

622
00:28:02,480 --> 00:28:03,919
it looks like it went through

623
00:28:03,919 --> 00:28:07,039
great um i just wanna comment if you are

624
00:28:07,039 --> 00:28:09,840
building around openssl specifically and

625
00:28:09,840 --> 00:28:11,600
changing your standard modified

626
00:28:11,600 --> 00:28:15,120
please don't because what's happening

627
00:28:15,120 --> 00:28:18,320
here is the terrible design of openssl

628
00:28:18,320 --> 00:28:20,559
is influencing these standard choices

629
00:28:20,559 --> 00:28:21,360
and ends up

630
00:28:21,360 --> 00:28:24,080
restricting what tls can do and then

631
00:28:24,080 --> 00:28:25,840
slowing the adoption just

632
00:28:25,840 --> 00:28:28,880
bad for the whole ecosystem openssl was

633
00:28:28,880 --> 00:28:30,559
bad for the whole ecosystem

634
00:28:30,559 --> 00:28:32,559
please i'm you know as someone who works

635
00:28:32,559 --> 00:28:34,480
a lot with tls please make it possible

636
00:28:34,480 --> 00:28:36,240
for us to evolve tls

637
00:28:36,240 --> 00:28:39,440
independently of a saying i get sad

638
00:28:39,440 --> 00:28:42,960
every time i have to look at its code

639
00:28:43,120 --> 00:28:46,399
sure um my

640
00:28:46,399 --> 00:28:49,760
my point from a practical standpoint is

641
00:28:49,760 --> 00:28:53,200
we're stuck with it um you know

642
00:28:53,200 --> 00:28:56,559
there are huge swaths of the ecosystem

643
00:28:56,559 --> 00:29:00,240
that will not be upgrading to open ssl

644
00:29:00,240 --> 00:29:03,279
3 for quite a while so

645
00:29:03,279 --> 00:29:07,039
the the decision here is how

646
00:29:07,039 --> 00:29:10,159
little can we change the standard

647
00:29:10,159 --> 00:29:13,840
or the recommendations to

648
00:29:13,840 --> 00:29:16,080
allow the standard to be implemented

649
00:29:16,080 --> 00:29:18,320
with openssl one

650
00:29:18,320 --> 00:29:21,360
without breaking things too much some of

651
00:29:21,360 --> 00:29:21,760
this

652
00:29:21,760 --> 00:29:27,120
may be as simple as recommending that

653
00:29:27,120 --> 00:29:30,640
you know you just write more code to

654
00:29:30,640 --> 00:29:31,360
work through

655
00:29:31,360 --> 00:29:34,159
all these other states and say that all

656
00:29:34,159 --> 00:29:35,360
these other states are

657
00:29:35,360 --> 00:29:38,960
possible wave your hands due to

658
00:29:38,960 --> 00:29:42,320
tls library issues um and

659
00:29:42,320 --> 00:29:44,799
tls 1.3 is a as i was saying earlier is

660
00:29:44,799 --> 00:29:46,480
a substantial change from

661
00:29:46,480 --> 00:29:50,880
tls 1.2 and so it may just be

662
00:29:50,880 --> 00:29:53,760
hey if you get something keep the tls

663
00:29:53,760 --> 00:29:55,840
conversation going even if you get a

664
00:29:55,840 --> 00:29:56,799
packet

665
00:29:56,799 --> 00:29:59,600
even if you get tls finished you act

666
00:29:59,600 --> 00:30:00,159
that

667
00:30:00,159 --> 00:30:02,240
you get a session ticket all alone when

668
00:30:02,240 --> 00:30:04,480
you expect application data

669
00:30:04,480 --> 00:30:06,640
it's still negotiating you should still

670
00:30:06,640 --> 00:30:07,760
continue

671
00:30:07,760 --> 00:30:09,440
sorry about this it really shouldn't

672
00:30:09,440 --> 00:30:11,679
happen but that's it

673
00:30:11,679 --> 00:30:14,720
same thing with um

674
00:30:14,720 --> 00:30:16,320
you know the number of session tickets

675
00:30:16,320 --> 00:30:17,840
if you can't control when they

676
00:30:17,840 --> 00:30:21,440
get sent out you know pick one that

677
00:30:21,440 --> 00:30:22,080
comes out

678
00:30:22,080 --> 00:30:24,559
after the client certificate has been

679
00:30:24,559 --> 00:30:26,559
verified as jorge was noticing

680
00:30:26,559 --> 00:30:30,240
or noting throw the rest away um

681
00:30:30,240 --> 00:30:32,640
if you get more than one if you can use

682
00:30:32,640 --> 00:30:33,360
them great

683
00:30:33,360 --> 00:30:36,960
if not pick one um

684
00:30:36,960 --> 00:30:39,679
yeah i i i hear this pain and open ssl

685
00:30:39,679 --> 00:30:40,720
is something i've been

686
00:30:40,720 --> 00:30:43,440
fighting with for 20 years for you know

687
00:30:43,440 --> 00:30:44,720
eep tls and

688
00:30:44,720 --> 00:30:47,840
various implementations um i i do not

689
00:30:47,840 --> 00:30:48,559
recommend

690
00:30:48,559 --> 00:30:51,679
breaking standard in order to

691
00:30:51,679 --> 00:30:54,880
work with openssl i do recommend

692
00:30:54,880 --> 00:30:56,399
making sure that there's enough

693
00:30:56,399 --> 00:30:58,399
information in the standard

694
00:30:58,399 --> 00:31:01,760
that implementers can work with

695
00:31:01,760 --> 00:31:05,200
both openssl and other implementers who

696
00:31:05,200 --> 00:31:08,640
choose to use openssl

697
00:31:08,720 --> 00:31:11,440
without going through all kinds of code

698
00:31:11,440 --> 00:31:15,039
spelunking into internals

699
00:31:16,480 --> 00:31:18,399
okay i saw elliot there briefly but it

700
00:31:18,399 --> 00:31:19,919
looks like uh

701
00:31:19,919 --> 00:31:23,919
you may have had his question answered

702
00:31:25,760 --> 00:31:29,200
all right um so if we have any other

703
00:31:29,200 --> 00:31:30,000
implementers

704
00:31:30,000 --> 00:31:35,200
on the call it would be great to

705
00:31:35,200 --> 00:31:37,760
get more participation as much as we can

706
00:31:37,760 --> 00:31:38,399
in uh

707
00:31:38,399 --> 00:31:41,440
implemented implement interop events

708
00:31:41,440 --> 00:31:43,360
so we can work out issues like these

709
00:31:43,360 --> 00:31:46,240
with other tlf libraries as well

710
00:31:46,240 --> 00:31:48,880
i think it'll be good for obviously for

711
00:31:48,880 --> 00:31:50,720
epls community and i think it'll be

712
00:31:50,720 --> 00:31:54,480
helpful for the tls community as well

713
00:31:54,880 --> 00:31:56,559
so if there aren't any other comments

714
00:31:56,559 --> 00:31:58,880
we'll move on to

715
00:31:58,880 --> 00:32:02,640
uh the next presentation yeah how do we

716
00:32:02,640 --> 00:32:04,960
process with the application

717
00:32:04,960 --> 00:32:09,760
data versus close notify

718
00:32:09,760 --> 00:32:12,960
there was a consensus call with

719
00:32:12,960 --> 00:32:16,000
no official conclusion i think

720
00:32:16,000 --> 00:32:20,000
yet um

721
00:32:20,720 --> 00:32:23,600
yeah so i think we well let's um is this

722
00:32:23,600 --> 00:32:25,120
something that's part of your

723
00:32:25,120 --> 00:32:28,320
uh tls 1.3

724
00:32:28,320 --> 00:32:31,120
uh epls 1.3 presentation which we'll

725
00:32:31,120 --> 00:32:32,000
move to next

726
00:32:32,000 --> 00:32:35,120
so you cover that in one year

727
00:32:35,120 --> 00:32:37,840
very protect the result indicate but not

728
00:32:37,840 --> 00:32:39,440
the choice really

729
00:32:39,440 --> 00:32:44,640
is not so much included but

730
00:32:47,279 --> 00:32:50,880
okay um well let's uh make sure we cover

731
00:32:50,880 --> 00:32:52,240
it during that section

732
00:32:52,240 --> 00:32:56,080
um and i think we can take a

733
00:32:56,080 --> 00:32:59,840
consensus call here as well as as

734
00:32:59,840 --> 00:33:03,439
finished wrap that up on the list

735
00:33:04,399 --> 00:33:07,600
all right good so this

736
00:33:07,600 --> 00:33:11,600
is a presentation this summarizes

737
00:33:11,600 --> 00:33:14,640
all the changes made since version

738
00:33:14,640 --> 00:33:17,760
12 which was the version that

739
00:33:17,760 --> 00:33:20,880
existed at the last idf and then it goes

740
00:33:20,880 --> 00:33:22,159
through

741
00:33:22,159 --> 00:33:25,360
all the pull requests and

742
00:33:25,360 --> 00:33:28,960
issues on github as well as

743
00:33:28,960 --> 00:33:32,399
alan's comments on the list

744
00:33:32,399 --> 00:33:36,840
the last week my hope is that we can

745
00:33:36,840 --> 00:33:39,760
hopefully reach see that there is rough

746
00:33:39,760 --> 00:33:41,760
consensus on some of these things and

747
00:33:41,760 --> 00:33:42,640
then we can

748
00:33:42,640 --> 00:33:45,679
close these issues and maybe submit the

749
00:33:45,679 --> 00:33:48,960
version 15 which might not be the final

750
00:33:48,960 --> 00:33:50,000
version but

751
00:33:50,000 --> 00:33:51,919
at least we have something submitted to

752
00:33:51,919 --> 00:33:53,120
work and then we can

753
00:33:53,120 --> 00:33:55,919
agree what we don't have consensus and

754
00:33:55,919 --> 00:33:56,720
what needs

755
00:33:56,720 --> 00:34:02,000
more work yeah so next slide

756
00:34:03,919 --> 00:34:07,760
so most of the changes since

757
00:34:07,760 --> 00:34:10,800
version 12 to 14

758
00:34:10,800 --> 00:34:14,159
are clarifications there might be

759
00:34:14,159 --> 00:34:17,359
some normative text change but

760
00:34:17,359 --> 00:34:20,560
then it's mostly that comments from

761
00:34:20,560 --> 00:34:22,320
people that this goes a little bit

762
00:34:22,320 --> 00:34:26,399
against tls 1.3 and it should be changed

763
00:34:26,399 --> 00:34:30,320
there's a quite a lot of clarifications

764
00:34:30,320 --> 00:34:34,000
there's security clarifications

765
00:34:34,000 --> 00:34:37,359
there is clarification that the message

766
00:34:37,359 --> 00:34:37,918
flows

767
00:34:37,918 --> 00:34:41,280
are specific to tls1.3

768
00:34:41,280 --> 00:34:43,199
it's clarification that errors are

769
00:34:43,199 --> 00:34:45,678
always

770
00:34:46,239 --> 00:34:49,599
fatal um

771
00:34:49,599 --> 00:34:52,800
clarifications on this

772
00:34:52,800 --> 00:34:56,320
ticket lifetime clarification of ucsb

773
00:34:56,320 --> 00:35:03,359
status um

774
00:35:03,359 --> 00:35:07,520
a better example encrypted usernames

775
00:35:07,520 --> 00:35:11,440
um i don't know hopefully i i assume

776
00:35:11,440 --> 00:35:14,160
this or there's consensus regarding

777
00:35:14,160 --> 00:35:14,960
these

778
00:35:14,960 --> 00:35:18,240
um will not go through them very much

779
00:35:18,240 --> 00:35:19,839
more so unless there is any comments we

780
00:35:19,839 --> 00:35:22,799
go to the next slide

781
00:35:25,440 --> 00:35:28,800
so here are the major

782
00:35:28,800 --> 00:35:32,240
technical changes that was

783
00:35:32,240 --> 00:35:35,520
suggested by the idf last

784
00:35:35,520 --> 00:35:39,839
call directorates and mainly iesd

785
00:35:39,839 --> 00:35:43,040
and ben's discuss and ben's discusses

786
00:35:43,040 --> 00:35:46,000
was partly based on input from the tls

787
00:35:46,000 --> 00:35:48,240
working group so

788
00:35:48,240 --> 00:35:51,040
major change was change from application

789
00:35:51,040 --> 00:35:52,640
data to

790
00:35:52,640 --> 00:35:56,079
close notify

791
00:35:56,079 --> 00:35:58,400
suggestion to update the key duration to

792
00:35:58,400 --> 00:35:59,200
be more

793
00:35:59,200 --> 00:36:02,400
modern with different labels as well as

794
00:36:02,400 --> 00:36:03,359
using

795
00:36:03,359 --> 00:36:08,000
type code appended to the labels

796
00:36:08,000 --> 00:36:11,520
instead of in the context and these

797
00:36:11,520 --> 00:36:14,800
changes may or may not have working

798
00:36:14,800 --> 00:36:15,359
group

799
00:36:15,359 --> 00:36:20,640
consensus at this part of

800
00:36:20,800 --> 00:36:24,839
the consensus call that you started

801
00:36:24,839 --> 00:36:27,839
um

802
00:36:28,320 --> 00:36:30,880
um would it be a good time to is this

803
00:36:30,880 --> 00:36:32,160
the only time you discuss

804
00:36:32,160 --> 00:36:35,359
these particular changes uh no i think

805
00:36:35,359 --> 00:36:39,280
the key derivation will be

806
00:36:39,280 --> 00:36:42,320
this guy the label the con

807
00:36:42,320 --> 00:36:44,320
use of context or label will be

808
00:36:44,320 --> 00:36:46,720
discussed on the next slide

809
00:36:46,720 --> 00:36:48,800
the other two things i don't have any

810
00:36:48,800 --> 00:36:50,079
specific slides for

811
00:36:50,079 --> 00:36:52,640
so this would be the case to discuss the

812
00:36:52,640 --> 00:36:55,680
use of labels more labels at all and the

813
00:36:55,680 --> 00:36:59,759
application data versus close notified

814
00:37:00,720 --> 00:37:03,040
okay

815
00:37:04,320 --> 00:37:07,280
so i think having separate labels for

816
00:37:07,280 --> 00:37:08,880
msk and emsk

817
00:37:08,880 --> 00:37:12,079
instead of using the key and then

818
00:37:12,079 --> 00:37:14,640
splitting them into mske msk

819
00:37:14,640 --> 00:37:19,200
is better unless someone objects

820
00:37:19,200 --> 00:37:22,400
i i think this at least hopefully we

821
00:37:22,400 --> 00:37:24,480
have some consensus of using

822
00:37:24,480 --> 00:37:27,760
separate labels for msk and emsk

823
00:37:27,760 --> 00:37:30,880
yeah yeah yeah based on this

824
00:37:30,880 --> 00:37:34,960
discussion discussion i haven't uh

825
00:37:34,960 --> 00:37:37,440
heard anybody object to separating out

826
00:37:37,440 --> 00:37:38,720
the

827
00:37:38,720 --> 00:37:42,560
emsk and msk labels um

828
00:37:42,560 --> 00:37:44,720
but if there is i'd like to just hear if

829
00:37:44,720 --> 00:37:46,160
anybody on the call

830
00:37:46,160 --> 00:37:49,599
has any objection to the part of the key

831
00:37:49,599 --> 00:37:52,160
derivation which separates out the emsk

832
00:37:52,160 --> 00:37:53,119
and the msk

833
00:37:53,119 --> 00:37:56,880
not necessarily uh how the type code is

834
00:37:56,880 --> 00:37:58,240
incorporated but at least

835
00:37:58,240 --> 00:38:05,839
in using a separate label for those

836
00:38:10,960 --> 00:38:14,720
okay um well i think what i would like

837
00:38:14,720 --> 00:38:16,079
to do is maybe

838
00:38:16,079 --> 00:38:17,280
since it's a little bit bigger

839
00:38:17,280 --> 00:38:19,760
discussion probably um move the closed

840
00:38:19,760 --> 00:38:21,440
notify discussion to the end

841
00:38:21,440 --> 00:38:24,640
and then we can bring the other

842
00:38:24,640 --> 00:38:27,920
um ones up as they come up in your

843
00:38:27,920 --> 00:38:29,119
slides

844
00:38:29,119 --> 00:38:33,839
yeah sounds good okay then next slide

845
00:38:33,839 --> 00:38:36,880
so i will go through them in there's no

846
00:38:36,880 --> 00:38:38,640
particular order but the ones in the

847
00:38:38,640 --> 00:38:39,280
beginning

848
00:38:39,280 --> 00:38:42,480
are related to the isg discussion

849
00:38:42,480 --> 00:38:46,079
so first issue issue number 32 on github

850
00:38:46,079 --> 00:38:50,000
is the use of context

851
00:38:50,000 --> 00:38:53,359
was raised by you

852
00:38:53,359 --> 00:38:55,760
for example on the list of the dynasty

853
00:38:55,760 --> 00:38:56,640
discussions

854
00:38:56,640 --> 00:38:59,359
so discussion is does it make sense to

855
00:38:59,359 --> 00:39:00,560
have

856
00:39:00,560 --> 00:39:03,280
uh have the old where the type code goes

857
00:39:03,280 --> 00:39:05,359
into the context or the

858
00:39:05,359 --> 00:39:08,480
zero 14 version where it goes is

859
00:39:08,480 --> 00:39:12,640
appended to the um

860
00:39:12,640 --> 00:39:17,520
labels and and no context context is

861
00:39:17,520 --> 00:39:19,520
mixed up here should be the opposite

862
00:39:19,520 --> 00:39:21,839
order there was also a recent

863
00:39:21,839 --> 00:39:24,800
comment by alan on the on the list that

864
00:39:24,800 --> 00:39:26,079
is

865
00:39:26,079 --> 00:39:30,320
uh pre adding things to the labels or

866
00:39:30,320 --> 00:39:32,480
going against the ayanna register and

867
00:39:32,480 --> 00:39:35,359
that this should be consulted with

868
00:39:35,359 --> 00:39:38,320
tls i personally agree with alan that

869
00:39:38,320 --> 00:39:40,000
this is a bit strange but

870
00:39:40,000 --> 00:39:42,880
on the other hand is i think this change

871
00:39:42,880 --> 00:39:43,599
was made

872
00:39:43,599 --> 00:39:46,400
based on feedback from people in the tls

873
00:39:46,400 --> 00:39:49,119
working group

874
00:39:50,880 --> 00:39:53,359
comments

875
00:39:54,240 --> 00:39:57,920
yeah as far as the you know i i think it

876
00:39:57,920 --> 00:39:59,520
is a little bit problematic to include

877
00:39:59,520 --> 00:40:01,520
them in the label for the inr registry i

878
00:40:01,520 --> 00:40:02,480
think for

879
00:40:02,480 --> 00:40:05,839
epls you would you could easily specify

880
00:40:05,839 --> 00:40:07,200
that the type code

881
00:40:07,200 --> 00:40:09,440
would be i think you say it's a heck so

882
00:40:09,440 --> 00:40:11,440
0d or something like that and that would

883
00:40:11,440 --> 00:40:13,680
be the label registered with iana

884
00:40:13,680 --> 00:40:15,599
you wouldn't register this variable

885
00:40:15,599 --> 00:40:16,720
label and

886
00:40:16,720 --> 00:40:19,920
you know whoever picks up this spec to

887
00:40:19,920 --> 00:40:23,520
use it and say ttls or or fast or some

888
00:40:23,520 --> 00:40:24,480
other

889
00:40:24,480 --> 00:40:28,079
uh tls derived protocol would register

890
00:40:28,079 --> 00:40:31,599
their label uh with the

891
00:40:31,599 --> 00:40:34,079
with the type with a different type code

892
00:40:34,079 --> 00:40:35,680
um

893
00:40:35,680 --> 00:40:38,560
which might be an advantage um and that

894
00:40:38,560 --> 00:40:39,839
you would make sure that you had

895
00:40:39,839 --> 00:40:41,359
different labels registered for each of

896
00:40:41,359 --> 00:40:43,119
these and it would reduce some

897
00:40:43,119 --> 00:40:45,200
potential for confusion but it also

898
00:40:45,200 --> 00:40:46,800
could be a disadvantage and then it

899
00:40:46,800 --> 00:40:50,240
makes it a little more complex

900
00:40:50,880 --> 00:40:53,599
and there's basically three variants on

901
00:40:53,599 --> 00:40:56,319
the table then

902
00:41:02,079 --> 00:41:07,520
well i guess maybe it will help the

903
00:41:07,520 --> 00:41:09,680
like we can agree on the exact label we

904
00:41:09,680 --> 00:41:11,920
register with ayana but

905
00:41:11,920 --> 00:41:15,119
maybe it's better that we agree maybe on

906
00:41:15,119 --> 00:41:15,520
the

907
00:41:15,520 --> 00:41:17,599
fundamental question of whether we have

908
00:41:17,599 --> 00:41:21,280
a context or not and

909
00:41:21,280 --> 00:41:23,839
like personally either way is fine i

910
00:41:23,839 --> 00:41:26,000
think

911
00:41:27,040 --> 00:41:29,280
both martin and ben were being more

912
00:41:29,280 --> 00:41:30,319
pedantic

913
00:41:30,319 --> 00:41:33,599
that saying it's for connection value

914
00:41:33,599 --> 00:41:35,520
the context is per connection and

915
00:41:35,520 --> 00:41:37,440
therefore this type code is perhaps more

916
00:41:37,440 --> 00:41:39,440
suitable than the label

917
00:41:39,440 --> 00:41:42,800
uh if you know they approve it being in

918
00:41:42,800 --> 00:41:46,000
in in the context i'm i'm fine otherwise

919
00:41:46,000 --> 00:41:47,440
having it in the label

920
00:41:47,440 --> 00:41:50,880
and and as joe said just

921
00:41:50,880 --> 00:41:54,400
instead of having this plus appendix

922
00:41:54,400 --> 00:41:54,960
actually

923
00:41:54,960 --> 00:41:58,160
registering the full label if underscore

924
00:41:58,160 --> 00:41:59,920
tls underscore msk

925
00:41:59,920 --> 00:42:03,520
underscore 0d for example

926
00:42:03,520 --> 00:42:07,920
might make sure that there is no overlap

927
00:42:07,920 --> 00:42:10,560
so yeah i personally think just having

928
00:42:10,560 --> 00:42:12,960
everything in the label is fine

929
00:42:12,960 --> 00:42:15,119
we could also like support libraries

930
00:42:15,119 --> 00:42:16,400
which don't necessarily

931
00:42:16,400 --> 00:42:19,680
allow context but

932
00:42:19,680 --> 00:42:22,400
no no strong opinions like whichever

933
00:42:22,400 --> 00:42:24,800
gets the document moving forward is i

934
00:42:24,800 --> 00:42:27,359
guess more important at this stage

935
00:42:27,359 --> 00:42:30,400
yeah should we try to do that and

936
00:42:30,400 --> 00:42:31,599
register

937
00:42:31,599 --> 00:42:34,319
specific labels for the different method

938
00:42:34,319 --> 00:42:35,599
that seems to

939
00:42:35,599 --> 00:42:38,800
that we know will come past iest and it

940
00:42:38,800 --> 00:42:40,079
addresses

941
00:42:40,079 --> 00:42:42,720
alan's comments also that this goes

942
00:42:42,720 --> 00:42:43,200
against

943
00:42:43,200 --> 00:42:46,399
that i am a registry

944
00:42:50,850 --> 00:42:52,160
[Music]

945
00:42:52,160 --> 00:42:56,400
in terms of you know the tls review

946
00:42:56,400 --> 00:42:59,920
per mo eats comments that the

947
00:42:59,920 --> 00:43:03,599
context should be session information

948
00:43:03,599 --> 00:43:06,079
the the simple pushback there is there

949
00:43:06,079 --> 00:43:07,760
is no session information

950
00:43:07,760 --> 00:43:12,079
in eep right because eve can go over ppp

951
00:43:12,079 --> 00:43:14,640
um 802 on x you know anything there's

952
00:43:14,640 --> 00:43:15,920
there's pana

953
00:43:15,920 --> 00:43:19,280
collab now apparently there is no

954
00:43:19,280 --> 00:43:20,720
session

955
00:43:20,720 --> 00:43:24,160
we can put into that context

956
00:43:24,160 --> 00:43:27,680
um so for sheer laziness my preference

957
00:43:27,680 --> 00:43:29,760
would be to put the type code into the

958
00:43:29,760 --> 00:43:31,119
context

959
00:43:31,119 --> 00:43:33,920
um and that way there's less work for

960
00:43:33,920 --> 00:43:35,280
implementers to do

961
00:43:35,280 --> 00:43:39,520
and the iana registry doesn't have um

962
00:43:39,520 --> 00:43:42,079
60 things all of which are minor

963
00:43:42,079 --> 00:43:45,520
variations of each other

964
00:43:46,000 --> 00:43:48,880
i agree i think that's the best solution

965
00:43:48,880 --> 00:43:50,960
that's why we

966
00:43:50,960 --> 00:43:54,480
had that solution from the beginning

967
00:43:54,480 --> 00:43:57,520
do we know if we can get that past

968
00:43:57,520 --> 00:44:00,880
ben's discuss or should we

969
00:44:00,880 --> 00:44:03,359
try to do that that's also what have

970
00:44:03,359 --> 00:44:04,960
been tested

971
00:44:04,960 --> 00:44:07,440
in the hackathon i guess so should we

972
00:44:07,440 --> 00:44:08,000
try to go

973
00:44:08,000 --> 00:44:11,520
for the context again unless

974
00:44:11,520 --> 00:44:14,560
ben says that this is not okay and then

975
00:44:14,560 --> 00:44:15,599
we go for

976
00:44:15,599 --> 00:44:18,480
different labels

977
00:44:20,720 --> 00:44:23,839
is there anyone that objects to uh using

978
00:44:23,839 --> 00:44:24,240
the

979
00:44:24,240 --> 00:44:26,879
context

980
00:44:27,839 --> 00:44:30,160
roman

981
00:44:35,440 --> 00:44:37,280
yeah i was going to say i it's i don't

982
00:44:37,280 --> 00:44:38,319
have an objection i was going to

983
00:44:38,319 --> 00:44:40,000
interject kind of a process thing i

984
00:44:40,000 --> 00:44:42,480
i it seems like a lot of work to try to

985
00:44:42,480 --> 00:44:44,240
rev a bunch of code if we're not sure

986
00:44:44,240 --> 00:44:45,680
that this is going to be an acceptable

987
00:44:45,680 --> 00:44:47,839
resolution so one thing i could do is

988
00:44:47,839 --> 00:44:49,359
i could talk to kind of ben and the rest

989
00:44:49,359 --> 00:44:50,560
of the isg to make sure that we are

990
00:44:50,560 --> 00:44:51,520
comfortable with that

991
00:44:51,520 --> 00:44:53,760
before again anyone has to write code uh

992
00:44:53,760 --> 00:44:55,280
it would be a nice step after we have

993
00:44:55,280 --> 00:44:56,880
that informal nod to

994
00:44:56,880 --> 00:45:00,079
to get that verification but i can ask

995
00:45:00,079 --> 00:45:01,839
first

996
00:45:01,839 --> 00:45:05,040
i think most of the code

997
00:45:05,040 --> 00:45:06,960
yeah i think most of the code is already

998
00:45:06,960 --> 00:45:08,880
using the context i mean maybe some

999
00:45:08,880 --> 00:45:10,240
people have implemented both

1000
00:45:10,240 --> 00:45:13,599
but um yeah i know

1001
00:45:13,599 --> 00:45:16,960
no one's implemented the

1002
00:45:16,960 --> 00:45:20,000
type code in the label um

1003
00:45:20,000 --> 00:45:21,760
that that's not done there's no

1004
00:45:21,760 --> 00:45:23,440
configurable flag for that

1005
00:45:23,440 --> 00:45:25,839
and realistically speaking it's not huge

1006
00:45:25,839 --> 00:45:28,240
amounts of code to change it

1007
00:45:28,240 --> 00:45:31,839
um it's just why have an unused field

1008
00:45:31,839 --> 00:45:33,760
and then make your life more complicated

1009
00:45:33,760 --> 00:45:37,280
when you can just use a field that's

1010
00:45:44,839 --> 00:45:46,319
there

1011
00:45:46,319 --> 00:45:48,560
okay yeah so we'll probably want to

1012
00:45:48,560 --> 00:45:49,760
check to

1013
00:45:49,760 --> 00:45:51,119
you know obviously we don't want the

1014
00:45:51,119 --> 00:45:53,280
block document blocked on this

1015
00:45:53,280 --> 00:45:56,160
um but it seems at least from the list

1016
00:45:56,160 --> 00:45:56,560
and

1017
00:45:56,560 --> 00:45:59,680
and from this discussion here that

1018
00:45:59,680 --> 00:46:01,920
going with the type code in the context

1019
00:46:01,920 --> 00:46:03,599
would be the preferred approach

1020
00:46:03,599 --> 00:46:08,160
um and it but it's not something that

1021
00:46:08,160 --> 00:46:11,599
is a blocking issue if we had to change

1022
00:46:11,599 --> 00:46:12,160
it for

1023
00:46:12,160 --> 00:46:15,839
for some other reason

1024
00:46:17,680 --> 00:46:22,640
all right thank you next slide

1025
00:46:25,680 --> 00:46:29,200
so these are two pull requests

1026
00:46:29,200 --> 00:46:32,319
based on the

1027
00:46:32,319 --> 00:46:35,520
uh these are based on the isd

1028
00:46:35,520 --> 00:46:38,800
and the previous comments that

1029
00:46:38,800 --> 00:46:42,319
we didn't miss to put into 14.

1030
00:46:42,319 --> 00:46:45,680
so it was uh several comments how this

1031
00:46:45,680 --> 00:46:47,040
document relates

1032
00:46:47,040 --> 00:46:51,119
to uh alan's documents on tls

1033
00:46:51,119 --> 00:46:54,160
types so now to

1034
00:46:54,160 --> 00:46:57,040
this has been added as a reference and

1035
00:46:57,040 --> 00:46:58,640
in two sections both

1036
00:46:58,640 --> 00:47:01,760
in the beginning and in the key

1037
00:47:01,760 --> 00:47:05,200
derivation then also a comment

1038
00:47:05,200 --> 00:47:08,960
uh that these message flows

1039
00:47:08,960 --> 00:47:11,280
how they relate to earlier versions so

1040
00:47:11,280 --> 00:47:13,119
it has been added that is

1041
00:47:13,119 --> 00:47:18,800
example message flows specific to tls103

1042
00:47:21,040 --> 00:47:23,200
there's no issue related to these these

1043
00:47:23,200 --> 00:47:26,640
are only pull requests

1044
00:47:28,800 --> 00:47:30,559
okay these seem pretty straightforward

1045
00:47:30,559 --> 00:47:32,720
to me i don't know if anybody has any

1046
00:47:32,720 --> 00:47:38,720
objections to them

1047
00:47:38,720 --> 00:47:41,118
okay

1048
00:47:43,280 --> 00:47:45,520
okay

1049
00:47:47,040 --> 00:47:51,040
yeah if anybody has concerns here um

1050
00:47:51,040 --> 00:47:55,280
we can uh avoid them now if not uh

1051
00:47:55,280 --> 00:47:56,720
these are probably things that can be

1052
00:47:56,720 --> 00:47:59,919
merged i think

1053
00:48:00,079 --> 00:48:02,559
i think my plan is to try to merge and

1054
00:48:02,559 --> 00:48:03,599
submit the version

1055
00:48:03,599 --> 00:48:06,319
15 for everything that there is no

1056
00:48:06,319 --> 00:48:07,200
objection

1057
00:48:07,200 --> 00:48:10,400
to yeah it'll take probably

1058
00:48:10,400 --> 00:48:12,000
we'll probably have to go to the list

1059
00:48:12,000 --> 00:48:13,920
for a couple of these things

1060
00:48:13,920 --> 00:48:15,680
yeah but this one i think is more

1061
00:48:15,680 --> 00:48:18,399
editorial

1062
00:48:20,319 --> 00:48:23,440
good so 45 so this is related

1063
00:48:23,440 --> 00:48:27,119
to um new session tickets this was a lot

1064
00:48:27,119 --> 00:48:29,040
of discussion during

1065
00:48:29,040 --> 00:48:34,319
uh alan's um comments um so

1066
00:48:34,319 --> 00:48:37,440
this no so this is

1067
00:48:37,440 --> 00:48:40,720
yeah this is clear some guidance

1068
00:48:40,720 --> 00:48:44,079
by resumption is needed and also

1069
00:48:44,079 --> 00:48:48,079
some where the new session ticket can

1070
00:48:48,079 --> 00:48:50,000
be sent so there was a lot of

1071
00:48:50,000 --> 00:48:51,680
discussions why you

1072
00:48:51,680 --> 00:48:54,000
why do you need resumption at all and

1073
00:48:54,000 --> 00:48:54,880
what is

1074
00:48:54,880 --> 00:48:57,359
beneficial for and conclusion i think is

1075
00:48:57,359 --> 00:48:58,559
that resumption is

1076
00:48:58,559 --> 00:49:01,359
very beneficial in etls due to the

1077
00:49:01,359 --> 00:49:03,359
number of

1078
00:49:03,359 --> 00:49:07,200
due to packet fragmentation

1079
00:49:07,680 --> 00:49:09,599
so and then there's a correction that

1080
00:49:09,599 --> 00:49:12,640
the ticket does not contain a psk

1081
00:49:12,640 --> 00:49:15,839
it has a associated psk to

1082
00:49:15,839 --> 00:49:19,200
derive a psk based on the

1083
00:49:19,200 --> 00:49:22,319
i think the identity and the ticket

1084
00:49:22,319 --> 00:49:24,319
for the nonstory i don't remember but

1085
00:49:24,319 --> 00:49:27,599
it's not indeed

1086
00:49:28,839 --> 00:49:31,839
and

1087
00:49:36,640 --> 00:49:38,319
is there any comment i guess we can go

1088
00:49:38,319 --> 00:49:40,880
to next

1089
00:49:40,960 --> 00:49:45,839
yeah that one looks good next

1090
00:49:47,599 --> 00:49:51,280
so and here is here's guidance on new

1091
00:49:51,280 --> 00:49:52,319
station

1092
00:49:52,319 --> 00:49:55,599
ticket so this was

1093
00:49:55,599 --> 00:50:00,000
first it was discussion in isd

1094
00:50:00,000 --> 00:50:02,079
ben pointed out that the drop ship

1095
00:50:02,079 --> 00:50:03,440
mentioned ticket request

1096
00:50:03,440 --> 00:50:06,800
and that was done then there was comment

1097
00:50:06,800 --> 00:50:07,119
from

1098
00:50:07,119 --> 00:50:10,960
alan that we should have much more um

1099
00:50:10,960 --> 00:50:14,319
guidance and this

1100
00:50:14,319 --> 00:50:16,880
text in green here was what was

1101
00:50:16,880 --> 00:50:18,160
suggested on the

1102
00:50:18,160 --> 00:50:22,240
issue in github i think

1103
00:50:22,240 --> 00:50:27,359
i been worried you i don't remember um

1104
00:50:27,359 --> 00:50:29,760
so that is that they should take into

1105
00:50:29,760 --> 00:50:31,200
account that

1106
00:50:31,200 --> 00:50:33,359
fewer new session tickets will likely be

1107
00:50:33,359 --> 00:50:35,760
needed for etls

1108
00:50:35,760 --> 00:50:38,319
and in most cases the single new session

1109
00:50:38,319 --> 00:50:40,000
ticket will be

1110
00:50:40,000 --> 00:50:43,520
sufficient um

1111
00:50:43,920 --> 00:50:47,119
i made a police based on that short

1112
00:50:47,119 --> 00:50:49,680
i think based on alan's comments we i

1113
00:50:49,680 --> 00:50:51,680
think there's more guidance needed here

1114
00:50:51,680 --> 00:50:55,280
both security and for implementation

1115
00:50:55,280 --> 00:50:58,319
it was a recent comment by alan on the

1116
00:50:58,319 --> 00:50:58,800
list

1117
00:50:58,800 --> 00:51:02,079
that the draft should refer

1118
00:51:02,079 --> 00:51:05,839
to rfc 8446

1119
00:51:05,839 --> 00:51:10,558
i agree that that's a good idea and

1120
00:51:11,119 --> 00:51:15,440
then alan also wanted to restrict it

1121
00:51:15,520 --> 00:51:17,760
more to worry

1122
00:51:17,760 --> 00:51:19,359
[Music]

1123
00:51:19,359 --> 00:51:23,359
i don't require is very restrictive i

1124
00:51:23,359 --> 00:51:25,920
don't i personally don't think that's a

1125
00:51:25,920 --> 00:51:27,359
good idea i think

1126
00:51:27,359 --> 00:51:30,960
but expect here is good and that's maybe

1127
00:51:30,960 --> 00:51:37,839
already what is stated

1128
00:51:41,040 --> 00:51:42,880
okay yeah i think this is going to

1129
00:51:42,880 --> 00:51:44,079
probably take a little bit more

1130
00:51:44,079 --> 00:51:46,079
discussion especially

1131
00:51:46,079 --> 00:51:50,000
i think the what became a little clearer

1132
00:51:50,000 --> 00:51:50,720
to me

1133
00:51:50,720 --> 00:51:54,319
in allen's uh implementation report

1134
00:51:54,319 --> 00:51:57,200
was that there are problems potentially

1135
00:51:57,200 --> 00:51:58,720
with

1136
00:51:58,720 --> 00:52:01,200
implementation sending new session

1137
00:52:01,200 --> 00:52:02,480
ticket early

1138
00:52:02,480 --> 00:52:05,680
i i have to go back and look at the tls

1139
00:52:05,680 --> 00:52:07,040
1.3 spec because

1140
00:52:07,040 --> 00:52:10,079
i'm not sure if that's a valid thing to

1141
00:52:10,079 --> 00:52:10,960
do

1142
00:52:10,960 --> 00:52:13,040
because i thought the resumption key was

1143
00:52:13,040 --> 00:52:14,720
derived from both the client

1144
00:52:14,720 --> 00:52:18,160
and the server finished

1145
00:52:21,440 --> 00:52:24,960
but it might still be you cannot derive

1146
00:52:24,960 --> 00:52:26,720
the key before

1147
00:52:26,720 --> 00:52:30,000
before you have received client finish

1148
00:52:30,000 --> 00:52:30,960
but

1149
00:52:30,960 --> 00:52:33,119
you can still use the ticket if you

1150
00:52:33,119 --> 00:52:36,079
would like to i think

1151
00:52:38,400 --> 00:52:41,760
interesting okay but i think

1152
00:52:41,760 --> 00:52:43,760
we definitely need to sort out all the

1153
00:52:43,760 --> 00:52:45,440
security problems here

1154
00:52:45,440 --> 00:52:50,480
give guidance on that yeah i i guess

1155
00:52:50,480 --> 00:52:53,280
go ahead for it uh yeah i guess for this

1156
00:52:53,280 --> 00:52:54,079
one

1157
00:52:54,079 --> 00:52:57,280
we need to still wait out a little bit

1158
00:52:57,280 --> 00:52:58,000
before

1159
00:52:58,000 --> 00:53:01,599
merging into the repository

1160
00:53:01,599 --> 00:53:03,760
so i think what we have conclusion is

1161
00:53:03,760 --> 00:53:04,720
that we should

1162
00:53:04,720 --> 00:53:06,640
say that in most cases one session

1163
00:53:06,640 --> 00:53:08,240
ticket is enough

1164
00:53:08,240 --> 00:53:10,160
and then list out that you might send

1165
00:53:10,160 --> 00:53:12,720
more because of limitations of library

1166
00:53:12,720 --> 00:53:13,520
or you want to

1167
00:53:13,520 --> 00:53:16,079
prevent extra round trips during

1168
00:53:16,079 --> 00:53:17,680
resumption

1169
00:53:17,680 --> 00:53:21,040
what remains uh is how

1170
00:53:21,040 --> 00:53:24,240
do we then like schedule when this new

1171
00:53:24,240 --> 00:53:26,160
session ticket is sent

1172
00:53:26,160 --> 00:53:30,240
uh because in in in the web scenario

1173
00:53:30,240 --> 00:53:32,720
like there is very rarely any client

1174
00:53:32,720 --> 00:53:35,040
authentication whereas in epls

1175
00:53:35,040 --> 00:53:36,559
predominantly there is client

1176
00:53:36,559 --> 00:53:38,240
authentication so you would want to

1177
00:53:38,240 --> 00:53:38,880
issue

1178
00:53:38,880 --> 00:53:41,760
session tickets only after receiving the

1179
00:53:41,760 --> 00:53:44,160
client certificate and verifying it

1180
00:53:44,160 --> 00:53:46,640
and if libraries currently don't allow

1181
00:53:46,640 --> 00:53:47,280
you to

1182
00:53:47,280 --> 00:53:50,000
like pick an appropriate time when to

1183
00:53:50,000 --> 00:53:51,920
send that new session ticket then that

1184
00:53:51,920 --> 00:53:57,839
also needs to be documented

1185
00:54:00,079 --> 00:54:03,200
yeah helen for me that's real

1186
00:54:03,200 --> 00:54:04,640
yeah it really just needs to be

1187
00:54:04,640 --> 00:54:07,599
documented as here be dragons

1188
00:54:07,599 --> 00:54:11,760
right otherwise what happens is um

1189
00:54:11,760 --> 00:54:14,240
you know jorge and i and various other

1190
00:54:14,240 --> 00:54:15,920
people working on host ap

1191
00:54:15,920 --> 00:54:17,520
um have just been beating our heads

1192
00:54:17,520 --> 00:54:19,520
against this for months exactly

1193
00:54:19,520 --> 00:54:22,559
what does the tls layer do how do you

1194
00:54:22,559 --> 00:54:23,119
control

1195
00:54:23,119 --> 00:54:27,280
it um it's it's best to write all this

1196
00:54:27,280 --> 00:54:29,440
you know interoperability hackathon

1197
00:54:29,440 --> 00:54:30,800
report stuff

1198
00:54:30,800 --> 00:54:33,839
down and go by the way with tls one

1199
00:54:33,839 --> 00:54:34,400
three

1200
00:54:34,400 --> 00:54:36,799
almost anything can happen and you have

1201
00:54:36,799 --> 00:54:38,720
to be aware of it

1202
00:54:38,720 --> 00:54:41,118
sorry

1203
00:54:45,280 --> 00:54:47,440
yeah and clarifying the behaviors would

1204
00:54:47,440 --> 00:54:49,599
be

1205
00:54:50,839 --> 00:54:53,839
helpful

1206
00:54:56,160 --> 00:54:58,319
okay any other uh comments on new

1207
00:54:58,319 --> 00:54:59,839
session ticket i think

1208
00:54:59,839 --> 00:55:02,240
um there's a we i think we've made

1209
00:55:02,240 --> 00:55:04,000
progress on uh

1210
00:55:04,000 --> 00:55:06,559
the issue of how uh how many session

1211
00:55:06,559 --> 00:55:08,240
tickets need to be sent i think that we

1212
00:55:08,240 --> 00:55:08,880
can give

1213
00:55:08,880 --> 00:55:11,920
clearer guidance there um i think the

1214
00:55:11,920 --> 00:55:13,359
issues of

1215
00:55:13,359 --> 00:55:16,240
the ordering of the tickets and the how

1216
00:55:16,240 --> 00:55:17,839
those are

1217
00:55:17,839 --> 00:55:22,000
handled is still open issues that need

1218
00:55:22,000 --> 00:55:24,720
to be resolved

1219
00:55:28,880 --> 00:55:31,839
activity on github in this issue would

1220
00:55:31,839 --> 00:55:33,119
be appreciated

1221
00:55:33,119 --> 00:55:36,480
if you have anything to comment

1222
00:55:36,480 --> 00:55:39,280
yeah it's a good point i also posted to

1223
00:55:39,280 --> 00:55:40,480
the list i don't know if we had done

1224
00:55:40,480 --> 00:55:42,160
that previously i can't remember but i

1225
00:55:42,160 --> 00:55:44,079
did post where the repository is in

1226
00:55:44,079 --> 00:55:45,440
github and it's a

1227
00:55:45,440 --> 00:55:49,040
vassal authors to use pull requests so

1228
00:55:49,040 --> 00:55:51,680
that we can track the issues better

1229
00:55:51,680 --> 00:55:54,880
going into the document and

1230
00:55:54,880 --> 00:55:58,559
having comments in the github are

1231
00:55:58,559 --> 00:56:03,839
is is good

1232
00:56:05,520 --> 00:56:08,160
next slide

1233
00:56:11,040 --> 00:56:14,240
so yeah so this is

1234
00:56:14,240 --> 00:56:17,760
about packet modification attacks this

1235
00:56:17,760 --> 00:56:19,040
was

1236
00:56:19,040 --> 00:56:21,920
raised i think the first paragraph here

1237
00:56:21,920 --> 00:56:24,480
was raised during the isd

1238
00:56:24,480 --> 00:56:28,160
discussion was and maybe also during the

1239
00:56:28,160 --> 00:56:29,520
sec

1240
00:56:29,520 --> 00:56:32,720
picture it it was people did

1241
00:56:32,720 --> 00:56:35,760
did not understand what an attacker

1242
00:56:35,760 --> 00:56:36,240
could

1243
00:56:36,240 --> 00:56:39,599
modify and what

1244
00:56:39,599 --> 00:56:43,280
so this pull request tried to

1245
00:56:43,280 --> 00:56:46,559
summarize what an attacker that an

1246
00:56:46,559 --> 00:56:48,160
attacker can actually modify

1247
00:56:48,160 --> 00:56:50,960
quite a lot

1248
00:56:51,440 --> 00:56:53,599
and then also it was a comment from

1249
00:56:53,599 --> 00:56:56,720
bernard about

1250
00:56:56,839 --> 00:56:58,240
the

1251
00:56:58,240 --> 00:57:00,720
during this discussion of protected

1252
00:57:00,720 --> 00:57:01,680
failure

1253
00:57:01,680 --> 00:57:04,960
that this was important for availability

1254
00:57:04,960 --> 00:57:08,400
uh then there has been a discussion

1255
00:57:08,400 --> 00:57:11,599
on guitar i think the conclusion

1256
00:57:11,599 --> 00:57:15,040
is that the tls is quite

1257
00:57:15,040 --> 00:57:17,920
it's i think this academic paper about

1258
00:57:17,920 --> 00:57:19,680
protected failures was

1259
00:57:19,680 --> 00:57:23,920
they they tried to focus too narrowly on

1260
00:57:23,920 --> 00:57:27,359
one attack but there's basically

1261
00:57:27,359 --> 00:57:29,280
any number of other attacks that do the

1262
00:57:29,280 --> 00:57:31,119
same thing basically any

1263
00:57:31,119 --> 00:57:34,640
package you send to tls makes it fail so

1264
00:57:34,640 --> 00:57:37,040
there's basically nothing we can do here

1265
00:57:37,040 --> 00:57:38,720
but that's probably

1266
00:57:38,720 --> 00:57:42,480
acceptable because you can always try to

1267
00:57:42,480 --> 00:57:45,680
connect again

1268
00:57:45,920 --> 00:57:48,640
and there's a comment from you one so

1269
00:57:48,640 --> 00:57:49,280
these

1270
00:57:49,280 --> 00:57:51,440
two have been added to the pull request

1271
00:57:51,440 --> 00:57:53,040
also comment from

1272
00:57:53,040 --> 00:57:57,040
you that the similar text is needed on

1273
00:57:57,040 --> 00:58:00,559
success indications but based on the

1274
00:58:00,559 --> 00:58:03,119
discussion between bernard and mohit it

1275
00:58:03,119 --> 00:58:04,240
seems a bit

1276
00:58:04,240 --> 00:58:07,920
unclear exactly what what and when the

1277
00:58:07,920 --> 00:58:10,960
protected success

1278
00:58:10,960 --> 00:58:14,400
protects against so

1279
00:58:15,760 --> 00:58:18,240
bernard

1280
00:58:20,960 --> 00:58:23,680
i don't understand where it says that

1281
00:58:23,680 --> 00:58:25,119
protective failure

1282
00:58:25,119 --> 00:58:28,559
uh may be unauthenticated

1283
00:58:28,559 --> 00:58:31,599
um the whole 3748 defines protective

1284
00:58:31,599 --> 00:58:33,200
failure as

1285
00:58:33,200 --> 00:58:34,799
what does it mean to have integrity

1286
00:58:34,799 --> 00:58:39,200
protection but are unauthenticated

1287
00:58:46,880 --> 00:58:48,839
they've got to be integrity protected

1288
00:58:48,839 --> 00:58:51,040
right

1289
00:58:51,040 --> 00:58:52,880
well if you do opportunistic beefy

1290
00:58:52,880 --> 00:58:54,559
helmet and

1291
00:58:54,559 --> 00:58:57,280
then use the keys from there to to

1292
00:58:57,280 --> 00:58:59,359
protect the failure indication

1293
00:58:59,359 --> 00:59:01,280
it's integrity protected but you don't

1294
00:59:01,280 --> 00:59:03,200
know who is sending

1295
00:59:03,200 --> 00:59:05,200
like or like you don't you haven't

1296
00:59:05,200 --> 00:59:07,359
authenticated who is sending that so in

1297
00:59:07,359 --> 00:59:09,119
dls 1.3

1298
00:59:09,119 --> 00:59:11,920
uh at least some of the early failure if

1299
00:59:11,920 --> 00:59:13,599
and john you can correct me some of the

1300
00:59:13,599 --> 00:59:15,119
early failure messages may be

1301
00:59:15,119 --> 00:59:16,960
unauthenticated if you have not yet

1302
00:59:16,960 --> 00:59:18,559
received the

1303
00:59:18,559 --> 00:59:20,880
the certificate of the other end point

1304
00:59:20,880 --> 00:59:22,960
but they they will still be

1305
00:59:22,960 --> 00:59:25,839
protected with the with the first dp

1306
00:59:25,839 --> 00:59:26,319
helmet

1307
00:59:26,319 --> 00:59:29,280
exchange or keys resulting from here

1308
00:59:29,280 --> 00:59:29,680
okay

1309
00:59:29,680 --> 00:59:34,879
okay yeah that's my understanding

1310
00:59:41,119 --> 00:59:45,359
this is alan i i think for me

1311
00:59:45,359 --> 00:59:48,400
the main purpose to have protected

1312
00:59:48,400 --> 00:59:49,040
failure

1313
00:59:49,040 --> 00:59:52,960
is it's it's generally good to

1314
00:59:52,960 --> 00:59:56,160
protect your your application signaling

1315
00:59:56,160 --> 00:59:59,520
but the only thing i really care about

1316
00:59:59,520 --> 01:00:03,040
is that the errors get back to the end

1317
01:00:03,040 --> 01:00:05,599
user and administrator

1318
01:00:05,599 --> 01:00:08,720
um and protecting them seems to

1319
01:00:08,720 --> 01:00:11,520
make that they make the correct errors

1320
01:00:11,520 --> 01:00:12,240
go back

1321
01:00:12,240 --> 01:00:14,880
right so you get you know certificate

1322
01:00:14,880 --> 01:00:16,319
expired or whatever

1323
01:00:16,319 --> 01:00:18,720
rather than the ubiquitous failed and

1324
01:00:18,720 --> 01:00:20,640
now nobody knows what to do or how to

1325
01:00:20,640 --> 01:00:21,040
fix

1326
01:00:21,040 --> 01:00:25,280
it so the protection here is ensuring

1327
01:00:25,280 --> 01:00:25,599
that

1328
01:00:25,599 --> 01:00:28,000
it's the correct error getting back

1329
01:00:28,000 --> 01:00:30,079
packet modification is just

1330
01:00:30,079 --> 01:00:31,680
yeah something went wrong with the

1331
01:00:31,680 --> 01:00:33,520
connection which is rather a lot

1332
01:00:33,520 --> 01:00:34,720
different than

1333
01:00:34,720 --> 01:00:37,119
the server i trust told me that my

1334
01:00:37,119 --> 01:00:40,480
certificate has expired

1335
01:00:40,880 --> 01:00:43,920
there is a upcoming slide on maths and

1336
01:00:43,920 --> 01:00:48,880
error which is related to the more

1337
01:00:48,960 --> 01:00:52,400
finding errors yeah

1338
01:00:55,520 --> 01:00:59,040
well at least this

1339
01:00:59,040 --> 01:01:03,359
uh text looks fine to me and i would be

1340
01:01:03,359 --> 01:01:07,599
uh at least happy to see this merged

1341
01:01:07,599 --> 01:01:10,720
before we publish 15 but others can

1342
01:01:10,720 --> 01:01:13,680
obviously chime in

1343
01:01:15,280 --> 01:01:18,000
okay elliot

1344
01:01:20,000 --> 01:01:23,200
guys thanks for the opportunity to

1345
01:01:23,200 --> 01:01:24,000
comment

1346
01:01:24,000 --> 01:01:26,960
um and i think this is okay uh just to

1347
01:01:26,960 --> 01:01:27,760
allen's point

1348
01:01:27,760 --> 01:01:29,359
um anytime you say errors get back to

1349
01:01:29,359 --> 01:01:31,280
users be careful with that one

1350
01:01:31,280 --> 01:01:32,960
because there might not be a user on at

1351
01:01:32,960 --> 01:01:34,559
least one end of the connection

1352
01:01:34,559 --> 01:01:38,160
and and if that's your goal we you know

1353
01:01:38,160 --> 01:01:39,520
it's it's a deep deep

1354
01:01:39,520 --> 01:01:43,920
rabbit hole um which i don't want

1355
01:01:43,920 --> 01:01:46,799
sorry it's possible

1356
01:01:47,440 --> 01:01:50,480
yeah um i i i guess my position could be

1357
01:01:50,480 --> 01:01:51,680
more stated as

1358
01:01:51,680 --> 01:01:54,400
i am against the idea that no errors go

1359
01:01:54,400 --> 01:01:56,000
back to the user

1360
01:01:56,000 --> 01:02:00,160
um which you know is is not proposed but

1361
01:02:00,160 --> 01:02:02,079
yes requiring things going back to the

1362
01:02:02,079 --> 01:02:04,160
user is rather too strong

1363
01:02:04,160 --> 01:02:06,400
okay yeah that but this is otherwise i

1364
01:02:06,400 --> 01:02:08,559
mean as far as it goes it's okay it's a

1365
01:02:08,559 --> 01:02:10,319
this this is a really hard problem

1366
01:02:10,319 --> 01:02:13,039
because in the context of iot

1367
01:02:13,039 --> 01:02:16,160
in particular and something we we don't

1368
01:02:16,160 --> 01:02:17,520
i don't think anybody has a good answer

1369
01:02:17,520 --> 01:02:21,839
for by the way so

1370
01:02:22,559 --> 01:02:25,760
okay so i think the the spirit of this

1371
01:02:25,760 --> 01:02:29,680
um you know modification is

1372
01:02:29,680 --> 01:02:31,359
is good i think maybe there's a little

1373
01:02:31,359 --> 01:02:33,359
wordsmithing that maybe could go on to

1374
01:02:33,359 --> 01:02:36,000
make sure that we're clear on

1375
01:02:36,000 --> 01:02:40,319
uh what what some of these uh

1376
01:02:40,319 --> 01:02:42,640
things mean but i think it should be

1377
01:02:42,640 --> 01:02:44,079
pretty easy to resolve

1378
01:02:44,079 --> 01:02:49,839
ellie did you have uh more to say

1379
01:02:51,760 --> 01:02:54,000
okay

1380
01:02:55,839 --> 01:02:59,599
good then next

1381
01:02:59,599 --> 01:03:02,640
so here's an issue that i

1382
01:03:02,640 --> 01:03:06,720
opened so tls working group

1383
01:03:06,720 --> 01:03:10,079
has decided or at least they have

1384
01:03:10,079 --> 01:03:14,799
adopted um rfc 8446

1385
01:03:14,799 --> 01:03:18,000
this which changes the terminology for

1386
01:03:18,000 --> 01:03:19,280
tls 1.3

1387
01:03:19,280 --> 01:03:22,880
and tls 1.2 and this

1388
01:03:22,880 --> 01:03:26,240
terminology change is to remove

1389
01:03:26,240 --> 01:03:29,359
master everywhere and replace it with

1390
01:03:29,359 --> 01:03:33,039
main and where master was not really

1391
01:03:33,039 --> 01:03:36,319
needed it's just removed so

1392
01:03:36,319 --> 01:03:39,839
the suggestion change here is to do this

1393
01:03:39,839 --> 01:03:42,079
before publishing because this will be

1394
01:03:42,079 --> 01:03:43,440
the future of tls

1395
01:03:43,440 --> 01:03:46,319
so change master secret to main secret

1396
01:03:46,319 --> 01:03:46,640
and

1397
01:03:46,640 --> 01:03:49,039
export the master secret to export the

1398
01:03:49,039 --> 01:03:50,160
secret

1399
01:03:50,160 --> 01:03:53,039
and that would be the two changes to the

1400
01:03:53,039 --> 01:03:56,559
tls.3 document

1401
01:03:56,960 --> 01:03:59,839
i think there has been no comments on

1402
01:03:59,839 --> 01:04:00,960
github

1403
01:04:00,960 --> 01:04:04,880
on these proposed changes at all

1404
01:04:07,760 --> 01:04:09,760
yeah i think it's better to align with

1405
01:04:09,760 --> 01:04:12,000
tls modifications now instead of having

1406
01:04:12,000 --> 01:04:15,119
to make changes later

1407
01:04:21,039 --> 01:04:24,160
good so

1408
01:04:24,160 --> 01:04:27,760
this is uh the issue here related to the

1409
01:04:27,760 --> 01:04:30,559
mustang error discussion we basically

1410
01:04:30,559 --> 01:04:32,000
already

1411
01:04:32,000 --> 01:04:34,960
had uh so this is another pull request

1412
01:04:34,960 --> 01:04:37,359
that says that you

1413
01:04:37,359 --> 01:04:39,520
uh whenever an implementation encounters

1414
01:04:39,520 --> 01:04:42,319
a fatal error condition it must send an

1415
01:04:42,319 --> 01:04:43,599
appropriate tls

1416
01:04:43,599 --> 01:04:46,799
error alert

1417
01:04:47,280 --> 01:04:50,400
and also some all this

1418
01:04:50,400 --> 01:04:53,760
green text here is new uh

1419
01:04:53,760 --> 01:04:55,520
i don't know if the text was suggested

1420
01:04:55,520 --> 01:04:58,400
by ireland or based on suggestions by

1421
01:04:58,400 --> 01:05:01,440
alan um

1422
01:05:03,680 --> 01:05:06,880
yeah and then comment on

1423
01:05:06,880 --> 01:05:10,000
github i think from you that

1424
01:05:10,000 --> 01:05:13,119
user cancel behavior needs to be clear

1425
01:05:13,119 --> 01:05:15,039
when we talk about

1426
01:05:15,039 --> 01:05:18,640
error and i agree

1427
01:05:18,640 --> 01:05:20,720
problems with this is we probably need

1428
01:05:20,720 --> 01:05:23,039
to wait on

1429
01:05:23,039 --> 01:05:26,559
the consensus for protected indication

1430
01:05:26,559 --> 01:05:29,200
success of failure before writing

1431
01:05:29,200 --> 01:05:31,760
something about user cancelled and

1432
01:05:31,760 --> 01:05:35,039
then the use of user cancel in tls 103

1433
01:05:35,039 --> 01:05:36,000
is unfortunately

1434
01:05:36,000 --> 01:05:40,319
unclear uh the specification is

1435
01:05:40,319 --> 01:05:42,880
contradictory and an issue has been

1436
01:05:42,880 --> 01:05:43,599
opened

1437
01:05:43,599 --> 01:05:46,960
for the beast version

1438
01:05:46,960 --> 01:05:50,000
the the issue was opened by

1439
01:05:50,000 --> 01:05:52,559
based on my comment so i think there's

1440
01:05:52,559 --> 01:05:53,760
agreement

1441
01:05:53,760 --> 01:05:55,760
among the tls people that this is

1442
01:05:55,760 --> 01:05:58,160
unclear

1443
01:06:02,160 --> 01:06:04,240
okay unless there's a more discussion

1444
01:06:04,240 --> 01:06:06,400
here i think we'll have to see how that

1445
01:06:06,400 --> 01:06:10,799
discussion on uh 8446 bits

1446
01:06:10,799 --> 01:06:19,839
can resolve

1447
01:06:20,559 --> 01:06:23,760
good so then

1448
01:06:23,760 --> 01:06:27,119
here is uh text on the e

1449
01:06:27,119 --> 01:06:31,520
state machine so this is based on

1450
01:06:31,720 --> 01:06:34,720
suggestions um first

1451
01:06:34,720 --> 01:06:38,480
from uh mostly from bernard in his

1452
01:06:38,480 --> 01:06:41,440
mailed mail some months ago and then

1453
01:06:41,440 --> 01:06:42,640
based on

1454
01:06:42,640 --> 01:06:45,839
discussions on mostly on the list maybe

1455
01:06:45,839 --> 01:06:46,640
some on

1456
01:06:46,640 --> 01:06:51,598
github also um

1457
01:06:52,799 --> 01:06:56,640
and yeah i don't know if people have

1458
01:06:56,640 --> 01:07:00,640
read these pull requests on

1459
01:07:00,640 --> 01:07:03,440
on github

1460
01:07:04,319 --> 01:07:08,079
but i think to finalize this section

1461
01:07:08,079 --> 01:07:11,440
we would need a conclusion on what to

1462
01:07:11,440 --> 01:07:16,480
use for protected indication

1463
01:07:16,799 --> 01:07:20,480
but successful failure

1464
01:07:23,599 --> 01:07:27,520
and this references

1465
01:07:27,520 --> 01:07:30,559
three seven but uh

1466
01:07:30,559 --> 01:07:34,000
but only in the info it references

1467
01:07:34,000 --> 01:07:36,799
it describes how you would implement

1468
01:07:36,799 --> 01:07:39,599
according to 4137 but

1469
01:07:39,599 --> 01:07:43,119
as this is an informal document it tries

1470
01:07:43,119 --> 01:07:43,839
to not

1471
01:07:43,839 --> 01:07:46,880
make it normative to follow four one

1472
01:07:46,880 --> 01:07:47,920
three

1473
01:07:47,920 --> 01:07:51,039
seven um even it seems that

1474
01:07:51,039 --> 01:07:52,960
my understanding now is that basically

1475
01:07:52,960 --> 01:07:56,880
all implementations are following

1476
01:08:02,720 --> 01:08:06,480
yeah i guess this is the perhaps the

1477
01:08:06,480 --> 01:08:08,720
most important and biggest issue we need

1478
01:08:08,720 --> 01:08:10,960
to resolve is

1479
01:08:10,960 --> 01:08:13,280
so i think the error and failure alerts

1480
01:08:13,280 --> 01:08:14,400
is we

1481
01:08:14,400 --> 01:08:17,359
more or less agree on it's mostly on the

1482
01:08:17,359 --> 01:08:19,520
protected result indication whether it's

1483
01:08:19,520 --> 01:08:21,040
closed notify or

1484
01:08:21,040 --> 01:08:25,839
the one byte of application data

1485
01:08:29,040 --> 01:08:33,520
bernard yeah um

1486
01:08:33,520 --> 01:08:35,359
and this is probably more of a question

1487
01:08:35,359 --> 01:08:37,439
for alan and jorge but

1488
01:08:37,439 --> 01:08:40,560
um given the issues in the tls libraries

1489
01:08:40,560 --> 01:08:43,040
about sending a closed notify

1490
01:08:43,040 --> 01:08:46,319
um are you it seems like that

1491
01:08:46,319 --> 01:08:48,479
the question is closed at least for you

1492
01:08:48,479 --> 01:08:50,560
guys or am i interpreting that correctly

1493
01:08:50,560 --> 01:08:52,319
that it really has to be the application

1494
01:08:52,319 --> 01:08:53,198
data

1495
01:08:53,198 --> 01:08:55,520
because you can't get the close notified

1496
01:08:55,520 --> 01:08:58,400
you can't control it

1497
01:08:59,439 --> 01:09:03,040
um from most of the issues is from my

1498
01:09:03,040 --> 01:09:05,359
side and open ssl

1499
01:09:05,359 --> 01:09:08,719
i'd say it's an open question right um

1500
01:09:08,719 --> 01:09:10,960
i've had my my guys looking into this

1501
01:09:10,960 --> 01:09:12,399
and it's one of these

1502
01:09:12,399 --> 01:09:15,839
you know tell openssl not to do a quiet

1503
01:09:15,839 --> 01:09:18,000
shutdown where it just closes the

1504
01:09:18,000 --> 01:09:20,000
connection and doesn't send close notify

1505
01:09:20,000 --> 01:09:22,479
so it should be sending the close notify

1506
01:09:22,479 --> 01:09:24,799
we say please shut down

1507
01:09:24,799 --> 01:09:28,640
the tls connection it appears to we say

1508
01:09:28,640 --> 01:09:31,040
is there data available to send to the

1509
01:09:31,040 --> 01:09:31,920
other end

1510
01:09:31,920 --> 01:09:34,960
and the answer is no um

1511
01:09:34,960 --> 01:09:37,759
so the question is are we using the

1512
01:09:37,759 --> 01:09:38,719
openssl

1513
01:09:38,719 --> 01:09:42,960
api incorrectly or um

1514
01:09:42,960 --> 01:09:46,799
is openssl 1 just completely broken here

1515
01:09:46,799 --> 01:09:49,839
i i don't know enough to say what i do

1516
01:09:49,839 --> 01:09:50,319
know

1517
01:09:50,319 --> 01:09:53,040
is sending the one byte of application

1518
01:09:53,040 --> 01:09:53,520
data

1519
01:09:53,520 --> 01:09:56,560
is a well-tested code path not just for

1520
01:09:56,560 --> 01:09:57,280
eep

1521
01:09:57,280 --> 01:10:00,960
because of peep and ttls but for tls in

1522
01:10:00,960 --> 01:10:02,159
general

1523
01:10:02,159 --> 01:10:04,640
i think we're probably running into a

1524
01:10:04,640 --> 01:10:06,880
corner case an open ssl

1525
01:10:06,880 --> 01:10:09,280
where it just doesn't expect to do the

1526
01:10:09,280 --> 01:10:10,480
full setup

1527
01:10:10,480 --> 01:10:16,320
and then tear it down i

1528
01:10:16,320 --> 01:10:18,400
personally think application data seems

1529
01:10:18,400 --> 01:10:19,440
like the most

1530
01:10:19,440 --> 01:10:21,520
logical choice now when we are talking

1531
01:10:21,520 --> 01:10:22,480
about

1532
01:10:22,480 --> 01:10:26,480
protected success and not commitment to

1533
01:10:26,480 --> 01:10:28,080
not send more

1534
01:10:28,080 --> 01:10:32,080
handshake question do we know that

1535
01:10:32,080 --> 01:10:34,159
application data will work with

1536
01:10:34,159 --> 01:10:37,440
all the other e methods and

1537
01:10:37,440 --> 01:10:40,880
do we know if application data will pass

1538
01:10:40,880 --> 01:10:44,239
ben's discuss i don't think i've

1539
01:10:44,239 --> 01:10:48,080
seen a clear answer on that but i assume

1540
01:10:48,080 --> 01:10:50,320
ben would not have a problem with

1541
01:10:50,320 --> 01:10:52,000
application that that data has a

1542
01:10:52,000 --> 01:10:53,440
predicted

1543
01:10:53,440 --> 01:10:57,760
success i think his problem was with

1544
01:10:57,760 --> 01:11:01,360
trying to profile affecting the tls

1545
01:11:01,360 --> 01:11:04,719
state machine yeah

1546
01:11:04,719 --> 01:11:08,719
so my take on that would be

1547
01:11:08,719 --> 01:11:11,440
that the application data is an

1548
01:11:11,440 --> 01:11:12,560
application

1549
01:11:12,560 --> 01:11:15,760
layer signal that each tls is

1550
01:11:15,760 --> 01:11:18,960
done and as a side effect

1551
01:11:18,960 --> 01:11:22,000
the etls layer promises not to do

1552
01:11:22,000 --> 01:11:25,120
any more tls negotiation so you're not

1553
01:11:25,120 --> 01:11:26,239
making a statement

1554
01:11:26,239 --> 01:11:29,600
about the tls layer which is what some

1555
01:11:29,600 --> 01:11:31,840
of that original phrasing sounded like

1556
01:11:31,840 --> 01:11:34,560
you're making a statement that the tls

1557
01:11:34,560 --> 01:11:37,040
implementation and the eeplayer

1558
01:11:37,040 --> 01:11:39,199
promises not to do any more poking of

1559
01:11:39,199 --> 01:11:41,600
tls

1560
01:11:41,600 --> 01:11:45,600
for the other eat methods

1561
01:11:45,679 --> 01:11:48,640
the application data isn't necessary for

1562
01:11:48,640 --> 01:11:50,239
normal authentication

1563
01:11:50,239 --> 01:11:53,280
because they send their own application

1564
01:11:53,280 --> 01:11:54,320
data

1565
01:11:54,320 --> 01:11:57,360
and for resumption they're

1566
01:11:57,360 --> 01:12:00,320
exactly the case of eep tls for

1567
01:12:00,320 --> 01:12:01,440
resumption

1568
01:12:01,440 --> 01:12:03,520
and from a practical point really the

1569
01:12:03,520 --> 01:12:05,920
only difference is that you type code

1570
01:12:05,920 --> 01:12:09,600
so it works perfectly fine there um

1571
01:12:09,600 --> 01:12:11,520
there is some caveats i'll i'll get into

1572
01:12:11,520 --> 01:12:13,920
later with the other eep document

1573
01:12:13,920 --> 01:12:16,320
but yes application data should be

1574
01:12:16,320 --> 01:12:19,360
perfectly fine here

1575
01:12:20,400 --> 01:12:23,760
should we try to go for application data

1576
01:12:23,760 --> 01:12:27,280
after checking with ben that

1577
01:12:27,280 --> 01:12:30,960
this will pass his discussion

1578
01:12:32,159 --> 01:12:35,360
i think we should just put this in 15

1579
01:12:35,360 --> 01:12:38,719
with application data

1580
01:12:38,800 --> 01:12:42,239
and you know this will go back to the

1581
01:12:42,239 --> 01:12:45,679
the new isd that gets seated and we will

1582
01:12:45,679 --> 01:12:49,120
see my feeling is

1583
01:12:49,120 --> 01:12:52,080
if if i understood ben's previous review

1584
01:12:52,080 --> 01:12:53,760
was that it was

1585
01:12:53,760 --> 01:12:55,679
mostly because we were using it as a

1586
01:12:55,679 --> 01:12:57,600
commitment to no more both handshake

1587
01:12:57,600 --> 01:12:59,360
messages that was causing

1588
01:12:59,360 --> 01:13:02,320
the problem and using it as a success

1589
01:13:02,320 --> 01:13:04,000
indication should be fine and

1590
01:13:04,000 --> 01:13:06,159
and it should pass through the iesg so i

1591
01:13:06,159 --> 01:13:07,440
don't think we should wait

1592
01:13:07,440 --> 01:13:11,440
for that just do this publish 15

1593
01:13:11,440 --> 01:13:13,840
and we seem to have implementations that

1594
01:13:13,840 --> 01:13:15,760
are currently using the one byte of

1595
01:13:15,760 --> 01:13:17,520
application data

1596
01:13:17,520 --> 01:13:22,400
yeah and then as soon as

1597
01:13:22,800 --> 01:13:27,120
all alerts would be tailored

1598
01:13:28,239 --> 01:13:31,760
yeah so yeah i think um

1599
01:13:31,760 --> 01:13:35,199
unless uh i i think for me

1600
01:13:35,199 --> 01:13:37,840
we we have interoperable implementations

1601
01:13:37,840 --> 01:13:39,920
with uh application data

1602
01:13:39,920 --> 01:13:42,000
um and closed notified seems like even

1603
01:13:42,000 --> 01:13:43,840
if we can get it to work there's

1604
01:13:43,840 --> 01:13:45,440
a little bit of question as to how much

1605
01:13:45,440 --> 01:13:48,080
control you all have over that message

1606
01:13:48,080 --> 01:13:51,520
and i i also think that uh

1607
01:13:51,520 --> 01:13:53,840
you know the iesg comment is something

1608
01:13:53,840 --> 01:13:54,800
that uh

1609
01:13:54,800 --> 01:13:58,080
was more on it the way it was uh phrased

1610
01:13:58,080 --> 01:14:01,600
to be a control how

1611
01:14:01,600 --> 01:14:03,840
tls was behaving than how he was

1612
01:14:03,840 --> 01:14:04,800
behaving

1613
01:14:04,800 --> 01:14:07,120
so i think yeah we should move forward

1614
01:14:07,120 --> 01:14:08,560
with that unless anybody and give

1615
01:14:08,560 --> 01:14:09,120
anybody

1616
01:14:09,120 --> 01:14:11,600
a chance here to voice any objections

1617
01:14:11,600 --> 01:14:12,320
that they have

1618
01:14:12,320 --> 01:14:14,880
to using application data instead of

1619
01:14:14,880 --> 01:14:29,840
close notify

1620
01:14:32,960 --> 01:14:35,040
okay honest i don't know if you want to

1621
01:14:35,040 --> 01:14:36,080
say anything

1622
01:14:36,080 --> 01:14:43,840
at the mic or not

1623
01:14:46,320 --> 01:14:50,159
can you hear me yes okay um

1624
01:14:50,159 --> 01:14:52,800
no but i i i will definitely uh look at

1625
01:14:52,800 --> 01:14:53,840
the open sl

1626
01:14:53,840 --> 01:14:57,840
issue and i also wanted to um

1627
01:14:57,840 --> 01:15:01,199
implement this uh document in embed dls

1628
01:15:01,199 --> 01:15:03,280
which i didn't got to uh last week

1629
01:15:03,280 --> 01:15:05,280
because um

1630
01:15:05,280 --> 01:15:07,840
the suit stuff took a little longer than

1631
01:15:07,840 --> 01:15:08,960
i thought

1632
01:15:08,960 --> 01:15:10,400
everything always takes longer than i

1633
01:15:10,400 --> 01:15:12,559
think

1634
01:15:13,840 --> 01:15:15,760
okay cool yeah it would be great to have

1635
01:15:15,760 --> 01:15:16,880
another uh

1636
01:15:16,880 --> 01:15:20,560
implementation implementer so i i know

1637
01:15:20,560 --> 01:15:23,760
uh alan and jorge and folks would love

1638
01:15:23,760 --> 01:15:25,600
to have another

1639
01:15:25,600 --> 01:15:27,120
implementation to interrupt with so that

1640
01:15:27,120 --> 01:15:29,679
would be great

1641
01:15:29,920 --> 01:15:32,960
we'll get in touch with them

1642
01:15:37,120 --> 01:15:41,760
good next slide

1643
01:15:46,640 --> 01:15:50,480
so this is about more information

1644
01:15:50,480 --> 01:15:53,760
and in key derivation and

1645
01:15:53,760 --> 01:15:56,800
beating down i think

1646
01:15:56,800 --> 01:16:00,000
this was raised by

1647
01:16:00,000 --> 01:16:03,280
martin thompson and you

1648
01:16:03,280 --> 01:16:06,080
and i think it seems to be consensus

1649
01:16:06,080 --> 01:16:06,640
that

1650
01:16:06,640 --> 01:16:09,440
no if more in additional information is

1651
01:16:09,440 --> 01:16:12,320
needed in the key derivation

1652
01:16:12,320 --> 01:16:16,000
whoever it seems to be consensus that

1653
01:16:16,000 --> 01:16:19,280
the text in rfc 521

1654
01:16:19,280 --> 01:16:23,199
6 is lacking and that more

1655
01:16:23,199 --> 01:16:26,800
guidance is is needed

1656
01:16:26,800 --> 01:16:29,360
and this is currently only an issue

1657
01:16:29,360 --> 01:16:30,239
there's no

1658
01:16:30,239 --> 01:16:33,600
pull request this

1659
01:16:33,600 --> 01:16:36,640
is i just took the latest here's the

1660
01:16:36,640 --> 01:16:38,560
latest suggestion by you

1661
01:16:38,560 --> 01:16:43,840
on the github issue um

1662
01:16:45,280 --> 01:16:49,360
i think we need what is needed is maybe

1663
01:16:49,360 --> 01:16:51,840
some high level security requirement

1664
01:16:51,840 --> 01:16:53,440
which might not go into

1665
01:16:53,440 --> 01:16:56,719
details and then guidance on different

1666
01:16:56,719 --> 01:16:57,520
ways how

1667
01:16:57,520 --> 01:17:03,120
to do this securely

1668
01:17:11,360 --> 01:17:13,280
yeah i think this will need some more

1669
01:17:13,280 --> 01:17:16,000
discussion on the list um

1670
01:17:16,000 --> 01:17:17,520
probably although it's be good to

1671
01:17:17,520 --> 01:17:20,080
discuss here if people have uh views

1672
01:17:20,080 --> 01:17:24,960
i think currently it's a little bit

1673
01:17:24,960 --> 01:17:27,440
uncertain how implementations behave and

1674
01:17:27,440 --> 01:17:29,360
and what we would recommend them to

1675
01:17:29,360 --> 01:17:31,280
but well i guess there is a some good

1676
01:17:31,280 --> 01:17:33,199
examples that we can follow with kind of

1677
01:17:33,199 --> 01:17:33,840
what

1678
01:17:33,840 --> 01:17:37,520
like what um uh edgy rome does

1679
01:17:37,520 --> 01:17:41,040
um but uh i think we need some

1680
01:17:41,040 --> 01:17:45,840
some guidance here

1681
01:18:00,000 --> 01:18:03,120
yeah more discussion on github and and

1682
01:18:03,120 --> 01:18:04,320
or

1683
01:18:04,320 --> 01:18:08,880
actual pull request suggestions would be

1684
01:18:10,840 --> 01:18:13,840
welcome

1685
01:18:14,239 --> 01:18:16,559
okay

1686
01:18:17,600 --> 01:18:20,320
so and then i think this might be the

1687
01:18:20,320 --> 01:18:20,960
last

1688
01:18:20,960 --> 01:18:25,280
slide so this is the summary of

1689
01:18:25,280 --> 01:18:28,480
alan's review that was sent in the last

1690
01:18:28,480 --> 01:18:32,800
week maybe we can discuss these

1691
01:18:32,800 --> 01:18:36,080
points one by one

1692
01:18:36,080 --> 01:18:39,520
the first is that it says that

1693
01:18:39,520 --> 01:18:42,880
the document defines this with etls1.3

1694
01:18:42,880 --> 01:18:44,480
or higher

1695
01:18:44,480 --> 01:18:47,280
nylon says this is not true and all

1696
01:18:47,280 --> 01:18:50,960
references to higher should be

1697
01:18:52,840 --> 01:18:55,679
removed

1698
01:18:55,679 --> 01:18:59,199
well i

1699
01:18:59,199 --> 01:19:01,360
run into implementation issues as i

1700
01:19:01,360 --> 01:19:02,320
noticed

1701
01:19:02,320 --> 01:19:05,520
um this came up as openssl

1702
01:19:05,520 --> 01:19:08,560
started implementing tls 1.3 suddenly

1703
01:19:08,560 --> 01:19:10,400
all kinds of people complained that

1704
01:19:10,400 --> 01:19:12,880
hey everything started negotiating tls

1705
01:19:12,880 --> 01:19:14,000
1.3

1706
01:19:14,000 --> 01:19:17,120
and it doesn't work um and the answer is

1707
01:19:17,120 --> 01:19:18,400
oh yeah

1708
01:19:18,400 --> 01:19:20,840
neither neither the epir nor the server

1709
01:19:20,840 --> 01:19:22,400
side

1710
01:19:22,400 --> 01:19:25,840
put maximum limits in the supported tls

1711
01:19:25,840 --> 01:19:26,640
version

1712
01:19:26,640 --> 01:19:29,520
and those definitely caused deployment

1713
01:19:29,520 --> 01:19:30,400
issues

1714
01:19:30,400 --> 01:19:32,719
so my two sensors we have no idea what

1715
01:19:32,719 --> 01:19:34,960
tls 1.4 is going to do

1716
01:19:34,960 --> 01:19:37,679
so this document based on past pain

1717
01:19:37,679 --> 01:19:39,199
should suggest that

1718
01:19:39,199 --> 01:19:42,880
we do tls 1.3 and everybody forbids tls

1719
01:19:42,880 --> 01:19:44,159
1.4

1720
01:19:44,159 --> 01:19:46,000
until such time as we know that what

1721
01:19:46,000 --> 01:19:50,880
that means

1722
01:19:50,880 --> 01:19:54,480
well about this uh tls 1.3 or higher at

1723
01:19:54,480 --> 01:19:56,800
least

1724
01:19:56,800 --> 01:19:59,120
i'll have to double check if i'm quoting

1725
01:19:59,120 --> 01:19:59,920
rob

1726
01:19:59,920 --> 01:20:04,400
correctly uh from his isg review he was

1727
01:20:04,400 --> 01:20:05,760
also saying that

1728
01:20:05,760 --> 01:20:08,880
the previous epls document was not tied

1729
01:20:08,880 --> 01:20:11,840
to a specific tls version

1730
01:20:11,840 --> 01:20:14,800
and why is this document specifically

1731
01:20:14,800 --> 01:20:16,800
tied to tls 1.3 of course

1732
01:20:16,800 --> 01:20:19,280
knowing that none of us are at least i

1733
01:20:19,280 --> 01:20:21,280
don't know what tls 1.4

1734
01:20:21,280 --> 01:20:23,280
would look like maybe it has all sorts

1735
01:20:23,280 --> 01:20:24,400
of

1736
01:20:24,400 --> 01:20:27,360
post quantum magic and whatnot and maybe

1737
01:20:27,360 --> 01:20:29,600
we'll have to do everything in etls from

1738
01:20:29,600 --> 01:20:30,880
scratch

1739
01:20:30,880 --> 01:20:34,080
but if 1.4 is is

1740
01:20:34,080 --> 01:20:36,400
you know similar or exactly with minor

1741
01:20:36,400 --> 01:20:39,199
modifications to 1.3

1742
01:20:39,199 --> 01:20:41,440
maybe we won't require another update to

1743
01:20:41,440 --> 01:20:43,040
the epls document

1744
01:20:43,040 --> 01:20:45,199
and it should be independent of the dls

1745
01:20:45,199 --> 01:20:46,800
version i'm not saying i have strong

1746
01:20:46,800 --> 01:20:48,560
opinions on on this but

1747
01:20:48,560 --> 01:20:51,760
i also see rob's point at least from his

1748
01:20:51,760 --> 01:20:53,679
isd review that

1749
01:20:53,679 --> 01:20:55,520
maybe we can leave it open and if there

1750
01:20:55,520 --> 01:20:57,600
is a dramatic change in the next tls

1751
01:20:57,600 --> 01:20:58,560
version we'll

1752
01:20:58,560 --> 01:21:01,120
we'll revisit and update or obsolete

1753
01:21:01,120 --> 01:21:02,639
this

1754
01:21:02,639 --> 01:21:05,280
i agree with allah that or higher should

1755
01:21:05,280 --> 01:21:06,159
be

1756
01:21:06,159 --> 01:21:09,360
removed because we don't know how tls

1757
01:21:09,360 --> 01:21:11,120
1.4 or 2 but

1758
01:21:11,120 --> 01:21:14,880
top 0 will look like but i'm

1759
01:21:14,880 --> 01:21:18,000
i would prefer to keep it open just

1760
01:21:18,000 --> 01:21:18,880
writing me

1761
01:21:18,880 --> 01:21:21,360
and that we don't know how this will

1762
01:21:21,360 --> 01:21:22,719
work with

1763
01:21:22,719 --> 01:21:26,719
with future versions rfc 5216

1764
01:21:26,719 --> 01:21:29,520
works quite well with three different

1765
01:21:29,520 --> 01:21:30,560
versions of

1766
01:21:30,560 --> 01:21:43,280
tls before it it didn't work anymore

1767
01:21:43,280 --> 01:21:46,159
um yeah so i i think that we should look

1768
01:21:46,159 --> 01:21:47,120
at what quick did

1769
01:21:47,120 --> 01:21:49,280
a similar thing and it it seems like

1770
01:21:49,280 --> 01:21:50,639
like um

1771
01:21:50,639 --> 01:21:53,280
eap is unfortunately very tightly tied

1772
01:21:53,280 --> 01:21:55,040
to details of tls

1773
01:21:55,040 --> 01:21:57,199
in a way that a future version hopefully

1774
01:21:57,199 --> 01:21:58,639
wouldn't be

1775
01:21:58,639 --> 01:22:00,159
or you know something needs to come out

1776
01:22:00,159 --> 01:22:01,520
of this where it's like if you're going

1777
01:22:01,520 --> 01:22:03,440
to work on tls 1.4

1778
01:22:03,440 --> 01:22:05,280
here's what you need to do to avoid all

1779
01:22:05,280 --> 01:22:11,679
this pain again

1780
01:22:11,679 --> 01:22:14,960
yeah i think it has been during this

1781
01:22:14,960 --> 01:22:16,000
work there has been

1782
01:22:16,000 --> 01:22:19,840
very different comments on what epls

1783
01:22:19,840 --> 01:22:22,719
should be we have having comments that

1784
01:22:22,719 --> 01:22:24,000
if tls should not

1785
01:22:24,000 --> 01:22:26,800
specify anything about the tls version

1786
01:22:26,800 --> 01:22:27,199
at

1787
01:22:27,199 --> 01:22:29,920
all yes the interfaces between tls and

1788
01:22:29,920 --> 01:22:31,440
103 and then we have

1789
01:22:31,440 --> 01:22:33,679
comments from implementers that need to

1790
01:22:33,679 --> 01:22:34,960
specify very

1791
01:22:34,960 --> 01:22:38,320
much otherwise it will be security

1792
01:22:38,320 --> 01:22:41,520
issues yeah i think

1793
01:22:41,520 --> 01:22:43,840
the current status is somewhere

1794
01:22:43,840 --> 01:22:45,760
compromised between these

1795
01:22:45,760 --> 01:22:50,840
views probably similar to what rfc 5216

1796
01:22:50,840 --> 01:22:52,719
was

1797
01:22:52,719 --> 01:22:55,520
yeah i just really honest comment that

1798
01:22:55,520 --> 01:22:57,360
there are plenty of experts

1799
01:22:57,360 --> 01:23:00,400
who will be there to standardize the

1800
01:23:00,400 --> 01:23:03,440
epls 1.4 whenever that comes

1801
01:23:03,440 --> 01:23:06,320
so i guess he's uh yeah suggesting we

1802
01:23:06,320 --> 01:23:07,120
drop

1803
01:23:07,120 --> 01:23:10,960
or higher which is i guess fine

1804
01:23:12,320 --> 01:23:15,920
elliot yeah so um

1805
01:23:15,920 --> 01:23:18,639
i think there's i think mohi you just

1806
01:23:18,639 --> 01:23:20,239
captured it right that that that is

1807
01:23:20,239 --> 01:23:21,280
definitely where i

1808
01:23:21,280 --> 01:23:24,480
where i see things as well what i was

1809
01:23:24,480 --> 01:23:25,440
going to say though

1810
01:23:25,440 --> 01:23:28,000
was that um i think one of the things

1811
01:23:28,000 --> 01:23:30,560
that should come out of this document

1812
01:23:30,560 --> 01:23:35,360
is um a bit more participation

1813
01:23:35,360 --> 01:23:39,840
um in the tls working group from non-web

1814
01:23:39,840 --> 01:23:43,040
users of tls i mean i think

1815
01:23:43,040 --> 01:23:44,800
we're feeling the pain the group is

1816
01:23:44,800 --> 01:23:46,639
heavily web-based

1817
01:23:46,639 --> 01:23:48,239
and you know that's all right it means

1818
01:23:48,239 --> 01:23:49,840
it's a very very

1819
01:23:49,840 --> 01:23:53,120
large use but it's sort of on us a

1820
01:23:53,120 --> 01:23:55,280
little bit to keep those guys

1821
01:23:55,280 --> 01:23:58,480
reminded of what is necessary

1822
01:23:58,480 --> 01:24:00,880
to implement beyond that one use case in

1823
01:24:00,880 --> 01:24:02,159
particular

1824
01:24:02,159 --> 01:24:05,120
um what might be useful for the next

1825
01:24:05,120 --> 01:24:06,639
version of tls which

1826
01:24:06,639 --> 01:24:08,320
you know got who knows when it's going

1827
01:24:08,320 --> 01:24:09,760
to come

1828
01:24:09,760 --> 01:24:11,760
but it might be useful just to make sure

1829
01:24:11,760 --> 01:24:13,440
that there's an understanding of calling

1830
01:24:13,440 --> 01:24:14,639
interfaces

1831
01:24:14,639 --> 01:24:18,000
for non-web use cases like tls

1832
01:24:18,000 --> 01:24:22,080
or um other uh non-web use cases

1833
01:24:22,080 --> 01:24:25,440
maybe relating to uh maybe industrial

1834
01:24:25,440 --> 01:24:26,639
cases hana something

1835
01:24:26,639 --> 01:24:28,080
i'm sure you could come up with a good

1836
01:24:28,080 --> 01:24:30,960
zillion examples as well

1837
01:24:30,960 --> 01:24:34,159
um so maybe just a short report once

1838
01:24:34,159 --> 01:24:34,800
we're done

1839
01:24:34,800 --> 01:24:36,480
saying you guys don't forget don't

1840
01:24:36,480 --> 01:24:38,800
forget about us the next time

1841
01:24:38,800 --> 01:24:40,719
maybe even a short document if somebody

1842
01:24:40,719 --> 01:24:42,239
wants to write it and i'd be willing to

1843
01:24:42,239 --> 01:24:43,360
help

1844
01:24:43,360 --> 01:24:45,040
along those lines because i'm sort of

1845
01:24:45,040 --> 01:24:46,480
waiting in the wings because

1846
01:24:46,480 --> 01:24:47,760
you know i've got another document

1847
01:24:47,760 --> 01:24:49,679
that's sort of going to have to track

1848
01:24:49,679 --> 01:24:51,520
what you guys are doing here

1849
01:24:51,520 --> 01:24:55,040
and and i'm just you know scared

1850
01:24:55,040 --> 01:24:57,040
you know quite a bit well i was going to

1851
01:24:57,040 --> 01:24:59,120
say another a word i shouldn't say here

1852
01:24:59,120 --> 01:25:01,679
but um i'm i'm rather scared about how

1853
01:25:01,679 --> 01:25:03,440
i'm going to proceed with that document

1854
01:25:03,440 --> 01:25:05,840
uh given what's what i'm trying to learn

1855
01:25:05,840 --> 01:25:08,000
from what's going on here so

1856
01:25:08,000 --> 01:25:09,280
i'm sorry i've been taking a little bit

1857
01:25:09,280 --> 01:25:11,440
too much time on this

1858
01:25:11,440 --> 01:25:14,799
i'll just leave it at that though thanks

1859
01:25:16,000 --> 01:25:18,480
holland

1860
01:25:22,000 --> 01:25:25,600
yeah so i you know i'll

1861
01:25:25,600 --> 01:25:28,719
go back a while and say that in fact

1862
01:25:28,719 --> 01:25:31,760
the key exporters

1863
01:25:31,760 --> 01:25:35,280
in tls were defined coming out of the

1864
01:25:35,280 --> 01:25:35,920
needs

1865
01:25:35,920 --> 01:25:38,960
of etls going back to

1866
01:25:38,960 --> 01:25:42,320
gosh i think it's 25 16 i don't remember

1867
01:25:42,320 --> 01:25:46,000
on the original epls doc reached into

1868
01:25:46,000 --> 01:25:47,120
the internals

1869
01:25:47,120 --> 01:25:50,560
of tls um

1870
01:25:50,560 --> 01:25:53,120
and uh and mucked with it in order to do

1871
01:25:53,120 --> 01:25:55,520
what etls needed

1872
01:25:55,520 --> 01:25:59,040
um realistically practically

1873
01:25:59,040 --> 01:26:03,120
i think if you know tls call it plus one

1874
01:26:03,120 --> 01:26:06,719
doesn't change the key exporters or

1875
01:26:06,719 --> 01:26:08,880
if it doesn't change the key exported

1876
01:26:08,880 --> 01:26:10,159
apis

1877
01:26:10,159 --> 01:26:13,840
we're probably mostly okay um

1878
01:26:13,840 --> 01:26:16,080
the problem excuse me the problem with

1879
01:26:16,080 --> 01:26:18,400
tls 1.3

1880
01:26:18,400 --> 01:26:20,800
is it changed the state machine you now

1881
01:26:20,800 --> 01:26:22,000
can do tls

1882
01:26:22,000 --> 01:26:24,880
negotiation after the finished message

1883
01:26:24,880 --> 01:26:26,000
has come out

1884
01:26:26,000 --> 01:26:28,159
and that breaks all the eep

1885
01:26:28,159 --> 01:26:30,320
implementations

1886
01:26:30,320 --> 01:26:33,199
um and the tls working group for good

1887
01:26:33,199 --> 01:26:34,840
reasons

1888
01:26:34,840 --> 01:26:37,600
yeah sorry i'm just gonna say i don't

1889
01:26:37,600 --> 01:26:38,800
think it's the i don't think he's the

1890
01:26:38,800 --> 01:26:41,040
only thing that's gonna break on that

1891
01:26:41,040 --> 01:26:44,719
yep and it may happen again in the

1892
01:26:44,719 --> 01:26:45,840
future because

1893
01:26:45,840 --> 01:26:47,840
you know realistically what 80 of

1894
01:26:47,840 --> 01:26:49,040
traffic on the net is

1895
01:26:49,040 --> 01:26:52,239
is you know web variants tls variants at

1896
01:26:52,239 --> 01:26:53,120
this point

1897
01:26:53,120 --> 01:26:56,080
and um yeah protocols are designed to

1898
01:26:56,080 --> 01:26:57,760
keep them happy and everyone else sort

1899
01:26:57,760 --> 01:26:58,239
of

1900
01:26:58,239 --> 01:27:01,599
has to dance around the stomping

1901
01:27:02,840 --> 01:27:04,239
elephant

1902
01:27:04,239 --> 01:27:08,638
yeah i i guess

1903
01:27:09,679 --> 01:27:11,280
more people should have been active in

1904
01:27:11,280 --> 01:27:13,199
tls 103 i don't

1905
01:27:13,199 --> 01:27:16,800
think it's a bit i don't know if

1906
01:27:16,800 --> 01:27:19,440
people were active and was voted down or

1907
01:27:19,440 --> 01:27:21,280
was is the problem is that people were

1908
01:27:21,280 --> 01:27:21,600
not

1909
01:27:21,600 --> 01:27:24,820
active in the tls 103 development

1910
01:27:24,820 --> 01:27:26,480
[Music]

1911
01:27:26,480 --> 01:27:29,360
well i think tls 1.3 made some

1912
01:27:29,360 --> 01:27:31,520
fundamental changes to the protocol that

1913
01:27:31,520 --> 01:27:32,639
were kind of

1914
01:27:32,639 --> 01:27:34,480
in order to reduce round trips and

1915
01:27:34,480 --> 01:27:36,639
things like that that

1916
01:27:36,639 --> 01:27:38,320
you know were on were sort of

1917
01:27:38,320 --> 01:27:40,239
unavoidable in the design that were

1918
01:27:40,239 --> 01:27:42,560
going to cause this type of problem

1919
01:27:42,560 --> 01:27:45,040
and we should have do we certainly

1920
01:27:45,040 --> 01:27:46,239
should have done better probably in

1921
01:27:46,239 --> 01:27:48,080
keeping the two groups in sync

1922
01:27:48,080 --> 01:27:49,920
especially since you have a chair

1923
01:27:49,920 --> 01:27:51,520
between the two groups

1924
01:27:51,520 --> 01:27:54,159
um but that didn't happen as well as we

1925
01:27:54,159 --> 01:27:56,719
would have liked

1926
01:27:58,560 --> 01:28:01,440
okay should we try to move on i think

1927
01:28:01,440 --> 01:28:01,920
new

1928
01:28:01,920 --> 01:28:04,400
tickets we have already discussed the

1929
01:28:04,400 --> 01:28:05,280
bullet3

1930
01:28:05,280 --> 01:28:08,800
is no peer authentication

1931
01:28:08,800 --> 01:28:12,639
adds new pre-authentication i

1932
01:28:12,639 --> 01:28:14,880
don't think that's true new period

1933
01:28:14,880 --> 01:28:16,480
authentication was

1934
01:28:16,480 --> 01:28:21,759
allowed before what is added is a figure

1935
01:28:25,520 --> 01:28:27,760
please note that section 5 doesn't

1936
01:28:27,760 --> 01:28:29,440
discuss the security and

1937
01:28:29,440 --> 01:28:32,480
implementation or implications sorry of

1938
01:28:32,480 --> 01:28:34,560
not authenticating the peer

1939
01:28:34,560 --> 01:28:37,679
um if you're doing ebtls with allegedly

1940
01:28:37,679 --> 01:28:39,280
client search and then not implementing

1941
01:28:39,280 --> 01:28:41,040
the pier

1942
01:28:41,040 --> 01:28:42,880
there are certainly use cases for that

1943
01:28:42,880 --> 01:28:44,400
but it has to be discussed that you

1944
01:28:44,400 --> 01:28:46,239
shouldn't be giving these people

1945
01:28:46,239 --> 01:28:50,559
wide open access to your network

1946
01:28:52,080 --> 01:28:57,199
elliot are you still in the queue

1947
01:28:57,199 --> 01:29:01,120
bernard that hand forgets to go down

1948
01:29:01,120 --> 01:29:03,120
yeah i think allen makes a good point

1949
01:29:03,120 --> 01:29:04,320
because there have been security

1950
01:29:04,320 --> 01:29:06,000
vulnerabilities in that area that have

1951
01:29:06,000 --> 01:29:07,760
been discovered

1952
01:29:07,760 --> 01:29:10,159
so you have to be very very careful

1953
01:29:10,159 --> 01:29:10,880
about

1954
01:29:10,880 --> 01:29:13,440
managing resumption you know you don't

1955
01:29:13,440 --> 01:29:15,120
want somebody resuming from a no

1956
01:29:15,120 --> 01:29:17,360
pair on authentication to a session

1957
01:29:17,360 --> 01:29:25,839
where it's assumed appears authenticated

1958
01:29:31,600 --> 01:29:34,719
yeah any any

1959
01:29:34,719 --> 01:29:37,600
guidance here how to improve security

1960
01:29:37,600 --> 01:29:38,480
for

1961
01:29:38,480 --> 01:29:40,960
this would be very helpful i'm not

1962
01:29:40,960 --> 01:29:42,080
against that

1963
01:29:42,080 --> 01:29:46,480
um i think that these documents add peer

1964
01:29:46,480 --> 01:29:48,320
authentication i think it's

1965
01:29:48,320 --> 01:29:52,159
not correct but any guidance on this

1966
01:29:52,159 --> 01:29:55,840
maybe someone can um suggest something

1967
01:29:55,840 --> 01:29:57,280
based on

1968
01:29:57,280 --> 01:30:00,320
seems like this is um sounds like this

1969
01:30:00,320 --> 01:30:00,639
is

1970
01:30:00,639 --> 01:30:03,760
security problems that are known

1971
01:30:03,760 --> 01:30:06,880
and what to do with them yeah we should

1972
01:30:06,880 --> 01:30:08,800
we should open up an issue for

1973
01:30:08,800 --> 01:30:12,400
for these yep

1974
01:30:13,760 --> 01:30:16,960
then backwards compatible the document

1975
01:30:16,960 --> 01:30:17,600
doesn't

1976
01:30:17,600 --> 01:30:21,040
say how this is i

1977
01:30:21,040 --> 01:30:25,199
think this tried to refer to the tls

1978
01:30:25,199 --> 01:30:27,280
version negotiation that should probably

1979
01:30:27,280 --> 01:30:30,239
be clarified

1980
01:30:30,239 --> 01:30:34,000
don't know this point you say um

1981
01:30:34,000 --> 01:30:36,960
one or two sentences of we rely on tls

1982
01:30:36,960 --> 01:30:38,480
and oh by the way there's

1983
01:30:38,480 --> 01:30:41,520
nothing in the eep tls headers

1984
01:30:41,520 --> 01:30:49,840
to allow any kind of version negotiation

1985
01:30:51,360 --> 01:30:53,599
good

1986
01:30:56,320 --> 01:30:59,440
yeah good then we have next

1987
01:30:59,440 --> 01:31:03,600
is hello retry request

1988
01:31:03,600 --> 01:31:07,920
um anna says no explanation on how this

1989
01:31:07,920 --> 01:31:11,040
affects etls

1990
01:31:11,040 --> 01:31:14,159
and but also suggestion that it

1991
01:31:14,159 --> 01:31:17,839
doesn't appear to affect

1992
01:31:18,000 --> 01:31:21,360
tls um

1993
01:31:22,000 --> 01:31:25,040
so i hello retry request is

1994
01:31:25,040 --> 01:31:29,360
new in tls 1.3

1995
01:31:29,360 --> 01:31:32,880
i think we need to allow that

1996
01:31:32,880 --> 01:31:36,960
we don't think either that it's

1997
01:31:36,960 --> 01:31:40,000
it's effects

1998
01:31:40,000 --> 01:31:43,360
i think any if there is any

1999
01:31:43,360 --> 01:31:47,199
effect would be

2000
01:31:47,760 --> 01:31:49,440
i would be happy to add that to the

2001
01:31:49,440 --> 01:31:51,360
document if somebody makes a pr

2002
01:31:51,360 --> 01:31:59,839
or share something on the list

2003
01:32:11,080 --> 01:32:14,320
identity and answers that

2004
01:32:14,320 --> 01:32:17,120
gishon should be to use the same

2005
01:32:17,120 --> 01:32:20,679
identity from the first full

2006
01:32:20,679 --> 01:32:24,320
authentication and he says this

2007
01:32:24,320 --> 01:32:26,600
of the number of potential privacy and

2008
01:32:26,600 --> 01:32:29,120
interoperability issues

2009
01:32:29,120 --> 01:32:32,800
uh i personally don't really see how

2010
01:32:32,800 --> 01:32:33,840
this solves

2011
01:32:33,840 --> 01:32:36,560
privacy issues is like selling something

2012
01:32:36,560 --> 01:32:38,960
twice could cause privacy issues

2013
01:32:38,960 --> 01:32:42,480
and also comment that i think

2014
01:32:42,480 --> 01:32:46,159
type d specification will send the same

2015
01:32:46,159 --> 01:32:49,120
clear text identity but encrypted so

2016
01:32:49,120 --> 01:32:49,840
that they

2017
01:32:49,840 --> 01:32:55,840
on the buyer they would be different

2018
01:32:56,080 --> 01:32:58,159
yeah this is a change from some of my

2019
01:32:58,159 --> 01:33:00,000
earlier comments uh

2020
01:33:00,000 --> 01:33:03,199
using the tls

2021
01:33:03,199 --> 01:33:07,360
psk identity in the eep identity

2022
01:33:07,360 --> 01:33:10,880
i think in the end

2023
01:33:10,880 --> 01:33:13,679
tls can probably just rely on the tls

2024
01:33:13,679 --> 01:33:14,960
layer to say hey

2025
01:33:14,960 --> 01:33:17,920
you have session tickets whatever magic

2026
01:33:17,920 --> 01:33:18,480
goes on

2027
01:33:18,480 --> 01:33:21,120
in tls this session has been

2028
01:33:21,120 --> 01:33:22,480
authenticated

2029
01:33:22,480 --> 01:33:25,040
and has been tied to a previous user

2030
01:33:25,040 --> 01:33:26,000
session

2031
01:33:26,000 --> 01:33:29,360
um it just seems to me that there's

2032
01:33:29,360 --> 01:33:32,639
no real benefit to using this

2033
01:33:32,639 --> 01:33:36,960
encrypted tls sk identity

2034
01:33:36,960 --> 01:33:40,400
in the eep identity field you might as

2035
01:33:40,400 --> 01:33:40,800
well

2036
01:33:40,800 --> 01:33:44,480
just use at realm all the time

2037
01:33:44,480 --> 01:33:48,239
and it makes things simpler

2038
01:33:49,600 --> 01:33:52,000
watson

2039
01:33:55,679 --> 01:33:57,840
uh so i just want to point out that or

2040
01:33:57,840 --> 01:33:59,199
watson on cloudflare i just want to

2041
01:33:59,199 --> 01:34:00,000
point out that

2042
01:34:00,000 --> 01:34:03,120
in resumption you

2043
01:34:03,120 --> 01:34:05,679
may your implementation has to keep

2044
01:34:05,679 --> 01:34:06,320
track

2045
01:34:06,320 --> 01:34:09,360
of the credentials used

2046
01:34:09,360 --> 01:34:11,520
if you want to have a notion of of user

2047
01:34:11,520 --> 01:34:12,960
identity

2048
01:34:12,960 --> 01:34:15,840
so if you resume a session and you don't

2049
01:34:15,840 --> 01:34:17,600
store the client certificate you don't

2050
01:34:17,600 --> 01:34:18,560
have it in the resume

2051
01:34:18,560 --> 01:34:22,239
session and so while it's true that the

2052
01:34:22,239 --> 01:34:24,960
that the you have some way of of storing

2053
01:34:24,960 --> 01:34:26,719
this in the ticket

2054
01:34:26,719 --> 01:34:28,719
so it might not always be possible

2055
01:34:28,719 --> 01:34:30,080
depending on what implementation is

2056
01:34:30,080 --> 01:34:31,920
doing how they're hooking in dope is i

2057
01:34:31,920 --> 01:34:33,040
suspect that this is

2058
01:34:33,040 --> 01:34:36,000
part of the part of the issues that

2059
01:34:36,000 --> 01:34:39,199
we're seeing with with session tickets

2060
01:34:39,199 --> 01:34:42,800
where it's you know i looked at rfc

2061
01:34:42,800 --> 01:34:45,119
eight four four four six they can't send

2062
01:34:45,119 --> 01:34:46,639
a session ticket until after you've sent

2063
01:34:46,639 --> 01:34:47,199
the finish

2064
01:34:47,199 --> 01:34:50,480
on your ad and if if that session takes

2065
01:34:50,480 --> 01:34:51,600
for whatever reason

2066
01:34:51,600 --> 01:34:53,280
is it doesn't contain the credentials

2067
01:34:53,280 --> 01:34:54,560
that were used and later you're trying

2068
01:34:54,560 --> 01:34:55,520
to verify

2069
01:34:55,520 --> 01:34:56,800
i'm not sure whether the receptions

2070
01:34:56,800 --> 01:34:58,840
happen or not then you can run

2071
01:34:58,840 --> 01:35:01,840
issues

2072
01:35:10,560 --> 01:35:13,679
i don't really understand to

2073
01:35:13,679 --> 01:35:16,239
comments here about psk identity and

2074
01:35:16,239 --> 01:35:18,400
identity

2075
01:35:18,400 --> 01:35:21,440
response in eb

2076
01:35:21,440 --> 01:35:24,480
i don't think the document says that you

2077
01:35:24,480 --> 01:35:24,880
should

2078
01:35:24,880 --> 01:35:27,280
do that i think the only sentence i can

2079
01:35:27,280 --> 01:35:28,239
find is that

2080
01:35:28,239 --> 01:35:30,719
says that psk identity is unsuitable for

2081
01:35:30,719 --> 01:35:31,840
use

2082
01:35:31,840 --> 01:35:35,920
in the identity response

2083
01:35:41,600 --> 01:35:45,600
okay so i'll double check that um

2084
01:35:45,600 --> 01:35:48,960
and for uh previous comments yeah this

2085
01:35:48,960 --> 01:35:50,159
is what

2086
01:35:50,159 --> 01:35:52,080
um eep server implementations have been

2087
01:35:52,080 --> 01:35:54,560
doing for quite a while is is caching

2088
01:35:54,560 --> 01:35:57,040
all the policy information from the

2089
01:35:57,040 --> 01:35:58,400
original

2090
01:35:58,400 --> 01:36:02,159
um authentication and reapplying it and

2091
01:36:02,159 --> 01:36:03,360
reevaluating it

2092
01:36:03,360 --> 01:36:06,560
during resumption and that gets into the

2093
01:36:06,560 --> 01:36:07,119
other

2094
01:36:07,119 --> 01:36:09,520
issue of no peer authentication where if

2095
01:36:09,520 --> 01:36:11,920
you don't have an identity

2096
01:36:11,920 --> 01:36:13,520
arguably you probably shouldn't do

2097
01:36:13,520 --> 01:36:15,760
resumption too because you can't apply

2098
01:36:15,760 --> 01:36:18,320
policies

2099
01:36:21,920 --> 01:36:24,000
i think we open an issue for this

2100
01:36:24,000 --> 01:36:26,400
identity then

2101
01:36:26,400 --> 01:36:29,440
uh next

2102
01:36:29,440 --> 01:36:32,800
bullet is uh defines key exporters for

2103
01:36:32,800 --> 01:36:33,360
tl

2104
01:36:33,360 --> 01:36:36,480
other tls base the methods the working

2105
01:36:36,480 --> 01:36:37,280
group order

2106
01:36:37,280 --> 01:36:40,000
document which covers this topic except

2107
01:36:40,000 --> 01:36:42,480
as working group document prior to these

2108
01:36:42,480 --> 01:36:46,000
changes i

2109
01:36:46,000 --> 01:36:50,040
don't think this document

2110
01:36:50,040 --> 01:36:52,960
specifies key exporters

2111
01:36:52,960 --> 01:36:56,000
for other methods i think it

2112
01:36:56,000 --> 01:37:00,560
specifies a key exporter for eptls 1.3

2113
01:37:00,560 --> 01:37:03,840
and i think the working group

2114
01:37:04,960 --> 01:37:07,520
agreement as i remember it was that it

2115
01:37:07,520 --> 01:37:08,239
should

2116
01:37:08,239 --> 01:37:11,760
define only for tls.1.3

2117
01:37:11,760 --> 01:37:15,600
but define something that could be used

2118
01:37:15,600 --> 01:37:20,800
as specified in other documents for

2119
01:37:20,800 --> 01:37:24,480
other methods i i don't

2120
01:37:24,480 --> 01:37:26,639
i don't really know what you want what

2121
01:37:26,639 --> 01:37:29,440
kind of change you want here um

2122
01:37:29,440 --> 01:37:31,760
the the thing is the text in the

2123
01:37:31,760 --> 01:37:32,719
document

2124
01:37:32,719 --> 01:37:34,800
explicitly says it defines these

2125
01:37:34,800 --> 01:37:37,199
exporters for other methods

2126
01:37:37,199 --> 01:37:41,280
um and if we're going to keep this to

2127
01:37:42,080 --> 01:37:45,280
tls just etls it should just define its

2128
01:37:45,280 --> 01:37:46,239
exporters for

2129
01:37:46,239 --> 01:37:48,239
epls as i think you would make these

2130
01:37:48,239 --> 01:37:50,639
changes already in an earlier slide

2131
01:37:50,639 --> 01:37:52,080
and then simply point to the other

2132
01:37:52,080 --> 01:37:53,760
document and go hey there's similar

2133
01:37:53,760 --> 01:37:56,560
things elsewhere

2134
01:37:59,360 --> 01:38:04,159
yeah i think the version github might be

2135
01:38:04,159 --> 01:38:07,840
better all already yeah

2136
01:38:07,840 --> 01:38:10,320
otherwise

2137
01:38:11,920 --> 01:38:16,560
yeah i and the last thing is

2138
01:38:16,560 --> 01:38:19,360
additional leaves a lot to be

2139
01:38:19,360 --> 01:38:21,040
implementation

2140
01:38:21,040 --> 01:38:25,360
defined yes we can try to add more

2141
01:38:25,360 --> 01:38:30,320
more guidance before publishing this

2142
01:38:30,320 --> 01:38:34,080
otherwise i think this is the last

2143
01:38:35,199 --> 01:38:38,880
all right great um i think we should

2144
01:38:38,880 --> 01:38:42,000
open up github issues for

2145
01:38:42,000 --> 01:38:44,080
most of these or the ones that we still

2146
01:38:44,080 --> 01:38:45,920
need to have more discussion on

2147
01:38:45,920 --> 01:38:49,679
which i think is most of them um

2148
01:38:49,679 --> 01:38:52,080
and then i think we can i think most of

2149
01:38:52,080 --> 01:38:53,600
these will be relatively straightforward

2150
01:38:53,600 --> 01:38:55,360
to resolve a couple of them maybe

2151
01:38:55,360 --> 01:38:59,520
take some more discussion

2152
01:38:59,520 --> 01:39:01,920
all right

2153
01:39:02,960 --> 01:39:07,760
i suggest we uh move on to the next

2154
01:39:07,760 --> 01:39:09,760
agenda item that took a little bit

2155
01:39:09,760 --> 01:39:12,320
longer than

2156
01:39:12,320 --> 01:39:15,679
what we had thought so

2157
01:39:16,719 --> 01:39:20,400
eep space tl

2158
01:39:20,400 --> 01:39:26,719
other tls based eep types

2159
01:39:26,719 --> 01:39:29,360
yeah so there's only one slide here i i

2160
01:39:29,360 --> 01:39:30,400
think there's been

2161
01:39:30,400 --> 01:39:33,760
some standard discussions on

2162
01:39:33,760 --> 01:39:37,360
um any of the important topics

2163
01:39:37,360 --> 01:39:39,440
elsewhere specifically in the

2164
01:39:39,440 --> 01:39:41,600
implementation report

2165
01:39:41,600 --> 01:39:44,239
in short things mostly work resumption

2166
01:39:44,239 --> 01:39:45,440
is easy

2167
01:39:45,440 --> 01:39:48,400
open ssl is horrible and the question is

2168
01:39:48,400 --> 01:39:50,400
what text do we put in to go

2169
01:39:50,400 --> 01:39:53,440
hey would like to fix open ssl but we

2170
01:39:53,440 --> 01:39:54,560
can't

2171
01:39:54,560 --> 01:39:57,440
so here are the corner cases that you

2172
01:39:57,440 --> 01:39:59,520
have to worry about

2173
01:39:59,520 --> 01:40:01,119
and as jorge was noting earlier these

2174
01:40:01,119 --> 01:40:03,520
these corner cases are specific

2175
01:40:03,520 --> 01:40:07,360
more to peep and ttls than to etls

2176
01:40:07,360 --> 01:40:09,520
which seems to be pretty much okay at

2177
01:40:09,520 --> 01:40:12,000
this point

2178
01:40:15,199 --> 01:40:17,199
one of the things i'd like to see is is

2179
01:40:17,199 --> 01:40:18,560
more discussion on

2180
01:40:18,560 --> 01:40:21,600
this particular document and the other

2181
01:40:21,600 --> 01:40:23,119
eat methods

2182
01:40:23,119 --> 01:40:26,719
um as we're going through these ftls

2183
01:40:26,719 --> 01:40:30,639
issues because these these discussions

2184
01:40:30,639 --> 01:40:32,320
may have implemented

2185
01:40:32,320 --> 01:40:34,880
implications on these other documents it

2186
01:40:34,880 --> 01:40:37,520
would be good to get those

2187
01:40:37,520 --> 01:40:39,760
out now so that we can get this document

2188
01:40:39,760 --> 01:40:40,140
maybe

2189
01:40:40,140 --> 01:40:41,280
[Music]

2190
01:40:41,280 --> 01:40:43,360
out at the same time or at least shortly

2191
01:40:43,360 --> 01:40:45,839
following

2192
01:40:48,840 --> 01:40:51,840
epls

2193
01:40:52,800 --> 01:40:54,719
so i encourage people to read this

2194
01:40:54,719 --> 01:40:57,119
document and uh

2195
01:40:57,119 --> 01:41:00,800
maybe we can get some comments on this

2196
01:41:00,800 --> 01:41:04,480
as well

2197
01:41:04,480 --> 01:41:08,800
any particular comments on the in the

2198
01:41:08,800 --> 01:41:19,840
group today

2199
01:41:24,960 --> 01:41:28,000
all right then let's

2200
01:41:28,000 --> 01:41:31,760
move on to i think what is our

2201
01:41:31,760 --> 01:41:35,000
next topic which is rc

2202
01:41:35,000 --> 01:41:39,600
3748 this yarn

2203
01:41:41,520 --> 01:41:46,560
can you hear me all right yes all right

2204
01:41:46,560 --> 01:41:50,239
um so this is uh the beast document for

2205
01:41:50,239 --> 01:41:54,639
37.48 which was published 17 years ago

2206
01:41:54,639 --> 01:41:57,840
and um you can see the obviously the

2207
01:41:57,840 --> 01:41:59,679
draft is in the iotf directories but you

2208
01:41:59,679 --> 01:42:00,000
can see

2209
01:42:00,000 --> 01:42:02,239
the difference to the original rfc in

2210
01:42:02,239 --> 01:42:05,440
this our code.com link

2211
01:42:05,440 --> 01:42:08,560
and if you go to the next slide

2212
01:42:08,560 --> 01:42:10,320
so what are we about to do well the

2213
01:42:10,320 --> 01:42:12,560
first thing is that you should not

2214
01:42:12,560 --> 01:42:14,719
panic we're not doing something horrible

2215
01:42:14,719 --> 01:42:15,920
here

2216
01:42:15,920 --> 01:42:18,159
there's nothing fundamentally wrong with

2217
01:42:18,159 --> 01:42:19,600
the existing rs it's

2218
01:42:19,600 --> 01:42:22,159
it's pretty good and we're also not

2219
01:42:22,159 --> 01:42:23,760
changing the protocol

2220
01:42:23,760 --> 01:42:26,239
however there are some updates that we

2221
01:42:26,239 --> 01:42:27,440
could do

2222
01:42:27,440 --> 01:42:30,480
together the next slide

2223
01:42:31,280 --> 01:42:33,199
so there's some some potential things we

2224
01:42:33,199 --> 01:42:35,119
could do we could fold in errata or

2225
01:42:35,119 --> 01:42:36,719
other issues observed over

2226
01:42:36,719 --> 01:42:40,239
over the years we could probably update

2227
01:42:40,239 --> 01:42:42,400
the security bits quite a bit

2228
01:42:42,400 --> 01:42:44,239
because we think about security in

2229
01:42:44,239 --> 01:42:46,560
different ways today than we did in

2230
01:42:46,560 --> 01:42:49,679
200 2001 when the work on this current

2231
01:42:49,679 --> 01:42:52,480
rfc started

2232
01:42:53,040 --> 01:42:55,679
we also have published several core eap

2233
01:42:55,679 --> 01:42:56,080
protocol

2234
01:42:56,080 --> 01:42:58,159
documents since the publications of this

2235
01:42:58,159 --> 01:42:59,840
rfc and they aren't pointed to

2236
01:42:59,840 --> 01:43:03,040
by this rfc we could have an opportunity

2237
01:43:03,040 --> 01:43:06,400
to put in some more references

2238
01:43:06,800 --> 01:43:09,040
the authors of this particular update

2239
01:43:09,040 --> 01:43:10,560
thought that it would be

2240
01:43:10,560 --> 01:43:13,280
a good idea to change one or two of the

2241
01:43:13,280 --> 01:43:14,880
terms

2242
01:43:14,880 --> 01:43:17,119
i will talk about that in a bit we could

2243
01:43:17,119 --> 01:43:18,560
update the references

2244
01:43:18,560 --> 01:43:21,280
and i guess overall there's nothing

2245
01:43:21,280 --> 01:43:21,840
earth

2246
01:43:21,840 --> 01:43:25,760
shattering here we could go on but

2247
01:43:25,760 --> 01:43:27,520
there's opportunities to clean up and

2248
01:43:27,520 --> 01:43:29,840
provide more information

2249
01:43:29,840 --> 01:43:31,520
you can think about this like the you

2250
01:43:31,520 --> 01:43:34,639
know your car's a yearly maintenance and

2251
01:43:34,639 --> 01:43:36,480
if you didn't do the yearly maintenance

2252
01:43:36,480 --> 01:43:38,239
in 17 years there's quite a few

2253
01:43:38,239 --> 01:43:40,320
dents in the car that you know maybe you

2254
01:43:40,320 --> 01:43:42,080
should have fixed and

2255
01:43:42,080 --> 01:43:43,520
some of that might actually give you

2256
01:43:43,520 --> 01:43:47,440
some headache next slide please

2257
01:43:48,000 --> 01:43:49,840
so the specific updates and i i don't

2258
01:43:49,840 --> 01:43:51,119
want to spend

2259
01:43:51,119 --> 01:43:53,520
too much time on any any of these balls

2260
01:43:53,520 --> 01:43:54,719
let's very briefly mention

2261
01:43:54,719 --> 01:43:56,880
what what this is about so there's

2262
01:43:56,880 --> 01:43:58,639
actually one errata

2263
01:43:58,639 --> 01:44:02,480
a minor thing that's fixed here

2264
01:44:02,480 --> 01:44:04,719
a bigger thing is that like obviously we

2265
01:44:04,719 --> 01:44:06,800
know now more about the various

2266
01:44:06,800 --> 01:44:09,840
eap methods and some of the algorithms

2267
01:44:09,840 --> 01:44:12,159
so for instance there's some text on md5

2268
01:44:12,159 --> 01:44:13,600
and so on and

2269
01:44:13,600 --> 01:44:15,440
and the issues with that we also point

2270
01:44:15,440 --> 01:44:18,239
to the newer newer methods

2271
01:44:18,239 --> 01:44:19,920
uh because we felt that that's uh

2272
01:44:19,920 --> 01:44:21,280
reasonable

2273
01:44:21,280 --> 01:44:23,760
uh we added one security claim that's

2274
01:44:23,760 --> 01:44:26,560
remember this a set of security claims

2275
01:44:26,560 --> 01:44:29,040
requested for for all methods we added

2276
01:44:29,040 --> 01:44:30,639
one

2277
01:44:30,639 --> 01:44:32,400
i could discuss if that's the right one

2278
01:44:32,400 --> 01:44:34,000
or if other other things could be added

2279
01:44:34,000 --> 01:44:37,040
but we did add one we also refer to

2280
01:44:37,040 --> 01:44:37,440
these

2281
01:44:37,440 --> 01:44:40,880
other base or core eap documents like

2282
01:44:40,880 --> 01:44:42,560
the state machine

2283
01:44:42,560 --> 01:44:46,560
the keying document and so on

2284
01:44:46,960 --> 01:44:48,880
the terminal exchange is kind of

2285
01:44:48,880 --> 01:44:50,239
analogous to

2286
01:44:50,239 --> 01:44:52,880
what john was talking about in the tls

2287
01:44:52,880 --> 01:44:54,159
side of things so

2288
01:44:54,159 --> 01:44:58,320
master change domain um

2289
01:44:58,320 --> 01:45:00,800
yeah you know not a huge deal it's not

2290
01:45:00,800 --> 01:45:01,840
one of those

2291
01:45:01,840 --> 01:45:04,880
master slave type of terminology issues

2292
01:45:04,880 --> 01:45:05,920
but

2293
01:45:05,920 --> 01:45:09,119
we felt that this would be better we've

2294
01:45:09,119 --> 01:45:11,280
updated the references

2295
01:45:11,280 --> 01:45:14,080
we discuss also i mean the original rfc

2296
01:45:14,080 --> 01:45:16,960
discusses mostly

2297
01:45:29,199 --> 01:45:32,400
name portion of the ni

2298
01:45:32,400 --> 01:45:36,239
in uh eap response

2299
01:45:36,239 --> 01:45:39,440
one part of the document and

2300
01:45:39,440 --> 01:45:42,560
updated the iona rules and if you go to

2301
01:45:42,560 --> 01:45:45,840
the next slide

2302
01:45:46,159 --> 01:45:48,880
so there's some open questions as well

2303
01:45:48,880 --> 01:45:50,880
likely you could say more about security

2304
01:45:50,880 --> 01:45:51,840
we did not

2305
01:45:51,840 --> 01:45:55,199
uh make a full listing of all the

2306
01:45:55,199 --> 01:45:56,400
attacks and

2307
01:45:56,400 --> 01:45:58,480
everything that that we've learned since

2308
01:45:58,480 --> 01:46:00,480
then that that might actually be a

2309
01:46:00,480 --> 01:46:03,199
useful exercise

2310
01:46:03,199 --> 01:46:05,760
um and also since we do have some of

2311
01:46:05,760 --> 01:46:06,239
those

2312
01:46:06,239 --> 01:46:09,119
other documents part of the core eap

2313
01:46:09,119 --> 01:46:10,880
specifications it might be that some

2314
01:46:10,880 --> 01:46:13,840
parts of this document could be thinner

2315
01:46:13,840 --> 01:46:16,960
and point to those other other rfcs

2316
01:46:16,960 --> 01:46:18,800
maybe or maybe that's not good because

2317
01:46:18,800 --> 01:46:22,400
we want to keep things self-contained

2318
01:46:23,360 --> 01:46:25,920
the ieee references and discussions are

2319
01:46:25,920 --> 01:46:26,960
fairly dated

2320
01:46:26,960 --> 01:46:30,000
i felt we felt i

2321
01:46:30,000 --> 01:46:33,280
could probably update that and finally

2322
01:46:33,280 --> 01:46:34,480
there's a

2323
01:46:34,480 --> 01:46:38,800
comment around passwords and passphrases

2324
01:46:38,800 --> 01:46:41,280
in general for all eap methods and they

2325
01:46:41,280 --> 01:46:42,320
point to

2326
01:46:42,320 --> 01:46:44,719
uh sassoprep and some of these

2327
01:46:44,719 --> 01:46:47,360
international characters at issues

2328
01:46:47,360 --> 01:46:50,320
and that reference is like very old and

2329
01:46:50,320 --> 01:46:52,560
it's been updated two or three times

2330
01:46:52,560 --> 01:46:55,920
to newer rfcs and i

2331
01:46:55,920 --> 01:46:57,600
did not at least know what to do with

2332
01:46:57,600 --> 01:46:59,760
this i don't know if the old rfc still

2333
01:46:59,760 --> 01:47:01,280
is valid this would be replaced by

2334
01:47:01,280 --> 01:47:03,360
whatever was replaced in the ietf or

2335
01:47:03,360 --> 01:47:04,320
it's

2336
01:47:04,320 --> 01:47:06,239
some other discussion that should be had

2337
01:47:06,239 --> 01:47:08,880
here but that's clearly an open issue

2338
01:47:08,880 --> 01:47:11,199
and then next slide which is the final

2339
01:47:11,199 --> 01:47:13,519
slide

2340
01:47:14,400 --> 01:47:16,480
so basically this is for your

2341
01:47:16,480 --> 01:47:19,840
consideration we took a first cut

2342
01:47:19,840 --> 01:47:22,880
i'd love to hear what we missed

2343
01:47:22,880 --> 01:47:26,800
or we went possibly too far and uh

2344
01:47:26,800 --> 01:47:28,639
the question is should we do an update

2345
01:47:28,639 --> 01:47:30,480
and uh if we want to do an update

2346
01:47:30,480 --> 01:47:33,119
uh watch the people there thank you

2347
01:47:33,119 --> 01:47:37,760
opening up for discussion

2348
01:47:37,760 --> 01:47:40,800
yeah so um usually what

2349
01:47:40,800 --> 01:47:42,719
was something that's 17 years old is you

2350
01:47:42,719 --> 01:47:44,480
try to advance it

2351
01:47:44,480 --> 01:47:46,159
uh to the next stage of the standards

2352
01:47:46,159 --> 01:47:47,920
process which would involve things like

2353
01:47:47,920 --> 01:47:50,159
implementer surveys uh

2354
01:47:50,159 --> 01:47:52,320
you know addressing known interop issues

2355
01:47:52,320 --> 01:47:53,199
and i'm not seeing

2356
01:47:53,199 --> 01:47:56,639
any of that here so uh i do have a

2357
01:47:56,639 --> 01:47:58,239
concern about it which is that i don't

2358
01:47:58,239 --> 01:47:58,800
think it's

2359
01:47:58,800 --> 01:48:00,560
it's actually bringing the draft forward

2360
01:48:00,560 --> 01:48:02,840
in in the way that the standards process

2361
01:48:02,840 --> 01:48:05,840
describes

2362
01:48:05,920 --> 01:48:09,520
um okay um so

2363
01:48:09,520 --> 01:48:11,280
are you concerned that we did not

2364
01:48:11,280 --> 01:48:12,639
document

2365
01:48:12,639 --> 01:48:14,639
the implementation experience or that

2366
01:48:14,639 --> 01:48:15,679
there isn't

2367
01:48:15,679 --> 01:48:18,320
implementation experience well usually

2368
01:48:18,320 --> 01:48:19,840
well i'm not sure that

2369
01:48:19,840 --> 01:48:21,600
uh usually what you do right for the

2370
01:48:21,600 --> 01:48:23,280
standard process is you try to document

2371
01:48:23,280 --> 01:48:24,960
that everything has two implementations

2372
01:48:24,960 --> 01:48:25,840
or more

2373
01:48:25,840 --> 01:48:28,239
and potentially find areas that weren't

2374
01:48:28,239 --> 01:48:29,520
implemented

2375
01:48:29,520 --> 01:48:31,920
um or interop issues that were

2376
01:48:31,920 --> 01:48:33,040
encountered

2377
01:48:33,040 --> 01:48:34,320
you know that's what that that's what

2378
01:48:34,320 --> 01:48:36,800
this that's what the advancement process

2379
01:48:36,800 --> 01:48:38,719
specifies it's not just

2380
01:48:38,719 --> 01:48:40,560
uh you know especially if something's 17

2381
01:48:40,560 --> 01:48:42,320
years old we don't

2382
01:48:42,320 --> 01:48:44,400
really rev rcs for the reasons you

2383
01:48:44,400 --> 01:48:45,440
describe

2384
01:48:45,440 --> 01:48:47,600
right just to change update references

2385
01:48:47,600 --> 01:48:49,360
uh there is no yearly maintenance

2386
01:48:49,360 --> 01:48:51,119
process in the ipf

2387
01:48:51,119 --> 01:48:53,280
um it's usually for the process of it

2388
01:48:53,280 --> 01:48:54,239
well

2389
01:48:54,239 --> 01:48:55,920
again you're changing the standards

2390
01:48:55,920 --> 01:48:57,440
process you know

2391
01:48:57,440 --> 01:48:58,880
you're not describing the stance process

2392
01:48:58,880 --> 01:49:00,080
we have you're describing it stands for

2393
01:49:00,080 --> 01:49:01,760
us as you want to have happen

2394
01:49:01,760 --> 01:49:04,239
but i'm just saying that there you know

2395
01:49:04,239 --> 01:49:05,920
there are things that you do to advance

2396
01:49:05,920 --> 01:49:07,199
that aren't on this

2397
01:49:07,199 --> 01:49:08,800
and it is a lot of work people often

2398
01:49:08,800 --> 01:49:10,320
don't like to do it but

2399
01:49:10,320 --> 01:49:12,199
you know that would be it would be an

2400
01:49:12,199 --> 01:49:14,159
implementer-focused thing

2401
01:49:14,159 --> 01:49:16,560
um that you know you'd have to you'd

2402
01:49:16,560 --> 01:49:19,360
have to get into and maybe some testing

2403
01:49:19,360 --> 01:49:22,159
you know as an example i i often wonder

2404
01:49:22,159 --> 01:49:22,880
how

2405
01:49:22,880 --> 01:49:25,119
things work in practice when you use the

2406
01:49:25,119 --> 01:49:26,840
uh

2407
01:49:26,840 --> 01:49:29,760
non-standard eap type space

2408
01:49:29,760 --> 01:49:31,679
you know is that interoperable between

2409
01:49:31,679 --> 01:49:33,520
implementations those are things i don't

2410
01:49:33,520 --> 01:49:35,199
know that we fully tested

2411
01:49:35,199 --> 01:49:37,679
so there actually may be things in 3748

2412
01:49:37,679 --> 01:49:38,800
that actually

2413
01:49:38,800 --> 01:49:40,159
it's possible there are things that just

2414
01:49:40,159 --> 01:49:43,119
don't work uh

2415
01:49:43,119 --> 01:49:46,480
right yeah i mean

2416
01:49:46,480 --> 01:49:49,199
in general i love to have that that sort

2417
01:49:49,199 --> 01:49:50,719
of thing here i do think though that

2418
01:49:50,719 --> 01:49:52,320
there's two categories of things that we

2419
01:49:52,320 --> 01:49:55,840
can update rfcs for and what one is this

2420
01:49:55,840 --> 01:49:57,679
implementation experience and the other

2421
01:49:57,679 --> 01:49:59,040
one is uh

2422
01:49:59,040 --> 01:50:01,520
new information and uh fixes to

2423
01:50:01,520 --> 01:50:02,880
documents

2424
01:50:02,880 --> 01:50:05,599
um and and both are valid reasons and

2425
01:50:05,599 --> 01:50:06,880
and we usually fold

2426
01:50:06,880 --> 01:50:09,760
documents in in that that have both

2427
01:50:09,760 --> 01:50:11,119
components

2428
01:50:11,119 --> 01:50:13,520
um but i'm not uh disagreeing with you i

2429
01:50:13,520 --> 01:50:15,280
i agree that that would be a wonderful

2430
01:50:15,280 --> 01:50:15,920
thing to have

2431
01:50:15,920 --> 01:50:18,400
this is a zero zero so we don't have a

2432
01:50:18,400 --> 01:50:19,040
lot of that

2433
01:50:19,040 --> 01:50:24,159
a lot of the material in it yet

2434
01:50:24,159 --> 01:50:26,638
go ahead

2435
01:50:31,920 --> 01:50:34,400
sorry i was a little distracted

2436
01:50:34,400 --> 01:50:36,480
apologies for that

2437
01:50:36,480 --> 01:50:39,760
or joe could you go back to the slide

2438
01:50:39,760 --> 01:50:43,360
uh i don't know one slide or uh

2439
01:50:43,360 --> 01:50:46,719
yeah this one uh so about

2440
01:50:46,719 --> 01:50:50,480
uh eight now i'm uh

2441
01:50:50,480 --> 01:50:52,159
so what would happen when we use

2442
01:50:52,159 --> 01:50:54,400
encrypted identifiers if we are now

2443
01:50:54,400 --> 01:50:55,520
saying should omit

2444
01:50:55,520 --> 01:50:58,719
the peer name portion

2445
01:50:58,719 --> 01:51:00,880
so i know 3gpp uses encrypted

2446
01:51:00,880 --> 01:51:02,960
identifiers and if we are going to say

2447
01:51:02,960 --> 01:51:03,840
should omit

2448
01:51:03,840 --> 01:51:06,719
isn't that an issue or am i missing

2449
01:51:06,719 --> 01:51:08,639
something here

2450
01:51:08,639 --> 01:51:12,320
uh john do you want to take that

2451
01:51:13,920 --> 01:51:17,440
yeah i think you might have a

2452
01:51:17,440 --> 01:51:20,719
point um

2453
01:51:20,719 --> 01:51:23,280
maybe this should be updated to be a bit

2454
01:51:23,280 --> 01:51:24,400
more

2455
01:51:24,400 --> 01:51:29,360
descriptive that you should hide

2456
01:51:29,360 --> 01:51:32,840
the identity peer name instead of saying

2457
01:51:32,840 --> 01:51:34,400
should

2458
01:51:34,400 --> 01:51:37,440
remove it yeah um

2459
01:51:37,440 --> 01:51:40,480
i think both approaches are okay the

2460
01:51:40,480 --> 01:51:41,760
important thing is that you hide the

2461
01:51:41,760 --> 01:51:45,119
identity for any attacker

2462
01:51:45,119 --> 01:51:48,239
agreed that i guess in in some

2463
01:51:48,239 --> 01:51:51,199
methods uh or in in some some

2464
01:51:51,199 --> 01:51:53,040
deployments

2465
01:51:53,040 --> 01:51:55,360
uh you might still have the username

2466
01:51:55,360 --> 01:51:56,320
portion

2467
01:51:56,320 --> 01:51:58,719
and and still have privacy whether it's

2468
01:51:58,719 --> 01:52:00,840
encrypted identifiers or random

2469
01:52:00,840 --> 01:52:02,320
identifiers

2470
01:52:02,320 --> 01:52:05,679
this was just a minor

2471
01:52:05,679 --> 01:52:08,159
uh comment i i was a little bit uh

2472
01:52:08,159 --> 01:52:09,679
distracted with the chat

2473
01:52:09,679 --> 01:52:12,719
the other question uh i guess uh would

2474
01:52:12,719 --> 01:52:13,360
be uh

2475
01:52:13,360 --> 01:52:15,679
and this is like i haven't thought this

2476
01:52:15,679 --> 01:52:17,520
through fully and up to you yari and

2477
01:52:17,520 --> 01:52:19,280
john on how you see it

2478
01:52:19,280 --> 01:52:22,880
but at least in eep tls

2479
01:52:22,960 --> 01:52:26,000
when we started updating for tls 1.3 we

2480
01:52:26,000 --> 01:52:28,000
realized

2481
01:52:28,000 --> 01:52:30,400
that two things would be very helpful uh

2482
01:52:30,400 --> 01:52:31,520
make make save

2483
01:52:31,520 --> 01:52:34,080
save some round trips was if we can add

2484
01:52:34,080 --> 01:52:35,760
a payload to eep success

2485
01:52:35,760 --> 01:52:39,040
and make the success protected because

2486
01:52:39,040 --> 01:52:42,080
mostly methods export keys and you will

2487
01:52:42,080 --> 01:52:43,520
have keys to protect that

2488
01:52:43,520 --> 01:52:45,119
message and if you could send the new

2489
01:52:45,119 --> 01:52:47,199
session ticket for example in the eep

2490
01:52:47,199 --> 01:52:48,239
success

2491
01:52:48,239 --> 01:52:50,560
or sends and other time types of

2492
01:52:50,560 --> 01:52:52,400
configuration data so i remember there

2493
01:52:52,400 --> 01:52:54,560
was a presentation from huawei to do

2494
01:52:54,560 --> 01:52:55,119
that

2495
01:52:55,119 --> 01:52:56,560
i know this would be a much bigger

2496
01:52:56,560 --> 01:52:59,280
change than than what is intended but

2497
01:52:59,280 --> 01:53:01,119
something that at least you could

2498
01:53:01,119 --> 01:53:02,800
consider as input from me

2499
01:53:02,800 --> 01:53:04,800
uh to to look into whether it makes

2500
01:53:04,800 --> 01:53:06,880
sense to do it in this version or or

2501
01:53:06,880 --> 01:53:08,800
wait for another version

2502
01:53:08,800 --> 01:53:13,840
no no strong opinions

2503
01:53:16,800 --> 01:53:20,159
okay roman

2504
01:53:23,119 --> 01:53:25,199
just wanted to jump in with uh with a

2505
01:53:25,199 --> 01:53:27,040
process kind of commentary on what we

2506
01:53:27,040 --> 01:53:27,920
had just talked about

2507
01:53:27,920 --> 01:53:30,159
about what we standardized so ignoring

2508
01:53:30,159 --> 01:53:31,760
some of the details of what's on the

2509
01:53:31,760 --> 01:53:33,280
screen right now because i think those

2510
01:53:33,280 --> 01:53:35,119
changes fall into a lot of different

2511
01:53:35,119 --> 01:53:36,639
categories of what you're doing

2512
01:53:36,639 --> 01:53:39,440
but i would say the conversation of how

2513
01:53:39,440 --> 01:53:40,719
we do protocol maintenance

2514
01:53:40,719 --> 01:53:42,960
varies across kind of the ietf and i

2515
01:53:42,960 --> 01:53:43,920
think that there's

2516
01:53:43,920 --> 01:53:46,320
two different things to consider here

2517
01:53:46,320 --> 01:53:48,080
there is the conversation around how do

2518
01:53:48,080 --> 01:53:49,760
we document implementations and how do

2519
01:53:49,760 --> 01:53:51,280
we elevate things from

2520
01:53:51,280 --> 01:53:53,520
ps to higher levels of standard and

2521
01:53:53,520 --> 01:53:55,520
that's one level of administrative

2522
01:53:55,520 --> 01:53:57,599
bureaucracy and then the other element

2523
01:53:57,599 --> 01:53:59,040
of kind of bureaucracy is you know what

2524
01:53:59,040 --> 01:54:00,239
triggers of this

2525
01:54:00,239 --> 01:54:02,080
is that in chartered to trigger kind of

2526
01:54:02,080 --> 01:54:03,599
abyss does that change kind of the

2527
01:54:03,599 --> 01:54:04,320
protocol

2528
01:54:04,320 --> 01:54:07,040
and i would say the idea of collecting a

2529
01:54:07,040 --> 01:54:08,719
package of erratas

2530
01:54:08,719 --> 01:54:11,440
certainly that are areas where we don't

2531
01:54:11,440 --> 01:54:13,280
have a lot of clarifications and we jam

2532
01:54:13,280 --> 01:54:14,320
that into abyss

2533
01:54:14,320 --> 01:54:16,159
without necessarily changing a protocol

2534
01:54:16,159 --> 01:54:17,440
version of her it's something that's

2535
01:54:17,440 --> 01:54:19,280
been done before

2536
01:54:19,280 --> 01:54:22,400
and also if we want to elevate the

2537
01:54:22,400 --> 01:54:24,639
the document itself to a higher standard

2538
01:54:24,639 --> 01:54:27,280
we would need a revised version anyway

2539
01:54:27,280 --> 01:54:29,119
of of the core spec itself because we

2540
01:54:29,119 --> 01:54:30,880
wouldn't want to leave any of the

2541
01:54:30,880 --> 01:54:32,880
kind of ambiguity hanging out there so i

2542
01:54:32,880 --> 01:54:34,560
think we need to go point by point to

2543
01:54:34,560 --> 01:54:35,520
kind of decide

2544
01:54:35,520 --> 01:54:37,760
what category things fall into and how

2545
01:54:37,760 --> 01:54:38,560
dramatic

2546
01:54:38,560 --> 01:54:40,719
uh dramatic of a change that is and we

2547
01:54:40,719 --> 01:54:42,400
need to probably squint at that relative

2548
01:54:42,400 --> 01:54:43,599
to the charter about

2549
01:54:43,599 --> 01:54:45,040
whether we're really changing the

2550
01:54:45,040 --> 01:54:47,920
protocol itself or creating an extension

2551
01:54:47,920 --> 01:54:49,599
so this is a zero zero so we're quite

2552
01:54:49,599 --> 01:54:52,639
early here thanks

2553
01:54:55,199 --> 01:54:58,080
elliot yeah

2554
01:54:58,400 --> 01:55:02,159
oh go ahead hey there joe uh and thanks

2555
01:55:02,159 --> 01:55:04,400
um and thanks yari for the draft i want

2556
01:55:04,400 --> 01:55:05,599
to say that i

2557
01:55:05,599 --> 01:55:08,639
totally appreciate um your car

2558
01:55:08,639 --> 01:55:12,159
analogy uh in terms of maintenance

2559
01:55:12,159 --> 01:55:14,239
um which leads me to want to ask a bunch

2560
01:55:14,239 --> 01:55:15,280
of questions which are probably

2561
01:55:15,280 --> 01:55:17,040
inappropriate for the working group but

2562
01:55:17,040 --> 01:55:20,159
um what i did want to ask is if we're

2563
01:55:20,159 --> 01:55:21,360
going to go to

2564
01:55:21,360 --> 01:55:23,679
these lengths uh if we're going to open

2565
01:55:23,679 --> 01:55:25,840
up abyss document

2566
01:55:25,840 --> 01:55:28,880
is it worth stepping back

2567
01:55:28,880 --> 01:55:32,159
a little bit and asking the question

2568
01:55:32,159 --> 01:55:34,080
you know at more general levels are

2569
01:55:34,080 --> 01:55:36,000
there things we really ought to be doing

2570
01:55:36,000 --> 01:55:37,520
differently

2571
01:55:37,520 --> 01:55:40,560
and um i mean it's a very

2572
01:55:40,560 --> 01:55:44,400
lengthy conversation right

2573
01:55:44,400 --> 01:55:47,119
and maybe we should be testing you know

2574
01:55:47,119 --> 01:55:48,480
what are we protecting what are we not

2575
01:55:48,480 --> 01:55:49,760
protecting

2576
01:55:49,760 --> 01:55:51,599
is the connection model still

2577
01:55:51,599 --> 01:55:53,199
appropriate is the

2578
01:55:53,199 --> 01:55:55,280
the is the model we're using still

2579
01:55:55,280 --> 01:55:56,239
appropriate for

2580
01:55:56,239 --> 01:56:00,239
for um tunneling uh these are all um

2581
01:56:00,239 --> 01:56:02,560
questions that i think it's at least

2582
01:56:02,560 --> 01:56:04,320
worth considering if we're talking about

2583
01:56:04,320 --> 01:56:05,920
doing abyss for this

2584
01:56:05,920 --> 01:56:09,360
um and which is to say um i'm perfectly

2585
01:56:09,360 --> 01:56:10,000
fine

2586
01:56:10,000 --> 01:56:12,800
if we come down with the answers and say

2587
01:56:12,800 --> 01:56:14,719
yeah i think we're really comfortable

2588
01:56:14,719 --> 01:56:16,400
with where we are just a couple of

2589
01:56:16,400 --> 01:56:18,000
tweets here and there we have ourselves

2590
01:56:18,000 --> 01:56:19,599
a full standard

2591
01:56:19,599 --> 01:56:21,199
i would be very happy with that but i

2592
01:56:21,199 --> 01:56:23,360
would like us to before we go to the

2593
01:56:23,360 --> 01:56:25,040
effort of turning something into a full

2594
01:56:25,040 --> 01:56:26,320
standard

2595
01:56:26,320 --> 01:56:28,960
is it what we want at the end of the day

2596
01:56:28,960 --> 01:56:29,679
and and

2597
01:56:29,679 --> 01:56:33,199
to give you just one example of uh

2598
01:56:33,199 --> 01:56:37,520
uh uh the um the applicability

2599
01:56:37,520 --> 01:56:39,599
and we should be thinking about that is

2600
01:56:39,599 --> 01:56:42,560
the applicability good across um

2601
01:56:42,560 --> 01:56:45,599
not just 3gpp and and

2602
01:56:45,599 --> 01:56:48,719
802 networks are there um

2603
01:56:48,719 --> 01:56:50,320
is there other applicability that we

2604
01:56:50,320 --> 01:56:52,080
should be considering in answering that

2605
01:56:52,080 --> 01:56:53,040
question

2606
01:56:53,040 --> 01:56:55,360
um and i'm not trying to reach it

2607
01:56:55,360 --> 01:56:56,400
prejudge the

2608
01:56:56,400 --> 01:56:57,840
the answer i'm just saying i think we

2609
01:56:57,840 --> 01:56:59,920
should be asking some of these questions

2610
01:56:59,920 --> 01:57:02,480
all right thanks

2611
01:57:03,440 --> 01:57:05,920
yeah it's a good good question of course

2612
01:57:05,920 --> 01:57:08,239
um

2613
01:57:08,320 --> 01:57:11,440
we set out uh from the point of view of

2614
01:57:11,440 --> 01:57:13,679
uh not changing the protocol and but you

2615
01:57:13,679 --> 01:57:15,280
could certainly consider

2616
01:57:15,280 --> 01:57:18,080
um providing a sort of a eap next

2617
01:57:18,080 --> 01:57:20,000
generation type of thing

2618
01:57:20,000 --> 01:57:22,320
um whether that's sensible or not this

2619
01:57:22,320 --> 01:57:24,320
is obviously a a

2620
01:57:24,320 --> 01:57:26,400
different and maybe a bigger discussion

2621
01:57:26,400 --> 01:57:29,040
but but you and you might also have

2622
01:57:29,040 --> 01:57:31,520
like both answers are valid situations

2623
01:57:31,520 --> 01:57:32,239
where

2624
01:57:32,239 --> 01:57:34,480
you want to keep your documentation up

2625
01:57:34,480 --> 01:57:35,840
to date and

2626
01:57:35,840 --> 01:57:38,000
so on and you might also work on some

2627
01:57:38,000 --> 01:57:39,040
newer stuff but

2628
01:57:39,040 --> 01:57:41,760
but it but there's a you know weight in

2629
01:57:41,760 --> 01:57:43,360
deployed

2630
01:57:43,360 --> 01:57:46,080
systems and um and that that was

2631
01:57:46,080 --> 01:57:48,080
basically our rationale for

2632
01:57:48,080 --> 01:57:49,920
mostly worrying about the protocol

2633
01:57:49,920 --> 01:57:52,320
assets and describing it correctly

2634
01:57:52,320 --> 01:57:55,679
um than than updating the or changing

2635
01:57:55,679 --> 01:57:57,280
the protocol

2636
01:57:57,280 --> 01:57:59,679
um yeah one more thing on this this

2637
01:57:59,679 --> 01:58:00,560
discussion by

2638
01:58:00,560 --> 01:58:03,440
started by bernard and uh what roman

2639
01:58:03,440 --> 01:58:06,320
said i i think the

2640
01:58:06,560 --> 01:58:09,119
awareness of what's working and what's

2641
01:58:09,119 --> 01:58:10,080
not working

2642
01:58:10,080 --> 01:58:12,159
would be really good to have there's

2643
01:58:12,159 --> 01:58:14,000
also a category that i did not see

2644
01:58:14,000 --> 01:58:15,440
anyone mention yet which is

2645
01:58:15,440 --> 01:58:16,880
you know maybe there's some parts that

2646
01:58:16,880 --> 01:58:18,719
we could just deprecate because

2647
01:58:18,719 --> 01:58:20,719
you know this is not up to today's

2648
01:58:20,719 --> 01:58:23,520
standards anymore

2649
01:58:24,719 --> 01:58:28,239
particularly if it's not today anymore

2650
01:58:28,239 --> 01:58:34,960
performed because of some reason

2651
01:58:34,960 --> 01:58:37,280
yeah i don't know moet did you have any

2652
01:58:37,280 --> 01:58:38,320
uh or roman or

2653
01:58:38,320 --> 01:58:41,360
are you guys still in the queue oh no i

2654
01:58:41,360 --> 01:58:41,920
just

2655
01:58:41,920 --> 01:58:44,400
uh thought that we are now running like

2656
01:58:44,400 --> 01:58:45,920
two minutes and i don't know if we'll

2657
01:58:45,920 --> 01:58:48,320
have time to discuss the milestones

2658
01:58:48,320 --> 01:58:51,119
but uh no no more comments on on this

2659
01:58:51,119 --> 01:58:52,480
draft

2660
01:58:52,480 --> 01:58:53,920
yeah i think we'll we'll have to take

2661
01:58:53,920 --> 01:58:55,520
the milestones offline

2662
01:58:55,520 --> 01:58:59,360
and um i think we'll want to have

2663
01:58:59,360 --> 01:59:01,599
more more thank you for bringing this

2664
01:59:01,599 --> 01:59:02,560
yari i think we'll

2665
01:59:02,560 --> 01:59:05,040
want to have more discussion of uh of

2666
01:59:05,040 --> 01:59:05,840
this on the

2667
01:59:05,840 --> 01:59:08,239
on the list and to kind of figure out

2668
01:59:08,239 --> 01:59:10,800
what exactly the target will be here

2669
01:59:10,800 --> 01:59:13,199
and um i think also the milestone

2670
01:59:13,199 --> 01:59:15,119
discussion will be timely because likely

2671
01:59:15,119 --> 01:59:16,080
we'll have to figure

2672
01:59:16,080 --> 01:59:18,560
out if this fits in the in the emu

2673
01:59:18,560 --> 01:59:19,920
charter and

2674
01:59:19,920 --> 01:59:21,920
and you know what i think some of that

2675
01:59:21,920 --> 01:59:23,040
will depend on

2676
01:59:23,040 --> 01:59:24,560
where we think we want to go with this

2677
01:59:24,560 --> 01:59:26,159
document um

2678
01:59:26,159 --> 01:59:30,000
or this effort so anyway i think we're

2679
01:59:30,000 --> 01:59:34,639
just about out of time so thanks for uh

2680
01:59:34,719 --> 01:59:37,920
uh joining the meeting today and uh

2681
01:59:37,920 --> 01:59:45,040
see you next time

2682
01:59:45,040 --> 01:59:46,880
yeah i guess you'll find some of us in

2683
01:59:46,880 --> 01:59:49,760
the gather town so

2684
01:59:49,760 --> 01:59:53,760
have a great rest of the itf

2685
01:59:56,840 --> 01:59:59,840
thanks

2686
02:00:06,639 --> 02:00:08,719
you

