1
00:00:25,760 --> 00:00:27,279
so i bet that you are all wondering what

2
00:00:27,279 --> 00:00:28,880
the countdown was for

3
00:00:28,880 --> 00:00:32,000
um sorry no great reveal

4
00:00:32,000 --> 00:00:36,800
um cullen i'm speaking

5
00:00:37,520 --> 00:00:40,480
hopefully that works

6
00:00:40,719 --> 00:00:43,680
welcome to s frame i think this might be

7
00:00:43,680 --> 00:00:44,640
our first

8
00:00:44,640 --> 00:00:48,320
uh second formal meeting

9
00:00:48,320 --> 00:00:51,760
happens like that sometimes um

10
00:00:51,760 --> 00:00:55,600
i'll be cheering uh my co-chair bobo was

11
00:00:55,600 --> 00:00:56,320
probably

12
00:00:56,320 --> 00:00:59,280
happily sleeping i'm sorry i can't say

13
00:00:59,280 --> 00:01:00,879
the same thing

14
00:01:00,879 --> 00:01:02,640
i'll turn my video off so you don't get

15
00:01:02,640 --> 00:01:04,080
to see my

16
00:01:04,080 --> 00:01:08,400
blurry sleep deprived face and

17
00:01:08,400 --> 00:01:13,840
we'll get into the meeting

18
00:01:15,840 --> 00:01:17,840
what's up i'm just going to go through a

19
00:01:17,840 --> 00:01:19,920
few slides we'll talk about the agenda

20
00:01:19,920 --> 00:01:22,880
and then i'll see where we end up

21
00:01:22,880 --> 00:01:25,200
everyone's read the note well

22
00:01:25,200 --> 00:01:27,920
hopefully it's on the slide in case you

23
00:01:27,920 --> 00:01:28,560
haven't

24
00:01:28,560 --> 00:01:30,799
it's on the website in case you actually

25
00:01:30,799 --> 00:01:33,439
care to read it

26
00:01:34,000 --> 00:01:36,000
so i don't have a hugely long session

27
00:01:36,000 --> 00:01:37,119
this evening

28
00:01:37,119 --> 00:01:40,479
or this morning or this afternoon so

29
00:01:40,479 --> 00:01:42,960
um we have some a few short

30
00:01:42,960 --> 00:01:45,360
presentations

31
00:01:45,360 --> 00:01:47,920
after some discussion on the list about

32
00:01:47,920 --> 00:01:48,399
uh

33
00:01:48,399 --> 00:01:50,720
the big picture stuff uh i thought it

34
00:01:50,720 --> 00:01:51,520
might help

35
00:01:51,520 --> 00:01:53,680
to get uh someone to do a bit of an

36
00:01:53,680 --> 00:01:54,880
overview of

37
00:01:54,880 --> 00:01:56,640
the the use cases in the skype so we

38
00:01:56,640 --> 00:01:58,799
actually have two presentations on that

39
00:01:58,799 --> 00:02:00,000
i think tim's going to be talking about

40
00:02:00,000 --> 00:02:04,399
the the the meta-level questions

41
00:02:04,560 --> 00:02:07,600
and dr alex has presentations on how

42
00:02:07,600 --> 00:02:08,160
every

43
00:02:08,160 --> 00:02:09,758
how the technical pieces all fit

44
00:02:09,758 --> 00:02:11,360
together

45
00:02:11,360 --> 00:02:15,520
uh then sergio has the draft on

46
00:02:15,520 --> 00:02:19,200
a proposal that's now in ibt core and

47
00:02:19,200 --> 00:02:22,319
uh you give some time to talk about the

48
00:02:22,319 --> 00:02:24,800
mls integration as well so

49
00:02:24,800 --> 00:02:28,640
nothing all that exciting there

50
00:02:28,640 --> 00:02:32,319
uh in terms of status updates uh

51
00:02:32,319 --> 00:02:34,400
not a lot to say oh i should say uh

52
00:02:34,400 --> 00:02:35,440
before i go on

53
00:02:35,440 --> 00:02:38,640
does anyone want to bash the agenda

54
00:02:38,640 --> 00:02:41,119
anything else

55
00:02:44,000 --> 00:02:45,280
i think that since there was so much

56
00:02:45,280 --> 00:02:47,599
excitement on the list uh

57
00:02:47,599 --> 00:02:49,200
there would be someone wanting to say

58
00:02:49,200 --> 00:02:53,040
something but nevertheless we move on

59
00:02:53,519 --> 00:02:56,720
yeah not really uh not a lot's happened

60
00:02:56,720 --> 00:02:58,000
in the past little while

61
00:02:58,000 --> 00:03:00,000
and we're kind of hoping that that will

62
00:03:00,000 --> 00:03:01,519
change

63
00:03:01,519 --> 00:03:03,599
but we had a good meeting last time and

64
00:03:03,599 --> 00:03:04,959
so

65
00:03:04,959 --> 00:03:06,159
maybe we can have a good one this time

66
00:03:06,159 --> 00:03:08,080
too

67
00:03:08,080 --> 00:03:11,200
i'm gonna pass off to tim

68
00:03:11,200 --> 00:03:19,040
uh i'll drive the slides and

69
00:03:19,040 --> 00:03:23,280
so with any luck my audio is working

70
00:03:23,360 --> 00:03:26,640
um yeah i'm gonna assume it is

71
00:03:26,640 --> 00:03:29,440
somebody will tell me if it isn't um so

72
00:03:29,440 --> 00:03:29,840
yeah

73
00:03:29,840 --> 00:03:33,680
uh frame scope and use cases um

74
00:03:33,680 --> 00:03:36,000
kind of trying to stand like a few

75
00:03:36,000 --> 00:03:37,680
thousand feet above this and

76
00:03:37,680 --> 00:03:39,280
and kind of see what's going on and i

77
00:03:39,280 --> 00:03:41,120
based this on a little bit of

78
00:03:41,120 --> 00:03:42,799
implementation experience that i've had

79
00:03:42,799 --> 00:03:44,080
but also listening to

80
00:03:44,080 --> 00:03:47,200
what the jitsi people have done

81
00:03:47,200 --> 00:03:49,360
and they've spoken publicly about their

82
00:03:49,360 --> 00:03:51,200
implementation experience and what they

83
00:03:51,200 --> 00:03:53,280
needed and whatever so it kind of comes

84
00:03:53,280 --> 00:03:55,760
out of that

85
00:03:55,760 --> 00:04:01,840
next slide please

86
00:04:03,599 --> 00:04:06,480
so to my mind and i think this is

87
00:04:06,480 --> 00:04:07,920
something that we can like all

88
00:04:07,920 --> 00:04:10,159
discuss in a minute it's just 10-minute

89
00:04:10,159 --> 00:04:12,159
slot and only two slides so it should be

90
00:04:12,159 --> 00:04:13,920
we should have time to discuss this to

91
00:04:13,920 --> 00:04:16,320
my mind there is only a single use case

92
00:04:16,320 --> 00:04:17,519
and that it is for

93
00:04:17,519 --> 00:04:20,560
selective forwarding units um what we're

94
00:04:20,560 --> 00:04:21,839
trying to do

95
00:04:21,839 --> 00:04:25,040
is to protect i mean the

96
00:04:25,040 --> 00:04:26,800
like really high level view is that

97
00:04:26,800 --> 00:04:28,639
we're protecting your data

98
00:04:28,639 --> 00:04:30,560
from your service provider so that you

99
00:04:30,560 --> 00:04:33,360
know alice and bob can have a

100
00:04:33,360 --> 00:04:36,720
a private conversation without their

101
00:04:36,720 --> 00:04:39,600
mutual service provider having to be in

102
00:04:39,600 --> 00:04:40,880
the

103
00:04:40,880 --> 00:04:42,960
in the media stream in terms of being

104
00:04:42,960 --> 00:04:44,880
able to comprehend it

105
00:04:44,880 --> 00:04:46,720
uh the flip side is also true you're

106
00:04:46,720 --> 00:04:48,560
protecting the service provider from

107
00:04:48,560 --> 00:04:49,759
your data so

108
00:04:49,759 --> 00:04:53,199
the service provider is is is given um

109
00:04:53,199 --> 00:04:55,919
let's say plausible deniability about

110
00:04:55,919 --> 00:04:56,720
whether they

111
00:04:56,720 --> 00:04:59,120
were exposed to your share dealing plans

112
00:04:59,120 --> 00:05:00,320
or whether they

113
00:05:00,320 --> 00:05:03,280
saw your patent before it was filed so

114
00:05:03,280 --> 00:05:05,759
it's kind of two-way protection here

115
00:05:05,759 --> 00:05:09,039
and and yes if you like the clue in the

116
00:05:09,039 --> 00:05:10,160
sfu is about

117
00:05:10,160 --> 00:05:13,120
selective forwarding it's it's selective

118
00:05:13,120 --> 00:05:15,039
about what it's trying to forward

119
00:05:15,039 --> 00:05:17,280
um it gets a lot of stuff from from the

120
00:05:17,280 --> 00:05:19,280
sender and it only forwards some of it

121
00:05:19,280 --> 00:05:20,720
to the receivers

122
00:05:20,720 --> 00:05:23,280
and so it's doing an impedance match

123
00:05:23,280 --> 00:05:24,720
between the source and the syncing

124
00:05:24,720 --> 00:05:25,680
effect

125
00:05:25,680 --> 00:05:29,280
um and that's typically at the level of

126
00:05:29,280 --> 00:05:30,639
either bandwidth

127
00:05:30,639 --> 00:05:32,320
because not all the recipients have the

128
00:05:32,320 --> 00:05:34,080
same downlink

129
00:05:34,080 --> 00:05:35,520
like some recipients have got much more

130
00:05:35,520 --> 00:05:37,120
downlink than others and

131
00:05:37,120 --> 00:05:40,080
likewise the resolution um some of the

132
00:05:40,080 --> 00:05:41,680
recipients have different screen sizes

133
00:05:41,680 --> 00:05:42,479
from others

134
00:05:42,479 --> 00:05:44,479
and so basically the sfu is faced with

135
00:05:44,479 --> 00:05:45,600
the question of like

136
00:05:45,600 --> 00:05:48,479
which of these packets i've received

137
00:05:48,479 --> 00:05:50,080
that i want to multiplex out

138
00:05:50,080 --> 00:05:52,720
ideally to everybody which of them can i

139
00:05:52,720 --> 00:05:53,360
drop

140
00:05:53,360 --> 00:05:56,080
to somebody who can't cope with all of

141
00:05:56,080 --> 00:05:56,720
it

142
00:05:56,720 --> 00:05:58,720
and and that's the like what we're

143
00:05:58,720 --> 00:06:00,160
trying to do here is

144
00:06:00,160 --> 00:06:03,680
is to support that um can we

145
00:06:03,680 --> 00:06:07,840
move to the next slide please

146
00:06:09,759 --> 00:06:13,600
and so i that brings us to the scope and

147
00:06:13,600 --> 00:06:14,560
what and

148
00:06:14,560 --> 00:06:18,080
to my view again i think like

149
00:06:18,080 --> 00:06:19,520
what we should be doing here is as

150
00:06:19,520 --> 00:06:21,440
little as possible like we're in a hurry

151
00:06:21,440 --> 00:06:22,880
this stuff is shipping gypsy have

152
00:06:22,880 --> 00:06:23,759
already got

153
00:06:23,759 --> 00:06:27,199
people doing this and the risk is that

154
00:06:27,199 --> 00:06:28,560
people are going to hand roll the

155
00:06:28,560 --> 00:06:30,639
encryption for this um

156
00:06:30,639 --> 00:06:32,800
for this use case and there are some

157
00:06:32,800 --> 00:06:35,680
tremendous foot cannons here that like

158
00:06:35,680 --> 00:06:37,919
as true with a lot of encryption this

159
00:06:37,919 --> 00:06:38,720
but but in

160
00:06:38,720 --> 00:06:40,000
this case there are some really

161
00:06:40,000 --> 00:06:42,240
wonderful ones so

162
00:06:42,240 --> 00:06:44,240
um i think what we need to be doing is

163
00:06:44,240 --> 00:06:46,639
describing

164
00:06:46,639 --> 00:06:49,680
what the unencrypted sfu receives in

165
00:06:49,680 --> 00:06:50,800
terms of info

166
00:06:50,800 --> 00:06:53,840
so what it can see

167
00:06:54,319 --> 00:06:57,599
uh that then would then allow it to

168
00:06:57,599 --> 00:06:58,240
decide

169
00:06:58,240 --> 00:07:00,720
what packets to drop and potentially

170
00:07:00,720 --> 00:07:01,280
also

171
00:07:01,280 --> 00:07:03,919
it's useful for it to be able to decide

172
00:07:03,919 --> 00:07:05,759
when it can drop those packets because

173
00:07:05,759 --> 00:07:07,039
there are some points where it's more

174
00:07:07,039 --> 00:07:08,319
useful to

175
00:07:08,319 --> 00:07:09,840
like switch layers or something like

176
00:07:09,840 --> 00:07:13,199
that um and it may be necessary

177
00:07:13,199 --> 00:07:15,440
to unders for it to understand what it's

178
00:07:15,440 --> 00:07:17,680
like what it should or could cache

179
00:07:17,680 --> 00:07:20,160
in terms of things like keyframes or

180
00:07:20,160 --> 00:07:20,880
last

181
00:07:20,880 --> 00:07:24,160
x packets per layer and that's to me

182
00:07:24,160 --> 00:07:24,720
that's the

183
00:07:24,720 --> 00:07:26,479
total scope of what we need to be doing

184
00:07:26,479 --> 00:07:28,639
here just describing these things

185
00:07:28,639 --> 00:07:31,280
and deciding what what they are and kind

186
00:07:31,280 --> 00:07:33,039
of

187
00:07:33,039 --> 00:07:35,360
i'm can't actually think of anything

188
00:07:35,360 --> 00:07:37,120
else that should be in scope and i guess

189
00:07:37,120 --> 00:07:37,680
so

190
00:07:37,680 --> 00:07:39,440
the purpose of this presentation is to

191
00:07:39,440 --> 00:07:41,039
put those two

192
00:07:41,039 --> 00:07:43,199
questions out there like is there more

193
00:07:43,199 --> 00:07:44,800
to the scope than this

194
00:07:44,800 --> 00:07:47,440
is there more to the more use cases than

195
00:07:47,440 --> 00:07:48,560
this and if so

196
00:07:48,560 --> 00:07:50,319
what are they and do they fit within the

197
00:07:50,319 --> 00:07:52,879
charter and that's kind of pretty much

198
00:07:52,879 --> 00:07:59,840
all i wanted to say i think

199
00:08:01,199 --> 00:08:03,840
so i'm looking to see if anyone raises a

200
00:08:03,840 --> 00:08:05,039
hand

201
00:08:05,039 --> 00:08:08,560
yeah that's what we're waiting for

202
00:08:09,280 --> 00:08:13,840
oh look at this it begins jonathan

203
00:08:16,000 --> 00:08:18,160
um i think i agree but i think that

204
00:08:18,160 --> 00:08:19,280
there's

205
00:08:19,280 --> 00:08:20,800
probably more foot cannons than you

206
00:08:20,800 --> 00:08:22,319
anticipate

207
00:08:22,319 --> 00:08:24,080
which is to say there's you know when

208
00:08:24,080 --> 00:08:25,520
you describe the unscripted info that

209
00:08:25,520 --> 00:08:27,360
sfu gets there's

210
00:08:27,360 --> 00:08:28,800
that's there's probably some foot

211
00:08:28,800 --> 00:08:31,680
cannons there too which is to say

212
00:08:31,680 --> 00:08:35,919
both in terms of uh sending too much

213
00:08:35,919 --> 00:08:37,599
that you end up accidentally exposing

214
00:08:37,599 --> 00:08:39,360
information because

215
00:08:39,360 --> 00:08:41,200
basically um encrypted media especially

216
00:08:41,200 --> 00:08:42,799
equipment video is

217
00:08:42,799 --> 00:08:45,360
pretty complicated and so both in terms

218
00:08:45,360 --> 00:08:46,640
of you know accidentally encrypting

219
00:08:46,640 --> 00:08:47,760
something that turns out just a few

220
00:08:47,760 --> 00:08:48,959
needs

221
00:08:48,959 --> 00:08:52,399
and um accidentally not encrypting

222
00:08:52,399 --> 00:08:54,399
something that you know you actually

223
00:08:54,399 --> 00:08:55,600
exposed something that you weren't

224
00:08:55,600 --> 00:08:57,360
anticipating exposing

225
00:08:57,360 --> 00:09:00,560
are both potentially complicated issues

226
00:09:00,560 --> 00:09:02,640
here so there's going to be a lot of

227
00:09:02,640 --> 00:09:04,720
this is you know going to be a fairly

228
00:09:04,720 --> 00:09:07,040
hard problem at least to do in

229
00:09:07,040 --> 00:09:09,680
you know in generality and interoperabil

230
00:09:09,680 --> 00:09:11,279
with good interoperability

231
00:09:11,279 --> 00:09:13,680
as opposed to i know what i'm you know

232
00:09:13,680 --> 00:09:15,279
i'm only doing this codec

233
00:09:15,279 --> 00:09:17,920
i know that means i send bites one

234
00:09:17,920 --> 00:09:19,120
through six

235
00:09:19,120 --> 00:09:21,519
not safe you know with my encoder

236
00:09:21,519 --> 00:09:22,399
implementation

237
00:09:22,399 --> 00:09:25,440
and done yeah

238
00:09:25,440 --> 00:09:28,959
i mean i i totally agree that there are

239
00:09:28,959 --> 00:09:33,440
huge um pitfalls to fall into here

240
00:09:33,440 --> 00:09:37,120
but i i think that what we

241
00:09:37,120 --> 00:09:38,959
the one that we've already fallen into

242
00:09:38,959 --> 00:09:41,040
is trying not is

243
00:09:41,040 --> 00:09:43,279
not abstracting enough which is why i

244
00:09:43,279 --> 00:09:45,279
wanted to do this like very high level

245
00:09:45,279 --> 00:09:46,080
view

246
00:09:46,080 --> 00:09:48,880
is that i think that this like we really

247
00:09:48,880 --> 00:09:50,720
are looking at what packets to drop and

248
00:09:50,720 --> 00:09:51,839
to be honest

249
00:09:51,839 --> 00:09:53,680
if you don't drop a packet that you

250
00:09:53,680 --> 00:09:55,760
should have dropped or you do

251
00:09:55,760 --> 00:09:57,120
drop a packet that you shouldn't have

252
00:09:57,120 --> 00:09:59,279
dropped it sort of doesn't matter as

253
00:09:59,279 --> 00:10:00,560
much as you might think because this

254
00:10:00,560 --> 00:10:01,440
thing is all over

255
00:10:01,440 --> 00:10:04,320
udp anyway like it's not a precision

256
00:10:04,320 --> 00:10:05,279
thing

257
00:10:05,279 --> 00:10:07,839
um and if you if you send more packets

258
00:10:07,839 --> 00:10:08,880
than you should have done they're going

259
00:10:08,880 --> 00:10:10,880
to get dropped by somebody else

260
00:10:10,880 --> 00:10:14,079
so i i think there's a slight

261
00:10:14,079 --> 00:10:15,680
there's been an over emphasis on

262
00:10:15,680 --> 00:10:17,040
precision here which i think is

263
00:10:17,040 --> 00:10:18,079
unhelpful

264
00:10:18,079 --> 00:10:21,120
i think we are generally less accurate

265
00:10:21,120 --> 00:10:24,240
that's true but that does imply things

266
00:10:24,240 --> 00:10:26,399
on right right now i think

267
00:10:26,399 --> 00:10:29,519
there are certain assumptions that the

268
00:10:29,519 --> 00:10:32,079
ultimate decoders make about their media

269
00:10:32,079 --> 00:10:33,839
that you know

270
00:10:33,839 --> 00:10:35,120
you know that there is a certain

271
00:10:35,120 --> 00:10:37,600
precision in it that you know that

272
00:10:37,600 --> 00:10:39,040
they're they're it's going to be

273
00:10:39,040 --> 00:10:40,720
reasonably self-consistent about you

274
00:10:40,720 --> 00:10:41,519
know what's in it

275
00:10:41,519 --> 00:10:44,000
and you know gaps are you know

276
00:10:44,000 --> 00:10:44,800
semantically

277
00:10:44,800 --> 00:10:48,560
you know is missing and so i think that

278
00:10:48,560 --> 00:10:51,040
but that's that's fine so that's what a

279
00:10:51,040 --> 00:10:53,680
knack is for

280
00:10:55,120 --> 00:10:56,399
not if a knack is something that turns

281
00:10:56,399 --> 00:10:58,399
out that something dropped deliberately

282
00:10:58,399 --> 00:11:00,800
and then the other side thinks it

283
00:11:00,800 --> 00:11:01,519
doesn't

284
00:11:01,519 --> 00:11:04,399
yeah and though so i mean it's there's

285
00:11:04,399 --> 00:11:04,800
you know

286
00:11:04,800 --> 00:11:07,279
if if the receiver thinks you know a gap

287
00:11:07,279 --> 00:11:08,480
means something goes needed and the

288
00:11:08,480 --> 00:11:10,079
sender thinks oh gaap is just because i

289
00:11:10,079 --> 00:11:11,680
chose not to send that to you and they

290
00:11:11,680 --> 00:11:13,360
disagree they said the receiver doesn't

291
00:11:13,360 --> 00:11:14,880
move forward then you have a problem

292
00:11:14,880 --> 00:11:16,160
so that there's you know i think this

293
00:11:16,160 --> 00:11:18,720
imposes more requirements

294
00:11:18,720 --> 00:11:20,640
on understanding potentially messy

295
00:11:20,640 --> 00:11:21,839
streams

296
00:11:21,839 --> 00:11:23,760
on the ultimate decoders than we

297
00:11:23,760 --> 00:11:25,200
currently have right now there's sort of

298
00:11:25,200 --> 00:11:26,160
an assumption that

299
00:11:26,160 --> 00:11:28,959
the sfus clean up a lot of mess which

300
00:11:28,959 --> 00:11:30,480
given this environment they can't

301
00:11:30,480 --> 00:11:33,760
so i think that needs to be understood

302
00:11:33,760 --> 00:11:36,560
uh yeah but i don't think that tells you

303
00:11:36,560 --> 00:11:38,320
how you have to solve that problem

304
00:11:38,320 --> 00:11:39,680
no it doesn't just it's something we're

305
00:11:39,680 --> 00:11:41,519
going to need to look at and decide and

306
00:11:41,519 --> 00:11:42,399
i think that's something we're going to

307
00:11:42,399 --> 00:11:43,519
need to actually just

308
00:11:43,519 --> 00:11:45,920
decide and make explicit that you know

309
00:11:45,920 --> 00:11:47,360
if you have a

310
00:11:47,360 --> 00:11:48,959
existing implementation that assumes a

311
00:11:48,959 --> 00:11:50,560
reasonably clean stream

312
00:11:50,560 --> 00:11:52,079
well if you're dealing if you're doing s

313
00:11:52,079 --> 00:11:53,440
frame sorry you don't get that you're

314
00:11:53,440 --> 00:11:54,639
going to have to

315
00:11:54,639 --> 00:11:57,839
you know deal with mess

316
00:11:59,760 --> 00:12:04,880
all right thanks jonathan uh bernard

317
00:12:05,440 --> 00:12:09,360
to uh underline jonathan's point

318
00:12:09,360 --> 00:12:11,360
one thing that i don't think it's been

319
00:12:11,360 --> 00:12:12,639
written down but

320
00:12:12,639 --> 00:12:15,680
their decoders can be very finicky uh an

321
00:12:15,680 --> 00:12:17,360
example is vp8 where

322
00:12:17,360 --> 00:12:19,920
the picture id not only has to be

323
00:12:19,920 --> 00:12:21,680
monotonically increasing

324
00:12:21,680 --> 00:12:24,959
it has to be sequential and

325
00:12:24,959 --> 00:12:27,279
what that means is if you drop a frame

326
00:12:27,279 --> 00:12:28,959
even if it's not

327
00:12:28,959 --> 00:12:31,519
even if it's discardable it'll cause the

328
00:12:31,519 --> 00:12:32,880
decoder

329
00:12:32,880 --> 00:12:36,240
to find the stream undecodable and

330
00:12:36,240 --> 00:12:39,519
what that means in practice is that the

331
00:12:39,519 --> 00:12:42,480
picture id has to be rewritten by the

332
00:12:42,480 --> 00:12:44,000
sfu

333
00:12:44,000 --> 00:12:47,200
so there are a lot of uh codec specific

334
00:12:47,200 --> 00:12:50,959
complexities here um so

335
00:12:50,959 --> 00:12:52,720
if you say we have to create metadata

336
00:12:52,720 --> 00:12:54,720
that works for all codecs

337
00:12:54,720 --> 00:12:57,360
um i don't know that that's really

338
00:12:57,360 --> 00:12:58,880
possible

339
00:12:58,880 --> 00:13:01,839
i haven't shown ourselves able to do it

340
00:13:01,839 --> 00:13:04,079
yet

341
00:13:04,959 --> 00:13:07,120
and there's been at least three attempts

342
00:13:07,120 --> 00:13:08,959
to to achieve that

343
00:13:08,959 --> 00:13:10,720
um the other thing is about the use case

344
00:13:10,720 --> 00:13:12,160
itself which

345
00:13:12,160 --> 00:13:14,000
seems to assume that the service

346
00:13:14,000 --> 00:13:15,839
provider is

347
00:13:15,839 --> 00:13:18,160
uh separate from the from the

348
00:13:18,160 --> 00:13:19,120
application

349
00:13:19,120 --> 00:13:22,720
provider and the the problem is that

350
00:13:22,720 --> 00:13:24,399
that's a business model which doesn't

351
00:13:24,399 --> 00:13:27,200
really exist to any significant extent

352
00:13:27,200 --> 00:13:29,519
so if you look at all the major products

353
00:13:29,519 --> 00:13:30,399
out there the

354
00:13:30,399 --> 00:13:34,560
the sfu provider is basically the same

355
00:13:34,560 --> 00:13:37,600
as the application provider and

356
00:13:37,600 --> 00:13:39,199
that creates a whole lot of problems if

357
00:13:39,199 --> 00:13:40,880
you're serving javascript

358
00:13:40,880 --> 00:13:42,800
which actually is in possession of keys

359
00:13:42,800 --> 00:13:44,240
and then you're claiming you get any

360
00:13:44,240 --> 00:13:46,480
additional security out of that

361
00:13:46,480 --> 00:13:49,839
that's not really true i i mean totally

362
00:13:49,839 --> 00:13:50,480
and

363
00:13:50,480 --> 00:13:53,120
hence the to the second point totally uh

364
00:13:53,120 --> 00:13:54,560
and hence the

365
00:13:54,560 --> 00:13:56,800
the the wording about kind of plausible

366
00:13:56,800 --> 00:13:57,760
deniability

367
00:13:57,760 --> 00:14:00,480
it's not an absolute it's it's a it's

368
00:14:00,480 --> 00:14:02,480
merely moving the needle um

369
00:14:02,480 --> 00:14:05,040
but it seems to be a moving and moving

370
00:14:05,040 --> 00:14:07,360
of the needle that people

371
00:14:07,360 --> 00:14:09,279
want now whether they're right to want

372
00:14:09,279 --> 00:14:12,000
it or not is kind of almost not

373
00:14:12,000 --> 00:14:15,120
uh i think the actual real problem is

374
00:14:15,120 --> 00:14:16,320
something quite different

375
00:14:16,320 --> 00:14:18,720
it's really attacks on virtual machines

376
00:14:18,720 --> 00:14:20,639
by other virtues

377
00:14:20,639 --> 00:14:22,399
right it's spectre and all of that stuff

378
00:14:22,399 --> 00:14:24,800
that that's really what the real

379
00:14:24,800 --> 00:14:28,320
real issue is yeah it's really

380
00:14:28,320 --> 00:14:31,199
yeah so that that probably should be

381
00:14:31,199 --> 00:14:33,279
should be said

382
00:14:33,279 --> 00:14:36,480
anyway and i think just

383
00:14:36,480 --> 00:14:39,839
just to cover the first point i think um

384
00:14:39,839 --> 00:14:42,320
there's an assumption there that that

385
00:14:42,320 --> 00:14:45,519
rewriting has to be done in the sfu

386
00:14:45,519 --> 00:14:49,120
um which is kind of there's this tacit

387
00:14:49,120 --> 00:14:50,880
assumption that the sfu

388
00:14:50,880 --> 00:14:53,600
will do everything it has to do so that

389
00:14:53,600 --> 00:14:54,480
the

390
00:14:54,480 --> 00:14:58,000
um the decoder at the far end

391
00:14:58,000 --> 00:15:00,399
doesn't know that s frame is involved

392
00:15:00,399 --> 00:15:02,000
and i think what we're starting to hear

393
00:15:02,000 --> 00:15:05,279
is that may not be possible

394
00:15:07,760 --> 00:15:13,839
okay thanks bernard stefan

395
00:15:14,320 --> 00:15:16,320
oh and by the way i'm cutting the cue

396
00:15:16,320 --> 00:15:17,680
here because this

397
00:15:17,680 --> 00:15:22,160
session has only a few more minutes left

398
00:15:23,279 --> 00:15:26,399
good morning is that now working

399
00:15:26,399 --> 00:15:29,680
yes okay great um so i i thought the

400
00:15:29,680 --> 00:15:31,040
same horn here that

401
00:15:31,040 --> 00:15:34,800
uh that uh bernard and

402
00:15:34,800 --> 00:15:38,320
jonathan had i would suggest uh

403
00:15:38,320 --> 00:15:41,199
that it is it is a it's basically

404
00:15:41,199 --> 00:15:44,079
impossible to do this in a generic way

405
00:15:44,079 --> 00:15:46,880
um i would suggest to add to the

406
00:15:46,880 --> 00:15:47,839
requirements

407
00:15:47,839 --> 00:15:50,800
that there should be codec specific

408
00:15:50,800 --> 00:15:51,839
restrictions

409
00:15:51,839 --> 00:15:55,600
on the codec bitstream complexity

410
00:15:55,600 --> 00:15:59,440
things like okay if you're using hvc

411
00:15:59,440 --> 00:16:02,880
you should you shall not use gradual

412
00:16:02,880 --> 00:16:04,720
decoder refresh

413
00:16:04,720 --> 00:16:06,560
you want to have a keyframe otherwise

414
00:16:06,560 --> 00:16:08,079
the concept of keyframes and keyframe

415
00:16:08,079 --> 00:16:10,560
caching is meaningless right things like

416
00:16:10,560 --> 00:16:11,440
that

417
00:16:11,440 --> 00:16:15,440
then you may you may have a chance

418
00:16:15,440 --> 00:16:19,279
um i'm i'm not optimistic even with that

419
00:16:19,279 --> 00:16:23,839
but you may have a chance thank you

420
00:16:28,399 --> 00:16:32,720
and next is magnus

421
00:16:33,279 --> 00:16:37,199
yes so i i i i want to turn i think the

422
00:16:37,199 --> 00:16:38,320
question around

423
00:16:38,320 --> 00:16:40,639
is it is it really decide what to drop

424
00:16:40,639 --> 00:16:43,279
is it they decide what to forward

425
00:16:43,279 --> 00:16:44,959
and and and for because from my

426
00:16:44,959 --> 00:16:46,720
perspective we are talking about

427
00:16:46,720 --> 00:16:48,800
media streams here and that's maybe the

428
00:16:48,800 --> 00:16:50,000
high level assumption at least

429
00:16:50,000 --> 00:16:53,199
is that there are several media streams

430
00:16:53,199 --> 00:16:54,399
it's not just

431
00:16:54,399 --> 00:16:57,759
one set of packets that you have to

432
00:16:57,759 --> 00:16:58,480
select some

433
00:16:58,480 --> 00:17:01,040
random set but it's it's we actually

434
00:17:01,040 --> 00:17:03,040
have some underlying structure and that

435
00:17:03,040 --> 00:17:04,000
still comes through

436
00:17:04,000 --> 00:17:06,559
here i think in even videos frames

437
00:17:06,559 --> 00:17:07,199
because

438
00:17:07,199 --> 00:17:09,520
you need to preserve that some

439
00:17:09,520 --> 00:17:11,280
information internally and some photos

440
00:17:11,280 --> 00:17:12,000
of you

441
00:17:12,000 --> 00:17:14,559
but it's worse than the receiver needs

442
00:17:14,559 --> 00:17:16,240
to understand these things and

443
00:17:16,240 --> 00:17:18,079
i think that's part of the context here

444
00:17:18,079 --> 00:17:20,240
is we need to have a model and we need

445
00:17:20,240 --> 00:17:21,919
to have saying okay what

446
00:17:21,919 --> 00:17:25,039
general type of structures are we

447
00:17:25,039 --> 00:17:26,400
supporting

448
00:17:26,400 --> 00:17:29,600
and handling you know that's a few

449
00:17:29,600 --> 00:17:32,799
contexts and that's what you come down

450
00:17:32,799 --> 00:17:34,960
to

451
00:17:39,039 --> 00:17:42,960
that's an assertion but i'm not totally

452
00:17:42,960 --> 00:17:46,400
certain that it's true i

453
00:17:46,400 --> 00:17:49,360
i mean if you like if these things are

454
00:17:49,360 --> 00:17:50,480
happening over a udp

455
00:17:50,480 --> 00:17:52,480
network and we've built the rest of it

456
00:17:52,480 --> 00:17:53,679
such that

457
00:17:53,679 --> 00:17:55,280
arbitrary things can be lost and it

458
00:17:55,280 --> 00:17:58,320
should work and i i'm puzzled that

459
00:17:58,320 --> 00:18:01,360
saying that dropping isn't good enough

460
00:18:01,360 --> 00:18:04,799
but so i on that

461
00:18:04,799 --> 00:18:06,160
i mean that's the other aspect i didn't

462
00:18:06,160 --> 00:18:08,400
bring it but so

463
00:18:08,400 --> 00:18:10,160
unless you have congestion or saying

464
00:18:10,160 --> 00:18:11,520
your resource shortage

465
00:18:11,520 --> 00:18:13,440
in the bandwidth okay fine you can send

466
00:18:13,440 --> 00:18:16,000
everything but the moment you have

467
00:18:16,000 --> 00:18:18,080
constrained the amount of resources and

468
00:18:18,080 --> 00:18:20,480
you need to confirm to that

469
00:18:20,480 --> 00:18:22,240
then you need to select the set which

470
00:18:22,240 --> 00:18:24,320
works and if you're gonna drop random

471
00:18:24,320 --> 00:18:24,799
things

472
00:18:24,799 --> 00:18:26,000
you're gonna get to something that

473
00:18:26,000 --> 00:18:28,080
doesn't work

474
00:18:28,080 --> 00:18:30,559
because you are not going to be able to

475
00:18:30,559 --> 00:18:32,640
if you're completely random drop

476
00:18:32,640 --> 00:18:35,280
you have a certain probability of it

477
00:18:35,280 --> 00:18:37,200
being able to repair it in time or not

478
00:18:37,200 --> 00:18:39,360
or otherwise it's late and that's what

479
00:18:39,360 --> 00:18:40,880
you end up being

480
00:18:40,880 --> 00:18:44,000
so right so so what we're

481
00:18:44,000 --> 00:18:46,480
trying to do is improve on random and my

482
00:18:46,480 --> 00:18:47,919
point is that we don't have to be

483
00:18:47,919 --> 00:18:49,360
perfect we just have to be better than

484
00:18:49,360 --> 00:18:50,160
random and we

485
00:18:50,160 --> 00:18:53,760
and we yes that might be good enough

486
00:18:53,760 --> 00:18:55,760
yes but be able to repair it means that

487
00:18:55,760 --> 00:18:57,520
you actually need to understand

488
00:18:57,520 --> 00:18:59,679
if something that was lost is something

489
00:18:59,679 --> 00:19:01,200
that's useful for you

490
00:19:01,200 --> 00:19:02,480
which means that you have to have

491
00:19:02,480 --> 00:19:04,559
structures that tells you

492
00:19:04,559 --> 00:19:06,799
that the things that didn't derive was

493
00:19:06,799 --> 00:19:08,240
something that you needed

494
00:19:08,240 --> 00:19:10,240
and that is a thicker part of the

495
00:19:10,240 --> 00:19:11,440
problem here

496
00:19:11,440 --> 00:19:13,760
because if you don't have know that this

497
00:19:13,760 --> 00:19:15,919
is an rtp stream at certain layer

498
00:19:15,919 --> 00:19:17,760
and that you lost something you either

499
00:19:17,760 --> 00:19:19,120
need to make it shift and do i need this

500
00:19:19,120 --> 00:19:21,039
layer could i drop the whole layer or

501
00:19:21,039 --> 00:19:22,799
is this the base layer and for the

502
00:19:22,799 --> 00:19:24,160
stream i actually want to show then i

503
00:19:24,160 --> 00:19:25,600
need to request getting this and you

504
00:19:25,600 --> 00:19:26,640
need to understand the difference

505
00:19:26,640 --> 00:19:28,400
between those two to be able to observe

506
00:19:28,400 --> 00:19:30,720
so you need you need some categorization

507
00:19:30,720 --> 00:19:32,240
which could be opaque

508
00:19:32,240 --> 00:19:35,280
but it needs to be categorized yes

509
00:19:35,280 --> 00:19:36,559
and you have to have that structure

510
00:19:36,559 --> 00:19:38,640
showing up i mean that's what rtp

511
00:19:38,640 --> 00:19:40,960
does to you if you use it correctly

512
00:19:40,960 --> 00:19:42,160
today

513
00:19:42,160 --> 00:19:43,840
and that needs to be preserved when you

514
00:19:43,840 --> 00:19:46,080
put s frames in rtp payloads

515
00:19:46,080 --> 00:19:48,480
so you can understand which things you

516
00:19:48,480 --> 00:19:50,080
did care about or not

517
00:19:50,080 --> 00:19:52,240
and if the relay was related to not to

518
00:19:52,240 --> 00:19:53,840
something you cared about even if

519
00:19:53,840 --> 00:19:55,440
it's only the receiver or the sender

520
00:19:55,440 --> 00:19:57,679
that knows if it's useful in which

521
00:19:57,679 --> 00:20:00,320
contexts

522
00:20:01,200 --> 00:20:03,679
but i think that's enough i think that's

523
00:20:03,679 --> 00:20:04,400
a good point

524
00:20:04,400 --> 00:20:07,840
thanks magnus uh

525
00:20:08,159 --> 00:20:10,000
yes for being passionate it's not it's

526
00:20:10,000 --> 00:20:11,600
not often that i get to make an

527
00:20:11,600 --> 00:20:13,919
end-to-end argument here

528
00:20:13,919 --> 00:20:17,760
but um i'm not working in

529
00:20:17,760 --> 00:20:20,880
webrtc or whatever i'm doing stuff that

530
00:20:20,880 --> 00:20:24,400
is entirely green field research

531
00:20:24,400 --> 00:20:27,120
uh i don't see the reason why the

532
00:20:27,120 --> 00:20:28,559
reflector

533
00:20:28,559 --> 00:20:31,120
needs to know anything about the

534
00:20:31,120 --> 00:20:33,840
semantics of the streams

535
00:20:33,840 --> 00:20:36,960
provided that the data

536
00:20:36,960 --> 00:20:41,200
is packaged up into different streams

537
00:20:41,200 --> 00:20:44,559
so that a selection can be made at some

538
00:20:44,559 --> 00:20:45,840
point

539
00:20:45,840 --> 00:20:49,600
and provided there is some virtual

540
00:20:49,600 --> 00:20:52,720
or singular authority somewhere that is

541
00:20:52,720 --> 00:20:54,320
saying which of these

542
00:20:54,320 --> 00:20:57,360
what the streams are in the way in such

543
00:20:57,360 --> 00:20:59,120
a way that the consumers of those

544
00:20:59,120 --> 00:21:00,400
streams

545
00:21:00,400 --> 00:21:03,520
can make a choice uh

546
00:21:03,520 --> 00:21:06,480
i think that is sufficient to be able to

547
00:21:06,480 --> 00:21:07,520
solve this problem

548
00:21:07,520 --> 00:21:11,520
so say i've got a phone that's on a

549
00:21:11,520 --> 00:21:15,280
a weak link that can make the choice of

550
00:21:15,280 --> 00:21:18,400
which streams it is going to consume

551
00:21:18,400 --> 00:21:21,760
and it's only that end device that can

552
00:21:21,760 --> 00:21:23,360
make decisions like

553
00:21:23,360 --> 00:21:26,799
oh i didn't get this packet but

554
00:21:26,799 --> 00:21:28,960
i'm not going to ask for a repeat of

555
00:21:28,960 --> 00:21:30,159
that packet

556
00:21:30,159 --> 00:21:33,280
because i've already shown the pres

557
00:21:33,280 --> 00:21:36,320
the next frame to the end user

558
00:21:36,320 --> 00:21:38,880
or you know i'm going to drop all that

559
00:21:38,880 --> 00:21:41,760
traffic and just re-synchronize

560
00:21:41,760 --> 00:21:44,559
and so i think that casting this more in

561
00:21:44,559 --> 00:21:45,360
an

562
00:21:45,360 --> 00:21:48,799
end-to-endy sort of fashion and looking

563
00:21:48,799 --> 00:21:49,200
at

564
00:21:49,200 --> 00:21:53,120
the service provider just having a

565
00:21:53,120 --> 00:21:56,880
um a black box that doesn't understand

566
00:21:56,880 --> 00:21:59,919
anything about the

567
00:21:59,919 --> 00:22:03,919
uh data that's traveling through it

568
00:22:03,919 --> 00:22:06,559
other than that it happens to be tagged

569
00:22:06,559 --> 00:22:07,120
in

570
00:22:07,120 --> 00:22:10,320
into these separate uh pieces

571
00:22:10,320 --> 00:22:11,919
uh i think that's a better way of

572
00:22:11,919 --> 00:22:14,080
looking at it uh

573
00:22:14,080 --> 00:22:17,199
it certainly helped me

574
00:22:20,559 --> 00:22:23,600
and that's it yeah thanks phil uh no i

575
00:22:23,600 --> 00:22:25,039
think you're the last in

576
00:22:25,039 --> 00:22:27,039
in the queue before we move on to the

577
00:22:27,039 --> 00:22:28,640
next topic

578
00:22:28,640 --> 00:22:30,080
yeah so a higher level question about

579
00:22:30,080 --> 00:22:31,679
this slide the scope

580
00:22:31,679 --> 00:22:33,520
uh looking ahead at the other uh

581
00:22:33,520 --> 00:22:35,440
presentations um

582
00:22:35,440 --> 00:22:37,360
i i see uh since a little mismatch i

583
00:22:37,360 --> 00:22:38,320
like to make sure that the group

584
00:22:38,320 --> 00:22:40,559
understands which way we're going

585
00:22:40,559 --> 00:22:43,039
um you know clearly this all started

586
00:22:43,039 --> 00:22:44,480
from being able to just

587
00:22:44,480 --> 00:22:46,640
support and end encryption but i think a

588
00:22:46,640 --> 00:22:48,000
lot of the mechanisms that are being

589
00:22:48,000 --> 00:22:48,880
proposed

590
00:22:48,880 --> 00:22:50,720
are really about insertable streams in

591
00:22:50,720 --> 00:22:52,880
general transforms on the media in

592
00:22:52,880 --> 00:22:53,679
general

593
00:22:53,679 --> 00:22:56,080
packetization formats for rtp in general

594
00:22:56,080 --> 00:22:57,440
so i wonder whether or not

595
00:22:57,440 --> 00:23:00,559
the group is is going to

596
00:23:00,559 --> 00:23:02,480
favor general solutions or maybe even

597
00:23:02,480 --> 00:23:04,080
prohibit a general solution

598
00:23:04,080 --> 00:23:07,600
are you really only focused on providing

599
00:23:07,600 --> 00:23:10,159
the end-to-end you know secure media

600
00:23:10,159 --> 00:23:11,200
solution

601
00:23:11,200 --> 00:23:14,240
and is it a goal or a non-goal or

602
00:23:14,240 --> 00:23:16,559
explicitly don't want to support

603
00:23:16,559 --> 00:23:23,520
things that are more generic than that

604
00:23:23,520 --> 00:23:25,679
i i mean to the extent that's a question

605
00:23:25,679 --> 00:23:27,120
for me which it kind of isn't because

606
00:23:27,120 --> 00:23:28,640
it's a question for the group

607
00:23:28,640 --> 00:23:30,159
i guess we should take it to the list

608
00:23:30,159 --> 00:23:32,720
but but my my opinion is we're in a

609
00:23:32,720 --> 00:23:33,440
hurry

610
00:23:33,440 --> 00:23:35,840
um and we should limit this as as far as

611
00:23:35,840 --> 00:23:36,799
possible if it

612
00:23:36,799 --> 00:23:38,559
happens that an easy solution that's

613
00:23:38,559 --> 00:23:40,880
generic drops out then that's great

614
00:23:40,880 --> 00:23:42,400
but i think the idea that we should

615
00:23:42,400 --> 00:23:45,200
track um track insertable screen

616
00:23:45,200 --> 00:23:48,400
streams and make them a dependency on

617
00:23:48,400 --> 00:23:51,840
this would be a mistake

618
00:23:57,840 --> 00:24:01,039
i'm hoping for another opinion i

619
00:24:01,039 --> 00:24:03,279
i think i'm thinking we might have to

620
00:24:03,279 --> 00:24:04,159
take this to the

621
00:24:04,159 --> 00:24:06,799
to the mailing list and uh hopefully dr

622
00:24:06,799 --> 00:24:08,559
alex can get himself in queue and we can

623
00:24:08,559 --> 00:24:09,760
have a discussion about

624
00:24:09,760 --> 00:24:13,279
the next thing um but unfortunate

625
00:24:13,279 --> 00:24:15,279
because that was going well

626
00:24:15,279 --> 00:24:18,480
uh thanks tim got

627
00:24:18,480 --> 00:24:20,240
got things rolling i i would encourage

628
00:24:20,240 --> 00:24:21,679
people to write down their

629
00:24:21,679 --> 00:24:23,120
their thoughts and put them into an

630
00:24:23,120 --> 00:24:26,000
email that we can talk about

631
00:24:26,000 --> 00:24:28,400
because no emails is much harder to work

632
00:24:28,400 --> 00:24:29,679
with than

633
00:24:29,679 --> 00:24:33,840
emails so

634
00:24:35,600 --> 00:24:38,158
slides

635
00:24:39,679 --> 00:24:43,279
um right so as one of the author

636
00:24:43,279 --> 00:24:45,679
of the original document and all the

637
00:24:45,679 --> 00:24:46,480
subsequent

638
00:24:46,480 --> 00:24:49,520
document scenes and of the charter

639
00:24:49,520 --> 00:24:52,400
we've been requested during the charter

640
00:24:52,400 --> 00:24:54,080
part of sram

641
00:24:54,080 --> 00:24:57,200
to give a big picture document and

642
00:24:57,200 --> 00:24:59,919
to show which part belong to which group

643
00:24:59,919 --> 00:25:01,120
as

644
00:25:01,120 --> 00:25:03,360
in the past 20 minutes many people

645
00:25:03,360 --> 00:25:04,559
pointed to

646
00:25:04,559 --> 00:25:06,080
there are parts that are media

647
00:25:06,080 --> 00:25:07,760
encryption in a part

648
00:25:07,760 --> 00:25:10,240
rtt packetization payload question and

649
00:25:10,240 --> 00:25:11,679
so on and so forth

650
00:25:11,679 --> 00:25:13,360
so i'm sorry i couldn't come up with an

651
00:25:13,360 --> 00:25:15,279
informal draft yet but it's going to

652
00:25:15,279 --> 00:25:16,480
come here

653
00:25:16,480 --> 00:25:19,039
next and that's why the first slide is

654
00:25:19,039 --> 00:25:20,159
about evt core

655
00:25:20,159 --> 00:25:23,039
as friend and in part whip where we're

656
00:25:23,039 --> 00:25:23,919
going to put

657
00:25:23,919 --> 00:25:26,400
all the excellent question and problem

658
00:25:26,400 --> 00:25:27,360
we have

659
00:25:27,360 --> 00:25:29,440
within their respective working group

660
00:25:29,440 --> 00:25:31,440
within a global picture

661
00:25:31,440 --> 00:25:34,880
and hopefully uh within draft so some of

662
00:25:34,880 --> 00:25:37,120
the draft didn't exist last time and are

663
00:25:37,120 --> 00:25:37,760
going to be

664
00:25:37,760 --> 00:25:39,760
cited and going to speak about in this

665
00:25:39,760 --> 00:25:41,440
session letter about sergio and by

666
00:25:41,440 --> 00:25:42,000
richard

667
00:25:42,000 --> 00:25:44,559
on specific point but the big picture i

668
00:25:44,559 --> 00:25:45,760
think is needed

669
00:25:45,760 --> 00:25:48,720
to avoid the 20 minute we just passed

670
00:25:48,720 --> 00:25:51,279
next slide

671
00:25:54,640 --> 00:25:57,520
so just looking at the original webrtc

672
00:25:57,520 --> 00:25:59,600
one which was supposed to be p2p

673
00:25:59,600 --> 00:26:01,919
we had something like this which is very

674
00:26:01,919 --> 00:26:04,320
simplify a source an encoder an rtp

675
00:26:04,320 --> 00:26:05,679
packetizer

676
00:26:05,679 --> 00:26:09,520
the srtp part with the the key creation

677
00:26:09,520 --> 00:26:10,000
and the key

678
00:26:10,000 --> 00:26:13,039
exchange um and then a transport so it's

679
00:26:13,039 --> 00:26:14,320
simplified it's a little bit more

680
00:26:14,320 --> 00:26:16,080
complicated and that i put some of the

681
00:26:16,080 --> 00:26:17,520
rfc obviously not

682
00:26:17,520 --> 00:26:20,880
all of them um and this is what

683
00:26:20,880 --> 00:26:24,720
the rtp redundancy and condition control

684
00:26:24,720 --> 00:26:25,600
can look like

685
00:26:25,600 --> 00:26:29,120
with the pli sli

686
00:26:29,120 --> 00:26:32,159
and everything that fits into the

687
00:26:32,159 --> 00:26:34,320
profile for simplification i'll

688
00:26:34,320 --> 00:26:37,520
also show only a single stream

689
00:26:37,520 --> 00:26:40,640
i don't go into simulcast and and

690
00:26:40,640 --> 00:26:43,679
nsvc until the end until the last slide

691
00:26:43,679 --> 00:26:46,480
next slide please

692
00:26:48,159 --> 00:26:51,120
so very quickly we had to hide the media

693
00:26:51,120 --> 00:26:53,120
server so it's a truncated way

694
00:26:53,120 --> 00:26:54,960
of the media path where we don't put the

695
00:26:54,960 --> 00:26:56,799
receiver we just put a sender a media

696
00:26:56,799 --> 00:26:58,400
server and a receiver

697
00:26:58,400 --> 00:27:00,240
and each of sender media server and

698
00:27:00,240 --> 00:27:04,159
receiver act like a webrtc peer

699
00:27:04,159 --> 00:27:06,559
and so now what what was an end-to-end

700
00:27:06,559 --> 00:27:09,120
encryption in p2p become a hub by hope

701
00:27:09,120 --> 00:27:11,520
and we can see exactly the same thing

702
00:27:11,520 --> 00:27:13,200
for illustration purpose i

703
00:27:13,200 --> 00:27:16,480
show a little uh red arrow uh

704
00:27:16,480 --> 00:27:19,440
to position where whip uh which was the

705
00:27:19,440 --> 00:27:20,000
discussion

706
00:27:20,000 --> 00:27:23,279
two hours ago should be which is the uh

707
00:27:23,279 --> 00:27:25,679
signaling protocol on top of jsep when

708
00:27:25,679 --> 00:27:27,279
the sender and the media server

709
00:27:27,279 --> 00:27:29,760
are are sending one way and you add

710
00:27:29,760 --> 00:27:31,520
exactly the same thing

711
00:27:31,520 --> 00:27:33,600
in that case you have small modification

712
00:27:33,600 --> 00:27:34,640
in the sense that

713
00:27:34,640 --> 00:27:37,279
if the media server is an sfu you do not

714
00:27:37,279 --> 00:27:39,600
need to manipulate the media anymore and

715
00:27:39,600 --> 00:27:40,480
what you do

716
00:27:40,480 --> 00:27:44,080
is mainly duplicating the rtp packet and

717
00:27:44,080 --> 00:27:45,279
modifying

718
00:27:45,279 --> 00:27:47,760
the rtp headers handling rtp heater

719
00:27:47,760 --> 00:27:48,399
extension

720
00:27:48,399 --> 00:27:51,360
and in a certain list of things so in

721
00:27:51,360 --> 00:27:52,320
addition to

722
00:27:52,320 --> 00:27:54,720
the original robot dc spec now we have

723
00:27:54,720 --> 00:27:57,760
trickle we have pack we have ice light

724
00:27:57,760 --> 00:28:02,399
we can cite also um 6904 which was the

725
00:28:02,399 --> 00:28:03,120
first

726
00:28:03,120 --> 00:28:05,440
heater extension encryption and the

727
00:28:05,440 --> 00:28:06,960
cryptex

728
00:28:06,960 --> 00:28:10,000
uh proposed draft by justine

729
00:28:10,000 --> 00:28:14,840
that will be presented at avt core next

730
00:28:14,840 --> 00:28:17,840
slide

731
00:28:22,720 --> 00:28:24,880
now if we want to add the end-to-end

732
00:28:24,880 --> 00:28:27,120
encryption of the webrtc multiple steps

733
00:28:27,120 --> 00:28:29,039
are needed right

734
00:28:29,039 --> 00:28:32,159
first uh you need to add an additional

735
00:28:32,159 --> 00:28:32,720
filter

736
00:28:32,720 --> 00:28:36,000
between the codec and the rtp payload um

737
00:28:36,000 --> 00:28:39,200
and that's what the um the draft and

738
00:28:39,200 --> 00:28:42,559
vt core about kodak agnostic is made and

739
00:28:42,559 --> 00:28:44,399
there will be a full presentation by

740
00:28:44,399 --> 00:28:46,080
sergio and uen

741
00:28:46,080 --> 00:28:50,080
on on the topic here this is the ietf

742
00:28:50,080 --> 00:28:51,760
point of view there is nothing about the

743
00:28:51,760 --> 00:28:52,480
web

744
00:28:52,480 --> 00:28:54,320
and this is what's going to be presented

745
00:28:54,320 --> 00:28:55,520
at nft core

746
00:28:55,520 --> 00:28:59,840
next slide

747
00:29:00,320 --> 00:29:03,679
now if you look now if you assume now

748
00:29:03,679 --> 00:29:06,240
that the media is encrypted

749
00:29:06,240 --> 00:29:09,279
uh the media server might not be the

750
00:29:09,279 --> 00:29:11,520
existing media server might not be able

751
00:29:11,520 --> 00:29:13,360
to do the job they're doing today

752
00:29:13,360 --> 00:29:15,919
because they depend on access on the rtp

753
00:29:15,919 --> 00:29:19,360
payload header and so you need to decide

754
00:29:19,360 --> 00:29:23,200
which information the sfu needs and

755
00:29:23,200 --> 00:29:26,000
where to put it so so far the idea was

756
00:29:26,000 --> 00:29:27,840
to take the information needed in a

757
00:29:27,840 --> 00:29:29,039
structured way

758
00:29:29,039 --> 00:29:32,159
and to put it in a rtp header extension

759
00:29:32,159 --> 00:29:34,080
one or two years ago at adt core the

760
00:29:34,080 --> 00:29:35,440
decision was that

761
00:29:35,440 --> 00:29:38,320
any new rtp payload should support frame

762
00:29:38,320 --> 00:29:39,279
marking

763
00:29:39,279 --> 00:29:41,039
there is a question mark today with the

764
00:29:41,039 --> 00:29:43,039
frame marking is enough or not

765
00:29:43,039 --> 00:29:44,960
and yes there are some question open

766
00:29:44,960 --> 00:29:46,720
about what information should be put

767
00:29:46,720 --> 00:29:47,919
there

768
00:29:47,919 --> 00:29:49,840
are we backward compatible or forward

769
00:29:49,840 --> 00:29:51,840
compatible and

770
00:29:51,840 --> 00:29:55,520
with the the new rtp payload for h.266

771
00:29:55,520 --> 00:29:56,480
by stefan

772
00:29:56,480 --> 00:30:00,559
and and the other authors or av1

773
00:30:00,559 --> 00:30:03,279
we come with svc codec that had a layer

774
00:30:03,279 --> 00:30:04,880
of complexity

775
00:30:04,880 --> 00:30:07,679
uh which needs to be dealt with in the

776
00:30:07,679 --> 00:30:08,640
sfu

777
00:30:08,640 --> 00:30:11,120
um and was designed for that and cannot

778
00:30:11,120 --> 00:30:13,200
be dealt really end-to-end

779
00:30:13,200 --> 00:30:14,960
so now you have two antagonist thing

780
00:30:14,960 --> 00:30:16,720
which is i want encryption as much as

781
00:30:16,720 --> 00:30:17,600
possible

782
00:30:17,600 --> 00:30:19,919
but i still want an sfu if i don't have

783
00:30:19,919 --> 00:30:22,080
an sfu in the loop i'm still p2p and an

784
00:30:22,080 --> 00:30:23,840
end to an encrypted and then i'm done

785
00:30:23,840 --> 00:30:24,880
right

786
00:30:24,880 --> 00:30:26,720
so one of the first questions still

787
00:30:26,720 --> 00:30:29,039
unsolved that will require discussion

788
00:30:29,039 --> 00:30:32,320
at ivt core is what do we do

789
00:30:32,320 --> 00:30:37,678
in that rtp heater extension next slide

790
00:30:40,000 --> 00:30:43,600
the second question is uh now i need to

791
00:30:43,600 --> 00:30:44,880
exchange a key

792
00:30:44,880 --> 00:30:47,279
end to end as opposed to exchange a key

793
00:30:47,279 --> 00:30:48,240
hub by hope

794
00:30:48,240 --> 00:30:51,520
how do i do that so here the exchange of

795
00:30:51,520 --> 00:30:53,440
the key you know you rotate the key and

796
00:30:53,440 --> 00:30:54,000
so on

797
00:30:54,000 --> 00:30:56,720
is is orthogonal to really the media

798
00:30:56,720 --> 00:30:58,000
encryption so the s

799
00:30:58,000 --> 00:31:00,799
frame group was charted to define a

800
00:31:00,799 --> 00:31:03,039
media encryption independently of the

801
00:31:03,039 --> 00:31:04,000
use case

802
00:31:04,000 --> 00:31:06,720
and independently of of the key exchange

803
00:31:06,720 --> 00:31:07,440
a little bit

804
00:31:07,440 --> 00:31:09,440
like in a perk group you have a

805
00:31:09,440 --> 00:31:10,880
difference between the double

806
00:31:10,880 --> 00:31:13,039
documents and the three other documents

807
00:31:13,039 --> 00:31:14,159
that were

808
00:31:14,159 --> 00:31:16,559
all together designing a system so sram

809
00:31:16,559 --> 00:31:18,640
is media encryption only

810
00:31:18,640 --> 00:31:20,960
now depending on your application and

811
00:31:20,960 --> 00:31:22,320
depending on the use case video

812
00:31:22,320 --> 00:31:23,840
conferencing being

813
00:31:23,840 --> 00:31:27,279
very different from um streaming one-way

814
00:31:27,279 --> 00:31:28,399
streaming

815
00:31:28,399 --> 00:31:31,120
for example you might want to use

816
00:31:31,120 --> 00:31:32,080
different system

817
00:31:32,080 --> 00:31:34,320
but in all the case what is clear is you

818
00:31:34,320 --> 00:31:36,240
need a key management system that is

819
00:31:36,240 --> 00:31:38,480
separated from the end

820
00:31:38,480 --> 00:31:41,679
points on one hand and from the sfu

821
00:31:41,679 --> 00:31:43,360
on the other hand you need to have the

822
00:31:43,360 --> 00:31:45,200
three of them separated

823
00:31:45,200 --> 00:31:48,399
so there is a proposal by richard by

824
00:31:48,399 --> 00:31:49,200
cisco

825
00:31:49,200 --> 00:31:52,480
to do the key exchange using mls

826
00:31:52,480 --> 00:31:54,240
there is corresponding implementation in

827
00:31:54,240 --> 00:31:56,399
safari with extra

828
00:31:56,399 --> 00:31:58,480
additional security things because of

829
00:31:58,480 --> 00:32:00,640
the web modes earth

830
00:32:00,640 --> 00:32:03,200
threat model and there is another

831
00:32:03,200 --> 00:32:06,000
implementation using olm by gt

832
00:32:06,000 --> 00:32:07,840
i think saul is in the call today maybe

833
00:32:07,840 --> 00:32:10,000
he will tell us a little bit about that

834
00:32:10,000 --> 00:32:12,240
and i'm pretty sure that webex is doing

835
00:32:12,240 --> 00:32:14,000
things pretty differently but they all

836
00:32:14,000 --> 00:32:16,000
fit that diagram where you need to have

837
00:32:16,000 --> 00:32:17,519
a secure way

838
00:32:17,519 --> 00:32:19,120
to exchange the key and the key

839
00:32:19,120 --> 00:32:21,919
management need to be external

840
00:32:21,919 --> 00:32:24,480
next slide

841
00:32:26,799 --> 00:32:29,039
now if we go specifically into

842
00:32:29,039 --> 00:32:30,640
insertable stream and by the way the

843
00:32:30,640 --> 00:32:32,559
name has just changed so um can tell us

844
00:32:32,559 --> 00:32:34,080
what the new name is i'm not sure what

845
00:32:34,080 --> 00:32:35,679
it is anymore but

846
00:32:35,679 --> 00:32:39,120
the idea is now um in in in a web

847
00:32:39,120 --> 00:32:40,720
application in a native application you

848
00:32:40,720 --> 00:32:42,000
control everything but in a web

849
00:32:42,000 --> 00:32:43,679
application the trust model is different

850
00:32:43,679 --> 00:32:46,320
you do not trust the javascript

851
00:32:46,320 --> 00:32:47,840
with the traditional webrtc

852
00:32:47,840 --> 00:32:49,760
implementation yeah

853
00:32:49,760 --> 00:32:51,120
with the traditional webrtc

854
00:32:51,120 --> 00:32:53,120
implementation the key is generated by

855
00:32:53,120 --> 00:32:54,240
the user agent

856
00:32:54,240 --> 00:32:57,440
it's never it's never passed on

857
00:32:57,440 --> 00:33:00,799
by the javascript and so we're good now

858
00:33:00,799 --> 00:33:03,840
uh we need to find a way to

859
00:33:03,840 --> 00:33:06,960
apply that as frame transform

860
00:33:06,960 --> 00:33:10,720
and to get the key um

861
00:33:10,720 --> 00:33:14,159
directly in a user agent right so here

862
00:33:14,159 --> 00:33:16,960
you we're gonna create a an api called

863
00:33:16,960 --> 00:33:19,120
insertable stream api until this week

864
00:33:19,120 --> 00:33:22,399
that will allow us to inject

865
00:33:22,399 --> 00:33:25,679
encrypted content to the rtp

866
00:33:25,679 --> 00:33:27,760
but we haven't solved the problem of the

867
00:33:27,760 --> 00:33:28,880
the encryption and

868
00:33:28,880 --> 00:33:31,919
and the exchange of the key uh outside

869
00:33:31,919 --> 00:33:32,960
of the javascript

870
00:33:32,960 --> 00:33:36,240
so this is where the safari proposal

871
00:33:36,240 --> 00:33:39,679
for an implementation in native worker

872
00:33:39,679 --> 00:33:42,240
that is not accessible by javascript

873
00:33:42,240 --> 00:33:43,279
makes sense

874
00:33:43,279 --> 00:33:45,600
so next slide which is the last one if

875
00:33:45,600 --> 00:33:47,360
you put everything together and you put

876
00:33:47,360 --> 00:33:49,200
it in police 6

877
00:33:49,200 --> 00:33:52,080
which is absolutely unreadable this is

878
00:33:52,080 --> 00:33:53,279
what you get

879
00:33:53,279 --> 00:33:55,760
so the little difference is the dotted

880
00:33:55,760 --> 00:33:56,399
uh

881
00:33:56,399 --> 00:34:00,159
white block is the insertable stream api

882
00:34:00,159 --> 00:34:01,919
where you're gonna plug in the sram

883
00:34:01,919 --> 00:34:03,760
transform which is protected

884
00:34:03,760 --> 00:34:05,919
in the c plus plus part of the of the

885
00:34:05,919 --> 00:34:07,679
browser in the user agent

886
00:34:07,679 --> 00:34:09,440
and then the external so now i'm going

887
00:34:09,440 --> 00:34:11,440
to let sergio and uen explain a little

888
00:34:11,440 --> 00:34:13,199
bit more on the

889
00:34:13,199 --> 00:34:16,079
rtp packetizer problem and i'm going to

890
00:34:16,079 --> 00:34:16,879
let

891
00:34:16,879 --> 00:34:19,918
richard speak about the mls 4 key

892
00:34:19,918 --> 00:34:21,280
exchange

893
00:34:21,280 --> 00:34:24,719
we can skip that for now so this is

894
00:34:24,719 --> 00:34:27,918
that was a slide to answer magnus and

895
00:34:27,918 --> 00:34:28,800
colin

896
00:34:28,800 --> 00:34:31,440
question about does it disrupt any of

897
00:34:31,440 --> 00:34:33,359
the rtp or anything so we went through

898
00:34:33,359 --> 00:34:34,000
every single

899
00:34:34,000 --> 00:34:36,320
rfc one by one and we implemented them

900
00:34:36,320 --> 00:34:37,918
and it doesn't look like it but we might

901
00:34:37,918 --> 00:34:40,239
have missed a few

902
00:34:40,239 --> 00:34:43,280
okay thank you uh are there any

903
00:34:43,280 --> 00:34:44,480
questions based on

904
00:34:44,480 --> 00:34:46,960
on this or is this just reiterating

905
00:34:46,960 --> 00:34:50,240
people's understanding already

906
00:34:55,119 --> 00:35:00,160
great sergio grab grab a mic

907
00:35:05,119 --> 00:35:06,880
these are the slides that are going to

908
00:35:06,880 --> 00:35:09,119
be presented tomorrow on the

909
00:35:09,119 --> 00:35:12,400
on the apt core so but not sure how it

910
00:35:12,400 --> 00:35:13,359
will go if

911
00:35:13,359 --> 00:35:14,800
we will have the same discussion today

912
00:35:14,800 --> 00:35:16,800
and tomorrow or we will

913
00:35:16,800 --> 00:35:19,200
i hope that we are focused on different

914
00:35:19,200 --> 00:35:20,400
angles but

915
00:35:20,400 --> 00:35:24,160
so i will yeah maybe maybe

916
00:35:24,160 --> 00:35:26,000
maybe given that you have half an hour

917
00:35:26,000 --> 00:35:27,200
tomorrow i think it is

918
00:35:27,200 --> 00:35:30,400
um then you can go through and maybe you

919
00:35:30,400 --> 00:35:30,720
can

920
00:35:30,720 --> 00:35:32,480
talk about the the high level concepts

921
00:35:32,480 --> 00:35:34,720
and we can we can try to focus in on

922
00:35:34,720 --> 00:35:36,320
on those questions that we were talking

923
00:35:36,320 --> 00:35:37,839
about earlier with with tim's

924
00:35:37,839 --> 00:35:39,839
presentation

925
00:35:39,839 --> 00:35:45,839
okay so this is light

926
00:35:48,640 --> 00:35:52,400
so the first is um is

927
00:35:52,400 --> 00:35:53,680
like the continuation of the

928
00:35:53,680 --> 00:35:56,000
presentation that alice has done

929
00:35:56,000 --> 00:36:00,079
is that um really with the with s-frame

930
00:36:00,079 --> 00:36:02,400
what we are doing is inserting a new

931
00:36:02,400 --> 00:36:03,520
element in the

932
00:36:03,520 --> 00:36:07,280
rtp and in the media changes

933
00:36:07,280 --> 00:36:11,359
define it in the rtc7656 the

934
00:36:11,359 --> 00:36:15,359
the rtp how it was called the

935
00:36:15,359 --> 00:36:18,720
taxonomy rtp so what it introduces is a

936
00:36:18,720 --> 00:36:19,200
new

937
00:36:19,200 --> 00:36:21,920
is a new element that does the

938
00:36:21,920 --> 00:36:23,920
transformation that transforms then the

939
00:36:23,920 --> 00:36:25,680
encoder stream that comes from the

940
00:36:25,680 --> 00:36:28,079
front encoder before it gets to the

941
00:36:28,079 --> 00:36:30,240
packetizer

942
00:36:30,240 --> 00:36:33,520
so typically the the the packetizer

943
00:36:33,520 --> 00:36:34,960
expect the stream to

944
00:36:34,960 --> 00:36:36,880
come from the directly from the media

945
00:36:36,880 --> 00:36:38,000
encoder so

946
00:36:38,000 --> 00:36:41,359
it can do um

947
00:36:41,359 --> 00:36:44,480
so it it passes the the media stream and

948
00:36:44,480 --> 00:36:45,040
it's

949
00:36:45,040 --> 00:36:48,480
on its frame and for a specific codec

950
00:36:48,480 --> 00:36:50,560
boundaries and information and it then

951
00:36:50,560 --> 00:36:53,280
transform it into several rtp packets

952
00:36:53,280 --> 00:36:56,320
uh with the if we apply

953
00:36:56,320 --> 00:36:58,640
s frame or any other transformation that

954
00:36:58,640 --> 00:36:59,599
changes the

955
00:36:59,599 --> 00:37:02,320
the content of the or the or includes

956
00:37:02,320 --> 00:37:03,920
for example in this case the content of

957
00:37:03,920 --> 00:37:04,160
the

958
00:37:04,160 --> 00:37:06,000
or the media frame then the current

959
00:37:06,000 --> 00:37:08,000
packet is cannot work

960
00:37:08,000 --> 00:37:11,040
um with the with the byte stream anymore

961
00:37:11,040 --> 00:37:16,000
and what you need to do is say

962
00:37:16,000 --> 00:37:18,960
several hacks based on each codec to

963
00:37:18,960 --> 00:37:20,560
make it work with this frame as i

964
00:37:20,560 --> 00:37:22,079
presented in the

965
00:37:22,079 --> 00:37:24,560
in the last iatf in the last stream

966
00:37:24,560 --> 00:37:25,200
meeting

967
00:37:25,200 --> 00:37:28,160
yes tim is on the queue

968
00:37:31,599 --> 00:37:34,640
yes so um can you

969
00:37:34,640 --> 00:37:38,160
just back up and tell us why

970
00:37:38,160 --> 00:37:40,800
you have to do the packetization after

971
00:37:40,800 --> 00:37:42,320
you've done the transform why can't you

972
00:37:42,320 --> 00:37:42,880
do

973
00:37:42,880 --> 00:37:44,160
that the other way around i'm sure there

974
00:37:44,160 --> 00:37:45,280
are good reasons but i think they're

975
00:37:45,280 --> 00:37:47,040
worth stating

976
00:37:47,040 --> 00:37:50,240
hey this is

977
00:37:50,240 --> 00:37:52,560
something that uh i mean this is how

978
00:37:52,560 --> 00:37:53,760
this frame works i mean

979
00:37:53,760 --> 00:37:58,800
we can i should not be the one and

980
00:37:58,800 --> 00:38:01,839
media transporter yeah i mean

981
00:38:01,839 --> 00:38:04,800
there's there are several i mean it is

982
00:38:04,800 --> 00:38:06,160
this is how this frame works

983
00:38:06,160 --> 00:38:08,400
now i can explain why a frame works like

984
00:38:08,400 --> 00:38:09,520
that is

985
00:38:09,520 --> 00:38:13,520
because it is a has less overhead when

986
00:38:13,520 --> 00:38:15,440
when sending it on over the wire because

987
00:38:15,440 --> 00:38:16,640
the the

988
00:38:16,640 --> 00:38:20,079
metal the the encryption that associated

989
00:38:20,079 --> 00:38:20,880
the frame is sent

990
00:38:20,880 --> 00:38:22,800
only one per frame and not one per

991
00:38:22,800 --> 00:38:24,320
packet so the

992
00:38:24,320 --> 00:38:28,079
overhead is is lower and also because um

993
00:38:28,079 --> 00:38:30,720
as alice has has said in this way s

994
00:38:30,720 --> 00:38:32,720
frame is acknowledged to the

995
00:38:32,720 --> 00:38:34,560
to the to the media transport and can

996
00:38:34,560 --> 00:38:37,040
work with rtp and for example with quick

997
00:38:37,040 --> 00:38:39,200
and this was one of the reason that this

998
00:38:39,200 --> 00:38:40,640
frame is working on a

999
00:38:40,640 --> 00:38:44,560
pre-frame basis and not an upper packet

1000
00:38:44,839 --> 00:38:47,839
base

1001
00:38:52,720 --> 00:38:54,880
my question is when you say the current

1002
00:38:54,880 --> 00:38:57,920
media packetizer doesn't support this

1003
00:38:57,920 --> 00:39:00,800
is it really because of the packetizer

1004
00:39:00,800 --> 00:39:03,280
or is it because of the sfu that we have

1005
00:39:03,280 --> 00:39:04,960
these hacks

1006
00:39:04,960 --> 00:39:08,000
i think it's more a few right

1007
00:39:08,000 --> 00:39:11,520
it's it's really is both i mean

1008
00:39:11,520 --> 00:39:15,040
is for example you cannot i mean

1009
00:39:15,040 --> 00:39:18,160
to make it work uh

1010
00:39:18,160 --> 00:39:21,599
bp8 and vp9 are were cases because there

1011
00:39:21,599 --> 00:39:22,240
is not

1012
00:39:22,240 --> 00:39:24,880
much mangling of bytes when you do the

1013
00:39:24,880 --> 00:39:25,839
bucketizing

1014
00:39:25,839 --> 00:39:28,880
but for example is four and you cannot

1015
00:39:28,880 --> 00:39:30,720
apply directly to the

1016
00:39:30,720 --> 00:39:33,839
to the end to the

1017
00:39:34,000 --> 00:39:35,760
to the frame because you have to pass

1018
00:39:35,760 --> 00:39:37,760
the the

1019
00:39:37,760 --> 00:39:40,720
the null unit so you have to do a lot of

1020
00:39:40,720 --> 00:39:42,560
specific things in the

1021
00:39:42,560 --> 00:39:44,560
in the media frame in order to to create

1022
00:39:44,560 --> 00:39:46,560
the packet so it is a bit of both

1023
00:39:46,560 --> 00:39:49,920
i mean both the things that are needed

1024
00:39:49,920 --> 00:39:51,440
in the in the svu

1025
00:39:51,440 --> 00:39:53,359
and also things that happen on the on

1026
00:39:53,359 --> 00:39:55,680
the packetizer itself

1027
00:39:55,680 --> 00:39:58,560
yeah also um you know i think it's a

1028
00:39:58,560 --> 00:40:00,720
it's assumed here that the transformer

1029
00:40:00,720 --> 00:40:02,000
doesn't really communicate with the

1030
00:40:02,000 --> 00:40:04,800
packetizer in any formal way

1031
00:40:04,800 --> 00:40:06,400
i'm just questioning whether that's a

1032
00:40:06,400 --> 00:40:07,839
hard requirement i mean that's how

1033
00:40:07,839 --> 00:40:09,359
insertable streams works

1034
00:40:09,359 --> 00:40:11,359
but it also creates a number of problems

1035
00:40:11,359 --> 00:40:13,040
in that if you increase the data size

1036
00:40:13,040 --> 00:40:14,240
for some reason

1037
00:40:14,240 --> 00:40:15,680
now the packetizer doesn't know what's

1038
00:40:15,680 --> 00:40:18,000
going on so um

1039
00:40:18,000 --> 00:40:21,440
anyway i i would just question whether

1040
00:40:21,440 --> 00:40:23,440
i think this is a slide about the actual

1041
00:40:23,440 --> 00:40:25,040
architecture that shipping

1042
00:40:25,040 --> 00:40:27,040
rather than the architecture necessarily

1043
00:40:27,040 --> 00:40:28,240
that we need

1044
00:40:28,240 --> 00:40:31,439
so that's just a question

1045
00:40:31,890 --> 00:40:33,119
[Music]

1046
00:40:33,119 --> 00:40:34,960
yeah i mean this is how it is

1047
00:40:34,960 --> 00:40:37,200
implemented today and how

1048
00:40:37,200 --> 00:40:40,560
is i mean we could have its other ways

1049
00:40:40,560 --> 00:40:40,880
but

1050
00:40:40,880 --> 00:40:44,560
the one that we have today is this one

1051
00:40:49,760 --> 00:40:52,960
yeah magnus so yes so i

1052
00:40:52,960 --> 00:40:55,359
i think this picture is oversimplified

1053
00:40:55,359 --> 00:40:56,240
and and that's

1054
00:40:56,240 --> 00:40:58,960
and what we really have in this case is

1055
00:40:58,960 --> 00:41:00,960
that you have a packetization step in

1056
00:41:00,960 --> 00:41:01,920
some sense

1057
00:41:01,920 --> 00:41:04,720
prior to the media transform and then

1058
00:41:04,720 --> 00:41:07,680
you have a second packetizer afterwards

1059
00:41:07,680 --> 00:41:11,040
because you need to

1060
00:41:11,040 --> 00:41:13,680
say the media encoding is outputting

1061
00:41:13,680 --> 00:41:14,640
some data

1062
00:41:14,640 --> 00:41:16,480
but in reality if you're talking about

1063
00:41:16,480 --> 00:41:18,720
scalable code video codes for example

1064
00:41:18,720 --> 00:41:20,400
you're not putting out one encoder

1065
00:41:20,400 --> 00:41:21,920
stream you're outputting multiple

1066
00:41:21,920 --> 00:41:24,160
encoded streams and you need to

1067
00:41:24,160 --> 00:41:25,280
packetize those

1068
00:41:25,280 --> 00:41:28,079
individually and with the right amount

1069
00:41:28,079 --> 00:41:30,079
of metadata even internally to be able

1070
00:41:30,079 --> 00:41:32,160
to figure out where it belongs to

1071
00:41:32,160 --> 00:41:35,599
and and and then you

1072
00:41:35,599 --> 00:41:38,400
transform it into decrypt protected form

1073
00:41:38,400 --> 00:41:40,240
and then you packetize it again for the

1074
00:41:40,240 --> 00:41:41,280
transport

1075
00:41:41,280 --> 00:41:44,000
yes to fit r2p in that sense so i think

1076
00:41:44,000 --> 00:41:45,599
we have to be very

1077
00:41:45,599 --> 00:41:47,119
aware that we're actually having several

1078
00:41:47,119 --> 00:41:49,200
steps here and and

1079
00:41:49,200 --> 00:41:52,160
what you packetize before you encode is

1080
00:41:52,160 --> 00:41:52,480
is

1081
00:41:52,480 --> 00:41:54,480
is an important question but okay in

1082
00:41:54,480 --> 00:41:56,560
this case it often happens and it ends

1083
00:41:56,560 --> 00:41:58,160
up in the

1084
00:41:58,160 --> 00:42:00,000
especially in webrtc it's gonna end up

1085
00:42:00,000 --> 00:42:01,599
in the uh

1086
00:42:01,599 --> 00:42:03,280
in the implementation in maybe in

1087
00:42:03,280 --> 00:42:05,599
javascript domain

1088
00:42:05,599 --> 00:42:09,920
but but it's highly relevant so

1089
00:42:10,720 --> 00:42:12,480
but do you say that this picture is not

1090
00:42:12,480 --> 00:42:14,640
correct or should be

1091
00:42:14,640 --> 00:42:17,839
more defined

1092
00:42:18,800 --> 00:42:21,520
i think it would be good to try to take

1093
00:42:21,520 --> 00:42:22,400
some case

1094
00:42:22,400 --> 00:42:25,599
of actually providing more and more take

1095
00:42:25,599 --> 00:42:26,720
a scalable video code

1096
00:42:26,720 --> 00:42:28,400
and look about how you're actually going

1097
00:42:28,400 --> 00:42:29,680
to do this and what it looks like

1098
00:42:29,680 --> 00:42:30,000
because

1099
00:42:30,000 --> 00:42:31,839
then you end up with this when it

1100
00:42:31,839 --> 00:42:33,119
becomes a fork

1101
00:42:33,119 --> 00:42:35,599
at that in the immediate after the media

1102
00:42:35,599 --> 00:42:36,800
encoder step

1103
00:42:36,800 --> 00:42:40,400
because the median code yeah sbc and and

1104
00:42:40,400 --> 00:42:44,319
simult gas is specifically um work it

1105
00:42:44,319 --> 00:42:44,560
out

1106
00:42:44,560 --> 00:42:46,079
in the draft and i think that i have a

1107
00:42:46,079 --> 00:42:47,760
slide later on

1108
00:42:47,760 --> 00:42:50,560
okay good

1109
00:42:54,880 --> 00:42:58,480
colleen yeah i mean

1110
00:42:58,480 --> 00:43:00,720
so this this is certainly one possible

1111
00:43:00,720 --> 00:43:03,200
way one could implement it

1112
00:43:03,200 --> 00:43:06,720
um one of the the decisions we we made

1113
00:43:06,720 --> 00:43:09,599
fairly early in the design of rtp

1114
00:43:09,599 --> 00:43:12,400
uh and that we have reflected in in all

1115
00:43:12,400 --> 00:43:12,960
of the

1116
00:43:12,960 --> 00:43:14,880
payload formats that have been defined

1117
00:43:14,880 --> 00:43:16,720
is specifically not

1118
00:43:16,720 --> 00:43:19,040
to build things or not to try to build

1119
00:43:19,040 --> 00:43:20,160
things in a code

1120
00:43:20,160 --> 00:43:23,760
agnostic way uh and to specifically not

1121
00:43:23,760 --> 00:43:26,880
build um to try to do the packetization

1122
00:43:26,880 --> 00:43:29,280
in a codec agnostic way because

1123
00:43:29,280 --> 00:43:32,400
the information um you you need the

1124
00:43:32,400 --> 00:43:34,400
information that's codec specific to to

1125
00:43:34,400 --> 00:43:35,839
do this effectively and to make

1126
00:43:35,839 --> 00:43:37,920
something that's robust

1127
00:43:37,920 --> 00:43:40,800
uh and i'm wondering if there are uh are

1128
00:43:40,800 --> 00:43:42,319
ways which would fit the

1129
00:43:42,319 --> 00:43:45,839
rtp model better which

1130
00:43:45,839 --> 00:43:48,400
did this in a way which you know did the

1131
00:43:48,400 --> 00:43:49,920
encryption of the contents in a way

1132
00:43:49,920 --> 00:43:50,880
which reflected

1133
00:43:50,880 --> 00:43:53,920
um knowledge of the particular payload

1134
00:43:53,920 --> 00:43:55,760
formats and that would then simplify the

1135
00:43:55,760 --> 00:43:58,640
rest of the design

1136
00:43:58,640 --> 00:44:01,680
but by encrypting in a payload in a

1137
00:44:01,680 --> 00:44:03,680
codec aware way rather than trying to do

1138
00:44:03,680 --> 00:44:09,839
this in a codecognostic way

1139
00:44:19,040 --> 00:44:22,640
because you will have to to

1140
00:44:22,640 --> 00:44:25,839
specify how to encrypt each of the video

1141
00:44:25,839 --> 00:44:26,960
and audio codecs

1142
00:44:26,960 --> 00:44:30,560
so we will be we'll have to to do

1143
00:44:30,560 --> 00:44:33,200
a lot of work to just specify how do we

1144
00:44:33,200 --> 00:44:34,400
need to implement to

1145
00:44:34,400 --> 00:44:37,680
do a frame encryption in um let's use

1146
00:44:37,680 --> 00:44:38,319
four it's just

1147
00:44:38,319 --> 00:44:41,359
five h2c6 bp8 pp9

1148
00:44:41,359 --> 00:44:44,560
maybe one maybe three i mean

1149
00:44:44,560 --> 00:44:47,920
yes so this is this is this is true but

1150
00:44:47,920 --> 00:44:49,760
i think you're going to do that work

1151
00:44:49,760 --> 00:44:50,400
anyway

1152
00:44:50,400 --> 00:44:52,800
and you're just going to do it piecemeal

1153
00:44:52,800 --> 00:44:54,640
over a long period of time as you

1154
00:44:54,640 --> 00:44:57,359
realize the robustness problems

1155
00:44:57,359 --> 00:44:59,599
and i think if you do if if you if you

1156
00:44:59,599 --> 00:45:01,599
assume that's the model up front you are

1157
00:45:01,599 --> 00:45:03,440
at least aware of the the complexity

1158
00:45:03,440 --> 00:45:04,800
that's needed to make this work

1159
00:45:04,800 --> 00:45:06,319
effectively

1160
00:45:06,319 --> 00:45:07,920
the the the only thing about the

1161
00:45:07,920 --> 00:45:09,599
robustness is that

1162
00:45:09,599 --> 00:45:12,319
at least in webrtc implementation we are

1163
00:45:12,319 --> 00:45:13,839
not using that

1164
00:45:13,839 --> 00:45:17,200
so much so i mean while well rtp

1165
00:45:17,200 --> 00:45:20,240
is is implemented or has defined it in

1166
00:45:20,240 --> 00:45:22,720
into a very in details for example let's

1167
00:45:22,720 --> 00:45:23,280
use for

1168
00:45:23,280 --> 00:45:27,040
slices and i have not seen

1169
00:45:27,040 --> 00:45:28,720
any implementation that it is really

1170
00:45:28,720 --> 00:45:30,160
using it a part of

1171
00:45:30,160 --> 00:45:33,280
in a very codec a specific way

1172
00:45:33,280 --> 00:45:36,560
yes without rtp knacks fake

1173
00:45:36,560 --> 00:45:38,480
and things like that but i don't have

1174
00:45:38,480 --> 00:45:39,680
not seen

1175
00:45:39,680 --> 00:45:44,640
much traction of a percodec

1176
00:45:45,200 --> 00:45:49,040
robustness thing so this is

1177
00:45:49,040 --> 00:45:51,119
but i'm seeing a bunch of people in the

1178
00:45:51,119 --> 00:45:53,040
chat uh and the comments magnus was

1179
00:45:53,040 --> 00:45:53,599
putting

1180
00:45:53,599 --> 00:45:55,280
putting in was saying that this is

1181
00:45:55,280 --> 00:45:56,720
needed to make the the selective

1182
00:45:56,720 --> 00:45:58,160
forwarding work

1183
00:45:58,160 --> 00:45:59,920
so i'm not sure this is necessarily

1184
00:45:59,920 --> 00:46:01,359
accurate

1185
00:46:01,359 --> 00:46:04,079
um well i have to remember just because

1186
00:46:04,079 --> 00:46:06,000
some implementations of poor quality

1187
00:46:06,000 --> 00:46:07,359
i think doesn't necessarily mean that

1188
00:46:07,359 --> 00:46:10,400
they all need to be

1189
00:46:10,560 --> 00:46:14,319
i would love to hear more about how

1190
00:46:14,319 --> 00:46:18,240
that it is say use and how

1191
00:46:18,240 --> 00:46:20,400
how it is done or where it is done

1192
00:46:20,400 --> 00:46:21,280
because i

1193
00:46:21,280 --> 00:46:23,440
at least in the series that i know it is

1194
00:46:23,440 --> 00:46:25,040
not also done

1195
00:46:25,040 --> 00:46:27,680
so if magnus can provide more details

1196
00:46:27,680 --> 00:46:28,480
about

1197
00:46:28,480 --> 00:46:31,599
how this game codec specific robustness

1198
00:46:31,599 --> 00:46:33,359
is using cnsp use and something like

1199
00:46:33,359 --> 00:46:33,680
that

1200
00:46:33,680 --> 00:46:37,279
i would really like to see it

1201
00:46:37,599 --> 00:46:40,560
i mean because right now in all the s

1202
00:46:40,560 --> 00:46:42,160
videos that i know it

1203
00:46:42,160 --> 00:46:45,440
is not the case so if

1204
00:46:45,440 --> 00:46:47,440
sorry for talking and i i trying to

1205
00:46:47,440 --> 00:46:48,800
understand i think

1206
00:46:48,800 --> 00:46:50,480
we're misunderstanding each other maybe

1207
00:46:50,480 --> 00:46:51,920
here so i understand what

1208
00:46:51,920 --> 00:46:57,839
are you trying to say that i have said

1209
00:46:58,880 --> 00:47:01,119
i didn't really understand because when

1210
00:47:01,119 --> 00:47:02,240
i'm talking about

1211
00:47:02,240 --> 00:47:05,280
detecting losses i've talked about that

1212
00:47:05,280 --> 00:47:06,000
on on in

1213
00:47:06,000 --> 00:47:08,400
classic rtp which is on ssrc level you

1214
00:47:08,400 --> 00:47:09,280
can see a gap

1215
00:47:09,280 --> 00:47:12,319
for a particular ssrc in the sequence

1216
00:47:12,319 --> 00:47:13,680
number space

1217
00:47:13,680 --> 00:47:15,119
and then you know that you're missing

1218
00:47:15,119 --> 00:47:16,720
something and if you mapped

1219
00:47:16,720 --> 00:47:20,720
one ssrc to one stream or

1220
00:47:20,720 --> 00:47:23,040
layer in certain case you would know

1221
00:47:23,040 --> 00:47:25,200
that oh i'm missing this

1222
00:47:25,200 --> 00:47:27,200
i know that people have many cases

1223
00:47:27,200 --> 00:47:29,920
implemented with scalable codecs

1224
00:47:29,920 --> 00:47:31,599
they do maintain part of the structure

1225
00:47:31,599 --> 00:47:33,119
saying okay at least in the

1226
00:47:33,119 --> 00:47:35,200
higher levels and in some cases you

1227
00:47:35,200 --> 00:47:36,640
smashed everything together and say okay

1228
00:47:36,640 --> 00:47:38,480
i'm going to repair and it's select

1229
00:47:38,480 --> 00:47:40,240
and assume that the sfu done the right

1230
00:47:40,240 --> 00:47:41,520
thing but

1231
00:47:41,520 --> 00:47:44,000
with s frames you're not having that

1232
00:47:44,000 --> 00:47:45,839
insight into this

1233
00:47:45,839 --> 00:47:49,119
as easily you probably want to have more

1234
00:47:49,119 --> 00:47:51,920
ssrcs so you can see that you lose a

1235
00:47:51,920 --> 00:47:53,440
particular layer

1236
00:47:53,440 --> 00:47:55,680
that you're forwarding so you can try to

1237
00:47:55,680 --> 00:47:57,040
decide if you're going to repair this

1238
00:47:57,040 --> 00:47:58,720
and know that this is a particular layer

1239
00:47:58,720 --> 00:47:59,760
for a particular

1240
00:47:59,760 --> 00:48:03,200
source that's what i'm meaning

1241
00:48:03,200 --> 00:48:05,200
yeah and i agree with that and this

1242
00:48:05,200 --> 00:48:06,480
should be covered with the

1243
00:48:06,480 --> 00:48:08,400
with this packet decision format i mean

1244
00:48:08,400 --> 00:48:12,000
i hope that we are able to cover

1245
00:48:18,839 --> 00:48:21,839
calendar

1246
00:48:23,359 --> 00:48:25,359
uh let's just try to reiterate the point

1247
00:48:25,359 --> 00:48:27,040
here of of that i i think what i heard

1248
00:48:27,040 --> 00:48:27,839
from

1249
00:48:27,839 --> 00:48:30,079
and magnus is and i i totally agree with

1250
00:48:30,079 --> 00:48:31,119
i think we just need to think about this

1251
00:48:31,119 --> 00:48:31,520
way of

1252
00:48:31,520 --> 00:48:34,240
that in your picture like if you zoom in

1253
00:48:34,240 --> 00:48:35,280
on all of that

1254
00:48:35,280 --> 00:48:37,119
where the encoded stream goes into the

1255
00:48:37,119 --> 00:48:38,720
media transformer it's not really a

1256
00:48:38,720 --> 00:48:39,920
stream it's already been basically

1257
00:48:39,920 --> 00:48:41,359
packetized at that point

1258
00:48:41,359 --> 00:48:43,440
and there's that encoded stream actually

1259
00:48:43,440 --> 00:48:45,760
is packetized in some form before it

1260
00:48:45,760 --> 00:48:47,119
even comes in

1261
00:48:47,119 --> 00:48:49,520
and that packetization is inevitably

1262
00:48:49,520 --> 00:48:51,440
codec specific at some level

1263
00:48:51,440 --> 00:48:52,960
i mean you know you have to implement

1264
00:48:52,960 --> 00:48:54,480
different code for for

1265
00:48:54,480 --> 00:48:56,240
different things there i mean i get

1266
00:48:56,240 --> 00:48:57,520
audio separate i'm talking about

1267
00:48:57,520 --> 00:48:59,599
scalable video type things

1268
00:48:59,599 --> 00:49:03,280
um so i think if we just sort of

1269
00:49:03,280 --> 00:49:04,800
reflect on that's already sort of

1270
00:49:04,800 --> 00:49:06,319
happening it sort of maybe re-changes

1271
00:49:06,319 --> 00:49:06,720
how you

1272
00:49:06,720 --> 00:49:09,040
frame and think about this conversation

1273
00:49:09,040 --> 00:49:10,800
well

1274
00:49:10,800 --> 00:49:13,359
yes or no i mean i agree with that what

1275
00:49:13,359 --> 00:49:14,000
it happens

1276
00:49:14,000 --> 00:49:15,920
comes up with the from the media encoder

1277
00:49:15,920 --> 00:49:18,480
is spaghetti but in a frame

1278
00:49:18,480 --> 00:49:21,599
way so it's uh an array of bites

1279
00:49:21,599 --> 00:49:23,839
i don't really need to to know exactly

1280
00:49:23,839 --> 00:49:24,960
what's going

1281
00:49:24,960 --> 00:49:27,920
inside these bites

1282
00:49:28,640 --> 00:49:29,839
well you need to know a little bit more

1283
00:49:29,839 --> 00:49:32,000
than it's a chunk of bytes i need to

1284
00:49:32,000 --> 00:49:32,559
know them

1285
00:49:32,559 --> 00:49:34,480
i need to know some metadata but i don't

1286
00:49:34,480 --> 00:49:36,319
need to know the actual format so

1287
00:49:36,319 --> 00:49:39,280
yes i need to know some this metadata so

1288
00:49:39,280 --> 00:49:42,240
if it is an iframe if it is in

1289
00:49:42,240 --> 00:49:43,839
some other stuff that is later on in the

1290
00:49:43,839 --> 00:49:45,280
presentation

1291
00:49:45,280 --> 00:49:48,240
and but i don't need to know the actual

1292
00:49:48,240 --> 00:49:51,280
format or the syntax or the bytes

1293
00:49:51,280 --> 00:49:53,839
but i need i for sure need to get

1294
00:49:53,839 --> 00:49:55,200
something back

1295
00:49:55,200 --> 00:49:57,920
i need to to get some some some

1296
00:49:57,920 --> 00:49:59,520
information some metadata that we are

1297
00:49:59,520 --> 00:50:00,640
going to

1298
00:50:00,640 --> 00:50:02,559
that it is also the one that it is that

1299
00:50:02,559 --> 00:50:04,720
this we use it needs to to perform the

1300
00:50:04,720 --> 00:50:07,440
last selector

1301
00:50:07,440 --> 00:50:09,119
so i think really focusing on what the

1302
00:50:09,119 --> 00:50:11,119
gap between those what the sfu needs to

1303
00:50:11,119 --> 00:50:12,000
do a good implementation

1304
00:50:12,000 --> 00:50:13,359
what the other things need to do it is

1305
00:50:13,359 --> 00:50:15,040
the right thing to do and i i don't

1306
00:50:15,040 --> 00:50:17,200
think that the arguing this is how we

1307
00:50:17,200 --> 00:50:18,160
already implement it

1308
00:50:18,160 --> 00:50:19,599
is really compelling for people here

1309
00:50:19,599 --> 00:50:21,119
like i think like really trying to get

1310
00:50:21,119 --> 00:50:22,160
to the right design for s

1311
00:50:22,160 --> 00:50:24,720
frame is what we're trying to do here so

1312
00:50:24,720 --> 00:50:26,000
i i mean

1313
00:50:26,000 --> 00:50:28,240
pull apart those of what you know like

1314
00:50:28,240 --> 00:50:29,200
the the

1315
00:50:29,200 --> 00:50:32,160
like the form of argument of the sfus

1316
00:50:32,160 --> 00:50:33,680
that are already implemented do it this

1317
00:50:33,680 --> 00:50:35,200
way therefore we have to implement the

1318
00:50:35,200 --> 00:50:36,559
clients like this like that's not very

1319
00:50:36,559 --> 00:50:38,559
compelling both the sfus and the clients

1320
00:50:38,559 --> 00:50:39,839
need to change to implement s frame

1321
00:50:39,839 --> 00:50:41,520
we're defining what both of them do here

1322
00:50:41,520 --> 00:50:43,599
so let's let's get the right

1323
00:50:43,599 --> 00:50:46,880
yes sure so unfortunately we're out of

1324
00:50:46,880 --> 00:50:48,000
time

1325
00:50:48,000 --> 00:50:50,960
uh i apologize for those people who just

1326
00:50:50,960 --> 00:50:53,280
screamed and jumped into the queue

1327
00:50:53,280 --> 00:50:55,520
if you have something very quick i'd

1328
00:50:55,520 --> 00:50:56,480
like to give

1329
00:50:56,480 --> 00:50:59,040
time now to to richard and encourage

1330
00:50:59,040 --> 00:51:00,880
everyone to go to the avt corps

1331
00:51:00,880 --> 00:51:09,839
meeting to discuss this further

1332
00:51:10,000 --> 00:51:13,200
mr bonds all right my audible here

1333
00:51:13,200 --> 00:51:14,960
yep all right yeah i have audio but no

1334
00:51:14,960 --> 00:51:17,280
videos sorry um so yeah this is about um

1335
00:51:17,280 --> 00:51:19,280
that's tremendous and thanks alex for

1336
00:51:19,280 --> 00:51:19,680
the

1337
00:51:19,680 --> 00:51:21,680
queue up here next slide please i'm

1338
00:51:21,680 --> 00:51:22,960
going to breeze through this pretty

1339
00:51:22,960 --> 00:51:23,760
quickly

1340
00:51:23,760 --> 00:51:25,200
this should be pretty straightforward

1341
00:51:25,200 --> 00:51:27,839
and non-controversial so like alex said

1342
00:51:27,839 --> 00:51:31,040
s frame needs a way to get keys mls is a

1343
00:51:31,040 --> 00:51:32,240
way to provide keys

1344
00:51:32,240 --> 00:51:34,800
um in srtp we needed a way to get keys

1345
00:51:34,800 --> 00:51:37,680
we use dtls to provide those keys

1346
00:51:37,680 --> 00:51:40,000
but dtls is point to point um and for

1347
00:51:40,000 --> 00:51:41,520
these conferencing cases where s frame

1348
00:51:41,520 --> 00:51:42,559
is really useful

1349
00:51:42,559 --> 00:51:44,240
we need something that does groups that

1350
00:51:44,240 --> 00:51:45,760
does multi-party

1351
00:51:45,760 --> 00:51:48,079
uh key exchange and that's what mls does

1352
00:51:48,079 --> 00:51:50,640
mls core competency is that it does

1353
00:51:50,640 --> 00:51:54,480
group stuff natively unlike dtls

1354
00:51:54,480 --> 00:51:57,680
so the idea here is to take this group

1355
00:51:57,680 --> 00:51:59,520
key exchange primitive and kind of swap

1356
00:51:59,520 --> 00:52:00,920
it in for the role details plays in

1357
00:52:00,920 --> 00:52:02,559
dtlssrtp

1358
00:52:02,559 --> 00:52:03,839
and then take the keys that come out of

1359
00:52:03,839 --> 00:52:07,280
it and use them for s frame um

1360
00:52:07,280 --> 00:52:08,720
yeah the bottom part here is just noting

1361
00:52:08,720 --> 00:52:10,079
that we do have a working group

1362
00:52:10,079 --> 00:52:11,040
deliverable on this

1363
00:52:11,040 --> 00:52:13,200
um so we should probably adopt a

1364
00:52:13,200 --> 00:52:15,119
document to fulfill it and the proposal

1365
00:52:15,119 --> 00:52:16,160
here is going to be that we do it with

1366
00:52:16,160 --> 00:52:17,200
this document

1367
00:52:17,200 --> 00:52:20,319
next slide please so there's really only

1368
00:52:20,319 --> 00:52:22,319
two things in this document

1369
00:52:22,319 --> 00:52:24,400
it tells you how you take the keys that

1370
00:52:24,400 --> 00:52:25,760
mls generates for you

1371
00:52:25,760 --> 00:52:27,280
and you put them in s frame and put them

1372
00:52:27,280 --> 00:52:28,880
to use

1373
00:52:28,880 --> 00:52:30,400
how you signal them etc we'll talk about

1374
00:52:30,400 --> 00:52:32,240
that in a second and then there's

1375
00:52:32,240 --> 00:52:33,839
there's also some negotiation of other

1376
00:52:33,839 --> 00:52:35,760
parameters that you need to use s frame

1377
00:52:35,760 --> 00:52:36,079
um

1378
00:52:36,079 --> 00:52:39,119
how you negotiate those using mls next

1379
00:52:39,119 --> 00:52:41,760
slide please

1380
00:52:42,400 --> 00:52:44,480
so on the keying side if you look at

1381
00:52:44,480 --> 00:52:46,000
kind of what sframe needs what mls

1382
00:52:46,000 --> 00:52:48,720
provides um s frame um there the

1383
00:52:48,720 --> 00:52:50,559
encryption framing has frame requires

1384
00:52:50,559 --> 00:52:53,520
a a mapping where uh the sender and

1385
00:52:53,520 --> 00:52:54,640
receiver can look up

1386
00:52:54,640 --> 00:52:57,680
a uh a key based on a key id

1387
00:52:57,680 --> 00:53:00,960
uh that is sent in the s frame header

1388
00:53:00,960 --> 00:53:03,040
these keys that are used need to be

1389
00:53:03,040 --> 00:53:04,640
unique per sender so that

1390
00:53:04,640 --> 00:53:08,240
you don't have nonce or use problems um

1391
00:53:08,240 --> 00:53:09,440
so you don't have different centers

1392
00:53:09,440 --> 00:53:11,040
setting with the same key and nones pair

1393
00:53:11,040 --> 00:53:11,599
and have

1394
00:53:11,599 --> 00:53:13,760
non-streams that can cause aead

1395
00:53:13,760 --> 00:53:16,400
algorithms to fail

1396
00:53:16,400 --> 00:53:18,880
now on the mls side what mls provides is

1397
00:53:18,880 --> 00:53:20,079
a sequence of group

1398
00:53:20,079 --> 00:53:23,839
keys um mls divides time into epochs

1399
00:53:23,839 --> 00:53:25,440
whenever someone joins or leaves the

1400
00:53:25,440 --> 00:53:27,520
group roughly you get a new key

1401
00:53:27,520 --> 00:53:29,359
so that the old people who left are

1402
00:53:29,359 --> 00:53:31,280
locked out the people who joined are let

1403
00:53:31,280 --> 00:53:33,440
in

1404
00:53:33,599 --> 00:53:35,359
so you end up with a sequence of group

1405
00:53:35,359 --> 00:53:36,960
keys so you kind of need to map the

1406
00:53:36,960 --> 00:53:37,839
sequence of group

1407
00:53:37,839 --> 00:53:41,440
keys into the key id space and you also

1408
00:53:41,440 --> 00:53:42,319
need to

1409
00:53:42,319 --> 00:53:44,079
make them per sender keys and signal

1410
00:53:44,079 --> 00:53:45,839
which sender you're using

1411
00:53:45,839 --> 00:53:48,079
so what the draft defines is like how

1412
00:53:48,079 --> 00:53:49,760
you derive these person your keys and

1413
00:53:49,760 --> 00:53:51,280
how you signal them using the key id

1414
00:53:51,280 --> 00:53:52,160
field

1415
00:53:52,160 --> 00:53:56,079
next slide please

1416
00:53:56,079 --> 00:53:57,920
um to do this we just do kind of the

1417
00:53:57,920 --> 00:53:59,760
obvious thing um

1418
00:53:59,760 --> 00:54:02,559
for deriving for sender keys um we first

1419
00:54:02,559 --> 00:54:03,359
export

1420
00:54:03,359 --> 00:54:06,000
a key from the mls context exactly the

1421
00:54:06,000 --> 00:54:06,720
same as

1422
00:54:06,720 --> 00:54:09,119
dtls's rtp does with tls they use an

1423
00:54:09,119 --> 00:54:11,440
exporter to get a key

1424
00:54:11,440 --> 00:54:14,079
and then the first sender keys are just

1425
00:54:14,079 --> 00:54:14,640
derived

1426
00:54:14,640 --> 00:54:17,760
by hkdfing things

1427
00:54:17,760 --> 00:54:20,960
off of the that master seeker that epoch

1428
00:54:20,960 --> 00:54:23,200
secret

1429
00:54:23,200 --> 00:54:25,839
the index that's input here um is

1430
00:54:25,839 --> 00:54:26,800
something we assume

1431
00:54:26,800 --> 00:54:29,680
is configured um mls um one of the

1432
00:54:29,680 --> 00:54:31,520
things it also provides is an index each

1433
00:54:31,520 --> 00:54:33,680
each participant in the group knows

1434
00:54:33,680 --> 00:54:37,520
what has a unique index of that that

1435
00:54:37,520 --> 00:54:39,920
participant's location in the group so

1436
00:54:39,920 --> 00:54:41,839
we can reuse that index here

1437
00:54:41,839 --> 00:54:43,680
um and so we just encode that index and

1438
00:54:43,680 --> 00:54:45,760
use it as a as an infinite hkdf so that

1439
00:54:45,760 --> 00:54:47,040
we get unique keys

1440
00:54:47,040 --> 00:54:50,400
per sender then to signal the stuff in

1441
00:54:50,400 --> 00:54:51,440
key ids

1442
00:54:51,440 --> 00:54:53,520
we just take the two integers um we

1443
00:54:53,520 --> 00:54:55,119
truncate the epoch to a certain number

1444
00:54:55,119 --> 00:54:56,079
of bits

1445
00:54:56,079 --> 00:54:59,680
um and we shift over the cinder index

1446
00:54:59,680 --> 00:55:01,520
on by that number of bits and put that

1447
00:55:01,520 --> 00:55:03,040
on the left-hand side

1448
00:55:03,040 --> 00:55:05,119
so we're here we're using the uh the

1449
00:55:05,119 --> 00:55:07,440
extensible nature of the key id field

1450
00:55:07,440 --> 00:55:07,839
that

1451
00:55:07,839 --> 00:55:10,559
say a variable length integer up to i

1452
00:55:10,559 --> 00:55:12,720
think 64 bits

1453
00:55:12,720 --> 00:55:15,680
um and taking advantage of that to to

1454
00:55:15,680 --> 00:55:16,880
you know put these numbers

1455
00:55:16,880 --> 00:55:18,799
uh two numbers in there instead of just

1456
00:55:18,799 --> 00:55:20,720
you know one opaque number

1457
00:55:20,720 --> 00:55:23,760
now the idea of this this um e is

1458
00:55:23,760 --> 00:55:25,599
capital e number here is that we

1459
00:55:25,599 --> 00:55:26,880
we're only going to carry a certain

1460
00:55:26,880 --> 00:55:28,880
number of bits of epoch

1461
00:55:28,880 --> 00:55:32,000
um i think um you know something like

1462
00:55:32,000 --> 00:55:34,720
well and that implies the fact that

1463
00:55:34,720 --> 00:55:35,599
you're only using a certain number of

1464
00:55:35,599 --> 00:55:36,799
bits implies that you're going to have

1465
00:55:36,799 --> 00:55:37,920
rollover

1466
00:55:37,920 --> 00:55:41,200
um that's that's okay it's unlike say

1467
00:55:41,200 --> 00:55:42,079
rollover of

1468
00:55:42,079 --> 00:55:45,040
um the sequence number in srtp um what

1469
00:55:45,040 --> 00:55:45,359
this

1470
00:55:45,359 --> 00:55:49,760
epoch um represents is um

1471
00:55:49,760 --> 00:55:51,920
which you know it's it guides your key

1472
00:55:51,920 --> 00:55:53,280
selection so you're not going to have

1473
00:55:53,280 --> 00:55:55,280
um say nones for use like you would have

1474
00:55:55,280 --> 00:55:56,400
with with um

1475
00:55:56,400 --> 00:55:59,119
sequence number ruler and srtp but it

1476
00:55:59,119 --> 00:56:00,640
means you'll have decryption failures if

1477
00:56:00,640 --> 00:56:02,000
you have a rollover and people aren't

1478
00:56:02,000 --> 00:56:02,960
keeping up

1479
00:56:02,960 --> 00:56:05,200
um so basically this you know the width

1480
00:56:05,200 --> 00:56:07,200
that the application chooses for this

1481
00:56:07,200 --> 00:56:11,119
uh epoch field um is going to define how

1482
00:56:11,119 --> 00:56:11,680
how much

1483
00:56:11,680 --> 00:56:13,839
reordering how much how quickly people

1484
00:56:13,839 --> 00:56:16,559
have to keep up with epoch changes

1485
00:56:16,559 --> 00:56:21,119
in order to not have decryption failures

1486
00:56:22,319 --> 00:56:24,559
since epochs only change on joints and

1487
00:56:24,559 --> 00:56:25,440
leaves

1488
00:56:25,440 --> 00:56:27,599
it may not be a huge problem except

1489
00:56:27,599 --> 00:56:30,799
during the high churn times of the group

1490
00:56:30,799 --> 00:56:34,319
so i think we're not going to need a ton

1491
00:56:34,319 --> 00:56:36,720
of bits here

1492
00:56:36,720 --> 00:56:38,640
in practice but i think that's something

1493
00:56:38,640 --> 00:56:39,839
we can lead up to the application and

1494
00:56:39,839 --> 00:56:41,119
manage

1495
00:56:41,119 --> 00:56:44,880
next slide please

1496
00:56:44,880 --> 00:56:47,359
the only other technical content here is

1497
00:56:47,359 --> 00:56:48,640
negotiation of

1498
00:56:48,640 --> 00:56:51,920
the uh the aforementioned things so

1499
00:56:51,920 --> 00:56:53,440
um obviously if you're going to do s

1500
00:56:53,440 --> 00:56:54,960
frame encryption

1501
00:56:54,960 --> 00:56:56,720
you need a cipher suite you're going to

1502
00:56:56,720 --> 00:56:58,799
encrypt with

1503
00:56:58,799 --> 00:57:02,000
the s frame spec defines a collection of

1504
00:57:02,000 --> 00:57:03,760
cipher suites that we just referenced

1505
00:57:03,760 --> 00:57:04,240
here

1506
00:57:04,240 --> 00:57:07,599
they have ids and we it's a typical

1507
00:57:07,599 --> 00:57:09,680
kind of offer selection paradigm is in

1508
00:57:09,680 --> 00:57:10,640
tls

1509
00:57:10,640 --> 00:57:13,839
the difference is that um in mls

1510
00:57:13,839 --> 00:57:16,480
the participants put this offer in a key

1511
00:57:16,480 --> 00:57:17,520
package that describes their

1512
00:57:17,520 --> 00:57:18,640
capabilities

1513
00:57:18,640 --> 00:57:20,720
uh and then when they are welcomed into

1514
00:57:20,720 --> 00:57:22,559
a group they find out what the group is

1515
00:57:22,559 --> 00:57:23,359
using

1516
00:57:23,359 --> 00:57:26,000
uh for for you know the specific choices

1517
00:57:26,000 --> 00:57:27,440
for these parameters

1518
00:57:27,440 --> 00:57:29,040
the only other parameter besides the

1519
00:57:29,040 --> 00:57:31,359
cipher suite is uh the number of epoch

1520
00:57:31,359 --> 00:57:32,160
bits so the

1521
00:57:32,160 --> 00:57:34,400
the epoch underscore bits field here is

1522
00:57:34,400 --> 00:57:35,440
the same as the e

1523
00:57:35,440 --> 00:57:37,680
field the number of bits in the epoch on

1524
00:57:37,680 --> 00:57:38,960
the previous slide so

1525
00:57:38,960 --> 00:57:40,400
everyone needs to agree on that so that

1526
00:57:40,400 --> 00:57:42,319
people can decode the key ids so we just

1527
00:57:42,319 --> 00:57:43,280
signal that

1528
00:57:43,280 --> 00:57:47,119
in this in this welcome extension

1529
00:57:47,599 --> 00:57:50,799
one more slide here i think

1530
00:57:52,799 --> 00:57:56,000
yeah so we have implemented this um key

1531
00:57:56,000 --> 00:57:56,720
management

1532
00:57:56,720 --> 00:58:00,079
part in the s frame uh repo there

1533
00:58:00,079 --> 00:58:02,079
um you know this is the scheme that

1534
00:58:02,079 --> 00:58:03,440
we're uh

1535
00:58:03,440 --> 00:58:05,040
you know working on putting into into

1536
00:58:05,040 --> 00:58:06,640
web access we're doing the the stream

1537
00:58:06,640 --> 00:58:08,880
implementation there

1538
00:58:08,880 --> 00:58:12,000
document-wise i think it's pretty okay

1539
00:58:12,000 --> 00:58:13,440
it's it's obviously functional at least

1540
00:58:13,440 --> 00:58:14,960
to a basic level

1541
00:58:14,960 --> 00:58:17,440
um i think raphael was i don't know if

1542
00:58:17,440 --> 00:58:18,480
he's on the call this morning he was

1543
00:58:18,480 --> 00:58:19,280
thinking about adding some

1544
00:58:19,280 --> 00:58:21,839
recommendations about how you manage the

1545
00:58:21,839 --> 00:58:23,680
mls groups that you use for s-frame for

1546
00:58:23,680 --> 00:58:24,880
example if you have

1547
00:58:24,880 --> 00:58:26,559
like a messaging group that you've got a

1548
00:58:26,559 --> 00:58:28,960
long-lived mls group for

1549
00:58:28,960 --> 00:58:32,000
and you're going to have a temporary mls

1550
00:58:32,000 --> 00:58:34,480
group just for a call associated to that

1551
00:58:34,480 --> 00:58:37,119
messaging group you might uh use some

1552
00:58:37,119 --> 00:58:38,960
psks to connect those two groups and

1553
00:58:38,960 --> 00:58:40,640
prove that the folks in the call were

1554
00:58:40,640 --> 00:58:42,720
also part of the uh the messaging

1555
00:58:42,720 --> 00:58:43,680
session

1556
00:58:43,680 --> 00:58:46,720
um so that's kind of advisory stuff

1557
00:58:46,720 --> 00:58:48,799
for how you manage your kind of an extra

1558
00:58:48,799 --> 00:58:51,359
meta level of mls management

1559
00:58:51,359 --> 00:58:53,200
um but i think mostly like i said at

1560
00:58:53,200 --> 00:58:54,880
this point it's pretty functional and

1561
00:58:54,880 --> 00:58:55,680
mostly

1562
00:58:55,680 --> 00:58:57,359
just it's going to stay abreast of s

1563
00:58:57,359 --> 00:58:58,720
frame as this frame evolves towards

1564
00:58:58,720 --> 00:59:00,880
standardization

1565
00:59:00,880 --> 00:59:03,760
and that's all i have um so yeah i think

1566
00:59:03,760 --> 00:59:05,680
this is in pretty good shape um then i i

1567
00:59:05,680 --> 00:59:07,200
would like to propose the working group

1568
00:59:07,200 --> 00:59:09,040
uh take it on for that uh deliverable i

1569
00:59:09,040 --> 00:59:11,759
mentioned at the top

1570
00:59:12,240 --> 00:59:14,799
thanks richard well in the last minute

1571
00:59:14,799 --> 00:59:15,839
we're not going to be having

1572
00:59:15,839 --> 00:59:19,280
a lot of opportunity to discuss this but

1573
00:59:19,280 --> 00:59:20,480
what i think we might do with this one

1574
00:59:20,480 --> 00:59:22,640
is take that list

1575
00:59:22,640 --> 00:59:24,240
uh and we can have a discussion about

1576
00:59:24,240 --> 00:59:26,319
that it's unfortunate that the

1577
00:59:26,319 --> 00:59:29,040
other work that we have sort of doesn't

1578
00:59:29,040 --> 00:59:29,920
really exist

1579
00:59:29,920 --> 00:59:32,960
and so um in terms of it's not formally

1580
00:59:32,960 --> 00:59:34,640
adopted so

1581
00:59:34,640 --> 00:59:36,720
it's almost like putting the cart before

1582
00:59:36,720 --> 00:59:38,720
the horse in a way but

1583
00:59:38,720 --> 00:59:40,480
we can we can probably have that

1584
00:59:40,480 --> 00:59:43,200
discussion on the list

1585
00:59:43,200 --> 00:59:46,799
because looks good

1586
00:59:46,799 --> 00:59:50,799
and with that i think we are all done

1587
00:59:50,799 --> 00:59:53,520
i noticed my co-chair has arrived

1588
00:59:53,520 --> 00:59:55,359
welcome

1589
00:59:55,359 --> 00:59:58,960
thanks to our minute taker um watson

1590
00:59:58,960 --> 01:00:00,960
who has produced some excellent notes

1591
01:00:00,960 --> 01:00:02,319
here

1592
01:00:02,319 --> 01:00:05,680
and um thanks to everyone for coming

1593
01:00:05,680 --> 01:00:08,240
and having such a a good discussion

1594
01:00:08,240 --> 01:00:10,319
maybe next time we'll have more time

1595
01:00:10,319 --> 01:00:15,040
to discuss bye yeah thank you martin

1596
01:00:15,040 --> 01:00:17,200
thanks also watson for note taking

1597
01:00:17,200 --> 01:00:20,319
my sincerest apologies i saw the utc

1598
01:00:20,319 --> 01:00:22,319
plus one time zone and misinterpreted it

1599
01:00:22,319 --> 01:00:23,440
as utc

1600
01:00:23,440 --> 01:00:25,119
so here i am three minutes early for a

1601
01:00:25,119 --> 01:00:26,799
meeting that's actually an hour late

1602
01:00:26,799 --> 01:00:28,960
i'm so sorry about that thank you

1603
01:00:28,960 --> 01:00:30,559
everyone and i look forward to catching

1604
01:00:30,559 --> 01:00:43,839
up with the notes

1605
01:00:56,079 --> 01:00:58,160
you

