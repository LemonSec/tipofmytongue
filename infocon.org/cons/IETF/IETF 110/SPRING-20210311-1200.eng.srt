1
00:00:14,960 --> 00:00:15,519
okay

2
00:00:15,519 --> 00:00:17,680
my various clocks say it is the top of

3
00:00:17,680 --> 00:00:19,039
the hour

4
00:00:19,039 --> 00:00:21,439
this is joel halpern with bruno de crane

5
00:00:21,439 --> 00:00:23,519
and jim gashard your three spring

6
00:00:23,519 --> 00:00:26,880
chairs we are starting the second spring

7
00:00:26,880 --> 00:00:29,679
session using the agenda as per posted i

8
00:00:29,679 --> 00:00:31,199
hope we can manage to stay

9
00:00:31,199 --> 00:00:34,160
on time we did a good job the first time

10
00:00:34,160 --> 00:00:35,680
but still we want

11
00:00:35,680 --> 00:00:39,200
conversation and discussion okay bruno

12
00:00:39,200 --> 00:00:40,239
shall we go to

13
00:00:40,239 --> 00:00:43,200
uh the replication segment slides and

14
00:00:43,200 --> 00:00:44,239
daniel

15
00:00:44,239 --> 00:00:46,718
you're up

16
00:00:48,640 --> 00:00:52,000
yup good morning it's then

17
00:00:52,000 --> 00:00:54,800
i will be presenting on behalf of the

18
00:00:54,800 --> 00:00:57,839
author and update

19
00:00:59,920 --> 00:01:03,440
so last time i uh we presented this work

20
00:01:03,440 --> 00:01:04,239
it was in

21
00:01:04,239 --> 00:01:08,000
in 2019 march 2019 i believe

22
00:01:08,000 --> 00:01:11,280
since then we uh we started

23
00:01:11,280 --> 00:01:13,520
a charlotte a little bit the authorless

24
00:01:13,520 --> 00:01:14,640
as you can

25
00:01:14,640 --> 00:01:16,720
see but we added that behind us there's

26
00:01:16,720 --> 00:01:18,479
a lot of uh

27
00:01:18,479 --> 00:01:20,320
heavy contributor i just want to call

28
00:01:20,320 --> 00:01:21,920
out like i i think i saw

29
00:01:21,920 --> 00:01:26,080
um andrew stone and and tax

30
00:01:26,080 --> 00:01:28,000
this morning so those are av

31
00:01:28,000 --> 00:01:29,920
contributors also behind us and behind

32
00:01:29,920 --> 00:01:32,320
this work

33
00:01:32,320 --> 00:01:36,159
uh okay we can go to the next slide

34
00:01:36,159 --> 00:01:39,280
so that's my kind of an update on the

35
00:01:39,280 --> 00:01:41,840
update

36
00:01:41,840 --> 00:01:45,040
there are a lot of different pieces of

37
00:01:45,040 --> 00:01:46,079
this work that

38
00:01:46,079 --> 00:01:48,720
are progressing in different other

39
00:01:48,720 --> 00:01:50,720
working groups

40
00:01:50,720 --> 00:01:53,759
and since we've been able to have

41
00:01:53,759 --> 00:01:55,439
working group adoption here

42
00:01:55,439 --> 00:01:58,719
it unlocked the working group adoption

43
00:01:58,719 --> 00:02:01,119
of the other piece of work in the

44
00:02:01,119 --> 00:02:02,560
different working groups

45
00:02:02,560 --> 00:02:06,960
that are shown here we recently

46
00:02:06,960 --> 00:02:10,720
last year i also brought the mvpn

47
00:02:10,720 --> 00:02:12,640
one that you can see there that is

48
00:02:12,640 --> 00:02:14,319
adopted on the best

49
00:02:14,319 --> 00:02:16,959
and that's kind of an iptv type of use

50
00:02:16,959 --> 00:02:18,640
cases for the people that run

51
00:02:18,640 --> 00:02:22,000
mvpn there we recently also

52
00:02:22,000 --> 00:02:24,720
added uh the last one there is the ping

53
00:02:24,720 --> 00:02:27,840
like a way to validate the tree

54
00:02:27,840 --> 00:02:30,959
uh that where it's fairly new and it's

55
00:02:30,959 --> 00:02:32,640
uh it's been

56
00:02:32,640 --> 00:02:35,920
pushed into the paint working group

57
00:02:35,920 --> 00:02:39,680
the pce is uh under conversations we're

58
00:02:39,680 --> 00:02:41,120
progressing there too

59
00:02:41,120 --> 00:02:44,000
and the idr is also something that we're

60
00:02:44,000 --> 00:02:47,280
pressing progressing as well

61
00:02:47,280 --> 00:02:51,280
we can move to the other slide

62
00:02:51,280 --> 00:02:55,040
okay so really the update here is that

63
00:02:55,040 --> 00:02:57,360
it's very simple we we just decided to

64
00:02:57,360 --> 00:02:59,519
add this obvious x to the replication

65
00:02:59,519 --> 00:03:00,640
segment

66
00:03:00,640 --> 00:03:04,159
and more precisely uh we added like

67
00:03:04,159 --> 00:03:06,400
the n replicate function that you can

68
00:03:06,400 --> 00:03:08,319
see in the first paragraph

69
00:03:08,319 --> 00:03:11,599
um but the essential in in compliance to

70
00:03:11,599 --> 00:03:13,360
the network programming

71
00:03:13,360 --> 00:03:16,640
framework that is now an rfc

72
00:03:16,640 --> 00:03:19,360
but really what it means is is is

73
00:03:19,360 --> 00:03:20,800
nothing different than

74
00:03:20,800 --> 00:03:24,239
the mechanics uh brought up by the sr

75
00:03:24,239 --> 00:03:25,840
mps version of the dragon

76
00:03:25,840 --> 00:03:28,319
the first three versions covered at the

77
00:03:28,319 --> 00:03:29,760
sr mps here

78
00:03:29,760 --> 00:03:32,640
and really what's new here in the in the

79
00:03:32,640 --> 00:03:34,480
context of the uh

80
00:03:34,480 --> 00:03:36,879
replication uh is really an

81
00:03:36,879 --> 00:03:38,720
encapsulation function that is done at

82
00:03:38,720 --> 00:03:40,159
the root node

83
00:03:40,159 --> 00:03:42,239
uh to encapsulate the s obviously

84
00:03:42,239 --> 00:03:44,080
application so that is the

85
00:03:44,080 --> 00:03:47,200
the uh n indicated function now that

86
00:03:47,200 --> 00:03:49,360
works exactly the same

87
00:03:49,360 --> 00:03:52,400
as it is in the sr nps where you have

88
00:03:52,400 --> 00:03:54,319
the replication set label that

89
00:03:54,319 --> 00:03:57,599
is associated to an application segment

90
00:03:57,599 --> 00:03:58,720
that somewhere

91
00:03:58,720 --> 00:04:00,720
along the side of the network you will

92
00:04:00,720 --> 00:04:03,120
hit the replication node will decap and

93
00:04:03,120 --> 00:04:03,920
then process

94
00:04:03,920 --> 00:04:07,040
the host so we need nothing really

95
00:04:07,040 --> 00:04:10,560
different from a mechanic perspective

96
00:04:10,560 --> 00:04:14,080
we can move to slide four

97
00:04:14,080 --> 00:04:16,720
all right so more specific about the n

98
00:04:16,720 --> 00:04:18,720
replication function here

99
00:04:18,720 --> 00:04:21,839
so that's a function that is local to

100
00:04:21,839 --> 00:04:24,720
the replication node as you can see it

101
00:04:24,720 --> 00:04:26,720
is associated to the replication cell

102
00:04:26,720 --> 00:04:27,360
that will

103
00:04:27,360 --> 00:04:30,639
serve in replicating the data towards

104
00:04:30,639 --> 00:04:31,360
the lease

105
00:04:31,360 --> 00:04:35,040
i have an example coming it

106
00:04:35,040 --> 00:04:38,639
it will enable uh it is enabled on the

107
00:04:38,639 --> 00:04:39,600
node where

108
00:04:39,600 --> 00:04:42,400
it will replicate the incoming traffic

109
00:04:42,400 --> 00:04:43,680
towards the

110
00:04:43,680 --> 00:04:45,440
the lee for the other and the

111
00:04:45,440 --> 00:04:46,800
destination uh

112
00:04:46,800 --> 00:04:50,560
ipv6 uh host that's pretty much what

113
00:04:50,560 --> 00:04:53,199
it is it's exactly the same as the

114
00:04:53,199 --> 00:04:54,960
empress as i was saying

115
00:04:54,960 --> 00:04:56,800
the leaf it would perform in the

116
00:04:56,800 --> 00:04:58,800
encapsulation and forward the traffic

117
00:04:58,800 --> 00:05:01,759
directly to the end hose

118
00:05:01,759 --> 00:05:05,440
now we can move to slide five

119
00:05:05,680 --> 00:05:09,280
now the text bottom top left

120
00:05:09,280 --> 00:05:12,320
is the semantic about what's going on

121
00:05:12,320 --> 00:05:13,840
with the drawing and then the

122
00:05:13,840 --> 00:05:16,000
the bottom right is really what's

123
00:05:16,000 --> 00:05:17,919
happening in this example

124
00:05:17,919 --> 00:05:21,039
this example uh is been

125
00:05:21,039 --> 00:05:23,280
it's the one that just to stick current

126
00:05:23,280 --> 00:05:25,520
with what was presented by humanity

127
00:05:25,520 --> 00:05:27,120
working group it's the

128
00:05:27,120 --> 00:05:30,479
it's the uh example using the three

129
00:05:30,479 --> 00:05:35,520
uh uh topology to explain this example

130
00:05:35,520 --> 00:05:37,360
but there's also another way we can do

131
00:05:37,360 --> 00:05:38,000
the same thing

132
00:05:38,000 --> 00:05:40,720
which is the spray model now we just

133
00:05:40,720 --> 00:05:41,919
chose to

134
00:05:41,919 --> 00:05:43,680
use the tree version and it's pretty

135
00:05:43,680 --> 00:05:45,520
easy to follow with the text that we've

136
00:05:45,520 --> 00:05:45,840
put

137
00:05:45,840 --> 00:05:49,120
there so basically the node one

138
00:05:49,120 --> 00:05:52,560
here is the root and then the node 2 is

139
00:05:52,560 --> 00:05:53,919
the replication point

140
00:05:53,919 --> 00:05:58,000
node 5 6 and 7 are the leaves

141
00:05:58,000 --> 00:05:59,840
and then node 3 and node 4 are just

142
00:05:59,840 --> 00:06:01,199
transit node

143
00:06:01,199 --> 00:06:04,400
in the context of srv6 they could be

144
00:06:04,400 --> 00:06:05,039
just

145
00:06:05,039 --> 00:06:07,520
ipv6 node and then it will go through

146
00:06:07,520 --> 00:06:08,800
the routing extension

147
00:06:08,800 --> 00:06:11,039
the routing header so they don't do

148
00:06:11,039 --> 00:06:12,080
anything with

149
00:06:12,080 --> 00:06:16,000
node three and four in this context um

150
00:06:16,000 --> 00:06:19,600
at node two it will replicate towards

151
00:06:19,600 --> 00:06:20,560
the leaf five

152
00:06:20,560 --> 00:06:22,800
six and seven and at six and five and

153
00:06:22,800 --> 00:06:25,680
seven it will decap and remove the srh

154
00:06:25,680 --> 00:06:27,919
and then forward the traffic directly to

155
00:06:27,919 --> 00:06:29,759
the destination

156
00:06:29,759 --> 00:06:32,840
according to the ipv6 destination

157
00:06:32,840 --> 00:06:34,160
address

158
00:06:34,160 --> 00:06:37,600
and that's pretty much it we can go to

159
00:06:37,600 --> 00:06:40,800
slide six

160
00:06:40,800 --> 00:06:48,880
and open for question well i hope you

161
00:06:48,880 --> 00:06:52,000
uh you were able to hear what i was

162
00:06:52,000 --> 00:06:53,840
saying that beautiful speech and i was

163
00:06:53,840 --> 00:06:55,599
not on mute or something

164
00:06:55,599 --> 00:06:58,560
you were audible daniel and

165
00:06:58,560 --> 00:07:00,000
understandable

166
00:07:00,000 --> 00:07:02,000
no problems i'm not seeing anybody in

167
00:07:02,000 --> 00:07:03,840
the queue

168
00:07:03,840 --> 00:07:06,880
going once going twice

169
00:07:06,880 --> 00:07:09,520
let's move to midpoint protection i'm oh

170
00:07:09,520 --> 00:07:16,479
you're up

171
00:07:16,479 --> 00:07:19,280
hello everyone can you hear me yes we

172
00:07:19,280 --> 00:07:21,919
can thank you

173
00:07:21,919 --> 00:07:26,319
so today i'm going to talk about srt

174
00:07:26,319 --> 00:07:31,840
middle point protection next page

175
00:07:32,160 --> 00:07:35,520
so in this latest version we updated the

176
00:07:35,520 --> 00:07:36,400
section 1

177
00:07:36,400 --> 00:07:39,599
introduction and we also made some

178
00:07:39,599 --> 00:07:40,560
editorial

179
00:07:40,560 --> 00:07:45,440
changes in this updated document

180
00:07:45,440 --> 00:07:48,400
we described the problems we are going

181
00:07:48,400 --> 00:07:50,319
to resolve

182
00:07:50,319 --> 00:07:53,599
and also compare the difference between

183
00:07:53,599 --> 00:07:56,840
our solution and the other existing

184
00:07:56,840 --> 00:07:58,800
solutions

185
00:07:58,800 --> 00:08:00,319
first let's look at the problem we're

186
00:08:00,319 --> 00:08:02,639
going to resolve

187
00:08:02,639 --> 00:08:05,840
with node n fails

188
00:08:05,840 --> 00:08:09,840
this upstream node p as a plr

189
00:08:09,840 --> 00:08:13,440
will do the fastway route so in this

190
00:08:13,440 --> 00:08:14,879
case

191
00:08:14,879 --> 00:08:18,160
we provide protections for

192
00:08:18,160 --> 00:08:21,280
the node n failures however

193
00:08:21,280 --> 00:08:24,639
after the igb convergence

194
00:08:24,639 --> 00:08:27,759
the other nodes will remove

195
00:08:27,759 --> 00:08:30,639
the routes to load the end with because

196
00:08:30,639 --> 00:08:32,000
enemies failed

197
00:08:32,000 --> 00:08:36,240
for example node b after igp convergence

198
00:08:36,240 --> 00:08:39,839
b removes routes

199
00:08:39,839 --> 00:08:44,159
to node n so from this point

200
00:08:44,159 --> 00:08:47,600
the traffic will get dropped

201
00:08:47,600 --> 00:08:51,040
until a new srt

202
00:08:51,040 --> 00:08:54,720
routes will pass to to see

203
00:08:54,720 --> 00:08:59,680
is installed so we can see

204
00:08:59,680 --> 00:09:05,360
from the point itp converges

205
00:09:05,360 --> 00:09:08,640
until a new path is

206
00:09:08,640 --> 00:09:12,480
installed during this period of time

207
00:09:12,480 --> 00:09:15,760
traffic will get lost

208
00:09:15,760 --> 00:09:18,959
so this our

209
00:09:18,959 --> 00:09:22,800
draft will propose a solution to resolve

210
00:09:22,800 --> 00:09:27,120
these problems so the rough idea of our

211
00:09:27,120 --> 00:09:29,279
solution is that

212
00:09:29,279 --> 00:09:33,519
for any node such as p

213
00:09:33,519 --> 00:09:37,760
if this node can provide

214
00:09:37,760 --> 00:09:42,240
capability to do the proxy forwarding

215
00:09:42,240 --> 00:09:45,680
then this node will advertise

216
00:09:45,680 --> 00:09:50,000
its capabilities

217
00:09:50,000 --> 00:09:54,000
so all the answer nodes will use

218
00:09:54,000 --> 00:09:57,440
the rows to the capable

219
00:09:57,440 --> 00:10:00,880
nodes after

220
00:10:00,880 --> 00:10:03,519
node fails for example node b will use

221
00:10:03,519 --> 00:10:05,920
the routes to p

222
00:10:05,920 --> 00:10:09,200
for node ends sees

223
00:10:09,200 --> 00:10:12,880
after fails so in this way

224
00:10:12,880 --> 00:10:16,560
even bgp after pdp convergence

225
00:10:16,560 --> 00:10:18,320
and then we can still provide

226
00:10:18,320 --> 00:10:20,079
protections

227
00:10:20,079 --> 00:10:22,720
that's roughly our solution there is

228
00:10:22,720 --> 00:10:24,079
another

229
00:10:24,079 --> 00:10:28,240
solution which is adopted last year

230
00:10:28,240 --> 00:10:30,800
which is called a spring segment

231
00:10:30,800 --> 00:10:32,000
protection srt

232
00:10:32,000 --> 00:10:35,680
path so that's a informational

233
00:10:35,680 --> 00:10:39,519
so the idea of data java is that

234
00:10:39,519 --> 00:10:42,959
for every node or for some node

235
00:10:42,959 --> 00:10:45,279
they will provide some extra functions

236
00:10:45,279 --> 00:10:47,360
the function is that

237
00:10:47,360 --> 00:10:49,440
the node will accept some kind of

238
00:10:49,440 --> 00:10:50,480
configurations

239
00:10:50,480 --> 00:10:52,720
for example this time computer configure

240
00:10:52,720 --> 00:10:54,640
time

241
00:10:54,640 --> 00:10:56,640
during this time will hold the routes

242
00:10:56,640 --> 00:10:58,000
all the wrongs

243
00:10:58,000 --> 00:11:01,600
to node so if that node supports that

244
00:11:01,600 --> 00:11:03,600
functions

245
00:11:03,600 --> 00:11:06,640
so after configuration and then if all

246
00:11:06,640 --> 00:11:08,160
the nodes in the network can provide

247
00:11:08,160 --> 00:11:09,760
this function and then hold up

248
00:11:09,760 --> 00:11:13,200
hold off the rows for some

249
00:11:13,200 --> 00:11:16,480
period of time even that node failed

250
00:11:16,480 --> 00:11:18,640
and then they can provide some uh the

251
00:11:18,640 --> 00:11:19,760
protections

252
00:11:19,760 --> 00:11:23,360
however if some of the nodes

253
00:11:23,360 --> 00:11:26,800
do not support these functionalities

254
00:11:26,800 --> 00:11:30,560
and then we may not provide protections

255
00:11:30,560 --> 00:11:33,200
during this period from rgb convergence

256
00:11:33,200 --> 00:11:35,120
to the new road

257
00:11:35,120 --> 00:11:39,360
new path is resolved so our solution

258
00:11:39,360 --> 00:11:42,640
provides enhancements to the exision

259
00:11:42,640 --> 00:11:44,959
solutions

260
00:11:44,959 --> 00:11:47,680
so we'll let's look at more details the

261
00:11:47,680 --> 00:11:50,239
next page

262
00:11:51,600 --> 00:11:54,079
so also basically our solution provide

263
00:11:54,079 --> 00:11:55,200
more coverages

264
00:11:55,200 --> 00:11:58,000
and in addition our solution also

265
00:11:58,000 --> 00:11:59,680
provides protections

266
00:11:59,680 --> 00:12:02,240
for the binding segments our node when

267
00:12:02,240 --> 00:12:05,120
that node fails

268
00:12:05,680 --> 00:12:08,880
so first because for each of the node we

269
00:12:08,880 --> 00:12:09,519
if that

270
00:12:09,519 --> 00:12:11,839
if that node can support a proxy

271
00:12:11,839 --> 00:12:12,639
forwarding

272
00:12:12,639 --> 00:12:17,200
and then we that node will advertise

273
00:12:17,200 --> 00:12:20,800
f uh capability for that

274
00:12:20,800 --> 00:12:24,240
for that functions so all they are

275
00:12:24,240 --> 00:12:28,639
so all the other notes we receive

276
00:12:28,639 --> 00:12:31,600
the discovery for those node and then it

277
00:12:31,600 --> 00:12:33,680
will

278
00:12:33,680 --> 00:12:36,839
send the routes a cinder center package

279
00:12:36,839 --> 00:12:39,920
to the least

280
00:12:39,920 --> 00:12:43,440
capable nodes when

281
00:12:43,440 --> 00:12:46,639
one node fails next to that node

282
00:12:46,639 --> 00:12:50,079
so this may provide more protections

283
00:12:50,079 --> 00:12:52,079
even though some of the node

284
00:12:52,079 --> 00:12:56,719
doesn't support the functions

285
00:12:57,440 --> 00:13:00,399
i know just a moment has been trying to

286
00:13:00,399 --> 00:13:01,519
ask a question and

287
00:13:01,519 --> 00:13:04,560
i'm not sure which slide it's on so

288
00:13:04,560 --> 00:13:06,140
you ask

289
00:13:06,140 --> 00:13:09,370
[Music]

290
00:13:09,680 --> 00:13:12,959
yeah so my question um uh

291
00:13:12,959 --> 00:13:16,079
uh is that so you mentioned that um uh

292
00:13:16,079 --> 00:13:18,839
in the previous slide you mentioned that

293
00:13:18,839 --> 00:13:20,560
uh

294
00:13:20,560 --> 00:13:24,560
the draft ietf spring segment protection

295
00:13:24,560 --> 00:13:27,040
srt paths has provided a solution

296
00:13:27,040 --> 00:13:29,920
but your you are pointing out that

297
00:13:29,920 --> 00:13:32,079
because that draft is informational so

298
00:13:32,079 --> 00:13:32,880
somebody may not

299
00:13:32,880 --> 00:13:34,399
implement it so are you suggesting that

300
00:13:34,399 --> 00:13:37,839
trap should be made standard

301
00:13:37,839 --> 00:13:39,519
do you think that will solve the problem

302
00:13:39,519 --> 00:13:41,279
or what is the

303
00:13:41,279 --> 00:13:43,040
that's another problem i mean the

304
00:13:43,040 --> 00:13:44,560
problem is that

305
00:13:44,560 --> 00:13:47,680
uh if some of the lows

306
00:13:47,680 --> 00:13:50,880
do not support your draft right

307
00:13:50,880 --> 00:13:52,639
so even though you either standard and

308
00:13:52,639 --> 00:13:54,079
then maybe some notes

309
00:13:54,079 --> 00:13:56,160
don't support you your function and then

310
00:13:56,160 --> 00:13:57,600
some notes may not support your function

311
00:13:57,600 --> 00:13:59,839
right

312
00:14:00,399 --> 00:14:02,240
yes so if some node does not support

313
00:14:02,240 --> 00:14:04,399
this function uh

314
00:14:04,399 --> 00:14:07,839
uh uh then it may not um

315
00:14:07,839 --> 00:14:10,880
the behavior of the uh network won't be

316
00:14:10,880 --> 00:14:11,600
any worse

317
00:14:11,600 --> 00:14:14,800
than uh uh you know

318
00:14:14,800 --> 00:14:16,720
not having supported it to having

319
00:14:16,720 --> 00:14:18,720
supported it right so

320
00:14:18,720 --> 00:14:22,240
um uh so the solution is to

321
00:14:22,240 --> 00:14:25,440
you know uh make that note to support

322
00:14:25,440 --> 00:14:27,040
this uh draft is it so

323
00:14:27,040 --> 00:14:28,959
so i i see that you are proposing an

324
00:14:28,959 --> 00:14:30,240
alternate

325
00:14:30,240 --> 00:14:32,800
uh where there is uh there is a proxy

326
00:14:32,800 --> 00:14:34,480
for every

327
00:14:34,480 --> 00:14:37,440
node there is a proxy so to me it seems

328
00:14:37,440 --> 00:14:38,079
like it's

329
00:14:38,079 --> 00:14:40,079
it has lot of operational overheads so

330
00:14:40,079 --> 00:14:42,240
now operator has to configure

331
00:14:42,240 --> 00:14:44,320
which node is a proxy for which one

332
00:14:44,320 --> 00:14:46,240
right no no no no no no

333
00:14:46,240 --> 00:14:49,440
no no no not that way so this one just

334
00:14:49,440 --> 00:14:52,959
uh as soon as that node have capability

335
00:14:52,959 --> 00:14:56,720
and then for always adjacent node i need

336
00:14:56,720 --> 00:14:58,720
to wear device data capabilities in one

337
00:14:58,720 --> 00:15:00,000
bit

338
00:15:00,000 --> 00:15:01,600
don't need this for don't need to

339
00:15:01,600 --> 00:15:03,600
configure uh

340
00:15:03,600 --> 00:15:05,680
for example for p which other configure

341
00:15:05,680 --> 00:15:07,920
this one is capable

342
00:15:07,920 --> 00:15:09,680
and then we don't need to configure this

343
00:15:09,680 --> 00:15:10,959
p is capable for

344
00:15:10,959 --> 00:15:14,399
n for n1 and then for p1 no just

345
00:15:14,399 --> 00:15:15,120
configure this

346
00:15:15,120 --> 00:15:17,920
capable and then p will advertise one p

347
00:15:17,920 --> 00:15:19,600
one one flat

348
00:15:19,600 --> 00:15:23,040
indicate that p is capable to d to

349
00:15:23,040 --> 00:15:26,240
proxy to do the proxy work yeah so i'm

350
00:15:26,240 --> 00:15:28,560
not able to get what is the advantage so

351
00:15:28,560 --> 00:15:31,839
the problem you pointed out is if

352
00:15:31,839 --> 00:15:34,720
b doesn't support uh draft iatf spring

353
00:15:34,720 --> 00:15:36,959
segment protection srt paths then it's a

354
00:15:36,959 --> 00:15:37,920
problem

355
00:15:37,920 --> 00:15:40,399
but if b doesn't support this midpoint

356
00:15:40,399 --> 00:15:42,320
failure draft it's the same problem

357
00:15:42,320 --> 00:15:45,920
right and this can do more because

358
00:15:45,920 --> 00:15:48,959
for example we know which node is

359
00:15:48,959 --> 00:15:52,160
capable and then we can send that

360
00:15:52,160 --> 00:15:55,040
traffic along those nodes which are

361
00:15:55,040 --> 00:15:56,800
capable and then we can

362
00:15:56,800 --> 00:15:59,680
even so we can we have some those don't

363
00:15:59,680 --> 00:16:01,199
support this capability

364
00:16:01,199 --> 00:16:04,639
and then we can provide more coverages

365
00:16:04,639 --> 00:16:07,440
compiled to just uh keep the older

366
00:16:07,440 --> 00:16:08,639
routes

367
00:16:08,639 --> 00:16:12,160
to not end with no damn fails i think we

368
00:16:12,160 --> 00:16:14,800
need some discussion on the list on this

369
00:16:14,800 --> 00:16:17,199
because i'm having trouble parsing

370
00:16:17,199 --> 00:16:18,880
whether the real difference is the

371
00:16:18,880 --> 00:16:20,560
capability flag or whether there's a

372
00:16:20,560 --> 00:16:22,720
real difference in these solutions

373
00:16:22,720 --> 00:16:25,040
and no i don't want you to to sort that

374
00:16:25,040 --> 00:16:26,720
out right this minute

375
00:16:26,720 --> 00:16:28,720
but i do think we need to discuss it

376
00:16:28,720 --> 00:16:32,880
with the whole working group on the list

377
00:16:33,680 --> 00:16:36,959
that makes sense yes okay

378
00:16:36,959 --> 00:16:40,639
another another before you go on

379
00:16:40,639 --> 00:16:43,759
bruno had a question okay okay

380
00:16:43,759 --> 00:16:47,279
go ahead bruno bruno speaking as in an

381
00:16:47,279 --> 00:16:49,040
individual

382
00:16:49,040 --> 00:16:51,120
i have a comment i may have a comment on

383
00:16:51,120 --> 00:16:52,399
terminology

384
00:16:52,399 --> 00:16:54,399
which may also help on the previous

385
00:16:54,399 --> 00:16:56,000
discussion

386
00:16:56,000 --> 00:16:59,120
and as far as i understand

387
00:16:59,120 --> 00:17:01,680
we talk about protection for behavior

388
00:17:01,680 --> 00:17:04,000
which is pre-computed

389
00:17:04,000 --> 00:17:07,119
at which which is done before the rgb

390
00:17:07,119 --> 00:17:09,119
convergence

391
00:17:09,119 --> 00:17:11,280
whereas uh i understand that your

392
00:17:11,280 --> 00:17:12,640
proposition is behaving

393
00:17:12,640 --> 00:17:16,559
after or during the igp convergence

394
00:17:16,559 --> 00:17:18,319
in which case in general we call about

395
00:17:18,319 --> 00:17:20,079
restoration

396
00:17:20,079 --> 00:17:23,039
uh so if it's a correct understanding uh

397
00:17:23,039 --> 00:17:23,839
that would help

398
00:17:23,839 --> 00:17:25,760
uh make a distinction between the draft

399
00:17:25,760 --> 00:17:27,199
from uh

400
00:17:27,199 --> 00:17:30,160
its spring segment protection on your

401
00:17:30,160 --> 00:17:31,919
draft

402
00:17:31,919 --> 00:17:33,679
because they would one would speak about

403
00:17:33,679 --> 00:17:36,000
protection while the other one

404
00:17:36,000 --> 00:17:39,120
deals with restoration

405
00:17:39,200 --> 00:17:42,400
yeah i think for the for the existing

406
00:17:42,400 --> 00:17:43,600
draft

407
00:17:43,600 --> 00:17:46,799
so they the astronauts don't know

408
00:17:46,799 --> 00:17:48,240
one node don't know the other node

409
00:17:48,240 --> 00:17:50,880
whether they have this capability

410
00:17:50,880 --> 00:17:54,320
so he they so we just use the

411
00:17:54,320 --> 00:17:57,919
old node all the routes to fail the node

412
00:17:57,919 --> 00:18:01,520
for some time but our node

413
00:18:01,520 --> 00:18:03,840
have more information about which node

414
00:18:03,840 --> 00:18:04,880
is capable

415
00:18:04,880 --> 00:18:08,400
and then we can send the traffic

416
00:18:08,400 --> 00:18:12,000
along those nodes with capable and then

417
00:18:12,000 --> 00:18:14,160
we have more chance

418
00:18:14,160 --> 00:18:17,200
to get the traffic to

419
00:18:17,200 --> 00:18:20,160
the node next to the phase of the road

420
00:18:20,160 --> 00:18:22,000
we can provide the

421
00:18:22,000 --> 00:18:24,160
protections even though some of the

422
00:18:24,160 --> 00:18:26,480
nodes do not support

423
00:18:26,480 --> 00:18:29,840
these functionalities

424
00:18:36,640 --> 00:18:38,400
okay is there more you wanted to cover

425
00:18:38,400 --> 00:18:40,080
because this is all of your slides and

426
00:18:40,080 --> 00:18:40,559
we're

427
00:18:40,559 --> 00:18:43,600
we've taken your ten minutes

428
00:18:43,600 --> 00:18:47,039
yeah another enhancement is that we

429
00:18:47,039 --> 00:18:49,280
provide protections for the binding

430
00:18:49,280 --> 00:18:50,400
segments

431
00:18:50,400 --> 00:18:52,480
on a node when that node fails and then

432
00:18:52,480 --> 00:18:55,120
i think the existing draft

433
00:18:55,120 --> 00:18:57,200
to mount does not support these

434
00:18:57,200 --> 00:18:58,320
functions the

435
00:18:58,320 --> 00:19:01,520
second bullet imported finding segment

436
00:19:01,520 --> 00:19:03,120
protections so we provide

437
00:19:03,120 --> 00:19:06,180
those protections

438
00:19:06,180 --> 00:19:08,840
[Music]

439
00:19:08,840 --> 00:19:11,440
okay thank you

440
00:19:11,440 --> 00:19:13,919
let's move on to the next presentation

441
00:19:13,919 --> 00:19:16,080
on segment routing for redundancy

442
00:19:16,080 --> 00:19:18,240
protection

443
00:19:18,240 --> 00:19:21,600
uh i'm not sure whether fun or zhu song

444
00:19:21,600 --> 00:19:21,840
is

445
00:19:21,840 --> 00:19:24,080
going to present but whichever you is

446
00:19:24,080 --> 00:19:25,120
planning to present

447
00:19:25,120 --> 00:19:28,160
please go ahead it looks like fun go

448
00:19:28,160 --> 00:19:29,760
ahead fan

449
00:19:29,760 --> 00:19:32,799
hi thank you um

450
00:19:32,799 --> 00:19:35,600
um this actually this topic is includes

451
00:19:35,600 --> 00:19:36,320
two

452
00:19:36,320 --> 00:19:39,200
two jobs one is the segment routing for

453
00:19:39,200 --> 00:19:39,760
the

454
00:19:39,760 --> 00:19:42,640
redundancy protection and another one is

455
00:19:42,640 --> 00:19:43,440
the

456
00:19:43,440 --> 00:19:46,080
srh extension for this uh redundancy

457
00:19:46,080 --> 00:19:47,120
protection

458
00:19:47,120 --> 00:19:50,480
um so i will i will cover uh both

459
00:19:50,480 --> 00:19:55,120
both drafts there next please

460
00:19:55,679 --> 00:19:58,640
yeah just very brief introduction to the

461
00:19:58,640 --> 00:20:00,240
redundancy protection

462
00:20:00,240 --> 00:20:03,760
um it is it actually it is one of the

463
00:20:03,760 --> 00:20:05,520
mechanism to achieve the service

464
00:20:05,520 --> 00:20:06,559
protection

465
00:20:06,559 --> 00:20:09,360
and it follows the prince the prey off

466
00:20:09,360 --> 00:20:10,159
prince

467
00:20:10,159 --> 00:20:12,400
so there is an example scenario there

468
00:20:12,400 --> 00:20:13,600
that

469
00:20:13,600 --> 00:20:16,320
when when the when the flow comes to the

470
00:20:16,320 --> 00:20:16,960
um

471
00:20:16,960 --> 00:20:18,799
there are there are two nodes one is the

472
00:20:18,799 --> 00:20:20,159
red and once the merge

473
00:20:20,159 --> 00:20:22,480
when the flow when the flow is sent to

474
00:20:22,480 --> 00:20:24,080
the red node

475
00:20:24,080 --> 00:20:26,159
and the red node to replicate the flow

476
00:20:26,159 --> 00:20:27,679
into two into two

477
00:20:27,679 --> 00:20:30,720
copies and send the two copies uh

478
00:20:30,720 --> 00:20:32,880
from different paths respect

479
00:20:32,880 --> 00:20:34,320
respectively

480
00:20:34,320 --> 00:20:37,919
and when the merged node received the uh

481
00:20:37,919 --> 00:20:40,400
received the first packet of each

482
00:20:40,400 --> 00:20:41,760
sequence number

483
00:20:41,760 --> 00:20:44,799
uh yeah i forgot on the redundancy node

484
00:20:44,799 --> 00:20:45,200
and

485
00:20:45,200 --> 00:20:49,200
there yeah

486
00:20:49,200 --> 00:20:51,919
on the r1 or on the redundancy node uh

487
00:20:51,919 --> 00:20:53,679
there is a flow id and the sequence

488
00:20:53,679 --> 00:20:55,120
number are marked there

489
00:20:55,120 --> 00:20:57,600
on the traffic on the packet and when

490
00:20:57,600 --> 00:20:58,480
the

491
00:20:58,480 --> 00:21:00,320
when the package when the first package

492
00:21:00,320 --> 00:21:02,400
of each sequence number is received on

493
00:21:02,400 --> 00:21:03,440
the merge node

494
00:21:03,440 --> 00:21:06,720
it will be sent to the to the to the r2

495
00:21:06,720 --> 00:21:10,159
and the other no other package

496
00:21:10,159 --> 00:21:12,640
means the redundant packet will be

497
00:21:12,640 --> 00:21:14,400
dropped

498
00:21:14,400 --> 00:21:16,720
i will give more explanation about this

499
00:21:16,720 --> 00:21:18,559
uh procedure there

500
00:21:18,559 --> 00:21:21,918
later next please

501
00:21:22,720 --> 00:21:24,640
and to support the redundancy perception

502
00:21:24,640 --> 00:21:25,919
that we define this

503
00:21:25,919 --> 00:21:28,960
uh several new new things there

504
00:21:28,960 --> 00:21:31,919
and first is the redundancy segment it

505
00:21:31,919 --> 00:21:33,600
is a new segment defined for the

506
00:21:33,600 --> 00:21:34,960
redundancy note

507
00:21:34,960 --> 00:21:36,799
and there's also the new behavior of

508
00:21:36,799 --> 00:21:38,240
this redundancy

509
00:21:38,240 --> 00:21:41,440
of this segment is defined um the second

510
00:21:41,440 --> 00:21:43,200
is the merging segment

511
00:21:43,200 --> 00:21:45,520
it is the segment used on the merging

512
00:21:45,520 --> 00:21:46,960
node and with the

513
00:21:46,960 --> 00:21:49,039
behavior of the of this segment is

514
00:21:49,039 --> 00:21:50,000
defined

515
00:21:50,000 --> 00:21:53,280
and to support the to to identify the

516
00:21:53,280 --> 00:21:54,640
unique flow or

517
00:21:54,640 --> 00:21:57,440
identify the packet sequence within one

518
00:21:57,440 --> 00:21:58,159
flow

519
00:21:58,159 --> 00:22:00,880
that there is uh flow identification the

520
00:22:00,880 --> 00:22:01,840
sequence number

521
00:22:01,840 --> 00:22:05,760
uh is defined there and

522
00:22:05,760 --> 00:22:08,720
and last there is a redundancy policy it

523
00:22:08,720 --> 00:22:09,200
is the

524
00:22:09,200 --> 00:22:12,400
it is the uh it is a variant of the

525
00:22:12,400 --> 00:22:15,760
sr policy and it is used uh

526
00:22:15,760 --> 00:22:18,159
it is associated with the redundancy

527
00:22:18,159 --> 00:22:19,360
segment

528
00:22:19,360 --> 00:22:22,880
uh when the redund segment is is um

529
00:22:22,880 --> 00:22:26,240
is executed there and the difference

530
00:22:26,240 --> 00:22:28,640
between the redundancy policy

531
00:22:28,640 --> 00:22:32,720
and and other normal sr policy is

532
00:22:32,720 --> 00:22:34,960
it includes more than one other list of

533
00:22:34,960 --> 00:22:36,480
the segment

534
00:22:36,480 --> 00:22:38,320
and all of this other list of the

535
00:22:38,320 --> 00:22:41,520
segment will be used at the same time

536
00:22:41,520 --> 00:22:43,840
next

537
00:22:45,360 --> 00:22:47,679
and we have the update since uh we have

538
00:22:47,679 --> 00:22:48,799
the update the

539
00:22:48,799 --> 00:22:53,360
the draft system etf um

540
00:22:53,360 --> 00:22:56,640
yeah yeah i think actually i i think i

541
00:22:56,640 --> 00:22:59,679
i refined the this is not the the latest

542
00:22:59,679 --> 00:23:00,559
version of

543
00:23:00,559 --> 00:23:03,280
uh of my presentation uh but i will try

544
00:23:03,280 --> 00:23:03,840
to

545
00:23:03,840 --> 00:23:06,720
explain there uh actually we we designed

546
00:23:06,720 --> 00:23:07,520
the process

547
00:23:07,520 --> 00:23:10,400
and of course update the the

548
00:23:10,400 --> 00:23:12,320
specification of the redundancy

549
00:23:12,320 --> 00:23:14,799
segment modding segment and the

550
00:23:14,799 --> 00:23:17,200
encapsulation of the flow identification

551
00:23:17,200 --> 00:23:19,679
sequence number and also add some

552
00:23:19,679 --> 00:23:21,120
description of the

553
00:23:21,120 --> 00:23:24,640
uh redundancy policy and yeah we also

554
00:23:24,640 --> 00:23:26,320
split the segment description

555
00:23:26,320 --> 00:23:30,480
into uh two parts one is the sr npr's

556
00:23:30,480 --> 00:23:34,880
another part is as our v6

557
00:23:34,880 --> 00:23:37,840
next

558
00:23:40,320 --> 00:23:43,279
yeah as i mentioned that redundant

559
00:23:43,279 --> 00:23:45,200
segment is updated

560
00:23:45,200 --> 00:23:47,360
so it is updated as a variant of the

561
00:23:47,360 --> 00:23:48,799
bounding seat

562
00:23:48,799 --> 00:23:50,880
if we use the abundances that there you

563
00:23:50,880 --> 00:23:51,840
can set

564
00:23:51,840 --> 00:23:54,400
a whole list for the for the service

565
00:23:54,400 --> 00:23:55,120
from the

566
00:23:55,120 --> 00:23:58,240
from the ingress of the sr uh ingress

567
00:23:58,240 --> 00:24:00,000
node of the sr domain

568
00:24:00,000 --> 00:24:03,440
so uh there's also some um

569
00:24:03,440 --> 00:24:06,640
some uh since it is it is defined as a

570
00:24:06,640 --> 00:24:08,640
variant of binding seeds so there is a

571
00:24:08,640 --> 00:24:10,480
change on the suitable node

572
00:24:10,480 --> 00:24:13,919
a suit code and

573
00:24:13,919 --> 00:24:16,799
another another big change is we

574
00:24:16,799 --> 00:24:19,360
decouple the replication behavior

575
00:24:19,360 --> 00:24:20,720
and the marking of the flow

576
00:24:20,720 --> 00:24:23,200
identification and the sequence number

577
00:24:23,200 --> 00:24:26,400
we think that these two um

578
00:24:26,400 --> 00:24:30,320
these two behaviors once the application

579
00:24:30,320 --> 00:24:32,400
another is the marking they are not

580
00:24:32,400 --> 00:24:33,760
necessarily uh

581
00:24:33,760 --> 00:24:36,559
bounded together um but it depends on

582
00:24:36,559 --> 00:24:37,360
the

583
00:24:37,360 --> 00:24:40,640
um on the other choice uh on the

584
00:24:40,640 --> 00:24:41,360
deployment

585
00:24:41,360 --> 00:24:44,960
choice i i give the the the two

586
00:24:44,960 --> 00:24:48,400
choices i give the two uh i give the

587
00:24:48,400 --> 00:24:50,880
examples of the two choices later uh in

588
00:24:50,880 --> 00:24:52,400
the later slides

589
00:24:52,400 --> 00:24:55,600
uh so here that um but

590
00:24:55,600 --> 00:24:58,720
since uh from the uh

591
00:24:58,720 --> 00:25:01,360
actually after we updated this uh draft

592
00:25:01,360 --> 00:25:03,520
and we also received the comments from

593
00:25:03,520 --> 00:25:07,120
uh from others so we actually

594
00:25:07,120 --> 00:25:10,320
we define actually we should refine the

595
00:25:10,320 --> 00:25:13,520
suit code later on and

596
00:25:13,520 --> 00:25:16,080
i will i will not explain the suit code

597
00:25:16,080 --> 00:25:16,720
here

598
00:25:16,720 --> 00:25:20,240
because it will be refined later and

599
00:25:20,240 --> 00:25:22,720
maybe we can just go to the next slide

600
00:25:22,720 --> 00:25:25,679
and to explain the

601
00:25:25,679 --> 00:25:29,760
yeah also the merging node the update is

602
00:25:29,760 --> 00:25:30,080
we

603
00:25:30,080 --> 00:25:32,559
specified that how to define how to

604
00:25:32,559 --> 00:25:33,600
determine the pac

605
00:25:33,600 --> 00:25:36,240
if the packet is redundant packet or not

606
00:25:36,240 --> 00:25:38,080
uh because the sequence number is there

607
00:25:38,080 --> 00:25:38,880
there

608
00:25:38,880 --> 00:25:42,799
is used to uh to diff to determine

609
00:25:42,799 --> 00:25:45,440
uh the pac uh the package is redundant

610
00:25:45,440 --> 00:25:46,320
or not

611
00:25:46,320 --> 00:25:49,600
and there is a there's a um there's a

612
00:25:49,600 --> 00:25:50,880
suggestion that to

613
00:25:50,880 --> 00:25:54,080
to use it to look up a local table there

614
00:25:54,080 --> 00:25:57,120
but it's not um yeah it just give an

615
00:25:57,120 --> 00:25:58,320
example that

616
00:25:58,320 --> 00:26:01,360
uh the sequence can be uh

617
00:26:01,360 --> 00:26:05,760
done in this way to the to determine the

618
00:26:05,760 --> 00:26:09,360
the package is redundant or not

619
00:26:09,520 --> 00:26:12,639
yes next please

620
00:26:13,200 --> 00:26:16,799
um here we take the srv6 as an example

621
00:26:16,799 --> 00:26:19,120
to explain the process of the redundancy

622
00:26:19,120 --> 00:26:22,159
protection and i give here i give two

623
00:26:22,159 --> 00:26:23,360
choices

624
00:26:23,360 --> 00:26:26,320
two options there the difference of the

625
00:26:26,320 --> 00:26:27,039
two options

626
00:26:27,039 --> 00:26:30,240
of the the options are

627
00:26:30,240 --> 00:26:33,279
whether we assign the flow id

628
00:26:33,279 --> 00:26:35,840
and to generate the sequence number at

629
00:26:35,840 --> 00:26:36,320
the

630
00:26:36,320 --> 00:26:39,220
inc at the r

631
00:26:39,220 --> 00:26:40,640
[Music]

632
00:26:40,640 --> 00:26:44,880
and at the ingress note of the srv6

633
00:26:44,880 --> 00:26:48,799
node or at a specific redundancy node

634
00:26:48,799 --> 00:26:51,760
um when there when the redundancy node

635
00:26:51,760 --> 00:26:52,000
is

636
00:26:52,000 --> 00:26:55,039
not not the first node not the ingress

637
00:26:55,039 --> 00:26:55,919
node of the

638
00:26:55,919 --> 00:27:00,159
of the srv6 domain so

639
00:27:00,159 --> 00:27:03,120
if we in this option that we assign this

640
00:27:03,120 --> 00:27:04,960
flow id and generate the sequence number

641
00:27:04,960 --> 00:27:05,679
at the

642
00:27:05,679 --> 00:27:07,840
ingress node and it is not the

643
00:27:07,840 --> 00:27:09,840
redundancy redundancy node

644
00:27:09,840 --> 00:27:12,240
so this information will be kept as the

645
00:27:12,240 --> 00:27:13,360
optional trv

646
00:27:13,360 --> 00:27:16,720
the in the in the ipv6 header and

647
00:27:16,720 --> 00:27:18,880
the packet is transmitted to redundancy

648
00:27:18,880 --> 00:27:20,640
node and redundancy

649
00:27:20,640 --> 00:27:23,679
node is a triggered is a bonding

650
00:27:23,679 --> 00:27:26,880
bounding seat and this so it

651
00:27:26,880 --> 00:27:29,840
added uh so if the bond is introduced

652
00:27:29,840 --> 00:27:31,600
with the encapsulation mode

653
00:27:31,600 --> 00:27:34,559
and there will be another ipv6 header

654
00:27:34,559 --> 00:27:35,600
added

655
00:27:35,600 --> 00:27:39,200
and in this case

656
00:27:39,200 --> 00:27:42,240
the uh the segment list is

657
00:27:42,240 --> 00:27:45,600
the is the redundancy is the r node

658
00:27:45,600 --> 00:27:49,120
is the r and r3 or r and r4

659
00:27:49,120 --> 00:27:52,320
and sin because why we are not including

660
00:27:52,320 --> 00:27:52,960
these

661
00:27:52,960 --> 00:27:56,240
merging node m here um because the mod

662
00:27:56,240 --> 00:27:58,559
the one when the sequence number and

663
00:27:58,559 --> 00:28:01,200
flow id are used in the merging node

664
00:28:01,200 --> 00:28:05,120
and it's it will need the the

665
00:28:05,120 --> 00:28:08,000
flow identification sequence number uh

666
00:28:08,000 --> 00:28:09,360
in the ipv6

667
00:28:09,360 --> 00:28:12,880
in the inner ipv6 header um or maybe

668
00:28:12,880 --> 00:28:14,240
there's another

669
00:28:14,240 --> 00:28:17,200
there's another alternative to use it

670
00:28:17,200 --> 00:28:19,279
and you can also copy the

671
00:28:19,279 --> 00:28:22,559
flow identif this optional trv from the

672
00:28:22,559 --> 00:28:23,279
inner of

673
00:28:23,279 --> 00:28:26,000
inner ipv6 header to the outer fpv6

674
00:28:26,000 --> 00:28:26,720
header

675
00:28:26,720 --> 00:28:29,039
when you do the redundancy note when

676
00:28:29,039 --> 00:28:30,080
they do the

677
00:28:30,080 --> 00:28:33,440
will perform the redundancy segment

678
00:28:33,440 --> 00:28:36,799
uh it just uh the to to see there are

679
00:28:36,799 --> 00:28:38,720
actually different choices different

680
00:28:38,720 --> 00:28:42,080
options to define this

681
00:28:42,320 --> 00:28:45,279
to to make this uh redundancy protection

682
00:28:45,279 --> 00:28:46,559
work

683
00:28:46,559 --> 00:28:48,880
okay before you go on to the next slide

684
00:28:48,880 --> 00:28:49,679
fan

685
00:28:49,679 --> 00:28:51,760
greg seems to have a question focused on

686
00:28:51,760 --> 00:28:53,600
this material so it'd be good to let him

687
00:28:53,600 --> 00:28:54,880
ask now

688
00:28:54,880 --> 00:28:58,080
sure greg go ahead

689
00:28:58,080 --> 00:29:01,279
so um if i understand correctly

690
00:29:01,279 --> 00:29:03,520
what you're proposing you're proposing

691
00:29:03,520 --> 00:29:04,559
uh support

692
00:29:04,559 --> 00:29:08,480
uh um packet replication duplicate

693
00:29:08,480 --> 00:29:10,640
elimination function

694
00:29:10,640 --> 00:29:14,480
um as part of this um in a deadnet

695
00:29:14,480 --> 00:29:18,159
um group uh there is a functionality

696
00:29:18,159 --> 00:29:21,760
order preservation so

697
00:29:21,760 --> 00:29:26,080
is it something that uh as well

698
00:29:26,080 --> 00:29:29,039
you expect that merging node will do

699
00:29:29,039 --> 00:29:30,559
order preservation

700
00:29:30,559 --> 00:29:34,000
based on the sequence number

701
00:29:34,640 --> 00:29:37,760
um in the current draft that we define

702
00:29:37,760 --> 00:29:38,240
this

703
00:29:38,240 --> 00:29:42,159
ordering as the optional function

704
00:29:42,159 --> 00:29:44,399
currently we are focusing focusing on

705
00:29:44,399 --> 00:29:45,360
the uh

706
00:29:45,360 --> 00:29:48,880
replication and elimination part

707
00:29:48,880 --> 00:29:51,440
but i think that is the that is some

708
00:29:51,440 --> 00:29:52,000
something

709
00:29:52,000 --> 00:29:54,720
that some work that we can do after we

710
00:29:54,720 --> 00:29:55,679
finish these

711
00:29:55,679 --> 00:29:59,200
uh finish the first phase

712
00:29:59,279 --> 00:30:02,640
um greg if i may for a moment that does

713
00:30:02,640 --> 00:30:03,440
raise the

714
00:30:03,440 --> 00:30:05,840
more general point that given the

715
00:30:05,840 --> 00:30:07,840
overlap and functionality between this

716
00:30:07,840 --> 00:30:08,320
and

717
00:30:08,320 --> 00:30:10,559
and the debt network we need to make

718
00:30:10,559 --> 00:30:12,320
sure this is coordinated i'm not saying

719
00:30:12,320 --> 00:30:13,600
it has to be done there i'm saying it

720
00:30:13,600 --> 00:30:15,760
has to be coordinated though

721
00:30:15,760 --> 00:30:18,080
yes and actually that yeah that's why in

722
00:30:18,080 --> 00:30:18,880
my comment

723
00:30:18,880 --> 00:30:22,000
i added.net uh to the distribution

724
00:30:22,000 --> 00:30:25,919
list i had a question to this draft and

725
00:30:25,919 --> 00:30:29,200
send this on the list

726
00:30:29,200 --> 00:30:32,720
so you

727
00:30:32,720 --> 00:30:34,480
implement something which is more

728
00:30:34,480 --> 00:30:38,000
advanced than one plus one protection

729
00:30:38,000 --> 00:30:41,520
so why do you think uh the complexity of

730
00:30:41,520 --> 00:30:45,279
a pre-op function

731
00:30:45,520 --> 00:30:48,240
has a benefit comparing to one plus one

732
00:30:48,240 --> 00:30:49,279
protection

733
00:30:49,279 --> 00:30:51,360
because oneplus 1 protection is much

734
00:30:51,360 --> 00:30:52,720
simpler

735
00:30:52,720 --> 00:30:55,760
the merging node selects the working

736
00:30:55,760 --> 00:30:56,480
path

737
00:30:56,480 --> 00:30:59,760
and one path is

738
00:31:00,159 --> 00:31:03,200
backup the redundancy node

739
00:31:03,200 --> 00:31:06,080
sends data on both paths and the merging

740
00:31:06,080 --> 00:31:07,200
nodes

741
00:31:07,200 --> 00:31:11,120
picks up data only from a working path

742
00:31:11,120 --> 00:31:14,240
if the working path fails it switches to

743
00:31:14,240 --> 00:31:17,519
the other feed here you do packet by

744
00:31:17,519 --> 00:31:18,720
packet

745
00:31:18,720 --> 00:31:22,640
selection from uh

746
00:31:22,640 --> 00:31:25,679
two or more paths but

747
00:31:25,679 --> 00:31:29,919
it comes with a lot of complexity

748
00:31:31,840 --> 00:31:35,200
yeah but um actually i have i've never

749
00:31:35,200 --> 00:31:38,559
um compared this to uh together because

750
00:31:38,559 --> 00:31:39,120
there are

751
00:31:39,120 --> 00:31:41,840
there are actually different mechanisms

752
00:31:41,840 --> 00:31:44,080
um

753
00:31:44,080 --> 00:31:47,519
yeah i i i i cannot

754
00:31:47,519 --> 00:31:50,720
give you some um comparison result

755
00:31:50,720 --> 00:31:53,519
about this because i've never um

756
00:31:53,519 --> 00:31:54,960
considered they are they

757
00:31:54,960 --> 00:31:56,720
they are they are the same or they have

758
00:31:56,720 --> 00:31:58,840
the same effect

759
00:31:58,840 --> 00:32:01,360
um yeah

760
00:32:01,360 --> 00:32:04,000
but um i think i yeah maybe we can

761
00:32:04,000 --> 00:32:05,840
discuss the in the middle list

762
00:32:05,840 --> 00:32:08,240
yeah uh currently have left no answer

763
00:32:08,240 --> 00:32:09,360
there

764
00:32:09,360 --> 00:32:15,840
yeah thank you fair enough ron

765
00:32:20,640 --> 00:32:22,799
ron if you have a question asked quickly

766
00:32:22,799 --> 00:32:24,320
otherwise we're going to

767
00:32:24,320 --> 00:32:27,519
move on to the next slides three i was

768
00:32:27,519 --> 00:32:28,559
on mute

769
00:32:28,559 --> 00:32:32,799
um this this proposal makes the merging

770
00:32:32,799 --> 00:32:34,399
nodes stateful

771
00:32:34,399 --> 00:32:36,480
the merging node has a finite amount of

772
00:32:36,480 --> 00:32:37,679
memory to

773
00:32:37,679 --> 00:32:39,919
maintain that state what happens when

774
00:32:39,919 --> 00:32:43,840
that memory gets overrun

775
00:32:44,480 --> 00:32:48,000
um what specific

776
00:32:48,000 --> 00:32:51,519
um state do you mean i mean the to st

777
00:32:51,519 --> 00:32:54,640
the state of the packet

778
00:32:57,679 --> 00:33:00,799
a copy of it before

779
00:33:01,440 --> 00:33:03,360
yeah i think that you mentioned there's

780
00:33:03,360 --> 00:33:05,440
a actually there should be a sliding

781
00:33:05,440 --> 00:33:10,159
window there

782
00:33:10,159 --> 00:33:13,200
um i'm not sure if you mentioned this it

783
00:33:13,200 --> 00:33:13,600
is

784
00:33:13,600 --> 00:33:15,679
it is really related to the sliding

785
00:33:15,679 --> 00:33:16,720
window that

786
00:33:16,720 --> 00:33:19,919
how you compare the um yeah

787
00:33:19,919 --> 00:33:21,919
how you compare the the the sequence

788
00:33:21,919 --> 00:33:24,960
number with uh within the

789
00:33:24,960 --> 00:33:27,200
amount of the amount of the package

790
00:33:27,200 --> 00:33:29,360
right

791
00:33:29,360 --> 00:33:31,519
well there is some policy stuff on later

792
00:33:31,519 --> 00:33:33,840
slides ron i think we'll need to go into

793
00:33:33,840 --> 00:33:35,840
more detail on this on the list

794
00:33:35,840 --> 00:33:38,559
mock quickly we're running over time and

795
00:33:38,559 --> 00:33:39,360
i want to give

796
00:33:39,360 --> 00:33:41,200
fan the time to cover the rest of her

797
00:33:41,200 --> 00:33:43,600
slides but go ahead mike

798
00:33:43,600 --> 00:33:45,840
i think there uh there's a supposed to

799
00:33:45,840 --> 00:33:47,519
be a controller to configure us

800
00:33:47,519 --> 00:33:49,760
as a policy on the merchandise so you

801
00:33:49,760 --> 00:33:50,559
should know

802
00:33:50,559 --> 00:33:52,480
what's what's ability of the emerging

803
00:33:52,480 --> 00:33:54,399
nodes so it will not let the

804
00:33:54,399 --> 00:33:56,880
imaginary or overwrong if the memory

805
00:33:56,880 --> 00:33:58,559
cannot support so many

806
00:33:58,559 --> 00:34:02,080
flow so i think there need a way for the

807
00:34:02,080 --> 00:34:04,880
for the container to to configure

808
00:34:04,880 --> 00:34:05,519
whether

809
00:34:05,519 --> 00:34:07,440
how many how many flows i can support on

810
00:34:07,440 --> 00:34:10,320
the marginal

811
00:34:12,879 --> 00:34:15,918
yeah i i agree i think that is something

812
00:34:15,918 --> 00:34:18,079
um because this this draft is the only

813
00:34:18,079 --> 00:34:19,119
current uh

814
00:34:19,119 --> 00:34:22,239
cover the the data plane uh part i think

815
00:34:22,239 --> 00:34:23,599
they must be have some

816
00:34:23,599 --> 00:34:27,199
uh extra um yet they will have some

817
00:34:27,199 --> 00:34:30,159
uh specification on on the part that

818
00:34:30,159 --> 00:34:30,879
when

819
00:34:30,879 --> 00:34:34,239
about about the issue john uh

820
00:34:34,239 --> 00:34:37,439
raised it yes

821
00:34:37,679 --> 00:34:40,480
uh next please

822
00:34:45,440 --> 00:34:48,560
um so it is the updated one okay

823
00:34:48,560 --> 00:34:50,960
uh yes the second option is the

824
00:34:50,960 --> 00:34:52,399
difference is just when uh

825
00:34:52,399 --> 00:34:54,879
where you you assign the flow id and the

826
00:34:54,879 --> 00:34:55,918
sequence number

827
00:34:55,918 --> 00:34:59,040
because on the on in this option that's

828
00:34:59,040 --> 00:35:01,040
the flow identification the sequence

829
00:35:01,040 --> 00:35:03,200
number is only used between the arm node

830
00:35:03,200 --> 00:35:04,400
and the m node

831
00:35:04,400 --> 00:35:07,520
so that's the two and two

832
00:35:07,520 --> 00:35:10,880
um choices that you you can use this um

833
00:35:10,880 --> 00:35:13,440
redundancy protection we'll use it from

834
00:35:13,440 --> 00:35:14,160
end to end

835
00:35:14,160 --> 00:35:17,280
or you use it as a part of the as a as a

836
00:35:17,280 --> 00:35:17,839
kind of

837
00:35:17,839 --> 00:35:22,400
uh service next please

838
00:35:23,599 --> 00:35:25,599
yes and the second the second there's

839
00:35:25,599 --> 00:35:27,119
another draft that we

840
00:35:27,119 --> 00:35:29,920
we specified how the how the flow

841
00:35:29,920 --> 00:35:31,839
identification and sequence number are

842
00:35:31,839 --> 00:35:35,200
encapsulated in the uh in the in uh

843
00:35:35,200 --> 00:35:38,960
in an srv srh optional trv

844
00:35:38,960 --> 00:35:42,160
and so here we give this uh this

845
00:35:42,160 --> 00:35:45,359
this proposal there and um

846
00:35:45,359 --> 00:35:47,760
from the from the feedback from six men

847
00:35:47,760 --> 00:35:48,480
that

848
00:35:48,480 --> 00:35:51,119
they think that we should uh change this

849
00:35:51,119 --> 00:35:51,839
draft

850
00:35:51,839 --> 00:35:54,160
back to spring because spring has

851
00:35:54,160 --> 00:35:54,880
already

852
00:35:54,880 --> 00:35:58,240
uh can give these um

853
00:35:58,240 --> 00:36:01,440
can have the uh

854
00:36:01,440 --> 00:36:04,560
the power to give us the allocation of

855
00:36:04,560 --> 00:36:05,119
this

856
00:36:05,119 --> 00:36:09,520
optional tl srh optional tre

857
00:36:09,599 --> 00:36:13,839
next please

858
00:36:14,720 --> 00:36:17,119
yes here with that actually we we define

859
00:36:17,119 --> 00:36:17,760
this

860
00:36:17,760 --> 00:36:21,040
redundancy policy uh uh um

861
00:36:21,040 --> 00:36:25,280
and through the tuple that there is a

862
00:36:25,280 --> 00:36:27,440
redundancy node and redundancy id and

863
00:36:27,440 --> 00:36:29,440
the margin node

864
00:36:29,440 --> 00:36:31,680
there will be there are some more

865
00:36:31,680 --> 00:36:32,800
details about this

866
00:36:32,800 --> 00:36:35,440
uh the specification of the redundancy

867
00:36:35,440 --> 00:36:37,920
policy

868
00:36:38,320 --> 00:36:41,760
next please i think

869
00:36:41,760 --> 00:36:44,720
yeah uh actually from the from last

870
00:36:44,720 --> 00:36:45,119
since

871
00:36:45,119 --> 00:36:47,680
last itf that we have already uh refined

872
00:36:47,680 --> 00:36:48,800
this solution

873
00:36:48,800 --> 00:36:50,960
and then we come back with the with the

874
00:36:50,960 --> 00:36:51,839
optional

875
00:36:51,839 --> 00:36:54,960
options of the solutions there and we we

876
00:36:54,960 --> 00:36:56,800
try to refine this solution

877
00:36:56,800 --> 00:37:00,400
and up and also specify the uh the isrh

878
00:37:00,400 --> 00:37:02,079
encapsulation

879
00:37:02,079 --> 00:37:05,760
and yeah i think that next step was

880
00:37:05,760 --> 00:37:07,599
we'll specify the redundancy policy

881
00:37:07,599 --> 00:37:08,800
another draft

882
00:37:08,800 --> 00:37:11,839
with more details and

883
00:37:11,839 --> 00:37:14,880
yes and we we want we want we seek for

884
00:37:14,880 --> 00:37:16,480
the collaborations like

885
00:37:16,480 --> 00:37:19,119
focusing on the uh uh segment

886
00:37:19,119 --> 00:37:20,079
specification

887
00:37:20,079 --> 00:37:22,720
in the sr and plc data plane and also

888
00:37:22,720 --> 00:37:23,680
there are some

889
00:37:23,680 --> 00:37:26,640
uh discussion has already been uh erased

890
00:37:26,640 --> 00:37:27,119
there

891
00:37:27,119 --> 00:37:29,359
in the mailing list about the flow id

892
00:37:29,359 --> 00:37:31,200
flow flow identification the sequence

893
00:37:31,200 --> 00:37:31,760
number

894
00:37:31,760 --> 00:37:34,240
uh i would like to continue with the

895
00:37:34,240 --> 00:37:37,200
discussion there

896
00:37:37,200 --> 00:37:40,720
okay uh greg

897
00:37:40,720 --> 00:37:43,760
you have a further question go ahead

898
00:37:43,760 --> 00:37:47,920
in regard to your plans to do in srm pls

899
00:37:47,920 --> 00:37:51,119
i can point to uh that net or in

900
00:37:51,119 --> 00:37:54,800
mpls data plane that it already supports

901
00:37:54,800 --> 00:37:57,200
uh packet replication uh duplicate

902
00:37:57,200 --> 00:37:59,119
elimination and order preservation

903
00:37:59,119 --> 00:38:00,079
function

904
00:38:00,079 --> 00:38:03,200
so i think that

905
00:38:03,200 --> 00:38:06,000
probably better to uh the discussion in

906
00:38:06,000 --> 00:38:07,440
the deadnet working group

907
00:38:07,440 --> 00:38:11,520
thank you okay

908
00:38:14,880 --> 00:38:18,480
go ahead next question the first one is

909
00:38:18,480 --> 00:38:18,880
about

910
00:38:18,880 --> 00:38:21,119
all the ordering function actually we

911
00:38:21,119 --> 00:38:23,119
have already considered that because it

912
00:38:23,119 --> 00:38:25,599
has already been defined in the net

913
00:38:25,599 --> 00:38:28,240
uh in this version we won't include it

914
00:38:28,240 --> 00:38:29,440
because uh

915
00:38:29,440 --> 00:38:32,480
for the simplest case the other is not

916
00:38:32,480 --> 00:38:33,920
necessary for

917
00:38:33,920 --> 00:38:36,400
merge node so perhaps in the following

918
00:38:36,400 --> 00:38:37,520
versions we can

919
00:38:37,520 --> 00:38:40,079
include the ordering functions to cover

920
00:38:40,079 --> 00:38:41,440
more scenarios

921
00:38:41,440 --> 00:38:43,200
and the second question about the

922
00:38:43,200 --> 00:38:45,280
oneplus one protection

923
00:38:45,280 --> 00:38:48,880
actually this redundant uh protection

924
00:38:48,880 --> 00:38:51,119
can

925
00:38:51,839 --> 00:38:55,599
provide a more uh high

926
00:38:55,599 --> 00:38:59,359
provided service for more high

927
00:38:59,440 --> 00:39:03,599
high ultra high requirement

928
00:39:03,599 --> 00:39:05,920
applications because there is no packing

929
00:39:05,920 --> 00:39:07,440
loss when the

930
00:39:07,440 --> 00:39:10,560
when the uh when the flows is switched

931
00:39:10,560 --> 00:39:12,160
from one part to the

932
00:39:12,160 --> 00:39:15,920
standby path so that can require

933
00:39:15,920 --> 00:39:18,640
satisfy the requirements for more uh

934
00:39:18,640 --> 00:39:19,920
maybe

935
00:39:19,920 --> 00:39:25,200
strict applications okay thank you

936
00:39:25,839 --> 00:39:28,000
greg if you want one more go ahead and

937
00:39:28,000 --> 00:39:29,440
then we've got to move on to the next

938
00:39:29,440 --> 00:39:30,960
presentation

939
00:39:30,960 --> 00:39:34,400
that i agree that uh packet replication

940
00:39:34,400 --> 00:39:38,240
uh functionality uh minimizes the packet

941
00:39:38,240 --> 00:39:39,280
loss

942
00:39:39,280 --> 00:39:42,960
uh it might not

943
00:39:42,960 --> 00:39:46,480
eliminate it completely and that's

944
00:39:46,480 --> 00:39:49,520
basically the idea why that net

945
00:39:49,520 --> 00:39:53,040
uh supports uh packet replication

946
00:39:53,040 --> 00:39:54,079
function

947
00:39:54,079 --> 00:39:57,440
uh but it comes at a cost

948
00:39:57,440 --> 00:40:00,640
so that's why i i brought it up in my

949
00:40:00,640 --> 00:40:02,000
earlier comment

950
00:40:02,000 --> 00:40:04,960
so that uh compare the cost and then uh

951
00:40:04,960 --> 00:40:06,400
versus the benefit

952
00:40:06,400 --> 00:40:10,079
and as uh rowan correctly pointed out

953
00:40:10,079 --> 00:40:12,240
it does create a state in the merging

954
00:40:12,240 --> 00:40:14,160
node because especially

955
00:40:14,160 --> 00:40:17,520
if you are doing order preservation

956
00:40:17,520 --> 00:40:21,200
and packets can be reordered so

957
00:40:21,200 --> 00:40:23,520
that comes with a lot of complexity

958
00:40:23,520 --> 00:40:24,720
thank you okay

959
00:40:24,720 --> 00:40:27,359
um zusang i don't think we can continue

960
00:40:27,359 --> 00:40:29,440
this conversation we are

961
00:40:29,440 --> 00:40:31,440
we're at twice the allocated time for

962
00:40:31,440 --> 00:40:32,560
this so

963
00:40:32,560 --> 00:40:34,960
we need to move on to the next item on

964
00:40:34,960 --> 00:40:36,800
the on the agenda

965
00:40:36,800 --> 00:40:39,599
yes strada is coming forward and uh

966
00:40:39,599 --> 00:40:41,440
bruno if we can switch to the seamless

967
00:40:41,440 --> 00:40:43,930
sr presentation

968
00:40:43,930 --> 00:40:47,069
[Music]

969
00:40:47,520 --> 00:40:50,480
yeah so um my name is shraddha hegde

970
00:40:50,480 --> 00:40:50,960
from

971
00:40:50,960 --> 00:40:53,119
juniper networks i would like to present

972
00:40:53,119 --> 00:40:54,560
seamless sr

973
00:40:54,560 --> 00:40:56,720
updates to seamless sr draft on behalf

974
00:40:56,720 --> 00:40:58,240
of my co-authors

975
00:40:58,240 --> 00:41:00,800
so we have presented this in ietf 108

976
00:41:00,800 --> 00:41:02,160
and 109

977
00:41:02,160 --> 00:41:05,680
and we got a comment that so the draft

978
00:41:05,680 --> 00:41:08,319
had three sections use cases

979
00:41:08,319 --> 00:41:10,319
requirements and solution

980
00:41:10,319 --> 00:41:13,040
so we got a comment that you know uh the

981
00:41:13,040 --> 00:41:14,640
use cases and requirements should be a

982
00:41:14,640 --> 00:41:16,560
separate document so

983
00:41:16,560 --> 00:41:18,319
in zero five version we split the

984
00:41:18,319 --> 00:41:19,680
document into two one

985
00:41:19,680 --> 00:41:21,440
document is covering use cases and

986
00:41:21,440 --> 00:41:23,760
requirements and another document is

987
00:41:23,760 --> 00:41:26,560
covering um

988
00:41:27,040 --> 00:41:30,720
solutions next slide please

989
00:41:31,040 --> 00:41:34,319
yeah so the first one is talking about

990
00:41:34,319 --> 00:41:36,319
the requirements and use cases

991
00:41:36,319 --> 00:41:38,880
the second one is about the solution

992
00:41:38,880 --> 00:41:41,680
next slide please

993
00:41:42,720 --> 00:41:46,079
so uh just a recap of uh

994
00:41:46,079 --> 00:41:50,240
the basic uh motivation for this

995
00:41:50,240 --> 00:41:53,280
seamless sr architecture so

996
00:41:53,280 --> 00:41:55,599
when the large networks organized into

997
00:41:55,599 --> 00:41:56,720
multiple domains

998
00:41:56,720 --> 00:42:00,079
and uh you know

999
00:42:00,079 --> 00:42:02,319
seamless mpls kind of architecture gives

1000
00:42:02,319 --> 00:42:04,480
an end-to-end path across these multiple

1001
00:42:04,480 --> 00:42:06,240
domains using

1002
00:42:06,240 --> 00:42:10,240
bgplu so um evolving requirements

1003
00:42:10,240 --> 00:42:13,599
um you know need multiple end-to-end

1004
00:42:13,599 --> 00:42:14,960
paths between

1005
00:42:14,960 --> 00:42:18,000
two end points in these multi-domain

1006
00:42:18,000 --> 00:42:18,800
networks

1007
00:42:18,800 --> 00:42:21,040
and seamless sr is trying to address

1008
00:42:21,040 --> 00:42:23,200
that and the solution

1009
00:42:23,200 --> 00:42:27,200
that cms sr is focusing on is a

1010
00:42:27,200 --> 00:42:29,119
completely distributed solution

1011
00:42:29,119 --> 00:42:32,160
so where there is no single entity which

1012
00:42:32,160 --> 00:42:34,240
which has the database of all these

1013
00:42:34,240 --> 00:42:35,359
domains and

1014
00:42:35,359 --> 00:42:37,680
uh computes the path it's more of a

1015
00:42:37,680 --> 00:42:40,400
distributed solution where the

1016
00:42:40,400 --> 00:42:42,839
paths across these domains get stitched

1017
00:42:42,839 --> 00:42:44,319
together

1018
00:42:44,319 --> 00:42:47,520
so in terms of requirements so we have

1019
00:42:47,520 --> 00:42:50,960
reorganized the use cases and

1020
00:42:50,960 --> 00:42:52,880
requirements section and clearly laid

1021
00:42:52,880 --> 00:42:53,599
out

1022
00:42:53,599 --> 00:42:55,119
the requirements categorize the

1023
00:42:55,119 --> 00:42:57,040
requirements into multiple categories

1024
00:42:57,040 --> 00:42:58,880
such as

1025
00:42:58,880 --> 00:43:01,040
asn domain requirements and sla

1026
00:43:01,040 --> 00:43:02,720
requirements

1027
00:43:02,720 --> 00:43:04,720
merger and migration requirement or

1028
00:43:04,720 --> 00:43:06,160
scalability

1029
00:43:06,160 --> 00:43:09,119
availability requirements and so on so

1030
00:43:09,119 --> 00:43:11,440
just to quickly cover

1031
00:43:11,440 --> 00:43:14,560
asn igp domain requirements so these are

1032
00:43:14,560 --> 00:43:15,440
different ways

1033
00:43:15,440 --> 00:43:17,680
the slide shows the different ways the

1034
00:43:17,680 --> 00:43:19,359
domains can be organized

1035
00:43:19,359 --> 00:43:21,440
we have covered the most common use

1036
00:43:21,440 --> 00:43:22,400
cases it's not

1037
00:43:22,400 --> 00:43:26,000
a exhaustive list of all the types all

1038
00:43:26,000 --> 00:43:27,359
the different ways

1039
00:43:27,359 --> 00:43:29,920
operators

1040
00:43:32,720 --> 00:43:34,880
deploy the multi-domain networks so the

1041
00:43:34,880 --> 00:43:36,560
first one is where there are multiple

1042
00:43:36,560 --> 00:43:39,359
ass and connected via ebgp

1043
00:43:39,359 --> 00:43:41,040
the second one is where there are

1044
00:43:41,040 --> 00:43:43,680
multiple igps and there is a common

1045
00:43:43,680 --> 00:43:44,720
border node

1046
00:43:44,720 --> 00:43:47,599
on which on the left side there is going

1047
00:43:47,599 --> 00:43:49,839
to be one igp and right side another igp

1048
00:43:49,839 --> 00:43:50,640
and the

1049
00:43:50,640 --> 00:43:52,640
end to end connection is via ibgp

1050
00:43:52,640 --> 00:43:54,960
sessions and there's a third

1051
00:43:54,960 --> 00:43:57,280
category where there are there's a

1052
00:43:57,280 --> 00:43:58,480
single as

1053
00:43:58,480 --> 00:44:01,839
if you see on the bottommost right side

1054
00:44:01,839 --> 00:44:03,440
diagram as1

1055
00:44:03,440 --> 00:44:06,079
is the as and there is domain one domain

1056
00:44:06,079 --> 00:44:07,440
two and domain three and there's no

1057
00:44:07,440 --> 00:44:08,720
common border node

1058
00:44:08,720 --> 00:44:11,440
and the um kind of endurant connectivity

1059
00:44:11,440 --> 00:44:13,680
is all via ibgp sessions

1060
00:44:13,680 --> 00:44:16,480
next slide please

1061
00:44:17,359 --> 00:44:19,760
yeah so this is uh tunneling

1062
00:44:19,760 --> 00:44:21,599
requirements like underlay tunnels what

1063
00:44:21,599 --> 00:44:22,560
all

1064
00:44:22,560 --> 00:44:25,920
different categories of tunnels

1065
00:44:25,920 --> 00:44:29,359
need to be supported i think run to next

1066
00:44:29,359 --> 00:44:30,079
slide i have

1067
00:44:30,079 --> 00:44:32,079
talked about it multiple times already

1068
00:44:32,079 --> 00:44:34,720
so next slide please

1069
00:44:34,720 --> 00:44:37,040
so various sla requirements again

1070
00:44:37,040 --> 00:44:38,640
latency bandwidth

1071
00:44:38,640 --> 00:44:40,800
in link node and domain inclusion

1072
00:44:40,800 --> 00:44:44,480
exclusion and end-to-end diverse paths

1073
00:44:44,480 --> 00:44:46,480
and constraint applicability to subset

1074
00:44:46,480 --> 00:44:48,319
of domains and service function chaining

1075
00:44:48,319 --> 00:44:49,680
is something that we cover in this

1076
00:44:49,680 --> 00:44:51,119
section

1077
00:44:51,119 --> 00:44:54,240
next slide please so

1078
00:44:54,240 --> 00:44:55,920
mergers and migration requirements

1079
00:44:55,920 --> 00:44:57,839
mainly focuses on

1080
00:44:57,839 --> 00:45:00,240
changing networks you know when evolving

1081
00:45:00,240 --> 00:45:01,119
networks and

1082
00:45:01,119 --> 00:45:03,599
requirements arising out of those

1083
00:45:03,599 --> 00:45:05,599
network evolution such as

1084
00:45:05,599 --> 00:45:07,520
during migrations you will have to have

1085
00:45:07,520 --> 00:45:10,400
the interoperability with bgplu

1086
00:45:10,400 --> 00:45:12,640
and we should you should also uh have

1087
00:45:12,640 --> 00:45:13,839
the

1088
00:45:13,839 --> 00:45:15,760
native support for best effort paths

1089
00:45:15,760 --> 00:45:17,280
like if we come up with some new

1090
00:45:17,280 --> 00:45:19,119
extension that should also have support

1091
00:45:19,119 --> 00:45:19,839
for

1092
00:45:19,839 --> 00:45:23,040
uh end to end ability to create best

1093
00:45:23,040 --> 00:45:26,400
effort paths end to end and

1094
00:45:26,400 --> 00:45:27,920
as the network evolves we should not

1095
00:45:27,920 --> 00:45:29,440
have the requirement of running two

1096
00:45:29,440 --> 00:45:31,520
different families

1097
00:45:31,520 --> 00:45:34,480
um option a and option b use cases and

1098
00:45:34,480 --> 00:45:34,960
also

1099
00:45:34,960 --> 00:45:37,520
in case of mergers there may be a

1100
00:45:37,520 --> 00:45:38,800
necessity to you know

1101
00:45:38,800 --> 00:45:42,000
the color mapping may vary from one

1102
00:45:42,000 --> 00:45:43,760
domain to another domain so there is a

1103
00:45:43,760 --> 00:45:44,640
need to

1104
00:45:44,640 --> 00:45:47,440
have a ability to translate that intent

1105
00:45:47,440 --> 00:45:48,560
from one domain to another

1106
00:45:48,560 --> 00:45:51,599
domain and then there is also a

1107
00:45:51,599 --> 00:45:55,040
requirement for um you know interrupt

1108
00:45:55,040 --> 00:45:57,359
with other tunneling technologies like

1109
00:45:57,359 --> 00:45:59,920
your ability to do srv six in one domain

1110
00:45:59,920 --> 00:46:00,240
and

1111
00:46:00,240 --> 00:46:02,560
mpls in another domain is kind of an

1112
00:46:02,560 --> 00:46:03,440
example

1113
00:46:03,440 --> 00:46:06,160
next slide please

1114
00:46:07,599 --> 00:46:10,800
so uh this slide lists down the

1115
00:46:10,800 --> 00:46:13,839
scalability aspects support up to one

1116
00:46:13,839 --> 00:46:15,200
million nodes access

1117
00:46:15,200 --> 00:46:17,680
low i mean devices having low access

1118
00:46:17,680 --> 00:46:18,880
node capabilities

1119
00:46:18,880 --> 00:46:23,280
and scalable response to network events

1120
00:46:23,280 --> 00:46:25,200
and automatic filtering of routes on

1121
00:46:25,200 --> 00:46:27,920
access nodes

1122
00:46:27,920 --> 00:46:29,760
an ability to reduce fib scale on the

1123
00:46:29,760 --> 00:46:33,520
border nodes next slide please

1124
00:46:33,680 --> 00:46:35,440
yeah we also cover other requirements

1125
00:46:35,440 --> 00:46:36,800
like protection

1126
00:46:36,800 --> 00:46:38,640
end-to-end protection including

1127
00:46:38,640 --> 00:46:40,480
intra-domain as well as border node and

1128
00:46:40,480 --> 00:46:43,040
egress protection

1129
00:46:43,040 --> 00:46:44,640
operations and automation and i would

1130
00:46:44,640 --> 00:46:46,319
like more input from

1131
00:46:46,319 --> 00:46:48,319
operators community on operations so

1132
00:46:48,319 --> 00:46:49,599
right now we have covered

1133
00:46:49,599 --> 00:46:52,560
like counters and ability to ping and

1134
00:46:52,560 --> 00:46:54,079
trace route

1135
00:46:54,079 --> 00:46:57,520
and um it will be useful to see

1136
00:46:57,520 --> 00:46:59,359
what what requirements people come up

1137
00:46:59,359 --> 00:47:00,560
here i mean if if

1138
00:47:00,560 --> 00:47:02,800
operators have to deploy this and have

1139
00:47:02,800 --> 00:47:04,720
to debug this at 3 am in the morning

1140
00:47:04,720 --> 00:47:06,720
what would they like to see and

1141
00:47:06,720 --> 00:47:08,400
give that input to the requirements

1142
00:47:08,400 --> 00:47:10,640
document and we also cover

1143
00:47:10,640 --> 00:47:12,800
various ways of traffic steering

1144
00:47:12,800 --> 00:47:13,760
mechanisms and

1145
00:47:13,760 --> 00:47:15,440
interaction with other approaches like

1146
00:47:15,440 --> 00:47:18,400
existing centralized approaches

1147
00:47:18,400 --> 00:47:20,400
so we also cover multicast tunneling

1148
00:47:20,400 --> 00:47:22,640
requirements like if the network is

1149
00:47:22,640 --> 00:47:24,480
built this way and is getting operated

1150
00:47:24,480 --> 00:47:25,119
this way

1151
00:47:25,119 --> 00:47:27,440
how would the multicast tunneling and

1152
00:47:27,440 --> 00:47:29,200
what are the requirements

1153
00:47:29,200 --> 00:47:31,680
for getting an end-to-end multicast

1154
00:47:31,680 --> 00:47:33,760
solution

1155
00:47:33,760 --> 00:47:37,440
next slide please yes so we will

1156
00:47:37,440 --> 00:47:40,480
we request more review and comments and

1157
00:47:40,480 --> 00:47:42,800
uh so recently there is also another

1158
00:47:42,800 --> 00:47:45,599
draft um which is talking about similar

1159
00:47:45,599 --> 00:47:48,480
use cases in bgp car problem statement

1160
00:47:48,480 --> 00:47:49,040
and

1161
00:47:49,040 --> 00:47:52,240
we are in discussion with authors of bgp

1162
00:47:52,240 --> 00:47:54,640
car problem statement

1163
00:47:54,640 --> 00:48:06,240
that's all any questions comments

1164
00:48:06,240 --> 00:48:10,000
or i wait someone to call me

1165
00:48:12,000 --> 00:48:15,839
daniel go ahead thank you

1166
00:48:15,839 --> 00:48:19,040
good presentation there are there is

1167
00:48:19,040 --> 00:48:20,240
another um

1168
00:48:20,240 --> 00:48:23,920
srmps to a services document

1169
00:48:23,920 --> 00:48:27,920
as well which i happened to also water

1170
00:48:27,920 --> 00:48:31,040
and i wonder if um

1171
00:48:31,040 --> 00:48:36,160
you could have a economizations also

1172
00:48:36,160 --> 00:48:37,920
on your point that you're making in the

1173
00:48:37,920 --> 00:48:40,960
next step to also try and merge and and

1174
00:48:40,960 --> 00:48:45,200
hopefully not having another design team

1175
00:48:45,200 --> 00:48:48,240
to get together to uh

1176
00:48:48,240 --> 00:48:49,920
you know define which one we're going to

1177
00:48:49,920 --> 00:48:51,760
pick at the end

1178
00:48:51,760 --> 00:48:54,480
would you be interested to have this

1179
00:48:54,480 --> 00:48:55,359
conversation

1180
00:48:55,359 --> 00:48:58,800
with on the other draft it's uh

1181
00:48:58,800 --> 00:49:03,200
it's srmps and it's isn't the working

1182
00:49:03,200 --> 00:49:06,240
the draft yeah so dan this particular

1183
00:49:06,240 --> 00:49:09,119
draft is mostly covering requirements

1184
00:49:09,119 --> 00:49:12,000
so i would i would first like to cover

1185
00:49:12,000 --> 00:49:13,680
what are the requirements in terms of

1186
00:49:13,680 --> 00:49:16,640
srv6 and srm pls interrupt

1187
00:49:16,640 --> 00:49:19,440
uh yeah solution discussion on solution

1188
00:49:19,440 --> 00:49:21,839
um

1189
00:49:22,319 --> 00:49:24,079
that's that's definite that definitely

1190
00:49:24,079 --> 00:49:25,599
should happen but

1191
00:49:25,599 --> 00:49:27,440
let's at least close on requirements

1192
00:49:27,440 --> 00:49:30,000
what what are the requirements for you

1193
00:49:30,000 --> 00:49:30,960
know this

1194
00:49:30,960 --> 00:49:32,880
at a high level you can say srv6 and

1195
00:49:32,880 --> 00:49:35,119
mpls interrupt but it would be useful to

1196
00:49:35,119 --> 00:49:35,599
cover

1197
00:49:35,599 --> 00:49:39,520
the details as well so the car draft she

1198
00:49:39,520 --> 00:49:41,599
mentions here is the next thing on the

1199
00:49:41,599 --> 00:49:43,440
agenda and i believe

1200
00:49:43,440 --> 00:49:45,280
the interworking draft you referred to

1201
00:49:45,280 --> 00:49:47,280
daniel is the one after that on the

1202
00:49:47,280 --> 00:49:49,040
agenda so we will be going through all

1203
00:49:49,040 --> 00:49:50,319
of this

1204
00:49:50,319 --> 00:49:53,760
okay good i gotta come back then

1205
00:49:53,760 --> 00:49:59,839
okay keng lee

1206
00:50:00,880 --> 00:50:03,839
go ahead changly

1207
00:50:03,920 --> 00:50:05,760
do you have any implementation or

1208
00:50:05,760 --> 00:50:08,400
deployment of this

1209
00:50:08,400 --> 00:50:12,319
extension uh yeah so

1210
00:50:12,319 --> 00:50:14,240
what i talked about is a requirement

1211
00:50:14,240 --> 00:50:16,400
yeah but we do have a solution document

1212
00:50:16,400 --> 00:50:17,599
that uh

1213
00:50:17,599 --> 00:50:20,160
that covers um how these requirements

1214
00:50:20,160 --> 00:50:22,480
are stated in this document can be

1215
00:50:22,480 --> 00:50:26,160
achieved using a bgp protocol extension

1216
00:50:26,160 --> 00:50:28,960
with bgpct and yes we do have

1217
00:50:28,960 --> 00:50:31,920
implementation and

1218
00:50:32,000 --> 00:50:34,480
some testing going on in the lab and

1219
00:50:34,480 --> 00:50:35,760
this was presented

1220
00:50:35,760 --> 00:50:40,319
in idr as well as

1221
00:50:40,319 --> 00:50:43,599
yesterday before yesterday

1222
00:50:43,599 --> 00:50:47,520
okay is he done jimmy

1223
00:50:49,680 --> 00:50:53,280
i'd like to ask her can you hear me

1224
00:50:53,280 --> 00:50:56,800
yes go ahead yeah my

1225
00:50:56,800 --> 00:51:00,160
question is can this uh do you plan to

1226
00:51:00,160 --> 00:51:01,440
support srv6

1227
00:51:01,440 --> 00:51:05,520
in this uh like a architectural

1228
00:51:05,520 --> 00:51:08,720
in this problem space yes definitely so

1229
00:51:08,720 --> 00:51:11,680
we we have already listed as an srv6

1230
00:51:11,680 --> 00:51:14,880
both srv6 end to end as well as uh

1231
00:51:14,880 --> 00:51:18,319
srv6 to mpls interop use cases

1232
00:51:18,319 --> 00:51:21,520
yeah definitely okay so the draft name

1233
00:51:21,520 --> 00:51:22,640
may

1234
00:51:22,640 --> 00:51:25,119
may be better to change to not just at

1235
00:51:25,119 --> 00:51:25,680
least the

1236
00:51:25,680 --> 00:51:29,520
amperes so that

1237
00:51:29,520 --> 00:51:32,559
the name of the draft is seamless sr

1238
00:51:32,559 --> 00:51:36,880
um so it covers srm pls as well as sr

1239
00:51:36,880 --> 00:51:40,000
uh v6

1240
00:51:41,359 --> 00:51:44,800
okay okay we're i think we've covered

1241
00:51:44,800 --> 00:51:46,880
the material let's move on to the next

1242
00:51:46,880 --> 00:51:48,480
one namely the car

1243
00:51:48,480 --> 00:51:51,359
problem statement draft i i see the

1244
00:51:51,359 --> 00:51:53,119
presenter is already

1245
00:51:53,119 --> 00:51:55,599
online and i will avoid inappropriately

1246
00:51:55,599 --> 00:51:56,800
pronouncing your name

1247
00:51:56,800 --> 00:52:00,000
my apologies that i can't bruno you

1248
00:52:00,000 --> 00:52:01,599
bring up

1249
00:52:01,599 --> 00:52:05,280
the car slide

1250
00:52:05,280 --> 00:52:08,079
thanks joel can you hear me folks yes we

1251
00:52:08,079 --> 00:52:08,720
can hear you

1252
00:52:08,720 --> 00:52:11,839
oh okay great uh thank you um hi

1253
00:52:11,839 --> 00:52:12,480
everyone

1254
00:52:12,480 --> 00:52:14,880
i'm dhananjay rao from cisco and i will

1255
00:52:14,880 --> 00:52:17,200
be presenting on behalf of my co-authors

1256
00:52:17,200 --> 00:52:18,880
and contributors on the

1257
00:52:18,880 --> 00:52:20,559
bgp color aware routing problem

1258
00:52:20,559 --> 00:52:21,920
statement draft

1259
00:52:21,920 --> 00:52:24,559
this draft was also presented at idr and

1260
00:52:24,559 --> 00:52:25,280
best

1261
00:52:25,280 --> 00:52:28,000
next slide please

1262
00:52:28,559 --> 00:52:31,359
the objective of bgp color aware routing

1263
00:52:31,359 --> 00:52:32,640
is to use bgp

1264
00:52:32,640 --> 00:52:35,839
to establish an end to end intent aware

1265
00:52:35,839 --> 00:52:37,839
path across multiple domains

1266
00:52:37,839 --> 00:52:41,680
both igp and bgp an example of an intent

1267
00:52:41,680 --> 00:52:42,000
is

1268
00:52:42,000 --> 00:52:47,520
a low latency path next slide please

1269
00:52:47,520 --> 00:52:49,040
a quick reminder i mean here in the

1270
00:52:49,040 --> 00:52:51,200
spring working group there is a solution

1271
00:52:51,200 --> 00:52:52,160
defined for

1272
00:52:52,160 --> 00:52:54,640
inter-domain intent or sla based path

1273
00:52:54,640 --> 00:52:55,760
computation uh

1274
00:52:55,760 --> 00:52:58,880
using srte this is a mature and widely

1275
00:52:58,880 --> 00:52:59,440
deployed

1276
00:52:59,440 --> 00:53:02,720
solution the solution document defines

1277
00:53:02,720 --> 00:53:03,119
the

1278
00:53:03,119 --> 00:53:06,800
notion of color to represent intent in

1279
00:53:06,800 --> 00:53:07,440
the network

1280
00:53:07,440 --> 00:53:10,480
control plane and we you know intend to

1281
00:53:10,480 --> 00:53:11,359
use the

1282
00:53:11,359 --> 00:53:15,680
same next slide please

1283
00:53:15,680 --> 00:53:17,920
uh we just see here an illustration of

1284
00:53:17,920 --> 00:53:18,720
the color

1285
00:53:18,720 --> 00:53:22,000
um uh concept uh an egress p e3

1286
00:53:22,000 --> 00:53:24,880
tags a vpn route with color c1 uh

1287
00:53:24,880 --> 00:53:27,119
expressing a request for a particular

1288
00:53:27,119 --> 00:53:28,160
intent

1289
00:53:28,160 --> 00:53:30,720
any ingress p such as e1 that installs

1290
00:53:30,720 --> 00:53:32,079
this route

1291
00:53:32,079 --> 00:53:35,599
will try to steer traffic for this

1292
00:53:35,599 --> 00:53:40,400
vpn route through a path to e3 for color

1293
00:53:40,400 --> 00:53:44,800
c1 color is signaled using the bgp color

1294
00:53:44,800 --> 00:53:46,400
extended community

1295
00:53:46,400 --> 00:53:49,119
next side please

1296
00:53:50,400 --> 00:53:53,760
in the sr policy solution the ingress

1297
00:53:53,760 --> 00:53:54,880
pe1

1298
00:53:54,880 --> 00:53:57,200
may request a srpce to compute the

1299
00:53:57,200 --> 00:53:59,680
interdomain path since the srpc

1300
00:53:59,680 --> 00:54:01,280
is the one aware of the intel domain

1301
00:54:01,280 --> 00:54:03,920
topology uh the srpc

1302
00:54:03,920 --> 00:54:05,920
will return computer path for that

1303
00:54:05,920 --> 00:54:07,359
particular intent and

1304
00:54:07,359 --> 00:54:10,400
return a label or a sid stack that the

1305
00:54:10,400 --> 00:54:12,000
ingress pe will then install and use in

1306
00:54:12,000 --> 00:54:12,960
the data plane

1307
00:54:12,960 --> 00:54:15,119
the rest of the network nodes uh are

1308
00:54:15,119 --> 00:54:17,119
stateless uh you know for this

1309
00:54:17,119 --> 00:54:20,880
path next side please

1310
00:54:22,000 --> 00:54:24,559
now here in with bgp color aware routing

1311
00:54:24,559 --> 00:54:26,800
um we have the same automated steering

1312
00:54:26,800 --> 00:54:29,599
uh you know uh requirement as the srpce

1313
00:54:29,599 --> 00:54:30,319
case

1314
00:54:30,319 --> 00:54:32,319
only here the color aware path is set up

1315
00:54:32,319 --> 00:54:34,319
using a bgp hop by hop route

1316
00:54:34,319 --> 00:54:35,359
distribution and

1317
00:54:35,359 --> 00:54:38,480
uh you know best path computation um

1318
00:54:38,480 --> 00:54:42,000
in this example route uh to e3 for color

1319
00:54:42,000 --> 00:54:42,640
c1

1320
00:54:42,640 --> 00:54:44,960
uh is originated uh say from a border

1321
00:54:44,960 --> 00:54:46,319
node 32

1322
00:54:46,319 --> 00:54:49,119
um may be redistributed from an igp flex

1323
00:54:49,119 --> 00:54:49,760
algo

1324
00:54:49,760 --> 00:54:51,520
it's propagated by hop across the

1325
00:54:51,520 --> 00:54:53,760
domains till it you know reaches

1326
00:54:53,760 --> 00:54:57,440
e1 at each hop a best path is computed

1327
00:54:57,440 --> 00:55:00,640
for that intent you know recursing over

1328
00:55:00,640 --> 00:55:01,680
the appropriate

1329
00:55:01,680 --> 00:55:05,839
intra-domain color path a vpn route that

1330
00:55:05,839 --> 00:55:06,319
is

1331
00:55:06,319 --> 00:55:09,680
uh you know colored uh for with c1 will

1332
00:55:09,680 --> 00:55:11,920
then get steered via this uh you know

1333
00:55:11,920 --> 00:55:14,480
bgp e3 comma c1 route

1334
00:55:14,480 --> 00:55:17,440
uh next slide please

1335
00:55:17,599 --> 00:55:20,880
uh here we see you know an example of

1336
00:55:20,880 --> 00:55:23,520
multiple intents so for the same uh you

1337
00:55:23,520 --> 00:55:25,040
know egress p e3

1338
00:55:25,040 --> 00:55:27,680
we have two color aware routes c3 c1 and

1339
00:55:27,680 --> 00:55:29,040
e3 c2

1340
00:55:29,040 --> 00:55:31,119
uh they are independent routes you know

1341
00:55:31,119 --> 00:55:32,559
and may uh

1342
00:55:32,559 --> 00:55:35,440
end up getting set up via completely

1343
00:55:35,440 --> 00:55:37,760
different paths through the inter-domain

1344
00:55:37,760 --> 00:55:40,480
network uh to complete the example we

1345
00:55:40,480 --> 00:55:42,400
have two vpn routes one

1346
00:55:42,400 --> 00:55:46,880
um colored with c1 the other one with c2

1347
00:55:46,880 --> 00:55:49,680
each route will respectively get uh

1348
00:55:49,680 --> 00:55:51,520
resolved and steered via the

1349
00:55:51,520 --> 00:55:55,040
appropriate uh e3 comma c you know

1350
00:55:55,040 --> 00:55:59,440
star route next slide please

1351
00:55:59,440 --> 00:56:01,680
um when we come to looking at the

1352
00:56:01,680 --> 00:56:03,119
deployment requirements

1353
00:56:03,119 --> 00:56:05,920
the reference you know topologies are

1354
00:56:05,920 --> 00:56:06,559
well known

1355
00:56:06,559 --> 00:56:09,760
um you can have multi-igp or multi-as uh

1356
00:56:09,760 --> 00:56:13,839
designs uh but a significant uh

1357
00:56:13,839 --> 00:56:17,440
difference is the increase in scale um

1358
00:56:17,440 --> 00:56:19,520
you know there are some networks where

1359
00:56:19,520 --> 00:56:21,920
the num the scale can go into

1360
00:56:21,920 --> 00:56:24,079
the order of hundreds of thousands of uh

1361
00:56:24,079 --> 00:56:25,359
you know pes in the

1362
00:56:25,359 --> 00:56:28,079
network um and then we also have the

1363
00:56:28,079 --> 00:56:29,119
case where

1364
00:56:29,119 --> 00:56:31,680
we may need multiple intents to be

1365
00:56:31,680 --> 00:56:32,720
supported in the

1366
00:56:32,720 --> 00:56:34,559
network uh you know some common ones are

1367
00:56:34,559 --> 00:56:35,839
listed here

1368
00:56:35,839 --> 00:56:37,920
um you know we have best effort but then

1369
00:56:37,920 --> 00:56:39,760
there's low latency

1370
00:56:39,760 --> 00:56:42,319
um two disjoint planes and then an

1371
00:56:42,319 --> 00:56:43,520
avoidance use case

1372
00:56:43,520 --> 00:56:46,000
uh perhaps with you know links nodes or

1373
00:56:46,000 --> 00:56:47,200
or domains

1374
00:56:47,200 --> 00:56:49,440
so just with this reference example we

1375
00:56:49,440 --> 00:56:51,839
see the number of routes in the network

1376
00:56:51,839 --> 00:56:55,280
um can go up to um you know 1.5 million

1377
00:56:55,280 --> 00:56:59,839
routes next site please

1378
00:57:00,079 --> 00:57:02,799
here we just list uh you know a number

1379
00:57:02,799 --> 00:57:03,359
of other

1380
00:57:03,359 --> 00:57:07,359
intent uh use cases um the draft goes

1381
00:57:07,359 --> 00:57:08,000
into

1382
00:57:08,000 --> 00:57:10,319
you know detail in terms of illustrating

1383
00:57:10,319 --> 00:57:12,640
the key ones with reference topologies

1384
00:57:12,640 --> 00:57:15,440
next slide please

1385
00:57:16,640 --> 00:57:18,240
the focus of this problem statement

1386
00:57:18,240 --> 00:57:19,680
draft has been to have

1387
00:57:19,680 --> 00:57:23,040
uh you know a concise technical analysis

1388
00:57:23,040 --> 00:57:24,240
of the use cases

1389
00:57:24,240 --> 00:57:26,559
and deployment constraints and then

1390
00:57:26,559 --> 00:57:27,920
enumerate the resulting

1391
00:57:27,920 --> 00:57:31,119
protocol and design requirements uh some

1392
00:57:31,119 --> 00:57:32,480
key ones to call out

1393
00:57:32,480 --> 00:57:34,559
of course consistency with the deployed

1394
00:57:34,559 --> 00:57:35,520
srbc a

1395
00:57:35,520 --> 00:57:37,839
policy-based solution as well as

1396
00:57:37,839 --> 00:57:40,079
coexistence and interworking

1397
00:57:40,079 --> 00:57:41,839
a key here is the you know the use of

1398
00:57:41,839 --> 00:57:44,480
color to drive automated steering

1399
00:57:44,480 --> 00:57:47,520
uh we also extend the problems space

1400
00:57:47,520 --> 00:57:50,079
um intentable paths need to be supported

1401
00:57:50,079 --> 00:57:50,960
in the vpn

1402
00:57:50,960 --> 00:57:53,040
service layer as well and needs to take

1403
00:57:53,040 --> 00:57:55,280
into account nfe service chain

1404
00:57:55,280 --> 00:57:59,200
integration next slide please

1405
00:57:59,200 --> 00:58:00,480
there are a number of deployment

1406
00:58:00,480 --> 00:58:02,720
requirements but a key one is

1407
00:58:02,720 --> 00:58:05,359
uh you know the setting up of paths

1408
00:58:05,359 --> 00:58:06,400
across

1409
00:58:06,400 --> 00:58:08,799
heterogeneous domains you know where

1410
00:58:08,799 --> 00:58:10,160
there's different technologies and

1411
00:58:10,160 --> 00:58:12,799
encapsulations being used

1412
00:58:12,799 --> 00:58:15,520
uh then the and the sort of the most

1413
00:58:15,520 --> 00:58:16,559
significant one

1414
00:58:16,559 --> 00:58:19,599
is the the impact of scale

1415
00:58:19,599 --> 00:58:22,240
on the you know on the on the solution

1416
00:58:22,240 --> 00:58:23,440
both

1417
00:58:23,440 --> 00:58:26,079
on the data plane especially where mpls

1418
00:58:26,079 --> 00:58:26,960
is used

1419
00:58:26,960 --> 00:58:29,920
as well as on the bgp control plane so

1420
00:58:29,920 --> 00:58:31,920
we clarify these aspects in the draft

1421
00:58:31,920 --> 00:58:35,839
next slide please on this work is the

1422
00:58:35,839 --> 00:58:36,480
result of

1423
00:58:36,480 --> 00:58:39,200
a collaboration with many people both

1424
00:58:39,200 --> 00:58:40,720
among the lead operators

1425
00:58:40,720 --> 00:58:42,720
and vendors so we acknowledge their

1426
00:58:42,720 --> 00:58:44,000
contributions

1427
00:58:44,000 --> 00:58:45,839
uh we also recognize that there has been

1428
00:58:45,839 --> 00:58:47,040
work in this area

1429
00:58:47,040 --> 00:58:48,839
specifically by the seamless sr

1430
00:58:48,839 --> 00:58:50,960
co-authors um

1431
00:58:50,960 --> 00:58:52,960
we you know as as shadow mentioned we

1432
00:58:52,960 --> 00:58:54,480
reached out to them back in november

1433
00:58:54,480 --> 00:58:55,920
december and there is

1434
00:58:55,920 --> 00:58:59,280
ongoing uh you know effort to uh come up

1435
00:58:59,280 --> 00:58:59,599
with

1436
00:58:59,599 --> 00:59:02,960
a joint uh problem statement and you

1437
00:59:02,960 --> 00:59:04,799
know for subsequent

1438
00:59:04,799 --> 00:59:09,040
work next slide please

1439
00:59:09,680 --> 00:59:12,079
um yeah so of course this is ongoing

1440
00:59:12,079 --> 00:59:12,880
effort but

1441
00:59:12,880 --> 00:59:15,440
uh you know we request uh a new review

1442
00:59:15,440 --> 00:59:19,839
from the working group

1443
00:59:20,319 --> 00:59:22,720
thank you

1444
00:59:24,559 --> 00:59:27,599
correct you have a question go ahead

1445
00:59:27,599 --> 00:59:30,000
hi uh thanks for the presentation this

1446
00:59:30,000 --> 00:59:31,760
is stark with juniper

1447
00:59:31,760 --> 00:59:33,520
my question is there seems to be an

1448
00:59:33,520 --> 00:59:35,119
assumption that the

1449
00:59:35,119 --> 00:59:37,760
color has the same meaning when it's

1450
00:59:37,760 --> 00:59:40,400
crossing multiple domains

1451
00:59:40,400 --> 00:59:43,119
has a uniform meaning what is the

1452
00:59:43,119 --> 00:59:45,359
guarantee that the same color means the

1453
00:59:45,359 --> 00:59:46,799
same thing

1454
00:59:46,799 --> 00:59:49,359
in multiple domains is there a need for

1455
00:59:49,359 --> 00:59:50,799
translation for example

1456
00:59:50,799 --> 00:59:53,599
do you think there can be a need for

1457
00:59:53,599 --> 00:59:55,440
translation and this is a key aspect

1458
00:59:55,440 --> 00:59:56,880
that we call out

1459
00:59:56,880 --> 00:59:59,760
you know in the draft clearly defining

1460
00:59:59,760 --> 01:00:01,839
the notion of a color domain

1461
01:00:01,839 --> 01:00:04,319
that has differentiated from uh network

1462
01:00:04,319 --> 01:00:05,040
domain

1463
01:00:05,040 --> 01:00:08,640
the draft does goes into you know

1464
01:00:08,640 --> 01:00:11,839
requirements that come out of it

1465
01:00:13,359 --> 01:00:15,839
tariq this is jim uh just just to add to

1466
01:00:15,839 --> 01:00:17,119
that and i don't i don't want to go down

1467
01:00:17,119 --> 01:00:18,640
a rat hole but

1468
01:00:18,640 --> 01:00:21,119
um that question is actually covered in

1469
01:00:21,119 --> 01:00:22,799
the solution document which is not part

1470
01:00:22,799 --> 01:00:24,720
of these slides so we can't discuss that

1471
01:00:24,720 --> 01:00:26,240
but if you if you want to look at that

1472
01:00:26,240 --> 01:00:27,520
go ahead and look at that solution

1473
01:00:27,520 --> 01:00:30,720
document i believe it's covered there

1474
01:00:30,720 --> 01:00:34,000
okay go ahead linda yes i have a

1475
01:00:34,000 --> 01:00:34,559
question

1476
01:00:34,559 --> 01:00:36,400
um what's the difference between your

1477
01:00:36,400 --> 01:00:40,000
color and the raw target

1478
01:00:41,520 --> 01:00:45,440
so firstly a color is uh you know is a

1479
01:00:45,440 --> 01:00:47,280
construct that is you know used to

1480
01:00:47,280 --> 01:00:48,640
represent the intent

1481
01:00:48,640 --> 01:00:50,799
and depending on the protocol being used

1482
01:00:50,799 --> 01:00:52,559
it would be signaled using different

1483
01:00:52,559 --> 01:00:53,839
mechanisms

1484
01:00:53,839 --> 01:00:57,119
in in in the sr policy solution

1485
01:00:57,119 --> 01:00:59,520
to signal the request for that intent

1486
01:00:59,520 --> 01:01:01,839
the bgp color extended community is used

1487
01:01:01,839 --> 01:01:03,839
to carry this color

1488
01:01:03,839 --> 01:01:06,160
now when it comes to bgp color aware

1489
01:01:06,160 --> 01:01:07,040
routing

1490
01:01:07,040 --> 01:01:08,480
uh you know depending on the the

1491
01:01:08,480 --> 01:01:11,200
solution it would be uh you know

1492
01:01:11,200 --> 01:01:15,200
a particular

1493
01:01:15,200 --> 01:01:17,440
bgp construct would be used to you know

1494
01:01:17,440 --> 01:01:20,160
signal that color awareness

1495
01:01:20,160 --> 01:01:22,400
so you will have another update or

1496
01:01:22,400 --> 01:01:23,280
another

1497
01:01:23,280 --> 01:01:26,480
instruction um how to forward

1498
01:01:26,480 --> 01:01:29,359
the colors how to steer the color that's

1499
01:01:29,359 --> 01:01:30,079
separate

1500
01:01:30,079 --> 01:01:33,599
is that correct i mean i

1501
01:01:33,599 --> 01:01:35,200
don't want to go into the solution

1502
01:01:35,200 --> 01:01:37,119
detail since this was a you know

1503
01:01:37,119 --> 01:01:39,440
a presentation on the the problem

1504
01:01:39,440 --> 01:01:40,720
statement

1505
01:01:40,720 --> 01:01:43,119
but as jim pointed that you know there

1506
01:01:43,119 --> 01:01:44,480
is a solution document

1507
01:01:44,480 --> 01:01:47,359
uh you know proposal that defines uh you

1508
01:01:47,359 --> 01:01:48,160
know how

1509
01:01:48,160 --> 01:01:52,799
color is used and signaled

1510
01:01:52,799 --> 01:01:56,000
okay thank you okay

1511
01:01:56,000 --> 01:01:59,200
ran go ahead

1512
01:02:02,400 --> 01:02:07,440
just remind me that we have a draft uh

1513
01:02:07,440 --> 01:02:10,480
solves the same the same problem

1514
01:02:10,480 --> 01:02:13,599
uh the draft name is drafted

1515
01:02:13,599 --> 01:02:17,119
idr entertainment lcu

1516
01:02:17,119 --> 01:02:20,160
and this stuff describes describes the

1517
01:02:20,160 --> 01:02:21,680
colored bdplu

1518
01:02:21,680 --> 01:02:25,520
lsp in which the routine prefix not only

1519
01:02:25,520 --> 01:02:26,480
carries

1520
01:02:26,480 --> 01:02:29,440
carries a label but also carries a

1521
01:02:29,440 --> 01:02:30,319
unique

1522
01:02:30,319 --> 01:02:33,280
color attribute which helps to select

1523
01:02:33,280 --> 01:02:34,240
other

1524
01:02:34,240 --> 01:02:37,520
underlying logic slides please

1525
01:02:37,520 --> 01:02:42,000
review and give us some comments

1526
01:02:42,000 --> 01:02:45,039
okay i suggest you type that draft name

1527
01:02:45,039 --> 01:02:45,920
into the chat

1528
01:02:45,920 --> 01:02:48,319
because i doubt very many people were

1529
01:02:48,319 --> 01:02:50,240
able to figure out what it was so please

1530
01:02:50,240 --> 01:02:51,119
type it

1531
01:02:51,119 --> 01:02:53,200
and uh i imagine the authors will go

1532
01:02:53,200 --> 01:02:54,400
look

1533
01:02:54,400 --> 01:02:56,400
we're getting it move on to the next

1534
01:02:56,400 --> 01:02:58,240
actually it might it might be better

1535
01:02:58,240 --> 01:02:59,599
around if you could actually send

1536
01:02:59,599 --> 01:03:02,559
something to the mailing list

1537
01:03:02,559 --> 01:03:05,440
that would work too yes okay sounds good

1538
01:03:05,440 --> 01:03:06,960
thank you ran

1539
01:03:06,960 --> 01:03:10,559
and now we go to the srv6 mpls

1540
01:03:10,559 --> 01:03:16,319
interworking uh

1541
01:03:16,319 --> 01:03:18,559
swadesh i believe you're presenting this

1542
01:03:18,559 --> 01:03:19,920
material

1543
01:03:19,920 --> 01:03:23,760
yeah hi i'm uh yes i will present

1544
01:03:23,760 --> 01:03:26,240
yeah hi i'm swadeesh agarwal working for

1545
01:03:26,240 --> 01:03:27,359
cisco systems

1546
01:03:27,359 --> 01:03:29,920
and i will present this srv6 mpls

1547
01:03:29,920 --> 01:03:30,799
interworking draft

1548
01:03:30,799 --> 01:03:32,559
on the behalf of all my co-authors

1549
01:03:32,559 --> 01:03:36,240
listed here and next slide

1550
01:03:36,319 --> 01:03:38,160
so this draft describes a solution for

1551
01:03:38,160 --> 01:03:40,240
srv6 and mpls interworking

1552
01:03:40,240 --> 01:03:42,559
as you know srvs is getting deployed in

1553
01:03:42,559 --> 01:03:44,160
the customer networks

1554
01:03:44,160 --> 01:03:46,400
and we have a brownfield mpls so such

1555
01:03:46,400 --> 01:03:47,359
interworking is it

1556
01:03:47,359 --> 01:03:49,680
is a requirement and this draft provides

1557
01:03:49,680 --> 01:03:51,599
the simple building blocks

1558
01:03:51,599 --> 01:03:55,440
to make this interworking happen

1559
01:03:55,440 --> 01:03:57,760
the this the initial version was posted

1560
01:03:57,760 --> 01:03:59,200
in october 2018

1561
01:03:59,200 --> 01:04:00,880
and this is a ref five which provides

1562
01:04:00,880 --> 01:04:02,319
the additional details

1563
01:04:02,319 --> 01:04:05,039
the draft describes both the data plane

1564
01:04:05,039 --> 01:04:06,799
as well as associated control plane

1565
01:04:06,799 --> 01:04:08,160
procedures to achieve

1566
01:04:08,160 --> 01:04:11,119
uh interworking for data plane this

1567
01:04:11,119 --> 01:04:11,760
draft has

1568
01:04:11,760 --> 01:04:15,680
introduced new and dtm dtm

1569
01:04:15,680 --> 01:04:18,799
behavior as well as it it updates the

1570
01:04:18,799 --> 01:04:19,680
existing

1571
01:04:19,680 --> 01:04:21,680
n.b.m behavior which is defined in the

1572
01:04:21,680 --> 01:04:22,720
network programming

1573
01:04:22,720 --> 01:04:25,680
and which is used in this draft in this

1574
01:04:25,680 --> 01:04:26,559
draft now

1575
01:04:26,559 --> 01:04:28,640
for the control plane we could go in

1576
01:04:28,640 --> 01:04:30,799
both into srpc based solution

1577
01:04:30,799 --> 01:04:33,280
as well as the bgp based solutions to

1578
01:04:33,280 --> 01:04:34,960
provide such interworking

1579
01:04:34,960 --> 01:04:38,400
next slide please so

1580
01:04:38,400 --> 01:04:40,160
this in this slide i'm trying to what

1581
01:04:40,160 --> 01:04:41,440
we'll try to do is we'll try to

1582
01:04:41,440 --> 01:04:42,960
generalize the interworking problem

1583
01:04:42,960 --> 01:04:44,720
into a simple problem in which i'm

1584
01:04:44,720 --> 01:04:46,480
trying to show a central domain

1585
01:04:46,480 --> 01:04:48,400
which i'm showing in different example

1586
01:04:48,400 --> 01:04:49,599
it could be different

1587
01:04:49,599 --> 01:04:51,599
in this case okay the green is uh

1588
01:04:51,599 --> 01:04:53,440
representing the srv6 domain

1589
01:04:53,440 --> 01:04:55,599
and the orange is representing an mpls

1590
01:04:55,599 --> 01:04:56,799
domain and the

1591
01:04:56,799 --> 01:04:59,039
dashed oval represents an interworking

1592
01:04:59,039 --> 01:05:00,559
function that happens on some border

1593
01:05:00,559 --> 01:05:01,280
router

1594
01:05:01,280 --> 01:05:03,839
okay so if you look at this draft

1595
01:05:03,839 --> 01:05:05,039
proposes two

1596
01:05:05,039 --> 01:05:08,240
main scenarios one is a transport

1597
01:05:08,240 --> 01:05:08,960
interworking

1598
01:05:08,960 --> 01:05:10,799
another is a service interworking at the

1599
01:05:10,799 --> 01:05:12,079
transport interview

1600
01:05:12,079 --> 01:05:15,520
what it means is our l3 or l2 services

1601
01:05:15,520 --> 01:05:18,400
uh i have a ah have a same control pin

1602
01:05:18,400 --> 01:05:19,200
continuity

1603
01:05:19,200 --> 01:05:21,680
so what it means is if you see the first

1604
01:05:21,680 --> 01:05:22,880
uh on the right side first

1605
01:05:22,880 --> 01:05:25,760
diagram it says srv6 on is on the leaf

1606
01:05:25,760 --> 01:05:26,559
on the edges

1607
01:05:26,559 --> 01:05:28,880
and mpls is in the central domain so for

1608
01:05:28,880 --> 01:05:30,319
simplicity we have shown this

1609
01:05:30,319 --> 01:05:32,720
but it could be any cascading domains

1610
01:05:32,720 --> 01:05:33,680
any type of

1611
01:05:33,680 --> 01:05:36,319
in any order also but edge domains is in

1612
01:05:36,319 --> 01:05:38,400
this case is an srv6 and therefore they

1613
01:05:38,400 --> 01:05:40,799
will have a srv6 vpn services

1614
01:05:40,799 --> 01:05:42,640
therefore what we need to achieve is we

1615
01:05:42,640 --> 01:05:45,520
need to tunnel the ipv6 or srv6 traffic

1616
01:05:45,520 --> 01:05:47,280
through this mpls domain

1617
01:05:47,280 --> 01:05:48,960
the second use case for transport

1618
01:05:48,960 --> 01:05:50,880
interworking is we have the edge which

1619
01:05:50,880 --> 01:05:51,200
is an

1620
01:05:51,200 --> 01:05:54,319
mpls which runs the mpls vpns and we

1621
01:05:54,319 --> 01:05:56,240
have to transport this

1622
01:05:56,240 --> 01:05:59,520
and lsp through the srv6 domain and the

1623
01:05:59,520 --> 01:06:00,240
third one

1624
01:06:00,240 --> 01:06:02,240
that interworkings now that we look is

1625
01:06:02,240 --> 01:06:03,920
is a service interworking where the

1626
01:06:03,920 --> 01:06:05,839
service the l2 l3 services

1627
01:06:05,839 --> 01:06:09,920
itself is srv6 vpn services or bgp mpls

1628
01:06:09,920 --> 01:06:11,760
services that is shown on the edges as a

1629
01:06:11,760 --> 01:06:12,640
vpn as

1630
01:06:12,640 --> 01:06:15,760
a srv6 vpn and the mpls vpn

1631
01:06:15,760 --> 01:06:17,520
and here what we need to provide is we

1632
01:06:17,520 --> 01:06:18,799
need to provide the quantity

1633
01:06:18,799 --> 01:06:20,720
connectivity for these l2 and l3

1634
01:06:20,720 --> 01:06:22,160
services through this interworking

1635
01:06:22,160 --> 01:06:22,960
function

1636
01:06:22,960 --> 01:06:26,240
next slide please so this

1637
01:06:26,240 --> 01:06:30,000
draft defines a new and dtm set behavior

1638
01:06:30,000 --> 01:06:32,799
that the what this behavior does is it

1639
01:06:32,799 --> 01:06:34,720
decapsulates the ipv6 header

1640
01:06:34,720 --> 01:06:37,280
and its extension headers and then look

1641
01:06:37,280 --> 01:06:38,160
then

1642
01:06:38,160 --> 01:06:41,039
mp the following mpls packet top label

1643
01:06:41,039 --> 01:06:42,319
in the mpls table

1644
01:06:42,319 --> 01:06:44,480
and forwards the packet accordingly and

1645
01:06:44,480 --> 01:06:46,160
this function is executed on the

1646
01:06:46,160 --> 01:06:48,720
interworking box between srv6 and mpls

1647
01:06:48,720 --> 01:06:49,280
domain

1648
01:06:49,280 --> 01:06:51,039
there's a pseudo code listed in a draft

1649
01:06:51,039 --> 01:06:52,400
i will not go through it but it's just

1650
01:06:52,400 --> 01:06:52,960
that

1651
01:06:52,960 --> 01:06:54,640
after doing the decap we look the top

1652
01:06:54,640 --> 01:06:56,960
label we carried in the packet

1653
01:06:56,960 --> 01:07:00,720
next slide please

1654
01:07:00,720 --> 01:07:03,359
also this draft introduces the srv6 and

1655
01:07:03,359 --> 01:07:04,480
hidden behaviors

1656
01:07:04,480 --> 01:07:06,640
here what we say it we have introduced

1657
01:07:06,640 --> 01:07:08,799
two behaviors one is to

1658
01:07:08,799 --> 01:07:10,880
h dot end caps which is applied to an

1659
01:07:10,880 --> 01:07:12,559
mpls label stack

1660
01:07:12,559 --> 01:07:15,039
here when we receive an mps label stack

1661
01:07:15,039 --> 01:07:15,839
we

1662
01:07:15,839 --> 01:07:18,400
pushed an ipv6 header along with it

1663
01:07:18,400 --> 01:07:19,760
along with the srh

1664
01:07:19,760 --> 01:07:21,680
together the empirics label stack and

1665
01:07:21,680 --> 01:07:23,680
the its payload becomes the payload of

1666
01:07:23,680 --> 01:07:25,440
an ipv6 packet

1667
01:07:25,440 --> 01:07:27,520
and the next header field of an srh must

1668
01:07:27,520 --> 01:07:29,280
be set to 137.

1669
01:07:29,280 --> 01:07:30,960
also there's a reduced version in which

1670
01:07:30,960 --> 01:07:32,880
the first segment is not put in the srh

1671
01:07:32,880 --> 01:07:34,000
but it is just put in the

1672
01:07:34,000 --> 01:07:38,319
destination address uh next slide please

1673
01:07:38,319 --> 01:07:40,480
yeah as i described earlier interwork we

1674
01:07:40,480 --> 01:07:42,000
have we have broken the interworking

1675
01:07:42,000 --> 01:07:43,680
scenario transport interworking

1676
01:07:43,680 --> 01:07:45,119
what it means is we need to provide

1677
01:07:45,119 --> 01:07:47,359
reachability to our locator if it is

1678
01:07:47,359 --> 01:07:48,960
srv6 vpn services

1679
01:07:48,960 --> 01:07:52,400
or to a lsp to a pe if it is an i

1680
01:07:52,400 --> 01:07:55,680
ampersa vpn so this draft provides

1681
01:07:55,680 --> 01:07:57,440
two mechanisms to provide such thing one

1682
01:07:57,440 --> 01:07:58,720
is a a known as

1683
01:07:58,720 --> 01:08:02,079
existing srpc which satisfies the intent

1684
01:08:02,079 --> 01:08:04,720
across the multiple domain also since

1685
01:08:04,720 --> 01:08:06,319
srpc's

1686
01:08:06,319 --> 01:08:08,480
learns the topology through bgpls from

1687
01:08:08,480 --> 01:08:09,359
each of the domains

1688
01:08:09,359 --> 01:08:11,119
it is aware of the data plane

1689
01:08:11,119 --> 01:08:13,680
discontinuity at certain interworking

1690
01:08:13,680 --> 01:08:16,319
box or the border box also disk draft

1691
01:08:16,319 --> 01:08:17,359
provides the

1692
01:08:17,359 --> 01:08:19,520
best effort connectivity through bgp

1693
01:08:19,520 --> 01:08:21,520
where we advertise the pe locator

1694
01:08:21,520 --> 01:08:24,719
or the mpls lsp through such a

1695
01:08:24,719 --> 01:08:26,960
discontinuity of network next slide

1696
01:08:26,960 --> 01:08:29,279
please

1697
01:08:29,439 --> 01:08:31,359
so the for my examples the the way i

1698
01:08:31,359 --> 01:08:33,439
will show is the green circle will show

1699
01:08:33,439 --> 01:08:35,040
an srvs capable node

1700
01:08:35,040 --> 01:08:36,560
and here we will show a locator which

1701
01:08:36,560 --> 01:08:38,479
would be represented by b colon k

1702
01:08:38,479 --> 01:08:40,479
k would be the node id and f is a

1703
01:08:40,479 --> 01:08:41,600
function on that

1704
01:08:41,600 --> 01:08:44,640
node and the mpls node would be shown

1705
01:08:44,640 --> 01:08:46,238
with the orange with the k

1706
01:08:46,238 --> 01:08:48,479
represents their label it would be the

1707
01:08:48,479 --> 01:08:49,439
prefix seed label

1708
01:08:49,439 --> 01:08:51,600
which would be represented by 16 000 and

1709
01:08:51,600 --> 01:08:53,198
k would be the node number

1710
01:08:53,198 --> 01:08:55,279
and green and orange that i'm showing is

1711
01:08:55,279 --> 01:08:57,600
a node which is both sr mpls capable as

1712
01:08:57,600 --> 01:08:59,520
well as srv6 capable

1713
01:08:59,520 --> 01:09:03,040
next slide please so here i'm taking an

1714
01:09:03,040 --> 01:09:03,920
example of

1715
01:09:03,920 --> 01:09:07,279
srpc a solution to provide the transport

1716
01:09:07,279 --> 01:09:08,319
interworking

1717
01:09:08,319 --> 01:09:11,839
here node 1 and node 10 are running srv6

1718
01:09:11,839 --> 01:09:15,279
vpns because that's hr srv6 in this case

1719
01:09:15,279 --> 01:09:16,799
so now what happened node 10 which is

1720
01:09:16,799 --> 01:09:18,719
running an srv6 vpn service will

1721
01:09:18,719 --> 01:09:20,158
advertise a vpn prefix

1722
01:09:20,158 --> 01:09:22,238
with a srv service set here which is

1723
01:09:22,238 --> 01:09:24,080
shown as b colon 10 common

1724
01:09:24,080 --> 01:09:27,120
toner dt4 because vpn service as well as

1725
01:09:27,120 --> 01:09:29,520
color red because it's an sr

1726
01:09:29,520 --> 01:09:32,238
srt based solution and it has a certain

1727
01:09:32,238 --> 01:09:34,080
intent in this example red is showing a

1728
01:09:34,080 --> 01:09:35,359
low latency intent

1729
01:09:35,359 --> 01:09:37,600
node 1 receives this update and node 1

1730
01:09:37,600 --> 01:09:39,120
doesn't know how to reach node 10

1731
01:09:39,120 --> 01:09:42,399
it will make a request to a to the sr pc

1732
01:09:42,399 --> 01:09:44,000
to provide a low latency path which is

1733
01:09:44,000 --> 01:09:45,520
represented by color red

1734
01:09:45,520 --> 01:09:48,640
to the node 10. will compute the low

1735
01:09:48,640 --> 01:09:50,080
latency path and i am showing its

1736
01:09:50,080 --> 01:09:51,439
compute through node 2

1737
01:09:51,439 --> 01:09:54,800
5 and 8 and srpc figures out that

1738
01:09:54,800 --> 01:09:56,719
there is a discontinuity of the data

1739
01:09:56,719 --> 01:09:59,120
plane at the border node 4.

1740
01:09:59,120 --> 01:10:02,800
srpc installs the mpls policy at four

1741
01:10:02,800 --> 01:10:05,040
along the same low latency path till the

1742
01:10:05,040 --> 01:10:06,320
note 7

1743
01:10:06,320 --> 01:10:08,480
and then that policy is installed on the

1744
01:10:08,480 --> 01:10:09,760
note 4

1745
01:10:09,760 --> 01:10:11,760
as shown in the example it has a segment

1746
01:10:11,760 --> 01:10:12,880
16 05

1747
01:10:12,880 --> 01:10:15,760
and 16 07 and it will again take you to

1748
01:10:15,760 --> 01:10:17,440
a low latency path through the mpls

1749
01:10:17,440 --> 01:10:18,080
domain

1750
01:10:18,080 --> 01:10:20,800
but important aspect is that this policy

1751
01:10:20,800 --> 01:10:21,280
is

1752
01:10:21,280 --> 01:10:24,480
bounded to an ipv6 instantiation of a

1753
01:10:24,480 --> 01:10:26,960
binding set which is n.b.m which is

1754
01:10:26,960 --> 01:10:28,320
already described in the network

1755
01:10:28,320 --> 01:10:28,960
programming

1756
01:10:28,960 --> 01:10:31,440
and we are using the exact same n.b.m

1757
01:10:31,440 --> 01:10:32,480
function here

1758
01:10:32,480 --> 01:10:35,280
and this this segment now srpc will send

1759
01:10:35,280 --> 01:10:35,920
this update

1760
01:10:35,920 --> 01:10:37,280
back to the node 1 because that

1761
01:10:37,280 --> 01:10:39,280
requested in which one of the segments

1762
01:10:39,280 --> 01:10:40,000
would be this

1763
01:10:40,000 --> 01:10:42,880
n.b.m behavior so if you see the

1764
01:10:42,880 --> 01:10:44,560
segments on the node one it takes

1765
01:10:44,560 --> 01:10:45,520
through the

1766
01:10:45,520 --> 01:10:48,239
low latency path through node two uh and

1767
01:10:48,239 --> 01:10:50,000
then there's a binding set to on the for

1768
01:10:50,000 --> 01:10:50,719
the node

1769
01:10:50,719 --> 01:10:52,640
node four and then through node five in

1770
01:10:52,640 --> 01:10:54,239
that and nodes

1771
01:10:54,239 --> 01:10:56,159
eight and if you see the packet power

1772
01:10:56,159 --> 01:10:57,920
packet that it received on the note 4

1773
01:10:57,920 --> 01:10:59,360
the packet that received on the note 4

1774
01:10:59,360 --> 01:11:01,040
would be that with that android bm

1775
01:11:01,040 --> 01:11:02,400
function on note 4

1776
01:11:02,400 --> 01:11:05,199
and what that n dot bm pseudocode is it

1777
01:11:05,199 --> 01:11:06,080
will

1778
01:11:06,080 --> 01:11:08,480
update the next segments in the srh as a

1779
01:11:08,480 --> 01:11:09,440
destination

1780
01:11:09,440 --> 01:11:13,440
and then it will put a empire stack in

1781
01:11:13,440 --> 01:11:15,679
that is involved that is uh bounded to

1782
01:11:15,679 --> 01:11:17,440
that policy and sends the packet out

1783
01:11:17,440 --> 01:11:18,719
into the mpls domain

1784
01:11:18,719 --> 01:11:21,280
and rest of the on the note 7 it will do

1785
01:11:21,280 --> 01:11:23,360
a lookup of that ipv6 packet that is

1786
01:11:23,360 --> 01:11:25,120
following the impeller stack and packet

1787
01:11:25,120 --> 01:11:26,800
will flow to the

1788
01:11:26,800 --> 01:11:29,120
back to the srv6 network uh next slide

1789
01:11:29,120 --> 01:11:31,360
please

1790
01:11:31,360 --> 01:11:33,040
exactly same procedures we can achieve

1791
01:11:33,040 --> 01:11:35,120
for the srpc for m over 6.

1792
01:11:35,120 --> 01:11:36,880
the difference here is our central

1793
01:11:36,880 --> 01:11:39,360
domain is at srv6 therefore the policy

1794
01:11:39,360 --> 01:11:40,960
that srpc will install

1795
01:11:40,960 --> 01:11:43,280
on the note 4 here would be an srv6

1796
01:11:43,280 --> 01:11:44,000
policy

1797
01:11:44,000 --> 01:11:46,880
whose segments would be again to for the

1798
01:11:46,880 --> 01:11:48,400
sla part to the note 7

1799
01:11:48,400 --> 01:11:49,840
in which in which in this case again i

1800
01:11:49,840 --> 01:11:52,159
am showing the end function of note 5

1801
01:11:52,159 --> 01:11:53,840
and then important part is the last

1802
01:11:53,840 --> 01:11:55,199
segment of this policy

1803
01:11:55,199 --> 01:11:56,560
is a new behavior that we already

1804
01:11:56,560 --> 01:11:58,400
described is a

1805
01:11:58,400 --> 01:12:01,120
dtm function which causes us to look up

1806
01:12:01,120 --> 01:12:02,080
the

1807
01:12:02,080 --> 01:12:04,320
following mpls header and send the

1808
01:12:04,320 --> 01:12:06,239
packet further into mpls domain on the

1809
01:12:06,239 --> 01:12:06,880
right

1810
01:12:06,880 --> 01:12:08,719
and if you see that in this case again

1811
01:12:08,719 --> 01:12:10,320
the now srv6 policy

1812
01:12:10,320 --> 01:12:13,120
the bcd is represented by an mpls bc and

1813
01:12:13,120 --> 01:12:13,600
that

1814
01:12:13,600 --> 01:12:15,760
srpc will install on the note 1 as one

1815
01:12:15,760 --> 01:12:16,640
of the segments

1816
01:12:16,640 --> 01:12:18,239
which will cause the stitching or the

1817
01:12:18,239 --> 01:12:20,400
interworking function on the note 4.

1818
01:12:20,400 --> 01:12:21,920
from the packet path point of view on

1819
01:12:21,920 --> 01:12:23,679
the note 4 i will receive the packet

1820
01:12:23,679 --> 01:12:25,120
with an mpls pc

1821
01:12:25,120 --> 01:12:28,800
it's shown as 3007 here which will be uh

1822
01:12:28,800 --> 01:12:31,520
which will push the ipv6 header with the

1823
01:12:31,520 --> 01:12:33,600
destination as the first segment as a

1824
01:12:33,600 --> 01:12:36,320
node 5 and then the la and and the next

1825
01:12:36,320 --> 01:12:37,920
segment would be going into an srh would

1826
01:12:37,920 --> 01:12:38,239
be

1827
01:12:38,239 --> 01:12:39,679
which would be the dtm function of node

1828
01:12:39,679 --> 01:12:41,440
seven and on node seven

1829
01:12:41,440 --> 01:12:43,440
once we hit the dtm function it would

1830
01:12:43,440 --> 01:12:44,560
see it's my my

1831
01:12:44,560 --> 01:12:46,000
it will hit my sit table because the

1832
01:12:46,000 --> 01:12:47,600
locator is of the note 7

1833
01:12:47,600 --> 01:12:49,600
and it's a dtm type and the next header

1834
01:12:49,600 --> 01:12:51,679
would be 137 so it will do a lookup of

1835
01:12:51,679 --> 01:12:52,560
the top level

1836
01:12:52,560 --> 01:12:55,199
which is 8 16 08 and it will forward to

1837
01:12:55,199 --> 01:12:55,920
the next

1838
01:12:55,920 --> 01:12:59,600
segment that is note 8. and next

1839
01:12:59,600 --> 01:13:01,440
before you go to the next slide dhruv is

1840
01:13:01,440 --> 01:13:04,159
trying to ask a question go ahead drove

1841
01:13:04,159 --> 01:13:07,199
yeah thanks uh joel swades uh with my pc

1842
01:13:07,199 --> 01:13:07,600
chair

1843
01:13:07,600 --> 01:13:10,880
hat on uh i would request you to uh

1844
01:13:10,880 --> 01:13:12,960
talk to the binding sid authors it's a

1845
01:13:12,960 --> 01:13:14,960
working group document it's almost

1846
01:13:14,960 --> 01:13:16,880
we think it's gonna be ready for uh

1847
01:13:16,880 --> 01:13:18,400
working group last call as well

1848
01:13:18,400 --> 01:13:20,560
so what you are describing seems to be

1849
01:13:20,560 --> 01:13:22,880
supported there is no limitation there

1850
01:13:22,880 --> 01:13:26,719
that for a sr path mpls path you can

1851
01:13:26,719 --> 01:13:28,320
have a binding segment

1852
01:13:28,320 --> 01:13:30,960
which is both srv6 binding segment or an

1853
01:13:30,960 --> 01:13:32,880
mpls binding segment so it seems to be

1854
01:13:32,880 --> 01:13:33,440
allowed

1855
01:13:33,440 --> 01:13:35,120
but i would prefer if it is made

1856
01:13:35,120 --> 01:13:36,719
explicit so it is

1857
01:13:36,719 --> 01:13:38,960
uh that you have a use case for this and

1858
01:13:38,960 --> 01:13:40,960
i think it's a very valid use case

1859
01:13:40,960 --> 01:13:42,800
so maybe just talk to the binding set

1860
01:13:42,800 --> 01:13:45,120
authors and add one statements there so

1861
01:13:45,120 --> 01:13:46,800
that it is very clear

1862
01:13:46,800 --> 01:13:50,800
uh second second comment i would have is

1863
01:13:50,800 --> 01:13:51,520
uh

1864
01:13:51,520 --> 01:13:53,760
we also have multi-domain case that we

1865
01:13:53,760 --> 01:13:55,280
handle in pc

1866
01:13:55,280 --> 01:13:57,920
uh quite well and most of your document

1867
01:13:57,920 --> 01:13:58,560
is focusing

1868
01:13:58,560 --> 01:14:01,280
on a single pc that is taking care of

1869
01:14:01,280 --> 01:14:03,120
all the domains so just think about

1870
01:14:03,120 --> 01:14:05,679
even handling inter domain aspects as

1871
01:14:05,679 --> 01:14:07,280
well thank you

1872
01:14:07,280 --> 01:14:10,080
sure thanks drop i will talk to the for

1873
01:14:10,080 --> 01:14:10,480
the

1874
01:14:10,480 --> 01:14:12,080
binding sid as well as the other aspect

1875
01:14:12,080 --> 01:14:15,199
you mentioned sure

1876
01:14:15,199 --> 01:14:18,239
okay next slide please

1877
01:14:18,560 --> 01:14:21,280
so here we have described both the srpc

1878
01:14:21,280 --> 01:14:23,679
solution for six over m and mo6

1879
01:14:23,679 --> 01:14:26,159
something similar we can do for bgp base

1880
01:14:26,159 --> 01:14:27,600
in transport interworking

1881
01:14:27,600 --> 01:14:30,480
so here we know h domains on srv6 so our

1882
01:14:30,480 --> 01:14:33,199
services would be srv6 vpn services

1883
01:14:33,199 --> 01:14:35,280
so what we need is when we add when the

1884
01:14:35,280 --> 01:14:36,800
node 10 advertise such an

1885
01:14:36,800 --> 01:14:39,760
srv6 vpn services and node 1 receives

1886
01:14:39,760 --> 01:14:41,600
node 1 receives needs a reachability

1887
01:14:41,600 --> 01:14:43,679
over the central domain for the

1888
01:14:43,679 --> 01:14:46,560
pe locator because the srv6 services

1889
01:14:46,560 --> 01:14:48,080
would be advertised with an srv6

1890
01:14:48,080 --> 01:14:48,719
services

1891
01:14:48,719 --> 01:14:51,760
which would be the locator of node 10.

1892
01:14:51,760 --> 01:14:54,800
now this reachability is like an ipv6

1893
01:14:54,800 --> 01:14:56,000
reachability over an

1894
01:14:56,000 --> 01:14:58,239
mpls domain which is already supported

1895
01:14:58,239 --> 01:15:00,000
like a 6pe functionality

1896
01:15:00,000 --> 01:15:02,080
and so therefore we can use exactly same

1897
01:15:02,080 --> 01:15:04,159
functionality when an ipv6 prefix is

1898
01:15:04,159 --> 01:15:06,000
advertised through node 7 to

1899
01:15:06,000 --> 01:15:08,880
node 4 it would be it would be with a

1900
01:15:08,880 --> 01:15:09,360
label

1901
01:15:09,360 --> 01:15:12,560
bgp ipv6 lu address family and it would

1902
01:15:12,560 --> 01:15:13,199
be

1903
01:15:13,199 --> 01:15:16,400
transported over an sr mpls intra domain

1904
01:15:16,400 --> 01:15:17,840
tunnel whatever it is

1905
01:15:17,840 --> 01:15:20,640
next slide piece

1906
01:15:21,360 --> 01:15:24,480
so next one come the our h domains is

1907
01:15:24,480 --> 01:15:27,679
mpls and our central domain is srv6

1908
01:15:27,679 --> 01:15:30,239
so what happens today in such is this is

1909
01:15:30,239 --> 01:15:31,199
running and bgp

1910
01:15:31,199 --> 01:15:33,679
mpls vpn so what we need is we need your

1911
01:15:33,679 --> 01:15:35,840
reachability from node 1 to node 10

1912
01:15:35,840 --> 01:15:39,040
which is an mpls lsp what today existing

1913
01:15:39,040 --> 01:15:39,920
mechanism is

1914
01:15:39,920 --> 01:15:42,640
a bgp3107 which cause the label cross

1915
01:15:42,640 --> 01:15:44,480
connects wherever we do next top cell so

1916
01:15:44,480 --> 01:15:45,280
in this case

1917
01:15:45,280 --> 01:15:47,679
on the note 7 and on the note 4 and

1918
01:15:47,679 --> 01:15:49,440
there would be a cross connect for

1919
01:15:49,440 --> 01:15:51,840
loop back to node 10. so exactly same

1920
01:15:51,840 --> 01:15:53,760
mechanism would be used the extra step

1921
01:15:53,760 --> 01:15:55,520
that would be required would be

1922
01:15:55,520 --> 01:15:58,080
instead of tunneling from the that bgp

1923
01:15:58,080 --> 01:15:59,040
lsp from

1924
01:15:59,040 --> 01:16:02,000
note 4 to note 7 over an mpls lsp we

1925
01:16:02,000 --> 01:16:04,000
will tunnel that into an

1926
01:16:04,000 --> 01:16:06,400
into an ipv6 tunnel whose destination

1927
01:16:06,400 --> 01:16:07,280
would be

1928
01:16:07,280 --> 01:16:09,840
of the behavior dtm and or dtm which is

1929
01:16:09,840 --> 01:16:11,040
already described

1930
01:16:11,040 --> 01:16:14,000
and that what so what note 4 is supposed

1931
01:16:14,000 --> 01:16:14,719
to do is

1932
01:16:14,719 --> 01:16:18,320
uh it need to do a label swap as it does

1933
01:16:18,320 --> 01:16:19,120
today on

1934
01:16:19,120 --> 01:16:21,199
on the note 4 in addition to that it

1935
01:16:21,199 --> 01:16:23,199
will put an ipv6 header

1936
01:16:23,199 --> 01:16:26,080
uh whose destination would be n dot dtm

1937
01:16:26,080 --> 01:16:26,960
and

1938
01:16:26,960 --> 01:16:30,320
ah and put that ip and send with an ipv6

1939
01:16:30,320 --> 01:16:33,120
encapsulation to the node 7 with a and

1940
01:16:33,120 --> 01:16:34,000
it would be of the dt

1941
01:16:34,000 --> 01:16:36,000
and the behavior of that destination

1942
01:16:36,000 --> 01:16:37,440
would be of the dtm type

1943
01:16:37,440 --> 01:16:40,080
and on note 7 what will happen is since

1944
01:16:40,080 --> 01:16:42,080
it's a dtm type we will decapsulate the

1945
01:16:42,080 --> 01:16:44,320
ipv6 header and its extensions

1946
01:16:44,320 --> 01:16:46,640
and do a lookup of the next label would

1947
01:16:46,640 --> 01:16:48,800
be which would be the again the bgp

1948
01:16:48,800 --> 01:16:50,880
lu lsp label and packet would be

1949
01:16:50,880 --> 01:16:52,239
reaching note 10.

1950
01:16:52,239 --> 01:16:55,280
so this draft also proposes uh carrying

1951
01:16:55,280 --> 01:16:55,760
uh

1952
01:16:55,760 --> 01:16:59,199
this n dot dtm function as an srb6 sid

1953
01:16:59,199 --> 01:17:01,760
in the bgp lu update and we have added a

1954
01:17:01,760 --> 01:17:02,560
new tlv

1955
01:17:02,560 --> 01:17:05,840
for for carrying that update uh next

1956
01:17:05,840 --> 01:17:08,320
slide please

1957
01:17:09,440 --> 01:17:10,640
so till now we were talking about

1958
01:17:10,640 --> 01:17:12,640
transport interworking so there is a use

1959
01:17:12,640 --> 01:17:14,320
case of interworking in which we have to

1960
01:17:14,320 --> 01:17:14,960
make a

1961
01:17:14,960 --> 01:17:17,360
control plane which is running srv6 vpn

1962
01:17:17,360 --> 01:17:18,239
and the

1963
01:17:18,239 --> 01:17:21,920
uh mpls mpls vpn so for that we

1964
01:17:21,920 --> 01:17:24,239
propose there's already a sub a gateway

1965
01:17:24,239 --> 01:17:26,400
solution a gateway is a box which

1966
01:17:26,400 --> 01:17:29,920
supports both the srv6 vpn as well as

1967
01:17:29,920 --> 01:17:31,280
mpls vpn

1968
01:17:31,280 --> 01:17:33,360
and what happens in on this box we do a

1969
01:17:33,360 --> 01:17:34,719
service termination so that means

1970
01:17:34,719 --> 01:17:35,440
there's a

1971
01:17:35,440 --> 01:17:37,360
l2 based on service whether it's l2

1972
01:17:37,360 --> 01:17:38,960
service or lt service there's a lookup

1973
01:17:38,960 --> 01:17:39,600
involved

1974
01:17:39,600 --> 01:17:42,239
so that that does that terminates the

1975
01:17:42,239 --> 01:17:43,280
both the underlay

1976
01:17:43,280 --> 01:17:45,040
as it is overlay and therefore we can

1977
01:17:45,040 --> 01:17:47,360
provide the interworking using a gateway

1978
01:17:47,360 --> 01:17:48,880
solution

1979
01:17:48,880 --> 01:17:52,159
next slide please yeah so

1980
01:17:52,159 --> 01:17:54,640
we have covered in this draft we have

1981
01:17:54,640 --> 01:17:55,840
made sure there are building blocks

1982
01:17:55,840 --> 01:17:56,880
being taken care

1983
01:17:56,880 --> 01:17:59,040
and these building blocks cover all the

1984
01:17:59,040 --> 01:18:01,120
complex interworking scenarios

1985
01:18:01,120 --> 01:18:03,520
and therefore we would like the working

1986
01:18:03,520 --> 01:18:04,480
group to review this

1987
01:18:04,480 --> 01:18:09,440
as well as adopt this document thank you

1988
01:18:11,280 --> 01:18:15,360
questions for swadesh before we move on

1989
01:18:15,360 --> 01:18:16,480
to the next one

1990
01:18:16,480 --> 01:18:20,480
which is a different n dot dtm

1991
01:18:23,679 --> 01:18:26,400
okay hearing no questions ron you have

1992
01:18:26,400 --> 01:18:27,440
the floor

1993
01:18:27,440 --> 01:18:29,199
all right daniel you have a question go

1994
01:18:29,199 --> 01:18:30,800
ahead quickly

1995
01:18:30,800 --> 01:18:32,960
just last minute question but that was

1996
01:18:32,960 --> 01:18:34,159
the point i was

1997
01:18:34,159 --> 01:18:38,640
trying to do with shredder or um

1998
01:18:38,640 --> 01:18:42,000
on her presentation because i see some

1999
01:18:42,000 --> 01:18:44,080
similarities although

2000
01:18:44,080 --> 01:18:46,480
sure you seem to be very focused on

2001
01:18:46,480 --> 01:18:48,080
defining the problem but

2002
01:18:48,080 --> 01:18:51,120
there's a piece that in here what was

2003
01:18:51,120 --> 01:18:52,400
just presented that

2004
01:18:52,400 --> 01:18:55,360
is also referring to defining a problem

2005
01:18:55,360 --> 01:18:57,199
so i was just wondering if

2006
01:18:57,199 --> 01:19:00,800
this work should you know start from

2007
01:19:00,800 --> 01:19:03,360
the beginning to looking at merging or

2008
01:19:03,360 --> 01:19:04,320
contributing

2009
01:19:04,320 --> 01:19:06,560
instead of waiting that were too far

2010
01:19:06,560 --> 01:19:08,960
along and then end up with two different

2011
01:19:08,960 --> 01:19:12,239
ways of doing the same thing

2012
01:19:15,840 --> 01:19:19,040
sure sure dan we can discuss and see how

2013
01:19:19,040 --> 01:19:23,840
go ahead with it yes should

2014
01:19:24,080 --> 01:19:27,679
thanks thanks

2015
01:19:31,600 --> 01:19:37,840
can you hear me yes i know you

2016
01:19:37,840 --> 01:19:39,920
okay yeah you have the next one up go

2017
01:19:39,920 --> 01:19:41,679
ahead

2018
01:19:41,679 --> 01:19:44,239
this is ron bonica and i'm presenting

2019
01:19:44,239 --> 01:19:45,199
end dtm

2020
01:19:45,199 --> 01:19:48,080
on behalf of my co-authors and to

2021
01:19:48,080 --> 01:19:50,239
maximize confusion

2022
01:19:50,239 --> 01:19:52,880
the ndtm is named exactly as the same as

2023
01:19:52,880 --> 01:19:54,480
the ndtm

2024
01:19:54,480 --> 01:19:57,280
that you just heard about it has many of

2025
01:19:57,280 --> 01:19:58,719
the same functions

2026
01:19:58,719 --> 01:20:01,760
but a few small differences

2027
01:20:01,760 --> 01:20:05,840
let's go over them first slide

2028
01:20:06,480 --> 01:20:09,199
okay this draft introduces a new srv6

2029
01:20:09,199 --> 01:20:10,400
endpoint behavior called

2030
01:20:10,400 --> 01:20:13,920
ndtm it's for interworking between srv6

2031
01:20:13,920 --> 01:20:16,320
and srmpls

2032
01:20:16,320 --> 01:20:18,719
and like any uh endpoint behavior it

2033
01:20:18,719 --> 01:20:20,080
contains a function plus

2034
01:20:20,080 --> 01:20:23,440
arguments the function causes the

2035
01:20:23,440 --> 01:20:24,639
processing node

2036
01:20:24,639 --> 01:20:27,040
to de-encapsulate a packet that is to

2037
01:20:27,040 --> 01:20:28,960
remove the ipv6 header and all its

2038
01:20:28,960 --> 01:20:30,400
extensions

2039
01:20:30,400 --> 01:20:33,760
to impose an srm pls label stack and to

2040
01:20:33,760 --> 01:20:35,040
forward the packet

2041
01:20:35,040 --> 01:20:38,159
as per the mpls label stack

2042
01:20:38,159 --> 01:20:40,480
um the arguments determine the label

2043
01:20:40,480 --> 01:20:42,480
stack contents and anything that might

2044
01:20:42,480 --> 01:20:44,800
be encoded in the label stack

2045
01:20:44,800 --> 01:20:47,840
next slide

2046
01:20:48,880 --> 01:20:52,159
next slide okay here's a typical use

2047
01:20:52,159 --> 01:20:54,239
case we have an sr path that goes from

2048
01:20:54,239 --> 01:20:56,400
node one to node five

2049
01:20:56,400 --> 01:20:59,280
there's an srv6 part that has nodes one

2050
01:20:59,280 --> 01:21:01,040
two and three in it

2051
01:21:01,040 --> 01:21:03,760
and an srm pls part that has nodes four

2052
01:21:03,760 --> 01:21:05,199
and five in it

2053
01:21:05,199 --> 01:21:08,320
um node three is the one saddled with

2054
01:21:08,320 --> 01:21:09,280
the

2055
01:21:09,280 --> 01:21:12,560
um with the task of translation

2056
01:21:12,560 --> 01:21:16,400
so node 3 has to be both srv6 and srmpls

2057
01:21:16,400 --> 01:21:17,280
aware

2058
01:21:17,280 --> 01:21:20,639
1 and 2 or only srv6 or only need to be

2059
01:21:20,639 --> 01:21:21,920
srv6

2060
01:21:21,920 --> 01:21:25,679
node 4 and 5 only need to be srm pls

2061
01:21:25,679 --> 01:21:29,280
next slide

2062
01:21:29,280 --> 01:21:33,120
so how do we process this um

2063
01:21:33,120 --> 01:21:34,480
and here's where you'll see the

2064
01:21:34,480 --> 01:21:36,560
difference between the ndtm you just saw

2065
01:21:36,560 --> 01:21:37,440
on this end

2066
01:21:37,440 --> 01:21:40,719
dtm if segments left is greater than

2067
01:21:40,719 --> 01:21:42,639
zero we discard the packet and send an

2068
01:21:42,639 --> 01:21:45,120
icmp message to the source

2069
01:21:45,120 --> 01:21:48,480
um when uh

2070
01:21:48,480 --> 01:21:51,600
if it is not zero we do nothing until

2071
01:21:51,600 --> 01:21:53,840
we're processing the upper layer header

2072
01:21:53,840 --> 01:21:56,080
when we process the upper layer header

2073
01:21:56,080 --> 01:21:59,040
we de-encapsulate the packet

2074
01:21:59,040 --> 01:22:01,760
we push an mpls label stack that is

2075
01:22:01,760 --> 01:22:05,120
associated with the dtm arguments

2076
01:22:05,120 --> 01:22:08,000
we set the mpls traffic class and ttl to

2077
01:22:08,000 --> 01:22:09,440
reflect

2078
01:22:09,440 --> 01:22:11,360
the traffic class and hop count that was

2079
01:22:11,360 --> 01:22:13,520
in the ipv6 header

2080
01:22:13,520 --> 01:22:16,000
and we submit the package to the mpls

2081
01:22:16,000 --> 01:22:16,719
lookup

2082
01:22:16,719 --> 01:22:18,960
for transmission to the new destination

2083
01:22:18,960 --> 01:22:20,800
so there are two big differences between

2084
01:22:20,800 --> 01:22:23,440
this ndtm and the one you just saw one

2085
01:22:23,440 --> 01:22:24,560
is that we allow

2086
01:22:24,560 --> 01:22:28,320
any payload not just mpls and the other

2087
01:22:28,320 --> 01:22:31,440
is that we make a point of setting the

2088
01:22:31,440 --> 01:22:33,760
mpls traffic class and ttl values

2089
01:22:33,760 --> 01:22:35,120
appropriately

2090
01:22:35,120 --> 01:22:39,120
next slide

2091
01:22:39,120 --> 01:22:41,679
the next steps um we're asking for

2092
01:22:41,679 --> 01:22:43,360
working group review and a call for

2093
01:22:43,360 --> 01:22:44,560
adoption

2094
01:22:44,560 --> 01:22:47,600
um we've heard a request from dan

2095
01:22:47,600 --> 01:22:51,040
to talk about merging solutions so

2096
01:22:51,040 --> 01:22:54,239
that probably has to happen too and

2097
01:22:54,239 --> 01:22:58,080
that's it okay there's a question from

2098
01:22:58,080 --> 01:23:01,679
swadesh and from daniel swadesh first

2099
01:23:01,679 --> 01:23:05,040
yeah yeah hi ron so isn't

2100
01:23:05,040 --> 01:23:07,040
what you are proposing is the when we

2101
01:23:07,040 --> 01:23:09,440
receive that function and its argument

2102
01:23:09,440 --> 01:23:11,600
you have to put an mpls stack based on

2103
01:23:11,600 --> 01:23:12,800
its the arguments

2104
01:23:12,800 --> 01:23:16,000
correct yes so isn't that

2105
01:23:16,000 --> 01:23:18,400
n.b.m that is already defined in network

2106
01:23:18,400 --> 01:23:20,239
programming is just that it's a decap

2107
01:23:20,239 --> 01:23:21,280
variant of it

2108
01:23:21,280 --> 01:23:23,120
i'm just saying because today it's very

2109
01:23:23,120 --> 01:23:24,480
programming

2110
01:23:24,480 --> 01:23:27,120
it's very close to n.b.m yeah that's

2111
01:23:27,120 --> 01:23:28,480
what i'm saying it's uh your

2112
01:23:28,480 --> 01:23:30,320
lookup function and arguments already

2113
01:23:30,320 --> 01:23:31,840
give you what's it stack to put and

2114
01:23:31,840 --> 01:23:32,800
that's the difference between

2115
01:23:32,800 --> 01:23:35,440
n.d.m where we are proposing to do a

2116
01:23:35,440 --> 01:23:36,239
lookup

2117
01:23:36,239 --> 01:23:37,840
into a whatever is falling in the

2118
01:23:37,840 --> 01:23:39,600
impellers header and that

2119
01:23:39,600 --> 01:23:42,000
lookup will give you impeller stack here

2120
01:23:42,000 --> 01:23:43,280
okay yes whatever there is

2121
01:23:43,280 --> 01:23:45,600
so i i'm saying is that this is in some

2122
01:23:45,600 --> 01:23:47,760
says n.b.m it's just a d-cap variant of

2123
01:23:47,760 --> 01:23:49,360
it

2124
01:23:49,360 --> 01:23:52,719
it's very close to n.b.m um

2125
01:23:52,719 --> 01:23:56,320
also the mpls stack may not fit in the

2126
01:23:56,320 --> 01:23:57,360
arguments

2127
01:23:57,360 --> 01:23:59,280
so it may be that some implementations

2128
01:23:59,280 --> 01:24:01,199
have to do a lookup

2129
01:24:01,199 --> 01:24:05,199
um the draft is silent on that

2130
01:24:05,520 --> 01:24:07,679
yeah but i from my point of view i just

2131
01:24:07,679 --> 01:24:09,120
looking at it i felt this is the end of

2132
01:24:09,120 --> 01:24:11,520
bm that's what i want to point out

2133
01:24:11,520 --> 01:24:17,840
it's very close

2134
01:24:19,120 --> 01:24:22,960
so my question run as well i'm assuming

2135
01:24:22,960 --> 01:24:23,440
i'm

2136
01:24:23,440 --> 01:24:27,760
free to go run go ahead now

2137
01:24:27,760 --> 01:24:30,560
it's close to the that the end but it's

2138
01:24:30,560 --> 01:24:32,480
not quite

2139
01:24:32,480 --> 01:24:35,520
you are you're gonna propose an

2140
01:24:35,520 --> 01:24:38,400
a new end function or yes you're gonna

2141
01:24:38,400 --> 01:24:40,239
be chosen

2142
01:24:40,239 --> 01:24:43,760
we're proposing a new end function so

2143
01:24:43,760 --> 01:24:46,800
yeah i have the same comment to

2144
01:24:46,800 --> 01:24:50,800
can we look at merging before the

2145
01:24:50,800 --> 01:24:54,000
the chair stick comes in and

2146
01:24:54,000 --> 01:24:56,239
we end up with the design team yeah

2147
01:24:56,239 --> 01:24:58,159
that's a conversation to have probably

2148
01:24:58,159 --> 01:24:59,840
not in the next three minutes but

2149
01:24:59,840 --> 01:25:03,440
let's have it good thanks thank you

2150
01:25:03,440 --> 01:25:06,719
changly you're next

2151
01:25:11,040 --> 01:25:14,159
see these two documents define the same

2152
01:25:14,159 --> 01:25:14,880
thing

2153
01:25:14,880 --> 01:25:18,239
and i'd like to see the uh end of

2154
01:25:18,239 --> 01:25:21,520
this story and by the way gsr6 for

2155
01:25:21,520 --> 01:25:24,400
amperes also defined a similar uh

2156
01:25:24,400 --> 01:25:25,520
mechanism so

2157
01:25:25,520 --> 01:25:28,080
maybe we can combine these kind of

2158
01:25:28,080 --> 01:25:29,280
things to discuss

2159
01:25:29,280 --> 01:25:33,040
in the main list thank you

2160
01:25:33,120 --> 01:25:37,840
okay any further questions

2161
01:25:39,679 --> 01:25:42,080
hearing done we'll move on to the next

2162
01:25:42,080 --> 01:25:43,600
presentation

2163
01:25:43,600 --> 01:25:45,600
so far i believe you're going to be

2164
01:25:45,600 --> 01:25:46,960
presenting

2165
01:25:46,960 --> 01:25:49,120
uh building blocks first sr building

2166
01:25:49,120 --> 01:25:52,480
blocks for slicing in

2167
01:25:53,120 --> 01:25:54,400
you don't need to put yourself on the

2168
01:25:54,400 --> 01:25:56,400
queue just

2169
01:25:56,400 --> 01:25:59,520
oh so i'm i'm here okay good many things

2170
01:25:59,520 --> 01:26:03,280
so i'm going to present this draft on

2171
01:26:03,280 --> 01:26:06,080
building blocks that i need for creating

2172
01:26:06,080 --> 01:26:08,639
slices in sr network on behalf of my

2173
01:26:08,639 --> 01:26:10,000
co-authors

2174
01:26:10,000 --> 01:26:12,880
next slide please

2175
01:26:14,400 --> 01:26:17,199
okay so let's first look at the scope of

2176
01:26:17,199 --> 01:26:19,360
the draft this trap is an informational

2177
01:26:19,360 --> 01:26:20,560
draft

2178
01:26:20,560 --> 01:26:23,120
it lists essential building blocks

2179
01:26:23,120 --> 01:26:24,560
needed for

2180
01:26:24,560 --> 01:26:27,760
network slicing it

2181
01:26:27,760 --> 01:26:29,679
basically explains how these building

2182
01:26:29,679 --> 01:26:31,280
blocks work together as

2183
01:26:31,280 --> 01:26:34,480
independent pieces and works seamlessly

2184
01:26:34,480 --> 01:26:37,760
to to provide scalable

2185
01:26:37,760 --> 01:26:40,880
uh slicing solution and

2186
01:26:40,880 --> 01:26:44,159
solution that is that are

2187
01:26:44,159 --> 01:26:46,719
defined for incremental deployments in

2188
01:26:46,719 --> 01:26:47,679
mind

2189
01:26:47,679 --> 01:26:51,199
next slide please

2190
01:26:51,199 --> 01:26:53,280
a very brief history of the draft we

2191
01:26:53,280 --> 01:26:54,800
started the work in july 2

2192
01:26:54,800 --> 01:26:58,719
2018 the ref 2 was presented

2193
01:26:58,719 --> 01:27:01,840
in ietf 106 in spring

2194
01:27:01,840 --> 01:27:05,199
next slide please

2195
01:27:05,199 --> 01:27:08,400
so in the left two when when

2196
01:27:08,400 --> 01:27:11,280
the presentation happened we covered the

2197
01:27:11,280 --> 01:27:12,080
following

2198
01:27:12,080 --> 01:27:15,280
building blocks the

2199
01:27:15,280 --> 01:27:18,800
sr policy which is which enables

2200
01:27:18,800 --> 01:27:20,400
steering of traffic

2201
01:27:20,400 --> 01:27:22,719
along an arbitrary path that arbitrary

2202
01:27:22,719 --> 01:27:24,080
part may be

2203
01:27:24,080 --> 01:27:27,280
low latency path or a path that avoids

2204
01:27:27,280 --> 01:27:29,440
certain resources

2205
01:27:29,440 --> 01:27:34,159
odn use case allows service traffic

2206
01:27:34,159 --> 01:27:37,199
to be carried on paths that meet

2207
01:27:37,199 --> 01:27:38,800
customer

2208
01:27:38,800 --> 01:27:43,679
or application slas automatic steering

2209
01:27:43,679 --> 01:27:46,159
is possible into network slicing using

2210
01:27:46,159 --> 01:27:49,040
that constructor

2211
01:27:49,360 --> 01:27:53,199
then we talked about flexible algorithms

2212
01:27:53,199 --> 01:27:57,040
the complements srte policy solution

2213
01:27:57,040 --> 01:28:00,080
by adding new prefix

2214
01:28:00,080 --> 01:28:02,639
segments with a specific optimization

2215
01:28:02,639 --> 01:28:03,840
objective

2216
01:28:03,840 --> 01:28:06,960
and constraints so it allows

2217
01:28:06,960 --> 01:28:09,840
uh so this is an example of what why we

2218
01:28:09,840 --> 01:28:11,600
call them independent

2219
01:28:11,600 --> 01:28:14,719
uh cooperating building blocks uh

2220
01:28:14,719 --> 01:28:16,239
because sr policies

2221
01:28:16,239 --> 01:28:19,360
are supported with or without flex algo

2222
01:28:19,360 --> 01:28:21,600
flex on the other hand flexible

2223
01:28:21,600 --> 01:28:24,159
leverages odn and automatic steering

2224
01:28:24,159 --> 01:28:27,760
uh construct of sr policy

2225
01:28:27,760 --> 01:28:30,719
then we talked about ti lfa which plays

2226
01:28:30,719 --> 01:28:31,440
a role

2227
01:28:31,440 --> 01:28:33,199
in providing order 50 millisecond

2228
01:28:33,199 --> 01:28:36,159
protection in the underlay

2229
01:28:36,159 --> 01:28:39,280
as these are the building blocks that

2230
01:28:39,280 --> 01:28:42,400
work together the way that

2231
01:28:42,400 --> 01:28:45,920
say for example tlf and flex algo works

2232
01:28:45,920 --> 01:28:49,600
is that the backup path for tlsp

2233
01:28:49,600 --> 01:28:53,040
lfa is express with prefix sid

2234
01:28:53,040 --> 01:28:56,400
of flux of a specific flexible elbow

2235
01:28:56,400 --> 01:28:58,800
the backup part is optimized per flux

2236
01:28:58,800 --> 01:28:59,760
elbow

2237
01:28:59,760 --> 01:29:01,600
so we don't have so you don't have we

2238
01:29:01,600 --> 01:29:03,440
don't have cases where

2239
01:29:03,440 --> 01:29:06,320
traffic for a flex cell go which is low

2240
01:29:06,320 --> 01:29:07,199
delay

2241
01:29:07,199 --> 01:29:10,320
can be back up on a path that are

2242
01:29:10,320 --> 01:29:15,280
not delay optimized path

2243
01:29:15,280 --> 01:29:18,800
then we have vpns that provide means for

2244
01:29:18,800 --> 01:29:20,080
creating

2245
01:29:20,080 --> 01:29:23,440
logically separated network to different

2246
01:29:23,440 --> 01:29:24,000
set of

2247
01:29:24,000 --> 01:29:27,280
users to access

2248
01:29:27,280 --> 01:29:31,360
the common network infra

2249
01:29:31,360 --> 01:29:33,440
then service provider programming

2250
01:29:33,440 --> 01:29:34,560
provides

2251
01:29:34,560 --> 01:29:38,080
supporting orchestration of virtualized

2252
01:29:38,080 --> 01:29:40,000
service containers

2253
01:29:40,000 --> 01:29:44,400
and is fully integrated with sr policies

2254
01:29:44,400 --> 01:29:45,920
this is how the building blocks work

2255
01:29:45,920 --> 01:29:49,760
together on mpm provide

2256
01:29:49,760 --> 01:29:51,920
useful mean for collecting topological

2257
01:29:51,920 --> 01:29:53,280
and service data

2258
01:29:53,280 --> 01:29:55,600
that is used for first implementing

2259
01:29:55,600 --> 01:29:57,760
slicing

2260
01:29:57,760 --> 01:30:00,800
and then we have ip amperes disk surf

2261
01:30:00,800 --> 01:30:01,679
architecture

2262
01:30:01,679 --> 01:30:05,520
that enables network devices to provide

2263
01:30:05,520 --> 01:30:07,040
differential treatment

2264
01:30:07,040 --> 01:30:11,840
based on exp or dhcp marking

2265
01:30:11,840 --> 01:30:13,600
here we would like to draw attention

2266
01:30:13,600 --> 01:30:15,040
that qos

2267
01:30:15,040 --> 01:30:18,880
works independent of topology

2268
01:30:18,880 --> 01:30:22,159
or routing

2269
01:30:22,159 --> 01:30:23,840
and then slice orchestrator puts things

2270
01:30:23,840 --> 01:30:26,719
together at the management plane

2271
01:30:26,719 --> 01:30:30,320
since that revision we also now

2272
01:30:30,320 --> 01:30:33,440
added references for

2273
01:30:33,440 --> 01:30:37,440
stateful slice id these references

2274
01:30:37,440 --> 01:30:39,920
so later on when we go through this

2275
01:30:39,920 --> 01:30:41,360
we're going to go through this how the

2276
01:30:41,360 --> 01:30:42,080
stick

2277
01:30:42,080 --> 01:30:45,199
less slice id fits together as a

2278
01:30:45,199 --> 01:30:46,719
building block

2279
01:30:46,719 --> 01:30:49,760
uh that does not disrupt the picture

2280
01:30:49,760 --> 01:30:52,719
from routing uh point of view or from

2281
01:30:52,719 --> 01:30:54,480
topological point of view

2282
01:30:54,480 --> 01:30:56,719
but works to provide additional

2283
01:30:56,719 --> 01:30:58,159
differentiate treatment so next slide

2284
01:30:58,159 --> 01:31:00,080
please

2285
01:31:00,080 --> 01:31:02,800
so let's have a look at a few people so

2286
01:31:02,800 --> 01:31:03,440
far

2287
01:31:03,440 --> 01:31:05,440
so far before you go to the next slide

2288
01:31:05,440 --> 01:31:06,400
we have a couple of people who

2289
01:31:06,400 --> 01:31:08,000
apparently have questions about the

2290
01:31:08,000 --> 01:31:10,000
history that you've presented

2291
01:31:10,000 --> 01:31:13,520
so greg you're up

2292
01:31:13,520 --> 01:31:15,360
uh maybe i can finish this and then we

2293
01:31:15,360 --> 01:31:17,040
can take a question i think it's not so

2294
01:31:17,040 --> 01:31:19,199
important

2295
01:31:19,199 --> 01:31:22,719
um well so far uh i have a question so

2296
01:31:22,719 --> 01:31:25,920
um what

2297
01:31:25,920 --> 01:31:28,080
uh which definition of the network

2298
01:31:28,080 --> 01:31:29,280
slides

2299
01:31:29,280 --> 01:31:32,960
uh this refers to

2300
01:31:32,960 --> 01:31:36,480
is it uh 3gpp network slice

2301
01:31:36,480 --> 01:31:39,600
or itf network slides

2302
01:31:39,600 --> 01:31:42,560
could we uh wait so that you you're

2303
01:31:42,560 --> 01:31:44,080
clear later on

2304
01:31:44,080 --> 01:31:46,400
uh once i do the can we come back to

2305
01:31:46,400 --> 01:31:47,199
this one

2306
01:31:47,199 --> 01:31:49,840
once i'm done with the presentation uh

2307
01:31:49,840 --> 01:31:50,320
well

2308
01:31:50,320 --> 01:31:52,639
i i think it's a basic very fundamental

2309
01:31:52,639 --> 01:31:54,000
question because

2310
01:31:54,000 --> 01:31:57,679
uh we need to understand the context of

2311
01:31:57,679 --> 01:32:00,639
what the network's lies we're talking

2312
01:32:00,639 --> 01:32:02,960
about

2313
01:32:02,960 --> 01:32:05,040
let's let's wait i i'd like you to

2314
01:32:05,040 --> 01:32:06,000
understand the

2315
01:32:06,000 --> 01:32:09,760
solution and then uh

2316
01:32:09,880 --> 01:32:13,120
without this point i understand why

2317
01:32:13,120 --> 01:32:14,560
you're asking but we have to let him

2318
01:32:14,560 --> 01:32:16,080
continue at this point if he thinks the

2319
01:32:16,080 --> 01:32:17,600
rest of the presentation

2320
01:32:17,600 --> 01:32:21,760
may clarify it yeah

2321
01:32:21,920 --> 01:32:25,040
okay so next

2322
01:32:25,040 --> 01:32:28,400
next slide please

2323
01:32:28,400 --> 01:32:31,280
so in the context of the attributes

2324
01:32:31,280 --> 01:32:32,239
needed

2325
01:32:32,239 --> 01:32:35,760
to create a slice which is independent

2326
01:32:35,760 --> 01:32:37,679
of routing and topology so one of the

2327
01:32:37,679 --> 01:32:39,120
attributes of

2328
01:32:39,120 --> 01:32:41,679
slice id for differential treatment is

2329
01:32:41,679 --> 01:32:42,719
that it's supposed to

2330
01:32:42,719 --> 01:32:44,560
is to be independent of routing and

2331
01:32:44,560 --> 01:32:46,080
topology

2332
01:32:46,080 --> 01:32:48,719
what does slice id does what size id

2333
01:32:48,719 --> 01:32:51,280
does so is in this picture

2334
01:32:51,280 --> 01:32:54,480
we have a picture on this slide we have

2335
01:32:54,480 --> 01:32:56,560
a picture on the right

2336
01:32:56,560 --> 01:33:00,080
that shows cueing treatment given

2337
01:33:00,080 --> 01:33:03,679
to two slices slice one

2338
01:33:03,679 --> 01:33:06,840
and slice two and

2339
01:33:06,840 --> 01:33:10,560
these two slices

2340
01:33:10,560 --> 01:33:14,400
there is some information that is uh

2341
01:33:14,400 --> 01:33:18,080
in in this in this picture the slice

2342
01:33:18,080 --> 01:33:20,960
green slice is identified by slice id1

2343
01:33:20,960 --> 01:33:22,639
and the blue slices identify the slice

2344
01:33:22,639 --> 01:33:24,719
id2

2345
01:33:24,719 --> 01:33:29,120
traffic that the green and blue slices

2346
01:33:29,120 --> 01:33:31,199
carry is aggregated using hierarchical

2347
01:33:31,199 --> 01:33:32,639
queue

2348
01:33:32,639 --> 01:33:35,440
so it is not possible for green slice

2349
01:33:35,440 --> 01:33:38,719
exp 0 traffic to disturb

2350
01:33:38,719 --> 01:33:42,560
blue slice exp 0 traffic

2351
01:33:44,400 --> 01:33:48,159
and what other attribute that we like is

2352
01:33:48,159 --> 01:33:48,560
that

2353
01:33:48,560 --> 01:33:50,960
slice id should be independent running

2354
01:33:50,960 --> 01:33:53,199
topology it should be stateless

2355
01:33:53,199 --> 01:33:55,360
and it should be done in a backward

2356
01:33:55,360 --> 01:33:57,120
compatible fashion

2357
01:33:57,120 --> 01:34:01,760
for incremental deployment next slide

2358
01:34:02,840 --> 01:34:05,840
please

2359
01:34:06,159 --> 01:34:09,920
so now let's take a look at exemplify

2360
01:34:09,920 --> 01:34:11,600
why slice id construct needs to be

2361
01:34:11,600 --> 01:34:14,480
independent of routing topology

2362
01:34:14,480 --> 01:34:17,520
so i like to draw your attention to the

2363
01:34:17,520 --> 01:34:19,679
picture on the right

2364
01:34:19,679 --> 01:34:23,199
which ignore the block the big

2365
01:34:23,199 --> 01:34:26,560
box in that picture for now

2366
01:34:26,560 --> 01:34:30,239
here within that you have a network

2367
01:34:30,239 --> 01:34:33,520
with two flex algo low latency flex sell

2368
01:34:33,520 --> 01:34:34,320
go orange

2369
01:34:34,320 --> 01:34:38,080
128 and

2370
01:34:38,159 --> 01:34:42,639
low cost flex algo red 129.

2371
01:34:42,639 --> 01:34:45,600
i did i did mention earlier that if you

2372
01:34:45,600 --> 01:34:47,440
have a failure let's say if you have a

2373
01:34:47,440 --> 01:34:51,440
failure between link one and two

2374
01:34:51,920 --> 01:34:54,239
then what you like because the low

2375
01:34:54,239 --> 01:34:56,480
latency slide traffic

2376
01:34:56,480 --> 01:34:58,560
you you like the low limit let's say try

2377
01:34:58,560 --> 01:35:00,639
traffic to use backup resources that are

2378
01:35:00,639 --> 01:35:01,440
also

2379
01:35:01,440 --> 01:35:04,159
a backup bar that is also low low

2380
01:35:04,159 --> 01:35:06,639
latency optimize

2381
01:35:06,639 --> 01:35:09,040
and and indeed this is what happens for

2382
01:35:09,040 --> 01:35:10,560
flight circle

2383
01:35:10,560 --> 01:35:14,000
case so there's a failure between node

2384
01:35:14,000 --> 01:35:16,800
uh between on link between node one and

2385
01:35:16,800 --> 01:35:17,679
two

2386
01:35:17,679 --> 01:35:19,920
then the traffic is diverted to a low

2387
01:35:19,920 --> 01:35:21,040
latency

2388
01:35:21,040 --> 01:35:25,280
delay path which is shown by orange

2389
01:35:25,760 --> 01:35:29,199
now it makes sense to extend this to the

2390
01:35:29,199 --> 01:35:30,560
differential treatment

2391
01:35:30,560 --> 01:35:34,560
that the slices provide and

2392
01:35:34,560 --> 01:35:37,760
in this case now let's take this picture

2393
01:35:37,760 --> 01:35:38,639
which is

2394
01:35:38,639 --> 01:35:42,239
half blue half green and this is like

2395
01:35:42,239 --> 01:35:43,520
that because

2396
01:35:43,520 --> 01:35:46,800
it's a common infrastructure or a common

2397
01:35:46,800 --> 01:35:49,679
flux algo so we are not replicating flux

2398
01:35:49,679 --> 01:35:52,880
algo per slice id

2399
01:35:52,880 --> 01:35:56,400
but reusing the same flux algo

2400
01:35:56,400 --> 01:35:59,520
again topology and routing independence

2401
01:35:59,520 --> 01:36:00,560
is important

2402
01:36:00,560 --> 01:36:03,920
using the same instance to create

2403
01:36:03,920 --> 01:36:05,280
differential treatment

2404
01:36:05,280 --> 01:36:08,719
now what happens

2405
01:36:08,719 --> 01:36:12,480
when you have a failure

2406
01:36:12,480 --> 01:36:16,800
in the same link node 1 and 2

2407
01:36:16,800 --> 01:36:21,440
but now slice id

2408
01:36:21,440 --> 01:36:24,639
1 and slice id two traffic

2409
01:36:24,639 --> 01:36:28,159
that is going over that link one and two

2410
01:36:28,159 --> 01:36:31,600
is destructive you re

2411
01:36:31,600 --> 01:36:34,239
redirect traffic through four three and

2412
01:36:34,239 --> 01:36:35,920
two so we are going to focus on node

2413
01:36:35,920 --> 01:36:37,360
number four

2414
01:36:37,360 --> 01:36:39,119
when node number four received the

2415
01:36:39,119 --> 01:36:41,520
packet and packet is a stateless

2416
01:36:41,520 --> 01:36:44,239
instance of slice id in the packet so

2417
01:36:44,239 --> 01:36:45,920
when node number four

2418
01:36:45,920 --> 01:36:48,639
receive the packet with slice id do one

2419
01:36:48,639 --> 01:36:50,080
obviously it applies

2420
01:36:50,080 --> 01:36:52,880
the differential treatment given and

2421
01:36:52,880 --> 01:36:55,760
reserve or program for slice id 1.

2422
01:36:55,760 --> 01:36:58,960
when the traffic comes for slice id 2

2423
01:36:58,960 --> 01:37:00,639
then it gives the same differential

2424
01:37:00,639 --> 01:37:01,440
treatment

2425
01:37:01,440 --> 01:37:06,800
that that is programmed at node number 4

2426
01:37:06,800 --> 01:37:09,840
for slice id 2. so in this

2427
01:37:09,840 --> 01:37:13,600
fashion you really need

2428
01:37:13,600 --> 01:37:17,040
the tlfa flex lgo

2429
01:37:17,040 --> 01:37:18,840
and other building block completely

2430
01:37:18,840 --> 01:37:20,080
transparent

2431
01:37:20,080 --> 01:37:22,560
to the differential treatment that is

2432
01:37:22,560 --> 01:37:23,520
required for

2433
01:37:23,520 --> 01:37:26,719
for slicing slicing really slice id

2434
01:37:26,719 --> 01:37:27,600
really

2435
01:37:27,600 --> 01:37:31,199
act like a qos which is independent of

2436
01:37:31,199 --> 01:37:35,840
routing topology next slide please

2437
01:37:35,840 --> 01:37:40,239
okay so regarding the seamless

2438
01:37:40,239 --> 01:37:42,719
working of this building block we saw

2439
01:37:42,719 --> 01:37:43,840
that flex sell go

2440
01:37:43,840 --> 01:37:46,320
how it works it's the same thing like

2441
01:37:46,320 --> 01:37:47,840
you have

2442
01:37:47,840 --> 01:37:50,000
you have a construct which is a

2443
01:37:50,000 --> 01:37:52,639
differentiated treatment on a node

2444
01:37:52,639 --> 01:37:54,560
but you don't need too many instances of

2445
01:37:54,560 --> 01:37:55,840
the differential treatment

2446
01:37:55,840 --> 01:37:57,360
because you have other construct like

2447
01:37:57,360 --> 01:37:59,840
vpn policies

2448
01:37:59,840 --> 01:38:02,960
qs differentiation that make you scale

2449
01:38:02,960 --> 01:38:04,480
and on a device you're not going to have

2450
01:38:04,480 --> 01:38:06,159
too many behavior for differential

2451
01:38:06,159 --> 01:38:08,000
treatment so this is how

2452
01:38:08,000 --> 01:38:11,600
the slice is scaled

2453
01:38:12,080 --> 01:38:16,080
next slide please

2454
01:38:16,080 --> 01:38:18,159
so we're going to take an example this

2455
01:38:18,159 --> 01:38:20,800
is with the reference of house

2456
01:38:20,800 --> 01:38:23,920
stateless life id information is carried

2457
01:38:23,920 --> 01:38:28,320
for srv6 network and in this picture

2458
01:38:28,320 --> 01:38:31,520
we have an sr domain

2459
01:38:31,520 --> 01:38:34,560
and we show that traffic

2460
01:38:34,560 --> 01:38:38,320
is in green payload is supposed to be

2461
01:38:38,320 --> 01:38:41,199
supposed to be classified into green

2462
01:38:41,199 --> 01:38:41,920
slice

2463
01:38:41,920 --> 01:38:44,320
and a blue payload is supposed to be

2464
01:38:44,320 --> 01:38:45,440
classified

2465
01:38:45,440 --> 01:38:47,920
in the blue drive slide so we're going

2466
01:38:47,920 --> 01:38:49,600
to focus on

2467
01:38:49,600 --> 01:38:53,600
sr node ingress one where

2468
01:38:53,600 --> 01:38:56,719
which always encapsulate the packet

2469
01:38:56,719 --> 01:39:01,280
in an outer ipv6 header an optional srh

2470
01:39:01,280 --> 01:39:03,760
this node when the when the with this

2471
01:39:03,760 --> 01:39:05,520
node may classify the packet so when the

2472
01:39:05,520 --> 01:39:06,400
green packet

2473
01:39:06,400 --> 01:39:08,800
comes then it will be classified into

2474
01:39:08,800 --> 01:39:10,639
green slice id

2475
01:39:10,639 --> 01:39:12,639
and then the green slice id is carried

2476
01:39:12,639 --> 01:39:13,679
in the

2477
01:39:13,679 --> 01:39:15,520
eighth most significant bit of four

2478
01:39:15,520 --> 01:39:17,040
labels so far

2479
01:39:17,040 --> 01:39:19,520
so far can you possibly pick up the pace

2480
01:39:19,520 --> 01:39:20,239
you've spent

2481
01:39:20,239 --> 01:39:21,760
rather more than your allotted time

2482
01:39:21,760 --> 01:39:23,199
already and we do have some more

2483
01:39:23,199 --> 01:39:24,239
questions

2484
01:39:24,239 --> 01:39:27,679
sure uh so uh so good so so basically

2485
01:39:27,679 --> 01:39:28,560
then then

2486
01:39:28,560 --> 01:39:30,719
then what happens is is that node number

2487
01:39:30,719 --> 01:39:32,159
two which is

2488
01:39:32,159 --> 01:39:35,119
which is a transit node uh if it slice

2489
01:39:35,119 --> 01:39:35,679
aware

2490
01:39:35,679 --> 01:39:38,719
then it look at that field uh that is in

2491
01:39:38,719 --> 01:39:39,360
the packet

2492
01:39:39,360 --> 01:39:41,760
and apply the differential treatment

2493
01:39:41,760 --> 01:39:43,440
that the that is programmed at node

2494
01:39:43,440 --> 01:39:44,800
number two

2495
01:39:44,800 --> 01:39:47,920
uh if it is not aware

2496
01:39:47,920 --> 01:39:51,040
of slice id treatment then

2497
01:39:51,040 --> 01:39:54,239
it just forwards the packet

2498
01:39:54,239 --> 01:39:56,159
without any any further differential

2499
01:39:56,159 --> 01:39:58,719
treatment using other building blocks

2500
01:39:58,719 --> 01:40:01,280
or we can call it forward the traffic

2501
01:40:01,280 --> 01:40:03,040
using the default sleep so that's

2502
01:40:03,040 --> 01:40:07,600
enables the um the difference at the

2503
01:40:07,600 --> 01:40:10,000
that enables uh the incremental

2504
01:40:10,000 --> 01:40:10,719
deployment

2505
01:40:10,719 --> 01:40:13,440
next slide please

2506
01:40:14,639 --> 01:40:19,280
so now for the npls

2507
01:40:19,280 --> 01:40:22,560
uh draft for there is a draft that bruno

2508
01:40:22,560 --> 01:40:24,880
presented to mpls working group

2509
01:40:24,880 --> 01:40:27,199
it worked for both uh segment routing

2510
01:40:27,199 --> 01:40:29,840
and non-segment routing mpls

2511
01:40:29,840 --> 01:40:33,360
uh and it's similar to what

2512
01:40:33,360 --> 01:40:35,520
what the other reference i just went

2513
01:40:35,520 --> 01:40:36,719
over

2514
01:40:36,719 --> 01:40:39,920
the uh the exception is that

2515
01:40:39,920 --> 01:40:43,040
the slice id is carried

2516
01:40:43,040 --> 01:40:46,400
in the entropy label

2517
01:40:46,400 --> 01:40:50,080
and the ttl of the entropy label

2518
01:40:50,080 --> 01:40:54,080
is the is where slice id

2519
01:40:54,080 --> 01:40:57,679
presence indication is provided

2520
01:40:57,679 --> 01:41:01,040
a node that is able to that is capable

2521
01:41:01,040 --> 01:41:02,400
of doing the differential treatment

2522
01:41:02,400 --> 01:41:04,320
applied to differential treatment

2523
01:41:04,320 --> 01:41:07,760
other nodes work

2524
01:41:07,760 --> 01:41:11,840
work seamlessly and provide

2525
01:41:11,840 --> 01:41:13,679
load balancing during the true label

2526
01:41:13,679 --> 01:41:15,280
entropy label

2527
01:41:15,280 --> 01:41:19,119
with with that i would uh stop here

2528
01:41:19,119 --> 01:41:22,320
for the next slide please please let's

2529
01:41:22,320 --> 01:41:23,600
just take questions this is the last

2530
01:41:23,600 --> 01:41:25,679
slide so i stopped here

2531
01:41:25,679 --> 01:41:28,320
and uh basically would like to get

2532
01:41:28,320 --> 01:41:29,199
provide

2533
01:41:29,199 --> 01:41:31,679
get feedback from the working group and

2534
01:41:31,679 --> 01:41:32,320
would like

2535
01:41:32,320 --> 01:41:34,800
working group uh to adopt the farm

2536
01:41:34,800 --> 01:41:36,080
questions

2537
01:41:36,080 --> 01:41:40,159
yes you're up

2538
01:41:42,080 --> 01:41:45,760
yeah this is judo my question is first

2539
01:41:45,760 --> 01:41:47,920
the first part of this document

2540
01:41:47,920 --> 01:41:49,920
presentation is a good summary of the sr

2541
01:41:49,920 --> 01:41:51,760
mechanisms which have been defined in

2542
01:41:51,760 --> 01:41:53,520
this working group

2543
01:41:53,520 --> 01:41:56,080
to make it more network slide specific

2544
01:41:56,080 --> 01:41:57,199
perhaps

2545
01:41:57,199 --> 01:41:59,600
i suggest to reference the resource

2546
01:41:59,600 --> 01:42:00,560
aware segment

2547
01:42:00,560 --> 01:42:03,280
and sr4 weapon plus drafts which are

2548
01:42:03,280 --> 01:42:03,920
also

2549
01:42:03,920 --> 01:42:05,840
the working group documents in spring

2550
01:42:05,840 --> 01:42:08,400
working group

2551
01:42:08,400 --> 01:42:11,040
the second comment is the sharing of

2552
01:42:11,040 --> 01:42:12,880
topology between multiple slides

2553
01:42:12,880 --> 01:42:14,880
was proposed in the scalability

2554
01:42:14,880 --> 01:42:16,000
consideration draft

2555
01:42:16,000 --> 01:42:18,560
institute which i hopefully i can

2556
01:42:18,560 --> 01:42:19,040
present

2557
01:42:19,040 --> 01:42:22,000
in the end of this session and the last

2558
01:42:22,000 --> 01:42:23,440
comment is

2559
01:42:23,440 --> 01:42:27,119
for the data plane slice id mechanism

2560
01:42:27,119 --> 01:42:29,360
in my understanding this is based on the

2561
01:42:29,360 --> 01:42:31,679
ipv6 data plane or ampere's data plane

2562
01:42:31,679 --> 01:42:32,719
extensions

2563
01:42:32,719 --> 01:42:35,520
which will belong to that relevant

2564
01:42:35,520 --> 01:42:37,679
working groups

2565
01:42:37,679 --> 01:42:42,239
okay all right so the many things

2566
01:42:42,239 --> 01:42:46,400
for for the comments uh uh so i i

2567
01:42:46,400 --> 01:42:48,960
agree we can work offline on the

2568
01:42:48,960 --> 01:42:50,000
suggestions

2569
01:42:50,000 --> 01:42:52,480
that you made and this is informational

2570
01:42:52,480 --> 01:42:53,440
document

2571
01:42:53,440 --> 01:42:56,879
this document does not so

2572
01:42:58,800 --> 01:43:00,400
so far i'm going to cut in here we've

2573
01:43:00,400 --> 01:43:01,840
got literally uh

2574
01:43:01,840 --> 01:43:03,920
not much time left we've got one

2575
01:43:03,920 --> 01:43:06,080
presentation left on the

2576
01:43:06,080 --> 01:43:08,480
agenda plus two that are there if we

2577
01:43:08,480 --> 01:43:09,920
have time where we're going to run out

2578
01:43:09,920 --> 01:43:11,520
of time so

2579
01:43:11,520 --> 01:43:13,760
uh i think we need to cut the queue uh

2580
01:43:13,760 --> 01:43:15,199
with the people on here let's get these

2581
01:43:15,199 --> 01:43:16,719
questions through quickly and move on

2582
01:43:16,719 --> 01:43:17,360
please

2583
01:43:17,360 --> 01:43:19,360
yeah and quick answers thank you i will

2584
01:43:19,360 --> 01:43:20,880
uh follow up greg

2585
01:43:20,880 --> 01:43:22,800
with you offline or on the mailing list

2586
01:43:22,800 --> 01:43:25,040
thank you

2587
01:43:25,040 --> 01:43:27,360
greg you're ahead of the queue go ahead

2588
01:43:27,360 --> 01:43:28,719
i i didn't understand

2589
01:43:28,719 --> 01:43:32,080
are we cutting off queue the folks

2590
01:43:32,080 --> 01:43:35,600
on the cube can go but okay then

2591
01:43:35,600 --> 01:43:38,639
can you give me a chance

2592
01:43:41,600 --> 01:43:44,960
uh i i listened for the whole

2593
01:43:44,960 --> 01:43:47,360
presentation and still i don't

2594
01:43:47,360 --> 01:43:48,960
understand to which

2595
01:43:48,960 --> 01:43:52,080
definition of network slicing this

2596
01:43:52,080 --> 01:43:54,320
proposal is applicable to

2597
01:43:54,320 --> 01:43:57,679
and another one is just minor net

2598
01:43:57,679 --> 01:44:02,239
that uh exp field in mpls label element

2599
01:44:02,239 --> 01:44:05,280
has will remain traffic class for

2600
01:44:05,280 --> 01:44:08,639
10 plus years so uh just

2601
01:44:08,639 --> 01:44:11,280
please use the proper identification

2602
01:44:11,280 --> 01:44:11,760
thank you

2603
01:44:11,760 --> 01:44:13,840
yeah and answer that on the list or

2604
01:44:13,840 --> 01:44:14,960
other discussion

2605
01:44:14,960 --> 01:44:17,920
chang thank you

2606
01:44:19,199 --> 01:44:22,320
changly you're next

2607
01:44:22,400 --> 01:44:24,560
do you really think eight bits is enough

2608
01:44:24,560 --> 01:44:26,400
for the slice id and

2609
01:44:26,400 --> 01:44:30,800
like for also for amperes as amperes

2610
01:44:30,800 --> 01:44:32,639
is it appropriate to use the entropy

2611
01:44:32,639 --> 01:44:34,639
label because each node we

2612
01:44:34,639 --> 01:44:37,760
try to first whole c stack

2613
01:44:37,760 --> 01:44:40,400
get the entropy label so so what's your

2614
01:44:40,400 --> 01:44:42,000
opinion on that

2615
01:44:42,000 --> 01:44:44,480
sorry chang this is jim um please take

2616
01:44:44,480 --> 01:44:46,000
that one to the list

2617
01:44:46,000 --> 01:44:47,760
if if their comments please give the

2618
01:44:47,760 --> 01:44:49,520
comments quickly then we can move on if

2619
01:44:49,520 --> 01:44:50,560
they are actual

2620
01:44:50,560 --> 01:44:52,239
technical questions please do it on the

2621
01:44:52,239 --> 01:44:54,480
list

2622
01:44:54,800 --> 01:44:57,840
here let's see thank you

2623
01:44:57,840 --> 01:44:59,840
thank you for bruno that comment thank

2624
01:44:59,840 --> 01:45:00,880
you

2625
01:45:00,880 --> 01:45:04,159
thank you hi this is tarek uh um

2626
01:45:04,159 --> 01:45:06,239
you didn't number your slides uh i i

2627
01:45:06,239 --> 01:45:08,159
can't tell you which slide to go to

2628
01:45:08,159 --> 01:45:10,239
i'll i'll tell you what i remember you

2629
01:45:10,239 --> 01:45:11,840
you you flashed on the slide

2630
01:45:11,840 --> 01:45:14,800
it was about uh a slice is independent

2631
01:45:14,800 --> 01:45:16,239
of the topology

2632
01:45:16,239 --> 01:45:20,159
in fact there are requirements that

2633
01:45:20,159 --> 01:45:22,560
a slice can be steered or should be

2634
01:45:22,560 --> 01:45:23,840
steered on

2635
01:45:23,840 --> 01:45:25,920
certain topological elements i'll give

2636
01:45:25,920 --> 01:45:26,960
an example

2637
01:45:26,960 --> 01:45:29,520
you want secure links or you have

2638
01:45:29,520 --> 01:45:30,960
diversity requirements

2639
01:45:30,960 --> 01:45:33,360
uh which aren't under under discussion

2640
01:45:33,360 --> 01:45:35,280
uh in these working group

2641
01:45:35,280 --> 01:45:38,480
uh a slice has topological dependency

2642
01:45:38,480 --> 01:45:39,199
it's not

2643
01:45:39,199 --> 01:45:41,520
uh independent i don't know which slide

2644
01:45:41,520 --> 01:45:42,400
you were

2645
01:45:42,400 --> 01:45:44,400
maybe the previous one or this one

2646
01:45:44,400 --> 01:45:46,000
you're saying that yeah

2647
01:45:46,000 --> 01:45:48,639
this one we we could use this one the

2648
01:45:48,639 --> 01:45:50,320
the previous one i think that they also

2649
01:45:50,320 --> 01:45:51,119
had uh

2650
01:45:51,119 --> 01:45:54,000
same comments i i think yeah i think

2651
01:45:54,000 --> 01:45:55,679
this is a topic that needs more

2652
01:45:55,679 --> 01:45:59,840
discussion than we can get through

2653
01:46:02,639 --> 01:46:04,320
daniel you're the last one and then

2654
01:46:04,320 --> 01:46:06,639
we'll go back to tarek for his name

2655
01:46:06,639 --> 01:46:10,080
not to turn for go on daniel

2656
01:46:10,080 --> 01:46:12,719
so greg about the question about the

2657
01:46:12,719 --> 01:46:15,360
definition of the slicing that you had

2658
01:46:15,360 --> 01:46:17,440
i know that someone from from huawei

2659
01:46:17,440 --> 01:46:18,960
robin sent an email with

2660
01:46:18,960 --> 01:46:21,520
like uh in this working group on the or

2661
01:46:21,520 --> 01:46:23,600
the test one that there's about like

2662
01:46:23,600 --> 01:46:26,239
eight different document attempting to

2663
01:46:26,239 --> 01:46:29,040
come up with a definition of slicing

2664
01:46:29,040 --> 01:46:33,040
and i read them all in in this document

2665
01:46:33,040 --> 01:46:33,679
here that

2666
01:46:33,679 --> 01:46:36,960
tarak is just a presentation if we zoom

2667
01:46:36,960 --> 01:46:38,080
out a little bit

2668
01:46:38,080 --> 01:46:39,920
especially with that slide or the one

2669
01:46:39,920 --> 01:46:41,119
previous

2670
01:46:41,119 --> 01:46:42,800
we're talking about the fundamental

2671
01:46:42,800 --> 01:46:45,119
block and i don't think when you look at

2672
01:46:45,119 --> 01:46:46,880
those fundamental blocks here

2673
01:46:46,880 --> 01:46:50,320
that one exactly that one it violate any

2674
01:46:50,320 --> 01:46:50,960
of the

2675
01:46:50,960 --> 01:46:54,239
attempted eight different document

2676
01:46:54,239 --> 01:46:56,719
of the definition of slices i don't

2677
01:46:56,719 --> 01:46:58,480
think it'd violate that even though if

2678
01:46:58,480 --> 01:46:59,840
the meaning of the slices

2679
01:46:59,840 --> 01:47:03,119
is not that really clear i think those

2680
01:47:03,119 --> 01:47:05,199
building black are still required and

2681
01:47:05,199 --> 01:47:06,400
that's pretty much how i

2682
01:47:06,400 --> 01:47:08,480
i see it myself as a co-author when i'm

2683
01:47:08,480 --> 01:47:10,080
thinking of designing

2684
01:47:10,080 --> 01:47:12,159
a network that requires end-to-end

2685
01:47:12,159 --> 01:47:15,440
transport slices across the backbone

2686
01:47:15,440 --> 01:47:18,960
but the point is that we could have a

2687
01:47:18,960 --> 01:47:20,080
summary of

2688
01:47:20,080 --> 01:47:23,280
the definition of of of what's

2689
01:47:23,280 --> 01:47:25,600
a slice added to this one or having a

2690
01:47:25,600 --> 01:47:27,119
reference once

2691
01:47:27,119 --> 01:47:29,280
we make up our mind about what's the

2692
01:47:29,280 --> 01:47:31,679
real definition of a slice and

2693
01:47:31,679 --> 01:47:34,320
maybe i can jeffy were behind me but i'm

2694
01:47:34,320 --> 01:47:35,840
pretty sure you wanted to highlight the

2695
01:47:35,840 --> 01:47:37,600
definition of slices

2696
01:47:37,600 --> 01:47:40,560
who still have the time on the chair no

2697
01:47:40,560 --> 01:47:41,920
we're out of time

2698
01:47:41,920 --> 01:47:43,840
i'm there is a lot of work going on on

2699
01:47:43,840 --> 01:47:45,679
defining slicing

2700
01:47:45,679 --> 01:47:47,520
to the degree this is a definition

2701
01:47:47,520 --> 01:47:49,280
independent building block that's great

2702
01:47:49,280 --> 01:47:50,880
to the degree it's definition dependent

2703
01:47:50,880 --> 01:47:51,920
it needs to be clear about the

2704
01:47:51,920 --> 01:47:52,880
definition

2705
01:47:52,880 --> 01:47:55,040
that the relationship needs to be

2706
01:47:55,040 --> 01:47:56,960
clarified in the draft and be discussed

2707
01:47:56,960 --> 01:47:58,159
on the list

2708
01:47:58,159 --> 01:48:01,839
and with that we move on to terex

2709
01:48:02,840 --> 01:48:05,280
presentation

2710
01:48:05,280 --> 01:48:07,440
i don't see the slides yet hello this is

2711
01:48:07,440 --> 01:48:09,360
uh tarek and today i'm

2712
01:48:09,360 --> 01:48:11,360
going to give you an update uh about a

2713
01:48:11,360 --> 01:48:12,800
solution to

2714
01:48:12,800 --> 01:48:15,600
realize network slicing over an sr

2715
01:48:15,600 --> 01:48:16,719
network

2716
01:48:16,719 --> 01:48:18,960
i am presenting on the behalf of the

2717
01:48:18,960 --> 01:48:19,840
co-authors

2718
01:48:19,840 --> 01:48:21,840
uh i would like to thank all of them

2719
01:48:21,840 --> 01:48:24,000
next slide please

2720
01:48:24,000 --> 01:48:26,400
so i'll give a timeline or a history of

2721
01:48:26,400 --> 01:48:28,639
uh the updates on this draft and then

2722
01:48:28,639 --> 01:48:30,719
i'll dig into the

2723
01:48:30,719 --> 01:48:32,960
maybe a review or recap of the solution

2724
01:48:32,960 --> 01:48:34,560
we're presenting and then close off with

2725
01:48:34,560 --> 01:48:35,840
the next steps

2726
01:48:35,840 --> 01:48:39,280
next slide please so timeline revision

2727
01:48:39,280 --> 01:48:40,960
zero was introduced as a companion

2728
01:48:40,960 --> 01:48:42,080
document

2729
01:48:42,080 --> 01:48:44,639
to the solution document we presented in

2730
01:48:44,639 --> 01:48:45,679
teas

2731
01:48:45,679 --> 01:48:48,159
and it describes how we can realize the

2732
01:48:48,159 --> 01:48:48,800
solution

2733
01:48:48,800 --> 01:48:52,320
in nsr network rev one included

2734
01:48:52,320 --> 01:48:54,880
updates to align with certain

2735
01:48:54,880 --> 01:48:56,719
terminology that we

2736
01:48:56,719 --> 01:48:59,600
added in the based document and we

2737
01:48:59,600 --> 01:49:01,040
addressed feedback from

2738
01:49:01,040 --> 01:49:03,520
uh working group members and we thank

2739
01:49:03,520 --> 01:49:04,639
them for that

2740
01:49:04,639 --> 01:49:06,480
and we have new co-authors who are

2741
01:49:06,480 --> 01:49:08,080
joined our work

2742
01:49:08,080 --> 01:49:11,679
next slide please so these are key

2743
01:49:11,679 --> 01:49:13,199
terminologies i'm not going to go

2744
01:49:13,199 --> 01:49:16,719
uh word by word in details i'll just

2745
01:49:16,719 --> 01:49:19,360
high level uh mention that the slice

2746
01:49:19,360 --> 01:49:20,080
policy

2747
01:49:20,080 --> 01:49:23,440
is a is a means to

2748
01:49:23,440 --> 01:49:26,480
instead to install a set of rules uh on

2749
01:49:26,480 --> 01:49:28,560
a network element so that we can realize

2750
01:49:28,560 --> 01:49:30,159
a slice aggregate

2751
01:49:30,159 --> 01:49:32,239
and i'll uh i'll let you read through

2752
01:49:32,239 --> 01:49:33,760
these uh uh

2753
01:49:33,760 --> 01:49:37,199
terms uh offline um and i'll i'll be

2754
01:49:37,199 --> 01:49:38,639
using the slice policy

2755
01:49:38,639 --> 01:49:42,400
uh in subsequent slides so

2756
01:49:42,400 --> 01:49:45,679
um next slide please

2757
01:49:45,760 --> 01:49:48,400
so very high level overview a router

2758
01:49:48,400 --> 01:49:49,360
that is

2759
01:49:49,360 --> 01:49:51,760
going to process a slice aggregate

2760
01:49:51,760 --> 01:49:52,400
packet

2761
01:49:52,400 --> 01:49:55,679
uh will require to do a multi number of

2762
01:49:55,679 --> 01:49:56,560
things

2763
01:49:56,560 --> 01:49:58,400
the first is to identify the packet

2764
01:49:58,400 --> 01:50:00,400
belongs to slice aggregate

2765
01:50:00,400 --> 01:50:02,639
that's number one number two we need a

2766
01:50:02,639 --> 01:50:04,560
way to select the next hop

2767
01:50:04,560 --> 01:50:07,520
to forward the packet on and this is uh

2768
01:50:07,520 --> 01:50:10,239
determined by the topology of the slice

2769
01:50:10,239 --> 01:50:12,719
and the optimization criteria that we

2770
01:50:12,719 --> 01:50:13,679
are seeking

2771
01:50:13,679 --> 01:50:15,280
and the third rule that we need to

2772
01:50:15,280 --> 01:50:17,760
enforce is the forwarding treatment

2773
01:50:17,760 --> 01:50:20,800
uh this is uh you know maybe a certain

2774
01:50:20,800 --> 01:50:22,800
percentage of the bandwidth on a shared

2775
01:50:22,800 --> 01:50:24,000
link that you want to assign

2776
01:50:24,000 --> 01:50:26,639
to a slice aggregate so all these rules

2777
01:50:26,639 --> 01:50:27,760
are part of a splice

2778
01:50:27,760 --> 01:50:30,000
policy definition that we are

2779
01:50:30,000 --> 01:50:32,000
introducing in the base document

2780
01:50:32,000 --> 01:50:34,480
uh on the right hand side i'm just

2781
01:50:34,480 --> 01:50:35,599
showing high level

2782
01:50:35,599 --> 01:50:37,199
structure of that slice policy

2783
01:50:37,199 --> 01:50:40,960
definition next slide please

2784
01:50:41,280 --> 01:50:43,520
so we have we are presenting two

2785
01:50:43,520 --> 01:50:45,760
approaches to realize the solution

2786
01:50:45,760 --> 01:50:48,719
and an sr capable network the first one

2787
01:50:48,719 --> 01:50:50,320
is by

2788
01:50:50,320 --> 01:50:53,280
assigning uh uh associating a slice

2789
01:50:53,280 --> 01:50:54,800
aggregate with a sid

2790
01:50:54,800 --> 01:50:57,920
so so that packets uh using those

2791
01:50:57,920 --> 01:51:01,679
specific sids will uh will get the uh

2792
01:51:01,679 --> 01:51:03,599
the identification or association to the

2793
01:51:03,599 --> 01:51:05,679
slice aggregate as well as

2794
01:51:05,679 --> 01:51:08,080
the forwarding action the next top

2795
01:51:08,080 --> 01:51:09,199
selection

2796
01:51:09,199 --> 01:51:11,760
so the the extensions the to advertise

2797
01:51:11,760 --> 01:51:14,000
the slice aggregate prefix and the jcc

2798
01:51:14,000 --> 01:51:14,560
sets

2799
01:51:14,560 --> 01:51:17,440
were presented on tuesday there's a

2800
01:51:17,440 --> 01:51:19,119
pointer to the draft

2801
01:51:19,119 --> 01:51:21,920
the second option we are proposing is

2802
01:51:21,920 --> 01:51:24,960
carrying a separate id in the packet

2803
01:51:24,960 --> 01:51:27,199
so this is uh very similar to what

2804
01:51:27,199 --> 01:51:28,560
you've seen

2805
01:51:28,560 --> 01:51:30,639
zafar talked about it we are part of

2806
01:51:30,639 --> 01:51:33,360
that work and we have proposals there

2807
01:51:33,360 --> 01:51:36,800
so the idea is to carry an identifier

2808
01:51:36,800 --> 01:51:38,480
that will associate the packet

2809
01:51:38,480 --> 01:51:41,119
a slice aggregate uh i'm i'm putting

2810
01:51:41,119 --> 01:51:43,040
three pointers here just for reference

2811
01:51:43,040 --> 01:51:43,840
uh three

2812
01:51:43,840 --> 01:51:45,840
we the working groups the respective

2813
01:51:45,840 --> 01:51:47,520
working groups are still

2814
01:51:47,520 --> 01:51:49,040
working out the details on which

2815
01:51:49,040 --> 01:51:50,639
proposal is the best

2816
01:51:50,639 --> 01:51:52,960
and uh but we are advocating this

2817
01:51:52,960 --> 01:51:54,320
proposal as well

2818
01:51:54,320 --> 01:51:57,119
next slide please

2819
01:51:57,920 --> 01:52:01,360
i'll go with the first option that we

2820
01:52:01,360 --> 01:52:03,599
are presenting to realize the solution

2821
01:52:03,599 --> 01:52:04,639
uh as i said

2822
01:52:04,639 --> 01:52:07,920
we uh we will advertise sids associated

2823
01:52:07,920 --> 01:52:10,080
with a specific slice aggregate

2824
01:52:10,080 --> 01:52:14,080
so uh um the forwarding action in that

2825
01:52:14,080 --> 01:52:14,560
case

2826
01:52:14,560 --> 01:52:17,679
is dictated by the top or active segment

2827
01:52:17,679 --> 01:52:20,960
be it prefix or adjacency the topology

2828
01:52:20,960 --> 01:52:23,040
is defined by the

2829
01:52:23,040 --> 01:52:24,880
you know if it's a prefix set it carries

2830
01:52:24,880 --> 01:52:26,719
the empty id and

2831
01:52:26,719 --> 01:52:30,000
a flex algorithm algo number and the fad

2832
01:52:30,000 --> 01:52:32,080
will be will dictate the the topology

2833
01:52:32,080 --> 01:52:33,679
that is used uh

2834
01:52:33,679 --> 01:52:36,400
to select the next stop um this the

2835
01:52:36,400 --> 01:52:37,920
forwarding treatment is the

2836
01:52:37,920 --> 01:52:40,960
is is a rule uh uh part of the slice

2837
01:52:40,960 --> 01:52:42,239
policy definition as i

2838
01:52:42,239 --> 01:52:45,920
i mentioned in the earlier slide now

2839
01:52:45,920 --> 01:52:48,960
some scale impact to this proposal we

2840
01:52:48,960 --> 01:52:52,400
we are not proposing a flex algo

2841
01:52:52,400 --> 01:52:53,440
definition

2842
01:52:53,440 --> 01:52:56,880
for a slice aggregate so the same flux

2843
01:52:56,880 --> 01:52:58,639
algo definition or multiple slice

2844
01:52:58,639 --> 01:53:00,719
aggregate can use the same

2845
01:53:00,719 --> 01:53:03,040
flex argo definition this is a good

2846
01:53:03,040 --> 01:53:03,760
point

2847
01:53:03,760 --> 01:53:07,119
other proposals are advocating a flex

2848
01:53:07,119 --> 01:53:08,320
algo definition per

2849
01:53:08,320 --> 01:53:11,040
slice or per slice aggregate whatever

2850
01:53:11,040 --> 01:53:12,400
the term would be

2851
01:53:12,400 --> 01:53:15,440
the second point is the igp topology can

2852
01:53:15,440 --> 01:53:17,119
be shared among multiple slice

2853
01:53:17,119 --> 01:53:18,239
aggregates

2854
01:53:18,239 --> 01:53:20,880
uh it can be and that will allow more

2855
01:53:20,880 --> 01:53:21,760
better scale

2856
01:53:21,760 --> 01:53:24,480
the computed path uh you know a result

2857
01:53:24,480 --> 01:53:26,239
of the optimization criteria

2858
01:53:26,239 --> 01:53:28,560
can also be shared by multiple slice

2859
01:53:28,560 --> 01:53:29,599
aggregate

2860
01:53:29,599 --> 01:53:33,920
sets next slide please

2861
01:53:33,920 --> 01:53:36,960
so this is an example where a packet is

2862
01:53:36,960 --> 01:53:37,760
carried

2863
01:53:37,760 --> 01:53:40,960
by a top sid that is associated with a

2864
01:53:40,960 --> 01:53:42,239
slice aggregate

2865
01:53:42,239 --> 01:53:46,000
i have uh a sa1 packet

2866
01:53:46,000 --> 01:53:49,360
with a top set of 16 05 and

2867
01:53:49,360 --> 01:53:52,639
sa2 packet with 17 05 both of them are

2868
01:53:52,639 --> 01:53:54,639
destined to note 5.

2869
01:53:54,639 --> 01:53:58,960
on any transit node let's assume it's 3

2870
01:53:58,960 --> 01:54:01,280
we have a slice selector which will put

2871
01:54:01,280 --> 01:54:02,639
the packet

2872
01:54:02,639 --> 01:54:06,840
based on the top active segment into the

2873
01:54:06,840 --> 01:54:08,000
respective

2874
01:54:08,000 --> 01:54:09,920
queue and then there's a hierarchical

2875
01:54:09,920 --> 01:54:11,280
queue there that you can

2876
01:54:11,280 --> 01:54:13,679
apply differentiated treatment based on

2877
01:54:13,679 --> 01:54:14,480
the exp

2878
01:54:14,480 --> 01:54:17,440
as well but but the high level what i

2879
01:54:17,440 --> 01:54:18,080
want to

2880
01:54:18,080 --> 01:54:19,599
share here is that the top active

2881
01:54:19,599 --> 01:54:21,119
segment is the one

2882
01:54:21,119 --> 01:54:23,920
that is used to identify the packet uh

2883
01:54:23,920 --> 01:54:26,719
or associated with the slice aggregate

2884
01:54:26,719 --> 01:54:29,599
next slide please

2885
01:54:30,400 --> 01:54:33,119
the second option is carrying the slice

2886
01:54:33,119 --> 01:54:34,480
aggregate

2887
01:54:34,480 --> 01:54:38,239
selector or id in the packet

2888
01:54:38,239 --> 01:54:40,080
the forwarding action in this case is

2889
01:54:40,080 --> 01:54:41,599
determined by the

2890
01:54:41,599 --> 01:54:45,040
top active segment whatever the top

2891
01:54:45,040 --> 01:54:47,599
active segment would be

2892
01:54:47,599 --> 01:54:50,880
next stops are computed as usual by igp

2893
01:54:50,880 --> 01:54:52,320
based on the topology and the

2894
01:54:52,320 --> 01:54:53,679
optimization

2895
01:54:53,679 --> 01:54:56,639
metric the the forwarding treatment as i

2896
01:54:56,639 --> 01:54:58,320
mentioned is part of the slice policy

2897
01:54:58,320 --> 01:54:59,280
definition that we

2898
01:54:59,280 --> 01:55:02,639
install and in terms of scale impact

2899
01:55:02,639 --> 01:55:03,280
here we

2900
01:55:03,280 --> 01:55:06,239
are reusing the sids so multiple size

2901
01:55:06,239 --> 01:55:08,719
aggregates can use

2902
01:55:08,719 --> 01:55:12,080
sids that are defined uh or instantiated

2903
01:55:12,080 --> 01:55:13,040
in the network

2904
01:55:13,040 --> 01:55:14,719
they are not specific to a specific

2905
01:55:14,719 --> 01:55:16,159
slice aggregate

2906
01:55:16,159 --> 01:55:18,800
the fads can be shared by multiple slice

2907
01:55:18,800 --> 01:55:20,320
aggregates based on the topology

2908
01:55:20,320 --> 01:55:21,599
requirement

2909
01:55:21,599 --> 01:55:24,639
uh again the second bullet is about the

2910
01:55:24,639 --> 01:55:26,159
topology can be shared

2911
01:55:26,159 --> 01:55:28,560
and the last point is that the computed

2912
01:55:28,560 --> 01:55:29,199
path

2913
01:55:29,199 --> 01:55:31,360
as a result can be shared by multiple

2914
01:55:31,360 --> 01:55:33,040
slice aggregate

2915
01:55:33,040 --> 01:55:35,280
packets depending on the top active

2916
01:55:35,280 --> 01:55:36,719
segment

2917
01:55:36,719 --> 01:55:39,599
next slide please

2918
01:55:40,400 --> 01:55:44,560
here's an example where we have a packet

2919
01:55:44,560 --> 01:55:48,480
destined from let's say one to five um

2920
01:55:48,480 --> 01:55:51,280
and you'll notice the top active segment

2921
01:55:51,280 --> 01:55:51,760
for

2922
01:55:51,760 --> 01:55:54,960
sa1 packet and sa2 packet both have the

2923
01:55:54,960 --> 01:55:55,440
same

2924
01:55:55,440 --> 01:55:59,360
uh segment routing sid 17 05

2925
01:55:59,360 --> 01:56:01,440
the selector in this case is carried in

2926
01:56:01,440 --> 01:56:03,199
a different field in the packet

2927
01:56:03,199 --> 01:56:05,040
i did not put details because there are

2928
01:56:05,040 --> 01:56:07,599
multiple proposals there

2929
01:56:07,599 --> 01:56:09,679
one of them was mentioned the entropy

2930
01:56:09,679 --> 01:56:10,639
label

2931
01:56:10,639 --> 01:56:12,639
encoding it in the entropy label is one

2932
01:56:12,639 --> 01:56:13,679
option but

2933
01:56:13,679 --> 01:56:16,560
the selector can be simply in the packet

2934
01:56:16,560 --> 01:56:18,239
and it will put the packet in the

2935
01:56:18,239 --> 01:56:21,520
specific slice aggregate

2936
01:56:21,520 --> 01:56:24,159
queue and we can achieve the same

2937
01:56:24,159 --> 01:56:25,199
hierarchical

2938
01:56:25,199 --> 01:56:29,839
treatment that we are after

2939
01:56:29,920 --> 01:56:31,360
that's what i want to see on this slide

2940
01:56:31,360 --> 01:56:33,040
next slide please so

2941
01:56:33,040 --> 01:56:36,159
we we welcome feedback um uh

2942
01:56:36,159 --> 01:56:39,760
on this proposal um we think uh

2943
01:56:39,760 --> 01:56:43,360
um this will allow us to realize the

2944
01:56:43,360 --> 01:56:44,080
solution

2945
01:56:44,080 --> 01:56:46,960
and sr with with automation required

2946
01:56:46,960 --> 01:56:49,040
with the slice policy

2947
01:56:49,040 --> 01:56:52,320
uh the automation we are providing the

2948
01:56:52,320 --> 01:56:55,199
uh the ease of instantiation of a slice

2949
01:56:55,199 --> 01:56:57,760
aggregate in the network

2950
01:56:57,760 --> 01:57:00,159
um i would like i would love to answer

2951
01:57:00,159 --> 01:57:02,560
any questions that anybody has

2952
01:57:02,560 --> 01:57:10,159
okay zebo

2953
01:57:10,159 --> 01:57:12,239
gebo you put yourself on the queue if

2954
01:57:12,239 --> 01:57:13,199
you have a question

2955
01:57:13,199 --> 01:57:16,320
please speak up uh hi

2956
01:57:16,320 --> 01:57:19,520
this is the ball from huawei and

2957
01:57:19,520 --> 01:57:23,840
multiple sites is the same topic it's a

2958
01:57:23,840 --> 01:57:27,199
can use pesticides as id auto slice

2959
01:57:27,199 --> 01:57:27,920
extension

2960
01:57:27,920 --> 01:57:31,360
intel plan this solution has been posed

2961
01:57:31,360 --> 01:57:35,760
in sr for vpn plus and vtn draft

2962
01:57:35,760 --> 01:57:39,679
in 2019 and earlier 2020

2963
01:57:39,679 --> 01:57:42,719
and it's practically just right

2964
01:57:42,719 --> 01:57:46,159
aggregate id is same as we can id

2965
01:57:46,159 --> 01:57:50,638
i think it's no need to support

2966
01:57:51,840 --> 01:57:54,639
yeah um my feedback on this we are aware

2967
01:57:54,639 --> 01:57:55,280
about this

2968
01:57:55,280 --> 01:57:59,199
vtn proposal uh we did talk to the

2969
01:57:59,199 --> 01:58:02,080
authors and we had a chance to talk

2970
01:58:02,080 --> 01:58:02,719
about it i

2971
01:58:02,719 --> 01:58:04,960
we there is an email thread that was

2972
01:58:04,960 --> 01:58:07,679
started we think the slice aggregate has

2973
01:58:07,679 --> 01:58:11,040
some key differences to a vtn

2974
01:58:11,040 --> 01:58:12,719
and we would like to take that

2975
01:58:12,719 --> 01:58:14,560
discussion further if there is any

2976
01:58:14,560 --> 01:58:16,480
alignment that could happen we are

2977
01:58:16,480 --> 01:58:19,440
welcome we we would welcome them we're

2978
01:58:19,440 --> 01:58:21,119
happy to do it

2979
01:58:21,119 --> 01:58:22,740
okay don

2980
01:58:22,740 --> 01:58:26,160
[Music]

2981
01:58:27,679 --> 01:58:30,080
as we discuss in the test working group

2982
01:58:30,080 --> 01:58:32,080
the terminology consistency will be

2983
01:58:32,080 --> 01:58:34,000
important for people to

2984
01:58:34,000 --> 01:58:37,920
understand and compare the solutions

2985
01:58:37,920 --> 01:58:41,040
and then since this is a sr specific

2986
01:58:41,040 --> 01:58:42,239
document

2987
01:58:42,239 --> 01:58:44,960
one commons is is the essay specific

2988
01:58:44,960 --> 01:58:45,679
seed

2989
01:58:45,679 --> 01:58:49,840
a kind of resource aware segment

2990
01:58:50,880 --> 01:58:53,679
i didn't catch the remaining part so the

2991
01:58:53,679 --> 01:58:55,760
the second half of this question was to

2992
01:58:55,760 --> 01:58:56,800
note that

2993
01:58:56,800 --> 01:59:00,159
the the the sid you're just defining

2994
01:59:00,159 --> 01:59:01,440
here

2995
01:59:01,440 --> 01:59:03,040
seems to have some significant

2996
01:59:03,040 --> 01:59:06,400
similarity with the adopted resource

2997
01:59:06,400 --> 01:59:09,760
sids that we have and

2998
01:59:09,760 --> 01:59:11,920
let me save some time i think we need to

2999
01:59:11,920 --> 01:59:13,760
sort out the relationship

3000
01:59:13,760 --> 01:59:16,960
and tune both of them to get there

3001
01:59:16,960 --> 01:59:20,239
okay um so g i acknowledge the first

3002
01:59:20,239 --> 01:59:20,800
part

3003
01:59:20,800 --> 01:59:24,080
uh we will follow up on the second part

3004
01:59:24,080 --> 01:59:25,920
uh there is some key differences between

3005
01:59:25,920 --> 01:59:27,599
s asid and resource

3006
01:59:27,599 --> 01:59:30,719
aware sets that uh

3007
01:59:30,719 --> 01:59:32,800
at one time you were not proposing

3008
01:59:32,800 --> 01:59:35,119
extensions uh to associate

3009
01:59:35,119 --> 01:59:38,480
a sid with a slice aggregate or a slice

3010
01:59:38,480 --> 01:59:40,719
i don't know if that changed we can take

3011
01:59:40,719 --> 01:59:43,119
a look no problem

3012
01:59:43,119 --> 01:59:44,560
there were no protocol extensions

3013
01:59:44,560 --> 01:59:46,400
originally

3014
01:59:46,400 --> 01:59:50,480
last last topic so far

3015
01:59:50,480 --> 01:59:53,840
you get the last question so far okay so

3016
01:59:53,840 --> 01:59:57,679
uh my question is that when you use mpls

3017
01:59:57,679 --> 01:59:58,400
label

3018
01:59:58,400 --> 02:00:01,440
to carry the slice id um

3019
02:00:01,440 --> 02:00:02,880
can you comment on the backward

3020
02:00:02,880 --> 02:00:05,360
compatibility like if you have a device

3021
02:00:05,360 --> 02:00:08,080
in between the two nodes that are

3022
02:00:08,080 --> 02:00:09,840
participating

3023
02:00:09,840 --> 02:00:12,719
and what happened do you need all nodes

3024
02:00:12,719 --> 02:00:15,440
to be upgraded

3025
02:00:15,840 --> 02:00:18,000
uh depending on the solution that we

3026
02:00:18,000 --> 02:00:19,040
there are multiple

3027
02:00:19,040 --> 02:00:21,040
solutions that we are presenting uh

3028
02:00:21,040 --> 02:00:22,400
depending on which working group you

3029
02:00:22,400 --> 02:00:23,199
mean

3030
02:00:23,199 --> 02:00:25,599
uh we would like the solution to be

3031
02:00:25,599 --> 02:00:27,760
backward compatible such that a

3032
02:00:27,760 --> 02:00:30,960
slice aggregate packet traversing a node

3033
02:00:30,960 --> 02:00:34,080
that doesn't support uh that capability

3034
02:00:34,080 --> 02:00:35,920
and that the packet will be forwarded

3035
02:00:35,920 --> 02:00:37,280
still and

3036
02:00:37,280 --> 02:00:39,199
it might get the forwarding treatment

3037
02:00:39,199 --> 02:00:40,880
that it's after but

3038
02:00:40,880 --> 02:00:43,199
it will not be dropped and other than

3039
02:00:43,199 --> 02:00:45,440
the entropy label usage

3040
02:00:45,440 --> 02:00:47,760
uh i was i was specifically talking

3041
02:00:47,760 --> 02:00:49,119
about the option

3042
02:00:49,119 --> 02:00:51,679
where mpls label or top label carry the

3043
02:00:51,679 --> 02:00:54,320
slice id

3044
02:00:55,760 --> 02:00:58,880
with bruno's draft i understand and

3045
02:00:58,880 --> 02:01:00,560
that's what i was talking about backward

3046
02:01:00,560 --> 02:01:01,840
compatibility

3047
02:01:01,840 --> 02:01:03,760
in bruno's ground but my question was

3048
02:01:03,760 --> 02:01:04,960
for the others

3049
02:01:04,960 --> 02:01:06,960
there are multiple proposals my answer

3050
02:01:06,960 --> 02:01:09,280
is there are multiple ways to carry the

3051
02:01:09,280 --> 02:01:12,080
slice aggregate ids one of them is the

3052
02:01:12,080 --> 02:01:13,440
inside the entropy label

3053
02:01:13,440 --> 02:01:16,400
other ones are there i left pointers and

3054
02:01:16,400 --> 02:01:18,159
backward compatibility is

3055
02:01:18,159 --> 02:01:21,440
is required in all yeah it'd be

3056
02:01:21,440 --> 02:01:23,119
good to see that description in the

3057
02:01:23,119 --> 02:01:24,480
front draft thank you

3058
02:01:24,480 --> 02:01:28,000
okay thank you all

3059
02:01:28,000 --> 02:01:30,000
it has been a set of interesting

3060
02:01:30,000 --> 02:01:31,920
discussions i wish we had more time for

3061
02:01:31,920 --> 02:01:33,360
more of the discussions

3062
02:01:33,360 --> 02:01:36,400
please take them to the list just

3063
02:01:36,400 --> 02:01:38,800
just one comment uh we had two uh

3064
02:01:38,800 --> 02:01:41,199
presentation if time arrows

3065
02:01:41,199 --> 02:01:42,960
uh for your information there are a

3066
02:01:42,960 --> 02:01:44,560
schedule in other working groups

3067
02:01:44,560 --> 02:01:46,800
so you can uh have a look for example

3068
02:01:46,800 --> 02:01:48,080
for um

3069
02:01:48,080 --> 02:01:50,960
associated channel over ipv6 there is a

3070
02:01:50,960 --> 02:01:52,400
presentation in rtg

3071
02:01:52,400 --> 02:01:55,920
wg tomorrow and for scality

3072
02:01:55,920 --> 02:01:58,560
consideration for vpn plus

3073
02:01:58,560 --> 02:02:00,719
there is a presentation in teas actually

3074
02:02:00,719 --> 02:02:02,639
it was yesterday

3075
02:02:02,639 --> 02:02:05,840
thank you

3076
02:02:06,540 --> 02:02:08,880
[Music]

3077
02:02:08,880 --> 02:02:10,960
so thank everybody thank you all for

3078
02:02:10,960 --> 02:02:18,800
that for your time

3079
02:02:18,800 --> 02:02:21,280
okay

3080
02:02:29,960 --> 02:02:32,960
bye

