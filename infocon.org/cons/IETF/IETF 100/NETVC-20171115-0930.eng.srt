1
00:00:22,970 --> 00:00:27,320
<font color="#E5E5E5">hey</font><font color="#CCCCCC"> pops</font><font color="#E5E5E5"> 8:30</font>

2
00:00:36,140 --> 00:00:40,789
everybody<font color="#E5E5E5"> welcome to NBC</font>

3
00:00:45,700 --> 00:01:01,750
<font color="#E5E5E5">sorry</font><font color="#CCCCCC"> well testing</font><font color="#E5E5E5"> okay welcome to net</font>

4
00:00:53,890 --> 00:01:03,100
<font color="#E5E5E5">BC</font><font color="#CCCCCC"> so first off note well</font><font color="#E5E5E5"> should</font>

5
00:01:01,750 --> 00:01:04,989
everybody should be familiar<font color="#E5E5E5"> with this</font>

6
00:01:03,100 --> 00:01:06,940
but<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> particular working group</font>

7
00:01:04,989 --> 00:01:08,320
please make absolutely sure<font color="#E5E5E5"> you're</font>

8
00:01:06,940 --> 00:01:10,780
familiar<font color="#CCCCCC"> with</font><font color="#E5E5E5"> it because the goal this</font>

9
00:01:08,320 --> 00:01:14,050
working<font color="#CCCCCC"> group is to produce royalty free</font>

10
00:01:10,780 --> 00:01:15,340
video codec<font color="#CCCCCC"> so we definitely need</font>

11
00:01:14,050 --> 00:01:22,750
everyone<font color="#CCCCCC"> to pay</font><font color="#E5E5E5"> very close attention to</font>

12
00:01:15,340 --> 00:01:25,420
the IPR rules<font color="#E5E5E5"> in the note well start</font>

13
00:01:22,750 --> 00:01:28,530
blue sheets<font color="#CCCCCC"> around I think</font><font color="#E5E5E5"> we'll need</font>

14
00:01:25,420 --> 00:01:28,530
one so I'm<font color="#CCCCCC"> not</font><font color="#E5E5E5"> gonna bother with</font>

15
00:01:41,579 --> 00:01:46,149
what always<font color="#E5E5E5"> takes the</font><font color="#CCCCCC"> majority of the</font>

16
00:01:44,229 --> 00:01:50,200
ten minutes of chair time<font color="#CCCCCC"> note taker we</font>

17
00:01:46,149 --> 00:01:53,170
need a<font color="#CCCCCC"> note-taker volunteer very tourist</font>

18
00:01:50,200 --> 00:01:56,700
notes it<font color="#CCCCCC"> doesn't have to be a every</font>

19
00:01:53,170 --> 00:01:56,700
detail<font color="#CCCCCC"> just</font><font color="#E5E5E5"> major decision points</font>

20
00:01:59,340 --> 00:02:02,340
volunteers

21
00:02:05,600 --> 00:02:16,100
anyone uh<font color="#E5E5E5"> on the media</font><font color="#CCCCCC"> Co want to</font>

22
00:02:08,270 --> 00:02:20,450
volunteer for taking<font color="#E5E5E5"> notes</font><font color="#CCCCCC"> in jabber</font>

23
00:02:16,100 --> 00:02:21,799
room volunteer for taking notes we're

24
00:02:20,450 --> 00:02:24,980
have to impose on someone now

25
00:02:21,800 --> 00:02:26,930
Oh Nathan did thank you very much Nathan

26
00:02:24,980 --> 00:02:32,149
took excellent<font color="#E5E5E5"> notes last time or</font><font color="#CCCCCC"> the</font>

27
00:02:26,930 --> 00:02:34,400
<font color="#E5E5E5">time before appreciate</font><font color="#CCCCCC"> that we have a</font>

28
00:02:32,150 --> 00:02:41,959
<font color="#E5E5E5">jabber scribe volunteer that's much</font>

29
00:02:34,400 --> 00:02:46,700
easier<font color="#E5E5E5"> just relay the room do you want</font>

30
00:02:41,959 --> 00:02:51,560
to do it since we're up here anyway<font color="#E5E5E5"> and</font>

31
00:02:46,700 --> 00:02:54,040
<font color="#E5E5E5">now we have our guest co-chair thank you</font>

32
00:02:51,560 --> 00:02:54,040
<font color="#E5E5E5">very much man</font>

33
00:02:55,570 --> 00:03:00,709
all right so quick agenda<font color="#CCCCCC"> Bash just</font>

34
00:02:59,510 --> 00:03:04,100
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> spend a few</font><font color="#CCCCCC"> minutes probably</font><font color="#E5E5E5"> not</font>

35
00:03:00,709 --> 00:03:08,390
<font color="#E5E5E5">ten on on the status of the current</font>

36
00:03:04,100 --> 00:03:13,180
documents<font color="#E5E5E5"> and then Thomas is going to</font>

37
00:03:08,390 --> 00:03:15,640
give<font color="#E5E5E5"> us an update on the test document</font>

38
00:03:13,180 --> 00:03:18,970
<font color="#CCCCCC">and Steiner will give us an update on</font>

39
00:03:15,640 --> 00:03:21,140
Thor<font color="#CCCCCC"> and</font><font color="#E5E5E5"> 81 progress and comparisons</font>

40
00:03:18,970 --> 00:03:26,660
followed by Tim giving an update<font color="#CCCCCC"> on</font>

41
00:03:21,140 --> 00:03:29,720
<font color="#CCCCCC">dalla</font><font color="#E5E5E5"> 81 transforms and then Luke is</font>

42
00:03:26,660 --> 00:03:31,760
going to give<font color="#E5E5E5"> us the latest</font><font color="#CCCCCC"> chromo</font>

43
00:03:29,720 --> 00:03:35,540
prediction from luma as it's being used

44
00:03:31,760 --> 00:03:39,790
<font color="#E5E5E5">in</font><font color="#CCCCCC"> 81</font><font color="#E5E5E5"> any changes people want to make</font><font color="#CCCCCC"> to</font>

45
00:03:35,540 --> 00:03:45,470
<font color="#CCCCCC">the agenda any other</font><font color="#E5E5E5"> items to bring up</font>

46
00:03:39,790 --> 00:03:51,590
if not let's go on<font color="#CCCCCC"> so quick recap of</font>

47
00:03:45,470 --> 00:03:55,930
where we are on<font color="#CCCCCC"> our milestones</font><font color="#E5E5E5"> we have a</font>

48
00:03:51,590 --> 00:04:00,500
milestone<font color="#E5E5E5"> for the requirements document</font>

49
00:03:55,930 --> 00:04:03,200
<font color="#E5E5E5">that that</font><font color="#CCCCCC"> was a workgroup</font><font color="#E5E5E5"> last called</font>

50
00:04:00,500 --> 00:04:05,209
<font color="#E5E5E5">but um because</font><font color="#CCCCCC"> it's being used by some</font>

51
00:04:03,200 --> 00:04:06,518
other standards body<font color="#E5E5E5"> or some other</font>

52
00:04:05,209 --> 00:04:09,459
industry consortium

53
00:04:06,519 --> 00:04:12,920
<font color="#CCCCCC">there may be some substantive changes to</font>

54
00:04:09,459 --> 00:04:15,320
<font color="#CCCCCC">it that we foresee coming up pretty soon</font>

55
00:04:12,920 --> 00:04:17,089
<font color="#CCCCCC">so we're holding</font><font color="#E5E5E5"> off on the Shepherd's</font>

56
00:04:15,320 --> 00:04:18,709
<font color="#E5E5E5">right up for now</font>

57
00:04:17,089 --> 00:04:21,529
and we're waiting<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> if there's</font>

58
00:04:18,709 --> 00:04:24,080
gonna be<font color="#E5E5E5"> some substantive changes</font><font color="#CCCCCC"> before</font>

59
00:04:21,529 --> 00:04:26,299
we<font color="#CCCCCC"> progress it on to the is</font><font color="#E5E5E5"> G hopefully</font>

60
00:04:24,080 --> 00:04:28,430
<font color="#CCCCCC">that'll conclude</font><font color="#E5E5E5"> within with in November</font>

61
00:04:26,300 --> 00:04:29,930
so<font color="#E5E5E5"> we're gonna update the milestone</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> to</font>

62
00:04:28,430 --> 00:04:33,590
November<font color="#CCCCCC"> I hope to get</font><font color="#E5E5E5"> that done before</font>

63
00:04:29,930 --> 00:04:36,050
<font color="#E5E5E5">the</font><font color="#CCCCCC"> end of</font><font color="#E5E5E5"> this month</font><font color="#CCCCCC"> and the testing</font>

64
00:04:33,590 --> 00:04:38,359
document<font color="#E5E5E5"> we're gonna update that</font>

65
00:04:36,050 --> 00:04:39,860
<font color="#E5E5E5">milestone as well because it's</font><font color="#CCCCCC"> a not</font>

66
00:04:38,360 --> 00:04:42,199
going to be concluded<font color="#CCCCCC"> anytime soon we</font>

67
00:04:39,860 --> 00:04:44,750
decided to<font color="#E5E5E5"> keep it alive</font><font color="#CCCCCC"> as a living</font>

68
00:04:42,199 --> 00:04:46,250
<font color="#CCCCCC">document while</font><font color="#E5E5E5"> while the codec</font>

69
00:04:44,750 --> 00:04:47,660
candidates are progressing because<font color="#CCCCCC"> we</font>

70
00:04:46,250 --> 00:04:50,180
expect the test methodology is<font color="#E5E5E5"> going to</font>

71
00:04:47,660 --> 00:04:53,630
keep<font color="#E5E5E5"> evolving</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> don't want to freeze</font>

72
00:04:50,180 --> 00:04:54,770
the document<font color="#E5E5E5"> pretty much early</font><font color="#CCCCCC"> so once</font>

73
00:04:53,630 --> 00:04:56,180
we have a candidate we're comfortable

74
00:04:54,770 --> 00:04:58,299
with and a testing methodology we're

75
00:04:56,180 --> 00:05:04,180
comfortable with<font color="#E5E5E5"> as being pretty stable</font>

76
00:04:58,300 --> 00:05:07,760
<font color="#CCCCCC">then we'll we'll move it on</font><font color="#E5E5E5"> the chain</font>

77
00:05:04,180 --> 00:05:09,650
for the actual<font color="#E5E5E5"> codec candidates we want</font>

78
00:05:07,760 --> 00:05:14,240
a single merged codec and we lack that

79
00:05:09,650 --> 00:05:16,549
<font color="#E5E5E5">right now</font><font color="#CCCCCC"> so we do not</font><font color="#E5E5E5"> have a candidate</font>

80
00:05:14,240 --> 00:05:18,740
yet for the milestone for<font color="#E5E5E5"> either the</font>

81
00:05:16,550 --> 00:05:21,169
codec spec or the reference

82
00:05:18,740 --> 00:05:23,510
<font color="#E5E5E5">implementation so we lack a merged</font>

83
00:05:21,169 --> 00:05:25,520
candidate or merged codebase so you see

84
00:05:23,510 --> 00:05:27,880
Tim and<font color="#E5E5E5"> stun are presenting different</font>

85
00:05:25,520 --> 00:05:32,270
<font color="#E5E5E5">tidbits but not one consolidated</font>

86
00:05:27,880 --> 00:05:35,510
<font color="#E5E5E5">codebase or standard so that's that's</font>

87
00:05:32,270 --> 00:05:37,280
<font color="#E5E5E5">the glaring issue we need to deal</font><font color="#CCCCCC"> with</font>

88
00:05:35,510 --> 00:05:38,690
<font color="#CCCCCC">his workgroup and try to bring out the</font>

89
00:05:37,280 --> 00:05:40,700
closure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Austin's going</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> pushed</font>

90
00:05:38,690 --> 00:05:43,460
out<font color="#CCCCCC"> to July</font><font color="#E5E5E5"> so hopefully by then we'll</font>

91
00:05:40,700 --> 00:05:45,680
<font color="#E5E5E5">have more clarity on on how to</font><font color="#CCCCCC"> come</font><font color="#E5E5E5"> up</font>

92
00:05:43,460 --> 00:05:48,010
<font color="#E5E5E5">with a converged candidate and then</font>

93
00:05:45,680 --> 00:05:51,340
finally there's the<font color="#E5E5E5"> milestone for</font>

94
00:05:48,010 --> 00:05:54,380
carrying this codec inside of containers

95
00:05:51,340 --> 00:05:58,070
storage formats<font color="#CCCCCC"> so we'll push that out</font>

96
00:05:54,380 --> 00:06:00,700
to end of 2018<font color="#CCCCCC"> because that work hasn't</font>

97
00:05:58,070 --> 00:06:00,700
<font color="#E5E5E5">even started yet</font>

98
00:06:01,960 --> 00:06:10,940
any comments on the milestones or<font color="#E5E5E5"> the</font>

99
00:06:04,669 --> 00:06:13,840
proposed changes<font color="#CCCCCC"> to them alright so</font>

100
00:06:10,940 --> 00:06:16,250
let's go on<font color="#E5E5E5"> to first item on our agenda</font>

101
00:06:13,840 --> 00:06:18,679
<font color="#E5E5E5">Thomas so you're gonna stop us on the</font>

102
00:06:16,250 --> 00:06:21,490
<font color="#CCCCCC">muñeco</font><font color="#E5E5E5"> yes he is can you come on over</font>

103
00:06:18,680 --> 00:06:21,490
<font color="#E5E5E5">to the queue</font>

104
00:06:35,559 --> 00:06:42,249
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> can you</font><font color="#E5E5E5"> all hear me</font><font color="#CCCCCC"> no here NC</font>

105
00:06:39,179 --> 00:06:45,729
<font color="#E5E5E5">this is I'm Thomas</font><font color="#CCCCCC"> steady</font><font color="#E5E5E5"> from Missoula</font>

106
00:06:42,249 --> 00:07:00,699
<font color="#CCCCCC">this is the idea that VC testing craft</font>

107
00:06:45,729 --> 00:07:04,419
version<font color="#E5E5E5"> six was is there something</font>

108
00:07:00,699 --> 00:07:08,469
explicitly on this there's<font color="#E5E5E5"> a just two</font>

109
00:07:04,419 --> 00:07:10,179
toys<font color="#E5E5E5"> yeah so the testing draft has had</font>

110
00:07:08,469 --> 00:07:12,579
very few changes<font color="#E5E5E5"> between this version</font>

111
00:07:10,179 --> 00:07:14,799
and the last version<font color="#E5E5E5"> there's really only</font>

112
00:07:12,579 --> 00:07:18,909
two<font color="#CCCCCC"> things one of</font><font color="#E5E5E5"> the small</font><font color="#CCCCCC"> failing</font>

113
00:07:14,799 --> 00:07:20,979
changes and<font color="#E5E5E5"> changed</font><font color="#CCCCCC"> it's almost your</font>

114
00:07:18,909 --> 00:07:23,259
<font color="#E5E5E5">little faint K is there any microphone</font>

115
00:07:20,979 --> 00:07:32,019
<font color="#E5E5E5">pick up that you can get ramped up you</font>

116
00:07:23,259 --> 00:07:32,799
one second is<font color="#E5E5E5"> that better much better</font>

117
00:07:32,019 --> 00:07:35,919
<font color="#CCCCCC">thanks</font>

118
00:07:32,799 --> 00:07:39,729
okay um<font color="#CCCCCC"> there's a small</font><font color="#E5E5E5"> command-line</font>

119
00:07:35,919 --> 00:07:44,558
changes and intestine<font color="#CCCCCC"> arrows so</font><font color="#E5E5E5"> next</font>

120
00:07:39,729 --> 00:07:45,938
<font color="#E5E5E5">slide so the first one is CLI parameters</font>

121
00:07:44,559 --> 00:07:48,599
we've made some small changes<font color="#CCCCCC"> to the</font>

122
00:07:45,939 --> 00:07:51,939
codecs<font color="#CCCCCC"> that we test one is that we</font>

123
00:07:48,599 --> 00:07:54,308
removed a constraint for<font color="#CCCCCC"> our</font><font color="#E5E5E5"> leg and</font>

124
00:07:51,939 --> 00:07:57,789
frames from<font color="#E5E5E5"> olymic died</font><font color="#CCCCCC"> we previously</font>

125
00:07:54,309 --> 00:07:59,769
had<font color="#CCCCCC"> divorced this 225</font><font color="#E5E5E5"> but it turned out</font>

126
00:07:57,789 --> 00:08:01,329
that was less than<font color="#CCCCCC"> ideal value</font><font color="#E5E5E5"> it</font>

127
00:07:59,769 --> 00:08:03,419
basically buffered way more frames and

128
00:08:01,329 --> 00:08:06,929
we technically needed to on the encoder

129
00:08:03,419 --> 00:08:10,209
<font color="#E5E5E5">so we decided to drop that out of the</font>

130
00:08:06,929 --> 00:08:12,549
command<font color="#E5E5E5"> line as you can see that command</font>

131
00:08:10,209 --> 00:08:14,259
<font color="#E5E5E5">line is pasted on</font><font color="#CCCCCC"> the bottom there</font><font color="#E5E5E5"> we</font>

132
00:08:12,549 --> 00:08:16,328
<font color="#E5E5E5">just leave it</font><font color="#CCCCCC"> up to the encoder to pick</font>

133
00:08:14,259 --> 00:08:18,119
the maximum reasonable<font color="#E5E5E5"> value which i</font>

134
00:08:16,329 --> 00:08:20,679
think is<font color="#CCCCCC"> nineteen in the current encoder</font>

135
00:08:18,119 --> 00:08:22,449
<font color="#E5E5E5">but the general idea</font><font color="#CCCCCC"> is with the command</font>

136
00:08:20,679 --> 00:08:24,489
lines we want<font color="#E5E5E5"> as many me you know as few</font>

137
00:08:22,449 --> 00:08:26,619
possible constraint we will not impose

138
00:08:24,489 --> 00:08:28,929
<font color="#E5E5E5">just a minimum</font><font color="#CCCCCC"> constraints possible at</font>

139
00:08:26,619 --> 00:08:31,449
<font color="#E5E5E5">encoder big</font><font color="#CCCCCC"> the rest so that's in the</font>

140
00:08:28,929 --> 00:08:33,578
right direction<font color="#CCCCCC"> so is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> supposed</font><font color="#E5E5E5"> to</font>

141
00:08:31,449 --> 00:08:36,629
<font color="#CCCCCC">be crossed through the lagging frames</font>

142
00:08:33,578 --> 00:08:40,419
equals 25 yes that<font color="#CCCCCC"> Gesser</font><font color="#E5E5E5"> do they</font><font color="#CCCCCC"> do</font>

143
00:08:36,629 --> 00:08:40,569
that<font color="#CCCCCC"> should</font><font color="#E5E5E5"> be removed from the command</font>

144
00:08:40,419 --> 00:08:43,539
line

145
00:08:40,568 --> 00:08:46,750
yep<font color="#CCCCCC"> I</font><font color="#E5E5E5"> pasted</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I'm in there is to</font>

146
00:08:43,539 --> 00:08:48,980
<font color="#E5E5E5">show</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it was there but yes delete</font>

147
00:08:46,750 --> 00:08:50,540
that that's all

148
00:08:48,980 --> 00:08:52,339
ideally I'd like<font color="#E5E5E5"> to actually drop the</font>

149
00:08:50,540 --> 00:08:53,990
<font color="#CCCCCC">auto ultra studying as well</font>

150
00:08:52,339 --> 00:08:58,550
and that<font color="#E5E5E5"> should be automatic but didn't</font>

151
00:08:53,990 --> 00:09:00,339
change<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> basis</font><font color="#CCCCCC"> to do that yet so</font>

152
00:08:58,550 --> 00:09:05,209
<font color="#E5E5E5">that's all</font><font color="#CCCCCC"> second slide</font>

153
00:09:00,339 --> 00:09:06,860
<font color="#CCCCCC">slide number for a dollar problem is</font>

154
00:09:05,209 --> 00:09:08,599
that<font color="#CCCCCC"> person</font><font color="#E5E5E5"> we basically only allowed</font>

155
00:09:06,860 --> 00:09:10,579
<font color="#CCCCCC">two very slowest encoder notes to</font><font color="#E5E5E5"> be</font>

156
00:09:08,600 --> 00:09:15,259
used<font color="#E5E5E5"> for a dollar</font>

157
00:09:10,579 --> 00:09:16,790
this was the<font color="#E5E5E5"> default or and for</font><font color="#CCCCCC"> I think</font>

158
00:09:15,259 --> 00:09:18,649
<font color="#CCCCCC">two where we had a text file</font>

159
00:09:16,790 --> 00:09:24,139
configuration and for<font color="#E5E5E5"> a one that killed</font>

160
00:09:18,649 --> 00:09:26,480
a CPU used equals zero and this became

161
00:09:24,139 --> 00:09:27,860
increasingly problematic<font color="#E5E5E5"> as you know and</font>

162
00:09:26,480 --> 00:09:30,620
I think<font color="#CCCCCC"> in</font><font color="#E5E5E5"> particular</font><font color="#CCCCCC"> got much much</font>

163
00:09:27,860 --> 00:09:34,430
slower over time<font color="#CCCCCC"> was their current</font>

164
00:09:30,620 --> 00:09:36,860
objective one<font color="#E5E5E5"> vast suite of videos</font>

165
00:09:34,430 --> 00:09:38,540
<font color="#E5E5E5">that's in this testing document that</font>

166
00:09:36,860 --> 00:09:43,310
take<font color="#E5E5E5"> that took who was taking</font><font color="#CCCCCC"> upwards of</font>

167
00:09:38,540 --> 00:09:46,160
eight days<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run the clips that</font><font color="#CCCCCC"> became</font>

168
00:09:43,310 --> 00:09:49,008
impractical for<font color="#E5E5E5"> testing so obviously</font>

169
00:09:46,160 --> 00:09:51,680
added an exception<font color="#CCCCCC"> that allowed us to</font>

170
00:09:49,009 --> 00:09:56,420
run faster test settings under limited

171
00:09:51,680 --> 00:09:58,670
<font color="#CCCCCC">so</font><font color="#E5E5E5"> those circumstances</font><font color="#CCCCCC"> basically if</font><font color="#E5E5E5"> you</font>

172
00:09:56,420 --> 00:10:01,189
only compare an element to a limit and

173
00:09:58,670 --> 00:10:02,870
you were<font color="#CCCCCC"> just comparing a code change</font>

174
00:10:01,189 --> 00:10:06,199
that to change<font color="#E5E5E5"> as a single feature</font>

175
00:10:02,870 --> 00:10:07,670
you're allowed to turn off a<font color="#E5E5E5"> couple of</font>

176
00:10:06,199 --> 00:10:11,120
searches<font color="#CCCCCC"> and figure the searches for</font>

177
00:10:07,670 --> 00:10:13,430
exportation<font color="#CCCCCC"> and exportation types that</font>

178
00:10:11,120 --> 00:10:16,430
speeds<font color="#E5E5E5"> up a lot and as long as you</font>

179
00:10:13,430 --> 00:10:21,258
specify I did this then it's a

180
00:10:16,430 --> 00:10:23,209
reasonable usage<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not certainly</font>

181
00:10:21,259 --> 00:10:26,209
ideal I'm working on a<font color="#E5E5E5"> better solution</font>

182
00:10:23,209 --> 00:10:28,790
<font color="#E5E5E5">for this</font><font color="#CCCCCC"> I think a better solution will</font>

183
00:10:26,209 --> 00:10:31,550
actually involve custom you know<font color="#E5E5E5"> speed</font>

184
00:10:28,790 --> 00:10:35,719
parameters to the encoder<font color="#CCCCCC"> that are</font>

185
00:10:31,550 --> 00:10:37,219
better tuned to match a real usage<font color="#E5E5E5"> the</font>

186
00:10:35,720 --> 00:10:40,550
one bad thing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that we by searching</font>

187
00:10:37,220 --> 00:10:43,730
less partition types and sizes we kind

188
00:10:40,550 --> 00:10:47,109
of bias<font color="#E5E5E5"> towards smaller partitions and</font>

189
00:10:43,730 --> 00:10:49,579
not the rectangular partitions which is

190
00:10:47,110 --> 00:10:51,800
could could affect some<font color="#E5E5E5"> tools in the</font>

191
00:10:49,579 --> 00:10:53,149
negative<font color="#E5E5E5"> way</font><font color="#CCCCCC"> so we're trying</font><font color="#E5E5E5"> to find</font>

192
00:10:51,800 --> 00:10:55,689
something<font color="#E5E5E5"> better but this</font><font color="#CCCCCC"> is a stopgap</font>

193
00:10:53,149 --> 00:10:55,689
for now

194
00:10:57,180 --> 00:11:00,329
and that is<font color="#E5E5E5"> basically the only two</font>

195
00:10:58,620 --> 00:11:03,630
<font color="#E5E5E5">changes I've made to the document</font><font color="#CCCCCC"> I've</font>

196
00:11:00,329 --> 00:11:04,949
not had to change the test set<font color="#E5E5E5"> or</font><font color="#CCCCCC"> to any</font>

197
00:11:03,630 --> 00:11:10,589
<font color="#E5E5E5">of the videos at all those have stayed</font>

198
00:11:04,949 --> 00:11:12,810
pretty<font color="#CCCCCC"> much the same so this is Moe</font>

199
00:11:10,589 --> 00:11:15,290
virtually from the floor<font color="#E5E5E5"> mic and be lazy</font>

200
00:11:12,810 --> 00:11:19,290
since there's no<font color="#E5E5E5"> queue just stay up here</font>

201
00:11:15,290 --> 00:11:22,469
<font color="#CCCCCC">the the testing methodology itself</font>

202
00:11:19,290 --> 00:11:23,969
<font color="#E5E5E5">though not</font><font color="#CCCCCC"> the infrastructure</font><font color="#E5E5E5"> with the</font>

203
00:11:22,470 --> 00:11:26,639
testing methodology itself still

204
00:11:23,970 --> 00:11:30,329
specifies that the<font color="#E5E5E5"> testing should</font><font color="#CCCCCC"> be on</font>

205
00:11:26,639 --> 00:11:36,120
the maximum<font color="#E5E5E5"> compression not not any</font>

206
00:11:30,329 --> 00:11:37,290
other slower mode yeah so the there's

207
00:11:36,120 --> 00:11:40,079
basically a section at the<font color="#CCCCCC"> end at a</font>

208
00:11:37,290 --> 00:11:41,610
testing<font color="#CCCCCC"> draft</font><font color="#E5E5E5"> that basically says you</font>

209
00:11:40,079 --> 00:11:43,258
know different things<font color="#E5E5E5"> you can test write</font>

210
00:11:41,610 --> 00:11:45,079
it so you could do like subjective tests

211
00:11:43,259 --> 00:11:47,940
and you can<font color="#CCCCCC"> do</font><font color="#E5E5E5"> across codec comparisons</font>

212
00:11:45,079 --> 00:11:50,399
and there's like objective tests for

213
00:11:47,940 --> 00:11:52,800
tools<font color="#E5E5E5"> and that one is the one</font><font color="#CCCCCC"> that we</font>

214
00:11:50,399 --> 00:11:54,810
allow<font color="#E5E5E5"> into not used a very slow mode</font>

215
00:11:52,800 --> 00:11:59,819
<font color="#E5E5E5">basically by turning off the exportation</font>

216
00:11:54,810 --> 00:12:01,768
search<font color="#E5E5E5"> oh but if you're doing like</font>

217
00:11:59,819 --> 00:12:05,069
<font color="#CCCCCC">across codec comparison you obviously</font>

218
00:12:01,769 --> 00:12:06,420
don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do that I mean I think I</font>

219
00:12:05,069 --> 00:12:08,959
understand why it needs<font color="#E5E5E5"> to be done for</font>

220
00:12:06,420 --> 00:12:12,149
practical reasons<font color="#CCCCCC"> in the infrastructure</font>

221
00:12:08,959 --> 00:12:16,138
but I I wouldn't think we want the spec

222
00:12:12,149 --> 00:12:18,360
to say this<font color="#E5E5E5"> is how we test ideally we</font>

223
00:12:16,139 --> 00:12:20,939
didn't have an infrastructure problem<font color="#CCCCCC"> we</font>

224
00:12:18,360 --> 00:12:23,279
would test for max compression right

225
00:12:20,939 --> 00:12:26,099
yeah and<font color="#E5E5E5"> that's certainly a issue with</font>

226
00:12:23,279 --> 00:12:28,620
that doing<font color="#E5E5E5"> this is a very highly codec</font>

227
00:12:26,100 --> 00:12:32,220
specific and implementation<font color="#CCCCCC"> specific</font>

228
00:12:28,620 --> 00:12:33,839
setting so it's possible<font color="#CCCCCC"> that</font><font color="#E5E5E5"> which she</font>

229
00:12:32,220 --> 00:12:38,459
<font color="#CCCCCC">does does not</font><font color="#E5E5E5"> belong in the testing</font>

230
00:12:33,839 --> 00:12:43,259
<font color="#CCCCCC">document and that could be a</font><font color="#E5E5E5"> valuable</font>

231
00:12:38,459 --> 00:12:46,680
feedback<font color="#E5E5E5"> okay I mean all codecs will</font>

232
00:12:43,259 --> 00:12:48,990
have knobs to<font color="#E5E5E5"> adjust the compression</font>

233
00:12:46,680 --> 00:12:50,459
speed trade-off I think<font color="#CCCCCC"> the it's</font>

234
00:12:48,990 --> 00:12:52,589
important<font color="#E5E5E5"> for the testing document to</font>

235
00:12:50,459 --> 00:12:54,779
state that the objective comparisons

236
00:12:52,589 --> 00:12:57,420
will be done at max compression

237
00:12:54,779 --> 00:12:59,670
otherwise it's a pretty hard it's

238
00:12:57,420 --> 00:13:01,079
<font color="#E5E5E5">another dimension</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> layer of curve</font>

239
00:12:59,670 --> 00:13:04,110
another dimension of curves that we<font color="#CCCCCC"> have</font>

240
00:13:01,079 --> 00:13:05,849
to look at to evaluate performance

241
00:13:04,110 --> 00:13:07,580
I know we've presented some<font color="#CCCCCC"> of those and</font>

242
00:13:05,850 --> 00:13:10,220
they're useful<font color="#CCCCCC"> Steiners</font>

243
00:13:07,580 --> 00:13:12,650
a lot of the speed complexity trade-offs

244
00:13:10,220 --> 00:13:13,820
before but I<font color="#E5E5E5"> think it's difficult to put</font>

245
00:13:12,650 --> 00:13:15,920
<font color="#E5E5E5">those in the testing document as</font>

246
00:13:13,820 --> 00:13:19,310
something that<font color="#E5E5E5"> the candidates will</font><font color="#CCCCCC"> be</font>

247
00:13:15,920 --> 00:13:20,930
evaluated on right at the same time so

248
00:13:19,310 --> 00:13:24,170
the the<font color="#CCCCCC"> one for thing is I don't</font><font color="#E5E5E5"> want to</font>

249
00:13:20,930 --> 00:13:25,880
evaluate if I specify<font color="#E5E5E5"> this I don't want</font>

250
00:13:24,170 --> 00:13:27,469
to evaluate<font color="#E5E5E5"> the candidates in terms of</font>

251
00:13:25,880 --> 00:13:30,290
you know<font color="#CCCCCC"> meeting the requirements</font>

252
00:13:27,470 --> 00:13:33,110
<font color="#CCCCCC">criteria on this this is purely for like</font>

253
00:13:30,290 --> 00:13:35,510
individual tools and drafts<font color="#CCCCCC"> particularly</font>

254
00:13:33,110 --> 00:13:37,070
I do want to know<font color="#CCCCCC"> like people</font><font color="#E5E5E5"> I think</font>

255
00:13:35,510 --> 00:13:39,680
people<font color="#E5E5E5"> later will probably present</font><font color="#CCCCCC"> with</font>

256
00:13:37,070 --> 00:13:42,830
<font color="#E5E5E5">CPU used settings with arts</font><font color="#CCCCCC"> ro and I</font>

257
00:13:39,680 --> 00:13:44,689
would like a way<font color="#E5E5E5"> to normalize this so</font>

258
00:13:42,830 --> 00:13:46,850
that people<font color="#E5E5E5"> people use the same CPU use</font>

259
00:13:44,690 --> 00:13:49,910
settings and stuff if they<font color="#CCCCCC"> need it for</font>

260
00:13:46,850 --> 00:13:51,020
<font color="#E5E5E5">speed reasons but yeah this what we</font>

261
00:13:49,910 --> 00:13:53,030
could do is<font color="#CCCCCC"> we could</font><font color="#E5E5E5"> just say you know</font>

262
00:13:51,020 --> 00:13:56,090
they are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> specified this in the draft</font>

263
00:13:53,030 --> 00:13:57,829
<font color="#CCCCCC">maybe say that you know you</font><font color="#E5E5E5"> may you may</font>

264
00:13:56,090 --> 00:13:59,300
use faster speed settings as long as

265
00:13:57,830 --> 00:14:01,000
you're justified<font color="#CCCCCC"> it like</font><font color="#E5E5E5"> external to the</font>

266
00:13:59,300 --> 00:14:05,890
draft basically try to<font color="#E5E5E5"> be consistent</font>

267
00:14:01,000 --> 00:14:05,890
<font color="#CCCCCC">that's also</font><font color="#E5E5E5"> a reasonable way</font><font color="#CCCCCC"> to take it</font>

268
00:14:07,480 --> 00:14:12,340
<font color="#CCCCCC">if that's</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> would prefer I can</font>

269
00:14:09,980 --> 00:14:12,340
change it

270
00:14:23,130 --> 00:14:28,180
<font color="#E5E5E5">Jonathan Linux I mean it seems like with</font>

271
00:14:25,300 --> 00:14:30,609
any codec<font color="#E5E5E5"> you know you</font><font color="#CCCCCC"> know you can go</font>

272
00:14:28,180 --> 00:14:32,920
your<font color="#E5E5E5"> code can go to absurdly slow right</font>

273
00:14:30,610 --> 00:14:34,900
I mean<font color="#CCCCCC"> this is doing</font><font color="#E5E5E5"> I've heard the</font>

274
00:14:32,920 --> 00:14:36,760
<font color="#CCCCCC">phrase frames per day as the speed I</font>

275
00:14:34,900 --> 00:14:38,350
mean<font color="#E5E5E5"> anything could do exhaustive</font><font color="#CCCCCC"> search</font>

276
00:14:36,760 --> 00:14:40,870
<font color="#CCCCCC">every possible bit stream to see which</font>

277
00:14:38,350 --> 00:14:42,700
<font color="#E5E5E5">one best matches you know in the extreme</font>

278
00:14:40,870 --> 00:14:44,500
<font color="#CCCCCC">keep your video in</font><font color="#E5E5E5"> the extreme case</font><font color="#CCCCCC"> and</font>

279
00:14:42,700 --> 00:14:46,300
<font color="#CCCCCC">that's just you can't say will use</font>

280
00:14:44,500 --> 00:14:49,240
whatever the<font color="#CCCCCC"> invitation chooses to</font><font color="#E5E5E5"> make</font>

281
00:14:46,300 --> 00:14:50,979
the slowest<font color="#E5E5E5"> possible encoding and I</font>

282
00:14:49,240 --> 00:14:52,930
think there<font color="#E5E5E5"> has to be some threshold of</font>

283
00:14:50,980 --> 00:14:54,160
this is just<font color="#E5E5E5"> absurd we're not going to</font>

284
00:14:52,930 --> 00:15:04,870
test this<font color="#E5E5E5"> because it has</font><font color="#CCCCCC"> no practical</font>

285
00:14:54,160 --> 00:15:06,699
use<font color="#CCCCCC"> okay what</font><font color="#E5E5E5"> other people think um I'll</font>

286
00:15:04,870 --> 00:15:08,470
<font color="#CCCCCC">just know that that that absurd max</font>

287
00:15:06,700 --> 00:15:12,370
compression is what's traditionally used

288
00:15:08,470 --> 00:15:15,730
in other other codec groups but<font color="#E5E5E5"> uh I'm</font>

289
00:15:12,370 --> 00:15:18,750
happy to<font color="#CCCCCC"> entertain more practical things</font>

290
00:15:15,730 --> 00:15:21,809
<font color="#CCCCCC">in our testing draft</font>

291
00:15:18,750 --> 00:15:21,809
[Music]

292
00:15:23,130 --> 00:15:29,850
and the other strong opinions one away

293
00:15:25,020 --> 00:15:31,020
to other<font color="#E5E5E5"> I mean based on a current</font>

294
00:15:29,850 --> 00:15:32,940
<font color="#CCCCCC">feedback that sounds like</font><font color="#E5E5E5"> I'd like to</font>

295
00:15:31,020 --> 00:15:34,650
specify<font color="#CCCCCC"> this</font><font color="#E5E5E5"> but made only for the a</font>

296
00:15:32,940 --> 00:15:38,160
<font color="#E5E5E5">women testing and maybe not too explicit</font>

297
00:15:34,650 --> 00:15:40,319
<font color="#CCCCCC">the exact parameters and so if anyone</font>

298
00:15:38,160 --> 00:15:41,339
but<font color="#CCCCCC"> well I'll change it</font><font color="#E5E5E5"> basically so it</font>

299
00:15:40,320 --> 00:15:43,040
allows us<font color="#CCCCCC"> to do this but it doesn't</font>

300
00:15:41,340 --> 00:15:46,260
<font color="#E5E5E5">specify</font><font color="#CCCCCC"> two parameters and seems</font><font color="#E5E5E5"> like</font>

301
00:15:43,040 --> 00:15:50,480
the middle<font color="#E5E5E5"> ground I hear three ownage</font><font color="#CCCCCC"> x2</font>

302
00:15:46,260 --> 00:15:50,480
that let me<font color="#E5E5E5"> know otherwise I'll do that</font>

303
00:15:50,960 --> 00:15:55,350
like<font color="#E5E5E5"> you have no objections go ahead</font>

304
00:15:53,370 --> 00:15:57,630
<font color="#CCCCCC">okay that's what I'll do for the next</font>

305
00:15:55,350 --> 00:15:59,760
<font color="#E5E5E5">draft version that's all I have to</font>

306
00:15:57,630 --> 00:16:06,080
<font color="#CCCCCC">present so any other comments or we can</font>

307
00:15:59,760 --> 00:16:09,110
be done<font color="#E5E5E5"> with this and I think we're good</font>

308
00:16:06,080 --> 00:16:09,110
thank you

309
00:16:10,100 --> 00:16:16,099
all right next<font color="#E5E5E5"> up ah</font>

310
00:16:12,960 --> 00:16:16,099
[Music]

311
00:16:28,210 --> 00:16:38,080
<font color="#CCCCCC">okay hello everybody I</font><font color="#E5E5E5"> have to have it</font>

312
00:16:32,800 --> 00:16:41,949
<font color="#E5E5E5">closed I think I have some</font><font color="#CCCCCC"> please what I</font>

313
00:16:38,080 --> 00:16:47,370
have<font color="#E5E5E5"> are some updates</font><font color="#CCCCCC"> on on the</font><font color="#E5E5E5"> Thor</font>

314
00:16:41,950 --> 00:16:50,520
<font color="#CCCCCC">College and also</font><font color="#E5E5E5"> have some</font><font color="#CCCCCC"> updated</font>

315
00:16:47,370 --> 00:16:55,720
charts on<font color="#E5E5E5"> the performance and</font>

316
00:16:50,520 --> 00:16:58,930
compression trade-offs<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this time</font><font color="#E5E5E5"> the</font>

317
00:16:55,720 --> 00:17:00,880
<font color="#CCCCCC">for</font><font color="#E5E5E5"> github has actually been</font><font color="#CCCCCC"> updated it</font>

318
00:16:58,930 --> 00:17:03,939
<font color="#E5E5E5">hasn't been updated for a while so I</font>

319
00:17:00,880 --> 00:17:07,720
guess<font color="#E5E5E5"> that's about time</font><font color="#CCCCCC"> the main change</font>

320
00:17:03,940 --> 00:17:13,540
is that I've added the support for the

321
00:17:07,720 --> 00:17:17,829
<font color="#CCCCCC">CDF filter through which was which has</font>

322
00:17:13,540 --> 00:17:20,170
been adopted in<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> what was</font><font color="#E5E5E5"> I hope</font>

323
00:17:17,829 --> 00:17:22,178
did in everyone was the<font color="#CCCCCC"> seen in past</font>

324
00:17:20,170 --> 00:17:25,510
<font color="#E5E5E5">version which I presented the last time</font>

325
00:17:22,179 --> 00:17:30,160
so this<font color="#E5E5E5"> is what have implemented for</font>

326
00:17:25,510 --> 00:17:35,400
<font color="#E5E5E5">Thor</font><font color="#CCCCCC"> another change is that</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> working</font>

327
00:17:30,160 --> 00:17:35,400
on faster<font color="#E5E5E5"> and simpler audio proceedeth</font>

328
00:17:36,540 --> 00:17:45,190
in in<font color="#CCCCCC"> authorities much faster than</font><font color="#E5E5E5"> 81 so</font>

329
00:17:40,540 --> 00:17:52,570
when I first<font color="#E5E5E5"> tried to use the audio from</font>

330
00:17:45,190 --> 00:17:57,190
<font color="#E5E5E5">from</font><font color="#CCCCCC"> 81 the speed of Thor was roughly</font>

331
00:17:52,570 --> 00:17:59,169
<font color="#CCCCCC">haft just for the future</font><font color="#E5E5E5"> but I think the</font>

332
00:17:57,190 --> 00:18:03,040
audio can<font color="#CCCCCC"> be improved and it's much more</font>

333
00:17:59,170 --> 00:18:06,210
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> to experiment with the audio in</font>

334
00:18:03,040 --> 00:18:09,639
Thor because<font color="#E5E5E5"> Thor is faster and I get</font>

335
00:18:06,210 --> 00:18:12,700
the feedback<font color="#E5E5E5"> much faster and whatever I</font>

336
00:18:09,640 --> 00:18:16,450
do in Thor could<font color="#CCCCCC"> be back ported into</font>

337
00:18:12,700 --> 00:18:23,110
<font color="#CCCCCC">every one</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> and last time I</font>

338
00:18:16,450 --> 00:18:24,910
mentioned<font color="#E5E5E5"> that I would like to get</font>

339
00:18:23,110 --> 00:18:27,280
<font color="#E5E5E5">support for the dollar entropy</font><font color="#CCCCCC"> colder</font><font color="#E5E5E5"> in</font>

340
00:18:24,910 --> 00:18:31,240
horror<font color="#E5E5E5"> but there has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> no progress on</font>

341
00:18:27,280 --> 00:18:33,850
<font color="#E5E5E5">that so just see that but that's</font><font color="#CCCCCC"> the</font>

342
00:18:31,240 --> 00:18:39,309
<font color="#E5E5E5">first step towards emerged codec next</font>

343
00:18:33,850 --> 00:18:42,100
like this<font color="#E5E5E5"> since the last</font><font color="#CCCCCC"> meeting there</font>

344
00:18:39,309 --> 00:18:44,590
have been a few minor changes<font color="#CCCCCC"> to see the</font>

345
00:18:42,100 --> 00:18:47,790
this is due<font color="#CCCCCC"> to a face-to-face meeting we</font>

346
00:18:44,590 --> 00:18:53,500
had<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> IOM group</font><font color="#E5E5E5"> since the last time</font>

347
00:18:47,790 --> 00:18:58,659
there's a new skip block test<font color="#E5E5E5"> what we</font>

348
00:18:53,500 --> 00:19:01,210
had before<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was that we didn't signal</font>

349
00:18:58,660 --> 00:19:03,549
<font color="#E5E5E5">Anna strength for a future block if all</font>

350
00:19:01,210 --> 00:19:08,799
the coding blocks<font color="#E5E5E5"> within that filter</font>

351
00:19:03,549 --> 00:19:11,590
block were skipped but<font color="#E5E5E5"> the trouble with</font>

352
00:19:08,799 --> 00:19:13,870
that is that you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to de call the</font>

353
00:19:11,590 --> 00:19:16,120
entire filter<font color="#E5E5E5"> block in order to know</font>

354
00:19:13,870 --> 00:19:18,489
whether all the blocks are escaped<font color="#E5E5E5"> and</font>

355
00:19:16,120 --> 00:19:21,580
the<font color="#E5E5E5"> Harvard</font><font color="#CCCCCC"> people don't like that they</font>

356
00:19:18,490 --> 00:19:23,140
<font color="#E5E5E5">want to start a filtering as soon as I</font>

357
00:19:21,580 --> 00:19:26,379
can turn our coding book as<font color="#E5E5E5"> soon as</font>

358
00:19:23,140 --> 00:19:30,070
possible<font color="#E5E5E5"> not wait and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> until the</font><font color="#CCCCCC"> end</font>

359
00:19:26,380 --> 00:19:33,910
<font color="#E5E5E5">because they don't like the</font><font color="#CCCCCC"> Bur for</font>

360
00:19:30,070 --> 00:19:40,780
anything so it<font color="#E5E5E5"> was agreed</font><font color="#CCCCCC"> to change that</font>

361
00:19:33,910 --> 00:19:43,210
<font color="#E5E5E5">so now the there's no signaling for</font><font color="#CCCCCC"> the</font>

362
00:19:40,780 --> 00:19:47,168
filter block if the coding block size<font color="#CCCCCC"> is</font>

363
00:19:43,210 --> 00:19:49,450
64 by 64<font color="#E5E5E5"> meaning that there's no</font>

364
00:19:47,169 --> 00:19:51,760
petitioning of that block<font color="#E5E5E5"> and the</font>

365
00:19:49,450 --> 00:19:54,490
calling block is skipped<font color="#CCCCCC"> that makes it</font>

366
00:19:51,760 --> 00:19:57,450
possible to<font color="#CCCCCC"> signal the filter strength</font>

367
00:19:54,490 --> 00:20:00,460
<font color="#E5E5E5">just after the Skip flag for that block</font>

368
00:19:57,450 --> 00:20:03,910
<font color="#CCCCCC">that adds a slight</font><font color="#E5E5E5"> coding overhead</font>

369
00:20:00,460 --> 00:20:07,390
<font color="#E5E5E5">because it means that there will be more</font>

370
00:20:03,910 --> 00:20:09,250
signaling and also<font color="#E5E5E5"> possibly a slight</font>

371
00:20:07,390 --> 00:20:12,850
complexity increased because<font color="#E5E5E5"> it also</font>

372
00:20:09,250 --> 00:20:16,179
leads to<font color="#CCCCCC"> more blocks being fusion but</font>

373
00:20:12,850 --> 00:20:19,000
objectively the loss is less<font color="#CCCCCC"> than</font><font color="#E5E5E5"> 0.1</font>

374
00:20:16,179 --> 00:20:21,370
percent<font color="#E5E5E5"> and subjectively I don't think</font>

375
00:20:19,000 --> 00:20:23,620
there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a great change</font>

376
00:20:21,370 --> 00:20:25,809
it could even perhaps even<font color="#E5E5E5"> gain an</font>

377
00:20:23,620 --> 00:20:31,409
improvement because<font color="#E5E5E5"> we get to doing more</font>

378
00:20:25,809 --> 00:20:36,100
<font color="#E5E5E5">filtering next like this and also</font>

379
00:20:31,410 --> 00:20:39,309
<font color="#E5E5E5">recently everyone has adopted support</font>

380
00:20:36,100 --> 00:20:45,309
for 128<font color="#E5E5E5"> by 128 super blocks so</font><font color="#CCCCCC"> that also</font>

381
00:20:39,309 --> 00:20:48,240
influences<font color="#E5E5E5"> how</font><font color="#CCCCCC"> we do the</font><font color="#E5E5E5"> Skip</font><font color="#CCCCCC"> test CDF</font>

382
00:20:45,309 --> 00:20:51,720
still needs the<font color="#E5E5E5"> signal at 64 + 64</font>

383
00:20:48,240 --> 00:20:54,960
resolution<font color="#E5E5E5"> during the development of</font>

384
00:20:51,720 --> 00:20:54,960
<font color="#CCCCCC">sealed F</font>

385
00:20:55,100 --> 00:21:01,730
which was merged with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> dollar-driven</font>

386
00:20:57,380 --> 00:21:06,260
<font color="#CCCCCC">to form seeded I tried different block</font>

387
00:21:01,730 --> 00:21:11,350
sizes and 64 by 64 was by far the best

388
00:21:06,260 --> 00:21:16,600
size<font color="#E5E5E5"> so we don't want to change that</font><font color="#CCCCCC"> so</font>

389
00:21:11,350 --> 00:21:21,469
<font color="#CCCCCC">for a large super block 128 by</font><font color="#E5E5E5"> once 22</font>

390
00:21:16,600 --> 00:21:23,350
<font color="#E5E5E5">single up to four presets in order to</font>

391
00:21:21,470 --> 00:21:27,830
keep the the same field<font color="#CCCCCC"> the block size</font>

392
00:21:23,350 --> 00:21:30,770
<font color="#CCCCCC">the details haven't</font><font color="#E5E5E5"> been what I decided</font>

393
00:21:27,830 --> 00:21:32,780
yet how to<font color="#E5E5E5"> do this we</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> still need</font>

394
00:21:30,770 --> 00:21:35,420
to investigate<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> compression</font>

395
00:21:32,780 --> 00:21:39,220
impacts but the<font color="#E5E5E5"> most simple thing would</font>

396
00:21:35,420 --> 00:21:42,470
be just<font color="#CCCCCC"> to expand the instead of</font><font color="#E5E5E5"> testing</font>

397
00:21:39,220 --> 00:21:44,720
<font color="#CCCCCC">for 64 over 64 blocks without</font>

398
00:21:42,470 --> 00:21:48,590
<font color="#CCCCCC">partitioning and whether it's Kip or</font><font color="#E5E5E5"> not</font>

399
00:21:44,720 --> 00:21:59,420
just to check for 128 by 128<font color="#E5E5E5"> without</font>

400
00:21:48,590 --> 00:22:03,740
partitioning next slide so running see

401
00:21:59,420 --> 00:22:06,890
<font color="#CCCCCC">deaf instead</font><font color="#E5E5E5"> of C of F in</font><font color="#CCCCCC"> for does give</font>

402
00:22:03,740 --> 00:22:11,810
object against<font color="#E5E5E5"> just as it did in</font><font color="#CCCCCC"> every</font>

403
00:22:06,890 --> 00:22:15,020
<font color="#E5E5E5">one I see gains around</font><font color="#CCCCCC"> 1%</font><font color="#E5E5E5"> or a half a</font>

404
00:22:11,810 --> 00:22:18,830
percent<font color="#E5E5E5"> 2.2 percent I'll show the</font>

405
00:22:15,020 --> 00:22:22,100
results on a separate slide shortly<font color="#E5E5E5"> we</font>

406
00:22:18,830 --> 00:22:25,870
see quite<font color="#E5E5E5"> large gains for chroma of the</font>

407
00:22:22,100 --> 00:22:30,020
<font color="#CCCCCC">4%</font><font color="#E5E5E5"> I'm not quite sure why we didn't</font><font color="#CCCCCC"> see</font>

408
00:22:25,870 --> 00:22:34,520
again<font color="#CCCCCC"> that high in in everyone so I</font>

409
00:22:30,020 --> 00:22:37,310
think I'll investigate that<font color="#CCCCCC"> see that</font>

410
00:22:34,520 --> 00:22:41,420
does add more complexity or we will see

411
00:22:37,310 --> 00:22:45,440
a<font color="#CCCCCC"> path though</font><font color="#E5E5E5"> it's it's more processing</font>

412
00:22:41,420 --> 00:22:48,940
but that's not unexpected<font color="#CCCCCC"> I also tried</font>

413
00:22:45,440 --> 00:22:51,650
running<font color="#CCCCCC"> CF on top of C death</font><font color="#E5E5E5"> that gives</font>

414
00:22:48,940 --> 00:22:54,410
not much gain which is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> surprising</font>

415
00:22:51,650 --> 00:22:59,420
since<font color="#E5E5E5"> CDF is basically a superset of C</font>

416
00:22:54,410 --> 00:23:03,350
of<font color="#E5E5E5"> F</font><font color="#CCCCCC"> but I noted</font><font color="#E5E5E5"> that if I greatly</font>

417
00:22:59,420 --> 00:23:07,040
<font color="#E5E5E5">simplified the CDF I do see a def just</font>

418
00:23:03,350 --> 00:23:08,419
<font color="#E5E5E5">give gains and actually it turns out</font>

419
00:23:07,040 --> 00:23:11,210
<font color="#E5E5E5">that</font>

420
00:23:08,420 --> 00:23:16,910
see a deaf<font color="#E5E5E5"> Regan's almost all of the</font>

421
00:23:11,210 --> 00:23:23,000
loss if I simplify the audio<font color="#CCCCCC"> but having</font>

422
00:23:16,910 --> 00:23:25,460
<font color="#E5E5E5">to an extra an extra pass or filtering</font><font color="#CCCCCC"> I</font>

423
00:23:23,000 --> 00:23:32,440
think that adds a risk of over filtering

424
00:23:25,460 --> 00:23:35,300
and also it adds buffer requirements so

425
00:23:32,440 --> 00:23:40,340
it's sealed<font color="#CCCCCC"> s still attractive for a</font>

426
00:23:35,300 --> 00:23:44,690
fast real-time encoder<font color="#E5E5E5"> currently it's a</font>

427
00:23:40,340 --> 00:23:48,409
good way to speed up<font color="#E5E5E5"> for</font><font color="#CCCCCC"> what I I think</font>

428
00:23:44,690 --> 00:23:52,340
<font color="#CCCCCC">that it's</font><font color="#E5E5E5"> much better I'd rather to do</font>

429
00:23:48,410 --> 00:23:54,770
work on the<font color="#CCCCCC"> sea deaf audio I think it</font>

430
00:23:52,340 --> 00:23:56,360
might be<font color="#E5E5E5"> hard to make it as fast as to</font>

431
00:23:54,770 --> 00:23:58,190
see a deaf are they all but it should<font color="#CCCCCC"> be</font>

432
00:23:56,360 --> 00:24:03,860
possible to come close without<font color="#E5E5E5"> you to</font>

433
00:23:58,190 --> 00:24:09,560
big losses next like this another<font color="#CCCCCC"> change</font>

434
00:24:03,860 --> 00:24:13,310
since the last meeting is in a<font color="#E5E5E5"> VA one we</font>

435
00:24:09,560 --> 00:24:14,780
have three<font color="#E5E5E5"> filters applied in cascades</font><font color="#CCCCCC"> D</font>

436
00:24:13,310 --> 00:24:20,540
blocking see death and then<font color="#CCCCCC"> loop</font>

437
00:24:14,780 --> 00:24:23,480
<font color="#E5E5E5">restoration and that adds a lot of</font>

438
00:24:20,540 --> 00:24:27,680
buffer requirements and again<font color="#CCCCCC"> hardware</font>

439
00:24:23,480 --> 00:24:32,660
people<font color="#E5E5E5"> don't like that so there was a</font>

440
00:24:27,680 --> 00:24:34,640
new proposal from arm<font color="#E5E5E5"> to an Android</font>

441
00:24:32,660 --> 00:24:38,150
<font color="#E5E5E5">contribution until Google and Mozilla to</font>

442
00:24:34,640 --> 00:24:42,620
reduce the buffer requirements without

443
00:24:38,150 --> 00:24:46,700
<font color="#E5E5E5">stat there's an either a minimum of 30</font>

444
00:24:42,620 --> 00:24:48,320
lines of<font color="#CCCCCC"> banned buffers but with</font><font color="#E5E5E5"> this</font>

445
00:24:46,700 --> 00:24:53,170
new proposal<font color="#E5E5E5"> it's possible to reduce</font>

446
00:24:48,320 --> 00:24:53,169
<font color="#E5E5E5">that choose 16 lines next slide please</font>

447
00:24:53,560 --> 00:25:02,290
so the basic idea<font color="#E5E5E5"> is to some normative</font>

448
00:24:59,180 --> 00:25:04,090
changes and non normative changes and

449
00:25:02,290 --> 00:25:08,180
non<font color="#E5E5E5"> normatively</font>

450
00:25:04,090 --> 00:25:11,449
possible to do some shifting of the<font color="#CCCCCC"> CDL</font>

451
00:25:08,180 --> 00:25:14,240
<font color="#CCCCCC">or filtering but the main</font><font color="#E5E5E5"> normative</font>

452
00:25:11,450 --> 00:25:16,370
change is that when loop restoration

453
00:25:14,240 --> 00:25:19,820
looks outside the super block that was

454
00:25:16,370 --> 00:25:21,879
produced by<font color="#CCCCCC"> C</font><font color="#E5E5E5"> death it will roll it will</font>

455
00:25:19,820 --> 00:25:24,850
really<font color="#E5E5E5"> deep blocked output instead</font>

456
00:25:21,880 --> 00:25:28,480
the<font color="#E5E5E5"> CDF outfit and that</font><font color="#CCCCCC"> breaks the</font>

457
00:25:24,850 --> 00:25:32,289
dependency between<font color="#CCCCCC"> CDF and Luke</font>

458
00:25:28,480 --> 00:25:34,660
<font color="#E5E5E5">restoration so the changes that has that</font>

459
00:25:32,289 --> 00:25:37,750
have been proposed<font color="#E5E5E5"> requires no normative</font>

460
00:25:34,660 --> 00:25:41,650
changes to see that it's mostly<font color="#E5E5E5"> in loot</font>

461
00:25:37,750 --> 00:25:43,360
restoration and the<font color="#E5E5E5"> changes have no</font>

462
00:25:41,650 --> 00:25:48,309
<font color="#E5E5E5">impact on the</font><font color="#CCCCCC"> other compressed yets</font>

463
00:25:43,360 --> 00:25:50,080
results and it makes the buff<font color="#CCCCCC"> line</font>

464
00:25:48,309 --> 00:25:54,250
<font color="#E5E5E5">buffer requirements for everyone the</font>

465
00:25:50,080 --> 00:25:56,500
same as for<font color="#CCCCCC"> VP 916 lines even though</font><font color="#E5E5E5"> we</font>

466
00:25:54,250 --> 00:25:59,200
have more<font color="#CCCCCC"> filled filters in</font><font color="#E5E5E5"> every one</font>

467
00:25:56,500 --> 00:26:01,600
<font color="#E5E5E5">and this is moving towards adoption</font>

468
00:25:59,200 --> 00:26:04,179
along with<font color="#E5E5E5"> new restoration</font>

469
00:26:01,600 --> 00:26:11,158
it hasn't formally be adopted yet but it

470
00:26:04,179 --> 00:26:15,010
will next slide so a bit more<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

471
00:26:11,159 --> 00:26:19,059
encoder complexity on see death as I

472
00:26:15,010 --> 00:26:23,129
mentioned I was working on simplifying

473
00:26:19,059 --> 00:26:23,129
the audio and I think that can be

474
00:26:23,159 --> 00:26:32,409
improved<font color="#E5E5E5"> even more just as a test how</font>

475
00:26:29,169 --> 00:26:36,250
far<font color="#CCCCCC"> I could</font><font color="#E5E5E5"> get I try to restrict the 50</font>

476
00:26:32,409 --> 00:26:38,890
<font color="#E5E5E5">to do no block level</font><font color="#CCCCCC"> singling</font><font color="#E5E5E5"> and when I</font>

477
00:26:36,250 --> 00:26:42,669
do<font color="#E5E5E5"> that I still get gains objective gain</font>

478
00:26:38,890 --> 00:26:45,730
similar to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> lbf but I</font><font color="#E5E5E5"> think in that</font>

479
00:26:42,669 --> 00:26:48,190
case<font color="#CCCCCC"> the subjective gains are still much</font>

480
00:26:45,730 --> 00:26:52,809
better<font color="#CCCCCC"> than sealed F</font><font color="#E5E5E5"> because we will get</font>

481
00:26:48,190 --> 00:26:54,940
the<font color="#E5E5E5"> the directional part of</font><font color="#CCCCCC"> C death so</font>

482
00:26:52,809 --> 00:26:58,480
in that case the encoder will just have

483
00:26:54,940 --> 00:27:01,720
<font color="#CCCCCC">to</font><font color="#E5E5E5"> select the optimal strength for the</font>

484
00:26:58,480 --> 00:27:05,350
entire frame but that's a quite small

485
00:27:01,720 --> 00:27:07,539
search space so and some other

486
00:27:05,350 --> 00:27:10,658
simplifications that<font color="#CCCCCC"> I have tried which</font>

487
00:27:07,539 --> 00:27:13,990
work well<font color="#E5E5E5"> is to select the damping used</font>

488
00:27:10,659 --> 00:27:20,260
in the filter core based on the frame QP

489
00:27:13,990 --> 00:27:22,990
and<font color="#E5E5E5"> I've also tried</font><font color="#CCCCCC"> to decide the number</font>

490
00:27:20,260 --> 00:27:28,299
<font color="#E5E5E5">of bits to use per block based on the</font>

491
00:27:22,990 --> 00:27:31,600
frame QP and sorry based on the<font color="#E5E5E5"> bitrate</font>

492
00:27:28,299 --> 00:27:35,830
<font color="#CCCCCC">and friend pipe and I think that it</font>

493
00:27:31,600 --> 00:27:38,770
still many ways to improve<font color="#E5E5E5"> the CDF</font><font color="#CCCCCC"> audio</font>

494
00:27:35,830 --> 00:27:41,669
the the reason why I think<font color="#E5E5E5"> it's</font>

495
00:27:38,770 --> 00:27:45,430
important<font color="#E5E5E5"> to have a good are the</font><font color="#CCCCCC"> oval</font>

496
00:27:41,670 --> 00:27:49,330
see that is<font color="#E5E5E5"> that in a practical</font><font color="#CCCCCC"> and</font>

497
00:27:45,430 --> 00:27:55,000
<font color="#E5E5E5">coders</font><font color="#CCCCCC"> Edith can probably replace some</font>

498
00:27:49,330 --> 00:27:58,300
<font color="#CCCCCC">of the more complex tools in particular</font>

499
00:27:55,000 --> 00:28:02,620
in a the warm maybe not replace but just

500
00:27:58,300 --> 00:28:04,570
help<font color="#E5E5E5"> yeah well not</font><font color="#CCCCCC"> replacements Tannen</font>

501
00:28:02,620 --> 00:28:08,560
but if you want to do every time<font color="#CCCCCC"> encoder</font>

502
00:28:04,570 --> 00:28:12,909
you<font color="#E5E5E5"> you probably</font><font color="#CCCCCC"> wants you can't use all</font>

503
00:28:08,560 --> 00:28:14,730
<font color="#E5E5E5">the tools it's simply too complex next</font>

504
00:28:12,910 --> 00:28:17,790
<font color="#E5E5E5">slide please</font>

505
00:28:14,730 --> 00:28:23,550
so these are the results<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> got for</font>

506
00:28:17,790 --> 00:28:28,240
adding see death in for<font color="#CCCCCC"> heron comparing</font>

507
00:28:23,550 --> 00:28:31,659
just<font color="#E5E5E5"> doing D blocking and with the</font><font color="#CCCCCC"> deep</font>

508
00:28:28,240 --> 00:28:36,340
<font color="#CCCCCC">locking plus C death</font><font color="#E5E5E5"> and in the low</font>

509
00:28:31,660 --> 00:28:39,430
complexity case is<font color="#CCCCCC"> now a 6.2 percent</font><font color="#E5E5E5"> and</font>

510
00:28:36,340 --> 00:28:42,520
the chrome app is not even better if<font color="#E5E5E5"> I</font>

511
00:28:39,430 --> 00:28:44,350
look at the<font color="#CCCCCC"> see ie de number it's</font>

512
00:28:42,520 --> 00:28:47,950
actually<font color="#E5E5E5"> ten point three percent which</font>

513
00:28:44,350 --> 00:28:50,649
is<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think it's quite impressive even in</font>

514
00:28:47,950 --> 00:28:54,400
the harder<font color="#E5E5E5"> the compression is it's a six</font>

515
00:28:50,650 --> 00:28:57,790
point three and in<font color="#E5E5E5"> the high efficiency</font>

516
00:28:54,400 --> 00:28:59,590
it's still<font color="#E5E5E5"> five point two percent and</font>

517
00:28:57,790 --> 00:29:02,770
three point one percent in the<font color="#CCCCCC"> low that</font>

518
00:28:59,590 --> 00:29:05,080
<font color="#CCCCCC">I and highly lay configurations so</font>

519
00:29:02,770 --> 00:29:06,270
that's that's not bad I<font color="#E5E5E5"> think next slide</font>

520
00:29:05,080 --> 00:29:10,290
<font color="#E5E5E5">please</font>

521
00:29:06,270 --> 00:29:13,030
and if we<font color="#E5E5E5"> compare this with</font><font color="#CCCCCC"> Z of the</font><font color="#E5E5E5"> F</font>

522
00:29:10,290 --> 00:29:17,500
so the these are the gains<font color="#CCCCCC"> that we get</font>

523
00:29:13,030 --> 00:29:21,580
from replacing<font color="#CCCCCC"> C of</font><font color="#E5E5E5"> F with</font><font color="#CCCCCC"> C death this</font>

524
00:29:17,500 --> 00:29:26,040
ee i ee number is<font color="#CCCCCC"> 2.2 percent in the low</font>

525
00:29:21,580 --> 00:29:30,730
complexity low today<font color="#E5E5E5"> configuration</font>

526
00:29:26,040 --> 00:29:34,600
manager ops<font color="#CCCCCC"> 21.1%</font><font color="#E5E5E5"> in the high efficiency</font>

527
00:29:30,730 --> 00:29:39,640
a high delay configuration so it's not a

528
00:29:34,600 --> 00:29:42,159
huge difference but the main reason<font color="#CCCCCC"> to</font>

529
00:29:39,640 --> 00:29:45,670
<font color="#E5E5E5">add</font><font color="#CCCCCC"> C that is</font><font color="#E5E5E5"> to improve the actual</font>

530
00:29:42,160 --> 00:29:48,920
visual quality and and in<font color="#CCCCCC"> every one</font><font color="#E5E5E5"> we</font>

531
00:29:45,670 --> 00:29:53,570
did some<font color="#E5E5E5"> subjective tests</font>

532
00:29:48,920 --> 00:29:58,070
comparing see a<font color="#E5E5E5"> path with Edith and even</font>

533
00:29:53,570 --> 00:30:01,520
though<font color="#E5E5E5"> the change was less than 1% in in</font>

534
00:29:58,070 --> 00:30:06,370
<font color="#CCCCCC">every one people could still tell the</font>

535
00:30:01,520 --> 00:30:08,810
difference so that<font color="#E5E5E5"> probably points</font>

536
00:30:06,370 --> 00:30:12,800
towards a<font color="#CCCCCC"> real difference of at least</font>

537
00:30:08,810 --> 00:30:15,350
<font color="#CCCCCC">five percent</font><font color="#E5E5E5"> next slide this mo from for</font>

538
00:30:12,800 --> 00:30:21,680
Mike again virtual for Mike a question

539
00:30:15,350 --> 00:30:23,360
on the the the the gains for chroma<font color="#E5E5E5"> look</font>

540
00:30:21,680 --> 00:30:30,370
like<font color="#E5E5E5"> about three to four</font><font color="#CCCCCC"> times the gains</font>

541
00:30:23,360 --> 00:30:33,800
over<font color="#CCCCCC"> all right clue I as I'm serious</font>

542
00:30:30,370 --> 00:30:36,469
what<font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to investigate here is</font>

543
00:30:33,800 --> 00:30:42,159
whether there<font color="#E5E5E5"> could be an impose in the</font>

544
00:30:36,470 --> 00:30:44,930
encoder<font color="#CCCCCC"> it could be probably not</font>

545
00:30:42,160 --> 00:30:48,080
normative things that would have to<font color="#CCCCCC"> be</font>

546
00:30:44,930 --> 00:30:52,220
<font color="#CCCCCC">fixed but it could be some kind</font><font color="#E5E5E5"> of bug</font>

547
00:30:48,080 --> 00:30:57,379
that<font color="#CCCCCC"> see that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> able to partially</font>

548
00:30:52,220 --> 00:31:00,500
<font color="#E5E5E5">correct but I don't really know it's an</font>

549
00:30:57,380 --> 00:31:02,780
interesting results<font color="#E5E5E5"> what we could always</font>

550
00:31:00,500 --> 00:31:15,050
hope<font color="#CCCCCC"> it is that bug and and it will get</font>

551
00:31:02,780 --> 00:31:15,410
further gains Morgan Morgan for<font color="#CCCCCC"> for</font><font color="#E5E5E5"> mark</font>

552
00:31:15,050 --> 00:31:17,510
again

553
00:31:15,410 --> 00:31:20,210
so before<font color="#E5E5E5"> you finish on CDF I want to</font>

554
00:31:17,510 --> 00:31:23,060
raise one<font color="#CCCCCC"> issue related to the</font>

555
00:31:20,210 --> 00:31:25,340
requirements document that we expect

556
00:31:23,060 --> 00:31:28,129
some substantive<font color="#E5E5E5"> changes in I think</font><font color="#CCCCCC"> one</font>

557
00:31:25,340 --> 00:31:31,909
of them may be related<font color="#E5E5E5"> to support of</font>

558
00:31:28,130 --> 00:31:34,220
<font color="#CCCCCC">four to two</font><font color="#E5E5E5"> chroma format video and I</font>

559
00:31:31,910 --> 00:31:36,590
believe CDF<font color="#E5E5E5"> is one of the barriers to</font>

560
00:31:34,220 --> 00:31:39,740
<font color="#CCCCCC">that because</font><font color="#E5E5E5"> the direction search does</font>

561
00:31:36,590 --> 00:31:42,980
not<font color="#E5E5E5"> support rectangular blocks is there</font>

562
00:31:39,740 --> 00:31:46,490
any plan<font color="#CCCCCC"> to address that in any way so</font>

563
00:31:42,980 --> 00:31:50,900
how it currently<font color="#CCCCCC"> works is that in the</font>

564
00:31:46,490 --> 00:31:54,530
case<font color="#CCCCCC"> of 42 we'd still do</font><font color="#E5E5E5"> the filtering</font>

565
00:31:50,900 --> 00:31:59,030
as normal for<font color="#CCCCCC"> the luma plane but the</font>

566
00:31:54,530 --> 00:32:00,410
filtering is disabled for chroma<font color="#CCCCCC"> label</font>

567
00:31:59,030 --> 00:32:02,050
all filtering<font color="#E5E5E5"> or disable Direction</font>

568
00:32:00,410 --> 00:32:09,780
search only

569
00:32:02,050 --> 00:32:09,780
it's completely disabled I think so

570
00:32:09,930 --> 00:32:17,980
<font color="#E5E5E5">there are ways</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> address that like</font>

571
00:32:15,450 --> 00:32:22,090
<font color="#CCCCCC">skipping</font><font color="#E5E5E5"> the directional part and</font>

572
00:32:17,980 --> 00:32:25,930
<font color="#E5E5E5">basically doing cell death at him as a</font>

573
00:32:22,090 --> 00:32:27,550
comment<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> Terry vary from</font><font color="#E5E5E5"> forearm the</font>

574
00:32:25,930 --> 00:32:30,610
the directional search<font color="#E5E5E5"> has only ever</font>

575
00:32:27,550 --> 00:32:32,980
done<font color="#E5E5E5"> on</font><font color="#CCCCCC"> luma</font><font color="#E5E5E5"> so what normally happens is</font>

576
00:32:30,610 --> 00:32:35,800
the chroma<font color="#E5E5E5"> uses the direction that luma</font>

577
00:32:32,980 --> 00:32:37,390
found when it<font color="#E5E5E5"> to orient its filters and</font>

578
00:32:35,800 --> 00:32:38,950
since there isn't a<font color="#CCCCCC"> direct</font>

579
00:32:37,390 --> 00:32:40,150
correspondence between the directions we

580
00:32:38,950 --> 00:32:42,010
<font color="#CCCCCC">have</font><font color="#E5E5E5"> a luma</font><font color="#CCCCCC"> and the directions we have</font>

581
00:32:40,150 --> 00:32:44,740
<font color="#E5E5E5">in chroma when you squeeze the chroma</font>

582
00:32:42,010 --> 00:32:46,750
blocks into a rectangle then<font color="#E5E5E5"> we disable</font>

583
00:32:44,740 --> 00:32:48,100
the<font color="#E5E5E5"> filter sorry Tim your little fan</font><font color="#CCCCCC"> at</font>

584
00:32:46,750 --> 00:32:50,010
the<font color="#E5E5E5"> end so what do you do for karma</font>

585
00:32:48,100 --> 00:32:51,969
blocks then just disable the filter

586
00:32:50,010 --> 00:32:53,980
disable the directions<font color="#CCCCCC"> are should</font>

587
00:32:51,970 --> 00:32:55,810
totally simple<font color="#CCCCCC"> the filter completely the</font>

588
00:32:53,980 --> 00:32:57,130
<font color="#E5E5E5">whole filter completely because you</font>

589
00:32:55,810 --> 00:33:00,429
can't disable the direction<font color="#CCCCCC"> searches</font>

590
00:32:57,130 --> 00:33:01,810
<font color="#E5E5E5">that's only ever done</font><font color="#CCCCCC"> on Loula what you</font>

591
00:33:00,430 --> 00:33:04,030
could do is just assume a fixed

592
00:33:01,810 --> 00:33:05,889
<font color="#E5E5E5">direction which is what Steiner was</font>

593
00:33:04,030 --> 00:33:09,040
saying and and just always filter with

594
00:33:05,890 --> 00:33:16,960
that<font color="#CCCCCC"> direction and that would be</font>

595
00:33:09,040 --> 00:33:18,580
<font color="#E5E5E5">essentially like</font><font color="#CCCCCC"> Co PF yeah also</font><font color="#E5E5E5"> lucious</font>

596
00:33:16,960 --> 00:33:20,740
but currently<font color="#E5E5E5"> I don't think in those</font>

597
00:33:18,580 --> 00:33:25,720
solutions<font color="#CCCCCC"> any of those solutions</font><font color="#E5E5E5"> are</font>

598
00:33:20,740 --> 00:33:28,060
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> a v1 and it might</font><font color="#E5E5E5"> be might</font>

599
00:33:25,720 --> 00:33:29,830
be<font color="#E5E5E5"> because people</font><font color="#CCCCCC"> don't care I'm sure</font>

600
00:33:28,060 --> 00:33:32,409
how important it is to have<font color="#CCCCCC"> good</font>

601
00:33:29,830 --> 00:33:33,939
performance for<font color="#E5E5E5"> 42 well I mean like I</font>

602
00:33:32,410 --> 00:33:35,980
<font color="#E5E5E5">said I</font><font color="#CCCCCC"> think there there</font><font color="#E5E5E5"> may be some</font>

603
00:33:33,940 --> 00:33:40,470
there may be some<font color="#CCCCCC"> changes to the</font>

604
00:33:35,980 --> 00:33:44,200
requirements<font color="#CCCCCC"> to make 42 more prominently</font>

605
00:33:40,470 --> 00:33:47,970
supported<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> now well it</font><font color="#E5E5E5"> is order but</font>

606
00:33:44,200 --> 00:33:47,970
the compression will<font color="#CCCCCC"> surface lightly</font>

607
00:33:49,710 --> 00:33:52,710
okay

608
00:33:54,730 --> 00:34:01,690
last time I had<font color="#E5E5E5"> some graphs showing the</font>

609
00:33:57,510 --> 00:34:04,600
compression and complexity<font color="#CCCCCC"> trade-offs so</font>

610
00:34:01,690 --> 00:34:07,270
<font color="#CCCCCC">if you want and I have updated those</font><font color="#E5E5E5"> I</font>

611
00:34:04,600 --> 00:34:09,250
also had some<font color="#CCCCCC"> graphs showing comparison</font>

612
00:34:07,270 --> 00:34:10,989
between the different codecs and<font color="#E5E5E5"> I</font>

613
00:34:09,250 --> 00:34:18,780
haven't opted<font color="#E5E5E5"> those since the difference</font>

614
00:34:10,989 --> 00:34:24,459
in Thor<font color="#E5E5E5"> and isn't</font><font color="#CCCCCC"> that big it's just 1%</font>

615
00:34:18,780 --> 00:34:27,460
<font color="#E5E5E5">so what I'm going to show are the</font>

616
00:34:24,460 --> 00:34:29,409
compression speed relationships<font color="#E5E5E5"> using</font>

617
00:34:27,460 --> 00:34:33,668
our<font color="#CCCCCC"> compressed yet with the objective 1</font>

618
00:34:29,409 --> 00:34:36,669
<font color="#E5E5E5">post test set and since ITF 99 there's</font>

619
00:34:33,668 --> 00:34:40,449
an improvement in every<font color="#E5E5E5"> one of about 5%</font>

620
00:34:36,668 --> 00:34:43,899
and the encoder runs at<font color="#E5E5E5"> roughly half</font><font color="#CCCCCC"> the</font>

621
00:34:40,449 --> 00:34:47,770
speed<font color="#CCCCCC"> I've been using the loaded a</font>

622
00:34:43,899 --> 00:34:50,888
<font color="#E5E5E5">configuration and the</font><font color="#CCCCCC"> BDR anchor is a</font>

623
00:34:47,770 --> 00:34:54,580
the one as it was in July<font color="#E5E5E5"> last year</font>

624
00:34:50,889 --> 00:35:00,220
which<font color="#E5E5E5"> is roughly equivalent to vp9 and</font>

625
00:34:54,580 --> 00:35:02,920
next slide<font color="#E5E5E5"> please so</font><font color="#CCCCCC"> starting in July</font>

626
00:35:00,220 --> 00:35:06,790
<font color="#CCCCCC">last year at zero of the compression the</font>

627
00:35:02,920 --> 00:35:09,460
be dynamic goes down which is good so at

628
00:35:06,790 --> 00:35:13,960
the last<font color="#CCCCCC"> meeting we had the VBR gain of</font>

629
00:35:09,460 --> 00:35:21,160
about<font color="#CCCCCC"> 20 percent and that</font><font color="#E5E5E5"> is now about</font>

630
00:35:13,960 --> 00:35:25,270
25 cents and the graph has<font color="#CCCCCC"> been steadily</font>

631
00:35:21,160 --> 00:35:28,089
dropping<font color="#E5E5E5"> with the additions of new tools</font>

632
00:35:25,270 --> 00:35:32,500
<font color="#E5E5E5">in</font><font color="#CCCCCC"> every one and there are</font><font color="#E5E5E5"> still some</font>

633
00:35:28,090 --> 00:35:36,630
tools left not yet enabled<font color="#E5E5E5"> so I expect</font>

634
00:35:32,500 --> 00:35:39,900
<font color="#E5E5E5">this to drop slightly more so we'll see</font>

635
00:35:36,630 --> 00:35:43,810
<font color="#E5E5E5">next</font><font color="#CCCCCC"> slide</font><font color="#E5E5E5"> please</font>

636
00:35:39,900 --> 00:35:48,970
and this is the complexity history note

637
00:35:43,810 --> 00:35:52,779
here that<font color="#E5E5E5"> the y axis</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> logarithmic and</font>

638
00:35:48,970 --> 00:35:55,359
the y<font color="#E5E5E5"> axis is</font><font color="#CCCCCC"> the frames per minute</font><font color="#E5E5E5"> not</font>

639
00:35:52,780 --> 00:36:02,050
they not seconds but minutes<font color="#E5E5E5"> it's it</font>

640
00:35:55,360 --> 00:36:07,119
started at<font color="#E5E5E5"> around 15 last year in July</font>

641
00:36:02,050 --> 00:36:12,789
and is now round<font color="#CCCCCC"> one frame a minute</font>

642
00:36:07,119 --> 00:36:16,329
so there's a change<font color="#CCCCCC"> of the factor</font><font color="#E5E5E5"> of 15</font>

643
00:36:12,789 --> 00:36:20,559
<font color="#CCCCCC">and it seems</font><font color="#E5E5E5"> to be flattening somewhat</font>

644
00:36:16,329 --> 00:36:24,279
but again this is a logarithmic scale on

645
00:36:20,559 --> 00:36:26,680
the<font color="#E5E5E5"> y-axis</font><font color="#CCCCCC"> I think this shows that the</font>

646
00:36:24,279 --> 00:36:30,489
compression gains that we haven't seen

647
00:36:26,680 --> 00:36:36,879
<font color="#E5E5E5">in</font><font color="#CCCCCC"> anyone</font><font color="#E5E5E5"> don't come for free</font><font color="#CCCCCC"> it has a</font>

648
00:36:30,489 --> 00:36:41,769
big cost so if we compare vp9 with

649
00:36:36,880 --> 00:36:46,660
<font color="#CCCCCC">everyone I think currently</font><font color="#E5E5E5"> everyone is</font>

650
00:36:41,769 --> 00:36:49,180
<font color="#E5E5E5">basically a continuation of vp9</font>

651
00:36:46,660 --> 00:36:51,940
if you plot it<font color="#E5E5E5"> with</font><font color="#CCCCCC"> difference</font>

652
00:36:49,180 --> 00:36:55,269
complexity settings so you<font color="#E5E5E5"> have a big</font>

653
00:36:51,940 --> 00:36:57,190
toolbox<font color="#CCCCCC"> and as you add more tools to the</font>

654
00:36:55,269 --> 00:37:00,549
codec<font color="#E5E5E5"> you get compression gains but you</font>

655
00:36:57,190 --> 00:37:02,920
also get that speed<font color="#CCCCCC"> penalty</font><font color="#E5E5E5"> and the</font>

656
00:37:00,549 --> 00:37:05,410
question<font color="#E5E5E5"> remains whether that 2 vols box</font>

657
00:37:02,920 --> 00:37:10,900
is a better tool box not just<font color="#CCCCCC"> a larger</font>

658
00:37:05,410 --> 00:37:13,808
so we<font color="#E5E5E5"> could replace tools in</font><font color="#CCCCCC"> Li benign</font>

659
00:37:10,900 --> 00:37:15,789
<font color="#CCCCCC">whether</font><font color="#E5E5E5"> simply</font><font color="#CCCCCC"> better tools and</font><font color="#E5E5E5"> get</font>

660
00:37:13,809 --> 00:37:22,269
better performance<font color="#CCCCCC"> with the same</font>

661
00:37:15,789 --> 00:37:27,460
complexity<font color="#E5E5E5"> I'm not sure but if if</font>

662
00:37:22,269 --> 00:37:28,950
everyone<font color="#E5E5E5"> gets set</font><font color="#CCCCCC"> opted and used as</font><font color="#E5E5E5"> a</font>

663
00:37:27,460 --> 00:37:31,809
[Music]

664
00:37:28,950 --> 00:37:34,359
standard<font color="#E5E5E5"> people will work on this for</font>

665
00:37:31,809 --> 00:37:39,190
years and<font color="#E5E5E5"> and it will probably eat</font><font color="#CCCCCC"> at</font>

666
00:37:34,359 --> 00:37:42,210
<font color="#E5E5E5">night but we can't prove that yet</font><font color="#CCCCCC"> ok</font>

667
00:37:39,190 --> 00:37:45,009
this<font color="#E5E5E5"> is what I had just</font><font color="#CCCCCC"> give a</font><font color="#E5E5E5"> quick</font>

668
00:37:42,210 --> 00:37:47,650
thumb in the air of what the<font color="#E5E5E5"> complexity</font>

669
00:37:45,009 --> 00:37:52,319
is absolutely right<font color="#E5E5E5"> now relative history</font>

670
00:37:47,650 --> 00:37:59,009
but absolutely the vp9<font color="#E5E5E5"> roughly ah</font>

671
00:37:52,319 --> 00:38:09,460
<font color="#CCCCCC">certainly more than 100 times</font><font color="#E5E5E5"> I guess</font>

672
00:37:59,009 --> 00:38:11,950
yeah so I<font color="#E5E5E5"> guess it's a</font><font color="#CCCCCC"> crystalline so</font><font color="#E5E5E5"> it</font>

673
00:38:09,460 --> 00:38:15,099
will probably it hasn't been a great

674
00:38:11,950 --> 00:38:17,828
focus to speed up everyone<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> will</font>

675
00:38:15,099 --> 00:38:21,000
probably<font color="#E5E5E5"> get more focused as the actual</font>

676
00:38:17,829 --> 00:38:23,619
tools are finalized<font color="#E5E5E5"> but yeah right</font>

677
00:38:21,000 --> 00:38:28,930
<font color="#CCCCCC">the reference</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> gallery isn't</font><font color="#E5E5E5"> that</font>

678
00:38:23,619 --> 00:38:34,780
practical<font color="#E5E5E5"> yeah we can't simply I think</font>

679
00:38:28,930 --> 00:38:38,919
the the<font color="#CCCCCC"> specification says that we're</font>

680
00:38:34,780 --> 00:38:42,660
supposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run 4k sequences and bit but</font>

681
00:38:38,920 --> 00:38:47,650
we can't practically do that now so

682
00:38:42,660 --> 00:38:49,598
<font color="#E5E5E5">nobody</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> been presenting the test</font>

683
00:38:47,650 --> 00:38:53,290
results<font color="#E5E5E5"> according to the specs actually</font>

684
00:38:49,599 --> 00:38:54,970
because it's simply too slow<font color="#E5E5E5"> and so just</font>

685
00:38:53,290 --> 00:38:56,650
<font color="#E5E5E5">to know</font><font color="#CCCCCC"> that the those numbers were for</font>

686
00:38:54,970 --> 00:38:58,480
the encoder<font color="#E5E5E5"> and were roughly what the</font>

687
00:38:56,650 --> 00:39:04,420
decoders yeah

688
00:38:58,480 --> 00:39:08,589
the decoder speed is<font color="#E5E5E5"> roughly</font><font color="#CCCCCC"> 1/4</font><font color="#E5E5E5"> since</font>

689
00:39:04,420 --> 00:39:12,099
<font color="#E5E5E5">July 2016 it's about 4 X's</font><font color="#CCCCCC"> complex is</font>

690
00:39:08,589 --> 00:39:15,970
vp9<font color="#E5E5E5"> four times the complexity I think</font>

691
00:39:12,099 --> 00:39:19,690
it's closer to 16 times<font color="#E5E5E5"> but I think</font><font color="#CCCCCC"> the</font>

692
00:39:15,970 --> 00:39:22,799
main reason<font color="#E5E5E5"> for that</font><font color="#CCCCCC"> is there's</font><font color="#E5E5E5"> still</font>

693
00:39:19,690 --> 00:39:25,720
some<font color="#E5E5E5"> simsim</font><font color="#CCCCCC"> de optimizations lacking in</font>

694
00:39:22,800 --> 00:39:35,060
vp9 so I<font color="#E5E5E5"> think four times is a more</font>

695
00:39:25,720 --> 00:39:38,089
<font color="#CCCCCC">accurate number thank you thank you</font>

696
00:39:35,060 --> 00:39:38,090
[Music]

697
00:39:54,080 --> 00:40:01,790
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> stand in the pink box</font>

698
00:39:58,000 --> 00:40:04,460
I'm Tim Terry<font color="#CCCCCC"> berry I'd be presenting</font>

699
00:40:01,790 --> 00:40:08,830
work on the dollar transform design<font color="#E5E5E5"> this</font>

700
00:40:04,460 --> 00:40:13,490
<font color="#E5E5E5">is joint work with Nathan eggy and</font><font color="#CCCCCC"> Monty</font>

701
00:40:08,830 --> 00:40:15,980
<font color="#CCCCCC">so although</font><font color="#E5E5E5"> I got this stuff started a</font>

702
00:40:13,490 --> 00:40:19,660
few<font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago those two have really been</font>

703
00:40:15,980 --> 00:40:21,890
doing<font color="#E5E5E5"> the bulk of the work lately so I</font>

704
00:40:19,660 --> 00:40:25,660
think<font color="#E5E5E5"> most of the credit of</font><font color="#CCCCCC"> the recent</font>

705
00:40:21,890 --> 00:40:28,120
<font color="#E5E5E5">developments goes to them next slide um</font>

706
00:40:25,660 --> 00:40:30,410
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to talk a little</font><font color="#E5E5E5"> bit about</font>

707
00:40:28,120 --> 00:40:33,859
what<font color="#CCCCCC"> our goals were in designing</font>

708
00:40:30,410 --> 00:40:35,960
transforms<font color="#E5E5E5"> for</font><font color="#CCCCCC"> dello one should be</font>

709
00:40:33,860 --> 00:40:39,020
pretty non-controversial as we wanted an

710
00:40:35,960 --> 00:40:40,880
exact integer implementation it's just

711
00:40:39,020 --> 00:40:43,430
the way that<font color="#E5E5E5"> video codecs have worked</font>

712
00:40:40,880 --> 00:40:46,250
ever since 264 there's lots of<font color="#E5E5E5"> iterative</font>

713
00:40:43,430 --> 00:40:49,149
prediction with unstable filters<font color="#CCCCCC"> so you</font>

714
00:40:46,250 --> 00:40:51,920
<font color="#E5E5E5">want an exact specified implementation</font>

715
00:40:49,150 --> 00:40:55,370
<font color="#E5E5E5">so that all all decoders agree and</font>

716
00:40:51,920 --> 00:40:56,930
there's no drift<font color="#E5E5E5"> um</font><font color="#CCCCCC"> we also wanted to be</font>

717
00:40:55,370 --> 00:40:59,480
able<font color="#CCCCCC"> to support many different</font>

718
00:40:56,930 --> 00:41:02,210
variations<font color="#E5E5E5"> of the transforms so low bit</font>

719
00:40:59,480 --> 00:41:05,390
depth hide the depth both<font color="#E5E5E5"> square and</font>

720
00:41:02,210 --> 00:41:10,040
rectangular<font color="#CCCCCC"> discrete cosine transforms</font>

721
00:41:05,390 --> 00:41:13,040
discrete sine transforms etc<font color="#E5E5E5"> we also</font>

722
00:41:10,040 --> 00:41:16,130
wanted high accuracy so this is this is

723
00:41:13,040 --> 00:41:19,880
2017 as you just heard<font color="#E5E5E5"> we can have lots</font>

724
00:41:16,130 --> 00:41:21,680
<font color="#CCCCCC">of complexity so in times past people</font>

725
00:41:19,880 --> 00:41:23,240
were afraid of<font color="#E5E5E5"> having multiplies and</font>

726
00:41:21,680 --> 00:41:25,009
while we'd like<font color="#CCCCCC"> as few multiplies as</font>

727
00:41:23,240 --> 00:41:26,149
possible we can have some multiplies in

728
00:41:25,010 --> 00:41:29,750
there if it<font color="#E5E5E5"> gives us more accurate</font>

729
00:41:26,150 --> 00:41:31,990
transforms<font color="#CCCCCC"> that said we want to</font><font color="#E5E5E5"> keep</font>

730
00:41:29,750 --> 00:41:34,790
software complexity<font color="#E5E5E5"> as low as possible</font>

731
00:41:31,990 --> 00:41:37,580
<font color="#CCCCCC">in particular paying attention</font><font color="#E5E5E5"> to how</font>

732
00:41:34,790 --> 00:41:38,630
things would be<font color="#E5E5E5"> implemented in</font><font color="#CCCCCC"> Cindy and</font>

733
00:41:37,580 --> 00:41:41,210
at the same time<font color="#E5E5E5"> we want to have</font>

734
00:41:38,630 --> 00:41:43,160
reasonable<font color="#E5E5E5"> hardware complexity which</font>

735
00:41:41,210 --> 00:41:45,560
means we need low latency for small

736
00:41:43,160 --> 00:41:48,170
transform sizes and for all these

737
00:41:45,560 --> 00:41:52,100
<font color="#E5E5E5">variations we want to keep transform</font>

738
00:41:48,170 --> 00:41:54,170
reuse and embedded designs<font color="#E5E5E5"> in mind so</font>

739
00:41:52,100 --> 00:41:56,750
that<font color="#E5E5E5"> stuff will come</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> along as</font>

740
00:41:54,170 --> 00:42:01,970
you go through some of<font color="#E5E5E5"> the slides here</font>

741
00:41:56,750 --> 00:42:05,540
next<font color="#CCCCCC"> slide um so just just to start</font><font color="#E5E5E5"> us</font>

742
00:42:01,970 --> 00:42:07,700
off<font color="#E5E5E5"> this is the the</font><font color="#CCCCCC"> four point discrete</font>

743
00:42:05,540 --> 00:42:10,970
cosine transform for each

744
00:42:07,700 --> 00:42:12,710
<font color="#CCCCCC">sixty-four it is very low complexity so</font>

745
00:42:10,970 --> 00:42:18,109
you can<font color="#E5E5E5"> implement this with</font><font color="#CCCCCC"> 8 ads and</font>

746
00:42:12,710 --> 00:42:21,349
<font color="#CCCCCC">two shifts it has a few drawbacks</font><font color="#E5E5E5"> one of</font>

747
00:42:18,109 --> 00:42:24,200
them is that that it is a<font color="#E5E5E5"> non-uniform</font>

748
00:42:21,349 --> 00:42:25,609
scale transform so the coefficients<font color="#CCCCCC"> that</font>

749
00:42:24,200 --> 00:42:28,759
<font color="#CCCCCC">you get out</font><font color="#E5E5E5"> even though the discrete</font>

750
00:42:25,609 --> 00:42:31,098
cosine is this<font color="#E5E5E5"> unit</font><font color="#CCCCCC"> very transform where</font>

751
00:42:28,760 --> 00:42:35,210
all the<font color="#E5E5E5"> basis functions have the</font><font color="#CCCCCC"> same</font>

752
00:42:31,099 --> 00:42:36,920
<font color="#CCCCCC">magnitude</font><font color="#E5E5E5"> of 1.0</font><font color="#CCCCCC"> this gives you out</font>

753
00:42:35,210 --> 00:42:41,119
coefficients that<font color="#E5E5E5"> have different skills</font>

754
00:42:36,920 --> 00:42:43,549
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you then have</font><font color="#E5E5E5"> to multiply by and</font>

755
00:42:41,119 --> 00:42:46,160
that usually gets absorbed into the the

756
00:42:43,549 --> 00:42:49,400
<font color="#E5E5E5">quantization step so you know say oh</font>

757
00:42:46,160 --> 00:42:51,950
we're saving<font color="#CCCCCC"> one multiply</font><font color="#E5E5E5"> but in reality</font>

758
00:42:49,400 --> 00:42:54,890
<font color="#E5E5E5">in in the way encoders are designed</font>

759
00:42:51,950 --> 00:42:55,939
today we do rate distortion<font color="#E5E5E5"> optimization</font>

760
00:42:54,890 --> 00:42:57,618
with several<font color="#CCCCCC"> different possible</font>

761
00:42:55,940 --> 00:42:59,420
quantization levels for<font color="#E5E5E5"> all the</font>

762
00:42:57,619 --> 00:43:01,040
different coefficients so you<font color="#CCCCCC"> actually</font>

763
00:42:59,420 --> 00:43:03,920
<font color="#E5E5E5">need to do several multiplies in there</font>

764
00:43:01,040 --> 00:43:06,109
in order<font color="#E5E5E5"> to get a consistent estimate of</font>

765
00:43:03,920 --> 00:43:10,400
distortion<font color="#CCCCCC"> that backs out this scaling</font>

766
00:43:06,109 --> 00:43:13,640
<font color="#E5E5E5">factor</font><font color="#CCCCCC"> and that those extra multiplies</font>

767
00:43:10,400 --> 00:43:15,170
<font color="#E5E5E5">get multiplied by the number</font><font color="#CCCCCC"> of</font>

768
00:43:13,640 --> 00:43:17,450
different<font color="#CCCCCC"> options</font><font color="#E5E5E5"> that you search in the</font>

769
00:43:15,170 --> 00:43:22,069
encoder which is we just<font color="#E5E5E5"> saw you know</font>

770
00:43:17,450 --> 00:43:24,500
<font color="#E5E5E5">this can be quite a lot</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> other thing</font>

771
00:43:22,069 --> 00:43:26,029
is is that<font color="#E5E5E5"> when you start having larger</font>

772
00:43:24,500 --> 00:43:28,339
and larger transforms so this is only a

773
00:43:26,030 --> 00:43:31,130
<font color="#CCCCCC">four point transform you know you start</font>

774
00:43:28,339 --> 00:43:32,779
<font color="#CCCCCC">going up to say</font><font color="#E5E5E5"> 64 point transforms you</font>

775
00:43:31,130 --> 00:43:34,490
actually need a very large<font color="#E5E5E5"> table of</font>

776
00:43:32,780 --> 00:43:38,030
constants for all these these scale

777
00:43:34,490 --> 00:43:39,979
factors so<font color="#E5E5E5"> we added the new goal that we</font>

778
00:43:38,030 --> 00:43:41,869
wanted<font color="#E5E5E5"> to have uniform scaling for all</font>

779
00:43:39,980 --> 00:43:43,640
of our transforms<font color="#E5E5E5"> and you know that that</font>

780
00:43:41,869 --> 00:43:47,780
will cost you<font color="#CCCCCC"> four multiplies in this</font>

781
00:43:43,640 --> 00:43:49,940
design but as we go<font color="#E5E5E5"> to larger</font><font color="#CCCCCC"> and larger</font>

782
00:43:47,780 --> 00:43:52,280
sizes it turns out you<font color="#E5E5E5"> can achieve this</font>

783
00:43:49,940 --> 00:43:58,790
<font color="#CCCCCC">with much less than</font><font color="#E5E5E5"> one multiply</font><font color="#CCCCCC"> for</font>

784
00:43:52,280 --> 00:43:59,569
coefficient all right<font color="#E5E5E5"> next slide so this</font>

785
00:43:58,790 --> 00:44:02,660
is the vp9

786
00:43:59,569 --> 00:44:05,690
<font color="#CCCCCC">four-point discrete cosine transform and</font>

787
00:44:02,660 --> 00:44:08,328
<font color="#CCCCCC">I</font><font color="#E5E5E5"> may pick on vp9 a little bit today</font>

788
00:44:05,690 --> 00:44:11,809
<font color="#E5E5E5">just it's not because I think the vp9</font>

789
00:44:08,329 --> 00:44:14,470
design is bad<font color="#E5E5E5"> but it's actually a fairly</font>

790
00:44:11,809 --> 00:44:16,849
standard textbook<font color="#E5E5E5"> design for transforms</font>

791
00:44:14,470 --> 00:44:19,040
but<font color="#CCCCCC"> I think we can do a little</font><font color="#E5E5E5"> bit</font>

792
00:44:16,849 --> 00:44:20,960
better<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so I want to talk about some</font>

793
00:44:19,040 --> 00:44:21,560
<font color="#CCCCCC">of the improvements</font><font color="#E5E5E5"> we've made relative</font>

794
00:44:20,960 --> 00:44:23,750
to vp9

795
00:44:21,560 --> 00:44:27,830
just because<font color="#CCCCCC"> vp9 transforms are the ones</font>

796
00:44:23,750 --> 00:44:30,140
<font color="#E5E5E5">that I know the best so this is the</font>

797
00:44:27,830 --> 00:44:34,160
<font color="#CCCCCC">4-point DCT</font><font color="#E5E5E5"> it actually has six</font>

798
00:44:30,140 --> 00:44:37,520
multiplies<font color="#CCCCCC"> they are full 32-bit products</font>

799
00:44:34,160 --> 00:44:39,230
<font color="#E5E5E5">so if you look at the bottom there we</font>

800
00:44:37,520 --> 00:44:41,990
were actually taking<font color="#E5E5E5"> two of these</font>

801
00:44:39,230 --> 00:44:43,910
products and adding them together so we

802
00:44:41,990 --> 00:44:48,109
need the full 32-bit result in order<font color="#CCCCCC"> to</font>

803
00:44:43,910 --> 00:44:51,020
do that and<font color="#CCCCCC"> then it additionally has</font>

804
00:44:48,110 --> 00:44:54,980
<font color="#E5E5E5">eight adds two of those happen at 32</font>

805
00:44:51,020 --> 00:44:59,690
bits<font color="#E5E5E5"> and then four shifts</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right next</font>

806
00:44:54,980 --> 00:45:00,520
slide so there are a<font color="#E5E5E5"> few avenues for</font>

807
00:44:59,690 --> 00:45:04,790
improvement

808
00:45:00,520 --> 00:45:06,950
one is is simplifying the multiplies so

809
00:45:04,790 --> 00:45:08,390
if you looked at<font color="#E5E5E5"> the 264 design like we</font>

810
00:45:06,950 --> 00:45:09,859
could just<font color="#E5E5E5"> scale the outputs of those</font>

811
00:45:08,390 --> 00:45:12,950
that transform then it would only<font color="#CCCCCC"> cost</font>

812
00:45:09,860 --> 00:45:16,820
<font color="#E5E5E5">four multiplies instead of six</font>

813
00:45:12,950 --> 00:45:18,919
but the 264 design is not a real DCT

814
00:45:16,820 --> 00:45:20,150
it's<font color="#E5E5E5"> only an approximation to a DCT so</font>

815
00:45:18,920 --> 00:45:23,600
it would be a<font color="#E5E5E5"> little bit less</font><font color="#CCCCCC"> accurate</font>

816
00:45:20,150 --> 00:45:26,120
<font color="#CCCCCC">but we're going</font><font color="#E5E5E5"> to see in a bit we</font><font color="#CCCCCC"> can</font>

817
00:45:23,600 --> 00:45:30,020
actually do just<font color="#E5E5E5"> as well with</font><font color="#CCCCCC"> an</font>

818
00:45:26,120 --> 00:45:32,750
accurate transform<font color="#E5E5E5"> so the other approach</font>

819
00:45:30,020 --> 00:45:37,340
for<font color="#E5E5E5"> improving things</font><font color="#CCCCCC"> is has to do with</font>

820
00:45:32,750 --> 00:45:39,320
scaling<font color="#CCCCCC"> so the vp9</font><font color="#E5E5E5"> DCT adds this factor</font>

821
00:45:37,340 --> 00:45:42,680
of<font color="#CCCCCC"> a square</font><font color="#E5E5E5"> root of</font><font color="#CCCCCC"> 2 relative</font><font color="#E5E5E5"> to a</font>

822
00:45:39,320 --> 00:45:44,090
unitary transform<font color="#CCCCCC"> um and in fact it</font>

823
00:45:42,680 --> 00:45:47,000
turns<font color="#CCCCCC"> out as you make the transform</font>

824
00:45:44,090 --> 00:45:48,500
larger and larger<font color="#CCCCCC"> each time you</font><font color="#E5E5E5"> double</font>

825
00:45:47,000 --> 00:45:50,570
the size<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the transform it adds an</font>

826
00:45:48,500 --> 00:45:54,230
<font color="#CCCCCC">additional factor of of the square root</font>

827
00:45:50,570 --> 00:45:56,450
of<font color="#E5E5E5"> 2 so this is this is sort of</font><font color="#CCCCCC"> okay if</font>

828
00:45:54,230 --> 00:45:57,800
you take<font color="#E5E5E5"> the log of the width on the low</font>

829
00:45:56,450 --> 00:46:00,319
<font color="#E5E5E5">that the height and that comes out</font><font color="#CCCCCC"> to be</font>

830
00:45:57,800 --> 00:46:03,260
even then you can<font color="#CCCCCC"> just correct</font><font color="#E5E5E5"> the thing</font>

831
00:46:00,320 --> 00:46:06,590
with a shift<font color="#E5E5E5"> but now we want</font><font color="#CCCCCC"> to use</font>

832
00:46:03,260 --> 00:46:08,320
<font color="#E5E5E5">rectangular transforms like an 8 by 4</font>

833
00:46:06,590 --> 00:46:12,380
transform or something along<font color="#E5E5E5"> that and</font>

834
00:46:08,320 --> 00:46:13,970
now this scale factor becomes odd<font color="#CCCCCC"> and so</font>

835
00:46:12,380 --> 00:46:16,220
we can't correct it with a<font color="#CCCCCC"> shift we</font>

836
00:46:13,970 --> 00:46:19,160
<font color="#E5E5E5">actually have to correct it by doing</font><font color="#CCCCCC"> one</font>

837
00:46:16,220 --> 00:46:21,169
multiply<font color="#CCCCCC"> for coefficient in order to get</font>

838
00:46:19,160 --> 00:46:24,259
<font color="#E5E5E5">something that matches the same same</font>

839
00:46:21,170 --> 00:46:27,560
scale as all of our<font color="#E5E5E5"> quantizers all right</font>

840
00:46:24,260 --> 00:46:29,840
slide so where does<font color="#E5E5E5"> this scaling</font>

841
00:46:27,560 --> 00:46:30,890
actually come from structurally<font color="#CCCCCC"> next</font>

842
00:46:29,840 --> 00:46:34,039
slide

843
00:46:30,890 --> 00:46:36,680
<font color="#E5E5E5">um</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is sort of the the textbook</font>

844
00:46:34,039 --> 00:46:39,529
factorization of<font color="#E5E5E5"> a type two discrete</font>

845
00:46:36,680 --> 00:46:41,058
cosine transform<font color="#E5E5E5"> so it starts out</font><font color="#CCCCCC"> with</font>

846
00:46:39,529 --> 00:46:43,130
this stage here on the left

847
00:46:41,059 --> 00:46:47,029
we're<font color="#CCCCCC"> basically computing sums and</font>

848
00:46:43,130 --> 00:46:49,010
differences<font color="#E5E5E5"> of pairs of pixels sometimes</font>

849
00:46:47,029 --> 00:46:51,200
called plus<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> 1 butterflies or</font>

850
00:46:49,010 --> 00:46:53,510
something to that effect<font color="#E5E5E5"> and then after</font>

851
00:46:51,200 --> 00:46:56,899
that you can<font color="#E5E5E5"> split the thing into a</font>

852
00:46:53,510 --> 00:46:59,930
smaller<font color="#E5E5E5"> discrete cosine transform and a</font>

853
00:46:56,900 --> 00:47:03,650
smaller discrete sine transform<font color="#CCCCCC"> alright</font>

854
00:46:59,930 --> 00:47:05,808
slide so these butterflies here at the

855
00:47:03,650 --> 00:47:08,210
beginning<font color="#CCCCCC"> are our nonunitary like if you</font>

856
00:47:05,809 --> 00:47:09,799
you compute equivalent basis functions

857
00:47:08,210 --> 00:47:11,779
for<font color="#CCCCCC"> that and say what's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> magnitude of</font>

858
00:47:09,799 --> 00:47:13,910
the basis function<font color="#E5E5E5"> it's 1 squared plus 1</font>

859
00:47:11,779 --> 00:47:17,329
<font color="#CCCCCC">squared</font><font color="#E5E5E5"> is is square root of that</font><font color="#CCCCCC"> is the</font>

860
00:47:13,910 --> 00:47:20,859
square<font color="#CCCCCC"> root of 2 right so that's where</font>

861
00:47:17,329 --> 00:47:23,359
that factor comes from next slide and

862
00:47:20,859 --> 00:47:26,690
because<font color="#E5E5E5"> this is recursive there's</font>

863
00:47:23,359 --> 00:47:30,078
another one<font color="#E5E5E5"> inside there and as you as</font>

864
00:47:26,690 --> 00:47:32,000
you expand<font color="#E5E5E5"> the transform by a factor of</font>

865
00:47:30,079 --> 00:47:33,859
<font color="#CCCCCC">2 each time you get an additional</font><font color="#E5E5E5"> one of</font>

866
00:47:32,000 --> 00:47:37,400
these these factors<font color="#CCCCCC"> of a square root of</font>

867
00:47:33,859 --> 00:47:39,740
<font color="#E5E5E5">2 and</font><font color="#CCCCCC"> you also wind</font><font color="#E5E5E5"> up having to do</font>

868
00:47:37,400 --> 00:47:41,900
something<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> discrete sine transform</font>

869
00:47:39,740 --> 00:47:43,819
that<font color="#CCCCCC"> would is also expansion area like</font>

870
00:47:41,900 --> 00:47:50,269
this<font color="#E5E5E5"> um if you want the scales to be</font>

871
00:47:43,819 --> 00:47:52,549
uniform<font color="#E5E5E5"> all right next</font><font color="#CCCCCC"> slide so we'd</font>

872
00:47:50,269 --> 00:47:53,839
like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> rid of this extra scaling so</font>

873
00:47:52,549 --> 00:47:56,740
that we<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have all these extra</font>

874
00:47:53,839 --> 00:47:59,359
multiplies in our rectangular transforms

875
00:47:56,740 --> 00:48:03,319
so one way we can do that<font color="#CCCCCC"> is we can use</font>

876
00:47:59,359 --> 00:48:06,470
multiplies<font color="#E5E5E5"> and in fact if you go</font><font color="#CCCCCC"> back</font>

877
00:48:03,319 --> 00:48:09,319
and<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> vp9 s</font><font color="#E5E5E5"> for point DCT they</font>

878
00:48:06,470 --> 00:48:17,058
actually<font color="#E5E5E5"> already do this so I don't if</font>

879
00:48:09,319 --> 00:48:22,670
<font color="#E5E5E5">you flip back</font><font color="#CCCCCC"> to the slide 4 so this</font>

880
00:48:17,059 --> 00:48:24,650
<font color="#E5E5E5">step up here um</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually would be the</font>

881
00:48:22,670 --> 00:48:26,539
same thing as a plus 1 minus 1 butterfly

882
00:48:24,650 --> 00:48:28,579
but then it has scaled the outputs<font color="#CCCCCC"> out</font>

883
00:48:26,539 --> 00:48:30,470
after that so that they match<font color="#CCCCCC"> the</font>

884
00:48:28,579 --> 00:48:33,410
discrete sine transform at the bottom

885
00:48:30,470 --> 00:48:36,040
there so<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that's one way to</font>

886
00:48:33,410 --> 00:48:38,319
<font color="#E5E5E5">correct this going</font>

887
00:48:36,040 --> 00:48:40,210
but that<font color="#E5E5E5"> only got rid of it out of one</font>

888
00:48:38,320 --> 00:48:43,150
stage and<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> getting a set of these</font>

889
00:48:40,210 --> 00:48:47,470
on at<font color="#E5E5E5"> every stage so that winds up being</font>

890
00:48:43,150 --> 00:48:49,270
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of expensive</font><font color="#CCCCCC"> so another approach</font><font color="#E5E5E5"> is</font>

891
00:48:47,470 --> 00:48:51,790
<font color="#E5E5E5">we can restrict ourselves to only using</font>

892
00:48:49,270 --> 00:48:53,650
<font color="#E5E5E5">shifts and ads and use</font><font color="#CCCCCC"> asymmetric</font>

893
00:48:51,790 --> 00:48:58,060
scaling<font color="#CCCCCC"> I'll describe what I mean by</font>

894
00:48:53,650 --> 00:48:59,110
that<font color="#E5E5E5"> in the next few slides</font><font color="#CCCCCC"> so we have</font>

895
00:48:58,060 --> 00:49:03,220
<font color="#E5E5E5">there are basically two different</font>

896
00:48:59,110 --> 00:49:04,930
<font color="#CCCCCC">options the the construct at the top</font>

897
00:49:03,220 --> 00:49:09,009
<font color="#CCCCCC">there computes a sum and difference</font>

898
00:49:04,930 --> 00:49:11,710
where the the output<font color="#CCCCCC"> of the second</font>

899
00:49:09,010 --> 00:49:14,470
component<font color="#E5E5E5"> is have compared to what you</font>

900
00:49:11,710 --> 00:49:16,180
<font color="#E5E5E5">would normally get and then the next one</font>

901
00:49:14,470 --> 00:49:18,879
computes a sum and difference where the

902
00:49:16,180 --> 00:49:21,279
output of the<font color="#E5E5E5"> first the first</font><font color="#CCCCCC"> output is</font>

903
00:49:18,880 --> 00:49:23,500
<font color="#CCCCCC">half - compared to normally get and as</font>

904
00:49:21,280 --> 00:49:26,350
you see<font color="#E5E5E5"> you can do this with with just</font>

905
00:49:23,500 --> 00:49:32,380
by adding<font color="#E5E5E5"> one shift in between the</font><font color="#CCCCCC"> the</font>

906
00:49:26,350 --> 00:49:34,360
<font color="#CCCCCC">two the</font><font color="#E5E5E5"> two additions or subtractions</font><font color="#CCCCCC"> so</font>

907
00:49:32,380 --> 00:49:35,950
what happens is instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> instead of</font>

908
00:49:34,360 --> 00:49:38,470
<font color="#E5E5E5">doing an addition and subtraction and</font>

909
00:49:35,950 --> 00:49:40,359
having both of<font color="#E5E5E5"> the scales increased by a</font>

910
00:49:38,470 --> 00:49:42,459
factor<font color="#CCCCCC"> of</font><font color="#E5E5E5"> square root of</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> what we're</font>

911
00:49:40,360 --> 00:49:44,080
actually<font color="#E5E5E5"> doing is increasing one by a</font>

912
00:49:42,460 --> 00:49:45,760
square root<font color="#E5E5E5"> of two</font><font color="#CCCCCC"> and decreasing</font><font color="#E5E5E5"> the</font>

913
00:49:44,080 --> 00:49:48,069
other by a factor of<font color="#E5E5E5"> square root of two</font>

914
00:49:45,760 --> 00:49:50,260
<font color="#E5E5E5">so they become</font><font color="#CCCCCC"> asymmetric</font><font color="#E5E5E5"> but overall</font>

915
00:49:48,070 --> 00:49:52,090
you know the scaling is unity<font color="#E5E5E5"> so like</font>

916
00:49:50,260 --> 00:49:55,000
the determinant of this this transform

917
00:49:52,090 --> 00:49:56,710
as a whole is<font color="#CCCCCC"> still</font><font color="#E5E5E5"> 1 and then we can</font>

918
00:49:55,000 --> 00:50:00,280
<font color="#CCCCCC">cancel out this asymmetry</font><font color="#E5E5E5"> in subsequent</font>

919
00:49:56,710 --> 00:50:03,040
<font color="#E5E5E5">steps</font><font color="#CCCCCC"> so next</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> and you do that</font><font color="#E5E5E5"> we</font>

920
00:50:00,280 --> 00:50:05,500
use constructs<font color="#CCCCCC"> like this so the</font><font color="#E5E5E5"> first</font>

921
00:50:03,040 --> 00:50:08,740
one<font color="#E5E5E5"> there computes a sum and difference</font>

922
00:50:05,500 --> 00:50:11,020
where it<font color="#CCCCCC"> halves</font><font color="#E5E5E5"> the second</font><font color="#CCCCCC"> input and</font>

923
00:50:08,740 --> 00:50:15,609
then the second one does the same<font color="#CCCCCC"> thing</font>

924
00:50:11,020 --> 00:50:18,220
except it has the first input<font color="#E5E5E5"> so these</font>

925
00:50:15,610 --> 00:50:19,720
these kinds<font color="#E5E5E5"> of constructs can can cancel</font>

926
00:50:18,220 --> 00:50:26,379
<font color="#E5E5E5">out the asymmetry from the previous</font>

927
00:50:19,720 --> 00:50:29,230
steps<font color="#CCCCCC"> so next slide we'd also</font><font color="#E5E5E5"> like as I</font>

928
00:50:26,380 --> 00:50:32,170
said to simplify the multiplies so all

929
00:50:29,230 --> 00:50:33,930
of these multiplies come from plane

930
00:50:32,170 --> 00:50:36,460
rotations between two<font color="#CCCCCC"> variables so</font>

931
00:50:33,930 --> 00:50:38,259
<font color="#CCCCCC">basically in all of our transform</font>

932
00:50:36,460 --> 00:50:41,500
factorizations we've decomposed it into

933
00:50:38,260 --> 00:50:44,290
a series<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these plane rotations where</font>

934
00:50:41,500 --> 00:50:48,010
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> taking two values and we are</font>

935
00:50:44,290 --> 00:50:49,240
<font color="#CCCCCC">rotating them by some</font><font color="#E5E5E5"> amount so we</font><font color="#CCCCCC"> can</font>

936
00:50:48,010 --> 00:50:51,040
actually

937
00:50:49,240 --> 00:50:53,259
you know<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of doing that</font><font color="#E5E5E5"> as as a</font>

938
00:50:51,040 --> 00:50:55,930
<font color="#E5E5E5">matrix multiply here we have four</font>

939
00:50:53,260 --> 00:50:57,910
multiplies<font color="#E5E5E5"> in two additions we can get</font>

940
00:50:55,930 --> 00:51:00,640
rid of<font color="#E5E5E5"> one multiply and instead add an</font>

941
00:50:57,910 --> 00:51:06,240
addition<font color="#E5E5E5"> by using a construct like that</font>

942
00:51:00,640 --> 00:51:08,890
at the<font color="#E5E5E5"> bottom here</font><font color="#CCCCCC"> all right next slide</font>

943
00:51:06,240 --> 00:51:11,049
<font color="#CCCCCC">so we can actually</font><font color="#E5E5E5"> also arbitrarily</font>

944
00:51:08,890 --> 00:51:14,290
scale the inputs<font color="#E5E5E5"> and</font><font color="#CCCCCC"> outputs</font><font color="#E5E5E5"> of these</font>

945
00:51:11,050 --> 00:51:17,080
rotations<font color="#E5E5E5"> so just multiplying through um</font>

946
00:51:14,290 --> 00:51:19,900
you can instead derive a series of<font color="#E5E5E5"> steps</font>

947
00:51:17,080 --> 00:51:22,110
which which looks like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

948
00:51:19,900 --> 00:51:25,450
important thing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> note is that that all</font>

949
00:51:22,110 --> 00:51:27,490
<font color="#CCCCCC">of the all of</font><font color="#E5E5E5"> the complex stuff there is</font>

950
00:51:25,450 --> 00:51:30,100
<font color="#E5E5E5">basically just reduces down</font><font color="#CCCCCC"> to a</font>

951
00:51:27,490 --> 00:51:32,890
constant<font color="#E5E5E5"> and so it's it's</font><font color="#CCCCCC"> x0 minus</font><font color="#E5E5E5"> a</font>

952
00:51:30,100 --> 00:51:35,618
constant<font color="#CCCCCC"> times x1 x1 minus a constant</font>

953
00:51:32,890 --> 00:51:39,279
<font color="#E5E5E5">times p0 and then p0 minus a constant</font>

954
00:51:35,619 --> 00:51:43,410
<font color="#CCCCCC">times y1 so this becomes very simple</font><font color="#E5E5E5"> and</font>

955
00:51:39,280 --> 00:51:47,070
and can let us absorb scalings<font color="#E5E5E5"> in the</font>

956
00:51:43,410 --> 00:51:50,080
multiplies as well<font color="#E5E5E5"> all right next slide</font>

957
00:51:47,070 --> 00:51:52,810
so the advantages of<font color="#CCCCCC"> doing this we get</font>

958
00:51:50,080 --> 00:51:54,340
25%<font color="#CCCCCC"> fewer multiplies</font><font color="#E5E5E5"> in general</font>

959
00:51:52,810 --> 00:51:56,529
multiplies are much more expensive than

960
00:51:54,340 --> 00:52:00,220
additions in in<font color="#E5E5E5"> software as well as</font>

961
00:51:56,530 --> 00:52:06,220
<font color="#E5E5E5">hardware they all have this structure of</font>

962
00:52:00,220 --> 00:52:08,020
X plus a<font color="#CCCCCC"> constant</font><font color="#E5E5E5"> times y so when we do</font>

963
00:52:06,220 --> 00:52:10,868
<font color="#E5E5E5">that in fixed point it's going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> X</font>

964
00:52:08,020 --> 00:52:12,369
plus<font color="#CCCCCC"> a constant times y plus a rounding</font>

965
00:52:10,869 --> 00:52:14,920
<font color="#CCCCCC">offset and then then we're going to</font>

966
00:52:12,369 --> 00:52:16,480
<font color="#E5E5E5">shift off that you know shifted to the</font>

967
00:52:14,920 --> 00:52:21,190
<font color="#E5E5E5">rights and only take the high part of</font>

968
00:52:16,480 --> 00:52:24,580
that multiplier output<font color="#E5E5E5"> so the advantage</font>

969
00:52:21,190 --> 00:52:27,130
of doing this<font color="#CCCCCC"> is that all of our</font><font color="#E5E5E5"> 16 bits</font>

970
00:52:24,580 --> 00:52:28,720
in<font color="#CCCCCC"> D stays in 16 bits</font><font color="#E5E5E5"> so we don't</font>

971
00:52:27,130 --> 00:52:32,859
actually need to<font color="#E5E5E5"> compute full 32-bit</font>

972
00:52:28,720 --> 00:52:34,899
products we only need<font color="#E5E5E5"> the top half so if</font>

973
00:52:32,859 --> 00:52:36,819
we<font color="#CCCCCC"> actually had to go compute a full</font>

974
00:52:34,900 --> 00:52:40,090
32-bit product we could<font color="#E5E5E5"> only do</font><font color="#CCCCCC"> that in</font>

975
00:52:36,820 --> 00:52:44,410
with half the throughput<font color="#E5E5E5"> in a fixed size</font>

976
00:52:40,090 --> 00:52:45,880
<font color="#CCCCCC">Sindhi register so ssse3 and neon</font>

977
00:52:44,410 --> 00:52:49,390
actually both have instructions for

978
00:52:45,880 --> 00:52:51,730
<font color="#E5E5E5">doing exactly</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of multiply so</font>

979
00:52:49,390 --> 00:52:53,770
it's a single instruction that will do

980
00:52:51,730 --> 00:52:57,660
<font color="#CCCCCC">the multiply add the rounding</font><font color="#E5E5E5"> offset and</font>

981
00:52:53,770 --> 00:52:57,660
shift the product<font color="#E5E5E5"> over to the right</font>

982
00:52:57,700 --> 00:53:03,910
and so none of<font color="#CCCCCC"> that has to has to expand</font>

983
00:53:02,230 --> 00:53:08,940
out to<font color="#CCCCCC"> a full 32</font><font color="#E5E5E5"> bits so that</font><font color="#CCCCCC"> whole</font>

984
00:53:03,910 --> 00:53:08,940
<font color="#CCCCCC">thing fits in in 16 bits next slide</font>

985
00:53:10,020 --> 00:53:15,759
so putting<font color="#E5E5E5"> all those things</font><font color="#CCCCCC"> together we</font>

986
00:53:13,210 --> 00:53:17,619
get a transform like this<font color="#E5E5E5"> so we start</font>

987
00:53:15,760 --> 00:53:18,839
off instead<font color="#E5E5E5"> of having plus 1 minus 1</font>

988
00:53:17,619 --> 00:53:23,859
butterflies we<font color="#CCCCCC"> have these these</font>

989
00:53:18,839 --> 00:53:27,250
<font color="#E5E5E5">asymmetric scaling steps</font><font color="#CCCCCC"> we use both</font>

990
00:53:23,859 --> 00:53:29,619
<font color="#E5E5E5">types so that</font><font color="#CCCCCC"> we get scaled outputs of</font>

991
00:53:27,250 --> 00:53:32,230
in different<font color="#E5E5E5"> directions</font><font color="#CCCCCC"> that we then</font>

992
00:53:29,619 --> 00:53:34,660
cancel in<font color="#E5E5E5"> the next step and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> we have</font>

993
00:53:32,230 --> 00:53:36,400
<font color="#CCCCCC">us our rotation</font><font color="#E5E5E5"> down there at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> bottom</font>

994
00:53:34,660 --> 00:53:41,890
gets replaced<font color="#E5E5E5"> by one of these</font><font color="#CCCCCC"> scaled</font>

995
00:53:36,400 --> 00:53:43,720
rotations<font color="#E5E5E5"> using only</font><font color="#CCCCCC"> 3 multiplies so we</font>

996
00:53:41,890 --> 00:53:49,150
have one more addition and three more

997
00:53:43,720 --> 00:53:53,470
multiplies than then the the<font color="#CCCCCC"> h.264</font>

998
00:53:49,150 --> 00:53:57,490
<font color="#CCCCCC">transform but we have</font><font color="#E5E5E5"> uniform scale all</font>

999
00:53:53,470 --> 00:53:59,348
<font color="#E5E5E5">right next slide</font><font color="#CCCCCC"> the other</font><font color="#E5E5E5"> thing if</font><font color="#CCCCCC"> you</font>

1000
00:53:57,490 --> 00:54:01,720
<font color="#CCCCCC">counted very carefully there are</font><font color="#E5E5E5"> 3-1</font>

1001
00:53:59,349 --> 00:54:03,579
halves on the board<font color="#CCCCCC"> our unless on</font><font color="#E5E5E5"> the</font>

1002
00:54:01,720 --> 00:54:05,529
slide<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I only say</font><font color="#E5E5E5"> two shifts at the</font>

1003
00:54:03,579 --> 00:54:10,299
<font color="#E5E5E5">top and that's because two of them are</font>

1004
00:54:05,530 --> 00:54:12,040
<font color="#E5E5E5">actually the same value so as you as you</font>

1005
00:54:10,299 --> 00:54:13,930
<font color="#E5E5E5">get larger</font><font color="#CCCCCC"> and larger transforms you'll</font>

1006
00:54:12,040 --> 00:54:15,700
also be able<font color="#E5E5E5"> to share more</font><font color="#CCCCCC"> and more of</font>

1007
00:54:13,930 --> 00:54:17,470
these shifts<font color="#E5E5E5"> between the stages like</font>

1008
00:54:15,700 --> 00:54:20,558
this<font color="#E5E5E5"> and that's just</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the way</font>

1009
00:54:17,470 --> 00:54:22,509
<font color="#CCCCCC">that we arrange them</font><font color="#E5E5E5"> all right next</font>

1010
00:54:20,559 --> 00:54:25,000
<font color="#E5E5E5">slide um</font>

1011
00:54:22,510 --> 00:54:29,619
so expanding that<font color="#E5E5E5"> out we</font><font color="#CCCCCC"> can do an</font>

1012
00:54:25,000 --> 00:54:37,470
<font color="#CCCCCC">8-point DCT</font><font color="#E5E5E5"> next slide</font><font color="#CCCCCC"> or 16-point DCT</font>

1013
00:54:29,619 --> 00:54:37,470
and that keeps going<font color="#E5E5E5"> up to</font><font color="#CCCCCC"> 64</font><font color="#E5E5E5"> points</font><font color="#CCCCCC"> I</font>

1014
00:54:37,950 --> 00:54:42,700
yeah it probably<font color="#CCCCCC"> would have</font><font color="#E5E5E5"> taken a few</font>

1015
00:54:41,109 --> 00:54:45,490
<font color="#CCCCCC">hours to make</font><font color="#E5E5E5"> the drawings for that so I</font>

1016
00:54:42,700 --> 00:54:54,250
didn't do<font color="#E5E5E5"> that but took a few</font><font color="#CCCCCC"> hours</font><font color="#E5E5E5"> to</font>

1017
00:54:45,490 --> 00:54:56,049
<font color="#CCCCCC">make that one for these</font><font color="#E5E5E5"> but the other</font>

1018
00:54:54,250 --> 00:54:58,809
other point to<font color="#CCCCCC"> make is these things</font><font color="#E5E5E5"> do</font>

1019
00:54:56,049 --> 00:55:01,690
have embedded structure so both the

1020
00:54:58,809 --> 00:55:03,579
<font color="#CCCCCC">endpoint</font><font color="#E5E5E5"> DCT and the endpoint</font><font color="#CCCCCC"> discrete</font>

1021
00:55:01,690 --> 00:55:06,670
<font color="#CCCCCC">Coast</font><font color="#E5E5E5"> are discrete sine transform are</font>

1022
00:55:03,579 --> 00:55:10,210
embedded inside a discrete cosine

1023
00:55:06,670 --> 00:55:11,500
transform that is<font color="#CCCCCC"> 4 times</font><font color="#E5E5E5"> larger so that</font>

1024
00:55:10,210 --> 00:55:14,080
embedding actually skips a

1025
00:55:11,500 --> 00:55:15,550
because of the asymmetries<font color="#E5E5E5"> so if you</font>

1026
00:55:14,080 --> 00:55:18,190
only go up<font color="#E5E5E5"> one</font><font color="#CCCCCC"> level then then we're</font>

1027
00:55:15,550 --> 00:55:20,070
actually<font color="#CCCCCC"> taking asymmetric inputs and so</font>

1028
00:55:18,190 --> 00:55:26,770
it's not exactly<font color="#CCCCCC"> the transform you need</font>

1029
00:55:20,070 --> 00:55:28,840
basically<font color="#E5E5E5"> need two sets of right yes</font>

1030
00:55:26,770 --> 00:55:32,100
yeah you need everything from<font color="#E5E5E5"> there yeah</font>

1031
00:55:28,840 --> 00:55:39,040
you even set in an odd set<font color="#E5E5E5"> essentially</font>

1032
00:55:32,100 --> 00:55:41,710
<font color="#E5E5E5">all right next slide</font><font color="#CCCCCC"> so a few notes on</font>

1033
00:55:39,040 --> 00:55:43,960
<font color="#E5E5E5">accuracy so all of these these right</font>

1034
00:55:41,710 --> 00:55:47,320
shifts and multiplies<font color="#CCCCCC"> introduce rounding</font>

1035
00:55:43,960 --> 00:55:52,210
errors<font color="#CCCCCC"> we want to keep those as small as</font>

1036
00:55:47,320 --> 00:55:54,580
possible<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can the the way</font><font color="#CCCCCC"> we go</font>

1037
00:55:52,210 --> 00:55:56,860
<font color="#CCCCCC">about this is that we shift up the</font><font color="#E5E5E5"> input</font>

1038
00:55:54,580 --> 00:55:58,690
by some number of<font color="#E5E5E5"> bits before</font><font color="#CCCCCC"> we do any</font>

1039
00:55:56,860 --> 00:56:02,740
of<font color="#CCCCCC"> the transform</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then we do the full</font>

1040
00:55:58,690 --> 00:56:05,380
<font color="#CCCCCC">four transform</font><font color="#E5E5E5"> quantize code</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> quantize</font>

1041
00:56:02,740 --> 00:56:07,390
inverse transform and then on the other

1042
00:56:05,380 --> 00:56:11,200
<font color="#CCCCCC">end</font><font color="#E5E5E5"> when we finally get down to pixels</font>

1043
00:56:07,390 --> 00:56:12,640
we ship down<font color="#CCCCCC"> the output again so how</font>

1044
00:56:11,200 --> 00:56:14,759
much<font color="#E5E5E5"> do you shift while we found</font>

1045
00:56:12,640 --> 00:56:19,180
diminishing returns at about<font color="#E5E5E5"> four bits</font>

1046
00:56:14,760 --> 00:56:21,460
<font color="#CCCCCC">and that was enough to make</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the</font>

1047
00:56:19,180 --> 00:56:22,690
discrete cosine transforms match a

1048
00:56:21,460 --> 00:56:24,490
double precision<font color="#E5E5E5"> floating point</font>

1049
00:56:22,690 --> 00:56:28,150
implementation<font color="#CCCCCC"> after rounding</font><font color="#E5E5E5"> to the</font>

1050
00:56:24,490 --> 00:56:30,009
nearest pixel value so with just a<font color="#CCCCCC"> four</font>

1051
00:56:28,150 --> 00:56:35,040
<font color="#CCCCCC">bit up shift we get the error down below</font>

1052
00:56:30,010 --> 00:56:39,300
<font color="#CCCCCC">one</font><font color="#E5E5E5"> half of a pixel step for</font><font color="#CCCCCC"> 8-bit input</font>

1053
00:56:35,040 --> 00:56:43,509
all right is that<font color="#E5E5E5"> open for Micah is that</font>

1054
00:56:39,300 --> 00:56:48,250
<font color="#E5E5E5">compared</font><font color="#CCCCCC"> to a the same approximation or</font>

1055
00:56:43,510 --> 00:56:50,140
compared<font color="#E5E5E5"> to a full full DCT implemented</font>

1056
00:56:48,250 --> 00:56:53,350
<font color="#E5E5E5">in double floating-point that's that's a</font>

1057
00:56:50,140 --> 00:56:55,270
full you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> bog</font><font color="#E5E5E5"> standard DCT you know</font>

1058
00:56:53,350 --> 00:56:59,310
not<font color="#E5E5E5"> any</font><font color="#CCCCCC"> much straight from the</font><font color="#E5E5E5"> formula</font>

1059
00:56:55,270 --> 00:56:59,310
giant matrix<font color="#CCCCCC"> multiply implementation</font>

1060
00:56:59,460 --> 00:57:06,760
that's good

1061
00:57:01,680 --> 00:57:08,109
what about what um so the error winds<font color="#E5E5E5"> up</font>

1062
00:57:06,760 --> 00:57:11,130
being<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> for higher improvements</font>

1063
00:57:08,110 --> 00:57:11,130
and<font color="#CCCCCC"> go to the next slide</font>

1064
00:57:13,579 --> 00:57:19,950
I'll talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> something</font>

1065
00:57:15,690 --> 00:57:22,200
uncouple<font color="#E5E5E5"> sides</font><font color="#CCCCCC"> yeah that's it</font><font color="#E5E5E5"> basically</font>

1066
00:57:19,950 --> 00:57:23,970
<font color="#E5E5E5">the the accuracy</font><font color="#CCCCCC"> is less important for</font>

1067
00:57:22,200 --> 00:57:26,160
higher bit depths because<font color="#CCCCCC"> what you</font>

1068
00:57:23,970 --> 00:57:29,160
<font color="#E5E5E5">actually care about is accuracy relative</font>

1069
00:57:26,160 --> 00:57:31,379
to your quantizer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so higher bit</font>

1070
00:57:29,160 --> 00:57:35,220
depths use higher quantizers to get

1071
00:57:31,380 --> 00:57:37,140
similar bit rates so we<font color="#E5E5E5"> shift up less</font>

1072
00:57:35,220 --> 00:57:38,879
for higher bit<font color="#E5E5E5"> depths on basically 10</font>

1073
00:57:37,140 --> 00:57:40,828
bits is a<font color="#CCCCCC"> two bit shift in twelve bits</font>

1074
00:57:38,880 --> 00:57:42,089
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> no that shifts so it injects a</font>

1075
00:57:40,829 --> 00:57:46,140
little bit more noise but it doesn't

1076
00:57:42,089 --> 00:57:49,019
matter but<font color="#E5E5E5"> as a result we</font><font color="#CCCCCC"> can use the</font>

1077
00:57:46,140 --> 00:57:51,180
same transforms for<font color="#E5E5E5"> all bit depths all</font>

1078
00:57:49,019 --> 00:57:53,729
<font color="#E5E5E5">right you know from the</font><font color="#CCCCCC"> floor</font><font color="#E5E5E5"> again so I</font>

1079
00:57:51,180 --> 00:57:56,788
think that also means<font color="#E5E5E5"> you can use the</font>

1080
00:57:53,729 --> 00:57:58,470
same<font color="#CCCCCC"> Sindhi one</font><font color="#E5E5E5"> right for all the input</font>

1081
00:57:56,789 --> 00:58:00,359
<font color="#E5E5E5">that's that's that's correct you can use</font>

1082
00:57:58,470 --> 00:58:08,759
the exact same implementation<font color="#E5E5E5"> that's</font>

1083
00:58:00,359 --> 00:58:11,819
nice<font color="#CCCCCC"> alright go back yeah next slide so</font>

1084
00:58:08,759 --> 00:58:15,029
how does this<font color="#E5E5E5"> compare with vp9 so vp9</font>

1085
00:58:11,819 --> 00:58:17,759
also shifts up the inputs but by not as

1086
00:58:15,029 --> 00:58:19,940
many as four bits and then it shifts

1087
00:58:17,759 --> 00:58:22,739
<font color="#CCCCCC">down the outputs by more</font><font color="#E5E5E5"> than four bits</font>

1088
00:58:19,940 --> 00:58:24,900
and actually has to do it sometimes in

1089
00:58:22,739 --> 00:58:27,599
between<font color="#CCCCCC"> row and column transforms too</font>

1090
00:58:24,900 --> 00:58:29,969
and that's<font color="#E5E5E5"> because they</font><font color="#CCCCCC"> have this extra</font>

1091
00:58:27,599 --> 00:58:33,349
<font color="#CCCCCC">factor of a square</font><font color="#E5E5E5"> root of</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> that that</font>

1092
00:58:29,969 --> 00:58:36,119
they grow by every every transform size

1093
00:58:33,349 --> 00:58:38,460
<font color="#CCCCCC">so what's actually happening is is the</font>

1094
00:58:36,119 --> 00:58:40,979
scale these vp9 coefficients grows as

1095
00:58:38,460 --> 00:58:42,839
the transform progresses so any rounding

1096
00:58:40,979 --> 00:58:45,328
errors that<font color="#CCCCCC"> you introduced early in</font><font color="#E5E5E5"> the</font>

1097
00:58:42,839 --> 00:58:46,890
process<font color="#E5E5E5"> get magnified as that scaling</font>

1098
00:58:45,329 --> 00:58:49,380
increases

1099
00:58:46,890 --> 00:58:51,868
whereas in<font color="#CCCCCC"> dala</font><font color="#E5E5E5"> all the stages</font><font color="#CCCCCC"> have the</font>

1100
00:58:49,380 --> 00:58:53,880
same scale<font color="#E5E5E5"> so all of the rounding errors</font>

1101
00:58:51,869 --> 00:58:58,009
are injected at the same level and they

1102
00:58:53,880 --> 00:58:58,009
do accumulate<font color="#CCCCCC"> but we don't magnify them</font>

1103
00:58:58,099 --> 00:59:04,729
<font color="#E5E5E5">all right next slide that's</font><font color="#CCCCCC"> the one we</font>

1104
00:59:02,430 --> 00:59:04,729
just<font color="#CCCCCC"> did</font>

1105
00:59:05,690 --> 00:59:10,650
so another important point<font color="#E5E5E5"> to talk about</font>

1106
00:59:09,030 --> 00:59:13,940
<font color="#E5E5E5">is the difference between scaling and</font>

1107
00:59:10,650 --> 00:59:16,530
dynamic range<font color="#CCCCCC"> so everything here has has</font>

1108
00:59:13,940 --> 00:59:18,660
orthonormal or unitary scaling right so

1109
00:59:16,530 --> 00:59:22,500
the magnitude of the basis functions<font color="#E5E5E5"> is</font>

1110
00:59:18,660 --> 00:59:25,740
1.0<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> dynamic range of</font><font color="#CCCCCC"> the output</font>

1111
00:59:22,500 --> 00:59:27,000
still increases<font color="#E5E5E5"> so the dynamic range</font>

1112
00:59:25,740 --> 00:59:30,558
here I mean the<font color="#E5E5E5"> minimum or maximum</font>

1113
00:59:27,000 --> 00:59:33,240
output values you<font color="#E5E5E5"> can actually have so</font>

1114
00:59:30,559 --> 00:59:35,369
all of your unitary transforms are

1115
00:59:33,240 --> 00:59:37,259
essentially<font color="#CCCCCC"> n dimensional rotations</font><font color="#E5E5E5"> and</font>

1116
00:59:35,369 --> 00:59:39,480
you can think of<font color="#E5E5E5"> the input as a big</font>

1117
00:59:37,260 --> 00:59:40,980
<font color="#CCCCCC">n-dimensional box and the length of the</font>

1118
00:59:39,480 --> 00:59:42,180
diagonal of that box is going to<font color="#E5E5E5"> be</font>

1119
00:59:40,980 --> 00:59:44,069
longer than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> length of any of the</font>

1120
00:59:42,180 --> 00:59:46,399
edges<font color="#CCCCCC"> so as you rotate it</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> get</font>

1121
00:59:44,069 --> 00:59:49,410
larger values<font color="#CCCCCC"> than you started</font><font color="#E5E5E5"> with um</font>

1122
00:59:46,400 --> 00:59:52,170
in fact<font color="#CCCCCC"> it's by a factor of</font><font color="#E5E5E5"> square root</font>

1123
00:59:49,410 --> 00:59:54,569
<font color="#CCCCCC">of</font><font color="#E5E5E5"> 2 every time</font><font color="#CCCCCC"> and doubles which you</font>

1124
00:59:52,170 --> 00:59:58,650
know is in addition<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> scaling that</font>

1125
00:59:54,569 --> 01:00:00,808
vp9 does and<font color="#CCCCCC"> in it they're</font><font color="#E5E5E5"> not the same</font>

1126
00:59:58,650 --> 01:00:02,369
scaling<font color="#E5E5E5"> so we still have this factor of</font>

1127
01:00:00,809 --> 01:00:05,730
<font color="#E5E5E5">square root</font><font color="#CCCCCC"> of 2 and</font><font color="#E5E5E5"> the size of our</font>

1128
01:00:02,369 --> 01:00:07,170
coefficients<font color="#E5E5E5"> but that's</font><font color="#CCCCCC"> okay because the</font>

1129
01:00:05,730 --> 01:00:11,040
l2 norm<font color="#E5E5E5"> is still preserved by the</font>

1130
01:00:07,170 --> 01:00:13,220
transform<font color="#CCCCCC"> so the question you</font><font color="#E5E5E5"> might ask</font>

1131
01:00:11,040 --> 01:00:17,940
is how big<font color="#CCCCCC"> can the</font><font color="#E5E5E5"> outputs actually be</font>

1132
01:00:13,220 --> 01:00:20,250
next slide<font color="#CCCCCC"> so with a</font><font color="#E5E5E5"> 4-bit upshift all</font>

1133
01:00:17,940 --> 01:00:24,000
the transforms<font color="#E5E5E5"> with 64 pixels or less</font>

1134
01:00:20,250 --> 01:00:26,369
fit in 16 bits<font color="#E5E5E5"> so that's a 9 bit</font>

1135
01:00:24,000 --> 01:00:28,530
residual<font color="#CCCCCC"> 4 bit up shift and then 3 bits</font>

1136
01:00:26,369 --> 01:00:31,319
of dynamic range expansion<font color="#E5E5E5"> which is half</font>

1137
01:00:28,530 --> 01:00:33,359
a bit for each<font color="#E5E5E5"> of the powers of 2 and 64</font>

1138
01:00:31,319 --> 01:00:35,009
so that includes your<font color="#E5E5E5"> four by four or</font>

1139
01:00:33,359 --> 01:00:39,509
<font color="#E5E5E5">four</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> eight by four eight by eight</font>

1140
01:00:35,010 --> 01:00:41,520
four by sixteen and sixteen by for all

1141
01:00:39,510 --> 01:00:45,180
of the column transforms all the way up

1142
01:00:41,520 --> 01:00:47,520
to 64 point<font color="#E5E5E5"> also fit in</font><font color="#CCCCCC"> sixteen bits so</font>

1143
01:00:45,180 --> 01:00:49,470
that<font color="#E5E5E5"> means that that 16 bits is the</font>

1144
01:00:47,520 --> 01:00:51,990
<font color="#CCCCCC">maximum size that you need</font><font color="#E5E5E5"> for a</font>

1145
01:00:49,470 --> 01:00:53,819
<font color="#E5E5E5">hardware transpose buffer so in between</font>

1146
01:00:51,990 --> 01:00:55,140
row and column stages the hardware has

1147
01:00:53,819 --> 01:00:58,290
to buffer the<font color="#E5E5E5"> coefficients so it can</font>

1148
01:00:55,140 --> 01:01:00,420
transpose them which is a fairly

1149
01:00:58,290 --> 01:01:03,540
significant gate cost so being able to

1150
01:01:00,420 --> 01:01:05,069
<font color="#E5E5E5">keep that small as nice um it also means</font>

1151
01:01:03,540 --> 01:01:07,410
that when you're writing<font color="#CCCCCC"> Cindy you can</font>

1152
01:01:05,069 --> 01:01:08,970
write a Cindy for the row transforms and

1153
01:01:07,410 --> 01:01:10,819
it used<font color="#CCCCCC"> to be simply for the column</font>

1154
01:01:08,970 --> 01:01:14,009
transforms and it all<font color="#E5E5E5"> fits in</font><font color="#CCCCCC"> 16 bits</font>

1155
01:01:10,819 --> 01:01:15,359
<font color="#E5E5E5">and for all sizes and then you can have</font>

1156
01:01:14,010 --> 01:01:18,530
a separate version<font color="#E5E5E5"> once things start</font>

1157
01:01:15,359 --> 01:01:18,529
going large at the<font color="#E5E5E5"> 16 bits</font>

1158
01:01:18,630 --> 01:01:23,039
so comparing<font color="#CCCCCC"> to vp9 they have larger</font>

1159
01:01:21,059 --> 01:01:24,329
intermediaries in the transforms but

1160
01:01:23,039 --> 01:01:28,799
they<font color="#E5E5E5"> always shift their final</font>

1161
01:01:24,329 --> 01:01:31,170
coefficients down to fit<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 16bits so we</font>

1162
01:01:28,799 --> 01:01:33,538
think this is<font color="#CCCCCC"> a Miss optimization</font><font color="#E5E5E5"> it's</font>

1163
01:01:31,170 --> 01:01:35,670
it's<font color="#E5E5E5"> actually just as easy to do</font><font color="#CCCCCC"> this</font>

1164
01:01:33,539 --> 01:01:39,779
shift down and<font color="#E5E5E5"> pack while you're doing</font>

1165
01:01:35,670 --> 01:01:42,420
quantization<font color="#CCCCCC"> so we we have not tried to</font>

1166
01:01:39,779 --> 01:01:44,789
<font color="#E5E5E5">do this extra shift at the end</font>

1167
01:01:42,420 --> 01:01:46,319
it also helps avoid double rounding and

1168
01:01:44,789 --> 01:01:47,999
and simplifies rate distortion

1169
01:01:46,319 --> 01:01:49,710
optimizations<font color="#E5E5E5"> is you don't have</font><font color="#CCCCCC"> to have</font>

1170
01:01:47,999 --> 01:01:53,609
any special cases for<font color="#E5E5E5"> different scale</font>

1171
01:01:49,710 --> 01:01:55,979
factors depending<font color="#CCCCCC"> on your block size all</font>

1172
01:01:53,609 --> 01:01:59,069
right<font color="#CCCCCC"> slide a quick question move from</font>

1173
01:01:55,979 --> 01:02:01,680
<font color="#E5E5E5">floor mic again so</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> you don't</font>

1174
01:01:59,069 --> 01:02:03,930
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> fixed shift between the row and</font>

1175
01:02:01,680 --> 01:02:05,669
column stages<font color="#E5E5E5"> you you accumulate a</font>

1176
01:02:03,930 --> 01:02:08,249
certain number<font color="#E5E5E5"> of pixels</font><font color="#CCCCCC"> total pixels</font>

1177
01:02:05,670 --> 01:02:09,989
first before<font color="#E5E5E5"> you do</font><font color="#CCCCCC"> your shift um so we</font>

1178
01:02:08,249 --> 01:02:11,999
don't<font color="#E5E5E5"> have a shift between the row and</font>

1179
01:02:09,989 --> 01:02:14,640
column stages at all<font color="#E5E5E5"> who would if you</font>

1180
01:02:11,999 --> 01:02:16,140
have bigger than<font color="#E5E5E5"> than a 64 pixel so if</font>

1181
01:02:14,640 --> 01:02:19,249
you have bigger than 64 pixel then we

1182
01:02:16,140 --> 01:02:21,629
start<font color="#CCCCCC"> going to wider Cindy once once you</font>

1183
01:02:19,249 --> 01:02:23,009
<font color="#E5E5E5">once the values start exceeding 60</font>

1184
01:02:21,630 --> 01:02:25,559
minutes so you just<font color="#CCCCCC"> go bigger than</font>

1185
01:02:23,009 --> 01:02:27,630
<font color="#CCCCCC">16-bit intermediates</font><font color="#E5E5E5"> yeah well I would</font>

1186
01:02:25,559 --> 01:02:29,880
never shift down<font color="#E5E5E5"> we never shift down</font>

1187
01:02:27,630 --> 01:02:31,349
<font color="#E5E5E5">okay I mean you can shift down after you</font>

1188
01:02:29,880 --> 01:02:32,849
quantize right because when you quantize

1189
01:02:31,349 --> 01:02:34,289
<font color="#E5E5E5">you're gonna have the same values you</font>

1190
01:02:32,849 --> 01:02:39,420
would have had<font color="#E5E5E5"> regardless of what your</font>

1191
01:02:34,289 --> 01:02:40,859
shift<font color="#E5E5E5"> was but yeah I mean that the point</font>

1192
01:02:39,420 --> 01:02:42,930
<font color="#E5E5E5">is you're gonna have to go you're gonna</font>

1193
01:02:40,859 --> 01:02:45,359
have to go up<font color="#CCCCCC"> to 32 bits</font><font color="#E5E5E5"> in the</font>

1194
01:02:42,930 --> 01:02:47,160
transforms at some stage<font color="#CCCCCC"> um</font><font color="#E5E5E5"> because</font>

1195
01:02:45,359 --> 01:02:49,609
we've eliminated this<font color="#E5E5E5"> extra scaling we</font>

1196
01:02:47,160 --> 01:02:52,319
do that at a later stage<font color="#CCCCCC"> than vp9 does</font>

1197
01:02:49,609 --> 01:02:54,269
<font color="#E5E5E5">and also because we don't do extra of</font>

1198
01:02:52,319 --> 01:02:56,549
shifting for high bit depth we do it at

1199
01:02:54,269 --> 01:03:00,718
a<font color="#E5E5E5"> later stage in the vp9</font><font color="#CCCCCC"> dose um so we</font>

1200
01:02:56,549 --> 01:03:02,339
can keep<font color="#E5E5E5"> you in 16 bits longer um but</font>

1201
01:03:00,719 --> 01:03:04,259
yeah I<font color="#E5E5E5"> mean at some</font><font color="#CCCCCC"> point you do have to</font>

1202
01:03:02,339 --> 01:03:08,009
go to<font color="#E5E5E5"> go up to 32</font><font color="#CCCCCC"> bits and</font><font color="#E5E5E5"> that's true</font>

1203
01:03:04,259 --> 01:03:15,180
<font color="#E5E5E5">both in vp9 in and in us you know for</font>

1204
01:03:08,009 --> 01:03:18,509
<font color="#E5E5E5">the larger transforms</font><font color="#CCCCCC"> alright so a few</font>

1205
01:03:15,180 --> 01:03:20,549
notes on reversibility<font color="#E5E5E5"> so when you have</font>

1206
01:03:18,509 --> 01:03:22,529
steps of this<font color="#E5E5E5"> general form where you</font>

1207
01:03:20,549 --> 01:03:26,038
take a variable<font color="#CCCCCC"> and you add</font><font color="#E5E5E5"> to that</font>

1208
01:03:22,529 --> 01:03:27,539
<font color="#E5E5E5">variable</font><font color="#CCCCCC"> sum function</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> all the</font>

1209
01:03:26,039 --> 01:03:31,289
variables except the one you're adding

1210
01:03:27,539 --> 01:03:32,310
to<font color="#CCCCCC"> um that's called</font><font color="#E5E5E5"> a lifting step there</font>

1211
01:03:31,289 --> 01:03:34,080
can be<font color="#E5E5E5"> an</font>

1212
01:03:32,310 --> 01:03:35,340
<font color="#E5E5E5">whirring like that that</font><font color="#CCCCCC"> function could</font>

1213
01:03:34,080 --> 01:03:38,940
<font color="#E5E5E5">be arbitrary it doesn't have to be</font>

1214
01:03:35,340 --> 01:03:43,020
<font color="#CCCCCC">linear</font><font color="#E5E5E5"> like as has no special properties</font>

1215
01:03:38,940 --> 01:03:44,940
at all but because the function is<font color="#E5E5E5"> not a</font>

1216
01:03:43,020 --> 01:03:47,460
very is not<font color="#CCCCCC"> a function of</font><font color="#E5E5E5"> the variable</font>

1217
01:03:44,940 --> 01:03:51,180
<font color="#CCCCCC">you're modifying</font><font color="#E5E5E5"> it's exactly reversible</font>

1218
01:03:47,460 --> 01:03:53,100
<font color="#E5E5E5">right so on on the the decoder side you</font>

1219
01:03:51,180 --> 01:03:55,080
can just<font color="#E5E5E5"> subtract off that function and</font>

1220
01:03:53,100 --> 01:03:57,270
get<font color="#CCCCCC"> exactly the value that you started</font>

1221
01:03:55,080 --> 01:03:59,520
<font color="#CCCCCC">with what that</font><font color="#E5E5E5"> means is we can</font><font color="#CCCCCC"> make</font>

1222
01:03:57,270 --> 01:04:02,520
inverse transform by just<font color="#E5E5E5"> reversing all</font>

1223
01:03:59,520 --> 01:04:05,100
the steps of our forward transform and

1224
01:04:02,520 --> 01:04:07,170
so<font color="#CCCCCC"> it turns</font><font color="#E5E5E5"> out that all</font><font color="#CCCCCC"> of the steps</font>

1225
01:04:05,100 --> 01:04:09,000
that<font color="#CCCCCC"> I have described</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> far that we use</font>

1226
01:04:07,170 --> 01:04:11,760
to<font color="#E5E5E5"> build our transforms happen to be</font>

1227
01:04:09,000 --> 01:04:14,780
lifting steps<font color="#E5E5E5"> all right so so why is</font>

1228
01:04:11,760 --> 01:04:17,370
this good why<font color="#CCCCCC"> would you want</font><font color="#E5E5E5"> to do this</font>

1229
01:04:14,780 --> 01:04:19,290
<font color="#CCCCCC">so we really wanted reversibility in</font>

1230
01:04:17,370 --> 01:04:21,779
<font color="#CCCCCC">dala</font><font color="#E5E5E5"> because we used lapping instead of</font>

1231
01:04:19,290 --> 01:04:23,190
a deblocking filter<font color="#E5E5E5"> so do blocking</font>

1232
01:04:21,780 --> 01:04:25,830
filters have this nice property<font color="#CCCCCC"> that</font>

1233
01:04:23,190 --> 01:04:28,910
they're low-pass on so they tend<font color="#E5E5E5"> to blur</font>

1234
01:04:25,830 --> 01:04:31,740
<font color="#CCCCCC">out details over consecutive frames</font><font color="#E5E5E5"> um</font>

1235
01:04:28,910 --> 01:04:34,410
<font color="#CCCCCC">whereas on the</font><font color="#E5E5E5"> other hand forward and</font>

1236
01:04:31,740 --> 01:04:37,770
inverse lapping are matched so any any

1237
01:04:34,410 --> 01:04:42,779
details<font color="#E5E5E5"> that you have um</font><font color="#CCCCCC"> do not get</font>

1238
01:04:37,770 --> 01:04:44,790
blurred out by by applying the the

1239
01:04:42,780 --> 01:04:46,230
lapping filter they instead<font color="#CCCCCC"> just get</font>

1240
01:04:44,790 --> 01:04:48,630
shifted<font color="#CCCCCC"> around and when you apply the</font>

1241
01:04:46,230 --> 01:04:52,530
opposite of<font color="#E5E5E5"> the lapping filter then they</font>

1242
01:04:48,630 --> 01:04:54,930
<font color="#E5E5E5">get restored so if those</font><font color="#CCCCCC"> two are not</font>

1243
01:04:52,530 --> 01:04:56,490
exactly matched then you'll build up

1244
01:04:54,930 --> 01:04:58,680
<font color="#E5E5E5">these rounding errors over multiple</font>

1245
01:04:56,490 --> 01:05:00,419
frames and this is the same problem<font color="#CCCCCC"> of</font>

1246
01:04:58,680 --> 01:05:04,589
you<font color="#CCCCCC"> know we essentially have an</font><font color="#E5E5E5"> unstable</font>

1247
01:05:00,420 --> 01:05:06,450
filter so because we<font color="#CCCCCC"> have an exact</font>

1248
01:05:04,590 --> 01:05:09,000
integer specification<font color="#E5E5E5"> of our transforms</font>

1249
01:05:06,450 --> 01:05:11,430
on you know<font color="#E5E5E5"> there you would never</font><font color="#CCCCCC"> get</font>

1250
01:05:09,000 --> 01:05:12,900
<font color="#E5E5E5">encode or decode or mismatch but it</font>

1251
01:05:11,430 --> 01:05:16,049
would cost bits to correct these

1252
01:05:12,900 --> 01:05:17,880
rounding errors in the encoder<font color="#E5E5E5"> so that</font>

1253
01:05:16,050 --> 01:05:21,570
was bad<font color="#E5E5E5"> all right</font>

1254
01:05:17,880 --> 01:05:24,930
next slide um<font color="#E5E5E5"> do we actually need</font>

1255
01:05:21,570 --> 01:05:25,430
perfect reversibility<font color="#E5E5E5"> um</font><font color="#CCCCCC"> so it seems to</font>

1256
01:05:24,930 --> 01:05:27,540
<font color="#E5E5E5">help</font>

1257
01:05:25,430 --> 01:05:29,250
compared to transforms that<font color="#E5E5E5"> don't have</font>

1258
01:05:27,540 --> 01:05:31,500
it we've seen some small coding gain

1259
01:05:29,250 --> 01:05:34,350
improvements but<font color="#E5E5E5"> it's probably not</font>

1260
01:05:31,500 --> 01:05:35,880
<font color="#E5E5E5">required but we get it basically for</font>

1261
01:05:34,350 --> 01:05:38,670
free<font color="#E5E5E5"> from from the structure of our</font>

1262
01:05:35,880 --> 01:05:41,460
<font color="#E5E5E5">design</font><font color="#CCCCCC"> we don't actually</font><font color="#E5E5E5"> have it</font><font color="#CCCCCC"> in dal</font>

1263
01:05:38,670 --> 01:05:42,900
<font color="#E5E5E5">anymore so when you do this</font><font color="#CCCCCC"> 4-bit up</font>

1264
01:05:41,460 --> 01:05:45,120
shift and then do the transform<font color="#CCCCCC"> and into</font>

1265
01:05:42,900 --> 01:05:45,960
the 4-bit<font color="#E5E5E5"> down shift that down shift is</font>

1266
01:05:45,120 --> 01:05:50,160
not

1267
01:05:45,960 --> 01:05:51,810
reversible<font color="#CCCCCC"> so that breaks it</font><font color="#E5E5E5"> you can</font>

1268
01:05:50,160 --> 01:05:53,670
restore it by using<font color="#CCCCCC"> twelve that</font>

1269
01:05:51,810 --> 01:05:56,009
<font color="#E5E5E5">references</font><font color="#CCCCCC"> even if you have eight put</font>

1270
01:05:53,670 --> 01:05:58,920
<font color="#E5E5E5">input data basically just avoiding</font><font color="#CCCCCC"> the</font>

1271
01:05:56,010 --> 01:06:01,950
<font color="#CCCCCC">down shift down to</font><font color="#E5E5E5"> two by four bits at</font>

1272
01:05:58,920 --> 01:06:04,200
<font color="#CCCCCC">the end and there's a nice blog post</font>

1273
01:06:01,950 --> 01:06:06,029
there by Monty that that goes through

1274
01:06:04,200 --> 01:06:07,980
and<font color="#E5E5E5"> shows you what the this error</font>

1275
01:06:06,030 --> 01:06:09,930
<font color="#CCCCCC">buildup looks</font><font color="#E5E5E5"> like and what happens when</font>

1276
01:06:07,980 --> 01:06:13,410
you switch to<font color="#E5E5E5"> twelve the references and</font>

1277
01:06:09,930 --> 01:06:16,470
it essentially<font color="#E5E5E5"> goes away</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it turned</font>

1278
01:06:13,410 --> 01:06:18,720
out also that<font color="#CCCCCC"> just using CL PF</font><font color="#E5E5E5"> from Thor</font>

1279
01:06:16,470 --> 01:06:21,089
or the<font color="#CCCCCC"> da lady ringing filter solves the</font>

1280
01:06:18,720 --> 01:06:23,459
problem by<font color="#CCCCCC"> adding essentially one</font><font color="#E5E5E5"> of</font>

1281
01:06:21,089 --> 01:06:25,859
these<font color="#CCCCCC"> low-pass filters back that that we</font>

1282
01:06:23,460 --> 01:06:27,599
didn't have an art deblocking filter<font color="#E5E5E5"> um</font>

1283
01:06:25,859 --> 01:06:31,710
<font color="#E5E5E5">so that prevents these errors from</font>

1284
01:06:27,599 --> 01:06:33,810
building up<font color="#E5E5E5"> right next slide Moses from</font>

1285
01:06:31,710 --> 01:06:36,089
<font color="#E5E5E5">the for Mike again so this is the</font>

1286
01:06:33,810 --> 01:06:37,410
<font color="#CCCCCC">implementation in dala</font><font color="#E5E5E5"> that is not</font>

1287
01:06:36,089 --> 01:06:40,109
reversible<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> downshift</font><font color="#CCCCCC"> what</font>

1288
01:06:37,410 --> 01:06:41,609
<font color="#CCCCCC">about a v1 um so</font><font color="#E5E5E5"> so a v1 also has the</font>

1289
01:06:40,109 --> 01:06:43,410
this four bit up shift in four bit down

1290
01:06:41,609 --> 01:06:45,119
shifts so it's also not<font color="#CCCCCC"> exactly</font>

1291
01:06:43,410 --> 01:06:46,649
reversible<font color="#E5E5E5"> so all if you use twelve</font>

1292
01:06:45,119 --> 01:06:50,369
internal<font color="#E5E5E5"> bit-depth will you get the</font>

1293
01:06:46,650 --> 01:06:52,260
invertibility<font color="#E5E5E5"> right so and also</font><font color="#CCCCCC"> to be</font>

1294
01:06:50,369 --> 01:06:55,050
clear<font color="#E5E5E5"> I'm talking</font><font color="#CCCCCC"> about invertibility</font>

1295
01:06:52,260 --> 01:06:56,940
between going<font color="#E5E5E5"> from coefficients to</font>

1296
01:06:55,050 --> 01:06:58,349
pixels back to coefficients right which

1297
01:06:56,940 --> 01:07:00,450
is the step we needed for the<font color="#CCCCCC"> laughing</font>

1298
01:06:58,349 --> 01:07:01,770
filter<font color="#CCCCCC"> on so you still have</font>

1299
01:07:00,450 --> 01:07:03,450
invertibility in the sense of<font color="#CCCCCC"> going from</font>

1300
01:07:01,770 --> 01:07:05,940
pixels to coefficients back to pixels

1301
01:07:03,450 --> 01:07:08,848
<font color="#CCCCCC">right</font><font color="#E5E5E5"> yeah so where I was going with it</font>

1302
01:07:05,940 --> 01:07:11,250
is if you had a skipping skipping the

1303
01:07:08,849 --> 01:07:13,050
quantizers then you could do lossless

1304
01:07:11,250 --> 01:07:15,599
coding with the real transform instead

1305
01:07:13,050 --> 01:07:18,599
of a instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the current four point</font>

1306
01:07:15,599 --> 01:07:20,430
right transform so that first gains

1307
01:07:18,599 --> 01:07:22,950
<font color="#E5E5E5">that's actually something we tried back</font>

1308
01:07:20,430 --> 01:07:26,368
in vp9<font color="#E5E5E5"> with an early version of these</font>

1309
01:07:22,950 --> 01:07:28,080
transforms<font color="#E5E5E5"> um and I think just replacing</font>

1310
01:07:26,369 --> 01:07:30,660
the the<font color="#CCCCCC"> four point</font><font color="#E5E5E5"> Walsh Hadamard</font>

1311
01:07:28,080 --> 01:07:35,730
transform that they use with a four

1312
01:07:30,660 --> 01:07:39,899
point DCT was about<font color="#CCCCCC"> 25% worse in terms</font>

1313
01:07:35,730 --> 01:07:42,330
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> lossless</font><font color="#E5E5E5"> bitrate</font><font color="#CCCCCC"> so I don't know</font>

1314
01:07:39,900 --> 01:07:43,950
if if you allowed using larger transform

1315
01:07:42,330 --> 01:07:45,900
sizes if you you know instead of<font color="#E5E5E5"> just</font>

1316
01:07:43,950 --> 01:07:48,629
<font color="#E5E5E5">fixing everything down an adaptive are</font>

1317
01:07:45,900 --> 01:07:51,060
<font color="#CCCCCC">do over write</font><font color="#E5E5E5"> that the transform size</font>

1318
01:07:48,630 --> 01:07:53,940
you may be able to<font color="#E5E5E5"> do slightly</font><font color="#CCCCCC"> better</font>

1319
01:07:51,060 --> 01:07:56,250
than<font color="#E5E5E5"> that but but just doing a straight</font>

1320
01:07:53,940 --> 01:07:58,320
swap of<font color="#CCCCCC"> four point oct.4 we saw we saw</font>

1321
01:07:56,250 --> 01:07:59,759
<font color="#E5E5E5">the same thing with h.264 high profile</font>

1322
01:07:58,320 --> 01:08:01,319
somebody

1323
01:07:59,759 --> 01:08:03,289
<font color="#CCCCCC">finally implemented</font><font color="#E5E5E5"> high profile and</font>

1324
01:08:01,319 --> 01:08:05,999
switched<font color="#E5E5E5"> everything to 8x8 you see loss</font>

1325
01:08:03,289 --> 01:08:07,529
but if they intelligently<font color="#E5E5E5"> switch between</font>

1326
01:08:05,999 --> 01:08:10,828
<font color="#E5E5E5">four by four and eight</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> eight there's</font>

1327
01:08:07,529 --> 01:08:12,869
usually considerable gain so maybe some

1328
01:08:10,829 --> 01:08:14,399
adding some heuristics<font color="#CCCCCC"> to optimize</font><font color="#E5E5E5"> that</font>

1329
01:08:12,869 --> 01:08:22,889
may end up<font color="#E5E5E5"> with a pretty good lossless</font>

1330
01:08:14,399 --> 01:08:25,679
codec yeah<font color="#CCCCCC"> alright Exide so the other</font>

1331
01:08:22,889 --> 01:08:28,288
<font color="#E5E5E5">other nice feature</font><font color="#CCCCCC"> of reversibility is</font>

1332
01:08:25,679 --> 01:08:30,779
the effect it has on dynamic range right

1333
01:08:28,288 --> 01:08:32,509
<font color="#E5E5E5">so as we said the transform coefficient</font>

1334
01:08:30,779 --> 01:08:34,739
values are larger than<font color="#E5E5E5"> your pixel values</font>

1335
01:08:32,509 --> 01:08:37,710
because<font color="#E5E5E5"> your</font><font color="#CCCCCC"> forward transform</font><font color="#E5E5E5"> expands</font>

1336
01:08:34,738 --> 01:08:40,169
the dynamic range your inverse transform

1337
01:08:37,710 --> 01:08:41,549
is<font color="#E5E5E5"> also an</font><font color="#CCCCCC"> n-dimensional</font><font color="#E5E5E5"> rotation so how</font>

1338
01:08:40,170 --> 01:08:44,339
do we<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that it doesn't</font><font color="#E5E5E5"> expand</font>

1339
01:08:41,549 --> 01:08:46,408
dynamic range right like if I have two

1340
01:08:44,339 --> 01:08:48,839
coefficients<font color="#CCCCCC"> X 0 and X 1 and they both</font>

1341
01:08:46,408 --> 01:08:52,318
<font color="#CCCCCC">just barely fit in 16</font><font color="#E5E5E5"> bits how do I know</font>

1342
01:08:48,839 --> 01:08:54,238
<font color="#E5E5E5">that X 0 plus X 1 won't</font><font color="#CCCCCC"> overflow</font><font color="#E5E5E5"> and the</font>

1343
01:08:52,319 --> 01:08:56,819
answer is is because<font color="#E5E5E5"> the transform is</font>

1344
01:08:54,238 --> 01:08:58,558
reversible<font color="#E5E5E5"> so all the values</font><font color="#CCCCCC"> that I</font>

1345
01:08:56,819 --> 01:09:00,929
compute in my inverse are going to be

1346
01:08:58,559 --> 01:09:02,670
the same as in<font color="#E5E5E5"> my forward transform you</font>

1347
01:09:00,929 --> 01:09:06,569
know<font color="#E5E5E5"> plus or minus any quantization</font>

1348
01:09:02,670 --> 01:09:08,519
error<font color="#E5E5E5"> I've introduced</font><font color="#CCCCCC"> so this means that</font>

1349
01:09:06,569 --> 01:09:10,380
I'm only guaranteed to avoid overflows

1350
01:09:08,519 --> 01:09:12,509
if the coefficients come as the result

1351
01:09:10,380 --> 01:09:14,400
<font color="#CCCCCC">of transforming pixels</font><font color="#E5E5E5"> so if I decode</font>

1352
01:09:12,509 --> 01:09:17,670
random garbage<font color="#E5E5E5"> I might get random</font>

1353
01:09:14,399 --> 01:09:21,229
overflows<font color="#E5E5E5"> um but we can just</font><font color="#CCCCCC"> define that</font>

1354
01:09:17,670 --> 01:09:24,000
that you know those cases<font color="#CCCCCC"> aren't our</font>

1355
01:09:21,229 --> 01:09:25,108
undefined behavior<font color="#E5E5E5"> right we don't I</font>

1356
01:09:24,000 --> 01:09:29,179
don't<font color="#CCCCCC"> think</font><font color="#E5E5E5"> anybody</font><font color="#CCCCCC"> actually cares about</font>

1357
01:09:25,109 --> 01:09:33,769
<font color="#CCCCCC">the</font><font color="#E5E5E5"> quality</font><font color="#CCCCCC"> of decoding random garbage</font>

1358
01:09:29,179 --> 01:09:37,889
that's<font color="#E5E5E5"> that's the same approach</font><font color="#CCCCCC"> 264 took</font>

1359
01:09:33,769 --> 01:09:40,259
so<font color="#E5E5E5"> one note about discrete sine</font>

1360
01:09:37,889 --> 01:09:46,380
transforms<font color="#E5E5E5"> there are two types that we</font>

1361
01:09:40,259 --> 01:09:48,328
care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> 4 and type</font><font color="#E5E5E5"> 7 so for</font>

1362
01:09:46,380 --> 01:09:50,779
inter<font color="#E5E5E5"> predictions residuals the the</font>

1363
01:09:48,328 --> 01:09:53,788
prediction error<font color="#E5E5E5"> you get is</font><font color="#CCCCCC"> asymmetric</font>

1364
01:09:50,779 --> 01:09:55,860
so the error<font color="#E5E5E5"> close to the edges</font><font color="#CCCCCC"> you're</font>

1365
01:09:53,788 --> 01:09:59,789
predicting from<font color="#E5E5E5"> is much smaller than the</font>

1366
01:09:55,860 --> 01:10:01,920
error<font color="#E5E5E5"> far away from</font><font color="#CCCCCC"> those edges</font><font color="#E5E5E5"> which</font>

1367
01:09:59,789 --> 01:10:04,320
means you want an asymmetric transform

1368
01:10:01,920 --> 01:10:06,750
to code them<font color="#E5E5E5"> then if you say</font><font color="#CCCCCC"> ok what's</font>

1369
01:10:04,320 --> 01:10:09,268
the optimal transform to use it winds up

1370
01:10:06,750 --> 01:10:12,059
being<font color="#CCCCCC"> this type</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> DST and get</font><font color="#E5E5E5"> that by</font>

1371
01:10:09,269 --> 01:10:13,530
taking<font color="#E5E5E5"> the a linearly increasing</font>

1372
01:10:12,059 --> 01:10:16,080
correlation metrics

1373
01:10:13,530 --> 01:10:17,580
and and taking<font color="#E5E5E5"> the limit as the</font>

1374
01:10:16,080 --> 01:10:18,990
correlation approaches<font color="#E5E5E5"> one and solving</font>

1375
01:10:17,580 --> 01:10:22,910
the eigen system and say what do you<font color="#E5E5E5"> get</font>

1376
01:10:18,990 --> 01:10:25,800
the<font color="#E5E5E5"> type</font><font color="#CCCCCC"> seven DST pops out</font>

1377
01:10:22,910 --> 01:10:28,740
<font color="#E5E5E5">so type seven DST factorizations are</font>

1378
01:10:25,800 --> 01:10:29,970
much nastier than the type fours which

1379
01:10:28,740 --> 01:10:35,190
are the ones<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have embedded</font>

1380
01:10:29,970 --> 01:10:37,470
inside of<font color="#E5E5E5"> our DCT so the type 4 is there</font>

1381
01:10:35,190 --> 01:10:40,139
at the top and the type<font color="#E5E5E5"> 7 is this thing</font>

1382
01:10:37,470 --> 01:10:43,050
down here<font color="#E5E5E5"> and the real problem</font><font color="#CCCCCC"> is this n</font>

1383
01:10:40,140 --> 01:10:45,450
plus<font color="#CCCCCC"> 1/2 thing inside your trig</font>

1384
01:10:43,050 --> 01:10:50,250
functions<font color="#E5E5E5"> which means what this actually</font>

1385
01:10:45,450 --> 01:10:54,570
is is is a trig transform embedded

1386
01:10:50,250 --> 01:10:57,960
inside<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> 2n plus 1 sighs fast</font><font color="#E5E5E5"> Fourier</font>

1387
01:10:54,570 --> 01:10:59,549
transform<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> pulling that out</font><font color="#E5E5E5"> of</font>

1388
01:10:57,960 --> 01:11:03,510
there and<font color="#CCCCCC"> still retaining a fast</font>

1389
01:10:59,550 --> 01:11:12,330
algorithm is a bit<font color="#E5E5E5"> Messier since it's</font>

1390
01:11:03,510 --> 01:11:14,070
<font color="#E5E5E5">not a power of</font><font color="#CCCCCC"> two so next slide type</font>

1391
01:11:12,330 --> 01:11:15,840
<font color="#CCCCCC">four transforms turned out to be almost</font>

1392
01:11:14,070 --> 01:11:19,440
<font color="#CCCCCC">as good in there are</font><font color="#E5E5E5"> already embedded</font>

1393
01:11:15,840 --> 01:11:21,210
inside of<font color="#E5E5E5"> all of our DC T's but our</font>

1394
01:11:19,440 --> 01:11:23,219
current<font color="#E5E5E5"> approach is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we use type</font>

1395
01:11:21,210 --> 01:11:25,650
sevens<font color="#E5E5E5"> for the very small</font><font color="#CCCCCC"> ones</font><font color="#E5E5E5"> currently</font>

1396
01:11:23,220 --> 01:11:27,930
<font color="#CCCCCC">only</font><font color="#E5E5E5"> four point eight eight fight and</font>

1397
01:11:25,650 --> 01:11:31,530
then use the embedded type<font color="#CCCCCC"> force</font><font color="#E5E5E5"> for all</font>

1398
01:11:27,930 --> 01:11:33,210
<font color="#CCCCCC">of the larger</font><font color="#E5E5E5"> D STS</font><font color="#CCCCCC"> so the small ones</font>

1399
01:11:31,530 --> 01:11:36,540
are the factorizations don't get that

1400
01:11:33,210 --> 01:11:39,270
bad and it turns<font color="#E5E5E5"> out to</font><font color="#CCCCCC"> be where you can</font>

1401
01:11:36,540 --> 01:11:45,300
<font color="#CCCCCC">get at least some gains by</font><font color="#E5E5E5"> using the</font>

1402
01:11:39,270 --> 01:11:48,000
correct<font color="#CCCCCC"> DSD side so comparing overall</font>

1403
01:11:45,300 --> 01:11:50,400
complexity<font color="#E5E5E5"> the first three columns there</font>

1404
01:11:48,000 --> 01:11:53,730
are<font color="#E5E5E5"> dollar TX on the next three columns</font>

1405
01:11:50,400 --> 01:11:56,540
<font color="#CCCCCC">our</font><font color="#E5E5E5"> TX mg which is sort of the the</font><font color="#CCCCCC"> AV 1</font>

1406
01:11:53,730 --> 01:11:58,589
extension of the vp9 transforms<font color="#E5E5E5"> to</font>

1407
01:11:56,540 --> 01:12:00,810
<font color="#CCCCCC">handle all these</font><font color="#E5E5E5"> things like rectangular</font>

1408
01:11:58,590 --> 01:12:05,070
transforms in and unify hide the<font color="#CCCCCC"> depth</font>

1409
01:12:00,810 --> 01:12:07,560
<font color="#E5E5E5">and load</font><font color="#CCCCCC"> that depth etc so we</font><font color="#E5E5E5"> generally</font>

1410
01:12:05,070 --> 01:12:10,650
have a few more ads<font color="#E5E5E5"> but not that many</font>

1411
01:12:07,560 --> 01:12:15,780
more<font color="#E5E5E5"> ads you can see like for the 32</font>

1412
01:12:10,650 --> 01:12:17,700
<font color="#E5E5E5">point DCT it's 6.2 versus 6.0</font><font color="#CCCCCC"> but we</font>

1413
01:12:15,780 --> 01:12:21,389
have far fewer multiplies<font color="#E5E5E5"> per</font>

1414
01:12:17,700 --> 01:12:25,440
coefficient right again for<font color="#E5E5E5"> that DCT 2.7</font>

1415
01:12:21,390 --> 01:12:27,449
<font color="#CCCCCC">versus 4.1 so we actually can wind up</font>

1416
01:12:25,440 --> 01:12:32,789
with with<font color="#E5E5E5"> 39 percent fewer</font>

1417
01:12:27,449 --> 01:12:35,728
applause I<font color="#CCCCCC"> think for the 32-point DST we</font>

1418
01:12:32,789 --> 01:12:37,800
<font color="#E5E5E5">actually implemented the the Cindy for</font>

1419
01:12:35,729 --> 01:12:41,729
the<font color="#CCCCCC"> eight-point DCT</font><font color="#E5E5E5"> and directly</font>

1420
01:12:37,800 --> 01:12:44,369
<font color="#E5E5E5">compared that to the</font><font color="#CCCCCC"> existing Cindy for</font>

1421
01:12:41,729 --> 01:12:46,709
for the<font color="#CCCCCC"> Avon transforms and it was</font>

1422
01:12:44,369 --> 01:12:49,679
benchmarked at 26.2 percent<font color="#E5E5E5"> faster and</font>

1423
01:12:46,709 --> 01:12:52,079
that's<font color="#E5E5E5"> mostly result of using using</font>

1424
01:12:49,679 --> 01:12:54,209
fewer multiplies and using cheaper

1425
01:12:52,079 --> 01:12:55,860
multiplies<font color="#E5E5E5"> right so none</font><font color="#CCCCCC"> of our</font>

1426
01:12:54,209 --> 01:12:57,449
multiplies have to go up to a full

1427
01:12:55,860 --> 01:13:00,299
32-bit product and we don't have to do

1428
01:12:57,449 --> 01:13:04,678
any 32-bit editions<font color="#E5E5E5"> so we're able to get</font>

1429
01:13:00,300 --> 01:13:06,179
higher Cindy throughput<font color="#CCCCCC"> you know say</font>

1430
01:13:04,679 --> 01:13:08,820
<font color="#E5E5E5">just a small note for the discrete sine</font>

1431
01:13:06,179 --> 01:13:12,959
transform<font color="#E5E5E5"> we're using the type 7 while</font>

1432
01:13:08,820 --> 01:13:14,880
txm<font color="#CCCCCC"> G's is</font><font color="#E5E5E5"> there's only using a type 4</font><font color="#CCCCCC"> @</font>

1433
01:13:12,959 --> 01:13:16,800
for the<font color="#CCCCCC"> 8 point discrete sine transform</font>

1434
01:13:14,880 --> 01:13:20,219
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is why ours is a bit more complex</font>

1435
01:13:16,800 --> 01:13:22,590
<font color="#E5E5E5">on particularly on the additions and</font>

1436
01:13:20,219 --> 01:13:27,809
that's just a<font color="#E5E5E5"> result of the type 7</font>

1437
01:13:22,590 --> 01:13:32,459
factorization is is not as good<font color="#CCCCCC"> alright</font>

1438
01:13:27,809 --> 01:13:34,709
<font color="#CCCCCC">so a few hardware considerations inter</font>

1439
01:13:32,459 --> 01:13:37,229
prediction requires reconstructed pixels

1440
01:13:34,709 --> 01:13:39,150
from<font color="#E5E5E5"> your neighboring blocks so you</font>

1441
01:13:37,229 --> 01:13:41,550
think<font color="#E5E5E5"> about it this serializes the</font>

1442
01:13:39,150 --> 01:13:43,259
reconstruction of those<font color="#E5E5E5"> blocks including</font>

1443
01:13:41,550 --> 01:13:45,719
<font color="#CCCCCC">the inverse transform part of that</font>

1444
01:13:43,260 --> 01:13:47,340
reconstruction<font color="#E5E5E5"> which is a particular</font>

1445
01:13:45,719 --> 01:13:48,599
problem<font color="#CCCCCC"> for encoders and the decoders</font>

1446
01:13:47,340 --> 01:13:51,059
you can sort of<font color="#E5E5E5"> start the transforms</font>

1447
01:13:48,599 --> 01:13:53,579
early and it only serializes adding the

1448
01:13:51,059 --> 01:13:56,880
residuals<font color="#E5E5E5"> but</font><font color="#CCCCCC"> on the encoder side you</font>

1449
01:13:53,579 --> 01:14:00,619
need<font color="#E5E5E5"> to know what pixels to transform so</font>

1450
01:13:56,880 --> 01:14:03,389
that that part becomes completely serial

1451
01:14:00,619 --> 01:14:05,820
<font color="#CCCCCC">unfortunately when we</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> our 3</font><font color="#E5E5E5"> multiply</font>

1452
01:14:03,389 --> 01:14:07,440
rotations<font color="#E5E5E5"> we those multiplies are all</font>

1453
01:14:05,820 --> 01:14:08,549
<font color="#E5E5E5">changed consecutively like each</font><font color="#CCCCCC"> one</font>

1454
01:14:07,440 --> 01:14:11,459
depends on<font color="#E5E5E5"> the output of the previous</font>

1455
01:14:08,550 --> 01:14:13,499
<font color="#E5E5E5">one</font><font color="#CCCCCC"> which winds</font><font color="#E5E5E5"> up being a</font><font color="#CCCCCC"> bottleneck</font>

1456
01:14:11,459 --> 01:14:18,059
<font color="#E5E5E5">for small transform sizes for</font><font color="#CCCCCC"> hardware</font>

1457
01:14:13,499 --> 01:14:21,959
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> next slide</font><font color="#CCCCCC"> so just for</font><font color="#E5E5E5"> the</font>

1458
01:14:18,059 --> 01:14:27,179
<font color="#CCCCCC">4-point DCT and DST</font><font color="#E5E5E5"> we've replaced them</font>

1459
01:14:21,959 --> 01:14:29,729
<font color="#E5E5E5">with transforms that are not perfectly</font>

1460
01:14:27,179 --> 01:14:31,709
reversible<font color="#E5E5E5"> and not lifting based but we</font>

1461
01:14:29,729 --> 01:14:33,119
<font color="#CCCCCC">basically replace the</font><font color="#E5E5E5"> three block three</font>

1462
01:14:31,709 --> 01:14:36,119
multiply block with a four multiplier

1463
01:14:33,119 --> 01:14:37,308
it's just like the<font color="#E5E5E5"> matrix multiply so</font>

1464
01:14:36,119 --> 01:14:40,438
all the multiplies proceed in parallel

1465
01:14:37,309 --> 01:14:41,160
but<font color="#E5E5E5"> we still only use the top half of</font>

1466
01:14:40,439 --> 01:14:42,810
that

1467
01:14:41,160 --> 01:14:45,870
<font color="#CCCCCC">multiply output so we still</font><font color="#E5E5E5"> get full</font>

1468
01:14:42,810 --> 01:14:48,360
<font color="#CCCCCC">Sindhi throughput and then for the DST</font>

1469
01:14:45,870 --> 01:14:52,200
we use a custom factorization that<font color="#E5E5E5"> uses</font>

1470
01:14:48,360 --> 01:14:54,509
<font color="#CCCCCC">two five parallel multiplies so I said</font>

1471
01:14:52,200 --> 01:14:56,070
these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> not exactly reversible</font><font color="#E5E5E5"> but</font>

1472
01:14:54,510 --> 01:15:01,740
they do solve the hardware latency

1473
01:14:56,070 --> 01:15:03,599
problem<font color="#CCCCCC"> Exide so additional</font>

1474
01:15:01,740 --> 01:15:05,790
consideration<font color="#E5E5E5"> most hardware is already</font>

1475
01:15:03,600 --> 01:15:08,850
multi standard and includes vp9 in all

1476
01:15:05,790 --> 01:15:10,380
the vp9 transforms and so they dedicate

1477
01:15:08,850 --> 01:15:16,050
a lot of gates to having lots<font color="#E5E5E5"> of</font>

1478
01:15:10,380 --> 01:15:17,940
parallel multiplies<font color="#CCCCCC"> so we can replace</font><font color="#E5E5E5"> a</font>

1479
01:15:16,050 --> 01:15:20,450
bunch<font color="#CCCCCC"> of the serial multiplies in our</font>

1480
01:15:17,940 --> 01:15:23,490
rotations with these parallel multiplies

1481
01:15:20,450 --> 01:15:27,330
without introducing any additional

1482
01:15:23,490 --> 01:15:30,240
multiplies and<font color="#CCCCCC"> so anything</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> anything</font>

1483
01:15:27,330 --> 01:15:33,180
<font color="#E5E5E5">that's of the form you know x0 plus a</font>

1484
01:15:30,240 --> 01:15:36,559
times X 1 u 0<font color="#CCCCCC"> plus B</font><font color="#E5E5E5"> times u 0 and then</font>

1485
01:15:33,180 --> 01:15:39,180
<font color="#CCCCCC">y1 plus a times x1</font><font color="#E5E5E5"> ruies have this</font><font color="#CCCCCC"> ABA</font>

1486
01:15:36,560 --> 01:15:41,340
<font color="#E5E5E5">structure for the constants we can</font>

1487
01:15:39,180 --> 01:15:43,530
replace with this little more gnarly

1488
01:15:41,340 --> 01:15:45,870
<font color="#E5E5E5">looking thing on the right but if you</font>

1489
01:15:43,530 --> 01:15:47,250
reduce it<font color="#CCCCCC"> down it's 1 addition 3</font>

1490
01:15:45,870 --> 01:15:50,250
multiplies that<font color="#E5E5E5"> all happen in parallel</font>

1491
01:15:47,250 --> 01:15:52,440
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> more additions so it's the</font>

1492
01:15:50,250 --> 01:15:54,210
same number<font color="#CCCCCC"> of operations but the</font>

1493
01:15:52,440 --> 01:15:56,219
multiplies can happen in parallel<font color="#E5E5E5"> so</font>

1494
01:15:54,210 --> 01:15:58,770
this is again no<font color="#E5E5E5"> longer exactly</font>

1495
01:15:56,220 --> 01:16:01,470
reversible<font color="#CCCCCC"> so we're still experimenting</font>

1496
01:15:58,770 --> 01:16:03,810
<font color="#E5E5E5">to</font><font color="#CCCCCC"> see what impact that has on</font><font color="#E5E5E5"> accuracy</font>

1497
01:16:01,470 --> 01:16:06,390
<font color="#CCCCCC">and making sure it doesn't</font><font color="#E5E5E5"> introduce any</font>

1498
01:16:03,810 --> 01:16:08,490
new potential overflows<font color="#E5E5E5"> that would</font>

1499
01:16:06,390 --> 01:16:15,720
prevent<font color="#CCCCCC"> us from from keeping our 17 16</font>

1500
01:16:08,490 --> 01:16:18,120
<font color="#E5E5E5">bits so that's the everything on the the</font>

1501
01:16:15,720 --> 01:16:23,130
design of our transforms<font color="#E5E5E5"> I guess anybody</font>

1502
01:16:18,120 --> 01:16:25,950
have any questions they<font color="#E5E5E5"> can through most</font>

1503
01:16:23,130 --> 01:16:28,250
of<font color="#CCCCCC"> Mo's during the presentation so</font><font color="#E5E5E5"> Moses</font>

1504
01:16:25,950 --> 01:16:31,559
<font color="#E5E5E5">and Florida had one more final</font><font color="#CCCCCC"> question</font>

1505
01:16:28,250 --> 01:16:33,060
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a broad one so these look like</font>

1506
01:16:31,560 --> 01:16:35,400
they compare these transforms look<font color="#CCCCCC"> quite</font>

1507
01:16:33,060 --> 01:16:39,300
they compare very favorably to<font color="#E5E5E5"> vp9 and</font>

1508
01:16:35,400 --> 01:16:41,250
<font color="#CCCCCC">av1 have you looked at</font><font color="#E5E5E5"> Thor</font><font color="#CCCCCC"> which is</font>

1509
01:16:39,300 --> 01:16:43,110
basically<font color="#CCCCCC"> a chibi see if you look the</font>

1510
01:16:41,250 --> 01:16:46,830
comparisons to the<font color="#CCCCCC"> Thor transforms</font><font color="#E5E5E5"> so</font>

1511
01:16:43,110 --> 01:16:49,230
<font color="#E5E5E5">the</font><font color="#CCCCCC"> HTPC transforms um so</font><font color="#E5E5E5"> so we haven't</font>

1512
01:16:46,830 --> 01:16:51,180
<font color="#CCCCCC">done direct comparisons</font><font color="#E5E5E5"> at least in</font>

1513
01:16:49,230 --> 01:16:55,070
terms of for example coding performance

1514
01:16:51,180 --> 01:16:59,130
<font color="#E5E5E5">um in terms</font><font color="#CCCCCC"> of complexity like I</font>

1515
01:16:55,070 --> 01:17:01,080
they if I understand correctly<font color="#E5E5E5"> the Thor</font>

1516
01:16:59,130 --> 01:17:05,520
<font color="#CCCCCC">Tramp storms are basically</font><font color="#E5E5E5"> giant</font><font color="#CCCCCC"> matrix</font>

1517
01:17:01,080 --> 01:17:07,500
multiplies<font color="#E5E5E5"> um and and so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know that</font>

1518
01:17:05,520 --> 01:17:09,030
you can get<font color="#E5E5E5"> away with that</font><font color="#CCCCCC"> for very</font>

1519
01:17:07,500 --> 01:17:11,400
small transforms but<font color="#E5E5E5"> as they get much</font>

1520
01:17:09,030 --> 01:17:14,389
larger<font color="#E5E5E5"> I think that this will wind up</font>

1521
01:17:11,400 --> 01:17:14,388
<font color="#CCCCCC">being significantly faster</font>

1522
01:17:20,939 --> 01:17:28,590
<font color="#E5E5E5">right okay about 15 minutes</font><font color="#CCCCCC"> behind</font><font color="#E5E5E5"> Luke</font>

1523
01:17:25,590 --> 01:17:29,729
<font color="#E5E5E5">you can use the rest of the time if you</font>

1524
01:17:28,590 --> 01:17:31,709
<font color="#E5E5E5">want because I think we technically have</font>

1525
01:17:29,729 --> 01:17:35,159
<font color="#E5E5E5">the room until 11:30</font><font color="#CCCCCC"> but if you want to</font>

1526
01:17:31,709 --> 01:17:42,229
speed up<font color="#CCCCCC"> 11 that was 11:30 the next</font>

1527
01:17:35,159 --> 01:17:42,228
session starts<font color="#CCCCCC"> alright so Luke</font><font color="#E5E5E5"> I got</font><font color="#CCCCCC"> a</font>

1528
01:17:42,619 --> 01:17:47,489
five minutes if you can<font color="#E5E5E5"> I suspect you</font>

1529
01:17:45,329 --> 01:17:49,049
<font color="#E5E5E5">can actually go to about 11:15 because</font>

1530
01:17:47,489 --> 01:17:52,379
the new chairs<font color="#E5E5E5"> won't need a whole</font>

1531
01:17:49,050 --> 01:17:55,949
<font color="#CCCCCC">half-hour to</font><font color="#E5E5E5"> set up</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> okay thank you so</font>

1532
01:17:52,380 --> 01:18:01,260
<font color="#E5E5E5">so look just try to go quick on whatever</font>

1533
01:17:55,949 --> 01:18:05,728
you can there<font color="#E5E5E5"> can you</font><font color="#CCCCCC"> hear me again</font>

1534
01:18:01,260 --> 01:18:08,639
<font color="#CCCCCC">alright so you</font><font color="#E5E5E5"> have the slides up for my</font>

1535
01:18:05,729 --> 01:18:13,499
presentation<font color="#E5E5E5"> can</font><font color="#CCCCCC"> you see them</font><font color="#E5E5E5"> no I can't</font>

1536
01:18:08,639 --> 01:18:16,469
see them almost slide<font color="#E5E5E5"> one okay I can see</font>

1537
01:18:13,499 --> 01:18:21,840
them though so<font color="#CCCCCC"> yeah I'm</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> present an</font>

1538
01:18:16,469 --> 01:18:24,959
update<font color="#CCCCCC"> to the CFL Draft for VC so if we</font>

1539
01:18:21,840 --> 01:18:27,150
go<font color="#E5E5E5"> to the first slide chroma from luma</font>

1540
01:18:24,959 --> 01:18:28,860
<font color="#E5E5E5">is essentially an intra prediction tool</font>

1541
01:18:27,150 --> 01:18:32,159
so it has no dependencies on other

1542
01:18:28,860 --> 01:18:34,739
frames<font color="#E5E5E5"> it is only available to chroma</font>

1543
01:18:32,159 --> 01:18:36,860
planes<font color="#CCCCCC"> and it basically</font><font color="#E5E5E5"> works by</font>

1544
01:18:34,739 --> 01:18:40,768
predicting chroma pixels using

1545
01:18:36,860 --> 01:18:42,959
coincident reconstructed luma pixels so

1546
01:18:40,769 --> 01:18:45,329
let's go to the next slide<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see the</font>

1547
01:18:42,959 --> 01:18:47,789
difference<font color="#E5E5E5"> from what</font><font color="#CCCCCC"> we proposed before</font>

1548
01:18:45,329 --> 01:18:49,650
so prior proposal was on a dowel

1549
01:18:47,789 --> 01:18:53,030
implementation so now we've<font color="#CCCCCC"> changed that</font>

1550
01:18:49,650 --> 01:18:55,438
to reflect<font color="#E5E5E5"> what was proposed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a v1</font>

1551
01:18:53,030 --> 01:18:59,070
<font color="#CCCCCC">most significant changes that we no</font>

1552
01:18:55,439 --> 01:19:02,159
<font color="#CCCCCC">longer rely on pvq so prediction is now</font>

1553
01:18:59,070 --> 01:19:04,499
done in the spatial<font color="#CCCCCC"> domain we consider</font>

1554
01:19:02,159 --> 01:19:06,239
the only the AC contribution of

1555
01:19:04,499 --> 01:19:08,639
reconstructed pixels I'll talk<font color="#CCCCCC"> about</font>

1556
01:19:06,239 --> 01:19:10,799
<font color="#E5E5E5">that a bit later but</font><font color="#CCCCCC"> that is similar to</font>

1557
01:19:08,639 --> 01:19:15,239
<font color="#CCCCCC">what was happening before in the pvq</font>

1558
01:19:10,800 --> 01:19:18,719
version of<font color="#E5E5E5"> CFL we use the existing DC</font>

1559
01:19:15,239 --> 01:19:21,299
<font color="#E5E5E5">pred so DC prediction for the chroma DC</font>

1560
01:19:18,719 --> 01:19:22,860
contribution this is<font color="#E5E5E5"> already available</font>

1561
01:19:21,300 --> 01:19:23,880
in<font color="#CCCCCC"> a v1 there's already fast</font>

1562
01:19:22,860 --> 01:19:25,768
implementations

1563
01:19:23,880 --> 01:19:28,169
it requires no<font color="#E5E5E5"> signaling and it is more</font>

1564
01:19:25,769 --> 01:19:30,239
precise<font color="#E5E5E5"> than what is always used</font><font color="#CCCCCC"> before</font>

1565
01:19:28,169 --> 01:19:32,789
<font color="#CCCCCC">so that's also</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> interesting so going</font>

1566
01:19:30,239 --> 01:19:35,159
<font color="#E5E5E5">on</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the next slide so</font><font color="#CCCCCC"> the differences</font>

1567
01:19:32,789 --> 01:19:36,900
<font color="#E5E5E5">we can talk about maybe</font><font color="#CCCCCC"> Dola</font>

1568
01:19:35,159 --> 01:19:39,150
and<font color="#CCCCCC"> Thor which are you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> codecs that</font>

1569
01:19:36,900 --> 01:19:41,909
<font color="#E5E5E5">people know here I already said before</font>

1570
01:19:39,150 --> 01:19:43,829
<font color="#E5E5E5">we went away from frequency and we're</font>

1571
01:19:41,909 --> 01:19:46,799
now going<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> spatial domain for</font>

1572
01:19:43,829 --> 01:19:49,558
prediction<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Thor implementation is</font>

1573
01:19:46,800 --> 01:19:52,050
implied<font color="#E5E5E5"> in the signaling the</font><font color="#CCCCCC"> doubt</font>

1574
01:19:49,559 --> 01:19:56,639
implementation<font color="#CCCCCC"> use the</font><font color="#E5E5E5"> pvq gain and the</font>

1575
01:19:52,050 --> 01:19:59,130
sign bit to send the<font color="#CCCCCC"> information we send</font>

1576
01:19:56,639 --> 01:20:03,030
<font color="#E5E5E5">the information explicitly using joint</font>

1577
01:19:59,130 --> 01:20:06,479
signs and an index value the activation

1578
01:20:03,030 --> 01:20:08,909
mechanism<font color="#E5E5E5"> was a threshold for Thor it</font>

1579
01:20:06,479 --> 01:20:12,479
was<font color="#E5E5E5"> also signaled in</font><font color="#CCCCCC"> doubt we have a</font>

1580
01:20:08,909 --> 01:20:16,888
special UV only mode in a<font color="#E5E5E5"> v1 so anyone</font>

1581
01:20:12,479 --> 01:20:20,070
has separate prediction modes for<font color="#E5E5E5"> intra</font>

1582
01:20:16,889 --> 01:20:22,260
<font color="#E5E5E5">and intra luma and intra chroma so we</font>

1583
01:20:20,070 --> 01:20:27,360
take<font color="#E5E5E5"> advantage of that to have this UV</font>

1584
01:20:22,260 --> 01:20:29,760
only mode called CFL<font color="#E5E5E5"> pred we do encoder</font>

1585
01:20:27,360 --> 01:20:33,289
instead of doing encoder model fitting

1586
01:20:29,760 --> 01:20:36,360
<font color="#E5E5E5">we will do a rate constraint search and</font>

1587
01:20:33,289 --> 01:20:38,099
we do know a decoder model fitting since

1588
01:20:36,360 --> 01:20:42,289
the information<font color="#CCCCCC"> in signal in the bits</font>

1589
01:20:38,099 --> 01:20:45,449
<font color="#CCCCCC">tree moving</font><font color="#E5E5E5"> on to the flow of the</font>

1590
01:20:42,289 --> 01:20:47,820
operations<font color="#E5E5E5"> we see that if subsampling is</font>

1591
01:20:45,449 --> 01:20:50,188
<font color="#E5E5E5">used as though if chroma subsampling is</font>

1592
01:20:47,820 --> 01:20:52,049
used well the luma surface will<font color="#CCCCCC"> not be</font>

1593
01:20:50,189 --> 01:20:54,300
the<font color="#E5E5E5"> same as the chroma surface so we</font>

1594
01:20:52,050 --> 01:20:55,769
must do a luma subsampling<font color="#E5E5E5"> that is</font>

1595
01:20:54,300 --> 01:20:58,349
<font color="#E5E5E5">equivalent to the chroma subsampling</font>

1596
01:20:55,769 --> 01:21:00,780
that's being done<font color="#E5E5E5"> we subtract away the</font>

1597
01:20:58,349 --> 01:21:03,090
<font color="#E5E5E5">average this gives us the AC</font>

1598
01:21:00,780 --> 01:21:06,059
contribution in the spatial domain<font color="#CCCCCC"> and</font>

1599
01:21:03,090 --> 01:21:10,380
this is usually<font color="#E5E5E5"> on a chroma transform</font>

1600
01:21:06,059 --> 01:21:12,539
<font color="#E5E5E5">size block then</font><font color="#CCCCCC"> we'll decode the signals</font>

1601
01:21:10,380 --> 01:21:15,360
scaling factors<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the bit stream and</font>

1602
01:21:12,539 --> 01:21:17,550
<font color="#CCCCCC">we'll multiply</font><font color="#E5E5E5"> that these are in</font><font color="#CCCCCC"> q3</font>

1603
01:21:15,360 --> 01:21:20,188
precision but then once we multiply that

1604
01:21:17,550 --> 01:21:23,340
goes down to<font color="#CCCCCC"> q0 and we add in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> DC</font>

1605
01:21:20,189 --> 01:21:25,289
<font color="#E5E5E5">pred the chroma DC pred to that value</font>

1606
01:21:23,340 --> 01:21:27,599
and<font color="#E5E5E5"> that gives us our final prediction</font>

1607
01:21:25,289 --> 01:21:31,050
<font color="#E5E5E5">so if we look at the codebook that we</font>

1608
01:21:27,599 --> 01:21:33,179
end up<font color="#E5E5E5"> with on the next slide oh</font><font color="#CCCCCC"> okay</font>

1609
01:21:31,050 --> 01:21:38,249
<font color="#CCCCCC">nevermind oh that's good</font><font color="#E5E5E5"> okay</font>

1610
01:21:33,179 --> 01:21:41,789
so<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> why do we go</font>

1611
01:21:38,249 --> 01:21:45,269
<font color="#E5E5E5">with the chroma DC pred</font><font color="#CCCCCC"> is that when we</font>

1612
01:21:41,789 --> 01:21:47,340
<font color="#CCCCCC">use the</font><font color="#E5E5E5"> AC contribution this each</font>

1613
01:21:45,269 --> 01:21:49,050
contribution is<font color="#CCCCCC"> zero mean which means</font>

1614
01:21:47,340 --> 01:21:51,810
that it sums to<font color="#E5E5E5"> zero</font>

1615
01:21:49,050 --> 01:21:53,940
and doing so simplifies the linear

1616
01:21:51,810 --> 01:21:56,880
<font color="#E5E5E5">regression equation for beta which makes</font>

1617
01:21:53,940 --> 01:22:00,150
it<font color="#CCCCCC"> the average of the Karma reference</font>

1618
01:21:56,880 --> 01:22:02,400
pixels<font color="#E5E5E5"> and the DC pred</font><font color="#CCCCCC"> is a very good</font>

1619
01:22:00,150 --> 01:22:04,500
<font color="#CCCCCC">predictor of that as it tries to</font><font color="#E5E5E5"> predict</font>

1620
01:22:02,400 --> 01:22:06,570
it using the<font color="#E5E5E5"> neighboring pixels that</font><font color="#CCCCCC"> are</font>

1621
01:22:04,500 --> 01:22:08,880
adjacent<font color="#CCCCCC"> to the above and left borders</font>

1622
01:22:06,570 --> 01:22:10,349
of the block and it requires<font color="#E5E5E5"> no</font>

1623
01:22:08,880 --> 01:22:13,170
<font color="#E5E5E5">signaling so we don't have to signal the</font>

1624
01:22:10,350 --> 01:22:15,750
beta value so alpha will be signaled but

1625
01:22:13,170 --> 01:22:18,540
beta won't moving on to the<font color="#E5E5E5"> next slide</font>

1626
01:22:15,750 --> 01:22:20,670
<font color="#E5E5E5">we have the scaling code book so</font>

1627
01:22:18,540 --> 01:22:22,650
basically this shows you when we do the

1628
01:22:20,670 --> 01:22:25,830
search<font color="#E5E5E5"> what happens so we start in the</font>

1629
01:22:22,650 --> 01:22:29,580
<font color="#E5E5E5">middle of this grid and we can change</font>

1630
01:22:25,830 --> 01:22:32,309
the scaling factor for chroma<font color="#E5E5E5"> correction</font>

1631
01:22:29,580 --> 01:22:33,840
with<font color="#CCCCCC"> a chroma</font><font color="#E5E5E5"> CR and chroma</font><font color="#CCCCCC"> C B and we</font>

1632
01:22:32,310 --> 01:22:35,340
move from negative to<font color="#CCCCCC"> positive and</font><font color="#E5E5E5"> you</font>

1633
01:22:33,840 --> 01:22:37,860
can see all the different<font color="#CCCCCC"> tones that</font><font color="#E5E5E5"> you</font>

1634
01:22:35,340 --> 01:22:39,990
can get<font color="#E5E5E5"> this of course is only a subset</font>

1635
01:22:37,860 --> 01:22:43,170
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> codebook</font><font color="#E5E5E5"> we have it is goes from</font>

1636
01:22:39,990 --> 01:22:47,219
<font color="#CCCCCC">minus 2 to 2</font><font color="#E5E5E5"> in q3 so that it goes up in</font>

1637
01:22:43,170 --> 01:22:52,500
steps<font color="#E5E5E5"> of 1 8 0 0 is</font><font color="#CCCCCC"> not allowed as it is</font>

1638
01:22:47,220 --> 01:22:55,800
DC<font color="#CCCCCC"> pred we pick our value</font><font color="#E5E5E5"> using a rate</font>

1639
01:22:52,500 --> 01:22:58,950
<font color="#E5E5E5">constraint search as I said before since</font>

1640
01:22:55,800 --> 01:23:01,490
we are<font color="#CCCCCC"> signalling the Alpha value</font><font color="#E5E5E5"> the</font>

1641
01:22:58,950 --> 01:23:05,519
when we do we can't use a<font color="#CCCCCC"> liner</font>

1642
01:23:01,490 --> 01:23:07,920
<font color="#E5E5E5">regression because</font><font color="#CCCCCC"> that value</font><font color="#E5E5E5"> won't be</font>

1643
01:23:05,520 --> 01:23:09,780
our D optimal so what we do instead<font color="#CCCCCC"> is</font>

1644
01:23:07,920 --> 01:23:12,300
we<font color="#E5E5E5"> do the same thing as any other</font>

1645
01:23:09,780 --> 01:23:14,160
parameter<font color="#E5E5E5"> in the encoder</font><font color="#CCCCCC"> that requires</font>

1646
01:23:12,300 --> 01:23:16,560
rate is that we take the weighted<font color="#E5E5E5"> rate</font>

1647
01:23:14,160 --> 01:23:19,080
and add that to the<font color="#CCCCCC"> distortion value and</font>

1648
01:23:16,560 --> 01:23:21,870
pick the<font color="#CCCCCC"> the parameter that minimizes</font>

1649
01:23:19,080 --> 01:23:24,330
that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that gets signal to</font><font color="#E5E5E5"> do decoder</font>

1650
01:23:21,870 --> 01:23:26,519
<font color="#E5E5E5">the next slide</font><font color="#CCCCCC"> will explain how we go</font>

1651
01:23:24,330 --> 01:23:29,010
about<font color="#CCCCCC"> signaling lists</font><font color="#E5E5E5"> so we will join</font>

1652
01:23:26,520 --> 01:23:32,370
both<font color="#E5E5E5"> times so there's gonna be</font><font color="#CCCCCC"> 2 scaling</font>

1653
01:23:29,010 --> 01:23:34,080
parameters<font color="#E5E5E5"> one for</font><font color="#CCCCCC"> CRN one for CB</font><font color="#E5E5E5"> so we</font>

1654
01:23:32,370 --> 01:23:38,309
joined them<font color="#E5E5E5"> together a sign can either</font>

1655
01:23:34,080 --> 01:23:40,410
be<font color="#E5E5E5"> 0 negative or positive and since 0 0</font>

1656
01:23:38,310 --> 01:23:42,570
<font color="#E5E5E5">isn't allowed because that's DC pred</font><font color="#CCCCCC"> we</font>

1657
01:23:40,410 --> 01:23:45,240
have<font color="#CCCCCC"> eight values</font><font color="#E5E5E5"> which we sent to our</font>

1658
01:23:42,570 --> 01:23:48,780
multi symbol encoder<font color="#E5E5E5"> as an</font><font color="#CCCCCC"> eight value</font>

1659
01:23:45,240 --> 01:23:52,650
symbol now for each<font color="#E5E5E5"> non</font><font color="#CCCCCC"> zero scaling</font>

1660
01:23:48,780 --> 01:23:55,110
factor we will send a value<font color="#E5E5E5"> excluding</font>

1661
01:23:52,650 --> 01:23:58,080
<font color="#CCCCCC">zero but all the way to 2 inclusively</font>

1662
01:23:55,110 --> 01:24:00,990
<font color="#E5E5E5">and this again with a step of 1/8 this</font>

1663
01:23:58,080 --> 01:24:02,760
gives us 16 values<font color="#E5E5E5"> for our multi symbol</font>

1664
01:24:00,990 --> 01:24:04,650
and this actually maxes out what

1665
01:24:02,760 --> 01:24:08,670
<font color="#CCCCCC">Multi symbol</font><font color="#E5E5E5"> entropy</font><font color="#CCCCCC"> coding can give us</font>

1666
01:24:04,650 --> 01:24:12,809
which is a<font color="#E5E5E5"> 16 value</font><font color="#CCCCCC"> CDF</font><font color="#E5E5E5"> going on to the</font>

1667
01:24:08,670 --> 01:24:14,520
<font color="#E5E5E5">next slide we can see results from our</font>

1668
01:24:12,810 --> 01:24:16,890
analyzer<font color="#CCCCCC"> there's a link you</font><font color="#E5E5E5"> can click</font>

1669
01:24:14,520 --> 01:24:19,320
there<font color="#E5E5E5"> sadly it got moved behind the</font>

1670
01:24:16,890 --> 01:24:21,240
<font color="#CCCCCC">image</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> the distribution of</font>

1671
01:24:19,320 --> 01:24:25,200
how many times modes get used so these

1672
01:24:21,240 --> 01:24:27,389
are UV modes<font color="#E5E5E5"> that in a v1 we can see</font>

1673
01:24:25,200 --> 01:24:29,910
that there's about<font color="#CCCCCC"> 44%</font><font color="#E5E5E5"> of the time DC</font>

1674
01:24:27,390 --> 01:24:33,300
<font color="#CCCCCC">prêt will get picked</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> a CFL comes in</font>

1675
01:24:29,910 --> 01:24:36,180
at about<font color="#E5E5E5"> 17% we observe it between 15</font>

1676
01:24:33,300 --> 01:24:39,030
and<font color="#E5E5E5"> 20% in different sequences for a v1</font>

1677
01:24:36,180 --> 01:24:42,450
as you can see the other contender modes

1678
01:24:39,030 --> 01:24:44,840
or best<font color="#E5E5E5"> motors still slightly below so</font>

1679
01:24:42,450 --> 01:24:47,070
<font color="#E5E5E5">we see that actually performs other</font>

1680
01:24:44,840 --> 01:24:48,510
<font color="#E5E5E5">chroma modes that are</font><font color="#CCCCCC"> available in the</font>

1681
01:24:47,070 --> 01:24:51,929
encoder and<font color="#CCCCCC"> you can actually see this</font>

1682
01:24:48,510 --> 01:24:56,190
live in the analyzer in<font color="#CCCCCC"> real time</font><font color="#E5E5E5"> moving</font>

1683
01:24:51,930 --> 01:25:02,540
<font color="#CCCCCC">on to the</font><font color="#E5E5E5"> results for subset one we can</font>

1684
01:24:56,190 --> 01:25:06,509
see that there is a<font color="#CCCCCC"> minus 4.65</font><font color="#E5E5E5"> CIE de</font>

1685
01:25:02,540 --> 01:25:10,470
2010 tidge<font color="#E5E5E5"> it is the</font><font color="#CCCCCC"> bt right so it</font>

1686
01:25:06,510 --> 01:25:13,500
gives us a rate decrease<font color="#E5E5E5"> with the same</font>

1687
01:25:10,470 --> 01:25:15,630
level of quality<font color="#E5E5E5"> we use the CIE</font><font color="#CCCCCC"> P D</font>

1688
01:25:13,500 --> 01:25:18,330
value because it is<font color="#E5E5E5"> the only one that</font>

1689
01:25:15,630 --> 01:25:21,660
<font color="#E5E5E5">considers both luma and chroma and does</font>

1690
01:25:18,330 --> 01:25:23,370
so<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a perceptually uniform white</font><font color="#E5E5E5"> if</font>

1691
01:25:21,660 --> 01:25:25,290
you click on<font color="#E5E5E5"> the links below you can see</font>

1692
01:25:23,370 --> 01:25:27,680
<font color="#E5E5E5">the full breakdown with all the values</font>

1693
01:25:25,290 --> 01:25:31,340
so<font color="#E5E5E5"> subset one are still images and</font>

1694
01:25:27,680 --> 01:25:33,990
<font color="#E5E5E5">objective one fast</font><font color="#CCCCCC"> our video sequences</font>

1695
01:25:31,340 --> 01:25:36,510
<font color="#CCCCCC">as you can see in</font><font color="#E5E5E5"> that point we</font><font color="#CCCCCC"> are</font>

1696
01:25:33,990 --> 01:25:39,389
giving<font color="#CCCCCC"> about an on average two point</font>

1697
01:25:36,510 --> 01:25:44,100
forty<font color="#E5E5E5"> one percent reduction this is for</font>

1698
01:25:39,390 --> 01:25:45,440
a single<font color="#E5E5E5"> tool</font><font color="#CCCCCC"> CFL overall of 81 so</font>

1699
01:25:44,100 --> 01:25:48,510
that's pretty<font color="#CCCCCC"> interesting</font>

1700
01:25:45,440 --> 01:25:50,519
<font color="#CCCCCC">there is</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> psnr</font><font color="#E5E5E5"> games these are</font>

1701
01:25:48,510 --> 01:25:52,400
illumise and<font color="#CCCCCC"> our gains the reason for</font>

1702
01:25:50,520 --> 01:25:55,410
that is since we have better predictions

1703
01:25:52,400 --> 01:25:58,290
<font color="#E5E5E5">we actually reduce the amount</font><font color="#CCCCCC"> of bits so</font>

1704
01:25:55,410 --> 01:25:59,910
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that gives us this metric actually</font>

1705
01:25:58,290 --> 01:26:02,190
gives better<font color="#E5E5E5"> gains</font><font color="#CCCCCC"> because it has same</font>

1706
01:25:59,910 --> 01:26:04,019
level<font color="#E5E5E5"> quality but it'll have fewer bits</font>

1707
01:26:02,190 --> 01:26:07,080
to do so and since this is<font color="#E5E5E5"> the area</font>

1708
01:26:04,020 --> 01:26:09,240
between a rate difference and quality

1709
01:26:07,080 --> 01:26:11,790
that<font color="#CCCCCC"> I'll give</font><font color="#E5E5E5"> you a negative value</font><font color="#CCCCCC"> so</font>

1710
01:26:09,240 --> 01:26:13,559
<font color="#CCCCCC">that's very good</font><font color="#E5E5E5"> if we move on to the</font>

1711
01:26:11,790 --> 01:26:15,730
<font color="#CCCCCC">next</font><font color="#E5E5E5"> slide we see that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is actually</font>

1712
01:26:13,560 --> 01:26:21,100
<font color="#CCCCCC">very good</font><font color="#E5E5E5"> for screen content coding</font>

1713
01:26:15,730 --> 01:26:24,519
so here we we have on<font color="#E5E5E5"> average about</font><font color="#CCCCCC"> 5%</font>

1714
01:26:21,100 --> 01:26:30,550
<font color="#E5E5E5">reduction for the screen for the gaming</font>

1715
01:26:24,520 --> 01:26:33,400
<font color="#E5E5E5">twitch data set which is on slide</font><font color="#CCCCCC"> 11 yes</font>

1716
01:26:30,550 --> 01:26:36,250
so<font color="#E5E5E5"> notable mentions here are the</font>

1717
01:26:33,400 --> 01:26:40,990
<font color="#E5E5E5">minecraft sequence so CFL alone gives a</font>

1718
01:26:36,250 --> 01:26:44,260
<font color="#E5E5E5">minus 20% reduction on both minecraft</font>

1719
01:26:40,990 --> 01:26:47,410
sequences that are<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that test sets and</font>

1720
01:26:44,260 --> 01:26:51,130
we see also good results for GTA and

1721
01:26:47,410 --> 01:26:53,590
star graph at about<font color="#E5E5E5"> 5% each first</font><font color="#CCCCCC"> tiede</font>

1722
01:26:51,130 --> 01:26:59,200
<font color="#E5E5E5">2000 and you know still some significant</font>

1723
01:26:53,590 --> 01:27:02,500
gains for psnr<font color="#E5E5E5"> luma only so you know</font>

1724
01:26:59,200 --> 01:27:03,929
we're really impressed<font color="#E5E5E5"> with the results</font>

1725
01:27:02,500 --> 01:27:06,880
<font color="#CCCCCC">from this tool and</font><font color="#E5E5E5"> that's why we're</font>

1726
01:27:03,930 --> 01:27:10,090
proposing it as an<font color="#E5E5E5"> update for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CFL</font>

1727
01:27:06,880 --> 01:27:14,110
proposal for<font color="#E5E5E5"> a net VC</font><font color="#CCCCCC"> I did I do that</font><font color="#E5E5E5"> in</font>

1728
01:27:10,090 --> 01:27:15,760
good timing perfect<font color="#CCCCCC"> thank you very much</font>

1729
01:27:14,110 --> 01:27:20,280
thanks for<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> when sitting for a Tim</font>

1730
01:27:15,760 --> 01:27:25,660
<font color="#E5E5E5">to time usurper any other questions for</font>

1731
01:27:20,280 --> 01:27:31,179
for Luke on the chroma<font color="#CCCCCC"> formula tool any</font>

1732
01:27:25,660 --> 01:27:34,000
other final items off the agenda<font color="#CCCCCC"> all</font>

1733
01:27:31,180 --> 01:27:36,310
<font color="#CCCCCC">right so make sure that I get</font><font color="#E5E5E5"> the blue</font>

1734
01:27:34,000 --> 01:27:38,890
sheets<font color="#E5E5E5"> signed if you came in late anyone</font>

1735
01:27:36,310 --> 01:27:40,090
<font color="#E5E5E5">still here from net VC is make sure to</font>

1736
01:27:38,890 --> 01:27:44,860
get<font color="#CCCCCC"> them where is the blue sheet by the</font>

1737
01:27:40,090 --> 01:27:46,420
way anybody needs it<font color="#E5E5E5"> right</font><font color="#CCCCCC"> please raise</font>

1738
01:27:44,860 --> 01:27:47,440
<font color="#CCCCCC">your hand we'll get it to you</font><font color="#E5E5E5"> otherwise</font>

1739
01:27:46,420 --> 01:27:50,370
<font color="#E5E5E5">thank you very much</font>

1740
01:27:47,440 --> 01:27:50,370
I'll see you 101

1741
01:27:59,300 --> 01:28:03,950
thanks Matt<font color="#CCCCCC"> for standing in for</font><font color="#E5E5E5"> our</font>

1742
01:28:01,590 --> 01:28:03,950
co-chair

1743
01:28:07,430 --> 01:28:10,640
[Music]

1744
01:28:26,020 --> 01:28:29,020
<font color="#E5E5E5">summarizes</font>

1745
01:29:13,350 --> 01:29:15,410
you

