1
00:00:10,700 --> 00:00:12,960
at all

2
00:00:12,960 --> 00:00:16,740
ah yeah

3
00:00:33,860 --> 00:00:36,719
that's that's

4
00:00:36,719 --> 00:00:39,420
hi everyone

5
00:00:39,420 --> 00:00:42,120
let's get started um welcome to this kid

6
00:00:42,120 --> 00:00:43,739
working group meeting so obviously our

7
00:00:43,739 --> 00:00:45,960
first meeting my name is hanis jupinik

8
00:00:45,960 --> 00:00:48,300
and this is from John Gita

9
00:00:48,300 --> 00:00:50,100
we are your

10
00:00:50,100 --> 00:00:52,500
new chairs for this working group

11
00:00:52,500 --> 00:00:54,960
um our first meeting so happy to see you

12
00:00:54,960 --> 00:00:56,280
all here

13
00:00:56,280 --> 00:00:59,300
note well you've seen that already

14
00:00:59,300 --> 00:01:01,320
obviously because we're in the middle of

15
00:01:01,320 --> 00:01:02,160
the week

16
00:01:02,160 --> 00:01:04,559
Roman uh good morning everyone it's

17
00:01:04,559 --> 00:01:05,700
exciting to have our first kickoff

18
00:01:05,700 --> 00:01:07,200
meeting I just wanted to publicly say

19
00:01:07,200 --> 00:01:08,400
you know as you just did your

20
00:01:08,400 --> 00:01:10,380
introduction harness and John thank you

21
00:01:10,380 --> 00:01:11,760
for your willingness to serve to kind of

22
00:01:11,760 --> 00:01:13,320
get us started so again very much

23
00:01:13,320 --> 00:01:14,479
appreciate it

24
00:01:14,479 --> 00:01:18,560
yeah thanks Roman

25
00:01:19,120 --> 00:01:22,020
[Applause]

26
00:01:22,020 --> 00:01:24,479
as you've seen we have a pretty full

27
00:01:24,479 --> 00:01:26,820
agenda we

28
00:01:26,820 --> 00:01:29,280
we will start with a problem statement

29
00:01:29,280 --> 00:01:32,360
document kind of the problem statement

30
00:01:32,360 --> 00:01:35,880
assuming that skit uh hasn't been done

31
00:01:35,880 --> 00:01:39,240
yet so pre-skit type of thing then we

32
00:01:39,240 --> 00:01:40,200
talk about

33
00:01:40,200 --> 00:01:43,200
um the use case is same as well yogesh

34
00:01:43,200 --> 00:01:44,520
is going to talk about those then we

35
00:01:44,520 --> 00:01:46,860
switch into how does the solution look

36
00:01:46,860 --> 00:01:50,280
like with an architecture using skit uh

37
00:01:50,280 --> 00:01:51,720
we have a presentation about this kit

38
00:01:51,720 --> 00:01:54,840
receipts another document uh if you

39
00:01:54,840 --> 00:01:56,579
click at the slide you get to the

40
00:01:56,579 --> 00:01:58,979
documents themselves uh there's a

41
00:01:58,979 --> 00:02:03,360
hackathon report which explains how uh

42
00:02:03,360 --> 00:02:06,240
you would use kit uh technology to

43
00:02:06,240 --> 00:02:08,098
actually solve some of those use cases

44
00:02:08,098 --> 00:02:11,340
and then we have some some time left to

45
00:02:11,340 --> 00:02:14,280
for any questions that you may have is

46
00:02:14,280 --> 00:02:16,379
there any agenda patching requests

47
00:02:16,379 --> 00:02:19,379
haven't received any so

48
00:02:19,379 --> 00:02:21,000
I don't see anyone jumping to the

49
00:02:21,000 --> 00:02:22,319
microphone and if you go to the

50
00:02:22,319 --> 00:02:24,840
microphone please use the QR code to add

51
00:02:24,840 --> 00:02:26,940
yourself to the queue

52
00:02:26,940 --> 00:02:29,160
okay

53
00:02:29,160 --> 00:02:30,599
uh

54
00:02:30,599 --> 00:02:34,379
yeah we thank Roman already uh thank you

55
00:02:34,379 --> 00:02:36,239
again for getting the working group

56
00:02:36,239 --> 00:02:39,720
scheduled so quickly and one

57
00:02:39,720 --> 00:02:42,060
administrative thing so we've had

58
00:02:42,060 --> 00:02:44,280
regular conference calls

59
00:02:44,280 --> 00:02:46,140
um we are going to continue those and I

60
00:02:46,140 --> 00:02:47,819
will send out the or we will send out

61
00:02:47,819 --> 00:02:50,940
the doodle poll to confirm that the date

62
00:02:50,940 --> 00:02:54,180
that we had used or that which was a

63
00:02:54,180 --> 00:02:56,459
Monday and the first day called that

64
00:02:56,459 --> 00:03:00,000
that is actually good for everyone

65
00:03:00,000 --> 00:03:02,220
um but we would switch to using IDF

66
00:03:02,220 --> 00:03:04,860
tools and the whole IDF Machinery so

67
00:03:04,860 --> 00:03:06,720
that we don't have to use

68
00:03:06,720 --> 00:03:10,080
um sort of company individual company

69
00:03:10,080 --> 00:03:12,180
sort of mechanisms here

70
00:03:12,180 --> 00:03:13,560
okay

71
00:03:13,560 --> 00:03:16,280
enough said

72
00:03:18,780 --> 00:03:21,980
let's have the first speaker

73
00:03:24,300 --> 00:03:27,540
you better do

74
00:03:27,540 --> 00:03:29,540
it

75
00:03:30,239 --> 00:03:33,720
hey I'm Ori Steele I'm uh here to

76
00:03:33,720 --> 00:03:36,060
present the problem statement

77
00:03:36,060 --> 00:03:37,440
um we thought we'd start with a quote

78
00:03:37,440 --> 00:03:40,080
this time about what Supply chains are

79
00:03:40,080 --> 00:03:42,120
and I'm going to read the quote for you

80
00:03:42,120 --> 00:03:42,780
all

81
00:03:42,780 --> 00:03:44,760
a supply chain is a network of

82
00:03:44,760 --> 00:03:47,220
individuals and companies who are

83
00:03:47,220 --> 00:03:48,860
involved in creating a product

84
00:03:48,860 --> 00:03:52,319
delivering it to the consumer links on

85
00:03:52,319 --> 00:03:54,599
the chain begin with the producers of

86
00:03:54,599 --> 00:03:57,239
the raw materials and end when the van

87
00:03:57,239 --> 00:03:59,400
delivers the finished product to the end

88
00:03:59,400 --> 00:04:00,659
user

89
00:04:00,659 --> 00:04:03,500
next slide

90
00:04:04,560 --> 00:04:08,519
in the context of uh software we're

91
00:04:08,519 --> 00:04:11,879
interested in software Supply chains so

92
00:04:11,879 --> 00:04:14,099
maybe the van part of the last piece is

93
00:04:14,099 --> 00:04:17,519
the only major difference software is an

94
00:04:17,519 --> 00:04:19,798
inherent part of everyday digitally

95
00:04:19,798 --> 00:04:22,440
enabled life from smartphones to iot

96
00:04:22,440 --> 00:04:25,620
Data Centers widely discussed tax on the

97
00:04:25,620 --> 00:04:27,120
software supply chain have helped raise

98
00:04:27,120 --> 00:04:30,060
awareness of risks many of the other

99
00:04:30,060 --> 00:04:31,800
vulnerabilities highlight the need for

100
00:04:31,800 --> 00:04:33,680
greater visibility into the supply chain

101
00:04:33,680 --> 00:04:37,500
Integrity transparency and Trust to make

102
00:04:37,500 --> 00:04:39,240
an informed decision

103
00:04:39,240 --> 00:04:42,120
just to be you know concrete about this

104
00:04:42,120 --> 00:04:44,340
one use case is a software supply chain

105
00:04:44,340 --> 00:04:47,160
focused on software bill of materials

106
00:04:47,160 --> 00:04:49,860
also known as s-bombs as evidence to

107
00:04:49,860 --> 00:04:52,280
acclaim

108
00:04:52,620 --> 00:04:53,880
that's it

109
00:04:53,880 --> 00:04:56,340
so um

110
00:04:56,340 --> 00:04:58,860
transparency and Trust

111
00:04:58,860 --> 00:05:02,820
transparency does not prevent

112
00:05:02,820 --> 00:05:04,740
me are you good

113
00:05:04,740 --> 00:05:05,300
um

114
00:05:05,300 --> 00:05:08,100
transparency does not prevent dishonest

115
00:05:08,100 --> 00:05:10,440
or compromised issuers but it holds them

116
00:05:10,440 --> 00:05:14,300
accountable any artifact

117
00:05:16,979 --> 00:05:21,020
no I didn't put this community

118
00:05:22,259 --> 00:05:24,800
remix

119
00:05:25,820 --> 00:05:27,900
I clicked the wrong button and the

120
00:05:27,900 --> 00:05:30,620
internet is down

121
00:05:32,820 --> 00:05:35,639
further evidence of the delicacy of

122
00:05:35,639 --> 00:05:38,120
software

123
00:06:11,820 --> 00:06:14,460
and we're back

124
00:06:14,460 --> 00:06:17,400
so any artifact that may be used to

125
00:06:17,400 --> 00:06:20,520
Target a particular user that checks for

126
00:06:20,520 --> 00:06:23,940
receipts must have been recorded in the

127
00:06:23,940 --> 00:06:25,860
tamper-proof registry and will be

128
00:06:25,860 --> 00:06:28,199
subject to scrutiny scrutiny and

129
00:06:28,199 --> 00:06:30,539
auditing by other parties what is what

130
00:06:30,539 --> 00:06:31,800
does this sentence mean what are we

131
00:06:31,800 --> 00:06:33,600
trying to get at here the important part

132
00:06:33,600 --> 00:06:36,300
is that when you ask about transparency

133
00:06:36,300 --> 00:06:39,180
you want the answer to that question to

134
00:06:39,180 --> 00:06:41,940
be answered consistently so if I ask

135
00:06:41,940 --> 00:06:45,720
about a particular artifact today and my

136
00:06:45,720 --> 00:06:47,520
friend Mike Pro Rock in the back asks

137
00:06:47,520 --> 00:06:49,740
that same question in a few seconds he

138
00:06:49,740 --> 00:06:51,960
should get a similar answer if nothing

139
00:06:51,960 --> 00:06:54,120
has changed so it's important that the

140
00:06:54,120 --> 00:06:56,940
that entity providing that transparency

141
00:06:56,940 --> 00:07:00,960
not the be dishonest or be choosing how

142
00:07:00,960 --> 00:07:02,880
they answer those kinds of questions and

143
00:07:02,880 --> 00:07:05,180
so we're interested in creating

144
00:07:05,180 --> 00:07:08,639
transparency and Trust in that sense

145
00:07:08,639 --> 00:07:10,620
and uh skit

146
00:07:10,620 --> 00:07:12,419
um an architecture for trustworthy and

147
00:07:12,419 --> 00:07:14,280
transparent digital Supply chains is a

148
00:07:14,280 --> 00:07:16,020
link available on this slide

149
00:07:16,020 --> 00:07:18,440
next

150
00:07:18,960 --> 00:07:21,300
all right and with that I'll introduce

151
00:07:21,300 --> 00:07:24,060
my colleague yogesh deshpandi to present

152
00:07:24,060 --> 00:07:27,560
software supply chain use cases

153
00:07:31,620 --> 00:07:32,639
hello

154
00:07:32,639 --> 00:07:34,259
good morning everyone

155
00:07:34,259 --> 00:07:36,660
I hope you have all have a good morning

156
00:07:36,660 --> 00:07:40,080
and enjoying the session so far and I

157
00:07:40,080 --> 00:07:42,539
want to keep you all all engaged thank

158
00:07:42,539 --> 00:07:43,860
you already for a great great

159
00:07:43,860 --> 00:07:46,080
introduction of the problem statement so

160
00:07:46,080 --> 00:07:47,699
I hope everyone is

161
00:07:47,699 --> 00:07:50,280
clear about the problem we faced the

162
00:07:50,280 --> 00:07:51,840
challenge we faced in the industry today

163
00:07:51,840 --> 00:07:54,780
so what I'm going to present here is

164
00:07:54,780 --> 00:07:57,780
going specifically a little bit more in

165
00:07:57,780 --> 00:07:58,979
detail

166
00:07:58,979 --> 00:08:01,259
in the software use case

167
00:08:01,259 --> 00:08:02,880
to explain you

168
00:08:02,880 --> 00:08:05,940
how this problem gets manifested in a

169
00:08:05,940 --> 00:08:07,680
much more clear way rather than little

170
00:08:07,680 --> 00:08:09,419
bit on the high level I'm going to go in

171
00:08:09,419 --> 00:08:11,819
the Deep little bit deep here so next

172
00:08:11,819 --> 00:08:13,800
slide please

173
00:08:13,800 --> 00:08:17,819
so as you can see here there is uh the

174
00:08:17,819 --> 00:08:20,819
software supply chain is really complex

175
00:08:20,819 --> 00:08:24,780
um system you have multiple software

176
00:08:24,780 --> 00:08:27,120
producers like the operating systems be

177
00:08:27,120 --> 00:08:30,060
it Microsoft Ubuntu and then you have

178
00:08:30,060 --> 00:08:32,039
the component vendors who are generating

179
00:08:32,039 --> 00:08:35,219
the chips or the firmware's on top of it

180
00:08:35,219 --> 00:08:37,500
and then you have the package managers

181
00:08:37,500 --> 00:08:39,779
like Pi Pi or any software and then

182
00:08:39,779 --> 00:08:42,419
finally there is much other open source

183
00:08:42,419 --> 00:08:45,320
code or any proprietary code that gets

184
00:08:45,320 --> 00:08:47,880
goes to the integrator who then

185
00:08:47,880 --> 00:08:50,160
basically picks and chooses these

186
00:08:50,160 --> 00:08:53,580
components to produce integrated builds

187
00:08:53,580 --> 00:08:56,220
uh and that to have multiple flavors

188
00:08:56,220 --> 00:08:59,100
because different compilations which has

189
00:08:59,100 --> 00:09:01,860
different features generate multiple

190
00:09:01,860 --> 00:09:04,140
products multiple Integrated Solutions

191
00:09:04,140 --> 00:09:06,959
out of the same code base and then

192
00:09:06,959 --> 00:09:08,100
eventually it goes to different

193
00:09:08,100 --> 00:09:11,899
companies which then load those

194
00:09:11,899 --> 00:09:14,640
software onto the devices and the device

195
00:09:14,640 --> 00:09:16,920
gets deployed into the field and gets to

196
00:09:16,920 --> 00:09:19,080
the hands of the users like we have

197
00:09:19,080 --> 00:09:21,240
laptops mobile phones all running comp

198
00:09:21,240 --> 00:09:23,459
complicated software and this is the end

199
00:09:23,459 --> 00:09:25,920
user who is ultimately using that

200
00:09:25,920 --> 00:09:29,640
software so this this whole ecosystem is

201
00:09:29,640 --> 00:09:32,160
extremely complex and how do you secure

202
00:09:32,160 --> 00:09:34,920
that this supply chain is a challenge in

203
00:09:34,920 --> 00:09:38,580
itself so that's how let's go to the

204
00:09:38,580 --> 00:09:40,680
next slide

205
00:09:40,680 --> 00:09:43,740
so right now today we see integrator has

206
00:09:43,740 --> 00:09:46,620
a serious problem it each time it is

207
00:09:46,620 --> 00:09:49,080
sourcing it is not having a consistent

208
00:09:49,080 --> 00:09:51,240
and coherent information at the state of

209
00:09:51,240 --> 00:09:53,940
the each published components and there

210
00:09:53,940 --> 00:09:55,620
is no standard way for integrator to

211
00:09:55,620 --> 00:09:58,019
query or receive even if we have

212
00:09:58,019 --> 00:09:59,880
software bill of materials as as we

213
00:09:59,880 --> 00:10:01,920
discussed just now like s-bomb to be

214
00:10:01,920 --> 00:10:05,459
getting delivered we don't know how is

215
00:10:05,459 --> 00:10:07,019
it the right guy who is shipping me the

216
00:10:07,019 --> 00:10:08,060
S form

217
00:10:08,060 --> 00:10:11,160
is can can I fully trust him can I fully

218
00:10:11,160 --> 00:10:13,140
identify his trustworthiness

219
00:10:13,140 --> 00:10:15,899
is the supplied component clean of any

220
00:10:15,899 --> 00:10:18,680
unexpected or any problems like

221
00:10:18,680 --> 00:10:22,320
vulnerabilities or anything or how do I

222
00:10:22,320 --> 00:10:24,800
know that it has not been an accepted

223
00:10:24,800 --> 00:10:27,360
unexpectedly modified or or suddenly

224
00:10:27,360 --> 00:10:29,100
changed because somebody hacked it and

225
00:10:29,100 --> 00:10:30,899
somebody modified it

226
00:10:30,899 --> 00:10:33,240
so how does these kind of complex

227
00:10:33,240 --> 00:10:34,980
situations and problems the integrator

228
00:10:34,980 --> 00:10:38,959
facing today how can he deal with it

229
00:10:41,279 --> 00:10:43,680
so we we start with a specific uh

230
00:10:43,680 --> 00:10:45,779
scenario we have built here to highlight

231
00:10:45,779 --> 00:10:49,260
the problem and explain you and I hope

232
00:10:49,260 --> 00:10:51,540
we we all understand the problem and the

233
00:10:51,540 --> 00:10:53,640
scale of the problem so here on the left

234
00:10:53,640 --> 00:10:56,220
we have an operating system producer be

235
00:10:56,220 --> 00:10:58,019
it any anything as I mentioned earlier

236
00:10:58,019 --> 00:11:00,180
Microsoft Linux or any operating system

237
00:11:00,180 --> 00:11:02,519
producer generates an executable and

238
00:11:02,519 --> 00:11:04,560
delivers it to the device integrator to

239
00:11:04,560 --> 00:11:07,079
integrate it into its system and it has

240
00:11:07,079 --> 00:11:08,880
shipped this binary for device

241
00:11:08,880 --> 00:11:11,100
integrator and on a one-to-one channel

242
00:11:11,100 --> 00:11:14,100
so next slide please

243
00:11:14,100 --> 00:11:16,620
now the device integrator as we saw in

244
00:11:16,620 --> 00:11:18,300
the first slide he has taken other bits

245
00:11:18,300 --> 00:11:22,079
of components the Box the pink box could

246
00:11:22,079 --> 00:11:24,300
not just be one component but again a

247
00:11:24,300 --> 00:11:25,860
series of components coming from other

248
00:11:25,860 --> 00:11:27,899
places and he has done generated an

249
00:11:27,899 --> 00:11:30,300
integrated device software and it has

250
00:11:30,300 --> 00:11:32,700
been given to the device distributor

251
00:11:32,700 --> 00:11:35,339
for Distributing it by loading it into

252
00:11:35,339 --> 00:11:38,240
the on the device

253
00:11:40,019 --> 00:11:43,500
now the device device distributor has

254
00:11:43,500 --> 00:11:45,360
the device ready it has the software

255
00:11:45,360 --> 00:11:47,760
deployed and the user is using that

256
00:11:47,760 --> 00:11:50,579
device and suddenly user faces a problem

257
00:11:50,579 --> 00:11:52,920
he he finds something problematic with

258
00:11:52,920 --> 00:11:54,779
the software he has some vulnerability

259
00:11:54,779 --> 00:11:56,880
or he has running some he's running some

260
00:11:56,880 --> 00:11:58,800
scan or something and suddenly something

261
00:11:58,800 --> 00:12:01,920
pops up he's scared where exactly in

262
00:12:01,920 --> 00:12:03,899
which software component is a problem he

263
00:12:03,899 --> 00:12:05,279
doesn't understand anything because he's

264
00:12:05,279 --> 00:12:07,320
at the end of the day he's end user he's

265
00:12:07,320 --> 00:12:09,000
just a user of a software he's not

266
00:12:09,000 --> 00:12:11,279
doesn't understand so you go back to the

267
00:12:11,279 --> 00:12:13,939
distributor here

268
00:12:14,579 --> 00:12:17,160
and here it is everybody's this this

269
00:12:17,160 --> 00:12:19,380
slide just flows shows the flow that the

270
00:12:19,380 --> 00:12:20,579
end user is complaining to the

271
00:12:20,579 --> 00:12:22,920
distributor now the distributor is not

272
00:12:22,920 --> 00:12:25,079
much knowledgeable about things so he

273
00:12:25,079 --> 00:12:26,279
goes to the device integrator

274
00:12:26,279 --> 00:12:27,839
complaining that here is some problem

275
00:12:27,839 --> 00:12:31,200
how do I fix it where is the solution

276
00:12:31,200 --> 00:12:33,839
the device integrator probably tries to

277
00:12:33,839 --> 00:12:35,579
do some kind of a root cause analysis

278
00:12:35,579 --> 00:12:36,720
and

279
00:12:36,720 --> 00:12:39,180
is not sure though but he hopes to

280
00:12:39,180 --> 00:12:42,300
identify and believes that it's the OS

281
00:12:42,300 --> 00:12:44,459
producers whose binary or the executable

282
00:12:44,459 --> 00:12:46,399
he has received has something

283
00:12:46,399 --> 00:12:48,779
problematic that's why this chaos has

284
00:12:48,779 --> 00:12:51,180
created has been created but that just a

285
00:12:51,180 --> 00:12:54,240
belief that just a kind of a

286
00:12:54,240 --> 00:12:56,820
a kind of assumption on here Happening

287
00:12:56,820 --> 00:12:58,139
Here

288
00:12:58,139 --> 00:13:01,040
so next slide

289
00:13:01,680 --> 00:13:04,320
now now here we are in a stuck State

290
00:13:04,320 --> 00:13:06,839
basically because everybody is in a

291
00:13:06,839 --> 00:13:08,519
limbo a situation where nobody

292
00:13:08,519 --> 00:13:12,240
understands what's going on here the uh

293
00:13:12,240 --> 00:13:15,959
the integrator is waiting for the Os Os

294
00:13:15,959 --> 00:13:18,480
producer to say something about it to

295
00:13:18,480 --> 00:13:20,459
make a statement to say that yes there

296
00:13:20,459 --> 00:13:22,800
is a problem or not he wants to get an

297
00:13:22,800 --> 00:13:25,139
acknowledgment the OS binary producer is

298
00:13:25,139 --> 00:13:27,420
still investigating looking at it and

299
00:13:27,420 --> 00:13:28,920
there is no coherent way of

300
00:13:28,920 --> 00:13:30,600
understanding and shared communication

301
00:13:30,600 --> 00:13:32,240
between them

302
00:13:32,240 --> 00:13:34,560
this is

303
00:13:34,560 --> 00:13:37,380
next time so the deadlock continues

304
00:13:37,380 --> 00:13:40,019
basically what is happening here is that

305
00:13:40,019 --> 00:13:42,600
the operating system is operating system

306
00:13:42,600 --> 00:13:44,820
software producer is trying to show that

307
00:13:44,820 --> 00:13:46,620
it did all the steps correctly so you're

308
00:13:46,620 --> 00:13:48,720
just saying that look I'm willing to

309
00:13:48,720 --> 00:13:50,940
share you the system details how I have

310
00:13:50,940 --> 00:13:53,040
built this software the build enrollment

311
00:13:53,040 --> 00:13:55,019
the architecture I'm willing to show you

312
00:13:55,019 --> 00:13:58,079
everything but he's he's just stating

313
00:13:58,079 --> 00:13:59,940
that or he's just showing maybe maybe

314
00:13:59,940 --> 00:14:01,740
six months when the problem happened and

315
00:14:01,740 --> 00:14:03,600
the time between when he produced the

316
00:14:03,600 --> 00:14:06,959
binary and the time when he's uh showing

317
00:14:06,959 --> 00:14:09,180
it is six months apart and there is he's

318
00:14:09,180 --> 00:14:10,800
just showing it there's no verifiable

319
00:14:10,800 --> 00:14:13,560
proof that what he's showing is exactly

320
00:14:13,560 --> 00:14:15,360
mapping to the binary which he has given

321
00:14:15,360 --> 00:14:17,459
because there is there there is no

322
00:14:17,459 --> 00:14:20,160
verifiability in the system

323
00:14:20,160 --> 00:14:22,560
and and who knows the operating system

324
00:14:22,560 --> 00:14:24,180
software producer thinks that it's the

325
00:14:24,180 --> 00:14:26,339
device integrator who is blaming me

326
00:14:26,339 --> 00:14:28,320
unnecessarily though it may be

327
00:14:28,320 --> 00:14:30,300
integrates integration problem in one of

328
00:14:30,300 --> 00:14:32,579
his software so that here there we are

329
00:14:32,579 --> 00:14:35,100
just kind of doing a trust and a blame

330
00:14:35,100 --> 00:14:37,079
game we are in a stuck situation where

331
00:14:37,079 --> 00:14:39,000
each one of them is just trying to play

332
00:14:39,000 --> 00:14:41,940
and leave the blame to others and this

333
00:14:41,940 --> 00:14:44,699
is this struck situation can have no

334
00:14:44,699 --> 00:14:46,740
clear resolution unless we have a

335
00:14:46,740 --> 00:14:48,540
standard means to conclude based on

336
00:14:48,540 --> 00:14:51,019
verification where you can

337
00:14:51,019 --> 00:14:54,300
verify what is happening

338
00:14:54,300 --> 00:14:56,579
is a problem you can identify the

339
00:14:56,579 --> 00:14:58,139
problem and everybody in the ecosystem

340
00:14:58,139 --> 00:15:01,260
can clearly identify it in a transparent

341
00:15:01,260 --> 00:15:04,860
Manner and we can held accountability on

342
00:15:04,860 --> 00:15:07,260
somebody's shoulders for stress where

343
00:15:07,260 --> 00:15:10,579
exactly the problem lies

344
00:15:11,399 --> 00:15:14,339
so going further these are the problems

345
00:15:14,339 --> 00:15:16,680
we think the customers also faces when

346
00:15:16,680 --> 00:15:18,360
he and the end user

347
00:15:18,360 --> 00:15:20,760
uses the

348
00:15:20,760 --> 00:15:23,040
the end user uses the software as well

349
00:15:23,040 --> 00:15:24,720
as the uh the distributor who

350
00:15:24,720 --> 00:15:27,480
distributes the software

351
00:15:27,480 --> 00:15:29,519
receives that software then it doesn't

352
00:15:29,519 --> 00:15:31,800
have any means to assess the risks or

353
00:15:31,800 --> 00:15:33,959
vulnerabilities in the binaries we

354
00:15:33,959 --> 00:15:35,040
distribute

355
00:15:35,040 --> 00:15:37,019
the system integrator has no means to

356
00:15:37,019 --> 00:15:39,000
assess the vulnerabilities

357
00:15:39,000 --> 00:15:41,279
as well as the OS binary producers

358
00:15:41,279 --> 00:15:44,339
doesn't have the same ecosystem in place

359
00:15:44,339 --> 00:15:47,220
there where they can see what software

360
00:15:47,220 --> 00:15:49,019
is produced what vulnerabilities they

361
00:15:49,019 --> 00:15:50,399
exist and when suddenly the software

362
00:15:50,399 --> 00:15:53,220
changes how what has changed what

363
00:15:53,220 --> 00:15:54,839
vulnerabilities have been fixed and

364
00:15:54,839 --> 00:15:56,880
there's no standard mechanisms to track

365
00:15:56,880 --> 00:15:58,320
this information

366
00:15:58,320 --> 00:16:01,199
next slide please

367
00:16:01,199 --> 00:16:03,480
so we identified this problem and that's

368
00:16:03,480 --> 00:16:05,519
why we along with our colleagues in the

369
00:16:05,519 --> 00:16:08,399
community decided to form this excellent

370
00:16:08,399 --> 00:16:10,980
working group which is short formed or

371
00:16:10,980 --> 00:16:13,320
acronym desk kit supply chain Integrity

372
00:16:13,320 --> 00:16:15,839
transparency and Trust basically we are

373
00:16:15,839 --> 00:16:19,320
trying our efforts are towards defining

374
00:16:19,320 --> 00:16:22,500
set of specifications which precisely

375
00:16:22,500 --> 00:16:24,000
deal with the problem which I have

376
00:16:24,000 --> 00:16:25,500
presented you just now

377
00:16:25,500 --> 00:16:27,600
to introduce transparency in the

378
00:16:27,600 --> 00:16:29,100
ecosystem where

379
00:16:29,100 --> 00:16:32,160
an individual can look how the software

380
00:16:32,160 --> 00:16:34,260
was built he can precisely download the

381
00:16:34,260 --> 00:16:36,839
stuff from in a transparent Manner and

382
00:16:36,839 --> 00:16:39,300
verifies next slide please

383
00:16:39,300 --> 00:16:42,540
so this is just um the details about the

384
00:16:42,540 --> 00:16:44,880
working group which defines compact

385
00:16:44,880 --> 00:16:47,759
Integrity protected protocols supporting

386
00:16:47,759 --> 00:16:50,279
interoper activity between multiple

387
00:16:50,279 --> 00:16:52,920
Supply chains is focused on software

388
00:16:52,920 --> 00:16:55,560
supply chain use cases specifically but

389
00:16:55,560 --> 00:16:58,019
it's very much in our Focus to include

390
00:16:58,019 --> 00:17:00,060
software package repositories container

391
00:17:00,060 --> 00:17:01,680
Registries services

392
00:17:01,680 --> 00:17:05,160
and in the ecosystem we're trying to we

393
00:17:05,160 --> 00:17:06,660
would attempt to build a system which

394
00:17:06,660 --> 00:17:08,640
can deal with other use cases also but

395
00:17:08,640 --> 00:17:10,619
right now our focus is primarily on

396
00:17:10,619 --> 00:17:12,959
software supply chain and we work

397
00:17:12,959 --> 00:17:15,599
closely with an already existing

398
00:17:15,599 --> 00:17:18,660
ITF standard groups like cozy

399
00:17:18,660 --> 00:17:22,799
rats cheap and suit as well and we we

400
00:17:22,799 --> 00:17:25,740
learn from them and we interoperate and

401
00:17:25,740 --> 00:17:28,079
hopefully we uh we build a greater

402
00:17:28,079 --> 00:17:31,140
ecosystem with along with them so thank

403
00:17:31,140 --> 00:17:34,020
you everyone I think that is the problem

404
00:17:34,020 --> 00:17:36,720
now I would introduce my colleague Anton

405
00:17:36,720 --> 00:17:39,660
who would explain you the architecture

406
00:17:39,660 --> 00:17:43,580
of State ecosystem thank you so much

407
00:17:49,980 --> 00:17:53,160
thank you yogesh so no I'm going to

408
00:17:53,160 --> 00:17:55,740
present the current status of the

409
00:17:55,740 --> 00:17:58,020
architecture draft that we have produced

410
00:17:58,020 --> 00:18:00,480
so first on behalf of all the author of

411
00:18:00,480 --> 00:18:01,799
the architecture I would like to thank

412
00:18:01,799 --> 00:18:04,500
everyone who commented on the mailing

413
00:18:04,500 --> 00:18:07,520
list of submitted pull requests on the

414
00:18:07,520 --> 00:18:10,500
GitHub for the architecture next slide

415
00:18:10,500 --> 00:18:12,299
please

416
00:18:12,299 --> 00:18:14,700
so I'm going to start with the overview

417
00:18:14,700 --> 00:18:17,520
of the core concept of skit

418
00:18:17,520 --> 00:18:20,000
and for the people who are there at

419
00:18:20,000 --> 00:18:23,100
itf114 you may notice that we have

420
00:18:23,100 --> 00:18:25,620
slightly updated some of the terminology

421
00:18:25,620 --> 00:18:28,140
but there is still quite a bit of

422
00:18:28,140 --> 00:18:30,539
controversy on some of the terms that we

423
00:18:30,539 --> 00:18:33,780
use to describe the concept of skit so

424
00:18:33,780 --> 00:18:36,480
there is still possibly some challenges

425
00:18:36,480 --> 00:18:39,419
coming and don't hesitate to make your

426
00:18:39,419 --> 00:18:42,059
position known on the many list

427
00:18:42,059 --> 00:18:45,179
so uh starting from the left side of the

428
00:18:45,179 --> 00:18:47,400
picture we have the verifier so the

429
00:18:47,400 --> 00:18:49,919
verifier is the person that is consuming

430
00:18:49,919 --> 00:18:53,220
the software artifacts and everything

431
00:18:53,220 --> 00:18:55,620
that we do in skits is for the benefits

432
00:18:55,620 --> 00:18:58,200
of the verifier so every day people

433
00:18:58,200 --> 00:19:00,360
that's new software and they want to

434
00:19:00,360 --> 00:19:01,400
know

435
00:19:01,400 --> 00:19:04,020
what's uh what's a bad things could

436
00:19:04,020 --> 00:19:07,080
happen if they use uh software or help

437
00:19:07,080 --> 00:19:09,900
them decide whether some software is

438
00:19:09,900 --> 00:19:11,160
trustworthy

439
00:19:11,160 --> 00:19:13,500
so the other important concept at the

440
00:19:13,500 --> 00:19:15,720
top is the concept of the artifact

441
00:19:15,720 --> 00:19:19,799
itself so this could be of course a very

442
00:19:19,799 --> 00:19:22,640
wide variety of things

443
00:19:22,640 --> 00:19:25,740
by Design we are very abstract in the

444
00:19:25,740 --> 00:19:27,600
architecture about what the artifact is

445
00:19:27,600 --> 00:19:30,299
it could be a binary package it could be

446
00:19:30,299 --> 00:19:32,880
a container image it could be escaped

447
00:19:32,880 --> 00:19:36,900
could be a git tag really anything

448
00:19:36,900 --> 00:19:38,460
we only

449
00:19:38,460 --> 00:19:42,059
um so uh the other important points is

450
00:19:42,059 --> 00:19:44,539
that uh we want to provide information

451
00:19:44,539 --> 00:19:47,460
to the verifier about the artifact

452
00:19:47,460 --> 00:19:49,860
and uh one of the observation is that

453
00:19:49,860 --> 00:19:52,380
the information about the artifact can

454
00:19:52,380 --> 00:19:54,059
be coming from many different kind of

455
00:19:54,059 --> 00:19:56,460
sources Heights so it's not necessarily

456
00:19:56,460 --> 00:19:58,919
only the author of The artifact or the

457
00:19:58,919 --> 00:20:00,840
owner or the producer of the artifacts

458
00:20:00,840 --> 00:20:03,240
that can provide useful or meaningful

459
00:20:03,240 --> 00:20:06,299
information to the verifier about its

460
00:20:06,299 --> 00:20:08,460
trustworthiness and that's why we

461
00:20:08,460 --> 00:20:10,200
introduce on the right side the concept

462
00:20:10,200 --> 00:20:13,980
of issuer so the issuer it's any entity

463
00:20:13,980 --> 00:20:16,380
that can provide meaningful information

464
00:20:16,380 --> 00:20:20,400
about the artifacts that you use so it

465
00:20:20,400 --> 00:20:22,260
could be not only just the author of the

466
00:20:22,260 --> 00:20:24,480
Gods it can be the distributor of the

467
00:20:24,480 --> 00:20:26,700
code it can be even automated systems

468
00:20:26,700 --> 00:20:28,860
like Ci system build system that

469
00:20:28,860 --> 00:20:31,140
provides build reports this is very

470
00:20:31,140 --> 00:20:33,900
meaningful information that you can use

471
00:20:33,900 --> 00:20:36,960
to determine or audit the artifact that

472
00:20:36,960 --> 00:20:38,220
you are consuming

473
00:20:38,220 --> 00:20:41,480
so in general we call the information

474
00:20:41,480 --> 00:20:45,120
about the artifacts the statements and

475
00:20:45,120 --> 00:20:47,700
the definition we have of statements in

476
00:20:47,700 --> 00:20:49,799
the architecture is extremely Broad

477
00:20:49,799 --> 00:20:52,220
it's essentially any serializable

478
00:20:52,220 --> 00:20:56,520
information about the artifacts and what

479
00:20:56,520 --> 00:20:58,740
we require execute is that we want to

480
00:20:58,740 --> 00:21:01,200
hold issuers accountable for the

481
00:21:01,200 --> 00:21:03,539
statements that they make so we are

482
00:21:03,539 --> 00:21:06,600
going to require all issuers to sign the

483
00:21:06,600 --> 00:21:09,059
statement they make and we are going to

484
00:21:09,059 --> 00:21:12,120
standardize the formats that they use to

485
00:21:12,120 --> 00:21:14,280
sign this information and this is what

486
00:21:14,280 --> 00:21:16,860
we call a claim so that's the info the

487
00:21:16,860 --> 00:21:20,039
the claim It's The Sign information from

488
00:21:20,039 --> 00:21:22,500
the issuer and we are going to explain a

489
00:21:22,500 --> 00:21:24,419
bit later this climate Insurance process

490
00:21:24,419 --> 00:21:26,100
in the next slide

491
00:21:26,100 --> 00:21:28,440
the other critical concept and that's

492
00:21:28,440 --> 00:21:30,240
kind of the stronghold concept of skits

493
00:21:30,240 --> 00:21:33,720
is the idea of the registry and this is

494
00:21:33,720 --> 00:21:35,520
where the terminology is still a little

495
00:21:35,520 --> 00:21:37,860
bit controversial so initially this was

496
00:21:37,860 --> 00:21:39,659
called the transparency service or The

497
00:21:39,659 --> 00:21:43,380
Ledger Service uh now we use the

498
00:21:43,380 --> 00:21:46,080
registration or the transparent registry

499
00:21:46,080 --> 00:21:47,460
or the notary

500
00:21:47,460 --> 00:21:50,580
so if you prefer any of these terms

501
00:21:50,580 --> 00:21:52,740
um it's uh there is still a little bit

502
00:21:52,740 --> 00:21:56,760
of uh the children being made about what

503
00:21:56,760 --> 00:21:59,159
is the right way but the concepts of the

504
00:21:59,159 --> 00:22:02,400
of the notary it's an authority that is

505
00:22:02,400 --> 00:22:05,159
partially trusted so the verifier is

506
00:22:05,159 --> 00:22:08,159
going to rely on the notary service or

507
00:22:08,159 --> 00:22:10,440
the transparency service to figure out

508
00:22:10,440 --> 00:22:12,840
information and to make sure that this

509
00:22:12,840 --> 00:22:15,240
information is globally consistent for

510
00:22:15,240 --> 00:22:17,340
all verifiers which is going to give us

511
00:22:17,340 --> 00:22:19,799
some of the security guarantees that we

512
00:22:19,799 --> 00:22:21,720
provide with kit

513
00:22:21,720 --> 00:22:24,900
um and the the role of the of the notary

514
00:22:24,900 --> 00:22:26,900
or the registry is that it's going to

515
00:22:26,900 --> 00:22:31,140
take claims from insurers and it's going

516
00:22:31,140 --> 00:22:33,720
to verify their signature and is going

517
00:22:33,720 --> 00:22:36,059
to register them inside the registry

518
00:22:36,059 --> 00:22:37,640
which is this

519
00:22:37,640 --> 00:22:40,500
evidence that a structure that you can

520
00:22:40,500 --> 00:22:43,080
use to make sure that everyone has a

521
00:22:43,080 --> 00:22:45,000
consistent view of the claims that have

522
00:22:45,000 --> 00:22:47,820
been made by the issuers and the the

523
00:22:47,820 --> 00:22:50,280
second thing is that we require them to

524
00:22:50,280 --> 00:22:55,320
produce a standardized evidence which is

525
00:22:55,320 --> 00:22:58,080
called receipts and the receipt is going

526
00:22:58,080 --> 00:23:01,140
to be able to prove to any verifier that

527
00:23:01,140 --> 00:23:02,940
a particular claim has been registered

528
00:23:02,940 --> 00:23:05,940
on this register registry service or the

529
00:23:05,940 --> 00:23:09,480
transparency service next slide please

530
00:23:09,480 --> 00:23:13,220
um Dave there was a question

531
00:23:14,039 --> 00:23:16,740
yeah Dave Taylor's terminology question

532
00:23:16,740 --> 00:23:18,600
or comment

533
00:23:18,600 --> 00:23:20,940
um comparing this to like the rats

534
00:23:20,940 --> 00:23:24,000
architecture uh and I'm looking at um

535
00:23:24,000 --> 00:23:24,900
and so I was listening to your

536
00:23:24,900 --> 00:23:26,460
description of the registry and rotary

537
00:23:26,460 --> 00:23:28,679
service where it says that verifies

538
00:23:28,679 --> 00:23:31,080
information from issuers or the entity

539
00:23:31,080 --> 00:23:33,240
on the left is the verifier and it

540
00:23:33,240 --> 00:23:34,559
doesn't use the word verify on the left

541
00:23:34,559 --> 00:23:35,520
side so there's a little bit of

542
00:23:35,520 --> 00:23:36,780
terminology confusion that says the

543
00:23:36,780 --> 00:23:39,240
energy that verifies isn't the verifier

544
00:23:39,240 --> 00:23:40,620
um yes and you mentioned the little

545
00:23:40,620 --> 00:23:42,000
scroll piece there you called that

546
00:23:42,000 --> 00:23:43,380
evidence okay which in the rats

547
00:23:43,380 --> 00:23:45,840
terminology means something uh in which

548
00:23:45,840 --> 00:23:47,280
case the verifier on the left really is

549
00:23:47,280 --> 00:23:49,020
a verifier in the same sense as rats is

550
00:23:49,020 --> 00:23:51,240
and the other one isn't really doing

551
00:23:51,240 --> 00:23:52,980
verify and so just ask if you would

552
00:23:52,980 --> 00:23:54,240
elaborate on

553
00:23:54,240 --> 00:23:55,980
Hank if you actually agree that the one

554
00:23:55,980 --> 00:23:57,299
on the left is a verifier in the same

555
00:23:57,299 --> 00:23:59,039
sentence as uh rats and if this is

556
00:23:59,039 --> 00:24:01,740
evidence and if so then say more about

557
00:24:01,740 --> 00:24:03,360
what the registry does to verify because

558
00:24:03,360 --> 00:24:04,620
the verifier is the one that actually

559
00:24:04,620 --> 00:24:06,960
does the appraisal yes so I think to

560
00:24:06,960 --> 00:24:08,400
summarize your points

561
00:24:08,400 --> 00:24:10,200
what you're saying is that the verifier

562
00:24:10,200 --> 00:24:13,320
verifies the transparent claim of the

563
00:24:13,320 --> 00:24:16,260
receipt not the claim itself so it's a

564
00:24:16,260 --> 00:24:17,600
bit of an abuse

565
00:24:17,600 --> 00:24:21,600
in something that is a fair point uh I

566
00:24:21,600 --> 00:24:23,940
will as I will explain later the

567
00:24:23,940 --> 00:24:27,179
the claim can also be verified by the

568
00:24:27,179 --> 00:24:30,720
verifier it's a kind of advanced form of

569
00:24:30,720 --> 00:24:31,700
verification

570
00:24:31,700 --> 00:24:36,179
but yes I I do understand that the

571
00:24:36,179 --> 00:24:37,799
client terminology is a little bit

572
00:24:37,799 --> 00:24:40,679
problematic and of course has everything

573
00:24:40,679 --> 00:24:42,419
in the architecture it's still a early

574
00:24:42,419 --> 00:24:44,460
draft so it is possibly subject to

575
00:24:44,460 --> 00:24:48,600
change yeah so I guess that I'll let uh

576
00:24:48,600 --> 00:24:51,600
in case Hank has anything but um the it

577
00:24:51,600 --> 00:24:54,659
would be useful to draw comparisons in

578
00:24:54,659 --> 00:24:56,820
text to the rats architecture right one

579
00:24:56,820 --> 00:24:59,159
way to do it is to say the registry is

580
00:24:59,159 --> 00:25:02,700
like a rats verifier and the verifier is

581
00:25:02,700 --> 00:25:05,220
like a relying party yes another way to

582
00:25:05,220 --> 00:25:07,440
do it is to say that the registry is

583
00:25:07,440 --> 00:25:09,679
just a store and forward caching service

584
00:25:09,679 --> 00:25:12,120
maybe it checks signatures but it

585
00:25:12,120 --> 00:25:13,440
doesn't look at the claims or whatever

586
00:25:13,440 --> 00:25:15,120
and the verifier here is the verifier

587
00:25:15,120 --> 00:25:17,039
right both of those are potentially

588
00:25:17,039 --> 00:25:19,020
valid architectures and I don't know if

589
00:25:19,020 --> 00:25:20,700
you mean one or the other or agnostic

590
00:25:20,700 --> 00:25:22,260
that both are okay right and so that's

591
00:25:22,260 --> 00:25:25,200
kind of my questions in the terminology

592
00:25:25,200 --> 00:25:28,380
yeah okay basically they've said it all

593
00:25:28,380 --> 00:25:32,640
I think yeah so um so yes if the uh

594
00:25:32,640 --> 00:25:35,279
verifier looks into the claim so and

595
00:25:35,279 --> 00:25:37,320
into the actual statement that is signed

596
00:25:37,320 --> 00:25:40,200
by the issuer then it becomes more like

597
00:25:40,200 --> 00:25:42,419
a verifier on rats because it has to

598
00:25:42,419 --> 00:25:44,460
have reference values and policies about

599
00:25:44,460 --> 00:25:48,000
the content if it is just adjust yeah

600
00:25:48,000 --> 00:25:49,679
and that is that the Simplicity we

601
00:25:49,679 --> 00:25:52,080
provide here with transparency if it's

602
00:25:52,080 --> 00:25:53,640
verifying the transparent claim it

603
00:25:53,640 --> 00:25:55,860
becomes a signature Checker in the end

604
00:25:55,860 --> 00:25:58,020
because it is not necessarily required

605
00:25:58,020 --> 00:25:59,520
to look at any statements and to

606
00:25:59,520 --> 00:26:01,799
understand them so that's first of all

607
00:26:01,799 --> 00:26:04,080
nice uh but then also we understand the

608
00:26:04,080 --> 00:26:06,000
claim is used now for the third time in

609
00:26:06,000 --> 00:26:09,480
a different way and so I I understand we

610
00:26:09,480 --> 00:26:11,880
understand that and and making a mapping

611
00:26:11,880 --> 00:26:14,220
like that will also maybe probably make

612
00:26:14,220 --> 00:26:16,919
us converts a a place to look at how to

613
00:26:16,919 --> 00:26:19,380
improve it in the end

614
00:26:19,380 --> 00:26:20,760
uh

615
00:26:20,760 --> 00:26:24,059
I just wanted to add with what um Hank

616
00:26:24,059 --> 00:26:26,880
has mentioned yes there is a little

617
00:26:26,880 --> 00:26:28,799
overlap with the terminologies between

618
00:26:28,799 --> 00:26:30,179
skit

619
00:26:30,179 --> 00:26:33,240
and rats but I think they can coexist

620
00:26:33,240 --> 00:26:35,940
with clear definition boundaries what an

621
00:26:35,940 --> 00:26:38,760
interpretation means in skit may or may

622
00:26:38,760 --> 00:26:40,620
not have the same interpretation in the

623
00:26:40,620 --> 00:26:42,480
advanced world

624
00:26:42,480 --> 00:26:44,460
yes and I think hopefully the next

625
00:26:44,460 --> 00:26:46,080
slides will explain a little bit more

626
00:26:46,080 --> 00:26:49,140
but we still have one person in the

627
00:26:49,140 --> 00:26:51,600
queue um Dan

628
00:26:51,600 --> 00:26:53,700
are you okay good

629
00:26:53,700 --> 00:26:56,279
um if you go to the microphone please uh

630
00:26:56,279 --> 00:26:58,740
use the tool scan the QR code and and

631
00:26:58,740 --> 00:27:00,059
put yourself in the queue remote

632
00:27:00,059 --> 00:27:01,860
participant thing can also see your name

633
00:27:01,860 --> 00:27:03,659
that's kind of benefit

634
00:27:03,659 --> 00:27:06,600
uh thank you uh dendro the atnt

635
00:27:06,600 --> 00:27:09,140
um I I like the architecture I'm just

636
00:27:09,140 --> 00:27:13,200
questioning the need for this forked uh

637
00:27:13,200 --> 00:27:16,200
you know verification process is it is

638
00:27:16,200 --> 00:27:18,720
it absolutely necessary to have a notary

639
00:27:18,720 --> 00:27:22,799
uh service registry where in reality you

640
00:27:22,799 --> 00:27:25,679
can actually pass inbound with the

641
00:27:25,679 --> 00:27:28,559
artifact the verification and then the

642
00:27:28,559 --> 00:27:31,380
second part is basically also about you

643
00:27:31,380 --> 00:27:33,120
know the issuer and maybe this is a

644
00:27:33,120 --> 00:27:34,620
bigger problem for Supply chains I'll

645
00:27:34,620 --> 00:27:37,679
use the the log4j example you can have

646
00:27:37,679 --> 00:27:40,919
five issuers in a one supply chain uh

647
00:27:40,919 --> 00:27:44,220
you know flow that will issue a log for

648
00:27:44,220 --> 00:27:45,179
Jake

649
00:27:45,179 --> 00:27:47,279
um you know being part of their

650
00:27:47,279 --> 00:27:49,799
um their components who do you trust who

651
00:27:49,799 --> 00:27:52,200
how do you reconciliate in the end that

652
00:27:52,200 --> 00:27:54,900
is exactly the same one how do we

653
00:27:54,900 --> 00:27:57,960
address that thank you okay yes you need

654
00:27:57,960 --> 00:27:59,760
to ask yourself if you want to respond I

655
00:27:59,760 --> 00:28:01,140
will start with the first part of the

656
00:28:01,140 --> 00:28:02,760
question so the first part of the

657
00:28:02,760 --> 00:28:05,340
question is uh yeah what is kind of the

658
00:28:05,340 --> 00:28:07,919
role of the of the registry and can we

659
00:28:07,919 --> 00:28:10,440
just pass the claim directly from the

660
00:28:10,440 --> 00:28:13,320
issuer to the verifier so the reason

661
00:28:13,320 --> 00:28:16,799
that we introduced the notary is to give

662
00:28:16,799 --> 00:28:18,360
a stronger guarantee to the verifier

663
00:28:18,360 --> 00:28:20,640
that's uh essentially the whole point of

664
00:28:20,640 --> 00:28:23,220
skit and that's to make sure that any

665
00:28:23,220 --> 00:28:25,380
claim that is accepted by the verifier

666
00:28:25,380 --> 00:28:27,840
the issuer can be made accountable for

667
00:28:27,840 --> 00:28:31,500
and I will give some examples of the

668
00:28:31,500 --> 00:28:33,720
attacks that are prevented by using the

669
00:28:33,720 --> 00:28:38,600
notary uh in the in the future slides

670
00:28:38,880 --> 00:28:41,279
um this is saying just small editing um

671
00:28:41,279 --> 00:28:43,559
there's also of course the benefit of a

672
00:28:43,559 --> 00:28:44,760
uh

673
00:28:44,760 --> 00:28:45,900
um

674
00:28:45,900 --> 00:28:47,760
the point of Singularity provides

675
00:28:47,760 --> 00:28:50,039
Simplicity to a scalability and and

676
00:28:50,039 --> 00:28:52,140
things that might have no idea what the

677
00:28:52,140 --> 00:28:54,900
statement actually means so putting

678
00:28:54,900 --> 00:28:57,419
trust into this fog

679
00:28:57,419 --> 00:29:00,179
enables like billions of devices to just

680
00:29:00,179 --> 00:29:02,159
forward it to the policy engine for

681
00:29:02,159 --> 00:29:03,779
example they have nothing to know about

682
00:29:03,779 --> 00:29:06,600
it which isn't possible if you can't put

683
00:29:06,600 --> 00:29:10,440
this trust into the uh middleman yeah so

684
00:29:10,440 --> 00:29:12,539
so it is a for scalability and also for

685
00:29:12,539 --> 00:29:15,240
offline validation and I think that's a

686
00:29:15,240 --> 00:29:16,440
two or critical features for the

687
00:29:16,440 --> 00:29:19,400
audibility in the end

688
00:29:20,760 --> 00:29:22,320
thank you

689
00:29:22,320 --> 00:29:24,960
hi everybody this is Elliot

690
00:29:24,960 --> 00:29:26,399
um so I think there's another

691
00:29:26,399 --> 00:29:30,600
possibility there Dan which is I submit

692
00:29:30,600 --> 00:29:34,440
a claim to the registry and I get back a

693
00:29:34,440 --> 00:29:36,620
response and then I query the registry

694
00:29:36,620 --> 00:29:39,899
for the verification

695
00:29:39,899 --> 00:29:42,779
as the as the claim as the claimant and

696
00:29:42,779 --> 00:29:45,120
then I just incorporate that in my

697
00:29:45,120 --> 00:29:46,500
packaging

698
00:29:46,500 --> 00:29:49,799
and that way and that way you don't have

699
00:29:49,799 --> 00:29:51,840
the you don't have to go online if you

700
00:29:51,840 --> 00:29:53,580
don't want to but you can if you want to

701
00:29:53,580 --> 00:29:55,020
what's important

702
00:29:55,020 --> 00:29:57,899
is that first of all the trust anchors

703
00:29:57,899 --> 00:30:01,260
be in place so that the trust is is

704
00:30:01,260 --> 00:30:04,260
possible and second uh as part of that

705
00:30:04,260 --> 00:30:07,200
there should be enough information in

706
00:30:07,200 --> 00:30:09,720
the verification to say here's how you

707
00:30:09,720 --> 00:30:11,340
can do this yourself in terms of

708
00:30:11,340 --> 00:30:13,440
contacting me from the registering

709
00:30:13,440 --> 00:30:15,659
artery so make sure that in the response

710
00:30:15,659 --> 00:30:18,539
yes there is a an identif an identifier

711
00:30:18,539 --> 00:30:21,120
a URL or a URI or something like that

712
00:30:21,120 --> 00:30:23,520
yeah so I suggest you know it's uh of

713
00:30:23,520 --> 00:30:25,919
course uh very advantageous feature of

714
00:30:25,919 --> 00:30:29,279
the fact that you can attach the receipt

715
00:30:29,279 --> 00:30:31,679
produced by the notary to your artifact

716
00:30:31,679 --> 00:30:33,720
or to the software so that you don't

717
00:30:33,720 --> 00:30:35,700
need to do any online track and that's

718
00:30:35,700 --> 00:30:39,779
uh as also Hank said a way to have to

719
00:30:39,779 --> 00:30:43,200
avoid the for the verifier to understand

720
00:30:43,200 --> 00:30:46,559
all of the issuers of the artifact that

721
00:30:46,559 --> 00:30:48,299
they consume and it's very difficult to

722
00:30:48,299 --> 00:30:50,460
decide whether they trust them using the

723
00:30:50,460 --> 00:30:53,880
semi-trusted cell party of the notary

724
00:30:53,880 --> 00:30:56,940
let them verify everything offline and

725
00:30:56,940 --> 00:31:00,179
let them apply very simple decision or

726
00:31:00,179 --> 00:31:03,299
policy as a verifier

727
00:31:03,299 --> 00:31:06,659
hi this is Brendan Morin and just to

728
00:31:06,659 --> 00:31:08,940
provide a Counterpoint to the uh deliver

729
00:31:08,940 --> 00:31:12,240
the claims with the artifact side of

730
00:31:12,240 --> 00:31:14,039
things I noticed that firmware was one

731
00:31:14,039 --> 00:31:15,539
of your use cases and if you're

732
00:31:15,539 --> 00:31:17,279
delivering artifacts to constrained

733
00:31:17,279 --> 00:31:19,380
nodes you probably don't want to deliver

734
00:31:19,380 --> 00:31:22,620
all of the claims with them that would

735
00:31:22,620 --> 00:31:25,200
actually be a terrible idea so the uh

736
00:31:25,200 --> 00:31:27,659
the the point there is that that means

737
00:31:27,659 --> 00:31:30,659
that you need somewhere to store those

738
00:31:30,659 --> 00:31:34,980
claims or you just lose them and this

739
00:31:34,980 --> 00:31:38,600
gives you a standardized way to do that

740
00:31:42,120 --> 00:31:45,139
sounds good

741
00:31:48,539 --> 00:31:52,020
I'm looking at the line I'm not my uh

742
00:31:52,020 --> 00:31:55,460
where's my okay

743
00:31:55,559 --> 00:31:57,480
sorry I didn't see the ACT come up uh

744
00:31:57,480 --> 00:31:59,880
Michael perock here so uh yeah I did it

745
00:31:59,880 --> 00:32:02,640
I think another key aspect about kind of

746
00:32:02,640 --> 00:32:04,620
having an independent notary of some

747
00:32:04,620 --> 00:32:06,179
kind is the intersection of time

748
00:32:06,179 --> 00:32:09,539
especially post event right so if you

749
00:32:09,539 --> 00:32:11,159
had software deployed with some

750
00:32:11,159 --> 00:32:13,440
particular package that had a

751
00:32:13,440 --> 00:32:15,779
vulnerability unknown at the time later

752
00:32:15,779 --> 00:32:17,700
on that vulnerability is fixed possibly

753
00:32:17,700 --> 00:32:19,620
even inadvertently right you don't

754
00:32:19,620 --> 00:32:21,720
realize this being able to go back and

755
00:32:21,720 --> 00:32:23,340
backtrack after an incident to

756
00:32:23,340 --> 00:32:25,799
understand why when and exactly where

757
00:32:25,799 --> 00:32:28,200
that vulnerability existed and having

758
00:32:28,200 --> 00:32:30,419
that record of time and when did this

759
00:32:30,419 --> 00:32:33,120
exactly happen who witnessed it did were

760
00:32:33,120 --> 00:32:35,279
there multiple attestations about this

761
00:32:35,279 --> 00:32:37,559
particular item right uh you know say a

762
00:32:37,559 --> 00:32:40,020
third party verification Etc all in one

763
00:32:40,020 --> 00:32:41,520
place so I think that notion of

764
00:32:41,520 --> 00:32:44,279
intersection of time especially in post

765
00:32:44,279 --> 00:32:46,440
event is absolutely critical when going

766
00:32:46,440 --> 00:32:50,659
through and analyzing uh an issue

767
00:32:50,940 --> 00:32:53,159
yeah Eric not much I was gonna ask

768
00:32:53,159 --> 00:32:55,620
things around the same thing right sort

769
00:32:55,620 --> 00:32:57,659
of a registry notary you could just

770
00:32:57,659 --> 00:33:00,659
record here's a set of you know claims

771
00:33:00,659 --> 00:33:02,700
and I'm gonna store them I'm they're not

772
00:33:02,700 --> 00:33:04,020
going to disappear they're sort of

773
00:33:04,020 --> 00:33:06,840
handling non-repudiation right but you

774
00:33:06,840 --> 00:33:08,460
could also say well don't you want to

775
00:33:08,460 --> 00:33:09,840
keep track of what's the most recent

776
00:33:09,840 --> 00:33:11,760
version of that software

777
00:33:11,760 --> 00:33:13,860
yeah but normally you need to have a

778
00:33:13,860 --> 00:33:15,360
naming scheme so they can actually do

779
00:33:15,360 --> 00:33:17,100
that and then the question comes out do

780
00:33:17,100 --> 00:33:18,480
you also want to have reference to the

781
00:33:18,480 --> 00:33:20,279
CVS that were in that old version right

782
00:33:20,279 --> 00:33:22,260
so what's the actual scope of this

783
00:33:22,260 --> 00:33:24,059
because it could actually balloon into

784
00:33:24,059 --> 00:33:26,460
something very big right as opposed to

785
00:33:26,460 --> 00:33:29,220
just being a trusted repository and no

786
00:33:29,220 --> 00:33:32,240
semantics is

787
00:33:33,740 --> 00:33:38,700
uh we expect that uh some notaries so

788
00:33:38,700 --> 00:33:40,260
first of all there isn't going to be any

789
00:33:40,260 --> 00:33:42,480
synchronized notary for everyone so

790
00:33:42,480 --> 00:33:44,940
every company or every organization can

791
00:33:44,940 --> 00:33:47,399
operate the whole notaries and some of

792
00:33:47,399 --> 00:33:49,380
them as you said are going to be very

793
00:33:49,380 --> 00:33:51,539
sophisticated so for instance they can

794
00:33:51,539 --> 00:33:54,360
indeed on for advanced policies to make

795
00:33:54,360 --> 00:33:57,000
sure that verify your only consumed the

796
00:33:57,000 --> 00:34:00,120
most up-to-date version and this is a

797
00:34:00,120 --> 00:34:02,880
something that's uh I think is in scope

798
00:34:02,880 --> 00:34:05,580
for some of the notaries but of course

799
00:34:05,580 --> 00:34:06,840
they are also going to be very very

800
00:34:06,840 --> 00:34:09,719
simple notaries that simply regards on

801
00:34:09,719 --> 00:34:12,619
the on the registry and provide this

802
00:34:12,619 --> 00:34:14,540
evidence

803
00:34:14,540 --> 00:34:17,000
persistence storage of all of the claims

804
00:34:17,000 --> 00:34:19,199
and that is of course much cheaper to

805
00:34:19,199 --> 00:34:22,500
operate so so in summary we expect that

806
00:34:22,500 --> 00:34:24,540
there will be many levels of complexity

807
00:34:24,540 --> 00:34:27,359
on the instances of notary that are

808
00:34:27,359 --> 00:34:29,099
created in the white

809
00:34:29,099 --> 00:34:31,739
uh okay weapon from Huawei I have two

810
00:34:31,739 --> 00:34:35,280
questions first uh I'd like to know what

811
00:34:35,280 --> 00:34:39,060
uh to what degree the uh the issue uh

812
00:34:39,060 --> 00:34:42,000
will be for example uh for for example

813
00:34:42,000 --> 00:34:45,179
Microsoft will deliver the OS operating

814
00:34:45,179 --> 00:34:46,620
system and

815
00:34:46,620 --> 00:34:48,060
[Music]

816
00:34:48,060 --> 00:34:52,440
um and well Microsoft exposed um for for

817
00:34:52,440 --> 00:34:56,879
example which which employee developed

818
00:34:56,879 --> 00:35:00,780
which code to the notary service

819
00:35:00,780 --> 00:35:04,339
or some kind of that and second is about

820
00:35:04,339 --> 00:35:08,160
here the notary service will verify the

821
00:35:08,160 --> 00:35:10,980
information from issuers and the verify

822
00:35:10,980 --> 00:35:13,680
will also do some verification I I want

823
00:35:13,680 --> 00:35:15,660
to know the difference between these two

824
00:35:15,660 --> 00:35:18,540
verifications okay so uh first otherwise

825
00:35:18,540 --> 00:35:19,859
the first question so the first question

826
00:35:19,859 --> 00:35:22,140
is uh I think actually I understand it

827
00:35:22,140 --> 00:35:24,780
as a privacy question right so for

828
00:35:24,780 --> 00:35:27,420
instance if you have an s-bomb that is

829
00:35:27,420 --> 00:35:29,460
for instance let's say your git history

830
00:35:29,460 --> 00:35:31,560
it's a very useful information but some

831
00:35:31,560 --> 00:35:35,160
of its maybe privacy sensitive right so

832
00:35:35,160 --> 00:35:37,020
yes if you have for instance the

833
00:35:37,020 --> 00:35:39,300
Microsoft Windows s-bomb it will have

834
00:35:39,300 --> 00:35:42,420
the name of every Microsoft developer

835
00:35:42,420 --> 00:35:45,599
that contributed good right and in some

836
00:35:45,599 --> 00:35:47,700
cases the question is should this

837
00:35:47,700 --> 00:35:50,339
information be released to everyone or

838
00:35:50,339 --> 00:35:52,800
not right and

839
00:35:52,800 --> 00:35:53,400
um

840
00:35:53,400 --> 00:35:55,099
in general

841
00:35:55,099 --> 00:35:58,320
this is essentially your choice of the

842
00:35:58,320 --> 00:36:02,940
notary so if you want to uh

843
00:36:02,940 --> 00:36:04,680
only partially reveal some of this

844
00:36:04,680 --> 00:36:05,780
information

845
00:36:05,780 --> 00:36:08,460
you have essentially control over what

846
00:36:08,460 --> 00:36:10,320
other claims in the registry that can be

847
00:36:10,320 --> 00:36:11,880
publicly accessed or you can introduce

848
00:36:11,880 --> 00:36:14,700
some Access Control to the rgc if you

849
00:36:14,700 --> 00:36:16,859
want to mitigate some of these concerns

850
00:36:16,859 --> 00:36:18,420
and as for the second question the

851
00:36:18,420 --> 00:36:20,400
question is the difference between the

852
00:36:20,400 --> 00:36:22,380
check applied at the notary versus the

853
00:36:22,380 --> 00:36:24,000
checks applied at the verifier so this

854
00:36:24,000 --> 00:36:25,560
is explained in the next three slides so

855
00:36:25,560 --> 00:36:27,000
please bear with me I will explain it

856
00:36:27,000 --> 00:36:30,320
okay thank you very much

857
00:36:31,440 --> 00:36:33,720
we had

858
00:36:33,720 --> 00:36:36,119
okay the other person dropped out of the

859
00:36:36,119 --> 00:36:39,780
queue but uh let's keep on going yep

860
00:36:39,780 --> 00:36:42,680
peace thank you

861
00:36:42,900 --> 00:36:45,000
so yes so as I said in the previous

862
00:36:45,000 --> 00:36:47,520
slide there are three important flaws of

863
00:36:47,520 --> 00:36:50,760
uh processes in skits so the first one

864
00:36:50,760 --> 00:36:53,520
is claim issuance the second one is uh

865
00:36:53,520 --> 00:36:55,680
validation of claims at the notary and

866
00:36:55,680 --> 00:36:56,520
the third one is verification

867
00:36:56,520 --> 00:36:58,560
verification of receipts at the verifier

868
00:36:58,560 --> 00:37:00,480
so I'm going to start with the first one

869
00:37:00,480 --> 00:37:04,920
how do you actually issue a claim so um

870
00:37:04,920 --> 00:37:07,920
it's it has some so as I said previously

871
00:37:07,920 --> 00:37:12,119
the claim contains a statement and uh

872
00:37:12,119 --> 00:37:14,820
skits doesn't really uh assume anything

873
00:37:14,820 --> 00:37:17,760
about the format of your statements you

874
00:37:17,760 --> 00:37:19,380
just needs to be able to serialize it

875
00:37:19,380 --> 00:37:22,020
into some kind of byte string

876
00:37:22,020 --> 00:37:24,800
and it could use all kind of

877
00:37:24,800 --> 00:37:28,320
standardized or defined formats for for

878
00:37:28,320 --> 00:37:31,500
carrying s-bomb for instance so there

879
00:37:31,500 --> 00:37:33,420
are many many formats and the goal of

880
00:37:33,420 --> 00:37:35,460
skit is to support all of them

881
00:37:35,460 --> 00:37:37,320
the second piece which is also

882
00:37:37,320 --> 00:37:39,180
interesting and a little bit

883
00:37:39,180 --> 00:37:40,980
controversial is how are you going to

884
00:37:40,980 --> 00:37:43,200
represent the identity of the issuer

885
00:37:43,200 --> 00:37:45,599
right and this is where we have to make

886
00:37:45,599 --> 00:37:48,000
a technical choice for interoperability

887
00:37:48,000 --> 00:37:49,980
and uh one of the things that is

888
00:37:49,980 --> 00:37:52,980
specific to skits is this ID that the

889
00:37:52,980 --> 00:37:54,960
evidence that is produced by issuer we

890
00:37:54,960 --> 00:37:57,859
want it to be long-term rights

891
00:37:57,859 --> 00:38:00,480
which means that you want to be able to

892
00:38:00,480 --> 00:38:03,839
go back in time and verify all dividends

893
00:38:03,839 --> 00:38:07,260
and one of the important requirement

894
00:38:07,260 --> 00:38:10,380
that we identify is separation between

895
00:38:10,380 --> 00:38:12,839
the long-term identity of the issuer and

896
00:38:12,839 --> 00:38:14,579
the short-term credential that the issue

897
00:38:14,579 --> 00:38:16,920
are used to sign the statement

898
00:38:16,920 --> 00:38:19,680
and that's why we currently decided to

899
00:38:19,680 --> 00:38:22,680
use uh distributed identity as the

900
00:38:22,680 --> 00:38:24,540
framework to represent the issue

901
00:38:24,540 --> 00:38:26,880
identity and our expectation is that

902
00:38:26,880 --> 00:38:28,920
because of the flexibility of did in

903
00:38:28,920 --> 00:38:31,200
terms of defining new methods this

904
00:38:31,200 --> 00:38:34,200
should be compatible with all kinds of

905
00:38:34,200 --> 00:38:37,140
identity systems including for instance

906
00:38:37,140 --> 00:38:40,880
pki based Onyx 509 certificates or

907
00:38:40,880 --> 00:38:44,480
identity system based on open educonate

908
00:38:44,480 --> 00:38:46,920
any kind of protocol you should be able

909
00:38:46,920 --> 00:38:50,220
to Define dag methods to represent the

910
00:38:50,220 --> 00:38:55,260
identity of a of an issuer using the ID

911
00:38:55,260 --> 00:38:57,320
and you should be able to

912
00:38:57,320 --> 00:39:00,720
associate verification Keys using the

913
00:39:00,720 --> 00:39:02,880
did resolution mechanism which

914
00:39:02,880 --> 00:39:06,420
transforms this stable identifier into

915
00:39:06,420 --> 00:39:10,560
sets of credentials essentially selling

916
00:39:10,560 --> 00:39:11,940
keys

917
00:39:11,940 --> 00:39:14,220
so the last point is

918
00:39:14,220 --> 00:39:17,000
um that there are some standard sets of

919
00:39:17,000 --> 00:39:20,040
informational headers that must be part

920
00:39:20,040 --> 00:39:22,680
of the skids envelope

921
00:39:22,680 --> 00:39:25,500
and so when you want to produce a claim

922
00:39:25,500 --> 00:39:28,440
you need to combine your serialized

923
00:39:28,440 --> 00:39:31,380
statements with this envelope

924
00:39:31,380 --> 00:39:34,079
information and currently in the current

925
00:39:34,079 --> 00:39:36,720
architecture we use the following

926
00:39:36,720 --> 00:39:38,640
mandatory

927
00:39:38,640 --> 00:39:42,420
field and so the most important one is

928
00:39:42,420 --> 00:39:44,820
the issuer so as I said the issuer must

929
00:39:44,820 --> 00:39:48,200
be in the current architecture did

930
00:39:48,200 --> 00:39:49,980
identifier

931
00:39:49,980 --> 00:39:51,960
that represents the long-term identity

932
00:39:51,960 --> 00:39:54,599
of the issuer then you have the

933
00:39:54,599 --> 00:39:56,820
information about the artifact so for

934
00:39:56,820 --> 00:39:58,740
any claim you want to know what

935
00:39:58,740 --> 00:40:01,760
artifacts does this claim refer to right

936
00:40:01,760 --> 00:40:05,400
and that information is encoded in the

937
00:40:05,400 --> 00:40:07,320
feed header

938
00:40:07,320 --> 00:40:09,900
and that you also have the content type

939
00:40:09,900 --> 00:40:12,780
which tells you what format you use to

940
00:40:12,780 --> 00:40:15,540
represent your statements so if it's uh

941
00:40:15,540 --> 00:40:18,060
for instance spdx s-bomb then you need

942
00:40:18,060 --> 00:40:20,220
to put that in the content type

943
00:40:20,220 --> 00:40:22,380
uh you also have two additional things

944
00:40:22,380 --> 00:40:24,720
so kid is a mechanism to select the

945
00:40:24,720 --> 00:40:27,720
right key from the reserved did

946
00:40:27,720 --> 00:40:30,599
documents so you can have a you can

947
00:40:30,599 --> 00:40:32,160
change your certificates but keep your

948
00:40:32,160 --> 00:40:34,859
same the ID and the kid will tell you

949
00:40:34,859 --> 00:40:38,040
which uh which certificate to use to

950
00:40:38,040 --> 00:40:40,020
verify that particular signature

951
00:40:40,020 --> 00:40:43,200
and registration info is used to uh will

952
00:40:43,200 --> 00:40:46,140
be explained in a later slide

953
00:40:46,140 --> 00:40:48,839
next slide

954
00:40:48,839 --> 00:40:51,420
so then uh moving on to the registration

955
00:40:51,420 --> 00:40:53,760
of the claim so this is the the process

956
00:40:53,760 --> 00:40:58,020
that is uh done at the notary when you

957
00:40:58,020 --> 00:41:01,500
want to register a claim on the registry

958
00:41:01,500 --> 00:41:02,700
service

959
00:41:02,700 --> 00:41:04,500
so

960
00:41:04,500 --> 00:41:07,560
um so first of all the

961
00:41:07,560 --> 00:41:09,780
uh the person that actually submits the

962
00:41:09,780 --> 00:41:12,420
claim does not necessarily have to be

963
00:41:12,420 --> 00:41:14,339
the issuer himself it could be some

964
00:41:14,339 --> 00:41:16,980
other party and the reason for that is

965
00:41:16,980 --> 00:41:19,260
because uh sometimes you want to take a

966
00:41:19,260 --> 00:41:21,180
claim that has been produced by someone

967
00:41:21,180 --> 00:41:23,280
and you want to import it into your own

968
00:41:23,280 --> 00:41:26,160
skit instance right so in that sense we

969
00:41:26,160 --> 00:41:29,099
separate the notion of being someone

970
00:41:29,099 --> 00:41:30,780
registered the claim and being someone

971
00:41:30,780 --> 00:41:32,579
who hides the claim

972
00:41:32,579 --> 00:41:36,180
and so someone think is that we only

973
00:41:36,180 --> 00:41:38,760
require explicitly in the architecture

974
00:41:38,760 --> 00:41:41,700
that the claim must be authenticated

975
00:41:41,700 --> 00:41:45,180
which means that's the notary needs to

976
00:41:45,180 --> 00:41:49,200
resolve the ID of the issuer and verify

977
00:41:49,200 --> 00:41:51,839
the signature using the key indicated by

978
00:41:51,839 --> 00:41:54,900
the key ID in the claim so that is the

979
00:41:54,900 --> 00:41:58,079
parts that all notaries must perform and

980
00:41:58,079 --> 00:42:01,680
that guarantees to the verifier that if

981
00:42:01,680 --> 00:42:03,960
they trust enough the notaries and they

982
00:42:03,960 --> 00:42:07,140
won't have to do this did resolution and

983
00:42:07,140 --> 00:42:10,260
the signature verification themselves

984
00:42:10,260 --> 00:42:13,800
um and the second thing is that the

985
00:42:13,800 --> 00:42:17,099
the notary may also apply all kind of

986
00:42:17,099 --> 00:42:19,380
access control for her authorization

987
00:42:19,380 --> 00:42:22,079
procedures for deciding whether the

988
00:42:22,079 --> 00:42:24,420
claim can be registered or not and

989
00:42:24,420 --> 00:42:27,720
that's it's not really the uh trusted

990
00:42:27,720 --> 00:42:31,619
part of the decision is that you have to

991
00:42:31,619 --> 00:42:34,079
decide for instance as a notary uh worth

992
00:42:34,079 --> 00:42:36,660
the issuers that you trust or what's the

993
00:42:36,660 --> 00:42:38,760
issue that you consider valid

994
00:42:38,760 --> 00:42:41,040
and as part of this process you are even

995
00:42:41,040 --> 00:42:44,160
possibly allowed to inspect the contents

996
00:42:44,160 --> 00:42:48,780
of the statement itself right so you can

997
00:42:48,780 --> 00:42:52,440
have a notary that looks at uh automated

998
00:42:52,440 --> 00:42:55,579
logs and for instance will apply some

999
00:42:55,579 --> 00:42:58,940
vulnerability detection or try to detect

1000
00:42:58,940 --> 00:43:01,500
if the respawn that has been submitted

1001
00:43:01,500 --> 00:43:03,599
contains vulnerable information and if

1002
00:43:03,599 --> 00:43:06,000
it does it will rejects the registration

1003
00:43:06,000 --> 00:43:09,119
and all of that the the notary has full

1004
00:43:09,119 --> 00:43:11,520
freedom of applying any check that they

1005
00:43:11,520 --> 00:43:14,220
want the only thing that is required in

1006
00:43:14,220 --> 00:43:18,300
the architecture is that the notary Mass

1007
00:43:18,300 --> 00:43:21,359
return if the claim is accepted uh a

1008
00:43:21,359 --> 00:43:23,819
skit receipts which is as I said the

1009
00:43:23,819 --> 00:43:27,180
proof that uh it's offline verifiable

1010
00:43:27,180 --> 00:43:28,980
proof that the statement has been

1011
00:43:28,980 --> 00:43:32,359
registered in the registry

1012
00:43:34,500 --> 00:43:36,839
okay so the last flow is the

1013
00:43:36,839 --> 00:43:39,300
verification that happens at the

1014
00:43:39,300 --> 00:43:41,040
verifier right

1015
00:43:41,040 --> 00:43:43,920
and uh there is a little bit of subtlety

1016
00:43:43,920 --> 00:43:46,680
uh there that is introduced because not

1017
00:43:46,680 --> 00:43:48,540
all the verifiers are the same so there

1018
00:43:48,540 --> 00:43:50,660
are different levels of sophistication

1019
00:43:50,660 --> 00:43:53,819
between the verifiers so I'm going to

1020
00:43:53,819 --> 00:43:56,339
start with the simplest type of verifier

1021
00:43:56,339 --> 00:43:58,740
and that's verifier that mostly we trust

1022
00:43:58,740 --> 00:44:01,740
the notary and the idea is that we want

1023
00:44:01,740 --> 00:44:05,160
to have the easiest time for the for

1024
00:44:05,160 --> 00:44:06,780
this type of verifiers it should be very

1025
00:44:06,780 --> 00:44:08,099
easy right so you should be able to

1026
00:44:08,099 --> 00:44:11,339
validate registration completely offline

1027
00:44:11,339 --> 00:44:13,680
and using minimum information without

1028
00:44:13,680 --> 00:44:15,720
having to even look at the statements

1029
00:44:15,720 --> 00:44:18,780
inside the claim right and uh so for

1030
00:44:18,780 --> 00:44:21,720
that you are just going to use the

1031
00:44:21,720 --> 00:44:23,760
receipt validation procedure that is

1032
00:44:23,760 --> 00:44:25,680
defined in the receipts pack and make

1033
00:44:25,680 --> 00:44:27,119
we'll talk about that in the next

1034
00:44:27,119 --> 00:44:28,200
session

1035
00:44:28,200 --> 00:44:31,140
but of course uh you have some verifier

1036
00:44:31,140 --> 00:44:33,420
that don't fully trust the notary right

1037
00:44:33,420 --> 00:44:34,859
and

1038
00:44:34,859 --> 00:44:38,520
um in that case they can repeat if they

1039
00:44:38,520 --> 00:44:40,859
want to some of the checks that were

1040
00:44:40,859 --> 00:44:45,119
applied at the notary but uh so this

1041
00:44:45,119 --> 00:44:47,460
type of advanced verifier we call them

1042
00:44:47,460 --> 00:44:50,640
Auditors and the purpose of the Auditors

1043
00:44:50,640 --> 00:44:52,440
is to have effectively keep the notary

1044
00:44:52,440 --> 00:44:54,960
honest right so if nobody cares about

1045
00:44:54,960 --> 00:44:57,660
what the notary is doing then you don't

1046
00:44:57,660 --> 00:45:00,420
really get a very strong property for

1047
00:45:00,420 --> 00:45:03,240
the everyday verifier but if you have

1048
00:45:03,240 --> 00:45:06,300
some Auditors that actually verify that

1049
00:45:06,300 --> 00:45:08,760
the notary is checking the issue or

1050
00:45:08,760 --> 00:45:10,680
signature properly and it's applying its

1051
00:45:10,680 --> 00:45:13,140
registration policy properly then that

1052
00:45:13,140 --> 00:45:17,578
essentially keeps the notary honest

1053
00:45:17,640 --> 00:45:20,760
uh so there is also uh yes I think we

1054
00:45:20,760 --> 00:45:22,619
covered in the question most of the

1055
00:45:22,619 --> 00:45:24,599
points

1056
00:45:24,599 --> 00:45:25,500
um

1057
00:45:25,500 --> 00:45:27,839
but there is one question

1058
00:45:27,839 --> 00:45:29,940
yes

1059
00:45:29,940 --> 00:45:33,440
I think there is someone in the queue

1060
00:45:35,760 --> 00:45:38,819
so just a quick clarifying question

1061
00:45:38,819 --> 00:45:42,000
um is the notary or is the auditor

1062
00:45:42,000 --> 00:45:46,020
replaying the whole Ledger or just

1063
00:45:46,020 --> 00:45:49,319
relevant to some particular application

1064
00:45:49,319 --> 00:45:51,300
um what what exactly is the auditor

1065
00:45:51,300 --> 00:45:54,079
auditing uh-huh yes uh so

1066
00:45:54,079 --> 00:45:57,540
uh so it's up to the auditor to decide

1067
00:45:57,540 --> 00:45:59,880
so it's possible to audit the full

1068
00:45:59,880 --> 00:46:02,099
Ledger of course the text can take a lot

1069
00:46:02,099 --> 00:46:05,640
of time but you can also uh partially

1070
00:46:05,640 --> 00:46:07,079
audit in the sense that you can for

1071
00:46:07,079 --> 00:46:09,060
instance select an issuer and only

1072
00:46:09,060 --> 00:46:10,800
replace the registration under the claim

1073
00:46:10,800 --> 00:46:13,880
for that particular issue or

1074
00:46:14,760 --> 00:46:16,560
any kind of

1075
00:46:16,560 --> 00:46:19,500
subset right so so I think part of the

1076
00:46:19,500 --> 00:46:20,819
point that is

1077
00:46:20,819 --> 00:46:23,280
maybe not answering your question is how

1078
00:46:23,280 --> 00:46:24,900
do you as an auditor how do you query

1079
00:46:24,900 --> 00:46:27,780
The Ledger and currently we have decided

1080
00:46:27,780 --> 00:46:30,440
we are not really

1081
00:46:30,440 --> 00:46:34,020
specifying what is a standard API for

1082
00:46:34,020 --> 00:46:37,020
auditing or accessing the registry and

1083
00:46:37,020 --> 00:46:39,839
that is definitely one of the open items

1084
00:46:39,839 --> 00:46:42,359
for the working group to work on whether

1085
00:46:42,359 --> 00:46:43,140
we

1086
00:46:43,140 --> 00:46:46,200
so what kind of queries uh what kind of

1087
00:46:46,200 --> 00:46:48,300
apis can be used to actually audit The

1088
00:46:48,300 --> 00:46:50,220
Ledger that is still an open question so

1089
00:46:50,220 --> 00:46:52,680
and it's an after-the-fact audit or does

1090
00:46:52,680 --> 00:46:54,240
this happen in real time no no it's

1091
00:46:54,240 --> 00:46:55,680
after all the facts okay everything is

1092
00:46:55,680 --> 00:46:58,260
after the fact

1093
00:46:58,260 --> 00:46:59,280
okay

1094
00:46:59,280 --> 00:47:01,560
um or a steel just to restate the answer

1095
00:47:01,560 --> 00:47:02,940
that was given there's sort of three

1096
00:47:02,940 --> 00:47:04,740
ways to think about the audit process

1097
00:47:04,740 --> 00:47:07,859
the simplest case is your auditing a

1098
00:47:07,859 --> 00:47:10,800
specific transparent claim like one the

1099
00:47:10,800 --> 00:47:12,960
more advanced cases all transparent

1100
00:47:12,960 --> 00:47:15,839
claims made by partic associated with a

1101
00:47:15,839 --> 00:47:18,240
particular issuer and the third is the

1102
00:47:18,240 --> 00:47:20,819
entire transparency registry which it

1103
00:47:20,819 --> 00:47:22,319
you know would be very expensive that's

1104
00:47:22,319 --> 00:47:24,560
it

1105
00:47:28,920 --> 00:47:32,339
okay so no the going back to what we

1106
00:47:32,339 --> 00:47:35,220
discussed earlier about the the what is

1107
00:47:35,220 --> 00:47:36,660
the guarantee that we give to the

1108
00:47:36,660 --> 00:47:39,660
verifier right because ultimately

1109
00:47:39,660 --> 00:47:41,819
uh there is all of this machinery for

1110
00:47:41,819 --> 00:47:43,980
the issuers to operate the register the

1111
00:47:43,980 --> 00:47:46,740
notaries so all of that it only makes

1112
00:47:46,740 --> 00:47:49,200
sense if there is some benefits

1113
00:47:49,200 --> 00:47:52,380
for the for the for the verifiers and so

1114
00:47:52,380 --> 00:47:55,020
the the main benefits of heat is to

1115
00:47:55,020 --> 00:47:57,180
guarantee the accountability of issuers

1116
00:47:57,180 --> 00:48:00,200
so we want to be able to prevent uh

1117
00:48:00,200 --> 00:48:02,760
equivalating issuers which would be a

1118
00:48:02,760 --> 00:48:05,180
class of issuer that give different

1119
00:48:05,180 --> 00:48:07,500
claims about the same artifact to

1120
00:48:07,500 --> 00:48:12,119
different people and that's uh uh kind

1121
00:48:12,119 --> 00:48:14,400
of a way to distribute

1122
00:48:14,400 --> 00:48:16,800
um bad code there is also this idea of

1123
00:48:16,800 --> 00:48:18,119
accountability of the notaries

1124
00:48:18,119 --> 00:48:19,800
themselves so we don't want to Blind it

1125
00:48:19,800 --> 00:48:21,359
also notaries and that's why the

1126
00:48:21,359 --> 00:48:23,819
registry is there to keep all of the

1127
00:48:23,819 --> 00:48:26,460
evidence to allow an audit after the

1128
00:48:26,460 --> 00:48:29,760
facts uh of what registration and policy

1129
00:48:29,760 --> 00:48:31,380
and what tracks were performed at the

1130
00:48:31,380 --> 00:48:35,339
registry right and this gives the both

1131
00:48:35,339 --> 00:48:37,680
the auditability of the claims and

1132
00:48:37,680 --> 00:48:39,060
auditability of the registration

1133
00:48:39,060 --> 00:48:41,280
policies that were applied by the

1134
00:48:41,280 --> 00:48:43,380
notaries

1135
00:48:43,380 --> 00:48:45,660
question

1136
00:48:45,660 --> 00:48:48,780
yeah thank you Deandra the 18t

1137
00:48:48,780 --> 00:48:50,819
um now that everybody convinced me that

1138
00:48:50,819 --> 00:48:53,460
Registries are good I just still have a

1139
00:48:53,460 --> 00:48:55,200
challenge with the architecture because

1140
00:48:55,200 --> 00:48:57,599
as far as I understand you look at the

1141
00:48:57,599 --> 00:48:59,160
architecture you got the issuers and

1142
00:48:59,160 --> 00:49:02,940
verifiers and that gets uh replicated so

1143
00:49:02,940 --> 00:49:05,520
a verifier can be an issue or maybe

1144
00:49:05,520 --> 00:49:07,920
using a different registry and at that

1145
00:49:07,920 --> 00:49:10,859
point I'm questioning how will the

1146
00:49:10,859 --> 00:49:13,980
Registries inter inter-registry trust

1147
00:49:13,980 --> 00:49:17,460
yes um and and and then how do you

1148
00:49:17,460 --> 00:49:20,160
really reconcile

1149
00:49:20,160 --> 00:49:21,780
um with this because as soon as you said

1150
00:49:21,780 --> 00:49:23,160
that everybody can have their own

1151
00:49:23,160 --> 00:49:26,180
registry I said oh my God now I hate

1152
00:49:26,180 --> 00:49:28,560
centralization but I hate message

1153
00:49:28,560 --> 00:49:31,680
distribution thank you yes

1154
00:49:31,680 --> 00:49:34,200
um obviously that that's uh that's an

1155
00:49:34,200 --> 00:49:36,240
important question and it's not an easy

1156
00:49:36,240 --> 00:49:38,339
one and we are uh we had a lot of

1157
00:49:38,339 --> 00:49:39,780
discussion about this during the

1158
00:49:39,780 --> 00:49:42,359
hackathon and uh this will be addressed

1159
00:49:42,359 --> 00:49:45,240
uh in some of uh hang slides in the

1160
00:49:45,240 --> 00:49:47,700
hackathon report

1161
00:49:47,700 --> 00:49:50,099
yeah I basically just came up to say

1162
00:49:50,099 --> 00:49:52,020
that there's a hackathon report where we

1163
00:49:52,020 --> 00:49:54,420
talked at length during the hackathon

1164
00:49:54,420 --> 00:49:56,780
specifically about this inter-ledger

1165
00:49:56,780 --> 00:49:59,280
scenarios and there's some good visuals

1166
00:49:59,280 --> 00:50:01,079
and uh Hank and I will be speaking to

1167
00:50:01,079 --> 00:50:02,900
that

1168
00:50:02,900 --> 00:50:04,980
Dave here I was just going to ask if you

1169
00:50:04,980 --> 00:50:07,200
can elaborate and just say more about

1170
00:50:07,200 --> 00:50:09,599
um how you detect incorrect questions

1171
00:50:09,599 --> 00:50:12,780
yes if you can just say more

1172
00:50:12,780 --> 00:50:14,760
so I do have some concrete example to

1173
00:50:14,760 --> 00:50:17,160
show you okay so so this is a concrete

1174
00:50:17,160 --> 00:50:20,760
example of uh an equivocating issuer

1175
00:50:20,760 --> 00:50:24,599
right so it's an issuer that uh is going

1176
00:50:24,599 --> 00:50:26,460
to um

1177
00:50:26,460 --> 00:50:29,400
uh to produce two versions of the of of

1178
00:50:29,400 --> 00:50:31,980
the software and one is going to be

1179
00:50:31,980 --> 00:50:34,800
using uh honest Scott and one is going

1180
00:50:34,800 --> 00:50:38,760
to have uh malware or virus or whatever

1181
00:50:38,760 --> 00:50:40,680
so in that case the issuer is a

1182
00:50:40,680 --> 00:50:43,440
malicious one and he wants uh to attack

1183
00:50:43,440 --> 00:50:45,839
some of the users and the idea is that

1184
00:50:45,839 --> 00:50:47,400
if you first

1185
00:50:47,400 --> 00:50:50,040
the so if every verifier is going to

1186
00:50:50,040 --> 00:50:52,859
require a receipt from the notary then

1187
00:50:52,859 --> 00:50:55,020
the only way that this would actually be

1188
00:50:55,020 --> 00:50:57,480
possible is if the issuer registers both

1189
00:50:57,480 --> 00:51:00,059
of these claims on the notary and then

1190
00:51:00,059 --> 00:51:02,160
two things could happen so either you

1191
00:51:02,160 --> 00:51:04,920
have a quite Advanced notary that is

1192
00:51:04,920 --> 00:51:08,160
going to actually look at the contents

1193
00:51:08,160 --> 00:51:12,500
of the claim and possibly detect that

1194
00:51:12,500 --> 00:51:16,020
the second claim is a bad one in that

1195
00:51:16,020 --> 00:51:18,300
case the second grade may even not get

1196
00:51:18,300 --> 00:51:19,800
registered at all

1197
00:51:19,800 --> 00:51:22,020
uh but that's kind of optimistic so

1198
00:51:22,020 --> 00:51:24,420
pessimistically let's assume that the

1199
00:51:24,420 --> 00:51:27,540
notary is relatively uh basic and the

1200
00:51:27,540 --> 00:51:29,880
boss claims actually get registered so

1201
00:51:29,880 --> 00:51:32,819
in that case you still have the registry

1202
00:51:32,819 --> 00:51:37,260
itself uh as uh uh essentially long-term

1203
00:51:37,260 --> 00:51:39,839
proof that can be used to detect by

1204
00:51:39,839 --> 00:51:42,420
auditor that the issuer was equivalating

1205
00:51:42,420 --> 00:51:44,760
and it can keep the issue accountable

1206
00:51:44,760 --> 00:51:47,880
because you have enough proof to blame

1207
00:51:47,880 --> 00:51:51,980
the issuer so the the non-reparation

1208
00:51:51,980 --> 00:51:54,240
arguments through the through the Ledger

1209
00:51:54,240 --> 00:51:55,980
I'll tell you that it was the issuer

1210
00:51:55,980 --> 00:52:00,140
that was manifested that's right

1211
00:52:00,240 --> 00:52:04,700
did that answer the question Dave

1212
00:52:06,660 --> 00:52:08,760
um I I think so let me tell you what I

1213
00:52:08,760 --> 00:52:10,559
got is the answer

1214
00:52:10,559 --> 00:52:13,220
um that your definition of correct

1215
00:52:13,220 --> 00:52:16,079
relies on the same answer being given to

1216
00:52:16,079 --> 00:52:18,059
everybody yes if you give the same wrong

1217
00:52:18,059 --> 00:52:19,980
answer to everybody it is not incorrect

1218
00:52:19,980 --> 00:52:21,599
that's cool that's right and so that's

1219
00:52:21,599 --> 00:52:23,160
the definition of incorrect is that it

1220
00:52:23,160 --> 00:52:24,540
has to be the same for everybody so it

1221
00:52:24,540 --> 00:52:26,460
doesn't mean that say you know Microsoft

1222
00:52:26,460 --> 00:52:28,920
couldn't publish something and say this

1223
00:52:28,920 --> 00:52:31,440
actually comes from Fubar or whatever so

1224
00:52:31,440 --> 00:52:32,940
you can do spoofing and stuff and I

1225
00:52:32,940 --> 00:52:34,319
understand you're actually solving that

1226
00:52:34,319 --> 00:52:37,079
by the signature checking and the trust

1227
00:52:37,079 --> 00:52:39,300
in the issuer rather than checking the

1228
00:52:39,300 --> 00:52:40,859
values of the claims though if it comes

1229
00:52:40,859 --> 00:52:42,960
from an issuer you trust you just assume

1230
00:52:42,960 --> 00:52:44,160
that they're actually not lying about

1231
00:52:44,160 --> 00:52:45,720
any of those things right so correct

1232
00:52:45,720 --> 00:52:47,640
just means it comes from an issue that

1233
00:52:47,640 --> 00:52:48,960
you trust and they're given the same

1234
00:52:48,960 --> 00:52:49,980
answer to everybody and that's the

1235
00:52:49,980 --> 00:52:51,119
answer to my question exactly that's not

1236
00:52:51,119 --> 00:52:53,280
exactly I think that would be important

1237
00:52:53,280 --> 00:52:55,500
to capture sort of in the architecture

1238
00:52:55,500 --> 00:52:58,020
document if it's not there already yeah

1239
00:52:58,020 --> 00:53:00,059
the other just because this is about the

1240
00:53:00,059 --> 00:53:01,800
fourth time I think the same form of

1241
00:53:01,800 --> 00:53:03,960
question has come up so if you refer

1242
00:53:03,960 --> 00:53:06,540
back to ori's Second statement

1243
00:53:06,540 --> 00:53:09,420
on what transparency offers the first

1244
00:53:09,420 --> 00:53:11,760
thing is yes we can see it but the

1245
00:53:11,760 --> 00:53:14,819
really important second thing is you

1246
00:53:14,819 --> 00:53:18,000
have to have registered your claims at a

1247
00:53:18,000 --> 00:53:20,040
verifiable point in the past in order

1248
00:53:20,040 --> 00:53:21,780
for them to be valid which means you

1249
00:53:21,780 --> 00:53:24,180
have to have all of your operations laid

1250
00:53:24,180 --> 00:53:26,280
open which means you can't selectively

1251
00:53:26,280 --> 00:53:29,579
lie cheat repudiate or whatever and and

1252
00:53:29,579 --> 00:53:33,780
it's a responsibility on the verifier to

1253
00:53:33,780 --> 00:53:35,940
not accept statements that are given

1254
00:53:35,940 --> 00:53:38,220
post facto out of band or whatever

1255
00:53:38,220 --> 00:53:39,599
because otherwise all of these other

1256
00:53:39,599 --> 00:53:41,099
Things Fall Apart so it is a whole

1257
00:53:41,099 --> 00:53:43,260
system responsibility

1258
00:53:43,260 --> 00:53:44,819
okay

1259
00:53:44,819 --> 00:53:48,800
Diego okay two a couple of things

1260
00:53:48,800 --> 00:53:51,119
regarding the roles of the notary the

1261
00:53:51,119 --> 00:53:54,180
issue you mentioned one thing that will

1262
00:53:54,180 --> 00:53:56,040
somehow concern me when you say that the

1263
00:53:56,040 --> 00:53:57,900
notary is a very simplistic one and

1264
00:53:57,900 --> 00:53:59,880
cannot verify that the malware is there

1265
00:53:59,880 --> 00:54:02,460
or not my understanding of the notary is

1266
00:54:02,460 --> 00:54:04,200
that this is a totally I mean the

1267
00:54:04,200 --> 00:54:05,819
operator of the transparent registry is

1268
00:54:05,819 --> 00:54:07,380
not going to make

1269
00:54:07,380 --> 00:54:10,079
another additional text because in that

1270
00:54:10,079 --> 00:54:12,839
in that case the notary would become an

1271
00:54:12,839 --> 00:54:15,119
issue it doesn't I mean you're not

1272
00:54:15,119 --> 00:54:17,700
against that that you have notaries with

1273
00:54:17,700 --> 00:54:20,760
issuers inside that make a additional

1274
00:54:20,760 --> 00:54:23,220
issues but my understanding is is that

1275
00:54:23,220 --> 00:54:25,319
the notorious yes I mean it puts an

1276
00:54:25,319 --> 00:54:27,319
envelope a sealed envelope around

1277
00:54:27,319 --> 00:54:31,200
wrapping the uh the uh decline

1278
00:54:31,200 --> 00:54:34,319
right or are we thinking about other

1279
00:54:34,319 --> 00:54:36,960
roles for the notary because that to

1280
00:54:36,960 --> 00:54:38,940
complicate the whole thing you know so

1281
00:54:38,940 --> 00:54:41,099
the notary role can be a little bit more

1282
00:54:41,099 --> 00:54:43,859
complicated I have also a slides on what

1283
00:54:43,859 --> 00:54:45,359
it means for the notary to perform

1284
00:54:45,359 --> 00:54:48,240
additional tracks but the semantics is

1285
00:54:48,240 --> 00:54:50,220
that accepting registration of a claim

1286
00:54:50,220 --> 00:54:52,260
is a far it's a form of endorsements

1287
00:54:52,260 --> 00:54:54,119
right they're not basically yes at

1288
00:54:54,119 --> 00:54:57,240
minimum we require that it means that

1289
00:54:57,240 --> 00:54:59,400
the notary must have checked the issuer

1290
00:54:59,400 --> 00:55:02,460
signature that's the Baseline uh but you

1291
00:55:02,460 --> 00:55:05,160
can you can also uh perform additional

1292
00:55:05,160 --> 00:55:07,920
checks for which the endorsements in the

1293
00:55:07,920 --> 00:55:10,980
receipts would be essentially a witness

1294
00:55:10,980 --> 00:55:14,579
that these checks have been performed on

1295
00:55:14,579 --> 00:55:16,920
that be an issue a role rather than this

1296
00:55:16,920 --> 00:55:19,619
is not an issue at all it's it's um it's

1297
00:55:19,619 --> 00:55:22,140
a again there's a difference is that

1298
00:55:22,140 --> 00:55:24,660
it's an endorsement you accept you

1299
00:55:24,660 --> 00:55:25,619
accept

1300
00:55:25,619 --> 00:55:28,020
a claim that was made by someone having

1301
00:55:28,020 --> 00:55:30,960
checked some additional property but it

1302
00:55:30,960 --> 00:55:33,180
doesn't mean that you are authoritative

1303
00:55:33,180 --> 00:55:35,160
for that particular information the

1304
00:55:35,160 --> 00:55:36,900
claim Remains the responsibility of the

1305
00:55:36,900 --> 00:55:38,880
issue and that that brings me to the

1306
00:55:38,880 --> 00:55:41,940
second is about I mean composure issues

1307
00:55:41,940 --> 00:55:44,940
because in the in all the examples the

1308
00:55:44,940 --> 00:55:46,800
issue is apparently the developer or the

1309
00:55:46,800 --> 00:55:50,160
vendor of the software but as an user I

1310
00:55:50,160 --> 00:55:53,339
could make want to make another issue to

1311
00:55:53,339 --> 00:55:55,200
issue another thing that say I tested it

1312
00:55:55,200 --> 00:55:57,300
and it was right yes and that's fine

1313
00:55:57,300 --> 00:56:00,119
right that's fine your Uncle Rich to do

1314
00:56:00,119 --> 00:56:03,180
that so as I said you can collect a

1315
00:56:03,180 --> 00:56:04,800
large number of claims for the same

1316
00:56:04,800 --> 00:56:06,680
artifacts

1317
00:56:06,680 --> 00:56:09,140
including yeah so

1318
00:56:09,140 --> 00:56:13,578
or compound used yes

1319
00:56:14,280 --> 00:56:16,500
uh okay so I'm going to skip over the

1320
00:56:16,500 --> 00:56:18,599
next slide because I think I'm a bit uh

1321
00:56:18,599 --> 00:56:21,260
running longer than I should be so yeah

1322
00:56:21,260 --> 00:56:24,359
running a little bit of out of time but

1323
00:56:24,359 --> 00:56:27,359
um I I've maybe we could shorten the

1324
00:56:27,359 --> 00:56:29,760
policy you want to shorten the policy

1325
00:56:29,760 --> 00:56:32,339
about this one uh so I was hoping to

1326
00:56:32,339 --> 00:56:34,680
just uh brief okay maybe we can go to

1327
00:56:34,680 --> 00:56:36,240
the last one which is how do we solve

1328
00:56:36,240 --> 00:56:38,520
the use case right it's a customer yeah

1329
00:56:38,520 --> 00:56:40,800
yeah okay so yes I think this one we

1330
00:56:40,800 --> 00:56:42,420
don't really want to serve because this

1331
00:56:42,420 --> 00:56:44,220
is supposed to connect everything I've

1332
00:56:44,220 --> 00:56:46,800
explained towards yogesh as explained

1333
00:56:46,800 --> 00:56:47,520
before

1334
00:56:47,520 --> 00:56:50,760
so uh it's basically a summary right so

1335
00:56:50,760 --> 00:56:53,099
um uh we want to be able to assess the

1336
00:56:53,099 --> 00:56:55,980
risk of social availabilities from the

1337
00:56:55,980 --> 00:56:58,980
artifact that we consume and we achieve

1338
00:56:58,980 --> 00:57:03,000
that uh by requiring at the verifier to

1339
00:57:03,000 --> 00:57:06,180
have this uh endorsements from notaries

1340
00:57:06,180 --> 00:57:08,460
or the purification of the receipts to

1341
00:57:08,460 --> 00:57:09,800
make sure that

1342
00:57:09,800 --> 00:57:12,720
everything can be audited later and

1343
00:57:12,720 --> 00:57:15,780
that's the issuer ends notaries are kept

1344
00:57:15,780 --> 00:57:19,319
auditable so the architecture supports

1345
00:57:19,319 --> 00:57:22,140
uniform methods for issuing statements

1346
00:57:22,140 --> 00:57:24,839
so that's the first row that we reviewed

1347
00:57:24,839 --> 00:57:26,339
the verification of the Integrity

1348
00:57:26,339 --> 00:57:29,220
authenticity and timeliness or freshness

1349
00:57:29,220 --> 00:57:32,040
of statement that's the role that is

1350
00:57:32,040 --> 00:57:34,319
mostly assigned to the notary and

1351
00:57:34,319 --> 00:57:36,599
creating consistent abundantly

1352
00:57:36,599 --> 00:57:38,640
verifiable recursive statements that's

1353
00:57:38,640 --> 00:57:41,240
the role of the skit receipts and that's

1354
00:57:41,240 --> 00:57:44,460
what drives the verifier flow

1355
00:57:44,460 --> 00:57:47,700
uh so user defined are the policy for

1356
00:57:47,700 --> 00:57:49,559
determining which statements are trusted

1357
00:57:49,559 --> 00:57:51,119
so unfortunately you are able to skip

1358
00:57:51,119 --> 00:57:53,339
over my policy slides because there are

1359
00:57:53,339 --> 00:57:55,140
three types of policies as a policy at

1360
00:57:55,140 --> 00:57:57,180
the issuer what statement do you endorse

1361
00:57:57,180 --> 00:57:59,099
do you sign there is a policy at the

1362
00:57:59,099 --> 00:58:01,440
notary what claims do you accept which

1363
00:58:01,440 --> 00:58:03,119
is a form of endorsement and then there

1364
00:58:03,119 --> 00:58:06,720
is a policy at the verifier is this

1365
00:58:06,720 --> 00:58:10,380
notary or what additional check should I

1366
00:58:10,380 --> 00:58:12,960
perform right so I hope that was a

1367
00:58:12,960 --> 00:58:15,180
useful overview of the architecture

1368
00:58:15,180 --> 00:58:16,819
everyone is welcome

1369
00:58:16,819 --> 00:58:20,599
it's available on the data tracker to

1370
00:58:20,599 --> 00:58:23,520
submit comments on the mailing list and

1371
00:58:23,520 --> 00:58:26,240
suggest improvements thank you

1372
00:58:26,240 --> 00:58:28,800
ah excellent

1373
00:58:28,800 --> 00:58:29,339
um

1374
00:58:29,339 --> 00:58:31,260
are there some further questions on this

1375
00:58:31,260 --> 00:58:33,359
uh

1376
00:58:33,359 --> 00:58:35,339
this topic so it's obviously a lot the

1377
00:58:35,339 --> 00:58:37,559
document contains terminology talks

1378
00:58:37,559 --> 00:58:40,740
about other things we spoke about just

1379
00:58:40,740 --> 00:58:42,839
now and and more because we skipped a

1380
00:58:42,839 --> 00:58:44,520
few things uh

1381
00:58:44,520 --> 00:58:48,780
and so it was our impression that um we

1382
00:58:48,780 --> 00:58:49,680
should

1383
00:58:49,680 --> 00:58:51,660
do a call for adoption on this

1384
00:58:51,660 --> 00:58:53,700
architecture document there's a kind of

1385
00:58:53,700 --> 00:58:55,079
a starting point so that we have

1386
00:58:55,079 --> 00:58:57,839
something to to work with

1387
00:58:57,839 --> 00:59:00,559
and I'm going to

1388
00:59:00,559 --> 00:59:03,359
of course we have to confirm that on a

1389
00:59:03,359 --> 00:59:05,040
mailing list but I wanted to do a show

1390
00:59:05,040 --> 00:59:07,200
of hands uh using our famous show

1391
00:59:07,200 --> 00:59:09,780
offense tool if I

1392
00:59:09,780 --> 00:59:12,420
um figure out how to formulate the

1393
00:59:12,420 --> 00:59:14,599
question

1394
00:59:14,640 --> 00:59:16,759
um

1395
00:59:19,440 --> 00:59:21,559
um

1396
00:59:43,079 --> 00:59:46,260
why do you support

1397
00:59:46,260 --> 00:59:48,920
people okay

1398
00:59:56,160 --> 00:59:58,020
okay

1399
00:59:58,020 --> 01:00:00,540
so in essence I'm asking in a

1400
01:00:00,540 --> 01:00:05,359
complicated way of whether you you agree

1401
01:00:06,059 --> 01:00:07,680
um or if you don't trace your hand

1402
01:00:07,680 --> 01:00:10,920
disagree with adopting this the

1403
01:00:10,920 --> 01:00:12,599
architecture document as a starting

1404
01:00:12,599 --> 01:00:13,859
point that I'm saying as a starting

1405
01:00:13,859 --> 01:00:16,799
point because like as we as Antoine

1406
01:00:16,799 --> 01:00:18,180
mentioned at the beginning of the talk

1407
01:00:18,180 --> 01:00:21,299
test the terminology is the rough edges

1408
01:00:21,299 --> 01:00:23,579
and of course uh

1409
01:00:23,579 --> 01:00:25,260
there was feedback during the meeting

1410
01:00:25,260 --> 01:00:28,020
which we we need we we need to capture

1411
01:00:28,020 --> 01:00:29,339
and I'm sure a lot of other things

1412
01:00:29,339 --> 01:00:31,819
missing

1413
01:00:33,180 --> 01:00:37,640
okay I'll run it for a few more seconds

1414
01:00:43,140 --> 01:00:45,960
okay uh

1415
01:00:45,960 --> 01:00:49,260
so here's what I have and I end the

1416
01:00:49,260 --> 01:00:50,940
session

1417
01:00:50,940 --> 01:00:55,440
oops uh it was 36 to 3 so um set this

1418
01:00:55,440 --> 01:00:57,660
for a meeting minute taker

1419
01:00:57,660 --> 01:01:01,020
um 33 36 people were in favor and three

1420
01:01:01,020 --> 01:01:02,940
were against them

1421
01:01:02,940 --> 01:01:04,980
um that's a pretty good response um

1422
01:01:04,980 --> 01:01:06,780
we'll do a confirmation on a mailing

1423
01:01:06,780 --> 01:01:10,380
list next week and uh yes see how that

1424
01:01:10,380 --> 01:01:13,220
goes and uh

1425
01:01:13,859 --> 01:01:15,960
that's what I wanted

1426
01:01:15,960 --> 01:01:17,880
to say okay thanks so I'm going to

1427
01:01:17,880 --> 01:01:22,220
another to make uh for the receipts

1428
01:01:31,079 --> 01:01:34,619
hello everyone Mike from Microsoft Mike

1429
01:01:34,619 --> 01:01:37,260
official okay next slide okay

1430
01:01:37,260 --> 01:01:38,880
we need to get close to the microphone

1431
01:01:38,880 --> 01:01:40,140
just eat it

1432
01:01:40,140 --> 01:01:43,799
is that close enough okay

1433
01:01:43,799 --> 01:01:45,599
all right

1434
01:01:45,599 --> 01:01:47,339
so we talked already a bit about

1435
01:01:47,339 --> 01:01:50,700
receipts and entrance presentation

1436
01:01:50,700 --> 01:01:53,099
so uh I'm going to summarize it just a

1437
01:01:53,099 --> 01:01:55,500
bit so what does this get receipt it's

1438
01:01:55,500 --> 01:01:57,240
basically a proof the proof that the

1439
01:01:57,240 --> 01:01:58,500
skid claim

1440
01:01:58,500 --> 01:02:01,200
has been successfully registered in a

1441
01:02:01,200 --> 01:02:03,240
transparency service and okay ignore

1442
01:02:03,240 --> 01:02:05,160
terminology we know registry you know do

1443
01:02:05,160 --> 01:02:07,020
all of that stuff I'm going to call it

1444
01:02:07,020 --> 01:02:08,579
transparency service in this

1445
01:02:08,579 --> 01:02:10,440
presentation

1446
01:02:10,440 --> 01:02:14,099
um registration means that you have your

1447
01:02:14,099 --> 01:02:17,220
registration policy is applied and

1448
01:02:17,220 --> 01:02:19,260
what that means what Antoine said

1449
01:02:19,260 --> 01:02:21,680
already uh you know you need to verify

1450
01:02:21,680 --> 01:02:24,960
the claim signature

1451
01:02:24,960 --> 01:02:26,460
and there can be other policies

1452
01:02:26,460 --> 01:02:28,200
obviously

1453
01:02:28,200 --> 01:02:30,599
then as part of registration you store

1454
01:02:30,599 --> 01:02:33,839
the claim in the registry so The Ledger

1455
01:02:33,839 --> 01:02:36,900
you produce eventually a receipt and

1456
01:02:36,900 --> 01:02:39,420
return that to the submitter

1457
01:02:39,420 --> 01:02:42,900
and obviously if we Define apis Etc then

1458
01:02:42,900 --> 01:02:45,059
there's always also a way to retrieve

1459
01:02:45,059 --> 01:02:47,280
the receipt not just by the submitter

1460
01:02:47,280 --> 01:02:48,900
but also

1461
01:02:48,900 --> 01:02:50,940
um you know at a later point in time I

1462
01:02:50,940 --> 01:02:52,859
think we'll probably do that

1463
01:02:52,859 --> 01:02:56,040
and yeah the important bit is that the

1464
01:02:56,040 --> 01:02:59,880
receipt you know it's it's an offline

1465
01:02:59,880 --> 01:03:03,960
um verification of the claim so

1466
01:03:03,960 --> 01:03:06,420
um we should probably qualify that what

1467
01:03:06,420 --> 01:03:08,040
that really means

1468
01:03:08,040 --> 01:03:08,700
um

1469
01:03:08,700 --> 01:03:11,339
but it it means all the points that

1470
01:03:11,339 --> 01:03:13,740
happened before has have happened

1471
01:03:13,740 --> 01:03:16,079
and you can by verifying the receipt you

1472
01:03:16,079 --> 01:03:16,920
can

1473
01:03:16,920 --> 01:03:20,280
um make sure if you trust the notary

1474
01:03:20,280 --> 01:03:20,940
um

1475
01:03:20,940 --> 01:03:23,940
that those things happened so

1476
01:03:23,940 --> 01:03:26,700
yeah it's quite simple it should be

1477
01:03:26,700 --> 01:03:29,700
simple I think that's that's the idea

1478
01:03:29,700 --> 01:03:32,660
next slide

1479
01:03:33,540 --> 01:03:34,619
okay

1480
01:03:34,619 --> 01:03:37,500
so now we get into a bit more

1481
01:03:37,500 --> 01:03:40,859
um of what and receipt actually is

1482
01:03:40,859 --> 01:03:43,460
and

1483
01:03:43,619 --> 01:03:45,540
if you think of in a transparency

1484
01:03:45,540 --> 01:03:47,280
service you can think of it a bit like

1485
01:03:47,280 --> 01:03:49,980
an electronic notary

1486
01:03:49,980 --> 01:03:52,740
so it does certification on the

1487
01:03:52,740 --> 01:03:56,460
authenticity odd authenticity sorry I'm

1488
01:03:56,460 --> 01:03:58,980
German salt for me

1489
01:03:58,980 --> 01:04:01,079
um of the claim signature so that's one

1490
01:04:01,079 --> 01:04:03,059
thing and then it also certifies any

1491
01:04:03,059 --> 01:04:06,240
additional registration policies uh

1492
01:04:06,240 --> 01:04:08,339
applying to the claim

1493
01:04:08,339 --> 01:04:12,059
and so if we look at it like that then

1494
01:04:12,059 --> 01:04:13,980
treating it like a counter signature on

1495
01:04:13,980 --> 01:04:15,780
a technical level

1496
01:04:15,780 --> 01:04:18,299
also you know peeking a bit into you

1497
01:04:18,299 --> 01:04:20,400
know cozy counter signatures or any

1498
01:04:20,400 --> 01:04:23,940
other counter signatures like in CMS Etc

1499
01:04:23,940 --> 01:04:26,640
um then it means you have this nice

1500
01:04:26,640 --> 01:04:29,460
property that you can embed receipts in

1501
01:04:29,460 --> 01:04:33,420
the the unprotected part of your claim

1502
01:04:33,420 --> 01:04:35,579
and so you have this nice bundle and you

1503
01:04:35,579 --> 01:04:36,900
don't need to create another wrapper

1504
01:04:36,900 --> 01:04:38,579
structure that makes it even more

1505
01:04:38,579 --> 01:04:40,200
complicated

1506
01:04:40,200 --> 01:04:41,880
and

1507
01:04:41,880 --> 01:04:43,040
so

1508
01:04:43,040 --> 01:04:46,619
we basically take inspiration from cozy

1509
01:04:46,619 --> 01:04:48,720
counter signatures but it's not exactly

1510
01:04:48,720 --> 01:04:50,880
that and I think yeah I'll talk more

1511
01:04:50,880 --> 01:04:53,640
about that on the next slide

1512
01:04:53,640 --> 01:04:56,480
so next slide please

1513
01:04:57,960 --> 01:05:01,319
so why do we need a new format then

1514
01:05:01,319 --> 01:05:03,180
um can't we just use standard cozy

1515
01:05:03,180 --> 01:05:04,799
counter signatures for that since it

1516
01:05:04,799 --> 01:05:09,900
sounds the same well not quite because a

1517
01:05:09,900 --> 01:05:12,839
cozy counter signature would countersign

1518
01:05:12,839 --> 01:05:16,319
a single individual claim but in

1519
01:05:16,319 --> 01:05:18,059
transparency Services usually what

1520
01:05:18,059 --> 01:05:22,500
happens is you put claims on The Ledger

1521
01:05:22,500 --> 01:05:24,660
and then eventually you sign the

1522
01:05:24,660 --> 01:05:27,480
democratri root of that ledger

1523
01:05:27,480 --> 01:05:29,520
and and so there's a bit of an

1524
01:05:29,520 --> 01:05:31,559
indirection there and that's that's

1525
01:05:31,559 --> 01:05:34,440
handled with inclusion proofs and this

1526
01:05:34,440 --> 01:05:39,000
extra step means we need something

1527
01:05:39,000 --> 01:05:42,420
um you know that allows verifiers uh

1528
01:05:42,420 --> 01:05:44,280
to do this step

1529
01:05:44,280 --> 01:05:47,880
and we had some discussions that we've

1530
01:05:47,880 --> 01:05:49,440
now abandoned

1531
01:05:49,440 --> 01:05:51,359
um on whether we can you know kind of

1532
01:05:51,359 --> 01:05:54,180
shoehorn those those details in existing

1533
01:05:54,180 --> 01:05:57,240
cozy Concepts so actually do use normal

1534
01:05:57,240 --> 01:05:59,579
cozy counter signatures and we had the

1535
01:05:59,579 --> 01:06:02,220
idea of okay maybe we can actually

1536
01:06:02,220 --> 01:06:04,460
um you know just create like a new

1537
01:06:04,460 --> 01:06:07,980
uh you know skit received signature

1538
01:06:07,980 --> 01:06:09,660
algorithm and then stuff everything into

1539
01:06:09,660 --> 01:06:11,460
the signature bytes and make it a bit

1540
01:06:11,460 --> 01:06:15,900
more of a meta thing but the community

1541
01:06:15,900 --> 01:06:18,900
um widely disagreed that's a good idea

1542
01:06:18,900 --> 01:06:20,760
so I think we'll just abandon that

1543
01:06:20,760 --> 01:06:24,000
because it would just lead to too many

1544
01:06:24,000 --> 01:06:26,220
um you know roadblocks on the way

1545
01:06:26,220 --> 01:06:29,280
and people generally agree that exposing

1546
01:06:29,280 --> 01:06:31,500
the concept of transparency the fact

1547
01:06:31,500 --> 01:06:33,180
that you have ledgers you know they do

1548
01:06:33,180 --> 01:06:35,640
have inclusion proofs a bit more to the

1549
01:06:35,640 --> 01:06:37,500
top of the format

1550
01:06:37,500 --> 01:06:39,059
um seems to make sense

1551
01:06:39,059 --> 01:06:40,680
and if anyone wants to look up the

1552
01:06:40,680 --> 01:06:42,839
discussion we had on the mailing list

1553
01:06:42,839 --> 01:06:45,240
um there's a link at the bottom

1554
01:06:45,240 --> 01:06:47,959
next slide

1555
01:06:48,359 --> 01:06:50,460
all right so don't look at that too

1556
01:06:50,460 --> 01:06:53,579
closely it's just a very rough first uh

1557
01:06:53,579 --> 01:06:56,039
draft and I'm kind of I'm really glad

1558
01:06:56,039 --> 01:06:57,599
that we have so many people in here that

1559
01:06:57,599 --> 01:07:00,480
deeply care about formats and that are

1560
01:07:00,480 --> 01:07:02,579
also involved in cozy and structures and

1561
01:07:02,579 --> 01:07:03,720
all of that

1562
01:07:03,720 --> 01:07:05,220
so

1563
01:07:05,220 --> 01:07:08,220
the idea is we have this new thing we

1564
01:07:08,220 --> 01:07:12,059
call it receipt and uh we have very

1565
01:07:12,059 --> 01:07:14,220
likely I mean at the moment we do have a

1566
01:07:14,220 --> 01:07:15,780
protected header

1567
01:07:15,780 --> 01:07:17,579
we can also add an unprotected one if

1568
01:07:17,579 --> 01:07:20,640
that makes it easier to you know slot

1569
01:07:20,640 --> 01:07:23,220
into existing structures and then we

1570
01:07:23,220 --> 01:07:25,140
have all the other stuff which is the

1571
01:07:25,140 --> 01:07:29,940
inclusion proof the actual signature and

1572
01:07:29,940 --> 01:07:31,559
yeah and then we have to figure out

1573
01:07:31,559 --> 01:07:33,539
exactly how that works one of the

1574
01:07:33,539 --> 01:07:37,079
challenges is that we have to think

1575
01:07:37,079 --> 01:07:40,140
about multiple types of

1576
01:07:40,140 --> 01:07:43,500
you know ledgers because they may have

1577
01:07:43,500 --> 01:07:46,380
different local trees even and and

1578
01:07:46,380 --> 01:07:47,960
slightly different

1579
01:07:47,960 --> 01:07:51,599
ways of ways of hashing you know the

1580
01:07:51,599 --> 01:07:54,359
leaves and and the intermediate nodes so

1581
01:07:54,359 --> 01:07:56,880
there has to be a bit of flexibility on

1582
01:07:56,880 --> 01:07:58,680
you know we call this at the moment the

1583
01:07:58,680 --> 01:08:00,359
tree algorithm

1584
01:08:00,359 --> 01:08:02,700
but we have to see

1585
01:08:02,700 --> 01:08:05,160
which parts we can make common in this

1586
01:08:05,160 --> 01:08:08,520
format and which parts are just kind of

1587
01:08:08,520 --> 01:08:10,799
like a like an algorithm that you have

1588
01:08:10,799 --> 01:08:13,680
to Define somewhere and then

1589
01:08:13,680 --> 01:08:16,259
um you have to define the the pieces

1590
01:08:16,259 --> 01:08:17,640
that would go into like you know

1591
01:08:17,640 --> 01:08:20,040
something like a signature by its but in

1592
01:08:20,040 --> 01:08:21,299
this case it's not a signature bytes

1593
01:08:21,299 --> 01:08:23,640
it's more like the

1594
01:08:23,640 --> 01:08:25,380
um yeah how do we call this natural

1595
01:08:25,380 --> 01:08:28,020
bytes

1596
01:08:28,020 --> 01:08:29,880
um but yeah let's

1597
01:08:29,880 --> 01:08:31,500
um and I think that's where we'll have a

1598
01:08:31,500 --> 01:08:32,339
lot of

1599
01:08:32,339 --> 01:08:34,738
um actually discussions uh and I hope we

1600
01:08:34,738 --> 01:08:35,460
can

1601
01:08:35,460 --> 01:08:38,339
Converge on something that makes sense

1602
01:08:38,339 --> 01:08:40,259
the protected header

1603
01:08:40,259 --> 01:08:43,799
what do we have in mind for that is that

1604
01:08:43,799 --> 01:08:46,679
it's it's not too much different from

1605
01:08:46,679 --> 01:08:49,259
um you know the protected header what

1606
01:08:49,259 --> 01:08:51,420
you could put in there in in normal cozy

1607
01:08:51,420 --> 01:08:53,339
signed

1608
01:08:53,339 --> 01:08:56,279
um messages so it needs to be some kind

1609
01:08:56,279 --> 01:08:58,920
of identifier of this the the

1610
01:08:58,920 --> 01:09:01,198
transparency service so that you can do

1611
01:09:01,198 --> 01:09:02,580
key lookups

1612
01:09:02,580 --> 01:09:03,960
um and have

1613
01:09:03,960 --> 01:09:06,179
um you know a strong identity over that

1614
01:09:06,179 --> 01:09:08,640
and you know there even on that level

1615
01:09:08,640 --> 01:09:10,859
there are there are variations on what

1616
01:09:10,859 --> 01:09:12,299
that could be

1617
01:09:12,299 --> 01:09:15,238
um it could even be a did at this point

1618
01:09:15,238 --> 01:09:17,160
but you know there are some services

1619
01:09:17,160 --> 01:09:20,460
that may use mainly certificates so you

1620
01:09:20,460 --> 01:09:22,198
know we have to see how that how that

1621
01:09:22,198 --> 01:09:23,100
all

1622
01:09:23,100 --> 01:09:25,140
fits together

1623
01:09:25,140 --> 01:09:27,899
um certainly it would be a little bit

1624
01:09:27,899 --> 01:09:30,600
nicer if we actually

1625
01:09:30,600 --> 01:09:33,120
since we already intend to use the IDS

1626
01:09:33,120 --> 01:09:35,520
for for claims it may make sense to also

1627
01:09:35,520 --> 01:09:37,140
do that for

1628
01:09:37,140 --> 01:09:41,460
um the transparency Services themselves

1629
01:09:41,460 --> 01:09:43,920
so and then yeah as I said we have two

1630
01:09:43,920 --> 01:09:46,198
algorithms

1631
01:09:46,198 --> 01:09:49,020
um Microsoft has recently open sourced a

1632
01:09:49,020 --> 01:09:51,238
kind of prototype implementation of this

1633
01:09:51,238 --> 01:09:54,238
so and for that we use CCF and again the

1634
01:09:54,238 --> 01:09:57,000
format for that is is this uh you know

1635
01:09:57,000 --> 01:10:00,000
draft but we can imagine that there are

1636
01:10:00,000 --> 01:10:04,320
more than that trillion for example qldb

1637
01:10:04,320 --> 01:10:06,239
um and apart from that there may even be

1638
01:10:06,239 --> 01:10:09,660
different variations of uh receipts so

1639
01:10:09,660 --> 01:10:12,719
we have some some thoughts on

1640
01:10:12,719 --> 01:10:14,040
um you know the kind of the primary

1641
01:10:14,040 --> 01:10:15,360
receipt when you store something in The

1642
01:10:15,360 --> 01:10:17,820
Ledger but then also something like uh

1643
01:10:17,820 --> 01:10:19,140
when you read something from The Ledger

1644
01:10:19,140 --> 01:10:21,179
and you want to get extra guarantees

1645
01:10:21,179 --> 01:10:23,460
that this is still fresh so there may be

1646
01:10:23,460 --> 01:10:25,920
different types that also we have to

1647
01:10:25,920 --> 01:10:28,920
encode somewhere in there

1648
01:10:28,920 --> 01:10:32,520
yeah and then in issue time time of

1649
01:10:32,520 --> 01:10:36,260
registration it's very useful

1650
01:10:37,739 --> 01:10:40,800
um yeah and then the proof as I said

1651
01:10:40,800 --> 01:10:43,560
that's in the draft by the way we call

1652
01:10:43,560 --> 01:10:45,179
it contents at the moment but maybe

1653
01:10:45,179 --> 01:10:46,620
that's not a great word

1654
01:10:46,620 --> 01:10:48,360
uh proof is also probably not a great

1655
01:10:48,360 --> 01:10:51,239
great world uh so there has also been

1656
01:10:51,239 --> 01:10:53,040
some suggestions to actually split this

1657
01:10:53,040 --> 01:10:56,400
up into you know kind of Ledger bits and

1658
01:10:56,400 --> 01:10:57,960
then have signature as a separate field

1659
01:10:57,960 --> 01:10:59,940
maybe that works

1660
01:10:59,940 --> 01:11:02,940
uh let's see

1661
01:11:02,940 --> 01:11:04,860
um next slide

1662
01:11:04,860 --> 01:11:08,699
yeah and we had an extremely short slot

1663
01:11:08,699 --> 01:11:11,100
India because the uh working group

1664
01:11:11,100 --> 01:11:13,020
session on Tuesday

1665
01:11:13,020 --> 01:11:16,440
um so just a few minutes to advertise

1666
01:11:16,440 --> 01:11:19,980
that I guess and and you know

1667
01:11:19,980 --> 01:11:21,780
get the idea oh there was no immediate

1668
01:11:21,780 --> 01:11:23,960
objection but I wouldn't necessarily

1669
01:11:23,960 --> 01:11:26,040
count that as approval or anything

1670
01:11:26,040 --> 01:11:28,020
because the time was so short

1671
01:11:28,020 --> 01:11:30,480
so if anyone has any you know feedback

1672
01:11:30,480 --> 01:11:33,239
or wants to collaborate on that uh you

1673
01:11:33,239 --> 01:11:35,540
know find us on the mailing list

1674
01:11:35,540 --> 01:11:38,520
and we will also do the same really

1675
01:11:38,520 --> 01:11:41,699
engage with the Cozy folks and

1676
01:11:41,699 --> 01:11:44,400
work together on defining

1677
01:11:44,400 --> 01:11:47,159
bringing transparency to Cozy that will

1678
01:11:47,159 --> 01:11:49,020
be the goal

1679
01:11:49,020 --> 01:11:51,480
I think that's the last slide but

1680
01:11:51,480 --> 01:11:55,080
yeah okay any immediate feedback on

1681
01:11:55,080 --> 01:11:57,179
on the receipt

1682
01:11:57,179 --> 01:12:01,080
custom like thumbs up okay that's good

1683
01:12:01,080 --> 01:12:03,239
excellent okay

1684
01:12:03,239 --> 01:12:06,560
so I don't actually know who's next

1685
01:12:06,560 --> 01:12:09,179
okay so that's Hank was the hackathon

1686
01:12:09,179 --> 01:12:11,940
report great and Orient as well

1687
01:12:11,940 --> 01:12:14,340
all right do you want to sit on the on

1688
01:12:14,340 --> 01:12:16,080
the previous topic okay

1689
01:12:16,080 --> 01:12:19,260
yeah so or or SEO just to ask about the

1690
01:12:19,260 --> 01:12:21,480
draft status for receipts the document

1691
01:12:21,480 --> 01:12:24,420
associated with with this is are we at a

1692
01:12:24,420 --> 01:12:26,880
similar stage uh for a call for adoption

1693
01:12:26,880 --> 01:12:28,620
for the working group or do we still

1694
01:12:28,620 --> 01:12:31,020
want to wait for the call for adoption

1695
01:12:31,020 --> 01:12:35,040
for receipts I I would let it settle uh

1696
01:12:35,040 --> 01:12:37,020
still a little bit until we like there's

1697
01:12:37,020 --> 01:12:38,159
some

1698
01:12:38,159 --> 01:12:39,420
like

1699
01:12:39,420 --> 01:12:43,380
um as next steps on on so in general uh

1700
01:12:43,380 --> 01:12:47,219
we have to use case document uh which

1701
01:12:47,219 --> 01:12:50,520
I expect to to be Rewritten and improved

1702
01:12:50,520 --> 01:12:51,360
um

1703
01:12:51,360 --> 01:12:52,620
and then there's the architecture

1704
01:12:52,620 --> 01:12:54,239
document which has obviously lots of

1705
01:12:54,239 --> 01:12:56,040
open issues like getting some of the

1706
01:12:56,040 --> 01:12:57,840
terminology sorted out so that we don't

1707
01:12:57,840 --> 01:13:00,060
uh don't use different terms all over

1708
01:13:00,060 --> 01:13:03,360
the place would be would be good um and

1709
01:13:03,360 --> 01:13:06,540
then that uh

1710
01:13:06,540 --> 01:13:08,940
that um people do have a call for

1711
01:13:08,940 --> 01:13:10,980
adoption of the architecture document

1712
01:13:10,980 --> 01:13:15,000
next week and so I hope um this advances

1713
01:13:15,000 --> 01:13:16,380
and I mean while there was more feedback

1714
01:13:16,380 --> 01:13:18,900
from the from the Cozy group um and also

1715
01:13:18,900 --> 01:13:20,159
from this group

1716
01:13:20,159 --> 01:13:22,560
I think the attention is still at the

1717
01:13:22,560 --> 01:13:24,300
architecture level use case level use

1718
01:13:24,300 --> 01:13:26,400
case description uh right now because of

1719
01:13:26,400 --> 01:13:30,719
our first meeting obviously but um yeah

1720
01:13:30,719 --> 01:13:33,719
Roman hi Roman Janelle I was jumping the

1721
01:13:33,719 --> 01:13:35,280
queue to really endorse that position

1722
01:13:35,280 --> 01:13:38,580
for the working group let's get what we

1723
01:13:38,580 --> 01:13:41,280
want to do settled and then you know we

1724
01:13:41,280 --> 01:13:42,600
can talk about how we want to solve it

1725
01:13:42,600 --> 01:13:43,800
because I don't want to get us in a

1726
01:13:43,800 --> 01:13:45,540
position where we're talking all about

1727
01:13:45,540 --> 01:13:47,280
solution things while we're iterating

1728
01:13:47,280 --> 01:13:48,960
what exactly we want to solve and I

1729
01:13:48,960 --> 01:13:49,920
think that's just going to give us a lot

1730
01:13:49,920 --> 01:13:52,280
of focus

1731
01:13:54,320 --> 01:13:56,820
given what Roman said I'll just withdraw

1732
01:13:56,820 --> 01:13:59,420
from the queue

1733
01:14:00,360 --> 01:14:02,900
I said

1734
01:14:03,060 --> 01:14:05,960
wise words

1735
01:14:10,500 --> 01:14:12,300
hi this is Hank

1736
01:14:12,300 --> 01:14:14,640
um I'm gonna give a first part about

1737
01:14:14,640 --> 01:14:17,460
what we call a hackathon report

1738
01:14:17,460 --> 01:14:20,040
we did not produce any code

1739
01:14:20,040 --> 01:14:23,460
at the hackathon so we uh we wasted a

1740
01:14:23,460 --> 01:14:28,140
lot of paper I'm apologizing to uh the

1741
01:14:28,140 --> 01:14:30,719
impact on trees

1742
01:14:30,719 --> 01:14:33,239
um next slide please

1743
01:14:33,239 --> 01:14:35,699
so what we were talking about is the

1744
01:14:35,699 --> 01:14:38,280
thing that uh again is a terminology

1745
01:14:38,280 --> 01:14:40,800
snuff who saw the administrative

1746
01:14:40,800 --> 01:14:42,980
information that is about the artifact

1747
01:14:42,980 --> 01:14:46,199
is the statement

1748
01:14:46,199 --> 01:14:49,800
and then the statements can be big

1749
01:14:49,800 --> 01:14:54,120
so we are talking about how to detach

1750
01:14:54,120 --> 01:14:55,800
the actual

1751
01:14:55,800 --> 01:14:58,500
um and you register that

1752
01:14:58,500 --> 01:15:03,120
the actual statement from the place

1753
01:15:03,120 --> 01:15:05,940
where you register the statement

1754
01:15:05,940 --> 01:15:09,840
so that you can have a tree because most

1755
01:15:09,840 --> 01:15:13,500
of these Registries slash notaries are

1756
01:15:13,500 --> 01:15:16,440
trees hash trees macro trees

1757
01:15:16,440 --> 01:15:19,219
um we would like to um separate

1758
01:15:19,219 --> 01:15:22,679
terabytes sized statements

1759
01:15:22,679 --> 01:15:24,239
from that

1760
01:15:24,239 --> 01:15:27,000
we found 1952

1761
01:15:27,000 --> 01:15:29,640
that says not our problem do this on the

1762
01:15:29,640 --> 01:15:31,140
application Level

1763
01:15:31,140 --> 01:15:34,739
ah we found 1954 that has at least the

1764
01:15:34,739 --> 01:15:38,460
how to find things via that I think

1765
01:15:38,460 --> 01:15:42,120
based on through these two fragments and

1766
01:15:42,120 --> 01:15:45,480
maybe a location where to find it I'm

1767
01:15:45,480 --> 01:15:47,580
doing some cross advertisement here this

1768
01:15:47,580 --> 01:15:49,080
can of course be a URI that is

1769
01:15:49,080 --> 01:15:51,360
resolvable or a CRI that is resolvable

1770
01:15:51,360 --> 01:15:56,640
or a URL or a CA URL crl sorry

1771
01:15:56,640 --> 01:15:59,460
that isn't actually a thing I know so uh

1772
01:15:59,460 --> 01:16:01,580
yeah

1773
01:16:01,580 --> 01:16:04,560
you know the it you're also for humans

1774
01:16:04,560 --> 01:16:07,560
your eyes for humans crisp of machines

1775
01:16:07,560 --> 01:16:10,920
and and this will be big at some point

1776
01:16:10,920 --> 01:16:12,480
so you want to make the small and

1777
01:16:12,480 --> 01:16:14,360
concise little proposal is to actually

1778
01:16:14,360 --> 01:16:16,860
uh I'm not sure if this have been done

1779
01:16:16,860 --> 01:16:19,380
before so if it has been done before uh

1780
01:16:19,380 --> 01:16:22,440
we were happy about pointers but create

1781
01:16:22,440 --> 01:16:25,320
a detached cozy envelope especially for

1782
01:16:25,320 --> 01:16:28,080
the sign statements in skit

1783
01:16:28,080 --> 01:16:30,540
next slide please

1784
01:16:30,540 --> 01:16:32,280
and maybe Brent wants to say something

1785
01:16:32,280 --> 01:16:35,219
before but next slide please again you

1786
01:16:35,219 --> 01:16:38,100
should know this oh yeah yeah it's a

1787
01:16:38,100 --> 01:16:42,020
good thing but shoot is different

1788
01:16:42,020 --> 01:16:44,940
it's just saying yes and maybe we will

1789
01:16:44,940 --> 01:16:46,500
do it the exact same way but we have to

1790
01:16:46,500 --> 01:16:47,820
go through all the steps again to find

1791
01:16:47,820 --> 01:16:49,080
out if you're doing that with access

1792
01:16:49,080 --> 01:16:52,440
hempstick so I'm not entirely convinced

1793
01:16:52,440 --> 01:16:53,880
um but maybe that's the result so

1794
01:16:53,880 --> 01:16:55,140
discussions

1795
01:16:55,140 --> 01:16:56,460
why

1796
01:16:56,460 --> 01:16:57,120
um

1797
01:16:57,120 --> 01:16:59,400
there are things out there so we want to

1798
01:16:59,400 --> 01:17:03,179
not only just build totally new systems

1799
01:17:03,179 --> 01:17:05,460
with our building blocks we want to help

1800
01:17:05,460 --> 01:17:08,940
uh existing systems we want to be

1801
01:17:08,940 --> 01:17:12,000
integratable into systems easily so and

1802
01:17:12,000 --> 01:17:13,679
one of those are content addressable

1803
01:17:13,679 --> 01:17:15,420
storages they are already out there like

1804
01:17:15,420 --> 01:17:18,780
a ton of them and and that would be in

1805
01:17:18,780 --> 01:17:20,400
trouble support of those and I already

1806
01:17:20,400 --> 01:17:22,679
highlighted as a spoiler that statements

1807
01:17:22,679 --> 01:17:24,420
can be big and there might be drawbacks

1808
01:17:24,420 --> 01:17:26,460
and having the statement included in the

1809
01:17:26,460 --> 01:17:28,920
tree and then there are also regulation

1810
01:17:28,920 --> 01:17:29,940
problems

1811
01:17:29,940 --> 01:17:32,640
uh first of all it's uh it might just do

1812
01:17:32,640 --> 01:17:34,860
them want to expose it you want to

1813
01:17:34,860 --> 01:17:37,020
expose the fact that you are accountable

1814
01:17:37,020 --> 01:17:39,000
for what you say you want to expose the

1815
01:17:39,000 --> 01:17:41,159
fact that you said it or what exactly

1816
01:17:41,159 --> 01:17:42,420
was said if you want to have more

1817
01:17:42,420 --> 01:17:44,580
fingering control about more than the

1818
01:17:44,580 --> 01:17:47,760
notary might uh allow for so these are

1819
01:17:47,760 --> 01:17:50,159
then hosted somewhere else and you have

1820
01:17:50,159 --> 01:17:52,500
more fine-grained control about the

1821
01:17:52,500 --> 01:17:53,820
accessibility

1822
01:17:53,820 --> 01:17:55,980
and then again there might be a person

1823
01:17:55,980 --> 01:17:57,900
identified information in there so of

1824
01:17:57,900 --> 01:18:00,900
course we have to address that uh some

1825
01:18:00,900 --> 01:18:03,420
of them disclosable claims there's work

1826
01:18:03,420 --> 01:18:05,760
in w3c about this

1827
01:18:05,760 --> 01:18:07,920
um might be a solution here but again

1828
01:18:07,920 --> 01:18:11,460
that is a separation of Duty and uh that

1829
01:18:11,460 --> 01:18:12,960
is again another reason why we would

1830
01:18:12,960 --> 01:18:14,760
like to do this and now Michael has a

1831
01:18:14,760 --> 01:18:16,940
hands up

1832
01:18:16,940 --> 01:18:19,679
uh yes Hank I'm gonna iterate the need

1833
01:18:19,679 --> 01:18:21,600
for statements being big with some of

1834
01:18:21,600 --> 01:18:23,100
the data sets we're dealing with and

1835
01:18:23,100 --> 01:18:24,540
software assets we're dealing with that

1836
01:18:24,540 --> 01:18:26,100
feed into this

1837
01:18:26,100 --> 01:18:29,159
um I did also want to ask with your

1838
01:18:29,159 --> 01:18:31,560
experience with the hackathon side did

1839
01:18:31,560 --> 01:18:32,940
it expose anything around like

1840
01:18:32,940 --> 01:18:35,520
terminology and use cases that you know

1841
01:18:35,520 --> 01:18:37,920
would Echo support for what Romans

1842
01:18:37,920 --> 01:18:39,900
stated earlier as far as landscape core

1843
01:18:39,900 --> 01:18:41,460
architecture because I'm noticing a lot

1844
01:18:41,460 --> 01:18:43,739
of conflicts between terminology slide

1845
01:18:43,739 --> 01:18:48,600
to slide uh yeah me too and and

1846
01:18:48,600 --> 01:18:51,780
so so imagine having a time from

1847
01:18:51,780 --> 01:18:54,300
Saturday to today and not being able to

1848
01:18:54,300 --> 01:18:55,980
resolve these

1849
01:18:55,980 --> 01:18:57,960
we apparently need a working group to

1850
01:18:57,960 --> 01:19:00,140
help

1851
01:19:01,380 --> 01:19:03,600
so that is my first initial response

1852
01:19:03,600 --> 01:19:05,880
also we have I think we have developed a

1853
01:19:05,880 --> 01:19:07,679
few good proposals that we will admit to

1854
01:19:07,679 --> 01:19:09,179
the list so there's another thing so the

1855
01:19:09,179 --> 01:19:11,580
hackathon also has something about that

1856
01:19:11,580 --> 01:19:12,840
but we can't show everything the

1857
01:19:12,840 --> 01:19:15,600
hackathon because of you know time

1858
01:19:15,600 --> 01:19:18,900
um so um go let's go to the next output

1859
01:19:18,900 --> 01:19:21,900
this is basically output one uh output

1860
01:19:21,900 --> 01:19:22,980
two

1861
01:19:22,980 --> 01:19:24,300
is

1862
01:19:24,300 --> 01:19:28,140
also about statements and uh so this is

1863
01:19:28,140 --> 01:19:29,940
my title we are not the curators of a

1864
01:19:29,940 --> 01:19:31,620
thousand semantics

1865
01:19:31,620 --> 01:19:33,300
um somebody was talking about policies

1866
01:19:33,300 --> 01:19:35,400
that check the content of statements at

1867
01:19:35,400 --> 01:19:38,820
the notary or registered level yeah

1868
01:19:38,820 --> 01:19:40,739
um this is not a centralized thing that

1869
01:19:40,739 --> 01:19:42,179
can be standardized you can maybe

1870
01:19:42,179 --> 01:19:44,699
standardize a module interface for some

1871
01:19:44,699 --> 01:19:47,100
specific statements that you plug in but

1872
01:19:47,100 --> 01:19:49,620
they're self-responsible for that maybe

1873
01:19:49,620 --> 01:19:52,199
even issue your own claim on the

1874
01:19:52,199 --> 01:19:53,760
registry that you're responsible for

1875
01:19:53,760 --> 01:19:55,320
that that would be funny but also

1876
01:19:55,320 --> 01:19:56,640
possible

1877
01:19:56,640 --> 01:19:57,500
um

1878
01:19:57,500 --> 01:20:01,320
it is actually a nice system so um so

1879
01:20:01,320 --> 01:20:03,060
but the important Point here is that

1880
01:20:03,060 --> 01:20:05,520
maybe some of these statements are not

1881
01:20:05,520 --> 01:20:08,520
opaque to the Note 3 by standard maybe

1882
01:20:08,520 --> 01:20:09,960
we want to create some standard

1883
01:20:09,960 --> 01:20:13,199
statements and we can go to example a

1884
01:20:13,199 --> 01:20:14,760
which is

1885
01:20:14,760 --> 01:20:16,260
um this deferral

1886
01:20:16,260 --> 01:20:19,080
hash link and there's the actual

1887
01:20:19,080 --> 01:20:21,780
statement that is a standard statement

1888
01:20:21,780 --> 01:20:23,760
that we could Define

1889
01:20:23,760 --> 01:20:26,940
and there might be more than just this

1890
01:20:26,940 --> 01:20:28,020
one

1891
01:20:28,020 --> 01:20:29,820
um so the proposals here to define a

1892
01:20:29,820 --> 01:20:31,320
small set of named and registered

1893
01:20:31,320 --> 01:20:33,480
standard statement structures that are

1894
01:20:33,480 --> 01:20:35,520
actually transparent to the node View

1895
01:20:35,520 --> 01:20:38,219
and everybody using Solutions uh in the

1896
01:20:38,219 --> 01:20:39,780
register notice system so next slide

1897
01:20:39,780 --> 01:20:40,980
please

1898
01:20:40,980 --> 01:20:43,440
um there are two examples

1899
01:20:43,440 --> 01:20:45,659
um that we found uh interesting to

1900
01:20:45,659 --> 01:20:47,460
discuss there might be Universal ones

1901
01:20:47,460 --> 01:20:49,440
like a revocation but we don't really

1902
01:20:49,440 --> 01:20:52,440
revoke anything because we are audible

1903
01:20:52,440 --> 01:20:56,100
after the fact we refresh our opinion

1904
01:20:56,100 --> 01:20:58,040
foreign

1905
01:20:58,040 --> 01:21:01,199
of course we were wrong and maybe it's

1906
01:21:01,199 --> 01:21:03,600
still okay to say the one thing like

1907
01:21:03,600 --> 01:21:05,699
build buildings with this I'm doing a

1908
01:21:05,699 --> 01:21:07,739
non-software analogy right build

1909
01:21:07,739 --> 01:21:09,239
building for this and 20 years later

1910
01:21:09,239 --> 01:21:10,920
it's like yeah okay buildings are still

1911
01:21:10,920 --> 01:21:12,719
fine building of this but it's not fine

1912
01:21:12,719 --> 01:21:14,040
for humans

1913
01:21:14,040 --> 01:21:16,020
so maybe not the buildings for humans

1914
01:21:16,020 --> 01:21:18,000
with this and and so this is an

1915
01:21:18,000 --> 01:21:19,260
additional information you want to

1916
01:21:19,260 --> 01:21:21,540
augment and so that's that's something

1917
01:21:21,540 --> 01:21:23,820
that is a semantic relationship that can

1918
01:21:23,820 --> 01:21:25,800
be transparent so refreshing a statement

1919
01:21:25,800 --> 01:21:29,159
could be a a standard uh statement

1920
01:21:29,159 --> 01:21:31,380
structure that is also not opaque to the

1921
01:21:31,380 --> 01:21:32,760
system then we've talked about

1922
01:21:32,760 --> 01:21:35,760
endorsements a lot I is you're talking

1923
01:21:35,760 --> 01:21:38,640
about the um another statement that's

1924
01:21:38,640 --> 01:21:40,860
already in there and that might be

1925
01:21:40,860 --> 01:21:42,179
something that you really want to

1926
01:21:42,179 --> 01:21:44,699
elaborate on that could be for example

1927
01:21:44,699 --> 01:21:48,300
yet another transparent statement so why

1928
01:21:48,300 --> 01:21:51,719
this is in support of the solution so we

1929
01:21:51,719 --> 01:21:53,159
can't just build building blocks because

1930
01:21:53,159 --> 01:21:55,980
they look nice we won't enable people to

1931
01:21:55,980 --> 01:21:57,600
interrogate them into the systems or

1932
01:21:57,600 --> 01:21:59,460
build new systems with them and

1933
01:21:59,460 --> 01:22:02,219
typically you have uh something to query

1934
01:22:02,219 --> 01:22:04,980
for the information there will be apis

1935
01:22:04,980 --> 01:22:06,600
there will be indexing servers there

1936
01:22:06,600 --> 01:22:08,280
will be huge scalable systems that help

1937
01:22:08,280 --> 01:22:10,800
you understand that I want to and can

1938
01:22:10,800 --> 01:22:13,560
use this software so in order to do that

1939
01:22:13,560 --> 01:22:15,960
you need some well interlinked things

1940
01:22:15,960 --> 01:22:17,719
and now going through the third output

1941
01:22:17,719 --> 01:22:20,520
there might be interlinked things that

1942
01:22:20,520 --> 01:22:22,860
you don't understand uh with open next

1943
01:22:22,860 --> 01:22:25,219
slide please

1944
01:22:25,440 --> 01:22:28,320
exactly there might be references to

1945
01:22:28,320 --> 01:22:30,360
other transplant statements that are

1946
01:22:30,360 --> 01:22:32,640
opaque to the notary and maybe even to

1947
01:22:32,640 --> 01:22:34,440
the consumer at some point Auditors

1948
01:22:34,440 --> 01:22:35,760
might understand them

1949
01:22:35,760 --> 01:22:38,760
or a very very informed end user might

1950
01:22:38,760 --> 01:22:39,900
understand them

1951
01:22:39,900 --> 01:22:42,420
and still you want to understand easily

1952
01:22:42,420 --> 01:22:44,460
to build graphs that they are linked so

1953
01:22:44,460 --> 01:22:46,679
there's a semantic relationship that is

1954
01:22:46,679 --> 01:22:49,020
super simple that is kind of obvious

1955
01:22:49,020 --> 01:22:50,400
when you don't want to talk about

1956
01:22:50,400 --> 01:22:52,440
content of statement that is this this

1957
01:22:52,440 --> 01:22:54,239
statement refers to the other statement

1958
01:22:54,239 --> 01:22:57,540
like a refresh would restore of course

1959
01:22:57,540 --> 01:23:01,199
uh refer to its complement and um now we

1960
01:23:01,199 --> 01:23:04,800
are asking ourselves how we uh do this

1961
01:23:04,800 --> 01:23:05,880
actually

1962
01:23:05,880 --> 01:23:06,560
um

1963
01:23:06,560 --> 01:23:08,940
if we can't really infer by the

1964
01:23:08,940 --> 01:23:11,460
statement content because we are not the

1965
01:23:11,460 --> 01:23:13,260
curators of thousand statements how do

1966
01:23:13,260 --> 01:23:16,199
you do basic relationships and is one

1967
01:23:16,199 --> 01:23:19,440
Edge like you know connected is that

1968
01:23:19,440 --> 01:23:22,500
enough is that enough as an agnostic way

1969
01:23:22,500 --> 01:23:25,560
to do this and next slide please

1970
01:23:25,560 --> 01:23:28,199
and then micro can say something

1971
01:23:28,199 --> 01:23:30,780
I do I just wanted to emphasize an

1972
01:23:30,780 --> 01:23:32,820
interesting thing that's kind of topical

1973
01:23:32,820 --> 01:23:34,980
in the US we have a food safety

1974
01:23:34,980 --> 01:23:37,679
regulation that just hit the wire uh

1975
01:23:37,679 --> 01:23:39,659
it's been debated for a while but is now

1976
01:23:39,659 --> 01:23:41,760
going out where the FDA has specified

1977
01:23:41,760 --> 01:23:43,920
the content and the payloads and all

1978
01:23:43,920 --> 01:23:45,300
these things that have to be collected

1979
01:23:45,300 --> 01:23:48,060
but it has no mechanism right or way to

1980
01:23:48,060 --> 01:23:49,500
go ahead and actually provide

1981
01:23:49,500 --> 01:23:51,900
auditability on when certain events have

1982
01:23:51,900 --> 01:23:54,060
happened from a traceability standpoint

1983
01:23:54,060 --> 01:23:55,620
so it's this intersection between the

1984
01:23:55,620 --> 01:23:57,900
digital side and the physical side and

1985
01:23:57,900 --> 01:23:59,640
so one of the things I like about this

1986
01:23:59,640 --> 01:24:01,260
is that it provides that ability to say

1987
01:24:01,260 --> 01:24:03,060
oh yeah these guys over here said what

1988
01:24:03,060 --> 01:24:04,920
content has to be tracked what types of

1989
01:24:04,920 --> 01:24:07,199
events have to be tracked and how you

1990
01:24:07,199 --> 01:24:08,880
need to be able to get that data back to

1991
01:24:08,880 --> 01:24:10,620
me and this provides a mechanism to

1992
01:24:10,620 --> 01:24:12,060
verify that data so it's highly

1993
01:24:12,060 --> 01:24:13,739
important from that food safety aspect

1994
01:24:13,739 --> 01:24:15,300
for sure so

1995
01:24:15,300 --> 01:24:18,239
yeah and a lot of other supply chain

1996
01:24:18,239 --> 01:24:19,980
world in the software supply chain World

1997
01:24:19,980 --> 01:24:21,659
okay now

1998
01:24:21,659 --> 01:24:23,000
okay whatever

1999
01:24:23,000 --> 01:24:24,780
so why

2000
01:24:24,780 --> 01:24:25,500
um

2001
01:24:25,500 --> 01:24:27,600
so again as I said integration into

2002
01:24:27,600 --> 01:24:30,120
existing system uh is is really really

2003
01:24:30,120 --> 01:24:32,100
important to us we want to have feedback

2004
01:24:32,100 --> 01:24:34,320
of people who are who can see a benefit

2005
01:24:34,320 --> 01:24:36,840
of adding uh components to their

2006
01:24:36,840 --> 01:24:39,239
solution and understand how integration

2007
01:24:39,239 --> 01:24:42,360
really works in the end and um I think

2008
01:24:42,360 --> 01:24:45,600
uh one example here is uh that you need

2009
01:24:45,600 --> 01:24:48,540
uh your own software and you you

2010
01:24:48,540 --> 01:24:50,520
actually have a few transparency

2011
01:24:50,520 --> 01:24:52,260
services like and already sorry

2012
01:24:52,260 --> 01:24:54,900
registers that again terminology and

2013
01:24:54,900 --> 01:24:57,600
that you trust so you need a remediation

2014
01:24:57,600 --> 01:24:59,520
Guardian because you know about your

2015
01:24:59,520 --> 01:25:01,800
vulnerability disclosure report of about

2016
01:25:01,800 --> 01:25:04,020
use software and and you can actually

2017
01:25:04,020 --> 01:25:05,880
identify that software via Suite in your

2018
01:25:05,880 --> 01:25:06,960
system

2019
01:25:06,960 --> 01:25:09,540
so that's a complicated query all these

2020
01:25:09,540 --> 01:25:11,880
things have to be kind of followed in a

2021
01:25:11,880 --> 01:25:14,640
semantic transition array there's some

2022
01:25:14,640 --> 01:25:16,920
um there's no direct relationship

2023
01:25:16,920 --> 01:25:19,080
between them and still you want to have

2024
01:25:19,080 --> 01:25:21,000
a remediation guidance because what you

2025
01:25:21,000 --> 01:25:22,500
want to do is the most important thing

2026
01:25:22,500 --> 01:25:25,380
for incident remediation so that is a

2027
01:25:25,380 --> 01:25:28,159
good I think example why why these

2028
01:25:28,159 --> 01:25:30,360
relationships are necessary to some

2029
01:25:30,360 --> 01:25:32,880
extent and why we can't still make them

2030
01:25:32,880 --> 01:25:34,980
specific to the to the state and content

2031
01:25:34,980 --> 01:25:37,199
because that again might be pii

2032
01:25:37,199 --> 01:25:40,380
confidential or totally obscure or in an

2033
01:25:40,380 --> 01:25:44,100
OCR and not OCR PDF endorsement I I've

2034
01:25:44,100 --> 01:25:45,780
seen these things everybody's seen these

2035
01:25:45,780 --> 01:25:48,300
things right so it might not be as as

2036
01:25:48,300 --> 01:25:51,120
possible as you like and so um so these

2037
01:25:51,120 --> 01:25:53,580
are digests from the hackathon

2038
01:25:53,580 --> 01:25:56,719
um um there were more but uh literally

2039
01:25:56,719 --> 01:25:59,699
digesting three relevant topics out of

2040
01:25:59,699 --> 01:26:01,800
two days of hard discussions all over

2041
01:26:01,800 --> 01:26:03,659
the place I think that's a pretty good

2042
01:26:03,659 --> 01:26:05,820
summary of three of those and we'll hand

2043
01:26:05,820 --> 01:26:09,560
off the multiple The Ledger

2044
01:26:09,560 --> 01:26:12,960
a scenario to to Ari if there aren't any

2045
01:26:12,960 --> 01:26:15,120
questions here right now

2046
01:26:15,120 --> 01:26:18,559
and that's not the case

2047
01:26:20,219 --> 01:26:22,560
sorry I'm gonna have to move this down a

2048
01:26:22,560 --> 01:26:24,120
little bit

2049
01:26:24,120 --> 01:26:26,840
there we go

2050
01:26:27,480 --> 01:26:28,679
yeah

2051
01:26:28,679 --> 01:26:30,300
right so

2052
01:26:30,300 --> 01:26:31,139
um

2053
01:26:31,139 --> 01:26:34,620
there's a number of wait like as Hank

2054
01:26:34,620 --> 01:26:36,480
just mentioned there's a number of ways

2055
01:26:36,480 --> 01:26:39,840
where there might be some uh first thing

2056
01:26:39,840 --> 01:26:42,659
pointing to a second thing and based on

2057
01:26:42,659 --> 01:26:44,400
the architecture you've all seen today

2058
01:26:44,400 --> 01:26:46,860
you can probably imagine there's more

2059
01:26:46,860 --> 01:26:49,080
than one way to do this

2060
01:26:49,080 --> 01:26:52,380
um so we thought about this we talked a

2061
01:26:52,380 --> 01:26:55,440
lot about this at the hackathon and we

2062
01:26:55,440 --> 01:26:58,080
have some strong statements to make

2063
01:26:58,080 --> 01:27:00,300
about how we think it should be composed

2064
01:27:00,300 --> 01:27:02,639
and if you agree great if you don't

2065
01:27:02,639 --> 01:27:06,120
agree also great and please share your

2066
01:27:06,120 --> 01:27:07,980
opinions about this on the list and

2067
01:27:07,980 --> 01:27:10,739
engage in the documents and issues but

2068
01:27:10,739 --> 01:27:12,840
I'd like to explain this picture just a

2069
01:27:12,840 --> 01:27:14,219
bit because

2070
01:27:14,219 --> 01:27:16,199
you can see here there's this first

2071
01:27:16,199 --> 01:27:19,500
statement there's validation the issuer

2072
01:27:19,500 --> 01:27:22,199
performs the issuance operation they get

2073
01:27:22,199 --> 01:27:23,880
the sign statement we called that a

2074
01:27:23,880 --> 01:27:25,380
claim earlier we're not talking about

2075
01:27:25,380 --> 01:27:27,840
the terminology problem anymore and then

2076
01:27:27,840 --> 01:27:30,480
there's a registration to the trans to

2077
01:27:30,480 --> 01:27:33,420
create a transparent statement and this

2078
01:27:33,420 --> 01:27:35,580
is the first place where you have these

2079
01:27:35,580 --> 01:27:37,620
two things the sign statement and the

2080
01:27:37,620 --> 01:27:39,120
transparent statement

2081
01:27:39,120 --> 01:27:42,960
and you could link from either of them

2082
01:27:42,960 --> 01:27:45,840
to the beginning of another process so

2083
01:27:45,840 --> 01:27:49,139
which should you link from not the

2084
01:27:49,139 --> 01:27:52,320
signed statement and that's our opinion

2085
01:27:52,320 --> 01:27:54,420
based on many discussions so I'm just

2086
01:27:54,420 --> 01:27:56,580
bubbling all of that up if you have a

2087
01:27:56,580 --> 01:27:58,020
good reason why you think that this is

2088
01:27:58,020 --> 01:27:59,040
good

2089
01:27:59,040 --> 01:28:01,139
um or you know the other one that was

2090
01:28:01,139 --> 01:28:02,159
bad

2091
01:28:02,159 --> 01:28:04,380
um please come talk to us we'll be happy

2092
01:28:04,380 --> 01:28:06,480
to have those conversations but this is

2093
01:28:06,480 --> 01:28:10,440
the ye yes this one is the one we think

2094
01:28:10,440 --> 01:28:12,480
uh should happen

2095
01:28:12,480 --> 01:28:14,639
um and you know there's there's good

2096
01:28:14,639 --> 01:28:16,560
reasons lots of good reasons for that

2097
01:28:16,560 --> 01:28:18,420
but the the main thing I'd like to point

2098
01:28:18,420 --> 01:28:20,699
about point out here is that in the next

2099
01:28:20,699 --> 01:28:23,280
slides you're going to see some several

2100
01:28:23,280 --> 01:28:25,380
sort of arguments about transparency

2101
01:28:25,380 --> 01:28:28,260
services and so this one is more useful

2102
01:28:28,260 --> 01:28:30,540
in those contexts than the previous One

2103
01:28:30,540 --> 01:28:33,179
X slide

2104
01:28:33,179 --> 01:28:34,739
so

2105
01:28:34,739 --> 01:28:37,679
um we we talked about a software uh

2106
01:28:37,679 --> 01:28:40,199
supply chain use case before and I

2107
01:28:40,199 --> 01:28:41,580
wanted to show

2108
01:28:41,580 --> 01:28:44,400
um another you know brief summary of an

2109
01:28:44,400 --> 01:28:45,900
example

2110
01:28:45,900 --> 01:28:48,420
um in a different sort of domain

2111
01:28:48,420 --> 01:28:51,239
um and I wanted to explain what it might

2112
01:28:51,239 --> 01:28:52,980
look like with a single transparency

2113
01:28:52,980 --> 01:28:54,900
service to solve this problem and then

2114
01:28:54,900 --> 01:28:56,100
I'm going to show you some other

2115
01:28:56,100 --> 01:28:58,320
pictures that have some additional

2116
01:28:58,320 --> 01:29:01,980
benefits in terms of confidentiality so

2117
01:29:01,980 --> 01:29:04,080
in this story here we're going to have a

2118
01:29:04,080 --> 01:29:05,880
device driver author who's going to make

2119
01:29:05,880 --> 01:29:07,920
a first Claim about some GPU Hardware

2120
01:29:07,920 --> 01:29:10,040
firmware versions

2121
01:29:10,040 --> 01:29:13,679
measurements fips certification I have

2122
01:29:13,679 --> 01:29:16,080
uh that first claim is going into the

2123
01:29:16,080 --> 01:29:17,460
transparency service and we're getting

2124
01:29:17,460 --> 01:29:20,580
receipt out then later an OS vendor is

2125
01:29:20,580 --> 01:29:23,340
preparing their OS bundle vendor name

2126
01:29:23,340 --> 01:29:26,900
fips compliant build versions and

2127
01:29:26,900 --> 01:29:30,480
they're including this first receipt

2128
01:29:30,480 --> 01:29:33,900
here and this little square failed a

2129
01:29:33,900 --> 01:29:37,739
year to process UTF encoding

2130
01:29:37,739 --> 01:29:40,500
deal is signifying that this is there

2131
01:29:40,500 --> 01:29:42,719
could be a problem here

2132
01:29:42,719 --> 01:29:45,000
in the inclusion of information about

2133
01:29:45,000 --> 01:29:48,300
this device driver's output and so I'm

2134
01:29:48,300 --> 01:29:50,460
when I'm trying with this little black

2135
01:29:50,460 --> 01:29:52,199
question marks is trying to indicate

2136
01:29:52,199 --> 01:29:53,820
that there can be

2137
01:29:53,820 --> 01:29:56,580
at any point there could be inclusion of

2138
01:29:56,580 --> 01:29:58,199
information that you might want to get

2139
01:29:58,199 --> 01:29:59,940
back to and that's why you want those

2140
01:29:59,940 --> 01:30:02,580
going into the transparency service so

2141
01:30:02,580 --> 01:30:04,380
at the end of the second process a

2142
01:30:04,380 --> 01:30:07,679
second receipt is generated and in this

2143
01:30:07,679 --> 01:30:09,060
final one

2144
01:30:09,060 --> 01:30:09,900
um

2145
01:30:09,900 --> 01:30:13,260
uh you've got claim three and claim

2146
01:30:13,260 --> 01:30:15,000
three is from a cloud service provider

2147
01:30:15,000 --> 01:30:17,760
and they are going to be creating some

2148
01:30:17,760 --> 01:30:19,980
claims about the information they have

2149
01:30:19,980 --> 01:30:22,560
about receipt one some information they

2150
01:30:22,560 --> 01:30:24,719
have about receipt two the workload

2151
01:30:24,719 --> 01:30:26,760
measurements and SLA promises and

2152
01:30:26,760 --> 01:30:28,020
they're going to generate a final

2153
01:30:28,020 --> 01:30:31,380
receipt and in this um this is what the

2154
01:30:31,380 --> 01:30:33,239
auditor would see if they view this

2155
01:30:33,239 --> 01:30:35,219
transparency Services each of these

2156
01:30:35,219 --> 01:30:38,340
claims and receipts and in this case we

2157
01:30:38,340 --> 01:30:39,480
might imagine this cloud service

2158
01:30:39,480 --> 01:30:42,000
provider is offering a new magical

2159
01:30:42,000 --> 01:30:44,820
streaming video streaming service on top

2160
01:30:44,820 --> 01:30:47,460
of an operating system and some GPU

2161
01:30:47,460 --> 01:30:49,260
device driver information to process

2162
01:30:49,260 --> 01:30:51,600
video at scale and so they want to get

2163
01:30:51,600 --> 01:30:53,639
committed transparently to all of the

2164
01:30:53,639 --> 01:30:55,320
components that go into delivering that

2165
01:30:55,320 --> 01:30:57,600
service in case in the future something

2166
01:30:57,600 --> 01:30:58,920
bad is happening with the video

2167
01:30:58,920 --> 01:31:01,080
streaming processing and they need to do

2168
01:31:01,080 --> 01:31:04,500
an analysis so that's the story and the

2169
01:31:04,500 --> 01:31:06,120
same story is going to hold in the next

2170
01:31:06,120 --> 01:31:07,139
slides but we're going to show a

2171
01:31:07,139 --> 01:31:08,219
slightly different version of the

2172
01:31:08,219 --> 01:31:10,800
architecture we discussed next

2173
01:31:10,800 --> 01:31:11,760
so

2174
01:31:11,760 --> 01:31:12,960
same architecture but different

2175
01:31:12,960 --> 01:31:15,719
deployment models I should say so

2176
01:31:15,719 --> 01:31:18,659
and this one here we've got the same

2177
01:31:18,659 --> 01:31:22,320
story but we have now three transparency

2178
01:31:22,320 --> 01:31:25,380
services and in in this case here I'm

2179
01:31:25,380 --> 01:31:28,500
not no longer having Unicode uh parsing

2180
01:31:28,500 --> 01:31:30,900
issues because I'm just here to to talk

2181
01:31:30,900 --> 01:31:32,880
to you about the the flow in the happy

2182
01:31:32,880 --> 01:31:35,219
case not in the case where there's a an

2183
01:31:35,219 --> 01:31:38,040
error injected in the system

2184
01:31:38,040 --> 01:31:41,520
um in this case we have receipt one and

2185
01:31:41,520 --> 01:31:44,280
receipt two going into claim three so

2186
01:31:44,280 --> 01:31:47,400
this one the OS vendor doesn't see that

2187
01:31:47,400 --> 01:31:49,500
intermediate piece

2188
01:31:49,500 --> 01:31:51,900
um because receipt one is going over the

2189
01:31:51,900 --> 01:31:53,639
OS vendor and into the cloud service

2190
01:31:53,639 --> 01:31:56,159
provider directly instead of through the

2191
01:31:56,159 --> 01:31:58,620
OS vendor so this is one of those cases

2192
01:31:58,620 --> 01:31:59,940
where it's like did I bundle that

2193
01:31:59,940 --> 01:32:03,239
dependency or did I ship a binary that

2194
01:32:03,239 --> 01:32:05,159
would require the integrator to bundle

2195
01:32:05,159 --> 01:32:06,900
that dependency this is a difference

2196
01:32:06,900 --> 01:32:09,179
between this one and that one

2197
01:32:09,179 --> 01:32:11,639
um before and also the transparency

2198
01:32:11,639 --> 01:32:13,639
services at the bottom

2199
01:32:13,639 --> 01:32:16,980
now we're not commingling claims and

2200
01:32:16,980 --> 01:32:18,780
receipts from three parties into one

2201
01:32:18,780 --> 01:32:20,520
transparency service we've actually

2202
01:32:20,520 --> 01:32:22,020
given each of them their own

2203
01:32:22,020 --> 01:32:25,380
transparency service to store these

2204
01:32:25,380 --> 01:32:27,060
next slide

2205
01:32:27,060 --> 01:32:30,080
ah questions

2206
01:32:41,780 --> 01:32:44,639
in general I agree with these two models

2207
01:32:44,639 --> 01:32:46,560
the fips certified as a bit confusing

2208
01:32:46,560 --> 01:32:48,360
sorry let's just do that example

2209
01:32:48,360 --> 01:32:51,239
hypothetical example kind of claim being

2210
01:32:51,239 --> 01:32:54,000
made and I I was just fishing for good

2211
01:32:54,000 --> 01:32:56,159
at good good words other than claim one

2212
01:32:56,159 --> 01:32:59,040
and claim two yes because they're the OS

2213
01:32:59,040 --> 01:33:01,139
would need to certify with it yeah yeah

2214
01:33:01,139 --> 01:33:04,340
that exactly

2215
01:33:05,880 --> 01:33:07,199
awesome

2216
01:33:07,199 --> 01:33:09,860
um next slide

2217
01:33:12,659 --> 01:33:15,480
so the the main point I want to make

2218
01:33:15,480 --> 01:33:17,520
here is that in the case where the

2219
01:33:17,520 --> 01:33:19,679
transparency service is segregating

2220
01:33:19,679 --> 01:33:21,060
claims

2221
01:33:21,060 --> 01:33:21,659
um

2222
01:33:21,659 --> 01:33:23,400
previously we were looking at the

2223
01:33:23,400 --> 01:33:25,560
auditor's view across three separate

2224
01:33:25,560 --> 01:33:28,739
transparency services and maybe each of

2225
01:33:28,739 --> 01:33:30,239
those entities operating that

2226
01:33:30,239 --> 01:33:32,280
transparency service is going to comply

2227
01:33:32,280 --> 01:33:34,020
with that auditor and that auditor will

2228
01:33:34,020 --> 01:33:37,020
have deep visibility into the the claims

2229
01:33:37,020 --> 01:33:40,139
on that transparency service but it is

2230
01:33:40,139 --> 01:33:43,620
also possible to have just the view from

2231
01:33:43,620 --> 01:33:45,980
the device a driver author's perspective

2232
01:33:45,980 --> 01:33:49,679
which so for my transparency service for

2233
01:33:49,679 --> 01:33:52,800
my device driver artifacts

2234
01:33:52,800 --> 01:33:55,380
um I can see everything that I've put in

2235
01:33:55,380 --> 01:33:57,060
there and I can see all the receipts

2236
01:33:57,060 --> 01:33:59,340
that I've got and that I can hand out to

2237
01:33:59,340 --> 01:34:01,199
all of my friends who desperately want

2238
01:34:01,199 --> 01:34:03,420
the receipts from me but I can't see any

2239
01:34:03,420 --> 01:34:04,980
of these other things so just go back

2240
01:34:04,980 --> 01:34:06,780
for one second to show behind the cloud

2241
01:34:06,780 --> 01:34:08,280
one more time

2242
01:34:08,280 --> 01:34:11,040
there's a lot of complexity that happens

2243
01:34:11,040 --> 01:34:13,980
afterwards but I'm as the you know

2244
01:34:13,980 --> 01:34:15,960
original if you think about it in the

2245
01:34:15,960 --> 01:34:17,280
original definition from the beginning

2246
01:34:17,280 --> 01:34:20,159
of the slides the raw raw supply chain

2247
01:34:20,159 --> 01:34:23,060
materials producer they don't get to see

2248
01:34:23,060 --> 01:34:26,699
how their outputs are consumed at every

2249
01:34:26,699 --> 01:34:30,300
intermediary from that point on in time

2250
01:34:30,300 --> 01:34:33,659
um one forward one slide again to them

2251
01:34:33,659 --> 01:34:35,760
they make their first raw material

2252
01:34:35,760 --> 01:34:38,699
output deliverable and then it goes into

2253
01:34:38,699 --> 01:34:41,699
the supply chain it moves along they

2254
01:34:41,699 --> 01:34:43,800
they still have visibility into the

2255
01:34:43,800 --> 01:34:45,179
transparency service that they're

2256
01:34:45,179 --> 01:34:46,260
anchoring their claims and they're

2257
01:34:46,260 --> 01:34:48,239
generating receipts from but other

2258
01:34:48,239 --> 01:34:50,520
parties are consuming that information

2259
01:34:50,520 --> 01:34:52,860
and seeing those receipts nested into

2260
01:34:52,860 --> 01:34:54,659
subsequent layers within the supply

2261
01:34:54,659 --> 01:34:56,639
chain so we talked about these different

2262
01:34:56,639 --> 01:34:58,980
uh deployment models for the same

2263
01:34:58,980 --> 01:35:01,380
architecture and the benefits especially

2264
01:35:01,380 --> 01:35:04,560
in terms of confidentiality and uh you

2265
01:35:04,560 --> 01:35:07,679
know segregating um by use case for the

2266
01:35:07,679 --> 01:35:09,420
different vendors Etc and this was

2267
01:35:09,420 --> 01:35:11,520
another output from the hackathon not

2268
01:35:11,520 --> 01:35:15,300
code but pictures

2269
01:35:15,900 --> 01:35:17,460
that's it

2270
01:35:17,460 --> 01:35:20,000
I think

2271
01:35:22,320 --> 01:35:25,500
uh Mike perock here Ori did the topic of

2272
01:35:25,500 --> 01:35:27,719
say in this case right the vice driver

2273
01:35:27,719 --> 01:35:29,580
author getting receipt one of the thing

2274
01:35:29,580 --> 01:35:33,179
they checked in did the topic of

2275
01:35:33,179 --> 01:35:36,540
um the author knowing who was requesting

2276
01:35:36,540 --> 01:35:38,280
their receipts out of the transparency

2277
01:35:38,280 --> 01:35:40,860
service come up at all

2278
01:35:40,860 --> 01:35:46,560
uh yes so yeah go go back one slide

2279
01:35:46,560 --> 01:35:47,400
um

2280
01:35:47,400 --> 01:35:49,679
so here it's very clear uh you know

2281
01:35:49,679 --> 01:35:53,159
cloud service provider needs receipt one

2282
01:35:53,159 --> 01:35:55,440
um and you can imagine that maybe cloud

2283
01:35:55,440 --> 01:35:58,020
service provider is just one of many

2284
01:35:58,020 --> 01:35:59,760
cloud service providers that needs

2285
01:35:59,760 --> 01:36:02,340
receipt one the important part is that

2286
01:36:02,340 --> 01:36:04,860
the receipt one is there and can be

2287
01:36:04,860 --> 01:36:07,860
given out to anyone who may need it

2288
01:36:07,860 --> 01:36:10,080
did I answer your question

2289
01:36:10,080 --> 01:36:13,080
so

2290
01:36:13,260 --> 01:36:17,460
um does the author oh the author uh oh

2291
01:36:17,460 --> 01:36:19,920
who the cloud service provider right so

2292
01:36:19,920 --> 01:36:22,739
device driver guy does he know that

2293
01:36:22,739 --> 01:36:26,280
cloud whoever is using his stuff I I

2294
01:36:26,280 --> 01:36:28,500
suspect Antoine may be Q to answer this

2295
01:36:28,500 --> 01:36:30,719
question but I think the short answer is

2296
01:36:30,719 --> 01:36:32,580
the access control policy for the

2297
01:36:32,580 --> 01:36:35,280
transparency Services the gating factor

2298
01:36:35,280 --> 01:36:37,739
that answers that question and not the

2299
01:36:37,739 --> 01:36:40,020
original issuer of the claim so the

2300
01:36:40,020 --> 01:36:42,120
answer is no the original issue of the

2301
01:36:42,120 --> 01:36:44,040
claim is not informed every time a

2302
01:36:44,040 --> 01:36:46,620
receipt is handed out to a relying party

2303
01:36:46,620 --> 01:36:48,480
or requesting party

2304
01:36:48,480 --> 01:36:49,560
um

2305
01:36:49,560 --> 01:36:52,020
in yeah

2306
01:36:52,020 --> 01:36:54,120
uh yes so

2307
01:36:54,120 --> 01:36:57,780
right so my comment is on this idea that

2308
01:36:57,780 --> 01:37:01,320
you always have to when you are

2309
01:37:01,320 --> 01:37:03,300
consuming or depending on receive data

2310
01:37:03,300 --> 01:37:04,980
in other transparency it's always

2311
01:37:04,980 --> 01:37:07,860
because the downstream and one other

2312
01:37:07,860 --> 01:37:09,360
thing that was discussed in the academy

2313
01:37:09,360 --> 01:37:11,699
is not just only how to refer to these

2314
01:37:11,699 --> 01:37:13,639
dependencies by value

2315
01:37:13,639 --> 01:37:17,040
with a detached thing but also there is

2316
01:37:17,040 --> 01:37:19,280
a question of how do you actually

2317
01:37:19,280 --> 01:37:22,500
refer to this dependency by reference in

2318
01:37:22,500 --> 01:37:24,600
a way that you can have essentially a

2319
01:37:24,600 --> 01:37:25,880
global

2320
01:37:25,880 --> 01:37:29,100
addressing scheme for accessing claims

2321
01:37:29,100 --> 01:37:30,719
that can be registered at any

2322
01:37:30,719 --> 01:37:33,840
transparency service so maybe you can

2323
01:37:33,840 --> 01:37:36,600
give us some idea of what's best way to

2324
01:37:36,600 --> 01:37:39,719
create this kind of global access to

2325
01:37:39,719 --> 01:37:41,699
claims

2326
01:37:41,699 --> 01:37:44,460
I'm not sure I fully got the question

2327
01:37:44,460 --> 01:37:47,100
there is it is it how to discover which

2328
01:37:47,100 --> 01:37:49,620
transparency service will offer me which

2329
01:37:49,620 --> 01:37:52,080
kinds of receipts for claims no it's

2330
01:37:52,080 --> 01:37:53,699
more like if you want to refer to a

2331
01:37:53,699 --> 01:38:00,860
claim but but uh just uh it's uh uh

2332
01:38:01,440 --> 01:38:04,560
um yeah so in the case where a claim is

2333
01:38:04,560 --> 01:38:07,500
a Content addressable identifier to a

2334
01:38:07,500 --> 01:38:09,420
large artifact sitting in an artifact

2335
01:38:09,420 --> 01:38:12,780
repository how do I find all receipts

2336
01:38:12,780 --> 01:38:15,120
for that content addressable identifier

2337
01:38:15,120 --> 01:38:17,639
across multiple transparency Services a

2338
01:38:17,639 --> 01:38:19,500
query in question

2339
01:38:19,500 --> 01:38:21,960
um and there's a section in the

2340
01:38:21,960 --> 01:38:23,100
architecture where we talk about

2341
01:38:23,100 --> 01:38:25,139
potential querying interfaces that could

2342
01:38:25,139 --> 01:38:26,100
help

2343
01:38:26,100 --> 01:38:28,139
um and in Antoine's slides when you're

2344
01:38:28,139 --> 01:38:30,300
looking at the header you're seeing the

2345
01:38:30,300 --> 01:38:32,820
content type the feed and the issuer

2346
01:38:32,820 --> 01:38:34,679
these are all hints about how to get

2347
01:38:34,679 --> 01:38:37,860
back to the claims you're interested in

2348
01:38:37,860 --> 01:38:40,139
yeah I just wanted to kind of highlight

2349
01:38:40,139 --> 01:38:44,159
to why that this model is uh very much

2350
01:38:44,159 --> 01:38:47,820
uh specific to us deployment where the

2351
01:38:47,820 --> 01:38:50,639
device driver author is maintaining its

2352
01:38:50,639 --> 01:38:51,860
transparency service

2353
01:38:51,860 --> 01:38:55,679
and it's kind of the rest of the how it

2354
01:38:55,679 --> 01:38:58,920
it's received is utilized is really not

2355
01:38:58,920 --> 01:39:03,080
for him to kind of proceed

2356
01:39:03,239 --> 01:39:06,179
make on uh make understanding but this

2357
01:39:06,179 --> 01:39:08,159
one is

2358
01:39:08,159 --> 01:39:11,159
this one is the right one to say that

2359
01:39:11,159 --> 01:39:14,460
the receipt is gone is gone who's who is

2360
01:39:14,460 --> 01:39:16,860
using it is up for up to them to

2361
01:39:16,860 --> 01:39:18,600
basically

2362
01:39:18,600 --> 01:39:21,480
um put it into down down the line yeah

2363
01:39:21,480 --> 01:39:25,139
so so this is not a system for creating

2364
01:39:25,139 --> 01:39:26,639
you know some form of global

2365
01:39:26,639 --> 01:39:28,320
surveillance over the consumption of all

2366
01:39:28,320 --> 01:39:30,840
claims and receipts this is once these

2367
01:39:30,840 --> 01:39:33,300
things are are are

2368
01:39:33,300 --> 01:39:34,860
um secured by the transparency service

2369
01:39:34,860 --> 01:39:37,440
where they go is that the discussion of

2370
01:39:37,440 --> 01:39:39,659
the people who hold them absolutely yeah

2371
01:39:39,659 --> 01:39:42,060
I hope that clarifies a bit off yeah

2372
01:39:42,060 --> 01:39:44,420
thank you

2373
01:39:45,500 --> 01:39:49,080
yeah custom moment um these are all

2374
01:39:49,080 --> 01:39:51,360
services where we

2375
01:39:51,360 --> 01:39:53,340
really want to have a choice

2376
01:39:53,340 --> 01:39:56,460
I think that's really important

2377
01:39:56,460 --> 01:39:58,860
um of course the question really is who

2378
01:39:58,860 --> 01:40:00,060
has a choice

2379
01:40:00,060 --> 01:40:04,560
and uh if one author publishes through a

2380
01:40:04,560 --> 01:40:07,260
specific transparency service I don't

2381
01:40:07,260 --> 01:40:09,120
really have a lot of choice if I want to

2382
01:40:09,120 --> 01:40:12,360
use that that offers output which

2383
01:40:12,360 --> 01:40:15,120
transparency service I use

2384
01:40:15,120 --> 01:40:17,520
and I think Beyond Integrity which is

2385
01:40:17,520 --> 01:40:20,520
right now our main consideration I think

2386
01:40:20,520 --> 01:40:23,460
we also have to look at confidentiality

2387
01:40:23,460 --> 01:40:26,580
at some point confidentiality yes yes

2388
01:40:26,580 --> 01:40:30,719
and in particular the Privacy aspect

2389
01:40:30,719 --> 01:40:32,100
um I think they're pretty much

2390
01:40:32,100 --> 01:40:36,000
orthogonal in in many ways uh but I

2391
01:40:36,000 --> 01:40:38,219
think in the end it is support for the

2392
01:40:38,219 --> 01:40:40,440
whole system to function

2393
01:40:40,440 --> 01:40:43,880
to have certain quality

2394
01:40:43,880 --> 01:40:47,580
criteria with respect to privacy that

2395
01:40:47,580 --> 01:40:49,520
that these Services may or may not

2396
01:40:49,520 --> 01:40:51,900
fulfill yeah

2397
01:40:51,900 --> 01:40:54,239
um so it's for instance possible for for

2398
01:40:54,239 --> 01:40:57,540
a integrator to say I'm only going to

2399
01:40:57,540 --> 01:40:59,460
work with transparency services that

2400
01:40:59,460 --> 01:41:02,100
provide certain privacy guarantees as

2401
01:41:02,100 --> 01:41:04,980
well excellent yes so in this picture I

2402
01:41:04,980 --> 01:41:07,320
made each of the sort of tiers a

2403
01:41:07,320 --> 01:41:09,480
different color but you could imagine

2404
01:41:09,480 --> 01:41:11,880
that maybe device driver and Os vendor

2405
01:41:11,880 --> 01:41:13,500
use the same kind of transparency

2406
01:41:13,500 --> 01:41:16,380
service but the the third one uses a

2407
01:41:16,380 --> 01:41:18,900
different kind so that's to speaking to

2408
01:41:18,900 --> 01:41:20,520
your question about choices in

2409
01:41:20,520 --> 01:41:22,620
transparency service

2410
01:41:22,620 --> 01:41:24,600
um you know if there's only one then

2411
01:41:24,600 --> 01:41:26,219
there's not a lot of choice there we'd

2412
01:41:26,219 --> 01:41:28,560
like I personally would like to see a

2413
01:41:28,560 --> 01:41:29,880
lot of choices in interoperable

2414
01:41:29,880 --> 01:41:32,219
transparency services and then the

2415
01:41:32,219 --> 01:41:33,239
second point is about the

2416
01:41:33,239 --> 01:41:35,400
confidentiality and that applies to the

2417
01:41:35,400 --> 01:41:37,020
registration policy from the

2418
01:41:37,020 --> 01:41:39,540
architecture uh slides before so if my

2419
01:41:39,540 --> 01:41:41,699
registration policy is I'm going to be

2420
01:41:41,699 --> 01:41:43,800
very careful about registering anything

2421
01:41:43,800 --> 01:41:46,800
thing that isn't by that's by value I

2422
01:41:46,800 --> 01:41:48,659
want to only include registrations by

2423
01:41:48,659 --> 01:41:50,400
references that's my preference because

2424
01:41:50,400 --> 01:41:52,679
I'm very concerned about accidentally

2425
01:41:52,679 --> 01:41:55,020
including large amounts of information

2426
01:41:55,020 --> 01:41:57,960
that might can include pii the

2427
01:41:57,960 --> 01:42:00,420
registration policy can

2428
01:42:00,420 --> 01:42:02,639
communicate that to potential

2429
01:42:02,639 --> 01:42:04,679
transparency service consumers so that

2430
01:42:04,679 --> 01:42:06,780
they can evaluate that policy and decide

2431
01:42:06,780 --> 01:42:08,520
is this the kind of transparency service

2432
01:42:08,520 --> 01:42:11,820
that I I want to uh you know submit data

2433
01:42:11,820 --> 01:42:14,100
to do they reflect the Privacy values

2434
01:42:14,100 --> 01:42:16,800
that I have yeah there are several

2435
01:42:16,800 --> 01:42:18,900
actors here that have different priority

2436
01:42:18,900 --> 01:42:20,880
requirements and you really have to look

2437
01:42:20,880 --> 01:42:22,920
at all of them and maybe one of the jobs

2438
01:42:22,920 --> 01:42:26,119
of a transparency service is actually to

2439
01:42:26,119 --> 01:42:28,199
improve the quality of another

2440
01:42:28,199 --> 01:42:30,239
transparency service by offering

2441
01:42:30,239 --> 01:42:32,760
services that have additional privacy

2442
01:42:32,760 --> 01:42:35,280
criteria

2443
01:42:35,280 --> 01:42:37,260
you just want one other thought on that

2444
01:42:37,260 --> 01:42:39,360
is um I think it's mentioned somewhere

2445
01:42:39,360 --> 01:42:41,340
in the slides but the idea that part of

2446
01:42:41,340 --> 01:42:43,679
my registration policy evaluation might

2447
01:42:43,679 --> 01:42:45,239
have to do with claims I've already seen

2448
01:42:45,239 --> 01:42:48,179
have already been been anchored so I

2449
01:42:48,179 --> 01:42:49,619
think that's another dimension of what

2450
01:42:49,619 --> 01:42:50,639
you're saying

2451
01:42:50,639 --> 01:42:52,920
yeah thanks for the answer I I just want

2452
01:42:52,920 --> 01:42:55,199
to reaffirm that uh it's a critical part

2453
01:42:55,199 --> 01:42:57,840
of the architecture to enable flexible

2454
01:42:57,840 --> 01:43:00,900
Federation so it's completely okay to

2455
01:43:00,900 --> 01:43:02,639
have multiple transparency Services you

2456
01:43:02,639 --> 01:43:04,560
don't have to agree on a single

2457
01:43:04,560 --> 01:43:08,000
transference service to foreign

2458
01:43:13,460 --> 01:43:16,679
State uh in your policies which uh

2459
01:43:16,679 --> 01:43:18,360
transparency services are good enough

2460
01:43:18,360 --> 01:43:20,219
from your Viewpoint as a consumer of a

2461
01:43:20,219 --> 01:43:21,780
claim to know that it's auditable

2462
01:43:21,780 --> 01:43:25,080
another very important point is that uh

2463
01:43:25,080 --> 01:43:27,719
uh as we said earlier when circling is

2464
01:43:27,719 --> 01:43:30,000
issued uh there may be some access

2465
01:43:30,000 --> 01:43:31,560
control and dissemination but

2466
01:43:31,560 --> 01:43:33,900
essentially it's out there and it's com

2467
01:43:33,900 --> 01:43:35,639
it's perfectly acceptable for the same

2468
01:43:35,639 --> 01:43:38,219
client will registered in intermediate

2469
01:43:38,219 --> 01:43:40,020
transparency service to make sure that

2470
01:43:40,020 --> 01:43:42,300
it remains available so in the on the

2471
01:43:42,300 --> 01:43:44,699
slide for example if West vendor doesn't

2472
01:43:44,699 --> 01:43:46,800
know or doesn't trust transferences at

2473
01:43:46,800 --> 01:43:49,619
Israel it would typically re-register

2474
01:43:49,619 --> 01:43:51,960
the first Clement to its own

2475
01:43:51,960 --> 01:43:54,540
transparency service or possibly a

2476
01:43:54,540 --> 01:43:55,860
transparency service history to make

2477
01:43:55,860 --> 01:43:59,159
sure that it passes the Reliant

2478
01:43:59,159 --> 01:44:01,800
participalities and we are building a

2479
01:44:01,800 --> 01:44:03,780
lot of flexibility there I know you you

2480
01:44:03,780 --> 01:44:05,040
can have a policy that is super

2481
01:44:05,040 --> 01:44:07,500
demanding but that that's really not uh

2482
01:44:07,500 --> 01:44:11,060
mandated by the architecture

2483
01:44:17,040 --> 01:44:20,119
I guess I'm next

2484
01:44:22,440 --> 01:44:25,320
um I I like I like the the way it is

2485
01:44:25,320 --> 01:44:29,400
depicted I'm just concerned about how um

2486
01:44:29,400 --> 01:44:33,300
a cloud how do we address this in a

2487
01:44:33,300 --> 01:44:36,080
SAS or

2488
01:44:36,080 --> 01:44:38,219
infrastructure as a service model in

2489
01:44:38,219 --> 01:44:40,739
which you're basically running some

2490
01:44:40,739 --> 01:44:43,260
applications or some workloads on a on a

2491
01:44:43,260 --> 01:44:45,119
cloud provider how do you trace the

2492
01:44:45,119 --> 01:44:46,560
dependencies

2493
01:44:46,560 --> 01:44:48,840
um and and and that's one use case that

2494
01:44:48,840 --> 01:44:51,780
I'm I think it's missing in our

2495
01:44:51,780 --> 01:44:54,420
um you know uh work because it is a very

2496
01:44:54,420 --> 01:44:56,159
complex dependency because you don't

2497
01:44:56,159 --> 01:44:58,320
know exactly what you're running on top

2498
01:44:58,320 --> 01:45:01,739
as a customer unless you have some very

2499
01:45:01,739 --> 01:45:04,800
well packaged claims that say well these

2500
01:45:04,800 --> 01:45:07,260
were given to you but maybe that is the

2501
01:45:07,260 --> 01:45:09,060
solution I just don't know I think it

2502
01:45:09,060 --> 01:45:11,699
will be worth uh you know taking into

2503
01:45:11,699 --> 01:45:13,199
account that especially since you

2504
01:45:13,199 --> 01:45:15,540
brought up the the yeah because in the

2505
01:45:15,540 --> 01:45:17,400
end I represent an operator and for us

2506
01:45:17,400 --> 01:45:19,380
uh risk management is the most important

2507
01:45:19,380 --> 01:45:22,320
thing and what we want to know is if if

2508
01:45:22,320 --> 01:45:24,600
there's an incident how how do I make

2509
01:45:24,600 --> 01:45:27,360
sure that I I assess my risk I shut down

2510
01:45:27,360 --> 01:45:30,060
some applications I turn off some some

2511
01:45:30,060 --> 01:45:32,820
devices whatever right so I want to be

2512
01:45:32,820 --> 01:45:34,980
able to use that use case rather than

2513
01:45:34,980 --> 01:45:37,500
going from you know the issuer to the

2514
01:45:37,500 --> 01:45:39,360
verify I want to do it the other way

2515
01:45:39,360 --> 01:45:41,580
around yeah so selfishly but that's the

2516
01:45:41,580 --> 01:45:43,860
way it is yes it's it's a great Point

2517
01:45:43,860 --> 01:45:46,020
like we're telling a story

2518
01:45:46,020 --> 01:45:47,580
um kind of in the line of the original

2519
01:45:47,580 --> 01:45:49,560
definition of the supply chain from the

2520
01:45:49,560 --> 01:45:51,300
first slide starting with the raw

2521
01:45:51,300 --> 01:45:53,520
materials producer there's another way

2522
01:45:53,520 --> 01:45:55,860
to tell that story starting with the the

2523
01:45:55,860 --> 01:45:58,380
end consumer sort of experience of you

2524
01:45:58,380 --> 01:46:01,199
know using an artifact you know this we

2525
01:46:01,199 --> 01:46:02,820
we tried to tell the story in the

2526
01:46:02,820 --> 01:46:04,739
software use case the art of the final

2527
01:46:04,739 --> 01:46:07,320
artifact is having some challenges and

2528
01:46:07,320 --> 01:46:09,239
how do I trace backwards from that final

2529
01:46:09,239 --> 01:46:12,900
artifact and every step of the way that

2530
01:46:12,900 --> 01:46:14,820
components of that artifact were

2531
01:46:14,820 --> 01:46:16,980
integrated and passed along there was a

2532
01:46:16,980 --> 01:46:19,619
risk assessment maybe not a good one but

2533
01:46:19,619 --> 01:46:21,540
but there could have been and we can

2534
01:46:21,540 --> 01:46:23,100
improve the quality of the risk

2535
01:46:23,100 --> 01:46:25,739
assessment at that time that it's the

2536
01:46:25,739 --> 01:46:28,260
valuation is made by making it easier to

2537
01:46:28,260 --> 01:46:30,119
identify the information that's relevant

2538
01:46:30,119 --> 01:46:32,280
to the risk assessment and that that's

2539
01:46:32,280 --> 01:46:34,080
the sort of one of the higher level

2540
01:46:34,080 --> 01:46:36,360
objective and to be clear the risk

2541
01:46:36,360 --> 01:46:40,560
management on software uh you know

2542
01:46:40,560 --> 01:46:42,600
supply chain is only one piece of the

2543
01:46:42,600 --> 01:46:45,060
big puzzle you got processes you got you

2544
01:46:45,060 --> 01:46:47,219
know actual physical Supply chains and

2545
01:46:47,219 --> 01:46:48,540
other things yeah I just want to

2546
01:46:48,540 --> 01:46:50,280
emphasize the fact that we should look

2547
01:46:50,280 --> 01:46:52,980
from a customer perspective from the

2548
01:46:52,980 --> 01:46:54,480
user's perspective from an operator

2549
01:46:54,480 --> 01:46:56,400
project why do you need this in the

2550
01:46:56,400 --> 01:46:57,900
first place well the reason is because

2551
01:46:57,900 --> 01:47:00,600
we want to be able to uh to know what's

2552
01:47:00,600 --> 01:47:03,179
affected how can we remediate and how

2553
01:47:03,179 --> 01:47:06,360
how to uh address the issue thank you

2554
01:47:06,360 --> 01:47:08,540
foreign

2555
01:47:11,420 --> 01:47:13,860
this is I I love the architecture I'm

2556
01:47:13,860 --> 01:47:15,060
seeing it makes a lot of sense one of

2557
01:47:15,060 --> 01:47:16,739
the questions I had and it refers to

2558
01:47:16,739 --> 01:47:17,940
someone when we look in the receipt

2559
01:47:17,940 --> 01:47:18,960
structure

2560
01:47:18,960 --> 01:47:22,020
you know the the receipt basically the

2561
01:47:22,020 --> 01:47:23,880
statement was made the receipt claim of

2562
01:47:23,880 --> 01:47:25,920
the receipt provides verification of all

2563
01:47:25,920 --> 01:47:28,020
the steps above have proceeded like kind

2564
01:47:28,020 --> 01:47:29,340
of the thing has been registered it was

2565
01:47:29,340 --> 01:47:31,560
signed it was accepted the notary X

2566
01:47:31,560 --> 01:47:34,020
units policy how do you deal with policy

2567
01:47:34,020 --> 01:47:35,880
changes over time because there are

2568
01:47:35,880 --> 01:47:37,380
certain inferences I want to make from

2569
01:47:37,380 --> 01:47:39,000
the fact that I've received from this

2570
01:47:39,000 --> 01:47:41,159
instance of this skit yeah knowing what

2571
01:47:41,159 --> 01:47:43,260
I know about its policy but is that

2572
01:47:43,260 --> 01:47:45,119
policy change yes that's going to change

2573
01:47:45,119 --> 01:47:46,739
the inferences I can make given the

2574
01:47:46,739 --> 01:47:48,780
receipt so one of the things we've

2575
01:47:48,780 --> 01:47:50,280
already looked at and there's been some

2576
01:47:50,280 --> 01:47:52,260
prototyping of evaluating this is

2577
01:47:52,260 --> 01:47:55,980
embedding parts of the policy in in the

2578
01:47:55,980 --> 01:47:59,159
Registries themselves as claims so you

2579
01:47:59,159 --> 01:48:01,380
can imagine a bootstrapping scenario for

2580
01:48:01,380 --> 01:48:03,480
a transparency service that may be the

2581
01:48:03,480 --> 01:48:05,699
first couple claims are all the current

2582
01:48:05,699 --> 01:48:08,760
state of the art for the policies that

2583
01:48:08,760 --> 01:48:10,560
will be used to evaluate subsequent

2584
01:48:10,560 --> 01:48:13,080
claims that might be included then over

2585
01:48:13,080 --> 01:48:15,119
time when one of those changes you can

2586
01:48:15,119 --> 01:48:16,560
actually provide a receipt that the

2587
01:48:16,560 --> 01:48:18,900
policy changed and then when there's a

2588
01:48:18,900 --> 01:48:20,880
attempt to register something that

2589
01:48:20,880 --> 01:48:22,860
violates the latest policy but would

2590
01:48:22,860 --> 01:48:25,020
have previously been accepted

2591
01:48:25,020 --> 01:48:27,300
you have some ability to even explain

2592
01:48:27,300 --> 01:48:29,699
exactly you know what's going on as part

2593
01:48:29,699 --> 01:48:30,600
of that

2594
01:48:30,600 --> 01:48:31,980
that makes a lot of sense and that's

2595
01:48:31,980 --> 01:48:33,060
when I was thinking through is probably

2596
01:48:33,060 --> 01:48:35,040
when that's kind of where my mind went

2597
01:48:35,040 --> 01:48:38,400
to the first but you then have trust in

2598
01:48:38,400 --> 01:48:40,199
the operator of the notary in a way that

2599
01:48:40,199 --> 01:48:42,000
you didn't before right and that you're

2600
01:48:42,000 --> 01:48:43,739
then trusting them to keep their policy

2601
01:48:43,739 --> 01:48:45,719
up to date to keep registering and keep

2602
01:48:45,719 --> 01:48:47,820
me apprised at the latest whereas a

2603
01:48:47,820 --> 01:48:49,619
malicious transparency service it

2604
01:48:49,619 --> 01:48:53,100
changes policy over time and prevent or

2605
01:48:53,100 --> 01:48:54,840
rather present different types of split

2606
01:48:54,840 --> 01:48:56,880
views yes this receipt over here met

2607
01:48:56,880 --> 01:48:58,080
this policy that's already over here

2608
01:48:58,080 --> 01:48:59,340
didn't and I wouldn't necessarily know

2609
01:48:59,340 --> 01:49:01,080
about it yeah so that that's an

2610
01:49:01,080 --> 01:49:03,179
important part um and I think we've

2611
01:49:03,179 --> 01:49:05,460
skipped over the the freshness component

2612
01:49:05,460 --> 01:49:07,560
in your slides Antoine but there is a

2613
01:49:07,560 --> 01:49:09,659
freshness component that answers part of

2614
01:49:09,659 --> 01:49:12,480
that question so if I wanted to prove

2615
01:49:12,480 --> 01:49:14,880
that the a given policy that was

2616
01:49:14,880 --> 01:49:18,179
evaluated as part of a registration was

2617
01:49:18,179 --> 01:49:20,760
the latest there is a mechanism to do

2618
01:49:20,760 --> 01:49:22,500
that and there's tree structures

2619
01:49:22,500 --> 01:49:24,060
underneath

2620
01:49:24,060 --> 01:49:25,800
um there's a tree structure that

2621
01:49:25,800 --> 01:49:28,500
supports the inclusion of the claims we

2622
01:49:28,500 --> 01:49:30,360
there's many different terms for this

2623
01:49:30,360 --> 01:49:32,760
but I one term I think of it as the

2624
01:49:32,760 --> 01:49:34,560
right tree and then there's a tree

2625
01:49:34,560 --> 01:49:36,900
structure that can help support the

2626
01:49:36,900 --> 01:49:39,540
freshness of the receipts I think of

2627
01:49:39,540 --> 01:49:42,000
that as a reed tree sometimes combining

2628
01:49:42,000 --> 01:49:44,219
these two allows you to answer these

2629
01:49:44,219 --> 01:49:45,840
kinds of questions you're asking however

2630
01:49:45,840 --> 01:49:49,020
you are trusting that that transparency

2631
01:49:49,020 --> 01:49:52,520
service operator to manage these trees

2632
01:49:52,520 --> 01:49:55,139
consistently so if you don't trust a

2633
01:49:55,139 --> 01:49:57,060
single person single entity to do that

2634
01:49:57,060 --> 01:50:00,080
fairly then you might even want a

2635
01:50:00,080 --> 01:50:04,320
multi-service system that was mentioned

2636
01:50:04,320 --> 01:50:06,540
you know by carsten and Cedric as well

2637
01:50:06,540 --> 01:50:08,400
that makes sense so I think I mean I

2638
01:50:08,400 --> 01:50:09,960
would would say in terms of feedback

2639
01:50:09,960 --> 01:50:12,480
like making that point explicit about

2640
01:50:12,480 --> 01:50:14,280
what things you are and aren't trusting

2641
01:50:14,280 --> 01:50:15,900
in this architecture because I think

2642
01:50:15,900 --> 01:50:17,159
that there is this assumption that you

2643
01:50:17,159 --> 01:50:18,420
don't need to trust the transparency

2644
01:50:18,420 --> 01:50:21,000
service yeah actually you look at it and

2645
01:50:21,000 --> 01:50:22,139
maybe you do

2646
01:50:22,139 --> 01:50:23,460
um the other quick comment I had was

2647
01:50:23,460 --> 01:50:25,080
earlier there was a comment about time

2648
01:50:25,080 --> 01:50:26,460
stamps I mean when you have multiple

2649
01:50:26,460 --> 01:50:28,619
instances it does get have things to say

2650
01:50:28,619 --> 01:50:31,440
about how we can keep those timestamps

2651
01:50:31,440 --> 01:50:33,960
you know have timestamp integrity and

2652
01:50:33,960 --> 01:50:36,920
things like rough time and so on Hank go

2653
01:50:36,920 --> 01:50:39,780
he's on the Queue anyway okay

2654
01:50:39,780 --> 01:50:43,219
I'll step down thank you

2655
01:50:45,659 --> 01:50:47,699
hey Chris and I'll see you

2656
01:50:47,699 --> 01:50:51,840
um tmu so I I just maybe it's more to

2657
01:50:51,840 --> 01:50:54,840
you Antoine so if you don't somebody

2658
01:50:54,840 --> 01:50:56,699
mentioned the comment and there's an

2659
01:50:56,699 --> 01:50:57,900
answer about if you don't trust

2660
01:50:57,900 --> 01:51:00,000
transparency service one then maybe you

2661
01:51:00,000 --> 01:51:02,340
have the does that you don't trust

2662
01:51:02,340 --> 01:51:04,320
transparency service one and so then you

2663
01:51:04,320 --> 01:51:06,300
resign it

2664
01:51:06,300 --> 01:51:08,300
um so like help me understand because

2665
01:51:08,300 --> 01:51:11,100
time matters a lot here so if you don't

2666
01:51:11,100 --> 01:51:14,580
trust a service that a provider is using

2667
01:51:14,580 --> 01:51:17,159
then realistically you have to ask

2668
01:51:17,159 --> 01:51:20,699
whatever provider to provide to

2669
01:51:20,699 --> 01:51:24,020
at a date of issuance go to multiple

2670
01:51:24,020 --> 01:51:26,340
transparency Services right yeah I'll

2671
01:51:26,340 --> 01:51:28,380
try and Antoine gave the answer before

2672
01:51:28,380 --> 01:51:31,139
I'll try it again in the case of receipt

2673
01:51:31,139 --> 01:51:34,139
one the time stamp for that is related

2674
01:51:34,139 --> 01:51:36,300
to claim one in that transparency

2675
01:51:36,300 --> 01:51:40,080
service in the case of um

2676
01:51:40,080 --> 01:51:43,460
if I if I want to Anchor claim one again

2677
01:51:43,460 --> 01:51:46,320
uh to to transparency service two I'm

2678
01:51:46,320 --> 01:51:48,659
gonna get a different time for that

2679
01:51:48,659 --> 01:51:51,420
anchoring and and so that's totally okay

2680
01:51:51,420 --> 01:51:53,280
and there's a lot of reasons why you

2681
01:51:53,280 --> 01:51:55,500
might want to do that I think Antoine or

2682
01:51:55,500 --> 01:51:58,020
Cedric mentioned uh something so maybe I

2683
01:51:58,020 --> 01:52:00,480
misheard it uh for the explanation so

2684
01:52:00,480 --> 01:52:02,040
I'm good that I just was looking for the

2685
01:52:02,040 --> 01:52:04,460
clarification

2686
01:52:04,679 --> 01:52:07,460
foreign

2687
01:52:11,659 --> 01:52:14,340
exactly so

2688
01:52:14,340 --> 01:52:16,260
um we have a mega ton of things here in

2689
01:52:16,260 --> 01:52:18,840
the ITF that are dealing with trustworth

2690
01:52:18,840 --> 01:52:22,560
in this proofs and rats and such uh so

2691
01:52:22,560 --> 01:52:25,020
um one idea of course that we initially

2692
01:52:25,020 --> 01:52:27,540
already highlighted in the first buff is

2693
01:52:27,540 --> 01:52:30,179
that every no that a transparency

2694
01:52:30,179 --> 01:52:32,520
service is not a monolithic service can

2695
01:52:32,520 --> 01:52:36,540
be a set of replicate nodes all of these

2696
01:52:36,540 --> 01:52:39,300
must have the independent and circuitry

2697
01:52:39,300 --> 01:52:41,820
proof based on uh well that's technology

2698
01:52:41,820 --> 01:52:44,040
remote registration the TCG Global

2699
01:52:44,040 --> 01:52:46,320
platform ietf all of them at the same

2700
01:52:46,320 --> 01:52:48,900
time there's a lot of uh if they've said

2701
01:52:48,900 --> 01:52:51,659
this here there's a lot of CCC output

2702
01:52:51,659 --> 01:52:54,900
that is going to uh classify the

2703
01:52:54,900 --> 01:52:57,360
qualities of um the uh the nodes you're

2704
01:52:57,360 --> 01:52:58,800
running on the confidentiality for

2705
01:52:58,800 --> 01:53:01,260
example in this case and um there's a

2706
01:53:01,260 --> 01:53:03,960
corresponding uh ID called attestation

2707
01:53:03,960 --> 01:53:06,060
results for secure interaction and rats

2708
01:53:06,060 --> 01:53:08,580
that can basically be incorporated and

2709
01:53:08,580 --> 01:53:10,440
received to understand what are the

2710
01:53:10,440 --> 01:53:11,940
qualities I'm trusting in here right now

2711
01:53:11,940 --> 01:53:14,100
so these are trustworthiness qualities

2712
01:53:14,100 --> 01:53:16,020
that you trust not only just assertions

2713
01:53:16,020 --> 01:53:18,300
and then we were talking about freshness

2714
01:53:18,300 --> 01:53:19,920
and time

2715
01:53:19,920 --> 01:53:22,920
um also a very strong red topic so a

2716
01:53:22,920 --> 01:53:25,739
inside a node of redundance consensus

2717
01:53:25,739 --> 01:53:28,320
protocol working uh nodes of a

2718
01:53:28,320 --> 01:53:30,540
transparency service you can have a

2719
01:53:30,540 --> 01:53:32,760
distribution of a new Epoch or freshness

2720
01:53:32,760 --> 01:53:35,340
with Epoch markers using for example

2721
01:53:35,340 --> 01:53:39,080
signed uh civil time tags or traditional

2722
01:53:39,080 --> 01:53:42,420
tsats time some token for things so uh

2723
01:53:42,420 --> 01:53:44,520
timing is of course very important to us

2724
01:53:44,520 --> 01:53:46,139
but this is complexity that we didn't

2725
01:53:46,139 --> 01:53:47,699
want to bring up in the first session

2726
01:53:47,699 --> 01:53:49,500
but yes we're thinking about that of

2727
01:53:49,500 --> 01:53:51,060
course thank you

2728
01:53:51,060 --> 01:53:53,659
it's not

2729
01:53:56,340 --> 01:53:58,920
uh yes Antoine again so I just want to

2730
01:53:58,920 --> 01:54:02,360
say a few words on these questions about

2731
01:54:02,360 --> 01:54:05,040
policy and policy updates

2732
01:54:05,040 --> 01:54:06,840
because we didn't really cover that in

2733
01:54:06,840 --> 01:54:08,450
the architecture so

2734
01:54:08,450 --> 01:54:08,699
[Music]

2735
01:54:08,699 --> 01:54:09,600
um

2736
01:54:09,600 --> 01:54:12,060
so I think this is quite uh important

2737
01:54:12,060 --> 01:54:14,820
right that for the verified year you

2738
01:54:14,820 --> 01:54:16,860
want in some cases to have some ideas of

2739
01:54:16,860 --> 01:54:19,080
what policy will applied

2740
01:54:19,080 --> 01:54:22,080
and we are discussing uh

2741
01:54:22,080 --> 01:54:23,699
as part of the architecture of the

2742
01:54:23,699 --> 01:54:26,400
mechanism to actually have ways to

2743
01:54:26,400 --> 01:54:28,980
indicate in the claim itself what

2744
01:54:28,980 --> 01:54:31,679
policies are meant to be applied so I

2745
01:54:31,679 --> 01:54:33,300
think one of the very important kind of

2746
01:54:33,300 --> 01:54:36,719
uh claim that we have is uh C control

2747
01:54:36,719 --> 01:54:38,940
claims so a claim that updates another

2748
01:54:38,940 --> 01:54:39,840
one

2749
01:54:39,840 --> 01:54:43,440
and in that case even if internally the

2750
01:54:43,440 --> 01:54:46,139
notary knows that a claim is more recent

2751
01:54:46,139 --> 01:54:48,900
than another one it's not necessarily

2752
01:54:48,900 --> 01:54:50,400
obvious to the verifier without having

2753
01:54:50,400 --> 01:54:53,699
to look at the payloads right so this is

2754
01:54:53,699 --> 01:54:57,000
why uh there is kind of this topic of

2755
01:54:57,000 --> 01:54:59,159
being able to have a declaration of

2756
01:54:59,159 --> 01:55:01,920
registration policy that can actually be

2757
01:55:01,920 --> 01:55:04,560
interpreted by verifiers and so that's

2758
01:55:04,560 --> 01:55:07,860
kind of one way to better understand the

2759
01:55:07,860 --> 01:55:09,480
guarantees that you get at the verifier

2760
01:55:09,480 --> 01:55:11,760
from checking the receipt and there is

2761
01:55:11,760 --> 01:55:14,460
also this aspect of freshness which is

2762
01:55:14,460 --> 01:55:17,699
very important right so if you are using

2763
01:55:17,699 --> 01:55:19,860
a piece of code you want to know that

2764
01:55:19,860 --> 01:55:21,840
you have the latest version that's a

2765
01:55:21,840 --> 01:55:24,179
very very common use case and I think

2766
01:55:24,179 --> 01:55:26,940
for that as already said we can actually

2767
01:55:26,940 --> 01:55:28,920
specialize the receipts so we can have

2768
01:55:28,920 --> 01:55:31,739
form of receipts to prove ocsp style

2769
01:55:31,739 --> 01:55:35,400
that you have checked you have the

2770
01:55:35,400 --> 01:55:38,340
receipt is collectively fresh for a

2771
01:55:38,340 --> 01:55:40,320
given window and you can do that without

2772
01:55:40,320 --> 01:55:43,080
having to do any online check just as we

2773
01:55:43,080 --> 01:55:45,900
have with staple.csp right so this is a

2774
01:55:45,900 --> 01:55:47,280
kind of

2775
01:55:47,280 --> 01:55:48,239
um

2776
01:55:48,239 --> 01:55:50,639
mechanism that can be used to address

2777
01:55:50,639 --> 01:55:52,219
this

2778
01:55:52,219 --> 01:55:55,080
policy and between different

2779
01:55:55,080 --> 01:55:57,360
transparency Services yeah just one

2780
01:55:57,360 --> 01:55:59,880
point on the registration piece in this

2781
01:55:59,880 --> 01:56:01,980
um visual you have here you have claim

2782
01:56:01,980 --> 01:56:03,600
one claim two and claim three and

2783
01:56:03,600 --> 01:56:05,300
they're coming into three

2784
01:56:05,300 --> 01:56:07,980
individual transparency services that

2785
01:56:07,980 --> 01:56:09,960
means they're each being evaluated

2786
01:56:09,960 --> 01:56:12,000
against the registration policy for that

2787
01:56:12,000 --> 01:56:13,020
service

2788
01:56:13,020 --> 01:56:14,880
there's a minimum set of evaluation

2789
01:56:14,880 --> 01:56:17,639
which is mentioned previously and you

2790
01:56:17,639 --> 01:56:19,320
can imagine actually all three of these

2791
01:56:19,320 --> 01:56:22,199
sharing additional policies layering so

2792
01:56:22,199 --> 01:56:23,880
that they're all going to implement the

2793
01:56:23,880 --> 01:56:26,159
minimum in their own way but they might

2794
01:56:26,159 --> 01:56:28,679
be able to share actually major chunks

2795
01:56:28,679 --> 01:56:31,440
of policies amongst each other for

2796
01:56:31,440 --> 01:56:34,020
specific to certain content types for

2797
01:56:34,020 --> 01:56:36,179
example you can imagine a lot of use

2798
01:56:36,179 --> 01:56:37,980
cases where they've all agreed to handle

2799
01:56:37,980 --> 01:56:40,739
you know spdx s-bomb in a very specific

2800
01:56:40,739 --> 01:56:42,600
way and they can all share the policy

2801
01:56:42,600 --> 01:56:45,480
for evaluating those forms of claims yes

2802
01:56:45,480 --> 01:56:47,460
and and uh to the last question which

2803
01:56:47,460 --> 01:56:49,440
was how do you actually trust that that

2804
01:56:49,440 --> 01:56:51,840
policy that was meant to be applied that

2805
01:56:51,840 --> 01:56:54,840
ts1 was actually applied right and this

2806
01:56:54,840 --> 01:56:57,360
is where uh using things like uh remote

2807
01:56:57,360 --> 01:56:59,520
data sessions or attestation to actually

2808
01:56:59,520 --> 01:57:02,639
prove that uh that transparency server

2809
01:57:02,639 --> 01:57:05,580
applies the policy as it claims uh of

2810
01:57:05,580 --> 01:57:07,320
course you always have the auditability

2811
01:57:07,320 --> 01:57:11,040
aspects but that gives you only a pastor

2812
01:57:11,040 --> 01:57:13,320
your guarantee if you want a guarantee

2813
01:57:13,320 --> 01:57:14,940
at registration time then you need

2814
01:57:14,940 --> 01:57:17,659
something stronger

2815
01:57:18,780 --> 01:57:21,480
thank you um I

2816
01:57:21,480 --> 01:57:24,840
I wanted to highlight the point which

2817
01:57:24,840 --> 01:57:27,659
Dan Dan mentioned here is a great point

2818
01:57:27,659 --> 01:57:30,780
that uh these slides start from the

2819
01:57:30,780 --> 01:57:33,179
device manufacturer but thinking from a

2820
01:57:33,179 --> 01:57:37,619
cloud service provider I think what I

2821
01:57:37,619 --> 01:57:39,239
want to touch base on what exactly Hank

2822
01:57:39,239 --> 01:57:41,540
I wanted to highlight or elaborate more

2823
01:57:41,540 --> 01:57:44,460
that in confidential Computing we do

2824
01:57:44,460 --> 01:57:46,860
talk about workload measurements and

2825
01:57:46,860 --> 01:57:48,780
workload registration

2826
01:57:48,780 --> 01:57:51,239
so that precisely addressed the concerns

2827
01:57:51,239 --> 01:57:53,520
the cloud service providers or the users

2828
01:57:53,520 --> 01:57:55,679
of the cloud may have about the security

2829
01:57:55,679 --> 01:57:58,440
guarantees provided by the applications

2830
01:57:58,440 --> 01:58:00,500
that run in that kind of an environment

2831
01:58:00,500 --> 01:58:03,300
so though we have not explicitly put a

2832
01:58:03,300 --> 01:58:05,159
slide which goes at the other direction

2833
01:58:05,159 --> 01:58:07,860
but that doesn't mean that we have

2834
01:58:07,860 --> 01:58:10,619
ignored that kind of an aspect into the

2835
01:58:10,619 --> 01:58:11,520
system

2836
01:58:11,520 --> 01:58:13,380
and second thing I wanted to highlight

2837
01:58:13,380 --> 01:58:15,659
is these transparency Services as as

2838
01:58:15,659 --> 01:58:18,119
Anton mentioned has a very well

2839
01:58:18,119 --> 01:58:19,739
connectivity to the rats architecture

2840
01:58:19,739 --> 01:58:21,960
where these transparency Services when

2841
01:58:21,960 --> 01:58:23,699
running in a particular security

2842
01:58:23,699 --> 01:58:25,860
boundaries can very well attested to

2843
01:58:25,860 --> 01:58:27,840
enhance the trustworthiness of these

2844
01:58:27,840 --> 01:58:29,219
services

2845
01:58:29,219 --> 01:58:32,119
okay thank you

2846
01:58:32,900 --> 01:58:34,679
okay

2847
01:58:34,679 --> 01:58:38,460
thanks all right so uh we've consumed

2848
01:58:38,460 --> 01:58:42,420
our aob and wrap up time

2849
01:58:42,420 --> 01:58:44,219
but it was a good discussion so we

2850
01:58:44,219 --> 01:58:46,380
didn't want to stop it

2851
01:58:46,380 --> 01:58:47,280
um

2852
01:58:47,280 --> 01:58:49,580
but if there's anything

2853
01:58:49,580 --> 01:58:52,800
someone has uh would like to bring up

2854
01:58:52,800 --> 01:58:55,699
then

2855
01:58:55,940 --> 01:58:59,460
thank you um one last comment

2856
01:58:59,460 --> 01:59:01,739
um I like this work and I think it will

2857
01:59:01,739 --> 01:59:04,280
benefit tremendously companies like mine

2858
01:59:04,280 --> 01:59:07,139
one thing that concerns me the most I

2859
01:59:07,139 --> 01:59:09,360
didn't see I didn't hear a word about

2860
01:59:09,360 --> 01:59:12,060
s-bombs in this discussion and and and

2861
01:59:12,060 --> 01:59:16,440
and and and and uh it may be implied but

2862
01:59:16,440 --> 01:59:18,780
there there are these standards that

2863
01:59:18,780 --> 01:59:21,780
already Trace dependencies so if I have

2864
01:59:21,780 --> 01:59:24,300
actually an s-bomb that is truly built

2865
01:59:24,300 --> 01:59:26,940
from ground up with all the dependencies

2866
01:59:26,940 --> 01:59:29,760
and the and the and the and the and the

2867
01:59:29,760 --> 01:59:32,099
digital signatures and the uh you know

2868
01:59:32,099 --> 01:59:35,280
the the traceability at that point it is

2869
01:59:35,280 --> 01:59:38,820
a com combined uh artifact and it is

2870
01:59:38,820 --> 01:59:41,340
probably what what many people assume

2871
01:59:41,340 --> 01:59:43,800
but I'd like to to make sure that in

2872
01:59:43,800 --> 01:59:46,440
that in the process we are acknowledge

2873
01:59:46,440 --> 01:59:47,639
the fact that there are already

2874
01:59:47,639 --> 01:59:50,820
standards and we may have hybrid modes

2875
01:59:50,820 --> 01:59:53,280
of of addressing this and I I want to

2876
01:59:53,280 --> 01:59:54,900
make sure that that's actually captured

2877
01:59:54,900 --> 01:59:57,599
because it may come out as basically

2878
01:59:57,599 --> 01:59:59,820
we're creating another you know we're

2879
01:59:59,820 --> 02:00:02,580
decomposing the s-bomb into some Atomic

2880
02:00:02,580 --> 02:00:04,679
artifacts that then can be traced thank

2881
02:00:04,679 --> 02:00:06,860
you

2882
02:00:12,619 --> 02:00:16,080
sorry I know why I asked Hennis because

2883
02:00:16,080 --> 02:00:17,760
we are running out of time so I'm not

2884
02:00:17,760 --> 02:00:19,619
sure whether I should be speaking here

2885
02:00:19,619 --> 02:00:22,800
but Dan great point I think I in my

2886
02:00:22,800 --> 02:00:24,719
slide I mentioned explicitly about as

2887
02:00:24,719 --> 02:00:25,500
well

2888
02:00:25,500 --> 02:00:27,840
so on my slide software use cases one

2889
02:00:27,840 --> 02:00:30,599
slide does mention about s-bomb yes we

2890
02:00:30,599 --> 02:00:32,280
greatly acknowledge the great work they

2891
02:00:32,280 --> 02:00:33,179
have done

2892
02:00:33,179 --> 02:00:36,360
and that is the first step

2893
02:00:36,360 --> 02:00:39,239
of standardization where you you

2894
02:00:39,239 --> 02:00:42,239
standardize the software dependencies or

2895
02:00:42,239 --> 02:00:44,040
the components various components using

2896
02:00:44,040 --> 02:00:46,679
as forms be it spdx server Cyclone DS

2897
02:00:46,679 --> 02:00:49,080
what we are building is on top of s-bomb

2898
02:00:49,080 --> 02:00:51,300
where we add the transparency to the

2899
02:00:51,300 --> 02:00:53,219
s-bomb delivery mechanism and as bomb

2900
02:00:53,219 --> 02:00:55,679
verifiability mechanism so it's Step

2901
02:00:55,679 --> 02:00:59,840
Ahead in the right direction thank you

2902
02:00:59,840 --> 02:01:04,199
be unfortunate brand out of time uh

2903
02:01:04,199 --> 02:01:07,800
maybe allow me for a quick comment yeah

2904
02:01:07,800 --> 02:01:10,139
this is just to come up to my mind and

2905
02:01:10,139 --> 02:01:13,320
uh the examples here shows that clamps

2906
02:01:13,320 --> 02:01:16,560
are some specific content but uh what if

2907
02:01:16,560 --> 02:01:18,599
the client says that

2908
02:01:18,599 --> 02:01:21,239
um please refer to some URL link to see

2909
02:01:21,239 --> 02:01:26,520
the com uh details and uh yeah

2910
02:01:26,520 --> 02:01:30,060
okay very good thank you

2911
02:01:30,060 --> 02:01:31,679
yeah thank you all and thank you

2912
02:01:31,679 --> 02:01:33,719
specifically k for taking notes there

2913
02:01:33,719 --> 02:01:36,380
was obviously a lot of uh discussions

2914
02:01:36,380 --> 02:01:40,260
[Applause]

2915
02:01:40,260 --> 02:01:43,260
foreign

2916
02:02:52,199 --> 02:02:55,199
foreign

