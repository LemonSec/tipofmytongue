1
00:00:10,460 --> 00:00:13,580
thank you

2
00:00:19,800 --> 00:00:22,800
foreign

3
00:00:36,440 --> 00:00:41,100
so it's 9 30 let's start welcome to the

4
00:00:41,100 --> 00:00:44,340
V6 of session before we start everything

5
00:00:44,340 --> 00:00:47,340
uh

6
00:00:47,760 --> 00:00:53,599
we invite our ad Warren to say something

7
00:00:56,520 --> 00:00:59,940
hello world so today in commonwealth

8
00:00:59,940 --> 00:01:02,280
countries it's Remembrance Day

9
00:01:02,280 --> 00:01:05,880
and so I'm asking that at 11AM we take a

10
00:01:05,880 --> 00:01:07,920
brief pause for a minute or two serve as

11
00:01:07,920 --> 00:01:10,200
is custom in in countries I think we

12
00:01:10,200 --> 00:01:11,520
should always try and follow the Customs

13
00:01:11,520 --> 00:01:13,680
wherever we are I happen to also I think

14
00:01:13,680 --> 00:01:16,260
it's a good one and it's just a minute

15
00:01:16,260 --> 00:01:18,000
or two of Silence to sort of remember

16
00:01:18,000 --> 00:01:20,280
people who've died in conflicts so

17
00:01:20,280 --> 00:01:23,159
whoever's token at 11 A.M sorry we're

18
00:01:23,159 --> 00:01:24,600
going to interrupt your speech for a

19
00:01:24,600 --> 00:01:26,159
minute and we'll have a minute or two of

20
00:01:26,159 --> 00:01:28,799
Silence thanks

21
00:01:28,799 --> 00:01:30,780
thank you Warren

22
00:01:30,780 --> 00:01:32,220
so

23
00:01:32,220 --> 00:01:36,200
I'll start with the note well

24
00:01:36,200 --> 00:01:39,960
it is a reminder to everybody that

25
00:01:39,960 --> 00:01:44,600
basically expect other participants

26
00:01:46,439 --> 00:01:49,979
and I also like to show you the agenda

27
00:01:49,979 --> 00:01:53,100
so today we have a big agenda we have

28
00:01:53,100 --> 00:01:56,240
one working group Jeff and six

29
00:01:56,240 --> 00:01:58,979
individuals you have and at the end we

30
00:01:58,979 --> 00:02:01,880
also have the operational presentation

31
00:02:01,880 --> 00:02:05,700
to share IPv6

32
00:02:05,700 --> 00:02:10,560
only hosting companies experience

33
00:02:12,120 --> 00:02:15,540
and this is an overview of the working

34
00:02:15,540 --> 00:02:19,319
group status so from quantity

35
00:02:19,319 --> 00:02:21,840
perspective our number of individuals

36
00:02:21,840 --> 00:02:24,959
left are increasing

37
00:02:24,959 --> 00:02:27,420
um the number of

38
00:02:27,420 --> 00:02:30,599
working groups you have an obviously or

39
00:02:30,599 --> 00:02:32,420
you have the England score

40
00:02:32,420 --> 00:02:36,300
stable so from a quantity perspective we

41
00:02:36,300 --> 00:02:39,599
seem to be doing fine but how do we

42
00:02:39,599 --> 00:02:43,440
measure our growth in quality or in

43
00:02:43,440 --> 00:02:45,959
battery impact I think that this is a

44
00:02:45,959 --> 00:02:48,440
question that's worth thinking

45
00:02:48,440 --> 00:02:52,440
my own personal perspective is that if

46
00:02:52,440 --> 00:02:56,580
our group is helping to solve certain

47
00:02:56,580 --> 00:03:00,360
IPv6 challenges facing the industry then

48
00:03:00,360 --> 00:03:02,940
maybe we are doing a good job and here

49
00:03:02,940 --> 00:03:07,080
we fixed for challenges here and if you

50
00:03:07,080 --> 00:03:10,920
have other idea how we can generate a

51
00:03:10,920 --> 00:03:13,800
bigger impact in the industry or how our

52
00:03:13,800 --> 00:03:17,040
working group can do better please

53
00:03:17,040 --> 00:03:19,500
select the chairs no

54
00:03:19,500 --> 00:03:21,900
and the last thing is that we're going

55
00:03:21,900 --> 00:03:25,019
to call for contribution because at the

56
00:03:25,019 --> 00:03:27,239
moment we are doing

57
00:03:27,239 --> 00:03:29,220
some people are doing some very

58
00:03:29,220 --> 00:03:31,800
meaningful work for example Brian

59
00:03:31,800 --> 00:03:35,879
Carpenter is leading to a group to write

60
00:03:35,879 --> 00:03:39,000
a free IPv6 textbook we believe that

61
00:03:39,000 --> 00:03:41,400
this is something very useful because if

62
00:03:41,400 --> 00:03:43,379
the students are not educated in school

63
00:03:43,379 --> 00:03:46,319
when they go to their jobs they still

64
00:03:46,319 --> 00:03:49,140
don't understand IPv6 it will be

65
00:03:49,140 --> 00:03:52,379
difficult for them to deploy IPv6 so

66
00:03:52,379 --> 00:03:54,920
here I provide a link

67
00:03:54,920 --> 00:04:00,000
of these Brian's book and also

68
00:04:00,000 --> 00:04:03,540
you only need a GitHub account in order

69
00:04:03,540 --> 00:04:06,599
to contribute so Brian really encourage

70
00:04:06,599 --> 00:04:09,060
everybody to look at the link and

71
00:04:09,060 --> 00:04:11,819
contribute to this book and the second

72
00:04:11,819 --> 00:04:13,220
thing is

73
00:04:13,220 --> 00:04:17,220
Mike are collecting the

74
00:04:17,220 --> 00:04:20,820
IPv6 is used in Enterprise and we are

75
00:04:20,820 --> 00:04:24,840
doing some site meetings on Tuesday we

76
00:04:24,840 --> 00:04:26,639
have one

77
00:04:26,639 --> 00:04:29,880
um many of the top IPv6 experts was

78
00:04:29,880 --> 00:04:33,360
there to comment and participate in the

79
00:04:33,360 --> 00:04:37,100
discussion and we are really grateful

80
00:04:37,100 --> 00:04:40,139
for the contribution of this top experts

81
00:04:40,139 --> 00:04:43,320
so we call for a

82
00:04:43,320 --> 00:04:45,540
more people to participate and

83
00:04:45,540 --> 00:04:47,160
contribute on this

84
00:04:47,160 --> 00:04:48,780
and also

85
00:04:48,780 --> 00:04:52,259
in B6 orb and actually in sixth main or

86
00:04:52,259 --> 00:04:55,320
even in Nano there are certain topics

87
00:04:55,320 --> 00:04:58,979
that get debated again and again so

88
00:04:58,979 --> 00:05:01,740
every six months or 12 months the the

89
00:05:01,740 --> 00:05:04,320
same topic will emerge and then there

90
00:05:04,320 --> 00:05:07,139
will be a big discussion so for example

91
00:05:07,139 --> 00:05:10,699
this time this do ISP deployment

92
00:05:10,699 --> 00:05:15,660
we hope that after so many experts voice

93
00:05:15,660 --> 00:05:18,600
their opinion and do this discussion we

94
00:05:18,600 --> 00:05:20,940
can collect the information from the

95
00:05:20,940 --> 00:05:23,280
mailing list and maybe like a summary

96
00:05:23,280 --> 00:05:25,620
draft so that in the future we don't

97
00:05:25,620 --> 00:05:28,500
need to debate it again maybe we can at

98
00:05:28,500 --> 00:05:32,280
least Point people to the UF we believe

99
00:05:32,280 --> 00:05:34,680
that this is something meaningful and we

100
00:05:34,680 --> 00:05:37,680
call for some volunteers to do this work

101
00:05:37,680 --> 00:05:41,580
and also there are certain working group

102
00:05:41,580 --> 00:05:46,139
draft that currently expire and we also

103
00:05:46,139 --> 00:05:49,440
call for the existing co-authors or

104
00:05:49,440 --> 00:05:52,020
maybe some new contributor to discuss

105
00:05:52,020 --> 00:05:53,400
with the

106
00:05:53,400 --> 00:05:56,460
existing the original co-authors whether

107
00:05:56,460 --> 00:05:58,919
to restart this working group as well

108
00:05:58,919 --> 00:06:02,220
and if you can think of something else

109
00:06:02,220 --> 00:06:05,039
that are meaningful for our working

110
00:06:05,039 --> 00:06:08,820
group to do please let me know so this

111
00:06:08,820 --> 00:06:11,280
is the

112
00:06:11,280 --> 00:06:15,240
the working group status and the next

113
00:06:15,240 --> 00:06:19,820
topic of my agenda is

114
00:06:24,600 --> 00:06:27,539
my own working group job so run can you

115
00:06:27,539 --> 00:06:30,960
run the slides for me while I

116
00:06:30,960 --> 00:06:33,560
present

117
00:06:37,500 --> 00:06:40,620
okay give me a second to find the uh

118
00:06:40,620 --> 00:06:43,400
forward and back

119
00:06:45,720 --> 00:06:48,319
yep

120
00:06:48,900 --> 00:06:51,300
oh it because I only have two slides

121
00:06:51,300 --> 00:06:54,060
maybe I can run it myself

122
00:06:54,060 --> 00:06:56,280
okay thank you very much

123
00:06:56,280 --> 00:06:59,039
so this is the first time this you have

124
00:06:59,039 --> 00:07:01,860
become a working group and for those

125
00:07:01,860 --> 00:07:04,380
people who haven't read it yet I would

126
00:07:04,380 --> 00:07:08,039
like to give a quick summary of what's

127
00:07:08,039 --> 00:07:11,819
in this draft so the job basically have

128
00:07:11,819 --> 00:07:15,979
three parts the first part is a summary

129
00:07:15,979 --> 00:07:19,680
of the node excuse

130
00:07:19,680 --> 00:07:22,440
and also the cause I think that our

131
00:07:22,440 --> 00:07:26,340
contribution is mainly to summarize like

132
00:07:26,340 --> 00:07:31,020
of the 15xus no they are basically

133
00:07:31,020 --> 00:07:34,259
triggered by only three calls so if you

134
00:07:34,259 --> 00:07:36,840
deal with just the three calls it will

135
00:07:36,840 --> 00:07:40,800
be uh easier than to deal with uh 15

136
00:07:40,800 --> 00:07:44,340
issues plus if

137
00:07:44,340 --> 00:07:47,639
in the future a new Excel is discovered

138
00:07:47,639 --> 00:07:50,400
under certain chords and if you already

139
00:07:50,400 --> 00:07:52,020
deal with the cause then you

140
00:07:52,020 --> 00:07:54,900
automatically deal with a future excuse

141
00:07:54,900 --> 00:07:58,080
as well and the second part of this

142
00:07:58,080 --> 00:08:01,380
draft is we summarize

143
00:08:01,380 --> 00:08:02,720
[Music]

144
00:08:02,720 --> 00:08:07,020
flirting optimization solutions they

145
00:08:07,020 --> 00:08:10,400
deal with the excuse that we talk about

146
00:08:10,400 --> 00:08:13,979
and we not only summarize the solutions

147
00:08:13,979 --> 00:08:16,800
we also discovered that all of these

148
00:08:16,800 --> 00:08:18,020
Solutions

149
00:08:18,020 --> 00:08:22,919
rely on has one common thing which is to

150
00:08:22,919 --> 00:08:25,979
do some kind of like host isolation to

151
00:08:25,979 --> 00:08:28,680
try to avoid the excuse and this host

152
00:08:28,680 --> 00:08:31,820
isolation can be for example P2P link

153
00:08:31,820 --> 00:08:38,099
isolation or p2mp link isolation or

154
00:08:38,099 --> 00:08:41,700
unique prefix per holes which basically

155
00:08:41,700 --> 00:08:44,640
put each host in its own subnet we can

156
00:08:44,640 --> 00:08:47,459
call this the subnet isolation and there

157
00:08:47,459 --> 00:08:50,220
are also The Gua isolation and proxy

158
00:08:50,220 --> 00:08:54,360
isolation so we encourage you to take a

159
00:08:54,360 --> 00:08:57,899
look because this is

160
00:08:57,899 --> 00:09:00,200
this is at least some New Perspective

161
00:09:00,200 --> 00:09:03,600
and the third part of this draft is that

162
00:09:03,600 --> 00:09:06,360
we learn basically learn from the

163
00:09:06,360 --> 00:09:09,120
existing optimization solution and kind

164
00:09:09,120 --> 00:09:13,519
of extend this isolation idea

165
00:09:13,519 --> 00:09:17,519
for people to consider when they are

166
00:09:17,519 --> 00:09:20,880
planning their first hope deployment so

167
00:09:20,880 --> 00:09:22,980
we basically recommend that you start

168
00:09:22,980 --> 00:09:26,000
from the highest level of isolation

169
00:09:26,000 --> 00:09:28,800
there are certain actual requirements to

170
00:09:28,800 --> 00:09:31,080
that you can consider that whether this

171
00:09:31,080 --> 00:09:33,660
is applicable to you or not and if it's

172
00:09:33,660 --> 00:09:36,000
applicable to you if you start with the

173
00:09:36,000 --> 00:09:40,080
highest degree of isolation then you are

174
00:09:40,080 --> 00:09:42,959
the safest you know in the future in the

175
00:09:42,959 --> 00:09:44,940
future there may be you know certain new

176
00:09:44,940 --> 00:09:47,399
issue may be discovered but it may

177
00:09:47,399 --> 00:09:52,080
already be uh taken care of so you start

178
00:09:52,080 --> 00:09:53,640
with the

179
00:09:53,640 --> 00:09:57,540
the highest level of isolation

180
00:09:57,540 --> 00:10:00,060
um if it's not applicable then you move

181
00:10:00,060 --> 00:10:03,860
on to the kind of like a loose

182
00:10:03,860 --> 00:10:08,580
isolation they have lower entry

183
00:10:08,580 --> 00:10:11,459
requirement but it can also have a more

184
00:10:11,459 --> 00:10:13,920
potential excuse and you basically go

185
00:10:13,920 --> 00:10:17,040
through a guideline and a step by step

186
00:10:17,040 --> 00:10:19,560
until the last step is no isolation at

187
00:10:19,560 --> 00:10:23,519
all so this cover all the scenario

188
00:10:23,519 --> 00:10:25,860
because in the end you can give up our

189
00:10:25,860 --> 00:10:28,800
isolation and just do the back to the

190
00:10:28,800 --> 00:10:34,140
normal uh in the situation so we believe

191
00:10:34,140 --> 00:10:37,440
that for people who are interested to

192
00:10:37,440 --> 00:10:41,519
know all the issues related to ND this

193
00:10:41,519 --> 00:10:44,459
would be a good reference it's like a

194
00:10:44,459 --> 00:10:46,320
One-Stop reference that you can get all

195
00:10:46,320 --> 00:10:48,680
the information

196
00:10:51,959 --> 00:10:54,000
um the last slide basically summarize

197
00:10:54,000 --> 00:10:57,779
the change in this version because for

198
00:10:57,779 --> 00:11:01,140
example Jane lose some comments in the

199
00:11:01,140 --> 00:11:04,079
last ITF attack certain solution that

200
00:11:04,079 --> 00:11:07,560
will rebuild are as environmental so in

201
00:11:07,560 --> 00:11:10,320
this version we pointed all of this out

202
00:11:10,320 --> 00:11:12,560
uh

203
00:11:12,560 --> 00:11:15,779
mentioned that well

204
00:11:15,779 --> 00:11:18,360
the file names will not be called ND

205
00:11:18,360 --> 00:11:21,300
deployment because ND is a single

206
00:11:21,300 --> 00:11:23,820
protocol so we change the file name to

207
00:11:23,820 --> 00:11:26,279
end the consideration something also

208
00:11:26,279 --> 00:11:28,740
always the point that

209
00:11:28,740 --> 00:11:33,120
if we do unique prefix per holes then

210
00:11:33,120 --> 00:11:36,120
each host can take a slash 64 or even

211
00:11:36,120 --> 00:11:39,060
slash 56 and it seems to consume a lot

212
00:11:39,060 --> 00:11:41,519
of address but the job actually have a

213
00:11:41,519 --> 00:11:44,339
discussion on this deck given that at

214
00:11:44,339 --> 00:11:47,579
the moment that the magnet rir can give

215
00:11:47,579 --> 00:11:50,760
you a slash 29 without

216
00:11:50,760 --> 00:11:52,860
without the need of all justification

217
00:11:52,860 --> 00:11:56,579
almost then we really have sufficient

218
00:11:56,579 --> 00:12:01,740
slash 64 for every host and if we do

219
00:12:01,740 --> 00:12:04,800
this actually it can avoid a lot of

220
00:12:04,800 --> 00:12:07,800
excuse so we also highlighted this and

221
00:12:07,800 --> 00:12:10,320
there are some other uh

222
00:12:10,320 --> 00:12:14,060
uh comments that way

223
00:12:14,339 --> 00:12:17,579
that we incorporated in this version so

224
00:12:17,579 --> 00:12:20,579
this is a quick update of the draft and

225
00:12:20,579 --> 00:12:23,779
any comments

226
00:12:31,740 --> 00:12:34,920
so nobody in the queue then we move on

227
00:12:34,920 --> 00:12:38,899
to the next presentation link

228
00:12:46,980 --> 00:12:48,500
go ahead

229
00:12:48,500 --> 00:12:50,880
okay uh

230
00:12:50,880 --> 00:12:53,459
can you hear me

231
00:12:53,459 --> 00:12:58,380
yes okay thank you uh hello everyone uh

232
00:12:58,380 --> 00:13:00,959
this draft is about a framework of

233
00:13:00,959 --> 00:13:04,380
epithesis only another network uh the

234
00:13:04,380 --> 00:13:06,660
multi-to-me networks it has been

235
00:13:06,660 --> 00:13:10,320
presented in IHF 103 and 114 but the

236
00:13:10,320 --> 00:13:12,480
next two revealed again

237
00:13:12,480 --> 00:13:15,440
next please

238
00:13:18,779 --> 00:13:23,040
next okay the objective of this draft as

239
00:13:23,040 --> 00:13:25,620
we all know ipv4 as a service basic

240
00:13:25,620 --> 00:13:28,320
requirement of uh for ipv's only

241
00:13:28,320 --> 00:13:31,139
annually networks when ipv4 protocol is

242
00:13:31,139 --> 00:13:33,139
disabled the network should not only

243
00:13:33,139 --> 00:13:36,180
carry relative IPv6 service but also

244
00:13:36,180 --> 00:13:38,760
ensure that the remaining ipv4 serves

245
00:13:38,760 --> 00:13:41,459
running normally and it does not impact

246
00:13:41,459 --> 00:13:44,220
on user's components based on this

247
00:13:44,220 --> 00:13:46,740
consideration the objective risk

248
00:13:46,740 --> 00:13:49,560
framework is to provide end-to-end ipv4

249
00:13:49,560 --> 00:13:52,260
service delivery or multi-domain ipvc's

250
00:13:52,260 --> 00:13:55,980
only other networks and improve and to

251
00:13:55,980 --> 00:13:57,899
improve data for efficiency by

252
00:13:57,899 --> 00:14:00,480
eliminating unnecessary ipv4 IPv6

253
00:14:00,480 --> 00:14:03,720
converance in a scalable way

254
00:14:03,720 --> 00:14:06,620
next please

255
00:14:06,779 --> 00:14:09,420
this is a problem focused based on our

256
00:14:09,420 --> 00:14:12,240
experience during the past IHF has

257
00:14:12,240 --> 00:14:15,720
designed many activities technology each

258
00:14:15,720 --> 00:14:18,600
have different fpv4 activities converter

259
00:14:18,600 --> 00:14:21,779
gateways it can be encapsulation based

260
00:14:21,779 --> 00:14:23,880
or translation based some are still full

261
00:14:23,880 --> 00:14:26,940
on some are stillies here xl8 is a

262
00:14:26,940 --> 00:14:30,060
general term to represent various fbv4

263
00:14:30,060 --> 00:14:32,519
IPS gateways the network community's

264
00:14:32,519 --> 00:14:37,200
figure is used as a general as a

265
00:14:37,200 --> 00:14:39,540
user figures is a multi-dominant Works

266
00:14:39,540 --> 00:14:42,839
which consists of ES1 as2 and as3 each

267
00:14:42,839 --> 00:14:45,000
domain serve different scenarios in

268
00:14:45,000 --> 00:14:47,040
production network two support

269
00:14:47,040 --> 00:14:49,500
activities only EGS uses corresponding

270
00:14:49,500 --> 00:14:51,240
transition technology there are six

271
00:14:51,240 --> 00:14:53,940
different gasoline Gateway in this case

272
00:14:53,940 --> 00:14:58,399
if applicable user is trying to access

273
00:14:58,399 --> 00:15:02,639
ipv4 service their IP basis email

274
00:15:02,639 --> 00:15:04,920
Network the data stream need to Traverse

275
00:15:04,920 --> 00:15:08,699
as1 as2 as3 when ipv4 packs reaches the

276
00:15:08,699 --> 00:15:11,820
edge is one they are converted into IPv6

277
00:15:11,820 --> 00:15:13,620
package by episode one and then

278
00:15:13,620 --> 00:15:16,320
converted ipv for packs by absolute 2 as

279
00:15:16,320 --> 00:15:19,139
egress well fts2 they are converting to

280
00:15:19,139 --> 00:15:21,420
activities package again and process is

281
00:15:21,420 --> 00:15:24,720
same way as ES1 and the process in

282
00:15:24,720 --> 00:15:26,699
answer is the same except for the

283
00:15:26,699 --> 00:15:29,100
excellent gateways are different

284
00:15:29,100 --> 00:15:32,220
from the prospective operators excessive

285
00:15:32,220 --> 00:15:34,620
excellent gateways makes Network complex

286
00:15:34,620 --> 00:15:37,980
and the increase in Opex as well

287
00:15:37,980 --> 00:15:41,160
moreover Activity six data pass for ipv4

288
00:15:41,160 --> 00:15:44,160
delivery is not going to end it is com

289
00:15:44,160 --> 00:15:47,040
is component by multiple discontinuous

290
00:15:47,040 --> 00:15:48,060
tunnels

291
00:15:48,060 --> 00:15:51,180
some people may say if also as use the

292
00:15:51,180 --> 00:15:52,740
same transition technology the problem

293
00:15:52,740 --> 00:15:55,800
can be sold but that's not the case no

294
00:15:55,800 --> 00:15:57,839
single existing technology can solve the

295
00:15:57,839 --> 00:15:59,940
transition problem of other scenarios

296
00:15:59,940 --> 00:16:03,540
there are some existing IPv6 only for

297
00:16:03,540 --> 00:16:07,380
Transit records such as that in RC 5565

298
00:16:07,380 --> 00:16:11,820
which network which proposed to use

299
00:16:11,820 --> 00:16:14,220
bgbination Hub as a tunnel in the pawn

300
00:16:14,220 --> 00:16:16,740
address however as I mentioned in this

301
00:16:16,740 --> 00:16:21,000
IFC in the nas case asbr as a remote in

302
00:16:21,000 --> 00:16:23,100
the point of the software is not the bgp

303
00:16:23,100 --> 00:16:25,380
network hub for package that need to be

304
00:16:25,380 --> 00:16:28,079
sent on the software those procedures do

305
00:16:28,079 --> 00:16:29,880
not work when the trend call consists of

306
00:16:29,880 --> 00:16:31,620
RTS

307
00:16:31,620 --> 00:16:34,139
therefore we need a new framework which

308
00:16:34,139 --> 00:16:36,660
can set up end-to-end activities time or

309
00:16:36,660 --> 00:16:39,060
translation based did pass across

310
00:16:39,060 --> 00:16:41,279
multi-domains near secure and scalable

311
00:16:41,279 --> 00:16:44,459
way so as to transfer ipv4 service from

312
00:16:44,459 --> 00:16:47,699
linguous uh to the egress key without

313
00:16:47,699 --> 00:16:50,519
any transition function in the middle of

314
00:16:50,519 --> 00:16:52,199
the data path

315
00:16:52,199 --> 00:16:55,040
next please

316
00:16:55,500 --> 00:16:58,259
so in this framework UTP will be

317
00:16:58,259 --> 00:17:00,600
allocated and under defined by at least

318
00:17:00,600 --> 00:17:03,660
one activists making prefix it will also

319
00:17:03,660 --> 00:17:05,819
have one or more Associated ipv4 address

320
00:17:05,819 --> 00:17:08,459
block which are extracted from the local

321
00:17:08,459 --> 00:17:11,220
app before routing table or dress code

322
00:17:11,220 --> 00:17:13,919
the American relationship between ipv4

323
00:17:13,919 --> 00:17:16,679
address block and IPv6 mapping prefix is

324
00:17:16,679 --> 00:17:18,660
called address mapping room it is in

325
00:17:18,660 --> 00:17:19,740
this case

326
00:17:19,740 --> 00:17:23,160
and address my control is created by pe

327
00:17:23,160 --> 00:17:26,339
and provides previous level mapping for

328
00:17:26,339 --> 00:17:29,100
stateless ipv4 ipvc's address converter

329
00:17:29,100 --> 00:17:31,080
HP devices

330
00:17:31,080 --> 00:17:33,540
essentially address mapping rule gives

331
00:17:33,540 --> 00:17:36,600
the direction of ipv4 address I mean for

332
00:17:36,600 --> 00:17:38,820
Service delivery in multi-dominate

333
00:17:38,820 --> 00:17:41,178
Networks

334
00:17:44,780 --> 00:17:48,179
the first one is room management layer

335
00:17:48,179 --> 00:17:51,600
which is in charge of the American rules

336
00:17:51,600 --> 00:17:54,240
starting local database the second one

337
00:17:54,240 --> 00:17:57,179
is routing processing layer with which

338
00:17:57,179 --> 00:17:59,460
the mapping rules can be propagated

339
00:17:59,460 --> 00:18:02,039
within across ipvc's only domains to

340
00:18:02,039 --> 00:18:03,660
provide a beautiful reachability

341
00:18:03,660 --> 00:18:05,700
information to other peas which may be

342
00:18:05,700 --> 00:18:09,120
cross domains actually the changing of

343
00:18:09,120 --> 00:18:11,220
the prefix might pin for activities only

344
00:18:11,220 --> 00:18:13,200
has happened and as an Access Network

345
00:18:13,200 --> 00:18:17,940
such as that defined EFC 7050 in the

346
00:18:17,940 --> 00:18:21,059
ds64 but is exchanging a mapping prefix

347
00:18:21,059 --> 00:18:23,640
in Trend call is still black now this

348
00:18:23,640 --> 00:18:25,980
solution will fill the gap a data

349
00:18:25,980 --> 00:18:28,200
forwarding layer support ipv4 delivery

350
00:18:28,200 --> 00:18:31,700
by incapitalization or translation

351
00:18:31,700 --> 00:18:33,960
with this design we're happy before

352
00:18:33,960 --> 00:18:36,360
package reach the previous online work

353
00:18:36,360 --> 00:18:38,700
the Ingress pu will use address mapping

354
00:18:38,700 --> 00:18:41,100
rules to generate corresponding IPv6

355
00:18:41,100 --> 00:18:43,320
cells and desolation address of the new

356
00:18:43,320 --> 00:18:46,080
header from its original ipv4 source and

357
00:18:46,080 --> 00:18:48,900
desolation address the ipvc's package

358
00:18:48,900 --> 00:18:51,299
generally are sent to the red egress PE

359
00:18:51,299 --> 00:18:54,360
will not be converted to fpv4 package on

360
00:18:54,360 --> 00:18:57,059
the way so it is end of the end

361
00:18:57,059 --> 00:18:59,700
imitation there's no need to make a user

362
00:18:59,700 --> 00:19:02,220
related status or translation tables as

363
00:19:02,220 --> 00:19:06,660
PE so this approach is scalable

364
00:19:06,660 --> 00:19:09,600
next please

365
00:19:09,600 --> 00:19:11,940
something you still have five slides you

366
00:19:11,940 --> 00:19:15,440
may need to accelerate okay

367
00:19:16,340 --> 00:19:18,840
production Network so far it includes

368
00:19:18,840 --> 00:19:20,700
metro area network at the backbone and

369
00:19:20,700 --> 00:19:22,860
quality centers totally there are five

370
00:19:22,860 --> 00:19:25,380
domains our practice show that this

371
00:19:25,380 --> 00:19:27,059
framework is feasible and valuable

372
00:19:27,059 --> 00:19:29,280
moreover it is compatible with existing

373
00:19:29,280 --> 00:19:32,640
abuses only techniques such as 6-4 uh

374
00:19:32,640 --> 00:19:36,240
the 464 absolate in this way metal 6 4

375
00:19:36,240 --> 00:19:37,980
device and P or multi-domain will

376
00:19:37,980 --> 00:19:39,840
converge so the current phase interface

377
00:19:39,840 --> 00:19:41,280
and the core phase interface are both

378
00:19:41,280 --> 00:19:44,220
IPv6 ipv4 server will be delivered from

379
00:19:44,220 --> 00:19:46,980
user terminal to the equity directly

380
00:19:46,980 --> 00:19:50,220
uh this it can also have to be extended

381
00:19:50,220 --> 00:19:52,380
to more as Network operated by different

382
00:19:52,380 --> 00:19:54,660
operators so I think this is only the

383
00:19:54,660 --> 00:19:56,340
past can be by multiple operating

384
00:19:56,340 --> 00:19:59,659
networks next please

385
00:20:00,179 --> 00:20:02,580
but we have received another comments

386
00:20:02,580 --> 00:20:05,039
since it was presented on behalf of all

387
00:20:05,039 --> 00:20:07,140
the classes I explained expressed

388
00:20:07,140 --> 00:20:10,760
sincere thanks next please

389
00:20:12,059 --> 00:20:15,660
on Commons received with 17 had been

390
00:20:15,660 --> 00:20:19,559
made since ietf 114 firstly srv6 is

391
00:20:19,559 --> 00:20:21,419
removed from the quantities based on the

392
00:20:21,419 --> 00:20:23,580
comments of Veronica in particular the

393
00:20:23,580 --> 00:20:26,039
framework does not specific T techniques

394
00:20:26,039 --> 00:20:27,240
as mentally

395
00:20:27,240 --> 00:20:29,160
and that's the security consideration

396
00:20:29,160 --> 00:20:31,020
section was updated based on the

397
00:20:31,020 --> 00:20:33,539
comments from Gene and then we also made

398
00:20:33,539 --> 00:20:35,940
reviewing to reflect the outcome of

399
00:20:35,940 --> 00:20:37,919
discussion with Qing and the other

400
00:20:37,919 --> 00:20:39,900
unlimited list

401
00:20:39,900 --> 00:20:43,440
okay uh

402
00:20:45,440 --> 00:20:49,100
so next please

403
00:20:50,460 --> 00:20:52,200
uh this class is drawn to work our

404
00:20:52,200 --> 00:20:54,299
Channel Telecom Sun at Verizon orange so

405
00:20:54,299 --> 00:20:56,100
it's called the card number is zero five

406
00:20:56,100 --> 00:20:58,740
we think the document is ready for a

407
00:20:58,740 --> 00:21:00,840
call for adoption so more commonly

408
00:21:00,840 --> 00:21:03,600
welcome is Europe thank you for your

409
00:21:03,600 --> 00:21:05,700
attention please

410
00:21:05,700 --> 00:21:08,240
question

411
00:21:14,039 --> 00:21:17,179
any comments

412
00:21:25,020 --> 00:21:27,379
something

413
00:21:27,799 --> 00:21:31,799
okay our champion from Huawei in fact I

414
00:21:31,799 --> 00:21:34,440
this is the pay attention to this drop

415
00:21:34,440 --> 00:21:37,440
dance solution for a long time in fact I

416
00:21:37,440 --> 00:21:39,900
think YouTube propose the Practical

417
00:21:39,900 --> 00:21:43,380
solution for the implementing the

418
00:21:43,380 --> 00:21:47,400
IPv6 only across multiple domain and

419
00:21:47,400 --> 00:21:50,220
also because and this is database

420
00:21:50,220 --> 00:21:53,820
solution and with uh match this

421
00:21:53,820 --> 00:21:57,179
capability advantages so I think this

422
00:21:57,179 --> 00:22:00,179
draft is the solution proposed and

423
00:22:00,179 --> 00:22:04,020
architecture does work well so in

424
00:22:04,020 --> 00:22:07,799
addition I think this is related with uh

425
00:22:07,799 --> 00:22:10,260
also related with some of this solution

426
00:22:10,260 --> 00:22:13,080
in the control plane on the data plane I

427
00:22:13,080 --> 00:22:16,799
think all these architecture framework

428
00:22:16,799 --> 00:22:20,520
we should go on to propose the possible

429
00:22:20,520 --> 00:22:24,659
this solution work with this data plane

430
00:22:24,659 --> 00:22:26,760
and this is the control plane to make

431
00:22:26,760 --> 00:22:31,100
this architecture the complete

432
00:22:36,740 --> 00:22:40,980
oh hi hi everybody uh I'm also the

433
00:22:40,980 --> 00:22:44,159
co-author of this draft and uh

434
00:22:44,159 --> 00:22:46,980
okay you may know like we are doing

435
00:22:46,980 --> 00:22:49,100
stylish translation of those currency

436
00:22:49,100 --> 00:22:52,679
and we have the solution I mean ITF has

437
00:22:52,679 --> 00:22:55,340
solutions for the prefix

438
00:22:55,340 --> 00:23:00,000
fighting for example 70 50 or the ND to

439
00:23:00,000 --> 00:23:03,500
sign the prefix or DHCP to give like

440
00:23:03,500 --> 00:23:07,260
ours so currently we are working like

441
00:23:07,260 --> 00:23:10,020
internet and China Telecom try to work

442
00:23:10,020 --> 00:23:14,419
on Cross domain to pass this kind of

443
00:23:14,419 --> 00:23:17,520
transition information across domains I

444
00:23:17,520 --> 00:23:20,340
believe this is a natural extension to

445
00:23:20,340 --> 00:23:23,100
the previous discussion for the users

446
00:23:23,100 --> 00:23:25,679
but this is for the peers thank you very

447
00:23:25,679 --> 00:23:27,860
much

448
00:23:28,039 --> 00:23:32,000
thank you thank you

449
00:23:38,460 --> 00:23:41,280
if there's no more comments we will move

450
00:23:41,280 --> 00:23:45,139
on to the next job

451
00:24:03,299 --> 00:24:06,740
the requirements

452
00:24:18,600 --> 00:24:22,520
why a king of pigs makes this

453
00:24:31,500 --> 00:24:34,460
foreign

454
00:24:47,720 --> 00:24:49,380
this is

455
00:24:49,380 --> 00:24:51,840
um a couple of drafts on extension

456
00:24:51,840 --> 00:24:54,480
header testing uh um yeah

457
00:24:54,480 --> 00:24:58,340
troubleshooting uh next slide please

458
00:24:59,039 --> 00:25:01,020
so what I'm going to give you is the

459
00:25:01,020 --> 00:25:03,299
background of the problem and why we

460
00:25:03,299 --> 00:25:06,840
think topologies are important and then

461
00:25:06,840 --> 00:25:09,299
um the framework of how we want to

462
00:25:09,299 --> 00:25:12,120
proceed on this set of troubleshooting

463
00:25:12,120 --> 00:25:14,700
drafts uh next please

464
00:25:14,700 --> 00:25:16,320
so

465
00:25:16,320 --> 00:25:18,299
so

466
00:25:18,299 --> 00:25:20,700
um in the background so we started

467
00:25:20,700 --> 00:25:24,480
testing this before

468
00:25:24,480 --> 00:25:27,600
um gosh maybe about six seven months ago

469
00:25:27,600 --> 00:25:31,740
and the impetus really was is there were

470
00:25:31,740 --> 00:25:34,860
quite a few studies showing that there

471
00:25:34,860 --> 00:25:39,000
were huge numbers of packet drops with

472
00:25:39,000 --> 00:25:42,000
extension headers and so

473
00:25:42,000 --> 00:25:47,279
um in our own testing for our own

474
00:25:47,279 --> 00:25:49,679
extension header

475
00:25:49,679 --> 00:25:54,179
um we had found that in fact it all

476
00:25:54,179 --> 00:25:56,700
seemed to work just fine and so then

477
00:25:56,700 --> 00:26:01,340
what we wanted to do was to see exactly

478
00:26:01,340 --> 00:26:06,480
uh why things were not working and where

479
00:26:06,480 --> 00:26:09,419
things were not working so then we

480
00:26:09,419 --> 00:26:12,200
decided to come up with a methodology

481
00:26:12,200 --> 00:26:16,080
for why we're seeing it and so for

482
00:26:16,080 --> 00:26:17,580
example

483
00:26:17,580 --> 00:26:21,559
um from last time we presented at the

484
00:26:21,559 --> 00:26:26,279
iepg-114 we tested to

485
00:26:26,279 --> 00:26:30,900
um what I'll call is um uh naked servers

486
00:26:30,900 --> 00:26:34,980
the the 1980s topology of the internet

487
00:26:34,980 --> 00:26:37,559
which is you have a client you have the

488
00:26:37,559 --> 00:26:40,080
internet and you have a server so that's

489
00:26:40,080 --> 00:26:42,419
what we had we had a surfer and

490
00:26:42,419 --> 00:26:44,880
everything just went right flat out onto

491
00:26:44,880 --> 00:26:46,919
the internet there was no intervening

492
00:26:46,919 --> 00:26:49,380
network but but there were Transit

493
00:26:49,380 --> 00:26:52,140
networks of course but no intervening

494
00:26:52,140 --> 00:26:54,740
set of uh

495
00:26:54,740 --> 00:26:58,740
servers you know an edge to bound it for

496
00:26:58,740 --> 00:27:01,679
example behind a CDN or on a cloud

497
00:27:01,679 --> 00:27:04,919
Network and what we did is we said well

498
00:27:04,919 --> 00:27:07,919
we're going to try and go across

499
00:27:07,919 --> 00:27:11,520
multiple continents I mean so you know

500
00:27:11,520 --> 00:27:14,279
we're a small non-profit and we don't

501
00:27:14,279 --> 00:27:16,260
have like you know zillions of dollars

502
00:27:16,260 --> 00:27:19,080
for this and so we said well let's at

503
00:27:19,080 --> 00:27:22,460
least see if we can get servers through

504
00:27:22,460 --> 00:27:26,279
multiple uh continents and

505
00:27:26,279 --> 00:27:31,440
a background what we put in is we had at

506
00:27:31,440 --> 00:27:35,220
this point we had free BSD servers with

507
00:27:35,220 --> 00:27:38,220
a patch to the kernel so that they would

508
00:27:38,220 --> 00:27:41,820
send out an extension header with every

509
00:27:41,820 --> 00:27:45,360
single packet because what we wanted to

510
00:27:45,360 --> 00:27:49,159
test was real data you can craft packets

511
00:27:49,159 --> 00:27:53,580
but but we felt that it's much safer and

512
00:27:53,580 --> 00:27:56,640
much more Assurance if you can do like

513
00:27:56,640 --> 00:28:00,840
an actual uh application traffic because

514
00:28:00,840 --> 00:28:02,700
then you don't have to worry about you

515
00:28:02,700 --> 00:28:05,580
know is your packet being seen as a sin

516
00:28:05,580 --> 00:28:07,919
flood attack dos attack anything like

517
00:28:07,919 --> 00:28:10,740
that so what we did is we sent large

518
00:28:10,740 --> 00:28:14,460
ftps and you can see we sent them from

519
00:28:14,460 --> 00:28:17,279
Toronto to Warsaw to Seattle Frankfort

520
00:28:17,279 --> 00:28:21,539
everywhere we sent this huge FTP it all

521
00:28:21,539 --> 00:28:24,059
worked next please

522
00:28:24,059 --> 00:28:26,940
so so why are we seeing different

523
00:28:26,940 --> 00:28:29,720
results is it a difference in topology

524
00:28:29,720 --> 00:28:32,460
is it because we have a standalone

525
00:28:32,460 --> 00:28:37,020
server is it the type of eh the size

526
00:28:37,020 --> 00:28:39,059
um you know so there's a lot of

527
00:28:39,059 --> 00:28:41,520
different reasons that might be

528
00:28:41,520 --> 00:28:43,440
um or is it something else uh next

529
00:28:43,440 --> 00:28:45,620
please

530
00:28:45,720 --> 00:28:47,159
so

531
00:28:47,159 --> 00:28:50,940
what we wanted to do was develop a clear

532
00:28:50,940 --> 00:28:54,419
set of methodologies to say okay look

533
00:28:54,419 --> 00:28:57,320
these are the if you're in this topology

534
00:28:57,320 --> 00:29:01,500
these might be your issues if you're not

535
00:29:01,500 --> 00:29:02,940
seeing

536
00:29:02,940 --> 00:29:07,380
um uh extension headers for example it

537
00:29:07,380 --> 00:29:10,559
could be completely unrelated to the EXT

538
00:29:10,559 --> 00:29:13,380
presence of an extension header for

539
00:29:13,380 --> 00:29:18,020
example we found that for certain cdns

540
00:29:18,020 --> 00:29:22,320
IPv6 itself is disabled on the other

541
00:29:22,320 --> 00:29:25,799
side of the CDN so it should be uh no

542
00:29:25,799 --> 00:29:28,919
surprise that if IPv6 itself is not

543
00:29:28,919 --> 00:29:32,700
supported well then quite likely E8 also

544
00:29:32,700 --> 00:29:37,080
is not going to be supported next please

545
00:29:37,080 --> 00:29:39,899
so these are the topologies we looked at

546
00:29:39,899 --> 00:29:43,200
and in the next draft I will talk in

547
00:29:43,200 --> 00:29:45,659
particular about what I call the naked

548
00:29:45,659 --> 00:29:48,899
topology client internet server that's

549
00:29:48,899 --> 00:29:52,080
the simplest easiest to understand and

550
00:29:52,080 --> 00:29:54,600
then so let's start with that

551
00:29:54,600 --> 00:29:55,440
um

552
00:29:55,440 --> 00:29:59,039
the CDN topology can be quite

553
00:29:59,039 --> 00:30:01,260
interesting because you have to then and

554
00:30:01,260 --> 00:30:05,700
we tested this by moving our own FreeBSD

555
00:30:05,700 --> 00:30:08,399
server which sends extension headers

556
00:30:08,399 --> 00:30:11,580
we've moved our own server behind the

557
00:30:11,580 --> 00:30:14,220
CDN so we can control it we could take

558
00:30:14,220 --> 00:30:17,399
packet traces over there and on the

559
00:30:17,399 --> 00:30:21,539
other side and I am happy to share the

560
00:30:21,539 --> 00:30:23,820
packet traces with anybody who would

561
00:30:23,820 --> 00:30:25,620
like them so you can see for yourself

562
00:30:25,620 --> 00:30:28,380
and I can point you to the documentation

563
00:30:28,380 --> 00:30:31,559
of the various CDN servers if you would

564
00:30:31,559 --> 00:30:33,899
wish to try this yourself we're also

565
00:30:33,899 --> 00:30:37,020
trying the the cloud provider scenario

566
00:30:37,020 --> 00:30:39,419
next next please

567
00:30:39,419 --> 00:30:43,260
so this is the simplest topology what

568
00:30:43,260 --> 00:30:46,200
happens and again in some ways um

569
00:30:46,200 --> 00:30:49,140
sometimes when we're at the ietf I feel

570
00:30:49,140 --> 00:30:52,740
like this is the topology that we are

571
00:30:52,740 --> 00:30:56,399
all talking about whereas in reality

572
00:30:56,399 --> 00:30:59,700
this is quite infrequent that this is

573
00:30:59,700 --> 00:31:02,700
the topology that we're talking about it

574
00:31:02,700 --> 00:31:04,679
is sometimes the topology we're talking

575
00:31:04,679 --> 00:31:08,179
of uh next

576
00:31:08,460 --> 00:31:12,600
quite often for example if you go to the

577
00:31:12,600 --> 00:31:15,899
Alexa top 1000 or top one million or top

578
00:31:15,899 --> 00:31:18,720
whatever to the most trafficked websites

579
00:31:18,720 --> 00:31:24,860
they are behind at a minimum uh one CDN

580
00:31:24,860 --> 00:31:30,240
possibly multiple if for example uh sir

581
00:31:30,240 --> 00:31:33,240
if you're a video streaming company you

582
00:31:33,240 --> 00:31:37,380
may have uh at an actual CDN presence

583
00:31:37,380 --> 00:31:40,500
you may be also behind a CDN that your

584
00:31:40,500 --> 00:31:43,080
ISP provides you may have a contract

585
00:31:43,080 --> 00:31:46,140
with them so the topology becomes quite

586
00:31:46,140 --> 00:31:49,440
important because I will talk about this

587
00:31:49,440 --> 00:31:53,279
more next time when we talk about cdns

588
00:31:53,279 --> 00:31:57,480
but to spoiler alert what we have found

589
00:31:57,480 --> 00:32:01,620
is that quite often

590
00:32:01,620 --> 00:32:02,700
um

591
00:32:02,700 --> 00:32:07,020
if packets are not dropped out right by

592
00:32:07,020 --> 00:32:11,340
the CDN cache server uh Adam the the E8

593
00:32:11,340 --> 00:32:14,100
is not passed all the way through so

594
00:32:14,100 --> 00:32:15,600
again

595
00:32:15,600 --> 00:32:18,179
um this is quite interesting uh next

596
00:32:18,179 --> 00:32:20,419
please

597
00:32:20,820 --> 00:32:24,539
with Cloud providers it becomes uh um

598
00:32:24,539 --> 00:32:28,200
again quite an interesting uh topology

599
00:32:28,200 --> 00:32:31,340
and set of experiences are anecdotal

600
00:32:31,340 --> 00:32:34,740
experience right now with putting our

601
00:32:34,740 --> 00:32:39,240
extension header uh server behind one

602
00:32:39,240 --> 00:32:42,840
particular cloud provider is that

603
00:32:42,840 --> 00:32:44,880
um with when you're

604
00:32:44,880 --> 00:32:47,460
completely stand alone on the internet

605
00:32:47,460 --> 00:32:50,039
everything works fine the minute you

606
00:32:50,039 --> 00:32:51,779
behind you move behind the cloud

607
00:32:51,779 --> 00:32:55,679
Survivor so cloud provider again it

608
00:32:55,679 --> 00:32:59,100
stops working and and let me let me tell

609
00:32:59,100 --> 00:33:01,679
you we have two CDN providers who are

610
00:33:01,679 --> 00:33:04,740
working very closely with us to try to

611
00:33:04,740 --> 00:33:07,380
fix this situation and the first cloud

612
00:33:07,380 --> 00:33:10,260
provider that we are we have tested with

613
00:33:10,260 --> 00:33:13,380
they also uh have said they will work

614
00:33:13,380 --> 00:33:16,399
very closely with us to find out exactly

615
00:33:16,399 --> 00:33:20,159
where in their Network things might be

616
00:33:20,159 --> 00:33:21,779
done because

617
00:33:21,779 --> 00:33:23,880
um again the conversations with with

618
00:33:23,880 --> 00:33:25,740
them were

619
00:33:25,740 --> 00:33:28,500
um we did not realize we were doing this

620
00:33:28,500 --> 00:33:31,760
so so that is actually quite interesting

621
00:33:31,760 --> 00:33:33,899
that people

622
00:33:33,899 --> 00:33:36,480
um are not necessarily aware that

623
00:33:36,480 --> 00:33:38,460
they're even doing this so this is this

624
00:33:38,460 --> 00:33:41,340
is good and I think bodes well for the

625
00:33:41,340 --> 00:33:43,919
future next please

626
00:33:43,919 --> 00:33:47,519
so so this is our plan

627
00:33:47,519 --> 00:33:50,279
um we will have a set of drafts the

628
00:33:50,279 --> 00:33:52,080
first three

629
00:33:52,080 --> 00:33:52,740
um

630
00:33:52,740 --> 00:33:56,159
uh have to do with topology and I am

631
00:33:56,159 --> 00:33:59,820
sure that we will find problems and

632
00:33:59,820 --> 00:34:03,000
um during each of these and let me tell

633
00:34:03,000 --> 00:34:07,080
you is you know I I take what Fred Baker

634
00:34:07,080 --> 00:34:10,260
told me long long time ago hello Fred is

635
00:34:10,260 --> 00:34:12,839
that the purpose of the ietf is not to

636
00:34:12,839 --> 00:34:16,260
generate documents but it is to solve uh

637
00:34:16,260 --> 00:34:19,260
problems on the internet and somehow I

638
00:34:19,260 --> 00:34:22,080
have drunk his Kool-Aid and

639
00:34:22,080 --> 00:34:24,719
um I hope we can solve some of these uh

640
00:34:24,719 --> 00:34:27,719
problems and again that once we've done

641
00:34:27,719 --> 00:34:31,379
the topology ones we will then move to a

642
00:34:31,379 --> 00:34:33,739
particular

643
00:34:33,739 --> 00:34:37,619
pieces of equipment because just at the

644
00:34:37,619 --> 00:34:41,699
hackathon in ietf 114 we found

645
00:34:41,699 --> 00:34:45,179
um a router bug preventing uh eh

646
00:34:45,179 --> 00:34:47,699
transmission so this is why we want to

647
00:34:47,699 --> 00:34:51,060
go very slowly and methodically and go

648
00:34:51,060 --> 00:34:52,679
through all the potential topology

649
00:34:52,679 --> 00:34:57,379
energies and all the potential

650
00:34:58,099 --> 00:35:02,640
kinds of equipment because we really

651
00:35:02,640 --> 00:35:05,820
feel that extension headers are a very

652
00:35:05,820 --> 00:35:09,780
useful part of IPv6 and I hope we will

653
00:35:09,780 --> 00:35:12,960
be able to deploy them after we fix some

654
00:35:12,960 --> 00:35:16,700
of these problems next please

655
00:35:16,920 --> 00:35:18,839
so thank you so much any questions

656
00:35:18,839 --> 00:35:21,560
thoughts

657
00:35:23,640 --> 00:35:26,099
okay

658
00:35:26,099 --> 00:35:28,220
okay

659
00:35:30,800 --> 00:35:33,780
just very very stupid question my brain

660
00:35:33,780 --> 00:35:35,820
is not working how is the trouble

661
00:35:35,820 --> 00:35:39,000
shooting packets with packet drop with

662
00:35:39,000 --> 00:35:41,700
extension header fundamentally different

663
00:35:41,700 --> 00:35:44,400
from troubleshooting any other packet

664
00:35:44,400 --> 00:35:47,280
drop you might see between sources and

665
00:35:47,280 --> 00:35:49,440
destination

666
00:35:49,440 --> 00:35:51,839
I think they're like the methodology

667
00:35:51,839 --> 00:35:54,300
will be more or less the same

668
00:35:54,300 --> 00:35:56,640
I need to find where it's dropped and

669
00:35:56,640 --> 00:35:58,980
look in the device which is dropping it

670
00:35:58,980 --> 00:36:02,880
so I'm just not sure of what is so

671
00:36:02,880 --> 00:36:03,839
different

672
00:36:03,839 --> 00:36:06,359
that we need to focus on its

673
00:36:06,359 --> 00:36:08,460
specifically instead of providing maybe

674
00:36:08,460 --> 00:36:12,240
General guidance to operators how to

675
00:36:12,240 --> 00:36:13,680
turbo should start

676
00:36:13,680 --> 00:36:16,200
there's a very interesting question Jen

677
00:36:16,200 --> 00:36:19,800
very interesting I think I think

678
00:36:19,800 --> 00:36:20,700
um

679
00:36:20,700 --> 00:36:23,000
no no very very interesting because

680
00:36:23,000 --> 00:36:27,540
sometimes in fact the packet drop is

681
00:36:27,540 --> 00:36:33,359
because of IPv6 itself but I hang on one

682
00:36:33,359 --> 00:36:34,200
second

683
00:36:34,200 --> 00:36:39,359
but I think the difference is is that

684
00:36:39,359 --> 00:36:42,839
um in today's Networks

685
00:36:42,839 --> 00:36:44,060
um

686
00:36:44,060 --> 00:36:48,060
there's a specific you have to go out of

687
00:36:48,060 --> 00:36:51,599
your way to send extension headers and

688
00:36:51,599 --> 00:36:54,599
to send them at different sizes and

689
00:36:54,599 --> 00:36:59,220
different kinds and and so I think that

690
00:36:59,220 --> 00:37:02,160
is the difference and right now what we

691
00:37:02,160 --> 00:37:04,680
have been doing is

692
00:37:04,680 --> 00:37:09,060
um sending just our own uh PDM

693
00:37:09,060 --> 00:37:12,480
destination options because that is what

694
00:37:12,480 --> 00:37:16,200
we have as a real extension header we

695
00:37:16,200 --> 00:37:19,800
are redoing our methodology so that we

696
00:37:19,800 --> 00:37:20,820
have

697
00:37:20,820 --> 00:37:25,339
um uh We've implemented our our stack in

698
00:37:25,339 --> 00:37:29,880
ebpf which can send different kinds of

699
00:37:29,880 --> 00:37:33,300
extension headers and different sizes

700
00:37:33,300 --> 00:37:38,400
and so forth so so I think that's where

701
00:37:38,400 --> 00:37:41,900
we will add on do you see what I mean

702
00:37:41,900 --> 00:37:45,300
yeah in this case I I think what would

703
00:37:45,300 --> 00:37:47,880
be very very useful addition to your

704
00:37:47,880 --> 00:37:51,720
draft is to provide guidance how exactly

705
00:37:51,720 --> 00:37:53,820
shared those headers right because

706
00:37:53,820 --> 00:37:55,800
people who would need the guidance on

707
00:37:55,800 --> 00:37:57,660
how troubleshoot Network probably have

708
00:37:57,660 --> 00:38:00,720
no slightest idea how to insert a random

709
00:38:00,720 --> 00:38:03,300
field in a random IP packet right maybe

710
00:38:03,300 --> 00:38:06,240
some links to implementations and so on

711
00:38:06,240 --> 00:38:08,579
would be useful in a very very good

712
00:38:08,579 --> 00:38:11,220
point Jan yeah

713
00:38:11,220 --> 00:38:15,000
any other thoughts or so Suresh thanks

714
00:38:15,000 --> 00:38:17,520
uh thanks nalini so I'm not sure exactly

715
00:38:17,520 --> 00:38:18,960
how you're doing it but I do have an

716
00:38:18,960 --> 00:38:20,579
answer for Jen so I'll just run it by

717
00:38:20,579 --> 00:38:22,440
you see what you think okay great so

718
00:38:22,440 --> 00:38:24,720
what we can do is probably do two tests

719
00:38:24,720 --> 00:38:27,060
in parallel one for just IPv6 packet

720
00:38:27,060 --> 00:38:29,400
without the headers and one with headers

721
00:38:29,400 --> 00:38:31,920
right at the same time and then collect

722
00:38:31,920 --> 00:38:34,560
the statistics and then have a null

723
00:38:34,560 --> 00:38:36,000
hypothesis of it doesn't make a

724
00:38:36,000 --> 00:38:37,740
difference and if you get a p-value

725
00:38:37,740 --> 00:38:39,660
that's smaller then we do it I think

726
00:38:39,660 --> 00:38:42,300
Anna is here so maybe she's doing some

727
00:38:42,300 --> 00:38:43,920
tests too so if she can confirm that is

728
00:38:43,920 --> 00:38:46,339
it then it makes sense to me no no

729
00:38:46,339 --> 00:38:49,140
Suresh you are so right that actually is

730
00:38:49,140 --> 00:38:51,240
exactly in the draft and that actually

731
00:38:51,240 --> 00:38:54,839
is exactly what we did is is but I think

732
00:38:54,839 --> 00:38:57,660
her point was a little bit different is

733
00:38:57,660 --> 00:39:02,220
that in some ways it is true that that

734
00:39:02,220 --> 00:39:05,339
if that in either case it could be a

735
00:39:05,339 --> 00:39:07,380
firewall setting it could be the

736
00:39:07,380 --> 00:39:10,500
topology and so on but after that the

737
00:39:10,500 --> 00:39:12,599
next step is what you say and that is

738
00:39:12,599 --> 00:39:14,520
actually in our draft too and that is

739
00:39:14,520 --> 00:39:17,520
what we did is we said yes it passes

740
00:39:17,520 --> 00:39:20,220
without the extension header now let's

741
00:39:20,220 --> 00:39:22,740
see if the problem is extension header

742
00:39:22,740 --> 00:39:26,220
itself no very true thanks

743
00:39:26,220 --> 00:39:29,118
involved

744
00:39:29,240 --> 00:39:32,220
gory first wow this is high

745
00:39:32,220 --> 00:39:34,220
and

746
00:39:34,220 --> 00:39:37,380
so what is your intention with the

747
00:39:37,380 --> 00:39:39,540
recommendations that come out of this

748
00:39:39,540 --> 00:39:42,180
because I see two different pieces here

749
00:39:42,180 --> 00:39:44,400
I see if we're going to deploy and

750
00:39:44,400 --> 00:39:46,859
operate extension headers we need ways

751
00:39:46,859 --> 00:39:49,140
of knowing and managing that operation

752
00:39:49,140 --> 00:39:52,619
and the paths that support it but

753
00:39:52,619 --> 00:39:54,300
there's also guidance on how the

754
00:39:54,300 --> 00:39:56,940
extension headers should be implemented

755
00:39:56,940 --> 00:39:59,820
and how they should be used by the end

756
00:39:59,820 --> 00:40:02,579
points the end nods is that other part

757
00:40:02,579 --> 00:40:04,859
starting Sixth Man or is there some oval

758
00:40:04,859 --> 00:40:07,079
up here no yeah yeah I think I

759
00:40:07,079 --> 00:40:09,380
understood

760
00:40:12,060 --> 00:40:14,700
yeah yeah stop right there no no no go

761
00:40:14,700 --> 00:40:17,520
back to one go up one more okay yeah a

762
00:40:17,520 --> 00:40:19,260
really good question I mean and really

763
00:40:19,260 --> 00:40:21,720
good point gory there are two different

764
00:40:21,720 --> 00:40:25,260
things well maybe even three one it's

765
00:40:25,260 --> 00:40:29,820
like if I am a designer of a certain

766
00:40:29,820 --> 00:40:33,900
protocol or whatever and I wish to use a

767
00:40:33,900 --> 00:40:36,599
particular extension header what should

768
00:40:36,599 --> 00:40:40,260
that what should be done two if I'm a

769
00:40:40,260 --> 00:40:44,099
user of said protocol you know then what

770
00:40:44,099 --> 00:40:46,680
should be done that's very true and then

771
00:40:46,680 --> 00:40:50,040
but really I think um there's there's

772
00:40:50,040 --> 00:40:53,640
huh okay now this is kind of a morass

773
00:40:53,640 --> 00:40:56,880
but there's actually three four five and

774
00:40:56,880 --> 00:41:01,619
six which is which is if I am for

775
00:41:01,619 --> 00:41:04,920
example a router vendor or if I am a

776
00:41:04,920 --> 00:41:08,339
load balancer vendor or if I'm a CDN or

777
00:41:08,339 --> 00:41:11,460
if I'm a cloud provider what should what

778
00:41:11,460 --> 00:41:14,640
should be done and and that's a very

779
00:41:14,640 --> 00:41:16,680
very interesting topic you raised gory

780
00:41:16,680 --> 00:41:18,660
and one of the things I'm kind of

781
00:41:18,660 --> 00:41:21,839
thinking is that's why we want we want

782
00:41:21,839 --> 00:41:25,020
to figure out some of the problems and

783
00:41:25,020 --> 00:41:27,359
once we've figured out some of the

784
00:41:27,359 --> 00:41:29,940
problems and maybe even fix some of them

785
00:41:29,940 --> 00:41:33,480
then at the very last thing then then

786
00:41:33,480 --> 00:41:37,980
maybe we do a BCP and the BCP really is

787
00:41:37,980 --> 00:41:39,720
I think quite interesting because it's

788
00:41:39,720 --> 00:41:42,480
more it's it's like it's like what

789
00:41:42,480 --> 00:41:45,960
should people be doing and for certain

790
00:41:45,960 --> 00:41:49,440
extension headers what extension headers

791
00:41:49,440 --> 00:41:52,320
should be encrypted what should be

792
00:41:52,320 --> 00:41:55,320
authenticated what can go in the clear

793
00:41:55,320 --> 00:41:57,660
and then of course then people bring up

794
00:41:57,660 --> 00:41:59,460
the issue of

795
00:41:59,460 --> 00:42:03,540
limited domain is like is is it a

796
00:42:03,540 --> 00:42:06,240
limited domain is it not that's why I

797
00:42:06,240 --> 00:42:09,119
kind of want to kick that whole can down

798
00:42:09,119 --> 00:42:12,180
the road quite a bit is am I answering

799
00:42:12,180 --> 00:42:13,700
your question gory

800
00:42:13,700 --> 00:42:18,300
maybe I think the word BCP here we have

801
00:42:18,300 --> 00:42:21,660
to separate somehow I I to wait this

802
00:42:21,660 --> 00:42:23,579
work we need to advise operators what to

803
00:42:23,579 --> 00:42:25,680
do give them tooling help with

804
00:42:25,680 --> 00:42:28,079
configuration but

805
00:42:28,079 --> 00:42:30,359
finding whether you do encryption or

806
00:42:30,359 --> 00:42:32,099
authentication sounds like a protocol

807
00:42:32,099 --> 00:42:34,320
mechanism to me so we need to split

808
00:42:34,320 --> 00:42:37,560
apart the protocol recommendations which

809
00:42:37,560 --> 00:42:40,320
I think probably belong in in in six

810
00:42:40,320 --> 00:42:42,359
months from the operational

811
00:42:42,359 --> 00:42:44,099
considerations which are equally

812
00:42:44,099 --> 00:42:45,900
important but tell you how to configure

813
00:42:45,900 --> 00:42:47,820
how to use how to test how to know it's

814
00:42:47,820 --> 00:42:50,099
working and I think we have to clearly

815
00:42:50,099 --> 00:42:52,200
separate these out or we'll end for some

816
00:42:52,200 --> 00:42:54,240
really big morass as we start to make

817
00:42:54,240 --> 00:42:56,760
the recommendations no no really really

818
00:42:56,760 --> 00:42:58,800
good point gory and of course you know

819
00:42:58,800 --> 00:43:02,099
do I mean for everybody I mean please do

820
00:43:02,099 --> 00:43:04,500
contact we have a pretty big team

821
00:43:04,500 --> 00:43:06,660
helping and working with us already and

822
00:43:06,660 --> 00:43:08,579
anybody that wants to

823
00:43:08,579 --> 00:43:10,980
um you know work on this especially

824
00:43:10,980 --> 00:43:13,200
people who have commented at the mic

825
00:43:13,200 --> 00:43:14,460
such as gory

826
00:43:14,460 --> 00:43:17,940
if you got ideas you know yeah great

827
00:43:17,940 --> 00:43:19,140
perfect

828
00:43:19,140 --> 00:43:22,260
okay it's always a move on to the next

829
00:43:22,260 --> 00:43:25,099
yeah

830
00:43:25,740 --> 00:43:29,819
okay so so this one then now we'll now

831
00:43:29,819 --> 00:43:32,660
we'll start getting down to actually

832
00:43:32,660 --> 00:43:37,200
what methodology is okay so this is what

833
00:43:37,200 --> 00:43:39,720
I call the the naked or Standalone

834
00:43:39,720 --> 00:43:43,440
server this is Mr 1980s topology next

835
00:43:43,440 --> 00:43:45,619
please

836
00:43:46,440 --> 00:43:49,140
so as I said you know we've got a number

837
00:43:49,140 --> 00:43:51,660
of different topologies let's do the the

838
00:43:51,660 --> 00:43:56,060
easiest one first okay next please

839
00:43:58,380 --> 00:44:02,940
hello yeah so this is as I say

840
00:44:02,940 --> 00:44:06,119
um slightly joking I suppose about 1980s

841
00:44:06,119 --> 00:44:08,760
topology so we have the client you have

842
00:44:08,760 --> 00:44:11,339
the internet with multiple Transit

843
00:44:11,339 --> 00:44:14,160
networks whatever and a server and so

844
00:44:14,160 --> 00:44:16,319
let's just do that so then we've got

845
00:44:16,319 --> 00:44:20,420
that and in and in our case

846
00:44:20,420 --> 00:44:22,560
our our

847
00:44:22,560 --> 00:44:26,099
um server was eh enabled and and again I

848
00:44:26,099 --> 00:44:29,220
there are multiple ways to to do this

849
00:44:29,220 --> 00:44:31,680
and what Jen said was very interesting

850
00:44:31,680 --> 00:44:34,500
and and I we have to think whether to

851
00:44:34,500 --> 00:44:35,700
make

852
00:44:35,700 --> 00:44:38,640
um our code uh which is a work in

853
00:44:38,640 --> 00:44:41,760
progress to be available to others to

854
00:44:41,760 --> 00:44:44,700
test with very I have to think okay but

855
00:44:44,700 --> 00:44:47,819
that's kind of the topology next please

856
00:44:47,819 --> 00:44:49,500
so

857
00:44:49,500 --> 00:44:53,280
so that's the question really is like

858
00:44:53,280 --> 00:44:56,339
what do you how are you going to be able

859
00:44:56,339 --> 00:44:59,579
to send EHS there's there's a bunch of

860
00:44:59,579 --> 00:45:02,940
different ways as I say I'm kind of a

861
00:45:02,940 --> 00:45:06,119
bigot on the the send it with real data

862
00:45:06,119 --> 00:45:08,579
because because you know I feel like you

863
00:45:08,579 --> 00:45:10,740
know I mean there is awesome awful smart

864
00:45:10,740 --> 00:45:12,780
people who know how to craft packets

865
00:45:12,780 --> 00:45:15,480
perfectly and can send them so that it's

866
00:45:15,480 --> 00:45:16,980
not a

867
00:45:16,980 --> 00:45:19,200
um you know seen by anybody as a sin

868
00:45:19,200 --> 00:45:21,240
flood attack or a Dos attack and stuff

869
00:45:21,240 --> 00:45:23,339
you know I want to keep it simple for

870
00:45:23,339 --> 00:45:25,319
myself you know I'm like okay I'm just

871
00:45:25,319 --> 00:45:27,960
gonna send an FTP I know what it is I'm

872
00:45:27,960 --> 00:45:30,359
gonna do a curl I know what it is it's

873
00:45:30,359 --> 00:45:32,339
doing a real session I don't have to

874
00:45:32,339 --> 00:45:34,619
worry about sequence numbers any of that

875
00:45:34,619 --> 00:45:37,560
and so so then I'll do that so but you

876
00:45:37,560 --> 00:45:39,420
have to make that decision how are you

877
00:45:39,420 --> 00:45:41,460
going to do this how are you gonna you

878
00:45:41,460 --> 00:45:43,500
know that's a decision point there are

879
00:45:43,500 --> 00:45:45,960
there's lots of packages that you can

880
00:45:45,960 --> 00:45:46,980
craft

881
00:45:46,980 --> 00:45:50,520
um extension headers with but how are

882
00:45:50,520 --> 00:45:52,319
you going to add them and what's going

883
00:45:52,319 --> 00:45:54,839
to be the content of it and then of

884
00:45:54,839 --> 00:45:57,420
course what's the rate of sending and

885
00:45:57,420 --> 00:46:00,300
sampling because you know I mean you

886
00:46:00,300 --> 00:46:03,359
know as I say if you send like 20 TCP

887
00:46:03,359 --> 00:46:05,220
sin packets

888
00:46:05,220 --> 00:46:06,839
um and and you're not doing the if

889
00:46:06,839 --> 00:46:08,940
you've crafted it and you're not doing

890
00:46:08,940 --> 00:46:12,540
uh the entire synax sequence then you

891
00:46:12,540 --> 00:46:15,540
could be falling into sin flood attack

892
00:46:15,540 --> 00:46:18,000
protection so what you're testing is

893
00:46:18,000 --> 00:46:20,099
something entirely different from what

894
00:46:20,099 --> 00:46:22,319
you think you're testing or even even

895
00:46:22,319 --> 00:46:25,800
hitting up a performance enhancing proxy

896
00:46:25,800 --> 00:46:28,680
or who knows what which is responding to

897
00:46:28,680 --> 00:46:31,740
you so again you know I want to keep my

898
00:46:31,740 --> 00:46:34,440
simple brain simple so I like craft I

899
00:46:34,440 --> 00:46:36,599
like actual data but you have to make

900
00:46:36,599 --> 00:46:39,780
these decisions okay so next

901
00:46:39,780 --> 00:46:41,339
so then

902
00:46:41,339 --> 00:46:45,599
what we did is the first thing which is

903
00:46:45,599 --> 00:46:48,900
the way we're doing it which is that we

904
00:46:48,900 --> 00:46:51,780
have a test server enabled to send eh

905
00:46:51,780 --> 00:46:53,819
with every packet and of course we can

906
00:46:53,819 --> 00:46:55,859
turn that on and off because the first

907
00:46:55,859 --> 00:46:59,220
thing we do is we send it off so then

908
00:46:59,220 --> 00:47:00,660
you know if the packet is getting

909
00:47:00,660 --> 00:47:02,880
through at all and if the packet's not

910
00:47:02,880 --> 00:47:05,040
getting through at all without the eh

911
00:47:05,040 --> 00:47:08,220
well then you know I mean whatever right

912
00:47:08,220 --> 00:47:11,119
or if it's not getting through in IPv6

913
00:47:11,119 --> 00:47:15,000
well then okay I mean right

914
00:47:15,000 --> 00:47:17,700
um so but this is what we did we had a

915
00:47:17,700 --> 00:47:19,980
test server and now and now it's an

916
00:47:19,980 --> 00:47:23,640
Ubuntu server with ebpf sending eh with

917
00:47:23,640 --> 00:47:26,280
every packet and then we put up um I

918
00:47:26,280 --> 00:47:28,619
believe we put up Apache

919
00:47:28,619 --> 00:47:31,160
um and and we put up a huge old

920
00:47:31,160 --> 00:47:34,440
index.html so that in our case not only

921
00:47:34,440 --> 00:47:37,319
does it send back the Doh extension

922
00:47:37,319 --> 00:47:39,839
header but it's fragments and so we got

923
00:47:39,839 --> 00:47:42,420
fragment headers coming back and then

924
00:47:42,420 --> 00:47:45,420
the most important thing in my mind is

925
00:47:45,420 --> 00:47:49,079
taking a packet trace on both sides at

926
00:47:49,079 --> 00:47:51,240
the same time that's why you want to

927
00:47:51,240 --> 00:47:54,300
have control because if you don't know

928
00:47:54,300 --> 00:47:56,280
what because if you're sending one thing

929
00:47:56,280 --> 00:47:58,920
you want to make sure what you sent and

930
00:47:58,920 --> 00:48:00,960
what you received is the same thing okay

931
00:48:00,960 --> 00:48:03,740
so next please

932
00:48:03,780 --> 00:48:07,560
so this is what we did and and um so so

933
00:48:07,560 --> 00:48:10,079
what we did is just we configured it

934
00:48:10,079 --> 00:48:13,380
first not to send extension headers did

935
00:48:13,380 --> 00:48:16,619
the thing and then we did an HTTP curl

936
00:48:16,619 --> 00:48:18,420
to see if that got through

937
00:48:18,420 --> 00:48:19,980
and then

938
00:48:19,980 --> 00:48:24,240
um uh go ahead and sent an eh and you

939
00:48:24,240 --> 00:48:27,359
may also want to send to just the IP

940
00:48:27,359 --> 00:48:30,720
address and not a DNS name to you know

941
00:48:30,720 --> 00:48:33,420
to eliminate that part and then you can

942
00:48:33,420 --> 00:48:36,000
of course elaborate send DNS names

943
00:48:36,000 --> 00:48:39,359
whatever next

944
00:48:39,660 --> 00:48:42,839
yeah and then and then come back and

945
00:48:42,839 --> 00:48:45,599
send it with eh

946
00:48:45,599 --> 00:48:48,300
um do the same thing do an HT this is

947
00:48:48,300 --> 00:48:49,980
what we did is it it's a pretty simple

948
00:48:49,980 --> 00:48:53,660
thing to follow next please

949
00:48:54,180 --> 00:48:57,240
so then then if normal problem diagnosis

950
00:48:57,240 --> 00:48:59,640
are you are you know are you which

951
00:48:59,640 --> 00:49:02,220
packets are you not getting are you not

952
00:49:02,220 --> 00:49:05,760
getting them with EH without eh what you

953
00:49:05,760 --> 00:49:07,619
know but you've got traces on both sides

954
00:49:07,619 --> 00:49:11,000
so you can compare next

955
00:49:12,119 --> 00:49:15,480
so in the next thing again we I think we

956
00:49:15,480 --> 00:49:17,599
need to discuss

957
00:49:17,599 --> 00:49:20,160
how to craft packets

958
00:49:20,160 --> 00:49:22,500
um and do it if you're using a crafting

959
00:49:22,500 --> 00:49:24,480
methodology because then you you

960
00:49:24,480 --> 00:49:26,940
probably can't do a curl but then so

961
00:49:26,940 --> 00:49:29,420
we'll do some um some recommendations

962
00:49:29,420 --> 00:49:33,300
I'm tentatively thinking uh send a few

963
00:49:33,300 --> 00:49:36,060
TCP sin packets

964
00:49:36,060 --> 00:49:38,760
um and and see what you get back we've

965
00:49:38,760 --> 00:49:42,000
tried crafting UDP packets um icmp

966
00:49:42,000 --> 00:49:45,960
packets too but I think probably sending

967
00:49:45,960 --> 00:49:49,380
just a few tcps in is the way to go

968
00:49:49,380 --> 00:49:51,480
um and then we will add

969
00:49:51,480 --> 00:49:53,460
um more discussion and troubleshooting

970
00:49:53,460 --> 00:49:56,700
where to look at the problem with more

971
00:49:56,700 --> 00:50:00,780
troubleshooting is that if it works

972
00:50:00,780 --> 00:50:03,660
without eh

973
00:50:03,660 --> 00:50:05,880
um uh that's one thing

974
00:50:05,880 --> 00:50:08,940
if it works then it stops working with

975
00:50:08,940 --> 00:50:10,160
EH

976
00:50:10,160 --> 00:50:13,380
it's a that becomes problematic that may

977
00:50:13,380 --> 00:50:14,940
need to wait for some of the other

978
00:50:14,940 --> 00:50:16,920
drafts because then you need to think

979
00:50:16,920 --> 00:50:19,020
you can test some things fairly easily

980
00:50:19,020 --> 00:50:21,300
like are you dropping it right at your

981
00:50:21,300 --> 00:50:24,180
Source or not but some of the other

982
00:50:24,180 --> 00:50:28,380
things if it is indeed uh going behind

983
00:50:28,380 --> 00:50:31,079
if it's in a Transit Network and so on

984
00:50:31,079 --> 00:50:34,680
or if it's at some kind of router uh

985
00:50:34,680 --> 00:50:38,280
then as I say as we get down the road on

986
00:50:38,280 --> 00:50:41,760
this we'll have more guidance uh at that

987
00:50:41,760 --> 00:50:44,760
part so some of this will be limited

988
00:50:44,760 --> 00:50:46,980
um guidance at this point but as the

989
00:50:46,980 --> 00:50:49,619
other Drafts come along then we'll have

990
00:50:49,619 --> 00:50:52,319
more discussion uh there

991
00:50:52,319 --> 00:50:56,160
okay anything else yep so that's it

992
00:50:56,160 --> 00:50:59,099
that's it for this draft and um we'll be

993
00:50:59,099 --> 00:51:01,260
working on the CDN and cloud provider

994
00:51:01,260 --> 00:51:04,859
drafts uh as they uh come along any

995
00:51:04,859 --> 00:51:07,859
thoughts questions

996
00:51:07,859 --> 00:51:09,240
all right everybody got their thoughts

997
00:51:09,240 --> 00:51:12,059
and questions with the last draft

998
00:51:12,059 --> 00:51:16,040
yep okay oh

999
00:51:16,440 --> 00:51:19,040
Anton

1000
00:51:23,040 --> 00:51:24,740
hello Anthony

1001
00:51:24,740 --> 00:51:27,300
uh you mentioned in the test that you

1002
00:51:27,300 --> 00:51:29,940
would send TCP syn packets in your

1003
00:51:29,940 --> 00:51:33,119
testing are you willing to go through

1004
00:51:33,119 --> 00:51:35,660
the world uh since

1005
00:51:35,660 --> 00:51:39,059
uh sequence because I think that if you

1006
00:51:39,059 --> 00:51:41,760
just send TCP since to probe you will be

1007
00:51:41,760 --> 00:51:45,140
blacklisted by uh Sin Sin food

1008
00:51:45,140 --> 00:51:48,359
prevention mechanisms no no I told

1009
00:51:48,359 --> 00:51:51,059
totally hear you I totally hear you and

1010
00:51:51,059 --> 00:51:54,960
and um but see that's why I like to have

1011
00:51:54,960 --> 00:51:57,960
the application send it gets tricky when

1012
00:51:57,960 --> 00:52:01,619
you're crafting packets to do a synapse

1013
00:52:01,619 --> 00:52:04,980
sequence but I totally hear you and and

1014
00:52:04,980 --> 00:52:07,440
um let me is it's a good point let me

1015
00:52:07,440 --> 00:52:10,099
think how I can craft uh

1016
00:52:10,099 --> 00:52:13,800
a sequence of packets yeah no no totally

1017
00:52:13,800 --> 00:52:17,640
good yep uh usually uh people that were

1018
00:52:17,640 --> 00:52:20,880
testing mptcp we are injecting uh things

1019
00:52:20,880 --> 00:52:24,180
at the circuit level in in Linux by

1020
00:52:24,180 --> 00:52:27,359
overloading the memory space memory

1021
00:52:27,359 --> 00:52:29,880
circuit options so this is something

1022
00:52:29,880 --> 00:52:32,160
that you can do inside the application

1023
00:52:32,160 --> 00:52:34,740
so you can loads or get options beside

1024
00:52:34,740 --> 00:52:37,380
the application and inject parameters

1025
00:52:37,380 --> 00:52:39,660
that the toolkit is taking into account

1026
00:52:39,660 --> 00:52:41,880
to craft the packet so maybe this is the

1027
00:52:41,880 --> 00:52:43,859
way a way you want to do for your

1028
00:52:43,859 --> 00:52:46,500
testing yeah let me talk to you offline

1029
00:52:46,500 --> 00:52:48,480
and get get some hints from you thank

1030
00:52:48,480 --> 00:52:52,460
you that's a that's a great comment

1031
00:52:57,960 --> 00:52:59,220
hey

1032
00:52:59,220 --> 00:53:01,200
um uh did you see any pocket drops

1033
00:53:01,200 --> 00:53:03,119
related to

1034
00:53:03,119 --> 00:53:05,339
um M2 issues and did you distinguish

1035
00:53:05,339 --> 00:53:07,339
this package drops from

1036
00:53:07,339 --> 00:53:11,700
yeah no okay so in our testing with what

1037
00:53:11,700 --> 00:53:14,400
I'll call the naked servers

1038
00:53:14,400 --> 00:53:17,700
um we saw tons of fragmentation and we

1039
00:53:17,700 --> 00:53:20,880
did not see packet drops due to MTU

1040
00:53:20,880 --> 00:53:22,859
issues we

1041
00:53:22,859 --> 00:53:26,339
we um again again

1042
00:53:26,339 --> 00:53:29,579
um this was limited testing that we did

1043
00:53:29,579 --> 00:53:32,520
because let's add this there was a sad

1044
00:53:32,520 --> 00:53:34,619
story with the free BSD we had we ran

1045
00:53:34,619 --> 00:53:36,660
into it we had an old kernel that we

1046
00:53:36,660 --> 00:53:38,760
couldn't get get upgraded and couldn't

1047
00:53:38,760 --> 00:53:40,680
register so we were rewriting the code

1048
00:53:40,680 --> 00:53:42,680
in ebpf

1049
00:53:42,680 --> 00:53:45,720
that is something that super concerns me

1050
00:53:45,720 --> 00:53:48,660
is MTU drops because we need because

1051
00:53:48,660 --> 00:53:50,819
right now what happened is is these

1052
00:53:50,819 --> 00:53:53,700
these servers had a big old interface it

1053
00:53:53,700 --> 00:53:55,440
had a huge interface which is actually

1054
00:53:55,440 --> 00:53:57,900
good because then we saw fragmentation

1055
00:53:57,900 --> 00:54:01,020
but if we go from a small interface or

1056
00:54:01,020 --> 00:54:02,819
something like that and we start doing

1057
00:54:02,819 --> 00:54:05,579
Source fragmentation yeah we have to see

1058
00:54:05,579 --> 00:54:08,040
about MTU issues very good point we

1059
00:54:08,040 --> 00:54:11,700
haven't gotten there yet in in this bare

1060
00:54:11,700 --> 00:54:15,319
set of testing we didn't see it

1061
00:54:16,940 --> 00:54:19,500
hi hi thank you very much for the work

1062
00:54:19,500 --> 00:54:21,119
you're doing

1063
00:54:21,119 --> 00:54:22,740
um so just to let you know we have a

1064
00:54:22,740 --> 00:54:24,780
tool called Pathfinder at University of

1065
00:54:24,780 --> 00:54:25,940
Aberdeen

1066
00:54:25,940 --> 00:54:28,859
this tool can already craft whatever

1067
00:54:28,859 --> 00:54:32,280
packet you may want to send and can do

1068
00:54:32,280 --> 00:54:35,700
scene not just in a complete handshake

1069
00:54:35,700 --> 00:54:37,680
test already

1070
00:54:37,680 --> 00:54:40,020
great great so let's talk and then maybe

1071
00:54:40,020 --> 00:54:43,260
maybe we can use your tool and do the

1072
00:54:43,260 --> 00:54:46,440
methodology for the how to do crafted

1073
00:54:46,440 --> 00:54:49,079
packets we talk offline yeah that's

1074
00:54:49,079 --> 00:54:52,500
perfect because as I say it's a we

1075
00:54:52,500 --> 00:54:55,859
concentrate on the the the real

1076
00:54:55,859 --> 00:54:58,500
application but I know you guys are

1077
00:54:58,500 --> 00:55:00,960
doing some great work and so is it will

1078
00:55:00,960 --> 00:55:03,359
be very good to collaborate yeah thank

1079
00:55:03,359 --> 00:55:06,200
you Anna thanks

1080
00:55:08,460 --> 00:55:11,000
something

1081
00:55:13,940 --> 00:55:16,500
does he have

1082
00:55:16,500 --> 00:55:20,180
something you want to say something

1083
00:55:32,420 --> 00:55:35,280
if not then we

1084
00:55:35,280 --> 00:55:37,920
no problem no yeah then I don't have

1085
00:55:37,920 --> 00:55:39,420
anything I guess the question would be

1086
00:55:39,420 --> 00:55:41,160
then it's a question for the chairs and

1087
00:55:41,160 --> 00:55:43,980
the group is is is this work that we

1088
00:55:43,980 --> 00:55:47,160
want to uh take on uh or maybe after it

1089
00:55:47,160 --> 00:55:49,020
matures but at some point I suppose we

1090
00:55:49,020 --> 00:55:50,579
had to make that decision

1091
00:55:50,579 --> 00:55:54,000
okay yeah okay anything else okay then

1092
00:55:54,000 --> 00:55:56,660
thank you so much

1093
00:56:02,220 --> 00:56:05,180
the next one is

1094
00:56:15,480 --> 00:56:17,640
hello can you hear me

1095
00:56:17,640 --> 00:56:20,220
now yes

1096
00:56:20,220 --> 00:56:24,660
okay thank you so uh in my draft uh I

1097
00:56:24,660 --> 00:56:26,880
just accumulate some some test results

1098
00:56:26,880 --> 00:56:30,420
which I hope can help the network

1099
00:56:30,420 --> 00:56:33,480
operators to to find the right IP

1100
00:56:33,480 --> 00:56:35,280
version for the service technology for

1101
00:56:35,280 --> 00:56:38,400
their networks and we could you go to

1102
00:56:38,400 --> 00:56:41,119
the next slide please

1103
00:56:42,660 --> 00:56:45,680
thank you so currently we tested uh

1104
00:56:45,680 --> 00:56:48,420
464xlat and map D regarding their

1105
00:56:48,420 --> 00:56:49,559
scalability

1106
00:56:49,559 --> 00:56:52,619
and we had the privilege that we could

1107
00:56:52,619 --> 00:56:55,020
use the same implementation for both

1108
00:56:55,020 --> 00:56:56,220
Technologies

1109
00:56:56,220 --> 00:56:58,079
so Jewel was

1110
00:56:58,079 --> 00:57:01,619
recommended a few ideas ago and it

1111
00:57:01,619 --> 00:57:04,559
implements currently both 464 xlat and

1112
00:57:04,559 --> 00:57:07,920
map T so we could we could test both

1113
00:57:07,920 --> 00:57:09,000
Technologies with the same

1114
00:57:09,000 --> 00:57:12,900
implementation just uh to to avoid the

1115
00:57:12,900 --> 00:57:15,480
problem that that different implementers

1116
00:57:15,480 --> 00:57:19,260
we can do better or reverse job

1117
00:57:19,260 --> 00:57:22,800
so the testing method was that we use

1118
00:57:22,800 --> 00:57:24,780
the customer Edge and the provider Edge

1119
00:57:24,780 --> 00:57:27,000
devices together and Benchmark them

1120
00:57:27,000 --> 00:57:29,880
together and we used DNS traffic for

1121
00:57:29,880 --> 00:57:32,160
testing just because we had a DNS

1122
00:57:32,160 --> 00:57:34,500
testing tool which which we use for for

1123
00:57:34,500 --> 00:57:36,240
testing sending packets and and

1124
00:57:36,240 --> 00:57:38,040
receiving back the packets could you go

1125
00:57:38,040 --> 00:57:39,900
to the next slide please

1126
00:57:39,900 --> 00:57:42,079
foreign

1127
00:57:43,500 --> 00:57:45,480
thank you so this is the measurement

1128
00:57:45,480 --> 00:57:47,780
setup it was used for for both

1129
00:57:47,780 --> 00:57:50,160
Technologies and before those

1130
00:57:50,160 --> 00:57:53,640
Technologies we also debted them as uh

1131
00:57:53,640 --> 00:57:56,520
just two routers were there just to test

1132
00:57:56,520 --> 00:58:00,300
the the performance of the the system so

1133
00:58:00,300 --> 00:58:03,359
on the bottom left corner you can see uh

1134
00:58:03,359 --> 00:58:06,540
IP version for client running the DNS 64

1135
00:58:06,540 --> 00:58:09,119
Plus testing program and the bottom

1136
00:58:09,119 --> 00:58:12,720
right corner you can see uh other IP

1137
00:58:12,720 --> 00:58:15,660
version 4 server running the convert DNS

1138
00:58:15,660 --> 00:58:19,079
it was just used to to answer the

1139
00:58:19,079 --> 00:58:20,460
queries

1140
00:58:20,460 --> 00:58:23,540
and it has high enough performance

1141
00:58:23,540 --> 00:58:27,720
without these sealer 10 pilot when we

1142
00:58:27,720 --> 00:58:29,400
just tested them with routers we

1143
00:58:29,400 --> 00:58:30,960
achieved two million packets per second

1144
00:58:30,960 --> 00:58:34,079
so it was made more than enough that to

1145
00:58:34,079 --> 00:58:38,339
test the Technologies so on the top left

1146
00:58:38,339 --> 00:58:40,500
corner you can see the signal in the top

1147
00:58:40,500 --> 00:58:42,359
right corner you can see the pilot of

1148
00:58:42,359 --> 00:58:45,839
4648 slot and they were connected by 10

1149
00:58:45,839 --> 00:58:48,180
gigabit links using vlans could you go

1150
00:58:48,180 --> 00:58:51,020
to the next slide please

1151
00:58:51,059 --> 00:58:53,880
thank you so you can see very little

1152
00:58:53,880 --> 00:58:58,140
change this is the test setup for map t

1153
00:58:58,140 --> 00:59:01,140
on the top left corner and top right

1154
00:59:01,140 --> 00:59:04,260
corner you can see the CE and BR devices

1155
00:59:04,260 --> 00:59:07,140
of the macp technology and we had all

1156
00:59:07,140 --> 00:59:09,780
the necessary settings so this is the

1157
00:59:09,780 --> 00:59:11,819
test networks for for our test and could

1158
00:59:11,819 --> 00:59:14,720
you go to the next slide

1159
00:59:15,540 --> 00:59:19,200
thank you so we tested the performance

1160
00:59:19,200 --> 00:59:22,680
of the system uh regarding uh how it

1161
00:59:22,680 --> 00:59:24,960
scales up with the number of CPU cores

1162
00:59:24,960 --> 00:59:29,640
so in both devices the the

1163
00:59:29,640 --> 00:59:31,980
customer Edge and provider Edge devices

1164
00:59:31,980 --> 00:59:34,619
we increased the number of active CPU

1165
00:59:34,619 --> 00:59:37,799
cores from one by doubling then their

1166
00:59:37,799 --> 00:59:40,319
number up to 16.

1167
00:59:40,319 --> 00:59:43,140
and we use the binary search to find the

1168
00:59:43,140 --> 00:59:45,240
highest rate at which near the order

1169
00:59:45,240 --> 00:59:48,599
values were resolved within timeout time

1170
00:59:48,599 --> 00:59:53,099
we allowed 0.01 percent packet loss and

1171
00:59:53,099 --> 00:59:55,319
here are the parameters just to have

1172
00:59:55,319 --> 00:59:58,440
everything here the the published

1173
00:59:58,440 --> 01:00:01,799
servers and we use Debian Linux 10 and

1174
01:00:01,799 --> 01:00:04,920
Joule 4.2 it was just a release

1175
01:00:04,920 --> 01:00:07,140
candidate because that time it was not

1176
01:00:07,140 --> 01:00:10,140
fully released but we had to use the

1177
01:00:10,140 --> 01:00:12,960
same version for both Technologies to be

1178
01:00:12,960 --> 01:00:15,119
fair with them could you go to the next

1179
01:00:15,119 --> 01:00:17,359
slide

1180
01:00:17,640 --> 01:00:19,740
thank you so here are the results for

1181
01:00:19,740 --> 01:00:22,079
464x that

1182
01:00:22,079 --> 01:00:23,400
uh

1183
01:00:23,400 --> 01:00:25,380
here you see the number of active CPU

1184
01:00:25,380 --> 01:00:29,160
cores both in the silat and pilot and

1185
01:00:29,160 --> 01:00:31,559
here the results of course the most

1186
01:00:31,559 --> 01:00:33,839
interesting things are the medians

1187
01:00:33,839 --> 01:00:36,000
because we executed the test for 10

1188
01:00:36,000 --> 01:00:39,599
times and calculated the medians and of

1189
01:00:39,599 --> 01:00:42,299
course we also added a minimum maximum

1190
01:00:42,299 --> 01:00:45,059
here to show that the results were quite

1191
01:00:45,059 --> 01:00:47,339
consistent so the practically no

1192
01:00:47,339 --> 01:00:48,780
significant difference between minimum

1193
01:00:48,780 --> 01:00:49,980
maximum

1194
01:00:49,980 --> 01:00:51,900
and

1195
01:00:51,900 --> 01:00:54,540
you can see that

1196
01:00:54,540 --> 01:00:58,260
there's a certain scalability so the two

1197
01:00:58,260 --> 01:01:01,740
core results are 43 higher than the one

1198
01:01:01,740 --> 01:01:05,040
core results and the four core results

1199
01:01:05,040 --> 01:01:09,720
are 79 higher than two core results and

1200
01:01:09,720 --> 01:01:11,400
still there are some increase and the

1201
01:01:11,400 --> 01:01:13,619
eight core is at about 10 percent and

1202
01:01:13,619 --> 01:01:14,940
about

1203
01:01:14,940 --> 01:01:18,299
four percent when we switch from Focus

1204
01:01:18,299 --> 01:01:21,420
to 16 but it's here the the

1205
01:01:21,420 --> 01:01:24,059
the the law of diminishing returns that

1206
01:01:24,059 --> 01:01:26,040
even if we double the number of CPU

1207
01:01:26,040 --> 01:01:28,980
cores uh it doesn't scale up well

1208
01:01:28,980 --> 01:01:31,880
about four cores yeah you can you can

1209
01:01:31,880 --> 01:01:34,980
see some some strange thing that's why

1210
01:01:34,980 --> 01:01:38,040
it was just 43 percent at two cores and

1211
01:01:38,040 --> 01:01:41,579
then 79 that Focus the explanation is

1212
01:01:41,579 --> 01:01:45,000
very simple we use the CPU uh which has

1213
01:01:45,000 --> 01:01:48,240
a kind of new architecture that the uh

1214
01:01:48,240 --> 01:01:51,960
even no number of CPU cores that is uh

1215
01:01:51,960 --> 01:01:55,799
to uh so of course zero two four six

1216
01:01:55,799 --> 01:01:58,500
belong to number node zero and the odd

1217
01:01:58,500 --> 01:02:01,380
number of cores one three five ETC

1218
01:02:01,380 --> 01:02:05,640
number node one and from one note to two

1219
01:02:05,640 --> 01:02:08,280
core when we changed we we can to have

1220
01:02:08,280 --> 01:02:11,059
an uh numer homogeneous system and then

1221
01:02:11,059 --> 01:02:15,000
after that it was always homogeneous so

1222
01:02:15,000 --> 01:02:17,520
there's not no such problem could you go

1223
01:02:17,520 --> 01:02:20,299
to the next slide please

1224
01:02:20,700 --> 01:02:23,339
thank you and you can see that the same

1225
01:02:23,339 --> 01:02:26,940
thing also happened with map d uh the

1226
01:02:26,940 --> 01:02:30,020
increase from two cores to four courses

1227
01:02:30,020 --> 01:02:32,579
higher than for one quarter two cores

1228
01:02:32,579 --> 01:02:35,339
but the ink is always much higher than

1229
01:02:35,339 --> 01:02:40,140
than with uh 464x so it shows a much

1230
01:02:40,140 --> 01:02:42,180
much better scale up much better

1231
01:02:42,180 --> 01:02:46,020
scalability even this is 42 percent uh

1232
01:02:46,020 --> 01:02:49,020
increase when we use 16 cores instead of

1233
01:02:49,020 --> 01:02:51,359
eight cores so we can say that as

1234
01:02:51,359 --> 01:02:55,079
expected map t scale of better than 465

1235
01:02:55,079 --> 01:02:58,619
flat could you go to the next slide

1236
01:02:58,619 --> 01:03:02,099
yes here you can see graphically

1237
01:03:02,099 --> 01:03:04,920
it is also true that

1238
01:03:04,920 --> 01:03:08,220
map D started with somewhat lower single

1239
01:03:08,220 --> 01:03:12,299
core result but then it has overtaken

1240
01:03:12,299 --> 01:03:16,380
and surpassed the performance of of 4648

1241
01:03:16,380 --> 01:03:18,960
Flats so map the showed much better

1242
01:03:18,960 --> 01:03:21,599
scale up than 464 xlot could you go to

1243
01:03:21,599 --> 01:03:24,140
the next slide

1244
01:03:25,020 --> 01:03:30,119
yes that's it so uh here are results we

1245
01:03:30,119 --> 01:03:31,740
published in a paper This Is An Open

1246
01:03:31,740 --> 01:03:33,780
Access paper so if you're interested in

1247
01:03:33,780 --> 01:03:35,819
the details you can check our

1248
01:03:35,819 --> 01:03:38,040
measurements and now I have the question

1249
01:03:38,040 --> 01:03:40,799
if if you find these things interesting

1250
01:03:40,799 --> 01:03:44,040
or useful as as Network operators and

1251
01:03:44,040 --> 01:03:47,099
yeah I can see that Eric is in the queue

1252
01:03:47,099 --> 01:03:49,460
thank you

1253
01:03:51,780 --> 01:03:54,540
so to thank you interesting just the

1254
01:03:54,540 --> 01:03:55,619
questions

1255
01:03:55,619 --> 01:03:57,960
where all those DNS query is used to

1256
01:03:57,960 --> 01:04:00,599
generate traffic we're always using the

1257
01:04:00,599 --> 01:04:03,180
same Source port

1258
01:04:03,180 --> 01:04:06,839
sorry uh the source board I mean my

1259
01:04:06,839 --> 01:04:08,819
understanding is that you were using a

1260
01:04:08,819 --> 01:04:11,819
DNS traffic right for Generate the load

1261
01:04:11,819 --> 01:04:14,099
yes where all those queries

1262
01:04:14,099 --> 01:04:17,420
coming from the sales UDP ports

1263
01:04:17,420 --> 01:04:19,920
the queries came from different UDP

1264
01:04:19,920 --> 01:04:22,140
ports of course the queries were going

1265
01:04:22,140 --> 01:04:23,280
all to

1266
01:04:23,280 --> 01:04:26,819
UDP Port 53 but we used uh different uh

1267
01:04:26,819 --> 01:04:29,160
Source ports because we wanted to use

1268
01:04:29,160 --> 01:04:32,819
LSS receive site scaling so we used okay

1269
01:04:32,819 --> 01:04:36,299
the details we used 16 cores to send

1270
01:04:36,299 --> 01:04:38,400
queries and under 16 cores to receive

1271
01:04:38,400 --> 01:04:41,460
the replies at the client at the tester

1272
01:04:41,460 --> 01:04:45,540
and as far as I remember uh 100

1273
01:04:45,540 --> 01:04:48,260
different Source Force numbers were used

1274
01:04:48,260 --> 01:04:50,480
per

1275
01:04:50,480 --> 01:04:55,740
sending cores so all together 1 600

1276
01:04:55,740 --> 01:04:57,420
different Source port numbers were used

1277
01:04:57,420 --> 01:05:01,020
it was the number because of map D so

1278
01:05:01,020 --> 01:05:03,359
you know that map D Limits The Source

1279
01:05:03,359 --> 01:05:05,940
port numbers and they wanted to be below

1280
01:05:05,940 --> 01:05:09,500
2000 so this is why we used only 100 and

1281
01:05:09,500 --> 01:05:12,960
1600 different Source port numbers

1282
01:05:12,960 --> 01:05:15,660
okay I was wondering because I would

1283
01:05:15,660 --> 01:05:17,460
expect if you get a huge variety of

1284
01:05:17,460 --> 01:05:20,040
source ports this could have maybe an

1285
01:05:20,040 --> 01:05:22,380
impact on the performance as well

1286
01:05:22,380 --> 01:05:24,500
just wondering uh

1287
01:05:24,500 --> 01:05:28,160
we used a multiple Source port numbers

1288
01:05:28,160 --> 01:05:35,599
uh to to enable NSS to share the

1289
01:05:35,599 --> 01:05:38,760
interrupts between the CPU cores of the

1290
01:05:38,760 --> 01:05:41,720
of the servers

1291
01:05:41,780 --> 01:05:45,540
so they were more or less equally shared

1292
01:05:45,540 --> 01:05:47,400
so it's enough to distribute the

1293
01:05:47,400 --> 01:05:50,160
interrupts so if we used much much more

1294
01:05:50,160 --> 01:05:52,619
Source support numbers then we would

1295
01:05:52,619 --> 01:05:56,280
have exhausted the port number limit

1296
01:05:56,280 --> 01:05:59,220
port number set of the CE device of map

1297
01:05:59,220 --> 01:06:02,359
D so we couldn't use

1298
01:06:02,359 --> 01:06:05,880
I understand the limitation for map T of

1299
01:06:05,880 --> 01:06:09,000
course but anyway thank you interesting

1300
01:06:09,000 --> 01:06:11,599
thank you

1301
01:06:12,480 --> 01:06:15,079
Nick

1302
01:06:16,260 --> 01:06:19,619
I just have a comment uh one of the

1303
01:06:19,619 --> 01:06:22,079
questions that I get asked quite

1304
01:06:22,079 --> 01:06:24,720
frequently when when working on some of

1305
01:06:24,720 --> 01:06:26,480
the V6 only

1306
01:06:26,480 --> 01:06:29,099
projects that I'm on is the scalability

1307
01:06:29,099 --> 01:06:32,460
issues so the more data that we have on

1308
01:06:32,460 --> 01:06:34,380
different platforms that are available I

1309
01:06:34,380 --> 01:06:36,240
think the better off will be so I just

1310
01:06:36,240 --> 01:06:38,579
wanted to say thank you for putting the

1311
01:06:38,579 --> 01:06:40,640
time and effort into uh

1312
01:06:40,640 --> 01:06:42,839
testing these things and sharing your

1313
01:06:42,839 --> 01:06:45,078
results

1314
01:06:45,299 --> 01:06:47,039
thank you very much for your feedback we

1315
01:06:47,039 --> 01:06:48,839
plan to to add some more results later

1316
01:06:48,839 --> 01:06:50,819
on we'll be still working on some more

1317
01:06:50,819 --> 01:06:53,359
measurements

1318
01:06:58,319 --> 01:07:01,140
if no more question then we move on to

1319
01:07:01,140 --> 01:07:04,759
normal car's presentation

1320
01:07:25,619 --> 01:07:29,280
like ah

1321
01:07:34,440 --> 01:07:37,020
I'll just hold this hello

1322
01:07:37,020 --> 01:07:41,339
my mocha from the White Project

1323
01:07:41,339 --> 01:07:42,180
um today

1324
01:07:42,180 --> 01:07:45,420
I want to be I want to talk about IPv6

1325
01:07:45,420 --> 01:07:48,000
only intuitive resolvers utilizing the

1326
01:07:48,000 --> 01:07:53,420
last 64. and I submitted this draft

1327
01:07:53,420 --> 01:07:57,240
because I had a niche problem and I

1328
01:07:57,240 --> 01:08:00,059
wanted a niche solution and I wanted to

1329
01:08:00,059 --> 01:08:03,000
document it and today I want to

1330
01:08:03,000 --> 01:08:04,799
um talk about this

1331
01:08:04,799 --> 01:08:08,640
and ask you if you think this is worth

1332
01:08:08,640 --> 01:08:11,880
documenting or if it's just rubbish

1333
01:08:11,880 --> 01:08:14,819
so next slide please

1334
01:08:14,819 --> 01:08:17,160
so motivation

1335
01:08:17,160 --> 01:08:19,679
um the motivation of me

1336
01:08:19,679 --> 01:08:22,500
writing this draft is that I wanted to

1337
01:08:22,500 --> 01:08:25,620
have an IPv6 only to wait a resolve it

1338
01:08:25,620 --> 01:08:30,000
but it's you unusable IPv6 only 280

1339
01:08:30,000 --> 01:08:32,698
results or unusable

1340
01:08:32,698 --> 01:08:35,219
this is because

1341
01:08:35,219 --> 01:08:37,679
um there are ipv4 only also their

1342
01:08:37,679 --> 01:08:40,560
service and IPv6 only

1343
01:08:40,560 --> 01:08:43,738
so this cannot talk to ipv for only

1344
01:08:43,738 --> 01:08:45,960
Authority service

1345
01:08:45,960 --> 01:08:49,679
all other applications can use dns-64

1346
01:08:49,679 --> 01:08:51,899
but resolvers can't

1347
01:08:51,899 --> 01:08:56,100
use DNS 64 because it's the resolver it

1348
01:08:56,100 --> 01:08:58,439
it won't make sense

1349
01:08:58,439 --> 01:09:01,738
and clarification by IPv6 only um right

1350
01:09:01,738 --> 01:09:04,140
now I mean like it only has an IPv6

1351
01:09:04,140 --> 01:09:05,279
address

1352
01:09:05,279 --> 01:09:08,279
okay next slide please

1353
01:09:08,279 --> 01:09:12,420
so um this is a like a picture of how uh

1354
01:09:12,420 --> 01:09:14,640
resolving with an IPv6 only intuitive

1355
01:09:14,640 --> 01:09:18,899
resolver can fail so the workers dual

1356
01:09:18,899 --> 01:09:21,960
stack the next the next author server

1357
01:09:21,960 --> 01:09:24,799
might be dual Sac but the next server

1358
01:09:24,799 --> 01:09:27,960
The Authority server

1359
01:09:27,960 --> 01:09:29,779
gives me

1360
01:09:29,779 --> 01:09:33,540
the next Authority survey to ask but

1361
01:09:33,540 --> 01:09:36,960
that server only has an a record so I

1362
01:09:36,960 --> 01:09:39,120
can't so the iterative resolver can't

1363
01:09:39,120 --> 01:09:41,759
access the last authoritative server

1364
01:09:41,759 --> 01:09:43,560
because the last author of the server

1365
01:09:43,560 --> 01:09:46,738
only has an a record and it doesn't have

1366
01:09:46,738 --> 01:09:48,238
a cloud a record

1367
01:09:48,238 --> 01:09:50,339
so this is how it can fail

1368
01:09:50,339 --> 01:09:53,479
next slide please

1369
01:09:53,819 --> 01:09:56,719
so this is a reference to BCP 91

1370
01:09:56,719 --> 01:10:01,920
obviously 3901 and it talk in section 4

1371
01:10:01,920 --> 01:10:05,400
it talks about how we need a preserved

1372
01:10:05,400 --> 01:10:07,860
namespace continuity

1373
01:10:07,860 --> 01:10:10,739
and I'm going to read this out loud um

1374
01:10:10,739 --> 01:10:12,960
so a boost it says every recursive name

1375
01:10:12,960 --> 01:10:15,840
server should be either IP people only

1376
01:10:15,840 --> 01:10:19,500
or draft stock and for the authority

1377
01:10:19,500 --> 01:10:20,880
service sites

1378
01:10:20,880 --> 01:10:23,760
it says every DNS Zone should be sued by

1379
01:10:23,760 --> 01:10:26,040
at least one ipv4 reachable

1380
01:10:26,040 --> 01:10:28,860
authoritative names of it this makes

1381
01:10:28,860 --> 01:10:32,219
sense because we need namespace continue

1382
01:10:32,219 --> 01:10:33,320
it

1383
01:10:33,320 --> 01:10:37,140
continuity because we don't want to not

1384
01:10:37,140 --> 01:10:40,440
be able to resolve zones that would be

1385
01:10:40,440 --> 01:10:44,340
sad but we also want IPv6 on intuitive

1386
01:10:44,340 --> 01:10:46,140
service because

1387
01:10:46,140 --> 01:10:47,820
they'll be fun

1388
01:10:47,820 --> 01:10:50,940
so next slide please

1389
01:10:50,940 --> 01:10:53,640
so my proposal is that

1390
01:10:53,640 --> 01:10:56,280
well not my proposal it's just I'm just

1391
01:10:56,280 --> 01:10:58,980
trying to document this but what I want

1392
01:10:58,980 --> 01:11:01,800
to document is that we can fulfill the

1393
01:11:01,800 --> 01:11:05,400
sparrow of BCP 91 that I just showed

1394
01:11:05,400 --> 01:11:10,020
with an IPv6 only resolver by doing

1395
01:11:10,020 --> 01:11:13,800
the ipv4's IPv6 translation

1396
01:11:13,800 --> 01:11:16,500
inside

1397
01:11:16,500 --> 01:11:19,080
the iterator dissolve and making it

1398
01:11:19,080 --> 01:11:21,659
quote unquote dwell stack

1399
01:11:21,659 --> 01:11:24,900
so like we can do the ipv4 to the IPv6

1400
01:11:24,900 --> 01:11:27,780
translation in the application

1401
01:11:27,780 --> 01:11:29,699
the resolver

1402
01:11:29,699 --> 01:11:34,500
and just like translate it so next slide

1403
01:11:34,500 --> 01:11:36,739
please

1404
01:11:37,380 --> 01:11:41,640
so how it works so first if the resolver

1405
01:11:41,640 --> 01:11:43,620
only finds an a record for an

1406
01:11:43,620 --> 01:11:45,420
authoritative server

1407
01:11:45,420 --> 01:11:48,540
the resolver will perform Azure

1408
01:11:48,540 --> 01:11:50,940
synthesis to

1409
01:11:50,940 --> 01:11:55,260
the ipv4 address that's that was wrong

1410
01:11:55,260 --> 01:11:57,480
and make it IPv6

1411
01:11:57,480 --> 01:12:01,980
this is done by applying the perf64 to

1412
01:12:01,980 --> 01:12:04,800
the ipv4 address to construct ipv

1413
01:12:04,800 --> 01:12:09,020
computed IPv6 address as defined in ofc

1414
01:12:09,020 --> 01:12:13,260
6052 or maybe I should have coded

1415
01:12:13,260 --> 01:12:16,739
ah different oh see that uh I just

1416
01:12:16,739 --> 01:12:19,920
forgot the number of but okay so how to

1417
01:12:19,920 --> 01:12:25,140
obtain the prefix for of the not 64 64.

1418
01:12:25,140 --> 01:12:26,580
so

1419
01:12:26,580 --> 01:12:30,420
um there's two ways to get per six four

1420
01:12:30,420 --> 01:12:33,060
one is just

1421
01:12:33,060 --> 01:12:37,739
um use static configuration or the other

1422
01:12:37,739 --> 01:12:40,440
is to use a discovery mechanism

1423
01:12:40,440 --> 01:12:41,640
and

1424
01:12:41,640 --> 01:12:43,920
discover there's a lot of Discovery

1425
01:12:43,920 --> 01:12:47,219
mechanisms but the pole control protocol

1426
01:12:47,219 --> 01:12:50,179
or whatever

1427
01:12:50,719 --> 01:12:53,940
advertisements can be used

1428
01:12:53,940 --> 01:12:57,360
for this and using

1429
01:12:57,360 --> 01:13:01,260
there's other mechanisms like using the

1430
01:13:01,260 --> 01:13:05,540
mechanisms describes in obviously 7050

1431
01:13:05,540 --> 01:13:09,120
using ipv4.alpha

1432
01:13:09,120 --> 01:13:11,940
or another draft

1433
01:13:11,940 --> 01:13:15,840
um V6 Ops not 64 SRV but I don't think

1434
01:13:15,840 --> 01:13:18,480
these two can work because these two

1435
01:13:18,480 --> 01:13:19,440
need

1436
01:13:19,440 --> 01:13:24,420
a DNS 64 or a resolver to work and we

1437
01:13:24,420 --> 01:13:26,340
don't want to rely on a resolver because

1438
01:13:26,340 --> 01:13:29,940
we want an iterator resolve it

1439
01:13:29,940 --> 01:13:32,400
so this is how it works it's very simple

1440
01:13:32,400 --> 01:13:34,380
it's only combining

1441
01:13:34,380 --> 01:13:36,480
well it's not even commanding it's just

1442
01:13:36,480 --> 01:13:39,659
like old techniques

1443
01:13:39,659 --> 01:13:43,020
that's we're just doing it inside the

1444
01:13:43,020 --> 01:13:44,580
resolve it

1445
01:13:44,580 --> 01:13:46,560
um next slide please

1446
01:13:46,560 --> 01:13:48,900
so considerations

1447
01:13:48,900 --> 01:13:51,300
um so I think all of you thinking why

1448
01:13:51,300 --> 01:13:54,540
not just use a sealette because that

1449
01:13:54,540 --> 01:13:57,360
will solve the problem and we don't have

1450
01:13:57,360 --> 01:14:00,960
to do this in the application layer

1451
01:14:00,960 --> 01:14:03,300
um that is true that is certainly true

1452
01:14:03,300 --> 01:14:06,420
but on most applications can reach ipv4

1453
01:14:06,420 --> 01:14:10,739
internet by a dna64 not the 64. and um

1454
01:14:10,739 --> 01:14:13,820
an iterative resolver is the

1455
01:14:13,820 --> 01:14:17,340
oretically the only application that has

1456
01:14:17,340 --> 01:14:19,679
to use uh

1457
01:14:19,679 --> 01:14:22,980
I forgot the name um ipv addresses and

1458
01:14:22,980 --> 01:14:24,480
not domain names

1459
01:14:24,480 --> 01:14:28,020
and oh wait oh yeah and it did an

1460
01:14:28,020 --> 01:14:30,900
iterative server is the only application

1461
01:14:30,900 --> 01:14:34,860
that cannot utilize dns64

1462
01:14:34,860 --> 01:14:36,600
and I thought

1463
01:14:36,600 --> 01:14:39,300
um using seal at maybe you can do the

1464
01:14:39,300 --> 01:14:41,760
use of native ibb6

1465
01:14:41,760 --> 01:14:45,120
on the

1466
01:14:45,120 --> 01:14:46,620
machine

1467
01:14:46,620 --> 01:14:50,219
and sealat forces keeping ipv4 support

1468
01:14:50,219 --> 01:14:53,699
so um I think there may be people who

1469
01:14:53,699 --> 01:14:57,060
disagree but these are the reasons I

1470
01:14:57,060 --> 01:14:58,140
brought up

1471
01:14:58,140 --> 01:15:00,719
next slide please do I have any slice

1472
01:15:00,719 --> 01:15:04,020
left oh yeah so implementations not yet

1473
01:15:04,020 --> 01:15:07,440
merge but so popular data softwares or

1474
01:15:07,440 --> 01:15:10,500
implementing or maybe we'll Implement

1475
01:15:10,500 --> 01:15:14,280
these features on this there are PLS for

1476
01:15:14,280 --> 01:15:19,260
it for bind Mark Andrews has his work

1477
01:15:19,260 --> 01:15:23,820
and Von bound um David ickley has his

1478
01:15:23,820 --> 01:15:25,730
works so

1479
01:15:25,730 --> 01:15:26,340
[Music]

1480
01:15:26,340 --> 01:15:27,060
um

1481
01:15:27,060 --> 01:15:30,420
so I haven't done any work on this like

1482
01:15:30,420 --> 01:15:33,000
coding thing but I thought it would be

1483
01:15:33,000 --> 01:15:35,280
nice to have all of this

1484
01:15:35,280 --> 01:15:41,159
work documented as an informational RFC

1485
01:15:41,159 --> 01:15:44,219
so that's why I'm here so um I want to

1486
01:15:44,219 --> 01:15:47,460
ask you people if you think this is

1487
01:15:47,460 --> 01:15:49,620
worth documenting as

1488
01:15:49,620 --> 01:15:53,460
an informational draft or not

1489
01:15:53,460 --> 01:15:57,020
so um thank you

1490
01:16:00,780 --> 01:16:03,440
real

1491
01:16:05,159 --> 01:16:08,699
hi I'm Rio from University of Glasgow um

1492
01:16:08,699 --> 01:16:09,960
thank you very much

1493
01:16:09,960 --> 01:16:12,060
um for the talk I think

1494
01:16:12,060 --> 01:16:14,460
right now I think DNS is one of the

1495
01:16:14,460 --> 01:16:18,360
tricky part of moving on to V6 only and

1496
01:16:18,360 --> 01:16:20,699
I think one of the tricky thing about

1497
01:16:20,699 --> 01:16:22,679
moving to V6 is once again if you leave

1498
01:16:22,679 --> 01:16:25,980
any of the V4 compatible bit or first to

1499
01:16:25,980 --> 01:16:27,179
keep it then

1500
01:16:27,179 --> 01:16:28,980
people won't be forced to move on I

1501
01:16:28,980 --> 01:16:30,780
think so um thank you very much for your

1502
01:16:30,780 --> 01:16:33,179
work and I think it should just be

1503
01:16:33,179 --> 01:16:34,679
um go should go ahead as an

1504
01:16:34,679 --> 01:16:36,060
informational I think it is a very

1505
01:16:36,060 --> 01:16:39,600
useful thing to document and keep in the

1506
01:16:39,600 --> 01:16:41,520
RSC thank you

1507
01:16:41,520 --> 01:16:44,239
thank you

1508
01:16:48,600 --> 01:16:52,580
if no mark

1509
01:16:52,860 --> 01:16:54,920
um

1510
01:16:56,100 --> 01:16:58,080
I'm very much in two minds about this

1511
01:16:58,080 --> 01:17:00,239
that merge request has been seen around

1512
01:17:00,239 --> 01:17:01,800
for three years

1513
01:17:01,800 --> 01:17:04,219
um now

1514
01:17:04,380 --> 01:17:06,380
um

1515
01:17:06,719 --> 01:17:10,440
if you go ipv if if a site is going to

1516
01:17:10,440 --> 01:17:14,580
go IPv6 only it has to make a decision

1517
01:17:14,580 --> 01:17:16,739
about whether

1518
01:17:16,739 --> 01:17:19,080
it is going to what

1519
01:17:19,080 --> 01:17:24,080
ipv4 as a service it is going to use

1520
01:17:24,179 --> 01:17:28,920
and DNS and dns64 is a lousy service

1521
01:17:28,920 --> 01:17:34,260
really really really really really lousy

1522
01:17:39,140 --> 01:17:42,620
worrying about

1523
01:17:43,100 --> 01:17:47,820
a node having a stub

1524
01:17:47,820 --> 01:17:51,360
ipv ipv4

1525
01:17:51,360 --> 01:17:54,900
service so it can do clatt circle on a

1526
01:17:54,900 --> 01:17:58,580
clat or similar

1527
01:17:59,040 --> 01:18:00,420
or

1528
01:18:00,420 --> 01:18:05,340
we've got plenty of ipv4 as a services

1529
01:18:05,340 --> 01:18:08,760
they can all run down to the node

1530
01:18:08,760 --> 01:18:12,960
without applications having to do crap

1531
01:18:12,960 --> 01:18:14,880
like this

1532
01:18:14,880 --> 01:18:17,280
I'm gonna I wrote the crap in that click

1533
01:18:17,280 --> 01:18:19,800
that commit

1534
01:18:19,800 --> 01:18:21,920
um

1535
01:18:28,560 --> 01:18:33,420
we we had too many we had too many

1536
01:18:33,420 --> 01:18:36,420
ipv4 as a Services as a moment at the

1537
01:18:36,420 --> 01:18:42,719
moment and assuming that net six dns-64

1538
01:18:42,719 --> 01:18:44,580
is the one that people are going to be

1539
01:18:44,580 --> 01:18:47,040
used is also

1540
01:18:47,040 --> 01:18:49,260
very much up there

1541
01:18:49,260 --> 01:18:50,940
um

1542
01:18:50,940 --> 01:18:54,179
it's something that we really should be

1543
01:18:54,179 --> 01:18:57,780
trying to stop having to do more and

1544
01:18:57,780 --> 01:19:02,040
more and more fixes for Nat six four the

1545
01:19:02,040 --> 01:19:05,219
correction Den SX4

1546
01:19:05,219 --> 01:19:08,100
and this is we keep finding more and

1547
01:19:08,100 --> 01:19:10,739
more things that dns64 doesn't work with

1548
01:19:10,739 --> 01:19:13,500
we knew it didn't work with when I was

1549
01:19:13,500 --> 01:19:17,100
put up in behave

1550
01:19:17,100 --> 01:19:19,380
it was promised to be a short-lived

1551
01:19:19,380 --> 01:19:23,219
solution it is now plus 10 years that is

1552
01:19:23,219 --> 01:19:26,120
not short-lived

1553
01:19:27,780 --> 01:19:31,040
that's just my view

1554
01:19:32,100 --> 01:19:34,679
okay okay

1555
01:19:34,679 --> 01:19:38,060
so uh

1556
01:19:38,580 --> 01:19:41,580
um I can't object to that I can't say

1557
01:19:41,580 --> 01:19:43,500
anything to that but

1558
01:19:43,500 --> 01:19:44,540
um

1559
01:19:44,540 --> 01:19:50,540
as a person who like uses these

1560
01:19:50,540 --> 01:19:52,440
mechanisms

1561
01:19:52,440 --> 01:19:56,040
um using DNS 64 and not six four

1562
01:19:56,040 --> 01:19:59,340
is the easiest for people to use because

1563
01:19:59,340 --> 01:20:01,980
I just need to set up a dns64 I don't

1564
01:20:01,980 --> 01:20:03,540
need to

1565
01:20:03,540 --> 01:20:05,100
set up

1566
01:20:05,100 --> 01:20:08,100
silats to the end hosts so like it's

1567
01:20:08,100 --> 01:20:11,400
very easy to just set up a dinner six

1568
01:20:11,400 --> 01:20:14,699
foot so I think that's why people still

1569
01:20:14,699 --> 01:20:19,139
use DNS 64 and

1570
01:20:19,440 --> 01:20:22,500
um if people still using it I thought it

1571
01:20:22,500 --> 01:20:23,699
might

1572
01:20:23,699 --> 01:20:26,820
because this draft isn't going to make

1573
01:20:26,820 --> 01:20:29,340
people use DNS 6 for

1574
01:20:29,340 --> 01:20:31,199
more it's not going to increase the

1575
01:20:31,199 --> 01:20:33,540
number of people using dns-64 it's just

1576
01:20:33,540 --> 01:20:35,640
gonna increase the people

1577
01:20:35,640 --> 01:20:40,500
creating uh iterated resolver inside of

1578
01:20:40,500 --> 01:20:44,880
DNS 64.64 environment

1579
01:20:44,880 --> 01:20:46,560
so

1580
01:20:46,560 --> 01:20:49,500
um yeah that's my response

1581
01:20:49,500 --> 01:20:52,159
David

1582
01:20:54,000 --> 01:20:56,340
uh David lampader

1583
01:20:56,340 --> 01:20:58,199
um I I would like to note especially in

1584
01:20:58,199 --> 01:21:01,260
response to mark that this doesn't

1585
01:21:01,260 --> 01:21:04,679
really have a dependency or or like

1586
01:21:04,679 --> 01:21:09,480
there's no dns64 inherently in this

1587
01:21:09,480 --> 01:21:12,239
um so even if I have an IPv6 only

1588
01:21:12,239 --> 01:21:15,540
Network and I don't do not six four uh

1589
01:21:15,540 --> 01:21:17,940
for my applications this can help me

1590
01:21:17,940 --> 01:21:21,659
achieve IPv6 only connectivity to some

1591
01:21:21,659 --> 01:21:24,300
domain that happens to only have before

1592
01:21:24,300 --> 01:21:28,260
authoritative name servers so I may end

1593
01:21:28,260 --> 01:21:29,640
up having

1594
01:21:29,640 --> 01:21:32,880
to use this just to get native mistakes

1595
01:21:32,880 --> 01:21:34,860
working because the domains aren't

1596
01:21:34,860 --> 01:21:36,900
updating and I don't even have the ns64

1597
01:21:36,900 --> 01:21:39,060
really I just have this weight for my

1598
01:21:39,060 --> 01:21:41,159
for my resolver to reach before only

1599
01:21:41,159 --> 01:21:44,059
domains in the internet

1600
01:21:44,820 --> 01:21:48,179
can I uh come back with this David

1601
01:21:48,179 --> 01:21:49,020
um

1602
01:21:49,020 --> 01:21:50,580
it's

1603
01:21:50,580 --> 01:21:54,600
this is a DNS 64 Only Solution really

1604
01:21:54,600 --> 01:21:58,199
because if you have deployed 464x slack

1605
01:21:58,199 --> 01:22:01,620
properly you do not need this

1606
01:22:01,620 --> 01:22:04,920
if you have deployed DS Light properly

1607
01:22:04,920 --> 01:22:07,199
you do not need this

1608
01:22:07,199 --> 01:22:11,159
if you have deployed map T properly you

1609
01:22:11,159 --> 01:22:13,199
do not need this I can go through the

1610
01:22:13,199 --> 01:22:15,300
list of all the other

1611
01:22:15,300 --> 01:22:18,420
ipv as a service mechanisms

1612
01:22:18,420 --> 01:22:22,699
I don't want to deploy any of those

1613
01:22:23,219 --> 01:22:26,460
well then you can also fold out for the

1614
01:22:26,460 --> 01:22:30,199
queries selectively floor forward ipv4

1615
01:22:30,199 --> 01:22:33,540
Aquarius Library vs4 services to a

1616
01:22:33,540 --> 01:22:35,840
service the other side of

1617
01:22:35,840 --> 01:22:41,040
to the other side of a of the IPv6 only

1618
01:22:41,040 --> 01:22:41,940
link

1619
01:22:41,940 --> 01:22:45,540
now this service requires you to have a

1620
01:22:45,540 --> 01:22:47,820
nat64

1621
01:22:47,820 --> 01:22:52,380
so you've implicitly deployed

1622
01:22:52,440 --> 01:22:54,800
either nap either

1623
01:22:54,800 --> 01:22:58,280
dns64 net64

1624
01:22:58,280 --> 01:23:02,940
64s x-lap or map t

1625
01:23:02,940 --> 01:23:07,159
to be in this position to begin with

1626
01:23:10,580 --> 01:23:13,560
I would like to Lake Lorenzo speak and

1627
01:23:13,560 --> 01:23:15,300
then give Jane a few minutes to talk

1628
01:23:15,300 --> 01:23:18,000
about her draft

1629
01:23:18,000 --> 01:23:20,760
y sort of agreeing with David here I

1630
01:23:20,760 --> 01:23:21,780
think

1631
01:23:21,780 --> 01:23:23,640
um deploying a Nats Explorer is really

1632
01:23:23,640 --> 01:23:25,800
really really easy you put it in the

1633
01:23:25,800 --> 01:23:29,040
network you point 64 ff9b at it and

1634
01:23:29,040 --> 01:23:30,000
you're done

1635
01:23:30,000 --> 01:23:35,159
right so this is also really easy right

1636
01:23:35,159 --> 01:23:37,860
if you have some code on DNS in a

1637
01:23:37,860 --> 01:23:40,100
recursive it works

1638
01:23:40,100 --> 01:23:43,320
deploying ipv4 as a service is kind of

1639
01:23:43,320 --> 01:23:44,760
more difficult you need to like deal

1640
01:23:44,760 --> 01:23:47,580
with ipv4 if you have a server like

1641
01:23:47,580 --> 01:23:50,280
Linux that doesn't do clap then it's

1642
01:23:50,280 --> 01:23:51,960
kind of annoying right you need to set

1643
01:23:51,960 --> 01:23:54,420
up ipv4 dhp servers or whatever other

1644
01:23:54,420 --> 01:23:56,120
like you know

1645
01:23:56,120 --> 01:23:58,500
annoying stuff that's you know not well

1646
01:23:58,500 --> 01:24:00,780
integrated with distros today so this is

1647
01:24:00,780 --> 01:24:03,480
sort of a much lower cost option I can

1648
01:24:03,480 --> 01:24:05,820
see why we don't want to support e0964

1649
01:24:05,820 --> 01:24:07,500
with lots of hacks

1650
01:24:07,500 --> 01:24:10,199
and you know these two implementations

1651
01:24:10,199 --> 01:24:12,360
may decide to reject these pull requests

1652
01:24:12,360 --> 01:24:13,739
because it's like you know too much

1653
01:24:13,739 --> 01:24:17,219
complexity but I do see a niche for this

1654
01:24:17,219 --> 01:24:19,920
you know it's just easy and not super

1655
01:24:19,920 --> 01:24:22,820
harmful so

1656
01:24:25,080 --> 01:24:29,400
so we will stop here and move on to

1657
01:24:29,400 --> 01:24:32,059
James

1658
01:24:39,780 --> 01:24:42,060
hello

1659
01:24:42,060 --> 01:24:44,699
only here only today two drafts for the

1660
01:24:44,699 --> 01:24:46,980
price of one

1661
01:24:46,980 --> 01:24:49,879
next slide please

1662
01:24:50,179 --> 01:24:53,820
so you might have seen the first draft

1663
01:24:53,820 --> 01:24:55,020
on the list

1664
01:24:55,020 --> 01:24:57,540
so what's the problem here

1665
01:24:57,540 --> 01:24:59,880
first of all before people start

1666
01:24:59,880 --> 01:25:02,100
worrying about slack versus DHCP

1667
01:25:02,100 --> 01:25:04,080
discussion it has nothing to do we're

1668
01:25:04,080 --> 01:25:06,239
not talking about how hosts get

1669
01:25:06,239 --> 01:25:08,520
addresses where address is coming from

1670
01:25:08,520 --> 01:25:11,040
let's just look in the normal operating

1671
01:25:11,040 --> 01:25:13,560
system like your MacBooks here on this

1672
01:25:13,560 --> 01:25:16,080
network it most likely will have at

1673
01:25:16,080 --> 01:25:18,540
least three addresses

1674
01:25:18,540 --> 01:25:21,000
if you haven't happened to be on V6 only

1675
01:25:21,000 --> 01:25:23,520
Network it might get four addresses link

1676
01:25:23,520 --> 01:25:27,900
local privacy stable and 10464 slot and

1677
01:25:27,900 --> 01:25:29,960
then if you need to renumber a network

1678
01:25:29,960 --> 01:25:33,120
it might or you have multi-home stuff it

1679
01:25:33,120 --> 01:25:35,400
might actually be seven of them right so

1680
01:25:35,400 --> 01:25:37,739
stable privacy 464x slot all Global

1681
01:25:37,739 --> 01:25:40,380
addresses will be like doubled

1682
01:25:40,380 --> 01:25:43,020
also chromos for example because it's

1683
01:25:43,020 --> 01:25:46,140
running in Virtual machines inside it

1684
01:25:46,140 --> 01:25:48,480
requires between like seven and nine

1685
01:25:48,480 --> 01:25:50,640
addresses currently and it's not

1686
01:25:50,640 --> 01:25:53,219
actually too much right and by the way

1687
01:25:53,219 --> 01:25:55,980
yesterday in Pay energy it was some

1688
01:25:55,980 --> 01:25:57,840
transport people talking about the

1689
01:25:57,840 --> 01:26:00,420
research and suggestions and thoughts

1690
01:26:00,420 --> 01:26:02,880
about how multiple addresses would be

1691
01:26:02,880 --> 01:26:05,280
very like interesting different

1692
01:26:05,280 --> 01:26:07,980
different how they could make our life

1693
01:26:07,980 --> 01:26:10,159
in V6 were all different from before

1694
01:26:10,159 --> 01:26:13,260
also we already published on RFC which

1695
01:26:13,260 --> 01:26:15,900
was explicitly not recommending to limit

1696
01:26:15,900 --> 01:26:18,659
number of V6 addresses per host

1697
01:26:18,659 --> 01:26:21,980
so next slide please

1698
01:26:22,560 --> 01:26:26,420
well meantime obviously not everyone

1699
01:26:26,420 --> 01:26:30,420
reads the Tariff C because some layer 2

1700
01:26:30,420 --> 01:26:32,460
devices which are trying to be way too

1701
01:26:32,460 --> 01:26:36,600
smart do put some hard-coded limits into

1702
01:26:36,600 --> 01:26:39,600
a number of IPv6 addresses per mark

1703
01:26:39,600 --> 01:26:43,800
mostly it's devices doing Savvy or NDP

1704
01:26:43,800 --> 01:26:47,580
proxy and the problem is limit is there

1705
01:26:47,580 --> 01:26:50,940
the limit is hard coded

1706
01:26:50,940 --> 01:26:54,480
and you have no idea when that limit got

1707
01:26:54,480 --> 01:26:56,600
reached because it just quietly start

1708
01:26:56,600 --> 01:26:59,100
dropping some addresses not actually

1709
01:26:59,100 --> 01:27:01,860
necessarily the unused ones in some

1710
01:27:01,860 --> 01:27:04,679
cases itself just another address and

1711
01:27:04,679 --> 01:27:07,199
you I see new one I cannot install it I

1712
01:27:07,199 --> 01:27:08,820
drop it on the floor

1713
01:27:08,820 --> 01:27:11,760
so troubleshooting becomes very like

1714
01:27:11,760 --> 01:27:13,560
entertaining

1715
01:27:13,560 --> 01:27:15,900
so and when you talk to those vendors

1716
01:27:15,900 --> 01:27:17,760
they're like oh really

1717
01:27:17,760 --> 01:27:20,040
you need more okay we can give you more

1718
01:27:20,040 --> 01:27:22,380
so which normally indicates they just

1719
01:27:22,380 --> 01:27:24,179
had no idea what the limit should be so

1720
01:27:24,179 --> 01:27:26,159
they just picked up a reasonable number

1721
01:27:26,159 --> 01:27:28,260
so I was thinking some guidance might be

1722
01:27:28,260 --> 01:27:31,020
needed next slide please

1723
01:27:31,020 --> 01:27:33,960
so problem number one we have hard-coded

1724
01:27:33,960 --> 01:27:36,300
number so let's raise it the draft

1725
01:27:36,300 --> 01:27:38,400
currently saying 20

1726
01:27:38,400 --> 01:27:41,280
I'm not like it was just a run number

1727
01:27:41,280 --> 01:27:45,840
taken from uh 7934 but I guess we can

1728
01:27:45,840 --> 01:27:47,580
talk about what number should be

1729
01:27:47,580 --> 01:27:49,800
reasonable it should be definitely more

1730
01:27:49,800 --> 01:27:51,840
than seven

1731
01:27:51,840 --> 01:27:55,679
and if it's too high for you to low for

1732
01:27:55,679 --> 01:27:58,380
you I think it should be configurable

1733
01:27:58,380 --> 01:28:01,620
I think it's reasonable demand well and

1734
01:28:01,620 --> 01:28:03,600
I as an operator I would love to know

1735
01:28:03,600 --> 01:28:06,000
when that happens so I don't spend time

1736
01:28:06,000 --> 01:28:08,580
getting a packet captures from five

1737
01:28:08,580 --> 01:28:10,199
different places in the network it would

1738
01:28:10,199 --> 01:28:12,380
be nice to get a syslog message showing

1739
01:28:12,380 --> 01:28:16,080
Telemetry error saying hello this is a

1740
01:28:16,080 --> 01:28:19,380
problem and probably it would be nice if

1741
01:28:19,380 --> 01:28:23,400
there are some attempts to drop not the

1742
01:28:23,400 --> 01:28:25,440
most recently seen address but one which

1743
01:28:25,440 --> 01:28:27,659
might not be in use for a while next

1744
01:28:27,659 --> 01:28:29,219
slide please

1745
01:28:29,219 --> 01:28:32,460
so it's all tactical fixes and you might

1746
01:28:32,460 --> 01:28:34,320
see in the list that a lot of people

1747
01:28:34,320 --> 01:28:36,860
made quite reasonable comments that

1748
01:28:36,860 --> 01:28:39,179
increased number of addresses might

1749
01:28:39,179 --> 01:28:43,380
cause some scalability issues on network

1750
01:28:43,380 --> 01:28:46,440
and everything here maybe actually we

1751
01:28:46,440 --> 01:28:48,840
need to do something about that and make

1752
01:28:48,840 --> 01:28:51,960
everyone happy maybe we can keep an

1753
01:28:51,960 --> 01:28:54,179
almost unlimited number of addresses per

1754
01:28:54,179 --> 01:28:55,040
host

1755
01:28:55,040 --> 01:28:58,620
without putting any scalability stress

1756
01:28:58,620 --> 01:29:00,060
on the devices

1757
01:29:00,060 --> 01:29:03,480
sure last night I submitted a draft

1758
01:29:03,480 --> 01:29:05,100
which might talk about long-term

1759
01:29:05,100 --> 01:29:07,980
solution which basically said let's do

1760
01:29:07,980 --> 01:29:12,300
64 per host but not an array because I

1761
01:29:12,300 --> 01:29:14,219
don't know how many implementations on

1762
01:29:14,219 --> 01:29:16,500
the router couldn't do that but let's

1763
01:29:16,500 --> 01:29:18,600
use existing mechanisms which called

1764
01:29:18,600 --> 01:29:21,239
prefix delegation so your host could

1765
01:29:21,239 --> 01:29:24,179
request slash 64 and that means your

1766
01:29:24,179 --> 01:29:26,580
network infrastructure will get just one

1767
01:29:26,580 --> 01:29:28,260
route pointing

1768
01:29:28,260 --> 01:29:30,480
two link local address

1769
01:29:30,480 --> 01:29:32,880
so it basically it will scale to number

1770
01:29:32,880 --> 01:29:35,280
of hosts not number of addresses it will

1771
01:29:35,280 --> 01:29:36,300
give you

1772
01:29:36,300 --> 01:29:38,520
the things which a lot of people wanted

1773
01:29:38,520 --> 01:29:40,860
an ability to say which device was using

1774
01:29:40,860 --> 01:29:43,440
which address the whole 64 is your

1775
01:29:43,440 --> 01:29:46,020
device and it also has some fate sharing

1776
01:29:46,020 --> 01:29:48,360
because these are all addresses work or

1777
01:29:48,360 --> 01:29:49,860
none of them

1778
01:29:49,860 --> 01:29:53,340
so yeah please check the second draft as

1779
01:29:53,340 --> 01:29:56,639
well it's a very early draft a lot of

1780
01:29:56,639 --> 01:29:58,980
like sections saying we don't know

1781
01:29:58,980 --> 01:30:01,199
exactly how to do this we just have some

1782
01:30:01,199 --> 01:30:04,260
high level ideas and the comments are

1783
01:30:04,260 --> 01:30:08,219
appreciated uh I think that's all

1784
01:30:08,219 --> 01:30:11,400
okay so it's 11 o'clock do we want to do

1785
01:30:11,400 --> 01:30:13,940
the two minutes

1786
01:30:16,920 --> 01:30:19,440
uh subscription so thanks Jen I think

1787
01:30:19,440 --> 01:30:21,239
the problem you have is like you know

1788
01:30:21,239 --> 01:30:24,540
really a valid problem to solve and the

1789
01:30:24,540 --> 01:30:26,340
20 number I'm not sure like there's some

1790
01:30:26,340 --> 01:30:27,540
Hardware limitations on some of the

1791
01:30:27,540 --> 01:30:29,060
routers I think we need to figure it out

1792
01:30:29,060 --> 01:30:31,380
and generally I'm supportive of this

1793
01:30:31,380 --> 01:30:32,699
work right but I think maybe there's

1794
01:30:32,699 --> 01:30:34,199
other mechanisms needed we can probably

1795
01:30:34,199 --> 01:30:35,760
have an offline chat about it but

1796
01:30:35,760 --> 01:30:37,860
something to indicate like failure right

1797
01:30:37,860 --> 01:30:40,380
like that this is happening I uh

1798
01:30:40,380 --> 01:30:41,940
whatever number you increase it to 20

1799
01:30:41,940 --> 01:30:44,340
200 whatever I think somebody might hit

1800
01:30:44,340 --> 01:30:46,860
that issue uh in the future so I think

1801
01:30:46,860 --> 01:30:48,420
we probably need a failover mechanism

1802
01:30:48,420 --> 01:30:51,420
for that so thanks do we want to do the

1803
01:30:51,420 --> 01:30:53,780
two minutes

1804
01:30:53,940 --> 01:30:56,299
foreign

1805
01:32:07,620 --> 01:32:11,120
okay we are back

1806
01:32:11,880 --> 01:32:15,540
seriously you won't okay go ahead

1807
01:32:15,540 --> 01:32:17,760
yeah I I think I was I wanted to finish

1808
01:32:17,760 --> 01:32:20,760
by 11 so I was done so uh Warren did you

1809
01:32:20,760 --> 01:32:22,440
want to add anything to that same thing

1810
01:32:22,440 --> 01:32:24,678
or

1811
01:32:25,800 --> 01:32:27,420
no I just said like we need a protocol

1812
01:32:27,420 --> 01:32:29,699
mechanism to Signal this failure like in

1813
01:32:29,699 --> 01:32:30,960
addition to this so something probably

1814
01:32:30,960 --> 01:32:34,139
in six man so okay I'm I'll just like

1815
01:32:34,139 --> 01:32:35,880
um do a straw man right the straw man

1816
01:32:35,880 --> 01:32:39,179
would be some icmp message V6 message

1817
01:32:39,179 --> 01:32:42,480
which says like no you like you know I

1818
01:32:42,480 --> 01:32:44,820
ran out of ND cash entries for you like

1819
01:32:44,820 --> 01:32:46,320
I don't know well if I come up with a

1820
01:32:46,320 --> 01:32:48,900
message right I I know I need to think a

1821
01:32:48,900 --> 01:32:50,159
little bit more through like you know

1822
01:32:50,159 --> 01:32:52,260
what attack vectors this enables but

1823
01:32:52,260 --> 01:32:53,760
that's kind of what I was thinking okay

1824
01:32:53,760 --> 01:32:56,820
saying that I you may not use this

1825
01:32:56,820 --> 01:32:59,400
address anymore right I know Lorenzo is

1826
01:32:59,400 --> 01:33:01,020
going to be pissed that uh router can

1827
01:33:01,020 --> 01:33:03,000
say that to a host but we need to

1828
01:33:03,000 --> 01:33:05,520
somehow say like you you're past you're

1829
01:33:05,520 --> 01:33:07,980
welcome more like it's not like we have

1830
01:33:07,980 --> 01:33:09,719
a BCP that says not to do that it's not

1831
01:33:09,719 --> 01:33:11,280
like Lorenzo would be pissed but we have

1832
01:33:11,280 --> 01:33:13,679
a BCP that says don't do that also

1833
01:33:13,679 --> 01:33:15,900
remember it's not routers

1834
01:33:15,900 --> 01:33:18,179
it's not even routers that device might

1835
01:33:18,179 --> 01:33:19,980
not be able actually to send you

1836
01:33:19,980 --> 01:33:22,800
anything well without any hacks right

1837
01:33:22,800 --> 01:33:25,800
it's like Layer Two like access points

1838
01:33:25,800 --> 01:33:28,440
right no I I I I got it what I'm saying

1839
01:33:28,440 --> 01:33:30,360
is I don't like this to be a silent

1840
01:33:30,360 --> 01:33:31,860
failure because right now it's a silent

1841
01:33:31,860 --> 01:33:34,560
failure that like this thing you cross

1842
01:33:34,560 --> 01:33:36,239
your ND cash entries whatever limit

1843
01:33:36,239 --> 01:33:38,159
right and there's no indication from the

1844
01:33:38,159 --> 01:33:39,659
router like but this is not an

1845
01:33:39,659 --> 01:33:41,100
indication to stop it's like a router

1846
01:33:41,100 --> 01:33:43,500
saying I cannot do this right which

1847
01:33:43,500 --> 01:33:46,260
which could be taken as like a just an

1848
01:33:46,260 --> 01:33:47,760
indication like if you don't want to do

1849
01:33:47,760 --> 01:33:49,440
anything with that I got Lorenzo's point

1850
01:33:49,440 --> 01:33:51,239
right about the BCP so I'm fully

1851
01:33:51,239 --> 01:33:53,159
cognizant of that but I'm saying there's

1852
01:33:53,159 --> 01:33:54,659
no indication from the router that this

1853
01:33:54,659 --> 01:33:55,800
is happening the packets are getting

1854
01:33:55,800 --> 01:33:58,080
black hole so uh I think there are two

1855
01:33:58,080 --> 01:34:00,480
things here first there is no reason of

1856
01:34:00,480 --> 01:34:02,820
sending an alarm if it's not action not

1857
01:34:02,820 --> 01:34:05,460
actionable right if device cannot use it

1858
01:34:05,460 --> 01:34:07,320
what it just fails so it fails anyway

1859
01:34:07,320 --> 01:34:09,360
that's why I'm saying we need to log

1860
01:34:09,360 --> 01:34:11,040
this so an operator deals with this

1861
01:34:11,040 --> 01:34:12,960
right not necessary Hoster yeah and

1862
01:34:12,960 --> 01:34:15,000
secondly long-term Solutions should deal

1863
01:34:15,000 --> 01:34:16,860
with it I I got it it's the second draft

1864
01:34:16,860 --> 01:34:19,920
exactly so the second draft as well

1865
01:34:19,920 --> 01:34:21,900
um I just wanted to put in a point the

1866
01:34:21,900 --> 01:34:24,719
3gpp already does it right like so I

1867
01:34:24,719 --> 01:34:26,040
think there's an ietf recommend addition

1868
01:34:26,040 --> 01:34:30,060
to 3gp saying for every host give them a

1869
01:34:30,060 --> 01:34:32,460
slash 64 for themselves right so I don't

1870
01:34:32,460 --> 01:34:34,199
think we need to like make a big stretch

1871
01:34:34,199 --> 01:34:35,400
from there to say like give it to

1872
01:34:35,400 --> 01:34:37,020
everybody so I'm sure there's like

1873
01:34:37,020 --> 01:34:39,060
issues like implementing this on a Wi-Fi

1874
01:34:39,060 --> 01:34:42,060
AP or something but I think I'm I'm two

1875
01:34:42,060 --> 01:34:46,219
thumbs up for that idea thanks

1876
01:34:46,460 --> 01:34:50,520
Lauren Kamari with no hats so your first

1877
01:34:50,520 --> 01:34:52,320
set of discussions draft you were

1878
01:34:52,320 --> 01:34:54,600
talking about I've got a little D-Link

1879
01:34:54,600 --> 01:34:56,940
router at home it's got the world's

1880
01:34:56,940 --> 01:34:59,460
smallest tcab apparently it can deal

1881
01:34:59,460 --> 01:35:02,580
with like four addresses per host woohoo

1882
01:35:02,580 --> 01:35:04,860
is it would it be a compliant with your

1883
01:35:04,860 --> 01:35:08,040
new thing like if the hardware seriously

1884
01:35:08,040 --> 01:35:12,199
cannot support well okay

1885
01:35:14,360 --> 01:35:16,739
so yeah so like yeah if you cannot do

1886
01:35:16,739 --> 01:35:19,260
this yeah it's your scalability issue

1887
01:35:19,260 --> 01:35:21,000
but I'm talking about like Enterprise

1888
01:35:21,000 --> 01:35:23,340
scale large people who put like numbers

1889
01:35:23,340 --> 01:35:26,300
like fives there

1890
01:35:26,580 --> 01:35:29,280
okay everything

1891
01:35:29,280 --> 01:35:31,739
two points I mean increasing the numbers

1892
01:35:31,739 --> 01:35:35,520
of a bb60 series per Mark we'll present

1893
01:35:35,520 --> 01:35:37,080
some challenges right regarding the

1894
01:35:37,080 --> 01:35:39,600
multicast notably it all depends upon

1895
01:35:39,600 --> 01:35:42,120
the number but also

1896
01:35:42,120 --> 01:35:45,960
if it's the AP which enforce this limit

1897
01:35:45,960 --> 01:35:48,600
or is it the router which is behind the

1898
01:35:48,600 --> 01:35:49,560
AP

1899
01:35:49,560 --> 01:35:52,380
and of course we need to increment the

1900
01:35:52,380 --> 01:35:55,020
numbers of IPv6 addresses permac address

1901
01:35:55,020 --> 01:35:58,679
on both sides right anyway

1902
01:35:58,679 --> 01:36:01,139
um you know this as I know regarding

1903
01:36:01,139 --> 01:36:04,080
this this slide and using a slash 64 via

1904
01:36:04,080 --> 01:36:05,820
prefix delegation this is kind of cool

1905
01:36:05,820 --> 01:36:08,219
of course it's solved many problems

1906
01:36:08,219 --> 01:36:10,980
except the Privacy one because if you

1907
01:36:10,980 --> 01:36:14,460
use multiple pv6 addresses right is to

1908
01:36:14,460 --> 01:36:17,600
provide you with privacy

1909
01:36:17,600 --> 01:36:20,040
once the Mac addresses disappear right

1910
01:36:20,040 --> 01:36:22,440
over the internet you use five or ten

1911
01:36:22,440 --> 01:36:24,780
different V6 Services we cannot say it's

1912
01:36:24,780 --> 01:36:28,500
you now if you're using a slash 64 we

1913
01:36:28,500 --> 01:36:29,639
know it's you

1914
01:36:29,639 --> 01:36:31,980
actually you don't because how do you

1915
01:36:31,980 --> 01:36:35,100
know if two addresses belongs to 64

1916
01:36:35,100 --> 01:36:37,440
allocated to a device or two different

1917
01:36:37,440 --> 01:36:40,020
devices in my slack Network I can

1918
01:36:40,020 --> 01:36:42,540
honestly we can guess it right

1919
01:36:42,540 --> 01:36:45,540
that's

1920
01:36:46,800 --> 01:36:49,560
yeah yeah agreed but if everyone is

1921
01:36:49,560 --> 01:36:51,540
doing a slash 64 let's say in five years

1922
01:36:51,540 --> 01:36:55,699
then you lose the benefit of privacy

1923
01:36:58,520 --> 01:37:01,199
every time right you join the network

1924
01:37:01,199 --> 01:37:02,880
you get like five minutes later another

1925
01:37:02,880 --> 01:37:04,800
one so it's

1926
01:37:04,800 --> 01:37:06,900
oh if you want to get PD refresh is

1927
01:37:06,900 --> 01:37:09,620
often

1928
01:37:10,460 --> 01:37:14,040
now we are eating most probably don't

1929
01:37:14,040 --> 01:37:16,020
forget the HTTP State full right so the

1930
01:37:16,020 --> 01:37:17,760
ATP server reads some fun but anyway

1931
01:37:17,760 --> 01:37:20,540
interesting

1932
01:37:24,060 --> 01:37:26,340
yeah I mean I guess I guess I'm an

1933
01:37:26,340 --> 01:37:28,380
author so I can't really say much but I

1934
01:37:28,380 --> 01:37:30,360
I am hopeful that this will

1935
01:37:30,360 --> 01:37:32,820
actually work the the long-term solution

1936
01:37:32,820 --> 01:37:35,100
will actually work and maybe finally

1937
01:37:35,100 --> 01:37:37,080
resolve this this argument that we've

1938
01:37:37,080 --> 01:37:38,460
been having for years and years about

1939
01:37:38,460 --> 01:37:42,060
you know Network versus host and

1940
01:37:42,060 --> 01:37:44,520
like one thing that maybe is not in the

1941
01:37:44,520 --> 01:37:46,980
draft is that you can you can hand you

1942
01:37:46,980 --> 01:37:48,719
can hand this to a laptop and you know

1943
01:37:48,719 --> 01:37:50,040
you can create a million Docker

1944
01:37:50,040 --> 01:37:51,360
containers on it and they can all have

1945
01:37:51,360 --> 01:37:52,800
end-to-end connectivity and it'll just

1946
01:37:52,800 --> 01:37:54,600
work and that's something that we've

1947
01:37:54,600 --> 01:37:57,000
like like we we can maybe sort of do

1948
01:37:57,000 --> 01:37:58,800
that with ipv4 but they can't receive

1949
01:37:58,800 --> 01:38:01,320
any packets right and and if we wanted

1950
01:38:01,320 --> 01:38:03,480
to basically give these things incoming

1951
01:38:03,480 --> 01:38:05,100
connectivity it really wouldn't work

1952
01:38:05,100 --> 01:38:07,320
because you'd like bust and that's like

1953
01:38:07,320 --> 01:38:09,780
um port forwarding tables right so this

1954
01:38:09,780 --> 01:38:11,340
is really something that it's it's going

1955
01:38:11,340 --> 01:38:13,320
to be a substantial improvement over

1956
01:38:13,320 --> 01:38:15,179
what we can do in ipv4 and I don't think

1957
01:38:15,179 --> 01:38:16,320
you know

1958
01:38:16,320 --> 01:38:18,239
it's going to hit the same sort of host

1959
01:38:18,239 --> 01:38:19,860
versus Network hustle that we've been

1960
01:38:19,860 --> 01:38:21,420
seeing so I'm really hopeful that this

1961
01:38:21,420 --> 01:38:23,820
will go somewhere and I think we need

1962
01:38:23,820 --> 01:38:26,880
help with getting this to work

1963
01:38:26,880 --> 01:38:29,280
somebody who knows dhppd in particular

1964
01:38:29,280 --> 01:38:31,739
and how how it's implemented for example

1965
01:38:31,739 --> 01:38:33,179
we were looking at some Corner case

1966
01:38:33,179 --> 01:38:36,420
where we you know or if you if you have

1967
01:38:36,420 --> 01:38:38,520
two rooted two dhpv6 release on the link

1968
01:38:38,520 --> 01:38:40,139
and you do PD on both of them like what

1969
01:38:40,139 --> 01:38:42,239
happens right presumably both of them

1970
01:38:42,239 --> 01:38:44,219
can snoop the reply because both of them

1971
01:38:44,219 --> 01:38:46,679
like forward the request but anyway so

1972
01:38:46,679 --> 01:38:48,719
we'd really like you know someone who

1973
01:38:48,719 --> 01:38:51,659
who knows dhb6 and PD in particular to

1974
01:38:51,659 --> 01:38:53,460
like help us figure out how to do and

1975
01:38:53,460 --> 01:38:56,639
what to do so

1976
01:38:56,639 --> 01:38:59,400
um help welcome thank you

1977
01:38:59,400 --> 01:39:02,580
thank you uh folks I will have to ask

1978
01:39:02,580 --> 01:39:04,679
you to take the XU to the list because

1979
01:39:04,679 --> 01:39:07,440
we are already eight minutes late so

1980
01:39:07,440 --> 01:39:12,259
we'll move on to the last presentation

1981
01:39:31,219 --> 01:39:35,219
hi Pete Stevens Mythic beasts so

1982
01:39:35,219 --> 01:39:37,620
four years ago I came here and talked

1983
01:39:37,620 --> 01:39:40,139
about some of our IPv6 only stuff that

1984
01:39:40,139 --> 01:39:41,760
we've deployed to actual paying

1985
01:39:41,760 --> 01:39:44,880
customers and uh I'm back next one

1986
01:39:44,880 --> 01:39:47,060
please

1987
01:39:47,820 --> 01:39:50,340
so uh what did we do

1988
01:39:50,340 --> 01:39:53,460
um 2014 we deployed virtual servers that

1989
01:39:53,460 --> 01:39:55,139
only have V6

1990
01:39:55,139 --> 01:39:57,239
nobody bought them

1991
01:39:57,239 --> 01:39:58,380
um because they can't talk to anything

1992
01:39:58,380 --> 01:40:00,960
and it's not very useful

1993
01:40:00,960 --> 01:40:02,699
um so over the next couple of years we

1994
01:40:02,699 --> 01:40:04,199
decided that what we were going to do

1995
01:40:04,199 --> 01:40:06,600
was deploy an actual application that

1996
01:40:06,600 --> 01:40:08,460
functioned and was useful underpaying

1997
01:40:08,460 --> 01:40:11,400
customer would buy that only used V6 on

1998
01:40:11,400 --> 01:40:13,020
the virtual server

1999
01:40:13,020 --> 01:40:16,380
so we added some things to the network

2000
01:40:16,380 --> 01:40:18,900
um so you get

2001
01:40:18,900 --> 01:40:21,659
um not six four and dns64 so you can

2002
01:40:21,659 --> 01:40:23,580
talk outbound to other things and we

2003
01:40:23,580 --> 01:40:25,260
implemented a proxy service that

2004
01:40:25,260 --> 01:40:27,540
automatically configures HTTP https

2005
01:40:27,540 --> 01:40:29,699
inbound and a few other SSL based

2006
01:40:29,699 --> 01:40:31,679
protocols

2007
01:40:31,679 --> 01:40:33,900
um and

2008
01:40:33,900 --> 01:40:35,880
um and so on a VM you can have a V4

2009
01:40:35,880 --> 01:40:37,980
address optionally but you'll get a

2010
01:40:37,980 --> 01:40:40,739
slash 64 of V6 space and that's what we

2011
01:40:40,739 --> 01:40:44,360
currently do now slide please

2012
01:40:44,760 --> 01:40:46,560
um and the first thing we learn is dual

2013
01:40:46,560 --> 01:40:48,120
stack is rubbish

2014
01:40:48,120 --> 01:40:49,980
um I hate dual stack I'd like it to go

2015
01:40:49,980 --> 01:40:51,659
away

2016
01:40:51,659 --> 01:40:53,460
um if you just have to configure

2017
01:40:53,460 --> 01:40:55,020
everything twice you have to configure

2018
01:40:55,020 --> 01:40:56,400
firewalls twice you have to do your

2019
01:40:56,400 --> 01:40:59,940
connectivity twice so

2020
01:40:59,940 --> 01:41:01,860
all of our management layer supports V6

2021
01:41:01,860 --> 01:41:03,239
for everything

2022
01:41:03,239 --> 01:41:04,800
um so for any application where we can

2023
01:41:04,800 --> 01:41:07,020
turn off V4 it's less configuration and

2024
01:41:07,020 --> 01:41:09,179
less work and we get to conserve the V4

2025
01:41:09,179 --> 01:41:12,600
address which makes it cheaper so don't

2026
01:41:12,600 --> 01:41:14,159
do dual stack if you can possibly avoid

2027
01:41:14,159 --> 01:41:17,760
it go straight to B6 excellent please

2028
01:41:17,760 --> 01:41:21,900
so um what doesn't work email

2029
01:41:21,900 --> 01:41:25,139
you can't do email from a V6 only server

2030
01:41:25,139 --> 01:41:27,480
because there's a whole load of V4 only

2031
01:41:27,480 --> 01:41:29,460
people out there

2032
01:41:29,460 --> 01:41:31,199
um however

2033
01:41:31,199 --> 01:41:32,880
um the large providers have fixed this

2034
01:41:32,880 --> 01:41:34,860
email doesn't work from V4 either these

2035
01:41:34,860 --> 01:41:36,300
days

2036
01:41:36,300 --> 01:41:38,460
um so whatever you're gonna forward it

2037
01:41:38,460 --> 01:41:40,320
through someone else and as long as your

2038
01:41:40,320 --> 01:41:42,239
MX relay's got V6 you give it to them

2039
01:41:42,239 --> 01:41:44,040
and hand it over

2040
01:41:44,040 --> 01:41:46,679
um FTP and web developers like FTP that

2041
01:41:46,679 --> 01:41:48,119
really doesn't work very well V6 only

2042
01:41:48,119 --> 01:41:49,980
because you can't forward it from a V4

2043
01:41:49,980 --> 01:41:51,360
address

2044
01:41:51,360 --> 01:41:51,960
um

2045
01:41:51,960 --> 01:41:54,600
turn it off fine whatever

2046
01:41:54,600 --> 01:41:55,860
um Hadoop there's a few other

2047
01:41:55,860 --> 01:41:57,420
distributed things that don't work

2048
01:41:57,420 --> 01:41:59,760
there's more applications that assertive

2049
01:41:59,760 --> 01:42:02,400
E4 in the way they're built so those you

2050
01:42:02,400 --> 01:42:04,020
have to have V4 addresses we can't run

2051
01:42:04,020 --> 01:42:05,760
those yet

2052
01:42:05,760 --> 01:42:08,699
what doesn't work very well

2053
01:42:08,699 --> 01:42:10,800
um node.js is probably the biggest pain

2054
01:42:10,800 --> 01:42:12,239
point for us

2055
01:42:12,239 --> 01:42:14,760
um it has very strong ideas about why it

2056
01:42:14,760 --> 01:42:16,920
wants to connect out over V4 even when

2057
01:42:16,920 --> 01:42:18,960
the DNS server gave it a code address

2058
01:42:18,960 --> 01:42:21,540
that it should be using

2059
01:42:21,540 --> 01:42:23,580
um Docker and the whole thing is built

2060
01:42:23,580 --> 01:42:24,600
on the Assumption there's Network

2061
01:42:24,600 --> 01:42:27,000
address translation everywhere so a

2062
01:42:27,000 --> 01:42:28,619
whole load of the firewalling tools and

2063
01:42:28,619 --> 01:42:30,179
stuff don't work

2064
01:42:30,179 --> 01:42:31,679
um which is a shame because Docker is

2065
01:42:31,679 --> 01:42:33,420
the absolute perfect use case for V6

2066
01:42:33,420 --> 01:42:35,040
because

2067
01:42:35,040 --> 01:42:36,600
um rather than having to implement an

2068
01:42:36,600 --> 01:42:38,699
overlay network from one of the multiple

2069
01:42:38,699 --> 01:42:40,739
alternative sources of overlay networks

2070
01:42:40,739 --> 01:42:42,239
you could just give it a V6 block and

2071
01:42:42,239 --> 01:42:43,860
let everything talk to each other out of

2072
01:42:43,860 --> 01:42:46,380
the box and it would all work

2073
01:42:46,380 --> 01:42:48,840
um snap applications deployed in snaps

2074
01:42:48,840 --> 01:42:50,100
on Ubuntu

2075
01:42:50,100 --> 01:42:52,260
um will frequently refuse to download

2076
01:42:52,260 --> 01:42:54,659
themselves over V6

2077
01:42:54,659 --> 01:42:56,100
um and basically there's a lot of

2078
01:42:56,100 --> 01:42:59,880
applications that will prefer V4 over V6

2079
01:42:59,880 --> 01:43:03,659
because V4 always works

2080
01:43:03,659 --> 01:43:06,480
um and a bunch of those you can fix by

2081
01:43:06,480 --> 01:43:09,360
just breaking V4 completely if you don't

2082
01:43:09,360 --> 01:43:11,280
give them a records back they will

2083
01:43:11,280 --> 01:43:13,080
eventually decide to connect over V6 and

2084
01:43:13,080 --> 01:43:15,659
work add some please

2085
01:43:15,659 --> 01:43:17,100
so

2086
01:43:17,100 --> 01:43:18,600
um when we did our first implementation

2087
01:43:18,600 --> 01:43:21,060
what did we get wrong uh we did a slash

2088
01:43:21,060 --> 01:43:23,760
64 Lan for each of our data centers that

2089
01:43:23,760 --> 01:43:27,179
had a slash 24 of V4 space in and gave

2090
01:43:27,179 --> 01:43:29,159
customers a slash 96 of address space

2091
01:43:29,159 --> 01:43:30,780
from it

2092
01:43:30,780 --> 01:43:32,340
um all the block lists decided to filter

2093
01:43:32,340 --> 01:43:34,860
on a slash 64 one spamming customer your

2094
01:43:34,860 --> 01:43:36,300
data center can't send any traffic to

2095
01:43:36,300 --> 01:43:38,520
people who blocked you anymore

2096
01:43:38,520 --> 01:43:41,400
um so now we give every customer a slash

2097
01:43:41,400 --> 01:43:44,100
48 if they want it and you get a 64 per

2098
01:43:44,100 --> 01:43:46,260
host so each host is individually

2099
01:43:46,260 --> 01:43:48,480
blockable by internet block lists and

2100
01:43:48,480 --> 01:43:50,100
renumbering this was not a great deal of

2101
01:43:50,100 --> 01:43:52,280
fun

2102
01:43:53,100 --> 01:43:55,560
um filtering this is probably one of the

2103
01:43:55,560 --> 01:43:57,239
biggest pain points when you're on a V6

2104
01:43:57,239 --> 01:43:59,520
only server the whole of ipv4 appears to

2105
01:43:59,520 --> 01:44:01,139
come from one IP address

2106
01:44:01,139 --> 01:44:02,340
so

2107
01:44:02,340 --> 01:44:04,260
um when you get denial of service from a

2108
01:44:04,260 --> 01:44:06,119
bunch of V4 things it all comes in from

2109
01:44:06,119 --> 01:44:08,219
the same V6 address and separating the

2110
01:44:08,219 --> 01:44:09,600
traffic out to selectively block

2111
01:44:09,600 --> 01:44:12,600
malicious hosts is really hard

2112
01:44:12,600 --> 01:44:15,600
um and uh you can quite easily

2113
01:44:15,600 --> 01:44:17,699
accidentally block the entirety of V4

2114
01:44:17,699 --> 01:44:20,699
and today that's much less of a problem

2115
01:44:20,699 --> 01:44:23,159
than it used to be because substantial

2116
01:44:23,159 --> 01:44:25,080
fractions of your traffic coming over V6

2117
01:44:25,080 --> 01:44:26,760
and accidentally dropping half your

2118
01:44:26,760 --> 01:44:28,320
traffic is a lot less embarrassing than

2119
01:44:28,320 --> 01:44:30,420
dropping all of it

2120
01:44:30,420 --> 01:44:31,139
um

2121
01:44:31,139 --> 01:44:34,020
so and if all the web applications which

2122
01:44:34,020 --> 01:44:35,880
is the majority of what we deal with um

2123
01:44:35,880 --> 01:44:38,460
what this means is uh you need to pass

2124
01:44:38,460 --> 01:44:40,320
the V4 address through using proxy

2125
01:44:40,320 --> 01:44:42,960
protocol and then Apache filters in the

2126
01:44:42,960 --> 01:44:44,940
Apache config rather than doing it more

2127
01:44:44,940 --> 01:44:46,679
quickly at the firewall level on your

2128
01:44:46,679 --> 01:44:48,840
host machine which is a little annoying

2129
01:44:48,840 --> 01:44:52,520
but it kind of works next one please

2130
01:44:53,820 --> 01:44:56,580
um so we've got a proof of concept proxy

2131
01:44:56,580 --> 01:44:58,260
implementation

2132
01:44:58,260 --> 01:45:01,500
um that takes an entire four billion V6

2133
01:45:01,500 --> 01:45:04,380
addresses and so when it proxies the

2134
01:45:04,380 --> 01:45:06,239
address back to you it embeds the source

2135
01:45:06,239 --> 01:45:08,219
V4 address in the V6 address so the

2136
01:45:08,219 --> 01:45:09,960
traffic comes on and then you can use

2137
01:45:09,960 --> 01:45:12,119
your firewall because every single V4

2138
01:45:12,119 --> 01:45:13,380
address appears to come from a different

2139
01:45:13,380 --> 01:45:15,900
V6 address out of the proxy

2140
01:45:15,900 --> 01:45:18,119
um which is very much like

2141
01:45:18,119 --> 01:45:21,659
um not six four in reverse

2142
01:45:21,659 --> 01:45:24,179
um so uh We've embedded the destination

2143
01:45:24,179 --> 01:45:25,679
port number we're not sure if that's a

2144
01:45:25,679 --> 01:45:27,000
good idea or not

2145
01:45:27,000 --> 01:45:28,679
um but basically we really need to get

2146
01:45:28,679 --> 01:45:30,480
this built into ha proxy which is what

2147
01:45:30,480 --> 01:45:33,300
we use for our proxy service and then

2148
01:45:33,300 --> 01:45:35,400
um every V4 address looks like a V6

2149
01:45:35,400 --> 01:45:37,860
address and all of your V6 filtering

2150
01:45:37,860 --> 01:45:42,259
tools work better so that's coming next

2151
01:45:42,600 --> 01:45:44,699
um more things that went badly uh large

2152
01:45:44,699 --> 01:45:48,000
on link prefixes don't work very well

2153
01:45:48,000 --> 01:45:49,920
um if you give your customer a slash 64

2154
01:45:49,920 --> 01:45:51,420
that you can use a different IP address

2155
01:45:51,420 --> 01:45:52,920
for every single outgoing connection

2156
01:45:52,920 --> 01:45:55,320
they ever make

2157
01:45:55,320 --> 01:45:57,300
um and they do this to try and avoid

2158
01:45:57,300 --> 01:45:59,520
other people's rate limits

2159
01:45:59,520 --> 01:46:01,980
um and that's really painful

2160
01:46:01,980 --> 01:46:03,300
um and even if they do it across your

2161
01:46:03,300 --> 01:46:04,800
land you know just being scanned

2162
01:46:04,800 --> 01:46:06,960
continuously

2163
01:46:06,960 --> 01:46:09,300
um from vast numbers of V6 addresses

2164
01:46:09,300 --> 01:46:10,560
appearing

2165
01:46:10,560 --> 01:46:12,239
um similarly when people scan your

2166
01:46:12,239 --> 01:46:13,860
address space inbound and try and

2167
01:46:13,860 --> 01:46:15,780
enumerate what's up there in a slash 64

2168
01:46:15,780 --> 01:46:17,520
and you spend the entire time trying to

2169
01:46:17,520 --> 01:46:19,679
enable discover who is actually using

2170
01:46:19,679 --> 01:46:21,179
these V6 addresses that's pretty bad

2171
01:46:21,179 --> 01:46:23,580
next slide

2172
01:46:23,580 --> 01:46:25,619
um and basically it comes down to the

2173
01:46:25,619 --> 01:46:28,020
fact that a slash 64 doesn't fit in Ram

2174
01:46:28,020 --> 01:46:32,040
you can't maintain a complete 64 of

2175
01:46:32,040 --> 01:46:35,040
um V6 to MAC address mappings

2176
01:46:35,040 --> 01:46:36,540
um there's lots of exciting things you

2177
01:46:36,540 --> 01:46:38,040
can discover in the Linux Network stack

2178
01:46:38,040 --> 01:46:39,480
about what happens when a garbage

2179
01:46:39,480 --> 01:46:41,400
collects all of this stuff um you can

2180
01:46:41,400 --> 01:46:43,260
stall your inbound Network for tens of

2181
01:46:43,260 --> 01:46:45,900
milliseconds maybe even a hundred

2182
01:46:45,900 --> 01:46:47,760
um and anyone in the same layer 2 domain

2183
01:46:47,760 --> 01:46:49,020
is you can force you to neighbor

2184
01:46:49,020 --> 01:46:50,460
discover billions of addresses and

2185
01:46:50,460 --> 01:46:53,880
that's really annoying next one please

2186
01:46:53,880 --> 01:46:55,800
so

2187
01:46:55,800 --> 01:46:57,420
um which gets back to the question of

2188
01:46:57,420 --> 01:46:59,880
why do we do neighbor Discovery or even

2189
01:46:59,880 --> 01:47:01,739
art for that matter and basically it's

2190
01:47:01,739 --> 01:47:04,020
to turn a V4 or V6 address into a MAC

2191
01:47:04,020 --> 01:47:04,980
address

2192
01:47:04,980 --> 01:47:07,020
but we've got a billing database that

2193
01:47:07,020 --> 01:47:11,040
already knows where every address can go

2194
01:47:11,040 --> 01:47:13,320
to in our Network

2195
01:47:13,320 --> 01:47:15,420
um and for security reasons if we get an

2196
01:47:15,420 --> 01:47:16,800
answer from a machine that doesn't match

2197
01:47:16,800 --> 01:47:18,300
what our billing database thinks we

2198
01:47:18,300 --> 01:47:19,380
should throw it away because our

2199
01:47:19,380 --> 01:47:21,840
security violation

2200
01:47:21,840 --> 01:47:24,420
um so why do we actually do this at all

2201
01:47:24,420 --> 01:47:26,719
next slide please

2202
01:47:26,719 --> 01:47:30,000
so now we don't

2203
01:47:30,000 --> 01:47:31,860
mostly

2204
01:47:31,860 --> 01:47:33,600
um all of our switches know all of the

2205
01:47:33,600 --> 01:47:35,400
link local addresses of all of our V6

2206
01:47:35,400 --> 01:47:37,080
address blocks

2207
01:47:37,080 --> 01:47:39,000
um and

2208
01:47:39,000 --> 01:47:39,900
um

2209
01:47:39,900 --> 01:47:42,239
our bgp Daemon running on the switch is

2210
01:47:42,239 --> 01:47:44,699
bird it knows about all the V6 ranges

2211
01:47:44,699 --> 01:47:47,100
attached to all the customers so as soon

2212
01:47:47,100 --> 01:47:48,900
as the link comes up it advertises out

2213
01:47:48,900 --> 01:47:50,820
and says I've got this like slash 64.

2214
01:47:50,820 --> 01:47:52,440
you can read me traffic over here and it

2215
01:47:52,440 --> 01:47:55,380
hands it all to the link local address

2216
01:47:55,380 --> 01:47:56,760
um and we don't need to do enable

2217
01:47:56,760 --> 01:48:00,440
discovery next slide

2218
01:48:00,900 --> 01:48:03,480
um and so essentially everything on our

2219
01:48:03,480 --> 01:48:05,699
network is now migrating to completely

2220
01:48:05,699 --> 01:48:07,860
layer three every link has point to

2221
01:48:07,860 --> 01:48:10,679
point everything is rooted

2222
01:48:10,679 --> 01:48:13,320
um we don't want to care about having

2223
01:48:13,320 --> 01:48:15,060
multiple things on the same Layer Two

2224
01:48:15,060 --> 01:48:16,800
segment there is one thing we know it's

2225
01:48:16,800 --> 01:48:19,080
link labor address link local address we

2226
01:48:19,080 --> 01:48:20,820
root to it

2227
01:48:20,820 --> 01:48:23,219
um and two of our five data centers are

2228
01:48:23,219 --> 01:48:24,719
in the are now basically enabled with

2229
01:48:24,719 --> 01:48:26,159
this and the rest are being worked round

2230
01:48:26,159 --> 01:48:27,780
over probably the next six to 12 months

2231
01:48:27,780 --> 01:48:29,820
next slide please

2232
01:48:29,820 --> 01:48:31,619
so how are we doing

2233
01:48:31,619 --> 01:48:33,300
so

2234
01:48:33,300 --> 01:48:35,280
um this is infrastructure that Mythic

2235
01:48:35,280 --> 01:48:37,199
beasts manage ourselves and customers

2236
01:48:37,199 --> 01:48:39,179
who are on servers that we manage for

2237
01:48:39,179 --> 01:48:41,159
them or we provide some level of

2238
01:48:41,159 --> 01:48:42,659
management and security updates and so

2239
01:48:42,659 --> 01:48:43,860
on

2240
01:48:43,860 --> 01:48:45,300
um about a quarter of them are still V4

2241
01:48:45,300 --> 01:48:47,580
single stack a little over a quarter of

2242
01:48:47,580 --> 01:48:49,980
dual stack and just under half our V6

2243
01:48:49,980 --> 01:48:52,920
single stack which is obviously really

2244
01:48:52,920 --> 01:48:54,360
good news we've come a really long way

2245
01:48:54,360 --> 01:48:56,280
next slide

2246
01:48:56,280 --> 01:48:58,920
next one unfortunately that's not quite

2247
01:48:58,920 --> 01:49:00,780
as good as it seems

2248
01:49:00,780 --> 01:49:02,940
um the V6 only ones are newer and

2249
01:49:02,940 --> 01:49:05,520
typically tend to be simpler and one of

2250
01:49:05,520 --> 01:49:06,960
the reasons for that is because V6

2251
01:49:06,960 --> 01:49:09,000
addresses are free you tend to spin up

2252
01:49:09,000 --> 01:49:11,280
more servers because they don't have a

2253
01:49:11,280 --> 01:49:14,460
V4 tax cost attached to them

2254
01:49:14,460 --> 01:49:15,780
um and so you get distributed

2255
01:49:15,780 --> 01:49:18,719
applications rather than monoliths

2256
01:49:18,719 --> 01:49:19,920
um with lots of things running on the

2257
01:49:19,920 --> 01:49:21,540
same before address so

2258
01:49:21,540 --> 01:49:24,960
the there's so you know a good like 25

2259
01:49:24,960 --> 01:49:27,060
of that V6 graph is actually one

2260
01:49:27,060 --> 01:49:28,619
application that we just run hundreds

2261
01:49:28,619 --> 01:49:29,820
and hundreds and hundreds of identical

2262
01:49:29,820 --> 01:49:32,400
copies of whereas the V4 every one of

2263
01:49:32,400 --> 01:49:34,739
those is a special Snowflake and needs a

2264
01:49:34,739 --> 01:49:37,500
little bit of help next one please

2265
01:49:37,500 --> 01:49:40,199
and turning off Legacy things is really

2266
01:49:40,199 --> 01:49:41,400
hard

2267
01:49:41,400 --> 01:49:42,780
um so we've got three percent of our

2268
01:49:42,780 --> 01:49:44,280
Visa four servers are due to go by the

2269
01:49:44,280 --> 01:49:45,480
end of the month

2270
01:49:45,480 --> 01:49:47,699
um this is a Centos 5 build that we

2271
01:49:47,699 --> 01:49:51,119
deployed in 2017 when sensor 5 went end

2272
01:49:51,119 --> 01:49:52,440
of life

2273
01:49:52,440 --> 01:49:55,260
um as a six-month migration project to

2274
01:49:55,260 --> 01:49:56,639
move on to the newer stack that our

2275
01:49:56,639 --> 01:49:58,560
customer was using which finished in

2276
01:49:58,560 --> 01:50:01,320
September 2022 and overrun of four and a

2277
01:50:01,320 --> 01:50:04,260
half years on a six-month project

2278
01:50:04,260 --> 01:50:07,560
um so turning off your V4 only things is

2279
01:50:07,560 --> 01:50:09,420
very hard they are going to be here for

2280
01:50:09,420 --> 01:50:11,580
a really long time

2281
01:50:11,580 --> 01:50:13,739
um and in sorting this talk out I found

2282
01:50:13,739 --> 01:50:15,239
we've actually got some of our

2283
01:50:15,239 --> 01:50:16,619
public-facing things that are still V4

2284
01:50:16,619 --> 01:50:18,659
only that we hadn't noticed so I need to

2285
01:50:18,659 --> 01:50:21,179
uh finish auditing and fixing all of

2286
01:50:21,179 --> 01:50:23,040
those so they are all dual stack next

2287
01:50:23,040 --> 01:50:24,960
one please

2288
01:50:24,960 --> 01:50:27,360
so yeah V4 is all always going to be

2289
01:50:27,360 --> 01:50:28,560
here

2290
01:50:28,560 --> 01:50:30,840
um some things are too expensive and too

2291
01:50:30,840 --> 01:50:33,780
hard to migrate to V6 we just did a new

2292
01:50:33,780 --> 01:50:36,659
V4 only setup on behalf of they're not

2293
01:50:36,659 --> 01:50:38,400
technically a bank um but basically

2294
01:50:38,400 --> 01:50:39,900
they're a bank

2295
01:50:39,900 --> 01:50:42,360
um it does Swift transactions

2296
01:50:42,360 --> 01:50:44,699
um which are some extra for V4 they were

2297
01:50:44,699 --> 01:50:45,780
fine

2298
01:50:45,780 --> 01:50:47,400
um they're a bank they're never going to

2299
01:50:47,400 --> 01:50:49,139
run out of money if we charge them a

2300
01:50:49,139 --> 01:50:50,520
hundred dollars a month for every V4

2301
01:50:50,520 --> 01:50:52,440
address they used they would be fine

2302
01:50:52,440 --> 01:50:55,260
with that next slide please

2303
01:50:55,260 --> 01:50:57,960
so which gets you into a chat from

2304
01:50:57,960 --> 01:50:59,699
Finance side this is not Financial

2305
01:50:59,699 --> 01:51:01,920
advice do not take my advice on finance

2306
01:51:01,920 --> 01:51:03,900
use proper like qualified people and

2307
01:51:03,900 --> 01:51:05,280
whatever

2308
01:51:05,280 --> 01:51:07,860
um when we started V6 only in 2014 we

2309
01:51:07,860 --> 01:51:09,900
set the price of a V4 address at two

2310
01:51:09,900 --> 01:51:11,520
pounds a month because it seemed like a

2311
01:51:11,520 --> 01:51:13,380
good number that was just enough that

2312
01:51:13,380 --> 01:51:14,760
most people wouldn't moan about having

2313
01:51:14,760 --> 01:51:16,920
to pay it and the other half would get

2314
01:51:16,920 --> 01:51:18,840
really angry and turn off feeful which

2315
01:51:18,840 --> 01:51:20,940
is what we were aiming for next slide

2316
01:51:20,940 --> 01:51:22,679
this appears to have become relatively

2317
01:51:22,679 --> 01:51:26,460
standard Amazon 3.60 a month as your 260

2318
01:51:26,460 --> 01:51:29,400
Google 288 it varies

2319
01:51:29,400 --> 01:51:31,139
um interestingly on the access side it's

2320
01:51:31,139 --> 01:51:34,020
a bit cheaper Zen internet's 83p a month

2321
01:51:34,020 --> 01:51:35,940
so but basically yeah you're looking

2322
01:51:35,940 --> 01:51:38,100
pound couple of dollars a month for a V4

2323
01:51:38,100 --> 01:51:41,179
address next slide please

2324
01:51:41,340 --> 01:51:43,020
um if you go and talk to someone who

2325
01:51:43,020 --> 01:51:44,460
works in finance they have very

2326
01:51:44,460 --> 01:51:45,840
interesting things to say about this

2327
01:51:45,840 --> 01:51:46,800
because

2328
01:51:46,800 --> 01:51:48,480
um people who run Pension funds by

2329
01:51:48,480 --> 01:51:49,920
government bonds and they get three and

2330
01:51:49,920 --> 01:51:51,960
a half percent back whereas today you

2331
01:51:51,960 --> 01:51:53,400
can buy an IP address on the open market

2332
01:51:53,400 --> 01:51:54,960
for fifty dollars and rent it for two

2333
01:51:54,960 --> 01:51:59,000
dollars a month netting you a 48 return

2334
01:51:59,760 --> 01:52:02,699
um so if you had 200 billion dollars and

2335
01:52:02,699 --> 01:52:04,800
you could buy the entire V4 space you

2336
01:52:04,800 --> 01:52:06,719
could solve the problem of Pension funds

2337
01:52:06,719 --> 01:52:09,380
being solvent

2338
01:52:09,900 --> 01:52:10,860
um

2339
01:52:10,860 --> 01:52:13,500
which is worth thinking about

2340
01:52:13,500 --> 01:52:15,659
um now obviously ipv4 addresses have

2341
01:52:15,659 --> 01:52:16,920
higher risk attached to them from

2342
01:52:16,920 --> 01:52:18,179
government bonds because governments

2343
01:52:18,179 --> 01:52:19,739
always pay their debts and everyone's

2344
01:52:19,739 --> 01:52:22,199
going to move off E4 so you know you

2345
01:52:22,199 --> 01:52:24,000
need a higher rate of return but doesn't

2346
01:52:24,000 --> 01:52:25,619
need to be 10 times as good would double

2347
01:52:25,619 --> 01:52:28,080
be good enough you know who knows so

2348
01:52:28,080 --> 01:52:29,639
yeah that's one to think about next

2349
01:52:29,639 --> 01:52:31,739
slide

2350
01:52:31,739 --> 01:52:32,520
um

2351
01:52:32,520 --> 01:52:34,920
and this also comes on to some thoughts

2352
01:52:34,920 --> 01:52:36,659
um this is a fictional tier one ISP

2353
01:52:36,659 --> 01:52:37,980
there's figures are not that different

2354
01:52:37,980 --> 01:52:39,960
from a couple of real ones

2355
01:52:39,960 --> 01:52:41,639
um Enterprise Value is the cost of

2356
01:52:41,639 --> 01:52:43,560
buying all the shares in your ISP and

2357
01:52:43,560 --> 01:52:45,300
paying off all of its debts three

2358
01:52:45,300 --> 01:52:47,100
billion dollars will buy you a tier one

2359
01:52:47,100 --> 01:52:49,320
ISP roughly and get you 30 million IP

2360
01:52:49,320 --> 01:52:51,960
addresses which works out at a hundred

2361
01:52:51,960 --> 01:52:54,739
dollars an IP address

2362
01:52:55,020 --> 01:52:57,480
um so half the value of that Tier 1 ISP

2363
01:52:57,480 --> 01:53:01,080
is its ipv4 space at today's prices

2364
01:53:01,080 --> 01:53:04,020
um if you can get ipv4 addresses to 120

2365
01:53:04,020 --> 01:53:05,460
dollars

2366
01:53:05,460 --> 01:53:07,500
um you could buy the entire ISP sell the

2367
01:53:07,500 --> 01:53:09,719
IP space clear yourself

2368
01:53:09,719 --> 01:53:13,739
um what 60 no 600 million dollars and

2369
01:53:13,739 --> 01:53:16,619
throw away your Tier 1 ISP next slide

2370
01:53:16,619 --> 01:53:19,320
which takes you to Wall Street

2371
01:53:19,320 --> 01:53:21,420
um where of course the key plot point in

2372
01:53:21,420 --> 01:53:23,760
the film from the 80s is Gordon the

2373
01:53:23,760 --> 01:53:25,440
gecko spots the pension fund has more

2374
01:53:25,440 --> 01:53:26,460
money than it needs to pay the

2375
01:53:26,460 --> 01:53:28,440
pensioners buys the airline shuts it and

2376
01:53:28,440 --> 01:53:29,820
steals the money

2377
01:53:29,820 --> 01:53:33,360
is that going to happen to some isps out

2378
01:53:33,360 --> 01:53:35,400
there who needs to be really scared and

2379
01:53:35,400 --> 01:53:37,380
at what value per IP do you need to get

2380
01:53:37,380 --> 01:53:40,800
frightened next slide

2381
01:53:40,800 --> 01:53:42,719
my good friend Evan Upton who made not

2382
01:53:42,719 --> 01:53:44,940
only this t-shirt he builds pieces that

2383
01:53:44,940 --> 01:53:46,440
cost five dollars

2384
01:53:46,440 --> 01:53:48,719
and they cost fifty dollars to connect

2385
01:53:48,719 --> 01:53:51,179
to the internet

2386
01:53:51,179 --> 01:53:53,100
um someone did point out the last time I

2387
01:53:53,100 --> 01:53:54,600
said this that it's very hard to buy a

2388
01:53:54,600 --> 01:53:56,100
Raspberry Pi zero for five dollars only

2389
01:53:56,100 --> 01:53:57,960
more due to supply constraints to which

2390
01:53:57,960 --> 01:54:00,900
my response is I am prepared to bet that

2391
01:54:00,900 --> 01:54:02,639
more Raspberry Pi zeros will come out of

2392
01:54:02,639 --> 01:54:04,800
the Raspberry Pi zero Factory than ipv4

2393
01:54:04,800 --> 01:54:06,360
addresses come out of the ibb4 address

2394
01:54:06,360 --> 01:54:08,340
Factory

2395
01:54:08,340 --> 01:54:10,380
um so next slide

2396
01:54:10,380 --> 01:54:11,520
so

2397
01:54:11,520 --> 01:54:13,739
we built a Raspberry Pi Cloud

2398
01:54:13,739 --> 01:54:15,540
um that's a lot of Raspberry Pi 4S in an

2399
01:54:15,540 --> 01:54:17,400
enclosure those are much more expensive

2400
01:54:17,400 --> 01:54:20,760
Raspberry Pi's they cost 35 or even 55

2401
01:54:20,760 --> 01:54:22,619
for some of them so still the same cost

2402
01:54:22,619 --> 01:54:24,719
as the V4 address roughly

2403
01:54:24,719 --> 01:54:25,980
um and you start racking them up and

2404
01:54:25,980 --> 01:54:28,920
stacking them in racks next slide

2405
01:54:28,920 --> 01:54:30,900
and uh they start to look like this you

2406
01:54:30,900 --> 01:54:32,280
have some fans on the back to keep them

2407
01:54:32,280 --> 01:54:34,320
cold and a lot of Poe switches in order

2408
01:54:34,320 --> 01:54:36,239
to give them power and network

2409
01:54:36,239 --> 01:54:37,800
um they have one wire to each they all

2410
01:54:37,800 --> 01:54:40,199
net boot they talk to a file server

2411
01:54:40,199 --> 01:54:42,179
um and what you can see there is right

2412
01:54:42,179 --> 01:54:43,619
on the bottom with all the ugly wires

2413
01:54:43,619 --> 01:54:45,540
that's the pi 3 the previous model that

2414
01:54:45,540 --> 01:54:47,520
doesn't stack quite so close the all the

2415
01:54:47,520 --> 01:54:50,880
top ones the pi fours that's 384 servers

2416
01:54:50,880 --> 01:54:53,760
in nine year of Rackspace

2417
01:54:53,760 --> 01:54:56,239
um next slide please

2418
01:54:56,239 --> 01:54:59,280
so 3u chassis you mount two of them back

2419
01:54:59,280 --> 01:55:01,440
to back 96 Pi fours

2420
01:55:01,440 --> 01:55:02,639
um each one of those is a quad core

2421
01:55:02,639 --> 01:55:04,679
machine with eight gig of RAM

2422
01:55:04,679 --> 01:55:06,239
um you've got a couple of 48 Port

2423
01:55:06,239 --> 01:55:07,800
switches

2424
01:55:07,800 --> 01:55:08,460
um

2425
01:55:08,460 --> 01:55:10,320
for reasons of compatibility with the pi

2426
01:55:10,320 --> 01:55:11,940
3 although this might be solved in the

2427
01:55:11,940 --> 01:55:14,400
newest firmware released in the pi 4 it

2428
01:55:14,400 --> 01:55:16,560
only does V4 for the first stage of net

2429
01:55:16,560 --> 01:55:19,560
boot so we give it a tiny amount of RFC

2430
01:55:19,560 --> 01:55:21,900
1918 space to get to the NFS file system

2431
01:55:21,900 --> 01:55:24,119
so you can boot the thing

2432
01:55:24,119 --> 01:55:26,100
um we can't afford to give these a V4

2433
01:55:26,100 --> 01:55:28,020
address each because the V4 addresses

2434
01:55:28,020 --> 01:55:30,780
are the same price as the computers so

2435
01:55:30,780 --> 01:55:32,940
we thought about it and we said right no

2436
01:55:32,940 --> 01:55:35,100
V4 we're just not doing it you can't

2437
01:55:35,100 --> 01:55:37,619
have V4 all external communication has

2438
01:55:37,619 --> 01:55:40,560
to be V6 next slide

2439
01:55:40,560 --> 01:55:42,239
um we do lose some customers these are

2440
01:55:42,239 --> 01:55:43,860
some complaints from people who have

2441
01:55:43,860 --> 01:55:45,300
sent this on sport which basically says

2442
01:55:45,300 --> 01:55:46,440
I'm canceling this because it doesn't

2443
01:55:46,440 --> 01:55:49,980
have V4 Rara I don't want it which is

2444
01:55:49,980 --> 01:55:51,900
fine okay buy a different service that

2445
01:55:51,900 --> 01:55:55,380
costs more next slide please

2446
01:55:55,380 --> 01:55:58,560
um biggest secure biggest support query

2447
01:55:58,560 --> 01:56:00,659
we get is lots of people go I've got

2448
01:56:00,659 --> 01:56:02,159
server on the internet I immediately

2449
01:56:02,159 --> 01:56:03,900
need to secure it let's immediately

2450
01:56:03,900 --> 01:56:06,000
configure a super secure ipv firewall

2451
01:56:06,000 --> 01:56:10,139
things you can firewall your file system

2452
01:56:10,139 --> 01:56:11,699
that's it

2453
01:56:11,699 --> 01:56:13,500
the only thing you can firewall this

2454
01:56:13,500 --> 01:56:15,960
does not end very well so yeah there's a

2455
01:56:15,960 --> 01:56:17,159
bit of explaining that you need to make

2456
01:56:17,159 --> 01:56:18,840
an Implement a V6 firewall please don't

2457
01:56:18,840 --> 01:56:21,300
Implement a v41 that will not help next

2458
01:56:21,300 --> 01:56:23,159
slide

2459
01:56:23,159 --> 01:56:25,500
um so back to some of those badly

2460
01:56:25,500 --> 01:56:27,600
behaved applications

2461
01:56:27,600 --> 01:56:29,639
um node.js

2462
01:56:29,639 --> 01:56:31,500
um hosts file work around is the easy

2463
01:56:31,500 --> 01:56:33,300
way to do a bunch of these um you put

2464
01:56:33,300 --> 01:56:35,400
some static

2465
01:56:35,400 --> 01:56:37,500
um entries in your host file and then

2466
01:56:37,500 --> 01:56:41,100
node will not get an A required a ah

2467
01:56:41,100 --> 01:56:43,020
will not get an A record for a DNS query

2468
01:56:43,020 --> 01:56:45,420
so it won't know V4 is available and

2469
01:56:45,420 --> 01:56:47,280
that will force it to use V6 and it will

2470
01:56:47,280 --> 01:56:48,600
connect out and go and download the bits

2471
01:56:48,600 --> 01:56:50,699
and pieces it wants

2472
01:56:50,699 --> 01:56:52,139
um because basically the implementation

2473
01:56:52,139 --> 01:56:56,400
sees it it's got a RFC 19 address on the

2474
01:56:56,400 --> 01:56:58,320
host and V4 always works so you should

2475
01:56:58,320 --> 01:56:59,940
always prefer that

2476
01:56:59,940 --> 01:57:02,460
um even environments when it doesn't

2477
01:57:02,460 --> 01:57:04,920
um so now no package manager

2478
01:57:04,920 --> 01:57:07,619
fastly provides dual stack

2479
01:57:07,619 --> 01:57:09,360
um for all the package downloads you

2480
01:57:09,360 --> 01:57:11,340
have a V6 only

2481
01:57:11,340 --> 01:57:13,260
um Raspberry Pi and it still won't

2482
01:57:13,260 --> 01:57:14,880
download over V6 because it wants to use

2483
01:57:14,880 --> 01:57:16,560
V4 because it thinks that that's more

2484
01:57:16,560 --> 01:57:17,940
reliable

2485
01:57:17,940 --> 01:57:19,860
um next slide

2486
01:57:19,860 --> 01:57:21,239
so

2487
01:57:21,239 --> 01:57:23,159
um trying to work out what to do about

2488
01:57:23,159 --> 01:57:24,719
some of these

2489
01:57:24,719 --> 01:57:26,880
um we thought about actually making our

2490
01:57:26,880 --> 01:57:29,520
DNS servers not reply to a requests at

2491
01:57:29,520 --> 01:57:30,900
all

2492
01:57:30,900 --> 01:57:33,599
um is possibly worth doing

2493
01:57:33,599 --> 01:57:36,320
um there's a library called tnap64 which

2494
01:57:36,320 --> 01:57:39,900
basically intercepts all of your open

2495
01:57:39,900 --> 01:57:41,580
socket connections and forces them out

2496
01:57:41,580 --> 01:57:44,340
over V6 in theory it's not supposed to

2497
01:57:44,340 --> 01:57:47,219
intercept ones to 127 not not one um but

2498
01:57:47,219 --> 01:57:48,480
last time I tried this I kept having

2499
01:57:48,480 --> 01:57:50,219
problems with that

2500
01:57:50,219 --> 01:57:51,900
um and it's really annoying if your

2501
01:57:51,900 --> 01:57:53,880
application now can talk to all the

2502
01:57:53,880 --> 01:57:55,080
other things it needs to talk to on the

2503
01:57:55,080 --> 01:57:56,520
internet but can't talk to its database

2504
01:57:56,520 --> 01:57:58,980
server that's on the same machine

2505
01:57:58,980 --> 01:58:00,119
um and

2506
01:58:00,119 --> 01:58:01,739
painfully

2507
01:58:01,739 --> 01:58:03,060
um see that

2508
01:58:03,060 --> 01:58:05,880
the tour Anderson wrote a sea light

2509
01:58:05,880 --> 01:58:08,159
implementation for Linux you install it

2510
01:58:08,159 --> 01:58:10,560
and V4 magically works in your V6 only

2511
01:58:10,560 --> 01:58:12,780
server and all of your applications do

2512
01:58:12,780 --> 01:58:14,219
not need to be educated that they're in

2513
01:58:14,219 --> 01:58:16,380
a new network environment

2514
01:58:16,380 --> 01:58:17,880
um I would daily like to fix all the

2515
01:58:17,880 --> 01:58:20,820
applications but as a work around this

2516
01:58:20,820 --> 01:58:23,460
this gets you going so maybe we need to

2517
01:58:23,460 --> 01:58:25,020
install this by default

2518
01:58:25,020 --> 01:58:26,400
possibly

2519
01:58:26,400 --> 01:58:28,139
um next slide

2520
01:58:28,139 --> 01:58:30,599
so next question I get this a lot like

2521
01:58:30,599 --> 01:58:32,099
this is a toy right no one would

2522
01:58:32,099 --> 01:58:34,679
seriously use this for anything

2523
01:58:34,679 --> 01:58:36,000
um so

2524
01:58:36,000 --> 01:58:37,980
there's 25 million raspberry pies that

2525
01:58:37,980 --> 01:58:40,500
are in industrial applications

2526
01:58:40,500 --> 01:58:41,940
um some of the companies that use

2527
01:58:41,940 --> 01:58:43,920
Raspberry Pi's in their applications

2528
01:58:43,920 --> 01:58:46,440
have continuous integration setups where

2529
01:58:46,440 --> 01:58:48,420
they build their software and want to

2530
01:58:48,420 --> 01:58:50,880
test it on Raspberry Pi's

2531
01:58:50,880 --> 01:58:52,260
um some people want to spend a load of

2532
01:58:52,260 --> 01:58:54,659
them up on demand for various things

2533
01:58:54,659 --> 01:58:57,060
distributed computing systems like

2534
01:58:57,060 --> 01:58:58,560
actually having real computers not

2535
01:58:58,560 --> 01:59:00,300
virtual ones has advantages in research

2536
01:59:00,300 --> 01:59:03,739
so people do that next slide

2537
01:59:03,900 --> 01:59:05,639
um and the most exciting one is pi

2538
01:59:05,639 --> 01:59:07,500
Wheels uh this came out of the

2539
01:59:07,500 --> 01:59:08,699
International Space Station the

2540
01:59:08,699 --> 01:59:10,020
International Space Station has some

2541
01:59:10,020 --> 01:59:11,400
Raspberry Pi's on it for kids to do

2542
01:59:11,400 --> 01:59:13,500
scientific research projects they all

2543
01:59:13,500 --> 01:59:15,960
need numerical python numerical python

2544
01:59:15,960 --> 01:59:17,820
is a massive C library that goes into

2545
01:59:17,820 --> 01:59:19,500
Python and it takes two and a half hours

2546
01:59:19,500 --> 01:59:21,719
to compile on a pie which really slows

2547
01:59:21,719 --> 01:59:23,520
down the whole thing so what you want to

2548
01:59:23,520 --> 01:59:26,760
do is pre-compile it and distribute it

2549
01:59:26,760 --> 01:59:27,960
um and

2550
01:59:27,960 --> 01:59:30,239
that project got out of hand Ben who ran

2551
01:59:30,239 --> 01:59:32,280
it decided to pre-compile every python

2552
01:59:32,280 --> 01:59:34,860
module for every python version for the

2553
01:59:34,860 --> 01:59:36,480
Raspberry Pi and make it into a service

2554
01:59:36,480 --> 01:59:38,040
that it just downloads binaries to speed

2555
01:59:38,040 --> 01:59:39,659
everything up

2556
01:59:39,659 --> 01:59:41,580
um this is done entirely in our

2557
01:59:41,580 --> 01:59:43,139
Raspberry Pi Cloud it's all natively

2558
01:59:43,139 --> 01:59:45,000
compiled because cross compilation is no

2559
01:59:45,000 --> 01:59:46,199
fun

2560
01:59:46,199 --> 01:59:47,880
um and it does all the distribution from

2561
01:59:47,880 --> 01:59:49,320
the Raspberry Pi Cloud as well and it

2562
01:59:49,320 --> 01:59:51,360
all goes through our V4 V6 proxy service

2563
01:59:51,360 --> 01:59:52,980
to all the people who don't have V6 at

2564
01:59:52,980 --> 01:59:55,440
the end next slide please

2565
01:59:55,440 --> 01:59:56,400
um

2566
01:59:56,400 --> 01:59:58,980
and it does north of a million packages

2567
01:59:58,980 --> 02:00:01,139
a day being downloaded right that's a

2568
02:00:01,139 --> 02:00:02,820
real application with a lot of end users

2569
02:00:02,820 --> 02:00:04,920
running V6 only in a Raspberry Pi

2570
02:00:04,920 --> 02:00:06,960
environment so you can use this for

2571
02:00:06,960 --> 02:00:09,300
production things and we don't know how

2572
02:00:09,300 --> 02:00:10,800
many other people now depend on this

2573
02:00:10,800 --> 02:00:12,300
working in order that their continuous

2574
02:00:12,300 --> 02:00:13,560
integration and build and everything in

2575
02:00:13,560 --> 02:00:15,420
their offices relies on next slide

2576
02:00:15,420 --> 02:00:17,099
please

2577
02:00:17,099 --> 02:00:19,860
um also we have desktop users who don't

2578
02:00:19,860 --> 02:00:21,239
know they're running in a nat64

2579
02:00:21,239 --> 02:00:23,159
environment because they just spin up a

2580
02:00:23,159 --> 02:00:24,540
desktop in our Raspberry Pi cloud and

2581
02:00:24,540 --> 02:00:25,739
the internet kind of works and you can

2582
02:00:25,739 --> 02:00:27,659
go to websites and so on so we have

2583
02:00:27,659 --> 02:00:29,520
another set of users there next slide

2584
02:00:29,520 --> 02:00:31,380
please

2585
02:00:31,380 --> 02:00:32,580
um anyone heard of a thing called

2586
02:00:32,580 --> 02:00:34,860
Mastodon last week this would have been

2587
02:00:34,860 --> 02:00:36,300
an entertaining question but probably

2588
02:00:36,300 --> 02:00:37,980
more hands today

2589
02:00:37,980 --> 02:00:40,320
yeah yeah and that became a thing since

2590
02:00:40,320 --> 02:00:42,239
I wrote the slides and arriving here so

2591
02:00:42,239 --> 02:00:43,739
I had to add something very quickly

2592
02:00:43,739 --> 02:00:44,880
yesterday

2593
02:00:44,880 --> 02:00:47,699
um it's a decentralized micro blogging

2594
02:00:47,699 --> 02:00:50,880
platform like basically it's Twitter but

2595
02:00:50,880 --> 02:00:53,400
without a mad founder

2596
02:00:53,400 --> 02:00:54,719
um

2597
02:00:54,719 --> 02:00:56,880
and it's suddenly become extremely

2598
02:00:56,880 --> 02:00:59,159
popular and every Mastered on server you

2599
02:00:59,159 --> 02:01:00,960
run your own instance of Mastodon or you

2600
02:01:00,960 --> 02:01:02,280
use someone else's instance and they

2601
02:01:02,280 --> 02:01:03,420
Federate so they all have to talk to

2602
02:01:03,420 --> 02:01:05,520
each other so that means suddenly we've

2603
02:01:05,520 --> 02:01:07,139
got an application that's using

2604
02:01:07,139 --> 02:01:09,780
thousands and thousands of servers that

2605
02:01:09,780 --> 02:01:11,099
all need to communicate with each other

2606
02:01:11,099 --> 02:01:15,199
so they all need V4 addresses next slide

2607
02:01:15,300 --> 02:01:17,940
um and it turns out that again is this a

2608
02:01:17,940 --> 02:01:20,340
toy a geek project uh this bloke called

2609
02:01:20,340 --> 02:01:21,900
Stephen Fry apparently he's quite famous

2610
02:01:21,900 --> 02:01:23,880
uh he's migrated and turned off his

2611
02:01:23,880 --> 02:01:25,440
Twitter account so

2612
02:01:25,440 --> 02:01:27,480
suddenly There's real users actual

2613
02:01:27,480 --> 02:01:29,219
departments you know money's about to

2614
02:01:29,219 --> 02:01:30,420
turn up

2615
02:01:30,420 --> 02:01:32,820
um next slide

2616
02:01:32,820 --> 02:01:35,639
um so yeah it's currently 4 000 servers

2617
02:01:35,639 --> 02:01:37,560
it might be 5 000 by the time this talk

2618
02:01:37,560 --> 02:01:39,840
ends and they all need to be full

2619
02:01:39,840 --> 02:01:41,400
because every server has to be able to

2620
02:01:41,400 --> 02:01:43,320
talk to every other server in order to

2621
02:01:43,320 --> 02:01:44,460
make it work

2622
02:01:44,460 --> 02:01:46,800
unless of course you can put it on one

2623
02:01:46,800 --> 02:01:48,960
of our V6 only services use our inbound

2624
02:01:48,960 --> 02:01:52,199
proxy for V4 because it's all https and

2625
02:01:52,199 --> 02:01:55,619
then use dns64 and that six four and C

2626
02:01:55,619 --> 02:01:57,000
like D

2627
02:01:57,000 --> 02:02:00,119
um because it's built on node.js and you

2628
02:02:00,119 --> 02:02:02,280
can't Etc host file work around every

2629
02:02:02,280 --> 02:02:03,540
server that gets sprung up in every

2630
02:02:03,540 --> 02:02:05,280
three minutes so you know it's a bit of

2631
02:02:05,280 --> 02:02:06,480
a pain

2632
02:02:06,480 --> 02:02:09,000
um however some other people some of

2633
02:02:09,000 --> 02:02:10,679
whom are also customers about us have

2634
02:02:10,679 --> 02:02:12,540
already started submitting bug fixes to

2635
02:02:12,540 --> 02:02:14,760
get this to work in a pure dns64.964

2636
02:02:14,760 --> 02:02:16,440
environment

2637
02:02:16,440 --> 02:02:18,360
um which is which is nice

2638
02:02:18,360 --> 02:02:19,800
um there are enough people running this

2639
02:02:19,800 --> 02:02:21,360
in a V6 only environment that they're

2640
02:02:21,360 --> 02:02:23,280
starting to submit software bug fixes

2641
02:02:23,280 --> 02:02:25,380
because fundamentally the people who

2642
02:02:25,380 --> 02:02:28,440
started using this are techies and cheap

2643
02:02:28,440 --> 02:02:30,060
so they don't want to pay for V4

2644
02:02:30,060 --> 02:02:31,500
addresses if they don't have to and

2645
02:02:31,500 --> 02:02:33,360
fixing source code is easy

2646
02:02:33,360 --> 02:02:35,159
so that's there's some of those out

2647
02:02:35,159 --> 02:02:37,739
there already next slide

2648
02:02:37,739 --> 02:02:40,139
um so this guy called Alastair Allen he

2649
02:02:40,139 --> 02:02:41,639
works for Raspberry Pi in the social

2650
02:02:41,639 --> 02:02:44,099
media team and he said we want to run

2651
02:02:44,099 --> 02:02:45,540
our own Mastered on instance just for

2652
02:02:45,540 --> 02:02:47,580
Raspberry Pi and we want to run it on a

2653
02:02:47,580 --> 02:02:49,500
Raspberry Pi as our production social

2654
02:02:49,500 --> 02:02:52,619
media application for a company with

2655
02:02:52,619 --> 02:02:54,360
half a million Twitter followers let's

2656
02:02:54,360 --> 02:02:57,000
see how many we get on this service

2657
02:02:57,000 --> 02:02:58,980
um that was the brief we got at 11AM on

2658
02:02:58,980 --> 02:03:01,080
Monday morning and we went production at

2659
02:03:01,080 --> 02:03:03,420
10 A.M on Wednesday which was a little

2660
02:03:03,420 --> 02:03:06,300
quicker than we were really aiming for

2661
02:03:06,300 --> 02:03:08,400
um but yeah so um Raspberry Pi's

2662
02:03:08,400 --> 02:03:10,440
production social media is sat in our PI

2663
02:03:10,440 --> 02:03:12,119
Cloud running on a Raspberry Pi in a V6

2664
02:03:12,119 --> 02:03:14,400
only environment to talk to Mastodon

2665
02:03:14,400 --> 02:03:15,840
which is a massively exploding social

2666
02:03:15,840 --> 02:03:19,560
media Network and no V4 is used anywhere

2667
02:03:19,560 --> 02:03:21,840
in the whole thing directly and we can

2668
02:03:21,840 --> 02:03:23,340
keep spinning out more and more of these

2669
02:03:23,340 --> 02:03:25,080
and add more massive on instances and we

2670
02:03:25,080 --> 02:03:28,020
don't need to consume any V4 addresses

2671
02:03:28,020 --> 02:03:28,679
um

2672
02:03:28,679 --> 02:03:31,260
all the V6 traffic goes direct the V4

2673
02:03:31,260 --> 02:03:33,060
stuff gets proxied and gets slightly

2674
02:03:33,060 --> 02:03:35,099
slower paths or possibly gets pulled

2675
02:03:35,099 --> 02:03:35,940
around

2676
02:03:35,940 --> 02:03:38,540
um thanks slide

2677
02:03:38,580 --> 02:03:40,619
um so uh yes

2678
02:03:40,619 --> 02:03:41,280
um

2679
02:03:41,280 --> 02:03:44,520
and the thing that comes with this is if

2680
02:03:44,520 --> 02:03:47,099
you solid Place V6 on a VM or on a

2681
02:03:47,099 --> 02:03:49,080
Raspberry Pi it costs less than eight

2682
02:03:49,080 --> 02:03:51,119
pounds a month which is suddenly a very

2683
02:03:51,119 --> 02:03:53,219
significant pricing number

2684
02:03:53,219 --> 02:03:55,500
um thanks to a little little blue tick

2685
02:03:55,500 --> 02:03:57,719
costing eight dollars a month

2686
02:03:57,719 --> 02:03:59,219
um but yeah the important point from our

2687
02:03:59,219 --> 02:04:01,860
point is we can keep deploying these

2688
02:04:01,860 --> 02:04:03,659
without consuming our remaining V4 space

2689
02:04:03,659 --> 02:04:05,880
our ability to sell Mastodon servers is

2690
02:04:05,880 --> 02:04:08,820
not limited by rv4 space

2691
02:04:08,820 --> 02:04:10,020
um which is good because we can't get

2692
02:04:10,020 --> 02:04:11,699
any more of that

2693
02:04:11,699 --> 02:04:13,800
um and the other thing is there's a load

2694
02:04:13,800 --> 02:04:15,780
of V4 only Mastodon out there and we

2695
02:04:15,780 --> 02:04:18,300
don't care we don't need them to migrate

2696
02:04:18,300 --> 02:04:19,980
they can stay V4 forever if they want to

2697
02:04:19,980 --> 02:04:22,320
or they can migrate it's up to them

2698
02:04:22,320 --> 02:04:23,940
um we're not compelling other people to

2699
02:04:23,940 --> 02:04:25,619
move and we don't need them to move in

2700
02:04:25,619 --> 02:04:27,360
order to enable our service

2701
02:04:27,360 --> 02:04:30,179
and next slide please

2702
02:04:30,179 --> 02:04:31,920
um so um this gets onto the question

2703
02:04:31,920 --> 02:04:34,440
that I got asked at ripe which is how do

2704
02:04:34,440 --> 02:04:36,900
we get more Network engineers and more

2705
02:04:36,900 --> 02:04:39,060
people trained to build applications and

2706
02:04:39,060 --> 02:04:40,560
understand that they're working in V6

2707
02:04:40,560 --> 02:04:44,340
only environment so um my first thought

2708
02:04:44,340 --> 02:04:45,960
was it'd be really nice to just have a

2709
02:04:45,960 --> 02:04:48,060
completely simple setup

2710
02:04:48,060 --> 02:04:49,500
um where you have an image through a

2711
02:04:49,500 --> 02:04:50,760
Raspberry Pi you plug it into your

2712
02:04:50,760 --> 02:04:53,040
switch and it Springs up a Wi-Fi network

2713
02:04:53,040 --> 02:04:56,460
that is dns64 and that six four and you

2714
02:04:56,460 --> 02:04:58,020
can connect to it and hey Presto you're

2715
02:04:58,020 --> 02:04:59,400
in a V6 only environment and you can

2716
02:04:59,400 --> 02:05:00,840
start testing your applications and make

2717
02:05:00,840 --> 02:05:03,119
them work which is very similar to what

2718
02:05:03,119 --> 02:05:06,300
Apple did for iOS applications

2719
02:05:06,300 --> 02:05:08,159
um the other one is of course is Retina

2720
02:05:08,159 --> 02:05:09,599
Raspberry Pi desktop in our cloud and

2721
02:05:09,599 --> 02:05:10,980
you get that by default some people

2722
02:05:10,980 --> 02:05:12,540
haven't noticed

2723
02:05:12,540 --> 02:05:14,520
um and the next training exercise is

2724
02:05:14,520 --> 02:05:16,619
going to be uh build your own V6 only

2725
02:05:16,619 --> 02:05:19,020
Mastodon server and join the federverse

2726
02:05:19,020 --> 02:05:21,360
um which we've got sometime next week an

2727
02:05:21,360 --> 02:05:22,800
article with a tutorial on how to do

2728
02:05:22,800 --> 02:05:26,159
that coming out and this is what will

2729
02:05:26,159 --> 02:05:28,320
hopefully start to drive the software

2730
02:05:28,320 --> 02:05:31,260
people to understand that V6 is a thing

2731
02:05:31,260 --> 02:05:33,659
V6 engine environments exist and your

2732
02:05:33,659 --> 02:05:36,420
software does need to work in those

2733
02:05:36,420 --> 02:05:39,540
um because the application side is the

2734
02:05:39,540 --> 02:05:40,980
barrier more than the network side from

2735
02:05:40,980 --> 02:05:42,360
where I set

2736
02:05:42,360 --> 02:05:44,460
um next slide

2737
02:05:44,460 --> 02:05:46,980
um so um the other thing for providers

2738
02:05:46,980 --> 02:05:49,020
is easing dual stack

2739
02:05:49,020 --> 02:05:49,920
um

2740
02:05:49,920 --> 02:05:51,840
I have pixie boot on all of my servers

2741
02:05:51,840 --> 02:05:53,820
so I can recover them and reinstall them

2742
02:05:53,820 --> 02:05:55,980
and whatever at the moment that all

2743
02:05:55,980 --> 02:05:57,900
starts with V4 because pixie boot works

2744
02:05:57,900 --> 02:06:00,360
with V4 reliably everywhere

2745
02:06:00,360 --> 02:06:02,280
um I haven't really tested it properly

2746
02:06:02,280 --> 02:06:06,119
on V6 but really I do want V6 pixie Boot

2747
02:06:06,119 --> 02:06:09,060
and that means when my server turns on I

2748
02:06:09,060 --> 02:06:10,260
want to see its Mac address and give it

2749
02:06:10,260 --> 02:06:13,980
a V6 dress in the simplest way possible

2750
02:06:13,980 --> 02:06:14,639
um

2751
02:06:14,639 --> 02:06:16,199
and it's the MAC address I care about

2752
02:06:16,199 --> 02:06:17,580
because I already know what the MAC

2753
02:06:17,580 --> 02:06:19,199
address of the server is and that's the

2754
02:06:19,199 --> 02:06:20,639
thing that tells me what address it

2755
02:06:20,639 --> 02:06:22,500
needs to get

2756
02:06:22,500 --> 02:06:23,699
um so

2757
02:06:23,699 --> 02:06:26,340
ultimately I need a file with Mac

2758
02:06:26,340 --> 02:06:28,500
address V4 address V6 stress and the

2759
02:06:28,500 --> 02:06:30,000
ability to remove the V4 addresses

2760
02:06:30,000 --> 02:06:31,679
that's what I want going forward next

2761
02:06:31,679 --> 02:06:33,360
slide please

2762
02:06:33,360 --> 02:06:35,699
um as mentioned I've already removed

2763
02:06:35,699 --> 02:06:37,199
layer 2 from all of my new network

2764
02:06:37,199 --> 02:06:39,179
everything's point to point which means

2765
02:06:39,179 --> 02:06:41,040
my switches are running a DHCP full

2766
02:06:41,040 --> 02:06:42,360
server already

2767
02:06:42,360 --> 02:06:44,460
it's a very small very simple the HTTP

2768
02:06:44,460 --> 02:06:46,320
full server because all it says is that

2769
02:06:46,320 --> 02:06:48,119
Mac address gets this V4 address and

2770
02:06:48,119 --> 02:06:49,800
this Netbook details and that's the only

2771
02:06:49,800 --> 02:06:51,599
answer it ever gives because it doesn't

2772
02:06:51,599 --> 02:06:52,860
have to manage leases because

2773
02:06:52,860 --> 02:06:55,679
everything's completely static

2774
02:06:55,679 --> 02:06:58,080
um do I need to do this for V6 do I need

2775
02:06:58,080 --> 02:07:00,119
to write the HTTP 6 server that just

2776
02:07:00,119 --> 02:07:03,060
says hello Mr dhbs6 here's your V6

2777
02:07:03,060 --> 02:07:05,099
address here's how you net Boot and just

2778
02:07:05,099 --> 02:07:06,780
Carries On

2779
02:07:06,780 --> 02:07:08,159
um so that's the thing I would really

2780
02:07:08,159 --> 02:07:09,599
like if someone would build me one of

2781
02:07:09,599 --> 02:07:11,400
those next one

2782
02:07:11,400 --> 02:07:13,679
and that's it a brief summary to what

2783
02:07:13,679 --> 02:07:15,900
it's like trying to operate in a V6 only

2784
02:07:15,900 --> 02:07:17,159
world when you have to deal with like

2785
02:07:17,159 --> 02:07:18,780
customers and people with arbitrary

2786
02:07:18,780 --> 02:07:20,159
demands

2787
02:07:20,159 --> 02:07:22,260
um so yeah we have a Blog

2788
02:07:22,260 --> 02:07:24,060
um we have a brand new Mastodon address

2789
02:07:24,060 --> 02:07:26,159
and we even have a Twitter address which

2790
02:07:26,159 --> 02:07:28,320
should work for at least a week

2791
02:07:28,320 --> 02:07:29,820
um other than that you can drop me an

2792
02:07:29,820 --> 02:07:30,840
email

2793
02:07:30,840 --> 02:07:34,340
um so any questions

2794
02:07:37,219 --> 02:07:40,980
hi David uh thanks for the talk

2795
02:07:40,980 --> 02:07:43,320
um you said you went fully L3 so down to

2796
02:07:43,320 --> 02:07:45,119
the host I imagine are you running a bgp

2797
02:07:45,119 --> 02:07:46,800
service or like a route reflector on

2798
02:07:46,800 --> 02:07:50,219
each of your hosts every switch is

2799
02:07:50,219 --> 02:07:52,679
running bgp so to the switch not to the

2800
02:07:52,679 --> 02:07:54,420
host so we aren't running beat not

2801
02:07:54,420 --> 02:07:56,219
unless the customer has their nasn which

2802
02:07:56,219 --> 02:07:57,480
some of them do

2803
02:07:57,480 --> 02:07:59,340
um so our hosts

2804
02:07:59,340 --> 02:08:01,500
um just speak as normal and when the

2805
02:08:01,500 --> 02:08:04,020
interface comes up we see link Discovery

2806
02:08:04,020 --> 02:08:04,860
happen

2807
02:08:04,860 --> 02:08:07,199
and um at that point it's going to have

2808
02:08:07,199 --> 02:08:08,400
a link local address then we know what

2809
02:08:08,400 --> 02:08:11,280
that is so at that point a process on

2810
02:08:11,280 --> 02:08:14,219
the switch injects the bgp route into

2811
02:08:14,219 --> 02:08:16,199
the local bgp server which then floods

2812
02:08:16,199 --> 02:08:18,300
out to the network and routing happens

2813
02:08:18,300 --> 02:08:21,199
okay thank you

2814
02:08:26,699 --> 02:08:28,440
oh it's a clearly a very interesting

2815
02:08:28,440 --> 02:08:31,500
talk thank you a couple of things uh the

2816
02:08:31,500 --> 02:08:33,360
the pixie boot thing um could you do

2817
02:08:33,360 --> 02:08:34,739
slack with

2818
02:08:34,739 --> 02:08:37,020
um eui 64 addresses or do you really

2819
02:08:37,020 --> 02:08:40,139
need DCP because I mean we like the nice

2820
02:08:40,139 --> 02:08:43,080
thing about like eui 64 address is that

2821
02:08:43,080 --> 02:08:44,580
it's predictable and it's very similar

2822
02:08:44,580 --> 02:08:46,980
to the MAC address so I don't know

2823
02:08:46,980 --> 02:08:48,480
um depends on implementation I guess

2824
02:08:48,480 --> 02:08:50,520
yeah then I've got to run a slack

2825
02:08:50,520 --> 02:08:53,159
service on my switches rather than DHCP

2826
02:08:53,159 --> 02:08:54,780
can you do full pixie boot with just

2827
02:08:54,780 --> 02:08:57,840
Slack I don't know no I need the HTTP

2828
02:08:57,840 --> 02:08:59,520
there at some point to give out DNS

2829
02:08:59,520 --> 02:09:01,139
service and the boot image right yeah

2830
02:09:01,139 --> 02:09:01,820
yeah

2831
02:09:01,820 --> 02:09:05,520
so basically I'm I'm also

2832
02:09:05,520 --> 02:09:07,500
um there's a

2833
02:09:07,500 --> 02:09:09,599
parody thing right I already have a

2834
02:09:09,599 --> 02:09:10,739
whole load of people who understand how

2835
02:09:10,739 --> 02:09:14,340
pixie bb4 works and this is not an

2836
02:09:14,340 --> 02:09:16,080
interesting problem to solve I just want

2837
02:09:16,080 --> 02:09:18,960
the thing to switch on yep

2838
02:09:18,960 --> 02:09:20,520
um a couple of other questions I try to

2839
02:09:20,520 --> 02:09:22,260
do the Raspberry Pi thing myself I got

2840
02:09:22,260 --> 02:09:25,320
paid for I wanted it to sit on the side

2841
02:09:25,320 --> 02:09:27,540
of my network and send an RA with the 96

2842
02:09:27,540 --> 02:09:29,639
of the of the natx4 prefix because I

2843
02:09:29,639 --> 02:09:31,080
don't control my home Gateway so I

2844
02:09:31,080 --> 02:09:32,460
wanted to plug in my Raspberry Pi

2845
02:09:32,460 --> 02:09:36,060
advertise the 96 prefix send a separate

2846
02:09:36,060 --> 02:09:40,320
array with the pref64 option so that you

2847
02:09:40,320 --> 02:09:41,820
know basically clients would just see it

2848
02:09:41,820 --> 02:09:43,199
and they were just getting that six four

2849
02:09:43,199 --> 02:09:45,480
on my existing Wi-Fi network which has

2850
02:09:45,480 --> 02:09:48,300
V6 it has native V6

2851
02:09:48,300 --> 02:09:50,520
um I failed because the the Raspberry Pi

2852
02:09:50,520 --> 02:09:51,900
dependency of the Dual package didn't

2853
02:09:51,900 --> 02:09:53,219
work but um

2854
02:09:53,219 --> 02:09:55,860
okay I guess I'll try again right yeah I

2855
02:09:55,860 --> 02:09:57,360
mean I'm I mean it doesn't have to be

2856
02:09:57,360 --> 02:09:58,619
that but basically yeah the simplest

2857
02:09:58,619 --> 02:10:01,619
possible way to get a 964 Network at

2858
02:10:01,619 --> 02:10:03,300
home for an Enthusiast would be a really

2859
02:10:03,300 --> 02:10:06,420
useful training thing to do and the high

2860
02:10:06,420 --> 02:10:07,739
Advantage is there's loads of them

2861
02:10:07,739 --> 02:10:09,900
kicking around in boxes so people can do

2862
02:10:09,900 --> 02:10:12,420
it for no setup fee yeah because there's

2863
02:10:12,420 --> 02:10:14,159
some I I think I even put it on GitHub

2864
02:10:14,159 --> 02:10:16,020
there's some code that will send an RA

2865
02:10:16,020 --> 02:10:18,360
with a with an s64 option it doesn't

2866
02:10:18,360 --> 02:10:19,739
have to be the same ra that the

2867
02:10:19,739 --> 02:10:21,060
production Network sends you can just

2868
02:10:21,060 --> 02:10:22,380
like have it on the side and you can

2869
02:10:22,380 --> 02:10:24,960
send an Rio for it right so anyway we

2870
02:10:24,960 --> 02:10:26,900
can chat about that offline yeah sure

2871
02:10:26,900 --> 02:10:29,280
and the another question was interesting

2872
02:10:29,280 --> 02:10:30,780
is like you you sounds like you ended up

2873
02:10:30,780 --> 02:10:33,179
doing 64s to the VM is that right or

2874
02:10:33,179 --> 02:10:33,980
yeah

2875
02:10:33,980 --> 02:10:36,540
are you worried about eventually running

2876
02:10:36,540 --> 02:10:40,500
out of V6 space or you know because you

2877
02:10:40,500 --> 02:10:42,780
can customers can create a lot of VMS

2878
02:10:42,780 --> 02:10:44,460
um I'm not especially worried about

2879
02:10:44,460 --> 02:10:46,619
running out of V6 space

2880
02:10:46,619 --> 02:10:48,300
um so

2881
02:10:48,300 --> 02:10:51,000
um partly because uh a company I

2882
02:10:51,000 --> 02:10:53,520
acquired ran into the V4

2883
02:10:53,520 --> 02:10:55,320
exhaustion very early because they sold

2884
02:10:55,320 --> 02:10:58,260
very cheap VMS and they future-proofed

2885
02:10:58,260 --> 02:11:00,540
themselves not by actually making V6

2886
02:11:00,540 --> 02:11:02,340
work which would have been sensible but

2887
02:11:02,340 --> 02:11:04,320
by acquiring as much V6 space as they

2888
02:11:04,320 --> 02:11:05,820
could

2889
02:11:05,820 --> 02:11:09,060
um so um I think I'm sat on like a slash

2890
02:11:09,060 --> 02:11:12,360
27 of V6 space which for a small company

2891
02:11:12,360 --> 02:11:14,760
with 15 employees is probably probably

2892
02:11:14,760 --> 02:11:16,679
enough for a bit

2893
02:11:16,679 --> 02:11:18,420
um so

2894
02:11:18,420 --> 02:11:21,060
um yeah I mean

2895
02:11:21,060 --> 02:11:23,580
I mean ultimately I've got what

2896
02:11:23,580 --> 02:11:26,480
I 10 billion

2897
02:11:26,480 --> 02:11:30,599
servers worth of V6 space

2898
02:11:30,599 --> 02:11:35,360
um and uh so it's not it's not exactly

2899
02:11:35,360 --> 02:11:39,960
64 per VM it's a slash 64. but it can be

2900
02:11:39,960 --> 02:11:42,719
but customers can use multiple 64

2901
02:11:42,719 --> 02:11:44,760
multiple addresses in the same 64 across

2902
02:11:44,760 --> 02:11:46,679
multiple VMS

2903
02:11:46,679 --> 02:11:48,420
um so it's not quite as wasteful as a

2904
02:11:48,420 --> 02:11:50,099
full 64 every time a VM gets turned on

2905
02:11:50,099 --> 02:11:52,080
but if a new customer turns up

2906
02:11:52,080 --> 02:11:53,639
um their VM gets spun up and they get

2907
02:11:53,639 --> 02:11:57,000
handed a slash 64. and they can have 48s

2908
02:11:57,000 --> 02:12:00,060
on on request 64 per customer you'll

2909
02:12:00,060 --> 02:12:01,980
never run out of that I think I think

2910
02:12:01,980 --> 02:12:06,678
but anyway interesting thank you yeah

2911
02:12:08,000 --> 02:12:12,659
hi you mentioned silati yeah um and you

2912
02:12:12,659 --> 02:12:14,219
mentioned it needs to be packaged and I

2913
02:12:14,219 --> 02:12:15,840
can probably get that into Debian as I'm

2914
02:12:15,840 --> 02:12:18,119
a Debian developer can I buy you a drink

2915
02:12:18,119 --> 02:12:19,380
thank you

2916
02:12:19,380 --> 02:12:22,800
okay that's it thank you yeah

2917
02:12:22,800 --> 02:12:25,320
um to possibly accelerate that

2918
02:12:25,320 --> 02:12:26,340
um

2919
02:12:26,340 --> 02:12:27,960
uh

2920
02:12:27,960 --> 02:12:29,340
uh no yeah if you can just turn it into

2921
02:12:29,340 --> 02:12:30,900
a Debian package that would be ace even

2922
02:12:30,900 --> 02:12:32,280
if I can just steal it and stick it in

2923
02:12:32,280 --> 02:12:33,900
the Mythic packet package repository

2924
02:12:33,900 --> 02:12:35,219
that we use for customers before it

2925
02:12:35,219 --> 02:12:37,800
turns up in proper Debian uh did you

2926
02:12:37,800 --> 02:12:40,139
open a bug on the Debian backtracker for

2927
02:12:40,139 --> 02:12:42,480
asking for it to be packaged uh I

2928
02:12:42,480 --> 02:12:43,800
haven't no I only really thought about

2929
02:12:43,800 --> 02:12:45,900
this on Monday when I properly

2930
02:12:45,900 --> 02:12:47,580
probably put it in to make a master

2931
02:12:47,580 --> 02:12:49,079
don't go but yeah turn it into a Debian

2932
02:12:49,079 --> 02:12:50,520
package that would be amazing thank you

2933
02:12:50,520 --> 02:12:54,139
please please please yeah

2934
02:12:56,880 --> 02:12:59,460
if no more question then we thank Pete

2935
02:12:59,460 --> 02:13:01,980
for the excellent presentation okay

2936
02:13:01,980 --> 02:13:05,000
thank you folks

2937
02:13:19,320 --> 02:13:21,920
sorry

2938
02:13:22,920 --> 02:13:25,800
Anna pleased to meet you okay

2939
02:13:25,800 --> 02:13:29,360
see you around hopefully in Japan

