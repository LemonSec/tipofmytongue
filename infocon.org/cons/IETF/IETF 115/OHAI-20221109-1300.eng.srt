1
00:00:04,860 --> 00:00:07,860
foreign

2
00:00:16,199 --> 00:00:19,199
welcome all to ohai

3
00:00:19,199 --> 00:00:20,340
um

4
00:00:20,340 --> 00:00:22,320
we are your chairs Siobhan and Richard

5
00:00:22,320 --> 00:00:24,180
which is joining remotely

6
00:00:24,180 --> 00:00:26,220
and uh

7
00:00:26,220 --> 00:00:30,380
we have uh note takers I think Martin

8
00:00:30,380 --> 00:00:32,940
and Sean

9
00:00:32,940 --> 00:00:35,880
are going to help thank you so much

10
00:00:35,880 --> 00:00:38,100
I'll put a link into the origin if you

11
00:00:38,100 --> 00:00:40,739
can put a link into the chat for the for

12
00:00:40,739 --> 00:00:43,379
the notes we'll do

13
00:00:43,379 --> 00:00:44,850
yeah already

14
00:00:44,850 --> 00:00:45,420
[Music]

15
00:00:45,420 --> 00:00:46,379
um

16
00:00:46,379 --> 00:00:47,940
this is the note Bell you've probably

17
00:00:47,940 --> 00:00:49,800
seen it by now but please do note it

18
00:00:49,800 --> 00:00:52,980
well uh it concerns um the patent policy

19
00:00:52,980 --> 00:00:54,239
and

20
00:00:54,239 --> 00:00:56,280
um and as a reminder like there is the

21
00:00:56,280 --> 00:00:58,739
ombuds team that you should feel free to

22
00:00:58,739 --> 00:01:01,160
reach out to

23
00:01:01,440 --> 00:01:05,040
and also just specifically for

24
00:01:05,040 --> 00:01:08,220
um this meeting there is the on-site

25
00:01:08,220 --> 00:01:10,680
tool that you should be using that helps

26
00:01:10,680 --> 00:01:13,740
um get numbers for it kind of serves as

27
00:01:13,740 --> 00:01:14,900
a blue sheet

28
00:01:14,900 --> 00:01:17,520
and it's also really helpful if you can

29
00:01:17,520 --> 00:01:19,439
use that to join them IQ so that we can

30
00:01:19,439 --> 00:01:21,600
be Equitable towards people joining

31
00:01:21,600 --> 00:01:24,000
remotely as well uh helps with Cube

32
00:01:24,000 --> 00:01:26,100
management essentially and also if

33
00:01:26,100 --> 00:01:28,259
you're remote then make sure that your

34
00:01:28,259 --> 00:01:29,939
audio and video are off unless you're

35
00:01:29,939 --> 00:01:31,380
presenting

36
00:01:31,380 --> 00:01:32,040
um

37
00:01:32,040 --> 00:01:33,780
and

38
00:01:33,780 --> 00:01:36,900
headset is always recommended and as a

39
00:01:36,900 --> 00:01:38,220
reminder that if you're not speaking

40
00:01:38,220 --> 00:01:41,579
then you you must wear a mask

41
00:01:41,579 --> 00:01:42,360
um

42
00:01:42,360 --> 00:01:44,280
and

43
00:01:44,280 --> 00:01:46,619
yeah

44
00:01:46,619 --> 00:01:50,520
I think that's everything so just to

45
00:01:50,520 --> 00:01:52,860
make sure everyone knows the main

46
00:01:52,860 --> 00:01:55,320
protocol draft for obliviously HTTP was

47
00:01:55,320 --> 00:01:58,380
submitted and it's in the ad review

48
00:01:58,380 --> 00:02:01,439
stage so that should be

49
00:02:01,439 --> 00:02:04,500
hopefully getting published soon and

50
00:02:04,500 --> 00:02:08,280
then we also adopted one new draft since

51
00:02:08,280 --> 00:02:10,919
last meeting uh and Tommy's going to be

52
00:02:10,919 --> 00:02:12,660
talking about that

53
00:02:12,660 --> 00:02:16,560
and unless there's anything

54
00:02:16,560 --> 00:02:18,720
to be said about the agenda

55
00:02:18,720 --> 00:02:21,180
um going once going twice

56
00:02:21,180 --> 00:02:25,459
I'll ask Tommy to present

57
00:02:34,819 --> 00:02:37,940
all right

58
00:02:41,940 --> 00:02:44,940
okay hello everyone

59
00:02:44,940 --> 00:02:46,440
so

60
00:02:46,440 --> 00:02:50,160
I'll be presenting our Discovery uh

61
00:02:50,160 --> 00:02:53,160
draft and this is about uh bootstrapping

62
00:02:53,160 --> 00:02:56,340
the use of an oblivious HTTP Gateway

63
00:02:56,340 --> 00:03:00,019
uh using records that we find in DNS

64
00:03:00,019 --> 00:03:03,840
this was discussed at the last ITF but

65
00:03:03,840 --> 00:03:05,580
as it's newly adopted I'm going to give

66
00:03:05,580 --> 00:03:08,819
a brief recap of the use case and how

67
00:03:08,819 --> 00:03:10,560
the protocol looks

68
00:03:10,560 --> 00:03:15,560
uh before we go into the open issues

69
00:03:16,440 --> 00:03:19,080
okay so this if you saw the presentation

70
00:03:19,080 --> 00:03:21,060
last time this should just be

71
00:03:21,060 --> 00:03:24,360
a reminder but if you didn't uh the

72
00:03:24,360 --> 00:03:25,980
Discovery Model

73
00:03:25,980 --> 00:03:29,220
assumes that we have a client

74
00:03:29,220 --> 00:03:32,280
that knows about a Target service that

75
00:03:32,280 --> 00:03:33,379
it wants to

76
00:03:33,379 --> 00:03:36,780
communicate with some HTTP service out

77
00:03:36,780 --> 00:03:40,500
there and the client also knows about

78
00:03:40,500 --> 00:03:45,780
one or more oblivious relays that it uh

79
00:03:45,780 --> 00:03:47,640
is willing to work with or it has

80
00:03:47,640 --> 00:03:49,560
credentials for or

81
00:03:49,560 --> 00:03:52,580
what have you

82
00:03:53,159 --> 00:03:56,459
and the target service

83
00:03:56,459 --> 00:03:59,940
Also may have an oblivious Gateway that

84
00:03:59,940 --> 00:04:01,739
it works with which

85
00:04:01,739 --> 00:04:04,260
can be co-located with the target

86
00:04:04,260 --> 00:04:06,239
service

87
00:04:06,239 --> 00:04:07,200
um

88
00:04:07,200 --> 00:04:10,200
but essentially you can think of this as

89
00:04:10,200 --> 00:04:12,180
the target service is willing to be

90
00:04:12,180 --> 00:04:15,659
accessed over oblivious http

91
00:04:15,659 --> 00:04:17,220
so that clients that would prefer

92
00:04:17,220 --> 00:04:19,440
oblivious access to direct access can

93
00:04:19,440 --> 00:04:21,798
use it

94
00:04:23,639 --> 00:04:25,440
and so the goal of the Discovery Model

95
00:04:25,440 --> 00:04:29,759
is to let the client use some relay that

96
00:04:29,759 --> 00:04:32,220
it knows about it or it selects to reach

97
00:04:32,220 --> 00:04:35,160
the target through the Gateway that the

98
00:04:35,160 --> 00:04:37,860
target indicates

99
00:04:37,860 --> 00:04:40,259
um so this is the main model you can

100
00:04:40,259 --> 00:04:43,259
have a variance of this where the client

101
00:04:43,259 --> 00:04:46,620
is strict and will only communicate with

102
00:04:46,620 --> 00:04:48,419
this target service

103
00:04:48,419 --> 00:04:51,120
if it has an oblivious Gateway because

104
00:04:51,120 --> 00:04:54,300
it's not willing to communicate directly

105
00:04:54,300 --> 00:04:57,919
but either way works

106
00:04:59,759 --> 00:05:03,720
so in order to do this we need a couple

107
00:05:03,720 --> 00:05:06,240
different protocol mechanisms

108
00:05:06,240 --> 00:05:08,520
and there are three of these that are

109
00:05:08,520 --> 00:05:09,600
defined

110
00:05:09,600 --> 00:05:12,380
in the draft

111
00:05:12,419 --> 00:05:16,860
first is a DNS service binding parameter

112
00:05:16,860 --> 00:05:20,419
and this can go within the svcb or https

113
00:05:20,419 --> 00:05:23,220
DNS records

114
00:05:23,220 --> 00:05:25,199
which is effectively just a Boolean

115
00:05:25,199 --> 00:05:29,280
parameter that says this service has a

116
00:05:29,280 --> 00:05:31,620
oblivious Gateway

117
00:05:31,620 --> 00:05:33,180
foreign

118
00:05:33,180 --> 00:05:35,820
the second mechanism is we have a

119
00:05:35,820 --> 00:05:38,120
well-known URI

120
00:05:38,120 --> 00:05:42,060
that is the URI for an oblivious Gateway

121
00:05:42,060 --> 00:05:44,699
that is discovered in this manner

122
00:05:44,699 --> 00:05:47,100
and the third mechanism is a way to

123
00:05:47,100 --> 00:05:49,860
actually look up the oblivious key

124
00:05:49,860 --> 00:05:51,479
configuration

125
00:05:51,479 --> 00:05:54,660
on a Gateway URI which in the case of

126
00:05:54,660 --> 00:05:58,199
Discovery here will be that well known

127
00:05:58,199 --> 00:06:01,759
the reason the protocol has this shape

128
00:06:01,759 --> 00:06:03,720
is that

129
00:06:03,720 --> 00:06:06,419
we need to make sure that the discovered

130
00:06:06,419 --> 00:06:09,180
Gateway and its config are actually

131
00:06:09,180 --> 00:06:12,720
strictly bound to the Target because

132
00:06:12,720 --> 00:06:14,759
access

133
00:06:14,759 --> 00:06:16,560
to this target

134
00:06:16,560 --> 00:06:20,340
through the Gateway is replacing any

135
00:06:20,340 --> 00:06:23,639
other certificate evaluation other trust

136
00:06:23,639 --> 00:06:26,160
you have in that Target and so you need

137
00:06:26,160 --> 00:06:27,840
to prove that the Gateway has authority

138
00:06:27,840 --> 00:06:30,539
over the target resource and this

139
00:06:30,539 --> 00:06:32,460
effectively means that you have to

140
00:06:32,460 --> 00:06:34,620
co-locate them

141
00:06:34,620 --> 00:06:37,139
um at least in terms of something that

142
00:06:37,139 --> 00:06:40,380
is able to uh do TLS termination for the

143
00:06:40,380 --> 00:06:41,280
Target

144
00:06:41,280 --> 00:06:45,360
and um past the normal client uh trust

145
00:06:45,360 --> 00:06:47,639
evaluation

146
00:06:47,639 --> 00:06:50,520
so as concrete examples

147
00:06:50,520 --> 00:06:52,020
based on how the document currently

148
00:06:52,020 --> 00:06:54,720
spells things we have an example of a

149
00:06:54,720 --> 00:06:57,960
DNS response which

150
00:06:57,960 --> 00:07:01,020
would have its normal

151
00:07:01,020 --> 00:07:04,020
um svcb parameters it can have some alpn

152
00:07:04,020 --> 00:07:06,900
but it adds a new parameter which is

153
00:07:06,900 --> 00:07:10,340
oblivious here

154
00:07:11,039 --> 00:07:13,380
the

155
00:07:13,380 --> 00:07:16,800
um actual well-known location is dot

156
00:07:16,800 --> 00:07:20,580
well known slash oblivious Gateway

157
00:07:20,580 --> 00:07:22,259
and the way to get the key configuration

158
00:07:22,259 --> 00:07:25,080
is to instead of doing a post you do a

159
00:07:25,080 --> 00:07:26,599
get and you say that you accept

160
00:07:26,599 --> 00:07:30,180
application ohtp keys and then you get

161
00:07:30,180 --> 00:07:32,400
the key config

162
00:07:32,400 --> 00:07:34,620
so it's quite simple

163
00:07:34,620 --> 00:07:36,419
um

164
00:07:36,419 --> 00:07:39,660
if you have questions

165
00:07:39,660 --> 00:07:41,639
I guess we could take him now or at the

166
00:07:41,639 --> 00:07:45,120
end but this is just a recap and we have

167
00:07:45,120 --> 00:07:46,740
a couple different open issues that I

168
00:07:46,740 --> 00:07:49,280
wanted to highlight

169
00:07:49,979 --> 00:07:52,380
uh so first I think this was from Ben

170
00:07:52,380 --> 00:07:55,380
was about the parameter name currently

171
00:07:55,380 --> 00:07:58,080
it's named as oblivious he was pointing

172
00:07:58,080 --> 00:08:00,060
out that this that is potentially too

173
00:08:00,060 --> 00:08:01,500
broad you could have other things that

174
00:08:01,500 --> 00:08:03,479
are oblivious in the future particularly

175
00:08:03,479 --> 00:08:06,680
if you're using this not on the https

176
00:08:06,680 --> 00:08:09,000
resource record

177
00:08:09,000 --> 00:08:10,860
so the suggestion was to change it to

178
00:08:10,860 --> 00:08:13,080
ohttp

179
00:08:13,080 --> 00:08:17,160
that seems fine to me does anyone

180
00:08:17,160 --> 00:08:19,560
have thoughts or objections or should we

181
00:08:19,560 --> 00:08:22,400
just do it maybe

182
00:08:23,580 --> 00:08:27,479
hi uh so after considering the the sort

183
00:08:27,479 --> 00:08:29,940
of one of the other open issues here I

184
00:08:29,940 --> 00:08:32,520
think that um I think let's park this

185
00:08:32,520 --> 00:08:35,219
until we've solved some other things uh

186
00:08:35,219 --> 00:08:39,599
in particular if we I that oblivious

187
00:08:39,599 --> 00:08:43,820
changes the behavior of the DNS client

188
00:08:43,820 --> 00:08:46,560
for example telling the DNS client to

189
00:08:46,560 --> 00:08:50,760
not use DNS cookies then uh maybe we or

190
00:08:50,760 --> 00:08:53,120
for example if it tells the DNS client

191
00:08:53,120 --> 00:08:56,160
don't use other transports if they don't

192
00:08:56,160 --> 00:08:58,140
support obliviousness then maybe it

193
00:08:58,140 --> 00:09:00,420
actually is a cross-transport flag maybe

194
00:09:00,420 --> 00:09:03,480
it is not HTTP specific so

195
00:09:03,480 --> 00:09:08,420
uh I guess it's not clear to me yet

196
00:09:09,120 --> 00:09:10,500
okay

197
00:09:10,500 --> 00:09:12,000
all right so let's come back to this one

198
00:09:12,000 --> 00:09:14,100
then and let's have the other discussion

199
00:09:14,100 --> 00:09:17,399
the comments in the chat seem to be fine

200
00:09:17,399 --> 00:09:21,740
with ohtp in principle so

201
00:09:21,959 --> 00:09:25,080
Ben let's come back to this

202
00:09:25,080 --> 00:09:28,140
so the next one uh

203
00:09:28,140 --> 00:09:31,440
was a source of confusion and

204
00:09:31,440 --> 00:09:34,680
was a problem of a lack of clarity and a

205
00:09:34,680 --> 00:09:36,660
bit of confusion in the document that

206
00:09:36,660 --> 00:09:38,100
needs to be cleared up

207
00:09:38,100 --> 00:09:40,440
the issue number 29 was originally

208
00:09:40,440 --> 00:09:43,440
raised about the media type being used

209
00:09:43,440 --> 00:09:46,760
for DNS cases so

210
00:09:46,760 --> 00:09:50,180
The General

211
00:09:50,220 --> 00:09:52,320
uh the generic use case let's say you

212
00:09:52,320 --> 00:09:54,240
have an https record and I'm just going

213
00:09:54,240 --> 00:09:57,420
to some random HTTP resource

214
00:09:57,420 --> 00:09:59,160
in that case

215
00:09:59,160 --> 00:10:03,200
I think it's quite clear that you have

216
00:10:03,200 --> 00:10:07,080
just normal media types being used for

217
00:10:07,080 --> 00:10:10,380
ohdp with OHP request and response and

218
00:10:10,380 --> 00:10:14,399
you have bhttp binary http

219
00:10:14,399 --> 00:10:16,560
one of the use cases that we have that's

220
00:10:16,560 --> 00:10:18,720
a variant of this is

221
00:10:18,720 --> 00:10:21,540
using this discovery to have oblivious

222
00:10:21,540 --> 00:10:23,580
DNS

223
00:10:23,580 --> 00:10:26,339
resolvers that are accessed over http

224
00:10:26,339 --> 00:10:28,260
and so this is the case where we have a

225
00:10:28,260 --> 00:10:30,480
DNS scheme svcb record and it's not

226
00:10:30,480 --> 00:10:32,160
https

227
00:10:32,160 --> 00:10:35,399
the current text has issues

228
00:10:35,399 --> 00:10:38,399
um I think based on the discussion on

229
00:10:38,399 --> 00:10:40,200
the issue the correct

230
00:10:40,200 --> 00:10:43,500
outcome is that you know really the

231
00:10:43,500 --> 00:10:44,820
media type from the perspective of the

232
00:10:44,820 --> 00:10:46,200
Gateway and the target are all the same

233
00:10:46,200 --> 00:10:49,140
as they would be for http

234
00:10:49,140 --> 00:10:51,060
um this is the Gateway does not see

235
00:10:51,060 --> 00:10:54,000
anything different it just sees oh HTTP

236
00:10:54,000 --> 00:10:58,019
Rec and response it has binary HTTP

237
00:10:58,019 --> 00:11:00,899
inside that gets turned into an HTTP

238
00:11:00,899 --> 00:11:02,760
request to the Target

239
00:11:02,760 --> 00:11:05,040
the target itself

240
00:11:05,040 --> 00:11:07,380
is a dough resolver and it just sees a

241
00:11:07,380 --> 00:11:11,160
normal do request over http

242
00:11:11,160 --> 00:11:13,079
um

243
00:11:13,079 --> 00:11:16,920
that is distinct from a theoretical case

244
00:11:16,920 --> 00:11:20,880
that you could have which would be

245
00:11:20,880 --> 00:11:25,440
uh ohttp wrapping just the raw DNS

246
00:11:25,440 --> 00:11:26,820
message because technically you don't

247
00:11:26,820 --> 00:11:30,240
really need uh the other bits of the

248
00:11:30,240 --> 00:11:33,180
HTTP response every request and response

249
00:11:33,180 --> 00:11:36,720
that are in bhdp it's just a wrapper but

250
00:11:36,720 --> 00:11:40,079
uh that does add media type complexity

251
00:11:40,079 --> 00:11:42,180
and is no longer just a generic Gateway

252
00:11:42,180 --> 00:11:45,380
and I think we should avoid doing that

253
00:11:45,380 --> 00:11:48,420
based on that

254
00:11:48,420 --> 00:11:52,200
um any questions

255
00:11:52,200 --> 00:11:55,980
oh and the nice thing is uh you know we

256
00:11:55,980 --> 00:11:59,640
had Odo before but now technically this

257
00:11:59,640 --> 00:12:00,779
is

258
00:12:00,779 --> 00:12:04,019
uh DNS over oblivious HDPE so we can

259
00:12:04,019 --> 00:12:08,160
call it a Duo d-o-o-h

260
00:12:08,160 --> 00:12:11,779
anyway I'll stop now

261
00:12:11,880 --> 00:12:14,360
Ben

262
00:12:16,500 --> 00:12:18,540
so just as a document matter I want to

263
00:12:18,540 --> 00:12:22,140
stress that this is creating a Divergent

264
00:12:22,140 --> 00:12:25,860
so I I agree with Tommy's choice I fully

265
00:12:25,860 --> 00:12:29,339
support it uh I wonder if we should

266
00:12:29,339 --> 00:12:33,240
claw back the the ohttp draft

267
00:12:33,240 --> 00:12:35,579
and make some changes because right now

268
00:12:35,579 --> 00:12:40,079
section 4.6 of the ohttp draft lays out

269
00:12:40,079 --> 00:12:43,019
a sort of speculative design and a

270
00:12:43,019 --> 00:12:44,579
couple of paragraphs of like here's how

271
00:12:44,579 --> 00:12:47,579
you could use ohttp for DNS but it's not

272
00:12:47,579 --> 00:12:50,339
this it's the other thing

273
00:12:50,339 --> 00:12:52,620
so we're now going to be in the

274
00:12:52,620 --> 00:12:55,139
situation where we have a spec for how

275
00:12:55,139 --> 00:12:58,440
you do dough with ohttp and we also have

276
00:12:58,440 --> 00:13:00,540
another document that outlines that spec

277
00:13:00,540 --> 00:13:03,540
incorrectly

278
00:13:03,600 --> 00:13:05,459
um or outlines essentially a competing

279
00:13:05,459 --> 00:13:08,339
design that we do not have a spec for so

280
00:13:08,339 --> 00:13:10,800
uh I think this one we could certainly

281
00:13:10,800 --> 00:13:11,940
remove

282
00:13:11,940 --> 00:13:13,980
I mean I can let Martin no other speak

283
00:13:13,980 --> 00:13:16,680
remove the example

284
00:13:16,680 --> 00:13:19,320
um I think you definitely you can have

285
00:13:19,320 --> 00:13:23,639
other things other than bhtp inside

286
00:13:23,639 --> 00:13:26,399
and I think though oh the main ohtp

287
00:13:26,399 --> 00:13:29,459
document is correct in its advice

288
00:13:29,459 --> 00:13:32,160
of what to do if you do that but I don't

289
00:13:32,160 --> 00:13:35,420
think we need to do it here

290
00:13:36,839 --> 00:13:39,680
Ralph

291
00:13:41,220 --> 00:13:44,459
I feel like so this means if I'm sort of

292
00:13:44,459 --> 00:13:47,100
riding a doe server I'll have to support

293
00:13:47,100 --> 00:13:50,519
kind of door over H2 the whole Rage 3

294
00:13:50,519 --> 00:13:52,800
and then uh

295
00:13:52,800 --> 00:13:54,320
dough over

296
00:13:54,320 --> 00:13:57,000
hdp and then there's the Adaptive DNS

297
00:13:57,000 --> 00:13:59,579
draft that is a different encoding right

298
00:13:59,579 --> 00:14:01,440
that is odor

299
00:14:01,440 --> 00:14:05,639
yeah so right oh Odo is its own thing I

300
00:14:05,639 --> 00:14:07,680
I think actually this this approach

301
00:14:07,680 --> 00:14:09,899
makes it simpler for implementation even

302
00:14:09,899 --> 00:14:11,760
though technically you have a little bit

303
00:14:11,760 --> 00:14:16,260
of extra packaging because you can run

304
00:14:16,260 --> 00:14:19,320
a completely unmodified

305
00:14:19,320 --> 00:14:21,660
H2 doe server

306
00:14:21,660 --> 00:14:23,880
as the target service

307
00:14:23,880 --> 00:14:26,399
and then you have in front of it

308
00:14:26,399 --> 00:14:29,700
an ohtp Gateway that receives the ohttp

309
00:14:29,700 --> 00:14:33,660
request encrypted decrypts it gets the

310
00:14:33,660 --> 00:14:37,079
binary HTTP and translates that into a

311
00:14:37,079 --> 00:14:38,639
request

312
00:14:38,639 --> 00:14:42,300
to the unmodified

313
00:14:42,300 --> 00:14:45,859
H2 doe server

314
00:14:46,019 --> 00:14:49,199
now these are co-located so you're doing

315
00:14:49,199 --> 00:14:52,199
decapsulation Etc in you know two things

316
00:14:52,199 --> 00:14:53,519
right next to each other

317
00:14:53,519 --> 00:14:55,680
but it allows you to have unmodified doe

318
00:14:55,680 --> 00:14:58,980
server code if you have the DNS message

319
00:14:58,980 --> 00:15:02,279
directly within the ohttp encapsulation

320
00:15:02,279 --> 00:15:04,680
then that effectively is meaning you

321
00:15:04,680 --> 00:15:06,779
have a doe server that has to directly

322
00:15:06,779 --> 00:15:07,800
speak

323
00:15:07,800 --> 00:15:10,800
the oblivious HTTP request

324
00:15:10,800 --> 00:15:13,800
so that is potentially more work

325
00:15:13,800 --> 00:15:16,699
foreign

326
00:15:21,180 --> 00:15:23,959
in it right

327
00:15:24,620 --> 00:15:28,079
right but once we eventually get to a

328
00:15:28,079 --> 00:15:31,560
world with only ohdp you just need to

329
00:15:31,560 --> 00:15:33,720
OHP Gateway that's generic and you have

330
00:15:33,720 --> 00:15:35,160
a dose over that's generic you can just

331
00:15:35,160 --> 00:15:37,199
slap them together and there's no custom

332
00:15:37,199 --> 00:15:41,899
code written for this all right thanks

333
00:15:43,320 --> 00:15:45,980
Martin

334
00:15:46,139 --> 00:15:48,959
thanks Sean for doing the note-taking

335
00:15:48,959 --> 00:15:51,660
um Martin Thompson I'm not really sure

336
00:15:51,660 --> 00:15:53,519
what sort of

337
00:15:53,519 --> 00:15:54,600
um

338
00:15:54,600 --> 00:15:57,600
thing we're talking about here

339
00:15:57,600 --> 00:15:58,680
um

340
00:15:58,680 --> 00:16:00,839
because you can do all of these things

341
00:16:00,839 --> 00:16:03,600
we probably should choose one though

342
00:16:03,600 --> 00:16:06,360
and I think for anyone doing

343
00:16:06,360 --> 00:16:09,779
uh oblivious dough then this makes a

344
00:16:09,779 --> 00:16:11,339
whole lot of sense I think this is the

345
00:16:11,339 --> 00:16:13,740
natural wrapping what's on the slide is

346
00:16:13,740 --> 00:16:15,180
what what is the natural wrapping for

347
00:16:15,180 --> 00:16:17,160
that sort of thing you have an oblivious

348
00:16:17,160 --> 00:16:19,440
HTTP Gateway that's just a an oblivious

349
00:16:19,440 --> 00:16:22,560
HTTP Gateway you have a doe Target and

350
00:16:22,560 --> 00:16:23,880
the two could be independently

351
00:16:23,880 --> 00:16:25,920
implemented and everything will be fine

352
00:16:25,920 --> 00:16:28,019
I think there's there is a separate

353
00:16:28,019 --> 00:16:30,779
design that says that you've got an

354
00:16:30,779 --> 00:16:34,139
oblivious dough I I believe it's DNS

355
00:16:34,139 --> 00:16:37,320
which looks very much different to this

356
00:16:37,320 --> 00:16:38,639
potentially has a different rapper

357
00:16:38,639 --> 00:16:39,839
potentially has a different thing on the

358
00:16:39,839 --> 00:16:41,339
inside but that we don't need to Define

359
00:16:41,339 --> 00:16:43,279
that here

360
00:16:43,279 --> 00:16:45,959
exactly that's what I'm saying as well

361
00:16:45,959 --> 00:16:46,920
um

362
00:16:46,920 --> 00:16:48,240
and

363
00:16:48,240 --> 00:16:51,480
really the only

364
00:16:51,480 --> 00:16:53,220
thing that's relevant for this document

365
00:16:53,220 --> 00:16:54,360
is

366
00:16:54,360 --> 00:16:57,839
saying when you receive the oblivious or

367
00:16:57,839 --> 00:16:58,680
whatever we're going to call it

368
00:16:58,680 --> 00:17:02,100
parameter over an svcb record for a

369
00:17:02,100 --> 00:17:03,660
resolver

370
00:17:03,660 --> 00:17:06,720
do you then assume it is this and we're

371
00:17:06,720 --> 00:17:10,280
just going to say yes it is this

372
00:17:11,119 --> 00:17:13,319
this time

373
00:17:13,319 --> 00:17:15,660
okay

374
00:17:15,660 --> 00:17:19,760
I guess Martin are you out of queue now

375
00:17:21,179 --> 00:17:23,280
okay

376
00:17:23,280 --> 00:17:24,059
um

377
00:17:24,059 --> 00:17:27,000
so that is that one

378
00:17:27,000 --> 00:17:29,040
I think it sounds like people are okay

379
00:17:29,040 --> 00:17:31,040
with

380
00:17:31,040 --> 00:17:32,940
re-clarifying the document to just mean

381
00:17:32,940 --> 00:17:36,419
this because it's a natural thing to do

382
00:17:36,419 --> 00:17:37,980
uh the one last issue I was going to

383
00:17:37,980 --> 00:17:40,080
bring up was specifically again around

384
00:17:40,080 --> 00:17:42,179
the

385
00:17:42,179 --> 00:17:44,280
DNS case

386
00:17:44,280 --> 00:17:49,140
if you're getting this from DDR which is

387
00:17:49,140 --> 00:17:51,539
the thing defined in the add working

388
00:17:51,539 --> 00:17:55,380
group where you have learned about your

389
00:17:55,380 --> 00:17:57,480
resolver from a

390
00:17:57,480 --> 00:18:02,039
special use domain name dns.resolve.arpa

391
00:18:02,820 --> 00:18:05,280
in that case in order to trust the

392
00:18:05,280 --> 00:18:07,500
resolver you need to validate the IP

393
00:18:07,500 --> 00:18:08,940
address

394
00:18:08,940 --> 00:18:12,059
in the Target certificate

395
00:18:12,059 --> 00:18:14,520
and the text currently in this document

396
00:18:14,520 --> 00:18:18,379
says you know if you were doing

397
00:18:18,660 --> 00:18:20,640
um the oblivious dance to get that

398
00:18:20,640 --> 00:18:22,080
Target

399
00:18:22,080 --> 00:18:25,380
then either before you're doing things

400
00:18:25,380 --> 00:18:28,140
obliviously you need to just directly

401
00:18:28,140 --> 00:18:30,360
connect to that Target and validate a

402
00:18:30,360 --> 00:18:32,940
certificate or you create some separate

403
00:18:32,940 --> 00:18:34,400
proxied connection through a connect

404
00:18:34,400 --> 00:18:37,200
proxy or whatever you can still validate

405
00:18:37,200 --> 00:18:39,240
the target certificate

406
00:18:39,240 --> 00:18:41,039
and if you have validated the target

407
00:18:41,039 --> 00:18:44,460
certificate then you can go ahead and do

408
00:18:44,460 --> 00:18:46,620
the oblivious requests

409
00:18:46,620 --> 00:18:48,840
I think this is

410
00:18:48,840 --> 00:18:51,780
the simplest way to make sure we solve

411
00:18:51,780 --> 00:18:53,460
the security there

412
00:18:53,460 --> 00:18:56,340
um but the issue was raised so does

413
00:18:56,340 --> 00:18:58,200
anyone want to do anything else

414
00:18:58,200 --> 00:19:00,620
Martin

415
00:19:01,020 --> 00:19:03,720
yeah mountains again I think this is

416
00:19:03,720 --> 00:19:05,400
probably something we can leave for the

417
00:19:05,400 --> 00:19:08,760
DDR uh draft in the sense that

418
00:19:08,760 --> 00:19:11,220
um you have a reference identity that

419
00:19:11,220 --> 00:19:13,380
you're using to authenticate the server

420
00:19:13,380 --> 00:19:15,360
that reference identity may be different

421
00:19:15,360 --> 00:19:17,039
to the thing you put in DNS to query it

422
00:19:17,039 --> 00:19:18,620
but you still have reference identity

423
00:19:18,620 --> 00:19:23,039
and all of those rules apply on the DDR

424
00:19:23,039 --> 00:19:24,539
side of things as much as they apply

425
00:19:24,539 --> 00:19:27,720
here maybe a note but I wouldn't put any

426
00:19:27,720 --> 00:19:30,900
normative language around it

427
00:19:30,900 --> 00:19:33,780
if that's at all possible yeah

428
00:19:33,780 --> 00:19:35,700
that sounds good

429
00:19:35,700 --> 00:19:38,700
I I would need to check

430
00:19:38,700 --> 00:19:42,000
the current document but I believe it

431
00:19:42,000 --> 00:19:46,160
doesn't have normative language

432
00:19:46,320 --> 00:19:48,299
okay so that

433
00:19:48,299 --> 00:19:51,600
those are the main issues we have

434
00:19:51,600 --> 00:19:55,919
um I guess going back to the naming

435
00:19:55,919 --> 00:19:58,020
now that we've talked about this

436
00:19:58,020 --> 00:20:01,700
Ben did you want to

437
00:20:03,059 --> 00:20:06,059
so

438
00:20:06,960 --> 00:20:11,700
the the question I I ran into was uh on

439
00:20:11,700 --> 00:20:15,179
the one hand uh so in the DNS record you

440
00:20:15,179 --> 00:20:18,059
run into this thing it says oblivious

441
00:20:18,059 --> 00:20:21,840
um does that only apply to if I'm trying

442
00:20:21,840 --> 00:20:25,380
to use do

443
00:20:25,380 --> 00:20:29,580
um or does that apply to any use of this

444
00:20:29,580 --> 00:20:32,280
DNS server so as an example I'm a

445
00:20:32,280 --> 00:20:34,500
suppose I'm a client that is fully

446
00:20:34,500 --> 00:20:36,960
prepared to speak oblivious doe and I

447
00:20:36,960 --> 00:20:40,140
get one of these service B records back

448
00:20:40,140 --> 00:20:43,140
um if I also support DNS over quick

449
00:20:43,140 --> 00:20:47,280
uh does the oblivious instruction also

450
00:20:47,280 --> 00:20:50,280
apply to DNS over quick in pursuit of

451
00:20:50,280 --> 00:20:52,380
some future specification for oblivious

452
00:20:52,380 --> 00:20:54,480
DNS over quick which doesn't exist right

453
00:20:54,480 --> 00:20:59,220
now or is it only for uh for use with

454
00:20:59,220 --> 00:21:01,679
oblivious HTTP so like maybe one answer

455
00:21:01,679 --> 00:21:04,020
so one answer is it only applies to

456
00:21:04,020 --> 00:21:07,440
oblivious HTTP your options are DNS over

457
00:21:07,440 --> 00:21:11,160
quick and there's DNS over HTTP or an

458
00:21:11,160 --> 00:21:13,260
oblivious DNS over http

459
00:21:13,260 --> 00:21:15,539
so forth another option is to say it

460
00:21:15,539 --> 00:21:17,520
actually applies to the whole record and

461
00:21:17,520 --> 00:21:20,220
so what we expect the client to do is

462
00:21:20,220 --> 00:21:22,980
speak obliviously

463
00:21:22,980 --> 00:21:28,919
um to any of these endpoints and uh and

464
00:21:28,919 --> 00:21:30,299
if it doesn't know how to do that then

465
00:21:30,299 --> 00:21:32,340
it shouldn't use transports if it

466
00:21:32,340 --> 00:21:33,960
basically if it supports oblivious

467
00:21:33,960 --> 00:21:35,520
communication over some of these

468
00:21:35,520 --> 00:21:37,440
transports but not others then it should

469
00:21:37,440 --> 00:21:39,780
probably only use the transports that it

470
00:21:39,780 --> 00:21:43,020
can speak to obliviously

471
00:21:43,020 --> 00:21:45,480
so maybe that's totally coherent can I

472
00:21:45,480 --> 00:21:48,919
answered that I oh

473
00:21:48,919 --> 00:21:51,659
so that that's not how DNS works you

474
00:21:51,659 --> 00:21:53,940
have resource records so that means in

475
00:21:53,940 --> 00:21:56,520
every research record you have a kind of

476
00:21:56,520 --> 00:21:58,320
oblivious or yes or no

477
00:21:58,320 --> 00:22:01,320
so if you have a quick uh record and

478
00:22:01,320 --> 00:22:02,940
this would be an additional resource

479
00:22:02,940 --> 00:22:05,120
record

480
00:22:05,419 --> 00:22:10,140
uh the the service B DNS binding uses a

481
00:22:10,140 --> 00:22:12,720
single resource record to represent uh

482
00:22:12,720 --> 00:22:15,659
HTTP TLS quick etc those are all wrapped

483
00:22:15,659 --> 00:22:19,500
in no no there are no recent record sets

484
00:22:19,500 --> 00:22:21,780
you have a couple of lines each having

485
00:22:21,780 --> 00:22:24,299
kind of a specification one for DOT one

486
00:22:24,299 --> 00:22:27,179
for doe one for whatever no a single

487
00:22:27,179 --> 00:22:29,820
well it's not that's optional but uh you

488
00:22:29,820 --> 00:22:32,400
can form a single service binding record

489
00:22:32,400 --> 00:22:38,039
which says alpn equals H2 H3 doqdot

490
00:22:46,700 --> 00:22:48,960
yeah I don't think you should just to

491
00:22:48,960 --> 00:22:50,940
respond to event I think

492
00:22:50,940 --> 00:22:53,280
your original issue

493
00:22:53,280 --> 00:22:55,080
and your suggestion was correct I think

494
00:22:55,080 --> 00:22:57,900
it based on this really needs to be ohdp

495
00:22:57,900 --> 00:23:00,179
because otherwise

496
00:23:00,179 --> 00:23:02,700
we do not know what that future thing is

497
00:23:02,700 --> 00:23:04,620
or what it would need in a parameter so

498
00:23:04,620 --> 00:23:06,780
the presence of this means you can

499
00:23:06,780 --> 00:23:10,140
access this over normal vanilla ohttp

500
00:23:10,140 --> 00:23:12,720
with a normal Gateway doing binary HTTP

501
00:23:12,720 --> 00:23:14,820
in it and that is all it means if you

502
00:23:14,820 --> 00:23:16,980
have some other protocol it gets a new

503
00:23:16,980 --> 00:23:20,960
marker and that is not done here

504
00:23:21,480 --> 00:23:23,460
which is Richard Burns is an individual

505
00:23:23,460 --> 00:23:25,440
and I was exactly what I was going to

506
00:23:25,440 --> 00:23:27,919
say here like

507
00:23:27,919 --> 00:23:31,140
to just like off fortiori like we don't

508
00:23:31,140 --> 00:23:33,539
you know you we don't want to bundle all

509
00:23:33,539 --> 00:23:34,679
these protocols together because you

510
00:23:34,679 --> 00:23:36,720
don't know who they are and because this

511
00:23:36,720 --> 00:23:38,460
is providing the contact point we don't

512
00:23:38,460 --> 00:23:40,020
want to force all of those things to be

513
00:23:40,020 --> 00:23:42,720
implemented on the same contact Point

514
00:23:42,720 --> 00:23:44,100
um so like yeah definitely let's keep

515
00:23:44,100 --> 00:23:46,820
these things separate

516
00:24:00,080 --> 00:24:04,039
how about this that should be better

517
00:24:04,140 --> 00:24:08,520
so uh I I agree with the prior speakers

518
00:24:08,520 --> 00:24:10,860
um in part because it was very confusing

519
00:24:10,860 --> 00:24:13,919
for me to hear you can do uh DNS

520
00:24:13,919 --> 00:24:15,840
obliviously

521
00:24:15,840 --> 00:24:17,520
um I don't even know that we know what

522
00:24:17,520 --> 00:24:19,679
you can do DNS obliviously means as a

523
00:24:19,679 --> 00:24:21,659
client the client's not oblivious right

524
00:24:21,659 --> 00:24:24,059
the it's the the point of oblivious

525
00:24:24,059 --> 00:24:26,640
these oblivious protocols is to keep the

526
00:24:26,640 --> 00:24:28,380
intermediaries and the and the server

527
00:24:28,380 --> 00:24:31,200
oblivious about what's happening uh and

528
00:24:31,200 --> 00:24:33,120
so the client needs to know what what

529
00:24:33,120 --> 00:24:35,880
kind of state it needs to trim uh to

530
00:24:35,880 --> 00:24:37,200
reject

531
00:24:37,200 --> 00:24:38,880
um all of that stuff and I don't think

532
00:24:38,880 --> 00:24:40,440
we actually have answers for that at the

533
00:24:40,440 --> 00:24:42,659
different levels so

534
00:24:42,659 --> 00:24:43,799
um

535
00:24:43,799 --> 00:24:47,960
uh yeah so so ohtp

536
00:24:48,059 --> 00:24:49,559
yeah

537
00:24:49,559 --> 00:24:50,480
um

538
00:24:50,480 --> 00:24:52,980
yeah I I concur with what everybody's

539
00:24:52,980 --> 00:24:54,539
just been saying I mean the the

540
00:24:54,539 --> 00:24:56,700
specification is two things it is an

541
00:24:56,700 --> 00:24:58,620
encapsulation format for talking to to

542
00:24:58,620 --> 00:25:01,140
the terminal Target HTTP server and it

543
00:25:01,140 --> 00:25:02,820
is a set of indicators that you provide

544
00:25:02,820 --> 00:25:06,780
to the Gateway and like in the in the

545
00:25:06,780 --> 00:25:08,820
end and so if in order to provide this

546
00:25:08,820 --> 00:25:10,500
functionality for some other

547
00:25:10,500 --> 00:25:12,900
hypothetical protocol like DNS you would

548
00:25:12,900 --> 00:25:14,460
then need an encapsulation format that

549
00:25:14,460 --> 00:25:16,320
is used to talk to talk to those

550
00:25:16,320 --> 00:25:18,480
um those systems and things and in the

551
00:25:18,480 --> 00:25:20,760
cases of you know in the in in the most

552
00:25:20,760 --> 00:25:22,679
likely that is like called TLS or called

553
00:25:22,679 --> 00:25:23,880
quick

554
00:25:23,880 --> 00:25:25,679
um and so like it's not like

555
00:25:25,679 --> 00:25:26,760
understandable like that's just like

556
00:25:26,760 --> 00:25:27,779
completely asking for this working group

557
00:25:27,779 --> 00:25:30,900
so like um so really specify the HTTP

558
00:25:30,900 --> 00:25:33,179
thing and and leave other things other

559
00:25:33,179 --> 00:25:34,200
people

560
00:25:34,200 --> 00:25:36,179
um and in particular like you know just

561
00:25:36,179 --> 00:25:37,799
to like harp on this a little bit if you

562
00:25:37,799 --> 00:25:39,900
were to say if what you wanted was to

563
00:25:39,900 --> 00:25:42,299
provide like a like a conceptually

564
00:25:42,299 --> 00:25:46,080
similar service to this that did DNS but

565
00:25:46,080 --> 00:25:47,279
was like the military they were

566
00:25:47,279 --> 00:25:49,440
tunneling the name of the Gateway is

567
00:25:49,440 --> 00:25:51,799
called mask

568
00:25:53,100 --> 00:25:56,100
foreign

569
00:26:00,539 --> 00:26:02,760
I think that

570
00:26:02,760 --> 00:26:06,840
is all of the issues so

571
00:26:06,840 --> 00:26:09,840
on uh authors and I think we have enough

572
00:26:09,840 --> 00:26:12,779
to rev the document

573
00:26:12,779 --> 00:26:16,100
and take it from there

574
00:26:16,440 --> 00:26:19,340
I think that's it then

575
00:26:19,559 --> 00:26:22,279
thanks Tommy

576
00:26:23,460 --> 00:26:25,080
all right

577
00:26:25,080 --> 00:26:27,240
um we're doing really well on time

578
00:26:27,240 --> 00:26:31,440
tiru are you going to present the um

579
00:26:31,440 --> 00:26:34,700
oblivious relay feedback

580
00:26:37,200 --> 00:26:41,299
do you have any friends right yeah

581
00:26:44,880 --> 00:26:46,500
hello everyone

582
00:26:46,500 --> 00:26:48,179
um good afternoon I'm thiru I'll be

583
00:26:48,179 --> 00:26:50,640
presenting updates to the obvious relay

584
00:26:50,640 --> 00:26:52,679
feedback draft uh this was presented in

585
00:26:52,679 --> 00:26:54,960
the last idea of when we had received

586
00:26:54,960 --> 00:26:57,659
some good feedback and we updated the

587
00:26:57,659 --> 00:26:59,820
draft to address those feedback

588
00:26:59,820 --> 00:27:03,200
uh next slide please

589
00:27:05,100 --> 00:27:07,320
yeah next slide

590
00:27:07,320 --> 00:27:10,559
yeah just a quick recap uh for those who

591
00:27:10,559 --> 00:27:12,299
haven't read this draft this is

592
00:27:12,299 --> 00:27:14,760
primarily written for the case that was

593
00:27:14,760 --> 00:27:16,799
often rate limit incoming requests for

594
00:27:16,799 --> 00:27:18,480
various reasons

595
00:27:18,480 --> 00:27:21,659
um if the server rate limits the relay

596
00:27:21,659 --> 00:27:23,340
then it would harm all the clients using

597
00:27:23,340 --> 00:27:24,840
that way and that's the problem we are

598
00:27:24,840 --> 00:27:26,700
trying to solve with this draft

599
00:27:26,700 --> 00:27:28,860
next slide please so just a reminder

600
00:27:28,860 --> 00:27:31,020
that we are required to wear a mask

601
00:27:31,020 --> 00:27:34,020
inside so please do put on your mask if

602
00:27:34,020 --> 00:27:36,799
you don't have it on already

603
00:27:37,140 --> 00:27:39,320
foreign

604
00:27:50,000 --> 00:27:52,620
clients uh the feedback we had received

605
00:27:52,620 --> 00:27:54,299
from the working group was to use the

606
00:27:54,299 --> 00:27:56,760
work happening in HTTP API working group

607
00:27:56,760 --> 00:28:00,120
and be co-authored with the author of

608
00:28:00,120 --> 00:28:02,400
that draft and he helped us update it to

609
00:28:02,400 --> 00:28:04,860
use the service parameters that's being

610
00:28:04,860 --> 00:28:07,559
defined in that uh right limit headers

611
00:28:07,559 --> 00:28:10,639
next slide

612
00:28:11,039 --> 00:28:13,860
yeah so that's the change that we're

613
00:28:13,860 --> 00:28:15,360
bringing in to update the right limit

614
00:28:15,360 --> 00:28:17,460
policy to have a new parameter to Signal

615
00:28:17,460 --> 00:28:20,159
the rate limit to the relay

616
00:28:20,159 --> 00:28:21,779
next slide

617
00:28:21,779 --> 00:28:23,220
so this was all there in the previous

618
00:28:23,220 --> 00:28:25,020
version so that was just a quick recap

619
00:28:25,020 --> 00:28:27,240
so what the draft does is it it sends

620
00:28:27,240 --> 00:28:29,039
two values one value to integrate to the

621
00:28:29,039 --> 00:28:31,140
relay to rate limit all the clients and

622
00:28:31,140 --> 00:28:32,940
the second value was breaking beta

623
00:28:32,940 --> 00:28:35,279
finding clients uh the big comment that

624
00:28:35,279 --> 00:28:36,900
we received from the working group was

625
00:28:36,900 --> 00:28:40,200
can that be abused uh by the Target uh

626
00:28:40,200 --> 00:28:42,480
if the relay starts rate limiting

627
00:28:42,480 --> 00:28:44,279
clients so that it would help the target

628
00:28:44,279 --> 00:28:46,679
to De anonymize these clients so we

629
00:28:46,679 --> 00:28:48,299
updated the draft to address these

630
00:28:48,299 --> 00:28:51,480
comments next slide

631
00:28:51,480 --> 00:28:54,779
yeah so uh if if in case the rate limit

632
00:28:54,779 --> 00:28:57,600
is for a client which is probably

633
00:28:57,600 --> 00:29:00,480
sending some malicious request which the

634
00:29:00,480 --> 00:29:02,700
target has identified uh then what are

635
00:29:02,700 --> 00:29:05,100
the prerequisites for the relative even

636
00:29:05,100 --> 00:29:07,740
start rate limiting so the first the

637
00:29:07,740 --> 00:29:09,960
first two uh prerequisites have to be

638
00:29:09,960 --> 00:29:12,120
that it has to be serving a large number

639
00:29:12,120 --> 00:29:13,740
of clients sending large volume of

640
00:29:13,740 --> 00:29:15,179
requests otherwise it's going to ignore

641
00:29:15,179 --> 00:29:17,760
that it needs to have a very large

642
00:29:17,760 --> 00:29:19,860
number of benign clients for which it is

643
00:29:19,860 --> 00:29:22,200
not doing any rate limiting versus the

644
00:29:22,200 --> 00:29:23,820
number of clients for which it has to do

645
00:29:23,820 --> 00:29:26,880
the rate limiting the third rule is that

646
00:29:26,880 --> 00:29:29,580
uh really does not immediately rate

647
00:29:29,580 --> 00:29:31,260
limit the offending client so what it

648
00:29:31,260 --> 00:29:34,140
does is it basically starts watching how

649
00:29:34,140 --> 00:29:36,480
many requests from the client are indeed

650
00:29:36,480 --> 00:29:39,059
malicious for which the value 2 was

651
00:29:39,059 --> 00:29:40,799
provided versus the request for which

652
00:29:40,799 --> 00:29:43,200
there was no value provided uh for

653
00:29:43,200 --> 00:29:45,059
instance some important it is sending a

654
00:29:45,059 --> 00:29:47,940
large volume of malicious request the

655
00:29:47,940 --> 00:29:50,159
idea behind that rule was malform

656
00:29:50,159 --> 00:29:52,500
request typically has some pattern which

657
00:29:52,500 --> 00:29:54,720
is matched by let's say a web

658
00:29:54,720 --> 00:29:57,720
application firewall uh whereas valid

659
00:29:57,720 --> 00:30:00,299
HTTP request should not be linkable in

660
00:30:00,299 --> 00:30:01,740
case if you want the Privacy protection

661
00:30:01,740 --> 00:30:04,500
for obvious HTTP so that way the target

662
00:30:04,500 --> 00:30:06,299
will not be able to partition the

663
00:30:06,299 --> 00:30:09,120
anonymity set of legitimate clients so

664
00:30:09,120 --> 00:30:11,520
that was the idea that we enhanced this

665
00:30:11,520 --> 00:30:14,940
specific section to handle uh the big

666
00:30:14,940 --> 00:30:17,399
issue that was raised with regard to Red

667
00:30:17,399 --> 00:30:20,159
limit being abused by the Target for

668
00:30:20,159 --> 00:30:22,380
malicious purposes

669
00:30:22,380 --> 00:30:25,620
uh next slide please

670
00:30:25,620 --> 00:30:28,440
uh even in case where I think Ben raised

671
00:30:28,440 --> 00:30:30,840
this comment that a rate limiting uh

672
00:30:30,840 --> 00:30:32,700
field for all the clients could also be

673
00:30:32,700 --> 00:30:34,740
misused in case if for instance there

674
00:30:34,740 --> 00:30:37,080
are very low volume of clients sending

675
00:30:37,080 --> 00:30:39,299
uh requests once in a while so we have

676
00:30:39,299 --> 00:30:41,220
set email prerequisites for that that

677
00:30:41,220 --> 00:30:43,260
after the rate limiting there has to be

678
00:30:43,260 --> 00:30:45,299
a good enough high volume of messages

679
00:30:45,299 --> 00:30:48,360
from a large volume of clients and uh

680
00:30:48,360 --> 00:30:50,820
dividing the rate limit uh fairly among

681
00:30:50,820 --> 00:30:53,159
the active clients could create a timing

682
00:30:53,159 --> 00:30:56,039
pattern of requests that could possibly

683
00:30:56,039 --> 00:30:58,559
be uh strongly correlated by the Target

684
00:30:58,559 --> 00:31:00,840
to the anonymous clients so we're just

685
00:31:00,840 --> 00:31:02,700
relying on the mitigation technique

686
00:31:02,700 --> 00:31:04,260
that's already defined in the obvious

687
00:31:04,260 --> 00:31:07,679
https which discusses delaying requests

688
00:31:07,679 --> 00:31:09,059
to increase the nonhead we set into

689
00:31:09,059 --> 00:31:12,299
which in which the requests are

690
00:31:12,299 --> 00:31:14,279
attributed to so that should that we

691
00:31:14,279 --> 00:31:16,980
think should uh with the previous one

692
00:31:16,980 --> 00:31:18,539
and previously two we believe that

693
00:31:18,539 --> 00:31:21,419
should address the side effects of rate

694
00:31:21,419 --> 00:31:26,240
limiting all the clients uh next slide

695
00:31:26,760 --> 00:31:28,919
yeah I think we have addressed all the

696
00:31:28,919 --> 00:31:30,360
comments from the working group so far

697
00:31:30,360 --> 00:31:34,100
and the requests for working production

698
00:31:40,919 --> 00:31:42,480
um I'm not sure that I understand your

699
00:31:42,480 --> 00:31:43,860
argument about

700
00:31:43,860 --> 00:31:44,659
um

701
00:31:44,659 --> 00:31:47,760
about how this preserves the uh

702
00:31:47,760 --> 00:31:50,100
anonymity for the clients I I understand

703
00:31:50,100 --> 00:31:53,779
that you it doesn't permit the

704
00:31:53,779 --> 00:31:57,179
Target to fully partition the state

705
00:31:57,179 --> 00:31:59,159
space of all users but it seems to me

706
00:31:59,159 --> 00:32:01,080
like what you're saying is it's okay if

707
00:32:01,080 --> 00:32:04,860
the anonymity uh or the or the is able

708
00:32:04,860 --> 00:32:07,080
to partition a small percentage of the

709
00:32:07,080 --> 00:32:09,179
users is that is that is that the

710
00:32:09,179 --> 00:32:12,419
mitigation that you're proposing here

711
00:32:12,419 --> 00:32:14,279
yeah if there are small number of

712
00:32:14,279 --> 00:32:16,320
clients then they will not apply a

713
00:32:16,320 --> 00:32:18,299
medication because that makes it quite

714
00:32:18,299 --> 00:32:20,100
easy for the Target then to identify the

715
00:32:20,100 --> 00:32:21,840
clients yeah

716
00:32:21,840 --> 00:32:24,419
but if there's a large number of clients

717
00:32:24,419 --> 00:32:28,559
then uh the relay and the relay receives

718
00:32:28,559 --> 00:32:30,120
this feedback that says this is the

719
00:32:30,120 --> 00:32:32,399
particular you know block further

720
00:32:32,399 --> 00:32:35,159
request from this client and the relay

721
00:32:35,159 --> 00:32:37,860
acts on that behavior acts on that

722
00:32:37,860 --> 00:32:40,799
request they can still you know that

723
00:32:40,799 --> 00:32:42,419
allows the

724
00:32:42,419 --> 00:32:45,720
identification of those specific that

725
00:32:45,720 --> 00:32:48,179
specific user right

726
00:32:48,179 --> 00:32:50,580
no it does not because the if you go

727
00:32:50,580 --> 00:32:52,380
back to the previous slides where we

728
00:32:52,380 --> 00:32:54,960
were discussing the the previous slide

729
00:32:54,960 --> 00:32:57,480
yeah we really does not immediately act

730
00:32:57,480 --> 00:33:00,779
on a request from the target it starts

731
00:33:00,779 --> 00:33:03,179
noticing how many requests are getting

732
00:33:03,179 --> 00:33:06,000
these kind of malicious requests so uh

733
00:33:06,000 --> 00:33:07,860
for instance if let's say there are 100

734
00:33:07,860 --> 00:33:09,360
requests coming from the client and

735
00:33:09,360 --> 00:33:11,039
there are like 99 requests which are

736
00:33:11,039 --> 00:33:12,960
being said that they are malicious and

737
00:33:12,960 --> 00:33:14,460
there's just one legitimate request

738
00:33:14,460 --> 00:33:18,480
which is one uh then then I and it meets

739
00:33:18,480 --> 00:33:19,980
the other criteria then it starts doing

740
00:33:19,980 --> 00:33:21,899
that and and for a Target it's it's

741
00:33:21,899 --> 00:33:24,179
quite impossible to know that all these

742
00:33:24,179 --> 00:33:25,919
requests are coming from the same client

743
00:33:25,919 --> 00:33:27,779
if it had already known that then there

744
00:33:27,779 --> 00:33:29,340
is no need for it even to send that

745
00:33:29,340 --> 00:33:33,299
signal back to the relay

746
00:33:35,580 --> 00:33:37,380
uh this doesn't sound like it has the

747
00:33:37,380 --> 00:33:39,240
guarantees that I would want as a client

748
00:33:39,240 --> 00:33:41,700
to use this but but maybe I'm

749
00:33:41,700 --> 00:33:44,220
misunderstanding I'll let uh next books

750
00:33:44,220 --> 00:33:46,640
in the keyboard

751
00:33:51,360 --> 00:33:53,159
hi

752
00:33:53,159 --> 00:33:55,860
uh so

753
00:33:55,860 --> 00:34:00,000
in general I think that this is if we

754
00:34:00,000 --> 00:34:00,779
take

755
00:34:00,779 --> 00:34:02,700
the full sort of cryptographic

756
00:34:02,700 --> 00:34:05,880
seriousness approach of like you know

757
00:34:05,880 --> 00:34:07,980
there shall not be any leakage or like

758
00:34:07,980 --> 00:34:09,839
all leakage shall be Quantified and

759
00:34:09,839 --> 00:34:12,599
understood exactly but this is a really

760
00:34:12,599 --> 00:34:16,379
hard problem uh this is like because the

761
00:34:16,379 --> 00:34:18,599
timing we're talking about like timing

762
00:34:18,599 --> 00:34:22,080
correlation things that depend on you

763
00:34:22,080 --> 00:34:24,300
like what actual clients timing

764
00:34:24,300 --> 00:34:27,480
behaviors were and it's not even really

765
00:34:27,480 --> 00:34:29,520
clear to me how to formulate it like

766
00:34:29,520 --> 00:34:30,839
what are the assumptions that we're

767
00:34:30,839 --> 00:34:32,699
making that how much does our threat

768
00:34:32,699 --> 00:34:34,619
model cover

769
00:34:34,619 --> 00:34:38,159
um for example clients who are whose

770
00:34:38,159 --> 00:34:40,800
timing is supposed to be uncorrelated

771
00:34:40,800 --> 00:34:42,839
you know that they're issuing requests

772
00:34:42,839 --> 00:34:44,399
randomly but their timing becomes

773
00:34:44,399 --> 00:34:46,260
correlated because of a rate limit

774
00:34:46,260 --> 00:34:50,280
applied to them by the relay uh I think

775
00:34:50,280 --> 00:34:52,260
that so like even the threat modeling it

776
00:34:52,260 --> 00:34:54,780
seems non-trivial here and then this

777
00:34:54,780 --> 00:34:56,639
like client-specific targeted rate

778
00:34:56,639 --> 00:35:00,839
limiting is even harder to understand uh

779
00:35:00,839 --> 00:35:02,400
it's not clear to me that this state

780
00:35:02,400 --> 00:35:03,960
machine has a bunch of mitigations in it

781
00:35:03,960 --> 00:35:06,839
which uh which actually are so strong

782
00:35:06,839 --> 00:35:09,060
that I'm not sure that it actually works

783
00:35:09,060 --> 00:35:11,160
as a defense anymore like a malicious

784
00:35:11,160 --> 00:35:14,099
client can just send a lot of requests

785
00:35:14,099 --> 00:35:16,500
for a slash like a lot of really boring

786
00:35:16,500 --> 00:35:18,060
requests along with whatever it's

787
00:35:18,060 --> 00:35:21,720
malicious requests are and now the relay

788
00:35:21,720 --> 00:35:23,280
looks at the percentage of malicious

789
00:35:23,280 --> 00:35:24,900
flagged requests and that percentage is

790
00:35:24,900 --> 00:35:27,060
not high enough so it doesn't apply any

791
00:35:27,060 --> 00:35:28,380
rate limit

792
00:35:28,380 --> 00:35:30,540
uh so

793
00:35:30,540 --> 00:35:32,700
my advice would be

794
00:35:32,700 --> 00:35:34,200
forget about the client targeted

795
00:35:34,200 --> 00:35:35,280
requests

796
00:35:35,280 --> 00:35:38,400
let's just try an informational draft on

797
00:35:38,400 --> 00:35:41,220
the question of like good practices for

798
00:35:41,220 --> 00:35:43,560
a relay to

799
00:35:43,560 --> 00:35:45,540
um to implement rate limiting which by

800
00:35:45,540 --> 00:35:47,099
the way doesn't even have to be explicit

801
00:35:47,099 --> 00:35:48,420
even if you don't have an explicit rate

802
00:35:48,420 --> 00:35:51,480
limit from the Gateway at some point

803
00:35:51,480 --> 00:35:52,859
you're still going to have to turn away

804
00:35:52,859 --> 00:35:54,599
some fraction of requests and so I think

805
00:35:54,599 --> 00:35:56,579
there's some some interesting questions

806
00:35:56,579 --> 00:35:58,920
about what are the best ways to do that

807
00:35:58,920 --> 00:36:00,240
that leak the least amount of

808
00:36:00,240 --> 00:36:03,799
information how do we model that problem

809
00:36:04,339 --> 00:36:06,720
that's an interesting solution but if

810
00:36:06,720 --> 00:36:08,760
we'll look into that yeah thanks

811
00:36:08,760 --> 00:36:10,800
sorry I'm a little puzzled how are you

812
00:36:10,800 --> 00:36:13,140
defining malicious not like technically

813
00:36:13,140 --> 00:36:14,220
but we're using the properties of

814
00:36:14,220 --> 00:36:16,380
malicious are

815
00:36:16,380 --> 00:36:18,839
any many malformed requests which

816
00:36:18,839 --> 00:36:20,520
matches for example your web application

817
00:36:20,520 --> 00:36:23,820
firewall patterns of attack right sorry

818
00:36:23,820 --> 00:36:24,839
which what

819
00:36:24,839 --> 00:36:26,339
if you have a

820
00:36:26,339 --> 00:36:27,900
if you have an attack pattern in the

821
00:36:27,900 --> 00:36:31,380
HTTP request right like like a large

822
00:36:31,380 --> 00:36:33,180
garbage volume which matches some

823
00:36:33,180 --> 00:36:35,400
specific web application firewall rule

824
00:36:35,400 --> 00:36:37,200
which you have seen some alternate

825
00:36:37,200 --> 00:36:38,640
family using and you see that they're

826
00:36:38,640 --> 00:36:40,380
using some specific headers that's how

827
00:36:40,380 --> 00:36:42,300
you detect that it's coming from that

828
00:36:42,300 --> 00:36:44,160
and and you don't see that coming from

829
00:36:44,160 --> 00:36:47,460
average directly so I'm sure tkg is

830
00:36:47,460 --> 00:36:48,780
concerned about the anonymity set

831
00:36:48,780 --> 00:36:50,940
there's no way for the as far as I can

832
00:36:50,940 --> 00:36:53,280
tell there's no way for the Relay to

833
00:36:53,280 --> 00:36:54,660
verify that these are malicious and not

834
00:36:54,660 --> 00:36:57,000
just cleaning wishes and it seems quite

835
00:36:57,000 --> 00:36:58,980
clear you can use you say you can't be

836
00:36:58,980 --> 00:37:00,119
used for partitioning but of course it

837
00:37:00,119 --> 00:37:03,119
can because I just like so so I I

838
00:37:03,119 --> 00:37:04,380
believe like

839
00:37:04,380 --> 00:37:06,060
I see a set of requests that I think are

840
00:37:06,060 --> 00:37:08,820
all from one person and

841
00:37:08,820 --> 00:37:09,960
um I don't know for sure but they seem

842
00:37:09,960 --> 00:37:11,220
to be correlated and so what I do is I

843
00:37:11,220 --> 00:37:12,780
fly them all as malicious and then I see

844
00:37:12,780 --> 00:37:14,579
if that to see if it throttles back and

845
00:37:14,579 --> 00:37:16,440
if it does then then I verify the

846
00:37:16,440 --> 00:37:18,300
guesses for one person and since you

847
00:37:18,300 --> 00:37:19,079
have no way you're going to find them

848
00:37:19,079 --> 00:37:21,060
malicious that doesn't work so I think

849
00:37:21,060 --> 00:37:23,339
if you want I think so I think like I'm

850
00:37:23,339 --> 00:37:24,839
also concerned about the ability to

851
00:37:24,839 --> 00:37:26,400
actually demonstrate this is safe I

852
00:37:26,400 --> 00:37:27,060
think

853
00:37:27,060 --> 00:37:28,920
um you know one potential Avenue would

854
00:37:28,920 --> 00:37:30,359
be to

855
00:37:30,359 --> 00:37:34,500
um uh um would would be to um have the

856
00:37:34,500 --> 00:37:36,900
uh the server the server Supply the key

857
00:37:36,900 --> 00:37:38,339
to the relay so they really could verify

858
00:37:38,339 --> 00:37:39,900
for themselves they're malicious of

859
00:37:39,900 --> 00:37:41,339
course now we're in key committing um

860
00:37:41,339 --> 00:37:42,960
I'll just say that right now

861
00:37:42,960 --> 00:37:44,940
um but like I just don't understand I

862
00:37:44,940 --> 00:37:46,140
don't think it's gonna work to make the

863
00:37:46,140 --> 00:37:47,400
servers more that things are malicious

864
00:37:47,400 --> 00:37:49,500
for the reason I just indicators

865
00:37:49,500 --> 00:37:50,760
okay

866
00:37:50,760 --> 00:37:52,320
um and I I guess I understand people

867
00:37:52,320 --> 00:37:54,119
think it's a problem but like

868
00:37:54,119 --> 00:37:56,780
you know

869
00:37:57,000 --> 00:37:59,520
like like I mean it seems I guess I

870
00:37:59,520 --> 00:38:01,020
guess it seems to me the example you

871
00:38:01,020 --> 00:38:03,180
just you just said like filter it out

872
00:38:03,180 --> 00:38:04,800
like I don't really understand I don't

873
00:38:04,800 --> 00:38:06,119
understand what the value why is it

874
00:38:06,119 --> 00:38:07,920
helpful to throttle this data

875
00:38:07,920 --> 00:38:09,440
you can already attacked the problem

876
00:38:09,440 --> 00:38:12,180
those malicious requests typically a

877
00:38:12,180 --> 00:38:15,020
filter that you drop those records

878
00:38:15,020 --> 00:38:17,099
yeah but if it's if it's getting

879
00:38:17,099 --> 00:38:19,140
overwhelmed right and it wants them to

880
00:38:19,140 --> 00:38:21,720
be dropped right why

881
00:38:21,720 --> 00:38:23,820
if it's getting overwhelmed pretty scary

882
00:38:23,820 --> 00:38:25,740
but I mean but it's because it's slower

883
00:38:25,740 --> 00:38:27,000
to process those requesting the other

884
00:38:27,000 --> 00:38:28,920
requests yeah it's it's just trying to

885
00:38:28,920 --> 00:38:31,440
save its uh resources from processing

886
00:38:31,440 --> 00:38:33,599
those bad reviews yeah

887
00:38:33,599 --> 00:38:35,220
like I guess I'm just not that I'm not

888
00:38:35,220 --> 00:38:36,300
that excited about computational Irish

889
00:38:36,300 --> 00:38:38,839
attacks here

890
00:38:41,820 --> 00:38:44,940
all right so we're at time on this slot

891
00:38:44,940 --> 00:38:46,619
um thanks for the presentation too it

892
00:38:46,619 --> 00:38:48,000
sounds like we need maybe a little bit

893
00:38:48,000 --> 00:38:49,619
more clarity on the threat model here

894
00:38:49,619 --> 00:38:52,440
before we we move ahead

895
00:38:52,440 --> 00:38:53,700
um so

896
00:38:53,700 --> 00:38:55,859
yeah I think we're going to take that uh

897
00:38:55,859 --> 00:38:59,359
take that back to the list thanks

898
00:39:00,300 --> 00:39:02,339
all right

899
00:39:02,339 --> 00:39:05,339
checking the agenda here looks like next

900
00:39:05,339 --> 00:39:07,859
up is Ralph Giles presenting remotely on

901
00:39:07,859 --> 00:39:11,760
uh unreliable ohttp extensions

902
00:39:11,760 --> 00:39:14,420
Ralph

903
00:39:15,480 --> 00:39:17,339
all right I'm trying to get the

904
00:39:17,339 --> 00:39:20,480
slides to show up

905
00:39:26,339 --> 00:39:30,900
did you request a SlideShare there we go

906
00:39:30,900 --> 00:39:32,280
great

907
00:39:32,280 --> 00:39:35,160
take it away all right so my name is Rob

908
00:39:35,160 --> 00:39:37,920
Giles I'm presenting work I did at Brave

909
00:39:37,920 --> 00:39:39,900
along with Chris Wood who was a Cloud

910
00:39:39,900 --> 00:39:42,420
Player and this is a proposal for an

911
00:39:42,420 --> 00:39:44,700
extension to oblivious hdb that for

912
00:39:44,700 --> 00:39:47,099
unreliable delivery

913
00:39:47,099 --> 00:39:49,079
so uh for those of you who are new to O

914
00:39:49,079 --> 00:39:50,700
HTTP which is probably not most of you

915
00:39:50,700 --> 00:39:52,200
but was certainly me

916
00:39:52,200 --> 00:39:53,640
um so the idea is this works is that you

917
00:39:53,640 --> 00:39:55,980
have a client that wants to send stuff

918
00:39:55,980 --> 00:39:58,560
to a Target and without them learning

919
00:39:58,560 --> 00:39:59,880
too much about each other so there's a

920
00:39:59,880 --> 00:40:02,099
relay service the client encrypts the

921
00:40:02,099 --> 00:40:03,420
data for

922
00:40:03,420 --> 00:40:05,760
uh using the gateways key send it to the

923
00:40:05,760 --> 00:40:07,200
relay the relay forwards it to the

924
00:40:07,200 --> 00:40:08,880
Gateway stripping the IP address so

925
00:40:08,880 --> 00:40:10,380
everybody doesn't learn what's in the

926
00:40:10,380 --> 00:40:11,760
client's request the Gateway doesn't

927
00:40:11,760 --> 00:40:13,320
learn what the client's IP address is

928
00:40:13,320 --> 00:40:16,200
and the Gateway proxies the unwraps the

929
00:40:16,200 --> 00:40:18,359
request since it's the target

930
00:40:18,359 --> 00:40:20,820
the target responds like a normal HTTP

931
00:40:20,820 --> 00:40:22,560
server would sends it back to the

932
00:40:22,560 --> 00:40:24,119
Gateway the Gateway encrypts it to the

933
00:40:24,119 --> 00:40:25,980
client sends it to the relay who

934
00:40:25,980 --> 00:40:27,839
remembers who the client was

935
00:40:27,839 --> 00:40:29,700
and sends the encrypted request back to

936
00:40:29,700 --> 00:40:30,780
client

937
00:40:30,780 --> 00:40:32,820
okay simple enough

938
00:40:32,820 --> 00:40:35,579
so for uh we have an application where

939
00:40:35,579 --> 00:40:37,260
we're using the star protocol which is

940
00:40:37,260 --> 00:40:39,000
there's been some interest in over in

941
00:40:39,000 --> 00:40:42,660
the Privacy surveying measurement group

942
00:40:42,660 --> 00:40:45,359
to do Telemetry submission like things

943
00:40:45,359 --> 00:40:47,579
about it or things that applications are

944
00:40:47,579 --> 00:40:48,720
doing they want to submit it to some

945
00:40:48,720 --> 00:40:50,700
server and the way this works right now

946
00:40:50,700 --> 00:40:52,020
is the client

947
00:40:52,020 --> 00:40:54,780
uh constructs the message sends it to a

948
00:40:54,780 --> 00:40:56,460
web endpoint and rather than the web

949
00:40:56,460 --> 00:40:58,500
endpoint doing processing directly or

950
00:40:58,500 --> 00:41:00,660
speed and simplicity we just shove it

951
00:41:00,660 --> 00:41:02,640
into a queue and then there's a batch

952
00:41:02,640 --> 00:41:04,680
job that runs on separate uh with

953
00:41:04,680 --> 00:41:06,240
separate missions elsewhere that pulls

954
00:41:06,240 --> 00:41:08,820
the log down out of band and analyzes it

955
00:41:08,820 --> 00:41:10,800
in a batch and so this simplifies the

956
00:41:10,800 --> 00:41:12,720
infrastructure the endpoint can be

957
00:41:12,720 --> 00:41:14,160
really fast all it has to do is append

958
00:41:14,160 --> 00:41:17,160
to a log and uh because we're doing sort

959
00:41:17,160 --> 00:41:19,260
of aggregation of the data it's not

960
00:41:19,260 --> 00:41:21,359
helpful to look at the data individually

961
00:41:21,359 --> 00:41:24,660
but we can look at the IP address if

962
00:41:24,660 --> 00:41:25,740
it's coming from the clients who can

963
00:41:25,740 --> 00:41:27,300
associate the eventual things that we

964
00:41:27,300 --> 00:41:30,060
process with the client's IP address so

965
00:41:30,060 --> 00:41:31,380
we could build a profile of individual

966
00:41:31,380 --> 00:41:33,060
visual clients from what they send so

967
00:41:33,060 --> 00:41:34,320
that's not as privacy preserving as

968
00:41:34,320 --> 00:41:36,680
you'd like

969
00:41:37,200 --> 00:41:39,480
so if we use oblivious HTTP we can solve

970
00:41:39,480 --> 00:41:41,520
the IP we can break that link with an IP

971
00:41:41,520 --> 00:41:43,200
address we just start to relay which

972
00:41:43,200 --> 00:41:44,820
talks to a Gateway which talks to the

973
00:41:44,820 --> 00:41:46,859
endpoint but now we need two new

974
00:41:46,859 --> 00:41:48,480
services

975
00:41:48,480 --> 00:41:50,640
and since we already have this custom

976
00:41:50,640 --> 00:41:52,440
thing that's listening to for the

977
00:41:52,440 --> 00:41:53,880
endpoint maybe we can just teach the

978
00:41:53,880 --> 00:41:56,339
battle oblivious HTTP and combine the

979
00:41:56,339 --> 00:41:57,960
Gateway in the endpoint so the relay

980
00:41:57,960 --> 00:41:59,640
talks to the endpoint which then stuff

981
00:41:59,640 --> 00:42:02,040
thing is into the log so one less

982
00:42:02,040 --> 00:42:04,560
service we have to run

983
00:42:04,560 --> 00:42:06,780
and then the log could be processed out

984
00:42:06,780 --> 00:42:09,960
of band later so that works sort of the

985
00:42:09,960 --> 00:42:12,240
same as before we just added the single

986
00:42:12,240 --> 00:42:14,520
service we have to put in

987
00:42:14,520 --> 00:42:16,200
to handle the relay

988
00:42:16,200 --> 00:42:17,640
but teaching the endpoint about

989
00:42:17,640 --> 00:42:19,920
oblivious HTTP complicates the code a

990
00:42:19,920 --> 00:42:20,940
lot I mean remember it's supposed to be

991
00:42:20,940 --> 00:42:23,040
really simple it just takes bodies from

992
00:42:23,040 --> 00:42:24,660
like Jason bodies that's been submitted

993
00:42:24,660 --> 00:42:25,920
by the client and it shoves them in a

994
00:42:25,920 --> 00:42:28,380
log file so now we have to implement

995
00:42:28,380 --> 00:42:31,500
oblivious HTTP we have to do so we can

996
00:42:31,500 --> 00:42:32,579
do the request and response

997
00:42:32,579 --> 00:42:34,320
serialization we need to provision keys

998
00:42:34,320 --> 00:42:35,339
for it

999
00:42:35,339 --> 00:42:37,200
and so it's a fair amount of extra code

1000
00:42:37,200 --> 00:42:40,200
and security service we need to audit

1001
00:42:40,200 --> 00:42:41,760
and the endpoint was supposed to be

1002
00:42:41,760 --> 00:42:42,960
simple

1003
00:42:42,960 --> 00:42:45,359
so the inside I had think about thinking

1004
00:42:45,359 --> 00:42:47,640
about this is the only reason we need I

1005
00:42:47,640 --> 00:42:49,859
believe it's HTTP parsing and hpac

1006
00:42:49,859 --> 00:42:51,119
encoding and all that sort of stuff and

1007
00:42:51,119 --> 00:42:53,400
so we can return a 200 okay because this

1008
00:42:53,400 --> 00:42:55,560
is just a submission service we the

1009
00:42:55,560 --> 00:42:57,839
client sends data it's a report or

1010
00:42:57,839 --> 00:43:00,660
something it's done and it doesn't the

1011
00:43:00,660 --> 00:43:02,280
server doesn't ever actually return any

1012
00:43:02,280 --> 00:43:04,859
data it's just yes I got your response

1013
00:43:04,859 --> 00:43:06,900
and because we're doing our aggregation

1014
00:43:06,900 --> 00:43:09,000
processing offline in a batch job we

1015
00:43:09,000 --> 00:43:10,920
don't even validate the message content

1016
00:43:10,920 --> 00:43:12,660
so the client is sending nonsense we

1017
00:43:12,660 --> 00:43:14,220
don't find out in time to tell them you

1018
00:43:14,220 --> 00:43:15,359
send nonsense

1019
00:43:15,359 --> 00:43:18,599
so there's actually no real value to

1020
00:43:18,599 --> 00:43:21,420
encoding the empty body with the 200

1021
00:43:21,420 --> 00:43:24,240
okay Response Code with oblivious HTTP

1022
00:43:24,240 --> 00:43:27,240
but that's what the spec requires

1023
00:43:27,240 --> 00:43:29,819
so to address this we uh Chris Wood and

1024
00:43:29,819 --> 00:43:32,339
I wrote a draft for unreliable delivery

1025
00:43:32,339 --> 00:43:34,140
is what we're calling it which is just

1026
00:43:34,140 --> 00:43:35,640
an extension that says instead of

1027
00:43:35,640 --> 00:43:38,940
requiring that the Gateway return an

1028
00:43:38,940 --> 00:43:41,520
encrypted response to the relay which is

1029
00:43:41,520 --> 00:43:43,319
sent back to the client what if you were

1030
00:43:43,319 --> 00:43:46,140
just able to say 202 accept

1031
00:43:46,140 --> 00:43:48,599
and return an empty body and that way

1032
00:43:48,599 --> 00:43:50,520
the Gateway doesn't actually have to

1033
00:43:50,520 --> 00:43:53,280
understand anything about oblivious HTTP

1034
00:43:53,280 --> 00:43:55,859
other than this is what you respond with

1035
00:43:55,859 --> 00:43:58,740
so it's two lines of code instead of 500

1036
00:43:58,740 --> 00:44:00,839
or whatever it takes to implement uh

1037
00:44:00,839 --> 00:44:02,400
oblivious http

1038
00:44:02,400 --> 00:44:04,380
so simple enough

1039
00:44:04,380 --> 00:44:06,300
uh the client could opt in by setting

1040
00:44:06,300 --> 00:44:09,060
certain headers uh what we suggested

1041
00:44:09,060 --> 00:44:11,220
except and then a message oh HTTP

1042
00:44:11,220 --> 00:44:14,460
acknowledgment message type so signal

1043
00:44:14,460 --> 00:44:16,560
that's okay with this Martin Thompson

1044
00:44:16,560 --> 00:44:17,880
suggested maybe we could use the prefer

1045
00:44:17,880 --> 00:44:19,319
respond to async header which has a

1046
00:44:19,319 --> 00:44:21,720
bunch of stuff you can attach to it to

1047
00:44:21,720 --> 00:44:24,240
say how long you're willing to wait for

1048
00:44:24,240 --> 00:44:26,280
an answer and things like that uh also

1049
00:44:26,280 --> 00:44:27,780
given that the in at least in our

1050
00:44:27,780 --> 00:44:28,859
application the Gateway will probably

1051
00:44:28,859 --> 00:44:31,980
only support this method uh probably it

1052
00:44:31,980 --> 00:44:33,480
should be possible for the out-of-band

1053
00:44:33,480 --> 00:44:35,220
configuration that tells the relay how

1054
00:44:35,220 --> 00:44:37,380
to talk to the Gateway could also say we

1055
00:44:37,380 --> 00:44:39,060
only accept this so the Relay can reject

1056
00:44:39,060 --> 00:44:40,440
traffic right away

1057
00:44:40,440 --> 00:44:42,180
that doesn't that tries to do something

1058
00:44:42,180 --> 00:44:44,359
else

1059
00:44:44,400 --> 00:44:46,140
so it seems to be there are some

1060
00:44:46,140 --> 00:44:47,579
advantages to this like it makes it

1061
00:44:47,579 --> 00:44:48,839
easier to secure the Gateway code

1062
00:44:48,839 --> 00:44:50,400
because you don't have to do code you

1063
00:44:50,400 --> 00:44:52,260
don't have to do key provisioning and

1064
00:44:52,260 --> 00:44:53,819
it's just much simpler code it gives you

1065
00:44:53,819 --> 00:44:55,740
more ways of deploying oblivious HTTP

1066
00:44:55,740 --> 00:44:57,540
within different Frameworks

1067
00:44:57,540 --> 00:44:59,339
and another nice Advantage is that

1068
00:44:59,339 --> 00:45:00,839
because you don't have to deliver right

1069
00:45:00,839 --> 00:45:04,560
away because the Gateway and and the

1070
00:45:04,560 --> 00:45:06,420
Relay can just respond 200 accepted

1071
00:45:06,420 --> 00:45:08,460
right away and then buffer the message

1072
00:45:08,460 --> 00:45:10,440
by H delivered later that gives you a

1073
00:45:10,440 --> 00:45:12,119
much larger window when you can Shuffle

1074
00:45:12,119 --> 00:45:14,280
the data send it in a different order

1075
00:45:14,280 --> 00:45:16,619
and that helps defeat traffic analysis

1076
00:45:16,619 --> 00:45:18,180
where you try and figure out which

1077
00:45:18,180 --> 00:45:19,560
clients and which message based on when

1078
00:45:19,560 --> 00:45:20,579
it was sent

1079
00:45:20,579 --> 00:45:22,079
on the other hand there's more config to

1080
00:45:22,079 --> 00:45:24,960
worry about and the relay at least has

1081
00:45:24,960 --> 00:45:27,000
to be configured to accept this and not

1082
00:45:27,000 --> 00:45:30,500
reject it as a not valid oblivious HTTP

1083
00:45:30,500 --> 00:45:32,640
and it's not suitable for a lot of

1084
00:45:32,640 --> 00:45:34,560
applications because you don't get any

1085
00:45:34,560 --> 00:45:37,260
acknowledgment other than the relay hurt

1086
00:45:37,260 --> 00:45:38,339
you

1087
00:45:38,339 --> 00:45:38,940
um

1088
00:45:38,940 --> 00:45:40,800
there's no way to re-transmit if the

1089
00:45:40,800 --> 00:45:42,359
transmission fails there's no way to

1090
00:45:42,359 --> 00:45:45,240
transfer State and confirm the state has

1091
00:45:45,240 --> 00:45:48,300
been transferred if that makes any sense

1092
00:45:48,300 --> 00:45:49,920
um Ted did you want to ask a clarifying

1093
00:45:49,920 --> 00:45:51,780
question right now or was that just in

1094
00:45:51,780 --> 00:45:54,859
the queue for a later

1095
00:45:56,220 --> 00:45:57,540
question

1096
00:45:57,540 --> 00:45:59,940
okay well I'm at the end anyway this is

1097
00:45:59,940 --> 00:46:02,339
so that was our motivation and so I was

1098
00:46:02,339 --> 00:46:04,200
just curious if

1099
00:46:04,200 --> 00:46:05,520
is there interest in the working group

1100
00:46:05,520 --> 00:46:07,740
in addressing this as a use case

1101
00:46:07,740 --> 00:46:09,000
um what do you think of the draft are

1102
00:46:09,000 --> 00:46:10,500
there any technical improvements you

1103
00:46:10,500 --> 00:46:11,880
could suggest because it seems like

1104
00:46:11,880 --> 00:46:12,900
there's lots of ways we could do this

1105
00:46:12,900 --> 00:46:14,520
and it's unclear how it interacts with

1106
00:46:14,520 --> 00:46:18,319
other things like service discovery

1107
00:46:19,260 --> 00:46:22,440
uh Ted Hardy Cisco uh

1108
00:46:22,440 --> 00:46:23,520
I

1109
00:46:23,520 --> 00:46:25,020
I usually try and come up here and say

1110
00:46:25,020 --> 00:46:26,880
what I'm enthusiastic about here and and

1111
00:46:26,880 --> 00:46:28,380
unfortunately in this case I'm afraid

1112
00:46:28,380 --> 00:46:30,960
I'm up obvious uh occasional curmudgeon

1113
00:46:30,960 --> 00:46:32,700
hat on

1114
00:46:32,700 --> 00:46:34,500
um and I apologize for that I think what

1115
00:46:34,500 --> 00:46:36,240
you're actually trying to do is to

1116
00:46:36,240 --> 00:46:39,240
create an oblivious star service so

1117
00:46:39,240 --> 00:46:40,940
looking through the draft and and

1118
00:46:40,940 --> 00:46:42,839
following through to the distributed

1119
00:46:42,839 --> 00:46:44,220
secret sharing for private threshold

1120
00:46:44,220 --> 00:46:47,819
aggregation I get why you would want a

1121
00:46:47,819 --> 00:46:50,520
um an oblivious star service but I think

1122
00:46:50,520 --> 00:46:52,319
what you're doing to try and get there

1123
00:46:52,319 --> 00:46:54,300
sets my teeth on edge

1124
00:46:54,300 --> 00:46:57,000
uh there's a whole bunch of stuff in in

1125
00:46:57,000 --> 00:46:59,119
your draft in the way you're using HTTP

1126
00:46:59,119 --> 00:47:01,800
uh that just kind of

1127
00:47:01,800 --> 00:47:03,000
hurts

1128
00:47:03,000 --> 00:47:07,020
um so an example of this is is 202 in

1129
00:47:07,020 --> 00:47:10,920
general for my experience is a a final

1130
00:47:10,920 --> 00:47:12,780
server's answer hey we've accepted this

1131
00:47:12,780 --> 00:47:14,579
but we haven't processed it you're using

1132
00:47:14,579 --> 00:47:15,960
it in a relay in a way that I don't

1133
00:47:15,960 --> 00:47:18,180
think actually matches what people in

1134
00:47:18,180 --> 00:47:19,800
the web world are going to necessarily

1135
00:47:19,800 --> 00:47:23,099
expect and in your description of how

1136
00:47:23,099 --> 00:47:25,440
you signal this

1137
00:47:25,440 --> 00:47:27,540
um you're using

1138
00:47:27,540 --> 00:47:30,359
you know accept headers in a way

1139
00:47:30,359 --> 00:47:33,480
um that that really are bizarre to me in

1140
00:47:33,480 --> 00:47:35,940
particular using

1141
00:47:35,940 --> 00:47:38,280
um accept headers where star dot star

1142
00:47:38,280 --> 00:47:40,740
means that you might use this just it's

1143
00:47:40,740 --> 00:47:42,300
bizarre

1144
00:47:42,300 --> 00:47:45,300
um I I think the the basic idea here

1145
00:47:45,300 --> 00:47:47,280
that you want an oblivious star service

1146
00:47:47,280 --> 00:47:50,339
well good go ahead I just don't think

1147
00:47:50,339 --> 00:47:53,460
that trying to make the oblivious

1148
00:47:53,460 --> 00:47:57,720
HTTP become the star service by throwing

1149
00:47:57,720 --> 00:47:58,800
in these

1150
00:47:58,800 --> 00:47:59,400
um

1151
00:47:59,400 --> 00:48:02,160
uh these message headers and and reusing

1152
00:48:02,160 --> 00:48:04,260
202 the the way you're doing it is is

1153
00:48:04,260 --> 00:48:06,480
fine so if you think what you want this

1154
00:48:06,480 --> 00:48:11,339
working group to consider is adding a

1155
00:48:11,339 --> 00:48:14,579
um a deliverable for for an oblivious

1156
00:48:14,579 --> 00:48:16,560
star service I think I would be behind

1157
00:48:16,560 --> 00:48:18,240
that but I wouldn't actually want to

1158
00:48:18,240 --> 00:48:20,520
start from this draft and I apologize

1159
00:48:20,520 --> 00:48:23,040
for being the occasional curmudgeon uh

1160
00:48:23,040 --> 00:48:24,859
in that response

1161
00:48:24,859 --> 00:48:27,359
I'm just going to inject myself here

1162
00:48:27,359 --> 00:48:29,819
real quick with a clarifying question

1163
00:48:29,819 --> 00:48:33,359
um could you clarify to what degree this

1164
00:48:33,359 --> 00:48:35,460
draft is specific to Star and to what

1165
00:48:35,460 --> 00:48:37,440
degree it's kind of generically

1166
00:48:37,440 --> 00:48:39,720
providing a service where there's no

1167
00:48:39,720 --> 00:48:41,220
response needed it's just a submission

1168
00:48:41,220 --> 00:48:42,359
endpoint

1169
00:48:42,359 --> 00:48:44,280
I think of it as as completely

1170
00:48:44,280 --> 00:48:46,500
orthogonal to Star I mean the way star

1171
00:48:46,500 --> 00:48:48,420
Works means that we have this particular

1172
00:48:48,420 --> 00:48:49,859
architecture where we have to submit

1173
00:48:49,859 --> 00:48:51,119
things and we don't care about writing

1174
00:48:51,119 --> 00:48:52,619
back because we're relying on the crypto

1175
00:48:52,619 --> 00:48:54,540
to make sure that's Anonymous except for

1176
00:48:54,540 --> 00:48:55,680
the IP address

1177
00:48:55,680 --> 00:48:58,200
but it seems like you wouldn't have

1178
00:48:58,200 --> 00:49:00,300
any example where you have this sort of

1179
00:49:00,300 --> 00:49:02,819
simple input thing where you want you

1180
00:49:02,819 --> 00:49:05,460
don't want to have to generate the keys

1181
00:49:05,460 --> 00:49:06,780
you don't want to have to have a key so

1182
00:49:06,780 --> 00:49:08,940
that you can just respond okay I think

1183
00:49:08,940 --> 00:49:10,560
it applies to any application like that

1184
00:49:10,560 --> 00:49:12,000
so it's not specific to Star it's not

1185
00:49:12,000 --> 00:49:13,920
even specific to Telemetry it's just

1186
00:49:13,920 --> 00:49:16,140
sort of this Edge case where

1187
00:49:16,140 --> 00:49:18,540
it seems simpler not to have to run two

1188
00:49:18,540 --> 00:49:20,760
services to talk to your target when

1189
00:49:20,760 --> 00:49:23,280
you're already having a custom endpoint

1190
00:49:23,280 --> 00:49:25,200
so that's really the use case that I

1191
00:49:25,200 --> 00:49:26,400
care about

1192
00:49:26,400 --> 00:49:28,380
okay thank you oh actually I'm sorry I

1193
00:49:28,380 --> 00:49:31,200
think Tommy is next to the cube

1194
00:49:31,200 --> 00:49:33,060
time

1195
00:49:33,060 --> 00:49:36,839
all right here we go audio is on

1196
00:49:36,839 --> 00:49:38,520
um

1197
00:49:38,520 --> 00:49:41,339
yeah I mean I I agree with Ted that the

1198
00:49:41,339 --> 00:49:45,060
spelling in the HTTP bits needs more

1199
00:49:45,060 --> 00:49:48,119
discussion however I am pretty positive

1200
00:49:48,119 --> 00:49:49,800
about this

1201
00:49:49,800 --> 00:49:53,040
I think the you know I don't want I

1202
00:49:53,040 --> 00:49:55,140
don't care about a response use case of

1203
00:49:55,140 --> 00:49:57,060
oblivious http

1204
00:49:57,060 --> 00:49:58,800
makes sense

1205
00:49:58,800 --> 00:50:01,020
um I don't personally like the use cases

1206
00:50:01,020 --> 00:50:03,599
I've had for oblivious HTTP have wanted

1207
00:50:03,599 --> 00:50:05,460
responses so far but

1208
00:50:05,460 --> 00:50:08,280
metrics collection and others can

1209
00:50:08,280 --> 00:50:09,780
definitely use this I think it is

1210
00:50:09,780 --> 00:50:11,760
applicable to more than star

1211
00:50:11,760 --> 00:50:13,619
and so I think it fits within this

1212
00:50:13,619 --> 00:50:15,060
working group

1213
00:50:15,060 --> 00:50:17,160
so I think we should adopt it I think we

1214
00:50:17,160 --> 00:50:19,560
should adopt it with this document

1215
00:50:19,560 --> 00:50:22,140
um acknowledging that

1216
00:50:22,140 --> 00:50:25,440
the details can be respelled I

1217
00:50:25,440 --> 00:50:27,720
I imagine you and Chris are not

1218
00:50:27,720 --> 00:50:30,359
particularly wed to I'm not what is the

1219
00:50:30,359 --> 00:50:32,099
way it's written at all like I just want

1220
00:50:32,099 --> 00:50:33,480
to be able to not have a key in the in

1221
00:50:33,480 --> 00:50:34,619
the Gateway

1222
00:50:34,619 --> 00:50:36,480
right and I think that's something that

1223
00:50:36,480 --> 00:50:38,339
the working group can work on together

1224
00:50:38,339 --> 00:50:42,180
and I think it is an ohdp problem and so

1225
00:50:42,180 --> 00:50:44,400
we can do it together here

1226
00:50:44,400 --> 00:50:45,780
um the one suggestion I would make is

1227
00:50:45,780 --> 00:50:50,579
maybe renaming it uh saying unreliable

1228
00:50:50,579 --> 00:50:52,200
every time I hear it I have to remember

1229
00:50:52,200 --> 00:50:53,700
what it is again

1230
00:50:53,700 --> 00:50:55,800
um so maybe something like no response

1231
00:50:55,800 --> 00:50:59,640
submission only one way ohtp something

1232
00:50:59,640 --> 00:51:02,058
like that

1233
00:51:02,640 --> 00:51:05,420
all right thanks

1234
00:51:05,880 --> 00:51:07,140
yeah

1235
00:51:07,140 --> 00:51:09,240
um I I guess I'm less positive about

1236
00:51:09,240 --> 00:51:10,200
this

1237
00:51:10,200 --> 00:51:13,260
um so I think for several reasons so uh

1238
00:51:13,260 --> 00:51:15,240
first I think like

1239
00:51:15,240 --> 00:51:17,819
like the the sort of like the motivation

1240
00:51:17,819 --> 00:51:20,339
for this of like you know I'm gonna

1241
00:51:20,339 --> 00:51:21,839
Implement like a secret sharing protocol

1242
00:51:21,839 --> 00:51:23,520
just polynomials but I'm too lazy to do

1243
00:51:23,520 --> 00:51:25,680
hpka like I just like does not motivate

1244
00:51:25,680 --> 00:51:26,760
me at all

1245
00:51:26,760 --> 00:51:28,920
um like um it's not lazy stuff it's

1246
00:51:28,920 --> 00:51:31,140
about protecting the uh but simplifying

1247
00:51:31,140 --> 00:51:32,099
the implementation so there's less

1248
00:51:32,099 --> 00:51:34,319
Security Service like the endpoint

1249
00:51:34,319 --> 00:51:36,780
that's doing the HTTP hpac is has to be

1250
00:51:36,780 --> 00:51:38,099
open to the internet whereas the thing

1251
00:51:38,099 --> 00:51:39,480
that actually does the decoding in our

1252
00:51:39,480 --> 00:51:42,480
proposal is it's not by log server yeah

1253
00:51:42,480 --> 00:51:44,160
you've heard of rushed I imagine

1254
00:51:44,160 --> 00:51:47,460
um so uh I I just I this just seems like

1255
00:51:47,460 --> 00:51:49,380
I like like

1256
00:51:49,380 --> 00:51:51,660
I'm sorry the the motivating case of

1257
00:51:51,660 --> 00:51:53,760
like you know of like this whole line of

1258
00:51:53,760 --> 00:51:56,160
operation is that is fine to expose

1259
00:51:56,160 --> 00:51:57,480
those things the internet so I like that

1260
00:51:57,480 --> 00:51:58,680
this is like a substantial security

1261
00:51:58,680 --> 00:52:00,300
Improvement I just don't buy

1262
00:52:00,300 --> 00:52:02,280
um the um

1263
00:52:02,280 --> 00:52:05,940
all right so but I mean but I think but

1264
00:52:05,940 --> 00:52:07,920
they're more like relatively like this

1265
00:52:07,920 --> 00:52:09,180
just changes the entire properties

1266
00:52:09,180 --> 00:52:10,740
lectures of this system of HTTP in

1267
00:52:10,740 --> 00:52:12,839
general where HTTP is a protocol where

1268
00:52:12,839 --> 00:52:14,220
you send a message and get a response

1269
00:52:14,220 --> 00:52:16,319
and that response says things and maybe

1270
00:52:16,319 --> 00:52:17,819
it just says thanks but it says

1271
00:52:17,819 --> 00:52:19,740
something and so to say well no I just

1272
00:52:19,740 --> 00:52:21,180
don't want the ACT that's not the way

1273
00:52:21,180 --> 00:52:24,180
designed to work and and so it's like

1274
00:52:24,180 --> 00:52:26,460
and and you can and you can see it

1275
00:52:26,460 --> 00:52:27,960
actually has a significant impact on the

1276
00:52:27,960 --> 00:52:29,280
threat model which is you taking a

1277
00:52:29,280 --> 00:52:31,319
system which had an end threat model for

1278
00:52:31,319 --> 00:52:33,300
delivery and now has it in the middle

1279
00:52:33,300 --> 00:52:36,359
front mobile for delivery and so if the

1280
00:52:36,359 --> 00:52:38,400
um you know if the if the uh if for

1281
00:52:38,400 --> 00:52:40,920
instance the proxy decides that it

1282
00:52:40,920 --> 00:52:42,420
simply wants to like gag some set of

1283
00:52:42,420 --> 00:52:44,040
clients because if we do something so

1284
00:52:44,040 --> 00:52:46,200
that's the reason two reason three is

1285
00:52:46,200 --> 00:52:49,140
that the designing a protocol that is

1286
00:52:49,140 --> 00:52:50,819
like by Design

1287
00:52:50,819 --> 00:52:52,859
um you know one way like this where the

1288
00:52:52,859 --> 00:52:54,480
client gets no feedback whatsoever when

1289
00:52:54,480 --> 00:52:56,579
something is wrong

1290
00:52:56,579 --> 00:52:58,020
um is like I understand you don't want

1291
00:52:58,020 --> 00:53:00,720
to do the VSS checking in line but like

1292
00:53:00,720 --> 00:53:02,700
format checking like lots of things can

1293
00:53:02,700 --> 00:53:04,200
go wrong and to have a design that

1294
00:53:04,200 --> 00:53:05,460
basically is like the client should kind

1295
00:53:05,460 --> 00:53:06,540
of blind these 10 things to the server

1296
00:53:06,540 --> 00:53:07,980
and not care if they cannot care if

1297
00:53:07,980 --> 00:53:09,660
they're valid like that seems like

1298
00:53:09,660 --> 00:53:11,040
fundamentally incorrect critical design

1299
00:53:11,040 --> 00:53:13,380
even if you know all these topics so I'm

1300
00:53:13,380 --> 00:53:14,460
like less positive about this workout

1301
00:53:14,460 --> 00:53:17,040
yes um I I don't think it needs more

1302
00:53:17,040 --> 00:53:19,280
break time at least

1303
00:53:19,280 --> 00:53:22,640
all right thanks

1304
00:53:25,980 --> 00:53:29,640
hi uh Ben Schwartz I think the the thing

1305
00:53:29,640 --> 00:53:32,099
that I find interesting here and and

1306
00:53:32,099 --> 00:53:35,520
compelling is really the batching

1307
00:53:35,520 --> 00:53:38,520
idea the delay in batching

1308
00:53:38,520 --> 00:53:39,420
um

1309
00:53:39,420 --> 00:53:42,300
for privacy and for efficiency reasons I

1310
00:53:42,300 --> 00:53:45,000
don't really see a security benefit and

1311
00:53:45,000 --> 00:53:47,760
it's not about the efficiency of the of

1312
00:53:47,760 --> 00:53:51,119
the Gateway or Target really they can

1313
00:53:51,119 --> 00:53:53,099
always batch and buffer on their end if

1314
00:53:53,099 --> 00:53:55,500
they want it's really about efficiency

1315
00:53:55,500 --> 00:53:58,380
and privacy provided by the relays this

1316
00:53:58,380 --> 00:54:00,660
I view as an increase in the Privacy

1317
00:54:00,660 --> 00:54:02,640
that that can be offered in oblivious

1318
00:54:02,640 --> 00:54:05,400
HTTP in some cases

1319
00:54:05,400 --> 00:54:07,980
um you know I I think that the points

1320
00:54:07,980 --> 00:54:08,880
that have been raised here are

1321
00:54:08,880 --> 00:54:11,160
definitely valid this is in a sense a

1322
00:54:11,160 --> 00:54:14,940
very deep HTTP level change

1323
00:54:14,940 --> 00:54:16,740
um and you could imagine spelling it as

1324
00:54:16,740 --> 00:54:20,579
like a header to the proxy that says uh

1325
00:54:20,579 --> 00:54:22,200
you know I don't need a response that

1326
00:54:22,200 --> 00:54:24,119
has otherwise in a sense nothing to do

1327
00:54:24,119 --> 00:54:27,900
with with the rest of oblivious http

1328
00:54:27,900 --> 00:54:30,300
um it could apply to any HTTP request

1329
00:54:30,300 --> 00:54:32,040
proxy

1330
00:54:32,040 --> 00:54:35,280
so uh but I do think that's a very

1331
00:54:35,280 --> 00:54:37,800
interesting thing to be able to specify

1332
00:54:37,800 --> 00:54:40,680
uh I think you know to some of ecker's

1333
00:54:40,680 --> 00:54:43,680
points it would also be really

1334
00:54:43,680 --> 00:54:46,200
interesting to take this in in really a

1335
00:54:46,200 --> 00:54:48,020
like high latency messaging Direction

1336
00:54:48,020 --> 00:54:50,819
where you sort of treat this as

1337
00:54:50,819 --> 00:54:54,359
um as like oblivious SMTP

1338
00:54:54,359 --> 00:54:57,540
like this is uh because this really

1339
00:54:57,540 --> 00:55:01,140
looks like a an email mixed net and in

1340
00:55:01,140 --> 00:55:02,520
that case you actually can get a

1341
00:55:02,520 --> 00:55:05,640
response it's at very high latency and

1342
00:55:05,640 --> 00:55:07,740
that high latency response can be useful

1343
00:55:07,740 --> 00:55:08,940
for things like detecting

1344
00:55:08,940 --> 00:55:11,099
misconfigurations or confirming that

1345
00:55:11,099 --> 00:55:13,680
you're not subject to a long running

1346
00:55:13,680 --> 00:55:16,040
attack

1347
00:55:19,440 --> 00:55:21,980
foreign

1348
00:55:35,900 --> 00:55:39,240
which is like besides gagging clients I

1349
00:55:39,240 --> 00:55:41,880
wondered if this gives a method for the

1350
00:55:41,880 --> 00:55:43,920
Relay to identify clients by batching in

1351
00:55:43,920 --> 00:55:45,480
certain ways to indicate properties

1352
00:55:45,480 --> 00:55:48,180
about the clients or you know there's

1353
00:55:48,180 --> 00:55:49,920
funky things I think you could do and I

1354
00:55:49,920 --> 00:55:51,300
I don't know that's like an addition to

1355
00:55:51,300 --> 00:55:52,380
the threat model here that's something

1356
00:55:52,380 --> 00:55:53,880
to consider

1357
00:55:53,880 --> 00:55:56,300
thanks

1358
00:55:56,760 --> 00:55:59,240
great

1359
00:56:01,579 --> 00:56:06,480
David scanazi HTTP Enthusiast I'm

1360
00:56:06,480 --> 00:56:08,220
find myself agreeing with a lot of

1361
00:56:08,220 --> 00:56:10,440
people including people who are strongly

1362
00:56:10,440 --> 00:56:12,780
disagreeing here so

1363
00:56:12,780 --> 00:56:15,059
um on one hand I I see why this is

1364
00:56:15,059 --> 00:56:17,400
useful I can kind of uh buy that like in

1365
00:56:17,400 --> 00:56:18,960
some submission case you want to

1366
00:56:18,960 --> 00:56:22,380
simplify things but I also see that like

1367
00:56:22,380 --> 00:56:25,319
uh when this goes in front of as you

1368
00:56:25,319 --> 00:56:26,940
know it would because it the way an

1369
00:56:26,940 --> 00:56:29,099
impacts HTTP semantics we would tell the

1370
00:56:29,099 --> 00:56:31,920
HTTP about them and they would like

1371
00:56:31,920 --> 00:56:35,760
probably pass out uh how do we uh square

1372
00:56:35,760 --> 00:56:38,640
that and I was thinking about it

1373
00:56:38,640 --> 00:56:41,339
uh so you have two benefits from doing

1374
00:56:41,339 --> 00:56:43,800
this one is that the client can far and

1375
00:56:43,800 --> 00:56:47,579
forget quicker and the other is the uh

1376
00:56:47,579 --> 00:56:49,559
less cryptography on the uh an

1377
00:56:49,559 --> 00:56:53,280
encryption on the uh gate weight if I'm

1378
00:56:53,280 --> 00:56:55,500
getting the terminology right which one

1379
00:56:55,500 --> 00:56:57,359
of those do you care about is it both or

1380
00:56:57,359 --> 00:56:59,960
a single one

1381
00:57:00,300 --> 00:57:02,880
my motivation was mostly the Gateway I

1382
00:57:02,880 --> 00:57:05,300
mean the client okay

1383
00:57:05,300 --> 00:57:08,579
in my case yeah all right no no that

1384
00:57:08,579 --> 00:57:10,200
makes sense in that case would it make

1385
00:57:10,200 --> 00:57:13,099
sense for you to keep HTTP the way it is

1386
00:57:13,099 --> 00:57:16,500
and just send an empty response

1387
00:57:16,500 --> 00:57:18,540
uh because like you know HTTP we already

1388
00:57:18,540 --> 00:57:21,660
have a flow for errors where you can say

1389
00:57:21,660 --> 00:57:22,859
like no I'm not going to give you an

1390
00:57:22,859 --> 00:57:24,240
encrypted response because like I've

1391
00:57:24,240 --> 00:57:26,520
forgotten the keys or something and you

1392
00:57:26,520 --> 00:57:28,920
could add a response that is like yup

1393
00:57:28,920 --> 00:57:31,380
A-Okay I'm just not sending you a

1394
00:57:31,380 --> 00:57:34,200
response so the and then that triggers

1395
00:57:34,200 --> 00:57:37,680
the relay to say oh A-Okay back to the

1396
00:57:37,680 --> 00:57:39,960
client the same way where today if it

1397
00:57:39,960 --> 00:57:43,500
sends an error the uh the the relay

1398
00:57:43,500 --> 00:57:45,180
sends that error back to the client so

1399
00:57:45,180 --> 00:57:48,000
that I think addresses ecker's concerns

1400
00:57:48,000 --> 00:57:50,339
that uh like there's no longer a

1401
00:57:50,339 --> 00:57:51,839
response you don't have any way of

1402
00:57:51,839 --> 00:57:53,640
hearing errors back because I think

1403
00:57:53,640 --> 00:57:56,220
that's a real concern but it solves your

1404
00:57:56,220 --> 00:57:58,380
cryptographic problem so that might be a

1405
00:57:58,380 --> 00:57:59,880
way just a thought

1406
00:57:59,880 --> 00:58:01,680
okay I think that's what I'm trying to

1407
00:58:01,680 --> 00:58:03,359
do but unless I'm misunderstood I don't

1408
00:58:03,359 --> 00:58:04,859
think that address is ecker's concerned

1409
00:58:04,859 --> 00:58:07,319
because it breaks the tunnel between the

1410
00:58:07,319 --> 00:58:08,819
encrypted tunnel between the client and

1411
00:58:08,819 --> 00:58:10,800
the Gateway

1412
00:58:10,800 --> 00:58:12,660
because the Relay can see that you've

1413
00:58:12,660 --> 00:58:14,520
returned an empty response

1414
00:58:14,520 --> 00:58:16,920
as opposed to incurring in returning an

1415
00:58:16,920 --> 00:58:19,079
encrypted blob which represents the

1416
00:58:19,079 --> 00:58:20,700
empty response

1417
00:58:20,700 --> 00:58:24,078
yep that makes sense thank you

1418
00:58:27,020 --> 00:58:32,160
again uh I apologize for for getting up

1419
00:58:32,160 --> 00:58:34,740
to to kind of restate something but I

1420
00:58:34,740 --> 00:58:36,720
think I want to pull on something that

1421
00:58:36,720 --> 00:58:38,640
was set up in the chat room and connect

1422
00:58:38,640 --> 00:58:40,380
it to something that that Eckert said

1423
00:58:40,380 --> 00:58:42,660
it's like if there is a use case for

1424
00:58:42,660 --> 00:58:45,839
this that doesn't require the oblivious

1425
00:58:45,839 --> 00:58:47,880
property

1426
00:58:47,880 --> 00:58:49,680
um then the clear thing to do with this

1427
00:58:49,680 --> 00:58:53,160
document is to take it to http and work

1428
00:58:53,160 --> 00:58:55,200
through the HTTP process to to figure

1429
00:58:55,200 --> 00:58:56,339
out whether there are new methods

1430
00:58:56,339 --> 00:58:59,280
involved new response codes involved Etc

1431
00:58:59,280 --> 00:59:02,700
that's if if that is true this is the

1432
00:59:02,700 --> 00:59:05,220
wrong working group for it because

1433
00:59:05,220 --> 00:59:09,119
that's where we do core changes to http

1434
00:59:09,119 --> 00:59:12,720
if there isn't a use case for this

1435
00:59:12,720 --> 00:59:14,880
submission service that doesn't require

1436
00:59:14,880 --> 00:59:18,240
the oblivious property then I think you

1437
00:59:18,240 --> 00:59:21,660
have to do a much clearer job about

1438
00:59:21,660 --> 00:59:24,420
describing what it is about the

1439
00:59:24,420 --> 00:59:26,579
oblivious property and the submission

1440
00:59:26,579 --> 00:59:29,000
property that have to be tied together

1441
00:59:29,000 --> 00:59:32,220
in some way that's better than the

1442
00:59:32,220 --> 00:59:34,619
threat model change uh that I see in the

1443
00:59:34,619 --> 00:59:37,440
document now I I honestly don't get that

1444
00:59:37,440 --> 00:59:40,020
personally and it may be just because I

1445
00:59:40,020 --> 00:59:41,940
didn't read deeply enough into the

1446
00:59:41,940 --> 00:59:43,500
interconnection you're making with with

1447
00:59:43,500 --> 00:59:46,440
your use case but the document I don't

1448
00:59:46,440 --> 00:59:48,900
think carries that out of why if this is

1449
00:59:48,900 --> 00:59:51,240
a submission service it must be

1450
00:59:51,240 --> 00:59:54,900
oblivious to be a success and if that

1451
00:59:54,900 --> 00:59:56,880
isn't the case then this is the wrong

1452
00:59:56,880 --> 00:59:58,319
word

1453
00:59:58,319 --> 01:00:01,940
oh I'm out of order I guess

1454
01:00:02,400 --> 01:00:05,400
oh

1455
01:00:07,980 --> 01:00:10,260
um cool I think to move on uh Ben did

1456
01:00:10,260 --> 01:00:15,380
you want to present thanks Ralph okay

1457
01:00:15,960 --> 01:00:18,359
uh causing that rough it sounds like the

1458
01:00:18,359 --> 01:00:20,520
feedback here is that you know there's

1459
01:00:20,520 --> 01:00:22,440
there's some folks who are um in tune

1460
01:00:22,440 --> 01:00:24,059
with the use case but it sounds like we

1461
01:00:24,059 --> 01:00:26,220
need to drill in a bit on the how we

1462
01:00:26,220 --> 01:00:29,099
measure the HTTP semantics and kind of

1463
01:00:29,099 --> 01:00:30,420
how we make things fit together nicely

1464
01:00:30,420 --> 01:00:32,359
so thanks for the presentation

1465
01:00:32,359 --> 01:00:35,420
thank you

1466
01:00:47,940 --> 01:00:50,339
okay

1467
01:00:50,339 --> 01:00:53,180
double check

1468
01:00:55,020 --> 01:00:59,220
so this uh I presented about this idea

1469
01:00:59,220 --> 01:01:02,700
at the last ITF meeting

1470
01:01:02,700 --> 01:01:06,720
um and since then this draft has had a I

1471
01:01:06,720 --> 01:01:09,599
I've made a lot of changes to the flavor

1472
01:01:09,599 --> 01:01:13,020
text and basically no changes to the

1473
01:01:13,020 --> 01:01:15,780
actual technical content but a lot of

1474
01:01:15,780 --> 01:01:18,780
the normative language has shifted

1475
01:01:18,780 --> 01:01:20,640
um definitely people seem to think that

1476
01:01:20,640 --> 01:01:22,500
it was too normative

1477
01:01:22,500 --> 01:01:24,720
uh and it seems like people still think

1478
01:01:24,720 --> 01:01:27,599
it's too normative but um so the the

1479
01:01:27,599 --> 01:01:29,400
technical proposal has not changed the

1480
01:01:29,400 --> 01:01:31,319
biggest difference I would say

1481
01:01:31,319 --> 01:01:33,359
is

1482
01:01:33,359 --> 01:01:35,760
that I've tried to generalize the

1483
01:01:35,760 --> 01:01:39,540
description to also talk about

1484
01:01:39,540 --> 01:01:42,000
how this idea applies in the Privacy

1485
01:01:42,000 --> 01:01:45,500
pass context and it seems like probably

1486
01:01:45,500 --> 01:01:49,500
uh in the future this draft will will

1487
01:01:49,500 --> 01:01:52,619
move to privacy pass if there's interest

1488
01:01:52,619 --> 01:01:56,000
in continuing to discuss it at all

1489
01:01:56,000 --> 01:01:59,339
and uh and so that you know fair warning

1490
01:01:59,339 --> 01:02:00,780
if this is a topic that interests you

1491
01:02:00,780 --> 01:02:02,520
you might want to start coming to

1492
01:02:02,520 --> 01:02:05,599
privacy pass sessions

1493
01:02:07,980 --> 01:02:10,380
so just as a reminder there's Now new

1494
01:02:10,380 --> 01:02:12,660
terminologies that I've changed the

1495
01:02:12,660 --> 01:02:13,920
terminology compared to the previous

1496
01:02:13,920 --> 01:02:16,799
draft but this is the same idea there's

1497
01:02:16,799 --> 01:02:18,900
a client there's a proxy and there's an

1498
01:02:18,900 --> 01:02:21,599
origin that holds some desired HTTP

1499
01:02:21,599 --> 01:02:23,400
resource it could be any kind of

1500
01:02:23,400 --> 01:02:25,680
resource and our goal is to fetch that

1501
01:02:25,680 --> 01:02:28,980
resource in a way that guarantees both

1502
01:02:28,980 --> 01:02:31,680
consistency and authenticity consistency

1503
01:02:31,680 --> 01:02:33,420
meaning everybody sees the same version

1504
01:02:33,420 --> 01:02:35,780
of the

1505
01:02:37,140 --> 01:02:40,500
who wanted to send

1506
01:02:40,500 --> 01:02:43,020
uh I think I probably just lost my

1507
01:02:43,020 --> 01:02:44,400
connection to meet Echo I'm going to

1508
01:02:44,400 --> 01:02:46,680
reboot

1509
01:02:46,680 --> 01:02:51,379
you're fine now oh no

1510
01:03:00,720 --> 01:03:03,540
sorry about that I I've had an unstable

1511
01:03:03,540 --> 01:03:06,020
connection to meet Echo

1512
01:03:06,020 --> 01:03:07,559
hmm

1513
01:03:07,559 --> 01:03:08,880
so that

1514
01:03:08,880 --> 01:03:13,500
the key idea here really is uh that if

1515
01:03:13,500 --> 01:03:16,740
you need key consistency you probably

1516
01:03:16,740 --> 01:03:19,680
also already have a proxy and you

1517
01:03:19,680 --> 01:03:22,619
probably already trust that proxy not to

1518
01:03:22,619 --> 01:03:25,920
reveal your identity to the the

1519
01:03:25,920 --> 01:03:27,839
destination where you're trying to use

1520
01:03:27,839 --> 01:03:29,880
this key consistency because otherwise

1521
01:03:29,880 --> 01:03:32,520
your IP address will give you away to

1522
01:03:32,520 --> 01:03:38,099
that destination and uh and so the key

1523
01:03:38,099 --> 01:03:40,200
consistency won't be sufficient to help

1524
01:03:40,200 --> 01:03:42,599
you protect your privacy and avoid

1525
01:03:42,599 --> 01:03:43,859
becoming linkable

1526
01:03:43,859 --> 01:03:46,260
so if we're sort of willing to make that

1527
01:03:46,260 --> 01:03:48,540
assumption or narrow our use cases to

1528
01:03:48,540 --> 01:03:51,299
cases where that assumption applies

1529
01:03:51,299 --> 01:03:54,660
then uh the whole problem becomes a lot

1530
01:03:54,660 --> 01:03:57,480
easier the key consistency problem you

1531
01:03:57,480 --> 01:03:59,400
only need key consistency among the

1532
01:03:59,400 --> 01:04:02,160
other users of this proxy because you're

1533
01:04:02,160 --> 01:04:04,319
distinguishable by essentially the

1534
01:04:04,319 --> 01:04:07,380
proxies exit IP from users of other

1535
01:04:07,380 --> 01:04:09,740
proxies so

1536
01:04:09,740 --> 01:04:12,240
that narrows the problem enough that you

1537
01:04:12,240 --> 01:04:14,579
can actually solve it using plain HTTP

1538
01:04:14,579 --> 01:04:16,079
caching rules and we don't need to

1539
01:04:16,079 --> 01:04:19,980
invent any new logic when we apply the

1540
01:04:19,980 --> 01:04:22,559
HTTP caching rules in a very specific

1541
01:04:22,559 --> 01:04:26,099
way which is one of the intriguing

1542
01:04:26,099 --> 01:04:29,000
things about this design

1543
01:04:29,400 --> 01:04:31,799
um I'll just note that the design the

1544
01:04:31,799 --> 01:04:33,839
draft has a bunch of language in it

1545
01:04:33,839 --> 01:04:36,180
about how to avoid different kinds of

1546
01:04:36,180 --> 01:04:37,500
leakage there are a lot of different

1547
01:04:37,500 --> 01:04:39,960
ways that you can leak and and I think

1548
01:04:39,960 --> 01:04:42,000
these these ways are not trivial they're

1549
01:04:42,000 --> 01:04:43,859
not it's not obvious how this leakage

1550
01:04:43,859 --> 01:04:44,819
happens so I think it's worth

1551
01:04:44,819 --> 01:04:47,460
documenting but uh Martin on the mailing

1552
01:04:47,460 --> 01:04:49,020
list pointed out that this normative

1553
01:04:49,020 --> 01:04:52,500
guidance is not actually necessary for

1554
01:04:52,500 --> 01:04:55,740
the protocol to work so we'll have to

1555
01:04:55,740 --> 01:04:58,260
figure out some way to

1556
01:04:58,260 --> 01:05:00,059
um put up warnings of the appropriate

1557
01:05:00,059 --> 01:05:02,040
kind without necessarily invoking

1558
01:05:02,040 --> 01:05:03,420
normative language

1559
01:05:03,420 --> 01:05:05,160
but the real thing that I want to

1560
01:05:05,160 --> 01:05:07,260
present to the working group is this

1561
01:05:07,260 --> 01:05:09,299
question is this actually how we want to

1562
01:05:09,299 --> 01:05:11,160
do it because

1563
01:05:11,160 --> 01:05:14,400
the remember this is not an abstract

1564
01:05:14,400 --> 01:05:17,220
design about like here about key

1565
01:05:17,220 --> 01:05:18,839
consistency this is a very specific

1566
01:05:18,839 --> 01:05:21,780
protocol and there are a lot of

1567
01:05:21,780 --> 01:05:23,160
different ways that you could build a

1568
01:05:23,160 --> 01:05:25,980
protocol like this and they have quite

1569
01:05:25,980 --> 01:05:27,780
different properties

1570
01:05:27,780 --> 01:05:31,140
so I want to mention two things that are

1571
01:05:31,140 --> 01:05:33,020
not what's in the draft

1572
01:05:33,020 --> 01:05:35,280
one would be

1573
01:05:35,280 --> 01:05:39,299
to employ bespoke consistency logic

1574
01:05:39,299 --> 01:05:43,740
at the proxy slash relay point

1575
01:05:43,740 --> 01:05:46,799
this The Trusted proxy intermediary that

1576
01:05:46,799 --> 01:05:48,660
is uh that we're trusting to help us

1577
01:05:48,660 --> 01:05:50,599
protect our privacy

1578
01:05:50,599 --> 01:05:52,940
right now the draft

1579
01:05:52,940 --> 01:05:55,200
essentially applies some some very

1580
01:05:55,200 --> 01:05:57,900
subtle and specific interpretations of

1581
01:05:57,900 --> 01:06:00,180
some existing HTTP Concepts like if

1582
01:06:00,180 --> 01:06:02,579
match and immutable and if you just

1583
01:06:02,579 --> 01:06:04,980
while the those interpretations are are

1584
01:06:04,980 --> 01:06:07,260
essentially within the standards they're

1585
01:06:07,260 --> 01:06:10,200
not necessarily the default reading of

1586
01:06:10,200 --> 01:06:13,799
those standards and so this is a little

1587
01:06:13,799 --> 01:06:16,680
bit of a sharp edge right we we're

1588
01:06:16,680 --> 01:06:18,780
claiming that you can reuse effectively

1589
01:06:18,780 --> 01:06:20,280
I'm I'm claiming to you that we can

1590
01:06:20,280 --> 01:06:22,920
reuse existing HTTP Machinery but

1591
01:06:22,920 --> 01:06:25,140
actually only if you configure it in a

1592
01:06:25,140 --> 01:06:27,299
very specific way and the other problem

1593
01:06:27,299 --> 01:06:31,260
is that because HTTP resource caching

1594
01:06:31,260 --> 01:06:33,720
doesn't have any built-in concept of

1595
01:06:33,720 --> 01:06:36,960
multiple versions of a resource like one

1596
01:06:36,960 --> 01:06:39,480
that's about to expire and one that sort

1597
01:06:39,480 --> 01:06:41,700
of is already also valid and then the

1598
01:06:41,700 --> 01:06:43,920
Cache can hold both of them and make

1599
01:06:43,920 --> 01:06:45,960
sure that the clients are gradually

1600
01:06:45,960 --> 01:06:48,180
updated from one to the other before the

1601
01:06:48,180 --> 01:06:50,220
old one expires as far as I can tell you

1602
01:06:50,220 --> 01:06:53,280
can't do that just using HTTP caching

1603
01:06:53,280 --> 01:06:55,980
logic and so because of that this design

1604
01:06:55,980 --> 01:06:59,099
has a Thundering Herd effect where all

1605
01:06:59,099 --> 01:07:00,720
clients have a single version of the

1606
01:07:00,720 --> 01:07:02,220
resource and if the resource ever

1607
01:07:02,220 --> 01:07:04,380
changes all clients need to flip

1608
01:07:04,380 --> 01:07:06,480
essentially simultaneously to the new

1609
01:07:06,480 --> 01:07:08,480
version and so you could get load spikes

1610
01:07:08,480 --> 01:07:11,520
at times when that happens maybe

1611
01:07:11,520 --> 01:07:14,160
obviously I have not implemented this

1612
01:07:14,160 --> 01:07:16,140
and another question is do we really

1613
01:07:16,140 --> 01:07:17,640
want this double check or do we just

1614
01:07:17,640 --> 01:07:19,920
want to sign the object because if we

1615
01:07:19,920 --> 01:07:21,960
just sign the thing like in the ohttp

1616
01:07:21,960 --> 01:07:24,599
context if we sign the key config with

1617
01:07:24,599 --> 01:07:27,839
uh with essentially the certificate

1618
01:07:27,839 --> 01:07:31,260
chain of the of the origin

1619
01:07:31,260 --> 01:07:36,000
then of the Gateway origin then

1620
01:07:36,000 --> 01:07:38,099
we don't need this double check we only

1621
01:07:38,099 --> 01:07:40,140
have to fetch once and and everything

1622
01:07:40,140 --> 01:07:41,579
becomes

1623
01:07:41,579 --> 01:07:44,520
well that the network the flow diagram

1624
01:07:44,520 --> 01:07:46,980
becomes a lot simpler but the setup

1625
01:07:46,980 --> 01:07:48,539
becomes a lot more complicated now I

1626
01:07:48,539 --> 01:07:50,760
need to build some kind of signing

1627
01:07:50,760 --> 01:07:52,680
system and you know handle key rotations

1628
01:07:52,680 --> 01:07:55,020
resign my object before my certificates

1629
01:07:55,020 --> 01:07:56,520
expire

1630
01:07:56,520 --> 01:07:58,920
so so this is my big question really

1631
01:07:58,920 --> 01:08:02,299
like how do we want to do this

1632
01:08:11,280 --> 01:08:13,200
all right so Ben is that uh time for

1633
01:08:13,200 --> 01:08:15,660
discussion yeah

1634
01:08:15,660 --> 01:08:18,020
all right

1635
01:08:18,020 --> 01:08:21,660
I have a suggestion on how we approach

1636
01:08:21,660 --> 01:08:23,580
both of these questions and that is that

1637
01:08:23,580 --> 01:08:25,259
we ask the Privacy pass working group to

1638
01:08:25,259 --> 01:08:26,600
take them on

1639
01:08:26,600 --> 01:08:28,560
this um

1640
01:08:28,560 --> 01:08:30,839
this this sort of line between these two

1641
01:08:30,839 --> 01:08:33,060
groups has been sort of a little fuzzy

1642
01:08:33,060 --> 01:08:35,339
on this consistency question and we

1643
01:08:35,339 --> 01:08:38,160
decided to adopt the key consistency and

1644
01:08:38,160 --> 01:08:40,799
uh correctness uh draft in that working

1645
01:08:40,799 --> 01:08:44,279
group and it seems to me like that's a

1646
01:08:44,279 --> 01:08:45,479
good place to

1647
01:08:45,479 --> 01:08:48,540
to have that discussion where the sort

1648
01:08:48,540 --> 01:08:49,979
of architectural questions about how we

1649
01:08:49,979 --> 01:08:51,600
do consistency and the requirements and

1650
01:08:51,600 --> 01:08:52,799
what what have you and the general

1651
01:08:52,799 --> 01:08:55,620
approaches I discussed there along with

1652
01:08:55,620 --> 01:08:58,799
this as a fairly concrete instantiation

1653
01:08:58,799 --> 01:09:01,198
of these things

1654
01:09:01,198 --> 01:09:02,880
I'm not sure what you mean by the first

1655
01:09:02,880 --> 01:09:04,979
alternative here in terms of concrete

1656
01:09:04,979 --> 01:09:07,799
specific steps and so I'm a little leery

1657
01:09:07,799 --> 01:09:10,620
of saying let's just take existing specs

1658
01:09:10,620 --> 01:09:11,880
and then reinterpret them very

1659
01:09:11,880 --> 01:09:13,500
creatively that's

1660
01:09:13,500 --> 01:09:15,020
risky

1661
01:09:15,020 --> 01:09:17,520
and I'm certain that I don't like the

1662
01:09:17,520 --> 01:09:20,219
second one because uh the signing thing

1663
01:09:20,219 --> 01:09:23,819
it is much harder to reason about and I

1664
01:09:23,819 --> 01:09:25,319
prefer to avoid that sort of thing I

1665
01:09:25,319 --> 01:09:27,238
think two requests is

1666
01:09:27,238 --> 01:09:29,279
for the for this sort of thing perfectly

1667
01:09:29,279 --> 01:09:30,600
tolerable

1668
01:09:30,600 --> 01:09:33,140
okay

1669
01:09:38,640 --> 01:09:41,660
Tommy hello

1670
01:09:41,880 --> 01:09:44,819
um yeah so overall I like the approach

1671
01:09:44,819 --> 01:09:46,439
of doing a get and something through a

1672
01:09:46,439 --> 01:09:48,060
forward proxy

1673
01:09:48,060 --> 01:09:49,319
um

1674
01:09:49,319 --> 01:09:52,080
and that part I I like that it doesn't

1675
01:09:52,080 --> 01:09:53,819
require any new

1676
01:09:53,819 --> 01:09:56,100
protocols being designed or applied like

1677
01:09:56,100 --> 01:09:59,340
it is merely a technique that a client

1678
01:09:59,340 --> 01:10:01,860
can apply if it has

1679
01:10:01,860 --> 01:10:04,340
proxies available to it

1680
01:10:04,340 --> 01:10:06,960
I think specifically for the document

1681
01:10:06,960 --> 01:10:08,640
all of the dependencies on the access

1682
01:10:08,640 --> 01:10:10,920
service descriptions and other stuff

1683
01:10:10,920 --> 01:10:12,840
I think that should just

1684
01:10:12,840 --> 01:10:15,900
go away like that that's fine if that

1685
01:10:15,900 --> 01:10:17,400
ends up existing but I don't think

1686
01:10:17,400 --> 01:10:19,140
that's fundamental

1687
01:10:19,140 --> 01:10:22,920
to this yeah I have removed that uh

1688
01:10:22,920 --> 01:10:25,380
those are those are now they are I've

1689
01:10:25,380 --> 01:10:27,840
still structured the examples that way

1690
01:10:27,840 --> 01:10:31,199
um but there's no there's no longer any

1691
01:10:31,199 --> 01:10:33,000
normative dependency on that got it okay

1692
01:10:33,000 --> 01:10:34,199
I was

1693
01:10:34,199 --> 01:10:36,120
I guess I was looking at the most recent

1694
01:10:36,120 --> 01:10:38,699
version and

1695
01:10:38,699 --> 01:10:40,760
it is I guess yes

1696
01:10:40,760 --> 01:10:43,679
examples as like kind of like a

1697
01:10:43,679 --> 01:10:46,500
unadopted thing like it's a bit

1698
01:10:46,500 --> 01:10:47,820
distracting

1699
01:10:47,820 --> 01:10:50,100
um okay

1700
01:10:50,100 --> 01:10:51,179
um

1701
01:10:51,179 --> 01:10:53,400
so I agree with Martin that we should

1702
01:10:53,400 --> 01:10:55,320
talk about this in privacy pass uh now

1703
01:10:55,320 --> 01:10:57,239
that we have key consistency adopted

1704
01:10:57,239 --> 01:10:58,020
there

1705
01:10:58,020 --> 01:11:00,960
I personally think also like that all of

1706
01:11:00,960 --> 01:11:03,480
this can probably go into that document

1707
01:11:03,480 --> 01:11:06,480
if it is just about technique applying

1708
01:11:06,480 --> 01:11:09,540
and not new protocol work

1709
01:11:09,540 --> 01:11:10,260
um

1710
01:11:10,260 --> 01:11:12,719
and then the question I had for you just

1711
01:11:12,719 --> 01:11:16,320
about the caching bits

1712
01:11:16,320 --> 01:11:20,040
what happens if the caching headers you

1713
01:11:20,040 --> 01:11:21,900
get back are not what you are

1714
01:11:21,900 --> 01:11:23,940
normatively requiring in your document

1715
01:11:23,940 --> 01:11:26,280
but the values of the keys still match

1716
01:11:26,280 --> 01:11:28,340
via my double check

1717
01:11:28,340 --> 01:11:31,199
what's the failure mode there

1718
01:11:31,199 --> 01:11:33,920
so the the client is supposed to

1719
01:11:33,920 --> 01:11:36,719
essentially reject right this means that

1720
01:11:36,719 --> 01:11:39,320
the origins

1721
01:11:40,040 --> 01:11:44,159
the attack is uh so if if you don't have

1722
01:11:44,159 --> 01:11:46,699
cash control immutable for example

1723
01:11:46,699 --> 01:11:52,260
then the server can send you uh can can

1724
01:11:52,260 --> 01:11:55,260
reply to the sorry the the Gateway can

1725
01:11:55,260 --> 01:11:57,659
rep or the you know HTTP terms the

1726
01:11:57,659 --> 01:12:02,219
Gateway can reply to the relay with a

1727
01:12:02,219 --> 01:12:05,340
um with a key config with some long

1728
01:12:05,340 --> 01:12:06,420
lifetime

1729
01:12:06,420 --> 01:12:08,699
you know a week

1730
01:12:08,699 --> 01:12:11,100
um and that can go to the client and

1731
01:12:11,100 --> 01:12:14,940
then the the Gateway acting as a

1732
01:12:14,940 --> 01:12:18,120
different client can can send another

1733
01:12:18,120 --> 01:12:20,760
HTTP request to the relay that causes it

1734
01:12:20,760 --> 01:12:23,100
to flush that cache entry and replace it

1735
01:12:23,100 --> 01:12:25,860
with a new key config so now the next

1736
01:12:25,860 --> 01:12:27,840
client gets an its own you know

1737
01:12:27,840 --> 01:12:29,880
different key config that also has a

1738
01:12:29,880 --> 01:12:31,980
cache lifetime of week now both clients

1739
01:12:31,980 --> 01:12:35,460
have long-lived distinct key configs

1740
01:12:35,460 --> 01:12:40,340
so and the

1741
01:12:40,739 --> 01:12:42,780
and the requests that go over like the

1742
01:12:42,780 --> 01:12:44,699
forward proxy

1743
01:12:44,699 --> 01:12:45,719
uh

1744
01:12:45,719 --> 01:12:47,940
the relay server manages the timing

1745
01:12:47,940 --> 01:12:51,060
perfectly so that it gives out the same

1746
01:12:51,060 --> 01:12:55,040
evil config to the same client

1747
01:12:55,679 --> 01:12:57,060
uh

1748
01:12:57,060 --> 01:12:59,159
uh so the the client keeps it cached

1749
01:12:59,159 --> 01:13:01,560
locally for a long time

1750
01:13:01,560 --> 01:13:03,780
um it doesn't need to

1751
01:13:03,780 --> 01:13:06,000
the relays but the point of double check

1752
01:13:06,000 --> 01:13:07,500
is that I'm checking that I get the same

1753
01:13:07,500 --> 01:13:10,260
key via two different methods that are

1754
01:13:10,260 --> 01:13:12,600
presumably unlinkable and so if you're

1755
01:13:12,600 --> 01:13:17,159
feeding so for the ease

1756
01:13:17,159 --> 01:13:20,159
right so then so client a and client B

1757
01:13:20,159 --> 01:13:21,719
have different key configs

1758
01:13:21,719 --> 01:13:25,140
um they send get requests um directly to

1759
01:13:25,140 --> 01:13:28,140
the uh to the Gateway origin

1760
01:13:28,140 --> 01:13:30,420
with if match header with an if match

1761
01:13:30,420 --> 01:13:33,179
header saying here's the basically the

1762
01:13:33,179 --> 01:13:35,340
version of the key config that I want is

1763
01:13:35,340 --> 01:13:39,060
this one valid and and they get it back

1764
01:13:39,060 --> 01:13:40,800
again and the reason for that if match

1765
01:13:40,800 --> 01:13:42,480
header is that the Gateway needs to be

1766
01:13:42,480 --> 01:13:45,480
able to rotate the key config and it

1767
01:13:45,480 --> 01:13:48,179
doesn't know a priori whether a given

1768
01:13:48,179 --> 01:13:50,880
client has the old one or the new one

1769
01:13:50,880 --> 01:13:52,280
so

1770
01:13:52,280 --> 01:13:55,739
uh so it can't just always serve the new

1771
01:13:55,739 --> 01:13:58,679
one or the or the it sounds like maybe

1772
01:13:58,679 --> 01:14:00,140
we're

1773
01:14:00,140 --> 01:14:02,699
that part of this match is causing us to

1774
01:14:02,699 --> 01:14:04,440
trip on ourselves a bit and maybe there

1775
01:14:04,440 --> 01:14:05,940
are other approaches to handling key

1776
01:14:05,940 --> 01:14:09,860
rotation anyway we can discuss more

1777
01:14:10,679 --> 01:14:13,800
thanks Becker so I found realistic

1778
01:14:13,800 --> 01:14:15,900
caveats quite concerning

1779
01:14:15,900 --> 01:14:16,800
um

1780
01:14:16,800 --> 01:14:18,540
um like and I'm quite concerned that

1781
01:14:18,540 --> 01:14:20,580
like perhaps AGP caches not behave the

1782
01:14:20,580 --> 01:14:22,260
way what everyone hopes they behave

1783
01:14:22,260 --> 01:14:24,600
um and they won't be very sad people

1784
01:14:24,600 --> 01:14:25,500
um

1785
01:14:25,500 --> 01:14:27,179
um so I think like by the way to try to

1786
01:14:27,179 --> 01:14:28,320
tease a couple things apart which is

1787
01:14:28,320 --> 01:14:30,719
detection from uh in particular

1788
01:14:30,719 --> 01:14:34,679
detection from enforcement right so like

1789
01:14:34,679 --> 01:14:36,239
if we just went back to the dumb design

1790
01:14:36,239 --> 01:14:38,340
right and forget about caching you say

1791
01:14:38,340 --> 01:14:40,199
look I just query directly and like

1792
01:14:40,199 --> 01:14:41,400
we're through a proxy and the IP

1793
01:14:41,400 --> 01:14:43,500
addresses are different and now you're

1794
01:14:43,500 --> 01:14:45,000
not timing attacks I suppose this is why

1795
01:14:45,000 --> 01:14:46,620
is why you don't want to do that right

1796
01:14:46,620 --> 01:14:48,000
um that's how we get to this this design

1797
01:14:48,000 --> 01:14:49,560
right

1798
01:14:49,560 --> 01:14:52,260
uh

1799
01:14:52,260 --> 01:14:55,679
yes locations different IP addresses and

1800
01:14:55,679 --> 01:14:58,940
check the match right

1801
01:14:59,460 --> 01:15:01,320
yes you also like I said need to worry

1802
01:15:01,320 --> 01:15:04,620
about uh how to handle cases where the

1803
01:15:04,620 --> 01:15:06,960
key config has actually changed but

1804
01:15:06,960 --> 01:15:10,980
sure okay so I can imagine it's all that

1805
01:15:10,980 --> 01:15:13,140
like you know um forcing the server to

1806
01:15:13,140 --> 01:15:14,400
get a list of every key it's ever used

1807
01:15:14,400 --> 01:15:16,260
and and that kind of thing right um you

1808
01:15:16,260 --> 01:15:17,640
know you haven't maintain our block a

1809
01:15:17,640 --> 01:15:19,260
blockchain basically of you know a hash

1810
01:15:19,260 --> 01:15:20,940
Channel lookies

1811
01:15:20,940 --> 01:15:22,560
um so

1812
01:15:22,560 --> 01:15:24,179
um I guess this gets me to my second

1813
01:15:24,179 --> 01:15:25,800
point which is

1814
01:15:25,800 --> 01:15:29,280
um that say that we have mismatch what

1815
01:15:29,280 --> 01:15:31,519
then

1816
01:15:32,340 --> 01:15:33,780
and

1817
01:15:33,780 --> 01:15:36,239
um and the natural Thursday is okay well

1818
01:15:36,239 --> 01:15:38,159
I'm like culinary times

1819
01:15:38,159 --> 01:15:40,080
um and but like

1820
01:15:40,080 --> 01:15:43,080
I don't want to be right and so I think

1821
01:15:43,080 --> 01:15:44,460
you actually need the key to be signed

1822
01:15:44,460 --> 01:15:46,800
by by the DVD certificate anyway and the

1823
01:15:46,800 --> 01:15:48,900
reason is simply that that's the only

1824
01:15:48,900 --> 01:15:50,040
way you can demonstrate that you can

1825
01:15:50,040 --> 01:15:52,380
Target someone's reputation in this base

1826
01:15:52,380 --> 01:15:54,540
and so like if you think of the logic of

1827
01:15:54,540 --> 01:15:57,540
CT right logic is a t CT is is that the

1828
01:15:57,540 --> 01:15:59,280
certificates are all signed and there's

1829
01:15:59,280 --> 01:16:02,820
an assurance by the um by the ca

1830
01:16:02,820 --> 01:16:06,480
that the certificates of the log and any

1831
01:16:06,480 --> 01:16:08,940
time you see a signed value does not log

1832
01:16:08,940 --> 01:16:10,980
that's evidence in office right and so I

1833
01:16:10,980 --> 01:16:12,540
think that I think that we need the same

1834
01:16:12,540 --> 01:16:15,000
structure here which is basically some

1835
01:16:15,000 --> 01:16:15,900
kind of structure here which is

1836
01:16:15,900 --> 01:16:18,080
basically that there's a plot that that

1837
01:16:18,080 --> 01:16:20,340
there's an understanding of what the

1838
01:16:20,340 --> 01:16:22,199
values or value is supposed to be and

1839
01:16:22,199 --> 01:16:24,000
any value any value that's outside of

1840
01:16:24,000 --> 01:16:25,679
that of that period

1841
01:16:25,679 --> 01:16:28,440
um if self-verifiable or self-verifying

1842
01:16:28,440 --> 01:16:29,699
therefore it's kind of official evidence

1843
01:16:29,699 --> 01:16:31,500
of fraud but I just like I guess I just

1844
01:16:31,500 --> 01:16:32,820
worry that we're gonna build cooperatus

1845
01:16:32,820 --> 01:16:33,960
that's going to allow us to detect this

1846
01:16:33,960 --> 01:16:35,219
kind of malfeasance and then you're

1847
01:16:35,219 --> 01:16:36,540
going to like and you're going to be

1848
01:16:36,540 --> 01:16:38,460
like you know like basically reduce the

1849
01:16:38,460 --> 01:16:40,500
posting on Hacker News does anybody else

1850
01:16:40,500 --> 01:16:42,420
see like this right like this book is

1851
01:16:42,420 --> 01:16:44,280
key and it's like oh but then like I see

1852
01:16:44,280 --> 01:16:45,659
the hacker newspaper I take it down it

1853
01:16:45,659 --> 01:16:46,739
just seems like very complicated I think

1854
01:16:46,739 --> 01:16:47,580
we're going to end up having to sign

1855
01:16:47,580 --> 01:16:49,860
anyway and so maybe I'd like this so and

1856
01:16:49,860 --> 01:16:51,360
so like I guess if you buy that argument

1857
01:16:51,360 --> 01:16:53,460
then I'm not sure what that gets then I

1858
01:16:53,460 --> 01:16:54,960
think maybe by that argument then you

1859
01:16:54,960 --> 01:16:57,120
may have to step back and say if I'm

1860
01:16:57,120 --> 01:16:58,140
signing

1861
01:16:58,140 --> 01:17:00,719
then what other pieces of the puzzle um

1862
01:17:00,719 --> 01:17:02,760
are are changed right

1863
01:17:02,760 --> 01:17:05,040
um so that that's I I don't know what I

1864
01:17:05,040 --> 01:17:06,120
think about this but I'm just trying to

1865
01:17:06,120 --> 01:17:07,679
like work through the entire problem at

1866
01:17:07,679 --> 01:17:10,640
once instead of in pieces

1867
01:17:14,880 --> 01:17:17,699
so next again speaking this individual

1868
01:17:17,699 --> 01:17:19,620
contributor here

1869
01:17:19,620 --> 01:17:22,320
um yeah your very first slide here but

1870
01:17:22,320 --> 01:17:24,900
had uh end Beyond um so I kind of wanted

1871
01:17:24,900 --> 01:17:26,940
to push on that a little bit kind of ask

1872
01:17:26,940 --> 01:17:29,159
what the right level of thinking about

1873
01:17:29,159 --> 01:17:30,900
this is um you've talked a lot about key

1874
01:17:30,900 --> 01:17:32,940
consistency but as I think Nick Jody

1875
01:17:32,940 --> 01:17:34,679
pointed out in the chat there are a lot

1876
01:17:34,679 --> 01:17:36,300
of other resources on the web that one

1877
01:17:36,300 --> 01:17:37,920
would like to be consistent like you

1878
01:17:37,920 --> 01:17:40,320
know the Nick reads privacy policies I'd

1879
01:17:40,320 --> 01:17:41,520
like to like make sure that I'm getting

1880
01:17:41,520 --> 01:17:43,620
the same jQuery as everybody else

1881
01:17:43,620 --> 01:17:44,460
um

1882
01:17:44,460 --> 01:17:48,120
so I mean you you could scope this it

1883
01:17:48,120 --> 01:17:49,620
seems like the requirements are broadly

1884
01:17:49,620 --> 01:17:51,239
pretty similar with regard to those

1885
01:17:51,239 --> 01:17:53,219
things even to the level of reactions

1886
01:17:53,219 --> 01:17:56,400
like Ecker uh which is phrased

1887
01:17:56,400 --> 01:17:58,080
um so I wonder if this is actually a

1888
01:17:58,080 --> 01:18:00,659
pretty General thing now it may be that

1889
01:18:00,659 --> 01:18:02,340
um you know if this is a critical

1890
01:18:02,340 --> 01:18:04,140
property for something like privacy pass

1891
01:18:04,140 --> 01:18:06,120
that would be you could it could be

1892
01:18:06,120 --> 01:18:07,260
addressed there first and then

1893
01:18:07,260 --> 01:18:10,320
generalize other things but yeah it's

1894
01:18:10,320 --> 01:18:12,480
not really this is seeming more General

1895
01:18:12,480 --> 01:18:15,239
than an Ojai problem so like maybe the

1896
01:18:15,239 --> 01:18:17,159
right direction uh to go with this is

1897
01:18:17,159 --> 01:18:18,900
kind of you know if it's really critical

1898
01:18:18,900 --> 01:18:20,640
for privacy pass which it seems to be

1899
01:18:20,640 --> 01:18:22,620
like hit it there first but with an ice

1900
01:18:22,620 --> 01:18:25,080
these other applications

1901
01:18:25,080 --> 01:18:26,699
that's an interesting point this is

1902
01:18:26,699 --> 01:18:28,980
really talking about HTTP resource

1903
01:18:28,980 --> 01:18:30,719
consistency at this point not just key

1904
01:18:30,719 --> 01:18:33,260
consistency

1905
01:18:39,480 --> 01:18:45,860
is Eric in person or remote or remote

1906
01:18:46,860 --> 01:18:49,020
perhaps Eric is trying to find them

1907
01:18:49,020 --> 01:18:50,520
available now for some reason might meet

1908
01:18:50,520 --> 01:18:52,560
Echo is taking forever load up for me

1909
01:18:52,560 --> 01:18:56,520
today but you're on Audible yes okay yep

1910
01:18:56,520 --> 01:18:58,260
so

1911
01:18:58,260 --> 01:19:01,800
two comments first just sort of

1912
01:19:01,800 --> 01:19:04,260
for the info people in here repeating

1913
01:19:04,260 --> 01:19:05,219
something I said the Privacy pass

1914
01:19:05,219 --> 01:19:07,440
working group a couple of weeks ago both

1915
01:19:07,440 --> 01:19:09,420
this and the the other consistency draft

1916
01:19:09,420 --> 01:19:11,699
the informational one they both work

1917
01:19:11,699 --> 01:19:13,800
well in my mind either here or in

1918
01:19:13,800 --> 01:19:15,900
privacy past so let's pick one and work

1919
01:19:15,900 --> 01:19:17,880
on it there and looks like at least for

1920
01:19:17,880 --> 01:19:19,739
the other draft it was adopted over

1921
01:19:19,739 --> 01:19:21,420
there in privacy passed so okay let's

1922
01:19:21,420 --> 01:19:23,280
let's shift this over there now too just

1923
01:19:23,280 --> 01:19:24,780
so they can be together in one place and

1924
01:19:24,780 --> 01:19:27,000
that makes perfect sense

1925
01:19:27,000 --> 01:19:29,219
um in case anybody doesn't know I am one

1926
01:19:29,219 --> 01:19:31,080
of the co-chairs of privacy pass

1927
01:19:31,080 --> 01:19:32,640
um and in a way that's part of what I

1928
01:19:32,640 --> 01:19:33,960
wanted to present this here in this

1929
01:19:33,960 --> 01:19:35,760
cycle

1930
01:19:35,760 --> 01:19:39,120
all right but I and many others seem to

1931
01:19:39,120 --> 01:19:41,040
think yeah let's just push this into

1932
01:19:41,040 --> 01:19:42,840
privacy pass and

1933
01:19:42,840 --> 01:19:45,300
Ben gets to deal with the hats problems

1934
01:19:45,300 --> 01:19:46,860
from that but

1935
01:19:46,860 --> 01:19:50,460
as far as the actual Solutions here

1936
01:19:50,460 --> 01:19:52,679
I maintain that this is

1937
01:19:52,679 --> 01:19:55,920
one reasonable solution this problem

1938
01:19:55,920 --> 01:19:57,300
um I think that the fact that we rent

1939
01:19:57,300 --> 01:19:59,640
all these caveats and potential pitfalls

1940
01:19:59,640 --> 01:20:00,780
and stuff is

1941
01:20:00,780 --> 01:20:02,820
the big proof that this is a very

1942
01:20:02,820 --> 01:20:04,560
difficult problem that anything you have

1943
01:20:04,560 --> 01:20:06,300
is going to have those so that's why we

1944
01:20:06,300 --> 01:20:08,159
need something like this draft to spell

1945
01:20:08,159 --> 01:20:09,780
out a possible solution because

1946
01:20:09,780 --> 01:20:11,699
otherwise there was some time with their

1947
01:20:11,699 --> 01:20:13,620
own bespoke solutions that just have all

1948
01:20:13,620 --> 01:20:14,340
these problems because they didn't

1949
01:20:14,340 --> 01:20:16,260
realize the issues so we need something

1950
01:20:16,260 --> 01:20:17,880
like this whether it's this specific

1951
01:20:17,880 --> 01:20:19,320
solution or the other two Alternatives

1952
01:20:19,320 --> 01:20:21,360
you present on this slide I don't have a

1953
01:20:21,360 --> 01:20:23,460
huge opinion it would be nice to solve a

1954
01:20:23,460 --> 01:20:25,199
Thundering Herd problem but at the same

1955
01:20:25,199 --> 01:20:26,280
time

1956
01:20:26,280 --> 01:20:28,620
Solutions I've tried to kind of to solve

1957
01:20:28,620 --> 01:20:31,140
the Thundering herds problem was had

1958
01:20:31,140 --> 01:20:33,179
problems poked in them so it's always

1959
01:20:33,179 --> 01:20:34,260
comes back to this is a difficult

1960
01:20:34,260 --> 01:20:35,520
problem so we don't come with an

1961
01:20:35,520 --> 01:20:37,020
absolute better solution it might be a

1962
01:20:37,020 --> 01:20:39,719
matter of yeah let's publish this draft

1963
01:20:39,719 --> 01:20:41,219
with this solution and it's usable for

1964
01:20:41,219 --> 01:20:43,320
anyone that isn't quite as susceptible

1965
01:20:43,320 --> 01:20:45,600
to the Thundering Herd issue and when we

1966
01:20:45,600 --> 01:20:47,580
come up with a better solution that

1967
01:20:47,580 --> 01:20:49,800
isn't thundering or hurt susceptible

1968
01:20:49,800 --> 01:20:52,020
we'll come with a yet another draft for

1969
01:20:52,020 --> 01:20:53,280
another alternative solution that people

1970
01:20:53,280 --> 01:20:55,500
could use is

1971
01:20:55,500 --> 01:20:56,940
not a huge problem with having different

1972
01:20:56,940 --> 01:20:58,260
options of the space if we have to

1973
01:20:58,260 --> 01:21:00,120
publish multiple protocols so that's

1974
01:21:00,120 --> 01:21:02,280
fine so

1975
01:21:02,280 --> 01:21:05,040
thanks I do want to try to avoid you

1976
01:21:05,040 --> 01:21:07,020
know defining a ton of these I think no

1977
01:21:07,020 --> 01:21:08,460
I think we're all going to be happier if

1978
01:21:08,460 --> 01:21:11,219
we can more or less Converge on on the

1979
01:21:11,219 --> 01:21:12,840
smallest manageable number of these yeah

1980
01:21:12,840 --> 01:21:17,179
but uh two solutions one is simpler but

1981
01:21:17,179 --> 01:21:19,199
subjectable of Thundering Herd and the

1982
01:21:19,199 --> 01:21:20,460
other one is a little more complicated

1983
01:21:20,460 --> 01:21:23,100
requires more logic but is more useful

1984
01:21:23,100 --> 01:21:24,600
for

1985
01:21:24,600 --> 01:21:26,520
bigger parties that care about huge

1986
01:21:26,520 --> 01:21:28,020
amounts of traffic spikes and all that

1987
01:21:28,020 --> 01:21:30,360
sort of stuff

1988
01:21:30,360 --> 01:21:32,460
that those two solutions seems like a

1989
01:21:32,460 --> 01:21:34,199
reasonable number to end up with Mutiny

1990
01:21:34,199 --> 01:21:36,300
so

1991
01:21:36,300 --> 01:21:38,420
yeah

1992
01:21:39,120 --> 01:21:41,719
cool

1993
01:21:41,880 --> 01:21:43,080
um

1994
01:21:43,080 --> 01:21:45,239
yeah I think it sounds like we have

1995
01:21:45,239 --> 01:21:47,699
consensus that this should follow draft

1996
01:21:47,699 --> 01:21:50,280
key consistency into privacy passive

1997
01:21:50,280 --> 01:21:52,080
if the chairs of privacy pass agree

1998
01:21:52,080 --> 01:21:55,860
which then can speak to that

1999
01:21:55,860 --> 01:21:57,420
um

2000
01:21:57,420 --> 01:22:00,840
uh yeah so so future discussion of the

2001
01:22:00,840 --> 01:22:02,159
draft will go in the Privacy pass

2002
01:22:02,159 --> 01:22:03,600
working group

2003
01:22:03,600 --> 01:22:07,020
um follow us on follow us uh if you if

2004
01:22:07,020 --> 01:22:10,440
you want to talk about it more

2005
01:22:10,440 --> 01:22:13,620
all right sounds good um we do have a

2006
01:22:13,620 --> 01:22:15,719
little bit of time in case anyone has

2007
01:22:15,719 --> 01:22:17,699
any other business

2008
01:22:17,699 --> 01:22:18,840
um

2009
01:22:18,840 --> 01:22:21,239
going once going twice

2010
01:22:21,239 --> 01:22:23,699
if not thanks all for joining um Richard

2011
01:22:23,699 --> 01:22:26,900
did you want to say anything else

2012
01:22:27,900 --> 01:22:30,239
yep thank you thank you everyone good

2013
01:22:30,239 --> 01:22:31,140
session

2014
01:22:31,140 --> 01:22:34,760
yeah see y'all next time

2015
01:22:43,340 --> 01:22:46,620
thanks to our note-takers

2016
01:22:46,620 --> 01:22:49,280
Sean Martin

2017
01:24:07,080 --> 01:24:10,080
foreign

