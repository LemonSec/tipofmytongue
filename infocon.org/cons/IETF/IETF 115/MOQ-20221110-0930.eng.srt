1
00:00:05,899 --> 00:00:08,899
all right

2
00:00:31,320 --> 00:00:34,320
foreign

3
00:01:04,379 --> 00:01:07,339
thank you guys

4
00:01:11,040 --> 00:01:14,060
can you hear us now

5
00:01:15,479 --> 00:01:17,700
okay now I'll repeat myself entirely

6
00:01:17,700 --> 00:01:19,140
because the poor people uh remote

7
00:01:19,140 --> 00:01:21,299
couldn't hear that at all uh welcome to

8
00:01:21,299 --> 00:01:24,420
moq now in 3D as a working group for the

9
00:01:24,420 --> 00:01:25,259
first time

10
00:01:25,259 --> 00:01:28,500
uh this is our first meeting as a

11
00:01:28,500 --> 00:01:30,780
working group at a plenary ITF as you

12
00:01:30,780 --> 00:01:32,640
know we had an interim but this is our

13
00:01:32,640 --> 00:01:34,619
first one uh for those of you who are

14
00:01:34,619 --> 00:01:36,659
not used to the ITF by this point in the

15
00:01:36,659 --> 00:01:38,579
week people gather a little bit slowly

16
00:01:38,579 --> 00:01:39,960
for the first one so we're going to give

17
00:01:39,960 --> 00:01:41,400
it a couple of minutes but not too many

18
00:01:41,400 --> 00:01:44,460
because we have a pretty packed agenda

19
00:01:44,460 --> 00:01:47,340
uh so please find your seats as quickly

20
00:01:47,340 --> 00:01:50,820
as you can uh remember uh

21
00:01:50,820 --> 00:01:53,040
hopefully by the by this point that you

22
00:01:53,040 --> 00:01:55,320
do need to be wearing a mask if you're

23
00:01:55,320 --> 00:01:57,659
not actively eating or drinking so if

24
00:01:57,659 --> 00:01:59,460
you're drinking go ahead and take your

25
00:01:59,460 --> 00:02:03,140
mask off but then put it right back on

26
00:02:33,060 --> 00:02:35,300
foreign

27
00:02:44,400 --> 00:02:46,379
all right good morning everybody we're

28
00:02:46,379 --> 00:02:49,140
gonna get started uh

29
00:02:49,140 --> 00:02:51,720
so uh this is the note well it's

30
00:02:51,720 --> 00:02:53,280
Thursday I think everyone's read the

31
00:02:53,280 --> 00:02:55,560
note well uh if you haven't please do it

32
00:02:55,560 --> 00:02:56,879
contains a lot of important information

33
00:02:56,879 --> 00:02:59,220
and guidelines about how we do work here

34
00:02:59,220 --> 00:03:01,319
at the ietf

35
00:03:01,319 --> 00:03:04,099
next one

36
00:03:04,680 --> 00:03:06,840
uh again it's Thursday I think most

37
00:03:06,840 --> 00:03:08,940
people have figured it out but uh if

38
00:03:08,940 --> 00:03:11,340
you're here make sure

39
00:03:11,340 --> 00:03:13,080
can I turn it up can I just I can get

40
00:03:13,080 --> 00:03:16,260
I'll just get nice and close hello

41
00:03:16,260 --> 00:03:19,019
thank you uh all right if you're uh if

42
00:03:19,019 --> 00:03:20,400
you're in person use the little mute

43
00:03:20,400 --> 00:03:22,560
Echo client to get yourself uh into the

44
00:03:22,560 --> 00:03:24,599
queue uh and make sure you're wearing

45
00:03:24,599 --> 00:03:26,700
your mask uh unless you're speaking as

46
00:03:26,700 --> 00:03:29,700
Ted has said uh and uh remote

47
00:03:29,700 --> 00:03:32,400
participants uh make sure uh your AV is

48
00:03:32,400 --> 00:03:34,200
off unless you're presenting or talking

49
00:03:34,200 --> 00:03:37,739
uh and use headset Etc

50
00:03:37,739 --> 00:03:40,519
thanks

51
00:03:42,299 --> 00:03:43,920
um if you need any general information

52
00:03:43,920 --> 00:03:47,760
about London uh agenda Etc

53
00:03:47,760 --> 00:03:50,780
you can find it here

54
00:03:51,360 --> 00:03:54,420
our agenda is here I'm Alan this is Ted

55
00:03:54,420 --> 00:03:57,360
gory has volunteered to take notes uh

56
00:03:57,360 --> 00:03:58,980
Luke is backing him up if anybody else

57
00:03:58,980 --> 00:04:01,680
wants to jump in the note stock and uh

58
00:04:01,680 --> 00:04:02,640
and help them out I'm sure they

59
00:04:02,640 --> 00:04:05,940
appreciate it uh is there somebody who

60
00:04:05,940 --> 00:04:10,620
will relay comments from uh zulip

61
00:04:10,620 --> 00:04:12,659
thank you

62
00:04:12,659 --> 00:04:14,159
it's okay I think the chairs can

63
00:04:14,159 --> 00:04:17,779
probably also keep an eye for that

64
00:04:20,279 --> 00:04:22,440
video

65
00:04:22,440 --> 00:04:24,419
okay so what are we going to talk about

66
00:04:24,419 --> 00:04:27,360
uh administrivia and agenda bashing uh

67
00:04:27,360 --> 00:04:28,440
we're going to give a report from our

68
00:04:28,440 --> 00:04:31,020
interim uh which was just last month I

69
00:04:31,020 --> 00:04:32,180
think some people might have missed it

70
00:04:32,180 --> 00:04:36,360
uh because it happened so quickly uh so

71
00:04:36,360 --> 00:04:37,199
we'll just talk about some of the

72
00:04:37,199 --> 00:04:39,060
decisions we made there

73
00:04:39,060 --> 00:04:40,740
um then Luke's going to give a

74
00:04:40,740 --> 00:04:43,259
presentation on the combined proposal uh

75
00:04:43,259 --> 00:04:45,960
from the authors of uh Rush warp and

76
00:04:45,960 --> 00:04:48,600
quick R uh and we'll spend some time

77
00:04:48,600 --> 00:04:50,040
discussing that Colin is going to talk

78
00:04:50,040 --> 00:04:54,000
about uh relays uh and how they work and

79
00:04:54,000 --> 00:04:55,860
we'll have a I'm sure healthy discussion

80
00:04:55,860 --> 00:04:57,960
about that and then we'll talk about

81
00:04:57,960 --> 00:04:59,820
possibly having interim an interim in

82
00:04:59,820 --> 00:05:03,360
January before uh Yokohama does anybody

83
00:05:03,360 --> 00:05:06,620
want to bash the agenda

84
00:05:09,360 --> 00:05:11,720
okay

85
00:05:11,759 --> 00:05:13,860
uh you may have seen this note on the

86
00:05:13,860 --> 00:05:17,639
list uh zahed has been appointed as a

87
00:05:17,639 --> 00:05:19,800
mock technical advisor so if you need

88
00:05:19,800 --> 00:05:21,600
technical advice

89
00:05:21,600 --> 00:05:24,680
fund sorry

90
00:05:25,139 --> 00:05:27,900
uh okay uh things that we talked about

91
00:05:27,900 --> 00:05:29,699
at the interim uh we're going to use

92
00:05:29,699 --> 00:05:32,400
GitHub to manage our documents uh as all

93
00:05:32,400 --> 00:05:34,320
the cool kids do

94
00:05:34,320 --> 00:05:35,639
um

95
00:05:35,639 --> 00:05:37,860
and we're going to use issues mostly to

96
00:05:37,860 --> 00:05:40,320
track and PR's for changes please try to

97
00:05:40,320 --> 00:05:43,740
keep discussion off the PRS and uh just

98
00:05:43,740 --> 00:05:45,780
into the issues and also on the list of

99
00:05:45,780 --> 00:05:47,160
course

100
00:05:47,160 --> 00:05:49,800
um some folks were concerned about uh

101
00:05:49,800 --> 00:05:52,259
the way retention works for slack so

102
00:05:52,259 --> 00:05:54,419
we're in the process of setting up some

103
00:05:54,419 --> 00:05:56,639
kind of bridge for slack so that we will

104
00:05:56,639 --> 00:05:58,500
have a wage a means to retain the

105
00:05:58,500 --> 00:06:01,020
messages but until that time uh please

106
00:06:01,020 --> 00:06:03,000
don't uh conduct working group

107
00:06:03,000 --> 00:06:05,100
discussions over slack

108
00:06:05,100 --> 00:06:07,080
um stay tuned on the list for more

109
00:06:07,080 --> 00:06:08,820
updates there

110
00:06:08,820 --> 00:06:10,560
um and we talked about what we're going

111
00:06:10,560 --> 00:06:13,560
to put on this agenda and uh

112
00:06:13,560 --> 00:06:15,419
we are here and you had your chance to

113
00:06:15,419 --> 00:06:19,620
bash the agenda so moving on

114
00:06:19,620 --> 00:06:21,840
so all right with that uh we'll bring up

115
00:06:21,840 --> 00:06:24,539
Luke to uh talk about uh the combined

116
00:06:24,539 --> 00:06:26,960
proposal

117
00:06:38,819 --> 00:06:41,360
oops

118
00:06:57,120 --> 00:07:00,560
oh I need to request

119
00:07:14,100 --> 00:07:15,780
it looks good

120
00:07:15,780 --> 00:07:17,819
hello media real quick

121
00:07:17,819 --> 00:07:19,919
um good morning uh I've got a lot of

122
00:07:19,919 --> 00:07:22,020
slides this is going to be quick uh but

123
00:07:22,020 --> 00:07:24,180
let's let's start going uh I'm Luke I

124
00:07:24,180 --> 00:07:25,560
work with twitch and I've been working

125
00:07:25,560 --> 00:07:28,560
on the uh combined rush and warp and

126
00:07:28,560 --> 00:07:30,419
quick R draft

127
00:07:30,419 --> 00:07:31,740
um just to try and find base Common

128
00:07:31,740 --> 00:07:33,840
Ground between them

129
00:07:33,840 --> 00:07:35,520
uh so before we begin there's probably a

130
00:07:35,520 --> 00:07:37,020
lot of quick enthusiasts in the crowd

131
00:07:37,020 --> 00:07:39,360
maybe not so many media enthusiasts so I

132
00:07:39,360 --> 00:07:42,120
really wanted to cover some Basics

133
00:07:42,120 --> 00:07:45,660
um starting off just medium coding uh

134
00:07:45,660 --> 00:07:48,060
it's not it can get complicated but it's

135
00:07:48,060 --> 00:07:49,800
a really uh simple level you have

136
00:07:49,800 --> 00:07:51,360
iframes that have effectively just

137
00:07:51,360 --> 00:07:54,479
static images and then as time goes you

138
00:07:54,479 --> 00:07:56,280
can have uh keyframes that will

139
00:07:56,280 --> 00:07:58,380
reference one or more frames in the past

140
00:07:58,380 --> 00:08:00,900
so this is Delta encoding the idea is

141
00:08:00,900 --> 00:08:02,759
it's just two there's too many bits if

142
00:08:02,759 --> 00:08:04,919
you try to encode every image separately

143
00:08:04,919 --> 00:08:06,960
and every so often you'll see we'll

144
00:08:06,960 --> 00:08:09,060
reset the chain and make a new iframe

145
00:08:09,060 --> 00:08:10,979
but this is a kind of common encoding

146
00:08:10,979 --> 00:08:13,020
actually this is um really simple but

147
00:08:13,020 --> 00:08:14,520
it's low latency and you see this a lot

148
00:08:14,520 --> 00:08:18,080
with like webrtc and conferencing

149
00:08:18,360 --> 00:08:19,800
uh we could have more complicated

150
00:08:19,800 --> 00:08:22,080
encoding uh this is one possible example

151
00:08:22,080 --> 00:08:24,720
we have B frames they they're annoying

152
00:08:24,720 --> 00:08:25,919
um because they can reference future

153
00:08:25,919 --> 00:08:27,360
frames as well

154
00:08:27,360 --> 00:08:29,220
uh this this has a lot of ramifications

155
00:08:29,220 --> 00:08:30,599
on how you write these frames to the

156
00:08:30,599 --> 00:08:33,360
wire uh but in this example we have um

157
00:08:33,360 --> 00:08:35,279
some B frames that will reference the

158
00:08:35,279 --> 00:08:37,320
eyes and the P's but themselves are not

159
00:08:37,320 --> 00:08:38,640
referenced

160
00:08:38,640 --> 00:08:41,520
um and it you see this more common from

161
00:08:41,520 --> 00:08:42,958
like Hardware encoders that have a very

162
00:08:42,958 --> 00:08:45,300
fixed structure but the benefit of stuff

163
00:08:45,300 --> 00:08:46,920
like B frames and more references in

164
00:08:46,920 --> 00:08:49,440
general is that you can enhance the uh

165
00:08:49,440 --> 00:08:51,360
the compression ratio you can

166
00:08:51,360 --> 00:08:53,459
effectively more references you use the

167
00:08:53,459 --> 00:08:57,260
less bits you need to encode typically

168
00:08:57,540 --> 00:08:59,220
and then finally you can get some just

169
00:08:59,220 --> 00:09:01,200
really gnarly encodings especially if

170
00:09:01,200 --> 00:09:02,760
you let a software encoder and give it

171
00:09:02,760 --> 00:09:05,100
like a you know a few hours it will

172
00:09:05,100 --> 00:09:06,899
produce the most jumbled mess the most

173
00:09:06,899 --> 00:09:10,140
complicated possible encoding uh every

174
00:09:10,140 --> 00:09:11,640
frame referencing every other frame more

175
00:09:11,640 --> 00:09:14,160
you know uh just creating a tangled web

176
00:09:14,160 --> 00:09:16,860
of uh dependencies and it's really hard

177
00:09:16,860 --> 00:09:18,000
to know how you're supposed to send this

178
00:09:18,000 --> 00:09:19,860
over the network

179
00:09:19,860 --> 00:09:22,680
um but we try

180
00:09:22,680 --> 00:09:24,480
one nice property worth mentioning is

181
00:09:24,480 --> 00:09:26,519
that when there's a new iframe uh we can

182
00:09:26,519 --> 00:09:27,899
you typically have what are called

183
00:09:27,899 --> 00:09:30,060
closed gobs where you do not reference

184
00:09:30,060 --> 00:09:32,459
the previous group of pictures so that's

185
00:09:32,459 --> 00:09:34,920
a nice property you cannot have a

186
00:09:34,920 --> 00:09:37,920
um a dependency go across this uh this

187
00:09:37,920 --> 00:09:40,320
line uh so we abuse that and a lot of

188
00:09:40,320 --> 00:09:43,080
protocols abuse that

189
00:09:43,080 --> 00:09:45,839
so we're making a live media protocol a

190
00:09:45,839 --> 00:09:47,940
live media transport and there's a few

191
00:09:47,940 --> 00:09:49,860
high-level goals that I've been um

192
00:09:49,860 --> 00:09:51,839
really trying to adhere to so number one

193
00:09:51,839 --> 00:09:53,399
make sure we respect the encoding over

194
00:09:53,399 --> 00:09:56,640
the network so the idea being is we want

195
00:09:56,640 --> 00:09:59,820
to send media as it needs to be decoded

196
00:09:59,820 --> 00:10:01,860
and as it is encoded we don't want to

197
00:10:01,860 --> 00:10:04,380
try to do our own delivery mechanism we

198
00:10:04,380 --> 00:10:06,540
want to make sure that uh if this Frame

199
00:10:06,540 --> 00:10:08,100
depends on this Frame then over the

200
00:10:08,100 --> 00:10:09,720
network this Frame also depends on this

201
00:10:09,720 --> 00:10:11,399
Frame

202
00:10:11,399 --> 00:10:13,080
um I've been mostly focusing on number

203
00:10:13,080 --> 00:10:14,760
two minimizing latency during congestion

204
00:10:14,760 --> 00:10:17,399
I've been trying to improve um our our

205
00:10:17,399 --> 00:10:20,040
live video system uh to try and reduce

206
00:10:20,040 --> 00:10:22,200
latency but the idea being is that when

207
00:10:22,200 --> 00:10:24,060
networks suffer you need to have a plan

208
00:10:24,060 --> 00:10:27,300
to decide how to keep latency low

209
00:10:27,300 --> 00:10:29,339
and number three of course use Quick

210
00:10:29,339 --> 00:10:30,839
um it's in the working group name after

211
00:10:30,839 --> 00:10:34,320
all but um funnily enough uh we've

212
00:10:34,320 --> 00:10:35,940
discovered quick later in the process

213
00:10:35,940 --> 00:10:37,200
and it just kind of had all these

214
00:10:37,200 --> 00:10:39,300
natural properties we did not set out to

215
00:10:39,300 --> 00:10:41,880
use Quick initially

216
00:10:41,880 --> 00:10:45,240
um but yeah it's in the charter

217
00:10:45,240 --> 00:10:47,640
so some more little history

218
00:10:47,640 --> 00:10:49,620
um we have this existing you know this

219
00:10:49,620 --> 00:10:51,060
kind of annoying Gap structure with B

220
00:10:51,060 --> 00:10:52,980
frames how do you serialize this over

221
00:10:52,980 --> 00:10:54,600
TCP

222
00:10:54,600 --> 00:10:56,820
um how do you make like rtmp hls Dash

223
00:10:56,820 --> 00:10:58,079
how do they work

224
00:10:58,079 --> 00:10:59,399
and more or less they take this

225
00:10:59,399 --> 00:11:01,740
structure and they put it into one big

226
00:11:01,740 --> 00:11:04,800
chain uh the idea being is uh you make

227
00:11:04,800 --> 00:11:06,480
sure that everything all dependencies

228
00:11:06,480 --> 00:11:08,519
are first in the chain and this is

229
00:11:08,519 --> 00:11:10,140
what's called decode order

230
00:11:10,140 --> 00:11:12,180
it screws a little bit with timestamps

231
00:11:12,180 --> 00:11:13,680
if you see the very bottom because of B

232
00:11:13,680 --> 00:11:15,660
frames don't worry too much about that

233
00:11:15,660 --> 00:11:17,519
but this is one of the reasons why B

234
00:11:17,519 --> 00:11:21,060
frames add latency uh and uh effectively

235
00:11:21,060 --> 00:11:23,519
we just have a long continuous uh string

236
00:11:23,519 --> 00:11:26,760
of uh frames this is nice and easy this

237
00:11:26,760 --> 00:11:28,680
is why like rtmp sees a lot of use still

238
00:11:28,680 --> 00:11:30,300
today is because

239
00:11:30,300 --> 00:11:32,100
you just have this chain send it over

240
00:11:32,100 --> 00:11:34,380
the network it arrives on the other end

241
00:11:34,380 --> 00:11:37,019
and you can decode it

242
00:11:37,019 --> 00:11:39,480
the problem though is congestion

243
00:11:39,480 --> 00:11:41,160
what do we do in this congestion let's

244
00:11:41,160 --> 00:11:42,959
say we can hypothetically only send half

245
00:11:42,959 --> 00:11:44,100
the frames

246
00:11:44,100 --> 00:11:46,019
which is simplifying a little bit

247
00:11:46,019 --> 00:11:47,579
because frames have different sizes but

248
00:11:47,579 --> 00:11:48,779
let's say we can only send half of them

249
00:11:48,779 --> 00:11:51,660
what do we do

250
00:11:51,660 --> 00:11:54,360
well the solution really is uh the

251
00:11:54,360 --> 00:11:56,100
congestion controller will come in you

252
00:11:56,100 --> 00:11:59,640
know Reno cubic bbr whatever and pick a

253
00:11:59,640 --> 00:12:01,440
point in the TCP stream it will send

254
00:12:01,440 --> 00:12:02,940
everything before this point and

255
00:12:02,940 --> 00:12:05,100
everything afterwards it will just queue

256
00:12:05,100 --> 00:12:07,620
and as new frames arrive we just append

257
00:12:07,620 --> 00:12:09,660
them write them to the TCP socket they

258
00:12:09,660 --> 00:12:11,579
get added to the end of the queue

259
00:12:11,579 --> 00:12:13,500
and this continues and continues where

260
00:12:13,500 --> 00:12:15,720
new frames are put in further deeper and

261
00:12:15,720 --> 00:12:18,000
deeper into a cube there's some ways you

262
00:12:18,000 --> 00:12:20,040
can get around this to some workarounds

263
00:12:20,040 --> 00:12:22,140
um like you can avoid flushing frames to

264
00:12:22,140 --> 00:12:24,120
the TCP socket until the last possible

265
00:12:24,120 --> 00:12:25,500
minute

266
00:12:25,500 --> 00:12:27,360
um and you can do stuff like ABR with

267
00:12:27,360 --> 00:12:29,220
hls Dash but more or less you have

268
00:12:29,220 --> 00:12:31,560
headline blocking and this is one of the

269
00:12:31,560 --> 00:12:34,860
you know it's very similar to http um in

270
00:12:34,860 --> 00:12:36,660
terms of uh the analogies here where

271
00:12:36,660 --> 00:12:38,160
we're we're introducing a lot of

272
00:12:38,160 --> 00:12:39,540
dependencies that shouldn't actually

273
00:12:39,540 --> 00:12:41,519
exist

274
00:12:41,519 --> 00:12:43,019
um a lot of these these new frames these

275
00:12:43,019 --> 00:12:44,880
B's and the p's don't necessarily depend

276
00:12:44,880 --> 00:12:46,440
on any of the previous frames that have

277
00:12:46,440 --> 00:12:48,839
been written to TCP but we make them

278
00:12:48,839 --> 00:12:51,920
dependencies over the network

279
00:12:52,200 --> 00:12:55,139
so rule them this is these aren't hard

280
00:12:55,139 --> 00:12:56,820
and fast rules but typically a goal one

281
00:12:56,820 --> 00:12:57,899
I would say is don't introduce

282
00:12:57,899 --> 00:13:00,000
dependencies over the network the idea

283
00:13:00,000 --> 00:13:02,519
being is we should keep the media

284
00:13:02,519 --> 00:13:04,019
dependencies like this Frame depends on

285
00:13:04,019 --> 00:13:06,300
this Frame and at a transport level we

286
00:13:06,300 --> 00:13:07,680
should not introduce new dependencies

287
00:13:07,680 --> 00:13:10,260
just because it's easier

288
00:13:10,260 --> 00:13:11,700
um because otherwise we just add latency

289
00:13:11,700 --> 00:13:14,160
during congestion

290
00:13:14,160 --> 00:13:16,260
it's an oversimplification but

291
00:13:16,260 --> 00:13:18,839
as are these slides

292
00:13:18,839 --> 00:13:21,779
um so how does RTP sold this uh the idea

293
00:13:21,779 --> 00:13:24,660
being is uh hey let's we can't use TCP

294
00:13:24,660 --> 00:13:27,660
let's break frames into individual

295
00:13:27,660 --> 00:13:28,920
packets

296
00:13:28,920 --> 00:13:31,380
and MTU boundaries so we take our

297
00:13:31,380 --> 00:13:35,480
existing frames and we we slice them up

298
00:13:35,760 --> 00:13:37,920
um and transmit them ourselves the idea

299
00:13:37,920 --> 00:13:40,200
is that we do fragmentation congest

300
00:13:40,200 --> 00:13:42,720
control reassembly everything in user

301
00:13:42,720 --> 00:13:44,639
space all by ourselves but we get away

302
00:13:44,639 --> 00:13:46,380
from TCP by doing that

303
00:13:46,380 --> 00:13:48,600
and now with congestion what do we do

304
00:13:48,600 --> 00:13:50,160
what do we do when we can only send half

305
00:13:50,160 --> 00:13:51,779
the frames

306
00:13:51,779 --> 00:13:53,700
well the idea being is because we do

307
00:13:53,700 --> 00:13:55,320
Transmissions ourselves we can choose

308
00:13:55,320 --> 00:13:57,600
which packets and more importantly which

309
00:13:57,600 --> 00:14:00,060
frames the transmit so we selectively

310
00:14:00,060 --> 00:14:01,980
decide which packets to transmit and

311
00:14:01,980 --> 00:14:05,399
re-transmit such that we try to avoid

312
00:14:05,399 --> 00:14:06,959
something like the B frames in this

313
00:14:06,959 --> 00:14:08,880
example they're spurious they they're

314
00:14:08,880 --> 00:14:12,540
Leaf nodes effectively on our graph

315
00:14:12,540 --> 00:14:13,980
um and we try to make sure that there's

316
00:14:13,980 --> 00:14:16,380
dependencies so we really prefer we

317
00:14:16,380 --> 00:14:17,519
really make sure we send the newest

318
00:14:17,519 --> 00:14:19,380
iframe that's the most important thing

319
00:14:19,380 --> 00:14:20,760
and we'll spend extra time

320
00:14:20,760 --> 00:14:23,100
re-transmitting that or using FEC or

321
00:14:23,100 --> 00:14:25,500
whatever to make sure it gets there so

322
00:14:25,500 --> 00:14:27,120
in the best case we've got four frames

323
00:14:27,120 --> 00:14:29,040
that arrived on the other end

324
00:14:29,040 --> 00:14:30,779
unfortunately there's also a worst case

325
00:14:30,779 --> 00:14:33,360
where if you don't if you're not

326
00:14:33,360 --> 00:14:35,160
intelligent or let's say you don't have

327
00:14:35,160 --> 00:14:36,720
congestion control that's rapid and you

328
00:14:36,720 --> 00:14:38,760
just like fire hose the network with all

329
00:14:38,760 --> 00:14:41,160
your packets and they just drop randomly

330
00:14:41,160 --> 00:14:43,920
you get this case where you get hearts

331
00:14:43,920 --> 00:14:45,839
of frames arrive or you don't deliver

332
00:14:45,839 --> 00:14:47,519
frames based on dependencies like we

333
00:14:47,519 --> 00:14:49,860
lost a packet for our iframe and that

334
00:14:49,860 --> 00:14:51,959
just causes decode failures going

335
00:14:51,959 --> 00:14:55,019
forward so we lost the same number of

336
00:14:55,019 --> 00:14:56,279
packets in this example but we only

337
00:14:56,279 --> 00:14:58,139
decoded the first frame and everything

338
00:14:58,139 --> 00:14:59,519
else was lost

339
00:14:59,519 --> 00:15:01,560
so it's very important when you're doing

340
00:15:01,560 --> 00:15:03,899
RTP to make sure that you have a very

341
00:15:03,899 --> 00:15:06,600
clear understanding of the media

342
00:15:06,600 --> 00:15:08,459
encoding the dependencies and how the

343
00:15:08,459 --> 00:15:11,719
packets are all related to each other

344
00:15:11,940 --> 00:15:13,680
um but rule number two just to simplify

345
00:15:13,680 --> 00:15:16,079
is don't drop partial frames technically

346
00:15:16,079 --> 00:15:18,360
slices but you need to deliver if if a

347
00:15:18,360 --> 00:15:20,399
frame is split over multiple packets

348
00:15:20,399 --> 00:15:22,380
they should all be delivered or none of

349
00:15:22,380 --> 00:15:23,940
them should be delivered ideally you

350
00:15:23,940 --> 00:15:25,139
don't want to waste bandwidth delivering

351
00:15:25,139 --> 00:15:26,880
partial partial frames they're not

352
00:15:26,880 --> 00:15:30,320
decodable for the most part

353
00:15:31,380 --> 00:15:33,540
so how does rush solve this so this is

354
00:15:33,540 --> 00:15:35,339
what meta's been using for like four or

355
00:15:35,339 --> 00:15:37,380
five years now apparently

356
00:15:37,380 --> 00:15:39,959
um is uh

357
00:15:39,959 --> 00:15:41,820
um you split the media into Quick

358
00:15:41,820 --> 00:15:44,639
streams so every frame is a separate uh

359
00:15:44,639 --> 00:15:45,779
quick stream

360
00:15:45,779 --> 00:15:47,699
and the idea being here is like quick

361
00:15:47,699 --> 00:15:50,339
make sure that all the the frame is

362
00:15:50,339 --> 00:15:54,300
fragmented and uh and uh transmitted and

363
00:15:54,300 --> 00:15:56,760
uh arrives at the other side in order so

364
00:15:56,760 --> 00:15:58,980
frames can arrive out of order into

365
00:15:58,980 --> 00:16:01,260
um in relation to each other but within

366
00:16:01,260 --> 00:16:04,680
a frame it will arrive reliably

367
00:16:04,680 --> 00:16:07,560
um so same thing what do we do here and

368
00:16:07,560 --> 00:16:09,300
I should note as well is quick handles

369
00:16:09,300 --> 00:16:11,040
just again all the networking stuff you

370
00:16:11,040 --> 00:16:12,480
don't have to do a whole lot in user

371
00:16:12,480 --> 00:16:14,579
space so you just have to split the

372
00:16:14,579 --> 00:16:17,579
media into frames it's a lot simpler

373
00:16:17,579 --> 00:16:19,440
um but what do we do what do we do um

374
00:16:19,440 --> 00:16:21,480
when uh there's congestion we can only

375
00:16:21,480 --> 00:16:23,820
drop half the frames

376
00:16:23,820 --> 00:16:26,459
well just like r2p there's a similar

377
00:16:26,459 --> 00:16:28,620
best case what we call reset stream we

378
00:16:28,620 --> 00:16:29,940
effectively say I want to drop this

379
00:16:29,940 --> 00:16:31,740
Frame or we don't even make a stream for

380
00:16:31,740 --> 00:16:33,959
it in the first place

381
00:16:33,959 --> 00:16:38,040
um uh very very similar to RTP use case

382
00:16:38,040 --> 00:16:39,779
where you can pick and choose which uh

383
00:16:39,779 --> 00:16:41,579
which frames you should drop

384
00:16:41,579 --> 00:16:42,959
although if you don't make the right

385
00:16:42,959 --> 00:16:44,579
decisions in this case we dropped two

386
00:16:44,579 --> 00:16:46,320
frames only but we've dropped the worst

387
00:16:46,320 --> 00:16:48,660
ones or some really bad ones and you

388
00:16:48,660 --> 00:16:50,880
cause decode errors again like

389
00:16:50,880 --> 00:16:53,160
if you drop this iframe a great example

390
00:16:53,160 --> 00:16:54,899
nothing after it in that Gap is

391
00:16:54,899 --> 00:16:57,600
decodable without causing artifacts all

392
00:16:57,600 --> 00:16:59,459
over the place

393
00:16:59,459 --> 00:17:01,320
um so one of the things that Rush does

394
00:17:01,320 --> 00:17:02,820
and quick R does is we put the

395
00:17:02,820 --> 00:17:04,859
dependencies on The Wire the idea being

396
00:17:04,859 --> 00:17:06,059
is that the sender already knows the

397
00:17:06,059 --> 00:17:08,520
dependencies but relays also know the

398
00:17:08,520 --> 00:17:10,079
dependencies so they can make these

399
00:17:10,079 --> 00:17:11,640
intelligent dropping decisions and this

400
00:17:11,640 --> 00:17:12,959
is foreshadowing a little bit to

401
00:17:12,959 --> 00:17:15,059
Cullen's presentation

402
00:17:15,059 --> 00:17:18,319
so I won't cover it too much

403
00:17:18,359 --> 00:17:20,939
so rule three don't drop dependencies

404
00:17:20,939 --> 00:17:22,799
in graph Theory terms drop the leaf

405
00:17:22,799 --> 00:17:24,540
nodes first you don't want to drop the

406
00:17:24,540 --> 00:17:26,520
root of the graph because it just causes

407
00:17:26,520 --> 00:17:29,700
everything else to be lost as well

408
00:17:29,700 --> 00:17:31,740
there is a caveat there a lot of these

409
00:17:31,740 --> 00:17:33,179
Leaf nodes aren't that big in terms of

410
00:17:33,179 --> 00:17:34,799
file size like B frames really don't

411
00:17:34,799 --> 00:17:38,280
contribute much of the the bitrate but

412
00:17:38,280 --> 00:17:41,600
they're still the best to drop first

413
00:17:42,179 --> 00:17:45,000
so why am I here why am I standing up

414
00:17:45,000 --> 00:17:46,320
here because I've been working on

415
00:17:46,320 --> 00:17:48,660
something else for like three years now

416
00:17:48,660 --> 00:17:50,760
um something called Warp

417
00:17:50,760 --> 00:17:51,720
um

418
00:17:51,720 --> 00:17:54,059
the idea being here is it's closer to

419
00:17:54,059 --> 00:17:56,640
actually TCP where we just have uh

420
00:17:56,640 --> 00:17:59,700
things in decode order but we we make a

421
00:17:59,700 --> 00:18:01,860
quick stream per Gap so the dashed line

422
00:18:01,860 --> 00:18:03,480
is missing for some reason but every

423
00:18:03,480 --> 00:18:05,220
iframe effectively we make a brand new

424
00:18:05,220 --> 00:18:06,780
quick stream

425
00:18:06,780 --> 00:18:10,919
and what we do is uh we mark them with a

426
00:18:10,919 --> 00:18:13,080
delivery order a little bit of metadata

427
00:18:13,080 --> 00:18:14,640
that says that this stream should be

428
00:18:14,640 --> 00:18:16,140
delivered before this stream

429
00:18:16,140 --> 00:18:18,600
or this GOP segment should be delivered

430
00:18:18,600 --> 00:18:21,179
before this segment so I color coded

431
00:18:21,179 --> 00:18:24,419
them here but in this case the green uh

432
00:18:24,419 --> 00:18:26,160
on the on the right these are the newest

433
00:18:26,160 --> 00:18:28,020
frames and these are delivery order one

434
00:18:28,020 --> 00:18:29,520
I want to deliver these first because

435
00:18:29,520 --> 00:18:31,500
we're live we care about new frames

436
00:18:31,500 --> 00:18:34,500
first older frames are less important

437
00:18:34,500 --> 00:18:36,600
it's a heuristic but generally that's

438
00:18:36,600 --> 00:18:39,539
what users prefer

439
00:18:39,539 --> 00:18:41,820
so what do we do this congestion

440
00:18:41,820 --> 00:18:43,500
we can only deliver half these frames

441
00:18:43,500 --> 00:18:46,380
again same congestion control like as a

442
00:18:46,380 --> 00:18:48,720
lot of the uh the other examples we we

443
00:18:48,720 --> 00:18:50,640
learn that there's issues on the network

444
00:18:50,640 --> 00:18:54,320
we need to figure out what to drop

445
00:18:54,539 --> 00:18:55,919
and the way that work works is we

446
00:18:55,919 --> 00:18:57,539
deliver based on this order so we

447
00:18:57,539 --> 00:18:59,820
actually kind of reshuffle

448
00:18:59,820 --> 00:19:02,100
um the the order we send packets so we

449
00:19:02,100 --> 00:19:04,020
send the newest packets first in this

450
00:19:04,020 --> 00:19:06,419
case the iframe the packet five is sent

451
00:19:06,419 --> 00:19:08,820
first or frame five is sent first

452
00:19:08,820 --> 00:19:10,559
and then we'll do the p and then the B

453
00:19:10,559 --> 00:19:12,600
so we've delivered the newest frames

454
00:19:12,600 --> 00:19:14,160
first and then with the remaining

455
00:19:14,160 --> 00:19:16,140
congestion window

456
00:19:16,140 --> 00:19:17,520
um we will actually go back and try this

457
00:19:17,520 --> 00:19:20,400
in the original iframe uh frame zero but

458
00:19:20,400 --> 00:19:22,140
it's a requirement for all the frames

459
00:19:22,140 --> 00:19:23,820
that follow it

460
00:19:23,820 --> 00:19:25,620
um the idea being is that the congest

461
00:19:25,620 --> 00:19:27,780
controller in my case I'm just using bbr

462
00:19:27,780 --> 00:19:30,600
just tells you what it can send these

463
00:19:30,600 --> 00:19:31,860
are the packets I can send right now and

464
00:19:31,860 --> 00:19:34,740
we go in in descending order and and

465
00:19:34,740 --> 00:19:36,720
send the streams until eventually we hit

466
00:19:36,720 --> 00:19:38,820
the bottleneck which is uh we just can't

467
00:19:38,820 --> 00:19:41,240
send anymore

468
00:19:41,700 --> 00:19:44,160
and as new frames are generated so this

469
00:19:44,160 --> 00:19:46,200
is a new and a PB frame

470
00:19:46,200 --> 00:19:48,179
um these are appended to the newest

471
00:19:48,179 --> 00:19:51,120
stream which is delivery order one and

472
00:19:51,120 --> 00:19:52,799
uh what's really cool is these kind of

473
00:19:52,799 --> 00:19:55,140
jump the queue like in a TCP World these

474
00:19:55,140 --> 00:19:56,700
are added to the very end

475
00:19:56,700 --> 00:19:58,500
and this prioritized world or this

476
00:19:58,500 --> 00:20:00,900
delivery order these um some of the

477
00:20:00,900 --> 00:20:02,400
frames might get sent like the P frame

478
00:20:02,400 --> 00:20:04,260
was is now in the congestion window it

479
00:20:04,260 --> 00:20:05,220
gets sent

480
00:20:05,220 --> 00:20:07,380
uh whereas the B frame is falling on the

481
00:20:07,380 --> 00:20:09,360
other end uh we will starve that and we

482
00:20:09,360 --> 00:20:12,780
will starve the older uh frames as well

483
00:20:12,780 --> 00:20:13,980
um these frames just sitting in Ram

484
00:20:13,980 --> 00:20:15,840
they're these are again these are quick

485
00:20:15,840 --> 00:20:17,340
streams so there's two quick streams in

486
00:20:17,340 --> 00:20:19,200
this example the yellow quick stream

487
00:20:19,200 --> 00:20:21,840
sitting in Ram using a tiny bit of flow

488
00:20:21,840 --> 00:20:23,400
control like Max streams but it's not

489
00:20:23,400 --> 00:20:24,960
using anything over the network it's not

490
00:20:24,960 --> 00:20:28,799
competing uh with other packets

491
00:20:28,799 --> 00:20:30,179
and eventually what you can do is you

492
00:20:30,179 --> 00:20:31,799
can just reset the stream it's not

493
00:20:31,799 --> 00:20:32,940
required

494
00:20:32,940 --> 00:20:34,380
um but at some point it's going to be

495
00:20:34,380 --> 00:20:36,480
you know after like some number of

496
00:20:36,480 --> 00:20:38,460
seconds you're gonna be like hey you're

497
00:20:38,460 --> 00:20:39,720
not you're just not going to get sent

498
00:20:39,720 --> 00:20:41,580
anytime soon so we should just free up

499
00:20:41,580 --> 00:20:43,679
this memory and stop worrying about

500
00:20:43,679 --> 00:20:45,360
having this you know you don't want to

501
00:20:45,360 --> 00:20:47,100
have an indefinite chain of frames that

502
00:20:47,100 --> 00:20:49,260
need to be sent from like minutes and

503
00:20:49,260 --> 00:20:52,320
hours ago just sitting in Ram

504
00:20:52,320 --> 00:20:53,340
um

505
00:20:53,340 --> 00:20:55,320
so this is optional I will mention and

506
00:20:55,320 --> 00:20:56,820
I'll explain why

507
00:20:56,820 --> 00:20:59,460
because one of the things that warp I

508
00:20:59,460 --> 00:21:01,740
really really hope it um I claim it does

509
00:21:01,740 --> 00:21:04,380
is it offers variable latency and relay

510
00:21:04,380 --> 00:21:05,340
support

511
00:21:05,340 --> 00:21:07,380
the idea being that the receiver can

512
00:21:07,380 --> 00:21:08,880
choose how much latency they want the

513
00:21:08,880 --> 00:21:11,100
latency versus quality trade-off and

514
00:21:11,100 --> 00:21:13,440
this works across relays which I think

515
00:21:13,440 --> 00:21:14,640
is really cool

516
00:21:14,640 --> 00:21:17,460
so just to kind of visualize this it's a

517
00:21:17,460 --> 00:21:19,440
hard concept so I've done my best to try

518
00:21:19,440 --> 00:21:21,600
and um visualize this but we've got

519
00:21:21,600 --> 00:21:23,940
we've got a playback session right now

520
00:21:23,940 --> 00:21:25,980
we've got two two frames in the receive

521
00:21:25,980 --> 00:21:27,840
buffer two video frames and a little bit

522
00:21:27,840 --> 00:21:29,400
of audio

523
00:21:29,400 --> 00:21:30,720
um I should note in this example audio

524
00:21:30,720 --> 00:21:32,580
is slightly prioritized over the video

525
00:21:32,580 --> 00:21:35,100
but that's up to you in our case audio

526
00:21:35,100 --> 00:21:37,320
is more important

527
00:21:37,320 --> 00:21:39,659
um we had the live playhead that dash

528
00:21:39,659 --> 00:21:41,460
line that's what the encoder is spitting

529
00:21:41,460 --> 00:21:43,080
out and this is the earliest we could

530
00:21:43,080 --> 00:21:44,460
possibly receive a frame over the

531
00:21:44,460 --> 00:21:47,460
network you can think of it like min rtt

532
00:21:47,460 --> 00:21:48,480
um and then we have these other

533
00:21:48,480 --> 00:21:51,000
playheads on the left the idea being is

534
00:21:51,000 --> 00:21:53,700
the receiver in outcasts the uh the

535
00:21:53,700 --> 00:21:56,100
video player chooses when they want to

536
00:21:56,100 --> 00:21:57,659
start playback and they choose the size

537
00:21:57,659 --> 00:21:58,919
of the Jitter buffer to get into

538
00:21:58,919 --> 00:22:01,320
networking terms

539
00:22:01,320 --> 00:22:04,440
um so as we continue we generated a

540
00:22:04,440 --> 00:22:05,940
little bit more audio and we delivered

541
00:22:05,940 --> 00:22:08,100
some that audio over the network

542
00:22:08,100 --> 00:22:10,020
uh the encoder also generated frame

543
00:22:10,020 --> 00:22:11,880
three of video but there's a little bit

544
00:22:11,880 --> 00:22:14,640
of congestion it hasn't arrived yet

545
00:22:14,640 --> 00:22:16,799
um but either way we started with this

546
00:22:16,799 --> 00:22:18,539
low low latency playhead for real-time

547
00:22:18,539 --> 00:22:20,159
conferencing in this example it's got

548
00:22:20,159 --> 00:22:21,840
two frames of latency which is a little

549
00:22:21,840 --> 00:22:24,960
absurd but it's just an example uh the

550
00:22:24,960 --> 00:22:26,460
idea being is it starts playing out of

551
00:22:26,460 --> 00:22:29,400
the Jitter buffer almost immediately

552
00:22:29,400 --> 00:22:32,280
so as we continue

553
00:22:32,280 --> 00:22:33,840
um we've got some more congestion

554
00:22:33,840 --> 00:22:35,640
actually we're not seeing frame four

555
00:22:35,640 --> 00:22:37,080
should have been delivered at this point

556
00:22:37,080 --> 00:22:39,960
and we we don't even have audio for that

557
00:22:39,960 --> 00:22:41,640
equivalent of frame four

558
00:22:41,640 --> 00:22:43,260
uh so at this point the low latency

559
00:22:43,260 --> 00:22:45,240
playhead is already running into a

560
00:22:45,240 --> 00:22:46,200
situation where it doesn't have any

561
00:22:46,200 --> 00:22:47,700
video to display

562
00:22:47,700 --> 00:22:49,020
and it's just going to show the previous

563
00:22:49,020 --> 00:22:51,179
frame

564
00:22:51,179 --> 00:22:55,440
um next slide and um we uh we have a new

565
00:22:55,440 --> 00:22:57,620
new kid in the block interactive latency

566
00:22:57,620 --> 00:22:59,760
interactive versus real time it's a

567
00:22:59,760 --> 00:23:01,620
debatable I say interactive latency

568
00:23:01,620 --> 00:23:03,900
being just just higher latency it's like

569
00:23:03,900 --> 00:23:06,299
twitch style agency I would call it

570
00:23:06,299 --> 00:23:08,100
um but there's some debate over with the

571
00:23:08,100 --> 00:23:09,960
best name for that latency range is but

572
00:23:09,960 --> 00:23:11,659
uh anyway they start watching video

573
00:23:11,659 --> 00:23:14,520
they've started and now low latency a

574
00:23:14,520 --> 00:23:16,740
real-time conferencing uh latency is

575
00:23:16,740 --> 00:23:18,179
just running out of the audio buffer

576
00:23:18,179 --> 00:23:19,919
it's gonna start

577
00:23:19,919 --> 00:23:23,460
just having silence uh very soon we

578
00:23:23,460 --> 00:23:24,960
still have a massive congestion none of

579
00:23:24,960 --> 00:23:26,220
the new frames have been generated or

580
00:23:26,220 --> 00:23:27,480
delivered sorry they haven't been

581
00:23:27,480 --> 00:23:28,980
delivered they have been generated but

582
00:23:28,980 --> 00:23:31,320
they're sitting blocked based on

583
00:23:31,320 --> 00:23:33,720
congestion control

584
00:23:33,720 --> 00:23:35,460
but the important thing is because we

585
00:23:35,460 --> 00:23:36,960
prioritize or because we have this

586
00:23:36,960 --> 00:23:38,700
delivery order

587
00:23:38,700 --> 00:23:40,740
frame five and a little bit of audio

588
00:23:40,740 --> 00:23:42,900
that that uh corresponds to it was

589
00:23:42,900 --> 00:23:44,940
delivered just in time it's an iframe so

590
00:23:44,940 --> 00:23:46,919
we're allowed to deliver it whereas all

591
00:23:46,919 --> 00:23:48,059
the previous frames we weren't allowed

592
00:23:48,059 --> 00:23:50,400
to skip there were peas

593
00:23:50,400 --> 00:23:52,320
um but just in time for our real-time

594
00:23:52,320 --> 00:23:54,240
latency user to get a little bit of

595
00:23:54,240 --> 00:23:54,960
something

596
00:23:54,960 --> 00:23:58,200
uh as a medium latency uh viewer catches

597
00:23:58,200 --> 00:24:01,020
up and they're about to hit a gap of

598
00:24:01,020 --> 00:24:03,500
missing video

599
00:24:04,320 --> 00:24:06,960
um we add one more uh viewer to the mix

600
00:24:06,960 --> 00:24:08,780
this is I'm just calling our

601
00:24:08,780 --> 00:24:11,039
non-interactive latency this is somebody

602
00:24:11,039 --> 00:24:12,659
with maybe a poor Network maybe it's

603
00:24:12,659 --> 00:24:15,020
somebody in Brazil on their mobile phone

604
00:24:15,020 --> 00:24:18,120
you know like they cannot sustain the

605
00:24:18,120 --> 00:24:21,179
latencies that the other users uh uh

606
00:24:21,179 --> 00:24:23,880
need or they don't want it maybe they're

607
00:24:23,880 --> 00:24:25,380
just on the couch or something like

608
00:24:25,380 --> 00:24:26,880
they're just they there's no reason to

609
00:24:26,880 --> 00:24:28,020
have low latency they're just trying to

610
00:24:28,020 --> 00:24:30,059
watch football

611
00:24:30,059 --> 00:24:30,780
um

612
00:24:30,780 --> 00:24:33,179
so they they joined the picture too and

613
00:24:33,179 --> 00:24:34,559
we're recovering a bit from congestion

614
00:24:34,559 --> 00:24:36,000
on the right side you see that we've

615
00:24:36,000 --> 00:24:37,559
delivered frame six we've delivered some

616
00:24:37,559 --> 00:24:39,900
audio we're catching up there's still a

617
00:24:39,900 --> 00:24:41,640
big gaping Gap in the middle which is

618
00:24:41,640 --> 00:24:43,919
where the medium latency is

619
00:24:43,919 --> 00:24:45,720
um so that user right now is they're

620
00:24:45,720 --> 00:24:47,340
listening to audio you see the audio is

621
00:24:47,340 --> 00:24:49,320
continuous they hear it but their video

622
00:24:49,320 --> 00:24:52,020
is um is Frozen or stuttering much like

623
00:24:52,020 --> 00:24:53,520
a conference call if you've ever used

624
00:24:53,520 --> 00:24:55,320
everybody's use a conference call at

625
00:24:55,320 --> 00:24:57,539
this point where um that's what the user

626
00:24:57,539 --> 00:25:00,360
experience uh is like

627
00:25:00,360 --> 00:25:02,159
and then finally we keep going forward

628
00:25:02,159 --> 00:25:04,080
we get some more frames popping into the

629
00:25:04,080 --> 00:25:05,580
picture we've now caught up to the live

630
00:25:05,580 --> 00:25:08,039
playhead everything's being delivered

631
00:25:08,039 --> 00:25:09,600
um and we can go back and we can start

632
00:25:09,600 --> 00:25:11,880
back filling the gaps in the buffer so

633
00:25:11,880 --> 00:25:14,880
we've delivered frame three and

634
00:25:14,880 --> 00:25:16,440
um just in time for the high latency

635
00:25:16,440 --> 00:25:18,840
user to get it even though the medium

636
00:25:18,840 --> 00:25:21,840
and low latency viewer did not get it

637
00:25:21,840 --> 00:25:24,360
and then we deliver frame four uh so we

638
00:25:24,360 --> 00:25:26,700
uh we finally managed to save the day we

639
00:25:26,700 --> 00:25:28,740
patched all the holes in the Gap

640
00:25:28,740 --> 00:25:31,140
um just in time for that viewer didn't

641
00:25:31,140 --> 00:25:33,360
see any issues at all

642
00:25:33,360 --> 00:25:35,340
and then there's a there's a fourth one

643
00:25:35,340 --> 00:25:37,799
added this is a archive worker it could

644
00:25:37,799 --> 00:25:39,480
be like 30 seconds delayed the idea is

645
00:25:39,480 --> 00:25:40,620
that it's sitting there it will just

646
00:25:40,620 --> 00:25:42,840
scoop up all the frames eventually and

647
00:25:42,840 --> 00:25:44,700
then upload them to storage for a

648
00:25:44,700 --> 00:25:47,460
Flawless of odd so the same stream you

649
00:25:47,460 --> 00:25:48,360
could have somebody with real-time

650
00:25:48,360 --> 00:25:50,880
latency that gets a lot of lost frames

651
00:25:50,880 --> 00:25:52,740
and you have the other Spectrum

652
00:25:52,740 --> 00:25:56,700
no loss at all but just High latency

653
00:25:56,700 --> 00:25:59,039
so just to recap this is the exact same

654
00:25:59,039 --> 00:26:01,260
delivery exact same network conditions

655
00:26:01,260 --> 00:26:02,880
exact same packets being sent over the

656
00:26:02,880 --> 00:26:04,740
network but what the site of the user

657
00:26:04,740 --> 00:26:06,419
experience is how far how big the Jitter

658
00:26:06,419 --> 00:26:07,679
buffer was

659
00:26:07,679 --> 00:26:09,720
more or less

660
00:26:09,720 --> 00:26:11,520
um but because we we had this delivery

661
00:26:11,520 --> 00:26:13,740
order we can have these different user

662
00:26:13,740 --> 00:26:15,720
experiences so the real-time latency

663
00:26:15,720 --> 00:26:18,120
user had the lowest latency but they

664
00:26:18,120 --> 00:26:19,740
dropped video and a little bit of audio

665
00:26:19,740 --> 00:26:22,440
which is is usually required if you're

666
00:26:22,440 --> 00:26:24,299
doing real-time conferencing but it's

667
00:26:24,299 --> 00:26:26,159
not ideal I would say in higher latency

668
00:26:26,159 --> 00:26:28,740
situations like a medium latency they

669
00:26:28,740 --> 00:26:30,240
just dropped a little bit of video but

670
00:26:30,240 --> 00:26:32,220
audio was Flawless that's what we're

671
00:26:32,220 --> 00:26:34,080
looking for from twitch for example like

672
00:26:34,080 --> 00:26:36,720
users don't need real time they prefer

673
00:26:36,720 --> 00:26:39,059
to hear the broadcaster the streamer

674
00:26:39,059 --> 00:26:40,919
even though they might miss a little bit

675
00:26:40,919 --> 00:26:42,900
of video and then a high latency where

676
00:26:42,900 --> 00:26:44,220
they just didn't see any issues at all

677
00:26:44,220 --> 00:26:45,240
they didn't even know there was

678
00:26:45,240 --> 00:26:47,100
congestion

679
00:26:47,100 --> 00:26:48,900
um maybe ABR kicked in at some point and

680
00:26:48,900 --> 00:26:50,520
they would notice that but in terms of

681
00:26:50,520 --> 00:26:52,380
frame losses and frame drops they didn't

682
00:26:52,380 --> 00:26:53,460
notice anything

683
00:26:53,460 --> 00:26:55,080
and then finally the archive worker it's

684
00:26:55,080 --> 00:26:56,880
just whatever latency you want you could

685
00:26:56,880 --> 00:26:58,860
wait wait as long as you want uh well

686
00:26:58,860 --> 00:27:01,620
Ram persists pretty much

687
00:27:01,620 --> 00:27:02,580
um

688
00:27:02,580 --> 00:27:04,620
until the streams are eventually reset

689
00:27:04,620 --> 00:27:06,779
uh either side could reset like the

690
00:27:06,779 --> 00:27:09,299
sender could send a reset stream and the

691
00:27:09,299 --> 00:27:10,980
receiver could send to stop sending to

692
00:27:10,980 --> 00:27:12,240
say like please just don't send me

693
00:27:12,240 --> 00:27:13,740
anymore I've already skipped over this

694
00:27:13,740 --> 00:27:14,880
content

695
00:27:14,880 --> 00:27:16,559
that's mostly just to say bandwidth

696
00:27:16,559 --> 00:27:18,740
though

697
00:27:18,840 --> 00:27:21,900
so anyway with all that in play uh we've

698
00:27:21,900 --> 00:27:23,760
got um this combined draft I've been

699
00:27:23,760 --> 00:27:25,799
working on uh we're trying to combine

700
00:27:25,799 --> 00:27:28,140
warp rush and a little bit of quick R

701
00:27:28,140 --> 00:27:30,539
the the main concept is any number of

702
00:27:30,539 --> 00:27:33,059
frames per stream is a segment uh

703
00:27:33,059 --> 00:27:34,260
there's a lot of bike shedding on this

704
00:27:34,260 --> 00:27:36,779
name uh so don't don't get too attached

705
00:27:36,779 --> 00:27:38,100
to it

706
00:27:38,100 --> 00:27:39,720
um and the delivery order and

707
00:27:39,720 --> 00:27:41,400
dependencies are written on the wire and

708
00:27:41,400 --> 00:27:43,559
this is to support relays the idea is

709
00:27:43,559 --> 00:27:45,240
that these dropping decisions can be the

710
00:27:45,240 --> 00:27:46,919
same no matter where the congestion

711
00:27:46,919 --> 00:27:49,380
occurs uh if the congestion occurs on

712
00:27:49,380 --> 00:27:51,840
the first top versus the last hop should

713
00:27:51,840 --> 00:27:54,678
be the same experience

714
00:27:55,980 --> 00:27:58,380
um so here's our example encoding again

715
00:27:58,380 --> 00:28:00,000
um there's many ways you could break

716
00:28:00,000 --> 00:28:02,700
this into segments uh so you could do

717
00:28:02,700 --> 00:28:05,220
warp which is effectively you just break

718
00:28:05,220 --> 00:28:08,580
into gaps very easy uh this is backwards

719
00:28:08,580 --> 00:28:10,260
compatible with hls and dash more or

720
00:28:10,260 --> 00:28:11,580
less you just take the same segments and

721
00:28:11,580 --> 00:28:13,380
send them over quick

722
00:28:13,380 --> 00:28:15,059
uh you can fragment a little bit more

723
00:28:15,059 --> 00:28:17,340
you can say what if we send reference

724
00:28:17,340 --> 00:28:18,659
frames and non-reference frames as

725
00:28:18,659 --> 00:28:21,779
separate segments separate quick streams

726
00:28:21,779 --> 00:28:23,400
we have a little marker at the front

727
00:28:23,400 --> 00:28:25,440
that says here's the here's the delivery

728
00:28:25,440 --> 00:28:27,179
order and maybe in a little market that

729
00:28:27,179 --> 00:28:28,380
says here the dependencies between

730
00:28:28,380 --> 00:28:30,360
streams

731
00:28:30,360 --> 00:28:32,820
um uh but yeah we could break it further

732
00:28:32,820 --> 00:28:34,200
because in this case we have these B

733
00:28:34,200 --> 00:28:35,820
frames at the top depend on each other

734
00:28:35,820 --> 00:28:39,240
even though ondexual encoding they don't

735
00:28:39,240 --> 00:28:40,860
you could break them into individual

736
00:28:40,860 --> 00:28:42,840
segments too you can break it down as

737
00:28:42,840 --> 00:28:44,400
far as you want in this case we've got a

738
00:28:44,400 --> 00:28:47,340
segment for an individual frame so it's

739
00:28:47,340 --> 00:28:49,080
not fate sharing with the other frames

740
00:28:49,080 --> 00:28:51,000
when it doesn't need to be

741
00:28:51,000 --> 00:28:52,860
and then finally you could just break it

742
00:28:52,860 --> 00:28:55,559
every frame into its own segment this is

743
00:28:55,559 --> 00:28:57,779
effectively Rush

744
00:28:57,779 --> 00:28:59,460
um

745
00:28:59,460 --> 00:29:01,440
the numbers here like the delivery order

746
00:29:01,440 --> 00:29:03,539
uh one two three four five all the way

747
00:29:03,539 --> 00:29:04,320
up

748
00:29:04,320 --> 00:29:07,020
those are arbitrary it's based on your

749
00:29:07,020 --> 00:29:09,179
application uh in the use case in in

750
00:29:09,179 --> 00:29:10,559
this case we want to deliver the newer

751
00:29:10,559 --> 00:29:11,760
frames first

752
00:29:11,760 --> 00:29:14,100
but there's certainly use cases where

753
00:29:14,100 --> 00:29:15,299
you want to deliver the older frames

754
00:29:15,299 --> 00:29:17,159
first in our case like for example

755
00:29:17,159 --> 00:29:19,440
you're serving an ad

756
00:29:19,440 --> 00:29:21,419
you don't want to skip any of the ad

757
00:29:21,419 --> 00:29:23,520
video so you you kind of flip it around

758
00:29:23,520 --> 00:29:24,840
you turn on the head of line blocking

759
00:29:24,840 --> 00:29:26,700
and say that actually the first iframe

760
00:29:26,700 --> 00:29:28,980
which is delivery order for make a

761
00:29:28,980 --> 00:29:30,419
delivery order one make that the first

762
00:29:30,419 --> 00:29:32,159
one that we deliver so there's no

763
00:29:32,159 --> 00:29:33,960
skipping allowed

764
00:29:33,960 --> 00:29:35,100
um so there's a lot of business logic

765
00:29:35,100 --> 00:29:36,960
we'll kind of talk about this at some

766
00:29:36,960 --> 00:29:39,600
point in the future about delivery order

767
00:29:39,600 --> 00:29:42,000
um there's no right answer effectively

768
00:29:42,000 --> 00:29:43,919
to how you prioritize frames somebody

769
00:29:43,919 --> 00:29:45,419
has to decide which frames are more

770
00:29:45,419 --> 00:29:47,100
important somebody has to decide it's

771
00:29:47,100 --> 00:29:48,360
audio more important somebody has to

772
00:29:48,360 --> 00:29:50,520
decide even like which Renditions and

773
00:29:50,520 --> 00:29:53,960
whatnot are important

774
00:29:54,779 --> 00:29:57,059
um so what's next uh I I forgot to draw

775
00:29:57,059 --> 00:30:01,140
a bike but this is a shed uh

776
00:30:01,140 --> 00:30:03,539
the the names are really hard so we're

777
00:30:03,539 --> 00:30:05,279
not sure if we should call this warp or

778
00:30:05,279 --> 00:30:07,200
rush or meaver quick or some made up

779
00:30:07,200 --> 00:30:08,520
name

780
00:30:08,520 --> 00:30:10,500
um and especially the name of segments

781
00:30:10,500 --> 00:30:12,360
like all these segments are they layers

782
00:30:12,360 --> 00:30:15,539
are they fragments chunks media quick

783
00:30:15,539 --> 00:30:19,220
prefix things fubars like

784
00:30:19,220 --> 00:30:21,419
every word every name we've looked at

785
00:30:21,419 --> 00:30:23,880
has like existing connotations that it

786
00:30:23,880 --> 00:30:26,419
clashes with

787
00:30:27,899 --> 00:30:30,059
um and then uh I've been working on this

788
00:30:30,059 --> 00:30:32,039
draft mostly um there's a GitHub repo

789
00:30:32,039 --> 00:30:33,659
kicksolated warp draft I found a lot of

790
00:30:33,659 --> 00:30:35,820
issues but there's a lot of core things

791
00:30:35,820 --> 00:30:38,100
missing like a wire format

792
00:30:38,100 --> 00:30:40,380
I've defined how media should be sent

793
00:30:40,380 --> 00:30:42,360
but we don't even have a way of how the

794
00:30:42,360 --> 00:30:44,279
bytes should be written to streams uh

795
00:30:44,279 --> 00:30:45,179
yet

796
00:30:45,179 --> 00:30:46,980
uh we're also trying to figure out how

797
00:30:46,980 --> 00:30:49,380
CDN support works

798
00:30:49,380 --> 00:30:51,179
um right now the protocol is push-based

799
00:30:51,179 --> 00:30:54,480
it's very simple web transport you push

800
00:30:54,480 --> 00:30:56,580
but we want to figure out what's the

801
00:30:56,580 --> 00:30:57,720
middle ground we can find to make sure

802
00:30:57,720 --> 00:31:00,960
that existing cdns that are all HP based

803
00:31:00,960 --> 00:31:02,220
and pull can still work with this

804
00:31:02,220 --> 00:31:03,659
protocol

805
00:31:03,659 --> 00:31:05,159
um so it doesn't really matter if it's

806
00:31:05,159 --> 00:31:06,720
push versus pull so long as you send

807
00:31:06,720 --> 00:31:08,640
media the same way over quick streams

808
00:31:08,640 --> 00:31:11,100
but we want to ideally have one protocol

809
00:31:11,100 --> 00:31:14,460
for both contribution and distribution

810
00:31:14,460 --> 00:31:16,080
um and we need to figure out where the

811
00:31:16,080 --> 00:31:17,580
middle ground is there

812
00:31:17,580 --> 00:31:20,640
and just all the media stuff like

813
00:31:20,640 --> 00:31:22,980
how do you send tracks how do you choose

814
00:31:22,980 --> 00:31:24,419
tracks how do you do you know which

815
00:31:24,419 --> 00:31:26,820
codecs which container even uh the

816
00:31:26,820 --> 00:31:30,419
current draft has like uh cmap but we

817
00:31:30,419 --> 00:31:33,059
still haven't even decided

818
00:31:33,059 --> 00:31:35,159
um so everything that's actually

819
00:31:35,159 --> 00:31:36,659
required to make sure media playback

820
00:31:36,659 --> 00:31:39,240
works is currently missing just just the

821
00:31:39,240 --> 00:31:40,380
networking stuff is what I've been

822
00:31:40,380 --> 00:31:42,539
focusing on

823
00:31:42,539 --> 00:31:44,159
um I've also been working on a demo uh

824
00:31:44,159 --> 00:31:46,980
quick.video demo I will say it's very

825
00:31:46,980 --> 00:31:49,320
crude it's just hosted on a single host

826
00:31:49,320 --> 00:31:52,740
uh tiny instance in US West 2.

827
00:31:52,740 --> 00:31:55,559
um I'm working on it too but there's uh

828
00:31:55,559 --> 00:31:57,360
this code also on GitHub to show how

829
00:31:57,360 --> 00:32:00,360
this works and some examples and then

830
00:32:00,360 --> 00:32:02,399
finally with adoption I don't know the

831
00:32:02,399 --> 00:32:04,140
process I don't think this is ready for

832
00:32:04,140 --> 00:32:05,940
adoption yet but I really want to get

833
00:32:05,940 --> 00:32:07,440
the idea from the room is this the right

834
00:32:07,440 --> 00:32:09,960
direction how do we feel

835
00:32:09,960 --> 00:32:11,640
um what do we think is missing what do

836
00:32:11,640 --> 00:32:15,679
we think should be laid out first

837
00:32:16,980 --> 00:32:18,480
um a lot of contributors so I'm Luke

838
00:32:18,480 --> 00:32:20,940
again representing the twitch folks

839
00:32:20,940 --> 00:32:23,039
um most of them are online and then uh

840
00:32:23,039 --> 00:32:25,140
from Cisco we've got Suez Cullen and

841
00:32:25,140 --> 00:32:27,899
meta Cairo Allen and Jordy have been uh

842
00:32:27,899 --> 00:32:29,220
helping a lot with this draft among

843
00:32:29,220 --> 00:32:31,500
others I've seen uh there's a few folks

844
00:32:31,500 --> 00:32:33,659
have uh left a lot of issues uh lately

845
00:32:33,659 --> 00:32:35,640
too

846
00:32:35,640 --> 00:32:38,480
and that's all I got

847
00:32:39,380 --> 00:32:42,240
speaking of contributors uh the queue is

848
00:32:42,240 --> 00:32:45,419
quite full uh at this point Sam you're

849
00:32:45,419 --> 00:32:47,840
up first

850
00:32:51,059 --> 00:32:53,539
between

851
00:32:53,700 --> 00:32:55,700
me

852
00:32:55,799 --> 00:32:58,500
good morning uh samhurst BBC r d uh

853
00:32:58,500 --> 00:32:59,460
thanks very much for the presentation

854
00:32:59,460 --> 00:33:02,220
that was really cool uh and Kudos on the

855
00:33:02,220 --> 00:33:04,799
handwritten slides I love that

856
00:33:04,799 --> 00:33:06,299
um so I have a question about the

857
00:33:06,299 --> 00:33:07,620
delivery order number that you were

858
00:33:07,620 --> 00:33:09,179
showing up there is that just a

859
00:33:09,179 --> 00:33:10,799
constantly incrementing number as it

860
00:33:10,799 --> 00:33:13,500
goes through or is that a

861
00:33:13,500 --> 00:33:15,480
uh more sort of dynamic value that

862
00:33:15,480 --> 00:33:17,820
changes depending on one particular

863
00:33:17,820 --> 00:33:19,320
instance in time

864
00:33:19,320 --> 00:33:22,320
yeah so um

865
00:33:22,320 --> 00:33:24,179
we still need to work out as this is one

866
00:33:24,179 --> 00:33:25,740
continue right now it's one continuous

867
00:33:25,740 --> 00:33:29,519
number space it's just a un 64.

868
00:33:29,519 --> 00:33:30,960
um how warp Works in production for

869
00:33:30,960 --> 00:33:32,460
right how I've coded it is it's

870
00:33:32,460 --> 00:33:33,539
effectively just the presentation

871
00:33:33,539 --> 00:33:34,980
timestamp

872
00:33:34,980 --> 00:33:37,019
plus three seconds if it's audio just to

873
00:33:37,019 --> 00:33:38,419
give audio a little bit of a head start

874
00:33:38,419 --> 00:33:41,399
but effectively it's an arbitrary number

875
00:33:41,399 --> 00:33:43,980
so long as the lower number is um

876
00:33:43,980 --> 00:33:45,299
delivered first

877
00:33:45,299 --> 00:33:47,159
or in my case I'm doing the presentation

878
00:33:47,159 --> 00:33:49,080
timestamp but anyway

879
00:33:49,080 --> 00:33:53,039
um it's arbitrary okay okay

880
00:33:53,039 --> 00:33:55,019
oh

881
00:33:55,019 --> 00:33:56,820
um great overview

882
00:33:56,820 --> 00:33:58,620
um Grosso for simplification like you

883
00:33:58,620 --> 00:33:59,580
said but I think it's the right

884
00:33:59,580 --> 00:34:01,679
oversimplification for uh transport

885
00:34:01,679 --> 00:34:04,260
folks one important aspect that I I'm

886
00:34:04,260 --> 00:34:05,940
not sure was

887
00:34:05,940 --> 00:34:07,799
um was convey which I think it matters a

888
00:34:07,799 --> 00:34:09,540
lot to the the for the transport folks

889
00:34:09,540 --> 00:34:10,859
to understand is that there's

890
00:34:10,859 --> 00:34:12,619
differences between congestion control

891
00:34:12,619 --> 00:34:15,960
and rate control and

892
00:34:15,960 --> 00:34:17,580
um and even within congestion control

893
00:34:17,580 --> 00:34:20,580
there's also you know when you talk

894
00:34:20,580 --> 00:34:21,719
about prioritization there's different

895
00:34:21,719 --> 00:34:23,820
concepts of the partition about whether

896
00:34:23,820 --> 00:34:25,859
you're talking about your local cues or

897
00:34:25,859 --> 00:34:27,599
whether you're talking about marking

898
00:34:27,599 --> 00:34:30,239
things properly so that the network cues

899
00:34:30,239 --> 00:34:31,739
um handle your congestion the way that

900
00:34:31,739 --> 00:34:34,440
you intended so first I think we want to

901
00:34:34,440 --> 00:34:36,780
make sure that people understand that

902
00:34:36,780 --> 00:34:38,639
over long time Windows we're not using

903
00:34:38,639 --> 00:34:40,560
congestion control to to instantaneously

904
00:34:40,560 --> 00:34:43,199
decide which packets are said that the

905
00:34:43,199 --> 00:34:45,659
the congestion controllers overall

906
00:34:45,659 --> 00:34:47,219
average

907
00:34:47,219 --> 00:34:49,560
um bandwidth estimate gets fed up slowly

908
00:34:49,560 --> 00:34:51,480
to the app and that changes the media

909
00:34:51,480 --> 00:34:52,859
encoding rate so you're not just going

910
00:34:52,859 --> 00:34:55,859
to drop individual parts of your of your

911
00:34:55,859 --> 00:34:57,119
stream you're going to select a totally

912
00:34:57,119 --> 00:34:59,820
different stream encoding in order to

913
00:34:59,820 --> 00:35:00,960
meet the budget that your condition

914
00:35:00,960 --> 00:35:02,820
control is telling you over a long time

915
00:35:02,820 --> 00:35:05,520
that's not useful for an instantaneous

916
00:35:05,520 --> 00:35:07,080
decision that the congestion control

917
00:35:07,080 --> 00:35:08,700
says you know what I I know I'm not

918
00:35:08,700 --> 00:35:09,780
going to send this packet because I

919
00:35:09,780 --> 00:35:11,460
don't have a window open this in this

920
00:35:11,460 --> 00:35:13,079
packet so that's where an immediate

921
00:35:13,079 --> 00:35:15,839
priority can help on on a marking from

922
00:35:15,839 --> 00:35:17,880
the app layer to the to the quick layer

923
00:35:17,880 --> 00:35:19,980
it can drop something immediately or

924
00:35:19,980 --> 00:35:22,500
hold something back immediately but the

925
00:35:22,500 --> 00:35:25,260
longer time windows those are going to

926
00:35:25,260 --> 00:35:27,359
be controlled by rate controller

927
00:35:27,359 --> 00:35:29,160
feedback to change the media encoding

928
00:35:29,160 --> 00:35:30,000
itself

929
00:35:30,000 --> 00:35:32,220
so I think it's important to keep keep

930
00:35:32,220 --> 00:35:34,980
those things in mind and also the

931
00:35:34,980 --> 00:35:36,180
difference between

932
00:35:36,180 --> 00:35:38,220
congestion control decisions to do

933
00:35:38,220 --> 00:35:40,320
something for internal cues versus how

934
00:35:40,320 --> 00:35:42,540
they get marked for Network cues because

935
00:35:42,540 --> 00:35:46,560
you know Wireless you know wmm and and

936
00:35:46,560 --> 00:35:49,680
Mobile Wireless qcis and and we know

937
00:35:49,680 --> 00:35:51,920
wired dscps and things like that

938
00:35:51,920 --> 00:35:54,180
there should be different ways to map

939
00:35:54,180 --> 00:35:56,880
the application Level priorities to

940
00:35:56,880 --> 00:35:59,339
those Network priorities and I think

941
00:35:59,339 --> 00:36:01,020
it's important to get that right in in

942
00:36:01,020 --> 00:36:02,460
these drafts as well

943
00:36:02,460 --> 00:36:04,440
yeah one thing I didn't mention and you

944
00:36:04,440 --> 00:36:06,060
rightly pointed out is that these don't

945
00:36:06,060 --> 00:36:07,440
have to be the same bit rate like these

946
00:36:07,440 --> 00:36:09,540
segments the encoder as it sees

947
00:36:09,540 --> 00:36:11,400
congestion can start decreasing the bit

948
00:36:11,400 --> 00:36:13,800
rate in response this is meant to be a

949
00:36:13,800 --> 00:36:15,359
response when you can't change the

950
00:36:15,359 --> 00:36:16,740
encoder in time especially for

951
00:36:16,740 --> 00:36:18,599
contribution like you have to switch it

952
00:36:18,599 --> 00:36:21,960
switch Renditions and iframe boundaries

953
00:36:21,960 --> 00:36:24,359
um but yeah and and prioritizations only

954
00:36:24,359 --> 00:36:27,000
as effective as how quickly you can

955
00:36:27,000 --> 00:36:28,800
detect congestion if you have something

956
00:36:28,800 --> 00:36:30,420
like buffer bloat

957
00:36:30,420 --> 00:36:31,460
everything's over the network

958
00:36:31,460 --> 00:36:33,900
unprioritized so giving more information

959
00:36:33,900 --> 00:36:36,900
to the network layer helps as well and I

960
00:36:36,900 --> 00:36:39,300
think this this order that you have

961
00:36:39,300 --> 00:36:40,200
um

962
00:36:40,200 --> 00:36:42,000
I think it came across in the

963
00:36:42,000 --> 00:36:43,200
presentation as this is something baked

964
00:36:43,200 --> 00:36:45,180
into the protocol but that's an

965
00:36:45,180 --> 00:36:46,560
application Level thing that it can just

966
00:36:46,560 --> 00:36:48,839
decide whatever

967
00:36:48,839 --> 00:36:50,700
um you know delivery Priority it wants

968
00:36:50,700 --> 00:36:52,800
uh for things because for for some

969
00:36:52,800 --> 00:36:53,880
people the user experience may be

970
00:36:53,880 --> 00:36:55,440
terrible if it's stuttering that that

971
00:36:55,440 --> 00:36:56,760
order that you showed before would be

972
00:36:56,760 --> 00:36:58,800
under congestion you your video is

973
00:36:58,800 --> 00:37:00,599
constantly stuttering right you you

974
00:37:00,599 --> 00:37:02,460
cancel something that's being played

975
00:37:02,460 --> 00:37:04,020
right now and you try to play the Live

976
00:37:04,020 --> 00:37:06,180
Edge and so you get someone you know

977
00:37:06,180 --> 00:37:08,099
always for half a second of the Live

978
00:37:08,099 --> 00:37:09,900
Edge instead of a full second of

979
00:37:09,900 --> 00:37:12,359
continuous video so I think that user

980
00:37:12,359 --> 00:37:14,040
experience is up to the app to figure

981
00:37:14,040 --> 00:37:16,380
out what the right you know order and

982
00:37:16,380 --> 00:37:18,359
priorities should be not something back

983
00:37:18,359 --> 00:37:20,880
into the into the protocol

984
00:37:20,880 --> 00:37:23,099
uh thanks for that I will notice that

985
00:37:23,099 --> 00:37:24,720
some of the discussion that's currently

986
00:37:24,720 --> 00:37:28,859
happening uh on the uh chat uh has uh

987
00:37:28,859 --> 00:37:30,720
has touched on ABR and other things like

988
00:37:30,720 --> 00:37:32,520
that so if you're watching this on

989
00:37:32,520 --> 00:37:34,920
YouTube please do go seek out uh that

990
00:37:34,920 --> 00:37:37,079
chat stream as well uh which should be

991
00:37:37,079 --> 00:37:39,839
linked from uh the iitf site uh because

992
00:37:39,839 --> 00:37:41,880
there's uh certainly some working group

993
00:37:41,880 --> 00:37:44,460
discussion happening in that I'm sure

994
00:37:44,460 --> 00:37:47,640
I'm from Huawei and I see is a combined

995
00:37:47,640 --> 00:37:50,700
protocol from three dropped but there is

996
00:37:50,700 --> 00:37:52,859
a lot of things in quick cards missing

997
00:37:52,859 --> 00:37:55,099
here I think the pop sub relationship

998
00:37:55,099 --> 00:37:58,800
and they use Quick datagram and for the

999
00:37:58,800 --> 00:38:01,380
pub sub I think maybe it can bring a lot

1000
00:38:01,380 --> 00:38:03,960
of State in the Renee I think that's why

1001
00:38:03,960 --> 00:38:05,099
you drop it

1002
00:38:05,099 --> 00:38:07,380
yeah this is meant to be a base draft as

1003
00:38:07,380 --> 00:38:10,079
when we take everything combined and the

1004
00:38:10,079 --> 00:38:11,579
idea is something like quick R could

1005
00:38:11,579 --> 00:38:13,740
either be added on top of this draft or

1006
00:38:13,740 --> 00:38:15,599
just a separate draft entirely we're not

1007
00:38:15,599 --> 00:38:16,859
sure yet this is meant to be the common

1008
00:38:16,859 --> 00:38:18,140
ground

1009
00:38:18,140 --> 00:38:21,839
yeah I can see the pops up being

1010
00:38:21,839 --> 00:38:25,020
implemented over over these drugs and

1011
00:38:25,020 --> 00:38:27,000
maybe you're not in there but the quick

1012
00:38:27,000 --> 00:38:30,780
datagram scene to do something new to in

1013
00:38:30,780 --> 00:38:34,260
the bass drops so uh

1014
00:38:34,260 --> 00:38:37,500
I think in um quick streams are more

1015
00:38:37,500 --> 00:38:39,720
than capable of doing even real-time

1016
00:38:39,720 --> 00:38:42,180
latency so as long as again you have

1017
00:38:42,180 --> 00:38:44,820
some way of deciding which quick streams

1018
00:38:44,820 --> 00:38:46,740
to send first and which fragments to

1019
00:38:46,740 --> 00:38:48,960
send first so I don't think datagrams

1020
00:38:48,960 --> 00:38:50,760
are necessary

1021
00:38:50,760 --> 00:38:52,020
um which is a controversial statement

1022
00:38:52,020 --> 00:38:55,680
but um uh yeah by having more tight

1023
00:38:55,680 --> 00:38:56,940
control over what the quick library

1024
00:38:56,940 --> 00:38:58,440
sends

1025
00:38:58,440 --> 00:39:00,300
end of the day it's the same media

1026
00:39:00,300 --> 00:39:02,220
getting fragmented the difference is if

1027
00:39:02,220 --> 00:39:03,780
you do it in the application layer or if

1028
00:39:03,780 --> 00:39:05,820
quick does it as long as you can tell

1029
00:39:05,820 --> 00:39:07,560
the quick library to fragment in such a

1030
00:39:07,560 --> 00:39:10,619
way it's the same thing yeah I think RTP

1031
00:39:10,619 --> 00:39:12,780
is a kind of like the quick datagram

1032
00:39:12,780 --> 00:39:16,140
instead of the stream right so the

1033
00:39:16,140 --> 00:39:19,680
benefits by using the datagram is that

1034
00:39:19,680 --> 00:39:22,380
you can pre-plan some metadata to each

1035
00:39:22,380 --> 00:39:23,460
datagram

1036
00:39:23,460 --> 00:39:26,880
so you can drop it in more more

1037
00:39:26,880 --> 00:39:29,599
fine-grained way

1038
00:39:29,599 --> 00:39:32,820
okay yeah possibly

1039
00:39:32,820 --> 00:39:35,420
fierce

1040
00:39:38,160 --> 00:39:41,280
I guess the the Assumption I appears a

1041
00:39:41,280 --> 00:39:44,160
handle on the BBC r d is um

1042
00:39:44,160 --> 00:39:46,920
the Assumption here was was is sort of

1043
00:39:46,920 --> 00:39:48,900
traditional kind of representation kind

1044
00:39:48,900 --> 00:39:50,640
of breakdown of the video as opposed to

1045
00:39:50,640 --> 00:39:54,359
like SVC type uh kind of so then if you

1046
00:39:54,359 --> 00:39:55,859
think if we're thinking that then it's

1047
00:39:55,859 --> 00:39:58,560
then are you gonna is there an ABR stage

1048
00:39:58,560 --> 00:40:00,540
or is this really the ABR

1049
00:40:00,540 --> 00:40:02,099
um because I guess that's happening in

1050
00:40:02,099 --> 00:40:04,020
webrtc already

1051
00:40:04,020 --> 00:40:08,579
um with the SFU approach where you just

1052
00:40:08,579 --> 00:40:10,560
pull things out I sort of wondered you

1053
00:40:10,560 --> 00:40:11,760
thought about that because it's just

1054
00:40:11,760 --> 00:40:14,460
sort of seems to be quite sort of low

1055
00:40:14,460 --> 00:40:15,540
level

1056
00:40:15,540 --> 00:40:18,480
ipb based but

1057
00:40:18,480 --> 00:40:21,480
so first off we're I'm doing ABR for

1058
00:40:21,480 --> 00:40:23,579
we're using this approach uh the idea

1059
00:40:23,579 --> 00:40:25,740
being is that the sender chooses which

1060
00:40:25,740 --> 00:40:28,800
of these segments to send So based on

1061
00:40:28,800 --> 00:40:30,480
the congestion window it can switch down

1062
00:40:30,480 --> 00:40:33,720
a rendition uh you did mention SVC now

1063
00:40:33,720 --> 00:40:35,760
very quickly

1064
00:40:35,760 --> 00:40:38,700
switch to just in case somebody asks

1065
00:40:38,700 --> 00:40:40,859
um this is an example don't overthink

1066
00:40:40,859 --> 00:40:42,780
this but the idea is you could have a

1067
00:40:42,780 --> 00:40:45,540
base layer like 360p and then you can

1068
00:40:45,540 --> 00:40:47,880
have segments that build on top of

1069
00:40:47,880 --> 00:40:49,740
um so SPC people don't know you have a

1070
00:40:49,740 --> 00:40:52,680
basin layer 360p in this case and you

1071
00:40:52,680 --> 00:40:54,900
could have enhancement layers on top so

1072
00:40:54,900 --> 00:40:56,280
we're pretty much just sending SBC

1073
00:40:56,280 --> 00:40:58,079
layers as quick streams is more or less

1074
00:40:58,079 --> 00:41:00,180
this proposal but I don't know enough

1075
00:41:00,180 --> 00:41:03,480
about SVC this is just like an idea

1076
00:41:03,480 --> 00:41:05,339
right okay yeah I thought it should it

1077
00:41:05,339 --> 00:41:07,200
seemed like it would naturally extend to

1078
00:41:07,200 --> 00:41:08,820
it in a way but then in another sense it

1079
00:41:08,820 --> 00:41:09,960
would then maybe

1080
00:41:09,960 --> 00:41:12,780
uh you wouldn't necessarily need this

1081
00:41:12,780 --> 00:41:14,880
would become the kind of ABR

1082
00:41:14,880 --> 00:41:17,339
um aspect although I don't think we want

1083
00:41:17,339 --> 00:41:19,020
to require SVC

1084
00:41:19,020 --> 00:41:21,720
right and and the prioritization thing

1085
00:41:21,720 --> 00:41:24,180
so that would be happening kind of

1086
00:41:24,180 --> 00:41:26,579
in in a potentially some kind of switch

1087
00:41:26,579 --> 00:41:29,400
relay entity or some kind of a quick

1088
00:41:29,400 --> 00:41:31,980
relay kind of entity where so

1089
00:41:31,980 --> 00:41:33,960
so then I guess it was a previous one

1090
00:41:33,960 --> 00:41:36,780
about how that Maps down to the actual

1091
00:41:36,780 --> 00:41:37,980
Network

1092
00:41:37,980 --> 00:41:40,200
priorities we're going to cover that a

1093
00:41:40,200 --> 00:41:41,820
good bit in the next okay so if you're

1094
00:41:41,820 --> 00:41:43,320
going to hold that for the next fine

1095
00:41:43,320 --> 00:41:45,420
fine okay thanks

1096
00:41:45,420 --> 00:41:47,460
um and just uh the treasure about to

1097
00:41:47,460 --> 00:41:48,900
lock the queue so if you feel like you

1098
00:41:48,900 --> 00:41:50,339
want to be uh following up on this

1099
00:41:50,339 --> 00:41:54,078
please get in the queue uh now

1100
00:41:54,180 --> 00:41:56,540
Christian

1101
00:41:58,920 --> 00:42:01,980
uh nice presentation Luke I mean I I

1102
00:42:01,980 --> 00:42:05,099
like the simplification it makes the

1103
00:42:05,099 --> 00:42:07,079
thing easy to understand

1104
00:42:07,079 --> 00:42:10,680
uh one thing that is missed in the

1105
00:42:10,680 --> 00:42:14,720
simplification is the effect of these

1106
00:42:14,720 --> 00:42:17,940
segmentation on relays

1107
00:42:17,940 --> 00:42:20,940
because if you have a set of streams as

1108
00:42:20,940 --> 00:42:23,760
you describe then you are going to get

1109
00:42:23,760 --> 00:42:27,720
head offline blocking on these streams

1110
00:42:27,720 --> 00:42:31,079
and if you have a series of relays then

1111
00:42:31,079 --> 00:42:33,660
you are going to get head of line of

1112
00:42:33,660 --> 00:42:36,480
blocking at each of the relay

1113
00:42:36,480 --> 00:42:39,180
and the delays induced by head of line

1114
00:42:39,180 --> 00:42:42,420
blocking will combine

1115
00:42:42,420 --> 00:42:45,020
and that's the reason why I had been

1116
00:42:45,020 --> 00:42:47,400
exploring how to do the same kind of

1117
00:42:47,400 --> 00:42:50,099
architecture with datagrams so that

1118
00:42:50,099 --> 00:42:52,079
effectively when you have three layers

1119
00:42:52,079 --> 00:42:55,020
you get fraction of the streams in the

1120
00:42:55,020 --> 00:42:57,480
datagrams and you can decide to for them

1121
00:42:57,480 --> 00:43:00,180
immediately thus avoiding the end of

1122
00:43:00,180 --> 00:43:02,839
line blocking

1123
00:43:03,119 --> 00:43:05,819
yeah I'll let Cullen cover that more but

1124
00:43:05,819 --> 00:43:07,859
just really simple response that assumes

1125
00:43:07,859 --> 00:43:10,020
that you're reading streams in order and

1126
00:43:10,020 --> 00:43:12,359
then writing them in order but you can

1127
00:43:12,359 --> 00:43:13,859
get around that if you can read and

1128
00:43:13,859 --> 00:43:15,900
write out of order to Quick streams uh

1129
00:43:15,900 --> 00:43:17,579
beholden to flow control

1130
00:43:17,579 --> 00:43:20,460
uh so that's that's that's that's yeah I

1131
00:43:20,460 --> 00:43:22,859
I understand what you said there but

1132
00:43:22,859 --> 00:43:25,980
that's extremely hard to do because the

1133
00:43:25,980 --> 00:43:28,020
reading in I mean

1134
00:43:28,020 --> 00:43:29,880
basically if you're doing datagrams your

1135
00:43:29,880 --> 00:43:31,440
application being in control can do

1136
00:43:31,440 --> 00:43:32,700
whatever

1137
00:43:32,700 --> 00:43:35,700
if if you are doing streams the

1138
00:43:35,700 --> 00:43:38,400
application is not in control and this

1139
00:43:38,400 --> 00:43:40,200
business of reading steam out of order

1140
00:43:40,200 --> 00:43:43,460
is really really hard

1141
00:43:43,740 --> 00:43:45,599
I would say this is a general problem

1142
00:43:45,599 --> 00:43:48,599
for quick relays like even HTTP suffers

1143
00:43:48,599 --> 00:43:51,599
from this where a gap for packet loss

1144
00:43:51,599 --> 00:43:52,740
will cause

1145
00:43:52,740 --> 00:43:57,200
um on blocking but yeah for sure

1146
00:43:58,980 --> 00:44:01,400
Victor

1147
00:44:05,819 --> 00:44:09,000
uh Victor vasilia for Google uh I just

1148
00:44:09,000 --> 00:44:12,740
wanted quickly to say uh that uh

1149
00:44:12,740 --> 00:44:16,380
supports this proposal I'm not sure if

1150
00:44:16,380 --> 00:44:18,960
in a stage for adoption but whatever

1151
00:44:18,960 --> 00:44:21,660
there is that's not how to do looks very

1152
00:44:21,660 --> 00:44:23,940
good uh and thank you very much for

1153
00:44:23,940 --> 00:44:26,480
working this

1154
00:44:27,300 --> 00:44:29,540
foreign

1155
00:44:38,420 --> 00:44:42,119
okay is it better now cool so thanks

1156
00:44:42,119 --> 00:44:43,980
Luke for the presentation on trying to

1157
00:44:43,980 --> 00:44:45,839
kind of combine things good things from

1158
00:44:45,839 --> 00:44:48,060
all the protocols and I agree this this

1159
00:44:48,060 --> 00:44:50,400
is a good start and we have quite a bit

1160
00:44:50,400 --> 00:44:52,079
of things to cover to make it more

1161
00:44:52,079 --> 00:44:55,140
usable uh especially uh thinking uh

1162
00:44:55,140 --> 00:44:56,940
end-to-end protocol not just the

1163
00:44:56,940 --> 00:44:58,880
transport but also the relays and

1164
00:44:58,880 --> 00:45:00,839
consumption side how do you ask for

1165
00:45:00,839 --> 00:45:03,119
things they all depend on how do you

1166
00:45:03,119 --> 00:45:04,920
break the things to start with so that

1167
00:45:04,920 --> 00:45:06,900
we can Define the internal protocol I

1168
00:45:06,900 --> 00:45:07,920
think we need to cut some of those

1169
00:45:07,920 --> 00:45:10,079
pieces in and I want to kind of talk on

1170
00:45:10,079 --> 00:45:12,540
a couple of things that was raised uh

1171
00:45:12,540 --> 00:45:15,119
some more on someone else uh on on the

1172
00:45:15,119 --> 00:45:17,760
delivery on the priority I think there

1173
00:45:17,760 --> 00:45:19,200
are two different concepts uh like

1174
00:45:19,200 --> 00:45:21,960
priority is more like saying what how is

1175
00:45:21,960 --> 00:45:23,940
one thing important in relative to other

1176
00:45:23,940 --> 00:45:25,980
and delivery order is more like how my

1177
00:45:25,980 --> 00:45:27,900
decode decoder wants to get it in so

1178
00:45:27,900 --> 00:45:30,300
that it can do some good work and and

1179
00:45:30,300 --> 00:45:31,740
probably we need to kind of spend some

1180
00:45:31,740 --> 00:45:35,099
more time on thinking how uh relays

1181
00:45:35,099 --> 00:45:35,760
would

1182
00:45:35,760 --> 00:45:38,220
understand the data but not making too

1183
00:45:38,220 --> 00:45:39,780
much in protocol but leaving it to the

1184
00:45:39,780 --> 00:45:41,280
application space to Define how it is

1185
00:45:41,280 --> 00:45:43,980
done that would be helpful and another

1186
00:45:43,980 --> 00:45:47,579
point on the datagrams I agree uh at

1187
00:45:47,579 --> 00:45:49,200
some point as a group we have to kind of

1188
00:45:49,200 --> 00:45:50,819
make a decision on

1189
00:45:50,819 --> 00:45:53,640
um how do we meet the use cases that we

1190
00:45:53,640 --> 00:45:55,859
have mock chartered for

1191
00:45:55,859 --> 00:45:58,200
HTTP does not have to do real time so

1192
00:45:58,200 --> 00:46:00,720
hence it's okay but mock is not

1193
00:46:00,720 --> 00:46:02,640
constrained by that we have more use

1194
00:46:02,640 --> 00:46:05,220
cases and we might not do datagram it's

1195
00:46:05,220 --> 00:46:07,200
a a working group decision at some point

1196
00:46:07,200 --> 00:46:09,240
but we need to say Can what are protocol

1197
00:46:09,240 --> 00:46:10,980
be develop in water transport we do

1198
00:46:10,980 --> 00:46:14,339
works for the use cases thanks

1199
00:46:14,339 --> 00:46:17,359
Peter thatter

1200
00:46:17,460 --> 00:46:20,160
my audio working

1201
00:46:20,160 --> 00:46:21,359
yes

1202
00:46:21,359 --> 00:46:24,599
okay uh first I'd like to say I I think

1203
00:46:24,599 --> 00:46:26,339
it's good that you're building on web

1204
00:46:26,339 --> 00:46:28,440
transport uh that solves a lot of like

1205
00:46:28,440 --> 00:46:30,900
multiplexing issues

1206
00:46:30,900 --> 00:46:31,740
um

1207
00:46:31,740 --> 00:46:34,560
and it allows for I think you should

1208
00:46:34,560 --> 00:46:37,619
allow for either streams or datagrams I

1209
00:46:37,619 --> 00:46:39,420
think streams are fine to use but I

1210
00:46:39,420 --> 00:46:40,859
think it makes sense to allow the client

1211
00:46:40,859 --> 00:46:43,079
to do either and that's I believe the

1212
00:46:43,079 --> 00:46:45,900
direction RTP over quick is doing

1213
00:46:45,900 --> 00:46:46,560
um

1214
00:46:46,560 --> 00:46:48,180
during your presentation you mentioned

1215
00:46:48,180 --> 00:46:49,619
that you haven't defined it all the

1216
00:46:49,619 --> 00:46:52,680
media protocol are you looking for

1217
00:46:52,680 --> 00:46:54,960
contributions on that front I have

1218
00:46:54,960 --> 00:46:57,660
ideas that I'd be happy to contribute

1219
00:46:57,660 --> 00:46:59,220
yeah of course

1220
00:46:59,220 --> 00:47:00,420
um

1221
00:47:00,420 --> 00:47:02,460
if any if anybody wants to help either

1222
00:47:02,460 --> 00:47:04,980
on the protocol or on the demo or just

1223
00:47:04,980 --> 00:47:06,420
just want to talk to me go for it

1224
00:47:06,420 --> 00:47:08,339
looking for contributions

1225
00:47:08,339 --> 00:47:12,200
okay great thanks that's it

1226
00:47:13,200 --> 00:47:15,859
Randall

1227
00:47:22,740 --> 00:47:26,419
uh Randall we can't hear you yet

1228
00:47:29,460 --> 00:47:31,740
that I think will do it

1229
00:47:31,740 --> 00:47:34,319
there we go can you hear me now

1230
00:47:34,319 --> 00:47:35,460
yes

1231
00:47:35,460 --> 00:47:37,079
okay

1232
00:47:37,079 --> 00:47:37,800
um

1233
00:47:37,800 --> 00:47:42,720
uh I notice you have the SVC example

1234
00:47:42,720 --> 00:47:43,980
here

1235
00:47:43,980 --> 00:47:44,760
um

1236
00:47:44,760 --> 00:47:46,440
and

1237
00:47:46,440 --> 00:47:47,160
um

1238
00:47:47,160 --> 00:47:50,700
for the case where you're not using SEC

1239
00:47:50,700 --> 00:47:52,440
but you're just feeding multiple

1240
00:47:52,440 --> 00:47:54,060
different

1241
00:47:54,060 --> 00:47:58,560
um resolutions or bit rates up I'd be

1242
00:47:58,560 --> 00:48:00,960
interested to see how that Maps here but

1243
00:48:00,960 --> 00:48:03,420
also I notice also that all the

1244
00:48:03,420 --> 00:48:05,700
playheads you've defined in your other

1245
00:48:05,700 --> 00:48:10,079
diagram appear to be at the same

1246
00:48:10,079 --> 00:48:14,339
location I you know as in there all

1247
00:48:14,339 --> 00:48:15,839
these things are arriving at that

1248
00:48:15,839 --> 00:48:16,920
location and you have different

1249
00:48:16,920 --> 00:48:19,020
playheads which appear to be running off

1250
00:48:19,020 --> 00:48:22,940
the same buffer stream whatever okay

1251
00:48:22,940 --> 00:48:26,160
is that actually what's what's

1252
00:48:26,160 --> 00:48:29,220
anticipated here which would seem odd

1253
00:48:29,220 --> 00:48:30,780
except for maybe like the recording

1254
00:48:30,780 --> 00:48:34,579
stream uh recording head uh

1255
00:48:34,579 --> 00:48:37,440
uh or is there something more complex

1256
00:48:37,440 --> 00:48:41,520
going on here I uh

1257
00:48:41,520 --> 00:48:43,859
I think like it is actually getting fed

1258
00:48:43,859 --> 00:48:45,480
out to the different two different

1259
00:48:45,480 --> 00:48:48,060
locations which I imagine it is which

1260
00:48:48,060 --> 00:48:50,819
may be consuming different portions of a

1261
00:48:50,819 --> 00:48:52,040
multi-layered

1262
00:48:52,040 --> 00:48:54,900
multi-bitrate stream

1263
00:48:54,900 --> 00:48:57,599
okay sure so first off for simulcast

1264
00:48:57,599 --> 00:48:59,460
which is sending multiple Renditions

1265
00:48:59,460 --> 00:49:01,319
that don't depend on each other uh it's

1266
00:49:01,319 --> 00:49:03,240
effectively this SVC example you just

1267
00:49:03,240 --> 00:49:06,480
remove those arrows between layers so in

1268
00:49:06,480 --> 00:49:09,960
this case you'd send the 360p rendition

1269
00:49:09,960 --> 00:49:11,460
I got the highest priority will be

1270
00:49:11,460 --> 00:49:12,720
delivered first and then any extra

1271
00:49:12,720 --> 00:49:15,240
bandwidth will be sent on higher quality

1272
00:49:15,240 --> 00:49:17,460
ones so sending multiple Renditions

1273
00:49:17,460 --> 00:49:19,319
works very similar to SVC there's just

1274
00:49:19,319 --> 00:49:21,540
no dependencies between segments and

1275
00:49:21,540 --> 00:49:22,619
layers

1276
00:49:22,619 --> 00:49:25,380
and then finally for the playhead uh you

1277
00:49:25,380 --> 00:49:27,599
would not be receiving those all that's

1278
00:49:27,599 --> 00:49:30,780
just an um just a visualization the idea

1279
00:49:30,780 --> 00:49:32,040
is that different viewers will have

1280
00:49:32,040 --> 00:49:33,599
different network conditions so they all

1281
00:49:33,599 --> 00:49:36,180
have different starvation congestion I

1282
00:49:36,180 --> 00:49:37,619
just wanted to explain that even with

1283
00:49:37,619 --> 00:49:39,839
the same network situation you could

1284
00:49:39,839 --> 00:49:41,339
have different experiences based on the

1285
00:49:41,339 --> 00:49:44,160
size of that Jitter buffer and the size

1286
00:49:44,160 --> 00:49:45,720
of that Jitter buffer depends on the use

1287
00:49:45,720 --> 00:49:46,500
case

1288
00:49:46,500 --> 00:49:48,420
the desired user experience but

1289
00:49:48,420 --> 00:49:49,680
everybody would get a different

1290
00:49:49,680 --> 00:49:50,640
experience

1291
00:49:50,640 --> 00:49:52,740
yeah I think it would be more

1292
00:49:52,740 --> 00:49:55,140
illustrative and more better for

1293
00:49:55,140 --> 00:49:58,140
discussion if if we use a slightly more

1294
00:49:58,140 --> 00:50:00,240
real world case for that because that

1295
00:50:00,240 --> 00:50:02,640
affects some of these these questions

1296
00:50:02,640 --> 00:50:06,799
and answers about how to do this

1297
00:50:07,500 --> 00:50:09,960
thank you thank you

1298
00:50:09,960 --> 00:50:12,300
uh I think that brings us to the kind of

1299
00:50:12,300 --> 00:50:15,060
next steps question here the discussion

1300
00:50:15,060 --> 00:50:16,680
has been great today uh we definitely

1301
00:50:16,680 --> 00:50:17,819
have kicked off a lot of different

1302
00:50:17,819 --> 00:50:20,400
issues both at the mic line and again

1303
00:50:20,400 --> 00:50:22,859
I'll I'll point out during the chat uh

1304
00:50:22,859 --> 00:50:25,020
almost a distinct set of issues we've

1305
00:50:25,020 --> 00:50:26,640
gone through and Luke I entered you to

1306
00:50:26,640 --> 00:50:29,579
go through the chat and anybody who's

1307
00:50:29,579 --> 00:50:32,180
watching us uh post facto to do the same

1308
00:50:32,180 --> 00:50:34,140
uh we're definitely not going to do a

1309
00:50:34,140 --> 00:50:35,760
call for adoption today it's pretty

1310
00:50:35,760 --> 00:50:37,200
clear there's a lot of stuff that people

1311
00:50:37,200 --> 00:50:39,480
need to cash out first

1312
00:50:39,480 --> 00:50:41,099
um but please do keep the discussion

1313
00:50:41,099 --> 00:50:42,900
going on the list even though we will be

1314
00:50:42,900 --> 00:50:45,900
talking about an interim uh later on in

1315
00:50:45,900 --> 00:50:47,940
this meeting we really want to make sure

1316
00:50:47,940 --> 00:50:50,520
that we don't have to have the pace of

1317
00:50:50,520 --> 00:50:52,140
discussion only at these meetings

1318
00:50:52,140 --> 00:50:54,780
there's definitely a lot of this that

1319
00:50:54,780 --> 00:50:57,000
you can do in either uh mailing list

1320
00:50:57,000 --> 00:51:00,839
discussion or on the issues for uh the

1321
00:51:00,839 --> 00:51:04,260
GitHub repo uh so thanks very much

1322
00:51:04,260 --> 00:51:09,300
uh our next thing on the agenda is

1323
00:51:09,300 --> 00:51:11,520
a different presentation Colin you want

1324
00:51:11,520 --> 00:51:13,020
to come up and by the way if you have

1325
00:51:13,020 --> 00:51:15,839
not actually signed in to the

1326
00:51:15,839 --> 00:51:18,619
uh

1327
00:51:18,780 --> 00:51:20,700
the tool because you weren't thinking

1328
00:51:20,700 --> 00:51:21,660
you were going to get up or something

1329
00:51:21,660 --> 00:51:22,800
like that we'd really appreciate you

1330
00:51:22,800 --> 00:51:24,359
doing so because this is a pretty tight

1331
00:51:24,359 --> 00:51:27,960
fit for a room and we'd love to have a a

1332
00:51:27,960 --> 00:51:28,920
little bit

1333
00:51:28,920 --> 00:51:29,940
um

1334
00:51:29,940 --> 00:51:32,460
uh more

1335
00:51:32,460 --> 00:51:35,040
spacious space uh when we get to

1336
00:51:35,040 --> 00:51:38,000
Yokohama so

1337
00:51:41,000 --> 00:51:43,980
whoa I forgot I had to stand in the pink

1338
00:51:43,980 --> 00:51:45,960
Square here okay awesome

1339
00:51:45,960 --> 00:51:48,440
um thank you

1340
00:51:48,839 --> 00:51:51,900
dust that working okay when I step away

1341
00:51:51,900 --> 00:51:54,420
from the mic abuse me

1342
00:51:54,420 --> 00:51:55,920
um so I'm going to talk a little bit

1343
00:51:55,920 --> 00:51:58,740
about uh the relay stuff here and

1344
00:51:58,740 --> 00:52:01,200
whoa huge lag

1345
00:52:01,200 --> 00:52:05,220
um the goals of this discussion is uh is

1346
00:52:05,220 --> 00:52:06,599
really around

1347
00:52:06,599 --> 00:52:08,460
um understanding some of the commonality

1348
00:52:08,460 --> 00:52:09,960
of some of the questions that come up in

1349
00:52:09,960 --> 00:52:11,579
every one of the relay drafts that we've

1350
00:52:11,579 --> 00:52:13,920
had a lot of these drafts had relays or

1351
00:52:13,920 --> 00:52:15,780
things are a lot like them in some ways

1352
00:52:15,780 --> 00:52:18,059
so I want to try and hit uh some of the

1353
00:52:18,059 --> 00:52:20,339
similarities differences there's lots of

1354
00:52:20,339 --> 00:52:21,900
more nuanced things that even some of

1355
00:52:21,900 --> 00:52:22,680
them came up in the previous

1356
00:52:22,680 --> 00:52:24,480
conversation which which unfortunately I

1357
00:52:24,480 --> 00:52:25,859
don't really talk about at all in here

1358
00:52:25,859 --> 00:52:27,480
but I I think we're just you know it's a

1359
00:52:27,480 --> 00:52:28,559
first working group meeting we're trying

1360
00:52:28,559 --> 00:52:29,880
to figure out what are the the big

1361
00:52:29,880 --> 00:52:30,960
things and

1362
00:52:30,960 --> 00:52:33,240
and get them moving along and get us all

1363
00:52:33,240 --> 00:52:34,500
sort of talking on the same page and

1364
00:52:34,500 --> 00:52:35,700
having a good discussion about things

1365
00:52:35,700 --> 00:52:37,619
that need to be I was really um thankful

1366
00:52:37,619 --> 00:52:39,059
to like I like I love the last

1367
00:52:39,059 --> 00:52:40,500
discussion lots of good ideas came up

1368
00:52:40,500 --> 00:52:43,020
and it wasn't about like oh

1369
00:52:43,020 --> 00:52:45,059
a versus B it was like ah this is a

1370
00:52:45,059 --> 00:52:47,040
property that we need in the end system

1371
00:52:47,040 --> 00:52:48,359
we're going to do and that's that's a

1372
00:52:48,359 --> 00:52:49,680
great way to think about stuff at this

1373
00:52:49,680 --> 00:52:51,240
stage of a working group

1374
00:52:51,240 --> 00:52:53,339
so

1375
00:52:53,339 --> 00:52:56,520
uh where do relays fit in here

1376
00:52:56,520 --> 00:52:58,980
and you know in every one of these

1377
00:52:58,980 --> 00:53:00,300
systems that we're talking about on the

1378
00:53:00,300 --> 00:53:03,839
ingest side our producers are creating

1379
00:53:03,839 --> 00:53:05,280
some content they're pushing it over

1380
00:53:05,280 --> 00:53:07,559
some protocol up to something you can

1381
00:53:07,559 --> 00:53:09,000
call it a server you can call it a relay

1382
00:53:09,000 --> 00:53:10,740
you can call it a CDN but it's going up

1383
00:53:10,740 --> 00:53:11,640
to something we're going to talk a

1384
00:53:11,640 --> 00:53:13,380
little bit more of that second on the

1385
00:53:13,380 --> 00:53:15,300
other side something up probably in the

1386
00:53:15,300 --> 00:53:17,819
cloud and again it may be a CDN it may

1387
00:53:17,819 --> 00:53:19,260
be a relay it may be however you think

1388
00:53:19,260 --> 00:53:21,000
about it an SFU these types of things

1389
00:53:21,000 --> 00:53:22,619
are bringing the data down to the

1390
00:53:22,619 --> 00:53:25,079
consumers and

1391
00:53:25,079 --> 00:53:27,480
the key Point here is we're not trying

1392
00:53:27,480 --> 00:53:29,700
to Define and figure out exactly how

1393
00:53:29,700 --> 00:53:32,160
that CDN relay internals Works what

1394
00:53:32,160 --> 00:53:33,420
we're trying to make sure is that the

1395
00:53:33,420 --> 00:53:34,980
protocol we're defining here which is

1396
00:53:34,980 --> 00:53:38,160
going from the a to the X's or from the

1397
00:53:38,160 --> 00:53:39,960
Y's down to the C's has enough

1398
00:53:39,960 --> 00:53:42,180
information in it that the X and the Y's

1399
00:53:42,180 --> 00:53:44,099
devices whatever they are have the

1400
00:53:44,099 --> 00:53:46,079
information that they need to do they

1401
00:53:46,079 --> 00:53:48,839
need to achieve the end end-to-end user

1402
00:53:48,839 --> 00:53:50,460
experience that we want to achieve here

1403
00:53:50,460 --> 00:53:51,900
okay

1404
00:53:51,900 --> 00:53:53,760
so there's you know some things in there

1405
00:53:53,760 --> 00:53:55,380
that you end up having to know you know

1406
00:53:55,380 --> 00:53:57,480
if consumer C has twice the bandwidth as

1407
00:53:57,480 --> 00:53:59,760
consumer D and producer a is making

1408
00:53:59,760 --> 00:54:01,079
things in different resolutions or

1409
00:54:01,079 --> 00:54:02,220
whatever you know there's some

1410
00:54:02,220 --> 00:54:03,480
information you need to know in here

1411
00:54:03,480 --> 00:54:05,220
that helps works there's not much

1412
00:54:05,220 --> 00:54:06,300
information we're going to get to that

1413
00:54:06,300 --> 00:54:07,740
later

1414
00:54:07,740 --> 00:54:09,960
now the other things is

1415
00:54:09,960 --> 00:54:11,579
um we talk about the security on this

1416
00:54:11,579 --> 00:54:13,260
stuff so I wanted to just sort of hit a

1417
00:54:13,260 --> 00:54:14,880
little bit of the terminology in here on

1418
00:54:14,880 --> 00:54:17,579
this slide to just there's not

1419
00:54:17,579 --> 00:54:20,579
um I'm defining just by definition that

1420
00:54:20,579 --> 00:54:22,380
the ends are the producers and the

1421
00:54:22,380 --> 00:54:24,240
consumers things that have the ability

1422
00:54:24,240 --> 00:54:27,000
to uh encode or decode the video decrypt

1423
00:54:27,000 --> 00:54:28,500
it can see the media those types of

1424
00:54:28,500 --> 00:54:29,280
things

1425
00:54:29,280 --> 00:54:30,900
the relays in the middle here are not

1426
00:54:30,900 --> 00:54:32,339
ends they're middles

1427
00:54:32,339 --> 00:54:34,980
so they cannot do things like that

1428
00:54:34,980 --> 00:54:36,420
um and when we start talking about the

1429
00:54:36,420 --> 00:54:37,680
ability in our Charter we have a strong

1430
00:54:37,680 --> 00:54:39,000
requirement for end-to-end security

1431
00:54:39,000 --> 00:54:40,619
we're talking about the producers and

1432
00:54:40,619 --> 00:54:42,480
the consumers being able to do it if

1433
00:54:42,480 --> 00:54:43,980
there was a transcoder in the middle of

1434
00:54:43,980 --> 00:54:45,839
this network it has to access the media

1435
00:54:45,839 --> 00:54:47,900
obviously and which means it's an end a

1436
00:54:47,900 --> 00:54:50,099
transcoder is probably both a producer

1437
00:54:50,099 --> 00:54:53,400
and a consumer of different streams and

1438
00:54:53,400 --> 00:54:55,740
is is in the end

1439
00:54:55,740 --> 00:54:57,180
um you know what I think my audio is

1440
00:54:57,180 --> 00:54:58,319
really messed up I'm gonna take a mask

1441
00:54:58,319 --> 00:55:00,780
off here so

1442
00:55:00,780 --> 00:55:02,280
so

1443
00:55:02,280 --> 00:55:04,200
uh that that's what I mean by ends and

1444
00:55:04,200 --> 00:55:06,919
and such

1445
00:55:08,099 --> 00:55:11,359
next slide Maybe

1446
00:55:12,119 --> 00:55:14,700
back a slide maybe okay

1447
00:55:14,700 --> 00:55:17,040
so we do get the question of like well

1448
00:55:17,040 --> 00:55:18,900
do we have these who's going to provide

1449
00:55:18,900 --> 00:55:20,040
these relays and was one of the

1450
00:55:20,040 --> 00:55:21,359
questions that was raised a lot in the

1451
00:55:21,359 --> 00:55:22,740
beginning it will anybody build this

1452
00:55:22,740 --> 00:55:26,520
type of stuff and so uh there will

1453
00:55:26,520 --> 00:55:27,480
probably be a range of different people

1454
00:55:27,480 --> 00:55:28,920
to do it there's some companies that

1455
00:55:28,920 --> 00:55:30,780
have a CDN or something like it today

1456
00:55:30,780 --> 00:55:32,520
twitch is an example of this right they

1457
00:55:32,520 --> 00:55:33,780
have this they operate it themselves

1458
00:55:33,780 --> 00:55:35,400
they can deal with this stuff they want

1459
00:55:35,400 --> 00:55:36,660
to probably use some of the existing

1460
00:55:36,660 --> 00:55:37,980
thing to have and don't disrupt about

1461
00:55:37,980 --> 00:55:40,140
them uh there's companies like that you

1462
00:55:40,140 --> 00:55:43,020
know WebEx part of Cisco that uh today

1463
00:55:43,020 --> 00:55:45,359
does its own media nodes near the edge

1464
00:55:45,359 --> 00:55:46,740
and pushing them out to all of these

1465
00:55:46,740 --> 00:55:50,099
places but uh would would rather run

1466
00:55:50,099 --> 00:55:51,480
that on somebody else's infrastructure

1467
00:55:51,480 --> 00:55:52,619
and buy and there's there's companies

1468
00:55:52,619 --> 00:55:54,960
like Akamai cloudflareoplasty of all uh

1469
00:55:54,960 --> 00:55:56,640
talk to me about mock in various forms

1470
00:55:56,640 --> 00:55:58,319
and those types of things this company

1471
00:55:58,319 --> 00:56:00,300
likes interdigital that has drafts here

1472
00:56:00,300 --> 00:56:02,400
that are looking at relays that are

1473
00:56:02,400 --> 00:56:05,099
tightly tied to 5G Network optimizations

1474
00:56:05,099 --> 00:56:06,900
so they can provide a better experience

1475
00:56:06,900 --> 00:56:08,940
uh for the media than you could if if

1476
00:56:08,940 --> 00:56:10,200
you weren't so that there's there's a

1477
00:56:10,200 --> 00:56:13,319
range of those types of issues

1478
00:56:13,319 --> 00:56:15,960
so do I have a cube built up here warn

1479
00:56:15,960 --> 00:56:17,940
me if I do because I won't I will stop

1480
00:56:17,940 --> 00:56:21,599
if we need questions so what what really

1481
00:56:21,599 --> 00:56:23,579
drives the need for these relays why do

1482
00:56:23,579 --> 00:56:25,440
all these existing networks happen well

1483
00:56:25,440 --> 00:56:27,540
there's a bunch of different reasons uh

1484
00:56:27,540 --> 00:56:30,059
some of the sort of high so the two

1485
00:56:30,059 --> 00:56:32,819
biggest ones for me are one is on the

1486
00:56:32,819 --> 00:56:35,339
distribution side you you need fan out

1487
00:56:35,339 --> 00:56:37,740
you need some device that can you know

1488
00:56:37,740 --> 00:56:39,359
take your your content instead of just

1489
00:56:39,359 --> 00:56:40,859
going to one person spread it out to

1490
00:56:40,859 --> 00:56:42,599
hundreds of people or millions of people

1491
00:56:42,599 --> 00:56:44,339
and scale that up and these are a

1492
00:56:44,339 --> 00:56:46,200
convenient way to do that type of thing

1493
00:56:46,200 --> 00:56:48,359
and the closer you move that you can uh

1494
00:56:48,359 --> 00:56:50,099
have some bandwidth savings and some of

1495
00:56:50,099 --> 00:56:51,960
those types of other issues as well

1496
00:56:51,960 --> 00:56:53,819
then there's another point of you're

1497
00:56:53,819 --> 00:56:56,040
trying to get these relays closer to the

1498
00:56:56,040 --> 00:56:57,540
consumers or the producers so let's talk

1499
00:56:57,540 --> 00:56:59,579
about in the consumer case for a second

1500
00:56:59,579 --> 00:57:02,940
the closer it is uh the faster the less

1501
00:57:02,940 --> 00:57:04,559
round trip there is between the device

1502
00:57:04,559 --> 00:57:07,740
consuming it and the and where the

1503
00:57:07,740 --> 00:57:09,839
device that has a valid copy of the

1504
00:57:09,839 --> 00:57:12,000
media you're trying to receive and the

1505
00:57:12,000 --> 00:57:14,160
more you can squeeze the the time like

1506
00:57:14,160 --> 00:57:16,200
that that it takes to get a message back

1507
00:57:16,200 --> 00:57:18,180
and forth between those the more you can

1508
00:57:18,180 --> 00:57:20,040
use Quick streams and things like that

1509
00:57:20,040 --> 00:57:23,400
to re-transmit data you lost and still

1510
00:57:23,400 --> 00:57:25,619
not have it slide out and still not have

1511
00:57:25,619 --> 00:57:27,359
it extend the latency of your overall

1512
00:57:27,359 --> 00:57:29,220
delivery of the media from a glass to

1513
00:57:29,220 --> 00:57:31,380
glass point of view so this is why you

1514
00:57:31,380 --> 00:57:33,180
see so many CVS like any of the major

1515
00:57:33,180 --> 00:57:34,859
media networks today just even doing

1516
00:57:34,859 --> 00:57:37,020
Dash Ratio or something like that I mean

1517
00:57:37,020 --> 00:57:41,040
you don't try and uh deliver video to

1518
00:57:41,040 --> 00:57:45,780
users in Australia by using a CDN server

1519
00:57:45,780 --> 00:57:47,940
um in London it's it that's just not a

1520
00:57:47,940 --> 00:57:49,319
very effective way to do it you try and

1521
00:57:49,319 --> 00:57:50,940
get it close to there so that when

1522
00:57:50,940 --> 00:57:52,859
there's loss on a local land link it's a

1523
00:57:52,859 --> 00:57:55,020
slow it's a much faster place that you

1524
00:57:55,020 --> 00:57:56,579
can say I lost this packet please return

1525
00:57:56,579 --> 00:57:58,319
it and get it back to me so bringing

1526
00:57:58,319 --> 00:58:00,359
those things up now

1527
00:58:00,359 --> 00:58:03,000
some people like the 5G people want to

1528
00:58:03,000 --> 00:58:05,099
extend that much farther and closer out

1529
00:58:05,099 --> 00:58:06,480
to the edge than we've traditionally

1530
00:58:06,480 --> 00:58:08,460
seen in today's networks and that's one

1531
00:58:08,460 --> 00:58:09,480
of the things that's changing that

1532
00:58:09,480 --> 00:58:11,579
allows more bandwidths so that's some of

1533
00:58:11,579 --> 00:58:12,660
the things we're trying to hit here and

1534
00:58:12,660 --> 00:58:16,040
why we have these relays at all

1535
00:58:16,440 --> 00:58:18,660
so these operational requirements a few

1536
00:58:18,660 --> 00:58:20,280
of these comes out um

1537
00:58:20,280 --> 00:58:22,260
you know you want to minimize load and

1538
00:58:22,260 --> 00:58:24,119
make them easy to scale you know normal

1539
00:58:24,119 --> 00:58:25,500
sort of things and trying to develop

1540
00:58:25,500 --> 00:58:27,720
develop any Cloud Server

1541
00:58:27,720 --> 00:58:28,920
um you know you need to make them

1542
00:58:28,920 --> 00:58:30,540
configurable but fundamentally they're

1543
00:58:30,540 --> 00:58:31,920
making decisions about what to forward

1544
00:58:31,920 --> 00:58:33,720
what to drop okay that's really what

1545
00:58:33,720 --> 00:58:35,339
they do they take some packets in they

1546
00:58:35,339 --> 00:58:36,720
send some packets out and you decide

1547
00:58:36,720 --> 00:58:39,059
which one of those go in and out

1548
00:58:39,059 --> 00:58:41,040
um a lot of the requirement is drafts we

1549
00:58:41,040 --> 00:58:42,599
saw some sort of requirement to clearly

1550
00:58:42,599 --> 00:58:44,640
hand off a client to a new relay to

1551
00:58:44,640 --> 00:58:46,740
reschedule relays or reload balance take

1552
00:58:46,740 --> 00:58:48,359
something out of service and this is the

1553
00:58:48,359 --> 00:58:50,160
sort of go away messages you see in

1554
00:58:50,160 --> 00:58:51,599
several of the protocols so this is a

1555
00:58:51,599 --> 00:58:53,880
relay redirect type idea

1556
00:58:53,880 --> 00:58:55,380
um low latencies obviously the whole

1557
00:58:55,380 --> 00:58:57,240
point of this sort of thing uh and rapid

1558
00:58:57,240 --> 00:58:58,920
recovery from buildings these are all

1559
00:58:58,920 --> 00:59:00,240
requirements that we're going to have to

1560
00:59:00,240 --> 00:59:01,980
figure out how our protocol will help

1561
00:59:01,980 --> 00:59:03,960
what it what our protocol needs to be

1562
00:59:03,960 --> 00:59:05,280
able to support those operational

1563
00:59:05,280 --> 00:59:08,000
requirements

1564
00:59:08,720 --> 00:59:12,000
the um

1565
00:59:12,000 --> 00:59:14,760
again I'm just defining this as

1566
00:59:14,760 --> 00:59:16,920
terminology by by definition not some

1567
00:59:16,920 --> 00:59:18,660
logical sort of thing I'm splitting the

1568
00:59:18,660 --> 00:59:20,400
stuff that relays see or this goes

1569
00:59:20,400 --> 00:59:21,780
across the protocol into an envelope and

1570
00:59:21,780 --> 00:59:25,500
a payload okay so the payload is the

1571
00:59:25,500 --> 00:59:26,819
video content the audio content whatever

1572
00:59:26,819 --> 00:59:30,119
the media is from it may be encrypted it

1573
00:59:30,119 --> 00:59:32,720
may be DRM protected it may be anything

1574
00:59:32,720 --> 00:59:36,119
uh or it may be totally unencrypted as

1575
00:59:36,119 --> 00:59:38,400
well but the key point is the relay

1576
00:59:38,400 --> 00:59:40,260
can't depend on being able to look into

1577
00:59:40,260 --> 00:59:43,140
the payload to see it the envelope data

1578
00:59:43,140 --> 00:59:44,819
on the other hand is really what this

1579
00:59:44,819 --> 00:59:46,079
presentation is going to mostly be about

1580
00:59:46,079 --> 00:59:48,240
and this is the stuff what is it that

1581
00:59:48,240 --> 00:59:50,700
the relay needs to see you know in an IP

1582
00:59:50,700 --> 00:59:53,099
sense like you need to see your source

1583
00:59:53,099 --> 00:59:55,740
and destination IP addresses or a router

1584
00:59:55,740 --> 00:59:57,599
can't route it it's like that type of

1585
00:59:57,599 --> 00:59:59,280
stuff obviously our goal here will be

1586
00:59:59,280 --> 01:00:00,720
put the minimal stuff we can in the

1587
01:00:00,720 --> 01:00:03,359
envelope for for a lot of reasons

1588
01:00:03,359 --> 01:00:06,000
um and and do it so that that's just the

1589
01:00:06,000 --> 01:00:07,680
terminology I'm using to define those

1590
01:00:07,680 --> 01:00:09,299
two different chunks of sort of data

1591
01:00:09,299 --> 01:00:10,920
that we need to deal with

1592
01:00:10,920 --> 01:00:12,420
so

1593
01:00:12,420 --> 01:00:14,760
I don't want to delve deeply into what

1594
01:00:14,760 --> 01:00:16,740
all the drafts do on this but you know

1595
01:00:16,740 --> 01:00:19,440
warpad you know an ID for a stream and

1596
01:00:19,440 --> 01:00:21,359
some delivery Priority stuff perhaps

1597
01:00:21,359 --> 01:00:23,880
dependency list uh the deploy draft had

1598
01:00:23,880 --> 01:00:25,559
you know similar set of stuff with a

1599
01:00:25,559 --> 01:00:27,180
bunch more data that might help it work

1600
01:00:27,180 --> 01:00:30,180
in a 5G context uh you know quicker had

1601
01:00:30,180 --> 01:00:31,799
some sort of different things with you

1602
01:00:31,799 --> 01:00:33,599
know time to live or time stamps and

1603
01:00:33,599 --> 01:00:35,400
discardable but

1604
01:00:35,400 --> 01:00:37,200
the exact details of all those drafts

1605
01:00:37,200 --> 01:00:39,119
don't really matter what matters as we

1606
01:00:39,119 --> 01:00:40,559
start figuring out what our use cases

1607
01:00:40,559 --> 01:00:42,359
are that drive the need for chunks of

1608
01:00:42,359 --> 01:00:44,640
data that go into this envelope and and

1609
01:00:44,640 --> 01:00:45,660
what they are and I'm going to talk

1610
01:00:45,660 --> 01:00:47,280
about a couple of those in the slides

1611
01:00:47,280 --> 01:00:49,640
coming up

1612
01:00:49,920 --> 01:00:51,900
I can't see if anyone's on the Queue so

1613
01:00:51,900 --> 01:00:53,520
we will see it up in the right hand

1614
01:00:53,520 --> 01:00:57,740
corner oh okay cool I will see it then

1615
01:00:58,680 --> 01:01:00,660
so probably the biggest one and we are

1616
01:01:00,660 --> 01:01:02,220
talking about that earlier as this

1617
01:01:02,220 --> 01:01:04,079
priority and delivery order type stuff

1618
01:01:04,079 --> 01:01:06,000
and

1619
01:01:06,000 --> 01:01:08,400
all of the proposals have some form of

1620
01:01:08,400 --> 01:01:11,119
idea that there's there's sort of a base

1621
01:01:11,119 --> 01:01:14,099
priority related draft and I'm

1622
01:01:14,099 --> 01:01:15,720
struggling because different terms we

1623
01:01:15,720 --> 01:01:18,180
you know Luke says it's terminology is

1624
01:01:18,180 --> 01:01:19,980
hard here different drafts I've done

1625
01:01:19,980 --> 01:01:21,359
this a little bit different ways but

1626
01:01:21,359 --> 01:01:23,400
there is definitely a concept in all the

1627
01:01:23,400 --> 01:01:26,400
drafts that if your audio if your

1628
01:01:26,400 --> 01:01:28,740
application business logic feels that

1629
01:01:28,740 --> 01:01:30,540
audio is more important than a video

1630
01:01:30,540 --> 01:01:32,819
there's a way of indicating in there

1631
01:01:32,819 --> 01:01:35,160
that relays should forward audio before

1632
01:01:35,160 --> 01:01:37,380
they should bother forwarding video for

1633
01:01:37,380 --> 01:01:39,480
the same thing and similarly different

1634
01:01:39,480 --> 01:01:42,059
types of video might matter differently

1635
01:01:42,059 --> 01:01:43,859
um I was thinking about you know your

1636
01:01:43,859 --> 01:01:46,140
360p videos more important than a layer

1637
01:01:46,140 --> 01:01:47,880
than an adaptation layer that it goes

1638
01:01:47,880 --> 01:01:50,160
720p on top of it but you know as Luke

1639
01:01:50,160 --> 01:01:52,980
pointed out too uh if you have

1640
01:01:52,980 --> 01:01:55,079
advertising video and non-advertising

1641
01:01:55,079 --> 01:01:57,000
video your business application may say

1642
01:01:57,000 --> 01:01:59,700
business logic may be that the the ads

1643
01:01:59,700 --> 01:02:01,980
are more important right so there's some

1644
01:02:01,980 --> 01:02:04,020
application layer of things at that type

1645
01:02:04,020 --> 01:02:05,040
of

1646
01:02:05,040 --> 01:02:07,079
um idea

1647
01:02:07,079 --> 01:02:09,420
and then there's this stuff that has to

1648
01:02:09,420 --> 01:02:11,640
do with sort of delivery order

1649
01:02:11,640 --> 01:02:13,559
um some sort of numeric counter of these

1650
01:02:13,559 --> 01:02:15,059
things and that was a lot of what Luke

1651
01:02:15,059 --> 01:02:16,680
was talking about and helping to helping

1652
01:02:16,680 --> 01:02:18,420
try and motivate and explain his draft

1653
01:02:18,420 --> 01:02:19,819
of

1654
01:02:19,819 --> 01:02:23,160
look if if if you have some data that

1655
01:02:23,160 --> 01:02:25,079
depends if you have a p frame that

1656
01:02:25,079 --> 01:02:26,700
depends on an iframe but you can't

1657
01:02:26,700 --> 01:02:28,559
deliver the iframe there's really no

1658
01:02:28,559 --> 01:02:30,059
point in delivering the P frame it's

1659
01:02:30,059 --> 01:02:31,799
that data is useless there's nothing you

1660
01:02:31,799 --> 01:02:33,480
can do with it so there's some sort of

1661
01:02:33,480 --> 01:02:35,640
you know sense of of a natural ordering

1662
01:02:35,640 --> 01:02:38,880
that way there's also data that is so

1663
01:02:38,880 --> 01:02:40,740
old it is useless that's really what we

1664
01:02:40,740 --> 01:02:42,059
mean by real time when we talk about

1665
01:02:42,059 --> 01:02:44,040
real-time video right is is there's

1666
01:02:44,040 --> 01:02:46,680
stuff that's too old to be of any use

1667
01:02:46,680 --> 01:02:49,380
um and so the warp drafts you know took

1668
01:02:49,380 --> 01:02:51,240
the approach of uh the the newest thing

1669
01:02:51,240 --> 01:02:52,799
was always more most important in this

1670
01:02:52,799 --> 01:02:54,660
sort of context that might be uh that

1671
01:02:54,660 --> 01:02:56,940
might be completely right or mostly

1672
01:02:56,940 --> 01:02:58,440
right with some fine print and hand

1673
01:02:58,440 --> 01:02:59,640
waving and I'm sure the working group

1674
01:02:59,640 --> 01:03:02,579
will will dig into that deeper as as we

1675
01:03:02,579 --> 01:03:06,180
hit that but we we need some way of sort

1676
01:03:06,180 --> 01:03:09,059
of understanding uh the the decoder

1677
01:03:09,059 --> 01:03:11,400
order of these types of things uh of

1678
01:03:11,400 --> 01:03:12,900
what's needed at the other end and what

1679
01:03:12,900 --> 01:03:14,579
makes the sense to be delivered in that

1680
01:03:14,579 --> 01:03:16,859
so this is similar to you know an RTP

1681
01:03:16,859 --> 01:03:18,610
you had sequence numbers

1682
01:03:18,610 --> 01:03:19,200
[Music]

1683
01:03:19,200 --> 01:03:19,799
um

1684
01:03:19,799 --> 01:03:21,900
we have different stream or segment IDs

1685
01:03:21,900 --> 01:03:23,579
whatever we call stream segments layers

1686
01:03:23,579 --> 01:03:25,020
fragments

1687
01:03:25,020 --> 01:03:26,339
um we have you know that type of way we

1688
01:03:26,339 --> 01:03:27,839
need some way of ordering that and we

1689
01:03:27,839 --> 01:03:29,880
need to decide how that that ordering

1690
01:03:29,880 --> 01:03:31,859
number relates to the priority of it

1691
01:03:31,859 --> 01:03:34,200
being sent within the broader priority

1692
01:03:34,200 --> 01:03:37,440
of uh the audio is more important than

1693
01:03:37,440 --> 01:03:39,540
video so I see these as two different

1694
01:03:39,540 --> 01:03:41,700
things um we can I mean both

1695
01:03:41,700 --> 01:03:43,920
conceptually we clearly everybody agrees

1696
01:03:43,920 --> 01:03:45,119
there's two different things and we need

1697
01:03:45,119 --> 01:03:47,040
both of them here how they get mapped to

1698
01:03:47,040 --> 01:03:49,140
bits may be one thing two things we can

1699
01:03:49,140 --> 01:03:50,520
sort of debate that later but I think

1700
01:03:50,520 --> 01:03:52,319
that the key thing for us is to

1701
01:03:52,319 --> 01:03:55,799
understand what it is we want the the

1702
01:03:55,799 --> 01:03:58,319
protocol to deliver and that we want

1703
01:03:58,319 --> 01:04:00,599
relays to be able to look at this type

1704
01:04:00,599 --> 01:04:02,880
of information and start to to deal with

1705
01:04:02,880 --> 01:04:04,859
it as they forwarded something on and

1706
01:04:04,859 --> 01:04:07,680
remember if if if a video stream was

1707
01:04:07,680 --> 01:04:08,579
sent up

1708
01:04:08,579 --> 01:04:09,960
um

1709
01:04:09,960 --> 01:04:12,240
you know in multiple Renditions one at

1710
01:04:12,240 --> 01:04:14,819
one megabit and one at two megabits and

1711
01:04:14,819 --> 01:04:16,440
there's a relay that has access to both

1712
01:04:16,440 --> 01:04:18,359
of those there's we will be doing the

1713
01:04:18,359 --> 01:04:19,740
normal thing of clients you know

1714
01:04:19,740 --> 01:04:21,180
connecting and asking for the one that

1715
01:04:21,180 --> 01:04:22,619
has the right bandwidth for what they

1716
01:04:22,619 --> 01:04:24,000
need none of that's taking away from

1717
01:04:24,000 --> 01:04:25,200
that but you still need to understand

1718
01:04:25,200 --> 01:04:27,180
what's priority to deliver inside of

1719
01:04:27,180 --> 01:04:28,079
that

1720
01:04:28,079 --> 01:04:32,180
uh no questions okay

1721
01:04:32,400 --> 01:04:33,960
so this is actually what I think is the

1722
01:04:33,960 --> 01:04:35,819
most thing to land in the envelope paid

1723
01:04:35,819 --> 01:04:37,260
actually

1724
01:04:37,260 --> 01:04:41,220
uh dependency indication so this gets to

1725
01:04:41,220 --> 01:04:43,920
how explicit we want to do get about

1726
01:04:43,920 --> 01:04:45,000
this and I think this would be a great

1727
01:04:45,000 --> 01:04:45,960
thing to get some feedback from the

1728
01:04:45,960 --> 01:04:48,240
working group on today as mine yes so

1729
01:04:48,240 --> 01:04:51,119
one way that we could do and one of one

1730
01:04:51,119 --> 01:04:53,040
of the warp uh drafts had a proposal for

1731
01:04:53,040 --> 01:04:54,000
this is I mean we could have a

1732
01:04:54,000 --> 01:04:56,579
dependency list where we could say these

1733
01:04:56,579 --> 01:04:59,460
uh chunks of data segments of data

1734
01:04:59,460 --> 01:05:01,500
depend on these other

1735
01:05:01,500 --> 01:05:04,079
um chunks like by named ID and that

1736
01:05:04,079 --> 01:05:05,339
relays and things could look at that

1737
01:05:05,339 --> 01:05:07,380
figure out what to do with them

1738
01:05:07,380 --> 01:05:08,280
um

1739
01:05:08,280 --> 01:05:09,839
some of the other drafts quicker being

1740
01:05:09,839 --> 01:05:11,700
one of them use the idea that there'd

1741
01:05:11,700 --> 01:05:13,859
just be like a priority like you know

1742
01:05:13,859 --> 01:05:16,440
audios Priority One uh you know 360ps

1743
01:05:16,440 --> 01:05:19,799
priority two 720p is priority three and

1744
01:05:19,799 --> 01:05:21,059
that the application would pick those

1745
01:05:21,059 --> 01:05:22,740
priorities but with a small number of

1746
01:05:22,740 --> 01:05:25,260
set of numeric priorities they would be

1747
01:05:25,260 --> 01:05:28,920
able to deliver you know get the the end

1748
01:05:28,920 --> 01:05:31,079
effect they wanted on the relays so one

1749
01:05:31,079 --> 01:05:31,980
of the questions that we'll have to

1750
01:05:31,980 --> 01:05:34,380
figure out uh from the working group and

1751
01:05:34,380 --> 01:05:35,780
is

1752
01:05:35,780 --> 01:05:38,700
should we have a dependency an explicit

1753
01:05:38,700 --> 01:05:40,380
dependency list or can we get away with

1754
01:05:40,380 --> 01:05:41,640
just having this sort of you know

1755
01:05:41,640 --> 01:05:43,859
General priority idea to be able to do

1756
01:05:43,859 --> 01:05:45,660
this in the relays

1757
01:05:45,660 --> 01:05:46,980
um and what you know what do we need to

1758
01:05:46,980 --> 01:05:50,359
do there that's sort of one of the areas

1759
01:05:53,400 --> 01:05:56,700
caching is a is another uh area where uh

1760
01:05:56,700 --> 01:05:58,559
the quicker drafts did assume sort of

1761
01:05:58,559 --> 01:06:00,359
this but we could or could not have this

1762
01:06:00,359 --> 01:06:03,420
so this is not very important on the

1763
01:06:03,420 --> 01:06:04,920
Ingress side this is all about the

1764
01:06:04,920 --> 01:06:06,420
distribution side where it's probably

1765
01:06:06,420 --> 01:06:07,619
more important

1766
01:06:07,619 --> 01:06:11,040
and on that side you come to the idea of

1767
01:06:11,040 --> 01:06:15,299
is it useful for uh one of the relays to

1768
01:06:15,299 --> 01:06:18,480
have a short-term amount of media data

1769
01:06:18,480 --> 01:06:20,819
that's there available to it and this

1770
01:06:20,819 --> 01:06:22,619
can help deal with tasks like when a

1771
01:06:22,619 --> 01:06:25,559
client first joins there's already the

1772
01:06:25,559 --> 01:06:27,960
previous iframe is there in cash and

1773
01:06:27,960 --> 01:06:29,880
they can get the previous iframe instead

1774
01:06:29,880 --> 01:06:31,859
of waiting for the next iframe to be

1775
01:06:31,859 --> 01:06:34,500
transmitted and sent into the system it

1776
01:06:34,500 --> 01:06:36,839
could be pushed a little bit farther you

1777
01:06:36,839 --> 01:06:38,280
know some interactive applications Skype

1778
01:06:38,280 --> 01:06:39,660
long ago even sort of did it but you

1779
01:06:39,660 --> 01:06:41,039
know various applications playing with

1780
01:06:41,039 --> 01:06:43,020
the idea of well if you missed some

1781
01:06:43,020 --> 01:06:44,940
packets you could you could pause the

1782
01:06:44,940 --> 01:06:46,680
stream temporarily roll back in time and

1783
01:06:46,680 --> 01:06:48,180
then play quickly forward you know those

1784
01:06:48,180 --> 01:06:51,240
types of ideas where you can catch up

1785
01:06:51,240 --> 01:06:52,680
um we could or could not support those

1786
01:06:52,680 --> 01:06:53,880
this could be something that the

1787
01:06:53,880 --> 01:06:55,740
protocol if we did this at all I'm sure

1788
01:06:55,740 --> 01:06:56,760
it's something that would be optional

1789
01:06:56,760 --> 01:06:58,559
for the relays to ever cash more than

1790
01:06:58,559 --> 01:07:00,299
zero bytes of data

1791
01:07:00,299 --> 01:07:02,280
um but you know caching and whether we

1792
01:07:02,280 --> 01:07:03,420
want to deal with that is one of the

1793
01:07:03,420 --> 01:07:05,160
issues that we'll have to touch on on

1794
01:07:05,160 --> 01:07:07,500
that side it can be done as completely

1795
01:07:07,500 --> 01:07:09,359
extension draft right it's those types

1796
01:07:09,359 --> 01:07:11,598
of things

1797
01:07:12,539 --> 01:07:16,140
let's see uh security and privacy so

1798
01:07:16,140 --> 01:07:17,700
as I said at the beginning

1799
01:07:17,700 --> 01:07:20,760
um the relays can only uh read the

1800
01:07:20,760 --> 01:07:25,619
envelope data uh the and other network

1801
01:07:25,619 --> 01:07:28,740
elements can't uh you know routers along

1802
01:07:28,740 --> 01:07:30,539
the way this is all inside a normal

1803
01:07:30,539 --> 01:07:32,700
quick TLS connection between the

1804
01:07:32,700 --> 01:07:34,740
consumers or producers and the relays

1805
01:07:34,740 --> 01:07:36,839
okay so this doesn't change quick TLS in

1806
01:07:36,839 --> 01:07:38,460
any way like everything's encrypted over

1807
01:07:38,460 --> 01:07:40,500
the network with quick TLS exactly as

1808
01:07:40,500 --> 01:07:41,579
you would expect

1809
01:07:41,579 --> 01:07:44,640
and exactly like today's cdns as well

1810
01:07:44,640 --> 01:07:47,579
um on on a classic CDN today yeah every

1811
01:07:47,579 --> 01:07:49,880
connection might be encrypted with https

1812
01:07:49,880 --> 01:07:53,099
and uh the media that's being moved

1813
01:07:53,099 --> 01:07:55,680
around inside of that connection uh you

1814
01:07:55,680 --> 01:07:58,380
know maybe DRM encrypted right so

1815
01:07:58,380 --> 01:08:00,240
I think that we're trying to very much

1816
01:08:00,240 --> 01:08:02,460
follow that same model that's worked in

1817
01:08:02,460 --> 01:08:05,940
that space uh and allow for this now

1818
01:08:05,940 --> 01:08:09,359
one of the things about this that we do

1819
01:08:09,359 --> 01:08:11,099
need to sort of you know hassle is like

1820
01:08:11,099 --> 01:08:13,740
do we need techniques for

1821
01:08:13,740 --> 01:08:15,720
dealing with Integrity of what happens

1822
01:08:15,720 --> 01:08:18,120
of the envelope data my view is that

1823
01:08:18,120 --> 01:08:20,100
there's no let me go to the next slide

1824
01:08:20,100 --> 01:08:22,580
on this one

1825
01:08:24,420 --> 01:08:26,279
oh sorry I took the slide out I'll go

1826
01:08:26,279 --> 01:08:30,839
back one okay so uh my view is that the

1827
01:08:30,839 --> 01:08:32,819
relays shouldn't ever change envelope

1828
01:08:32,819 --> 01:08:34,620
information that they should they can

1829
01:08:34,620 --> 01:08:37,080
read it but they shouldn't change it and

1830
01:08:37,080 --> 01:08:39,060
if you were on a system that chose to

1831
01:08:39,060 --> 01:08:42,000
use MLS group keying then you could get

1832
01:08:42,000 --> 01:08:44,759
away uh with

1833
01:08:44,759 --> 01:08:48,960
uh with actually providing real a a

1834
01:08:48,960 --> 01:08:51,479
Integrity protection of the envelope

1835
01:08:51,479 --> 01:08:53,219
data at the ends it's not like the

1836
01:08:53,219 --> 01:08:54,719
relays in the middle would do the

1837
01:08:54,719 --> 01:08:56,100
computational work to check it probably

1838
01:08:56,100 --> 01:08:57,660
but they they could

1839
01:08:57,660 --> 01:08:59,880
so Spencer you had had some questions on

1840
01:08:59,880 --> 01:09:01,620
the list and I see you on the Queue now

1841
01:09:01,620 --> 01:09:05,219
does this hit Does this answer my view

1842
01:09:05,219 --> 01:09:07,198
anyway on the where we should go on

1843
01:09:07,198 --> 01:09:09,919
these key items

1844
01:09:16,439 --> 01:09:18,919
okay

1845
01:09:21,359 --> 01:09:22,020
um

1846
01:09:22,020 --> 01:09:25,080
Spencer Dawkins uh too long don't read

1847
01:09:25,080 --> 01:09:29,939
or don't listen is yes uh but uh the

1848
01:09:29,939 --> 01:09:33,899
thing to me that seemed helpful for me

1849
01:09:33,899 --> 01:09:37,859
to be asking uh about this is

1850
01:09:37,859 --> 01:09:39,140
um

1851
01:09:39,140 --> 01:09:42,719
what a what a useful name

1852
01:09:42,719 --> 01:09:45,420
for what are called relays now would be

1853
01:09:45,420 --> 01:09:49,140
that would be clearer uh and the

1854
01:09:49,140 --> 01:09:51,000
probably just the functionality kind of

1855
01:09:51,000 --> 01:09:54,980
thing uh we talked uh yesterday recently

1856
01:09:54,980 --> 01:10:00,300
about uh me asking so or you know is

1857
01:10:00,300 --> 01:10:02,400
this a general purpose relay I think not

1858
01:10:02,400 --> 01:10:05,520
or if it's not what kind of a relay is

1859
01:10:05,520 --> 01:10:06,620
it

1860
01:10:06,620 --> 01:10:10,880
and uh I think after

1861
01:10:10,880 --> 01:10:13,199
seeing that part of the discussion in

1862
01:10:13,199 --> 01:10:15,780
your slides which which are incredibly

1863
01:10:15,780 --> 01:10:18,120
helpful to me thank you

1864
01:10:18,120 --> 01:10:21,060
but uh I think that

1865
01:10:21,060 --> 01:10:22,880
uh

1866
01:10:22,880 --> 01:10:25,980
what I what I think you were saying was

1867
01:10:25,980 --> 01:10:28,140
that this would be a relay that relayed

1868
01:10:28,140 --> 01:10:31,380
whatever uh Rush warp is

1869
01:10:31,380 --> 01:10:34,140
it ends up being called is it would you

1870
01:10:34,140 --> 01:10:35,159
agree with that

1871
01:10:35,159 --> 01:10:38,580
it it it so I view these relays as a

1872
01:10:38,580 --> 01:10:42,000
hundred percent tied to the the protocol

1873
01:10:42,000 --> 01:10:43,380
that's coming out of this working group

1874
01:10:43,380 --> 01:10:46,260
to relay the data you know that with the

1875
01:10:46,260 --> 01:10:47,580
media that this working group's done

1876
01:10:47,580 --> 01:10:50,159
that's what side now that makes it sound

1877
01:10:50,159 --> 01:10:51,960
like a specialized relay it's only a

1878
01:10:51,960 --> 01:10:54,840
relay for the mock protocol

1879
01:10:54,840 --> 01:10:55,500
um

1880
01:10:55,500 --> 01:10:59,460
however given the mock protocol is meant

1881
01:10:59,460 --> 01:11:01,739
for moving any media and nearly anything

1882
01:11:01,739 --> 01:11:03,719
you ever want to move can be considered

1883
01:11:03,719 --> 01:11:05,820
media in some form or another it is an

1884
01:11:05,820 --> 01:11:08,100
incredibly General thing so what this

1885
01:11:08,100 --> 01:11:09,840
working group is really talking about

1886
01:11:09,840 --> 01:11:11,820
building from from day one whether you

1887
01:11:11,820 --> 01:11:12,900
think about it or not as soon as you

1888
01:11:12,900 --> 01:11:15,780
talk about moving media over quick it or

1889
01:11:15,780 --> 01:11:18,960
media over anything uh in some real-time

1890
01:11:18,960 --> 01:11:22,500
way we are talking about building a a

1891
01:11:22,500 --> 01:11:27,239
better set of ways to move real-time

1892
01:11:27,239 --> 01:11:29,580
data around the network and it will turn

1893
01:11:29,580 --> 01:11:31,380
out to be incredibly generalized if we

1894
01:11:31,380 --> 01:11:34,320
get this right right okay right I like

1895
01:11:34,320 --> 01:11:37,380
to say I think my biggest thing on on

1896
01:11:37,380 --> 01:11:39,179
being able to explain to people what the

1897
01:11:39,179 --> 01:11:42,659
scope is is you know number one figure

1898
01:11:42,659 --> 01:11:44,880
out what the name of

1899
01:11:44,880 --> 01:11:46,620
Russia is

1900
01:11:46,620 --> 01:11:50,699
so that you can say we relate among

1901
01:11:50,699 --> 01:11:53,880
whatever else we do we we relay that

1902
01:11:53,880 --> 01:11:55,380
so

1903
01:11:55,380 --> 01:11:57,300
um from from a church perspective uh

1904
01:11:57,300 --> 01:11:59,400
thank you very much for the intervention

1905
01:11:59,400 --> 01:12:02,100
um but I'm going to ask not you actually

1906
01:12:02,100 --> 01:12:03,860
spend a lot of time talking about names

1907
01:12:03,860 --> 01:12:06,480
because right uh what what I think you

1908
01:12:06,480 --> 01:12:07,980
were asking for is a description of

1909
01:12:07,980 --> 01:12:09,780
relay functionality that's absolutely

1910
01:12:09,780 --> 01:12:11,280
cool

1911
01:12:11,280 --> 01:12:13,980
um but uh we don't want to spend a lot

1912
01:12:13,980 --> 01:12:16,260
of time on on names because it's an

1913
01:12:16,260 --> 01:12:18,480
enormous bike shed and I will note that

1914
01:12:18,480 --> 01:12:20,760
the cube ballooned the minute you said

1915
01:12:20,760 --> 01:12:24,120
names seven additional people who no

1916
01:12:24,120 --> 01:12:26,460
doubt have great ideas of uh of their

1917
01:12:26,460 --> 01:12:27,840
favorite name if you're in the queue to

1918
01:12:27,840 --> 01:12:29,340
talk about the name please get out of

1919
01:12:29,340 --> 01:12:30,600
the queue

1920
01:12:30,600 --> 01:12:33,540
um if you're in the in in it to talk

1921
01:12:33,540 --> 01:12:35,580
about relay functionality welcome we

1922
01:12:35,580 --> 01:12:37,739
look forward to your insights but we can

1923
01:12:37,739 --> 01:12:40,320
keep talking about this as the mock

1924
01:12:40,320 --> 01:12:43,440
protocol good name coming future and the

1925
01:12:43,440 --> 01:12:46,260
mock relay yeah functionality to be

1926
01:12:46,260 --> 01:12:48,179
discussed no name discussion please

1927
01:12:48,179 --> 01:12:50,540
right thank you

1928
01:12:50,540 --> 01:12:52,980
just in terms of processing the queue I

1929
01:12:52,980 --> 01:12:54,600
think Colin you only have one more slide

1930
01:12:54,600 --> 01:12:56,580
after this is that right

1931
01:12:56,580 --> 01:12:57,719
sure

1932
01:12:57,719 --> 01:12:59,699
um or is it you want to try to finish it

1933
01:12:59,699 --> 01:13:02,820
up and then take all the questions

1934
01:13:02,820 --> 01:13:06,300
please do that okay

1935
01:13:06,300 --> 01:13:07,860
to get back to where I can actually do

1936
01:13:07,860 --> 01:13:12,480
that okay one more slide here uh so the

1937
01:13:12,480 --> 01:13:13,860
this

1938
01:13:13,860 --> 01:13:16,679
this slide under cells the connect the

1939
01:13:16,679 --> 01:13:21,239
the problem here but uh when the mock

1940
01:13:21,239 --> 01:13:23,520
client uh connects over the mock

1941
01:13:23,520 --> 01:13:26,159
protocol to the mock relay

1942
01:13:26,159 --> 01:13:29,460
um we need some idea of what it is that

1943
01:13:29,460 --> 01:13:31,440
is used to authenticate and authorize

1944
01:13:31,440 --> 01:13:34,800
and allow the relay to decide that is

1945
01:13:34,800 --> 01:13:37,020
going to be willing to forward this

1946
01:13:37,020 --> 01:13:40,199
traffic in a meaningful way okay and

1947
01:13:40,199 --> 01:13:43,320
basically uh initially what I had

1948
01:13:43,320 --> 01:13:44,699
written on this slide when I first

1949
01:13:44,699 --> 01:13:46,260
started was

1950
01:13:46,260 --> 01:13:47,159
um

1951
01:13:47,159 --> 01:13:49,020
that you know

1952
01:13:49,020 --> 01:13:51,239
there'll be an authorization token and

1953
01:13:51,239 --> 01:13:54,179
some form and really I I think that we

1954
01:13:54,179 --> 01:13:56,219
come around to that uh that the you know

1955
01:13:56,219 --> 01:13:57,840
there's an authorization token that the

1956
01:13:57,840 --> 01:13:59,760
application got that the consumer or

1957
01:13:59,760 --> 01:14:01,940
producer got in some out of bound way

1958
01:14:01,940 --> 01:14:05,699
that it allowed it to pass it to uh the

1959
01:14:05,699 --> 01:14:07,140
relays it probably also found in the

1960
01:14:07,140 --> 01:14:08,760
same out of bound way what relays it

1961
01:14:08,760 --> 01:14:10,260
might want to use

1962
01:14:10,260 --> 01:14:12,420
um and that the relay say that now that

1963
01:14:12,420 --> 01:14:14,340
is such a fluffy hand wave to the whole

1964
01:14:14,340 --> 01:14:16,620
problem it's completely useless okay so

1965
01:14:16,620 --> 01:14:18,780
I recognize that uh but I think we're

1966
01:14:18,780 --> 01:14:20,219
going to end up something along those

1967
01:14:20,219 --> 01:14:22,440
lines now option two which was I forget

1968
01:14:22,440 --> 01:14:23,699
who proposed that to the list right now

1969
01:14:23,699 --> 01:14:24,960
I'm just blanking I apologize to you

1970
01:14:24,960 --> 01:14:27,179
over but but you know what oh it was

1971
01:14:27,179 --> 01:14:29,100
will so you know will said hey look

1972
01:14:29,100 --> 01:14:32,100
actually we need uh we've had this

1973
01:14:32,100 --> 01:14:33,900
problem Lots we've thought about it lots

1974
01:14:33,900 --> 01:14:36,120
in existing cdns and there's some really

1975
01:14:36,120 --> 01:14:37,920
good approaches to steal from here that

1976
01:14:37,920 --> 01:14:40,620
have a bunch of advantages over what was

1977
01:14:40,620 --> 01:14:43,500
being discussed and so I I'm as an

1978
01:14:43,500 --> 01:14:45,659
individual they're very much in favor of

1979
01:14:45,659 --> 01:14:47,640
going down this sort of you know number

1980
01:14:47,640 --> 01:14:50,400
two type option where we take the same

1981
01:14:50,400 --> 01:14:53,400
type of ideas of what has worked to be

1982
01:14:53,400 --> 01:14:56,580
very scalable uh in existing today HTTP

1983
01:14:56,580 --> 01:14:59,820
cdns and apply it to these mock cdns so

1984
01:14:59,820 --> 01:15:02,520
that was really my my last slide and so

1985
01:15:02,520 --> 01:15:05,040
we can talk a little bit more about that

1986
01:15:05,040 --> 01:15:06,540
Wednesday so let's go back to the

1987
01:15:06,540 --> 01:15:08,520
question queue okay before we do I just

1988
01:15:08,520 --> 01:15:10,380
want to do a time check for people it is

1989
01:15:10,380 --> 01:15:13,020
10 45 we closed at 11 30 and we have a

1990
01:15:13,020 --> 01:15:14,280
pretty hard stop because they need to

1991
01:15:14,280 --> 01:15:17,000
set the room for the next uh host talk

1992
01:15:17,000 --> 01:15:19,800
uh so please make your interventions

1993
01:15:19,800 --> 01:15:21,540
pithy

1994
01:15:21,540 --> 01:15:24,480
um and uh be ready to uh have quick

1995
01:15:24,480 --> 01:15:28,339
responses the first is Emma

1996
01:15:28,679 --> 01:15:30,300
nice presentation so quick question

1997
01:15:30,300 --> 01:15:32,640
running the last slide so I love you

1998
01:15:32,640 --> 01:15:34,140
said minimize the information the

1999
01:15:34,140 --> 01:15:36,060
envelope should have for the Relay but

2000
01:15:36,060 --> 01:15:38,520
should not keep it as is because several

2001
01:15:38,520 --> 01:15:40,500
developers love to have everything if we

2002
01:15:40,500 --> 01:15:42,840
keep it as it would be vague so I think

2003
01:15:42,840 --> 01:15:43,860
we should include what information

2004
01:15:43,860 --> 01:15:45,420
should be available if it should not be

2005
01:15:45,420 --> 01:15:46,380
there

2006
01:15:46,380 --> 01:15:49,280
plus one okay

2007
01:15:50,060 --> 01:15:53,100
yeah it's implicit in what you were

2008
01:15:53,100 --> 01:15:54,659
saying in the intro but I don't think

2009
01:15:54,659 --> 01:15:55,500
you

2010
01:15:55,500 --> 01:15:58,140
we need to be able to have a relay that

2011
01:15:58,140 --> 01:16:00,719
is doing a meet Echo function

2012
01:16:00,719 --> 01:16:03,540
this is completely unaware of any of the

2013
01:16:03,540 --> 01:16:04,679
content

2014
01:16:04,679 --> 01:16:07,380
that is being gated so you know I want

2015
01:16:07,380 --> 01:16:09,000
to do me TECO

2016
01:16:09,000 --> 01:16:13,080
but without the relay being an end point

2017
01:16:13,080 --> 01:16:15,179
so I think if we could add that to the

2018
01:16:15,179 --> 01:16:17,520
use cases it would be useful in making

2019
01:16:17,520 --> 01:16:19,500
sure that we keep enough information to

2020
01:16:19,500 --> 01:16:21,300
make that possible

2021
01:16:21,300 --> 01:16:23,400
oh okay let me paraphrase what you're

2022
01:16:23,400 --> 01:16:24,780
saying here and make it a little bit

2023
01:16:24,780 --> 01:16:26,460
tighter than what you said but I agree

2024
01:16:26,460 --> 01:16:29,100
with you so obviously if we're doing an

2025
01:16:29,100 --> 01:16:31,620
application like meat Echo we can

2026
01:16:31,620 --> 01:16:35,100
definitely make uh the relays not have

2027
01:16:35,100 --> 01:16:36,900
access to any of the media content for

2028
01:16:36,900 --> 01:16:38,520
sure and be used to help scale out

2029
01:16:38,520 --> 01:16:40,739
something like me could Echo but mean

2030
01:16:40,739 --> 01:16:43,199
Echo also probably requires an SFU

2031
01:16:43,199 --> 01:16:45,600
somewhere and these relays do not 100 do

2032
01:16:45,600 --> 01:16:47,159
the functionality in SFU you'll still

2033
01:16:47,159 --> 01:16:50,100
need an SFU in some sense which also can

2034
01:16:50,100 --> 01:16:53,040
be end-to-end encrypted but yeah okay so

2035
01:16:53,040 --> 01:16:55,320
yeah that works for you yeah there's got

2036
01:16:55,320 --> 01:16:59,640
to be enough metadata to to to to allow

2037
01:16:59,640 --> 01:17:01,260
the switching

2038
01:17:01,260 --> 01:17:04,679
to happen got it the other thing on the

2039
01:17:04,679 --> 01:17:06,840
authentication piece

2040
01:17:06,840 --> 01:17:07,679
um

2041
01:17:07,679 --> 01:17:10,020
if I've got a large fan out

2042
01:17:10,020 --> 01:17:14,219
and I've got Fred who's been creating

2043
01:17:14,219 --> 01:17:17,340
um data and we're using Mac or whatever

2044
01:17:17,340 --> 01:17:19,920
to authenticate

2045
01:17:19,920 --> 01:17:21,600
I don't want Fred to have to have a

2046
01:17:21,600 --> 01:17:25,860
million Association uh uh shared secrets

2047
01:17:25,860 --> 01:17:28,140
with all the end points I don't want one

2048
01:17:28,140 --> 01:17:30,840
endpoint be able to impersonate Fred

2049
01:17:30,840 --> 01:17:34,320
so The Logical implication of that is

2050
01:17:34,320 --> 01:17:38,219
the relay is going to Fred is going to

2051
01:17:38,219 --> 01:17:40,440
authenticate to the relay and the relay

2052
01:17:40,440 --> 01:17:42,719
is then going to re-authenticate to each

2053
01:17:42,719 --> 01:17:44,400
endpoint in that

2054
01:17:44,400 --> 01:17:46,380
scenario

2055
01:17:46,380 --> 01:17:49,320
okay I think that is a hot and deep area

2056
01:17:49,320 --> 01:17:51,239
you're not wrong of course and I think

2057
01:17:51,239 --> 01:17:52,739
that'll be a great topic for the working

2058
01:17:52,739 --> 01:17:54,420
group after we get past some of the

2059
01:17:54,420 --> 01:17:56,100
easier stuff but we're not like but

2060
01:17:56,100 --> 01:17:57,900
you're totally right but I mean we're

2061
01:17:57,900 --> 01:17:59,400
this like people aren't even ready to

2062
01:17:59,400 --> 01:18:02,760
It's Gonna explode their heads though

2063
01:18:02,760 --> 01:18:05,940
hello uh Robin marks Akamai uh I've seen

2064
01:18:05,940 --> 01:18:07,620
Luke and you talking about priorities

2065
01:18:07,620 --> 01:18:09,960
for streams and dependencies between

2066
01:18:09,960 --> 01:18:12,179
streams and not doing the just at the

2067
01:18:12,179 --> 01:18:14,760
origin but also in between and it starts

2068
01:18:14,760 --> 01:18:17,940
to smell a lot like HTTP 2 dependency

2069
01:18:17,940 --> 01:18:20,580
tree which is a notoriously bad idea

2070
01:18:20,580 --> 01:18:23,760
that we're still suffering from today

2071
01:18:23,760 --> 01:18:26,280
um especially people like me

2072
01:18:26,280 --> 01:18:28,980
um uh I don't think I think this is too

2073
01:18:28,980 --> 01:18:30,420
complex for the new extensible

2074
01:18:30,420 --> 01:18:32,940
priorities that we have in HTTP 3.

2075
01:18:32,940 --> 01:18:35,219
um but what I really want to say is keep

2076
01:18:35,219 --> 01:18:37,580
it simple

2077
01:18:37,800 --> 01:18:41,640
great feedback well yes I I will I'm on

2078
01:18:41,640 --> 01:18:42,739
the same page

2079
01:18:42,739 --> 01:18:45,420
mercenary so quickly on the dependencies

2080
01:18:45,420 --> 01:18:48,840
uh I think uh if you look at um what we

2081
01:18:48,840 --> 01:18:51,179
do in RTP in in a lot of us assumptions

2082
01:18:51,179 --> 01:18:53,100
is that sequence numbers are always

2083
01:18:53,100 --> 01:18:54,659
implicit dependencies on the things

2084
01:18:54,659 --> 01:18:56,280
before them the difference here is that

2085
01:18:56,280 --> 01:18:57,800
now we're talking about

2086
01:18:57,800 --> 01:19:00,840
independent quick streams and is there

2087
01:19:00,840 --> 01:19:02,100
going to be some sort of signaling of

2088
01:19:02,100 --> 01:19:03,600
the dependencies across those quick

2089
01:19:03,600 --> 01:19:05,280
streams because they may not truly be

2090
01:19:05,280 --> 01:19:07,320
independent they may be in the SVC case

2091
01:19:07,320 --> 01:19:09,239
different layers in in each of the

2092
01:19:09,239 --> 01:19:11,280
streams or for various different reasons

2093
01:19:11,280 --> 01:19:13,440
you may have different encodings that

2094
01:19:13,440 --> 01:19:15,600
split things up across streams and you

2095
01:19:15,600 --> 01:19:16,560
might be able to describe the

2096
01:19:16,560 --> 01:19:18,420
dependencies of those streams I think

2097
01:19:18,420 --> 01:19:20,640
it's pretty simple to have a simple and

2098
01:19:20,640 --> 01:19:22,500
flexible way to to describe those

2099
01:19:22,500 --> 01:19:23,820
without too much complexity we have the

2100
01:19:23,820 --> 01:19:25,980
frameworking draft we have 81 dependency

2101
01:19:25,980 --> 01:19:27,659
descriptors and you're talking about you

2102
01:19:27,659 --> 01:19:29,340
know like a simple one bite thing that

2103
01:19:29,340 --> 01:19:30,900
that gives you almost everything you

2104
01:19:30,900 --> 01:19:32,940
need to know but within a stream I think

2105
01:19:32,940 --> 01:19:34,920
it's just simple to keep the basic rule

2106
01:19:34,920 --> 01:19:37,739
everything is in sequence what came now

2107
01:19:37,739 --> 01:19:39,360
depends on everything that came before

2108
01:19:39,360 --> 01:19:41,340
in that stream that's that's a simple

2109
01:19:41,340 --> 01:19:43,380
assumption to start out with

2110
01:19:43,380 --> 01:19:45,420
um and then secondly um I'd like to

2111
01:19:45,420 --> 01:19:46,800
understand from

2112
01:19:46,800 --> 01:19:49,980
um from the uh meta and twitch folks you

2113
01:19:49,980 --> 01:19:52,080
must already have some relays assume

2114
01:19:52,080 --> 01:19:54,420
that just your own built realize if you

2115
01:19:54,420 --> 01:19:56,880
had to replace those with my cloudflare

2116
01:19:56,880 --> 01:19:59,280
fastly whatever what would you do

2117
01:19:59,280 --> 01:20:00,300
differently or what would you have to

2118
01:20:00,300 --> 01:20:02,880
encode in the protocol to work with a

2119
01:20:02,880 --> 01:20:04,679
third party I think that's an important

2120
01:20:04,679 --> 01:20:06,840
thing to get out of the protocol is for

2121
01:20:06,840 --> 01:20:08,760
people who wanted to have vendor

2122
01:20:08,760 --> 01:20:11,219
infrastructure it's not their own what

2123
01:20:11,219 --> 01:20:12,600
would we need in the protocol to enable

2124
01:20:12,600 --> 01:20:14,840
that

2125
01:20:17,820 --> 01:20:19,679
yeah

2126
01:20:19,679 --> 01:20:21,659
um it's interesting around this envelope

2127
01:20:21,659 --> 01:20:23,400
information and the security if you're

2128
01:20:23,400 --> 01:20:25,140
actually going to sign Etc it needs to

2129
01:20:25,140 --> 01:20:27,120
be stable across the whole system which

2130
01:20:27,120 --> 01:20:28,920
has been a classical case which doesn't

2131
01:20:28,920 --> 01:20:31,739
work in RTP because you have leg by leg

2132
01:20:31,739 --> 01:20:33,719
or basically and point-to-end point

2133
01:20:33,719 --> 01:20:35,880
dependent signaling so you're gonna have

2134
01:20:35,880 --> 01:20:37,679
to have an interesting actually ensure

2135
01:20:37,679 --> 01:20:39,420
that you have a global namespace for

2136
01:20:39,420 --> 01:20:41,699
identification Etc this type of

2137
01:20:41,699 --> 01:20:42,900
information

2138
01:20:42,900 --> 01:20:45,440
so

2139
01:20:46,080 --> 01:20:48,360
yeah 100 agree and that's part of why

2140
01:20:48,360 --> 01:20:51,380
MLS is in the charter

2141
01:20:52,080 --> 01:20:55,020
the Piezo handled I'm just um going back

2142
01:20:55,020 --> 01:20:58,620
to the um ABR stuff in that um

2143
01:20:58,620 --> 01:21:00,300
you kind of have this very fine grain

2144
01:21:00,300 --> 01:21:02,340
kind of behavior happening at the solves

2145
01:21:02,340 --> 01:21:04,080
um like per stream representation level

2146
01:21:04,080 --> 01:21:06,960
but then the ABR sitting in some kind of

2147
01:21:06,960 --> 01:21:08,640
browser sandbox kind of trying to

2148
01:21:08,640 --> 01:21:11,219
measure throughput on a JavaScript sort

2149
01:21:11,219 --> 01:21:14,219
of API and making an ABR decision there

2150
01:21:14,219 --> 01:21:16,020
there seems to be quite a big disconnect

2151
01:21:16,020 --> 01:21:18,000
between the amount of information that's

2152
01:21:18,000 --> 01:21:20,040
kind of you've got this very

2153
01:21:20,040 --> 01:21:21,900
fine-grained stuff happening

2154
01:21:21,900 --> 01:21:25,380
per per rep but then switching reps

2155
01:21:25,380 --> 01:21:26,880
you've got sort of crappy information

2156
01:21:26,880 --> 01:21:30,120
that sort of you're getting uh kind of

2157
01:21:30,120 --> 01:21:34,199
quite messy like timing uh and data

2158
01:21:34,199 --> 01:21:36,600
arrival stuff I mean the streams API for

2159
01:21:36,600 --> 01:21:37,739
example doesn't even give you a

2160
01:21:37,739 --> 01:21:40,199
timestamp when you get a call back so

2161
01:21:40,199 --> 01:21:42,199
trying to measure that

2162
01:21:42,199 --> 01:21:44,940
I'm thinking sort of signals or

2163
01:21:44,940 --> 01:21:46,440
something like that from relays that

2164
01:21:46,440 --> 01:21:50,000
could then help that but

2165
01:21:50,280 --> 01:21:52,800
a cool cool idea to get some signals

2166
01:21:52,800 --> 01:21:54,000
from the relay to help that I hadn't

2167
01:21:54,000 --> 01:21:55,380
thought about that I had thought a lot

2168
01:21:55,380 --> 01:21:57,600
about given this is all running in user

2169
01:21:57,600 --> 01:21:59,520
space the quick and all of this is

2170
01:21:59,520 --> 01:22:01,560
running in user space and application I

2171
01:22:01,560 --> 01:22:02,820
was hoping that this working group at

2172
01:22:02,820 --> 01:22:03,900
some point would be sending some

2173
01:22:03,900 --> 01:22:05,280
requests over to the quick working group

2174
01:22:05,280 --> 01:22:08,100
to expose some API information that we

2175
01:22:08,100 --> 01:22:10,620
can use uh for example the current you

2176
01:22:10,620 --> 01:22:12,719
know bitrate estimate that the quick

2177
01:22:12,719 --> 01:22:14,460
layer has which would be really useful

2178
01:22:14,460 --> 01:22:15,540
for

2179
01:22:15,540 --> 01:22:17,580
um yeah I mean that's a constant kind of

2180
01:22:17,580 --> 01:22:19,800
thing net info API has been sort of like

2181
01:22:19,800 --> 01:22:23,159
in and out of uh yeah like it's not

2182
01:22:23,159 --> 01:22:24,540
really kind of flying anywhere apart

2183
01:22:24,540 --> 01:22:27,000
from chrome and uh so that kind of thing

2184
01:22:27,000 --> 01:22:28,440
is

2185
01:22:28,440 --> 01:22:31,199
tricky uh it seems yeah but there's such

2186
01:22:31,199 --> 01:22:33,179
a huge advantage to having a lower level

2187
01:22:33,179 --> 01:22:35,699
feedback on the the information allows

2188
01:22:35,699 --> 01:22:37,679
you to react much quicker which allows

2189
01:22:37,679 --> 01:22:39,360
you to deliver a much better end user

2190
01:22:39,360 --> 01:22:41,100
experience and I think that that's one

2191
01:22:41,100 --> 01:22:42,360
of the things that we need to optimize

2192
01:22:42,360 --> 01:22:44,940
the group is well you know

2193
01:22:44,940 --> 01:22:46,380
yeah

2194
01:22:46,380 --> 01:22:47,880
this information is all in the same

2195
01:22:47,880 --> 01:22:49,620
computer but our layer stacking has

2196
01:22:49,620 --> 01:22:51,000
caused us to have not have the

2197
01:22:51,000 --> 01:22:52,560
information we need that would allow us

2198
01:22:52,560 --> 01:22:53,940
to deliver a much better end user

2199
01:22:53,940 --> 01:22:55,860
experience that's nuts yeah yeah it's

2200
01:22:55,860 --> 01:22:57,300
true although sometimes in some ways

2201
01:22:57,300 --> 01:22:58,980
there is actually information that's at

2202
01:22:58,980 --> 01:23:01,080
the server the relay that the client

2203
01:23:01,080 --> 01:23:02,820
doesn't actually have like the kind of

2204
01:23:02,820 --> 01:23:04,500
effectively the sea wind

2205
01:23:04,500 --> 01:23:06,659
um you know how to draw transport info

2206
01:23:06,659 --> 01:23:09,360
that basically tried to do that

2207
01:23:09,360 --> 01:23:11,159
um but uh yeah that we've got some stuff

2208
01:23:11,159 --> 01:23:13,320
in cmsd that potentially does something

2209
01:23:13,320 --> 01:23:14,760
like that but

2210
01:23:14,760 --> 01:23:17,880
uh but anyway so we should drive all of

2211
01:23:17,880 --> 01:23:19,560
that discussion forward it's a great

2212
01:23:19,560 --> 01:23:21,300
discussion I think very important thank

2213
01:23:21,300 --> 01:23:23,640
you okay so uh we started out with 12

2214
01:23:23,640 --> 01:23:25,739
we've had uh seven people at the mic and

2215
01:23:25,739 --> 01:23:27,960
now we have ten so I would like to say

2216
01:23:27,960 --> 01:23:29,940
we're gonna close the queue very quickly

2217
01:23:29,940 --> 01:23:31,560
here so if you think you're going to

2218
01:23:31,560 --> 01:23:33,420
have comments on this probably go ahead

2219
01:23:33,420 --> 01:23:36,360
and get into queue well it's pure uh

2220
01:23:36,360 --> 01:23:39,239
sorry will next yeah thank you uh will

2221
01:23:39,239 --> 01:23:41,159
the lack of my I'll be quick I agree

2222
01:23:41,159 --> 01:23:42,360
with the vast majority of the points

2223
01:23:42,360 --> 01:23:44,520
presented here I I think Mark has the

2224
01:23:44,520 --> 01:23:47,760
luxury of looking back at 12 years of

2225
01:23:47,760 --> 01:23:50,880
Dash on hls which used relays in a very

2226
01:23:50,880 --> 01:23:52,500
similar context and look at what would

2227
01:23:52,500 --> 01:23:54,239
we have what should we have added to

2228
01:23:54,239 --> 01:23:55,800
those formats in the very beginning that

2229
01:23:55,800 --> 01:23:58,320
would really help with operations today

2230
01:23:58,320 --> 01:24:00,360
and there's two aspects that that are

2231
01:24:00,360 --> 01:24:02,640
not the the attractive ones we like to

2232
01:24:02,640 --> 01:24:04,920
talk about one is request tracing being

2233
01:24:04,920 --> 01:24:06,840
able to debug as soon as you're going

2234
01:24:06,840 --> 01:24:09,000
through components owned by different

2235
01:24:09,000 --> 01:24:11,219
people in multi-cdns how do you know

2236
01:24:11,219 --> 01:24:13,800
where a problem's occurring so request

2237
01:24:13,800 --> 01:24:16,140
tracing tracking where it went and then

2238
01:24:16,140 --> 01:24:17,699
also logging if you ask people today

2239
01:24:17,699 --> 01:24:19,920
what is a quick or web transport log

2240
01:24:19,920 --> 01:24:22,140
look like uh you're going to get 50

2241
01:24:22,140 --> 01:24:23,699
different answers so we might start

2242
01:24:23,699 --> 01:24:25,679
thinking about standardizing that so

2243
01:24:25,679 --> 01:24:27,300
that if you are collecting logs from

2244
01:24:27,300 --> 01:24:29,940
five different cdns operating your

2245
01:24:29,940 --> 01:24:31,679
relays that they're going to be

2246
01:24:31,679 --> 01:24:34,280
consistent

2247
01:24:34,920 --> 01:24:37,080
thank you I love it and I hope whoever's

2248
01:24:37,080 --> 01:24:40,519
taking minutes got all of that

2249
01:24:44,640 --> 01:24:47,300
Corey

2250
01:24:47,520 --> 01:24:49,560
since he's our uh our minute taker you

2251
01:24:49,560 --> 01:24:51,540
can ask him whether he got all of that I

2252
01:24:51,540 --> 01:24:53,340
saw from his face that he was doing his

2253
01:24:53,340 --> 01:24:57,179
best but not I tried yeah going first I

2254
01:24:57,179 --> 01:24:58,500
was just going to say and we'll talk

2255
01:24:58,500 --> 01:24:59,880
about the intermediary being a relay

2256
01:24:59,880 --> 01:25:01,739
there's probably some interaction with

2257
01:25:01,739 --> 01:25:03,420
the network that was that might be

2258
01:25:03,420 --> 01:25:05,580
possible can we take that to transport

2259
01:25:05,580 --> 01:25:07,920
area tsbwg or something and talk about

2260
01:25:07,920 --> 01:25:09,600
that completely separate to talking

2261
01:25:09,600 --> 01:25:11,280
about the relay but if you're exposing

2262
01:25:11,280 --> 01:25:12,480
things in the real way then maybe

2263
01:25:12,480 --> 01:25:14,100
something to the network might turn out

2264
01:25:14,100 --> 01:25:15,960
to be the right thing to do

2265
01:25:15,960 --> 01:25:19,320
100 agree Mo touched on that earlier and

2266
01:25:19,320 --> 01:25:21,000
you're the person that helps us do that

2267
01:25:21,000 --> 01:25:23,520
all in the past with every other media

2268
01:25:23,520 --> 01:25:25,920
protocol we've done I hope we can get

2269
01:25:25,920 --> 01:25:28,380
you involved again

2270
01:25:28,380 --> 01:25:31,020
yeah Stefan Wagner regarding the

2271
01:25:31,020 --> 01:25:34,620
dependency indication question you post

2272
01:25:34,620 --> 01:25:35,219
um

2273
01:25:35,219 --> 01:25:38,699
this is very very tricky the one reason

2274
01:25:38,699 --> 01:25:42,480
why previous dependency indications in

2275
01:25:42,480 --> 01:25:45,120
the video coding standards nh64 uh had

2276
01:25:45,120 --> 01:25:47,940
two bits for some priority thing never

2277
01:25:47,940 --> 01:25:50,460
worked out was because there was no

2278
01:25:50,460 --> 01:25:53,699
defined uh Behavior what to do with

2279
01:25:53,699 --> 01:25:56,699
these two things and with these two bits

2280
01:25:56,699 --> 01:25:59,820
and therefore people set them anyway if

2281
01:25:59,820 --> 01:26:02,520
they wished and no one cared about them

2282
01:26:02,520 --> 01:26:04,260
at the end even if the encoder choose to

2283
01:26:04,260 --> 01:26:07,920
do that so this particular problem here

2284
01:26:07,920 --> 01:26:11,179
for this protocol is even harder because

2285
01:26:11,179 --> 01:26:13,800
we now have

2286
01:26:13,800 --> 01:26:16,139
um different media types some of which

2287
01:26:16,139 --> 01:26:18,060
we don't even fully understand that the

2288
01:26:18,060 --> 01:26:19,580
lifetime of this protocol is probably

2289
01:26:19,580 --> 01:26:22,320
larger than the full understanding of

2290
01:26:22,320 --> 01:26:26,040
what you need say for hat takes uh type

2291
01:26:26,040 --> 01:26:27,380
of

2292
01:26:27,380 --> 01:26:31,159
priorities or whatever right so the um

2293
01:26:31,159 --> 01:26:33,719
my recommendation there is to have a

2294
01:26:33,719 --> 01:26:36,600
single one-dimensional now number not

2295
01:26:36,600 --> 01:26:39,239
any for complex dependency graphs with B

2296
01:26:39,239 --> 01:26:41,699
frames or whatnot but the single number

2297
01:26:41,699 --> 01:26:44,639
with a limited range and a defined

2298
01:26:44,639 --> 01:26:48,179
behavior of how a Gateway reacts to this

2299
01:26:48,179 --> 01:26:51,960
number and then the encoders uh and the

2300
01:26:51,960 --> 01:26:54,239
the sending mechanisms can figure out

2301
01:26:54,239 --> 01:26:57,239
how to set this accordingly thank you

2302
01:26:57,239 --> 01:26:58,800
thank you that sounds like a really good

2303
01:26:58,800 --> 01:27:01,080
advice for us

2304
01:27:01,080 --> 01:27:03,659
Luke from twitch uh I was just on up

2305
01:27:03,659 --> 01:27:05,639
there but um my day job is I work on the

2306
01:27:05,639 --> 01:27:07,020
CDN team

2307
01:27:07,020 --> 01:27:08,639
um so I've thought about this a little

2308
01:27:08,639 --> 01:27:09,900
quite a bit

2309
01:27:09,900 --> 01:27:11,520
um one thing that I'm grappling with

2310
01:27:11,520 --> 01:27:14,699
internally is just how successful HTTP

2311
01:27:14,699 --> 01:27:17,040
and HTTP cdns have been because they're

2312
01:27:17,040 --> 01:27:19,380
stateless the idea being is we have

2313
01:27:19,380 --> 01:27:21,780
millions of viewers across thousands of

2314
01:27:21,780 --> 01:27:25,320
streams and we don't care like we you

2315
01:27:25,320 --> 01:27:26,699
don't actually need to keep track of

2316
01:27:26,699 --> 01:27:28,739
them it just kind of funnels all the way

2317
01:27:28,739 --> 01:27:31,679
through so I'd like to have more thought

2318
01:27:31,679 --> 01:27:33,360
about how much state do we really need

2319
01:27:33,360 --> 01:27:35,040
in the system how much state do we need

2320
01:27:35,040 --> 01:27:37,320
for media for quick and how much can we

2321
01:27:37,320 --> 01:27:38,760
defer

2322
01:27:38,760 --> 01:27:40,500
um like for example slide one the origin

2323
01:27:40,500 --> 01:27:42,600
is the final decision maker probably

2324
01:27:42,600 --> 01:27:44,699
wouldn't work at scale

2325
01:27:44,699 --> 01:27:46,860
um for this uh point we that's that's

2326
01:27:46,860 --> 01:27:48,060
one thing I want people to think about

2327
01:27:48,060 --> 01:27:51,060
so look before we walk away totally

2328
01:27:51,060 --> 01:27:53,280
totally agree but I want people to I

2329
01:27:53,280 --> 01:27:54,900
constantly have people tell me it's

2330
01:27:54,900 --> 01:27:56,820
stateless and I'm like oh how do I

2331
01:27:56,820 --> 01:27:58,320
request something they're like oh you

2332
01:27:58,320 --> 01:28:01,020
give us the URI and from the URI we know

2333
01:28:01,020 --> 01:28:02,880
given the state we store what to deliver

2334
01:28:02,880 --> 01:28:05,460
to you I mean it's it's I mean stateless

2335
01:28:05,460 --> 01:28:07,860
is a wonderfully bizarre term to use in

2336
01:28:07,860 --> 01:28:11,159
the context of a file server right so it

2337
01:28:11,159 --> 01:28:13,020
is stateless but I think that the thing

2338
01:28:13,020 --> 01:28:15,060
that the point 100 agree with you on is

2339
01:28:15,060 --> 01:28:16,860
we have to really carefully think about

2340
01:28:16,860 --> 01:28:19,139
what the state is there's TLS State

2341
01:28:19,139 --> 01:28:20,460
there's all kinds of State in the

2342
01:28:20,460 --> 01:28:22,260
servers we need to really think about

2343
01:28:22,260 --> 01:28:23,880
the state and how we make high

2344
01:28:23,880 --> 01:28:26,940
reliability cheap scalable systems uh

2345
01:28:26,940 --> 01:28:29,520
you know how we engineer that and get it

2346
01:28:29,520 --> 01:28:31,080
um we decided the state at the start of

2347
01:28:31,080 --> 01:28:33,179
the broadcast when somebody joins and

2348
01:28:33,179 --> 01:28:34,860
then we just encode them the URL and

2349
01:28:34,860 --> 01:28:36,300
from that point forward it just follows

2350
01:28:36,300 --> 01:28:37,980
a fixed path more or less so yeah pretty

2351
01:28:37,980 --> 01:28:40,440
simple yeah exactly which sounds like we

2352
01:28:40,440 --> 01:28:42,060
could do the same thing here yeah

2353
01:28:42,060 --> 01:28:44,659
foreign

2354
01:28:44,719 --> 01:28:47,219
poly can you go back one side to the

2355
01:28:47,219 --> 01:28:51,120
security sure give me just a second here

2356
01:28:51,120 --> 01:28:53,520
there we go yeah I think the another

2357
01:28:53,520 --> 01:28:56,460
point that the quick stream is one two

2358
01:28:56,460 --> 01:28:58,739
one I think there is a drop about a

2359
01:28:58,739 --> 01:29:00,840
multicaster quick you need to make a

2360
01:29:00,840 --> 01:29:05,100
quick become the one to earn so if we

2361
01:29:05,100 --> 01:29:07,860
use that we may be able to do the end to

2362
01:29:07,860 --> 01:29:11,280
end quake and for the metadata maybe we

2363
01:29:11,280 --> 01:29:12,900
can put it in the

2364
01:29:12,900 --> 01:29:16,139
outside of the quick uh of course you

2365
01:29:16,139 --> 01:29:19,020
need to encrypt it yeah

2366
01:29:19,020 --> 01:29:21,120
thank you for correcting me then I was

2367
01:29:21,120 --> 01:29:23,340
unaware of this multicast quick work I'd

2368
01:29:23,340 --> 01:29:25,020
love to read more about it and it seems

2369
01:29:25,020 --> 01:29:26,699
like this might be a prime use case for

2370
01:29:26,699 --> 01:29:29,340
it if it all works I just this is a my

2371
01:29:29,340 --> 01:29:32,760
mistake on this slide and I will pick

2372
01:29:32,760 --> 01:29:35,460
yeah and and I think during the end to

2373
01:29:35,460 --> 01:29:38,179
end quick may enable very nice Stadium

2374
01:29:38,179 --> 01:29:41,219
uh kind of because Renee doesn't have to

2375
01:29:41,219 --> 01:29:44,100
decrypt all the quick quick package you

2376
01:29:44,100 --> 01:29:46,560
don't need to look at metadata it's very

2377
01:29:46,560 --> 01:29:50,400
small amount of computation Maybe

2378
01:29:50,400 --> 01:29:52,800
interesting okay

2379
01:29:52,800 --> 01:29:55,380
can can you send a link to that work to

2380
01:29:55,380 --> 01:29:58,699
maybe the the chat room or something

2381
01:29:58,699 --> 01:30:00,960
in the mailing list yeah the mailing

2382
01:30:00,960 --> 01:30:03,080
list

2383
01:30:04,400 --> 01:30:06,960
Randall Jessup Mozilla

2384
01:30:06,960 --> 01:30:09,480
um uh plus one to what's uh Stephen

2385
01:30:09,480 --> 01:30:11,040
Winger was saying I was going to say

2386
01:30:11,040 --> 01:30:12,179
something similar

2387
01:30:12,179 --> 01:30:14,699
um I think that what this does is it

2388
01:30:14,699 --> 01:30:17,040
helps push the

2389
01:30:17,040 --> 01:30:20,760
um the complexity on the choice of the

2390
01:30:20,760 --> 01:30:21,960
priorities and so on out to the

2391
01:30:21,960 --> 01:30:24,860
application which will allow for future

2392
01:30:24,860 --> 01:30:28,380
you know changes and improvements in in

2393
01:30:28,380 --> 01:30:31,080
what's going to happen there whether it

2394
01:30:31,080 --> 01:30:32,880
actually comes down to a single number

2395
01:30:32,880 --> 01:30:35,219
or not I wouldn't want to decide now but

2396
01:30:35,219 --> 01:30:36,900
I do think we wanted to simplify and

2397
01:30:36,900 --> 01:30:39,239
tightly Define what the relays are going

2398
01:30:39,239 --> 01:30:42,120
to operate on uh so that so that then

2399
01:30:42,120 --> 01:30:44,460
you can innovate at the edge at the

2400
01:30:44,460 --> 01:30:46,760
edges

2401
01:30:47,360 --> 01:30:50,460
thanks Randall 100 agree I I that makes

2402
01:30:50,460 --> 01:30:52,199
sense to me and all the input from you

2403
01:30:52,199 --> 01:30:53,400
and others here has really convinced me

2404
01:30:53,400 --> 01:30:54,900
which way Direction I want to go on this

2405
01:30:54,900 --> 01:30:57,080
so

2406
01:31:01,199 --> 01:31:02,219
hello

2407
01:31:02,219 --> 01:31:03,840
um Ian sweat Google

2408
01:31:03,840 --> 01:31:06,239
um as a person who spent a ton of time

2409
01:31:06,239 --> 01:31:08,639
trying to kill hp2 priorities

2410
01:31:08,639 --> 01:31:10,260
um I actually would make an opposite

2411
01:31:10,260 --> 01:31:12,179
argument here and say that I don't think

2412
01:31:12,179 --> 01:31:13,920
we should immediately assume because

2413
01:31:13,920 --> 01:31:16,080
HTTP 2 priority was like a complete

2414
01:31:16,080 --> 01:31:17,580
dumpster fire

2415
01:31:17,580 --> 01:31:19,800
um that it actually applies and my

2416
01:31:19,800 --> 01:31:22,920
argument is as follows so one is in hp2

2417
01:31:22,920 --> 01:31:25,199
the client is attempting to guess what

2418
01:31:25,199 --> 01:31:27,179
the correct prioritization scheme is

2419
01:31:27,179 --> 01:31:30,239
here the producer of the content knows

2420
01:31:30,239 --> 01:31:33,540
the structure uh of the Gap and it

2421
01:31:33,540 --> 01:31:35,100
understands the premium dependency there

2422
01:31:35,100 --> 01:31:37,260
is no it's unambiguous it's absolutely

2423
01:31:37,260 --> 01:31:39,120
like it knows it or not

2424
01:31:39,120 --> 01:31:41,699
um another thing is we had things like

2425
01:31:41,699 --> 01:31:43,560
reprioritization there's no need for

2426
01:31:43,560 --> 01:31:45,179
reprioritization there's no redirect

2427
01:31:45,179 --> 01:31:46,860
re-parent things that do all the things

2428
01:31:46,860 --> 01:31:48,719
that are very complex

2429
01:31:48,719 --> 01:31:51,840
um and for example like in hb2 when you

2430
01:31:51,840 --> 01:31:53,820
cancel the stream everything under it

2431
01:31:53,820 --> 01:31:56,219
got like re-parented automatically hero

2432
01:31:56,219 --> 01:31:57,900
would argue either you don't allow that

2433
01:31:57,900 --> 01:31:59,520
at all or if you do allow it you just

2434
01:31:59,520 --> 01:32:01,320
basically like kaibox the whole Stream

2435
01:32:01,320 --> 01:32:03,300
So you because they're all dependencies

2436
01:32:03,300 --> 01:32:05,580
you can just like kill that entire tree

2437
01:32:05,580 --> 01:32:07,440
you don't need to wait and like trying

2438
01:32:07,440 --> 01:32:09,600
to re-parent it and all those things

2439
01:32:09,600 --> 01:32:12,300
um so because we understand the use case

2440
01:32:12,300 --> 01:32:14,219
I think it's a completely tractable

2441
01:32:14,219 --> 01:32:17,159
problem to use trees however I also will

2442
01:32:17,159 --> 01:32:20,219
say I'm not sure it actually provides a

2443
01:32:20,219 --> 01:32:22,620
huge amount of value over like the

2444
01:32:22,620 --> 01:32:24,900
stream per Gap approach

2445
01:32:24,900 --> 01:32:26,100
um and so I think that's something for

2446
01:32:26,100 --> 01:32:27,420
the working group to decide is whether

2447
01:32:27,420 --> 01:32:29,520
the marginal complexity is actually

2448
01:32:29,520 --> 01:32:32,219
worth it um but I don't think it's I

2449
01:32:32,219 --> 01:32:33,360
think it's a completely different

2450
01:32:33,360 --> 01:32:35,760
situation from hp2 because the problem

2451
01:32:35,760 --> 01:32:37,080
is different

2452
01:32:37,080 --> 01:32:38,340
um who's sending the information is

2453
01:32:38,340 --> 01:32:39,659
different

2454
01:32:39,659 --> 01:32:41,580
um like again a huge problem with hp2

2455
01:32:41,580 --> 01:32:43,920
was Firefox had a prioritization scheme

2456
01:32:43,920 --> 01:32:45,300
that it kind of like invented based on

2457
01:32:45,300 --> 01:32:47,100
like looking at the spec and trying to

2458
01:32:47,100 --> 01:32:48,600
figure out how to use it but like there

2459
01:32:48,600 --> 01:32:50,639
was no right answer like everyone did

2460
01:32:50,639 --> 01:32:51,840
something different on the client side

2461
01:32:51,840 --> 01:32:54,719
none of them were right and most of them

2462
01:32:54,719 --> 01:32:57,420
didn't work particularly well here

2463
01:32:57,420 --> 01:32:59,580
we have a fairly authoritative answer on

2464
01:32:59,580 --> 01:33:01,500
what the right prioritization is at

2465
01:33:01,500 --> 01:33:03,840
least within a gap so those are my

2466
01:33:03,840 --> 01:33:06,120
thoughts um thanks

2467
01:33:06,120 --> 01:33:08,340
thank you a quick question uh I showed

2468
01:33:08,340 --> 01:33:10,980
that you were trying to to uh request

2469
01:33:10,980 --> 01:33:13,380
the screens uh did you actually have

2470
01:33:13,380 --> 01:33:14,639
something you meant to be showing or is

2471
01:33:14,639 --> 01:33:17,880
that just a that was a fat finger okay

2472
01:33:17,880 --> 01:33:20,780
no worries thanks

2473
01:33:21,440 --> 01:33:23,880
thanks Karen for bringing everyone on

2474
01:33:23,880 --> 01:33:25,739
the same page on what relay on some of

2475
01:33:25,739 --> 01:33:27,420
the requirements we need here a couple

2476
01:33:27,420 --> 01:33:30,060
of points uh I agree on the state

2477
01:33:30,060 --> 01:33:32,280
argument that you and Luke made we need

2478
01:33:32,280 --> 01:33:33,719
to make sure we keep the state as

2479
01:33:33,719 --> 01:33:35,580
minimal as possible as it helps for the

2480
01:33:35,580 --> 01:33:38,040
distribution uh anything other than that

2481
01:33:38,040 --> 01:33:39,120
we need to kind of discuss in the group

2482
01:33:39,120 --> 01:33:41,340
and see if we really need it or not uh

2483
01:33:41,340 --> 01:33:43,679
second thing uh on I want to Echo what

2484
01:33:43,679 --> 01:33:45,780
Randall and Stefan said on the

2485
01:33:45,780 --> 01:33:47,940
dependency or prioritization scheme

2486
01:33:47,940 --> 01:33:49,980
whatever we do relay should not be made

2487
01:33:49,980 --> 01:33:52,080
to aware of each and every video Codec

2488
01:33:52,080 --> 01:33:53,639
and dependencies they bring in they

2489
01:33:53,639 --> 01:33:55,080
should be asked me agnostic as possible

2490
01:33:55,080 --> 01:33:56,580
but should be able to give minimal

2491
01:33:56,580 --> 01:33:58,320
information to make a forwarding or drop

2492
01:33:58,320 --> 01:34:00,239
decision and if you can come up with

2493
01:34:00,239 --> 01:34:01,679
something that fits that requirement

2494
01:34:01,679 --> 01:34:03,480
that would be easy to build scalable

2495
01:34:03,480 --> 01:34:06,420
relays uh last part is that I don't see

2496
01:34:06,420 --> 01:34:08,940
uh you're talking about how the clients

2497
01:34:08,940 --> 01:34:11,880
would pre-warned relays uh in case

2498
01:34:11,880 --> 01:34:13,739
whether they wanted multiple qualities

2499
01:34:13,739 --> 01:34:15,000
so that they can easily switch between

2500
01:34:15,000 --> 01:34:16,560
different qualities maybe have you

2501
01:34:16,560 --> 01:34:18,360
talked about it but missed but something

2502
01:34:18,360 --> 01:34:20,100
that we need to keep in mind on how can

2503
01:34:20,100 --> 01:34:22,980
relays kind of of subscribe to various

2504
01:34:22,980 --> 01:34:25,139
qualities so that when our client uh

2505
01:34:25,139 --> 01:34:26,760
because of what our Network conditions

2506
01:34:26,760 --> 01:34:28,199
goes to different qualities it would be

2507
01:34:28,199 --> 01:34:30,000
quick rather than going through all the

2508
01:34:30,000 --> 01:34:31,920
way uh through chain of fillers to get

2509
01:34:31,920 --> 01:34:33,300
the qualities if needed at some point

2510
01:34:33,300 --> 01:34:35,880
right um yeah I carefully just avoid it

2511
01:34:35,880 --> 01:34:37,800
in my my

2512
01:34:37,800 --> 01:34:40,080
um my slides the whole topic of sort of

2513
01:34:40,080 --> 01:34:43,500
naming or or that that evil subscribe

2514
01:34:43,500 --> 01:34:45,239
word or anything like that

2515
01:34:45,239 --> 01:34:47,159
um but I mean one way or another we will

2516
01:34:47,159 --> 01:34:49,199
need to be able like all of these things

2517
01:34:49,199 --> 01:34:51,920
imagine that we'll be able to you know

2518
01:34:51,920 --> 01:34:54,600
something could express it could get a a

2519
01:34:54,600 --> 01:34:57,000
consumer could get a 4K stream and it

2520
01:34:57,000 --> 01:34:58,199
could realize they didn't have the

2521
01:34:58,199 --> 01:35:00,659
bandwidth and switch down to a 1K you

2522
01:35:00,659 --> 01:35:02,580
know a 720p stream or something I mean I

2523
01:35:02,580 --> 01:35:04,500
clearly we need to deal with that in the

2524
01:35:04,500 --> 01:35:05,760
working group I just didn't feel we had

2525
01:35:05,760 --> 01:35:07,620
the right drafts and agreements in place

2526
01:35:07,620 --> 01:35:10,020
to really hit that problem yet so we'll

2527
01:35:10,020 --> 01:35:11,760
need to figure out that that type of

2528
01:35:11,760 --> 01:35:12,960
stuff down the road a little bit but I

2529
01:35:12,960 --> 01:35:14,760
just sort of chose for that for the

2530
01:35:14,760 --> 01:35:16,560
limited time to kick that can down the

2531
01:35:16,560 --> 01:35:19,100
road a little bit

2532
01:35:19,139 --> 01:35:20,880
uh

2533
01:35:20,880 --> 01:35:23,239
here

2534
01:35:23,760 --> 01:35:26,780
uh on the topic of congestion control

2535
01:35:26,780 --> 01:35:30,000
there's nothing stopping a native or

2536
01:35:30,000 --> 01:35:31,800
mobile app that's using a quick library

2537
01:35:31,800 --> 01:35:34,100
from getting to information

2538
01:35:34,100 --> 01:35:37,739
about the congestion control however for

2539
01:35:37,739 --> 01:35:40,320
a web client which I assume you will

2540
01:35:40,320 --> 01:35:41,460
want some

2541
01:35:41,460 --> 01:35:44,400
web clients that do Ingress into the

2542
01:35:44,400 --> 01:35:46,440
into a relay

2543
01:35:46,440 --> 01:35:48,000
um you do need an API that can expose

2544
01:35:48,000 --> 01:35:51,179
information luckily we are working on

2545
01:35:51,179 --> 01:35:54,540
that in the web transport uh working

2546
01:35:54,540 --> 01:35:57,120
group in the w3c so if there are

2547
01:35:57,120 --> 01:35:58,679
specific things you need beyond what

2548
01:35:58,679 --> 01:36:00,239
we're already doing there that might be

2549
01:36:00,239 --> 01:36:05,100
a good thing to uh ask for similarly on

2550
01:36:05,100 --> 01:36:06,900
priorities I think we've mostly been

2551
01:36:06,900 --> 01:36:08,639
talking about priorities

2552
01:36:08,639 --> 01:36:10,500
that are sent to the relay but there's

2553
01:36:10,500 --> 01:36:12,300
also the question of the local

2554
01:36:12,300 --> 01:36:14,280
prioritization

2555
01:36:14,280 --> 01:36:18,300
um of streams uh at the at the client

2556
01:36:18,300 --> 01:36:21,679
and that also relates to a web client

2557
01:36:21,679 --> 01:36:24,600
API and that's also a topic in

2558
01:36:24,600 --> 01:36:27,360
discussion in the web transport to be 3C

2559
01:36:27,360 --> 01:36:28,440
working group

2560
01:36:28,440 --> 01:36:31,440
so um if

2561
01:36:31,440 --> 01:36:33,480
there are things that need to be

2562
01:36:33,480 --> 01:36:35,760
requested of another uh working group

2563
01:36:35,760 --> 01:36:38,219
that might be the w3c web transport

2564
01:36:38,219 --> 01:36:40,560
region group lastly

2565
01:36:40,560 --> 01:36:42,300
um

2566
01:36:42,300 --> 01:36:45,120
oh I forgot I'm sorry let me see if I

2567
01:36:45,120 --> 01:36:47,360
can remember

2568
01:36:49,739 --> 01:36:52,679
uh nope it's gone so Peter before you

2569
01:36:52,679 --> 01:36:54,480
get to your last thing just 100 agree

2570
01:36:54,480 --> 01:36:56,639
what you said and I might ask you if you

2571
01:36:56,639 --> 01:36:59,040
could just send a little bit an email to

2572
01:36:59,040 --> 01:37:00,420
the list here I mean I know you're

2573
01:37:00,420 --> 01:37:01,620
deeply involved with all that stuff you

2574
01:37:01,620 --> 01:37:02,940
can just send a little email to the list

2575
01:37:02,940 --> 01:37:05,040
with with pointers to people where they

2576
01:37:05,040 --> 01:37:06,060
might be able to read a little bit more

2577
01:37:06,060 --> 01:37:08,159
about what's going on there um I think

2578
01:37:08,159 --> 01:37:09,659
that that would be I mean this this

2579
01:37:09,659 --> 01:37:10,980
group's gonna have to have a Synergy

2580
01:37:10,980 --> 01:37:13,520
with you know transport uh web transport

2581
01:37:13,520 --> 01:37:17,040
uh quick uh and so getting people aware

2582
01:37:17,040 --> 01:37:18,300
that would be awesome

2583
01:37:18,300 --> 01:37:20,280
I could do that oh I did remember the

2584
01:37:20,280 --> 01:37:22,199
third thing the third thing is

2585
01:37:22,199 --> 01:37:23,940
um basically everybody wants

2586
01:37:23,940 --> 01:37:26,699
implementations of quick that have a

2587
01:37:26,699 --> 01:37:28,199
real-time friendly congestion control

2588
01:37:28,199 --> 01:37:31,080
algorithm and I haven't really seen one

2589
01:37:31,080 --> 01:37:32,340
yet

2590
01:37:32,340 --> 01:37:33,840
um and I think that in order to write

2591
01:37:33,840 --> 01:37:36,540
one for example if I were to Port the

2592
01:37:36,540 --> 01:37:39,360
Weber typical webrtc one called googcc

2593
01:37:39,360 --> 01:37:42,179
over to Quick uh it would require some

2594
01:37:42,179 --> 01:37:43,800
more time stamp for information in the

2595
01:37:43,800 --> 01:37:46,080
feedback messages and that I've seen two

2596
01:37:46,080 --> 01:37:48,719
drafts for that uh proposals for adding

2597
01:37:48,719 --> 01:37:51,000
that as a quick extension but I don't

2598
01:37:51,000 --> 01:37:52,260
think either one is

2599
01:37:52,260 --> 01:37:54,780
you know progressed a lot so that might

2600
01:37:54,780 --> 01:37:57,120
be another thing that might be a request

2601
01:37:57,120 --> 01:38:00,659
to see one of those progress

2602
01:38:00,659 --> 01:38:03,360
so a 100 agree with that I think we do

2603
01:38:03,360 --> 01:38:05,159
need to move that over along over time

2604
01:38:05,159 --> 01:38:06,719
for this group to be successful I don't

2605
01:38:06,719 --> 01:38:08,280
think it can be done in this group I

2606
01:38:08,280 --> 01:38:09,480
think we probably need to take that

2607
01:38:09,480 --> 01:38:12,540
somewhere else but the people here can

2608
01:38:12,540 --> 01:38:13,920
and you know probably are the same

2609
01:38:13,920 --> 01:38:15,179
people that need to do it to somewhere

2610
01:38:15,179 --> 01:38:16,860
else and explain what our needs and why

2611
01:38:16,860 --> 01:38:19,139
the current bbrv2 doesn't quite work but

2612
01:38:19,139 --> 01:38:20,460
what could be or whatever it is that

2613
01:38:20,460 --> 01:38:21,719
we're going to decide to do to have

2614
01:38:21,719 --> 01:38:23,219
better congestion control for our

2615
01:38:23,219 --> 01:38:25,560
applications I do think this application

2616
01:38:25,560 --> 01:38:27,480
will that I do think that media over

2617
01:38:27,480 --> 01:38:29,520
quick will work reasonably well with

2618
01:38:29,520 --> 01:38:32,699
today's uh congestion control but it

2619
01:38:32,699 --> 01:38:34,199
could work much better with slight

2620
01:38:34,199 --> 01:38:35,699
changes to the congestion control that

2621
01:38:35,699 --> 01:38:37,920
we should try and get from the

2622
01:38:37,920 --> 01:38:39,179
appropriate working groups or something

2623
01:38:39,179 --> 01:38:40,560
so that's another thing that we should

2624
01:38:40,560 --> 01:38:43,320
poke on moving forward 100 agree and

2625
01:38:43,320 --> 01:38:45,120
just you know maybe now that this is

2626
01:38:45,120 --> 01:38:46,620
really moving and is real it's an

2627
01:38:46,620 --> 01:38:47,940
incentive for the people who have those

2628
01:38:47,940 --> 01:38:50,219
drafts to to resurrect them and get that

2629
01:38:50,219 --> 01:38:52,699
going again

2630
01:38:52,739 --> 01:38:55,159
next

2631
01:38:55,159 --> 01:38:57,420
stanhurst BBC R D

2632
01:38:57,420 --> 01:38:59,880
um so it's not specifically a comment on

2633
01:38:59,880 --> 01:39:01,860
your on your presentation which is great

2634
01:39:01,860 --> 01:39:03,600
by the way but more uh something which

2635
01:39:03,600 --> 01:39:04,980
keeps coming up in other comments that

2636
01:39:04,980 --> 01:39:06,719
people have been making and I wanted to

2637
01:39:06,719 --> 01:39:08,520
make sure it got captured somewhere we

2638
01:39:08,520 --> 01:39:09,840
need to make sure that we don't end up

2639
01:39:09,840 --> 01:39:12,840
focusing on frames as a unit so I love

2640
01:39:12,840 --> 01:39:14,639
the idea of walk being able to

2641
01:39:14,639 --> 01:39:16,380
arbitrarily chop up gops and have

2642
01:39:16,380 --> 01:39:18,420
different numbers of frames within one

2643
01:39:18,420 --> 01:39:20,699
stream we've got to be careful because

2644
01:39:20,699 --> 01:39:23,639
when you're thinking about audio what

2645
01:39:23,639 --> 01:39:25,199
what's the application data unit there

2646
01:39:25,199 --> 01:39:27,300
and is that a sample and if we end up

2647
01:39:27,300 --> 01:39:29,280
just having a new sample per stream

2648
01:39:29,280 --> 01:39:31,139
we're going to use up streams like

2649
01:39:31,139 --> 01:39:33,060
there's no tomorrow

2650
01:39:33,060 --> 01:39:34,500
um and there's also then other media

2651
01:39:34,500 --> 01:39:36,060
types like what do we do with subtitles

2652
01:39:36,060 --> 01:39:38,100
what do we do with haptics which is a

2653
01:39:38,100 --> 01:39:39,420
new one coming through we just need to

2654
01:39:39,420 --> 01:39:42,480
make sure that we don't specify that

2655
01:39:42,480 --> 01:39:46,139
there's one for every Adu uh and give

2656
01:39:46,139 --> 01:39:47,760
the ability to have more than one of

2657
01:39:47,760 --> 01:39:49,020
those and then how do we synchronize

2658
01:39:49,020 --> 01:39:50,460
them but that's an entirely different

2659
01:39:50,460 --> 01:39:52,920
not that's an entirely different topic

2660
01:39:52,920 --> 01:39:55,020
great Point 100 agree and we tend to

2661
01:39:55,020 --> 01:39:56,580
over rotate on video and forget about

2662
01:39:56,580 --> 01:39:59,360
other things but yeah

2663
01:40:00,480 --> 01:40:02,760
hi Jonathan Lennox I mean uh something

2664
01:40:02,760 --> 01:40:04,500
that I was thinking about when the

2665
01:40:04,500 --> 01:40:06,360
medical case was mentioned and generally

2666
01:40:06,360 --> 01:40:09,360
like the case of if you're trying to

2667
01:40:09,360 --> 01:40:11,219
you know essentially live stream a

2668
01:40:11,219 --> 01:40:12,420
conference

2669
01:40:12,420 --> 01:40:14,100
um is the case where you will have cases

2670
01:40:14,100 --> 01:40:15,900
where we have in where we have media

2671
01:40:15,900 --> 01:40:17,940
from Independent Media sources we

2672
01:40:17,940 --> 01:40:19,080
probably want to send those over the

2673
01:40:19,080 --> 01:40:22,320
same mock connection for prioritization

2674
01:40:22,320 --> 01:40:23,580
reasons and we need to make sure we

2675
01:40:23,580 --> 01:40:25,440
think about that both for prioritization

2676
01:40:25,440 --> 01:40:27,480
then for the protocol to figure out

2677
01:40:27,480 --> 01:40:29,040
how that works and I just want to make

2678
01:40:29,040 --> 01:40:30,000
sure that's

2679
01:40:30,000 --> 01:40:32,159
you know on everybody's mind as they

2680
01:40:32,159 --> 01:40:33,480
develop this

2681
01:40:33,480 --> 01:40:35,760
yeah and I think that that uh comes up

2682
01:40:35,760 --> 01:40:37,739
and as you said in the the conferencing

2683
01:40:37,739 --> 01:40:39,600
scenarios but it also comes up in the ad

2684
01:40:39,600 --> 01:40:41,699
insertion scenarios

2685
01:40:41,699 --> 01:40:43,620
um but yeah that we need to keep that in

2686
01:40:43,620 --> 01:40:45,800
mind

2687
01:40:46,080 --> 01:40:48,300
uh I think we have an empty queue

2688
01:40:48,300 --> 01:40:50,219
thank you everyone much appreciated for

2689
01:40:50,219 --> 01:40:51,179
all the people showing up here today

2690
01:40:51,179 --> 01:40:52,739
moving this long and I will pass it back

2691
01:40:52,739 --> 01:40:56,178
to the chairs for whatever happens next

2692
01:40:56,960 --> 01:40:59,100
uh thank you very much and thanks

2693
01:40:59,100 --> 01:41:01,500
everybody who was at the mic line or

2694
01:41:01,500 --> 01:41:03,840
commenting in the chat I I will say if

2695
01:41:03,840 --> 01:41:05,340
if we're seeing this level of engagement

2696
01:41:05,340 --> 01:41:07,679
on the mailing list we would be having a

2697
01:41:07,679 --> 01:41:11,219
weekly uh interim calls so please do uh

2698
01:41:11,219 --> 01:41:13,500
bring these same uh issues up now that

2699
01:41:13,500 --> 01:41:15,060
we've we've kicked off the working group

2700
01:41:15,060 --> 01:41:17,940
uh on the mailing list or in the uh

2701
01:41:17,940 --> 01:41:20,219
appropriate repos and we can go from

2702
01:41:20,219 --> 01:41:21,179
there

2703
01:41:21,179 --> 01:41:23,300
um

2704
01:41:23,639 --> 01:41:26,880
uh pull up the

2705
01:41:26,880 --> 01:41:28,920
get the chair slides back up so we can

2706
01:41:28,920 --> 01:41:32,360
go on to the next thing

2707
01:41:57,900 --> 01:42:00,360
all right uh so before we get to aob

2708
01:42:00,360 --> 01:42:02,400
which will uh which will possibly

2709
01:42:02,400 --> 01:42:04,679
include uh Spencer's presentation which

2710
01:42:04,679 --> 01:42:07,440
he gave us as a backup a quick question

2711
01:42:07,440 --> 01:42:10,920
on uh possible interim uh and I think we

2712
01:42:10,920 --> 01:42:13,020
can run this as a poll I'm going to try

2713
01:42:13,020 --> 01:42:14,639
and do that in a second

2714
01:42:14,639 --> 01:42:16,739
um we think there's a a lot that's

2715
01:42:16,739 --> 01:42:19,679
that's happened here today in a lot of

2716
01:42:19,679 --> 01:42:21,659
discussion that have been kicked off at

2717
01:42:21,659 --> 01:42:23,580
the previous interim and so we'd like to

2718
01:42:23,580 --> 01:42:25,619
think about having maybe an in-person

2719
01:42:25,619 --> 01:42:28,980
interim over a couple of days uh What uh

2720
01:42:28,980 --> 01:42:30,960
Alan and I have been discussing is late

2721
01:42:30,960 --> 01:42:34,020
January of 2023 that's that's next year

2722
01:42:34,020 --> 01:42:35,940
surprisingly

2723
01:42:35,940 --> 01:42:37,440
um and

2724
01:42:37,440 --> 01:42:39,600
um the U.S West Coast uh there are a

2725
01:42:39,600 --> 01:42:42,540
couple of people already in queue so you

2726
01:42:42,540 --> 01:42:44,219
have clarifying questions or comments

2727
01:42:44,219 --> 01:42:46,820
before we run the poll

2728
01:42:46,820 --> 01:42:49,320
okay please please go up Spencer

2729
01:42:49,320 --> 01:42:50,940
anything we would do would of course be

2730
01:42:50,940 --> 01:42:53,520
hybrid not only in person but Spencer

2731
01:42:53,520 --> 01:42:55,320
you had a clarifying mode did you have a

2732
01:42:55,320 --> 01:42:56,699
clarifying question

2733
01:42:56,699 --> 01:42:57,960
I don't know if you can still get from

2734
01:42:57,960 --> 01:43:00,480
it so uh mozamati I was going to ask in

2735
01:43:00,480 --> 01:43:02,639
the prior interim we identified two

2736
01:43:02,639 --> 01:43:04,560
major points of discussion that we

2737
01:43:04,560 --> 01:43:06,300
wanted to try to cover either in person

2738
01:43:06,300 --> 01:43:08,520
this week or you know in the in the near

2739
01:43:08,520 --> 01:43:10,560
term that was the congestion control and

2740
01:43:10,560 --> 01:43:12,540
prioritization aspects and then media

2741
01:43:12,540 --> 01:43:14,040
formats we haven't started the media

2742
01:43:14,040 --> 01:43:16,440
formats discussion is that going to be a

2743
01:43:16,440 --> 01:43:19,560
focus of this in interim or do do we

2744
01:43:19,560 --> 01:43:21,480
want to start that just on list and not

2745
01:43:21,480 --> 01:43:24,300
uh so I think we can understand it a

2746
01:43:24,300 --> 01:43:26,219
little bit uh today when people were

2747
01:43:26,219 --> 01:43:28,380
reminding us and including Stefan and

2748
01:43:28,380 --> 01:43:30,659
and others that we need to consider

2749
01:43:30,659 --> 01:43:33,480
media formats Beyond video uh and not uh

2750
01:43:33,480 --> 01:43:35,219
not only video but I definitely agree

2751
01:43:35,219 --> 01:43:36,960
that we need to have uh deeper

2752
01:43:36,960 --> 01:43:39,300
discussions of those on on audio video

2753
01:43:39,300 --> 01:43:41,340
and potentially

2754
01:43:41,340 --> 01:43:43,739
um upcoming uh it might or might not be

2755
01:43:43,739 --> 01:43:46,080
at this interim we if we get agree in an

2756
01:43:46,080 --> 01:43:47,880
interim then we'll start the agenda

2757
01:43:47,880 --> 01:43:49,260
bashing so you don't have a specific

2758
01:43:49,260 --> 01:43:52,139
agenda for this interim yet uh no we

2759
01:43:52,139 --> 01:43:54,659
think there's plenty to talk about so

2760
01:43:54,659 --> 01:43:57,960
we'll be list discussion to to hash out

2761
01:43:57,960 --> 01:44:01,800
who can be there in person and in

2762
01:44:01,800 --> 01:44:04,500
particular which topics we people will

2763
01:44:04,500 --> 01:44:07,860
have drafts or or similar to uh Spencer

2764
01:44:07,860 --> 01:44:10,679
uh Spencer Dawkins uh I've made this

2765
01:44:10,679 --> 01:44:13,800
coming in chat but uh I I you know I

2766
01:44:13,800 --> 01:44:15,239
don't know the chairs have been able to

2767
01:44:15,239 --> 01:44:16,440
keep up with everything that's happened

2768
01:44:16,440 --> 01:44:18,060
in chat

2769
01:44:18,060 --> 01:44:19,619
um the

2770
01:44:19,619 --> 01:44:20,520
the

2771
01:44:20,520 --> 01:44:24,179
you might want to also poll on how many

2772
01:44:24,179 --> 01:44:26,460
interim meetings and I I'm I was

2773
01:44:26,460 --> 01:44:28,860
thinking virtual interims uh between now

2774
01:44:28,860 --> 01:44:30,719
and Yokohama

2775
01:44:30,719 --> 01:44:33,719
um and it I had a couple of thoughts

2776
01:44:33,719 --> 01:44:38,040
about possible uh topics and neither one

2777
01:44:38,040 --> 01:44:41,699
of those was the one most suggested so

2778
01:44:41,699 --> 01:44:44,219
um I you you all are talking about a

2779
01:44:44,219 --> 01:44:47,400
in-person interim yes please that would

2780
01:44:47,400 --> 01:44:50,460
be lovely but uh

2781
01:44:50,460 --> 01:44:53,760
I I would I would suggest that you uh

2782
01:44:53,760 --> 01:44:56,280
wait for the working group to make

2783
01:44:56,280 --> 01:44:59,159
progress on the mailing list as opposed

2784
01:44:59,159 --> 01:45:00,600
to when

2785
01:45:00,600 --> 01:45:03,840
slack or you know something like that

2786
01:45:03,840 --> 01:45:05,420
um

2787
01:45:05,420 --> 01:45:08,820
before uh you decide that we only need

2788
01:45:08,820 --> 01:45:09,900
one

2789
01:45:09,900 --> 01:45:13,560
uh I could see multiple reasons why you

2790
01:45:13,560 --> 01:45:15,420
might need

2791
01:45:15,420 --> 01:45:18,060
two or three but let's let's ignore that

2792
01:45:18,060 --> 01:45:19,639
for now

2793
01:45:19,639 --> 01:45:22,199
okay I have suhaus and Cullen behind you

2794
01:45:22,199 --> 01:45:23,820
in line and then we're going to run the

2795
01:45:23,820 --> 01:45:24,659
poll

2796
01:45:24,659 --> 01:45:26,219
um I think we can at least figure out

2797
01:45:26,219 --> 01:45:29,400
whether we want zero or one and if it

2798
01:45:29,400 --> 01:45:31,199
grows beyond one we can continue that

2799
01:45:31,199 --> 01:45:34,020
discussion but uh just a clarifying uh

2800
01:45:34,020 --> 01:45:36,420
thought here uh Luke's presentation had

2801
01:45:36,420 --> 01:45:37,860
some of the next things that we want to

2802
01:45:37,860 --> 01:45:39,719
do that might be a starting list we can

2803
01:45:39,719 --> 01:45:42,119
think of the possible topics and and

2804
01:45:42,119 --> 01:45:43,980
also depending upon the topic we might

2805
01:45:43,980 --> 01:45:46,619
uh get a different audience and and we

2806
01:45:46,619 --> 01:45:47,940
need to make sure that we have the Right

2807
01:45:47,940 --> 01:45:49,260
audience in the meeting if not it will

2808
01:45:49,260 --> 01:45:51,420
not be useful thanks

2809
01:45:51,420 --> 01:45:53,580
Cullen

2810
01:45:53,580 --> 01:45:55,920
uh love to have them but I think the

2811
01:45:55,920 --> 01:45:57,119
really important thing asked us is

2812
01:45:57,119 --> 01:45:59,340
January late January is incredibly close

2813
01:45:59,340 --> 01:46:00,659
when you consider the holidays and

2814
01:46:00,659 --> 01:46:01,800
everything so I think we should nail

2815
01:46:01,800 --> 01:46:03,659
down the dates soon if we're going to do

2816
01:46:03,659 --> 01:46:05,340
this like before the end of November

2817
01:46:05,340 --> 01:46:06,600
type soon

2818
01:46:06,600 --> 01:46:09,060
that's partly why we want to to have the

2819
01:46:09,060 --> 01:46:12,139
poll run today

2820
01:46:19,580 --> 01:46:22,980
okay so the way I put this is if you if

2821
01:46:22,980 --> 01:46:24,540
we have an in-person interim in late

2822
01:46:24,540 --> 01:46:28,500
January 2020 through 2023 please assume

2823
01:46:28,500 --> 01:46:29,880
I said U.S West Coast here because

2824
01:46:29,880 --> 01:46:31,679
apparently I forgot to type it can you

2825
01:46:31,679 --> 01:46:33,840
attend either in person or virtually in

2826
01:46:33,840 --> 01:46:36,239
that time zone so please understand uh

2827
01:46:36,239 --> 01:46:37,739
that there any place we have this there

2828
01:46:37,739 --> 01:46:39,840
will be support for

2829
01:46:39,840 --> 01:46:42,540
um remote attendees but that that time

2830
01:46:42,540 --> 01:46:45,900
zone late January uh

2831
01:46:45,900 --> 01:46:49,619
raise your hand now uh if you can do not

2832
01:46:49,619 --> 01:46:51,179
raise your hand if you are not available

2833
01:46:51,179 --> 01:46:55,219
there and we will see how it goes

2834
01:47:06,960 --> 01:47:09,480
foreign

2835
01:47:09,480 --> 01:47:11,520
so so far only about a third of the

2836
01:47:11,520 --> 01:47:13,560
people in this room have either raised

2837
01:47:13,560 --> 01:47:15,780
their hand or clicked do not raise hand

2838
01:47:15,780 --> 01:47:18,540
so please go ahead and

2839
01:47:18,540 --> 01:47:20,520
do one or the other as quickly as you

2840
01:47:20,520 --> 01:47:23,239
can thank you

2841
01:47:31,380 --> 01:47:32,880
okay the numbers are starting to change

2842
01:47:32,880 --> 01:47:34,619
pretty slowly I'm going to close this

2843
01:47:34,619 --> 01:47:37,460
off in 30 seconds

2844
01:47:52,520 --> 01:47:55,199
okay so uh certainly quite a few people

2845
01:47:55,199 --> 01:47:57,119
were able to do it the raised hands were

2846
01:47:57,119 --> 01:48:00,300
52 that do not raise hands 10. that's a

2847
01:48:00,300 --> 01:48:02,280
significant number uh so what we'll do

2848
01:48:02,280 --> 01:48:04,320
is go ahead and come up with a concrete

2849
01:48:04,320 --> 01:48:06,719
suggestion on the list Alan and I have

2850
01:48:06,719 --> 01:48:08,820
the token to do that

2851
01:48:08,820 --> 01:48:10,080
um it looked like there was somebody in

2852
01:48:10,080 --> 01:48:13,760
the queue but who may have since dropped

2853
01:48:17,639 --> 01:48:20,179
okay

2854
01:48:22,500 --> 01:48:25,440
so we do have a couple of uh minutes

2855
01:48:25,440 --> 01:48:28,380
there and there was a uh update on the

2856
01:48:28,380 --> 01:48:30,480
mock use cases and requirement stock

2857
01:48:30,480 --> 01:48:33,600
uh Spencer do you want to do a quick run

2858
01:48:33,600 --> 01:48:36,020
through that

2859
01:48:51,840 --> 01:48:54,840
temperatures

2860
01:48:57,840 --> 01:49:01,139
so I'm Spencer Dawkins uh I want to call

2861
01:49:01,139 --> 01:49:02,699
people's attention to the picture of

2862
01:49:02,699 --> 01:49:04,380
this on this on the cover slide pretty

2863
01:49:04,380 --> 01:49:06,540
maybe more than anything else you know

2864
01:49:06,540 --> 01:49:09,060
the idea that use cases would interact

2865
01:49:09,060 --> 01:49:10,920
with requirements and that those would

2866
01:49:10,920 --> 01:49:13,500
uh Drive protocol specifications if

2867
01:49:13,500 --> 01:49:16,440
that's that's if that's uh shocked

2868
01:49:16,440 --> 01:49:18,360
anybody please

2869
01:49:18,360 --> 01:49:22,639
tell us now our next slide please

2870
01:49:24,840 --> 01:49:25,860
um

2871
01:49:25,860 --> 01:49:27,960
so what we said we were going to do was

2872
01:49:27,960 --> 01:49:29,699
uh

2873
01:49:29,699 --> 01:49:31,980
work on

2874
01:49:31,980 --> 01:49:34,260
basically dragging out a lot of stuff

2875
01:49:34,260 --> 01:49:36,619
that was in the individual

2876
01:49:36,619 --> 01:49:40,320
draft for

2877
01:49:40,320 --> 01:49:42,480
um require for use cases and

2878
01:49:42,480 --> 01:49:45,119
requirements uh that would not belong

2879
01:49:45,119 --> 01:49:46,980
there some of them were talking about

2880
01:49:46,980 --> 01:49:48,659
things were not in the approved Charter

2881
01:49:48,659 --> 01:49:50,100
and some of them were just history and

2882
01:49:50,100 --> 01:49:52,500
observations and opinions

2883
01:49:52,500 --> 01:49:56,460
um and so what we did was update the use

2884
01:49:56,460 --> 01:49:58,500
cases section well we updated the draft

2885
01:49:58,500 --> 01:50:01,320
this way and

2886
01:50:01,320 --> 01:50:02,520
um

2887
01:50:02,520 --> 01:50:05,460
went to update the we were thinking

2888
01:50:05,460 --> 01:50:07,920
update the use cases to reflect working

2889
01:50:07,920 --> 01:50:09,600
group discussion on the slide three

2890
01:50:09,600 --> 01:50:13,199
questions from uh the from the uh for

2891
01:50:13,199 --> 01:50:15,659
October interim there wasn't actually

2892
01:50:15,659 --> 01:50:18,840
any discussion of those questions from

2893
01:50:18,840 --> 01:50:22,800
the for children uh so uh we submitted

2894
01:50:22,800 --> 01:50:25,980
Dash zero three and uh

2895
01:50:25,980 --> 01:50:29,580
Forex for extra credit uh did a proposal

2896
01:50:29,580 --> 01:50:31,800
of uh initial structure of the

2897
01:50:31,800 --> 01:50:34,560
requirements section uh based on our

2898
01:50:34,560 --> 01:50:36,900
understanding of the implicit

2899
01:50:36,900 --> 01:50:39,080
requirements that they're into

2900
01:50:39,080 --> 01:50:42,840
approved Charter which was based on uhas

2901
01:50:42,840 --> 01:50:45,420
uh understanding all right next slide

2902
01:50:45,420 --> 01:50:47,040
please

2903
01:50:47,040 --> 01:50:49,159
yeah

2904
01:50:49,500 --> 01:50:52,260
so uh yeah that

2905
01:50:52,260 --> 01:50:53,460
um

2906
01:50:53,460 --> 01:50:55,920
so and like I say added a little uh

2907
01:50:55,920 --> 01:50:58,679
introductory text in each subsection of

2908
01:50:58,679 --> 01:51:01,920
the uh the requirement section

2909
01:51:01,920 --> 01:51:04,699
um next slide please

2910
01:51:04,920 --> 01:51:05,699
um

2911
01:51:05,699 --> 01:51:09,239
so this is uh I did talk with

2912
01:51:09,239 --> 01:51:12,480
um James Michael author uh since we got

2913
01:51:12,480 --> 01:51:15,960
the uh comments from Cullen uh that were

2914
01:51:15,960 --> 01:51:17,400
that appeared on the mailing list thank

2915
01:51:17,400 --> 01:51:19,320
you for those calling

2916
01:51:19,320 --> 01:51:23,639
um so uh so thinking we would do a-04

2917
01:51:23,639 --> 01:51:26,400
revision before requesting that the

2918
01:51:26,400 --> 01:51:30,420
chairs would uh adopt anything

2919
01:51:30,420 --> 01:51:33,780
um and then basically after something

2920
01:51:33,780 --> 01:51:36,360
that uh the working group can adopt we

2921
01:51:36,360 --> 01:51:37,860
would be drilling down to the next level

2922
01:51:37,860 --> 01:51:40,500
of detail in use cases index level

2923
01:51:40,500 --> 01:51:43,380
structure in the requirement section

2924
01:51:43,380 --> 01:51:46,699
next slide please

2925
01:51:46,980 --> 01:51:47,940
um

2926
01:51:47,940 --> 01:51:51,480
so I did have some questions there like

2927
01:51:51,480 --> 01:51:54,060
I say which we will follow up on the

2928
01:51:54,060 --> 01:51:57,480
Mike mailing list uh for all of these uh

2929
01:51:57,480 --> 01:52:00,119
we were trying to

2930
01:52:00,119 --> 01:52:04,340
we were trying to categorize uh the

2931
01:52:04,340 --> 01:52:08,040
live media of uh gaming and video

2932
01:52:08,040 --> 01:52:11,760
conferencing use cases uh and then think

2933
01:52:11,760 --> 01:52:14,580
about that some more again we'll follow

2934
01:52:14,580 --> 01:52:17,159
up on the mock mailing list anyway and

2935
01:52:17,159 --> 01:52:20,100
once we get to that point uh

2936
01:52:20,100 --> 01:52:23,940
talk about any additional use cases that

2937
01:52:23,940 --> 01:52:26,639
would need to use a simple low latency

2938
01:52:26,639 --> 01:52:29,400
media delivery solution for ingest and

2939
01:52:29,400 --> 01:52:31,260
distribution

2940
01:52:31,260 --> 01:52:31,980
um

2941
01:52:31,980 --> 01:52:34,920
as we mentioned earlier there's those

2942
01:52:34,920 --> 01:52:37,260
are out there but the ones we would be

2943
01:52:37,260 --> 01:52:40,080
we would need to know about is our use

2944
01:52:40,080 --> 01:52:41,520
cases through all our own capabilities

2945
01:52:41,520 --> 01:52:44,460
we have not previously identified uh

2946
01:52:44,460 --> 01:52:47,000
next slide

2947
01:52:47,300 --> 01:52:51,260
and so we had basically a high level

2948
01:52:51,260 --> 01:52:54,540
structure from our understanding of

2949
01:52:54,540 --> 01:52:57,600
zuhas's high-level structure from the

2950
01:52:57,600 --> 01:53:00,719
interim meeting and uh which I really

2951
01:53:00,719 --> 01:53:02,060
appreciate

2952
01:53:02,060 --> 01:53:05,880
and they're basically agree on a

2953
01:53:05,880 --> 01:53:09,420
starting line for that the requirements

2954
01:53:09,420 --> 01:53:13,080
and then proceed in the usual issue PR

2955
01:53:13,080 --> 01:53:16,080
emerge way on GitHub is that my last

2956
01:53:16,080 --> 01:53:18,119
slide I try to remember

2957
01:53:18,119 --> 01:53:20,159
no we are not

2958
01:53:20,159 --> 01:53:20,760
um

2959
01:53:20,760 --> 01:53:24,600
I like I said uh Cullen sent uh comments

2960
01:53:24,600 --> 01:53:28,380
that were uh helpful enough to where uh

2961
01:53:28,380 --> 01:53:31,020
we would need to you know James and I

2962
01:53:31,020 --> 01:53:32,760
both agreed we need to do a dash 04

2963
01:53:32,760 --> 01:53:34,679
before asking people to look at it

2964
01:53:34,679 --> 01:53:36,780
seriously and we're committed to do that

2965
01:53:36,780 --> 01:53:39,840
in the relatively near term

2966
01:53:39,840 --> 01:53:42,480
um and uh

2967
01:53:42,480 --> 01:53:45,119
any other thoughts

2968
01:53:45,119 --> 01:53:48,659
okay okay that's everything I know thank

2969
01:53:48,659 --> 01:53:50,839
you

2970
01:53:50,880 --> 01:53:53,219
uh thank you very much Spencer note that

2971
01:53:53,219 --> 01:53:55,139
we will not be waiting to an interim

2972
01:53:55,139 --> 01:53:56,400
meeting before issuing a call for

2973
01:53:56,400 --> 01:53:58,020
adoption on this once we've gotten the

2974
01:53:58,020 --> 01:54:00,060
mailing list discussion uh to a point

2975
01:54:00,060 --> 01:54:01,440
where we feel like the working group is

2976
01:54:01,440 --> 01:54:03,179
ready we'll issue with a call for

2977
01:54:03,179 --> 01:54:05,340
adoption on the list so please do

2978
01:54:05,340 --> 01:54:08,219
continue to uh join us on the list so

2979
01:54:08,219 --> 01:54:11,040
that you can do that we have reached the

2980
01:54:11,040 --> 01:54:14,400
11 24 Mark and the question is is there

2981
01:54:14,400 --> 01:54:17,540
anything else for the good of the order

2982
01:54:19,159 --> 01:54:22,800
sorry thanks David skanazi process

2983
01:54:22,800 --> 01:54:25,619
Enthusiast apparently uh no just uh I

2984
01:54:25,619 --> 01:54:28,139
wanted to provide a small suggestion to

2985
01:54:28,139 --> 01:54:30,960
the chairs uh because um this reminds me

2986
01:54:30,960 --> 01:54:33,300
of when we did a requirement stock in

2987
01:54:33,300 --> 01:54:36,119
mask and it was helpful

2988
01:54:36,119 --> 01:54:38,880
um but we uh ended up not publishing it

2989
01:54:38,880 --> 01:54:41,760
which was quite disappointing for some

2990
01:54:41,760 --> 01:54:43,500
of the folks working on it so just they

2991
01:54:43,500 --> 01:54:45,300
make that clear at the beginning whether

2992
01:54:45,300 --> 01:54:47,639
or not you plan to just have it and not

2993
01:54:47,639 --> 01:54:49,139
publish it or if you're going to publish

2994
01:54:49,139 --> 01:54:51,900
it as an RFC both are valid options but

2995
01:54:51,900 --> 01:54:53,100
I would make that clear during the

2996
01:54:53,100 --> 01:54:55,800
adoption calls so no one's surprised

2997
01:54:55,800 --> 01:54:57,900
uh thank you for that point

2998
01:54:57,900 --> 01:55:00,719
um certainly uh as people are commenting

2999
01:55:00,719 --> 01:55:03,780
on in the run up to adoption uh you can

3000
01:55:03,780 --> 01:55:05,520
consider that but

3001
01:55:05,520 --> 01:55:07,199
um and and make comments on that then

3002
01:55:07,199 --> 01:55:09,719
even in advance uh back to the previous

3003
01:55:09,719 --> 01:55:11,159
question is there anything else for the

3004
01:55:11,159 --> 01:55:13,879
good of the orders

3005
01:55:14,400 --> 01:55:17,119
there was someone else

3006
01:55:17,639 --> 01:55:19,260
okay uh

3007
01:55:19,260 --> 01:55:21,000
thank you all for all of the great

3008
01:55:21,000 --> 01:55:23,760
conversation uh both in the lines uh

3009
01:55:23,760 --> 01:55:26,880
remotely and on the chat today uh we

3010
01:55:26,880 --> 01:55:28,920
look forward to seeing you on the list

3011
01:55:28,920 --> 01:55:31,699
thanks again

3012
01:55:32,699 --> 01:55:33,900
different

3013
01:55:33,900 --> 01:55:35,900
ly

3014
01:58:42,900 --> 01:58:45,559
foreign

