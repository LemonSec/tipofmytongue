1
00:00:15,179 --> 00:00:17,179
um

2
00:00:33,780 --> 00:00:36,079
foreign

3
00:01:08,060 --> 00:01:12,240
okay welcome everyone let's get going if

4
00:01:12,240 --> 00:01:15,860
you can take your seat please

5
00:01:16,260 --> 00:01:18,360
we are ready to go

6
00:01:18,360 --> 00:01:21,360
Danielle

7
00:01:26,340 --> 00:01:28,560
okay

8
00:01:28,560 --> 00:01:31,400
welcome everyone

9
00:01:33,740 --> 00:01:35,880
welcome everyone

10
00:01:35,880 --> 00:01:38,839
second session

11
00:01:41,400 --> 00:01:44,700
they're not well applies here so

12
00:01:44,700 --> 00:01:46,619
hopefully you're familiar with this

13
00:01:46,619 --> 00:01:49,140
already if not make sure you get

14
00:01:49,140 --> 00:01:51,979
familiar with this

15
00:01:56,340 --> 00:01:57,299
um

16
00:01:57,299 --> 00:02:00,240
tips for joining so please if you are

17
00:02:00,240 --> 00:02:04,380
local use the meteco light client and

18
00:02:04,380 --> 00:02:06,840
make sure to log in because we don't

19
00:02:06,840 --> 00:02:09,239
have blue sheets anymore so that's the

20
00:02:09,239 --> 00:02:11,640
power blue sheets that helps you also

21
00:02:11,640 --> 00:02:15,180
get into the queue and please wear masks

22
00:02:15,180 --> 00:02:18,300
unless you are speaking

23
00:02:18,300 --> 00:02:21,840
um for remotes people make sure your

24
00:02:21,840 --> 00:02:24,300
audio and video is off and unless you

25
00:02:24,300 --> 00:02:25,560
want to speak up

26
00:02:25,560 --> 00:02:29,420
and please use a headset

27
00:02:30,340 --> 00:02:30,599
[Music]

28
00:02:30,599 --> 00:02:31,920
um

29
00:02:31,920 --> 00:02:34,980
this is the second official session

30
00:02:34,980 --> 00:02:37,260
um and we still have one more side

31
00:02:37,260 --> 00:02:41,540
meeting tomorrow at two o'clock

32
00:02:43,260 --> 00:02:45,300
I've done those updates

33
00:02:45,300 --> 00:02:48,599
this is Monday's agenda and this is uh

34
00:02:48,599 --> 00:02:51,540
today's agenda I'll be talking about jot

35
00:02:51,540 --> 00:02:53,459
embedded tokens

36
00:02:53,459 --> 00:02:54,599
um a tool we'll be talking about

37
00:02:54,599 --> 00:02:57,480
fine-grained transactional authorization

38
00:02:57,480 --> 00:02:59,099
hey Peter will be talking about cross

39
00:02:59,099 --> 00:03:02,400
device flows and Christina will finish

40
00:03:02,400 --> 00:03:04,440
it up with the client ID for anonymous

41
00:03:04,440 --> 00:03:06,980
clients

42
00:03:07,140 --> 00:03:09,780
and um on the side meeting tomorrow

43
00:03:09,780 --> 00:03:11,659
we'll dig deep into fine grain

44
00:03:11,659 --> 00:03:15,319
transactional authorization

45
00:03:15,420 --> 00:03:17,900
um we talk about

46
00:03:17,900 --> 00:03:18,120
[Music]

47
00:03:18,120 --> 00:03:20,120
um

48
00:03:20,459 --> 00:03:23,760
a security vcp and there's one more

49
00:03:23,760 --> 00:03:27,120
topic that I forget in right now but uh

50
00:03:27,120 --> 00:03:29,099
make sure to attend that to remember

51
00:03:29,099 --> 00:03:31,019
that

52
00:03:31,019 --> 00:03:34,700
yeah thank you

53
00:03:35,700 --> 00:03:38,940
[Laughter]

54
00:03:38,940 --> 00:03:40,200
okay

55
00:03:40,200 --> 00:03:43,620
okay let's get going then

56
00:03:43,620 --> 00:03:47,239
hopefully can drive there

57
00:03:47,400 --> 00:03:50,819
slides for me honest

58
00:03:50,819 --> 00:03:53,819
foreign

59
00:04:07,640 --> 00:04:10,260
hello yeah

60
00:04:10,260 --> 00:04:11,879
okay

61
00:04:11,879 --> 00:04:13,200
um

62
00:04:13,200 --> 00:04:16,440
so I want to talk to you about a jot

63
00:04:16,440 --> 00:04:19,918
embedded tokens or formerly formerly

64
00:04:19,918 --> 00:04:23,639
known as multiple subject chart

65
00:04:23,639 --> 00:04:27,300
so um dick Giuseppe and I have been kind

66
00:04:27,300 --> 00:04:28,979
of digging deeper into this

67
00:04:28,979 --> 00:04:32,520
and we we want to give you a quick

68
00:04:32,520 --> 00:04:36,479
update on uh our current thinking and

69
00:04:36,479 --> 00:04:38,160
unfortunately we didn't have a chance to

70
00:04:38,160 --> 00:04:41,220
update the document yet but we'll give

71
00:04:41,220 --> 00:04:42,960
you some update on

72
00:04:42,960 --> 00:04:44,580
um what we are thinking right now and

73
00:04:44,580 --> 00:04:46,440
hopefully we can get some feedback

74
00:04:46,440 --> 00:04:49,020
either now or or later on so next slide

75
00:04:49,020 --> 00:04:51,120
please

76
00:04:51,120 --> 00:04:53,820
so just say some background

77
00:04:53,820 --> 00:04:56,580
um when we started working on this one

78
00:04:56,580 --> 00:05:00,180
um we had a number of use cases and

79
00:05:00,180 --> 00:05:02,400
those use cases fell into two different

80
00:05:02,400 --> 00:05:03,840
categories

81
00:05:03,840 --> 00:05:06,720
a use cases that require issuing

82
00:05:06,720 --> 00:05:09,380
multiple tokens from multiple issuers

83
00:05:09,380 --> 00:05:12,840
and use and use cases that require

84
00:05:12,840 --> 00:05:16,560
issuing multiple tokens from one issuer

85
00:05:16,560 --> 00:05:18,479
and we've tried to kind of

86
00:05:18,479 --> 00:05:21,540
um address both those cases in one

87
00:05:21,540 --> 00:05:25,139
document which made it really cumbersome

88
00:05:25,139 --> 00:05:28,320
awkward and not clear confusing

89
00:05:28,320 --> 00:05:31,560
so what we've decided to do is um focus

90
00:05:31,560 --> 00:05:34,979
on one use case or one category of use

91
00:05:34,979 --> 00:05:37,440
cases which is multiple tokens from

92
00:05:37,440 --> 00:05:40,440
multiple issuers and we'll look into the

93
00:05:40,440 --> 00:05:42,600
other one in the future maybe in a

94
00:05:42,600 --> 00:05:45,419
completely different document can you

95
00:05:45,419 --> 00:05:47,100
hear me clearly guys

96
00:05:47,100 --> 00:05:50,060
next slide please

97
00:05:50,160 --> 00:05:55,080
so the goal is to be able to bind one or

98
00:05:55,080 --> 00:05:57,840
more tokens that are issued from a

99
00:05:57,840 --> 00:06:00,660
multiple issuers

100
00:06:00,660 --> 00:06:03,000
um into a new token and show the

101
00:06:03,000 --> 00:06:05,759
relationship between those tokens next

102
00:06:05,759 --> 00:06:08,180
slide please

103
00:06:08,940 --> 00:06:11,520
so why do you need this there are a

104
00:06:11,520 --> 00:06:14,120
number of reasons the other Trail is is

105
00:06:14,120 --> 00:06:16,919
an obvious one

106
00:06:16,919 --> 00:06:21,060
um in some cases also it's useful to use

107
00:06:21,060 --> 00:06:23,160
the information in those tokens to

108
00:06:23,160 --> 00:06:25,680
display information

109
00:06:25,680 --> 00:06:28,080
um to the end user and this is a I'll

110
00:06:28,080 --> 00:06:29,940
talk about an example of a telephone

111
00:06:29,940 --> 00:06:33,300
example that that is useful in that case

112
00:06:33,300 --> 00:06:35,520
and the third one is obviously

113
00:06:35,520 --> 00:06:37,740
evaluation authorization

114
00:06:37,740 --> 00:06:40,580
next slide please

115
00:06:40,680 --> 00:06:43,979
so um in in those use cases the multiple

116
00:06:43,979 --> 00:06:45,660
issuers use cases

117
00:06:45,660 --> 00:06:48,600
um the the tokens that that could be

118
00:06:48,600 --> 00:06:51,419
issued it could be an access token or an

119
00:06:51,419 --> 00:06:55,319
ID token so the the prime example for an

120
00:06:55,319 --> 00:06:57,960
access token that needs um embedded

121
00:06:57,960 --> 00:07:00,960
tokens is a stir divertic call

122
00:07:00,960 --> 00:07:03,479
so and and this is a telephone use case

123
00:07:03,479 --> 00:07:05,639
so equals B

124
00:07:05,639 --> 00:07:09,720
and the call from B is directed to C

125
00:07:09,720 --> 00:07:14,479
sorry somebody sing some no

126
00:07:14,520 --> 00:07:16,639
okay

127
00:07:16,639 --> 00:07:20,340
so a calls B and the chord from B is

128
00:07:20,340 --> 00:07:22,919
directed to C so when the call is

129
00:07:22,919 --> 00:07:26,880
redirected from B to C B will create a

130
00:07:26,880 --> 00:07:29,460
new token embed the original token that

131
00:07:29,460 --> 00:07:31,520
was talking about a column B

132
00:07:31,520 --> 00:07:35,220
and um and send that the new token

133
00:07:35,220 --> 00:07:37,680
embedded into the new issue token into C

134
00:07:37,680 --> 00:07:41,220
so c will when C receives that we'll be

135
00:07:41,220 --> 00:07:43,560
able to see that the original call was

136
00:07:43,560 --> 00:07:47,039
between a and b and now the call from a

137
00:07:47,039 --> 00:07:49,860
to c was redirected so that that's

138
00:07:49,860 --> 00:07:53,039
that's the use case right the other use

139
00:07:53,039 --> 00:07:55,080
case for the ID token is that hello use

140
00:07:55,080 --> 00:07:57,720
use case that um

141
00:07:57,720 --> 00:08:01,440
a dick is working on and um in the idea

142
00:08:01,440 --> 00:08:03,419
there is you want to be able to link

143
00:08:03,419 --> 00:08:07,020
multiple claims from from multiple or

144
00:08:07,020 --> 00:08:10,380
different issuers for example you could

145
00:08:10,380 --> 00:08:12,960
you can get the date of birth from one

146
00:08:12,960 --> 00:08:15,000
issuer and

147
00:08:15,000 --> 00:08:17,039
um Education certification for for

148
00:08:17,039 --> 00:08:18,419
example from a completely different

149
00:08:18,419 --> 00:08:20,340
issue

150
00:08:20,340 --> 00:08:22,979
next slide please

151
00:08:22,979 --> 00:08:26,160
so the current thinking is that what we

152
00:08:26,160 --> 00:08:27,840
want to utilize the token exchange

153
00:08:27,840 --> 00:08:31,500
mechanism which it has all the the tools

154
00:08:31,500 --> 00:08:34,320
that we need with with just a little bit

155
00:08:34,320 --> 00:08:37,140
of a tweak so in this case

156
00:08:37,140 --> 00:08:40,799
um we want to send a request to to the

157
00:08:40,799 --> 00:08:44,459
as with that original token and ask for

158
00:08:44,459 --> 00:08:47,459
a new token but indicate to

159
00:08:47,459 --> 00:08:49,920
um the as to embed the token that we

160
00:08:49,920 --> 00:08:53,459
sent you in the new issue token

161
00:08:53,459 --> 00:08:56,459
next slide please

162
00:08:56,459 --> 00:08:59,700
so the responses will be a typical token

163
00:08:59,700 --> 00:09:02,220
exchange response with with a requested

164
00:09:02,220 --> 00:09:03,480
token

165
00:09:03,480 --> 00:09:05,760
um including the embedded token

166
00:09:05,760 --> 00:09:08,100
next slide please

167
00:09:08,100 --> 00:09:10,860
so to to do that we wanted also to

168
00:09:10,860 --> 00:09:13,740
define the new tokens claim

169
00:09:13,740 --> 00:09:16,019
in this case

170
00:09:16,019 --> 00:09:19,680
um we defined a token's claim that is

171
00:09:19,680 --> 00:09:22,800
um a list of objects and each object

172
00:09:22,800 --> 00:09:25,440
will have a information about the new

173
00:09:25,440 --> 00:09:28,140
token in this case we're talking about a

174
00:09:28,140 --> 00:09:31,019
type to indicate the type of token and

175
00:09:31,019 --> 00:09:32,399
the token itself

176
00:09:32,399 --> 00:09:35,700
so this is kind of a generic

177
00:09:35,700 --> 00:09:38,040
um means or genetic structure that will

178
00:09:38,040 --> 00:09:39,240
allow us to

179
00:09:39,240 --> 00:09:43,860
address multiple or different use cases

180
00:09:43,860 --> 00:09:46,560
next slide please

181
00:09:46,560 --> 00:09:49,800
so that's that's all all we have a again

182
00:09:49,800 --> 00:09:52,440
we haven't had a chance to update the

183
00:09:52,440 --> 00:09:54,899
draft with all those details that are

184
00:09:54,899 --> 00:09:57,660
still more details technical details

185
00:09:57,660 --> 00:10:00,380
that we're gonna dig deeper into and and

186
00:10:00,380 --> 00:10:05,040
Define and make it clear but

187
00:10:05,040 --> 00:10:07,620
um just wanted to give you a quick

188
00:10:07,620 --> 00:10:10,500
update on our current thinking and if

189
00:10:10,500 --> 00:10:13,440
anybody has any comments question they

190
00:10:13,440 --> 00:10:15,240
happen to hear it right now

191
00:10:15,240 --> 00:10:18,200
got your own

192
00:10:20,040 --> 00:10:23,160
I think over time there will be multiple

193
00:10:23,160 --> 00:10:26,600
different semantics for embedded tokens

194
00:10:26,600 --> 00:10:30,839
and it makes sense to embed

195
00:10:30,839 --> 00:10:33,600
so to to include the

196
00:10:33,600 --> 00:10:36,740
the semantics so something

197
00:10:36,740 --> 00:10:40,080
signifying whether it's

198
00:10:40,080 --> 00:10:43,019
something trusting something else or

199
00:10:43,019 --> 00:10:45,660
just a combination of two things and

200
00:10:45,660 --> 00:10:48,000
probably many other things I'm not

201
00:10:48,000 --> 00:10:50,579
saying we should standardize semantics

202
00:10:50,579 --> 00:10:54,660
I'm saying we should have it explicit in

203
00:10:54,660 --> 00:10:57,240
the token because you're signing it and

204
00:10:57,240 --> 00:11:00,839
you want to minimize

205
00:11:02,279 --> 00:11:05,640
um a confusion attacks

206
00:11:05,640 --> 00:11:08,420
can you say more a little bit more like

207
00:11:08,420 --> 00:11:10,980
can can you give an example for example

208
00:11:10,980 --> 00:11:12,480
just just help me understand exactly

209
00:11:12,480 --> 00:11:15,500
what you mean by this

210
00:11:16,079 --> 00:11:19,260
it's really a question of use cases I'm

211
00:11:19,260 --> 00:11:21,540
not sure I understand enough that

212
00:11:21,540 --> 00:11:24,019
different use cases you're looking at

213
00:11:24,019 --> 00:11:27,660
but you probably don't want to to have

214
00:11:27,660 --> 00:11:31,019
an embedded token that's used for one be

215
00:11:31,019 --> 00:11:33,779
used for a different use case got it got

216
00:11:33,779 --> 00:11:35,940
it yeah that makes sense thank you

217
00:11:35,940 --> 00:11:40,160
any other comments questions

218
00:11:41,000 --> 00:11:42,720
there

219
00:11:42,720 --> 00:11:43,980
Brian

220
00:11:43,980 --> 00:11:45,839
go ahead

221
00:11:45,839 --> 00:11:49,019
I haven't read the draft well it's it's

222
00:11:49,019 --> 00:11:51,839
not up to date so that's why actually I

223
00:11:51,839 --> 00:11:53,399
may have read the last one I'm just

224
00:11:53,399 --> 00:11:55,320
having worked a lot on token exchange

225
00:11:55,320 --> 00:11:57,300
that jumped out at me and it looked like

226
00:11:57,300 --> 00:11:59,700
you had a like an extra parameter to

227
00:11:59,700 --> 00:12:01,140
indicate the interest in the semantics

228
00:12:01,140 --> 00:12:04,560
yeah this is just a a straw man proposal

229
00:12:04,560 --> 00:12:06,420
right now we haven't dug deep into that

230
00:12:06,420 --> 00:12:08,700
yeah if you have any comments just some

231
00:12:08,700 --> 00:12:09,779
thoughts about it because it jumped out

232
00:12:09,779 --> 00:12:11,880
of me the the intended sort of point of

233
00:12:11,880 --> 00:12:14,220
extensibility with token exchange I know

234
00:12:14,220 --> 00:12:15,720
it's kind of a mess but the idea behind

235
00:12:15,720 --> 00:12:18,000
it was to use the token type

236
00:12:18,000 --> 00:12:21,899
as the indicator for that got it kind

237
00:12:21,899 --> 00:12:23,760
of-ish stuff and it's not perfectly

238
00:12:23,760 --> 00:12:26,040
clean I I know that but I would I would

239
00:12:26,040 --> 00:12:29,160
look at that rather than adding

240
00:12:29,160 --> 00:12:30,779
additional parameters to to maybe

241
00:12:30,779 --> 00:12:32,519
indicate both what you're asking for and

242
00:12:32,519 --> 00:12:34,860
what you get back got it just got it

243
00:12:34,860 --> 00:12:37,620
thank you that's very useful feedback I

244
00:12:37,620 --> 00:12:41,339
appreciate that okay that's all

245
00:12:41,339 --> 00:12:44,519
this oh who's who's before Robin

246
00:12:44,519 --> 00:12:46,019
open

247
00:12:46,019 --> 00:12:50,040
Robin go ahead the audio working

248
00:12:50,040 --> 00:12:52,139
can you hear me okay

249
00:12:52,139 --> 00:12:53,459
yep

250
00:12:53,459 --> 00:12:56,880
great uh yeah Robin Wilton uh speaking

251
00:12:56,880 --> 00:12:59,820
in a personal capacity just coming back

252
00:12:59,820 --> 00:13:01,920
to the the comment from the floor just

253
00:13:01,920 --> 00:13:03,600
now about

254
00:13:03,600 --> 00:13:06,360
um maybe not wanting a claim that was

255
00:13:06,360 --> 00:13:09,060
intended for one use to be repurposed

256
00:13:09,060 --> 00:13:10,339
for another one

257
00:13:10,339 --> 00:13:13,860
I I mean I think experience in this

258
00:13:13,860 --> 00:13:16,260
whole area over the last 10 or 15 years

259
00:13:16,260 --> 00:13:17,459
tells us

260
00:13:17,459 --> 00:13:20,100
that you can't you can't tell relying

261
00:13:20,100 --> 00:13:21,959
parties what to rely on

262
00:13:21,959 --> 00:13:25,139
so I mean my instinctive reaction is to

263
00:13:25,139 --> 00:13:28,019
that is don't worry about even trying to

264
00:13:28,019 --> 00:13:30,959
define the semantics because relying

265
00:13:30,959 --> 00:13:34,320
party's going to rely uh and I mean you

266
00:13:34,320 --> 00:13:36,060
know the canonical example is U.S Social

267
00:13:36,060 --> 00:13:37,740
Security numbers

268
00:13:37,740 --> 00:13:39,480
strict rules about what they may or may

269
00:13:39,480 --> 00:13:42,420
not be used for have no effect on who

270
00:13:42,420 --> 00:13:43,920
insists on having them and what they

271
00:13:43,920 --> 00:13:45,240
rely on them for

272
00:13:45,240 --> 00:13:48,440
so don't sweat it is my advice okay

273
00:13:48,440 --> 00:13:51,520
thanks thanks Robin

274
00:13:51,520 --> 00:13:53,779
[Music]

275
00:13:53,779 --> 00:13:57,300
is it yeah I didn't put myself in but

276
00:13:57,300 --> 00:13:59,279
okay go ahead

277
00:13:59,279 --> 00:14:01,680
um so because you're embedding the

278
00:14:01,680 --> 00:14:04,380
original token you know inside the new

279
00:14:04,380 --> 00:14:06,180
one that you're minting essentially

280
00:14:06,180 --> 00:14:07,500
you're giving

281
00:14:07,500 --> 00:14:09,540
full control over that token to the

282
00:14:09,540 --> 00:14:10,920
recipient of that

283
00:14:10,920 --> 00:14:14,160
uh you know new token right right

284
00:14:14,160 --> 00:14:16,800
um so I mean the semantics essentially

285
00:14:16,800 --> 00:14:19,079
becomes like you've completely delegated

286
00:14:19,079 --> 00:14:21,180
that token to whoever is receiving the

287
00:14:21,180 --> 00:14:24,420
new token with the embedded tokens right

288
00:14:24,420 --> 00:14:25,220
um

289
00:14:25,220 --> 00:14:27,779
because if there is any other way like

290
00:14:27,779 --> 00:14:29,519
if there is any other restriction then

291
00:14:29,519 --> 00:14:31,079
you cannot actually embed the token

292
00:14:31,079 --> 00:14:33,060
inside that right you know yeah so

293
00:14:33,060 --> 00:14:36,060
that's correct yeah

294
00:14:36,060 --> 00:14:39,380
okay Kelly

295
00:14:39,720 --> 00:14:41,940
yeah my question is about whether this

296
00:14:41,940 --> 00:14:43,920
is intended to be within a single trust

297
00:14:43,920 --> 00:14:46,320
boundary as as the the term we're using

298
00:14:46,320 --> 00:14:48,779
in the the fine-grained authorization or

299
00:14:48,779 --> 00:14:51,540
across trust boundaries yeah that's a

300
00:14:51,540 --> 00:14:54,420
good question so

301
00:14:54,420 --> 00:14:58,199
so we're talking about different

302
00:14:58,199 --> 00:15:00,180
um issuers so

303
00:15:00,180 --> 00:15:01,980
potentially we're talking about cross

304
00:15:01,980 --> 00:15:04,800
boundaries here in this case right so if

305
00:15:04,800 --> 00:15:07,380
you embed a token generated by say one

306
00:15:07,380 --> 00:15:09,000
authorization server how would it be

307
00:15:09,000 --> 00:15:12,240
parsed by a resource in a different uh

308
00:15:12,240 --> 00:15:13,740
trust boundary is is that something

309
00:15:13,740 --> 00:15:18,360
you've thought about yet yeah so so like

310
00:15:18,360 --> 00:15:21,959
the whole idea is is exactly that like

311
00:15:21,959 --> 00:15:25,500
one Identity or one issue would issued

312
00:15:25,500 --> 00:15:28,740
one token that will embed it in your a

313
00:15:28,740 --> 00:15:30,300
new token that was issued as a

314
00:15:30,300 --> 00:15:32,459
completely different issuer and then

315
00:15:32,459 --> 00:15:34,680
sent to that I trust the outside token

316
00:15:34,680 --> 00:15:37,740
to uh but then still you have to parse

317
00:15:37,740 --> 00:15:39,139
it I guess right you have to understand

318
00:15:39,139 --> 00:15:41,639
you have to validate both right all

319
00:15:41,639 --> 00:15:44,459
right thank you yeah

320
00:15:44,459 --> 00:15:48,920
okay any other comments questions

321
00:15:50,459 --> 00:15:52,920
okay thank you very much that was very

322
00:15:52,920 --> 00:15:56,420
valuable feedback appreciate that

323
00:16:02,100 --> 00:16:04,279
okay

324
00:16:04,800 --> 00:16:06,240
okay

325
00:16:06,240 --> 00:16:09,380
back here

326
00:16:11,940 --> 00:16:16,519
and I think at all

327
00:16:30,300 --> 00:16:32,479
foreign

328
00:16:37,399 --> 00:16:40,259
to drive the slides from here uh yeah

329
00:16:40,259 --> 00:16:42,000
you can drive it there's not a lot of

330
00:16:42,000 --> 00:16:45,000
sites uh hi everyone uh my name is Atul

331
00:16:45,000 --> 00:16:47,579
tulsibaba uh I

332
00:16:47,579 --> 00:16:49,259
have been working with a bunch of folks

333
00:16:49,259 --> 00:16:52,740
in this room uh on uh this fine green

334
00:16:52,740 --> 00:16:55,620
transactional authorization

335
00:16:55,620 --> 00:16:59,940
um idea or requirement and while we are

336
00:16:59,940 --> 00:17:03,000
not get at the stage where we can talk

337
00:17:03,000 --> 00:17:04,319
about specific

338
00:17:04,319 --> 00:17:07,260
specification proposals uh today I would

339
00:17:07,260 --> 00:17:09,599
just like to cover the work that that

340
00:17:09,599 --> 00:17:11,819
group has done and the charter that we

341
00:17:11,819 --> 00:17:14,359
have come up with

342
00:17:15,419 --> 00:17:17,579
and since I didn't take my own pictures

343
00:17:17,579 --> 00:17:21,419
I used a stock photo so

344
00:17:21,419 --> 00:17:22,799
um

345
00:17:22,799 --> 00:17:26,179
yeah I should have asked you

346
00:17:30,360 --> 00:17:31,440
um

347
00:17:31,440 --> 00:17:35,160
so yeah um the the motivation is we want

348
00:17:35,160 --> 00:17:37,740
to secure communication between

349
00:17:37,740 --> 00:17:41,460
microservices both with inside a single

350
00:17:41,460 --> 00:17:44,039
trust domain or a single a single VPC if

351
00:17:44,039 --> 00:17:46,380
you will and across trust domains right

352
00:17:46,380 --> 00:17:49,080
so this is so that if there is a

353
00:17:49,080 --> 00:17:51,179
software supply chain attack or other

354
00:17:51,179 --> 00:17:53,820
way in which a sort of VPC is

355
00:17:53,820 --> 00:17:56,760
compromised you cannot have a elevation

356
00:17:56,760 --> 00:17:58,799
of privileges or you cannot have a

357
00:17:58,799 --> 00:18:02,179
impersonation of users within those uh

358
00:18:02,179 --> 00:18:05,179
you know within that trust domain

359
00:18:05,179 --> 00:18:06,780
and

360
00:18:06,780 --> 00:18:09,120
um this essentially has to be based on

361
00:18:09,120 --> 00:18:10,559
standards because

362
00:18:10,559 --> 00:18:13,020
organizations are going to have

363
00:18:13,020 --> 00:18:14,640
um you know vpcs in different Cloud

364
00:18:14,640 --> 00:18:16,860
platforms between on-premise and Cloud

365
00:18:16,860 --> 00:18:19,559
platforms and stuff like that so unless

366
00:18:19,559 --> 00:18:22,440
we solve this in a standards uh you know

367
00:18:22,440 --> 00:18:24,539
Open Standards kind of way we are going

368
00:18:24,539 --> 00:18:26,520
to be stuck with you know crummy

369
00:18:26,520 --> 00:18:28,500
solutions that cannot easily cross

370
00:18:28,500 --> 00:18:30,780
boundaries of these uh Cloud platforms

371
00:18:30,780 --> 00:18:33,740
next please

372
00:18:34,559 --> 00:18:37,140
um there's a lot of work uh prior work

373
00:18:37,140 --> 00:18:39,720
that has been done and I will just touch

374
00:18:39,720 --> 00:18:42,539
upon each one of these uh so the Netflix

375
00:18:42,539 --> 00:18:45,240
blog just talked about how they can emit

376
00:18:45,240 --> 00:18:47,820
tokens which I think they call passports

377
00:18:47,820 --> 00:18:50,520
uh that can pass through the system

378
00:18:50,520 --> 00:18:53,640
without the ability for anyone to alter

379
00:18:53,640 --> 00:18:56,160
them and so that way you cannot have

380
00:18:56,160 --> 00:18:58,620
impersonation or you cannot have uh

381
00:18:58,620 --> 00:19:00,780
privileged escalation within within a

382
00:19:00,780 --> 00:19:03,000
call chain but this of course Works

383
00:19:03,000 --> 00:19:06,780
within just one trust domain and it also

384
00:19:06,780 --> 00:19:09,299
as far as I know does not protect the

385
00:19:09,299 --> 00:19:10,919
call chain itself so you can actually

386
00:19:10,919 --> 00:19:13,559
take that token and use it somewhere

387
00:19:13,559 --> 00:19:16,860
else and uh it'll it'll just work

388
00:19:16,860 --> 00:19:20,640
uh Athens is a sort of a Yahoo you know

389
00:19:20,640 --> 00:19:21,500
Verizon

390
00:19:21,500 --> 00:19:24,960
uh open source project and that it has

391
00:19:24,960 --> 00:19:27,740
these uh centralized and decentralized

392
00:19:27,740 --> 00:19:31,500
authorization uh capabilities it is

393
00:19:31,500 --> 00:19:34,200
meant for the same application but from

394
00:19:34,200 --> 00:19:36,900
the website it wasn't very clear exactly

395
00:19:36,900 --> 00:19:38,880
how these things worked uh so I'm gonna

396
00:19:38,880 --> 00:19:41,340
just make a mention of it and you know

397
00:19:41,340 --> 00:19:44,280
uh you can read up about it uh you know

398
00:19:44,280 --> 00:19:45,960
later

399
00:19:45,960 --> 00:19:48,240
um George I don't know I I don't I

400
00:19:48,240 --> 00:19:50,280
didn't see George as a attendee remotely

401
00:19:50,280 --> 00:19:52,620
but uh George has been active in in this

402
00:19:52,620 --> 00:19:56,400
working group and oh he's there awesome

403
00:19:56,400 --> 00:19:59,580
um so um he presented an identity

404
00:19:59,580 --> 00:20:02,940
identity Wars 2020 a short-lived

405
00:20:02,940 --> 00:20:04,760
transaction tokens idea which is

406
00:20:04,760 --> 00:20:08,580
jwt-based tokens that last a very short

407
00:20:08,580 --> 00:20:10,440
period of time and you know that can

408
00:20:10,440 --> 00:20:13,200
embed the uh identity and authorization

409
00:20:13,200 --> 00:20:15,960
information so that any service using

410
00:20:15,960 --> 00:20:18,539
that within that period of time can can

411
00:20:18,539 --> 00:20:21,480
rely on that to identify the user and

412
00:20:21,480 --> 00:20:23,640
the authorization scope it does not

413
00:20:23,640 --> 00:20:26,160
again bind the call chain to those

414
00:20:26,160 --> 00:20:27,780
tokens

415
00:20:27,780 --> 00:20:29,480
um so that's

416
00:20:29,480 --> 00:20:32,160
a potential limitation if we are

417
00:20:32,160 --> 00:20:34,740
interested in fixing that uh rifat just

418
00:20:34,740 --> 00:20:36,960
talked about multi-subject tokens or I

419
00:20:36,960 --> 00:20:38,460
guess now it's called multi-assure

420
00:20:38,460 --> 00:20:41,640
tokens uh so

421
00:20:41,640 --> 00:20:45,000
um and then Kelly has uh just put in a

422
00:20:45,000 --> 00:20:49,200
proposal I I saw a draft being submitted

423
00:20:49,200 --> 00:20:52,740
just today I think but we talked at I

424
00:20:52,740 --> 00:20:55,440
Kelly talked at ietf one in film

425
00:20:55,440 --> 00:20:57,900
Philadelphia about token chaining

426
00:20:57,900 --> 00:20:59,520
basically the idea is how do you cross

427
00:20:59,520 --> 00:21:00,720
boundaries

428
00:21:00,720 --> 00:21:03,720
uh between let's say trust boundaries

429
00:21:03,720 --> 00:21:05,340
like between two different organizations

430
00:21:05,340 --> 00:21:08,160
or uh two different you know Cloud

431
00:21:08,160 --> 00:21:09,960
platform instances of the same

432
00:21:09,960 --> 00:21:12,240
organization so you have an

433
00:21:12,240 --> 00:21:14,520
authorization server on one end and an

434
00:21:14,520 --> 00:21:16,080
authorization server on the other end

435
00:21:16,080 --> 00:21:18,299
and you mint a token from the second

436
00:21:18,299 --> 00:21:21,299
authorization server for the outbound

437
00:21:21,299 --> 00:21:24,000
call to use so that it can actually

438
00:21:24,000 --> 00:21:27,539
cross the boundary and be accepted in

439
00:21:27,539 --> 00:21:30,720
the next uh you know trust domain and

440
00:21:30,720 --> 00:21:33,659
then you know I just uh presented uh in

441
00:21:33,659 --> 00:21:37,140
uh ietf114 as well about the generic

442
00:21:37,140 --> 00:21:39,059
problem architecture and I can we can go

443
00:21:39,059 --> 00:21:41,760
into that a little bit uh

444
00:21:41,760 --> 00:21:44,880
um so this is in general what we were

445
00:21:44,880 --> 00:21:45,900
thinking about as the problem

446
00:21:45,900 --> 00:21:48,179
architecture and

447
00:21:48,179 --> 00:21:49,919
um the idea here is that there are

448
00:21:49,919 --> 00:21:53,640
multiple uh vpcs as you can see and it

449
00:21:53,640 --> 00:21:56,159
could be the the vpcs belong to the same

450
00:21:56,159 --> 00:21:58,860
organization like in this case the vpc1

451
00:21:58,860 --> 00:22:01,159
and vpc2 belong to the same organization

452
00:22:01,159 --> 00:22:03,539
or it could be that you're calling a

453
00:22:03,539 --> 00:22:06,179
third party API and you know that

454
00:22:06,179 --> 00:22:07,440
belongs to a

455
00:22:07,440 --> 00:22:09,600
different organization but it could be

456
00:22:09,600 --> 00:22:12,059
that the data in there is of your own

457
00:22:12,059 --> 00:22:13,679
organization so you want to make sure

458
00:22:13,679 --> 00:22:14,940
that

459
00:22:14,940 --> 00:22:18,240
um none of these call chains essentially

460
00:22:18,240 --> 00:22:20,220
can result in a privileged escalation or

461
00:22:20,220 --> 00:22:23,940
a user impersonation uh within that

462
00:22:23,940 --> 00:22:26,640
sequence of events and

463
00:22:26,640 --> 00:22:28,980
um the different colored services like

464
00:22:28,980 --> 00:22:29,820
the

465
00:22:29,820 --> 00:22:32,520
uh you know the Blues Blue bubbles uh

466
00:22:32,520 --> 00:22:35,640
represent external externally facing

467
00:22:35,640 --> 00:22:39,299
rest apis that can be called by

468
00:22:39,299 --> 00:22:42,780
um you know uh publicly sort of

469
00:22:42,780 --> 00:22:46,440
documented clients and the yellow

470
00:22:46,440 --> 00:22:49,620
bubbles represent my what I'm calling

471
00:22:49,620 --> 00:22:51,539
pass through microservices what that

472
00:22:51,539 --> 00:22:53,280
means is

473
00:22:53,280 --> 00:22:55,559
um they need not necessarily need to

474
00:22:55,559 --> 00:22:57,600
know the identity of the user but they

475
00:22:57,600 --> 00:23:00,240
they can just pass that token through to

476
00:23:00,240 --> 00:23:03,299
a resource uh microservice which

477
00:23:03,299 --> 00:23:05,220
actually needs the identity of the user

478
00:23:05,220 --> 00:23:07,799
right so if let's say I'm writing a

479
00:23:07,799 --> 00:23:09,299
microservice that just Aggregates

480
00:23:09,299 --> 00:23:10,980
information from different

481
00:23:10,980 --> 00:23:13,320
other microservices I don't need to know

482
00:23:13,320 --> 00:23:15,539
who the user is right I can just pass

483
00:23:15,539 --> 00:23:17,400
that information to the resource

484
00:23:17,400 --> 00:23:19,400
microservice and then get back

485
00:23:19,400 --> 00:23:21,900
the data and then aggregate that and

486
00:23:21,900 --> 00:23:23,760
send my response back

487
00:23:23,760 --> 00:23:27,240
and um yeah so that's sort of the

488
00:23:27,240 --> 00:23:29,039
general architecture that we've been

489
00:23:29,039 --> 00:23:30,539
working with

490
00:23:30,539 --> 00:23:32,340
and so now let's come to the Charter

491
00:23:32,340 --> 00:23:34,020
that we have defined

492
00:23:34,020 --> 00:23:36,539
um next slide please yeah

493
00:23:36,539 --> 00:23:39,240
um so we we had a couple of workshops or

494
00:23:39,240 --> 00:23:41,039
actually one workshop and a one one call

495
00:23:41,039 --> 00:23:43,200
after that we had all these companies

496
00:23:43,200 --> 00:23:44,340
attend

497
00:23:44,340 --> 00:23:47,820
um and we've now got certain proposals

498
00:23:47,820 --> 00:23:48,840
to the

499
00:23:48,840 --> 00:23:51,720
um uh existing Charter you can download

500
00:23:51,720 --> 00:23:53,820
the charter I just put it up on our

501
00:23:53,820 --> 00:23:55,440
website and you know you can download it

502
00:23:55,440 --> 00:23:56,880
from there

503
00:23:56,880 --> 00:23:59,760
um but uh you know other uh attendees

504
00:23:59,760 --> 00:24:04,380
May later add themselves uh so next

505
00:24:04,380 --> 00:24:05,340
slide please

506
00:24:05,340 --> 00:24:07,980
so let's let's go into the you know what

507
00:24:07,980 --> 00:24:11,700
what is in sorry somebody say for an ITF

508
00:24:11,700 --> 00:24:13,919
group or chapter four or Charter for the

509
00:24:13,919 --> 00:24:17,159
work it's Charter for the work we

510
00:24:17,159 --> 00:24:18,120
haven't

511
00:24:18,120 --> 00:24:21,000
I mean we expect the work to happen in O

512
00:24:21,000 --> 00:24:22,860
Arts you know

513
00:24:22,860 --> 00:24:25,140
it's one possibility right but you know

514
00:24:25,140 --> 00:24:29,039
uh we haven't quite defined that yet so

515
00:24:29,039 --> 00:24:32,280
um so we would like to cover in this uh

516
00:24:32,280 --> 00:24:34,260
work both you know interactive and batch

517
00:24:34,260 --> 00:24:37,260
invocations so uh interactive is where

518
00:24:37,260 --> 00:24:40,320
the user is actually uh present and a

519
00:24:40,320 --> 00:24:42,179
batch invocation as well something's

520
00:24:42,179 --> 00:24:45,059
acting on behalf of the user

521
00:24:45,059 --> 00:24:47,100
um and then there are invocations which

522
00:24:47,100 --> 00:24:48,720
could be synchronous which means that

523
00:24:48,720 --> 00:24:50,940
the the expectation is that the call

524
00:24:50,940 --> 00:24:53,880
will return in a short period of time or

525
00:24:53,880 --> 00:24:55,559
it could be asynchronous where it could

526
00:24:55,559 --> 00:24:57,179
take much longer

527
00:24:57,179 --> 00:25:00,299
and um there are trust boundaries so

528
00:25:00,299 --> 00:25:02,159
these are like things like you know an

529
00:25:02,159 --> 00:25:05,580
on-prem uh on-premise uh installation

530
00:25:05,580 --> 00:25:07,620
that is then talking to a cloud uh

531
00:25:07,620 --> 00:25:09,960
service or uh you know services within

532
00:25:09,960 --> 00:25:12,000
one Cloud platform

533
00:25:12,000 --> 00:25:13,799
um maybe it's the same organization's

534
00:25:13,799 --> 00:25:15,059
tenant and

535
00:25:15,059 --> 00:25:18,780
just as an example AWS uh talking to a

536
00:25:18,780 --> 00:25:21,600
tenant in Azure uh belonging to the same

537
00:25:21,600 --> 00:25:23,520
organization so it's

538
00:25:23,520 --> 00:25:25,140
um you know those are the trust

539
00:25:25,140 --> 00:25:27,000
boundaries that we are talking about

540
00:25:27,000 --> 00:25:29,640
and we're just defining our PCS as

541
00:25:29,640 --> 00:25:31,860
something that uh is the actual call

542
00:25:31,860 --> 00:25:35,220
made between microservices and the call

543
00:25:35,220 --> 00:25:38,580
chain is the sequence of events that uh

544
00:25:38,580 --> 00:25:41,039
result from an invocation at the top

545
00:25:41,039 --> 00:25:43,860
level which could be a user like an

546
00:25:43,860 --> 00:25:45,179
interactive invocation or a batch

547
00:25:45,179 --> 00:25:47,039
invocation right

548
00:25:47,039 --> 00:25:50,120
next slide please

549
00:25:52,860 --> 00:25:56,520
right so I'm not going to read this a

550
00:25:56,520 --> 00:25:57,900
lot but this is the purpose of the group

551
00:25:57,900 --> 00:25:59,520
right we want to make sure that it

552
00:25:59,520 --> 00:26:01,020
provides

553
00:26:01,020 --> 00:26:03,360
um it can convey authentication uh

554
00:26:03,360 --> 00:26:06,179
without modification it can provide

555
00:26:06,179 --> 00:26:07,799
least privilege fine-grained

556
00:26:07,799 --> 00:26:10,320
authorization so the Scopes that are

557
00:26:10,320 --> 00:26:13,260
defined uh for the call chain can be

558
00:26:13,260 --> 00:26:16,679
very fine grained and it can provide the

559
00:26:16,679 --> 00:26:20,220
context information uh required to

560
00:26:20,220 --> 00:26:23,100
um you know in an immutable sort of way

561
00:26:23,100 --> 00:26:25,140
so that you cannot do things like let's

562
00:26:25,140 --> 00:26:27,840
say I want to put in a buy order for a

563
00:26:27,840 --> 00:26:29,460
certain stock something in the middle

564
00:26:29,460 --> 00:26:32,220
can't change that order value or the you

565
00:26:32,220 --> 00:26:34,200
know the

566
00:26:34,200 --> 00:26:38,659
sort of the security that I'm buying

567
00:26:39,960 --> 00:26:42,080
um

568
00:26:42,659 --> 00:26:46,260
yeah so we want to limit the scope to

569
00:26:46,260 --> 00:26:49,020
basically just you know providing the

570
00:26:49,020 --> 00:26:51,720
framework to communicate identities uh

571
00:26:51,720 --> 00:26:53,880
that's one part of it which is uh you

572
00:26:53,880 --> 00:26:55,440
know how do you identify the same user

573
00:26:55,440 --> 00:26:56,880
when you're crossing a trust boundary

574
00:26:56,880 --> 00:27:00,720
right when you're uh let's say in uh

575
00:27:00,720 --> 00:27:03,960
you're in a VPC that is an AWS and now

576
00:27:03,960 --> 00:27:06,059
you want to go to a VPC that is in in

577
00:27:06,059 --> 00:27:07,260
azure

578
00:27:07,260 --> 00:27:09,720
how do you talk about that same user on

579
00:27:09,720 --> 00:27:12,059
both sides right so that is just a

580
00:27:12,059 --> 00:27:13,620
framework for communicating the identity

581
00:27:13,620 --> 00:27:15,600
not trying to define a new identity

582
00:27:15,600 --> 00:27:17,340
format or something like that but just

583
00:27:17,340 --> 00:27:20,159
arriving at a Convention of how we will

584
00:27:20,159 --> 00:27:21,720
identify the user and there's some

585
00:27:21,720 --> 00:27:24,600
existing work out there like in the ietf

586
00:27:24,600 --> 00:27:27,299
SEC events working group that we could

587
00:27:27,299 --> 00:27:30,779
use potentially for for this purpose

588
00:27:30,779 --> 00:27:33,539
um and then we want to also uh provide a

589
00:27:33,539 --> 00:27:35,940
mechanism for security securely

590
00:27:35,940 --> 00:27:37,620
communicating that identity and

591
00:27:37,620 --> 00:27:39,659
authorization information and the

592
00:27:39,659 --> 00:27:43,200
context information between services

593
00:27:43,200 --> 00:27:45,620
foreign

594
00:27:45,620 --> 00:27:48,120
and so what what information are we

595
00:27:48,120 --> 00:27:49,679
talking about right so this is these are

596
00:27:49,679 --> 00:27:51,360
all the things that we want to make sure

597
00:27:51,360 --> 00:27:53,580
that the identity of the principal you

598
00:27:53,580 --> 00:27:55,700
know uh invoking the call is preserved

599
00:27:55,700 --> 00:27:58,380
uh we also want to make sure that the

600
00:27:58,380 --> 00:28:00,720
identity of the services that are in the

601
00:28:00,720 --> 00:28:03,840
call chain is preserved and

602
00:28:03,840 --> 00:28:06,299
um the authorization scope you know as

603
00:28:06,299 --> 00:28:09,240
defined at the top level but also if it

604
00:28:09,240 --> 00:28:12,659
was uh downscoped or modified along the

605
00:28:12,659 --> 00:28:14,580
call chain you know that information

606
00:28:14,580 --> 00:28:18,419
should always also be present and uh you

607
00:28:18,419 --> 00:28:20,820
know the context of the uh invocation

608
00:28:20,820 --> 00:28:22,799
should also be preserved right so that

609
00:28:22,799 --> 00:28:25,320
you cannot mutate

610
00:28:25,320 --> 00:28:27,240
um you know what it is the call is about

611
00:28:27,240 --> 00:28:30,179
so these are the pieces of information

612
00:28:30,179 --> 00:28:32,820
that we need to preserve along uh in the

613
00:28:32,820 --> 00:28:33,840
call chain

614
00:28:33,840 --> 00:28:36,980
uh as we go

615
00:28:37,380 --> 00:28:39,779
I think we well okay about 15 minutes do

616
00:28:39,779 --> 00:28:42,779
you want to kind of maybe a little bit

617
00:28:42,779 --> 00:28:45,419
wrap it up in in a few minutes and get

618
00:28:45,419 --> 00:28:49,140
see if there is some feedback yeah so um

619
00:28:49,140 --> 00:28:50,279
we're going to have a little more

620
00:28:50,279 --> 00:28:51,659
discussion tomorrow

621
00:28:51,659 --> 00:28:53,760
um so uh I think there's just one more

622
00:28:53,760 --> 00:28:56,159
slide that I want to okay um let's let's

623
00:28:56,159 --> 00:28:58,080
skip this one

624
00:28:58,080 --> 00:29:00,600
um let's skip this one as well uh let's

625
00:29:00,600 --> 00:29:02,460
skip this one as well

626
00:29:02,460 --> 00:29:05,100
um yeah so these are the things that we

627
00:29:05,100 --> 00:29:06,779
would like to discuss right so we want

628
00:29:06,779 --> 00:29:10,679
to uh we want to discuss things like you

629
00:29:10,679 --> 00:29:13,080
know uh the short-lived tokens or the

630
00:29:13,080 --> 00:29:15,360
efficiency considerations because this

631
00:29:15,360 --> 00:29:16,980
is something that that is going to have

632
00:29:16,980 --> 00:29:18,779
to go with every RPC between

633
00:29:18,779 --> 00:29:21,059
microservices so it needs to be super

634
00:29:21,059 --> 00:29:22,799
efficient

635
00:29:22,799 --> 00:29:24,779
um you know how do we verify the call

636
00:29:24,779 --> 00:29:26,880
chain and I think we've had some good

637
00:29:26,880 --> 00:29:29,279
discussions uh in the last few days over

638
00:29:29,279 --> 00:29:32,159
here and so we there is some clarity on

639
00:29:32,159 --> 00:29:34,740
some of this but uh I think it'll be

640
00:29:34,740 --> 00:29:36,840
good to get opinions from everyone about

641
00:29:36,840 --> 00:29:38,520
you know how whether this is important

642
00:29:38,520 --> 00:29:41,580
or not important and so on so

643
00:29:41,580 --> 00:29:44,460
um that's kind of uh we'll be discussing

644
00:29:44,460 --> 00:29:46,740
some of those tomorrow uh would love to

645
00:29:46,740 --> 00:29:50,299
encourage people to participate

646
00:29:51,299 --> 00:29:54,059
anybody has any thoughts

647
00:29:54,059 --> 00:29:57,139
at this stage

648
00:29:59,700 --> 00:30:02,279
I don't see anybody in the queue

649
00:30:02,279 --> 00:30:04,500
all right so yeah yeah we're gonna

650
00:30:04,500 --> 00:30:06,539
discuss this in a bit more details

651
00:30:06,539 --> 00:30:10,260
tomorrow so encourage people to join us

652
00:30:10,260 --> 00:30:14,899
tomorrow okay great thank you thank you

653
00:30:14,940 --> 00:30:18,419
okay Peter

654
00:30:27,059 --> 00:30:30,740
may I follow you here

655
00:30:37,620 --> 00:30:41,178
no I I am to give you control

656
00:30:51,840 --> 00:30:54,260
yes

657
00:31:04,640 --> 00:31:06,440
again

658
00:31:06,440 --> 00:31:11,299
no you should see it

659
00:31:13,440 --> 00:31:16,460
just kidding me try someone again

660
00:31:16,460 --> 00:31:19,980
did you give someone his control no I'm

661
00:31:19,980 --> 00:31:22,159
okay

662
00:31:23,399 --> 00:31:25,459
yeah

663
00:31:25,679 --> 00:31:28,020
Big Slice control impact

664
00:31:28,020 --> 00:31:30,419
take it back and redo it or Bachelor

665
00:31:30,419 --> 00:31:32,659
yeah

666
00:31:34,279 --> 00:31:38,240
okay let me take it back

667
00:31:51,620 --> 00:31:55,158
just simple

668
00:31:55,860 --> 00:31:58,500
all right uh thanks everybody for coming

669
00:31:58,500 --> 00:32:00,000
this afternoon

670
00:32:00,000 --> 00:32:02,399
um I'm Peter and I'm gonna talk a little

671
00:32:02,399 --> 00:32:03,960
bit more about some of the Cross device

672
00:32:03,960 --> 00:32:06,059
flows first I just want to do a sound

673
00:32:06,059 --> 00:32:08,039
check and everybody hear me okay is the

674
00:32:08,039 --> 00:32:10,080
sound okay good so you might want to

675
00:32:10,080 --> 00:32:12,740
adjust that yeah

676
00:32:16,380 --> 00:32:17,640
there we go

677
00:32:17,640 --> 00:32:18,899
even better

678
00:32:18,899 --> 00:32:21,559
all right

679
00:32:21,600 --> 00:32:23,760
um okay so

680
00:32:23,760 --> 00:32:25,080
um I'm going to talk about cross device

681
00:32:25,080 --> 00:32:27,179
flows I think this is a topic that we've

682
00:32:27,179 --> 00:32:30,299
discussed at a number of venues and I'm

683
00:32:30,299 --> 00:32:31,620
going to give a little bit of an update

684
00:32:31,620 --> 00:32:33,899
on the progress that we've made and also

685
00:32:33,899 --> 00:32:35,640
just a recap for folks who may be new to

686
00:32:35,640 --> 00:32:37,200
the topic as well

687
00:32:37,200 --> 00:32:40,080
okay okay

688
00:32:40,080 --> 00:32:42,120
here all right yeah oh I didn't need to

689
00:32:42,120 --> 00:32:45,179
look back thank you she's unblind all

690
00:32:45,179 --> 00:32:45,840
right

691
00:32:45,840 --> 00:32:48,059
um so uh there was a challenge right you

692
00:32:48,059 --> 00:32:49,980
have to take a picture locally and this

693
00:32:49,980 --> 00:32:52,500
is mine mind the gap and it's actually

694
00:32:52,500 --> 00:32:55,740
kind of topical for this presentation uh

695
00:32:55,740 --> 00:32:57,120
because it turns out there's a couple of

696
00:32:57,120 --> 00:32:59,460
gaps that we need to pay attention to

697
00:32:59,460 --> 00:33:02,460
and um and maybe we just need to put a

698
00:33:02,460 --> 00:33:04,559
label up or maybe we we also need to do

699
00:33:04,559 --> 00:33:06,240
a little bit more

700
00:33:06,240 --> 00:33:10,140
so uh first of all right I'm gonna talk

701
00:33:10,140 --> 00:33:11,880
very quickly just about the problem as a

702
00:33:11,880 --> 00:33:13,860
recap a little bit about our journey so

703
00:33:13,860 --> 00:33:15,840
far you know how we're thinking about

704
00:33:15,840 --> 00:33:19,019
managing this risk some proposals

705
00:33:19,019 --> 00:33:20,279
um I'll I'm going to talk a little bit

706
00:33:20,279 --> 00:33:22,140
about the draft proposal that was

707
00:33:22,140 --> 00:33:23,940
circulated maybe two two and a half

708
00:33:23,940 --> 00:33:25,799
weeks ago

709
00:33:25,799 --> 00:33:27,960
um and then I think a question for this

710
00:33:27,960 --> 00:33:30,240
room and for this audience is what do we

711
00:33:30,240 --> 00:33:31,980
do next right where do we go next with

712
00:33:31,980 --> 00:33:36,080
this uh with this work if anywhere

713
00:33:36,480 --> 00:33:39,840
okay uh so uh one of the things I want

714
00:33:39,840 --> 00:33:41,340
to maybe just start with is just this

715
00:33:41,340 --> 00:33:44,100
idea of an attack and and where are

716
00:33:44,100 --> 00:33:45,840
these attacks on the identity systems

717
00:33:45,840 --> 00:33:48,779
come from and so uh if you look at this

718
00:33:48,779 --> 00:33:50,279
graph it's kind of interesting right

719
00:33:50,279 --> 00:33:52,380
there's sort of an entry point uh right

720
00:33:52,380 --> 00:33:54,360
at the the start which often involves

721
00:33:54,360 --> 00:33:57,240
social engineering Etc and then there is

722
00:33:57,240 --> 00:33:59,460
a a couple of other entry points brute

723
00:33:59,460 --> 00:34:01,919
forcing and also exploiting the

724
00:34:01,919 --> 00:34:04,740
protocols itself and one of the things I

725
00:34:04,740 --> 00:34:07,200
think that we often do uh or one of the

726
00:34:07,200 --> 00:34:09,839
places where we put a lot of focus is

727
00:34:09,839 --> 00:34:12,060
really the space here right we think and

728
00:34:12,060 --> 00:34:14,159
we spend a lot of time thinking about

729
00:34:14,159 --> 00:34:16,020
how an attacker could exploit the

730
00:34:16,020 --> 00:34:19,139
protocol from a technical perspective

731
00:34:19,139 --> 00:34:21,599
however I think one of the things that

732
00:34:21,599 --> 00:34:23,280
we've been learning over the last two

733
00:34:23,280 --> 00:34:27,899
years or so is that attackers are

734
00:34:27,899 --> 00:34:30,300
because of the really good work that

735
00:34:30,300 --> 00:34:32,099
people in this room and elsewhere have

736
00:34:32,099 --> 00:34:34,679
done attackers are actually sort of not

737
00:34:34,679 --> 00:34:36,300
going for the difficult problem of

738
00:34:36,300 --> 00:34:38,940
attacking the protocol as such

739
00:34:38,940 --> 00:34:39,839
um

740
00:34:39,839 --> 00:34:43,918
oh come on uh they're focusing here

741
00:34:43,918 --> 00:34:45,599
right they're focusing on the social

742
00:34:45,599 --> 00:34:48,179
engineering side and this is kind of you

743
00:34:48,179 --> 00:34:50,280
know part of that mind the gap right all

744
00:34:50,280 --> 00:34:52,260
our retention is going into making sure

745
00:34:52,260 --> 00:34:53,940
the technology and the protocols are

746
00:34:53,940 --> 00:34:56,280
secure and I think that's great but it's

747
00:34:56,280 --> 00:34:58,619
it's leaving some of these uh social

748
00:34:58,619 --> 00:35:00,960
engineering gaps and and some of them

749
00:35:00,960 --> 00:35:04,440
are you know implementation issues but

750
00:35:04,440 --> 00:35:06,780
it's also sometimes I think we've

751
00:35:06,780 --> 00:35:08,220
observed some of these as sort of

752
00:35:08,220 --> 00:35:11,040
unintended or unexpected right

753
00:35:11,040 --> 00:35:14,880
um it continues to be surprising uh that

754
00:35:14,880 --> 00:35:16,380
people are surprised that this is a

755
00:35:16,380 --> 00:35:19,619
problem and so an area or a gap that we

756
00:35:19,619 --> 00:35:22,500
we're we might want to focus on a little

757
00:35:22,500 --> 00:35:23,640
bit more

758
00:35:23,640 --> 00:35:26,400
so very specifically I think one of the

759
00:35:26,400 --> 00:35:29,220
flows that we've been looking at is the

760
00:35:29,220 --> 00:35:31,980
device authorization Grant or device

761
00:35:31,980 --> 00:35:34,320
code flow and so typically how that

762
00:35:34,320 --> 00:35:36,180
works is on the one end right you have

763
00:35:36,180 --> 00:35:38,339
an attacker who controls a device or is

764
00:35:38,339 --> 00:35:40,320
able to connect to the authorization

765
00:35:40,320 --> 00:35:43,640
server and they can initiate a session

766
00:35:43,640 --> 00:35:47,280
they can then get hold of a user code or

767
00:35:47,280 --> 00:35:49,680
a QR code or something like that and

768
00:35:49,680 --> 00:35:52,200
they change the context before they

769
00:35:52,200 --> 00:35:54,240
present it to the user and so really

770
00:35:54,240 --> 00:35:56,040
what they're doing here is that they're

771
00:35:56,040 --> 00:35:58,220
exploiting an unauthenticated Channel

772
00:35:58,220 --> 00:36:00,780
between two devices right the place

773
00:36:00,780 --> 00:36:03,660
where the the session gets initiated and

774
00:36:03,660 --> 00:36:06,900
the place where a user is consuming it

775
00:36:06,900 --> 00:36:09,839
um and they're incredibly creative right

776
00:36:09,839 --> 00:36:13,859
it is things like click to win or

777
00:36:13,859 --> 00:36:15,540
um you know sign in or we're going to

778
00:36:15,540 --> 00:36:18,660
delete your SharePoint site or

779
00:36:18,660 --> 00:36:20,220
um you know any other number of things

780
00:36:20,220 --> 00:36:25,020
that creates anxiety a sense of urgency

781
00:36:25,020 --> 00:36:27,359
um and get the user to say yes there's

782
00:36:27,359 --> 00:36:29,579
other variations of this where it

783
00:36:29,579 --> 00:36:32,339
actually gets coupled with timing uh or

784
00:36:32,339 --> 00:36:34,260
just spamming people right just giving

785
00:36:34,260 --> 00:36:37,079
people uh you know you get you get

786
00:36:37,079 --> 00:36:39,720
notifications at two o'clock in the

787
00:36:39,720 --> 00:36:42,380
morning every five minutes to

788
00:36:42,380 --> 00:36:44,579
authenticate or authorize a transaction

789
00:36:44,579 --> 00:36:46,980
and eventually somebody says yes right

790
00:36:46,980 --> 00:36:49,200
so the sort of a user user experience

791
00:36:49,200 --> 00:36:50,760
issue there

792
00:36:50,760 --> 00:36:53,400
so of course once the user has done this

793
00:36:53,400 --> 00:36:56,040
they end up they they get this they you

794
00:36:56,040 --> 00:36:57,060
know they're going to click to win

795
00:36:57,060 --> 00:36:59,339
because today's the day right and they

796
00:36:59,339 --> 00:37:01,920
scan and they enter that code

797
00:37:01,920 --> 00:37:03,660
um they perform their authentication

798
00:37:03,660 --> 00:37:05,339
authorization and this can be strong

799
00:37:05,339 --> 00:37:07,200
auth right or it can be multi-factor or

800
00:37:07,200 --> 00:37:09,240
Fido doesn't matter because with this

801
00:37:09,240 --> 00:37:11,520
attack it's the attacker I don't I'm not

802
00:37:11,520 --> 00:37:13,440
after your credentials right it's not a

803
00:37:13,440 --> 00:37:15,720
traditional phishing attack I just want

804
00:37:15,720 --> 00:37:17,460
you to say yes because what I really

805
00:37:17,460 --> 00:37:18,359
want

806
00:37:18,359 --> 00:37:20,700
is for you to say yes that I can access

807
00:37:20,700 --> 00:37:23,040
your tokens your access token your

808
00:37:23,040 --> 00:37:25,200
refresh token and then I can leverage

809
00:37:25,200 --> 00:37:28,140
those sometimes to do a lateral attack

810
00:37:28,140 --> 00:37:30,839
to a different uh uh you know I can sort

811
00:37:30,839 --> 00:37:33,359
of move across or even just if I have

812
00:37:33,359 --> 00:37:35,280
access to your your mailbox right that's

813
00:37:35,280 --> 00:37:37,200
already plenty because now I can start

814
00:37:37,200 --> 00:37:39,780
sending mail on behalf of you I can

815
00:37:39,780 --> 00:37:42,839
request additional access right I think

816
00:37:42,839 --> 00:37:44,280
we're seeing attackers being really

817
00:37:44,280 --> 00:37:46,800
really clever uh and not really

818
00:37:46,800 --> 00:37:48,540
attacking the technical aspects of the

819
00:37:48,540 --> 00:37:50,400
protocol but but using this sort of soft

820
00:37:50,400 --> 00:37:53,040
entry point with users

821
00:37:53,040 --> 00:37:57,180
so really to to uh to to recap

822
00:37:57,180 --> 00:37:59,099
um you know start off by initiating the

823
00:37:59,099 --> 00:38:00,839
session some social engineering

824
00:38:00,839 --> 00:38:03,420
technique to rephrase what's happening

825
00:38:03,420 --> 00:38:05,160
for the user

826
00:38:05,160 --> 00:38:06,960
um and you end up bypassing strong

827
00:38:06,960 --> 00:38:08,400
authentication multi-factor

828
00:38:08,400 --> 00:38:09,780
authentication

829
00:38:09,780 --> 00:38:13,740
um and um and you're in

830
00:38:13,740 --> 00:38:15,000
um you know I think one of the things

831
00:38:15,000 --> 00:38:17,220
that we do do and I've I'm sort of

832
00:38:17,220 --> 00:38:19,020
laying a challenge down to people on

833
00:38:19,020 --> 00:38:21,480
this one especially uh folks working on

834
00:38:21,480 --> 00:38:25,440
formal analysis Etc we we model the user

835
00:38:25,440 --> 00:38:28,680
right when we design these protocols we

836
00:38:28,680 --> 00:38:30,480
sort of expect Perfection from the end

837
00:38:30,480 --> 00:38:32,040
user they're going to make good

838
00:38:32,040 --> 00:38:34,260
judgments they're going to be smart

839
00:38:34,260 --> 00:38:38,400
about when they say yes or no do things

840
00:38:38,400 --> 00:38:40,980
um but the reality is uh it doesn't work

841
00:38:40,980 --> 00:38:42,420
right and I think some of the recent

842
00:38:42,420 --> 00:38:45,300
attacks where I believe you know a large

843
00:38:45,300 --> 00:38:46,520
company

844
00:38:46,520 --> 00:38:50,099
suffered uh an attack and and the attack

845
00:38:50,099 --> 00:38:53,280
ended up being I think against uh part

846
00:38:53,280 --> 00:38:55,140
of their security organization right so

847
00:38:55,140 --> 00:38:56,339
even people who are Security

848
00:38:56,339 --> 00:39:00,660
Professionals end up being caught out by

849
00:39:00,660 --> 00:39:03,300
these attacks and so

850
00:39:03,300 --> 00:39:05,339
um the reality is right I think we need

851
00:39:05,339 --> 00:39:08,400
to find a way and we need to accept that

852
00:39:08,400 --> 00:39:11,099
this is happening that there is a person

853
00:39:11,099 --> 00:39:12,780
a human on the other end that's going to

854
00:39:12,780 --> 00:39:14,640
make bad decisions visions and we should

855
00:39:14,640 --> 00:39:16,079
just be thinking more about how we

856
00:39:16,079 --> 00:39:20,099
design for that as well and so this this

857
00:39:20,099 --> 00:39:22,380
work is really sort of been teasing out

858
00:39:22,380 --> 00:39:24,720
about what could we do in that space

859
00:39:24,720 --> 00:39:25,920
um as well

860
00:39:25,920 --> 00:39:28,740
so you know just in summary

861
00:39:28,740 --> 00:39:30,839
um really these are attacks in the

862
00:39:30,839 --> 00:39:32,880
cross-device sense that we're seeing

863
00:39:32,880 --> 00:39:34,380
that's about exploiting this

864
00:39:34,380 --> 00:39:36,960
unauthenticated channel

865
00:39:36,960 --> 00:39:39,359
um this idea that the user is going to

866
00:39:39,359 --> 00:39:41,579
make good decisions right we sort of not

867
00:39:41,579 --> 00:39:43,800
abdicate but we give responsibility to

868
00:39:43,800 --> 00:39:46,980
the user and they malfunction right they

869
00:39:46,980 --> 00:39:50,339
they make errors they make mistakes in

870
00:39:50,339 --> 00:39:52,200
their decisions

871
00:39:52,200 --> 00:39:53,520
um I think the other thing that's come

872
00:39:53,520 --> 00:39:55,320
out as I started looking at this is that

873
00:39:55,320 --> 00:39:57,720
this is not just device authorization

874
00:39:57,720 --> 00:40:00,119
ground or device code flow was the first

875
00:40:00,119 --> 00:40:02,280
place we started seeing these attacks

876
00:40:02,280 --> 00:40:04,800
but as we sort of dug in right there's

877
00:40:04,800 --> 00:40:07,079
plenty of other cross-device flows and

878
00:40:07,079 --> 00:40:09,359
so the question is also how do we take

879
00:40:09,359 --> 00:40:11,579
some of this learning and apply it and

880
00:40:11,579 --> 00:40:13,500
and how do we think about those other

881
00:40:13,500 --> 00:40:17,220
protocols and how how would that how can

882
00:40:17,220 --> 00:40:19,859
we apply the learnings but then also are

883
00:40:19,859 --> 00:40:21,720
some of these other protocols actually

884
00:40:21,720 --> 00:40:24,799
better replacements

885
00:40:24,960 --> 00:40:26,640
so so far

886
00:40:26,640 --> 00:40:29,880
um it's about a just over maybe uh 12

887
00:40:29,880 --> 00:40:31,800
months ago that we've sort of started

888
00:40:31,800 --> 00:40:33,960
digging into these attacks

889
00:40:33,960 --> 00:40:37,020
um last December at osw we sort of

890
00:40:37,020 --> 00:40:38,820
brought this to the community for the

891
00:40:38,820 --> 00:40:40,560
first time we described the issues we

892
00:40:40,560 --> 00:40:43,200
were seeing and sort of tried to get a

893
00:40:43,200 --> 00:40:46,020
sense of other people are seeing it

894
00:40:46,020 --> 00:40:48,300
um in Vienna we had a similar

895
00:40:48,300 --> 00:40:50,099
presentation really just getting a gauge

896
00:40:50,099 --> 00:40:51,599
is their interest at the time there was

897
00:40:51,599 --> 00:40:53,880
quite a bit of interest from people and

898
00:40:53,880 --> 00:40:56,400
a few folks came up and said yes they

899
00:40:56,400 --> 00:40:58,980
want to sort of help uh explore this

900
00:40:58,980 --> 00:41:00,599
problem

901
00:41:00,599 --> 00:41:04,680
um at osw 2022 an identiverse we really

902
00:41:04,680 --> 00:41:08,579
spent uh in fact osw in particular was

903
00:41:08,579 --> 00:41:11,099
an extremely productive uh set of

904
00:41:11,099 --> 00:41:13,740
discussions around the problem and it

905
00:41:13,740 --> 00:41:15,359
really helped me and everybody else

906
00:41:15,359 --> 00:41:17,400
understand more around the challenges

907
00:41:17,400 --> 00:41:19,020
the potential mitigations and the

908
00:41:19,020 --> 00:41:20,400
breadth of the problem

909
00:41:20,400 --> 00:41:22,560
uh so I really want to thank everybody

910
00:41:22,560 --> 00:41:25,320
for their contributions there uh and

911
00:41:25,320 --> 00:41:27,839
then I think the previous IDF I gave an

912
00:41:27,839 --> 00:41:28,980
update and I think one of the questions

913
00:41:28,980 --> 00:41:32,099
was well okay so where's the write-up

914
00:41:32,099 --> 00:41:34,920
um and so uh actually we went off and

915
00:41:34,920 --> 00:41:37,440
did that so with Daniel and Philip uh we

916
00:41:37,440 --> 00:41:39,240
ended up creating

917
00:41:39,240 --> 00:41:41,579
um uh this framework so

918
00:41:41,579 --> 00:41:43,260
sort of thinking about our approach in

919
00:41:43,260 --> 00:41:45,180
terms of practical mitigations looking

920
00:41:45,180 --> 00:41:47,400
at Alternatives and okay what do we need

921
00:41:47,400 --> 00:41:49,800
to do in terms of some of the

922
00:41:49,800 --> 00:41:52,320
foundational underpinnings

923
00:41:52,320 --> 00:41:54,180
um and we ended up writing this proposal

924
00:41:54,180 --> 00:41:56,520
so

925
00:41:56,520 --> 00:41:57,240
um

926
00:41:57,240 --> 00:41:59,880
so what's in the draft proposal right I

927
00:41:59,880 --> 00:42:02,280
think to start with we we actually took

928
00:42:02,280 --> 00:42:03,960
some time to describe some of the

929
00:42:03,960 --> 00:42:05,880
concepts behind the cross device flows

930
00:42:05,880 --> 00:42:07,500
as well as the scenarios where are they

931
00:42:07,500 --> 00:42:09,540
getting used there's quite a few of them

932
00:42:09,540 --> 00:42:12,060
we we sort of picked six

933
00:42:12,060 --> 00:42:13,859
um you know I think one of the things

934
00:42:13,859 --> 00:42:15,660
that I wanted to be thoughtful about and

935
00:42:15,660 --> 00:42:17,520
from providing examples we don't want to

936
00:42:17,520 --> 00:42:20,220
provide too many but also not too few

937
00:42:20,220 --> 00:42:22,140
because one of the things I've

938
00:42:22,140 --> 00:42:24,420
discovered working with Engineers is

939
00:42:24,420 --> 00:42:26,520
they often only read the examples right

940
00:42:26,520 --> 00:42:28,380
they read the example to figure out does

941
00:42:28,380 --> 00:42:30,540
this apply to them and so there's sort

942
00:42:30,540 --> 00:42:34,260
of a number of these in there to try and

943
00:42:34,260 --> 00:42:35,940
sort of give an idea of the breadth

944
00:42:35,940 --> 00:42:38,220
right so if somebody reads this they can

945
00:42:38,220 --> 00:42:40,800
see yes I have the scenario no I don't

946
00:42:40,800 --> 00:42:42,420
or I have something like that right so

947
00:42:42,420 --> 00:42:44,760
that's kind of the intent we've actually

948
00:42:44,760 --> 00:42:46,859
since publishing uh there's been two

949
00:42:46,859 --> 00:42:49,320
additional use cases that folks have

950
00:42:49,320 --> 00:42:52,920
brought to us after reading the

951
00:42:52,920 --> 00:42:55,740
documents so I think one of them's

952
00:42:55,740 --> 00:42:57,180
already been added in the next iterative

953
00:42:57,180 --> 00:42:58,920
duration and there's another one that we

954
00:42:58,920 --> 00:43:01,560
we need to discuss a little bit more

955
00:43:01,560 --> 00:43:04,560
um so so that's kind of the the T up in

956
00:43:04,560 --> 00:43:06,240
the document

957
00:43:06,240 --> 00:43:08,339
um we've also ended up sort of coming up

958
00:43:08,339 --> 00:43:10,380
with a list of mitigation so I think

959
00:43:10,380 --> 00:43:13,740
we're at what uh trying to quickly I

960
00:43:13,740 --> 00:43:15,780
forget now I accounted them last night I

961
00:43:15,780 --> 00:43:18,420
think 12 10. we've got a quite a good

962
00:43:18,420 --> 00:43:20,160
number of mitigations that are all

963
00:43:20,160 --> 00:43:22,319
described in terms of whether they're

964
00:43:22,319 --> 00:43:24,780
preventative uh you know do they disrupt

965
00:43:24,780 --> 00:43:26,460
the attack do they help you recover

966
00:43:26,460 --> 00:43:27,839
right because I think that was the other

967
00:43:27,839 --> 00:43:29,819
thing that we looked at

968
00:43:29,819 --> 00:43:31,440
um if we only try and prevent the attack

969
00:43:31,440 --> 00:43:33,660
uh it sort of ignores the fact that the

970
00:43:33,660 --> 00:43:35,579
user is ultimately going to make a bad

971
00:43:35,579 --> 00:43:37,859
decision so how can we disrupt it once

972
00:43:37,859 --> 00:43:39,720
it's in in flight and even when it's

973
00:43:39,720 --> 00:43:41,339
completed right what can we do in terms

974
00:43:41,339 --> 00:43:44,579
of recovery so we got these what's a 2 4

975
00:43:44,579 --> 00:43:49,500
6 8 10 mitigations that's described and

976
00:43:49,500 --> 00:43:51,540
since publishing this I've been

977
00:43:51,540 --> 00:43:55,020
approached by uh by two individuals who

978
00:43:55,020 --> 00:43:57,359
had two additional mitigations that they

979
00:43:57,359 --> 00:44:00,240
recommended and so I folded those into a

980
00:44:00,240 --> 00:44:02,579
future draft and we will be making that

981
00:44:02,579 --> 00:44:04,220
available as well

982
00:44:04,220 --> 00:44:07,440
so that's the mitigations

983
00:44:07,440 --> 00:44:09,359
the other piece is just looking at

984
00:44:09,359 --> 00:44:11,400
alternative in terms of protocols and so

985
00:44:11,400 --> 00:44:13,079
giving guidance

986
00:44:13,079 --> 00:44:15,599
so the the guidance that we're trying to

987
00:44:15,599 --> 00:44:18,060
give is uh you know there are

988
00:44:18,060 --> 00:44:20,280
alternatives out there right uh to the

989
00:44:20,280 --> 00:44:22,079
device authorization Grant and there are

990
00:44:22,079 --> 00:44:24,060
different sort of trade-offs right some

991
00:44:24,060 --> 00:44:25,619
of these are more susceptible than

992
00:44:25,619 --> 00:44:27,180
others

993
00:44:27,180 --> 00:44:28,920
um some of the mitigations are more

994
00:44:28,920 --> 00:44:31,560
relevant than others and some of them

995
00:44:31,560 --> 00:44:34,140
are putting some requirements on the

996
00:44:34,140 --> 00:44:36,420
devices involved right so if we look at

997
00:44:36,420 --> 00:44:38,579
the 502 web or then which in my view is

998
00:44:38,579 --> 00:44:40,740
one of the you know that's just one of

999
00:44:40,740 --> 00:44:42,839
the the best mitigations that you can

1000
00:44:42,839 --> 00:44:44,700
have for across device flow because of

1001
00:44:44,700 --> 00:44:46,800
how it's it's pretty it comes across

1002
00:44:46,800 --> 00:44:48,599
pretty secure

1003
00:44:48,599 --> 00:44:50,760
um but for that you need fairly

1004
00:44:50,760 --> 00:44:52,440
high-spec devices that support the

1005
00:44:52,440 --> 00:44:54,300
protocol you need Bluetooth

1006
00:44:54,300 --> 00:44:57,540
Etc right and so that may not always be

1007
00:44:57,540 --> 00:44:59,579
available but we sort of try and and

1008
00:44:59,579 --> 00:45:01,920
give some recommendation based on the

1009
00:45:01,920 --> 00:45:03,660
problem space that you're in based on

1010
00:45:03,660 --> 00:45:06,300
the risks that you're facing uh and

1011
00:45:06,300 --> 00:45:08,339
based on the capabilities that you have

1012
00:45:08,339 --> 00:45:11,339
in your solution which of these would be

1013
00:45:11,339 --> 00:45:14,359
would be applicable

1014
00:45:14,940 --> 00:45:17,760
um then I think also just a nod to the

1015
00:45:17,760 --> 00:45:20,099
foundational pillars I think one of the

1016
00:45:20,099 --> 00:45:23,040
things that we're sort of

1017
00:45:23,040 --> 00:45:25,740
um there isn't really a great

1018
00:45:25,740 --> 00:45:29,460
uh there's been some work around how to

1019
00:45:29,460 --> 00:45:31,619
model poor user decision making and

1020
00:45:31,619 --> 00:45:34,140
security protocols but it hasn't really

1021
00:45:34,140 --> 00:45:37,500
been applied in this space and

1022
00:45:37,500 --> 00:45:38,700
um you know I think that's sort of a

1023
00:45:38,700 --> 00:45:40,380
challenge that I that we all want to put

1024
00:45:40,380 --> 00:45:43,020
out there is what can we do to make that

1025
00:45:43,020 --> 00:45:44,099
actually

1026
00:45:44,099 --> 00:45:46,980
um uh more

1027
00:45:46,980 --> 00:45:49,460
um you know how can we have more robust

1028
00:45:49,460 --> 00:45:52,980
uh formal analysis to know if the

1029
00:45:52,980 --> 00:45:54,420
mitigations we're deploying is actually

1030
00:45:54,420 --> 00:45:57,920
going to make uh make a difference

1031
00:45:58,440 --> 00:46:00,119
um so I think that's everything I the

1032
00:46:00,119 --> 00:46:01,980
purpose of this document and I I should

1033
00:46:01,980 --> 00:46:03,839
have said that earlier on the purpose of

1034
00:46:03,839 --> 00:46:05,460
the document is really to provide

1035
00:46:05,460 --> 00:46:09,480
guidance to implementers uh to system

1036
00:46:09,480 --> 00:46:11,720
Architects even to Security

1037
00:46:11,720 --> 00:46:14,220
Professionals so that when they're faced

1038
00:46:14,220 --> 00:46:15,839
with a scenario they have a little bit

1039
00:46:15,839 --> 00:46:17,220
more information and they can make

1040
00:46:17,220 --> 00:46:20,400
better decisions about how to how to how

1041
00:46:20,400 --> 00:46:22,020
to think about the protocols how to

1042
00:46:22,020 --> 00:46:24,119
think about the problem space and how to

1043
00:46:24,119 --> 00:46:26,460
think about managing their risk even

1044
00:46:26,460 --> 00:46:28,619
though we cannot fully retire it and

1045
00:46:28,619 --> 00:46:30,960
then the other part is uh just maybe

1046
00:46:30,960 --> 00:46:33,540
offering Alternatives right sometimes

1047
00:46:33,540 --> 00:46:36,000
these cross-device flows are better

1048
00:46:36,000 --> 00:46:39,420
served by a different product protocol

1049
00:46:39,420 --> 00:46:42,240
than the device authorization Grant or

1050
00:46:42,240 --> 00:46:44,400
in some cases I think one of the the the

1051
00:46:44,400 --> 00:46:46,680
the notes or feedback that we got when

1052
00:46:46,680 --> 00:46:49,260
we when I first sent this out was

1053
00:46:49,260 --> 00:46:51,240
you know maybe we should also call out

1054
00:46:51,240 --> 00:46:53,520
that if you're if you're on you

1055
00:46:53,520 --> 00:46:55,319
shouldn't do cross-device protocols on

1056
00:46:55,319 --> 00:46:57,960
the same device right that's also not a

1057
00:46:57,960 --> 00:46:59,400
great practice right there you should

1058
00:46:59,400 --> 00:47:01,440
avoid those kind of things so it's kind

1059
00:47:01,440 --> 00:47:03,900
of obvious stuff sometimes but um it's

1060
00:47:03,900 --> 00:47:07,079
calling calling that all out

1061
00:47:07,079 --> 00:47:09,060
um yeah and so I think the the question

1062
00:47:09,060 --> 00:47:11,640
that I have for this group

1063
00:47:11,640 --> 00:47:15,180
um and for for folks uh online

1064
00:47:15,180 --> 00:47:18,000
um like what next right so we've we've

1065
00:47:18,000 --> 00:47:20,460
we've written this document up uh we can

1066
00:47:20,460 --> 00:47:22,859
continue to evolve it

1067
00:47:22,859 --> 00:47:24,839
um I also want to get a sense of whether

1068
00:47:24,839 --> 00:47:26,760
this is actually useful to people right

1069
00:47:26,760 --> 00:47:29,099
is this a a part of the problem space

1070
00:47:29,099 --> 00:47:31,380
that is worth paying attention to do you

1071
00:47:31,380 --> 00:47:33,420
find that valuable

1072
00:47:33,420 --> 00:47:35,700
um or not right and so basically getting

1073
00:47:35,700 --> 00:47:37,859
feedback on on the work the problem

1074
00:47:37,859 --> 00:47:40,800
space and ideas about how we progress

1075
00:47:40,800 --> 00:47:44,460
this work going forward

1076
00:47:44,460 --> 00:47:46,940
yeah thanks Peter

1077
00:47:46,940 --> 00:47:51,500
anybody has any thoughts about this

1078
00:47:53,579 --> 00:47:57,359
come on there must be some thoughts here

1079
00:47:57,359 --> 00:47:59,460
um there you go well actually one one uh

1080
00:47:59,460 --> 00:48:01,940
thanks Justin

1081
00:48:03,180 --> 00:48:04,619
go ahead you were about to say something

1082
00:48:04,619 --> 00:48:07,440
no no I was well I was you know I was

1083
00:48:07,440 --> 00:48:08,819
going to start asking the audience

1084
00:48:08,819 --> 00:48:10,740
questions but I I'll let you answer

1085
00:48:10,740 --> 00:48:12,240
first and then I'll ask the audience a

1086
00:48:12,240 --> 00:48:13,079
question

1087
00:48:13,079 --> 00:48:14,880
gotcha yeah sorry I couldn't find the

1088
00:48:14,880 --> 00:48:17,460
button that's fine keep going uh Justin

1089
00:48:17,460 --> 00:48:19,380
Richard I just wanted to say first off I

1090
00:48:19,380 --> 00:48:21,119
think this is really important work

1091
00:48:21,119 --> 00:48:24,300
um I think that this is a space in the

1092
00:48:24,300 --> 00:48:26,640
uh security of these protocols that

1093
00:48:26,640 --> 00:48:28,260
often gets overlooked because we just

1094
00:48:28,260 --> 00:48:31,079
kind of say the user needs to make good

1095
00:48:31,079 --> 00:48:33,000
decisions and if they don't we're kind

1096
00:48:33,000 --> 00:48:34,260
of stuck

1097
00:48:34,260 --> 00:48:36,240
um but a lot of what we deploy is about

1098
00:48:36,240 --> 00:48:37,380
helping the user make the right

1099
00:48:37,380 --> 00:48:39,300
decisions or removing those decisions in

1100
00:48:39,300 --> 00:48:40,980
cases when the user shouldn't have those

1101
00:48:40,980 --> 00:48:42,540
decisions

1102
00:48:42,540 --> 00:48:44,880
I mean that's that's practically that's

1103
00:48:44,880 --> 00:48:47,520
that's a lot of what we uh what we're

1104
00:48:47,520 --> 00:48:48,599
building out

1105
00:48:48,599 --> 00:48:51,720
um in that experience in that space do

1106
00:48:51,720 --> 00:48:54,900
you think uh that part of this work from

1107
00:48:54,900 --> 00:48:59,520
the BCP we might start getting close to

1108
00:48:59,520 --> 00:49:00,780
um

1109
00:49:00,780 --> 00:49:02,940
I hesitate to say it but standardizing

1110
00:49:02,940 --> 00:49:05,940
the ux for uh user involved decisions

1111
00:49:05,940 --> 00:49:07,140
this would be

1112
00:49:07,140 --> 00:49:10,319
important for both cross device and same

1113
00:49:10,319 --> 00:49:14,220
device uh type of situations so

1114
00:49:14,220 --> 00:49:16,560
in a same device situation I'm being

1115
00:49:16,560 --> 00:49:18,240
asked to you know I'm being fished to

1116
00:49:18,240 --> 00:49:20,099
click on a link and it just goes back to

1117
00:49:20,099 --> 00:49:21,660
my browser and then

1118
00:49:21,660 --> 00:49:23,460
like it it

1119
00:49:23,460 --> 00:49:25,740
still works for the attacker in some

1120
00:49:25,740 --> 00:49:28,079
cases

1121
00:49:28,079 --> 00:49:30,200
um

1122
00:49:31,500 --> 00:49:35,220
I would uh the word standardized might

1123
00:49:35,220 --> 00:49:37,940
be it's too strong

1124
00:49:37,940 --> 00:49:42,420
I think we want a very consistent user

1125
00:49:42,420 --> 00:49:45,240
experiences around this okay I I think

1126
00:49:45,240 --> 00:49:47,700
about and I you know John your John

1127
00:49:47,700 --> 00:49:49,319
Bradley can probably comment about this

1128
00:49:49,319 --> 00:49:50,700
but I I think some of the things that's

1129
00:49:50,700 --> 00:49:52,260
really attractive about the Web author

1130
00:49:52,260 --> 00:49:56,160
and 502 uh you know cross device flow is

1131
00:49:56,160 --> 00:49:58,020
it's a pretty consistent user experience

1132
00:49:58,020 --> 00:50:01,140
right almost independent of device Etc

1133
00:50:01,140 --> 00:50:03,180
right there is a good bit of of

1134
00:50:03,180 --> 00:50:06,599
consistency across platforms

1135
00:50:06,599 --> 00:50:08,220
um and I I think

1136
00:50:08,220 --> 00:50:10,680
what I would say

1137
00:50:10,680 --> 00:50:12,839
strong guidance but also then turning

1138
00:50:12,839 --> 00:50:14,520
that guidance into requirements right so

1139
00:50:14,520 --> 00:50:17,460
I would also turn around to the

1140
00:50:17,460 --> 00:50:18,780
um to people who are deploying the

1141
00:50:18,780 --> 00:50:22,200
systems right you know turning that

1142
00:50:22,200 --> 00:50:24,660
guidance into and I I at least have this

1143
00:50:24,660 --> 00:50:26,819
expectation in terms of the user

1144
00:50:26,819 --> 00:50:29,099
experience rather than trying to say

1145
00:50:29,099 --> 00:50:31,079
well the pixels need to be rendered in a

1146
00:50:31,079 --> 00:50:32,819
certain way in a certain color and the

1147
00:50:32,819 --> 00:50:35,280
buttons need to be in a certain place uh

1148
00:50:35,280 --> 00:50:38,339
maybe we I don't know if we can I didn't

1149
00:50:38,339 --> 00:50:40,440
right I have low expectation of success

1150
00:50:40,440 --> 00:50:44,400
going that far no I mean so that's that

1151
00:50:44,400 --> 00:50:46,680
would be more legislating the UI as

1152
00:50:46,680 --> 00:50:48,839
opposed to the ux that's a great point

1153
00:50:48,839 --> 00:50:51,359
of course yeah and uh so I think we

1154
00:50:51,359 --> 00:50:53,160
might actually be able to do some things

1155
00:50:53,160 --> 00:50:56,040
on the experience side

1156
00:50:56,040 --> 00:50:59,760
um there is an entire community of uh

1157
00:50:59,760 --> 00:51:02,400
user experience research out there that

1158
00:51:02,400 --> 00:51:04,440
we might honestly want to tap into for

1159
00:51:04,440 --> 00:51:06,059
this because we are specifically talking

1160
00:51:06,059 --> 00:51:08,339
about things that are

1161
00:51:08,339 --> 00:51:11,400
um that are that are touching users

1162
00:51:11,400 --> 00:51:14,760
which Community is that by the way uh so

1163
00:51:14,760 --> 00:51:17,819
uh I'm thinking of uh the lab at

1164
00:51:17,819 --> 00:51:20,099
Carnegie Mellon cups I think is the lab

1165
00:51:20,099 --> 00:51:22,319
is the first one that comes to mind

1166
00:51:22,319 --> 00:51:24,780
um I know Bentley's got a big

1167
00:51:24,780 --> 00:51:27,900
um ux Department as well

1168
00:51:27,900 --> 00:51:30,180
um that they've done a lot of a lot of

1169
00:51:30,180 --> 00:51:32,160
work in the past I am

1170
00:51:32,160 --> 00:51:34,619
ah whatever the internet 2 group that

1171
00:51:34,619 --> 00:51:36,420
was doing it that like there was a whole

1172
00:51:36,420 --> 00:51:39,180
multi-year thing about uh about uh

1173
00:51:39,180 --> 00:51:41,400
specifically about authorization uh ux

1174
00:51:41,400 --> 00:51:43,680
in that case I mean so that there's a

1175
00:51:43,680 --> 00:51:45,900
lot it's in the academic space it's like

1176
00:51:45,900 --> 00:51:48,180
you know very Ivory Tower at the moment

1177
00:51:48,180 --> 00:51:49,980
but maybe we should start throwing some

1178
00:51:49,980 --> 00:51:51,900
ladders against the tower and uh see if

1179
00:51:51,900 --> 00:51:54,180
they'll help us good idea yeah I had to

1180
00:51:54,180 --> 00:51:55,380
pay for that and you know I think

1181
00:51:55,380 --> 00:51:57,420
there's plenty of us here who work with

1182
00:51:57,420 --> 00:52:00,180
teams that have user experience uh

1183
00:52:00,180 --> 00:52:03,420
capability as well and I think

1184
00:52:03,420 --> 00:52:05,640
um having a proposal that they can react

1185
00:52:05,640 --> 00:52:07,500
to and interact with would be fantastic

1186
00:52:07,500 --> 00:52:09,660
I would really welcome that so Justin if

1187
00:52:09,660 --> 00:52:12,059
we can talk about how we do that but I'd

1188
00:52:12,059 --> 00:52:13,859
love to bring that and maybe use this

1189
00:52:13,859 --> 00:52:16,140
document to Anchor that and maybe that

1190
00:52:16,140 --> 00:52:18,420
you know it turns into additions to this

1191
00:52:18,420 --> 00:52:21,000
document or another document but let's

1192
00:52:21,000 --> 00:52:23,220
start doing that that that's a really

1193
00:52:23,220 --> 00:52:25,619
great point to have something concrete

1194
00:52:25,619 --> 00:52:27,359
to say this is what we were thinking of

1195
00:52:27,359 --> 00:52:30,300
yeah instead of just make it better so

1196
00:52:30,300 --> 00:52:32,339
yeah and maybe that's a place to start

1197
00:52:32,339 --> 00:52:34,200
right we can share that document and say

1198
00:52:34,200 --> 00:52:36,119
this is the problem we're facing ux

1199
00:52:36,119 --> 00:52:38,480
researchers how would you solve right

1200
00:52:38,480 --> 00:52:43,880
yeah all right thank you awesome Joseph

1201
00:52:47,040 --> 00:52:49,619
uh Joseph Heinen author late

1202
00:52:49,619 --> 00:52:50,640
um I don't think I have anything

1203
00:52:50,640 --> 00:52:52,500
terribly insightful to say but I've read

1204
00:52:52,500 --> 00:52:54,119
this document it's a good document

1205
00:52:54,119 --> 00:52:56,579
provided a bit of feedback

1206
00:52:56,579 --> 00:52:58,140
um I've referred people to the document

1207
00:52:58,140 --> 00:52:59,579
and I believe they've read it and found

1208
00:52:59,579 --> 00:53:02,280
it helpful I've seen other people refer

1209
00:53:02,280 --> 00:53:04,260
people to this document so I think

1210
00:53:04,260 --> 00:53:05,700
there's interest

1211
00:53:05,700 --> 00:53:07,740
um I would say we should probably kind

1212
00:53:07,740 --> 00:53:09,420
of take it forward to adoption and try

1213
00:53:09,420 --> 00:53:12,180
and get more eyes on it and more input

1214
00:53:12,180 --> 00:53:16,200
thanks Joseph thanks Joseph George

1215
00:53:16,200 --> 00:53:18,180
yeah I I think it's probably already

1216
00:53:18,180 --> 00:53:20,400
been said but design patterns I think

1217
00:53:20,400 --> 00:53:22,980
make a ton of sense in the sense of

1218
00:53:22,980 --> 00:53:24,300
making

1219
00:53:24,300 --> 00:53:27,000
clear what the critical factors are and

1220
00:53:27,000 --> 00:53:29,280
I think that information into the design

1221
00:53:29,280 --> 00:53:31,920
teams will be super helpful

1222
00:53:31,920 --> 00:53:34,740
um you know I think they're often they

1223
00:53:34,740 --> 00:53:36,780
might not have the understanding you

1224
00:53:36,780 --> 00:53:39,980
know they're looking at it purely from a

1225
00:53:39,980 --> 00:53:43,500
user experience right and to have some

1226
00:53:43,500 --> 00:53:45,480
guidance we can give that says here's

1227
00:53:45,480 --> 00:53:47,760
the implications of of making these

1228
00:53:47,760 --> 00:53:49,260
kinds of choices

1229
00:53:49,260 --> 00:53:50,940
um would be super helpful to those teams

1230
00:53:50,940 --> 00:53:52,260
and I think they would really appreciate

1231
00:53:52,260 --> 00:53:54,000
it

1232
00:53:54,000 --> 00:53:58,160
thanks George awesome jump

1233
00:54:00,780 --> 00:54:02,460
um so I think this is good work a couple

1234
00:54:02,460 --> 00:54:04,500
of observations

1235
00:54:04,500 --> 00:54:05,460
um

1236
00:54:05,460 --> 00:54:08,160
the thing that the web authen thing that

1237
00:54:08,160 --> 00:54:09,980
you describe is the cross device flow

1238
00:54:09,980 --> 00:54:12,780
currently called hybrid formerly called

1239
00:54:12,780 --> 00:54:16,980
cable is not a thing like the others

1240
00:54:16,980 --> 00:54:21,480
um it it really is a different beast in

1241
00:54:21,480 --> 00:54:23,400
that what you're doing is

1242
00:54:23,400 --> 00:54:26,280
it's analogous to you wouldn't say that

1243
00:54:26,280 --> 00:54:29,280
plugging a security key into a Windows

1244
00:54:29,280 --> 00:54:32,280
computer and using web often to do oauth

1245
00:54:32,280 --> 00:54:34,020
from the Windows computer was across the

1246
00:54:34,020 --> 00:54:36,540
vice flow and

1247
00:54:36,540 --> 00:54:40,859
cable hybrid really is just a transport

1248
00:54:40,859 --> 00:54:45,300
piece that replaces the USB so it may

1249
00:54:45,300 --> 00:54:48,480
confuse people to describe it as cross

1250
00:54:48,480 --> 00:54:50,040
device I think we have to be a little

1251
00:54:50,040 --> 00:54:54,540
bit careful about that I I yes I take

1252
00:54:54,540 --> 00:54:56,819
the point John maybe you can uh system

1253
00:54:56,819 --> 00:54:58,800
Capelli actually authored that that part

1254
00:54:58,800 --> 00:55:00,660
of the document

1255
00:55:00,660 --> 00:55:01,500
um

1256
00:55:01,500 --> 00:55:04,800
I think I I kind of took a step back I

1257
00:55:04,800 --> 00:55:06,119
know as a technologist we understand

1258
00:55:06,119 --> 00:55:08,099
that what's really happening is we we

1259
00:55:08,099 --> 00:55:10,619
actually establish proximity uh through

1260
00:55:10,619 --> 00:55:11,819
and

1261
00:55:11,819 --> 00:55:14,579
um through that hybrid protocol and so

1262
00:55:14,579 --> 00:55:18,480
then it's a transfer right to you more

1263
00:55:18,480 --> 00:55:21,119
than just proximity though

1264
00:55:21,119 --> 00:55:23,760
and so I'd love your feedback on the

1265
00:55:23,760 --> 00:55:26,760
text that that Tim contributed

1266
00:55:26,760 --> 00:55:31,140
um the reason it's in there is uh it is

1267
00:55:31,140 --> 00:55:33,440
a way in which I can use this device

1268
00:55:33,440 --> 00:55:36,720
with a device like a PC it is a way

1269
00:55:36,720 --> 00:55:39,180
there are two devices involved and

1270
00:55:39,180 --> 00:55:40,980
sometimes that's really what the what

1271
00:55:40,980 --> 00:55:43,619
the system designer is trying to right

1272
00:55:43,619 --> 00:55:46,020
but you're not doing the oauth glow from

1273
00:55:46,020 --> 00:55:48,960
your so yeah so it looks the same from

1274
00:55:48,960 --> 00:55:51,420
the user it is a better user experience

1275
00:55:51,420 --> 00:55:54,000
but from a protocol level it's

1276
00:55:54,000 --> 00:55:56,400
completely different I I appreciate and

1277
00:55:56,400 --> 00:55:58,319
understand and and I think if there's a

1278
00:55:58,319 --> 00:56:00,240
I think here's my other motivation here

1279
00:56:00,240 --> 00:56:03,059
John is one I really want to steer

1280
00:56:03,059 --> 00:56:05,220
people towards if you have a scenario

1281
00:56:05,220 --> 00:56:09,240
that can be met by the by Fido and with

1282
00:56:09,240 --> 00:56:12,240
uh the web of then flow please use that

1283
00:56:12,240 --> 00:56:14,040
rather than one of these other flows

1284
00:56:14,040 --> 00:56:16,380
right and I think that's kind of my

1285
00:56:16,380 --> 00:56:19,020
motivation for including it there to

1286
00:56:19,020 --> 00:56:21,240
support cable

1287
00:56:21,240 --> 00:56:24,359
and Microsoft has no excuse for doing

1288
00:56:24,359 --> 00:56:27,780
weird funky cross-device things

1289
00:56:27,780 --> 00:56:30,000
you might well you have it has lots of

1290
00:56:30,000 --> 00:56:31,859
excuses it doesn't it doesn't

1291
00:56:31,859 --> 00:56:34,200
necessarily they're not good ones but

1292
00:56:34,200 --> 00:56:37,680
devices supporting Fido either through

1293
00:56:37,680 --> 00:56:40,200
directly a USB connection or hybrid

1294
00:56:40,200 --> 00:56:42,780
would be a better solution to

1295
00:56:42,780 --> 00:56:47,280
this weird cross device oauth thing and

1296
00:56:47,280 --> 00:56:49,619
and if we go back to

1297
00:56:49,619 --> 00:56:51,300
um siba

1298
00:56:51,300 --> 00:56:54,119
God help me when I started off doing

1299
00:56:54,119 --> 00:56:56,400
that with the telephone companies it was

1300
00:56:56,400 --> 00:56:58,680
cross device because

1301
00:56:58,680 --> 00:57:01,920
it was to a call center so when phone

1302
00:57:01,920 --> 00:57:05,280
companies distribute a

1303
00:57:05,280 --> 00:57:07,980
app to the SIM card so that they can

1304
00:57:07,980 --> 00:57:10,440
remotely authenticate the user over over

1305
00:57:10,440 --> 00:57:14,220
the phone they wanted a way to oh now

1306
00:57:14,220 --> 00:57:16,380
and and do

1307
00:57:16,380 --> 00:57:19,680
oauth or do open ID connect to relying

1308
00:57:19,680 --> 00:57:22,680
parties based on a push notification the

1309
00:57:22,680 --> 00:57:24,900
regular sort of flow

1310
00:57:24,900 --> 00:57:27,780
um they also said okay well now when

1311
00:57:27,780 --> 00:57:30,000
people call into a call center we want

1312
00:57:30,000 --> 00:57:32,160
to use the same mechanism but clearly

1313
00:57:32,160 --> 00:57:35,280
you can't do oh off easily over the

1314
00:57:35,280 --> 00:57:38,880
telephone uh in a voice call so

1315
00:57:38,880 --> 00:57:41,160
that's kind of the origin of it it was

1316
00:57:41,160 --> 00:57:44,280
never really intended to be used with a

1317
00:57:44,280 --> 00:57:47,400
QR code with both legs of the of the

1318
00:57:47,400 --> 00:57:49,980
protocol on the network but once you

1319
00:57:49,980 --> 00:57:52,740
open the can of worms people use them

1320
00:57:52,740 --> 00:57:55,200
for lots of things I mean yeah so a

1321
00:57:55,200 --> 00:57:58,440
couple of so uh I couldn't possibly

1322
00:57:58,440 --> 00:58:00,960
comment on Xbox

1323
00:58:00,960 --> 00:58:02,880
um and your other point that you're

1324
00:58:02,880 --> 00:58:04,920
making I think these protocols get

1325
00:58:04,920 --> 00:58:07,020
designed and we have very specific use

1326
00:58:07,020 --> 00:58:08,819
cases in mind for them

1327
00:58:08,819 --> 00:58:11,579
and but once you open Pandora's box

1328
00:58:11,579 --> 00:58:13,740
right I've been reflecting on this a lot

1329
00:58:13,740 --> 00:58:16,260
right it is um it's like telling people

1330
00:58:16,260 --> 00:58:18,540
not to covet their neighbor right it's

1331
00:58:18,540 --> 00:58:21,359
like invariably something happens and

1332
00:58:21,359 --> 00:58:23,640
people make a choice that they you know

1333
00:58:23,640 --> 00:58:25,200
they they shouldn't have used the

1334
00:58:25,200 --> 00:58:26,819
protocol in that way right sort of

1335
00:58:26,819 --> 00:58:28,020
almost like you're dealing with human

1336
00:58:28,020 --> 00:58:30,300
nature in that way

1337
00:58:30,300 --> 00:58:31,079
um

1338
00:58:31,079 --> 00:58:33,720
but yeah and again I'd appreciate any

1339
00:58:33,720 --> 00:58:35,520
feedback on how

1340
00:58:35,520 --> 00:58:38,280
how we I do want to use this opportunity

1341
00:58:38,280 --> 00:58:42,059
with this work to advance the good work

1342
00:58:42,059 --> 00:58:43,680
that's happening in fighter and we're

1343
00:58:43,680 --> 00:58:46,200
both in I appreciate that it is not a

1344
00:58:46,200 --> 00:58:48,780
traditional cross device like Siva or

1345
00:58:48,780 --> 00:58:51,299
device authorization Grant but there is

1346
00:58:51,299 --> 00:58:53,040
sort of a commonality in that experience

1347
00:58:53,040 --> 00:58:55,380
that that might be a hook for people to

1348
00:58:55,380 --> 00:58:57,240
to transition to something more secure

1349
00:58:57,240 --> 00:59:00,180
that's the intent right we just have to

1350
00:59:00,180 --> 00:59:01,920
figure out a way of describing it so

1351
00:59:01,920 --> 00:59:04,140
that they understand that it's quality I

1352
00:59:04,140 --> 00:59:07,559
I would love that feedback uh so jump

1353
00:59:07,559 --> 00:59:09,240
before we leave so

1354
00:59:09,240 --> 00:59:11,819
do you still think that this is a useful

1355
00:59:11,819 --> 00:59:13,619
work that we should continue yes I think

1356
00:59:13,619 --> 00:59:16,319
it's a useful word but there are some

1357
00:59:16,319 --> 00:59:19,079
subtleties in how we explain this okay

1358
00:59:19,079 --> 00:59:19,920
so

1359
00:59:19,920 --> 00:59:22,740
so we people ought not to think ah yes

1360
00:59:22,740 --> 00:59:24,660
because

1361
00:59:24,660 --> 00:59:28,260
hybrid or because cable hybrid is secure

1362
00:59:28,260 --> 00:59:30,059
that that immediately can be

1363
00:59:30,059 --> 00:59:32,400
transitioned over to that's a different

1364
00:59:32,400 --> 00:59:35,400
doing web authen over that kind of

1365
00:59:35,400 --> 00:59:36,839
Transport is a different thing than

1366
00:59:36,839 --> 00:59:40,980
trying to do Multi-Device oauth okay and

1367
00:59:40,980 --> 00:59:44,339
and and again please if you have

1368
00:59:44,339 --> 00:59:46,319
suggestions about how we do that if it

1369
00:59:46,319 --> 00:59:48,180
is if the right answer is we shouldn't

1370
00:59:48,180 --> 00:59:50,339
have that in the document that's fine

1371
00:59:50,339 --> 00:59:51,839
too but I I do want to make this

1372
00:59:51,839 --> 00:59:54,240
opportunity to at least leave it with

1373
00:59:54,240 --> 00:59:55,559
the implementers that there are better

1374
00:59:55,559 --> 00:59:58,579
options that they could use

1375
00:59:58,579 --> 01:00:01,319
being in there but

1376
01:00:01,319 --> 01:00:05,520
separating that from Multi-Device oauth

1377
01:00:05,520 --> 01:00:08,220
say you can you do in the case where

1378
01:00:08,220 --> 01:00:09,900
you're using Multi-Device oauth why

1379
01:00:09,900 --> 01:00:11,160
don't you do

1380
01:00:11,160 --> 01:00:13,920
just to oauth with the normal redirect

1381
01:00:13,920 --> 01:00:15,540
flows but

1382
01:00:15,540 --> 01:00:17,819
do Multi-Device through the

1383
01:00:17,819 --> 01:00:21,319
authenticator that's so okay so yeah

1384
01:00:21,319 --> 01:00:23,819
I think you just said about my intent is

1385
01:00:23,819 --> 01:00:25,740
if that I'm not expressing that help me

1386
01:00:25,740 --> 01:00:28,400
okay thank you yeah exactly so

1387
01:00:28,400 --> 01:00:33,380
thanks John I appreciate that Aaron

1388
01:00:33,660 --> 01:00:35,220
I'll just be really quick since we're

1389
01:00:35,220 --> 01:00:37,319
like out of time um I just want to say I

1390
01:00:37,319 --> 01:00:39,240
also think this is important work this

1391
01:00:39,240 --> 01:00:41,400
is great a good start on the document

1392
01:00:41,400 --> 01:00:42,900
and I also agree that the user

1393
01:00:42,900 --> 01:00:44,520
experience side of it is

1394
01:00:44,520 --> 01:00:48,599
uh worth pursuing and um documenting I

1395
01:00:48,599 --> 01:00:50,700
think that's something that is been very

1396
01:00:50,700 --> 01:00:53,819
much missing from a lot of the work that

1397
01:00:53,819 --> 01:00:56,940
we've published and interestingly it has

1398
01:00:56,940 --> 01:00:58,799
come out mostly the same when people do

1399
01:00:58,799 --> 01:01:01,200
implement it both the device flow and

1400
01:01:01,200 --> 01:01:03,540
just traditional oauth consent screens

1401
01:01:03,540 --> 01:01:05,339
if you look at what's out there there

1402
01:01:05,339 --> 01:01:07,380
are a lot of commonalities and that

1403
01:01:07,380 --> 01:01:08,640
tends to be a good opportunity to

1404
01:01:08,640 --> 01:01:10,740
actually document them as a standard so

1405
01:01:10,740 --> 01:01:12,119
I don't know exactly what the right way

1406
01:01:12,119 --> 01:01:14,460
to do that is but I don't know if it's a

1407
01:01:14,460 --> 01:01:18,240
standard it's a PCP but it's a it is a a

1408
01:01:18,240 --> 01:01:20,579
BCP is a standard it's a it's a type of

1409
01:01:20,579 --> 01:01:23,540
standard I don't know

1410
01:01:23,540 --> 01:01:25,559
but I do think there's something there

1411
01:01:25,559 --> 01:01:27,720
too because it is also a question that

1412
01:01:27,720 --> 01:01:29,040
is very commonly asked of someone who's

1413
01:01:29,040 --> 01:01:30,660
starting to build these is what do I put

1414
01:01:30,660 --> 01:01:32,700
on the screen how should it work and

1415
01:01:32,700 --> 01:01:33,900
then it's kind of they kind of just have

1416
01:01:33,900 --> 01:01:35,819
to figure it out or go read someone's

1417
01:01:35,819 --> 01:01:39,299
book so thanks Sam and Aaron would you

1418
01:01:39,299 --> 01:01:41,700
be open to sort of adopting this you

1419
01:01:41,700 --> 01:01:43,380
should we be adopting this as formal

1420
01:01:43,380 --> 01:01:45,740
work in the working group yeah yeah

1421
01:01:45,740 --> 01:01:50,099
Christina hi Christina I'm just plus one

1422
01:01:50,099 --> 01:01:52,740
great work I'm going to react to what

1423
01:01:52,740 --> 01:01:55,260
you said Peter when you said

1424
01:01:55,260 --> 01:01:57,599
don't use cross-device protocols and

1425
01:01:57,599 --> 01:01:59,339
same device flows

1426
01:01:59,339 --> 01:02:02,160
turns out it's not as simple as that

1427
01:02:02,160 --> 01:02:04,319
it's just only thing I wanted to quickly

1428
01:02:04,319 --> 01:02:06,960
say and maybe the comment is not exactly

1429
01:02:06,960 --> 01:02:08,819
relevant if the protocols you're picking

1430
01:02:08,819 --> 01:02:11,520
up in the document are you know can only

1431
01:02:11,520 --> 01:02:14,160
be usable with cross device flows but

1432
01:02:14,160 --> 01:02:15,920
the protocols I'm working on for example

1433
01:02:15,920 --> 01:02:19,859
the cross device mechanism can also be

1434
01:02:19,859 --> 01:02:22,559
applied in a same device environment and

1435
01:02:22,559 --> 01:02:24,960
we are observing people doing that like

1436
01:02:24,960 --> 01:02:27,780
for example as a request encoded in the

1437
01:02:27,780 --> 01:02:30,540
QR code is also in a deep link so user

1438
01:02:30,540 --> 01:02:32,220
has an option to actually click it on

1439
01:02:32,220 --> 01:02:34,799
the same device for example right so I

1440
01:02:34,799 --> 01:02:36,180
don't know exactly how relevant it is

1441
01:02:36,180 --> 01:02:38,400
and I've read the document I haven't

1442
01:02:38,400 --> 01:02:40,559
seen anything around that so probably

1443
01:02:40,559 --> 01:02:42,359
adding a text or clarifications or

1444
01:02:42,359 --> 01:02:45,180
having a discussion is would be useful

1445
01:02:45,180 --> 01:02:49,440
because for again like initially in at

1446
01:02:49,440 --> 01:02:51,420
least in our protocols the guidance was

1447
01:02:51,420 --> 01:02:53,819
absolutely not used cross device for the

1448
01:02:53,819 --> 01:02:55,680
same device people are doing it and

1449
01:02:55,680 --> 01:02:57,420
people are doing it also for some

1450
01:02:57,420 --> 01:02:59,220
legitimate reasons some deployment

1451
01:02:59,220 --> 01:03:01,260
models do not allowed to have

1452
01:03:01,260 --> 01:03:03,839
token endpoint whatnot some you know

1453
01:03:03,839 --> 01:03:06,119
like divide the response is too big and

1454
01:03:06,119 --> 01:03:07,859
like you know they want to benefit from

1455
01:03:07,859 --> 01:03:10,079
cross-device HTTP post requests what not

1456
01:03:10,079 --> 01:03:13,319
so yeah just bring it up all right now

1457
01:03:13,319 --> 01:03:14,880
thanks for that Christina I think that

1458
01:03:14,880 --> 01:03:16,799
comment was actually added Joseph based

1459
01:03:16,799 --> 01:03:19,020
on feedback that you gave and so it's in

1460
01:03:19,020 --> 01:03:20,880
the next draft I'll actually if you want

1461
01:03:20,880 --> 01:03:22,559
to review that but I want to know about

1462
01:03:22,559 --> 01:03:24,000
those use cases and you're right right

1463
01:03:24,000 --> 01:03:26,520
we can say don't do it people it's not

1464
01:03:26,520 --> 01:03:27,839
going to prevent them so we need to have

1465
01:03:27,839 --> 01:03:29,280
mitigations or we need to give people

1466
01:03:29,280 --> 01:03:31,619
options or at least highlight the risks

1467
01:03:31,619 --> 01:03:34,079
thank you thank you

1468
01:03:34,079 --> 01:03:37,079
foreign

1469
01:03:42,180 --> 01:03:44,520
are you aware of any like there are

1470
01:03:44,520 --> 01:03:46,319
specific Solutions in the western so are

1471
01:03:46,319 --> 01:03:49,140
you aware of any uh iprs on those

1472
01:03:49,140 --> 01:03:51,420
because uh a check that document it

1473
01:03:51,420 --> 01:03:52,920
didn't say anything but that would be

1474
01:03:52,920 --> 01:03:55,740
important to file if you are uh it's

1475
01:03:55,740 --> 01:03:58,079
like these are the types of documents I

1476
01:03:58,079 --> 01:03:59,480
would normally have assumed everything

1477
01:03:59,480 --> 01:04:03,180
uh could be impacted I'm not aware of

1478
01:04:03,180 --> 01:04:05,700
any IPR uh harness

1479
01:04:05,700 --> 01:04:06,420
um

1480
01:04:06,420 --> 01:04:09,319
and and I yeah I'm not aware of any IPR

1481
01:04:09,319 --> 01:04:11,880
okay awesome

1482
01:04:11,880 --> 01:04:13,140
so I

1483
01:04:13,140 --> 01:04:15,900
as chairs we think um we see lots of

1484
01:04:15,900 --> 01:04:18,839
interest and support for this work I

1485
01:04:18,839 --> 01:04:22,020
didn't see anybody objecting to for the

1486
01:04:22,020 --> 01:04:24,480
work group to do that so what we think

1487
01:04:24,480 --> 01:04:27,180
we're gonna call for adoption on the

1488
01:04:27,180 --> 01:04:28,260
mailing list

1489
01:04:28,260 --> 01:04:30,480
okay thanks uh reporting should I just

1490
01:04:30,480 --> 01:04:32,099
do an update of the doc before you do

1491
01:04:32,099 --> 01:04:33,720
that yeah that'll be great yeah okay

1492
01:04:33,720 --> 01:04:35,160
I'll do an update and then we do that

1493
01:04:35,160 --> 01:04:37,680
awesome thank you thank you Peter

1494
01:04:37,680 --> 01:04:40,578
Christina

1495
01:05:03,920 --> 01:05:06,599
is this the right document this is the

1496
01:05:06,599 --> 01:05:07,859
right document okay

1497
01:05:07,859 --> 01:05:10,680
um do you want me to pass the control to

1498
01:05:10,680 --> 01:05:12,420
you

1499
01:05:12,420 --> 01:05:14,599
foreign

1500
01:05:22,020 --> 01:05:25,020
first

1501
01:05:27,119 --> 01:05:29,119
um

1502
01:05:31,859 --> 01:05:34,200
see if that works oh wow yeah it works

1503
01:05:34,200 --> 01:05:37,200
this is great all right hi everyone

1504
01:05:37,200 --> 01:05:38,160
um

1505
01:05:38,160 --> 01:05:40,859
so the point of the presentation is to

1506
01:05:40,859 --> 01:05:42,839
draw the working group's attention on

1507
01:05:42,839 --> 01:05:47,040
how the client ID is being used and what

1508
01:05:47,040 --> 01:05:50,460
can we you know note some emerging data

1509
01:05:50,460 --> 01:05:53,339
points of emerging patterns and

1510
01:05:53,339 --> 01:05:55,619
hopefully to start a conversation

1511
01:05:55,619 --> 01:05:58,140
um what can we do about it

1512
01:05:58,140 --> 01:06:00,660
so

1513
01:06:00,660 --> 01:06:04,920
if you look at section 2.2 in RC 6749 it

1514
01:06:04,920 --> 01:06:07,740
clearly says authorization server it is

1515
01:06:07,740 --> 01:06:10,140
authorization server who issues the

1516
01:06:10,140 --> 01:06:12,359
client ID and also if you go back to

1517
01:06:12,359 --> 01:06:16,260
section two it says the client has to

1518
01:06:16,260 --> 01:06:17,940
register with authorization server

1519
01:06:17,940 --> 01:06:20,339
before initiating the protocol so

1520
01:06:20,339 --> 01:06:23,160
they're clearly two requirements that we

1521
01:06:23,160 --> 01:06:25,740
have that are probably not always

1522
01:06:25,740 --> 01:06:27,660
exactly followed in some of the

1523
01:06:27,660 --> 01:06:30,740
deployments we are seeing

1524
01:06:31,020 --> 01:06:34,799
so just a couple of limitations use

1525
01:06:34,799 --> 01:06:37,500
cases I'm familiar of and I've heard

1526
01:06:37,500 --> 01:06:39,119
from the rooms that they're actually

1527
01:06:39,119 --> 01:06:41,280
other use cases that are not exactly

1528
01:06:41,280 --> 01:06:44,160
follow these two requirements so one is

1529
01:06:44,160 --> 01:06:46,260
open ID for fiber credential issues

1530
01:06:46,260 --> 01:06:49,079
protocol we've been working on and I

1531
01:06:49,079 --> 01:06:50,099
should say

1532
01:06:50,099 --> 01:06:52,980
um I'm here presenting it but this is

1533
01:06:52,980 --> 01:06:54,660
kind of

1534
01:06:54,660 --> 01:06:56,940
a result of a long discussions with

1535
01:06:56,940 --> 01:06:59,280
Torsten and Tobias who are not in the

1536
01:06:59,280 --> 01:07:01,380
room but yeah against a huge kudos to

1537
01:07:01,380 --> 01:07:03,780
both of them to contributing

1538
01:07:03,780 --> 01:07:06,420
um so in the protocol it is based on OS

1539
01:07:06,420 --> 01:07:09,180
2.0 if it has open ID in the title we

1540
01:07:09,180 --> 01:07:11,280
just keep calling it up in id4 because

1541
01:07:11,280 --> 01:07:13,079
we're talking about you know user claims

1542
01:07:13,079 --> 01:07:15,420
but it is OS based essentially we

1543
01:07:15,420 --> 01:07:17,460
defined a new resource server just for

1544
01:07:17,460 --> 01:07:19,020
those in the room who are not familiar

1545
01:07:19,020 --> 01:07:20,579
with the protocol

1546
01:07:20,579 --> 01:07:24,240
um so this is a use case where the large

1547
01:07:24,240 --> 01:07:27,480
number of ruling parties they close on

1548
01:07:27,480 --> 01:07:29,460
wallets a large number of these

1549
01:07:29,460 --> 01:07:31,559
credential issuers who have built this

1550
01:07:31,559 --> 01:07:33,780
additional resource server that want to

1551
01:07:33,780 --> 01:07:35,280
interact with each other

1552
01:07:35,280 --> 01:07:37,500
and we've received a lot of feedback

1553
01:07:37,500 --> 01:07:39,960
that it's unrealistic and also

1554
01:07:39,960 --> 01:07:41,640
impractical for the easterling party

1555
01:07:41,640 --> 01:07:43,680
slash wallets to sample and register

1556
01:07:43,680 --> 01:07:45,960
with every single credential issuer and

1557
01:07:45,960 --> 01:07:47,700
manage client IDs for each of those

1558
01:07:47,700 --> 01:07:49,200
issuers

1559
01:07:49,200 --> 01:07:52,079
so and that's kind of one extreme is

1560
01:07:52,079 --> 01:07:54,359
this completely open ecosystem where you

1561
01:07:54,359 --> 01:07:56,579
know people want to allow anyone to talk

1562
01:07:56,579 --> 01:07:58,559
to any credential issue but of course

1563
01:07:58,559 --> 01:07:59,940
people would say how about high

1564
01:07:59,940 --> 01:08:02,280
Assurance use cases right that's where

1565
01:08:02,280 --> 01:08:04,260
it's kind of close to the second point

1566
01:08:04,260 --> 01:08:06,119
with open Banking and education

1567
01:08:06,119 --> 01:08:08,760
Federation and whatnot where it's a

1568
01:08:08,760 --> 01:08:11,039
relatively closed ecosystem meaning

1569
01:08:11,039 --> 01:08:12,780
there is some kind of third party

1570
01:08:12,780 --> 01:08:15,240
managing you know the requirements

1571
01:08:15,240 --> 01:08:17,100
either it's a trust list or you know

1572
01:08:17,100 --> 01:08:18,660
like you have to have the certification

1573
01:08:18,660 --> 01:08:21,600
but in the end of the day the point that

1574
01:08:21,600 --> 01:08:24,120
there's a group of relying parties who

1575
01:08:24,120 --> 01:08:25,738
are wanting to interact with another

1576
01:08:25,738 --> 01:08:28,140
group of authorization servers is the

1577
01:08:28,140 --> 01:08:30,540
same and again the same feedback coming

1578
01:08:30,540 --> 01:08:32,698
in like we don't want to manage client

1579
01:08:32,698 --> 01:08:35,160
ID for each issuer separately from each

1580
01:08:35,160 --> 01:08:37,620
authorization server in this case so

1581
01:08:37,620 --> 01:08:40,738
this is partially what we started

1582
01:08:40,738 --> 01:08:42,960
calling Anonymous clients maybe not the

1583
01:08:42,960 --> 01:08:46,020
best term but you know that's what we

1584
01:08:46,020 --> 01:08:46,979
mean

1585
01:08:46,979 --> 01:08:48,000
um when

1586
01:08:48,000 --> 01:08:51,500
the client the rank party is coming in

1587
01:08:51,500 --> 01:08:53,880
previously on known toasterization

1588
01:08:53,880 --> 01:08:55,738
server so it's it's bringing in the

1589
01:08:55,738 --> 01:08:57,899
client ID which authorization service

1590
01:08:57,899 --> 01:09:00,420
has not issued itself and maybe it's not

1591
01:09:00,420 --> 01:09:03,420
pre-issued per section two

1592
01:09:03,420 --> 01:09:05,279
um so yeah I think I covered both kinds

1593
01:09:05,279 --> 01:09:07,380
completely open ecosystem a bit you know

1594
01:09:07,380 --> 01:09:10,198
more close ecosystem but still two

1595
01:09:10,198 --> 01:09:11,759
groups of

1596
01:09:11,759 --> 01:09:12,359
um

1597
01:09:12,359 --> 01:09:14,399
parties interacting

1598
01:09:14,399 --> 01:09:15,719
so

1599
01:09:15,719 --> 01:09:18,719
the two questions I really want to you

1600
01:09:18,719 --> 01:09:20,540
know challenge people to think about is

1601
01:09:20,540 --> 01:09:23,600
who should be determining the client ID

1602
01:09:23,600 --> 01:09:27,060
and who should be managing the client

1603
01:09:27,060 --> 01:09:28,380
metadata

1604
01:09:28,380 --> 01:09:31,500
and we'll come back to it and just to

1605
01:09:31,500 --> 01:09:33,359
give you know Fit For Thought I want to

1606
01:09:33,359 --> 01:09:35,460
give some data points or I want to call

1607
01:09:35,460 --> 01:09:37,738
it prior art because kind of current art

1608
01:09:37,738 --> 01:09:41,040
so one thing is what I took a liberty to

1609
01:09:41,040 --> 01:09:43,979
call client ID as a URI or bring your

1610
01:09:43,979 --> 01:09:46,620
own client ID model in existing open ID

1611
01:09:46,620 --> 01:09:47,819
Federation

1612
01:09:47,819 --> 01:09:49,259
um

1613
01:09:49,259 --> 01:09:51,779
um spec so essentially a trusting device

1614
01:09:51,779 --> 01:09:54,420
and I think that this mechanism defined

1615
01:09:54,420 --> 01:09:57,420
in openly Federation is much more

1616
01:09:57,420 --> 01:09:59,460
powerful than the authors themselves

1617
01:09:59,460 --> 01:10:03,000
have intended or wanted to be and it's

1618
01:10:03,000 --> 01:10:05,480
interesting because first the

1619
01:10:05,480 --> 01:10:08,580
specification absolutely breaks section

1620
01:10:08,580 --> 01:10:12,900
two and section 2.2 of RC 47 6749 and

1621
01:10:12,900 --> 01:10:16,739
this is where a third party

1622
01:10:16,739 --> 01:10:19,679
so there's no pre-registration as per

1623
01:10:19,679 --> 01:10:21,480
section two so the client does not have

1624
01:10:21,480 --> 01:10:24,659
to pre-register and it is a client who

1625
01:10:24,659 --> 01:10:27,000
is determining its own client ID it's

1626
01:10:27,000 --> 01:10:28,920
literally the client saying here's my

1627
01:10:28,920 --> 01:10:31,679
client ID it's a URI a panda dot well

1628
01:10:31,679 --> 01:10:34,020
known slash openly Federation config you

1629
01:10:34,020 --> 01:10:36,480
find a Json file use it as a client

1630
01:10:36,480 --> 01:10:38,520
metadata or you can go up the trust

1631
01:10:38,520 --> 01:10:39,960
chain if it's you know the closed

1632
01:10:39,960 --> 01:10:42,000
environment I talked about verify the

1633
01:10:42,000 --> 01:10:43,500
trust chain and make sure you can trust

1634
01:10:43,500 --> 01:10:46,620
the metadata ceramics summarizing at 100

1635
01:10:46,620 --> 01:10:48,719
pages in one sec one sentence so

1636
01:10:48,719 --> 01:10:50,820
purchase for that but

1637
01:10:50,820 --> 01:10:53,640
um so that's what it does right and I

1638
01:10:53,640 --> 01:10:55,760
just put example of that you know like

1639
01:10:55,760 --> 01:10:58,380
example of client metadata managed by

1640
01:10:58,380 --> 01:11:00,179
the client

1641
01:11:00,179 --> 01:11:03,900
and the same model actually have been

1642
01:11:03,900 --> 01:11:06,000
pretty independently

1643
01:11:06,000 --> 01:11:08,100
um developed in this therapy too and

1644
01:11:08,100 --> 01:11:11,580
openly for VP so again open it for VP is

1645
01:11:11,580 --> 01:11:14,280
OS 2.0 based

1646
01:11:14,280 --> 01:11:15,840
um we still call it open ID because

1647
01:11:15,840 --> 01:11:18,360
again it's about client identifier and

1648
01:11:18,360 --> 01:11:21,360
it's really close to the issuance

1649
01:11:21,360 --> 01:11:23,760
um extension so this is where we

1650
01:11:23,760 --> 01:11:25,440
actually allowed three different options

1651
01:11:25,440 --> 01:11:28,920
to counters the limitations we faced so

1652
01:11:28,920 --> 01:11:31,320
honest with that it's okay for client ID

1653
01:11:31,320 --> 01:11:33,659
to Eco redirect URI if you don't know

1654
01:11:33,659 --> 01:11:35,699
what client they need to use but not

1655
01:11:35,699 --> 01:11:37,620
many people it's the simplest but not

1656
01:11:37,620 --> 01:11:38,940
many people do it because of you know

1657
01:11:38,940 --> 01:11:41,460
where do you get the metadata from

1658
01:11:41,460 --> 01:11:44,940
and the answer to that question is we

1659
01:11:44,940 --> 01:11:47,159
Define the new parameter called client

1660
01:11:47,159 --> 01:11:49,800
metadata where you can so in openly

1661
01:11:49,800 --> 01:11:51,780
Federation example the client metadata

1662
01:11:51,780 --> 01:11:55,020
was hosted somewhere externally

1663
01:11:55,020 --> 01:11:57,420
um but it also enabled an option to

1664
01:11:57,420 --> 01:12:00,000
actually pass the actual client metadata

1665
01:12:00,000 --> 01:12:02,760
in the authorization request right as

1666
01:12:02,760 --> 01:12:05,760
long as that request is signed or you

1667
01:12:05,760 --> 01:12:07,500
have some additional mechanisms to trust

1668
01:12:07,500 --> 01:12:10,199
that request or Origins coming from it's

1669
01:12:10,199 --> 01:12:11,940
okay to take out the metadata from the

1670
01:12:11,940 --> 01:12:14,100
actual authorization request right so

1671
01:12:14,100 --> 01:12:15,659
those are the three options we have

1672
01:12:15,659 --> 01:12:18,900
right now and I think Tobias sent a note

1673
01:12:18,900 --> 01:12:22,219
to an email but there is a draft on

1674
01:12:22,219 --> 01:12:26,340
individual draft on to kind of bringing

1675
01:12:26,340 --> 01:12:29,580
that client metadata idea into the OS

1676
01:12:29,580 --> 01:12:31,140
working group

1677
01:12:31,140 --> 01:12:34,440
um but we I'm kind of running ahead of

1678
01:12:34,440 --> 01:12:36,960
myself but I think if we can find a

1679
01:12:36,960 --> 01:12:38,640
mechanism to combine this client

1680
01:12:38,640 --> 01:12:40,440
metadata in those authorization request

1681
01:12:40,440 --> 01:12:42,719
idea with a powerful mechanism up in the

1682
01:12:42,719 --> 01:12:44,520
refrigeration spec is giving us we're

1683
01:12:44,520 --> 01:12:46,140
actually creating something really

1684
01:12:46,140 --> 01:12:48,500
powerful

1685
01:12:48,600 --> 01:12:50,940
um but obviously I just just to comment

1686
01:12:50,940 --> 01:12:53,100
on the asterisk obviously we are

1687
01:12:53,100 --> 01:12:55,080
enabling pre-registration to just you

1688
01:12:55,080 --> 01:12:56,100
know so people are not having heart

1689
01:12:56,100 --> 01:12:57,840
attacks

1690
01:12:57,840 --> 01:13:01,320
um so and recently what happened was so

1691
01:13:01,320 --> 01:13:03,239
I'm going back to the credential

1692
01:13:03,239 --> 01:13:06,000
issuance draft so that's where we

1693
01:13:06,000 --> 01:13:08,040
actually have to find a new Grant type

1694
01:13:08,040 --> 01:13:10,199
where which is really similar to job

1695
01:13:10,199 --> 01:13:11,940
Fairground type but there's no

1696
01:13:11,940 --> 01:13:13,860
civilization endpoint and you can take

1697
01:13:13,860 --> 01:13:17,040
you know the token directly to the Token

1698
01:13:17,040 --> 01:13:18,360
endpoint

1699
01:13:18,360 --> 01:13:21,120
um and that's where

1700
01:13:21,120 --> 01:13:23,820
I talked to Brian Campbell so we're not

1701
01:13:23,820 --> 01:13:25,980
doing something completely crazy we said

1702
01:13:25,980 --> 01:13:28,199
it's okay not to

1703
01:13:28,199 --> 01:13:31,260
um pass client ID in the token request

1704
01:13:31,260 --> 01:13:33,540
so the client is pretty much Anonymous

1705
01:13:33,540 --> 01:13:35,880
so obviously it was the association

1706
01:13:35,880 --> 01:13:38,280
server wants to identify the client it

1707
01:13:38,280 --> 01:13:40,199
can return an error say hey up so they

1708
01:13:40,199 --> 01:13:42,239
need to bring the client ID but spec

1709
01:13:42,239 --> 01:13:44,520
wise we're saying the client can be

1710
01:13:44,520 --> 01:13:45,900
completely Anonymous

1711
01:13:45,900 --> 01:13:47,940
um you don't have to send the client ID

1712
01:13:47,940 --> 01:13:50,100
to the Token request if you're not even

1713
01:13:50,100 --> 01:13:52,860
doing authorization request right

1714
01:13:52,860 --> 01:13:54,179
and

1715
01:13:54,179 --> 01:13:56,460
I can't put it on the slide but my

1716
01:13:56,460 --> 01:13:58,020
actual motivation to bringing it up

1717
01:13:58,020 --> 01:14:00,300
because there's some really interesting

1718
01:14:00,300 --> 01:14:02,400
but might be dangerous workarounds

1719
01:14:02,400 --> 01:14:04,190
happening and what I mean is

1720
01:14:04,190 --> 01:14:04,620
[Music]

1721
01:14:04,620 --> 01:14:05,420
um

1722
01:14:05,420 --> 01:14:08,400
all those data points I've given are

1723
01:14:08,400 --> 01:14:10,560
great but the limitation is that

1724
01:14:10,560 --> 01:14:12,480
existing authorization service existing

1725
01:14:12,480 --> 01:14:15,000
ones right probably can't do it because

1726
01:14:15,000 --> 01:14:19,020
they've implemented RFC 6749 they have

1727
01:14:19,020 --> 01:14:21,840
to spit out their own client ID and they

1728
01:14:21,840 --> 01:14:23,940
right now do not allow bring your own

1729
01:14:23,940 --> 01:14:26,400
client ID model and hopefully in the

1730
01:14:26,400 --> 01:14:28,560
future as I will but that's a status quo

1731
01:14:28,560 --> 01:14:30,900
and before we go to Future State what

1732
01:14:30,900 --> 01:14:32,520
this authorization service are starting

1733
01:14:32,520 --> 01:14:34,920
to do because they have to spit out the

1734
01:14:34,920 --> 01:14:37,739
client ID so they do and they publish it

1735
01:14:37,739 --> 01:14:40,560
somewhere or communicate out of band and

1736
01:14:40,560 --> 01:14:43,080
they're telling the clients who want to

1737
01:14:43,080 --> 01:14:45,199
support that specific flow or whatever

1738
01:14:45,199 --> 01:14:48,540
just use a client ID so authorization

1739
01:14:48,540 --> 01:14:51,120
servers are encouraging the clients to

1740
01:14:51,120 --> 01:14:53,460
impersonate each other or what's

1741
01:14:53,460 --> 01:14:56,040
happening it's a pretty bad way to put

1742
01:14:56,040 --> 01:14:58,560
it but that's what's happening because

1743
01:14:58,560 --> 01:15:01,440
there is this limitations that I

1744
01:15:01,440 --> 01:15:04,320
described this relation servers are have

1745
01:15:04,320 --> 01:15:06,060
to spit out the client they right now

1746
01:15:06,060 --> 01:15:08,280
what they do they spit out and allow

1747
01:15:08,280 --> 01:15:10,920
multiple vendors to use it

1748
01:15:10,920 --> 01:15:13,679
so that's my actual you know

1749
01:15:13,679 --> 01:15:15,900
motivation to bring it here because you

1750
01:15:15,900 --> 01:15:18,239
know I'm a bit you know I understand why

1751
01:15:18,239 --> 01:15:20,219
it's happening but I'm a bit scared that

1752
01:15:20,219 --> 01:15:22,620
it's happening so

1753
01:15:22,620 --> 01:15:24,239
right so kind of going back to two

1754
01:15:24,239 --> 01:15:26,460
questions I posted in the beginning you

1755
01:15:26,460 --> 01:15:28,560
might disagree or maybe am I missing

1756
01:15:28,560 --> 01:15:30,060
something but

1757
01:15:30,060 --> 01:15:31,980
probably four ways the main reasons why

1758
01:15:31,980 --> 01:15:34,199
client ID is actually needed why I was

1759
01:15:34,199 --> 01:15:37,020
in you know 47 67 49 I don't know I keep

1760
01:15:37,020 --> 01:15:38,640
saying 47 today

1761
01:15:38,640 --> 01:15:41,040
um so time client ID to the list of

1762
01:15:41,040 --> 01:15:42,659
allowed redirect Uris to prevent open

1763
01:15:42,659 --> 01:15:45,239
redirects so you know knowing which

1764
01:15:45,239 --> 01:15:47,520
client metadata to use knowing what

1765
01:15:47,520 --> 01:15:50,100
metadata displayed how to customize user

1766
01:15:50,100 --> 01:15:52,679
experience if it's in a per client and

1767
01:15:52,679 --> 01:15:54,659
as can also apply specific specific

1768
01:15:54,659 --> 01:15:56,460
permissions I guess based on you know

1769
01:15:56,460 --> 01:15:58,020
identifying which client you're talking

1770
01:15:58,020 --> 01:15:59,820
to

1771
01:15:59,820 --> 01:16:02,100
um so next steps

1772
01:16:02,100 --> 01:16:04,440
um again just a suggestion I want to you

1773
01:16:04,440 --> 01:16:07,440
know hear people's thoughts um can be

1774
01:16:07,440 --> 01:16:08,820
you know

1775
01:16:08,820 --> 01:16:10,679
I as I already I guess you know went

1776
01:16:10,679 --> 01:16:13,440
ahead of myself I really want the

1777
01:16:13,440 --> 01:16:15,179
working group to kind of you know

1778
01:16:15,179 --> 01:16:17,000
encourage working on this you know

1779
01:16:17,000 --> 01:16:19,199
mechanism where we can combine this

1780
01:16:19,199 --> 01:16:21,360
client metadata idea which is this

1781
01:16:21,360 --> 01:16:24,179
individual draft device submit it and

1782
01:16:24,179 --> 01:16:27,780
maybe mechanism of any Federation

1783
01:16:27,780 --> 01:16:29,820
um and that was actually important point

1784
01:16:29,820 --> 01:16:33,840
we wanted to highlight is OAS 2.1

1785
01:16:33,840 --> 01:16:36,659
actually already relaxes the

1786
01:16:36,659 --> 01:16:38,100
requirements

1787
01:16:38,100 --> 01:16:39,780
um I pointed out in the beginning of

1788
01:16:39,780 --> 01:16:41,820
this presentation was typing already

1789
01:16:41,820 --> 01:16:44,520
relaxes that as has to be the one

1790
01:16:44,520 --> 01:16:47,100
spitting out but I think that has

1791
01:16:47,100 --> 01:16:49,260
happened without you know a big working

1792
01:16:49,260 --> 01:16:52,080
group um discussion I think tourism

1793
01:16:52,080 --> 01:16:53,820
acknowledged that

1794
01:16:53,820 --> 01:16:56,159
um it was kind of you know the editor's

1795
01:16:56,159 --> 01:16:58,920
um decision so again the bringing up

1796
01:16:58,920 --> 01:17:02,040
this walking group is actually aware and

1797
01:17:02,040 --> 01:17:04,620
you know that is being a conscious

1798
01:17:04,620 --> 01:17:06,300
decision by the working group that we

1799
01:17:06,300 --> 01:17:08,100
are relaxing that

1800
01:17:08,100 --> 01:17:09,840
um well hopefully five people should I

1801
01:17:09,840 --> 01:17:12,800
be scared or happy yeah

1802
01:17:13,040 --> 01:17:16,580
go ahead Darren

1803
01:17:18,060 --> 01:17:21,080
uh yeah I got a lot of notes here okay

1804
01:17:21,080 --> 01:17:23,640
uh let me start with the oau 2.1 thing

1805
01:17:23,640 --> 01:17:24,659
since that was the last thing you

1806
01:17:24,659 --> 01:17:27,239
mentioned um yeah you I

1807
01:17:27,239 --> 01:17:29,820
you are correct that the language got

1808
01:17:29,820 --> 01:17:33,600
already changed in 2.1 and it says

1809
01:17:33,600 --> 01:17:35,460
you may also serve clients whose client

1810
01:17:35,460 --> 01:17:37,980
identifier was issued by a trusted third

1811
01:17:37,980 --> 01:17:41,120
party that's the new text and I actually

1812
01:17:41,120 --> 01:17:43,260
uh now have been caught this through a

1813
01:17:43,260 --> 01:17:44,100
little more I think we should go one

1814
01:17:44,100 --> 01:17:46,020
step further and remove the word trusted

1815
01:17:46,020 --> 01:17:48,780
from that since it could be issued by

1816
01:17:48,780 --> 01:17:51,900
other parties for various reasons that

1817
01:17:51,900 --> 01:17:52,679
are

1818
01:17:52,679 --> 01:17:56,040
all legitimate in different scenarios

1819
01:17:56,040 --> 01:17:57,300
um so I think we should I think we

1820
01:17:57,300 --> 01:17:59,340
should go even go even farther with that

1821
01:17:59,340 --> 01:17:59,940
um

1822
01:17:59,940 --> 01:18:01,739
which also brings up an interesting

1823
01:18:01,739 --> 01:18:05,880
point that the security BCP also says

1824
01:18:05,880 --> 01:18:07,980
that clients should not influence their

1825
01:18:07,980 --> 01:18:09,659
own client ID

1826
01:18:09,659 --> 01:18:11,580
and that's for a particular reason that

1827
01:18:11,580 --> 01:18:13,500
has nothing to do with this but that was

1828
01:18:13,500 --> 01:18:16,020
for the case where a resource server

1829
01:18:16,020 --> 01:18:18,679
might be confusing this subclaim

1830
01:18:18,679 --> 01:18:23,340
uh for a client authentication issued

1831
01:18:23,340 --> 01:18:27,179
token versus a delegated token

1832
01:18:27,179 --> 01:18:29,040
um so that's an interesting sort of

1833
01:18:29,040 --> 01:18:30,659
wrench to throw in there because I think

1834
01:18:30,659 --> 01:18:32,520
that is still about concern but I think

1835
01:18:32,520 --> 01:18:33,780
the recommendation that clients

1836
01:18:33,780 --> 01:18:35,040
shouldn't influence their own client ID

1837
01:18:35,040 --> 01:18:37,920
is not the right recommendation based on

1838
01:18:37,920 --> 01:18:40,699
what we're seeing now

1839
01:18:41,460 --> 01:18:42,500
um okay

1840
01:18:42,500 --> 01:18:44,880
the other I also wanted it back to the

1841
01:18:44,880 --> 01:18:46,980
beginning of your presentation the um

1842
01:18:46,980 --> 01:18:50,460
another example use case of a scenario

1843
01:18:50,460 --> 01:18:53,040
that uh leverages this is the whole

1844
01:18:53,040 --> 01:18:54,360
world of

1845
01:18:54,360 --> 01:18:58,080
completely open web where there is

1846
01:18:58,080 --> 01:19:00,900
um no trust chain available or desired

1847
01:19:00,900 --> 01:19:03,360
and that would be things like random

1848
01:19:03,360 --> 01:19:04,920
random person spins up their own

1849
01:19:04,920 --> 01:19:07,080
WordPress website it's open source

1850
01:19:07,080 --> 01:19:08,760
software they install it themselves the

1851
01:19:08,760 --> 01:19:10,199
developer of Wordpress has no idea that

1852
01:19:10,199 --> 01:19:11,880
it's happened obviously

1853
01:19:11,880 --> 01:19:14,400
another random developer makes an iPhone

1854
01:19:14,400 --> 01:19:16,020
app that they publish in the store to

1855
01:19:16,020 --> 01:19:18,000
edit your WordPress site

1856
01:19:18,000 --> 01:19:19,679
obviously the developer of the iPhone

1857
01:19:19,679 --> 01:19:21,540
app has no prior knowledge of every

1858
01:19:21,540 --> 01:19:24,000
place WordPress is installed nor is that

1859
01:19:24,000 --> 01:19:27,000
desirable and vice versa so in that case

1860
01:19:27,000 --> 01:19:28,380
you actually want the WordPress iPhone

1861
01:19:28,380 --> 01:19:30,000
app to be able to

1862
01:19:30,000 --> 01:19:32,880
present itself to an individual's own

1863
01:19:32,880 --> 01:19:34,560
WordPress website

1864
01:19:34,560 --> 01:19:37,020
and say please I need a token I need to

1865
01:19:37,020 --> 01:19:39,480
log in and I think this is again it's

1866
01:19:39,480 --> 01:19:41,940
the same scenario where you want

1867
01:19:41,940 --> 01:19:43,679
information about the client you want

1868
01:19:43,679 --> 01:19:45,600
some level of redirect URI registration

1869
01:19:45,600 --> 01:19:46,980
somehow

1870
01:19:46,980 --> 01:19:50,159
uh but you can't even do the trust chain

1871
01:19:50,159 --> 01:19:54,300
thing because there is no trusted root

1872
01:19:54,300 --> 01:19:57,000
in that ecosystem

1873
01:19:57,000 --> 01:20:00,480
so uh and along those lines there is

1874
01:20:00,480 --> 01:20:04,020
also a community that I am involved in

1875
01:20:04,020 --> 01:20:05,820
that has been doing exactly that since

1876
01:20:05,820 --> 01:20:08,760
about 2014. so it's not even new so it's

1877
01:20:08,760 --> 01:20:11,400
like eight years of client IDs as URLs

1878
01:20:11,400 --> 01:20:12,900
and it has been working and it's

1879
01:20:12,900 --> 01:20:15,360
actually kind of widely deployed there's

1880
01:20:15,360 --> 01:20:17,159
a lot of systems that use it so can you

1881
01:20:17,159 --> 01:20:19,860
say more about this yeah the uh the spec

1882
01:20:19,860 --> 01:20:21,239
was

1883
01:20:21,239 --> 01:20:21,980
um

1884
01:20:21,980 --> 01:20:25,440
published as a w3c note in 2018 it's

1885
01:20:25,440 --> 01:20:29,159
called indiath and it is essentially a

1886
01:20:29,159 --> 01:20:31,140
way of using oauth in that sort of open

1887
01:20:31,140 --> 01:20:32,699
web ecosystem

1888
01:20:32,699 --> 01:20:34,199
I have a blog post that talks about it

1889
01:20:34,199 --> 01:20:36,360
as well kind of in terms of looking at

1890
01:20:36,360 --> 01:20:37,920
it from the oauth side

1891
01:20:37,920 --> 01:20:39,659
um I can link that into the

1892
01:20:39,659 --> 01:20:42,300
jabber chat or whatever

1893
01:20:42,300 --> 01:20:44,340
um but it's it's decently widely

1894
01:20:44,340 --> 01:20:45,659
implemented and it does exactly that

1895
01:20:45,659 --> 01:20:48,120
client IDs are URLs client metadata is

1896
01:20:48,120 --> 01:20:50,699
found from that URL it also happens that

1897
01:20:50,699 --> 01:20:53,580
the user IDs are URLs too but that's a

1898
01:20:53,580 --> 01:20:56,040
different discussion so I think there's

1899
01:20:56,040 --> 01:20:57,960
a lot of precedent for that can you post

1900
01:20:57,960 --> 01:21:00,060
that to you

1901
01:21:00,060 --> 01:21:02,820
the meeting minutes I'll put uh are you

1902
01:21:02,820 --> 01:21:05,699
taking notes in the ITF tool yeah I'll

1903
01:21:05,699 --> 01:21:07,140
put links in there

1904
01:21:07,140 --> 01:21:10,080
um cool that's all

1905
01:21:10,080 --> 01:21:12,199
right thank you so much

1906
01:21:12,199 --> 01:21:15,739
yeah Brian

1907
01:21:18,300 --> 01:21:22,520
would you go back just one slide yep

1908
01:21:22,860 --> 01:21:24,360
I think

1909
01:21:24,360 --> 01:21:27,360
I lost control so if you don't

1910
01:21:27,360 --> 01:21:29,940
well it it's maybe not important

1911
01:21:29,940 --> 01:21:33,559
actually I I regained it

1912
01:21:36,000 --> 01:21:37,679
well just for context I think it was

1913
01:21:37,679 --> 01:21:39,420
what is what is client ID used for

1914
01:21:39,420 --> 01:21:41,460
needed for I think one one piece that

1915
01:21:41,460 --> 01:21:43,320
was missing from that list is it's often

1916
01:21:43,320 --> 01:21:46,739
used for part of the record of the of

1917
01:21:46,739 --> 01:21:49,080
the granted authorization at the

1918
01:21:49,080 --> 01:21:51,480
authorization server that's how it keeps

1919
01:21:51,480 --> 01:21:53,640
track of you know

1920
01:21:53,640 --> 01:21:56,159
what an individual user granted certain

1921
01:21:56,159 --> 01:21:58,440
access to a particular client and so

1922
01:21:58,440 --> 01:21:59,699
right

1923
01:21:59,699 --> 01:22:01,860
um but it's it's a

1924
01:22:01,860 --> 01:22:03,600
consideration I think needs to be

1925
01:22:03,600 --> 01:22:05,540
considered what's life

1926
01:22:05,540 --> 01:22:09,120
yeah why is client ID needed yeah

1927
01:22:09,120 --> 01:22:09,840
um

1928
01:22:09,840 --> 01:22:12,540
that that that's sort of

1929
01:22:12,540 --> 01:22:15,179
client ID associated with the the record

1930
01:22:15,179 --> 01:22:17,280
of the authorization what's often called

1931
01:22:17,280 --> 01:22:18,540
the underlying Grant or the

1932
01:22:18,540 --> 01:22:20,820
authorization Grant is something that

1933
01:22:20,820 --> 01:22:22,560
that I think pretty much every real

1934
01:22:22,560 --> 01:22:24,480
authorization server does so should be

1935
01:22:24,480 --> 01:22:26,640
included in this so it's not

1936
01:22:26,640 --> 01:22:29,340
not missed okay I see someone

1937
01:22:29,340 --> 01:22:32,120
disagreeing but I I think

1938
01:22:32,120 --> 01:22:35,040
I think I think I think yeah thanks

1939
01:22:35,040 --> 01:22:36,960
Brian I think the point of the slide and

1940
01:22:36,960 --> 01:22:39,300
sorry I couldn't didn't talk through is

1941
01:22:39,300 --> 01:22:41,940
yeah if we can identify why client ID is

1942
01:22:41,940 --> 01:22:43,920
needed and kind of use the list to

1943
01:22:43,920 --> 01:22:45,300
analyze

1944
01:22:45,300 --> 01:22:47,580
you know to say that

1945
01:22:47,580 --> 01:22:50,040
even if they allow this client ID as a

1946
01:22:50,040 --> 01:22:51,900
URI or bring your own client ID model

1947
01:22:51,900 --> 01:22:53,880
you can still use cliently for these

1948
01:22:53,880 --> 01:22:56,280
reasons so it's okay like that was kind

1949
01:22:56,280 --> 01:22:57,960
of why I actually wanted this checklist

1950
01:22:57,960 --> 01:23:00,239
to be here because if we can check all

1951
01:23:00,239 --> 01:23:02,640
that like why not right

1952
01:23:02,640 --> 01:23:04,500
um so yeah thanks like I think yeah no

1953
01:23:04,500 --> 01:23:07,080
this list definitely has to be revised

1954
01:23:07,080 --> 01:23:08,219
yeah

1955
01:23:08,219 --> 01:23:09,659
Daryl Miller

1956
01:23:09,659 --> 01:23:10,679
um forgive

1957
01:23:10,679 --> 01:23:12,239
apologies to the rest of the room as one

1958
01:23:12,239 --> 01:23:13,739
team at Microsoft talks to another team

1959
01:23:13,739 --> 01:23:16,500
that Microsoft uh I think this would be

1960
01:23:16,500 --> 01:23:18,719
absolutely wonderful we have so many

1961
01:23:18,719 --> 01:23:21,960
issues in developer experience around

1962
01:23:21,960 --> 01:23:24,719
that initial app registration

1963
01:23:24,719 --> 01:23:26,400
um and this would allow us to

1964
01:23:26,400 --> 01:23:28,860
significantly simplify onboarding of

1965
01:23:28,860 --> 01:23:31,679
people using apis it also has an

1966
01:23:31,679 --> 01:23:34,380
interesting effect we get we have a lot

1967
01:23:34,380 --> 01:23:37,739
of concerns around garbage collection

1968
01:23:37,739 --> 01:23:40,080
around app IDs that have been created

1969
01:23:40,080 --> 01:23:42,659
and then never deleted and around the

1970
01:23:42,659 --> 01:23:44,880
consent issue

1971
01:23:44,880 --> 01:23:46,920
um maybe it's not such a bad thing if an

1972
01:23:46,920 --> 01:23:48,600
app ID that hasn't been used in three

1973
01:23:48,600 --> 01:23:51,500
months that has a consent assigned to it

1974
01:23:51,500 --> 01:23:54,420
goes away and the user has to reconsend

1975
01:23:54,420 --> 01:23:56,580
afterwards but it is something that we

1976
01:23:56,580 --> 01:23:59,460
should include and discuss but yeah I'm

1977
01:23:59,460 --> 01:24:01,920
I'm very supportive of heading in this

1978
01:24:01,920 --> 01:24:04,320
direction I'm so happy to hear that

1979
01:24:04,320 --> 01:24:06,480
could you explain um for the minister

1980
01:24:06,480 --> 01:24:08,820
like what is the when you say consent

1981
01:24:08,820 --> 01:24:10,739
issue what what do you mean by that I I

1982
01:24:10,739 --> 01:24:13,739
think the word user was Grant so we

1983
01:24:13,739 --> 01:24:17,580
store uh when somebody attempts to go

1984
01:24:17,580 --> 01:24:19,260
get a token to be able to access a

1985
01:24:19,260 --> 01:24:21,480
certain piece of data uh there are

1986
01:24:21,480 --> 01:24:24,960
scopes that are in the scope claims in

1987
01:24:24,960 --> 01:24:27,060
the token that the user says yes I would

1988
01:24:27,060 --> 01:24:29,040
like this app to be able to access my

1989
01:24:29,040 --> 01:24:30,780
email yes I would like this app to be

1990
01:24:30,780 --> 01:24:33,060
able to access my contacts and so we

1991
01:24:33,060 --> 01:24:35,460
have to store that information along

1992
01:24:35,460 --> 01:24:38,580
with what we call service principle but

1993
01:24:38,580 --> 01:24:40,560
it's It's associated to the app ID

1994
01:24:40,560 --> 01:24:42,960
indirectly

1995
01:24:42,960 --> 01:24:45,560
so client ID sorry Microsoft General

1996
01:24:45,560 --> 01:24:49,440
thank you this is great

1997
01:24:49,440 --> 01:24:50,900
just a second

1998
01:24:50,900 --> 01:24:55,739
okay okay Justin hi Justin Richards so

1999
01:24:55,739 --> 01:24:57,360
uh a lot of what's on this slide is

2000
01:24:57,360 --> 01:24:58,800
actually I would pause it not about

2001
01:24:58,800 --> 01:25:00,719
client ID but about the underlying

2002
01:25:00,719 --> 01:25:02,400
client registration record as known per

2003
01:25:02,400 --> 01:25:04,920
the I per the As and that is what is

2004
01:25:04,920 --> 01:25:07,500
being referenced by the client ID that

2005
01:25:07,500 --> 01:25:09,540
actually further goes to what uh Brian

2006
01:25:09,540 --> 01:25:11,040
was just saying and why I was shaking my

2007
01:25:11,040 --> 01:25:12,719
head about it is that you don't need a

2008
01:25:12,719 --> 01:25:14,460
client ID in order to tie to auto

2009
01:25:14,460 --> 01:25:16,140
records you need to link to some

2010
01:25:16,140 --> 01:25:18,360
database row number somewhere and that

2011
01:25:18,360 --> 01:25:20,640
is not a value that needs to be exposed

2012
01:25:20,640 --> 01:25:22,199
externally to the protocol generally

2013
01:25:22,199 --> 01:25:25,800
speaking however in the uh oauth world

2014
01:25:25,800 --> 01:25:28,260
uh the entire oauth protocol is

2015
01:25:28,260 --> 01:25:30,420
basically you start with the

2016
01:25:30,420 --> 01:25:32,520
authorization code flow right everything

2017
01:25:32,520 --> 01:25:35,040
else is just kind of bolted on in

2018
01:25:35,040 --> 01:25:37,260
strange angles from there and in the

2019
01:25:37,260 --> 01:25:38,820
authorization code flow as it was

2020
01:25:38,820 --> 01:25:40,800
classically defined you had to start

2021
01:25:40,800 --> 01:25:43,500
with a redirect as you were do going

2022
01:25:43,500 --> 01:25:44,760
through the fun Channel when you're

2023
01:25:44,760 --> 01:25:46,260
going through the fun Channel you cannot

2024
01:25:46,260 --> 01:25:47,940
make an authenticated call to the

2025
01:25:47,940 --> 01:25:49,980
authorization endpoint but least he

2026
01:25:49,980 --> 01:25:51,420
couldn't at the time I know there's like

2027
01:25:51,420 --> 01:25:53,400
you can do it sideways with sign jots

2028
01:25:53,400 --> 01:25:55,560
and things like that these days

2029
01:25:55,560 --> 01:25:58,080
but we needed a way to identify what

2030
01:25:58,080 --> 01:25:59,219
client we were talking about without

2031
01:25:59,219 --> 01:26:01,020
authenticating the client software

2032
01:26:01,020 --> 01:26:02,699
itself so that's where the client ID

2033
01:26:02,699 --> 01:26:05,040
really came into play we ended up

2034
01:26:05,040 --> 01:26:07,500
looming on the client ID so hard that we

2035
01:26:07,500 --> 01:26:08,699
had to invent a whole other set of

2036
01:26:08,699 --> 01:26:10,920
specifications to get a client ID when

2037
01:26:10,920 --> 01:26:12,300
you didn't have one that's the dynamic

2038
01:26:12,300 --> 01:26:15,719
registration side of things right and as

2039
01:26:15,719 --> 01:26:17,820
you've pointed out very very uh

2040
01:26:17,820 --> 01:26:19,800
rightfully here there's a whole bunch of

2041
01:26:19,800 --> 01:26:22,020
use cases where you start collecting all

2042
01:26:22,020 --> 01:26:23,580
of these client IDs that maybe you'll

2043
01:26:23,580 --> 01:26:25,020
never see them again because are you

2044
01:26:25,020 --> 01:26:26,520
going to really dynamically register

2045
01:26:26,520 --> 01:26:29,880
every time your spa reloads or you drop

2046
01:26:29,880 --> 01:26:31,500
the cookie jar I know people have tried

2047
01:26:31,500 --> 01:26:32,760
to do that back in the day because that

2048
01:26:32,760 --> 01:26:33,780
was the only way they could get around

2049
01:26:33,780 --> 01:26:35,699
things it makes absolutely no sense

2050
01:26:35,699 --> 01:26:37,800
there are other ways that we should be

2051
01:26:37,800 --> 01:26:40,199
able to bootstrap this trust environment

2052
01:26:40,199 --> 01:26:43,139
into the registration record ephemeral

2053
01:26:43,139 --> 01:26:45,600
or otherwise at the As and client ID is

2054
01:26:45,600 --> 01:26:47,460
not the way that we should have done it

2055
01:26:47,460 --> 01:26:50,100
all of that said that is the mechanism

2056
01:26:50,100 --> 01:26:52,739
that oauth 2 has because everything else

2057
01:26:52,739 --> 01:26:54,719
assumes the client ID will be there and

2058
01:26:54,719 --> 01:26:56,100
if it's not there a lot of stuff

2059
01:26:56,100 --> 01:26:59,699
actually breaks so yeah I think that a

2060
01:26:59,699 --> 01:27:01,639
lot of this is interesting

2061
01:27:01,639 --> 01:27:04,800
I will also add though that if you add

2062
01:27:04,800 --> 01:27:06,719
pushed authorization requests into the

2063
01:27:06,719 --> 01:27:09,239
mix of possible things a lot of those

2064
01:27:09,239 --> 01:27:12,239
ones go away too because you now can uh

2065
01:27:12,239 --> 01:27:13,860
start talking about an external

2066
01:27:13,860 --> 01:27:16,679
identifier to that ongoing request that

2067
01:27:16,679 --> 01:27:18,659
is not necessarily tied to a specific

2068
01:27:18,659 --> 01:27:22,380
client external client identifier

2069
01:27:22,380 --> 01:27:23,940
um within the scope of the protocol

2070
01:27:23,940 --> 01:27:26,639
itself you are simply saying I am doing

2071
01:27:26,639 --> 01:27:28,560
the next bit of this part of the

2072
01:27:28,560 --> 01:27:30,900
protocol here so if you're doing par if

2073
01:27:30,900 --> 01:27:33,480
you are doing you know um you know key

2074
01:27:33,480 --> 01:27:35,040
based authentication and stuff like that

2075
01:27:35,040 --> 01:27:37,560
you don't actually technically need

2076
01:27:37,560 --> 01:27:40,380
client ID at all in oauth except that

2077
01:27:40,380 --> 01:27:42,120
oauth requires it

2078
01:27:42,120 --> 01:27:43,980
that's not a requirement we're going to

2079
01:27:43,980 --> 01:27:47,340
get away from in uh in oauth 2 anytime

2080
01:27:47,340 --> 01:27:49,199
soon I think that the new language in

2081
01:27:49,199 --> 01:27:52,679
2.1 is a good step in that direction

2082
01:27:52,679 --> 01:27:55,199
um but anyway this is a very long way to

2083
01:27:55,199 --> 01:27:55,920
say

2084
01:27:55,920 --> 01:27:58,020
this is I think good and interesting

2085
01:27:58,020 --> 01:28:00,239
work I do think however we need to

2086
01:28:00,239 --> 01:28:02,219
really think about this in terms of the

2087
01:28:02,219 --> 01:28:04,560
client record as opposed to or the

2088
01:28:04,560 --> 01:28:06,659
client registration or the client

2089
01:28:06,659 --> 01:28:09,060
something as opposed to the client ID

2090
01:28:09,060 --> 01:28:11,280
because we're using client ID as the

2091
01:28:11,280 --> 01:28:13,199
stand-in for all of those different

2092
01:28:13,199 --> 01:28:15,659
things can I quickly react yeah yeah so

2093
01:28:15,659 --> 01:28:18,300
great points um just to react so that's

2094
01:28:18,300 --> 01:28:20,100
why the question I had both client they

2095
01:28:20,100 --> 01:28:23,219
didn't client metadata universe but just

2096
01:28:23,219 --> 01:28:25,560
declarified the reason why I didn't put

2097
01:28:25,560 --> 01:28:27,980
the term registration per set is because

2098
01:28:27,980 --> 01:28:30,659
I don't think when the client is

2099
01:28:30,659 --> 01:28:32,460
bringing in its own metadata it's

2100
01:28:32,460 --> 01:28:35,880
actually registration it's more of it it

2101
01:28:35,880 --> 01:28:36,900
just it didn't feel like the right

2102
01:28:36,900 --> 01:28:39,420
terminology like so yeah the only thing

2103
01:28:39,420 --> 01:28:40,739
so maybe if you can find if it's a

2104
01:28:40,739 --> 01:28:42,540
record or what not a good term like I

2105
01:28:42,540 --> 01:28:44,219
would be happy

2106
01:28:44,219 --> 01:28:48,060
um yeah so yeah I I just to respond I I

2107
01:28:48,060 --> 01:28:49,139
would agree with that actually

2108
01:28:49,139 --> 01:28:51,659
registration is sort of very narrowly

2109
01:28:51,659 --> 01:28:53,820
defined in the oauth world to mean this

2110
01:28:53,820 --> 01:28:55,560
I give you a bunch of metadata you give

2111
01:28:55,560 --> 01:28:57,239
me a client ID that's that's the

2112
01:28:57,239 --> 01:28:58,800
transaction

2113
01:28:58,800 --> 01:29:00,480
um so yeah I agree it's that's not

2114
01:29:00,480 --> 01:29:03,080
what's happening here okay and on part

2115
01:29:03,080 --> 01:29:06,239
that's exactly true

2116
01:29:06,239 --> 01:29:08,280
um but the there is a deployment models

2117
01:29:08,280 --> 01:29:11,699
where you can't do part so like if we

2118
01:29:11,699 --> 01:29:13,800
can yeah like account for that but also

2119
01:29:13,800 --> 01:29:16,440
so parse gray but there are some cases

2120
01:29:16,440 --> 01:29:17,880
when it can be used about the video in

2121
01:29:17,880 --> 01:29:20,100
those cases is if you can discuss that

2122
01:29:20,100 --> 01:29:21,780
would be great we have one minute so I

2123
01:29:21,780 --> 01:29:25,080
want to give people a chance to talk to

2124
01:29:25,080 --> 01:29:28,080
Tobias

2125
01:29:36,540 --> 01:29:39,239
great Tobias I can't see you sorry can

2126
01:29:39,239 --> 01:29:41,280
you are you able to hear me yes we can

2127
01:29:41,280 --> 01:29:42,300
hear you

2128
01:29:42,300 --> 01:29:45,600
so yeah I just wanted to um throw um

2129
01:29:45,600 --> 01:29:48,300
some strong support and for for this

2130
01:29:48,300 --> 01:29:49,199
work

2131
01:29:49,199 --> 01:29:52,380
um obviously have have done some work my

2132
01:29:52,380 --> 01:29:54,179
um South in this area that was published

2133
01:29:54,179 --> 01:29:55,440
in mailing list

2134
01:29:55,440 --> 01:29:56,760
um yesterday

2135
01:29:56,760 --> 01:29:59,520
um on client Discovery I think

2136
01:29:59,520 --> 01:30:00,420
um

2137
01:30:00,420 --> 01:30:02,460
much of the language

2138
01:30:02,460 --> 01:30:04,320
um around original old term what we have

2139
01:30:04,320 --> 01:30:06,239
seen in deployment subsequently kind of

2140
01:30:06,239 --> 01:30:09,080
reflect that you know the traditional

2141
01:30:09,080 --> 01:30:11,400
pre-registered model and assignment of

2142
01:30:11,400 --> 01:30:13,139
client IDs by their

2143
01:30:13,139 --> 01:30:16,260
um as is limiting and the ability for

2144
01:30:16,260 --> 01:30:17,880
the client

2145
01:30:17,880 --> 01:30:21,420
um to effectively have a an identifier

2146
01:30:21,420 --> 01:30:25,080
that I would posit in reference to the

2147
01:30:25,080 --> 01:30:27,239
oauth 2.1 language that might not even

2148
01:30:27,239 --> 01:30:29,639
be assigned by a third party but might

2149
01:30:29,639 --> 01:30:31,620
in fact be self-attisted so I would even

2150
01:30:31,620 --> 01:30:33,900
consider going further in the context of

2151
01:30:33,900 --> 01:30:36,120
something like oh to a point one and and

2152
01:30:36,120 --> 01:30:38,580
considering not just third-party

2153
01:30:38,580 --> 01:30:40,460
assignment but also

2154
01:30:40,460 --> 01:30:43,080
self-assignment like if if a client can

2155
01:30:43,080 --> 01:30:44,940
do such a thing

2156
01:30:44,940 --> 01:30:46,980
um and

2157
01:30:46,980 --> 01:30:49,980
uh I also agree that I don't think when

2158
01:30:49,980 --> 01:30:52,139
a client is having a client ID where the

2159
01:30:52,139 --> 01:30:54,540
metadata can be discoverable itself is

2160
01:30:54,540 --> 01:30:56,520
in fact best described as registration

2161
01:30:56,520 --> 01:30:59,159
it's really an attempt for the client to

2162
01:30:59,159 --> 01:31:01,560
say this is me this is how you can get

2163
01:31:01,560 --> 01:31:04,199
my metadata and you can enforce whatever

2164
01:31:04,199 --> 01:31:07,440
policy you would like to on top of that

2165
01:31:07,440 --> 01:31:09,600
um whether that be you know limiting me

2166
01:31:09,600 --> 01:31:11,960
based on the policy you have as an as

2167
01:31:11,960 --> 01:31:15,540
or proceeding with the transaction based

2168
01:31:15,540 --> 01:31:19,199
on what you know me as the client

2169
01:31:19,199 --> 01:31:21,900
um so I I would

2170
01:31:21,900 --> 01:31:24,300
um would like to get further feedback on

2171
01:31:24,300 --> 01:31:26,940
at least the draft that we have

2172
01:31:26,940 --> 01:31:28,260
um started today which is all with

2173
01:31:28,260 --> 01:31:30,000
client discovery that

2174
01:31:30,000 --> 01:31:32,900
um was published to the list that uh is

2175
01:31:32,900 --> 01:31:35,159
conceptually similar to things like open

2176
01:31:35,159 --> 01:31:37,679
ID Federation and all it really does

2177
01:31:37,679 --> 01:31:39,900
Define is

2178
01:31:39,900 --> 01:31:43,199
um a URI a additional request parameter

2179
01:31:43,199 --> 01:31:45,659
and oauth 2 to signal that that client

2180
01:31:45,659 --> 01:31:51,120
ID is not an as assigned one that should

2181
01:31:51,120 --> 01:31:53,699
link to a client record uh how to get

2182
01:31:53,699 --> 01:31:55,980
that metadata document

2183
01:31:55,980 --> 01:31:58,139
um and some basic validation rules there

2184
01:31:58,139 --> 01:32:00,179
because I also believe with common there

2185
01:32:00,179 --> 01:32:02,820
Aaron made which is

2186
01:32:02,820 --> 01:32:05,460
um the lowest level here shouldn't be

2187
01:32:05,460 --> 01:32:07,560
focused on third-party attestations

2188
01:32:07,560 --> 01:32:10,260
about the client should be probably just

2189
01:32:10,260 --> 01:32:12,000
about how the client has a metadata

2190
01:32:12,000 --> 01:32:13,739
document how it can be resolved how

2191
01:32:13,739 --> 01:32:16,260
those kind of rules working all too then

2192
01:32:16,260 --> 01:32:17,639
further client authentication

2193
01:32:17,639 --> 01:32:19,980
requirements will trust signals and

2194
01:32:19,980 --> 01:32:22,260
establishing who the client is can be

2195
01:32:22,260 --> 01:32:24,900
layered in on top of that mechanism

2196
01:32:24,900 --> 01:32:28,620
thank you thanks Tobias John Let's wrap

2197
01:32:28,620 --> 01:32:31,020
it up okay I'll be short

2198
01:32:31,020 --> 01:32:33,719
um so Christina you're you're lobbying

2199
01:32:33,719 --> 01:32:35,880
has been noted by the open ID Federation

2200
01:32:35,880 --> 01:32:37,080
editors

2201
01:32:37,080 --> 01:32:39,840
um I I will point out that um I think

2202
01:32:39,840 --> 01:32:42,780
there may be a misperception that open

2203
01:32:42,780 --> 01:32:46,320
ID Federation requires some monolithic

2204
01:32:46,320 --> 01:32:48,860
Global routes there's nothing that stops

2205
01:32:48,860 --> 01:32:51,840
uh a a

2206
01:32:51,840 --> 01:32:54,900
client from being its own route I mean

2207
01:32:54,900 --> 01:32:58,020
that's a policy decision so you could

2208
01:32:58,020 --> 01:32:59,760
have an infinite number of roots and

2209
01:32:59,760 --> 01:33:01,920
everybody could

2210
01:33:01,920 --> 01:33:04,199
just be their own route if that was the

2211
01:33:04,199 --> 01:33:06,719
kind of federation you wanted so nothing

2212
01:33:06,719 --> 01:33:10,199
actually stops you from doing that

2213
01:33:10,199 --> 01:33:12,420
right but that's when I would Lobby to

2214
01:33:12,420 --> 01:33:14,280
rename this back because Federation

2215
01:33:14,280 --> 01:33:16,080
consisting of one entity is not

2216
01:33:16,080 --> 01:33:19,280
intuitively Federation

2217
01:33:21,060 --> 01:33:25,139
nothing says I mean

2218
01:33:25,139 --> 01:33:27,739
yes I know you don't like the name but

2219
01:33:27,739 --> 01:33:30,480
many people understand what federation

2220
01:33:30,480 --> 01:33:32,760
is and trying to convince universities

2221
01:33:32,760 --> 01:33:35,760
and governments that

2222
01:33:35,760 --> 01:33:38,040
that it's called something else that's

2223
01:33:38,040 --> 01:33:41,219
probably not a discussion for here but

2224
01:33:41,219 --> 01:33:42,420
um

2225
01:33:42,420 --> 01:33:44,940
there doesn't need there could be an

2226
01:33:44,940 --> 01:33:46,920
infinite number of routes supported by

2227
01:33:46,920 --> 01:33:50,219
Federation okay thank you John

2228
01:33:50,219 --> 01:33:52,440
and we passed the time thank you

2229
01:33:52,440 --> 01:33:54,300
Christina appreciate that the great

2230
01:33:54,300 --> 01:33:55,739
discussion let's continue that

2231
01:33:55,739 --> 01:33:58,199
discussion on the mailing list thank you

2232
01:33:58,199 --> 01:34:00,300
all and see you tomorrow on the side

2233
01:34:00,300 --> 01:34:01,320
meeting

2234
01:34:01,320 --> 01:34:02,580
thanks

2235
01:34:02,580 --> 01:34:05,580
two

2236
01:34:08,060 --> 01:34:10,500
and have a look at the meeting minutes

2237
01:34:10,500 --> 01:34:12,360
some of you

2238
01:34:12,360 --> 01:34:14,760
spoke so fast that it's really difficult

2239
01:34:14,760 --> 01:34:18,239
to to capture everything yes uh Justin

2240
01:34:18,239 --> 01:34:21,199
you are one of them

2241
01:34:31,320 --> 01:34:33,120
oh

2242
01:34:33,120 --> 01:34:35,480
yeah

2243
01:35:02,760 --> 01:35:05,420
thank you

