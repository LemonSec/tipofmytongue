1
00:00:05,299 --> 00:00:08,299
thank you

2
00:00:16,859 --> 00:00:19,740
it's a high last year

3
00:00:19,740 --> 00:00:22,159
yeah

4
00:00:39,739 --> 00:00:42,860
I guess

5
00:00:45,660 --> 00:00:50,360
quite a few people surprising yeah

6
00:00:55,079 --> 00:00:56,699
that's too positive

7
00:00:56,699 --> 00:01:00,300
really yes oh it was fun sometime

8
00:01:00,300 --> 00:01:03,078
Massachusetts

9
00:01:03,960 --> 00:01:05,640
you must

10
00:01:05,640 --> 00:01:08,180
be lost

11
00:01:09,000 --> 00:01:12,619
open source God

12
00:01:19,020 --> 00:01:21,090
hi everyone Seth uh

13
00:01:21,090 --> 00:01:22,439
[Music]

14
00:01:22,439 --> 00:01:24,000
welcome to the second the routing

15
00:01:24,000 --> 00:01:27,420
working group meeting uh please make it

16
00:01:27,420 --> 00:01:29,280
so familiar with not well so your

17
00:01:29,280 --> 00:01:31,080
participation in the ATF

18
00:01:31,080 --> 00:01:33,540
by participating in ITF you adhere to

19
00:01:33,540 --> 00:01:37,040
the policies that are in effect

20
00:01:39,680 --> 00:01:45,380
so the agenda for today we've got a

21
00:01:45,600 --> 00:01:50,579
invite talk so it got best paper award

22
00:01:50,579 --> 00:01:53,640
at sitcom this year we'll talk about uh

23
00:01:53,640 --> 00:01:57,720
Network Define Network simulation and uh

24
00:01:57,720 --> 00:02:00,180
thanks Moon Chen to come and talking to

25
00:02:00,180 --> 00:02:03,060
us our first ATF please support her then

26
00:02:03,060 --> 00:02:06,899
we'll have 15 30 minutes on new routing

27
00:02:06,899 --> 00:02:08,880
architectural proposals

28
00:02:08,880 --> 00:02:11,700
so first of all detection stuff will

29
00:02:11,700 --> 00:02:13,319
also have David

30
00:02:13,319 --> 00:02:16,080
thank you David for being here to talk

31
00:02:16,080 --> 00:02:20,160
about Envy me and what should and should

32
00:02:20,160 --> 00:02:23,720
not be done so we'll have

33
00:02:23,720 --> 00:02:26,160
semi-formal five minute David

34
00:02:26,160 --> 00:02:29,400
presentation our talking topic

35
00:02:29,400 --> 00:02:31,379
and then there are some

36
00:02:31,379 --> 00:02:35,760
spring stuff as usual so uh again the

37
00:02:35,760 --> 00:02:37,319
fact that you see it here doesn't mean

38
00:02:37,319 --> 00:02:40,319
that building routing we offer sometimes

39
00:02:40,319 --> 00:02:43,860
people place to present and then

40
00:02:43,860 --> 00:02:47,040
dispatch them in the right place

41
00:02:47,040 --> 00:02:49,280
foreign

42
00:03:11,760 --> 00:03:14,819
for the first presentation we are very

43
00:03:14,819 --> 00:03:18,239
happy to have the uh author who received

44
00:03:18,239 --> 00:03:21,659
this year's ACMC comes past paper award

45
00:03:21,659 --> 00:03:24,780
to give us a talk

46
00:03:24,780 --> 00:03:27,239
um so a quick introduction

47
00:03:27,239 --> 00:03:30,599
um Dr Huang Shin Chen is a researcher at

48
00:03:30,599 --> 00:03:33,000
Huawei Hong Kong research center before

49
00:03:33,000 --> 00:03:35,640
joining Huawei she received her PhD

50
00:03:35,640 --> 00:03:38,340
degree in computer science and

51
00:03:38,340 --> 00:03:40,140
engineering from the Hong Kong

52
00:03:40,140 --> 00:03:43,140
University of science and technology in

53
00:03:43,140 --> 00:03:46,319
2020 her research interests include

54
00:03:46,319 --> 00:03:48,620
network configuration management

55
00:03:48,620 --> 00:03:51,599
intelligent sensing several physical

56
00:03:51,599 --> 00:03:54,180
security and their intersection with

57
00:03:54,180 --> 00:03:57,360
machine learning so with that that let's

58
00:03:57,360 --> 00:04:00,620
welcome Dr chat

59
00:04:03,239 --> 00:04:06,420
okay uh could you hear me

60
00:04:06,420 --> 00:04:08,340
if I can hear you

61
00:04:08,340 --> 00:04:10,739
okay thank you uh thanks for

62
00:04:10,739 --> 00:04:13,379
introduction and good afternoon this is

63
00:04:13,379 --> 00:04:16,019
a function a researcher from Hawaii Hong

64
00:04:16,019 --> 00:04:18,600
Kong Research Center uh actually this is

65
00:04:18,600 --> 00:04:21,540
my first time to attend iitf conference

66
00:04:21,540 --> 00:04:24,720
I'm so glad and honored to be invited

67
00:04:24,720 --> 00:04:27,240
here to share our recent work on network

68
00:04:27,240 --> 00:04:30,000
configuration management uh this world

69
00:04:30,000 --> 00:04:33,000
is accepted by this year's sitcom and

70
00:04:33,000 --> 00:04:35,580
our work is titled self-defined Network

71
00:04:35,580 --> 00:04:38,520
assimilation breaching The Last Mile

72
00:04:38,520 --> 00:04:40,979
towards Enterprise network configuration

73
00:04:40,979 --> 00:04:43,620
management with nursing

74
00:04:43,620 --> 00:04:46,919
this is the corroborated work with Dr

75
00:04:46,919 --> 00:04:50,699
yukanya dot Legion uh professor hyphoon

76
00:04:50,699 --> 00:04:53,759
professor hongshu daughter Libby Leo

77
00:04:53,759 --> 00:04:56,340
daughter gonjang and Professor Wei Wang

78
00:04:56,340 --> 00:05:00,600
and now let me begin my presentation

79
00:05:00,600 --> 00:05:03,300
and as one of the most important

80
00:05:03,300 --> 00:05:05,460
infrastructure that will support

81
00:05:05,460 --> 00:05:09,120
numerous applications in a perfect world

82
00:05:09,120 --> 00:05:11,460
all network devices should have

83
00:05:11,460 --> 00:05:15,000
homogeneous device models uh which means

84
00:05:15,000 --> 00:05:17,160
that if given the same configuration

85
00:05:17,160 --> 00:05:20,520
they should execute the same action and

86
00:05:20,520 --> 00:05:23,400
in this way the network operator will be

87
00:05:23,400 --> 00:05:25,280
very happy

88
00:05:25,280 --> 00:05:28,259
unfortunately the real Network contains

89
00:05:28,259 --> 00:05:32,340
a heterogeneous device models because

90
00:05:32,340 --> 00:05:35,100
large Enterprise will operate Network

91
00:05:35,100 --> 00:05:39,139
device from multiple vendors

92
00:05:42,740 --> 00:05:45,840
and because they want to avoid relying

93
00:05:45,840 --> 00:05:48,120
on single vendor to maintain sort of

94
00:05:48,120 --> 00:05:50,880
bugging power and risk control and in

95
00:05:50,880 --> 00:05:52,500
the meanwhile they will gradually

96
00:05:52,500 --> 00:05:56,160
introduce a new device model into the

97
00:05:56,160 --> 00:05:59,460
network resulting co-existing of legacy

98
00:05:59,460 --> 00:06:01,460
and related devices

99
00:06:01,460 --> 00:06:05,100
and it is a pen for the network operator

100
00:06:05,100 --> 00:06:08,759
to manage such a multi-vendor network

101
00:06:08,759 --> 00:06:12,600
so uh in common practice we will have a

102
00:06:12,600 --> 00:06:15,660
soft defined controller situated between

103
00:06:15,660 --> 00:06:18,660
the app layer Network functions and the

104
00:06:18,660 --> 00:06:21,240
heterogeneous network devices

105
00:06:21,240 --> 00:06:24,240
it's desired that the network the

106
00:06:24,240 --> 00:06:26,520
controller can present a logically

107
00:06:26,520 --> 00:06:29,000
centralized control plan to config

108
00:06:29,000 --> 00:06:31,860
multivendor devices as if they are the

109
00:06:31,860 --> 00:06:32,580
same

110
00:06:32,580 --> 00:06:35,340
uh does the network operator will Define

111
00:06:35,340 --> 00:06:40,740
a unified model at the controller it's

112
00:06:40,740 --> 00:06:44,400
often stored as three hierarchy nodes of

113
00:06:44,400 --> 00:06:46,380
the tree denotes some configuration

114
00:06:46,380 --> 00:06:49,500
attributes such as IP address of an

115
00:06:49,500 --> 00:06:53,100
interface named of a SEO policies and

116
00:06:53,100 --> 00:06:54,199
Etc

117
00:06:54,199 --> 00:06:56,880
subtrees will generally denote a group

118
00:06:56,880 --> 00:06:59,819
of relevant attributes for example some

119
00:06:59,819 --> 00:07:03,300
attribute for specific Network protocol

120
00:07:03,300 --> 00:07:06,660
and the network operator will construct

121
00:07:06,660 --> 00:07:09,960
this unified model and annotate some

122
00:07:09,960 --> 00:07:13,139
brief context for attributes and then

123
00:07:13,139 --> 00:07:15,539
after that they will go to understand

124
00:07:15,539 --> 00:07:19,380
the menus the vendor menus and file

125
00:07:19,380 --> 00:07:22,199
correct commands and

126
00:07:22,199 --> 00:07:25,139
draft and validate the template and

127
00:07:25,139 --> 00:07:27,300
provide the mapping rule from the

128
00:07:27,300 --> 00:07:30,180
parameter of a specific vendor command

129
00:07:30,180 --> 00:07:33,180
to the attributes in the unified device

130
00:07:33,180 --> 00:07:36,900
models and then they should repeat the

131
00:07:36,900 --> 00:07:39,000
same process again for a new device

132
00:07:39,000 --> 00:07:41,419
model

133
00:07:42,000 --> 00:07:44,759
it would be a very tedious and

134
00:07:44,759 --> 00:07:47,900
error-prone process

135
00:07:48,800 --> 00:07:52,620
so we found that this is the process of

136
00:07:52,620 --> 00:07:55,440
introducing heterogeneous Network device

137
00:07:55,440 --> 00:07:57,960
into a century controlled existing

138
00:07:57,960 --> 00:08:01,080
self-defined Network and we Define it as

139
00:08:01,080 --> 00:08:03,800
a soft defined Network or simulation

140
00:08:03,800 --> 00:08:08,340
sna in short and we identify that the

141
00:08:08,340 --> 00:08:10,800
key problem here is the mismatch between

142
00:08:10,800 --> 00:08:14,120
two configuration models uh the

143
00:08:14,120 --> 00:08:16,620
heterogeneous device model and the

144
00:08:16,620 --> 00:08:20,039
unified model in the controller and we

145
00:08:20,039 --> 00:08:23,460
found that the current SMA process will

146
00:08:23,460 --> 00:08:25,979
require significant human efforts to

147
00:08:25,979 --> 00:08:28,020
bridge them

148
00:08:28,020 --> 00:08:31,399
and in this work we seek a more

149
00:08:31,399 --> 00:08:33,839
automatic and efficient way to

150
00:08:33,839 --> 00:08:36,000
accelerate it and liberate Network

151
00:08:36,000 --> 00:08:40,399
operator from most tedious tasks

152
00:08:43,140 --> 00:08:45,779
and our basic insight to tackle this

153
00:08:45,779 --> 00:08:48,600
program is to design a system to

154
00:08:48,600 --> 00:08:50,279
understand the menus as Network

155
00:08:50,279 --> 00:08:54,000
operators and with especially automatic

156
00:08:54,000 --> 00:08:57,959
system could first extract a validated

157
00:08:57,959 --> 00:09:01,680
device model from its menu and then

158
00:09:01,680 --> 00:09:03,959
infer mapping between vendor device

159
00:09:03,959 --> 00:09:07,019
model and the unified model based on

160
00:09:07,019 --> 00:09:10,080
thematic information from the menus

161
00:09:10,080 --> 00:09:13,500
however realizing this idea in practice

162
00:09:13,500 --> 00:09:17,720
will encounter three challenges

163
00:09:17,940 --> 00:09:20,700
the first is the menu formal

164
00:09:20,700 --> 00:09:23,360
heterogeneity

165
00:09:23,880 --> 00:09:26,640
a device menu are usually the most

166
00:09:26,640 --> 00:09:28,800
trustworthy sources to obtain

167
00:09:28,800 --> 00:09:32,040
configuration model however there is no

168
00:09:32,040 --> 00:09:34,860
standardization for menus they are

169
00:09:34,860 --> 00:09:37,260
organized and format uniquely for

170
00:09:37,260 --> 00:09:40,380
different vendors let's make it hard to

171
00:09:40,380 --> 00:09:45,019
enable automatic menu comprehension

172
00:09:48,019 --> 00:09:50,820
the Second Challenge is the error and

173
00:09:50,820 --> 00:09:54,060
ambiguity in the menus after all all

174
00:09:54,060 --> 00:09:56,940
menus are human written documents it's

175
00:09:56,940 --> 00:09:59,660
inevitable to have mistakes and typos

176
00:09:59,660 --> 00:10:03,180
and is also impractical to audit menu

177
00:10:03,180 --> 00:10:06,000
from the first page to the last and

178
00:10:06,000 --> 00:10:08,640
actually some problems are hard to catch

179
00:10:08,640 --> 00:10:10,200
by human eyes

180
00:10:10,200 --> 00:10:12,180
so we are handling this issue

181
00:10:12,180 --> 00:10:15,240
automatically invest is very critical to

182
00:10:15,240 --> 00:10:17,880
extract a reliable device configuration

183
00:10:17,880 --> 00:10:20,660
models

184
00:10:22,920 --> 00:10:25,500
and the third challenge is to bridge the

185
00:10:25,500 --> 00:10:27,779
heterogeneity between configuration

186
00:10:27,779 --> 00:10:30,480
models actually the configuration

187
00:10:30,480 --> 00:10:33,180
language is designed by each vendor to

188
00:10:33,180 --> 00:10:36,959
be visibly different with each other

189
00:10:36,959 --> 00:10:39,600
for the same concept or intent different

190
00:10:39,600 --> 00:10:42,600
vendors could use different wordings or

191
00:10:42,600 --> 00:10:45,660
syntax but due to the sheer number of

192
00:10:45,660 --> 00:10:49,140
CRI commands and parameters handcrafting

193
00:10:49,140 --> 00:10:51,680
mapping is very tedious and error-prone

194
00:10:51,680 --> 00:10:54,839
automating this process will require a

195
00:10:54,839 --> 00:10:57,720
powerful semantic comprehension model to

196
00:10:57,720 --> 00:10:59,760
understand and match similar network

197
00:10:59,760 --> 00:11:03,380
configuration context

198
00:11:05,420 --> 00:11:09,839
uh therefore we propose nothing uh we

199
00:11:09,839 --> 00:11:11,940
design a partial framework to address

200
00:11:11,940 --> 00:11:14,820
the first challenge uh it mainly

201
00:11:14,820 --> 00:11:16,860
features a vendor independent device

202
00:11:16,860 --> 00:11:20,040
model Corpus format and also the test

203
00:11:20,040 --> 00:11:22,079
driven development procedure for

204
00:11:22,079 --> 00:11:24,420
Reliable passing

205
00:11:24,420 --> 00:11:27,000
and we then design validator to adjust

206
00:11:27,000 --> 00:11:29,579
the Second Challenge

207
00:11:29,579 --> 00:11:32,579
we conduct validation on three levels

208
00:11:32,579 --> 00:11:35,640
the command level the intercommand level

209
00:11:35,640 --> 00:11:38,279
and snippy level and we finally

210
00:11:38,279 --> 00:11:42,839
identified more than 230 errors in the

211
00:11:42,839 --> 00:11:46,019
menus of mainstream vendors

212
00:11:46,019 --> 00:11:47,519
thank you

213
00:11:47,519 --> 00:11:49,680
and we further designed the method to

214
00:11:49,680 --> 00:11:51,360
adjust the third challenge

215
00:11:51,360 --> 00:11:53,480
we change the network

216
00:11:53,480 --> 00:11:56,880
semantic similarity inference model for

217
00:11:56,880 --> 00:11:59,640
network configuration domain to Output

218
00:11:59,640 --> 00:12:01,680
the mapping between parameters of

219
00:12:01,680 --> 00:12:05,100
different models we also release a

220
00:12:05,100 --> 00:12:09,540
validate executory data set of past menu

221
00:12:09,540 --> 00:12:13,519
copers for future research

222
00:12:17,160 --> 00:12:20,880
and this is the overview of Nasim uh in

223
00:12:20,880 --> 00:12:23,160
the following let us take a closer look

224
00:12:23,160 --> 00:12:27,140
at three key components

225
00:12:28,079 --> 00:12:32,420
and the first component is parser

226
00:12:35,880 --> 00:12:38,339
the key inside of the parcel is from

227
00:12:38,339 --> 00:12:40,500
investigating the major attribute of

228
00:12:40,500 --> 00:12:43,579
multiple menus

229
00:12:48,959 --> 00:12:52,560
uh despite direct Styles or menu serve

230
00:12:52,560 --> 00:12:55,320
the same purpose showing us how to

231
00:12:55,320 --> 00:12:58,459
configure the devices

232
00:13:09,139 --> 00:13:13,019
uh sorry enjoy I could not see the

233
00:13:13,019 --> 00:13:15,500
screen now

234
00:13:20,880 --> 00:13:22,399
you see the screen

235
00:13:22,399 --> 00:13:24,300
I can

236
00:13:24,300 --> 00:13:27,540
flip the slides but oh yeah see it's

237
00:13:27,540 --> 00:13:30,180
very slow response

238
00:13:30,180 --> 00:13:34,040
oh let me let me begin here

239
00:13:34,040 --> 00:13:36,959
the key instead of the password actually

240
00:13:36,959 --> 00:13:40,620
is this despite diverse styles of menus

241
00:13:40,620 --> 00:13:43,339
all menus should serve the stem purpose

242
00:13:43,339 --> 00:13:46,940
showing us how to config the devices

243
00:13:46,940 --> 00:13:49,740
they should cover the CR commands

244
00:13:49,740 --> 00:13:52,560
supported by the devices and the

245
00:13:52,560 --> 00:13:55,079
function descriptions the working views

246
00:13:55,079 --> 00:13:57,660
and the parameter description and some

247
00:13:57,660 --> 00:14:00,980
representative examples

248
00:14:01,040 --> 00:14:05,060
therefore we design a unified format

249
00:14:05,060 --> 00:14:07,860
additionally with keys and value type

250
00:14:07,860 --> 00:14:12,560
constraints as shown in this table

251
00:14:15,839 --> 00:14:17,100
right now

252
00:14:17,100 --> 00:14:20,100
uh

253
00:14:31,040 --> 00:14:34,740
uh sorry engine and could you hear the

254
00:14:34,740 --> 00:14:37,380
screen now uh but because I cannot see

255
00:14:37,380 --> 00:14:40,260
this screen I cannot determine you don't

256
00:14:40,260 --> 00:14:41,880
see the slides

257
00:14:41,880 --> 00:14:45,720
yeah yeah yeah uh it's very slow uh

258
00:14:45,720 --> 00:14:49,019
response uh I cannot tell you you can

259
00:14:49,019 --> 00:14:52,579
see which size

260
00:14:54,000 --> 00:14:57,000
okay

261
00:14:57,660 --> 00:15:01,320
you want me to try to present the slides

262
00:15:01,320 --> 00:15:05,579
uh but I think maybe it's it's better to

263
00:15:05,579 --> 00:15:08,760
let me control but just the the spawns

264
00:15:08,760 --> 00:15:10,920
are response this mouse here is very

265
00:15:10,920 --> 00:15:14,540
it's a little bit delayed

266
00:15:15,720 --> 00:15:20,120
okay let me try it okay

267
00:15:24,500 --> 00:15:28,800
uh oh just let me continue sorry and uh

268
00:15:28,800 --> 00:15:31,440
and so we designed a unified format here

269
00:15:31,440 --> 00:15:33,480
additionally with keys and value type

270
00:15:33,480 --> 00:15:36,240
constraints as showing the these tables

271
00:15:36,240 --> 00:15:38,940
and for mainstream vendor we build a

272
00:15:38,940 --> 00:15:41,180
password to cast this menu into this

273
00:15:41,180 --> 00:15:46,220
vendor independent format So to avoid

274
00:15:46,220 --> 00:15:50,459
this here we will show the sample uh

275
00:15:50,459 --> 00:15:53,339
Corpus generated by our passing

276
00:15:53,339 --> 00:15:55,620
framework and actually to avoid the

277
00:15:55,620 --> 00:15:58,560
potential bugs in the developed process

278
00:15:58,560 --> 00:16:00,600
we will adopt some test driven

279
00:16:00,600 --> 00:16:03,420
methodology to ensure the quality so

280
00:16:03,420 --> 00:16:07,019
here I will skip this part please refers

281
00:16:07,019 --> 00:16:09,839
to our paper for more technical details

282
00:16:09,839 --> 00:16:12,540
so in this way we actually can extract

283
00:16:12,540 --> 00:16:15,660
all essential informations from the

284
00:16:15,660 --> 00:16:17,940
menus and meanwhile normalize diverse

285
00:16:17,940 --> 00:16:20,820
menu style into a unified format to

286
00:16:20,820 --> 00:16:23,459
facilitate the following processing

287
00:16:23,459 --> 00:16:27,360
so the second part is the validator so

288
00:16:27,360 --> 00:16:29,480
uh

289
00:16:29,480 --> 00:16:32,519
here the key inside is that we want to

290
00:16:32,519 --> 00:16:35,880
extract a reliable device model but the

291
00:16:35,880 --> 00:16:38,699
key inside here is that the menus are

292
00:16:38,699 --> 00:16:41,639
not fully reliable so we identify two

293
00:16:41,639 --> 00:16:45,060
main type of Arrow on ambiguities and

294
00:16:45,060 --> 00:16:47,459
the first type is a synthetic

295
00:16:47,459 --> 00:16:50,880
ambiguities for example this is the CI

296
00:16:50,880 --> 00:16:54,300
command from a vendor menus and it has

297
00:16:54,300 --> 00:16:56,399
unpaired left bracket before the remote

298
00:16:56,399 --> 00:16:58,860
As symbol and actually there are

299
00:16:58,860 --> 00:17:00,959
multiple potential valid facing options

300
00:17:00,959 --> 00:17:03,540
we can remove the left brain key or

301
00:17:03,540 --> 00:17:05,579
adding a red blending after the remote

302
00:17:05,579 --> 00:17:08,699
as simple or adding a right bracket at

303
00:17:08,699 --> 00:17:11,220
the end of the call command and choosing

304
00:17:11,220 --> 00:17:13,679
which require judgment from the experts

305
00:17:13,679 --> 00:17:15,720
and the second is the hierarchy

306
00:17:15,720 --> 00:17:18,599
ambiguities for example these two views

307
00:17:18,599 --> 00:17:21,540
in a vendor menu share the same example

308
00:17:21,540 --> 00:17:25,079
snippy so that we cannot tell which

309
00:17:25,079 --> 00:17:28,319
where there is msdp command enable the

310
00:17:28,319 --> 00:17:31,580
first view of the second or both

311
00:17:31,580 --> 00:17:35,240
so quick question

312
00:17:35,520 --> 00:17:38,640
AC lindum so you're saying that you just

313
00:17:38,640 --> 00:17:42,419
take a PDF goes into the parser and it

314
00:17:42,419 --> 00:17:44,460
comes out with this Json that you showed

315
00:17:44,460 --> 00:17:46,080
the example of is that is that what the

316
00:17:46,080 --> 00:17:47,460
input is

317
00:17:47,460 --> 00:17:49,940
it's like yeah

318
00:17:49,940 --> 00:17:55,880
HTML document we use HTML documents

319
00:17:56,419 --> 00:18:00,299
the input the initial input is the

320
00:18:00,299 --> 00:18:02,880
manual and HTML format that you took off

321
00:18:02,880 --> 00:18:04,860
the web is that what what that image is

322
00:18:04,860 --> 00:18:08,460
yeah okay yeah okay thanks

323
00:18:08,460 --> 00:18:13,919
so and our continued uh so despite all

324
00:18:13,919 --> 00:18:16,080
the potential errors ambiguity I

325
00:18:16,080 --> 00:18:18,900
mentioned uh previous we still want to

326
00:18:18,900 --> 00:18:21,539
derive the reliable device model from

327
00:18:21,539 --> 00:18:25,080
menus so here we design a multi-level

328
00:18:25,080 --> 00:18:27,660
validation schemes and the first Parts

329
00:18:27,660 --> 00:18:30,660
actually work on the command level we

330
00:18:30,660 --> 00:18:33,299
want to fully audit the syntax of CR

331
00:18:33,299 --> 00:18:36,960
commands so we just find out the command

332
00:18:36,960 --> 00:18:40,200
convention in menu Preamble and express

333
00:18:40,200 --> 00:18:42,539
them into the equivalent backwards

334
00:18:42,539 --> 00:18:45,900
normal form and in this way we can use

335
00:18:45,900 --> 00:18:49,580
the password generation tool to generate

336
00:18:49,580 --> 00:18:53,340
the to generate the

337
00:18:53,340 --> 00:18:56,400
a seal command syntax puzzle and call

338
00:18:56,400 --> 00:18:58,980
them to identify all synthetic arrows

339
00:18:58,980 --> 00:19:01,380
and then the expert can only the

340
00:19:01,380 --> 00:19:03,360
incorrect one in more targeted and

341
00:19:03,360 --> 00:19:06,139
efficient way

342
00:19:06,299 --> 00:19:09,559
and the second part to work on the

343
00:19:09,559 --> 00:19:12,860
intercommand level

344
00:19:13,700 --> 00:19:16,740
in order to derive this tree base

345
00:19:16,740 --> 00:19:20,280
hierarchy which is implicit in menus we

346
00:19:20,280 --> 00:19:23,700
actually exploit the example Snippets

347
00:19:23,700 --> 00:19:27,000
uh in the menus uh it actually is

348
00:19:27,000 --> 00:19:29,280
example generally demonstrate an

349
00:19:29,280 --> 00:19:31,860
instance of the current command and its

350
00:19:31,860 --> 00:19:34,980
Parent Command so we will construct one

351
00:19:34,980 --> 00:19:37,980
model to get their relationship on CRI

352
00:19:37,980 --> 00:19:40,140
template level

353
00:19:40,140 --> 00:19:43,980
and here we we use to construct a graph

354
00:19:43,980 --> 00:19:46,620
from this template energy with the CR

355
00:19:46,620 --> 00:19:48,840
instance and so I will skip the

356
00:19:48,840 --> 00:19:52,500
algorithm details so in this example we

357
00:19:52,500 --> 00:19:55,260
can infer that the CR command template

358
00:19:55,260 --> 00:19:58,440
bgps number actually enters the bgp view

359
00:19:58,440 --> 00:20:00,900
so the other commands with the same

360
00:20:00,900 --> 00:20:03,059
parallel view can also reuse this

361
00:20:03,059 --> 00:20:07,880
derivation and in order to handle the

362
00:20:07,880 --> 00:20:10,860
hierarchy ambiguities we will quantify

363
00:20:10,860 --> 00:20:14,100
the certainty of each derivation and so

364
00:20:14,100 --> 00:20:16,500
that to facilitate the expert audit

365
00:20:16,500 --> 00:20:18,740
later

366
00:20:19,080 --> 00:20:21,840
and the third part of the design to work

367
00:20:21,840 --> 00:20:25,140
on the snippy levels here we will

368
00:20:25,140 --> 00:20:27,900
leverage the configuration configuration

369
00:20:27,900 --> 00:20:30,140
file collected from the running devices

370
00:20:30,140 --> 00:20:32,340
because they are collected from the

371
00:20:32,340 --> 00:20:33,960
running devices they have the

372
00:20:33,960 --> 00:20:38,000
correctness current here to uh to to to

373
00:20:38,000 --> 00:20:43,160
be used for validations so for each CRI

374
00:20:43,160 --> 00:20:48,740
instance single configuration file we

375
00:20:48,740 --> 00:20:54,960
uh oh for each configuration uh lies in

376
00:20:54,960 --> 00:20:59,160
the configuration files uh we can derive

377
00:20:59,160 --> 00:21:02,160
it uh we can check whether they are

378
00:21:02,160 --> 00:21:04,559
matched CLI templates from the correct

379
00:21:04,559 --> 00:21:07,500
parent trial relationship on our derived

380
00:21:07,500 --> 00:21:10,080
hierarchy and we can record all the

381
00:21:10,080 --> 00:21:12,299
image one for the expert to audit later

382
00:21:12,299 --> 00:21:15,419
to correct our derived model

383
00:21:15,419 --> 00:21:18,960
so let's take a quick look at the

384
00:21:18,960 --> 00:21:22,320
results of our Auto vendor device model

385
00:21:22,320 --> 00:21:25,799
construction phase and our password plus

386
00:21:25,799 --> 00:21:28,679
validator successfully constructs refine

387
00:21:28,679 --> 00:21:30,919
and validated vendor device model from

388
00:21:30,919 --> 00:21:35,820
four menus of popular vendors and we

389
00:21:35,820 --> 00:21:39,000
also identify more than 200 synthetic

390
00:21:39,000 --> 00:21:41,880
arrow and ambiguity in the menus so

391
00:21:41,880 --> 00:21:46,860
please refers to our GitHub report for

392
00:21:46,860 --> 00:21:48,900
more details

393
00:21:48,900 --> 00:21:52,919
and the third designs component is the

394
00:21:52,919 --> 00:21:55,700
mapper

395
00:21:56,059 --> 00:22:00,860
by applying the existing

396
00:22:00,960 --> 00:22:04,860
Let Me Wait I cannot see my screen

397
00:22:04,860 --> 00:22:06,659
uh this

398
00:22:06,659 --> 00:22:09,240
the side component is

399
00:22:09,240 --> 00:22:11,600
the

400
00:22:12,299 --> 00:22:16,020
existing tedious handcraft mappings we

401
00:22:16,020 --> 00:22:18,860
found that the key of the sna is to pair

402
00:22:18,860 --> 00:22:23,640
somatic similar configuration items so

403
00:22:23,640 --> 00:22:27,240
since uh the path validator has obtained

404
00:22:27,240 --> 00:22:29,820
the device model with abundant somatic

405
00:22:29,820 --> 00:22:33,419
information from the menus and and those

406
00:22:33,419 --> 00:22:37,500
parameters from the unify model is also

407
00:22:37,500 --> 00:22:39,380
enriched with contact information

408
00:22:39,380 --> 00:22:42,419
assigned by the network or operating

409
00:22:42,419 --> 00:22:46,860
experts so we want to design the mapper

410
00:22:46,860 --> 00:22:49,020
that can understand the contextual

411
00:22:49,020 --> 00:22:50,240
information

412
00:22:50,240 --> 00:22:53,280
by applying recent advance in natural

413
00:22:53,280 --> 00:22:56,700
language processing so our resultant

414
00:22:56,700 --> 00:23:00,299
model is the our resultant semantic

415
00:23:00,299 --> 00:23:03,179
comprehension model is collaborate so

416
00:23:03,179 --> 00:23:06,600
let's take a look at how it works so for

417
00:23:06,600 --> 00:23:11,880
a uh for a given uh configuration item

418
00:23:11,880 --> 00:23:14,100
actually we want the model to find out

419
00:23:14,100 --> 00:23:16,740
its thematic similar ones in the counter

420
00:23:16,740 --> 00:23:20,700
bottom part models so we will run the

421
00:23:20,700 --> 00:23:23,120
following process for each pair of them

422
00:23:23,120 --> 00:23:26,580
first we will uh

423
00:23:26,580 --> 00:23:29,340
we will locate and extract their

424
00:23:29,340 --> 00:23:32,159
contacts information actually depend on

425
00:23:32,159 --> 00:23:34,620
amount of available information of each

426
00:23:34,620 --> 00:23:37,980
model we can we can select different

427
00:23:37,980 --> 00:23:40,440
number of contact sequence for the

428
00:23:40,440 --> 00:23:43,320
vendor device model we found that the

429
00:23:43,320 --> 00:23:45,600
parameter names and the description and

430
00:23:45,600 --> 00:23:47,640
its corresponding CR commands and

431
00:23:47,640 --> 00:23:49,500
function description and the working

432
00:23:49,500 --> 00:23:52,080
views are very valuable for mapping

433
00:23:52,080 --> 00:23:54,539
tasks and for the unified device model

434
00:23:54,539 --> 00:23:56,760
we just directly retrieve is this

435
00:23:56,760 --> 00:23:58,980
description information of each

436
00:23:58,980 --> 00:24:03,780
parameter and secondly We Will We Will

437
00:24:03,780 --> 00:24:05,120
leverage the

438
00:24:05,120 --> 00:24:07,799
most popular natural language processing

439
00:24:07,799 --> 00:24:10,200
pre-train model and we Channel domain

440
00:24:10,200 --> 00:24:12,240
adaptive version to encode the

441
00:24:12,240 --> 00:24:15,000
contention information into the vectors

442
00:24:15,000 --> 00:24:17,940
so for one pair of parameters the encode

443
00:24:17,940 --> 00:24:20,880
encoder will produce a pair of contacts

444
00:24:20,880 --> 00:24:25,380
uh embedding letters and thirdly we will

445
00:24:25,380 --> 00:24:27,860
evaluate

446
00:24:27,860 --> 00:24:31,799
the similarity of embedding better using

447
00:24:31,799 --> 00:24:35,820
cosine similarity and to Quantified the

448
00:24:35,820 --> 00:24:38,940
semantic mechanisms so actually we will

449
00:24:38,940 --> 00:24:43,080
repeat this process to multiple times to

450
00:24:43,080 --> 00:24:45,020
get a ranked list

451
00:24:45,020 --> 00:24:49,919
about multiple parameter pairs

452
00:24:49,919 --> 00:24:52,440
and so therefore for a configuration

453
00:24:52,440 --> 00:24:54,960
parameter our model Network can

454
00:24:54,960 --> 00:24:57,720
recommend top case similar mappings

455
00:24:57,720 --> 00:25:02,159
so the power of the network comes from

456
00:25:02,159 --> 00:25:04,740
two sources and the first is the

457
00:25:04,740 --> 00:25:07,919
pre-channel model expert this model is

458
00:25:07,919 --> 00:25:10,200
preacher on a large natural language

459
00:25:10,200 --> 00:25:13,200
inference data set with the same time

460
00:25:13,200 --> 00:25:16,320
matching objectives so it's capable of

461
00:25:16,320 --> 00:25:18,900
encoding two semantic similar test

462
00:25:18,900 --> 00:25:21,900
sequence into two embedding vectors that

463
00:25:21,900 --> 00:25:23,840
are closed in the embedding space

464
00:25:23,840 --> 00:25:26,400
however this preacher model may have

465
00:25:26,400 --> 00:25:29,220
limited performance in a domain that is

466
00:25:29,220 --> 00:25:32,039
never seen in the pre-trained Corpus so

467
00:25:32,039 --> 00:25:35,100
we will introduce the Second Source a

468
00:25:35,100 --> 00:25:37,440
domain copers of network configuration

469
00:25:37,440 --> 00:25:41,179
so to generate it we will leverage a few

470
00:25:41,179 --> 00:25:46,080
a few map parameter pairs labeled by the

471
00:25:46,080 --> 00:25:48,659
experts but these are only positive

472
00:25:48,659 --> 00:25:50,880
pairs so we do random sampling to

473
00:25:50,880 --> 00:25:53,159
generate negative Pairs and combine them

474
00:25:53,159 --> 00:25:57,480
to focus domain data and we then use

475
00:25:57,480 --> 00:26:00,779
this data to do the domain adaptation

476
00:26:00,779 --> 00:26:03,659
fine tuning to get the network model

477
00:26:03,659 --> 00:26:07,039
so uh

478
00:26:10,020 --> 00:26:13,080
now let's have a look at the result of a

479
00:26:13,080 --> 00:26:15,960
mapping performance of the mapper

480
00:26:15,960 --> 00:26:20,460
actually map is recommended to generate

481
00:26:20,460 --> 00:26:21,539
the

482
00:26:21,539 --> 00:26:25,140
most likely mappings so here we adopt

483
00:26:25,140 --> 00:26:27,120
the record at top k for evaluation

484
00:26:27,120 --> 00:26:30,960
metrics which denotes the percentage of

485
00:26:30,960 --> 00:26:33,000
test case where the correct matching

486
00:26:33,000 --> 00:26:35,400
parameter are in top care recommendation

487
00:26:35,400 --> 00:26:38,820
by mapper so higher recall as small okay

488
00:26:38,820 --> 00:26:41,159
implies that the mapper is more helpful

489
00:26:41,159 --> 00:26:44,700
to assist Network operators we use cross

490
00:26:44,700 --> 00:26:47,340
vendor tuning and validation to evaluate

491
00:26:47,340 --> 00:26:50,220
the effectives of fine tuning and as

492
00:26:50,220 --> 00:26:53,100
shown in this figure fighter Network out

493
00:26:53,100 --> 00:26:56,159
for the other models because we adapt

494
00:26:56,159 --> 00:26:58,200
this model to the domain of network

495
00:26:58,200 --> 00:27:01,860
configuration and regarding the save of

496
00:27:01,860 --> 00:27:05,520
human effort we can take an example for

497
00:27:05,520 --> 00:27:07,919
the Huawei case we can find correct

498
00:27:07,919 --> 00:27:10,260
matching within top 10 recommendation

499
00:27:10,260 --> 00:27:13,580
with 89 accuracy

500
00:27:13,580 --> 00:27:17,279
so that's if mapper is allowed to

501
00:27:17,279 --> 00:27:19,320
provide 10 suggestions the network

502
00:27:19,320 --> 00:27:21,419
operator only need to reverse the man

503
00:27:21,419 --> 00:27:24,059
menu eleven percent of the time during

504
00:27:24,059 --> 00:27:27,299
the mapping phase resulting acceleration

505
00:27:27,299 --> 00:27:30,260
by nine times

506
00:27:31,320 --> 00:27:35,220
so who conclude we list some key

507
00:27:35,220 --> 00:27:38,460
takeaways first the soft Define Network

508
00:27:38,460 --> 00:27:40,799
assimilation is very essential for

509
00:27:40,799 --> 00:27:43,559
mapping multi-vendor Network for

510
00:27:43,559 --> 00:27:45,720
managing multi-vendor Network and our

511
00:27:45,720 --> 00:27:48,900
solution Nasim C2 transform the original

512
00:27:48,900 --> 00:27:51,480
TDS and error from process to

513
00:27:51,480 --> 00:27:54,179
automatically an efficient manner and

514
00:27:54,179 --> 00:27:56,400
configuration menus as human written

515
00:27:56,400 --> 00:27:58,400
documents are not fully reliable

516
00:27:58,400 --> 00:28:00,840
including inevitable errors and

517
00:28:00,840 --> 00:28:03,419
ambiguities so nursing feature a

518
00:28:03,419 --> 00:28:06,659
universe password framework a routerless

519
00:28:06,659 --> 00:28:09,120
validator and a mapper using the domain

520
00:28:09,120 --> 00:28:11,279
adaptable model to produce

521
00:28:11,279 --> 00:28:13,400
recommendation mapping between

522
00:28:13,400 --> 00:28:16,919
heterogeneous configuration models and

523
00:28:16,919 --> 00:28:19,919
we also release a validate and executed

524
00:28:19,919 --> 00:28:23,820
data set for future research and and

525
00:28:23,820 --> 00:28:27,659
this is all of my today's presentations

526
00:28:27,659 --> 00:28:30,059
thanks for all your listening and any

527
00:28:30,059 --> 00:28:32,960
question is welcome

528
00:28:34,860 --> 00:28:36,360
thanks so much for the presentation

529
00:28:36,360 --> 00:28:38,220
we've got four minutes for questions

530
00:28:38,220 --> 00:28:41,220
answers

531
00:28:49,200 --> 00:28:51,299
I've got one comment as someone who's

532
00:28:51,299 --> 00:28:53,340
been working on

533
00:28:53,340 --> 00:28:56,220
for a very long time so you're trying to

534
00:28:56,220 --> 00:28:58,679
do Brute Force attack on inconsistent

535
00:28:58,679 --> 00:29:02,400
configuration with inconsistent cli's

536
00:29:02,400 --> 00:29:04,679
across different vendors it's a noble

537
00:29:04,679 --> 00:29:06,140
task really

538
00:29:06,140 --> 00:29:09,720
CLI is really wrong obstruction to work

539
00:29:09,720 --> 00:29:12,059
with and you know we wish it would have

540
00:29:12,059 --> 00:29:13,740
been consistent within single vendor

541
00:29:13,740 --> 00:29:15,720
single release it's not

542
00:29:15,720 --> 00:29:17,700
there's usually some product manager who

543
00:29:17,700 --> 00:29:19,679
would put some

544
00:29:19,679 --> 00:29:22,039
something in it and hope it's working

545
00:29:22,039 --> 00:29:25,620
configuration has errors to any degree

546
00:29:25,620 --> 00:29:26,520
so

547
00:29:26,520 --> 00:29:28,919
I mean running it through neural Nets

548
00:29:28,919 --> 00:29:30,360
and trying to figure out what's right

549
00:29:30,360 --> 00:29:33,179
and reinforce it it's a noble task but

550
00:29:33,179 --> 00:29:35,539
trying to use other

551
00:29:35,539 --> 00:29:37,080
abstractions

552
00:29:37,080 --> 00:29:41,520
look at young it's not complete but

553
00:29:41,520 --> 00:29:44,940
it gives you a very healthy base to at

554
00:29:44,940 --> 00:29:47,580
least get consistent Behavior

555
00:29:47,580 --> 00:29:51,240
doing the CLI again it's really Noble

556
00:29:51,240 --> 00:29:54,120
just but being involved in this for 20

557
00:29:54,120 --> 00:29:58,459
years I don't think it's even possible

558
00:29:58,700 --> 00:30:02,580
yeah and actually if you mentioned young

559
00:30:02,580 --> 00:30:05,100
I think Young is a very evident Trend

560
00:30:05,100 --> 00:30:08,820
and because um I think we at least what

561
00:30:08,820 --> 00:30:11,340
we focus on the command line interface

562
00:30:11,340 --> 00:30:14,340
it's a very entry-level way to configure

563
00:30:14,340 --> 00:30:17,520
network devices we we choose it as the

564
00:30:17,520 --> 00:30:19,640
research Target because it's almost

565
00:30:19,640 --> 00:30:22,799
supported by all network devices both

566
00:30:22,799 --> 00:30:25,320
the Legacy and new but we think that

567
00:30:25,320 --> 00:30:28,740
yeah young is a evident trend is a more

568
00:30:28,740 --> 00:30:32,059
advanced way to config network devices

569
00:30:32,059 --> 00:30:33,980
and

570
00:30:33,980 --> 00:30:39,120
a young young but young still don't do

571
00:30:39,120 --> 00:30:41,940
not fully adjust the difficulty of

572
00:30:41,940 --> 00:30:43,980
managing multi-vendor Network I think

573
00:30:43,980 --> 00:30:47,460
because uh although young is a standard

574
00:30:47,460 --> 00:30:49,740
but each vendor seems to have their

575
00:30:49,740 --> 00:30:53,340
vendor specific young so actually we are

576
00:30:53,340 --> 00:30:55,399
also currently working on some topics

577
00:30:55,399 --> 00:30:58,320
related to somehow

578
00:30:58,320 --> 00:31:01,260
uh try to address the heterogeneous

579
00:31:01,260 --> 00:31:03,899
between the different young models

580
00:31:03,899 --> 00:31:07,260
between different vendors yeah but I

581
00:31:07,260 --> 00:31:11,820
think yeah yeah I agreed uh that this is

582
00:31:11,820 --> 00:31:16,620
a this field still need much efforts

583
00:31:16,620 --> 00:31:22,158
uh to to address this uh heterogeneity

584
00:31:22,980 --> 00:31:25,620
thank you so much for representation

585
00:31:25,620 --> 00:31:28,580
yeah thank you

586
00:31:48,659 --> 00:31:51,200
from

587
00:32:19,940 --> 00:32:22,860
somehow I lost for lost network

588
00:32:22,860 --> 00:32:25,500
connection from my laptop

589
00:32:25,500 --> 00:32:30,140
so it's just very second

590
00:32:31,799 --> 00:32:33,840
it's coming up on the front

591
00:32:33,840 --> 00:32:36,120
loading

592
00:32:36,120 --> 00:32:40,100
you might want his slope yeah

593
00:32:46,860 --> 00:32:49,820
so show me

594
00:32:53,700 --> 00:32:56,779
for the first time

595
00:33:02,520 --> 00:33:05,960
let's try tradition again

596
00:33:08,240 --> 00:33:10,399
on the

597
00:33:10,399 --> 00:33:14,178
right way to do it

598
00:33:17,460 --> 00:33:20,880
yeah Network right now too but it's been

599
00:33:20,880 --> 00:33:23,700
spinning yeah you lost completely

600
00:33:23,700 --> 00:33:26,120
effective

601
00:33:27,179 --> 00:33:30,440
the strength of the city

602
00:33:51,000 --> 00:33:53,419
should not be here

603
00:33:53,419 --> 00:33:57,679
try to see other networks yeah

604
00:34:04,700 --> 00:34:08,000
let me see

605
00:34:09,839 --> 00:34:13,040
something neglected

606
00:34:20,159 --> 00:34:23,300
I Research Foundation

607
00:34:24,000 --> 00:34:27,000
foreign

608
00:34:52,739 --> 00:34:54,179
someone

609
00:34:54,179 --> 00:34:58,380
Gold Line uh lending me on laptop you

610
00:34:58,380 --> 00:34:59,280
see

611
00:34:59,280 --> 00:35:01,320
we'll take a letter

612
00:35:01,320 --> 00:35:05,960
in confiscation but yeah this um

613
00:35:36,780 --> 00:35:38,960
thank you

614
00:35:53,940 --> 00:35:57,260
it's really slow

615
00:36:10,880 --> 00:36:15,020
whoever is watching Netflix please

616
00:36:26,280 --> 00:36:29,280
connect

617
00:36:29,520 --> 00:36:31,560
connected

618
00:36:31,560 --> 00:36:34,460
oh no it is

619
00:36:45,780 --> 00:36:47,960
foreign

620
00:37:00,900 --> 00:37:04,260
sorry for the technical difficulties I

621
00:37:04,260 --> 00:37:06,119
couldn't connect to the ITF Network

622
00:37:06,119 --> 00:37:08,160
somehow

623
00:37:08,160 --> 00:37:11,579
I tried a couple anyway go ahead

624
00:37:11,579 --> 00:37:13,800
are you controlling or shall I try to

625
00:37:13,800 --> 00:37:15,920
control

626
00:37:23,940 --> 00:37:27,260
you should be able to control it

627
00:37:32,220 --> 00:37:35,779
okay it doesn't tell me anything though

628
00:37:41,460 --> 00:37:44,160
okay

629
00:37:44,160 --> 00:37:47,160
mm-hmm

630
00:37:53,940 --> 00:37:56,760
okay so let's hope this works

631
00:37:56,760 --> 00:37:58,440
um this is about routing on service

632
00:37:58,440 --> 00:38:00,480
addresses is a newly submitted draft

633
00:38:00,480 --> 00:38:02,940
together with Louise from telefonica

634
00:38:02,940 --> 00:38:05,760
who's somewhere else over there I think

635
00:38:05,760 --> 00:38:06,540
um

636
00:38:06,540 --> 00:38:08,280
I mean it does work

637
00:38:08,280 --> 00:38:10,380
um the goal of the draft that but as the

638
00:38:10,380 --> 00:38:13,740
name suggests is to propose an approach

639
00:38:13,740 --> 00:38:15,480
to transition from locator-based

640
00:38:15,480 --> 00:38:17,820
addressing to an addressing scheme

641
00:38:17,820 --> 00:38:20,760
where the atlas represents Services

642
00:38:20,760 --> 00:38:23,280
being invoked for computation processes

643
00:38:23,280 --> 00:38:25,859
and their generated information requests

644
00:38:25,859 --> 00:38:28,020
and responses

645
00:38:28,020 --> 00:38:31,079
we have um there's a structure that we

646
00:38:31,079 --> 00:38:33,540
we've done so far I realized after the

647
00:38:33,540 --> 00:38:34,920
submission I forgot the last two

648
00:38:34,920 --> 00:38:36,720
sections and they're already updated

649
00:38:36,720 --> 00:38:38,700
they were still empty

650
00:38:38,700 --> 00:38:39,839
um so we go through a number of use

651
00:38:39,839 --> 00:38:41,820
cases I will very briefly go through

652
00:38:41,820 --> 00:38:43,320
them uh formulate a number of

653
00:38:43,320 --> 00:38:45,540
requirements and then outline the

654
00:38:45,540 --> 00:38:47,160
initial design that we've been working

655
00:38:47,160 --> 00:38:48,720
with

656
00:38:48,720 --> 00:38:50,700
um

657
00:38:50,700 --> 00:38:52,800
we also provide the terminology and I

658
00:38:52,800 --> 00:38:54,240
want to highlight a couple of things I'm

659
00:38:54,240 --> 00:38:55,200
not going through all of them I'm not

660
00:38:55,200 --> 00:38:56,940
going to read them but it gives you an

661
00:38:56,940 --> 00:38:58,740
idea what we are describing as a service

662
00:38:58,740 --> 00:39:00,599
we have the notion of the service

663
00:39:00,599 --> 00:39:03,540
instance which is a realization of the

664
00:39:03,540 --> 00:39:06,839
service and possibly uh several Network

665
00:39:06,839 --> 00:39:09,180
locations across a network

666
00:39:09,180 --> 00:39:10,980
um we we well the definition of a

667
00:39:10,980 --> 00:39:13,619
service address that we're using

668
00:39:13,619 --> 00:39:15,599
um was also important in the in the

669
00:39:15,599 --> 00:39:17,160
description is the notion of the service

670
00:39:17,160 --> 00:39:19,619
transaction which is a sequence of an

671
00:39:19,619 --> 00:39:21,300
initial request which we call the

672
00:39:21,300 --> 00:39:23,339
service request and the so-called

673
00:39:23,339 --> 00:39:25,619
Affinity requests which are subsequent

674
00:39:25,619 --> 00:39:27,660
requests being maintained because of

675
00:39:27,660 --> 00:39:31,260
ephemeral state so the idea is that if I

676
00:39:31,260 --> 00:39:34,500
if I have been directed to a certain

677
00:39:34,500 --> 00:39:36,240
Network location to a certain service

678
00:39:36,240 --> 00:39:38,640
instance I'm sticking with that instance

679
00:39:38,640 --> 00:39:40,440
because of femoral State once my

680
00:39:40,440 --> 00:39:43,200
transaction is over I can be assigned to

681
00:39:43,200 --> 00:39:45,000
another service instance so that's

682
00:39:45,000 --> 00:39:47,460
important in our model of service

683
00:39:47,460 --> 00:39:49,980
interactions to to incorporate in the

684
00:39:49,980 --> 00:39:51,420
design we have different architectural

685
00:39:51,420 --> 00:39:54,000
roles of the Rosa provider the domain

686
00:39:54,000 --> 00:39:55,859
the endpoint that are being explained in

687
00:39:55,859 --> 00:39:57,540
the actual text but we put this into the

688
00:39:57,540 --> 00:40:01,200
terminology section up front

689
00:40:01,200 --> 00:40:03,319
um

690
00:40:03,359 --> 00:40:05,880
as I mentioned we we uh outlined a

691
00:40:05,880 --> 00:40:07,380
number of use case and we're working on

692
00:40:07,380 --> 00:40:09,720
elaborating and adding a few more

693
00:40:09,720 --> 00:40:11,940
uh section 3.1 talks about CD and

694
00:40:11,940 --> 00:40:13,920
interconnect and distribution so here

695
00:40:13,920 --> 00:40:15,480
the main key aspects that we're

696
00:40:15,480 --> 00:40:16,859
highlighting is the multi-site

697
00:40:16,859 --> 00:40:18,780
replication you have more than one CDN

698
00:40:18,780 --> 00:40:21,540
most most possibly you have a dynamic

699
00:40:21,540 --> 00:40:23,760
decision making as to where to assign a

700
00:40:23,760 --> 00:40:27,180
client to to which of the sites and we

701
00:40:27,180 --> 00:40:29,780
also have the ability to actually do

702
00:40:29,780 --> 00:40:32,760
multi-site retrieval for Content um to

703
00:40:32,760 --> 00:40:34,800
reduce latent civilians we presented

704
00:40:34,800 --> 00:40:36,420
yesterday some work in a site meeting

705
00:40:36,420 --> 00:40:38,760
where we showed the impact on the

706
00:40:38,760 --> 00:40:40,980
latency variants if you do such thing so

707
00:40:40,980 --> 00:40:43,020
instead of sticking to one side for the

708
00:40:43,020 --> 00:40:44,940
duration of a let's say a long-term

709
00:40:44,940 --> 00:40:47,280
video you're actually pulling content

710
00:40:47,280 --> 00:40:48,599
from all the different sites and that

711
00:40:48,599 --> 00:40:50,520
reduces your variance

712
00:40:50,520 --> 00:40:52,619
um quite nicely

713
00:40:52,619 --> 00:40:54,060
um Second Use case subscribers

714
00:40:54,060 --> 00:40:56,339
distribute user Appliance for mobile and

715
00:40:56,339 --> 00:40:57,960
fixed access

716
00:40:57,960 --> 00:40:59,579
um so here the idea is to take the

717
00:40:59,579 --> 00:41:01,380
so-called user blend functions which is

718
00:41:01,380 --> 00:41:05,400
the the data plane in in in a in a 45g

719
00:41:05,400 --> 00:41:08,220
system and distribute them uh the the

720
00:41:08,220 --> 00:41:11,280
the selection of the UPF that handles

721
00:41:11,280 --> 00:41:13,020
your request may be service and

722
00:41:13,020 --> 00:41:15,599
therefore policy specific uh and and

723
00:41:15,599 --> 00:41:17,940
also some of the use cases there uh are

724
00:41:17,940 --> 00:41:19,440
specifically aiming at Edge compute

725
00:41:19,440 --> 00:41:21,660
capabilities which you've probably heard

726
00:41:21,660 --> 00:41:25,320
enough in in in in 5G type of scenarios

727
00:41:25,320 --> 00:41:27,000
the third one is multi-homed and

728
00:41:27,000 --> 00:41:29,460
multi-domain services so services that

729
00:41:29,460 --> 00:41:30,960
are deployed across administrative

730
00:41:30,960 --> 00:41:32,339
domains so for instance for Enterprise

731
00:41:32,339 --> 00:41:34,740
scenarios and again in multi-side but in

732
00:41:34,740 --> 00:41:37,099
this case multi-site Enterprise

733
00:41:37,099 --> 00:41:39,839
facilities uh multi-homing is very often

734
00:41:39,839 --> 00:41:41,520
used both at the client and its server

735
00:41:41,520 --> 00:41:42,480
side

736
00:41:42,480 --> 00:41:45,300
and the the consideration here is to

737
00:41:45,300 --> 00:41:47,280
pick the best

738
00:41:47,280 --> 00:41:49,140
um service instance where the definition

739
00:41:49,140 --> 00:41:50,880
of best may be very very service

740
00:41:50,880 --> 00:41:53,040
specific that's hence it's written in

741
00:41:53,040 --> 00:41:55,380
quotes so the question really about

742
00:41:55,380 --> 00:41:56,579
trying to answer based on those use

743
00:41:56,579 --> 00:41:58,260
cases we're working on adding more use

744
00:41:58,260 --> 00:41:59,640
cases to the document in the next

745
00:41:59,640 --> 00:42:00,660
revision

746
00:42:00,660 --> 00:42:02,579
um that's meant to come out after this

747
00:42:02,579 --> 00:42:05,060
ITF as to how efficiently steer traffic

748
00:42:05,060 --> 00:42:07,920
across these but with possibly

749
00:42:07,920 --> 00:42:10,200
significant distributed networks

750
00:42:10,200 --> 00:42:12,839
um and enabling also a dynamicity in

751
00:42:12,839 --> 00:42:14,880
selecting the best service instance so

752
00:42:14,880 --> 00:42:16,140
not doing this for relatively long

753
00:42:16,140 --> 00:42:18,000
periods but doing this maybe for

754
00:42:18,000 --> 00:42:20,520
relatively short service transactions as

755
00:42:20,520 --> 00:42:21,839
well

756
00:42:21,839 --> 00:42:24,420
the main idea that we are outlining in

757
00:42:24,420 --> 00:42:26,400
the draft as the name suggests maybe

758
00:42:26,400 --> 00:42:27,780
routing in service addresses is to

759
00:42:27,780 --> 00:42:30,119
replace the typical DNS resolution plus

760
00:42:30,119 --> 00:42:31,280
IP

761
00:42:31,280 --> 00:42:34,079
data transfer meaning the off-pass

762
00:42:34,079 --> 00:42:36,780
discovery of the service name onto an IP

763
00:42:36,780 --> 00:42:39,540
locator with an on-pass discovery

764
00:42:39,540 --> 00:42:41,700
uh to a suitable service instance

765
00:42:41,700 --> 00:42:43,920
location so for that and you'll see this

766
00:42:43,920 --> 00:42:46,560
later in a bit more detail we sent an

767
00:42:46,560 --> 00:42:49,619
initial IP packet it's directed and

768
00:42:49,619 --> 00:42:50,940
again this is an air quotes even though

769
00:42:50,940 --> 00:42:53,099
we're using the standard IP semantics we

770
00:42:53,099 --> 00:42:55,380
are putting the service oh

771
00:42:55,380 --> 00:42:57,900
no don't know what happened sorry for

772
00:42:57,900 --> 00:42:59,220
that um they're putting the actual

773
00:42:59,220 --> 00:43:00,839
service actress in the extension header

774
00:43:00,839 --> 00:43:03,240
uh and it's directed to a special to a

775
00:43:03,240 --> 00:43:05,099
shim overlay which you've seen in the in

776
00:43:05,099 --> 00:43:07,319
the next slide and well and the shim

777
00:43:07,319 --> 00:43:10,140
overlay routes the packet on path uh

778
00:43:10,140 --> 00:43:12,359
based on the service name not based on

779
00:43:12,359 --> 00:43:14,400
the locator right

780
00:43:14,400 --> 00:43:16,619
um it uses mapping which is a bit

781
00:43:16,619 --> 00:43:19,440
similar in in role but not in in

782
00:43:19,440 --> 00:43:22,740
implementation uh to the DNS records it

783
00:43:22,740 --> 00:43:24,720
uses uh these mappings between the

784
00:43:24,720 --> 00:43:26,460
service name and the the possible

785
00:43:26,460 --> 00:43:28,579
service instance locations to do that

786
00:43:28,579 --> 00:43:30,780
once it arrives at the server's instance

787
00:43:30,780 --> 00:43:33,359
location it responds back the initial

788
00:43:33,359 --> 00:43:36,060
packet to the client which then uses for

789
00:43:36,060 --> 00:43:37,500
the subsequent so-called Affinity

790
00:43:37,500 --> 00:43:40,339
request the direct IPv6

791
00:43:40,339 --> 00:43:42,900
address of the service instance so only

792
00:43:42,900 --> 00:43:44,700
the initial packets one and two go

793
00:43:44,700 --> 00:43:46,560
through the shim overlay and after that

794
00:43:46,560 --> 00:43:49,500
you're shooting down the IPv6 part

795
00:43:49,500 --> 00:43:50,940
um I know you do that as long as the

796
00:43:50,940 --> 00:43:52,319
service Direction lasts if you finish

797
00:43:52,319 --> 00:43:54,180
the service transaction you go back to

798
00:43:54,180 --> 00:43:55,680
step number one you initiate a new

799
00:43:55,680 --> 00:43:58,560
service uh Discovery and you may

800
00:43:58,560 --> 00:44:00,300
potentially be assigned to a different

801
00:44:00,300 --> 00:44:01,619
instance

802
00:44:01,619 --> 00:44:03,780
um right if you have stateless Services

803
00:44:03,780 --> 00:44:06,180
you may only ask a good step one and two

804
00:44:06,180 --> 00:44:07,859
so you never send an affinity request

805
00:44:07,859 --> 00:44:09,780
because you have exactly one request in

806
00:44:09,780 --> 00:44:12,480
your Rover what so the key point is that

807
00:44:12,480 --> 00:44:15,480
the in band Disco recovery is performed

808
00:44:15,480 --> 00:44:17,220
at the IP packet level and not at the

809
00:44:17,220 --> 00:44:18,300
application Level that's the

810
00:44:18,300 --> 00:44:21,180
characteristic of the design

811
00:44:21,180 --> 00:44:24,900
so how do we do this we this shows uh

812
00:44:24,900 --> 00:44:26,760
the gray part in the in the figure

813
00:44:26,760 --> 00:44:28,200
there's the slightly nicer figure than

814
00:44:28,200 --> 00:44:29,099
the draft

815
00:44:29,099 --> 00:44:31,800
um is a so-called Rosa domain which is

816
00:44:31,800 --> 00:44:34,619
identified in the terminology which may

817
00:44:34,619 --> 00:44:36,900
connect via a traditional locator based

818
00:44:36,900 --> 00:44:39,180
IP to other Rosa domains on for instance

819
00:44:39,180 --> 00:44:40,800
the right hand side which have other

820
00:44:40,800 --> 00:44:42,839
services deployed

821
00:44:42,839 --> 00:44:45,240
um the the rectangular boxes are the

822
00:44:45,240 --> 00:44:47,579
so-called service address routers while

823
00:44:47,579 --> 00:44:49,560
the round boxes are traditional IB

824
00:44:49,560 --> 00:44:51,540
Physics readers so you have the normal

825
00:44:51,540 --> 00:44:53,460
ib6 tools as well as the actual saw

826
00:44:53,460 --> 00:44:55,980
Roots in there it's located that we call

827
00:44:55,980 --> 00:44:58,680
this layer 3.5 it uses Rosa specific

828
00:44:58,680 --> 00:45:01,980
IPv6 destination extension headers it's

829
00:45:01,980 --> 00:45:03,720
deployed either in the network as you

830
00:45:03,720 --> 00:45:06,060
can see here or like Star phones so five

831
00:45:06,060 --> 00:45:08,160
for instance are increased nodes into

832
00:45:08,160 --> 00:45:10,200
Edge side so they may also be deployed

833
00:45:10,200 --> 00:45:13,140
at the edge site it's non-path shim

834
00:45:13,140 --> 00:45:14,640
overlay routing for the initial service

835
00:45:14,640 --> 00:45:16,619
request and it doesn't do the dedicated

836
00:45:16,619 --> 00:45:19,319
off path in Direction like in the

837
00:45:19,319 --> 00:45:22,200
various methods like DNS gsrb Etc

838
00:45:22,200 --> 00:45:24,780
it is also described in the draft the

839
00:45:24,780 --> 00:45:26,819
traffic steering uses server-specific

840
00:45:26,819 --> 00:45:29,160
policies you can either do an increased

841
00:45:29,160 --> 00:45:30,839
base based selection and I'll show later

842
00:45:30,839 --> 00:45:32,099
how this works and how this is

843
00:45:32,099 --> 00:45:33,540
differentiated

844
00:45:33,540 --> 00:45:35,339
um which selects the service instant

845
00:45:35,339 --> 00:45:37,440
location at the increase directly or you

846
00:45:37,440 --> 00:45:39,720
use intersile routing meaning you're

847
00:45:39,720 --> 00:45:41,940
rooting the request between the

848
00:45:41,940 --> 00:45:44,940
individual SAS until it ends ends up at

849
00:45:44,940 --> 00:45:46,980
an increase to a data center for

850
00:45:46,980 --> 00:45:48,720
instance as I mentioned before the

851
00:45:48,720 --> 00:45:50,160
instance Affinity is done over native

852
00:45:50,160 --> 00:45:53,460
IPv6 so the the the the the overlay is

853
00:45:53,460 --> 00:45:55,619
not involved in that one anymore

854
00:45:55,619 --> 00:45:57,720
and routing table sizes are limited

855
00:45:57,720 --> 00:46:01,140
given that we introduced a Rosa domain

856
00:46:01,140 --> 00:46:02,940
and a Rosa provider the routing table

857
00:46:02,940 --> 00:46:04,500
size is limited to the contractual

858
00:46:04,500 --> 00:46:06,780
relations you're having right only the

859
00:46:06,780 --> 00:46:08,160
services that are being announced to the

860
00:46:08,160 --> 00:46:11,280
Rosa provider are in the Rosa routing

861
00:46:11,280 --> 00:46:14,700
table you're not hosting if you see a

862
00:46:14,700 --> 00:46:16,980
certain a certain Affinity here to

863
00:46:16,980 --> 00:46:19,020
information something networking the

864
00:46:19,020 --> 00:46:21,000
routing table does not include all the

865
00:46:21,000 --> 00:46:23,099
services available in the Internet it's

866
00:46:23,099 --> 00:46:25,020
only the Rosa announced service in the

867
00:46:25,020 --> 00:46:26,339
routing table that keeps the routing

868
00:46:26,339 --> 00:46:29,099
tables as large as you want right

869
00:46:29,099 --> 00:46:31,680
there's no client awareness needed so we

870
00:46:31,680 --> 00:46:34,740
describe in the draft how a rose enabled

871
00:46:34,740 --> 00:46:37,980
client can issue requests to a Rosa

872
00:46:37,980 --> 00:46:39,960
service but also to a non-roller service

873
00:46:39,960 --> 00:46:41,460
this is handled by the so-called service

874
00:46:41,460 --> 00:46:44,640
address Gateway which then gateways to

875
00:46:44,640 --> 00:46:48,720
the locator-based IP internet hence you

876
00:46:48,720 --> 00:46:51,000
can access anything really it's weird

877
00:46:51,000 --> 00:46:53,819
and now my control went away

878
00:46:53,819 --> 00:46:55,619
um no

879
00:46:55,619 --> 00:46:58,560
this was the right one sorry

880
00:46:58,560 --> 00:47:00,900
um we have three different messages so

881
00:47:00,900 --> 00:47:02,339
we have a service announcement which is

882
00:47:02,339 --> 00:47:04,440
which is used by a servers instance to

883
00:47:04,440 --> 00:47:06,960
announce its own IP address in relation

884
00:47:06,960 --> 00:47:10,319
to a service address with certain

885
00:47:10,319 --> 00:47:11,819
constraints the constraints are being

886
00:47:11,819 --> 00:47:13,619
used for the traffic steering

887
00:47:13,619 --> 00:47:15,740
I mean after the initial service request

888
00:47:15,740 --> 00:47:19,680
which is is being sent to the inquist

889
00:47:19,680 --> 00:47:21,480
saw to your to the client specific

890
00:47:21,480 --> 00:47:24,359
interests are which hosts the client IP

891
00:47:24,359 --> 00:47:26,460
the increase IP as well as the service

892
00:47:26,460 --> 00:47:28,380
ID the reason they are you'll see this

893
00:47:28,380 --> 00:47:29,880
in a moment in the message you can start

894
00:47:29,880 --> 00:47:31,859
there in the extension header is to

895
00:47:31,859 --> 00:47:34,319
avoid client-specific state in the

896
00:47:34,319 --> 00:47:36,540
increase so we we want to avoid that we

897
00:47:36,540 --> 00:47:38,160
you need to carry any particular

898
00:47:38,160 --> 00:47:40,200
client-specific state which is why we're

899
00:47:40,200 --> 00:47:41,700
carrying this in the extension header

900
00:47:41,700 --> 00:47:43,319
the service response has the same

901
00:47:43,319 --> 00:47:45,780
entries but it attaches the or it it

902
00:47:45,780 --> 00:47:48,180
amends its own instance IP in the

903
00:47:48,180 --> 00:47:50,040
response so that's how the client learns

904
00:47:50,040 --> 00:47:51,839
where it needs to go for the following

905
00:47:51,839 --> 00:47:53,700
requests

906
00:47:53,700 --> 00:47:55,619
um the the positioning and the

907
00:47:55,619 --> 00:47:57,119
implementation we're currently working

908
00:47:57,119 --> 00:47:59,040
on which we haven't brought to this ITF

909
00:47:59,040 --> 00:48:00,720
because we're not entirely finished

910
00:48:00,720 --> 00:48:02,099
um but we plan on bringing this to the

911
00:48:02,099 --> 00:48:04,200
next one it sits under the transport

912
00:48:04,200 --> 00:48:07,920
protocol right it sits on top of IPv6 um

913
00:48:07,920 --> 00:48:09,660
and it uses ipf6 as well for the

914
00:48:09,660 --> 00:48:12,119
affinities uh and it's it's realized

915
00:48:12,119 --> 00:48:13,619
under the transport

916
00:48:13,619 --> 00:48:17,819
hence the layer 3.5 as we call this the

917
00:48:17,819 --> 00:48:19,500
message flow is shown in this graph

918
00:48:19,500 --> 00:48:21,540
again looks a bit nicer than the ASCII

919
00:48:21,540 --> 00:48:23,339
version in the draft

920
00:48:23,339 --> 00:48:25,140
the client sends an initial service

921
00:48:25,140 --> 00:48:27,839
request and the the first brackets are

922
00:48:27,839 --> 00:48:29,400
the source destination address the

923
00:48:29,400 --> 00:48:30,599
second brackets are the extension

924
00:48:30,599 --> 00:48:32,700
headers as an explanation of the syntax

925
00:48:32,700 --> 00:48:35,099
that we're using it's it sends to the

926
00:48:35,099 --> 00:48:36,420
increaser

927
00:48:36,420 --> 00:48:38,220
um a service request which carries its

928
00:48:38,220 --> 00:48:41,160
own IP the SAR IP and the service ID the

929
00:48:41,160 --> 00:48:42,900
service ID is being used to determine

930
00:48:42,900 --> 00:48:44,640
the next top and I come in a second

931
00:48:44,640 --> 00:48:45,839
there are two different methods that you

932
00:48:45,839 --> 00:48:49,319
can use which then sends the uh uh uh

933
00:48:49,319 --> 00:48:51,660
the service request eventually to the

934
00:48:51,660 --> 00:48:53,400
service instance where derives which

935
00:48:53,400 --> 00:48:55,740
generates the response according to

936
00:48:55,740 --> 00:48:58,200
whatever the semantic is sent generates

937
00:48:58,200 --> 00:49:00,780
the best the service response back which

938
00:49:00,780 --> 00:49:02,700
includes its own IP address which is

939
00:49:02,700 --> 00:49:04,859
then used in the following request in

940
00:49:04,859 --> 00:49:07,140
What's called the Affinity request by

941
00:49:07,140 --> 00:49:09,180
the client directly so choose it

942
00:49:09,180 --> 00:49:12,180
straight to the um to The Chosen service

943
00:49:12,180 --> 00:49:13,740
instance once the transaction is over

944
00:49:13,740 --> 00:49:15,960
which is the dotted line

945
00:49:15,960 --> 00:49:17,880
um you restart the whole process so in

946
00:49:17,880 --> 00:49:20,280
the next iteration the service request

947
00:49:20,280 --> 00:49:22,440
may be sent to a different instance that

948
00:49:22,440 --> 00:49:25,140
depends on your policy see right so the

949
00:49:25,140 --> 00:49:26,339
key point is really that the service

950
00:49:26,339 --> 00:49:28,079
only as a service requests are being

951
00:49:28,079 --> 00:49:30,300
sent by the by the by the shim overlay

952
00:49:30,300 --> 00:49:32,099
the infinitive requests follow the

953
00:49:32,099 --> 00:49:34,020
direct IPv6 part

954
00:49:34,020 --> 00:49:36,540
my Implement is at the moment through a

955
00:49:36,540 --> 00:49:38,339
socket interface

956
00:49:38,339 --> 00:49:40,140
um which specifies a different address

957
00:49:40,140 --> 00:49:42,060
family rather than IP address you use

958
00:49:42,060 --> 00:49:43,740
the address address family for a service

959
00:49:43,740 --> 00:49:46,619
address and the entire mapping of the IP

960
00:49:46,619 --> 00:49:49,020
address is being hidden from the client

961
00:49:49,020 --> 00:49:51,060
you're sending to a socket and if you

962
00:49:51,060 --> 00:49:53,339
keep sending it automatically switches

963
00:49:53,339 --> 00:49:56,160
to the IPv6 address in the subsequent

964
00:49:56,160 --> 00:49:59,099
requests the forwarding engine I show

965
00:49:59,099 --> 00:50:01,560
this here the difference is we describe

966
00:50:01,560 --> 00:50:03,420
two modes in in the draft one is what's

967
00:50:03,420 --> 00:50:05,160
called request scheduling where the

968
00:50:05,160 --> 00:50:08,400
increase directly decides what is the

969
00:50:08,400 --> 00:50:10,380
destination of the request that allows

970
00:50:10,380 --> 00:50:13,200
you to do runtime scheduling or you may

971
00:50:13,200 --> 00:50:15,119
use for instance multi-optimality

972
00:50:15,119 --> 00:50:16,859
routing this is was actually meant to be

973
00:50:16,859 --> 00:50:18,180
a link if you click on the actual

974
00:50:18,180 --> 00:50:20,099
underline text you find one of the

975
00:50:20,099 --> 00:50:21,960
really nice papers you can use for

976
00:50:21,960 --> 00:50:23,579
multi-optimality routing and service

977
00:50:23,579 --> 00:50:25,680
specific environments published in

978
00:50:25,680 --> 00:50:27,960
sitcom in 2020

979
00:50:27,960 --> 00:50:30,180
and which means in this case you

980
00:50:30,180 --> 00:50:32,339
actually forward it to a Next Top saw

981
00:50:32,339 --> 00:50:34,200
instead of forwarding it straight to the

982
00:50:34,200 --> 00:50:36,839
instance the the difference comes really

983
00:50:36,839 --> 00:50:38,400
in the forwarding information base if

984
00:50:38,400 --> 00:50:40,020
you look at service.org and this is only

985
00:50:40,020 --> 00:50:42,060
written as a URL not to suggest it is a

986
00:50:42,060 --> 00:50:44,579
URL if you read the draft you'll realize

987
00:50:44,579 --> 00:50:47,520
they are binary encoded names but just

988
00:50:47,520 --> 00:50:50,579
for for readability I I wrote the actual

989
00:50:50,579 --> 00:50:53,640
domain name there service.org has three

990
00:50:53,640 --> 00:50:55,260
Next Tops and if you read in the next

991
00:50:55,260 --> 00:50:57,180
hub information based they Point

992
00:50:57,180 --> 00:50:59,760
directly to an instance right while the

993
00:50:59,760 --> 00:51:01,859
other ones actually point to the next

994
00:51:01,859 --> 00:51:03,780
top and that indicates that for

995
00:51:03,780 --> 00:51:06,559
service.org you have a a secondary

996
00:51:06,559 --> 00:51:08,940
forwarding step that needs to select one

997
00:51:08,940 --> 00:51:10,920
of the three possible choices and this

998
00:51:10,920 --> 00:51:12,480
is the runtime scheduling that I

999
00:51:12,480 --> 00:51:14,460
mentioned before you also can use a

1000
00:51:14,460 --> 00:51:16,740
special wild card this is the last NV

1001
00:51:16,740 --> 00:51:18,780
and the phone information basis which is

1002
00:51:18,780 --> 00:51:19,980
a white card which means if you're

1003
00:51:19,980 --> 00:51:21,900
asking for anything that the Rosa

1004
00:51:21,900 --> 00:51:24,900
provider doesn't know it is by default

1005
00:51:24,900 --> 00:51:26,940
forwarded to the spa to the service

1006
00:51:26,940 --> 00:51:29,160
address Gateway which interconnects

1007
00:51:29,160 --> 00:51:31,619
either to a different Row the domain or

1008
00:51:31,619 --> 00:51:34,680
to the public internet that's how they

1009
00:51:34,680 --> 00:51:37,920
um client unawareness is being realized

1010
00:51:37,920 --> 00:51:39,480
so what are the plans moving forward

1011
00:51:39,480 --> 00:51:40,859
with this job this is the first version

1012
00:51:40,859 --> 00:51:43,440
I'm quite detailed we worked a bit on it

1013
00:51:43,440 --> 00:51:45,300
but we want to provide more details on

1014
00:51:45,300 --> 00:51:46,859
the design realization of this larger

1015
00:51:46,859 --> 00:51:49,020
section five and incorporate any

1016
00:51:49,020 --> 00:51:51,900
feedback that we that we received so far

1017
00:51:51,900 --> 00:51:53,819
proper header descriptions there's all

1018
00:51:53,819 --> 00:51:56,280
still a little bit schematic

1019
00:51:56,280 --> 00:51:59,040
um Jens suggested to support to to add

1020
00:51:59,040 --> 00:52:00,420
support for multi-home service device

1021
00:52:00,420 --> 00:52:02,280
instances we had that already but we

1022
00:52:02,280 --> 00:52:03,240
didn't want to have it in the first

1023
00:52:03,240 --> 00:52:05,700
draft so four for different naming

1024
00:52:05,700 --> 00:52:08,819
schemes we're reusing the naming scheme

1025
00:52:08,819 --> 00:52:10,500
that's used in the Isn Community which

1026
00:52:10,500 --> 00:52:12,059
allows you to actually use naming

1027
00:52:12,059 --> 00:52:14,280
schemes that are not tied necessarily

1028
00:52:14,280 --> 00:52:18,359
into phones into domain name name spaces

1029
00:52:18,359 --> 00:52:19,859
um we can do this so that allows you to

1030
00:52:19,859 --> 00:52:21,480
also do other service scenarios where

1031
00:52:21,480 --> 00:52:23,579
you not necessarily use the classical

1032
00:52:23,579 --> 00:52:25,440
domain name system

1033
00:52:25,440 --> 00:52:27,720
more use case insights I already spoke

1034
00:52:27,720 --> 00:52:29,040
of different use cases involvement and

1035
00:52:29,040 --> 00:52:30,660
implementation insights we've

1036
00:52:30,660 --> 00:52:33,119
implemented this through ebpf

1037
00:52:33,119 --> 00:52:35,940
um in a standard Linux router and we

1038
00:52:35,940 --> 00:52:38,460
will uh combat more performance results

1039
00:52:38,460 --> 00:52:40,500
in the next ITF we didn't manage to do

1040
00:52:40,500 --> 00:52:43,319
this in time for the first draft um but

1041
00:52:43,319 --> 00:52:47,280
there is more and we also plan a demo

1042
00:52:47,280 --> 00:52:48,059
um

1043
00:52:48,059 --> 00:52:50,280
thanks what we see feedback on is is the

1044
00:52:50,280 --> 00:52:52,020
problem space the motivation are we

1045
00:52:52,020 --> 00:52:53,160
approaching this all from the different

1046
00:52:53,160 --> 00:52:55,140
and from the wrong angle

1047
00:52:55,140 --> 00:52:57,059
um comments on the architectural

1048
00:52:57,059 --> 00:52:59,579
approach on the realization anybody

1049
00:52:59,579 --> 00:53:03,119
who's interested to contribute or fiddle

1050
00:53:03,119 --> 00:53:05,760
with a draft please send us an email are

1051
00:53:05,760 --> 00:53:07,260
very happy to do this and the way

1052
00:53:07,260 --> 00:53:09,300
forward thank you sorry for the few

1053
00:53:09,300 --> 00:53:12,140
seconds more Daniel

1054
00:53:13,619 --> 00:53:16,460
please

1055
00:53:17,819 --> 00:53:20,040
can you hear me

1056
00:53:20,040 --> 00:53:25,020
yeah uh from ZTE um trust me I'm

1057
00:53:25,020 --> 00:53:27,480
um I appreciate it for the wonderful

1058
00:53:27,480 --> 00:53:30,900
presentation of dark and uh I have two

1059
00:53:30,900 --> 00:53:34,200
comments and the first one is about the

1060
00:53:34,200 --> 00:53:37,260
service address or um I I can understand

1061
00:53:37,260 --> 00:53:41,339
as the uh service identification

1062
00:53:41,339 --> 00:53:43,260
um my primary understand is that the

1063
00:53:43,260 --> 00:53:45,900
right here from your terminology the

1064
00:53:45,900 --> 00:53:47,640
service address or service

1065
00:53:47,640 --> 00:53:50,160
identification is globally you leaked

1066
00:53:50,160 --> 00:53:52,980
across terminal and network and the

1067
00:53:52,980 --> 00:53:55,980
cloud side where the service resides so

1068
00:53:55,980 --> 00:53:58,680
um here's here's the quite

1069
00:53:58,680 --> 00:54:01,740
um important issue well

1070
00:54:01,740 --> 00:54:05,339
um the service address or or in any

1071
00:54:05,339 --> 00:54:08,099
coordinate the service identification

1072
00:54:08,099 --> 00:54:12,980
um has has to be managed and published

1073
00:54:12,980 --> 00:54:18,720
by a a quite higher entity which could

1074
00:54:18,720 --> 00:54:22,079
coordinate and management the manage and

1075
00:54:22,079 --> 00:54:25,500
all of the entities from terminal

1076
00:54:25,500 --> 00:54:29,040
Network and and Cloud site so

1077
00:54:29,040 --> 00:54:30,900
um it's not simply about

1078
00:54:30,900 --> 00:54:32,059
um

1079
00:54:32,059 --> 00:54:35,339
from my personal understanding the

1080
00:54:35,339 --> 00:54:38,900
network Lord could not alone

1081
00:54:38,900 --> 00:54:41,040
this kind of service address because

1082
00:54:41,040 --> 00:54:43,920
it's it's there's a lot of multiple

1083
00:54:43,920 --> 00:54:46,980
parties and get involved the second

1084
00:54:46,980 --> 00:54:48,480
question is

1085
00:54:48,480 --> 00:54:49,500
um

1086
00:54:49,500 --> 00:54:51,599
um actually uh

1087
00:54:51,599 --> 00:54:54,180
um what I can say is the first benefit

1088
00:54:54,180 --> 00:54:57,720
is from from

1089
00:54:57,720 --> 00:55:01,380
from your proposer the service location

1090
00:55:01,380 --> 00:55:06,180
Discovery is a processed is removed from

1091
00:55:06,180 --> 00:55:09,359
the off pass such as the DNS to the

1092
00:55:09,359 --> 00:55:13,500
on-pass routing so the benefit is the

1093
00:55:13,500 --> 00:55:15,240
the latency

1094
00:55:15,240 --> 00:55:17,579
um saving something like that but

1095
00:55:17,579 --> 00:55:20,460
actually we here is the quite heavy

1096
00:55:20,460 --> 00:55:22,740
price involved because this is probably

1097
00:55:22,740 --> 00:55:24,300
we really don't have time for this

1098
00:55:24,300 --> 00:55:27,380
please cut to the cheese

1099
00:55:28,339 --> 00:55:31,200
so the first part is we're not rely we

1100
00:55:31,200 --> 00:55:33,420
are reusing namespace governance in the

1101
00:55:33,420 --> 00:55:35,280
application space in which you which you

1102
00:55:35,280 --> 00:55:36,839
work we do this very similar to the ICN

1103
00:55:36,839 --> 00:55:38,700
Community you utilize the domain name

1104
00:55:38,700 --> 00:55:40,380
you're obviously relying on the domains

1105
00:55:40,380 --> 00:55:41,700
governance that exist in the internet

1106
00:55:41,700 --> 00:55:43,440
and that means if you do a service

1107
00:55:43,440 --> 00:55:45,119
announcement I cannot announce

1108
00:55:45,119 --> 00:55:46,500
facebook.com

1109
00:55:46,500 --> 00:55:48,420
that's not possible I mean it's possible

1110
00:55:48,420 --> 00:55:49,559
to announce what the announcement will

1111
00:55:49,559 --> 00:55:51,540
be rejected obviously because I'm not

1112
00:55:51,540 --> 00:55:52,680
Facebook

1113
00:55:52,680 --> 00:55:54,480
um so that's that's the only place where

1114
00:55:54,480 --> 00:55:56,099
this happens where you may of course

1115
00:55:56,099 --> 00:55:57,839
fake a server's announcement but we are

1116
00:55:57,839 --> 00:55:59,579
tying into the actual governance that

1117
00:55:59,579 --> 00:56:02,099
exist and we utilize a certification

1118
00:56:02,099 --> 00:56:04,140
authorization of the announcement which

1119
00:56:04,140 --> 00:56:06,300
you can do if you use your namespace I

1120
00:56:06,300 --> 00:56:07,800
don't care and this is the nice thing

1121
00:56:07,800 --> 00:56:10,500
about the use of RFC 8609 in in the

1122
00:56:10,500 --> 00:56:13,079
draft you can use your own namespace

1123
00:56:13,079 --> 00:56:15,480
um the the the the RFC allows that and

1124
00:56:15,480 --> 00:56:16,980
then you can do your own stuff right

1125
00:56:16,980 --> 00:56:18,660
which which I don't particularly care

1126
00:56:18,660 --> 00:56:20,220
the second part is about is about

1127
00:56:20,220 --> 00:56:22,619
performance um now the point about the

1128
00:56:22,619 --> 00:56:23,880
performance is that we are putting this

1129
00:56:23,880 --> 00:56:25,920
onto the on path and it's distributed

1130
00:56:25,920 --> 00:56:27,540
which means in the even in the early

1131
00:56:27,540 --> 00:56:29,400
performance evaluations

1132
00:56:29,400 --> 00:56:30,960
um we are getting hundreds of thousands

1133
00:56:30,960 --> 00:56:32,819
of service because we're able to root

1134
00:56:32,819 --> 00:56:34,980
this is significantly faster than any

1135
00:56:34,980 --> 00:56:36,720
DNS resolution you can do and that's in

1136
00:56:36,720 --> 00:56:38,460
a distributed manner which means the

1137
00:56:38,460 --> 00:56:41,099
increase is only dealing with the actual

1138
00:56:41,099 --> 00:56:42,780
requests that are coming from the

1139
00:56:42,780 --> 00:56:44,339
clients it's attached to so it's way

1140
00:56:44,339 --> 00:56:46,140
faster than doing an edns resolution at

1141
00:56:46,140 --> 00:56:49,079
high rate so so um I don't think they're

1142
00:56:49,079 --> 00:56:50,520
that's one of the reasons we did this

1143
00:56:50,520 --> 00:56:51,960
because the performance could

1144
00:56:51,960 --> 00:56:54,300
potentially be so much better

1145
00:56:54,300 --> 00:56:56,220
thank you Robin

1146
00:56:56,220 --> 00:56:57,900
uh just brief

1147
00:56:57,900 --> 00:56:58,980
um

1148
00:56:58,980 --> 00:57:01,920
so while putting application Level

1149
00:57:01,920 --> 00:57:04,280
things down to the network

1150
00:57:04,280 --> 00:57:07,680
which provides speed uh drawback could

1151
00:57:07,680 --> 00:57:09,540
be that the application Level semantics

1152
00:57:09,540 --> 00:57:12,780
are causing complexity inside the

1153
00:57:12,780 --> 00:57:15,240
network so what about the ideas what

1154
00:57:15,240 --> 00:57:17,760
kind of application semantics you can

1155
00:57:17,760 --> 00:57:22,020
put down into your service Gateway

1156
00:57:22,020 --> 00:57:24,240
well the only the only applications I'm

1157
00:57:24,240 --> 00:57:27,599
putting in is is the the description or

1158
00:57:27,599 --> 00:57:29,339
the identifier of the entity you want to

1159
00:57:29,339 --> 00:57:31,440
talk to uh and and that's something we

1160
00:57:31,440 --> 00:57:33,059
we can relatively easily deal with so

1161
00:57:33,059 --> 00:57:34,740
we're using a hash based lookup which is

1162
00:57:34,740 --> 00:57:37,380
much faster it's relatively fast uh um

1163
00:57:37,380 --> 00:57:38,579
and that's the only thing we're really

1164
00:57:38,579 --> 00:57:40,680
doing at the announcement level you need

1165
00:57:40,680 --> 00:57:42,660
to do the additional uh verification of

1166
00:57:42,660 --> 00:57:44,640
the service announcement that's okay but

1167
00:57:44,640 --> 00:57:47,520
that's not done at data speed right okay

1168
00:57:47,520 --> 00:57:49,380
thanks thank you

1169
00:57:49,380 --> 00:57:51,300
thank you please do take your questions

1170
00:57:51,300 --> 00:57:53,099
to the list and I think would be

1171
00:57:53,099 --> 00:57:54,839
interesting also to look into what

1172
00:57:54,839 --> 00:57:57,359
didn't work in the cncc and have some

1173
00:57:57,359 --> 00:58:00,859
comparison yeah thank you

1174
00:58:06,599 --> 00:58:11,160
hello so my name is Roland Bliss kit so

1175
00:58:11,160 --> 00:58:13,020
um I have the pleasure to introduce Kira

1176
00:58:13,020 --> 00:58:15,720
to you which is a scalable ID based

1177
00:58:15,720 --> 00:58:18,000
routing architecture specifically

1178
00:58:18,000 --> 00:58:20,280
designed for control planes

1179
00:58:20,280 --> 00:58:21,300
um

1180
00:58:21,300 --> 00:58:23,280
and this is Joint work with martinez

1181
00:58:23,280 --> 00:58:25,520
over on Archer

1182
00:58:25,520 --> 00:58:28,559
so controllability is really important

1183
00:58:28,559 --> 00:58:31,920
uh you may have heard last year's major

1184
00:58:31,920 --> 00:58:34,280
service disruptions at large providers

1185
00:58:34,280 --> 00:58:37,520
mainly caused by configuration mistakes

1186
00:58:37,520 --> 00:58:40,619
they took a large set of services down

1187
00:58:40,619 --> 00:58:43,799
for a considerable amount of time so

1188
00:58:43,799 --> 00:58:45,540
Services depend on resilient

1189
00:58:45,540 --> 00:58:46,700
connectivity

1190
00:58:46,700 --> 00:58:49,260
and the control plane connectivity is

1191
00:58:49,260 --> 00:58:51,900
inherently important I in The Meta case

1192
00:58:51,900 --> 00:58:54,780
for example the guy is misconfigured bgp

1193
00:58:54,780 --> 00:58:57,780
routing and they cut off themselves from

1194
00:58:57,780 --> 00:59:00,420
their control Network and it was hard to

1195
00:59:00,420 --> 00:59:03,180
regain control over their routers again

1196
00:59:03,180 --> 00:59:06,660
just to SSH to them or whatever in order

1197
00:59:06,660 --> 00:59:09,500
to to get the whole thing running again

1198
00:59:09,500 --> 00:59:12,240
so Kira is aimed to provide a

1199
00:59:12,240 --> 00:59:14,880
self-organized robust control plane

1200
00:59:14,880 --> 00:59:16,319
connectivity actually

1201
00:59:16,319 --> 00:59:18,839
so it is designed to interconnect a

1202
00:59:18,839 --> 00:59:21,780
large pool of network resources uh build

1203
00:59:21,780 --> 00:59:24,540
compute storage network coverage what

1204
00:59:24,540 --> 00:59:25,980
have you

1205
00:59:25,980 --> 00:59:27,980
um and it also

1206
00:59:27,980 --> 00:59:31,020
should design uh should provide this

1207
00:59:31,020 --> 00:59:32,880
resilient connectivity for the control

1208
00:59:32,880 --> 00:59:35,339
entities that try to control the various

1209
00:59:35,339 --> 00:59:37,980
resources you have furthermore since

1210
00:59:37,980 --> 00:59:39,599
it's ID based it provides stable

1211
00:59:39,599 --> 00:59:42,000
addresses for moving resources via the

1212
00:59:42,000 --> 00:59:44,040
virtual machine what have you or your

1213
00:59:44,040 --> 00:59:45,359
own

1214
00:59:45,359 --> 00:59:46,920
um and so

1215
00:59:46,920 --> 00:59:49,619
uh it tries to provide uh all-in-one

1216
00:59:49,619 --> 00:59:52,140
features namely uh massive scalability

1217
00:59:52,140 --> 00:59:54,240
so it scales up to 100 thousands of

1218
00:59:54,240 --> 00:59:57,599
nodes uh in a single domain so to say it

1219
00:59:57,599 --> 00:59:58,920
is zero touch doesn't require

1220
00:59:58,920 --> 01:00:01,440
configuration so we cannot be broken by

1221
01:00:01,440 --> 01:00:03,540
configuration mistakes

1222
01:00:03,540 --> 01:00:05,880
um it has a really fast conversion it's

1223
01:00:05,880 --> 01:00:07,680
Loop free even under convergence or

1224
01:00:07,680 --> 01:00:09,720
during conversions

1225
01:00:09,720 --> 01:00:12,180
um it works well in many different

1226
01:00:12,180 --> 01:00:14,520
topologies which we call topological

1227
01:00:14,520 --> 01:00:16,319
versatility

1228
01:00:16,319 --> 01:00:18,660
um so we don't need any special variants

1229
01:00:18,660 --> 01:00:21,420
of routing protocol in in denser

1230
01:00:21,420 --> 01:00:23,160
topologies like data center topologies

1231
01:00:23,160 --> 01:00:25,799
also and last but not least we try to

1232
01:00:25,799 --> 01:00:27,619
also provide efficient routes

1233
01:00:27,619 --> 01:00:30,780
there are some related works that um

1234
01:00:30,780 --> 01:00:33,359
yeah do some things in a related manner

1235
01:00:33,359 --> 01:00:36,839
but um either dialect Dynamics or

1236
01:00:36,839 --> 01:00:39,900
um we have a non-id-based not ID based

1237
01:00:39,900 --> 01:00:42,119
approaches which work in specific

1238
01:00:42,119 --> 01:00:44,400
topologies only

1239
01:00:44,400 --> 01:00:48,480
uh so uh Kira is a routing architecture

1240
01:00:48,480 --> 01:00:50,819
which comprises two tiers one is the

1241
01:00:50,819 --> 01:00:53,220
routing tier where the r2k routing

1242
01:00:53,220 --> 01:00:56,520
protocol sits in and it is the 90 based

1243
01:00:56,520 --> 01:00:58,859
routing protocol uses Source routing and

1244
01:00:58,859 --> 01:01:01,619
works on top of any link layer while the

1245
01:01:01,619 --> 01:01:03,299
forwarding tier is some kind of

1246
01:01:03,299 --> 01:01:06,359
optimization where we use path ID based

1247
01:01:06,359 --> 01:01:08,400
forwarding which eliminates The Source

1248
01:01:08,400 --> 01:01:09,780
routing that we use for the source

1249
01:01:09,780 --> 01:01:12,540
running for the running protocol itself

1250
01:01:12,540 --> 01:01:15,660
um and it is can be seen as basically

1251
01:01:15,660 --> 01:01:17,700
similar to your label switching approach

1252
01:01:17,700 --> 01:01:20,460
and it aims to reduce overhead since we

1253
01:01:20,460 --> 01:01:22,260
get rid of source routing

1254
01:01:22,260 --> 01:01:24,660
uh for the control time packets so I

1255
01:01:24,660 --> 01:01:26,460
briefly introduced what the routing

1256
01:01:26,460 --> 01:01:29,099
protocol does and how it works

1257
01:01:29,099 --> 01:01:30,720
um so

1258
01:01:30,720 --> 01:01:33,000
the first thing that we need to to have

1259
01:01:33,000 --> 01:01:36,660
is uh to to learn uh the path in our

1260
01:01:36,660 --> 01:01:40,380
Network and so here we have a very small

1261
01:01:40,380 --> 01:01:42,960
uh just uh

1262
01:01:42,960 --> 01:01:45,780
small topology from a larger topology

1263
01:01:45,780 --> 01:01:47,160
maybe

1264
01:01:47,160 --> 01:01:49,440
um so the white nodes are basically or

1265
01:01:49,440 --> 01:01:51,059
white circle nodes are basically a

1266
01:01:51,059 --> 01:01:54,839
layered link layer nodes and the

1267
01:01:54,839 --> 01:01:58,200
uh every every node then creates a node

1268
01:01:58,200 --> 01:02:01,319
ID uh randomly basically and these are

1269
01:02:01,319 --> 01:02:03,780
the the large letters uh uppercase

1270
01:02:03,780 --> 01:02:06,240
letters in the in the blue dots

1271
01:02:06,240 --> 01:02:08,579
um so in the beginning every node

1272
01:02:08,579 --> 01:02:10,819
discovers it's super physical vicinity

1273
01:02:10,819 --> 01:02:14,280
uh so X for example learns the context a

1274
01:02:14,280 --> 01:02:17,220
y b m so we call them contacts

1275
01:02:17,220 --> 01:02:20,339
and so now is the question uh if x want

1276
01:02:20,339 --> 01:02:23,400
to reach z uh how does it work and so

1277
01:02:23,400 --> 01:02:25,200
the idea is here to construct the

1278
01:02:25,200 --> 01:02:27,359
underlay routes by using the node ID

1279
01:02:27,359 --> 01:02:29,700
based overlay and we use cademia for

1280
01:02:29,700 --> 01:02:32,520
that that's why we have K in the name or

1281
01:02:32,520 --> 01:02:34,079
the cat

1282
01:02:34,079 --> 01:02:34,799
um

1283
01:02:34,799 --> 01:02:38,280
and so the idea is that we use Source

1284
01:02:38,280 --> 01:02:39,240
roads

1285
01:02:39,240 --> 01:02:41,579
um to the contact that is closest to the

1286
01:02:41,579 --> 01:02:44,099
destination node ID

1287
01:02:44,099 --> 01:02:46,440
um I have an example on the next slide

1288
01:02:46,440 --> 01:02:49,680
and so what is closest if you talk

1289
01:02:49,680 --> 01:02:51,359
things are closer to each other you need

1290
01:02:51,359 --> 01:02:54,119
some kind of distance metric and we use

1291
01:02:54,119 --> 01:02:56,299
the EXO metric from cardamia for that

1292
01:02:56,299 --> 01:02:59,819
which roughly uh boils down to

1293
01:02:59,819 --> 01:03:02,579
um if if two node IDs have a longer

1294
01:03:02,579 --> 01:03:04,680
share prefix the closer they are in the

1295
01:03:04,680 --> 01:03:07,140
ID space

1296
01:03:07,140 --> 01:03:09,000
um so now

1297
01:03:09,000 --> 01:03:12,960
uh let's assume that um X Knows Why

1298
01:03:12,960 --> 01:03:16,079
um as discouraged in the first step and

1299
01:03:16,079 --> 01:03:17,579
here also we assume that letter is

1300
01:03:17,579 --> 01:03:20,160
closer and the alphabet are also closer

1301
01:03:20,160 --> 01:03:21,720
than the node ID

1302
01:03:21,720 --> 01:03:22,440
um

1303
01:03:22,440 --> 01:03:25,260
space just for this example uh so the

1304
01:03:25,260 --> 01:03:27,180
next overlay Hub would be y for example

1305
01:03:27,180 --> 01:03:28,260
so

1306
01:03:28,260 --> 01:03:31,440
um exynosa sorcerer to Y so it's routes

1307
01:03:31,440 --> 01:03:33,359
via a to y

1308
01:03:33,359 --> 01:03:36,720
and let's assume that y has known or

1309
01:03:36,720 --> 01:03:40,079
knows Z Already and so it also knows the

1310
01:03:40,079 --> 01:03:42,299
source routes you see so X Y will

1311
01:03:42,299 --> 01:03:45,000
forward the package to Z using that

1312
01:03:45,000 --> 01:03:48,420
Source route so the complete route

1313
01:03:48,420 --> 01:03:50,099
um what we call that find note requests

1314
01:03:50,099 --> 01:03:53,220
in order to discover a path will then

1315
01:03:53,220 --> 01:03:57,119
um also contain that that small cycle

1316
01:03:57,119 --> 01:03:57,960
here

1317
01:03:57,960 --> 01:04:00,780
and naturally uh that could incur some

1318
01:04:00,780 --> 01:04:03,420
path Bridge uh so the checking routes

1319
01:04:03,420 --> 01:04:05,819
longer than a shortest path but we can

1320
01:04:05,819 --> 01:04:09,000
do some optimization so first uh when

1321
01:04:09,000 --> 01:04:11,940
respond Z responds to X it can shorten

1322
01:04:11,940 --> 01:04:14,280
the recorded route uh just cutting out

1323
01:04:14,280 --> 01:04:17,160
the cycles and later pickets actually

1324
01:04:17,160 --> 01:04:20,160
can use a shorter route because X knows

1325
01:04:20,160 --> 01:04:22,859
a routes to M which is shorter and then

1326
01:04:22,859 --> 01:04:25,559
it can use net route for later pickets

1327
01:04:25,559 --> 01:04:28,140
so the initial stretch that we have can

1328
01:04:28,140 --> 01:04:30,540
reduce for later packets in case you can

1329
01:04:30,540 --> 01:04:33,440
um spend some state for that

1330
01:04:33,440 --> 01:04:36,240
furthermore archicad offers a flexible

1331
01:04:36,240 --> 01:04:38,579
memory stretch trade-off

1332
01:04:38,579 --> 01:04:41,940
and this comes from the fact that we are

1333
01:04:41,940 --> 01:04:45,780
using cademia based routing table which

1334
01:04:45,780 --> 01:04:48,180
arranges its routing table as tree of

1335
01:04:48,180 --> 01:04:51,240
buckets where each bucket has a size of

1336
01:04:51,240 --> 01:04:53,780
up to K contacts

1337
01:04:53,780 --> 01:04:57,359
K is usually a small number like 20 or

1338
01:04:57,359 --> 01:05:00,059
40. and they are arranged by xor

1339
01:05:00,059 --> 01:05:01,559
distance

1340
01:05:01,559 --> 01:05:02,280
um

1341
01:05:02,280 --> 01:05:04,440
so here in this example we have one

1342
01:05:04,440 --> 01:05:07,260
bucket that covers all contacts that

1343
01:05:07,260 --> 01:05:10,680
have the different first bit uh in the

1344
01:05:10,680 --> 01:05:13,260
in the whole other space so so one one

1345
01:05:13,260 --> 01:05:15,540
bucket also only 20 contacts for example

1346
01:05:15,540 --> 01:05:18,839
for the the half of the ID space

1347
01:05:18,839 --> 01:05:21,660
um while uh the closer you get to your

1348
01:05:21,660 --> 01:05:23,099
own ID

1349
01:05:23,099 --> 01:05:25,319
um the more information you have so

1350
01:05:25,319 --> 01:05:27,420
um context in the lower buckets are

1351
01:05:27,420 --> 01:05:31,200
usually in your on ID wise vicinity

1352
01:05:31,200 --> 01:05:33,839
um what we now do is store

1353
01:05:33,839 --> 01:05:36,839
in addition to the uh to to the the node

1354
01:05:36,839 --> 01:05:40,079
ID we also store the the path Vector so

1355
01:05:40,079 --> 01:05:43,559
the the path that we learned uh are just

1356
01:05:43,559 --> 01:05:46,140
attached to these contacts

1357
01:05:46,140 --> 01:05:49,559
um and so we can do that also uh in a in

1358
01:05:49,559 --> 01:05:52,680
a way that we prefer shorter routes uh

1359
01:05:52,680 --> 01:05:54,720
and this actually leads to the fact that

1360
01:05:54,720 --> 01:05:57,059
we learn shortest path to all the

1361
01:05:57,059 --> 01:05:59,579
contexts that we know

1362
01:05:59,579 --> 01:06:01,980
um and yeah the size of the buckets can

1363
01:06:01,980 --> 01:06:04,380
be chosen so we can have here a flexible

1364
01:06:04,380 --> 01:06:06,900
memory straight off and basically we

1365
01:06:06,900 --> 01:06:09,900
have logarithmically large or depending

1366
01:06:09,900 --> 01:06:12,359
on the number of nodes we have only

1367
01:06:12,359 --> 01:06:14,040
um algorithmically

1368
01:06:14,040 --> 01:06:16,440
um dependency on the number of nodes in

1369
01:06:16,440 --> 01:06:17,280
the network

1370
01:06:17,280 --> 01:06:19,559
so what about Dynamics so if in case

1371
01:06:19,559 --> 01:06:21,660
links and my routing is about

1372
01:06:21,660 --> 01:06:24,420
also covering with Dynamics so

1373
01:06:24,420 --> 01:06:27,000
uh we assume that once you detect

1374
01:06:27,000 --> 01:06:29,460
failure in the underlay so let's assume

1375
01:06:29,460 --> 01:06:31,740
the let's assume the the link between X

1376
01:06:31,740 --> 01:06:34,559
and B breaks uh then we have a two-step

1377
01:06:34,559 --> 01:06:36,660
strategy how to deal with that and one

1378
01:06:36,660 --> 01:06:39,480
is that your first inform your ID wise

1379
01:06:39,480 --> 01:06:41,520
Neighbors about the faith link

1380
01:06:41,520 --> 01:06:43,940
and then after that

1381
01:06:43,940 --> 01:06:46,980
basically uh you try to ReDiscover an

1382
01:06:46,980 --> 01:06:50,700
alternative path by the overlay route

1383
01:06:50,700 --> 01:06:52,980
um and we included not via information

1384
01:06:52,980 --> 01:06:56,640
so that note on the path didn't heard

1385
01:06:56,640 --> 01:06:59,099
about the broken links that so they can

1386
01:06:59,099 --> 01:07:02,460
know then they cannot reuse routes that

1387
01:07:02,460 --> 01:07:05,579
that also include that broken link

1388
01:07:05,579 --> 01:07:07,559
um we also periodically probe context

1389
01:07:07,559 --> 01:07:09,900
for broken path and you also have to

1390
01:07:09,900 --> 01:07:13,079
apparently look up your own node ID

1391
01:07:13,079 --> 01:07:13,740
um

1392
01:07:13,740 --> 01:07:15,420
in order to detect any network

1393
01:07:15,420 --> 01:07:17,339
partitioning and so on and the route

1394
01:07:17,339 --> 01:07:19,980
information validity is ensured by using

1395
01:07:19,980 --> 01:07:22,140
State sequence numbers in the concept

1396
01:07:22,140 --> 01:07:25,559
for path information agents

1397
01:07:25,559 --> 01:07:27,079
hey

1398
01:07:27,079 --> 01:07:29,819
sorry that was an animation

1399
01:07:29,819 --> 01:07:31,799
um yeah so uh briefly about the the path

1400
01:07:31,799 --> 01:07:34,440
ID based forwarding uh so the the

1401
01:07:34,440 --> 01:07:36,359
forwarding tier

1402
01:07:36,359 --> 01:07:38,220
um so the the main idea is to get rid of

1403
01:07:38,220 --> 01:07:39,960
the source routes and so we simply

1404
01:07:39,960 --> 01:07:42,299
replace the source routes by using a

1405
01:07:42,299 --> 01:07:44,940
hash of of this Source route

1406
01:07:44,940 --> 01:07:47,579
um so the path ID is basically just the

1407
01:07:47,579 --> 01:07:50,099
hash of the source route and we use the

1408
01:07:50,099 --> 01:07:52,440
path ID as label for the source routes

1409
01:07:52,440 --> 01:07:54,299
and basically we use then label

1410
01:07:54,299 --> 01:07:56,420
switching between the nodes

1411
01:07:56,420 --> 01:07:59,400
and uh the reason for discovering the

1412
01:07:59,400 --> 01:08:01,079
two of vicinity in the first place is

1413
01:08:01,079 --> 01:08:03,059
that we can actually pre-calculate path

1414
01:08:03,059 --> 01:08:06,059
IDs on your true and natural vicinity uh

1415
01:08:06,059 --> 01:08:08,520
so we only need explicit path set up for

1416
01:08:08,520 --> 01:08:11,520
path that are longer than four Ops

1417
01:08:11,520 --> 01:08:14,280
so uh we also implemented the thing and

1418
01:08:14,280 --> 01:08:15,480
showed that

1419
01:08:15,480 --> 01:08:18,120
um basically we use the IPv6 packet

1420
01:08:18,120 --> 01:08:20,219
format we can embed the node ID into

1421
01:08:20,219 --> 01:08:23,279
IPv6 addresses and so the idea is that

1422
01:08:23,279 --> 01:08:25,319
the forwarding tier then has the node ID

1423
01:08:25,319 --> 01:08:27,899
and a path ID forwarding table and we

1424
01:08:27,899 --> 01:08:30,238
use in order to use the path IDs we use

1425
01:08:30,238 --> 01:08:32,819
GRE encapsulation so you have GAE

1426
01:08:32,819 --> 01:08:34,319
encapsulation header in case you're

1427
01:08:34,319 --> 01:08:36,960
using path IDs if you don't use or don't

1428
01:08:36,960 --> 01:08:39,660
need path ID you can just use plain IPv6

1429
01:08:39,660 --> 01:08:42,299
header and so any control application

1430
01:08:42,299 --> 01:08:46,080
that is able to send IPv6 packets um may

1431
01:08:46,080 --> 01:08:48,359
use keyword connectivity

1432
01:08:48,359 --> 01:08:53,279
and also the autocup messages are

1433
01:08:53,279 --> 01:08:56,460
sent by using IPv6 so we simulated that

1434
01:08:56,460 --> 01:08:58,920
thing on

1435
01:08:58,920 --> 01:09:01,679
in topologies up to 200 000 nodes

1436
01:09:01,679 --> 01:09:04,560
various typologies uh just to briefly

1437
01:09:04,560 --> 01:09:09,779
show that this works not so badly

1438
01:09:09,779 --> 01:09:12,479
um so for example uh here we have

1439
01:09:12,479 --> 01:09:15,600
various topologies and a size of 10 000

1440
01:09:15,600 --> 01:09:19,738
nodes along the x-axis and shown is here

1441
01:09:19,738 --> 01:09:21,540
the average multiplicative stretch along

1442
01:09:21,540 --> 01:09:25,020
the y-axis and so the green dots are the

1443
01:09:25,020 --> 01:09:26,299
first packet

1444
01:09:26,299 --> 01:09:28,979
stretch that the first packet C and

1445
01:09:28,979 --> 01:09:30,899
later practice are the the blue

1446
01:09:30,899 --> 01:09:33,660
triangular triangles

1447
01:09:33,660 --> 01:09:35,698
um and we compared here with a ripple

1448
01:09:35,698 --> 01:09:38,100
and a soaring mode single double deck

1449
01:09:38,100 --> 01:09:40,080
single direct version and so on and you

1450
01:09:40,080 --> 01:09:41,819
can see that we can even achieve for the

1451
01:09:41,819 --> 01:09:44,040
first packets a better stretch values in

1452
01:09:44,040 --> 01:09:47,160
average and what is really nice is that

1453
01:09:47,160 --> 01:09:49,198
the stretch to the context so all the

1454
01:09:49,198 --> 01:09:50,759
contacts that you have in your routing

1455
01:09:50,759 --> 01:09:51,960
table

1456
01:09:51,960 --> 01:09:54,060
um you have effectively shortest path

1457
01:09:54,060 --> 01:09:56,480
routes

1458
01:09:57,060 --> 01:09:59,100
so

1459
01:09:59,100 --> 01:10:00,900
you've got two and a half minutes and 14

1460
01:10:00,900 --> 01:10:02,100
slides

1461
01:10:02,100 --> 01:10:03,719
one

1462
01:10:03,719 --> 01:10:06,060
go ahead you've got too many slides to

1463
01:10:06,060 --> 01:10:08,219
finish yeah no no don't they're backup

1464
01:10:08,219 --> 01:10:10,920
slides don't don't worry uh that's just

1465
01:10:10,920 --> 01:10:12,900
showing uh the Dynamics part

1466
01:10:12,900 --> 01:10:14,880
um so in case you have a hundred

1467
01:10:14,880 --> 01:10:17,340
thousand nodes 15 of the links very

1468
01:10:17,340 --> 01:10:20,460
randomly at uh 20 seconds

1469
01:10:20,460 --> 01:10:22,920
uh then we are able to converge within

1470
01:10:22,920 --> 01:10:25,199
roughly 10 seconds until we have nearly

1471
01:10:25,199 --> 01:10:28,080
full connectivity again with uh scalable

1472
01:10:28,080 --> 01:10:30,780
overheads so uh the the packet rate is

1473
01:10:30,780 --> 01:10:34,020
is quite quite low in in that case

1474
01:10:34,020 --> 01:10:36,380
so uh to conclude

1475
01:10:36,380 --> 01:10:38,760
Cura provides self-organized robust

1476
01:10:38,760 --> 01:10:41,159
control tank connectivity it is not

1477
01:10:41,159 --> 01:10:44,159
meant to be a replacement for ospf Isis

1478
01:10:44,159 --> 01:10:46,920
or bgp because it's not data plane

1479
01:10:46,920 --> 01:10:48,840
routing right so it puts connectivity

1480
01:10:48,840 --> 01:10:51,420
first and efficiency second

1481
01:10:51,420 --> 01:10:53,699
is designed for large provider domains

1482
01:10:53,699 --> 01:10:56,820
as we expect them to have in in 5G or 6G

1483
01:10:56,820 --> 01:10:59,100
networks and could be used also even

1484
01:10:59,100 --> 01:11:01,320
across multiple providers we're

1485
01:11:01,320 --> 01:11:03,659
currently developing our domain concept

1486
01:11:03,659 --> 01:11:05,940
where you can keep the routing inside

1487
01:11:05,940 --> 01:11:08,040
your domain more local so you're not

1488
01:11:08,040 --> 01:11:10,980
depending on other domains security can

1489
01:11:10,980 --> 01:11:12,960
be easily added in that sense that we

1490
01:11:12,960 --> 01:11:15,000
can have safe server defined node IDs

1491
01:11:15,000 --> 01:11:17,280
and that stuff it is a path Vector

1492
01:11:17,280 --> 01:11:19,679
protocol so we can also um

1493
01:11:19,679 --> 01:11:24,000
I have uh hash values or a Max for for

1494
01:11:24,000 --> 01:11:27,060
path and so on uh we also designed a

1495
01:11:27,060 --> 01:11:29,040
special end system mode that reduced the

1496
01:11:29,040 --> 01:11:30,900
overhead even more so in case you're not

1497
01:11:30,900 --> 01:11:33,540
the router you can still use the node

1498
01:11:33,540 --> 01:11:37,980
IDs but you don't have to actually send

1499
01:11:37,980 --> 01:11:40,380
router updates and stuff

1500
01:11:40,380 --> 01:11:42,600
um it also supports multipath routing

1501
01:11:42,600 --> 01:11:44,640
also the forwarding scheme the path IDs

1502
01:11:44,640 --> 01:11:47,520
do that and we can also easily integrate

1503
01:11:47,520 --> 01:11:49,980
a DHT for a simple name resolution

1504
01:11:49,980 --> 01:11:52,880
service Discovery and recently we had

1505
01:11:52,880 --> 01:11:56,460
developed a new scheme that enables also

1506
01:11:56,460 --> 01:11:58,620
very efficient topology Discovery so you

1507
01:11:58,620 --> 01:12:01,080
can discover within seconds 100 now a

1508
01:12:01,080 --> 01:12:04,020
thousand nodes topology with most of the

1509
01:12:04,020 --> 01:12:04,860
links

1510
01:12:04,860 --> 01:12:08,400
so um having said that um we have a side

1511
01:12:08,400 --> 01:12:12,780
meeting for today uh starting at 7 00 pm

1512
01:12:12,780 --> 01:12:16,800
and it's a small room as a 912. I have

1513
01:12:16,800 --> 01:12:18,360
to leave for the animal working group

1514
01:12:18,360 --> 01:12:20,520
because I'm supposed to be a give a

1515
01:12:20,520 --> 01:12:23,280
presentation also there but Paul uh

1516
01:12:23,280 --> 01:12:25,980
sitting here next to the the mic will be

1517
01:12:25,980 --> 01:12:27,540
happy to answer questions in case you

1518
01:12:27,540 --> 01:12:30,840
have some after the session so thanks

1519
01:12:30,840 --> 01:12:32,820
thank you Alan

1520
01:12:32,820 --> 01:12:35,599
any questions

1521
01:12:37,020 --> 01:12:39,199
foreign

1522
01:12:55,020 --> 01:12:57,960
so to do the initial Discovery if you

1523
01:12:57,960 --> 01:13:01,380
get a node you don't recognize a node ID

1524
01:13:01,380 --> 01:13:04,920
if these are randomly selected it's how

1525
01:13:04,920 --> 01:13:07,500
do you it's like a

1526
01:13:07,500 --> 01:13:10,320
how do you find know who you want to

1527
01:13:10,320 --> 01:13:14,159
talk to the thing is that that you wrote

1528
01:13:14,159 --> 01:13:16,980
simply to the closest node you know I

1529
01:13:16,980 --> 01:13:20,040
closest in the ID space and the Excel

1530
01:13:20,040 --> 01:13:22,380
metric is very nice and because it's

1531
01:13:22,380 --> 01:13:24,480
Unique so you always can tell whether

1532
01:13:24,480 --> 01:13:27,060
you're making progress in ID space and

1533
01:13:27,060 --> 01:13:28,920
in case you don't know a node that is

1534
01:13:28,920 --> 01:13:30,840
closed so then you choose the target

1535
01:13:30,840 --> 01:13:33,179
then there's some inconsistency in the

1536
01:13:33,179 --> 01:13:34,860
routing table or the node doesn't exist

1537
01:13:34,860 --> 01:13:35,760
anymore

1538
01:13:35,760 --> 01:13:38,940
okay okay so that's that comes you know

1539
01:13:38,940 --> 01:13:40,560
you know you want to talk to this guy

1540
01:13:40,560 --> 01:13:42,840
through some outside mechanism now so

1541
01:13:42,840 --> 01:13:44,699
when you start this out if you see if

1542
01:13:44,699 --> 01:13:46,320
you're trying to talk to someone you've

1543
01:13:46,320 --> 01:13:48,420
never talked to before you just send the

1544
01:13:48,420 --> 01:13:50,640
discovery out all your interfaces yeah

1545
01:13:50,640 --> 01:13:52,159
okay

1546
01:13:52,159 --> 01:13:54,600
not not through all interfaces just

1547
01:13:54,600 --> 01:13:57,179
through through one

1548
01:13:57,179 --> 01:13:59,400
right so so what if you send it the

1549
01:13:59,400 --> 01:14:02,280
wrong way what if it's it's partitioned

1550
01:14:02,280 --> 01:14:05,219
if you send it if you send it uh right

1551
01:14:05,219 --> 01:14:07,260
and the and the guys to the left yeah

1552
01:14:07,260 --> 01:14:08,400
right

1553
01:14:08,400 --> 01:14:11,100
um we do not see so much stretched so

1554
01:14:11,100 --> 01:14:15,300
that the the progress is usually very

1555
01:14:15,300 --> 01:14:17,640
localized in that sense so so if you

1556
01:14:17,640 --> 01:14:19,140
don't make progress then you go the

1557
01:14:19,140 --> 01:14:22,800
other way no I mean it's yeah if the ID

1558
01:14:22,800 --> 01:14:25,140
way is overlay is consistent then we

1559
01:14:25,140 --> 01:14:27,000
always make progress

1560
01:14:27,000 --> 01:14:29,580
that's for sure so the ID tells you

1561
01:14:29,580 --> 01:14:31,320
which way to go and that maybe exactly

1562
01:14:31,320 --> 01:14:34,380
yeah oh okay okay exactly yeah I think I

1563
01:14:34,380 --> 01:14:37,260
saw something like this years ago where

1564
01:14:37,260 --> 01:14:40,080
the IDS were you go right or left or up

1565
01:14:40,080 --> 01:14:42,300
or down yeah sure I said there's prior

1566
01:14:42,300 --> 01:14:44,280
work but we have it a bit differently

1567
01:14:44,280 --> 01:14:47,100
and yeah okay one things in different

1568
01:14:47,100 --> 01:14:49,520
ways

1569
01:14:50,340 --> 01:14:52,940
thanks

1570
01:15:00,080 --> 01:15:02,760
you have 15 minutes

1571
01:15:02,760 --> 01:15:04,199
okay

1572
01:15:04,199 --> 01:15:07,980
hello this is hibo from Huawei uh this

1573
01:15:07,980 --> 01:15:11,400
time I'll present tour jobs the

1574
01:15:11,400 --> 01:15:13,080
requirement of three faster for

1575
01:15:13,080 --> 01:15:15,239
detection under the framework of us for

1576
01:15:15,239 --> 01:15:17,480
detection for IP based Network

1577
01:15:17,480 --> 01:15:20,780
next please

1578
01:15:21,840 --> 01:15:25,679
who have control of the slides oh

1579
01:15:25,679 --> 01:15:28,140
how can I control it

1580
01:15:28,140 --> 01:15:31,580
bottom of your screen

1581
01:15:33,960 --> 01:15:37,620
can you help me don't find how I can

1582
01:15:37,620 --> 01:15:40,760
control those lines

1583
01:15:59,460 --> 01:16:02,300
just sure

1584
01:16:03,440 --> 01:16:07,280
it seems ready yeah

1585
01:16:09,440 --> 01:16:13,080
just go ahead I'll flip it for you okay

1586
01:16:13,080 --> 01:16:16,679
okay uh this is a motivation of our jobs

1587
01:16:16,679 --> 01:16:19,760
uh today for most database applications

1588
01:16:19,760 --> 01:16:22,980
always use a long time out to identify

1589
01:16:22,980 --> 01:16:26,699
Network failures this will cause the uh

1590
01:16:26,699 --> 01:16:29,219
ZIP codes but with the also they are

1591
01:16:29,219 --> 01:16:31,620
very much designed to the faster really

1592
01:16:31,620 --> 01:16:34,679
detection is especially for high

1593
01:16:34,679 --> 01:16:37,380
performance applications such as IP

1594
01:16:37,380 --> 01:16:41,340
based mme and the class computing

1595
01:16:41,340 --> 01:16:43,679
they can hardly tolerance the long

1596
01:16:43,679 --> 01:16:46,380
duration of failures included from the

1597
01:16:46,380 --> 01:16:49,920
tunnel scheme for example for the ones

1598
01:16:49,920 --> 01:16:52,440
when the failure occurs on IP based on

1599
01:16:52,440 --> 01:16:55,679
ume the iops will reduce to zero until

1600
01:16:55,679 --> 01:16:58,199
the equation can identify the failure

1601
01:16:58,199 --> 01:17:02,400
it's through the key level timeout and

1602
01:17:02,400 --> 01:17:05,239
also for cloud computing it is similar

1603
01:17:05,239 --> 01:17:07,860
where IP connection for the server is

1604
01:17:07,860 --> 01:17:12,120
done the correspond respondent Computing

1605
01:17:12,120 --> 01:17:15,300
in a phase will be blocked under the

1606
01:17:15,300 --> 01:17:18,719
whole Computing progress may be affected

1607
01:17:18,719 --> 01:17:21,600
uh this pillar detection there are also

1608
01:17:21,600 --> 01:17:23,699
there are there are some resist the

1609
01:17:23,699 --> 01:17:25,739
failure detection mechanic mechanisms

1610
01:17:25,739 --> 01:17:27,739
such as BRB

1611
01:17:27,739 --> 01:17:31,620
also we can deploy the multiplied The

1612
01:17:31,620 --> 01:17:34,560
BFG to accelerate the fourth tension but

1613
01:17:34,560 --> 01:17:37,679
this mechanism will typically consume

1614
01:17:37,679 --> 01:17:40,140
the system resource heavily especially

1615
01:17:40,140 --> 01:17:43,739
for the host and servers so from IP

1616
01:17:43,739 --> 01:17:47,159
network Point uh we need an economism to

1617
01:17:47,159 --> 01:17:49,920
help the host accelerate the 40 passion

1618
01:17:49,920 --> 01:17:52,739
and provide a better experience for the

1619
01:17:52,739 --> 01:17:55,080
high performance applications

1620
01:17:55,080 --> 01:17:57,480
uh such a high performance applications

1621
01:17:57,480 --> 01:18:00,780
are really wrong in controlled domain

1622
01:18:00,780 --> 01:18:03,540
such as a data center Network and this

1623
01:18:03,540 --> 01:18:06,659
should be considered when designing a

1624
01:18:06,659 --> 01:18:08,880
solution and deployment

1625
01:18:08,880 --> 01:18:11,900
next please

1626
01:18:19,219 --> 01:18:22,699
this is the ID based memory use case

1627
01:18:22,699 --> 01:18:27,239
here show a small activation I mean

1628
01:18:27,239 --> 01:18:28,260
Network

1629
01:18:28,260 --> 01:18:30,960
the horse the the all the horse and the

1630
01:18:30,960 --> 01:18:33,900
storage connected to two switches and

1631
01:18:33,900 --> 01:18:36,540
the host one creates a mme connection to

1632
01:18:36,540 --> 01:18:39,420
the storage you want the ip1 but when

1633
01:18:39,420 --> 01:18:41,640
the ip1 link is failed

1634
01:18:41,640 --> 01:18:44,699
the host one will not detect it until it

1635
01:18:44,699 --> 01:18:47,040
keeps time keep live timeouts the

1636
01:18:47,040 --> 01:18:49,739
failure May last for more than 10 tens

1637
01:18:49,739 --> 01:18:53,100
of a minute seconds before being handled

1638
01:18:53,100 --> 01:18:55,620
during this time the connection between

1639
01:18:55,620 --> 01:18:58,620
the host storage is disrupt the store

1640
01:18:58,620 --> 01:19:01,380
service storage service is completed

1641
01:19:01,380 --> 01:19:02,880
stopped

1642
01:19:02,880 --> 01:19:05,960
next please

1643
01:19:07,440 --> 01:19:10,640
this is another class Computing use case

1644
01:19:10,640 --> 01:19:14,040
there are there are now there are many

1645
01:19:14,040 --> 01:19:18,239
distributed computing algorithm for some

1646
01:19:18,239 --> 01:19:21,780
for some kind of the Computing algorithm

1647
01:19:21,780 --> 01:19:24,360
uh the server the servers will be

1648
01:19:24,360 --> 01:19:27,600
divided to several Pairs and each pair

1649
01:19:27,600 --> 01:19:31,940
will connect communicate with each other

1650
01:19:32,659 --> 01:19:36,719
Network about the Computing model uh the

1651
01:19:36,719 --> 01:19:40,560
server one server three are paired and

1652
01:19:40,560 --> 01:19:41,820
the server two and the server for

1653
01:19:41,820 --> 01:19:45,420
another pair they are they are they are

1654
01:19:45,420 --> 01:19:48,000
both to the class Computing but the

1655
01:19:48,000 --> 01:19:50,760
servers uh when the server series the

1656
01:19:50,760 --> 01:19:53,460
link to the leaf three is fair uh the

1657
01:19:53,460 --> 01:19:55,320
connect the communication the

1658
01:19:55,320 --> 01:19:57,000
communication between the server one and

1659
01:19:57,000 --> 01:19:59,880
server three we all will not work this

1660
01:19:59,880 --> 01:20:03,000
video will block the step of the

1661
01:20:03,000 --> 01:20:06,780
commuting and the whatever it is further

1662
01:20:06,780 --> 01:20:09,780
will will block the whole cluster

1663
01:20:09,780 --> 01:20:12,780
Computing the job scheduler cannot

1664
01:20:12,780 --> 01:20:16,080
reschedule the Computing task until the

1665
01:20:16,080 --> 01:20:19,260
detecting the server series failure this

1666
01:20:19,260 --> 01:20:21,600
thought it may be lasted for one or more

1667
01:20:21,600 --> 01:20:23,340
minutes

1668
01:20:23,340 --> 01:20:26,239
next please

1669
01:20:28,500 --> 01:20:29,880
uh

1670
01:20:29,880 --> 01:20:32,760
this is this is our requirements and

1671
01:20:32,760 --> 01:20:35,820
first we we want the network device that

1672
01:20:35,820 --> 01:20:38,100
can detect the link or network failure

1673
01:20:38,100 --> 01:20:40,980
second we want the network device can

1674
01:20:40,980 --> 01:20:43,560
synchronously synchronize the failure to

1675
01:20:43,560 --> 01:20:46,140
the other network devices because some

1676
01:20:46,140 --> 01:20:48,600
because there are many there are many

1677
01:20:48,600 --> 01:20:52,380
many network devices in network uh so

1678
01:20:52,380 --> 01:20:56,040
the network device can notify local or

1679
01:20:56,040 --> 01:20:57,960
remote failure information to the local

1680
01:20:57,960 --> 01:21:00,600
access endpoints and then after the

1681
01:21:00,600 --> 01:21:02,280
network device they send the

1682
01:21:02,280 --> 01:21:04,800
notifications to the endpoints one is

1683
01:21:04,800 --> 01:21:07,380
the test or be notified of the detection

1684
01:21:07,380 --> 01:21:10,920
over any of any of the endpoints

1685
01:21:10,920 --> 01:21:13,620
subscribing failure

1686
01:21:13,620 --> 01:21:16,760
so next please

1687
01:21:18,360 --> 01:21:21,360
this is a framework of our web reference

1688
01:21:21,360 --> 01:21:23,400
model uh

1689
01:21:23,400 --> 01:21:27,000
in this model it will using a controlled

1690
01:21:27,000 --> 01:21:30,179
domain both the client component Imports

1691
01:21:30,179 --> 01:21:32,580
and the server endpoints are allowed to

1692
01:21:32,580 --> 01:21:35,460
register with their IP information and

1693
01:21:35,460 --> 01:21:38,040
some other information with its access

1694
01:21:38,040 --> 01:21:41,219
switch Services the third one points

1695
01:21:41,219 --> 01:21:43,860
must reaches is register its information

1696
01:21:43,860 --> 01:21:47,280
to that network but the registration is

1697
01:21:47,280 --> 01:21:50,820
opting optional for einclined endpoints

1698
01:21:50,820 --> 01:21:54,540
uh each client unemployes subscribe to

1699
01:21:54,540 --> 01:21:56,640
the network for the reachability of the

1700
01:21:56,640 --> 01:22:00,480
IPS to its E2 where it where it is

1701
01:22:00,480 --> 01:22:02,460
interesting

1702
01:22:02,460 --> 01:22:04,920
the registration and the substitution

1703
01:22:04,920 --> 01:22:07,320
information is synchronized and

1704
01:22:07,320 --> 01:22:10,739
propagated through the network

1705
01:22:10,739 --> 01:22:13,440
when a network device such as switch one

1706
01:22:13,440 --> 01:22:16,140
or switches to detects is a scheduling

1707
01:22:16,140 --> 01:22:19,219
failure or awesome on on

1708
01:22:19,219 --> 01:22:22,679
Commercial Network failure the switch

1709
01:22:22,679 --> 01:22:25,800
will quickly notify the fault to those

1710
01:22:25,800 --> 01:22:28,219
client endpoints through subscribing

1711
01:22:28,219 --> 01:22:31,080
subscribing is the app information

1712
01:22:31,080 --> 01:22:33,480
when the client endpoint receive the

1713
01:22:33,480 --> 01:22:36,420
notification it can immediately include

1714
01:22:36,420 --> 01:22:39,060
the recovery by switching to the backup

1715
01:22:39,060 --> 01:22:41,420
path

1716
01:22:41,580 --> 01:22:44,600
next slide please

1717
01:22:45,300 --> 01:22:48,179
here is an example of a procedure

1718
01:22:48,179 --> 01:22:51,300
example this is a also a IP based mme

1719
01:22:51,300 --> 01:22:53,239
and Network

1720
01:22:53,239 --> 01:22:56,040
in this network the all host and a

1721
01:22:56,040 --> 01:22:57,719
storage devices register their

1722
01:22:57,719 --> 01:23:00,620
information to the IP network such as

1723
01:23:00,620 --> 01:23:04,800
its raw where is the where is the host

1724
01:23:04,800 --> 01:23:07,739
or storage under correct correspondence

1725
01:23:07,739 --> 01:23:11,760
PHS or host and client endpoints create

1726
01:23:11,760 --> 01:23:14,880
mme connection to special specific

1727
01:23:14,880 --> 01:23:18,540
storage device here is show the host one

1728
01:23:18,540 --> 01:23:21,120
it creates a mme connection to store the

1729
01:23:21,120 --> 01:23:24,300
one the ip1 and also he may create a

1730
01:23:24,300 --> 01:23:27,840
backup connection to story through one

1731
01:23:27,840 --> 01:23:30,500
the ip2

1732
01:23:31,100 --> 01:23:34,199
wants to know if your status and the

1733
01:23:34,199 --> 01:23:36,300
Subscribe is a request to the app

1734
01:23:36,300 --> 01:23:38,600
network

1735
01:23:38,840 --> 01:23:41,880
with me submit the request to the switch

1736
01:23:41,880 --> 01:23:42,840
one

1737
01:23:42,840 --> 01:23:45,780
one ip1 link Fields switch one can

1738
01:23:45,780 --> 01:23:48,719
quickly detect it and notify the failure

1739
01:23:48,719 --> 01:23:51,360
to host one host one when receive the

1740
01:23:51,360 --> 01:23:55,020
notification uh then he can to quickly

1741
01:23:55,020 --> 01:23:58,679
start the reset or recovery progress how

1742
01:23:58,679 --> 01:24:01,560
to do it it may be defined by the mme

1743
01:24:01,560 --> 01:24:04,159
scheme

1744
01:24:04,620 --> 01:24:08,360
that's that's like this

1745
01:24:08,400 --> 01:24:11,280
this is another particular example it's

1746
01:24:11,280 --> 01:24:15,480
for cloud computing okay in this in this

1747
01:24:15,480 --> 01:24:18,300
particular the job scheduler uh he

1748
01:24:18,300 --> 01:24:20,940
wanted to can also at the four servers

1749
01:24:20,940 --> 01:24:24,060
are connected to the network the job

1750
01:24:24,060 --> 01:24:29,699
scheduler here to a tasks and divide the

1751
01:24:29,699 --> 01:24:32,400
four servers two into two pairs so we

1752
01:24:32,400 --> 01:24:34,980
want to so on with the server three is a

1753
01:24:34,980 --> 01:24:37,140
pair under server two with a service to

1754
01:24:37,140 --> 01:24:40,260
work for so four is another pair uh all

1755
01:24:40,260 --> 01:24:43,140
the correct connection to to for each

1756
01:24:43,140 --> 01:24:46,199
other then job schedule wants to know

1757
01:24:46,199 --> 01:24:49,440
all the servers the IP status so it can

1758
01:24:49,440 --> 01:24:52,820
it subscribe to all the

1759
01:24:52,820 --> 01:24:56,219
subscribers to us every servers IP at

1760
01:24:56,219 --> 01:24:59,820
least one one ip3 is the link fails if

1761
01:24:59,820 --> 01:25:02,460
three can quickly detect the failure at

1762
01:25:02,460 --> 01:25:04,679
least one count so if three will

1763
01:25:04,679 --> 01:25:07,440
synchronize the status the change to

1764
01:25:07,440 --> 01:25:10,920
other leaves level one

1765
01:25:10,920 --> 01:25:13,020
receive the synchronized single

1766
01:25:13,020 --> 01:25:14,880
synchronize the information like it

1767
01:25:14,880 --> 01:25:18,060
notifies the job scheduler based on on

1768
01:25:18,060 --> 01:25:19,980
its subscription

1769
01:25:19,980 --> 01:25:22,920
job scheduler identifies the fourth path

1770
01:25:22,920 --> 01:25:26,100
and then he can reassign the Computing

1771
01:25:26,100 --> 01:25:29,940
task to other good servers so the then

1772
01:25:29,940 --> 01:25:33,120
the then the Computing will maybe

1773
01:25:33,120 --> 01:25:35,940
continue to go on

1774
01:25:35,940 --> 01:25:39,120
next slide please

1775
01:25:39,120 --> 01:25:43,140
so this is uh before is our two jobs so

1776
01:25:43,140 --> 01:25:45,659
next steps we welcome more comments and

1777
01:25:45,659 --> 01:25:48,800
discussions and also we revise the jobs

1778
01:25:48,800 --> 01:25:53,000
accordingly thank you

1779
01:25:53,280 --> 01:25:55,699
foreign

1780
01:25:56,480 --> 01:25:59,959
presentation or

1781
01:26:00,719 --> 01:26:04,020
I think it's both already

1782
01:26:04,020 --> 01:26:06,920
yeah okay

1783
01:26:08,159 --> 01:26:11,699
Greg yes uh Greg mirsky Erickson uh can

1784
01:26:11,699 --> 01:26:14,820
you kindly bring the uh requirements uh

1785
01:26:14,820 --> 01:26:16,800
slide

1786
01:26:16,800 --> 01:26:20,520
um in the meantime I just wonder so

1787
01:26:20,520 --> 01:26:24,540
what your goal uh what you are planning

1788
01:26:24,540 --> 01:26:28,040
to achieve with this work

1789
01:26:28,040 --> 01:26:32,820
uh our our goal is to the network help

1790
01:26:32,820 --> 01:26:35,639
the client endpoint calendar to quickly

1791
01:26:35,639 --> 01:26:39,060
detect the network failure such as the

1792
01:26:39,060 --> 01:26:42,480
link IP Access Link value on the app on

1793
01:26:42,480 --> 01:26:46,459
uncovered just a network failure

1794
01:26:48,420 --> 01:26:51,900
so the whole network to detect failure

1795
01:26:51,900 --> 01:26:55,440
or a device to detect failure

1796
01:26:55,440 --> 01:26:57,540
Network the network will detect the

1797
01:26:57,540 --> 01:27:00,060
failure and notify its a failure to the

1798
01:27:00,060 --> 01:27:03,139
access endpoints

1799
01:27:03,139 --> 01:27:07,139
so uh okay regardless of their size of

1800
01:27:07,139 --> 01:27:08,280
the network

1801
01:27:08,280 --> 01:27:12,060
so you you you you plan to do it as a

1802
01:27:12,060 --> 01:27:14,520
distributed system or you you look at

1803
01:27:14,520 --> 01:27:18,120
centralized uh system that can needs to

1804
01:27:18,120 --> 01:27:20,880
know about the failure

1805
01:27:20,880 --> 01:27:24,960
okay well we are just a tool do it by

1806
01:27:24,960 --> 01:27:27,179
the network device I mean distributed

1807
01:27:27,179 --> 01:27:29,460
system we don't have a centralized

1808
01:27:29,460 --> 01:27:33,360
system to detect detect the failure

1809
01:27:33,360 --> 01:27:37,560
so each device in the network

1810
01:27:37,560 --> 01:27:40,440
must learn about the failure

1811
01:27:40,440 --> 01:27:43,260
yeah this is a this is the first step

1812
01:27:43,260 --> 01:27:46,380
later maybe maybe do some optimize about

1813
01:27:46,380 --> 01:27:48,840
how to reduce some information and to

1814
01:27:48,840 --> 01:27:51,080
the network

1815
01:27:52,380 --> 01:27:54,840
well uh I I think that that's already

1816
01:27:54,840 --> 01:27:58,620
can be achieved through the igp protocol

1817
01:27:58,620 --> 01:28:01,560
uh yeah you mean that how to

1818
01:28:01,560 --> 01:28:04,520
implementation the network information

1819
01:28:04,520 --> 01:28:07,620
signalization this is this is not

1820
01:28:07,620 --> 01:28:11,840
described in our framework now

1821
01:28:13,100 --> 01:28:15,840
let's take it to the list again this is

1822
01:28:15,840 --> 01:28:19,380
so uh I'll let David talk about nvme and

1823
01:28:19,380 --> 01:28:21,900
uh I'll take a second as a working group

1824
01:28:21,900 --> 01:28:24,900
participant talk about clusters machine

1825
01:28:24,900 --> 01:28:27,420
learning classes specifically the goal

1826
01:28:27,420 --> 01:28:29,219
is to converge with a number of

1827
01:28:29,219 --> 01:28:31,980
attitudes not number of seconds

1828
01:28:31,980 --> 01:28:35,400
the infrastructure is highly parallel

1829
01:28:35,400 --> 01:28:37,380
massively parallel so there's no single

1830
01:28:37,380 --> 01:28:39,659
point of failure the goal is in

1831
01:28:39,659 --> 01:28:41,760
requirement is to detect failure as soon

1832
01:28:41,760 --> 01:28:44,280
as possible and Route around it if

1833
01:28:44,280 --> 01:28:46,500
you're an accurate Network this is

1834
01:28:46,500 --> 01:28:48,360
commonly implemented on the host today

1835
01:28:48,360 --> 01:28:50,460
you could you could flow Bender or

1836
01:28:50,460 --> 01:28:52,800
variety of other techniques to change

1837
01:28:52,800 --> 01:28:55,620
entropy to your out round failure if you

1838
01:28:55,620 --> 01:28:57,600
need to notify a controller you're in

1839
01:28:57,600 --> 01:29:00,239
seconds your machine learning job is

1840
01:29:00,239 --> 01:29:02,400
dead you lost hundreds of millions of

1841
01:29:02,400 --> 01:29:05,400
dollars potentially so the requirements

1842
01:29:05,400 --> 01:29:07,199
aren't suitable for machine learning

1843
01:29:07,199 --> 01:29:09,840
clusters in any possible way

1844
01:29:09,840 --> 01:29:11,940
that's my personal

1845
01:29:11,940 --> 01:29:15,300
trainer okay so uh my name is David

1846
01:29:15,300 --> 01:29:18,239
black I work for uh dell EMC and I sort

1847
01:29:18,239 --> 01:29:19,500
of feel like there's one wonderful

1848
01:29:19,500 --> 01:29:21,000
British phrase for the opposition party

1849
01:29:21,000 --> 01:29:23,880
in Parliament uh it's now with Charles's

1850
01:29:23,880 --> 01:29:25,920
King is his Majesty's loyal opposition

1851
01:29:25,920 --> 01:29:29,040
and I would lay emphasis on the loyal in

1852
01:29:29,040 --> 01:29:30,719
that please and Frank would like to make

1853
01:29:30,719 --> 01:29:32,760
a pause contribution here I'm one of the

1854
01:29:32,760 --> 01:29:34,739
original designers of MV mirror fabrics

1855
01:29:34,739 --> 01:29:37,980
and the Envy uh me over TCP transport

1856
01:29:37,980 --> 01:29:40,679
that is of primary interest to the

1857
01:29:40,679 --> 01:29:42,120
authors I guess the first thing I should

1858
01:29:42,120 --> 01:29:44,760
say is that I'm surprised the storage

1859
01:29:44,760 --> 01:29:47,940
networking configuration shown in the uh

1860
01:29:47,940 --> 01:29:51,120
slides are unrealistic uh it's an active

1861
01:29:51,120 --> 01:29:52,920
passive uh configuration storage

1862
01:29:52,920 --> 01:29:55,199
networking is typically moved to active

1863
01:29:55,199 --> 01:29:57,719
active these days which means as opposed

1864
01:29:57,719 --> 01:29:59,760
to Second path being backup the second

1865
01:29:59,760 --> 01:30:01,620
path is active so if you've got a

1866
01:30:01,620 --> 01:30:03,420
failure on the first path There's an

1867
01:30:03,420 --> 01:30:05,219
opportunity to immediately use a second

1868
01:30:05,219 --> 01:30:07,440
path to get that failure and information

1869
01:30:07,440 --> 01:30:09,840
uh communicated without having to go

1870
01:30:09,840 --> 01:30:11,340
sort of indirected through all the

1871
01:30:11,340 --> 01:30:12,840
switches

1872
01:30:12,840 --> 01:30:14,400
um and that that's probably the the

1873
01:30:14,400 --> 01:30:17,040
better place to start uh for nvme

1874
01:30:17,040 --> 01:30:20,520
because uh you're not relying on on the

1875
01:30:20,520 --> 01:30:23,460
uh the level of switch interactions now

1876
01:30:23,460 --> 01:30:26,100
turn to those interactions I can't quite

1877
01:30:26,100 --> 01:30:28,260
figure out what's going on here but it

1878
01:30:28,260 --> 01:30:29,639
looks like

1879
01:30:29,639 --> 01:30:31,500
um the failure detection mechanism is

1880
01:30:31,500 --> 01:30:35,639
building a model of the topology and in

1881
01:30:35,639 --> 01:30:38,219
particular of Ip accessibility for the

1882
01:30:38,219 --> 01:30:40,080
cases in which Link in the network fails

1883
01:30:40,080 --> 01:30:42,540
that's not a good idea to do on doing

1884
01:30:42,540 --> 01:30:44,820
their own routing system is the

1885
01:30:44,820 --> 01:30:46,500
authority of what network topology is

1886
01:30:46,500 --> 01:30:48,179
what the connectivity is and what IP

1887
01:30:48,179 --> 01:30:49,500
addresses are reachable from where

1888
01:30:49,500 --> 01:30:53,280
please don't reinvent that and I guess

1889
01:30:53,280 --> 01:30:55,440
uh one of the major point of minor point

1890
01:30:55,440 --> 01:30:57,719
the drafts labeled security

1891
01:30:57,719 --> 01:31:00,780
considerations as n a which I presume

1892
01:31:00,780 --> 01:31:02,699
stood for not applicable uh

1893
01:31:02,699 --> 01:31:04,080
unfortunately also stands for not

1894
01:31:04,080 --> 01:31:06,659
acceptable this class of it's broken

1895
01:31:06,659 --> 01:31:10,320
gone mechanism is a great Vector for a

1896
01:31:10,320 --> 01:31:12,900
denial of service attack and and uh

1897
01:31:12,900 --> 01:31:14,280
that's going to take some serious

1898
01:31:14,280 --> 01:31:18,060
security thought uh minor point is that

1899
01:31:18,060 --> 01:31:20,520
um real when we talk about link failures

1900
01:31:20,520 --> 01:31:22,260
we try to talk about as binary the link

1901
01:31:22,260 --> 01:31:25,199
is either working or it's not real links

1902
01:31:25,199 --> 01:31:28,980
fail in really interesting ways the uh

1903
01:31:28,980 --> 01:31:30,239
draft office said that they don't want

1904
01:31:30,239 --> 01:31:33,120
to use BFD okay but need to do something

1905
01:31:33,120 --> 01:31:34,620
so if the switches aside the link has

1906
01:31:34,620 --> 01:31:36,840
failed turn the link off the other end

1907
01:31:36,840 --> 01:31:38,400
of the link generally tends to notice

1908
01:31:38,400 --> 01:31:39,960
pretty quickly that lack of light means

1909
01:31:39,960 --> 01:31:41,580
means a dead link and then you don't you

1910
01:31:41,580 --> 01:31:43,020
don't have a problem with the two ends

1911
01:31:43,020 --> 01:31:46,020
uh disagreeing on link failure

1912
01:31:46,020 --> 01:31:48,000
okay thanks for the opportunity be happy

1913
01:31:48,000 --> 01:31:50,460
to take any questions uh including from

1914
01:31:50,460 --> 01:31:53,940
uh uh hi Beau if he's still on yeah

1915
01:31:53,940 --> 01:31:58,440
okay thanks for your comments

1916
01:31:58,739 --> 01:32:00,739
um

1917
01:32:02,639 --> 01:32:05,360
thank you dude

1918
01:32:05,580 --> 01:32:08,280
and Versace is coming just to let you

1919
01:32:08,280 --> 01:32:10,739
know All Storage protocols as well as

1920
01:32:10,739 --> 01:32:13,440
your Gmail like product calls do

1921
01:32:13,440 --> 01:32:15,620
Implement their own livability

1922
01:32:15,620 --> 01:32:18,500
mechanisms at much lower layers than AP

1923
01:32:18,500 --> 01:32:22,380
and it it's very fast it's actually rtt

1924
01:32:22,380 --> 01:32:24,960
Mach 2 rtts so we are talking Nano

1925
01:32:24,960 --> 01:32:27,000
seconds definitely not seven can you

1926
01:32:27,000 --> 01:32:30,480
please uh show this slide with the

1927
01:32:30,480 --> 01:32:35,059
storage a network architecture

1928
01:32:35,400 --> 01:32:37,320
from the previous presentation if

1929
01:32:37,320 --> 01:32:39,239
possible

1930
01:32:39,239 --> 01:32:41,880
yeah next

1931
01:32:41,880 --> 01:32:43,320
there is a

1932
01:32:43,320 --> 01:32:46,020
the next one

1933
01:32:46,020 --> 01:32:47,760
uh

1934
01:32:47,760 --> 01:32:49,679
yes this one

1935
01:32:49,679 --> 01:32:53,280
uh I just would like to say that in this

1936
01:32:53,280 --> 01:32:56,400
configuration if switch one and switch

1937
01:32:56,400 --> 01:33:00,480
two were connected and if access of

1938
01:33:00,480 --> 01:33:03,659
hosts to storage One turns three two

1939
01:33:03,659 --> 01:33:07,620
stars three were not uh my IP addresses

1940
01:33:07,620 --> 01:33:10,920
of these devices on the links connecting

1941
01:33:10,920 --> 01:33:13,139
them to the switches but on some kind of

1942
01:33:13,139 --> 01:33:17,040
say Lubeck addresses switch the switches

1943
01:33:17,040 --> 01:33:19,800
that in Fairfax can detect very quickly

1944
01:33:19,800 --> 01:33:22,860
the link failures could simply rear out

1945
01:33:22,860 --> 01:33:25,920
whatever uh our exchange happens between

1946
01:33:25,920 --> 01:33:29,280
host one and host any specific host and

1947
01:33:29,280 --> 01:33:31,800
any specific storage without involving

1948
01:33:31,800 --> 01:33:35,100
any interaction in the hosts whether the

1949
01:33:35,100 --> 01:33:37,320
host itself the host was remain

1950
01:33:37,320 --> 01:33:39,900
completely ignorant of what happens in

1951
01:33:39,900 --> 01:33:42,719
the network which most probably is what

1952
01:33:42,719 --> 01:33:47,060
most Network operators would prefer

1953
01:33:47,880 --> 01:33:49,320
uh

1954
01:33:49,320 --> 01:33:55,380
if the switches are not connected uh

1955
01:33:55,440 --> 01:33:58,300
this looks indeed like I think

1956
01:33:58,300 --> 01:33:59,699
[Music]

1957
01:33:59,699 --> 01:34:03,179
David has said a somewhat problematic

1958
01:34:03,179 --> 01:34:05,219
Network architecture but I did not think

1959
01:34:05,219 --> 01:34:09,120
that we have to uh I'm not sure where we

1960
01:34:09,120 --> 01:34:13,739
here should try to address the what

1961
01:34:13,739 --> 01:34:16,020
personalized see as a poor Network

1962
01:34:16,020 --> 01:34:19,020
design by propagating some new

1963
01:34:19,020 --> 01:34:22,280
functionality to hosts

1964
01:34:27,060 --> 01:34:31,040
okay thanks for your comments okay

1965
01:34:34,080 --> 01:34:36,060
okay

1966
01:34:36,060 --> 01:34:37,800
so um

1967
01:34:37,800 --> 01:34:40,139
thank you for the presentation and all

1968
01:34:40,139 --> 01:34:42,120
the comments are great so let's go to

1969
01:34:42,120 --> 01:34:43,800
the next one

1970
01:34:43,800 --> 01:34:45,920
um

1971
01:34:49,560 --> 01:34:52,199
oh by the way if you are on site please

1972
01:34:52,199 --> 01:34:54,480
make sure you scan the QR code and sign

1973
01:34:54,480 --> 01:34:57,480
into the meeting so

1974
01:34:57,480 --> 01:35:00,019
yeah

1975
01:35:00,360 --> 01:35:03,620
just a certain room

1976
01:35:13,560 --> 01:35:16,280
of course

1977
01:35:23,340 --> 01:35:26,340
like this no I I passed you the

1978
01:35:26,340 --> 01:35:28,580
commercial

1979
01:35:29,340 --> 01:35:33,560
you don't share this life

1980
01:35:50,360 --> 01:35:56,159
okay everyone and I will give uh uh as a

1981
01:35:56,159 --> 01:35:59,159
physics deployment use case so you can

1982
01:35:59,159 --> 01:36:01,380
have this time and

1983
01:36:01,380 --> 01:36:03,260
okay

1984
01:36:03,260 --> 01:36:07,920
and about this uh this document is a

1985
01:36:07,920 --> 01:36:10,679
Services deployment Constitution and

1986
01:36:10,679 --> 01:36:14,880
this is the zero sixth version so at the

1987
01:36:14,880 --> 01:36:17,460
first I will give our simple instruction

1988
01:36:17,460 --> 01:36:22,860
to the document now and uh as rb6 has a

1989
01:36:22,860 --> 01:36:25,519
significance

1990
01:36:29,120 --> 01:36:32,520
and other

1991
01:36:32,520 --> 01:36:36,900
uh what you cause to use Asics and have

1992
01:36:36,900 --> 01:36:39,960
and as so far one thousand and each

1993
01:36:39,960 --> 01:36:41,179
controller

1994
01:36:41,179 --> 01:36:45,920
networks have deployed the SMS sr6 V6

1995
01:36:45,920 --> 01:36:51,600
and so and also the SM Sr V6 policy have

1996
01:36:51,600 --> 01:36:54,360
also been deployed to money

1997
01:36:54,360 --> 01:36:59,940
networks and also use like as FD and TFA

1998
01:36:59,940 --> 01:37:03,659
and a filter and like this future also

1999
01:37:03,659 --> 01:37:07,980
have deployed to improve improve the SOA

2000
01:37:07,980 --> 01:37:12,900
of the network and uh and currently

2001
01:37:12,900 --> 01:37:15,659
money

2002
01:37:15,659 --> 01:37:17,580
um money networker was thinking about

2003
01:37:17,580 --> 01:37:23,840
the smooth migration to as a Basics and

2004
01:37:23,840 --> 01:37:27,420
countries so this document will give

2005
01:37:27,420 --> 01:37:32,280
some design and network design and the

2006
01:37:32,280 --> 01:37:37,099
migration guidance about about this

2007
01:37:38,940 --> 01:37:42,860
okay and this as a ZO6

2008
01:37:42,860 --> 01:37:47,300
we add a new use case about the

2009
01:37:47,300 --> 01:37:50,400
agriculture Bank of general diploma in

2010
01:37:50,400 --> 01:37:53,400
the case and this the agriculture Bank

2011
01:37:53,400 --> 01:37:57,540
channel is the top top five biggest bank

2012
01:37:57,540 --> 01:38:00,739
in Channel and the deployment is the

2013
01:38:00,739 --> 01:38:05,880
deploy the SR srv6 policy and controller

2014
01:38:05,880 --> 01:38:10,260
in the backbone Network and so first of

2015
01:38:10,260 --> 01:38:12,320
all we can

2016
01:38:12,320 --> 01:38:15,960
introduce the all the network status

2017
01:38:15,960 --> 01:38:20,340
in all the network uh the the ABC they

2018
01:38:20,340 --> 01:38:25,980
deploy osb2 and it is very six to asset

2019
01:38:25,980 --> 01:38:30,300
background and to to get the network and

2020
01:38:30,300 --> 01:38:34,620
to cut the C and P and to save here to

2021
01:38:34,620 --> 01:38:37,500
connect here and I always through VPN is

2022
01:38:37,500 --> 01:38:40,199
deployed at the local network to carry

2023
01:38:40,199 --> 01:38:43,620
the service like the financial services

2024
01:38:43,620 --> 01:38:46,320
and office service and internet service

2025
01:38:46,320 --> 01:38:48,070
industration

2026
01:38:48,070 --> 01:38:54,139
[Music]

2027
01:38:56,780 --> 01:39:01,860
VPN and the SRT is used but it is hard

2028
01:39:01,860 --> 01:39:04,860
to attention to the branch and to

2029
01:39:04,860 --> 01:39:07,560
implement and to end as a traffic

2030
01:39:07,560 --> 01:39:08,820
management

2031
01:39:08,820 --> 01:39:11,340
and the traffic between the branches and

2032
01:39:11,340 --> 01:39:14,760
these centers uh has

2033
01:39:14,760 --> 01:39:17,760
ability

2034
01:39:29,340 --> 01:39:33,869
[Music]

2035
01:39:44,760 --> 01:39:46,739
all right

2036
01:39:46,739 --> 01:39:50,400
okay so for the new networker the ABC

2037
01:39:50,400 --> 01:39:53,400
have deployed the network controller and

2038
01:39:53,400 --> 01:39:57,179
as a Basics policy over its backbone so

2039
01:39:57,179 --> 01:40:00,060
to automatically optimize the link

2040
01:40:00,060 --> 01:40:04,320
traffic and the SR policy is used to

2041
01:40:04,320 --> 01:40:05,960
implement the

2042
01:40:05,960 --> 01:40:10,860
and the calculated in centralized and

2043
01:40:10,860 --> 01:40:12,500
about

2044
01:40:12,500 --> 01:40:16,880
one 100

2045
01:40:17,719 --> 01:40:22,199
are deployed in the internet worker and

2046
01:40:22,199 --> 01:40:24,620
password

2047
01:40:24,679 --> 01:40:29,699
since the least launch uh mostly is less

2048
01:40:29,699 --> 01:40:35,280
than six so use uh use the IPv6 IPv6

2049
01:40:35,280 --> 01:40:39,060
original and only Japan so and the

2050
01:40:39,060 --> 01:40:43,139
compression is not used and the VPN are

2051
01:40:43,139 --> 01:40:46,080
divided by the service and the based the

2052
01:40:46,080 --> 01:40:50,880
company of eviction and the tsap

2053
01:40:50,880 --> 01:40:55,139
okay so and also a service and the VX

2054
01:40:55,139 --> 01:40:58,440
line are deployed as a DCP and to

2055
01:40:58,440 --> 01:41:00,480
implement the tunnel in working between

2056
01:41:00,480 --> 01:41:03,300
the DC and the and Backbone in the

2057
01:41:03,300 --> 01:41:07,320
worker and spfd is deployed to detect

2058
01:41:07,320 --> 01:41:08,300
the

2059
01:41:08,300 --> 01:41:12,360
service policy and connected when the

2060
01:41:12,360 --> 01:41:14,580
password fails and the traffic will

2061
01:41:14,580 --> 01:41:18,080
quickly switch to another normal path

2062
01:41:18,080 --> 01:41:22,920
and also a feature is used to to deploy

2063
01:41:22,920 --> 01:41:24,139
the two

2064
01:41:24,139 --> 01:41:27,120
implementing the service level I would

2065
01:41:27,120 --> 01:41:32,239
say detection so in the ABC

2066
01:41:32,239 --> 01:41:36,060
networks the future is deployed and the

2067
01:41:36,060 --> 01:41:41,639
next maybe is we the the is planning to

2068
01:41:41,639 --> 01:41:46,040
deploy the new future and in the future

2069
01:41:46,199 --> 01:41:49,759
okay that's all thank you

2070
01:41:51,840 --> 01:41:53,520
may ask you a question as a working

2071
01:41:53,520 --> 01:41:55,619
group participant which of the services

2072
01:41:55,619 --> 01:41:58,139
presented cannot be implemented over the

2073
01:41:58,139 --> 01:42:00,540
southern PLS you said the service has

2074
01:42:00,540 --> 01:42:03,719
advantages from your presentation it's

2075
01:42:03,719 --> 01:42:05,360
unclear

2076
01:42:05,360 --> 01:42:09,330
you could go to the okay Services

2077
01:42:09,330 --> 01:42:11,060
[Music]

2078
01:42:11,060 --> 01:42:14,880
countries is not used in the in the

2079
01:42:14,880 --> 01:42:18,420
campus in the campus so we just used as

2080
01:42:18,420 --> 01:42:21,239
a bone but for the campuses they can use

2081
01:42:21,239 --> 01:42:24,540
them so they use asafix country use they

2082
01:42:24,540 --> 01:42:28,980
use the sr6 from the this complexity to

2083
01:42:28,980 --> 01:42:33,259
the the remote and the

2084
01:42:33,659 --> 01:42:35,340
um look

2085
01:42:35,340 --> 01:42:37,080
we'll take it to the list but looking

2086
01:42:37,080 --> 01:42:40,320
through the list of features implemented

2087
01:42:40,320 --> 01:42:42,139
there's nothing that prevents

2088
01:42:42,139 --> 01:42:44,219
implementation of these teachers there's

2089
01:42:44,219 --> 01:42:46,580
any other technologies that exist today

2090
01:42:46,580 --> 01:42:50,840
you mean the advanced

2091
01:42:50,880 --> 01:42:54,199
I'll comment on the list

2092
01:42:56,520 --> 01:43:02,540
here from the TCP to another disappear

2093
01:43:09,540 --> 01:43:12,659
so looking at the list here

2094
01:43:12,659 --> 01:43:16,199
you said that it requires srv6 in order

2095
01:43:16,199 --> 01:43:18,119
to implement new services

2096
01:43:18,119 --> 01:43:20,580
I don't see in single Services cannot be

2097
01:43:20,580 --> 01:43:22,560
implemented with other Technologies I

2098
01:43:22,560 --> 01:43:24,719
think you you really need to clarify

2099
01:43:24,719 --> 01:43:26,699
what are the unique and distinct

2100
01:43:26,699 --> 01:43:28,320
advantages that would require

2101
01:43:28,320 --> 01:43:30,420
significant investment into new

2102
01:43:30,420 --> 01:43:32,580
technology in order to benefit from it

2103
01:43:32,580 --> 01:43:35,280
once again what you see here doesn't

2104
01:43:35,280 --> 01:43:38,100
just maybe I can instantly use a

2105
01:43:38,100 --> 01:43:39,739
detailed department

2106
01:43:39,739 --> 01:43:44,419
yeah thank you okay thank you

2107
01:43:49,679 --> 01:43:52,679
yes

2108
01:43:55,739 --> 01:43:59,400
can you hear me yes yes yeah I just said

2109
01:43:59,400 --> 01:44:02,040
just a quick question uh you know your

2110
01:44:02,040 --> 01:44:05,340
SRV says are you but are you using uh is

2111
01:44:05,340 --> 01:44:07,020
there an inner working that you're using

2112
01:44:07,020 --> 01:44:09,659
between the data center and the core so

2113
01:44:09,659 --> 01:44:12,780
the core is srv6 and the data center is

2114
01:44:12,780 --> 01:44:15,619
VX slave

2115
01:44:17,360 --> 01:44:19,560
I don't think anyone can understand the

2116
01:44:19,560 --> 01:44:21,960
word of what you're saying if you cannot

2117
01:44:21,960 --> 01:44:23,340
get your mind quality better probably

2118
01:44:23,340 --> 01:44:24,840
would be better if you send it to the

2119
01:44:24,840 --> 01:44:25,619
list

2120
01:44:25,619 --> 01:44:27,119
okay okay

2121
01:44:27,119 --> 01:44:28,679
all right

2122
01:44:28,679 --> 01:44:29,760
thank you

2123
01:44:29,760 --> 01:44:31,619
thank you

2124
01:44:31,619 --> 01:44:34,400
okay thank you

2125
01:44:42,420 --> 01:44:44,820
hello hello can you hear me

2126
01:44:44,820 --> 01:44:48,019
chair can help me

2127
01:44:52,020 --> 01:44:54,480
yeah so this is a for young from China

2128
01:44:54,480 --> 01:44:57,540
mobile this proposal is a

2129
01:44:57,540 --> 01:45:01,619
by a joint effort of the China mobile

2130
01:45:01,619 --> 01:45:05,339
and the h3c

2131
01:45:08,940 --> 01:45:11,159
you have control of this life yeah yeah

2132
01:45:11,159 --> 01:45:13,679
I I I guess

2133
01:45:13,679 --> 01:45:16,800
yeah the background is that you know we

2134
01:45:16,800 --> 01:45:19,800
have a good definition on the srv6

2135
01:45:19,800 --> 01:45:23,100
hierarchy uh the first level is policy

2136
01:45:23,100 --> 01:45:27,360
as then come to the path and the bottom

2137
01:45:27,360 --> 01:45:33,300
is a sid list so uh that this is good if

2138
01:45:33,300 --> 01:45:38,940
we when we got a failure we think and Sr

2139
01:45:38,940 --> 01:45:41,239
policy as our policy

2140
01:45:41,239 --> 01:45:44,520
so it's a good protection

2141
01:45:44,520 --> 01:45:47,239
but in case of about

2142
01:45:47,239 --> 01:45:51,780
if we consider if the one policy run out

2143
01:45:51,780 --> 01:45:55,380
of the resources or the policy got some

2144
01:45:55,380 --> 01:45:59,280
failure in for example some of the

2145
01:45:59,280 --> 01:46:03,300
sincerely field so the bandwidth

2146
01:46:03,300 --> 01:46:07,860
got impacted so not not all of the

2147
01:46:07,860 --> 01:46:12,540
services can be uh can be can be assured

2148
01:46:12,540 --> 01:46:16,739
with a good quality so we want to what

2149
01:46:16,739 --> 01:46:19,500
we what we want to do

2150
01:46:19,500 --> 01:46:22,080
in case of there are still some of other

2151
01:46:22,080 --> 01:46:26,540
parties that can carry those those

2152
01:46:26,540 --> 01:46:30,320
uh over traffic

2153
01:46:30,840 --> 01:46:34,199
so that's a that's a question that's a

2154
01:46:34,199 --> 01:46:37,980
problem we are we are we are thinking

2155
01:46:37,980 --> 01:46:40,380
so uh

2156
01:46:40,380 --> 01:46:44,600
so for example when there are 100

2157
01:46:44,600 --> 01:46:47,820
service and voice traffic has have

2158
01:46:47,820 --> 01:46:51,000
different as our current that means they

2159
01:46:51,000 --> 01:46:53,219
have they got different of the uh as a

2160
01:46:53,219 --> 01:46:56,340
policy because each Sr policy has

2161
01:46:56,340 --> 01:46:59,280
can be mapped to one color

2162
01:46:59,280 --> 01:47:00,900
so they are carried by different

2163
01:47:00,900 --> 01:47:02,659
policies

2164
01:47:02,659 --> 01:47:07,860
part of failure happened with with uh as

2165
01:47:07,860 --> 01:47:09,360
a policy carried

2166
01:47:09,360 --> 01:47:13,520
the OE traffic or the voice traffic so

2167
01:47:13,520 --> 01:47:17,159
uh we we should have some way to

2168
01:47:17,159 --> 01:47:22,619
uh to to keep our services running

2169
01:47:23,460 --> 01:47:27,239
so the idea is what we what what we

2170
01:47:27,239 --> 01:47:29,880
think is first is which we should

2171
01:47:29,880 --> 01:47:31,080
maximize

2172
01:47:31,080 --> 01:47:34,920
the failure or the degradation

2173
01:47:34,920 --> 01:47:37,619
protection in case of there's still some

2174
01:47:37,619 --> 01:47:40,500
resources we can use

2175
01:47:40,500 --> 01:47:44,159
the second one is we should minimum the

2176
01:47:44,159 --> 01:47:45,179
impact

2177
01:47:45,179 --> 01:47:48,840
after after taking the repair repairing

2178
01:47:48,840 --> 01:47:50,880
action that means when the general

2179
01:47:50,880 --> 01:47:54,960
failures happened we need to uh not not

2180
01:47:54,960 --> 01:47:56,239
not

2181
01:47:56,239 --> 01:47:59,520
switch over all of the traffic to the

2182
01:47:59,520 --> 01:48:02,400
other policy but just pick up some of

2183
01:48:02,400 --> 01:48:04,739
the some of the prefixes

2184
01:48:04,739 --> 01:48:08,340
from the impacted policy to the the the

2185
01:48:08,340 --> 01:48:13,139
the the other the other policy

2186
01:48:13,139 --> 01:48:16,560
so the last one is is that way we can

2187
01:48:16,560 --> 01:48:18,360
maximize the band-based efficiency

2188
01:48:18,360 --> 01:48:21,239
because uh in case of there's still some

2189
01:48:21,239 --> 01:48:25,619
uh bandwidth available we can reuse them

2190
01:48:25,619 --> 01:48:27,119
to

2191
01:48:27,119 --> 01:48:30,060
keep our services

2192
01:48:30,060 --> 01:48:32,580
running

2193
01:48:32,580 --> 01:48:37,080
so the then uh the best idea is that we

2194
01:48:37,080 --> 01:48:41,040
need to set some rule on which policy

2195
01:48:41,040 --> 01:48:44,520
could protect what policy

2196
01:48:44,520 --> 01:48:49,800
so the idea is to uh to to group the

2197
01:48:49,800 --> 01:48:51,780
policies together

2198
01:48:51,780 --> 01:48:55,260
uh and then have some some some some

2199
01:48:55,260 --> 01:48:59,760
some some priority mechanism to uh to

2200
01:48:59,760 --> 01:49:00,900
give

2201
01:49:00,900 --> 01:49:06,139
the order of the uh traffic uh

2202
01:49:06,139 --> 01:49:09,380
switch over

2203
01:49:10,320 --> 01:49:13,800
so the uh so this is the basic idea so

2204
01:49:13,800 --> 01:49:15,900
the zero there will be

2205
01:49:15,900 --> 01:49:19,020
uh flow classification which will

2206
01:49:19,020 --> 01:49:22,679
identify the service class and then

2207
01:49:22,679 --> 01:49:27,719
third class does does map to the color

2208
01:49:27,719 --> 01:49:31,679
of the as a policy and then we got the

2209
01:49:31,679 --> 01:49:35,960
flow steering to Stair not uh

2210
01:49:35,960 --> 01:49:40,380
individual policy but uh policy group

2211
01:49:40,380 --> 01:49:42,320
and then

2212
01:49:42,320 --> 01:49:47,699
there is a new uh new new unit or

2213
01:49:47,699 --> 01:49:49,920
component which is intelligence logging

2214
01:49:49,920 --> 01:49:52,199
which takes the

2215
01:49:52,199 --> 01:49:54,960
takes takes the traffic and makes the

2216
01:49:54,960 --> 01:49:59,340
decision on which which the policy that

2217
01:49:59,340 --> 01:50:02,820
it should forward the traffic

2218
01:50:02,820 --> 01:50:07,739
so uh the intelligent blocking unit also

2219
01:50:07,739 --> 01:50:10,020
takes some input of the network called

2220
01:50:10,020 --> 01:50:13,440
environment for example the BFD or some

2221
01:50:13,440 --> 01:50:18,780
of kind of uh latency or loss

2222
01:50:18,780 --> 01:50:22,940
passing off as an input

2223
01:50:27,239 --> 01:50:31,139
so first one is uh is a simple just a

2224
01:50:31,139 --> 01:50:33,900
flu classification and just take a take

2225
01:50:33,900 --> 01:50:38,400
some some of the uh some of the of

2226
01:50:38,400 --> 01:50:42,600
tuples or something they are to uh

2227
01:50:42,600 --> 01:50:45,440
information out and

2228
01:50:45,440 --> 01:50:49,139
again and to identify the first class

2229
01:50:49,139 --> 01:50:53,000
and the first Theory unit is also a

2230
01:50:53,000 --> 01:50:55,619
very straightforward

2231
01:50:55,619 --> 01:51:00,020
it's just a mapped the search cast to us

2232
01:51:00,020 --> 01:51:03,619
as a pass group

2233
01:51:04,020 --> 01:51:06,480
so the the

2234
01:51:06,480 --> 01:51:09,600
thing is so we come to the Intensive

2235
01:51:09,600 --> 01:51:12,619
intelligence login unit so this part we

2236
01:51:12,619 --> 01:51:16,560
takes the as a pulse group as input and

2237
01:51:16,560 --> 01:51:18,540
also some of the measurement

2238
01:51:18,540 --> 01:51:22,800
result as input so here is a policy

2239
01:51:22,800 --> 01:51:25,800
decision decision

2240
01:51:25,800 --> 01:51:30,600
function which which can just just

2241
01:51:30,600 --> 01:51:33,600
decide which which policy the traffic

2242
01:51:33,600 --> 01:51:36,840
should be go so we have the

2243
01:51:36,840 --> 01:51:40,199
several policies with each with the

2244
01:51:40,199 --> 01:51:43,500
priority set so prior to just represent

2245
01:51:43,500 --> 01:51:45,500
a

2246
01:51:45,500 --> 01:51:49,219
represents the highest

2247
01:51:49,280 --> 01:51:55,639
so so so the priority is a uh is is

2248
01:51:55,639 --> 01:51:58,920
defines the manner what's what's the

2249
01:51:58,920 --> 01:51:59,940
highest

2250
01:51:59,940 --> 01:52:02,719
uh

2251
01:52:03,000 --> 01:52:06,060
priority that's the parts policy should

2252
01:52:06,060 --> 01:52:09,179
take take a spill over traffic from the

2253
01:52:09,179 --> 01:52:13,020
Imp from the failure impact either

2254
01:52:13,020 --> 01:52:15,739
policy

2255
01:52:19,980 --> 01:52:21,659
yeah

2256
01:52:21,659 --> 01:52:26,100
yeah so uh there is a level called

2257
01:52:26,100 --> 01:52:29,820
measurement units that takes some some

2258
01:52:29,820 --> 01:52:34,320
to marry some latency or Twitter or loss

2259
01:52:34,320 --> 01:52:38,760
so uh last one is a flow foreign unit

2260
01:52:38,760 --> 01:52:41,580
that is normal so we have the example

2261
01:52:41,580 --> 01:52:46,280
here is first we Define the some policy

2262
01:52:46,280 --> 01:52:49,199
policies and with colors and then we

2263
01:52:49,199 --> 01:52:52,500
combine those the second step we combine

2264
01:52:52,500 --> 01:52:56,219
some of the houses together with with

2265
01:52:56,219 --> 01:52:57,780
the color

2266
01:52:57,780 --> 01:53:01,739
the third step we just mapping the

2267
01:53:01,739 --> 01:53:03,900
traffic to those

2268
01:53:03,900 --> 01:53:06,179
those past group

2269
01:53:06,179 --> 01:53:09,300
so that's that's the idea of what we

2270
01:53:09,300 --> 01:53:12,420
want to do but uh maybe it's not not

2271
01:53:12,420 --> 01:53:14,280
perfect

2272
01:53:14,280 --> 01:53:18,920
but we can improve it so that's all

2273
01:53:19,500 --> 01:53:22,040
thank you

2274
01:53:23,119 --> 01:53:25,679
we are not taking questions here present

2275
01:53:25,679 --> 01:53:28,100
to the list

2276
01:53:28,920 --> 01:53:30,480
thank you for the presentation we'll go

2277
01:53:30,480 --> 01:53:33,440
to the next presenter

2278
01:53:50,040 --> 01:53:51,780
okay

2279
01:53:51,780 --> 01:53:55,679
um so probably I can already start so

2280
01:53:55,679 --> 01:53:57,060
um my name is David Rowe from Huawei

2281
01:53:57,060 --> 01:53:59,280
Technologies this is a work actually um

2282
01:53:59,280 --> 01:54:01,440
together with my colleaguers Luigi uh

2283
01:54:01,440 --> 01:54:05,940
Eugene and um training talk about the

2284
01:54:05,940 --> 01:54:08,699
um signaling in network computing

2285
01:54:08,699 --> 01:54:11,280
operation

2286
01:54:11,280 --> 01:54:12,000
um

2287
01:54:12,000 --> 01:54:13,679
so

2288
01:54:13,679 --> 01:54:16,280
sorry

2289
01:54:17,239 --> 01:54:21,799
ah okay okay sorry

2290
01:54:25,219 --> 01:54:28,380
foreign maybe you can just

2291
01:54:28,380 --> 01:54:30,600
scan the phone oh okay should work now

2292
01:54:30,600 --> 01:54:32,880
it works yeah so

2293
01:54:32,880 --> 01:54:34,619
um things I only have a few minutes left

2294
01:54:34,619 --> 01:54:37,500
I will be just speed up

2295
01:54:37,500 --> 01:54:39,300
um so the motivation basically is we

2296
01:54:39,300 --> 01:54:41,880
already observed a lot of network device

2297
01:54:41,880 --> 01:54:44,699
on taking some communication tasks to

2298
01:54:44,699 --> 01:54:46,739
improve the overall Network perform

2299
01:54:46,739 --> 01:54:50,219
overall system performance and typically

2300
01:54:50,219 --> 01:54:52,260
they are done in the program switches

2301
01:54:52,260 --> 01:54:53,520
right

2302
01:54:53,520 --> 01:54:56,520
um but we are lack of kind of generic

2303
01:54:56,520 --> 01:54:59,400
and general way to define what to do how

2304
01:54:59,400 --> 01:55:01,500
to do where I get the data and where to

2305
01:55:01,500 --> 01:55:02,820
how to

2306
01:55:02,820 --> 01:55:06,239
process it so that's the purpose of this

2307
01:55:06,239 --> 01:55:07,800
draft

2308
01:55:07,800 --> 01:55:10,679
if you look at the use case one of the

2309
01:55:10,679 --> 01:55:13,580
use case here is happening a lot AI

2310
01:55:13,580 --> 01:55:16,020
artificial intelligence machine learning

2311
01:55:16,020 --> 01:55:19,560
happened in the data center where you

2312
01:55:19,560 --> 01:55:21,960
try to distribute the tasks to different

2313
01:55:21,960 --> 01:55:24,080
hosts

2314
01:55:24,080 --> 01:55:26,699
those hosts will take part of the

2315
01:55:26,699 --> 01:55:28,440
calculation and the send without the

2316
01:55:28,440 --> 01:55:30,480
back and there's a APS server called

2317
01:55:30,480 --> 01:55:32,340
parameter server try to aggregate those

2318
01:55:32,340 --> 01:55:35,880
data and punch back the results so

2319
01:55:35,880 --> 01:55:38,219
traditionally the way is you build a

2320
01:55:38,219 --> 01:55:41,000
tree or start topology

2321
01:55:41,000 --> 01:55:44,699
where the PS server will react to all

2322
01:55:44,699 --> 01:55:47,159
the results from those hosts but

2323
01:55:47,159 --> 01:55:49,080
apparently you have an in-cast problem

2324
01:55:49,080 --> 01:55:51,360
number one secondly the PS server

2325
01:55:51,360 --> 01:55:53,880
becomes a bottleneck right although

2326
01:55:53,880 --> 01:55:56,100
there's other Solutions like all reduce

2327
01:55:56,100 --> 01:55:58,860
try to design the ring topology to

2328
01:55:58,860 --> 01:56:00,119
distribute the tasks to different

2329
01:56:00,119 --> 01:56:03,179
servers but still this is not really

2330
01:56:03,179 --> 01:56:06,199
ideal so

2331
01:56:06,199 --> 01:56:11,100
we uh we find that let's switch to do

2332
01:56:11,100 --> 01:56:13,980
that task in the wrong line rates will

2333
01:56:13,980 --> 01:56:16,380
be the up to uh will be the best option

2334
01:56:16,380 --> 01:56:19,320
so this is one of the actually

2335
01:56:19,320 --> 01:56:21,900
um use case there are two other use

2336
01:56:21,900 --> 01:56:23,520
cases happening in the data storage

2337
01:56:23,520 --> 01:56:26,460
Network where you want to store some

2338
01:56:26,460 --> 01:56:30,560
data you just trying to get the right

2339
01:56:30,560 --> 01:56:34,080
right so you have to really check the

2340
01:56:34,080 --> 01:56:36,900
lock and then um once you have this you

2341
01:56:36,900 --> 01:56:38,520
can do that but I will not really dive

2342
01:56:38,520 --> 01:56:40,679
deep deep into those use cases those are

2343
01:56:40,679 --> 01:56:42,480
the real use cases

2344
01:56:42,480 --> 01:56:45,000
um they really need the network switch

2345
01:56:45,000 --> 01:56:47,940
to help it's not like with networks

2346
01:56:47,940 --> 01:56:50,100
which you can do better no no they

2347
01:56:50,100 --> 01:56:52,199
really need the network to do something

2348
01:56:52,199 --> 01:56:54,600
for them

2349
01:56:54,600 --> 01:56:57,540
um so the idea basically is to offload

2350
01:56:57,540 --> 01:56:59,280
those leading coordination Mark and

2351
01:56:59,280 --> 01:57:01,800
bottleneck Computing uh operations to

2352
01:57:01,800 --> 01:57:03,719
the network device in order to improve

2353
01:57:03,719 --> 01:57:05,880
the system uh performance

2354
01:57:05,880 --> 01:57:08,639
of course we don't want to affect the

2355
01:57:08,639 --> 01:57:10,619
forwarding performance right

2356
01:57:10,619 --> 01:57:11,340
um

2357
01:57:11,340 --> 01:57:15,300
so two things we need one is generic and

2358
01:57:15,300 --> 01:57:18,300
simple operators are designed to to

2359
01:57:18,300 --> 01:57:21,000
execute those scenarios you need to know

2360
01:57:21,000 --> 01:57:24,000
what to do where the data comes from and

2361
01:57:24,000 --> 01:57:27,179
how do you process it secondly you need

2362
01:57:27,179 --> 01:57:30,179
to have a expected way to Route the

2363
01:57:30,179 --> 01:57:33,659
package to the right place so that they

2364
01:57:33,659 --> 01:57:34,619
can be

2365
01:57:34,619 --> 01:57:38,219
operate at all executed so a quick

2366
01:57:38,219 --> 01:57:41,880
overview about that is we have the uh

2367
01:57:41,880 --> 01:57:46,500
hosts which should tell uh what to do so

2368
01:57:46,500 --> 01:57:49,500
there's a async header created on top of

2369
01:57:49,500 --> 01:57:52,560
UDP to say that okay I want to do this

2370
01:57:52,560 --> 01:57:54,659
aggregation and the data are coming from

2371
01:57:54,659 --> 01:57:57,239
those resources and how many of them so

2372
01:57:57,239 --> 01:57:59,280
this can be information this is the

2373
01:57:59,280 --> 01:58:01,560
first part the second part actually is

2374
01:58:01,560 --> 01:58:04,920
you have to have a mechanism to look

2375
01:58:04,920 --> 01:58:07,800
back to the right place because you

2376
01:58:07,800 --> 01:58:09,420
probably don't know which switch has

2377
01:58:09,420 --> 01:58:12,659
that capability right so for that we can

2378
01:58:12,659 --> 01:58:14,340
use a lot of

2379
01:58:14,340 --> 01:58:17,099
um kind of mechanism to root back to the

2380
01:58:17,099 --> 01:58:18,199
right place

2381
01:58:18,199 --> 01:58:21,199
in this draft we use the example of

2382
01:58:21,199 --> 01:58:23,820
surface function training we can also

2383
01:58:23,820 --> 01:58:27,540
use as our signal routing or mpls or

2384
01:58:27,540 --> 01:58:29,940
even others right but in this particular

2385
01:58:29,940 --> 01:58:33,360
example we use sfc so you will you will

2386
01:58:33,360 --> 01:58:37,440
see that we have a sfc Ingress proxy try

2387
01:58:37,440 --> 01:58:41,520
to create Eternal and then to Route the

2388
01:58:41,520 --> 01:58:44,699
package to the right place

2389
01:58:44,699 --> 01:58:45,780
um

2390
01:58:45,780 --> 01:58:47,760
okay so

2391
01:58:47,760 --> 01:58:48,960
um so

2392
01:58:48,960 --> 01:58:52,980
first of all the sync header itself this

2393
01:58:52,980 --> 01:58:56,400
header is used to tell the switch what

2394
01:58:56,400 --> 01:58:58,679
to do so you will see that

2395
01:58:58,679 --> 01:59:00,900
um we have a group ID we have date of

2396
01:59:00,900 --> 01:59:04,020
resources data resource ID sequence

2397
01:59:04,020 --> 01:59:06,900
number they are all combined to tell the

2398
01:59:06,900 --> 01:59:11,040
the switch where the data is which data

2399
01:59:11,040 --> 01:59:13,320
I need to operate on then you you need

2400
01:59:13,320 --> 01:59:15,119
to specify what kind of operation right

2401
01:59:15,119 --> 01:59:19,320
is a it's a sum it's a maximum mean or

2402
01:59:19,320 --> 01:59:21,239
it's uh

2403
01:59:21,239 --> 01:59:25,679
um CNS FNA or others

2404
01:59:25,679 --> 01:59:28,139
um of course you have the data offset to

2405
01:59:28,139 --> 01:59:31,320
indicate where the data is in this

2406
01:59:31,320 --> 01:59:33,179
package right

2407
01:59:33,179 --> 01:59:36,780
um particularly there's a loopback flag

2408
01:59:36,780 --> 01:59:39,480
indicates that after this data operation

2409
01:59:39,480 --> 01:59:42,480
you need to send the data kind of uh

2410
01:59:42,480 --> 01:59:44,760
back to the source or you need to

2411
01:59:44,760 --> 01:59:48,500
continue forward to the destination

2412
01:59:49,980 --> 01:59:51,000
um so

2413
01:59:51,000 --> 01:59:53,219
the second part actually is creates a

2414
01:59:53,219 --> 01:59:55,320
kind of a tunneling in this case we use

2415
01:59:55,320 --> 01:59:58,739
sfc as I indicated so in the Ingress you

2416
01:59:58,739 --> 02:00:01,260
just wrap up with the next service

2417
02:00:01,260 --> 02:00:04,920
header until the egress and then send to

2418
02:00:04,920 --> 02:00:06,480
the destination of course in the middle

2419
02:00:06,480 --> 02:00:10,199
there's some nodes with the sync

2420
02:00:10,199 --> 02:00:14,719
capability to do the data operation

2421
02:00:15,900 --> 02:00:18,960
um so this is actually encapsulation uh

2422
02:00:18,960 --> 02:00:20,940
by using sfc

2423
02:00:20,940 --> 02:00:23,400
um we use the base header pass header

2424
02:00:23,400 --> 02:00:25,260
and the context header

2425
02:00:25,260 --> 02:00:27,780
um the context header is the sync header

2426
02:00:27,780 --> 02:00:29,880
we I just explained

2427
02:00:29,880 --> 02:00:33,540
um the service pass header uh are

2428
02:00:33,540 --> 02:00:36,420
defined in RFC 8300

2429
02:00:36,420 --> 02:00:38,520
and of course in the base header we have

2430
02:00:38,520 --> 02:00:39,900
to specify

2431
02:00:39,900 --> 02:00:43,739
um the a few things like lens TTL or

2432
02:00:43,739 --> 02:00:47,880
others for the metadata type by quiz

2433
02:00:47,880 --> 02:00:51,060
coincidence means our sync header is

2434
02:00:51,060 --> 02:00:54,599
only 16 bytes so we can use MD type 1

2435
02:00:54,599 --> 02:00:58,460
that fits very well

2436
02:00:59,520 --> 02:01:01,800
okay so these are the last slides so

2437
02:01:01,800 --> 02:01:03,960
basically this is the first trying and

2438
02:01:03,960 --> 02:01:05,639
there we know that

2439
02:01:05,639 --> 02:01:07,199
um

2440
02:01:07,199 --> 02:01:10,560
it's not very clear for us where is the

2441
02:01:10,560 --> 02:01:13,139
home for this kind of drafts because uh

2442
02:01:13,139 --> 02:01:16,260
um this is working on the kind of uh

2443
02:01:16,260 --> 02:01:20,639
data by leveraging the program switch we

2444
02:01:20,639 --> 02:01:23,400
use the sfc as a carrier but as I said

2445
02:01:23,400 --> 02:01:25,320
it might be other

2446
02:01:25,320 --> 02:01:27,300
um kind of uh

2447
02:01:27,300 --> 02:01:29,880
routing mechanism could be better suited

2448
02:01:29,880 --> 02:01:32,520
for for this case so we welcome any kind

2449
02:01:32,520 --> 02:01:34,440
of discussion

2450
02:01:34,440 --> 02:01:36,659
um and we are going to update the the

2451
02:01:36,659 --> 02:01:39,480
draft based on that of course and this

2452
02:01:39,480 --> 02:01:41,520
is only the data playing and Next Step

2453
02:01:41,520 --> 02:01:43,400
probably we will do the control plane

2454
02:01:43,400 --> 02:01:46,260
and others yeah

2455
02:01:46,260 --> 02:01:48,540
thank you thank you for the presentation

2456
02:01:48,540 --> 02:01:51,840
so with regards to home to the draft sfc

2457
02:01:51,840 --> 02:01:54,360
doesn't accept any new work and we are

2458
02:01:54,360 --> 02:01:56,460
looking for guidance from alvare and our

2459
02:01:56,460 --> 02:01:59,659
ideas to

2460
02:02:00,320 --> 02:02:05,099
okay yeah okay so we will let you know

2461
02:02:05,099 --> 02:02:08,400
yep okay thank you and thank you this is

2462
02:02:08,400 --> 02:02:09,659
very timely interesting work with

2463
02:02:09,659 --> 02:02:11,460
prolification Transformer models it

2464
02:02:11,460 --> 02:02:15,440
becomes business I do my best

2465
02:02:16,800 --> 02:02:20,099
thank you everyone and we are done in

2466
02:02:20,099 --> 02:02:24,860
London and hope to see you in Japan soon

2467
02:02:33,920 --> 02:02:36,739
thank you yes

2468
02:02:36,739 --> 02:02:40,580
I'm just gonna switch

2469
02:02:44,280 --> 02:02:47,520
so in network computers it's an existing

2470
02:02:47,520 --> 02:02:49,619
technology it's not new right there are

2471
02:02:49,619 --> 02:02:52,040
use cases

