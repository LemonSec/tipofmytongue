1
00:00:00,480 --> 00:00:03,380
foreign

2
00:00:32,098 --> 00:00:33,719
apparently everybody's just going to

3
00:00:33,719 --> 00:00:38,780
come into the one here this is one sorry

4
00:00:38,780 --> 00:00:40,559
because the big thing that says

5
00:00:40,559 --> 00:00:41,719
Kensington

6
00:00:41,719 --> 00:00:46,020
so I actually went down there yeah I

7
00:00:46,020 --> 00:00:47,879
actually went all the way down made up a

8
00:00:47,879 --> 00:00:51,239
sign saying technology deep Dives you

9
00:00:51,239 --> 00:00:54,078
are in the wrong place

10
00:00:56,640 --> 00:00:58,739
you need the real tool I need a real

11
00:00:58,739 --> 00:01:00,120
tool

12
00:01:00,120 --> 00:01:02,660
oh

13
00:01:04,379 --> 00:01:06,540
how are you this morning sir

14
00:01:06,540 --> 00:01:08,460
read my

15
00:01:08,460 --> 00:01:11,520
first left worse

16
00:01:11,520 --> 00:01:15,020
I get like this thing here

17
00:01:16,619 --> 00:01:20,600
and I see this set of people

18
00:01:20,840 --> 00:01:24,360
regardless of what

19
00:01:24,360 --> 00:01:28,880
the actual time zone is is

20
00:01:32,040 --> 00:01:35,040
okay

21
00:01:39,240 --> 00:01:42,199
other things

22
00:01:42,900 --> 00:01:45,900
full-time videos

23
00:01:45,900 --> 00:01:50,180
are you going to the slide flipping

24
00:01:50,960 --> 00:01:53,579
I guess there's

25
00:01:53,579 --> 00:01:55,920
basically no reason for me to be sitting

26
00:01:55,920 --> 00:01:58,079
here

27
00:01:58,079 --> 00:02:01,500
I don't think there's like a Reload

28
00:02:01,500 --> 00:02:04,159
ing yeah

29
00:02:12,239 --> 00:02:15,180
I saw them they're willing to

30
00:02:15,180 --> 00:02:17,900
watch the movie

31
00:02:18,060 --> 00:02:20,959
oh you're in the data

32
00:02:21,900 --> 00:02:23,340
I checked this morning and I was like

33
00:02:23,340 --> 00:02:24,420
where the hell

34
00:02:24,420 --> 00:02:27,379
looks oh it's too early

35
00:02:38,540 --> 00:02:41,160
presenting here we go

36
00:02:41,160 --> 00:02:43,019
share if we loaded slides oh yeah there

37
00:02:43,019 --> 00:02:45,000
it is yeah oh you're doing it you can

38
00:02:45,000 --> 00:02:48,200
either one you can do it

39
00:03:01,920 --> 00:03:05,958
yes John is here

40
00:03:23,220 --> 00:03:25,819
okay

41
00:03:32,239 --> 00:03:34,379
telling you for one that they're in the

42
00:03:34,379 --> 00:03:36,679
wrong place

43
00:03:41,819 --> 00:03:43,140
but you can

44
00:03:43,140 --> 00:03:46,099
you can come on up

45
00:03:54,000 --> 00:03:56,480
foreign

46
00:04:00,680 --> 00:04:02,940
hopefully people in the remote can hear

47
00:04:02,940 --> 00:04:05,940
this someone remote can acknowledge that

48
00:04:05,940 --> 00:04:08,599
would be awesome

49
00:04:08,940 --> 00:04:11,720
yay

50
00:04:12,480 --> 00:04:16,579
there we go hopefully it's better now

51
00:04:25,940 --> 00:04:28,740
so if you are sitting in a room called

52
00:04:28,740 --> 00:04:31,500
Kensington and you do not see people

53
00:04:31,500 --> 00:04:34,440
probably you're in Kensington 2 or

54
00:04:34,440 --> 00:04:37,320
Kensington 3. which is very confusing

55
00:04:37,320 --> 00:04:38,520
because when you first come up the

56
00:04:38,520 --> 00:04:39,840
stairs you see Kensington and you walk

57
00:04:39,840 --> 00:04:41,520
in and it's not here

58
00:04:41,520 --> 00:04:43,380
so if there are not a bunch of people in

59
00:04:43,380 --> 00:04:44,880
the room with you you're probably in the

60
00:04:44,880 --> 00:04:47,820
wrong place you get up walk down the

61
00:04:47,820 --> 00:04:50,160
passageway with all the glass and then

62
00:04:50,160 --> 00:04:53,340
turn left

63
00:04:53,340 --> 00:04:57,300
already so hi welcome to the technology

64
00:04:57,300 --> 00:05:01,280
deep Dives on quick I'm Warren

65
00:05:01,280 --> 00:05:03,919
I'm Brian

66
00:05:03,919 --> 00:05:07,259
and let's get to the next slide this is

67
00:05:07,259 --> 00:05:09,780
the ietf note well

68
00:05:09,780 --> 00:05:11,820
um we're the first sort of like official

69
00:05:11,820 --> 00:05:13,860
sessions so it's entirely possible you

70
00:05:13,860 --> 00:05:15,240
have not seen this

71
00:05:15,240 --> 00:05:18,060
you should probably read this and figure

72
00:05:18,060 --> 00:05:20,699
out what all it means and talk to Legal

73
00:05:20,699 --> 00:05:22,979
Etc if you don't know what it means but

74
00:05:22,979 --> 00:05:26,240
Yep this is our ietf Nook well

75
00:05:26,240 --> 00:05:29,580
and thank you everyone for showing up so

76
00:05:29,580 --> 00:05:30,840
early

77
00:05:30,840 --> 00:05:33,600
um I realize it is ridiculously early

78
00:05:33,600 --> 00:05:36,479
and also hello to everyone who is remote

79
00:05:36,479 --> 00:05:38,039
and here

80
00:05:38,039 --> 00:05:40,020
and also hello to everybody who's going

81
00:05:40,020 --> 00:05:42,840
to be watching this later on

82
00:05:42,840 --> 00:05:46,280
YouTube probably or some remote Thing

83
00:05:46,280 --> 00:05:49,560
video streaming service of your choice

84
00:05:49,560 --> 00:05:53,160
alrighty and with that done let me hand

85
00:05:53,160 --> 00:05:54,780
it to Brian

86
00:05:54,780 --> 00:05:57,180
so um I've actually had this question in

87
00:05:57,180 --> 00:05:58,680
the hallway a lot uh so do I have to

88
00:05:58,680 --> 00:06:00,060
come to the technical Deep dive on

89
00:06:00,060 --> 00:06:01,740
Monday and on Tuesday well that's really

90
00:06:01,740 --> 00:06:04,139
early both days um it's even earlier on

91
00:06:04,139 --> 00:06:07,080
on Tuesday actually at 7 30 tomorrow and

92
00:06:07,080 --> 00:06:08,639
you know I was asked okay that's a joke

93
00:06:08,639 --> 00:06:10,800
right no I mean it might be a joke but

94
00:06:10,800 --> 00:06:12,840
it's also the truth

95
00:06:12,840 --> 00:06:16,320
um the uh agenda is split into sort of

96
00:06:16,320 --> 00:06:17,940
like two parts

97
00:06:17,940 --> 00:06:20,460
um today is basically the basics of

98
00:06:20,460 --> 00:06:22,500
quick right gets you from I have no idea

99
00:06:22,500 --> 00:06:23,880
what's going on here or I've heard of

100
00:06:23,880 --> 00:06:26,220
quick or you know isn't that just the

101
00:06:26,220 --> 00:06:28,680
web over UDP to having a basic technical

102
00:06:28,680 --> 00:06:31,020
understanding of of what's going on and

103
00:06:31,020 --> 00:06:33,120
quick Jonah will be talking uh about the

104
00:06:33,120 --> 00:06:35,039
you know the basic introduction talk

105
00:06:35,039 --> 00:06:36,740
about the future with quick

106
00:06:36,740 --> 00:06:39,900
and uh Martin will follow up on that

107
00:06:39,900 --> 00:06:41,819
with a talk about

108
00:06:41,819 --> 00:06:43,680
how quick is layered and how that

109
00:06:43,680 --> 00:06:45,600
layering is a bit different from you

110
00:06:45,600 --> 00:06:47,340
know the intuition that you'll have from

111
00:06:47,340 --> 00:06:51,780
you know TCP over IP etc etc

112
00:06:51,780 --> 00:06:52,860
um tomorrow

113
00:06:52,860 --> 00:06:57,539
uh we will go uh a bit deeper into a few

114
00:06:57,539 --> 00:06:59,280
topics uh so this is really about okay

115
00:06:59,280 --> 00:07:00,960
now we have the basic fundamentals of

116
00:07:00,960 --> 00:07:03,419
quick uh let's talk about

117
00:07:03,419 --> 00:07:05,759
how that gets deployed at scale how it

118
00:07:05,759 --> 00:07:07,860
is is sort of like used in the internet

119
00:07:07,860 --> 00:07:10,860
now uh and things that we've learned uh

120
00:07:10,860 --> 00:07:13,440
from running at the scale uh so that'll

121
00:07:13,440 --> 00:07:17,940
be Ian or Ian uh and Lucas who I haven't

122
00:07:17,940 --> 00:07:20,759
seen yet but he'll be here tomorrow

123
00:07:20,759 --> 00:07:22,380
um talking first about the deployments

124
00:07:22,380 --> 00:07:23,880
at scale and some of the things uh that

125
00:07:23,880 --> 00:07:25,259
we've learned through that and then like

126
00:07:25,259 --> 00:07:28,280
how uh to uh observe and debug

127
00:07:28,280 --> 00:07:30,479
applications on quick and with the rest

128
00:07:30,479 --> 00:07:32,460
of the time tomorrow

129
00:07:32,460 --> 00:07:33,840
um we will have a panel discussion with

130
00:07:33,840 --> 00:07:35,340
all of the speakers so if you have like

131
00:07:35,340 --> 00:07:37,680
interesting questions uh please hold

132
00:07:37,680 --> 00:07:40,979
them till tomorrow come at you know 8 30

133
00:07:40,979 --> 00:07:43,199
is when that should start uh and we'll

134
00:07:43,199 --> 00:07:46,139
have a panel up here uh with people to

135
00:07:46,139 --> 00:07:47,580
answer your questions and have some

136
00:07:47,580 --> 00:07:51,539
discussion about quick so with that I

137
00:07:51,539 --> 00:07:52,800
will stop talking

138
00:07:52,800 --> 00:07:55,940
and invite up John

139
00:07:57,000 --> 00:07:58,680
who will talk about the future with

140
00:07:58,680 --> 00:08:02,759
quick as soon as I bounce the SlideShare

141
00:08:02,759 --> 00:08:05,520
thank you Brian do I have to stand in

142
00:08:05,520 --> 00:08:07,818
the spot

143
00:08:08,280 --> 00:08:10,319
I think I do no

144
00:08:10,319 --> 00:08:12,419
I don't

145
00:08:12,419 --> 00:08:15,180
we'll see the camera follows me

146
00:08:15,180 --> 00:08:17,099
um

147
00:08:17,099 --> 00:08:18,780
well thank you thank you everybody for

148
00:08:18,780 --> 00:08:21,960
being here early this morning hopefully

149
00:08:21,960 --> 00:08:24,900
hopefully this talk will wake you up if

150
00:08:24,900 --> 00:08:26,580
it doesn't

151
00:08:26,580 --> 00:08:29,400
uh I'll ask Martin to wake you up but

152
00:08:29,400 --> 00:08:30,720
anyways let's get started with this

153
00:08:30,720 --> 00:08:32,940
thing uh are we doing question announcer

154
00:08:32,940 --> 00:08:34,260
everything currently alongside what are

155
00:08:34,260 --> 00:08:35,580
we doing with q a

156
00:08:35,580 --> 00:08:37,919
uh q a will be tomorrow will be tomorrow

157
00:08:37,919 --> 00:08:39,539
so if you have any questions write them

158
00:08:39,539 --> 00:08:40,860
down you'll forget them through the day

159
00:08:40,860 --> 00:08:43,440
and ask us tomorrow or catch us in the

160
00:08:43,440 --> 00:08:45,000
corridors so I'm going to start with

161
00:08:45,000 --> 00:08:47,580
just this brief agenda it's basically

162
00:08:47,580 --> 00:08:51,660
what is quick and uh this is for

163
00:08:51,660 --> 00:08:54,120
um well uh I'm gonna talk about Quick's

164
00:08:54,120 --> 00:08:55,980
immediate value proposition and I'm

165
00:08:55,980 --> 00:08:57,360
going to talk about really what is quick

166
00:08:57,360 --> 00:09:00,899
enable next slide so the subtext here is

167
00:09:00,899 --> 00:09:02,399
that the first piece is simply a shot

168
00:09:02,399 --> 00:09:05,399
primer a very very short primer on Quake

169
00:09:05,399 --> 00:09:07,680
I can't do more than that

170
00:09:07,680 --> 00:09:09,899
um and we want to talk about how did we

171
00:09:09,899 --> 00:09:11,880
get the world interested in this like

172
00:09:11,880 --> 00:09:13,200
what did we do to make the world

173
00:09:13,200 --> 00:09:14,640
interested in this in this particular

174
00:09:14,640 --> 00:09:16,980
technology and finally what was the real

175
00:09:16,980 --> 00:09:18,540
goal what was the thing that we were

176
00:09:18,540 --> 00:09:20,580
really wanting to do what did we set out

177
00:09:20,580 --> 00:09:22,800
to do from the get-go

178
00:09:22,800 --> 00:09:24,959
um next slide so before I get going on

179
00:09:24,959 --> 00:09:28,500
to Quick who am I I am uh Jana anger I'm

180
00:09:28,500 --> 00:09:29,880
VP of infrastructure and Network

181
00:09:29,880 --> 00:09:32,339
Services said fastly I am an editor of

182
00:09:32,339 --> 00:09:34,440
the ID of quick specifications I'm a

183
00:09:34,440 --> 00:09:37,140
chair of the iccrg

184
00:09:37,140 --> 00:09:40,740
um irtfc ccrg research group and I've

185
00:09:40,740 --> 00:09:43,620
worked on transport for for way longer

186
00:09:43,620 --> 00:09:45,720
than I care to remember and on quick

187
00:09:45,720 --> 00:09:47,880
also for way longer than I care to

188
00:09:47,880 --> 00:09:48,720
remember

189
00:09:48,720 --> 00:09:51,660
but that's me next

190
00:09:51,660 --> 00:09:54,060
and now on to a short primer on quick

191
00:09:54,060 --> 00:09:56,399
next slide

192
00:09:56,399 --> 00:09:58,019
um I'm going to tell you this this is

193
00:09:58,019 --> 00:09:59,580
going to be a very short primer there's

194
00:09:59,580 --> 00:10:01,860
not going to be I don't have a lot of

195
00:10:01,860 --> 00:10:04,200
slides here talking about the details of

196
00:10:04,200 --> 00:10:06,240
the protocol the details of the bits

197
00:10:06,240 --> 00:10:08,580
we've done I and others have done talks

198
00:10:08,580 --> 00:10:10,620
on these in various places so if you go

199
00:10:10,620 --> 00:10:13,500
on YouTube and do a search you'll find a

200
00:10:13,500 --> 00:10:15,060
bunch of these things

201
00:10:15,060 --> 00:10:16,740
um so my goal here is not to go into the

202
00:10:16,740 --> 00:10:20,760
details of this but to give you a a base

203
00:10:20,760 --> 00:10:22,920
from where you can you can dig in and

204
00:10:22,920 --> 00:10:24,600
and get deeper

205
00:10:24,600 --> 00:10:26,220
um but I'm just going to start off by

206
00:10:26,220 --> 00:10:28,680
saying quick is a new transport protocol

207
00:10:28,680 --> 00:10:30,660
now if you look at this picture this

208
00:10:30,660 --> 00:10:32,580
sort of has a depiction and Martin's

209
00:10:32,580 --> 00:10:34,800
going to come in uh thrash this picture

210
00:10:34,800 --> 00:10:36,120
and say well that's not quite how this

211
00:10:36,120 --> 00:10:37,440
works

212
00:10:37,440 --> 00:10:39,839
um later so that's that's fun for later

213
00:10:39,839 --> 00:10:42,360
but this is roughly a schematic

214
00:10:42,360 --> 00:10:44,160
understanding of where quick sits in

215
00:10:44,160 --> 00:10:46,560
sort of the protocol stack so to speak

216
00:10:46,560 --> 00:10:49,040
um we have the TCP TLS and HTTP

217
00:10:49,040 --> 00:10:52,260
protocols in the traditional stack and

218
00:10:52,260 --> 00:10:56,279
where quick sits is basically a parallel

219
00:10:56,279 --> 00:11:01,920
to TCP and TLS and sum of HTTP so yes

220
00:11:01,920 --> 00:11:04,680
it's weird but that was kind of the the

221
00:11:04,680 --> 00:11:07,500
uh it's all weird it was just a

222
00:11:07,500 --> 00:11:09,660
compression of multiple layers so to

223
00:11:09,660 --> 00:11:12,240
speak and TLS sits sort of within quick

224
00:11:12,240 --> 00:11:14,339
but it's not within quick however it

225
00:11:14,339 --> 00:11:16,519
sort of does sit within quick in in

226
00:11:16,519 --> 00:11:19,740
depending on how exactly you look at it

227
00:11:19,740 --> 00:11:21,660
um but that's sort of the layering

228
00:11:21,660 --> 00:11:24,660
picture here it is deliberately uh

229
00:11:24,660 --> 00:11:27,120
compresses multiple layers and it

230
00:11:27,120 --> 00:11:29,820
deliberately sits at these uh in these

231
00:11:29,820 --> 00:11:31,640
spaces because the goal here was to

232
00:11:31,640 --> 00:11:34,260
accelerate and deploy something that we

233
00:11:34,260 --> 00:11:37,440
could for the web next

234
00:11:37,440 --> 00:11:39,600
so what are these these features of

235
00:11:39,600 --> 00:11:42,660
quick that really made it viable and

236
00:11:42,660 --> 00:11:45,660
useful for the web well first it's

237
00:11:45,660 --> 00:11:48,660
multi-streamed multi-streaming is a very

238
00:11:48,660 --> 00:11:50,820
powerful feature it's a very powerful

239
00:11:50,820 --> 00:11:52,920
service the idea here is that you get

240
00:11:52,920 --> 00:11:55,440
within one end-to-end connection you get

241
00:11:55,440 --> 00:12:00,000
multiple ordered byte streams now this

242
00:12:00,000 --> 00:12:01,620
is not just multiple audit byte streams

243
00:12:01,620 --> 00:12:03,300
it's a more General abstraction now this

244
00:12:03,300 --> 00:12:04,500
works really well for the web because

245
00:12:04,500 --> 00:12:07,200
the web has every website has a lot of

246
00:12:07,200 --> 00:12:09,540
objects they're all multiple effectively

247
00:12:09,540 --> 00:12:12,720
uh parallel independent objects and so

248
00:12:12,720 --> 00:12:16,140
on but this is a more General

249
00:12:16,140 --> 00:12:17,940
abstraction

250
00:12:17,940 --> 00:12:19,860
streams are designed to be lightweight

251
00:12:19,860 --> 00:12:21,959
they're designed to be built and toned

252
00:12:21,959 --> 00:12:24,600
down rapidly efficiently and if your

253
00:12:24,600 --> 00:12:26,579
implementation does it right you can use

254
00:12:26,579 --> 00:12:28,620
this as even a message abstraction so

255
00:12:28,620 --> 00:12:32,160
you can think about this as a protocol

256
00:12:32,160 --> 00:12:34,980
that that gives you a message

257
00:12:34,980 --> 00:12:37,680
abstraction in the form of streams

258
00:12:37,680 --> 00:12:39,240
and for the transport nerds among you

259
00:12:39,240 --> 00:12:41,820
you can build partial ordering on top of

260
00:12:41,820 --> 00:12:42,779
this thing

261
00:12:42,779 --> 00:12:44,760
or you can build complete ordering

262
00:12:44,760 --> 00:12:46,560
inside this thing so you have those

263
00:12:46,560 --> 00:12:48,480
degrees of freedom with multi-streaming

264
00:12:48,480 --> 00:12:49,980
next slide

265
00:12:49,980 --> 00:12:51,839
foreign

266
00:12:51,839 --> 00:12:54,540
why is this on top of udb it's a

267
00:12:54,540 --> 00:12:57,060
question that people often ask we built

268
00:12:57,060 --> 00:12:59,040
this on top of UDT because UDP is what

269
00:12:59,040 --> 00:13:01,019
works on the internet today if you want

270
00:13:01,019 --> 00:13:02,639
to build something new and deploy it

271
00:13:02,639 --> 00:13:05,399
that's the way to do it and that's what

272
00:13:05,399 --> 00:13:10,560
we did uh now this uh doesn't

273
00:13:10,560 --> 00:13:12,720
necessarily mean that the protocol has

274
00:13:12,720 --> 00:13:15,420
to live in user space however remember

275
00:13:15,420 --> 00:13:17,100
that if you wanted to build something on

276
00:13:17,100 --> 00:13:19,380
top of Ip you are necessarily stuck to

277
00:13:19,380 --> 00:13:22,200
being inside the kernel and that is a

278
00:13:22,200 --> 00:13:24,300
big problem for us also in terms of

279
00:13:24,300 --> 00:13:26,160
building deploying shipping things so

280
00:13:26,160 --> 00:13:28,740
being on top of udb gave us two

281
00:13:28,740 --> 00:13:30,540
significant benefits one of them was

282
00:13:30,540 --> 00:13:31,980
that we could get through the internet

283
00:13:31,980 --> 00:13:35,279
as it as it as it is with middle boxes

284
00:13:35,279 --> 00:13:37,500
and firewalls and everything else

285
00:13:37,500 --> 00:13:39,779
and it allowed us to deploy in user

286
00:13:39,779 --> 00:13:40,560
space

287
00:13:40,560 --> 00:13:42,240
so those were two significant benefits

288
00:13:42,240 --> 00:13:44,279
which is why we use them however it

289
00:13:44,279 --> 00:13:46,139
requires us to recreate a bunch of TCP

290
00:13:46,139 --> 00:13:48,660
functions on top of it so we had to redo

291
00:13:48,660 --> 00:13:51,180
all the TCP functions on top of this but

292
00:13:51,180 --> 00:13:55,200
we didn't simply redo them we uh we did

293
00:13:55,200 --> 00:13:58,560
a better job of doing them

294
00:13:58,560 --> 00:13:59,880
um because we've learned from the past

295
00:13:59,880 --> 00:14:01,980
we we want to incorporate all the

296
00:14:01,980 --> 00:14:05,660
learnings of TCP and we did

297
00:14:05,820 --> 00:14:08,579
um and importantly quick has encryption

298
00:14:08,579 --> 00:14:11,760
baked in this means data everything that

299
00:14:11,760 --> 00:14:14,100
is carried by the quick protocol and

300
00:14:14,100 --> 00:14:17,459
quick headers are all protected and this

301
00:14:17,459 --> 00:14:19,260
uses Steelers 1.3 for key negotiation

302
00:14:19,260 --> 00:14:22,980
and this is uh uh basically a really

303
00:14:22,980 --> 00:14:25,560
important premise uh and I'll come back

304
00:14:25,560 --> 00:14:27,899
to this in a moment and again the Martin

305
00:14:27,899 --> 00:14:29,579
is going to go into more detail on

306
00:14:29,579 --> 00:14:32,339
exactly how this is done uh in in in

307
00:14:32,339 --> 00:14:34,440
quick but this was really important to

308
00:14:34,440 --> 00:14:36,120
us why was this important to us well of

309
00:14:36,120 --> 00:14:37,380
course it was important to us to protect

310
00:14:37,380 --> 00:14:39,779
the metadata we know today that if we

311
00:14:39,779 --> 00:14:41,339
were to design protocol that is not

312
00:14:41,339 --> 00:14:43,260
fundamentally protected that seems like

313
00:14:43,260 --> 00:14:44,579
we're not learning the lessons of the

314
00:14:44,579 --> 00:14:47,579
past 20 years so we did that but there

315
00:14:47,579 --> 00:14:49,139
was an even more important lesson here

316
00:14:49,139 --> 00:14:51,120
or an even more important reason for

317
00:14:51,120 --> 00:14:52,560
doing this

318
00:14:52,560 --> 00:14:53,459
um

319
00:14:53,459 --> 00:14:57,839
middle boxes ossify protocols that are

320
00:14:57,839 --> 00:14:59,040
exposed

321
00:14:59,040 --> 00:15:02,699
we did not want quick to be ossified TCP

322
00:15:02,699 --> 00:15:04,860
is today ossified many other protocols

323
00:15:04,860 --> 00:15:07,560
that have been deployed in the wild in

324
00:15:07,560 --> 00:15:10,199
plain text are completely ossified you

325
00:15:10,199 --> 00:15:11,959
cannot change them on the wire without

326
00:15:11,959 --> 00:15:15,300
seeing unexpected weird interactions

327
00:15:15,300 --> 00:15:17,399
with middle boxes that have ossified

328
00:15:17,399 --> 00:15:19,500
them or have certain expected behaviors

329
00:15:19,500 --> 00:15:23,420
expect certain behaviors of them

330
00:15:23,639 --> 00:15:25,740
oh that's an extra

331
00:15:25,740 --> 00:15:29,339
um so with sorry go back one slide

332
00:15:29,339 --> 00:15:32,579
um so with baking and encryption what we

333
00:15:32,579 --> 00:15:35,579
were able to do is basically say that

334
00:15:35,579 --> 00:15:38,220
only the endpoints can really understand

335
00:15:38,220 --> 00:15:40,320
and change

336
00:15:40,320 --> 00:15:42,660
the metadata the headers in the protocol

337
00:15:42,660 --> 00:15:44,880
as well as the body

338
00:15:44,880 --> 00:15:47,279
and that's an important important thing

339
00:15:47,279 --> 00:15:49,980
because now metal boxes are unable to

340
00:15:49,980 --> 00:15:51,600
change

341
00:15:51,600 --> 00:15:54,839
the headers or to obfuscate or to to

342
00:15:54,839 --> 00:15:57,180
mess with the headers or even read the

343
00:15:57,180 --> 00:15:59,639
headers so they can't have any expected

344
00:15:59,639 --> 00:16:02,519
behaviors which means that endpoints are

345
00:16:02,519 --> 00:16:04,500
free to change the protocol as they see

346
00:16:04,500 --> 00:16:06,660
fit what this means is that quick

347
00:16:06,660 --> 00:16:09,600
becomes evolvable so when quick gets

348
00:16:09,600 --> 00:16:12,120
deployed it becomes evolvable that was

349
00:16:12,120 --> 00:16:14,459
our goal and that's why encryption is

350
00:16:14,459 --> 00:16:18,319
baked into Quick next slide

351
00:16:18,600 --> 00:16:22,920
um so that is my rough introduction into

352
00:16:22,920 --> 00:16:25,139
quick and I'm sorry if you didn't see

353
00:16:25,139 --> 00:16:26,820
all the header bits that you wanted to

354
00:16:26,820 --> 00:16:28,740
see and I don't want to do that here to

355
00:16:28,740 --> 00:16:30,000
you early in the morning on Monday

356
00:16:30,000 --> 00:16:31,980
you're going to see plenty of if you

357
00:16:31,980 --> 00:16:33,720
want header bits walk into any room this

358
00:16:33,720 --> 00:16:36,420
week you'll see plenty of those

359
00:16:36,420 --> 00:16:37,560
um I'm going to talk to you about what

360
00:16:37,560 --> 00:16:39,060
Quick's immediate value proposition was

361
00:16:39,060 --> 00:16:40,920
how did we get the world in so these are

362
00:16:40,920 --> 00:16:42,420
the features right this is what I talked

363
00:16:42,420 --> 00:16:44,459
about this is how we talk about quick

364
00:16:44,459 --> 00:16:46,680
why did we get how did the world get

365
00:16:46,680 --> 00:16:48,120
interested in quick but it's a quick

366
00:16:48,120 --> 00:16:51,060
broke new ground in several ways the

367
00:16:51,060 --> 00:16:52,440
first thing was the zero auditory

368
00:16:52,440 --> 00:16:53,759
transport in crypto handshake again

369
00:16:53,759 --> 00:16:54,839
you're going to hear more about that

370
00:16:54,839 --> 00:16:56,459
after my talk

371
00:16:56,459 --> 00:16:58,440
um and this is fundamentally difficult

372
00:16:58,440 --> 00:17:01,320
to do with TCP and the split TCP TLS

373
00:17:01,320 --> 00:17:03,360
models you've got Taylor sitting on top

374
00:17:03,360 --> 00:17:04,919
of TCP they end up having different

375
00:17:04,919 --> 00:17:07,260
Scopes when I say different Scopes I

376
00:17:07,260 --> 00:17:10,020
mean scopes of identity Scopes in terms

377
00:17:10,020 --> 00:17:11,579
of where the connection gets terminated

378
00:17:11,579 --> 00:17:13,500
in the network and that makes it

379
00:17:13,500 --> 00:17:15,959
fundamentally difficult to do something

380
00:17:15,959 --> 00:17:18,540
like zero RTD people have argued people

381
00:17:18,540 --> 00:17:21,179
would say you know isn't it the same uh

382
00:17:21,179 --> 00:17:23,579
isn't zero RTD in quick so before I talk

383
00:17:23,579 --> 00:17:26,640
about the same as TCP what zero Oddity

384
00:17:26,640 --> 00:17:28,319
and crypto handshake what what that

385
00:17:28,319 --> 00:17:31,500
gives you is a low latency uh connection

386
00:17:31,500 --> 00:17:33,540
setup for those of you who've not been

387
00:17:33,540 --> 00:17:36,020
paying attention

388
00:17:36,120 --> 00:17:39,299
um zero RTD means zero round trip time

389
00:17:39,299 --> 00:17:43,200
delay before data is uh exchanged on a

390
00:17:43,200 --> 00:17:44,460
connection

391
00:17:44,460 --> 00:17:47,280
excuse me so

392
00:17:47,280 --> 00:17:49,620
um we've created a zero RTD transfer

393
00:17:49,620 --> 00:17:52,080
transport and crypto handshake now TCP

394
00:17:52,080 --> 00:17:54,780
could do this with TCP fast open in TCP

395
00:17:54,780 --> 00:17:57,120
and with TLS 1.3 and zero RTD and TLS

396
00:17:57,120 --> 00:17:59,700
however because of the split model you

397
00:17:59,700 --> 00:18:01,740
still end up having different Scopes you

398
00:18:01,740 --> 00:18:04,140
have TCP that doesn't understand domains

399
00:18:04,140 --> 00:18:05,880
certs things like that it understands

400
00:18:05,880 --> 00:18:08,100
only IP addresses Tres operates in a

401
00:18:08,100 --> 00:18:11,340
different space and you have a split

402
00:18:11,340 --> 00:18:12,840
between an understanding of what the

403
00:18:12,840 --> 00:18:14,880
endpoint identity itself is at these two

404
00:18:14,880 --> 00:18:16,860
levels you can reconcile these things

405
00:18:16,860 --> 00:18:18,660
but there's a lot of nuanced work to be

406
00:18:18,660 --> 00:18:20,220
done there if you want to make this work

407
00:18:20,220 --> 00:18:22,620
in the split TCP model

408
00:18:22,620 --> 00:18:23,820
um

409
00:18:23,820 --> 00:18:26,160
next slide

410
00:18:26,160 --> 00:18:28,260
collection migration was another thing

411
00:18:28,260 --> 00:18:31,140
that we wanted for 20 25 years to build

412
00:18:31,140 --> 00:18:32,880
into transport Technologies and we

413
00:18:32,880 --> 00:18:36,000
finally got it in and we were able to uh

414
00:18:36,000 --> 00:18:38,039
build this into Quick again this is

415
00:18:38,039 --> 00:18:39,840
fundamentally different to do with TCP

416
00:18:39,840 --> 00:18:43,380
in the split TLS TCP model uh in part

417
00:18:43,380 --> 00:18:45,240
because of the the endpoint identities

418
00:18:45,240 --> 00:18:47,580
but also in part because TCP we've done

419
00:18:47,580 --> 00:18:50,220
this with mptcb IDF has done this with

420
00:18:50,220 --> 00:18:52,559
mptcp but I would again challenge you to

421
00:18:52,559 --> 00:18:54,360
think about what we should think of as

422
00:18:54,360 --> 00:18:55,620
our end goals

423
00:18:55,620 --> 00:18:57,600
we want this to get deployed everywhere

424
00:18:57,600 --> 00:19:00,000
with mptcp you still have to play nice

425
00:19:00,000 --> 00:19:01,320
with the operators with the network

426
00:19:01,320 --> 00:19:03,360
devices and so on I don't mean that we

427
00:19:03,360 --> 00:19:04,500
shouldn't play nice with the operators

428
00:19:04,500 --> 00:19:07,440
what I mean is that we can't wait for

429
00:19:07,440 --> 00:19:09,720
every operator and every metal box

430
00:19:09,720 --> 00:19:11,700
vendor to come on board before we

431
00:19:11,700 --> 00:19:13,679
consider a protocol deployed

432
00:19:13,679 --> 00:19:16,440
that is a very very long poll and that

433
00:19:16,440 --> 00:19:18,539
makes the tent unlivable it's it's too

434
00:19:18,539 --> 00:19:22,020
loud too long a poor so that's basically

435
00:19:22,020 --> 00:19:24,059
uh connection migration again we were

436
00:19:24,059 --> 00:19:25,919
we've deployed it it's being used

437
00:19:25,919 --> 00:19:26,880
already

438
00:19:26,880 --> 00:19:28,919
next slide

439
00:19:28,919 --> 00:19:32,039
and we are able to build troubleshooting

440
00:19:32,039 --> 00:19:33,299
and debugging capabilities you want to

441
00:19:33,299 --> 00:19:34,559
hear about this a little bit more from

442
00:19:34,559 --> 00:19:38,700
Lucas uh tomorrow but uh the the

443
00:19:38,700 --> 00:19:40,860
difference here is this

444
00:19:40,860 --> 00:19:43,500
um the the value prop here is this right

445
00:19:43,500 --> 00:19:46,919
so with anybody who's anybody here who's

446
00:19:46,919 --> 00:19:51,360
done debugging kernel debugging anybody

447
00:19:51,360 --> 00:19:53,220
okay a fair number of fans excellent

448
00:19:53,220 --> 00:19:57,320
have you also done application debugging

449
00:19:57,360 --> 00:20:01,080
have you tried to correlate those traces

450
00:20:01,080 --> 00:20:02,580
yeah

451
00:20:02,580 --> 00:20:04,440
that is a pain

452
00:20:04,440 --> 00:20:05,880
right so when you have certain

453
00:20:05,880 --> 00:20:07,200
application behavior and you go okay

454
00:20:07,200 --> 00:20:08,580
I've got application trace and I go okay

455
00:20:08,580 --> 00:20:11,100
now I need to grab the TCP traces or S

456
00:20:11,100 --> 00:20:12,539
trays or whatever it is that you need to

457
00:20:12,539 --> 00:20:14,220
do and you need to go down to the kernel

458
00:20:14,220 --> 00:20:15,780
and go all the way down the network path

459
00:20:15,780 --> 00:20:18,299
to figure out everything you are trying

460
00:20:18,299 --> 00:20:19,919
to use completely different pipelines

461
00:20:19,919 --> 00:20:21,600
built by completely different people for

462
00:20:21,600 --> 00:20:23,100
completely different use cases and try

463
00:20:23,100 --> 00:20:25,260
to correlate them companies that have

464
00:20:25,260 --> 00:20:26,820
managed to successfully build those

465
00:20:26,820 --> 00:20:29,460
things have used them very very uh

466
00:20:29,460 --> 00:20:31,500
effectively however it's not a small

467
00:20:31,500 --> 00:20:32,280
order

468
00:20:32,280 --> 00:20:36,179
it's difficult right so being in user

469
00:20:36,179 --> 00:20:37,020
space

470
00:20:37,020 --> 00:20:40,140
for uh for quick basically gives you the

471
00:20:40,140 --> 00:20:43,559
ability to log it log transport Network

472
00:20:43,559 --> 00:20:46,860
level traces alongside application Level

473
00:20:46,860 --> 00:20:50,039
traces that is huge because you don't

474
00:20:50,039 --> 00:20:53,160
have to go around doing this uh uh uh

475
00:20:53,160 --> 00:20:55,980
separately you can log alongside the

476
00:20:55,980 --> 00:20:57,840
application traces you cannot log things

477
00:20:57,840 --> 00:20:59,160
like what is the conditional window

478
00:20:59,160 --> 00:21:00,539
value what is the state of the

479
00:21:00,539 --> 00:21:01,980
connection what happened when was when

480
00:21:01,980 --> 00:21:03,960
was teams created again you'll hear more

481
00:21:03,960 --> 00:21:06,059
about this from Lucas tomorrow we'll

482
00:21:06,059 --> 00:21:07,679
talk to you about

483
00:21:07,679 --> 00:21:11,400
um about uh logging under the logging

484
00:21:11,400 --> 00:21:12,600
format that we're standardizing for

485
00:21:12,600 --> 00:21:14,100
quick here

486
00:21:14,100 --> 00:21:16,679
um but we get much significantly richer

487
00:21:16,679 --> 00:21:19,140
capabilities for doing this in user

488
00:21:19,140 --> 00:21:19,919
space

489
00:21:19,919 --> 00:21:22,520
next

490
00:21:23,400 --> 00:21:25,440
um so actually go back one

491
00:21:25,440 --> 00:21:28,020
thing yeah oh right I meant to say this

492
00:21:28,020 --> 00:21:30,840
here there is a um

493
00:21:30,840 --> 00:21:32,940
uh other really really cool thing which

494
00:21:32,940 --> 00:21:34,860
I you know I'll show at the end of today

495
00:21:34,860 --> 00:21:39,799
if you have time I'll demo it but

496
00:21:39,900 --> 00:21:41,940
one thing that you have a problem with

497
00:21:41,940 --> 00:21:44,580
for instance is is if you have poor

498
00:21:44,580 --> 00:21:46,260
Behavior at the client side for instance

499
00:21:46,260 --> 00:21:49,380
it's you can grab client-side packet

500
00:21:49,380 --> 00:21:51,960
traces or you can report it to the

501
00:21:51,960 --> 00:21:54,059
server side who whomever is at the

502
00:21:54,059 --> 00:21:56,039
server and you can say Hey you know go

503
00:21:56,039 --> 00:21:57,780
dig into this particular Trace I'll give

504
00:21:57,780 --> 00:21:59,280
you an identifier for a connection for

505
00:21:59,280 --> 00:22:00,720
instance go find out what happened with

506
00:22:00,720 --> 00:22:03,059
that connection why was it behaving

507
00:22:03,059 --> 00:22:06,480
poorly you have no other recourse and on

508
00:22:06,480 --> 00:22:08,460
the server side what we would do at the

509
00:22:08,460 --> 00:22:10,320
server side is generally we end up

510
00:22:10,320 --> 00:22:11,880
having to

511
00:22:11,880 --> 00:22:14,820
uh find your connection now that is an

512
00:22:14,820 --> 00:22:17,400
impossibility usually finding a

513
00:22:17,400 --> 00:22:19,260
connection in the fleet of service that

514
00:22:19,260 --> 00:22:21,179
we have and so on is super difficult to

515
00:22:21,179 --> 00:22:24,960
do and it's uh and then go trace it

516
00:22:24,960 --> 00:22:26,520
track it find the where the client is

517
00:22:26,520 --> 00:22:29,340
connected it's really difficult to do

518
00:22:29,340 --> 00:22:31,500
um what we were able to do wouldn't it

519
00:22:31,500 --> 00:22:34,140
be cool if the client could basically

520
00:22:34,140 --> 00:22:36,179
ask the server and say hey can you just

521
00:22:36,179 --> 00:22:40,620
send me your view of our connection

522
00:22:40,620 --> 00:22:42,539
over the connection that we have right

523
00:22:42,539 --> 00:22:44,340
now

524
00:22:44,340 --> 00:22:47,600
like your packet race for my connection

525
00:22:47,600 --> 00:22:49,860
just send it to me over the same

526
00:22:49,860 --> 00:22:52,020
connection that we already have that is

527
00:22:52,020 --> 00:22:54,539
what we built uh and we were able to do

528
00:22:54,539 --> 00:22:56,159
that next slide I'm not going to show

529
00:22:56,159 --> 00:22:58,080
you this demo right now because it's a

530
00:22:58,080 --> 00:22:59,940
bit tricky to get going

531
00:22:59,940 --> 00:23:02,100
um but the links are here go to the

532
00:23:02,100 --> 00:23:04,440
video only link and then go to the self

533
00:23:04,440 --> 00:23:06,780
Trace link using the same browser window

534
00:23:06,780 --> 00:23:08,400
meaning that you have a connection going

535
00:23:08,400 --> 00:23:10,320
over the you'll have a stream going over

536
00:23:10,320 --> 00:23:12,539
the same connection and that only works

537
00:23:12,539 --> 00:23:14,159
of course if you're using quick

538
00:23:14,159 --> 00:23:16,919
and I'm happy to show it to you later uh

539
00:23:16,919 --> 00:23:18,539
if I can get it going

540
00:23:18,539 --> 00:23:22,020
so this is uh uh really really valuable

541
00:23:22,020 --> 00:23:23,880
at the client you're able to see a

542
00:23:23,880 --> 00:23:27,659
service uh packet race now uh um I'm

543
00:23:27,659 --> 00:23:29,059
gonna move to the next thing which is

544
00:23:29,059 --> 00:23:30,900
transforming server architecture so I

545
00:23:30,900 --> 00:23:32,580
won't go into the details of this

546
00:23:32,580 --> 00:23:34,559
um but deg server return is an ability

547
00:23:34,559 --> 00:23:37,980
for a server to be able to hand off a

548
00:23:37,980 --> 00:23:40,140
request to another server and have that

549
00:23:40,140 --> 00:23:42,360
server serve the user directly so it's

550
00:23:42,360 --> 00:23:45,480
sort of like if if a client requests a

551
00:23:45,480 --> 00:23:47,100
resource from a server the server

552
00:23:47,100 --> 00:23:49,080
doesn't have the resource but knows

553
00:23:49,080 --> 00:23:51,179
another server that has it is able to

554
00:23:51,179 --> 00:23:53,400
sort of Kick the connection over or the

555
00:23:53,400 --> 00:23:56,280
request over and have the response

556
00:23:56,280 --> 00:23:57,780
served directly from there this is

557
00:23:57,780 --> 00:23:59,520
called direct server return it's called

558
00:23:59,520 --> 00:24:01,620
direct server return because normally

559
00:24:01,620 --> 00:24:04,140
what what and what commonly happens and

560
00:24:04,140 --> 00:24:06,120
the easier way to solve this problem of

561
00:24:06,120 --> 00:24:07,500
I don't have the content somebody else

562
00:24:07,500 --> 00:24:09,900
does is client connection to the server

563
00:24:09,900 --> 00:24:12,299
server connects to the other server

564
00:24:12,299 --> 00:24:15,059
receives the content serves it back so

565
00:24:15,059 --> 00:24:18,360
there's a full uh path back instead you

566
00:24:18,360 --> 00:24:21,000
bypass this intermediating server on the

567
00:24:21,000 --> 00:24:22,620
return path that's called direct server

568
00:24:22,620 --> 00:24:25,740
return we are able to design this in

569
00:24:25,740 --> 00:24:27,240
quick and and some of us have been

570
00:24:27,240 --> 00:24:30,000
designing building this into into our

571
00:24:30,000 --> 00:24:31,620
server infrastructures and the reason

572
00:24:31,620 --> 00:24:33,659
we're able to do this is because in

573
00:24:33,659 --> 00:24:35,820
quick again in terms of how we build the

574
00:24:35,820 --> 00:24:37,980
transport protocol itself we were able

575
00:24:37,980 --> 00:24:39,960
to separate the sender's view from the

576
00:24:39,960 --> 00:24:42,480
receiver's view of the world

577
00:24:42,480 --> 00:24:45,659
and uh in this particular case that

578
00:24:45,659 --> 00:24:47,520
plays very nicely allows us to actually

579
00:24:47,520 --> 00:24:48,900
build something like direct server

580
00:24:48,900 --> 00:24:50,280
return we can have multiple servers

581
00:24:50,280 --> 00:24:53,159
sending with one receiver receiving this

582
00:24:53,159 --> 00:24:54,900
is again fundamentally difficult to do

583
00:24:54,900 --> 00:24:56,760
in TCP

584
00:24:56,760 --> 00:24:59,539
next slide

585
00:25:01,020 --> 00:25:03,120
so this is how we got the world

586
00:25:03,120 --> 00:25:04,320
interested these are the different

587
00:25:04,320 --> 00:25:05,760
things these are the different benefits

588
00:25:05,760 --> 00:25:08,820
that we brought out and we when and this

589
00:25:08,820 --> 00:25:10,500
is how all of us got excited about quick

590
00:25:10,500 --> 00:25:12,600
and so on but I'm going to now talk

591
00:25:12,600 --> 00:25:15,179
about what quick is enabling right next

592
00:25:15,179 --> 00:25:17,760
slide what does quick enable so quick

593
00:25:17,760 --> 00:25:19,559
enables multiple new technologies that

594
00:25:19,559 --> 00:25:21,360
you can build within quick so you can

595
00:25:21,360 --> 00:25:23,220
hear about you know you won't hear these

596
00:25:23,220 --> 00:25:25,679
experiments today but maybe tomorrow uh

597
00:25:25,679 --> 00:25:27,779
you're gonna there are new condition

598
00:25:27,779 --> 00:25:29,340
controllers that you can easily build

599
00:25:29,340 --> 00:25:31,020
and deploy I know that meta has done

600
00:25:31,020 --> 00:25:32,880
this Google's done this fastly we've

601
00:25:32,880 --> 00:25:35,880
done this so it's it makes it much much

602
00:25:35,880 --> 00:25:38,700
easier to deploy these things in in in

603
00:25:38,700 --> 00:25:42,000
in quick than it has been in TCP next

604
00:25:42,000 --> 00:25:44,299
slide

605
00:25:45,000 --> 00:25:47,400
if you've not heard about mask

606
00:25:47,400 --> 00:25:50,460
um mask basically employs HTTP 3 and

607
00:25:50,460 --> 00:25:54,299
quick to create hidden tunnels right and

608
00:25:54,299 --> 00:25:56,640
this is something that you can again

609
00:25:56,640 --> 00:25:59,580
quick is enabling this technology was it

610
00:25:59,580 --> 00:26:01,500
possible before yes but this makes it

611
00:26:01,500 --> 00:26:03,659
much more efficient much

612
00:26:03,659 --> 00:26:05,520
uh

613
00:26:05,520 --> 00:26:08,880
um a more performance and also more

614
00:26:08,880 --> 00:26:11,039
efficient at the server Stacks to be

615
00:26:11,039 --> 00:26:13,260
able to deploy uh something like

616
00:26:13,260 --> 00:26:14,760
tunneling

617
00:26:14,760 --> 00:26:15,480
um

618
00:26:15,480 --> 00:26:17,640
and this is not just I'm not just saying

619
00:26:17,640 --> 00:26:19,440
talking about things here that could be

620
00:26:19,440 --> 00:26:21,419
built this has been built if you've

621
00:26:21,419 --> 00:26:23,159
heard of Apple's private relay iCloud

622
00:26:23,159 --> 00:26:25,020
private relay that basically use this

623
00:26:25,020 --> 00:26:28,380
mask extensively and it carries a ton of

624
00:26:28,380 --> 00:26:30,299
bytes today if you have an iPhone and

625
00:26:30,299 --> 00:26:31,500
you've turned it on you're using mask

626
00:26:31,500 --> 00:26:34,140
you're using HTTP 3M quick to do this

627
00:26:34,140 --> 00:26:35,100
today

628
00:26:35,100 --> 00:26:36,900
next slide

629
00:26:36,900 --> 00:26:40,140
and finally media over quick uh or what

630
00:26:40,140 --> 00:26:44,159
I call the new world for webrtc refugees

631
00:26:44,159 --> 00:26:46,620
um is is as a proposal to do media

632
00:26:46,620 --> 00:26:49,020
directly over quick and that's again

633
00:26:49,020 --> 00:26:52,260
quickest enabling these Technologies now

634
00:26:52,260 --> 00:26:54,720
to happen because it has is its feature

635
00:26:54,720 --> 00:26:56,159
Rich enough that you can actually think

636
00:26:56,159 --> 00:26:57,900
about doing more interesting things

637
00:26:57,900 --> 00:27:00,419
directly with the transport next slide

638
00:27:00,419 --> 00:27:02,159
but

639
00:27:02,159 --> 00:27:04,620
I'm gonna I'm gonna I'm gonna offer that

640
00:27:04,620 --> 00:27:06,120
the real value of quick was something

641
00:27:06,120 --> 00:27:08,959
else next

642
00:27:10,080 --> 00:27:12,240
so quick I I've told you that the quick

643
00:27:12,240 --> 00:27:14,100
makes the web faster more resilient more

644
00:27:14,100 --> 00:27:15,240
responsive

645
00:27:15,240 --> 00:27:16,860
but this is just the beginning next

646
00:27:16,860 --> 00:27:19,158
slide

647
00:27:19,799 --> 00:27:21,659
quick enables these Technologies I

648
00:27:21,659 --> 00:27:23,820
talked about so it all it becomes a

649
00:27:23,820 --> 00:27:27,539
platform for these new technologies moq

650
00:27:27,539 --> 00:27:30,480
mock mask other stuff that we want to

651
00:27:30,480 --> 00:27:31,500
deploy

652
00:27:31,500 --> 00:27:33,360
next

653
00:27:33,360 --> 00:27:35,279
and I've also told you that quick is a

654
00:27:35,279 --> 00:27:37,080
transport technology that can be evolved

655
00:27:37,080 --> 00:27:38,700
on the internet because we managed to

656
00:27:38,700 --> 00:27:40,919
encrypt everything we can evolve this

657
00:27:40,919 --> 00:27:42,659
thing going forward it is already

658
00:27:42,659 --> 00:27:44,220
continuously evolving in multiple

659
00:27:44,220 --> 00:27:46,679
versions of quick already exist in

660
00:27:46,679 --> 00:27:49,440
parallel on the internet today

661
00:27:49,440 --> 00:27:52,320
and next slide

662
00:27:52,320 --> 00:27:54,240
I'm going to offer that we've pulled a

663
00:27:54,240 --> 00:27:56,940
sleight of hand we basically

664
00:27:56,940 --> 00:27:58,620
convinced everybody that these are the

665
00:27:58,620 --> 00:28:00,360
reasons we wanted to deploy this thing

666
00:28:00,360 --> 00:28:03,960
HTTP was the reason and uh getting these

667
00:28:03,960 --> 00:28:05,400
these milliseconds of latency

668
00:28:05,400 --> 00:28:07,260
Improvement and these features were the

669
00:28:07,260 --> 00:28:09,140
reasons but next

670
00:28:09,140 --> 00:28:13,080
we used HTTP on the web as a vehicle to

671
00:28:13,080 --> 00:28:14,880
deploy quick into almost serve all

672
00:28:14,880 --> 00:28:17,279
server and client deployments

673
00:28:17,279 --> 00:28:20,100
the quickest deployed now widely it also

674
00:28:20,100 --> 00:28:22,919
it it almost every server deployment has

675
00:28:22,919 --> 00:28:25,679
quick in it almost every client browser

676
00:28:25,679 --> 00:28:28,200
and other client libraries they all have

677
00:28:28,200 --> 00:28:31,140
quick in them now next

678
00:28:31,140 --> 00:28:33,720
but our goal really was to create

679
00:28:33,720 --> 00:28:36,900
an end-to-end transport that allowed for

680
00:28:36,900 --> 00:28:38,279
end-to-end transports and Technologies

681
00:28:38,279 --> 00:28:40,400
to thrive through an ossified internet

682
00:28:40,400 --> 00:28:43,620
and I would say that we've we are sort

683
00:28:43,620 --> 00:28:45,179
of somewhere not at the beginning of

684
00:28:45,179 --> 00:28:46,860
this journey we managed to get somewhere

685
00:28:46,860 --> 00:28:48,240
hopefully we'll get to the end of the

686
00:28:48,240 --> 00:28:50,820
journey but we are certainly much

687
00:28:50,820 --> 00:28:52,980
farther along than I thought we would

688
00:28:52,980 --> 00:28:55,500
get to so thank you

689
00:28:55,500 --> 00:28:57,000
foreign

690
00:28:57,000 --> 00:29:02,900
[Applause]

691
00:29:02,900 --> 00:29:05,640
next up we have Martin

692
00:29:05,640 --> 00:29:09,120
who will be showing us some header

693
00:29:09,120 --> 00:29:11,340
diagrams I think because now I had a

694
00:29:11,340 --> 00:29:13,699
diagrams

695
00:29:14,640 --> 00:29:16,140
all right

696
00:29:16,140 --> 00:29:19,679
so Dex

697
00:29:19,679 --> 00:29:22,020
coming all right so I'm going to talk a

698
00:29:22,020 --> 00:29:24,200
little bit about the quick handshake and

699
00:29:24,200 --> 00:29:26,100
in particular some of the security

700
00:29:26,100 --> 00:29:29,880
properties uh security being one of the

701
00:29:29,880 --> 00:29:31,980
sort of primary drivers behind building

702
00:29:31,980 --> 00:29:33,240
this thing

703
00:29:33,240 --> 00:29:36,419
do you have a clicker yes but it doesn't

704
00:29:36,419 --> 00:29:38,940
work it doesn't work all right well next

705
00:29:38,940 --> 00:29:40,980
slide quicker is to say next slide and

706
00:29:40,980 --> 00:29:43,140
yeah should I catch your cues so there's

707
00:29:43,140 --> 00:29:44,640
a couple of things in here I may not get

708
00:29:44,640 --> 00:29:46,740
to uh some of the later things in any

709
00:29:46,740 --> 00:29:49,860
real detail uh but uh

710
00:29:49,860 --> 00:29:52,320
that layering diagram that uh Jonah was

711
00:29:52,320 --> 00:29:53,340
talking about I think we'll spend a

712
00:29:53,340 --> 00:29:55,679
little bit of time on that uh quite

713
00:29:55,679 --> 00:29:58,260
possibly the most difficult part of

714
00:29:58,260 --> 00:30:01,080
getting quick working was integrating

715
00:30:01,080 --> 00:30:04,440
the the TLs handshake into quick

716
00:30:04,440 --> 00:30:06,779
there is a something of a tight

717
00:30:06,779 --> 00:30:08,880
interaction between those those two

718
00:30:08,880 --> 00:30:10,679
pieces and it turned out to be

719
00:30:10,679 --> 00:30:13,860
extraordinarily fiddly and uh we were

720
00:30:13,860 --> 00:30:15,360
given a protocol

721
00:30:15,360 --> 00:30:17,279
um from the work of the folks at Google

722
00:30:17,279 --> 00:30:19,679
who had designed their own cryptographic

723
00:30:19,679 --> 00:30:20,700
handshake

724
00:30:20,700 --> 00:30:25,440
and it was broken in tiny subtle and

725
00:30:25,440 --> 00:30:27,720
very significant ways that required

726
00:30:27,720 --> 00:30:30,779
years of work to get to work so next

727
00:30:30,779 --> 00:30:32,880
slide please

728
00:30:32,880 --> 00:30:36,179
so you've seen uh what is I think the

729
00:30:36,179 --> 00:30:38,220
the standard reference point for how we

730
00:30:38,220 --> 00:30:40,799
think about layering in quick there's

731
00:30:40,799 --> 00:30:43,380
this little TLS slice that sort of

732
00:30:43,380 --> 00:30:45,480
jammed in on the quick layer and this is

733
00:30:45,480 --> 00:30:47,880
something that I think makes people who

734
00:30:47,880 --> 00:30:51,179
like their nice layer cakes a little

735
00:30:51,179 --> 00:30:54,179
uncomfortable and we'll explain why

736
00:30:54,179 --> 00:30:56,100
that's the case as we get through this

737
00:30:56,100 --> 00:30:58,919
one next slide please

738
00:30:58,919 --> 00:31:02,640
so um at a very high level quick

739
00:31:02,640 --> 00:31:04,799
connection setup does

740
00:31:04,799 --> 00:31:08,340
everything that TCP does and everything

741
00:31:08,340 --> 00:31:11,460
that TLS does all sort of integrated

742
00:31:11,460 --> 00:31:12,840
together and we did that for a number of

743
00:31:12,840 --> 00:31:14,700
reasons I think the the primary one

744
00:31:14,700 --> 00:31:17,039
being performance

745
00:31:17,039 --> 00:31:18,299
so

746
00:31:18,299 --> 00:31:21,200
um what we wanted to do was avoid

747
00:31:21,200 --> 00:31:23,039
replicating a lot of the security work

748
00:31:23,039 --> 00:31:24,779
it turns out they're building a good

749
00:31:24,779 --> 00:31:27,360
security handshake is extraordinarily

750
00:31:27,360 --> 00:31:31,140
difficult and tls13 is the result of a

751
00:31:31,140 --> 00:31:32,640
number of years of work

752
00:31:32,640 --> 00:31:35,279
and we didn't want to have to redo all

753
00:31:35,279 --> 00:31:37,380
of that work because we're also building

754
00:31:37,380 --> 00:31:40,500
all of the TCP bits in tiling on top of

755
00:31:40,500 --> 00:31:42,419
UDP which is an entirely new protocol

756
00:31:42,419 --> 00:31:44,820
and that's more than enough work and it

757
00:31:44,820 --> 00:31:46,140
turned out to be even more work than we

758
00:31:46,140 --> 00:31:48,960
anticipated when we we came into this so

759
00:31:48,960 --> 00:31:50,880
the way to think of this is that TLS

760
00:31:50,880 --> 00:31:52,380
provides all of the cryptographic

761
00:31:52,380 --> 00:31:54,120
assurances that you might expect from a

762
00:31:54,120 --> 00:31:58,380
protocol uh and quick provides all the

763
00:31:58,380 --> 00:32:01,679
things that that TCP would provide being

764
00:32:01,679 --> 00:32:05,700
reliable audit delivery and in turn

765
00:32:05,700 --> 00:32:07,500
they each

766
00:32:07,500 --> 00:32:10,039
provide services to the other

767
00:32:10,039 --> 00:32:13,799
TLS requires ordered reliable delivery

768
00:32:13,799 --> 00:32:16,860
quick requires a secure handshake

769
00:32:16,860 --> 00:32:19,140
next please

770
00:32:19,140 --> 00:32:22,679
so we're taking the core TLS guarantees

771
00:32:22,679 --> 00:32:25,740
authentication confidentiality integrity

772
00:32:25,740 --> 00:32:30,480
and all of the core TCP guarantees at

773
00:32:30,480 --> 00:32:32,220
the handshake level now

774
00:32:32,220 --> 00:32:34,860
um other people can talk about streams

775
00:32:34,860 --> 00:32:36,240
and and the various application

776
00:32:36,240 --> 00:32:37,740
semantics that we're providing quick

777
00:32:37,740 --> 00:32:41,460
which include some of the core TCP

778
00:32:41,460 --> 00:32:44,520
guarantees like in order reliable

779
00:32:44,520 --> 00:32:47,240
delivery but um for the handshake

780
00:32:47,240 --> 00:32:50,399
there's a lot of the things around the

781
00:32:50,399 --> 00:32:53,220
TCP handshake that I think weren't in

782
00:32:53,220 --> 00:32:54,600
the original versions of TCP But

783
00:32:54,600 --> 00:32:56,220
ultimately TCP needed to have which are

784
00:32:56,220 --> 00:32:57,120
things like

785
00:32:57,120 --> 00:32:59,760
being assured that the other side that

786
00:32:59,760 --> 00:33:01,020
you're talking to is willing to talk to

787
00:33:01,020 --> 00:33:03,360
you for instance and that turns out to

788
00:33:03,360 --> 00:33:05,039
be an extraordinarily important part of

789
00:33:05,039 --> 00:33:06,840
the design of quick and we'll talk about

790
00:33:06,840 --> 00:33:08,940
that look as much as we can

791
00:33:08,940 --> 00:33:10,919
the other thing is we were looking to do

792
00:33:10,919 --> 00:33:13,140
better than any of these protocols we

793
00:33:13,140 --> 00:33:14,640
have a new protocol that we we're

794
00:33:14,640 --> 00:33:16,919
implementing here we

795
00:33:16,919 --> 00:33:18,899
took every opportunity we could to make

796
00:33:18,899 --> 00:33:21,659
things better and I'll touch on a few of

797
00:33:21,659 --> 00:33:23,399
those points as we go through next

798
00:33:23,399 --> 00:33:25,580
please

799
00:33:25,799 --> 00:33:28,380
so uh

800
00:33:28,380 --> 00:33:32,700
rtts uh TLS 1.3 is optimistic in the

801
00:33:32,700 --> 00:33:35,580
sense that a client will guess what

802
00:33:35,580 --> 00:33:38,519
configuration will work for a server and

803
00:33:38,519 --> 00:33:41,399
that will in the case that the guess is

804
00:33:41,399 --> 00:33:43,919
correct save a round trip time

805
00:33:43,919 --> 00:33:45,720
quick does the same thing

806
00:33:45,720 --> 00:33:48,299
a typical handshake in TLS is a sort of

807
00:33:48,299 --> 00:33:50,640
three-way exchange you you have the

808
00:33:50,640 --> 00:33:52,140
client send a message the server respond

809
00:33:52,140 --> 00:33:54,000
and then the client finishes that off

810
00:33:54,000 --> 00:33:56,880
with a confirmation message

811
00:33:56,880 --> 00:33:59,039
if the client guesses wrong you have

812
00:33:59,039 --> 00:34:01,799
another round trip added to that and one

813
00:34:01,799 --> 00:34:03,120
of the sort of themes that we'll have

814
00:34:03,120 --> 00:34:04,799
with quick is that it has a very short

815
00:34:04,799 --> 00:34:06,899
handshake if everything goes correctly

816
00:34:06,899 --> 00:34:08,940
but it turns out that you can add

817
00:34:08,940 --> 00:34:12,000
multiple round trips if you have packet

818
00:34:12,000 --> 00:34:13,679
loss the client guess is wrong the

819
00:34:13,679 --> 00:34:15,540
server is under duress and wants to tell

820
00:34:15,540 --> 00:34:17,460
the client to back off and and wait a

821
00:34:17,460 --> 00:34:20,460
little long while longer and so

822
00:34:20,460 --> 00:34:22,500
um we have this very flexible handshake

823
00:34:22,500 --> 00:34:23,879
ultimately

824
00:34:23,879 --> 00:34:25,918
the um

825
00:34:25,918 --> 00:34:28,260
key Insight is we we have sort of this

826
00:34:28,260 --> 00:34:30,239
this multiple round-trip handshake and

827
00:34:30,239 --> 00:34:31,800
and a lot

828
00:34:31,800 --> 00:34:34,739
I say here the typical shape is 1.5 rtt

829
00:34:34,739 --> 00:34:36,899
in practice I think the messages we

830
00:34:36,899 --> 00:34:39,599
exchange is two round trip times but

831
00:34:39,599 --> 00:34:42,300
under normal circumstances if the client

832
00:34:42,300 --> 00:34:43,619
guesses correctly and the server is

833
00:34:43,619 --> 00:34:44,879
willing to communicate with the client

834
00:34:44,879 --> 00:34:48,960
we can send data from either side after

835
00:34:48,960 --> 00:34:51,239
that first exchange between the clients

836
00:34:51,239 --> 00:34:52,859
so we're actually sending before the

837
00:34:52,859 --> 00:34:55,139
handshake is complete and in the extreme

838
00:34:55,139 --> 00:34:58,080
case if the client has been to that

839
00:34:58,080 --> 00:35:00,720
server in the past and set up the zero

840
00:35:00,720 --> 00:35:04,020
round trip time thing that there is no

841
00:35:04,020 --> 00:35:06,060
delay for either end the client sends

842
00:35:06,060 --> 00:35:07,859
immediately application data is Flowing

843
00:35:07,859 --> 00:35:09,359
immediately as the handshake is

844
00:35:09,359 --> 00:35:11,640
commenced same on the server end as soon

845
00:35:11,640 --> 00:35:13,560
as the client as the server sees the

846
00:35:13,560 --> 00:35:15,300
client's first message it can start

847
00:35:15,300 --> 00:35:17,700
sending things to the client as well and

848
00:35:17,700 --> 00:35:19,980
these performance guarantees were sort

849
00:35:19,980 --> 00:35:23,099
of central to the appeal of of quick and

850
00:35:23,099 --> 00:35:24,780
and they're the core of the performance

851
00:35:24,780 --> 00:35:27,119
guarantees that we're providing here

852
00:35:27,119 --> 00:35:29,640
next

853
00:35:29,640 --> 00:35:31,079
so

854
00:35:31,079 --> 00:35:32,579
this is what the TLs handshake looks

855
00:35:32,579 --> 00:35:34,320
like we have some key agreement and

856
00:35:34,320 --> 00:35:36,839
configuration that is exchanged more or

857
00:35:36,839 --> 00:35:37,980
less in the clear

858
00:35:37,980 --> 00:35:40,079
and then some authentication information

859
00:35:40,079 --> 00:35:42,180
and you can sort of see here we've got

860
00:35:42,180 --> 00:35:45,119
these lighter lines that say where where

861
00:35:45,119 --> 00:35:47,099
the data is being exchanged there's a

862
00:35:47,099 --> 00:35:49,079
flow from the client there might be some

863
00:35:49,079 --> 00:35:51,060
some application data following after

864
00:35:51,060 --> 00:35:52,440
that one there's a flow from the server

865
00:35:52,440 --> 00:35:55,200
there might be some application data and

866
00:35:55,200 --> 00:35:56,579
then finally

867
00:35:56,579 --> 00:35:59,339
at the end some more messages lots lots

868
00:35:59,339 --> 00:36:03,020
more data at that point next please

869
00:36:03,540 --> 00:36:05,099
that's what happens when you put TLS on

870
00:36:05,099 --> 00:36:07,260
top of it and

871
00:36:07,260 --> 00:36:08,520
um there's a little note there saying

872
00:36:08,520 --> 00:36:10,740
that we we had to tweak TLS in order to

873
00:36:10,740 --> 00:36:12,720
get this to work and that's going to be

874
00:36:12,720 --> 00:36:14,520
a bit of a theme as we get into this one

875
00:36:14,520 --> 00:36:17,040
next

876
00:36:17,040 --> 00:36:20,400
so um the the quick handshake sort of

877
00:36:20,400 --> 00:36:22,619
takes the TLs handshake and builds on

878
00:36:22,619 --> 00:36:23,880
top of that

879
00:36:23,880 --> 00:36:27,839
tell us messages have essentially

880
00:36:27,839 --> 00:36:32,400
uh four types of keys that that are used

881
00:36:32,400 --> 00:36:33,180
um

882
00:36:33,180 --> 00:36:38,280
and um the no key in the case of uh TLS

883
00:36:38,280 --> 00:36:40,680
is turned into a real set of keys in

884
00:36:40,680 --> 00:36:42,900
quick so we have what we call Initial

885
00:36:42,900 --> 00:36:46,380
Keys which are not secure in any

886
00:36:46,380 --> 00:36:49,200
meaningful sense but they provide us

887
00:36:49,200 --> 00:36:51,180
protection against ossification to to

888
00:36:51,180 --> 00:36:52,380
the points that John was talking about

889
00:36:52,380 --> 00:36:54,780
before every single version of quick

890
00:36:54,780 --> 00:36:56,940
uses a different set of keys if you

891
00:36:56,940 --> 00:36:58,320
don't know the keys you can't speak that

892
00:36:58,320 --> 00:37:00,960
version a quick sort of a a nice little

893
00:37:00,960 --> 00:37:03,359
protection against someone who might be

894
00:37:03,359 --> 00:37:06,720
inclined to interfere with the handshake

895
00:37:06,720 --> 00:37:09,240
um but if they don't know the version of

896
00:37:09,240 --> 00:37:11,400
quick that's been being spoken they

897
00:37:11,400 --> 00:37:13,260
don't get to to interact

898
00:37:13,260 --> 00:37:15,780
TLS also provides handshake keys

899
00:37:15,780 --> 00:37:19,380
those handshake Keys uh protect the the

900
00:37:19,380 --> 00:37:22,560
details of the handshake uh the security

901
00:37:22,560 --> 00:37:23,880
guarantees there are very very

902
00:37:23,880 --> 00:37:25,680
interesting

903
00:37:25,680 --> 00:37:29,040
um those of you who know TLS will

904
00:37:29,040 --> 00:37:31,079
perhaps have a better idea of what those

905
00:37:31,079 --> 00:37:32,220
properties are but essentially we're

906
00:37:32,220 --> 00:37:33,900
providing confidentiality for things

907
00:37:33,900 --> 00:37:37,619
like the server certificate and a lot of

908
00:37:37,619 --> 00:37:39,119
the configuration parameters that the

909
00:37:39,119 --> 00:37:41,420
the protocol has

910
00:37:41,420 --> 00:37:46,200
the TLs bytes put into specific frames

911
00:37:46,200 --> 00:37:49,380
within the packets so we have packets

912
00:37:49,380 --> 00:37:51,359
with frames in them the packets are

913
00:37:51,359 --> 00:37:54,119
protected with these keys

914
00:37:54,119 --> 00:37:56,579
and we we put multiple packets in the

915
00:37:56,579 --> 00:37:59,460
one UDP datagram as it turns out

916
00:37:59,460 --> 00:38:01,560
and a quick

917
00:38:01,560 --> 00:38:04,680
after many iterations between first

918
00:38:04,680 --> 00:38:06,420
going with something that was based on

919
00:38:06,420 --> 00:38:09,839
dtls because why not dtls does UDP turns

920
00:38:09,839 --> 00:38:14,480
out to be a bad idea we went to TLS

921
00:38:14,760 --> 00:38:17,339
and tell us exporters for for getting

922
00:38:17,339 --> 00:38:20,579
Keys ultimately what quick does is runs

923
00:38:20,579 --> 00:38:23,400
the TLs handshake and then when TLS

924
00:38:23,400 --> 00:38:26,280
produces Keys quick reaches in takes

925
00:38:26,280 --> 00:38:27,780
those keys out and uses it for packet

926
00:38:27,780 --> 00:38:31,380
protection TLS doesn't uh TLS record

927
00:38:31,380 --> 00:38:33,900
protection isn't engaged in in this the

928
00:38:33,900 --> 00:38:35,760
raw bytes coming out of a handshake of

929
00:38:35,760 --> 00:38:39,000
TLs are used directly by quick so the

930
00:38:39,000 --> 00:38:41,640
final two types of keys we have are zero

931
00:38:41,640 --> 00:38:43,619
RCT Keys which the client uses to send

932
00:38:43,619 --> 00:38:45,540
to the server if it happens to be

933
00:38:45,540 --> 00:38:48,240
attempting zero ITT and then the final

934
00:38:48,240 --> 00:38:51,240
application data Keys which are used for

935
00:38:51,240 --> 00:38:52,500
everything once the handshake is

936
00:38:52,500 --> 00:38:54,300
completed we also have a key update

937
00:38:54,300 --> 00:38:56,339
process that that rotates those keys

938
00:38:56,339 --> 00:38:59,099
periodically to prevent

939
00:38:59,099 --> 00:39:01,200
to prevent them from wearing out next

940
00:39:01,200 --> 00:39:03,439
place

941
00:39:04,020 --> 00:39:06,900
so this is what the simplified handshake

942
00:39:06,900 --> 00:39:09,480
looks like we have the client sending an

943
00:39:09,480 --> 00:39:11,579
initial packet which contains a crypto

944
00:39:11,579 --> 00:39:14,099
frame which contains a TLS client hello

945
00:39:14,099 --> 00:39:17,400
and on the server end we have an initial

946
00:39:17,400 --> 00:39:18,359
packet

947
00:39:18,359 --> 00:39:20,579
and that contains a crypto frame that

948
00:39:20,579 --> 00:39:22,380
contains a server hello

949
00:39:22,380 --> 00:39:24,660
and that is all effectively sent in the

950
00:39:24,660 --> 00:39:26,460
clear although we're using these special

951
00:39:26,460 --> 00:39:28,680
quick version specific keys that are

952
00:39:28,680 --> 00:39:29,700
generated

953
00:39:29,700 --> 00:39:31,619
the um

954
00:39:31,619 --> 00:39:33,540
the interesting thing to observe here is

955
00:39:33,540 --> 00:39:35,579
that there is a flow that goes from the

956
00:39:35,579 --> 00:39:37,380
client to the server and Back Again

957
00:39:37,380 --> 00:39:38,640
in the clear

958
00:39:38,640 --> 00:39:41,280
and then in the opposite direction for

959
00:39:41,280 --> 00:39:43,140
handshake Keys there's a flow that goes

960
00:39:43,140 --> 00:39:45,540
from the server to the client and Back

961
00:39:45,540 --> 00:39:48,839
Again using those handshake keys and

962
00:39:48,839 --> 00:39:52,140
then finally there is application data

963
00:39:52,140 --> 00:39:53,220
flowing

964
00:39:53,220 --> 00:39:56,640
from that point onwards now this is a

965
00:39:56,640 --> 00:39:59,760
quirk of TLs but um what you will

966
00:39:59,760 --> 00:40:02,660
actually see here is the

967
00:40:02,660 --> 00:40:06,060
there's a final message that confirms

968
00:40:06,060 --> 00:40:09,119
the handshake is done at the bottom

969
00:40:09,119 --> 00:40:10,440
there that the server sends once has

970
00:40:10,440 --> 00:40:12,720
received everything from the client and

971
00:40:12,720 --> 00:40:15,000
we spent years

972
00:40:15,000 --> 00:40:16,680
trying to avoid putting this message in

973
00:40:16,680 --> 00:40:19,740
it turns out to be absolutely crucial in

974
00:40:19,740 --> 00:40:23,339
a number of scenarios we had the worst

975
00:40:23,339 --> 00:40:25,740
problem with handshake Deadlocks and all

976
00:40:25,740 --> 00:40:26,700
sorts of

977
00:40:26,700 --> 00:40:28,859
weird Corner cases before we decided

978
00:40:28,859 --> 00:40:30,780
look let's just put another message in

979
00:40:30,780 --> 00:40:33,780
here what this means is

980
00:40:33,780 --> 00:40:35,579
ultimately this is a two round trip

981
00:40:35,579 --> 00:40:36,900
protocol

982
00:40:36,900 --> 00:40:38,880
you can see two round trips on this on

983
00:40:38,880 --> 00:40:42,119
this diagram here but

984
00:40:42,119 --> 00:40:43,800
you're sending data a lot sooner than

985
00:40:43,800 --> 00:40:46,020
that and that's one of the weird things

986
00:40:46,020 --> 00:40:48,420
about operating this protocol next

987
00:40:48,420 --> 00:40:50,660
please

988
00:40:51,180 --> 00:40:53,460
of course all of this integrates with

989
00:40:53,460 --> 00:40:55,260
quick and so quick

990
00:40:55,260 --> 00:40:57,060
underneath all of this is providing

991
00:40:57,060 --> 00:40:58,500
acknowledgments for all of the data

992
00:40:58,500 --> 00:41:00,599
that's being exchanged back and forth

993
00:41:00,599 --> 00:41:03,119
here and so that's what you see here is

994
00:41:03,119 --> 00:41:04,920
that every single message that is sent

995
00:41:04,920 --> 00:41:07,859
is acknowledged using packets protected

996
00:41:07,859 --> 00:41:09,540
by the same types of keys for various

997
00:41:09,540 --> 00:41:12,359
reasons that should be obvious you can't

998
00:41:12,359 --> 00:41:14,760
acknowledge something with a different

999
00:41:14,760 --> 00:41:17,040
key because well maybe the other side

1000
00:41:17,040 --> 00:41:20,160
doesn't have that key yet and so there's

1001
00:41:20,160 --> 00:41:21,900
this weird interlocking thing that that

1002
00:41:21,900 --> 00:41:24,119
goes on here

1003
00:41:24,119 --> 00:41:27,119
including some implicit acknowledgments

1004
00:41:27,119 --> 00:41:29,400
in the in in certain cases which gets a

1005
00:41:29,400 --> 00:41:33,000
little bit interesting as well but um

1006
00:41:33,000 --> 00:41:35,520
there's a sort of illustrate that that

1007
00:41:35,520 --> 00:41:38,460
quick is providing all of the transport

1008
00:41:38,460 --> 00:41:41,220
reliability features that uh TLS

1009
00:41:41,220 --> 00:41:43,320
requires TLS sends very large messages

1010
00:41:43,320 --> 00:41:45,960
that need to be sent that and received

1011
00:41:45,960 --> 00:41:48,000
in a very particular order otherwise it

1012
00:41:48,000 --> 00:41:50,099
doesn't work and quick provides those

1013
00:41:50,099 --> 00:41:51,839
those facilities

1014
00:41:51,839 --> 00:41:54,560
next place

1015
00:41:54,839 --> 00:41:56,760
so this is ultimately what we have in

1016
00:41:56,760 --> 00:41:58,560
terms of the layering diagram and I

1017
00:41:58,560 --> 00:41:59,880
think

1018
00:41:59,880 --> 00:42:01,079
um

1019
00:42:01,079 --> 00:42:03,480
thinking about layering in the classic

1020
00:42:03,480 --> 00:42:04,740
sense where you have a protocol that

1021
00:42:04,740 --> 00:42:06,240
sits on top of another protocol doesn't

1022
00:42:06,240 --> 00:42:07,800
really work for quick

1023
00:42:07,800 --> 00:42:10,800
the uh the key thing to realize here is

1024
00:42:10,800 --> 00:42:12,839
it's more like a software architecture

1025
00:42:12,839 --> 00:42:14,040
diagram where there are certain

1026
00:42:14,040 --> 00:42:15,300
components that provide different

1027
00:42:15,300 --> 00:42:17,160
capabilities and they have interactions

1028
00:42:17,160 --> 00:42:19,800
with other components if you think of

1029
00:42:19,800 --> 00:42:23,280
the TLs stack as taking handshake

1030
00:42:23,280 --> 00:42:26,099
messages and returning handshake

1031
00:42:26,099 --> 00:42:28,740
messages and then providing information

1032
00:42:28,740 --> 00:42:32,220
about State changes and the the various

1033
00:42:32,220 --> 00:42:34,680
secrets that it might be generating then

1034
00:42:34,680 --> 00:42:37,980
you have the ability to to build a

1035
00:42:37,980 --> 00:42:40,200
component that then sits inside the

1036
00:42:40,200 --> 00:42:43,320
greater protocol and so you have crypto

1037
00:42:43,320 --> 00:42:45,839
streams responsible for exchanging those

1038
00:42:45,839 --> 00:42:48,000
handshake bytes back and forth and then

1039
00:42:48,000 --> 00:42:49,740
you have a packet protection layer that

1040
00:42:49,740 --> 00:42:50,520
takes

1041
00:42:50,520 --> 00:42:52,680
uh the the packets that you're sending

1042
00:42:52,680 --> 00:42:55,020
to the to the other side and takes the

1043
00:42:55,020 --> 00:42:58,260
secrets from TLS and uh protects those

1044
00:42:58,260 --> 00:43:00,839
packets or removes protection from those

1045
00:43:00,839 --> 00:43:02,520
packets

1046
00:43:02,520 --> 00:43:04,079
and then of course all of the things

1047
00:43:04,079 --> 00:43:06,839
that we concretely care about uh in

1048
00:43:06,839 --> 00:43:10,079
terms of streams and ultimately uh the

1049
00:43:10,079 --> 00:43:13,079
quick datagram work as well is is sort

1050
00:43:13,079 --> 00:43:15,900
of sitting in there providing more

1051
00:43:15,900 --> 00:43:18,480
frames that that can be exchanged back

1052
00:43:18,480 --> 00:43:19,619
and forth

1053
00:43:19,619 --> 00:43:22,140
so this is this is what I tend to think

1054
00:43:22,140 --> 00:43:23,900
of as the the the

1055
00:43:23,900 --> 00:43:27,420
ideal uh the structure of quick on the

1056
00:43:27,420 --> 00:43:28,680
on the inside

1057
00:43:28,680 --> 00:43:30,720
and uh

1058
00:43:30,720 --> 00:43:33,420
it's not that simple but uh this is a

1059
00:43:33,420 --> 00:43:35,099
gross simplification of that

1060
00:43:35,099 --> 00:43:37,700
next place

1061
00:43:38,579 --> 00:43:42,240
so the other part of

1062
00:43:42,240 --> 00:43:45,618
all of this is

1063
00:43:45,660 --> 00:43:47,819
actually mostly new in the protocol

1064
00:43:47,819 --> 00:43:49,920
we've taken inspiration from from

1065
00:43:49,920 --> 00:43:52,319
protocols that proceeded at TCP and and

1066
00:43:52,319 --> 00:43:53,400
other things

1067
00:43:53,400 --> 00:43:56,220
but um the denial of service mitigations

1068
00:43:56,220 --> 00:43:57,900
in quick

1069
00:43:57,900 --> 00:44:01,020
as part of the handshake and later uh

1070
00:44:01,020 --> 00:44:03,660
somewhat more interesting than

1071
00:44:03,660 --> 00:44:05,460
the software engineering exercise of

1072
00:44:05,460 --> 00:44:09,180
getting a quick TLS stack crammed in so

1073
00:44:09,180 --> 00:44:11,579
we have a few basic rules

1074
00:44:11,579 --> 00:44:13,380
um we had a long debate a little while

1075
00:44:13,380 --> 00:44:15,480
ago about where this number three came

1076
00:44:15,480 --> 00:44:16,579
from

1077
00:44:16,579 --> 00:44:21,420
and no one knows uh concretely we had a

1078
00:44:21,420 --> 00:44:24,060
number of people involved in the design

1079
00:44:24,060 --> 00:44:26,579
of this and none of them can remember

1080
00:44:26,579 --> 00:44:28,200
where the number three comes from but

1081
00:44:28,200 --> 00:44:29,579
there's there's this basic rule that we

1082
00:44:29,579 --> 00:44:32,280
follow in quick is if you're sending to

1083
00:44:32,280 --> 00:44:33,420
an address

1084
00:44:33,420 --> 00:44:36,240
that you haven't confirmed is willing to

1085
00:44:36,240 --> 00:44:37,500
receive

1086
00:44:37,500 --> 00:44:39,900
the packets that you're sending

1087
00:44:39,900 --> 00:44:42,480
only send

1088
00:44:42,480 --> 00:44:46,920
three times as much data to that as what

1089
00:44:46,920 --> 00:44:48,240
you've received from that apparent

1090
00:44:48,240 --> 00:44:51,359
address so your random packet appears

1091
00:44:51,359 --> 00:44:53,520
from the internet from some arbitrary

1092
00:44:53,520 --> 00:44:56,160
address you can send three packets in

1093
00:44:56,160 --> 00:44:59,060
response no more

1094
00:44:59,060 --> 00:45:01,319
there's an address validation process

1095
00:45:01,319 --> 00:45:03,960
that we use to say

1096
00:45:03,960 --> 00:45:06,119
send to that address and get

1097
00:45:06,119 --> 00:45:07,920
confirmation that that address is live

1098
00:45:07,920 --> 00:45:09,420
and willing to receive the package that

1099
00:45:09,420 --> 00:45:12,119
you're sending to it and we have

1100
00:45:12,119 --> 00:45:14,339
multiple types of address validation in

1101
00:45:14,339 --> 00:45:16,079
quick because of the way that we design

1102
00:45:16,079 --> 00:45:18,660
the handshake and ultimately I'll touch

1103
00:45:18,660 --> 00:45:20,460
on this later migration

1104
00:45:20,460 --> 00:45:21,780
and

1105
00:45:21,780 --> 00:45:23,640
um really what we want to do here is

1106
00:45:23,640 --> 00:45:27,180
ensure that quick is not used as a

1107
00:45:27,180 --> 00:45:28,800
platform for denial of service tax

1108
00:45:28,800 --> 00:45:32,160
against on unwitting and unwilling

1109
00:45:32,160 --> 00:45:34,440
victims on the internet it turns out

1110
00:45:34,440 --> 00:45:37,700
that we don't want to be memcache and

1111
00:45:37,700 --> 00:45:41,520
that's probably not such a

1112
00:45:41,520 --> 00:45:44,099
pretty important ultimately uh for

1113
00:45:44,099 --> 00:45:45,420
making sure that everything works

1114
00:45:45,420 --> 00:45:48,440
properly next place

1115
00:45:48,540 --> 00:45:51,000
so the the basic uh handshake

1116
00:45:51,000 --> 00:45:53,400
amplification attack is that a client

1117
00:45:53,400 --> 00:45:56,099
sends an initial packet that happens to

1118
00:45:56,099 --> 00:45:59,640
have zero rtt in the same datagram you

1119
00:45:59,640 --> 00:46:02,520
can put a request in the same packet as

1120
00:46:02,520 --> 00:46:04,500
your your initial thing

1121
00:46:04,500 --> 00:46:08,160
that might be a totally valid packet

1122
00:46:08,160 --> 00:46:11,339
that uh a server would accept under

1123
00:46:11,339 --> 00:46:12,900
normal circumstances it might be very

1124
00:46:12,900 --> 00:46:14,280
happy to accept that packet from the

1125
00:46:14,280 --> 00:46:16,200
client but if the client manages to

1126
00:46:16,200 --> 00:46:17,640
spoof the address

1127
00:46:17,640 --> 00:46:20,640
the return flow from the server which

1128
00:46:20,640 --> 00:46:22,079
contains all the quick handshake

1129
00:46:22,079 --> 00:46:23,579
information and potentially the answer

1130
00:46:23,579 --> 00:46:25,680
to the question that they asked

1131
00:46:25,680 --> 00:46:28,440
could be very large and

1132
00:46:28,440 --> 00:46:31,619
the poor victim who genuinely owns that

1133
00:46:31,619 --> 00:46:34,619
address might find themselves on the

1134
00:46:34,619 --> 00:46:36,540
receiving end of a large flight of

1135
00:46:36,540 --> 00:46:37,980
packets from a very well connected

1136
00:46:37,980 --> 00:46:38,819
server

1137
00:46:38,819 --> 00:46:40,980
we don't want this to happen

1138
00:46:40,980 --> 00:46:43,859
so next slide please

1139
00:46:43,859 --> 00:46:48,180
so TCP solved this I think a long time

1140
00:46:48,180 --> 00:46:49,859
ago I don't know when that was but it

1141
00:46:49,859 --> 00:46:52,640
was before I was involved in any of this

1142
00:46:52,640 --> 00:46:55,980
and it has a three-way handshake

1143
00:46:55,980 --> 00:46:58,200
uh of course when we're doing TLS and

1144
00:46:58,200 --> 00:47:00,300
TCP this adds an extra round trip to the

1145
00:47:00,300 --> 00:47:01,079
setup

1146
00:47:01,079 --> 00:47:03,839
uh which is a little Annoying that's

1147
00:47:03,839 --> 00:47:05,940
slows things down a little bit but

1148
00:47:05,940 --> 00:47:08,040
essentially uh TCP confirms his

1149
00:47:08,040 --> 00:47:09,540
willingness to communicate before you

1150
00:47:09,540 --> 00:47:11,520
start doing any of the TLA stuff

1151
00:47:11,520 --> 00:47:12,900
uh

1152
00:47:12,900 --> 00:47:16,020
but in quick we put this all together so

1153
00:47:16,020 --> 00:47:17,520
we're doing the cryptographic handshake

1154
00:47:17,520 --> 00:47:21,599
and this confirmation to communicate all

1155
00:47:21,599 --> 00:47:23,760
at once and of course

1156
00:47:23,760 --> 00:47:26,900
um not every quick server is willing to

1157
00:47:26,900 --> 00:47:30,780
participate in all of this extra work

1158
00:47:30,780 --> 00:47:32,700
before confirming that someone on the

1159
00:47:32,700 --> 00:47:34,200
other end is actually willing to talk to

1160
00:47:34,200 --> 00:47:36,900
them so we added a retry mechanism which

1161
00:47:36,900 --> 00:47:40,319
is very much like the TCP send synac

1162
00:47:40,319 --> 00:47:42,300
um with the cookies the same cookies

1163
00:47:42,300 --> 00:47:44,940
next place

1164
00:47:44,940 --> 00:47:47,460
this looks approximately this like this

1165
00:47:47,460 --> 00:47:49,440
the client sends a packet maybe some

1166
00:47:49,440 --> 00:47:52,319
extra packets and the server says hey uh

1167
00:47:52,319 --> 00:47:53,220
no

1168
00:47:53,220 --> 00:47:55,020
uh please

1169
00:47:55,020 --> 00:47:57,839
confirm before proceeding and it sends

1170
00:47:57,839 --> 00:47:59,760
the client a token and if the clients

1171
00:47:59,760 --> 00:48:01,740
are genuine type client it will receive

1172
00:48:01,740 --> 00:48:03,540
that token and can stick it in the

1173
00:48:03,540 --> 00:48:05,099
packet that it generates for the next

1174
00:48:05,099 --> 00:48:07,079
attempt and everything moves moves on

1175
00:48:07,079 --> 00:48:08,460
from there and the server has now

1176
00:48:08,460 --> 00:48:09,900
received confirmation that the client is

1177
00:48:09,900 --> 00:48:12,540
able to receive the messages that the

1178
00:48:12,540 --> 00:48:14,099
server is sending and the client is

1179
00:48:14,099 --> 00:48:15,960
willing to participate in the protocol

1180
00:48:15,960 --> 00:48:18,500
that's nice

1181
00:48:19,619 --> 00:48:22,140
retry of course is probably not

1182
00:48:22,140 --> 00:48:23,040
something that you want to do because

1183
00:48:23,040 --> 00:48:25,560
you're adding a round trip time to the

1184
00:48:25,560 --> 00:48:28,079
connection setup it is particularly good

1185
00:48:28,079 --> 00:48:29,579
for cases where the server is under

1186
00:48:29,579 --> 00:48:31,200
stress and they want to make sure that

1187
00:48:31,200 --> 00:48:33,480
every client is genuine if they're under

1188
00:48:33,480 --> 00:48:35,520
attack then then it might be might be a

1189
00:48:35,520 --> 00:48:38,220
good way to manage that or if you think

1190
00:48:38,220 --> 00:48:39,480
that the traffic is coming from

1191
00:48:39,480 --> 00:48:42,000
somewhere that is unreliable for various

1192
00:48:42,000 --> 00:48:43,859
reasons the reputation systems that you

1193
00:48:43,859 --> 00:48:46,560
have indicate that it may be a little a

1194
00:48:46,560 --> 00:48:47,700
little chunky

1195
00:48:47,700 --> 00:48:50,780
uh but that round trip is expensive so

1196
00:48:50,780 --> 00:48:54,480
we have some tricks for the case that uh

1197
00:48:54,480 --> 00:48:56,640
the handshake is is

1198
00:48:56,640 --> 00:49:00,240
um shorter next please

1199
00:49:00,240 --> 00:49:03,240
so what we need to do is prove to the

1200
00:49:03,240 --> 00:49:05,040
server that the client saw the server

1201
00:49:05,040 --> 00:49:07,980
initial packet how do we do that

1202
00:49:07,980 --> 00:49:09,839
um it's very simple

1203
00:49:09,839 --> 00:49:11,099
the

1204
00:49:11,099 --> 00:49:13,099
first exchange that happens in the clear

1205
00:49:13,099 --> 00:49:15,119
uh between the client and server

1206
00:49:15,119 --> 00:49:16,520
establishes some cryptographic

1207
00:49:16,520 --> 00:49:18,720
cryptographic keys and it does that

1208
00:49:18,720 --> 00:49:21,180
based on information in those packets

1209
00:49:21,180 --> 00:49:23,280
the next set of packets from the client

1210
00:49:23,280 --> 00:49:25,500
these handshake packets use those

1211
00:49:25,500 --> 00:49:28,859
cryptographic keys to generate new uh

1212
00:49:28,859 --> 00:49:30,660
packet protection keys

1213
00:49:30,660 --> 00:49:33,060
if the client produces a valid handshake

1214
00:49:33,060 --> 00:49:34,079
packet

1215
00:49:34,079 --> 00:49:36,119
that is because it saw everything that

1216
00:49:36,119 --> 00:49:39,060
the server produced and so we we have

1217
00:49:39,060 --> 00:49:41,579
what what amounts to an implicit token

1218
00:49:41,579 --> 00:49:42,660
at that point

1219
00:49:42,660 --> 00:49:43,980
and

1220
00:49:43,980 --> 00:49:47,819
um until this point the um the the three

1221
00:49:47,819 --> 00:49:50,819
and three out for for one in rule

1222
00:49:50,819 --> 00:49:55,140
applies but next slide will show you

1223
00:49:55,140 --> 00:49:56,819
um

1224
00:49:56,819 --> 00:49:59,339
the same thing that you saw before but

1225
00:49:59,339 --> 00:50:01,319
as the initial

1226
00:50:01,319 --> 00:50:03,420
um from the server reaches the client

1227
00:50:03,420 --> 00:50:04,440
the client generates some new

1228
00:50:04,440 --> 00:50:06,000
cryptographic keys to protect the

1229
00:50:06,000 --> 00:50:09,599
handshake packets that handshake packet

1230
00:50:09,599 --> 00:50:13,440
is proof that the client saw the server

1231
00:50:13,440 --> 00:50:16,440
keys and so that allows us to proceed

1232
00:50:16,440 --> 00:50:20,160
by layering in the address validation

1233
00:50:20,160 --> 00:50:23,940
process without paying any extra bytes

1234
00:50:23,940 --> 00:50:25,500
at all

1235
00:50:25,500 --> 00:50:28,440
I hope that's that's clear but that's uh

1236
00:50:28,440 --> 00:50:30,119
a trick that we apply in a couple of

1237
00:50:30,119 --> 00:50:33,920
other places next place

1238
00:50:34,980 --> 00:50:37,680
um oh but of course um that that goes

1239
00:50:37,680 --> 00:50:39,300
both ways the server needs to prove that

1240
00:50:39,300 --> 00:50:43,560
it saw the client initial as well so

1241
00:50:43,560 --> 00:50:45,900
server needs to the client needs to

1242
00:50:45,900 --> 00:50:47,160
confirm that the server is willing to

1243
00:50:47,160 --> 00:50:50,460
talk to it and uh at this point we have

1244
00:50:50,460 --> 00:50:52,319
a little trick the key these initial

1245
00:50:52,319 --> 00:50:53,700
keys that I told you have a version

1246
00:50:53,700 --> 00:50:55,859
specific thing are actually derived

1247
00:50:55,859 --> 00:50:58,619
based on what we use uh what we call a

1248
00:50:58,619 --> 00:51:02,880
connection ID and that connection ID is

1249
00:51:02,880 --> 00:51:05,940
an unguessable value from the client and

1250
00:51:05,940 --> 00:51:07,859
so when the server responds using that

1251
00:51:07,859 --> 00:51:09,960
connection ID or using keys derived from

1252
00:51:09,960 --> 00:51:12,960
that connection ID then the client can

1253
00:51:12,960 --> 00:51:14,460
confirm that the server is willing to

1254
00:51:14,460 --> 00:51:15,960
talk to it

1255
00:51:15,960 --> 00:51:17,640
so not only does This Server proven that

1256
00:51:17,640 --> 00:51:18,780
it understands the version of quick

1257
00:51:18,780 --> 00:51:21,119
that's being involved it's also proving

1258
00:51:21,119 --> 00:51:22,319
that it's willing to talk to the client

1259
00:51:22,319 --> 00:51:25,200
by responding to it in this way

1260
00:51:25,200 --> 00:51:27,119
and that retry thing that we talked

1261
00:51:27,119 --> 00:51:29,160
talked about before we need to have the

1262
00:51:29,160 --> 00:51:30,900
same sort of mechanism there that has a

1263
00:51:30,900 --> 00:51:33,180
different mechanism for for managing

1264
00:51:33,180 --> 00:51:34,619
that that same process but there's an

1265
00:51:34,619 --> 00:51:37,020
Integrity check in there as well

1266
00:51:37,020 --> 00:51:38,400
next

1267
00:51:38,400 --> 00:51:40,319
so that's the

1268
00:51:40,319 --> 00:51:42,540
implicit token that we have on the

1269
00:51:42,540 --> 00:51:45,800
server side next

1270
00:51:45,960 --> 00:51:50,339
okay yeah so uh all of this is somewhat

1271
00:51:50,339 --> 00:51:52,680
fiddly to get right

1272
00:51:52,680 --> 00:51:54,119
uh

1273
00:51:54,119 --> 00:51:55,920
there were a lot of Deadlocks that we

1274
00:51:55,920 --> 00:51:57,540
discovered in the process I think we

1275
00:51:57,540 --> 00:51:59,520
spent what the better part of two years

1276
00:51:59,520 --> 00:52:01,500
going back and forth over some of the

1277
00:52:01,500 --> 00:52:04,380
the more tricky ones uh certain people

1278
00:52:04,380 --> 00:52:08,339
had a very good habit of finding new

1279
00:52:08,339 --> 00:52:11,460
ones every time we thought we fixed them

1280
00:52:11,460 --> 00:52:13,260
um

1281
00:52:13,260 --> 00:52:15,059
one thing that is

1282
00:52:15,059 --> 00:52:18,420
still a little point of like discomfort

1283
00:52:18,420 --> 00:52:20,040
for some of us is that we don't really

1284
00:52:20,040 --> 00:52:22,079
have any formal verification to support

1285
00:52:22,079 --> 00:52:25,079
the correctness of the of the handshake

1286
00:52:25,079 --> 00:52:26,819
um we've spoken to academics about this

1287
00:52:26,819 --> 00:52:29,220
one and and there are systems out there

1288
00:52:29,220 --> 00:52:31,319
that might might be able to prove these

1289
00:52:31,319 --> 00:52:32,640
sorts of things but it's it's rather

1290
00:52:32,640 --> 00:52:34,260
challenging

1291
00:52:34,260 --> 00:52:35,220
um

1292
00:52:35,220 --> 00:52:36,780
and I didn't even talk about version

1293
00:52:36,780 --> 00:52:39,480
negotiation uh which adds even more

1294
00:52:39,480 --> 00:52:40,859
complexity but I won't talk about that

1295
00:52:40,859 --> 00:52:43,619
here because we don't have the time next

1296
00:52:43,619 --> 00:52:45,480
please

1297
00:52:45,480 --> 00:52:49,400
uh brief on migration

1298
00:52:49,400 --> 00:52:53,099
the migration process follows the same

1299
00:52:53,099 --> 00:52:56,819
three out for everyone in rule

1300
00:52:56,819 --> 00:52:57,480
um

1301
00:52:57,480 --> 00:52:59,099
we have migration for a number of

1302
00:52:59,099 --> 00:53:00,079
reasons

1303
00:53:00,079 --> 00:53:03,540
probably the most interesting one is a

1304
00:53:03,540 --> 00:53:06,480
client that is sitting behind a Nat and

1305
00:53:06,480 --> 00:53:08,460
they get given an address and they

1306
00:53:08,460 --> 00:53:09,900
happily talk to a server back and forth

1307
00:53:09,900 --> 00:53:11,400
and then they go quiet for a little

1308
00:53:11,400 --> 00:53:12,960
while because well they just don't have

1309
00:53:12,960 --> 00:53:15,480
anything to say at that point

1310
00:53:15,480 --> 00:53:18,059
and when they restart the communication

1311
00:53:18,059 --> 00:53:21,119
after that brief period then that has

1312
00:53:21,119 --> 00:53:22,500
decided that it's going to give it a

1313
00:53:22,500 --> 00:53:23,819
different IP address

1314
00:53:23,819 --> 00:53:29,280
on that flow and so what the services is

1315
00:53:29,280 --> 00:53:33,720
a message from the client that has

1316
00:53:33,720 --> 00:53:36,059
a new IP address that is completely

1317
00:53:36,059 --> 00:53:40,680
unvalidated and that could be maybe an

1318
00:53:40,680 --> 00:53:41,760
attack

1319
00:53:41,760 --> 00:53:44,540
and so if it were to continue

1320
00:53:44,540 --> 00:53:47,040
sending large amounts of data to that

1321
00:53:47,040 --> 00:53:49,380
new address bad things might happen

1322
00:53:49,380 --> 00:53:51,720
because that might be spoofed

1323
00:53:51,720 --> 00:53:53,460
of course in a lot of cases most cases

1324
00:53:53,460 --> 00:53:55,200
in fact it's just the gnats doing what

1325
00:53:55,200 --> 00:53:58,440
Nats do next please

1326
00:53:58,440 --> 00:54:01,800
so we want to deal with net binding

1327
00:54:01,800 --> 00:54:04,319
changes we want to allow connections to

1328
00:54:04,319 --> 00:54:06,920
move to New Paths even uh legitimately

1329
00:54:06,920 --> 00:54:09,900
but we also want to ensure that the uh

1330
00:54:09,900 --> 00:54:12,000
an attacker can't force someone to move

1331
00:54:12,000 --> 00:54:13,400
if they don't want to move

1332
00:54:13,400 --> 00:54:15,900
we also want to ensure that an attacker

1333
00:54:15,900 --> 00:54:17,520
can't stop someone from moving if they

1334
00:54:17,520 --> 00:54:18,420
want to move

1335
00:54:18,420 --> 00:54:19,920
and

1336
00:54:19,920 --> 00:54:21,420
um unfortunately

1337
00:54:21,420 --> 00:54:24,420
if you if if we were to show you an IP

1338
00:54:24,420 --> 00:54:28,020
and UDP uh packet header

1339
00:54:28,020 --> 00:54:30,720
they're not protected and the network

1340
00:54:30,720 --> 00:54:33,000
rewrites them all the time in fact to

1341
00:54:33,000 --> 00:54:34,020
some extent

1342
00:54:34,020 --> 00:54:37,200
we kind of rely on the network

1343
00:54:37,200 --> 00:54:40,700
being able to rewrite these things

1344
00:54:40,740 --> 00:54:43,020
maybe that was a bad idea but that's the

1345
00:54:43,020 --> 00:54:45,300
network that we have and so

1346
00:54:45,300 --> 00:54:46,800
um we're in this kind of really awkward

1347
00:54:46,800 --> 00:54:50,119
situation so next slide please

1348
00:54:52,680 --> 00:54:54,420
there we go

1349
00:54:54,420 --> 00:54:56,819
so migration looks like this you have an

1350
00:54:56,819 --> 00:54:57,960
established connection between client

1351
00:54:57,960 --> 00:54:59,099
and server

1352
00:54:59,099 --> 00:55:02,760
and maybe an attacker takes one of your

1353
00:55:02,760 --> 00:55:05,339
packets maybe it's a packet that you had

1354
00:55:05,339 --> 00:55:08,579
dropped and sends it from a new address

1355
00:55:08,579 --> 00:55:11,460
the server looks at this packet and says

1356
00:55:11,460 --> 00:55:13,260
hmm

1357
00:55:13,260 --> 00:55:16,260
I'm not sure about this one this might

1358
00:55:16,260 --> 00:55:19,200
be legitimate I don't know and so what

1359
00:55:19,200 --> 00:55:21,839
it does is probes that address saying

1360
00:55:21,839 --> 00:55:26,160
here's a token prove to me that you're

1361
00:55:26,160 --> 00:55:28,200
live on this address

1362
00:55:28,200 --> 00:55:31,260
but it also and this took a long time to

1363
00:55:31,260 --> 00:55:32,119
realize

1364
00:55:32,119 --> 00:55:34,800
it also sends a probe to the old address

1365
00:55:34,800 --> 00:55:37,920
and says prove to me

1366
00:55:37,920 --> 00:55:41,520
that you're at this address

1367
00:55:41,520 --> 00:55:43,500
the client just responds to these probes

1368
00:55:43,500 --> 00:55:46,440
as it sees them if it's legitimately uh

1369
00:55:46,440 --> 00:55:49,079
moving to the new address then it will

1370
00:55:49,079 --> 00:55:51,079
respond from the new address and proceed

1371
00:55:51,079 --> 00:55:54,359
if it's still on the old address and the

1372
00:55:54,359 --> 00:55:56,339
attacker decided that it wanted to force

1373
00:55:56,339 --> 00:55:58,940
the client to migrate to A New Path then

1374
00:55:58,940 --> 00:56:02,160
the attacker should be unable to produce

1375
00:56:02,160 --> 00:56:04,079
the uh

1376
00:56:04,079 --> 00:56:07,140
the correct response and um

1377
00:56:07,140 --> 00:56:09,000
whichever one wins whichever one's

1378
00:56:09,000 --> 00:56:11,040
legitimate will produce a response that

1379
00:56:11,040 --> 00:56:13,700
the server will then respect and

1380
00:56:13,700 --> 00:56:16,500
migration will proceed

1381
00:56:16,500 --> 00:56:19,339
next place

1382
00:56:20,760 --> 00:56:23,160
so in order to get this to work we

1383
00:56:23,160 --> 00:56:26,160
didn't want to solve the problem that uh

1384
00:56:26,160 --> 00:56:28,740
ice solves so only clients can migrate

1385
00:56:28,740 --> 00:56:30,660
at this at in this version of quick

1386
00:56:30,660 --> 00:56:32,040
anyway

1387
00:56:32,040 --> 00:56:34,619
servers can ask clients to migrate but

1388
00:56:34,619 --> 00:56:37,559
only once we have this thing that

1389
00:56:37,559 --> 00:56:39,180
happens during the handshake that allows

1390
00:56:39,180 --> 00:56:40,980
it to happen but clients are the ones

1391
00:56:40,980 --> 00:56:42,839
that initiate the process

1392
00:56:42,839 --> 00:56:43,680
um

1393
00:56:43,680 --> 00:56:45,839
migration is very simple

1394
00:56:45,839 --> 00:56:48,380
um at some levels

1395
00:56:48,380 --> 00:56:52,440
you simply detect that an address has

1396
00:56:52,440 --> 00:56:53,579
changed on the other end and you start

1397
00:56:53,579 --> 00:56:55,619
sending data to that address but you

1398
00:56:55,619 --> 00:56:57,359
only Follow You Follow the three times

1399
00:56:57,359 --> 00:57:00,240
rule uh until you've managed to validate

1400
00:57:00,240 --> 00:57:03,059
that and the validation process was on

1401
00:57:03,059 --> 00:57:05,579
the previous slide next please

1402
00:57:05,579 --> 00:57:09,119
and I think we're up uh so having this

1403
00:57:09,119 --> 00:57:10,020
very simple three times

1404
00:57:10,020 --> 00:57:12,000
anti-amplification rule applies to all

1405
00:57:12,000 --> 00:57:13,020
addresses

1406
00:57:13,020 --> 00:57:16,380
uh it's uh pretty straightforward to

1407
00:57:16,380 --> 00:57:19,500
plot to apply you need to validate all

1408
00:57:19,500 --> 00:57:21,859
paths before you speak on them

1409
00:57:21,859 --> 00:57:24,059
and uh

1410
00:57:24,059 --> 00:57:25,920
simplifying to the client only means

1411
00:57:25,920 --> 00:57:28,859
that we don't end up with complications

1412
00:57:28,859 --> 00:57:30,780
in the protocol State machine where both

1413
00:57:30,780 --> 00:57:33,180
sides decide to migrate at the same time

1414
00:57:33,180 --> 00:57:34,319
which

1415
00:57:34,319 --> 00:57:37,020
doesn't really work very well

1416
00:57:37,020 --> 00:57:39,540
um and then that leads into a whole set

1417
00:57:39,540 --> 00:57:41,760
of other design problems where we use

1418
00:57:41,760 --> 00:57:44,339
connection IDs on different paths but

1419
00:57:44,339 --> 00:57:45,540
when I haven't spoken about connection

1420
00:57:45,540 --> 00:57:47,640
IDs and probably shouldn't because I

1421
00:57:47,640 --> 00:57:48,839
don't have time

1422
00:57:48,839 --> 00:57:51,259
next

1423
00:57:51,540 --> 00:57:54,420
so that's only sort of a taste of all

1424
00:57:54,420 --> 00:57:56,700
the security relevant things we could

1425
00:57:56,700 --> 00:57:57,900
probably spend another couple of hours

1426
00:57:57,900 --> 00:58:00,059
talking about how packets are protected

1427
00:58:00,059 --> 00:58:02,040
uh how the packet header is protected

1428
00:58:02,040 --> 00:58:04,980
which was an interesting story there uh

1429
00:58:04,980 --> 00:58:08,460
key rotation is a part of that

1430
00:58:08,460 --> 00:58:11,819
we also provide a an equivalent to a TCP

1431
00:58:11,819 --> 00:58:12,859
reset

1432
00:58:12,859 --> 00:58:16,020
which we call a stateless reset that

1433
00:58:16,020 --> 00:58:18,240
allows the server that that loses state

1434
00:58:18,240 --> 00:58:20,760
to clear up any connections that might

1435
00:58:20,760 --> 00:58:23,160
be hanging around from from before when

1436
00:58:23,160 --> 00:58:24,960
it lost that state

1437
00:58:24,960 --> 00:58:26,579
um that is secure

1438
00:58:26,579 --> 00:58:29,940
so TCP resets cannot be injected by the

1439
00:58:29,940 --> 00:58:30,900
network

1440
00:58:30,900 --> 00:58:33,540
we also have a whole version negotiation

1441
00:58:33,540 --> 00:58:36,720
thing that is nearing publication that

1442
00:58:36,720 --> 00:58:38,280
requires a whole lot of interesting

1443
00:58:38,280 --> 00:58:40,859
discussions as well but not enough time

1444
00:58:40,859 --> 00:58:43,260
to cover all those things here today and

1445
00:58:43,260 --> 00:58:45,720
that's me done thank you thank you very

1446
00:58:45,720 --> 00:58:47,899
much

1447
00:58:49,920 --> 00:58:52,380
so I think my favorite thing that I

1448
00:58:52,380 --> 00:58:53,819
learned today after you know having

1449
00:58:53,819 --> 00:58:55,559
stared at quick for most of its

1450
00:58:55,559 --> 00:58:57,660
development is that nobody knows where

1451
00:58:57,660 --> 00:58:59,460
that 3x role came from because I dug

1452
00:58:59,460 --> 00:59:01,200
into it a little bit too

1453
00:59:01,200 --> 00:59:03,720
that was that was Ian Ian did it thank

1454
00:59:03,720 --> 00:59:06,200
you Ian

1455
00:59:06,360 --> 00:59:08,099
[Laughter]

1456
00:59:08,099 --> 00:59:10,079
two's no big enough

1457
00:59:10,079 --> 00:59:12,540
four is too many well no well four might

1458
00:59:12,540 --> 00:59:14,280
be okay but

1459
00:59:14,280 --> 00:59:16,559
great

1460
00:59:16,559 --> 00:59:19,799
honestly no one really knows uh it was

1461
00:59:19,799 --> 00:59:21,839
pulled out of the air I think yeah

1462
00:59:21,839 --> 00:59:24,540
and it seems right

1463
00:59:24,540 --> 00:59:28,200
all right so Ian knows talk to him talk

1464
00:59:28,200 --> 00:59:30,059
to Ian Ian we'll talk about that

1465
00:59:30,059 --> 00:59:33,619
tomorrow is to wear that three three

1466
00:59:33,780 --> 00:59:37,140
yeah oh yeah that makes a lot of sense

1467
00:59:37,140 --> 00:59:40,079
cool so um thank you all very much for

1468
00:59:40,079 --> 00:59:41,400
being with us

1469
00:59:41,400 --> 00:59:43,260
um so early this morning uh thanks

1470
00:59:43,260 --> 00:59:45,480
especially to our speakers

1471
00:59:45,480 --> 00:59:46,680
um excellent excellent excellent

1472
00:59:46,680 --> 00:59:49,380
presentations uh we hope to see all of

1473
00:59:49,380 --> 00:59:52,319
you and more tomorrow morning at 7 30 uh

1474
00:59:52,319 --> 00:59:54,119
not at eight we have a little bit of

1475
00:59:54,119 --> 00:59:56,579
extra time for the panel discussion and

1476
00:59:56,579 --> 00:59:58,980
we ran early as opposed to running late

1477
00:59:58,980 --> 01:00:00,720
on that one

1478
01:00:00,720 --> 01:00:01,380
um

1479
01:00:01,380 --> 01:00:03,599
so yes thank you all very much and enjoy

1480
01:00:03,599 --> 01:00:06,319
your iedf

