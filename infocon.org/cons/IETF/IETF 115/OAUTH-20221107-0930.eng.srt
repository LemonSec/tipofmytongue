1
00:00:08,720 --> 00:00:12,019
excuse me

2
00:00:36,960 --> 00:00:38,579
come on

3
00:00:38,579 --> 00:00:42,260
it's like already cats which one

4
00:00:46,260 --> 00:00:48,840
yeah yeah I think that should be the

5
00:00:48,840 --> 00:00:51,440
other one yeah

6
00:00:55,920 --> 00:00:58,320
okay

7
00:00:58,320 --> 00:01:01,559
I think we're ready to go it's 7 30

8
00:01:01,559 --> 00:01:04,140
um good morning everyone welcome to the

9
00:01:04,140 --> 00:01:06,960
first session of oauth hey great to see

10
00:01:06,960 --> 00:01:08,299
you again here

11
00:01:08,299 --> 00:01:13,280
and um let's get going

12
00:01:13,500 --> 00:01:16,020
there you go uh the north well

13
00:01:16,020 --> 00:01:17,640
um if you're not familiar with this

14
00:01:17,640 --> 00:01:20,820
please take a minute to review this this

15
00:01:20,820 --> 00:01:22,860
governs everything that we do at the IDF

16
00:01:22,860 --> 00:01:24,840
so it is important that you understand

17
00:01:24,840 --> 00:01:28,700
what's going on there this one

18
00:01:28,860 --> 00:01:29,400
um

19
00:01:29,400 --> 00:01:32,400
these are tips to to make sure um you're

20
00:01:32,400 --> 00:01:33,960
able to join

21
00:01:33,960 --> 00:01:36,540
um and contribute here if you need to so

22
00:01:36,540 --> 00:01:40,200
please if you are in the meeting use

23
00:01:40,200 --> 00:01:44,040
that um light client

24
00:01:44,040 --> 00:01:46,500
um that will allow allow you also to

25
00:01:46,500 --> 00:01:49,619
kind of join the queue if you want and

26
00:01:49,619 --> 00:01:51,540
we would know that you've been in in

27
00:01:51,540 --> 00:01:53,460
that in the room so it's important that

28
00:01:53,460 --> 00:01:55,640
you kind of use that while you're here

29
00:01:55,640 --> 00:02:00,000
and please wear a mask during this time

30
00:02:00,000 --> 00:02:03,000
unless you want to speak speak up a for

31
00:02:03,000 --> 00:02:05,759
remote but spend a please use that the

32
00:02:05,759 --> 00:02:08,758
full um remote client and make sure that

33
00:02:08,758 --> 00:02:12,060
audio and video are off until you unless

34
00:02:12,060 --> 00:02:15,300
you want to say something and we highly

35
00:02:15,300 --> 00:02:17,280
encourage that you use a headset if

36
00:02:17,280 --> 00:02:19,700
you're remote

37
00:02:20,760 --> 00:02:22,739
okay so we have

38
00:02:22,739 --> 00:02:23,599
um

39
00:02:23,599 --> 00:02:26,760
four sessions two official sessions the

40
00:02:26,760 --> 00:02:29,099
the first one is obviously today this

41
00:02:29,099 --> 00:02:32,400
one the second one is on Wednesday at

42
00:02:32,400 --> 00:02:34,620
one o'clock

43
00:02:34,620 --> 00:02:37,440
um and we have two side sessions

44
00:02:37,440 --> 00:02:40,560
um the first one is Tuesday at two and

45
00:02:40,560 --> 00:02:44,280
uh the next one is Thursday at two at

46
00:02:44,280 --> 00:02:46,319
the same time in the same room

47
00:02:46,319 --> 00:02:49,260
uh the one on Tuesday we have allocated

48
00:02:49,260 --> 00:02:51,599
uh an hour and a half probably we're

49
00:02:51,599 --> 00:02:54,420
gonna use only the first hour because we

50
00:02:54,420 --> 00:02:56,819
probably have a conflict with uh another

51
00:02:56,819 --> 00:02:59,220
Airway group but but that's that's for

52
00:02:59,220 --> 00:03:01,760
the side meeting

53
00:03:01,800 --> 00:03:05,040
uh okay so work group updates

54
00:03:05,040 --> 00:03:05,819
um

55
00:03:05,819 --> 00:03:09,840
since last time we published a jwk

56
00:03:09,840 --> 00:03:13,080
thumbprint URI so this is a Mike's and

57
00:03:13,080 --> 00:03:15,060
Christina's document so congratulations

58
00:03:15,060 --> 00:03:18,239
to Mike and Christina I think special

59
00:03:18,239 --> 00:03:20,220
congratulations for Christina I think

60
00:03:20,220 --> 00:03:23,400
this is your first RFC at ietf so

61
00:03:23,400 --> 00:03:25,379
thank you for that then thank you for

62
00:03:25,379 --> 00:03:25,960
contribution

63
00:03:25,960 --> 00:03:29,760
[Applause]

64
00:03:29,760 --> 00:03:33,980
a ITF last call we have a rare document

65
00:03:33,980 --> 00:03:36,200
at the state

66
00:03:36,200 --> 00:03:39,000
in the RFC editor queue we have job

67
00:03:39,000 --> 00:03:42,319
response for all token introspection so

68
00:03:42,319 --> 00:03:45,659
uh Roman what is the status of this that

69
00:03:45,659 --> 00:03:48,360
this has been there for some time any

70
00:03:48,360 --> 00:03:51,080
thoughts on this

71
00:03:55,440 --> 00:03:57,360
uh good morning Roman do Native

72
00:03:57,360 --> 00:03:59,040
responsible A.D and I guess it says

73
00:03:59,040 --> 00:04:00,720
something as I got up I didn't feel like

74
00:04:00,720 --> 00:04:02,220
I'd leave could leave without grabbing

75
00:04:02,220 --> 00:04:03,540
my cup of coffee and I'm like Wait no

76
00:04:03,540 --> 00:04:06,299
that's that's not a good idea uh so in

77
00:04:06,299 --> 00:04:09,239
the RC Ed queue it's uh it's in misref

78
00:04:09,239 --> 00:04:12,420
so it's waiting for the

79
00:04:12,420 --> 00:04:14,580
um for the security best practices

80
00:04:14,580 --> 00:04:17,579
so there are two things to do we could

81
00:04:17,579 --> 00:04:19,620
accelerate the best practices document

82
00:04:19,620 --> 00:04:21,779
where we could look really hard at that

83
00:04:21,779 --> 00:04:23,460
document to say do we need it as a

84
00:04:23,460 --> 00:04:25,080
normative reference

85
00:04:25,080 --> 00:04:26,100
okay

86
00:04:26,100 --> 00:04:28,440
okay good good to know so I think we're

87
00:04:28,440 --> 00:04:31,259
trying to get the best practices out

88
00:04:31,259 --> 00:04:34,020
soon so maybe let's let's wait for that

89
00:04:34,020 --> 00:04:36,320
right

90
00:04:36,960 --> 00:04:39,240
and then just since I'm up here just to

91
00:04:39,240 --> 00:04:42,840
kind of comment uh the depop document uh

92
00:04:42,840 --> 00:04:45,000
is now in kind of revised ID so we're

93
00:04:45,000 --> 00:04:46,380
we're moving a little bit yeah awesome

94
00:04:46,380 --> 00:04:48,180
thank you yeah

95
00:04:48,180 --> 00:04:50,460
yeah we got the feedback from you um

96
00:04:50,460 --> 00:04:54,120
Roman I appreciate that so we're gonna

97
00:04:54,120 --> 00:04:56,040
so the depot

98
00:04:56,040 --> 00:04:58,740
yes exactly we're chatting about this in

99
00:04:58,740 --> 00:05:00,240
in the side meeting

100
00:05:00,240 --> 00:05:01,080
um

101
00:05:01,080 --> 00:05:05,900
I think tomorrow right yeah yeah yes

102
00:05:07,919 --> 00:05:09,960
yeah yeah 2 30.

103
00:05:09,960 --> 00:05:13,560
2 30 we'll be there yeah awesome

104
00:05:13,560 --> 00:05:15,540
and uh

105
00:05:15,540 --> 00:05:17,699
waiting for security Chevron actually

106
00:05:17,699 --> 00:05:19,919
before the security BCP

107
00:05:19,919 --> 00:05:23,820
um think like you had some comments uh

108
00:05:23,820 --> 00:05:25,919
Daniel that you want to incorporate I

109
00:05:25,919 --> 00:05:29,100
think Mike used you have some other

110
00:05:29,100 --> 00:05:30,680
comments that you want to contribute to

111
00:05:30,680 --> 00:05:32,639
so let's

112
00:05:32,639 --> 00:05:36,600
yeah so let's if you can get that as

113
00:05:36,600 --> 00:05:38,639
soon as possible let's get this going

114
00:05:38,639 --> 00:05:42,600
okay and and hopefully after that we'll

115
00:05:42,600 --> 00:05:45,000
give a um harness a chance kind of to

116
00:05:45,000 --> 00:05:47,160
review it and push it forward as a

117
00:05:47,160 --> 00:05:50,300
Shepherd for this document

118
00:05:52,500 --> 00:05:54,720
we could absolutely yes

119
00:05:54,720 --> 00:05:56,039
yes

120
00:05:56,039 --> 00:05:57,419
yeah

121
00:05:57,419 --> 00:05:59,400
that works

122
00:05:59,400 --> 00:06:01,880
okay

123
00:06:02,699 --> 00:06:05,940
and so our agenda for today

124
00:06:05,940 --> 00:06:08,820
um besides uh chairs update we'll start

125
00:06:08,820 --> 00:06:11,160
with Aaron talking about giving us an

126
00:06:11,160 --> 00:06:13,680
update on browser-based apps and auto

127
00:06:13,680 --> 00:06:15,300
that one

128
00:06:15,300 --> 00:06:17,400
uh Daniel and Christina will talk about

129
00:06:17,400 --> 00:06:20,880
the SD jot and Brian will give us an

130
00:06:20,880 --> 00:06:23,340
update on the step Authentication

131
00:06:23,340 --> 00:06:26,580
and a bench watch his remote

132
00:06:26,580 --> 00:06:29,280
I hopefully he's on the list yeah I see

133
00:06:29,280 --> 00:06:31,400
him there so he will talk about

134
00:06:31,400 --> 00:06:33,660
interactive authentication document that

135
00:06:33,660 --> 00:06:34,979
he submitted

136
00:06:34,979 --> 00:06:37,199
um just recently

137
00:06:37,199 --> 00:06:41,100
um at the end so that's for Monday for

138
00:06:41,100 --> 00:06:43,319
Wednesday uh I'll be talking about jot

139
00:06:43,319 --> 00:06:45,960
embedded tokens a Atul will be talking

140
00:06:45,960 --> 00:06:47,639
about fine-grained transactional

141
00:06:47,639 --> 00:06:50,759
authorization a Peter will be talking

142
00:06:50,759 --> 00:06:53,880
about his new draft that just submit

143
00:06:53,880 --> 00:06:55,860
submitted recently across device flows

144
00:06:55,860 --> 00:06:58,380
and Christina will talk about the client

145
00:06:58,380 --> 00:07:01,319
ID for anonymous say clients

146
00:07:01,319 --> 00:07:05,460
so that's for Wednesday side meetings uh

147
00:07:05,460 --> 00:07:08,039
depop Ada review there are a few

148
00:07:08,039 --> 00:07:10,020
comments and we're gonna discuss this

149
00:07:10,020 --> 00:07:13,440
directly with the with Roman um tomorrow

150
00:07:13,440 --> 00:07:16,380
and there's also some questions comments

151
00:07:16,380 --> 00:07:18,419
say from the fappy working group at open

152
00:07:18,419 --> 00:07:21,479
ID we want to talk about that

153
00:07:21,479 --> 00:07:24,859
guide the Roman

154
00:07:25,620 --> 00:07:27,240
yeah in the spirit of keeping things

155
00:07:27,240 --> 00:07:28,680
moving I think we only need to talk

156
00:07:28,680 --> 00:07:30,780
about algorithm agility I'm fine with

157
00:07:30,780 --> 00:07:32,340
the number of others It's Not My Equity

158
00:07:32,340 --> 00:07:34,500
you just got to document it uh so I do

159
00:07:34,500 --> 00:07:35,880
remember some of the reasons why we got

160
00:07:35,880 --> 00:07:37,080
there we just got to write it down so

161
00:07:37,080 --> 00:07:38,400
algorithm agility is the only thing on

162
00:07:38,400 --> 00:07:40,259
my list so when you say write it down

163
00:07:40,259 --> 00:07:42,960
just update the the shepherd's write-up

164
00:07:42,960 --> 00:07:44,340
or is that is that good enough yeah

165
00:07:44,340 --> 00:07:45,960
precisely because in ISU review that's

166
00:07:45,960 --> 00:07:47,520
like the first question for C when they

167
00:07:47,520 --> 00:07:48,840
open up the document like what you

168
00:07:48,840 --> 00:07:50,280
didn't I mean we saved less than five

169
00:07:50,280 --> 00:07:51,840
why do you got more than five and I'll

170
00:07:51,840 --> 00:07:53,460
defend why we got there we just need to

171
00:07:53,460 --> 00:07:56,699
write it down awesome thank you

172
00:07:56,699 --> 00:07:58,919
um we also want to talk about oauth work

173
00:07:58,919 --> 00:08:01,380
group GitHub I think Aaron helped us

174
00:08:01,380 --> 00:08:04,380
kind of get this going so it will Aaron

175
00:08:04,380 --> 00:08:06,120
we'll talk about that

176
00:08:06,120 --> 00:08:07,979
um a tool we'll kind of dig deeper into

177
00:08:07,979 --> 00:08:09,780
the fine-grained transactional

178
00:08:09,780 --> 00:08:11,819
authorization

179
00:08:11,819 --> 00:08:14,940
um and then Aaron will have more chance

180
00:08:14,940 --> 00:08:16,740
to talk about a browser-based app and

181
00:08:16,740 --> 00:08:19,740
auth2.1 I will add a security BCP for

182
00:08:19,740 --> 00:08:22,139
for Daniel also to talk about those that

183
00:08:22,139 --> 00:08:23,099
too

184
00:08:23,099 --> 00:08:26,699
and I think that's all we have any

185
00:08:26,699 --> 00:08:29,520
questions comments

186
00:08:29,520 --> 00:08:32,520
foreign

187
00:08:34,039 --> 00:08:37,039
let's

188
00:08:37,399 --> 00:08:40,580
get going

189
00:08:44,700 --> 00:08:49,580
do you want me to hand you the control

190
00:08:51,779 --> 00:08:54,600
there you go all right

191
00:08:54,600 --> 00:08:58,140
good morning I'm Aaron praki from OCTA

192
00:08:58,140 --> 00:08:58,860
um

193
00:08:58,860 --> 00:09:01,380
two drafts to talk about today oh 2.1

194
00:09:01,380 --> 00:09:04,080
and browser-based apps will start here

195
00:09:04,080 --> 00:09:04,860
um

196
00:09:04,860 --> 00:09:07,019
decided to follow Brian's tradition of

197
00:09:07,019 --> 00:09:09,060
including photos from the location in

198
00:09:09,060 --> 00:09:10,380
slide decks I think we should all do

199
00:09:10,380 --> 00:09:12,180
that so that is my personal challenge to

200
00:09:12,180 --> 00:09:13,860
everybody else

201
00:09:13,860 --> 00:09:16,260
um that was from uh yesterday on a

202
00:09:16,260 --> 00:09:21,240
little Adventure so uh oauth 2.1 the um

203
00:09:21,240 --> 00:09:22,380
if

204
00:09:22,380 --> 00:09:23,760
you're not familiar with this it's

205
00:09:23,760 --> 00:09:26,600
essentially an effort to consolidate the

206
00:09:26,600 --> 00:09:29,519
existing oauth 2.0 drafts and best

207
00:09:29,519 --> 00:09:31,620
practices into a document that is easier

208
00:09:31,620 --> 00:09:33,959
to read and more up to date on a number

209
00:09:33,959 --> 00:09:36,000
of fronts there's quite a lot of

210
00:09:36,000 --> 00:09:37,620
language and references that are now

211
00:09:37,620 --> 00:09:40,200
quite outdated in oauth 2.0 which has

212
00:09:40,200 --> 00:09:42,480
just celebrated its 10-year anniversary

213
00:09:42,480 --> 00:09:45,000
last month so

214
00:09:45,000 --> 00:09:46,920
um been a while so

215
00:09:46,920 --> 00:09:48,899
uh since the last time we chatted

216
00:09:48,899 --> 00:09:50,940
there's been

217
00:09:50,940 --> 00:09:53,459
a little bit of updates to the draft

218
00:09:53,459 --> 00:09:54,420
um

219
00:09:54,420 --> 00:09:56,940
the abstract has now been updated to

220
00:09:56,940 --> 00:09:59,399
remove the term third party since I

221
00:09:59,399 --> 00:10:01,560
think uh a lot of the use of oauth today

222
00:10:01,560 --> 00:10:03,300
is actually in first party as well as

223
00:10:03,300 --> 00:10:05,580
third party so it now it just applies to

224
00:10:05,580 --> 00:10:07,080
everything

225
00:10:07,080 --> 00:10:08,100
um also

226
00:10:08,100 --> 00:10:10,380
part of the motivations of using oauth

227
00:10:10,380 --> 00:10:12,240
is to enable things like multi-factor

228
00:10:12,240 --> 00:10:14,220
auth and passwordless auth so that's now

229
00:10:14,220 --> 00:10:17,459
added to the introduction as well

230
00:10:17,459 --> 00:10:19,680
um as we talked about last time

231
00:10:19,680 --> 00:10:21,480
push authorization requests is an

232
00:10:21,480 --> 00:10:23,459
interesting kind of exception to the

233
00:10:23,459 --> 00:10:25,440
requirement that is described elsewhere

234
00:10:25,440 --> 00:10:27,420
as needing to register redirect URLs

235
00:10:27,420 --> 00:10:28,500
everywhere

236
00:10:28,500 --> 00:10:30,420
that is now mentioned as a way that

237
00:10:30,420 --> 00:10:31,740
registration can happen because it's

238
00:10:31,740 --> 00:10:34,620
effectively on the Fly registration of

239
00:10:34,620 --> 00:10:37,019
the redirect URL

240
00:10:37,019 --> 00:10:38,640
um there's

241
00:10:38,640 --> 00:10:40,920
a mention of if your token endpoint is

242
00:10:40,920 --> 00:10:42,180
going to be used by browser-based apps

243
00:10:42,180 --> 00:10:43,320
you'll need to support the course

244
00:10:43,320 --> 00:10:45,120
headers although that's something else

245
00:10:45,120 --> 00:10:46,680
we're going to have to talk about in a

246
00:10:46,680 --> 00:10:47,640
little bit

247
00:10:47,640 --> 00:10:51,240
and some updates to references and

248
00:10:51,240 --> 00:10:53,279
um little fixes here and there so

249
00:10:53,279 --> 00:10:56,519
overall not a ton of not a ton of uh

250
00:10:56,519 --> 00:10:59,120
changes there

251
00:10:59,519 --> 00:11:03,060
um since the spring meeting these are

252
00:11:03,060 --> 00:11:06,000
some of the changes as well I think we

253
00:11:06,000 --> 00:11:08,220
talked about all of these uh last time

254
00:11:08,220 --> 00:11:09,720
in Philadelphia if you were there so I'm

255
00:11:09,720 --> 00:11:12,240
not going to go over the one by one I do

256
00:11:12,240 --> 00:11:14,279
have links on the slides

257
00:11:14,279 --> 00:11:17,040
to the GitHub repo that talks about uh

258
00:11:17,040 --> 00:11:19,800
all of the issues that were closed or

259
00:11:19,800 --> 00:11:22,579
discussed during this round of changes

260
00:11:22,579 --> 00:11:25,440
and there's also the link to the diff of

261
00:11:25,440 --> 00:11:28,079
uh draft five to seven which was from

262
00:11:28,079 --> 00:11:29,880
July till now

263
00:11:29,880 --> 00:11:32,100
and you may notice that it's at a new

264
00:11:32,100 --> 00:11:34,019
GitHub org which we will also talk about

265
00:11:34,019 --> 00:11:36,660
in the side meeting

266
00:11:36,660 --> 00:11:38,100
um

267
00:11:38,100 --> 00:11:40,620
a couple of things that are still uh

268
00:11:40,620 --> 00:11:42,540
just sort of on the path to do which

269
00:11:42,540 --> 00:11:44,820
have uh some of these have now been on

270
00:11:44,820 --> 00:11:46,079
the to-do list for a long time because

271
00:11:46,079 --> 00:11:48,180
they're just big tasks

272
00:11:48,180 --> 00:11:50,220
um any help is appreciated on any of

273
00:11:50,220 --> 00:11:52,019
these but uh Justin Victoria's write-ups

274
00:11:52,019 --> 00:11:53,399
still working through the their

275
00:11:53,399 --> 00:11:55,800
write-ups from the original draft of

276
00:11:55,800 --> 00:11:57,899
this a lot of that is now

277
00:11:57,899 --> 00:12:00,120
dealt with and closed and revised by

278
00:12:00,120 --> 00:12:01,320
various things but there's still just a

279
00:12:01,320 --> 00:12:02,820
little bit more left in those write-ups

280
00:12:02,820 --> 00:12:04,560
to get to

281
00:12:04,560 --> 00:12:07,260
um there's still the uh rather large

282
00:12:07,260 --> 00:12:09,300
task of identifying any normative

283
00:12:09,300 --> 00:12:11,880
language that may be in various sections

284
00:12:11,880 --> 00:12:14,279
like security considerations and moving

285
00:12:14,279 --> 00:12:16,980
where appropriate backup to the actual

286
00:12:16,980 --> 00:12:20,519
core document uh main part of the draft

287
00:12:20,519 --> 00:12:22,260
and then one thing that we identified at

288
00:12:22,260 --> 00:12:23,519
one point I don't remember which meeting

289
00:12:23,519 --> 00:12:24,720
it was at

290
00:12:24,720 --> 00:12:27,060
um adding an explicit section talking

291
00:12:27,060 --> 00:12:30,540
about the core differences from oauth 2

292
00:12:30,540 --> 00:12:33,120
and which changes are breaking changes

293
00:12:33,120 --> 00:12:34,860
to who because

294
00:12:34,860 --> 00:12:37,019
um essentially if you are following the

295
00:12:37,019 --> 00:12:38,820
best practices today that it already is

296
00:12:38,820 --> 00:12:41,100
2.1 but that is quite different from

297
00:12:41,100 --> 00:12:44,940
original oauth 2 as described in 6749 so

298
00:12:44,940 --> 00:12:46,200
we will make sure to document everything

299
00:12:46,200 --> 00:12:47,820
so people can know what to look for when

300
00:12:47,820 --> 00:12:49,980
they want to go and double check that

301
00:12:49,980 --> 00:12:52,980
their current oauth 2 systems are

302
00:12:52,980 --> 00:12:55,079
actually following the best practices

303
00:12:55,079 --> 00:12:56,880
there are a few more issues that I

304
00:12:56,880 --> 00:12:58,980
didn't pull out uh specifically here

305
00:12:58,980 --> 00:13:01,440
feel free to take a look on

306
00:13:01,440 --> 00:13:04,920
the GitHub repo if you are interested

307
00:13:04,920 --> 00:13:06,779
and um

308
00:13:06,779 --> 00:13:09,839
we'll be working through those on GitHub

309
00:13:09,839 --> 00:13:11,459
now a couple things I did want to talk

310
00:13:11,459 --> 00:13:14,160
about here in particular are some things

311
00:13:14,160 --> 00:13:15,240
that

312
00:13:15,240 --> 00:13:16,740
um

313
00:13:16,740 --> 00:13:19,440
either I felt were particularly relevant

314
00:13:19,440 --> 00:13:22,260
to a synchronous group discussion or

315
00:13:22,260 --> 00:13:25,260
things that one of them was something

316
00:13:25,260 --> 00:13:27,000
that needed to get pulled from the side

317
00:13:27,000 --> 00:13:29,579
meeting to the e-real meeting

318
00:13:29,579 --> 00:13:31,079
um

319
00:13:31,079 --> 00:13:34,019
so crossword and resource sharing

320
00:13:34,019 --> 00:13:36,860
um there's a

321
00:13:37,560 --> 00:13:39,240
one in one of the meetings we identified

322
00:13:39,240 --> 00:13:40,980
that the token endpoint needs a mention

323
00:13:40,980 --> 00:13:43,320
of supporting cross-order resource

324
00:13:43,320 --> 00:13:44,880
sharing so that was then added and then

325
00:13:44,880 --> 00:13:46,740
that's really the only endpoint in the

326
00:13:46,740 --> 00:13:48,300
core draft but there's a whole bunch of

327
00:13:48,300 --> 00:13:49,860
other endpoints that are defined in

328
00:13:49,860 --> 00:13:53,339
extensions to oauth 2.0 that are pretty

329
00:13:53,339 --> 00:13:55,860
commonly used and widely deployed that

330
00:13:55,860 --> 00:13:57,600
will also need cross-order resource

331
00:13:57,600 --> 00:13:58,680
sharing support

332
00:13:58,680 --> 00:14:01,860
and um I think it's worth mentioning in

333
00:14:01,860 --> 00:14:03,540
particular in the core draft there may

334
00:14:03,540 --> 00:14:05,399
be extensions that require this as well

335
00:14:05,399 --> 00:14:07,500
and that would be things like

336
00:14:07,500 --> 00:14:11,519
um the the metadata endpoints or the par

337
00:14:11,519 --> 00:14:14,220
endpoint or what those kinds of things

338
00:14:14,220 --> 00:14:15,060
um

339
00:14:15,060 --> 00:14:17,459
and in addition the authorization

340
00:14:17,459 --> 00:14:19,800
endpoint itself which will be visited by

341
00:14:19,800 --> 00:14:21,959
the browser not used by JavaScript

342
00:14:21,959 --> 00:14:24,480
actually should explicitly not allow

343
00:14:24,480 --> 00:14:26,339
cross-origin requests

344
00:14:26,339 --> 00:14:28,320
uh because bad things can happen if so

345
00:14:28,320 --> 00:14:30,899
which means essentially

346
00:14:30,899 --> 00:14:32,459
there should probably be a course

347
00:14:32,459 --> 00:14:34,620
section in oau 2.1 that talks about this

348
00:14:34,620 --> 00:14:36,180
as a whole instead of just one mention

349
00:14:36,180 --> 00:14:38,820
of it somewhere and an open ID connect

350
00:14:38,820 --> 00:14:40,320
this discussion has also been happening

351
00:14:40,320 --> 00:14:41,820
and

352
00:14:41,820 --> 00:14:44,160
um I think we need to sort of have a

353
00:14:44,160 --> 00:14:46,500
general agreement on the language that

354
00:14:46,500 --> 00:14:49,019
goes into to both of these which also

355
00:14:49,019 --> 00:14:52,139
applies to security BCP so

356
00:14:52,139 --> 00:14:53,100
um

357
00:14:53,100 --> 00:14:55,620
essentially the

358
00:14:55,620 --> 00:14:57,360
um my thought is to add a section about

359
00:14:57,360 --> 00:14:58,860
cores

360
00:14:58,860 --> 00:15:01,380
mentioning explicitly not allowing cores

361
00:15:01,380 --> 00:15:03,540
of the authorization endpoint

362
00:15:03,540 --> 00:15:05,820
to support JavaScript apps then you'll

363
00:15:05,820 --> 00:15:07,320
need to support cores at the following

364
00:15:07,320 --> 00:15:09,360
endpoints that are

365
00:15:09,360 --> 00:15:12,120
um either defined in oauth 2.1 or in

366
00:15:12,120 --> 00:15:13,980
extensions that are already being

367
00:15:13,980 --> 00:15:15,660
referenced

368
00:15:15,660 --> 00:15:18,300
um in in the draft

369
00:15:18,300 --> 00:15:21,000
other uh these are the four that I found

370
00:15:21,000 --> 00:15:22,320
quickly

371
00:15:22,320 --> 00:15:23,339
um

372
00:15:23,339 --> 00:15:25,079
if anybody knows of any others that are

373
00:15:25,079 --> 00:15:26,579
worth pointing out specifically

374
00:15:26,579 --> 00:15:29,760
suggestions are welcome uh that links to

375
00:15:29,760 --> 00:15:33,540
the issue 133 where I'm collecting this

376
00:15:33,540 --> 00:15:34,920
stuff right now so feel free to go in

377
00:15:34,920 --> 00:15:37,320
there and add suggestions if you have

378
00:15:37,320 --> 00:15:39,600
any other ideas for things that will be

379
00:15:39,600 --> 00:15:41,100
useful to mention around

380
00:15:41,100 --> 00:15:45,980
General course recommendations for oauth

381
00:15:46,440 --> 00:15:49,199
so I think do you want to take comments

382
00:15:49,199 --> 00:15:51,660
here sure yes topic so anybody has any

383
00:15:51,660 --> 00:15:56,240
comments I I noticed some nods there but

384
00:15:56,240 --> 00:15:59,899
beyond knots go ahead

385
00:16:03,079 --> 00:16:06,120
I just want to ask you bring all right

386
00:16:06,120 --> 00:16:08,459
can you state your name Daryl Miller

387
00:16:08,459 --> 00:16:11,220
from Microsoft uh you mentioned

388
00:16:11,220 --> 00:16:12,839
JavaScript apps but I'm just wondering

389
00:16:12,839 --> 00:16:16,199
in this world of wasm now whether how

390
00:16:16,199 --> 00:16:18,480
cores interacts with wasm and whether we

391
00:16:18,480 --> 00:16:21,300
should say that more broadly

392
00:16:21,300 --> 00:16:23,579
uh that is a great Point probably worth

393
00:16:23,579 --> 00:16:26,279
not using the term JavaScript in

394
00:16:26,279 --> 00:16:28,620
reference to cores anymore

395
00:16:28,620 --> 00:16:31,320
um so yeah we'll figure the right the

396
00:16:31,320 --> 00:16:32,459
right language that probably just

397
00:16:32,459 --> 00:16:36,018
browser-based apps

398
00:16:39,600 --> 00:16:40,620
oh

399
00:16:40,620 --> 00:16:41,880
I see Brian

400
00:16:41,880 --> 00:16:43,759
sorry

401
00:16:43,759 --> 00:16:45,720
oh

402
00:16:45,720 --> 00:16:48,620
Brian go ahead

403
00:16:49,380 --> 00:16:51,660
uh Brian Campbell paying identity I'm

404
00:16:51,660 --> 00:16:53,940
totally on board with all this I think

405
00:16:53,940 --> 00:16:56,220
it's a great way to go along the same

406
00:16:56,220 --> 00:16:58,380
lines of trying to explain the

407
00:16:58,380 --> 00:17:01,320
difference between used by browser-based

408
00:17:01,320 --> 00:17:03,959
apps and used directly by browser-based

409
00:17:03,959 --> 00:17:05,760
apps because like

410
00:17:05,760 --> 00:17:09,179
the the authorization endpoint is going

411
00:17:09,179 --> 00:17:11,339
to be used by these apps and it's the

412
00:17:11,339 --> 00:17:14,339
nature of the use that I think is

413
00:17:14,339 --> 00:17:17,640
both the reason for not exposing its

414
00:17:17,640 --> 00:17:20,220
occurs at course that's the beer from

415
00:17:20,220 --> 00:17:22,500
where I'm from

416
00:17:22,500 --> 00:17:25,199
um it's not really beer of course and

417
00:17:25,199 --> 00:17:28,500
and how it's used the that's sort of the

418
00:17:28,500 --> 00:17:30,480
heart of the issue and I think

419
00:17:30,480 --> 00:17:32,100
everything you're saying is right on but

420
00:17:32,100 --> 00:17:33,540
actually really explaining how that

421
00:17:33,540 --> 00:17:35,820
works um in good language that I don't

422
00:17:35,820 --> 00:17:38,460
have but I'm suggesting you right is is

423
00:17:38,460 --> 00:17:41,940
good so thanks thank you no I I totally

424
00:17:41,940 --> 00:17:43,860
agree and I think that actually is a a

425
00:17:43,860 --> 00:17:45,900
great example of why this requires like

426
00:17:45,900 --> 00:17:47,520
a dedicated section to talk about it so

427
00:17:47,520 --> 00:17:49,140
we can actually explain

428
00:17:49,140 --> 00:17:52,400
exactly those points

429
00:17:53,820 --> 00:17:56,820
so Mike Jones Microsoft as I was doing

430
00:17:56,820 --> 00:17:59,880
the Errata edit for Connect

431
00:17:59,880 --> 00:18:01,980
about this

432
00:18:01,980 --> 00:18:05,220
um I was the one who came up with the

433
00:18:05,220 --> 00:18:08,280
used directly by versus used via

434
00:18:08,280 --> 00:18:11,460
redirect but I would love somebody to

435
00:18:11,460 --> 00:18:14,880
give me a short phrase

436
00:18:14,880 --> 00:18:16,620
which connotes

437
00:18:16,620 --> 00:18:21,780
using HTTP verbs such as get post

438
00:18:21,780 --> 00:18:24,539
what not what what is that action

439
00:18:24,539 --> 00:18:28,220
without being verb specific

440
00:18:31,559 --> 00:18:34,039
net navigate is a redirect

441
00:18:34,039 --> 00:18:37,380
to the mic Danielle if you want to speak

442
00:18:37,380 --> 00:18:39,840
up please go to the mic I'll I'll sit

443
00:18:39,840 --> 00:18:41,460
down but

444
00:18:41,460 --> 00:18:43,380
amplifies what Brian just said we need

445
00:18:43,380 --> 00:18:46,380
that one yeah I I agree I think uh we'll

446
00:18:46,380 --> 00:18:47,940
have to do a little bit of work to

447
00:18:47,940 --> 00:18:49,679
figure out the specific language for it

448
00:18:49,679 --> 00:18:51,840
but I agree that like yeah we need to be

449
00:18:51,840 --> 00:18:54,000
very clear about whether the browser is

450
00:18:54,000 --> 00:18:55,500
the one making the request or whether

451
00:18:55,500 --> 00:18:56,960
you're

452
00:18:56,960 --> 00:18:59,460
JavaScript or other languages that run

453
00:18:59,460 --> 00:19:03,059
in a browser making uh requests

454
00:19:03,059 --> 00:19:04,440
um

455
00:19:04,440 --> 00:19:06,539
itself directly I don't know the the

456
00:19:06,539 --> 00:19:09,559
right term for that so

457
00:19:10,080 --> 00:19:11,940
but it sounds like we're at least all in

458
00:19:11,940 --> 00:19:15,240
agreement on the concept so

459
00:19:15,240 --> 00:19:17,220
um cool

460
00:19:17,220 --> 00:19:19,679
yeah feel free to add suggestions into

461
00:19:19,679 --> 00:19:21,840
that to get that GitHub link if you have

462
00:19:21,840 --> 00:19:24,299
any thoughts about the language that

463
00:19:24,299 --> 00:19:28,879
would be useful to use in the section

464
00:19:29,520 --> 00:19:32,120
um cool okay

465
00:19:34,140 --> 00:19:38,480
moving on to

466
00:19:38,720 --> 00:19:42,900
new issue 54. this was uh an older

467
00:19:42,900 --> 00:19:45,720
discussion that we brought up during the

468
00:19:45,720 --> 00:19:48,480
side meeting last time we met had a

469
00:19:48,480 --> 00:19:50,039
brief discussion about it and then it

470
00:19:50,039 --> 00:19:52,440
continued to get a comment or two on

471
00:19:52,440 --> 00:19:53,880
GitHub

472
00:19:53,880 --> 00:19:56,520
um at the token endpoint

473
00:19:56,520 --> 00:19:58,200
there's a list of parameters required to

474
00:19:58,200 --> 00:20:00,600
exchange an authorization code

475
00:20:00,600 --> 00:20:02,160
when exchanging an authorization code

476
00:20:02,160 --> 00:20:04,320
one of them is the redirect URI there's

477
00:20:04,320 --> 00:20:06,900
language in the original spec that says

478
00:20:06,900 --> 00:20:08,880
send the redirect URI to avoid certain

479
00:20:08,880 --> 00:20:10,620
types of mix-up attacks

480
00:20:10,620 --> 00:20:12,539
and it's

481
00:20:12,539 --> 00:20:13,260
um

482
00:20:13,260 --> 00:20:15,600
arguably not a bulletproof Solution by

483
00:20:15,600 --> 00:20:18,480
any means in the original spec but it

484
00:20:18,480 --> 00:20:21,120
actually has zero technical purpose once

485
00:20:21,120 --> 00:20:23,220
you are using Pixi it doesn't actually

486
00:20:23,220 --> 00:20:24,900
do anything else

487
00:20:24,900 --> 00:20:28,020
pixie solves the mix-up attack that

488
00:20:28,020 --> 00:20:30,660
redirect URI barely solved to begin with

489
00:20:30,660 --> 00:20:31,860
so

490
00:20:31,860 --> 00:20:34,080
my question was since we're cleaning

491
00:20:34,080 --> 00:20:35,160
this up

492
00:20:35,160 --> 00:20:37,380
can we just leave it out off because it

493
00:20:37,380 --> 00:20:39,720
doesn't do anything and there was a

494
00:20:39,720 --> 00:20:40,799
discussion

495
00:20:40,799 --> 00:20:42,660
uh we do want backwards compatibility of

496
00:20:42,660 --> 00:20:44,640
course with we shouldn't be like

497
00:20:44,640 --> 00:20:47,160
we shouldn't make it so that oauth

498
00:20:47,160 --> 00:20:49,559
clients are going to suddenly stop

499
00:20:49,559 --> 00:20:51,299
working if they're sending the parameter

500
00:20:51,299 --> 00:20:54,299
uh for example so the question is how do

501
00:20:54,299 --> 00:20:55,260
we

502
00:20:55,260 --> 00:20:57,960
support that while also

503
00:20:57,960 --> 00:20:58,880
um

504
00:20:58,880 --> 00:21:01,620
not just having it required for the sake

505
00:21:01,620 --> 00:21:04,799
of it because it's always been there

506
00:21:04,799 --> 00:21:07,320
the options are anything from just not

507
00:21:07,320 --> 00:21:09,360
documenting it and letting people just

508
00:21:09,360 --> 00:21:12,480
do it or not there's also making it

509
00:21:12,480 --> 00:21:14,580
required that the as

510
00:21:14,580 --> 00:21:17,640
would accept and also verify it if sent

511
00:21:17,640 --> 00:21:20,280
but not require it to be sent

512
00:21:20,280 --> 00:21:22,140
which feels like the right way to do the

513
00:21:22,140 --> 00:21:24,360
backwards compatibility I think other

514
00:21:24,360 --> 00:21:25,640
options

515
00:21:25,640 --> 00:21:28,380
or just leave it alone and make it just

516
00:21:28,380 --> 00:21:30,240
keep it as a required parameter because

517
00:21:30,240 --> 00:21:32,280
maybe that's just the simplest and

518
00:21:32,280 --> 00:21:35,039
anything else is adding new problems

519
00:21:35,039 --> 00:21:36,780
um I'm

520
00:21:36,780 --> 00:21:38,640
I'm on the fence about it but it feels

521
00:21:38,640 --> 00:21:41,280
like an opportunity to to like

522
00:21:41,280 --> 00:21:43,500
clean things up because every time I'm

523
00:21:43,500 --> 00:21:45,539
explaining this to a developer and I'm

524
00:21:45,539 --> 00:21:47,520
like send the redirect URI parameter

525
00:21:47,520 --> 00:21:48,659
because

526
00:21:48,659 --> 00:21:50,159
I don't know we've just always done it

527
00:21:50,159 --> 00:21:51,120
this way

528
00:21:51,120 --> 00:21:53,520
it's like not terribly compelling

529
00:21:53,520 --> 00:21:56,159
um so that's I would like to actually uh

530
00:21:56,159 --> 00:21:57,659
have a quick discussion here about about

531
00:21:57,659 --> 00:22:00,020
this

532
00:22:02,039 --> 00:22:05,460
Mike Jones Microsoft

533
00:22:05,460 --> 00:22:07,580
um

534
00:22:08,039 --> 00:22:11,700
I suspect that some code is going to

535
00:22:11,700 --> 00:22:13,559
break because

536
00:22:13,559 --> 00:22:15,600
when it's not sent because it's

537
00:22:15,600 --> 00:22:17,880
expecting it to be there

538
00:22:17,880 --> 00:22:19,200
and

539
00:22:19,200 --> 00:22:24,360
I think not by itself yeah it's probably

540
00:22:24,360 --> 00:22:27,059
enough reason to

541
00:22:27,059 --> 00:22:28,980
uh

542
00:22:28,980 --> 00:22:30,720
keep it either as recommended or

543
00:22:30,720 --> 00:22:32,640
required I would be fine with a note

544
00:22:32,640 --> 00:22:34,799
being put in saying

545
00:22:34,799 --> 00:22:37,320
this is effectively redundant when

546
00:22:37,320 --> 00:22:39,659
you're using pixie but

547
00:22:39,659 --> 00:22:41,460
I think for

548
00:22:41,460 --> 00:22:42,539
um

549
00:22:42,539 --> 00:22:44,640
for the for the backwards compatibility

550
00:22:44,640 --> 00:22:46,320
discussion it's like you have to

551
00:22:46,320 --> 00:22:49,200
consider which end it's breaking on and

552
00:22:49,200 --> 00:22:51,900
I think for the as like obviously if

553
00:22:51,900 --> 00:22:53,400
you're not if the client's not doing

554
00:22:53,400 --> 00:22:56,280
pixie this is marginally useful so if

555
00:22:56,280 --> 00:22:58,320
the client's not doing pixie then you're

556
00:22:58,320 --> 00:23:00,000
not even you're not doing the oau 2.1

557
00:23:00,000 --> 00:23:02,760
flow to begin with so if the as supports

558
00:23:02,760 --> 00:23:06,179
oauth 2.1 or requires it for a client it

559
00:23:06,179 --> 00:23:07,740
feels like it's okay for it to just

560
00:23:07,740 --> 00:23:09,600
ignore the parameter and not require it

561
00:23:09,600 --> 00:23:11,700
because if you're already opting into

562
00:23:11,700 --> 00:23:14,520
the new behavior in the spec then there

563
00:23:14,520 --> 00:23:16,679
is nothing to break there but yes for an

564
00:23:16,679 --> 00:23:19,020
oauth 2.0 authorization server obviously

565
00:23:19,020 --> 00:23:21,179
we're not saying

566
00:23:21,179 --> 00:23:23,100
don't want 2.1 clients are expected to

567
00:23:23,100 --> 00:23:24,900
work with 2.0 servers because that's not

568
00:23:24,900 --> 00:23:26,100
the

569
00:23:26,100 --> 00:23:27,720
backwards compatibility that's not

570
00:23:27,720 --> 00:23:29,039
backwards that's just forwards

571
00:23:29,039 --> 00:23:31,760
compatibility right

572
00:23:34,559 --> 00:23:36,720
and and you have plus one from George

573
00:23:36,720 --> 00:23:39,500
okay

574
00:23:42,960 --> 00:23:46,200
Aaron what type of compatibility do you

575
00:23:46,200 --> 00:23:49,620
want would you want uh a 2.1 client

576
00:23:49,620 --> 00:23:54,480
talking to an old uh 2.0 authorization

577
00:23:54,480 --> 00:23:56,220
server

578
00:23:56,220 --> 00:23:58,799
would that be would that be something

579
00:23:58,799 --> 00:24:01,320
that is actually okay or because that's

580
00:24:01,320 --> 00:24:03,360
that's where the problem shows up

581
00:24:03,360 --> 00:24:05,580
the

582
00:24:05,580 --> 00:24:07,440
again because 2.1 is not supposed to be

583
00:24:07,440 --> 00:24:08,700
an entirely new thing it's supposed to

584
00:24:08,700 --> 00:24:11,039
be the collection of best practices if

585
00:24:11,039 --> 00:24:12,960
an as is already supporting best

586
00:24:12,960 --> 00:24:14,340
practices

587
00:24:14,340 --> 00:24:15,780
then

588
00:24:15,780 --> 00:24:20,220
it's not a 2.0 in that direction it

589
00:24:20,220 --> 00:24:22,620
should be considered a 2.1 as already

590
00:24:22,620 --> 00:24:26,580
right okay so naturally that the issue

591
00:24:26,580 --> 00:24:29,039
shouldn't shouldn't pop up is strictly

592
00:24:29,039 --> 00:24:30,419
speaking like if you follow best

593
00:24:30,419 --> 00:24:32,220
practices

594
00:24:32,220 --> 00:24:36,900
I I believe so so if a oauth client

595
00:24:36,900 --> 00:24:38,280
is

596
00:24:38,280 --> 00:24:40,620
um if I know about 2.0 client was

597
00:24:40,620 --> 00:24:42,780
talking to a 2.1 server

598
00:24:42,780 --> 00:24:45,059
and it does send the redirect URL we

599
00:24:45,059 --> 00:24:47,460
don't want the as to reject it so it

600
00:24:47,460 --> 00:24:48,960
should ignore it because it doesn't

601
00:24:48,960 --> 00:24:51,240
serve any purpose which is already what

602
00:24:51,240 --> 00:24:52,140
it's supposed to do with unknown

603
00:24:52,140 --> 00:24:54,360
parameters basically turning it into a

604
00:24:54,360 --> 00:24:57,840
unrecognized parameter and then if oauth

605
00:24:57,840 --> 00:25:00,559
client

606
00:25:00,659 --> 00:25:04,320
opts into the 2.1 Behavior it should

607
00:25:04,320 --> 00:25:06,299
work with a lot of servers that are

608
00:25:06,299 --> 00:25:08,580
following the best practices so

609
00:25:08,580 --> 00:25:10,799
if it's not sending it

610
00:25:10,799 --> 00:25:14,100
then we only want to

611
00:25:14,100 --> 00:25:16,860
let that break if everybody's agreed on

612
00:25:16,860 --> 00:25:19,820
the new rules right

613
00:25:20,159 --> 00:25:21,840
I believe that I believe that's the

614
00:25:21,840 --> 00:25:24,539
logic we're trying to follow here

615
00:25:24,539 --> 00:25:26,039
if everybody agrees on the new rules

616
00:25:26,039 --> 00:25:28,140
then everybody plays by the same rules

617
00:25:28,140 --> 00:25:31,320
but if one person doesn't then it's okay

618
00:25:31,320 --> 00:25:33,000
if it breaks

619
00:25:33,000 --> 00:25:35,539
as long as it's not

620
00:25:35,539 --> 00:25:37,980
rejecting it if it's sending the

621
00:25:37,980 --> 00:25:39,659
parameter from

622
00:25:39,659 --> 00:25:42,120
that makes sense

623
00:25:42,120 --> 00:25:44,520
I'm seeing some nods it's definitely

624
00:25:44,520 --> 00:25:45,900
confusing

625
00:25:45,900 --> 00:25:47,960
um

626
00:25:50,100 --> 00:25:53,100
it sounds like and then the

627
00:25:53,100 --> 00:25:54,840
the option two here that I have on the

628
00:25:54,840 --> 00:25:56,700
list of

629
00:25:56,700 --> 00:25:57,659
um

630
00:25:57,659 --> 00:26:01,039
making a note of

631
00:26:01,559 --> 00:26:03,360
if the client

632
00:26:03,360 --> 00:26:05,640
uh does send it

633
00:26:05,640 --> 00:26:09,480
then the as should also check it because

634
00:26:09,480 --> 00:26:13,080
that's how it can support older clients

635
00:26:13,080 --> 00:26:14,580
so that's the sort of backwards

636
00:26:14,580 --> 00:26:17,299
compatibility note

637
00:26:18,059 --> 00:26:20,340
go ahead Daniel yeah then you've had

638
00:26:20,340 --> 00:26:22,020
yes.com

639
00:26:22,020 --> 00:26:26,159
um just saying so this is obviously not

640
00:26:26,159 --> 00:26:28,200
something we will do in a security BCP

641
00:26:28,200 --> 00:26:30,720
because it's not security related uh so

642
00:26:30,720 --> 00:26:33,960
we cannot really say there you may omit

643
00:26:33,960 --> 00:26:35,820
the parameter and everything will be

644
00:26:35,820 --> 00:26:37,080
fine

645
00:26:37,080 --> 00:26:38,640
um so we have to be careful not to

646
00:26:38,640 --> 00:26:42,900
introduce like three like another

647
00:26:42,900 --> 00:26:46,080
um level of compatibility so yeah

648
00:26:46,080 --> 00:26:48,960
security BCP compatible

649
00:26:48,960 --> 00:26:52,380
and then 2.1 compatible diverging when

650
00:26:52,380 --> 00:26:53,520
you introduce

651
00:26:53,520 --> 00:26:54,960
this

652
00:26:54,960 --> 00:26:59,220
change potentially diverging

653
00:26:59,220 --> 00:27:00,539
um

654
00:27:00,539 --> 00:27:04,260
so maybe it's better to leave it as this

655
00:27:04,260 --> 00:27:07,260
so if we say that if you follow security

656
00:27:07,260 --> 00:27:10,679
BCP so like 2.0 and security BCP you're

657
00:27:10,679 --> 00:27:13,440
essentially at the same like level at s

658
00:27:13,440 --> 00:27:15,779
2.1 and now we're introducing something

659
00:27:15,779 --> 00:27:18,059
else in 2.1 which make break

660
00:27:18,059 --> 00:27:22,200
the security BCP compatible stuff

661
00:27:22,200 --> 00:27:24,500
that might complicate things further so

662
00:27:24,500 --> 00:27:28,200
s as much as I want to get rid of this

663
00:27:28,200 --> 00:27:31,799
thing as well but yeah

664
00:27:31,799 --> 00:27:35,640
okay thank you uh Philip

665
00:27:35,640 --> 00:27:38,179
uh thank you this is Phillips

666
00:27:38,179 --> 00:27:40,320
I would just like to Echo what Daniel

667
00:27:40,320 --> 00:27:41,460
said

668
00:27:41,460 --> 00:27:44,960
um if um

669
00:27:45,480 --> 00:27:48,360
if the point of 2.1 is to take 2.0 and

670
00:27:48,360 --> 00:27:50,760
apply all the best practices

671
00:27:50,760 --> 00:27:51,720
um

672
00:27:51,720 --> 00:27:55,980
it doesn't feel like removing it would

673
00:27:55,980 --> 00:27:58,200
create a new world despite me wanting to

674
00:27:58,200 --> 00:27:59,760
get rid of this because it makes the

675
00:27:59,760 --> 00:28:02,580
apis for consuming callbacks oh so ugly

676
00:28:02,580 --> 00:28:04,320
because you always have to redirect URI

677
00:28:04,320 --> 00:28:06,179
and you're trying to do magic in

678
00:28:06,179 --> 00:28:08,340
browser-based applications by putting

679
00:28:08,340 --> 00:28:10,679
your current URL in there

680
00:28:10,679 --> 00:28:12,600
um

681
00:28:12,600 --> 00:28:14,700
I I feel like the ship has sailed on

682
00:28:14,700 --> 00:28:17,100
this and rather than create a whole new

683
00:28:17,100 --> 00:28:18,960
world I would just

684
00:28:18,960 --> 00:28:22,100
keep this as if

685
00:28:23,520 --> 00:28:25,500
things was also

686
00:28:25,500 --> 00:28:28,320
um if if like you said if I have an

687
00:28:28,320 --> 00:28:30,840
existing of two server and it applies

688
00:28:30,840 --> 00:28:33,240
all the security best practices

689
00:28:33,240 --> 00:28:34,740
and then

690
00:28:34,740 --> 00:28:38,640
a 2.0 client talks to it it should just

691
00:28:38,640 --> 00:28:40,020
work

692
00:28:40,020 --> 00:28:41,820
even 2.1

693
00:28:41,820 --> 00:28:43,559
it should just work

694
00:28:43,559 --> 00:28:46,500
because it has all the BCPS applied

695
00:28:46,500 --> 00:28:48,960
but if it doesn't send the redirect URI

696
00:28:48,960 --> 00:28:51,440
it wouldn't

697
00:28:52,020 --> 00:28:54,299
yeah it is uh yeah the question is

698
00:28:54,299 --> 00:28:57,179
whether a 2.1 client would work with a

699
00:28:57,179 --> 00:29:00,120
2.0 server that has has done all the

700
00:29:00,120 --> 00:29:03,480
best practices stuff right which yeah it

701
00:29:03,480 --> 00:29:06,260
does sound like it is creating a new

702
00:29:06,260 --> 00:29:10,140
class in in that case if if there was a

703
00:29:10,140 --> 00:29:13,020
discovery mechanism

704
00:29:13,020 --> 00:29:15,179
we can do this

705
00:29:15,179 --> 00:29:18,059
like if the client can figure out this

706
00:29:18,059 --> 00:29:20,340
is actually a 2.1 compatible server yeah

707
00:29:20,340 --> 00:29:23,120
yeah why not

708
00:29:24,179 --> 00:29:25,679
um so that actually brings up an

709
00:29:25,679 --> 00:29:27,360
interesting point which I'm pretty sure

710
00:29:27,360 --> 00:29:30,000
is uh I'm pretty sure that there's

711
00:29:30,000 --> 00:29:33,659
nothing else like this yet uh in terms

712
00:29:33,659 --> 00:29:34,860
of

713
00:29:34,860 --> 00:29:37,200
things that 2.1 defines that are not

714
00:29:37,200 --> 00:29:39,600
described by the by the security BCP or

715
00:29:39,600 --> 00:29:42,899
other drafts if there are though then it

716
00:29:42,899 --> 00:29:44,520
seems like

717
00:29:44,520 --> 00:29:46,919
um we would need to go down that road of

718
00:29:46,919 --> 00:29:49,740
of a discovery flag and

719
00:29:49,740 --> 00:29:51,480
then it would be okay to include this

720
00:29:51,480 --> 00:29:53,880
but I don't I don't think there are any

721
00:29:53,880 --> 00:29:55,559
other things like that yet but it seems

722
00:29:55,559 --> 00:29:57,179
like it's worth double checking

723
00:29:57,179 --> 00:29:58,460
Justin

724
00:29:58,460 --> 00:30:01,380
richer so uh if we do option two like

725
00:30:01,380 --> 00:30:02,760
Aaron's suggesting we don't actually

726
00:30:02,760 --> 00:30:04,380
have to do Discovery because no matter

727
00:30:04,380 --> 00:30:06,360
what the client does the AIS is going to

728
00:30:06,360 --> 00:30:08,039
do the right thing if it's a 2.1

729
00:30:08,039 --> 00:30:10,320
compliant as if the client doesn't send

730
00:30:10,320 --> 00:30:12,779
the URL as is going to be fine with it

731
00:30:12,779 --> 00:30:14,940
the client does send the URL the as is

732
00:30:14,940 --> 00:30:16,140
going to check it and enforce that it's

733
00:30:16,140 --> 00:30:17,340
the right thing so if you get a client

734
00:30:17,340 --> 00:30:18,779
with old Behavior or a client with new

735
00:30:18,779 --> 00:30:19,980
Behavior it's fine you don't have to

736
00:30:19,980 --> 00:30:22,200
discover anything and it all just works

737
00:30:22,200 --> 00:30:23,940
option two is the only one up there that

738
00:30:23,940 --> 00:30:25,559
actually makes sense everything else is

739
00:30:25,559 --> 00:30:28,100
a bad idea

740
00:30:28,440 --> 00:30:30,480
the only

741
00:30:30,480 --> 00:30:31,799
um

742
00:30:31,799 --> 00:30:35,100
that works great for the 2.0 and 2.1

743
00:30:35,100 --> 00:30:39,419
client talking to either 2.0 or 2.1 as

744
00:30:39,419 --> 00:30:43,559
however that doesn't work with the 2.1

745
00:30:43,559 --> 00:30:47,059
client talking to the 2.0 plus vcp as

746
00:30:47,059 --> 00:30:49,559
that's the one that it breaks

747
00:30:49,559 --> 00:30:52,440
and if we're okay with that breaking in

748
00:30:52,440 --> 00:30:54,320
that direction then it's fine

749
00:30:54,320 --> 00:30:57,059
that's the only one of the four

750
00:30:57,059 --> 00:31:00,200
combinations that breaks

751
00:31:01,340 --> 00:31:05,340
and I I see nods so

752
00:31:05,340 --> 00:31:08,159
are people comfortable with that and if

753
00:31:08,159 --> 00:31:09,960
that is the case let let's just make

754
00:31:09,960 --> 00:31:15,020
sure it's documented and clear right

755
00:31:17,760 --> 00:31:19,679
okay

756
00:31:19,679 --> 00:31:22,200
okay seems like you're seeing General

757
00:31:22,200 --> 00:31:23,940
numbers and

758
00:31:23,940 --> 00:31:25,860
let's lock it okay was there somebody

759
00:31:25,860 --> 00:31:27,600
popped up on the Queue or did that no I

760
00:31:27,600 --> 00:31:30,120
I don't see anybody in the queue

761
00:31:30,120 --> 00:31:31,740
virtual document

762
00:31:31,740 --> 00:31:33,740
s

763
00:31:34,039 --> 00:31:36,440
The Way Forward is

764
00:31:36,440 --> 00:31:42,059
basically number two on the slides so as

765
00:31:42,059 --> 00:31:43,200
for backwards compatibility

766
00:31:43,200 --> 00:31:45,419
compatibility should accept and verify

767
00:31:45,419 --> 00:31:47,760
the redirect URL if present but not

768
00:31:47,760 --> 00:31:50,419
require it

769
00:31:50,460 --> 00:31:54,000
and and make sure that that the

770
00:31:54,000 --> 00:31:55,559
combination that you've talked about at

771
00:31:55,559 --> 00:31:58,080
the end is documented and clear that

772
00:31:58,080 --> 00:32:00,059
there's it's a breaking

773
00:32:00,059 --> 00:32:02,220
um that so that goes into the section I

774
00:32:02,220 --> 00:32:04,559
mentioned earlier of the oauth 2.0

775
00:32:04,559 --> 00:32:07,320
compatibility section uh that will have

776
00:32:07,320 --> 00:32:10,799
to get called out explicitly right

777
00:32:10,799 --> 00:32:13,860
Philip do you have a comment there I I

778
00:32:13,860 --> 00:32:17,340
noticed you you joined and dropped

779
00:32:17,340 --> 00:32:19,620
um I I wasn't sure if we're okay with

780
00:32:19,620 --> 00:32:22,320
that break and um personally I'm not but

781
00:32:22,320 --> 00:32:24,840
if the consensus is you know let's just

782
00:32:24,840 --> 00:32:27,179
document that breaking Behavior sure but

783
00:32:27,179 --> 00:32:32,640
I will I'm not 100 sure that that should

784
00:32:32,640 --> 00:32:37,340
be the outcome unless there's discovery

785
00:32:37,520 --> 00:32:41,460
my gut feeling is that it's okay because

786
00:32:41,460 --> 00:32:43,860
um the

787
00:32:43,860 --> 00:32:46,919
clients don't they're frankly less

788
00:32:46,919 --> 00:32:49,320
likely to update in general unless they

789
00:32:49,320 --> 00:32:51,240
need to for some reason just because if

790
00:32:51,240 --> 00:32:52,200
things work then they're just going to

791
00:32:52,200 --> 00:32:54,480
let it work so

792
00:32:54,480 --> 00:32:57,120
if they want to update then if they go

793
00:32:57,120 --> 00:32:59,820
update to a what's labeled 2.1

794
00:32:59,820 --> 00:33:04,260
compatible or a 2.1 client then

795
00:33:04,260 --> 00:33:05,760
they

796
00:33:05,760 --> 00:33:07,679
won't be expecting it to necessarily

797
00:33:07,679 --> 00:33:09,299
work with the 2.0 server anyway just

798
00:33:09,299 --> 00:33:10,200
because there probably are going to be

799
00:33:10,200 --> 00:33:12,360
other things that break just because 2.0

800
00:33:12,360 --> 00:33:16,799
is such a broad term to begin with so

801
00:33:16,799 --> 00:33:18,480
it feels like it's the oak it's the okay

802
00:33:18,480 --> 00:33:22,019
Direction and I agree that would be less

803
00:33:22,019 --> 00:33:23,940
willing to have

804
00:33:23,940 --> 00:33:28,519
the ASP be the one that it breaks for

805
00:33:28,799 --> 00:33:31,340
all right

806
00:33:32,399 --> 00:33:34,740
um maybe maybe the other thing to note

807
00:33:34,740 --> 00:33:37,880
here for for the action items um

808
00:33:37,880 --> 00:33:40,679
once I do add the section that talks

809
00:33:40,679 --> 00:33:42,419
about all the changes from OSU and who

810
00:33:42,419 --> 00:33:47,340
they break for let's just revisit this

811
00:33:47,340 --> 00:33:49,799
because it may make sense it may show up

812
00:33:49,799 --> 00:33:51,840
as oh it's not a big deal there's other

813
00:33:51,840 --> 00:33:54,240
things that break in that direction or

814
00:33:54,240 --> 00:33:55,919
if it's maybe the only one that breaks

815
00:33:55,919 --> 00:33:57,899
in that direction we can change our mind

816
00:33:57,899 --> 00:34:00,179
about it I feel like once we get that

817
00:34:00,179 --> 00:34:01,620
full picture we'll have more context for

818
00:34:01,620 --> 00:34:04,019
it yeah good good idea okay

819
00:34:04,019 --> 00:34:06,980
okay cool

820
00:34:07,980 --> 00:34:09,780
uh

821
00:34:09,780 --> 00:34:12,480
um okay yeah that was it for the 2.1

822
00:34:12,480 --> 00:34:14,219
issues um there are a couple other

823
00:34:14,219 --> 00:34:15,780
things on GitHub that are open so feel

824
00:34:15,780 --> 00:34:17,940
free to jump in there with any thoughts

825
00:34:17,940 --> 00:34:20,699
um but any luck we're coming down to the

826
00:34:20,699 --> 00:34:22,800
down to the end of it here

827
00:34:22,800 --> 00:34:23,760
um

828
00:34:23,760 --> 00:34:25,859
okay moving on to the browser-based apps

829
00:34:25,859 --> 00:34:27,480
best current practice

830
00:34:27,480 --> 00:34:31,580
this is now draft 11 after picking it up

831
00:34:31,580 --> 00:34:35,879
in uh July again after some time away

832
00:34:35,879 --> 00:34:37,139
from it

833
00:34:37,139 --> 00:34:40,199
um so we had a little discussion in July

834
00:34:40,199 --> 00:34:45,480
and a quick recap of what this draft is

835
00:34:45,480 --> 00:34:46,760
supposed to do it's supposed to be

836
00:34:46,760 --> 00:34:48,418
recommendations for people who are

837
00:34:48,418 --> 00:34:52,500
building browser-based apps using oauth

838
00:34:52,500 --> 00:34:54,418
um which are defined as applications

839
00:34:54,418 --> 00:34:56,820
executing in a browser AKA single page

840
00:34:56,820 --> 00:34:58,320
apps

841
00:34:58,320 --> 00:35:00,060
um the language is not actually

842
00:35:00,060 --> 00:35:01,800
mentioned in the draft because it

843
00:35:01,800 --> 00:35:04,020
applies to any browser-based

844
00:35:04,020 --> 00:35:06,000
execution environment

845
00:35:06,000 --> 00:35:08,880
and it may include a back-end component

846
00:35:08,880 --> 00:35:10,920
that is part of the

847
00:35:10,920 --> 00:35:12,900
interaction of the application the

848
00:35:12,900 --> 00:35:14,339
application having its own sort of back

849
00:35:14,339 --> 00:35:15,720
end

850
00:35:15,720 --> 00:35:17,400
um

851
00:35:17,400 --> 00:35:21,420
since July there's been some more

852
00:35:21,420 --> 00:35:24,000
reworking of the document the there are

853
00:35:24,000 --> 00:35:25,740
these four architectural patterns that

854
00:35:25,740 --> 00:35:27,300
are called out in the draft in terms of

855
00:35:27,300 --> 00:35:29,700
uh they're like different ways that you

856
00:35:29,700 --> 00:35:32,220
might organize your app or architect

857
00:35:32,220 --> 00:35:33,599
your app

858
00:35:33,599 --> 00:35:35,520
the single domain

859
00:35:35,520 --> 00:35:37,680
architecture is just when your client

860
00:35:37,680 --> 00:35:39,780
runs at this at a URL that's the same

861
00:35:39,780 --> 00:35:43,680
domain as the as there's the uh these

862
00:35:43,680 --> 00:35:45,180
names are names that have changed but

863
00:35:45,180 --> 00:35:46,500
the patterns have been have been there

864
00:35:46,500 --> 00:35:48,000
for a while now

865
00:35:48,000 --> 00:35:50,400
um back in for front end proxy that's

866
00:35:50,400 --> 00:35:53,099
the uh the one where the back end

867
00:35:53,099 --> 00:35:54,420
basically

868
00:35:54,420 --> 00:35:57,060
uh has a its own session to the front

869
00:35:57,060 --> 00:35:59,040
end and the back end does everything it

870
00:35:59,040 --> 00:36:01,020
acquires the tokens it makes API calls

871
00:36:01,020 --> 00:36:03,540
everything about the Javascript app runs

872
00:36:03,540 --> 00:36:05,400
through that back end where that backend

873
00:36:05,400 --> 00:36:06,900
is the oauth client is the thing that

874
00:36:06,900 --> 00:36:08,760
talks to the resource servers then

875
00:36:08,760 --> 00:36:10,619
there's the token mediating back end

876
00:36:10,619 --> 00:36:13,200
which I stole from Brian editorio's

877
00:36:13,200 --> 00:36:14,220
draft

878
00:36:14,220 --> 00:36:17,220
where the back end is only responsible

879
00:36:17,220 --> 00:36:19,200
for acquiring the tokens and the tokens

880
00:36:19,200 --> 00:36:20,400
are then passed to the front end where

881
00:36:20,400 --> 00:36:23,040
the front end makes API calls directly

882
00:36:23,040 --> 00:36:24,960
and then there's the last option which

883
00:36:24,960 --> 00:36:26,700
is token acquisition in the browser

884
00:36:26,700 --> 00:36:28,859
which is essentially the only front end

885
00:36:28,859 --> 00:36:30,839
option where there is no back end at all

886
00:36:30,839 --> 00:36:33,599
and everything happens in the browser so

887
00:36:33,599 --> 00:36:35,359
those are the four

888
00:36:35,359 --> 00:36:38,820
patterns and the token median mediating

889
00:36:38,820 --> 00:36:40,740
backend is the new one that was added to

890
00:36:40,740 --> 00:36:44,460
this based on discussion last time

891
00:36:44,460 --> 00:36:45,619
um

892
00:36:45,619 --> 00:36:47,520
the

893
00:36:47,520 --> 00:36:52,380
there's also now a sub section of the uh

894
00:36:52,380 --> 00:36:54,839
pure JavaScript or pure browser-based

895
00:36:54,839 --> 00:36:57,180
app which talks about using this a

896
00:36:57,180 --> 00:37:00,420
service worker to manage it because

897
00:37:00,420 --> 00:37:03,359
there are different considerations and

898
00:37:03,359 --> 00:37:06,540
different threat models when all of the

899
00:37:06,540 --> 00:37:07,560
token Management in that position

900
00:37:07,560 --> 00:37:09,119
happens from within a service worker

901
00:37:09,119 --> 00:37:11,880
versus in the Dom directly

902
00:37:11,880 --> 00:37:13,740
um so that's sort of like a subsection

903
00:37:13,740 --> 00:37:17,400
of the of the pure browser-based app and

904
00:37:17,400 --> 00:37:19,740
and there's also now more notes about

905
00:37:19,740 --> 00:37:22,140
things to worry about if you are

906
00:37:22,140 --> 00:37:24,660
actually storing tokens in local storage

907
00:37:24,660 --> 00:37:26,579
if you are either that applies to both

908
00:37:26,579 --> 00:37:27,720
the

909
00:37:27,720 --> 00:37:32,339
pure browser-based app as well as the um

910
00:37:32,339 --> 00:37:34,200
the one where the back end acquires the

911
00:37:34,200 --> 00:37:35,579
tokens but passes it to the front end

912
00:37:35,579 --> 00:37:37,079
that where it deals with the tokens

913
00:37:37,079 --> 00:37:38,280
somehow

914
00:37:38,280 --> 00:37:40,980
so if you have feelings about local

915
00:37:40,980 --> 00:37:43,380
storage and tokens which I know a lot of

916
00:37:43,380 --> 00:37:46,200
people do please make sure your feelings

917
00:37:46,200 --> 00:37:48,000
are represented in the document there

918
00:37:48,000 --> 00:37:49,920
are no right or wrong answers for this

919
00:37:49,920 --> 00:37:52,440
it is meant to capture the information

920
00:37:52,440 --> 00:37:55,140
that is known and

921
00:37:55,140 --> 00:37:58,020
um this has been a probably one of the

922
00:37:58,020 --> 00:38:00,300
reasons why this discussion kind of

923
00:38:00,300 --> 00:38:02,700
stalled out last year there's a lot of

924
00:38:02,700 --> 00:38:05,640
differing opinions about handling tokens

925
00:38:05,640 --> 00:38:07,920
and browsers and again the goal is not

926
00:38:07,920 --> 00:38:10,320
to say that one is right or wrong the

927
00:38:10,320 --> 00:38:12,240
goal is to say what is wrong with all of

928
00:38:12,240 --> 00:38:14,220
them because they're all bad in

929
00:38:14,220 --> 00:38:16,619
different ways

930
00:38:16,619 --> 00:38:17,579
um

931
00:38:17,579 --> 00:38:19,740
Okay so

932
00:38:19,740 --> 00:38:22,740
a couple of so before before we go into

933
00:38:22,740 --> 00:38:25,079
changes I think Johan and I talked about

934
00:38:25,079 --> 00:38:28,619
uh the the issue of some people storing

935
00:38:28,619 --> 00:38:32,400
tokens in cookies is that I think and

936
00:38:32,400 --> 00:38:34,320
this is something that we as a work

937
00:38:34,320 --> 00:38:37,200
group we don't recommend but I don't

938
00:38:37,200 --> 00:38:39,839
think I've seen it documented anywhere

939
00:38:39,839 --> 00:38:42,119
so would that be covered in this

940
00:38:42,119 --> 00:38:45,599
document there is a I'm trying to think

941
00:38:45,599 --> 00:38:47,040
of where cookies are mentioned in here

942
00:38:47,040 --> 00:38:50,160
cookies are mentioned a couple of times

943
00:38:50,160 --> 00:38:50,820
um

944
00:38:50,820 --> 00:38:52,680
I don't know if there's any actual

945
00:38:52,680 --> 00:38:54,780
mention of using cookies as token

946
00:38:54,780 --> 00:38:56,579
storage though

947
00:38:56,579 --> 00:38:58,380
should we talk about this in this

948
00:38:58,380 --> 00:39:01,560
document right probably okay are there

949
00:39:01,560 --> 00:39:04,020
strong feelings hopefully

950
00:39:04,020 --> 00:39:07,800
the same feelings about about this about

951
00:39:07,800 --> 00:39:11,700
um a about browser-based code using

952
00:39:11,700 --> 00:39:15,839
cookies as a storage mechanism uh not

953
00:39:15,839 --> 00:39:18,240
talking about the

954
00:39:18,240 --> 00:39:21,960
concept of the um like the token

955
00:39:21,960 --> 00:39:25,320
mediating backend May set a or sorry the

956
00:39:25,320 --> 00:39:28,079
the pure browser the pure the proxy

957
00:39:28,079 --> 00:39:29,339
version where everything gets routed

958
00:39:29,339 --> 00:39:31,260
through the proxy in that model you need

959
00:39:31,260 --> 00:39:32,640
some sort of cookie between the proxy

960
00:39:32,640 --> 00:39:35,099
and the client which may be the token

961
00:39:35,099 --> 00:39:36,540
itself

962
00:39:36,540 --> 00:39:38,760
um I believe that case is already called

963
00:39:38,760 --> 00:39:41,160
out with some notes in in the document

964
00:39:41,160 --> 00:39:42,119
but

965
00:39:42,119 --> 00:39:44,339
this what we're found is mentioning is

966
00:39:44,339 --> 00:39:46,680
the idea of JavaScript code using the

967
00:39:46,680 --> 00:39:48,780
cookie API in the browser to actually

968
00:39:48,780 --> 00:39:51,060
store things which it can do that's not

969
00:39:51,060 --> 00:39:52,800
really what cookies are for but you can

970
00:39:52,800 --> 00:39:55,200
use it that way local storage is

971
00:39:55,200 --> 00:39:56,940
obviously the better

972
00:39:56,940 --> 00:39:59,160
solution for storing things in

973
00:39:59,160 --> 00:40:01,020
JavaScript

974
00:40:01,020 --> 00:40:01,740
um

975
00:40:01,740 --> 00:40:03,300
is that

976
00:40:03,300 --> 00:40:04,920
generally the

977
00:40:04,920 --> 00:40:06,780
General agreement on that because I can

978
00:40:06,780 --> 00:40:09,180
make a note about in the local storage

979
00:40:09,180 --> 00:40:11,400
section of like or around there

980
00:40:11,400 --> 00:40:13,560
somewhere of

981
00:40:13,560 --> 00:40:15,480
don't treat your don't treat your cookie

982
00:40:15,480 --> 00:40:18,119
API as a storage mechanism

983
00:40:18,119 --> 00:40:21,300
a lot of nods okay

984
00:40:21,300 --> 00:40:23,460
cool well

985
00:40:23,460 --> 00:40:24,240
um

986
00:40:24,240 --> 00:40:25,500
can you make sure that's in the minutes

987
00:40:25,500 --> 00:40:28,460
so I don't forget

988
00:40:29,400 --> 00:40:33,060
document not using the cookie API as a

989
00:40:33,060 --> 00:40:35,779
storage API

990
00:40:47,640 --> 00:40:50,540
uh oh actually that is

991
00:40:50,540 --> 00:40:54,420
relevant to number two issue number two

992
00:40:54,420 --> 00:40:57,720
um which it uh does need a actual

993
00:40:57,720 --> 00:41:00,119
section calling about calling out token

994
00:41:00,119 --> 00:41:02,640
storage techniques okay so

995
00:41:02,640 --> 00:41:04,740
um there are

996
00:41:04,740 --> 00:41:07,200
a few different ways JavaScript apps can

997
00:41:07,200 --> 00:41:08,579
handle storing tokens and again it's

998
00:41:08,579 --> 00:41:10,320
regardless of how the token was acquired

999
00:41:10,320 --> 00:41:12,440
whether it's from the back end or from

1000
00:41:12,440 --> 00:41:16,380
the browser app doing oauth itself

1001
00:41:16,380 --> 00:41:18,540
um but there are

1002
00:41:18,540 --> 00:41:21,060
uh you could you could keep it just in

1003
00:41:21,060 --> 00:41:23,099
memory where it isn't actually persisted

1004
00:41:23,099 --> 00:41:24,900
anywhere you can use local storage

1005
00:41:24,900 --> 00:41:26,640
session storage or cookies and we'll

1006
00:41:26,640 --> 00:41:28,980
recommend not using cookies

1007
00:41:28,980 --> 00:41:31,560
um and then there are reasons to put it

1008
00:41:31,560 --> 00:41:33,540
in local storage and reasons to not and

1009
00:41:33,540 --> 00:41:35,040
just use memory instead and both of

1010
00:41:35,040 --> 00:41:37,380
those are fine in different scenarios so

1011
00:41:37,380 --> 00:41:38,700
we're not going to say don't do one or

1012
00:41:38,700 --> 00:41:40,920
the other but we'll have to mention the

1013
00:41:40,920 --> 00:41:45,140
considerations about both situations

1014
00:41:45,300 --> 00:41:46,859
um

1015
00:41:46,859 --> 00:41:48,900
so that's probably the last big section

1016
00:41:48,900 --> 00:41:51,540
that's going to go in and then

1017
00:41:51,540 --> 00:41:53,460
um one of the last two new items number

1018
00:41:53,460 --> 00:41:54,660
six

1019
00:41:54,660 --> 00:41:57,000
um just go back through the security BCP

1020
00:41:57,000 --> 00:41:58,380
to make sure that this draft is is

1021
00:41:58,380 --> 00:41:59,700
consistent with it

1022
00:41:59,700 --> 00:42:01,440
hopefully not too much of it is

1023
00:42:01,440 --> 00:42:03,420
duplicated to begin with but I know

1024
00:42:03,420 --> 00:42:04,740
there were some things that were at

1025
00:42:04,740 --> 00:42:06,900
least like said as described by the

1026
00:42:06,900 --> 00:42:09,000
security BC blah blah blah just to make

1027
00:42:09,000 --> 00:42:12,720
sure people are uh finding it so

1028
00:42:12,720 --> 00:42:14,280
that'll be one pass to go through that

1029
00:42:14,280 --> 00:42:18,599
and I think that's like mostly it uh

1030
00:42:18,599 --> 00:42:19,859
except

1031
00:42:19,859 --> 00:42:22,200
the new thing that just came up which is

1032
00:42:22,200 --> 00:42:23,400
a whole section about core's

1033
00:42:23,400 --> 00:42:25,260
recommendations which

1034
00:42:25,260 --> 00:42:26,400
um

1035
00:42:26,400 --> 00:42:28,859
is I feel like it touches every every

1036
00:42:28,859 --> 00:42:31,500
draft that we're working on right now so

1037
00:42:31,500 --> 00:42:32,339
um

1038
00:42:32,339 --> 00:42:34,380
the security BCP

1039
00:42:34,380 --> 00:42:36,780
it either does or soon will recommend

1040
00:42:36,780 --> 00:42:37,920
the as

1041
00:42:37,920 --> 00:42:40,380
on the authorization endpoint not having

1042
00:42:40,380 --> 00:42:42,240
the course headers that feels like the

1043
00:42:42,240 --> 00:42:44,040
right spot for that one to go that

1044
00:42:44,040 --> 00:42:44,820
doesn't really apply to the

1045
00:42:44,820 --> 00:42:46,380
browser-based app spec

1046
00:42:46,380 --> 00:42:48,300
um it does apply to the security BCP and

1047
00:42:48,300 --> 00:42:49,500
2.1

1048
00:42:49,500 --> 00:42:51,480
and open ID connect

1049
00:42:51,480 --> 00:42:54,119
um the browser-based apps spec probably

1050
00:42:54,119 --> 00:42:56,040
should make another mention of all the

1051
00:42:56,040 --> 00:42:58,500
endpoints that do need course headers to

1052
00:42:58,500 --> 00:43:00,420
support browser-based apps properly that

1053
00:43:00,420 --> 00:43:01,920
feels like an appropriate place to put

1054
00:43:01,920 --> 00:43:03,119
that

1055
00:43:03,119 --> 00:43:05,220
um and then 2.1 of course like I

1056
00:43:05,220 --> 00:43:07,380
mentioned and basically grab these from

1057
00:43:07,380 --> 00:43:09,060
both of those drafts to make sure that

1058
00:43:09,060 --> 00:43:12,660
it's mentioned in 2.1 so

1059
00:43:12,660 --> 00:43:15,119
um nothing really new to talk about

1060
00:43:15,119 --> 00:43:17,760
cores here because

1061
00:43:17,760 --> 00:43:18,960
we already talked about it in the

1062
00:43:18,960 --> 00:43:21,300
context of 2.1 but it feels like it is

1063
00:43:21,300 --> 00:43:23,099
worth putting it into here for people

1064
00:43:23,099 --> 00:43:26,000
who are reading this draft

1065
00:43:26,220 --> 00:43:27,660
um and then that would be the so yeah

1066
00:43:27,660 --> 00:43:31,500
basically two sections to add the um

1067
00:43:31,500 --> 00:43:34,319
the token storage section and then the

1068
00:43:34,319 --> 00:43:36,900
course section and that hopefully is the

1069
00:43:36,900 --> 00:43:40,040
end of this draft

1070
00:43:40,800 --> 00:43:43,560
and I think that's the end of my slides

1071
00:43:43,560 --> 00:43:46,099
yeah

1072
00:43:46,619 --> 00:43:49,800
um so yeah with that hopefully with

1073
00:43:49,800 --> 00:43:51,540
those two things out of the way we are

1074
00:43:51,540 --> 00:43:54,060
coming up on on being able to push this

1075
00:43:54,060 --> 00:43:55,380
one through push this across the finish

1076
00:43:55,380 --> 00:43:56,940
line

1077
00:43:56,940 --> 00:43:59,520
awesome great

1078
00:43:59,520 --> 00:44:00,780
any

1079
00:44:00,780 --> 00:44:05,839
less many comments questions to Aaron

1080
00:44:09,119 --> 00:44:12,000
okay some sort

1081
00:44:12,000 --> 00:44:15,599
I guess we not ready to kind of push

1082
00:44:15,599 --> 00:44:17,280
this for these forward we still have

1083
00:44:17,280 --> 00:44:18,900
lots of work a little a couple more

1084
00:44:18,900 --> 00:44:20,579
sections and hopefully

1085
00:44:20,579 --> 00:44:21,319
um

1086
00:44:21,319 --> 00:44:24,599
I would very much like to have these

1087
00:44:24,599 --> 00:44:26,339
sections added in any discussion about

1088
00:44:26,339 --> 00:44:29,460
the specific text happen over the next

1089
00:44:29,460 --> 00:44:31,020
couple of months on the mailing list so

1090
00:44:31,020 --> 00:44:33,240
that by the time we meet next time

1091
00:44:33,240 --> 00:44:35,460
there aren't any more planned changes

1092
00:44:35,460 --> 00:44:39,060
awesome perfect

1093
00:44:39,060 --> 00:44:41,579
thank you Aaron all right see that thank

1094
00:44:41,579 --> 00:44:43,940
you okay

1095
00:44:43,980 --> 00:44:47,220
um Daniel I think the slides might not

1096
00:44:47,220 --> 00:44:50,280
be the last one

1097
00:44:50,280 --> 00:44:51,900
because I've just approved it I just

1098
00:44:51,900 --> 00:44:55,680
noticed that you sent it but

1099
00:44:55,680 --> 00:44:57,300
um

1100
00:44:57,300 --> 00:44:59,579
do you want me to I don't know how to

1101
00:44:59,579 --> 00:45:03,020
share it otherwise maybe

1102
00:45:03,720 --> 00:45:06,300
can you send me the slides directly I'm

1103
00:45:06,300 --> 00:45:09,480
maybe just

1104
00:45:09,480 --> 00:45:12,920
this plate here

1105
00:45:13,920 --> 00:45:16,260
is there a way to pull it actually you

1106
00:45:16,260 --> 00:45:19,579
know let me see

1107
00:45:25,980 --> 00:45:27,660
okay

1108
00:45:27,660 --> 00:45:33,259
let me try to where is it

1109
00:45:36,119 --> 00:45:39,500
because this okay

1110
00:45:45,060 --> 00:45:47,280
let me share it and tell me if this is

1111
00:45:47,280 --> 00:45:49,319
the latest

1112
00:45:49,319 --> 00:45:52,759
um do you know which slide that

1113
00:45:58,680 --> 00:46:00,300
okay

1114
00:46:00,300 --> 00:46:03,200
okay send me

1115
00:46:03,900 --> 00:46:05,099
yeah

1116
00:46:05,099 --> 00:46:08,000
that works okay

1117
00:46:13,560 --> 00:46:17,040
did you send it in to my email

1118
00:46:17,040 --> 00:46:21,619
oh it got it got it got it thanks

1119
00:46:28,560 --> 00:46:31,079
I guess let me see now

1120
00:46:31,079 --> 00:46:34,440
not this one here oh hold on this one

1121
00:46:34,440 --> 00:46:36,619
probably

1122
00:46:36,720 --> 00:46:39,560
yes

1123
00:46:41,160 --> 00:46:43,500
look at this

1124
00:46:43,500 --> 00:46:47,099
oh this one and

1125
00:46:47,099 --> 00:46:48,200
yeah yeah

1126
00:46:48,200 --> 00:46:53,779
just let me do full screen

1127
00:46:54,140 --> 00:46:57,618
oh shoot

1128
00:46:58,859 --> 00:47:01,880
it's too much

1129
00:47:01,880 --> 00:47:04,579
I'll have to drive it from here okay

1130
00:47:04,579 --> 00:47:09,540
unfortunately okay okay let's go

1131
00:47:09,540 --> 00:47:12,540
our full screen available uh I've tried

1132
00:47:12,540 --> 00:47:15,720
I this is supposed to be supposedly you

1133
00:47:15,720 --> 00:47:18,919
know what let me let me do this

1134
00:47:20,700 --> 00:47:23,700
one

1135
00:47:25,500 --> 00:47:28,280
this one

1136
00:47:29,520 --> 00:47:33,780
no no so let's do this I'm gonna do this

1137
00:47:33,780 --> 00:47:36,359
hold on one second

1138
00:47:36,359 --> 00:47:39,020
come on

1139
00:47:40,020 --> 00:47:42,480
sorry guys

1140
00:47:42,480 --> 00:47:46,740
maybe yeah from PDF yeah maybe that

1141
00:47:46,740 --> 00:47:49,400
would be better you

1142
00:47:49,400 --> 00:47:52,700
on screen

1143
00:47:54,000 --> 00:47:55,380
okay

1144
00:47:55,380 --> 00:47:58,380
I think this is better okay

1145
00:47:58,380 --> 00:48:03,359
let me know when to go yeah that's good

1146
00:48:03,359 --> 00:48:05,400
I'll try to adjust this a bit

1147
00:48:05,400 --> 00:48:07,560
okay hello everybody

1148
00:48:07,560 --> 00:48:09,720
um we're going to speak about the SD

1149
00:48:09,720 --> 00:48:14,339
draw draft selective disclosure for jwts

1150
00:48:14,339 --> 00:48:17,520
um this is mostly an update to

1151
00:48:17,520 --> 00:48:19,579
um our last presentation in Philadelphia

1152
00:48:19,579 --> 00:48:22,319
so if you're not familiar with Selective

1153
00:48:22,319 --> 00:48:24,780
disclosure charts

1154
00:48:24,780 --> 00:48:28,680
um Mikey worthwhile to read the draft

1155
00:48:28,680 --> 00:48:29,520
um

1156
00:48:29,520 --> 00:48:31,619
next slide please

1157
00:48:31,619 --> 00:48:32,480
um

1158
00:48:32,480 --> 00:48:34,859
keep in mind that one of the main design

1159
00:48:34,859 --> 00:48:38,640
features of St George is to be simple

1160
00:48:38,640 --> 00:48:40,619
um so simple to implement a simple to

1161
00:48:40,619 --> 00:48:41,460
use

1162
00:48:41,460 --> 00:48:43,700
um so that's um

1163
00:48:43,700 --> 00:48:47,819
what we consider the main feature here

1164
00:48:47,819 --> 00:48:50,900
next slide please

1165
00:48:52,740 --> 00:48:54,359
um we did a lot of a lot of updates

1166
00:48:54,359 --> 00:48:57,119
since last time especially last time

1167
00:48:57,119 --> 00:49:00,240
this was still an individual draft and

1168
00:49:00,240 --> 00:49:02,220
now this is a working group draft so

1169
00:49:02,220 --> 00:49:05,339
thank you everybody for your support

1170
00:49:05,339 --> 00:49:07,680
um we updated the terminology that is

1171
00:49:07,680 --> 00:49:09,240
used in the document to be hopefully

1172
00:49:09,240 --> 00:49:12,180
more clear than it used to be

1173
00:49:12,180 --> 00:49:15,540
um we introduced what we called a

1174
00:49:15,540 --> 00:49:17,640
combined format actually we didn't

1175
00:49:17,640 --> 00:49:20,400
introduce it but we now properly name it

1176
00:49:20,400 --> 00:49:21,900
and explain it

1177
00:49:21,900 --> 00:49:24,900
um the combined format for transporting

1178
00:49:24,900 --> 00:49:29,880
um SD drafts and other data

1179
00:49:29,880 --> 00:49:33,540
um we moved away from just one hash

1180
00:49:33,540 --> 00:49:37,859
algorithm to allow General digest

1181
00:49:37,859 --> 00:49:40,020
derivation algorithms to

1182
00:49:40,020 --> 00:49:43,400
um be used with a standard although

1183
00:49:43,400 --> 00:49:46,560
sha-256 is still the default

1184
00:49:46,560 --> 00:49:50,040
we clarified what you need to do

1185
00:49:50,040 --> 00:49:54,480
um to verify the signature on an SD jot

1186
00:49:54,480 --> 00:49:56,819
um and the data that is disclosed as a

1187
00:49:56,819 --> 00:49:58,319
verifier

1188
00:49:58,319 --> 00:50:00,480
we also

1189
00:50:00,480 --> 00:50:04,260
um hopefully improve our explanation on

1190
00:50:04,260 --> 00:50:08,220
why we chose this specific encoding

1191
00:50:08,220 --> 00:50:11,760
um that we choose in in this draft we

1192
00:50:11,760 --> 00:50:14,040
get to that later

1193
00:50:14,040 --> 00:50:15,780
um we introduced a feature that was

1194
00:50:15,780 --> 00:50:18,240
often asked for namely a blinding claim

1195
00:50:18,240 --> 00:50:19,319
names

1196
00:50:19,319 --> 00:50:22,560
and we now describe a processing model

1197
00:50:22,560 --> 00:50:25,680
that we think will be useful to most

1198
00:50:25,680 --> 00:50:27,119
verifiers

1199
00:50:27,119 --> 00:50:29,880
um in in processing SC draws

1200
00:50:29,880 --> 00:50:33,660
thanks to Aaron we also now have a

1201
00:50:33,660 --> 00:50:36,240
repository in the oauth or working group

1202
00:50:36,240 --> 00:50:37,380
GitHub

1203
00:50:37,380 --> 00:50:39,480
um project or organization or whatever

1204
00:50:39,480 --> 00:50:41,220
it's called

1205
00:50:41,220 --> 00:50:41,880
um

1206
00:50:41,880 --> 00:50:43,980
so this is the place where you need to

1207
00:50:43,980 --> 00:50:46,200
go if you want to see the latest like

1208
00:50:46,200 --> 00:50:49,859
the latest latest editors draft and so

1209
00:50:49,859 --> 00:50:51,839
on

1210
00:50:51,839 --> 00:50:54,960
um and with that I think Christina

1211
00:50:54,960 --> 00:50:59,300
will speak about updated terminology

1212
00:51:00,240 --> 00:51:02,099
um thanks Daniel then you'll give a

1213
00:51:02,099 --> 00:51:04,140
great summary but just to dive into a

1214
00:51:04,140 --> 00:51:05,940
couple of details

1215
00:51:05,940 --> 00:51:08,339
um next slide please

1216
00:51:08,339 --> 00:51:11,220
server received feedbacks that the house

1217
00:51:11,220 --> 00:51:15,240
each object slash jots being sent could

1218
00:51:15,240 --> 00:51:17,280
be better explained better name to be

1219
00:51:17,280 --> 00:51:20,400
more intuitive so the actual

1220
00:51:20,400 --> 00:51:23,520
um SD job signed by the issuers that

1221
00:51:23,520 --> 00:51:26,780
part has no changes in terminology

1222
00:51:26,780 --> 00:51:31,500
one new part is an object that is sure

1223
00:51:31,500 --> 00:51:34,680
sends alongside the signed jot this

1224
00:51:34,680 --> 00:51:37,280
object that includes a mapping between

1225
00:51:37,280 --> 00:51:40,380
plain text claim values salts and now

1226
00:51:40,380 --> 00:51:42,780
optionally claim names that was used to

1227
00:51:42,780 --> 00:51:46,440
be called SVC sold value container now

1228
00:51:46,440 --> 00:51:48,780
it's called issue issue disclosures

1229
00:51:48,780 --> 00:51:51,720
objects so we're introducing this new

1230
00:51:51,720 --> 00:51:53,940
concept of disclosures

1231
00:51:53,940 --> 00:51:55,559
um which is essential is a snapping

1232
00:51:55,559 --> 00:51:58,200
between for all this plain text values

1233
00:51:58,200 --> 00:52:02,040
so this one is issued by the issuer just

1234
00:52:02,040 --> 00:52:05,220
the original disclosures and it is not

1235
00:52:05,220 --> 00:52:07,440
signed so it's an object

1236
00:52:07,440 --> 00:52:09,839
and it's never signed so it's an object

1237
00:52:09,839 --> 00:52:11,220
not a job

1238
00:52:11,220 --> 00:52:14,099
um if you go to the next slide

1239
00:52:14,099 --> 00:52:15,180
um

1240
00:52:15,180 --> 00:52:21,059
and also when the end user chooses out

1241
00:52:21,059 --> 00:52:24,300
of those issue issue disclosures which

1242
00:52:24,300 --> 00:52:26,460
of those disclosures which of those

1243
00:52:26,460 --> 00:52:28,920
mapping the user actually wants to

1244
00:52:28,920 --> 00:52:31,319
disclose that object is now called

1245
00:52:31,319 --> 00:52:35,099
holder selected disclosures jot

1246
00:52:35,099 --> 00:52:38,099
um I think it used to be called releases

1247
00:52:38,099 --> 00:52:39,480
um and now it's

1248
00:52:39,480 --> 00:52:42,420
again holder selected disclosures jot

1249
00:52:42,420 --> 00:52:44,640
and it's a jot because when holder

1250
00:52:44,640 --> 00:52:46,920
binding is required it could be signed

1251
00:52:46,920 --> 00:52:50,400
or it could be unsigned so those are two

1252
00:52:50,400 --> 00:52:53,220
big Concepts so abbreviations are II

1253
00:52:53,220 --> 00:52:56,339
disclosures HS disclosures so

1254
00:52:56,339 --> 00:52:58,800
just so people are not confused it's

1255
00:52:58,800 --> 00:53:01,380
same concept cryptographically but

1256
00:53:01,380 --> 00:53:03,119
different terminology

1257
00:53:03,119 --> 00:53:06,380
if you go to the next slide

1258
00:53:07,680 --> 00:53:10,920
um so yeah just a summary and in

1259
00:53:10,920 --> 00:53:13,140
addition to what I have already covered

1260
00:53:13,140 --> 00:53:16,380
in terms of actual claim the property

1261
00:53:16,380 --> 00:53:19,859
names SD underscore lease in IA

1262
00:53:19,859 --> 00:53:22,440
disclosures is now is the underscore II

1263
00:53:22,440 --> 00:53:25,500
disclosures and and they

1264
00:53:25,500 --> 00:53:27,720
and hold or select the disclosures now

1265
00:53:27,720 --> 00:53:29,579
it's called SD underscore H is

1266
00:53:29,579 --> 00:53:31,859
underscore disclosures so you see this

1267
00:53:31,859 --> 00:53:33,480
throughout examples

1268
00:53:33,480 --> 00:53:36,420
um in the presentation and the last

1269
00:53:36,420 --> 00:53:39,059
button bullet point is related to the

1270
00:53:39,059 --> 00:53:42,480
topic I think I'll cover soon if you go

1271
00:53:42,480 --> 00:53:45,059
to the next slides

1272
00:53:45,059 --> 00:53:47,220
um oh wow it's old slides I guess give

1273
00:53:47,220 --> 00:53:48,599
me skip it

1274
00:53:48,599 --> 00:53:50,339
um

1275
00:53:50,339 --> 00:53:54,000
yeah skip it

1276
00:53:54,000 --> 00:53:57,000
so yeah from the implementers is also

1277
00:53:57,000 --> 00:53:58,980
received the feedback that if you go to

1278
00:53:58,980 --> 00:54:00,660
the next slide

1279
00:54:00,660 --> 00:54:03,680
um people wanted clarification of

1280
00:54:03,680 --> 00:54:07,079
what how these objects are actually

1281
00:54:07,079 --> 00:54:10,619
being sent transported between issuer

1282
00:54:10,619 --> 00:54:12,660
and end user and an end user and the

1283
00:54:12,660 --> 00:54:15,180
verifier so we introduced the concept of

1284
00:54:15,180 --> 00:54:18,119
combined formats so combined format of

1285
00:54:18,119 --> 00:54:20,940
issuance consists of four

1286
00:54:20,940 --> 00:54:24,059
um dot separated parts or the first

1287
00:54:24,059 --> 00:54:27,480
three is a DOT which is assigned SD job

1288
00:54:27,480 --> 00:54:30,660
and the last part is base64 Euro encoded

1289
00:54:30,660 --> 00:54:32,700
Json which is this

1290
00:54:32,700 --> 00:54:36,300
um this issue issue disclosures object

1291
00:54:36,300 --> 00:54:38,220
um and for the from the end user to the

1292
00:54:38,220 --> 00:54:40,319
verifier that's where we introduce the

1293
00:54:40,319 --> 00:54:41,880
concept of combined format for

1294
00:54:41,880 --> 00:54:45,960
presentation which consists of six dot

1295
00:54:45,960 --> 00:54:48,420
separated Parts when the holder binding

1296
00:54:48,420 --> 00:54:50,160
is required

1297
00:54:50,160 --> 00:54:53,960
um meaning the first three are always

1298
00:54:53,960 --> 00:54:58,260
sure sign SD job but the last three

1299
00:54:58,260 --> 00:55:01,200
um our holder signed

1300
00:55:01,200 --> 00:55:03,900
holder select the disclosure shots and

1301
00:55:03,900 --> 00:55:06,059
the last signature could be optional if

1302
00:55:06,059 --> 00:55:08,940
there is no holder binding required so

1303
00:55:08,940 --> 00:55:11,700
they started to basic units that are

1304
00:55:11,700 --> 00:55:13,440
going to be transported between these

1305
00:55:13,440 --> 00:55:15,119
entities

1306
00:55:15,119 --> 00:55:16,680
um and how they're actually being

1307
00:55:16,680 --> 00:55:18,720
transported is out of scope so that's up

1308
00:55:18,720 --> 00:55:20,400
to transfer protocol

1309
00:55:20,400 --> 00:55:22,740
um but just to clarify that this is a

1310
00:55:22,740 --> 00:55:24,599
basic unit and what I'm implicitly

1311
00:55:24,599 --> 00:55:27,420
saying is if you're sending one SD job

1312
00:55:27,420 --> 00:55:30,240
you have to send one holder so that the

1313
00:55:30,240 --> 00:55:34,740
disclosures per SD job so that's an

1314
00:55:34,740 --> 00:55:36,359
implicit clarification of San Jose

1315
00:55:36,359 --> 00:55:38,339
comments they've received

1316
00:55:38,339 --> 00:55:40,680
um next slide please

1317
00:55:40,680 --> 00:55:44,099
so we also received feedback that in the

1318
00:55:44,099 --> 00:55:46,680
original individual draft

1319
00:55:46,680 --> 00:55:49,200
yeah if you can look next slide we only

1320
00:55:49,200 --> 00:55:52,319
supported basic hashing algorithm

1321
00:55:52,319 --> 00:55:54,059
um but we also received feedback that

1322
00:55:54,059 --> 00:55:57,540
some people wanted to use on hmac or do

1323
00:55:57,540 --> 00:56:00,300
something a bit more fancier on for

1324
00:56:00,300 --> 00:56:02,940
example using really Advanced

1325
00:56:02,940 --> 00:56:06,000
um cryptography to make but with really

1326
00:56:06,000 --> 00:56:08,040
really small salt values but achieve the

1327
00:56:08,040 --> 00:56:09,900
same level of security as you know

1328
00:56:09,900 --> 00:56:11,880
really

1329
00:56:11,880 --> 00:56:13,140
um complex

1330
00:56:13,140 --> 00:56:16,200
um hashing algorithm for example so

1331
00:56:16,200 --> 00:56:18,660
that's expanded so throughout the text

1332
00:56:18,660 --> 00:56:20,880
you would see um changes in terminology

1333
00:56:20,880 --> 00:56:23,520
from hash algorithm to a more General

1334
00:56:23,520 --> 00:56:25,800
digest derivation algorithm

1335
00:56:25,800 --> 00:56:28,619
um but still shot 256 is mandatory to

1336
00:56:28,619 --> 00:56:32,220
implement hash algorithm and all the

1337
00:56:32,220 --> 00:56:35,339
security guidance related to you know

1338
00:56:35,339 --> 00:56:37,500
minimum bytes that has to be used on

1339
00:56:37,500 --> 00:56:40,940
that part has not changed

1340
00:56:42,200 --> 00:56:44,760
like the term digest derivation

1341
00:56:44,760 --> 00:56:46,740
algorithm is a little bit unusual and

1342
00:56:46,740 --> 00:56:48,960
then I see two types of algorithms one

1343
00:56:48,960 --> 00:56:51,900
is an HVAC which is a key uh hash

1344
00:56:51,900 --> 00:56:54,359
function the other one is the like unkit

1345
00:56:54,359 --> 00:56:57,780
hash function like shot 256 so what

1346
00:56:57,780 --> 00:57:00,960
um in which directions is going like

1347
00:57:00,960 --> 00:57:04,800
so the intention was to accommodate both

1348
00:57:04,800 --> 00:57:07,740
by using a terminology digest derivation

1349
00:57:07,740 --> 00:57:10,260
algorithm which is originally I think

1350
00:57:10,260 --> 00:57:12,660
suggested by Christian Paquin

1351
00:57:12,660 --> 00:57:14,700
um the cryptographic researcher but if

1352
00:57:14,700 --> 00:57:16,740
this is not intuitive enough

1353
00:57:16,740 --> 00:57:19,319
um the purpose does not change I think

1354
00:57:19,319 --> 00:57:21,180
it would be a terminology change to be

1355
00:57:21,180 --> 00:57:23,400
honest and the way we clarified in the

1356
00:57:23,400 --> 00:57:25,920
spec is so it's so much value obviously

1357
00:57:25,920 --> 00:57:28,800
changes we're using the soul the terms

1358
00:57:28,800 --> 00:57:30,900
sold throughout the spec for consistency

1359
00:57:30,900 --> 00:57:33,780
but obviously if it's hmac it's the key

1360
00:57:33,780 --> 00:57:36,900
it's not the random salt value so yeah

1361
00:57:36,900 --> 00:57:38,280
maybe that could be clarified a bit

1362
00:57:38,280 --> 00:57:40,800
better but just the main point here is

1363
00:57:40,800 --> 00:57:42,960
that intention is to allow the usage of

1364
00:57:42,960 --> 00:57:45,680
hmac too

1365
00:57:46,380 --> 00:57:48,980
okay

1366
00:57:51,119 --> 00:57:53,940
I think the intention is your name

1367
00:57:53,940 --> 00:57:55,520
my name is Brian

1368
00:57:55,520 --> 00:57:58,800
uh this is just just for the north

1369
00:57:58,800 --> 00:58:01,319
people apologies I forget the intention

1370
00:58:01,319 --> 00:58:03,240
I think sort of does shine through but

1371
00:58:03,240 --> 00:58:04,319
uh

1372
00:58:04,319 --> 00:58:06,420
the realization of this is is really

1373
00:58:06,420 --> 00:58:08,160
problematic from an implementation

1374
00:58:08,160 --> 00:58:10,099
standpoint like you talk about

1375
00:58:10,099 --> 00:58:13,559
interchangeability of salt and and key

1376
00:58:13,559 --> 00:58:18,059
between hash and um hmac but the actual

1377
00:58:18,059 --> 00:58:21,240
actually doing that is it's not

1378
00:58:21,240 --> 00:58:22,920
specified in any kind of inoperable way

1379
00:58:22,920 --> 00:58:26,819
and note that the salt exists underneath

1380
00:58:26,819 --> 00:58:30,000
the string literal that will be computed

1381
00:58:30,000 --> 00:58:33,300
for the digest so to actually make that

1382
00:58:33,300 --> 00:58:36,420
work for an hmac you would have to parse

1383
00:58:36,420 --> 00:58:37,619
the string that's supposed to be

1384
00:58:37,619 --> 00:58:39,240
considered

1385
00:58:39,240 --> 00:58:41,099
um opaque basically at that layer pull

1386
00:58:41,099 --> 00:58:44,579
out that and then use that as the key

1387
00:58:44,579 --> 00:58:45,599
um and then I don't know if you're

1388
00:58:45,599 --> 00:58:47,339
supposed to leave it in there for the

1389
00:58:47,339 --> 00:58:50,579
computation of the the digest like these

1390
00:58:50,579 --> 00:58:51,780
are all questions that could be answered

1391
00:58:51,780 --> 00:58:55,020
but they're totally underspecified

1392
00:58:55,020 --> 00:58:58,980
um and then you have the name also is

1393
00:58:58,980 --> 00:59:01,500
so I I did some Googling and the only

1394
00:59:01,500 --> 00:59:03,900
results for digest derivation algorithm

1395
00:59:03,900 --> 00:59:07,200
are this draft and the comment where

1396
00:59:07,200 --> 00:59:09,119
Christian suggested it so I don't think

1397
00:59:09,119 --> 00:59:10,740
it's an actual yeah

1398
00:59:10,740 --> 00:59:12,960
term that that's sort of a side but the

1399
00:59:12,960 --> 00:59:15,720
names are too long to like just from

1400
00:59:15,720 --> 00:59:18,059
from jots we try to do things

1401
00:59:18,059 --> 00:59:20,880
shorter so like digest derivation

1402
00:59:20,880 --> 00:59:23,579
algorithm like it just um but the I

1403
00:59:23,579 --> 00:59:25,140
think the real problem is is the

1404
00:59:25,140 --> 00:59:26,220
applicability of the two different

1405
00:59:26,220 --> 00:59:29,339
algorithms is to honest's point like

1406
00:59:29,339 --> 00:59:32,040
it it either needs to be built in a way

1407
00:59:32,040 --> 00:59:33,480
that it can actually accommodate the two

1408
00:59:33,480 --> 00:59:37,020
or not and I I think actually the use of

1409
00:59:37,020 --> 00:59:40,040
hmac here is

1410
00:59:41,339 --> 00:59:43,920
sort of questionable the need for it

1411
00:59:43,920 --> 00:59:46,200
based on things that uh that uh that

1412
00:59:46,200 --> 00:59:48,420
like Neil had said he was worried about

1413
00:59:48,420 --> 00:59:51,420
length prefix or length of pension I

1414
00:59:51,420 --> 00:59:52,799
don't even know but the fact that it's

1415
00:59:52,799 --> 00:59:55,319
using Json it's not really a problem

1416
00:59:55,319 --> 01:00:00,420
referring back to the um jws ALG

1417
01:00:00,420 --> 01:00:04,260
for hmac is also like conceptually I

1418
01:00:04,260 --> 01:00:05,640
know what you're trying to do but from a

1419
01:00:05,640 --> 01:00:07,559
spec implementation standpoint it's it's

1420
01:00:07,559 --> 01:00:12,000
not appropriate or interoperable at all

1421
01:00:12,000 --> 01:00:12,660
um

1422
01:00:12,660 --> 01:00:14,220
and then you also have basically a

1423
01:00:14,220 --> 01:00:15,839
namespace here that's covered by two

1424
01:00:15,839 --> 01:00:17,700
different Registries and oh you could

1425
01:00:17,700 --> 01:00:20,040
also extend it yourself so that that

1426
01:00:20,040 --> 01:00:22,680
doesn't really work either

1427
01:00:22,680 --> 01:00:24,540
um I don't mean to be over overly

1428
01:00:24,540 --> 01:00:27,180
critical but it's sort of like the idea

1429
01:00:27,180 --> 01:00:28,920
sort of makes sense the realization of

1430
01:00:28,920 --> 01:00:30,180
it is is

1431
01:00:30,180 --> 01:00:31,020
um

1432
01:00:31,020 --> 01:00:34,440
not there it needs a lot of work

1433
01:00:34,440 --> 01:00:36,180
and I think I had some other annoying

1434
01:00:36,180 --> 01:00:38,520
comments but Daniel's got

1435
01:00:38,520 --> 01:00:42,380
do we have GitHub issues for that yeah

1436
01:00:42,380 --> 01:00:45,660
no because it there's a lot to describe

1437
01:00:45,660 --> 01:00:47,700
it I didn't know how to write it down so

1438
01:00:47,700 --> 01:00:49,740
um I wanted to take the opportunity to

1439
01:00:49,740 --> 01:00:51,240
Face to Face Time To Explain the

1440
01:00:51,240 --> 01:00:53,339
rationale but I will add a GitHub issue

1441
01:00:53,339 --> 01:00:55,140
that at least mentions

1442
01:00:55,140 --> 01:00:56,819
um maybe not the specifics but the

1443
01:00:56,819 --> 01:00:59,480
Brokenness of it thank you

1444
01:00:59,480 --> 01:01:03,420
so so maybe like just for harnesses uh

1445
01:01:03,420 --> 01:01:06,240
because he's taking notes like can you

1446
01:01:06,240 --> 01:01:10,460
summarize some like a sentence

1447
01:01:10,460 --> 01:01:12,960
derivation algorithm is too complicated

1448
01:01:12,960 --> 01:01:15,720
and how H mckindies is completely under

1449
01:01:15,720 --> 01:01:18,599
specified so either specify it or delete

1450
01:01:18,599 --> 01:01:19,440
it

1451
01:01:19,440 --> 01:01:21,900
I think that's a good summary it's

1452
01:01:21,900 --> 01:01:24,540
yeah it's problematic it needs I don't

1453
01:01:24,540 --> 01:01:25,920
know how to summarize it other than it

1454
01:01:25,920 --> 01:01:28,619
needs to be either simplified or yeah

1455
01:01:28,619 --> 01:01:31,079
expanded if someone can throw an issue

1456
01:01:31,079 --> 01:01:33,420
we can discuss there like if we want to

1457
01:01:33,420 --> 01:01:35,819
you know clarify or we want to take it

1458
01:01:35,819 --> 01:01:38,160
out optional itself right because

1459
01:01:38,160 --> 01:01:40,740
there are a few people asking for that

1460
01:01:40,740 --> 01:01:43,260
but I agree that yes you have to you

1461
01:01:43,260 --> 01:01:45,480
know take it out and then the treatment

1462
01:01:45,480 --> 01:01:50,480
of thought as a key becomes problematic

1463
01:01:51,359 --> 01:01:53,280
thank you John

1464
01:01:53,280 --> 01:01:55,319
uh John Bradley

1465
01:01:55,319 --> 01:01:58,140
um I'm going to largely agree with Brian

1466
01:01:58,140 --> 01:01:59,819
um what you're what you're trying to do

1467
01:01:59,819 --> 01:02:02,160
here is sort of isomorphic to

1468
01:02:02,160 --> 01:02:03,240
um

1469
01:02:03,240 --> 01:02:05,880
uh kdfs

1470
01:02:05,880 --> 01:02:06,799
um

1471
01:02:06,799 --> 01:02:10,619
you're just using the key as the hash or

1472
01:02:10,619 --> 01:02:12,599
as the digest

1473
01:02:12,599 --> 01:02:16,079
um so I would probably try to name it

1474
01:02:16,079 --> 01:02:18,599
similarly

1475
01:02:18,599 --> 01:02:19,819
um

1476
01:02:19,819 --> 01:02:23,520
because essentially for key derivation

1477
01:02:23,520 --> 01:02:25,920
functions you have either a straight

1478
01:02:25,920 --> 01:02:30,119
hash or hmac Etc I mean it

1479
01:02:30,119 --> 01:02:31,680
that you're just using it for a

1480
01:02:31,680 --> 01:02:32,700
different purpose but they're

1481
01:02:32,700 --> 01:02:35,400
essentially the same algorithms

1482
01:02:35,400 --> 01:02:37,440
um so

1483
01:02:37,440 --> 01:02:39,480
I would either

1484
01:02:39,480 --> 01:02:43,920
take it out and just say you have to use

1485
01:02:43,920 --> 01:02:47,640
um hashing algorithm or you need a lot

1486
01:02:47,640 --> 01:02:50,339
more specification

1487
01:02:50,339 --> 01:02:54,119
because yeah whether you leave the the

1488
01:02:54,119 --> 01:02:56,700
nonce in the thing that you're hashing

1489
01:02:56,700 --> 01:02:57,780
in

1490
01:02:57,780 --> 01:03:01,460
gets gets complicated

1491
01:03:05,099 --> 01:03:06,900
yeah we need to look into this yeah

1492
01:03:06,900 --> 01:03:08,700
great yeah thanks for the feedback

1493
01:03:08,700 --> 01:03:10,079
appreciate it

1494
01:03:10,079 --> 01:03:13,859
um should we go the next slide yep okay

1495
01:03:13,859 --> 01:03:16,319
so the last slide from my part I think

1496
01:03:16,319 --> 01:03:19,799
signature validation this is for

1497
01:03:19,799 --> 01:03:24,359
holder selected disclosures jot so as I

1498
01:03:24,359 --> 01:03:26,579
think we've said before it can be signed

1499
01:03:26,579 --> 01:03:30,180
or can be unsigned so we updated the

1500
01:03:30,180 --> 01:03:34,940
validation section to make clear that

1501
01:03:35,099 --> 01:03:38,880
then verifier verifies a holder cycle

1502
01:03:38,880 --> 01:03:40,920
disclosures because that becomes the

1503
01:03:40,920 --> 01:03:42,540
crucial for the security of this

1504
01:03:42,540 --> 01:03:45,119
mechanism that the verifier actually you

1505
01:03:45,119 --> 01:03:46,980
know does all the validation Computing

1506
01:03:46,980 --> 01:03:49,200
hashes whatnot

1507
01:03:49,200 --> 01:03:51,480
um so it should be not passive in a

1508
01:03:51,480 --> 01:03:53,640
sense that it's signed I'm going to

1509
01:03:53,640 --> 01:03:57,180
verify it no hold the verifier must have

1510
01:03:57,180 --> 01:04:01,380
a policy whether it accepts

1511
01:04:01,380 --> 01:04:05,280
it requires signing on the holders fine

1512
01:04:05,280 --> 01:04:08,280
disclosures job or it doesn't so if it

1513
01:04:08,280 --> 01:04:10,500
requires signing meaning it requires

1514
01:04:10,500 --> 01:04:13,859
holder binding where it validates that

1515
01:04:13,859 --> 01:04:17,940
the signature on the this HS disclosures

1516
01:04:17,940 --> 01:04:21,299
joint is done by the key signed over by

1517
01:04:21,299 --> 01:04:24,420
the issuer so the holder the user is

1518
01:04:24,420 --> 01:04:26,579
proving control the same key both during

1519
01:04:26,579 --> 01:04:29,040
the issuance and the verification if

1520
01:04:29,040 --> 01:04:30,900
that feature is required

1521
01:04:30,900 --> 01:04:34,619
and they this HS disclosure shot is not

1522
01:04:34,619 --> 01:04:37,380
signed very far must reject like that

1523
01:04:37,380 --> 01:04:40,020
just you know like if you wanted to be

1524
01:04:40,020 --> 01:04:43,200
signed and it's not signed blank or Jack

1525
01:04:43,200 --> 01:04:45,059
if

1526
01:04:45,059 --> 01:04:47,700
for whatever reason trust framework you

1527
01:04:47,700 --> 01:04:50,880
know policy they verify is okay to not

1528
01:04:50,880 --> 01:04:53,940
have a holder binding and there are

1529
01:04:53,940 --> 01:04:56,400
legitimate use cases that are okay with

1530
01:04:56,400 --> 01:04:59,460
that if that is your use case you could

1531
01:04:59,460 --> 01:05:02,099
accept the um jots using nav algorithm

1532
01:05:02,099 --> 01:05:04,920
is the clarification of the edit

1533
01:05:04,920 --> 01:05:08,839
um let's see Brian

1534
01:05:11,059 --> 01:05:14,059
Brian

1535
01:05:14,059 --> 01:05:15,960
there's a lot going on here it's

1536
01:05:15,960 --> 01:05:18,000
complicated but

1537
01:05:18,000 --> 01:05:19,619
and I don't have a specific issue for

1538
01:05:19,619 --> 01:05:21,059
this because it's hard to express but

1539
01:05:21,059 --> 01:05:23,180
the the

1540
01:05:23,180 --> 01:05:25,920
inclusion of the disclosures element

1541
01:05:25,920 --> 01:05:29,819
underneath the signature I believe

1542
01:05:29,819 --> 01:05:32,839
complicates things

1543
01:05:32,839 --> 01:05:38,119
sufficiently that we shouldn't do it um

1544
01:05:40,980 --> 01:05:44,220
okay it

1545
01:05:44,220 --> 01:05:48,059
I will shut up then

1546
01:05:48,059 --> 01:05:50,040
thank you yeah let's get to that section

1547
01:05:50,040 --> 01:05:52,640
so yeah

1548
01:05:52,819 --> 01:05:56,460
is it is it a good idea or are there

1549
01:05:56,460 --> 01:05:58,740
good justifications for not having a

1550
01:05:58,740 --> 01:06:01,500
signature it's like yes

1551
01:06:01,500 --> 01:06:02,760
um there are use cases where you don't

1552
01:06:02,760 --> 01:06:04,920
need holder binding so you just want to

1553
01:06:04,920 --> 01:06:07,079
know that the document exists that was

1554
01:06:07,079 --> 01:06:11,220
signed by an issuer for some user so for

1555
01:06:11,220 --> 01:06:13,440
some end user and you don't care whether

1556
01:06:13,440 --> 01:06:14,579
it's the user

1557
01:06:14,579 --> 01:06:17,280
so the holder binding does not have to

1558
01:06:17,280 --> 01:06:19,380
be cryptographic holder binding it could

1559
01:06:19,380 --> 01:06:21,780
be claim based or biometric based so

1560
01:06:21,780 --> 01:06:23,760
their use case or people trying to

1561
01:06:23,760 --> 01:06:26,819
combines that with this disclosure

1562
01:06:26,819 --> 01:06:30,660
feature so that's another kind of why

1563
01:06:30,660 --> 01:06:34,940
it's not always mandated

1564
01:06:36,359 --> 01:06:38,280
uh Tony and Edmund

1565
01:06:38,280 --> 01:06:40,319
um question is the holder binding meant

1566
01:06:40,319 --> 01:06:44,059
to do device binding also

1567
01:06:44,059 --> 01:06:46,200
so I

1568
01:06:46,200 --> 01:06:47,700
there is a little bit of a difference

1569
01:06:47,700 --> 01:06:49,400
there so I'm just trying to understand

1570
01:06:49,400 --> 01:06:51,900
your whether you want this to cover

1571
01:06:51,900 --> 01:06:55,220
device binding or not

1572
01:06:56,280 --> 01:06:59,220
yeah I guess I guess it depends on the

1573
01:06:59,220 --> 01:07:01,799
uh sorry yes it can be it depends on the

1574
01:07:01,799 --> 01:07:03,420
verifier

1575
01:07:03,420 --> 01:07:06,240
um and right I just didn't see any

1576
01:07:06,240 --> 01:07:09,359
recommendations and that's right so that

1577
01:07:09,359 --> 01:07:11,400
would be one area that needs to be it

1578
01:07:11,400 --> 01:07:13,500
can we document in the minutes to

1579
01:07:13,500 --> 01:07:16,079
clarify the relationship between holder

1580
01:07:16,079 --> 01:07:17,520
binding and device binding thanks that's

1581
01:07:17,520 --> 01:07:19,920
a good point

1582
01:07:19,920 --> 01:07:21,420
yep

1583
01:07:21,420 --> 01:07:24,599
okay any more questions no okay next

1584
01:07:24,599 --> 01:07:26,700
slide please

1585
01:07:26,700 --> 01:07:27,299
um

1586
01:07:27,299 --> 01:07:30,780
takes time to get there yeah

1587
01:07:30,780 --> 01:07:34,319
um okay a word on the encoding um that

1588
01:07:34,319 --> 01:07:35,940
we're using

1589
01:07:35,940 --> 01:07:37,680
um I think this is actually the old

1590
01:07:37,680 --> 01:07:40,859
slide set is it yeah anyway let's let's

1591
01:07:40,859 --> 01:07:43,680
let's try with that

1592
01:07:43,680 --> 01:07:45,180
um

1593
01:07:45,180 --> 01:07:49,200
so one problem maybe next slide um this

1594
01:07:49,200 --> 01:07:50,160
was actually

1595
01:07:50,160 --> 01:07:53,640
oh so we have to this so yeah so there

1596
01:07:53,640 --> 01:07:54,780
are a couple of slides that we didn't

1597
01:07:54,780 --> 01:07:56,640
want to show and we mark them as not

1598
01:07:56,640 --> 01:07:59,280
show but they are in the PDF anyway yeah

1599
01:07:59,280 --> 01:08:02,220
um so we'll skip a few slides okay uh

1600
01:08:02,220 --> 01:08:04,740
but this one is good so

1601
01:08:04,740 --> 01:08:06,000
um

1602
01:08:06,000 --> 01:08:08,280
when an issuer creates

1603
01:08:08,280 --> 01:08:10,020
um the SD draft

1604
01:08:10,020 --> 01:08:12,240
um it takes the data from in this case

1605
01:08:12,240 --> 01:08:14,160
an address claim uh with the street

1606
01:08:14,160 --> 01:08:16,738
address locality and so on

1607
01:08:16,738 --> 01:08:19,140
um then transfers that to a byte string

1608
01:08:19,140 --> 01:08:22,859
obviously to then hash that and sign it

1609
01:08:22,859 --> 01:08:25,259
um so that's very simple process

1610
01:08:25,259 --> 01:08:27,238
um next slide please

1611
01:08:27,238 --> 01:08:29,160
now that's a complication

1612
01:08:29,160 --> 01:08:32,279
the stuff is sent to the verifier and

1613
01:08:32,279 --> 01:08:34,140
the verifier needs to do the same

1614
01:08:34,140 --> 01:08:35,520
computation

1615
01:08:35,520 --> 01:08:37,439
um so the net verifier has some data

1616
01:08:37,439 --> 01:08:40,799
transfers it into bytes hashes it

1617
01:08:40,799 --> 01:08:43,219
um and obviously next slide please the

1618
01:08:43,219 --> 01:08:46,799
verifier also gets um

1619
01:08:46,799 --> 01:08:49,259
so so looks at the SD drop and there's

1620
01:08:49,259 --> 01:08:51,120
some signed hash values

1621
01:08:51,120 --> 01:08:53,939
and the verifier now checks whether the

1622
01:08:53,939 --> 01:08:57,839
assigned hash values are the same and in

1623
01:08:57,839 --> 01:09:00,179
this case so and there might be cases

1624
01:09:00,179 --> 01:09:02,759
where that doesn't work especially

1625
01:09:02,759 --> 01:09:05,640
if the data that is transferred from the

1626
01:09:05,640 --> 01:09:08,580
issuer to the verifier is modified

1627
01:09:08,580 --> 01:09:11,759
between the issuer and the verifier and

1628
01:09:11,759 --> 01:09:14,520
such things can happen when you transfer

1629
01:09:14,520 --> 01:09:17,219
Json because in Json the order of

1630
01:09:17,219 --> 01:09:20,339
elements is undefined essentially

1631
01:09:20,339 --> 01:09:23,939
um there are some there's some room for

1632
01:09:23,939 --> 01:09:25,738
um expressing the same thing in

1633
01:09:25,738 --> 01:09:28,620
different ways for example you have that

1634
01:09:28,620 --> 01:09:30,839
with numbers floating Point numbers for

1635
01:09:30,839 --> 01:09:32,219
example

1636
01:09:32,219 --> 01:09:35,120
um specific things of how to encode

1637
01:09:35,120 --> 01:09:38,880
Unicode strings for example but also

1638
01:09:38,880 --> 01:09:41,100
white space between the elements in

1639
01:09:41,100 --> 01:09:42,299
adjacent

1640
01:09:42,299 --> 01:09:44,880
so the issue has sent something that is

1641
01:09:44,880 --> 01:09:46,380
Jason

1642
01:09:46,380 --> 01:09:49,380
um or has some data transverse it to to

1643
01:09:49,380 --> 01:09:51,899
Json and the verifier that's a Json and

1644
01:09:51,899 --> 01:09:54,060
then does the same computation but not

1645
01:09:54,060 --> 01:09:55,980
necessarily with the same result

1646
01:09:55,980 --> 01:09:57,900
so the byte string that is hashed might

1647
01:09:57,900 --> 01:09:59,580
be different and of course when that

1648
01:09:59,580 --> 01:10:02,520
happens there's a different hash and

1649
01:10:02,520 --> 01:10:06,480
um the the apparently the the signature

1650
01:10:06,480 --> 01:10:08,340
um check will not work

1651
01:10:08,340 --> 01:10:10,620
although the same data was transferred

1652
01:10:10,620 --> 01:10:11,940
so here in this case you can see that

1653
01:10:11,940 --> 01:10:14,160
street address and locality they changed

1654
01:10:14,160 --> 01:10:15,480
the order and the white space is

1655
01:10:15,480 --> 01:10:17,580
different and so on and that's a problem

1656
01:10:17,580 --> 01:10:18,960
and that's the problem we need to

1657
01:10:18,960 --> 01:10:19,920
address

1658
01:10:19,920 --> 01:10:22,920
next slide please

1659
01:10:22,920 --> 01:10:24,659
that's essentially two different

1660
01:10:24,659 --> 01:10:27,480
approaches that you can take one is to

1661
01:10:27,480 --> 01:10:30,900
send the exact bytes that were hashed

1662
01:10:30,900 --> 01:10:34,679
from the issuer to the verifier

1663
01:10:34,679 --> 01:10:36,780
um so I call this the source string

1664
01:10:36,780 --> 01:10:39,120
because so the source of of

1665
01:10:39,120 --> 01:10:41,460
um your hash

1666
01:10:41,460 --> 01:10:44,239
um or you can apply a transformation

1667
01:10:44,239 --> 01:10:47,699
both at the issuer and at the verifier

1668
01:10:47,699 --> 01:10:50,699
that ensures that both really

1669
01:10:50,699 --> 01:10:51,960
um

1670
01:10:51,960 --> 01:10:55,260
hash the same byte string so both end up

1671
01:10:55,260 --> 01:10:57,900
with the same hash at the end of the day

1672
01:10:57,900 --> 01:11:01,500
so that would be canonicalization

1673
01:11:01,500 --> 01:11:03,300
um

1674
01:11:03,300 --> 01:11:05,640
where so this you need obviously to do

1675
01:11:05,640 --> 01:11:08,640
at both the issue room and the verify

1676
01:11:08,640 --> 01:11:11,400
in any way in any case

1677
01:11:11,400 --> 01:11:14,460
whatever we do we need to Define what we

1678
01:11:14,460 --> 01:11:15,600
do

1679
01:11:15,600 --> 01:11:16,860
um in the spec to ensure

1680
01:11:16,860 --> 01:11:18,900
interoperability we need to ensure that

1681
01:11:18,900 --> 01:11:21,960
issue and verifier agree on on how this

1682
01:11:21,960 --> 01:11:24,420
Computing is done

1683
01:11:24,420 --> 01:11:27,300
um that's a question by Hannis um I

1684
01:11:27,300 --> 01:11:29,580
obviously have some more slides I want

1685
01:11:29,580 --> 01:11:31,199
to walk around um

1686
01:11:31,199 --> 01:11:33,000
I think you have to do both anyway

1687
01:11:33,000 --> 01:11:35,960
because uh if you think back about HTTP

1688
01:11:35,960 --> 01:11:40,140
yeah also the HTTP signature work we did

1689
01:11:40,140 --> 01:11:41,880
that's the same problem if you just

1690
01:11:41,880 --> 01:11:45,960
compare the hashed value uh or take the

1691
01:11:45,960 --> 01:11:49,020
hashed value to do further things then

1692
01:11:49,020 --> 01:11:51,360
um and not really compare it to what was

1693
01:11:51,360 --> 01:11:53,520
originally hashed so you have the same

1694
01:11:53,520 --> 01:11:55,800
issue again then you will run into

1695
01:11:55,800 --> 01:11:57,840
problems because someone attacker could

1696
01:11:57,840 --> 01:11:59,699
swap out things

1697
01:11:59,699 --> 01:12:02,340
um because you are later creating or do

1698
01:12:02,340 --> 01:12:04,500
all the actions based on the second

1699
01:12:04,500 --> 01:12:06,420
transmitted hash value

1700
01:12:06,420 --> 01:12:09,179
and while you actually base decisions on

1701
01:12:09,179 --> 01:12:11,400
what's in the content of the of the

1702
01:12:11,400 --> 01:12:12,960
original plain text that would be a

1703
01:12:12,960 --> 01:12:15,239
problem so you I think you have to do

1704
01:12:15,239 --> 01:12:17,699
at least the clinicalization in some

1705
01:12:17,699 --> 01:12:18,480
form

1706
01:12:18,480 --> 01:12:20,820
no you don't think so not necessarily

1707
01:12:20,820 --> 01:12:22,560
okay I'm looking forward to see that

1708
01:12:22,560 --> 01:12:25,980
just one comment so that was harness as

1709
01:12:25,980 --> 01:12:29,360
an individual on the mic

1710
01:12:30,360 --> 01:12:33,420
okay uh let's um

1711
01:12:33,420 --> 01:12:37,219
see if we can get the slides back

1712
01:12:38,159 --> 01:12:41,120
what's going on there

1713
01:12:41,159 --> 01:12:45,559
it's not working see yeah

1714
01:12:46,760 --> 01:12:50,060
I'm trying

1715
01:12:50,340 --> 01:12:52,560
uh

1716
01:12:52,560 --> 01:12:54,060
um

1717
01:12:54,060 --> 01:12:57,080
it is connected

1718
01:12:57,600 --> 01:13:01,760
I don't have power even like I thought

1719
01:13:08,060 --> 01:13:10,820
still trying to connect here

1720
01:13:10,820 --> 01:13:14,159
do we have some weighted music I'm just

1721
01:13:14,159 --> 01:13:15,380
trying yeah

1722
01:13:15,380 --> 01:13:17,100
yeah

1723
01:13:17,100 --> 01:13:17,960
yeah

1724
01:13:17,960 --> 01:13:22,100
harness will start singing in a second

1725
01:13:24,510 --> 01:13:27,239
[Music]

1726
01:13:27,239 --> 01:13:31,759
okay I think I'm back here

1727
01:13:33,780 --> 01:13:36,860
this guy

1728
01:13:39,000 --> 01:13:41,420
here

1729
01:13:41,520 --> 01:13:44,520
um yes

1730
01:13:45,900 --> 01:13:48,840
yeah no worries okay thank you very much

1731
01:13:48,840 --> 01:13:52,199
next slide please ah

1732
01:13:52,199 --> 01:13:55,199
questions

1733
01:13:57,900 --> 01:14:00,659
is this one yes

1734
01:14:00,659 --> 01:14:01,380
um

1735
01:14:01,380 --> 01:14:04,380
so I'd approach that we've taken and the

1736
01:14:04,380 --> 01:14:09,000
um draft is to ensure that a byte string

1737
01:14:09,000 --> 01:14:10,679
is transferred from the issuer to the

1738
01:14:10,679 --> 01:14:13,020
very file that

1739
01:14:13,020 --> 01:14:15,000
and and because we transfer the byte

1740
01:14:15,000 --> 01:14:17,040
string we can ensure that always the

1741
01:14:17,040 --> 01:14:18,960
same thing is Hash because you just hash

1742
01:14:18,960 --> 01:14:20,940
this byte string if you look closely

1743
01:14:20,940 --> 01:14:22,140
here

1744
01:14:22,140 --> 01:14:23,940
um on the top left side you see the

1745
01:14:23,940 --> 01:14:26,159
address and now it's not a Json object

1746
01:14:26,159 --> 01:14:29,760
any longer instead it's a string of

1747
01:14:29,760 --> 01:14:33,719
bytes which happens to encode Json

1748
01:14:33,719 --> 01:14:35,179
um actually you could use any other

1749
01:14:35,179 --> 01:14:37,560
encoding at this point

1750
01:14:37,560 --> 01:14:40,380
um but Json is just something we use

1751
01:14:40,380 --> 01:14:43,500
anyway so what we do is we build one

1752
01:14:43,500 --> 01:14:46,380
string per object so that object can be

1753
01:14:46,380 --> 01:14:49,679
an address in this case like a complex

1754
01:14:49,679 --> 01:14:51,900
Json object can also be just a Json

1755
01:14:51,900 --> 01:14:54,060
string it can be a floating Point number

1756
01:14:54,060 --> 01:14:56,280
whatever but it will be turned into a

1757
01:14:56,280 --> 01:15:00,000
string by Json encoding and that string

1758
01:15:00,000 --> 01:15:02,400
is transferred from the issuer to the

1759
01:15:02,400 --> 01:15:03,719
verifier

1760
01:15:03,719 --> 01:15:05,880
and that ensures that both hash the same

1761
01:15:05,880 --> 01:15:09,360
byte string and come to the same

1762
01:15:09,360 --> 01:15:12,060
um hash at the end of the day

1763
01:15:12,060 --> 01:15:14,840
um next slide please

1764
01:15:17,580 --> 01:15:18,960
yeah

1765
01:15:18,960 --> 01:15:22,020
it's good and next slide was one of the

1766
01:15:22,020 --> 01:15:23,280
slides we

1767
01:15:23,280 --> 01:15:24,840
yeah

1768
01:15:24,840 --> 01:15:27,080
um so

1769
01:15:27,080 --> 01:15:30,120
canonicalization gives you a clean data

1770
01:15:30,120 --> 01:15:31,620
structure so you can just transfer

1771
01:15:31,620 --> 01:15:34,040
things essentially as they are

1772
01:15:34,040 --> 01:15:37,920
but the problem that we saw with that it

1773
01:15:37,920 --> 01:15:41,640
is that it's it adds a really

1774
01:15:41,640 --> 01:15:43,739
non-trivial dependency so you need to

1775
01:15:43,739 --> 01:15:45,360
ensure that

1776
01:15:45,360 --> 01:15:47,820
um issue and verifier follow exactly the

1777
01:15:47,820 --> 01:15:49,020
same rules

1778
01:15:49,020 --> 01:15:51,840
um that there are libraries for that

1779
01:15:51,840 --> 01:15:53,520
that Implement that

1780
01:15:53,520 --> 01:15:56,040
um and if you happen to implement it

1781
01:15:56,040 --> 01:15:58,260
yourself or the library is not well

1782
01:15:58,260 --> 01:16:00,060
implemented it can be really hard to

1783
01:16:00,060 --> 01:16:02,760
debug because the issuer just sends you

1784
01:16:02,760 --> 01:16:04,500
something

1785
01:16:04,500 --> 01:16:06,420
um but you will never learn what the

1786
01:16:06,420 --> 01:16:08,880
issue actually has to get to that hash

1787
01:16:08,880 --> 01:16:11,520
value that you get alongside

1788
01:16:11,520 --> 01:16:12,300
um

1789
01:16:12,300 --> 01:16:17,280
so this can be this this so obviously we

1790
01:16:17,280 --> 01:16:18,960
can test that you can do conformance

1791
01:16:18,960 --> 01:16:21,300
tests and so on but if you happen to

1792
01:16:21,300 --> 01:16:23,100
have an error somewhere it's really not

1793
01:16:23,100 --> 01:16:24,600
transparent to the verify what's

1794
01:16:24,600 --> 01:16:26,159
happening and it can be really hard to

1795
01:16:26,159 --> 01:16:29,960
debug next slide please

1796
01:16:30,239 --> 01:16:32,940
um so the approach that we've chosen the

1797
01:16:32,940 --> 01:16:35,460
sawstring encoding is really easy to

1798
01:16:35,460 --> 01:16:37,500
implement uh with any Json Library

1799
01:16:37,500 --> 01:16:39,540
that's also feedback that we got from

1800
01:16:39,540 --> 01:16:41,699
the implementers of the spec

1801
01:16:41,699 --> 01:16:43,500
um you just do a Json encode on a thing

1802
01:16:43,500 --> 01:16:46,020
and you're good to go you don't need any

1803
01:16:46,020 --> 01:16:47,699
new dependencies

1804
01:16:47,699 --> 01:16:50,580
um so you just need the Json Library

1805
01:16:50,580 --> 01:16:53,940
and it's actually something that in a

1806
01:16:53,940 --> 01:16:56,880
similar way is being done in jws anyway

1807
01:16:56,880 --> 01:16:59,100
so you have the whole Json thing and

1808
01:16:59,100 --> 01:17:02,940
you're just a bit uh the downside of

1809
01:17:02,940 --> 01:17:04,380
this is

1810
01:17:04,380 --> 01:17:07,080
um that um it certainly looks strange so

1811
01:17:07,080 --> 01:17:09,360
some people ask if that's an error in

1812
01:17:09,360 --> 01:17:11,880
the in a spec no it's not

1813
01:17:11,880 --> 01:17:13,260
um that's why we have this lengthy

1814
01:17:13,260 --> 01:17:15,179
explanation now

1815
01:17:15,179 --> 01:17:19,080
um and of course if you just look at the

1816
01:17:19,080 --> 01:17:19,620
um

1817
01:17:19,620 --> 01:17:21,900
the disclosures object where where the

1818
01:17:21,900 --> 01:17:25,860
raw strings are in

1819
01:17:25,860 --> 01:17:28,500
you don't so if you just have that thing

1820
01:17:28,500 --> 01:17:31,800
you cannot apply Json schema to

1821
01:17:31,800 --> 01:17:33,719
um in the example the address came for

1822
01:17:33,719 --> 01:17:35,400
example

1823
01:17:35,400 --> 01:17:37,739
um you cannot really talk about typing

1824
01:17:37,739 --> 01:17:41,159
it's always a string so you have one

1825
01:17:41,159 --> 01:17:45,239
layer more that you need to dig into so

1826
01:17:45,239 --> 01:17:48,360
um might not be accessible to to such

1827
01:17:48,360 --> 01:17:50,460
things but um

1828
01:17:50,460 --> 01:17:52,679
but hopefully at the place we're using

1829
01:17:52,679 --> 01:17:54,480
it in the spec it's not a place where

1830
01:17:54,480 --> 01:17:56,159
you would do that because

1831
01:17:56,159 --> 01:17:57,840
um you process a thing according to

1832
01:17:57,840 --> 01:18:00,900
what's in the SD drop spec and at the

1833
01:18:00,900 --> 01:18:02,699
end of the day you get a document out

1834
01:18:02,699 --> 01:18:06,120
that has the same data as the issuer

1835
01:18:06,120 --> 01:18:08,040
um process in the first place so you get

1836
01:18:08,040 --> 01:18:12,440
the same types the same object and so on

1837
01:18:13,920 --> 01:18:15,600
Justin Richard

1838
01:18:15,600 --> 01:18:17,640
um

1839
01:18:17,640 --> 01:18:22,260
not exactly so Json strings

1840
01:18:22,260 --> 01:18:25,500
um have uh the ability to have for

1841
01:18:25,500 --> 01:18:27,239
example Unicode encoded characters and

1842
01:18:27,239 --> 01:18:29,760
stuff like that that allows you to put a

1843
01:18:29,760 --> 01:18:31,560
different character sequence and get the

1844
01:18:31,560 --> 01:18:33,360
same semantic bites out the other end

1845
01:18:33,360 --> 01:18:36,000
yes so this is something that you can do

1846
01:18:36,000 --> 01:18:39,239
and say it's the Json string value but

1847
01:18:39,239 --> 01:18:41,760
you have to be way way way more precise

1848
01:18:41,760 --> 01:18:45,120
than just saying call json.encode

1849
01:18:45,120 --> 01:18:48,000
um because uh for example uh inside Json

1850
01:18:48,000 --> 01:18:50,699
strings you can you are fully allowed to

1851
01:18:50,699 --> 01:18:53,340
prefix forward slashes with a backslash

1852
01:18:53,340 --> 01:18:55,679
character and

1853
01:18:55,679 --> 01:18:58,860
that gets sent as a as a two-character

1854
01:18:58,860 --> 01:18:59,880
thing

1855
01:18:59,880 --> 01:19:02,940
but it is supposed to be interpreted as

1856
01:19:02,940 --> 01:19:04,980
a single backslash character

1857
01:19:04,980 --> 01:19:06,719
or sorry as a single forward slash

1858
01:19:06,719 --> 01:19:08,340
character you can also send the forward

1859
01:19:08,340 --> 01:19:10,020
slash character without the prefix

1860
01:19:10,020 --> 01:19:11,340
backslash

1861
01:19:11,340 --> 01:19:13,980
because it's technically not a an

1862
01:19:13,980 --> 01:19:16,380
escaped character but you're allowed to

1863
01:19:16,380 --> 01:19:18,780
escape it with the same semantic meeting

1864
01:19:18,780 --> 01:19:21,000
there's also the backslash U Unicode

1865
01:19:21,000 --> 01:19:23,640
characters and then then there are some

1866
01:19:23,640 --> 01:19:25,679
Json libraries that do really really

1867
01:19:25,679 --> 01:19:28,860
weird things with uh Unicode characters

1868
01:19:28,860 --> 01:19:31,860
without doing the backslash U prefix and

1869
01:19:31,860 --> 01:19:33,659
coding and just chucking it in there and

1870
01:19:33,659 --> 01:19:35,100
hoping for the best because it's using

1871
01:19:35,100 --> 01:19:37,739
the system's underlying string libraries

1872
01:19:37,739 --> 01:19:40,860
in other words this works until it

1873
01:19:40,860 --> 01:19:43,380
doesn't and when it doesn't it goes

1874
01:19:43,380 --> 01:19:46,800
really sideways really really hard

1875
01:19:46,800 --> 01:19:49,440
so if you're going to be basing this uh

1876
01:19:49,440 --> 01:19:52,380
off of Json raw Json strings you're

1877
01:19:52,380 --> 01:19:55,020
going to need to be incredibly precise

1878
01:19:55,020 --> 01:19:57,600
about how you actually pull those bites

1879
01:19:57,600 --> 01:20:00,060
out because your normal test cases and

1880
01:20:00,060 --> 01:20:02,340
your normal use cases are probably going

1881
01:20:02,340 --> 01:20:04,679
to work most of the time

1882
01:20:04,679 --> 01:20:07,560
until somebody gets a weird library that

1883
01:20:07,560 --> 01:20:10,500
is implemented completely compliantly

1884
01:20:10,500 --> 01:20:12,239
that does something that you weren't

1885
01:20:12,239 --> 01:20:13,500
expecting

1886
01:20:13,500 --> 01:20:16,320
so it's not as easy as as it might seem

1887
01:20:16,320 --> 01:20:19,500
to say Json strings and uh and on top of

1888
01:20:19,500 --> 01:20:20,880
that I would encourage the authors to

1889
01:20:20,880 --> 01:20:24,960
look into the uh the it's a bit of a

1890
01:20:24,960 --> 01:20:30,420
pariah RFC the uh the JCS uh yeah I see

1891
01:20:30,420 --> 01:20:32,460
a lot of head check exactly exactly

1892
01:20:32,460 --> 01:20:34,500
because that's what you're doing

1893
01:20:34,500 --> 01:20:36,659
okay let me let me just say something

1894
01:20:36,659 --> 01:20:40,739
here I think so either I I I don't see

1895
01:20:40,739 --> 01:20:42,540
the problem yet so I would be happy to

1896
01:20:42,540 --> 01:20:44,699
to discuss that with you sure

1897
01:20:44,699 --> 01:20:47,940
um but as far as I see this

1898
01:20:47,940 --> 01:20:51,719
um we do the Json encoding so we we take

1899
01:20:51,719 --> 01:20:54,360
back the address object right right

1900
01:20:54,360 --> 01:20:57,300
um We call json.encode we get a string

1901
01:20:57,300 --> 01:20:59,520
and that string Ascend as part of

1902
01:20:59,520 --> 01:21:02,640
another Json object from A to B

1903
01:21:02,640 --> 01:21:03,659
um

1904
01:21:03,659 --> 01:21:06,360
of course you can add backslashes and

1905
01:21:06,360 --> 01:21:09,120
unicode escapes and so on there

1906
01:21:09,120 --> 01:21:12,360
um but you're actually like you call the

1907
01:21:12,360 --> 01:21:15,179
encode on one string and you get you

1908
01:21:15,179 --> 01:21:16,920
call the D code on the other string and

1909
01:21:16,920 --> 01:21:19,260
you get the same data you get the same

1910
01:21:19,260 --> 01:21:21,300
byte string

1911
01:21:21,300 --> 01:21:24,719
um you're not we are not hashing the

1912
01:21:24,719 --> 01:21:28,199
thing that was already encoded

1913
01:21:28,199 --> 01:21:29,880
so

1914
01:21:29,880 --> 01:21:32,400
um how to explain because we do do two

1915
01:21:32,400 --> 01:21:34,080
encodings here but

1916
01:21:34,080 --> 01:21:37,199
um as far as I see so and correct me if

1917
01:21:37,199 --> 01:21:39,179
I'm wrong when I have any byte string

1918
01:21:39,179 --> 01:21:41,699
and I call Jason encode and I call Json

1919
01:21:41,699 --> 01:21:43,560
D code I get the same byte stream right

1920
01:21:43,560 --> 01:21:46,739
it's kind of kind of sometimes

1921
01:21:46,739 --> 01:21:50,760
right usually so like not on the wire

1922
01:21:50,760 --> 01:21:53,340
right I know not on the right right so

1923
01:21:53,340 --> 01:21:54,840
what I'm saying A and B see the same

1924
01:21:54,840 --> 01:21:57,719
bite string sometimes usually right yeah

1925
01:21:57,719 --> 01:22:00,179
so that's that's the expectation that we

1926
01:22:00,179 --> 01:22:02,940
have right be happy to validate it but

1927
01:22:02,940 --> 01:22:05,760
it's a beautiful expectation so what I

1928
01:22:05,760 --> 01:22:07,860
would say is that uh where you need to

1929
01:22:07,860 --> 01:22:11,400
be precise in this is where exactly in

1930
01:22:11,400 --> 01:22:13,679
the encoded versus decoded versus stuff

1931
01:22:13,679 --> 01:22:16,320
stack you're expecting to be able to get

1932
01:22:16,320 --> 01:22:18,659
those bytes because if you're throwing

1933
01:22:18,659 --> 01:22:21,360
things through especially a Json decoder

1934
01:22:21,360 --> 01:22:23,520
on the far end it's already gone through

1935
01:22:23,520 --> 01:22:26,699
a Json parser most likely because it's

1936
01:22:26,699 --> 01:22:28,980
an encoded string so it's been parsed as

1937
01:22:28,980 --> 01:22:31,380
a Json strings and so that's been

1938
01:22:31,380 --> 01:22:33,600
already nothing

1939
01:22:33,600 --> 01:22:37,199
the the inner thing has been parsed as a

1940
01:22:37,199 --> 01:22:39,540
Json string it's a Json string right

1941
01:22:39,540 --> 01:22:41,340
right exactly so that's already been

1942
01:22:41,340 --> 01:22:43,260
through one round of Json parser which

1943
01:22:43,260 --> 01:22:45,239
can do all sorts of stuff to the insides

1944
01:22:45,239 --> 01:22:47,460
of the string and uh and change the

1945
01:22:47,460 --> 01:22:50,480
bytes that were on The Wire

1946
01:22:50,699 --> 01:22:52,920
so what I'm saying is about the thing on

1947
01:22:52,920 --> 01:22:54,960
the wire I I understand that I think

1948
01:22:54,960 --> 01:22:57,420
that you I think that you need to so any

1949
01:22:57,420 --> 01:22:59,219
anyway we could we can talk more about

1950
01:22:59,219 --> 01:23:01,500
this too there's there's weird stuff

1951
01:23:01,500 --> 01:23:03,239
that happens in The Wire don't reinvent

1952
01:23:03,239 --> 01:23:05,760
JCS it was a bad idea then it's still a

1953
01:23:05,760 --> 01:23:09,480
bad idea and uh yeah yeah that's that's

1954
01:23:09,480 --> 01:23:11,820
why we're not doing anything so maybe

1955
01:23:11,820 --> 01:23:15,179
Justin just quick question to you so are

1956
01:23:15,179 --> 01:23:18,060
you advocating for canonization or are

1957
01:23:18,060 --> 01:23:20,460
you saying just we want to be precise

1958
01:23:20,460 --> 01:23:24,360
with this with this approach I'm saying

1959
01:23:24,360 --> 01:23:26,400
that if you're going to do this approach

1960
01:23:26,400 --> 01:23:29,760
you need to be very precise about where

1961
01:23:29,760 --> 01:23:31,440
exactly you're saying get the byte

1962
01:23:31,440 --> 01:23:34,500
stream okay and uh because there are

1963
01:23:34,500 --> 01:23:36,900
some subtleties in implementations that

1964
01:23:36,900 --> 01:23:39,239
are going to burn people in

1965
01:23:39,239 --> 01:23:41,580
weird and unpredictable ways it's going

1966
01:23:41,580 --> 01:23:43,140
to be it this is going to be the corner

1967
01:23:43,140 --> 01:23:45,120
cases and the edge cases that really

1968
01:23:45,120 --> 01:23:47,699
really get you here the day-to-day stuff

1969
01:23:47,699 --> 01:23:49,739
Chuck it in Json and code and Json

1970
01:23:49,739 --> 01:23:51,320
decode it's just going to work

1971
01:23:51,320 --> 01:23:54,360
completely agree with that that's it

1972
01:23:54,360 --> 01:23:56,159
like the vast majority of cases it's

1973
01:23:56,159 --> 01:23:58,380
just gonna work and that's fine but in

1974
01:23:58,380 --> 01:24:00,540
order for this to be a real like robust

1975
01:24:00,540 --> 01:24:02,820
security spec as we know we need to care

1976
01:24:02,820 --> 01:24:05,219
about those corner and edge cases and

1977
01:24:05,219 --> 01:24:08,040
this type of uh if I'm getting it I've

1978
01:24:08,040 --> 01:24:09,960
already called json.parse and now I'm

1979
01:24:09,960 --> 01:24:13,260
calling json.decode on something uh like

1980
01:24:13,260 --> 01:24:14,640
maybe that's already been called or

1981
01:24:14,640 --> 01:24:16,380
maybe that's not been called they're

1982
01:24:16,380 --> 01:24:18,780
called No you're calling parse in order

1983
01:24:18,780 --> 01:24:20,280
to get it out of the object in the first

1984
01:24:20,280 --> 01:24:22,940
place yes

1985
01:24:23,900 --> 01:24:26,880
afterwards is just to look at the value

1986
01:24:26,880 --> 01:24:29,340
inside not yes I know

1987
01:24:29,340 --> 01:24:33,239
yeah okay so yeah yeah anyway I I know

1988
01:24:33,239 --> 01:24:34,739
what you're doing and I and I think that

1989
01:24:34,739 --> 01:24:37,620
you have to just say like basically in

1990
01:24:37,620 --> 01:24:40,140
this part of your Json stack like this

1991
01:24:40,140 --> 01:24:42,060
is where you grab the bytes and you

1992
01:24:42,060 --> 01:24:43,620
should be okay yeah

1993
01:24:43,620 --> 01:24:46,080
okay so so in principle you don't have a

1994
01:24:46,080 --> 01:24:48,020
problem with the approach you just want

1995
01:24:48,020 --> 01:24:51,179
Precision here right I'm saying if the

1996
01:24:51,179 --> 01:24:53,159
approach is this then it needs to be

1997
01:24:53,159 --> 01:24:55,199
very very precise I'm not making a value

1998
01:24:55,199 --> 01:24:57,000
judgment on this approach one way or

1999
01:24:57,000 --> 01:24:59,100
another okay okay thank you

2000
01:24:59,100 --> 01:25:00,920
next slide please

2001
01:25:00,920 --> 01:25:02,480
or

2002
01:25:02,480 --> 01:25:04,920
a steel transmute

2003
01:25:04,920 --> 01:25:07,380
um agree with most of what he just said

2004
01:25:07,380 --> 01:25:10,140
but I think generally you're doing

2005
01:25:10,140 --> 01:25:12,000
canonicalization whether you want to

2006
01:25:12,000 --> 01:25:14,159
call it that or not

2007
01:25:14,159 --> 01:25:16,940
that's it

2008
01:25:17,460 --> 01:25:22,199
that was my point yeah okay

2009
01:25:26,340 --> 01:25:28,860
yeah

2010
01:25:28,860 --> 01:25:31,140
Mike Jones Microsoft I'll actually

2011
01:25:31,140 --> 01:25:34,679
disagree with ori's last point I think

2012
01:25:34,679 --> 01:25:37,260
what they're trying to do is

2013
01:25:37,260 --> 01:25:41,400
uh hardening the string for transmission

2014
01:25:41,400 --> 01:25:43,340
I mean a lot of the

2015
01:25:43,340 --> 01:25:49,080
Jose stuff uses base64 URL for hardening

2016
01:25:49,080 --> 01:25:51,719
in the same way I'm not saying you want

2017
01:25:51,719 --> 01:25:53,820
to use that choice or not

2018
01:25:53,820 --> 01:25:55,800
but the point is to get a string that's

2019
01:25:55,800 --> 01:25:59,159
going to survive transmission

2020
01:25:59,159 --> 01:26:01,080
exactly

2021
01:26:01,080 --> 01:26:04,100
and I hate canonicalization

2022
01:26:04,100 --> 01:26:06,659
just for the record thank you for not

2023
01:26:06,659 --> 01:26:09,500
doing that yeah

2024
01:26:09,900 --> 01:26:12,659
yeah okay you're on

2025
01:26:12,659 --> 01:26:15,960
you're answering to it so

2026
01:26:15,960 --> 01:26:19,020
sort of a follow-up on what Mike just

2027
01:26:19,020 --> 01:26:20,120
said

2028
01:26:20,120 --> 01:26:23,820
you're you're starting with the fullness

2029
01:26:23,820 --> 01:26:27,719
of Json and all its complexity as a

2030
01:26:27,719 --> 01:26:31,020
prerequisite you want to essentially

2031
01:26:31,020 --> 01:26:34,199
support disclosure of anything that

2032
01:26:34,199 --> 01:26:37,340
looks like Jason and my question is

2033
01:26:37,340 --> 01:26:41,280
whether you can Harden it enough maybe

2034
01:26:41,280 --> 01:26:44,580
for example by putting constraints on

2035
01:26:44,580 --> 01:26:48,500
claim names on cardinality so can I have

2036
01:26:48,500 --> 01:26:51,300
multiple claims of the same name stuff

2037
01:26:51,300 --> 01:26:54,659
like that maybe

2038
01:26:54,659 --> 01:26:58,340
yeah the the encoding of clan names

2039
01:26:58,340 --> 01:27:01,620
to their security

2040
01:27:01,620 --> 01:27:05,280
um doesn't depend as much on the

2041
01:27:05,280 --> 01:27:07,260
implementation details of these

2042
01:27:07,260 --> 01:27:09,739
libraries

2043
01:27:09,739 --> 01:27:13,080
I think that would be kind of

2044
01:27:13,080 --> 01:27:16,199
mechanization right if I if I say that

2045
01:27:16,199 --> 01:27:17,940
this needs to look in a very specific

2046
01:27:17,940 --> 01:27:19,980
way okay I'm gonna cut the mic after

2047
01:27:19,980 --> 01:27:21,900
you're on so because we're we need to

2048
01:27:21,900 --> 01:27:24,060
move on but yeah go ahead yeah but I

2049
01:27:24,060 --> 01:27:26,120
don't see it as Canon

2050
01:27:26,120 --> 01:27:27,980
canonicalization

2051
01:27:27,980 --> 01:27:29,880
more of

2052
01:27:29,880 --> 01:27:32,760
can I have

2053
01:27:32,760 --> 01:27:34,139
yeah

2054
01:27:34,139 --> 01:27:39,239
a well-defined a claim document that

2055
01:27:39,239 --> 01:27:44,340
still uh secure securely robust

2056
01:27:44,340 --> 01:27:46,920
are you talking about for example saying

2057
01:27:46,920 --> 01:27:49,139
do not put backslashes in the claim

2058
01:27:49,139 --> 01:27:51,480
actual claim values so you don't have a

2059
01:27:51,480 --> 01:27:54,179
problem or that's not not probably not

2060
01:27:54,179 --> 01:27:56,580
values but claim names that's what

2061
01:27:56,580 --> 01:27:58,739
you're saying so stuff like that

2062
01:27:58,739 --> 01:28:00,060
overhead

2063
01:28:00,060 --> 01:28:02,460
I I'm not sure I'm not sure if that

2064
01:28:02,460 --> 01:28:04,800
Awards the problem here

2065
01:28:04,800 --> 01:28:07,940
um but yeah

2066
01:28:08,580 --> 01:28:09,980
okay

2067
01:28:09,980 --> 01:28:13,620
yeah a few minutes okay I tried to do

2068
01:28:13,620 --> 01:28:15,300
this in a few minutes yeah next slide

2069
01:28:15,300 --> 01:28:16,860
please

2070
01:28:16,860 --> 01:28:20,100
um so this is just a quick example

2071
01:28:20,100 --> 01:28:25,020
um so this is what the um this is an SD

2072
01:28:25,020 --> 01:28:27,300
dropped so what the issuer creates uh

2073
01:28:27,300 --> 01:28:28,860
the issue of Science and then sends to

2074
01:28:28,860 --> 01:28:30,780
the holder and the holder can send this

2075
01:28:30,780 --> 01:28:33,239
to the verifier

2076
01:28:33,239 --> 01:28:35,760
um this is essentially so not many

2077
01:28:35,760 --> 01:28:38,580
changes except for the names there from

2078
01:28:38,580 --> 01:28:39,800
the last

2079
01:28:39,800 --> 01:28:43,679
presentation so these are the digest the

2080
01:28:43,679 --> 01:28:47,760
hashes of the claims of the values uh so

2081
01:28:47,760 --> 01:28:49,380
now what are the values next slide

2082
01:28:49,380 --> 01:28:50,940
please

2083
01:28:50,940 --> 01:28:53,040
um they are then of course

2084
01:28:53,040 --> 01:28:54,840
um transferred and what we now call the

2085
01:28:54,840 --> 01:28:58,199
II Disclosure document or issuer issued

2086
01:28:58,199 --> 01:29:02,639
disclosures uh formerly called SVC

2087
01:29:02,639 --> 01:29:05,340
um and here we have um the strings so

2088
01:29:05,340 --> 01:29:07,020
for sup you see a string for given name

2089
01:29:07,020 --> 01:29:09,300
you see a string and each string then

2090
01:29:09,300 --> 01:29:12,540
encodes the Json object this Json object

2091
01:29:12,540 --> 01:29:16,139
itself has two keys s for the salt and V

2092
01:29:16,139 --> 01:29:19,500
for the value and this approach um is

2093
01:29:19,500 --> 01:29:23,219
also nice because it ensures that you

2094
01:29:23,219 --> 01:29:25,080
have a separation between the salt and

2095
01:29:25,080 --> 01:29:26,100
the value

2096
01:29:26,100 --> 01:29:27,900
which means that

2097
01:29:27,900 --> 01:29:30,600
um there can be no hash lengths

2098
01:29:30,600 --> 01:29:32,100
extension attacks or anything like that

2099
01:29:32,100 --> 01:29:35,760
where the where part of the salt is

2100
01:29:35,760 --> 01:29:37,380
um considered

2101
01:29:37,380 --> 01:29:39,840
um like part of the value or vice versa

2102
01:29:39,840 --> 01:29:42,420
so it's it's clearly separated

2103
01:29:42,420 --> 01:29:44,159
um if you don't do it this way you need

2104
01:29:44,159 --> 01:29:46,500
to think about how to

2105
01:29:46,500 --> 01:29:48,600
um take the salt in the value and then

2106
01:29:48,600 --> 01:29:50,159
hash them together you need to Define

2107
01:29:50,159 --> 01:29:52,500
that step as well we don't need to do

2108
01:29:52,500 --> 01:29:55,260
that we just have an object S and B

2109
01:29:55,260 --> 01:29:58,020
salt and value and of course that whole

2110
01:29:58,020 --> 01:29:59,760
string for birthdate for example then

2111
01:29:59,760 --> 01:30:03,360
hashes to what's in the SD jot uh next

2112
01:30:03,360 --> 01:30:04,980
slide please

2113
01:30:04,980 --> 01:30:07,879
next slide

2114
01:30:08,460 --> 01:30:11,639
um this is then so the issue issue

2115
01:30:11,639 --> 01:30:13,500
disclosures is created by the issuer

2116
01:30:13,500 --> 01:30:16,199
sent to the holder the holder selects

2117
01:30:16,199 --> 01:30:18,560
some of their claims to

2118
01:30:18,560 --> 01:30:22,040
disclose to the verifier

2119
01:30:22,040 --> 01:30:25,920
so the HS disclosures document is a

2120
01:30:25,920 --> 01:30:28,320
subset of the issuer issued disclosures

2121
01:30:28,320 --> 01:30:29,460
document

2122
01:30:29,460 --> 01:30:33,120
in the current uh spec the

2123
01:30:33,120 --> 01:30:36,239
um same document is also used for the

2124
01:30:36,239 --> 01:30:38,940
holder binding so stuff like an on so

2125
01:30:38,940 --> 01:30:41,940
audience or other things can be added

2126
01:30:41,940 --> 01:30:44,400
into this document and then the whole

2127
01:30:44,400 --> 01:30:47,100
thing can be signed and sent uh from the

2128
01:30:47,100 --> 01:30:49,320
holder to the verifier and the verify it

2129
01:30:49,320 --> 01:30:51,480
and then verify that this was actually

2130
01:30:51,480 --> 01:30:55,080
signed with the holders key

2131
01:30:55,080 --> 01:30:55,800
um

2132
01:30:55,800 --> 01:30:57,719
now

2133
01:30:57,719 --> 01:30:59,880
um coming back to what a point that

2134
01:30:59,880 --> 01:31:03,719
Brian raised um this thing as we have it

2135
01:31:03,719 --> 01:31:05,580
in respect right now actually serves two

2136
01:31:05,580 --> 01:31:07,980
different purposes one is to just

2137
01:31:07,980 --> 01:31:10,199
transfer the holder selected disclosures

2138
01:31:10,199 --> 01:31:12,480
you can essentially do that unsigned

2139
01:31:12,480 --> 01:31:15,540
there's no really no real need to sign

2140
01:31:15,540 --> 01:31:17,520
that thing

2141
01:31:17,520 --> 01:31:19,800
um you could just send it as a Json

2142
01:31:19,800 --> 01:31:22,440
object and then there's the holder

2143
01:31:22,440 --> 01:31:23,400
binding

2144
01:31:23,400 --> 01:31:25,620
um which is just a signature over the

2145
01:31:25,620 --> 01:31:27,719
nons and the audience wherever that

2146
01:31:27,719 --> 01:31:30,120
nonce comes from by the way

2147
01:31:30,120 --> 01:31:30,840
um

2148
01:31:30,840 --> 01:31:33,300
and that is a different purpose so that

2149
01:31:33,300 --> 01:31:35,340
is to show that the holder is able to

2150
01:31:35,340 --> 01:31:37,980
sign something that's fresh because it

2151
01:31:37,980 --> 01:31:40,020
has response and intended for that

2152
01:31:40,020 --> 01:31:41,460
verifier

2153
01:31:41,460 --> 01:31:43,560
um using its key

2154
01:31:43,560 --> 01:31:46,080
um so two different things and we could

2155
01:31:46,080 --> 01:31:48,600
think about separating them so just

2156
01:31:48,600 --> 01:31:50,460
having a Json object for the HS

2157
01:31:50,460 --> 01:31:53,639
disclosures and then optionally having a

2158
01:31:53,639 --> 01:31:56,760
sign chart for the holder binding

2159
01:31:56,760 --> 01:31:59,820
that's an option that we probably will

2160
01:31:59,820 --> 01:32:02,520
consider I guess

2161
01:32:02,520 --> 01:32:03,360
um

2162
01:32:03,360 --> 01:32:05,460
questions

2163
01:32:05,460 --> 01:32:09,300
I think we need to move on so if like if

2164
01:32:09,300 --> 01:32:11,159
you have questions maybe just raise them

2165
01:32:11,159 --> 01:32:13,380
and make sure people and we can discuss

2166
01:32:13,380 --> 01:32:14,880
it in the side meetings if you want

2167
01:32:14,880 --> 01:32:16,560
right okay

2168
01:32:16,560 --> 01:32:19,580
um then next slide please

2169
01:32:19,739 --> 01:32:22,440
um we also have claim name blinding now

2170
01:32:22,440 --> 01:32:24,600
so some of the claim names can be

2171
01:32:24,600 --> 01:32:28,320
replaced by random strings in this case

2172
01:32:28,320 --> 01:32:30,000
um I don't know what it was family name

2173
01:32:30,000 --> 01:32:32,580
no family names anyway this claim was

2174
01:32:32,580 --> 01:32:35,159
blinded so it has been replaced by a

2175
01:32:35,159 --> 01:32:37,440
random string the Israel selects that

2176
01:32:37,440 --> 01:32:39,000
random string

2177
01:32:39,000 --> 01:32:42,420
um and just exchanges claim name and the

2178
01:32:42,420 --> 01:32:45,480
random string next slide please

2179
01:32:45,480 --> 01:32:48,360
in the disclosures we now have an entry

2180
01:32:48,360 --> 01:32:50,520
for the claim with that random string

2181
01:32:50,520 --> 01:32:52,320
and

2182
01:32:52,320 --> 01:32:54,960
um we now have a third element in the

2183
01:32:54,960 --> 01:32:56,940
disclosure which is called n for the

2184
01:32:56,940 --> 01:32:58,500
original claim name

2185
01:32:58,500 --> 01:33:00,659
and that element just contains the

2186
01:33:00,659 --> 01:33:02,219
original claim name

2187
01:33:02,219 --> 01:33:04,320
now

2188
01:33:04,320 --> 01:33:07,679
um this might look like complicating

2189
01:33:07,679 --> 01:33:09,540
things further for an application

2190
01:33:09,540 --> 01:33:12,480
consuming SD drafts but we'll get to the

2191
01:33:12,480 --> 01:33:14,340
processing model where we say okay the

2192
01:33:14,340 --> 01:33:16,320
steel drought Library can do all the

2193
01:33:16,320 --> 01:33:18,060
hard work on

2194
01:33:18,060 --> 01:33:20,100
um processing this putting in the

2195
01:33:20,100 --> 01:33:21,500
original claim name

2196
01:33:21,500 --> 01:33:23,880
instead of the the line of claim name

2197
01:33:23,880 --> 01:33:25,560
and the application will address that

2198
01:33:25,560 --> 01:33:30,420
adjacent document that will will not

2199
01:33:30,420 --> 01:33:32,040
have any traces of the planning claim

2200
01:33:32,040 --> 01:33:34,260
named planning claim names next slide

2201
01:33:34,260 --> 01:33:35,580
please

2202
01:33:35,580 --> 01:33:38,580
processing model how fitting

2203
01:33:38,580 --> 01:33:40,800
um so this is a processing model how

2204
01:33:40,800 --> 01:33:43,520
many slides do you have yeah

2205
01:33:43,520 --> 01:33:46,560
just loving everything okay

2206
01:33:46,560 --> 01:33:47,179
um

2207
01:33:47,179 --> 01:33:50,520
uh the processing model is how we think

2208
01:33:50,520 --> 01:33:53,400
that as C drive libraries will process

2209
01:33:53,400 --> 01:33:55,320
SD jobs

2210
01:33:55,320 --> 01:33:57,840
um simple steps verify all the things

2211
01:33:57,840 --> 01:33:59,880
that you get verify the the disclosures

2212
01:33:59,880 --> 01:34:03,060
actually match uh the SD draft

2213
01:34:03,060 --> 01:34:05,340
um unblind any blinded claim names if

2214
01:34:05,340 --> 01:34:07,260
there are any

2215
01:34:07,260 --> 01:34:10,139
um March the selectively disclosable

2216
01:34:10,139 --> 01:34:13,100
claim names uh claims into the

2217
01:34:13,100 --> 01:34:16,020
non-selectively disclosable uh claims in

2218
01:34:16,020 --> 01:34:17,940
the SD drought

2219
01:34:17,940 --> 01:34:21,420
which means that at output time you get

2220
01:34:21,420 --> 01:34:23,340
just one document which looks like the

2221
01:34:23,340 --> 01:34:26,400
body of a normal dot which has been

2222
01:34:26,400 --> 01:34:28,980
verified processed and you can just put

2223
01:34:28,980 --> 01:34:31,139
that into your application so the

2224
01:34:31,139 --> 01:34:32,340
application doesn't need to know

2225
01:34:32,340 --> 01:34:35,400
anything about SD dropped

2226
01:34:35,400 --> 01:34:38,159
next slide please

2227
01:34:38,159 --> 01:34:40,080
okay next slide

2228
01:34:40,080 --> 01:34:41,760
um we now have five running

2229
01:34:41,760 --> 01:34:43,739
implementations so we have our

2230
01:34:43,739 --> 01:34:45,360
implementation that we keep up to date

2231
01:34:45,360 --> 01:34:48,239
to generate all the examples in the spec

2232
01:34:48,239 --> 01:34:50,820
um and we now have a new typescript

2233
01:34:50,820 --> 01:34:52,560
implementation second type script

2234
01:34:52,560 --> 01:34:55,440
implementation as well

2235
01:34:55,440 --> 01:34:57,060
next slide

2236
01:34:57,060 --> 01:34:59,420
okay

2237
01:35:00,120 --> 01:35:03,840
um just really quickly uh next steps um

2238
01:35:03,840 --> 01:35:06,540
I think we need to think about how this

2239
01:35:06,540 --> 01:35:08,120
can look like in the context of other

2240
01:35:08,120 --> 01:35:11,340
existing credential formats um

2241
01:35:11,340 --> 01:35:13,739
if there's a mapping between them if

2242
01:35:13,739 --> 01:35:15,960
this is completely different

2243
01:35:15,960 --> 01:35:17,580
um we need to think about that probably

2244
01:35:17,580 --> 01:35:19,560
create some examples

2245
01:35:19,560 --> 01:35:22,380
um and discuss that with the relevant um

2246
01:35:22,380 --> 01:35:25,380
groups

2247
01:35:25,679 --> 01:35:27,840
um we still need some security and

2248
01:35:27,840 --> 01:35:30,060
privacy considerations and it would be

2249
01:35:30,060 --> 01:35:32,159
great if at some point we could do an

2250
01:35:32,159 --> 01:35:33,420
interoperability test between

2251
01:35:33,420 --> 01:35:35,580
implementation stuff we have we could

2252
01:35:35,580 --> 01:35:37,260
even do that offline because you can

2253
01:35:37,260 --> 01:35:38,940
just create these things and consume

2254
01:35:38,940 --> 01:35:40,320
these things

2255
01:35:40,320 --> 01:35:42,600
um you don't need to to be online for

2256
01:35:42,600 --> 01:35:46,020
that thank you very much you thank you

2257
01:35:46,020 --> 01:35:48,960
Daniel and Christina

2258
01:35:48,960 --> 01:35:51,239
do you need time off like on the outside

2259
01:35:51,239 --> 01:35:53,639
meeting to continue this discussion okay

2260
01:35:53,639 --> 01:35:57,480
sounds good okay awesome thank you

2261
01:35:57,480 --> 01:36:01,159
Brian let's get ready

2262
01:36:09,300 --> 01:36:11,639
I'm gonna pass then uh

2263
01:36:11,639 --> 01:36:14,159
control to you

2264
01:36:14,159 --> 01:36:17,299
where are you here

2265
01:36:17,400 --> 01:36:18,960
foreign

2266
01:36:18,960 --> 01:36:21,620
there you go

2267
01:36:21,620 --> 01:36:23,940
got it

2268
01:36:23,940 --> 01:36:27,019
yeah there you go

2269
01:36:28,620 --> 01:36:30,900
all right tough act to follow

2270
01:36:30,900 --> 01:36:34,020
um I'm here to talk about the Step Up

2271
01:36:34,020 --> 01:36:36,300
authentication challenge protocol

2272
01:36:36,300 --> 01:36:37,320
um

2273
01:36:37,320 --> 01:36:40,920
and yeah so including a picture as Aaron

2274
01:36:40,920 --> 01:36:42,780
said is sort of fundamental this was

2275
01:36:42,780 --> 01:36:46,260
actually taking ietf 89 back in uh I

2276
01:36:46,260 --> 01:36:49,020
don't know two a while ago so without

2277
01:36:49,020 --> 01:36:52,739
further Ado Let's uh move forward so a

2278
01:36:52,739 --> 01:36:54,480
little bit of backstory context I have a

2279
01:36:54,480 --> 01:36:55,860
hard time presenting without providing

2280
01:36:55,860 --> 01:36:57,900
some context I'll try to get through it

2281
01:36:57,900 --> 01:37:00,000
quickly basically a protected resource

2282
01:37:00,000 --> 01:37:02,159
can technically reject like you can

2283
01:37:02,159 --> 01:37:03,900
reject a technically valid access token

2284
01:37:03,900 --> 01:37:06,719
for whatever reason that it wants

2285
01:37:06,719 --> 01:37:08,880
um maybe a risk engine decision uh some

2286
01:37:08,880 --> 01:37:10,920
local constraints I say here bad vibes

2287
01:37:10,920 --> 01:37:14,580
like really it whatever it decides uh is

2288
01:37:14,580 --> 01:37:15,900
a reason to reject that token it's

2289
01:37:15,900 --> 01:37:18,659
totally within it's it's purvey to do so

2290
01:37:18,659 --> 01:37:21,780
and really oftentimes what a resource

2291
01:37:21,780 --> 01:37:24,179
wants then is a token obtained from a

2292
01:37:24,179 --> 01:37:25,800
more recent user and active

2293
01:37:25,800 --> 01:37:28,739
authentication event or a token obtained

2294
01:37:28,739 --> 01:37:30,659
with a different authentication flow

2295
01:37:30,659 --> 01:37:33,600
probably a stronger one

2296
01:37:33,600 --> 01:37:35,760
um and there's no current standardized

2297
01:37:35,760 --> 01:37:38,760
guidance on how to do this for the RS to

2298
01:37:38,760 --> 01:37:40,620
express those requirements down to the

2299
01:37:40,620 --> 01:37:43,080
client and the client to indicate those

2300
01:37:43,080 --> 01:37:44,820
requirements back through to the

2301
01:37:44,820 --> 01:37:46,440
authorization server in the flow to

2302
01:37:46,440 --> 01:37:48,420
acquire a new token

2303
01:37:48,420 --> 01:37:51,600
my phone locked there we go

2304
01:37:51,600 --> 01:37:54,900
um so we uh Victoria myself uh tried to

2305
01:37:54,900 --> 01:37:56,880
address this through a draft in the

2306
01:37:56,880 --> 01:37:58,620
working group process so forth so forth

2307
01:37:58,620 --> 01:38:00,480
the summary of the drafts approach is

2308
01:38:00,480 --> 01:38:05,300
extending RFC uh 66 750

2309
01:38:05,300 --> 01:38:08,460
with a new error code insufficient user

2310
01:38:08,460 --> 01:38:12,420
authentication uh to for the end sorry

2311
01:38:12,420 --> 01:38:15,480
and a new new parameters on the www

2312
01:38:15,480 --> 01:38:19,320
authenticate header ACR values and max

2313
01:38:19,320 --> 01:38:21,840
age and this gives then the resource the

2314
01:38:21,840 --> 01:38:23,580
opportunity to express down to the

2315
01:38:23,580 --> 01:38:25,679
client the the conditions that we

2316
01:38:25,679 --> 01:38:27,780
previously talked about either and or

2317
01:38:27,780 --> 01:38:30,360
both that uh different ACR value

2318
01:38:30,360 --> 01:38:32,219
representative of the authentication

2319
01:38:32,219 --> 01:38:35,159
flow or authentication context or a more

2320
01:38:35,159 --> 01:38:37,440
recent authentication event is required

2321
01:38:37,440 --> 01:38:39,239
associated with the access token that

2322
01:38:39,239 --> 01:38:40,920
will be issued off of

2323
01:38:40,920 --> 01:38:43,020
in turn then we utilize the

2324
01:38:43,020 --> 01:38:45,060
authorization request parameters ACR

2325
01:38:45,060 --> 01:38:48,719
values and max age to allow the client

2326
01:38:48,719 --> 01:38:51,199
to convey to the authorization server

2327
01:38:51,199 --> 01:38:53,699
its needs around the authentication

2328
01:38:53,699 --> 01:38:55,739
event these are parameters already

2329
01:38:55,739 --> 01:38:59,340
defined and registered via oidc core in

2330
01:38:59,340 --> 01:39:02,580
the uh our oauth parameters registry

2331
01:39:02,580 --> 01:39:05,040
and then uh Define and or reference

2332
01:39:05,040 --> 01:39:06,960
depending on the context ACR and off

2333
01:39:06,960 --> 01:39:08,820
time introspection response parameters

2334
01:39:08,820 --> 01:39:13,440
and JW claims JWT claims uh to express

2335
01:39:13,440 --> 01:39:14,820
that information about the

2336
01:39:14,820 --> 01:39:16,139
authentication event associated

2337
01:39:16,139 --> 01:39:18,540
associated with the access token to the

2338
01:39:18,540 --> 01:39:20,040
protected resource so really it's just

2339
01:39:20,040 --> 01:39:22,020
stuffing them in the job or making them

2340
01:39:22,020 --> 01:39:24,300
available of via introspection via the

2341
01:39:24,300 --> 01:39:26,100
same claim names they're already defined

2342
01:39:26,100 --> 01:39:28,020
for jots we just reference them um

2343
01:39:28,020 --> 01:39:30,060
they're more explicitly defined in this

2344
01:39:30,060 --> 01:39:32,520
draft for uh introspection to be to be

2345
01:39:32,520 --> 01:39:34,639
clear

2346
01:39:34,800 --> 01:39:39,360
and um this is the kind of flow diagram

2347
01:39:39,360 --> 01:39:41,780
I

2348
01:39:42,420 --> 01:39:44,040
I'm hesitating whether it's really worth

2349
01:39:44,040 --> 01:39:45,060
going over

2350
01:39:45,060 --> 01:39:47,940
um basically you're making API requests

2351
01:39:47,940 --> 01:39:50,880
uh up before one you get to one a tokens

2352
01:39:50,880 --> 01:39:53,280
presented it it has token information

2353
01:39:53,280 --> 01:39:55,139
those are the projected resource decides

2354
01:39:55,139 --> 01:39:57,900
hey it's not good enough and in this

2355
01:39:57,900 --> 01:40:00,360
case it's challenging in step two

2356
01:40:00,360 --> 01:40:01,920
basically saying I need a more recent

2357
01:40:01,920 --> 01:40:03,600
authentication event associated with a

2358
01:40:03,600 --> 01:40:05,639
token that you're presenting me as a

2359
01:40:05,639 --> 01:40:09,239
result of to the client uh pops up a

2360
01:40:09,239 --> 01:40:11,520
browser or directs the end user's

2361
01:40:11,520 --> 01:40:13,139
browser to make a new authorization

2362
01:40:13,139 --> 01:40:16,380
request and includes in this case a max

2363
01:40:16,380 --> 01:40:18,000
age parameter saying I need a more

2364
01:40:18,000 --> 01:40:19,040
recent event

2365
01:40:19,040 --> 01:40:21,480
authentication event associated with the

2366
01:40:21,480 --> 01:40:22,920
access token

2367
01:40:22,920 --> 01:40:24,420
um then the magic happens all out of

2368
01:40:24,420 --> 01:40:25,980
scope but the authorization server

2369
01:40:25,980 --> 01:40:28,500
prompts the user does the authentication

2370
01:40:28,500 --> 01:40:32,639
uh dance at per it's purvey uh and

2371
01:40:32,639 --> 01:40:35,100
ultimately returns a new access token in

2372
01:40:35,100 --> 01:40:37,020
step four some things submitted there

2373
01:40:37,020 --> 01:40:39,000
but hopefully you know the drill and

2374
01:40:39,000 --> 01:40:41,280
then uh in step five it makes the same

2375
01:40:41,280 --> 01:40:43,520
API call with the new access token

2376
01:40:43,520 --> 01:40:45,780
inside or referenced by that access

2377
01:40:45,780 --> 01:40:48,239
token is a more recent authentication

2378
01:40:48,239 --> 01:40:50,699
event represented by off time same flow

2379
01:40:50,699 --> 01:40:52,739
could happen with ACR but using off time

2380
01:40:52,739 --> 01:40:55,139
here and the protected resource is happy

2381
01:40:55,139 --> 01:40:57,239
with it

2382
01:40:57,239 --> 01:40:59,760
keep locking my phone

2383
01:40:59,760 --> 01:41:00,540
um

2384
01:41:00,540 --> 01:41:02,400
so just kind of quick summary of where

2385
01:41:02,400 --> 01:41:05,219
we are uh in Vienna we first presented

2386
01:41:05,219 --> 01:41:08,400
this draft back in itf13 it was adopted

2387
01:41:08,400 --> 01:41:09,780
and shortly after that and followed by

2388
01:41:09,780 --> 01:41:11,460
the pretty typical sort of standard

2389
01:41:11,460 --> 01:41:13,739
iteration process some comments some new

2390
01:41:13,739 --> 01:41:16,800
updates so forth we got drafts one and

2391
01:41:16,800 --> 01:41:18,600
two

2392
01:41:18,600 --> 01:41:21,060
and then uh

2393
01:41:21,060 --> 01:41:22,739
talked about it in Philly a few things

2394
01:41:22,739 --> 01:41:24,840
have happened since then published uh

2395
01:41:24,840 --> 01:41:27,600
three uh clarified that the ACR values

2396
01:41:27,600 --> 01:41:29,219
and the max age can occur in the same

2397
01:41:29,219 --> 01:41:30,719
challenge when and if they're necessary

2398
01:41:30,719 --> 01:41:32,639
sometimes you want to ask for both

2399
01:41:32,639 --> 01:41:34,380
flush out the deployment and security

2400
01:41:34,380 --> 01:41:36,900
considerations uh also did all the INR

2401
01:41:36,900 --> 01:41:38,820
registry stuff that's necessary

2402
01:41:38,820 --> 01:41:41,460
um tried to clarify because it wasn't

2403
01:41:41,460 --> 01:41:43,679
clear to everyone that while the ACR

2404
01:41:43,679 --> 01:41:45,960
values which is basically saying these

2405
01:41:45,960 --> 01:41:48,500
are the accepted

2406
01:41:48,500 --> 01:41:50,880
acrs that we would take for this can

2407
01:41:50,880 --> 01:41:52,440
have more than one value it's a space

2408
01:41:52,440 --> 01:41:55,619
separated listing of ACR values the

2409
01:41:55,619 --> 01:41:57,900
actual authentication only can be

2410
01:41:57,900 --> 01:41:59,820
qualified as meeting one though one of

2411
01:41:59,820 --> 01:42:01,619
those so the token itself only has a

2412
01:42:01,619 --> 01:42:03,980
single ACR only one ends up in the token

2413
01:42:03,980 --> 01:42:07,320
uh we did migrate this over and by we I

2414
01:42:07,320 --> 01:42:10,739
mean Aaron migrated it over into the uh

2415
01:42:10,739 --> 01:42:13,020
new GitHub org here and thank you for

2416
01:42:13,020 --> 01:42:14,580
doing that

2417
01:42:14,580 --> 01:42:18,000
were coming along to the the new process

2418
01:42:18,000 --> 01:42:19,980
uh but it's it's nice tooling it's very

2419
01:42:19,980 --> 01:42:22,619
very useful uh did working group last

2420
01:42:22,619 --> 01:42:26,340
call was uh September 22nd October 2nd

2421
01:42:26,340 --> 01:42:31,139
um did drafts four and five to uh mostly

2422
01:42:31,139 --> 01:42:33,000
editorial updates and feedback

2423
01:42:33,000 --> 01:42:35,400
addressing those and then um they were

2424
01:42:35,400 --> 01:42:36,659
the day after each other noticed that

2425
01:42:36,659 --> 01:42:38,520
the updates needed some updating so we

2426
01:42:38,520 --> 01:42:40,260
fixed those

2427
01:42:40,260 --> 01:42:41,000
um

2428
01:42:41,000 --> 01:42:43,500
recently I updated some examples and

2429
01:42:43,500 --> 01:42:45,300
figures to be really clear that the

2430
01:42:45,300 --> 01:42:47,820
authorization request is sent by the

2431
01:42:47,820 --> 01:42:51,659
client not directly but via directing

2432
01:42:51,659 --> 01:42:53,940
the end users user agent or browser to

2433
01:42:53,940 --> 01:42:54,960
make the call

2434
01:42:54,960 --> 01:42:56,880
um in some ways this is related back to

2435
01:42:56,880 --> 01:42:59,280
the the discussion of of course although

2436
01:42:59,280 --> 01:43:00,840
it's not mentioned here

2437
01:43:00,840 --> 01:43:02,340
um what happened here is I was I was

2438
01:43:02,340 --> 01:43:04,860
actually sort of refurbishing vittorio's

2439
01:43:04,860 --> 01:43:06,480
slide deck to

2440
01:43:06,480 --> 01:43:09,239
um to do these slides and it became kind

2441
01:43:09,239 --> 01:43:11,400
of clear that the the ideas had been

2442
01:43:11,400 --> 01:43:13,380
intermixed and that some of the slides

2443
01:43:13,380 --> 01:43:15,600
made it look like maybe the

2444
01:43:15,600 --> 01:43:16,800
authorization request was coming

2445
01:43:16,800 --> 01:43:19,139
directly from the client didn't say that

2446
01:43:19,139 --> 01:43:21,239
but it maybe implied it and I wanted to

2447
01:43:21,239 --> 01:43:22,920
clarify that look back at the draft and

2448
01:43:22,920 --> 01:43:24,480
it in fact had the same kind of

2449
01:43:24,480 --> 01:43:27,719
potential for ambiguity so I fixed those

2450
01:43:27,719 --> 01:43:30,900
um and I say a new draft is coming soon

2451
01:43:30,900 --> 01:43:32,820
they actually published this yesterday

2452
01:43:32,820 --> 01:43:34,080
um there's no normative changes but I

2453
01:43:34,080 --> 01:43:35,280
think it's an important clarification

2454
01:43:35,280 --> 01:43:37,500
that maybe folks that are familiar with

2455
01:43:37,500 --> 01:43:39,179
oauth would just sort of gloss over

2456
01:43:39,179 --> 01:43:40,560
because they know how it works but if

2457
01:43:40,560 --> 01:43:42,840
you're reading it kind of literally I

2458
01:43:42,840 --> 01:43:44,520
think it's important clarification to

2459
01:43:44,520 --> 01:43:48,000
fix and then uh hopefully anticipated

2460
01:43:48,000 --> 01:43:50,400
soonish uh will be the Shepherds review

2461
01:43:50,400 --> 01:43:53,460
here um and I know uh the shepherd you

2462
01:43:53,460 --> 01:43:56,100
know has a lot going on including uh

2463
01:43:56,100 --> 01:43:58,139
covet bout that slows some other things

2464
01:43:58,139 --> 01:44:00,659
down but um no pressure but that that's

2465
01:44:00,659 --> 01:44:01,980
kind of where we're out with hopefully

2466
01:44:01,980 --> 01:44:03,119
soon

2467
01:44:03,119 --> 01:44:05,460
and

2468
01:44:05,460 --> 01:44:07,739
someone recently uh kindly pointed out

2469
01:44:07,739 --> 01:44:11,460
that iatf-16 is not in Prague I was so

2470
01:44:11,460 --> 01:44:13,980
eager to include a picture here

2471
01:44:13,980 --> 01:44:15,480
um and I don't have one of Yokohama and

2472
01:44:15,480 --> 01:44:16,980
I'm going to miss Yokohama that I got

2473
01:44:16,980 --> 01:44:18,960
confused myself but uh looking ahead

2474
01:44:18,960 --> 01:44:20,760
hopefully uh this will be the last time

2475
01:44:20,760 --> 01:44:23,280
seeing a presentation about this I will

2476
01:44:23,280 --> 01:44:24,900
be probably in fog but I won't be in

2477
01:44:24,900 --> 01:44:27,480
Yokohama to talk about it anyway so uh

2478
01:44:27,480 --> 01:44:28,679
yeah

2479
01:44:28,679 --> 01:44:32,340
so what question that there was taka had

2480
01:44:32,340 --> 01:44:34,320
provided some feedback on the list and

2481
01:44:34,320 --> 01:44:36,780
there was some discussion there do you

2482
01:44:36,780 --> 01:44:38,400
know the summary of that discussion

2483
01:44:38,400 --> 01:44:40,320
what's the status there uh the summary

2484
01:44:40,320 --> 01:44:42,239
was some back and forth between him and

2485
01:44:42,239 --> 01:44:45,840
Victoria uh ultimately he sort of came

2486
01:44:45,840 --> 01:44:48,060
to the it would be nice if you said a

2487
01:44:48,060 --> 01:44:49,920
little something like this but it's not

2488
01:44:49,920 --> 01:44:51,179
a big deal

2489
01:44:51,179 --> 01:44:53,159
um and he said he wouldn't push for it

2490
01:44:53,159 --> 01:44:55,199
to be changed which I appreciated and I

2491
01:44:55,199 --> 01:44:57,420
I am personally of the opinion that that

2492
01:44:57,420 --> 01:44:59,580
what he's asking for only

2493
01:44:59,580 --> 01:45:02,040
complicates things more than it confuses

2494
01:45:02,040 --> 01:45:04,159
either way it's it's not

2495
01:45:04,159 --> 01:45:06,360
protocol level it's just clarification

2496
01:45:06,360 --> 01:45:09,000
so um okay he

2497
01:45:09,000 --> 01:45:10,739
I think the the output is nothing's

2498
01:45:10,739 --> 01:45:12,420
going to happen Okay but if you check

2499
01:45:12,420 --> 01:45:13,800
the thread you'll see that that's

2500
01:45:13,800 --> 01:45:16,440
consistent okay I'll take a look

2501
01:45:16,440 --> 01:45:18,179
um anybody else has any comments

2502
01:45:18,179 --> 01:45:20,659
questions

2503
01:45:21,480 --> 01:45:24,360
uh Daryl Miller Microsoft and just one

2504
01:45:24,360 --> 01:45:25,860
call out if you're adding a new

2505
01:45:25,860 --> 01:45:27,920
parameter into the www

2506
01:45:27,920 --> 01:45:30,060
authenticate header

2507
01:45:30,060 --> 01:45:31,860
um I don't know have you looked at the

2508
01:45:31,860 --> 01:45:34,080
structured Fields work

2509
01:45:34,080 --> 01:45:36,300
uh there's an effort to try and

2510
01:45:36,300 --> 01:45:38,219
standardize how structured Fields work

2511
01:45:38,219 --> 01:45:40,020
and there's some work going on in the HP

2512
01:45:40,020 --> 01:45:43,440
working group to retrofit uh existing HP

2513
01:45:43,440 --> 01:45:46,380
headers to use more standardized ways

2514
01:45:46,380 --> 01:45:48,179
and you mentioned about space delimited

2515
01:45:48,179 --> 01:45:50,639
I need to look into it that might be the

2516
01:45:50,639 --> 01:45:52,380
right way of doing it it might not fit

2517
01:45:52,380 --> 01:45:54,659
into the new structured header field

2518
01:45:54,659 --> 01:45:56,040
World

2519
01:45:56,040 --> 01:45:58,760
um is is

2520
01:45:59,000 --> 01:46:00,659
authenticate one of the ones that

2521
01:46:00,659 --> 01:46:03,900
retrofitting it isn't in the spec at the

2522
01:46:03,900 --> 01:46:05,639
moment but I believe it responds to do

2523
01:46:05,639 --> 01:46:06,600
that

2524
01:46:06,600 --> 01:46:08,880
Mark Nottingham would be the one too I

2525
01:46:08,880 --> 01:46:11,159
can take a look at it timeline may or

2526
01:46:11,159 --> 01:46:12,480
may not make sense on actually

2527
01:46:12,480 --> 01:46:15,060
referencing that the space delimited

2528
01:46:15,060 --> 01:46:17,760
thing is actually another layer it's

2529
01:46:17,760 --> 01:46:20,699
within the value itself of a parameter

2530
01:46:20,699 --> 01:46:22,920
of the header and it's defined I'm not

2531
01:46:22,920 --> 01:46:24,719
sure there is an inner list thing

2532
01:46:24,719 --> 01:46:27,060
Institute that is space limited it might

2533
01:46:27,060 --> 01:46:29,159
fit anyway if there's an easy way to

2534
01:46:29,159 --> 01:46:31,139
make it fit we should just try if if

2535
01:46:31,139 --> 01:46:33,119
there is yeah thanks

2536
01:46:33,119 --> 01:46:36,179
okay thanks Daryl

2537
01:46:36,179 --> 01:46:40,080
um somebody in the queue Jem and deep go

2538
01:46:40,080 --> 01:46:42,260
ahead

2539
01:46:46,520 --> 01:46:49,739
forensic Sciences University uh so I was

2540
01:46:49,739 --> 01:46:53,699
just uh wondering like uh if uh we want

2541
01:46:53,699 --> 01:46:57,000
to include uh uh the other uh parameters

2542
01:46:57,000 --> 01:47:00,000
also which are going to the uh protected

2543
01:47:00,000 --> 01:47:02,940
resource server uh like uh client

2544
01:47:02,940 --> 01:47:05,159
authentication parameters like if we are

2545
01:47:05,159 --> 01:47:08,699
also looking uh uh at that way

2546
01:47:08,699 --> 01:47:11,340
yeah or maybe it's out of a scope for

2547
01:47:11,340 --> 01:47:15,060
the present uh uh draft RFC okay I'm

2548
01:47:15,060 --> 01:47:17,520
gonna cut the mic after Jim and DPA go

2549
01:47:17,520 --> 01:47:20,460
ahead Brian

2550
01:47:20,460 --> 01:47:22,380
generally speaking it's it's sort of

2551
01:47:22,380 --> 01:47:24,900
beyond the scope of what we're trying to

2552
01:47:24,900 --> 01:47:26,340
accomplish here

2553
01:47:26,340 --> 01:47:29,280
um it's obviously a lot more to that

2554
01:47:29,280 --> 01:47:32,580
that that's been discussed sort of

2555
01:47:32,580 --> 01:47:35,340
ad nauseam and the thread but that

2556
01:47:35,340 --> 01:47:37,800
for for a number of reasons that stuff

2557
01:47:37,800 --> 01:47:41,400
isn't applicable or either isn't within

2558
01:47:41,400 --> 01:47:42,600
the scope of the drafters and

2559
01:47:42,600 --> 01:47:45,239
technically makes sense in in the

2560
01:47:45,239 --> 01:47:46,500
context of where these things are

2561
01:47:46,500 --> 01:47:49,080
communicated so okay um

2562
01:47:49,080 --> 01:47:50,340
okay

2563
01:47:50,340 --> 01:47:53,820
okay yeah

2564
01:47:54,239 --> 01:47:57,000
uh next steps are

2565
01:47:57,000 --> 01:47:59,699
um just published those six with so

2566
01:47:59,699 --> 01:48:01,860
that's been done and basically awaiting

2567
01:48:01,860 --> 01:48:03,600
the shepherd right up at this point okay

2568
01:48:03,600 --> 01:48:06,900
with no time pressure on that but

2569
01:48:06,900 --> 01:48:07,860
yeah

2570
01:48:07,860 --> 01:48:09,719
seriously but that that is that that's

2571
01:48:09,719 --> 01:48:11,179
where we're right now

2572
01:48:11,179 --> 01:48:14,280
okay awesome thank you Brian appreciate

2573
01:48:14,280 --> 01:48:17,159
it thank you thank you okay

2574
01:48:17,159 --> 01:48:19,560
um I see

2575
01:48:19,560 --> 01:48:24,060
um Ben is on the line there let me pop

2576
01:48:24,060 --> 01:48:27,679
your slides here

2577
01:48:32,159 --> 01:48:35,000
let me see if I can hand you the control

2578
01:48:35,000 --> 01:48:38,219
then hold on

2579
01:48:38,219 --> 01:48:41,480
where are you there

2580
01:48:43,020 --> 01:48:46,380
okay I need to find you first oh here

2581
01:48:46,380 --> 01:48:47,639
oh no

2582
01:48:47,639 --> 01:48:51,500
can't do it oh here from here maybe

2583
01:48:52,080 --> 01:48:55,980
for some reason I can't okay and that's

2584
01:48:55,980 --> 01:49:00,320
fine I'll I'll drive the slides in okay

2585
01:49:00,719 --> 01:49:04,139
so hi everybody this is a new draft

2586
01:49:04,139 --> 01:49:06,719
next slide

2587
01:49:06,719 --> 01:49:08,340
that's a long title but I think the the

2588
01:49:08,340 --> 01:49:10,139
short answer is that this is about

2589
01:49:10,139 --> 01:49:14,179
pop-up authentication uh

2590
01:49:14,179 --> 01:49:15,719
so

2591
01:49:15,719 --> 01:49:17,699
this is what login looks like on the web

2592
01:49:17,699 --> 01:49:19,739
today thanks in part to the great work

2593
01:49:19,739 --> 01:49:22,440
of people in this working group we have

2594
01:49:22,440 --> 01:49:26,580
this single sign-on ecosystem we have a

2595
01:49:26,580 --> 01:49:29,159
bunch of very rich ways to authenticate

2596
01:49:29,159 --> 01:49:31,880
users very securely through

2597
01:49:31,880 --> 01:49:35,400
Yuba keys and pass keys and all sorts of

2598
01:49:35,400 --> 01:49:38,960
great new Innovative stuff next slide

2599
01:49:38,960 --> 01:49:41,580
this is what it looks like if you're not

2600
01:49:41,580 --> 01:49:44,460
uh using the web today if you're trying

2601
01:49:44,460 --> 01:49:47,520
to use HTTP standards outside of the web

2602
01:49:47,520 --> 01:49:48,960
context

2603
01:49:48,960 --> 01:49:51,600
uh so on the left we have a caldav login

2604
01:49:51,600 --> 01:49:54,420
screen on the right we have a proxy

2605
01:49:54,420 --> 01:49:56,520
authentication login screen these are

2606
01:49:56,520 --> 01:49:59,940
the state of the art respectively for uh

2607
01:49:59,940 --> 01:50:01,940
for caldap for proxies and in general

2608
01:50:01,940 --> 01:50:05,100
for any login system that doesn't

2609
01:50:05,100 --> 01:50:07,080
benefit from a web browser

2610
01:50:07,080 --> 01:50:09,300
next slide

2611
01:50:09,300 --> 01:50:12,300
so non-web login is basically stuck in

2612
01:50:12,300 --> 01:50:14,940
1996 these standards have have in my

2613
01:50:14,940 --> 01:50:16,739
view not significantly changed next

2614
01:50:16,739 --> 01:50:19,040
slide

2615
01:50:19,920 --> 01:50:22,500
so uh what about oauth uh I'm here

2616
01:50:22,500 --> 01:50:24,780
because I'm definitely not an expert on

2617
01:50:24,780 --> 01:50:27,540
oauth and I want to get input from this

2618
01:50:27,540 --> 01:50:30,780
group about how to address this problem

2619
01:50:30,780 --> 01:50:33,600
and and bring these systems into the

2620
01:50:33,600 --> 01:50:35,820
modern era but my understanding is that

2621
01:50:35,820 --> 01:50:37,860
oauth generally requires the client to

2622
01:50:37,860 --> 01:50:40,380
know in advance who it's going to be

2623
01:50:40,380 --> 01:50:42,300
talking to

2624
01:50:42,300 --> 01:50:45,239
uh and this is really about clients that

2625
01:50:45,239 --> 01:50:46,920
want to be able to essentially access

2626
01:50:46,920 --> 01:50:52,040
any HTTP resource on any domain

2627
01:50:52,040 --> 01:50:55,020
subject to potentially an authentication

2628
01:50:55,020 --> 01:50:57,300
prompt uh with the only requirement

2629
01:50:57,300 --> 01:51:00,000
being that that the client and this

2630
01:51:00,000 --> 01:51:04,320
origin uh speak the both Implement a

2631
01:51:04,320 --> 01:51:08,179
defined standard next slide

2632
01:51:08,340 --> 01:51:11,340
so here's the user experience that I'm

2633
01:51:11,340 --> 01:51:13,560
kind of imagining here it's it is laid

2634
01:51:13,560 --> 01:51:15,360
out actually this way in the draft

2635
01:51:15,360 --> 01:51:17,940
so you're you're going along your

2636
01:51:17,940 --> 01:51:19,320
business maybe you've just changed a

2637
01:51:19,320 --> 01:51:21,719
configuration setting or or maybe you're

2638
01:51:21,719 --> 01:51:24,060
just going about your business on on

2639
01:51:24,060 --> 01:51:26,480
your device and you get a notification

2640
01:51:26,480 --> 01:51:29,460
that something on your device is

2641
01:51:29,460 --> 01:51:31,739
requesting interactive Authentication

2642
01:51:31,739 --> 01:51:35,400
and so you can open your browser which

2643
01:51:35,400 --> 01:51:37,560
will open to essentially a login page

2644
01:51:37,560 --> 01:51:39,600
you'll go through some sort of probably

2645
01:51:39,600 --> 01:51:41,820
oauth driven single sign-on probably

2646
01:51:41,820 --> 01:51:45,119
server to server oauth and then at some

2647
01:51:45,119 --> 01:51:47,280
point there will be a signal that comes

2648
01:51:47,280 --> 01:51:48,780
back to your browser

2649
01:51:48,780 --> 01:51:51,179
that says authentication has completed

2650
01:51:51,179 --> 01:51:52,800
at that point the browser window will

2651
01:51:52,800 --> 01:51:54,540
close you'll see a second notification

2652
01:51:54,540 --> 01:51:56,219
you're done

2653
01:51:56,219 --> 01:51:58,560
and now you go back to whatever you were

2654
01:51:58,560 --> 01:52:01,800
doing next slide

2655
01:52:01,800 --> 01:52:05,219
so this is the specific protocol that's

2656
01:52:05,219 --> 01:52:07,980
laid out in the draft but this is really

2657
01:52:07,980 --> 01:52:10,320
I think kind of a placeholder I would

2658
01:52:10,320 --> 01:52:12,659
really welcome some more input on how to

2659
01:52:12,659 --> 01:52:14,940
structure this exchange but in this case

2660
01:52:14,940 --> 01:52:16,560
the client says Hey do you support

2661
01:52:16,560 --> 01:52:18,619
caldav in this example

2662
01:52:18,619 --> 01:52:23,219
and the server says who are you uh open

2663
01:52:23,219 --> 01:52:25,679
a browser or you can see there are other

2664
01:52:25,679 --> 01:52:28,320
www authenticate response headers here

2665
01:52:28,320 --> 01:52:31,619
so there could also be other maybe more

2666
01:52:31,619 --> 01:52:34,320
old-fashioned authentication options uh

2667
01:52:34,320 --> 01:52:37,739
presented in the challenge next slide

2668
01:52:37,739 --> 01:52:40,440
so that that www authenticate header had

2669
01:52:40,440 --> 01:52:42,600
a parameter called location equals slash

2670
01:52:42,600 --> 01:52:45,719
login so that tells the client uh where

2671
01:52:45,719 --> 01:52:48,600
this login page is so the client now

2672
01:52:48,600 --> 01:52:50,520
opens a web browser and that web browser

2673
01:52:50,520 --> 01:52:54,300
is instructed to load this page

2674
01:52:54,300 --> 01:52:58,440
and so here we get back again a 401

2675
01:52:58,440 --> 01:53:00,659
response but this time it contains HTML

2676
01:53:00,659 --> 01:53:03,780
telling us the login instructions next

2677
01:53:03,780 --> 01:53:05,400
slide

2678
01:53:05,400 --> 01:53:08,040
another client does something clicks

2679
01:53:08,040 --> 01:53:10,320
buttons enters passwords Taps you but

2680
01:53:10,320 --> 01:53:12,060
Keys navigates maybe between different

2681
01:53:12,060 --> 01:53:14,100
Origins and approves things at some

2682
01:53:14,100 --> 01:53:17,460
point the client comes back and the

2683
01:53:17,460 --> 01:53:21,360
browser fetches this login page again

2684
01:53:21,360 --> 01:53:24,000
um this time it sends that Fetch with a

2685
01:53:24,000 --> 01:53:26,580
cookie that's been set in some uh as

2686
01:53:26,580 --> 01:53:28,860
some part of that flow and now it gets a

2687
01:53:28,860 --> 01:53:31,080
200 response which is the signal that

2688
01:53:31,080 --> 01:53:33,540
means we're done here

2689
01:53:33,540 --> 01:53:37,380
so the browser closes next slide

2690
01:53:37,380 --> 01:53:39,020
and now we're back in the

2691
01:53:39,020 --> 01:53:42,179
non-interactive uh part of this so now

2692
01:53:42,179 --> 01:53:44,280
again the caldav client is trying to

2693
01:53:44,280 --> 01:53:47,760
load this endpoint but it now it copies

2694
01:53:47,760 --> 01:53:51,179
that cookie header out of the successful

2695
01:53:51,179 --> 01:53:53,340
request from the browser into the caldav

2696
01:53:53,340 --> 01:53:56,580
client and now it can actually speak cow

2697
01:53:56,580 --> 01:54:00,440
Dev to that endpoint next slide

2698
01:54:01,679 --> 01:54:06,360
so this is an overview of the proposed

2699
01:54:06,360 --> 01:54:08,659
protocol I want to focus on step five

2700
01:54:08,659 --> 01:54:14,400
where the or step four where the browser

2701
01:54:14,400 --> 01:54:16,139
loads the authentication path and if

2702
01:54:16,139 --> 01:54:17,940
that authentication path ever loads

2703
01:54:17,940 --> 01:54:19,679
successfully while this browser instance

2704
01:54:19,679 --> 01:54:22,800
is operating the client copies all those

2705
01:54:22,800 --> 01:54:25,020
request headers out of the request and

2706
01:54:25,020 --> 01:54:27,800
then kills the browser

2707
01:54:27,800 --> 01:54:31,260
and then those headers are copied into

2708
01:54:31,260 --> 01:54:33,360
any future requests that are made by

2709
01:54:33,360 --> 01:54:34,860
this non-interactive client trying to

2710
01:54:34,860 --> 01:54:37,199
reach that origin

2711
01:54:37,199 --> 01:54:40,219
so next slide

2712
01:54:40,560 --> 01:54:42,780
there are a lot of interesting Corners

2713
01:54:42,780 --> 01:54:44,760
that come up in this again this sort of

2714
01:54:44,760 --> 01:54:47,400
placeholder particular instantiation of

2715
01:54:47,400 --> 01:54:50,820
of this idea like

2716
01:54:50,820 --> 01:54:53,639
we like the draft says cookies and

2717
01:54:53,639 --> 01:54:56,040
authorization headers are both allowed

2718
01:54:56,040 --> 01:54:58,619
um authorization is more natural I think

2719
01:54:58,619 --> 01:55:01,199
in this context but it I in my

2720
01:55:01,199 --> 01:55:03,000
understanding it would force us to use

2721
01:55:03,000 --> 01:55:05,820
JavaScript in this browser context it

2722
01:55:05,820 --> 01:55:06,900
would be nice to be able to support

2723
01:55:06,900 --> 01:55:09,300
non-javascript browsers why not uh

2724
01:55:09,300 --> 01:55:11,580
cookie seems to to allow us to do that

2725
01:55:11,580 --> 01:55:15,540
but then uh my my personal use case here

2726
01:55:15,540 --> 01:55:17,639
is really related to these proxy clients

2727
01:55:17,639 --> 01:55:19,580
so we need to convert authorization

2728
01:55:19,580 --> 01:55:21,840
headers for the request of the browser

2729
01:55:21,840 --> 01:55:23,580
into proxy authorization requests for

2730
01:55:23,580 --> 01:55:25,020
the proxy and that's natural enough but

2731
01:55:25,020 --> 01:55:26,940
what do we do about cookies so the draft

2732
01:55:26,940 --> 01:55:28,739
says find you can't use cookies for that

2733
01:55:28,739 --> 01:55:31,560
but we could we could Define some way to

2734
01:55:31,560 --> 01:55:34,980
copy those cookies to a proxy server

2735
01:55:34,980 --> 01:55:36,980
um there are some interesting ux

2736
01:55:36,980 --> 01:55:39,360
implications about

2737
01:55:39,360 --> 01:55:43,380
um you know your your oauth type token

2738
01:55:43,380 --> 01:55:45,600
expires at some point with some system

2739
01:55:45,600 --> 01:55:47,760
service you want to refresh that we need

2740
01:55:47,760 --> 01:55:50,580
to like we're interrupting the user in

2741
01:55:50,580 --> 01:55:52,380
at some random point in their day to say

2742
01:55:52,380 --> 01:55:55,920
oh please re-authenticate

2743
01:55:56,219 --> 01:55:57,179
um

2744
01:55:57,179 --> 01:55:59,100
so uh but that's enough about this let's

2745
01:55:59,100 --> 01:56:01,520
move on

2746
01:56:02,100 --> 01:56:04,920
so this is a brand new draft it's

2747
01:56:04,920 --> 01:56:08,639
designed to bring all of the great oauth

2748
01:56:08,639 --> 01:56:12,000
driven single sign-on and and two-factor

2749
01:56:12,000 --> 01:56:14,940
login stuff to the the sort of the rest

2750
01:56:14,940 --> 01:56:17,820
of HTTP or the rest of Standards driven

2751
01:56:17,820 --> 01:56:21,300
HTTP it definitely needs more input from

2752
01:56:21,300 --> 01:56:23,699
folks like you

2753
01:56:23,699 --> 01:56:25,199
um I'm especially interested for this

2754
01:56:25,199 --> 01:56:26,219
group

2755
01:56:26,219 --> 01:56:30,239
in what components here could be shared

2756
01:56:30,239 --> 01:56:32,340
more with the oauth ecosystem or even

2757
01:56:32,340 --> 01:56:34,080
you know is there a way to express this

2758
01:56:34,080 --> 01:56:36,239
in you know us

2759
01:56:36,239 --> 01:56:37,619
and

2760
01:56:37,619 --> 01:56:40,199
uh by the way I'll be repeating this

2761
01:56:40,199 --> 01:56:42,000
presentation I believe tomorrow morning

2762
01:56:42,000 --> 01:56:44,940
for the HTTP API working group to get

2763
01:56:44,940 --> 01:56:48,060
their input and I think uh and I'm

2764
01:56:48,060 --> 01:56:49,920
seeking adoption here and it's I think

2765
01:56:49,920 --> 01:56:51,300
it's an interesting question of where

2766
01:56:51,300 --> 01:56:53,639
that adoption would live

2767
01:56:53,639 --> 01:56:57,000
and uh if you want to see more use cases

2768
01:56:57,000 --> 01:56:59,460
I would mention uh the access

2769
01:56:59,460 --> 01:57:02,159
descriptions draft and mask okay that's

2770
01:57:02,159 --> 01:57:04,320
all Aaron

2771
01:57:04,320 --> 01:57:08,179
thanks Ben Aaron

2772
01:57:09,580 --> 01:57:13,500
[Music]

2773
01:57:13,500 --> 01:57:16,860
yeah hi Aaron purkey from OCTA um

2774
01:57:16,860 --> 01:57:20,099
if I were to rephrase this in terms of

2775
01:57:20,099 --> 01:57:22,739
oauth terms and roles that we already

2776
01:57:22,739 --> 01:57:25,500
use it seems like there it's almost

2777
01:57:25,500 --> 01:57:28,080
everything is already there to make this

2778
01:57:28,080 --> 01:57:30,060
work and there's really only one thing

2779
01:57:30,060 --> 01:57:31,440
needed so it sounds like what you're

2780
01:57:31,440 --> 01:57:32,820
trying to do

2781
01:57:32,820 --> 01:57:36,360
is Drive authentication event

2782
01:57:36,360 --> 01:57:39,960
when a resource is requested so we have

2783
01:57:39,960 --> 01:57:41,639
a we have the

2784
01:57:41,639 --> 01:57:44,460
in one of the in I think it's 6750 talks

2785
01:57:44,460 --> 01:57:46,800
about the error response

2786
01:57:46,800 --> 01:57:49,020
when a client makes a request a resource

2787
01:57:49,020 --> 01:57:50,760
server that does not contain a token or

2788
01:57:50,760 --> 01:57:54,300
contains a uh wrong kind of token and

2789
01:57:54,300 --> 01:57:56,699
that's also what the step of auth draft

2790
01:57:56,699 --> 01:57:57,960
is sort of

2791
01:57:57,960 --> 01:58:01,679
getting into as well and um

2792
01:58:01,679 --> 01:58:04,320
what we don't have in that draft or I

2793
01:58:04,320 --> 01:58:05,880
don't think any other ones is the

2794
01:58:05,880 --> 01:58:07,199
concept of

2795
01:58:07,199 --> 01:58:11,159
the resource server driving the location

2796
01:58:11,159 --> 01:58:13,080
of the telling the client where the as

2797
01:58:13,080 --> 01:58:15,119
is and that's kind of what you're asking

2798
01:58:15,119 --> 01:58:16,440
to do of

2799
01:58:16,440 --> 01:58:19,739
a calendar client shows up and says

2800
01:58:19,739 --> 01:58:21,440
I know a resource server I'm talking to

2801
01:58:21,440 --> 01:58:25,020
try to make a request that resource says

2802
01:58:25,020 --> 01:58:27,360
you need to log in here's where to go

2803
01:58:27,360 --> 01:58:28,500
log in where the client doesn't

2804
01:58:28,500 --> 01:58:30,179
necessarily know that before

2805
01:58:30,179 --> 01:58:31,800
and I think you write them most of the

2806
01:58:31,800 --> 01:58:34,199
oauth work is the other way around where

2807
01:58:34,199 --> 01:58:36,780
the client knows the as ahead of time

2808
01:58:36,780 --> 01:58:39,420
but that's the only missing piece

2809
01:58:39,420 --> 01:58:41,099
everything else actually already fits

2810
01:58:41,099 --> 01:58:43,440
into the oauth world so I think there's

2811
01:58:43,440 --> 01:58:44,760
a lot of I don't think you need to

2812
01:58:44,760 --> 01:58:46,860
define a whole lot of new things and I

2813
01:58:46,860 --> 01:58:49,920
think that the only piece needed is

2814
01:58:49,920 --> 01:58:51,300
defining

2815
01:58:51,300 --> 01:58:53,520
the location of the as at the resource

2816
01:58:53,520 --> 01:58:54,360
server

2817
01:58:54,360 --> 01:58:55,619
which would then

2818
01:58:55,619 --> 01:58:57,659
do all the normal low-off steps after

2819
01:58:57,659 --> 01:58:58,560
that

2820
01:58:58,560 --> 01:59:01,800
so normal authorization code flow

2821
01:59:01,800 --> 01:59:03,360
you don't need to Define any new things

2822
01:59:03,360 --> 01:59:04,440
about

2823
01:59:04,440 --> 01:59:07,020
what to do with the extra headers and

2824
01:59:07,020 --> 01:59:09,239
cookies and stuff because all that will

2825
01:59:09,239 --> 01:59:10,860
just sort of piggyback off the existing

2826
01:59:10,860 --> 01:59:13,739
flows

2827
01:59:13,739 --> 01:59:16,260
um but we have just few minutes and we

2828
01:59:16,260 --> 01:59:18,119
have a number of people on the Queue so

2829
01:59:18,119 --> 01:59:20,880
I'm I'm gonna give people a chance to

2830
01:59:20,880 --> 01:59:24,540
just to it give their comments and and

2831
01:59:24,540 --> 01:59:26,639
maybe we can take it after that offline

2832
01:59:26,639 --> 01:59:29,699
okay okay and so

2833
01:59:29,699 --> 01:59:30,599
um

2834
01:59:30,599 --> 01:59:32,699
are you done with your comment yeah

2835
01:59:32,699 --> 01:59:35,099
that's what I wanted to say talk about

2836
01:59:35,099 --> 01:59:37,860
that more and maybe some of us here can

2837
01:59:37,860 --> 01:59:39,060
chat about it too

2838
01:59:39,060 --> 01:59:41,460
okay thanks Adam

2839
01:59:41,460 --> 01:59:45,540
um just one John just hold on a few

2840
01:59:45,540 --> 01:59:49,739
people in the line there Armando

2841
01:59:49,739 --> 01:59:54,119
hello can you hear me yes okay uh just

2842
01:59:54,119 --> 01:59:57,480
one quick comment so uh basically in the

2843
01:59:57,480 --> 01:59:59,280
Privacy past working group we are

2844
01:59:59,280 --> 02:00:01,679
working on one solution very similar to

2845
02:00:01,679 --> 02:00:03,659
what you are proposing which is

2846
02:00:03,659 --> 02:00:08,460
basically just uh increase a new uh uh

2847
02:00:08,460 --> 02:00:11,460
option in the HTTP authentication header

2848
02:00:11,460 --> 02:00:16,139
so you can do this kind of uh

2849
02:00:16,139 --> 02:00:18,900
authorization mechanism so please take a

2850
02:00:18,900 --> 02:00:22,820
look on the Privacy path group thank you

2851
02:00:26,780 --> 02:00:30,139
good David

2852
02:00:31,500 --> 02:00:34,380
I just wanted to point out that uh there

2853
02:00:34,380 --> 02:00:36,239
was an internet draft I believe a while

2854
02:00:36,239 --> 02:00:39,599
back where someone proposed uh might

2855
02:00:39,599 --> 02:00:42,840
have been that Tech Middle to use uh the

2856
02:00:42,840 --> 02:00:45,360
link header to advertise the AES that

2857
02:00:45,360 --> 02:00:49,159
could fill the that 401

2858
02:00:50,460 --> 02:00:55,099
okay thanks David Philip

2859
02:00:55,380 --> 02:00:57,560
foreign

2860
02:01:04,460 --> 02:01:09,060
thing I guess that it depends on who the

2861
02:01:09,060 --> 02:01:10,800
draft expects to drive this

2862
02:01:10,800 --> 02:01:12,599
orchestration whether it's the client

2863
02:01:12,599 --> 02:01:14,580
running inside the JavaScript inside the

2864
02:01:14,580 --> 02:01:15,599
browser

2865
02:01:15,599 --> 02:01:19,739
or whether it should be the user agent

2866
02:01:19,739 --> 02:01:21,060
um

2867
02:01:21,060 --> 02:01:24,480
it the the presentation did not clarify

2868
02:01:24,480 --> 02:01:27,360
that for me and if uh that's the user

2869
02:01:27,360 --> 02:01:29,099
agent

2870
02:01:29,099 --> 02:01:32,340
uh then this is really just limiting to

2871
02:01:32,340 --> 02:01:34,739
web experience and it cannot be extended

2872
02:01:34,739 --> 02:01:37,800
to use well I mean to authenticate clis

2873
02:01:37,800 --> 02:01:39,599
Etc because then there is a Handover

2874
02:01:39,599 --> 02:01:42,540
information from the browser to a CLI

2875
02:01:42,540 --> 02:01:45,060
um that we currently do not have

2876
02:01:45,060 --> 02:01:47,280
yes this is definitely meant to be

2877
02:01:47,280 --> 02:01:49,739
compatible with with a CLI experience

2878
02:01:49,739 --> 02:01:51,780
where you you've you've run some command

2879
02:01:51,780 --> 02:01:54,119
and your tools complies with the

2880
02:01:54,119 --> 02:01:55,980
standard and and pops up a browser

2881
02:01:55,980 --> 02:01:58,139
window which then closes when authentic

2882
02:01:58,139 --> 02:01:59,520
okay so it's complete so you're

2883
02:01:59,520 --> 02:02:01,980
expecting the client inside the browser

2884
02:02:01,980 --> 02:02:05,880
or whatever to orchestrate all of this

2885
02:02:05,880 --> 02:02:08,099
uh that's right this would all be be

2886
02:02:08,099 --> 02:02:11,159
driven from from inside the the web page

2887
02:02:11,159 --> 02:02:13,440
essentially but the the CLI needs to

2888
02:02:13,440 --> 02:02:16,199
have its fingers inside the browser to

2889
02:02:16,199 --> 02:02:18,960
be able to pull out these uh these

2890
02:02:18,960 --> 02:02:20,400
outputs right it needs to be able to

2891
02:02:20,400 --> 02:02:22,500
pull out these these authorization or

2892
02:02:22,500 --> 02:02:25,020
cookie headers for then use essentially

2893
02:02:25,020 --> 02:02:26,820
by a different user agent there's a

2894
02:02:26,820 --> 02:02:30,440
browser user agent then there's this

2895
02:02:30,780 --> 02:02:34,199
we're out of time so let me give John a

2896
02:02:34,199 --> 02:02:36,719
chance to wrap it up here John

2897
02:02:36,719 --> 02:02:38,940
um I think this is a

2898
02:02:38,940 --> 02:02:40,980
interesting idea that needs to be

2899
02:02:40,980 --> 02:02:43,980
explored when we were originally doing

2900
02:02:43,980 --> 02:02:46,800
oauth if memory serves me

2901
02:02:46,800 --> 02:02:50,040
the error from the resource server set

2902
02:02:50,040 --> 02:02:52,199
returned what Scopes were required but

2903
02:02:52,199 --> 02:02:55,460
we explicitly didn't say what the

2904
02:02:55,460 --> 02:02:57,659
authorization server endpoint was

2905
02:02:57,659 --> 02:02:59,280
because there were a number of security

2906
02:02:59,280 --> 02:03:02,060
concerns around

2907
02:03:02,060 --> 02:03:04,760
essentially having the resource server

2908
02:03:04,760 --> 02:03:08,760
being able to do fishing on the user so

2909
02:03:08,760 --> 02:03:10,800
we have to think about what if we're

2910
02:03:10,800 --> 02:03:12,960
going to change the model and yes Nat

2911
02:03:12,960 --> 02:03:16,380
did have a draft around that but

2912
02:03:16,380 --> 02:03:18,599
if we change the order that these things

2913
02:03:18,599 --> 02:03:21,360
are happening in we have to do it deep

2914
02:03:21,360 --> 02:03:23,460
Security review as to you know what

2915
02:03:23,460 --> 02:03:25,080
those implicate if there are any

2916
02:03:25,080 --> 02:03:28,139
unintended consequences of that

2917
02:03:28,139 --> 02:03:30,599
um the other is that

2918
02:03:30,599 --> 02:03:34,500
um you know as the one of the editors of

2919
02:03:34,500 --> 02:03:39,179
um of uh the Fido specifications there

2920
02:03:39,179 --> 02:03:40,800
are a bunch of

2921
02:03:40,800 --> 02:03:44,580
things in browsers that stop

2922
02:03:44,580 --> 02:03:48,000
um uh web views from being able to use

2923
02:03:48,000 --> 02:03:49,800
web authen

2924
02:03:49,800 --> 02:03:52,800
Etc so exactly how you're calling these

2925
02:03:52,800 --> 02:03:54,780
things if you're planning on grabbing

2926
02:03:54,780 --> 02:03:56,820
headers out Etc

2927
02:03:56,820 --> 02:03:59,520
um that may be at odds with the security

2928
02:03:59,520 --> 02:04:02,520
that browsers and and the os's are

2929
02:04:02,520 --> 02:04:05,099
implementing the other thing to that you

2930
02:04:05,099 --> 02:04:08,040
should probably talk to Google about is

2931
02:04:08,040 --> 02:04:11,340
that they're doing a bunch of work on

2932
02:04:11,340 --> 02:04:14,699
um proof of possession for cookies uh to

2933
02:04:14,699 --> 02:04:16,739
prevent cookies from being exfiltrated

2934
02:04:16,739 --> 02:04:19,619
outside outside of the browser so that

2935
02:04:19,619 --> 02:04:22,619
may also be somewhat at odds so there's

2936
02:04:22,619 --> 02:04:23,880
a bunch of things that have to be

2937
02:04:23,880 --> 02:04:25,679
coordinated to figure out whether or not

2938
02:04:25,679 --> 02:04:27,840
you know this can actually be

2939
02:04:27,840 --> 02:04:30,360
practically used end to end but it's

2940
02:04:30,360 --> 02:04:32,699
probably worth thinking about

2941
02:04:32,699 --> 02:04:34,400
thank you John thank you

2942
02:04:34,400 --> 02:04:38,099
Ben just wrap it up now if you have any

2943
02:04:38,099 --> 02:04:40,320
last minute comments because we are way

2944
02:04:40,320 --> 02:04:42,119
past that our time no thanks for all

2945
02:04:42,119 --> 02:04:43,980
that input uh we'll we'll discuss on the

2946
02:04:43,980 --> 02:04:47,280
list awesome thank you Ben and thank you

2947
02:04:47,280 --> 02:04:48,420
everyone

2948
02:04:48,420 --> 02:04:50,520
was great great discussions great

2949
02:04:50,520 --> 02:04:55,560
presentations see you next meeting

2950
02:05:03,900 --> 02:05:06,900
foreign

2951
02:05:36,300 --> 02:05:38,960
okay

