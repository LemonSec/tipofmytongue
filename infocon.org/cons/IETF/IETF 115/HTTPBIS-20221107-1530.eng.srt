1
00:00:05,480 --> 00:00:08,000
okay

2
00:00:08,000 --> 00:00:11,820
it is 3 30.

3
00:00:11,820 --> 00:00:13,980
uh Henry if you could turn your

4
00:00:13,980 --> 00:00:16,260
microphone off until sorry your video

5
00:00:16,260 --> 00:00:18,000
off and and unless you're you're

6
00:00:18,000 --> 00:00:19,859
speaking that'd be appreciated

7
00:00:19,859 --> 00:00:22,199
uh let's go ahead and get started this

8
00:00:22,199 --> 00:00:23,939
is http

9
00:00:23,939 --> 00:00:25,920
uh we have two sessions this week both

10
00:00:25,920 --> 00:00:29,160
of two hours uh we have a relatively

11
00:00:29,160 --> 00:00:30,900
full agenda so we're going to try and

12
00:00:30,900 --> 00:00:33,840
keep it on time if at all possible I'd

13
00:00:33,840 --> 00:00:35,340
like to introduce my floating head coach

14
00:00:35,340 --> 00:00:39,680
Aaron Tommy Polly Tommy Take a Bow

15
00:00:42,000 --> 00:00:42,960
um

16
00:00:42,960 --> 00:00:45,780
so uh first of all first and foremost uh

17
00:00:45,780 --> 00:00:48,000
the note well policy uh you should all

18
00:00:48,000 --> 00:00:49,500
be familiar with this by now but if not

19
00:00:49,500 --> 00:00:51,420
these are the policies under which we

20
00:00:51,420 --> 00:00:53,760
participate in the ITF regarding things

21
00:00:53,760 --> 00:00:56,640
like intellectual property and privacy

22
00:00:56,640 --> 00:00:59,219
and harassment code of conduct copyright

23
00:00:59,219 --> 00:01:01,199
there are many different aspects to it

24
00:01:01,199 --> 00:01:02,219
so if you're not familiar with them

25
00:01:02,219 --> 00:01:04,080
please do familiarize yourself with it

26
00:01:04,080 --> 00:01:06,840
it's important we take it seriously and

27
00:01:06,840 --> 00:01:08,700
you can find it by just searching in

28
00:01:08,700 --> 00:01:10,320
your favorite internet search engine for

29
00:01:10,320 --> 00:01:13,260
I ietf notewell

30
00:01:13,260 --> 00:01:16,020
wait any waste users here you may have

31
00:01:16,020 --> 00:01:16,920
trouble

32
00:01:16,920 --> 00:01:21,020
but otherwise ietf note well

33
00:01:21,659 --> 00:01:23,939
this meeting does have a mask policy I'm

34
00:01:23,939 --> 00:01:25,439
hoping you're aware of that by now too

35
00:01:25,439 --> 00:01:28,080
uh if you're not speaking uh or or

36
00:01:28,080 --> 00:01:29,700
eating or drinking please do wear a mask

37
00:01:29,700 --> 00:01:32,040
and and exercise common sense

38
00:01:32,040 --> 00:01:33,960
and yes I did notice that someone left

39
00:01:33,960 --> 00:01:37,320
their power cord here hi hi Lucas well I

40
00:01:37,320 --> 00:01:39,420
didn't want to name names

41
00:01:39,420 --> 00:01:41,520
so please do uh remember to keep your

42
00:01:41,520 --> 00:01:43,560
mask on and if someone gently reminds

43
00:01:43,560 --> 00:01:45,420
you take it in the spirit which it was

44
00:01:45,420 --> 00:01:47,640
intended

45
00:01:47,640 --> 00:01:49,740
uh can we have a scribe for this session

46
00:01:49,740 --> 00:01:52,920
is anyone willing to take minutes

47
00:01:52,920 --> 00:01:55,520
please

48
00:01:56,640 --> 00:01:58,439
anyone in the room there are some

49
00:01:58,439 --> 00:02:00,240
familiar faces that I could call on but

50
00:02:00,240 --> 00:02:02,280
they have done it many times in the past

51
00:02:02,280 --> 00:02:06,200
so new faces would be much appreciated

52
00:02:07,200 --> 00:02:09,780
thank you very much uh and that's

53
00:02:09,780 --> 00:02:11,520
Jonathan isn't it

54
00:02:11,520 --> 00:02:12,959
I don't have my glasses on but I know

55
00:02:12,959 --> 00:02:15,060
it's Jonathan if you could uh um just

56
00:02:15,060 --> 00:02:17,160
take notes in the um

57
00:02:17,160 --> 00:02:18,720
what do we call them now I think it's a

58
00:02:18,720 --> 00:02:20,760
hedge dock it should be linked from the

59
00:02:20,760 --> 00:02:23,120
top of the agenda yeah

60
00:02:23,120 --> 00:02:25,980
and I I already filled out the agenda

61
00:02:25,980 --> 00:02:27,239
there so you should just be able to oh

62
00:02:27,239 --> 00:02:28,260
thank you

63
00:02:28,260 --> 00:02:31,020
thank you um and and if folks could help

64
00:02:31,020 --> 00:02:32,400
Jonathan out that would be much

65
00:02:32,400 --> 00:02:34,500
appreciated so that it's not falling

66
00:02:34,500 --> 00:02:37,140
just on his shoulders

67
00:02:37,140 --> 00:02:39,959
so the agenda for today

68
00:02:39,959 --> 00:02:41,459
yes

69
00:02:41,459 --> 00:02:43,260
I learned about Dynamic backgrounds in

70
00:02:43,260 --> 00:02:45,980
keynote this week

71
00:02:52,560 --> 00:02:53,819
so

72
00:02:53,819 --> 00:02:57,480
excuse me today we've got signatures

73
00:02:57,480 --> 00:02:59,340
alternative Services where we have a

74
00:02:59,340 --> 00:03:01,980
reasonably large amount of time reserved

75
00:03:01,980 --> 00:03:05,940
origin H3 a brief update cookies and

76
00:03:05,940 --> 00:03:08,459
then client certs now we've we've had a

77
00:03:08,459 --> 00:03:10,440
request to rearrange so that partition

78
00:03:10,440 --> 00:03:11,879
cookies can be after the cookies

79
00:03:11,879 --> 00:03:14,220
discussion just for to keep us on on

80
00:03:14,220 --> 00:03:16,800
topic there if no one's uh having

81
00:03:16,800 --> 00:03:19,260
trouble with that we'll we'll do that so

82
00:03:19,260 --> 00:03:20,519
we'll do cookies then partition cookies

83
00:03:20,519 --> 00:03:22,500
then go back to concerts and then

84
00:03:22,500 --> 00:03:24,300
finally we'll end up with an update from

85
00:03:24,300 --> 00:03:26,580
our friends over and the enthusiasts

86
00:03:26,580 --> 00:03:28,980
over in The Mask working group

87
00:03:28,980 --> 00:03:31,319
they are very enthusiastic if you can I

88
00:03:31,319 --> 00:03:32,400
don't think you can see that on camera

89
00:03:32,400 --> 00:03:35,159
but there's already enthusiasm

90
00:03:35,159 --> 00:03:37,200
uh and then on Friday we'll go over

91
00:03:37,200 --> 00:03:39,000
there Jennifer that uh then but we have

92
00:03:39,000 --> 00:03:40,799
a similar kind of lineup

93
00:03:40,799 --> 00:03:43,140
so like I said very packed any agenda

94
00:03:43,140 --> 00:03:45,480
bashing beyond what we already heard

95
00:03:45,480 --> 00:03:48,239
okay let's go ahead and get started then

96
00:03:48,239 --> 00:03:52,620
uh with the signatures discussion

97
00:03:52,680 --> 00:03:54,000
and I'm going to see how far I can take

98
00:03:54,000 --> 00:03:57,500
this just projecting my entire screen

99
00:03:58,560 --> 00:04:01,280
take it away

100
00:04:03,500 --> 00:04:06,060
all right hi everybody I'm Justin richer

101
00:04:06,060 --> 00:04:07,440
this is going to be a short presentation

102
00:04:07,440 --> 00:04:10,080
next slide please on uh update on HTTP

103
00:04:10,080 --> 00:04:12,239
message signatures uh we've gone through

104
00:04:12,239 --> 00:04:14,040
a couple of revisions of editorial

105
00:04:14,040 --> 00:04:16,798
updates added more examples we added

106
00:04:16,798 --> 00:04:18,540
something called the tag parameter which

107
00:04:18,540 --> 00:04:20,220
was very briefly called the context

108
00:04:20,220 --> 00:04:21,779
parameter until we got some feedback

109
00:04:21,779 --> 00:04:24,419
that that was a dumb name and

110
00:04:24,419 --> 00:04:26,280
um so there's the tag parameter in there

111
00:04:26,280 --> 00:04:28,139
now it's optional don't need to get into

112
00:04:28,139 --> 00:04:30,060
it and we have gone through a one month

113
00:04:30,060 --> 00:04:32,699
long working group last call after which

114
00:04:32,699 --> 00:04:34,800
a lot of comments came in about the

115
00:04:34,800 --> 00:04:36,780
document so thank you for those that uh

116
00:04:36,780 --> 00:04:39,000
that have done that so far

117
00:04:39,000 --> 00:04:41,400
um right now there are only a couple of

118
00:04:41,400 --> 00:04:44,280
uh small things going in uh

119
00:04:44,280 --> 00:04:46,440
so first Lucas needs to apparently get

120
00:04:46,440 --> 00:04:50,280
me an update on uh the digest example in

121
00:04:50,280 --> 00:04:51,419
the draft

122
00:04:51,419 --> 00:04:53,100
I think

123
00:04:53,100 --> 00:04:54,479
thank you

124
00:04:54,479 --> 00:04:56,639
I guess apparently it's wrong I'm not

125
00:04:56,639 --> 00:04:57,960
sure how it's wrong but if you could

126
00:04:57,960 --> 00:05:00,479
make it not wrong that'd be awesome

127
00:05:00,479 --> 00:05:02,040
um and we can touch base in the hallway

128
00:05:02,040 --> 00:05:04,500
or something if that's easy to do

129
00:05:04,500 --> 00:05:06,300
um next slide though

130
00:05:06,300 --> 00:05:10,199
um but uh there is an open question

131
00:05:10,199 --> 00:05:13,440
about what do we do with trailers

132
00:05:13,440 --> 00:05:16,560
um Can the fields that we've defined can

133
00:05:16,560 --> 00:05:17,940
they be trailers currently they're

134
00:05:17,940 --> 00:05:20,759
allowed but uh does that do we need to

135
00:05:20,759 --> 00:05:23,039
be more specific about what that means

136
00:05:23,039 --> 00:05:24,840
when they're trailers

137
00:05:24,840 --> 00:05:27,479
um and can we sign trailers

138
00:05:27,479 --> 00:05:30,300
um and and if we do so uh there's a

139
00:05:30,300 --> 00:05:31,620
couple of things that we could do right

140
00:05:31,620 --> 00:05:33,240
now everything is just sort of defined

141
00:05:33,240 --> 00:05:34,740
as fields and we kind of mash them all

142
00:05:34,740 --> 00:05:37,080
into the same namespace which is what I

143
00:05:37,080 --> 00:05:38,639
thought we were allowed to do but

144
00:05:38,639 --> 00:05:41,460
somebody pointed at a line in HTTP

145
00:05:41,460 --> 00:05:43,139
semantics and I'm getting some head

146
00:05:43,139 --> 00:05:45,240
shakes in the room so this might be a

147
00:05:45,240 --> 00:05:48,360
very short discussion next slide please

148
00:05:48,360 --> 00:05:49,080
um

149
00:05:49,080 --> 00:05:52,259
so uh so obviously uh if we have a

150
00:05:52,259 --> 00:05:53,940
hypothetical field that can exist as

151
00:05:53,940 --> 00:05:56,100
both a header and a trailer do we both

152
00:05:56,100 --> 00:05:57,780
call these both food next slide because

153
00:05:57,780 --> 00:06:00,300
the naive thing to do uh would be to

154
00:06:00,300 --> 00:06:02,280
just cram them together to look like

155
00:06:02,280 --> 00:06:03,780
this that's what the spec says to do

156
00:06:03,780 --> 00:06:05,220
right now I'm getting a lot of head

157
00:06:05,220 --> 00:06:07,440
shakes uh this is why I tagged you guys

158
00:06:07,440 --> 00:06:09,000
on the GitHub issue so I wouldn't have

159
00:06:09,000 --> 00:06:10,320
to have these slides but I'm glad we're

160
00:06:10,320 --> 00:06:12,660
here so next slide uh the alternative

161
00:06:12,660 --> 00:06:15,240
proposal uh is to just explicitly call

162
00:06:15,240 --> 00:06:16,979
something out as a trailer as a data

163
00:06:16,979 --> 00:06:18,120
source

164
00:06:18,120 --> 00:06:21,780
um using a Boolean flag that tells this

165
00:06:21,780 --> 00:06:23,759
uh that allows the signer to signal and

166
00:06:23,759 --> 00:06:26,580
the verifier to know where to Source the

167
00:06:26,580 --> 00:06:28,020
information and then otherwise we just

168
00:06:28,020 --> 00:06:30,060
treat it like any other any other field

169
00:06:30,060 --> 00:06:33,060
uh next slide we actually have precedent

170
00:06:33,060 --> 00:06:35,940
for this with the request parameter uh

171
00:06:35,940 --> 00:06:37,440
that's already in there when you're

172
00:06:37,440 --> 00:06:39,180
signing a response you can get the

173
00:06:39,180 --> 00:06:41,759
related request information and Pull It

174
00:06:41,759 --> 00:06:44,819
in there and uh so I think I already

175
00:06:44,819 --> 00:06:48,060
have the answer but uh uh let's let's go

176
00:06:48,060 --> 00:06:49,020
to the key I'll interject and then

177
00:06:49,020 --> 00:06:51,300
Martin might have something to say

178
00:06:51,300 --> 00:06:53,940
um so in in HTTP uh the most recent

179
00:06:53,940 --> 00:06:56,699
series of updates we recognize that

180
00:06:56,699 --> 00:06:58,560
trailers had some really fundamental

181
00:06:58,560 --> 00:07:00,000
interoperability and deployability

182
00:07:00,000 --> 00:07:02,819
issues and so we defined them as a

183
00:07:02,819 --> 00:07:05,400
separate namespace from headers so they

184
00:07:05,400 --> 00:07:07,319
are distinct you cannot just naively

185
00:07:07,319 --> 00:07:09,780
combine them unless the definition of

186
00:07:09,780 --> 00:07:12,539
the header field or sorry the field says

187
00:07:12,539 --> 00:07:15,180
yes you may do that oh gosh and so we

188
00:07:15,180 --> 00:07:17,460
flipped that so so your approach uh the

189
00:07:17,460 --> 00:07:18,780
approach that you talk about here we're

190
00:07:18,780 --> 00:07:21,300
using TR might be workable the only

191
00:07:21,300 --> 00:07:22,860
thing that I would add to that is you

192
00:07:22,860 --> 00:07:25,020
have to realize that it is completely

193
00:07:25,020 --> 00:07:27,599
legal to drop trailers on the floor both

194
00:07:27,599 --> 00:07:29,039
you know intermediaries and by

195
00:07:29,039 --> 00:07:31,440
recipients they can just disappear and

196
00:07:31,440 --> 00:07:32,940
so you need to account for that if you

197
00:07:32,940 --> 00:07:36,240
want it to be robust yeah we definitely

198
00:07:36,240 --> 00:07:37,620
um need additional implementation

199
00:07:37,620 --> 00:07:39,900
considerations for trailers uh in that

200
00:07:39,900 --> 00:07:41,639
case I think there's already some text

201
00:07:41,639 --> 00:07:45,180
in there but it needs to be more robust

202
00:07:45,180 --> 00:07:47,099
um for sure I mean you might even

203
00:07:47,099 --> 00:07:48,720
consider if it appears it should look

204
00:07:48,720 --> 00:07:51,360
like this is kind of semantic

205
00:07:51,360 --> 00:07:53,699
Martin Thompson goodness you wouldn't

206
00:07:53,699 --> 00:07:55,620
want to be short

207
00:07:55,620 --> 00:07:57,240
um Martin Thompson

208
00:07:57,240 --> 00:08:01,020
presumably you can add both TR and Rec

209
00:08:01,020 --> 00:08:03,720
to the same field name interface that

210
00:08:03,720 --> 00:08:09,180
it's a trailer on a request this can you

211
00:08:09,180 --> 00:08:10,199
do that

212
00:08:10,199 --> 00:08:12,800
yes

213
00:08:13,560 --> 00:08:16,560
right so that's if uh I want to ask you

214
00:08:16,560 --> 00:08:18,360
two but if you go back to like several

215
00:08:18,360 --> 00:08:20,819
slides my final question on trailers is

216
00:08:20,819 --> 00:08:23,280
are they even real because I actually

217
00:08:23,280 --> 00:08:25,080
found that in some of the libraries I

218
00:08:25,080 --> 00:08:27,479
was using I can't get to trailers oh

219
00:08:27,479 --> 00:08:29,940
yeah this is a common complaint uh so

220
00:08:29,940 --> 00:08:32,279
they are real uh

221
00:08:32,279 --> 00:08:34,620
they're probably not a great thing to be

222
00:08:34,620 --> 00:08:35,580
signing

223
00:08:35,580 --> 00:08:38,039
uh for the reasons that Mark stated but

224
00:08:38,039 --> 00:08:41,159
yeah and it sounds like you're trying to

225
00:08:41,159 --> 00:08:44,339
get everything so yeah it seems to work

226
00:08:44,339 --> 00:08:46,860
yeah I I can't see a compelling reason

227
00:08:46,860 --> 00:08:49,560
to disallow it so I would rather have it

228
00:08:49,560 --> 00:08:52,019
be very explicit like if you're doing it

229
00:08:52,019 --> 00:08:53,279
this is what it is and these are the

230
00:08:53,279 --> 00:08:55,860
problems you're going to run into

231
00:08:55,860 --> 00:08:57,779
this is a great way to make stuff break

232
00:08:57,779 --> 00:09:01,200
if you sign these things but uh

233
00:09:01,200 --> 00:09:04,080
that's what people yeah want sometimes I

234
00:09:04,080 --> 00:09:06,480
guess yeah the observation I'd make is

235
00:09:06,480 --> 00:09:08,820
is that the the people who do use

236
00:09:08,820 --> 00:09:11,220
trailers tend to really like them and

237
00:09:11,220 --> 00:09:14,459
they tend to do weird things and so it

238
00:09:14,459 --> 00:09:15,839
wouldn't be out of that question for

239
00:09:15,839 --> 00:09:17,160
them to want to do a weird thing with

240
00:09:17,160 --> 00:09:19,140
signing them right exactly and this is

241
00:09:19,140 --> 00:09:21,180
this is definitely off in in corner

242
00:09:21,180 --> 00:09:23,339
space somewhere but um we wanted to make

243
00:09:23,339 --> 00:09:25,440
sure that it was covered so anyway thank

244
00:09:25,440 --> 00:09:27,779
you I will put in a PR to to add the TR

245
00:09:27,779 --> 00:09:31,019
flag uh with the definition for that and

246
00:09:31,019 --> 00:09:33,360
um and toss that around but

247
00:09:33,360 --> 00:09:35,399
um yeah apart from uh tweaking a couple

248
00:09:35,399 --> 00:09:37,080
of examples here and there the the

249
00:09:37,080 --> 00:09:38,940
working group last call feedback so far

250
00:09:38,940 --> 00:09:41,279
has been pretty positive

251
00:09:41,279 --> 00:09:43,080
um and I've also been discovering a

252
00:09:43,080 --> 00:09:45,060
handful of more uh implementations out

253
00:09:45,060 --> 00:09:47,880
there in the wild uh which next slide

254
00:09:47,880 --> 00:09:49,560
um I'm going to be talking about that a

255
00:09:49,560 --> 00:09:52,920
little bit at the SAG on Friday morning

256
00:09:52,920 --> 00:09:55,560
this week uh where I'm basically going

257
00:09:55,560 --> 00:09:57,779
to uh

258
00:09:57,779 --> 00:10:00,360
be presenting what the draft is and how

259
00:10:00,360 --> 00:10:02,459
it works and very very briefly to The

260
00:10:02,459 --> 00:10:04,140
Wider security community and then tell

261
00:10:04,140 --> 00:10:06,060
them to come at it with pitchforks and

262
00:10:06,060 --> 00:10:07,740
pickaxes and whatever else they can get

263
00:10:07,740 --> 00:10:10,860
on hand and basically help us figure out

264
00:10:10,860 --> 00:10:14,459
like did we leave security holes in here

265
00:10:14,459 --> 00:10:16,440
that we don't know about are there weird

266
00:10:16,440 --> 00:10:18,420
Oracle attacks or gotchas or other

267
00:10:18,420 --> 00:10:22,019
things that uh that are hiding in this

268
00:10:22,019 --> 00:10:23,700
space

269
00:10:23,700 --> 00:10:26,100
um so it's going to be exciting time

270
00:10:26,100 --> 00:10:27,720
after that I'm sure

271
00:10:27,720 --> 00:10:29,940
um but uh oh right the second bullet

272
00:10:29,940 --> 00:10:32,399
which I'm pointing over here now

273
00:10:32,399 --> 00:10:34,620
um the second bullet is that if you have

274
00:10:34,620 --> 00:10:36,420
an implementation or you know of an

275
00:10:36,420 --> 00:10:39,420
implementation of the HTTP working group

276
00:10:39,420 --> 00:10:41,880
draft not the Cabbage draft

277
00:10:41,880 --> 00:10:45,800
um I'm going to be putting up a tab on

278
00:10:45,800 --> 00:10:47,940
httpsig.org our sort of demo site

279
00:10:47,940 --> 00:10:51,120
playground space to start listing these

280
00:10:51,120 --> 00:10:52,920
implementations because I've had a lot

281
00:10:52,920 --> 00:10:55,740
of people coming at me uh lately asking

282
00:10:55,740 --> 00:10:58,680
for that list so I'm gonna put it up and

283
00:10:58,680 --> 00:11:01,260
then just have a link to like make a

284
00:11:01,260 --> 00:11:02,820
GitHub pull request if you want to add

285
00:11:02,820 --> 00:11:04,140
your own

286
00:11:04,140 --> 00:11:06,060
um but you know get in touch with me I'm

287
00:11:06,060 --> 00:11:07,980
I'm seeing more and more out there and I

288
00:11:07,980 --> 00:11:10,440
think that's all I had great

289
00:11:10,440 --> 00:11:14,120
any questions feedback

290
00:11:14,160 --> 00:11:16,200
okay thank you Justin all right thank

291
00:11:16,200 --> 00:11:17,820
you

292
00:11:17,820 --> 00:11:20,519
and if folks are able to uh attend sag

293
00:11:20,519 --> 00:11:23,160
uh it conflicts with us on Friday but if

294
00:11:23,160 --> 00:11:25,320
you happen to be there uh that's a good

295
00:11:25,320 --> 00:11:27,120
conversation to watch because there's a

296
00:11:27,120 --> 00:11:28,380
an open question about what the

297
00:11:28,380 --> 00:11:30,240
appropriate level of review is for this

298
00:11:30,240 --> 00:11:33,920
kind of really pivotal spec

299
00:11:38,279 --> 00:11:41,160
ific great and and if you could do us

300
00:11:41,160 --> 00:11:43,019
the favor of maybe reporting back in on

301
00:11:43,019 --> 00:11:44,279
the email list or something that'd be

302
00:11:44,279 --> 00:11:45,480
great

303
00:11:45,480 --> 00:11:49,640
uh next up alternative services

304
00:11:49,800 --> 00:11:52,339
Mike

305
00:12:04,019 --> 00:12:05,820
I'll skip over the joke that inspired

306
00:12:05,820 --> 00:12:07,860
the picture there but uh

307
00:12:07,860 --> 00:12:10,459
flood

308
00:12:11,700 --> 00:12:14,940
so we have all this uh nice complicated

309
00:12:14,940 --> 00:12:18,000
infrastructure of how we handle the

310
00:12:18,000 --> 00:12:20,100
user's request and where it flows

311
00:12:20,100 --> 00:12:21,240
through

312
00:12:21,240 --> 00:12:23,640
okay

313
00:12:23,640 --> 00:12:26,700
I don't know where that comes from

314
00:12:26,700 --> 00:12:29,220
all right

315
00:12:29,220 --> 00:12:32,720
um but slide

316
00:12:32,820 --> 00:12:34,500
what we're trying to handle is when the

317
00:12:34,500 --> 00:12:37,320
user accidentally winds up over there

318
00:12:37,320 --> 00:12:40,200
where we'd really like to get them on

319
00:12:40,200 --> 00:12:41,640
the red path that we had planned for

320
00:12:41,640 --> 00:12:43,200
them and we want to redirect them a

321
00:12:43,200 --> 00:12:46,820
little bit so slide

322
00:12:47,579 --> 00:12:49,380
there are a couple cases where that

323
00:12:49,380 --> 00:12:51,480
happens that we'd like to make sure that

324
00:12:51,480 --> 00:12:54,540
we handle one of the most common ones is

325
00:12:54,540 --> 00:12:57,300
when the DNS resolver is not near to the

326
00:12:57,300 --> 00:12:58,260
client

327
00:12:58,260 --> 00:13:01,019
and for privacy reasons or otherwise

328
00:13:01,019 --> 00:13:03,480
does not pass along the client Subnet in

329
00:13:03,480 --> 00:13:05,459
edns0

330
00:13:05,459 --> 00:13:07,860
there's also for those cdns that use

331
00:13:07,860 --> 00:13:10,440
anycast anycast can wind up in the wrong

332
00:13:10,440 --> 00:13:12,420
spot it happens there's a lot of work

333
00:13:12,420 --> 00:13:13,800
that goes on to make sure that doesn't

334
00:13:13,800 --> 00:13:16,139
happen but it still does

335
00:13:16,139 --> 00:13:18,480
and in some cases we have endpoints that

336
00:13:18,480 --> 00:13:21,060
can offer you better service based on

337
00:13:21,060 --> 00:13:23,040
where you are or who you are that we

338
00:13:23,040 --> 00:13:24,420
didn't know when you did the DNS

339
00:13:24,420 --> 00:13:26,360
resolution so

340
00:13:26,360 --> 00:13:29,100
we might like to be able to point to to

341
00:13:29,100 --> 00:13:31,079
some endpoint that we control that

342
00:13:31,079 --> 00:13:33,180
special that would give you faster

343
00:13:33,180 --> 00:13:34,560
service

344
00:13:34,560 --> 00:13:36,540
and the most common use of alt service

345
00:13:36,540 --> 00:13:38,779
right now is for protocol availability

346
00:13:38,779 --> 00:13:42,480
so you spoke to us over H2 we'd like to

347
00:13:42,480 --> 00:13:44,100
tell you that we also have our H3

348
00:13:44,100 --> 00:13:45,180
endpoint

349
00:13:45,180 --> 00:13:47,700
or you spoke to us over each one and

350
00:13:47,700 --> 00:13:49,019
we'd like to tell you that H2 is a

351
00:13:49,019 --> 00:13:50,820
different port hypothetically although

352
00:13:50,820 --> 00:13:52,260
that mostly doesn't happen in the real

353
00:13:52,260 --> 00:13:54,380
world

354
00:13:54,600 --> 00:13:56,459
we've got Julian and kids join it do you

355
00:13:56,459 --> 00:13:57,959
have a question of clarification or can

356
00:13:57,959 --> 00:14:00,619
it wait to the end

357
00:14:05,459 --> 00:14:08,639
uh I wanted to mention that apparently

358
00:14:08,639 --> 00:14:11,459
the chat doesn't work or no it actually

359
00:14:11,459 --> 00:14:14,639
works so I had actually questions for

360
00:14:14,639 --> 00:14:16,200
Justin early on

361
00:14:16,200 --> 00:14:21,260
but um the messages didn't come through

362
00:14:22,019 --> 00:14:24,720
so apparently

363
00:14:24,720 --> 00:14:27,600
questions for for Justin so so the news

364
00:14:27,600 --> 00:14:30,540
is zulub is down uh from for most of

365
00:14:30,540 --> 00:14:33,959
things so all the chat is busted ah and

366
00:14:33,959 --> 00:14:36,360
so Julian's got some sort of low

367
00:14:36,360 --> 00:14:38,339
priority questions that he can't get

368
00:14:38,339 --> 00:14:39,480
answered

369
00:14:39,480 --> 00:14:42,540
ah there's an iits but it seems to be up

370
00:14:42,540 --> 00:14:43,440
now

371
00:14:43,440 --> 00:14:47,399
oh okay it's back again so okay sorry

372
00:14:47,399 --> 00:14:49,860
so and so perhaps that's a request for

373
00:14:49,860 --> 00:14:51,480
you to go into zulup and field some

374
00:14:51,480 --> 00:14:53,720
questions

375
00:15:02,399 --> 00:15:06,000
all right so we at this point have two

376
00:15:06,000 --> 00:15:08,519
main ways to redirect the user we can

377
00:15:08,519 --> 00:15:10,320
either do it before the request happens

378
00:15:10,320 --> 00:15:11,940
using DNS

379
00:15:11,940 --> 00:15:13,860
or we can do it after the request

380
00:15:13,860 --> 00:15:16,620
happens using alt service

381
00:15:16,620 --> 00:15:18,480
and

382
00:15:18,480 --> 00:15:22,740
those are both great options slide

383
00:15:22,740 --> 00:15:25,139
Trouble Comes when we have to combine

384
00:15:25,139 --> 00:15:26,060
them

385
00:15:26,060 --> 00:15:29,940
right now what the service B spec says

386
00:15:29,940 --> 00:15:32,220
is that if you implement alt service and

387
00:15:32,220 --> 00:15:33,720
https

388
00:15:33,720 --> 00:15:36,180
you take all the host names you found in

389
00:15:36,180 --> 00:15:39,540
alt service look up https records for

390
00:15:39,540 --> 00:15:42,060
all of those then filter down to

391
00:15:42,060 --> 00:15:43,620
everything that's consistent with both

392
00:15:43,620 --> 00:15:45,959
the https records and the alt service

393
00:15:45,959 --> 00:15:47,160
record

394
00:15:47,160 --> 00:15:48,899
and then attempt to connect to

395
00:15:48,899 --> 00:15:51,959
whatever's left from that combination

396
00:15:51,959 --> 00:15:54,980
which produces some confusing results

397
00:15:54,980 --> 00:15:58,500
notably there's only one resolution here

398
00:15:58,500 --> 00:16:01,800
that is even in the original Origins

399
00:16:01,800 --> 00:16:04,139
domain

400
00:16:04,139 --> 00:16:05,100
yeah

401
00:16:05,100 --> 00:16:07,620
you can set this up but it gets a little

402
00:16:07,620 --> 00:16:10,260
confusing and we're trying to Define

403
00:16:10,260 --> 00:16:13,860
a better coexistent story moving forward

404
00:16:13,860 --> 00:16:18,019
and so the simpler version slide

405
00:16:18,300 --> 00:16:19,940
And Delay

406
00:16:19,940 --> 00:16:23,220
oh okay so the trouble that we have

407
00:16:23,220 --> 00:16:27,560
other than just using them together is

408
00:16:27,560 --> 00:16:30,120
what do we do when we get both sets of

409
00:16:30,120 --> 00:16:31,079
information

410
00:16:31,079 --> 00:16:33,899
because the old service is potentially

411
00:16:33,899 --> 00:16:34,800
old

412
00:16:34,800 --> 00:16:37,500
so how do we make sure it's still valid

413
00:16:37,500 --> 00:16:40,019
but it was received over a TLS

414
00:16:40,019 --> 00:16:41,699
connection directly from the origin

415
00:16:41,699 --> 00:16:44,880
whereas DNS comes through other servers

416
00:16:44,880 --> 00:16:48,300
along the way possibly unencrypted

417
00:16:48,300 --> 00:16:50,160
how much do we trust when they don't say

418
00:16:50,160 --> 00:16:51,839
exactly the same thing

419
00:16:51,839 --> 00:16:54,120
so we want a way that lets us make sure

420
00:16:54,120 --> 00:16:56,339
things are fresh before we use it one of

421
00:16:56,339 --> 00:16:58,560
the concerns that we've heard is an ALT

422
00:16:58,560 --> 00:17:00,779
service that says you can come talk to

423
00:17:00,779 --> 00:17:02,279
me over H3

424
00:17:02,279 --> 00:17:04,380
but when you resolve the hostname you

425
00:17:04,380 --> 00:17:06,119
get pointed to a different CDN that

426
00:17:06,119 --> 00:17:08,040
doesn't support H3 and your connect

427
00:17:08,040 --> 00:17:11,699
fails in your timeout which is not great

428
00:17:11,699 --> 00:17:14,480
big slide

429
00:17:15,660 --> 00:17:18,959
so the draft that's been submitted

430
00:17:18,959 --> 00:17:21,839
um just before the deadline was to

431
00:17:21,839 --> 00:17:23,880
replace it with

432
00:17:23,880 --> 00:17:25,740
very close to the straw man that we had

433
00:17:25,740 --> 00:17:28,740
talked about last iatf which is this alt

434
00:17:28,740 --> 00:17:30,059
service B

435
00:17:30,059 --> 00:17:32,340
which provides you a hostname that you

436
00:17:32,340 --> 00:17:37,100
should go resolve slide for semantics

437
00:17:38,880 --> 00:17:41,940
slide or okay

438
00:17:41,940 --> 00:17:44,580
it's just lag

439
00:17:44,580 --> 00:17:46,919
so basically right now

440
00:17:46,919 --> 00:17:49,620
the first step of it is ignore any

441
00:17:49,620 --> 00:17:51,720
Legacy alt service that's there

442
00:17:51,720 --> 00:17:54,120
so that helps avoid any of the

443
00:17:54,120 --> 00:17:56,820
collisions that we might care about

444
00:17:56,820 --> 00:17:59,220
just do an https lookup for the hostname

445
00:17:59,220 --> 00:18:01,860
do all the service B required connection

446
00:18:01,860 --> 00:18:04,740
stuff that's in the https spec

447
00:18:04,740 --> 00:18:06,780
and use that connection instead of this

448
00:18:06,780 --> 00:18:08,700
one so we're trying to move you over to

449
00:18:08,700 --> 00:18:10,799
a different endpoint now

450
00:18:10,799 --> 00:18:13,620
and then in the future remember what

451
00:18:13,620 --> 00:18:15,840
endpoint you wound up on and give that

452
00:18:15,840 --> 00:18:17,580
some preference

453
00:18:17,580 --> 00:18:20,160
when you do future https resolutions

454
00:18:20,160 --> 00:18:22,559
connecting to this origin if you don't

455
00:18:22,559 --> 00:18:24,900
see that endpoint oh well you just go on

456
00:18:24,900 --> 00:18:26,700
with what DNS says

457
00:18:26,700 --> 00:18:29,280
and you forget it

458
00:18:29,280 --> 00:18:32,120
the next slide

459
00:18:35,039 --> 00:18:37,559
and this does leave us in a little bit

460
00:18:37,559 --> 00:18:40,919
of a situation around stickiness which

461
00:18:40,919 --> 00:18:43,440
is that if you're not remembering

462
00:18:43,440 --> 00:18:46,799
uh or if you don't have that endpoint in

463
00:18:46,799 --> 00:18:49,200
the DNS all the time

464
00:18:49,200 --> 00:18:51,600
then you're going to go to origin get

465
00:18:51,600 --> 00:18:53,580
redirected without service the next time

466
00:18:53,580 --> 00:18:55,320
around you go back to the origin and

467
00:18:55,320 --> 00:18:57,240
it'll tell you to go go over to the

468
00:18:57,240 --> 00:18:58,559
alternative again

469
00:18:58,559 --> 00:19:00,740
so you might wind up flip-flopping

470
00:19:00,740 --> 00:19:03,179
unless you put all of your possible

471
00:19:03,179 --> 00:19:05,880
endpoints in the DNS some providers

472
00:19:05,880 --> 00:19:07,140
don't want to do that because they don't

473
00:19:07,140 --> 00:19:09,059
want to enumerate all possible endpoints

474
00:19:09,059 --> 00:19:10,919
in the DNS

475
00:19:10,919 --> 00:19:13,620
but if you remember it too long then you

476
00:19:13,620 --> 00:19:16,520
override the ability of a site to do

477
00:19:16,520 --> 00:19:19,020
multi-cdn or otherwise change where

478
00:19:19,020 --> 00:19:20,880
they're pointing you so this is a

479
00:19:20,880 --> 00:19:21,900
trade-off that we're going to have to

480
00:19:21,900 --> 00:19:22,919
make

481
00:19:22,919 --> 00:19:25,380
now we had a long conversation about

482
00:19:25,380 --> 00:19:29,640
this at the HTTP Workshop slide

483
00:19:29,640 --> 00:19:32,160
and we had over the course of that long

484
00:19:32,160 --> 00:19:33,960
conversation we basically redesigned the

485
00:19:33,960 --> 00:19:36,240
proposal and then wound up right back at

486
00:19:36,240 --> 00:19:38,100
the proposal that was submitted because

487
00:19:38,100 --> 00:19:40,200
everything else we tried didn't really

488
00:19:40,200 --> 00:19:42,539
work out or had some

489
00:19:42,539 --> 00:19:45,179
uh some conceptual difficulty that made

490
00:19:45,179 --> 00:19:46,500
us drop it

491
00:19:46,500 --> 00:19:50,039
so where we wound up with is DNS is

492
00:19:50,039 --> 00:19:51,960
always reasonably current for the time

493
00:19:51,960 --> 00:19:53,580
that you look it up

494
00:19:53,580 --> 00:19:56,760
probably have short ttls that's where

495
00:19:56,760 --> 00:19:59,760
CDN load balancing happens

496
00:19:59,760 --> 00:20:01,919
it always gives you the endpoints of the

497
00:20:01,919 --> 00:20:03,720
the properties of the endpoint that

498
00:20:03,720 --> 00:20:05,940
you're actually talking to

499
00:20:05,940 --> 00:20:09,720
so we always want DNS to have

500
00:20:09,720 --> 00:20:12,179
more or less exclusive real-time control

501
00:20:12,179 --> 00:20:16,320
over who you talk to and what you should

502
00:20:16,320 --> 00:20:18,840
expect to do on that connection

503
00:20:18,840 --> 00:20:21,840
and ALT service is more interesting for

504
00:20:21,840 --> 00:20:25,799
once you get to that origin if it wants

505
00:20:25,799 --> 00:20:28,200
to move you to a different node so

506
00:20:28,200 --> 00:20:32,100
distributed origin CDN whatever

507
00:20:32,100 --> 00:20:34,679
it's mostly interesting for redirection

508
00:20:34,679 --> 00:20:37,740
in real time and stickiness may not be

509
00:20:37,740 --> 00:20:40,679
as much of a concern as it originally

510
00:20:40,679 --> 00:20:42,480
was for all service or as we thought it

511
00:20:42,480 --> 00:20:44,340
might be

512
00:20:44,340 --> 00:20:46,320
so

513
00:20:46,320 --> 00:20:47,460
um I think at this point we're just

514
00:20:47,460 --> 00:20:49,799
going to open up for discussion

515
00:20:49,799 --> 00:20:52,620
on the draft that was submitted the

516
00:20:52,620 --> 00:20:54,419
current alt service bis

517
00:20:54,419 --> 00:20:56,039
and how we want to move forward with

518
00:20:56,039 --> 00:20:58,220
this

519
00:21:02,720 --> 00:21:05,640
and I see Martin getting his phone get

520
00:21:05,640 --> 00:21:07,679
in the queue

521
00:21:07,679 --> 00:21:10,880
I also see them

522
00:21:11,700 --> 00:21:15,179
Ben you you beat Martin go for it

523
00:21:15,179 --> 00:21:18,480
hi Ben Schwartz uh this all sounds like

524
00:21:18,480 --> 00:21:20,340
a a bit like a good Improvement to me

525
00:21:20,340 --> 00:21:23,520
I'm for it I I don't understand the

526
00:21:23,520 --> 00:21:25,140
stickiness where did you end up on

527
00:21:25,140 --> 00:21:27,059
stickiness

528
00:21:27,059 --> 00:21:28,919
stickiness

529
00:21:28,919 --> 00:21:32,580
um so the issue about stickiness is

530
00:21:32,580 --> 00:21:34,260
how

531
00:21:34,260 --> 00:21:37,320
how does the client verify that the

532
00:21:37,320 --> 00:21:39,600
information it has cached is still valid

533
00:21:39,600 --> 00:21:41,820
for an old service that potentially has

534
00:21:41,820 --> 00:21:43,919
a very long long time

535
00:21:43,919 --> 00:21:47,460
so so you have conflicting we would like

536
00:21:47,460 --> 00:21:49,320
to have a long Lifetime on the alt

537
00:21:49,320 --> 00:21:51,240
service advertisement because we want

538
00:21:51,240 --> 00:21:53,360
you to remember what protocol to use

539
00:21:53,360 --> 00:21:55,460
especially at the different endpoint

540
00:21:55,460 --> 00:21:57,480
when you come back on a future

541
00:21:57,480 --> 00:21:58,620
connection

542
00:21:58,620 --> 00:22:00,840
but on the other hand

543
00:22:00,840 --> 00:22:03,360
load balancing happens at a much shorter

544
00:22:03,360 --> 00:22:04,919
time scale so we don't want you to

545
00:22:04,919 --> 00:22:06,120
remember

546
00:22:06,120 --> 00:22:08,760
so we want some some amount of

547
00:22:08,760 --> 00:22:10,320
stickiness

548
00:22:10,320 --> 00:22:13,080
but we want DNS to be able to clear it

549
00:22:13,080 --> 00:22:15,419
or override it at the time of your next

550
00:22:15,419 --> 00:22:17,760
connection and it's trying to strike the

551
00:22:17,760 --> 00:22:19,200
right balance of that that's difficult

552
00:22:19,200 --> 00:22:20,340
right now

553
00:22:20,340 --> 00:22:22,020
okay

554
00:22:22,020 --> 00:22:24,659
um yeah I think the

555
00:22:24,659 --> 00:22:28,080
uh it's perfectly reasonable to

556
00:22:28,080 --> 00:22:33,059
uh to say that the alt service B is a

557
00:22:33,059 --> 00:22:36,659
sticky indicator of which of the alt

558
00:22:36,659 --> 00:22:39,960
hosts or which of the alt RRS is prep is

559
00:22:39,960 --> 00:22:42,780
preferred and that its lifetime is is

560
00:22:42,780 --> 00:22:44,220
the

561
00:22:44,220 --> 00:22:48,360
um and that it it applies after DNS

562
00:22:48,360 --> 00:22:50,580
resolution so on some you know a week

563
00:22:50,580 --> 00:22:53,400
from now I want to connect I re-resolve

564
00:22:53,400 --> 00:22:56,640
the name I I get a an RR set and then I

565
00:22:56,640 --> 00:22:58,860
check it against my sticky post name and

566
00:22:58,860 --> 00:23:00,539
if the sticky host name is in that RR

567
00:23:00,539 --> 00:23:02,820
set then uh the hint applies otherwise

568
00:23:02,820 --> 00:23:04,740
it's discarded

569
00:23:04,740 --> 00:23:07,320
um I think that gets you what you want

570
00:23:07,320 --> 00:23:09,900
right and the the current draft as

571
00:23:09,900 --> 00:23:12,419
submitted actually has a flag that you

572
00:23:12,419 --> 00:23:16,200
can put in an rsat or on a record

573
00:23:16,200 --> 00:23:18,539
that says never use this alternative

574
00:23:18,539 --> 00:23:22,220
unless you've explicitly told to

575
00:23:22,260 --> 00:23:25,320
yeah one thing that I wonder about here

576
00:23:25,320 --> 00:23:27,179
is should we just make this stickiness

577
00:23:27,179 --> 00:23:31,380
thing a like general property of

578
00:23:31,380 --> 00:23:34,440
uh of the https record of service

579
00:23:34,440 --> 00:23:36,360
bindings like

580
00:23:36,360 --> 00:23:38,280
you gotta you know you tried various

581
00:23:38,280 --> 00:23:39,600
service bindings in the past and you

582
00:23:39,600 --> 00:23:41,640
found that one of them was the one that

583
00:23:41,640 --> 00:23:43,860
actually worked like do you really have

584
00:23:43,860 --> 00:23:45,900
to try them in priority order next time

585
00:23:45,900 --> 00:23:48,419
since you know that so the other ones

586
00:23:48,419 --> 00:23:50,220
didn't work and this one did or your

587
00:23:50,220 --> 00:23:51,960
selection algorithm selected this one

588
00:23:51,960 --> 00:23:53,340
last time

589
00:23:53,340 --> 00:23:55,620
so from the discussion at the workshop

590
00:23:55,620 --> 00:23:57,480
that is actually something that certain

591
00:23:57,480 --> 00:24:00,000
clients do

592
00:24:00,000 --> 00:24:01,679
um I don't know that we need to specify

593
00:24:01,679 --> 00:24:02,940
that per se

594
00:24:02,940 --> 00:24:05,700
right it just seems like you could you

595
00:24:05,700 --> 00:24:08,940
could effectively just say uh this is

596
00:24:08,940 --> 00:24:10,500
just a special case of that

597
00:24:10,500 --> 00:24:12,059
yeah

598
00:24:12,059 --> 00:24:14,580
okay that's enough

599
00:24:14,580 --> 00:24:15,960
pardon

600
00:24:15,960 --> 00:24:18,299
yeah so I wanted to make clear here that

601
00:24:18,299 --> 00:24:20,700
the The Proposal from the the design

602
00:24:20,700 --> 00:24:22,740
team that's been working on on this

603
00:24:22,740 --> 00:24:25,679
whole service thing is effectively to

604
00:24:25,679 --> 00:24:26,520
take

605
00:24:26,520 --> 00:24:29,700
this or something approximating this as

606
00:24:29,700 --> 00:24:32,700
the complete replacement for Old service

607
00:24:32,700 --> 00:24:36,000
so the draft proposes that we

608
00:24:36,000 --> 00:24:38,039
I think that I've got to use the right

609
00:24:38,039 --> 00:24:40,020
words now obsolete

610
00:24:40,020 --> 00:24:42,360
not deprecate is that right

611
00:24:42,360 --> 00:24:46,500
um uh we obsolete 78 38 and

612
00:24:46,500 --> 00:24:47,280
um

613
00:24:47,280 --> 00:24:49,140
that seems to be the general sense that

614
00:24:49,140 --> 00:24:51,179
that I've gotten in discussions is we

615
00:24:51,179 --> 00:24:52,559
want to effectively say that all

616
00:24:52,559 --> 00:24:55,620
services no longer useful

617
00:24:55,620 --> 00:24:56,419
um

618
00:24:56,419 --> 00:24:58,440
there are some suggestions on how we

619
00:24:58,440 --> 00:25:00,299
might improve there are a number of open

620
00:25:00,299 --> 00:25:02,580
questions that we have

621
00:25:02,580 --> 00:25:04,440
um Mike probably didn't touch on all of

622
00:25:04,440 --> 00:25:05,159
them

623
00:25:05,159 --> 00:25:09,000
uh the more interesting ones for me is

624
00:25:09,000 --> 00:25:12,299
um uh https records have priority order

625
00:25:12,299 --> 00:25:14,940
that gives you some control over where

626
00:25:14,940 --> 00:25:17,940
people end up and you can always put

627
00:25:17,940 --> 00:25:19,260
these Alternatives that you don't want

628
00:25:19,260 --> 00:25:20,880
people to use as the primary entry point

629
00:25:20,880 --> 00:25:23,360
to your service down the priority list

630
00:25:23,360 --> 00:25:26,039
on your https

631
00:25:26,039 --> 00:25:28,320
are assets that you return

632
00:25:28,320 --> 00:25:30,240
but maybe that's not as not definitive

633
00:25:30,240 --> 00:25:31,980
enough so we also defined an attribute

634
00:25:31,980 --> 00:25:33,779
on on each one of them that says don't

635
00:25:33,779 --> 00:25:35,880
use this unless it's an alternative

636
00:25:35,880 --> 00:25:37,020
um that you've been told to use

637
00:25:37,020 --> 00:25:40,740
explicitly those two mechanisms both

638
00:25:40,740 --> 00:25:42,900
provide you with some amount of control

639
00:25:42,900 --> 00:25:45,179
over the use of an alternative we're not

640
00:25:45,179 --> 00:25:48,779
sure if we need those things

641
00:25:48,779 --> 00:25:51,419
someone on GitHub has actually proposed

642
00:25:51,419 --> 00:25:52,860
that we have an alternative way of

643
00:25:52,860 --> 00:25:55,260
spelling the the stickiness which I

644
00:25:55,260 --> 00:25:56,400
think would be quite interesting I've

645
00:25:56,400 --> 00:25:57,779
asked them to post it to the mailing

646
00:25:57,779 --> 00:26:00,179
list and if they don't I will because I

647
00:26:00,179 --> 00:26:03,659
think it's an interesting idea but um

648
00:26:03,659 --> 00:26:05,100
we're sort of trying to get a sense of

649
00:26:05,100 --> 00:26:07,799
the general shape of this thing to see

650
00:26:07,799 --> 00:26:10,020
if people are interested in

651
00:26:10,020 --> 00:26:12,000
you know does this does this solve your

652
00:26:12,000 --> 00:26:14,159
problems uh we've heard from a number of

653
00:26:14,159 --> 00:26:16,679
people that simply deprecating old

654
00:26:16,679 --> 00:26:19,679
service and relying more on https

655
00:26:19,679 --> 00:26:21,840
records solves their problems adequately

656
00:26:21,840 --> 00:26:23,220
and they don't necessarily need this

657
00:26:23,220 --> 00:26:24,480
thing we've heard from others that they

658
00:26:24,480 --> 00:26:26,039
like the idea of being able to steer

659
00:26:26,039 --> 00:26:29,039
traffic using using the the old service

660
00:26:29,039 --> 00:26:31,080
records uh the old service advertisement

661
00:26:31,080 --> 00:26:34,020
as we've defined so that's the sort of

662
00:26:34,020 --> 00:26:36,179
feedback we're looking for here so just

663
00:26:36,179 --> 00:26:37,679
to be clear that the potential path

664
00:26:37,679 --> 00:26:39,720
forward then is once we get enough

665
00:26:39,720 --> 00:26:42,419
Comfort around this to stop working on

666
00:26:42,419 --> 00:26:43,980
service bests and to adopt this new

667
00:26:43,980 --> 00:26:46,559
draft correct that would be the idea but

668
00:26:46,559 --> 00:26:48,059
I think we at this point we're just

669
00:26:48,059 --> 00:26:49,080
putting this in front of people we're

670
00:26:49,080 --> 00:26:51,120
not quite ready for that time to to

671
00:26:51,120 --> 00:26:54,000
think about it right and also recognize

672
00:26:54,000 --> 00:26:55,140
that there's a few things that we need

673
00:26:55,140 --> 00:26:57,720
some input on as well but it does sound

674
00:26:57,720 --> 00:26:59,520
like we we probably should Park old

675
00:26:59,520 --> 00:27:01,500
service business until we know yeah the

676
00:27:01,500 --> 00:27:03,900
the alternate spelling of that is to

677
00:27:03,900 --> 00:27:05,460
incorporate the new draft into all

678
00:27:05,460 --> 00:27:06,720
service business there are lots of ways

679
00:27:06,720 --> 00:27:08,940
we can do this yeah yeah

680
00:27:08,940 --> 00:27:11,419
uh Eric knier Apple so I just wanted to

681
00:27:11,419 --> 00:27:13,260
reiterate a little bit and you were

682
00:27:13,260 --> 00:27:14,940
saying is this useful for people and so

683
00:27:14,940 --> 00:27:17,460
I thought I could say heck yes it is

684
00:27:17,460 --> 00:27:20,100
um so we we strongly prefer uh getting

685
00:27:20,100 --> 00:27:22,140
this kind of information from DNS it's

686
00:27:22,140 --> 00:27:23,700
much nicer because it's for the place

687
00:27:23,700 --> 00:27:25,500
that you're actually going

688
00:27:25,500 --> 00:27:27,179
um and it's something most importantly

689
00:27:27,179 --> 00:27:28,740
that you know up front at the time that

690
00:27:28,740 --> 00:27:30,120
you're going so rather than saying for

691
00:27:30,120 --> 00:27:33,299
next time you can say for this time uh

692
00:27:33,299 --> 00:27:35,700
and that has been shown uh I think via

693
00:27:35,700 --> 00:27:36,779
some data that was presented the

694
00:27:36,779 --> 00:27:39,000
previous ITF that that makes a

695
00:27:39,000 --> 00:27:40,440
significant and measurable difference in

696
00:27:40,440 --> 00:27:43,260
the amount of H3 that we actually use

697
00:27:43,260 --> 00:27:45,779
um so that much is awesome being able to

698
00:27:45,779 --> 00:27:48,059
take https records and say these are

699
00:27:48,059 --> 00:27:49,799
lower priority and have a separate

700
00:27:49,799 --> 00:27:51,779
signal for do not use this in less

701
00:27:51,779 --> 00:27:54,419
houses on fire uh both of those signals

702
00:27:54,419 --> 00:27:56,640
I think we find are super useful and we

703
00:27:56,640 --> 00:27:58,440
have a number of people where we are

704
00:27:58,440 --> 00:28:00,059
asking them to do that and they say we

705
00:28:00,059 --> 00:28:01,740
do not have a mechanism so we can't do

706
00:28:01,740 --> 00:28:03,480
that so if this gives them that

707
00:28:03,480 --> 00:28:05,940
mechanism then uh like both of those

708
00:28:05,940 --> 00:28:08,779
unique signals are awesome yes please

709
00:28:08,779 --> 00:28:11,520
and then beyond that

710
00:28:11,520 --> 00:28:13,860
yeah we can go into the rest of what's

711
00:28:13,860 --> 00:28:15,480
left for alt service after we've moved

712
00:28:15,480 --> 00:28:16,860
that out but I just want to say we do

713
00:28:16,860 --> 00:28:18,419
very much have a need for that and we

714
00:28:18,419 --> 00:28:19,799
would be shipping it yesterday if we had

715
00:28:19,799 --> 00:28:22,039
it

716
00:28:22,260 --> 00:28:25,279
thank you

717
00:28:25,500 --> 00:28:28,020
um it probably is important to note that

718
00:28:28,020 --> 00:28:31,919
at least at 1 14 we did have some people

719
00:28:31,919 --> 00:28:34,140
saying they didn't want the ability to

720
00:28:34,140 --> 00:28:35,940
indicate H3 with a header to go away

721
00:28:35,940 --> 00:28:39,480
entirely so we may

722
00:28:39,480 --> 00:28:41,580
that may just be solved by okay you can

723
00:28:41,580 --> 00:28:42,900
use the obsolete thing if you really

724
00:28:42,900 --> 00:28:44,159
have to

725
00:28:44,159 --> 00:28:45,419
but

726
00:28:45,419 --> 00:28:47,159
it's important for us to remember that

727
00:28:47,159 --> 00:28:48,240
some people do still need that

728
00:28:48,240 --> 00:28:50,220
affordance for a little while

729
00:28:50,220 --> 00:28:51,840
that's a question what the time skills

730
00:28:51,840 --> 00:28:55,080
are and yeah yeah David schenazi uh

731
00:28:55,080 --> 00:28:56,940
that's pretty much exactly what I was

732
00:28:56,940 --> 00:28:59,220
going to say and just to explain that

733
00:28:59,220 --> 00:29:02,159
um Chrome and other web browsers today

734
00:29:02,159 --> 00:29:04,620
don't always have access to the https

735
00:29:04,620 --> 00:29:05,700
record

736
00:29:05,700 --> 00:29:08,159
because like apple platforms are awesome

737
00:29:08,159 --> 00:29:10,440
and they have good apis but if you look

738
00:29:10,440 --> 00:29:12,779
at Posse's cross-platform get Adder info

739
00:29:12,779 --> 00:29:13,980
gives you

740
00:29:13,980 --> 00:29:17,360
pretty much what existed at the time so

741
00:29:17,360 --> 00:29:20,039
realistically speaking in some platforms

742
00:29:20,039 --> 00:29:22,399
where Chrome has its own DNS resolver

743
00:29:22,399 --> 00:29:25,980
everything's fine I know there's some

744
00:29:25,980 --> 00:29:27,659
people at ITF weeping that the

745
00:29:27,659 --> 00:29:29,760
applications are all bundling their DNS

746
00:29:29,760 --> 00:29:32,399
resolvers now but for cases where we

747
00:29:32,399 --> 00:29:34,200
don't we'll still need to use the old

748
00:29:34,200 --> 00:29:35,760
thing I

749
00:29:35,760 --> 00:29:37,980
don't love that we're obsoleting the old

750
00:29:37,980 --> 00:29:41,039
thing because it's still useful but you

751
00:29:41,039 --> 00:29:42,539
know at the end of the day it doesn't

752
00:29:42,539 --> 00:29:43,919
really matter as long as we're on the

753
00:29:43,919 --> 00:29:45,539
same page that we might still make

754
00:29:45,539 --> 00:29:47,220
changes to Old service if we have a

755
00:29:47,220 --> 00:29:49,559
reason to then everyone's good so like

756
00:29:49,559 --> 00:29:51,120
empty was saying we can obsolete it but

757
00:29:51,120 --> 00:29:52,799
we're not deprecating it and that seems

758
00:29:52,799 --> 00:29:54,240
fine I forget what all those words mean

759
00:29:54,240 --> 00:29:56,480
anyway

760
00:29:56,820 --> 00:29:59,418
Tommy

761
00:30:00,419 --> 00:30:03,059
all right uh this is a question for

762
00:30:03,059 --> 00:30:07,380
David if he's still up um

763
00:30:07,380 --> 00:30:09,480
I I think there's some comments on the

764
00:30:09,480 --> 00:30:11,520
list around

765
00:30:11,520 --> 00:30:14,100
uh can you know when are we going to

766
00:30:14,100 --> 00:30:16,620
update posix get at our info

767
00:30:16,620 --> 00:30:18,600
um you know I don't think that functions

768
00:30:18,600 --> 00:30:20,279
function signature is going to change at

769
00:30:20,279 --> 00:30:22,020
any point soon

770
00:30:22,020 --> 00:30:23,159
um

771
00:30:23,159 --> 00:30:24,960
just to confirm I imagine people would

772
00:30:24,960 --> 00:30:27,299
probably be okay with a separate

773
00:30:27,299 --> 00:30:29,460
function in some standard DNS library

774
00:30:29,460 --> 00:30:31,760
because you know get Adder info already

775
00:30:31,760 --> 00:30:34,260
probably is coupling too much of the a

776
00:30:34,260 --> 00:30:36,480
in Quad a queries synchronously and so

777
00:30:36,480 --> 00:30:40,620
you know your svcb lookups should be

778
00:30:40,620 --> 00:30:43,260
separate anyway so would it be

779
00:30:43,260 --> 00:30:45,360
sufficient On Any Given platform to have

780
00:30:45,360 --> 00:30:47,960
a somewhat bespoke

781
00:30:47,960 --> 00:30:51,980
DNS API for these things

782
00:30:53,100 --> 00:30:55,200
um yeah well David schenazi uh Happy

783
00:30:55,200 --> 00:30:57,299
eyeballs Enthusiast

784
00:30:57,299 --> 00:31:00,360
um yeah like in practice it's a matter

785
00:31:00,360 --> 00:31:03,480
of time at the end of the day like

786
00:31:03,480 --> 00:31:05,340
um and resources

787
00:31:05,340 --> 00:31:08,279
um Chrome today has like all the energy

788
00:31:08,279 --> 00:31:10,140
like we don't have a huge networking

789
00:31:10,140 --> 00:31:12,539
team as we used to and so the energy

790
00:31:12,539 --> 00:31:15,840
goes into the client DNS like I don't

791
00:31:15,840 --> 00:31:17,279
work on Chrome anymore

792
00:31:17,279 --> 00:31:19,200
um the the energy is going on to like

793
00:31:19,200 --> 00:31:21,899
the DNS resolver that is bundled with

794
00:31:21,899 --> 00:31:24,299
chrome and the like cross-platform

795
00:31:24,299 --> 00:31:25,860
fallback

796
00:31:25,860 --> 00:31:29,159
users get Adder info and pretty much is

797
00:31:29,159 --> 00:31:31,860
not going to see any love uh probably

798
00:31:31,860 --> 00:31:34,320
unless it becomes like a pressing issue

799
00:31:34,320 --> 00:31:37,740
so give an infinite time totally will do

800
00:31:37,740 --> 00:31:39,720
it it makes sense it's possible but it's

801
00:31:39,720 --> 00:31:41,340
in Practical things there's always

802
00:31:41,340 --> 00:31:45,980
another shiny API web API to do instead

803
00:31:46,559 --> 00:31:49,380
but just to clarify I think the goal is

804
00:31:49,380 --> 00:31:52,740
to ship the um its uh chromosome

805
00:31:52,740 --> 00:31:54,720
resolver on all platforms and that kind

806
00:31:54,720 --> 00:31:57,059
of makes this go away just it turns out

807
00:31:57,059 --> 00:31:59,820
to be like trickier than expected so I

808
00:31:59,820 --> 00:32:00,899
think at some point we'll get there and

809
00:32:00,899 --> 00:32:02,340
this becomes a non-issue at least for

810
00:32:02,340 --> 00:32:03,840
Chrome I don't know what Firefox is

811
00:32:03,840 --> 00:32:07,459
doing when like they're not using dough

812
00:32:08,159 --> 00:32:10,220
Lucas

813
00:32:10,220 --> 00:32:12,840
sorry I didn't use the tool my phone ran

814
00:32:12,840 --> 00:32:13,620
out

815
00:32:13,620 --> 00:32:15,600
um no recovery from that

816
00:32:15,600 --> 00:32:17,700
um so is somebody responsible for

817
00:32:17,700 --> 00:32:20,880
advertising H3 and wanting to work and

818
00:32:20,880 --> 00:32:22,559
being involved in the design team I

819
00:32:22,559 --> 00:32:24,360
support the shape of the solution that

820
00:32:24,360 --> 00:32:26,460
we've got as Martin said that the the

821
00:32:26,460 --> 00:32:28,260
suggestion on GitHub the other day is

822
00:32:28,260 --> 00:32:30,419
kind of interesting be willing to see

823
00:32:30,419 --> 00:32:33,600
where that goes or doesn't but

824
00:32:33,600 --> 00:32:36,480
um I really like this because I don't

825
00:32:36,480 --> 00:32:38,340
have to do anything like I would support

826
00:32:38,340 --> 00:32:40,740
this because the clients need to do some

827
00:32:40,740 --> 00:32:42,240
things and change stuff and we already

828
00:32:42,240 --> 00:32:44,640
do HBS records and it would all kind of

829
00:32:44,640 --> 00:32:46,919
work very straightforwardly but I'm not

830
00:32:46,919 --> 00:32:48,899
in a humongous rush to to remove the old

831
00:32:48,899 --> 00:32:51,240
service header tomorrow or or whatever

832
00:32:51,240 --> 00:32:53,220
like we can leave it there and it has a

833
00:32:53,220 --> 00:32:55,140
place for me the important signal here

834
00:32:55,140 --> 00:32:58,740
is is for people who who are suffering

835
00:32:58,740 --> 00:33:01,080
now with the the problems of the old

836
00:33:01,080 --> 00:33:04,020
service header they're asking us to try

837
00:33:04,020 --> 00:33:06,600
and find Solutions around it and and

838
00:33:06,600 --> 00:33:08,700
having the ITF give them a clear signal

839
00:33:08,700 --> 00:33:10,320
that this is not the power to be

840
00:33:10,320 --> 00:33:13,380
explored for future Solutions but it's

841
00:33:13,380 --> 00:33:15,480
not a dead end either in the sense that

842
00:33:15,480 --> 00:33:16,799
it's going to be turned off and we're

843
00:33:16,799 --> 00:33:18,600
never going to speak anything and you're

844
00:33:18,600 --> 00:33:20,279
just going to be left in limbo with no

845
00:33:20,279 --> 00:33:22,500
way to use H3 that's not what we want we

846
00:33:22,500 --> 00:33:25,440
just want to make it clear with what the

847
00:33:25,440 --> 00:33:28,200
future is in our mind and that dates can

848
00:33:28,200 --> 00:33:31,760
just come in the future whenever it is

849
00:33:34,740 --> 00:33:37,200
yeah so Mountain Thompson I find it

850
00:33:37,200 --> 00:33:39,480
funny sometimes too when we're talking

851
00:33:39,480 --> 00:33:41,279
about lack of engineering resources at

852
00:33:41,279 --> 00:33:42,659
Chrome when it's often the other way

853
00:33:42,659 --> 00:33:44,039
around but

854
00:33:44,039 --> 00:33:46,200
um the I think I think that's the

855
00:33:46,200 --> 00:33:48,179
transient problem uh I think probably

856
00:33:48,179 --> 00:33:50,640
the more pressing one is the

857
00:33:50,640 --> 00:33:53,120
availability of https records and how

858
00:33:53,120 --> 00:33:55,860
able you are to to make a query for them

859
00:33:55,860 --> 00:33:58,260
we've done some research that hopefully

860
00:33:58,260 --> 00:34:00,659
will be published relatively soon uh

861
00:34:00,659 --> 00:34:03,000
that that talks about the success rates

862
00:34:03,000 --> 00:34:05,600
for for different types of DNS records

863
00:34:05,600 --> 00:34:07,740
and off the top of my head I can't

864
00:34:07,740 --> 00:34:09,000
remember the exact numbers but it was

865
00:34:09,000 --> 00:34:10,739
something in the order of sort of two

866
00:34:10,739 --> 00:34:13,199
percent for A's and quad A's five

867
00:34:13,199 --> 00:34:17,460
percent for https failed uh it was more

868
00:34:17,460 --> 00:34:20,699
like 45 for our DNS Sac related uh

869
00:34:20,699 --> 00:34:22,800
Records for those who are who are

870
00:34:22,800 --> 00:34:25,379
curious about those sorts of things so

871
00:34:25,379 --> 00:34:26,159
um

872
00:34:26,159 --> 00:34:29,879
that that to me speaks to to having some

873
00:34:29,879 --> 00:34:32,280
amount of https uh sorry alt service

874
00:34:32,280 --> 00:34:35,580
Legacy style uh around it may be that we

875
00:34:35,580 --> 00:34:37,440
want to encourage people to to start

876
00:34:37,440 --> 00:34:39,719
shortening their max age on that side

877
00:34:39,719 --> 00:34:41,399
something closer to this sort of

878
00:34:41,399 --> 00:34:43,440
behavior from from the systems and we

879
00:34:43,440 --> 00:34:45,659
don't run into the sort of two caches

880
00:34:45,659 --> 00:34:48,119
problem that was a major issue with

881
00:34:48,119 --> 00:34:51,000
without service in the first place

882
00:34:51,000 --> 00:34:54,239
um that said I think uh

883
00:34:54,239 --> 00:34:56,460
this really hinges on

884
00:34:56,460 --> 00:34:59,880
like how much HTTP 3 you're willing to

885
00:34:59,880 --> 00:35:01,980
sacrifice to

886
00:35:01,980 --> 00:35:05,040
to the altar of just making progress I

887
00:35:05,040 --> 00:35:06,480
think probably at the moment for those

888
00:35:06,480 --> 00:35:08,339
people who are you know maybe strapped

889
00:35:08,339 --> 00:35:10,700
for engineering resources this is

890
00:35:10,700 --> 00:35:14,700
possibly you know too much HTTP 3 to to

891
00:35:14,700 --> 00:35:18,060
leave on you know unrealized but there

892
00:35:18,060 --> 00:35:19,260
may be a point in the future where we

893
00:35:19,260 --> 00:35:20,880
can sort of say well that sort of

894
00:35:20,880 --> 00:35:23,579
incremental you know three or two or

895
00:35:23,579 --> 00:35:25,680
three percent of networks that don't

896
00:35:25,680 --> 00:35:28,380
pass https records just

897
00:35:28,380 --> 00:35:31,260
if I get the H2 and that's okay but

898
00:35:31,260 --> 00:35:32,760
that's a discussion we'll have to have

899
00:35:32,760 --> 00:35:35,000
later

900
00:35:37,260 --> 00:35:40,200
any more slides that's okay

901
00:35:40,200 --> 00:35:43,020
all right so it sounds like uh We've

902
00:35:43,020 --> 00:35:44,820
made some pretty good progress we still

903
00:35:44,820 --> 00:35:46,020
need to do a little more work and a

904
00:35:46,020 --> 00:35:47,040
little more

905
00:35:47,040 --> 00:35:49,560
socialization maybe

906
00:35:49,560 --> 00:35:51,900
um so I think we'll continue to leave

907
00:35:51,900 --> 00:35:53,940
the old service best document parked

908
00:35:53,940 --> 00:35:55,859
yeah because please read the draft

909
00:35:55,859 --> 00:35:58,920
provide comments yeah continue to work

910
00:35:58,920 --> 00:36:00,060
on that and then we'll get to a point

911
00:36:00,060 --> 00:36:01,740
where we need to do a call for adoption

912
00:36:01,740 --> 00:36:04,020
if we think we're right for him yeah

913
00:36:04,020 --> 00:36:05,880
and figure out the disposition of all

914
00:36:05,880 --> 00:36:08,700
the other pieces at the same time yeah

915
00:36:08,700 --> 00:36:12,500
any other questions comments for Mike

916
00:36:12,839 --> 00:36:15,119
okay all right thank you very much Mike

917
00:36:15,119 --> 00:36:16,560
that was that was very productive and

918
00:36:16,560 --> 00:36:18,720
also the next speaker and and you've got

919
00:36:18,720 --> 00:36:22,339
a little extra time too okay

920
00:36:27,180 --> 00:36:30,359
so uh next up origin H3 which I believe

921
00:36:30,359 --> 00:36:33,420
is this one yes

922
00:36:33,420 --> 00:36:36,500
once again okay

923
00:36:36,780 --> 00:36:39,240
um so this is the origin frame that we

924
00:36:39,240 --> 00:36:42,720
had on H2 recast in H3

925
00:36:42,720 --> 00:36:44,460
however much you like it or you don't

926
00:36:44,460 --> 00:36:47,720
that's where we are

927
00:36:47,880 --> 00:36:49,859
so first we should recap all of the

928
00:36:49,859 --> 00:36:51,960
semantic changes from H2

929
00:36:51,960 --> 00:36:54,180
there they are review them carefully

930
00:36:54,180 --> 00:36:57,180
next

931
00:36:58,380 --> 00:37:01,859
so structural changes uh stream zeros or

932
00:37:01,859 --> 00:37:05,099
request stream in H3 so we have control

933
00:37:05,099 --> 00:37:08,520
streams so we have to map those terms

934
00:37:08,520 --> 00:37:10,740
and then Lucas filed an issue that we

935
00:37:10,740 --> 00:37:14,040
hadn't caught previously that H2 has

936
00:37:14,040 --> 00:37:15,540
Flags

937
00:37:15,540 --> 00:37:18,599
H3 does not have Flags

938
00:37:18,599 --> 00:37:21,359
so here's what the original origin spec

939
00:37:21,359 --> 00:37:25,880
has to say about flags big slide

940
00:37:26,579 --> 00:37:29,339
which is we don't use them but we might

941
00:37:29,339 --> 00:37:30,900
in the future

942
00:37:30,900 --> 00:37:32,880
so then there are four flags that are

943
00:37:32,880 --> 00:37:35,520
mandatory to understand if the flag is

944
00:37:35,520 --> 00:37:36,960
set and you don't know what it means

945
00:37:36,960 --> 00:37:38,520
ignore the frame

946
00:37:38,520 --> 00:37:40,740
the other flags are not mandatory to

947
00:37:40,740 --> 00:37:42,480
understand if they're set and you don't

948
00:37:42,480 --> 00:37:45,119
know what they mean shrug and move on

949
00:37:45,119 --> 00:37:46,560
keep using the frame as you understand

950
00:37:46,560 --> 00:37:48,720
it

951
00:37:48,720 --> 00:37:51,720
so we have those

952
00:37:51,720 --> 00:37:54,060
in H3 we would have no way to set them

953
00:37:54,060 --> 00:37:56,760
if we ever did Define them in the future

954
00:37:56,760 --> 00:37:59,540
next slide

955
00:37:59,760 --> 00:38:03,599
so what do we do about that we could

956
00:38:03,599 --> 00:38:06,720
take the very simple path of deprecate

957
00:38:06,720 --> 00:38:09,119
flag usage from H2 and say we haven't

958
00:38:09,119 --> 00:38:12,060
needed them so far we're not going to

959
00:38:12,060 --> 00:38:15,300
we could not say anything and fix the

960
00:38:15,300 --> 00:38:17,099
problem if we need to need to down the

961
00:38:17,099 --> 00:38:18,359
line although that could be kind of

962
00:38:18,359 --> 00:38:20,760
awkward if we decide to retrofit them

963
00:38:20,760 --> 00:38:23,339
into H3 later

964
00:38:23,339 --> 00:38:26,760
we can stick an always zero byte in the

965
00:38:26,760 --> 00:38:29,099
frame which makes me a little sad but

966
00:38:29,099 --> 00:38:31,079
you know it's one bite

967
00:38:31,079 --> 00:38:34,200
or we can stick and optionally present

968
00:38:34,200 --> 00:38:36,960
Flags byte on the end and if it is all

969
00:38:36,960 --> 00:38:39,300
zero you may admit it

970
00:38:39,300 --> 00:38:42,720
um none of these seem fantastic all of

971
00:38:42,720 --> 00:38:44,040
them will work

972
00:38:44,040 --> 00:38:46,500
opinions and then let's move on okay

973
00:38:46,500 --> 00:38:48,660
Martin Thompson before we go on I'm just

974
00:38:48,660 --> 00:38:50,940
going to note the very nice options pun

975
00:38:50,940 --> 00:38:52,920
on this slide well done

976
00:38:52,920 --> 00:38:55,040
yeah

977
00:38:55,680 --> 00:38:57,599
yeah so

978
00:38:57,599 --> 00:39:00,180
um we have mandatory Flags turns out

979
00:39:00,180 --> 00:39:02,700
mandatory flags are just called frame

980
00:39:02,700 --> 00:39:05,520
types so we don't have that problem uh

981
00:39:05,520 --> 00:39:07,260
if you want to if you want to define a

982
00:39:07,260 --> 00:39:09,839
flag that's mandatory to understand

983
00:39:09,839 --> 00:39:12,480
pick another frame type and off you go

984
00:39:12,480 --> 00:39:15,000
so problem solved there

985
00:39:15,000 --> 00:39:18,119
um the optional ones uh optional in

986
00:39:18,119 --> 00:39:19,400
which case we can solve that problem

987
00:39:19,400 --> 00:39:22,020
later when someone wants to Define one

988
00:39:22,020 --> 00:39:25,680
of those flags and we might do it in any

989
00:39:25,680 --> 00:39:27,180
number of ways by defining new frame

990
00:39:27,180 --> 00:39:30,720
types or by defining this stupid hack

991
00:39:30,720 --> 00:39:33,060
thing with the bit at the end that you

992
00:39:33,060 --> 00:39:35,119
cut off if it's not there

993
00:39:35,119 --> 00:39:37,920
I think these are problems best solved

994
00:39:37,920 --> 00:39:41,460
by Future Ross who I predict will

995
00:39:41,460 --> 00:39:44,160
probably never actually care to solve

996
00:39:44,160 --> 00:39:45,780
them anyway

997
00:39:45,780 --> 00:39:48,240
oh David

998
00:39:48,240 --> 00:39:52,320
uh dude it's kanazi similar to Mt I

999
00:39:52,320 --> 00:39:53,940
think yeah we have a fourth option which

1000
00:39:53,940 --> 00:39:56,579
is Kick the Can down the road uh we're

1001
00:39:56,579 --> 00:39:58,079
not painting ourselves into a corner

1002
00:39:58,079 --> 00:40:00,180
because if we need it the correct thing

1003
00:40:00,180 --> 00:40:02,880
is the frame types we have one extension

1004
00:40:02,880 --> 00:40:04,320
joint that we should grease well we

1005
00:40:04,320 --> 00:40:07,020
don't need 17 of them so just say we

1006
00:40:07,020 --> 00:40:08,400
don't use them

1007
00:40:08,400 --> 00:40:11,280
done okay and sure maybe I won't even

1008
00:40:11,280 --> 00:40:13,980
bother deprecating them from H2 like

1009
00:40:13,980 --> 00:40:16,380
just don't use them don't don't

1010
00:40:16,380 --> 00:40:19,619
accommodate them Lucas Lucas Pardo um

1011
00:40:19,619 --> 00:40:21,420
yeah so I created the issue and I didn't

1012
00:40:21,420 --> 00:40:24,240
think of any solutions for it sorry um I

1013
00:40:24,240 --> 00:40:26,880
forgot I'd opened it but it was in a fit

1014
00:40:26,880 --> 00:40:29,520
of late night spec reviewing

1015
00:40:29,520 --> 00:40:31,500
um yeah I don't like any of those

1016
00:40:31,500 --> 00:40:33,119
options I don't think we should change

1017
00:40:33,119 --> 00:40:35,280
H2 at all so I agree with David there

1018
00:40:35,280 --> 00:40:37,800
adding adding bites and stuff just seems

1019
00:40:37,800 --> 00:40:39,000
weird

1020
00:40:39,000 --> 00:40:41,220
I don't this is a lot of the time with

1021
00:40:41,220 --> 00:40:43,440
with H2 and H3 we're trying to mitigate

1022
00:40:43,440 --> 00:40:45,599
kind of proxies that might pass through

1023
00:40:45,599 --> 00:40:48,060
frames even though you're not passing

1024
00:40:48,060 --> 00:40:50,339
frames through you're reconstituting

1025
00:40:50,339 --> 00:40:51,900
them from their parts kind of thing

1026
00:40:51,900 --> 00:40:54,359
origin is a bit of an odd one I don't

1027
00:40:54,359 --> 00:40:57,300
think there's many anyone kind of

1028
00:40:57,300 --> 00:40:59,460
passing origin across multiple proxies

1029
00:40:59,460 --> 00:41:01,500
like that like I don't think we know

1030
00:41:01,500 --> 00:41:03,780
enough about the problem to be able to

1031
00:41:03,780 --> 00:41:05,940
design anything

1032
00:41:05,940 --> 00:41:08,220
that would make sense and not complicate

1033
00:41:08,220 --> 00:41:10,740
stuff no good use so if we want to

1034
00:41:10,740 --> 00:41:12,300
Define four frame types that just

1035
00:41:12,300 --> 00:41:14,940
basically all know up so it's just this

1036
00:41:14,940 --> 00:41:18,180
is these are all the types for origin in

1037
00:41:18,180 --> 00:41:20,520
H3 and they're all the same but since

1038
00:41:20,520 --> 00:41:22,200
fine it's not it's no harder to write

1039
00:41:22,200 --> 00:41:24,540
that code than for one type

1040
00:41:24,540 --> 00:41:26,400
do you think we need to define those

1041
00:41:26,400 --> 00:41:28,440
frame types now or just leave ourselves

1042
00:41:28,440 --> 00:41:30,000
the possibility to Define them in the

1043
00:41:30,000 --> 00:41:33,720
future I I don't know I have no strong

1044
00:41:33,720 --> 00:41:36,960
opinion I I had a weird idea a few years

1045
00:41:36,960 --> 00:41:39,480
ago about maybe a use for one of the

1046
00:41:39,480 --> 00:41:42,060
flags in the H2 frame

1047
00:41:42,060 --> 00:41:44,220
um so maybe but without a concrete use

1048
00:41:44,220 --> 00:41:46,380
case like printing on it would be fine

1049
00:41:46,380 --> 00:41:48,660
we're not We're not gonna we're not

1050
00:41:48,660 --> 00:41:52,260
short of space for frame types

1051
00:41:52,260 --> 00:41:55,200
I'll just give my own feedback to me

1052
00:41:55,200 --> 00:41:56,940
that the the clearly worst option here

1053
00:41:56,940 --> 00:41:58,560
is the last one for the reason for the

1054
00:41:58,560 --> 00:42:00,359
reason you point out it is not worth

1055
00:42:00,359 --> 00:42:03,060
doing that to save one bite okay

1056
00:42:03,060 --> 00:42:03,960
um

1057
00:42:03,960 --> 00:42:06,839
but it sounds like we might be

1058
00:42:06,839 --> 00:42:09,000
converging on

1059
00:42:09,000 --> 00:42:11,339
kicking it down the road giving the

1060
00:42:11,339 --> 00:42:12,839
problem to a future us and closing the

1061
00:42:12,839 --> 00:42:14,339
issue with no action I think is the

1062
00:42:14,339 --> 00:42:16,440
outcome which I think is a fine solution

1063
00:42:16,440 --> 00:42:19,200
I'm seeing thumbs up is it worth a hum

1064
00:42:19,200 --> 00:42:20,820
I don't know

1065
00:42:20,820 --> 00:42:22,640
um I've done a home for so long you know

1066
00:42:22,640 --> 00:42:27,560
or sorry just or it's like

1067
00:42:30,720 --> 00:42:33,599
never mind

1068
00:42:33,599 --> 00:42:37,200
um I will point out that in terms of

1069
00:42:37,200 --> 00:42:40,859
actual structure of the frame

1070
00:42:40,859 --> 00:42:43,619
um reserving multiple frame types to

1071
00:42:43,619 --> 00:42:45,660
account for all the flags is exactly the

1072
00:42:45,660 --> 00:42:48,000
same as sticking one extra byte in in

1073
00:42:48,000 --> 00:42:49,560
fact it's slightly worse because of the

1074
00:42:49,560 --> 00:42:53,119
varanth and the two bits for that

1075
00:42:53,160 --> 00:42:54,720
but you're saying actively reserving

1076
00:42:54,720 --> 00:42:56,280
them not just kicking down the road

1077
00:42:56,280 --> 00:42:58,859
correct if we if we were to reserve them

1078
00:42:58,859 --> 00:43:01,740
then we might as well just stick a bite

1079
00:43:01,740 --> 00:43:03,859
down

1080
00:43:05,940 --> 00:43:07,859
if we're getting him down the road then

1081
00:43:07,859 --> 00:43:09,960
we don't worry about it we don't know we

1082
00:43:09,960 --> 00:43:11,460
don't discuss that part of the spec okay

1083
00:43:11,460 --> 00:43:13,560
one more question does anybody really

1084
00:43:13,560 --> 00:43:15,000
care about this

1085
00:43:15,000 --> 00:43:16,859
hmm

1086
00:43:16,859 --> 00:43:18,660
look all right

1087
00:43:18,660 --> 00:43:20,160
that's all you got I will go close the

1088
00:43:20,160 --> 00:43:22,800
issue so the remaining question which uh

1089
00:43:22,800 --> 00:43:25,020
is implied by the picture

1090
00:43:25,020 --> 00:43:26,819
are we at the Finish Line working group

1091
00:43:26,819 --> 00:43:28,819
last call

1092
00:43:28,819 --> 00:43:31,260
all right I see nodding heads and thumbs

1093
00:43:31,260 --> 00:43:33,420
up things all right yes thank you thank

1094
00:43:33,420 --> 00:43:35,599
you

1095
00:43:36,240 --> 00:43:39,259
pretty well on time

1096
00:43:40,140 --> 00:43:43,879
uh next up cookies

1097
00:43:50,220 --> 00:43:52,859
and how long did we reserve for this I

1098
00:43:52,859 --> 00:43:55,200
think we're gonna talk for 15 minutes at

1099
00:43:55,200 --> 00:43:56,880
most

1100
00:43:56,880 --> 00:43:59,119
foreign

1101
00:44:02,400 --> 00:44:04,800
hello all my name is Stephen bingler

1102
00:44:04,800 --> 00:44:08,280
Google Chrome and I'll be going over a

1103
00:44:08,280 --> 00:44:12,960
status update for 6265 this for anybody

1104
00:44:12,960 --> 00:44:15,480
who was present at the last interim

1105
00:44:15,480 --> 00:44:16,920
meeting these slides are going to seem

1106
00:44:16,920 --> 00:44:18,480
very familiar

1107
00:44:18,480 --> 00:44:20,880
uh next slide please

1108
00:44:20,880 --> 00:44:22,319
um

1109
00:44:22,319 --> 00:44:25,680
so there hasn't been a new draft since

1110
00:44:25,680 --> 00:44:27,240
actually that's

1111
00:44:27,240 --> 00:44:29,280
that's not true as of about five minutes

1112
00:44:29,280 --> 00:44:31,500
ago when we just pushed a new draft but

1113
00:44:31,500 --> 00:44:32,640
I'm going to talk as if we didn't do

1114
00:44:32,640 --> 00:44:34,560
that there hasn't been a new draft since

1115
00:44:34,560 --> 00:44:37,859
ITF uh 114

1116
00:44:37,859 --> 00:44:40,020
um so all these changes are since that

1117
00:44:40,020 --> 00:44:42,480
previous draft during previous meetings

1118
00:44:42,480 --> 00:44:44,400
I've stood here and read through all

1119
00:44:44,400 --> 00:44:46,079
those bullet points and that felt

1120
00:44:46,079 --> 00:44:48,180
stilted and weird so instead I'm going

1121
00:44:48,180 --> 00:44:49,440
to leave them on the screen for a few

1122
00:44:49,440 --> 00:44:52,020
moments and if anybody has any questions

1123
00:44:52,020 --> 00:44:53,940
I can go into more detail about them

1124
00:44:53,940 --> 00:44:57,260
later next slide

1125
00:44:59,460 --> 00:45:04,460
one moment two moments next slide

1126
00:45:05,579 --> 00:45:07,440
um let's see

1127
00:45:07,440 --> 00:45:09,300
there's only one change here that's

1128
00:45:09,300 --> 00:45:11,160
actually worth talking about

1129
00:45:11,160 --> 00:45:11,700
um

1130
00:45:11,700 --> 00:45:14,760
just landed one where cookie prefix

1131
00:45:14,760 --> 00:45:16,740
names are now checked cased

1132
00:45:16,740 --> 00:45:18,420
insensitively

1133
00:45:18,420 --> 00:45:19,680
um previously they were checked

1134
00:45:19,680 --> 00:45:21,599
sensitively meaning that you had to get

1135
00:45:21,599 --> 00:45:24,060
the exact case for the guarantees for

1136
00:45:24,060 --> 00:45:26,280
cookie prefixes to be applied these are

1137
00:45:26,280 --> 00:45:27,780
the underscore underscore secure and

1138
00:45:27,780 --> 00:45:30,780
underscore underscore host Dash cookies

1139
00:45:30,780 --> 00:45:33,599
um but it turns out that servers don't

1140
00:45:33,599 --> 00:45:35,400
always check cookies sent case

1141
00:45:35,400 --> 00:45:36,960
sensitively because of course they don't

1142
00:45:36,960 --> 00:45:39,420
so servers were setting prefixes without

1143
00:45:39,420 --> 00:45:40,740
realizing that they weren't getting any

1144
00:45:40,740 --> 00:45:42,599
of the guarantees from browsers and

1145
00:45:42,599 --> 00:45:45,000
that's bad so we fixed that

1146
00:45:45,000 --> 00:45:47,579
next slide

1147
00:45:47,579 --> 00:45:51,000
we have three open issues currently

1148
00:45:51,000 --> 00:45:53,280
um same-site cookies and redirects click

1149
00:45:53,280 --> 00:45:55,079
recap on this

1150
00:45:55,079 --> 00:45:56,339
um

1151
00:45:56,339 --> 00:45:58,680
the there was a bug in the original spec

1152
00:45:58,680 --> 00:46:01,020
where same site did not take the

1153
00:46:01,020 --> 00:46:03,540
redirect chain into account so if you

1154
00:46:03,540 --> 00:46:06,420
redirected from site a through site B

1155
00:46:06,420 --> 00:46:08,880
and back to site a we would consider

1156
00:46:08,880 --> 00:46:11,160
that same site and happily send you your

1157
00:46:11,160 --> 00:46:12,599
same-site cookies

1158
00:46:12,599 --> 00:46:13,800
um that's wrong

1159
00:46:13,800 --> 00:46:17,220
the spec was fixed but when Chrome tried

1160
00:46:17,220 --> 00:46:20,780
to launch this or enable this feature

1161
00:46:20,780 --> 00:46:23,099
we got a ton of complaints and there was

1162
00:46:23,099 --> 00:46:26,300
a lot of site breakage so we disabled it

1163
00:46:26,300 --> 00:46:29,940
and currently trying to figure out next

1164
00:46:29,940 --> 00:46:33,000
steps we're collecting metrics on how

1165
00:46:33,000 --> 00:46:35,400
sites are using this Behavior to try to

1166
00:46:35,400 --> 00:46:37,579
get a better idea of what to do with it

1167
00:46:37,579 --> 00:46:40,020
but with the US holiday season

1168
00:46:40,020 --> 00:46:42,660
approaching I'm expecting I'm not going

1169
00:46:42,660 --> 00:46:45,000
to get anything useful until

1170
00:46:45,000 --> 00:46:47,040
until q1

1171
00:46:47,040 --> 00:46:49,680
uh the other two open issues internal

1172
00:46:49,680 --> 00:46:51,119
white space and cookie names and values

1173
00:46:51,119 --> 00:46:53,339
this was recently filed uh turns out

1174
00:46:53,339 --> 00:46:55,440
that the three major browsers Chrome

1175
00:46:55,440 --> 00:46:58,079
Firefox and Safari all handle internal

1176
00:46:58,079 --> 00:47:00,900
tabs somewhat differently internal tab

1177
00:47:00,900 --> 00:47:03,480
being that you have some other non-tab

1178
00:47:03,480 --> 00:47:06,000
characters a tab more more non-tab

1179
00:47:06,000 --> 00:47:07,160
characters

1180
00:47:07,160 --> 00:47:10,859
the spec was modified uh somewhat

1181
00:47:10,859 --> 00:47:12,839
recently to disallow control characters

1182
00:47:12,839 --> 00:47:15,420
but it accepted tab characters

1183
00:47:15,420 --> 00:47:17,760
what this means is that now the spec

1184
00:47:17,760 --> 00:47:19,560
says you should accept those internal

1185
00:47:19,560 --> 00:47:20,940
tabs

1186
00:47:20,940 --> 00:47:23,880
but not all browsers do so I'm trying to

1187
00:47:23,880 --> 00:47:25,859
figure out if that change to the spec

1188
00:47:25,859 --> 00:47:27,839
should have happened and whether we

1189
00:47:27,839 --> 00:47:29,940
should revert it

1190
00:47:29,940 --> 00:47:32,520
um final one is

1191
00:47:32,520 --> 00:47:34,140
a mouthful uh the spec should more

1192
00:47:34,140 --> 00:47:35,760
clearly advise which parts a reader

1193
00:47:35,760 --> 00:47:37,619
should Implement I filed this one

1194
00:47:37,619 --> 00:47:40,079
because we've had a number of

1195
00:47:40,079 --> 00:47:43,260
issues with implementers implementing

1196
00:47:43,260 --> 00:47:45,420
the wrong requirements because they are

1197
00:47:45,420 --> 00:47:47,700
confused on what they should do and I

1198
00:47:47,700 --> 00:47:49,380
can't exactly blame them it's not an

1199
00:47:49,380 --> 00:47:51,839
easy document to read so this is kind of

1200
00:47:51,839 --> 00:47:53,880
a task for myself to go through and

1201
00:47:53,880 --> 00:47:55,560
write some pros that makes it a little

1202
00:47:55,560 --> 00:47:58,619
bit simpler for someone to know what

1203
00:47:58,619 --> 00:48:00,780
they need to implement

1204
00:48:00,780 --> 00:48:04,160
all right next slide please

1205
00:48:05,160 --> 00:48:08,099
um so we've already have some work plan

1206
00:48:08,099 --> 00:48:11,400
post RFC 6265 this the first is cookies

1207
00:48:11,400 --> 00:48:13,980
having independent partition State Dylan

1208
00:48:13,980 --> 00:48:15,480
will be up here in a few minutes to talk

1209
00:48:15,480 --> 00:48:18,060
in more detail about that the second one

1210
00:48:18,060 --> 00:48:20,280
is Cookie spec layering

1211
00:48:20,280 --> 00:48:22,140
um originally Johann Hoffman was going

1212
00:48:22,140 --> 00:48:24,060
to speak on that unfortunately he wasn't

1213
00:48:24,060 --> 00:48:26,220
able to make it so I'm going to say a

1214
00:48:26,220 --> 00:48:28,859
few a few words about it

1215
00:48:28,859 --> 00:48:31,800
um yep I'm hitting things on my computer

1216
00:48:31,800 --> 00:48:32,880
here

1217
00:48:32,880 --> 00:48:34,619
so

1218
00:48:34,619 --> 00:48:36,599
um cookie layering is an effort being

1219
00:48:36,599 --> 00:48:38,220
headed by Johann Hoffman and Anna van

1220
00:48:38,220 --> 00:48:41,640
kestron the idea is that the cookie spec

1221
00:48:41,640 --> 00:48:45,060
has kind of intermingled itself with

1222
00:48:45,060 --> 00:48:47,339
the browser specs

1223
00:48:47,339 --> 00:48:49,859
um with same site and partition cookies

1224
00:48:49,859 --> 00:48:53,460
and blocking and this is an effort to

1225
00:48:53,460 --> 00:48:57,000
sort of decouple the cookie spec from

1226
00:48:57,000 --> 00:48:58,560
things that could be better handled by

1227
00:48:58,560 --> 00:49:01,619
say the fetch spec

1228
00:49:01,619 --> 00:49:02,339
um

1229
00:49:02,339 --> 00:49:05,180
let's see

1230
00:49:05,880 --> 00:49:08,220
um this was brought up during TPAC as

1231
00:49:08,220 --> 00:49:10,680
like an initial idea and request for

1232
00:49:10,680 --> 00:49:12,420
feedback and

1233
00:49:12,420 --> 00:49:14,579
seems somewhat positive but there's a

1234
00:49:14,579 --> 00:49:18,180
lot of work ahead for it

1235
00:49:18,180 --> 00:49:20,700
that is all that I have do we have any

1236
00:49:20,700 --> 00:49:22,939
questions

1237
00:49:27,780 --> 00:49:30,300
so I I think the idea here is you want

1238
00:49:30,300 --> 00:49:32,460
to close those three issues

1239
00:49:32,460 --> 00:49:35,160
go through working group last call go to

1240
00:49:35,160 --> 00:49:38,579
the ITF isgq publication process and

1241
00:49:38,579 --> 00:49:40,339
then we'll we'll talk about starting

1242
00:49:40,339 --> 00:49:43,680
almost an immediate revision again

1243
00:49:43,680 --> 00:49:46,020
uh to address your your deferred issues

1244
00:49:46,020 --> 00:49:48,240
and and these work items is that kind of

1245
00:49:48,240 --> 00:49:50,819
yes that's correct once the once the

1246
00:49:50,819 --> 00:49:52,260
file once the three open issues are

1247
00:49:52,260 --> 00:49:54,480
closed I'm hoping to go into last call

1248
00:49:54,480 --> 00:49:56,940
okay and the cookie spec layering and

1249
00:49:56,940 --> 00:49:59,099
there's been some background discussion

1250
00:49:59,099 --> 00:50:01,560
about that I think that's we've for a

1251
00:50:01,560 --> 00:50:03,119
long time talked about how to make the

1252
00:50:03,119 --> 00:50:04,920
the cookie spec more accessible more

1253
00:50:04,920 --> 00:50:07,200
user friendly I think we want to try and

1254
00:50:07,200 --> 00:50:09,180
involve uh non-browser communities as

1255
00:50:09,180 --> 00:50:10,740
well to see where the right line is to

1256
00:50:10,740 --> 00:50:12,900
draw about making that separation but

1257
00:50:12,900 --> 00:50:14,520
that that's a discussion we can have I

1258
00:50:14,520 --> 00:50:17,339
think that's very reasonable uh David

1259
00:50:17,339 --> 00:50:20,060
spanazi

1260
00:50:20,099 --> 00:50:23,819
hi I'm failing to find the issue but I

1261
00:50:23,819 --> 00:50:26,220
remember there being some discussion on

1262
00:50:26,220 --> 00:50:29,460
the topic of uh utf-8 characters and it

1263
00:50:29,460 --> 00:50:31,920
just allowed characters in general

1264
00:50:31,920 --> 00:50:35,700
about how the spec allows a different

1265
00:50:35,700 --> 00:50:38,339
set for setting cookies than for sending

1266
00:50:38,339 --> 00:50:39,380
them

1267
00:50:39,380 --> 00:50:42,240
and like I think April King kind of

1268
00:50:42,240 --> 00:50:44,460
found some issues there that were even

1269
00:50:44,460 --> 00:50:46,020
somewhat were worrisome from a security

1270
00:50:46,020 --> 00:50:48,240
perspective where did that discussion go

1271
00:50:48,240 --> 00:50:51,000
I just couldn't find it sorry

1272
00:50:51,000 --> 00:50:52,619
um that discussion happened in a pull

1273
00:50:52,619 --> 00:50:54,540
request rather than an issue uh that's

1274
00:50:54,540 --> 00:50:57,960
why uh I spoke with uh April

1275
00:50:57,960 --> 00:51:01,140
um just you know face to face and we

1276
00:51:01,140 --> 00:51:03,780
decided that at the moment

1277
00:51:03,780 --> 00:51:06,839
um okay so context April has found a

1278
00:51:06,839 --> 00:51:08,819
number of issues where browsers will

1279
00:51:08,819 --> 00:51:10,500
send in safe cookies that servers then

1280
00:51:10,500 --> 00:51:11,599
won't accept

1281
00:51:11,599 --> 00:51:14,059
this is a problem primarily because

1282
00:51:14,059 --> 00:51:17,599
nowadays a server is not a single entity

1283
00:51:17,599 --> 00:51:20,119
companies will have

1284
00:51:20,119 --> 00:51:22,740
SAS products that they use that will

1285
00:51:22,740 --> 00:51:25,680
send cookies but then their python

1286
00:51:25,680 --> 00:51:28,440
framework or PHP or whatever won't

1287
00:51:28,440 --> 00:51:30,960
accept back the same cookie that that

1288
00:51:30,960 --> 00:51:33,599
origin sent out which when the spec was

1289
00:51:33,599 --> 00:51:37,079
developed I assume the the authors

1290
00:51:37,079 --> 00:51:38,460
thought that oh if a server is going to

1291
00:51:38,460 --> 00:51:39,599
send something can obviously understand

1292
00:51:39,599 --> 00:51:41,940
it when he gets it back

1293
00:51:41,940 --> 00:51:43,980
um after talking with April we decided

1294
00:51:43,980 --> 00:51:46,740
that simply changing the spec to say

1295
00:51:46,740 --> 00:51:48,720
that oh hey server should ex should

1296
00:51:48,720 --> 00:51:50,520
accept this expanded character set was

1297
00:51:50,520 --> 00:51:52,020
not the correct

1298
00:51:52,020 --> 00:51:53,880
correct route

1299
00:51:53,880 --> 00:51:56,000
um

1300
00:51:57,420 --> 00:52:00,480
I I think there is no I know there's a

1301
00:52:00,480 --> 00:52:02,880
deferred issue for the for the next

1302
00:52:02,880 --> 00:52:04,200
version of the spec where we are going

1303
00:52:04,200 --> 00:52:07,619
to more formally research look into

1304
00:52:07,619 --> 00:52:10,380
allowing expanded character sets and

1305
00:52:10,380 --> 00:52:11,940
kind of what the effect that's going to

1306
00:52:11,940 --> 00:52:13,260
have

1307
00:52:13,260 --> 00:52:15,420
um but at the moment it's the plan is to

1308
00:52:15,420 --> 00:52:17,460
keep the status quo

1309
00:52:17,460 --> 00:52:21,119
thanks that that's reasonable I like mt

1310
00:52:21,119 --> 00:52:22,680
and I are working on an active protocol

1311
00:52:22,680 --> 00:52:24,359
maintenance documents that talks about

1312
00:52:24,359 --> 00:52:26,400
these considerations so having the spec

1313
00:52:26,400 --> 00:52:29,099
match reality is important

1314
00:52:29,099 --> 00:52:31,380
um maybe if you know I don't want to

1315
00:52:31,380 --> 00:52:32,760
volunteer you for work but if we could

1316
00:52:32,760 --> 00:52:34,800
have like a paragraph explaining that

1317
00:52:34,800 --> 00:52:37,319
there is a foot gun in the spec

1318
00:52:37,319 --> 00:52:39,599
um that might be useful just you know as

1319
00:52:39,599 --> 00:52:42,180
a warning note that this is different

1320
00:52:42,180 --> 00:52:44,160
from this and you you here be dragons

1321
00:52:44,160 --> 00:52:47,040
might be good yeah that's exactly what

1322
00:52:47,040 --> 00:52:49,260
that final long-winded issue that I

1323
00:52:49,260 --> 00:52:51,839
filed is which is like make it easier uh

1324
00:52:51,839 --> 00:52:54,780
yes thank you highlighting perfect I

1325
00:52:54,780 --> 00:52:55,619
think that's exactly what that's

1326
00:52:55,619 --> 00:52:57,119
supposed to be

1327
00:52:57,119 --> 00:52:58,740
yeah that's been kind of an ongoing

1328
00:52:58,740 --> 00:53:00,359
theme for a little while so it's good to

1329
00:53:00,359 --> 00:53:02,040
see that addressed

1330
00:53:02,040 --> 00:53:04,079
yeah all right should we go into

1331
00:53:04,079 --> 00:53:06,300
partition cookies then

1332
00:53:06,300 --> 00:53:10,400
yeah all right thank you all thank you

1333
00:53:16,500 --> 00:53:19,280
foreign

1334
00:53:26,180 --> 00:53:29,579
my name is Dylan Cutler I am also on

1335
00:53:29,579 --> 00:53:31,079
Google Chrome

1336
00:53:31,079 --> 00:53:33,240
um and I will be discussing partition

1337
00:53:33,240 --> 00:53:35,280
cookies with you guys today

1338
00:53:35,280 --> 00:53:38,059
uh slide

1339
00:53:38,400 --> 00:53:40,800
um so just a quick overview

1340
00:53:40,800 --> 00:53:43,440
um so when we say a cookie is

1341
00:53:43,440 --> 00:53:46,440
partitioned as opposed to unpartitioned

1342
00:53:46,440 --> 00:53:48,180
what we mean is that

1343
00:53:48,180 --> 00:53:50,700
um when a cookie is

1344
00:53:50,700 --> 00:53:52,920
and when an unpartitioned cookie is set

1345
00:53:52,920 --> 00:53:54,960
in a third-party context it is available

1346
00:53:54,960 --> 00:53:57,660
on essentially any top level domain that

1347
00:53:57,660 --> 00:53:59,099
makes requests to The Domain that set

1348
00:53:59,099 --> 00:54:00,960
the cookie

1349
00:54:00,960 --> 00:54:04,200
um and by partition cookies we mean that

1350
00:54:04,200 --> 00:54:06,000
um these third party cookies would only

1351
00:54:06,000 --> 00:54:08,220
be available on the top level site in

1352
00:54:08,220 --> 00:54:10,500
which were they were created and then if

1353
00:54:10,500 --> 00:54:12,240
the user were to navigate to a different

1354
00:54:12,240 --> 00:54:14,280
top level site

1355
00:54:14,280 --> 00:54:17,400
um then the third party domain would

1356
00:54:17,400 --> 00:54:19,680
receive like a brand new cookie jar

1357
00:54:19,680 --> 00:54:21,359
um also this is like a forewarning this

1358
00:54:21,359 --> 00:54:22,980
talk is going to be like because it's

1359
00:54:22,980 --> 00:54:24,839
partition cookies a little more browser

1360
00:54:24,839 --> 00:54:27,480
heavy than some other like talks um so

1361
00:54:27,480 --> 00:54:29,280
if that's not your thing feel free to

1362
00:54:29,280 --> 00:54:32,540
tune me out uh slide

1363
00:54:36,420 --> 00:54:38,819
um so the partitioned attribute is a

1364
00:54:38,819 --> 00:54:40,559
proposal for a new cookie attribute

1365
00:54:40,559 --> 00:54:42,420
which would allow sites to opt into this

1366
00:54:42,420 --> 00:54:44,400
Behavior

1367
00:54:44,400 --> 00:54:46,559
um and just to go over the design really

1368
00:54:46,559 --> 00:54:50,040
quickly it would require uh secure

1369
00:54:50,040 --> 00:54:52,859
um domains would be allowed up to 10

1370
00:54:52,859 --> 00:54:55,020
kilo uh kilobytes

1371
00:54:55,020 --> 00:54:57,900
or 180 cookies per partition and we

1372
00:54:57,900 --> 00:54:59,579
determine how much memory a domain is

1373
00:54:59,579 --> 00:55:01,980
using per Partition by the size

1374
00:55:01,980 --> 00:55:06,200
of the name and value of the cookies

1375
00:55:06,300 --> 00:55:08,040
um and then another detail is that clear

1376
00:55:08,040 --> 00:55:10,440
site data would also only clear cookies

1377
00:55:10,440 --> 00:55:12,599
in the current partition that it was in

1378
00:55:12,599 --> 00:55:15,240
and this would be to prevent uh cross

1379
00:55:15,240 --> 00:55:17,520
domain entropy leaks essentially there's

1380
00:55:17,520 --> 00:55:20,339
a tax you could set up where you

1381
00:55:20,339 --> 00:55:22,079
intentionally call clear-site data on

1382
00:55:22,079 --> 00:55:23,880
different top level domains in order to

1383
00:55:23,880 --> 00:55:25,559
essentially like build enough cross-site

1384
00:55:25,559 --> 00:55:28,920
entropy to develop a like persisting

1385
00:55:28,920 --> 00:55:30,480
cross-site identifier

1386
00:55:30,480 --> 00:55:33,440
uh slide

1387
00:55:37,500 --> 00:55:39,839
so um today I'm just going to be going

1388
00:55:39,839 --> 00:55:41,520
over some of the open issues we have for

1389
00:55:41,520 --> 00:55:44,160
partition cookies

1390
00:55:44,160 --> 00:55:46,380
um the first one will be how do we deal

1391
00:55:46,380 --> 00:55:48,000
with Partition cookies in what we call

1392
00:55:48,000 --> 00:55:51,660
quote-unquote unpartitioned contexts

1393
00:55:51,660 --> 00:55:53,520
um also we want to discuss whether the

1394
00:55:53,520 --> 00:55:55,559
partition key should have

1395
00:55:55,559 --> 00:55:58,440
um a field called cross-site ancestor

1396
00:55:58,440 --> 00:56:00,359
bit

1397
00:56:00,359 --> 00:56:02,520
um we also will discuss how to handle

1398
00:56:02,520 --> 00:56:04,079
partitioned and unpartitioned cookies

1399
00:56:04,079 --> 00:56:06,180
which have the same name

1400
00:56:06,180 --> 00:56:09,839
and then finally we'll go over

1401
00:56:09,839 --> 00:56:11,220
um should there be a way that user

1402
00:56:11,220 --> 00:56:13,380
agents convey that they are sending the

1403
00:56:13,380 --> 00:56:14,940
request from a context in which only

1404
00:56:14,940 --> 00:56:17,460
partition cookies are allowed if we're

1405
00:56:17,460 --> 00:56:19,859
in a future world where

1406
00:56:19,859 --> 00:56:21,900
um unpartitioned third-party cookies are

1407
00:56:21,900 --> 00:56:26,660
obsoleted uh next slide

1408
00:56:29,940 --> 00:56:31,800
um so first we'll talk about partition

1409
00:56:31,800 --> 00:56:33,540
cookies and unpartitioned context and

1410
00:56:33,540 --> 00:56:35,280
I'll start by defining what we mean by

1411
00:56:35,280 --> 00:56:37,800
an unpartitioned context

1412
00:56:37,800 --> 00:56:39,420
um in this case it would mean a first

1413
00:56:39,420 --> 00:56:42,119
party context and so in that case the

1414
00:56:42,119 --> 00:56:44,099
um it's a request where the top level

1415
00:56:44,099 --> 00:56:46,260
domain and the domain making the

1416
00:56:46,260 --> 00:56:47,880
requests getting or setting the cookie

1417
00:56:47,880 --> 00:56:50,040
is the same or it would be contexts

1418
00:56:50,040 --> 00:56:51,660
which have received

1419
00:56:51,660 --> 00:56:54,000
um a privilege essentially through user

1420
00:56:54,000 --> 00:56:55,260
consent through something like storage

1421
00:56:55,260 --> 00:56:58,319
access API for example

1422
00:56:58,319 --> 00:57:00,900
um and

1423
00:57:00,900 --> 00:57:02,760
um one like Nuance we like to point out

1424
00:57:02,760 --> 00:57:03,780
is that

1425
00:57:03,780 --> 00:57:05,880
um Chrome and other browsers

1426
00:57:05,880 --> 00:57:07,980
particularly firefox's implementation of

1427
00:57:07,980 --> 00:57:10,440
unpartitioned contacts differ

1428
00:57:10,440 --> 00:57:11,460
um this is kind of where the issue

1429
00:57:11,460 --> 00:57:13,079
arises Chrome supports both

1430
00:57:13,079 --> 00:57:15,540
unpartitioned and partition cookies at

1431
00:57:15,540 --> 00:57:17,760
the same time and uses null for the

1432
00:57:17,760 --> 00:57:20,460
latter's partition key whereas in other

1433
00:57:20,460 --> 00:57:22,619
browsers as soon as storage access API

1434
00:57:22,619 --> 00:57:24,300
is granted

1435
00:57:24,300 --> 00:57:26,099
um the partition key for that context

1436
00:57:26,099 --> 00:57:27,960
essentially switches to that first that

1437
00:57:27,960 --> 00:57:29,819
cookies domain as if it were like kind

1438
00:57:29,819 --> 00:57:33,119
of originating from the cookies site

1439
00:57:33,119 --> 00:57:34,619
um and so the question is how do we

1440
00:57:34,619 --> 00:57:36,180
handle cookies that are set with a

1441
00:57:36,180 --> 00:57:38,700
partitioned attribute in these contexts

1442
00:57:38,700 --> 00:57:41,880
um you know do we set the partition key

1443
00:57:41,880 --> 00:57:43,440
to be like the current top level site

1444
00:57:43,440 --> 00:57:45,780
which is what we are proposing is the

1445
00:57:45,780 --> 00:57:48,540
right answer um or do we just use like

1446
00:57:48,540 --> 00:57:50,339
whatever the current partition key is we

1447
00:57:50,339 --> 00:57:51,780
think that we should just set it to be

1448
00:57:51,780 --> 00:57:53,339
whatever like the current top level site

1449
00:57:53,339 --> 00:57:54,839
is even in these more privileged

1450
00:57:54,839 --> 00:57:56,099
contexts

1451
00:57:56,099 --> 00:57:58,500
um just because the site is including

1452
00:57:58,500 --> 00:57:59,819
the partitioned attribute because

1453
00:57:59,819 --> 00:58:01,319
they're opting into this Behavior

1454
00:58:01,319 --> 00:58:03,599
explicitly and there are also ways to

1455
00:58:03,599 --> 00:58:04,980
use cookies in these contexts without

1456
00:58:04,980 --> 00:58:07,260
using the partitioned attribute

1457
00:58:07,260 --> 00:58:09,720
next slide oh and then one more note

1458
00:58:09,720 --> 00:58:11,460
about that asterisk point when I say

1459
00:58:11,460 --> 00:58:13,559
like Chrome supports partition and

1460
00:58:13,559 --> 00:58:15,180
unpartitioned cookies at the same time

1461
00:58:15,180 --> 00:58:16,740
what I I don't mean that Chrome will

1462
00:58:16,740 --> 00:58:18,540
like continue supporting unpartitioned

1463
00:58:18,540 --> 00:58:19,940
third-party cookies into the future

1464
00:58:19,940 --> 00:58:22,619
posts it's third party cookie uh

1465
00:58:22,619 --> 00:58:25,079
deprecation timeline

1466
00:58:25,079 --> 00:58:27,300
um just wants to like kind of clear the

1467
00:58:27,300 --> 00:58:28,740
air there in case I accidentally store

1468
00:58:28,740 --> 00:58:32,040
any fires um and so uh moving on from

1469
00:58:32,040 --> 00:58:34,800
there on the next thing we want to talk

1470
00:58:34,800 --> 00:58:36,180
about is whether the partition key

1471
00:58:36,180 --> 00:58:37,740
should have what's called a cross-site

1472
00:58:37,740 --> 00:58:40,500
ancestor bit and I think the best way to

1473
00:58:40,500 --> 00:58:43,260
explain this is visually so

1474
00:58:43,260 --> 00:58:45,720
um let's say a server is setting a

1475
00:58:45,720 --> 00:58:47,460
partition cookie in a first party

1476
00:58:47,460 --> 00:58:50,760
context where the uh request domain and

1477
00:58:50,760 --> 00:58:53,520
the top level domain are the same

1478
00:58:53,520 --> 00:58:55,380
um in this case

1479
00:58:55,380 --> 00:58:57,960
the crossline ancestor bit would be

1480
00:58:57,960 --> 00:59:00,119
false because the request is originating

1481
00:59:00,119 --> 00:59:02,460
directly from the top level frame uh

1482
00:59:02,460 --> 00:59:04,880
slide please

1483
00:59:05,940 --> 00:59:06,660
um

1484
00:59:06,660 --> 00:59:09,359
but in this next scenario here we see

1485
00:59:09,359 --> 00:59:12,240
that although the request is coming from

1486
00:59:12,240 --> 00:59:13,980
the same site as the top level domain

1487
00:59:13,980 --> 00:59:16,559
there is a third party ancestor or

1488
00:59:16,559 --> 00:59:19,680
cross-site ancestor between the um top

1489
00:59:19,680 --> 00:59:23,280
level site and this frame or context

1490
00:59:23,280 --> 00:59:25,020
like making this request

1491
00:59:25,020 --> 00:59:28,099
uh next slide please

1492
00:59:30,299 --> 00:59:34,220
it takes a while yeah it's fine

1493
00:59:34,680 --> 00:59:35,760
um so

1494
00:59:35,760 --> 00:59:37,980
this cross-site ancestor chain bit was

1495
00:59:37,980 --> 00:59:39,480
actually originally introduced in the

1496
00:59:39,480 --> 00:59:41,339
w3c as part of like the storage

1497
00:59:41,339 --> 00:59:43,440
partitioning effort um where browsers

1498
00:59:43,440 --> 00:59:45,900
are partitioning JavaScript storage in

1499
00:59:45,900 --> 00:59:47,099
the same way we're partitioning cookies

1500
00:59:47,099 --> 00:59:48,960
so that they aren't accessible to sites

1501
00:59:48,960 --> 00:59:51,660
across different top level domains

1502
00:59:51,660 --> 00:59:53,520
um and the reasoning behind that was

1503
00:59:53,520 --> 00:59:55,859
like primarily to like correctly compute

1504
00:59:55,859 --> 00:59:58,260
site for cookies in Partition service

1505
00:59:58,260 --> 01:00:00,299
workers

1506
01:00:00,299 --> 01:00:00,960
um

1507
01:00:00,960 --> 01:00:03,780
and effectively by adding this bit it

1508
01:00:03,780 --> 01:00:05,700
would separate the partition that top

1509
01:00:05,700 --> 01:00:08,460
level contexts get from

1510
01:00:08,460 --> 01:00:09,059
um

1511
01:00:09,059 --> 01:00:11,880
context with a cross-site ancestor

1512
01:00:11,880 --> 01:00:13,140
and

1513
01:00:13,140 --> 01:00:15,119
on the question of whether we want to

1514
01:00:15,119 --> 01:00:17,700
add this to the cookie partition key

1515
01:00:17,700 --> 01:00:20,280
um there's a pro which is that

1516
01:00:20,280 --> 01:00:22,200
um there are consistent cookie sorry

1517
01:00:22,200 --> 01:00:25,140
consistent partition boundaries across

1518
01:00:25,140 --> 01:00:27,720
uh cookies and storage which is nice for

1519
01:00:27,720 --> 01:00:31,319
developers but there are some cons for

1520
01:00:31,319 --> 01:00:33,180
example this would essentially be a

1521
01:00:33,180 --> 01:00:34,859
re-implementation of same site because

1522
01:00:34,859 --> 01:00:36,599
developers can already restrict which

1523
01:00:36,599 --> 01:00:38,400
cookies are accessible in and out of

1524
01:00:38,400 --> 01:00:40,680
these contexts by setting a cookies same

1525
01:00:40,680 --> 01:00:43,260
site locks or strict

1526
01:00:43,260 --> 01:00:45,480
um and then another con is that there

1527
01:00:45,480 --> 01:00:47,280
are cookie use cases

1528
01:00:47,280 --> 01:00:49,559
um if you want to know specifics you can

1529
01:00:49,559 --> 01:00:50,640
ask me after

1530
01:00:50,640 --> 01:00:53,520
um where the top level site and uh same

1531
01:00:53,520 --> 01:00:55,200
site in bed with a cross-site ancestor

1532
01:00:55,200 --> 01:00:56,640
actually need to like communicate with

1533
01:00:56,640 --> 01:00:58,440
each other with cookies and so we think

1534
01:00:58,440 --> 01:01:00,000
that adding this ancestor chain bit

1535
01:01:00,000 --> 01:01:01,440
would be harmful

1536
01:01:01,440 --> 01:01:04,280
uh next slide

1537
01:01:08,700 --> 01:01:10,380
um and so the next issue we wanted to go

1538
01:01:10,380 --> 01:01:11,880
over is how to handle partition and

1539
01:01:11,880 --> 01:01:14,579
unpartitioned cookies with the same name

1540
01:01:14,579 --> 01:01:15,540
um and it turns out there's actually

1541
01:01:15,540 --> 01:01:17,280
already precedent for this

1542
01:01:17,280 --> 01:01:19,680
um domains can set cookies with the same

1543
01:01:19,680 --> 01:01:22,079
name as long as they differ in either

1544
01:01:22,079 --> 01:01:25,680
their domain or path attributes

1545
01:01:25,680 --> 01:01:27,960
um and so in order to account for

1546
01:01:27,960 --> 01:01:30,299
partition cookies we propose adding the

1547
01:01:30,299 --> 01:01:32,040
partition key to this Tuple of

1548
01:01:32,040 --> 01:01:34,140
attributes that we use to consider what

1549
01:01:34,140 --> 01:01:37,140
cookies are unique and that if a browser

1550
01:01:37,140 --> 01:01:38,880
were to set a cookie with the same name

1551
01:01:38,880 --> 01:01:40,260
and value but one had the partition

1552
01:01:40,260 --> 01:01:42,299
attribute and one would not we would

1553
01:01:42,299 --> 01:01:43,920
send both cookies and the cookie header

1554
01:01:43,920 --> 01:01:45,900
and subsequent requests

1555
01:01:45,900 --> 01:01:48,680
next slide

1556
01:01:49,619 --> 01:01:51,660
um and then the last issue

1557
01:01:51,660 --> 01:01:54,059
um how can user agents convey if a site

1558
01:01:54,059 --> 01:01:56,220
us all right how can user agents convey

1559
01:01:56,220 --> 01:01:57,900
if a request comes from a context in

1560
01:01:57,900 --> 01:01:59,160
which

1561
01:01:59,160 --> 01:02:00,240
um the browser would only accept

1562
01:02:00,240 --> 01:02:01,920
partition cookies

1563
01:02:01,920 --> 01:02:03,059
um and we think that this shouldn't

1564
01:02:03,059 --> 01:02:04,380
really be a blocker for specking

1565
01:02:04,380 --> 01:02:05,819
partition cookies this is kind of a

1566
01:02:05,819 --> 01:02:07,680
long-term question and has implications

1567
01:02:07,680 --> 01:02:10,740
Beyond like just partition cookies

1568
01:02:10,740 --> 01:02:13,020
um and so kind of our solution for now

1569
01:02:13,020 --> 01:02:15,599
is just pump this down the line

1570
01:02:15,599 --> 01:02:18,200
um next slide

1571
01:02:19,680 --> 01:02:22,260
um so the next steps would be to

1572
01:02:22,260 --> 01:02:24,000
continue to align with spec work with

1573
01:02:24,000 --> 01:02:27,180
this group and also um the w3c to align

1574
01:02:27,180 --> 01:02:29,280
with uh things like the cookie store API

1575
01:02:29,280 --> 01:02:31,740
or document.cookie

1576
01:02:31,740 --> 01:02:34,920
um and also chips or cookies having

1577
01:02:34,920 --> 01:02:37,920
independent partition state is a uh

1578
01:02:37,920 --> 01:02:40,799
good example of actually how iitf might

1579
01:02:40,799 --> 01:02:42,240
benefit from cookie layering because

1580
01:02:42,240 --> 01:02:44,339
essentially if cookie layering happens

1581
01:02:44,339 --> 01:02:46,140
and we move some of these more browser

1582
01:02:46,140 --> 01:02:48,540
specific things into the fetch spec then

1583
01:02:48,540 --> 01:02:50,160
really all the ietf needs to be

1584
01:02:50,160 --> 01:02:52,079
concerned with is how

1585
01:02:52,079 --> 01:02:54,960
um how user agents parse the

1586
01:02:54,960 --> 01:02:57,780
a partition token in the cookie line and

1587
01:02:57,780 --> 01:02:59,700
then they can kind of let the fetch spec

1588
01:02:59,700 --> 01:03:01,799
handle the rest of the partitioning

1589
01:03:01,799 --> 01:03:03,720
Behavior

1590
01:03:03,720 --> 01:03:06,059
um and that's it so anyone has any

1591
01:03:06,059 --> 01:03:07,799
questions feel free

1592
01:03:07,799 --> 01:03:11,160
so I think from a process standpoint

1593
01:03:11,160 --> 01:03:12,540
here

1594
01:03:12,540 --> 01:03:14,700
um when we talked about adding major new

1595
01:03:14,700 --> 01:03:17,880
features for 6265 bits we had a

1596
01:03:17,880 --> 01:03:20,220
relatively rigorous process for getting

1597
01:03:20,220 --> 01:03:22,680
consensus around here's a proposal with

1598
01:03:22,680 --> 01:03:24,660
a draft does the community want to add

1599
01:03:24,660 --> 01:03:29,040
that to 6265 scope and so um this is

1600
01:03:29,040 --> 01:03:32,220
probably too late for 62.65 this and I

1601
01:03:32,220 --> 01:03:33,420
don't think that's a surprise to you

1602
01:03:33,420 --> 01:03:34,799
which is good

1603
01:03:34,799 --> 01:03:35,940
um and the question is you know when we

1604
01:03:35,940 --> 01:03:37,740
do this next revision that we were just

1605
01:03:37,740 --> 01:03:39,540
talking about you know are we going to

1606
01:03:39,540 --> 01:03:42,180
use a similar process and if so you know

1607
01:03:42,180 --> 01:03:43,920
what would our folks interested in

1608
01:03:43,920 --> 01:03:46,920
taking this on as as a piece of work and

1609
01:03:46,920 --> 01:03:49,319
as before I think you know in in 6065

1610
01:03:49,319 --> 01:03:51,720
original as well as this we kept the

1611
01:03:51,720 --> 01:03:53,460
focus very firmly on implementer

1612
01:03:53,460 --> 01:03:55,799
intention uh and and so you know folks

1613
01:03:55,799 --> 01:03:57,240
who have cookie jars they're not the

1614
01:03:57,240 --> 01:03:59,160
only people who matter but they do

1615
01:03:59,160 --> 01:04:01,920
really matter to this discussion so

1616
01:04:01,920 --> 01:04:03,839
that's who at least we we should hear

1617
01:04:03,839 --> 01:04:06,680
from Martin

1618
01:04:06,720 --> 01:04:10,020
yeah so um during my Mozilla hat but the

1619
01:04:10,020 --> 01:04:14,280
Privacy CG chair and w3c that that group

1620
01:04:14,280 --> 01:04:16,740
has pretty broad support for this work

1621
01:04:16,740 --> 01:04:19,920
and would very much like to see

1622
01:04:19,920 --> 01:04:23,280
the work proceed and I I think we have

1623
01:04:23,280 --> 01:04:25,020
agreement also that the ITF is the right

1624
01:04:25,020 --> 01:04:27,059
place to do that

1625
01:04:27,059 --> 01:04:29,880
um because the ITF owns the cookies back

1626
01:04:29,880 --> 01:04:31,140
and it doesn't make any sense to put it

1627
01:04:31,140 --> 01:04:33,780
anywhere else uh I I think we're willing

1628
01:04:33,780 --> 01:04:35,700
to be guided by everyone else in terms

1629
01:04:35,700 --> 01:04:37,619
of timelines and whatnot and it very

1630
01:04:37,619 --> 01:04:39,780
much seems like this cookie revision is

1631
01:04:39,780 --> 01:04:43,980
like this close is my impression

1632
01:04:43,980 --> 01:04:45,960
um and I see nodding so that's good

1633
01:04:45,960 --> 01:04:48,180
because I would really like to say it

1634
01:04:48,180 --> 01:04:51,119
finished as well as much as it's been 15

1635
01:04:51,119 --> 01:04:54,119
years or however long it is so

1636
01:04:54,119 --> 01:04:55,020
um

1637
01:04:55,020 --> 01:04:57,240
I I think this is probably something

1638
01:04:57,240 --> 01:04:59,700
that I would sort of advocate for

1639
01:04:59,700 --> 01:05:02,880
some sort of signal that it's uh working

1640
01:05:02,880 --> 01:05:07,500
in the ITF process uh so I sort of would

1641
01:05:07,500 --> 01:05:10,260
prefer if this were adopted here

1642
01:05:10,260 --> 01:05:14,099
um perhaps parked on the side so that we

1643
01:05:14,099 --> 01:05:16,140
can continue to work on it and refine it

1644
01:05:16,140 --> 01:05:17,640
and answer some of the interesting

1645
01:05:17,640 --> 01:05:20,099
questions Dylan's asking here but not

1646
01:05:20,099 --> 01:05:23,040
um block other important work that would

1647
01:05:23,040 --> 01:05:25,759
be my preference here

1648
01:05:28,319 --> 01:05:30,119
to me that sounds reasonable and I think

1649
01:05:30,119 --> 01:05:31,799
one of the questions in my mind is do we

1650
01:05:31,799 --> 01:05:35,280
launch that next cookies work at

1651
01:05:35,280 --> 01:05:38,220
Yokohama or even beforehand but I guess

1652
01:05:38,220 --> 01:05:39,180
that depends on a lot of different

1653
01:05:39,180 --> 01:05:41,400
things

1654
01:05:41,400 --> 01:05:45,780
okay any other comments thoughts

1655
01:05:45,780 --> 01:05:49,640
anyone online as well

1656
01:05:56,040 --> 01:05:58,819
Brian

1657
01:06:05,040 --> 01:06:07,500
there's maybe sort of a naive question

1658
01:06:07,500 --> 01:06:09,960
but can you explain a little bit more

1659
01:06:09,960 --> 01:06:13,680
the rationale for providing this

1660
01:06:13,680 --> 01:06:17,040
at all uh versus the the browser just

1661
01:06:17,040 --> 01:06:19,079
making its own decisions about how it

1662
01:06:19,079 --> 01:06:21,359
will partition or not partition that it

1663
01:06:21,359 --> 01:06:23,220
it's always felt to me like it's a a

1664
01:06:23,220 --> 01:06:25,140
question of how the behavior of the

1665
01:06:25,140 --> 01:06:26,280
client itself the browser or whatever

1666
01:06:26,280 --> 01:06:29,220
behaves and putting it onto the wire and

1667
01:06:29,220 --> 01:06:30,900
part of the cookies

1668
01:06:30,900 --> 01:06:31,859
back

1669
01:06:31,859 --> 01:06:33,180
um

1670
01:06:33,180 --> 01:06:35,940
um it's hard hard to articulate it more

1671
01:06:35,940 --> 01:06:37,260
than that but

1672
01:06:37,260 --> 01:06:39,900
referring to like the attribute

1673
01:06:39,900 --> 01:06:41,460
um and like the opt-in behavior and just

1674
01:06:41,460 --> 01:06:43,799
say like yeah okay yeah like at least

1675
01:06:43,799 --> 01:06:45,780
it's my understanding like uh Firefox

1676
01:06:45,780 --> 01:06:47,520
Mozilla basically partition cookies

1677
01:06:47,520 --> 01:06:49,380
right or has the opportunity to

1678
01:06:49,380 --> 01:06:50,640
partition cookies in their client and

1679
01:06:50,640 --> 01:06:52,260
they just did it they partitioned them

1680
01:06:52,260 --> 01:06:54,420
top level domain lower level domain it

1681
01:06:54,420 --> 01:06:55,920
just sort of happens

1682
01:06:55,920 --> 01:06:58,680
so bringing this into a spot trying to

1683
01:06:58,680 --> 01:07:01,500
give servers the opt-in behavior is

1684
01:07:01,500 --> 01:07:02,640
never quite

1685
01:07:02,640 --> 01:07:04,079
I've never quite understood the the

1686
01:07:04,079 --> 01:07:05,700
rationale or the motivation behind that

1687
01:07:05,700 --> 01:07:08,880
and it almost feels simpler to not to

1688
01:07:08,880 --> 01:07:10,880
just allow it to continue to be a

1689
01:07:10,880 --> 01:07:15,599
behavior that the the client decides on

1690
01:07:15,599 --> 01:07:17,579
um at least Karma's philosophy on this

1691
01:07:17,579 --> 01:07:18,599
is that

1692
01:07:18,599 --> 01:07:20,640
um we want to encourage this to be like

1693
01:07:20,640 --> 01:07:23,539
an opt-in Behavior at least in the time

1694
01:07:23,539 --> 01:07:26,940
between now and when on partition

1695
01:07:26,940 --> 01:07:29,640
third-party cookies are turned down and

1696
01:07:29,640 --> 01:07:31,020
the reason being is that like a lot of

1697
01:07:31,020 --> 01:07:33,059
servers rely on third-party cookie

1698
01:07:33,059 --> 01:07:34,980
functionality for various things some of

1699
01:07:34,980 --> 01:07:36,539
that's cross-site tracking which we're

1700
01:07:36,539 --> 01:07:37,920
not okay with but then some of it are

1701
01:07:37,920 --> 01:07:41,339
some use cases that we are okay with and

1702
01:07:41,339 --> 01:07:43,559
um in this sort of transitory period

1703
01:07:43,559 --> 01:07:46,140
where we move off of third-party cookies

1704
01:07:46,140 --> 01:07:48,240
um we think that like providing this

1705
01:07:48,240 --> 01:07:49,940
attribute and this opt-in Behavior

1706
01:07:49,940 --> 01:07:52,500
provides developers with an opportunity

1707
01:07:52,500 --> 01:07:54,839
to kind of migrate their systems over to

1708
01:07:54,839 --> 01:07:56,819
this partitioned World

1709
01:07:56,819 --> 01:07:57,539
um

1710
01:07:57,539 --> 01:07:59,640
you know before

1711
01:07:59,640 --> 01:08:01,980
we just completely kind of take the rug

1712
01:08:01,980 --> 01:08:03,720
out from under them and remove on a

1713
01:08:03,720 --> 01:08:05,819
partitioned third-party cookies

1714
01:08:05,819 --> 01:08:06,480
um

1715
01:08:06,480 --> 01:08:09,539
so it's kind of a web compat

1716
01:08:09,539 --> 01:08:14,480
I guess uh reasoning behind it wouldn't

1717
01:08:14,480 --> 01:08:17,100
again I apologize for I'm not fully

1718
01:08:17,100 --> 01:08:18,420
understanding but in terms of

1719
01:08:18,420 --> 01:08:20,939
compatibility it always it feels like

1720
01:08:20,939 --> 01:08:22,979
there's cases that are going to break

1721
01:08:22,979 --> 01:08:26,339
then if you're expecting

1722
01:08:26,339 --> 01:08:28,259
third-party cookies that will otherwise

1723
01:08:28,259 --> 01:08:30,179
work in a partition context and you're

1724
01:08:30,179 --> 01:08:32,219
not opting into them so like a server

1725
01:08:32,219 --> 01:08:35,160
that you know does whatever it does in a

1726
01:08:35,160 --> 01:08:37,198
in a frame or something

1727
01:08:37,198 --> 01:08:40,500
and continues to get set cookies get

1728
01:08:40,500 --> 01:08:42,179
cookies as they would you partition

1729
01:08:42,179 --> 01:08:44,520
those it doesn't know the difference in

1730
01:08:44,520 --> 01:08:47,219
terms of How It's behaving but if if

1731
01:08:47,219 --> 01:08:49,140
suddenly it's changed such that you have

1732
01:08:49,140 --> 01:08:51,060
to opt in with their or partition

1733
01:08:51,060 --> 01:08:53,279
cookies then that would I believe stop

1734
01:08:53,279 --> 01:08:55,259
working with unless you

1735
01:08:55,259 --> 01:08:57,960
make the migration so it feels like that

1736
01:08:57,960 --> 01:09:01,198
area is not compat at least not in the

1737
01:09:01,198 --> 01:09:02,460
way that I think about it be a breaking

1738
01:09:02,460 --> 01:09:03,179
change

1739
01:09:03,179 --> 01:09:06,000
and require software updates to well

1740
01:09:06,000 --> 01:09:08,939
continue working I think like kind of at

1741
01:09:08,939 --> 01:09:10,198
some point there is a breaking change

1742
01:09:10,198 --> 01:09:11,819
that needs to be made either it's like

1743
01:09:11,819 --> 01:09:13,920
removing third-party cookies entirely or

1744
01:09:13,920 --> 01:09:15,719
it's just partitioning them by default

1745
01:09:15,719 --> 01:09:17,040
so at some point we're going to be

1746
01:09:17,040 --> 01:09:19,198
breaking sites I think it's just like a

1747
01:09:19,198 --> 01:09:20,520
matter of difference on sort of how we

1748
01:09:20,520 --> 01:09:23,160
want that breakage to occur

1749
01:09:23,160 --> 01:09:25,439
um I think that like our philosophy is

1750
01:09:25,439 --> 01:09:28,439
that

1751
01:09:28,679 --> 01:09:32,580
um you know the the server getting the

1752
01:09:32,580 --> 01:09:34,439
lack of cookie back once we do turn down

1753
01:09:34,439 --> 01:09:36,000
third party cookies is a signal that

1754
01:09:36,000 --> 01:09:39,839
like it's not working as intended versus

1755
01:09:39,839 --> 01:09:41,759
having the user agent just sort of like

1756
01:09:41,759 --> 01:09:43,380
change the behavior of the cookie from

1757
01:09:43,380 --> 01:09:44,759
underneath the site without really

1758
01:09:44,759 --> 01:09:46,319
giving it any indication that that's

1759
01:09:46,319 --> 01:09:47,698
what's going on

1760
01:09:47,698 --> 01:09:51,479
um is like kind of just as bad in our

1761
01:09:51,479 --> 01:09:53,839
opinion

1762
01:09:57,560 --> 01:09:59,360
okay

1763
01:09:59,360 --> 01:10:02,340
yeah I have almost the opposite

1764
01:10:02,340 --> 01:10:04,260
perspective that

1765
01:10:04,260 --> 01:10:06,060
that just to have things continue

1766
01:10:06,060 --> 01:10:07,440
working

1767
01:10:07,440 --> 01:10:10,199
to the extent that they can without

1768
01:10:10,199 --> 01:10:13,800
requiring any changes to opt-in a

1769
01:10:13,800 --> 01:10:17,699
behavior that should just

1770
01:10:17,699 --> 01:10:19,440
yeah

1771
01:10:19,440 --> 01:10:21,480
it seems it seems unnecessary and sort

1772
01:10:21,480 --> 01:10:25,020
of backwards um but maybe I'm often that

1773
01:10:25,020 --> 01:10:26,580
weeds

1774
01:10:26,580 --> 01:10:27,960
here

1775
01:10:27,960 --> 01:10:29,880
kind of feels that way there is an

1776
01:10:29,880 --> 01:10:32,699
explainer correct there is yes

1777
01:10:32,699 --> 01:10:34,860
um I can if you want to come up to me

1778
01:10:34,860 --> 01:10:36,540
like after this and if you have any

1779
01:10:36,540 --> 01:10:38,219
additional questions to or I can also

1780
01:10:38,219 --> 01:10:39,600
like send you a link to the explainer

1781
01:10:39,600 --> 01:10:40,980
where we talk about things in a lot

1782
01:10:40,980 --> 01:10:42,780
better detail

1783
01:10:42,780 --> 01:10:45,480
um so yeah I encourage you to do that

1784
01:10:45,480 --> 01:10:48,678
okay thanks

1785
01:10:50,219 --> 01:10:53,100
so Martin Thompson this has been debated

1786
01:10:53,100 --> 01:10:54,540
at length

1787
01:10:54,540 --> 01:10:57,420
um in other forums and

1788
01:10:57,420 --> 01:11:00,960
um it was it was a the consensus view I

1789
01:11:00,960 --> 01:11:03,960
think was that that blocking blocking

1790
01:11:03,960 --> 01:11:05,760
cookies in these third-party context was

1791
01:11:05,760 --> 01:11:08,699
the desirable outcome it was not

1792
01:11:08,699 --> 01:11:12,000
necessarily uh unanimous that that was

1793
01:11:12,000 --> 01:11:14,040
the the outcome there were there were a

1794
01:11:14,040 --> 01:11:15,659
number of reasons the ones that Dylan

1795
01:11:15,659 --> 01:11:18,600
articulated uh for doing it this way I

1796
01:11:18,600 --> 01:11:20,000
also believe that certain other

1797
01:11:20,000 --> 01:11:22,520
platforms have a little bit of trouble

1798
01:11:22,520 --> 01:11:25,679
when they tried to um

1799
01:11:25,679 --> 01:11:29,340
implement partitioning properly and

1800
01:11:29,340 --> 01:11:33,060
those were limitations around

1801
01:11:33,060 --> 01:11:34,980
um devices not being particularly

1802
01:11:34,980 --> 01:11:38,400
performant when partitioning was in

1803
01:11:38,400 --> 01:11:40,199
place and so

1804
01:11:40,199 --> 01:11:42,480
um and those were also rooted in the

1805
01:11:42,480 --> 01:11:43,800
architecture of those systems as well

1806
01:11:43,800 --> 01:11:45,600
which I think was a little unfortunate

1807
01:11:45,600 --> 01:11:46,739
but

1808
01:11:46,739 --> 01:11:47,340
um

1809
01:11:47,340 --> 01:11:49,199
ultimately our experience with

1810
01:11:49,199 --> 01:11:51,500
partitioning is that it mostly almost

1811
01:11:51,500 --> 01:11:55,020
completely works and so you could do

1812
01:11:55,020 --> 01:11:57,840
without this but we were sort of in the

1813
01:11:57,840 --> 01:11:59,280
minority when it came to the discussions

1814
01:11:59,280 --> 01:12:02,640
there and and we want to respect the

1815
01:12:02,640 --> 01:12:06,120
um the consensus process there and uh

1816
01:12:06,120 --> 01:12:09,179
the ultimately

1817
01:12:09,179 --> 01:12:10,739
this is fine

1818
01:12:10,739 --> 01:12:14,400
it's not great but this is this is what

1819
01:12:14,400 --> 01:12:16,560
gets everyone doing partitioned and

1820
01:12:16,560 --> 01:12:19,260
um State properly so this is the this is

1821
01:12:19,260 --> 01:12:21,800
the Compromise

1822
01:12:25,920 --> 01:12:28,020
okay

1823
01:12:28,020 --> 01:12:29,880
well and and you know we haven't

1824
01:12:29,880 --> 01:12:31,800
formally adopted anything yet uh it's

1825
01:12:31,800 --> 01:12:33,659
continuing discussion but it's a good

1826
01:12:33,659 --> 01:12:35,820
start I think

1827
01:12:35,820 --> 01:12:37,920
anything else

1828
01:12:37,920 --> 01:12:39,360
thank you

1829
01:12:39,360 --> 01:12:40,679
okay

1830
01:12:40,679 --> 01:12:43,260
thank you very much and we're on time

1831
01:12:43,260 --> 01:12:45,500
too

1832
01:12:48,360 --> 01:12:50,940
uh next up we're going to go back uh to

1833
01:12:50,940 --> 01:12:52,620
a rearranged agenda and talk about

1834
01:12:52,620 --> 01:12:55,140
client certs

1835
01:12:55,140 --> 01:12:57,560
right

1836
01:13:00,600 --> 01:13:03,260
I recognize that photo

1837
01:13:03,260 --> 01:13:06,780
I thought so in London some time ago

1838
01:13:06,780 --> 01:13:10,140
okay so yeah client search uh I've only

1839
01:13:10,140 --> 01:13:11,520
got five minutes here so this is me

1840
01:13:11,520 --> 01:13:16,500
pretty short uh go to the next slide

1841
01:13:16,500 --> 01:13:18,900
I Know It Takes a Minute

1842
01:13:18,900 --> 01:13:20,460
Martin if you want to clear yourself

1843
01:13:20,460 --> 01:13:23,100
unless you already have comments

1844
01:13:23,100 --> 01:13:26,060
uh so

1845
01:13:26,100 --> 01:13:28,800
Mark uh encouraged us to just focus on

1846
01:13:28,800 --> 01:13:30,840
issues questions Etc and not give any

1847
01:13:30,840 --> 01:13:32,100
context or anything it's hard for me but

1848
01:13:32,100 --> 01:13:34,080
I take a shot at that in interest of

1849
01:13:34,080 --> 01:13:36,540
saving time here so uh back in October

1850
01:13:36,540 --> 01:13:39,719
we published uh 03 really

1851
01:13:39,719 --> 01:13:42,900
um relatively minor changes stating that

1852
01:13:42,900 --> 01:13:44,460
the certificate chain is presented in

1853
01:13:44,460 --> 01:13:46,140
the same order as it would be defined in

1854
01:13:46,140 --> 01:13:48,480
TLS rather than trying to copy a bunch

1855
01:13:48,480 --> 01:13:50,520
of language from TLS that that is

1856
01:13:50,520 --> 01:13:51,960
difficult to get right and sort of

1857
01:13:51,960 --> 01:13:54,120
problematic did a bunch of reference

1858
01:13:54,120 --> 01:13:56,400
updates to things that are now are now

1859
01:13:56,400 --> 01:13:59,820
rfcs uh made HTTP semantics a normative

1860
01:13:59,820 --> 01:14:01,380
reference some of the normative

1861
01:14:01,380 --> 01:14:03,540
informative stuff's a little tricky to

1862
01:14:03,540 --> 01:14:05,340
get right here but that one made sense

1863
01:14:05,340 --> 01:14:07,679
mentioned that uh in the case the origin

1864
01:14:07,679 --> 01:14:09,960
server Access Control decisions

1865
01:14:09,960 --> 01:14:12,360
um need to be conveyed at the HTTP

1866
01:14:12,360 --> 01:14:14,520
application layer either by selecting

1867
01:14:14,520 --> 01:14:16,800
specific response content or sending a

1868
01:14:16,800 --> 01:14:19,679
403 or something but uh be pretty clear

1869
01:14:19,679 --> 01:14:21,360
that we're not trying to invent any sort

1870
01:14:21,360 --> 01:14:24,179
of cross layer signaling about error

1871
01:14:24,179 --> 01:14:27,659
conditions or Access Control decisions

1872
01:14:27,659 --> 01:14:29,760
um October 30th started working group

1873
01:14:29,760 --> 01:14:32,340
last call and

1874
01:14:32,340 --> 01:14:35,480
um next slide

1875
01:14:36,420 --> 01:14:38,699
I did this sort of last minute because I

1876
01:14:38,699 --> 01:14:39,900
did have a saying that said there was no

1877
01:14:39,900 --> 01:14:41,280
open issue

1878
01:14:41,280 --> 01:14:43,739
um Lucas Conley did a review and put a

1879
01:14:43,739 --> 01:14:46,800
number of things up here thanks Lucas

1880
01:14:46,800 --> 01:14:48,540
um there are a number of issues that are

1881
01:14:48,540 --> 01:14:50,340
open I don't think any of them are very

1882
01:14:50,340 --> 01:14:52,500
controversial uh we have a little bit of

1883
01:14:52,500 --> 01:14:55,560
a discussion going about sort of text

1884
01:14:55,560 --> 01:14:56,880
and what it might look like in the

1885
01:14:56,880 --> 01:14:58,920
future versus now in context and so

1886
01:14:58,920 --> 01:15:00,960
forth but it will work through that I

1887
01:15:00,960 --> 01:15:03,300
saw another one come up do that as well

1888
01:15:03,300 --> 01:15:06,360
um but there's uh yeah the these are

1889
01:15:06,360 --> 01:15:08,880
open I plan to address them

1890
01:15:08,880 --> 01:15:10,920
um I don't think there's anything

1891
01:15:10,920 --> 01:15:14,159
uh of of consequence of consequence in

1892
01:15:14,159 --> 01:15:16,020
terms of progressing things along and uh

1893
01:15:16,020 --> 01:15:18,659
we are still in uh last call for a

1894
01:15:18,659 --> 01:15:19,739
little while

1895
01:15:19,739 --> 01:15:21,239
um

1896
01:15:21,239 --> 01:15:22,860
that's it that's sort of a boring

1897
01:15:22,860 --> 01:15:24,420
presentation but that was I think the

1898
01:15:24,420 --> 01:15:26,219
goal okay

1899
01:15:26,219 --> 01:15:28,800
uh any questions comments have people

1900
01:15:28,800 --> 01:15:30,480
looked at this draft

1901
01:15:30,480 --> 01:15:32,040
Martin here in the queue I assume that's

1902
01:15:32,040 --> 01:15:34,760
from last time

1903
01:15:38,100 --> 01:15:40,800
hello Lucas it's here

1904
01:15:40,800 --> 01:15:42,719
um yeah I just had a blast of the draft

1905
01:15:42,719 --> 01:15:44,520
like you say loads of these are just

1906
01:15:44,520 --> 01:15:45,960
really low-key there's a little things

1907
01:15:45,960 --> 01:15:47,760
you can pick and tidy up but it got

1908
01:15:47,760 --> 01:15:50,100
caught in some other reviewer

1909
01:15:50,100 --> 01:15:51,719
um some other editorial like I say we

1910
01:15:51,719 --> 01:15:54,060
disagree that's okay you're the editor

1911
01:15:54,060 --> 01:15:55,739
if you want to do it that way that's

1912
01:15:55,739 --> 01:15:57,840
that's your discretion so just just

1913
01:15:57,840 --> 01:16:00,120
wanted to give some kind of

1914
01:16:00,120 --> 01:16:02,880
contrast and feedback so that in case

1915
01:16:02,880 --> 01:16:05,040
you didn't think of it that way so I'm

1916
01:16:05,040 --> 01:16:07,020
happy however we resolve them all right

1917
01:16:07,020 --> 01:16:08,940
thanks for saying that I I didn't think

1918
01:16:08,940 --> 01:16:10,380
about it that way until you brought it

1919
01:16:10,380 --> 01:16:12,780
up but even as I think about it I'm I

1920
01:16:12,780 --> 01:16:14,040
still sort of like the background and

1921
01:16:14,040 --> 01:16:15,420
context but

1922
01:16:15,420 --> 01:16:17,540
um let me think about it a little bit

1923
01:16:17,540 --> 01:16:20,040
also in reflection this this is an

1924
01:16:20,040 --> 01:16:22,679
informational draft that is correct yeah

1925
01:16:22,679 --> 01:16:25,080
so I I think I might have forgotten that

1926
01:16:25,080 --> 01:16:26,520
so

1927
01:16:26,520 --> 01:16:28,020
um on reflection you know it's having

1928
01:16:28,020 --> 01:16:30,480
some context is that there might be they

1929
01:16:30,480 --> 01:16:33,120
might continue to be other drafts that

1930
01:16:33,120 --> 01:16:34,800
or sorry other other headers that

1931
01:16:34,800 --> 01:16:36,780
provide this capability I'm afraid

1932
01:16:36,780 --> 01:16:39,060
they're almost certainly will be long

1933
01:16:39,060 --> 01:16:40,800
under the foreseeable future as I think

1934
01:16:40,800 --> 01:16:42,780
this this sort of came along a little

1935
01:16:42,780 --> 01:16:44,580
too late and so it

1936
01:16:44,580 --> 01:16:47,520
yeah and and so phrasing it as you've

1937
01:16:47,520 --> 01:16:50,100
done is is kind of uh reflects the

1938
01:16:50,100 --> 01:16:51,900
reality of that this is a way to do it

1939
01:16:51,900 --> 01:16:54,060
but it's it's not the standard because

1940
01:16:54,060 --> 01:16:58,020
it's not a standard yeah cheers

1941
01:16:58,020 --> 01:17:00,420
thanks for that

1942
01:17:00,420 --> 01:17:03,020
Jonathan

1943
01:17:04,620 --> 01:17:06,780
wow you're already tall

1944
01:17:06,780 --> 01:17:08,940
um Jonathan Hoyle and cloudflare

1945
01:17:08,940 --> 01:17:10,980
um I I haven't looked at this draft so I

1946
01:17:10,980 --> 01:17:12,780
just looked at it now

1947
01:17:12,780 --> 01:17:14,060
um but the security security

1948
01:17:14,060 --> 01:17:17,400
considerations is super light is that

1949
01:17:17,400 --> 01:17:18,420
not

1950
01:17:18,420 --> 01:17:21,920
absolutely terrifying

1951
01:17:22,560 --> 01:17:25,020
um I I thought they were

1952
01:17:25,020 --> 01:17:27,239
pretty well done but you know I wrote

1953
01:17:27,239 --> 01:17:29,699
them so that doesn't uh necessarily say

1954
01:17:29,699 --> 01:17:31,380
much the security considerations are

1955
01:17:31,380 --> 01:17:34,679
meant to cover the

1956
01:17:34,679 --> 01:17:36,960
I don't know how to answer that I guess

1957
01:17:36,960 --> 01:17:38,820
it sounds like you might have some

1958
01:17:38,820 --> 01:17:43,140
suggestions yeah if if they're specific

1959
01:17:43,140 --> 01:17:44,940
so I I only looked at the security

1960
01:17:44,940 --> 01:17:46,140
considerations because I was just

1961
01:17:46,140 --> 01:17:47,940
curious about how this would work

1962
01:17:47,940 --> 01:17:49,440
but

1963
01:17:49,440 --> 01:17:54,120
how is the the proof that the client

1964
01:17:54,120 --> 01:17:57,360
owns the certificate transferred to the

1965
01:17:57,360 --> 01:18:00,540
oxygen in the way that it can tell it's

1966
01:18:00,540 --> 01:18:03,540
not in any way so the the there's an

1967
01:18:03,540 --> 01:18:05,820
expectation that that the

1968
01:18:05,820 --> 01:18:07,980
intermediary the reverse proxy is is

1969
01:18:07,980 --> 01:18:10,140
trusted to do this and it's simply

1970
01:18:10,140 --> 01:18:11,940
conveying the information to the back

1971
01:18:11,940 --> 01:18:14,520
end in which case I stand by my previous

1972
01:18:14,520 --> 01:18:17,699
statement this is terrifying

1973
01:18:17,699 --> 01:18:20,520
and that's why it's informational that

1974
01:18:20,520 --> 01:18:23,699
is part of why it's informational

1975
01:18:23,699 --> 01:18:25,800
Jonathan thank you for your uh for to

1976
01:18:25,800 --> 01:18:27,060
contribute to PR

1977
01:18:27,060 --> 01:18:29,420
aise

1978
01:18:31,980 --> 01:18:35,460
so actually uh to to follow up with that

1979
01:18:35,460 --> 01:18:37,800
statement this is one of the use cases

1980
01:18:37,800 --> 01:18:40,560
where this and the signatures draft uh

1981
01:18:40,560 --> 01:18:42,120
are intended to work hand in hand and we

1982
01:18:42,120 --> 01:18:43,500
actually call this out in the signatures

1983
01:18:43,500 --> 01:18:46,980
draft because something that a uh a

1984
01:18:46,980 --> 01:18:49,140
terminating TLS terminating reverse

1985
01:18:49,140 --> 01:18:50,280
proxy

1986
01:18:50,280 --> 01:18:52,380
can do with both of these drafts

1987
01:18:52,380 --> 01:18:55,860
together is send back is is to do the

1988
01:18:55,860 --> 01:18:59,699
TLs validation and then sign like add a

1989
01:18:59,699 --> 01:19:02,340
signature for this header to the message

1990
01:19:02,340 --> 01:19:04,860
on the way in that the original client

1991
01:19:04,860 --> 01:19:07,020
obviously isn't going to add in itself

1992
01:19:07,020 --> 01:19:09,540
so that the origin server sitting off in

1993
01:19:09,540 --> 01:19:12,540
a back in a back end somewhere will be

1994
01:19:12,540 --> 01:19:15,060
able to check the reverse proxy

1995
01:19:15,060 --> 01:19:17,640
signature against those inputs and then

1996
01:19:17,640 --> 01:19:19,440
that's how that trust is conveyed it's

1997
01:19:19,440 --> 01:19:21,719
it's a transitive process it requires a

1998
01:19:21,719 --> 01:19:25,080
lot of out-of-band uh configuration and

1999
01:19:25,080 --> 01:19:27,780
knowledge but it is one way to string

2000
01:19:27,780 --> 01:19:29,699
this together and you're still sort of

2001
01:19:29,699 --> 01:19:31,260
taking the reverse proxies word for it

2002
01:19:31,260 --> 01:19:33,140
it just is signing its word versus

2003
01:19:33,140 --> 01:19:36,060
relying on other mechanisms yeah so

2004
01:19:36,060 --> 01:19:39,659
there are all kinds of like obviously

2005
01:19:39,659 --> 01:19:41,040
you don't design protocol standing on

2006
01:19:41,040 --> 01:19:42,540
one foot but like

2007
01:19:42,540 --> 01:19:46,260
the the easy or not the easy huh

2008
01:19:46,260 --> 01:19:48,120
there seems to be an obvious way of

2009
01:19:48,120 --> 01:19:50,580
trying this with sort of exported

2010
01:19:50,580 --> 01:19:52,199
authenticators or like some kind of

2011
01:19:52,199 --> 01:19:54,420
certificate that's actually bound to the

2012
01:19:54,420 --> 01:19:57,120
TLs connection and then you just pass

2013
01:19:57,120 --> 01:20:00,179
through a proof that the

2014
01:20:00,179 --> 01:20:01,219
the the

2015
01:20:01,219 --> 01:20:04,199
terminating proxy controls this

2016
01:20:04,199 --> 01:20:06,179
particular session and that that

2017
01:20:06,179 --> 01:20:08,699
particular scientist client had signed

2018
01:20:08,699 --> 01:20:10,679
that particular session

2019
01:20:10,679 --> 01:20:13,040
like to prevent it

2020
01:20:13,040 --> 01:20:17,100
mismatching and swapping and so that was

2021
01:20:17,100 --> 01:20:18,719
discussed some I think when we talked

2022
01:20:18,719 --> 01:20:21,480
about adoption and uh the place we ended

2023
01:20:21,480 --> 01:20:24,120
up at was that this is the intention of

2024
01:20:24,120 --> 01:20:26,580
this draft is is to standardize existing

2025
01:20:26,580 --> 01:20:30,540
practice within the bounds of of

2026
01:20:30,540 --> 01:20:33,120
described thank you existing practice

2027
01:20:33,120 --> 01:20:36,120
and and align on a single header uh

2028
01:20:36,120 --> 01:20:38,159
because frankly a lot of reverse proxies

2029
01:20:38,159 --> 01:20:40,500
and cdns already do this

2030
01:20:40,500 --> 01:20:42,719
um and and so uh that that's one of the

2031
01:20:42,719 --> 01:20:43,739
reasons it's informational because we

2032
01:20:43,739 --> 01:20:44,820
don't want to put too strong of a

2033
01:20:44,820 --> 01:20:47,280
recommendation behind that realizing

2034
01:20:47,280 --> 01:20:48,600
that there are better Solutions it's

2035
01:20:48,600 --> 01:20:50,820
just that many felt that this would be

2036
01:20:50,820 --> 01:20:53,580
an improvement and uh uh it would be

2037
01:20:53,580 --> 01:20:55,560
more Deployable in at least in the

2038
01:20:55,560 --> 01:20:56,940
medium term

2039
01:20:56,940 --> 01:20:59,659
thank you

2040
01:21:00,060 --> 01:21:01,739
thanks for saying what I was trying to

2041
01:21:01,739 --> 01:21:04,620
say and sorry no no in better words I

2042
01:21:04,620 --> 01:21:06,300
appreciate that I was struggling over it

2043
01:21:06,300 --> 01:21:08,280
but that's a that's good context and I

2044
01:21:08,280 --> 01:21:09,659
think the correct

2045
01:21:09,659 --> 01:21:10,920
um summary of kind of how we got here

2046
01:21:10,920 --> 01:21:13,679
and what we're trying to accomplish yeah

2047
01:21:13,679 --> 01:21:15,360
anything else I think we're probably at

2048
01:21:15,360 --> 01:21:17,219
time on this one

2049
01:21:17,219 --> 01:21:18,780
all right working group last call will

2050
01:21:18,780 --> 01:21:20,340
continue if other folks want to take a

2051
01:21:20,340 --> 01:21:23,100
look and suggest some improvements uh we

2052
01:21:23,100 --> 01:21:24,120
should we should be at a working group

2053
01:21:24,120 --> 01:21:25,620
let's call pretty soon all right thank

2054
01:21:25,620 --> 01:21:28,400
you thank you

2055
01:21:30,920 --> 01:21:35,540
uh next up we have

2056
01:21:35,940 --> 01:21:38,340
cap of the day

2057
01:21:38,340 --> 01:21:40,739
a presentation about what the wonderful

2058
01:21:40,739 --> 01:21:43,080
people in mask are doing and how it may

2059
01:21:43,080 --> 01:21:45,840
or may not affect the world of http

2060
01:21:45,840 --> 01:21:47,460
sit back

2061
01:21:47,460 --> 01:21:48,960
get ready

2062
01:21:48,960 --> 01:21:51,840
to enjoy a mask Enthusiast at work David

2063
01:21:51,840 --> 01:21:54,620
skanazi

2064
01:21:55,800 --> 01:21:57,260
hello hello

2065
01:21:57,260 --> 01:22:00,719
everyone uh David scanazi mask

2066
01:22:00,719 --> 01:22:02,400
enthusiast

2067
01:22:02,400 --> 01:22:04,860
big surprise I know

2068
01:22:04,860 --> 01:22:08,940
um so uh the chairs of HTTP reached out

2069
01:22:08,940 --> 01:22:11,400
and asked if someone from Mass could uh

2070
01:22:11,400 --> 01:22:12,840
just give an update to the HTTP working

2071
01:22:12,840 --> 01:22:14,880
group about whatever the hell is going

2072
01:22:14,880 --> 01:22:17,219
on in mask because it's totally

2073
01:22:17,219 --> 01:22:20,040
different people sometimes mostly the

2074
01:22:20,040 --> 01:22:21,659
same people but not everyone knows and

2075
01:22:21,659 --> 01:22:22,920
some people might care and they don't

2076
01:22:22,920 --> 01:22:26,060
know next slide please

2077
01:22:27,480 --> 01:22:31,980
geez that is slow uh so what is mask so

2078
01:22:31,980 --> 01:22:34,980
the acronym is multiplexed application

2079
01:22:34,980 --> 01:22:37,500
substrate over quick encryption which is

2080
01:22:37,500 --> 01:22:39,600
quite a mouthful

2081
01:22:39,600 --> 01:22:41,600
um we came up with the name back in 2018

2082
01:22:41,600 --> 01:22:44,580
uh it was quite unfortunate that there

2083
01:22:44,580 --> 01:22:47,040
was then a global pandemic

2084
01:22:47,040 --> 01:22:49,320
um for actually more reasons than this

2085
01:22:49,320 --> 01:22:51,540
but um

2086
01:22:51,540 --> 01:22:54,719
but so now everyone Associates it with a

2087
01:22:54,719 --> 01:22:56,820
covet mask but that's not what we were

2088
01:22:56,820 --> 01:23:00,900
going for anyway uh why do we care next

2089
01:23:00,900 --> 01:23:03,440
slide please

2090
01:23:05,300 --> 01:23:09,719
so in a one-liner sentence it's we run

2091
01:23:09,719 --> 01:23:11,940
the internet over HTTP and if you think

2092
01:23:11,940 --> 01:23:13,679
that it's completely insane you're

2093
01:23:13,679 --> 01:23:17,360
probably not wrong next slide

2094
01:23:18,860 --> 01:23:22,800
so just kind of a quick history lesson

2095
01:23:22,800 --> 01:23:26,100
here back in the good old days of HTTP

2096
01:23:26,100 --> 01:23:29,280
before they had this thing called SSL

2097
01:23:29,280 --> 01:23:30,239
um

2098
01:23:30,239 --> 01:23:33,360
like bandwidth was expensive and people

2099
01:23:33,360 --> 01:23:35,580
will building cash servers especially if

2100
01:23:35,580 --> 01:23:37,320
they were on other continents where

2101
01:23:37,320 --> 01:23:40,199
things were really really far away uh

2102
01:23:40,199 --> 01:23:42,600
now we call them intermediaries

2103
01:23:42,600 --> 01:23:43,440
um

2104
01:23:43,440 --> 01:23:45,900
and then there was the idea like an

2105
01:23:45,900 --> 01:23:47,640
Enterprise or School networks that you

2106
01:23:47,640 --> 01:23:48,840
would intentionally go talk to that

2107
01:23:48,840 --> 01:23:50,159
terminatory because it's getting stuff

2108
01:23:50,159 --> 01:23:52,620
to you faster because it's already has

2109
01:23:52,620 --> 01:23:53,880
it cached

2110
01:23:53,880 --> 01:23:56,060
um that was you know in what we call Web

2111
01:23:56,060 --> 01:23:58,500
1.0 these days

2112
01:23:58,500 --> 01:24:00,060
um because everyone was loading the same

2113
01:24:00,060 --> 01:24:01,739
thing so you could cache it and nothing

2114
01:24:01,739 --> 01:24:04,020
was encrypted

2115
01:24:04,020 --> 01:24:06,179
um but then eventually SSL happened and

2116
01:24:06,179 --> 01:24:07,920
as usual the security people ruin

2117
01:24:07,920 --> 01:24:09,780
everything for everyone by making things

2118
01:24:09,780 --> 01:24:12,960
safer and not working anymore

2119
01:24:12,960 --> 01:24:15,179
um and so

2120
01:24:15,179 --> 01:24:17,580
people had to deployed these boxes and

2121
01:24:17,580 --> 01:24:18,900
were saying no if you want to reach the

2122
01:24:18,900 --> 01:24:20,880
internet you have to go through our HTTP

2123
01:24:20,880 --> 01:24:23,100
proxy because that reduces our internet

2124
01:24:23,100 --> 01:24:25,620
bill but now if you want to do TLS

2125
01:24:25,620 --> 01:24:28,679
through that you were stuck so the

2126
01:24:28,679 --> 01:24:30,780
connect method for H for HTTP was

2127
01:24:30,780 --> 01:24:32,699
invented so you could run a TCP through

2128
01:24:32,699 --> 01:24:34,679
and then run your SSL everyone's happy

2129
01:24:34,679 --> 01:24:36,000
again

2130
01:24:36,000 --> 01:24:39,000
fast forward multiple decades and we

2131
01:24:39,000 --> 01:24:40,860
eventually remember that the internet is

2132
01:24:40,860 --> 01:24:43,320
not just TCP

2133
01:24:43,320 --> 01:24:45,780
um quick is a thing quick becomes

2134
01:24:45,780 --> 01:24:49,080
standardized as at the ITF ah crap quick

2135
01:24:49,080 --> 01:24:50,760
runs over ADP how could we have

2136
01:24:50,760 --> 01:24:53,100
predicted this how do we get that over

2137
01:24:53,100 --> 01:24:55,679
http

2138
01:24:55,679 --> 01:24:59,840
next slide please Q mask

2139
01:25:01,100 --> 01:25:05,280
oh wow that is slow uh so the idea was

2140
01:25:05,280 --> 01:25:08,640
let's we already can proxy TCP turns out

2141
01:25:08,640 --> 01:25:10,500
that UDP is becoming even more of a

2142
01:25:10,500 --> 01:25:13,020
thing now and there are things that are

2143
01:25:13,020 --> 01:25:15,840
neither TCP nor UDP like the sctp people

2144
01:25:15,840 --> 01:25:18,239
still talk inside ITF and there are

2145
01:25:18,239 --> 01:25:22,080
other things so let's just add a add a

2146
01:25:22,080 --> 01:25:23,820
thing for that so let's just do connect

2147
01:25:23,820 --> 01:25:27,060
for UDP so let's call it connect UDP

2148
01:25:27,060 --> 01:25:29,159
and then we got to arguing for about

2149
01:25:29,159 --> 01:25:31,080
three years on how exactly to do that

2150
01:25:31,080 --> 01:25:33,000
and you end up with a solution that's

2151
01:25:33,000 --> 01:25:34,320
kind of as simple as you would imagine

2152
01:25:34,320 --> 01:25:36,300
where you take the UDP and you put it in

2153
01:25:36,300 --> 01:25:38,699
in the packet and you send it uh so we

2154
01:25:38,699 --> 01:25:40,800
got that published a few months ago

2155
01:25:40,800 --> 01:25:43,199
which was really nice

2156
01:25:43,199 --> 01:25:43,920
um

2157
01:25:43,920 --> 01:25:46,800
fun time and

2158
01:25:46,800 --> 01:25:49,440
because we had to have quite a few bike

2159
01:25:49,440 --> 01:25:52,380
sheds we decided to split the baby in

2160
01:25:52,380 --> 01:25:54,840
half so there's one RFC for proxy UDP

2161
01:25:54,840 --> 01:25:57,540
and HTTP and one RFC that it depends on

2162
01:25:57,540 --> 01:26:00,360
which is HTTP datagrams and also the

2163
01:26:00,360 --> 01:26:01,679
capsule protocol because we didn't

2164
01:26:01,679 --> 01:26:03,120
couldn't come up with a better name than

2165
01:26:03,120 --> 01:26:06,360
capsule so HTTP datagrams the idea is

2166
01:26:06,360 --> 01:26:08,880
that in addition to your regular HTTP

2167
01:26:08,880 --> 01:26:11,159
stream which is a concept that we've had

2168
01:26:11,159 --> 01:26:14,639
since HTTP 2 you can send datagram for

2169
01:26:14,639 --> 01:26:16,620
little bits of data and that's really

2170
01:26:16,620 --> 01:26:18,480
handy if you want to send UDP you just

2171
01:26:18,480 --> 01:26:21,360
put them in there the really reason for

2172
01:26:21,360 --> 01:26:23,100
that this exists is that you can then

2173
01:26:23,100 --> 01:26:25,679
map it to a quick datagram frame which

2174
01:26:25,679 --> 01:26:27,480
doesn't get retransmitted which is

2175
01:26:27,480 --> 01:26:29,100
exactly what you want for connect2db

2176
01:26:29,100 --> 01:26:30,780
because if you put it inside the stream

2177
01:26:30,780 --> 01:26:33,780
you'd get bad performance

2178
01:26:33,780 --> 01:26:35,159
um and

2179
01:26:35,159 --> 01:26:37,020
the capsule protocol that I mentioned

2180
01:26:37,020 --> 01:26:38,520
was something that we thought would be

2181
01:26:38,520 --> 01:26:41,880
useful a it's useful for like HTTP one

2182
01:26:41,880 --> 01:26:43,620
and two or you don't have the quick data

2183
01:26:43,620 --> 01:26:45,840
grab frame and it's also useful for

2184
01:26:45,840 --> 01:26:48,239
other things or more we wanted it for

2185
01:26:48,239 --> 01:26:50,040
that and we said well let's toss in a

2186
01:26:50,040 --> 01:26:52,020
tlv so it's extensible we have some use

2187
01:26:52,020 --> 01:26:54,000
cases for it so it allows you to send

2188
01:26:54,000 --> 01:26:55,440
something all the way through all the

2189
01:26:55,440 --> 01:26:57,480
intermediaries

2190
01:26:57,480 --> 01:26:59,280
um reliably

2191
01:26:59,280 --> 01:27:01,620
and so those were our first deliverables

2192
01:27:01,620 --> 01:27:03,380
here I've seen shipped a few months ago

2193
01:27:03,380 --> 01:27:06,300
we are working now on proxying IP and

2194
01:27:06,300 --> 01:27:10,139
HTTP we had a whole nice fun detour on

2195
01:27:10,139 --> 01:27:12,600
writing a requirements document uh for

2196
01:27:12,600 --> 01:27:13,620
that first

2197
01:27:13,620 --> 01:27:15,900
which I was kind of annoyed at Mark when

2198
01:27:15,900 --> 01:27:18,120
he suggested that at that first but he

2199
01:27:18,120 --> 01:27:19,560
made a point that like oh you're not

2200
01:27:19,560 --> 01:27:21,000
actually all agreeing on what you mean

2201
01:27:21,000 --> 01:27:24,300
by proxying IP and you were right so we

2202
01:27:24,300 --> 01:27:25,920
ended up arguing on the requirements

2203
01:27:25,920 --> 01:27:27,719
document instead of arguing on the

2204
01:27:27,719 --> 01:27:30,360
discussion on the solution document but

2205
01:27:30,360 --> 01:27:31,320
at least when we went to build the

2206
01:27:31,320 --> 01:27:32,460
solution we knew what we were going to

2207
01:27:32,460 --> 01:27:34,739
build so that's been taken care of we're

2208
01:27:34,739 --> 01:27:36,300
building the solution and we're pretty

2209
01:27:36,300 --> 01:27:38,699
close to done uh so we'll be discussing

2210
01:27:38,699 --> 01:27:40,860
this at the mask meeting which is

2211
01:27:40,860 --> 01:27:43,440
sometime this week uh come if you're

2212
01:27:43,440 --> 01:27:45,179
interested but we're pretty close to

2213
01:27:45,179 --> 01:27:48,380
done next slide please

2214
01:27:49,460 --> 01:27:53,040
so what why would you want mask

2215
01:27:53,040 --> 01:27:54,120
um

2216
01:27:54,120 --> 01:27:56,699
one of the things we discussed at the

2217
01:27:56,699 --> 01:27:59,400
beginning of the the effort was

2218
01:27:59,400 --> 01:28:02,340
do we want this to be over HTTP we all

2219
01:28:02,340 --> 01:28:03,480
agreed that it had to be on quick

2220
01:28:03,480 --> 01:28:06,420
because quick is the best thing ever uh

2221
01:28:06,420 --> 01:28:08,639
but then do we put it over HTTP 3 or

2222
01:28:08,639 --> 01:28:11,280
other things and we're thinking well

2223
01:28:11,280 --> 01:28:13,980
sometimes it's nice to be able to run

2224
01:28:13,980 --> 01:28:16,800
over networks that block qdp so putting

2225
01:28:16,800 --> 01:28:18,420
it out of http means you have access to

2226
01:28:18,420 --> 01:28:21,420
http one and two uh I really like the

2227
01:28:21,420 --> 01:28:23,100
fact that if you put it over HTTP then

2228
01:28:23,100 --> 01:28:24,960
it starts looking like web traffic so it

2229
01:28:24,960 --> 01:28:26,820
makes it really harder to block so now

2230
01:28:26,820 --> 01:28:28,380
you have a VPN that looks like web

2231
01:28:28,380 --> 01:28:31,860
traffic hard to censor I like that uh

2232
01:28:31,860 --> 01:28:33,360
don't say that some people don't like

2233
01:28:33,360 --> 01:28:34,620
that

2234
01:28:34,620 --> 01:28:36,960
um another part that I hadn't thought of

2235
01:28:36,960 --> 01:28:39,300
at all but that we realized was

2236
01:28:39,300 --> 01:28:42,420
companies like Google have already put

2237
01:28:42,420 --> 01:28:45,480
in a lot of effort in having a really

2238
01:28:45,480 --> 01:28:48,659
good HTTP server and so a quick stack

2239
01:28:48,659 --> 01:28:50,520
that's efficient and security reviewed

2240
01:28:50,520 --> 01:28:53,340
and HTTP HTTP load balancers and if you

2241
01:28:53,340 --> 01:28:54,840
build this over HP you kind of get to

2242
01:28:54,840 --> 01:28:57,540
reuse all of this for free so we end up

2243
01:28:57,540 --> 01:28:59,699
like in places where like oh can we use

2244
01:28:59,699 --> 01:29:02,040
ipsec and people were like no we'd have

2245
01:29:02,040 --> 01:29:04,020
to review that whole new stack and we

2246
01:29:04,020 --> 01:29:05,699
don't want to can you just find a way to

2247
01:29:05,699 --> 01:29:07,320
make it work over quick

2248
01:29:07,320 --> 01:29:09,540
and then there's a fun story there where

2249
01:29:09,540 --> 01:29:11,940
Alex and others back at Google actually

2250
01:29:11,940 --> 01:29:14,520
implemented a VPN over quick way before

2251
01:29:14,520 --> 01:29:16,620
the mask effort and

2252
01:29:16,620 --> 01:29:18,480
was kind of the Catalyst for the whole

2253
01:29:18,480 --> 01:29:20,400
thing and then we are closing the loop

2254
01:29:20,400 --> 01:29:23,760
on making that use mask now which is fun

2255
01:29:23,760 --> 01:29:27,120
um and then when we built this

2256
01:29:27,120 --> 01:29:30,420
um folks that like to use buzzwords like

2257
01:29:30,420 --> 01:29:32,699
zero trust and other things that and

2258
01:29:32,699 --> 01:29:34,440
serverless and things that I don't

2259
01:29:34,440 --> 01:29:36,540
understand said oh this is great can I

2260
01:29:36,540 --> 01:29:40,260
use this too uh and they were apparently

2261
01:29:40,260 --> 01:29:41,580
much the problem they had was they had

2262
01:29:41,580 --> 01:29:43,679
VMS in the cloud somewhere that needed

2263
01:29:43,679 --> 01:29:46,199
to talk to each other but there were

2264
01:29:46,199 --> 01:29:48,659
HTTP load balancers in the middle and

2265
01:29:48,659 --> 01:29:50,580
they wanted magic crypto and we said

2266
01:29:50,580 --> 01:29:52,800
well actually they had built something

2267
01:29:52,800 --> 01:29:54,480
using connect because that was the

2268
01:29:54,480 --> 01:29:56,520
simplest thing for them and then they

2269
01:29:56,520 --> 01:29:58,620
had a customer who wanted UDP so boom

2270
01:29:58,620 --> 01:29:59,880
this actually works for there like

2271
01:29:59,880 --> 01:30:04,400
reusing stuff is useful next slide

2272
01:30:05,400 --> 01:30:08,699
so where are we going from here uh the

2273
01:30:08,699 --> 01:30:10,320
mass working group was very tightly

2274
01:30:10,320 --> 01:30:12,300
scoped to make sure we didn't get too

2275
01:30:12,300 --> 01:30:14,280
distracted and to make it to kind of get

2276
01:30:14,280 --> 01:30:16,860
us to focus on shipping connect2dp and

2277
01:30:16,860 --> 01:30:18,060
connect IP

2278
01:30:18,060 --> 01:30:20,520
uh but now that we're almost done with

2279
01:30:20,520 --> 01:30:23,699
that uh we're talking about a sculptory

2280
01:30:23,699 --> 01:30:26,219
chartering for future things so that's

2281
01:30:26,219 --> 01:30:28,020
also on our agenda

2282
01:30:28,020 --> 01:30:29,880
um we don't I don't I don't think the

2283
01:30:29,880 --> 01:30:32,159
current plan from what I hear far on my

2284
01:30:32,159 --> 01:30:34,739
isg overlords is that they don't want to

2285
01:30:34,739 --> 01:30:36,239
mask maintenance working group that

2286
01:30:36,239 --> 01:30:38,040
lasts forever we'll just re-charter for

2287
01:30:38,040 --> 01:30:39,840
a few scoped extensions do those and

2288
01:30:39,840 --> 01:30:42,360
then potentially shut it down and say

2289
01:30:42,360 --> 01:30:44,159
future things happen in the HTTP working

2290
01:30:44,159 --> 01:30:46,380
group we'll have to discuss those things

2291
01:30:46,380 --> 01:30:47,880
it's not entirely figured out but I

2292
01:30:47,880 --> 01:30:49,620
guess that's what's going to happen but

2293
01:30:49,620 --> 01:30:51,000
what are the extensions that we've been

2294
01:30:51,000 --> 01:30:52,820
discussing that might happen before then

2295
01:30:52,820 --> 01:30:55,500
so first we have extensions to connect

2296
01:30:55,500 --> 01:30:56,340
UDP

2297
01:30:56,340 --> 01:30:58,980
so connect UDP is similar connect kind

2298
01:30:58,980 --> 01:31:01,320
of gives you a connected five Tuple

2299
01:31:01,320 --> 01:31:02,940
but if you want to do something like

2300
01:31:02,940 --> 01:31:04,920
webrtc where you're talking to multiple

2301
01:31:04,920 --> 01:31:06,719
hosts you're one proxy it doesn't work

2302
01:31:06,719 --> 01:31:08,880
for that so we have a little extension

2303
01:31:08,880 --> 01:31:12,000
for for doing that we have an extension

2304
01:31:12,000 --> 01:31:14,580
for doing quick over connect GDP you can

2305
01:31:14,580 --> 01:31:17,400
run quick over connect2dp non-extended

2306
01:31:17,400 --> 01:31:19,860
but Tommy had some clever ideas on how

2307
01:31:19,860 --> 01:31:22,040
you can optimize that and make it better

2308
01:31:22,040 --> 01:31:24,659
we have extensions kind of at the HTTP

2309
01:31:24,659 --> 01:31:26,280
datagram layer

2310
01:31:26,280 --> 01:31:29,159
Marcus and Erickson folks have an idea

2311
01:31:29,159 --> 01:31:31,860
for adding sequence numbers to catch

2312
01:31:31,860 --> 01:31:34,139
reordering when they're doing multi-path

2313
01:31:34,139 --> 01:31:34,980
quick

2314
01:31:34,980 --> 01:31:38,580
uh there's an extension from Ben

2315
01:31:38,580 --> 01:31:41,580
um about uh having a way to figure out

2316
01:31:41,580 --> 01:31:44,580
your path MTU through the entire chain

2317
01:31:44,580 --> 01:31:46,620
between your client and your endpoint so

2318
01:31:46,620 --> 01:31:48,080
that way it makes it easier to run

2319
01:31:48,080 --> 01:31:50,400
protocols unlike quick they can't do it

2320
01:31:50,400 --> 01:31:52,980
themselves Lucas has a draft about

2321
01:31:52,980 --> 01:31:56,580
priorities in HTTP datagrams that he's

2322
01:31:56,580 --> 01:32:01,100
very excited about next slide please

2323
01:32:01,440 --> 01:32:04,080
and we have some

2324
01:32:04,080 --> 01:32:06,840
um generic like other HTTP extensions

2325
01:32:06,840 --> 01:32:11,219
that the authors were thinking like

2326
01:32:11,219 --> 01:32:13,500
mainly in the context of mask but

2327
01:32:13,500 --> 01:32:16,260
could also be applicable to other HTTP

2328
01:32:16,260 --> 01:32:18,480
use cases so we haven't selected the

2329
01:32:18,480 --> 01:32:20,100
view in a venue like all this feature

2330
01:32:20,100 --> 01:32:20,940
work that I'm talking about is

2331
01:32:20,940 --> 01:32:23,760
individual drafts so Tommy has something

2332
01:32:23,760 --> 01:32:26,820
about sending more DNS information as

2333
01:32:26,820 --> 01:32:29,400
using the recently published proxy

2334
01:32:29,400 --> 01:32:33,380
status header and Ben has documents on

2335
01:32:33,380 --> 01:32:36,560
describing what mask services and HTTP

2336
01:32:36,560 --> 01:32:39,900
origin has and on modernizing connect

2337
01:32:39,900 --> 01:32:43,638
itself next slide

2338
01:32:44,940 --> 01:32:48,060
all right so we are meeting this week on

2339
01:32:48,060 --> 01:32:50,520
Wednesday we have a mailing list a

2340
01:32:50,520 --> 01:32:53,760
GitHub like all the cool kids uh if any

2341
01:32:53,760 --> 01:32:56,100
of this sounds interesting to you uh

2342
01:32:56,100 --> 01:32:58,739
please show up please come and we're

2343
01:32:58,739 --> 01:33:00,659
happy to bike shed on all the things as

2344
01:33:00,659 --> 01:33:01,980
we always do

2345
01:33:01,980 --> 01:33:05,540
that's it any questions

2346
01:33:06,080 --> 01:33:07,860
[Music]

2347
01:33:07,860 --> 01:33:10,519
any questions

2348
01:33:11,460 --> 01:33:13,500
this is mostly informational and then

2349
01:33:13,500 --> 01:33:15,000
some of the folks are already uh very

2350
01:33:15,000 --> 01:33:16,620
familiar with us we just thought it'd be

2351
01:33:16,620 --> 01:33:17,880
good to make sure that everybody in the

2352
01:33:17,880 --> 01:33:19,080
working group here was aware of what was

2353
01:33:19,080 --> 01:33:20,760
happening over there especially as you

2354
01:33:20,760 --> 01:33:21,900
get a little bit closer to stuff that

2355
01:33:21,900 --> 01:33:23,699
happens inside of http

2356
01:33:23,699 --> 01:33:24,960
so thank you very much for that really

2357
01:33:24,960 --> 01:33:26,880
appreciate it

2358
01:33:26,880 --> 01:33:29,040
um and with that I think

2359
01:33:29,040 --> 01:33:30,960
we're done for today let's check the

2360
01:33:30,960 --> 01:33:32,699
agenda

2361
01:33:32,699 --> 01:33:34,800
yes we are

2362
01:33:34,800 --> 01:33:37,940
fantastic sorry

2363
01:33:42,060 --> 01:33:45,000
oh what time is it well we have 25

2364
01:33:45,000 --> 01:33:46,260
minutes

2365
01:33:46,260 --> 01:33:48,000
your presentation from Friday being

2366
01:33:48,000 --> 01:33:50,699
which one on profited authentication I'm

2367
01:33:50,699 --> 01:33:53,239
prompted

2368
01:33:53,340 --> 01:33:54,239
um

2369
01:33:54,239 --> 01:33:55,620
in principle I don't have a problem with

2370
01:33:55,620 --> 01:33:57,239
that I'm just worried that somebody who

2371
01:33:57,239 --> 01:33:58,860
was expecting it on Friday might be a

2372
01:33:58,860 --> 01:34:00,239
little surprised by that but of course

2373
01:34:00,239 --> 01:34:02,219
there is always the mailing list uh

2374
01:34:02,219 --> 01:34:03,900
where if if we do adopt something or

2375
01:34:03,900 --> 01:34:05,580
whatever it'll make these senses so as

2376
01:34:05,580 --> 01:34:07,139
long as whatever happens goes to melon

2377
01:34:07,139 --> 01:34:09,960
must I think yeah which it would yeah

2378
01:34:09,960 --> 01:34:10,739
um

2379
01:34:10,739 --> 01:34:13,739
I think so sure any instructions to that

2380
01:34:13,739 --> 01:34:16,920
Tommy are you still awake I I am I'm

2381
01:34:16,920 --> 01:34:19,500
hanging in there got my coffee um yeah I

2382
01:34:19,500 --> 01:34:21,960
think that sounds fine

2383
01:34:21,960 --> 01:34:23,520
um

2384
01:34:23,520 --> 01:34:24,659
yeah

2385
01:34:24,659 --> 01:34:26,940
okay thank you reordering is something

2386
01:34:26,940 --> 01:34:28,320
we're still a little unfamiliar here in

2387
01:34:28,320 --> 01:34:33,000
HTTP land so you know I know

2388
01:34:33,000 --> 01:34:35,239
we have a mask for that

2389
01:34:35,239 --> 01:34:37,380
there's a better way to phrase that I'm

2390
01:34:37,380 --> 01:34:38,520
sure

2391
01:34:38,520 --> 01:34:42,120
all right hello it's me again

2392
01:34:42,120 --> 01:34:45,420
um David's kanazi HTTP Enthusiast

2393
01:34:45,420 --> 01:34:49,440
um so this so this is a draft that was

2394
01:34:49,440 --> 01:34:51,480
initially

2395
01:34:51,480 --> 01:34:53,880
part of the original Mass proposal so

2396
01:34:53,880 --> 01:34:56,699
this is actually not a bad segue and

2397
01:34:56,699 --> 01:34:58,980
people gave me very good advice at the

2398
01:34:58,980 --> 01:35:00,360
beginning that you don't merge

2399
01:35:00,360 --> 01:35:02,400
everything into a big castle in the sky

2400
01:35:02,400 --> 01:35:04,139
and otherwise it doesn't work you split

2401
01:35:04,139 --> 01:35:05,699
it up into small bits that makes sense

2402
01:35:05,699 --> 01:35:07,679
and so this was one of those that then

2403
01:35:07,679 --> 01:35:09,840
went dormant as we were all focusing on

2404
01:35:09,840 --> 01:35:12,960
mask itself and now people reached out

2405
01:35:12,960 --> 01:35:14,219
that were interested in it and I'm

2406
01:35:14,219 --> 01:35:15,600
trying to resurrect it and see where we

2407
01:35:15,600 --> 01:35:16,800
want to go with it

2408
01:35:16,800 --> 01:35:18,960
um so this now we have multiple

2409
01:35:18,960 --> 01:35:21,179
co-authors this work is joined with

2410
01:35:21,179 --> 01:35:23,699
David Oliver who's I think attending

2411
01:35:23,699 --> 01:35:25,860
virtually this time and Jonathan who's

2412
01:35:25,860 --> 01:35:30,080
right there next slide please

2413
01:35:31,980 --> 01:35:34,500
so

2414
01:35:34,500 --> 01:35:36,480
um the the draft initially was called

2415
01:35:36,480 --> 01:35:38,340
transport authentication and the reason

2416
01:35:38,340 --> 01:35:40,440
for that was that the

2417
01:35:40,440 --> 01:35:44,159
original mask proposal was uh I think

2418
01:35:44,159 --> 01:35:46,560
the term is monstrosity in terms of HTTP

2419
01:35:46,560 --> 01:35:48,480
semantics because it took over the whole

2420
01:35:48,480 --> 01:35:50,820
connection and did things that were very

2421
01:35:50,820 --> 01:35:53,699
evil by HTTP standards and so the new

2422
01:35:53,699 --> 01:35:55,920
version of masks as we talked about fits

2423
01:35:55,920 --> 01:35:58,980
into HTTP semantics but because of this

2424
01:35:58,980 --> 01:36:01,440
the old version needed a way to

2425
01:36:01,440 --> 01:36:03,600
authenticate the whole transport

2426
01:36:03,600 --> 01:36:06,780
um now we don't need that anymore so the

2427
01:36:06,780 --> 01:36:08,340
draft has been kind of completely

2428
01:36:08,340 --> 01:36:10,920
Rewritten the cryptography bits are

2429
01:36:10,920 --> 01:36:13,320
still in there but now it it fits in

2430
01:36:13,320 --> 01:36:15,239
HTTP semantics similar to how mask does

2431
01:36:15,239 --> 01:36:18,440
uh next slide

2432
01:36:20,780 --> 01:36:24,780
so the the motivation we have is we want

2433
01:36:24,780 --> 01:36:27,300
the client to authenticate to the server

2434
01:36:27,300 --> 01:36:30,179
uh to the origin as is commonly done

2435
01:36:30,179 --> 01:36:32,460
with HTTP Authentication

2436
01:36:32,460 --> 01:36:34,139
um we want to use asymmetric

2437
01:36:34,139 --> 01:36:35,940
cryptography because there are some use

2438
01:36:35,940 --> 01:36:38,820
cases where you want to be able to

2439
01:36:38,820 --> 01:36:41,400
share the like access list with their

2440
01:36:41,400 --> 01:36:44,040
public Keys across multiple Origins that

2441
01:36:44,040 --> 01:36:46,139
don't necessarily trust each other and

2442
01:36:46,139 --> 01:36:47,760
you want to avoid having an Argent be

2443
01:36:47,760 --> 01:36:49,760
able to impersonate one of the clients

2444
01:36:49,760 --> 01:36:52,800
and then the third requirement is we

2445
01:36:52,800 --> 01:36:55,380
want the server to hide the fact that it

2446
01:36:55,380 --> 01:36:57,840
serves authenticated resources so what I

2447
01:36:57,840 --> 01:37:00,060
mean by that is if you try to get this

2448
01:37:00,060 --> 01:37:02,400
resource you don't want a server to send

2449
01:37:02,400 --> 01:37:04,739
you a 401 and the reason for that is

2450
01:37:04,739 --> 01:37:06,900
let's say you have your personal website

2451
01:37:06,900 --> 01:37:08,760
but you want to offer some mask services

2452
01:37:08,760 --> 01:37:11,820
to authenticated clients you don't want

2453
01:37:11,820 --> 01:37:13,380
someone to be able to probe your server

2454
01:37:13,380 --> 01:37:15,600
and go oh no no that offers Mass that's

2455
01:37:15,600 --> 01:37:18,420
blocked on my network bang bang

2456
01:37:18,420 --> 01:37:21,780
um so those are the three like I'm gonna

2457
01:37:21,780 --> 01:37:24,060
dive a bit into the solution space in

2458
01:37:24,060 --> 01:37:27,120
this presentation but the the goal or

2459
01:37:27,120 --> 01:37:29,580
the interest of this draft is really to

2460
01:37:29,580 --> 01:37:32,760
get in see if there is interest in those

2461
01:37:32,760 --> 01:37:35,040
requirements and that motivation because

2462
01:37:35,040 --> 01:37:37,199
everything of the solution is completely

2463
01:37:37,199 --> 01:37:40,679
like Up For Debate or any discussion I'm

2464
01:37:40,679 --> 01:37:42,239
just this is what I care about

2465
01:37:42,239 --> 01:37:44,580
personally with this proposal next slide

2466
01:37:44,580 --> 01:37:46,320
just to be clear your third requirement

2467
01:37:46,320 --> 01:37:48,000
there is that the server hides the fact

2468
01:37:48,000 --> 01:37:49,560
that it can serve authenticated

2469
01:37:49,560 --> 01:37:52,139
resources uh yes so not that it is

2470
01:37:52,139 --> 01:37:54,780
serving ah so yeah let me rephrase that

2471
01:37:54,780 --> 01:37:56,639
I guess that's not very well written um

2472
01:37:56,639 --> 01:38:00,540
let's say that the the server offers a

2473
01:38:00,540 --> 01:38:03,179
resource to only authenticated clients

2474
01:38:03,179 --> 01:38:05,420
that's a common thing and an

2475
01:38:05,420 --> 01:38:07,980
unauthenticated client must not be able

2476
01:38:07,980 --> 01:38:09,780
to find out whether that's the case or

2477
01:38:09,780 --> 01:38:12,179
not so it can't probe the server to find

2478
01:38:12,179 --> 01:38:15,360
out that the resources there you're just

2479
01:38:15,360 --> 01:38:16,739
not allowed to see it

2480
01:38:16,739 --> 01:38:17,880
okay

2481
01:38:17,880 --> 01:38:19,620
I'm thinking about the very header but

2482
01:38:19,620 --> 01:38:24,559
okay about what the very header yeah

2483
01:38:26,340 --> 01:38:29,280
so the why don't we already have this in

2484
01:38:29,280 --> 01:38:31,020
our very large suite of HTTP

2485
01:38:31,020 --> 01:38:33,060
authentication methods

2486
01:38:33,060 --> 01:38:36,120
um so if you're doing cryptography and

2487
01:38:36,120 --> 01:38:37,500
you're using a signature you need

2488
01:38:37,500 --> 01:38:38,699
something to sign

2489
01:38:38,699 --> 01:38:40,620
and you need that to be fresh otherwise

2490
01:38:40,620 --> 01:38:44,219
this is things are replayable so in

2491
01:38:44,219 --> 01:38:46,199
common protocols today the way we do

2492
01:38:46,199 --> 01:38:48,659
that is the server sends announced the

2493
01:38:48,659 --> 01:38:50,280
client signs that nonce sends the

2494
01:38:50,280 --> 01:38:51,840
signature back and the server goes great

2495
01:38:51,840 --> 01:38:53,639
that's fresh

2496
01:38:53,639 --> 01:38:56,040
um but that breaks our requirement of

2497
01:38:56,040 --> 01:38:58,380
the server not

2498
01:38:58,380 --> 01:39:00,600
letting on that it does this because if

2499
01:39:00,600 --> 01:39:02,280
it sends a nonce you go oh I got an

2500
01:39:02,280 --> 01:39:03,600
answer from you I know you all you you

2501
01:39:03,600 --> 01:39:07,199
support this scheme uh so hoba is a is a

2502
01:39:07,199 --> 01:39:08,699
means that that does that for example

2503
01:39:08,699 --> 01:39:10,560
that's already standardized

2504
01:39:10,560 --> 01:39:12,840
um but that leaks the fact that the

2505
01:39:12,840 --> 01:39:16,340
server does this next slide please

2506
01:39:16,860 --> 01:39:18,540
so

2507
01:39:18,540 --> 01:39:21,120
the idea we had where I think the clever

2508
01:39:21,120 --> 01:39:23,280
part came from Chris Wood I think but

2509
01:39:23,280 --> 01:39:27,239
anyway is if you use TLS key exporters

2510
01:39:27,239 --> 01:39:30,000
uh that gives you announce because both

2511
01:39:30,000 --> 01:39:31,620
the client and server have fed

2512
01:39:31,620 --> 01:39:34,440
information into the TLs key exchange

2513
01:39:34,440 --> 01:39:38,880
so you know that a key exporter is fresh

2514
01:39:38,880 --> 01:39:41,219
the

2515
01:39:41,219 --> 01:39:43,440
uh I'm blanking on the name

2516
01:39:43,440 --> 01:39:45,060
um

2517
01:39:45,060 --> 01:39:47,520
Channel binding use that as well um but

2518
01:39:47,520 --> 01:39:48,780
we're not doing Channel binding very

2519
01:39:48,780 --> 01:39:51,179
different but like just that same idea

2520
01:39:51,179 --> 01:39:53,880
of using a key exporter not to generate

2521
01:39:53,880 --> 01:39:56,400
a key but just to use it as a nonce so

2522
01:39:56,400 --> 01:39:57,360
that doesn't link any information

2523
01:39:57,360 --> 01:39:59,580
because any side can export the key

2524
01:39:59,580 --> 01:40:00,780
locally

2525
01:40:00,780 --> 01:40:05,340
and it can be replayed either empty

2526
01:40:08,219 --> 01:40:10,679
I don't know if you've uh thought about

2527
01:40:10,679 --> 01:40:13,199
this one but it it's possible that in

2528
01:40:13,199 --> 01:40:16,980
certain contexts say like web browsers

2529
01:40:16,980 --> 01:40:20,040
an adversary might be in a position to

2530
01:40:20,040 --> 01:40:22,739
uh

2531
01:40:22,739 --> 01:40:24,780
for example

2532
01:40:24,780 --> 01:40:27,090
um make requests and

2533
01:40:27,090 --> 01:40:28,199
[Music]

2534
01:40:28,199 --> 01:40:30,900
um this only prevents

2535
01:40:30,900 --> 01:40:33,719
the authenticator from being moved to

2536
01:40:33,719 --> 01:40:35,100
another connection that doesn't prevent

2537
01:40:35,100 --> 01:40:36,600
it from being reused on the same

2538
01:40:36,600 --> 01:40:38,780
connection

2539
01:40:39,560 --> 01:40:42,320
so that's

2540
01:40:42,320 --> 01:40:46,380
but you like you still need the private

2541
01:40:46,380 --> 01:40:47,940
key to be able to you don't need the

2542
01:40:47,940 --> 01:40:50,880
property you just need to see the output

2543
01:40:50,880 --> 01:40:53,159
and if you can copy the output

2544
01:40:53,159 --> 01:40:56,520
you get to so how could you get access

2545
01:40:56,520 --> 01:40:58,260
to that output

2546
01:40:58,260 --> 01:41:00,179
or sorry what output

2547
01:41:00,179 --> 01:41:01,739
so the headers that you're sending this

2548
01:41:01,739 --> 01:41:03,300
is this is somewhat theoretical of

2549
01:41:03,300 --> 01:41:05,820
course but if the if the head is on on

2550
01:41:05,820 --> 01:41:09,360
one request leak in some way oh I I see

2551
01:41:09,360 --> 01:41:10,620
what you mean reduced on that same

2552
01:41:10,620 --> 01:41:12,360
connection again so this is the attack

2553
01:41:12,360 --> 01:41:15,120
we discussed this at the at the last ITF

2554
01:41:15,120 --> 01:41:18,120
and uh so Jonah Jonathan and I thought

2555
01:41:18,120 --> 01:41:21,360
about it for a bit and that's a real

2556
01:41:21,360 --> 01:41:23,880
Attack if you leak that you sent a

2557
01:41:23,880 --> 01:41:27,179
header with this on one request you

2558
01:41:27,179 --> 01:41:29,639
could put that on another request but

2559
01:41:29,639 --> 01:41:31,980
the threat model there is an attacker

2560
01:41:31,980 --> 01:41:32,820
that

2561
01:41:32,820 --> 01:41:36,659
kind is already like inside the TLs and

2562
01:41:36,659 --> 01:41:39,239
so we decided like

2563
01:41:39,239 --> 01:41:41,400
that wasn't practical in practice so we

2564
01:41:41,400 --> 01:41:42,420
added a paragraph to security

2565
01:41:42,420 --> 01:41:44,100
consideration saying that that was out

2566
01:41:44,100 --> 01:41:46,320
of scope uh but it's a real Attack as

2567
01:41:46,320 --> 01:41:47,520
long as you thought of it that's all it

2568
01:41:47,520 --> 01:41:49,800
just it just occurred to me yep no no we

2569
01:41:49,800 --> 01:41:51,659
thought about it like we could if we

2570
01:41:51,659 --> 01:41:53,340
wanted to solve it by putting something

2571
01:41:53,340 --> 01:41:54,600
like the

2572
01:41:54,600 --> 01:41:56,340
stream well the stream ID would be gross

2573
01:41:56,340 --> 01:41:58,619
but something that's unique

2574
01:41:58,619 --> 01:42:00,119
um it's not the end of the world but

2575
01:42:00,119 --> 01:42:01,860
like we thought that in practice it

2576
01:42:01,860 --> 01:42:03,300
wasn't a problem so we document that if

2577
01:42:03,300 --> 01:42:04,679
if this is part of your thread model

2578
01:42:04,679 --> 01:42:07,520
then don't use this

2579
01:42:08,040 --> 01:42:10,679
you could bind to things in the request

2580
01:42:10,679 --> 01:42:12,960
so that's not portable between requests

2581
01:42:12,960 --> 01:42:15,420
for instance the URL

2582
01:42:15,420 --> 01:42:17,159
um I don't want to pull too much in but

2583
01:42:17,159 --> 01:42:19,260
yeah no we could do something like that

2584
01:42:19,260 --> 01:42:21,000
narrow the scope of reuse I don't know

2585
01:42:21,000 --> 01:42:23,699
that that's worthwhile yeah yeah so the

2586
01:42:23,699 --> 01:42:25,679
the advantage if you you have the same

2587
01:42:25,679 --> 01:42:28,380
thing is that then it gets compressed by

2588
01:42:28,380 --> 01:42:30,480
each pack or qpac and we thought that

2589
01:42:30,480 --> 01:42:33,600
was a nicer benefit than this attack I

2590
01:42:33,600 --> 01:42:35,280
mean that's totally we can go either way

2591
01:42:35,280 --> 01:42:36,480
both work

2592
01:42:36,480 --> 01:42:37,739
um it's a it's a you know security

2593
01:42:37,739 --> 01:42:39,719
versus performance trade-off as we often

2594
01:42:39,719 --> 01:42:43,020
have Alex sorry is there clarification

2595
01:42:43,020 --> 01:42:46,199
or follow-up to the discussion okay

2596
01:42:46,199 --> 01:42:48,780
different quickly uh yeah I I Alex

2597
01:42:48,780 --> 01:42:50,639
fromowski Google um I just wanted to add

2598
01:42:50,639 --> 01:42:52,080
that I also previously brought up a

2599
01:42:52,080 --> 01:42:53,280
similar thing around the fact that this

2600
01:42:53,280 --> 01:42:55,980
was a connection oriented export and it

2601
01:42:55,980 --> 01:42:57,600
really did weird things around streams

2602
01:42:57,600 --> 01:42:59,940
so like I think if we uh Incorporated

2603
01:42:59,940 --> 01:43:01,679
Martin's idea about making it be request

2604
01:43:01,679 --> 01:43:03,960
or stream oriented somehow it would also

2605
01:43:03,960 --> 01:43:06,119
make it clear that this wasn't a shared

2606
01:43:06,119 --> 01:43:07,199
resource

2607
01:43:07,199 --> 01:43:09,420
so maybe somewhat repeatable but not 100

2608
01:43:09,420 --> 01:43:11,340
repeatable like URL is definitely a nice

2609
01:43:11,340 --> 01:43:12,540
one that would still get you some of the

2610
01:43:12,540 --> 01:43:14,580
compression yeah well we can we can

2611
01:43:14,580 --> 01:43:18,739
figure that out cool next slide please

2612
01:43:19,920 --> 01:43:23,040
oh boy come on

2613
01:43:23,040 --> 01:43:24,380
there we go

2614
01:43:24,380 --> 01:43:27,239
uh oh so this is kind of a description

2615
01:43:27,239 --> 01:43:29,100
of the solution

2616
01:43:29,100 --> 01:43:31,560
um we renamed the draft to unprompted

2617
01:43:31,560 --> 01:43:33,480
authentication

2618
01:43:33,480 --> 01:43:34,260
um

2619
01:43:34,260 --> 01:43:36,179
I really wanted to call it masked

2620
01:43:36,179 --> 01:43:37,739
authentication but I was told that

2621
01:43:37,739 --> 01:43:39,420
wasn't funny

2622
01:43:39,420 --> 01:43:41,280
um so we went with this at least it's

2623
01:43:41,280 --> 01:43:43,020
clear about what it is

2624
01:43:43,020 --> 01:43:44,639
um the server doesn't tell the client

2625
01:43:44,639 --> 01:43:46,260
that it needs to authenticate the client

2626
01:43:46,260 --> 01:43:48,360
does it without being prompted and it

2627
01:43:48,360 --> 01:43:51,119
indicates a single request and you send

2628
01:43:51,119 --> 01:43:53,580
uh what kind of authentication so

2629
01:43:53,580 --> 01:43:55,619
signature hmac

2630
01:43:55,619 --> 01:43:57,300
um and then

2631
01:43:57,300 --> 01:43:59,820
which algorithm like for a signature

2632
01:43:59,820 --> 01:44:01,380
algorithm or hash algorithm you're using

2633
01:44:01,380 --> 01:44:04,260
so initially we use the IDS and Mt found

2634
01:44:04,260 --> 01:44:06,719
that gross so I grabbed something from

2635
01:44:06,719 --> 01:44:08,400
the Ina registry and I managed to get

2636
01:44:08,400 --> 01:44:11,699
that wrong too but that's fixable

2637
01:44:11,699 --> 01:44:13,560
um I I got some good comments in the

2638
01:44:13,560 --> 01:44:16,020
GitHub I'll that's easily fixed and then

2639
01:44:16,020 --> 01:44:18,739
you know a username and the proof

2640
01:44:18,739 --> 01:44:21,420
base64 encoded

2641
01:44:21,420 --> 01:44:22,080
um

2642
01:44:22,080 --> 01:44:24,420
next slide please but that's not a

2643
01:44:24,420 --> 01:44:25,920
structured header is it

2644
01:44:25,920 --> 01:44:29,159
ah I have a slide for that it it is

2645
01:44:29,159 --> 01:44:30,960
unless I messed it up

2646
01:44:30,960 --> 01:44:34,940
well that first you you messed it up

2647
01:44:36,480 --> 01:44:39,420
um I'll I'll get back to that uh in

2648
01:44:39,420 --> 01:44:41,100
terms like we kind of discussed this

2649
01:44:41,100 --> 01:44:43,320
with the client search idea similarly

2650
01:44:43,320 --> 01:44:45,179
this can't be transparently forwarded

2651
01:44:45,179 --> 01:44:47,100
because it pertains to the TLs

2652
01:44:47,100 --> 01:44:50,460
connection uh so the intermediary checks

2653
01:44:50,460 --> 01:44:53,520
it and then tells Upstream what the

2654
01:44:53,520 --> 01:44:55,080
result was that part we've declared it

2655
01:44:55,080 --> 01:44:56,820
out of scope you could build something

2656
01:44:56,820 --> 01:44:59,280
like the the previous presentation if we

2657
01:44:59,280 --> 01:45:01,080
wanted to but I don't have a use case

2658
01:45:01,080 --> 01:45:03,179
for that so we decided it's out of scope

2659
01:45:03,179 --> 01:45:04,800
of this draft for now and it can be

2660
01:45:04,800 --> 01:45:08,659
built separately next slide

2661
01:45:09,480 --> 01:45:11,520
so what we changed since last time

2662
01:45:11,520 --> 01:45:13,020
because we got some pretty good feedback

2663
01:45:13,020 --> 01:45:14,580
when we presented this so we renamed the

2664
01:45:14,580 --> 01:45:17,520
draft we removed the oids we added the

2665
01:45:17,520 --> 01:45:19,619
security concerns to discuss this the

2666
01:45:19,619 --> 01:45:21,239
issue that we just talked about uh

2667
01:45:21,239 --> 01:45:22,920
Jonathan joined as co-author to make

2668
01:45:22,920 --> 01:45:24,780
sure that I stopped shooting my toes off

2669
01:45:24,780 --> 01:45:27,600
security wise uh and we switched to

2670
01:45:27,600 --> 01:45:30,000
structured Fields maybe I got it wrong

2671
01:45:30,000 --> 01:45:32,520
again I'm an HTTP Enthusiast not an

2672
01:45:32,520 --> 01:45:35,040
expert but I tried to switch to

2673
01:45:35,040 --> 01:45:36,780
structured Fields because I hear they're

2674
01:45:36,780 --> 01:45:39,239
all their age I did a bunch of editorial

2675
01:45:39,239 --> 01:45:42,239
work to try to make the document better

2676
01:45:42,239 --> 01:45:45,019
um next slide please

2677
01:45:45,080 --> 01:45:48,179
so we have an independent implementation

2678
01:45:48,179 --> 01:45:51,780
by The Guardian Project uh so multiple

2679
01:45:51,780 --> 01:45:54,840
entities kind of interested in this uh

2680
01:45:54,840 --> 01:45:56,820
we're wondering is it the HTTP is

2681
01:45:56,820 --> 01:45:58,560
working group interested in seeing this

2682
01:45:58,560 --> 01:46:00,420
progress here should we take it

2683
01:46:00,420 --> 01:46:02,580
elsewhere what do people think

2684
01:46:02,580 --> 01:46:04,440
um is this completely insane is this a

2685
01:46:04,440 --> 01:46:07,080
good idea do other people find it useful

2686
01:46:07,080 --> 01:46:09,300
um any thoughts questions this is my

2687
01:46:09,300 --> 01:46:13,340
last slide so come on up uh Mike

2688
01:46:18,679 --> 01:46:20,760
Mike Bishop

2689
01:46:20,760 --> 01:46:23,639
um I do think it's useful I feel like

2690
01:46:23,639 --> 01:46:25,739
you're kind of re-implementing some of

2691
01:46:25,739 --> 01:46:26,820
what's already an exported

2692
01:46:26,820 --> 01:46:28,800
authenticators

2693
01:46:28,800 --> 01:46:32,219
so you might be able to just get one of

2694
01:46:32,219 --> 01:46:35,580
those and then base64 encode it but I

2695
01:46:35,580 --> 01:46:37,020
don't know

2696
01:46:37,020 --> 01:46:39,060
I don't know what the Gap is on that but

2697
01:46:39,060 --> 01:46:40,800
it might be something to explore so

2698
01:46:40,800 --> 01:46:42,780
exported authenticators don't have that

2699
01:46:42,780 --> 01:46:44,520
property

2700
01:46:44,520 --> 01:46:46,020
um I

2701
01:46:46,020 --> 01:46:48,659
I think from memory and someone can

2702
01:46:48,659 --> 01:46:51,300
correct me if I'm wrong do you need like

2703
01:46:51,300 --> 01:46:53,400
that kind of exchange that kind of leaks

2704
01:46:53,400 --> 01:46:55,380
that the server does this

2705
01:46:55,380 --> 01:46:56,219
um

2706
01:46:56,219 --> 01:46:58,619
yeah okay it has been to a request then

2707
01:46:58,619 --> 01:46:59,520
okay

2708
01:46:59,520 --> 01:47:03,840
all right so we'll um building many of

2709
01:47:03,840 --> 01:47:05,580
the same mechanics without binding to

2710
01:47:05,580 --> 01:47:07,500
that request should be fine

2711
01:47:07,500 --> 01:47:08,940
um yeah at the end of the day it's not

2712
01:47:08,940 --> 01:47:12,000
horribly dissimilar yeah

2713
01:47:12,000 --> 01:47:15,900
um but more broadly written yes I think

2714
01:47:15,900 --> 01:47:18,480
this is of interest it's uh it's a

2715
01:47:18,480 --> 01:47:20,520
useful property and there are already

2716
01:47:20,520 --> 01:47:22,860
HTTP servers that will refuse to admit a

2717
01:47:22,860 --> 01:47:24,119
resource exists unless you're

2718
01:47:24,119 --> 01:47:25,199
authenticated

2719
01:47:25,199 --> 01:47:27,179
they just have some other endpoint that

2720
01:47:27,179 --> 01:47:29,159
you off to first so this would be a nice

2721
01:47:29,159 --> 01:47:31,199
Improvement in security for them

2722
01:47:31,199 --> 01:47:32,780
thank you

2723
01:47:32,780 --> 01:47:36,019
uh Ben

2724
01:47:36,960 --> 01:47:39,020
hi sorry my Network's a little unstable

2725
01:47:39,020 --> 01:47:42,900
uh so uh I definitely want this uh I've

2726
01:47:42,900 --> 01:47:45,540
even sort of been involved with

2727
01:47:45,540 --> 01:47:47,940
deploying A A system that attempts to

2728
01:47:47,940 --> 01:47:50,699
achieve this property but I still don't

2729
01:47:50,699 --> 01:47:54,119
understand the the use case that

2730
01:47:54,119 --> 01:47:56,460
motivates this design

2731
01:47:56,460 --> 01:47:58,619
um thanks for helping me understand a

2732
01:47:58,619 --> 01:48:02,639
bigger piece of it I'm closer but uh

2733
01:48:02,639 --> 01:48:04,260
the thing that I'm most confused about

2734
01:48:04,260 --> 01:48:08,100
is this the if we assume that there is

2735
01:48:08,100 --> 01:48:10,619
no indication that a given origin

2736
01:48:10,619 --> 01:48:13,199
supports this uh

2737
01:48:13,199 --> 01:48:14,580
then

2738
01:48:14,580 --> 01:48:17,219
client presumably must be configured out

2739
01:48:17,219 --> 01:48:20,820
of band with information to know that it

2740
01:48:20,820 --> 01:48:23,280
can use this mechanism with this origin

2741
01:48:23,280 --> 01:48:25,679
but any mechanism that could configure

2742
01:48:25,679 --> 01:48:27,900
this client to know that about this

2743
01:48:27,900 --> 01:48:30,060
origin could have just provided this

2744
01:48:30,060 --> 01:48:32,159
client with a per origin symmetric

2745
01:48:32,159 --> 01:48:34,940
secret a password

2746
01:48:34,940 --> 01:48:37,380
that would allow that the client would

2747
01:48:37,380 --> 01:48:39,300
send unprompted unprompted

2748
01:48:39,300 --> 01:48:41,280
authentication yes

2749
01:48:41,280 --> 01:48:43,980
um to that server but this would not

2750
01:48:43,980 --> 01:48:45,420
authenticate the client right this would

2751
01:48:45,420 --> 01:48:47,340
just reveal the client as being among

2752
01:48:47,340 --> 01:48:48,960
the set of clients that knows this

2753
01:48:48,960 --> 01:48:50,159
information about the server and then

2754
01:48:50,159 --> 01:48:51,480
the server can respond with a challenge

2755
01:48:51,480 --> 01:48:53,159
we can go through standard challenge

2756
01:48:53,159 --> 01:48:56,820
response authentication so why didn't

2757
01:48:56,820 --> 01:48:59,280
you do that

2758
01:48:59,280 --> 01:49:01,800
um so it's the general question about

2759
01:49:01,800 --> 01:49:04,260
shared cryptography versus or symmetric

2760
01:49:04,260 --> 01:49:06,300
cryptography with uh versus asymmetric

2761
01:49:06,300 --> 01:49:09,119
cryptography and yeah pretty much almost

2762
01:49:09,119 --> 01:49:10,800
everything that's done with asymmetric

2763
01:49:10,800 --> 01:49:13,199
you could do it with symmetric and N

2764
01:49:13,199 --> 01:49:16,380
keys but then you kind of have to tie

2765
01:49:16,380 --> 01:49:20,280
the list of potential Origins with the

2766
01:49:20,280 --> 01:49:22,800
keys and you get like a bad scaling

2767
01:49:22,800 --> 01:49:24,840
problem whereas here you can get the

2768
01:49:24,840 --> 01:49:28,020
keys once and then later over time get

2769
01:49:28,020 --> 01:49:30,060
the origin simpler so it gives you like

2770
01:49:30,060 --> 01:49:32,820
more flexibility I mean there's yeah I'm

2771
01:49:32,820 --> 01:49:36,000
I'm not convinced that it actually uh

2772
01:49:36,000 --> 01:49:37,500
provides that kind of efficiency

2773
01:49:37,500 --> 01:49:40,260
Improvement in this case because again

2774
01:49:40,260 --> 01:49:42,060
you need to be provisioned out of band

2775
01:49:42,060 --> 01:49:43,800
with this information about each origin

2776
01:49:43,800 --> 01:49:46,139
that you could potentially contact

2777
01:49:46,139 --> 01:49:48,900
and so you already have and the clients

2778
01:49:48,900 --> 01:49:50,520
are already being provided with with

2779
01:49:50,520 --> 01:49:52,980
order and information here adding

2780
01:49:52,980 --> 01:49:55,320
passwords on top of that doesn't

2781
01:49:55,320 --> 01:49:57,600
increase the the order of information

2782
01:49:57,600 --> 01:49:59,040
that's required to be shared with

2783
01:49:59,040 --> 01:50:01,440
clients and if you want this kind of

2784
01:50:01,440 --> 01:50:03,360
shared cross-origin authentication of

2785
01:50:03,360 --> 01:50:04,679
clients where clients use a single

2786
01:50:04,679 --> 01:50:06,119
credential across or all of these

2787
01:50:06,119 --> 01:50:08,280
Origins you can still do that you no

2788
01:50:08,280 --> 01:50:09,960
longer have to do it within an

2789
01:50:09,960 --> 01:50:11,639
unprompted context for example you can

2790
01:50:11,639 --> 01:50:13,980
do it in a hoba context and then you

2791
01:50:13,980 --> 01:50:15,480
don't have to worry about this thing of

2792
01:50:15,480 --> 01:50:17,340
like I'm bound to the TLs session I

2793
01:50:17,340 --> 01:50:19,739
can't Traverse intermediaries you know

2794
01:50:19,739 --> 01:50:21,719
I'm doing Channel bind

2795
01:50:21,719 --> 01:50:23,040
foreign

2796
01:50:23,040 --> 01:50:25,260
yeah that that really depends on your

2797
01:50:25,260 --> 01:50:26,760
use case it sounds like you don't need

2798
01:50:26,760 --> 01:50:28,560
you don't need the symmetric part here

2799
01:50:28,560 --> 01:50:31,139
thank you well so I'm I'm telling you

2800
01:50:31,139 --> 01:50:32,940
that you don't need it like Guardian

2801
01:50:32,940 --> 01:50:34,920
Project I'm very familiar with their use

2802
01:50:34,920 --> 01:50:36,780
case they do not like the system I'm

2803
01:50:36,780 --> 01:50:39,420
describing is is their system like

2804
01:50:39,420 --> 01:50:40,619
that's

2805
01:50:40,619 --> 01:50:42,780
that's how it already works that's how

2806
01:50:42,780 --> 01:50:45,540
the the bridge distribution system is is

2807
01:50:45,540 --> 01:50:48,179
already defined so I think look I think

2808
01:50:48,179 --> 01:50:49,500
if there's an advantage here I could

2809
01:50:49,500 --> 01:50:51,300
argue that it like it saves a round trip

2810
01:50:51,300 --> 01:50:53,820
like it avoids the need to sort of

2811
01:50:53,820 --> 01:50:56,460
pre-authenticate and then you know and

2812
01:50:56,460 --> 01:50:58,800
then actually authenticate as a as a

2813
01:50:58,800 --> 01:51:01,139
second step you can do it in one go

2814
01:51:01,139 --> 01:51:02,760
maybe that's important in some use case

2815
01:51:02,760 --> 01:51:05,219
but I'm not actually aware of again of a

2816
01:51:05,219 --> 01:51:06,780
use case where that efficiency gain

2817
01:51:06,780 --> 01:51:08,340
would matter

2818
01:51:08,340 --> 01:51:10,800
um and so I think that basically there's

2819
01:51:10,800 --> 01:51:12,800
a more flexible less complicated

2820
01:51:12,800 --> 01:51:15,239
solution here

2821
01:51:15,239 --> 01:51:17,760
um I think we should solve the problem

2822
01:51:17,760 --> 01:51:20,040
um but I I'd like to see this a little

2823
01:51:20,040 --> 01:51:22,920
more strongly motivated for this design

2824
01:51:22,920 --> 01:51:25,139
fair enough yeah I mean complexity is in

2825
01:51:25,139 --> 01:51:26,760
the eye of the Builder so I think we can

2826
01:51:26,760 --> 01:51:30,139
agree to disagree on that one

2827
01:51:30,679 --> 01:51:34,020
well okay yes but like the

2828
01:51:34,020 --> 01:51:35,940
working group work

2829
01:51:35,940 --> 01:51:38,219
um you know is has to ultimately proceed

2830
01:51:38,219 --> 01:51:40,980
by by consensus about this so so that's

2831
01:51:40,980 --> 01:51:42,659
uh you know it's also for the working

2832
01:51:42,659 --> 01:51:44,400
group to consider whether this is the

2833
01:51:44,400 --> 01:51:46,440
right approach all right great thank you

2834
01:51:46,440 --> 01:51:48,179
so let's hear some other opinions then

2835
01:51:48,179 --> 01:51:50,219
Kyle

2836
01:51:50,219 --> 01:51:51,659
Chris

2837
01:51:51,659 --> 01:51:53,460
um I'm it's not completely clear to me

2838
01:51:53,460 --> 01:51:55,980
what is being done here that couldn't be

2839
01:51:55,980 --> 01:51:58,020
done with token binding so can you get a

2840
01:51:58,020 --> 01:51:59,400
bit closer to the mic please

2841
01:51:59,400 --> 01:52:00,840
um yeah what has been done here that

2842
01:52:00,840 --> 01:52:03,980
couldn't be done with token binding

2843
01:52:03,980 --> 01:52:07,560
so from memory it's been a while since

2844
01:52:07,560 --> 01:52:11,219
I've done I've looked into that I

2845
01:52:11,219 --> 01:52:13,320
well I mean one problem is it's it's

2846
01:52:13,320 --> 01:52:17,280
more complicated machinery and it's

2847
01:52:17,280 --> 01:52:20,639
at the uh TLS layer I well of course

2848
01:52:20,639 --> 01:52:22,679
it's at the TLs layer but for I don't

2849
01:52:22,679 --> 01:52:25,619
know if it has the property of client

2850
01:52:25,619 --> 01:52:29,100
speaks first or directly uh tied to a

2851
01:52:29,100 --> 01:52:30,659
request

2852
01:52:30,659 --> 01:52:31,260
um

2853
01:52:31,260 --> 01:52:33,659
so the standard way of doing token

2854
01:52:33,659 --> 01:52:35,639
binding does involve a negotiation at

2855
01:52:35,639 --> 01:52:37,679
the TLs layer

2856
01:52:37,679 --> 01:52:40,080
um but I think that could be emitted and

2857
01:52:40,080 --> 01:52:43,860
get the property that you have here in

2858
01:52:43,860 --> 01:52:45,540
effectively the same way where the

2859
01:52:45,540 --> 01:52:47,040
client would derively

2860
01:52:47,040 --> 01:52:50,760
uh ekm from the TLs connection and then

2861
01:52:50,760 --> 01:52:53,280
create a signature of it put in the

2862
01:52:53,280 --> 01:52:55,920
token playing header so I would have to

2863
01:52:55,920 --> 01:52:57,840
double check from memory there was a lot

2864
01:52:57,840 --> 01:53:00,420
more involved uh in token binding and

2865
01:53:00,420 --> 01:53:02,219
the interactions with the TLs layer that

2866
01:53:02,219 --> 01:53:05,100
made it uh quite a more complicated

2867
01:53:05,100 --> 01:53:08,460
beast and would be harder to just have

2868
01:53:08,460 --> 01:53:10,500
like a little token that you send uh I

2869
01:53:10,500 --> 01:53:12,000
can that's a reasonable question I can

2870
01:53:12,000 --> 01:53:13,980
give you a let me do some research I can

2871
01:53:13,980 --> 01:53:15,780
give you a better answer

2872
01:53:15,780 --> 01:53:17,100
um because it's been a while since I've

2873
01:53:17,100 --> 01:53:19,560
looked into token by Nick

2874
01:53:19,560 --> 01:53:22,460
anyone else

2875
01:53:23,699 --> 01:53:25,980
I'm kind of wondering if we could get a

2876
01:53:25,980 --> 01:53:27,600
sense of the room of who's interested in

2877
01:53:27,600 --> 01:53:29,159
continuing the discussion no that would

2878
01:53:29,159 --> 01:53:31,500
be great yeah so so without making any

2879
01:53:31,500 --> 01:53:32,820
commitments or saying that yes we'll

2880
01:53:32,820 --> 01:53:34,139
drop something or that you're going to

2881
01:53:34,139 --> 01:53:36,239
implement it just a show of hands uh

2882
01:53:36,239 --> 01:53:37,800
online as well as in the room I don't

2883
01:53:37,800 --> 01:53:39,540
know how it works online but we'll sort

2884
01:53:39,540 --> 01:53:40,619
stuff out

2885
01:53:40,619 --> 01:53:42,659
um uh who's interested in continuing

2886
01:53:42,659 --> 01:53:44,820
this uh uh

2887
01:53:44,820 --> 01:53:46,860
this discussion that there might be

2888
01:53:46,860 --> 01:53:49,460
something here

2889
01:53:50,340 --> 01:53:53,760
okay so I see a smattering of hands in

2890
01:53:53,760 --> 01:53:54,840
the room

2891
01:53:54,840 --> 01:53:57,480
including some implementers online I'm

2892
01:53:57,480 --> 01:53:58,560
sorry I

2893
01:53:58,560 --> 01:54:00,659
this big sign here says please do not

2894
01:54:00,659 --> 01:54:02,100
touch

2895
01:54:02,100 --> 01:54:04,080
so oh because you're presenting full

2896
01:54:04,080 --> 01:54:07,699
screen oh that's what's happened okay

2897
01:54:07,920 --> 01:54:09,239
I guess

2898
01:54:09,239 --> 01:54:12,420
they don't have a way just to

2899
01:54:12,420 --> 01:54:13,920
cue if you're interested in your online

2900
01:54:13,920 --> 01:54:16,199
and then get out of the queue let's do

2901
01:54:16,199 --> 01:54:18,678
it that way

2902
01:54:18,840 --> 01:54:21,860
just cue yourself

2903
01:54:22,980 --> 01:54:24,179
we're getting plus ones in the tit

2904
01:54:24,179 --> 01:54:25,800
that's good and I see a few people in

2905
01:54:25,800 --> 01:54:26,760
the queue

2906
01:54:26,760 --> 01:54:28,619
that's helpful information we're gonna

2907
01:54:28,619 --> 01:54:30,239
we're gonna adapt the tools we're gonna

2908
01:54:30,239 --> 01:54:33,000
pay some calories oh it's funny you

2909
01:54:33,000 --> 01:54:34,460
could see the people in the queue then

2910
01:54:34,460 --> 01:54:37,440
falling down the infinity well yes don't

2911
01:54:37,440 --> 01:54:38,900
don't look too hard

2912
01:54:38,900 --> 01:54:40,739
all right I think that's good

2913
01:54:40,739 --> 01:54:41,880
information it sounds like there's at

2914
01:54:41,880 --> 01:54:43,020
least some interesting continuing the

2915
01:54:43,020 --> 01:54:46,679
discussion uh uh so let's do that cool

2916
01:54:46,679 --> 01:54:50,159
what would you like from the authors are

2917
01:54:50,159 --> 01:54:52,560
we at the level of an adoption call are

2918
01:54:52,560 --> 01:54:54,780
we not there yet I I don't know I'll

2919
01:54:54,780 --> 01:54:56,520
talk to Tommy I I suspect we're not

2920
01:54:56,520 --> 01:54:58,020
quite there yet but maybe a little more

2921
01:54:58,020 --> 01:54:59,760
on list discussion some exploring of the

2922
01:54:59,760 --> 01:55:02,100
issues like Ben said making sure we

2923
01:55:02,100 --> 01:55:03,540
understand the use case and why the

2924
01:55:03,540 --> 01:55:05,159
solution is the right General starting

2925
01:55:05,159 --> 01:55:07,860
point for that sounds great yeah yeah

2926
01:55:07,860 --> 01:55:10,139
awesome if I'll see you all on the list

2927
01:55:10,139 --> 01:55:11,820
on this topic if you're interested one

2928
01:55:11,820 --> 01:55:12,719
more question for you actually what's

2929
01:55:12,719 --> 01:55:16,739
your sense of urgency around this uh not

2930
01:55:16,739 --> 01:55:21,119
really uh I mean it's uh it will be nice

2931
01:55:21,119 --> 01:55:23,040
because we have a use case I mean you

2932
01:55:23,040 --> 01:55:24,900
know you can ship thing without having a

2933
01:55:24,900 --> 01:55:26,699
standard but it will be a nice bow tie

2934
01:55:26,699 --> 01:55:28,679
to the mask story as well to have all

2935
01:55:28,679 --> 01:55:31,980
these things like wrapped up so

2936
01:55:31,980 --> 01:55:34,199
yeah all right thank you

2937
01:55:34,199 --> 01:55:36,900
and uh we've got five minutes left so

2938
01:55:36,900 --> 01:55:39,360
unless we have any other business I

2939
01:55:39,360 --> 01:55:40,800
think we can close for today and we'll

2940
01:55:40,800 --> 01:55:43,020
see everyone on Friday

2941
01:55:43,020 --> 01:55:45,739
thank you

2942
01:56:00,300 --> 01:56:03,260
what do up here

2943
01:56:14,400 --> 01:56:17,420
great presentations

2944
01:56:23,159 --> 01:56:24,780
so

2945
01:56:24,780 --> 01:56:27,679
I feel like there's a lot

2946
01:56:29,699 --> 01:56:32,419
of iTunes

2947
01:56:36,560 --> 01:56:39,980
and it is

2948
01:56:51,480 --> 01:56:53,540
um

2949
01:56:56,100 --> 01:56:59,780
yeah four years I believe you

2950
01:57:04,320 --> 01:57:05,639
I like

2951
01:57:05,639 --> 01:57:07,679
I haven't thought

2952
01:57:07,679 --> 01:57:10,260
as he was presenting I was

2953
01:57:10,260 --> 01:57:11,820
what's going to be talked about tomorrow

2954
01:57:11,820 --> 01:57:15,320
which is the protests

2955
01:57:16,139 --> 01:57:18,780
public resources available that look

2956
01:57:18,780 --> 01:57:21,019
like

2957
01:57:24,139 --> 01:57:28,580
for authentication that would be

2958
01:57:32,940 --> 01:57:36,480
us anymore

2959
01:57:40,080 --> 01:57:42,980
it's weird

